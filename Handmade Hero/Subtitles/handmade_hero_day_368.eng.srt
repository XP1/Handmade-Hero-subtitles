1
00:00:02,100 --> 00:00:04,400
Hello everyone and welcome to handmade hero show.

2
00:00:04,400 --> 00:00:06,700
We could a complete game live on stream.

3
00:00:08,400 --> 00:00:12,000
We did a bunch of work last weekend.

4
00:00:12,400 --> 00:00:12,700
Hmm.

5
00:00:13,800 --> 00:00:15,500
Well, I guess last Saturday Sunday?

6
00:00:15,500 --> 00:00:18,500
I don't know if we do any work on Saturday for it, but we did a bunch

7
00:00:18,500 --> 00:00:18,800
of work.

8
00:00:18,800 --> 00:00:24,800
Last Sunday to enable multi sample anti-aliasing which was made a

9
00:00:24,800 --> 00:00:27,100
little bit, artificially, more difficult than it.

10
00:00:27,100 --> 00:00:30,400
Possibly had to be because it looks like maybe there's some problem

11
00:00:30,400 --> 00:00:35,800
with the opengl drivers on this machine that don't let us set srgb

12
00:00:35,800 --> 00:00:36,500
rendering.

13
00:00:37,600 --> 00:00:40,800
For a multi sample, render Target, even though you are supposed to be

14
00:00:40,800 --> 00:00:46,300
able to set multi sample anti-aliasing, and srgb on on the same render

15
00:00:46,300 --> 00:00:48,700
Target even on AMD Hardware supposedly.

16
00:00:50,900 --> 00:00:54,000
So we're not really sure what's up with that, but this is a very old

17
00:00:54,000 --> 00:00:55,700
machine so maybe that's part of the problem.

18
00:00:55,700 --> 00:00:58,700
But at the very least what I can tell you is that this is pretty much

19
00:00:58,700 --> 00:01:02,200
why PC development is always so much of a pain in the butt.

20
00:01:02,200 --> 00:01:06,000
It's because the hardware is so variable in the drivers are so

21
00:01:06,000 --> 00:01:10,400
unreliable that you typically end up in situations where you can't

22
00:01:10,400 --> 00:01:13,500
just count on stuff, that's documented to work to actually work.

23
00:01:13,500 --> 00:01:15,600
That's not typically the way things go.

24
00:01:15,600 --> 00:01:16,900
And it's a bit of a bummer.

25
00:01:16,900 --> 00:01:19,600
One of the reasons that people like console development,

26
00:01:19,800 --> 00:01:25,600
Fact is just because the platform does a better job of actually saying

27
00:01:25,600 --> 00:01:29,400
what it can do and doing it when it is asked.

28
00:01:30,800 --> 00:01:35,800
That said we still have to deal with the PC obviously and it's a good

29
00:01:35,800 --> 00:01:37,500
platform for everything else.

30
00:01:37,500 --> 00:01:40,800
It's certainly a nicer platform to deal with because it's open at

31
00:01:40,800 --> 00:01:42,900
least as long as Microsoft continues to let it be.

32
00:01:43,400 --> 00:01:47,300
And so you know, it's one of those things that you got to take the

33
00:01:47,300 --> 00:01:49,500
good and the bad together in some sense.

34
00:01:50,300 --> 00:01:55,200
And, and just deal with the fact that the driver situation and dealing

35
00:01:55,200 --> 00:01:59,800
with Graphics GPU access on these platforms is really unsatisfying.

36
00:02:00,600 --> 00:02:05,000
Anyway, let's go ahead and go to the code here.

37
00:02:07,600 --> 00:02:09,400
Today is day Three, Sixty eight.

38
00:02:09,900 --> 00:02:13,500
And so if you want to follow along at home day, 367 is the code start

39
00:02:13,500 --> 00:02:13,800
with.

40
00:02:14,600 --> 00:02:18,000
We have on handmade opengl here.

41
00:02:18,800 --> 00:02:22,400
We have already done actually I gotta open that project file as well,

42
00:02:22,400 --> 00:02:23,500
so we have all our code loaded.

43
00:02:23,500 --> 00:02:24,200
We can build.

44
00:02:24,200 --> 00:02:24,700
There we go.

45
00:02:26,400 --> 00:02:28,100
We have running now.

46
00:02:28,100 --> 00:02:32,100
Something that in theory creates the render targets and also renders

47
00:02:32,100 --> 00:02:36,500
to the render targets, but as you can see, by this black screen, we

48
00:02:36,500 --> 00:02:36,800
never

49
00:02:37,000 --> 00:02:41,200
Any graphics, the reason for that is we have not actually put in any

50
00:02:41,200 --> 00:02:47,100
calls to actually get the the buffers that we render out to the

51
00:02:47,100 --> 00:02:47,700
screen.

52
00:02:48,300 --> 00:02:52,600
So if you recall how this Loop is working in the opengl renderer, what

53
00:02:52,600 --> 00:02:54,000
happens is that the beginning

54
00:02:55,300 --> 00:02:59,800
Goes through and allocates render buffers for.

55
00:03:00,100 --> 00:03:04,100
About Kate's textures for all of the frame buffers.

56
00:03:04,100 --> 00:03:07,400
We think we might need now in our case currently because there aren't

57
00:03:07,400 --> 00:03:11,600
any rooms stacked on top of each other or anything like that and we

58
00:03:11,600 --> 00:03:15,300
don't really have any other reason for it at the moment we don't have

59
00:03:15,300 --> 00:03:19,600
more than one so we're only going to presumably in any given frame.

60
00:03:20,700 --> 00:03:24,600
When we're looking at the contents of the command list were only going

61
00:03:24,600 --> 00:03:25,800
to see this.

62
00:03:25,800 --> 00:03:29,800
Max render Target index being equal to 1 and

63
00:03:30,000 --> 00:03:32,800
So the first time through, we're going to create one of these buffers

64
00:03:32,800 --> 00:03:34,900
and that's all we're going to ever use.

65
00:03:35,200 --> 00:03:40,000
Now what we can see here is that we've changed this from what it used

66
00:03:40,000 --> 00:03:43,500
to be two calling GL, text image to Dee's what it used to call.

67
00:03:43,600 --> 00:03:47,800
We're now calling GL text image, 2D multi sample and you can see here,

68
00:03:47,800 --> 00:03:54,300
we've had to pass GL r g b A8 instead of the potentially srgb version

69
00:03:54,700 --> 00:03:59,900
and the reason for that is again, because this

70
00:04:00,000 --> 00:04:03,400
Card for whatever reason, does not seem to be allowing us to actually

71
00:04:03,400 --> 00:04:05,800
pass srgb.

72
00:04:06,200 --> 00:04:09,800
Now, one thing that I do want to address real quickly just before we

73
00:04:09,800 --> 00:04:14,600
get any further into it is, if we go to the GitHub Martin's has

74
00:04:14,600 --> 00:04:20,600
helpfully posted for us, a really great bug report work, you found

75
00:04:20,600 --> 00:04:24,200
something that we were trying to find, I was looking for it in the

76
00:04:24,200 --> 00:04:29,400
documentation and we couldn't find it the other just last week when

77
00:04:29,400 --> 00:04:29,800
we're doing this.

78
00:04:29,900 --> 00:04:32,300
This and he found it for us.

79
00:04:32,600 --> 00:04:38,900
If I go here to the handmade CPP project and I go to the issues issues

80
00:04:38,900 --> 00:04:39,400
list.

81
00:04:40,200 --> 00:04:44,800
It's right in here, you can see where we've got this, this stuff here.

82
00:04:45,400 --> 00:04:45,800
Oops.

83
00:04:47,300 --> 00:04:51,100
And you can see him talking about Geo, Mac samples -1, and he said

84
00:04:51,100 --> 00:04:53,300
that Wiki where we looked it up was wrong.

85
00:04:54,100 --> 00:04:56,500
And he looked it up in the spec, which we had been trying to find it

86
00:04:56,500 --> 00:04:57,600
failed to find.

87
00:04:58,400 --> 00:04:59,800
And so what it says here

88
00:05:00,000 --> 00:05:02,200
The real max, let's amplify for textures.

89
00:05:02,200 --> 00:05:04,300
Can be achieved by creating GL Max color texture samples.

90
00:05:04,500 --> 00:05:07,400
GMX a vestment for render buffer objects from our frame buffer

91
00:05:07,400 --> 00:05:08,000
extension.

92
00:05:08,800 --> 00:05:12,400
That's what he put in there now, I'm not 100% sure about this.

93
00:05:12,400 --> 00:05:15,400
The only reason that I'm not sure about this is, I don't think that

94
00:05:15,400 --> 00:05:19,800
that I feel like that's the actual number of Samplers, you can read

95
00:05:19,800 --> 00:05:20,300
from

96
00:05:22,900 --> 00:05:24,900
In a texture, right?

97
00:05:25,400 --> 00:05:27,600
Meaning, not an texture in that.

98
00:05:28,200 --> 00:05:33,400
So in a texture, in a pixel Shader, basically, the fragment Shader,

99
00:05:33,400 --> 00:05:36,600
which we haven't written yet, I'm pretty sure Jill Max color texture

100
00:05:36,600 --> 00:05:42,500
samples is how many samples you can take of Textures in a Shader.

101
00:05:42,700 --> 00:05:47,000
So if you want to take, you know, 32 samples from, you know, Textures

102
00:05:47,500 --> 00:05:51,800
in a Shader that this would say, whether you could do that or not.

103
00:05:51,800 --> 00:05:52,600
And whether if this

104
00:05:52,700 --> 00:05:54,700
number is high enough, then you can.

105
00:05:54,700 --> 00:05:57,000
And if it's too low, then you can't write.

106
00:05:57,000 --> 00:05:58,700
And I'm pretty sure that's, that's what that does.

107
00:05:59,000 --> 00:05:59,700
So I don't

108
00:06:00,000 --> 00:06:01,300
That's actually the correct one.

109
00:06:01,600 --> 00:06:09,100
Furthermore our, our texture multi sample is again, I'm just not sure

110
00:06:09,100 --> 00:06:12,100
about it because that's specifically talking about grabbing it from a

111
00:06:12,100 --> 00:06:12,700
texture.

112
00:06:13,200 --> 00:06:17,600
Now, I guess that's what I was thinking, but Martin's is almost

113
00:06:17,600 --> 00:06:18,500
always, right?

114
00:06:18,700 --> 00:06:22,000
So that's the so I guess that's what I would say.

115
00:06:22,700 --> 00:06:27,100
So what I assume then is happening here is maybe what we're talking

116
00:06:27,100 --> 00:06:29,800
about is that GL Max color texture samples.

117
00:06:31,500 --> 00:06:36,500
Is actually talking about how many if you're creating a texture, how

118
00:06:36,500 --> 00:06:39,100
many samples the texture could have?

119
00:06:41,100 --> 00:06:43,600
Like, meaning.

120
00:06:44,200 --> 00:06:48,700
If a, if you're creating a render buffer object, there's a certain

121
00:06:48,700 --> 00:06:51,600
number of multi sampling certain multi, sampling level.

122
00:06:51,600 --> 00:06:54,500
You can do there and if you're creating a texture object, there's a

123
00:06:54,500 --> 00:06:57,900
different level of multi sample, you can do there, right?

124
00:07:00,600 --> 00:07:01,200
I don't know.

125
00:07:01,700 --> 00:07:06,300
So again, because of the fact that Martin's is almost always, right?

126
00:07:06,300 --> 00:07:10,900
That makes me believe that we should probably take a look at these

127
00:07:10,900 --> 00:07:15,200
here, at the very least, just so we can see what's going on and try to

128
00:07:15,200 --> 00:07:18,500
figure out what the actual rationale is there.

129
00:07:18,500 --> 00:07:20,800
Exactly, maybe take a look at that.

130
00:07:24,500 --> 00:07:27,700
Maybe take a look at that extension as well because the extensions

131
00:07:27,700 --> 00:07:30,600
usually where things are explained in the best way.

132
00:07:31,600 --> 00:07:38,300
So if I go ahead and open up the the core our header, I'm going to

133
00:07:38,300 --> 00:07:41,000
grab that Max color texture samples,

134
00:07:50,700 --> 00:07:52,500
and if I go up here and just paste that in,

135
00:07:56,600 --> 00:08:00,100
We should now be able to get that value.

136
00:08:00,300 --> 00:08:01,500
I got to set a breakpoint though.

137
00:08:10,200 --> 00:08:11,600
So they're both equal to 8.

138
00:08:11,600 --> 00:08:16,700
In this case, which makes me think that Martin's is in fact, right?

139
00:08:17,100 --> 00:08:21,400
Because the number of colors samples, you could take in the Shader

140
00:08:22,100 --> 00:08:23,700
would definitely be more than that.

141
00:08:23,700 --> 00:08:24,400
I would think.

142
00:08:26,100 --> 00:08:29,800
So I think Martin's is definitely correct on this, and we should

143
00:08:29,800 --> 00:08:30,500
change it.

144
00:08:31,700 --> 00:08:37,100
Like I said, Martin's is pretty much spot-on, so when he sends

145
00:08:37,100 --> 00:08:41,900
something in, you'd you'd better pay attention, that's been my

146
00:08:42,100 --> 00:08:45,600
experience anyway, so let's go ahead and get rid of this.

147
00:08:45,700 --> 00:08:47,100
Oops, I don't need to get rid of that.

148
00:08:47,900 --> 00:08:52,500
Let's get rid of this and use that value.

149
00:08:52,500 --> 00:08:56,600
Now, this is not going to help us, unfortunately, it's because they

150
00:08:56,600 --> 00:08:59,500
were both set to the same value, that that's obviously has nothing to

151
00:08:59,500 --> 00:08:59,700
do.

152
00:08:59,700 --> 00:08:59,900
And

153
00:09:00,000 --> 00:09:00,800
Tested a bunch of values.

154
00:09:00,800 --> 00:09:04,100
Anyway, does nothing to do with the problem that we really have here

155
00:09:04,100 --> 00:09:06,200
of these services.

156
00:09:06,200 --> 00:09:10,800
Not having the correct draw format, they should be srgb and they're

157
00:09:10,800 --> 00:09:11,500
not.

158
00:09:11,500 --> 00:09:15,500
So that's a bit of an issue, but what are you gonna do, anyway, what

159
00:09:15,500 --> 00:09:16,600
we need to do now?

160
00:09:17,500 --> 00:09:20,700
To finish this up is at some point?

161
00:09:20,700 --> 00:09:23,400
Remember these are all rendering to textures.

162
00:09:23,400 --> 00:09:28,400
Now at some point at the end, we need to actually Target the real

163
00:09:28,400 --> 00:09:32,000
frame buffer and we need to Target that frame buffer.

164
00:09:32,000 --> 00:09:36,700
Because the only way we can actually present something to the the

165
00:09:36,700 --> 00:09:43,100
actual user in opengl is to at some point draw into frame buffer, zero

166
00:09:43,100 --> 00:09:44,100
frame buffer.

167
00:09:44,100 --> 00:09:47,100
Zero is the one that's the actual backing store for the window that

168
00:09:47,100 --> 00:09:47,300
will.

169
00:09:47,500 --> 00:09:52,400
Actually get displayed when we call swap buffers and so in order to

170
00:09:52,400 --> 00:09:55,400
have our stuff displayed through swap buffers, we have to make sure

171
00:09:55,600 --> 00:09:57,000
that we draw to it eventually.

172
00:09:57,000 --> 00:10:03,900
Now, when we want to draw to it, you can see here, I've saved the GL

173
00:10:03,900 --> 00:10:09,200
viewport call, which will set up the same viewport to the main buffer

174
00:10:09,200 --> 00:10:10,500
that we had wanted before.

175
00:10:10,500 --> 00:10:13,700
And that's again, in case the resolution, we get needs to be

176
00:10:13,700 --> 00:10:17,100
letterboxed for our game or anything else like that.

177
00:10:18,100 --> 00:10:21,300
And then we've got a GL B, frame by Furcal here at that's the last

178
00:10:21,300 --> 00:10:23,900
thing we need to do GL.

179
00:10:23,900 --> 00:10:29,000
B flame buffer is is, I guess not quite what we?

180
00:10:31,200 --> 00:10:32,300
It's a little misleading.

181
00:10:32,300 --> 00:10:33,300
I guess is what I would say.

182
00:10:33,600 --> 00:10:36,500
The reason that we have to call GL blitt frame buffer, even though

183
00:10:36,500 --> 00:10:39,500
we're talking about taking a texture and put into the screen, is

184
00:10:39,500 --> 00:10:44,400
because as far as I could tell from the documentation and opengl the

185
00:10:44,400 --> 00:10:47,300
way to do a multi sample resolved,

186
00:10:47,500 --> 00:10:50,700
Is to call GL but frame buffer even if it's in a texture.

187
00:10:50,700 --> 00:10:55,500
So you bind your multi sample texture to a frame buffer, you do the

188
00:10:55,500 --> 00:11:00,400
blitz flame buffer from that synthetic frame buffer to frame back from

189
00:11:00,400 --> 00:11:02,100
zero and that does the resolved.

190
00:11:02,100 --> 00:11:05,600
Now what do I mean when I say resolved well resolve is just the term

191
00:11:05,600 --> 00:11:07,700
that I don't know why it's a term that's used for.

192
00:11:07,700 --> 00:11:10,200
It's the term that they came up with when they were first talking

193
00:11:10,200 --> 00:11:13,800
about this where if you have a buffer that's a multi sample buffer

194
00:11:13,800 --> 00:11:17,300
like I described last weekend if you want to

195
00:11:17,400 --> 00:11:20,900
Take that set of multi samples and produce actual colors from them.

196
00:11:20,900 --> 00:11:24,500
You have to like average them together or do some kind of a filter on

197
00:11:24,500 --> 00:11:27,700
them to produce final pixel values that you can show on the screen.

198
00:11:27,700 --> 00:11:31,700
Because remember multi sample means more than one sample per pixel.

199
00:11:31,700 --> 00:11:35,700
In our case, we can't display more than one sample per pixel.

200
00:11:35,700 --> 00:11:40,600
The monitor has to display a pixel in each pixel its pixel to pixel,

201
00:11:40,600 --> 00:11:41,200
right?

202
00:11:41,400 --> 00:11:45,400
It doesn't have the option of showing more than one color sample in a

203
00:11:45,400 --> 00:11:46,000
given pixel.

204
00:11:46,000 --> 00:11:47,300
So we have to smoosh those.

205
00:11:47,400 --> 00:11:50,900
Our samples down to produce a single output color sample for every

206
00:11:50,900 --> 00:11:54,200
pixel and we need the graphics card to do that.

207
00:11:57,400 --> 00:11:59,500
We can't write a for I Loop to do it, right.

208
00:12:00,100 --> 00:12:01,400
Because we're on the CPU here.

209
00:12:01,400 --> 00:12:04,600
So if the tell the graphics card to do it, either by uploading it,

210
00:12:04,600 --> 00:12:07,100
some code or calling something that already knows how to do in this

211
00:12:07,100 --> 00:12:07,300
case.

212
00:12:07,300 --> 00:12:10,100
It already does know how to do it, so we need to sort of tell it to do

213
00:12:10,100 --> 00:12:10,800
that thing.

214
00:12:12,600 --> 00:12:13,500
GL blood frame, buffer.

215
00:12:13,500 --> 00:12:17,700
Looks like the way to do it and let's go ahead and take a look at

216
00:12:17,700 --> 00:12:17,900
Doc's.

217
00:12:17,900 --> 00:12:18,700
Touchy land.

218
00:12:18,700 --> 00:12:21,700
See what that GL plis flame buffer call.

219
00:12:21,700 --> 00:12:24,600
Looks like here is the earliest version of it.

220
00:12:24,800 --> 00:12:25,900
You can see it here.

221
00:12:25,900 --> 00:12:33,400
It's got sort of a source, a source rectangle, and a desk rectangle,

222
00:12:33,400 --> 00:12:35,300
which is something we're obviously very familiar with.

223
00:12:35,300 --> 00:12:35,900
Here we go.

224
00:12:41,600 --> 00:12:43,000
Here we are.

225
00:12:44,700 --> 00:12:52,000
And these rectangles, as far as I know if they're an integer

226
00:12:52,000 --> 00:12:57,000
coordinates, that would suggest that this is bypassing the viewport

227
00:12:57,000 --> 00:13:00,400
potentially, which might mean that this is not a relevant call.

228
00:13:01,000 --> 00:13:04,500
I don't know, hopefully it'll say in the spec, otherwise we'll have to

229
00:13:04,500 --> 00:13:05,300
look it up somewhere.

230
00:13:07,300 --> 00:13:08,100
So let's take a look.

231
00:13:09,000 --> 00:13:13,900
Otherwise we've got sort of a mask, we only need to use the GL color,

232
00:13:13,900 --> 00:13:17,400
buffer, bit in this case, we don't need the depth buffer or the sense

233
00:13:17,400 --> 00:13:20,000
of buffer to copy because we've already done any work, we were going

234
00:13:20,000 --> 00:13:23,800
to do with those, we will have done them in the, in the renderer

235
00:13:23,800 --> 00:13:26,100
proper up above this call.

236
00:13:27,000 --> 00:13:29,500
So we just need the the color buffer bit.

237
00:13:29,900 --> 00:13:34,300
And then, finally, the filter specifies the interpolation, if the

238
00:13:34,300 --> 00:13:37,000
image is stretched, in this case, I assume we want.

239
00:13:37,600 --> 00:13:38,300
Nearest.

240
00:13:38,500 --> 00:13:39,000
Right?

241
00:13:39,200 --> 00:13:42,800
Because we do want it to sort of do some averaging here, I'm sorry.

242
00:13:43,100 --> 00:13:45,500
Linear because we do want to some averaging it.

243
00:13:45,500 --> 00:13:51,100
Now what I don't know is what exactly happens here with with multi

244
00:13:51,100 --> 00:13:54,500
sample, so I'm going to just double check to see if we can

245
00:14:02,300 --> 00:14:05,300
if we can get a little bit more information about that here,

246
00:14:07,300 --> 00:14:08,000
there we go.

247
00:14:09,800 --> 00:14:13,700
This is, of course, the unreliable Wiki but here it is.

248
00:14:19,600 --> 00:14:24,900
So you can see here, right here is where they do the resolved and so

249
00:14:24,900 --> 00:14:31,000
I'm assuming that is yeah that that's that's what we want there.

250
00:14:39,300 --> 00:14:43,200
And it doesn't really say anything other than doing this, but will

251
00:14:43,200 --> 00:14:45,400
automatically resolve the FBO.

252
00:14:46,700 --> 00:14:50,200
So it looks like, that's pretty much all.

253
00:14:50,200 --> 00:14:52,800
We would need to do since we don't need to micro program it at the

254
00:14:52,800 --> 00:14:53,600
moment.

255
00:14:53,900 --> 00:14:56,500
So in theory, if we're right, that will just work.

256
00:14:56,600 --> 00:14:59,500
So that's fine right now.

257
00:14:59,500 --> 00:14:59,800
What we

258
00:15:00,000 --> 00:15:04,300
To do here obviously is we need to make sure that we can actually bind

259
00:15:05,300 --> 00:15:06,400
both frame buffers.

260
00:15:08,300 --> 00:15:14,000
And you can see in here where we've done this bind before, let's take

261
00:15:14,000 --> 00:15:18,900
a look here in mind, frame buffer.

262
00:15:24,500 --> 00:15:29,500
You can see here, we've got Global frame buffer handles Target index.

263
00:15:29,700 --> 00:15:32,300
What we want to do is bind that zero with frame buffer.

264
00:15:34,700 --> 00:15:37,100
And we are suppose, we also want to make sure that we actually have

265
00:15:37,100 --> 00:15:38,200
any frame buffers at all.

266
00:15:38,200 --> 00:15:39,500
If nobody did anything.

267
00:15:39,700 --> 00:15:43,500
If Max render Target index is is 0.

268
00:15:43,500 --> 00:15:47,000
I suppose, then we wouldn't want to do anything.

269
00:15:55,200 --> 00:15:55,700
Here we go.

270
00:16:00,800 --> 00:16:03,600
And so when we go ahead and find the frame buffer, we're going to have

271
00:16:03,600 --> 00:16:06,700
to bind these two frame buffers.

272
00:16:06,700 --> 00:16:10,300
Here we need the global frame, buffer handle zero.

273
00:16:10,800 --> 00:16:13,400
That's the one we want to read from this is when we want to write to.

274
00:16:14,000 --> 00:16:17,300
And so when we actually go ahead and do that, you can see we need to

275
00:16:17,300 --> 00:16:19,600
specify each one into a slot.

276
00:16:19,700 --> 00:16:23,600
That GL, blind frame, buffer will understand, right?

277
00:16:23,600 --> 00:16:28,700
So we want the GL draw frame buffer, to be free.

278
00:16:28,900 --> 00:16:33,000
40 and we want the read frame buffer to be our Global frame buffer

279
00:16:33,000 --> 00:16:33,400
handle.

280
00:16:33,400 --> 00:16:36,600
So we want to read from this one and we want to draw to this one,

281
00:16:36,800 --> 00:16:37,000
right?

282
00:16:37,000 --> 00:16:38,200
That's our goal here.

283
00:16:39,200 --> 00:16:43,700
So then we come through here and we do our GL viewport, we set up the

284
00:16:43,700 --> 00:16:47,100
viewport and then we do the blitt and all I really need to know.

285
00:16:47,100 --> 00:16:51,700
Now is what coordinates these are in now for the source, it should be

286
00:16:51,700 --> 00:16:56,000
fairly straightforward because it's just going to be 0 0.

287
00:16:56,000 --> 00:16:58,700
We know that these are entitled.

288
00:16:58,800 --> 00:17:03,700
By early always created exactly the same size so we know you can see

289
00:17:03,700 --> 00:17:04,200
here.

290
00:17:07,000 --> 00:17:09,500
Where's are not fair.

291
00:17:09,599 --> 00:17:10,200
Here we go.

292
00:17:11,000 --> 00:17:15,500
You can see when we create them here, we always do them the same get

293
00:17:15,500 --> 00:17:17,800
with get height of the draw region, right?

294
00:17:17,900 --> 00:17:21,700
So we know that that's going to be if that's going to look like this

295
00:17:22,000 --> 00:17:23,800
for the source, no matter what.

296
00:17:24,000 --> 00:17:27,200
Because the source never has a shrunk viewport to it.

297
00:17:27,200 --> 00:17:30,300
It never has anything weird going on at the moment.

298
00:17:30,300 --> 00:17:32,200
If it does later, we'll have to change that.

299
00:17:32,800 --> 00:17:35,700
But then we've got this destination when here and the question is just

300
00:17:35,900 --> 00:17:38,200
Does the destination one follow this?

301
00:17:38,500 --> 00:17:43,700
Is it, you know is it the draw region style stuff here that we need to

302
00:17:43,700 --> 00:17:45,400
do is or

303
00:17:48,400 --> 00:17:51,700
Is it is it relative to the viewport in which case we should pass the

304
00:17:51,700 --> 00:17:53,100
exact same things to it?

305
00:17:53,600 --> 00:17:54,900
And that's all I really need to know.

306
00:17:55,300 --> 00:17:56,400
So, let's see.

307
00:17:57,400 --> 00:17:59,800
Let's see the extra drawer by for Izzard.

308
00:18:00,000 --> 00:18:04,900
Me, it's going in offset, the lower bounds of the wrecked, our

309
00:18:04,900 --> 00:18:07,500
inclusive, the oppressor exclusive.

310
00:18:09,700 --> 00:18:12,700
So it's not really telling me here.

311
00:18:13,300 --> 00:18:14,300
I'm afraid.

312
00:18:15,800 --> 00:18:19,500
So I guess I don't know what to do about that.

313
00:18:19,500 --> 00:18:20,500
Exactly.

314
00:18:25,800 --> 00:18:27,700
Because I need this to specify.

315
00:18:32,900 --> 00:18:34,600
What it wants those coordinates in.

316
00:18:38,700 --> 00:18:39,400
Maybe.

317
00:18:42,100 --> 00:18:43,000
If I'm lucky.

318
00:18:44,700 --> 00:18:45,700
It will specify.

319
00:18:45,800 --> 00:18:46,800
So let's take a look.

320
00:18:50,200 --> 00:18:51,800
Here is the original one from Nvidia.

321
00:18:51,800 --> 00:18:52,500
It looks like

322
00:18:53,900 --> 00:18:55,000
And let's see.

323
00:19:04,800 --> 00:19:07,800
Transfers, a rectangle fixed values from one region of the read favor

324
00:19:07,800 --> 00:19:09,100
of to others the driver.

325
00:19:09,100 --> 00:19:10,800
But wise or just goes with the pics.

326
00:19:10,800 --> 00:19:12,100
Of course around these buffers or capri pants.

327
00:19:12,100 --> 00:19:13,800
First rectangle Bound by the locations.

328
00:19:13,800 --> 00:19:16,900
This is about the lower bounds inclusive because transfer advisor

329
00:19:16,900 --> 00:19:18,000
your, the read the actual region.

330
00:19:18,000 --> 00:19:19,400
This is exact same text.

331
00:19:24,900 --> 00:19:30,700
So I guess I'm just going to assume that the viewport is not in there

332
00:19:30,700 --> 00:19:34,700
but I really just don't know, it's not being straightforward about

333
00:19:34,700 --> 00:19:38,700
whether or not it would be in window coordinates or view coordinates

334
00:19:38,700 --> 00:19:41,000
or what so I don't know.

335
00:19:41,000 --> 00:19:47,900
So I'm going to assume that it's this and it looks like these are not

336
00:19:50,900 --> 00:19:57,300
These are not in width height terms with width width and height terms.

337
00:19:58,200 --> 00:20:02,800
So, what I really want here is, you know, when I'm doing this, the

338
00:20:02,800 --> 00:20:03,900
drawer region,

339
00:20:06,200 --> 00:20:08,800
Max X in the drawer region.

340
00:20:08,800 --> 00:20:09,200
Max.

341
00:20:09,200 --> 00:20:11,900
Why are actually what we're looking for here?

342
00:20:14,400 --> 00:20:17,300
And then finally, it looks like we've got to get all of these together

343
00:20:17,500 --> 00:20:21,700
from the opengl core ARB list and query them, right?

344
00:20:22,500 --> 00:20:25,300
So let's go ahead and get that core arm header

345
00:20:28,800 --> 00:20:30,500
and we need,

346
00:20:35,200 --> 00:20:35,800
Those two.

347
00:20:44,500 --> 00:20:46,400
and we need,

348
00:20:56,200 --> 00:20:59,400
So we now need to put these into wiggle.

349
00:21:04,200 --> 00:21:07,600
Our calls to get the stuff from wiggle can see here.

350
00:21:07,600 --> 00:21:10,300
That we've got the other frame buffer calls.

351
00:21:11,000 --> 00:21:12,800
So I'll just go ahead and stick it on there.

352
00:21:14,800 --> 00:21:15,200
Oops.

353
00:21:18,000 --> 00:21:19,100
That's missing the back half.

354
00:21:19,100 --> 00:21:19,500
There we go.

355
00:21:20,800 --> 00:21:25,300
And so I'll go ahead and make this GL blitt frame buffer, there's the

356
00:21:25,300 --> 00:21:27,200
coat, the call Signature.

357
00:21:32,200 --> 00:21:33,500
When you type def for it.

358
00:21:41,200 --> 00:21:43,000
And then we just need the global variable.

359
00:21:46,800 --> 00:21:52,100
So, in order to get this, now we have to go actually ask for it,

360
00:21:52,100 --> 00:21:52,600
right?

361
00:22:05,800 --> 00:22:07,800
At this point, we pretty much need all these.

362
00:22:07,800 --> 00:22:09,400
So what we really can change this into it.

363
00:22:09,400 --> 00:22:14,000
Some point is just something that actually just requires this and

364
00:22:14,000 --> 00:22:15,400
won't start the game without it.

365
00:22:15,400 --> 00:22:20,000
Because pretty much there's not going to be a way to run open gel on

366
00:22:20,000 --> 00:22:23,400
this without multi-sample since we've decided that that's basically a

367
00:22:23,400 --> 00:22:24,200
requirement.

368
00:22:26,700 --> 00:22:30,600
So, if you want to use cards from more than a decade ago, you can't

369
00:22:30,700 --> 00:22:34,800
with handmade hero unless someone wants to write a different render, a

370
00:22:34,800 --> 00:22:35,500
back-end, which

371
00:22:35,700 --> 00:22:36,100
Good.

372
00:22:36,900 --> 00:22:38,900
But we're not going to support that natively.

373
00:22:39,600 --> 00:22:44,400
So at that point it looks like we're pretty good to go, we compile.

374
00:22:44,400 --> 00:22:44,900
All right.

375
00:22:44,900 --> 00:22:47,200
Now whether or not anything works or not, we don't know.

376
00:22:47,600 --> 00:22:47,900
Oops.

377
00:22:48,600 --> 00:22:51,200
So we got to kind of go over here and take a look.

378
00:22:52,600 --> 00:22:54,100
Make sure actually calling this

379
00:22:55,400 --> 00:22:56,300
What's going on here?

380
00:23:01,000 --> 00:23:01,500
Oh,

381
00:23:03,800 --> 00:23:05,400
Wait a minute, Max frame.

382
00:23:05,400 --> 00:23:06,200
Buffer texture.

383
00:23:06,600 --> 00:23:08,000
The that was kind of dumb.

384
00:23:08,000 --> 00:23:13,000
We always have zero is actually a valid one, and so that's actually

385
00:23:13,000 --> 00:23:14,000
not necessary at all.

386
00:23:14,000 --> 00:23:16,300
That's going to prevent that code from Ever Getting called, which is

387
00:23:16,300 --> 00:23:17,300
not what we want.

388
00:23:17,600 --> 00:23:21,100
So actually, this is just always okay because there always is a zero

389
00:23:21,100 --> 00:23:26,400
with one in every case and we actually want the zero of 1, all right?

390
00:23:28,300 --> 00:23:28,900
oh my

391
00:23:30,600 --> 00:23:33,400
well, it looks like that worked better than I thought it was going to

392
00:23:33,400 --> 00:23:35,900
work and presumably.

393
00:23:35,900 --> 00:23:39,300
We now just need to create some depth buffers to attach to our

394
00:23:39,300 --> 00:23:40,000
textures.

395
00:23:41,000 --> 00:23:42,800
That's that's great.

396
00:23:44,100 --> 00:23:46,700
I was not expecting that to just work.

397
00:23:47,900 --> 00:23:49,200
But it looks like it just did.

398
00:23:49,500 --> 00:23:49,900
All right.

399
00:23:49,900 --> 00:23:53,300
So now all we have to do is re-enable, our z-buffer, I mean, our Z

400
00:23:53,300 --> 00:23:55,800
buffer is enabled, but it doesn't actually do anything.

401
00:23:56,000 --> 00:23:56,700
Why doesn't do anything?

402
00:23:56,700 --> 00:23:59,700
Well, it doesn't do anything because we have no, actual

403
00:24:01,300 --> 00:24:02,800
Depth, buffer attached.

404
00:24:03,000 --> 00:24:04,000
So this is the thing.

405
00:24:04,000 --> 00:24:09,600
Again, you have to remember what we're doing here when we create these

406
00:24:10,200 --> 00:24:11,800
textures, right?

407
00:24:13,300 --> 00:24:18,200
We're creating textures that we're going to render into and those

408
00:24:18,500 --> 00:24:23,200
textures have to act just like a frame buffer would when the graphics

409
00:24:23,200 --> 00:24:28,000
card or I should say when wiggle automatically sets up a back buffer

410
00:24:28,000 --> 00:24:31,900
for us when we asked to open the opengl window, it's going to have the

411
00:24:31,900 --> 00:24:34,900
stuff we ask for so it's going to have a depth buffer it's going to

412
00:24:34,900 --> 00:24:38,700
have a stencil buffer it's going to have a color buffer whatever

413
00:24:38,700 --> 00:24:39,300
right?

414
00:24:39,600 --> 00:24:41,200
All those things will actually be there.

415
00:24:42,600 --> 00:24:47,000
We, if we want to use those buffers ourselves, we need to set them up

416
00:24:47,000 --> 00:24:48,700
ourselves when we render to a texture.

417
00:24:48,700 --> 00:24:52,100
So we've set up a color buffer, that's what we're doing with this call

418
00:24:52,800 --> 00:24:55,200
but we have not created a depth buffer.

419
00:24:55,500 --> 00:24:59,100
So we do need to create a depth buffer and attach it.

420
00:24:59,800 --> 00:25:03,300
So you can see that happening here, you can see that we've got this

421
00:25:03,300 --> 00:25:06,400
Frame buffer texture 2D call and you can see that it goes.

422
00:25:06,400 --> 00:25:09,000
Okay, Jill frame, buffer GL color attachment zero.

423
00:25:09,200 --> 00:25:11,900
What we need to do is create a depth attachment.

424
00:25:12,000 --> 00:25:15,600
Just to create a texture that will hold the Z buffer, right?

425
00:25:15,600 --> 00:25:18,700
The depth buffer to go along with our color buffer.

426
00:25:19,000 --> 00:25:22,100
So, right now, our Z buffer is essentially disabled because when we

427
00:25:22,100 --> 00:25:27,600
set the render Target to be targeting our texture, it no longer has a

428
00:25:27,600 --> 00:25:28,800
depth buffer attached.

429
00:25:28,800 --> 00:25:30,700
So depth is not used.

430
00:25:32,700 --> 00:25:40,600
So, again, slot, in this case, we will need to sort of redo the same

431
00:25:40,600 --> 00:25:42,700
logic appear effectively.

432
00:25:42,700 --> 00:25:47,800
So we'll need to bind, you know, I need to do a thing like this here.

433
00:25:47,800 --> 00:25:50,400
I guess in order to do that,

434
00:25:53,000 --> 00:25:55,000
Because I believe it has to be bound.

435
00:25:59,100 --> 00:25:59,900
Wait a minute.

436
00:26:02,700 --> 00:26:04,100
So I guess it doesn't have to be bound.

437
00:26:04,100 --> 00:26:05,000
So we don't need to do that.

438
00:26:05,000 --> 00:26:10,600
I guess, I guess we can just say death texture handle here, right?

439
00:26:10,600 --> 00:26:11,500
And be done with it.

440
00:26:12,800 --> 00:26:16,000
I don't know, I don't remember what this last parameter here is, let

441
00:26:16,000 --> 00:26:17,300
me just double check what it is.

442
00:26:21,100 --> 00:26:23,300
So, that is GL.

443
00:26:31,500 --> 00:26:32,200
It's the level.

444
00:26:32,700 --> 00:26:34,400
So that's just the map level.

445
00:26:34,400 --> 00:26:36,100
We're drawing to which in this case again is 0.

446
00:26:36,100 --> 00:26:41,800
We are not using it maps in the rendering here at all so that all

447
00:26:41,800 --> 00:26:44,600
looks reasonable as far as I can tell.

448
00:26:44,800 --> 00:26:48,500
So all we need to do is create one of these depth texture handles.

449
00:26:48,800 --> 00:26:56,100
So, what I might do is say, let's create GL text handle glue in here,

450
00:26:56,100 --> 00:26:59,800
let's just do Tech sandal to and then we'll just say let's jet.

451
00:27:00,000 --> 00:27:03,600
Of us, two of these Tech sandals.

452
00:27:05,400 --> 00:27:06,900
Then we'll bind the first one.

453
00:27:10,400 --> 00:27:11,600
This doesn't need to be here.

454
00:27:16,100 --> 00:27:17,100
Will bind the first one?

455
00:27:18,800 --> 00:27:24,400
We will create what we wanted to create here with it, and then will

456
00:27:24,400 --> 00:27:25,300
bind the second one?

457
00:27:32,200 --> 00:27:33,100
and the second one,

458
00:27:35,200 --> 00:27:42,600
We just have to again do creation of a depth buffer that has the same

459
00:27:42,600 --> 00:27:46,700
layout, basically as our color buffer that can you know, match up with

460
00:27:46,700 --> 00:27:47,600
it, right?

461
00:27:48,300 --> 00:27:52,900
So pretty much this should all be the same except we need to pass a

462
00:27:52,900 --> 00:27:55,300
different value for what it's actually storing.

463
00:28:07,400 --> 00:28:11,500
Okay, so here's that function and everything else should basically be

464
00:28:11,500 --> 00:28:12,100
the same.

465
00:28:12,800 --> 00:28:15,800
But again this internal format here needs to be something different.

466
00:28:16,300 --> 00:28:21,400
So the internal format is going to be and unfortunately, this doesn't

467
00:28:21,400 --> 00:28:22,400
list them.

468
00:28:22,400 --> 00:28:27,400
It looks like so probably will just have to go to jail, text, image 2D

469
00:28:27,800 --> 00:28:30,500
and get them or I don't know where it might list them in here.

470
00:28:36,900 --> 00:28:37,700
Let's see.

471
00:28:45,000 --> 00:28:45,600
No.

472
00:28:52,700 --> 00:28:55,500
So can I search for your GPA?

473
00:28:57,600 --> 00:28:57,900
Ma'am.

474
00:28:58,700 --> 00:28:59,200
Well,

475
00:29:00,800 --> 00:29:07,000
I believe that we can just use because I happen to know that there is

476
00:29:07,000 --> 00:29:10,400
a depth format, we just need to find out what its identifier was.

477
00:29:20,800 --> 00:29:23,700
I just need you to tell me the identifier for the depth.

478
00:29:24,500 --> 00:29:28,800
Let's see here, opengl internal texture format list.

479
00:29:36,500 --> 00:29:39,900
So this is sort of what we're looking for, but not quite.

480
00:29:39,900 --> 00:29:40,500
Here we go.

481
00:29:40,500 --> 00:29:44,400
Depth component, 16, 24, 32 and 32 F.

482
00:29:45,000 --> 00:29:45,400
So

483
00:29:50,800 --> 00:29:52,600
at this point, we kind of have

484
00:29:56,300 --> 00:29:59,800
a decision to make what kind of debt buffering.

485
00:30:00,000 --> 00:30:03,600
Want to do, do we want a 32 bit depth, buffer to on a 16 bit depth

486
00:30:03,600 --> 00:30:04,000
buffer?

487
00:30:07,100 --> 00:30:10,800
Obviously a 16 bit depth buffer and a 32 bit depth, buffer differ, in

488
00:30:10,800 --> 00:30:14,500
that a 32-bit, death pepper has more Precision, right?

489
00:30:15,700 --> 00:30:19,000
And so if we use a 32 bit depth, buffer, we will have less z-fighting

490
00:30:19,000 --> 00:30:22,000
in cases, where we might have z-fighting, which might be nice.

491
00:30:22,300 --> 00:30:26,200
On the other hand, it would be twice as large twice as large means

492
00:30:26,200 --> 00:30:27,100
half as fast.

493
00:30:27,100 --> 00:30:32,700
Usually, because it means that the graphics card has to use more

494
00:30:32,700 --> 00:30:35,000
memory bandwidth fetching the depth components.

495
00:30:35,400 --> 00:30:36,700
And the, if they are twice as big

496
00:30:37,000 --> 00:30:39,500
Then it will be twice as slow doing that, right?

497
00:30:39,500 --> 00:30:43,600
It just takes more memory now if you're not memory bound that won't

498
00:30:43,600 --> 00:30:46,400
make a difference but if you are maybe it does.

499
00:30:46,700 --> 00:30:49,300
I don't know which of the two to pick up front.

500
00:30:49,300 --> 00:30:53,500
Fortunately, it's pretty easy to switch between so I guess let's start

501
00:30:53,500 --> 00:30:57,400
with the easier one, which is 32 F, because that's a better one.

502
00:31:00,000 --> 00:31:03,300
It's going to be the highest quality one and the easiest to use and

503
00:31:03,300 --> 00:31:06,000
then will regress down to depth component.

504
00:31:06,000 --> 00:31:08,700
16, if we find that it's a speed win to do.

505
00:31:08,700 --> 00:31:11,300
So at some point for us that we care about

506
00:31:12,800 --> 00:31:15,700
So let's try that and let's take it to do in there that says to do

507
00:31:17,300 --> 00:31:24,000
check if going with a 16-bit depth buffer would be faster.

508
00:31:28,100 --> 00:31:30,700
Because our game doesn't have long draw distances.

509
00:31:31,500 --> 00:31:38,100
So we can, you know, it should we don't have long draw distances,

510
00:31:38,100 --> 00:31:38,600
right?

511
00:31:39,100 --> 00:31:42,900
We should be able to, I would think get what we need out of a 16 bit

512
00:31:42,900 --> 00:31:43,600
depth buffer.

513
00:31:44,400 --> 00:31:45,900
So, you know, we'll see.

514
00:31:46,700 --> 00:31:52,700
So if we create one of these multi sample doodads here for the depth

515
00:31:52,700 --> 00:31:53,200
buffer,

516
00:31:54,500 --> 00:31:59,000
Then we can bind both our texture handles here.

517
00:32:00,000 --> 00:32:04,600
1 and 2 to get both the color and the depth set up for this Frame

518
00:32:04,600 --> 00:32:07,000
buffer at which point we should be able to render into it with the

519
00:32:07,000 --> 00:32:07,500
z-buffer.

520
00:32:07,500 --> 00:32:11,500
Again, I believe that's all we would really have to do.

521
00:32:12,500 --> 00:32:20,700
Let's take a look here, that should be address of texture handles.

522
00:32:22,400 --> 00:32:22,900
Global frame.

523
00:32:22,900 --> 00:32:26,600
Buffer textures, that wants to be text handle zero.

524
00:32:29,300 --> 00:32:30,300
Not that it matters.

525
00:32:31,100 --> 00:32:34,100
And so we really just need the depth attachment and depth component

526
00:32:34,100 --> 00:32:34,900
from core arp.

527
00:32:44,400 --> 00:32:46,200
Those are those depth components right there.

528
00:32:54,500 --> 00:32:56,600
And then we need Geo depth attachment.

529
00:33:05,300 --> 00:33:06,400
And that should be everything.

530
00:33:25,700 --> 00:33:31,600
Now, because we're switching to using our own textures for rendering

531
00:33:31,600 --> 00:33:36,000
here exclusively and that's looking pretty good, right?

532
00:33:36,000 --> 00:33:37,800
That's exactly what we wanted to see.

533
00:33:38,500 --> 00:33:42,500
Now, we've got a depth buffer and we've got multi sample anti-aliasing

534
00:33:42,500 --> 00:33:47,700
there and you can also see that a number of other things are working

535
00:33:47,700 --> 00:33:48,100
properly.

536
00:33:48,100 --> 00:33:52,000
Now, you can notice we get in, we've that Alpha to coverage has solved

537
00:33:52,000 --> 00:33:52,600
the problem that

538
00:33:52,700 --> 00:33:58,500
I was suggesting it would solve, which is to say that it is correctly.

539
00:33:58,500 --> 00:34:02,300
Kind of doing this this edging.

540
00:34:02,500 --> 00:34:04,800
We're now we're no longer getting those Edge artifacts.

541
00:34:05,400 --> 00:34:09,199
We still do have the problem with things laying laying down to Flat,

542
00:34:09,500 --> 00:34:12,800
which we need to solve, like I said, by potentially just messing with

543
00:34:12,800 --> 00:34:16,199
it in the Shader as opposed to doing it geometry wise, which I think

544
00:34:16,199 --> 00:34:19,900
might just be more computation work than it's worth.

545
00:34:21,699 --> 00:34:24,300
But otherwise, we have the render working exactly.

546
00:34:24,300 --> 00:34:25,699
Like we want it to

547
00:34:27,199 --> 00:34:30,800
Except well except for tooth two things.

548
00:34:31,100 --> 00:34:35,900
So one is we are colors are wrong, right?

549
00:34:35,900 --> 00:34:40,000
Because we, since we couldn't specify a srgb, like we wanted to

550
00:34:40,000 --> 00:34:42,300
remember this problem over here.

551
00:34:42,800 --> 00:34:43,199
So

552
00:34:46,800 --> 00:34:47,800
We jump down there.

553
00:34:48,800 --> 00:34:51,600
So remember this this problem, right?

554
00:34:51,600 --> 00:34:55,199
Opengl default internal texture format, remember that

555
00:34:56,600 --> 00:34:58,100
Needs to be on.

556
00:34:58,400 --> 00:35:03,300
And at the moment, we can't seem to get that to work, right?

557
00:35:03,300 --> 00:35:04,700
We get a GL error.

558
00:35:26,600 --> 00:35:27,900
Third shell set error.

559
00:35:32,500 --> 00:35:33,600
How do I clear it?

560
00:35:41,700 --> 00:35:44,200
I just want to confirm that nothing renders cuz I'm assuming that that

561
00:35:44,200 --> 00:35:45,900
error also means that nothing renders

562
00:35:49,000 --> 00:35:50,900
If I get it, will it automatically clear it?

563
00:36:03,300 --> 00:36:03,700
Yeah.

564
00:36:10,200 --> 00:36:11,900
So I guess all I really need to do here.

565
00:36:15,700 --> 00:36:17,100
Is step over these.

566
00:36:17,100 --> 00:36:18,900
So, they're sitting next statement.

567
00:36:21,600 --> 00:36:22,700
Sending statement.

568
00:36:27,400 --> 00:36:28,800
Yeah, so you can just see

569
00:36:41,500 --> 00:36:42,400
This is interesting.

570
00:36:42,700 --> 00:36:43,200
New frame.

571
00:36:43,200 --> 00:36:45,500
Buffer, count equals commands Max rendered.

572
00:36:46,100 --> 00:36:47,300
This is busted.

573
00:36:49,000 --> 00:36:50,400
So new frame buffer.

574
00:36:50,400 --> 00:36:51,600
Count equals commands.

575
00:36:51,900 --> 00:36:52,900
Max better texture.

576
00:36:53,300 --> 00:36:56,800
Max render Target is plus 1 and

577
00:37:00,000 --> 00:37:06,200
We are going up to and including that one, which is not correct.

578
00:37:06,700 --> 00:37:08,400
In fact, I don't know why.

579
00:37:09,300 --> 00:37:11,900
Yeah, I don't know why we're doing it that way at all.

580
00:37:13,200 --> 00:37:14,400
The new count.

581
00:37:19,900 --> 00:37:22,800
Yeah, this is just this is just nonsense.

582
00:37:23,200 --> 00:37:25,900
So we're creating one more render buffer than we need.

583
00:37:25,900 --> 00:37:28,300
Because that Loop is incorrect, right?

584
00:37:28,400 --> 00:37:30,200
This should just say that.

585
00:37:34,100 --> 00:37:36,800
And furthermore, we could just do it like this.

586
00:37:39,300 --> 00:37:42,100
And then it's just using the Direct Value directly with seems better

587
00:37:42,100 --> 00:37:42,400
to me.

588
00:37:43,200 --> 00:37:44,500
All right, let's try that one more time.

589
00:37:46,600 --> 00:37:49,800
Again, I'm going to skip over these assertions here and I just want to

590
00:37:49,800 --> 00:37:50,500
confirm that.

591
00:37:50,500 --> 00:37:54,900
We don't render because we shouldn't, but I want to make sure

592
00:37:56,100 --> 00:38:03,300
Yeah, so as far as we know on this card, we are not able to set.

593
00:38:07,500 --> 00:38:12,100
Srgb rendering on texture, it just doesn't work.

594
00:38:12,800 --> 00:38:15,200
So we're going to need to figure out what to do about that.

595
00:38:15,400 --> 00:38:18,300
Not the least of, which because I don't think that's true of pretty

596
00:38:18,300 --> 00:38:20,800
much any graphics card in existence at today.

597
00:38:20,800 --> 00:38:25,000
That anyone still using, you should pretty much always be able to do

598
00:38:25,000 --> 00:38:26,300
that as far as I know.

599
00:38:27,100 --> 00:38:29,900
So it's really kind of strange that we can't.

600
00:38:32,100 --> 00:38:38,900
You know, 88 times over sampled multi sample anti-aliasing and, and,

601
00:38:39,300 --> 00:38:43,400
you know, render targets and all this stuff and srgb is not supported

602
00:38:43,400 --> 00:38:44,300
is weird.

603
00:38:44,900 --> 00:38:48,900
So I'm not sure what's going on with that, but we can do a little bit

604
00:38:48,900 --> 00:38:53,300
more clean up here even though we're getting most of the way through

605
00:38:54,500 --> 00:38:55,900
the render setup stuff, we need to do

606
00:39:03,100 --> 00:39:05,200
I am so stuffy it's allergy season here.

607
00:39:05,200 --> 00:39:08,800
I was as far as I know, I'm just constantly blowing my nose.

608
00:39:08,800 --> 00:39:09,500
Is disgusting.

609
00:39:09,700 --> 00:39:15,200
Anyway, so what we need to do now is we need to actually clean up some

610
00:39:15,200 --> 00:39:20,100
stuff from the win32 side that we didn't really actually need so

611
00:39:21,900 --> 00:39:24,600
If you take a look at how this is working here, where we've got the

612
00:39:24,600 --> 00:39:29,900
depth B ARB stuff happening, the death, B arm stuff, doesn't actually

613
00:39:29,900 --> 00:39:31,100
need to happen anymore.

614
00:39:31,100 --> 00:39:34,000
The red green blue, Alpha depth bit stuff.

615
00:39:34,600 --> 00:39:36,500
Just doesn't really need to be there.

616
00:39:36,700 --> 00:39:39,300
We used to be using it but we don't really need it.

617
00:39:39,800 --> 00:39:47,100
The reason that we don't need it is because now the depth of B is not

618
00:39:47,100 --> 00:39:50,300
used the frame buffer is deficits are not used.

619
00:39:50,300 --> 00:39:51,500
We are only using

620
00:39:51,600 --> 00:39:59,300
Depth buffer, from our actual from the textures that we create, that's

621
00:39:59,300 --> 00:40:00,500
the only time we're using them.

622
00:40:00,500 --> 00:40:04,800
So we're drawing exclusively detectors, those textures have Z buffers,

623
00:40:04,800 --> 00:40:08,800
you know, we create z-buffer textures for the frame buffers that we're

624
00:40:08,800 --> 00:40:10,400
using that are our texture frame buffers.

625
00:40:10,400 --> 00:40:15,100
So we don't actually need to have the frame buffer itself have that

626
00:40:15,100 --> 00:40:15,800
depth B.

627
00:40:15,800 --> 00:40:19,900
So this is just a waste now and we can go ahead and get rid of it.

628
00:40:19,900 --> 00:40:21,300
So I believe we can actually go back.

629
00:40:21,600 --> 00:40:25,300
to the way we have this originally now, where we just sort of

630
00:40:28,500 --> 00:40:29,200
Do this.

631
00:40:31,900 --> 00:40:32,900
and now, we've got

632
00:40:40,000 --> 00:40:41,200
This is just five again.

633
00:40:46,000 --> 00:40:49,100
In addition to that, the other thing that I think we should be able to

634
00:40:49,100 --> 00:40:51,900
do is srgb capable frame.

635
00:40:51,900 --> 00:40:54,100
Buffers should now not be necessary either.

636
00:40:54,800 --> 00:40:57,800
Because since we're not drawing directly to the frame buffer, I think

637
00:40:57,800 --> 00:41:02,200
we could probably delete this code to write this is probably not

638
00:41:02,200 --> 00:41:02,900
necessary.

639
00:41:04,300 --> 00:41:05,200
If that makes sense.

640
00:41:09,300 --> 00:41:13,400
Because if you think about what's happening, the srgb rendering is can

641
00:41:13,400 --> 00:41:14,700
all happen in the texture.

642
00:41:14,700 --> 00:41:19,600
Once we have the textures completely done, we in theory wouldn't need

643
00:41:19,600 --> 00:41:20,900
to do that anymore.

644
00:41:20,900 --> 00:41:23,900
Now, I'm going to leave it in there because it may be that the multi

645
00:41:23,900 --> 00:41:27,600
sample resolve is still best done in linear space and maybe this will

646
00:41:27,600 --> 00:41:29,100
force that to be true.

647
00:41:29,600 --> 00:41:30,300
I don't know.

648
00:41:32,800 --> 00:41:35,400
So I guess that might be premature and we'll just leave that in there

649
00:41:35,700 --> 00:41:38,900
for now, but we do not need a depth buffer.

650
00:41:39,600 --> 00:41:42,400
Like I said and you can see that the depth buffering is still working

651
00:41:42,400 --> 00:41:43,000
just fine.

652
00:41:43,200 --> 00:41:46,900
The reason for that is because we're using a depth buffer we made as a

653
00:41:46,900 --> 00:41:48,200
texture and bound.

654
00:41:49,700 --> 00:41:50,700
So that's all good.

655
00:41:50,700 --> 00:41:56,200
Now, no real worries here, and the only things we need to worry about

656
00:41:56,200 --> 00:41:57,200
now are again.

657
00:41:57,200 --> 00:41:59,400
We've got to make a

658
00:42:00,300 --> 00:42:07,100
We've got to go ahead and put some some work into looting a Shader so

659
00:42:07,100 --> 00:42:10,400
that we can modify the Z values properly and we have to figure out how

660
00:42:10,400 --> 00:42:11,400
we want to do that.

661
00:42:11,800 --> 00:42:15,700
But then the other thing that we need to do is we need to fix our

662
00:42:15,700 --> 00:42:20,900
Alpha shading on our Alpha tinting I guess you could say.

663
00:42:21,800 --> 00:42:23,300
So let me talk a little bit about that.

664
00:42:23,600 --> 00:42:26,800
Now the reason we did the multi sample was specifically so we could

665
00:42:26,800 --> 00:42:29,600
get the edges of Sprites to work properly.

666
00:42:30,000 --> 00:42:32,800
And you can see, they are now working properly, and that's good.

667
00:42:33,200 --> 00:42:35,200
We don't get any of that weird fringing anymore.

668
00:42:35,600 --> 00:42:38,100
We don't get the weird depth mismatch stuff anymore.

669
00:42:38,200 --> 00:42:39,000
So that's all good.

670
00:42:39,000 --> 00:42:41,300
And so, in fact, the only thing we need to do really, to finish our

671
00:42:41,300 --> 00:42:46,500
Sprite rendering is to have the those tweaked Z values in order to

672
00:42:46,500 --> 00:42:48,500
make sure that things work properly there.

673
00:42:49,200 --> 00:42:49,700
But

674
00:42:51,400 --> 00:42:53,300
As you can kind of see, I don't know.

675
00:42:53,300 --> 00:42:55,700
It might be that the video quality is not good enough.

676
00:42:55,700 --> 00:42:57,300
When it's streamed to really see this.

677
00:42:57,300 --> 00:43:00,800
I can see it on my machine, you may not be able to see it on yours and

678
00:43:00,800 --> 00:43:01,600
I apologize for that.

679
00:43:01,600 --> 00:43:03,600
But if you ran the game at home, you'd see it.

680
00:43:04,700 --> 00:43:09,500
The fade levels of these Sprites that used to fade out.

681
00:43:09,500 --> 00:43:13,600
Smoothly are now fading out in like jerk in a jerky motion.

682
00:43:14,900 --> 00:43:17,100
In color space, they're still moving around the screen, just

683
00:43:17,100 --> 00:43:20,900
financially, but there's this kind of stair-steppy kind of Fade Out

684
00:43:20,900 --> 00:43:21,600
effect.

685
00:43:22,000 --> 00:43:22,800
And what's that coming from?

686
00:43:22,800 --> 00:43:26,700
Well, that's coming from the fact that we have told the game now that

687
00:43:26,700 --> 00:43:32,400
all the alpha that's being used, is Alpha 2 coverage, right?

688
00:43:32,700 --> 00:43:35,300
So that means that the only thing that's going to happen.

689
00:43:35,300 --> 00:43:39,100
If we set a Sprites Alpha value lower, is this going to fill less

690
00:43:39,100 --> 00:43:40,400
samples in the multi sample?

691
00:43:40,400 --> 00:43:44,500
Buffer since the multi sample buffer only has eight samples that

692
00:43:44,700 --> 00:43:48,700
Means that no matter how much range our Alpha has, we will only ever

693
00:43:48,700 --> 00:43:54,300
see 8 steps worth from Full opaque to translucent.

694
00:43:56,500 --> 00:43:58,800
Sorry transparent fully transparent.

695
00:44:00,800 --> 00:44:02,600
So, not good, right?

696
00:44:02,600 --> 00:44:03,900
That is not what we want.

697
00:44:03,900 --> 00:44:06,700
We want the alpha coming from our texture.

698
00:44:07,000 --> 00:44:08,200
To have that be the case.

699
00:44:08,900 --> 00:44:10,600
We don't want the alpha.

700
00:44:11,900 --> 00:44:15,400
Coming as from our tent for that to be the case.

701
00:44:15,700 --> 00:44:19,800
So that is definitely an issue but I'm not sure if it's an issue we

702
00:44:19,800 --> 00:44:22,900
can address in the fixed function pipeline or not.

703
00:44:23,600 --> 00:44:27,200
That's a really good question and I am not sure I really don't know.

704
00:44:41,200 --> 00:44:42,000
It might be.

705
00:44:47,100 --> 00:44:47,400
Oh,

706
00:44:51,200 --> 00:44:53,100
while we're at it, we should probably check our cutscenes.

707
00:45:10,900 --> 00:45:11,200
Hm.

708
00:45:13,900 --> 00:45:15,300
All right, so our cutscenes.

709
00:45:18,900 --> 00:45:20,300
Have a couple problems one.

710
00:45:21,100 --> 00:45:22,900
Looks like we change the projection.

711
00:45:25,200 --> 00:45:28,300
Sort of blow up values a little bit in a way that we're going to have

712
00:45:28,300 --> 00:45:34,800
to fix but otherwise it looks okay, besides the srgb problem, right?

713
00:45:35,000 --> 00:45:41,000
You can see that all the colors are too dark and that's obviously just

714
00:45:41,000 --> 00:45:44,000
because the srgb rendering isn't enabled and we don't really know how

715
00:45:44,000 --> 00:45:45,400
to enable it on this machine.

716
00:45:46,500 --> 00:45:49,300
We need to figure out why that's happening.

717
00:45:49,300 --> 00:45:53,000
I'm not sure why that's happening because in theory, it should just be

718
00:45:55,200 --> 00:45:57,400
It should just be working when we specify that value.

719
00:45:57,800 --> 00:46:00,600
So again, not really sure what's going on there, but you know what you

720
00:46:00,600 --> 00:46:01,100
gonna do.

721
00:46:01,600 --> 00:46:03,900
So we'll take a look at that a little bit later, but

722
00:46:05,800 --> 00:46:09,600
What I was saying before is, we need to take a look at what we can do

723
00:46:09,700 --> 00:46:13,900
with those Alpha values and, and, and we'll see what's going on.

724
00:46:13,900 --> 00:46:18,100
So, what's what's actually happening in this opengl pipeline?

725
00:46:18,100 --> 00:46:22,100
Now, with the way think we've got things, let's just take a quick

726
00:46:22,100 --> 00:46:26,700
second to review, because we've done a lot of work here to set up our

727
00:46:26,700 --> 00:46:27,100
rendering.

728
00:46:27,100 --> 00:46:29,900
And we've got some fairly complicated stuff happening in there.

729
00:46:30,000 --> 00:46:33,900
So let's just recap, I mean, certainly not complicated compared to a

730
00:46:33,900 --> 00:46:35,000
modern full.

731
00:46:35,600 --> 00:46:38,700
3D rendering system, which does even more ridiculous Shenanigans.

732
00:46:38,700 --> 00:46:41,600
But in terms of handmade hero where we have always done software

733
00:46:41,600 --> 00:46:45,700
ending and now we're just doing, we're starting to do more Hardware

734
00:46:45,700 --> 00:46:46,600
rendering stuff.

735
00:46:46,600 --> 00:46:49,500
It's probably a little bit unfamiliar to a lot of people, so, let's

736
00:46:49,500 --> 00:46:51,800
just quickly recap what's going on here.

737
00:46:52,800 --> 00:46:58,300
So remember, we've got a screen buffer, right?

738
00:46:58,900 --> 00:47:00,300
This is our back buffer here.

739
00:47:04,600 --> 00:47:09,100
We have our back buffer and this back buffer at the moment is just

740
00:47:09,100 --> 00:47:09,500
color.

741
00:47:09,500 --> 00:47:10,700
It's just our G.

742
00:47:10,700 --> 00:47:12,500
It's just an srgb.

743
00:47:13,800 --> 00:47:19,600
A 8 Bit And I'm going to put question mark here because we're not even

744
00:47:19,600 --> 00:47:20,200
specifying that.

745
00:47:20,200 --> 00:47:22,000
So who knows how many bits it is.

746
00:47:22,000 --> 00:47:24,700
The operation is actually free to pick any depth at once.

747
00:47:26,000 --> 00:47:30,600
So as an srgb, a 8-bit frame buffer, that's our back bumper.

748
00:47:32,100 --> 00:47:35,500
We never draw to this directly ever.

749
00:47:36,000 --> 00:47:38,000
We used to now, we don't.

750
00:47:39,000 --> 00:47:40,800
So we got an output stuff to this.

751
00:47:40,800 --> 00:47:41,600
Where does it come from?

752
00:47:41,600 --> 00:47:42,500
Where it comes?

753
00:47:43,900 --> 00:47:44,900
From a texture.

754
00:47:46,300 --> 00:47:47,500
That we created.

755
00:47:48,700 --> 00:47:49,300
Right.

756
00:47:49,400 --> 00:47:50,900
It's an srgb.

757
00:47:54,200 --> 00:47:55,300
8-bit texture.

758
00:47:56,300 --> 00:47:59,800
That's how we create it and it's at the moment 8x.

759
00:48:00,000 --> 00:48:04,700
Say now we, we allow in the code, anything up to 16 x Ms.

760
00:48:04,700 --> 00:48:09,500
A on this particular card if that's so maybe what I should say is some

761
00:48:09,500 --> 00:48:11,800
amount msaa.

762
00:48:12,900 --> 00:48:15,500
What that means is in this texture, right?

763
00:48:15,600 --> 00:48:20,300
If I was to take a single Pixel in the same place on both of these

764
00:48:20,600 --> 00:48:24,600
actually, this one has one sample.

765
00:48:26,200 --> 00:48:30,600
And this one has in our case eight, right?

766
00:48:31,400 --> 00:48:36,400
So what that means is during the blip frame buffer call

767
00:48:38,300 --> 00:48:38,600
Right?

768
00:48:38,600 --> 00:48:39,900
GL, B frame buffer.

769
00:48:40,500 --> 00:48:44,300
These eight samples in this texture are getting smushed down to one

770
00:48:44,300 --> 00:48:45,700
sample in the output.

771
00:48:45,800 --> 00:48:48,300
So that's the aunt that anti-aliasing, step right?

772
00:48:49,900 --> 00:48:52,300
So this is a frame buffer texture, we're using here.

773
00:48:54,900 --> 00:48:57,000
Furthermore, stacked with that.

774
00:48:58,700 --> 00:49:04,500
These are sort of together in use is a 32-bit float.

775
00:49:06,400 --> 00:49:07,300
Depth buffer.

776
00:49:09,100 --> 00:49:10,400
and it also,

777
00:49:12,000 --> 00:49:13,400
Has that msaa?

778
00:49:21,600 --> 00:49:22,100
Right.

779
00:49:24,300 --> 00:49:27,000
Now this does never get split to a back buffer.

780
00:49:27,000 --> 00:49:30,700
Anything it's strictly used essentially as a temporary buffer during

781
00:49:30,700 --> 00:49:33,600
rendering to do depth sorting right?

782
00:49:33,600 --> 00:49:36,400
It's per pixel or per sample, in this case except sorting

783
00:49:37,700 --> 00:49:43,200
Now when we actually render, we are rendering to these buffers.

784
00:49:43,600 --> 00:49:46,500
So we render to these, right, here's our render.

785
00:49:48,700 --> 00:49:51,700
Render to these that only at the end, does the jail but flame before,

786
00:49:51,700 --> 00:49:54,100
take the data out of the color buffer, this gets thrown away.

787
00:49:54,100 --> 00:49:55,500
No one cares about what it is.

788
00:49:57,300 --> 00:50:00,800
We take, whatever we render to there and we put it to the screen doing

789
00:50:00,800 --> 00:50:05,500
that 821 down sampling, that produces the sort of smooth anti-aliased

790
00:50:05,500 --> 00:50:06,700
values as a result.

791
00:50:08,500 --> 00:50:11,800
Okay, so here's our render step.

792
00:50:11,800 --> 00:50:12,400
What is our render?

793
00:50:12,400 --> 00:50:17,500
Step doing well, what our render step is doing is our render step is

794
00:50:17,500 --> 00:50:18,300
taking

795
00:50:20,400 --> 00:50:21,700
Our Sprite textures.

796
00:50:27,000 --> 00:50:31,500
And up, Sprite texture has a particular pixel value, it's one sample,

797
00:50:31,900 --> 00:50:32,500
right?

798
00:50:34,500 --> 00:50:39,100
And I guess more, more accurately since we have bilinear filtering on,

799
00:50:39,100 --> 00:50:40,000
really what's happening?

800
00:50:40,200 --> 00:50:41,900
Is this taking four samples?

801
00:50:44,600 --> 00:50:47,000
Smashing those down to one, right?

802
00:50:47,000 --> 00:50:50,500
So it produces one sample by averaging these together with certain

803
00:50:50,500 --> 00:50:53,100
rule with a bilinear filter, right?

804
00:50:54,500 --> 00:50:57,900
We end up with one sample from our texture, so we have one Sprite

805
00:50:57,900 --> 00:50:58,500
sample.

806
00:51:00,000 --> 00:51:05,800
we're left with and then we also have a you know, color

807
00:51:08,400 --> 00:51:08,800
Right?

808
00:51:10,200 --> 00:51:14,400
So both of these have Alpha values in them, there's an alpha here and

809
00:51:14,400 --> 00:51:17,800
there's an alpha here and those two alpha values.

810
00:51:17,900 --> 00:51:23,800
We actually want to different things to happen with these two alpha

811
00:51:23,800 --> 00:51:27,700
values and that's the confusing part of this, right?

812
00:51:28,300 --> 00:51:32,700
So, what we want to have happen is Alpha from this.

813
00:51:35,500 --> 00:51:36,000
Right?

814
00:51:36,000 --> 00:51:39,100
We would want to, well, I guess not, wait a minute.

815
00:51:39,700 --> 00:51:41,100
Let me not say that quite right.

816
00:51:41,200 --> 00:51:42,500
Let me not say that quite yet.

817
00:51:44,200 --> 00:51:47,500
I just realized that actually, if we want things to fade out, they

818
00:51:47,500 --> 00:51:53,900
would have to be drawn in a fading pass anyway so that's probably dumb

819
00:51:53,900 --> 00:51:55,100
that I'm even talking about this.

820
00:51:55,100 --> 00:51:57,800
It's good that I did this diagram because it's good to have any way

821
00:51:57,800 --> 00:52:01,100
but now I think about it there's really no way we could deal with that

822
00:52:01,100 --> 00:52:04,600
in any other way for the fading out Miss of it.

823
00:52:06,000 --> 00:52:08,200
Yeah, never mind, I take it all back.

824
00:52:09,500 --> 00:52:10,000
So

825
00:52:12,900 --> 00:52:16,000
If we take a look at what's happening here, we've got these two alpha

826
00:52:16,000 --> 00:52:16,400
values.

827
00:52:16,400 --> 00:52:20,300
They have to combine together and I was going to say we want to use

828
00:52:20,300 --> 00:52:25,600
wonder if the other the only way we can really use a more transparent

829
00:52:25,600 --> 00:52:30,000
to get more transparent steps, there is to draw transparent object in

830
00:52:30,000 --> 00:52:30,800
a separate pass.

831
00:52:30,800 --> 00:52:34,700
That doesn't rely on the multi sampling.

832
00:52:34,700 --> 00:52:38,400
So at the moment, I don't know that we have really any other thing we

833
00:52:38,400 --> 00:52:39,200
can do better than that.

834
00:52:39,200 --> 00:52:42,900
Which yeah, in this case, I think we just have to

835
00:52:43,000 --> 00:52:43,600
Live with that.

836
00:52:46,400 --> 00:52:50,300
So I believe that's all correct.

837
00:52:50,400 --> 00:52:51,700
So we've got the Sprite sample.

838
00:52:51,700 --> 00:52:52,800
We've got the color.

839
00:52:54,400 --> 00:52:58,500
We combine those two and we produce the rendered pixels that go and

840
00:52:58,500 --> 00:53:01,700
operate on our depth buffer and our famous right now.

841
00:53:01,800 --> 00:53:02,600
So that's all good.

842
00:53:02,700 --> 00:53:03,700
I think we're all good.

843
00:53:05,100 --> 00:53:10,300
So I think the only thing we have left to do is really to cheat those

844
00:53:10,300 --> 00:53:16,300
Z values, so that the Z values that were using in the z-buffer are

845
00:53:16,300 --> 00:53:19,300
going to be exaggerated.

846
00:53:19,600 --> 00:53:23,000
Now, I'm not sure if we can do that without a Shader or not.

847
00:53:23,300 --> 00:53:24,200
I think about it.

848
00:53:30,700 --> 00:53:32,600
It may be possible to do so.

849
00:53:40,700 --> 00:53:43,400
But I doubt it.

850
00:53:46,000 --> 00:53:49,200
So we'll take a look, I think.

851
00:53:53,200 --> 00:53:55,100
That we could do certain things with it.

852
00:53:57,000 --> 00:53:57,800
But not others.

853
00:54:20,000 --> 00:54:20,600
so,

854
00:54:30,900 --> 00:54:33,600
let's take a look at the moment.

855
00:54:36,600 --> 00:54:37,800
Let's say here's our camera.

856
00:54:43,600 --> 00:54:45,000
It's looking down to seeing this way.

857
00:54:46,400 --> 00:54:50,100
Here's to like stair-step pieces of ground.

858
00:54:51,400 --> 00:54:52,400
And here's a tree.

859
00:54:54,600 --> 00:55:00,100
For obvious reasons, we want the tree to be camera facing because we

860
00:55:00,100 --> 00:55:03,300
want it to show up properly, right?

861
00:55:03,300 --> 00:55:04,500
We want it to show up.

862
00:55:07,200 --> 00:55:10,000
Such that it appears to be a rectangular Sprite aligned with the

863
00:55:10,000 --> 00:55:10,400
screen.

864
00:55:13,600 --> 00:55:14,600
So, here's the plane.

865
00:55:16,300 --> 00:55:19,800
That it's going to be him right now.

866
00:55:19,800 --> 00:55:24,200
Our problem is that we want it to really look more like this.

867
00:55:25,200 --> 00:55:29,000
And the reason that we want to look more like that is because we want

868
00:55:29,000 --> 00:55:33,200
it to occlude things behind it as if it were standing up kind of

869
00:55:33,300 --> 00:55:35,400
rather straight, right?

870
00:55:36,400 --> 00:55:40,600
And it's always a kind of a bit of a you know, a it's definitely

871
00:55:40,600 --> 00:55:45,900
trickery because we don't have 3D geometry, we're making up some

872
00:55:46,100 --> 00:55:46,600
Fanciful.

873
00:55:46,600 --> 00:55:50,500
Three geometry that we hope will do sort of what a Sprite, what a

874
00:55:50,500 --> 00:55:54,900
Sprites image implies, it would do if it was in 3D, right?

875
00:55:56,100 --> 00:55:59,400
But we don't actually have full 3d geometry, which is what we would

876
00:55:59,400 --> 00:56:01,100
need to always produce a correct seen.

877
00:56:01,100 --> 00:56:04,500
So we're just guessing here but we know that we can do something a lot

878
00:56:04,500 --> 00:56:05,500
better than that.

879
00:56:05,800 --> 00:56:09,200
So you want it to appear as if it's doing this, which means the

880
00:56:09,200 --> 00:56:14,800
fundamentally speaking, what we want to do is adjust the Z values for

881
00:56:14,800 --> 00:56:21,000
the Z buffer, so that the things in here as we go, the Z values are

882
00:56:21,000 --> 00:56:25,600
actually, even though this is the XY is reproducing, the Z values are

883
00:56:25,600 --> 00:56:25,700
actually

884
00:56:25,900 --> 00:56:28,200
We produced as if we were on this plane.

885
00:56:29,900 --> 00:56:30,400
Right.

886
00:56:32,900 --> 00:56:34,300
That's what we actually want to do.

887
00:56:36,200 --> 00:56:42,200
And so, all we really need for this purpose, is essentially a z bias

888
00:56:42,200 --> 00:56:49,100
value that's associated with these vertex positions as they come in.

889
00:56:49,800 --> 00:56:52,500
And like I said, in a Shader, this would be very easy to do, which is

890
00:56:52,500 --> 00:56:55,100
why I would think we should do it that way rather than try to do a

891
00:56:55,100 --> 00:56:58,500
bunch of weird math trickery that we don't really need to do.

892
00:56:59,000 --> 00:56:59,800
So what?

893
00:57:00,000 --> 00:57:05,500
I would propose is say like okay you know we've got an XYZ that we're

894
00:57:05,500 --> 00:57:07,700
passing down for each of these points.

895
00:57:07,800 --> 00:57:14,100
Let's just also pass down a z bias value, and the Z bias value is just

896
00:57:14,100 --> 00:57:18,500
something that when you're actually producing the depth component of

897
00:57:18,500 --> 00:57:19,200
this thing.

898
00:57:21,400 --> 00:57:26,500
Let's actually make sure that depth component is offset by whatever

899
00:57:26,500 --> 00:57:30,000
the Z bias value should be right?

900
00:57:31,000 --> 00:57:35,100
So we can just set that Z bias value there to be whatever we want.

901
00:57:35,100 --> 00:57:39,200
And therefore, pretend that the thing is standing up like this, even

902
00:57:39,200 --> 00:57:43,400
though it's not, right, and then we still get all the same rest of the

903
00:57:43,400 --> 00:57:47,300
stuff exactly what we want with, you know, with perspective and

904
00:57:47,300 --> 00:57:48,900
everything sits in the scene properly.

905
00:57:49,100 --> 00:57:50,300
But we just need this

906
00:57:51,200 --> 00:57:55,500
We'd essentially send down for coordinates instead of three for every

907
00:57:55,500 --> 00:57:57,500
vertex, which is no big deal.

908
00:57:58,100 --> 00:58:00,600
We're not going to be vertex throughput Bound.

909
00:58:00,600 --> 00:58:02,800
In this game.

910
00:58:02,800 --> 00:58:05,200
I assure you at least not on any modern card.

911
00:58:08,700 --> 00:58:14,200
So that seems very nice and then all we do is in our computation of

912
00:58:14,200 --> 00:58:15,600
where these vertices are.

913
00:58:15,800 --> 00:58:18,300
We do exactly the same transform we're doing now.

914
00:58:18,300 --> 00:58:24,000
Where we just do p, Prime equals, you know, AP this is that sort of

915
00:58:24,000 --> 00:58:25,900
composite Matrix that we've been making.

916
00:58:26,000 --> 00:58:31,800
We do exactly this but at the end at this P Prime, after it's done all

917
00:58:31,800 --> 00:58:35,700
were saying is that that P Prime Z coordinate, right?

918
00:58:36,000 --> 00:58:38,100
Is going to have that Z bias.

919
00:58:38,700 --> 00:58:40,300
Per vertex added in.

920
00:58:41,700 --> 00:58:45,400
So the only difference between this and what we're doing is that we'll

921
00:58:45,400 --> 00:58:49,500
have a pervert x z offset.

922
00:58:49,500 --> 00:58:53,200
So you could think of you know, when we've got our matrices here,

923
00:58:55,300 --> 00:58:55,800
Right?

924
00:58:57,200 --> 00:59:01,700
And we sort of have if you if you look at what's in here, you know,

925
00:59:01,700 --> 00:59:03,900
we've got our x-axis here.

926
00:59:12,300 --> 00:59:13,600
And here's the translation.

927
00:59:16,200 --> 00:59:16,600
Right?

928
00:59:16,900 --> 00:59:19,400
This is how we were doing object placement, right?

929
00:59:19,400 --> 00:59:22,100
We have the x axis Y, axis, Z axis, and then the translation was in

930
00:59:22,100 --> 00:59:22,600
here.

931
00:59:23,400 --> 00:59:29,400
And the problem with this, is that this is fixed for everybody who for

932
00:59:29,400 --> 00:59:31,300
all the vertices that go through the system.

933
00:59:32,000 --> 00:59:34,200
When we set one of these camera transforms up,

934
00:59:35,800 --> 00:59:39,400
This Matrix, which we multiplied by the projection Matrix to get our

935
00:59:39,400 --> 00:59:43,000
final Matrix, only has one Z offset.

936
00:59:44,000 --> 00:59:44,500
Right?

937
00:59:44,600 --> 00:59:51,000
The the Z offset value is only going to be applied, is going to be

938
00:59:51,000 --> 00:59:52,900
applied to all vertices uniformly.

939
00:59:53,000 --> 00:59:54,300
So I can't offset.

940
00:59:54,300 --> 00:59:56,300
These vertices differently from these vertices.

941
00:59:56,300 --> 00:59:58,100
There's no way to do so, right?

942
00:59:58,800 --> 00:59:59,800
So all I'm saying,

943
01:00:00,000 --> 01:00:04,000
We just need something which is doing effectively the same thing.

944
01:00:04,000 --> 01:00:05,500
It just incrementing a z value.

945
01:00:05,500 --> 01:00:08,400
What just like the Matrix is doing after the fact.

946
01:00:09,200 --> 01:00:10,100
We've got that.

947
01:00:10,100 --> 01:00:13,800
We just don't have a way to do it per vertex and so that's all I

948
01:00:13,800 --> 01:00:14,600
really want.

949
01:00:14,600 --> 01:00:18,100
And like I said, the easiest way to do that would be with shaders.

950
01:00:18,100 --> 01:00:20,000
Unfortunately, that's a pretty huge step.

951
01:00:20,000 --> 01:00:25,000
We have to take because now we have to have those shaders and we have

952
01:00:25,000 --> 01:00:29,400
to, you know, implement the Shader loading code and all that sort of

953
01:00:29,400 --> 01:00:29,500
stuff.

954
01:00:29,500 --> 01:00:33,800
So I'm guessing what I should probably do because we've got an hour

955
01:00:33,800 --> 01:00:36,900
left, is just show how to get that process started.

956
01:00:36,900 --> 01:00:39,200
And then next weekend, we'll just be

957
01:00:39,300 --> 01:00:43,000
Shader weekend where we go through, how they work and how to write

958
01:00:43,000 --> 01:00:46,200
them, because that's sort of a topic that will require me to do a lot

959
01:00:46,200 --> 01:00:49,400
of explanation that we don't have time to do today.

960
01:00:49,900 --> 01:00:56,000
So let's just go ahead and do some preparation work for that as we go

961
01:00:56,000 --> 01:00:58,100
and we'll go from there.

962
01:00:58,800 --> 01:01:02,900
So, if I say first of all, know that I'm going to need to send down an

963
01:01:02,900 --> 01:01:07,000
additional coordinate, in addition, to what, I'm already sending down

964
01:01:07,000 --> 01:01:07,700
for things.

965
01:01:09,200 --> 01:01:11,700
Like these bitmaps that are coming through.

966
01:01:11,900 --> 01:01:15,700
Then I know that I need to upgrade in my render entry bitmap.

967
01:01:15,700 --> 01:01:21,400
This this p-value here, and these X Y axes and that sort of stuff.

968
01:01:21,600 --> 01:01:25,200
This stuff now needs to be extended a little bit, right?

969
01:01:25,400 --> 01:01:30,700
And you know it depends on how we want to do it but you know for the

970
01:01:30,900 --> 01:01:37,300
for the moment we could just use a single Z bias value that's going to

971
01:01:37,300 --> 01:01:39,100
go in there and later we could sort of look

972
01:01:39,300 --> 01:01:41,100
It making that a little bit more General.

973
01:01:42,400 --> 01:01:48,600
But, you know, essentially we only really need one for the moment and

974
01:01:48,600 --> 01:01:53,000
that's the bias if we went into handmade opengl, right?

975
01:01:53,800 --> 01:01:56,000
You can imagine this here where we're doing.

976
01:01:56,200 --> 01:01:59,700
There's our cubes when we're doing our bit maps you can see here.

977
01:01:59,700 --> 01:02:02,800
We sort of got our vertex 3fv stuff happening.

978
01:02:04,400 --> 01:02:07,200
Instead what you could imagine is, all right.

979
01:02:07,300 --> 01:02:10,700
The lower triangle upper triangle system that we're doing here where

980
01:02:10,700 --> 01:02:14,000
we're starting with menu, V and Min.

981
01:02:14,000 --> 01:02:21,800
Y here we would say that it's actually going to be a V4 in all cases.

982
01:02:23,500 --> 01:02:24,100
Right.

983
01:02:24,700 --> 01:02:26,900
And when we produce this V4,

984
01:02:28,800 --> 01:02:30,800
We're always going to start with a V 3.

985
01:02:33,100 --> 01:02:36,100
But we're going to include the Ziva bias or not.

986
01:02:36,200 --> 01:02:37,600
Depending on which one it is.

987
01:02:37,900 --> 01:02:41,300
So in Max why we would include the Z bias.

988
01:02:47,400 --> 01:02:49,200
But in men wise, we wouldn't.

989
01:02:49,500 --> 01:02:52,300
And again, that's just to create that exact shape that I was just

990
01:02:52,300 --> 01:02:53,200
talking about.

991
01:02:54,200 --> 01:02:54,700
Right.

992
01:02:56,000 --> 01:02:57,700
And so there's our Z bias.

993
01:03:00,700 --> 01:03:04,600
And this just allows us to send v4s down, right?

994
01:03:05,300 --> 01:03:08,500
And those v4s are going to have that see bias in there.

995
01:03:09,400 --> 01:03:14,700
Now, the problem with this is that this will immediately cause or

996
01:03:14,700 --> 01:03:19,800
should cause kind of disastrous results and you can see why that's an

997
01:03:19,800 --> 01:03:23,200
uninitialized value obviously, but that's not really the reason why

998
01:03:23,200 --> 01:03:25,300
it's going to be a disaster.

999
01:03:25,500 --> 01:03:28,600
The reason it's going to be a disaster is because right now without

1000
01:03:28,600 --> 01:03:29,300
the shaders,

1001
01:03:30,700 --> 01:03:38,200
This GL Vertex, 4 V is actually setting the W coordinate of the

1002
01:03:38,400 --> 01:03:41,500
vectors that are going to get transformed right now.

1003
01:03:41,500 --> 01:03:43,600
We know that it's a z bias value.

1004
01:03:43,600 --> 01:03:46,600
We know this not supposed to be the W coordinate that's used in the

1005
01:03:46,600 --> 01:03:47,500
vector transform.

1006
01:03:47,500 --> 01:03:52,000
But opengl doesn't know that yet because we haven't loaded a Shader,

1007
01:03:52,300 --> 01:03:56,100
that tells it how to operate on incoming vertex values.

1008
01:03:56,200 --> 01:03:58,500
So it just sees a value.

1009
01:03:58,500 --> 01:04:00,300
That's the fourth value of the vertex that goes up.

1010
01:04:00,500 --> 01:04:05,500
Oh, it's trying to tell me how to set the W coordinate.

1011
01:04:05,500 --> 01:04:08,100
I should set the W coordinate and multiply that through the Matrix.

1012
01:04:08,100 --> 01:04:10,100
That's exactly not what we want to do here.

1013
01:04:10,300 --> 01:04:15,100
So that is an expected, erroneous Behavior, that'll won't get fixed

1014
01:04:15,100 --> 01:04:18,300
until the shaders are written.

1015
01:04:18,700 --> 01:04:21,200
So now in our push bitmap call,

1016
01:04:25,000 --> 01:04:29,100
When we, when we do push bitmap and we're setting that entry p-value

1017
01:04:29,100 --> 01:04:29,600
here.

1018
01:04:30,300 --> 01:04:35,300
We want that to be set to that Z bias to be set here.

1019
01:04:35,500 --> 01:04:39,300
And at the moment, we can just set it to 0 0, and then that'll be

1020
01:04:39,300 --> 01:04:40,400
fine, right?

1021
01:04:40,500 --> 01:04:42,400
Because that will restore.

1022
01:04:42,400 --> 01:04:45,900
Sort of, you know, some functionality to

1023
01:04:51,400 --> 01:04:52,200
Guess that won't know.

1024
01:04:52,200 --> 01:04:52,800
I think about it.

1025
01:04:52,800 --> 01:04:53,600
The Z value.

1026
01:04:53,600 --> 01:04:58,000
The the W coordinate has to be one in these cases so I guess there

1027
01:04:58,000 --> 01:05:01,400
really is no way for me to restore this Behavior.

1028
01:05:01,400 --> 01:05:05,400
Now that I think about it, we can restore the value of behavior for

1029
01:05:05,400 --> 01:05:06,300
two of the points.

1030
01:05:06,300 --> 01:05:07,900
Her right.

1031
01:05:08,200 --> 01:05:12,300
But not the other one which kind of produces a rather amusing effect.

1032
01:05:12,300 --> 01:05:17,800
I suppose as everybody gets sort of sucked out into infinity and

1033
01:05:17,800 --> 01:05:19,900
beyond their yeah.

1034
01:05:19,900 --> 01:05:21,000
So I can't reproduce.

1035
01:05:21,100 --> 01:05:22,700
That I guess at the moment.

1036
01:05:22,700 --> 01:05:24,900
So we'll have to actually just do something reasonably Ur.

1037
01:05:25,700 --> 01:05:30,400
So Okay, so for our push bitmap, call the Z bias in this case is going

1038
01:05:30,400 --> 01:05:32,900
to be proportional to the height, right?

1039
01:05:33,300 --> 01:05:36,200
So I'm just going to say for now, it's going to be some value

1040
01:05:36,200 --> 01:05:37,600
proportional to the height.

1041
01:05:37,600 --> 01:05:39,900
We don't know what that value is going to be yet.

1042
01:05:40,700 --> 01:05:45,000
But you know, we'll have to tune that based on how much we want our

1043
01:05:45,000 --> 01:05:48,600
Sprites to sort of be upstanding, that's what we need.

1044
01:05:50,200 --> 01:05:51,400
And that's all we need.

1045
01:05:52,100 --> 01:05:55,200
That's the complete modification that would have to happen in order

1046
01:05:55,200 --> 01:05:57,400
for our Sprites to properly.

1047
01:05:57,400 --> 01:05:59,900
Now be set up for the Shader to actually work with them.

1048
01:06:00,500 --> 01:06:04,400
Again, unfortunately we don't have a Shader yet, so that's the next

1049
01:06:04,400 --> 01:06:06,600
part that we would have to tackle.

1050
01:06:07,000 --> 01:06:09,200
Now, in order to tackle that we're going to have to load a bunch of

1051
01:06:09,200 --> 01:06:13,400
stuff in here and do a bunch of ridiculous Shenanigans, because the

1052
01:06:13,400 --> 01:06:14,200
Shader stuff.

1053
01:06:17,800 --> 01:06:22,000
With gpus, you just have to appreciate the fact that they were sort of

1054
01:06:22,000 --> 01:06:25,000
designed by committee and designed over a long period of time

1055
01:06:25,000 --> 01:06:27,200
incrementally, where no one really knew what they were going to be

1056
01:06:27,200 --> 01:06:28,100
doing at the end.

1057
01:06:29,200 --> 01:06:33,300
The Shader stuff is incredibly incredibly ugly.

1058
01:06:33,900 --> 01:06:38,900
It Doesn't Matter What GPU API you use.

1059
01:06:39,600 --> 01:06:45,200
You can use DirectX 11, or 12, or Vulcan, or metal, or opengl or

1060
01:06:45,600 --> 01:06:48,900
Of the other alphabet soup of ways of talking with them.

1061
01:06:49,500 --> 01:06:57,500
Shaders are always just this really, really broken half abstraction of

1062
01:06:57,500 --> 01:07:00,000
stuff and it's it's just ugly.

1063
01:07:00,300 --> 01:07:07,800
So you just kind of have to grit and grit your teeth and Empower

1064
01:07:07,800 --> 01:07:08,400
through.

1065
01:07:09,000 --> 01:07:12,900
There's nothing I can say other than it's a mess, it's why I didn't

1066
01:07:12,900 --> 01:07:14,400
really want to do them on handmade hero.

1067
01:07:14,400 --> 01:07:15,200
But because we

1068
01:07:15,400 --> 01:07:19,500
Guided to try to go a little further down the 3D path and actually get

1069
01:07:19,500 --> 01:07:20,800
z-buffering in the game.

1070
01:07:21,300 --> 01:07:23,900
I'm afraid that I have to show you how to do this.

1071
01:07:24,500 --> 01:07:25,900
And so, here we go.

1072
01:07:27,200 --> 01:07:33,100
So I won't talk about the the Shader stuff in particular today or how

1073
01:07:33,100 --> 01:07:35,600
it works, because that will be saved for next weekend.

1074
01:07:35,600 --> 01:07:38,500
So, again, all I'm doing is trying to do some groundwork here, so that

1075
01:07:38,500 --> 01:07:41,900
we won't have as much busy work to do next weekend.

1076
01:07:42,000 --> 01:07:44,700
So, basically, all I want to do is get our opengl

1077
01:07:45,700 --> 01:07:52,000
Platform layer to the point where it can execute Shader code rather

1078
01:07:52,000 --> 01:07:57,000
than executing the fixed function pipeline, that's all we want to do.

1079
01:07:57,800 --> 01:08:01,500
So, in order to do this, we need to start thinking in terms of

1080
01:08:01,500 --> 01:08:08,300
programs and here on Doc's that GL wherever that was, let's see here.

1081
01:08:12,000 --> 01:08:13,400
Here on Doc's dot DL.

1082
01:08:14,400 --> 01:08:20,399
We need to start learning about things like bind program and let's

1083
01:08:20,399 --> 01:08:24,000
see, compile Shader these sorts of things.

1084
01:08:24,200 --> 01:08:24,600
Alright.

1085
01:08:24,600 --> 01:08:27,500
So and Link and all that other good stuff.

1086
01:08:28,800 --> 01:08:32,399
So let's do these up here.

1087
01:08:42,300 --> 01:08:45,000
You're going to need to yell uniform.

1088
01:08:51,899 --> 01:08:53,200
and,

1089
01:08:55,899 --> 01:08:58,100
I'm not sure what else we're going to need, I have to remember as we

1090
01:08:58,100 --> 01:08:59,800
go, but

1091
01:09:01,200 --> 01:09:02,700
I guess, is it text?

1092
01:09:04,399 --> 01:09:10,399
There's one more till Shader Source, that's what I'm looking for.

1093
01:09:14,000 --> 01:09:14,500
All right.

1094
01:09:15,899 --> 01:09:16,399
Okay.

1095
01:09:16,800 --> 01:09:21,500
So let's start by talking about how opengl does this stuff, and again,

1096
01:09:21,500 --> 01:09:24,000
I'm going to skip the Shader part because that's a good thing to kind

1097
01:09:24,000 --> 01:09:25,000
of cover as a unit.

1098
01:09:25,000 --> 01:09:27,899
So we'll cover how to actually, write one next weekend.

1099
01:09:27,899 --> 01:09:31,100
I'm just trying to get the opengl code in place to actually load them,

1100
01:09:31,100 --> 01:09:31,600
right?

1101
01:09:32,300 --> 01:09:35,700
So the first thing that we need to be able to do if we're going to

1102
01:09:35,700 --> 01:09:38,800
create shaders in opengl is we need to be able to specify the Shader

1103
01:09:38,800 --> 01:09:40,200
code to opengl now.

1104
01:09:40,200 --> 01:09:43,100
Opengl unlike its

1105
01:09:44,399 --> 01:09:46,600
Sort of some of the other like DirectX.

1106
01:09:46,600 --> 01:09:50,800
For example, it doesn't deal in terms of an assembly language for

1107
01:09:50,800 --> 01:09:51,300
shaders.

1108
01:09:51,300 --> 01:09:55,000
Instead, it deals in terms of actual just straight source code.

1109
01:09:55,200 --> 01:09:58,500
Now, it doesn't have to deal with source code because you can also do

1110
01:09:58,500 --> 01:10:03,900
things like ask it to compile a program down to Binary and save the

1111
01:10:03,900 --> 01:10:06,600
binary, which you can then re feed it later.

1112
01:10:07,100 --> 01:10:09,700
But you always have to be able to fall back to Source because

1113
01:10:09,900 --> 01:10:11,200
compiling a binary.

1114
01:10:11,500 --> 01:10:13,600
The the binary code will be specific to the

1115
01:10:13,700 --> 01:10:15,000
GPU you compile it on.

1116
01:10:15,300 --> 01:10:19,000
So, on a particular machine, if you know if Shader compilation, if you

1117
01:10:19,000 --> 01:10:21,700
want to get that out of your pipeline because maybe you have thousands

1118
01:10:21,700 --> 01:10:26,200
of shaders and you want them all pre-compiled or who knows what on any

1119
01:10:26,200 --> 01:10:31,700
particular install on a particular GPU, you can ask opengl to take

1120
01:10:31,700 --> 01:10:34,700
Shader source, code, compile it to Binary and then use the binary

1121
01:10:34,700 --> 01:10:34,900
from.

1122
01:10:34,900 --> 01:10:38,600
Now on, you can do that at the GPU and Driver, don't change.

1123
01:10:38,600 --> 01:10:41,400
But you always have to be able to fall back to the Shader source code

1124
01:10:41,400 --> 01:10:43,600
because if you can't go back to your source code anytime,

1125
01:10:43,700 --> 01:10:47,400
There's a new GPU or a new driver update that might need to recompile

1126
01:10:48,000 --> 01:10:49,300
it needs the source code again.

1127
01:10:49,500 --> 01:10:55,500
So the fundamental the primary way that shaders are shipped in opengl

1128
01:10:55,500 --> 01:10:56,700
is as Source.

1129
01:10:56,900 --> 01:11:00,500
Not as an intermediate language in DirectX, that's not the case.

1130
01:11:01,100 --> 01:11:04,500
Typically shaders are compiled down to a sort of Assembly Language

1131
01:11:04,500 --> 01:11:05,100
like thing.

1132
01:11:05,300 --> 01:11:08,200
It's not actually the Assembly Language for the card, it's an

1133
01:11:08,200 --> 01:11:10,800
intermediate Assembly Language and then that intermediate something

1134
01:11:10,800 --> 01:11:13,600
language does get compiled by the card into binary.

1135
01:11:13,700 --> 01:11:14,200
You later.

1136
01:11:15,600 --> 01:11:22,600
Then there's also a thing called SPI RV, which is that right?

1137
01:11:25,500 --> 01:11:26,500
Fit program, intermediate.

1138
01:11:27,500 --> 01:11:29,300
Representation V.

1139
01:11:29,300 --> 01:11:31,800
Yeah, I don't know what the v stands for 15.

1140
01:11:33,400 --> 01:11:33,900
I don't know.

1141
01:11:34,500 --> 01:11:37,600
So there is another thing called strv that Vulcan uses which is sort

1142
01:11:37,600 --> 01:11:42,200
of the opengl version of an intermediate representation, that's more

1143
01:11:42,200 --> 01:11:43,200
like an assembly language.

1144
01:11:43,300 --> 01:11:47,700
That is an Assembly Language might be the wrong term there, but it's

1145
01:11:47,700 --> 01:11:52,300
you know, it's an intermediate rep, not the source code that is also I

1146
01:11:52,300 --> 01:11:56,700
believe getting back ported to opengl now so that you can use it in

1147
01:11:56,700 --> 01:11:57,100
opengl.

1148
01:11:57,300 --> 01:11:59,400
Well, as Vulcan as Intermediate Language.

1149
01:11:59,600 --> 01:11:59,800
So,

1150
01:12:00,200 --> 01:12:04,700
There's a whole mess of that sort of stuff happening, but as far as

1151
01:12:04,700 --> 01:12:07,800
we're concerned because we don't have to worry too much about most of

1152
01:12:07,800 --> 01:12:11,300
that, since we are only going to have a very small number of shaders,

1153
01:12:11,300 --> 01:12:13,400
it's not really an issue for us.

1154
01:12:13,400 --> 01:12:15,700
We are always going to be dealing with just text.

1155
01:12:15,700 --> 01:12:20,300
That is the actual see, like code that shaders used to describe what

1156
01:12:20,300 --> 01:12:22,200
they want to do in source.

1157
01:12:23,400 --> 01:12:28,300
So the first thing we need to be able to do is take that source and

1158
01:12:28,300 --> 01:12:35,900
turn it into some actual usable Shader in open that opengl can use and

1159
01:12:35,900 --> 01:12:36,600
GL shaders.

1160
01:12:36,600 --> 01:12:39,100
Source is the called that does that.

1161
01:12:39,700 --> 01:12:44,000
So if I want to do that in opengl, I need I'm just going to start by

1162
01:12:44,000 --> 01:12:46,900
making a little scratch space here where we can put this stuff in.

1163
01:12:49,200 --> 01:12:53,100
Maybe I'll put it up here in the top.

1164
01:12:53,600 --> 01:12:54,300
We got Oak.

1165
01:12:54,300 --> 01:12:55,800
Get impo, get screen.

1166
01:12:55,800 --> 01:12:57,900
Space or set screen space.

1167
01:12:58,600 --> 01:12:59,600
Why is that still here?

1168
01:13:00,200 --> 01:13:01,000
Nobody knows.

1169
01:13:03,300 --> 01:13:05,500
All right, that's always good.

1170
01:13:07,700 --> 01:13:09,600
Jill bind frame buffer.

1171
01:13:14,700 --> 01:13:19,300
All right, anyway, so what we need to do here is we need to have

1172
01:13:19,300 --> 01:13:22,000
something that's actually going to compile these shaders, right?

1173
01:13:22,700 --> 01:13:25,200
And so, what I need to do is I need to have

1174
01:13:27,400 --> 01:13:30,400
Something that's going to call GL shaders Source.

1175
01:13:30,400 --> 01:13:33,400
Like you can see here and it's going to have to pass and things.

1176
01:13:33,400 --> 01:13:35,200
One is the Shader right?

1177
01:13:35,200 --> 01:13:38,500
And it's the handle of the Shader object which whose source code is to

1178
01:13:38,500 --> 01:13:39,400
be replaced.

1179
01:13:39,500 --> 01:13:43,800
And so much like textures, there's this this notion of sort of handles

1180
01:13:44,200 --> 01:13:47,100
and you can see here that I'm going to need to make one of those in

1181
01:13:47,100 --> 01:13:47,700
order to do this.

1182
01:13:47,700 --> 01:13:50,400
So there's a corresponding called GL, create Shader.

1183
01:13:53,100 --> 01:13:57,900
And you can see there's the Glu in there, which is the Shader, and I'm

1184
01:13:57,900 --> 01:14:00,800
going to call this vertex Shader.

1185
01:14:04,200 --> 01:14:05,100
No caller ID.

1186
01:14:05,800 --> 01:14:08,200
When we create a Shader, we say what type we want.

1187
01:14:08,300 --> 01:14:10,200
In this case, I want to jail vertex Shader.

1188
01:14:12,700 --> 01:14:15,400
I'm going to specify this Shader source code.

1189
01:14:17,100 --> 01:14:17,500
Here.

1190
01:14:18,500 --> 01:14:21,300
And what you can see, there's kind of an odd way that this is

1191
01:14:21,300 --> 01:14:22,900
specified, but you'll understand in a second.

1192
01:14:22,900 --> 01:14:23,300
Why?

1193
01:14:24,100 --> 01:14:25,700
So the GL shaders Source?

1194
01:14:25,800 --> 01:14:27,300
What it does is, it says, okay.

1195
01:14:27,400 --> 01:14:33,800
Here is a not a string that says the source code, but a series of

1196
01:14:33,800 --> 01:14:34,300
strings.

1197
01:14:34,500 --> 01:14:39,200
So there's actually an array of strings with a length of each one.

1198
01:14:39,500 --> 01:14:45,300
And that says, for each, that that says, for each of those strings,

1199
01:14:45,700 --> 01:14:46,700
take the strings.

1200
01:14:46,900 --> 01:14:49,900
Concatenate, all these together and process them like one big source

1201
01:14:49,900 --> 01:14:50,300
file.

1202
01:14:50,400 --> 01:14:50,900
Right?

1203
01:14:51,200 --> 01:14:52,000
And what's that for?

1204
01:14:52,000 --> 01:14:54,900
Well, it's basically, for include right, it basically, it's a cheap

1205
01:14:54,900 --> 01:14:57,200
way to do includes without you having to do it yourself.

1206
01:14:57,500 --> 01:14:59,800
So, in here, I can say, okay,

1207
01:15:00,200 --> 01:15:03,900
We've got serious source code, maybe I want to things.

1208
01:15:03,900 --> 01:15:10,400
And so what I want here is my vertex Shader array and maybe I could do

1209
01:15:10,400 --> 01:15:14,100
this, you know, array count vertex, Shader code,

1210
01:15:17,800 --> 01:15:20,800
It's shooter code and four digit code length.

1211
01:15:31,600 --> 01:15:35,700
So here is an example of how this would be called, and then we just

1212
01:15:35,700 --> 01:15:37,000
need something to fill it.

1213
01:15:37,000 --> 01:15:44,200
And so you can see we got a GL care, which is vertex Shader code and I

1214
01:15:44,200 --> 01:15:46,600
have to provide pointers here, right?

1215
01:15:47,600 --> 01:15:56,800
And then I've got GL in t, which is vertex Shader code lengths.

1216
01:15:57,700 --> 01:16:00,400
And then here, what I want to do is take

1217
01:16:01,200 --> 01:16:02,900
These guys, right?

1218
01:16:05,100 --> 01:16:06,300
And do a string length on them.

1219
01:16:06,300 --> 01:16:07,600
I need to know how long they are.

1220
01:16:11,600 --> 01:16:15,500
Okay, at least I assume so I don't know if you can pass.

1221
01:16:15,500 --> 01:16:18,900
Z is 0 here, you might be able to each of the link that we may

1222
01:16:18,900 --> 01:16:20,500
continue the length of the corresponding string.

1223
01:16:20,500 --> 01:16:24,500
The null characters archives or a value less than zero to indicate

1224
01:16:24,500 --> 01:16:25,900
that the string is null terminated.

1225
01:16:26,600 --> 01:16:29,100
So we could just specify - ones here as well.

1226
01:16:34,400 --> 01:16:35,000
looks like,

1227
01:16:38,500 --> 01:16:41,100
And so, in that case two, we could just do this.

1228
01:16:44,100 --> 01:16:45,400
This is going to be the same everywhere.

1229
01:16:49,500 --> 01:16:50,700
And we can just pad this out.

1230
01:16:50,700 --> 01:16:53,900
So even if we did more source code or something, right?

1231
01:16:56,700 --> 01:16:57,400
We'd be fine.

1232
01:16:58,100 --> 01:17:02,800
Okay, so now we have a way of creating Shader source code feeding it

1233
01:17:02,800 --> 01:17:07,200
down for the vertex Shader and I want to create two shaders.

1234
01:17:07,200 --> 01:17:10,900
I want a Vertex Shader and I want a fragment Shader, those correspond

1235
01:17:10,900 --> 01:17:15,000
to how we transform vertices and how we shade pixels, how we like

1236
01:17:15,100 --> 01:17:16,500
compute the color of pixels.

1237
01:17:16,700 --> 01:17:20,800
And like I said, I'll explain all this next week in terms of when we

1238
01:17:20,800 --> 01:17:22,200
actually want to write some shaders.

1239
01:17:22,700 --> 01:17:26,000
So for the moment, we won't have to worry too much about

1240
01:17:26,100 --> 01:17:28,900
That but off, we go here.

1241
01:17:32,400 --> 01:17:35,300
With our fragment Shader code in a Vertex Shader code, right?

1242
01:17:35,900 --> 01:17:39,000
So now what I want to do is I want to make this function.

1243
01:17:39,000 --> 01:17:39,400
Right.

1244
01:17:39,400 --> 01:17:43,000
What I want to do is I want to have a way to create programs that

1245
01:17:43,000 --> 01:17:48,700
opengl is going to use to do our Graphics pipeline processing and we

1246
01:17:48,700 --> 01:17:51,400
need to be able to specify how to deal with vertices.

1247
01:17:51,400 --> 01:17:53,600
That's a Vertex Shader part it how to deal with pixels.

1248
01:17:53,600 --> 01:17:55,100
That's a fragment Shader part.

1249
01:17:56,600 --> 01:17:59,800
and so here, I'm just going to say like, you know, opengl

1250
01:18:01,700 --> 01:18:02,700
A great program.

1251
01:18:03,000 --> 01:18:04,000
I'm going to say that.

1252
01:18:04,000 --> 01:18:06,000
Whoever wants to create one of these programs.

1253
01:18:06,000 --> 01:18:09,400
It will probably return something in a second here like like one of

1254
01:18:09,400 --> 01:18:10,000
these IDs.

1255
01:18:10,000 --> 01:18:12,200
So it's probably going to return, you know, Jewel, you enter,

1256
01:18:12,200 --> 01:18:12,700
whatever.

1257
01:18:13,000 --> 01:18:16,900
When it creates a program, I want to be able to pass a couple things.

1258
01:18:16,900 --> 01:18:22,800
First of all, I want one care star that is going to be my vertex

1259
01:18:22,800 --> 01:18:23,600
Shader code.

1260
01:18:25,100 --> 01:18:26,500
I want my fragment Shader.

1261
01:18:27,500 --> 01:18:28,100
Right.

1262
01:18:32,500 --> 01:18:34,500
And then I also want to share it header.

1263
01:18:34,500 --> 01:18:35,100
Let's say.

1264
01:18:40,900 --> 01:18:44,200
Like that, then what I'm going to do is going to put the header code

1265
01:18:44,200 --> 01:18:44,800
in here.

1266
01:18:48,500 --> 01:18:49,600
The vertex code.

1267
01:18:51,000 --> 01:18:53,900
The header code and the fragment code, right?

1268
01:18:54,200 --> 01:18:55,600
And so you can see what I'm doing here is.

1269
01:18:55,600 --> 01:19:00,000
I'm just using the fact that we can pass multiple strings to allow

1270
01:19:00,000 --> 01:19:04,600
whoever's creating the program to pass some shared code that will be

1271
01:19:04,700 --> 01:19:09,400
used by both and then the code, the specifics to the vertex Shader and

1272
01:19:09,400 --> 01:19:09,700
the code.

1273
01:19:09,700 --> 01:19:11,800
This is there to the fragment Shader, right?

1274
01:19:12,200 --> 01:19:15,100
And again that's just using the fact that opengl is nice and allows us

1275
01:19:15,100 --> 01:19:18,200
to pass an array of strings to prevent me from having to concatenate

1276
01:19:18,200 --> 01:19:20,100
these things together, right?

1277
01:19:20,100 --> 01:19:20,600
So I'm just kind of

1278
01:19:20,700 --> 01:19:21,800
Using that feature.

1279
01:19:22,200 --> 01:19:23,200
That's really all I'm doing.

1280
01:19:23,800 --> 01:19:28,100
So when I once I've done this and I've done my Shader Source, I now

1281
01:19:28,100 --> 01:19:33,600
have Shader IDs that have whatever code we passed in here compiled and

1282
01:19:33,600 --> 01:19:34,400
ready to go.

1283
01:19:34,900 --> 01:19:36,900
Well, not really compiled parsed and ready to go.

1284
01:19:37,400 --> 01:19:40,600
And so now, the question is, how do I actually bring them together

1285
01:19:40,600 --> 01:19:41,600
into a Shader?

1286
01:19:42,000 --> 01:19:47,200
Well, the answer is I do a GL, compiled Shader on the actual

1287
01:19:48,100 --> 01:19:50,500
individual Shader portions and then I

1288
01:19:50,700 --> 01:19:55,900
I have to link them together as a program in order to sort of bind the

1289
01:19:55,900 --> 01:19:57,900
vertex and fragment shaders together.

1290
01:19:58,600 --> 01:19:59,600
So I have to call GL.

1291
01:19:59,600 --> 01:20:03,400
Compile Shader this again does nothing other than tell it.

1292
01:20:03,400 --> 01:20:08,000
Ok, now you can kind of finalize this code that I sent down, so we'll

1293
01:20:08,000 --> 01:20:09,700
go fragment Shader ID.

1294
01:20:13,800 --> 01:20:15,100
Vertex Shader ID.

1295
01:20:20,100 --> 01:20:20,700
Right.

1296
01:20:21,600 --> 01:20:24,400
And then what we need to do is do that GLD program.

1297
01:20:27,900 --> 01:20:30,900
But as you can see, there's some steps missing here, we don't have a

1298
01:20:30,900 --> 01:20:34,400
program and we haven't told it how to associate these with the

1299
01:20:34,400 --> 01:20:35,900
program, right?

1300
01:20:36,200 --> 01:20:39,500
So now we need to go to a few of the other parts in here.

1301
01:20:39,500 --> 01:20:42,200
First of all, we need to do create program as you can see, that's

1302
01:20:42,200 --> 01:20:45,500
exactly the same as the.

1303
01:20:46,800 --> 01:20:49,000
It's exactly analogous to creating a Shader.

1304
01:20:50,700 --> 01:20:52,100
So here's Jill crate program.

1305
01:20:55,900 --> 01:20:58,900
And again, we don't need any parameters because a program is the whole

1306
01:20:58,900 --> 01:20:59,600
pipeline.

1307
01:20:59,600 --> 01:20:59,800
It's

1308
01:21:00,000 --> 01:21:02,300
Shaders come together to make a full pipeline.

1309
01:21:02,300 --> 01:21:03,800
So we don't need to tell it anything.

1310
01:21:03,800 --> 01:21:07,600
It's just a program and it has whatever it will have.

1311
01:21:07,800 --> 01:21:10,400
And then what we need to do is use this function called GL attached,

1312
01:21:10,400 --> 01:21:14,200
Shader to say, what the shaders are that constitute this pipeline.

1313
01:21:14,500 --> 01:21:16,100
So we say, GL attached,

1314
01:21:17,300 --> 01:21:20,100
Shader, we give it the program in the Shader.

1315
01:21:20,400 --> 01:21:21,800
So there's the program ID.

1316
01:21:24,400 --> 01:21:25,800
There's the fragment Shader ID.

1317
01:21:27,100 --> 01:21:29,300
Program, ID vertex, Shader ID.

1318
01:21:30,200 --> 01:21:35,500
Okay, so you can now see the full sort of sweep of creating a program

1319
01:21:35,500 --> 01:21:36,900
that opengl is going to use.

1320
01:21:37,100 --> 01:21:41,600
We assume like we're going to learn next weekend like I said how this

1321
01:21:41,600 --> 01:21:43,000
code actually works.

1322
01:21:43,500 --> 01:21:46,800
So we're just assuming that in here is some valid code.

1323
01:21:46,800 --> 01:21:49,700
We have some shared code that everyone's going to want to look at.

1324
01:21:49,700 --> 01:21:52,800
We have some vertex code that's going to be only for the vertex,

1325
01:21:53,000 --> 01:21:54,300
transform part of things.

1326
01:21:54,400 --> 01:21:56,600
So fragment code, that's only for the pixel part.

1327
01:21:57,100 --> 01:22:00,200
What we do is we create some just a buffer of negative ones because

1328
01:22:00,200 --> 01:22:01,800
we're not specify any links explicitly.

1329
01:22:01,800 --> 01:22:03,000
We're going to use null termination.

1330
01:22:03,000 --> 01:22:05,600
So that's just a just there for that.

1331
01:22:06,100 --> 01:22:09,200
We're going to create a Vertex Shader, so opengl understands there is

1332
01:22:09,200 --> 01:22:10,200
a vertex Shader.

1333
01:22:10,400 --> 01:22:11,600
We want to talk about.

1334
01:22:11,800 --> 01:22:14,900
We're going to pass down that code, the header code, the vertex code,

1335
01:22:14,900 --> 01:22:17,000
say here's the source code for it.

1336
01:22:17,000 --> 01:22:20,500
We're going to compile it and maybe we should compile it like this.

1337
01:22:22,800 --> 01:22:23,300
Right.

1338
01:22:23,300 --> 01:22:24,500
We're going to compile it.

1339
01:22:25,000 --> 01:22:28,400
We're going to fragment one same thing, compile that.

1340
01:22:29,000 --> 01:22:32,400
And then we're going to go ahead and make a program, which binds those

1341
01:22:32,400 --> 01:22:34,400
two shaders together and Link that program.

1342
01:22:34,900 --> 01:22:39,600
That is all we really need to do to create a functioning program and

1343
01:22:39,600 --> 01:22:40,300
opengl.

1344
01:22:40,700 --> 01:22:44,700
Then we can just spend all day filling in strings here that do

1345
01:22:44,700 --> 01:22:45,700
different things, right?

1346
01:22:45,700 --> 01:22:47,400
Just write arbitrary code.

1347
01:22:49,600 --> 01:22:51,500
They can be executed on the GPU.

1348
01:22:52,800 --> 01:22:54,800
So we need all of that stuff.

1349
01:22:54,800 --> 01:22:57,500
So we're going to have to go, grab all of those functions and get

1350
01:22:57,500 --> 01:22:58,100
them, right?

1351
01:22:58,100 --> 01:23:02,300
Because these are all functions that need to be bound via wiggle.

1352
01:23:02,300 --> 01:23:05,000
Get proc address just like everything else.

1353
01:23:05,600 --> 01:23:07,900
So let's go ahead and do that.

1354
01:23:12,600 --> 01:23:14,000
Let's go ahead up here.

1355
01:23:19,300 --> 01:23:22,500
And we have to go to core our band, get all of our stuff.

1356
01:23:24,000 --> 01:23:27,300
So we need Jill, create Shader.

1357
01:23:32,800 --> 01:23:36,300
Why are there six entries for this because creature bright?

1358
01:23:36,300 --> 01:23:38,600
Okay, so we need all these.

1359
01:23:38,600 --> 01:23:42,600
We need create program, we need compile Shader,

1360
01:23:44,300 --> 01:23:45,000
attach Shader.

1361
01:23:45,000 --> 01:23:46,500
I guess we need all of these actually.

1362
01:23:57,200 --> 01:23:58,700
all right, so we've got

1363
01:24:16,300 --> 01:24:17,000
Type desk.

1364
01:24:17,000 --> 01:24:17,400
Now,

1365
01:24:20,900 --> 01:24:22,200
and so here you can see

1366
01:24:25,700 --> 01:24:28,100
I don't know that we actually need find out of trouble location yet,

1367
01:24:28,100 --> 01:24:31,000
so I'm not going to put anything that we haven't actually called.

1368
01:24:31,000 --> 01:24:32,900
We are going to need some stuff for binding.

1369
01:24:33,200 --> 01:24:37,100
Attributes will see what that's like later but you can see here we've

1370
01:24:37,100 --> 01:24:42,300
got tabs, compiled, create, and those are all the ones we needed from

1371
01:24:42,300 --> 01:24:45,400
here, but we need link.

1372
01:24:47,100 --> 01:24:47,700
Right.

1373
01:24:48,800 --> 01:24:51,000
And we need Shader source.

1374
01:25:01,600 --> 01:25:07,000
Now I can't tell which one get shooter Source.

1375
01:25:07,000 --> 01:25:07,600
There we go.

1376
01:25:07,700 --> 01:25:11,600
We don't want get Shooters source and we're going to need Lincoln use

1377
01:25:11,600 --> 01:25:12,400
obviously as well.

1378
01:25:12,400 --> 01:25:13,600
So let's go ahead and get those

1379
01:25:16,600 --> 01:25:17,100
There we go.

1380
01:25:27,500 --> 01:25:30,900
okay, so I think we are now

1381
01:25:38,600 --> 01:25:41,000
Pretty good to go in terms of.

1382
01:25:44,000 --> 01:25:47,000
The basic stuff we need to get our compiling working.

1383
01:25:49,500 --> 01:25:51,100
There is one more thing we're going to need.

1384
01:25:51,100 --> 01:25:54,300
I think in a second here but we'll see.

1385
01:26:02,000 --> 01:26:02,600
All right.

1386
01:26:18,700 --> 01:26:19,700
It's not what I meant to do it all.

1387
01:26:19,700 --> 01:26:20,200
There we go.

1388
01:26:21,300 --> 01:26:24,700
Sorry zoned out there for a second, too much mindless text

1389
01:26:24,700 --> 01:26:25,500
manipulation.

1390
01:26:27,800 --> 01:26:28,200
Yeah.

1391
01:26:48,000 --> 01:26:48,500
so,

1392
01:26:51,800 --> 01:26:57,300
Looking at that you can see that we're starting to get a lot of things

1393
01:26:57,300 --> 01:26:58,400
here that we have to query.

1394
01:26:58,400 --> 01:26:59,800
And so, you know,

1395
01:27:01,200 --> 01:27:04,700
Obviously, in my own code, I have some automated stuff that kind of

1396
01:27:04,700 --> 01:27:07,300
generates these sorts of binding things for me.

1397
01:27:07,600 --> 01:27:10,400
And so it's kind of a pain in the butt when you're doing it manually,

1398
01:27:11,400 --> 01:27:15,800
you can also use there are like libraries like glue or whatever that

1399
01:27:15,800 --> 01:27:18,000
will do the querying for you if you want to.

1400
01:27:18,600 --> 01:27:21,600
But as you get into sort of trying to use extended opengl because it's

1401
01:27:21,600 --> 01:27:25,900
a little bit balkanized at this point, you kind of have to deal with

1402
01:27:26,300 --> 01:27:30,400
either using a library or doing this stuff yourself, unfortunately.

1403
01:27:31,400 --> 01:27:32,800
That's just how that goes.

1404
01:27:35,800 --> 01:27:36,200
Okay.

1405
01:27:47,100 --> 01:27:48,600
Actually, that was not what I wanted.

1406
01:27:49,000 --> 01:27:49,900
I think about it.

1407
01:27:54,000 --> 01:27:57,200
I actually want to retain this piece of information.

1408
01:28:03,400 --> 01:28:06,000
Because yeah, this is just kind of mindless and there's really no

1409
01:28:06,000 --> 01:28:08,200
point to it if that makes sense.

1410
01:28:11,900 --> 01:28:13,400
You can easily automate it.

1411
01:28:13,400 --> 01:28:16,700
Something that just parses those header files in generates, one of

1412
01:28:16,700 --> 01:28:17,400
these things

1413
01:28:21,100 --> 01:28:21,600
There we go.

1414
01:28:24,000 --> 01:28:26,800
But writing something like that on handmade here is not particularly

1415
01:28:27,000 --> 01:28:29,400
good use of time, because by the time we finished it, we could have

1416
01:28:29,400 --> 01:28:32,100
done them by hand, probably it shorter, right?

1417
01:28:32,400 --> 01:28:36,200
So depends whether you're trying to solve the problem long-term or

1418
01:28:36,200 --> 01:28:37,700
whether you only need a little bit.

1419
01:28:38,400 --> 01:28:40,600
So here is

1420
01:28:44,000 --> 01:28:45,100
The appropriate wiggle.

1421
01:28:45,100 --> 01:28:46,500
Get proc address stuff.

1422
01:28:47,600 --> 01:28:50,400
To get us all of the functions that we need to compile a program.

1423
01:28:51,100 --> 01:28:54,200
And fortunately, there's not that many more functions we actually need

1424
01:28:54,200 --> 01:28:59,600
because once we can compile programs, most of the the new stuff that

1425
01:28:59,600 --> 01:29:04,000
you need for shaders comes in the Shader which is just text your

1426
01:29:04,000 --> 01:29:08,400
passing to opengl and doesn't require any get proc address or anything

1427
01:29:08,400 --> 01:29:10,800
like that because you're just sticking the code in the Shader and off

1428
01:29:10,800 --> 01:29:11,400
it goes.

1429
01:29:13,400 --> 01:29:15,500
So that's pretty good, right?

1430
01:29:16,400 --> 01:29:19,500
What we do need to do, however, what is the problem?

1431
01:29:21,100 --> 01:29:28,300
Into sumed D, does not support, what missing types as far into sumed.

1432
01:29:30,700 --> 01:29:32,200
Where is the missing types of Safar?

1433
01:29:32,200 --> 01:29:33,600
Do not know GL sighs.

1434
01:29:33,600 --> 01:29:37,700
I perhaps we find out.

1435
01:29:46,400 --> 01:29:47,300
I don't know if it knows.

1436
01:29:47,300 --> 01:29:49,500
Jill, size, I or not, we just find out.

1437
01:29:49,500 --> 01:29:50,200
That's the problem.

1438
01:29:54,400 --> 01:29:55,600
So what don't you know?

1439
01:29:56,000 --> 01:29:56,500
Do you know g?

1440
01:29:56,500 --> 01:29:57,300
L care?

1441
01:29:59,000 --> 01:29:59,800
You know, Jill.

1442
01:30:00,000 --> 01:30:00,400
and,

1443
01:30:01,800 --> 01:30:03,800
How do you not know, Jill, Shader source.

1444
01:30:04,900 --> 01:30:05,900
What is the problem here?

1445
01:30:10,400 --> 01:30:12,800
I'm not sure what it's actually complaining about.

1446
01:30:25,200 --> 01:30:31,200
It would be really nice if this gave me a column for the error.

1447
01:30:31,200 --> 01:30:35,800
So I knew what it was actually complaining about to say the least.

1448
01:30:39,000 --> 01:30:42,400
missing comma before star, of course there isn't

1449
01:30:45,000 --> 01:30:47,500
Let me get rid of these constant here so I can see.

1450
01:30:50,900 --> 01:30:52,200
What it's actually talking about.

1451
01:30:52,400 --> 01:30:54,800
So you have G Ln, T GL care, GL sighs.

1452
01:30:54,800 --> 01:31:00,500
I and Glu in all of which I feel like should be valid

1453
01:31:28,000 --> 01:31:29,300
Gee L care.

1454
01:31:42,400 --> 01:31:43,600
So it doesn't know.

1455
01:31:43,600 --> 01:31:43,900
G.

1456
01:31:43,900 --> 01:31:44,700
L care.

1457
01:31:47,300 --> 01:31:51,000
That I would not have expected but I guess it doesn't.

1458
01:31:55,500 --> 01:31:55,900
Well.

1459
01:31:57,700 --> 01:31:59,200
That's pretty easy to rectify.

1460
01:32:03,500 --> 01:32:06,200
All right, you learn something new every day.

1461
01:32:07,100 --> 01:32:07,500
Okay?

1462
01:32:07,500 --> 01:32:11,600
So let's take a look here at GL stuff that we need here.

1463
01:32:11,600 --> 01:32:18,400
Create Shader is apparently not found why not create Shader 0 because

1464
01:32:18,400 --> 01:32:20,100
I called it create Shader.

1465
01:32:21,300 --> 01:32:24,600
Create Shader, sounds good because games always have crates in them.

1466
01:32:24,700 --> 01:32:26,800
So I feel like you do need a crate Shader.

1467
01:32:26,900 --> 01:32:27,500
Right?

1468
01:32:27,900 --> 01:32:28,900
That seems reasonable.

1469
01:32:29,500 --> 01:32:29,700
All right.

1470
01:32:29,700 --> 01:32:32,800
So we've got everything we just need the

1471
01:32:34,200 --> 01:32:37,400
Oops, we just need the pound.

1472
01:32:37,400 --> 01:32:41,300
Defiance for what a vertex, in a fragment Shader are, and then we're

1473
01:32:41,300 --> 01:32:41,700
done.

1474
01:32:42,300 --> 01:32:43,900
That's that's all we should need.

1475
01:32:44,200 --> 01:32:46,300
So let's see those in there.

1476
01:32:47,500 --> 01:32:52,100
So now we can compile code and of course that's not going to change

1477
01:32:52,100 --> 01:32:52,500
anything.

1478
01:32:52,500 --> 01:32:56,000
We still have our crazy W, coordinate being wrong there.

1479
01:32:57,000 --> 01:32:59,800
So now we just need to go into the opengl.

1480
01:33:01,100 --> 01:33:03,800
And actually give it some code to compile, right?

1481
01:33:03,800 --> 01:33:08,500
If I wanted to create a program I could now that would be pretty easy

1482
01:33:08,500 --> 01:33:09,000
to do.

1483
01:33:09,500 --> 01:33:16,000
So let's create some of these you know while we're at it here is our

1484
01:33:16,000 --> 01:33:18,000
opengl info here.

1485
01:33:20,100 --> 01:33:25,500
I'm not sure how we were setting up like our opengl default texture

1486
01:33:25,600 --> 01:33:25,900
stuff.

1487
01:33:25,900 --> 01:33:28,600
I'm not your fault internal, here you go.

1488
01:33:29,600 --> 01:33:32,700
So the way that we're doing this opengl default, internal texture

1489
01:33:32,700 --> 01:33:33,500
format thing.

1490
01:33:34,100 --> 01:33:38,700
It's sort of suggests to me that we maybe need to have a sort of

1491
01:33:38,700 --> 01:33:42,700
Global's for opengl so that they're a little bit more contained

1492
01:33:42,900 --> 01:33:48,400
because opengl default text internal format here and reserved blit

1493
01:33:48,400 --> 01:33:49,000
texture.

1494
01:33:49,800 --> 01:33:52,700
Those things I feel like now it's kind of at the point where we want

1495
01:33:52,700 --> 01:33:55,800
this stuff to be sort of bundled together, if that makes sense.

1496
01:33:56,900 --> 01:34:01,300
I feel like this stuff should just kind of come into, like, you know,

1497
01:34:01,300 --> 01:34:06,400
and opengl .h basically, as are we even including an open Gilded Age?

1498
01:34:06,900 --> 01:34:08,000
I guess, we don't yet.

1499
01:34:11,100 --> 01:34:13,000
But some kind of an opengl today, chair.

1500
01:34:22,600 --> 01:34:24,600
You go see where I want to make that.

1501
01:34:36,600 --> 01:34:41,000
and what I'll do here is just say, okay, here's an open Jill, that H

1502
01:34:41,600 --> 01:34:42,900
and this thing will have

1503
01:34:44,000 --> 01:34:46,300
an opengl levels.

1504
01:34:48,900 --> 01:34:51,600
Piece of information or I guess opengl.

1505
01:34:51,700 --> 01:34:54,500
We could just call it up in jail, just the stuff we need for opengl,

1506
01:34:54,500 --> 01:34:55,000
right?

1507
01:34:55,900 --> 01:34:58,400
And in here, I can stuff these guys.

1508
01:35:08,800 --> 01:35:12,900
And then I'll say, Global variable opengl opengl.

1509
01:35:16,100 --> 01:35:18,100
Something like that and I should it be open underscore.

1510
01:35:18,100 --> 01:35:18,700
Go.

1511
01:35:19,800 --> 01:35:20,600
Not really no.

1512
01:35:21,900 --> 01:35:22,400
Maybe.

1513
01:35:24,900 --> 01:35:25,900
and so,

1514
01:35:31,500 --> 01:35:33,900
I think that'll give me everything that I want here.

1515
01:35:34,300 --> 01:35:37,400
And then, every time we were using something like that, I'm going to

1516
01:35:37,400 --> 01:35:42,000
go ahead and put this way so you can kind of just see that those are

1517
01:35:42,000 --> 01:35:46,000
bundled together and I don't have them strewn all over the place, not

1518
01:35:46,000 --> 01:35:49,200
sure what's go below and what's not or anything like that, right?

1519
01:36:09,300 --> 01:36:09,700
Okay.

1520
01:36:18,200 --> 01:36:23,300
So now that we've got that taken care of all, I really need to do is

1521
01:36:23,400 --> 01:36:29,500
go into the opengl in it, call and try creating some shaders and we

1522
01:36:29,500 --> 01:36:32,600
can sort of start to work with that and get ourselves in position to

1523
01:36:32,600 --> 01:36:34,800
do it next next week.

1524
01:36:39,700 --> 01:36:40,300
Here we go.

1525
01:36:41,000 --> 01:36:44,700
So this open Jill and it should really be down kind of at the bottom.

1526
01:36:47,100 --> 01:36:50,300
We can start to move things into that Global as well which will be

1527
01:36:50,300 --> 01:36:50,700
nice.

1528
01:36:51,200 --> 01:36:56,800
So here's our opengl in it and we can pretend that the end of this

1529
01:36:56,800 --> 01:37:00,600
year, for example, that maybe we want to create some programs and

1530
01:37:00,600 --> 01:37:06,200
maybe we say that opengl we've got, you know, two programs or I guess

1531
01:37:06,200 --> 01:37:07,300
we probably just have

1532
01:37:14,800 --> 01:37:15,500
in this case,

1533
01:37:16,800 --> 01:37:23,300
For all of our rendering, we probably would have the default.

1534
01:37:23,300 --> 01:37:26,900
I mean, I guess what, maybe we'll just call it for now our Z bias

1535
01:37:27,400 --> 01:37:28,000
program,

1536
01:37:33,800 --> 01:37:35,200
Maybe basic Z bias.

1537
01:37:39,600 --> 01:37:42,500
And when we call up in jail, create program, what we need is the

1538
01:37:42,500 --> 01:37:45,600
header code, the vertex code in the fragment code, right?

1539
01:37:46,500 --> 01:37:49,900
And in this case, we can sort of just be kind of absurd here, if we

1540
01:37:49,900 --> 01:37:51,900
want to the header code.

1541
01:37:54,600 --> 01:37:54,900
Oops.

1542
01:38:05,300 --> 01:38:09,600
Unfortunately C++ only recently supported hear Doc's.

1543
01:38:09,700 --> 01:38:12,700
It would be really nice if they did but since they don't, you kind of

1544
01:38:12,700 --> 01:38:16,600
have to do it this way until you get to a version of a compiler that

1545
01:38:16,600 --> 01:38:19,800
actually supports here docs, which only the latest ones do.

1546
01:38:21,100 --> 01:38:24,200
But for now, we can sort of say, here's header code, right?

1547
01:38:24,300 --> 01:38:26,300
And we can do

1548
01:38:30,100 --> 01:38:31,200
Vertex code.

1549
01:38:32,800 --> 01:38:34,200
and fragment code,

1550
01:38:37,300 --> 01:38:39,300
Similarly, right.

1551
01:38:39,700 --> 01:38:43,200
So basically, this is a way to do.

1552
01:38:46,000 --> 01:38:46,900
Header code.

1553
01:38:48,400 --> 01:38:49,400
Vertex code.

1554
01:38:51,200 --> 01:38:52,100
Fragment code.

1555
01:38:53,700 --> 01:38:55,000
And actually have it all.

1556
01:38:55,200 --> 01:38:58,900
As far as I know work properly, we can sort of go in and take a look

1557
01:38:58,900 --> 01:38:59,200
at that.

1558
01:38:59,200 --> 01:38:59,500
Now

1559
01:39:09,400 --> 01:39:11,700
So now we have the ability to create a program.

1560
01:39:11,700 --> 01:39:14,000
We know how to pass the text down to it, right?

1561
01:39:14,000 --> 01:39:16,300
And so if I come down through here,

1562
01:39:27,100 --> 01:39:27,400
Hmm.

1563
01:39:31,300 --> 01:39:36,300
Ah, so when we do our in it, we haven't yet finished all of this

1564
01:39:36,300 --> 01:39:36,900
stuff.

1565
01:39:41,000 --> 01:39:44,900
I guess I misunderstood what we were doing in our in it there, so are

1566
01:39:44,900 --> 01:39:45,700
in it.

1567
01:39:51,300 --> 01:39:56,400
I'm not sure why is our in it happening before we query.

1568
01:39:57,000 --> 01:39:59,200
That seems really strange.

1569
01:40:02,700 --> 01:40:05,800
I think that's because of the way that opened you'll get info used to

1570
01:40:05,800 --> 01:40:06,900
be happening.

1571
01:40:09,600 --> 01:40:11,800
But I think that's not probably how we want it.

1572
01:40:11,800 --> 01:40:17,900
I would think what we probably want is opengl get info modern context

1573
01:40:18,500 --> 01:40:23,800
and then probably what we want to do is do this stuff here and then

1574
01:40:23,800 --> 01:40:26,700
come down and do this, right?

1575
01:40:27,400 --> 01:40:29,500
And the reserved lit texture stuff.

1576
01:40:29,500 --> 01:40:32,700
Should probably happen here and so on and so forth, right?

1577
01:40:33,200 --> 01:40:36,600
If we're looking if we're looking at what sort of going on here, so I

1578
01:40:36,600 --> 01:40:39,100
feel like we probably want something more like that.

1579
01:40:41,800 --> 01:40:42,500
and then,

1580
01:40:44,100 --> 01:40:48,900
you know, the opengl info would be getting passed down here like so,

1581
01:40:51,300 --> 01:40:53,600
Now, in the opengl info.

1582
01:40:53,600 --> 01:40:54,700
Where is that struct?

1583
01:40:54,700 --> 01:40:55,500
Is that appear?

1584
01:40:55,500 --> 01:40:57,400
Yeah, the opengl infrastructure.

1585
01:40:57,400 --> 01:40:59,900
I'm going to grab out, put it up here.

1586
01:41:00,000 --> 01:41:02,400
You can see that that already has the modern context piece of

1587
01:41:02,400 --> 01:41:06,900
information in it which means that it wouldn't have to pass it here.

1588
01:41:07,300 --> 01:41:13,300
And the frame buffer is supports srgb part of it as well, is also

1589
01:41:13,300 --> 01:41:15,600
something that it would presumably know.

1590
01:41:32,500 --> 01:41:35,000
Not sure exactly how that one should work.

1591
01:41:35,800 --> 01:41:37,500
So I'm going to go ahead and get rid of that.

1592
01:41:48,400 --> 01:41:49,500
And we should be good to go.

1593
01:41:57,700 --> 01:41:58,200
All right.

1594
01:41:59,500 --> 01:41:59,800
so, I think

1595
01:42:00,000 --> 01:42:03,400
I think now those would be initialized when we get to them and we

1596
01:42:03,400 --> 01:42:06,900
should be in good shape you can see here that we've gotten through

1597
01:42:06,900 --> 01:42:08,200
that compilation phase.

1598
01:42:08,200 --> 01:42:08,700
Okay.

1599
01:42:09,600 --> 01:42:13,300
And so now what we need to do we still got a little bit of time.

1600
01:42:13,300 --> 01:42:15,100
I still got about 15 minutes left.

1601
01:42:15,700 --> 01:42:19,700
So if we take a look at what we need to do, now we're just at the

1602
01:42:19,700 --> 01:42:25,800
point where we we can call, we can pass code down here whatever we

1603
01:42:25,800 --> 01:42:29,800
want, but if there was a problem, like when we call

1604
01:42:30,000 --> 01:42:31,400
Opengl cray program.

1605
01:42:31,600 --> 01:42:35,100
One of the things that we're going to find is we don't actually know

1606
01:42:35,100 --> 01:42:38,000
whether the compilation succeeds or fails yet, right?

1607
01:42:38,000 --> 01:42:42,300
We haven't checked any errors in here and furthermore if something did

1608
01:42:42,300 --> 01:42:45,500
fail, we're going to need to know what failed, right?

1609
01:42:45,500 --> 01:42:50,100
We're going to need to get have to get some kind of information back

1610
01:42:50,100 --> 01:42:51,100
from opengl.

1611
01:42:51,300 --> 01:42:56,100
That'll tell us how to debug, you know, like what's going on.

1612
01:42:56,100 --> 01:42:56,800
We're passing it.

1613
01:42:56,800 --> 01:42:57,600
Source code.

1614
01:42:57,700 --> 01:42:59,900
We could have a typo in the source code, we

1615
01:43:00,100 --> 01:43:05,200
You know, be calling something wrong and the compiler might fail.

1616
01:43:05,200 --> 01:43:08,500
We need to get errors back so that we're in a position to debug the

1617
01:43:08,500 --> 01:43:10,600
shaders as well.

1618
01:43:11,000 --> 01:43:17,600
And so it, there is ways we can get that information as well, and I

1619
01:43:17,600 --> 01:43:18,800
believe it's the program.

1620
01:43:18,800 --> 01:43:22,400
Info log in the Shader info log calls are the two places that that

1621
01:43:22,400 --> 01:43:24,400
happens if I remember properly.

1622
01:43:25,500 --> 01:43:26,600
So let's take a look at those.

1623
01:43:26,900 --> 01:43:27,800
You can see here.

1624
01:43:27,800 --> 01:43:29,500
What happens is it returns?

1625
01:43:30,300 --> 01:43:35,000
basically a text buffer, you give it a sort of a chunk of memory and

1626
01:43:35,000 --> 01:43:42,100
then it will fill out that chunk of memory with a with a

1627
01:43:45,000 --> 01:43:47,500
Textual description of what went wrong in the compilation.

1628
01:43:47,500 --> 01:43:52,700
If something went wrong in the compilation now, I don't actually know

1629
01:43:56,200 --> 01:43:57,200
I can't remember.

1630
01:43:57,200 --> 01:43:58,700
I might have to look up.

1631
01:43:58,800 --> 01:44:03,500
I don't quite remember what the best way is to.

1632
01:44:03,500 --> 01:44:06,600
Okay, here it is like there and I knew there was a way to validate the

1633
01:44:06,600 --> 01:44:08,200
program to make sure that it works.

1634
01:44:08,700 --> 01:44:09,600
And here we go.

1635
01:44:09,800 --> 01:44:12,200
So GL validate program.

1636
01:44:14,000 --> 01:44:17,900
So from after we call GL validate program, we can call get program

1637
01:44:17,900 --> 01:44:22,600
with arguments program and GL, validate status, and that will tell us

1638
01:44:22,600 --> 01:44:24,700
whether or not the validation occurred.

1639
01:44:24,800 --> 01:44:25,600
So what we want to do,

1640
01:44:25,800 --> 01:44:27,700
Here is we want to call that, right?

1641
01:44:27,700 --> 01:44:29,900
We want to call the jail validate program.

1642
01:44:32,200 --> 01:44:35,500
And it takes that program handle and then we want to call GL get

1643
01:44:35,500 --> 01:44:36,100
program.

1644
01:44:39,400 --> 01:44:45,500
Here's that we just now need to say, we want to know what the validate

1645
01:44:45,500 --> 01:44:47,300
status is of the program.

1646
01:44:49,600 --> 01:44:54,300
And that's the program than the the params is just the requested

1647
01:44:54,300 --> 01:44:56,200
object, so we just need a geoint.

1648
01:45:03,600 --> 01:45:05,800
Assume it's false on Startup.

1649
01:45:06,100 --> 01:45:07,100
Here's our program ID.

1650
01:45:07,800 --> 01:45:10,600
So this will tell us whether or not the program validated.

1651
01:45:10,600 --> 01:45:16,300
And so what we want to know now is if it didn't validate right then we

1652
01:45:16,300 --> 01:45:18,700
can call these other functions, right?

1653
01:45:22,000 --> 01:45:22,800
Not that one.

1654
01:45:23,300 --> 01:45:23,700
Oops.

1655
01:45:26,800 --> 01:45:28,000
Program, info log.

1656
01:45:29,000 --> 01:45:34,600
So the only thing that I'm not sure I remember is for the shaders.

1657
01:45:34,600 --> 01:45:41,200
I don't know if you can validate a Shader, I don't know how, you know,

1658
01:45:41,200 --> 01:45:44,900
whether or not the shaders validated individually.

1659
01:45:44,900 --> 01:45:48,200
Probably there is no point because shaders, you wouldn't really know

1660
01:45:48,200 --> 01:45:48,900
if they're valid.

1661
01:45:48,900 --> 01:45:51,000
I mean, you might know that they're obviously invalid but you don't

1662
01:45:51,000 --> 01:45:53,000
really know if they're fully valid till they all come together.

1663
01:45:53,000 --> 01:45:53,500
Anyway.

1664
01:45:54,400 --> 01:45:56,300
So I suspect what we want to do.

1665
01:45:57,200 --> 01:45:58,200
It's called get program.

1666
01:45:58,200 --> 01:46:00,200
Info, log in the case, for the program,

1667
01:46:02,000 --> 01:46:06,900
Got messed up, but we probably also need to get the Shader info log

1668
01:46:07,800 --> 01:46:12,100
and we probably need to do that in the cases.

1669
01:46:12,100 --> 01:46:12,400
Yeah.

1670
01:46:12,400 --> 01:46:16,300
In the case where we're not validated because I don't know that where

1671
01:46:16,300 --> 01:46:19,000
it will necessarily report the errors, right?

1672
01:46:20,200 --> 01:46:26,800
So what we want to do here is we want to create some way that we can

1673
01:46:26,800 --> 01:46:30,300
sort of get this information out.

1674
01:46:30,500 --> 01:46:30,900
So we're just

1675
01:46:31,200 --> 01:46:34,900
A Shader validation failed.

1676
01:46:36,900 --> 01:46:41,700
And then we'll just say, all right, we've got a Vertex error.

1677
01:46:55,800 --> 01:46:58,100
And then we'll just go ahead and get the logs for everything.

1678
01:46:58,600 --> 01:47:03,000
So for the Shader info logs, we need to press our vertex Shader ID.

1679
01:47:05,700 --> 01:47:07,000
And our fragment Shader ID.

1680
01:47:14,500 --> 01:47:17,400
And we're not going to bother with the length.

1681
01:47:18,900 --> 01:47:20,300
So there's that g l sighs.

1682
01:47:20,300 --> 01:47:20,600
I

1683
01:47:23,100 --> 01:47:24,100
And we're going to ignore that.

1684
01:47:31,800 --> 01:47:34,100
So, for the program itself,

1685
01:47:36,900 --> 01:47:38,300
Where's my program info log?

1686
01:47:38,300 --> 01:47:38,900
There it is.

1687
01:47:44,000 --> 01:47:44,800
Zack, same.

1688
01:47:50,800 --> 01:47:55,400
And so now in theory we should be able to get Hoops.

1689
01:47:55,400 --> 01:47:59,400
I did my internal caps on size of there.

1690
01:48:01,400 --> 01:48:04,600
So now we should be able to anytime opengl says that there was a

1691
01:48:04,600 --> 01:48:06,800
failure in validating the program that we passed it.

1692
01:48:06,800 --> 01:48:08,800
We should be able to get some air buffers back.

1693
01:48:09,200 --> 01:48:11,000
That'll tell us what happened.

1694
01:48:11,200 --> 01:48:11,700
Right?

1695
01:48:12,500 --> 01:48:17,500
And so again this is just an exercise in busywork now is to just cut

1696
01:48:17,500 --> 01:48:19,800
and paste those from the core arm.

1697
01:48:26,100 --> 01:48:27,100
Get program.

1698
01:48:27,100 --> 01:48:28,400
Info log.

1699
01:48:36,300 --> 01:48:36,900
Go.

1700
01:48:39,900 --> 01:48:41,800
Cedar info log.

1701
01:48:46,100 --> 01:48:48,600
Validates program.

1702
01:48:54,200 --> 01:48:57,400
And I think that's all the new things we're calling, right?

1703
01:48:57,500 --> 01:48:58,300
Get program.

1704
01:49:10,800 --> 01:49:14,400
So now that I think about it, we which one do we want here?

1705
01:49:14,400 --> 01:49:17,400
Get program IV for validate status

1706
01:49:22,400 --> 01:49:23,700
I assume it's yes.

1707
01:49:24,000 --> 01:49:25,500
So we want get program.

1708
01:49:27,800 --> 01:49:29,500
An integer Vector of integers.

1709
01:49:32,900 --> 01:49:36,200
So give me that one and I think we've got them all.

1710
01:49:36,900 --> 01:49:37,500
There we go.

1711
01:49:48,800 --> 01:49:49,200
Oops.

1712
01:49:58,600 --> 01:49:59,700
and,

1713
01:50:05,300 --> 01:50:06,300
Text busy work.

1714
01:50:17,900 --> 01:50:23,600
Okay, so that's all of the new ones here, just for new functions.

1715
01:50:26,100 --> 01:50:27,600
Those are get stuck at the bottom here.

1716
01:50:35,500 --> 01:50:36,000
There we go.

1717
01:50:38,700 --> 01:50:39,400
and,

1718
01:50:47,500 --> 01:50:48,500
I will actually carry them.

1719
01:51:42,700 --> 01:51:48,600
all right, so

1720
01:51:54,400 --> 01:51:56,400
we've got you'll get programming for log.

1721
01:52:02,600 --> 01:52:03,900
Shooter and full log.

1722
01:52:05,300 --> 01:52:06,400
Holiday Program.

1723
01:52:08,400 --> 01:52:09,300
Get program for.

1724
01:52:35,600 --> 01:52:39,300
So I think that should be all the functions we had.

1725
01:52:39,300 --> 01:52:46,600
Valid it satisfy, you'll have to copy, not sure that needs to be

1726
01:52:46,600 --> 01:52:47,200
there.

1727
01:52:49,800 --> 01:52:51,500
I meant to call that ignored.

1728
01:52:54,200 --> 01:52:58,100
And that is the wrong spelling for that.

1729
01:52:58,100 --> 01:53:03,000
So I think we're all good and then all I need is the GL validate

1730
01:53:03,700 --> 01:53:04,500
status.

1731
01:53:08,700 --> 01:53:10,600
And I assume that will be sufficient.

1732
01:53:21,800 --> 01:53:22,300
Okay.

1733
01:53:24,100 --> 01:53:29,800
So a lot of busy work there, but in theory, everything is now, okay.

1734
01:53:31,200 --> 01:53:39,800
So let's take a look vertex errors, fragment errors program airs,

1735
01:53:45,900 --> 01:53:47,900
So here's our compilation.

1736
01:53:48,500 --> 01:53:50,700
You can see that the vertex Shader was to compile it to run on

1737
01:53:50,700 --> 01:53:51,400
Hardware.

1738
01:53:52,200 --> 01:53:54,800
Fragment Shader was successfully compiled to run on Hardware.

1739
01:53:57,200 --> 01:53:59,800
and then here's our program errors really, shade has failed to link

1740
01:54:00,000 --> 01:54:02,200
Is fitting not all shares have valid object code?

1741
01:54:03,300 --> 01:54:07,300
So not particularly useful information in this case, of course, we

1742
01:54:07,300 --> 01:54:09,800
didn't actually feed it real code, right?

1743
01:54:09,800 --> 01:54:11,100
It's just some comments.

1744
01:54:11,400 --> 01:54:12,700
So everything compiled.

1745
01:54:12,700 --> 01:54:13,000
Okay.

1746
01:54:13,000 --> 01:54:15,600
But none of them have actual content.

1747
01:54:15,600 --> 01:54:17,600
So when it goes to link it's like hey I don't know what I should

1748
01:54:17,600 --> 01:54:18,800
actually do here, right.

1749
01:54:20,500 --> 01:54:21,600
But other than that,

1750
01:54:23,500 --> 01:54:26,000
It's all reasonable shape, right?

1751
01:54:26,800 --> 01:54:29,500
So we only have a couple of other things that we need to start talking

1752
01:54:29,500 --> 01:54:33,500
about, but otherwise we're pretty much good to go.

1753
01:54:33,900 --> 01:54:38,400
We will have to do is a GL, use program call and then we'll have to be

1754
01:54:38,400 --> 01:54:41,300
able to bind attributes to those as well.

1755
01:54:41,500 --> 01:54:46,000
So we have a little bit of work that we will have to do in in a, in a

1756
01:54:46,000 --> 01:54:46,700
moment.

1757
01:54:46,800 --> 01:54:49,400
But otherwise, we're pretty much done.

1758
01:54:50,200 --> 01:54:52,800
And so I'll go ahead and go to the Q&A and next week.

1759
01:54:53,100 --> 01:54:59,500
That we can talk about shaders and what they do so we can actually

1760
01:54:59,500 --> 01:55:03,900
write some Shader code and then we'll be able to finish that up and

1761
01:55:03,900 --> 01:55:05,400
actually start calling through the Shader.

1762
01:55:13,400 --> 01:55:15,300
Cam died, really.

1763
01:55:17,800 --> 01:55:18,500
Oh wow.

1764
01:55:22,100 --> 01:55:23,700
I've never seen that happen before.

1765
01:55:28,700 --> 01:55:29,700
Oh, the camera.

1766
01:55:29,700 --> 01:55:30,700
Did not die.

1767
01:55:31,300 --> 01:55:34,000
It looks like open OBS.

1768
01:55:34,700 --> 01:55:37,400
OBS is ability to composite the camera died.

1769
01:55:39,500 --> 01:55:42,800
Oh no, it was just it was set on the wrong looks like it was set on

1770
01:55:42,800 --> 01:55:45,000
monitor instead of programming for some reason.

1771
01:55:46,400 --> 01:55:48,100
All right, so nothing, nothing was actually wrong.

1772
01:55:48,100 --> 01:55:50,000
They're just somehow that got set to monitor.

1773
01:56:05,300 --> 01:56:07,800
So it's just the kid for some of the opengl function type test.

1774
01:56:07,800 --> 01:56:10,700
You have the win API entry point and others, don't I thought it was

1775
01:56:10,700 --> 01:56:13,200
necessary to have it or else you get runtime errors when calling those

1776
01:56:13,200 --> 01:56:14,500
functions or at least I did.

1777
01:56:15,500 --> 01:56:19,400
So actually, you never really need it in 64-bit code.

1778
01:56:21,500 --> 01:56:22,400
Where are those guys?

1779
01:56:22,400 --> 01:56:23,300
Those guys are over here.

1780
01:56:25,300 --> 01:56:30,800
I should probably keep it in there just to be nice but it's really not

1781
01:56:30,800 --> 01:56:35,200
necessary in 32-bit code because 32-bit code only has one calling

1782
01:56:35,200 --> 01:56:35,800
convention.

1783
01:56:36,100 --> 01:56:38,900
So, if you remember back in handmade here, when we talked about

1784
01:56:38,900 --> 01:56:46,000
calling conventions, essentially, if you're linking to a dll in 32-bit

1785
01:56:46,000 --> 01:56:50,500
code, you need to make sure you specify the calling convention.

1786
01:56:53,000 --> 01:56:56,900
we don't actually have to do that in 64-bit code, but if we ever

1787
01:56:56,900 --> 01:56:59,200
wanted to compile 32-bit code, we would have to

1788
01:57:00,000 --> 01:57:00,900
Really not necessary.

1789
01:57:00,900 --> 01:57:02,600
Otherwise I guess it's how I would say it.

1790
01:57:02,700 --> 01:57:05,100
So if you had problems with it, probably the reason you did was

1791
01:57:05,100 --> 01:57:06,900
because you're probably compiling 32-bit code.

1792
01:57:07,000 --> 01:57:07,700
We my guess.

1793
01:57:13,200 --> 01:57:16,300
The size that instead of Z bias, why not make the Sprite card, stand

1794
01:57:16,300 --> 01:57:18,900
up at a steeper angle and make them trapezoidal to under the

1795
01:57:18,900 --> 01:57:19,800
protective foreshortening.

1796
01:57:20,500 --> 01:57:23,000
So if you remember correctly, I did the math for that on a previous

1797
01:57:23,000 --> 01:57:26,900
dreaming that is what I was going to do but then I realized why would

1798
01:57:26,900 --> 01:57:31,700
we spend the time doing the math for that when we could just change

1799
01:57:31,700 --> 01:57:33,500
the Z value in a Vertex Shader?

1800
01:57:33,700 --> 01:57:37,500
Basically we would be spending way more math time.

1801
01:57:37,700 --> 01:57:42,200
We would be doing way more operations per Sprite, then we needed to do

1802
01:57:42,200 --> 01:57:42,500
for know.

1803
01:57:42,600 --> 01:57:45,900
Reason because all the only reason we'd be solving for the correct,

1804
01:57:45,900 --> 01:57:51,200
trapezoid in that case, is to change the Z value.

1805
01:57:51,500 --> 01:57:55,500
So, it seems like a really bad use of compute power there.

1806
01:57:57,000 --> 01:58:00,900
And so I decided to just go ahead and have shaders that just you feed

1807
01:58:00,900 --> 01:58:03,200
a difference e value because that's all we really need.

1808
01:58:03,200 --> 01:58:05,900
And then there's no extra computation being done.

1809
01:58:06,200 --> 01:58:07,500
So it's much more efficient.

1810
01:58:14,800 --> 01:58:15,700
Binbin L.

1811
01:58:16,100 --> 01:58:18,400
When you started writing the place placeholder Shader code.

1812
01:58:18,400 --> 01:58:20,100
You mentioned something about C++?

1813
01:58:20,500 --> 01:58:23,600
Something docks that are not yet fully implemented.

1814
01:58:23,600 --> 01:58:24,200
What is this feature?

1815
01:58:24,200 --> 01:58:24,700
Exactly.

1816
01:58:26,100 --> 01:58:30,800
So I honestly don't know who coined this term.

1817
01:58:31,100 --> 01:58:34,500
It's weird and I apologize.

1818
01:58:35,200 --> 01:58:39,200
It's just it's the term that's used.

1819
01:58:40,100 --> 01:58:44,300
And yeah I got nothing.

1820
01:58:44,300 --> 01:58:45,700
I do not know why it's called this.

1821
01:58:45,700 --> 01:58:48,500
I guess it's because hey the document is here, I don't know.

1822
01:58:49,400 --> 01:58:53,100
But anyway, a here document is what they call it a here.

1823
01:58:53,100 --> 01:58:53,600
Doc

1824
01:58:55,000 --> 01:58:59,000
is when you've got source code for some language and then you want to

1825
01:58:59,000 --> 01:59:02,800
stick a bunch of source code for another language or something that is

1826
01:59:02,800 --> 01:59:05,600
not in that language in between right.

1827
01:59:05,800 --> 01:59:09,100
And so what it is is it's a way of saying hey I'm going to start a

1828
01:59:09,100 --> 01:59:10,300
bunch of text here.

1829
01:59:10,600 --> 01:59:13,800
This text is not supposed to be parsed by you.

1830
01:59:14,800 --> 01:59:18,900
So don't do your standard pricing on it, just read it all and accept

1831
01:59:18,900 --> 01:59:21,400
it as some data that you're going to use later.

1832
01:59:23,300 --> 01:59:28,900
And so C plus plus, sort of, has a little bit of of a here, Doc, in a

1833
01:59:28,900 --> 01:59:30,500
way originally, right?

1834
01:59:31,400 --> 01:59:33,300
It grabbed, are we doing that?

1835
01:59:35,200 --> 01:59:37,700
So C++ sort of has a little bit of a constant over here.

1836
01:59:37,700 --> 01:59:39,700
Doc, which is a string, right?

1837
01:59:40,200 --> 01:59:44,700
An Ask easy string is sort of like it, but it's not really complete

1838
01:59:44,700 --> 01:59:44,800
here.

1839
01:59:44,800 --> 01:59:48,500
Doc, and the reason is because all sorts of parsing still happens in

1840
01:59:48,500 --> 01:59:49,700
here, right?

1841
01:59:49,800 --> 01:59:52,200
That happens parsing for that happens.

1842
01:59:52,300 --> 01:59:56,700
Quote happens, I can't have a new line, right?

1843
01:59:57,800 --> 01:59:59,800
And so the degree to, which a language.

1844
02:00:00,000 --> 02:00:03,000
It's here doc says sort of more about the degree to which you can

1845
02:00:03,400 --> 02:00:10,000
embed other document structure other sort of data in there that and to

1846
02:00:10,000 --> 02:00:11,900
what extent you can turn the parser off.

1847
02:00:12,800 --> 02:00:19,100
So in the future C++ may be able to properly support here docks

1848
02:00:19,300 --> 02:00:23,000
because it's in the spec and like llvm supports it.

1849
02:00:23,000 --> 02:00:27,000
I think maybe visual Studios supports it in 20.

1850
02:00:28,800 --> 02:00:29,800
I don't know if it's present wife.

1851
02:00:30,000 --> 02:00:30,200
Jean.

1852
02:00:30,400 --> 02:00:34,300
But at some point, all the C compilers you care about will be

1853
02:00:34,300 --> 02:00:36,100
supporting this because it's in the spec now.

1854
02:00:36,100 --> 02:00:42,100
But at the moment, like I think I'm on 2013, I believe, for this

1855
02:00:42,100 --> 02:00:45,500
stream, we use the community edition of 2013.

1856
02:00:45,700 --> 02:00:46,600
That's what we started with.

1857
02:00:46,600 --> 02:00:52,000
And that everyone had its, I don't believe has it, so we can't use it.

1858
02:01:29,300 --> 02:01:31,500
Let's see.

1859
02:01:34,200 --> 02:01:34,600
Two.

1860
02:01:36,500 --> 02:01:40,500
Do you think the Google's angle library that translates opengl to

1861
02:01:40,500 --> 02:01:46,100
DirectX calls would solve the srgb problem on your graphics card?

1862
02:01:50,500 --> 02:01:51,600
It might.

1863
02:01:54,100 --> 02:01:59,400
I do not know it might be, but it depends on whether this card

1864
02:01:59,400 --> 02:02:03,400
properly, supports srgb, rendering to msaa in DirectX.

1865
02:02:03,400 --> 02:02:06,200
I don't it might be that this, for whatever reason, the driver just

1866
02:02:06,200 --> 02:02:07,900
kind of busted and won't work.

1867
02:02:07,900 --> 02:02:08,400
I don't know.

1868
02:02:24,400 --> 02:02:28,800
Why are you downsizing 8 pixels into one using a blit and not using

1869
02:02:28,800 --> 02:02:35,700
32-bit math and rendering six back into two with a subtract to

1870
02:02:35,700 --> 02:02:42,700
finalize, 8 to pass out of 8-bit back to render allows Alpha on off

1871
02:02:42,700 --> 02:02:47,400
values and color, value attached, AC instead of color value where

1872
02:02:47,400 --> 02:02:49,000
Alpha belongs in blit.

1873
02:02:50,300 --> 02:02:51,200
I'm not sure.

1874
02:02:51,200 --> 02:02:53,200
I understand what you're asking.

1875
02:02:55,000 --> 02:02:57,100
We're not downsizing eight pixels.

1876
02:02:57,200 --> 02:02:59,300
We're just we're using multi sample.

1877
02:03:00,000 --> 02:03:05,300
Which is to say that the the there's eight samples per pixel taken to

1878
02:03:05,300 --> 02:03:10,900
allow us to do order independent Alfred edges.

1879
02:03:12,000 --> 02:03:12,900
If that makes sense.

1880
02:03:24,200 --> 02:03:25,300
Insofar says you can pass.

1881
02:03:25,300 --> 02:03:28,100
Null has the length for a GL shaders source and it treats all the

1882
02:03:28,100 --> 02:03:29,000
strings is null terminated.

1883
02:03:29,000 --> 02:03:32,100
I was hoping that would be the case, but it didn't say that in the

1884
02:03:32,100 --> 02:03:34,200
docks, if that's the case.

1885
02:03:36,700 --> 02:03:39,000
Then we can get rid of this, which would be nice.

1886
02:03:44,200 --> 02:03:45,900
Because there's no point to it.

1887
02:03:46,000 --> 02:03:49,600
I just didn't see anything in the in the docks that said that, that

1888
02:03:49,600 --> 02:03:50,600
would be okay.

1889
02:03:51,200 --> 02:03:52,400
So I assumed it wasn't.

1890
02:03:52,400 --> 02:03:52,900
Okay.

1891
02:04:00,500 --> 02:04:00,900
Whoops.

1892
02:04:25,800 --> 02:04:26,400
All right.

1893
02:04:27,600 --> 02:04:29,100
Just double-check that, that works.

1894
02:04:45,300 --> 02:04:46,100
Frosty ninja.

1895
02:04:46,100 --> 02:04:50,500
Can't we just adjust, can't we just adjust gamma in the shaders?

1896
02:04:51,400 --> 02:04:56,500
We could but it's typically faster not to do that because the hardware

1897
02:04:56,500 --> 02:04:59,200
has built-in look-up tables for it usually or at least.

1898
02:04:59,200 --> 02:05:03,400
That was my understanding in various places.

1899
02:05:03,500 --> 02:05:05,600
Now that may not be true anymore, I don't know.

1900
02:05:06,000 --> 02:05:10,100
And we could but in general we should be allowing the gravis card to

1901
02:05:10,100 --> 02:05:13,300
use whatever its fastest method is rather than micro coding it

1902
02:05:13,300 --> 02:05:14,400
essentially for in the Shader

1903
02:05:16,000 --> 02:05:18,800
So, I'd like to find out why it's not working, because every other

1904
02:05:19,200 --> 02:05:21,700
card that I know of our situation, I know of it would work.

1905
02:05:27,500 --> 02:05:27,800
For us.

1906
02:05:27,800 --> 02:05:29,700
You said regarding checking Shader status.

1907
02:05:29,700 --> 02:05:32,700
I believe the best practice is checking GL compiled status after

1908
02:05:32,700 --> 02:05:36,500
compiling a Shader and then Geo link status after linking a program

1909
02:05:37,100 --> 02:05:38,200
that might be true.

1910
02:05:38,200 --> 02:05:40,800
Although, I guess, I don't know what the difference in a lot of these

1911
02:05:40,800 --> 02:05:42,100
would necessarily be.

1912
02:05:47,200 --> 02:05:49,900
I'm not sure what the pros and cons of any particular one is, I'm not

1913
02:05:49,900 --> 02:05:52,500
sure why there are so many ways that it happens to be completely

1914
02:05:52,500 --> 02:05:52,700
honest.

1915
02:05:52,700 --> 02:05:53,100
But

1916
02:06:25,600 --> 02:06:27,900
Are you eventually go into new Shader code into the asset packs are

1917
02:06:27,900 --> 02:06:31,100
going to keep it in line, probably always in line because we want to

1918
02:06:31,100 --> 02:06:34,800
be signed that modifies with the code, not with the asset packs, the

1919
02:06:34,800 --> 02:06:38,600
asset packs are for assets, obviously, and they get updated very

1920
02:06:38,600 --> 02:06:39,200
infrequently.

1921
02:06:39,200 --> 02:06:39,800
Where a Shader is?

1922
02:06:39,800 --> 02:06:41,900
We want to have a fast turnaround time on

1923
02:06:45,400 --> 02:06:48,500
This Isaac, will there still be problems if a tree is in front of a

1924
02:06:48,500 --> 02:06:52,100
tall block, if the Sprite still technically intersects the tile above,

1925
02:06:53,300 --> 02:06:54,100
there might be.

1926
02:06:55,300 --> 02:06:56,700
But even if there were.

1927
02:06:57,200 --> 02:07:02,000
So I would rather handle that in the vertex Shader on the GPU, rather

1928
02:07:02,000 --> 02:07:04,400
than handling on the CPU side, right?

1929
02:07:05,100 --> 02:07:08,700
Because again, I can do stuff in there that I couldn't do otherwise.

1930
02:07:09,100 --> 02:07:12,100
However, I don't know that there's anything you could really do.

1931
02:07:15,200 --> 02:07:17,200
I mean, essentially, it doesn't matter, right?

1932
02:07:17,300 --> 02:07:21,000
Like no matter what you do with those fright cards,

1933
02:07:23,300 --> 02:07:27,600
There's no point if they have to show up as a card, then there's no

1934
02:07:27,600 --> 02:07:30,700
difference between multiple changing the Z bias and creating a

1935
02:07:30,700 --> 02:07:33,900
trapezoid, they're both exactly the same, right?

1936
02:07:34,000 --> 02:07:38,000
Because the only difference is what the screen space z value is, so

1937
02:07:38,200 --> 02:07:39,500
it's always better to do it.

1938
02:07:39,500 --> 02:07:42,200
I think the Z bias way there's never a case.

1939
02:07:42,200 --> 02:07:44,600
We're doing a trapezoid would give you anything other than less

1940
02:07:44,600 --> 02:07:45,400
computation.

1941
02:07:45,600 --> 02:07:49,100
I mean, sorry more computation resources being spent to do it.

1942
02:08:04,800 --> 02:08:05,600
A slim sir?

1943
02:08:05,600 --> 02:08:07,600
Will you implement Shader hot loading?

1944
02:08:09,800 --> 02:08:13,900
I think we could probably I think if we just move

1945
02:08:16,900 --> 02:08:21,900
I think if we basically just move the thing that gets the shaders, if

1946
02:08:21,900 --> 02:08:28,000
we move that into our reloadable code section, which we could pretty

1947
02:08:28,000 --> 02:08:31,500
easily do then, I think we would just have it for free.

1948
02:08:32,900 --> 02:08:33,400
Right.

1949
02:08:40,500 --> 02:08:44,100
Right now, it wouldn't work because the program only gets compiled at

1950
02:08:44,100 --> 02:08:44,900
in it time.

1951
02:08:45,000 --> 02:08:48,400
So we have to have a thing that tells it to recompile the program.

1952
02:08:49,100 --> 02:08:51,900
But that's about all we would need because we already have the hot

1953
02:08:51,900 --> 02:08:52,600
code reloading.

1954
02:08:52,600 --> 02:08:54,100
So in theory it would work.

1955
02:09:20,100 --> 02:09:22,300
Looks like no more Q Cullen's.

1956
02:10:02,200 --> 02:10:02,700
Anyways.

1957
02:10:02,700 --> 02:10:06,800
Hot loading seems safest with use of bind attribute location, correct?

1958
02:10:06,800 --> 02:10:10,400
So as not to have to Chase locations all over the place.

1959
02:10:18,400 --> 02:10:20,300
Yeah, I guess that's a good point.

1960
02:10:23,100 --> 02:10:26,900
I mean, I guess so, probably what we should do is move the opengl code

1961
02:10:26,900 --> 02:10:28,600
into the reloadable section.

1962
02:10:31,800 --> 02:10:33,700
That's probably what we should be doing.

1963
02:10:47,000 --> 02:10:49,300
Saenz says, last time I was here.

1964
02:10:49,300 --> 02:10:51,500
You talked about the in 32x types.

1965
02:10:51,900 --> 02:10:55,900
What are your thoughts on type space versus cash utilization?

1966
02:10:57,800 --> 02:11:02,700
Usually, that's just an as you know as the case is present themselves,

1967
02:11:02,700 --> 02:11:03,600
kind of a situation.

1968
02:11:03,600 --> 02:11:07,900
So basically like I tend not to think too hard about optimization

1969
02:11:07,900 --> 02:11:12,200
issues until I actually have something to optimize.

1970
02:11:12,500 --> 02:11:13,100
Right?

1971
02:11:13,900 --> 02:11:15,800
So I don't tend to think about how

1972
02:11:16,000 --> 02:11:21,400
Big a type is unless I fear that it is a cash going to be a cash

1973
02:11:21,400 --> 02:11:24,600
problem like it's unless I'm thinking it's in a place where I think

1974
02:11:24,600 --> 02:11:27,200
it's really likely, the cash effects are going to be a problem.

1975
02:11:27,200 --> 02:11:37,200
I'm like planning for that or where I think that you know there's some

1976
02:11:37,200 --> 02:11:40,700
other reason for the types size to be relevant like loading off of

1977
02:11:40,700 --> 02:11:43,100
disk or marshalling of the network that sort of thing.

1978
02:11:43,800 --> 02:11:45,800
But in general I don't tend to think about the

1979
02:11:45,900 --> 02:11:49,000
The size of types in terms of their impact on the cash.

1980
02:11:49,300 --> 02:11:53,300
Unless I actually am thinking about optimizing something at that point

1981
02:11:53,300 --> 02:11:55,800
because otherwise I feel like it's just wasted thought, really?

1982
02:11:56,600 --> 02:11:58,900
Because if you haven't actually measured what your

1983
02:12:00,000 --> 02:12:02,900
Doing and you haven't actually decided, you're optimizing it, then

1984
02:12:02,900 --> 02:12:07,000
you're really just guessing and fussing around, you know, and it seems

1985
02:12:07,000 --> 02:12:09,700
like kind of unproductive to do that until you actually know what

1986
02:12:09,700 --> 02:12:10,200
you're doing.

1987
02:12:17,100 --> 02:12:17,700
Wretched freak.

1988
02:12:17,700 --> 02:12:20,200
If you recreate the program and hot reloading, you should probably

1989
02:12:20,200 --> 02:12:21,800
free the old shaders and program.

1990
02:12:22,400 --> 02:12:24,400
I don't think there's any reason to do.

1991
02:12:24,400 --> 02:12:29,100
So I mean, obviously, if you cared about this being something that an

1992
02:12:29,100 --> 02:12:33,900
end user was going to have to do, you would, because in that case you

1993
02:12:33,900 --> 02:12:37,100
could, you know, if they kept reloading reloading really eroding, they

1994
02:12:37,100 --> 02:12:40,500
might run out of handles or something.

1995
02:12:42,400 --> 02:12:44,600
But doesn't really matter for our purposes.

1996
02:12:44,600 --> 02:12:47,300
We can just leave those old programs around right.

1997
02:12:47,300 --> 02:12:51,200
They don't they don't harm us by being by just sitting around.

1998
02:13:20,400 --> 02:13:21,400
Okay.

1999
02:13:52,500 --> 02:13:56,000
Are the program's cleared automatically when the game exits.

2000
02:13:56,200 --> 02:14:02,000
Yeah, all of your GPU resources that you've acquired if you crash or

2001
02:14:02,000 --> 02:14:07,000
if you exit cleanly or any other thing that happens.

2002
02:14:07,000 --> 02:14:11,700
Everything is is purged, all your textures, all your programs,

2003
02:14:11,700 --> 02:14:17,400
everything unless there's a bug in the driver or in Windows, they are

2004
02:14:17,400 --> 02:14:18,900
all going to go away.

2005
02:14:43,900 --> 02:14:44,900
Let's see.

2006
02:14:45,000 --> 02:14:47,100
Do you have any plans about temporal anti-aliasing?

2007
02:14:47,100 --> 02:14:49,800
Not really, it's not something I've really worked with so I don't have

2008
02:14:49,800 --> 02:14:53,800
much to say about it and then last question I assume that you don't

2009
02:14:53,800 --> 02:14:55,700
give much thought to how hot data is.

2010
02:14:55,700 --> 02:14:59,800
I remember a talk by Andre that you could get a few percent speed up?

2011
02:15:00,000 --> 02:15:02,000
From organizing the data according to hotness.

2012
02:15:03,300 --> 02:15:03,600
Yeah.

2013
02:15:03,600 --> 02:15:08,600
Again, like I said, I feel like when you're creating architectures and

2014
02:15:08,600 --> 02:15:11,700
working on getting code to the point where it does what you want it to

2015
02:15:11,700 --> 02:15:17,100
do, typically I'm not thinking about any optimization issues at all

2016
02:15:17,500 --> 02:15:20,400
except for making sure that I'm not doing something.

2017
02:15:20,400 --> 02:15:24,600
I believe, we'll make it fundamentally impossible or very difficult

2018
02:15:24,600 --> 02:15:28,200
for me to optimize sections of the code later.

2019
02:15:28,900 --> 02:15:34,100
So if I to the extent that I ever think about stuff like how cash

2020
02:15:34,100 --> 02:15:38,500
things are cash aligned or how things are organized, due to how hot

2021
02:15:38,500 --> 02:15:44,100
they will be, you know, on average, I'm only going to think about

2022
02:15:44,100 --> 02:15:47,900
those things in passing when doing the main work on the code.

2023
02:15:48,200 --> 02:15:50,900
And then only when I'm starting to optimize a particular section

2024
02:15:50,900 --> 02:15:52,700
because I believe it to be performance-critical.

2025
02:15:52,900 --> 02:15:58,300
Am I going to actually try to measure and organize and optimize for

2026
02:15:58,300 --> 02:15:58,600
any of

2027
02:15:58,700 --> 02:15:59,400
Those things.

2028
02:16:00,800 --> 02:16:04,500
You really shouldn't be thinking about those all the time because you

2029
02:16:04,500 --> 02:16:09,400
probably can't get it right without actually being actually working on

2030
02:16:09,400 --> 02:16:10,200
it, right?

2031
02:16:11,100 --> 02:16:15,800
Like most of the time on Modern Hardware optimization is very tricky.

2032
02:16:15,800 --> 02:16:18,800
And oftentimes counterintuitive, it's not like the old days where it

2033
02:16:18,800 --> 02:16:20,800
was very straightforward and easy to understand.

2034
02:16:21,400 --> 02:16:24,900
So if you think that you can make improvements to your programs

2035
02:16:24,900 --> 02:16:28,500
performance by randomly doing stuff as you're writing code, when

2036
02:16:28,500 --> 02:16:30,400
you're not even testing it for optimization,

2037
02:16:30,600 --> 02:16:34,500
Looking at performance counters or you're not in the actual situation

2038
02:16:35,000 --> 02:16:37,600
that it will actually be in production and so on and so forth.

2039
02:16:37,799 --> 02:16:41,200
Typically, you're probably, not really doing anything all that great,

2040
02:16:41,200 --> 02:16:42,900
like probably mostly what you're doing.

2041
02:16:42,900 --> 02:16:46,799
There are going to be things that are, you know, could be as likely to

2042
02:16:46,799 --> 02:16:49,400
hurt as help because you just don't know.

2043
02:16:49,500 --> 02:16:54,600
You're not really, you're not really measuring the results and you're

2044
02:16:54,600 --> 02:16:57,600
not really knowing that what you're doing is correcting a problem, or

2045
02:16:57,600 --> 02:16:59,299
improving a situation, right?

2046
02:17:04,400 --> 02:17:05,299
Hubby reissue.

2047
02:17:05,500 --> 02:17:07,400
Unless there's a bug in the driver in Windows.

2048
02:17:07,400 --> 02:17:09,000
Yeah, there are never any bugs in those.

2049
02:17:09,400 --> 02:17:11,299
Yeah, that's why I said that, obviously.

2050
02:17:12,600 --> 02:17:16,500
So that's why I said that when I said, you know, unless there's a

2051
02:17:16,500 --> 02:17:20,299
bugger driver or in Windows, everything gets perched, chances are

2052
02:17:20,299 --> 02:17:24,200
sometimes there might be bugs in Windows or win32, which would result

2053
02:17:24,200 --> 02:17:27,000
in things windows or the driver, which result in things not getting

2054
02:17:27,000 --> 02:17:27,900
Purge properly.

2055
02:17:28,400 --> 02:17:32,400
But again, that's not a reason to delete the Shader code because

2056
02:17:32,400 --> 02:17:34,100
there's just as likely to be a bug in that,

2057
02:17:34,200 --> 02:17:35,100
At right?

2058
02:17:35,700 --> 02:17:39,700
Meaning, you know, if there's bugs in the driver in terms of purging

2059
02:17:39,700 --> 02:17:42,400
stuff out, then they're just could be bugs and you have no idea where

2060
02:17:42,400 --> 02:17:46,200
they are and you're not working around them in any more likely fashion

2061
02:17:46,200 --> 02:17:47,799
by freeing stuff or not.

2062
02:17:47,799 --> 02:17:48,299
Right.

2063
02:17:49,000 --> 02:17:51,600
For all, you know, the bug might be in the free call.

2064
02:17:51,600 --> 02:17:55,100
Where is if you call the free call it accidentally does something that

2065
02:17:55,100 --> 02:17:58,000
makes it not get purged when the game exits, right?

2066
02:17:58,200 --> 02:17:59,400
So, you know,

2067
02:18:00,000 --> 02:18:01,000
Bugs are bugs.

2068
02:18:01,000 --> 02:18:02,200
There's nothing you can do.

2069
02:18:02,200 --> 02:18:05,700
That will make it like, you know, better in that case.

2070
02:18:14,900 --> 02:18:17,000
We eventually be doing such a Passover handmade here.

2071
02:18:17,000 --> 02:18:20,500
I probably not because I don't think we're going to have performance

2072
02:18:20,700 --> 02:18:22,200
concerns of that form.

2073
02:18:22,900 --> 02:18:27,700
If we do, then we would but probably we won't

2074
02:18:32,600 --> 02:18:37,100
Should you add a, a probably backslash.

2075
02:18:37,100 --> 02:18:38,299
And I think twitch filtered out.

2076
02:18:38,299 --> 02:18:39,000
Should you add it back soon?

2077
02:18:39,000 --> 02:18:41,100
At the end of each line with the format?

2078
02:18:41,100 --> 02:18:44,299
You are using, Wouldn't It Be parsed by the opengl as a long comment

2079
02:18:44,299 --> 02:18:45,000
as it is now?

2080
02:18:45,200 --> 02:18:45,600
Yes.

2081
02:18:45,600 --> 02:18:48,400
So what we're going to have to do, there's two reasons to do that.

2082
02:18:52,200 --> 02:18:53,200
Service talking about here.

2083
02:18:53,799 --> 02:18:59,100
So yes, as we add code to here, we will have to do this as we go.

2084
02:19:01,600 --> 02:19:03,100
Once there's more lines in here.

2085
02:19:03,200 --> 02:19:06,799
Technically you don't have to at anything that's not a comment.

2086
02:19:06,799 --> 02:19:08,500
Like so you could also just do this

2087
02:19:10,299 --> 02:19:10,799
Right.

2088
02:19:13,700 --> 02:19:18,700
And it will parse fine but the reason to add is not because of the

2089
02:19:18,700 --> 02:19:22,200
comments, the reason to add the backslash ends.

2090
02:19:22,500 --> 02:19:25,600
The reason for the backslash ends is actually that the error reporting

2091
02:19:25,600 --> 02:19:29,100
will be better because when it reports an area will tell you the line

2092
02:19:29,100 --> 02:19:31,200
it's on it won't necessarily tell you the column, it's on.

2093
02:19:31,299 --> 02:19:35,400
So if all you have is a line number, you really want to insert line

2094
02:19:35,400 --> 02:19:38,900
breaks all over the place so that you can tell where it's complaining.

2095
02:19:40,200 --> 02:19:41,000
That makes sense.

2096
02:19:44,900 --> 02:19:46,000
Starchy pancakes.

2097
02:19:46,500 --> 02:19:50,100
Hey Casey I got a job as a gameplay programmer wouldn't have happened

2098
02:19:50,100 --> 02:19:52,100
without the stream not in a million years, dude!

2099
02:19:52,100 --> 02:19:53,200
That's awesome!

2100
02:19:53,600 --> 02:19:55,200
I'm so happy to hear that.

2101
02:19:55,900 --> 02:19:57,200
Congratulations.

2102
02:19:58,300 --> 02:20:02,000
I hope that it starts a really good career for you.

2103
02:20:02,000 --> 02:20:07,100
If game, programming is what you're into, I hope you enjoy it and you

2104
02:20:07,100 --> 02:20:08,500
continue to find it interesting.

2105
02:20:10,300 --> 02:20:11,100
That's great.

2106
02:20:11,400 --> 02:20:12,800
Well, that's a great one to end on.

2107
02:20:13,100 --> 02:20:15,400
I'm very happy to hear that starts with pancakes.

2108
02:20:16,100 --> 02:20:20,500
That's great, make a good game.

2109
02:20:23,800 --> 02:20:26,600
I don't know very much about gameplay programming myself, you'll

2110
02:20:26,600 --> 02:20:28,800
probably know more about it than me, pretty soon.

2111
02:20:29,200 --> 02:20:35,900
I only ever do the engine code and you know, I I always would defer to

2112
02:20:35,900 --> 02:20:39,000
John Blow on how you write gameplay code because I have no idea.

2113
02:20:41,700 --> 02:20:47,300
He's the expert on that stuff because I feel like, I feel like if you

2114
02:20:47,300 --> 02:20:52,800
write gameplay code, you kind of have to be a bit of a designer.

2115
02:20:53,600 --> 02:20:57,600
You know, maybe I mean you'll know I guess as you start doing it,

2116
02:20:57,600 --> 02:20:58,000
you'll see.

2117
02:20:58,000 --> 02:20:59,900
But I feel

2118
02:21:00,000 --> 02:21:05,400
Like I feel like I'm not super qualified to write gameplay code,

2119
02:21:05,800 --> 02:21:09,300
because I just don't necessarily know the right stuff to do for the

2120
02:21:09,300 --> 02:21:12,000
game design, kind of pieces of it, you know?

2121
02:21:14,700 --> 02:21:17,600
And so if you're a gameplay programmer, if you're if you're doing

2122
02:21:17,600 --> 02:21:19,900
gameplay programming, you'll probably learn that stuff.

2123
02:21:20,600 --> 02:21:25,300
You'll be ahead of me pretty soon because you'll probably learn a lot

2124
02:21:25,300 --> 02:21:27,300
more about the design.

2125
02:21:27,900 --> 02:21:29,600
How the design Works in there and

2126
02:21:31,200 --> 02:21:32,400
And that's kind of interesting part.

2127
02:21:32,400 --> 02:21:34,900
That's that's really what makes gameplay code.

2128
02:21:34,900 --> 02:21:38,300
You know, different from engine code is that gameplay code is very

2129
02:21:38,300 --> 02:21:40,000
much about enabling design.

2130
02:21:40,700 --> 02:21:45,300
Whereas game engine code is is more about technical requirements that

2131
02:21:45,300 --> 02:21:47,800
are easier to articulate.

2132
02:21:48,000 --> 02:21:54,000
You know, it's easier to say what you need in engine code and it's

2133
02:21:54,000 --> 02:21:56,800
more difficult to say what you need in gameplay code because gameplay

2134
02:21:56,800 --> 02:21:59,800
code is sort of fungible and has this design

2135
02:21:59,900 --> 02:22:02,600
I meant where you're exploring things that don't really necessarily

2136
02:22:02,600 --> 02:22:05,900
know how to verbalize potentially, what's supposed to happen.

2137
02:22:05,900 --> 02:22:07,500
But you know that it's supposed to happen, right?

2138
02:22:07,500 --> 02:22:10,400
And so it's kind of a it has a softer element to it.

2139
02:22:10,400 --> 02:22:14,600
That I feel like you kind of need experience, you need the you need to

2140
02:22:14,600 --> 02:22:18,800
have done gay programming in a real game scenario to really feel it.

2141
02:22:18,800 --> 02:22:21,500
So that's going to be cool because you're going to get that experience

2142
02:22:21,500 --> 02:22:23,800
and and you'll probably learn a lot from that.

2143
02:22:23,800 --> 02:22:27,200
I would suspect expect and probably learn a lot of things that I don't

2144
02:22:27,200 --> 02:22:27,500
know.

2145
02:22:29,800 --> 02:22:30,900
So anyway,

2146
02:22:32,100 --> 02:22:33,000
Best of luck to you.

2147
02:22:37,500 --> 02:22:40,800
All right, folks with that, we wish start your pancakes.

2148
02:22:40,800 --> 02:22:42,400
Well, that's pretty exciting.

2149
02:22:43,900 --> 02:22:46,600
I'm going to go ahead and wrap the rest of the stream up.

2150
02:22:47,700 --> 02:22:49,400
Thank you, everyone for joining me for handmade here.

2151
02:22:49,400 --> 02:22:50,700
That's going to pleasure coding with you.

2152
02:22:50,700 --> 02:22:55,200
As always, if you would like to follow along with the series at home,

2153
02:22:55,200 --> 02:22:57,600
you can always pre-order the game on handmade hero dot-org.

2154
02:22:57,600 --> 02:23:02,100
It comes with the source code, and if you want to play around with it,

2155
02:23:02,100 --> 02:23:03,400
that's an easy way to do it.

2156
02:23:03,700 --> 02:23:06,000
If you want to ask questions, we have a forum site.

2157
02:23:06,000 --> 02:23:07,200
If you want to support our video,

2158
02:23:07,300 --> 02:23:09,200
Series, we do have a patreon page as well.

2159
02:23:09,400 --> 02:23:14,400
We've got a schedule a bot that tweets the schedule and let you know,

2160
02:23:14,400 --> 02:23:17,300
we're going to be live and we have a past episode guide if you want to

2161
02:23:17,300 --> 02:23:18,200
catch up with all the episodes.

2162
02:23:18,200 --> 02:23:19,400
That's it for this week.

2163
02:23:19,600 --> 02:23:20,500
Next week, we'll be back.

2164
02:23:20,500 --> 02:23:22,000
When will write some Shader code?

2165
02:23:22,600 --> 02:23:28,000
Hopefully that won't be too much of a yak shave because all we really

2166
02:23:28,000 --> 02:23:30,700
want to do is some very simple stuff in there.

2167
02:23:30,700 --> 02:23:37,000
But until then have fun programming and we will see on the internet.

2168
02:23:37,000 --> 02:23:37,100
Take

2169
02:23:37,200 --> 02:23:38,100
It easy everybody.

