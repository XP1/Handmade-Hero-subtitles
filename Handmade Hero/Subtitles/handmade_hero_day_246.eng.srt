1
00:00:00,900 --> 00:00:01,700
Start recording.

2
00:00:02,600 --> 00:00:04,400
Hello everyone and welcome to handmade.

3
00:00:04,400 --> 00:00:04,900
Here are the show.

4
00:00:04,900 --> 00:00:12,200
We could complete game live on stream and today we are going to fix

5
00:00:12,200 --> 00:00:17,500
our first GPU driver bug which I can pretty much guarantee.

6
00:00:17,500 --> 00:00:20,600
You will not be our last

7
00:00:21,600 --> 00:00:22,800
Before I do that, I'll just simply mention.

8
00:00:22,800 --> 00:00:23,900
Today is day 2, 46.

9
00:00:23,900 --> 00:00:25,900
So, if you would like to follow along at home, and you are someone who

10
00:00:25,900 --> 00:00:30,500
pre-ordered the game on handmade hero dot-org, you should unpack day

11
00:00:30,500 --> 00:00:33,300
245 source code because that is the source code that I can be starting

12
00:00:33,300 --> 00:00:33,800
with today.

13
00:00:34,000 --> 00:00:36,100
And if, for some reason, you unpack some different source code than

14
00:00:36,100 --> 00:00:38,600
that, you are not going to know what's going to go on at all.

15
00:00:38,600 --> 00:00:40,100
You're going to like, I have no idea what I'm looking at.

16
00:00:40,100 --> 00:00:44,200
This is not what Casey has and that is because you did it wrong.

17
00:00:44,200 --> 00:00:45,000
So, don't do that.

18
00:00:46,700 --> 00:00:48,200
What am I talking about driver bug?

19
00:00:48,200 --> 00:00:49,200
What do I even mean?

20
00:00:49,200 --> 00:00:51,200
Well obviously,

21
00:00:51,300 --> 00:00:53,700
It's not happening on this machine, because if it was happy with this

22
00:00:53,700 --> 00:00:57,300
machine, we'd see it yesterday when we actually did this, but you can

23
00:00:57,300 --> 00:01:01,500
see here, here is our cutscenes running, and they appear to be running

24
00:01:01,500 --> 00:01:01,800
correctly.

25
00:01:01,800 --> 00:01:05,600
This is, of course, running through the hardware renderer.

26
00:01:05,600 --> 00:01:09,500
Now, you will note, we didn't really have much in the way of problems

27
00:01:09,500 --> 00:01:12,000
when we had a software vendor that is because we were not involving

28
00:01:12,000 --> 00:01:15,500
the GPU of the system at all, which of course is where a lot of the

29
00:01:15,500 --> 00:01:20,200
sort of system peculiarities come in because the protocols for talking

30
00:01:20,200 --> 00:01:21,300
to gpus are incredibly

31
00:01:21,300 --> 00:01:23,200
Weird and contorted.

32
00:01:23,200 --> 00:01:26,100
And the GPS themselves are very varied and change a lot from your

33
00:01:26,100 --> 00:01:26,300
year.

34
00:01:26,300 --> 00:01:29,100
So it's very likely that you have a problem with compatibility as soon

35
00:01:29,100 --> 00:01:31,500
as you start using a GPU, if you don't use the GPU, you have very

36
00:01:31,500 --> 00:01:33,400
little problems with compatibility typically.

37
00:01:34,000 --> 00:01:36,800
But most games nowadays have to use the GPU if they want to be

38
00:01:36,800 --> 00:01:39,400
competitive graphically because most of the graphs or part machine is

39
00:01:39,400 --> 00:01:40,400
on the GPU.

40
00:01:41,300 --> 00:01:45,000
So, what I found out from people who post on the forums, if you test

41
00:01:45,000 --> 00:01:50,600
this on Nvidia, our using multiple threads for downloading textures,

42
00:01:50,600 --> 00:01:51,300
was not working properly.

43
00:01:51,400 --> 00:01:51,800
Early on there.

44
00:01:51,800 --> 00:01:56,200
And what they said was that for some reason and I've sent oh I keep

45
00:01:56,200 --> 00:01:57,600
forgetting, I don't have to use emacs anymore.

46
00:01:58,500 --> 00:02:05,200
What they said was that for whatever reason, if you create, all of the

47
00:02:05,200 --> 00:02:08,800
context are going to use all the opengl context on the main thread and

48
00:02:08,800 --> 00:02:11,100
then pass them down to the other threads.

49
00:02:11,300 --> 00:02:14,600
Well, then it's fine and it works, but if you create those threads

50
00:02:14,600 --> 00:02:17,500
act, if you trace those contacts, actually, on separate threads that

51
00:02:17,500 --> 00:02:18,200
doesn't work.

52
00:02:18,900 --> 00:02:21,200
And so I don't really know why.

53
00:02:21,300 --> 00:02:25,000
Why I sent email to Nvidia and I gave them the source code to a, I'm a

54
00:02:25,000 --> 00:02:25,500
hero.

55
00:02:25,700 --> 00:02:27,800
And I just like can you tell us why?

56
00:02:27,800 --> 00:02:30,300
And I'll explain it on the stream if you can set aside explanation.

57
00:02:31,000 --> 00:02:35,200
So we don't know why I would assume that it's something relatively

58
00:02:35,200 --> 00:02:35,800
straightforward.

59
00:02:35,800 --> 00:02:40,800
Like oh we, you know, we set the data on the thread-local storage of

60
00:02:40,800 --> 00:02:43,700
the, you know, of the particular thread that initially calls to

61
00:02:43,700 --> 00:02:44,500
opengl.

62
00:02:45,800 --> 00:02:49,900
And so there is no information on the other threads with which to

63
00:02:49,900 --> 00:02:51,900
create new contexts or something like this.

64
00:02:52,300 --> 00:02:54,200
I don't really know what that answer is going to be.

65
00:02:54,200 --> 00:02:57,300
I could, you know, try to imagine one but I don't actually know.

66
00:02:57,600 --> 00:02:59,900
So certainly there's some explanation for

67
00:03:00,000 --> 00:03:01,200
We don't know exactly what it is.

68
00:03:01,200 --> 00:03:04,900
All we know is that it does not work there and so actually don't need

69
00:03:04,900 --> 00:03:05,000
it.

70
00:03:05,100 --> 00:03:06,500
Load that, let me load this up.

71
00:03:07,700 --> 00:03:11,100
So all we do know is that it doesn't work to do it that way.

72
00:03:11,300 --> 00:03:16,100
And in general, with PC compatibility, you don't have the luxury of

73
00:03:16,100 --> 00:03:17,800
ever really knowing why things don't work.

74
00:03:17,800 --> 00:03:20,400
A lot of the time you simply have to accept the fact that if someone

75
00:03:20,400 --> 00:03:24,800
runs into a bug on PC and they always almost always do that has to do

76
00:03:24,800 --> 00:03:26,600
with Hardware that's out of your control.

77
00:03:26,700 --> 00:03:28,700
Well you just have to figure out a way to work around it.

78
00:03:28,700 --> 00:03:29,800
And in this case it sounds like

79
00:03:30,000 --> 00:03:32,300
Like we don't have a particularly hard job ahead of us.

80
00:03:32,400 --> 00:03:35,200
If the only requirement for getting it working is that we create the

81
00:03:35,200 --> 00:03:37,600
context on the main thread and then pass them to the separate threads.

82
00:03:37,800 --> 00:03:40,000
Well that is something that's really easy for us to do.

83
00:03:40,200 --> 00:03:43,300
So I'm just going to go ahead and do that now so that our code base we

84
00:03:43,300 --> 00:03:47,300
know is compliant with and videos drivers, as well as AMD drivers and

85
00:03:47,300 --> 00:03:48,300
then we can go from there.

86
00:03:48,900 --> 00:03:51,300
So let's take a look at what we were doing before.

87
00:03:52,600 --> 00:03:56,200
So you've got win32 and opengl here and you can see that this sort of

88
00:03:56,200 --> 00:03:59,900
does are opengl start up and then from then on after 13.

89
00:04:00,000 --> 00:04:00,800
And opengl.

90
00:04:00,900 --> 00:04:04,900
We had this win32 create opengl context for worker thread and that was

91
00:04:04,900 --> 00:04:07,400
basically what we were using from then on

92
00:04:09,600 --> 00:04:14,100
So, our download threads, we're calling this.

93
00:04:14,300 --> 00:04:18,500
And the problem we believe is right here, apparently this cannot be

94
00:04:18,500 --> 00:04:20,500
called on anything other than the main thread.

95
00:04:20,700 --> 00:04:23,700
So, what we need to do is we essentially need to hoist that out.

96
00:04:24,700 --> 00:04:28,900
And we need to call that once for every worker thread, before we ever

97
00:04:28,900 --> 00:04:32,400
call the worker threads, and then when we call the worker threads, we

98
00:04:32,400 --> 00:04:37,200
need them to pick that context up and use it, that makes sense.

99
00:04:37,900 --> 00:04:41,200
So that's what we're going to do here and it's pretty straightforward.

100
00:04:41,200 --> 00:04:43,500
There's really not a lot to it essentially.

101
00:04:43,500 --> 00:04:45,700
The only real thing that we have to do here.

102
00:04:45,700 --> 00:04:46,100
Oops.

103
00:04:47,000 --> 00:04:52,900
The only thing that we have to do here is take our, take our code for

104
00:04:52,900 --> 00:04:54,400
launching threads and

105
00:04:54,500 --> 00:04:59,000
To give them something more robust than just a platform Q because

106
00:04:59,000 --> 00:05:02,200
right now we're sort of leaning on the platform Q code and you can

107
00:05:02,200 --> 00:05:03,300
kind of see us doing that.

108
00:05:03,500 --> 00:05:05,100
It's called platform.

109
00:05:05,700 --> 00:05:10,700
Oops platform work you you can see it right here.

110
00:05:10,800 --> 00:05:13,900
What we're doing is we're taking this platform work you thing and that

111
00:05:13,900 --> 00:05:16,300
platform work you is the thing that we're passing down I'm going to

112
00:05:16,300 --> 00:05:19,000
move that out first of all because there's really I don't think any

113
00:05:19,000 --> 00:05:21,000
reason for that to be there.

114
00:05:21,000 --> 00:05:23,500
I'm going to move that out here because it's part of the win32

115
00:05:24,400 --> 00:05:24,800
Class.

116
00:05:25,000 --> 00:05:26,200
Sorry, struct definitions.

117
00:05:26,200 --> 00:05:31,200
And when we're actually using these here, you can see when we go into

118
00:05:31,200 --> 00:05:35,500
creating our threads and thread proc, you can see that what it gets

119
00:05:35,500 --> 00:05:38,500
past when you start up a thread, is this platform work you which it

120
00:05:38,500 --> 00:05:39,000
does need.

121
00:05:39,000 --> 00:05:42,900
But the platform work queue is shared among any of the threads that,

122
00:05:42,900 --> 00:05:44,800
that sort of consume work out of that Cube.

123
00:05:44,800 --> 00:05:48,000
And since it's shared among all those threads, it means that we can't

124
00:05:48,000 --> 00:05:52,100
pass unique things that need to be per thread on that cue, right?

125
00:05:52,100 --> 00:05:54,400
So what we need to do is we need to

126
00:05:54,400 --> 00:05:58,500
To essentially have 0 and it turns out we left it in there from

127
00:05:58,500 --> 00:05:59,000
before.

128
00:05:59,100 --> 00:05:59,800
So we actually already

129
00:06:00,300 --> 00:06:03,100
When 32 threads, start up that went through two threads, sort of thing

130
00:06:03,100 --> 00:06:07,400
that we were that we had made before when we were, almost gonna do it

131
00:06:07,400 --> 00:06:10,500
the other way, that's all we really need.

132
00:06:10,500 --> 00:06:13,400
So we just need to have this winter to thread startup code.

133
00:06:13,900 --> 00:06:16,800
The win32 thread startup code could point to the work queue that the

134
00:06:16,800 --> 00:06:17,900
thread is supposed to use.

135
00:06:18,000 --> 00:06:22,200
But it can also contain the opengl are see that it actually needs.

136
00:06:23,300 --> 00:06:26,000
And that's that's pretty much all we're doing right.

137
00:06:27,700 --> 00:06:29,900
All right, so let's go ahead and

138
00:06:30,000 --> 00:06:31,000
And get that set up.

139
00:06:31,000 --> 00:06:32,400
Let's make that happen.

140
00:06:32,600 --> 00:06:35,400
So what we want to do here is for our thread proc whether thread proc

141
00:06:35,400 --> 00:06:37,200
gets called what we want to do.

142
00:06:37,200 --> 00:06:39,900
I guess I should leave this here actually what we want to do is say

143
00:06:39,900 --> 00:06:40,700
win32 thread.

144
00:06:40,700 --> 00:06:44,500
Startup is actually the thing that you're going to get now when 32

145
00:06:44,500 --> 00:06:45,300
threads start up,

146
00:06:47,500 --> 00:06:49,300
I guess I could card call this maybe thread.

147
00:06:51,200 --> 00:06:54,200
That's going to be the thing that we cast for our parameter at

148
00:06:54,200 --> 00:06:54,700
startup.

149
00:06:56,200 --> 00:07:00,300
Like so and then instead of getting the work queue from the parameter

150
00:07:00,300 --> 00:07:02,700
now it just gets it from the queue so we're still passing the Q

151
00:07:02,700 --> 00:07:06,700
through but we're passing it sort of as a subset of the other parts of

152
00:07:06,700 --> 00:07:09,200
stuff because we need the opengl stuff.

153
00:07:09,200 --> 00:07:13,700
So now in here, what we're going to do is say, okay, well now instead

154
00:07:13,700 --> 00:07:16,300
of this needs opengl thing that was on the cue and we're just gonna

155
00:07:16,300 --> 00:07:18,100
get rid of that because we don't care about them or what we're going

156
00:07:18,100 --> 00:07:23,100
to say instead is if someone gave us as part of the thread parameters

157
00:07:23,500 --> 00:07:25,900
and opengl RC then what we'd like

158
00:07:26,100 --> 00:07:31,600
To do is call wiggle, make current to make that, you know, our our see

159
00:07:31,600 --> 00:07:32,600
that we're going to use.

160
00:07:32,700 --> 00:07:36,300
Now remember, in order to do that, we also still need to make sure

161
00:07:36,700 --> 00:07:38,900
that we can use that.

162
00:07:38,900 --> 00:07:41,000
We have a DC, a Windows d.c.

163
00:07:43,300 --> 00:07:45,800
Now technically we're never going to render anything to the d.c.

164
00:07:45,800 --> 00:07:47,400
all we're doing a submitting buffers.

165
00:07:48,700 --> 00:07:52,400
So really the preference here would just to be to say that the DC-10

166
00:07:52,400 --> 00:07:55,100
but I don't think you actually ever can do that and we check the in

167
00:07:55,100 --> 00:07:57,100
video documentation for multi-threaded texture downloads.

168
00:07:57,400 --> 00:08:01,100
They were passing the same DC handle that they were using before.

169
00:08:01,500 --> 00:08:05,400
So I believe here, what we would want to do is probably just pass that

170
00:08:05,400 --> 00:08:12,100
DC just call it like opengl DC or something and just say, okay,

171
00:08:12,100 --> 00:08:12,400
whatever,

172
00:08:12,500 --> 00:08:14,200
They tell us to do, that's what we're going to do.

173
00:08:14,600 --> 00:08:18,300
All right, so I think this is roughly, what we want to have, is

174
00:08:18,300 --> 00:08:19,400
something more like this.

175
00:08:20,200 --> 00:08:21,000
Does that make sense?

176
00:08:21,100 --> 00:08:23,800
Hopefully it's so something like that.

177
00:08:24,500 --> 00:08:28,200
So that's the actual code that we need on the thread side and now we

178
00:08:28,200 --> 00:08:31,300
just need to actually, when we start up these threads, we need to

179
00:08:31,300 --> 00:08:33,200
actually build that bundle, right?

180
00:08:33,400 --> 00:08:35,700
So we need to actually make make that happen.

181
00:08:36,299 --> 00:08:39,900
So, let's take a look at where we call this red lips.

182
00:08:40,100 --> 00:08:41,100
Red Croc,

183
00:08:43,600 --> 00:08:44,200
Right here.

184
00:08:45,000 --> 00:08:48,500
And so when we call win32 make you, we say, how many of these threads

185
00:08:48,500 --> 00:08:49,100
we want?

186
00:08:49,100 --> 00:08:52,800
And so what we actually need to do now is instead of sort of doing it

187
00:08:52,800 --> 00:08:55,300
this way, I think we're going to have to switch to a thing where we

188
00:08:55,300 --> 00:08:59,800
passed the win32 thread startups, that we actually wanted, right?

189
00:09:00,300 --> 00:09:01,800
Because we need these things to stick around.

190
00:09:01,800 --> 00:09:05,800
So we're going to go ahead and say, OK, win32 thread startup startups.

191
00:09:05,800 --> 00:09:09,600
Like so and then whenever we call one of these instead of passing that

192
00:09:09,600 --> 00:09:12,300
work queue to it, what we're going to do is say, we're going to pass

193
00:09:12,300 --> 00:09:14,800
it, whatever the nth startup actually is.

194
00:09:15,100 --> 00:09:18,400
So it's assumed that whoever calls us here is going to have fill those

195
00:09:18,400 --> 00:09:21,400
out with the information that they actually wanted, right?

196
00:09:21,400 --> 00:09:23,600
We can keep this here as a convenience feature.

197
00:09:23,900 --> 00:09:26,200
So what we could do, if we wanted this as a convenience feature, we

198
00:09:26,200 --> 00:09:28,700
don't need to just be could force the color to do this potentially,

199
00:09:29,100 --> 00:09:29,800
but if we wanted to

200
00:09:30,000 --> 00:09:31,500
So we could say, Okay, oops.

201
00:09:33,400 --> 00:09:37,000
We could say, let's go ahead and get that guy out of here and then

202
00:09:37,000 --> 00:09:39,900
we'll go ahead and fill out the Q automatically for the caller.

203
00:09:40,300 --> 00:09:43,200
And that's just a convenience that says, that's absolutely nothing to

204
00:09:43,200 --> 00:09:43,800
do with anything.

205
00:09:43,800 --> 00:09:45,700
It's just, we could just do that to make it a little easier on the

206
00:09:45,700 --> 00:09:49,000
collar, so that callers who don't care about this, don't have to worry

207
00:09:49,000 --> 00:09:49,800
about setting the queue.

208
00:09:49,800 --> 00:09:52,100
It'll Get Set automatically because we know that it always, it's

209
00:09:52,100 --> 00:09:53,000
known, right?

210
00:09:54,000 --> 00:09:56,400
So if we compile, this will just get the errors at the point where we

211
00:09:56,400 --> 00:10:00,800
do our make you, oops, at the point where we do our make you, here we

212
00:10:00,800 --> 00:10:01,100
go.

213
00:10:02,700 --> 00:10:06,000
And you can sort of see, you know, what I should do.

214
00:10:06,100 --> 00:10:11,300
By the way, I realized that are handmade project file is wrong.

215
00:10:12,000 --> 00:10:16,400
I think I don't actually know if it is or not, but when I load it in

216
00:10:16,400 --> 00:10:20,000
for a coder, it doesn't seem to set the compiled correctly.

217
00:10:20,900 --> 00:10:24,300
Hi, wrong / and I'm trying to remember why?

218
00:10:24,300 --> 00:10:28,000
Because it looks like that's where build up that actually is.

219
00:10:28,000 --> 00:10:32,400
I don't know why I'm not 100% certain on why that doesn't work anyway.

220
00:10:32,500 --> 00:10:34,100
I have to figure that out anyway.

221
00:10:34,100 --> 00:10:35,400
Not that important now I suppose.

222
00:10:35,700 --> 00:10:38,900
So let's go, let's go back to what I was saying when we call 13 to

223
00:10:38,900 --> 00:10:39,200
make you.

224
00:10:39,200 --> 00:10:41,100
Obviously, we don't have those startups in there.

225
00:10:41,600 --> 00:10:44,100
And so what I could do is say, okay, I'm going to make these with

226
00:10:44,100 --> 00:10:48,200
through to thread startups and these are the high price startups and

227
00:10:48,200 --> 00:10:48,900
there's six of them.

228
00:10:51,300 --> 00:10:54,700
And then I can just say, all right, well, whatever, the array county

229
00:10:54,700 --> 00:10:57,300
is of those is how many are going to do, and there's a pointer to the

230
00:10:57,300 --> 00:10:58,400
startups, right?

231
00:10:58,700 --> 00:11:02,600
Then the low priority queues are the ones that have the opengl context

232
00:11:02,600 --> 00:11:04,800
and they're going to have a different opengl context.

233
00:11:05,000 --> 00:11:06,300
Perk you, right?

234
00:11:06,400 --> 00:11:08,800
So I have now a thing that's like, all right, I've got to have a win

235
00:11:08,800 --> 00:11:11,300
to to thread startup low price startups.

236
00:11:11,700 --> 00:11:14,400
I need two of those one for each of the threads that's going to be

237
00:11:14,400 --> 00:11:15,100
started.

238
00:11:15,100 --> 00:11:20,800
And so in the low price startups, these ones I actually want to to

239
00:11:20,800 --> 00:11:21,000
sort

240
00:11:21,200 --> 00:11:23,700
Seed with some useful information.

241
00:11:24,000 --> 00:11:30,000
And so what I could do is say you know low press, start up, zero

242
00:11:30,900 --> 00:11:39,200
equals like create thread or win32 threads startup GL or something.

243
00:11:42,400 --> 00:11:43,400
Something like that.

244
00:11:44,300 --> 00:11:48,300
And so I can just say, hey, why don't you do whatever you need to do

245
00:11:48,300 --> 00:11:49,600
to make this thing happen?

246
00:11:49,800 --> 00:11:54,600
Here's the we no longer even need any of these things to be Global

247
00:11:54,600 --> 00:11:55,600
which is kind of nice.

248
00:11:56,100 --> 00:11:59,800
So I could sort of change these to be like opengl d.c.

249
00:12:00,000 --> 00:12:02,900
Opengl RC that are local, right?

250
00:12:08,000 --> 00:12:08,500
There we go.

251
00:12:09,400 --> 00:12:13,300
And so I can call the start a function say, oh, this is the DC, and

252
00:12:13,300 --> 00:12:17,900
this is the RC I want you to clone those and give me a low price

253
00:12:17,900 --> 00:12:20,800
startup, and maybe like this, you know, do that twice.

254
00:12:20,900 --> 00:12:22,100
So that I've got two of them.

255
00:12:22,200 --> 00:12:26,700
And then when we do this, we just say, all right, go ahead and go

256
00:12:26,700 --> 00:12:27,700
ahead and launch those threads.

257
00:12:30,200 --> 00:12:31,800
Oops, startups.

258
00:12:32,300 --> 00:12:36,100
So that's, that's roughly what we're talking about here.

259
00:12:36,900 --> 00:12:41,600
So all I need to do now is write a function that instead, essentially

260
00:12:41,800 --> 00:12:45,700
instead of that opengl initialization that we're doing before.

261
00:12:46,300 --> 00:12:48,900
It's now going to sort of wrap it up in a win32 startups truck, but

262
00:12:48,900 --> 00:12:50,500
basically do exactly the same thing.

263
00:12:50,900 --> 00:12:52,700
So, I'm going to take a look at and opengl.

264
00:12:52,700 --> 00:12:54,300
Here we go, in 3, 2 opengl.

265
00:12:56,400 --> 00:12:59,800
If I take a look here at the stuff I've got,

266
00:13:00,000 --> 00:13:04,600
See, win32 create college for worker thread, this guy really.

267
00:13:04,600 --> 00:13:10,200
All I want to do is I just want to replace this function with the new

268
00:13:10,200 --> 00:13:11,100
one that we've got.

269
00:13:11,200 --> 00:13:13,900
So I want it to do exactly what it was doing before.

270
00:13:14,100 --> 00:13:17,000
But now I want it to sort of bundle it in this way for me so that it's

271
00:13:17,000 --> 00:13:19,100
ready to do thread startup.

272
00:13:19,300 --> 00:13:19,900
So there we go.

273
00:13:20,200 --> 00:13:21,800
So that's really all we're talking about here.

274
00:13:22,200 --> 00:13:25,000
So assuming that we actually can do what we wanted to do like a.

275
00:13:25,000 --> 00:13:28,800
So when we actually have a wiggle context startup situation Happening

276
00:13:28,800 --> 00:13:29,100
Here,

277
00:13:30,000 --> 00:13:33,000
then what we want to do is say, alright, the window d.c.

278
00:13:34,800 --> 00:13:35,000
Sorry.

279
00:13:38,500 --> 00:13:41,000
We don't need here anymore because we've got one.

280
00:13:42,100 --> 00:13:45,400
So, you can get rid of that and we can actually call this the opengl,

281
00:13:45,400 --> 00:13:45,900
d.c.

282
00:13:46,700 --> 00:13:49,300
the share context is going to be this one that got passed in.

283
00:13:49,300 --> 00:13:51,400
So that actually also doesn't have to be there.

284
00:13:51,400 --> 00:13:56,000
In fact, we could call it here, share context the attributed already.

285
00:13:56,000 --> 00:13:59,700
Have assuming that we got back the, the modern d.c.

286
00:13:59,800 --> 00:14:01,600
That's really all that needs to happen.

287
00:14:02,100 --> 00:14:06,000
And so in some sense, all of this stuff can actually go away, right?

288
00:14:06,000 --> 00:14:08,500
So really all we want to do is say, all right, there's the win32

289
00:14:08,500 --> 00:14:11,100
thread startup, this is the result.

290
00:14:12,300 --> 00:14:13,600
There was the result.

291
00:14:15,400 --> 00:14:19,600
Yeah, opengl DC is going to be the opengl.

292
00:14:19,600 --> 00:14:20,100
D.c.

293
00:14:20,700 --> 00:14:21,600
the result.

294
00:14:22,800 --> 00:14:27,800
Oops, there's all opengl context.

295
00:14:32,100 --> 00:14:33,600
Is going to be the one that we make.

296
00:14:35,000 --> 00:14:36,500
And that's really it.

297
00:14:36,800 --> 00:14:37,700
So that's all the.

298
00:14:37,800 --> 00:14:38,600
That's all the

299
00:14:39,800 --> 00:14:41,300
That's all the business that has to happen.

300
00:14:41,300 --> 00:14:46,400
So if we do that, then I think we're in the right position.

301
00:14:46,400 --> 00:14:50,200
Now for everything to kind of flow smoothly, we can get rid of the

302
00:14:50,200 --> 00:14:52,900
concept that there's things that need opengl because now we either

303
00:14:52,900 --> 00:14:55,700
pass it or don't and it can detect it just from that.

304
00:14:55,700 --> 00:14:59,800
And so the only thing that I need to do now is I need to see if this

305
00:15:00,000 --> 00:15:03,700
All right, because we also don't know if this will work on AMD, right?

306
00:15:03,700 --> 00:15:06,100
We know that people thought it worked on video, but we don't know

307
00:15:06,100 --> 00:15:09,000
whether it works on AMD because we're now changing the way that we

308
00:15:09,000 --> 00:15:14,100
from what we know worked on AMD before these are some of the wonders

309
00:15:14,100 --> 00:15:15,600
of win32 compatibility.

310
00:15:16,100 --> 00:15:19,900
So if we step in here to where we create our threads opengl has

311
00:15:19,900 --> 00:15:22,800
already been initialized obviously so that's all good.

312
00:15:23,000 --> 00:15:25,700
You can see us kind of go through this here we create the high

313
00:15:25,700 --> 00:15:27,500
priority queues those won't have opengl.

314
00:15:27,700 --> 00:15:29,800
Now we create the low priority queues you can.

315
00:15:30,000 --> 00:15:33,600
See me sort of going through here and creating that those startup

316
00:15:33,600 --> 00:15:34,200
structures should.

317
00:15:34,200 --> 00:15:36,200
Now mean that we have, oops.

318
00:15:38,800 --> 00:15:44,000
We should have opengl context for all of our threads and you can see

319
00:15:44,000 --> 00:15:44,200
that.

320
00:15:44,200 --> 00:15:46,200
It looks like we did not get them.

321
00:15:46,300 --> 00:15:49,000
I want to say that doesn't look like that worked.

322
00:15:51,900 --> 00:15:52,800
It's so we got it.

323
00:15:52,800 --> 00:15:55,600
We got to see why let's go in here.

324
00:15:58,100 --> 00:15:58,700
Due to.

325
00:15:58,800 --> 00:15:59,300
Here we go.

326
00:16:00,600 --> 00:16:04,500
So we get that opengl DC, we call will create contacts are herbs and

327
00:16:04,500 --> 00:16:06,000
we've got the share context.

328
00:16:06,200 --> 00:16:07,200
Oh, which is no.

329
00:16:07,600 --> 00:16:08,000
Oops.

330
00:16:09,100 --> 00:16:09,800
Why is it now?

331
00:16:11,900 --> 00:16:12,900
Win32 in it.

332
00:16:12,900 --> 00:16:16,300
Opengl should be working ohm, right?

333
00:16:16,300 --> 00:16:17,900
Gotta go delete those global variables.

334
00:16:19,300 --> 00:16:22,200
We tried intentionally, get rid of them and then we never got rid of

335
00:16:22,200 --> 00:16:22,500
them.

336
00:16:22,600 --> 00:16:25,600
And surprisingly, you can't use a global variable if you actually

337
00:16:25,600 --> 00:16:26,900
stopped initializing it at all.

338
00:16:27,600 --> 00:16:28,100
So good.

339
00:16:28,100 --> 00:16:30,300
We got rid of these two which is kind of something that I just wanted

340
00:16:30,300 --> 00:16:32,500
to be able to do, because I just didn't feel like they needed to be

341
00:16:32,500 --> 00:16:32,900
global.

342
00:16:33,800 --> 00:16:34,800
Let's try that one more time.

343
00:16:38,300 --> 00:16:38,900
All right.

344
00:16:39,300 --> 00:16:40,400
There's the high art party starts.

345
00:16:40,400 --> 00:16:41,700
Now, we'll go through the low part is startups.

346
00:16:41,700 --> 00:16:42,400
Here we go.

347
00:16:43,600 --> 00:16:48,800
And even just by the pause there, we can tell that we got it again.

348
00:16:49,100 --> 00:16:50,300
So now, we've got two of those.

349
00:16:50,800 --> 00:16:53,600
And now we're going to go into this function.

350
00:16:53,600 --> 00:16:54,400
We're going to set one here.

351
00:16:54,400 --> 00:16:57,100
So, when we actually get a thread in there, we'll see what it does

352
00:16:57,100 --> 00:16:57,200
here.

353
00:16:57,200 --> 00:17:00,800
Is that thread startup code got the DC, got the our see it's got the

354
00:17:00,800 --> 00:17:01,300
Q.

355
00:17:01,900 --> 00:17:04,800
So now it can go ahead and make that current, which is what it'll do.

356
00:17:05,599 --> 00:17:06,500
Other thread will come in here.

357
00:17:06,500 --> 00:17:07,900
It'll also make current so

358
00:17:08,000 --> 00:17:12,599
Both of our threads have have gotten their gl's set up and are ready

359
00:17:12,599 --> 00:17:13,800
to go in theory.

360
00:17:13,800 --> 00:17:18,500
Now, if this actually is something that does, in fact work, we should

361
00:17:19,000 --> 00:17:21,099
be able to let's see.

362
00:17:21,200 --> 00:17:21,900
Run this here.

363
00:17:21,900 --> 00:17:22,300
There we go.

364
00:17:22,800 --> 00:17:24,599
We should be able to see textures and we do.

365
00:17:25,400 --> 00:17:29,200
So now we're creating our opengl context on the main thread, and then

366
00:17:29,200 --> 00:17:36,100
we're passing those opengl context through to the to the, to the

367
00:17:36,100 --> 00:17:37,800
individual threads to the worker.

368
00:17:38,000 --> 00:17:39,900
Threads to set as current.

369
00:17:40,000 --> 00:17:43,700
And it looks like it works just fine on AMD, so that's good.

370
00:17:44,100 --> 00:17:47,500
We don't know if this will work on Nvidia, but it might.

371
00:17:47,700 --> 00:17:51,100
And so, at least, now we can send this back over.

372
00:17:51,200 --> 00:17:54,700
We can, you know, when we update the code tonight, people who were

373
00:17:54,700 --> 00:17:56,100
testing on a video can tell us.

374
00:17:56,300 --> 00:17:57,400
Does that resolve the problem?

375
00:17:59,200 --> 00:17:59,800
So, there we go.

376
00:18:01,000 --> 00:18:02,900
So, that's really all that has to happen for that.

377
00:18:03,200 --> 00:18:06,100
Now, there's one more thing that we haven't really done on the opengl

378
00:18:06,100 --> 00:18:07,000
side of things.

379
00:18:07,200 --> 00:18:13,500
And that's that, if you look at what we were doing here, I think I

380
00:18:13,500 --> 00:18:17,300
even mentioned this before when I said do we actually need to worry

381
00:18:17,300 --> 00:18:21,400
about this or not we have not gone back and actually seen whether we

382
00:18:21,400 --> 00:18:23,500
in fact do need to worry about it.

383
00:18:24,100 --> 00:18:27,400
And that is that in here in our win32.

384
00:18:27,400 --> 00:18:29,400
Sorry, not in there in here.

385
00:18:30,100 --> 00:18:34,200
In our entire trip list where we're creating our frame buffer, where

386
00:18:34,200 --> 00:18:36,100
were choosing the pixel format for a frame buffer?

387
00:18:36,600 --> 00:18:40,800
We requested wiggle frame, buffer, srgb capable ARB and we're passing

388
00:18:40,800 --> 00:18:44,600
true, Which is far, as I know, is how we're supposed to signal that.

389
00:18:44,600 --> 00:18:47,400
We want srgb on the frame buffer.

390
00:18:47,800 --> 00:18:52,100
Now, what I don't know is whether it's legal to pass that if the

391
00:18:52,100 --> 00:18:57,000
driver hasn't told you that it supports frame buffer srgb, like will

392
00:18:57,000 --> 00:18:59,900
it just sort of crash on that or will something very bad happened?

393
00:19:00,200 --> 00:19:03,900
So I wanted to do is try to at least search or find out.

394
00:19:04,900 --> 00:19:08,000
If there was something in the documentation for real choose pixel

395
00:19:08,000 --> 00:19:12,200
format ARB, they would tell us whether the driver was required to pass

396
00:19:12,200 --> 00:19:12,800
over values.

397
00:19:12,800 --> 00:19:15,400
It didn't know or not because I really just couldn't tell you.

398
00:19:15,900 --> 00:19:17,100
I have absolutely no idea.

399
00:19:17,700 --> 00:19:19,300
So we could see here

400
00:19:22,800 --> 00:19:26,800
let's see, the fighting fires are accepted and here is the

401
00:19:29,000 --> 00:19:32,200
Here's the following values that lists questions over has devised a

402
00:19:32,200 --> 00:19:36,400
crew, we placed folks to see Darren Turner but this is get pixel

403
00:19:36,400 --> 00:19:37,200
formats.

404
00:19:37,600 --> 00:19:38,400
Again, we don't really care.

405
00:19:38,400 --> 00:19:40,100
We care about choose pixel formats.

406
00:19:40,800 --> 00:19:41,800
This time, it's just a list.

407
00:19:41,800 --> 00:19:42,700
I shoot, I Ferris.

408
00:19:42,700 --> 00:19:43,600
All the attributes are natural.

409
00:19:43,600 --> 00:19:46,200
These are followed by the corresponding desired value list of turn.

410
00:19:46,200 --> 00:19:46,700
It was Zero.

411
00:19:46,700 --> 00:19:49,500
If if it's null same value, it was empty.

412
00:19:49,500 --> 00:19:50,400
We don't care about that.

413
00:19:51,400 --> 00:19:51,700
Okay.

414
00:19:51,700 --> 00:19:55,700
So we could have passed 04 the float at Rib list, which I didn't do,

415
00:19:55,700 --> 00:19:56,800
but I probably should have

416
00:19:58,400 --> 00:20:01,100
Okay, there's those same as empty blah blah.

417
00:20:01,100 --> 00:20:03,300
Blah let's see here.

418
00:20:04,200 --> 00:20:05,100
The function of C is true.

419
00:20:05,100 --> 00:20:09,000
If the function fails 450 to get some information get the error codes

420
00:20:09,000 --> 00:20:12,600
in the country version to find select pixel formats to return based on

421
00:20:12,600 --> 00:20:14,500
the entry by specified.

422
00:20:14,700 --> 00:20:17,000
We know all that we have not learned anything.

423
00:20:19,900 --> 00:20:22,400
Let's see.

424
00:20:24,300 --> 00:20:25,700
Let's see.

425
00:20:32,700 --> 00:20:34,200
If both.

426
00:20:43,100 --> 00:20:46,600
And error is generated if P attribute I list or P.

427
00:20:46,600 --> 00:20:51,400
Attribute F lists contain invalid attribute or if HDC is invalid.

428
00:20:51,600 --> 00:20:57,800
So to me, that would suggest that we are not allowed to call it or we

429
00:20:57,800 --> 00:20:59,800
are not allowed to put that in the

430
00:21:00,100 --> 00:21:05,000
Just unless it's actually legal, right?

431
00:21:08,900 --> 00:21:09,800
That seems to me.

432
00:21:12,700 --> 00:21:16,000
Yeah, so I think what we're going to have to do is check for its

433
00:21:16,000 --> 00:21:20,400
existence first and that's a huge pain in the butt as well.

434
00:21:20,600 --> 00:21:24,000
Again this is just the whole like yeah, I don't know why they don't

435
00:21:24,000 --> 00:21:27,100
know why they wouldn't have said that at ribs were ignored if they

436
00:21:27,100 --> 00:21:32,000
weren't known but oh well that's what you would do.

437
00:21:32,000 --> 00:21:32,300
Right.

438
00:21:32,300 --> 00:21:33,300
But I don't know.

439
00:21:33,600 --> 00:21:38,300
Anyway so in opengl we have a thing that can search for extensions.

440
00:21:38,300 --> 00:21:39,600
In fact, you can see here

441
00:21:40,800 --> 00:21:43,700
We've got a thing that searches for extensions and that's all well and

442
00:21:43,700 --> 00:21:44,200
good.

443
00:21:44,200 --> 00:21:48,100
Unfortunately, that's the thing that searches for opengl extensions.

444
00:21:48,400 --> 00:21:55,200
It is not a thing that searches for wiggle extensions so we don't

445
00:21:55,200 --> 00:22:00,900
actually know what the wiggle extensions are without using wiggle.

446
00:22:00,900 --> 00:22:04,600
Get extension string, which is a different thing than GL, get string

447
00:22:04,600 --> 00:22:05,600
GL extensions.

448
00:22:06,000 --> 00:22:09,500
So we would have to call wiggle get get accepted string and search

449
00:22:09,500 --> 00:22:10,300
that which

450
00:22:10,400 --> 00:22:11,800
Think is what we'll have to do.

451
00:22:12,000 --> 00:22:17,200
Now we could if we wanted to instead actually just use this guy and

452
00:22:17,200 --> 00:22:23,600
say, okay, GLX frame buffer srgb, if that's present, then press

453
00:22:23,800 --> 00:22:27,200
obviously it, you know, is going to support that for the destination

454
00:22:27,200 --> 00:22:30,800
at but we probably could say that and we'd probably be right.

455
00:22:30,900 --> 00:22:36,100
But technically since you can use a texture as a frame, buffer in

456
00:22:36,100 --> 00:22:40,000
theory there is a you know, an opengl

457
00:22:40,300 --> 00:22:42,700
Implementation would not be erroneous.

458
00:22:42,700 --> 00:22:47,600
If it said that, it's supported X frame, buffer srgb, but did not

459
00:22:47,600 --> 00:22:51,000
support using it on the actual frame buffer.

460
00:22:51,800 --> 00:22:52,700
That's possible.

461
00:22:52,700 --> 00:22:55,500
It could be the only supports using it on a texture on render to

462
00:22:55,500 --> 00:22:56,700
texture, right?

463
00:22:58,900 --> 00:23:03,500
So, I feel like to actually do the full due diligence here, we would

464
00:23:03,500 --> 00:23:12,300
probably have to actually do the same search again and, and, you know,

465
00:23:14,800 --> 00:23:18,200
check the wiggle extension string to see whether it's there.

466
00:23:19,600 --> 00:23:21,300
I can't say it's cancer.

467
00:23:21,300 --> 00:23:25,400
That's very nice thing to have to do, but I guess we'll do it anyway.

468
00:23:26,100 --> 00:23:32,400
So let's take a look here at at our wiggle extensions and figure out

469
00:23:32,400 --> 00:23:33,000
how to do that.

470
00:23:33,100 --> 00:23:35,900
Now, like I said, it's kind of a pain in the butt, it's kind of the

471
00:23:35,900 --> 00:23:40,200
ultimate irony because in order to check if there's a whale extension

472
00:23:41,800 --> 00:23:43,400
I'm just going to let this sink in for a second.

473
00:23:44,200 --> 00:23:47,700
In order to check for a week to see if you can load a particular bill

474
00:23:47,700 --> 00:23:48,400
extension.

475
00:23:50,600 --> 00:23:52,600
You have two little bit extension, not kidding.

476
00:23:53,100 --> 00:23:53,900
Actually true.

477
00:23:55,300 --> 00:23:59,300
Wiggle get extensions string or extensions string.

478
00:24:01,900 --> 00:24:06,700
It's an extended thing that you have to do and you got to call it.

479
00:24:06,900 --> 00:24:09,200
And when you call, we will get extension string.

480
00:24:09,500 --> 00:24:14,000
It will first get the pointer to it and then you call it.

481
00:24:14,000 --> 00:24:17,000
And it tells you what extensions there are hilariously.

482
00:24:17,000 --> 00:24:20,300
Of course you can never check to see if it exists anyway, in the

483
00:24:20,300 --> 00:24:22,900
proper way because you never would've been able to get a string that

484
00:24:22,900 --> 00:24:23,800
would have had it in it.

485
00:24:24,600 --> 00:24:26,800
And so, you just have to call wiggle, get proc address.

486
00:24:26,900 --> 00:24:29,500
And then see whether or not you get it, get something back.

487
00:24:29,500 --> 00:24:30,300
If that makes sense.

488
00:24:30,900 --> 00:24:36,500
Then you can start calling it but only then so yeah, pretty hilarious.

489
00:24:36,600 --> 00:24:39,100
It would be, you know, either you can laugh about it or you can cry

490
00:24:39,100 --> 00:24:39,500
about it.

491
00:24:39,500 --> 00:24:44,000
I'll leave that decision up to you as the home programmer.

492
00:24:44,100 --> 00:24:47,700
Now, if we go ahead here and look at our other wiggle, get proc

493
00:24:47,700 --> 00:24:52,100
addresses, we can sort of see UPS we can sort of see that they are

494
00:24:52,100 --> 00:24:53,100
sitting in here.

495
00:24:53,500 --> 00:24:57,500
They all get sort of grabbed at the same time and this is a fine time

496
00:24:57,500 --> 00:24:59,500
for us to grab that one as well.

497
00:25:01,700 --> 00:25:03,000
Gets pension string.

498
00:25:04,600 --> 00:25:07,800
Would like what was called and paste it.

499
00:25:07,800 --> 00:25:10,500
I did we will get extension string.

500
00:25:11,800 --> 00:25:14,100
Get extensions string.

501
00:25:14,800 --> 00:25:20,200
EXT, and I guess we didn't put X on the end of swap interval, but I

502
00:25:20,200 --> 00:25:22,400
don't know why I'm going to put it on there.

503
00:25:22,400 --> 00:25:24,100
Now, we will get

504
00:25:26,200 --> 00:25:28,400
Poppy dress and there we go.

505
00:25:28,800 --> 00:25:33,100
So if we get that back we can call it and then that way we can figure

506
00:25:33,100 --> 00:25:34,800
out whether or not we support srgb.

507
00:25:35,400 --> 00:25:37,100
So I think I'll do that right here.

508
00:25:37,300 --> 00:25:39,200
Like we'll just go ahead and call that immediately.

509
00:25:41,600 --> 00:25:45,500
So what we'll say is, if we got that back, we'll get extension string

510
00:25:45,500 --> 00:25:45,900
X.

511
00:25:46,400 --> 00:25:49,400
Then, what we'd want to do is say, okay once we've got, we will

512
00:25:49,400 --> 00:25:50,800
extension string X back.

513
00:25:51,200 --> 00:25:54,800
Then we will call it and find out what those extension strings are.

514
00:25:55,900 --> 00:25:57,000
These are extensions.

515
00:25:58,500 --> 00:26:01,600
And then we'll just use literally the exact same Loop here, but just

516
00:26:01,600 --> 00:26:05,500
will check for, you know, we'll check for whatever the rest of the

517
00:26:05,500 --> 00:26:07,000
stuff is, right?

518
00:26:08,100 --> 00:26:08,700
So there we go.

519
00:26:10,100 --> 00:26:13,800
All right, so if we get the extensions string, we then are going to

520
00:26:13,800 --> 00:26:14,100
Loop over.

521
00:26:14,100 --> 00:26:21,200
I don't know why what the count and at thing, I don't know why that is

522
00:26:21,200 --> 00:26:21,900
actually the way it is.

523
00:26:21,900 --> 00:26:23,900
We're not going to touch it for just going to assume it's fine.

524
00:26:24,100 --> 00:26:27,100
So what I'm going to do here is just say we're going to search for the

525
00:26:27,100 --> 00:26:32,400
one that were actually looking for and then if we get it we'll set

526
00:26:32,400 --> 00:26:37,100
that srgb thing to to be thumbs to be thumbs up.

527
00:26:37,300 --> 00:26:40,000
So what we need to do here is

528
00:26:40,000 --> 00:26:43,100
And you know at this point it seems like we may actually want to wrap

529
00:26:43,100 --> 00:26:46,300
these up in some kind of a life nice little container because they've

530
00:26:46,300 --> 00:26:48,900
all got to be essentially Global variable just sitting here.

531
00:26:48,900 --> 00:26:51,800
It might be nicer if we could just have it as like a little

532
00:26:51,800 --> 00:26:52,800
self-contained thing.

533
00:26:52,800 --> 00:26:56,400
So it's easier to see, it doesn't really change the code hardly at

534
00:26:56,400 --> 00:26:59,300
all, but you know, rather than having to look at all these and guess

535
00:26:59,300 --> 00:26:59,900
that they're all going.

536
00:27:00,000 --> 00:27:00,500
Together.

537
00:27:01,000 --> 00:27:02,300
Maybe we could put them in a struct.

538
00:27:02,300 --> 00:27:03,100
It's just a thought.

539
00:27:04,300 --> 00:27:05,500
So, here's extension string.

540
00:27:09,300 --> 00:27:09,600
Yeah.

541
00:27:13,200 --> 00:27:15,900
And that's all well and good.

542
00:27:17,100 --> 00:27:19,300
We'll get extensions touring EXT.

543
00:27:19,600 --> 00:27:25,600
We then need some kind of a way to say Global variable you know, you

544
00:27:25,600 --> 00:27:36,100
32 open, Jill supports srgb frame buffer and what we'll do is if we

545
00:27:36,100 --> 00:27:40,500
find that extension that tells us that the frame buffer is legal to

546
00:27:40,500 --> 00:27:44,600
support, then we will go ahead and put that in there.

547
00:27:45,600 --> 00:27:47,400
Oops, that's not what I wanted at all.

548
00:27:47,900 --> 00:27:49,000
That was not what I wanted.

549
00:27:49,100 --> 00:27:50,900
We'll go ahead and put that in there as true.

550
00:27:51,500 --> 00:27:57,900
So then, when we know that that's true and we come down here, what I

551
00:27:57,900 --> 00:28:01,900
want to do is say, Okay, I want to pass this list of things, right?

552
00:28:02,200 --> 00:28:06,000
But if it turns out that we can't actually pass this one then I don't

553
00:28:06,000 --> 00:28:07,600
want to pass that one, right.

554
00:28:07,700 --> 00:28:14,000
And it's like 12 it's you know, or should say it's 1, 2 3, 4 5,

555
00:28:15,400 --> 00:28:16,600
Five down, right.

556
00:28:18,600 --> 00:28:22,200
so what I can do is I can just say like well you know, if the opengl

557
00:28:22,200 --> 00:28:23,600
doesn't support this thing,

558
00:28:25,400 --> 00:28:30,100
Then what I can do is say whatever that that guy was the the you know,

559
00:28:30,100 --> 00:28:31,200
the fifth one down, right?

560
00:28:31,200 --> 00:28:33,000
So this is 0 1 right?

561
00:28:33,000 --> 00:28:37,900
2 3 4 5, 6 7, 8, 9 and this is 10.

562
00:28:38,200 --> 00:28:39,300
I can just zero it out.

563
00:28:39,300 --> 00:28:43,800
So I stopped the list of there right now, particularly pretty.

564
00:28:43,800 --> 00:28:46,700
Oh, and I forgot we can also do this apparently.

565
00:28:49,200 --> 00:28:52,500
Not particularly pretty, but it's the easiest way to do it for now and

566
00:28:52,500 --> 00:28:54,700
I'll have a little comment on that in a second here.

567
00:28:55,300 --> 00:28:58,800
So that all seems relatively fine to me.

568
00:28:58,800 --> 00:29:03,500
The only thing we need to know now is what is the opengl?

569
00:29:03,900 --> 00:29:05,600
What is the actual opengl support?

570
00:29:05,600 --> 00:29:07,000
Such a frame of our string.

571
00:29:07,000 --> 00:29:10,400
We should be looking for, like, what is the string that goes in here?

572
00:29:11,100 --> 00:29:12,500
And I don't actually know.

573
00:29:12,900 --> 00:29:15,600
So we need to go look at the srgb.

574
00:29:15,600 --> 00:29:17,400
Frame buffer opengl

575
00:29:17,700 --> 00:29:21,400
Shannon and see what it actually is, right?

576
00:29:22,800 --> 00:29:30,500
Now there should be an extension string, I guess it's just going to be

577
00:29:30,500 --> 00:29:31,800
our Big Frame buffer SRV I guess.

578
00:29:31,800 --> 00:29:33,800
I'm just going to be that

579
00:29:35,000 --> 00:29:39,000
Right, so if we see that, we know we're good to go.

580
00:29:39,800 --> 00:29:40,600
So, there we go.

581
00:29:42,000 --> 00:29:45,400
So if we see that, we think we could probably go, you know, go from

582
00:29:45,400 --> 00:29:45,900
there.

583
00:29:46,500 --> 00:29:50,600
And that's that's all well and good.

584
00:29:50,600 --> 00:29:53,800
So we now just need, we need the function prototype for that guy.

585
00:29:53,800 --> 00:29:56,100
I guess was the only thing that I forgot to grab.

586
00:29:56,900 --> 00:29:58,300
So let's go ahead and grab that.

587
00:29:58,600 --> 00:29:59,200
Here it is.

588
00:30:01,500 --> 00:30:04,000
And that can just be thrown on in there.

589
00:30:04,600 --> 00:30:11,100
So there's there's that typedef and we know this is obviously a win

590
00:30:11,100 --> 00:30:15,500
API call, and we already know what we wanted to call.

591
00:30:15,500 --> 00:30:18,400
It was wiggle, get extension string, EXT.

592
00:30:18,600 --> 00:30:19,600
And that's it for there.

593
00:30:20,600 --> 00:30:24,300
So yeah, I think that's just about it.

594
00:30:24,800 --> 00:30:26,100
I guess I did.

595
00:30:26,500 --> 00:30:29,900
Never rename the variable for this guy.

596
00:30:30,200 --> 00:30:34,200
You asked, which I said, I wanted to do we go swap.

597
00:30:35,300 --> 00:30:39,100
Here, where is that called Wiggle swap?

598
00:30:39,300 --> 00:30:39,900
There it is.

599
00:30:40,600 --> 00:30:41,900
So now

600
00:30:44,900 --> 00:30:46,100
We should be good.

601
00:30:46,100 --> 00:30:48,400
Get extension string, X initializing.

602
00:30:49,000 --> 00:30:49,800
Oh cannot convert.

603
00:30:50,400 --> 00:30:52,900
Oh I beg to differ.

604
00:30:57,600 --> 00:30:59,300
and this guy, actually, I guess this is

605
00:31:00,900 --> 00:31:01,500
just that.

606
00:31:02,700 --> 00:31:04,700
So let's see.

607
00:31:04,900 --> 00:31:05,900
Local variable.

608
00:31:05,900 --> 00:31:06,500
Oh, whoops.

609
00:31:09,600 --> 00:31:14,100
So much slower than I used to be with modal editing.

610
00:31:14,100 --> 00:31:18,800
I haven't really gotten it bound up very well and I'm not as used to

611
00:31:18,800 --> 00:31:19,400
it, as I should be.

612
00:31:19,400 --> 00:31:20,300
So it's kind of frustrating.

613
00:31:20,300 --> 00:31:21,200
But what do you do?

614
00:31:22,100 --> 00:31:22,400
All right.

615
00:31:22,400 --> 00:31:25,000
So let's take a look at where we're at here.

616
00:31:27,300 --> 00:31:28,800
Actually, I guess I want to kind of jump.

617
00:31:30,200 --> 00:31:32,100
Jump back a bit and just take a look at that in.

618
00:31:32,100 --> 00:31:32,900
It's tough now.

619
00:31:34,100 --> 00:31:39,000
And so, what we want to do is come through here and take a look at

620
00:31:39,000 --> 00:31:40,800
that extension string code.

621
00:31:42,000 --> 00:31:43,700
So, here is the extension string code.

622
00:31:44,400 --> 00:31:47,000
Let's see if we got it back, we did.

623
00:31:47,600 --> 00:31:49,900
So, let's see what those extensions actually are.

624
00:31:50,100 --> 00:31:52,600
I have no idea what this card would have for our extensions.

625
00:31:52,600 --> 00:31:55,200
What's find out route?

626
00:32:00,300 --> 00:32:03,500
So hilariously, it tells us that it has wiggle our extension string.

627
00:32:03,800 --> 00:32:07,300
Not that we wouldn't have automatically known that because in order to

628
00:32:07,300 --> 00:32:09,600
do that we would have in order to even see the string we would have to

629
00:32:09,600 --> 00:32:13,000
have already used it but for completeness

630
00:32:15,900 --> 00:32:17,500
So, we've got the pixel format stuff.

631
00:32:17,500 --> 00:32:22,500
We've got multi sample, we've got swap control P buffers, render to

632
00:32:22,500 --> 00:32:25,500
texture read buffers, buffer regions.

633
00:32:25,500 --> 00:32:26,300
There's that wiggle.

634
00:32:26,300 --> 00:32:28,200
X frame, buffer srgb, right there.

635
00:32:30,300 --> 00:32:30,900
So that's good.

636
00:32:30,900 --> 00:32:31,200
Oops.

637
00:32:34,700 --> 00:32:35,900
So yeah.

638
00:32:37,500 --> 00:32:38,500
Seems reasonable.

639
00:32:41,100 --> 00:32:42,700
See if it we actually detected.

640
00:32:43,900 --> 00:32:45,900
So let's see.

641
00:32:45,900 --> 00:32:46,400
We right now.

642
00:32:46,400 --> 00:32:47,500
Are opengl sports.

643
00:32:47,500 --> 00:32:47,900
I should be frame.

644
00:32:47,900 --> 00:32:48,900
Buffer is 0.

645
00:32:49,300 --> 00:32:53,800
We finish the parsing Loop and it is still zero that did not go as I

646
00:32:53,800 --> 00:32:59,500
would have hoped say the very least, not great, not great, not great.

647
00:32:59,500 --> 00:32:59,800
Bob.

648
00:33:01,000 --> 00:33:02,700
All right, so let's try that one more time.

649
00:33:03,500 --> 00:33:04,300
Here we go.

650
00:33:05,700 --> 00:33:10,600
And now and now just make sure that I'm actually looking for the right

651
00:33:10,600 --> 00:33:11,000
thing.

652
00:33:12,900 --> 00:33:14,700
I'm looking for wiggle our bed frame buffer.

653
00:33:14,700 --> 00:33:17,100
Oh no, that's the wrong one.

654
00:33:17,300 --> 00:33:19,100
It doesn't actually have that one.

655
00:33:20,200 --> 00:33:23,500
It has the extra version of it but not the r version, they're the

656
00:33:23,500 --> 00:33:24,000
same.

657
00:33:24,000 --> 00:33:25,500
But it just it's the different string.

658
00:33:25,600 --> 00:33:27,600
So we should actually look for this one because we don't actually care

659
00:33:27,600 --> 00:33:29,200
about the ARB one per se.

660
00:33:29,500 --> 00:33:31,700
We just care that it supports even the extra one.

661
00:33:32,400 --> 00:33:35,500
So that that's good to know.

662
00:33:36,900 --> 00:33:41,200
I suppose it does make sense usually to look instead for of the ARB to

663
00:33:41,200 --> 00:33:44,400
look for the X 1 because if you can use the X1, it's going to be

664
00:33:44,400 --> 00:33:47,200
available in more places than the ARB one, right?

665
00:33:47,200 --> 00:33:50,100
Because the older, the driver, the less likely it is to have the ARB

666
00:33:50,100 --> 00:33:51,500
ones or who knows what, right?

667
00:33:52,500 --> 00:33:56,100
So I wonder to what extent we should actually be trying to look for

668
00:33:56,300 --> 00:33:59,900
like x 2 versions of these instead.

669
00:34:00,000 --> 00:34:00,500
I don't know.

670
00:34:02,400 --> 00:34:05,700
No biggie anyway, so let's try that one more time.

671
00:34:06,900 --> 00:34:08,100
And here we go.

672
00:34:08,100 --> 00:34:13,100
So there's that set to zero, we run to hear it set to 1 so great.

673
00:34:13,699 --> 00:34:14,699
And so off we go.

674
00:34:19,000 --> 00:34:21,000
So I think that's good.

675
00:34:21,000 --> 00:34:24,600
I think that's all good and obviously we're still rendering.

676
00:34:24,600 --> 00:34:29,900
So in doing all this stuff for compatibility sake, we have not broken

677
00:34:29,900 --> 00:34:33,400
anything and so that's a plus

678
00:34:37,300 --> 00:34:39,900
That brings us to the question of.

679
00:34:39,900 --> 00:34:43,199
Is there anything else opengl related that we actually needed to do

680
00:34:43,199 --> 00:34:44,100
that we wanted to do?

681
00:34:44,100 --> 00:34:49,400
And I don't know that there is at the moment we have I guess about

682
00:34:49,500 --> 00:34:53,600
gosh we've got about 25 minutes left which is quite a bit of time so

683
00:34:53,600 --> 00:34:57,600
I'm not 100% sure what we should be doing now because I can't think of

684
00:34:57,600 --> 00:35:01,000
anything super open Jelly that we probably would want to do.

685
00:35:03,200 --> 00:35:05,100
Hmm.

686
00:35:06,100 --> 00:35:06,900
Because that's really the only

687
00:35:07,000 --> 00:35:08,300
I think that we actually needed there.

688
00:35:13,100 --> 00:35:14,200
Where's the list?

689
00:35:16,600 --> 00:35:17,600
Where is the list?

690
00:35:18,200 --> 00:35:20,400
Oh, wait, it's The to do, here we go.

691
00:35:22,300 --> 00:35:23,700
So, let's see.

692
00:35:23,800 --> 00:35:24,600
We've got flush.

693
00:35:24,600 --> 00:35:26,500
All thread cues before reloading, dll?

694
00:35:26,600 --> 00:35:27,900
Okay, that's something we could go.

695
00:35:27,900 --> 00:35:30,300
Try to do, we've got debug code.

696
00:35:30,400 --> 00:35:31,800
We've got some audio debugging.

697
00:35:31,800 --> 00:35:37,500
Rendering some stuff here with Harbor rendering.

698
00:35:37,500 --> 00:35:38,800
So we actually did this.

699
00:35:39,200 --> 00:35:41,500
We did srgb frame buffer in textures.

700
00:35:42,100 --> 00:35:45,100
We did vsync, we did background texture downloads.

701
00:35:45,100 --> 00:35:46,200
We just didn't do run into

702
00:35:46,300 --> 00:35:46,900
Texture.

703
00:35:47,000 --> 00:35:52,000
So I don't know if you want to try to do render to texture, we don't

704
00:35:52,000 --> 00:35:56,100
really have anything right now that uses render to texture, but we

705
00:35:56,100 --> 00:35:59,400
could come up with something that used render to texture.

706
00:36:00,100 --> 00:36:02,500
I just don't know if that's maybe is that too big?

707
00:36:02,500 --> 00:36:05,400
I mean to start 25 minutes render to texture America going to say

708
00:36:05,800 --> 00:36:06,200
yeah.

709
00:36:09,500 --> 00:36:12,800
Hard to say render to texture I mean is very basic operation basically

710
00:36:12,800 --> 00:36:16,200
what you know it's just a way of saying instead of always rendering to

711
00:36:16,200 --> 00:36:18,700
the to the thing, you're going to display on the screen I want to

712
00:36:18,700 --> 00:36:21,700
render to something that I will then use in a subsequent render step

713
00:36:21,700 --> 00:36:25,100
as a source texture as something to pull from right very basic concept

714
00:36:25,200 --> 00:36:29,200
really not much to it but it involves a bunch of fussing in opengl as

715
00:36:29,200 --> 00:36:29,800
you might expect.

716
00:36:30,000 --> 00:36:32,100
T', everything always is when involves a bunch of fussing.

717
00:36:33,200 --> 00:36:35,800
So that's really the only thing on the hardware renderer that we had

718
00:36:35,800 --> 00:36:37,500
there and had a question mark over it.

719
00:36:37,500 --> 00:36:38,100
So I don't know that.

720
00:36:38,100 --> 00:36:41,300
That's what we wanted to really do now or not, but we're definitely

721
00:36:41,300 --> 00:36:45,300
getting down to the end of it here, there's not a whole lot here that

722
00:36:46,000 --> 00:36:47,100
that's left.

723
00:36:47,200 --> 00:36:53,100
So, that makes it a little tougher, makes it a little tougher.

724
00:37:17,200 --> 00:37:17,600
I don't know.

725
00:37:19,400 --> 00:37:20,100
I really don't.

726
00:37:21,000 --> 00:37:24,400
I don't have a, I don't have a concrete idea of what should actually

727
00:37:24,400 --> 00:37:25,100
be going on there.

728
00:37:27,300 --> 00:37:32,100
I feel like in general Travis, let's do flush.

729
00:37:32,100 --> 00:37:34,200
All thread cues before reloading, dll?

730
00:37:35,000 --> 00:37:38,000
I feel like flush all thread cues before reloading, dll is something

731
00:37:38,000 --> 00:37:40,500
that maybe would only take 25 minutes possibly.

732
00:37:40,500 --> 00:37:44,400
And it's, in the win32 platform layer, which is where we are, at

733
00:37:44,400 --> 00:37:44,500
least.

734
00:37:44,500 --> 00:37:48,600
So it's not like totally Switching gears, and it's not like render to

735
00:37:48,600 --> 00:37:50,800
texture, which I think is going to be a more involved topic.

736
00:37:50,800 --> 00:37:53,900
We definitely wouldn't finish it and in 25 minutes.

737
00:37:53,900 --> 00:37:57,800
So, let's take a look at flush all thread cues before reloading, dll.

738
00:37:57,800 --> 00:38:03,900
So, the way that this works right now and I don't really know to what

739
00:38:03,900 --> 00:38:04,900
extent, you know,

740
00:38:05,100 --> 00:38:08,900
And probably test to see where we're at in terms of Live code loading,

741
00:38:09,100 --> 00:38:10,800
because we haven't done much with it.

742
00:38:11,500 --> 00:38:16,400
And so, I don't really know at the moment, to what extent we would

743
00:38:16,400 --> 00:38:17,100
have problems.

744
00:38:17,100 --> 00:38:19,000
If we tried just use our Live code loading.

745
00:38:19,300 --> 00:38:22,500
So, let's just take a look at that because I'm just kind of curious.

746
00:38:22,900 --> 00:38:25,800
So, if I come over here to for coder and I just make it a little

747
00:38:25,800 --> 00:38:26,500
smaller.

748
00:38:28,500 --> 00:38:29,500
So first, we'll just try it.

749
00:38:29,500 --> 00:38:33,200
If I just rebuild, what happens game is still working.

750
00:38:33,200 --> 00:38:34,600
So, apparently, the reload is fine.

751
00:38:35,000 --> 00:38:37,700
And let's see if I make a change to the code somewhere.

752
00:38:37,700 --> 00:38:43,400
So I'm going to go into handmade dot CPP and I guess we'll just look

753
00:38:43,400 --> 00:38:48,100
for maybe some hero rendering code, I don't know.

754
00:38:48,100 --> 00:38:49,500
Oh wait, that's not here anymore.

755
00:38:50,100 --> 00:38:54,000
That's actually over in the world mode.

756
00:38:54,700 --> 00:38:57,300
We started moving things out around a little bit.

757
00:38:57,900 --> 00:38:59,800
So if we're doing some of this,

758
00:39:00,000 --> 00:39:00,700
Of here.

759
00:39:00,800 --> 00:39:06,300
Let's look for some rendering code of some kind that we can tweak just

760
00:39:06,300 --> 00:39:09,400
to we just need something, where we'll be able to visually see on our

761
00:39:09,400 --> 00:39:10,800
screen like here, we go.

762
00:39:11,500 --> 00:39:16,100
So here's another type hero and here are some movement code for it.

763
00:39:16,400 --> 00:39:21,200
And I don't know if this is, let's see.

764
00:39:21,300 --> 00:39:24,400
Push bitmap, any transform.

765
00:39:24,400 --> 00:39:28,100
So here is like some stuff so I should be able to just like comment

766
00:39:28,100 --> 00:39:29,400
out some of this stuff, right?

767
00:39:29,400 --> 00:39:29,900
And then if

768
00:39:30,000 --> 00:39:33,700
I rebuild, I won't see it.

769
00:39:34,000 --> 00:39:40,900
Yeah so there we go we're in relatively good shape but and I'm

770
00:39:40,900 --> 00:39:42,800
imagining this might actually be exactly the bug.

771
00:39:42,800 --> 00:39:43,900
I'm talking about.

772
00:39:44,500 --> 00:39:45,300
Not sure though.

773
00:39:47,500 --> 00:39:48,200
I know it's not.

774
00:39:48,200 --> 00:39:50,500
This is actually just for the, this is the debug thing.

775
00:39:50,900 --> 00:39:53,600
So we have two bugs as far as I know, with with, with Live code

776
00:39:53,600 --> 00:39:56,900
editing that we probably should try to fix one of them is the one on

777
00:39:56,900 --> 00:40:01,100
the to-do list, their the other ones, this one this I believe the

778
00:40:01,100 --> 00:40:08,300
problem here is that when the when this menu stuff happens with our

779
00:40:08,300 --> 00:40:11,500
with our doing is, I think we're not necessarily copying everything

780
00:40:11,500 --> 00:40:15,800
that we should be copying out of the string store of the game.

781
00:40:16,700 --> 00:40:17,100
So

782
00:40:17,300 --> 00:40:19,400
You know, we've got all our stuff in the dll.

783
00:40:19,400 --> 00:40:20,400
The strings are in the dll.

784
00:40:20,400 --> 00:40:22,400
When we reload the dll, those strings move around.

785
00:40:22,400 --> 00:40:27,800
So we can't point to any strings and and count on that actually

786
00:40:27,800 --> 00:40:31,900
working and the debug system, I think at the moment doesn't do that

787
00:40:31,900 --> 00:40:32,200
properly.

788
00:40:32,200 --> 00:40:35,900
So you can see here like it's doing some stuff and it's probably

789
00:40:35,900 --> 00:40:43,400
keeping a stale pointer around that then sort of gets gets broken, so

790
00:40:43,400 --> 00:40:44,100
that's one of them.

791
00:40:44,100 --> 00:40:47,300
The other one that we've got is the technical

792
00:40:47,600 --> 00:40:54,300
In we're using function, call backs right in one particular place and

793
00:40:54,300 --> 00:40:55,300
that is the work queue.

794
00:40:55,500 --> 00:40:59,100
So right now we have a thing that's like, where is that work?

795
00:40:59,100 --> 00:41:00,500
You where is mr.

796
00:41:00,500 --> 00:41:01,300
Work queue.

797
00:41:06,700 --> 00:41:14,500
You two made P process or is it probably do work?

798
00:41:15,600 --> 00:41:18,500
So here's do worker work and

799
00:41:21,400 --> 00:41:24,800
Actually got that's not the actual that's just the stub one that we

800
00:41:24,800 --> 00:41:25,600
use for testing.

801
00:41:26,600 --> 00:41:28,200
So it's actually up in here right.

802
00:41:28,600 --> 00:41:31,700
When three to do next, work queue entry is the actual thing we care

803
00:41:31,700 --> 00:41:36,100
about went through to do next work, queue entry.

804
00:41:40,500 --> 00:41:46,800
And that guy is, is the thing that's in theory would cause us a

805
00:41:46,800 --> 00:41:48,400
problem because you can see right here.

806
00:41:48,400 --> 00:41:52,100
It calls the Centre call back and that callback is not necessarily in

807
00:41:52,100 --> 00:41:54,300
the same place from one building to the next.

808
00:41:54,300 --> 00:41:59,300
So when the dll that has that function in it gets reloaded.

809
00:41:59,500 --> 00:41:59,800
If there's

810
00:42:00,000 --> 00:42:01,500
Work sitting on the work queue.

811
00:42:03,100 --> 00:42:11,400
That persists right from one's from, you know the frame 0 somebody

812
00:42:11,400 --> 00:42:15,500
cues up a job and it's pointing to the deal of the floated at that

813
00:42:15,500 --> 00:42:15,900
time.

814
00:42:15,900 --> 00:42:21,400
And says, this is the place to jump for the work and then you go to

815
00:42:21,700 --> 00:42:24,800
the next frame and it has Reloaded The dll.

816
00:42:25,100 --> 00:42:29,400
And now is a different dll that callback eventually gets called and

817
00:42:29,400 --> 00:42:31,800
it's pointing into garbage in a crashes or something, right?

818
00:42:32,100 --> 00:42:32,700
So, that could easily

819
00:42:32,900 --> 00:42:33,600
Happened to us.

820
00:42:33,700 --> 00:42:36,000
There's nothing protecting that at the moment.

821
00:42:36,200 --> 00:42:40,100
So there's two ways we could solve this problem one, is that we could

822
00:42:40,100 --> 00:42:45,200
have the work cues persist across the frames and not have to worry

823
00:42:45,200 --> 00:42:47,600
about the callbacks by getting rid of the concept of using the

824
00:42:47,600 --> 00:42:49,900
function, callback in the first place, right?

825
00:42:50,000 --> 00:42:54,500
So instead what we could do is just use a single entry point for

826
00:42:54,500 --> 00:42:59,600
workers in the main game code that just has a switch statement and the

827
00:42:59,600 --> 00:43:02,500
switch statement will jump to the right function that we actually want

828
00:43:02,500 --> 00:43:02,600
to.

829
00:43:02,800 --> 00:43:06,700
All right, that gets us out of that business entirely.

830
00:43:12,200 --> 00:43:13,000
That's moment.

831
00:43:14,800 --> 00:43:18,300
However, now that I think about it, that doesn't really help us

832
00:43:18,300 --> 00:43:22,900
because in theory, we might still be in executing some code.

833
00:43:23,900 --> 00:43:25,600
In that previous dll.

834
00:43:25,800 --> 00:43:30,100
So if we were to unload it I don't even know what happens at that

835
00:43:30,100 --> 00:43:30,700
point.

836
00:43:31,300 --> 00:43:34,500
I don't know what happens in Windows when you try to unload a dll that

837
00:43:34,500 --> 00:43:37,400
you're currently actually, executing, I assume you crash.

838
00:43:38,000 --> 00:43:40,900
I don't know to be completely honest with you, I'm not sure.

839
00:43:41,900 --> 00:43:43,200
So I feel like that doesn't help us.

840
00:43:43,200 --> 00:43:46,200
So I feel like we really do need a thing, which says that if we're

841
00:43:46,200 --> 00:43:50,800
going to load, we have to wait for the cues to completely drain out.

842
00:43:50,900 --> 00:43:53,100
And then once the cues are completely drained out,

843
00:43:53,800 --> 00:43:54,700
We can continue.

844
00:43:55,200 --> 00:43:58,400
So this right here is probably, all we really need is went through to

845
00:43:58,400 --> 00:43:59,400
complete all work.

846
00:43:59,700 --> 00:44:03,300
We just need to call that on every cue, right, that we've got.

847
00:44:03,500 --> 00:44:07,400
And once we call that on every Q, we know that we're done.

848
00:44:08,100 --> 00:44:11,200
So what I can probably do is, just say, alright, whenever we go to

849
00:44:11,200 --> 00:44:12,400
reload, right?

850
00:44:16,900 --> 00:44:18,300
Right here, right.

851
00:44:19,400 --> 00:44:19,900
Wow.

852
00:44:21,500 --> 00:44:22,200
Okay.

853
00:44:24,000 --> 00:44:25,500
That's fantastic.

854
00:44:25,900 --> 00:44:27,000
Who didn't update?

855
00:44:27,000 --> 00:44:27,700
People?

856
00:44:28,000 --> 00:44:30,200
Who didn't update the to do file.

857
00:44:31,000 --> 00:44:33,500
Will somebody please tell me who did nothing, we didn't update the to

858
00:44:33,500 --> 00:44:34,100
do file.

859
00:44:35,500 --> 00:44:37,600
We already did that look.

860
00:44:37,800 --> 00:44:38,700
It's right there.

861
00:44:43,000 --> 00:44:46,300
We're even better than we thought we were people give yourselves a big

862
00:44:46,300 --> 00:44:48,900
old pat on the back anyway.

863
00:44:49,400 --> 00:44:49,800
All right.

864
00:44:49,800 --> 00:44:52,000
Well I got nothing.

865
00:44:52,700 --> 00:44:53,300
I don't know what to say.

866
00:44:53,300 --> 00:44:55,100
We already fixed that so

867
00:44:57,300 --> 00:44:58,800
That was sort of anticlimactic.

868
00:45:00,700 --> 00:45:01,200
So yeah.

869
00:45:01,200 --> 00:45:02,100
So we're down to this stuff.

870
00:45:02,100 --> 00:45:06,500
Now I would basically say that over here we've got render to texture

871
00:45:06,500 --> 00:45:07,300
and shaders.

872
00:45:07,300 --> 00:45:08,300
Right?

873
00:45:08,500 --> 00:45:14,800
I feel like we probably want to do those a little later because that's

874
00:45:14,800 --> 00:45:16,600
going to just be for special effects and things like that.

875
00:45:16,900 --> 00:45:19,700
Oh and hey look this guy still in there.

876
00:45:19,900 --> 00:45:20,900
You don't need that anymore.

877
00:45:25,400 --> 00:45:26,300
So yeah, I don't know.

878
00:45:26,300 --> 00:45:27,700
Maybe we'll just call it for today.

879
00:45:27,700 --> 00:45:31,000
I really don't want to do the only things we need to like move on.

880
00:45:31,000 --> 00:45:34,400
Like we need to go start working on the debug code, is what we need to

881
00:45:34,400 --> 00:45:34,800
do.

882
00:45:35,300 --> 00:45:37,300
So maybe we just call it and start on Monday.

883
00:45:37,400 --> 00:45:40,300
It's a shortcoming day because I took, you know, to be fair I took an

884
00:45:40,300 --> 00:45:44,600
extra 20 30 minutes the other day so maybe I should I should just go

885
00:45:44,600 --> 00:45:49,800
to the Q&A now and call it because yeah, I think now it's time to just

886
00:45:49,800 --> 00:45:50,800
go finishes up.

887
00:45:51,200 --> 00:45:54,200
I think we just want to finish these two next week can

888
00:45:54,300 --> 00:45:58,100
How to have a good finishing week because I'd like to go start get

889
00:45:58,100 --> 00:45:58,800
certain the gameplay code.

890
00:45:58,800 --> 00:46:04,200
Like I said, and we're not very far from that because I feel like,

891
00:46:04,400 --> 00:46:07,300
yeah, we could just get get through these guys here and then we'll be

892
00:46:07,300 --> 00:46:08,200
ready to do.

893
00:46:08,600 --> 00:46:12,800
Whatever, final rendering work, we want to do and then go from there.

894
00:46:16,700 --> 00:46:19,500
And, you know, I could I could say that maybe if we do that render

895
00:46:19,500 --> 00:46:24,400
pass, we could just go ahead and say, all right, you know, let's do

896
00:46:24,400 --> 00:46:25,400
that in here as well.

897
00:46:26,300 --> 00:46:29,500
We'll do a little bit of that once we actually get that, these

898
00:46:29,500 --> 00:46:31,900
architectural things all straightened out then we just finish up the

899
00:46:31,900 --> 00:46:34,300
harbor render as well because we'd need shaders to do like the

900
00:46:34,300 --> 00:46:35,200
lighting or something.

901
00:46:36,100 --> 00:46:37,900
I don't know seems reasonable.

902
00:46:38,800 --> 00:46:41,800
I'm just going to say that because yeah, I don't know, I don't know.

903
00:46:42,100 --> 00:46:44,400
It was a bad bad day for ideas.

904
00:46:44,400 --> 00:46:46,000
I was out of ideas of what we should do.

905
00:46:46,000 --> 00:46:48,100
That wasn't going to be starting, one of these things and there isn't

906
00:46:48,100 --> 00:46:50,800
that much left on the to-do list that we can actually do that isn't,

907
00:46:51,600 --> 00:46:53,000
you know, starting something major.

908
00:46:54,300 --> 00:46:57,600
All right, so I'm gonna go to the Q&A, then it'll be an easy Friday.

909
00:46:57,600 --> 00:46:58,600
Everyone's off the hook,

910
00:47:01,900 --> 00:47:02,700
And you assume 73.

911
00:47:02,700 --> 00:47:04,100
That's basically what an end up being.

912
00:47:04,600 --> 00:47:05,900
What do we do for next 20 minutes?

913
00:47:05,900 --> 00:47:09,600
Well, we should go find out that our to-do items already.

914
00:47:09,600 --> 00:47:12,200
Got to dude, I probably should have looked through more of these,

915
00:47:12,200 --> 00:47:13,000
maybe there's stuff on here.

916
00:47:13,000 --> 00:47:14,500
That's the, I don't even know that we did that.

917
00:47:14,500 --> 00:47:15,100
I didn't think so.

918
00:47:15,100 --> 00:47:15,900
I didn't think we did.

919
00:47:15,900 --> 00:47:16,700
I thought this was all stuff.

920
00:47:16,700 --> 00:47:21,600
We hadn't done yet, but I don't know.

921
00:47:22,000 --> 00:47:22,800
Maybe not.

922
00:47:31,100 --> 00:47:31,900
Yeah, I don't know.

923
00:47:45,500 --> 00:47:47,900
Typically, there's a bug in the, if you look at the, if you add this,

924
00:47:47,900 --> 00:47:49,900
not checking the answer to be very about a different one.

925
00:47:50,400 --> 00:47:53,500
Okay, let me go check that.

926
00:47:57,500 --> 00:47:59,400
One also, I should mention this.

927
00:48:00,000 --> 00:48:02,600
I'm kind of annoying problem too.

928
00:48:03,100 --> 00:48:04,600
Is a whoops.

929
00:48:04,600 --> 00:48:06,200
Yeah, that was a completion bug.

930
00:48:10,200 --> 00:48:11,600
That's what we actually wanted, right.

931
00:48:17,400 --> 00:48:18,600
One thing I should mention.

932
00:48:19,700 --> 00:48:21,900
Is you can kind of see.

933
00:48:25,500 --> 00:48:28,600
I talked about I've talked about this a lot of times and I actually

934
00:48:28,600 --> 00:48:33,200
think open gel was a pretty well-designed API for its day like back in

935
00:48:33,200 --> 00:48:38,200
the day and so I don't really want to harsh on opengl to be honest

936
00:48:38,200 --> 00:48:43,500
with you and so I'd like to just caveat that and say that this is not

937
00:48:43,500 --> 00:48:46,100
really has nothing really to do with opengl but I just wanted to point

938
00:48:46,100 --> 00:48:49,400
this out so you saw all the stuff that we had to do.

939
00:48:51,200 --> 00:48:54,700
With opengl to do the multi threat that overlap texture.

940
00:48:54,700 --> 00:48:55,100
Download?

941
00:48:55,100 --> 00:48:55,600
Right?

942
00:48:56,100 --> 00:48:57,400
And the srgb frame buffer,

943
00:48:58,800 --> 00:49:04,700
The reason it's so important for apis to be cleanly designed is

944
00:49:04,700 --> 00:49:08,600
because every all of that stuff we just did, probably how well you saw

945
00:49:08,600 --> 00:49:09,100
its Qbert.

946
00:49:09,100 --> 00:49:14,000
Caleb caught a bug right there that bug that that typo that I did,

947
00:49:14,500 --> 00:49:16,400
should never have even been possible.

948
00:49:16,700 --> 00:49:20,400
Because all we should have had to have done was put it if the API was

949
00:49:20,400 --> 00:49:25,100
properly designed, then this would just be able to be placed there and

950
00:49:25,100 --> 00:49:28,400
it would ignore it if it wasn't capable

951
00:49:28,600 --> 00:49:29,700
Will doing it, right?

952
00:49:31,100 --> 00:49:36,100
Because there's nothing our apps not going to do anything else, right?

953
00:49:36,100 --> 00:49:38,300
And if we wanted to, then you would want the API.

954
00:49:38,300 --> 00:49:40,400
Just have a query that says, can you do this?

955
00:49:40,700 --> 00:49:44,800
You wouldn't want me to have to change what I'm passing to you even.

956
00:49:44,800 --> 00:49:46,000
So right.

957
00:49:46,900 --> 00:49:49,700
And so it's kind of a good example, all that stuff.

958
00:49:49,700 --> 00:49:53,000
We had to do with the multi threads in the con is above all of that is

959
00:49:53,000 --> 00:49:54,300
just meaningless code.

960
00:49:54,700 --> 00:49:58,900
All you can possibly do in that code is screw up, right?

961
00:49:59,200 --> 00:50:00,800
And so what you're basically doing is you're creating

962
00:50:00,900 --> 00:50:05,300
Eating all these opportunities for bugs on the developer side and

963
00:50:05,300 --> 00:50:08,400
their way they're very likely to make them because a they don't know

964
00:50:08,400 --> 00:50:09,700
like, we don't know.

965
00:50:09,800 --> 00:50:12,800
I mean you saw we had a bug on the Nvidia driver there, we have no

966
00:50:12,800 --> 00:50:14,300
idea, but that bug might be there.

967
00:50:14,300 --> 00:50:17,500
It's not in the documentation that we're, we have no idea.

968
00:50:17,500 --> 00:50:19,100
That, that could even be a possibility.

969
00:50:19,700 --> 00:50:21,500
We're just trying to get the contact.

970
00:50:21,500 --> 00:50:25,200
So we gave it a shot and it turned out the way we did it happen to be

971
00:50:25,200 --> 00:50:27,700
wrong for some unknown reason on this particular driver.

972
00:50:28,200 --> 00:50:30,800
So really, the reason that

973
00:50:30,800 --> 00:50:34,400
By Design is so important, is just because every time you make a

974
00:50:34,400 --> 00:50:37,100
mistake like that, you create more opportunities for bugs.

975
00:50:37,500 --> 00:50:40,300
And if you take a look at how many opportunities, there were four bugs

976
00:50:40,300 --> 00:50:45,500
in just, that one thing, there are dozens of places in our code.

977
00:50:45,500 --> 00:50:47,900
Now, none of which need to be there.

978
00:50:48,100 --> 00:50:52,600
None of which actually do anything, all of, which may contain a bug.

979
00:50:52,800 --> 00:50:56,800
And that's because the API is not designed properly, right?

980
00:50:59,300 --> 00:50:59,800
And if

981
00:51:00,000 --> 00:51:04,000
Want, you know, a preview of a small part of my Vulcan rant.

982
00:51:04,200 --> 00:51:05,500
It's that right?

983
00:51:05,500 --> 00:51:10,300
It's that it is absolutely not designed to try to keep the bugs down,

984
00:51:10,300 --> 00:51:13,500
it is like a festival of things that you could do wrong.

985
00:51:14,700 --> 00:51:18,200
And every, you know, one open jail call.

986
00:51:18,200 --> 00:51:22,400
You might see, there's going to be like 30 Vulcan calls, right?

987
00:51:22,700 --> 00:51:24,500
Not my biggest complaint with it.

988
00:51:24,500 --> 00:51:29,400
It's a minor thing, but they were very they were extremely

989
00:51:30,000 --> 00:51:35,000
Opposed to the notion of trying to work on the API, more to reduce the

990
00:51:35,000 --> 00:51:36,500
number of bug points.

991
00:51:36,700 --> 00:51:40,500
And to increase the chances that the error handling on the app side

992
00:51:40,500 --> 00:51:41,500
would be reasonable.

993
00:51:42,600 --> 00:51:48,200
And I don't care how low level or how special purpose your API is.

994
00:51:48,800 --> 00:51:49,800
It doesn't matter.

995
00:51:50,400 --> 00:51:57,300
It's still extremely important that you consider bug-free use to be a

996
00:51:57,300 --> 00:51:59,900
high priority because again, like

997
00:52:01,900 --> 00:52:02,900
Bugs happen, a lot.

998
00:52:02,900 --> 00:52:07,800
And if you don't design your API with that in mind, you're just

999
00:52:07,800 --> 00:52:09,700
proliferating the number of bugs in the world.

1000
00:52:10,700 --> 00:52:11,100
You know.

1001
00:52:32,800 --> 00:52:33,000
Wait.

1002
00:52:33,000 --> 00:52:34,700
Wait, wait wait, hold on a second.

1003
00:52:36,100 --> 00:52:39,800
I'm just going to chat now is the hmh bot down.

1004
00:52:41,700 --> 00:52:43,600
Is the handmade he robot down?

1005
00:53:13,400 --> 00:53:13,700
oh,

1006
00:53:15,400 --> 00:53:17,000
Hmm.

1007
00:53:23,000 --> 00:53:24,400
So the estimate is about, as down.

1008
00:53:24,400 --> 00:53:26,900
We moved it over to another server ants having rough times.

1009
00:53:26,900 --> 00:53:28,200
Well, that is very sad.

1010
00:53:28,300 --> 00:53:29,800
I don't even know if I want to do him a hero.

1011
00:53:29,800 --> 00:53:30,800
If the Bots not here,

1012
00:53:32,400 --> 00:53:36,300
Now, if in sohbat is still functioning, then I'm okay because like,

1013
00:53:36,300 --> 00:53:37,000
oh, and there it is.

1014
00:53:37,000 --> 00:53:39,800
Thank you for your thank you too.

1015
00:53:39,800 --> 00:53:40,300
What does it say?

1016
00:53:40,300 --> 00:53:41,400
It's about what it is about.

1017
00:53:41,400 --> 00:53:45,900
Say it's about said something, thank you to Imperium tactics for

1018
00:53:45,900 --> 00:53:46,900
following the channel.

1019
00:53:46,900 --> 00:53:51,300
Oh well, that's not one of that's really not the very insightful.

1020
00:53:51,300 --> 00:53:54,800
Human sohbat and sohbat says so much more, insightful thing certainly.

1021
00:53:55,300 --> 00:53:58,700
But as long as I can see that in sohbat is there, then I'm okay, I'm

1022
00:53:58,700 --> 00:53:59,500
okay with that.

1023
00:54:00,100 --> 00:54:02,900
Um, but it would be nice to have hmh body as well.

1024
00:54:12,300 --> 00:54:14,000
Carrie Johansen totally serious.

1025
00:54:14,000 --> 00:54:16,000
When I say you should write an API book.

1026
00:54:16,000 --> 00:54:17,900
I would never think of lots of stuff.

1027
00:54:18,200 --> 00:54:22,700
Well, I guess I have that lecture and I and nobody still pretty much

1028
00:54:22,700 --> 00:54:24,700
does the things that I talked about in there?

1029
00:54:25,200 --> 00:54:28,100
So, I mean, I could write a book, but,

1030
00:54:29,800 --> 00:54:31,100
You know, what anyone read it?

1031
00:54:31,100 --> 00:54:31,600
I don't know.

1032
00:54:37,900 --> 00:54:38,800
I mean, there's the thing.

1033
00:54:38,800 --> 00:54:40,000
If you type in,

1034
00:54:47,700 --> 00:54:48,300
Yeah.

1035
00:54:50,200 --> 00:54:52,100
So there's this guy right here.

1036
00:54:55,900 --> 00:55:01,600
And I mean, it's got most of the basic principles in there, you know.

1037
00:55:02,400 --> 00:55:08,200
And it's pretty much like I think if you do the stuff that's talked

1038
00:55:08,200 --> 00:55:12,900
about in the lecture, then you end up with a pretty usable API and

1039
00:55:13,100 --> 00:55:14,400
almost nobody actually does them.

1040
00:55:20,800 --> 00:55:23,200
So it's not the kid for the keyboard Gamepad and B can have to this

1041
00:55:23,200 --> 00:55:24,500
account ever go beyond one.

1042
00:55:24,500 --> 00:55:27,000
Or is it there if you put the input getting on a separate thread?

1043
00:55:27,500 --> 00:55:27,700
Yeah.

1044
00:55:27,700 --> 00:55:28,200
It can't ever.

1045
00:55:28,200 --> 00:55:32,400
Go beyond one at the moment for Gamepad inputs.

1046
00:55:32,500 --> 00:55:35,100
I don't know about keyboard inputs because I don't know if we do WM

1047
00:55:35,100 --> 00:55:37,500
key down, in which case it could that have transitioned out could go

1048
00:55:37,500 --> 00:55:39,400
above it, so could Mouse.

1049
00:55:40,000 --> 00:55:45,600
So it's basically there, it can go beyond one for circumstances where

1050
00:55:45,600 --> 00:55:46,200
the

1051
00:55:47,600 --> 00:55:49,200
We're we're passing the message Loop.

1052
00:55:49,400 --> 00:55:51,700
So if we look at

1053
00:55:56,600 --> 00:55:58,600
Let's see when key yeah.

1054
00:56:03,700 --> 00:56:05,000
This right here.

1055
00:56:05,200 --> 00:56:08,500
So, here is win32 process pending messages.

1056
00:56:08,800 --> 00:56:10,700
So do you see this stuff here?

1057
00:56:10,700 --> 00:56:13,500
Where we do win32 process, keyboard message.

1058
00:56:15,100 --> 00:56:20,000
I think, don't actually know, but let's see.

1059
00:56:20,000 --> 00:56:24,200
I think that means that, at least for the keyboard, you could get it

1060
00:56:24,200 --> 00:56:25,300
to be higher.

1061
00:56:26,400 --> 00:56:27,800
Let's find out.

1062
00:56:30,500 --> 00:56:33,900
To assess keyboard message.

1063
00:56:34,400 --> 00:56:38,800
Yeah, so, so for keyboards, it definitely could be higher than one.

1064
00:56:38,800 --> 00:56:42,100
And the reason for that is, this is running through the message queue.

1065
00:56:42,600 --> 00:56:46,600
So, basically, if windows queues up a key up keydown, keyup key down

1066
00:56:46,600 --> 00:56:50,700
on our on, our thread Q, which you know, it could, I don't know that

1067
00:56:50,700 --> 00:56:52,900
it ever will because it might not pull the keyboard frequently enough,

1068
00:56:52,900 --> 00:56:59,800
I have no idea, but if it did, then that count would go would go up.

1069
00:57:00,300 --> 00:57:00,900
Right.

1070
00:57:01,600 --> 00:57:06,500
The GamePad, since we only pull it once a frame right now, that

1071
00:57:06,500 --> 00:57:07,500
shouldn't be able to.

1072
00:57:07,500 --> 00:57:11,400
But like you said, if we decided later that we wanted it to be pulled

1073
00:57:11,400 --> 00:57:14,200
more frequently, we could pull it more frequently.

1074
00:57:14,200 --> 00:57:18,400
And so I think it's important for the API to have that in there.

1075
00:57:18,400 --> 00:57:19,500
If that makes sense.

1076
00:57:21,600 --> 00:57:25,800
I feel like we want to set ourselves up for success by making it so

1077
00:57:25,800 --> 00:57:28,800
that would be fine that it's too slow to have it.

1078
00:57:28,800 --> 00:57:29,600
It's just not

1079
00:57:30,100 --> 00:57:30,900
Good enough to pull it.

1080
00:57:30,900 --> 00:57:33,300
At that frequency, we can pull it a higher frequency and the game

1081
00:57:33,300 --> 00:57:38,600
would still work just fine and it wouldn't break the game in some way.

1082
00:57:40,900 --> 00:57:41,100
Keeper.

1083
00:57:41,100 --> 00:57:42,800
Caleb kind of grabs Windows related.

1084
00:57:42,800 --> 00:57:45,300
Why do so many games especially Source games handle?

1085
00:57:45,300 --> 00:57:46,600
Alt-tab poorly?

1086
00:57:47,000 --> 00:57:52,200
Well, you know, that's there's a lot to that question.

1087
00:57:52,200 --> 00:57:57,000
So the, the main reason is just because they change the display

1088
00:57:57,000 --> 00:57:57,700
resolution.

1089
00:57:58,100 --> 00:57:58,700
Usually.

1090
00:57:59,700 --> 00:58:02,000
So one of the things we didn't do on handmade here as we didn't change

1091
00:58:02,000 --> 00:58:03,000
the display resolution,

1092
00:58:05,400 --> 00:58:09,300
Now, I'm a big proponent of not changing the display resolution, the

1093
00:58:09,300 --> 00:58:11,400
reason, I don't like change the display resolution is because, you

1094
00:58:11,400 --> 00:58:14,400
know, that the user is looking at a screen where the display is

1095
00:58:14,600 --> 00:58:15,800
working, right?

1096
00:58:15,800 --> 00:58:18,100
Because if they weren't, they couldn't click on your game.

1097
00:58:19,200 --> 00:58:22,800
Anytime you change, the display resolution, you run the risk of

1098
00:58:22,800 --> 00:58:25,900
changing the display to something that their monitor doesn't handle,

1099
00:58:25,900 --> 00:58:29,400
properly, or that it won't sink to write or that's buggy or weird or

1100
00:58:29,400 --> 00:58:31,100
not what they wanted, right?

1101
00:58:31,700 --> 00:58:36,300
So, I usually like to just have it be that they can run the game and

1102
00:58:36,300 --> 00:58:38,300
whatever their monitors in, that's the resolution.

1103
00:58:38,300 --> 00:58:38,800
We use.

1104
00:58:40,200 --> 00:58:43,500
It doesn't necessarily mean the game renders in that resolution, the

1105
00:58:43,500 --> 00:58:47,100
game might want to render in a smaller Resolution For Speed purposes

1106
00:58:47,300 --> 00:58:51,300
and stretch up to the higher resolution after the fact.

1107
00:58:52,300 --> 00:58:55,300
But that's that's the way I prefer to do it now.

1108
00:58:55,500 --> 00:58:56,400
Is it a little bit slower?

1109
00:58:56,400 --> 00:58:56,600
Yes.

1110
00:58:56,600 --> 00:59:00,100
Because you have to pay for that stretching up process and so

1111
00:59:00,100 --> 00:59:04,400
sometimes it maybe not the best decision and it may have been better

1112
00:59:04,400 --> 00:59:08,600
to do change resolution, it's just a judgment call and I would rather

1113
00:59:08,600 --> 00:59:09,800
go the other route.

1114
00:59:09,900 --> 00:59:15,400
And say, I'd rather be well, better behaved on people's machines that

1115
00:59:15,400 --> 00:59:17,800
are fast enough, which is most people's machines fast enough to do

1116
00:59:17,800 --> 00:59:18,700
that scale up.

1117
00:59:18,900 --> 00:59:24,400
Then use the change resolution stuff and and go that route.

1118
00:59:25,500 --> 00:59:29,300
So usually that's why when you call change resolution then what

1119
00:59:29,300 --> 00:59:33,800
happens is any time Windows detects an ALT tab it changes the

1120
00:59:33,800 --> 00:59:37,900
resolution back to the default desktop resolution, right?

1121
00:59:39,100 --> 00:59:42,300
Which is a whole nother mode change which sometimes does stuff like

1122
00:59:42,300 --> 00:59:45,700
moves, the icons around on the screen, or does all these other weird

1123
00:59:45,700 --> 00:59:46,000
things?

1124
00:59:46,000 --> 00:59:49,800
You who knows what goes on and they could make it so that like, oh,

1125
00:59:49,800 --> 00:59:53,300
you know, my my game doesn't know what's going on now.

1126
00:59:53,300 --> 00:59:53,800
Blah, blah, blah.

1127
00:59:53,800 --> 00:59:57,100
There's this whole night mirror of stuff, right?

1128
00:59:58,800 --> 00:59:59,800
So you know

1129
01:00:00,000 --> 01:00:03,800
It 100% their fault or sorry.

1130
01:00:03,800 --> 01:00:05,400
Is it partially their fault?

1131
01:00:05,600 --> 01:00:06,300
Yes.

1132
01:00:06,300 --> 01:00:07,400
Is it all their fault?

1133
01:00:07,400 --> 01:00:10,700
Know, a lot of it is just Windows is bad, at handling resolution

1134
01:00:10,700 --> 01:00:15,000
changes and always has been probably always will be if Microsoft had

1135
01:00:15,000 --> 01:00:16,700
done it properly in the first place.

1136
01:00:16,700 --> 01:00:21,000
All those games would just work fine and it they would never even have

1137
01:00:21,000 --> 01:00:23,700
to know that that was going on, right?

1138
01:00:31,400 --> 01:00:33,400
So, no, crying, is there any benefit to moving the main Windows

1139
01:00:33,400 --> 01:00:34,800
message queue to another thread?

1140
01:00:34,900 --> 01:00:36,900
I'm sorry if you've implemented answer this already, I'm still

1141
01:00:36,900 --> 01:00:37,400
catching up.

1142
01:00:37,700 --> 01:00:39,700
Not that I can think of

1143
01:00:48,400 --> 01:00:54,800
So a couple of things thing, number one is window messages in general,

1144
01:00:56,000 --> 01:01:01,500
I believe always come to the same threads Q as created the window.

1145
01:01:02,400 --> 01:01:06,800
So you couldn't really move move the main Windows message queue to

1146
01:01:06,800 --> 01:01:08,400
another thread per se

1147
01:01:10,400 --> 01:01:12,400
You couldn't literally do that, right?

1148
01:01:12,600 --> 01:01:16,300
What you could do that would have the same effect is launched the game

1149
01:01:16,300 --> 01:01:18,100
on another thread, right?

1150
01:01:18,500 --> 01:01:21,200
Which would leave your main thread that created the window that

1151
01:01:21,200 --> 01:01:25,400
created the window, free to sit there and spin on the message queue,

1152
01:01:25,900 --> 01:01:26,300
right?

1153
01:01:26,300 --> 01:01:27,200
You could do that.

1154
01:01:29,200 --> 01:01:31,800
So either way, I was just kind of pointing out there's a little

1155
01:01:31,800 --> 01:01:32,500
technicality there.

1156
01:01:32,500 --> 01:01:34,200
It doesn't change your question your question.

1157
01:01:34,200 --> 01:01:35,000
Still totally valid.

1158
01:01:35,000 --> 01:01:38,200
It's just I was saying you can't you can't quite right the line of

1159
01:01:38,200 --> 01:01:39,100
code that's like

1160
01:01:40,000 --> 01:01:42,500
You know, create thread jump to that thread.

1161
01:01:42,500 --> 01:01:44,200
And then that thread calls Peak message and handles.

1162
01:01:44,200 --> 01:01:46,800
I think it's like, no because since the main thread is the one that

1163
01:01:46,800 --> 01:01:49,000
created the window, the peak message thread, just won't ever get any

1164
01:01:49,000 --> 01:01:49,700
of its messages.

1165
01:01:51,000 --> 01:01:51,600
I believe.

1166
01:01:51,600 --> 01:01:52,500
That's what happens.

1167
01:01:52,500 --> 01:01:53,400
I could be wrong.

1168
01:01:53,700 --> 01:01:55,200
That just seems to be my recollection.

1169
01:01:56,700 --> 01:01:59,600
So, but putting that aside because like I said you could totally

1170
01:01:59,600 --> 01:02:00,400
implemented by just.

1171
01:02:00,500 --> 01:02:00,700
Okay.

1172
01:02:00,700 --> 01:02:02,700
So start the game on the other thread and let the main thread to the

1173
01:02:02,700 --> 01:02:04,500
messages, you still end up the same circumstance.

1174
01:02:06,800 --> 01:02:08,500
Does that have any benefits?

1175
01:02:09,300 --> 01:02:13,500
And my answer at the moment is not that I can think of but that

1176
01:02:13,500 --> 01:02:14,100
doesn't mean.

1177
01:02:14,100 --> 01:02:17,500
The answer is no windows is, obviously a very complicated world.

1178
01:02:18,100 --> 01:02:24,200
I only know a certain amount about it and no matter how much I think I

1179
01:02:24,200 --> 01:02:26,800
know there's always a new thing.

1180
01:02:26,800 --> 01:02:29,300
I learn a new thing every day, right, on Windows, even though I've

1181
01:02:29,300 --> 01:02:30,200
been programmed it for,

1182
01:02:31,200 --> 01:02:31,800
15 years.

1183
01:02:31,800 --> 01:02:35,200
I don't know how long because it's just vast and it changes all the

1184
01:02:35,200 --> 01:02:40,500
time and it's you know, one of those things that that, you know, I

1185
01:02:40,900 --> 01:02:43,400
just because I don't know the reason why you might want to do that

1186
01:02:43,400 --> 01:02:46,100
doesn't mean that someone else out there would like oh yeah it's good

1187
01:02:46,100 --> 01:02:50,700
to do that because you do this or something and it's better or

1188
01:02:50,700 --> 01:02:51,400
something like that.

1189
01:02:53,300 --> 01:02:55,400
So yeah.

1190
01:02:56,700 --> 01:02:59,800
My answer is, I don't know if one but that doesn't mean.

1191
01:03:00,000 --> 01:03:07,100
In that there isn't one part of the reason why message queues are good

1192
01:03:07,300 --> 01:03:11,100
in general, is because you don't have to babysit them.

1193
01:03:11,700 --> 01:03:15,600
And so some of the things, some of the reasons why you might want to

1194
01:03:15,600 --> 01:03:19,800
do things on a separate thread, are kind of obviated by the fact that

1195
01:03:19,800 --> 01:03:20,900
it is a queue.

1196
01:03:21,000 --> 01:03:25,600
So for example, if you were pulling the keyboard you might have to do

1197
01:03:25,600 --> 01:03:28,000
that on a separate thread to make sure that you pulled it frequently

1198
01:03:28,000 --> 01:03:29,700
enough to not miss keystrokes.

1199
01:03:30,000 --> 01:03:30,400
Right.

1200
01:03:31,100 --> 01:03:34,000
But if you're just getting your keystroke information from Windows,

1201
01:03:34,000 --> 01:03:38,000
and windows is is doing that pulling itself and putting it onto a cue

1202
01:03:38,000 --> 01:03:38,500
for you.

1203
01:03:39,200 --> 01:03:41,800
Well, now it's really just windows that has to make sure that it pulls

1204
01:03:41,800 --> 01:03:43,000
the free keyboard for going off.

1205
01:03:43,000 --> 01:03:45,600
You're just going to sit there and consume messages on the Queue and

1206
01:03:45,600 --> 01:03:47,300
those messages can pile up.

1207
01:03:47,300 --> 01:03:51,400
If there's been several key presses during between the two times, when

1208
01:03:51,400 --> 01:03:54,000
you're asked about the queue, you're not going to miss them.

1209
01:03:54,000 --> 01:03:54,600
You're going to get them.

1210
01:03:54,600 --> 01:03:55,700
All right.

1211
01:03:57,300 --> 01:04:03,000
And so part of the, the reason why I say, I don't know of any

1212
01:04:03,000 --> 01:04:06,700
particular reason why you would want to run that Q on a separate

1213
01:04:06,700 --> 01:04:11,100
thread is because most of the messages that we care about, getting

1214
01:04:11,100 --> 01:04:13,900
through that thread, our messages that can just pile up.

1215
01:04:13,900 --> 01:04:16,900
If we don't get to them in time, they're not, they're not going to get

1216
01:04:16,900 --> 01:04:17,800
dropped.

1217
01:04:18,000 --> 01:04:20,700
There are certain messages in Windows that do get dropped.

1218
01:04:22,100 --> 01:04:26,500
And so, for example, a WM paint message, windows will drop

1219
01:04:26,700 --> 01:04:28,200
S WM paint message.

1220
01:04:28,200 --> 01:04:31,100
If it's there's already WM paint message pending I believe.

1221
01:04:32,800 --> 01:04:36,100
I don't really know if it merges them or exactly what it does but you

1222
01:04:36,100 --> 01:04:38,400
won't get them all, they won't just keep piling up.

1223
01:04:39,300 --> 01:04:43,800
So there's things like that, that can happen, but those that's good.

1224
01:04:43,800 --> 01:04:45,000
Like it from our perspective.

1225
01:04:45,000 --> 01:04:48,000
We wouldn't have wanted tons of paint messages, doesn't give us any

1226
01:04:48,000 --> 01:04:48,700
information.

1227
01:04:50,200 --> 01:04:54,400
So to the best of my knowledge, I can't think of a reason, but maybe

1228
01:04:54,400 --> 01:04:55,600
someone on the thread can

1229
01:04:58,300 --> 01:04:58,700
so,

1230
01:05:07,900 --> 01:05:11,400
Gaston 5 do you use Windows GDI outside of the educational usage?

1231
01:05:11,400 --> 01:05:12,500
You have been showing?

1232
01:05:13,600 --> 01:05:17,200
No, I don't really I mean there have been times in the past where I

1233
01:05:17,200 --> 01:05:25,900
have but as far as in a game I don't and you can kind of see that now

1234
01:05:25,900 --> 01:05:28,500
like we've got the two past, we've got the software renderer in the

1235
01:05:28,500 --> 01:05:28,900
hardware.

1236
01:05:28,900 --> 01:05:32,700
Renderer you can sort of see now that we don't really ever used UTI

1237
01:05:32,700 --> 01:05:35,700
anymore, the hardware render path always uses it.

1238
01:05:35,700 --> 01:05:36,900
And even if we use software,

1239
01:05:37,000 --> 01:05:40,700
Rendering, we can blind through the the opengl path.

1240
01:05:41,000 --> 01:05:44,900
So pretty much the only thing we ever use GDI for is to create the

1241
01:05:44,900 --> 01:05:47,500
opengl context and then everything goes through opengl.

1242
01:05:48,800 --> 01:05:52,300
And that same thing is true for pretty much anything you do on Windows

1243
01:05:52,300 --> 01:05:52,900
nowadays.

1244
01:05:52,900 --> 01:05:55,800
If you're talking about performance-oriented Graphics, you really just

1245
01:05:55,800 --> 01:05:59,800
don't use GDI, you use GDI, just long enough to get DirectX on.

1246
01:06:00,000 --> 01:06:03,000
Been running or opengl up and running, but you never actually care

1247
01:06:03,200 --> 01:06:08,000
about GDI per se or GI Plus or any of the other nonsense Graphics

1248
01:06:08,000 --> 01:06:08,400
apis.

1249
01:06:08,400 --> 01:06:12,300
That Microsoft has been proliferating lately, direct2d direct font

1250
01:06:12,300 --> 01:06:14,900
text or Draw, I don't even know what they called.

1251
01:06:15,500 --> 01:06:18,900
The other ones they have direct font something there's direct, I don't

1252
01:06:18,900 --> 01:06:19,200
even know.

1253
01:06:19,200 --> 01:06:22,500
They've got weird, grabs libraries, the only thing you ever want to do

1254
01:06:22,500 --> 01:06:25,100
is get a handle, the graphics card and go that's what you actually

1255
01:06:25,100 --> 01:06:25,800
want.

1256
01:06:25,900 --> 01:06:29,600
And that's what opengl does and DirectX does and now Vulcan and mantle

1257
01:06:29,600 --> 01:06:29,800
and those

1258
01:06:30,000 --> 01:06:30,600
Things do.

1259
01:06:31,000 --> 01:06:34,100
So you pretty much are going to talk to those apis if you care about

1260
01:06:34,100 --> 01:06:40,100
performance Graphics because there's really no other sort of logical

1261
01:06:40,100 --> 01:06:40,700
path.

1262
01:06:56,300 --> 01:06:59,100
So, any more Q colons.

1263
01:07:26,000 --> 01:07:29,000
If you can promote for a coder, we always do at the end of the stream.

1264
01:07:29,000 --> 01:07:29,700
I always do.

1265
01:07:31,000 --> 01:07:32,400
Sounds like, you know, how to play drums.

1266
01:07:32,600 --> 01:07:34,100
No, I do not know how to play drums.

1267
01:07:38,600 --> 01:07:40,600
Sonic Ron what do you think of Vulcan what price are?

1268
01:07:40,600 --> 01:07:44,600
Usually, I don't like it but I don't really like you 312 either.

1269
01:07:44,600 --> 01:07:45,000
So

1270
01:07:46,500 --> 01:07:49,200
I don't know which I didn't mean API.

1271
01:07:49,200 --> 01:07:54,400
Quality has almost nothing to do with whether the API takes over in in

1272
01:07:54,400 --> 01:07:57,100
these spheres, really, if that makes sense.

1273
01:07:58,700 --> 01:08:00,500
So like

1274
01:08:02,300 --> 01:08:06,700
I mean, just just look at the state of apis in general, you know, has

1275
01:08:06,700 --> 01:08:10,100
it ever really been the case that if this API was really good?

1276
01:08:10,100 --> 01:08:12,200
That's the one that prevailed versus these other a pads.

1277
01:08:12,200 --> 01:08:12,700
It's not really.

1278
01:08:12,700 --> 01:08:16,000
It tends to be more about Market forces and who's pushing one over the

1279
01:08:16,000 --> 01:08:19,600
other and which one to like a does a platform better decide to push

1280
01:08:19,600 --> 01:08:20,500
for some reason?

1281
01:08:22,300 --> 01:08:26,500
You know, even if you just look at opengl and direct3d, like why are

1282
01:08:26,500 --> 01:08:30,500
those that I was like I'm not using opengl or you know, direct3d.

1283
01:08:30,500 --> 01:08:31,600
Because I think there

1284
01:08:32,000 --> 01:08:32,500
Awesome.

1285
01:08:32,600 --> 01:08:35,100
I'm using them because of the only two ways to talk to the graphics

1286
01:08:35,100 --> 01:08:37,100
Hardware on Windows, right?

1287
01:08:39,100 --> 01:08:43,200
It's not like there was there's these these plethora of API, right?

1288
01:08:43,200 --> 01:08:46,600
And so so who knows so we'll Vulcan replace the 3D.

1289
01:08:47,100 --> 01:08:48,700
Will it replace opengl?

1290
01:08:48,899 --> 01:08:49,500
Who knows?

1291
01:08:49,500 --> 01:08:52,100
It might it might not it large.

1292
01:08:52,100 --> 01:08:54,600
I think it largely depends on things that have absolutely nothing to

1293
01:08:54,600 --> 01:08:54,899
do with.

1294
01:08:54,899 --> 01:08:58,600
Whether it's good it has to do with what vendors push and what vendors

1295
01:08:58,600 --> 01:08:59,800
support and what windows.

1296
01:09:00,000 --> 01:09:01,300
Microsoft decides to do.

1297
01:09:02,200 --> 01:09:08,700
I think that's most of it Microsoft to a certain degree recently in my

1298
01:09:10,600 --> 01:09:14,100
in my situation seems to be losing its appetite for trying to lock

1299
01:09:14,100 --> 01:09:17,800
people into the windows platform per se and they seem to be caring

1300
01:09:17,800 --> 01:09:20,100
more about locking people into things.

1301
01:09:20,100 --> 01:09:22,700
They can maybe make more money from like Windows store or things like

1302
01:09:22,700 --> 01:09:23,200
that.

1303
01:09:23,500 --> 01:09:27,300
So I don't know how much they care about stuff like d3d before locking

1304
01:09:27,300 --> 01:09:29,800
people into their apis, Microsoft considered.

1305
01:09:30,000 --> 01:09:31,300
To be a huge strategic advantage.

1306
01:09:31,300 --> 01:09:33,800
And they really, really, really wanted that to be the case.

1307
01:09:33,800 --> 01:09:39,500
And I don't know if that's really so much of their game plan anymore.

1308
01:09:39,500 --> 01:09:42,100
You know, you see them doing things like allowing stuff to run on

1309
01:09:42,100 --> 01:09:46,899
Linux and porting to other things and caring more about their software

1310
01:09:46,899 --> 01:09:50,800
making money in the general case and less about Windows as this court

1311
01:09:50,800 --> 01:09:51,100
thing.

1312
01:09:51,100 --> 01:09:57,600
And so I think that makes it hard to predict what they're going to do

1313
01:09:57,600 --> 01:09:59,700
the Microsoft of five years ago would.

1314
01:10:00,000 --> 01:10:04,900
Of let D3, dude, I never never in a million years, they would have

1315
01:10:04,900 --> 01:10:08,300
specifically killed Vulcan, if they had to directly rather than Let

1316
01:10:08,300 --> 01:10:13,000
d3d Die, the Microsoft that today, they might have a different agenda.

1317
01:10:16,900 --> 01:10:20,400
Selection buffer versus Ray picking versus color picking for Mouse

1318
01:10:20,400 --> 01:10:20,900
picking.

1319
01:10:21,900 --> 01:10:26,100
I usually prefer re picking personally and that's just because I feel

1320
01:10:26,100 --> 01:10:30,400
like doing an entire another render pass is kind of expensive.

1321
01:10:34,200 --> 01:10:36,800
So it's just a kid for detecting long presses on keyboards, but I put

1322
01:10:36,800 --> 01:10:38,800
a timestamp in the input struct.

1323
01:10:39,900 --> 01:10:40,400
Sure.

1324
01:10:40,800 --> 01:10:42,900
I mean, that's a perfectly reasonable way to do it.

1325
01:10:43,900 --> 01:10:46,800
Basically what happens is, you know, when the key first goes down, you

1326
01:10:46,800 --> 01:10:49,800
start a timer and you increment it as you go and then you know how

1327
01:10:49,800 --> 01:10:51,400
long the keys been down, right?

1328
01:10:55,900 --> 01:10:56,500
What's next feature?

1329
01:10:56,500 --> 01:10:57,100
We're going to work on.

1330
01:10:57,100 --> 01:10:59,400
I think we're going to try and finish the debug code next week.

1331
01:11:00,200 --> 01:11:01,800
Debug diagramming and stuff like that.

1332
01:11:06,800 --> 01:11:09,700
Do you think all the modern see those denominators like C++ 11 C plus

1333
01:11:09,700 --> 01:11:14,500
14 6417 cos x yr, an internal joke to obscure the mess.

1334
01:11:14,500 --> 01:11:15,500
The language is in

1335
01:11:23,700 --> 01:11:25,400
well, I guess what I would say is,

1336
01:11:27,200 --> 01:11:30,100
I feel like it kind of underscores the fact that they don't even

1337
01:11:30,100 --> 01:11:34,300
understand the original joke in the first place, which is odd, because

1338
01:11:34,300 --> 01:11:40,100
even the original didn't also understand the joke, because, like C++,

1339
01:11:40,100 --> 01:11:47,200
right is a no op, if you say C++ it, increments the value of C

1340
01:11:47,200 --> 01:11:49,800
somewhere else but it returns, you get back.

1341
01:11:50,500 --> 01:11:51,100
See.

1342
01:11:52,300 --> 01:11:55,600
It would be plus plus, see if you made something better if we were

1343
01:11:55,600 --> 01:11:56,400
getting better.

1344
01:11:56,500 --> 01:11:59,800
But C++ means somebody else made something better over.

1345
01:12:00,000 --> 01:12:02,300
In main memory somewhere that you're not going to actually get the

1346
01:12:02,300 --> 01:12:03,600
results of in this expression.

1347
01:12:03,900 --> 01:12:08,400
And in this expression, you're left with just see, which is kind of

1348
01:12:08,500 --> 01:12:11,500
hilariously true because basically, that's what C++ is, it's like,

1349
01:12:11,500 --> 01:12:15,100
well, C is in there and you still have that and everything else was

1350
01:12:15,100 --> 01:12:15,700
useless, right?

1351
01:12:15,700 --> 01:12:16,400
So C plus plus

1352
01:12:17,800 --> 01:12:20,500
Well stated I guess they picked the name, right?

1353
01:12:21,100 --> 01:12:26,700
But then CBS 11, that's not a legal see statement anymore, so they

1354
01:12:26,700 --> 01:12:28,300
didn't even get the original joke.

1355
01:12:28,300 --> 01:12:32,400
Like it would have been C plus equals 11 or something, right?

1356
01:12:34,600 --> 01:12:38,200
Or C plus 11 in parentheses it would like they didn't even they

1357
01:12:38,200 --> 01:12:44,600
weren't even able to be consistent with their own joke which I guess

1358
01:12:44,600 --> 01:12:47,200
kind of just sums up the whole thing.

1359
01:12:48,500 --> 01:12:48,700
Kira.

1360
01:12:48,700 --> 01:12:49,000
Caleb.

1361
01:12:49,000 --> 01:12:51,800
Is it worth selling my soul and learning JS python for money?

1362
01:12:55,700 --> 01:12:58,900
I mean, I don't know, right pause.

1363
01:12:59,000 --> 01:13:01,200
Let's let's quantify selling your soul.

1364
01:13:02,900 --> 01:13:05,800
Let's say that whatever you're going to do with JS python is not

1365
01:13:05,800 --> 01:13:07,400
particularly bad for the world.

1366
01:13:07,500 --> 01:13:10,200
Let's say it's not an advertising company, it's actually a company

1367
01:13:10,200 --> 01:13:13,600
that does something a real service that maybe help Society in some

1368
01:13:13,600 --> 01:13:13,800
way.

1369
01:13:13,800 --> 01:13:19,300
Even if it's only commercial, Hey, You Gotta Eat, Right?

1370
01:13:19,400 --> 01:13:21,400
I mean, learn JS Python and make some money.

1371
01:13:21,400 --> 01:13:22,700
That's totally reasonable thing to do.

1372
01:13:25,100 --> 01:13:28,000
If you actually are talking about selling yourself, I mean like I'm

1373
01:13:28,000 --> 01:13:33,600
going to go work for a company whose primary job is to like mess with

1374
01:13:33,600 --> 01:13:36,400
people's lives and show crappy ads or something on a service.

1375
01:13:36,400 --> 01:13:39,500
Maybe don't do that, right.

1376
01:13:39,500 --> 01:13:44,000
Because we all have a choice about how we affect the world and it's

1377
01:13:44,000 --> 01:13:45,200
what we're willing to do.

1378
01:13:45,200 --> 01:13:47,600
And what we're not willing to do.

1379
01:13:47,600 --> 01:13:52,200
And I feel like programmers to a large extent, don't think of

1380
01:13:52,200 --> 01:13:55,100
themselves as having to make ethical decisions, but they absolutely

1381
01:13:55,100 --> 01:14:00,100
So what we do and I feel like before you ever take a job, I don't care

1382
01:14:00,100 --> 01:14:02,100
what kind it is, whether your program or anything else, you should

1383
01:14:02,100 --> 01:14:04,300
always think about do.

1384
01:14:04,300 --> 01:14:06,700
I think this is actually making Society better place or is this

1385
01:14:06,700 --> 01:14:09,000
largely something that's taking advantage of people and siphoning

1386
01:14:09,000 --> 01:14:12,100
money away for more important things that could be happening, right?

1387
01:14:13,400 --> 01:14:18,000
So I'd say, I don't know, the answer your question, the answer maybe.

1388
01:14:19,500 --> 01:14:20,400
Yeah you should do it.

1389
01:14:20,400 --> 01:14:24,300
You should take a job for the money and just because it's you know,

1390
01:14:24,300 --> 01:14:24,700
maybe

1391
01:14:25,000 --> 01:14:27,200
Anything that you don't particularly be think, particularly

1392
01:14:27,200 --> 01:14:27,900
interesting.

1393
01:14:29,700 --> 01:14:33,400
You gotta you gotta eat if it's actually selling your soul, like in

1394
01:14:33,400 --> 01:14:36,600
the real definition, like I'm like, you know, I'm going to go work on

1395
01:14:37,000 --> 01:14:40,600
for like palantir or somebody like no, don't do that.

1396
01:14:41,400 --> 01:14:43,700
Like no programmer should ever go to work for that company.

1397
01:14:44,000 --> 01:14:45,000
It's just wrong.

1398
01:14:48,000 --> 01:14:48,700
Let's see.

1399
01:14:48,700 --> 01:14:51,400
Any thoughts on sdl to not?

1400
01:14:51,400 --> 01:14:52,200
I have not used it.

1401
01:14:52,200 --> 01:14:54,400
Sorry, I don't have a lot of thoughts on it.

1402
01:14:56,300 --> 01:14:58,500
What technique you're going to use for pathfinding?

1403
01:14:58,900 --> 01:14:59,100
I don't know.

1404
01:14:59,100 --> 01:14:59,800
Maybe rer

1405
01:15:00,000 --> 01:15:02,200
Use a not sure we'll see when we get there.

1406
01:15:03,500 --> 01:15:05,900
LT Demi and been doing a lot of Jays.

1407
01:15:05,900 --> 01:15:07,200
What do you think I should do next?

1408
01:15:07,200 --> 01:15:08,700
Kind of bored with Jas

1409
01:15:13,400 --> 01:15:17,000
You know, I feel like see is a good thing to do to feel like doing

1410
01:15:17,000 --> 01:15:19,200
some other programming in c is good thing if you're bored with Jas

1411
01:15:19,200 --> 01:15:21,700
because it helps you get away from the whole like everything is

1412
01:15:21,700 --> 01:15:25,500
virtual and sort of amorphous and weird in the way the JS is.

1413
01:15:25,500 --> 01:15:26,400
It's more like concrete.

1414
01:15:26,400 --> 01:15:28,700
Like, here's memory and I'm actually like messing with it.

1415
01:15:28,900 --> 01:15:29,700
It's kind of nice.

1416
01:15:30,500 --> 01:15:30,900
So,

1417
01:15:36,300 --> 01:15:38,900
The bus Vulcan is extremely low level.

1418
01:15:38,900 --> 01:15:41,500
That was requested by various game engine and harbor developers.

1419
01:15:41,700 --> 01:15:44,300
There's probably a huge market for Deaf friendly API to sit on top of

1420
01:15:44,300 --> 01:15:46,300
Vulcan to Shield us from those gory details.

1421
01:15:46,300 --> 01:15:47,700
Don't think so question mark.

1422
01:15:50,600 --> 01:15:52,600
So here's what I'd say about that.

1423
01:15:54,800 --> 01:15:58,500
First of all, whether something is low level or not has nothing to do

1424
01:15:58,500 --> 01:16:00,600
with whether it's error-prone, right?

1425
01:16:02,000 --> 01:16:05,500
Every system has complexity and it

1426
01:16:06,000 --> 01:16:07,800
And some Epi is which are very high.

1427
01:16:07,800 --> 01:16:10,500
Level are still very complicated, right?

1428
01:16:11,400 --> 01:16:12,000
You know,

1429
01:16:13,900 --> 01:16:17,100
You could take even something like you know Mi sound system or f ma

1430
01:16:17,100 --> 01:16:19,000
just, you know, just a sound playing API, right?

1431
01:16:19,000 --> 01:16:24,400
And that API could be incredibly complicated complexity has nothing to

1432
01:16:24,400 --> 01:16:28,400
do with whether you wrote the API properly to eliminate bugs that

1433
01:16:28,400 --> 01:16:30,300
didn't need to happen, right?

1434
01:16:30,300 --> 01:16:34,000
So that's the first thing.

1435
01:16:34,000 --> 01:16:39,600
The second thing is, I actually don't think Vulcan is low level.

1436
01:16:39,600 --> 01:16:41,800
I don't think Vulcan is low level at all.

1437
01:16:41,800 --> 01:16:43,600
And that's one of my biggest

1438
01:16:43,900 --> 01:16:44,700
Problems with it.

1439
01:16:45,100 --> 01:16:47,500
Like I said, I don't really want to do this rant until I've had a

1440
01:16:47,500 --> 01:16:49,500
chance to actually go through it and so I can give them more specific

1441
01:16:49,500 --> 01:16:51,900
thing but I don't think Vulcans the level at all.

1442
01:16:52,100 --> 01:16:54,600
I don't think I don't between Vulcan and opengl.

1443
01:16:54,600 --> 01:16:58,800
I don't think either is more low-level what Vulcan actually is, is

1444
01:16:58,800 --> 01:17:04,800
it's just a high level API that happens to map closely to the very

1445
01:17:04,800 --> 01:17:10,200
instantaneous right now, state of a certain intersection of GPU parts

1446
01:17:11,600 --> 01:17:15,400
But in five years, it will be no more low level than opengl.

1447
01:17:16,700 --> 01:17:19,400
And the driver will be doing all kinds of crazy stuff behind your

1448
01:17:19,400 --> 01:17:19,700
back.

1449
01:17:19,700 --> 01:17:22,400
Just like I'm Joe has when opengl was created.

1450
01:17:22,500 --> 01:17:28,900
It was incredibly low level AGL vertex, call compiled to an out to a

1451
01:17:28,900 --> 01:17:30,800
port on the CPU.

1452
01:17:31,000 --> 01:17:35,200
It was far more low level than Vulcan ever will be.

1453
01:17:35,200 --> 01:17:35,900
Or is

1454
01:17:37,200 --> 01:17:40,100
so the degree to which you can say something as low level has to do

1455
01:17:40,100 --> 01:17:44,700
with what the guarantees are of, what that API will actually do and

1456
01:17:44,900 --> 01:17:45,800
Vulcan has none.

1457
01:17:45,900 --> 01:17:48,400
There are zero guarantees of what the API will do.

1458
01:17:48,700 --> 01:17:49,800
It is not low level.

1459
01:17:49,800 --> 01:17:52,900
It does not write directly to the card does, not compile directly to

1460
01:17:52,900 --> 01:17:54,100
any known code.

1461
01:17:54,800 --> 01:17:58,700
It is literally as high level as opengl or direct3d is Right Now.

1462
01:17:58,700 --> 01:17:59,400
Full stop.

1463
01:18:00,300 --> 01:18:03,800
And so what people actually mean when they say it's low level is they

1464
01:18:03,800 --> 01:18:08,300
mean it happens to be closer, cloak more closely, approximate the

1465
01:18:08,300 --> 01:18:11,500
series of steps a bunch of driver writers who were willing to sort of

1466
01:18:11,500 --> 01:18:13,700
tell each other a little bit about what their drivers did.

1467
01:18:13,900 --> 01:18:17,000
Sort of came up with as a common set of steps that might be happening

1468
01:18:17,000 --> 01:18:19,400
right now for our current batch of cards.

1469
01:18:20,300 --> 01:18:21,900
That does not mean low level

1470
01:18:23,600 --> 01:18:27,200
An actual low level API for graphics cards would be one where there

1471
01:18:27,200 --> 01:18:28,400
were almost no API calls.

1472
01:18:28,700 --> 01:18:31,200
It would just be like, here is a way to map memory and you just right

1473
01:18:31,200 --> 01:18:33,000
into the memory, right?

1474
01:18:33,100 --> 01:18:35,800
And you're in charge of building the command buffer is, you're in

1475
01:18:35,800 --> 01:18:37,200
charge of everything, right?

1476
01:18:38,100 --> 01:18:41,700
And that API would be awesome because that would have been an actual

1477
01:18:41,700 --> 01:18:44,700
spec that then Hardware vendors would have had to make their Hardware

1478
01:18:44,700 --> 01:18:45,700
comply with

1479
01:18:47,000 --> 01:18:51,200
And that is not what Vulcan is nor is it what Vulcan will ever be

1480
01:18:51,600 --> 01:18:52,000
right?

1481
01:18:54,500 --> 01:18:59,900
So yeah, it's a disappointment because I thought that's what Vulcan

1482
01:18:59,900 --> 01:19:00,400
was going to be.

1483
01:19:00,400 --> 01:19:00,900
I thought Vulcans.

1484
01:19:00,900 --> 01:19:04,700
Going to be an agreed-upon spec for basically getting rid of the API.

1485
01:19:05,600 --> 01:19:08,300
And instead, what it is is they just multiplied the size of the API by

1486
01:19:08,300 --> 01:19:09,000
like 1,000.

1487
01:19:09,200 --> 01:19:14,900
So now there's like, you know, hundreds and hundreds of API calls and

1488
01:19:17,100 --> 01:19:21,400
Most of them probably won't map to anything that Hardware does in 5

1489
01:19:21,400 --> 01:19:22,200
years or 10 years.

1490
01:19:23,300 --> 01:19:23,800
Right?

1491
01:19:23,900 --> 01:19:25,400
And it's just open gel all over again.

1492
01:19:29,600 --> 01:19:30,300
Cast of five.

1493
01:19:30,300 --> 01:19:32,400
How much do you follow the latest Technologies?

1494
01:19:32,400 --> 01:19:34,800
Do you think it is a waste of time to learn the latest Graphics API

1495
01:19:34,800 --> 01:19:35,900
for any development?

1496
01:19:38,200 --> 01:19:39,000
Yeah, probably.

1497
01:19:39,000 --> 01:19:41,000
I mean, it depends on the circumstance, right?

1498
01:19:41,000 --> 01:19:44,400
Like what I would say is that depending on what you're trying to do

1499
01:19:44,400 --> 01:19:49,600
with your indie game, I don't actually know what might be the the best

1500
01:19:49,600 --> 01:19:53,100
approach if you're trying to distinguish Yourself by being

1501
01:19:53,100 --> 01:19:54,000
graphically.

1502
01:19:54,200 --> 01:19:58,200
You know, by doing something special graphically, then it might make a

1503
01:19:58,200 --> 01:19:59,200
lot of sense to

1504
01:19:59,500 --> 01:20:02,300
Spend time following the latest Technologies and Graphics because,

1505
01:20:02,400 --> 01:20:04,300
well, how are you going to distinguish yourself graphically?

1506
01:20:04,300 --> 01:20:06,900
If you're not doing something that's, that's pretty fancy, right?

1507
01:20:08,000 --> 01:20:11,000
But if on the other hand, your bid calling card is your art style and

1508
01:20:11,000 --> 01:20:13,600
that art styles more about what the artists are doing and not about

1509
01:20:13,600 --> 01:20:16,400
what your technology allows or if you're any games.

1510
01:20:16,400 --> 01:20:19,700
More about some specific gameplay thing that you're looking at, then

1511
01:20:19,700 --> 01:20:22,200
how much does being a place technology really affect that, you know,

1512
01:20:22,200 --> 01:20:23,400
maybe it doesn't right.

1513
01:20:25,200 --> 01:20:28,400
And that's similar across like that's across all things, right?

1514
01:20:28,400 --> 01:20:29,200
Like the choice.

1515
01:20:29,300 --> 01:20:32,100
People often ask like, why don't I just use like Unity to make a game

1516
01:20:32,100 --> 01:20:33,900
or while I just do this or bars do that?

1517
01:20:34,300 --> 01:20:36,900
And the answer is that like, all decisions that you might make in game

1518
01:20:36,900 --> 01:20:39,400
development, have, you know, pros and cons.

1519
01:20:39,800 --> 01:20:44,000
And so, if you are happening to make a game that, that maybe Maps very

1520
01:20:44,000 --> 01:20:47,000
well to an existing engine, then you should use that engine, right?

1521
01:20:49,200 --> 01:20:52,300
The point of being a game developer and remaining educated on these

1522
01:20:52,300 --> 01:20:56,900
things and being good at your job, has a lot more to do with knowing

1523
01:20:57,300 --> 01:20:59,200
what you should do, as

1524
01:20:59,300 --> 01:20:59,900
As opposed to.

1525
01:21:00,000 --> 01:21:02,400
How to do it obviously knowing how to do it is important.

1526
01:21:02,400 --> 01:21:05,600
Once you know that it's something you want to do but being a capable

1527
01:21:05,600 --> 01:21:09,400
developer has to do with making those good decisions if you're only

1528
01:21:09,400 --> 01:21:13,500
ability as a developer is to have to use Unity or you're only ability

1529
01:21:13,500 --> 01:21:17,000
to develop our is to have to use opengl and you can't do anything

1530
01:21:17,000 --> 01:21:17,200
else.

1531
01:21:17,200 --> 01:21:20,100
You don't even know whether you should know to do anything else.

1532
01:21:20,400 --> 01:21:21,500
That's very limiting.

1533
01:21:21,600 --> 01:21:23,900
It means that you will not make good development assistance by

1534
01:21:23,900 --> 01:21:27,700
definition because even if you were going to definitely use an engine,

1535
01:21:27,800 --> 01:21:29,300
maybe the Unreal Engine was better.

1536
01:21:30,000 --> 01:21:30,400
Right?

1537
01:21:30,400 --> 01:21:32,500
Maybe that would've been a much better choice for this circumstance or

1538
01:21:32,500 --> 01:21:33,400
something, right?

1539
01:21:34,200 --> 01:21:39,000
Maybe Amazon's new engine, lumber yard or Timber Mill or sawdust, or

1540
01:21:39,000 --> 01:21:39,700
whatever they call it.

1541
01:21:39,700 --> 01:21:40,400
I have no idea.

1542
01:21:41,300 --> 01:21:43,400
Maybe that would have been a better choice, right?

1543
01:21:43,600 --> 01:21:49,600
And so keeping up with new technologies, I would say learning a latest

1544
01:21:49,600 --> 01:21:53,400
Graphics API is probably not so important, knowing that there are

1545
01:21:53,400 --> 01:21:57,900
other graphics apis, and why you might need to look into them, that is

1546
01:21:57,900 --> 01:21:59,400
kind of important, right?

1547
01:21:59,600 --> 01:21:59,900
Because

1548
01:22:00,100 --> 01:22:05,700
Cause if you don't know about Vulcan or what it is, but it turns out

1549
01:22:05,700 --> 01:22:08,100
that using it for this game was going to be important.

1550
01:22:08,200 --> 01:22:11,800
You've made a mistake and you've let your team down as a programmer by

1551
01:22:11,800 --> 01:22:15,100
not being aware that there was some path.

1552
01:22:15,100 --> 01:22:16,200
You should have been pursuing.

1553
01:22:18,000 --> 01:22:20,500
And so, I think I said this before on the stream and I'll just, you

1554
01:22:20,500 --> 01:22:26,800
know, re-emphasize it here that is a very important in part of knowing

1555
01:22:26,800 --> 01:22:27,300
how to program.

1556
01:22:27,300 --> 01:22:30,000
It's one of the reasons I do handmade hero as well.

1557
01:22:30,000 --> 01:22:33,700
It's one of the big reasons for is that a lot of programmers.

1558
01:22:33,700 --> 01:22:37,000
Now, don't know how to do low-level code.

1559
01:22:37,300 --> 01:22:39,800
And if you don't know how to do low-level code, there's a bunch of

1560
01:22:39,800 --> 01:22:40,300
decisions.

1561
01:22:40,300 --> 01:22:43,800
You won't make well, even if you're using an engine, even if you're

1562
01:22:43,800 --> 01:22:45,500
not programming at the low level.

1563
01:22:46,300 --> 01:22:47,000
And so,

1564
01:22:47,200 --> 01:22:51,900
Having that knowledge base is really important and you're not really

1565
01:22:51,900 --> 01:22:55,700
doing a service to your team as if you're a core programmer and you

1566
01:22:55,700 --> 01:22:58,500
don't know how to make those kind of good decisions.

1567
01:22:58,800 --> 01:22:59,600
That's what I would say.

1568
01:22:59,900 --> 01:23:02,200
And so I feel like everyone who's going to be a serious programmer

1569
01:23:02,200 --> 01:23:06,600
needs to know all of this stuff and be able to make good decisions.

1570
01:23:08,900 --> 01:23:12,100
even if that decision is not doing the thing that you knew about,

1571
01:23:17,300 --> 01:23:18,300
let's see.

1572
01:23:26,800 --> 01:23:29,700
Her Domina, why should know programmer work for palantir?

1573
01:23:29,700 --> 01:23:34,400
Well pounder is basically a company which creates data mining tools

1574
01:23:34,400 --> 01:23:36,600
for like all the people you hate, right?

1575
01:23:36,600 --> 01:23:41,300
Like the the whole thing about like you know, how do we, how do we

1576
01:23:41,300 --> 01:23:43,700
write code that finds all the Muslims or whatever?

1577
01:23:43,700 --> 01:23:45,200
Right, that's palantir.

1578
01:23:45,400 --> 01:23:50,900
So like all the like evil stuff like the US government does, like it's

1579
01:23:50,900 --> 01:23:55,000
pretty much a company set up to do that and you know, they're not

1580
01:23:55,000 --> 01:23:56,500
proud, they'll sell their technology to

1581
01:23:56,600 --> 01:23:59,500
Other people as well, but that's pretty much what they do.

1582
01:24:00,400 --> 01:24:06,600
And you know, like I just I feel like you're making a very ethically

1583
01:24:06,600 --> 01:24:07,200
bad decision.

1584
01:24:07,200 --> 01:24:11,400
If you ever agree to work for a company like that, it's just it's not

1585
01:24:11,400 --> 01:24:12,200
right, you know.

1586
01:24:12,200 --> 01:24:15,000
It's like programmers, it's the Manhattan Project thing.

1587
01:24:15,000 --> 01:24:17,100
It's like you got to think through, you got to, you got to actually

1588
01:24:17,100 --> 01:24:19,500
consider like you know, just because you're a scientist, doing science

1589
01:24:19,500 --> 01:24:20,000
things.

1590
01:24:20,200 --> 01:24:24,900
You have to try to figure out how you're going to make sure that

1591
01:24:26,500 --> 01:24:30,800
the world's doesn't become a worse place because of the things that

1592
01:24:30,800 --> 01:24:32,000
you did, you know,

1593
01:24:35,000 --> 01:24:35,400
Guitar.

1594
01:24:35,400 --> 01:24:36,600
Maybe seven does.

1595
01:24:36,600 --> 01:24:39,200
John used more stable specific stuff than yours do?

1596
01:24:39,200 --> 01:24:42,700
Does John you mean in you mean when John is programming to use my

1597
01:24:42,700 --> 01:24:45,700
cheapest stuff, the answer is yes.

1598
01:24:46,300 --> 01:24:50,500
If that's what you're asking, John in general uses a bunch of C++

1599
01:24:50,500 --> 01:24:51,600
features that I don't use.

1600
01:24:52,100 --> 01:24:55,300
He uses virtual functions hughes's.

1601
01:24:56,200 --> 01:24:58,800
I don't think he uses private data very much.

1602
01:24:59,500 --> 01:25:03,400
Although other people on the team, do he uses like,

1603
01:25:05,000 --> 01:25:05,600
Lambda.

1604
01:25:05,600 --> 01:25:06,700
Sometimes, I think.

1605
01:25:08,100 --> 01:25:14,400
And once in a while, he'll use a template he's though, be he's very

1606
01:25:15,200 --> 01:25:22,300
light on the C++ even so, so he does use more than me but not that

1607
01:25:22,300 --> 01:25:22,800
much more.

1608
01:25:23,700 --> 01:25:26,300
He'll use a few more features but he even doesn't really use them very

1609
01:25:26,300 --> 01:25:26,700
often.

1610
01:25:27,900 --> 01:25:30,500
Probably one of the reasons he's making his own language is because he

1611
01:25:30,500 --> 01:25:35,600
doesn't like the features in C++ and like me, he would like more

1612
01:25:35,600 --> 01:25:37,500
features, but he would like them to work his way.

1613
01:25:37,500 --> 01:25:39,600
And so, that's what j i is, right.

1614
01:25:39,700 --> 01:25:43,400
He's like, I want the things that virtual function should have given

1615
01:25:43,400 --> 01:25:43,900
me and didn't.

1616
01:25:43,900 --> 01:25:47,500
So I'm going to go Implement what I think that should have been and,

1617
01:25:47,600 --> 01:25:50,000
you know, then he's going to have a language that actually is able to

1618
01:25:50,000 --> 01:25:52,500
do the things he was trying to do and see those pleasant couldn't, you

1619
01:25:52,500 --> 01:25:52,800
know.

1620
01:25:58,000 --> 01:26:00,100
What do you think about the new Snowdrop game engine?

1621
01:26:01,600 --> 01:26:02,600
I don't know anything about it.

1622
01:26:02,600 --> 01:26:06,100
I believe that's the one used on like the division, but I've never

1623
01:26:06,100 --> 01:26:06,700
seen the engine.

1624
01:26:06,700 --> 01:26:09,600
I mean, I seen the division, the division looks nice, but I mean, I

1625
01:26:09,600 --> 01:26:10,500
don't know.

1626
01:26:11,200 --> 01:26:15,100
You know, you can't really judge an engine by that computers are real

1627
01:26:15,100 --> 01:26:15,900
fast nowadays.

1628
01:26:15,900 --> 01:26:19,400
So, pretty much all the engines, look decent, you know, if the artists

1629
01:26:19,400 --> 01:26:19,900
were good

1630
01:26:24,800 --> 01:26:27,600
Kb3, do you plan on using Vulcan considering the permit services that

1631
01:26:27,600 --> 01:26:29,100
people have been claiming exist?

1632
01:26:29,300 --> 01:26:30,000
I don't know.

1633
01:26:30,800 --> 01:26:33,200
Obviously on Nvidia, you don't really need Vulcan for anything because

1634
01:26:33,200 --> 01:26:35,100
you can get very good performance on opengl.

1635
01:26:37,000 --> 01:26:41,200
But on AMD, there's no question because they're opengl drivers are

1636
01:26:41,200 --> 01:26:46,800
quite a bit worse and so on, if you want to be fast on AMD cards, then

1637
01:26:46,900 --> 01:26:48,100
I wouldn't be surprised.

1638
01:26:48,100 --> 01:26:54,100
If the only way to do that was what's by using Vulcan that said, you

1639
01:26:54,100 --> 01:26:54,400
know,

1640
01:26:54,600 --> 01:26:57,100
We're in in we're a small developer, right?

1641
01:26:57,100 --> 01:26:59,900
And if it comes down to, like, well, I could do this whole

1642
01:27:00,000 --> 01:27:03,100
Path just to make the game run faster on AMD cards.

1643
01:27:03,300 --> 01:27:05,400
Probably wouldn't do that right?

1644
01:27:05,700 --> 01:27:08,300
Like that's a bad decision compared to me going in improving the

1645
01:27:08,300 --> 01:27:10,100
interactive fiction Tech, right?

1646
01:27:12,200 --> 01:27:16,500
And since I think Vulcan is a giant pile, like I'm I have no vested

1647
01:27:16,500 --> 01:27:20,900
interest in supporting it so it's not getting me any, you know, it's

1648
01:27:20,900 --> 01:27:22,000
not going to be any real benefit.

1649
01:27:22,000 --> 01:27:25,300
They're so hard to say.

1650
01:27:37,900 --> 01:27:40,100
Bella rain, since you write everything from scratch.

1651
01:27:40,100 --> 01:27:43,300
Why not use a language like go because go is like super high level?

1652
01:27:46,000 --> 01:27:46,700
Right?

1653
01:27:49,000 --> 01:27:51,300
I don't really like Kai level languages that much.

1654
01:27:53,800 --> 01:27:54,700
It's not my jam.

1655
01:28:00,600 --> 01:28:01,700
I guess it's different from high level features.

1656
01:28:01,700 --> 01:28:04,000
I like high level features, I just don't like have other languages.

1657
01:28:04,600 --> 01:28:07,200
Sanchez 1337.

1658
01:28:07,200 --> 01:28:09,700
If any what games have you been playing recently and how did you like

1659
01:28:09,700 --> 01:28:10,000
them?

1660
01:28:14,200 --> 01:28:15,300
I haven't really played much.

1661
01:28:16,400 --> 01:28:18,800
I was on our SI break, and I didn't really think playing a lot of

1662
01:28:18,800 --> 01:28:19,900
games would be a good idea, right?

1663
01:28:19,900 --> 01:28:20,200
So,

1664
01:28:38,000 --> 01:28:40,200
I have noticed that there is no more send email in the hammer here.

1665
01:28:40,200 --> 01:28:41,600
Website used to reply to emails.

1666
01:28:41,600 --> 01:28:42,800
I usually do yes.

1667
01:28:42,900 --> 01:28:45,900
But I was just getting too many of them to answer, so I just made the

1668
01:28:45,900 --> 01:28:49,000
forums so that people could post on there and then other people can

1669
01:28:49,000 --> 01:28:52,000
usually answer the questions for them if they're just questions about

1670
01:28:52,000 --> 01:28:53,900
something that that other people know.

1671
01:28:56,500 --> 01:28:59,700
So I would say if you really have to email me, something go right

1672
01:28:59,700 --> 01:29:00,000
ahead.

1673
01:29:00,000 --> 01:29:02,500
But if it's actually just a question about the series, then the forums

1674
01:29:02,500 --> 01:29:04,900
much better place for it so that I can answer it in a public place

1675
01:29:04,900 --> 01:29:07,500
where other people can see it, or somebody who usually what ends up

1676
01:29:07,500 --> 01:29:10,400
having is Martin's Mosaic who answers the question because he

1677
01:29:10,400 --> 01:29:13,000
apparently knows the answer to literally every question and he's

1678
01:29:13,000 --> 01:29:13,700
always on the Forum.

1679
01:29:13,700 --> 01:29:15,300
So pretty much every time I see a question.

1680
01:29:15,300 --> 01:29:17,100
The forms Martin's has already answered it.

1681
01:29:17,300 --> 01:29:18,100
It's kind of crazy.

1682
01:29:19,200 --> 01:29:20,500
He should really be the one doing this.

1683
01:29:22,200 --> 01:29:23,300
Just turn over the stream to him.

1684
01:29:24,200 --> 01:29:26,600
Where do you see the game developer Community going in the next 5-10

1685
01:29:26,600 --> 01:29:27,100
years?

1686
01:29:27,300 --> 01:29:28,100
I've no idea.

1687
01:29:29,500 --> 01:29:30,600
The main difference is in the example.

1688
01:29:30,600 --> 01:29:33,100
See in the language or friend is developing in three sentences or

1689
01:29:33,100 --> 01:29:33,700
less.

1690
01:29:36,200 --> 01:29:40,300
I mean, you'd have to ask him anonymous 835.

1691
01:29:40,300 --> 01:29:44,000
Do you have experience with posix Linux system calls fork for example?

1692
01:29:44,200 --> 01:29:46,100
Yes, I have called Fork.

1693
01:29:46,800 --> 01:29:49,800
I need to create a small process scheduler, but when I create a fork

1694
01:29:49,800 --> 01:29:54,100
inside a forest cycle, it messes up, I need to create an amount of

1695
01:29:54,100 --> 01:29:57,900
processes then save them to a fight Philistines for executing one at a

1696
01:29:57,900 --> 01:29:58,300
time.

1697
01:30:02,800 --> 01:30:04,900
so, I mean,

1698
01:30:06,700 --> 01:30:08,000
I guess what I would say is,

1699
01:30:09,600 --> 01:30:15,900
I don't see why Fork would actually break if you called it inside a

1700
01:30:15,900 --> 01:30:16,600
for Loop.

1701
01:30:20,600 --> 01:30:21,600
It shouldn't.

1702
01:30:24,100 --> 01:30:26,200
Are you sure you're not doing something else wrong?

1703
01:30:27,000 --> 01:30:30,500
I mean that said, I don't know that I ever have myself called Fork

1704
01:30:30,500 --> 01:30:31,700
inside a for loop.

1705
01:30:31,700 --> 01:30:35,400
I don't do that much Linux programming, but basically what happens

1706
01:30:35,400 --> 01:30:38,400
when you call Fork, is you get a clone of your process with the memory

1707
01:30:38,400 --> 01:30:39,900
set to copy on write.

1708
01:30:40,600 --> 01:30:45,700
And one of the people who calls for gets back, one parameter and one

1709
01:30:45,700 --> 01:30:47,500
of the people calls for cats back, another one, right?

1710
01:30:47,500 --> 01:30:50,400
So you then you just check which one you are and break out of the for

1711
01:30:50,400 --> 01:30:50,900
Loop.

1712
01:30:51,900 --> 01:30:52,500
Right.

1713
01:30:54,700 --> 01:30:55,600
You break on the for Loop.

1714
01:30:55,600 --> 01:30:59,000
If you're the child process, you just say if if I'm the child process

1715
01:30:59,000 --> 01:31:02,200
break out the for Loop, like that should work, right?

1716
01:31:10,100 --> 01:31:12,700
If you con, would you want to be one of the first people to play

1717
01:31:12,700 --> 01:31:13,500
around with j?

1718
01:31:13,500 --> 01:31:15,500
Or would you wait till it gets more mature?

1719
01:31:15,900 --> 01:31:18,800
I I think it probably depends on when it gets released.

1720
01:31:18,800 --> 01:31:22,600
I probably won't have time when it's when it actually is released to

1721
01:31:22,600 --> 01:31:26,200
look at it as one of the first people, because I'll probably be right

1722
01:31:26,200 --> 01:31:28,900
in the middle of trying to finish 1935.

1723
01:31:30,300 --> 01:31:34,200
I mean, I guess, but if it happened to conclude, if he happens to

1724
01:31:34,200 --> 01:31:39,100
release it at a time, when I am more free and have some time to devote

1725
01:31:39,100 --> 01:31:40,600
to it, then then I might be.

1726
01:31:40,900 --> 01:31:43,900
So I don't think it will have much to do with my desire to check it

1727
01:31:43,900 --> 01:31:46,800
out or not, it'll have more to do with my schedule is the time because

1728
01:31:46,800 --> 01:31:48,600
in order to really check out a program language, you got to spend some

1729
01:31:48,600 --> 01:31:49,400
serious time with it.

1730
01:31:49,500 --> 01:31:51,900
Like you can't just go read through it and be like it looks good or

1731
01:31:51,900 --> 01:31:52,000
not.

1732
01:31:52,000 --> 01:31:55,000
It's like I'd have to actually spend some time because you know John

1733
01:31:55,000 --> 01:31:56,300
is making a bunch of decisions.

1734
01:31:56,300 --> 01:31:58,800
And in order to say whether those decisions were good or bad, you

1735
01:31:58,800 --> 01:31:59,800
can't just like look at them and go.

1736
01:32:00,000 --> 01:32:00,200
Cole.

1737
01:32:00,200 --> 01:32:01,200
I don't think I would have done it that way.

1738
01:32:01,200 --> 01:32:03,900
It's like well okay yeah but so what maybe they were still a bunch of

1739
01:32:03,900 --> 01:32:07,100
good decisions and maybe they add up to something really good and

1740
01:32:07,100 --> 01:32:09,400
maybe my way that I would have decided would have actually been

1741
01:32:09,400 --> 01:32:10,200
stupid, right?

1742
01:32:10,200 --> 01:32:13,200
That's the whole part point of that whole process of going through

1743
01:32:13,200 --> 01:32:14,200
designing something.

1744
01:32:14,500 --> 01:32:17,000
When you actually have to do it sometimes you come to very different

1745
01:32:17,000 --> 01:32:20,800
conclusions than what an armchair analysis would would entail.

1746
01:32:21,200 --> 01:32:24,200
And so I feel like in order to really get into a separate language

1747
01:32:24,200 --> 01:32:26,500
like jiu gotta sweat, sit down, spend some serious time for that.

1748
01:32:26,700 --> 01:32:29,800
And so whether or not I do that close close to when it

1749
01:32:29,900 --> 01:32:33,100
release is going to be almost entirely depend on my schedule, not on

1750
01:32:33,100 --> 01:32:34,000
whether I want to

1751
01:32:37,900 --> 01:32:40,400
Are you going to check out OBS Studio this weekend?

1752
01:32:41,400 --> 01:32:42,100
I've no idea.

1753
01:32:43,600 --> 01:32:44,500
Burger Kodak.

1754
01:32:44,500 --> 01:32:46,400
Do you work on another game project other than handmade?

1755
01:32:46,500 --> 01:32:50,400
Yes, obviously, I'm working on 1935 right now.

1756
01:32:54,200 --> 01:32:56,700
Fact, I guess we have a website.

1757
01:32:56,700 --> 01:32:59,800
Even you know what, Mom

1758
01:33:00,000 --> 01:33:04,300
1935.com with there's nothing on here at the moment but this is

1759
01:33:04,300 --> 01:33:08,200
actually the game that I'm working on at the moment at my actual job.

1760
01:33:10,200 --> 01:33:13,500
So yeah, that's what I work on during the day.

1761
01:33:21,400 --> 01:33:21,600
Hello.

1762
01:33:21,600 --> 01:33:24,900
Alan is Fork a good API or a bad API.

1763
01:33:32,900 --> 01:33:34,800
I don't know, really how to answer that question.

1764
01:33:35,600 --> 01:33:41,500
I guess what I would say about four is that if the goal of the API,

1765
01:33:42,000 --> 01:33:45,300
was to Fork the process, it's a good API.

1766
01:33:45,600 --> 01:33:50,800
If the goal is to have ways of creating more processes, probably not,

1767
01:33:50,800 --> 01:33:52,500
because it's really not

1768
01:33:54,800 --> 01:33:56,900
It's really not what you want to do.

1769
01:33:56,900 --> 01:34:01,100
Usually like, I don't usually need to clone the memory of the process

1770
01:34:01,100 --> 01:34:05,800
and it sort of creates a need for copy-on-write page handling.

1771
01:34:05,800 --> 01:34:10,900
That wouldn't have otherwise been there and it's very heavy weight for

1772
01:34:10,900 --> 01:34:11,800
certain circumstances.

1773
01:34:11,800 --> 01:34:14,700
So I think what I would say is it depends on what they were actually

1774
01:34:14,700 --> 01:34:15,700
trying to do with it.

1775
01:34:16,200 --> 01:34:18,800
I don't know what their goals were at the time that fork was designed

1776
01:34:18,800 --> 01:34:23,000
and so either it was a good or a bad API or I should say whether it

1777
01:34:23,000 --> 01:34:24,400
was whether it's bad or not kind of

1778
01:34:24,600 --> 01:34:27,100
And what the goal was I think and I don't know.

1779
01:34:40,300 --> 01:34:41,300
GDC is next week.

1780
01:34:41,300 --> 01:34:41,800
What?

1781
01:34:41,800 --> 01:34:45,500
Handmade here representation of GC, I will not be at GDC.

1782
01:34:56,400 --> 01:35:00,300
All right, I think that's enough cues.

1783
01:35:01,300 --> 01:35:03,800
I think that's enough cues for now.

1784
01:35:07,600 --> 01:35:08,600
By the way, Alan.

1785
01:35:11,200 --> 01:35:12,900
I will try to remember to send you that crash, dump.

1786
01:35:12,900 --> 01:35:17,600
I uploaded to Google last night and then I forgot to check this

1787
01:35:17,600 --> 01:35:21,000
morning to make sure it was done in and send it to you, but I got that

1788
01:35:21,000 --> 01:35:22,300
one gigabyte crash dump for you.

1789
01:35:25,300 --> 01:35:27,600
Which, by the way, I think it's pretty awesome that we've been using

1790
01:35:27,600 --> 01:35:28,000
for coders.

1791
01:35:28,000 --> 01:35:31,600
We've had literally one crash and no other problems before coder

1792
01:35:31,600 --> 01:35:32,800
pretty much this entire time.

1793
01:35:32,800 --> 01:35:36,000
So it's been doing pretty awesome for a program that's barely.

1794
01:35:36,000 --> 01:35:38,200
It hasn't even had a non out.

1795
01:35:38,200 --> 01:35:42,500
It's not even in beta yet and it's already doing pretty darn good.

1796
01:35:42,500 --> 01:35:42,900
So

1797
01:35:43,900 --> 01:35:46,400
Nice work, man, it's very nice work.

1798
01:35:48,100 --> 01:35:51,500
All right, let's go ahead and wind things down here.

1799
01:35:53,200 --> 01:35:54,600
Let's see.

1800
01:35:54,900 --> 01:35:55,800
Close.

1801
01:36:00,200 --> 01:36:01,800
You know, I probably shouldn't close that because I don't actually

1802
01:36:01,800 --> 01:36:03,900
know if I ever bothered to say the two texts but that's okay.

1803
01:36:05,000 --> 01:36:07,400
Because it was already an accurate to do list.

1804
01:36:07,500 --> 01:36:10,800
Anyway, thank you, everyone for joining me for another sort of

1805
01:36:10,800 --> 01:36:11,300
handmade here.

1806
01:36:11,300 --> 01:36:12,600
It's been a pleasure coding with you.

1807
01:36:12,600 --> 01:36:17,900
As always, if you would like to follow along with handmade here at

1808
01:36:17,900 --> 01:36:19,700
home, you can always go to handmade here at Oregon.

1809
01:36:19,700 --> 01:36:20,500
Pre-order the game.

1810
01:36:20,500 --> 01:36:24,200
It comes with a source code, so you can follow along and do your own

1811
01:36:24,200 --> 01:36:25,200
experiments and learning.

1812
01:36:26,400 --> 01:36:29,000
We also have a forum site where you can go to ask questions.

1813
01:36:29,000 --> 01:36:31,700
If you have questions about stuff, we've done, we have a patreon page,

1814
01:36:31,700 --> 01:36:34,700
you can go to if you want to support the video series and we have a

1815
01:36:34,900 --> 01:36:36,900
Repot that you can go to to check the schedule?

1816
01:36:38,000 --> 01:36:39,000
Everything you need.

1817
01:36:39,000 --> 01:36:42,400
Is there the editor that we use on stream is for coder.

1818
01:36:43,500 --> 01:36:44,600
You can search for it.

1819
01:36:44,600 --> 01:36:50,500
It's a project by someone who's actually on the chat, Alan Webster and

1820
01:36:50,500 --> 01:36:51,400
that's what we're using right now.

1821
01:36:51,400 --> 01:36:54,100
You can go to his for a coder page on patreon.

1822
01:36:54,100 --> 01:36:57,900
Like I just did type for coder into Google, it'll take you there and

1823
01:36:57,900 --> 01:37:02,600
if you pledge there's three different tiers you can pledge $1 a month

1824
01:37:02,600 --> 01:37:04,500
to it and you just get a copy of for a coder.

1825
01:37:04,500 --> 01:37:07,700
If you do five dollars a month and you get four quarters,

1826
01:37:07,900 --> 01:37:09,500
What's the customization API?

1827
01:37:09,500 --> 01:37:12,500
Dll stuff you can use to program it and see which is what I used to

1828
01:37:12,500 --> 01:37:14,300
create the one views on handmade hero.

1829
01:37:14,800 --> 01:37:17,900
And if you ten dollars a month you actually get my handmade hero, one

1830
01:37:17,900 --> 01:37:20,600
comes with it, so you can actually get our the customizations that we

1831
01:37:20,600 --> 01:37:22,200
use on the stream if those interest you.

1832
01:37:22,700 --> 01:37:23,900
So check that out.

1833
01:37:24,500 --> 01:37:28,400
And yeah, check out the Tweet but if you want to schedule for next

1834
01:37:28,400 --> 01:37:30,100
week, I think it'll probably be a pretty standard schedule.

1835
01:37:30,100 --> 01:37:32,800
Next week, don't anticipate anything to weird but you never know.

1836
01:37:32,900 --> 01:37:37,000
So check the Tweet but until then, I will see you guys Monday for

1837
01:37:37,000 --> 01:37:37,600
another round.

1838
01:37:37,800 --> 01:37:38,200
Programming.

1839
01:37:38,200 --> 01:37:40,600
I think we'll go ahead and finish the debug stuff next week, probably

1840
01:37:40,600 --> 01:37:43,300
because we kind of left that and we just got to go back there and dig

1841
01:37:43,300 --> 01:37:47,200
through it a little bit and get it into a nice usable shape.

1842
01:37:47,700 --> 01:37:51,100
So until then have fun programming this weekend and I will see you

1843
01:37:51,100 --> 01:37:52,300
guys on the internet.

1844
01:37:52,300 --> 01:37:52,900
Take it easy.

