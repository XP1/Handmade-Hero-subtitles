1
00:00:01,600 --> 00:00:03,600
Hello everyone, and welcome to handmade hero.

2
00:00:03,600 --> 00:00:06,400
The show we code a complete game live on stream.

3
00:00:08,300 --> 00:00:14,700
We have been implementing a more full 3d pipeline for the game, which

4
00:00:14,700 --> 00:00:16,800
allows easy to be handled by the back end.

5
00:00:16,800 --> 00:00:18,300
So we can use things like z-buffer.

6
00:00:18,300 --> 00:00:22,800
Previously, we handled everything like that at the head end and only

7
00:00:22,800 --> 00:00:26,700
fed the graphics card or our software, renderer perfectly sorted,

8
00:00:26,700 --> 00:00:30,200
things that were already ready to draw and it didn't have to do.

9
00:00:30,800 --> 00:00:31,800
Any work like that?

10
00:00:32,800 --> 00:00:35,900
But we've decided to go to Z buffer because I thought there were too

11
00:00:35,900 --> 00:00:37,200
many drawbacks with the other approach.

12
00:00:37,200 --> 00:00:39,100
And so that's what we're doing right now.

13
00:00:39,100 --> 00:00:43,500
We've done the work of moving the projection code over to open Jill's

14
00:00:43,500 --> 00:00:46,900
transfer matrices as a first step in making sure that that stuff works

15
00:00:46,900 --> 00:00:47,100
correctly.

16
00:00:47,100 --> 00:00:51,600
But we still have a little bit more work to do in terms of actually

17
00:00:51,600 --> 00:00:56,600
getting ourselves to the point where we are able to use that as an

18
00:00:56,600 --> 00:01:00,400
actual able to use that actual system.

19
00:01:00,400 --> 00:01:02,700
So, before we get

20
00:01:02,900 --> 00:01:07,300
Too far down that path of trying to debug and trying to get working a

21
00:01:07,300 --> 00:01:09,700
system that uses the z-buffer for doing our sorting.

22
00:01:10,800 --> 00:01:14,800
I decided last time on stream that what I wanted to do was have a way

23
00:01:14,800 --> 00:01:17,100
of rotating the camera around in three dimensions.

24
00:01:17,400 --> 00:01:19,600
Not because we actually need this in the game for any particular

25
00:01:19,600 --> 00:01:20,100
reason.

26
00:01:20,300 --> 00:01:23,900
But actually, just because what we do need to do is be able to for

27
00:01:23,900 --> 00:01:24,900
debugging purposes.

28
00:01:25,200 --> 00:01:28,100
See what things actually look like geometrically.

29
00:01:28,100 --> 00:01:30,400
When we're trying to figure out what we may have done wrong.

30
00:01:31,400 --> 00:01:34,500
When we're de bugging things because we're going to have bugs as we

31
00:01:34,500 --> 00:01:37,600
try to work in 3D and we need ways of inspecting.

32
00:01:37,600 --> 00:01:40,800
What's going on to give ourselves more information about what the bugs

33
00:01:40,800 --> 00:01:41,900
are, right?

34
00:01:45,900 --> 00:01:51,600
So what I wanted to do is I just wanted to go ahead and build some

35
00:01:51,600 --> 00:01:56,000
code that would allow us to rotate the camera around and be able to

36
00:01:56,000 --> 00:02:00,800
see the world geometry from different angles even though it's flat.

37
00:02:01,300 --> 00:02:05,300
Being able to see exactly how those flat pieces were lined up and how

38
00:02:05,300 --> 00:02:07,600
they were stacked on top of each other and stuff like that.

39
00:02:07,800 --> 00:02:10,900
Just to give us some greater Insight basically into what was going on.

40
00:02:12,100 --> 00:02:15,800
So that's what we're doing today is day 362.

41
00:02:15,800 --> 00:02:18,100
So you want to unpack day 361 source code.

42
00:02:18,100 --> 00:02:23,200
If you're trying to follow along at home, I'm going to go ahead and

43
00:02:23,200 --> 00:02:24,300
open up the project here.

44
00:02:24,800 --> 00:02:25,200
Oops.

45
00:02:27,100 --> 00:02:27,600
There we go.

46
00:02:29,200 --> 00:02:31,300
And I am going to.

47
00:02:35,100 --> 00:02:36,100
Show where we're at.

48
00:02:36,800 --> 00:02:37,600
You can see here.

49
00:02:37,600 --> 00:02:41,100
We are now running through open jails projection and everything is

50
00:02:41,100 --> 00:02:41,700
working just fine.

51
00:02:41,700 --> 00:02:45,300
Except for the fact that obviously, because we took sorting out of the

52
00:02:45,300 --> 00:02:49,100
mix, we no longer run the sort and so everything is just flashing like

53
00:02:49,100 --> 00:02:49,600
crazy.

54
00:02:49,700 --> 00:02:52,800
The reason it's flashing like crazy is because the order in which we

55
00:02:52,800 --> 00:02:55,400
send down entities changes every frame.

56
00:02:56,000 --> 00:02:59,900
And since without having enabled the z-buffer we end up.

57
00:03:00,000 --> 00:03:04,800
In a situation where we don't actually have any stable order, that

58
00:03:04,800 --> 00:03:05,500
these things are drawn it.

59
00:03:05,500 --> 00:03:09,200
So they're drawn in a random order and very specifically that is what

60
00:03:09,200 --> 00:03:12,600
we are actually going to be fixing by switching to Z buffer as well.

61
00:03:12,600 --> 00:03:12,800
Right?

62
00:03:12,800 --> 00:03:15,800
We've removed the sort but now we need to put the Z buffer in to do

63
00:03:15,800 --> 00:03:16,200
that.

64
00:03:16,300 --> 00:03:21,000
But again before we get to trying to make that work properly because

65
00:03:21,000 --> 00:03:23,400
that's going to require us sending down things.

66
00:03:23,400 --> 00:03:27,900
In a, particularly specific sent to constructing our Sprite cards,

67
00:03:27,900 --> 00:03:29,200
basically, in a very specific way.

68
00:03:29,200 --> 00:03:29,800
You'll see

69
00:03:30,200 --> 00:03:32,400
Is necessary to make sure that that works properly.

70
00:03:32,500 --> 00:03:36,300
Before we get into that business, I want the ability to view the world

71
00:03:36,300 --> 00:03:39,900
from multiple angles because I want to be able to debug it basically.

72
00:03:40,600 --> 00:03:44,900
And we probably want this code anyway because we may find, you know, I

73
00:03:44,900 --> 00:03:49,300
don't know but we may find that we want different angles for the game.

74
00:03:49,400 --> 00:03:54,000
You know we may we may want to run the game straight top down but we

75
00:03:54,000 --> 00:03:55,800
may want to run the game slightly tilted.

76
00:03:55,800 --> 00:03:57,700
You know, we have to see what looks better.

77
00:03:58,200 --> 00:03:59,800
So having the camera rotation code,

78
00:04:00,000 --> 00:04:02,800
There is probably just a good idea in general because it allows us to

79
00:04:02,800 --> 00:04:05,900
experiment with that, in terms of the look of the game as well, and we

80
00:04:05,900 --> 00:04:11,000
don't know upfront, which exact way is, is going to be our preferred

81
00:04:11,000 --> 00:04:11,200
way.

82
00:04:11,200 --> 00:04:15,400
So having that rotation ability, is kind of nice for that reason, as

83
00:04:15,400 --> 00:04:15,800
well.

84
00:04:16,399 --> 00:04:18,899
So, let's go ahead and switch up here.

85
00:04:21,399 --> 00:04:25,000
And and take a look at where we had started on this stuff now.

86
00:04:25,000 --> 00:04:27,400
Hopefully, you remember everything from last week because it took a

87
00:04:27,400 --> 00:04:30,200
long time to go over, so I can't really go over it again.

88
00:04:30,200 --> 00:04:32,400
So I'm just going to assume that you remember, all of the stuff that

89
00:04:32,400 --> 00:04:34,600
we did with these matrices here.

90
00:04:34,600 --> 00:04:36,700
And there was only one thing that I didn't really talk about with the

91
00:04:36,700 --> 00:04:37,300
matrices.

92
00:04:37,800 --> 00:04:40,300
I talked about how to multiply them, I talked about how to make a

93
00:04:40,300 --> 00:04:44,300
rotation Matrix and we made three of the rotation matrices for the

94
00:04:44,300 --> 00:04:48,100
Cardinal angles, and we talked about having to transpose matrices.

95
00:04:48,100 --> 00:04:49,900
So that they would be able to

96
00:04:50,100 --> 00:04:53,300
To pass through opengl properly.

97
00:04:53,300 --> 00:04:56,500
Because opengl by default takes non transpose matrices, unless you

98
00:04:56,500 --> 00:04:59,800
call the transferred versions of the call it when we get to shaders,

99
00:04:59,800 --> 00:05:02,400
will be able to will have a little bit more flexibility there as

100
00:05:02,400 --> 00:05:02,900
you'll see.

101
00:05:03,300 --> 00:05:04,200
But that's separate issue.

102
00:05:04,800 --> 00:05:05,300
Anyway.

103
00:05:05,600 --> 00:05:08,000
And then, of course, we have our projection Matrix construction and

104
00:05:08,000 --> 00:05:11,900
our projection Matrix right now is very simple, but it works, right?

105
00:05:11,900 --> 00:05:15,400
It does the exact same operation that we were doing, previously in the

106
00:05:15,400 --> 00:05:19,900
main game code for producing the coordinates,

107
00:05:20,000 --> 00:05:22,800
For the X Y coordinates, and we verified that by producing the same

108
00:05:22,800 --> 00:05:23,800
game screen basically.

109
00:05:25,600 --> 00:05:26,600
That we were getting before.

110
00:05:27,700 --> 00:05:31,500
So we pretty much know that we've got that under control.

111
00:05:31,500 --> 00:05:33,700
But now, let's take a look at these rotation matrices.

112
00:05:34,200 --> 00:05:36,700
Talk about what's supposed to happen here in order to get our camera

113
00:05:36,700 --> 00:05:40,300
doing what I suggested that I want to do and talk a little bit more

114
00:05:40,300 --> 00:05:41,600
about the other aspects here.

115
00:05:41,600 --> 00:05:45,200
Because we got a talk about the translation portion which again is not

116
00:05:45,200 --> 00:05:47,600
very complicated, but we just to mention it.

117
00:05:47,800 --> 00:05:51,800
And then also the idea of composing matrices together,

118
00:05:52,900 --> 00:05:59,500
all right, so first of all, let's just talk very, very briefly about

119
00:05:59,500 --> 00:05:59,800
what we

120
00:06:00,000 --> 00:06:02,000
To do and about translation, matrices.

121
00:06:02,300 --> 00:06:06,800
And then we'll talk about why Matrix concatenation works properly.

122
00:06:07,100 --> 00:06:10,600
So that you can kind of understand a little more specifically, why?

123
00:06:10,600 --> 00:06:11,500
That is the case.

124
00:06:14,000 --> 00:06:19,000
All right, so let's talk about Matrix.

125
00:06:21,200 --> 00:06:22,100
Multiplication.

126
00:06:29,100 --> 00:06:29,500
Okay.

127
00:06:30,000 --> 00:06:33,400
So you've seen me do it a couple times before just in terms of like

128
00:06:33,400 --> 00:06:36,000
sort of sketching it out or mentioning it but we've never really dived

129
00:06:36,000 --> 00:06:38,900
into detail and we've never really used it extensively in the code at

130
00:06:38,900 --> 00:06:43,300
all for any particular reason but we basically had a, you know, have

131
00:06:43,300 --> 00:06:46,000
had things where we talked about and I think I guess what I did is I

132
00:06:46,000 --> 00:06:51,600
think I said C equals a b, it's sort of, I think what I wrote the

133
00:06:51,600 --> 00:06:55,500
other day which is just to say that, you know I was just mentioning

134
00:06:55,500 --> 00:06:58,800
the fact that we have this idea that if

135
00:06:58,900 --> 00:07:03,900
We have all of these matrices if we have a and b, for example, we can

136
00:07:03,900 --> 00:07:07,800
use matrix multiplication, which is denoted by putting the two

137
00:07:07,900 --> 00:07:09,500
matrices together, symbolically.

138
00:07:09,500 --> 00:07:12,900
This is how it's written, much like scalar multiplication is written

139
00:07:12,900 --> 00:07:16,400
by putting the two variables next to each other in math, notation.

140
00:07:16,600 --> 00:07:21,300
Obviously, in computer, notation we put a star in between them so

141
00:07:21,300 --> 00:07:24,200
they're a little bit different there but still hopefully everyone

142
00:07:24,200 --> 00:07:27,200
understands math notation well enough to see where that comes from.

143
00:07:28,100 --> 00:07:28,700
So when we say,

144
00:07:28,900 --> 00:07:30,000
Sequels a b.

145
00:07:30,000 --> 00:07:34,700
What we're saying is that there is some way to produce a matrix C by

146
00:07:34,700 --> 00:07:36,700
multiplying a matrix a and Matrix B.

147
00:07:37,000 --> 00:07:41,400
And what we did last time on the stream is I showed how to produce the

148
00:07:41,400 --> 00:07:45,900
Matrix C from Matrix, A, and B and hopefully that was very clear but

149
00:07:45,900 --> 00:07:50,900
what might not be very clear from that is what it does or why you want

150
00:07:50,900 --> 00:07:52,000
to use it, right?

151
00:07:53,100 --> 00:07:58,000
Because I said that, what it does is it produces a combined transform,

152
00:07:58,500 --> 00:07:59,100
right?

153
00:08:00,400 --> 00:08:04,500
But I didn't really say how it was doing that or why it was doing that

154
00:08:04,500 --> 00:08:08,300
and it's relatively important not to treat things in programming, like

155
00:08:08,300 --> 00:08:10,000
black boxes that you don't understand.

156
00:08:10,000 --> 00:08:14,200
Because oftentimes, when you're trying to do intricate things or new

157
00:08:14,200 --> 00:08:17,700
things or develop new algorithms, it's crucial that you be able to

158
00:08:17,700 --> 00:08:20,400
understand how things are working at a fundamental level because

159
00:08:20,400 --> 00:08:22,500
otherwise you will miss the important.

160
00:08:22,700 --> 00:08:26,900
Trinity's and be unable to solve bugs and have all other sorts of

161
00:08:26,900 --> 00:08:29,100
problems because you don't really know what's going on.

162
00:08:29,400 --> 00:08:32,000
Whereas really knowing what's going around, allows you to analyze the

163
00:08:32,000 --> 00:08:38,000
complete workings of a program and make important improvements to it.

164
00:08:39,100 --> 00:08:41,700
Make new algorithms or find difficult to find bugs.

165
00:08:42,700 --> 00:08:46,300
So basically the combined algorithm entire the combined Matrix is

166
00:08:46,300 --> 00:08:47,800
produced by doing matrix multiplication.

167
00:08:47,800 --> 00:08:49,700
The question is, what does that mean?

168
00:08:50,000 --> 00:08:51,700
What does it mean to combine two?

169
00:08:52,600 --> 00:08:53,300
Transforms.

170
00:08:53,700 --> 00:08:58,200
And why are they combined in the way that I will explain?

171
00:08:59,100 --> 00:08:59,800
They are combined.

172
00:09:00,600 --> 00:09:03,500
So first of all, let me start by just stating, what actually happens

173
00:09:03,500 --> 00:09:07,400
here for people who don't know who aren't familiar with it in math

174
00:09:07,400 --> 00:09:07,900
notation.

175
00:09:07,900 --> 00:09:10,500
We typically have written something and I think you've seen me write

176
00:09:10,500 --> 00:09:11,400
it this way before.

177
00:09:11,700 --> 00:09:16,200
I'll do something like a times B times P equals c times P, right?

178
00:09:16,300 --> 00:09:19,400
And it's sort of saying like Okay if we were going to take a point and

179
00:09:19,400 --> 00:09:24,000
we're going to transform it by these two matrices somehow, then this

180
00:09:24,000 --> 00:09:28,000
Matrix C would do the same transform to the point, right?

181
00:09:28,500 --> 00:09:30,200
And so what we could,

182
00:09:30,700 --> 00:09:32,700
Glean from this, right?

183
00:09:34,000 --> 00:09:38,000
Is that some definition of the transform that happens when I

184
00:09:38,000 --> 00:09:42,100
transferred by b and a is represented by C?

185
00:09:42,200 --> 00:09:46,500
Now the first question might be, is it always order independent?

186
00:09:46,500 --> 00:09:51,300
Or, you know, does if I say CP equals a BP, right?

187
00:09:51,900 --> 00:09:57,900
What does that say about CP and B.A.P, for example, right?

188
00:09:57,900 --> 00:10:00,200
Because one thing that we know from scalar,

189
00:10:00,300 --> 00:10:03,600
Russian is that if I was to write the scalar version of this, right?

190
00:10:03,700 --> 00:10:09,600
If I was to write, C equals a b, we know that that also equals be a in

191
00:10:09,600 --> 00:10:12,700
straight scalar multiplication, in a normal scalar space.

192
00:10:12,700 --> 00:10:16,600
Like, the kind we work in in high school algebra, right?

193
00:10:16,900 --> 00:10:20,400
So what we would first possibly think, if we were just trying to

194
00:10:20,400 --> 00:10:23,700
extend our understanding of multiplication directly from scalar

195
00:10:23,700 --> 00:10:27,700
multiplication, we would probably think that these were going to be

196
00:10:27,700 --> 00:10:29,500
equal to each other, right?

197
00:10:29,600 --> 00:10:30,200
And that we

198
00:10:30,300 --> 00:10:33,800
Just say that a B&B a well, it just does both transforms.

199
00:10:33,800 --> 00:10:35,400
It doesn't matter what order they're in.

200
00:10:36,700 --> 00:10:42,700
That is true in certain circumstances depending on the structures of

201
00:10:42,700 --> 00:10:45,900
the matrices, but it is not true.

202
00:10:45,900 --> 00:10:47,200
In other circumstances.

203
00:10:48,200 --> 00:10:52,500
Matrix multiplication is actually ordered dependent and the reason

204
00:10:52,500 --> 00:10:56,100
that it is ordered dependent is because you produce a different set of

205
00:10:56,100 --> 00:10:59,700
products depending on which order you put.

206
00:10:59,700 --> 00:11:00,200
The

207
00:11:00,300 --> 00:11:04,100
Aziz and you can actually see this by doing it yourself.

208
00:11:04,200 --> 00:11:08,000
If you made a matrix, a b, c d like this.

209
00:11:08,400 --> 00:11:12,800
And then make another Matrix ijkl, right?

210
00:11:12,800 --> 00:11:13,800
Or something like this.

211
00:11:15,100 --> 00:11:16,800
And I was to multiply these two together.

212
00:11:16,800 --> 00:11:21,500
We all know what we would get even if we just were looking at the

213
00:11:21,500 --> 00:11:26,000
first term of this Matrix, we would end up with IJ, right?

214
00:11:26,200 --> 00:11:30,100
And I'm sorry, AI in this case, plus BK.

215
00:11:32,100 --> 00:11:36,900
And then this, you know, get product over here product over here, and

216
00:11:36,900 --> 00:11:39,300
in the next row down, we would get in.

217
00:11:39,300 --> 00:11:40,100
This is just what we did.

218
00:11:40,100 --> 00:11:40,400
Yes.

219
00:11:40,400 --> 00:11:40,800
Yes.

220
00:11:40,900 --> 00:11:42,100
Last time I was dream, right?

221
00:11:42,200 --> 00:11:44,800
For those of you who missed it, you want to go back and watch that.

222
00:11:45,000 --> 00:11:46,900
We'd know we get these two terms here, right?

223
00:11:46,900 --> 00:11:51,500
But if I was going to flip the order of these around, so same exact

224
00:11:51,500 --> 00:11:54,400
matrices, but I'm just going to multiply them in the opposite order

225
00:11:54,400 --> 00:11:55,500
here, right?

226
00:11:55,500 --> 00:11:58,600
So here I've got this Matrix times this Matrix here, I've got them

227
00:11:58,600 --> 00:11:59,800
opposite, write this Matrix,

228
00:12:00,000 --> 00:12:02,200
I am multiply it by this Matrix here.

229
00:12:02,400 --> 00:12:07,700
You can see immediately that we get completely different terms, right?

230
00:12:07,800 --> 00:12:11,900
We get an AI and that's in common but then right away we get a

231
00:12:11,900 --> 00:12:12,600
different term here.

232
00:12:12,600 --> 00:12:14,700
It's a CJ term, right?

233
00:12:14,700 --> 00:12:20,300
And the CJ term previously would not have occurred in this column at

234
00:12:20,300 --> 00:12:21,200
all, right.

235
00:12:21,200 --> 00:12:25,900
It was a CI term is where that showed up and similarly when we get to

236
00:12:25,900 --> 00:12:26,400
the next one.

237
00:12:26,400 --> 00:12:29,700
Same thing we get an AK plus a CL.

238
00:12:30,000 --> 00:12:31,200
Come here, right?

239
00:12:31,200 --> 00:12:35,200
And you can see that K is nowhere to be found in terms of a van, a

240
00:12:35,200 --> 00:12:35,900
term here.

241
00:12:39,500 --> 00:12:42,700
And yeah, I mean you get the idea, right?

242
00:12:42,700 --> 00:12:44,900
It's like it's very, obviously a different set of products.

243
00:12:44,900 --> 00:12:49,500
I guess I don't need to belabor that point, so because of that when we

244
00:12:49,500 --> 00:12:52,700
do matrix multiplication, we must be very mindful of the order because

245
00:12:52,700 --> 00:12:58,100
as you can see, only through extreme happenstance when these matrices

246
00:12:58,100 --> 00:13:01,400
happen to have very specific structure that just so happens to lead

247
00:13:01,400 --> 00:13:05,400
them to produce the same products in those places.

248
00:13:05,400 --> 00:13:08,200
Will we get the same results?

249
00:13:08,700 --> 00:13:12,000
You know, one example would be if the Matrix is diagonal for example,

250
00:13:12,800 --> 00:13:15,900
if there were no terms on the outsides of these, right?

251
00:13:15,900 --> 00:13:19,900
So if there were just zeros all through here, then what we get is

252
00:13:19,900 --> 00:13:22,800
something very akin to scalar multiplication because the diagonals

253
00:13:22,800 --> 00:13:25,000
always line up in the same place, right?

254
00:13:25,000 --> 00:13:29,600
So, we would get a, I hear and we would get a I here again, because we

255
00:13:29,600 --> 00:13:35,700
always have that product of the diagonal appearing down the diagonal,

256
00:13:35,700 --> 00:13:37,000
in the result, right?

257
00:13:37,000 --> 00:13:38,400
So, if everywhere else is,

258
00:13:38,500 --> 00:13:39,000
Zero.

259
00:13:39,000 --> 00:13:42,900
And you just have to ask me cheese, then the order ceases to matter in

260
00:13:42,900 --> 00:13:46,800
most cases because the diagonal products line up, right?

261
00:13:47,800 --> 00:13:49,000
No matter which way you do it.

262
00:13:50,200 --> 00:13:53,000
And hey, you know what's kind of interesting about that just as an

263
00:13:53,000 --> 00:13:57,400
aside, what does it is a matrix that just has terms down the diagonal,

264
00:13:57,600 --> 00:13:58,200
right?

265
00:13:58,700 --> 00:14:01,300
Well, that is a scaling Matrix, right?

266
00:14:01,300 --> 00:14:04,600
You remember, we talked about these a long time ago if I have an X Y

267
00:14:04,600 --> 00:14:08,400
that's coming in here point, I'm multiplying by then that's just a

268
00:14:08,700 --> 00:14:09,000
Why?

269
00:14:09,000 --> 00:14:11,300
It's just a scale on the incoming thing.

270
00:14:11,300 --> 00:14:14,700
It's two coefficients that scale the incoming thing.

271
00:14:14,800 --> 00:14:16,600
What do we know about scaling?

272
00:14:16,700 --> 00:14:19,900
While scaling, as a transform is order independent?

273
00:14:19,900 --> 00:14:23,500
If I make something twice as large and then I make it four times large

274
00:14:23,500 --> 00:14:26,300
again, it's just eight times larger.

275
00:14:26,600 --> 00:14:30,000
Same is true if I make something four times larger and then two times

276
00:14:30,000 --> 00:14:32,900
larger again still eight times larger, right?

277
00:14:33,600 --> 00:14:36,800
And so one of the interesting really kind of fascinating things about

278
00:14:36,800 --> 00:14:38,400
matrices and again,

279
00:14:38,500 --> 00:14:43,100
aye, you know, I mathematically speaking, historically you can see why

280
00:14:43,100 --> 00:14:46,300
they were relevant to solving problems and why we started using them

281
00:14:46,300 --> 00:14:47,800
to create structure.

282
00:14:51,200 --> 00:14:55,300
For notating complex systems like this is because that actually

283
00:14:55,300 --> 00:14:59,300
captures something true about the operation scaling is order

284
00:14:59,300 --> 00:14:59,800
dependent.

285
00:15:00,500 --> 00:15:03,800
I'm sorry, order independent, you can scale in any order, it doesn't

286
00:15:03,800 --> 00:15:04,400
matter.

287
00:15:04,800 --> 00:15:10,200
And the math also captures that similarly things that do matter order

288
00:15:10,200 --> 00:15:15,400
wise, for example, rotation rotation in three dimensions, is order

289
00:15:15,400 --> 00:15:20,100
dependent it matters, which order you do the rotations in in Matrix

290
00:15:20,100 --> 00:15:24,900
math, it actually happens that that order dependence is preserved

291
00:15:24,900 --> 00:15:29,900
properly and so they are very powerful Tools in that sense in that.

292
00:15:30,400 --> 00:15:34,200
Capture mathematically the same things that occur in the real world

293
00:15:34,200 --> 00:15:35,400
and that's very important.

294
00:15:36,500 --> 00:15:40,400
So now let's take a look at why the order dependence is important for

295
00:15:40,400 --> 00:15:42,900
us and how it captures the transform dependents.

296
00:15:44,000 --> 00:15:46,000
Like I said, something like scaling that's only diagonal.

297
00:15:46,300 --> 00:15:49,600
It doesn't have any order dependence, and that's exactly what we want.

298
00:15:49,600 --> 00:15:53,600
But for something like rotation, we do want that to capture that order

299
00:15:54,100 --> 00:15:59,100
dependence because with rotations, because they are not a clean

300
00:15:59,100 --> 00:16:00,400
euclidean operation.

301
00:16:01,000 --> 00:16:04,400
What you end up having is if you rotate something one way, and then

302
00:16:04,400 --> 00:16:08,700
from that point, do a rotation again, in the, you know, if I have a

303
00:16:08,700 --> 00:16:11,000
world space rotation this way, and I play another rotation space

304
00:16:11,000 --> 00:16:13,600
rotation this way, it's not the same as if I did.

305
00:16:13,700 --> 00:16:16,100
To in the opposite order, it might be.

306
00:16:16,100 --> 00:16:19,700
Sometimes depending on the choice of axes, it might result in the same

307
00:16:19,700 --> 00:16:22,200
thing, but oftentimes, it will result in a different final

308
00:16:22,200 --> 00:16:23,000
orientation.

309
00:16:23,400 --> 00:16:26,100
That's just true about rotations in three dimensions that has nothing

310
00:16:26,100 --> 00:16:27,300
to do with game programming.

311
00:16:28,200 --> 00:16:30,500
Obviously, we care about and game playing but it is not a construct.

312
00:16:30,500 --> 00:16:31,500
It's not an artificial contract.

313
00:16:31,500 --> 00:16:36,500
That's just actually how real three-dimensional objects behave in the

314
00:16:36,500 --> 00:16:37,200
real world.

315
00:16:37,700 --> 00:16:41,600
So what happens with matrix multiplication is remember, I talked quite

316
00:16:41,600 --> 00:16:42,200
a bit.

317
00:16:43,800 --> 00:16:51,800
About the concept that in a matrix you can have the X, the Y, and the

318
00:16:51,800 --> 00:16:54,000
Z axes of the space.

319
00:16:54,000 --> 00:16:54,900
You're talking about.

320
00:16:54,900 --> 00:16:59,400
They go in The Columns of the Matrix corresponds to placing something

321
00:16:59,400 --> 00:17:04,900
in the world at that x, y&z axis reference frame, right?

322
00:17:05,200 --> 00:17:08,400
So, you know, we've got something that looks like this.

323
00:17:08,400 --> 00:17:12,500
Let's say I've got a y, axis, and x axis and Z axis, and you,

324
00:17:12,700 --> 00:17:14,900
And see here in my Matrix.

325
00:17:15,000 --> 00:17:18,099
I would put the three values for the z-axis here.

326
00:17:18,200 --> 00:17:21,300
I will put the 3 for the Y down here and the 3 for the X down here, we

327
00:17:21,300 --> 00:17:24,400
talked about this quite a bit and the reason for that of course is

328
00:17:24,400 --> 00:17:30,700
when a, if these are my axes let's say and I've got a pxpypz for my

329
00:17:30,700 --> 00:17:34,500
point that comes in the reason for that is of course this produces

330
00:17:34,500 --> 00:17:35,400
this equation.

331
00:17:35,400 --> 00:17:42,200
P XA, X py pz AZ.

332
00:17:42,600 --> 00:17:45,700
Which is just reinterpreting the point P.

333
00:17:45,900 --> 00:17:47,200
Along these axis, right?

334
00:17:47,200 --> 00:17:51,500
It's saying go the x-coordinate go that far along the x axis, the y

335
00:17:51,500 --> 00:17:54,700
coordinate, go that far along the y axis, the Z coordinate, go that

336
00:17:54,700 --> 00:17:57,400
far along the z-axis, right?

337
00:17:57,700 --> 00:17:59,500
So it makes perfect sense.

338
00:17:59,500 --> 00:17:59,800
Why

339
00:18:00,000 --> 00:18:01,900
That works with the point transform.

340
00:18:02,500 --> 00:18:06,000
So now the next question is well if it makes perfect sense for the

341
00:18:06,000 --> 00:18:09,200
point transform, the why does it work for putting two rotations

342
00:18:09,200 --> 00:18:09,800
together?

343
00:18:09,900 --> 00:18:13,200
Let's say or a rotation and a scale together?

344
00:18:13,900 --> 00:18:15,500
Well, you can see quite easily.

345
00:18:15,500 --> 00:18:18,200
Why a rotation and a scale would work, right?

346
00:18:18,200 --> 00:18:20,500
Because the same thing applies here.

347
00:18:20,700 --> 00:18:22,300
If I have a matrix

348
00:18:23,700 --> 00:18:24,700
That's a rotation.

349
00:18:24,800 --> 00:18:27,600
Here's my rotation Matrix and then I have a remote location.

350
00:18:28,000 --> 00:18:29,500
I mean, a matrix, that's a scale.

351
00:18:29,500 --> 00:18:32,400
Here is my SX /.

352
00:18:32,600 --> 00:18:33,800
That's a lowercase S.

353
00:18:34,700 --> 00:18:38,600
I know it's hard to tell because there's no difference between that

354
00:18:38,900 --> 00:18:42,700
and an uppercase s, but it's supposed to be right.

355
00:18:42,800 --> 00:18:46,500
Then what you're going to see happen here is, you know, when I create

356
00:18:46,500 --> 00:18:50,700
the product, when I look at the SX, well what's going to go, you know,

357
00:18:50,700 --> 00:18:52,100
in this in this part here?

358
00:18:52,100 --> 00:18:53,300
Well, it's just going to be

359
00:18:53,500 --> 00:18:58,900
Whatever the x coordinate of the x axis is X SX, the same will be true

360
00:18:58,900 --> 00:19:00,700
for each one of these, right?

361
00:19:00,700 --> 00:19:08,200
The y-coordinate will just be times of the ax axis will just be times

362
00:19:08,200 --> 00:19:09,000
the SX, right?

363
00:19:09,000 --> 00:19:12,100
Because the SX will just multiply everything in this column, right?

364
00:19:12,100 --> 00:19:15,700
And the Sy multiplies everything in the next column and so on, right?

365
00:19:15,900 --> 00:19:19,300
So what we end up with is the exact same structure of the Matrix, but

366
00:19:19,300 --> 00:19:23,300
just now every column has been multiplied by the

367
00:19:23,400 --> 00:19:26,500
The scale that we were trying to apply.

368
00:19:27,600 --> 00:19:28,200
Right.

369
00:19:29,500 --> 00:19:36,200
And so, what that means is that we have applied the scaling Matrix to

370
00:19:36,200 --> 00:19:40,700
The Columns of the rotation Matrix, which are the axis of the

371
00:19:40,700 --> 00:19:42,200
rotation, right?

372
00:19:42,200 --> 00:19:45,500
Which produces exactly what we want, a reference frame that, you know,

373
00:19:45,500 --> 00:19:49,000
if it used to look like this, now, it looks like a scaled version of

374
00:19:49,000 --> 00:19:52,000
that which is exactly what we were trying to do, right?

375
00:19:52,100 --> 00:19:53,800
We were trying to rotate and scale.

376
00:19:53,900 --> 00:19:57,000
Well, now we have a matrix, which does both right it?

377
00:19:57,500 --> 00:20:02,100
Exactly those axes which are the rotation axes, scaled by the scale,

378
00:20:02,100 --> 00:20:04,800
we were trying to apply, right?

379
00:20:05,000 --> 00:20:07,100
So that's a pretty easy combination there.

380
00:20:07,300 --> 00:20:10,000
Same thing is true, but it's a little harder to see because there's

381
00:20:10,000 --> 00:20:11,300
just a lot more numbers involved.

382
00:20:11,300 --> 00:20:13,100
Scale is nice because it just goes down the diagonal.

383
00:20:13,100 --> 00:20:14,400
It's really simple to see.

384
00:20:15,000 --> 00:20:18,500
But if I have the same sort of situation where I've got an ax,

385
00:20:19,700 --> 00:20:22,400
And a y in an AZ.

386
00:20:24,200 --> 00:20:28,700
and then up here, I've got another Matrix, that's a b x, a b y and it

387
00:20:28,700 --> 00:20:29,300
BZ

388
00:20:32,200 --> 00:20:37,600
then again, we sort of can see in this case that we're going to have

389
00:20:40,600 --> 00:20:41,800
a combination of these values.

390
00:20:41,800 --> 00:20:46,700
But without dropping the scalar, it's pretty difficult to understand

391
00:20:47,600 --> 00:20:50,100
how these things combined, right?

392
00:20:50,400 --> 00:20:54,500
It's like, well, okay, I've got an axis here and I, you know, I've got

393
00:20:54,500 --> 00:20:55,800
an axis here.

394
00:20:56,100 --> 00:20:57,900
What exactly is happening there?

395
00:20:57,900 --> 00:20:59,800
It's like, I'm not sure, right, the

396
00:21:00,000 --> 00:21:07,000
X coordinate of BX is multiplying a x the whole way down, right?

397
00:21:07,400 --> 00:21:13,200
But then the y-coordinate of BX is also multiplying a why the whole

398
00:21:13,200 --> 00:21:14,500
way down, right?

399
00:21:14,500 --> 00:21:16,000
And it's like wait, what's going on?

400
00:21:18,600 --> 00:21:21,500
Well, we can draft a scalar and just do it out, but I would also

401
00:21:21,500 --> 00:21:24,400
encourage you and hopefully at this point, if you want to do that, you

402
00:21:24,400 --> 00:21:25,700
can go do that on your own.

403
00:21:25,700 --> 00:21:27,700
And you've seen me do multi, master replication.

404
00:21:27,700 --> 00:21:31,000
So many times on how many are you should be have a pretty cold, so you

405
00:21:31,000 --> 00:21:32,000
should be able to do it.

406
00:21:32,600 --> 00:21:37,500
But if you just think about this briefly, remember that matrix

407
00:21:37,500 --> 00:21:38,500
multiplication.

408
00:21:39,500 --> 00:21:43,900
And Vector multiplication are exactly the same thing, right?

409
00:21:44,200 --> 00:21:49,400
What do we say last week about The Columns of the Matrix?

410
00:21:49,400 --> 00:21:51,700
That's on the right hand of the multiplication.

411
00:21:51,700 --> 00:21:55,700
So if we're doing a times B, what did we say about The Columns of

412
00:21:55,700 --> 00:21:57,100
this, right?

413
00:21:58,100 --> 00:21:59,900
We said it could have as many as it wants.

414
00:22:02,700 --> 00:22:03,200
Excuse me.

415
00:22:03,600 --> 00:22:07,400
And why can it have as many as it once well, because we go columns and

416
00:22:07,400 --> 00:22:08,900
be for producing a term.

417
00:22:09,400 --> 00:22:14,500
Rose in a which means that to produce the entire one entire row of the

418
00:22:14,500 --> 00:22:15,200
output.

419
00:22:15,300 --> 00:22:20,100
We have only ever used and consumed one row of B to do so.

420
00:22:21,200 --> 00:22:25,500
There is no need for us to ever use this row again.

421
00:22:25,700 --> 00:22:31,100
It is irrelevant right for the next column, it will never be touched.

422
00:22:31,700 --> 00:22:36,100
So, essentially, what we can think of is we can think of each of these

423
00:22:36,100 --> 00:22:41,400
Matrix multiplications column applications as a separate Vector,

424
00:22:41,900 --> 00:22:42,400
right?

425
00:22:43,100 --> 00:22:45,600
And you already just saw me do that.

426
00:22:45,600 --> 00:22:50,600
If I had said a x, a y AZ, where The Columns of this Matrix and I

427
00:22:50,600 --> 00:22:50,800
said,

428
00:22:51,000 --> 00:22:54,800
We're multiplying by a point XYZ, right?

429
00:22:54,800 --> 00:22:58,600
And this is the point P, here is the Matrix a and this is the

430
00:22:58,600 --> 00:23:01,700
equation, you know, P Prime equals AP, right?

431
00:23:01,700 --> 00:23:02,200
Here's my P.

432
00:23:02,200 --> 00:23:04,100
Prime right here, that I'm producing.

433
00:23:05,800 --> 00:23:07,300
Will we know exactly what this is.

434
00:23:07,300 --> 00:23:10,700
We just said that this is this Vector, right?

435
00:23:10,700 --> 00:23:13,800
Not a matrix by a vector is X ax.

436
00:23:14,800 --> 00:23:20,100
Plus YP y plus Z, oops.

437
00:23:23,900 --> 00:23:27,300
Hey, y plus z a z.

438
00:23:28,000 --> 00:23:28,500
Right.

439
00:23:28,500 --> 00:23:34,200
It's just a point that's made by going X along a x y along a y&z along

440
00:23:34,200 --> 00:23:34,800
AZ.

441
00:23:34,800 --> 00:23:35,400
Right?

442
00:23:35,400 --> 00:23:38,700
That's one column Vector.

443
00:23:39,700 --> 00:23:43,000
Well, that's exactly what would happen here, right?

444
00:23:43,300 --> 00:23:46,500
It's just be X transformed by a.

445
00:23:47,300 --> 00:23:49,400
That's what's going to be produced here, right?

446
00:23:49,400 --> 00:23:52,700
Just like this is a transformed by P.

447
00:23:52,700 --> 00:23:53,500
That's what there.

448
00:23:53,600 --> 00:23:58,000
result is so we can write the resulting matrix by just saying, hey,

449
00:23:58,000 --> 00:23:59,800
this Matrix a, it's

450
00:24:00,300 --> 00:24:03,500
A time's the BX, right?

451
00:24:03,500 --> 00:24:06,700
Like I don't know what the probably I should not have used the capital

452
00:24:06,700 --> 00:24:09,100
letters for both the vector and the Matrix.

453
00:24:09,100 --> 00:24:12,100
This was bad notation but I did so.

454
00:24:12,100 --> 00:24:14,100
Oh well it's a times.

455
00:24:14,100 --> 00:24:16,100
Let's make that a lowercase B.

456
00:24:16,200 --> 00:24:20,700
I guess I don't know it's a times and you know, maybe these are

457
00:24:20,700 --> 00:24:24,100
lowercase A's all of a sudden return that always happen.

458
00:24:24,500 --> 00:24:28,400
It's a time's the BX Vector Plus

459
00:24:29,900 --> 00:24:30,700
Sorry, eh heh.

460
00:24:30,900 --> 00:24:35,100
Yeah, a times BX, Vector plus KT, plus.

461
00:24:35,300 --> 00:24:38,600
Well, I'm totally flustered by my change to lowercase toy through me.

462
00:24:38,900 --> 00:24:45,200
It's a times b x in the First Column, it's a times b, y in the second

463
00:24:45,200 --> 00:24:50,300
column, and it's a times b z in the third column, right?

464
00:24:50,600 --> 00:24:53,000
That's just what we actually produced.

465
00:24:55,400 --> 00:24:58,300
And so you can see right away just from reading that off.

466
00:24:58,300 --> 00:24:59,600
Now that we've figured out what it was.

467
00:24:59,800 --> 00:25:07,500
As you can see just by reading it off that produces the set of axes

468
00:25:07,500 --> 00:25:11,700
represented by The Matrix be transformed by a.

469
00:25:12,100 --> 00:25:17,700
So it's it's applying a as a transform to be right?

470
00:25:18,100 --> 00:25:23,100
And that Clues us directly in on the order of May of interpretation of

471
00:25:23,100 --> 00:25:25,100
interpreting Matrix products, right?

472
00:25:25,100 --> 00:25:29,200
If I have some big long series here and I'm like, all right, I'm going

473
00:25:29,200 --> 00:25:29,600
to produce

474
00:25:29,700 --> 00:25:32,700
Something at the end of this right, some composite Matrix Q or

475
00:25:32,700 --> 00:25:33,600
whatever, right?

476
00:25:33,800 --> 00:25:37,900
And I've got q, p Prime is a times B times c times, D times, c times F

477
00:25:37,900 --> 00:25:38,500
times p.

478
00:25:39,200 --> 00:25:44,500
And the question is, what order if I am looking at Q or even, if I'm

479
00:25:44,500 --> 00:25:49,300
just looking at this equation, what order are these transforms

480
00:25:50,000 --> 00:25:50,700
performed in?

481
00:25:51,100 --> 00:25:54,000
You know, and again, if it's something like scaling, I don't care what

482
00:25:54,000 --> 00:25:55,300
order it's in, it doesn't matter.

483
00:25:55,600 --> 00:25:59,400
But for some like rotation, I do so assume that these some of these,

484
00:25:59,400 --> 00:25:59,600
at least,

485
00:25:59,700 --> 00:26:03,700
In here, have a rotation or some other thing is sheer something that

486
00:26:03,700 --> 00:26:08,200
who's ordered dependent, what order are they going in conceptually?

487
00:26:08,300 --> 00:26:12,700
And the answer, you can see here, is that, it's always the second term

488
00:26:12,700 --> 00:26:15,500
in a product, the, the further to the right.

489
00:26:15,900 --> 00:26:19,100
That is, the one that's applied first, and it's the one further to the

490
00:26:19,100 --> 00:26:19,900
left.

491
00:26:20,000 --> 00:26:22,700
That's being done to it, right?

492
00:26:22,700 --> 00:26:26,700
It's saying, I start with the F and that is the first transform that

493
00:26:26,700 --> 00:26:27,500
would be applied.

494
00:26:27,600 --> 00:26:29,500
I'm going to apply e2f.

495
00:26:29,700 --> 00:26:38,000
right, so is this then e dcba so if you read left to right, right,

496
00:26:40,200 --> 00:26:45,000
You're actually reading them in the wrong order of conceptual

497
00:26:45,000 --> 00:26:45,900
application.

498
00:26:46,200 --> 00:26:50,000
Conceptually they're actually getting applied this way, right?

499
00:26:50,100 --> 00:26:53,200
You start with the thing you're working on and you go backwards from

500
00:26:53,200 --> 00:26:53,800
that.

501
00:26:54,100 --> 00:26:58,100
And this ends up being the last transform, that gets applied.

502
00:27:05,200 --> 00:27:08,000
And again, that comes directly from this interpretation here where you

503
00:27:08,000 --> 00:27:09,700
can see exactly why that occurs.

504
00:27:11,000 --> 00:27:18,700
Now again that saying that what order they get applied in that I'm not

505
00:27:18,700 --> 00:27:21,400
trying to speak to some mathematical thing here.

506
00:27:21,900 --> 00:27:24,400
What I'm trying to speak to is a conceptual thing.

507
00:27:24,600 --> 00:27:28,200
When these transforms are represents re when these matrices are

508
00:27:28,200 --> 00:27:31,300
representing transforms in 3D,

509
00:27:33,400 --> 00:27:37,800
We as humans have a concept of what order the transforms are going in

510
00:27:37,800 --> 00:27:41,100
because that is a conceptual thing and it matters, like I said, the

511
00:27:41,100 --> 00:27:42,200
rotation order matters.

512
00:27:44,100 --> 00:27:47,800
So what I'm saying here, when I say that they are applied in this

513
00:27:47,800 --> 00:27:50,900
order, I'm not trying to talk about a mathematical order of

514
00:27:50,900 --> 00:27:51,600
application.

515
00:27:51,800 --> 00:27:55,600
What I'm trying to say is when the math is performed, as the math is

516
00:27:55,600 --> 00:27:59,300
performed by the definition of matrix, multiplication.

517
00:28:00,100 --> 00:28:06,100
The result conceptually is that the order of transformation, the

518
00:28:06,100 --> 00:28:10,600
appearance of how the transform will occur is in this order, whereas

519
00:28:10,600 --> 00:28:13,200
if you flipped the order, you would get a different resulting

520
00:28:13,200 --> 00:28:13,700
transform.

521
00:28:14,400 --> 00:28:17,500
That was as if the transform had been applied in a different order,

522
00:28:17,800 --> 00:28:18,300
right?

523
00:28:19,900 --> 00:28:20,600
So, there you go.

524
00:28:21,800 --> 00:28:26,400
So that's matrix, multiplication and and its effect and why it's

525
00:28:26,400 --> 00:28:27,400
effective that way.

526
00:28:27,900 --> 00:28:30,800
Now, to more things we have to cover,

527
00:28:33,700 --> 00:28:36,700
First translation and this one's the easy one.

528
00:28:40,400 --> 00:28:43,900
So translation we already know how to do it.

529
00:28:44,000 --> 00:28:45,800
We do it all the time, right?

530
00:28:46,200 --> 00:28:47,300
We take a point.

531
00:28:47,400 --> 00:28:49,700
We want to produce a new Point that's offset by something.

532
00:28:49,700 --> 00:28:50,300
What do we do?

533
00:28:50,400 --> 00:28:52,700
Well, we just add an offset, right?

534
00:28:52,800 --> 00:28:55,500
So we just have some offset that gets added in here, right?

535
00:28:55,500 --> 00:29:00,700
We don't know what it is, just some Vector 3 dimensional Vector.

536
00:29:00,700 --> 00:29:04,400
We said to whatever we want and that offsets the point, right?

537
00:29:04,700 --> 00:29:07,400
So I've got some offset, let's say that offset is a.

538
00:29:07,600 --> 00:29:09,800
And in here, I want to offset this point by a

539
00:29:10,000 --> 00:29:11,900
Then we know that I've got a point P.

540
00:29:11,900 --> 00:29:16,200
I've got that a that I could think of, as a vector that starts at p

541
00:29:16,200 --> 00:29:18,600
and points in some direction and has a length.

542
00:29:18,600 --> 00:29:20,800
We end up at P Prime which is just going along.

543
00:29:20,800 --> 00:29:21,700
They're right.

544
00:29:21,700 --> 00:29:23,100
We know exactly what that is.

545
00:29:23,100 --> 00:29:24,200
We understand that very well.

546
00:29:24,200 --> 00:29:26,400
We do it all the time in handmade hero.

547
00:29:26,600 --> 00:29:29,700
So now the question is, well, I want to capture that but in a matrix

548
00:29:29,700 --> 00:29:32,700
because I want to be able to produce these Composites here.

549
00:29:33,000 --> 00:29:36,700
We're not only do I have rotation and not only do I have scaling, but

550
00:29:36,700 --> 00:29:38,400
I also have position.

551
00:29:39,900 --> 00:29:43,800
Incorporated into that operation, right?

552
00:29:45,100 --> 00:29:46,200
So, I want the whole thing.

553
00:29:47,500 --> 00:29:51,300
And so, what I can do, if I want to do that is I can take advantage of

554
00:29:51,500 --> 00:29:53,700
the 4 by 4 th of these matrices.

555
00:29:53,900 --> 00:29:57,800
And this is where you start to see that 4 by 4, element come into

556
00:29:57,800 --> 00:29:58,000
play.

557
00:29:58,000 --> 00:29:59,200
And I mentioned this before,

558
00:30:00,000 --> 00:30:05,600
Previous stream if we were to just have an X, right?

559
00:30:06,600 --> 00:30:10,500
A Y and the Z axis.

560
00:30:10,600 --> 00:30:12,700
This is our 4 by 4 Matrix, right?

561
00:30:13,200 --> 00:30:18,100
If we were just to have a 3 by 3 which is this upper part here, right?

562
00:30:18,100 --> 00:30:22,400
And maybe just because we're doing that we're you know maybe I'll be a

563
00:30:22,400 --> 00:30:25,900
little more explicit just this one time when we're talking about it

564
00:30:25,900 --> 00:30:27,400
here, if we

565
00:30:28,400 --> 00:30:30,100
Talk about having the x-axis.

566
00:30:30,800 --> 00:30:31,200
Oops.

567
00:30:35,700 --> 00:30:36,500
Y axis.

568
00:30:40,300 --> 00:30:41,300
And Z axis.

569
00:30:53,500 --> 00:30:56,500
So if we were to just take this 3 by 3 and pretend, The Matrix was

570
00:30:56,500 --> 00:31:02,000
just three by three, right then what you can see from this and we

571
00:31:02,000 --> 00:31:05,900
talked about this before, is that everything that comes in as a point,

572
00:31:06,100 --> 00:31:06,600
right?

573
00:31:07,200 --> 00:31:11,200
And Let Me Maybe, maybe I shouldn't have done that.

574
00:31:11,200 --> 00:31:14,000
So close to the equation just moved out there.

575
00:31:15,700 --> 00:31:16,700
Move it down a little bit.

576
00:31:17,400 --> 00:31:18,200
Let's do it right here.

577
00:31:36,700 --> 00:31:37,200
Okay.

578
00:31:39,200 --> 00:31:39,800
All right.

579
00:31:39,800 --> 00:31:48,200
So if we were to have this and I have an incoming Point like this,

580
00:31:48,200 --> 00:31:53,200
what you can see from the equation that results is that you never

581
00:31:53,200 --> 00:31:56,900
really get an opportunity to put any translation in here.

582
00:31:56,900 --> 00:32:00,900
Because when I do this multiplication out, what I will end up getting

583
00:32:00,900 --> 00:32:06,600
in each of my components is unfortunately that leaves no room for a

584
00:32:06,600 --> 00:32:07,600
translation, right?

585
00:32:07,600 --> 00:32:09,100
So my X

586
00:32:09,300 --> 00:32:15,800
And it of the result is going to be P X XX + py x.

587
00:32:15,800 --> 00:32:17,600
I'm sorry, Y X.

588
00:32:18,300 --> 00:32:23,700
Plus p z z x, right?

589
00:32:23,900 --> 00:32:25,100
That's what we're going to get there.

590
00:32:25,900 --> 00:32:28,300
And similarly, we get the exact same thing.

591
00:32:29,700 --> 00:32:32,100
In all of these Loops.

592
00:32:32,600 --> 00:32:37,500
So good, PX, X Y P.

593
00:32:37,600 --> 00:32:45,200
Why, why why pz z y?

594
00:32:46,000 --> 00:32:53,100
And finally, pz R, PX x z py.

595
00:32:55,800 --> 00:32:56,600
Isaiah.

596
00:32:58,100 --> 00:32:58,900
Peezy.

597
00:33:00,000 --> 00:33:00,500
ZZ.

598
00:33:03,300 --> 00:33:09,100
So, you can see here this creates exactly what we wanted.

599
00:33:09,100 --> 00:33:13,100
In terms of a vector equation, for reinterpreting things around

600
00:33:13,100 --> 00:33:14,800
rotated, or scaled axes.

601
00:33:15,000 --> 00:33:20,600
Because you can see how to pull out the PX, py and pz from here.

602
00:33:20,800 --> 00:33:26,200
And when we rewrite that we just get PX times that x-axis right plus

603
00:33:26,200 --> 00:33:30,900
py times that y-axis, + pz x and z axis, right?

604
00:33:30,900 --> 00:33:32,900
You can see that the pz is all

605
00:33:33,100 --> 00:33:34,600
Come in here and we said zxy.

606
00:33:34,600 --> 00:33:36,500
There's that Vector, Right?

607
00:33:36,500 --> 00:33:37,800
Py is coming here, right?

608
00:33:37,800 --> 00:33:42,400
So this this just produces exactly this and that's great for rotation

609
00:33:42,400 --> 00:33:44,000
and scaling and sharing and everything else.

610
00:33:44,000 --> 00:33:45,800
That's just axial manipulation.

611
00:33:46,100 --> 00:33:48,300
But the question is where is the origin, right?

612
00:33:48,300 --> 00:33:50,200
The origin hasn't changed at all here.

613
00:33:50,200 --> 00:33:56,100
There's no fundamental displacement because every term that we had in

614
00:33:56,100 --> 00:34:00,600
our transform is multiplied by something in the input.

615
00:34:01,000 --> 00:34:02,800
So there is no offset.

616
00:34:03,000 --> 00:34:04,300
That just comes in.

617
00:34:04,300 --> 00:34:05,700
We need a term over here.

618
00:34:05,700 --> 00:34:11,800
That's not X, anything in X or Y or Z right in order to get that in

619
00:34:11,800 --> 00:34:12,100
there.

620
00:34:14,000 --> 00:34:17,900
And so this is where that augmentation to 4x4 comes in handy.

621
00:34:17,900 --> 00:34:20,500
Yet again, it was good for the projection for the synthetic divide

622
00:34:20,500 --> 00:34:21,000
idea.

623
00:34:21,699 --> 00:34:26,199
And it's also useful here because what we pretend when we do these

624
00:34:26,199 --> 00:34:30,000
transforms is that our three-dimensional points are augmented by a 1.

625
00:34:30,699 --> 00:34:32,500
So we use that fourth coordinate.

626
00:34:32,500 --> 00:34:35,900
And we stick a 1 in there and we use that one to ensure that we can

627
00:34:35,900 --> 00:34:40,400
add something at the end of our matrix multiplication and get a valid

628
00:34:40,400 --> 00:34:41,699
translation out of it.

629
00:34:41,900 --> 00:34:43,500
So what you can see is that one will he

630
00:34:43,800 --> 00:34:46,199
The things in each of these positions.

631
00:34:46,400 --> 00:34:51,300
So if I have a translation X translation, Y and a translation Z here

632
00:34:52,000 --> 00:34:55,000
then what will happen is that will just get tacked on to the end 1

633
00:34:55,000 --> 00:34:59,800
times translation, x 1 times translation, y1 times translation, Z lo

634
00:34:59,800 --> 00:35:03,400
and behold that's just adding the translation Vector onto the end,

635
00:35:03,500 --> 00:35:04,000
right?

636
00:35:04,200 --> 00:35:10,100
And that is what produces the 4x4 structure for a translation,

637
00:35:11,000 --> 00:35:13,500
rotation scale, sheer Matrix, right?

638
00:35:13,600 --> 00:35:17,000
This part down here is not used because that only comes into play,

639
00:35:17,000 --> 00:35:20,000
when we actually start needing to do perspective, right?

640
00:35:20,000 --> 00:35:20,900
You saw me use it.

641
00:35:20,900 --> 00:35:23,000
So I'm gonna use this one when we start to use perspective.

642
00:35:23,200 --> 00:35:24,200
So it does come into play.

643
00:35:24,200 --> 00:35:27,600
But it's really this part, that's the important part for our purposes.

644
00:35:28,200 --> 00:35:31,200
When we're talking about 3D transforms, we don't need any of this down

645
00:35:31,200 --> 00:35:31,700
here.

646
00:35:31,800 --> 00:35:32,800
Most of the time.

647
00:35:34,100 --> 00:35:37,700
and in fact, a lot of people when they Implement pipelines just

648
00:35:37,700 --> 00:35:42,300
Implement just this part and they hard-code all of the multiplication

649
00:35:42,300 --> 00:35:48,000
to assume 0 0, 0 1 on the bottom, and they only have stuff that takes

650
00:35:48,000 --> 00:35:51,600
care of the bottom, when they actually use, when they actually go to

651
00:35:51,600 --> 00:35:52,400
do perspective,

652
00:35:56,300 --> 00:35:59,200
Like, at the very, very end, right?

653
00:35:59,400 --> 00:35:59,900
Because you can

654
00:36:00,400 --> 00:36:00,800
You know.

655
00:36:03,700 --> 00:36:05,400
You just wasted a lot of operations.

656
00:36:08,400 --> 00:36:11,000
If you were always treating those, as if they could be set, something

657
00:36:11,000 --> 00:36:12,400
else and you never set them something else.

658
00:36:14,000 --> 00:36:17,800
But anyway, so that's how that works and you can see that's how are

659
00:36:17,800 --> 00:36:18,700
matrices are constructed.

660
00:36:18,700 --> 00:36:23,700
So now we have the ability to construct a rotation, you know, by by

661
00:36:23,700 --> 00:36:27,900
looking at this, we can construct a rotation scaling.

662
00:36:29,700 --> 00:36:32,600
And translation, which is really all we ever do in handmade Arrow.

663
00:36:32,600 --> 00:36:33,500
That's all we do.

664
00:36:33,600 --> 00:36:37,000
Now, we could also do shearing and I maybe we do some sharing, we

665
00:36:37,000 --> 00:36:38,000
could also do sharing again.

666
00:36:38,000 --> 00:36:40,900
Because since we have control over the axes, we can share the axes as

667
00:36:40,900 --> 00:36:41,200
well.

668
00:36:41,700 --> 00:36:43,900
So we actually also have shearing here

669
00:36:45,300 --> 00:36:48,100
And by the way, the scaling is non-uniform, right?

670
00:36:48,100 --> 00:36:53,000
So we can scale the X y&z separately as well, we can create matrices

671
00:36:53,000 --> 00:36:55,600
that do all of these things and now because I made some

672
00:36:55,600 --> 00:36:57,600
multiplication, we can also combine them all.

673
00:36:58,100 --> 00:37:01,100
So we can just make matrices at do whatever we want, and we can

674
00:37:01,100 --> 00:37:03,500
combine them all together and we want to transform something.

675
00:37:03,500 --> 00:37:07,700
We can transform it all the way from wherever it starts to the very

676
00:37:07,700 --> 00:37:12,100
end of every transform that needs to happen all with one Matrix and

677
00:37:12,100 --> 00:37:13,200
that's pretty great, right?

678
00:37:13,200 --> 00:37:14,400
It saves a ton of work.

679
00:37:15,000 --> 00:37:17,400
In terms of manipulating the points around.

680
00:37:18,700 --> 00:37:20,700
Okay, so that's all real good.

681
00:37:20,900 --> 00:37:23,600
And everyone's happy and everything's fantastic, right?

682
00:37:25,800 --> 00:37:26,300
but,

683
00:37:30,000 --> 00:37:31,700
We've got 11 more problem.

684
00:37:32,000 --> 00:37:35,900
There's something that we have not addressed this entire time and

685
00:37:35,900 --> 00:37:40,000
we've never had to address it because we always sort of did just the

686
00:37:40,000 --> 00:37:42,700
one part of it that was relevant by hand in the hand made her a

687
00:37:42,700 --> 00:37:45,400
pipeline, but because we're now going to be talking about a real

688
00:37:45,400 --> 00:37:46,200
camera transform.

689
00:37:46,200 --> 00:37:48,800
We have one more thing that we have to get, right?

690
00:37:49,200 --> 00:37:53,400
Hopefully, all of that was fairly easy for everyone to understand and

691
00:37:53,400 --> 00:37:54,100
work out.

692
00:37:54,400 --> 00:37:56,500
If it's not, we'll try to tackle it in the Q&A.

693
00:38:00,100 --> 00:38:03,400
But the thing that we have never really made explicit because we never

694
00:38:03,400 --> 00:38:07,700
had to is the concept of a camera transform.

695
00:38:12,200 --> 00:38:17,400
And a camera transform is not the same as an object transform.

696
00:38:18,300 --> 00:38:19,100
It is the same.

697
00:38:19,100 --> 00:38:21,700
In the sense that mathematically, it's can still be represented by a

698
00:38:21,700 --> 00:38:24,700
matrix because any transform that we probably want to do in three

699
00:38:24,700 --> 00:38:28,100
dimensions for rigid transforms.

700
00:38:28,100 --> 00:38:31,000
Like this is usually capable of being represented in a matrix.

701
00:38:31,000 --> 00:38:34,100
Obviously nonlinear transforms or not, that's a whole separate thing.

702
00:38:35,100 --> 00:38:38,000
But any kind of basic transform like this can be represented so it can

703
00:38:38,000 --> 00:38:39,200
be represented in the Matrix.

704
00:38:39,200 --> 00:38:41,100
But conceptually

705
00:38:41,200 --> 00:38:45,100
It is very different from an object transform and so let me take a

706
00:38:45,100 --> 00:38:48,100
brief second to explain what I mean by those two things.

707
00:38:48,900 --> 00:38:51,900
So an object transform.

708
00:39:01,200 --> 00:39:02,400
Is a transform.

709
00:39:03,400 --> 00:39:05,700
And again these are purely conceptual, right?

710
00:39:05,700 --> 00:39:09,800
So the math is the same regardless of what you're doing, but we're

711
00:39:09,800 --> 00:39:12,200
just talking about conceptualizing these things when you're trying to

712
00:39:12,200 --> 00:39:13,600
understand what's happening here.

713
00:39:13,900 --> 00:39:17,700
And and more importantly, I suppose when you have a goal, you want to

714
00:39:17,700 --> 00:39:21,700
achieve and you need to do it with a transform, how you conceive and

715
00:39:21,700 --> 00:39:23,000
construct that transform.

716
00:39:24,000 --> 00:39:26,800
An object transform is the kind that we've been talking about so far,

717
00:39:26,800 --> 00:39:28,900
which is looking at a matrix like this.

718
00:39:29,400 --> 00:39:31,900
It's looking at a matrix where the x axis is here.

719
00:39:32,100 --> 00:39:36,800
The y axis is here, the Z axis is here, it's got 0 0, 1 here.

720
00:39:36,800 --> 00:39:38,800
And we've got a translation component like that.

721
00:39:40,300 --> 00:39:40,800
Okay.

722
00:39:42,900 --> 00:39:44,400
That's an object transform.

723
00:39:45,500 --> 00:39:49,000
And what an object transform is, is it's a transform that takes

724
00:39:49,000 --> 00:39:55,300
something from the origin and a route coordinate system, right?

725
00:39:55,300 --> 00:40:00,600
So it's like I've got X Y and Z and I'm thinking about some shape, you

726
00:40:00,600 --> 00:40:01,900
know, I don't know what it is.

727
00:40:02,500 --> 00:40:04,900
I've got some like maybe a little, I don't know.

728
00:40:04,900 --> 00:40:06,000
Like a triangle here.

729
00:40:06,700 --> 00:40:08,200
It's aligned there, right?

730
00:40:08,400 --> 00:40:09,400
Here's my triangle.

731
00:40:10,200 --> 00:40:14,700
I'm taking it as its defined in a base coordinate system.

732
00:40:15,300 --> 00:40:18,500
Are all the axes are cardinal and there's no scaling.

733
00:40:18,500 --> 00:40:19,500
You know, I'm conceiving of it.

734
00:40:19,500 --> 00:40:25,400
Just defined as it is and I'm transforming it such that the axes of

735
00:40:25,400 --> 00:40:31,500
this Matrix and the origin offset of this Matrix become the new way

736
00:40:31,500 --> 00:40:33,900
that is being interpreted, right?

737
00:40:34,000 --> 00:40:42,100
So now say this Matrix is a, this is a x, a y, AZ and 80 right now.

738
00:40:42,100 --> 00:40:43,000
This may have been.

739
00:40:43,000 --> 00:40:45,000
This is like sort of the route, the basics.

740
00:40:45,200 --> 00:40:46,500
Y z coordinate system.

741
00:40:46,600 --> 00:40:50,400
I'm taking it from there and I'm putting it into some new coordinate

742
00:40:50,400 --> 00:40:52,000
system, right?

743
00:40:54,100 --> 00:40:58,800
As defined by the the contents of that Matrix.

744
00:41:02,800 --> 00:41:10,400
So this 1000 before, now the origin, the base of that is at 80 and all

745
00:41:10,400 --> 00:41:12,100
of my axes are now whatever.

746
00:41:12,100 --> 00:41:16,200
The axes were specified as over here, right?

747
00:41:16,700 --> 00:41:21,800
And so when we conceptualize a matrix by looking at its columns,

748
00:41:28,100 --> 00:41:32,400
We are talking about it as if it as if we are conceiving it.

749
00:41:33,200 --> 00:41:40,400
We are conceptualizing this Matrix as this process because remember, a

750
00:41:40,400 --> 00:41:44,600
matrix is just a bag of numbers at the end of the day, right?

751
00:41:44,700 --> 00:41:47,700
It's just a bag of numbers and a rule about how we multiply them

752
00:41:47,700 --> 00:41:52,900
together so it was purely my conceptualization of the Matrix and how I

753
00:41:52,900 --> 00:41:54,400
explained it to you.

754
00:41:54,700 --> 00:41:56,900
That is why we picked it out in terms of

755
00:41:57,100 --> 00:41:57,900
Columns, right.

756
00:41:57,900 --> 00:41:59,600
We there's

757
00:42:00,000 --> 00:42:03,000
The Matrix that says it has to be picked out in terms of columns, it

758
00:42:03,000 --> 00:42:06,700
just so happens that if you conceive of the Matrix and columns like

759
00:42:06,700 --> 00:42:12,400
that, then the meaning of the Matrix is clear, for those columns,

760
00:42:12,400 --> 00:42:12,700
right?

761
00:42:12,700 --> 00:42:16,800
That's one way we can analyze what a matrix does is by looking at the

762
00:42:16,800 --> 00:42:18,400
columns and saying those columns.

763
00:42:19,600 --> 00:42:23,900
if we were to apply this Matrix to a geometric shape, the points of a

764
00:42:23,900 --> 00:42:25,700
geometric shape in series,

765
00:42:27,100 --> 00:42:33,900
Those columns would form the new coordinate system for that shape and

766
00:42:33,900 --> 00:42:38,400
that fourth column in the homogeneous coordinate way would form its

767
00:42:38,400 --> 00:42:43,300
origin that is what will happen to those numbers in The Matrix if we

768
00:42:43,300 --> 00:42:46,000
conceive of them as columns and that's a very useful way to look at it

769
00:42:46,000 --> 00:42:49,600
because often times that's exactly what we want to build.

770
00:42:49,600 --> 00:42:51,400
We want to build an object transform.

771
00:42:51,400 --> 00:42:56,800
So we know that we can stuff those coordinates in here in that way to

772
00:42:56,800 --> 00:42:57,000
produce.

773
00:42:57,100 --> 00:42:57,900
This result.

774
00:43:00,100 --> 00:43:00,300
Right?

775
00:43:00,300 --> 00:43:01,100
And that's great.

776
00:43:01,900 --> 00:43:02,400
I think.

777
00:43:07,100 --> 00:43:07,700
however,

778
00:43:09,400 --> 00:43:14,200
there's more than one way to conceptualize the parts of a matrix,

779
00:43:14,500 --> 00:43:14,900
right?

780
00:43:17,700 --> 00:43:18,400
This.

781
00:43:21,100 --> 00:43:23,800
We might call the column picture.

782
00:43:27,800 --> 00:43:33,300
It's the way of looking at a matrix that focuses on the columns and

783
00:43:33,300 --> 00:43:38,400
what that means and the column picture produces an object transform,

784
00:43:38,600 --> 00:43:40,600
write the column way of looking at it.

785
00:43:40,700 --> 00:43:44,100
Looks at it as if it is this process.

786
00:43:46,400 --> 00:43:51,700
But we could alternatively look at the row picture.

787
00:43:53,300 --> 00:43:53,700
Right?

788
00:43:53,700 --> 00:43:58,400
The row picture is what happens if we take the other slice, what if we

789
00:43:58,400 --> 00:44:01,100
looked at what the rows of a matrix mean, right?

790
00:44:01,100 --> 00:44:02,300
Cutting the other way.

791
00:44:02,900 --> 00:44:07,200
And if we look at the row picture, then we get a camera transform.

792
00:44:08,400 --> 00:44:10,400
And the reason this is important for us to understand is because

793
00:44:10,400 --> 00:44:14,500
that's what we actually want to make right now in handmade hero.

794
00:44:14,500 --> 00:44:18,200
When I turn off this Blackboard and go to the code, that's what I got

795
00:44:18,200 --> 00:44:18,800
a tie pin.

796
00:44:21,500 --> 00:44:22,100
Right.

797
00:44:23,100 --> 00:44:25,700
So what does that mean?

798
00:44:27,100 --> 00:44:28,700
Well, if we go back here,

799
00:44:31,800 --> 00:44:36,800
I've conveniently sort of oops, that's not right.

800
00:44:37,600 --> 00:44:41,700
This is a point I've conveniently written this entire thing out for

801
00:44:41,700 --> 00:44:46,900
one of the of the for one column, right?

802
00:44:46,900 --> 00:44:47,600
For a vector

803
00:44:50,000 --> 00:44:54,500
And that's really all I need to explain the row picture to you.

804
00:44:54,700 --> 00:44:55,000
I'm sorry.

805
00:44:55,000 --> 00:44:56,900
I'm really I'm kind of sick today.

806
00:44:56,900 --> 00:44:59,800
I am very like throat cloggy so I can't.

807
00:45:00,000 --> 00:45:00,800
Clear My Throat.

808
00:45:02,800 --> 00:45:03,900
It's tough talking sometimes.

809
00:45:06,100 --> 00:45:09,800
So, what I encourage you to do before it to get to the cam picture was

810
00:45:09,800 --> 00:45:11,600
to pull out the columns, right?

811
00:45:11,600 --> 00:45:16,300
I was saying, oh okay, you know, here's the PX term and you can see

812
00:45:16,300 --> 00:45:22,900
the X y&z terms coming into an X Vector here, y Vector, Z, you know,

813
00:45:22,900 --> 00:45:23,900
and Z Vector here.

814
00:45:24,200 --> 00:45:27,200
But what if we were to look at this?

815
00:45:30,700 --> 00:45:31,300
Right?

816
00:45:31,600 --> 00:45:34,000
What if we were to look at it the other way?

817
00:45:34,500 --> 00:45:40,800
Well, this also looks like something for those of you who, you know,

818
00:45:43,400 --> 00:45:47,300
Remember all of your handmade hero, what does that look like to you,

819
00:45:48,100 --> 00:45:48,800
right?

820
00:45:48,800 --> 00:45:51,900
If looking at it this way, looks like something we can pull columns

821
00:45:51,900 --> 00:45:54,000
out of, what does this look like?

822
00:45:57,700 --> 00:45:58,600
I'll give you a second.

823
00:46:07,400 --> 00:46:07,900
Well.

824
00:46:11,700 --> 00:46:20,300
Let's take a look P XX X py, Y XP, Z, ZX, right that to me.

825
00:46:20,300 --> 00:46:23,400
And then of course the 11 TX, right?

826
00:46:25,600 --> 00:46:30,300
That to me, looks an awful lot like the dot product that we've talked

827
00:46:30,300 --> 00:46:33,000
about right or inner product.

828
00:46:35,500 --> 00:46:38,500
Why does it look a lot like an inner product because a matrix

829
00:46:38,600 --> 00:46:41,800
multiplication is just a series of inner products at the end of the

830
00:46:41,800 --> 00:46:42,700
day, right?

831
00:46:42,800 --> 00:46:48,800
Each position in the output is just a DOT product of the column of the

832
00:46:49,000 --> 00:46:54,800
of the right-hand term times, the row of the left-hand term, right so

833
00:46:54,800 --> 00:46:57,600
while I can think of it the way I was thinking of it before as being a

834
00:46:57,600 --> 00:47:00,100
series of column editions that's the column picture.

835
00:47:00,300 --> 00:47:03,800
I can also think of it as a series of dot products and that's the row

836
00:47:03,800 --> 00:47:05,100
picture of the incoming.

837
00:47:05,200 --> 00:47:08,700
Matrix of the, the left hand side Matrix, right?

838
00:47:10,800 --> 00:47:17,700
This term is the dot product of the column of B with the row of a

839
00:47:17,900 --> 00:47:18,400
right.

840
00:47:18,600 --> 00:47:24,500
It's basically like a row dot product added with a column, right?

841
00:47:24,800 --> 00:47:29,200
And we do that every one of the terms in the resulting Matrix is what,

842
00:47:29,200 --> 00:47:32,600
whatever, the corresponding row of a times, whatever the corresponding

843
00:47:32,600 --> 00:47:36,800
column of B, it's that dot product, that's what it is, right?

844
00:47:37,700 --> 00:47:39,700
So if I instead want to,

845
00:47:40,600 --> 00:47:45,500
Is this Matrix as thinking about what the rows of it mean.

846
00:47:45,600 --> 00:47:50,000
So now let's say we've got our x axis instead of sticking our x axis

847
00:47:50,000 --> 00:47:50,800
in the column.

848
00:47:50,900 --> 00:47:55,000
What if we stuck our x-axis in the row, right?

849
00:48:00,000 --> 00:48:02,200
We'll leave the translation out of it for the moment.

850
00:48:07,400 --> 00:48:08,000
Right.

851
00:48:08,300 --> 00:48:09,600
What if we did that?

852
00:48:10,200 --> 00:48:16,300
Well, now when we have PX py and pz coming in right, which is just R

853
00:48:16,500 --> 00:48:21,200
Vector p, and here's our, a and we'll do a x.

854
00:48:21,300 --> 00:48:22,800
A y is e 4r.

855
00:48:25,000 --> 00:48:28,500
For rotation, there for our, for our axis component.

856
00:48:28,800 --> 00:48:30,800
Now, when we do this, right?

857
00:48:30,900 --> 00:48:38,600
The result is actually just the ax dot product ID with P, right?

858
00:48:39,700 --> 00:48:41,800
Plus the TX translation term.

859
00:48:43,100 --> 00:48:48,800
A y dot product with p, plus the translation term, AZ dot product,

860
00:48:48,800 --> 00:48:52,400
with p plus translation term, right?

861
00:48:54,100 --> 00:48:55,100
There's a 1 there.

862
00:48:58,300 --> 00:49:01,400
That's exactly what we get and really, we can just write this the

863
00:49:01,400 --> 00:49:06,400
whole way out if I wanted to include the t x t YT, Z in the row.

864
00:49:06,500 --> 00:49:10,000
It would just be a x transpose P if the TX was in there, right?

865
00:49:10,000 --> 00:49:11,100
Because it's still a DOT product.

866
00:49:11,100 --> 00:49:14,600
The whole way I've just chosen to leave the translation separate again

867
00:49:14,600 --> 00:49:16,700
because we're trying to think about this means conceptually.

868
00:49:16,900 --> 00:49:20,100
It's easier to keep translation as a separate translation because that

869
00:49:20,100 --> 00:49:21,500
is what it actually does.

870
00:49:21,700 --> 00:49:25,900
Because this term is 1, there is no contribution of P here, right?

871
00:49:29,000 --> 00:49:32,500
So this is a different way of conceptualizing.

872
00:49:32,500 --> 00:49:37,000
What happens in The Matrix so if we were to write both of these out so

873
00:49:37,000 --> 00:49:40,000
you could kind of see them because it that it's works.

874
00:49:40,000 --> 00:49:42,900
Every time you do matrix multiplication both of these things is

875
00:49:42,900 --> 00:49:43,200
happening.

876
00:49:43,200 --> 00:49:46,600
Conceptually, it's which one you choose to focus on, right?

877
00:49:47,400 --> 00:49:49,600
Is to understand what the Matrix is doing.

878
00:49:50,200 --> 00:49:53,500
You can think about it, two different ways, right here is a way and

879
00:49:53,500 --> 00:49:54,000
I'll write it.

880
00:49:54,000 --> 00:49:57,600
So let's let's write it this way and I'll just do the 3 by 3.

881
00:49:57,600 --> 00:49:58,600
We'll leave out the

882
00:49:58,800 --> 00:50:01,800
You can see that it was, it was the same, in either case, there

883
00:50:01,800 --> 00:50:03,300
doesn't really matter, right?

884
00:50:06,400 --> 00:50:08,500
Here's the row picture.

885
00:50:08,800 --> 00:50:11,300
Here's row of x times p.

886
00:50:15,000 --> 00:50:16,300
And maybe I'll just write it this way.

887
00:50:24,300 --> 00:50:26,800
Right, here's the row picture.

888
00:50:27,100 --> 00:50:28,500
Here's the column picture.

889
00:50:36,200 --> 00:50:36,700
Okay.

890
00:50:37,900 --> 00:50:45,000
The row picture produces a vector that is the rho dot parted with the

891
00:50:45,300 --> 00:50:48,000
Hoops with the incoming point.

892
00:50:55,100 --> 00:50:56,400
The column picture.

893
00:50:58,500 --> 00:50:59,800
And I guess I won't bother.

894
00:51:00,000 --> 00:51:00,800
Because I'm a space.

895
00:51:00,800 --> 00:51:04,000
Let's just say we're multiplying by this again the column picture

896
00:51:04,200 --> 00:51:07,800
produces a combination of the columns.

897
00:51:11,500 --> 00:51:12,000
Right.

898
00:51:13,600 --> 00:51:17,700
This and this are the same result, right?

899
00:51:17,700 --> 00:51:21,000
Because this is could be the same exact Matrix, the same bag of

900
00:51:21,000 --> 00:51:22,400
numbers exactly the same.

901
00:51:23,000 --> 00:51:27,500
But in terms of how we want to conceptualize what it does, we can

902
00:51:27,500 --> 00:51:31,200
think of matrix multiplication and this, in this case Matrix times a

903
00:51:31,200 --> 00:51:35,300
vector, but again major times a vector is just the same as Mitchell's

904
00:51:35,300 --> 00:51:38,000
location because again, multiplication by The Matrix is just taking

905
00:51:38,000 --> 00:51:41,100
The Columns of the right-hand side and doing the Matrix

906
00:51:41,300 --> 00:51:42,800
It's warm to them conceptually, right?

907
00:51:42,800 --> 00:51:44,100
So they're the same thing.

908
00:51:45,000 --> 00:51:46,100
Just one does more.

909
00:51:49,300 --> 00:51:52,200
We can conceptualize the same bag of numbers two different ways.

910
00:51:52,300 --> 00:51:58,300
One way is to say, let's pretend that we had axes on the rows of this

911
00:51:58,300 --> 00:52:01,800
Matrix that each bag of numbers, that was three across, was going to

912
00:52:01,800 --> 00:52:03,900
be one of our axes X Y & Z.

913
00:52:04,000 --> 00:52:07,200
Well, if that's the case, then the operation of what this Matrix does,

914
00:52:07,200 --> 00:52:08,600
to those axes.

915
00:52:10,100 --> 00:52:11,500
Is it dot products?

916
00:52:11,500 --> 00:52:15,800
The incoming point with each of them and the result is the dot product

917
00:52:15,900 --> 00:52:17,000
in the x-coordinate.

918
00:52:17,000 --> 00:52:20,100
It's the dot product, with the x axis in the y, coordinate is adopt

919
00:52:20,100 --> 00:52:21,900
the y axis and the Z coordinate.

920
00:52:21,900 --> 00:52:23,400
Its adopt pipe with the Z axis.

921
00:52:25,600 --> 00:52:26,700
That's the row picture.

922
00:52:28,400 --> 00:52:29,800
And that's a camera transform.

923
00:52:29,800 --> 00:52:31,400
I'm going to tell you why in a second.

924
00:52:36,000 --> 00:52:41,000
On the other hand, if we take a look at this picture, the column is

925
00:52:41,000 --> 00:52:43,800
just a combination of the columns, you know, scaled by the incoming

926
00:52:43,800 --> 00:52:45,200
point, right?

927
00:52:45,500 --> 00:52:50,400
That is exactly, you know, sort of, again, exactly some reason, these

928
00:52:50,400 --> 00:52:53,100
two are equivalent values, the result is the same.

929
00:52:53,200 --> 00:52:54,800
The two vectors are exactly the same.

930
00:52:54,800 --> 00:52:58,400
It's just how we're choosing capsize them if instead we conceptualize

931
00:52:58,400 --> 00:53:01,600
the axes as whatever was in The Columns, right?

932
00:53:01,800 --> 00:53:03,400
Then that's the column picture.

933
00:53:04,400 --> 00:53:07,600
And that's that object transform that we already know and are very

934
00:53:07,600 --> 00:53:09,300
familiar with, right?

935
00:53:11,800 --> 00:53:13,500
Because this is exactly what we already know.

936
00:53:13,500 --> 00:53:15,400
And what we've done many many times on handmade hero.

937
00:53:15,600 --> 00:53:20,000
So now the question is just okay, so if I want to make a transfer

938
00:53:20,000 --> 00:53:23,400
Matrix and I'm trying to make a transfer Matrix, that encapsulated

939
00:53:23,400 --> 00:53:24,000
object transform.

940
00:53:24,000 --> 00:53:28,700
I know I just put things in the X, I know I put my x and y and z-axes

941
00:53:28,900 --> 00:53:31,800
Into The Columns of a matrix and then I can just use it as a

942
00:53:31,800 --> 00:53:34,800
transformation that will do an object transform, it'll move a point

943
00:53:34,800 --> 00:53:38,400
from the origin coordinate system out to wherever those.

944
00:53:38,400 --> 00:53:41,300
Axes are where their origin is where they axes are.

945
00:53:41,800 --> 00:53:44,300
Along those axes Etc, right?

946
00:53:45,800 --> 00:53:49,000
So the question is, what is the camera transform and why does this do

947
00:53:49,000 --> 00:53:50,300
it right?

948
00:53:50,300 --> 00:53:53,300
What's this other row picture because hopefully you all agree with me

949
00:53:53,300 --> 00:53:54,800
that this is definitely a different way.

950
00:53:54,800 --> 00:53:58,800
We could interpret the math but how does this different interpretation

951
00:53:58,800 --> 00:53:59,700
of the result?

952
00:54:00,000 --> 00:54:03,300
How does this different grouping, how we've chosen to summarize the

953
00:54:03,300 --> 00:54:06,000
terms of what happens when you multiply a matrix times?

954
00:54:06,000 --> 00:54:06,600
A vector?

955
00:54:06,800 --> 00:54:11,100
How does that end up giving us any insight into how we produce a

956
00:54:11,100 --> 00:54:13,700
camera transform and what even is a camper transform, right?

957
00:54:14,100 --> 00:54:15,500
And that's the part that I want to get to here.

958
00:54:16,100 --> 00:54:17,600
So let's talk about that.

959
00:54:19,100 --> 00:54:20,400
And hopefully that will become clear.

960
00:54:21,100 --> 00:54:25,600
What we wanted to do with an object transform, is we wanted to take

961
00:54:25,600 --> 00:54:30,900
something right from, you know, it's there's really isn't a good word

962
00:54:30,900 --> 00:54:34,900
for this necessarily, but we can say its native space, right?

963
00:54:35,000 --> 00:54:38,400
Or sometimes it's called object space, right?

964
00:54:38,400 --> 00:54:40,100
We're talking about that space again.

965
00:54:40,100 --> 00:54:46,500
This just the like untransformed unperturbed space where we've just

966
00:54:46,500 --> 00:54:48,600
got the, you know, 000 here.

967
00:54:48,800 --> 00:54:52,400
And we've got the x y&z axis here, right?

968
00:54:52,700 --> 00:54:56,000
We're trying to do with that object transform is we're trying to take

969
00:54:56,000 --> 00:54:58,400
some things defined here, I don't know.

970
00:54:58,400 --> 00:55:02,200
Some point, some shape, a polygon, who knows what it is and we're

971
00:55:02,200 --> 00:55:05,200
trying to transform them out to any other thing.

972
00:55:05,200 --> 00:55:08,400
Like maybe these axes are all bent around and they're super weird and

973
00:55:08,400 --> 00:55:09,700
they're scaled all weird.

974
00:55:09,700 --> 00:55:10,300
Right?

975
00:55:10,600 --> 00:55:15,100
And the origin moved somewhere but we still want this shape to be

976
00:55:15,100 --> 00:55:18,500
existing there and so it's just a transform that does that place.

977
00:55:18,700 --> 00:55:19,700
Moment, right?

978
00:55:19,700 --> 00:55:21,900
You might even think of it as a placement transform.

979
00:55:21,900 --> 00:55:25,500
It places something in the world with a certain set of axes, right?

980
00:55:26,400 --> 00:55:28,200
Well, a camera transform it, something it does.

981
00:55:28,200 --> 00:55:32,300
The opposite of that, a camera transform is something that we

982
00:55:32,300 --> 00:55:37,200
conceptualize and often want to do where we have some stuff out in the

983
00:55:37,200 --> 00:55:38,500
world, right?

984
00:55:40,700 --> 00:55:44,100
and we've got some, you know,

985
00:55:46,000 --> 00:55:47,300
we've drawn many times.

986
00:55:47,400 --> 00:55:53,100
We've got some Observer here and they want to view this thing, right?

987
00:55:53,100 --> 00:55:54,500
They want to see this thing.

988
00:55:55,700 --> 00:55:59,400
Well, in order to do any of that stuff that we were doing those

989
00:55:59,400 --> 00:56:00,900
projections, right?

990
00:56:00,900 --> 00:56:03,700
Remember all those projections where we set up the similar triangles,

991
00:56:03,700 --> 00:56:04,200
right?

992
00:56:04,200 --> 00:56:06,300
And we were projecting all the things down on there.

993
00:56:06,300 --> 00:56:08,200
We talked about that just last two weeks ago.

994
00:56:08,200 --> 00:56:10,900
I don't know whatever all that stuff.

995
00:56:13,000 --> 00:56:19,300
All of that assumed that we were already in the space of the camera,

996
00:56:20,100 --> 00:56:20,600
right?

997
00:56:21,200 --> 00:56:27,100
We assumed that all everything had been rotated and moved so that it

998
00:56:27,100 --> 00:56:30,300
was sitting in front of the camera and the cameras.

999
00:56:30,300 --> 00:56:34,000
Coordinate system was native all of that stuff was just assumed

1000
00:56:36,700 --> 00:56:37,400
because,

1001
00:56:39,900 --> 00:56:45,100
You know, we did things like saying, oh yeah, okay, the x-coordinate

1002
00:56:46,000 --> 00:56:49,500
of this thing on the screen right?

1003
00:56:49,500 --> 00:56:52,500
Is going to be equal to the x coordinate of this thing in World space.

1004
00:56:52,500 --> 00:56:55,900
You know over like the Z coordinate of the thing in World space or

1005
00:56:55,900 --> 00:56:56,900
whatever, right?

1006
00:56:58,500 --> 00:56:59,700
it assumes that the

1007
00:57:00,000 --> 00:57:02,100
Of the screen, the out, the result.

1008
00:57:03,200 --> 00:57:06,500
In X is based solely on the input in x.

1009
00:57:08,000 --> 00:57:12,000
And the only way that that is true is if we already moved, you know,

1010
00:57:12,000 --> 00:57:14,200
this is on an angle here, right.

1011
00:57:14,300 --> 00:57:18,800
The x-coordinate on the screen is some complex equation of X and Y.

1012
00:57:18,900 --> 00:57:22,600
Going this way right to produce that x coordinate.

1013
00:57:23,100 --> 00:57:27,600
So we've just been assuming this whole time, that before you did any

1014
00:57:27,600 --> 00:57:31,600
of that projection stuff that we talked about that, you would already

1015
00:57:31,600 --> 00:57:35,800
transformed the world so that it was nice sitting right in front of

1016
00:57:35,800 --> 00:57:37,700
the camera, right?

1017
00:57:38,600 --> 00:57:42,500
Where x coordinates were on the x axis and Y coordinates were on the

1018
00:57:42,500 --> 00:57:43,400
y-axis.

1019
00:57:44,600 --> 00:57:49,000
We worked assuming that the x-axis and y-axis its themselves, right?

1020
00:57:49,400 --> 00:57:50,500
Here's the x-axis.

1021
00:57:51,600 --> 00:57:53,000
The y-axis comes out of the screen.

1022
00:57:53,200 --> 00:57:54,500
This is the Z axis.

1023
00:57:56,500 --> 00:57:57,100
Right.

1024
00:57:58,400 --> 00:58:02,000
We weren't assuming that those axes were all bent in World space

1025
00:58:02,000 --> 00:58:03,900
somewhere like rotated around.

1026
00:58:05,000 --> 00:58:07,900
We assume that all that was taken care of, and that was never a

1027
00:58:07,900 --> 00:58:11,200
problem on handmade hero because we never rotated the camera on

1028
00:58:11,200 --> 00:58:11,900
handmade hero.

1029
00:58:12,200 --> 00:58:16,300
The whole world was just always constructed perfectly in line with the

1030
00:58:16,300 --> 00:58:18,200
cameras, X and y-axis, right?

1031
00:58:18,200 --> 00:58:22,700
We never conceived of it, being tilted, the world like being tilted

1032
00:58:22,700 --> 00:58:26,600
relative to the camera, we never conceived it being spun like this,

1033
00:58:27,100 --> 00:58:27,600
right?

1034
00:58:28,200 --> 00:58:32,900
So we never had to do a camera transform other than just a simple

1035
00:58:32,900 --> 00:58:34,600
offsetting of Z, right?

1036
00:58:34,700 --> 00:58:38,500
All we ever did was assume that the camera was looking down on the

1037
00:58:38,500 --> 00:58:40,400
world, right?

1038
00:58:41,800 --> 00:58:44,900
Here's the world and here's the camera.

1039
00:58:45,200 --> 00:58:48,900
And so all we ever did was like plus or minus Z to move the camera

1040
00:58:48,900 --> 00:58:50,000
like higher or lower.

1041
00:58:50,000 --> 00:58:50,900
That's all we did.

1042
00:58:51,000 --> 00:58:54,600
We never tried to make the camera like come over here and view the

1043
00:58:54,600 --> 00:58:55,800
world from the side.

1044
00:58:57,100 --> 00:58:58,800
And that's exactly what we need to do now.

1045
00:59:01,300 --> 00:59:05,600
So, a camera transform is one that undoes transforms.

1046
00:59:05,600 --> 00:59:09,200
In some sense, you could say, right the world is out there,

1047
00:59:09,200 --> 00:59:13,100
everything's in World space but our camera is implying some other

1048
00:59:13,100 --> 00:59:18,900
space and we want to take a tilted space a rotated space and offset

1049
00:59:18,900 --> 00:59:24,100
space, the space of the camera and we want to make it the origin.

1050
00:59:24,200 --> 00:59:26,600
We want to make 00 appear here.

1051
00:59:26,800 --> 00:59:31,000
We want to make its axes, be the Cardinal axes so that it is

1052
00:59:31,100 --> 00:59:34,000
Eat the camera is perfectly straight in World space.

1053
00:59:34,200 --> 00:59:36,700
It's x axis lines up with the world x-axis.

1054
00:59:36,800 --> 00:59:39,300
It's y-axis is the world's y-axis, right?

1055
00:59:39,500 --> 00:59:44,200
So we're moving the whole world so that the world X Y and Z axes.

1056
00:59:44,200 --> 00:59:47,500
Now, correspond to the cameras, axis, moving everything else so that

1057
00:59:47,500 --> 00:59:51,600
the camera can be at the center of the world pointing in exactly the Z

1058
00:59:51,600 --> 00:59:52,700
direction, right?

1059
00:59:52,700 --> 00:59:53,800
Or the opposite, the Z Direction.

1060
00:59:53,800 --> 00:59:54,500
In this case,

1061
00:59:58,000 --> 00:59:59,000
that's what we need to do.

1062
01:00:00,400 --> 01:00:02,900
And we never done anything like that before, right?

1063
01:00:04,200 --> 01:00:07,700
We did this with position and it was very simple.

1064
01:00:08,300 --> 01:00:09,600
We never did it with rotation.

1065
01:00:09,800 --> 01:00:11,000
How do we do with position?

1066
01:00:11,200 --> 01:00:12,800
Well, the way that we did it with physician with saying, well,

1067
01:00:12,800 --> 01:00:14,700
alright, you know,

1068
01:00:17,400 --> 01:00:18,600
Here's the origin of the world.

1069
01:00:21,000 --> 01:00:22,500
Here's a point that I'm trying to view.

1070
01:00:23,300 --> 01:00:24,200
Here's the camera.

1071
01:00:25,300 --> 01:00:25,800
Right?

1072
01:00:26,400 --> 01:00:31,000
If I want the camera to be as if it was at 0, 0 0, right?

1073
01:00:31,200 --> 01:00:36,700
All I have to do is subtract whatever the cameras position is, right?

1074
01:00:36,800 --> 01:00:40,200
If I subtract C from C, right?

1075
01:00:40,300 --> 01:00:46,600
It becomes 0 and this becomes C write that c - c is 0 so I just

1076
01:00:46,600 --> 01:00:48,900
subtract C from everything, right?

1077
01:00:48,900 --> 01:00:54,900
So I have P, minus C is here and hey look at that we get the world.

1078
01:00:55,500 --> 01:00:56,000
Right.

1079
01:00:56,000 --> 01:00:59,100
Moved back to the origin for the camera.

1080
01:01:00,000 --> 01:01:02,000
So for translation, it's very simple.

1081
01:01:02,200 --> 01:01:04,100
We just negate it right?

1082
01:01:04,100 --> 01:01:08,300
That's all we had to do was take wherever the camera was negate that

1083
01:01:08,500 --> 01:01:09,800
and that is the transform.

1084
01:01:09,800 --> 01:01:12,300
We applied to all the points of the world to move them back.

1085
01:01:12,400 --> 01:01:16,200
So that the cameras at the origin that I think we did do on handmade

1086
01:01:16,200 --> 01:01:17,000
hero, right?

1087
01:01:17,100 --> 01:01:19,700
So in some sense we had a little bit of a camera transform.

1088
01:01:19,900 --> 01:01:21,800
It just wasn't really much of a transform.

1089
01:01:21,800 --> 01:01:22,800
It was just an offset.

1090
01:01:22,800 --> 01:01:27,100
So we could, we could avoid having to think about the more complicated

1091
01:01:27,100 --> 01:01:29,600
aspects of how we view things, right?

1092
01:01:31,100 --> 01:01:34,900
So we now we need the second picture, we need or rather I should say

1093
01:01:34,900 --> 01:01:38,900
we need the the other operation we need to figure out how if we had a

1094
01:01:38,900 --> 01:01:45,800
set of rotated axes how would we go about moving the world so that it

1095
01:01:45,800 --> 01:01:47,500
lined up with them, right?

1096
01:01:47,600 --> 01:01:50,400
So let's say you know obviously we know how to do translation.

1097
01:01:50,400 --> 01:01:52,100
Let's leave that aside for a second.

1098
01:01:52,100 --> 01:01:53,500
Let's say here we are.

1099
01:01:54,100 --> 01:01:57,500
Okay, and the camera is looking this direction.

1100
01:01:58,500 --> 01:02:01,400
Okay, so here's the x-axis.

1101
01:02:02,600 --> 01:02:08,300
Here's the y-axis, but the camera is looking this direction and maybe

1102
01:02:08,300 --> 01:02:11,100
I shouldn't say looking this direction because in 2D, it's hard to say

1103
01:02:11,100 --> 01:02:13,600
looking looking with is going down, the Z axis in our 3D.

1104
01:02:14,200 --> 01:02:16,000
So let's be a little bit more specific here.

1105
01:02:16,200 --> 01:02:18,400
Let's say that this is the cameras.

1106
01:02:20,800 --> 01:02:21,700
X axis.

1107
01:02:22,800 --> 01:02:25,800
And this is the cameras y-axis, okay?

1108
01:02:27,900 --> 01:02:30,700
And so, what that means is, if we had a point, let's say that there

1109
01:02:30,700 --> 01:02:32,300
was a point that was right here.

1110
01:02:33,500 --> 01:02:38,400
Okay, well, if we wanted to produce the version of the world, where

1111
01:02:38,400 --> 01:02:43,100
the cameras axes were aligned with the with the world axes, this whole

1112
01:02:43,100 --> 01:02:46,200
thing has to rotate back down this way, right?

1113
01:02:46,800 --> 01:02:50,100
We want to make it so that CX is here and see why is here which would

1114
01:02:50,100 --> 01:02:52,000
put this point somewhere over here.

1115
01:02:53,000 --> 01:02:53,500
Right.

1116
01:02:54,200 --> 01:02:55,800
Probably like right there, something right?

1117
01:02:55,800 --> 01:02:57,100
It would rotate down this way.

1118
01:03:00,400 --> 01:03:01,300
How do we do that?

1119
01:03:03,200 --> 01:03:05,400
Right, how do we do that?

1120
01:03:06,700 --> 01:03:10,500
And so, to make this a little bit clearer, I'm going to draw it on two

1121
01:03:10,500 --> 01:03:12,100
diagrams, right?

1122
01:03:12,600 --> 01:03:13,200
There's one

1123
01:03:18,400 --> 01:03:19,100
Here's to.

1124
01:03:29,500 --> 01:03:34,000
So what I effectively want to do is I want to turn this into this.

1125
01:03:35,700 --> 01:03:39,000
Here's my pee and here's my P Prime groups.

1126
01:03:40,800 --> 01:03:41,400
Right.

1127
01:03:41,800 --> 01:03:45,500
So remember everything that we've been thinking about so far we've

1128
01:03:45,500 --> 01:03:49,700
been doing this, we've been taking something from An Origin centered

1129
01:03:49,700 --> 01:03:52,700
coordinate system and moving it out somewhere else, right?

1130
01:03:52,700 --> 01:03:55,700
Like when we were rotating our Sprites, we were thinking about the

1131
01:03:55,700 --> 01:03:59,300
Sprites being defined in this space and we're doing them out this way.

1132
01:03:59,300 --> 01:04:02,000
So that now we could rotate our Sprites, right?

1133
01:04:02,100 --> 01:04:03,800
That's the object transform.

1134
01:04:05,000 --> 01:04:07,700
And now we need to figure out how to do the opposite thing.

1135
01:04:08,100 --> 01:04:12,100
We need to do that camera transform, which is we've got the world, all

1136
01:04:12,100 --> 01:04:15,900
rotated out and weird, and we need to move it back so that it aligns

1137
01:04:15,900 --> 01:04:17,800
with our camera, right?

1138
01:04:18,900 --> 01:04:21,200
So, how do we do it?

1139
01:04:21,700 --> 01:04:22,100
Well,

1140
01:04:23,600 --> 01:04:28,200
If you take a look at what we need to produce here, it gives us a

1141
01:04:28,200 --> 01:04:29,600
pretty big clue.

1142
01:04:30,900 --> 01:04:33,700
What are the coordinates of P?

1143
01:04:33,700 --> 01:04:36,400
Prime in this case, right?

1144
01:04:37,400 --> 01:04:43,600
Well, the coordinates of P Prime, if Cy + CX are the new axes, right?

1145
01:04:44,200 --> 01:04:46,700
It's just the perpendicular sort of.

1146
01:04:46,800 --> 01:04:49,300
If I measure what P Prime is.

1147
01:04:49,500 --> 01:04:54,700
It's the perpendicular measure of P Prime against those axes, right?

1148
01:04:54,700 --> 01:04:57,900
That's how we've been doing coordinate system since day one on

1149
01:04:57,900 --> 01:04:58,800
handmade hero.

1150
01:04:59,100 --> 01:05:00,600
You go out along.

1151
01:05:00,700 --> 01:05:04,600
Access to the x coordinate, you go out along the y, axis to the y

1152
01:05:04,600 --> 01:05:06,300
coordinate and you arrive at the point.

1153
01:05:06,800 --> 01:05:08,800
And the opposite is also true.

1154
01:05:09,000 --> 01:05:12,600
If I want to reverse engineer, what the coordinates are, I just have

1155
01:05:12,600 --> 01:05:18,300
to look at where my point is, projected onto those axes and that is

1156
01:05:18,300 --> 01:05:20,200
the coordinates of the point, right?

1157
01:05:21,100 --> 01:05:22,900
We've done this on handmade here.

1158
01:05:22,900 --> 01:05:27,000
Already way, way back when it is the inner product.

1159
01:05:30,700 --> 01:05:31,700
Or dot product.

1160
01:05:34,600 --> 01:05:35,100
Right.

1161
01:05:37,900 --> 01:05:39,300
That is how we measure things.

1162
01:05:39,800 --> 01:05:40,600
Do you remember it?

1163
01:05:41,600 --> 01:05:43,900
When we have a vector,

1164
01:05:45,200 --> 01:05:45,700
Right.

1165
01:05:45,800 --> 01:05:49,000
Here's my Vector, a and some other Vector B.

1166
01:05:51,600 --> 01:05:55,500
if I want to take the dot product or if I take the dot product of

1167
01:05:55,500 --> 01:05:58,900
these two, it is equal to the length of a

1168
01:06:00,300 --> 01:06:03,800
Time's the length of B times the cosine of angle between them.

1169
01:06:06,200 --> 01:06:09,100
Right now, we did this many May times on handmade hero.

1170
01:06:09,100 --> 01:06:12,500
Hopefully, you can dig back and remember it, but this is the inner

1171
01:06:12,500 --> 01:06:13,300
product right here.

1172
01:06:17,400 --> 01:06:18,400
What does that do for us?

1173
01:06:18,700 --> 01:06:22,200
Well, if we suppose that a is unit length,

1174
01:06:23,800 --> 01:06:25,800
Which we can make it because this is an axis.

1175
01:06:25,800 --> 01:06:28,900
If we want to measure things along an axis, this could be an axis

1176
01:06:28,900 --> 01:06:31,500
axes, we can just set them up to be unit length, right?

1177
01:06:31,500 --> 01:06:35,300
We know we can make things unit, length, if a is unit length, then a

1178
01:06:35,300 --> 01:06:38,700
transpose B, this term goes away because it's a 1, right?

1179
01:06:38,700 --> 01:06:40,300
And multiplying by one does nothing.

1180
01:06:41,200 --> 01:06:44,500
We just get the length of B times the cosine of theta.

1181
01:06:45,800 --> 01:06:46,500
What is that?

1182
01:06:46,700 --> 01:06:50,100
Well, if you imagine this right, triangle, right?

1183
01:06:50,900 --> 01:06:53,100
What we would get in this case,

1184
01:06:55,800 --> 01:06:57,700
is this distance, right?

1185
01:06:57,700 --> 01:06:58,300
Why?

1186
01:06:58,500 --> 01:07:03,400
Because the cosine of theta for a right triangle, right?

1187
01:07:05,100 --> 01:07:11,300
The cosine of theta is the ratio of the hypotenuse of the triangle to

1188
01:07:11,400 --> 01:07:12,300
this side.

1189
01:07:13,600 --> 01:07:13,900
Right?

1190
01:07:13,900 --> 01:07:17,300
You could say the interior side, the side along the angle, right?

1191
01:07:17,900 --> 01:07:20,800
The sign is out here, right?

1192
01:07:23,100 --> 01:07:26,600
And so, whatever the length of the hypotenuse is, in this case, that's

1193
01:07:26,600 --> 01:07:27,900
the length of B, right?

1194
01:07:27,900 --> 01:07:30,500
Because that b is the long side of the triangle.

1195
01:07:31,200 --> 01:07:33,600
We know that the length of this side is just the length of the

1196
01:07:33,600 --> 01:07:34,200
hypotenuse times.

1197
01:07:34,200 --> 01:07:36,900
The cosine and the length of this side is just the length of the

1198
01:07:36,900 --> 01:07:38,100
hypotenuse times the sign.

1199
01:07:39,100 --> 01:07:39,700
Right.

1200
01:07:41,300 --> 01:07:43,300
so, if we want to measure,

1201
01:07:44,700 --> 01:07:51,600
A vector a point along an axis somewhere if that axis is unit length,

1202
01:07:51,800 --> 01:07:56,100
the dot product, gives us precisely that it gives us precisely the

1203
01:07:56,100 --> 01:08:00,700
distance along so what can you see in this diagram now?

1204
01:08:01,100 --> 01:08:05,500
Well, I know what these two axes are and I know I could make them unit

1205
01:08:05,500 --> 01:08:05,900
length.

1206
01:08:06,000 --> 01:08:08,100
Even if they weren't unit length, I mean our camera probably going to

1207
01:08:08,100 --> 01:08:09,700
have unit length access to begin with anyway.

1208
01:08:09,700 --> 01:08:12,000
You're probably not going to be scaling the world up and down by some

1209
01:08:12,000 --> 01:08:13,900
weird camera transform, right?

1210
01:08:15,000 --> 01:08:16,800
It's probably going to be like to begin with but even if they were not

1211
01:08:16,800 --> 01:08:20,399
to make them unit length and if their unit length, then all I have to

1212
01:08:20,399 --> 01:08:24,700
do is take the dot product of the point in World space, with those

1213
01:08:24,700 --> 01:08:26,800
World, space camera axes.

1214
01:08:27,000 --> 01:08:29,899
And I get exactly what I needed.

1215
01:08:30,200 --> 01:08:34,899
I get exactly the coordinates of this point in the cameras space as if

1216
01:08:34,899 --> 01:08:38,100
the camera was itself, the world space.

1217
01:08:39,500 --> 01:08:42,000
And that's exactly what I needed that.

1218
01:08:42,000 --> 01:08:45,700
Undoes the rotation and produces this from this.

1219
01:08:45,800 --> 01:08:47,700
That is exactly our camera transform.

1220
01:08:48,000 --> 01:08:52,800
Wouldn't it be nice if there was some way with a matrix to take all of

1221
01:08:52,800 --> 01:08:56,800
our camera axes and Dot product incoming points with them?

1222
01:09:01,000 --> 01:09:02,200
Wouldn't that be swell?

1223
01:09:04,000 --> 01:09:05,200
Yes, it would be swell.

1224
01:09:06,800 --> 01:09:08,899
And it is literally that, right?

1225
01:09:09,000 --> 01:09:14,500
It is exactly what happens when you put your axis coordinates into a

1226
01:09:14,500 --> 01:09:16,800
matrix as the rose.

1227
01:09:17,100 --> 01:09:18,100
Not the columns.

1228
01:09:18,100 --> 01:09:21,200
So instead of taking your X, Y and Z of the x-axis and putting them

1229
01:09:21,200 --> 01:09:22,000
along the column.

1230
01:09:22,100 --> 01:09:26,399
You take your X y&z the excess to put them on the row, Y axis, x y, z,

1231
01:09:26,500 --> 01:09:28,300
yr, z axis XYZ.

1232
01:09:29,100 --> 01:09:31,300
It does exactly that.

1233
01:09:31,300 --> 01:09:35,800
It produces the three dot products of the incoming point, with the

1234
01:09:35,800 --> 01:09:36,399
three.

1235
01:09:36,500 --> 01:09:40,200
These that you have specified and that is exactly what we wanted to

1236
01:09:40,200 --> 01:09:40,700
do.

1237
01:09:41,000 --> 01:09:45,399
That is exactly the equation that I used to produce this result.

1238
01:09:47,300 --> 01:09:47,700
Okay.

1239
01:09:48,700 --> 01:09:52,899
So that's where we get to sort of the final understanding of a

1240
01:09:52,899 --> 01:09:55,100
transfer Matrix, right?

1241
01:09:56,400 --> 01:09:58,400
Which is that the rose,

1242
01:09:59,600 --> 01:10:00,900
Our camera, axes.

1243
01:10:04,000 --> 01:10:05,300
And the columns.

1244
01:10:08,200 --> 01:10:09,400
Our object taxes.

1245
01:10:11,800 --> 01:10:14,200
And you can look at them, either way you can use them either way,

1246
01:10:14,600 --> 01:10:15,100
right?

1247
01:10:17,300 --> 01:10:19,100
now, those of you who

1248
01:10:21,300 --> 01:10:25,400
Like to inquire into things, a little more deeply are, probably

1249
01:10:25,400 --> 01:10:27,600
naturally asking the question at this point.

1250
01:10:28,100 --> 01:10:30,100
How is that possible?

1251
01:10:30,100 --> 01:10:31,200
What does that even mean?

1252
01:10:31,200 --> 01:10:35,800
Why is it that I can look at a matrix this bag of numbers, right?

1253
01:10:36,300 --> 01:10:40,200
And I can choose to put things in the columns and it does one kind of

1254
01:10:40,200 --> 01:10:43,900
transform and I can choose to put things in the rows and it does a

1255
01:10:43,900 --> 01:10:44,900
different transform.

1256
01:10:44,900 --> 01:10:47,900
And yeah, I saw you do the math but isn't that weird?

1257
01:10:48,100 --> 01:10:49,500
It's just weird, right?

1258
01:10:49,500 --> 01:10:50,900
It's spooky that that works.

1259
01:10:51,900 --> 01:10:52,700
How's that working?

1260
01:10:54,000 --> 01:10:54,400
Right.

1261
01:10:55,500 --> 01:10:57,400
Well, here's where that transpose.

1262
01:11:00,300 --> 01:11:04,900
As a little bit of insight to the scenario, right?

1263
01:11:06,200 --> 01:11:12,600
One thing we know about Matrix transposing, is that it does exactly

1264
01:11:12,600 --> 01:11:15,700
the flip between these two things, right?

1265
01:11:17,700 --> 01:11:23,900
If I have a matrix where I put x y,

1266
01:11:26,200 --> 01:11:29,300
And Z Down The Columns, right?

1267
01:11:29,600 --> 01:11:31,900
If I was to transpose that Matrix

1268
01:11:33,200 --> 01:11:35,700
I would get this.

1269
01:11:42,500 --> 01:11:46,900
Right, I mean all I'm doing is exactly on the diagonal stays unchanged

1270
01:11:46,900 --> 01:11:52,100
but in each case, the, the two pieces of what was their swap, right?

1271
01:11:52,200 --> 01:11:55,400
So in, you know, and I'll do it out just in case, it's not clear

1272
01:11:55,400 --> 01:11:59,800
enough I guess, XX, XY XZ y, XY.

1273
01:12:00,000 --> 01:12:03,600
Y YZ ZX z y.

1274
01:12:03,600 --> 01:12:08,500
ZZ if I transpose this Matrix I just get it.

1275
01:12:08,700 --> 01:12:11,900
You know these swap these swap these swap, right?

1276
01:12:11,900 --> 01:12:15,100
I'm just flipping the indices of the things transfers like we've done

1277
01:12:15,100 --> 01:12:17,300
many times before XX.

1278
01:12:17,500 --> 01:12:25,700
XY, XZ, y XY, y YZ, Z XZ, y ZZ

1279
01:12:26,500 --> 01:12:27,100
Right.

1280
01:12:27,100 --> 01:12:31,500
It does exactly this this operation, the transpose flips, the rows and

1281
01:12:31,500 --> 01:12:39,700
columns and produces the The Matrix with them in the other location,

1282
01:12:40,000 --> 01:12:40,300
right?

1283
01:12:40,300 --> 01:12:43,500
When the other sort of Orient, I don't know what the right way to say

1284
01:12:43,500 --> 01:12:43,600
it.

1285
01:12:43,600 --> 01:12:47,000
Is it takes the columns things that we're going columnar and makes

1286
01:12:47,000 --> 01:12:48,900
them go row, right?

1287
01:12:50,300 --> 01:12:55,900
So what do we know about that sort of transpose thing?

1288
01:12:56,900 --> 01:12:57,400
Way back.

1289
01:12:57,400 --> 01:13:00,500
When on handmade hero, you have to do a deep dig here and go back and

1290
01:13:00,500 --> 01:13:01,400
watch that episode.

1291
01:13:02,100 --> 01:13:06,100
We said that for an orthogonal Matrix

1292
01:13:11,700 --> 01:13:15,000
The inverse is the transpose.

1293
01:13:20,500 --> 01:13:25,400
And we spent like a whole episode or two trying to show, how that was

1294
01:13:25,400 --> 01:13:25,700
true.

1295
01:13:25,700 --> 01:13:29,600
When we went through a bunch of different things where we tried to

1296
01:13:29,600 --> 01:13:33,400
kind of like demonstrate ways in that in which, that worked, right?

1297
01:13:35,200 --> 01:13:38,500
Well, here we get finally to how this stuff is actually working

1298
01:13:38,500 --> 01:13:43,100
internally, right when we look at what actually happens here.

1299
01:13:44,500 --> 01:13:48,200
The camera transform in the object, transform our, the opposite type

1300
01:13:48,200 --> 01:13:49,900
of transfer, right?

1301
01:13:50,300 --> 01:13:55,100
We end up in a situation where we take a camera and we move it from,

1302
01:13:55,100 --> 01:13:57,800
you know, a camera transform of the thing that moves something from

1303
01:13:57,800 --> 01:14:01,900
World space back into like, sort of an Origins system for the axes and

1304
01:14:01,900 --> 01:14:02,400
the opposite.

1305
01:14:02,400 --> 01:14:05,300
Juvenile transfer May takes things from a place where they're defined

1306
01:14:05,300 --> 01:14:09,700
around the origin and the axis system, basic Essence and moves them to

1307
01:14:09,700 --> 01:14:12,200
a different axis system and different origin, right?

1308
01:14:12,700 --> 01:14:14,100
And the only difference between those two

1309
01:14:14,300 --> 01:14:16,200
Is whether we put things in the column, or whether you put things in

1310
01:14:16,200 --> 01:14:21,800
the road, the reason for that is specifically that we are inverting

1311
01:14:21,800 --> 01:14:22,800
the transform.

1312
01:14:23,000 --> 01:14:25,600
That's what we're actually doing here, right?

1313
01:14:25,600 --> 01:14:27,600
And we're inverting the transform.

1314
01:14:28,900 --> 01:14:32,900
By transposing it because hey these happen to be unit axes that I was

1315
01:14:32,900 --> 01:14:33,800
talking about there, right?

1316
01:14:33,800 --> 01:14:36,500
That dot product thing, only works if these things are unit, actually,

1317
01:14:36,700 --> 01:14:38,800
if they're not there's an inverse thing that has to happen with

1318
01:14:38,800 --> 01:14:42,400
scaling and it's not worth us going into that right now, but it can

1319
01:14:42,700 --> 01:14:45,200
structure continues the further you dive into it.

1320
01:14:45,500 --> 01:14:46,500
It's not arbitrary.

1321
01:14:47,400 --> 01:14:51,000
So when you actually happen to have a bunch of unit actually, sir, and

1322
01:14:51,000 --> 01:14:54,500
you flip them like that, you actually get the opposite transform,

1323
01:14:54,500 --> 01:14:58,000
which is exactly what we see when we put things into rows or into.

1324
01:14:58,400 --> 01:14:59,600
Eames right.

1325
01:15:00,000 --> 01:15:03,300
A math actually works out very deeply in this way.

1326
01:15:03,400 --> 01:15:06,200
It actually the structure follows all the way through and it keeps

1327
01:15:06,200 --> 01:15:10,800
going even if you start talking about things where you have shear and

1328
01:15:10,800 --> 01:15:13,700
scale and stuff like that, it just becomes more complicated than

1329
01:15:13,700 --> 01:15:14,600
simply transposing.

1330
01:15:14,600 --> 01:15:17,700
There's more to the inverse and there's more to that but that's

1331
01:15:17,700 --> 01:15:18,600
basically what it is.

1332
01:15:20,200 --> 01:15:26,200
So the reason that this happens to work is actually because inverting

1333
01:15:26,200 --> 01:15:31,500
a transform is by definition solving, the equations that lead to this,

1334
01:15:31,800 --> 01:15:32,300
right?

1335
01:15:32,300 --> 01:15:36,300
If I have an object transform and I do the inverse of the Matrix which

1336
01:15:36,300 --> 01:15:38,400
is something we haven't really covered in much depth.

1337
01:15:39,200 --> 01:15:41,800
If I do the inverse of the Matrix, I get the opposite transform,

1338
01:15:41,800 --> 01:15:43,100
that's what inverse means.

1339
01:15:43,100 --> 01:15:46,200
It's the thing that would take the result of the previous transform

1340
01:15:46,200 --> 01:15:48,900
and turn it back into the original input, right?

1341
01:15:49,500 --> 01:15:49,800
You know.

1342
01:15:50,400 --> 01:15:54,800
If I have P Prime equals AP write the inverse of the Matrix is the

1343
01:15:54,800 --> 01:15:57,400
thing that would have done the opposite operation.

1344
01:15:57,500 --> 01:16:00,600
If we start with a point and we multiplied by a matrix and get a

1345
01:16:00,600 --> 01:16:04,400
result if we inverted that Matrix we could multiply by the result and

1346
01:16:04,400 --> 01:16:05,900
get back the input, right?

1347
01:16:06,400 --> 01:16:11,400
Well in this case, all we're doing is taking advantage of in some

1348
01:16:11,400 --> 01:16:12,000
sense.

1349
01:16:12,600 --> 01:16:16,100
The fact that a inverse equals a transpose.

1350
01:16:16,600 --> 01:16:19,800
In the case where we have nice unit axes, that me,

1351
01:16:20,000 --> 01:16:24,400
Eat at right angles like we do in the case of what we're working with

1352
01:16:24,400 --> 01:16:25,000
right?

1353
01:16:25,500 --> 01:16:29,600
And so because of that, it just so happens that the inverse transform.

1354
01:16:29,600 --> 01:16:33,800
Therefore is very easy to conceptualize and use.

1355
01:16:33,900 --> 01:16:37,700
All we have to do is go from putting things in columns to putting them

1356
01:16:37,700 --> 01:16:40,900
in rows because the transform is the inverse.

1357
01:16:41,200 --> 01:16:44,900
It is the inverse operation in this limited case.

1358
01:16:48,500 --> 01:16:52,100
That is not important to understand for the purposes of what we're

1359
01:16:52,100 --> 01:16:52,500
doing.

1360
01:16:52,600 --> 01:16:55,000
But for people who want to dig deeper into the math and get more

1361
01:16:55,000 --> 01:16:58,200
acquainted with linear algebra, just thought I'd point that out as an

1362
01:16:58,200 --> 01:17:01,700
interesting Avenue to look down and understand all.

1363
01:17:01,700 --> 01:17:05,100
We really care about in handmade hero is the fundamental activity,

1364
01:17:05,300 --> 01:17:08,600
which I just showed, which is that we want a bunch of dot products and

1365
01:17:08,600 --> 01:17:09,600
putting things in the Roses.

1366
01:17:09,600 --> 01:17:13,100
What gets us those dot products, right?

1367
01:17:17,000 --> 01:17:17,400
Okay.

1368
01:17:20,200 --> 01:17:21,300
So now let's put it all together.

1369
01:17:25,900 --> 01:17:29,600
What we want to do is we want some rotations, right?

1370
01:17:29,600 --> 01:17:31,100
We've got a rotation Matrix.

1371
01:17:31,100 --> 01:17:33,700
We've got a rotation Matrix around X, right?

1372
01:17:36,500 --> 01:17:37,600
Around why, whatever?

1373
01:17:38,200 --> 01:17:40,700
So we've got some rotations that we might want to do to the camera.

1374
01:17:40,900 --> 01:17:41,400
Right?

1375
01:17:41,400 --> 01:17:44,400
We want to do something where we're saying like Okay let's apply

1376
01:17:44,400 --> 01:17:48,500
rotation zero, that's a private station one, maybe even rotation to, I

1377
01:17:48,500 --> 01:17:48,700
don't know.

1378
01:17:48,700 --> 01:17:51,100
I think we're probably only going to have two rotations, right?

1379
01:17:52,000 --> 01:17:55,300
And then we want to take those rotations.

1380
01:17:55,300 --> 01:17:59,100
We probably want a translation as well, right?

1381
01:17:59,300 --> 01:17:59,800
And we want to

1382
01:18:00,000 --> 01:18:00,600
Combining these.

1383
01:18:00,600 --> 01:18:02,700
So let's talk about how we're going to actually do this.

1384
01:18:03,700 --> 01:18:08,400
All right, so we've got a situation where we've structured our world

1385
01:18:08,900 --> 01:18:12,200
so that this is the Z axis that comes out of the plane, right?

1386
01:18:13,100 --> 01:18:19,100
And then we've got sort of our x-axis, and our y-axis, look like this,

1387
01:18:19,400 --> 01:18:19,900
right?

1388
01:18:20,300 --> 01:18:23,500
And the camera kind of looks down on the world, right?

1389
01:18:24,500 --> 01:18:25,200
By default.

1390
01:18:27,700 --> 01:18:28,700
So that's what we're dealing with.

1391
01:18:29,800 --> 01:18:34,600
So what we want to do here is we would like to allow ourselves to

1392
01:18:34,600 --> 01:18:36,800
rotate this camera around.

1393
01:18:37,700 --> 01:18:38,300
Right?

1394
01:18:38,400 --> 01:18:42,900
We would like to have a way for us to produce a rotated version of

1395
01:18:42,900 --> 01:18:44,600
this camera with rotated.

1396
01:18:44,600 --> 01:18:45,200
Axes.

1397
01:18:45,700 --> 01:18:49,000
You know, I'm saying and we'd like to be able to produce multiple of

1398
01:18:49,000 --> 01:18:52,100
these rotations because what we might want to do is like rotate the

1399
01:18:52,100 --> 01:18:55,900
camera down to here but then also rotate it around, right?

1400
01:18:56,000 --> 01:19:01,900
So we would like to be able to orbit the camera around the world,

1401
01:19:02,300 --> 01:19:02,900
right?

1402
01:19:03,100 --> 01:19:04,500
So with this is typically called

1403
01:19:07,200 --> 01:19:12,500
We like to be able to orbit the camera around the world this way and

1404
01:19:12,500 --> 01:19:13,900
end this way, right?

1405
01:19:13,900 --> 01:19:18,900
And this is I don't really know what you would call that specifically

1406
01:19:18,900 --> 01:19:19,200
this.

1407
01:19:19,300 --> 01:19:22,600
I think this one's awesome called Azimuth but don't know what you call

1408
01:19:22,600 --> 01:19:22,900
this one.

1409
01:19:22,900 --> 01:19:26,600
Typically because we're kind of, we're rotating around it, right?

1410
01:19:26,700 --> 01:19:29,600
And all this time we want to be looking kind of in at the world,

1411
01:19:29,600 --> 01:19:30,000
right?

1412
01:19:30,000 --> 01:19:34,500
So we're trying to kind of have the camera, be able to spin around the

1413
01:19:34,700 --> 01:19:36,600
the world.

1414
01:19:37,300 --> 01:19:41,400
And always be looking kind of back at work at like this Focus point,

1415
01:19:41,400 --> 01:19:41,700
right?

1416
01:19:41,700 --> 01:19:44,900
Whatever the point in the world here is that you know where the center

1417
01:19:44,900 --> 01:19:48,500
of the room that were on, let's say we want to be able to spin it all

1418
01:19:48,500 --> 01:19:52,000
around and all around vertically as well.

1419
01:19:52,900 --> 01:19:54,500
We just want to be able to do that.

1420
01:19:56,000 --> 01:20:02,100
And, and get a view that matches that, right?

1421
01:20:02,700 --> 01:20:06,700
So what we need to do in order to do that is we need to produce two

1422
01:20:06,700 --> 01:20:08,400
things, right?

1423
01:20:08,800 --> 01:20:11,000
Because we just showed how we could, you know, how we can work through

1424
01:20:11,000 --> 01:20:14,500
the math for doing camera transfer, we need to produce two things.

1425
01:20:14,800 --> 01:20:19,900
First of all, we need to produce the axes of the camera.

1426
01:20:22,000 --> 01:20:22,800
Right?

1427
01:20:22,900 --> 01:20:27,400
Because we need to know what those are in order to produce the camera

1428
01:20:27,400 --> 01:20:28,100
transform.

1429
01:20:28,200 --> 01:20:31,500
So, wherever the camera ends up, we need to know where its axes are

1430
01:20:31,600 --> 01:20:36,400
and we know what those look like for any given point.

1431
01:20:38,800 --> 01:20:40,900
We have an idea of what we're trying to get here.

1432
01:20:41,100 --> 01:20:43,700
If this is the x y&z of the world, right?

1433
01:20:43,700 --> 01:20:47,600
And the camera is out here, we know that if the cameras looking this

1434
01:20:47,600 --> 01:20:50,800
direction, we know Z goes the opposite direction of that, right?

1435
01:20:50,800 --> 01:20:54,000
Because member Zee comes back at the camera in our traditional form.

1436
01:20:54,200 --> 01:20:55,900
So we know that Z comes back at it.

1437
01:20:56,000 --> 01:20:58,300
Why is pointing up right?

1438
01:20:58,300 --> 01:20:59,800
And X is pointing out to the side.

1439
01:21:00,400 --> 01:21:03,400
So we know that for any camera out here, that's viewing the world this

1440
01:21:03,400 --> 01:21:03,700
way.

1441
01:21:03,700 --> 01:21:08,300
You know, here's our I point looking out, we know that Z comes out at

1442
01:21:08,300 --> 01:21:11,900
us and we know that our X Y is like that sort of like if the director

1443
01:21:11,900 --> 01:21:15,500
holds up his hand like that, you know, that's our x y

1444
01:21:16,900 --> 01:21:18,000
That we're looking at.

1445
01:21:18,000 --> 01:21:21,500
So we know, we need to produce something like that.

1446
01:21:21,500 --> 01:21:23,200
So we need to produce those axes.

1447
01:21:23,200 --> 01:21:26,400
And then, we also need to produce the position, right?

1448
01:21:26,400 --> 01:21:30,000
So we need to be able to orbit our camera around and be able to

1449
01:21:30,000 --> 01:21:36,200
produce that that position as well, so that we can transform the world

1450
01:21:36,200 --> 01:21:40,300
to be around that, right to be centered around that.

1451
01:21:40,300 --> 01:21:42,300
So we need to do both of those things.

1452
01:21:42,300 --> 01:21:44,500
So, how do we do that?

1453
01:21:44,500 --> 01:21:46,800
Well, we can do.

1454
01:21:47,000 --> 01:21:51,100
All of this now with the transform stuff that we wrote and I think we

1455
01:21:51,100 --> 01:21:54,000
I don't think we wrote a vector transform so we're going to have to

1456
01:21:54,000 --> 01:21:55,400
probably just quickly go do that.

1457
01:21:55,500 --> 01:21:59,200
It's a much simpler case than the Matrix transform because it's just

1458
01:21:59,200 --> 01:22:02,000
doing one column basically, but we haven't written.

1459
01:22:02,000 --> 01:22:03,200
So we would have to write it.

1460
01:22:03,500 --> 01:22:03,900
Okay.

1461
01:22:06,200 --> 01:22:10,500
So bugging me stuck on the zipper.

1462
01:22:12,800 --> 01:22:16,800
So we can actually do all of this with what we wrote relatively easily

1463
01:22:16,800 --> 01:22:20,600
because we know where the camera starts, right?

1464
01:22:20,600 --> 01:22:25,700
We know that the camera starts up here here at Loops.

1465
01:22:25,700 --> 01:22:26,100
I don't know why.

1466
01:22:26,100 --> 01:22:28,600
That was why supposed to be easy?

1467
01:22:30,600 --> 01:22:31,700
We are the camera starts up here.

1468
01:22:31,700 --> 01:22:35,700
The z-axis points towards it and we know that sort of the the y-axis

1469
01:22:35,700 --> 01:22:38,400
and the x-axis are look like that, right?

1470
01:22:39,600 --> 01:22:42,800
So, what we could do if we wanted to, we know this point we know that

1471
01:22:42,800 --> 01:22:45,400
it's just X and Y 0, right?

1472
01:22:45,400 --> 01:22:51,100
We know it's zero zero and then it's however, far the camera is off of

1473
01:22:51,100 --> 01:22:51,500
zero.

1474
01:22:51,500 --> 01:22:53,900
It's our high up the cameras, right?

1475
01:22:53,900 --> 01:22:55,500
So it's just the height of the camera.

1476
01:22:56,000 --> 01:22:59,000
So we know how to start out where we are.

1477
01:23:00,900 --> 01:23:05,400
So then to rotate it around all we would have to really do is build a

1478
01:23:05,400 --> 01:23:07,300
rotation Matrix, right?

1479
01:23:07,700 --> 01:23:10,000
And apply that rotation Matrix to the point.

1480
01:23:10,000 --> 01:23:12,900
Once we have a rotation Matrix we can rotate it.

1481
01:23:13,000 --> 01:23:17,600
And so if we want to do for example let's say we want to do an extra

1482
01:23:17,600 --> 01:23:20,200
Tatian so that would pitch us up and down, right?

1483
01:23:20,200 --> 01:23:24,500
Maybe the mouse pitch is up and down so we can lean this way, right?

1484
01:23:24,900 --> 01:23:30,500
That is just going to be a rotation about the x axis so we can have

1485
01:23:30,700 --> 01:23:33,200
One Theta that's like an X axis rotation.

1486
01:23:36,100 --> 01:23:38,800
And we can produce that Matrix we can take this point.

1487
01:23:38,800 --> 01:23:41,200
This is the camera point to start with, right?

1488
01:23:41,200 --> 01:23:42,100
That's our point.

1489
01:23:42,300 --> 01:23:47,200
And we can apply that X rotation Matrix to the point that would rotate

1490
01:23:47,200 --> 01:23:51,300
the the point around and we would get the new location of the camera.

1491
01:23:53,200 --> 01:23:53,700
Right.

1492
01:23:54,900 --> 01:23:59,200
Furthermore, we know what the cameras axes are.

1493
01:24:00,300 --> 01:24:03,200
We know the cameras axes are just the basic axes there.

1494
01:24:03,200 --> 01:24:06,200
Just z y and x, right?

1495
01:24:06,200 --> 01:24:11,000
The cameras axes are aligned with the the world axis, right?

1496
01:24:11,300 --> 01:24:15,100
So if we want to know what those camera axes are, when we do the

1497
01:24:15,100 --> 01:24:18,900
rotation, we can do the same thing to the axes, right?

1498
01:24:19,500 --> 01:24:22,900
So we could take the cameras axes and multiply each of them, but hey,

1499
01:24:23,000 --> 01:24:25,500
the camera is actually is just the identity Matrix, right?

1500
01:24:25,600 --> 01:24:29,400
It's just 1 0, 0, 0, 1 0 0 0 1.

1501
01:24:30,000 --> 01:24:35,700
So, really the axis of the camera are just the Matrix, right?

1502
01:24:35,700 --> 01:24:38,700
It's just, hey, what is that camera Matrix?

1503
01:24:40,100 --> 01:24:43,900
Well, it's the rotation Matrix times, the starting camera Matrix, this

1504
01:24:44,100 --> 01:24:45,400
is the identity Matrix.

1505
01:24:45,600 --> 01:24:47,400
It doesn't have any rotation in it.

1506
01:24:47,400 --> 01:24:49,100
It's just straight up and down, right?

1507
01:24:50,700 --> 01:24:53,000
so, this term goes away and this is just RX

1508
01:24:54,100 --> 01:24:54,600
Right.

1509
01:24:55,200 --> 01:24:58,900
So we know that what we produce for our transformation is also is the

1510
01:24:58,900 --> 01:24:59,500
axes.

1511
01:24:59,800 --> 01:25:04,800
If we know what the axes are, then we can directly put those axes

1512
01:25:06,400 --> 01:25:11,500
into our into our Matrix and produce the dot products that we wanted,

1513
01:25:11,800 --> 01:25:12,300
right?

1514
01:25:14,200 --> 01:25:14,600
Okay.

1515
01:25:17,000 --> 01:25:17,400
so,

1516
01:25:20,300 --> 01:25:25,400
I feel like I've thrown a lot at you here and I do apologize for that

1517
01:25:25,700 --> 01:25:30,700
but we've got one last thing to cover before we can type in the code.

1518
01:25:30,800 --> 01:25:34,400
Hopefully all of that made sense and hopefully it's clear what we

1519
01:25:34,400 --> 01:25:36,200
would do here, right?

1520
01:25:36,500 --> 01:25:38,200
But we have one more problem.

1521
01:25:40,400 --> 01:25:41,900
And that is combining.

1522
01:25:44,300 --> 01:25:45,200
Translation.

1523
01:25:48,300 --> 01:25:49,200
And rotation.

1524
01:25:51,800 --> 01:25:53,000
In camera transforms.

1525
01:25:59,200 --> 01:25:59,700
Right?

1526
01:26:01,300 --> 01:26:02,600
So this gets a little trickier.

1527
01:26:03,300 --> 01:26:04,700
Why is it get a little trickier?

1528
01:26:04,800 --> 01:26:12,200
Well look what happens when we multiply our matrix by a point with

1529
01:26:12,200 --> 01:26:13,000
translation?

1530
01:26:14,400 --> 01:26:15,200
We get.

1531
01:26:24,600 --> 01:26:25,900
What I've said many times before.

1532
01:26:31,600 --> 01:26:38,900
We get a result that is p x times X Plus p y times y plus p z times Z

1533
01:26:39,600 --> 01:26:40,300
Plus t.

1534
01:26:42,700 --> 01:26:43,100
Okay.

1535
01:26:44,600 --> 01:26:45,400
That's what we get.

1536
01:26:46,300 --> 01:26:50,800
If we want to make this a camera transform, like we said before, it's

1537
01:26:50,800 --> 01:26:52,300
fairly straightforward.

1538
01:26:52,300 --> 01:26:53,900
What happens with our axes?

1539
01:26:54,300 --> 01:26:55,600
We just flip them around.

1540
01:27:00,600 --> 01:27:04,200
and we get the measure that we wanted, we get

1541
01:27:06,400 --> 01:27:08,100
X transpose p.

1542
01:27:08,800 --> 01:27:12,100
Y transpose p, z transpose P.

1543
01:27:12,500 --> 01:27:13,100
Plus t.

1544
01:27:15,400 --> 01:27:15,900
Right?

1545
01:27:16,000 --> 01:27:17,700
And that's exactly the measure we wanted.

1546
01:27:18,500 --> 01:27:19,600
Problem is

1547
01:27:21,300 --> 01:27:22,300
Do you see the problem?

1548
01:27:23,600 --> 01:27:27,000
You see the problem, maybe, you don't see the problem.

1549
01:27:27,000 --> 01:27:28,700
You probably don't see the problem because you've never looked at this

1550
01:27:28,700 --> 01:27:30,500
stuff before, and it's pretty hard to see problems.

1551
01:27:30,800 --> 01:27:32,000
We've never looked at stuff before.

1552
01:27:32,100 --> 01:27:38,300
This is the problem, the problem is in both cases, the translation

1553
01:27:38,300 --> 01:27:41,400
component is just add it at the end.

1554
01:27:41,700 --> 01:27:42,200
Why?

1555
01:27:42,300 --> 01:27:46,100
Because it's the same transfer, right again, when we look at these

1556
01:27:46,100 --> 01:27:48,600
things differently, we're like, well, we can stuff some stuff in here

1557
01:27:48,600 --> 01:27:50,600
and get a different conceptual result.

1558
01:27:50,600 --> 01:27:52,800
It's still a matrix, multiply the end of the day, it's still only

1559
01:27:52,800 --> 01:27:53,300
does.

1560
01:27:53,500 --> 01:27:54,000
Thing.

1561
01:27:54,200 --> 01:27:56,900
And we can conceptualize that thing in different ways to learn how to

1562
01:27:56,900 --> 01:27:58,900
construct, matrices that do things we want.

1563
01:27:59,500 --> 01:28:01,700
But at the end of the day, the math isn't changing underneath.

1564
01:28:02,100 --> 01:28:04,600
And what we know is that the translation always gets out at the end.

1565
01:28:04,700 --> 01:28:07,900
So the question is for a camera transform?

1566
01:28:09,600 --> 01:28:11,600
What does the translation have to be?

1567
01:28:12,000 --> 01:28:16,100
We would like it to be the negative of the camera position, wouldn't

1568
01:28:16,100 --> 01:28:16,400
we?

1569
01:28:16,600 --> 01:28:19,700
Because just like in the object transform, we put the object's

1570
01:28:19,700 --> 01:28:20,400
position.

1571
01:28:21,700 --> 01:28:25,400
And here and it places things out in the world.

1572
01:28:25,400 --> 01:28:28,900
We would love to have this be the cameras position, right?

1573
01:28:28,900 --> 01:28:31,600
And we could just set it to be negative and then it would be 0

1574
01:28:31,600 --> 01:28:33,200
subtract the camera position.

1575
01:28:33,400 --> 01:28:33,900
Great.

1576
01:28:33,900 --> 01:28:34,500
Right?

1577
01:28:35,500 --> 01:28:36,500
Not great.

1578
01:28:36,700 --> 01:28:38,000
Why is it not great?

1579
01:28:38,100 --> 01:28:42,700
Because the thing we wanted was the opposite of this transform.

1580
01:28:43,100 --> 01:28:46,100
And by doing the opposite of this transform, what we would have needed

1581
01:28:46,100 --> 01:28:47,700
to have done, right?

1582
01:28:48,900 --> 01:28:51,300
Is we would have needed to have subtracted.

1583
01:28:51,400 --> 01:28:53,600
Before we took the measure.

1584
01:28:55,500 --> 01:29:00,400
So, what we really wanted was X transpose P - camera.

1585
01:29:03,500 --> 01:29:07,300
Y transpose P - camera position, right?

1586
01:29:07,900 --> 01:29:10,800
Z transpose P - camera position.

1587
01:29:11,600 --> 01:29:12,900
That's what we wanted.

1588
01:29:12,900 --> 01:29:14,400
We wanted

1589
01:29:16,300 --> 01:29:19,100
If we have this right, I'll draw that picture again.

1590
01:29:19,600 --> 01:29:24,100
Here's the camera, here is the point, the axis of the world look like

1591
01:29:24,100 --> 01:29:24,600
this.

1592
01:29:26,200 --> 01:29:28,100
And maybe they're out here, right?

1593
01:29:28,900 --> 01:29:34,100
What we wanted to do was we wanted to measure this point from the

1594
01:29:34,100 --> 01:29:40,900
origin, which we said, was at the camera right along the axes along

1595
01:29:40,900 --> 01:29:41,900
these axes.

1596
01:29:42,300 --> 01:29:43,600
That's what we were trying to do.

1597
01:29:44,300 --> 01:29:46,900
But what this is going to do, right?

1598
01:29:46,900 --> 01:29:51,700
What this transforms going to do is it's going to measure them along

1599
01:29:51,700 --> 01:29:54,100
the axes before.

1600
01:29:54,300 --> 01:29:55,100
This becomes the

1601
01:29:55,500 --> 01:29:55,700
In.

1602
01:29:56,100 --> 01:29:59,900
So this is going to be the origin prior to

1603
01:30:00,000 --> 01:30:03,200
You know, before we do that subtraction, this is going to be the

1604
01:30:03,200 --> 01:30:04,700
origin, right?

1605
01:30:04,900 --> 01:30:08,000
So what we're really going to do is we're going to measure it along

1606
01:30:08,000 --> 01:30:09,100
this axis.

1607
01:30:09,400 --> 01:30:13,600
So rather than getting the distance here we're actually going to get

1608
01:30:13,600 --> 01:30:15,200
the distance here.

1609
01:30:18,900 --> 01:30:19,400
Right.

1610
01:30:20,800 --> 01:30:23,100
It's not what we wanted, right?

1611
01:30:23,100 --> 01:30:29,600
It's a problem because while it's correct in terms of the rotation

1612
01:30:29,600 --> 01:30:32,800
it's going to do which is fine, right?

1613
01:30:34,400 --> 01:30:37,500
The rotation will come out uncorrected but the position will all be

1614
01:30:37,500 --> 01:30:40,600
wrong because it's measuring around the wrong origin.

1615
01:30:41,500 --> 01:30:47,100
So the question is, how do we turn this into this, right?

1616
01:30:47,100 --> 01:30:48,800
How do we make that happen?

1617
01:30:50,400 --> 01:30:51,500
Well, lucky for us.

1618
01:30:52,300 --> 01:30:54,300
The dot product is distributive.

1619
01:30:54,500 --> 01:30:55,700
It's a Distributive operator, right?

1620
01:30:55,700 --> 01:30:59,300
It's just scalar so we can actually turn this into an equation.

1621
01:30:59,300 --> 01:31:00,400
That's easier to work with.

1622
01:31:00,500 --> 01:31:02,800
This can actually be turned into X transpose.

1623
01:31:02,800 --> 01:31:05,000
P, minus X transpose, c.

1624
01:31:05,400 --> 01:31:06,600
Y, transpose P.

1625
01:31:06,900 --> 01:31:08,400
Minus the Y transpose.

1626
01:31:09,900 --> 01:31:11,200
C z.

1627
01:31:11,200 --> 01:31:12,100
Transpose P.

1628
01:31:12,200 --> 01:31:12,700
Minus Z.

1629
01:31:12,700 --> 01:31:14,400
Transpose P c--.

1630
01:31:14,800 --> 01:31:17,300
Write this.

1631
01:31:18,300 --> 01:31:19,800
Is this, right?

1632
01:31:19,800 --> 01:31:20,900
These are the same equation.

1633
01:31:21,000 --> 01:31:25,200
I just distributed this out, so if we have to shoehorn our transform

1634
01:31:25,200 --> 01:31:27,400
into this actually, not so bad.

1635
01:31:27,600 --> 01:31:30,600
This is this Vector.

1636
01:31:31,200 --> 01:31:37,300
So, this Vector simply has to equal this, which means that all we have

1637
01:31:37,300 --> 01:31:42,900
to do to construct this Matrix is stuff into the T component, the

1638
01:31:42,900 --> 01:31:47,900
cameras position, pre negated, and Dot product ID with our

1639
01:31:48,100 --> 01:31:49,600
Maxi's right.

1640
01:31:49,600 --> 01:31:51,300
And hey, what is this?

1641
01:31:52,200 --> 01:31:54,600
Well, it's just the Matrix time.

1642
01:31:54,600 --> 01:31:55,100
See

1643
01:31:57,600 --> 01:31:58,000
Right?

1644
01:31:58,000 --> 01:31:59,600
It's just the Matrix times C.

1645
01:32:00,800 --> 01:32:04,700
So all we really need to do is first transform the camera position by

1646
01:32:04,700 --> 01:32:08,600
The Matrix and negate it stuff that into the transform.

1647
01:32:09,700 --> 01:32:14,000
And then when we multiply the point by this composite transform, it

1648
01:32:14,000 --> 01:32:18,500
will produce the residual terms we needed to make ourselves compute

1649
01:32:18,500 --> 01:32:21,000
this instead of this

1650
01:32:25,100 --> 01:32:25,900
Does that make sense?

1651
01:32:26,200 --> 01:32:27,400
Hopefully, it makes some sense.

1652
01:32:29,000 --> 01:32:31,400
So we need to do that or our positions will come out wrong.

1653
01:32:32,300 --> 01:32:33,900
So let's take a look at how we build that.

1654
01:32:34,700 --> 01:32:35,200
Right.

1655
01:32:35,600 --> 01:32:37,600
Let's take a look at how we build the camera transform.

1656
01:32:39,600 --> 01:32:41,500
So let's say I've got a in line here.

1657
01:32:42,100 --> 01:32:45,200
I'm going to do, I don't know why it's in line actually.

1658
01:32:50,800 --> 01:32:53,400
And I want to build a camera transform the way I want to build that

1659
01:32:53,400 --> 01:32:54,600
camera transform is.

1660
01:32:54,600 --> 01:32:58,100
I want to assume that I'm going to have a set of axes that I'm going

1661
01:32:58,100 --> 01:32:59,800
to use and I

1662
01:33:00,000 --> 01:33:02,500
Going to have a position that I want to use, right?

1663
01:33:03,700 --> 01:33:06,100
And I want to produce the 4x4 that does that.

1664
01:33:06,800 --> 01:33:08,300
So I'm going to have the x axis.

1665
01:33:08,400 --> 01:33:11,000
I'm going to have the y-axis from going to the Z axis and I'm going to

1666
01:33:11,000 --> 01:33:11,700
have the position.

1667
01:33:13,000 --> 01:33:14,100
How would I construct this?

1668
01:33:14,400 --> 01:33:19,200
Well, first I can construct my, my axes and in fact, you know, I might

1669
01:33:19,200 --> 01:33:22,300
make this because we're probably going to want this as well, which is,

1670
01:33:22,500 --> 01:33:24,700
we can do columns, 3 by 3.

1671
01:33:28,600 --> 01:33:30,200
And Rose 3 by 3.

1672
01:33:32,300 --> 01:33:33,600
Where I just pass in.

1673
01:33:37,700 --> 01:33:42,100
In both cases, what I want the access to be, and then we can produce

1674
01:33:42,400 --> 01:33:45,100
the column version or the row version of that Matrix.

1675
01:33:45,700 --> 01:33:48,700
So again, in this case, we just produce the result here,

1676
01:33:50,200 --> 01:33:52,800
In this case, it's just the column picture.

1677
01:33:53,300 --> 01:33:57,900
So again I'm just well here I'll do it out this way so it's a little

1678
01:33:57,900 --> 01:33:58,600
clearer for you.

1679
01:34:07,900 --> 01:34:11,400
I need some way of hinting to for coder, but doesn't need to do that.

1680
01:34:14,000 --> 01:34:14,500
There we go.

1681
01:34:19,400 --> 01:34:20,500
One extra, we go.

1682
01:34:22,800 --> 01:34:25,400
So again, I'm just putting these in in column order.

1683
01:34:25,400 --> 01:34:29,900
As you can see, exactly, like we wrote the math on the Blackboard.

1684
01:34:40,900 --> 01:34:43,000
And hope that you can see that looks really clean.

1685
01:34:43,000 --> 01:34:44,200
It's just the X down.

1686
01:34:44,200 --> 01:34:45,600
X-axis goes down the column.

1687
01:34:45,900 --> 01:34:46,500
First Column.

1688
01:34:46,500 --> 01:34:47,000
Y goes down.

1689
01:34:47,000 --> 01:34:49,900
The second Z goes down the third, right?

1690
01:34:50,700 --> 01:34:53,100
And then, we just kind of return that as our column Matrix

1691
01:34:55,100 --> 01:34:56,500
same thing with rose 3 by 3,

1692
01:34:57,700 --> 01:34:58,200
All we're going to do.

1693
01:34:58,200 --> 01:35:01,300
Here is reverse that, right?

1694
01:35:01,700 --> 01:35:11,900
So in this case, I'm going to do XY XZ on the columns y x by y YZ ZX z

1695
01:35:11,900 --> 01:35:12,400
y.

1696
01:35:12,700 --> 01:35:13,300
ZZ

1697
01:35:15,200 --> 01:35:16,100
And there's the row picture.

1698
01:35:16,800 --> 01:35:17,100
Right?

1699
01:35:17,800 --> 01:35:19,600
Okay so what I know

1700
01:35:21,800 --> 01:35:24,200
For producing this camera, transform is all.

1701
01:35:24,200 --> 01:35:29,800
I really need to do is I need to stuff these into the columns, right?

1702
01:35:29,900 --> 01:35:33,200
So I know that I start with the rose 3x3 picture where I just put

1703
01:35:33,200 --> 01:35:33,700
those in.

1704
01:35:34,300 --> 01:35:38,400
Now, I've got a matrix that does nothing other than just undo the

1705
01:35:38,400 --> 01:35:41,400
rotation implied by those X Y and Z axes.

1706
01:35:41,400 --> 01:35:46,300
So, it's the rotation part of the camera transform, but it doesn't do

1707
01:35:46,300 --> 01:35:47,400
the position yet.

1708
01:35:47,600 --> 01:35:48,000
Right.

1709
01:35:48,500 --> 01:35:51,200
So, like I said, what we need to do is we need to produce

1710
01:35:52,300 --> 01:35:54,800
for our Vector weird.

1711
01:35:54,800 --> 01:35:56,900
My there was, here we go.

1712
01:35:57,200 --> 01:35:59,900
I need to produce the negated

1713
01:36:00,000 --> 01:36:03,800
Its form of this so that I can stuff that into the translation

1714
01:36:03,800 --> 01:36:05,200
component, right?

1715
01:36:06,300 --> 01:36:13,500
And in order to do that, I need to multiply the position by The Matrix

1716
01:36:13,500 --> 01:36:13,900
itself.

1717
01:36:13,900 --> 01:36:18,000
So I need to do like R times P right to produce a new vector.

1718
01:36:18,600 --> 01:36:20,300
And again, I want to negate that as well.

1719
01:36:20,800 --> 01:36:23,500
So this is the like camera P.

1720
01:36:23,600 --> 01:36:28,500
We're going to use put that in there and furthermore, I probably want

1721
01:36:28,500 --> 01:36:30,100
the ability to do something like this.

1722
01:36:33,600 --> 01:36:37,700
Right, where I can just set the translation components component of a

1723
01:36:37,700 --> 01:36:38,400
matrix.

1724
01:36:40,800 --> 01:36:41,500
And go from there.

1725
01:36:42,000 --> 01:36:45,000
Now, the other thing that I could probably do here, I guess, I don't

1726
01:36:45,000 --> 01:36:46,300
know how I want to do it.

1727
01:36:46,300 --> 01:36:47,500
It depends how I want to do this.

1728
01:36:48,400 --> 01:36:53,500
I haven't really thought about it yet, but maybe maybe set

1729
01:36:53,500 --> 01:36:57,100
translations a bad word in this case.

1730
01:36:57,100 --> 01:36:59,700
Maybe maybe I'll just say Translate.

1731
01:37:02,500 --> 01:37:05,300
But that something not sure.

1732
01:37:06,200 --> 01:37:08,700
I haven't decided exactly how I want to do that.

1733
01:37:08,700 --> 01:37:12,400
Haven't thought about it much but you know, if I have something like

1734
01:37:12,400 --> 01:37:16,200
this where I say, I've got a matrix a and I want to do a translation

1735
01:37:16,200 --> 01:37:16,600
of it.

1736
01:37:16,900 --> 01:37:21,900
The result again is just a and then for the components of the result,

1737
01:37:22,000 --> 01:37:23,700
I just want to be able to say

1738
01:37:26,400 --> 01:37:29,800
Like the terms, get get added here, right?

1739
01:37:29,800 --> 01:37:32,900
So I'm just modifying that final part.

1740
01:37:33,000 --> 01:37:35,700
This part right here, I want to put the translation in there.

1741
01:37:40,600 --> 01:37:41,100
Okay.

1742
01:37:41,100 --> 01:37:45,300
So for my camera transform, all I really want to do is I just want to

1743
01:37:45,300 --> 01:37:48,100
be able to set the translation in the column which is currently

1744
01:37:48,100 --> 01:37:48,500
nothing.

1745
01:37:48,500 --> 01:37:53,300
I want to set that to be equal to the negative of the transform of the

1746
01:37:53,300 --> 01:38:00,100
incoming point that I'm given by by The Matrix itself right to produce

1747
01:38:00,100 --> 01:38:02,200
that residual term that I need to correct for.

1748
01:38:02,200 --> 01:38:06,600
So the only thing I don't have to make that work is I just need some

1749
01:38:06,600 --> 01:38:10,500
way of multiplying a vector times The Matrix, which right now I don't

1750
01:38:10,600 --> 01:38:11,000
Have.

1751
01:38:11,500 --> 01:38:14,600
But, like I said, these are actually exactly the same operation.

1752
01:38:14,900 --> 01:38:17,600
If I have only a V3 here, right?

1753
01:38:17,600 --> 01:38:23,500
Where I don't actually have a matrix, I've just got a point then I can

1754
01:38:23,500 --> 01:38:26,600
produce that result pretty easily as well.

1755
01:38:26,700 --> 01:38:32,600
All I have to do here in this case is produce those dot products, and

1756
01:38:32,600 --> 01:38:38,400
I can assume like I was doing before that the, the component in the W

1757
01:38:38,400 --> 01:38:40,300
component of my Vector is 1.

1758
01:38:40,700 --> 01:38:42,900
And I can just make that in here when Sophie three because I know it

1759
01:38:42,900 --> 01:38:44,300
would be one.

1760
01:38:44,500 --> 01:38:47,900
But the other thing I can do and I often like to write it this way, is

1761
01:38:47,900 --> 01:38:50,900
allow the person who's passing it in to specify the W in case for some

1762
01:38:50,900 --> 01:38:52,400
reason, they wanted a different W.

1763
01:38:52,800 --> 01:38:56,100
So in most cases it's 1.0 but in other cases we could make the W

1764
01:38:56,100 --> 01:38:58,200
coordinate be something different right?

1765
01:38:58,900 --> 01:38:59,800
And so again for this

1766
01:39:00,500 --> 01:39:01,600
Matricide location.

1767
01:39:02,100 --> 01:39:04,900
We do exactly the same thing we were doing before.

1768
01:39:05,300 --> 01:39:08,100
Only in this case, we don't have to have one of the four.

1769
01:39:08,100 --> 01:39:14,400
I Loops we just do the contraction as it regularly is written and in

1770
01:39:14,400 --> 01:39:16,700
this case we probably want to write it out longhand because we're

1771
01:39:16,700 --> 01:39:20,200
going to be using the the W specifically here, right?

1772
01:39:21,000 --> 01:39:24,400
So in this case, I've got this are, I know that I can produce the RX

1773
01:39:24,400 --> 01:39:27,700
by taking the the PX times.

1774
01:39:31,200 --> 01:39:34,900
The PX times the the first element of the Matrix, right?

1775
01:39:35,000 --> 01:39:37,600
And then again, we're going across the columns of the Matrix in this

1776
01:39:37,600 --> 01:39:38,500
point at this.

1777
01:39:38,900 --> 01:39:42,300
In this case, we're going down the rows of the point and across the

1778
01:39:42,300 --> 01:39:42,900
columns.

1779
01:39:43,000 --> 01:39:45,400
Oops, I missed one here, like so.

1780
01:39:46,000 --> 01:39:46,800
And then again,

1781
01:39:49,300 --> 01:39:54,000
And then finally got that W coordinate and you know this is all that

1782
01:39:54,000 --> 01:39:54,600
PW.

1783
01:39:58,700 --> 01:39:59,200
Right.

1784
01:40:01,000 --> 01:40:04,900
And this is just something that, you know, we would have a w result.

1785
01:40:04,900 --> 01:40:07,500
But in this case, we're not going to return that W result because

1786
01:40:07,500 --> 01:40:09,400
we're just doing it for a vector.

1787
01:40:10,000 --> 01:40:13,300
So we end up with just these equations and again,

1788
01:40:15,900 --> 01:40:17,900
They are exactly the same the whole way down just we use a different

1789
01:40:17,900 --> 01:40:19,100
row of a each time.

1790
01:40:19,200 --> 01:40:21,400
Again this is exactly like we did it on the Blackboard.

1791
01:40:21,400 --> 01:40:26,100
It's just the you know that standard contraction of the point XYZ

1792
01:40:26,600 --> 01:40:30,300
Point XYZ and in this case we continue to the W which were specifying

1793
01:40:30,300 --> 01:40:35,000
manually, x, y, z, w, x, y, z, w, and off we go.

1794
01:40:35,500 --> 01:40:40,000
Now, the problem here is that if I use this as an operator star, I

1795
01:40:40,000 --> 01:40:43,500
can't specify any additional parameters here, because operator star is

1796
01:40:43,500 --> 01:40:45,000
just written in C like this.

1797
01:40:45,300 --> 01:40:45,600
And there's

1798
01:40:45,700 --> 01:40:49,300
Way to provide an external an additional option to it.

1799
01:40:49,500 --> 01:40:54,000
So what I'm going to do is I'm going to make that be sort of a special

1800
01:40:54,000 --> 01:40:57,200
case operation there.

1801
01:41:01,500 --> 01:41:05,600
which is just to say that the result equals

1802
01:41:09,200 --> 01:41:10,700
You know, the transform.

1803
01:41:12,900 --> 01:41:16,800
Where we do a times p with 1.0.

1804
01:41:19,400 --> 01:41:20,900
and then, I'm going to make this

1805
01:41:23,600 --> 01:41:25,100
Be a function you can just call.

1806
01:41:25,600 --> 01:41:28,700
So if you do want to specify the W coordinate you can if you don't

1807
01:41:28,700 --> 01:41:31,000
want to specify the W coordinate you don't have to, it'll either be

1808
01:41:31,000 --> 01:41:35,700
defaulted to 1.0 in that case, or it'll always default to 1.0 if you

1809
01:41:35,700 --> 01:41:38,500
call it with operator Star, right?

1810
01:41:40,700 --> 01:41:41,200
so,

1811
01:41:44,500 --> 01:41:47,100
In this case, we've got a slight problem here, which is that even

1812
01:41:47,100 --> 01:41:49,200
though this is the way we would notate it in math, we don't have a

1813
01:41:49,200 --> 01:41:50,600
negation operator for a matrix.

1814
01:41:51,000 --> 01:41:54,100
It would work if we wanted to I suppose.

1815
01:41:55,100 --> 01:41:58,100
But I you know we really just want to tell it.

1816
01:41:58,100 --> 01:41:59,800
Hey, multiply this first.

1817
01:42:00,000 --> 01:42:05,400
If you could don't apply, the negation operator first and that solves

1818
01:42:05,400 --> 01:42:05,900
that problem.

1819
01:42:06,800 --> 01:42:07,400
All right.

1820
01:42:09,600 --> 01:42:10,800
I'm not 100% sure.

1821
01:42:10,800 --> 01:42:11,700
Why that

1822
01:42:16,400 --> 01:42:20,700
I'm not super clear on why it couldn't figure out how to do that, to

1823
01:42:20,700 --> 01:42:25,500
be honest with you, that seems busted to me.

1824
01:42:27,000 --> 01:42:31,100
Like, it should have been able to figure out that that got applied

1825
01:42:31,100 --> 01:42:35,700
afterward, but somehow it didn't and I'm not sure why.

1826
01:42:45,200 --> 01:42:46,800
That seems really suspicious.

1827
01:42:47,700 --> 01:42:49,200
Do I have something to find wrong.

1828
01:42:49,200 --> 01:42:49,900
I don't know.

1829
01:43:09,500 --> 01:43:12,700
So I'm wondering about that I guess I don't remember how you Nuri -

1830
01:43:12,700 --> 01:43:13,800
binds two things.

1831
01:43:14,100 --> 01:43:19,500
Maybe you know re- binds before multiplication and I guess it must

1832
01:43:20,700 --> 01:43:22,200
because that's what we're seeing here, right?

1833
01:43:22,200 --> 01:43:26,400
The parser is choosing to bind the - to the are rather than the r

1834
01:43:26,400 --> 01:43:27,200
times p.

1835
01:43:33,700 --> 01:43:35,200
But you know, what do you do?

1836
01:43:35,900 --> 01:43:38,600
Anyway, so that's a thing that creates the camera transform.

1837
01:43:40,000 --> 01:43:41,800
And at that point, we actually have a transform.

1838
01:43:41,800 --> 01:43:45,100
We can send down to opengl because that is actually the camera

1839
01:43:45,100 --> 01:43:45,400
transform.

1840
01:43:45,400 --> 01:43:50,700
We could use to transform the World by wherever we wanted to transform

1841
01:43:50,700 --> 01:43:51,800
the world, right?

1842
01:43:51,800 --> 01:43:57,300
We can do anything, we want there and similarly if we want to we can

1843
01:43:57,300 --> 01:43:58,500
also take a look at this.

1844
01:44:02,000 --> 01:44:03,700
At these matrices and some other ways.

1845
01:44:03,800 --> 01:44:07,600
If we want to we can extract vectors from these matrices, right?

1846
01:44:07,600 --> 01:44:16,000
If we want to, you can imagine a doing something like this where we

1847
01:44:16,000 --> 01:44:20,000
could pass a matrix in and we could get a result out of it, where we

1848
01:44:20,000 --> 01:44:23,900
just said like, okay I want to get out a column of a

1849
01:44:37,900 --> 01:44:39,800
And we can make that be an index as well.

1850
01:44:42,400 --> 01:44:45,100
so we could say oh yeah, which one

1851
01:44:50,900 --> 01:44:51,400
Let's see.

1852
01:44:55,200 --> 01:44:56,600
And the same would be true of rows.

1853
01:44:56,600 --> 01:44:59,800
So if we want to extract either these things from a matrix, we can

1854
01:45:00,000 --> 01:45:00,600
That as well.

1855
01:45:06,700 --> 01:45:09,600
And this is fairly typical when you make little math libraries like

1856
01:45:09,600 --> 01:45:10,000
this.

1857
01:45:10,600 --> 01:45:13,000
We're writing this, mostly not for performance, right?

1858
01:45:13,000 --> 01:45:14,200
We're writing this math.

1859
01:45:14,200 --> 01:45:15,600
This is more for utility.

1860
01:45:15,600 --> 01:45:18,900
It's just to be flexible and easy-to-use largely because we don't

1861
01:45:18,900 --> 01:45:19,700
expect to use it.

1862
01:45:19,700 --> 01:45:22,600
So heavily that we would end up in a situation where we cared about

1863
01:45:22,600 --> 01:45:24,400
lots of little issues like that.

1864
01:45:25,700 --> 01:45:28,000
But yeah you can start to see it sort of come together, and this is

1865
01:45:28,000 --> 01:45:30,600
how this sort of thing, typically works, right?

1866
01:45:32,700 --> 01:45:34,900
So now we have the ability to specify this stuff.

1867
01:45:35,700 --> 01:45:36,100
Oops.

1868
01:45:37,300 --> 01:45:37,700
Yeah.

1869
01:45:49,800 --> 01:45:52,600
And once we have the ability to specify the stuff we can actually use

1870
01:45:52,600 --> 01:45:57,400
it now in our opengl system and there's a little bit that we have to

1871
01:45:57,400 --> 01:45:57,800
do here.

1872
01:45:57,800 --> 01:45:58,800
You can kind of see.

1873
01:45:59,400 --> 01:46:00,600
I'll show you in a second.

1874
01:46:01,500 --> 01:46:02,600
You can see right now

1875
01:46:04,000 --> 01:46:08,300
The way that we're setting up our projection matrices is we're

1876
01:46:08,300 --> 01:46:14,000
actually just sort of specifying a focal length and we're having the

1877
01:46:14,000 --> 01:46:20,000
GL system, create the Matrix on the fly when it goes to process things

1878
01:46:20,000 --> 01:46:25,900
that are used by things that sort of fall under that transform.

1879
01:46:26,500 --> 01:46:28,500
But what we would like to do now.

1880
01:46:31,500 --> 01:46:36,100
For rather obvious reasons I think is we'd like to go ahead and expand

1881
01:46:36,200 --> 01:46:40,200
this transform to say hey why don't we just have the clip rect specify

1882
01:46:40,200 --> 01:46:43,300
the 4x4 itself, right?

1883
01:46:44,600 --> 01:46:47,300
Like why don't we just have before by four?

1884
01:46:48,600 --> 01:46:51,700
Passed down by the cliprect so that we can start to pack our whole

1885
01:46:51,700 --> 01:46:55,200
camera, transform right in there, you know what I mean?

1886
01:46:55,500 --> 01:46:59,400
So that we don't have to do any of this stuff, right?

1887
01:47:00,800 --> 01:47:04,000
That we can pack all this stuff in and not have to do the transfers

1888
01:47:04,000 --> 01:47:05,600
ourselves, right?

1889
01:47:06,300 --> 01:47:08,400
So let's go ahead and make that change and I think we may be out of

1890
01:47:08,400 --> 01:47:11,200
time and so we've built all the stuff we need and tomorrow we can just

1891
01:47:11,200 --> 01:47:14,400
play around with getting the camera orbiting and working in.

1892
01:47:14,400 --> 01:47:17,300
That'll be a good, that'll be a good accomplishment for the weekend.

1893
01:47:17,300 --> 01:47:17,900
I think.

1894
01:47:19,900 --> 01:47:21,500
Given how much mass stuff we had to cover.

1895
01:47:22,400 --> 01:47:26,000
All right, so let's go take a look at how that works inside render

1896
01:47:26,000 --> 01:47:27,100
group, right?

1897
01:47:27,100 --> 01:47:32,600
We have this sort of concept where we're pushing on the clip Rex and

1898
01:47:32,600 --> 01:47:33,800
we pass the focal length.

1899
01:47:34,100 --> 01:47:36,100
So when we do our push cliprect here,

1900
01:47:39,200 --> 01:47:40,300
you can see that happening.

1901
01:47:44,500 --> 01:47:46,300
See here, there it is.

1902
01:47:46,800 --> 01:47:49,000
You can see it takes the focal length of the final parameter.

1903
01:47:49,700 --> 01:47:52,500
And in this case, what we'd like to do, let's just take a look at the

1904
01:47:52,500 --> 01:47:55,100
baby step of rather than recording the focal length.

1905
01:47:55,100 --> 01:47:55,700
Right.

1906
01:47:56,100 --> 01:47:59,500
What we could do instead is we can try to put this whole thing.

1907
01:48:00,300 --> 01:48:01,000
In here.

1908
01:48:02,100 --> 01:48:02,600
Right?

1909
01:48:03,000 --> 01:48:06,200
So the only part that will save on the outside is the transpose

1910
01:48:06,200 --> 01:48:08,700
because the fact that we have to transpose it is strictly because of

1911
01:48:08,700 --> 01:48:11,600
the opengl fixed function pipeline which will probably get rid of

1912
01:48:11,600 --> 01:48:12,500
eventually anyway.

1913
01:48:12,700 --> 01:48:16,300
And even if we didn't get rid of it, there is an extended function we

1914
01:48:16,300 --> 01:48:20,000
can call called Geo load transpose Matrix which would take it in the

1915
01:48:20,000 --> 01:48:23,400
correct order, the math order that we have it stored in right now.

1916
01:48:25,600 --> 01:48:31,500
So we know what this safe ratio is, right?

1917
01:48:31,500 --> 01:48:32,600
Because it's the same thing.

1918
01:48:32,600 --> 01:48:36,900
We've got the width and height here, we can just do the / them produce

1919
01:48:36,900 --> 01:48:37,800
the safe ratio.

1920
01:48:38,400 --> 01:48:41,000
We know what the focal length is because someone's passing that into

1921
01:48:41,000 --> 01:48:41,300
us.

1922
01:48:41,600 --> 01:48:45,000
So, rather than store it here, I'm just going to go ahead and say,

1923
01:48:45,500 --> 01:48:53,000
rekt dot transform, maybe maybe we'll still just call it project

1924
01:48:53,300 --> 01:48:54,500
equals projection BC.

1925
01:48:55,500 --> 01:48:56,200
And that's it.

1926
01:48:56,800 --> 01:48:57,900
So then we come out here.

1927
01:48:57,900 --> 01:49:01,300
We would just say, okay, the clip projection Matrix?

1928
01:49:01,700 --> 01:49:06,000
Our projection Matrix is that we need to feed to opengl is just loops.

1929
01:49:10,000 --> 01:49:11,400
It's just the transpose of that.

1930
01:49:15,000 --> 01:49:16,000
That's what I was trying to do.

1931
01:49:16,100 --> 01:49:16,500
Yeah.

1932
01:49:17,900 --> 01:49:18,900
And this stuff goes away.

1933
01:49:19,400 --> 01:49:22,600
So then the only thing that we have to do now is just have it replace

1934
01:49:22,600 --> 01:49:24,800
that focal length that we were specifying before.

1935
01:49:28,200 --> 01:49:29,600
Although, I don't know where that went.

1936
01:49:33,300 --> 01:49:36,000
Where is our clip brick structure?

1937
01:49:39,000 --> 01:49:39,400
There it is.

1938
01:49:46,700 --> 01:49:49,600
So here, when we push on our clip, rect instead of pushing on this the

1939
01:49:49,600 --> 01:49:53,900
focal length, we now push on the transform itself.

1940
01:49:58,000 --> 01:50:00,500
Okay, so hey good.

1941
01:50:00,500 --> 01:50:02,000
We got the same thing we were getting before.

1942
01:50:02,000 --> 01:50:05,600
That's exactly what we wanted because now we've got sort of that

1943
01:50:06,100 --> 01:50:11,200
ability to specify the entire transform and, you know, I guess we

1944
01:50:11,200 --> 01:50:14,300
could at this point if we wanted to since we've got just a few seconds

1945
01:50:14,300 --> 01:50:18,800
left, we could just throw some Saucy, Saucy Unison here, if we wanted

1946
01:50:18,800 --> 01:50:22,600
to, and take a look at where this is actually been called from

1947
01:50:26,600 --> 01:50:27,300
But take a look.

1948
01:50:36,900 --> 01:50:37,500
Here it is.

1949
01:50:37,900 --> 01:50:40,100
So we're passing the camera transfer and focal length here.

1950
01:50:40,500 --> 01:50:44,800
What we could do again is just passed some more robust transform here.

1951
01:50:44,800 --> 01:50:47,100
In fact, we could make it so that we pass the whole transform down,

1952
01:50:47,500 --> 01:50:51,100
and then we could produce inside this camera, transform the actual

1953
01:50:51,100 --> 01:50:55,600
transfer that we're trying to use and pass that down, that might be

1954
01:50:55,600 --> 01:50:57,000
the right thing to do.

1955
01:50:57,000 --> 01:50:58,900
I'm not sure how many places call this.

1956
01:50:59,200 --> 01:50:59,800
In fact, it looks

1957
01:51:00,000 --> 01:51:01,300
Almost nobody does call.

1958
01:51:01,300 --> 01:51:06,300
It cutscenes should have called it, but I guess it doesn't because it

1959
01:51:06,300 --> 01:51:07,700
just uses the debug one.

1960
01:51:09,700 --> 01:51:10,300
Is that true?

1961
01:51:13,100 --> 01:51:15,600
Is there a reason, our cutscene doesn't call Pushbullet brush?

1962
01:51:23,500 --> 01:51:25,000
How does it set the focal length?

1963
01:51:37,700 --> 01:51:41,600
So we've just got it so that inside here you call prospective, and it

1964
01:51:41,600 --> 01:51:44,300
calls set camera transform, which itself pushes the clip.

1965
01:51:44,300 --> 01:51:44,700
Rect

1966
01:51:46,200 --> 01:51:46,800
There you go.

1967
01:51:48,200 --> 01:51:51,700
So we kind of want to, you know, at this point we probably want to go

1968
01:51:51,700 --> 01:51:53,400
ahead and disentangle these little bit.

1969
01:51:53,500 --> 01:51:55,900
So I am going to stop here for today because I think we want to go

1970
01:51:55,900 --> 01:51:56,600
ahead and do that tomorrow.

1971
01:51:56,600 --> 01:51:57,400
I'm going to go to the head.

1972
01:51:57,400 --> 01:52:01,300
Go ahead and go to the Q&A, but we're at least set up for it.

1973
01:52:01,300 --> 01:52:03,000
And we're going to want to do a little more fussing here.

1974
01:52:03,000 --> 01:52:06,500
I think, with this pretty soon, because we want to disentangle this

1975
01:52:06,500 --> 01:52:09,600
now that we've got a pretty clear way of setting that camera

1976
01:52:09,600 --> 01:52:10,100
transform.

1977
01:52:10,100 --> 01:52:13,600
I think we want to clean up how that's being called in the exterior

1978
01:52:13,600 --> 01:52:14,100
code.

1979
01:53:03,400 --> 01:53:04,600
Let's see.

1980
01:53:04,600 --> 01:53:08,300
Can you interpolate if you wanted a smooth rotation about a point or

1981
01:53:08,300 --> 01:53:09,500
axis over time?

1982
01:53:10,900 --> 01:53:12,200
You can.

1983
01:53:13,300 --> 01:53:18,300
But again, interpolation is sort of a separate Topic in terms of how

1984
01:53:18,300 --> 01:53:19,900
you want to go about doing that.

1985
01:53:20,400 --> 01:53:25,100
So if you want to interpolate rotations, you have a number of ways of

1986
01:53:25,100 --> 01:53:25,500
doing it.

1987
01:53:25,500 --> 01:53:31,500
If your rotations are coming from angles, for example, then you can

1988
01:53:31,500 --> 01:53:32,600
obviously smoothly.

1989
01:53:32,900 --> 01:53:35,400
Relate those angles, right?

1990
01:53:35,900 --> 01:53:39,800
And if you want to interpolate those angles, then you can just produce

1991
01:53:39,800 --> 01:53:41,300
whatever you want to produce from them.

1992
01:53:41,500 --> 01:53:43,300
They can just be smoothly, interpolated right?

1993
01:53:44,500 --> 01:53:49,200
If you don't want to do that and you just have to you know you just

1994
01:53:49,200 --> 01:53:51,400
have two matrices that you need to construct.

1995
01:53:54,300 --> 01:53:57,400
and you need to interpolate between those, then you're kind of in the

1996
01:53:57,400 --> 01:53:59,800
whole world of angular interview,

1997
01:54:00,000 --> 01:54:01,600
In which is where quaternions come in.

1998
01:54:01,600 --> 01:54:05,800
Where all those sorts of things come in, those become more difficult

1999
01:54:05,800 --> 01:54:06,700
topics to talk about.

2000
01:54:06,700 --> 01:54:09,800
Because that's when you start to have to deal with all of the problems

2001
01:54:09,800 --> 01:54:11,700
that are inherent with rotation.

2002
01:54:12,200 --> 01:54:14,900
And fortunately, on handmade here, I don't think we really have to

2003
01:54:14,900 --> 01:54:19,000
deal with most of that stuff, but it's kind of a topic unto itself,

2004
01:54:19,400 --> 01:54:19,800
right?

2005
01:54:19,800 --> 01:54:20,600
If that makes sense.

2006
01:54:33,600 --> 01:54:35,100
Let's see.

2007
01:54:36,200 --> 01:54:39,500
Gary, Johansson there have been some problems with trolls causing

2008
01:54:39,500 --> 01:54:40,800
flame wars in the chat.

2009
01:54:41,200 --> 01:54:43,200
I forget who dedicate the manager of the trap to.

2010
01:54:43,400 --> 01:54:43,900
Oh yes.

2011
01:54:43,900 --> 01:54:47,600
If you want a moderated chat, you can actually go to the moderated

2012
01:54:47,600 --> 01:54:48,100
chat.

2013
01:54:48,400 --> 01:54:51,000
It is on the handmade Network server.

2014
01:54:53,700 --> 01:54:58,600
You can go there, it's handmade networks, IRC server and

2015
01:55:00,200 --> 01:55:01,300
I'll show you how to do that now.

2016
01:55:10,700 --> 01:55:12,900
So this is handmade networks IRC server.

2017
01:55:15,300 --> 01:55:16,400
And you saw how I got to there.

2018
01:55:16,400 --> 01:55:20,200
You can just put handmade Network RC in there and so if you want a

2019
01:55:20,200 --> 01:55:25,900
moderated chat, you can go here and and they maintain a moderated chat

2020
01:55:25,900 --> 01:55:32,600
for you to use and that's yeah, there's 44 people on the moderated

2021
01:55:32,600 --> 01:55:33,300
chat right now.

2022
01:55:33,300 --> 01:55:34,000
In fact.

2023
01:55:46,700 --> 01:55:48,800
Mention about six months ago, I think that you have new artwork.

2024
01:55:48,800 --> 01:55:50,100
What's the plan with adding that?

2025
01:55:50,600 --> 01:55:52,900
I'd probably right after we don't the 3D stuff.

2026
01:55:54,400 --> 01:55:57,100
I just wanted to kind of show how to make that modification to the

2027
01:55:57,100 --> 01:55:59,800
pipeline if that makes sense.

2028
01:56:16,600 --> 01:56:19,500
Did you know beforehand that you're going to discard the Sorting code?

2029
01:56:19,500 --> 01:56:22,700
Did you do all that for the sake of teaching a variety of techniques?

2030
01:56:23,600 --> 01:56:24,700
Well, yes and no.

2031
01:56:24,700 --> 01:56:27,700
I mean no I didn't know beforehand that I was going to discard the

2032
01:56:27,700 --> 01:56:31,900
Sorting code, but I sort of, like I said, I try to structure the

2033
01:56:31,900 --> 01:56:37,100
Stream So that we actually go through each constructive process of

2034
01:56:37,100 --> 01:56:38,400
like, you know,

2035
01:56:40,100 --> 01:56:41,500
I didn't think there was any point.

2036
01:56:41,500 --> 01:56:44,800
Let me put it this way in just me knowing exactly how I want to do

2037
01:56:44,800 --> 01:56:48,100
everything and just doing it that way, because that's not really very

2038
01:56:48,100 --> 01:56:48,600
useful.

2039
01:56:48,600 --> 01:56:52,000
Programming wise, I was trying to show how you, you know, keep pretty

2040
01:56:52,000 --> 01:56:56,400
flexible code and you can modify the code and change your decisions

2041
01:56:56,400 --> 01:56:59,800
and re-evaluate decisions stuff like that was very important.

2042
01:57:00,700 --> 01:57:03,700
So I didn't know ahead of time going into it, which things I would

2043
01:57:03,700 --> 01:57:07,300
decide that I wanted to do differently from how I actually did it.

2044
01:57:08,300 --> 01:57:13,600
But what I wanted to do was show some number of those through the

2045
01:57:13,600 --> 01:57:14,700
course of the stream.

2046
01:57:14,800 --> 01:57:18,100
And I was just fairly certain that since normally I program 3D games.

2047
01:57:18,100 --> 01:57:22,000
And I'm programming 2D game here for handmade hero.

2048
01:57:22,300 --> 01:57:26,400
I assumed that, you know, they would naturally come up, right?

2049
01:57:28,500 --> 01:57:34,900
So, you know, that's that's just that's just what I wanted.

2050
01:57:34,900 --> 01:57:35,700
The stream to be about.

2051
01:57:35,700 --> 01:57:39,600
You know, I wanted to show how actual programming goes not, here is

2052
01:57:39,600 --> 01:57:40,800
just how to type in a bunch of code.

2053
01:57:40,800 --> 01:57:43,500
I already know how to write or whatever I wanted to show.

2054
01:57:43,500 --> 01:57:45,200
Like, oh, well, let me try this as solution.

2055
01:57:45,200 --> 01:57:46,900
Okay, didn't like that for these reasons.

2056
01:57:47,000 --> 01:57:48,400
Let's revisit it and so on.

2057
01:58:19,300 --> 01:58:21,700
See if there's any other questions that I missed.

2058
01:58:27,900 --> 01:58:28,700
You think so?

2059
01:58:57,900 --> 01:59:03,600
All right, if there are no other questions than I, guess we can close

2060
01:59:03,600 --> 01:59:04,400
the stream for the day.

2061
01:59:18,400 --> 01:59:20,500
Do I know anything about direct x 12?

2062
01:59:20,900 --> 01:59:26,000
Yeah, I mean, so DirectX.

2063
01:59:26,000 --> 01:59:31,000
12 is not something that I looked at for itself.

2064
01:59:31,000 --> 01:59:35,800
Very explicitly Vulcan obviously I know a lot more about because I was

2065
01:59:35,800 --> 01:59:44,300
on The Advisory board for it and, you know, they're very similar but

2066
01:59:44,300 --> 01:59:48,100
I've never really bothered with DirectX 12.

2067
01:59:48,500 --> 01:59:55,500
Because I don't really know that I'm ever going to care about the

2068
01:59:55,500 --> 01:59:59,800
distinction between Vulcan and DirectX, 12, we'll see.

2069
02:00:00,000 --> 02:00:00,900
How it shakes out?

2070
02:00:00,900 --> 02:00:02,200
It could be that DirectX.

2071
02:00:02,200 --> 02:00:06,500
12 becomes somewhat of a necessity on Windows if you know, for

2072
02:00:06,500 --> 02:00:11,300
whatever reason, Microsoft, you know, PESA mises, Vulcan in some way

2073
02:00:11,300 --> 02:00:14,400
or whatever else happens, you know, small things like that have

2074
02:00:14,400 --> 02:00:19,600
happened in the past where there's a reason to use say DirectX on

2075
02:00:19,600 --> 02:00:24,200
Windows, even if you use opengl everywhere else or, you know, that

2076
02:00:24,200 --> 02:00:28,600
sort of thing because it is the one that's maybe more specifically.

2077
02:00:29,700 --> 02:00:32,300
It's the one that's more specifically supported by Microsoft, so I'd

2078
02:00:32,300 --> 02:00:32,600
say.

2079
02:00:33,100 --> 02:00:39,900
But assuming that, you know, Vulcan is competitive in terms of

2080
02:00:39,900 --> 02:00:44,300
compatibility and supports on Windows, then I don't really see any

2081
02:00:44,300 --> 02:00:46,200
reason to use direct x 12.

2082
02:00:46,800 --> 02:00:50,200
It's basically just doing the same things that Vulcan does, but it's

2083
02:00:50,200 --> 02:00:53,500
doing them in a way that you can't share code with our anywhere else,

2084
02:00:53,800 --> 02:00:54,200
right?

2085
02:00:56,800 --> 02:00:57,200
so,

2086
02:01:06,200 --> 02:01:07,400
When are you going to do?

2087
02:01:07,400 --> 02:01:11,600
Whoop, I don't program a new penny more.

2088
02:01:12,100 --> 02:01:16,000
Obviously, I used to a long time ago, I guess probably.

2089
02:01:17,600 --> 02:01:24,000
Last time I do programming with maybe 2001 roughly, maybe 2,000 or so,

2090
02:01:25,900 --> 02:01:33,700
but I don't find it to be very good and so I tend to not use really

2091
02:01:34,000 --> 02:01:37,900
any object oriented programming traditional patterns.

2092
02:01:37,900 --> 02:01:41,800
I guess I would say, although, sometimes you end up with things where,

2093
02:01:43,200 --> 02:01:46,600
you know, the the object-oriented version of something and the

2094
02:01:46,600 --> 02:01:47,200
procedural

2095
02:01:47,400 --> 02:01:49,900
Something that isn't explicitly trying to be object-oriented,

2096
02:01:50,200 --> 02:01:52,300
sometimes they have similar aspects to them.

2097
02:01:52,300 --> 02:01:55,600
Obviously, depending on how you choose to isolate things that make

2098
02:01:55,600 --> 02:01:56,000
sense.

2099
02:02:04,900 --> 02:02:06,800
If I ever heard of design patterns?

2100
02:02:07,500 --> 02:02:09,400
Yes, of course, I've heard of design patterns.

2101
02:02:09,700 --> 02:02:11,500
I even read the first book.

2102
02:02:11,500 --> 02:02:13,100
That was called design patterns.

2103
02:02:14,600 --> 02:02:16,600
It's not a very good book, unfortunately.

2104
02:02:25,700 --> 02:02:27,100
Try unit testing your code.

2105
02:02:27,100 --> 02:02:29,000
So we can actually see if something is working.

2106
02:02:30,200 --> 02:02:34,600
So unit, testing is obviously something that's useful in specific

2107
02:02:34,600 --> 02:02:38,400
circumstances where you actually have a specific defined test that you

2108
02:02:38,400 --> 02:02:42,500
want to verify and that you don't feel like you can verify some other

2109
02:02:42,500 --> 02:02:43,000
way.

2110
02:02:43,600 --> 02:02:46,700
So sometimes it's useful, sometimes, it's not in games, it's often

2111
02:02:46,700 --> 02:02:50,300
times not a very good idea to rely on unit testing and the reason that

2112
02:02:50,300 --> 02:02:53,100
it's a good idea, not to rely on you testing, it's because most of

2113
02:02:53,100 --> 02:02:55,100
your bugs happen in non unit.

2114
02:02:55,500 --> 02:02:59,800
Rio's, most complicated bugs in game.

2115
02:03:00,000 --> 02:03:01,200
Are not unit testable.

2116
02:03:02,100 --> 02:03:05,000
And so, you know, unit testing is something you can use.

2117
02:03:05,000 --> 02:03:07,700
Like, for example, if I wanted to make sure that the math code, we

2118
02:03:07,700 --> 02:03:09,500
just typed in is working properly.

2119
02:03:09,500 --> 02:03:13,400
I can write a unit test for it and verify that it is and that's a

2120
02:03:13,400 --> 02:03:14,600
perfectly reasonable thing to do.

2121
02:03:14,600 --> 02:03:19,600
If you don't think that you are able to debug those problems in

2122
02:03:19,600 --> 02:03:21,300
progress in any other way.

2123
02:03:21,700 --> 02:03:26,000
However, if you can, to bug them in other ways, then you're wasting

2124
02:03:26,000 --> 02:03:29,200
your time by writing unit tests, because the only benefit to unit

2125
02:03:29,200 --> 02:03:29,800
tests is

2126
02:03:30,000 --> 02:03:32,900
If they will save time, right?

2127
02:03:33,200 --> 02:03:34,300
There's no other point to them.

2128
02:03:34,400 --> 02:03:37,200
Because if you write unit tests and you don't catch bugs in the unit

2129
02:03:37,200 --> 02:03:40,700
tests any faster than you would have caught them in the wild, then

2130
02:03:40,700 --> 02:03:43,100
basically you just spent a lot of time writing code that no one used,

2131
02:03:43,400 --> 02:03:48,100
you know, so like everything else unit tests have their place and I

2132
02:03:48,100 --> 02:03:51,800
use them when they're appropriate and in this case, they're not useful

2133
02:03:51,900 --> 02:03:54,900
to what we're doing at the moment, but if they were then we would use

2134
02:03:54,900 --> 02:03:55,200
them.

2135
02:04:03,900 --> 02:04:07,300
With the Molly rocket team be at Emerald City ComiCon, this year,

2136
02:04:09,300 --> 02:04:13,900
possibly storing tortoise in terms of profiling.

2137
02:04:13,900 --> 02:04:17,400
How would you tell when you were hitting upper bounds of CPU, PCI, bus

2138
02:04:17,400 --> 02:04:18,300
and GPU?

2139
02:04:18,600 --> 02:04:22,800
Obviously, we already have a CPU, profiler wondering more about PCI

2140
02:04:22,800 --> 02:04:24,000
bus and GPU.

2141
02:04:25,100 --> 02:04:25,900
Well, so,

2142
02:04:28,200 --> 02:04:34,000
There's a couple things that you have to do sort of as Baseline, but

2143
02:04:34,300 --> 02:04:35,800
to get just a rough picture.

2144
02:04:36,400 --> 02:04:42,900
You actually can see the GPU PCI bus stuff fairly straightforwardly to

2145
02:04:42,900 --> 02:04:48,100
get sort of a high-level picture of it by using a GPU, profiler of

2146
02:04:48,100 --> 02:04:48,900
which there are many.

2147
02:04:48,900 --> 02:04:54,400
So for example, you can use n cite that Nvidia ships which is a tool

2148
02:04:54,400 --> 02:04:57,400
that's pretty decent and you can see timeline

2149
02:04:57,600 --> 02:05:03,200
Use that show you where the CPU is waiting on the GPU and, and vice

2150
02:05:03,200 --> 02:05:03,700
versa.

2151
02:05:04,400 --> 02:05:10,200
And so if you go and take a look at a tool like that, you can get a

2152
02:05:10,200 --> 02:05:15,400
sort of high-level picture of those problems, but obviously I would

2153
02:05:15,600 --> 02:05:20,600
say that, you know, that's for the basic process.

2154
02:05:21,600 --> 02:05:25,200
If what you're trying to do is get super aggressive and maximize every

2155
02:05:25,200 --> 02:05:28,600
last little thing then there's all sorts of additional stuff you

2156
02:05:28,600 --> 02:05:30,900
probably have to look at and it's a pretty complicated problem

2157
02:05:30,900 --> 02:05:32,900
involves a lot of experimentation and that sort of thing.

2158
02:05:33,400 --> 02:05:35,900
But if you're just trying to get reasonable you know you're trying to

2159
02:05:35,900 --> 02:05:38,600
make sure that you're doing a reasonable job, scheduling things across

2160
02:05:38,600 --> 02:05:41,300
the PCI bus that will tell you what you need to know.

2161
02:05:42,300 --> 02:05:42,700
so,

2162
02:05:56,900 --> 02:05:59,800
Zen Mystic, we use Vulcan in your game at all.

2163
02:06:00,000 --> 02:06:04,100
Will it still be two new on release or do some kind of tutorial on it?

2164
02:06:04,900 --> 02:06:05,600
I don't know.

2165
02:06:05,600 --> 02:06:06,900
I couldn't tell you.

2166
02:06:07,700 --> 02:06:13,800
I don't love Vulcan like I said it, I don't love the design but you

2167
02:06:13,800 --> 02:06:15,000
know, it is what it is.

2168
02:06:15,300 --> 02:06:19,800
So I'm not super excited to show how to use it because it's like, you

2169
02:06:19,800 --> 02:06:25,800
know, it's a little disappointing, but you know who knows we will use

2170
02:06:25,800 --> 02:06:29,800
opengl for the time being because our game will run plenty fast.

2171
02:06:30,000 --> 02:06:33,500
On opengl since it is a 2-D game and we're not trying to micromanage

2172
02:06:33,500 --> 02:06:37,600
memory usage and stuff like this, which is, you know, micromanaging

2173
02:06:37,600 --> 02:06:40,300
overlap, and transfer and locking and memory and all that sort of

2174
02:06:40,300 --> 02:06:45,200
stuff is, obviously the place where you start to really want the kind

2175
02:06:45,200 --> 02:06:51,000
of manual stuff that you need either from Vulcan or DirectX, 12, or

2176
02:06:51,500 --> 02:06:53,900
opengl, 4.5 a zdo.

2177
02:06:54,100 --> 02:06:57,100
Which, you know, we could go that route as well, which is basically

2178
02:06:57,100 --> 02:06:59,700
extensions to opengl, which allow you to

2179
02:07:00,600 --> 02:07:06,100
Do a lot of the same sorts of stuff you do in Vulcan, and so, you

2180
02:07:06,100 --> 02:07:07,800
know, will we need to doing that stuff?

2181
02:07:07,800 --> 02:07:08,400
No.

2182
02:07:09,100 --> 02:07:12,100
Might we show how to do some of it at some point because it's just

2183
02:07:12,100 --> 02:07:13,700
useful for educational purposes.

2184
02:07:13,700 --> 02:07:17,900
Maybe but doing a whole Vulcan Port doesn't seem like maybe a very

2185
02:07:17,900 --> 02:07:21,400
good use of time because most of, that's just minutiae that's about

2186
02:07:21,400 --> 02:07:26,400
how Vulcan works and I'm not sure that that's the most productive

2187
02:07:27,000 --> 02:07:28,200
tutorial link time.

2188
02:07:49,500 --> 02:07:55,500
Frank do you think writing my own ring zero driver would bypass VA see

2189
02:07:55,900 --> 02:07:59,800
you're talking about a ring 0 driver for what windows?

2190
02:08:04,700 --> 02:08:05,100
I mean, yeah.

2191
02:08:05,100 --> 02:08:05,700
If

2192
02:08:08,600 --> 02:08:10,000
Here's the thing, right?

2193
02:08:11,100 --> 02:08:12,800
It used to be that ring.

2194
02:08:12,800 --> 02:08:14,100
Zero was Ring zero.

2195
02:08:14,100 --> 02:08:17,100
So if you wrote something at ring zero you could do anything that you

2196
02:08:17,100 --> 02:08:21,700
wanted but the reality is that's not true anymore, right ring?

2197
02:08:21,700 --> 02:08:28,800
Zero is not the lowest level of access, you know, there's ring - one,

2198
02:08:28,800 --> 02:08:30,800
there's ring - to now, right.

2199
02:08:30,800 --> 02:08:33,500
There's I don't do operating systems programming.

2200
02:08:33,500 --> 02:08:36,100
So I don't even keep track of the crazy ring, this of it all.

2201
02:08:36,100 --> 02:08:38,300
But when they decided to go to hypervisors,

2202
02:08:38,500 --> 02:08:40,900
And VMS and all these sorts of things and that became a very

2203
02:08:40,900 --> 02:08:44,600
important, you know, segment of the market ring zero kind of went out

2204
02:08:44,600 --> 02:08:45,200
the window.

2205
02:08:45,500 --> 02:08:46,900
So I mean,

2206
02:08:48,700 --> 02:08:51,500
you know, if you're talking about writing a ring 0 driver for

2207
02:08:51,500 --> 02:08:55,900
something, it gives you certain, you know, it gives you certain

2208
02:08:55,900 --> 02:08:59,400
privileges that you certainly don't have when you're not in ring 0.

2209
02:08:59,600 --> 02:08:59,800
But at

2210
02:09:00,000 --> 02:09:04,600
Same time, increasingly and I don't even keep up with this in Windows.

2211
02:09:04,600 --> 02:09:08,600
Obviously, there's tons of things that are unbiased passable even at

2212
02:09:08,600 --> 02:09:09,900
ring zero, right?

2213
02:09:10,000 --> 02:09:14,800
Because just from a security standpoint, you know, ring zero isn't

2214
02:09:14,800 --> 02:09:18,800
doesn't get full access to the machine anymore and there's there's,

2215
02:09:18,900 --> 02:09:25,700
you know, layers below that that you know, are not going to be are not

2216
02:09:25,700 --> 02:09:27,200
going to going to be by passable to you.

2217
02:09:27,200 --> 02:09:28,500
Just because you're at ring zero.

2218
02:09:30,100 --> 02:09:31,000
Without an exploit.

2219
02:09:47,900 --> 02:09:48,500
Soaring tortoise.

2220
02:09:48,500 --> 02:09:53,000
Is there any way to do that from our own code or do we have to rely on

2221
02:09:53,000 --> 02:09:54,300
external tools?

2222
02:09:59,000 --> 02:10:01,500
So, you're talking about the GPU profiler.

2223
02:10:01,900 --> 02:10:08,000
There are some ways you can do that, but it largely depends on the

2224
02:10:08,000 --> 02:10:08,400
circumstance.

2225
02:10:08,400 --> 02:10:13,500
So if you're talking about with opengl, oops, that's not as high as

2226
02:10:13,500 --> 02:10:13,700
well.

2227
02:10:13,700 --> 02:10:17,900
That you can actually get a couple of different things.

2228
02:10:20,000 --> 02:10:22,300
Timer query, I think is what it's called.

2229
02:10:27,300 --> 02:10:28,000
Here we go.

2230
02:10:30,100 --> 02:10:35,700
So you can do some stuff here where you can insert things into the

2231
02:10:35,700 --> 02:10:41,200
stream and you can look at the timestamps and and and get other piece

2232
02:10:41,200 --> 02:10:46,100
of information back and then there might be some counters, you can get

2233
02:10:46,100 --> 02:10:47,500
from Nvidia.

2234
02:10:55,200 --> 02:10:57,500
I can't remember all of these there are ones.

2235
02:10:57,500 --> 02:10:59,800
You can get, let me put it to you that way.

2236
02:11:03,600 --> 02:11:04,800
That's who we got here.

2237
02:11:06,900 --> 02:11:11,400
So, you can see these ones for the AMD that are being exposed here for

2238
02:11:11,400 --> 02:11:15,600
the parentheses, your mileage may vary, right?

2239
02:11:15,600 --> 02:11:20,100
Obviously, if you so what happens when you install something like n

2240
02:11:20,100 --> 02:11:24,400
site is it actually Institute turns on like debug features of the

2241
02:11:24,400 --> 02:11:29,800
driver that you want to use and, you know, to what extent?

2242
02:11:29,800 --> 02:11:31,400
You can turn those on yourself.

2243
02:11:31,400 --> 02:11:32,100
I'm not sure.

2244
02:11:32,100 --> 02:11:36,100
I usually just use a tool for those purposes when I need to do it.

2245
02:11:36,200 --> 02:11:36,600
So I've

2246
02:11:36,700 --> 02:11:40,000
Look to see whether you can actually get all the same stuff you get

2247
02:11:40,000 --> 02:11:41,000
from nsight.

2248
02:11:42,800 --> 02:11:43,900
So I don't know.

2249
02:11:44,100 --> 02:11:44,700
Right.

2250
02:11:46,000 --> 02:11:48,400
Probably, you can get a lot of that stuff yourself.

2251
02:11:48,400 --> 02:11:54,300
The reason I say that is because there's a fair bit of, of third-party

2252
02:11:54,300 --> 02:11:56,900
tool Edge, which, which does do stuff like performance analysis.

2253
02:11:57,100 --> 02:11:59,800
So, I'm assuming that stuff is exposed in ways that it

2254
02:12:00,000 --> 02:12:03,800
Maybe manufacturer-specific but are still exposed.

2255
02:12:05,100 --> 02:12:06,600
So I guess that's what I would say.

2256
02:12:18,700 --> 02:12:20,800
Graham says near the beginning of the stream.

2257
02:12:20,800 --> 02:12:22,600
The back of my chair fell off.

2258
02:12:22,600 --> 02:12:24,600
I spent the entire stream fixing my chair.

2259
02:12:24,600 --> 02:12:27,800
It feels more solid now and squeaks less but I'm afraid to lean back

2260
02:12:27,800 --> 02:12:28,200
on it.

2261
02:12:29,500 --> 02:12:32,600
Yeah well you know I mean it depends how confident you are in your

2262
02:12:32,600 --> 02:12:33,700
past job man.

2263
02:12:34,000 --> 02:12:37,600
Like maybe you did a really good job and you can lean back on it or

2264
02:12:37,600 --> 02:12:38,300
maybe not.

2265
02:12:54,900 --> 02:12:55,500
Sorry, interests.

2266
02:12:55,500 --> 02:12:58,300
Not sure if anyone has mentioned this, but Mac OS, X doesn't support

2267
02:12:58,300 --> 02:13:01,300
opengl core profile with opengl one point x functions.

2268
02:13:01,500 --> 02:13:04,200
This means that if using Geo begin at center of the max version of Geo

2269
02:13:04,200 --> 02:13:05,500
allowed is 2.1.

2270
02:13:06,300 --> 02:13:06,700
Yeah.

2271
02:13:06,700 --> 02:13:14,800
And you know, since we decided to do actual 3D, you know, and uses

2272
02:13:14,800 --> 02:13:18,200
ibuffer stuff instead of doing mostly just software rendering and then

2273
02:13:18,200 --> 02:13:20,700
the opengl equivalent of software rendering, right?

2274
02:13:21,600 --> 02:13:22,500
We'll probably

2275
02:13:23,100 --> 02:13:25,900
Actually moved off the fixed function pipeline because the fixed

2276
02:13:25,900 --> 02:13:27,200
function pipeline is ancient.

2277
02:13:27,500 --> 02:13:30,700
It's not used anymore by anybody except in circumstances, like, what

2278
02:13:30,700 --> 02:13:34,800
I'm doing here to just show how to do stuff without having to dive

2279
02:13:34,800 --> 02:13:38,800
into really, like more specific things that are necessary to given

2280
02:13:38,800 --> 02:13:39,400
time.

2281
02:13:40,700 --> 02:13:45,200
So, you know, we'll probably end up with an opengl three-point X, you

2282
02:13:45,200 --> 02:13:49,400
know, situation in the, in the opengl back end, by the time we're done

2283
02:13:49,400 --> 02:13:51,400
with this, which is not much

2284
02:13:52,100 --> 02:13:52,600
Right.

2285
02:14:23,300 --> 02:14:32,800
Looks like we've got no more questions so I think we are done so

2286
02:14:32,800 --> 02:14:33,500
that's good.

2287
02:14:46,100 --> 02:14:49,700
Made here, can you name one of those exploits for my driver?

2288
02:14:51,500 --> 02:14:59,200
Aha, well, so probably not that exist at the moment, right there used

2289
02:14:59,200 --> 02:14:59,900
to be some

2290
02:15:00,000 --> 02:15:09,200
Exploits to get past to get past the the ring - one protections but

2291
02:15:09,200 --> 02:15:12,200
you know they get fixed very rapidly security.

2292
02:15:12,200 --> 02:15:17,900
Researchers are constantly finding them and then people, you know,

2293
02:15:18,000 --> 02:15:18,600
patch them.

2294
02:15:19,000 --> 02:15:27,000
So the best one that I saw was that there was that one that they use

2295
02:15:27,000 --> 02:15:28,500
the Aperture map.

2296
02:15:30,400 --> 02:15:36,600
To there was the old memory, the memory aperture mapping thing that

2297
02:15:36,600 --> 02:15:42,100
they use to to bypass the protections.

2298
02:15:52,300 --> 02:15:53,900
I don't remember.

2299
02:15:58,200 --> 02:16:00,400
if I don't know, if I can find it,

2300
02:16:16,300 --> 02:16:17,600
let's see.

2301
02:16:17,700 --> 02:16:19,100
I think this might be it.

2302
02:16:21,900 --> 02:16:24,500
Just is there a link to the I just want the video.

2303
02:16:28,300 --> 02:16:34,000
Yes, this is it this is the one that I remember being super awesome.

2304
02:16:37,000 --> 02:16:42,400
If you're interested in these sorts of exploits, obviously if you want

2305
02:16:42,400 --> 02:16:47,200
to actually do an exploit that bypasses everything, you've got to have

2306
02:16:47,200 --> 02:16:49,100
like a zero-day exploit, right?

2307
02:16:49,100 --> 02:16:53,100
If security researchers know about it already, then they've patched.

2308
02:16:54,799 --> 02:16:56,500
The operating system and everything else.

2309
02:16:56,500 --> 02:16:59,400
So those exploits are not relevant anymore, but if you're just

2310
02:16:59,400 --> 02:17:03,200
interested in them from, which I think they're very interesting, I

2311
02:17:03,200 --> 02:17:04,500
never do this kind of work.

2312
02:17:04,500 --> 02:17:08,500
So it's very interesting to me to see what kinds of stuff people have

2313
02:17:08,500 --> 02:17:11,100
to come up with, to find these crazy exploits.

2314
02:17:11,100 --> 02:17:16,200
This apic overlay, it Maps, this aperture.

2315
02:17:16,200 --> 02:17:21,799
This memory access aperture in, in a way that chips have always done

2316
02:17:21,799 --> 02:17:24,799
on the x86 and they figured out a way to use it.

2317
02:17:25,500 --> 02:17:29,200
To get to ring - 2 and its really great.

2318
02:17:29,700 --> 02:17:33,600
I would highly recommend watching the video

2319
02:17:36,200 --> 02:17:38,000
because he does a great job explaining it to.

2320
02:17:39,000 --> 02:17:39,600
Here it is.

2321
02:17:43,299 --> 02:17:45,200
I would highly recommend watching this video.

2322
02:17:46,799 --> 02:17:48,100
It's really, really cool.

2323
02:17:48,700 --> 02:17:52,900
And it shows an example of how these kind of exploits take shape.

2324
02:17:53,700 --> 02:17:54,900
This is an amazing one.

2325
02:17:55,799 --> 02:17:59,299
There's probably lots of them if you follow blackhat stuff.

2326
02:18:00,000 --> 02:18:02,299
Probably lots of them, I don't.

2327
02:18:02,299 --> 02:18:07,100
So I only know of the ones that were particularly amusing that people

2328
02:18:07,100 --> 02:18:08,100
kind of passed around.

2329
02:18:09,500 --> 02:18:09,900
So,

2330
02:18:22,400 --> 02:18:26,900
can you give Sean M and Sean B's streams a plug before you go please

2331
02:18:27,200 --> 02:18:32,299
certainly I can for those of you who are looking for more programming

2332
02:18:32,299 --> 02:18:33,000
action

2333
02:18:37,000 --> 02:18:38,600
I'll go ahead and bring those up for you.

2334
02:18:42,100 --> 02:18:42,900
Here we go.

2335
02:18:44,400 --> 02:18:46,100
Ah, my goodness.

2336
02:18:46,200 --> 02:18:48,200
This is all getting crazy.

2337
02:18:48,200 --> 02:18:50,000
Okay, let's get that one.

2338
02:18:54,200 --> 02:18:55,100
Just feel that, right?

2339
02:18:55,200 --> 02:18:55,600
We go.

2340
02:19:02,600 --> 02:19:04,400
That's the, that's not what I want.

2341
02:19:04,400 --> 02:19:06,799
I want the twitch, I want the twitch people.

2342
02:19:10,400 --> 02:19:11,900
Because nothing's too, right?

2343
02:19:14,000 --> 02:19:14,400
Yeah.

2344
02:19:16,799 --> 02:19:18,000
I just happened to remember it.

2345
02:19:19,500 --> 02:19:23,200
All right, so what the person on the chat was asking is that I

2346
02:19:23,200 --> 02:19:26,299
mentioned these two other streams, there's two other programmers who

2347
02:19:27,600 --> 02:19:32,400
stream pretty often also Jonathan Blow stream obviously naysayer 88 is

2348
02:19:32,400 --> 02:19:33,200
another great one.

2349
02:19:33,299 --> 02:19:34,900
In fact we'll go ahead and bring that one up here.

2350
02:19:42,799 --> 02:19:45,700
So in terms of programming streams, this is Jonathan Blow stream.

2351
02:19:45,700 --> 02:19:47,299
I see made braid in the witness.

2352
02:19:47,700 --> 02:19:50,500
He often times shows work these doing on his own language and

2353
02:19:50,500 --> 02:19:51,100
compiler.

2354
02:19:51,500 --> 02:19:52,700
That's necessary idiot.

2355
02:19:52,800 --> 02:19:55,500
It's a great stream to follow nothing's too.

2356
02:19:55,500 --> 02:19:57,700
That's John Barrett, the guy who wrote the renderer for thief, the

2357
02:19:57,700 --> 02:20:01,400
Dark Project, hero Tiggy at Rod, game, tools and bunch of stuff.

2358
02:20:02,000 --> 02:20:06,400
He is programming like a voxel engine like, you know, like Minecraft

2359
02:20:06,400 --> 02:20:06,600
or that.

2360
02:20:06,600 --> 02:20:10,300
Whatever is showing how to write one of those and that's heat streams

2361
02:20:10,300 --> 02:20:11,900
that nothing's to on Twitch.

2362
02:20:12,300 --> 02:20:15,200
And then Sean McGrath retina Mobic, he's the guy who wrote em plus

2363
02:20:15,200 --> 02:20:20,700
plus has engine and also the whole thing for dyad among a bunch of

2364
02:20:20,700 --> 02:20:25,500
other stuff and he often streams development of his MOBA on the SS

2365
02:20:25,500 --> 02:20:28,100
McGrath twitch Channel.

2366
02:20:29,600 --> 02:20:30,500
So that was all that.

2367
02:20:30,500 --> 02:20:33,400
The the person on the stream was talking about.

2368
02:20:35,600 --> 02:20:37,400
And hopefully that's, that's good.

2369
02:20:38,200 --> 02:20:38,700
All right?

2370
02:20:40,800 --> 02:20:42,500
All right.

2371
02:20:45,800 --> 02:20:48,700
We're down to the last question down to the ask questions.

2372
02:20:51,100 --> 02:20:52,800
Would have ring zero driver Bap.

2373
02:20:52,800 --> 02:20:55,700
Bypass the anti-cheat protection of Destiny.

2374
02:20:56,100 --> 02:20:59,000
I've never looked at the anti-cheat protection for Destiny.

2375
02:21:00,200 --> 02:21:04,000
I don't even think you would need a ring 0 driver for the anti-cheat

2376
02:21:04,000 --> 02:21:04,900
protection of Destiny.

2377
02:21:04,900 --> 02:21:08,100
Unless they have a ring zero driver, which maybe they do.

2378
02:21:08,200 --> 02:21:11,300
I don't know, I've never looked that, I've never even played Destiny,

2379
02:21:11,700 --> 02:21:13,900
so I don't even have an instant and I'm gonna have it installed

2380
02:21:13,900 --> 02:21:15,000
version of Destiny.

2381
02:21:17,700 --> 02:21:22,100
But I'll be honest with you, I thought Destiny was only on consoles.

2382
02:21:23,400 --> 02:21:25,600
Can you get a PC version of Destiny?

2383
02:21:35,000 --> 02:21:35,200
Yeah.

2384
02:21:35,200 --> 02:21:40,300
Like I mean, what are you even talking about?

2385
02:21:40,600 --> 02:21:41,200
Because

2386
02:21:42,800 --> 02:21:47,400
I'm not sure I get how this would help you until Destiny 2.

2387
02:21:47,400 --> 02:21:50,100
There is no PC version, right?

2388
02:21:54,200 --> 02:21:56,600
I don't know, I don't play Destiny so I couldn't tell you but I didn't

2389
02:21:56,600 --> 02:21:59,200
think there was a PC version of Destiny.

2390
02:22:00,300 --> 02:22:03,200
So I'm not sure how you would be bypassing anti-cheat on something

2391
02:22:03,200 --> 02:22:04,000
that doesn't exist.

2392
02:22:19,300 --> 02:22:20,400
Okay.

2393
02:22:20,800 --> 02:22:24,500
Insofar as says that Sean and Sean, the to Sean's, I just mentioned

2394
02:22:24,500 --> 02:22:29,000
are doing a specific stream today and he posted the Twitter link to

2395
02:22:29,000 --> 02:22:29,400
it.

2396
02:22:30,200 --> 02:22:32,000
I did not know about that stream.

2397
02:22:33,800 --> 02:22:38,600
So, I guess it says that it'll be live on Twitch in about a half an

2398
02:22:38,600 --> 02:22:41,600
hour and that was posted at 12:30.

2399
02:22:41,600 --> 02:22:42,800
So I guess at 1 p.m.

2400
02:22:42,800 --> 02:22:46,400
that would start, it doesn't say which channel it will be on.

2401
02:22:47,500 --> 02:22:51,300
So I guess, I don't know, but presumably one of those too.

2402
02:23:04,500 --> 02:23:08,200
How do I read the RAM memory on an Xbox or a PS4?

2403
02:23:11,200 --> 02:23:12,800
You have the weirdest questions.

2404
02:23:13,300 --> 02:23:16,800
These have almost nothing to do with game programming at all.

2405
02:23:18,300 --> 02:23:24,800
Probably be better served asking on a game cheat tutorial stream, but

2406
02:23:24,800 --> 02:23:28,500
the answer of how you read RAM memory on an Xbox or a PS4.

2407
02:23:29,200 --> 02:23:34,900
I'm assuming you mean, if you're not running on that system, and the

2408
02:23:34,900 --> 02:23:37,500
answer there is, you need, you know, like a logic analyzer is

2409
02:23:37,500 --> 02:23:37,600
something.

2410
02:23:37,600 --> 02:23:40,200
You mean, you know, I don't know if you've ever seen that, there's

2411
02:23:40,900 --> 02:23:46,600
people who create Hardware that you basically can attach to other

2412
02:23:46,600 --> 02:23:47,400
Hardware.

2413
02:23:48,100 --> 02:23:51,300
It is designed to scan it and see what it's doing.

2414
02:23:54,000 --> 02:23:57,200
And you don't want to go down that road, right?

2415
02:23:57,200 --> 02:23:58,900
Like that.

2416
02:23:58,900 --> 02:23:59,500
That's just

2417
02:24:02,700 --> 02:24:07,500
But you know, you can see, there's, there's if you want to see a

2418
02:24:07,500 --> 02:24:09,100
really great example of this.

2419
02:24:11,600 --> 02:24:14,700
I would highly recommend checking out again.

2420
02:24:14,700 --> 02:24:19,100
This is trying to remember some stream, some stuff that I saw a long

2421
02:24:19,100 --> 02:24:24,400
ago but there's a great scene where

2422
02:24:25,900 --> 02:24:30,700
Alto getting the alto running again.

2423
02:24:35,400 --> 02:24:36,000
This.

2424
02:24:51,700 --> 02:24:54,800
so, I don't know if this is

2425
02:24:56,000 --> 02:24:59,000
oh God, the browser has crashed.

2426
02:24:59,800 --> 02:25:00,700
Ladies and gentlemen.

2427
02:25:02,600 --> 02:25:03,400
It's all over.

2428
02:25:06,000 --> 02:25:07,600
well, I was trying to show you

2429
02:25:10,400 --> 02:25:14,600
I don't know if this is the one, this might not be the one, because

2430
02:25:14,600 --> 02:25:16,000
there was a YouTube do.

2431
02:25:16,000 --> 02:25:17,300
This looks like the one though.

2432
02:25:17,300 --> 02:25:18,900
I don't know where the YouTube video is.

2433
02:25:18,900 --> 02:25:25,100
They have a video of it, but this is a pretty fun one.

2434
02:25:25,100 --> 02:25:27,000
That's sort of a easier problem.

2435
02:25:27,000 --> 02:25:28,100
It's much older Hardware.

2436
02:25:28,100 --> 02:25:31,600
So it's easier to analyze, but it's really fun to watch them.

2437
02:25:32,000 --> 02:25:35,700
If you watch them trying to get this old Alto, obviously the alto is a

2438
02:25:35,700 --> 02:25:38,400
computer that from very, very, very long ago.

2439
02:25:39,200 --> 02:25:41,800
It was from Xerox, Parc the people who basically invented the

2440
02:25:41,800 --> 02:25:49,600
graphical user interface, it was their machine that they created and

2441
02:25:49,600 --> 02:25:52,600
there are still some that still work in existence and someone was

2442
02:25:52,600 --> 02:25:55,500
trying to take one and restore it to working order.

2443
02:25:57,200 --> 02:26:01,400
And of course that can be hard because chips can fail, things can

2444
02:26:01,400 --> 02:26:02,800
corrode context?

2445
02:26:02,800 --> 02:26:07,200
Get old components burn out and you have to refurbish them.

2446
02:26:07,700 --> 02:26:10,000
And so one of the things that you see a lot when they do this is they

2447
02:26:10,000 --> 02:26:15,100
put a lot of logic analyzer probes on various pins and then they have

2448
02:26:15,100 --> 02:26:19,500
Hardware that they can record all of the information going across

2449
02:26:19,500 --> 02:26:21,400
those pins and reverse engineer.

2450
02:26:21,400 --> 02:26:22,300
What's going wrong?

2451
02:26:22,900 --> 02:26:24,400
And it's really cool to watch.

2452
02:26:24,900 --> 02:26:26,800
And so that is kind of the

2453
02:26:27,000 --> 02:26:28,900
Way in which those sorts of things happen.

2454
02:26:29,300 --> 02:26:33,900
If you can't run on the machine and you need to analyze it, it's

2455
02:26:33,900 --> 02:26:34,500
really cool.

2456
02:27:44,200 --> 02:27:44,800
Strong interest.

2457
02:27:44,800 --> 02:27:47,800
I'm not sure if anyone has mentioned this, but in the cutscene shot,

2458
02:27:47,800 --> 02:27:50,300
six, layer 3 and 4 are both at Z equals 3.

2459
02:27:50,500 --> 02:27:51,800
Layer 3, should be it.

2460
02:27:53,000 --> 02:27:54,000
3.01.

2461
02:27:54,000 --> 02:27:58,300
Instead they are for is the child tears.

2462
02:27:58,300 --> 02:27:59,800
And layer 3 is the child.

2463
02:28:02,800 --> 02:28:04,100
Can you do want to?

2464
02:28:04,900 --> 02:28:07,600
Well, I was going to say we probably don't want to deal with that

2465
02:28:07,600 --> 02:28:15,400
right now, but I could try to put an issue in for that.

2466
02:29:04,000 --> 02:29:06,500
I guess the first thing I would ask those starring, tortoises.

2467
02:29:06,500 --> 02:29:08,500
Why do you think that's a problem?

2468
02:29:12,900 --> 02:29:14,000
That they're equaled.

2469
02:29:37,800 --> 02:29:39,100
Like storing tortoise.

2470
02:29:39,700 --> 02:29:42,900
Can is there a particular bug that you're seeing?

2471
02:29:45,200 --> 02:29:47,200
The tears are behind the child, so you can't see them.

2472
02:29:47,600 --> 02:29:50,600
So we should be able to just swap the order in which they're drawn

2473
02:29:50,600 --> 02:29:52,300
them though, right?

2474
02:29:54,000 --> 02:29:54,700
As well.

2475
02:30:09,100 --> 02:30:10,000
But there we go.

2476
02:30:10,000 --> 02:30:13,100
That way when we were cleaning out github's later on.

2477
02:30:13,100 --> 02:30:14,800
We can we can take a look at that.

2478
02:30:25,800 --> 02:30:26,600
All right.

2479
02:30:27,200 --> 02:30:31,700
Odessa who's got a question just at the end here, will the order of

2480
02:30:31,700 --> 02:30:32,200
matrix?

2481
02:30:32,200 --> 02:30:38,800
Multiplication be reversed if we use transpose, matrices and vectors

2482
02:30:40,900 --> 02:30:44,400
So I guess I'm not sure exactly what you're asking.

2483
02:30:54,000 --> 02:30:59,700
But I guess you're saying, well the conceptual order, if that makes

2484
02:30:59,700 --> 02:31:00,200
sense.

2485
02:31:01,400 --> 02:31:07,100
And so let me just draw this out and I'll see if I'm answering the

2486
02:31:07,100 --> 02:31:08,200
question that you're talking about.

2487
02:31:08,200 --> 02:31:10,900
I might not be because I'm not sure, I totally understand what you're

2488
02:31:10,900 --> 02:31:11,700
asking, but

2489
02:31:17,500 --> 02:31:21,300
So, what you can see, in this case, right is you've got AC b.

2490
02:31:21,300 --> 02:31:23,800
D are the vectors here, right?

2491
02:31:23,900 --> 02:31:27,200
So, in the case, where you're doing this transform, you end up with x

2492
02:31:27,200 --> 02:31:30,300
times, AC plus y times, BD

2493
02:31:31,600 --> 02:31:32,200
Right.

2494
02:31:32,300 --> 02:31:35,600
And this is the standard picture and now you're asking, if you used

2495
02:31:35,600 --> 02:31:38,100
everything transposed, I think it's what you're saying.

2496
02:31:39,100 --> 02:31:42,400
So if everything was transposed, then what ends up happening is, you

2497
02:31:42,400 --> 02:31:43,100
can see

2498
02:31:44,800 --> 02:31:48,800
That you run into a problem right away in terms of the order which I

2499
02:31:49,100 --> 02:31:50,700
am assuming, it's kind of what you were getting at.

2500
02:31:51,000 --> 02:31:53,200
But at this was transformed right transposed?

2501
02:31:53,200 --> 02:31:55,000
It would be like so,

2502
02:31:58,400 --> 02:32:01,800
And of course Straight Ahead matrix multiplication of the form that

2503
02:32:01,800 --> 02:32:06,700
we're doing, doesn't work when you have the wrong number of rows.

2504
02:32:06,700 --> 02:32:09,600
If the, if the number of rows of this doesn't match the number of

2505
02:32:09,600 --> 02:32:11,700
columns of this, which in this case it doesn't, right?

2506
02:32:11,700 --> 02:32:16,100
There's a missing row that we would need to form our products.

2507
02:32:16,300 --> 02:32:17,600
So we can't do that.

2508
02:32:18,700 --> 02:32:20,200
And we pretty much have to.

2509
02:32:24,100 --> 02:32:25,800
Do it this way, right?

2510
02:32:26,100 --> 02:32:30,000
And when we do it this way, what we see from our result, right?

2511
02:32:30,700 --> 02:32:36,000
Is that, when we do our multiplication, in this case, we get a b x y.

2512
02:32:36,000 --> 02:32:37,800
So X, plus b.

2513
02:32:37,800 --> 02:32:43,000
Y, as the first term of our vector and the second term over Vector.

2514
02:32:43,800 --> 02:32:44,400
Oops, that's it.

2515
02:32:45,200 --> 02:32:46,900
Hey, P.

2516
02:32:47,400 --> 02:32:49,600
And the second term of our Vector is CX.

2517
02:32:50,300 --> 02:32:51,500
Plus d, why?

2518
02:32:52,300 --> 02:32:52,800
Right.

2519
02:32:53,600 --> 02:32:57,700
And so you can see in this case, in terms of what we're producing,

2520
02:32:58,100 --> 02:32:59,800
it's actually still the same.

2521
02:33:01,100 --> 02:33:06,600
Product in a sense because you can see what the exes are multiplying

2522
02:33:06,600 --> 02:33:17,500
their multiplying AC so it's still ex-ac plus y, BD, which is the same

2523
02:33:17,600 --> 02:33:18,000
thing.

2524
02:33:19,200 --> 02:33:19,600
Right.

2525
02:33:21,600 --> 02:33:22,300
So

2526
02:33:24,600 --> 02:33:27,400
I don't know if this is what you were trying to get at, but your

2527
02:33:27,400 --> 02:33:31,700
intuition is correct that the reading of something multiplied, in this

2528
02:33:31,700 --> 02:33:35,600
order with column, vectors is the same as the reading of it in the

2529
02:33:35,600 --> 02:33:37,700
opposite order using row vectors.

2530
02:33:37,900 --> 02:33:41,400
Because as you can see, the row Vector ends up on the other side of

2531
02:33:41,400 --> 02:33:43,000
the Matrix, right?

2532
02:33:43,900 --> 02:33:48,500
And so, if you were to string them all together, you would get the

2533
02:33:48,500 --> 02:33:51,500
opposite order depending on which way you go.

2534
02:33:55,700 --> 02:33:56,900
Was that what you were asking?

2535
02:34:33,700 --> 02:34:37,200
Just used disused.

2536
02:34:41,600 --> 02:34:43,200
Just want to know if that answers the question.

2537
02:35:04,500 --> 02:35:06,300
That's what it's asking earlier, okay.

2538
02:35:08,400 --> 02:35:13,900
Yes, it's worth noting also that I think some people do do it that

2539
02:35:13,900 --> 02:35:14,200
way.

2540
02:35:16,700 --> 02:35:21,100
Math is pretty explicit about this sort of thing, and I wish suited

2541
02:35:21,100 --> 02:35:27,200
him 73 were here, he's not as you know, he is the, you know.

2542
02:35:29,300 --> 02:35:32,800
He's the expert on those sorts of things, but what I would point out

2543
02:35:32,800 --> 02:35:34,900
is is typically in math notation.

2544
02:35:37,000 --> 02:35:38,500
if you write something like this,

2545
02:35:42,900 --> 02:35:44,100
this is different.

2546
02:35:48,900 --> 02:35:49,900
Conceptually.

2547
02:35:59,300 --> 02:35:59,800
so, if

2548
02:36:00,000 --> 02:36:03,200
It's something as a column Vector people, typically consider this to

2549
02:36:03,200 --> 02:36:03,900
be different than.

2550
02:36:03,900 --> 02:36:08,600
If you write as a row Vector there, they're actually mathematically

2551
02:36:08,600 --> 02:36:12,200
different for obvious reasons, like we just sort of showed what way

2552
02:36:12,200 --> 02:36:17,600
they are, what way they end up getting X matrices and on which side

2553
02:36:17,600 --> 02:36:18,100
they are.

2554
02:36:19,900 --> 02:36:23,100
And there's these things called covariant and contravariant vectors.

2555
02:36:29,900 --> 02:36:35,600
You can see here and covariant and contravariant vectors are often

2556
02:36:35,600 --> 02:36:39,400
written in those opposite ways.

2557
02:36:39,400 --> 02:36:43,900
So oftentimes like you can see here you got a row Vector for a

2558
02:36:44,000 --> 02:36:47,300
covariant and a column Vector for a contravariant.

2559
02:36:50,500 --> 02:36:56,100
However, math people decided to do it because that's the way they

2560
02:36:56,100 --> 02:36:58,300
chose to organize the things originally, right?

2561
02:36:58,300 --> 02:36:59,800
Then that's how the math works out.

2562
02:37:00,900 --> 02:37:04,200
I don't go down the math Road very far.

2563
02:37:04,200 --> 02:37:09,500
As you know, I am not a mathematician, I'm a programmer and I know a

2564
02:37:09,500 --> 02:37:14,500
bunch of math because I have to know it to do my job but I'm not

2565
02:37:14,500 --> 02:37:15,400
excellent at it.

2566
02:37:15,400 --> 02:37:16,800
I'm not a math person.

2567
02:37:17,600 --> 02:37:21,100
There's a lot of programmers who are much better at math than I am.

2568
02:37:21,600 --> 02:37:26,700
And so, I won't try to give you some kind of an opinion about whether

2569
02:37:26,700 --> 02:37:28,100
it's more appropriate to wrote.

2570
02:37:28,100 --> 02:37:30,100
Write the equations, we're writing.

2571
02:37:30,700 --> 02:37:35,600
As column vectors or not, I simply go with the convention that most

2572
02:37:36,400 --> 02:37:40,000
well-respected math programmers, that I know choose to write their

2573
02:37:40,000 --> 02:37:42,600
points as column vectors and things.

2574
02:37:42,600 --> 02:37:48,500
Like normals are other kinds of by-product vectors are written as Rose

2575
02:37:48,800 --> 02:37:50,100
and so I do as well.

2576
02:37:50,400 --> 02:37:56,400
But I am not the kind of Saucy math person who really can claim to

2577
02:37:56,400 --> 02:38:00,000
have their own opinion about something like that because I'm just not

2578
02:38:00,100 --> 02:38:00,500
deep enough.

2579
02:38:00,600 --> 02:38:05,800
Into, you know, tense or mathematics or geometric algebra?

2580
02:38:05,800 --> 02:38:08,800
Any of these are the sorts of things where, you know, if you were real

2581
02:38:08,800 --> 02:38:11,300
expert in those things, you probably have strong opinions about these

2582
02:38:11,300 --> 02:38:14,300
sorts of decisions and how they go.

2583
02:38:14,300 --> 02:38:18,200
And so if you're somebody who feels like you want to know more about

2584
02:38:18,200 --> 02:38:21,000
that, I would highly recommend maybe digging deeper into the

2585
02:38:21,000 --> 02:38:24,300
literature there and going finding some more mathematically minded.

2586
02:38:24,300 --> 02:38:28,600
People who write about this sort of thing, so that you can form your

2587
02:38:28,600 --> 02:38:29,600
own opinion about it.

2588
02:38:30,000 --> 02:38:30,500
Don't listen to

2589
02:38:30,600 --> 02:38:33,500
Me on anything like that.

2590
02:38:54,700 --> 02:38:57,800
All right, folks, I'm going to wrap it up.

2591
02:39:01,000 --> 02:39:02,300
I will.

2592
02:39:06,000 --> 02:39:06,900
Because all this down.

2593
02:39:08,400 --> 02:39:10,700
Thank you everyone for joining me for this sort of handmade hero.

2594
02:39:10,700 --> 02:39:11,800
It's been a pleasure coding with you.

2595
02:39:11,800 --> 02:39:15,700
As always, if you would like to follow along at home, of course, you

2596
02:39:15,700 --> 02:39:18,200
can always pre-order the game, it does come with the source code.

2597
02:39:18,800 --> 02:39:20,500
And that's on handmade hero dot-org.

2598
02:39:20,600 --> 02:39:23,500
Also, there's a bunch of helpful links are, you can go to the forums

2599
02:39:24,200 --> 02:39:28,000
what you saw on today's stream actually that the handmade Network

2600
02:39:28,100 --> 02:39:28,400
folks.

2601
02:39:28,400 --> 02:39:30,100
Do, it's a great place to ask questions.

2602
02:39:30,100 --> 02:39:32,900
If you've got questions, we have a patreon page from support the video

2603
02:39:32,900 --> 02:39:34,200
series, we have a schedule bot.

2604
02:39:34,200 --> 02:39:36,700
If you want to win, the series is live, will tweet the schedule every

2605
02:39:36,700 --> 02:39:38,000
weekend and

2606
02:39:38,100 --> 02:39:40,500
We've got an episode guide for trying to catch up with old episodes.

2607
02:39:40,800 --> 02:39:41,500
That's about it for today.

2608
02:39:41,500 --> 02:39:42,300
I'll be back here tomorrow.

2609
02:39:42,300 --> 02:39:43,100
10:00 a.m.

2610
02:39:43,600 --> 02:39:45,800
same time, same place.

2611
02:39:46,100 --> 02:39:51,000
Hope to see everyone there for that until then have fun programming.

2612
02:39:51,300 --> 02:39:52,400
I'll see you guys on the internet.

2613
02:39:52,400 --> 02:39:53,300
Take it easy, everyone.

