1
00:00:00,100 --> 00:00:00,900
Recycle.

2
00:00:02,300 --> 00:00:02,900
There we go.

3
00:00:02,900 --> 00:00:05,800
Hello everyone and welcome to handmade hero.

4
00:00:05,800 --> 00:00:11,100
The show recoded complete game live on stream, you know?

5
00:00:11,100 --> 00:00:15,800
Yes, that yesterday, guess the previous dream was Friday over the

6
00:00:15,800 --> 00:00:16,600
weekend there.

7
00:00:17,100 --> 00:00:20,500
And we did a little something because it was a devstream of thought.

8
00:00:20,500 --> 00:00:23,200
It was a little thing that be some people were organizing for for

9
00:00:23,400 --> 00:00:25,400
raising awareness of streams.

10
00:00:25,400 --> 00:00:28,400
I don't know if it worked at all, but it was it was something we

11
00:00:28,400 --> 00:00:29,300
participated in.

12
00:00:29,800 --> 00:00:31,900
And what I did for that as a special event

13
00:00:32,000 --> 00:00:34,600
It was, I showed how to do a little bit of metaprogramming because

14
00:00:34,600 --> 00:00:36,800
it's something that people ask about in this dream, all the time.

15
00:00:37,100 --> 00:00:38,200
All all, all the time.

16
00:00:38,200 --> 00:00:42,400
So I showed how to do a parser in an hour for part, for pre-processing

17
00:00:43,100 --> 00:00:44,400
your include files.

18
00:00:45,400 --> 00:00:48,100
And people seemed relatively happy with that.

19
00:00:48,100 --> 00:00:52,900
So I thought, what we would do today is just finish up some things,

20
00:00:52,900 --> 00:00:57,600
logical extensions of what we did on Friday so that you can see them

21
00:00:58,000 --> 00:01:03,200
and you know just kind of have a basic understanding of how that sort

22
00:01:03,200 --> 00:01:04,000
of stuff works.

23
00:01:04,500 --> 00:01:07,500
I don't really want to go too far down that rathole on handmade hero

24
00:01:07,500 --> 00:01:12,600
because it's kind of like a whole separate space to explore and I feel

25
00:01:12,600 --> 00:01:15,100
like until you know what you're doing with regular programming.

26
00:01:15,200 --> 00:01:17,200
You don't really want to know what you're doing with metaprogramming.

27
00:01:17,200 --> 00:01:21,400
It's kind of putting the cart before the horse to a large extent, but

28
00:01:21,400 --> 00:01:24,100
just so that it's out there and people kind of understand the basics

29
00:01:24,100 --> 00:01:24,600
of it.

30
00:01:26,900 --> 00:01:29,500
I'm totally fine with what we did Friday and I'm totally fine with

31
00:01:29,600 --> 00:01:32,200
doing a little bit more solid just finish that up today.

32
00:01:32,200 --> 00:01:35,000
So it's there and then you guys can make of it.

33
00:01:35,000 --> 00:01:38,100
What you will now if you'd like to follow along at home with this and

34
00:01:38,100 --> 00:01:40,600
you preorder the game on a me here to or today is day 2 of 7.

35
00:01:40,600 --> 00:01:43,800
So 2006 is source, code, unpack, that and directory.

36
00:01:43,800 --> 00:01:45,300
That's what you want to follow along with here.

37
00:01:46,000 --> 00:01:50,600
If you remember from Friday, we had a little thing here, called,

38
00:01:50,600 --> 00:01:52,200
Simple processor that I built.

39
00:01:52,700 --> 00:01:56,300
We just build it in line with the game and when you run it,

40
00:01:57,000 --> 00:01:59,300
Out, put some code and you can see here.

41
00:01:59,300 --> 00:02:00,600
I'll run it on our code here.

42
00:02:00,600 --> 00:02:01,900
We are in the code directory.

43
00:02:02,200 --> 00:02:03,400
I'm going to run that.

44
00:02:03,500 --> 00:02:06,700
Oops, that simple preprocessor and you can see what it does.

45
00:02:06,700 --> 00:02:09,500
Is it outputs this sort of like array of stuff.

46
00:02:10,100 --> 00:02:16,100
That's, that's based on the types that we annotated in our code and

47
00:02:16,200 --> 00:02:18,000
the way we did The annotation, right?

48
00:02:18,000 --> 00:02:19,200
If you remember.

49
00:02:19,600 --> 00:02:21,300
So, Kira is handmade some region.

50
00:02:21,700 --> 00:02:24,700
We have a camera.

51
00:02:24,700 --> 00:02:26,000
We called it and introspect.

52
00:02:26,000 --> 00:02:26,500
Yep.

53
00:02:26,600 --> 00:02:30,200
Got an introspective marker and the way that that works is we

54
00:02:30,200 --> 00:02:34,500
basically we have just a town to find in our handmade .h that

55
00:02:34,500 --> 00:02:37,000
basically defines the ways we can Mark stuff up it.

56
00:02:37,000 --> 00:02:41,100
So right now we just we Define this one and just like G and all it is,

57
00:02:41,100 --> 00:02:44,000
is it's a way to basically Define something that will disappear.

58
00:02:44,700 --> 00:02:47,800
So it's something that's free for us to put because the C compiler

59
00:02:47,800 --> 00:02:51,700
will essentially completely ignore it, which allows us to put it

60
00:02:51,700 --> 00:02:53,600
things like that, anywhere that we want.

61
00:02:53,800 --> 00:02:55,600
And so what I do here,

62
00:02:56,500 --> 00:02:59,600
Is I just gave an example of marking a structure for introspection.

63
00:03:00,000 --> 00:03:01,200
I put that on there.

64
00:03:01,400 --> 00:03:05,100
It means that the are preprocessor will know to read the structure and

65
00:03:05,100 --> 00:03:06,700
do whatever it's going to do to it.

66
00:03:07,100 --> 00:03:10,400
And so, what I have it do currently is it spits out some data.

67
00:03:10,400 --> 00:03:14,000
As you can see here, this is what it produces, and you can see that

68
00:03:14,000 --> 00:03:17,200
it, these are the members right of that structure there.

69
00:03:17,900 --> 00:03:21,200
So what I'm going to do today is just kind of finish up making this

70
00:03:21,200 --> 00:03:25,700
into something that might be useful, so that you can kind of see how

71
00:03:25,700 --> 00:03:26,700
we would do that, right?

72
00:03:26,700 --> 00:03:29,300
How we would sort of start to build a little

73
00:03:30,000 --> 00:03:32,100
Metaprogramming sort of system here.

74
00:03:32,400 --> 00:03:35,800
And so what we want to do is we want to take this information that we

75
00:03:35,800 --> 00:03:36,100
have.

76
00:03:36,100 --> 00:03:39,700
Because remember, on Friday, we started with a very specific goal and

77
00:03:39,700 --> 00:03:44,400
that was to make sure that we could replace a piece of code here,

78
00:03:45,000 --> 00:03:47,000
where is its debug value.

79
00:03:47,800 --> 00:03:51,400
We just want to be able to replace this code where I had manually had

80
00:03:51,400 --> 00:03:53,300
to type out all of these entity things.

81
00:03:53,700 --> 00:03:56,400
It was just a replace that code with something that could be

82
00:03:56,400 --> 00:03:56,900
automated.

83
00:03:56,900 --> 00:03:59,700
So that we know that any time, we changed our energy structure, it

84
00:03:59,700 --> 00:03:59,900
would

85
00:04:00,100 --> 00:04:01,700
Manically update the debug code here.

86
00:04:01,700 --> 00:04:03,800
For example, we wouldn't have to do that manually.

87
00:04:03,800 --> 00:04:05,000
Things like that, right?

88
00:04:06,400 --> 00:04:10,200
So, what I want to do is I want to turn this into a system that would

89
00:04:10,200 --> 00:04:13,600
allow us to do some general things in our code that are not exactly

90
00:04:13,600 --> 00:04:15,100
designed for optimization anything like that.

91
00:04:15,100 --> 00:04:18,100
That's like I said, more metaprogramming sort of further down the

92
00:04:18,100 --> 00:04:18,899
metaprogramming path.

93
00:04:18,899 --> 00:04:22,300
All I want to do is make the simplest thing that I can so that we can

94
00:04:22,300 --> 00:04:25,300
start to leverage some meta programming features in the game if we

95
00:04:25,300 --> 00:04:28,000
wanted to using just this very simple set of things.

96
00:04:28,000 --> 00:04:32,300
And so what I want to do is I want to basically produce some data that

97
00:04:32,300 --> 00:04:36,000
we could read in the game that would allow us to work with our

98
00:04:36,500 --> 00:04:38,500
Earth in useful ways, okay.

99
00:04:39,100 --> 00:04:42,000
And so, what I'm going to do is I'm going to go over to that simple

100
00:04:42,000 --> 00:04:43,500
preprocessor here?

101
00:04:45,100 --> 00:04:48,800
And where we output things, right?

102
00:04:49,300 --> 00:04:52,100
We're we're sort of printing these things out and we do the parse

103
00:04:52,100 --> 00:04:52,700
direct.

104
00:04:52,800 --> 00:04:54,900
You can see here we do like this number definition.

105
00:04:54,900 --> 00:04:57,400
Here's the members of thing where we say, what the members of stuff

106
00:04:57,400 --> 00:04:58,500
are and all that stuff.

107
00:04:59,000 --> 00:05:02,600
We go through here and we print out these member things, right?

108
00:05:02,600 --> 00:05:04,100
And all that sort of stuff.

109
00:05:04,800 --> 00:05:09,800
So what I want to point out here is that this piece of information,

110
00:05:09,800 --> 00:05:10,900
this little thing, right?

111
00:05:10,900 --> 00:05:13,300
Right here, that's printing out this stuff.

112
00:05:13,400 --> 00:05:14,700
What we want to do is we

113
00:05:14,800 --> 00:05:19,400
To start putting in whatever the information is that we might need to

114
00:05:19,400 --> 00:05:23,300
be able to work with the members of this struct in a data-driven way

115
00:05:23,300 --> 00:05:23,900
basically.

116
00:05:24,100 --> 00:05:24,600
Right?

117
00:05:25,200 --> 00:05:28,100
And so what we need is first we need a way of saying, what like type

118
00:05:28,100 --> 00:05:31,300
something is and we start have gotten off to a good start here by just

119
00:05:31,300 --> 00:05:33,800
introducing like this thing, like type underscore World chunk or type

120
00:05:33,800 --> 00:05:36,300
in a square Unit 32 or that sort of stuff, right?

121
00:05:37,400 --> 00:05:38,300
So, that's good.

122
00:05:43,200 --> 00:05:47,800
But if you imagine what we might want to do with this data, right?

123
00:05:47,800 --> 00:05:48,900
We have a problem.

124
00:05:48,900 --> 00:05:52,600
Where if you were to sort of iterate over this, you would still have

125
00:05:52,600 --> 00:05:55,600
no idea how to actually get any of this information, right?

126
00:05:55,600 --> 00:05:58,600
Because if you take a look at what this would tell me, like let's say

127
00:05:58,600 --> 00:05:59,300
that I just have this.

128
00:05:59,300 --> 00:05:59,800
This, I

129
00:06:00,000 --> 00:06:02,500
All this into my game after it gets spit out, right?

130
00:06:02,800 --> 00:06:05,900
Well what this tells me is very limited, it tells me that there is a

131
00:06:05,900 --> 00:06:07,200
member called storage index.

132
00:06:07,200 --> 00:06:12,300
It tells me that it is a un 32, but I have no idea where in the struct

133
00:06:12,300 --> 00:06:16,700
it occurs and I know, I have no idea how big it actually is right now,

134
00:06:16,700 --> 00:06:19,800
I could guess that it was 32 bits, you know, it was four bytes long

135
00:06:19,800 --> 00:06:22,500
because it's a type you in 32, so I can maybe take care of that

136
00:06:23,000 --> 00:06:24,800
problem with like a lookup table or something.

137
00:06:25,100 --> 00:06:28,400
But, in terms of where it is in the same entity structure, I have

138
00:06:28,400 --> 00:06:29,800
absolutely no idea.

139
00:06:30,000 --> 00:06:33,400
Because I would have to actually go through, and sort of do some kind

140
00:06:33,400 --> 00:06:36,000
of accumulation at hope that the compiler didn't do anything.

141
00:06:36,000 --> 00:06:38,300
Where with alignment, I'd have to know whether I was inside a pragma

142
00:06:38,300 --> 00:06:43,100
pack statement, for example, to even be able to compute the offset

143
00:06:43,300 --> 00:06:45,400
inside the structure of where that data is.

144
00:06:45,900 --> 00:06:49,900
So what I'd rather do is right inside the output, I'd rather output

145
00:06:49,900 --> 00:06:52,700
something that will allow me to get that data directly that the

146
00:06:52,700 --> 00:06:55,800
compiler can generate for me and so it's pretty easy for me to do

147
00:06:55,800 --> 00:06:56,200
that.

148
00:06:56,200 --> 00:06:59,100
I don't know if we ever made a macro for this, I don't know that we

149
00:06:59,100 --> 00:06:59,400
did.

150
00:06:59,400 --> 00:06:59,800
I don't know that.

151
00:07:00,000 --> 00:07:01,900
An offset of anywhere.

152
00:07:03,400 --> 00:07:06,800
Because I can't remember if that's something that we ever did anywhere

153
00:07:06,800 --> 00:07:07,300
else.

154
00:07:07,800 --> 00:07:08,700
Probably not.

155
00:07:08,700 --> 00:07:12,800
You probably haven't had any need to do it but what we can do in here

156
00:07:12,800 --> 00:07:16,600
is we can just figure out what the offset of something would be from

157
00:07:16,600 --> 00:07:19,600
the structure that we are talking about here.

158
00:07:19,900 --> 00:07:23,800
So what we need to do and there's a couple different ways we can do

159
00:07:23,800 --> 00:07:24,300
this.

160
00:07:24,300 --> 00:07:27,900
I'll kind of show you the sort of janky way first and then we'll maybe

161
00:07:27,900 --> 00:07:30,200
make a way that's a little bit more.

162
00:07:30,200 --> 00:07:32,800
Sort of festive is what?

163
00:07:33,000 --> 00:07:36,200
The sparse member I could pass down the struck token, so I can pass

164
00:07:36,200 --> 00:07:36,500
down.

165
00:07:36,500 --> 00:07:37,900
What the structure actually was.

166
00:07:38,700 --> 00:07:42,600
So that in here, I could go ahead and actually use that, right?

167
00:07:42,900 --> 00:07:45,900
So I guess I should say struct type token, right?

168
00:07:46,000 --> 00:07:50,400
So whatever, the structure type is, what I could do is say okay, take

169
00:07:50,400 --> 00:07:50,700
whatever.

170
00:07:50,700 --> 00:07:54,800
The structure type is, make a pointer pretend you have a pointer to

171
00:07:54,800 --> 00:07:57,700
that although the pointer is actually just going to be 0, right?

172
00:07:59,200 --> 00:08:04,000
And then off of that pointer access the actual member itself, right?

173
00:08:04,100 --> 00:08:09,100
Whatever that member was take the VM

174
00:08:10,400 --> 00:08:12,300
Location of that, right?

175
00:08:12,600 --> 00:08:18,600
Look what that value actually is going to be that value would actually

176
00:08:18,600 --> 00:08:22,900
be the offset of the structure because if I start at 0 and I go as far

177
00:08:22,900 --> 00:08:28,000
as I need to get to get to this member, that's what I would actually

178
00:08:28,000 --> 00:08:29,600
have, right?

179
00:08:29,700 --> 00:08:34,299
So taking the address of that member that tells me, you know, if the

180
00:08:34,299 --> 00:08:38,400
base pointer was 0, the address of that member tells me where it

181
00:08:38,400 --> 00:08:39,100
actually is

182
00:08:40,500 --> 00:08:44,100
So I can do something like this and then all I would have to do is

183
00:08:44,100 --> 00:08:48,100
again pass that information down so you know I would have to do

184
00:08:48,100 --> 00:08:53,900
something like this record type token, text length, struck type token

185
00:08:53,900 --> 00:08:59,500
text like so and then I just need to pass whatever this trucks

186
00:08:59,500 --> 00:08:59,900
actually.

187
00:09:00,000 --> 00:09:00,600
Type is.

188
00:09:00,800 --> 00:09:02,000
Here's the name token.

189
00:09:02,100 --> 00:09:05,900
I don't have the type token because as you can see, oh wait, no the

190
00:09:05,900 --> 00:09:07,600
name token is that because it is the type.

191
00:09:07,600 --> 00:09:09,600
So nevermind, so that's what I already have.

192
00:09:09,800 --> 00:09:14,700
So I just pass that down and now when I run it in theory, I should get

193
00:09:14,700 --> 00:09:16,600
that piece of information, right?

194
00:09:18,700 --> 00:09:21,500
That looks wrong.

195
00:09:21,500 --> 00:09:24,800
What did I hoops and started it in the wrong place?

196
00:09:24,800 --> 00:09:26,900
Is what I did retire.

197
00:09:26,900 --> 00:09:27,300
There we go.

198
00:09:28,700 --> 00:09:31,600
So now you can kind of see the way this would shape up, right?

199
00:09:31,600 --> 00:09:34,000
So now we would get the name which we want.

200
00:09:34,100 --> 00:09:37,700
We would get an ID that gives us the type which we would want as well.

201
00:09:38,000 --> 00:09:41,100
And then we also have an offset so we know where it is, right?

202
00:09:41,100 --> 00:09:44,500
So if we start at 0 and we go to, where old chunk is that address is

203
00:09:44,500 --> 00:09:47,200
going to be the numerical offset from the start of the structure,

204
00:09:47,400 --> 00:09:50,200
where this thing actually occurred, whatever, you know, whatever it

205
00:09:50,200 --> 00:09:50,600
was.

206
00:09:53,000 --> 00:09:53,700
That makes sense.

207
00:09:55,400 --> 00:09:58,900
So that is the way that we would start to get some of that debug

208
00:09:58,900 --> 00:09:59,800
information in there.

209
00:09:59,800 --> 00:10:01,600
I'm noticed that I'm missing a semicolon.

210
00:10:01,600 --> 00:10:06,200
So let's go ahead and add that semicolon in if I wanted to be mr.

211
00:10:06,200 --> 00:10:07,000
Looks pretty about it.

212
00:10:07,000 --> 00:10:11,200
Maybe I even put some of those in there, and then for good measure,

213
00:10:11,200 --> 00:10:15,200
maybe I just go ahead and say, okay, you know what, every time we

214
00:10:15,200 --> 00:10:19,300
actually go to do this game after we compiled the preprocessor, maybe

215
00:10:19,300 --> 00:10:22,400
I want to go ahead and do something where I actually do the

216
00:10:22,400 --> 00:10:23,100
pre-processing.

217
00:10:23,100 --> 00:10:24,200
So, we'll go in,

218
00:10:24,900 --> 00:10:26,100
Where we were before.

219
00:10:26,100 --> 00:10:28,100
So we'll go into, like, the build directory.

220
00:10:28,200 --> 00:10:31,300
I'm not sure how we actually have this setup, so I guess we just do it

221
00:10:31,300 --> 00:10:32,500
this way, right?

222
00:10:32,700 --> 00:10:35,300
So, we pop into that handmade code directory.

223
00:10:35,500 --> 00:10:37,200
We Run The Simple preprocessor.

224
00:10:37,600 --> 00:10:45,400
So, we do the build simple preprocessor to exe like, so and when we

225
00:10:45,400 --> 00:10:47,400
run the simple preprocessor, it will output.

226
00:10:47,400 --> 00:10:52,000
Some data will just pipe that output, whatever it is into handmade

227
00:10:52,400 --> 00:10:53,900
generated or something like that.

228
00:10:53,900 --> 00:10:54,600
Dot h.

229
00:10:57,200 --> 00:10:59,900
Whatever, I don't know what you want to call it, but you know, that

230
00:11:00,400 --> 00:11:01,000
some file.

231
00:11:01,900 --> 00:11:05,000
So, then when we run it in theory, we will now have a file called

232
00:11:05,000 --> 00:11:06,600
handmade generated dot h.

233
00:11:06,900 --> 00:11:11,100
And you can now see that we actually have this thing here that is

234
00:11:11,100 --> 00:11:13,100
generated by our own generator.

235
00:11:13,400 --> 00:11:17,200
And so, what we've done here is this now, for the first time you are

236
00:11:17,200 --> 00:11:20,000
seeing an actual metaprogramming workflow, right?

237
00:11:20,000 --> 00:11:22,500
A metaprogramming workflow is I compile something.

238
00:11:23,000 --> 00:11:25,400
I run that something and then that

239
00:11:25,600 --> 00:11:31,100
Something can now be actually in like included in line with anything

240
00:11:31,100 --> 00:11:35,000
that I want to do from now on like that code can actually be used as

241
00:11:35,000 --> 00:11:38,000
part of the, of the program, right?

242
00:11:38,000 --> 00:11:39,500
And so, that's what I'll do.

243
00:11:40,100 --> 00:11:43,200
I'll just go ahead and say, okay, let's go ahead and include that

244
00:11:43,200 --> 00:11:43,800
stuff.

245
00:11:44,000 --> 00:11:47,200
I don't really know where I want to include it just yet, so I'll go

246
00:11:47,200 --> 00:11:49,500
ahead and include it in here somewhere.

247
00:11:49,500 --> 00:11:50,000
I guess.

248
00:11:50,300 --> 00:11:53,000
In fact, I guess I'll do something like this.

249
00:11:53,200 --> 00:11:55,400
Maybe we'll have a handmade meta .h.

250
00:11:55,500 --> 00:11:58,600
Each right and in that handmade metadata H.

251
00:11:58,600 --> 00:11:59,600
If I come out here,

252
00:12:01,800 --> 00:12:07,100
What we can do is we can say that, you know, whatever this thing

253
00:12:07,100 --> 00:12:07,900
needed.

254
00:12:09,100 --> 00:12:10,400
Like this, for example.

255
00:12:12,200 --> 00:12:16,900
Whatever this, this generated code expects to have, we will Define

256
00:12:16,900 --> 00:12:18,400
here, right?

257
00:12:19,100 --> 00:12:23,500
So we've got stuff like this and maybe I'll do meta type here just to

258
00:12:23,500 --> 00:12:24,400
make it a little bit more.

259
00:12:24,400 --> 00:12:26,100
Clear, what's going on, right?

260
00:12:26,500 --> 00:12:30,500
We can just say we've got the meta type World chunk, you know, we've

261
00:12:30,500 --> 00:12:37,400
got the UN 32, we've got that pool 32, we've got the entity type.

262
00:12:38,000 --> 00:12:40,800
We've got what else have we got?

263
00:12:40,900 --> 00:12:41,600
We've got

264
00:12:41,700 --> 00:12:42,700
Threes.

265
00:12:43,200 --> 00:12:49,000
And we've got real 32s and we've got Sim entity Collision, volume

266
00:12:49,000 --> 00:12:52,900
Group which is in volume group.

267
00:12:53,500 --> 00:12:55,900
And you know what, I should probably do too is I can make this a lot

268
00:12:55,900 --> 00:12:58,200
easier on myself by just putting meta type in front of it.

269
00:12:58,500 --> 00:12:59,000
There we go.

270
00:13:00,100 --> 00:13:00,900
There we are.

271
00:13:02,600 --> 00:13:11,500
And okay, because in volume Groove and you know, meditate

272
00:13:11,600 --> 00:13:14,300
Type, what else we need in 32?

273
00:13:15,700 --> 00:13:30,800
Meta type hitpoints meta, type entity, reference meta type V 2 and

274
00:13:30,800 --> 00:13:32,300
meta type realtor joke.

275
00:13:32,700 --> 00:13:33,300
Right?

276
00:13:33,700 --> 00:13:37,300
And so if I have all these and I just said that's like a meta type or

277
00:13:37,300 --> 00:13:38,100
something like that.

278
00:13:38,200 --> 00:13:40,100
And I say this about a type, I say that.

279
00:13:40,100 --> 00:13:42,800
I've got the name, you know, whatever this thing is.

280
00:13:43,400 --> 00:13:45,400
And I say that I've got the

281
00:13:46,000 --> 00:13:46,800
From the strut.

282
00:13:48,400 --> 00:13:52,700
Now, if I want to, I can actually compile this, right?

283
00:13:52,700 --> 00:13:55,800
This could be something that gets compiled and, you know, I could put

284
00:13:55,800 --> 00:13:59,100
it in here, I don't know exactly how we want to do it but there's a

285
00:13:59,100 --> 00:14:01,700
handmade generate dot h and it comes in through the metal system or

286
00:14:01,700 --> 00:14:01,800
whatever.

287
00:14:01,800 --> 00:14:09,000
And so that would sort of make our program start to use in a very, you

288
00:14:09,000 --> 00:14:12,200
know, not actually doing anything but actually set up to do something

289
00:14:12,200 --> 00:14:14,700
way the meta code, right?

290
00:14:14,700 --> 00:14:18,400
And so, there we go and now you

291
00:14:18,500 --> 00:14:20,600
See that we're actually compiling the code.

292
00:14:20,900 --> 00:14:23,500
And we now have that member definition, right?

293
00:14:24,000 --> 00:14:27,400
That tells us everything that we wanted to know about the types that

294
00:14:27,400 --> 00:14:28,500
are introspected.

295
00:14:29,000 --> 00:14:32,900
Okay, so here's our handmade generated, it lists like everything that

296
00:14:32,900 --> 00:14:36,100
we need to know about that type and

297
00:14:39,600 --> 00:14:42,700
One thing I should mention, that's kind of nice about this, is this

298
00:14:42,700 --> 00:14:45,600
code is just generated and can now be checked into the project.

299
00:14:45,700 --> 00:14:48,700
So that's kind of a nice thing as well, because if the medic code

300
00:14:48,700 --> 00:14:53,500
generator ever breaks or it stops working, or we lose it or who knows

301
00:14:53,500 --> 00:14:57,500
what we still have at least one complete working version of The Thing

302
00:14:57,600 --> 00:14:58,400
to fall back on.

303
00:14:58,500 --> 00:14:59,800
Like we have a

304
00:15:00,000 --> 00:15:02,200
Working actual piece of C code.

305
00:15:02,200 --> 00:15:06,900
We could pretend we just wrote ourselves, forget the generator, and

306
00:15:06,900 --> 00:15:08,000
that's kind of nice as well.

307
00:15:08,000 --> 00:15:10,500
Write it out, put something that we can save along with the project

308
00:15:10,500 --> 00:15:12,800
and distribute if necessary or do anything else we might need to do.

309
00:15:13,100 --> 00:15:13,500
Right.

310
00:15:14,300 --> 00:15:18,200
Okay, so that's you know, that's that.

311
00:15:19,800 --> 00:15:23,200
So now, what how do you know how would we use that?

312
00:15:23,200 --> 00:15:26,600
How would we actually go about doing something useful there?

313
00:15:27,900 --> 00:15:30,600
And so, what I would say is let's go ahead and take a look.

314
00:15:30,600 --> 00:15:31,600
I don't remember.

315
00:15:33,200 --> 00:15:36,900
Where we ended up on the handmade debug set side of things.

316
00:15:37,500 --> 00:15:42,200
But for example, if you know where where we were at in here, where we

317
00:15:42,200 --> 00:15:46,300
were sort of doing the, the debug text out stuff like this stuff here,

318
00:15:46,300 --> 00:15:46,800
right?

319
00:15:47,800 --> 00:15:50,400
So, I don't really remember where we were at their, but if we wanted

320
00:15:50,400 --> 00:15:55,200
to, we could sort of do something where we may be, where we maybe take

321
00:15:55,200 --> 00:15:57,900
a look at how we would use this data there, right?

322
00:15:58,200 --> 00:15:59,800
So, how we might use this data?

323
00:15:59,800 --> 00:16:02,300
There is, let's say, for example, I want to

324
00:16:02,400 --> 00:16:06,100
Able to print out into the somehow or something like this.

325
00:16:06,300 --> 00:16:08,600
Again, I'm not really sure exactly how we want to go about that

326
00:16:08,600 --> 00:16:10,200
because we're kind of right in the middle of the debug stuff.

327
00:16:10,200 --> 00:16:12,200
So it's not really in a state where we can start using it.

328
00:16:12,200 --> 00:16:15,100
We were sort of making a bunch of changes to it and trying to push

329
00:16:15,100 --> 00:16:16,000
forwards onto things.

330
00:16:16,000 --> 00:16:19,300
It's not really ready for us to start relying on it, if it was, would

331
00:16:19,300 --> 00:16:19,900
be done.

332
00:16:22,100 --> 00:16:25,500
So, what I want to do is, I want to actually sort of use that, that

333
00:16:25,500 --> 00:16:28,700
data from handmade meta to like, iterate over some stuff, right?

334
00:16:28,900 --> 00:16:31,800
And so, the handmade generated thing, like this thing right here,

335
00:16:32,300 --> 00:16:34,500
I could, I could just say, okay, I've got this amenity.

336
00:16:34,500 --> 00:16:38,400
I want to be able to iterate over the members of cements amenity and I

337
00:16:38,400 --> 00:16:41,100
could totally do that as long as I actually had an entity.

338
00:16:41,500 --> 00:16:46,300
So the debug text out thing where do I actually say something like

339
00:16:46,300 --> 00:16:47,000
that?

340
00:16:47,500 --> 00:16:49,700
Where did I say the compounding think debug text line.

341
00:16:49,700 --> 00:16:50,200
There we go.

342
00:16:51,000 --> 00:16:55,600
So if I wanted to, I could imagine doing something here where I did

343
00:16:55,600 --> 00:16:56,100
something.

344
00:16:56,800 --> 00:17:00,600
Maybe I Loop through the members of this thing and print out all the

345
00:17:00,600 --> 00:17:02,100
members of a cemento t

346
00:17:02,400 --> 00:17:03,700
Whatever it was, right?

347
00:17:04,000 --> 00:17:06,900
So let's say, I took one here and I just said, I've got a Sim entity.

348
00:17:06,900 --> 00:17:10,500
This is our test entity that we're just going to create for the

349
00:17:10,500 --> 00:17:13,400
purposes of demonstrating that we can Loop over it and print things

350
00:17:13,400 --> 00:17:14,400
out, right?

351
00:17:16,000 --> 00:17:17,800
So here is our Sim region.

352
00:17:18,000 --> 00:17:19,400
Here are some of the stuff that's in there.

353
00:17:19,800 --> 00:17:22,400
So what I'm going to do is, I'm just going to go ahead and I'm going

354
00:17:22,400 --> 00:17:23,599
to set some of the basic things.

355
00:17:23,599 --> 00:17:27,500
Like, I'll set the distance limit to 10, right, I'll set the T-Bob

356
00:17:27,500 --> 00:17:28,800
20.1.

357
00:17:29,000 --> 00:17:32,900
I'll set the facing direction to like 360°, who knows?

358
00:17:33,400 --> 00:17:38,900
I'll set the diab Stiles e25 or for what who knows, right?

359
00:17:39,000 --> 00:17:40,700
So let's say I set some of those things.

360
00:17:40,900 --> 00:17:43,300
So now I've got a test any that has those things set.

361
00:17:43,600 --> 00:17:45,100
And now I want to print

362
00:17:45,300 --> 00:17:48,800
A out, the values of that, you know, using the debug text line thing

363
00:17:48,800 --> 00:17:50,300
or something like that, right?

364
00:17:51,500 --> 00:17:53,300
So that's all I need to be able to do.

365
00:17:53,600 --> 00:17:54,000
Okay?

366
00:17:54,600 --> 00:17:55,900
So if I want to do that,

367
00:17:57,000 --> 00:17:58,000
You know, we should probably do next.

368
00:17:58,000 --> 00:17:59,900
Let's be sure to replace this bridge as well.

369
00:18:00,000 --> 00:18:00,600
That's the next time.

370
00:18:00,600 --> 00:18:01,800
We do a fun little thing.

371
00:18:02,000 --> 00:18:04,300
That's what we should do is like bright our own printf.

372
00:18:05,000 --> 00:18:05,700
It's time.

373
00:18:06,100 --> 00:18:07,000
It's time.

374
00:18:08,700 --> 00:18:10,400
All right, so if we're going to go ahead and

375
00:18:12,800 --> 00:18:16,700
Print out these values, right then oops, that was not where I meant to

376
00:18:16,700 --> 00:18:17,300
put that.

377
00:18:19,400 --> 00:18:20,900
And that's not what I wanted either.

378
00:18:22,400 --> 00:18:23,600
Try that one more time.

379
00:18:23,600 --> 00:18:24,100
There we go.

380
00:18:24,800 --> 00:18:27,700
Okay, so

381
00:18:30,700 --> 00:18:34,100
if I want to print this out, then you can sort of see like, okay, I've

382
00:18:34,100 --> 00:18:37,600
got to read over the members, right, so I can just say, like member

383
00:18:37,600 --> 00:18:42,400
index, you know, goes from zero to however many there are in that type

384
00:18:42,400 --> 00:18:42,900
field.

385
00:18:42,900 --> 00:18:46,600
So right, this guy right here, however, many there were in there is

386
00:18:46,600 --> 00:18:49,200
how many I would need to iterate over right.

387
00:18:49,300 --> 00:18:53,400
Then, I know that I've got the member definition for all of them by

388
00:18:53,400 --> 00:18:56,600
just looking at this array plus whatever the member dicks it.

389
00:18:56,600 --> 00:18:59,600
So I just iterate over the members of the thing and I know that that

390
00:18:59,600 --> 00:19:00,200
will be all the

391
00:19:00,500 --> 00:19:02,500
That exists inside the struct, right?

392
00:19:02,900 --> 00:19:05,700
Then for every member I can just look at what type.

393
00:19:05,800 --> 00:19:10,300
I'm actually, you know, talking about here and for the ones that I

394
00:19:10,300 --> 00:19:12,600
know about I can print those out, right?

395
00:19:12,600 --> 00:19:17,600
So I could do like anything, that's a Unit 32 I could do anything.

396
00:19:17,600 --> 00:19:23,700
That's a rule 32, for example, I could do anything that's an in 32, I

397
00:19:23,700 --> 00:19:24,400
could do anything.

398
00:19:24,400 --> 00:19:26,300
That's a real pretty too, right?

399
00:19:26,500 --> 00:19:29,000
Those are some that would be really easy for me to print out right

400
00:19:29,000 --> 00:19:29,400
now.

401
00:19:29,600 --> 00:19:30,300
We would have to write

402
00:19:30,400 --> 00:19:33,300
Kind of fancy code for it or anything like that.

403
00:19:34,700 --> 00:19:36,300
So let's say we just take

404
00:19:38,300 --> 00:19:41,600
Something like this and then we just go ahead and actually print these

405
00:19:41,600 --> 00:19:42,100
guys out.

406
00:19:42,200 --> 00:19:42,600
Okay.

407
00:19:43,400 --> 00:19:44,100
So

408
00:19:46,500 --> 00:19:47,200
All right.

409
00:19:48,500 --> 00:19:51,900
What we would do here is we just say, okay, we know what the member

410
00:19:51,900 --> 00:19:55,300
name is right, we know what the member of the struct is that we're

411
00:19:55,300 --> 00:19:56,300
talking about.

412
00:19:56,300 --> 00:20:00,300
We know the member of the struct is whatever the member entities, the

413
00:20:00,300 --> 00:20:04,100
that array, that we generated whatever it says it is, right?

414
00:20:04,200 --> 00:20:06,600
Because that tells us the information we need.

415
00:20:06,800 --> 00:20:09,900
So we know the name and then to print out a human 32.

416
00:20:09,900 --> 00:20:15,600
I just now I just need to know what's the actual value and I know I've

417
00:20:15,600 --> 00:20:16,100
got, you know,

418
00:20:16,300 --> 00:20:17,200
Different kind of print out.

419
00:20:17,200 --> 00:20:19,900
I know I have like the address of the enemy for example, right.

420
00:20:20,000 --> 00:20:21,200
So I know I have that.

421
00:20:21,200 --> 00:20:24,900
I know I have, you know, that as a pointer so I can start there and

422
00:20:24,900 --> 00:20:28,300
then all I would need to know is how far I would go, right?

423
00:20:28,400 --> 00:20:30,000
So assuming I cast it to you ate.

424
00:20:30,000 --> 00:20:31,000
So we're moving in B.

425
00:20:31,100 --> 00:20:33,700
I just need to know how far from the beginning of the of the entity

426
00:20:33,700 --> 00:20:37,300
that you and 32 actually is and of course that's exactly what the

427
00:20:37,300 --> 00:20:38,300
offset tells me.

428
00:20:38,300 --> 00:20:40,100
That's what this thing tells me, right?

429
00:20:40,200 --> 00:20:43,900
So I would just go however, far the member us it is and now I know

430
00:20:43,900 --> 00:20:45,400
that I'm pointing to

431
00:20:46,200 --> 00:20:47,300
A, you went 32.

432
00:20:47,700 --> 00:20:51,000
So if I want to print it out, I just dereference it, right?

433
00:20:52,100 --> 00:20:52,800
Makes sense.

434
00:20:54,800 --> 00:20:58,000
so, all I did was say start having a structure go however, much the

435
00:20:58,000 --> 00:20:59,800
offset is that is the

436
00:21:00,000 --> 00:21:03,800
32 that we're looking for, print it out right now, the exact same

437
00:21:03,800 --> 00:21:07,200
thing would hold for anything else, right?

438
00:21:07,400 --> 00:21:10,900
I can do a Boolean that way I can do an integer that way.

439
00:21:11,800 --> 00:21:16,400
Totally trivially, I can do a float that way, again, very, very

440
00:21:16,400 --> 00:21:17,200
straightforward.

441
00:21:18,700 --> 00:21:21,200
And that's it, it's so easy.

442
00:21:21,200 --> 00:21:24,200
In fact that you can see it basically works exactly the same every

443
00:21:24,200 --> 00:21:24,800
time.

444
00:21:25,100 --> 00:21:27,600
So I can even do something like saying that, I just have a member

445
00:21:27,600 --> 00:21:29,900
pointer, the member pointer is always going to

446
00:21:30,000 --> 00:21:31,200
To be exactly the same.

447
00:21:31,200 --> 00:21:34,000
I just don't know, what type, I'm actually pointing to until I go

448
00:21:34,000 --> 00:21:35,200
through the switch statement.

449
00:21:35,200 --> 00:21:39,400
So all I would have to do is this right?

450
00:21:44,000 --> 00:21:44,500
That's all.

451
00:21:45,300 --> 00:21:46,600
I always know the member name.

452
00:21:46,600 --> 00:21:48,100
I always know the member pointer.

453
00:21:48,100 --> 00:21:49,000
I always know.

454
00:21:50,700 --> 00:21:52,500
Everything I need to know in order to print this out.

455
00:21:52,500 --> 00:21:58,100
So if I go ahead and compile this, now all I need to do is print it

456
00:21:58,100 --> 00:21:58,700
out.

457
00:21:58,700 --> 00:22:01,600
So when I've got one of these, I can just say, you know, if text

458
00:22:01,600 --> 00:22:02,300
buffer zero.

459
00:22:02,300 --> 00:22:05,800
So if we actually printed in ink, every anything everything, whatever

460
00:22:06,800 --> 00:22:09,400
we can go ahead and print it out.

461
00:22:09,400 --> 00:22:15,000
So now I should have a way to, you know, sort of debug inspect, those

462
00:22:15,000 --> 00:22:17,500
things in an automatic way, right?

463
00:22:18,200 --> 00:22:20,400
So okay, so now I run the code.

464
00:22:21,300 --> 00:22:22,700
Oops, that's the preprocessor.

465
00:22:22,700 --> 00:22:25,100
That's, that's actually run the actual game.

466
00:22:26,500 --> 00:22:29,500
So now I run the code right, and you can see there that we've got some

467
00:22:29,500 --> 00:22:36,300
stuff Flags, distance, limit facing Direction T-Bob, right, actually

468
00:22:36,300 --> 00:22:36,600
08.

469
00:22:36,600 --> 00:22:38,100
No, Flags is something else.

470
00:22:38,100 --> 00:22:38,700
What am I looking?

471
00:22:38,700 --> 00:22:39,100
I'm sorry.

472
00:22:39,300 --> 00:22:40,700
Distance limit facing Direction.

473
00:22:40,700 --> 00:22:43,800
T, Bob, and abs tile Z or the ones were looking at right there.

474
00:22:44,000 --> 00:22:47,100
Yeah, that's don't ask me.

475
00:22:48,300 --> 00:22:48,800
Oh wait.

476
00:22:48,800 --> 00:22:52,200
No that's those are actually just things that it picked up, right?

477
00:22:52,200 --> 00:22:55,200
Because it's going to print them out just because I never said them,

478
00:22:55,700 --> 00:22:56,900
they're just set to zero.

479
00:22:56,900 --> 00:22:59,800
So it just printed out all the things that it knew how to print out

480
00:22:59,800 --> 00:23:01,200
that's kind of fun, right?

481
00:23:02,000 --> 00:23:02,600
So there it is.

482
00:23:02,600 --> 00:23:04,900
There's the automated inspection, right in.

483
00:23:04,900 --> 00:23:08,200
The nice thing about this is this right here is totally reusable.

484
00:23:08,200 --> 00:23:12,700
Write this piece of code will print out any structure that we want it

485
00:23:12,700 --> 00:23:14,300
to any structure at.

486
00:23:14,300 --> 00:23:15,500
All right?

487
00:23:15,600 --> 00:23:17,800
So for example, if we want to

488
00:23:18,100 --> 00:23:19,300
Under this very trivially.

489
00:23:19,400 --> 00:23:22,900
We could just have a think here, which is like debug dump struck,

490
00:23:23,300 --> 00:23:24,000
right?

491
00:23:24,100 --> 00:23:28,200
And debug dunk struck dumb struck with just take the struct pointer.

492
00:23:29,300 --> 00:23:29,500
Right.

493
00:23:29,500 --> 00:23:34,500
So we know where the struct actually is and then we would take a

494
00:23:34,500 --> 00:23:36,800
pointer to this thing, right?

495
00:23:36,800 --> 00:23:38,000
So remember definition.

496
00:23:40,200 --> 00:23:41,600
Remember deaths.

497
00:23:42,000 --> 00:23:43,600
And then, we just need to know the number.

498
00:23:43,800 --> 00:23:46,400
Remember death count, right?

499
00:23:46,700 --> 00:23:47,900
That's all we need it.

500
00:23:47,900 --> 00:23:50,700
We didn't need to know which truck, that was, that was not at all.

501
00:23:50,700 --> 00:23:51,800
And I don't know why that's still there.

502
00:23:51,800 --> 00:23:54,900
That was not at all relevant to what we were doing, right?

503
00:23:55,100 --> 00:23:58,800
So we can just come in here and say, okay, all we need to do is say go

504
00:23:58,800 --> 00:23:59,200
through.

505
00:23:59,200 --> 00:23:59,800
However, the

506
00:24:00,400 --> 00:24:04,400
Many, these were, you know, there were and I guess this is technically

507
00:24:04,400 --> 00:24:05,400
just a member count.

508
00:24:06,500 --> 00:24:07,900
Doesn't matter whether their desks or anything else.

509
00:24:07,900 --> 00:24:11,100
That's how many there has soaked ears, the member deaths, right

510
00:24:11,100 --> 00:24:13,000
generically speaking just iterate over them.

511
00:24:13,200 --> 00:24:15,300
The struct pointer is this thing right here.

512
00:24:17,400 --> 00:24:19,200
And that's it, right?

513
00:24:19,400 --> 00:24:21,500
So now, debug dunks, dump struct.

514
00:24:21,500 --> 00:24:24,900
Will dump any structure that we ever have.

515
00:24:24,900 --> 00:24:28,500
As long as we marked it up for annotation somehow, right?

516
00:24:28,900 --> 00:24:31,500
And so, we can easily say we want to dump the struct.

517
00:24:31,500 --> 00:24:32,900
There's this truck, we want to dump.

518
00:24:33,100 --> 00:24:35,500
All we need to do is tell it how many of these there are.

519
00:24:35,500 --> 00:24:36,800
So there's that.

520
00:24:37,100 --> 00:24:37,900
And this

521
00:24:40,300 --> 00:24:42,700
And now we can dump a structure, right?

522
00:24:43,100 --> 00:24:45,400
So if you take a look and I guess I could have just left that running,

523
00:24:45,400 --> 00:24:46,700
but just to prove that it's working, right?

524
00:24:46,700 --> 00:24:47,500
We run it again.

525
00:24:48,000 --> 00:24:48,800
So there it is.

526
00:24:48,900 --> 00:24:51,200
If I can, just leave it running, we got hot look code reloading, so it

527
00:24:51,200 --> 00:24:51,800
doesn't matter.

528
00:24:53,200 --> 00:24:58,500
So anyway, that is the basic metaphor do anything now, just to show

529
00:24:58,500 --> 00:25:02,200
how powerful that is, you know, this is obviously if we if we wanted

530
00:25:02,200 --> 00:25:06,800
to we could augment this really quickly and say, alright, let's say

531
00:25:06,800 --> 00:25:08,600
that this is debug text line.

532
00:25:08,800 --> 00:25:09,200
This is

533
00:25:09,300 --> 00:25:11,600
Are you know Sim entity test?

534
00:25:13,100 --> 00:25:15,100
So now, you know, if we take a look there you can see.

535
00:25:15,100 --> 00:25:16,800
This is cemented to printing out.

536
00:25:16,900 --> 00:25:20,700
Let's say now we want to do anything else in our system, anything at,

537
00:25:20,700 --> 00:25:21,800
all right?

538
00:25:22,200 --> 00:25:25,600
So we go up here and we say, you know what, I really wish I could dump

539
00:25:25,600 --> 00:25:28,100
something else out here, I don't know what it's going to be.

540
00:25:28,100 --> 00:25:29,300
What do you guys want it to be?

541
00:25:29,300 --> 00:25:30,000
I'm not sure.

542
00:25:30,100 --> 00:25:31,800
Let's just say it's the same region for now.

543
00:25:31,800 --> 00:25:32,500
I suppose.

544
00:25:32,600 --> 00:25:33,100
Right.

545
00:25:33,300 --> 00:25:37,000
All we have to do is that that's it, we just say introspect.

546
00:25:37,400 --> 00:25:39,800
And now this thing will be introspected.

547
00:25:39,800 --> 00:25:42,300
So when I compile the code, right?

548
00:25:42,900 --> 00:25:45,100
We get all of the definitions that we want.

549
00:25:45,200 --> 00:25:49,400
As you can see, in the only thing that we have to do is anything that

550
00:25:49,400 --> 00:25:51,700
was a new type that was in here that you don't know about.

551
00:25:51,700 --> 00:25:57,000
We have to add to our our list in The Meta thing.

552
00:25:57,400 --> 00:25:59,900
Now, even that we don't actually have to do, but I'm kind of saving

553
00:25:59,900 --> 00:26:04,100
that for the end for the for the next 30 minutes we're going to do but

554
00:26:04,100 --> 00:26:06,600
you can kind of see here in fact, I guess I can just let the compiler,

555
00:26:06,600 --> 00:26:09,000
tell me what they are all we need to do, is make sure that those

556
00:26:09,000 --> 00:26:10,800
things are actually defined as type.

557
00:26:10,800 --> 00:26:12,500
So that's what I'm going to do very quickly.

558
00:26:12,700 --> 00:26:13,700
Like, you can see here.

559
00:26:15,300 --> 00:26:16,100
Me doing.

560
00:26:16,700 --> 00:26:17,400
There we go.

561
00:26:19,900 --> 00:26:21,800
And done.

562
00:26:23,000 --> 00:26:23,600
Right.

563
00:26:25,100 --> 00:26:27,000
Again, that's really it, you know.

564
00:26:27,200 --> 00:26:30,600
Now we have the complete definition of those compiled into the game.

565
00:26:30,800 --> 00:26:34,500
So now, if we wanted to, we could again, inspect that with absolutely

566
00:26:34,500 --> 00:26:35,300
no work at all.

567
00:26:35,300 --> 00:26:40,600
If we had one of these things like, you know, whatever it was, I don't

568
00:26:40,600 --> 00:26:40,700
know.

569
00:26:40,700 --> 00:26:42,700
One of these guys, I don't know what will set here.

570
00:26:42,900 --> 00:26:47,200
Let's say we set these real 32s or something like this and these you

571
00:26:47,200 --> 00:26:48,300
and 32s.

572
00:26:48,800 --> 00:26:52,100
So I do assume region, you know, here is our test region.

573
00:26:52,300 --> 00:26:52,600
This

574
00:26:52,800 --> 00:26:56,800
Pretend this happened somewhere in the game and we said there's the

575
00:26:56,800 --> 00:26:57,600
test region.

576
00:27:01,700 --> 00:27:08,500
So here is the radius, there's the velocity, there's the entity count

577
00:27:09,900 --> 00:27:13,100
Max and account and the account, whatever something like this, all we

578
00:27:13,100 --> 00:27:14,600
would have to do to dump it.

579
00:27:14,600 --> 00:27:16,700
It just call the same routine again, right?

580
00:27:16,800 --> 00:27:20,000
So literally the sum total of the work, it takes to read up.

581
00:27:20,000 --> 00:27:22,200
That is just calling this routine.

582
00:27:22,400 --> 00:27:22,800
Again,

583
00:27:24,400 --> 00:27:26,100
Right, that's it.

584
00:27:26,600 --> 00:27:29,200
And now you can see that we've got the same region printing out, we

585
00:27:29,200 --> 00:27:31,100
didn't have to write a single line of code.

586
00:27:31,100 --> 00:27:35,200
Basically, all we did was just ask for that thing to be printed and it

587
00:27:35,200 --> 00:27:38,700
gets printed completely fully 100% automatically.

588
00:27:38,700 --> 00:27:39,100
Now,

589
00:27:40,900 --> 00:27:42,000
As you know, though.

590
00:27:45,100 --> 00:27:46,500
Or as you've seen, I should say.

591
00:27:48,200 --> 00:27:52,900
If we take a look at the process there, there is something very

592
00:27:52,900 --> 00:27:54,600
unsatisfying about it, right?

593
00:27:56,100 --> 00:28:03,600
And that something is the fact that if you look at, you know, at the

594
00:28:03,600 --> 00:28:09,800
code here, every time there's a new type, we have to redefine it in

595
00:28:09,800 --> 00:28:14,800
our handmade meta, and that's not the most troubling part, you know,

596
00:28:14,800 --> 00:28:17,500
that's not great, but it's not the most telling part the most

597
00:28:17,500 --> 00:28:21,900
troubling part is we don't actually have any way to, to print those

598
00:28:21,900 --> 00:28:22,800
out, right?

599
00:28:23,000 --> 00:28:24,700
So let's say, for example,

600
00:28:27,100 --> 00:28:31,700
Tuesday, let's say, for example that I went into handmade math.h,

601
00:28:31,900 --> 00:28:32,400
right?

602
00:28:32,600 --> 00:28:36,800
So I go into handmade math.h and I say, okay, you know what?

603
00:28:37,700 --> 00:28:41,800
Rectangle, as you can kind of see somewhere in here.

604
00:28:41,800 --> 00:28:43,400
Probably struct.

605
00:28:43,400 --> 00:28:45,000
I don't know where it is.

606
00:28:45,000 --> 00:28:46,700
It struck rectangle.

607
00:28:47,300 --> 00:28:47,900
Here we go.

608
00:28:49,000 --> 00:28:51,000
So rectangle to, right?

609
00:28:51,100 --> 00:28:54,300
I just want to say that I want to introspect this, right?

610
00:28:56,100 --> 00:28:57,400
I want to introspect that thing.

611
00:28:58,300 --> 00:29:00,700
I want to select a rectangle to, I want to spec introspect.

612
00:29:00,700 --> 00:29:01,100
Rectangle.

613
00:29:01,100 --> 00:29:02,000
Three, right?

614
00:29:03,300 --> 00:29:07,200
So now, the inter Specter, as you can see, if I reload this.

615
00:29:07,600 --> 00:29:10,000
Oh well, you know, we do need to do one other thing first.

616
00:29:10,200 --> 00:29:15,600
I think our little test guy doesn't actually process all the files,

617
00:29:15,700 --> 00:29:16,300
right?

618
00:29:17,600 --> 00:29:18,100
Yeah.

619
00:29:18,100 --> 00:29:20,000
It does not actually parse this all the files.

620
00:29:20,600 --> 00:29:22,700
So we actually want to do this right?

621
00:29:31,300 --> 00:29:32,200
Sorry about that.

622
00:29:32,400 --> 00:29:37,000
I forgot we're not really doing all the stuff file names.

623
00:29:37,400 --> 00:29:38,700
Supposed to file index.

624
00:29:41,500 --> 00:29:45,300
File name index.

625
00:29:48,300 --> 00:29:48,800
Okay.

626
00:29:51,800 --> 00:29:54,800
All right, so assuming that we actually ran this on all of our code,

627
00:29:54,800 --> 00:29:56,300
which is probably what we would do, right?

628
00:29:56,300 --> 00:29:59,100
If we were going the full route there,

629
00:30:02,700 --> 00:30:03,500
That's not going to work.

630
00:30:03,500 --> 00:30:03,900
Okay.

631
00:30:05,100 --> 00:30:06,900
And that's not find here.

632
00:30:11,200 --> 00:30:15,600
Okay, so assuming we actually run it on our code, which we would need

633
00:30:15,600 --> 00:30:15,900
to do.

634
00:30:15,900 --> 00:30:19,100
You can see we get our rectangle to and a rectangle.

635
00:30:19,100 --> 00:30:20,900
Three are now defined, right?

636
00:30:20,900 --> 00:30:28,100
So really if you think about what this means in theory, we shouldn't

637
00:30:28,100 --> 00:30:32,800
actually have to do anything to get those types.

638
00:30:32,800 --> 00:30:33,300
Right?

639
00:30:33,300 --> 00:30:37,400
Like The Meta code already knows about rectangle to.

640
00:30:37,400 --> 00:30:40,800
So why am I sitting here having

641
00:30:41,200 --> 00:30:43,900
To deal with this extra type, right?

642
00:30:46,100 --> 00:30:50,500
Because what I'd have to do, let's say we want to inspect that bounds

643
00:30:50,500 --> 00:30:51,700
member right?

644
00:30:52,100 --> 00:30:55,200
What I would have to do if we want to inspect that balance member was

645
00:30:55,200 --> 00:30:59,100
in here, I'd have to add every time we have a new type like that,

646
00:30:59,200 --> 00:30:59,500
right.

647
00:30:59,500 --> 00:31:03,600
I have to go in here and add it in, right?

648
00:31:03,600 --> 00:31:06,900
So I have to go in there and do some nonsense like this.

649
00:31:07,700 --> 00:31:11,300
Where I say like, oh yeah right okay it's the rectangle.

650
00:31:11,300 --> 00:31:15,700
So you know it's got a bunch of these

651
00:31:15,900 --> 00:31:19,500
Things like this sort of a thing or whatever.

652
00:31:19,500 --> 00:31:20,500
It's going to happen.

653
00:31:21,400 --> 00:31:24,400
So I'm saying like you know, sprintf all that stuff out.

654
00:31:24,400 --> 00:31:25,500
Here's the member pointer.

655
00:31:25,500 --> 00:31:29,700
So the member pointer points to a rectangle three you know.

656
00:31:32,900 --> 00:31:36,500
So I do the pointer to a rectangle 3 and now I got to get out like the

657
00:31:36,500 --> 00:31:38,300
Minn dot X, right?

658
00:31:38,300 --> 00:31:43,400
And I'm doing this whole nonsense like so and like the max audax,

659
00:31:43,700 --> 00:31:44,400
right?

660
00:31:46,300 --> 00:31:47,000
Okay.

661
00:31:48,000 --> 00:31:52,000
And then, you know, then I find Loops, I don't know why decided that

662
00:31:52,000 --> 00:31:54,600
there's gonna be a lot of extra member names in there.

663
00:31:56,100 --> 00:31:58,300
So at that point, right?

664
00:31:59,300 --> 00:32:03,800
I could actually view those rectangles but I had to write all of that

665
00:32:03,800 --> 00:32:05,000
code, right?

666
00:32:05,100 --> 00:32:07,700
So I had to write all of that code to do that.

667
00:32:08,100 --> 00:32:10,900
Now, why am I writing that code?

668
00:32:11,600 --> 00:32:15,800
When you can kind of see that the meta generator could be doing it for

669
00:32:15,800 --> 00:32:16,800
me, right?

670
00:32:16,800 --> 00:32:20,900
The Meta generator in here already picked those guys up, right?

671
00:32:20,900 --> 00:32:22,900
It's got the V2 and V3 there, right?

672
00:32:23,100 --> 00:32:25,200
So really all that should have to happen.

673
00:32:26,100 --> 00:32:27,300
This right?

674
00:32:27,400 --> 00:32:30,200
I say, okay, I got to a rectangle three.

675
00:32:30,400 --> 00:32:34,400
Let me just do a debug dumps truck here, right?

676
00:32:34,400 --> 00:32:38,700
I'll use whatever the, the generator said for that thing, whatever.

677
00:32:38,700 --> 00:32:39,800
That is, right.

678
00:32:39,900 --> 00:32:43,400
I'll say debug dump struct of your account of.

679
00:32:43,600 --> 00:32:46,300
This guy goes to the members.

680
00:32:46,600 --> 00:32:51,400
And the member pointer is the pointer to the new struct that the dumps

681
00:32:51,400 --> 00:32:53,600
truck should output, right?

682
00:32:55,100 --> 00:32:55,800
Make sense.

683
00:32:57,100 --> 00:32:59,800
So, you know, now when I run the code

684
00:33:01,100 --> 00:33:05,000
I should get something to actually automatically outputs that stuff

685
00:33:05,500 --> 00:33:06,700
for me if that makes sense.

686
00:33:07,000 --> 00:33:09,800
Although wait, what happened there?

687
00:33:10,500 --> 00:33:15,800
Debug jump struct or Tango three-member pointer.

688
00:33:15,800 --> 00:33:16,800
Why am I not see?

689
00:33:17,500 --> 00:33:18,900
Why am I not seeing that?

690
00:33:22,300 --> 00:33:23,200
Oh, I know why?

691
00:33:23,800 --> 00:33:24,700
Because it's a V2.

692
00:33:28,000 --> 00:33:28,400
Right?

693
00:33:28,500 --> 00:33:32,500
We didn't Implement these for these so I'd still do need one thing.

694
00:33:32,700 --> 00:33:34,200
In fact, I should probably do this.

695
00:33:35,400 --> 00:33:38,600
To save us the agony, right?

696
00:33:41,400 --> 00:33:43,400
I'm going to type B 3.

697
00:33:45,700 --> 00:33:46,300
Like so.

698
00:33:49,800 --> 00:33:50,300
Okay.

699
00:33:51,300 --> 00:33:53,200
So here

700
00:33:54,500 --> 00:33:55,800
We have.

701
00:33:58,600 --> 00:34:00,000
I guess I don't really need to do that.

702
00:34:03,000 --> 00:34:03,400
There we go.

703
00:34:05,800 --> 00:34:06,200
Okay.

704
00:34:07,400 --> 00:34:08,100
Sorry for that.

705
00:34:08,100 --> 00:34:10,100
Brief stupidity there.

706
00:34:12,199 --> 00:34:16,900
Okay, so in theory, now we're putting that out although still have

707
00:34:16,900 --> 00:34:23,699
some weird thing happening there member pointer for the V3.

708
00:34:25,199 --> 00:34:29,900
Is that correct debug dumbstruck members of rectangle 3 and we come

709
00:34:29,900 --> 00:34:31,199
through here to print these out.

710
00:34:31,199 --> 00:34:33,699
I'm going to actually set these to something I know as well just so I

711
00:34:33,699 --> 00:34:36,100
can double-check that.

712
00:34:36,199 --> 00:34:41,100
What should what should remember is that show me some region?

713
00:34:42,500 --> 00:34:43,900
Show me some region.

714
00:34:43,900 --> 00:34:49,199
Okay, so bounds men are I guess we could do rectangle, you know,

715
00:34:49,600 --> 00:34:50,100
angle.

716
00:34:51,800 --> 00:34:55,600
Min max and like that and then just specify those.

717
00:34:55,600 --> 00:34:59,700
So there's the updatable bounds and there's the bounds.

718
00:34:59,700 --> 00:35:06,100
I'm going to be 1 2 3, 4 5 6 and 10 20, 30 40 50 60.

719
00:35:08,400 --> 00:35:11,400
Yeah, so okay.

720
00:35:11,400 --> 00:35:13,400
So yes I've got some.

721
00:35:14,200 --> 00:35:14,800
Can I see that?

722
00:35:14,800 --> 00:35:16,900
I've got some nastiness happening there.

723
00:35:17,800 --> 00:35:21,100
What is the problem with that?

724
00:35:23,300 --> 00:35:25,800
when we hit meditate rectangle, 3,

725
00:35:28,200 --> 00:35:31,900
Ah, I undid too much code.

726
00:35:32,700 --> 00:35:33,100
Okay.

727
00:35:33,800 --> 00:35:34,100
All right.

728
00:35:34,100 --> 00:35:35,100
So back to what I was saying.

729
00:35:35,600 --> 00:35:40,100
So now we've got the min/max stuff printed out, right?

730
00:35:40,800 --> 00:35:43,200
Although it looks like I'm one off.

731
00:35:43,200 --> 00:35:44,600
Yep, x y.

732
00:35:44,600 --> 00:35:45,700
Z we go.

733
00:35:46,700 --> 00:35:49,400
So now we got that stuff printed out, right?

734
00:35:49,400 --> 00:35:52,900
We're calling we're using the generated stuff to get those types,

735
00:35:52,900 --> 00:35:53,400
right?

736
00:35:53,400 --> 00:35:58,400
But I still had to write this part right here, right?

737
00:35:58,400 --> 00:35:59,800
So, basically, what's going to

738
00:36:00,000 --> 00:36:02,500
Here is that's going to happen, pretty much for everything.

739
00:36:02,500 --> 00:36:05,400
Now, I could do some base types and that wouldn't really bother me.

740
00:36:05,600 --> 00:36:09,300
So if I had to do like these two types, so we just have V2 and V3, or

741
00:36:09,300 --> 00:36:12,500
something like that in there, that would necessarily bother me.

742
00:36:12,700 --> 00:36:15,700
But what would bother me is stuff like this, where it's like, okay,

743
00:36:15,900 --> 00:36:18,700
you know, suppose I want to actually have a thing where I can print

744
00:36:18,700 --> 00:36:19,200
everything out.

745
00:36:19,200 --> 00:36:20,500
Well, if I look at what's in here.

746
00:36:20,800 --> 00:36:23,100
Okay, I've got like, you know, World chunk.

747
00:36:24,300 --> 00:36:27,800
And like Sim entity Collision volume group, and entity reference and

748
00:36:27,800 --> 00:36:28,400
hit point.

749
00:36:28,500 --> 00:36:30,500
I'm gonna have to lead, like, putting all of those in here.

750
00:36:30,700 --> 00:36:33,300
So in addition to all of these, like sort of more basic ones like

751
00:36:33,300 --> 00:36:37,200
rectangle to, and rectangle three, I've got to like put every last

752
00:36:37,400 --> 00:36:39,300
stupid one of these, right?

753
00:36:39,300 --> 00:36:43,400
I've got to actually do that code myself which is not so interesting

754
00:36:43,400 --> 00:36:43,800
to me, right?

755
00:36:43,800 --> 00:36:46,700
Like that is just again, exactly the sort of thing that I was trying

756
00:36:46,700 --> 00:36:48,300
to avoid to a large extent.

757
00:36:48,300 --> 00:36:49,700
Looks like there wasn't a rectangle too.

758
00:36:51,200 --> 00:36:51,900
That was exactly.

759
00:36:51,900 --> 00:36:53,800
The thing that I was trying to avoid with the metal part, on the first

760
00:36:53,800 --> 00:36:56,200
places, I want this code to be generated for me, I don't have to do

761
00:36:56,200 --> 00:36:57,500
it, right.

762
00:36:58,800 --> 00:37:00,300
So, there's a couple things we can do there.

763
00:37:04,500 --> 00:37:05,000
Right?

764
00:37:05,900 --> 00:37:09,600
And the simplest and most straightforward one, there's there's more

765
00:37:09,600 --> 00:37:10,700
complicated things you can do.

766
00:37:12,400 --> 00:37:17,400
But the simplest and most straightforward one is actually just declare

767
00:37:17,400 --> 00:37:22,900
which one's of these we are actually going to print out ourselves and

768
00:37:23,600 --> 00:37:27,500
and and let it go from there or a sort of another another way to do.

769
00:37:27,500 --> 00:37:31,200
It would just be to say we can have the meta generator.

770
00:37:31,200 --> 00:37:35,900
Perhaps remember all of the things that it has seen and anytime it

771
00:37:35,900 --> 00:37:40,100
knows that it has the data for something, allow that to be something

772
00:37:40,100 --> 00:37:41,800
that gets switch case.

773
00:37:42,100 --> 00:37:42,600
Right?

774
00:37:43,200 --> 00:37:44,600
So let me show you what that would look like.

775
00:37:44,600 --> 00:37:47,900
Just again to sort of underscore how this sort of thing tends to work.

776
00:37:48,400 --> 00:37:53,800
So let's suppose that I do my sort of read entire contents into file

777
00:37:53,800 --> 00:37:55,900
contents into memory and I'll terminate sort of stuff here.

778
00:37:56,500 --> 00:37:57,700
If I was going to do this,

779
00:37:58,800 --> 00:38:00,300
Let me show you the simplest possible way.

780
00:38:00,300 --> 00:38:04,100
This is the way that requires never not actually creating anything

781
00:38:04,300 --> 00:38:05,500
inside the meta generator.

782
00:38:05,500 --> 00:38:08,100
To actually, the actually understands what it's seeing.

783
00:38:08,200 --> 00:38:10,400
It's still just kind of a macro processor, right?

784
00:38:10,600 --> 00:38:14,200
So the simplest possible way to do it, is to say, all right, whenever

785
00:38:14,200 --> 00:38:18,300
I'm going to see one of these guys whenever I see a par struct, I'm

786
00:38:18,300 --> 00:38:23,800
going to take a look at, I'm sorry, not a struct whenever I see.

787
00:38:27,400 --> 00:38:28,100
Actually no.

788
00:38:29,800 --> 00:38:30,700
That is what I meant.

789
00:38:31,200 --> 00:38:33,500
So whenever I see a par struct, right?

790
00:38:34,400 --> 00:38:39,200
I'm going to make note of what that struct actually was, right.

791
00:38:39,200 --> 00:38:43,000
I'm going to keep track of just all the ones that I've seen and then

792
00:38:43,000 --> 00:38:47,600
at the end, I'll output something that's going to allow me to process

793
00:38:47,600 --> 00:38:51,500
those as sort of switch debug dumps, right?

794
00:38:52,100 --> 00:38:55,100
So let's say, for example, that I just do something here, where I kind

795
00:38:55,100 --> 00:38:59,400
of have again, like something I have no idea, you know,

796
00:39:02,800 --> 00:39:05,400
Strut seen struct something.

797
00:39:05,400 --> 00:39:07,600
I've seen her like the métis truck.

798
00:39:07,600 --> 00:39:09,000
I don't know, right?

799
00:39:09,100 --> 00:39:10,100
Just have the meta struck.

800
00:39:10,100 --> 00:39:14,200
All it has is, like, what's the name right of the Menace trucked.

801
00:39:15,000 --> 00:39:19,000
And and I think that actually, you know what that's it.

802
00:39:19,000 --> 00:39:21,700
It's just what the name of the meta struct is right, like, that's all

803
00:39:21,700 --> 00:39:24,900
there is to it and maybe even just, you know, something like this.

804
00:39:24,900 --> 00:39:29,600
We're gonna strike next and I just feel like first met a struct, write

805
00:39:29,600 --> 00:39:29,800
something.

806
00:39:30,000 --> 00:39:30,600
Like that.

807
00:39:33,000 --> 00:39:36,000
So what I can do there is every time I parse a struct.

808
00:39:36,000 --> 00:39:39,300
When I see that what I'll do is I'll just remember that that's truck

809
00:39:39,300 --> 00:39:41,100
actually existed, right?

810
00:39:41,100 --> 00:39:43,700
So I'll say OK, I want a new meta struct.

811
00:39:44,800 --> 00:39:48,300
You know, one of these things I'll just grab one.

812
00:39:51,700 --> 00:39:54,100
However, big that is and again I'm going to keep this to the end of

813
00:39:54,100 --> 00:39:55,900
the program so you don't need to worry about it at all.

814
00:39:56,900 --> 00:39:58,600
So I just meant like one of those.

815
00:39:58,800 --> 00:40:00,100
I want to take the name.

816
00:40:00,500 --> 00:40:01,600
I think it's turcotte.

817
00:40:02,000 --> 00:40:03,100
It's stir.

818
00:40:03,200 --> 00:40:04,400
What's the actual?

819
00:40:04,400 --> 00:40:07,600
I never use the same runtime Library so I never remember.

820
00:40:07,800 --> 00:40:09,900
It's not stir copy is it?

821
00:40:09,900 --> 00:40:11,400
Or is it is it?

822
00:40:12,400 --> 00:40:13,100
I don't know.

823
00:40:13,100 --> 00:40:15,000
It's not stir copy its

824
00:40:18,000 --> 00:40:20,400
The thing, there's a thing that like copies an outcast ring, or does

825
00:40:20,400 --> 00:40:21,000
that just something?

826
00:40:21,000 --> 00:40:22,900
I wrote I can't remember.

827
00:40:23,300 --> 00:40:26,700
There's one that's like you know it just Kate's.

828
00:40:26,700 --> 00:40:32,400
The thing, it's not mem copy, it's not stir stir.

829
00:40:33,100 --> 00:40:34,800
It's not stirring cat.

830
00:40:36,100 --> 00:40:37,000
I don't know.

831
00:40:37,000 --> 00:40:38,100
You know what, I don't even care.

832
00:40:38,300 --> 00:40:38,800
Doesn't matter.

833
00:40:38,900 --> 00:40:39,800
I'll just write it myself.

834
00:40:40,300 --> 00:40:43,900
So anyway, I want a name, that's trivial.

835
00:40:44,000 --> 00:40:44,700
It's just whatever.

836
00:40:44,700 --> 00:40:45,900
The I don't even need that.

837
00:40:45,900 --> 00:40:46,800
I've already got that.

838
00:40:47,100 --> 00:40:47,600
So whatever.

839
00:40:47,700 --> 00:40:50,900
Name token is for this guy, the text length of that.

840
00:40:50,900 --> 00:40:52,300
I just grab that space.

841
00:40:54,400 --> 00:40:58,900
Store it and then I just say like, okay, right, wherever the thing was

842
00:40:58,900 --> 00:41:05,300
on the I'll terminate and I'll copy the name in here from from

843
00:41:05,300 --> 00:41:06,600
wherever we were, right?

844
00:41:06,700 --> 00:41:08,800
So we've got okay into that name.

845
00:41:08,800 --> 00:41:13,000
I will put the the text

846
00:41:14,400 --> 00:41:18,300
and I already know how long it is because I already have that

847
00:41:18,300 --> 00:41:18,800
information.

848
00:41:19,000 --> 00:41:22,600
So this is basically just me storing this and then I'll just change it

849
00:41:22,600 --> 00:41:24,700
on to what I was doing.

850
00:41:25,900 --> 00:41:26,400
Right.

851
00:41:27,100 --> 00:41:27,900
So it's all good.

852
00:41:28,000 --> 00:41:31,900
And again, this is the since this is external to the thing, we're this

853
00:41:31,900 --> 00:41:34,200
is using this isn't using our America Tour.

854
00:41:34,200 --> 00:41:39,500
This is using the base, you know, whatever C wants to use for its

855
00:41:40,300 --> 00:41:40,900
stuff.

856
00:41:41,700 --> 00:41:45,000
I assume this is in memory .h don't actually remember but I assume

857
00:41:46,200 --> 00:41:50,600
So anyway that gives us a list of all of the structures that we've

858
00:41:50,600 --> 00:41:51,700
seen, right?

859
00:41:51,700 --> 00:41:55,900
So now every time we see a struct we know that we have one, you know

860
00:41:56,200 --> 00:41:57,800
we sort of have a record of it.

861
00:41:57,800 --> 00:41:59,700
So at the end of the program after we've done

862
00:42:00,000 --> 00:42:05,000
Else I can basically just print out a little thing that's designed to

863
00:42:05,000 --> 00:42:08,500
Aid Us in that automated type Discovery process.

864
00:42:08,700 --> 00:42:12,200
So I can just say like, all right, let's print out a palm Define which

865
00:42:12,200 --> 00:42:18,600
is like, handle, you know, meta handle type dump.

866
00:42:18,800 --> 00:42:21,600
I don't know, whatever it's going to be.

867
00:42:23,300 --> 00:42:23,800
Right?

868
00:42:24,400 --> 00:42:27,800
And what we do is we say metal handle type dump and then we say,

869
00:42:27,800 --> 00:42:30,700
whatever the type actually was, or something like this.

870
00:42:30,700 --> 00:42:33,900
In fact, I guess if I look and see what we're doing here, right?

871
00:42:34,300 --> 00:42:38,300
It's just going to Output this thing right here, right?

872
00:42:38,600 --> 00:42:43,000
So really all it needs to do is it just needs to have the member

873
00:42:43,000 --> 00:42:43,500
pointer?

874
00:42:43,500 --> 00:42:45,900
I guess is really the only thing that needs to happen.

875
00:42:46,200 --> 00:42:50,300
So whatever the member pointer is that should pretty much do it,

876
00:42:50,300 --> 00:42:50,900
right?

877
00:42:50,900 --> 00:42:52,900
So you call a metal handle typed up, you give it to

878
00:42:53,100 --> 00:42:56,400
A pointer and all this is going to do is just generate all of these

879
00:42:56,400 --> 00:42:58,200
cases for us automatically.

880
00:42:58,400 --> 00:43:02,400
So we don't have to bother doing it ourselves because we're just that

881
00:43:02,600 --> 00:43:03,200
lazy.

882
00:43:04,300 --> 00:43:07,100
Okay, so in here, I got a loop over these guys.

883
00:43:07,100 --> 00:43:11,300
So I've got my meta struct, I start with it and I say first met

884
00:43:11,300 --> 00:43:14,600
abstract I Loop until it's done.

885
00:43:16,400 --> 00:43:16,900
Right.

886
00:43:17,600 --> 00:43:21,400
Once I have those inside here, I just need to Output.

887
00:43:21,900 --> 00:43:22,500
What is this?

888
00:43:22,500 --> 00:43:24,700
Essentially, this exact case, right?

889
00:43:24,700 --> 00:43:27,500
I just need that for each one of these.

890
00:43:28,100 --> 00:43:31,000
So in here, we just do something like this.

891
00:43:31,000 --> 00:43:31,900
One, two, three, four.

892
00:43:33,200 --> 00:43:35,200
We just do something that looks like that.

893
00:43:40,500 --> 00:43:43,200
Right where I say the type name in there.

894
00:43:43,200 --> 00:43:47,100
So meta, type, whatever that is is just going to again happen every

895
00:43:47,100 --> 00:43:48,300
time here, right?

896
00:43:48,300 --> 00:43:48,900
Like that.

897
00:43:49,300 --> 00:43:52,900
And then that member type is a member pointer is again the parameter.

898
00:43:52,900 --> 00:43:55,000
So off it goes, right?

899
00:43:55,800 --> 00:44:01,000
And in here what I can do as well is I can put in the back the double

900
00:44:01,000 --> 00:44:02,500
backslash if necessary.

901
00:44:02,900 --> 00:44:05,400
So I can basically say like, all right, continue the macro.

902
00:44:05,400 --> 00:44:08,900
If necessary, by saying, if meta next is equal to something mean

903
00:44:08,900 --> 00:44:10,100
there's going to be something next.

904
00:44:10,400 --> 00:44:13,000
I put in that /, otherwise, leave it blank.

905
00:44:14,300 --> 00:44:15,200
So there it is.

906
00:44:15,500 --> 00:44:16,800
That'll do that for us.

907
00:44:17,200 --> 00:44:19,000
All I have to do is actually pass.

908
00:44:19,000 --> 00:44:23,600
Now the actual type name So Meta name and I got a pass that twice

909
00:44:23,600 --> 00:44:26,300
because it are three times, really because it uses it three times.

910
00:44:27,000 --> 00:44:28,900
And that's, that's really all there is to it.

911
00:44:28,900 --> 00:44:32,900
So now if I go back and take a look at what's in my generated code,

912
00:44:33,200 --> 00:44:34,800
you can see the down at the bottom.

913
00:44:34,900 --> 00:44:38,400
We now have meta code which does exactly the stuff that I wanted it to

914
00:44:38,400 --> 00:44:39,400
do, right?

915
00:44:39,600 --> 00:44:42,400
It automatically handles any type that we might have seen.

916
00:44:44,200 --> 00:44:49,800
So we don't have to and furthermore we could also Imagine doing that

917
00:44:49,800 --> 00:44:54,000
for the other part of the process that we haven't seen yet you could

918
00:44:54,000 --> 00:44:54,400
imagine.

919
00:44:54,400 --> 00:44:57,300
If you were really trying to do this, the whole way, you could

920
00:44:57,300 --> 00:44:59,600
actually do something where it spits out.

921
00:45:00,900 --> 00:45:03,400
This array as well, right?

922
00:45:03,600 --> 00:45:05,000
You could imagine that happening.

923
00:45:05,300 --> 00:45:06,000
So

924
00:45:12,100 --> 00:45:15,700
If you want to be tied down that way, you can actually do that as

925
00:45:15,700 --> 00:45:17,400
well, but let's just take a look at how this works.

926
00:45:17,400 --> 00:45:18,000
Exactly.

927
00:45:18,200 --> 00:45:22,000
So once we have that, we now have the ability to inject into our debug

928
00:45:22,000 --> 00:45:24,100
code, right?

929
00:45:24,300 --> 00:45:28,800
We have the ability to inject into their sort of our own, you know,

930
00:45:30,600 --> 00:45:33,900
our own set of switch statements, that do everything that they need to

931
00:45:33,900 --> 00:45:35,100
do, right?

932
00:45:36,200 --> 00:45:38,100
So that's all right, like that.

933
00:45:38,700 --> 00:45:41,900
So what we can do is just say, all right, instead of handling

934
00:45:41,900 --> 00:45:43,900
rectangle, three, we don't need to handle that anymore.

935
00:45:43,900 --> 00:45:46,700
That just gets handled by implicitly.

936
00:45:46,700 --> 00:45:48,000
Because that was a type.

937
00:45:48,200 --> 00:45:50,000
That was seen, right?

938
00:45:50,300 --> 00:45:52,600
And then, of course, we obviously have to make sure that those are

939
00:45:52,600 --> 00:45:53,600
actually in here.

940
00:45:53,600 --> 00:45:59,900
Though, this point everything, The Meta generator sees has to be

941
00:45:59,900 --> 00:46:00,200
defined.

942
00:46:00,400 --> 00:46:04,100
There and now, when we run the game we see that you know, that stuff

943
00:46:04,100 --> 00:46:05,100
gets printed out for us.

944
00:46:05,300 --> 00:46:08,400
And furthermore, some more new stuff that was never getting printed

945
00:46:08,400 --> 00:46:11,700
out before is getting printed out for us now, what is that stuff?

946
00:46:11,800 --> 00:46:14,500
Well, it's a little hard to read it at the moment.

947
00:46:14,500 --> 00:46:17,100
So what I'd like to do is just go ahead and make one slight

948
00:46:17,100 --> 00:46:20,400
modification to this and that is that inside here.

949
00:46:20,400 --> 00:46:24,400
I want to add the concept of an in-depth level if possible, right?

950
00:46:24,500 --> 00:46:28,800
So we could do is say something like all right, you know, when we're

951
00:46:28,800 --> 00:46:29,700
printing this out,

952
00:46:30,300 --> 00:46:32,000
There is going to be an in-depth level.

953
00:46:32,300 --> 00:46:41,900
That indent level is like, you know, Kara star text buffer base may be

954
00:46:42,000 --> 00:46:42,700
right?

955
00:46:43,000 --> 00:46:46,200
We would just say okay.

956
00:46:50,900 --> 00:46:56,200
We start text buffer at the base of it and this is just totally hacked

957
00:46:56,200 --> 00:46:59,600
because like I said, we'll probably make this print out something real

958
00:46:59,600 --> 00:47:03,200
in a second but just for sake of doing the part that we care about

959
00:47:03,200 --> 00:47:07,000
doing right now and not focusing on other stuff, we started text

960
00:47:07,000 --> 00:47:12,900
buffer at text buffer base, we then do like a for indent level equals

961
00:47:12,900 --> 00:47:15,800
zero or indent equals zero.

962
00:47:15,800 --> 00:47:18,600
Indent is less than indent level, you know.

963
00:47:20,200 --> 00:47:20,800
Indents.

964
00:47:21,400 --> 00:47:24,200
And so, this way, we can go through and just say, Okay, however, much

965
00:47:24,200 --> 00:47:28,300
the indent level is will do something where we just like, add some

966
00:47:28,300 --> 00:47:30,000
spaces in there, right?

967
00:47:31,500 --> 00:47:31,700
Right?

968
00:47:31,700 --> 00:47:36,000
Look, we just add some spaces to sort of push it forwards, if that

969
00:47:36,000 --> 00:47:36,600
makes sense.

970
00:47:37,100 --> 00:47:39,000
And then we have the null Terminator and do the rest of the stuff

971
00:47:39,000 --> 00:47:39,500
normally.

972
00:47:39,800 --> 00:47:42,800
And so that would allow us to say, okay, there's an indent level it

973
00:47:42,800 --> 00:47:48,000
gets past here and every time we go down a level of indent, you know,

974
00:47:48,000 --> 00:47:50,600
we increment it by 1 or something like that.

975
00:47:50,600 --> 00:47:53,300
So here, and in fact, we could just say when you call debug

976
00:47:53,300 --> 00:47:54,700
dumbstruck, you know that's in debt.

977
00:47:54,700 --> 00:47:55,700
Level is set to 0.

978
00:47:55,700 --> 00:47:59,100
But then inside this evil preprocessor, when we pass an indent level,

979
00:47:59,100 --> 00:47:59,900
it always passes the

980
00:48:00,000 --> 00:48:03,700
That level, you know, plus one or something like this, or maybe.

981
00:48:03,700 --> 00:48:07,100
Like, the next indent level is something that it passes for example,

982
00:48:07,100 --> 00:48:10,100
and that's just a parameter to the macro, right?

983
00:48:10,500 --> 00:48:16,200
So then, you know, in here, we just say, what are you complaining

984
00:48:16,200 --> 00:48:16,800
about mr.

985
00:48:16,800 --> 00:48:18,200
Mann right.

986
00:48:18,200 --> 00:48:19,200
Sorry about that.

987
00:48:19,800 --> 00:48:20,200
We go.

988
00:48:22,800 --> 00:48:25,400
We did what?

989
00:48:25,400 --> 00:48:28,500
What happened sighs on Bap.

990
00:48:28,500 --> 00:48:30,000
Something did its thing?

991
00:48:30,000 --> 00:48:32,300
Oh, right that's his that is.

992
00:48:33,500 --> 00:48:35,500
I hate this SM printf thing.

993
00:48:36,500 --> 00:48:37,600
Something like this.

994
00:48:39,500 --> 00:48:40,800
Are you happy now?

995
00:48:43,900 --> 00:48:44,200
Mr.

996
00:48:44,200 --> 00:48:46,600
Gets in the way of me trying to give examples.

997
00:48:47,800 --> 00:48:49,700
We really need to write our own one of those.

998
00:48:50,200 --> 00:48:52,600
There's nothing worse than a whiny C compiler.

999
00:48:53,000 --> 00:48:53,500
Okay.

1000
00:48:53,800 --> 00:48:54,400
So

1001
00:48:55,900 --> 00:49:00,700
If we go ahead and make that happen, so we just say, okay, yeah,

1002
00:49:00,700 --> 00:49:05,100
however, big text buffer base, was we?

1003
00:49:05,200 --> 00:49:09,800
That's how much we start with and then we can subtract away from that.

1004
00:49:09,800 --> 00:49:13,700
Well, I guess what I could do is just say text buffer base.

1005
00:49:15,800 --> 00:49:18,200
plus however, big text buffer base was

1006
00:49:20,200 --> 00:49:23,400
- text buffer, that's how much is left.

1007
00:49:25,700 --> 00:49:28,200
Okay, so that oops.

1008
00:49:31,100 --> 00:49:34,800
Should allow me to finish the thing that I was actually trying to show

1009
00:49:34,800 --> 00:49:35,200
you.

1010
00:49:36,800 --> 00:49:37,300
Let's see.

1011
00:49:37,300 --> 00:49:39,900
Connector is from 3 to size t.

1012
00:49:42,900 --> 00:49:46,800
What cannot convert argument 3.

1013
00:49:48,900 --> 00:49:51,600
Oh, is this that God, this was so annoying.

1014
00:49:51,600 --> 00:49:52,300
Last time.

1015
00:49:52,900 --> 00:49:55,200
What was this thing complaining about?

1016
00:49:55,200 --> 00:49:56,400
I cannot remember.

1017
00:49:56,600 --> 00:49:57,900
It's something ridiculous.

1018
00:49:57,900 --> 00:50:03,400
Like, we tried to set it to the right stuff, but it didn't like it.

1019
00:50:04,200 --> 00:50:05,300
You know what I'm talking about?

1020
00:50:05,300 --> 00:50:09,000
It is I hate this thing, you know, people ask me why I don't use the C

1021
00:50:09,000 --> 00:50:11,200
runtime stuff it's because of this garbage.

1022
00:50:11,200 --> 00:50:13,700
It's like I don't ever want to have to think about these sorts of

1023
00:50:13,700 --> 00:50:14,200
things.

1024
00:50:14,400 --> 00:50:16,700
I just want you to do what I tell you to do.

1025
00:50:17,600 --> 00:50:18,400
God.

1026
00:50:18,800 --> 00:50:21,700
Alright what is what is this that you're telling me?

1027
00:50:23,400 --> 00:50:30,600
SM printfs, which is there, Kara star size, T size T.

1028
00:50:30,600 --> 00:50:33,600
So when I don't pass one of those, I have to pass this twice.

1029
00:50:33,600 --> 00:50:35,200
Is this what you're telling me?

1030
00:50:37,400 --> 00:50:38,400
Stupid thing.

1031
00:50:41,000 --> 00:50:44,700
I remember us going through this already once yes apparently it was

1032
00:50:45,100 --> 00:50:45,900
fantastic.

1033
00:50:46,900 --> 00:50:47,400
Yes.

1034
00:50:47,500 --> 00:50:49,300
Such a productive use of my time.

1035
00:50:49,500 --> 00:50:50,100
Thank you.

1036
00:50:52,100 --> 00:50:56,100
all in the name of security, which we are not concerned about

1037
00:50:57,700 --> 00:50:58,800
In any way.

1038
00:51:03,400 --> 00:51:07,300
Remember, the operating system can be hacked by a thought file.

1039
00:51:07,400 --> 00:51:11,700
So why anyone would care about how handmade hero handles things

1040
00:51:11,700 --> 00:51:12,200
securely?

1041
00:51:12,200 --> 00:51:15,700
I have no idea, but that's beside the fact it's fine.

1042
00:51:15,700 --> 00:51:16,400
Don't worry about it.

1043
00:51:16,400 --> 00:51:17,100
Totally fine.

1044
00:51:18,800 --> 00:51:21,300
Anyway, back to what I was saying.

1045
00:51:21,300 --> 00:51:23,600
I just wanted to make an indent level thing here.

1046
00:51:24,700 --> 00:51:25,800
So I could do that.

1047
00:51:26,100 --> 00:51:29,000
That was all we were trying to do nothing else.

1048
00:51:30,400 --> 00:51:34,600
So now in theory we should be able to read this a little bit better.

1049
00:51:35,300 --> 00:51:37,000
And so here you can kind of see that happening.

1050
00:51:37,000 --> 00:51:40,500
Now there's something that we probably would want to do here, which is

1051
00:51:40,500 --> 00:51:43,600
to say that we'd want to show which member it was that we were

1052
00:51:43,600 --> 00:51:47,800
actually outputting at any given time when we output things like this.

1053
00:51:47,900 --> 00:51:48,400
So,

1054
00:51:49,900 --> 00:51:50,800
For example.

1055
00:51:53,200 --> 00:51:57,300
Inside that metal handle type thing where we do this kind of case we

1056
00:51:57,300 --> 00:52:01,300
would probably want to do something where we would sort of do a debug

1057
00:52:01,300 --> 00:52:07,300
text line first, where we would say, okay, we're going to output

1058
00:52:07,400 --> 00:52:11,700
something here that tells you what the member actually was.

1059
00:52:12,000 --> 00:52:16,900
We could actually, I suppose put it sort of, as a, as an adjunct into

1060
00:52:16,900 --> 00:52:17,400
this thing.

1061
00:52:17,400 --> 00:52:20,400
But, you know, first things first.

1062
00:52:20,600 --> 00:52:22,700
So if we wanted to say what that actually was

1063
00:52:22,900 --> 00:52:26,200
We can just say debug text line and we can say, whatever that member

1064
00:52:26,200 --> 00:52:27,200
name was here.

1065
00:52:28,100 --> 00:52:32,200
Again, this is kind of a hack for until we get this in the hierarchy

1066
00:52:33,000 --> 00:52:36,400
but you can just so you can kind of see at this point like what we're

1067
00:52:36,400 --> 00:52:38,300
actually looking at here, right?

1068
00:52:39,400 --> 00:52:41,700
So now you can see when we print it out we get stuff like okay,

1069
00:52:41,700 --> 00:52:44,400
there's the bounds, it automatically jumped into the rectangle thing.

1070
00:52:44,400 --> 00:52:46,200
There's the updatable bounds, there's any count.

1071
00:52:46,300 --> 00:52:49,500
Here's an adiz entities happen to be array of Semana T.

1072
00:52:49,600 --> 00:52:51,900
So we actually start printing out.

1073
00:52:51,900 --> 00:52:52,600
What's in that?

1074
00:52:52,800 --> 00:52:54,100
Array right?

1075
00:52:54,800 --> 00:52:58,200
Which is again not actually something that we want to do but it's

1076
00:52:58,200 --> 00:53:00,300
something that we could do and the reason that we don't want to do

1077
00:53:00,300 --> 00:53:02,300
that yet it's because we're not actually handling array.

1078
00:53:02,300 --> 00:53:04,600
We don't handle pointers in The Meta code at all.

1079
00:53:05,100 --> 00:53:07,300
So this is totally erroneous here, right?

1080
00:53:07,400 --> 00:53:10,800
But this will start to actually do what we wanted to do, right down to

1081
00:53:10,800 --> 00:53:14,900
the point where, you know, in theory, if we wanted to, we could start

1082
00:53:14,900 --> 00:53:19,600
to to print out a relatively complex type in a semi automatic fashion,

1083
00:53:19,600 --> 00:53:20,200
right?

1084
00:53:20,200 --> 00:53:22,700
So if I try to find something, I don't know what would be

1085
00:53:22,800 --> 00:53:28,300
Better struct in carrier like and I know handmade asset .h maybe your

1086
00:53:28,300 --> 00:53:29,300
something like this.

1087
00:53:31,900 --> 00:53:35,900
Yeah, so I'm trying to think of what in our code would be a good

1088
00:53:35,900 --> 00:53:36,200
example.

1089
00:53:36,200 --> 00:53:38,900
So it doesn't require like a raise and stuff quite yet.

1090
00:53:39,000 --> 00:53:42,700
Since that's a little bit outside of sort of what we've done inside

1091
00:53:42,700 --> 00:53:43,400
the generator.

1092
00:53:44,100 --> 00:53:45,400
Maybe there's some other stuff in some region.

1093
00:53:45,400 --> 00:53:47,800
I suppose I'm not entirely sure.

1094
00:53:49,400 --> 00:53:51,000
So yeah.

1095
00:53:51,000 --> 00:53:51,800
So we're printing out.

1096
00:53:51,800 --> 00:53:52,800
Same entity.

1097
00:53:54,800 --> 00:53:59,800
and yeah, so most of these

1098
00:54:00,000 --> 00:54:03,000
Thereby pointer well entity reference is a good example.

1099
00:54:03,300 --> 00:54:06,200
So entity reference, we could do right.

1100
00:54:08,300 --> 00:54:09,400
Although I guess it's a union.

1101
00:54:09,400 --> 00:54:12,300
So maybe not like, I say that like a lot of these things require us to

1102
00:54:12,300 --> 00:54:16,300
upgrade our parsing, or I should say, are understandable, but World

1103
00:54:16,300 --> 00:54:16,700
position.

1104
00:54:17,000 --> 00:54:18,300
So there is one, right?

1105
00:54:18,700 --> 00:54:22,700
So if I go into handmade world and look at World position, right?

1106
00:54:23,200 --> 00:54:24,800
So here is kind of a good example.

1107
00:54:24,900 --> 00:54:26,900
If I want to, I can introspect this.

1108
00:54:27,700 --> 00:54:29,800
I don't know what category that would be probably were

1109
00:54:30,000 --> 00:54:31,100
old something like that.

1110
00:54:31,300 --> 00:54:33,800
So if want to introspect that, I could totally do it.

1111
00:54:33,800 --> 00:54:37,300
And in theory now when we output are entities, it should say what

1112
00:54:37,300 --> 00:54:38,900
their positions are, right?

1113
00:54:39,000 --> 00:54:41,600
And it should not only output chunk, extra quiet chunky.

1114
00:54:41,600 --> 00:54:46,000
But it should also know to go inside this V3 and get that out as well.

1115
00:54:46,900 --> 00:54:49,300
And again in order to do that, all I have to do.

1116
00:54:49,400 --> 00:54:51,100
The only thing I have to do that I haven't done.

1117
00:54:51,100 --> 00:54:54,000
Yet is make sure that inside our preprocessor.

1118
00:54:54,000 --> 00:54:57,600
We're actually processing all the files which again, like I said, I

1119
00:54:57,600 --> 00:54:58,900
don't actually do yet.

1120
00:55:00,400 --> 00:55:02,400
But I can just manually add it, right?

1121
00:55:02,400 --> 00:55:05,900
And so now I didn't do anything right, I didn't add any code, I just

1122
00:55:05,900 --> 00:55:07,400
recompiled that's it.

1123
00:55:07,800 --> 00:55:08,500
And you can see that.

1124
00:55:08,500 --> 00:55:10,700
Now our entity print out which is right here.

1125
00:55:11,000 --> 00:55:12,100
This is our CM entity.

1126
00:55:12,200 --> 00:55:14,600
You can see that it just prints out that origin struct.

1127
00:55:14,600 --> 00:55:16,400
It just totally nailed it, right?

1128
00:55:16,400 --> 00:55:19,200
Output 2 x, the Y, the Z, and the offset, right?

1129
00:55:19,200 --> 00:55:21,100
It knew the offset was a V3 again.

1130
00:55:21,100 --> 00:55:24,700
Totally automated everything nice and fancy, right?

1131
00:55:26,400 --> 00:55:26,900
Oh, wait a second.

1132
00:55:26,900 --> 00:55:27,800
No, I lied.

1133
00:55:27,900 --> 00:55:28,600
I totally love.

1134
00:55:29,000 --> 00:55:29,900
I totally lied.

1135
00:55:29,900 --> 00:55:30,800
That's not what happened.

1136
00:55:30,800 --> 00:55:34,400
That's actually inside the Sim region.

1137
00:55:37,500 --> 00:55:38,800
Is that correct?

1138
00:55:40,500 --> 00:55:43,200
Oh yeah, sorry, I guess for some reason I thought we were talking

1139
00:55:43,200 --> 00:55:45,300
about the same entity but assuming that he doesn't have one of those.

1140
00:55:45,500 --> 00:55:47,900
So yes it totally nailed it, but I was confused.

1141
00:55:48,000 --> 00:55:50,300
So there's the world position right there, right?

1142
00:55:50,300 --> 00:55:53,300
And it prints it out automatically and it's smarter than I am because

1143
00:55:53,300 --> 00:55:56,100
it actually knew where the thing was, and I didn't write.

1144
00:55:57,900 --> 00:55:58,400
So, yeah.

1145
00:55:58,700 --> 00:56:00,100
So that's right.

1146
00:56:00,700 --> 00:56:01,900
How that sort of thing works.

1147
00:56:01,900 --> 00:56:07,900
It's again, pretty straightforward, not really none of its rocket

1148
00:56:07,900 --> 00:56:10,100
science is just taking a little time to

1149
00:56:10,600 --> 00:56:12,700
Figure out how this sort of stuff goes again.

1150
00:56:12,700 --> 00:56:15,600
You can you can sort of take this a lot further than what I'm doing

1151
00:56:15,600 --> 00:56:18,600
right now, but it just gives you kind of an idea.

1152
00:56:18,600 --> 00:56:21,200
Hopefully, you can sort of see for yourself how this sort of thing

1153
00:56:21,200 --> 00:56:23,500
would progress and go a little further down.

1154
00:56:24,100 --> 00:56:28,000
If we wanted to extend this a little bit more, you could see how like

1155
00:56:28,000 --> 00:56:29,600
some of these things that are single pointers.

1156
00:56:30,400 --> 00:56:34,600
We could pretty easily handle just single pointers.

1157
00:56:34,600 --> 00:56:37,100
I like that in a fairly hacked way or we could do something a little

1158
00:56:37,100 --> 00:56:39,500
bit more fancy for them but, you know, if you want to do something in

1159
00:56:39,500 --> 00:56:40,300
a pretty hacked way, it

1160
00:56:40,400 --> 00:56:42,000
Pretty easy to even have pointers in there.

1161
00:56:42,000 --> 00:56:46,000
It's just going to do an additional dereference before it actually

1162
00:56:46,000 --> 00:56:46,600
looks at something.

1163
00:56:46,600 --> 00:56:47,500
So for example,

1164
00:56:50,000 --> 00:56:53,600
let's say we wanted to start targeting whatever this thing is some

1165
00:56:53,600 --> 00:56:56,100
entity Collision volume group, right?

1166
00:56:57,000 --> 00:56:59,800
Samantha T Collision volume group is this thing.

1167
00:57:00,400 --> 00:57:02,000
So, you know, I want to introspect, this.

1168
00:57:04,600 --> 00:57:06,300
Don't know why, who care?

1169
00:57:06,300 --> 00:57:07,300
I have no idea.

1170
00:57:07,300 --> 00:57:09,800
We're doing some things, I don't know.

1171
00:57:09,800 --> 00:57:13,300
So I just start inspecting everything because I'm crazy and I'm doing

1172
00:57:13,300 --> 00:57:15,500
stuff, and it's a disaster and whatever.

1173
00:57:16,000 --> 00:57:18,700
So, I managed to introspecting some stuff and I say that I want these

1174
00:57:18,700 --> 00:57:20,300
two things and respected, right?

1175
00:57:20,500 --> 00:57:24,900
And I go ahead and compile it and, you know, like I said, we haven't,

1176
00:57:24,900 --> 00:57:28,400
we didn't go the full monty there and actually, put in the thing that

1177
00:57:28,400 --> 00:57:29,900
generates those generated.

1178
00:57:30,000 --> 00:57:30,500
Guys.

1179
00:57:30,500 --> 00:57:33,400
But we could obviously if you wanted to, it's should be pretty obvious

1180
00:57:33,400 --> 00:57:34,600
by now, how you would do that.

1181
00:57:35,400 --> 00:57:37,900
But other than that right it starts to generate all this stuff for us

1182
00:57:37,900 --> 00:57:39,100
and that's all really great.

1183
00:57:39,300 --> 00:57:43,100
But when we go to actually run this thing, what you will notice is

1184
00:57:43,100 --> 00:57:43,500
like, okay.

1185
00:57:43,500 --> 00:57:46,100
So there's the total volume and it looks like it's doing everything

1186
00:57:46,100 --> 00:57:48,900
correctly and it's fine.

1187
00:57:49,200 --> 00:57:53,000
But what you will see is that actually fact, you can already see it

1188
00:57:53,000 --> 00:57:54,400
even before I don't need to give a demo.

1189
00:57:54,500 --> 00:57:56,600
What you'll see is it actually prints out the wrong data.

1190
00:57:56,600 --> 00:57:59,100
And the reason for that is because it's looking in the wrong place,

1191
00:57:59,100 --> 00:57:59,700
right?

1192
00:57:59,700 --> 00:57:59,900
Because

1193
00:58:00,000 --> 00:58:01,300
That thing is a pointer.

1194
00:58:01,600 --> 00:58:04,300
So inside that same region, right?

1195
00:58:04,900 --> 00:58:08,300
When we are pointing to the Collision volume, that is an actual

1196
00:58:08,300 --> 00:58:08,900
pointer.

1197
00:58:09,100 --> 00:58:14,700
But our meta are preprocessor doesn't actually use pointers at all

1198
00:58:14,700 --> 00:58:15,400
yet, right?

1199
00:58:15,400 --> 00:58:19,400
It doesn't, it knows that it's saw it like I did it.

1200
00:58:19,400 --> 00:58:21,500
When we wrote the parsing, you can see that.

1201
00:58:21,500 --> 00:58:25,000
It actually hasn't is pointer there but doesn't actually do anything

1202
00:58:25,000 --> 00:58:25,600
with is pointer.

1203
00:58:25,600 --> 00:58:28,100
So doesn't matter that it's saw that there was an asterisk.

1204
00:58:28,100 --> 00:58:29,800
It's not actually going to use that for

1205
00:58:29,900 --> 00:58:30,900
Anything, right?

1206
00:58:30,900 --> 00:58:34,100
And so there's a lot of different ways that you could, you know, that

1207
00:58:34,100 --> 00:58:37,600
you could kind of like start to approach this the simplest possible

1208
00:58:37,600 --> 00:58:37,800
way.

1209
00:58:37,800 --> 00:58:39,600
If we were just literally hacking it,

1210
00:58:40,900 --> 00:58:45,000
All the pieces is that member sort of that member concept there.

1211
00:58:46,000 --> 00:58:48,800
You can, you can sort of just have some flags that say to do

1212
00:58:48,800 --> 00:58:49,500
something, right?

1213
00:58:49,500 --> 00:58:53,700
You can say here like member definition flag, right?

1214
00:58:54,100 --> 00:58:59,800
And you would say you know, meta flag, you know, meta member Flags

1215
00:58:59,800 --> 00:59:03,700
like this underscore is pointer, right?

1216
00:59:03,700 --> 00:59:06,700
And again, this is really the reason this is so such a hack like I was

1217
00:59:06,700 --> 00:59:09,300
saying it's because it doesn't support like pointers to pointers,

1218
00:59:09,300 --> 00:59:09,500
right?

1219
00:59:09,500 --> 00:59:09,800
This

1220
00:59:10,100 --> 00:59:10,500
See why?

1221
00:59:10,500 --> 00:59:12,900
There's a lot of reasons that would be bad.

1222
00:59:14,400 --> 00:59:17,500
But point being if you're just just to show that the idea is we do

1223
00:59:17,500 --> 00:59:20,400
like okay if it's a pointer then we put one of those flags in

1224
00:59:20,400 --> 00:59:25,000
otherwise we just put 0 in there and now when we print this out, we

1225
00:59:25,000 --> 00:59:28,700
would actually have that information inside the generated stuff.

1226
00:59:28,700 --> 00:59:29,400
So you can see here.

1227
00:59:29,400 --> 00:59:32,400
Anytime there was a pointer like to the volumes or things like that.

1228
00:59:32,400 --> 00:59:34,200
It tells us that it is a pointer.

1229
00:59:34,500 --> 00:59:37,600
So now that we know and once we know that it's a pointer, then that

1230
00:59:37,600 --> 00:59:40,000
means that inside the thing, where we actually print everything,

1231
00:59:40,100 --> 00:59:43,200
Going out that gives us the opportunity to actually dereference the

1232
00:59:43,200 --> 00:59:45,900
thing first before we actually do anything else, right?

1233
00:59:47,100 --> 00:59:50,400
So what we would do is when we're actually doing debug dumbstruck,

1234
00:59:50,400 --> 00:59:54,600
when we get out our member and we look at that member pointer, right?

1235
00:59:54,700 --> 00:59:59,200
We would just first say, well, if the member itself was flagged that

1236
00:59:59,200 --> 00:59:59,700
way

1237
01:00:00,100 --> 01:00:03,700
you know, if we believed it to be a pointer because the generator told

1238
01:00:03,700 --> 01:00:06,300
us that was, so then what we could do

1239
01:00:07,600 --> 01:00:11,500
Is take member pointer and actually dereference it once, right?

1240
01:00:11,500 --> 01:00:15,400
So we could say, well, member pointer is a actually rent treated as a

1241
01:00:15,400 --> 01:00:18,100
pointer to a pointer and then dereference that pointer.

1242
01:00:18,200 --> 01:00:23,100
So now we've read like 11 pointer deep one, more pointer deep, right?

1243
01:00:23,400 --> 01:00:25,700
And then we can do is we can also test on member pointer.

1244
01:00:25,700 --> 01:00:29,000
So we can just say like okay, you know, if it's null, maybe we just

1245
01:00:29,000 --> 01:00:34,400
skip it, you know, we don't we don't draw that one or something,

1246
01:00:34,600 --> 01:00:34,900
right?

1247
01:00:34,900 --> 01:00:37,300
We skip that all together and

1248
01:00:37,400 --> 01:00:37,900
Move on.

1249
01:00:37,900 --> 01:00:40,400
So you know we do something like this where we say, Okay prep the

1250
01:00:40,400 --> 01:00:43,400
buffer and then just keep going, right?

1251
01:00:44,000 --> 01:00:46,200
So then when we actually do this print out,

1252
01:00:47,000 --> 01:00:48,800
Then you can see this starts to make more sense.

1253
01:00:49,100 --> 01:00:51,500
It's not showing up at all now because it looked in its other the

1254
01:00:51,500 --> 01:00:52,300
pointer is null.

1255
01:00:52,400 --> 01:00:54,800
So, it doesn't actually actually do any printing out there.

1256
01:00:55,100 --> 01:00:58,200
But now, if I was to go into our test where we're actually putting

1257
01:00:58,200 --> 01:01:01,400
these out and I actually filled in one of those pointers, one of the

1258
01:01:01,400 --> 01:01:04,500
pointers that's in sort of the meta stuff that I was talking about

1259
01:01:04,500 --> 01:01:05,000
here.

1260
01:01:05,500 --> 01:01:08,600
So inside, handmade Sim region, I don't even remember which one's was

1261
01:01:08,600 --> 01:01:10,500
I guess was Collision simply inviting group.

1262
01:01:10,500 --> 01:01:13,000
So ok, so inside our tests entity, right?

1263
01:01:13,000 --> 01:01:16,700
If we set a collision equal to something so collisions going,

1264
01:01:17,000 --> 01:01:19,600
Equal to test Collision.

1265
01:01:21,300 --> 01:01:22,200
Volume group.

1266
01:01:24,100 --> 01:01:25,200
So where is that?

1267
01:01:25,200 --> 01:01:28,800
That's some entity Collision volume group that for here, right?

1268
01:01:29,700 --> 01:01:31,900
So I'm going to actually make one of these guys.

1269
01:01:34,200 --> 01:01:34,700
First.

1270
01:01:36,600 --> 01:01:38,200
And I'll just set his prayer or something.

1271
01:01:38,200 --> 01:01:46,000
So, okay, he has a total volume, the total volume offset P, you know

1272
01:01:46,000 --> 01:01:49,000
equals, I don't know.

1273
01:01:49,000 --> 01:01:59,600
987 something like that, test Collision volume group dim equals 4 5 6.

1274
01:02:00,700 --> 01:02:07,100
Something like this and then the test sanity.

1275
01:02:11,200 --> 01:02:12,200
What?

1276
01:02:12,200 --> 01:02:14,800
No, total volume blah.

1277
01:02:14,800 --> 01:02:15,800
Okay, there we go.

1278
01:02:18,200 --> 01:02:21,400
And then like the other stuff like the volume count volume count

1279
01:02:21,400 --> 01:02:32,200
equals one volumes eek would equal the volumes right Sim entity

1280
01:02:32,600 --> 01:02:38,800
Collision volume like so volumes, right?

1281
01:02:43,000 --> 01:02:49,000
And here it'd be the same stuff, it just feel like, okay, yeah, these

1282
01:02:49,000 --> 01:02:58,400
are going to be like you know, 10 11, 12 13, 14, 15 and so on.

1283
01:02:58,600 --> 01:02:59,100
Right?

1284
01:02:59,700 --> 01:02:59,800
What?

1285
01:03:01,900 --> 01:03:05,800
So now, you know, if you look all of a sudden, all I did was tap back

1286
01:03:05,800 --> 01:03:09,100
and you can see that all of that information is totally reflected

1287
01:03:09,100 --> 01:03:13,000
properly in all of its there and that's all great.

1288
01:03:13,300 --> 01:03:16,900
The only problem, obviously, with this again, is like we taught about

1289
01:03:16,900 --> 01:03:17,300
printers.

1290
01:03:17,300 --> 01:03:19,900
We didn't really teach it about counted pointers.

1291
01:03:20,400 --> 01:03:27,000
So, for example, if I was to say, 16, 17, 18, 19, 20 21, and say that

1292
01:03:27,000 --> 01:03:28,100
the volume count was too.

1293
01:03:28,100 --> 01:03:30,200
Well, if we had a magical thing,

1294
01:03:30,800 --> 01:03:33,600
It would show up but you can see that there is only one volume

1295
01:03:33,600 --> 01:03:35,300
actually listed under volumes.

1296
01:03:35,300 --> 01:03:38,400
Instead of two, it only lists the first one that's because all it does

1297
01:03:38,400 --> 01:03:40,200
is it just sees that it's a pointer?

1298
01:03:40,300 --> 01:03:45,900
It doesn't know that this member tells it how many of those there are

1299
01:03:46,000 --> 01:03:46,500
right.

1300
01:03:47,100 --> 01:03:52,200
And so you can imagine lots of ways that we would do that.

1301
01:03:53,000 --> 01:03:57,200
Hopefully you can see the most General one.

1302
01:03:57,200 --> 01:04:00,600
For example, that you could do is inside

1303
01:04:00,800 --> 01:04:01,000
I'd

1304
01:04:02,500 --> 01:04:03,500
The same region code.

1305
01:04:03,500 --> 01:04:09,700
For example, we could mark it up by saying something like this on this

1306
01:04:09,700 --> 01:04:17,100
on this guy, you know, we could say something like introspect or or

1307
01:04:17,100 --> 01:04:22,600
like counted pointer volume count, right?

1308
01:04:23,400 --> 01:04:28,100
And then with no, the generator would know that and inside.

1309
01:04:28,800 --> 01:04:31,900
Handmade out, H, where we Define our introspection features.

1310
01:04:32,600 --> 01:04:37,700
We would just say how that went, right?

1311
01:04:39,300 --> 01:04:43,600
So that's, that's how that goes now.

1312
01:04:43,600 --> 01:04:46,800
Of course, if we actually did that, as you can see, we have a problem

1313
01:04:46,800 --> 01:04:47,600
which is the general.

1314
01:04:47,600 --> 01:04:54,300
The parser itself has to be aware that those things are there, right?

1315
01:04:54,300 --> 01:04:55,900
It has to be looking for them.

1316
01:04:56,100 --> 01:04:59,500
And so inside, parse member, one of the things that it has to do is

1317
01:04:59,500 --> 01:05:02,000
look to see if the first thing that it gets.

1318
01:05:02,700 --> 01:05:06,400
Is going to be one of those counted pointer things, right and then it

1319
01:05:06,400 --> 01:05:09,600
has to actually process it and act on it, but obviously you're going

1320
01:05:09,600 --> 01:05:12,700
to have to do that anyway because in order for the thing to work, it

1321
01:05:12,700 --> 01:05:15,100
would have to have passed parts that, you know.

1322
01:05:15,600 --> 01:05:22,100
So obviously that has happened, but hopefully that gives you a pretty

1323
01:05:22,100 --> 01:05:25,500
broad overview of how the basics of metaprogramming work.

1324
01:05:26,300 --> 01:05:28,900
Like I said, I don't want to cover it into much more detail, because I

1325
01:05:28,900 --> 01:05:29,700
think you've got everything.

1326
01:05:29,700 --> 01:05:32,100
You would need now to like go off and start building.

1327
01:05:32,200 --> 01:05:32,700
Stuff.

1328
01:05:34,500 --> 01:05:37,600
And, and really mostly what it's about from this point.

1329
01:05:37,600 --> 01:05:43,000
Forward is instead of this thing instead of the simple preprocessor

1330
01:05:43,000 --> 01:05:46,200
being kind of like a hack where it's just like a, it just kind of it's

1331
01:05:46,200 --> 01:05:48,400
like a thing that runs on the program spits, out some stuff.

1332
01:05:49,000 --> 01:05:53,500
What we would actually do here is we'd we'd build up sort of like an

1333
01:05:53,500 --> 01:05:55,500
abstract syntax tree or a data structure.

1334
01:05:55,500 --> 01:05:59,900
We build up some thing that represents all of the

1335
01:06:00,000 --> 01:06:03,100
Mission that we've parsed, then we do a bunch of operations on it in

1336
01:06:03,100 --> 01:06:05,800
that meta form and then we would spit it out and that would allow us

1337
01:06:05,800 --> 01:06:08,500
to do a lot more powerful stuff like it, seeing what things were,

1338
01:06:08,500 --> 01:06:11,300
where and how many we knew about and how big they were, we could do

1339
01:06:11,300 --> 01:06:12,600
all sorts of stuff, right?

1340
01:06:12,700 --> 01:06:16,100
And you can start to do more powerful operations on it and that debt

1341
01:06:16,100 --> 01:06:17,700
becomes more of the real metaprogramming.

1342
01:06:17,800 --> 01:06:20,200
This is more just basic introspection, right?

1343
01:06:21,000 --> 01:06:23,700
But you can build up more powerful metaphor and preachers from there.

1344
01:06:25,300 --> 01:06:29,000
So I think that should hopefully do it.

1345
01:06:31,300 --> 01:06:33,300
And give you pretty much everything you need to go explore it.

1346
01:06:33,300 --> 01:06:34,200
If you want to.

1347
01:06:36,900 --> 01:06:37,400
and,

1348
01:06:39,300 --> 01:06:40,900
Yeah, there you go.

1349
01:06:41,100 --> 01:06:43,200
So, let's go ahead and go to the Q&A for a little bit.

1350
01:06:43,400 --> 01:06:47,800
I'll just take some questions and but like I said, I think it should

1351
01:06:47,800 --> 01:06:51,400
be pretty clear, you know, there's kind of a, there's an infinite

1352
01:06:51,400 --> 01:06:52,700
number of things, you could go do.

1353
01:06:52,700 --> 01:06:55,600
Now, I think with that information, like it's pretty obvious, how you

1354
01:06:55,600 --> 01:06:59,600
can just keep going from there, so

1355
01:07:02,000 --> 01:07:06,600
So yeah, hopefully, for people who were mostly interested in the

1356
01:07:06,600 --> 01:07:09,500
metaprogramming, they've now got everything they need to do their own

1357
01:07:09,500 --> 01:07:10,600
Explorations on that.

1358
01:07:15,300 --> 01:07:16,200
As necessary.

1359
01:07:22,600 --> 01:07:27,900
Coronal Dragon says, so when you set, when you say, you've built up

1360
01:07:27,900 --> 01:07:31,800
multiple layers of metaprogramming, do you mean your meta programs

1361
01:07:31,800 --> 01:07:32,800
output things?

1362
01:07:32,800 --> 01:07:34,600
Like what we wrote today,

1363
01:07:51,300 --> 01:07:53,000
So Colonel, I'm not sure.

1364
01:07:53,000 --> 01:07:56,000
I understand what you mean by like what we wrote today.

1365
01:07:59,600 --> 01:08:03,200
Can you, can you possibly rephrase the question and nxs why?

1366
01:08:03,200 --> 01:08:05,800
When you say isn't offset of safe to rely on?

1367
01:08:08,100 --> 01:08:08,700
I don't know.

1368
01:08:09,200 --> 01:08:10,300
We can find out.

1369
01:08:12,700 --> 01:08:13,300
Let's see.

1370
01:08:13,900 --> 01:08:15,400
So if I'm in the middle of this code,

1371
01:08:17,800 --> 01:08:20,000
and let me make sure I get the syntax right for offset of

1372
01:08:27,100 --> 01:08:28,800
so, if I do an offset of

1373
01:08:30,100 --> 01:08:31,300
Which would be that.

1374
01:08:34,899 --> 01:08:36,200
In the middle of this code.

1375
01:08:37,600 --> 01:08:39,399
And I did this.

1376
01:08:40,600 --> 01:08:46,000
And I said, what's up in here?

1377
01:08:47,000 --> 01:08:47,500
Tight?

1378
01:08:49,800 --> 01:08:51,000
What would the compiler say?

1379
01:08:54,700 --> 01:08:55,600
Type is not.

1380
01:08:55,600 --> 01:08:56,899
Oh, you're correct, it's not.

1381
01:09:01,399 --> 01:09:02,899
That does look pretty safe.

1382
01:09:04,100 --> 01:09:06,399
I don't know if I actually needed to.

1383
01:09:06,399 --> 01:09:11,100
It looks like I need to include standard f.h for that.

1384
01:09:12,300 --> 01:09:13,100
So

1385
01:09:14,300 --> 01:09:17,700
If that isn't the case and I guess, let me see if it is or isn't the

1386
01:09:17,700 --> 01:09:22,800
case if I'm in handmade .h platform.

1387
01:09:25,100 --> 01:09:27,300
let's see, so if I did it here,

1388
01:09:37,399 --> 01:09:41,000
So I would see no it looks like it's not safe to rely on because

1389
01:09:41,000 --> 01:09:43,800
basically you're going to have to you're going to need another pound

1390
01:09:43,800 --> 01:09:44,500
include.

1391
01:09:45,600 --> 01:09:49,800
So that seems like a bad idea to me because you never want to

1392
01:09:49,800 --> 01:09:51,000
introduce a piece of code.

1393
01:09:51,000 --> 01:09:52,300
That depends on a header file.

1394
01:09:52,300 --> 01:09:55,000
If you don't have to, in my mind and external header file,

1395
01:09:58,600 --> 01:10:01,600
So so I would say no, I would not.

1396
01:10:04,400 --> 01:10:05,100
I would not do that.

1397
01:10:05,100 --> 01:10:09,900
I would not choose to do that, but you know, if that's, that's other

1398
01:10:09,900 --> 01:10:11,100
people's guess.

1399
01:10:11,100 --> 01:10:12,700
I guess that's the people's idea.

1400
01:10:25,700 --> 01:10:26,400
Black 238.

1401
01:10:26,400 --> 01:10:28,300
Someone said that the string function you were looking for was

1402
01:10:28,300 --> 01:10:31,400
flustered if yes that's I think that is the one I'm looking for.

1403
01:10:31,400 --> 01:10:33,200
It's been so long since I've used it.

1404
01:10:33,500 --> 01:10:35,500
I can't remember but yeah.

1405
01:10:43,800 --> 01:10:44,200
I think.

1406
01:10:44,200 --> 01:10:47,800
But yeah I think that is it Gary Johansson in the episode of Devon ke

1407
01:10:47,800 --> 01:10:50,600
show called The Wolf doesn't want to come anymore.

1408
01:10:51,000 --> 01:10:53,800
You mentioned that you use metaprogramming techniques to make up for

1409
01:10:53,800 --> 01:10:54,400
modern language.

1410
01:10:54,400 --> 01:10:57,400
Shortcomings curious, what functionality of use metaprogramming to

1411
01:10:57,400 --> 01:11:00,700
achieve that you would have found prohibitive in modern languages.

1412
01:11:00,900 --> 01:11:05,600
Can you suggest any specific usage has to pursue for either program or

1413
01:11:05,600 --> 01:11:07,300
business optimization etcetera.

1414
01:11:10,900 --> 01:11:17,000
I guess what I would say is I actually don't know of anything other

1415
01:11:17,000 --> 01:11:21,300
than basic arithmetic that isn't better in metaprogramming.

1416
01:11:21,600 --> 01:11:25,700
There's only two types of things, two types of code.

1417
01:11:27,200 --> 01:11:30,700
That other than arithmetic that I think of right now ones that I am

1418
01:11:30,700 --> 01:11:34,000
currently metaprogramming and ones that I just haven't had time to

1419
01:11:34,000 --> 01:11:37,200
meta program yet to build better parking systems for.

1420
01:11:38,200 --> 01:11:41,700
But I would not say that there are specific things that I met a

1421
01:11:41,700 --> 01:11:42,100
program.

1422
01:11:42,100 --> 01:11:43,100
It's more that I see.

1423
01:11:43,100 --> 01:11:45,500
Everything is a meta programming problem and the only thing is that

1424
01:11:45,500 --> 01:11:47,500
aren't getting any program right now by me are things that I haven't

1425
01:11:47,500 --> 01:11:48,900
had time to move to that.

1426
01:11:49,600 --> 01:11:54,200
So the only stuff that doesn't get meta programmed at the moment that

1427
01:11:54,200 --> 01:11:56,800
I wouldn't met a program is like, really, really basic.

1428
01:11:56,900 --> 01:11:59,800
look like, oh, this is a thing that is so

1429
01:12:00,400 --> 01:12:03,100
Is so only ever exist in this one way?

1430
01:12:06,900 --> 01:12:09,900
But almost everything should be metal programmed in my mind.

1431
01:12:09,900 --> 01:12:13,100
I pretty much think exclusively in terms of metaprogramming and

1432
01:12:13,100 --> 01:12:16,000
actually I'm frustrated, a lot of times they haven't had chance to

1433
01:12:16,000 --> 01:12:19,600
really sit down and build as many many pretty things as I might want,

1434
01:12:20,200 --> 01:12:21,600
but someday I'll get there.

1435
01:12:25,900 --> 01:12:29,300
Chronodragon to rephrase are your multiple layered meta programs,

1436
01:12:29,300 --> 01:12:32,700
outputting further meta programs or is it a single layer that has

1437
01:12:32,700 --> 01:12:35,300
enough complexity to be considered more than a single pass?

1438
01:12:35,500 --> 01:12:36,500
Not sure how to phrase.

1439
01:12:36,500 --> 01:12:38,400
I was mostly trying to prompt further discussion of what you've

1440
01:12:38,400 --> 01:12:39,100
mentioned previously.

1441
01:12:39,600 --> 01:12:41,000
Yeah, at the moment.

1442
01:12:41,000 --> 01:12:48,200
I don't feel I almost, I almost did one.

1443
01:12:49,800 --> 01:12:52,100
Where I met a program to the metaprogramming thing?

1444
01:12:54,100 --> 01:12:58,200
But I found that it was just a little too dangerous.

1445
01:12:58,900 --> 01:13:04,200
So at some point, I suspect if I really like had the like stomach for

1446
01:13:04,200 --> 01:13:09,700
it, I would go ahead and do metaprogramming like

1447
01:13:11,900 --> 01:13:16,400
You know, I'd met a program, The Meta program but I think the problem

1448
01:13:16,400 --> 01:13:19,500
is I've never had a chance to sit down and focus exclusively on

1449
01:13:19,500 --> 01:13:21,400
metaprogramming for like two or three years.

1450
01:13:21,600 --> 01:13:24,400
So I've never gotten my metaprogramming stuff up to like a really high

1451
01:13:24,400 --> 01:13:27,100
level of quality where I'd be willing to start metaprogramming to

1452
01:13:27,100 --> 01:13:31,500
relying on The Meta program, being thing always being there, you know.

1453
01:13:32,500 --> 01:13:35,600
So I try to keep the top-level metaprogramming layer written in just

1454
01:13:35,600 --> 01:13:36,300
like, straight C.

1455
01:13:36,300 --> 01:13:39,000
So I know I can always rebuild it anywhere easily.

1456
01:13:41,000 --> 01:13:44,500
So yeah, I would actually probably like to be able to met a program,

1457
01:13:44,500 --> 01:13:47,400
my metaprogramming layer, because it's actually a pain.

1458
01:13:47,500 --> 01:13:50,900
It's actually really annoying that I can't leverage the

1459
01:13:50,900 --> 01:13:54,200
metaprogramming layer features inside the metaprogramming layer

1460
01:13:54,400 --> 01:13:55,800
because it would simplify things.

1461
01:14:05,200 --> 01:14:06,200
James women, odd.

1462
01:14:06,200 --> 01:14:07,700
All setup is defined in a mess, species.

1463
01:14:07,700 --> 01:14:10,200
Type standard f.h and is specified in c89.

1464
01:14:10,200 --> 01:14:10,900
So long to that header.

1465
01:14:10,900 --> 01:14:11,800
Did I miss something?

1466
01:14:13,000 --> 01:14:17,400
No, you just, so, I don't like using the C runtime library at work.

1467
01:14:17,400 --> 01:14:19,200
I don't use the C runtime library at all.

1468
01:14:19,600 --> 01:14:21,300
I don't use any headers actually.

1469
01:14:21,700 --> 01:14:26,600
There are no in our current, in our current build of our game at

1470
01:14:26,600 --> 01:14:27,200
Molly.

1471
01:14:27,800 --> 01:14:31,000
There are no header files that were not written by me.

1472
01:14:34,300 --> 01:14:38,800
And well I guess and we also I think that we use SUV, true type dot h.

1473
01:14:39,400 --> 01:14:43,100
So there is one that was written by Sean and then the rest of written

1474
01:14:43,100 --> 01:14:45,100
by me, there are no other header files.

1475
01:14:45,800 --> 01:14:50,000
So I prefer things that do not rely in any way on any of that stuff.

1476
01:14:50,500 --> 01:14:55,100
So if it's free for you to just do it yourself, which offset of is

1477
01:14:55,100 --> 01:14:57,500
just, it's just what I did, right?

1478
01:14:58,700 --> 01:14:59,900
And furthermore, I

1479
01:15:00,500 --> 01:15:03,800
although, I could be wrong about that but I suspect

1480
01:15:06,700 --> 01:15:07,500
Let's see here.

1481
01:15:09,400 --> 01:15:10,600
Stop running the game.

1482
01:15:12,700 --> 01:15:16,200
If I go to our test project here,

1483
01:15:18,200 --> 01:15:21,400
That I made for yes, please Visual Studio.

1484
01:15:21,400 --> 01:15:24,300
Take several seconds to open a text file.

1485
01:15:26,800 --> 01:15:28,300
If I did an offset of

1486
01:15:29,500 --> 01:15:30,000
Right?

1487
01:15:30,000 --> 01:15:38,400
And I said like, you know, I don't know win32 window, or win32 find

1488
01:15:39,000 --> 01:15:42,800
data or something like that, right?

1489
01:15:43,200 --> 01:15:44,400
I said see, file name

1490
01:15:49,100 --> 01:15:50,700
I assume I can do go to definition.

1491
01:15:52,200 --> 01:15:54,600
But I really knew so yeah.

1492
01:15:54,600 --> 01:15:55,400
So okay.

1493
01:15:55,900 --> 01:15:59,600
So what you can see is basically if you were to use offset of all you

1494
01:15:59,600 --> 01:16:04,500
would be doing was introducing a header dependency for exactly the

1495
01:16:04,500 --> 01:16:05,900
code that I wrote.

1496
01:16:07,400 --> 01:16:11,400
Like it's just the stew, it does exactly the same code.

1497
01:16:11,700 --> 01:16:16,200
So all it is is it's like it's like when you define 0 null to be 0,

1498
01:16:16,200 --> 01:16:19,400
you're just, you know, or you include a header file to get know, it's

1499
01:16:19,400 --> 01:16:23,100
like just use the thing, you know, and like reduce the number

1500
01:16:23,100 --> 01:16:26,600
dependencies in my mind because this is not, this is not doing

1501
01:16:26,600 --> 01:16:27,800
anything for you.

1502
01:16:29,900 --> 01:16:33,900
Because there already is C Syntax for this operation and that is what

1503
01:16:33,900 --> 01:16:35,300
it is, right?

1504
01:16:35,900 --> 01:16:38,900
And if you don't like that syntax and just make a macro that is the

1505
01:16:39,100 --> 01:16:40,200
syntax you want.

1506
01:16:41,700 --> 01:16:45,800
But I don't like introducing dependencies on headers for no reason,

1507
01:16:46,200 --> 01:16:49,600
because they always, always always come back to ruin your life.

1508
01:16:50,400 --> 01:16:53,300
Especially if those headers have anything to do with Microsoft.

1509
01:17:09,900 --> 01:17:12,600
Benjamin based on what Jonathan Blow has so far.

1510
01:17:12,600 --> 01:17:13,400
Do you think Jay?

1511
01:17:13,400 --> 01:17:15,700
I will have the Mediterranean capabilities that you'd want.

1512
01:17:15,700 --> 01:17:18,000
If not, what do you think it is missing?

1513
01:17:18,600 --> 01:17:21,900
He has not actually demonstrated much of the meta programming

1514
01:17:21,900 --> 01:17:22,400
capabilities yet.

1515
01:17:22,400 --> 01:17:24,900
In fact, I think he's still working on the abstract syntax tree

1516
01:17:24,900 --> 01:17:30,700
modification stuff so I actually, I don't think even he knows quite

1517
01:17:30,700 --> 01:17:32,800
yet exactly what will be in there for that.

1518
01:17:32,800 --> 01:17:34,400
So it's a little premature to say.

1519
01:17:37,500 --> 01:17:38,000
I mean.

1520
01:17:39,500 --> 01:17:44,700
I I feel like knowing John, he will probably make it fairly complete.

1521
01:17:44,800 --> 01:17:47,800
So even if he does not add all the Meta Meta programming, like,

1522
01:17:47,800 --> 01:17:51,100
features, I might want I suspect, he will probably make it such that I

1523
01:17:51,100 --> 01:17:54,800
could add those features in the meta programming in the actual program

1524
01:17:54,800 --> 01:17:56,800
itself, which is all I really want.

1525
01:17:56,800 --> 01:17:58,000
Like I don't need him to do that.

1526
01:17:58,000 --> 01:17:59,800
Work for me, I just need him to

1527
01:18:00,000 --> 01:18:03,100
Both the ability for me to do that work and I can then build up my own

1528
01:18:03,100 --> 01:18:05,200
like library and that would work.

1529
01:18:23,500 --> 01:18:25,500
Paul Smith, you said in the previous stream that you don't really

1530
01:18:25,500 --> 01:18:27,200
program in C anymore, you basically program in que.

1531
01:18:27,200 --> 01:18:30,100
Si Lang, does that refer to your meta programming tools, or is there

1532
01:18:30,100 --> 01:18:30,800
more to it than that?

1533
01:18:30,800 --> 01:18:32,700
Yeah, that refers to the meta programming tools.

1534
01:18:39,100 --> 01:18:41,500
Do you Seven Samurai, you're not using header files for opengl

1535
01:18:41,500 --> 01:18:43,000
direct3d correct.

1536
01:18:43,000 --> 01:18:45,300
I do not use header files for opengl and direct3d.

1537
01:18:48,700 --> 01:18:51,800
Have you worked with any functional languages Haskell or maybe Scala.

1538
01:18:52,600 --> 01:18:56,100
Only the only one that I have seen much of his oh, camel

1539
01:18:59,800 --> 01:19:05,000
I have not ever ever even so much as I think, read a line of code in

1540
01:19:05,000 --> 01:19:06,000
Haskell or Scala.

1541
01:19:06,000 --> 01:19:08,500
But I have, I think I read a whole book on.

1542
01:19:08,500 --> 01:19:12,500
Oh, camel actually, I never did anything serious with it, though.

1543
01:19:12,500 --> 01:19:16,100
I mean, I didn't like, you know, I never shipped a library in it or,

1544
01:19:16,400 --> 01:19:18,000
or any kind of commercial product.

1545
01:19:25,500 --> 01:19:29,400
Blah 238 maybe a bit off topic, but going along with the master spy

1546
01:19:29,400 --> 01:19:31,500
thing, have you ever done a stealth game?

1547
01:19:32,000 --> 01:19:34,400
And if so, what particular programming challenges do stealth

1548
01:19:34,400 --> 01:19:38,300
mechanics, bring that you don't usually have to deal with, that's

1549
01:19:38,300 --> 01:19:42,100
really more of a game design game, code question, which is not really

1550
01:19:42,100 --> 01:19:42,700
my thing.

1551
01:19:42,700 --> 01:19:46,800
I mostly do game technology, and stealth mechanics.

1552
01:19:47,500 --> 01:19:50,600
I mean, the one thing that I would say is that, you know,

1553
01:19:53,500 --> 01:19:56,900
Sometimes depending on what you're talking about when you say stealth

1554
01:19:56,900 --> 01:20:00,500
game, like, for example, the team that did thief, the Dark Project

1555
01:20:00,600 --> 01:20:06,000
Looking Glass did a lot of work on sound propagation and sound

1556
01:20:06,000 --> 01:20:09,300
propagation is a good example of something that probably wouldn't be.

1557
01:20:09,300 --> 01:20:13,000
So important in circumstances where you weren't talking about like

1558
01:20:13,000 --> 01:20:14,900
very careful stealth game sort of things.

1559
01:20:15,700 --> 01:20:21,100
And so my assumption is that, you know, as far as game technology is

1560
01:20:21,100 --> 01:20:22,600
concerned, there might be some

1561
01:20:22,800 --> 01:20:23,700
Just like that.

1562
01:20:23,700 --> 01:20:26,500
That said, I have never been on a team, which had to do something like

1563
01:20:26,500 --> 01:20:27,000
that.

1564
01:20:27,100 --> 01:20:27,900
That is not.

1565
01:20:28,700 --> 01:20:30,200
That's not experience I've ever actually had.

1566
01:20:30,200 --> 01:20:33,800
But I could see that being true and I know it was true of the folks at

1567
01:20:33,800 --> 01:20:39,300
lookin'-glass, they did a much, much more complex sound propagation

1568
01:20:39,300 --> 01:20:42,700
system for thief, the Dark Project than anyone else was doing at that

1569
01:20:42,700 --> 01:20:46,700
time for any other first-person shooter e kind of title like Quake or

1570
01:20:46,700 --> 01:20:47,500
anything like that.

1571
01:20:55,500 --> 01:20:57,100
Maybe a bit off topic.

1572
01:20:57,800 --> 01:20:58,500
Wait, sorry.

1573
01:20:58,600 --> 01:20:59,800
Is the syntax of case of Langston?

1574
01:21:00,000 --> 01:21:05,900
Close to see the the like, the nitty, the nuts and bolts of it are.

1575
01:21:06,800 --> 01:21:10,600
It's more of a high higher level stuff, that isn't it so far as your

1576
01:21:10,600 --> 01:21:12,000
meta pregnant, with some very useful.

1577
01:21:12,200 --> 01:21:15,100
We ever open source them maybe in your will if nothing else.

1578
01:21:16,400 --> 01:21:18,500
Yeah, I would like to.

1579
01:21:20,100 --> 01:21:26,800
I would like to at some point release them, but I think it's going to

1580
01:21:26,800 --> 01:21:29,800
probably depend a lot on what format takes like,

1581
01:21:30,000 --> 01:21:32,400
What happens over the next five years or so.

1582
01:21:34,800 --> 01:21:37,300
You know, for a while, I was thinking maybe I would do my own language

1583
01:21:37,300 --> 01:21:40,500
sort of thing that incorporated them but I wasn't really sure about

1584
01:21:40,500 --> 01:21:41,000
that.

1585
01:21:41,300 --> 01:21:44,600
And so now that John is doing his language, you know.

1586
01:21:44,600 --> 01:21:47,400
I kind of want to wait a little while and see how that shakes out.

1587
01:21:47,400 --> 01:21:51,600
If that turns out to be a really good thing, then, you know, maybe I

1588
01:21:51,600 --> 01:21:54,500
could just, you know, I might even be able to ship it as a library.

1589
01:21:54,500 --> 01:21:57,800
Like, here's here's all my metaprogramming stuff that just shifts as

1590
01:21:57,800 --> 01:21:58,300
like, a j.

1591
01:21:58,300 --> 01:22:02,600
I Library, you know, like you just, you just grab K C.J, I.

1592
01:22:02,600 --> 01:22:04,400
And then, you can do the same stuff that

1593
01:22:04,500 --> 01:22:07,200
didn't doing that, it would it would work in that or whatever but

1594
01:22:08,600 --> 01:22:11,200
Choose a will you write your own installer for handmade here or just

1595
01:22:11,200 --> 01:22:12,400
zip it and be done with it?

1596
01:22:14,000 --> 01:22:18,300
So for installers, I think probably would depend on what the

1597
01:22:18,300 --> 01:22:20,600
requirements are of the target systems at that time.

1598
01:22:22,800 --> 01:22:25,000
I mean, in general, I prefer to ship things that don't require

1599
01:22:25,000 --> 01:22:28,100
installer but sometimes your its forces you to do one so that you can

1600
01:22:28,100 --> 01:22:28,500
like

1601
01:22:30,200 --> 01:22:32,900
register something with Windows or whatever that has to happen.

1602
01:22:32,900 --> 01:22:34,000
That's a requirement.

1603
01:22:34,700 --> 01:22:41,100
So, I think basically, you know, installers, I don't consider that

1604
01:22:41,100 --> 01:22:42,600
super much part of the project.

1605
01:22:42,700 --> 01:22:44,900
I don't care what we do for the installer of handmade hero.

1606
01:22:44,900 --> 01:22:48,500
So we probably just do whatever was most expedient if we can just have

1607
01:22:48,500 --> 01:22:50,700
something that's as simple as it's an executable.

1608
01:22:50,700 --> 01:22:53,600
And so, you know, we just can put an executable on Steam, you run the

1609
01:22:53,600 --> 01:22:56,500
executable and it runs and there doesn't have to be an installer.

1610
01:22:56,600 --> 01:22:59,800
That'd be my first choice but you know,

1611
01:23:25,700 --> 01:23:27,500
How about reading AKC approved.

1612
01:23:27,500 --> 01:23:28,700
Gooey debugger for J.

1613
01:23:28,700 --> 01:23:29,200
AI.

1614
01:23:30,900 --> 01:23:33,800
You know, if I had time to write a debugger, I would have written one

1615
01:23:33,800 --> 01:23:34,300
already.

1616
01:23:37,200 --> 01:23:37,600
Right.

1617
01:23:37,600 --> 01:23:42,100
Like I would have written one just for see even but I just haven't had

1618
01:23:42,100 --> 01:23:42,600
time.

1619
01:23:42,700 --> 01:23:45,400
I don't have time to even write the stuff that I'm supposed to be

1620
01:23:45,400 --> 01:23:45,700
writing.

1621
01:23:45,700 --> 01:23:47,100
Let alone extra stuff right?

1622
01:23:47,100 --> 01:23:47,500
Like

1623
01:23:50,500 --> 01:23:53,200
You know, like on our game project now, you know, we don't have a lot

1624
01:23:53,200 --> 01:23:56,400
of money, you know, we're not like a rich company, so, you know, I end

1625
01:23:56,400 --> 01:23:59,000
up doing a lot of stuff that's not even programming.

1626
01:23:59,000 --> 01:23:59,800
Like I haven't, I

1627
01:24:00,000 --> 01:24:02,500
I programmed anything in my rocket in like three weeks because I had

1628
01:24:02,500 --> 01:24:07,900
to do a bunch of artwork and stuff, that's just like the reality of of

1629
01:24:08,200 --> 01:24:08,800
how it goes.

1630
01:24:08,800 --> 01:24:09,100
So,

1631
01:24:15,600 --> 01:24:16,500
James Woodman.

1632
01:24:16,500 --> 01:24:19,300
I'm looking forward to additional visualize in the debug view, EGS

1633
01:24:19,300 --> 01:24:22,900
small grid view with a DOT or line from 0 0, to represent a V2 along

1634
01:24:22,900 --> 01:24:23,700
with the decimal digits.

1635
01:24:23,700 --> 01:24:26,800
Do you think that would be worthwhile generally?

1636
01:24:26,800 --> 01:24:30,400
No, I don't think that specifically is worthwhile what I was going to

1637
01:24:30,400 --> 01:24:33,000
do and I mention this, I kept saying the word diagramming.

1638
01:24:34,300 --> 01:24:37,900
Usually what works a little bit better is if you just write little

1639
01:24:37,900 --> 01:24:43,200
diagramming instructions, inside the debug like inside, as debug code

1640
01:24:43,200 --> 01:24:46,700
inside your code and have those come up in the debug thing which is

1641
01:24:46,700 --> 01:24:47,400
what I'd like to do.

1642
01:24:48,100 --> 01:24:51,300
And the reason for that is what you'll find is typically vectors only

1643
01:24:51,300 --> 01:24:57,600
make sense in reference to other vectors and you want to sort of have

1644
01:24:57,700 --> 01:24:59,200
a bunch of information there.

1645
01:24:59,500 --> 01:25:02,500
That sort of says here is the diagram that I'm trying to let

1646
01:25:02,500 --> 01:25:03,300
construct.

1647
01:25:04,600 --> 01:25:06,700
And so please like make that for me.

1648
01:25:06,900 --> 01:25:11,200
So you typically need a little bit more just putting like for a V2

1649
01:25:11,200 --> 01:25:13,000
just showing like what direction it goes.

1650
01:25:13,000 --> 01:25:14,200
I mean yeah.

1651
01:25:14,200 --> 01:25:16,400
It maybe it's a little bit better than nothing but for the most part

1652
01:25:16,400 --> 01:25:17,500
it's really not that useful.

1653
01:25:29,200 --> 01:25:35,400
Gary Johansen, do you ever met a program, The Sims stuff, and the job,

1654
01:25:35,400 --> 01:25:40,700
queue, The Sims stuff, and the job queue.

1655
01:25:44,100 --> 01:25:49,700
So job cues are a little bit of a tough subject at this point because

1656
01:25:50,000 --> 01:25:53,600
the code base at my rocket actually, isn't as multi-threaded as it

1657
01:25:53,600 --> 01:25:54,800
should be at this point.

1658
01:25:55,400 --> 01:25:59,900
And part of the reason for that is very long and involved, and I'm

1659
01:25:59,900 --> 01:26:05,800
kind of putting it off because in this particular case, we can and

1660
01:26:05,800 --> 01:26:07,800
there's some things I wanted to kind of do with it.

1661
01:26:08,600 --> 01:26:10,100
So in some sense, the answer is.

1662
01:26:10,300 --> 01:26:12,200
Yes, I probably will be metaprogramming.

1663
01:26:12,200 --> 01:26:12,900
Lot of that and that's

1664
01:26:13,100 --> 01:26:15,200
Of the reasons that I'm not doing it right now because I haven't had a

1665
01:26:15,200 --> 01:26:17,500
chance to build some of them over been approving things I wanted for

1666
01:26:17,500 --> 01:26:18,000
that.

1667
01:26:19,800 --> 01:26:24,100
But as for Sims stuff no I don't generally met a program stuff, that's

1668
01:26:24,100 --> 01:26:24,900
very mathy.

1669
01:26:25,300 --> 01:26:28,000
Like I don't generally met a program stuff that's just like math.

1670
01:26:29,400 --> 01:26:33,700
You know, physics or whatever, because I find that c and C++ operator,

1671
01:26:33,700 --> 01:26:36,200
overloading is usually enough to make that work.

1672
01:26:36,200 --> 01:26:36,700
Okay.

1673
01:26:37,400 --> 01:26:39,700
And while there are a bunch of things that I might want, they're,

1674
01:26:39,700 --> 01:26:44,200
they're kind of like, well, further down the road from where I'm at,

1675
01:26:44,200 --> 01:26:45,700
in terms of the meta programming structure.

1676
01:26:45,700 --> 01:26:50,100
I have the moment so I could Envision, you know, that being a

1677
01:26:50,100 --> 01:26:52,300
reasonable thing to meta program later.

1678
01:26:52,300 --> 01:26:57,100
But for right now, I don't, I'm not really in a position to address

1679
01:26:57,100 --> 01:26:57,700
those things.

1680
01:26:57,700 --> 01:26:59,100
Any in any

1681
01:27:00,300 --> 01:27:04,600
in any degree of efficacy, that would make it worth, doing those in

1682
01:27:04,600 --> 01:27:07,800
meta code, instead of just, just in regular code,

1683
01:27:25,500 --> 01:27:26,600
Okay.

1684
01:27:32,900 --> 01:27:35,600
CLS, is there any feature you would add to ja?

1685
01:27:35,600 --> 01:27:43,100
I, you know, I really I'd like to with whole or not withhold, but

1686
01:27:43,100 --> 01:27:47,300
rather postpone answering any kind of speculative features about j.i.

1687
01:27:48,500 --> 01:27:53,000
because honestly, like, you know, I haven't even written a line of

1688
01:27:53,000 --> 01:27:54,200
code in j.i., right?

1689
01:27:54,200 --> 01:27:56,000
John is the only one who has j.i.?

1690
01:27:56,600 --> 01:28:00,100
I don't know anything about it other than just what I absorbed from

1691
01:28:00,100 --> 01:28:01,300
watching his demos.

1692
01:28:01,300 --> 01:28:02,100
You know that's that's

1693
01:28:04,600 --> 01:28:08,200
So saying, you know what, I add this feature or that, or what do I

1694
01:28:08,200 --> 01:28:09,000
think of X?

1695
01:28:09,000 --> 01:28:11,000
It's like, you know, I don't know.

1696
01:28:12,000 --> 01:28:13,900
I like his attitude.

1697
01:28:14,000 --> 01:28:15,500
I like his approach.

1698
01:28:15,500 --> 01:28:18,200
I trust John and I think he's a good programmer.

1699
01:28:18,200 --> 01:28:24,100
So, I assume that most things work well, but there's not really much I

1700
01:28:24,100 --> 01:28:25,200
can do.

1701
01:28:27,400 --> 01:28:31,900
In terms of giving any concrete suggestions about ji because

1702
01:28:32,500 --> 01:28:36,500
programming is a very active process.

1703
01:28:36,800 --> 01:28:42,000
And, you know, if you showed me the spec to C++ and you said is this a

1704
01:28:42,000 --> 01:28:44,100
good language or a bad language, right?

1705
01:28:44,300 --> 01:28:47,900
I mean best I could probably tell you if I just grabbed it, I'd be

1706
01:28:47,900 --> 01:28:51,200
like well it's certainly not concise, right?

1707
01:28:51,700 --> 01:28:55,900
But until I actually write some stuff in it and have several years of

1708
01:28:55,900 --> 01:28:56,700
experience with

1709
01:28:57,000 --> 01:29:01,300
It's very difficult for me to say, C++ sucks, right now.

1710
01:29:01,300 --> 01:29:05,500
I know that C++ sucks like now, I know that C++ sucks because I've had

1711
01:29:05,500 --> 01:29:07,200
plenty of experience with it, and I know that it sucks.

1712
01:29:07,200 --> 01:29:11,600
And I can tell you all the ways that it sucks, but you can't just

1713
01:29:11,800 --> 01:29:16,600
look, you know, at at some cursory things about the language and kind

1714
01:29:16,600 --> 01:29:21,000
of say, you know, it's good or bad you need to really, you need to

1715
01:29:21,000 --> 01:29:22,600
ship a game in it or something.

1716
01:29:22,600 --> 01:29:22,800
Right.

1717
01:29:22,800 --> 01:29:24,100
You need to do the work.

1718
01:29:24,200 --> 01:29:25,800
You need to actually do that work.

1719
01:29:27,800 --> 01:29:31,800
And so all I can really say about jii until I start actually writing

1720
01:29:31,800 --> 01:29:33,800
things in it, which I assume, I will try.

1721
01:29:33,800 --> 01:29:38,200
I will do some experimenting, you know, when John decided to make it

1722
01:29:38,800 --> 01:29:42,400
into a beta or whatever he does, until I've actually had that

1723
01:29:42,400 --> 01:29:45,700
experience of writing with it and seeing what actually causes me

1724
01:29:45,700 --> 01:29:50,100
problems, what actually gets me speed wins, what what actually you

1725
01:29:50,100 --> 01:29:55,300
know, how it actually plays out there isn't anything out constructive,

1726
01:29:55,300 --> 01:29:56,700
I can say other than

1727
01:29:57,100 --> 01:29:59,600
I'm really happy that John is trying it.

1728
01:30:00,000 --> 01:30:03,300
and because I have a lot of respect for him, I suspect it will come

1729
01:30:03,300 --> 01:30:04,700
out well, but

1730
01:30:06,300 --> 01:30:11,900
You know, beyond that all I can say is I don't know who knows.

1731
01:30:13,200 --> 01:30:17,500
You know, there could be all kinds of like things in ji right now.

1732
01:30:17,500 --> 01:30:20,800
They're just really bad ideas that I would have no idea that they were

1733
01:30:20,800 --> 01:30:22,500
because until I actually go to do something go.

1734
01:30:22,500 --> 01:30:23,600
Oh my God, that's awful.

1735
01:30:23,600 --> 01:30:26,400
It's totally makes it hard to do all the stuff I do?

1736
01:30:27,800 --> 01:30:29,200
You know, I wouldn't know.

1737
01:30:29,600 --> 01:30:34,100
And so I think that's probably the earliest I can really start to give

1738
01:30:34,100 --> 01:30:35,800
concrete opinions about Jay.

1739
01:30:35,800 --> 01:30:36,800
I like, what would I add?

1740
01:30:36,800 --> 01:30:38,400
What I remove what would have done differently?

1741
01:30:38,500 --> 01:30:39,300
Anything like that?

1742
01:30:39,400 --> 01:30:40,800
I-it's too.

1743
01:30:40,800 --> 01:30:42,200
So premature at this point,

1744
01:30:59,400 --> 01:30:59,800
All right.

1745
01:30:59,800 --> 01:31:01,600
I think the stream has ended.

1746
01:31:03,600 --> 01:31:04,400
The Stream.

1747
01:31:05,600 --> 01:31:06,600
Has ended.

1748
01:31:08,800 --> 01:31:10,200
I'm going to go ahead and close it down.

1749
01:31:14,600 --> 01:31:15,200
Okay.

1750
01:31:16,300 --> 01:31:19,200
Thank you everyone for joining me, for another episode of handmade

1751
01:31:19,200 --> 01:31:19,700
hero.

1752
01:31:20,200 --> 01:31:21,700
It's been a pleasure coding with you is always.

1753
01:31:21,700 --> 01:31:25,800
So, hopefully combined with Friday stream, this stream gave you kind

1754
01:31:25,800 --> 01:31:30,400
of an idea of how you can actually use something like introspection

1755
01:31:31,600 --> 01:31:34,400
In your actual code, if that is something that you choose to do.

1756
01:31:34,900 --> 01:31:37,900
So now you've kind of got that and you can decide whether that makes

1757
01:31:37,900 --> 01:31:40,600
sense for you and whether you like that sort of thing or whether you

1758
01:31:40,600 --> 01:31:41,200
don't.

1759
01:31:41,300 --> 01:31:44,100
Like I said, it's not something that will probably pursue to

1760
01:31:44,200 --> 01:31:48,400
vigorously on handmade hero in general because I'd rather show sort of

1761
01:31:48,600 --> 01:31:51,800
the base layer of programming first, because I kind of consider

1762
01:31:51,800 --> 01:31:54,400
metaprogramming to be sort of like a thing that you do after your

1763
01:31:54,400 --> 01:31:57,700
already done, you know, after you've done something manually, then you

1764
01:31:57,700 --> 01:31:59,500
can think about how to do it automatically.

1765
01:32:00,100 --> 01:32:01,200
But typically, you don't really want to

1766
01:32:01,400 --> 01:32:04,400
The cart before the horse there and learn metaprogramming along with

1767
01:32:04,400 --> 01:32:07,300
your programming because I feel like that's you know if you if you

1768
01:32:07,300 --> 01:32:10,900
don't really have a super solid understanding of the first part, it's

1769
01:32:10,900 --> 01:32:16,000
kind of not such a good idea, jump to the second part but it's out

1770
01:32:16,000 --> 01:32:19,100
there now and we can make some light use of it in handmade hero.

1771
01:32:19,100 --> 01:32:23,300
So we will for example we could totally use this stuff if we wanted to

1772
01:32:23,300 --> 01:32:26,400
to Aid in our debug dumping or anything else that we might want to do.

1773
01:32:27,300 --> 01:32:31,100
So that's it for today if you want to follow along

1774
01:32:31,300 --> 01:32:31,800
At home.

1775
01:32:31,800 --> 01:32:34,900
You can always do so by pre-ordering the game on him a hero to Org,

1776
01:32:35,000 --> 01:32:36,200
the game comes to the source code.

1777
01:32:36,200 --> 01:32:40,000
So you can follow along Night by night and just play around with the

1778
01:32:40,000 --> 01:32:40,700
code C.

1779
01:32:40,700 --> 01:32:42,000
See what you can learn from it.

1780
01:32:42,800 --> 01:32:45,600
We also have a patreon page if you want to support the video series

1781
01:32:45,600 --> 01:32:46,600
it's always much appreciated.

1782
01:32:46,600 --> 01:32:49,300
We have a forum site, you can go to ask questions and there's also an

1783
01:32:49,300 --> 01:32:53,600
antidote episode guide up there that you can look at if you want an

1784
01:32:53,600 --> 01:32:56,200
easier way to watch some of the videos than on YouTube.

1785
01:32:56,200 --> 01:32:58,300
It's got kind of good jump lists and stuff like that in there.

1786
01:32:58,600 --> 01:32:59,800
We have a tweetbot the tweets ask

1787
01:33:00,000 --> 01:33:00,400
What you?

1788
01:33:00,400 --> 01:33:02,800
So if you'd like to catch the stream live, that's easy way to do it.

1789
01:33:02,800 --> 01:33:04,500
Take a look at the Tweet, but it will tell you.

1790
01:33:05,600 --> 01:33:10,500
And I will also tell you that tomorrow night, we will be right back

1791
01:33:10,500 --> 01:33:12,100
here at 8:00 p.m.

1792
01:33:12,100 --> 01:33:18,800
same time, same channel, and there is a special stream on Thursday.

1793
01:33:20,500 --> 01:33:21,900
We will be 8 p.m.

1794
01:33:22,100 --> 01:33:22,800
today 8 p.m.

1795
01:33:22,800 --> 01:33:23,600
tomorrow 8:00 p.m.

1796
01:33:23,600 --> 01:33:27,200
Wednesday, but Thursday, we will actually start a little earlier.

1797
01:33:27,200 --> 01:33:28,600
I think it's gonna start at 7:00 a.m.

1798
01:33:28,800 --> 01:33:29,400
7:00 p.m.

1799
01:33:29,400 --> 01:33:29,700
it will.

1800
01:33:30,000 --> 01:33:31,700
Say so the Tweet but already see the schedule.

1801
01:33:31,700 --> 01:33:33,000
So, whatever it says is correct.

1802
01:33:33,600 --> 01:33:37,300
But after immediately, after the Q&A of handmade hero, there's going

1803
01:33:37,300 --> 01:33:41,200
to be a special thing that me and Sean McGrath are doing Shawn

1804
01:33:41,200 --> 01:33:41,800
McGrath.

1805
01:33:42,000 --> 01:33:47,400
You may know as one of the main programmers on N plus plus previously,

1806
01:33:47,400 --> 01:33:48,800
he also made the game dyad

1807
01:33:50,200 --> 01:33:52,800
And he is oftentimes on the chat.

1808
01:33:52,800 --> 01:33:58,900
Actually as SSS, McGrath he asked me to sort of have not really a

1809
01:33:58,900 --> 01:34:03,300
debate, but sort of a devil's advocate thing because his next game is

1810
01:34:03,300 --> 01:34:10,100
going to be a f2p game and he wanted to have someone sort of argue

1811
01:34:10,100 --> 01:34:13,900
with him about it a little bit, just to see, you know, if he still

1812
01:34:13,900 --> 01:34:17,100
felt, it was okay for him to be working on an FTP game because he had

1813
01:34:17,100 --> 01:34:19,000
some concerns about it himself.

1814
01:34:20,300 --> 01:34:21,100
I guess it would say.

1815
01:34:21,400 --> 01:34:23,900
So for those of you who are interested in those sorts of things and

1816
01:34:23,900 --> 01:34:27,300
those sorts of discussions, we will be doing that immediately after

1817
01:34:27,300 --> 01:34:28,300
handmade here on Thursday.

1818
01:34:28,300 --> 01:34:31,900
So, please plan on checking out the stream that day and staying for

1819
01:34:31,900 --> 01:34:32,300
that.

1820
01:34:32,300 --> 01:34:36,800
Or if you don't have time to test the stream and just want to catch

1821
01:34:36,800 --> 01:34:37,200
that.

1822
01:34:37,500 --> 01:34:41,700
It should be starting at about 8:30, Pacific, Daylight time.

1823
01:34:42,200 --> 01:34:43,100
That's about it.

1824
01:34:43,600 --> 01:34:48,400
Until next time, have fun programming and I will see you guys on the

1825
01:34:48,400 --> 01:34:48,900
internet.

1826
01:34:48,900 --> 01:34:49,600
Take it easy, everyone.

1827
01:34:49,700 --> 01:34:49,900
One.

