1
00:00:02,400 --> 00:00:04,300
Okay, welcome everyone.

2
00:00:04,700 --> 00:00:05,400
We are here.

3
00:00:05,400 --> 00:00:10,700
We are narrowing in on the 20th day, run day 19 of handmade hero the

4
00:00:10,700 --> 00:00:14,400
show where we code an entire professional quality game from scratch

5
00:00:14,400 --> 00:00:15,500
using nothing.

6
00:00:15,600 --> 00:00:16,600
No libraries.

7
00:00:17,200 --> 00:00:17,900
No engine.

8
00:00:17,900 --> 00:00:18,600
No, nothing.

9
00:00:18,800 --> 00:00:22,300
So that we can learn about everything that goes into a modern game.

10
00:00:22,500 --> 00:00:25,400
And basically the goal with this series is to show how everything

11
00:00:25,400 --> 00:00:25,800
works.

12
00:00:26,300 --> 00:00:29,800
So that everyone who works on games will basically have a richer

13
00:00:29,800 --> 00:00:31,300
understanding of what's involved in the

14
00:00:31,500 --> 00:00:34,700
Always have the ability, not only to understand what their engines, or

15
00:00:34,700 --> 00:00:37,200
their libraries, or whatever is doing, but also to drop down there,

16
00:00:37,200 --> 00:00:41,800
and fix problems, create their own new, libraries improve upon the

17
00:00:41,800 --> 00:00:44,900
tech that we have and basically just give everyone the opportunity to

18
00:00:44,900 --> 00:00:48,400
understand the full Pipeline and really be fully effective.

19
00:00:48,400 --> 00:00:52,300
And never let you know there be limitations in their game development

20
00:00:52,300 --> 00:00:55,400
because of the fact that something is opaque to them and they don't

21
00:00:55,400 --> 00:00:58,200
have the knowledge necessary to kind of go in there and take charge of

22
00:00:58,200 --> 00:00:59,000
something themselves.

23
00:00:59,700 --> 00:01:00,600
I think it's been going great.

24
00:01:00,600 --> 00:01:01,300
So far, I've been

25
00:01:01,400 --> 00:01:04,500
Been overwhelmed by the response from everyone.

26
00:01:04,500 --> 00:01:06,000
I think it's amazing and awesome.

27
00:01:06,000 --> 00:01:09,200
And I can't thank everyone enough for making the series so exciting.

28
00:01:09,200 --> 00:01:12,900
And so yeah, with with that I will simply say, let's get to what we're

29
00:01:12,900 --> 00:01:16,200
doing today, which is finishing up the win32 platform layer today and

30
00:01:16,200 --> 00:01:16,600
tomorrow.

31
00:01:16,600 --> 00:01:17,700
I think we'll be the last days.

32
00:01:17,700 --> 00:01:20,600
Probably that we'll be working on our win32 platform layer.

33
00:01:21,100 --> 00:01:23,600
And today, what we want to do is kind of work on our audio sync

34
00:01:23,600 --> 00:01:24,600
explained yesterday.

35
00:01:24,600 --> 00:01:26,100
The start stuff that we need to do for it.

36
00:01:26,100 --> 00:01:28,300
And today we're going to be trying to actually get some of that stuff

37
00:01:28,300 --> 00:01:31,000
implemented and hopefully test it a little bit too, just so we can

38
00:01:31,000 --> 00:01:31,300
have some

39
00:01:31,400 --> 00:01:34,800
Evidence that our frame Loop is actually working properly before we

40
00:01:34,800 --> 00:01:35,800
sort of push onwards.

41
00:01:36,700 --> 00:01:41,100
Now, if you have pre-ordered, the the game on handmade hero dot-org,

42
00:01:41,200 --> 00:01:43,900
you should have gotten a link in your email where to place where you

43
00:01:43,900 --> 00:01:45,100
can download the source code.

44
00:01:45,400 --> 00:01:48,100
If you download that zip file that's up there, the source code it

45
00:01:48,100 --> 00:01:51,600
should have every day's source code in it so far.

46
00:01:51,600 --> 00:01:54,100
And what you want to do is since today is day 19, if you want to

47
00:01:54,100 --> 00:01:57,800
follow along at home, you just unzip days, 18 source, and that will

48
00:01:57,800 --> 00:01:59,500
line you up perfectly to what we're about to do today.

49
00:01:59,500 --> 00:02:01,000
So if you want to follow along,

50
00:02:01,400 --> 00:02:03,200
With this video and code along at home.

51
00:02:03,200 --> 00:02:05,400
Just you understand everything and try it out yourself.

52
00:02:05,700 --> 00:02:08,500
You can do that by just unzipping day 18 source.

53
00:02:08,500 --> 00:02:10,800
That is what I will be starting with right now.

54
00:02:11,400 --> 00:02:12,000
All right.

55
00:02:12,000 --> 00:02:18,800
So what I'd like to do today is I just like to go ahead and talk a

56
00:02:18,800 --> 00:02:19,300
little bit.

57
00:02:19,300 --> 00:02:21,100
I talked yesterday about that, the audio code.

58
00:02:21,100 --> 00:02:23,300
I like to talk a little bit about what I'm going to try to do here

59
00:02:23,700 --> 00:02:26,800
because obviously it's always a little confusing when we're talking

60
00:02:26,800 --> 00:02:29,800
about some of these concepts of like audio sync and stuff because it's

61
00:02:29,800 --> 00:02:31,300
really hard to see when

62
00:02:31,400 --> 00:02:33,500
I draw the diagrams like I did yesterday.

63
00:02:33,500 --> 00:02:34,200
It's kind of clear.

64
00:02:34,200 --> 00:02:34,800
What's going on?

65
00:02:34,800 --> 00:02:36,800
At least a little bit from the visuals.

66
00:02:36,800 --> 00:02:40,200
But you know, when you look at code, there's an awful lot of code that

67
00:02:40,200 --> 00:02:41,800
you write in the course of thing.

68
00:02:41,800 --> 00:02:44,200
This is, you know, it's, I don't know, it's a thousand lines of code

69
00:02:44,200 --> 00:02:46,500
and we've done a good job, keeping our platform layer, simple

70
00:02:46,500 --> 00:02:47,100
certainly.

71
00:02:47,500 --> 00:02:49,000
So thousand lines isn't that much?

72
00:02:49,000 --> 00:02:52,300
But even even just getting to that point, you start to see.

73
00:02:52,300 --> 00:02:54,900
There's a lot of stuff in here that's going on and it can be a little

74
00:02:54,900 --> 00:02:58,500
confusing to tie everything back to sort of a diagram or tie-in,

75
00:02:58,500 --> 00:02:59,800
through everything back to what we're trying to.

76
00:03:00,000 --> 00:03:02,900
And so what I want to do is kind of walk through it a little bit here

77
00:03:03,000 --> 00:03:06,000
and just talk about what's not happening now and what needs to happen

78
00:03:06,200 --> 00:03:09,500
so that we can kind of maybe push towards where we want to be.

79
00:03:09,700 --> 00:03:10,000
Again.

80
00:03:10,000 --> 00:03:11,900
We're not making our final platform layer here.

81
00:03:11,900 --> 00:03:14,100
So we don't have to get 100% of the bugs out.

82
00:03:14,200 --> 00:03:16,200
We don't have to get 100% of the perf out.

83
00:03:16,400 --> 00:03:18,900
But we're trying to set ourselves up so that it's a good prototyping

84
00:03:18,900 --> 00:03:22,400
layer and we will are prototypes built on.

85
00:03:22,400 --> 00:03:24,900
This layer will be roughly equivalent to what they will be.

86
00:03:24,900 --> 00:03:28,700
When we have the full full Power Platform layer working.

87
00:03:28,900 --> 00:03:29,400
So

88
00:03:30,700 --> 00:03:33,800
Basically, what we know is we opened, we are going to open a sound

89
00:03:33,800 --> 00:03:35,900
buffer and we talked about Sam buffers extensively early.

90
00:03:35,900 --> 00:03:37,200
When we first implemented this feature.

91
00:03:37,200 --> 00:03:39,300
If you haven't watched those videos, I highly recommend you do, it'll

92
00:03:39,300 --> 00:03:40,000
kind of clarify to you.

93
00:03:40,000 --> 00:03:42,500
What's going on with direct sound when we output the sound, but

94
00:03:42,500 --> 00:03:47,800
basically what we're doing is we're out putting 48,000 samples every

95
00:03:47,800 --> 00:03:52,900
second to the sound card and what a sample is, a sample is one value

96
00:03:52,900 --> 00:03:56,400
for the left and one value for the right channel that basically say,

97
00:03:56,400 --> 00:03:58,600
the amplitude at that one point in time.

98
00:03:59,100 --> 00:03:59,900
So basically what we're doing,

99
00:04:00,000 --> 00:04:03,200
Is we're taking 48,000 amplitude points.

100
00:04:03,200 --> 00:04:05,900
And that is what's reconstructing the way that's coming out of the

101
00:04:05,900 --> 00:04:08,600
speakers to First approximation.

102
00:04:08,600 --> 00:04:11,300
There's a lot of stuff that happens to it on its way out from from you

103
00:04:11,300 --> 00:04:13,700
know, the computer to the speakers, but you know to First

104
00:04:13,700 --> 00:04:14,200
approximation.

105
00:04:14,200 --> 00:04:16,500
That's basically what we're doing is we're trying to find that wave.

106
00:04:19,500 --> 00:04:23,600
Now, for a number of reasons, I discussed earlier way back.

107
00:04:23,600 --> 00:04:24,700
When we first started doing this.

108
00:04:25,100 --> 00:04:28,000
It's not strictly possible to actually perfectly synchronize.

109
00:04:28,000 --> 00:04:30,100
Those waves with what shows up on the screen.

110
00:04:30,100 --> 00:04:31,800
And the reason for that is there can be delay.

111
00:04:32,500 --> 00:04:35,300
That happens at all, different stages, all the way out to stuff that's

112
00:04:35,300 --> 00:04:36,900
completely external to the computer.

113
00:04:37,000 --> 00:04:41,200
For example, if you have a HDMI cable and even if we ensure that our

114
00:04:41,300 --> 00:04:45,200
audio and video are synced perfectly going out of the HDMI cable, that

115
00:04:45,200 --> 00:04:49,100
may go into a user's receiver where it gets split off into like,

116
00:04:49,300 --> 00:04:50,600
Something that goes out to speakers.

117
00:04:50,600 --> 00:04:53,800
And one thing that goes out to the TV for the video and those might be

118
00:04:53,800 --> 00:04:56,600
delayed separately due to circuitry and all sorts of other stuff.

119
00:04:57,000 --> 00:04:58,100
So, to a large extent.

120
00:04:58,100 --> 00:05:00,800
Perfect sink is not achievable on Modern Hardware.

121
00:05:00,800 --> 00:05:01,600
I wish it was.

122
00:05:01,600 --> 00:05:02,200
It's not.

123
00:05:02,700 --> 00:05:04,900
So what we're trying to do, is not really achieve perfect sync.

124
00:05:04,900 --> 00:05:07,700
But what we are trying to do, is make sure that we don't do such a

125
00:05:07,700 --> 00:05:14,100
poor job in our own outputting that basically, we create a really bad

126
00:05:14,100 --> 00:05:14,900
sink problem.

127
00:05:15,000 --> 00:05:18,100
Even before the harbor gets look, we don't want to exacerbate an

128
00:05:18,100 --> 00:05:19,100
already bad situation.

129
00:05:19,200 --> 00:05:23,700
By ourselves making it very laggy, lacks output of audio and video.

130
00:05:23,700 --> 00:05:27,300
So what we're trying to do is ensure that as we output those samples,

131
00:05:28,400 --> 00:05:32,400
we try to have some measure of control over when they are going out

132
00:05:32,400 --> 00:05:35,000
and we hope that they are leaving, they're basically getting pushed

133
00:05:35,000 --> 00:05:36,300
out of the computer.

134
00:05:36,400 --> 00:05:40,400
We kind of want them to get pushed out across the time period that

135
00:05:40,400 --> 00:05:43,500
corresponds to the frame that we wanted them to be heard with.

136
00:05:43,500 --> 00:05:48,200
So if we want a certain set of sounds to be heard across the length of

137
00:05:48,200 --> 00:05:49,100
a particular frame that we're out,

138
00:05:49,300 --> 00:05:52,200
And we're trying to line it up so that they come out the computer at

139
00:05:52,200 --> 00:05:52,800
that time.

140
00:05:54,300 --> 00:05:59,200
So we have very, unfortunately, we have very limited ability to do

141
00:05:59,200 --> 00:05:59,600
this.

142
00:06:00,000 --> 00:06:01,100
On some platforms.

143
00:06:01,100 --> 00:06:03,600
On some platforms, we have more but we have very limited ability and

144
00:06:03,600 --> 00:06:06,800
some platforms on Windows Direct sound in particular, which is what

145
00:06:06,800 --> 00:06:07,400
we're using.

146
00:06:07,800 --> 00:06:12,300
Basically, what we have to do is the we have to use this thing called,

147
00:06:12,300 --> 00:06:13,400
get current position.

148
00:06:13,700 --> 00:06:17,300
And what get current position does, is it allows us to retrieve from

149
00:06:17,300 --> 00:06:23,300
direct sound where directsound believes the audio to be playing at the

150
00:06:23,300 --> 00:06:23,800
time.

151
00:06:23,900 --> 00:06:26,200
So it's where it's sort of telling us.

152
00:06:26,200 --> 00:06:29,800
This is where I think the audio is playing out.

153
00:06:30,000 --> 00:06:32,700
Hardware at the moment and it returns a something called the play

154
00:06:32,700 --> 00:06:34,600
cursor, which says what that is.

155
00:06:34,900 --> 00:06:38,000
So what I'd like to do sort of at the beginning here is just I'm going

156
00:06:38,000 --> 00:06:41,700
to go ahead and make a debug diagram just using win32.

157
00:06:42,300 --> 00:06:44,300
As we debug the win32 platform layer here.

158
00:06:44,300 --> 00:06:47,100
I'm going to make a little debug diagram that draws.

159
00:06:47,100 --> 00:06:51,900
The play cursor for us, just so we can sort of get a feel for where it

160
00:06:51,900 --> 00:06:55,000
actually is in our ruling sound buffer, if that makes sense.

161
00:06:55,800 --> 00:06:59,300
So what I want to do here is basically right at the end, we're going

162
00:06:59,300 --> 00:06:59,800
to do a thing.

163
00:06:59,900 --> 00:07:03,100
Or this win32 display buffer and window sort of thing.

164
00:07:03,300 --> 00:07:04,100
Basically.

165
00:07:04,100 --> 00:07:08,500
What I'd like to do is start to think about exactly excuse me.

166
00:07:08,500 --> 00:07:14,000
I'd like to start of try to get if you will exactly where Windows

167
00:07:14,000 --> 00:07:18,300
says, that play cursor, is at the time when we're about to do our

168
00:07:18,300 --> 00:07:19,100
blit, right?

169
00:07:19,100 --> 00:07:22,100
So it's a little sloppy because our blind isn't instantaneous.

170
00:07:22,100 --> 00:07:23,300
But you know, we're going to try here.

171
00:07:23,600 --> 00:07:26,000
So based on what I'm going to do is I'm just going to do a little

172
00:07:26,000 --> 00:07:29,900
thing here and say, you know, this is debug code so we can

173
00:07:29,900 --> 00:07:32,000
I can probably do a thing here where we're doing.

174
00:07:32,700 --> 00:07:34,800
Can't remember what our what our definition of was.

175
00:07:34,800 --> 00:07:36,300
We had a definition for it here.

176
00:07:37,900 --> 00:07:39,100
Build up bat.

177
00:07:39,400 --> 00:07:44,800
We were going to use, canned made internal.

178
00:07:45,200 --> 00:07:49,300
So with handmade internal we could go ahead here and do this this sort

179
00:07:49,300 --> 00:07:49,600
of check.

180
00:07:49,600 --> 00:07:53,000
So if this is if this is an internal build, I'm going to go ahead and

181
00:07:53,000 --> 00:07:57,200
ask that that buffer for the play cursor, basically.

182
00:07:59,200 --> 00:08:01,800
Right here, and I'm going to wrap this, just because this is internal

183
00:08:01,800 --> 00:08:01,900
thing.

184
00:08:01,900 --> 00:08:04,200
I'm gonna wrap it in some, in some braces here.

185
00:08:04,200 --> 00:08:05,800
Just so these two things don't escape.

186
00:08:05,800 --> 00:08:08,700
So it's just a little local thing that I'm going to do here, right?

187
00:08:08,700 --> 00:08:09,300
Like this.

188
00:08:09,700 --> 00:08:11,700
So what I'm going to do is I'm going to ask it for where that play

189
00:08:11,700 --> 00:08:15,100
cursor is, and then I'm going to store that value.

190
00:08:16,600 --> 00:08:21,200
So that on the next time around when I draw the frame, I'm going to

191
00:08:21,200 --> 00:08:26,200
actually draw where we thought the play cursor was relative to our

192
00:08:26,200 --> 00:08:28,100
buffer at that time.

193
00:08:28,200 --> 00:08:28,700
Right?

194
00:08:29,600 --> 00:08:31,700
So basically what I'm going to do here is I'm going to say all right,

195
00:08:31,700 --> 00:08:35,299
I'm gonna get that play cursor and then I'm going to have a thing that

196
00:08:35,299 --> 00:08:37,299
I'll put kind of up here just just a variable.

197
00:08:37,299 --> 00:08:39,900
It's not a global variable but it's going to sort of effectively

198
00:08:39,900 --> 00:08:41,200
Global because it's in the scope here.

199
00:08:41,600 --> 00:08:45,500
I'm basically going to say, alright, you know, once we actually get

200
00:08:45,500 --> 00:08:46,300
this thing,

201
00:08:46,400 --> 00:08:47,700
Going and we're going to start this.

202
00:08:47,700 --> 00:08:52,100
I'm going to do a thing called debug last play cursor, and I'm just

203
00:08:52,100 --> 00:08:55,800
going to remember, basically, we're that debug last play Chris or was

204
00:08:56,200 --> 00:08:56,800
all the time.

205
00:08:56,800 --> 00:08:59,200
So we're basically going to say we get to play cursor back.

206
00:08:59,200 --> 00:08:59,800
I'm going to set.

207
00:09:00,400 --> 00:09:01,200
Like that.

208
00:09:01,200 --> 00:09:03,200
And we don't actually care if this call fails, right, honey.

209
00:09:03,200 --> 00:09:04,200
That's just debug code.

210
00:09:04,200 --> 00:09:06,700
So, you have to check anything, but we're just going to take a look at

211
00:09:06,700 --> 00:09:11,300
where it was, you know, in the at the time when we're about to do our

212
00:09:11,300 --> 00:09:12,400
page flip, basically.

213
00:09:12,800 --> 00:09:13,800
And you know, what, we could do that.

214
00:09:13,800 --> 00:09:18,000
I'll even a little bit, we could do that even a little bit more sort

215
00:09:18,000 --> 00:09:18,200
of

216
00:09:20,200 --> 00:09:21,000
Sort of accurately.

217
00:09:21,000 --> 00:09:23,300
I think by doing it after the page flip is done.

218
00:09:23,400 --> 00:09:24,200
So we'll do it here.

219
00:09:24,400 --> 00:09:24,900
Right?

220
00:09:25,000 --> 00:09:28,800
So that basically says, okay, after the after we've submitted all our

221
00:09:28,800 --> 00:09:31,100
stuff, the GDI and we don't really know when GTI is going to display

222
00:09:31,100 --> 00:09:31,500
it yet.

223
00:09:31,500 --> 00:09:32,000
Later on.

224
00:09:32,000 --> 00:09:33,900
We'll sort of have more of a bill to do that.

225
00:09:33,900 --> 00:09:38,200
But I wanted to show you how to do this code, you know, just get this

226
00:09:38,200 --> 00:09:39,200
code in there first.

227
00:09:39,200 --> 00:09:42,200
And then later, when we have a lower latency page flip where we can

228
00:09:42,200 --> 00:09:44,800
actually think about it, maybe a little bit more, we can sort of get

229
00:09:44,800 --> 00:09:45,500
this tighter, but base.

230
00:09:45,500 --> 00:09:49,800
I just want some semblance of a debug display something.

231
00:09:50,000 --> 00:09:54,200
It tells us roughly where the audio was at the time when we tried to

232
00:09:54,200 --> 00:09:56,300
do our page flip, but I just want to impress upon you that again,

233
00:09:56,300 --> 00:09:59,400
we're not getting 100% accurate stuff out here.

234
00:09:59,500 --> 00:10:02,600
Windows is taking that bitmap that we gave it and it's going to

235
00:10:02,600 --> 00:10:06,000
possibly delay until the vertical, retrace to retrace to flip it.

236
00:10:06,000 --> 00:10:10,100
So we're just trying to get, like within a 60th of a second or

237
00:10:10,100 --> 00:10:11,800
something of the correct answer.

238
00:10:11,800 --> 00:10:14,500
Just so we can see if we're totally off base when we start to do our

239
00:10:14,500 --> 00:10:16,600
audio thinks we're trying to get just something.

240
00:10:17,000 --> 00:10:17,500
So there we go.

241
00:10:17,500 --> 00:10:19,800
I've got that debug last play cursor and then when

242
00:10:19,900 --> 00:10:21,500
I'm going to do is right here.

243
00:10:21,700 --> 00:10:24,900
When we do this with you to display buffer and window thing right

244
00:10:24,900 --> 00:10:26,400
before that happens.

245
00:10:26,600 --> 00:10:30,100
Basically, what I'm going to do is I'm going to insert another call

246
00:10:30,100 --> 00:10:30,300
here.

247
00:10:30,300 --> 00:10:34,400
That's that's going to call up in the case where we're in the internal

248
00:10:34,400 --> 00:10:34,800
mode.

249
00:10:34,900 --> 00:10:40,500
I'm going to call a win32 debug sink display or something like this,

250
00:10:40,500 --> 00:10:41,100
right?

251
00:10:41,300 --> 00:10:45,600
And that's basically going to pass that that Global back buffer and

252
00:10:45,600 --> 00:10:47,100
it's going to pass.

253
00:10:47,200 --> 00:10:49,800
Whatever the last play cursor was right that deep.

254
00:10:50,000 --> 00:10:51,000
Last play cursor.

255
00:10:51,400 --> 00:10:52,800
So that's that's all I'm going to do.

256
00:10:52,800 --> 00:10:55,000
And then I'm going to draw that on the screen.

257
00:10:55,000 --> 00:10:56,700
And I would like to also pass it.

258
00:10:56,700 --> 00:11:00,800
The Sound buffer if possible, which let's see.

259
00:11:00,800 --> 00:11:03,900
Just so it can understand sort of the length of the Sound by for how

260
00:11:03,900 --> 00:11:04,200
big it.

261
00:11:04,200 --> 00:11:05,100
Is, that sort of thing.

262
00:11:05,500 --> 00:11:08,100
So, we have a thing here, win32 sound output.

263
00:11:08,200 --> 00:11:10,600
So I'm going to go ahead and pass that as well.

264
00:11:10,600 --> 00:11:13,600
So that's going to take this thing here, right?

265
00:11:14,100 --> 00:11:17,700
So there we go, sound output and that's address there.

266
00:11:17,800 --> 00:11:19,300
So I'm going to go up to

267
00:11:20,000 --> 00:11:25,200
The code up here and just drop that in here is our internal debug

268
00:11:25,200 --> 00:11:25,800
function here.

269
00:11:25,800 --> 00:11:27,200
That's going to draw some stuff.

270
00:11:27,300 --> 00:11:30,500
Hopefully, we hope that it's going to draw some stuff and that's going

271
00:11:30,500 --> 00:11:31,400
to take this win.

272
00:11:31,400 --> 00:11:33,500
3-2 sound output buffer.

273
00:11:33,900 --> 00:11:36,900
First of all, and it's going to also take this off screen buffer.

274
00:11:37,200 --> 00:11:40,900
And then it also has this this d word here that is whatever the the

275
00:11:40,900 --> 00:11:42,200
last play cursor was.

276
00:11:42,400 --> 00:11:45,800
So that's the that's where we thought the play cursor was and then all

277
00:11:45,800 --> 00:11:48,000
I'm going to do nothing particular, interesting.

278
00:11:48,000 --> 00:11:49,800
All I'm going to do is I'm going to pretend

279
00:11:50,000 --> 00:11:53,000
That the width of the off-screen buffer, right?

280
00:11:55,600 --> 00:11:59,800
Maps to our entire sound buffer, right?

281
00:12:01,000 --> 00:12:02,400
And you know what?

282
00:12:02,400 --> 00:12:03,600
I'd also like to pass?

283
00:12:03,600 --> 00:12:07,700
If possible is I'd like to pass our Target hurts as well.

284
00:12:08,500 --> 00:12:10,800
Where is that game update hurts.

285
00:12:10,800 --> 00:12:11,500
There we go.

286
00:12:12,700 --> 00:12:15,300
Well seconds per frame is probably better.

287
00:12:15,300 --> 00:12:16,400
So let's pass that.

288
00:12:16,600 --> 00:12:19,200
So I'm also going to take 2 seconds per frame there.

289
00:12:19,300 --> 00:12:20,800
That's all I want really wanted.

290
00:12:21,100 --> 00:12:24,600
So what I'm going to do is I'm going to basically start by just

291
00:12:24,600 --> 00:12:29,200
drawing a really simple, excuse me, a couple things in here.

292
00:12:29,300 --> 00:12:30,700
I'm just going to draw basically.

293
00:12:30,800 --> 00:12:35,800
Maybe some little rectangles that will sort of dmarc 8 where our

294
00:12:36,100 --> 00:12:40,300
desired frame boundaries are if that makes any sense or so.

295
00:12:40,700 --> 00:12:44,600
Sorry, rather where our page flips are and come to think of it.

296
00:12:44,600 --> 00:12:49,100
I probably going to want to draw more of them than just the last one,

297
00:12:49,100 --> 00:12:49,600
as well.

298
00:12:49,600 --> 00:12:53,900
So in some sense, I think I may want to basically do something, where,

299
00:12:54,300 --> 00:12:59,000
where we actually have more of them kind of here than just one.

300
00:12:59,000 --> 00:13:00,500
So what I think I might do

301
00:13:01,100 --> 00:13:05,000
is go ahead and say, all right, the debug last play cursor.

302
00:13:05,000 --> 00:13:07,600
Actually, we keep some number of them, right?

303
00:13:07,600 --> 00:13:11,000
We keep some relatively large number of play, cursors.

304
00:13:11,400 --> 00:13:12,800
And let's say that.

305
00:13:12,800 --> 00:13:14,900
We keep like, say the last.

306
00:13:15,500 --> 00:13:19,200
Mmh, let's say, let's say if we're doing a 30 frames a second.

307
00:13:19,400 --> 00:13:21,400
Let's say we keep the last dirty, right?

308
00:13:21,400 --> 00:13:23,300
So basically, our game update hurts.

309
00:13:23,700 --> 00:13:24,800
We'll keep that many of them.

310
00:13:24,800 --> 00:13:25,700
If that makes sense.

311
00:13:26,600 --> 00:13:30,300
Okay, so we're basically going to track that many and the way that I'm

312
00:13:30,300 --> 00:13:33,800
going to do that is just say that there's an index into that array,

313
00:13:33,900 --> 00:13:34,500
right?

314
00:13:34,700 --> 00:13:35,600
And that index.

315
00:13:35,600 --> 00:13:38,800
I'm just going to update over time so that we write in the last play

316
00:13:38,800 --> 00:13:42,100
cursor based on on that piece of information.

317
00:13:42,100 --> 00:13:43,800
So here we go.

318
00:13:43,800 --> 00:13:44,900
Let's go ahead and do that.

319
00:13:44,900 --> 00:13:46,700
I'm going to do that here and we'll expand this.

320
00:13:46,700 --> 00:13:51,200
I think in a second here, I feel like probably but for now, right?

321
00:13:51,400 --> 00:13:55,000
So we'll basically just do that will write in what the play cursor was

322
00:13:55,000 --> 00:13:55,800
into the array.

323
00:13:55,800 --> 00:13:56,200
And then

324
00:13:56,400 --> 00:14:01,000
If we happen to get to the point where this is higher than the array

325
00:14:01,000 --> 00:14:03,000
count, we're just going to wrap, so it's just going to be.

326
00:14:03,000 --> 00:14:05,300
We're basically just going to be a circular buffer where we just keep

327
00:14:05,300 --> 00:14:05,800
reading into it.

328
00:14:05,800 --> 00:14:08,200
And when we get to the very end, we'll go back to the beginning.

329
00:14:08,200 --> 00:14:08,800
That makes sense.

330
00:14:08,800 --> 00:14:10,100
So so that's it.

331
00:14:10,100 --> 00:14:11,400
Nothing particularly fancy there.

332
00:14:11,400 --> 00:14:12,200
That's all we're doing.

333
00:14:12,300 --> 00:14:14,300
Hopefully, that makes some sense, right?

334
00:14:15,500 --> 00:14:15,900
Excuse me.

335
00:14:18,300 --> 00:14:21,200
Why didn't that want to initialize for us?

336
00:14:21,300 --> 00:14:23,800
So that better expected constant expression.

337
00:14:23,800 --> 00:14:24,600
Oh, right.

338
00:14:24,600 --> 00:14:26,100
Sorry this

339
00:14:26,700 --> 00:14:31,200
This game update hurts here has to actually be something that can be a

340
00:14:31,200 --> 00:14:33,700
constant expression so we can do that temporarily.

341
00:14:33,700 --> 00:14:34,300
There we go.

342
00:14:35,900 --> 00:14:36,600
All right.

343
00:14:38,600 --> 00:14:43,800
And let's see what else we got when 3D based ink display.

344
00:14:43,800 --> 00:14:47,400
That needs to take our other parameter there.

345
00:14:47,400 --> 00:14:48,400
The S.

346
00:14:49,100 --> 00:14:51,400
What was it actually called Target seconds per frame.

347
00:14:51,700 --> 00:14:52,900
So I'm going to pass that as well.

348
00:14:53,600 --> 00:14:54,500
And there we go.

349
00:14:54,800 --> 00:14:59,600
See a screen buffer cannot part 1 to address of

350
00:15:00,100 --> 00:15:01,000
What did I do?

351
00:15:01,000 --> 00:15:02,000
Did I forget the pointer?

352
00:15:02,000 --> 00:15:02,400
I did.

353
00:15:02,500 --> 00:15:02,700
Yes.

354
00:15:02,700 --> 00:15:03,200
There we go.

355
00:15:03,500 --> 00:15:04,600
These are supposed to be pointers.

356
00:15:04,900 --> 00:15:06,600
Not a Sands.

357
00:15:08,200 --> 00:15:08,800
Okay.

358
00:15:09,300 --> 00:15:10,700
So now we just have to do a thing.

359
00:15:10,700 --> 00:15:14,100
We're actually going to pass this thing and how big it is.

360
00:15:14,100 --> 00:15:17,700
So we just need to pass basically our, our last play cursor.

361
00:15:17,700 --> 00:15:19,000
Array, that makes sense.

362
00:15:19,200 --> 00:15:21,700
So we're going to pass the whole thing, see there.

363
00:15:22,400 --> 00:15:27,200
And then we will just modify this to take that as a pointer.

364
00:15:27,400 --> 00:15:31,100
Last play cursor, count.

365
00:15:31,100 --> 00:15:31,800
So, there we go.

366
00:15:32,400 --> 00:15:35,700
Alright, so that's just going to give us basically what we need to

367
00:15:35,700 --> 00:15:36,200
draw.

368
00:15:36,600 --> 00:15:38,000
And now what I need to do is I need

369
00:15:38,000 --> 00:15:41,900
To step through that, I need to do play, Chris or index.

370
00:15:41,900 --> 00:15:46,600
I need to step through that array and I need to draw each one of those

371
00:15:46,600 --> 00:15:52,100
into the into the window basically as a little rectangle or something

372
00:15:52,100 --> 00:15:56,500
so that we can actually see what what is going on, right tubing.

373
00:15:56,500 --> 00:16:01,100
So basically, we've got this, this bitmap here.

374
00:16:01,100 --> 00:16:04,900
We know that it is, we know that it is with wide, right?

375
00:16:04,900 --> 00:16:08,000
So we know that this is how big it is and then we know that

376
00:16:08,000 --> 00:16:11,600
Oh, that we've got essentially, our sound buffer is going to have a

377
00:16:11,600 --> 00:16:16,300
thing that has this secondary buffer size, a /, B per sample.

378
00:16:16,600 --> 00:16:20,300
That's how many sample indexes there are in the entire buffer.

379
00:16:20,300 --> 00:16:20,600
Right?

380
00:16:20,600 --> 00:16:24,300
And this this guy, well, I guess we don't actually care because he's

381
00:16:24,300 --> 00:16:26,600
play, cursors are not actually the samples there in B.

382
00:16:26,600 --> 00:16:29,500
So basically, we just need to use this right?

383
00:16:29,500 --> 00:16:32,700
The secondary buffer size is the width.

384
00:16:32,700 --> 00:16:33,900
We want to draw.

385
00:16:33,900 --> 00:16:36,800
We want, we wish we had a buffer that was that big to draw into,

386
00:16:36,800 --> 00:16:38,000
because that's the sort of

387
00:16:38,300 --> 00:16:40,900
Rains that were talking about but we actually only have something

388
00:16:40,900 --> 00:16:45,900
that's this big, which means that we essentially have to sort of map

389
00:16:45,900 --> 00:16:49,400
that secondary buffer size range into the with that we have.

390
00:16:49,700 --> 00:16:50,100
Right?

391
00:16:50,100 --> 00:16:52,500
And so, basically what we're going to end up with is we're going to

392
00:16:52,500 --> 00:16:54,300
end up with a division here, right?

393
00:16:54,300 --> 00:16:59,800
We're going to have a coefficient which is basically going to say for

394
00:16:59,800 --> 00:17:04,400
something that want that is actually mapped in the buffer size and we

395
00:17:04,400 --> 00:17:06,000
want it to now be mapped in the width.

396
00:17:06,200 --> 00:17:08,000
We're going to basically just make the ratio

397
00:17:08,200 --> 00:17:09,099
That Maps those out.

398
00:17:09,099 --> 00:17:12,099
And again if you remember I talked about dimensional analysis before,

399
00:17:12,200 --> 00:17:14,599
this is exactly what what I'm doing here.

400
00:17:14,700 --> 00:17:19,500
I'm basically going to multiply this coefficient by the input B count

401
00:17:19,500 --> 00:17:21,700
that we get from the from the play cursor, right?

402
00:17:21,700 --> 00:17:22,599
Those play cursors.

403
00:17:23,000 --> 00:17:29,100
The play cursors are in our in Sample, buffer B, and this is sample

404
00:17:29,100 --> 00:17:30,000
buffer B.

405
00:17:30,200 --> 00:17:33,100
Whereas I want them in pixels and this is in pixels.

406
00:17:33,200 --> 00:17:36,300
So I'm multiplying by pixels dividing by sample buffer B.

407
00:17:36,300 --> 00:17:37,600
The sample buffer B units.

408
00:17:38,100 --> 00:17:38,800
Cancel.

409
00:17:39,300 --> 00:17:44,500
And I just get back, basically the units that I wanted, which is the

410
00:17:44,500 --> 00:17:45,700
pixel so I can draw it.

411
00:17:46,000 --> 00:17:47,200
So, that's all that's going on here.

412
00:17:47,200 --> 00:17:49,700
We talked about how this worked previous dreams when we're talking

413
00:17:49,700 --> 00:17:52,400
about dimensional analysis and ratios, but that's exactly what all

414
00:17:52,400 --> 00:17:53,000
that's doing.

415
00:17:53,200 --> 00:17:53,700
Right?

416
00:17:54,300 --> 00:17:56,300
So what I want to do is I want to draw this.

417
00:17:56,300 --> 00:17:59,800
So basically I can just say whatever the this the value of

418
00:18:00,000 --> 00:18:03,300
Play cursor is in this particular circumstance rank.

419
00:18:03,600 --> 00:18:06,700
Basically, all I'm going to do is do a floating-point multiply their

420
00:18:07,000 --> 00:18:07,500
to get out.

421
00:18:07,500 --> 00:18:09,800
Basically what the x value is.

422
00:18:09,800 --> 00:18:13,600
And that is the x value for where that page flip basically occurred.

423
00:18:13,700 --> 00:18:16,100
Now, what I want to do is I don't want it to go all the way to the end

424
00:18:16,100 --> 00:18:16,700
of the buffer.

425
00:18:17,000 --> 00:18:20,600
So what I might do is also say, okay, you know, there's a little bit

426
00:18:20,600 --> 00:18:21,700
of pad here.

427
00:18:21,800 --> 00:18:25,200
Let's say there's, you know, pad X, right.

428
00:18:25,200 --> 00:18:29,700
So maybe we'll start 16 pixels from the left and and 16

429
00:18:30,000 --> 00:18:30,500
Will's from the right.

430
00:18:30,500 --> 00:18:31,900
Just so it's so we can actually see it.

431
00:18:31,900 --> 00:18:33,400
So there's a little bit of a margin there.

432
00:18:33,900 --> 00:18:37,300
So what I'm going to do is say that, I want it to map to actually

433
00:18:37,300 --> 00:18:39,200
arranged that's not quite that, right.

434
00:18:39,200 --> 00:18:42,700
I want to subtract that out of the range and then when I actually draw

435
00:18:42,700 --> 00:18:46,400
this x value, I actually want it to be looking more like that.

436
00:18:46,500 --> 00:18:46,900
Right?

437
00:18:48,100 --> 00:18:50,400
Hopefully that makes some sense and really I guess I'm going to have

438
00:18:50,400 --> 00:18:52,600
to make this being a jerk because these are plotted as integers.

439
00:18:52,600 --> 00:18:55,200
So we'll do the multiplication first, but then we're going to have to

440
00:18:55,200 --> 00:18:56,700
actually convert it back.

441
00:18:56,700 --> 00:18:58,800
The reason I'm doing the multiplication here is because I don't want

442
00:18:58,800 --> 00:18:59,800
to do the multiplication in.

443
00:19:00,000 --> 00:19:03,100
In something Harry, I want to be able to store ratios and stuff like

444
00:19:03,100 --> 00:19:03,300
that.

445
00:19:03,300 --> 00:19:05,200
So I'm doing the multiplication in floats, and then I'm casting back

446
00:19:05,200 --> 00:19:06,500
to integers when we need to draw.

447
00:19:07,200 --> 00:19:11,100
So what I want to do here is I want to do a little debug draw a line,

448
00:19:11,100 --> 00:19:13,100
basically to draw.

449
00:19:13,100 --> 00:19:14,500
In fact, I don't even need to draw a line.

450
00:19:14,500 --> 00:19:18,300
I can just draw a vertical, you know, like a hash basically which is

451
00:19:18,300 --> 00:19:20,200
extremely simple to draw and I don't have to talk about how to do

452
00:19:20,200 --> 00:19:23,000
something like, you know, a crazy like brushing ham line drawing or

453
00:19:23,000 --> 00:19:23,700
something like this.

454
00:19:24,300 --> 00:19:26,300
So what I'm going to do is I'm just going to pass that in.

455
00:19:26,300 --> 00:19:28,200
I'm going to say the global back buffer and then I'm just going to

456
00:19:28,200 --> 00:19:29,700
say, you know, basically

457
00:19:29,900 --> 00:19:30,100
What?

458
00:19:30,100 --> 00:19:33,700
I want that hash mark where I want the top and bottom of it to be.

459
00:19:34,100 --> 00:19:38,900
So basically I'm going to say, you know, I don't know Global back

460
00:19:38,900 --> 00:19:39,400
buffer.

461
00:19:39,500 --> 00:19:42,800
I guess I'll just do top and bottom, something like that and then

462
00:19:42,800 --> 00:19:45,900
we'll just say what those are top is going to be equal to something

463
00:19:45,900 --> 00:19:46,200
bottom.

464
00:19:46,200 --> 00:19:47,100
Is going to equal to something.

465
00:19:47,100 --> 00:19:50,700
They will basically be the global black back buffer height.

466
00:19:50,800 --> 00:19:55,600
You know, I don't know - pad why say?

467
00:19:55,800 --> 00:19:57,800
And we'll make that be 64 or something.

468
00:19:57,900 --> 00:19:59,800
Well, we just think it's important all the way around.

469
00:20:00,000 --> 00:20:02,400
Going to be a very funny looking diagram because going to be so tall.

470
00:20:02,600 --> 00:20:03,600
But hey, what do you do?

471
00:20:04,100 --> 00:20:05,100
We can adjust that later.

472
00:20:05,500 --> 00:20:06,900
I'm going to say that.

473
00:20:06,900 --> 00:20:09,000
It's just going to be pad y here.

474
00:20:09,000 --> 00:20:09,200
Oops.

475
00:20:09,200 --> 00:20:14,200
That's why the top and - pad Y for the bottom.

476
00:20:14,700 --> 00:20:16,500
So then I'm just going to have to write this function.

477
00:20:16,600 --> 00:20:16,900
Right?

478
00:20:16,900 --> 00:20:21,200
Which is a thing that draws a vertical line, which is extremely simple

479
00:20:21,200 --> 00:20:21,700
to do.

480
00:20:22,100 --> 00:20:24,200
Although, you know, whenever you're writing stuff at a low level like

481
00:20:24,200 --> 00:20:24,500
this.

482
00:20:24,500 --> 00:20:26,000
It's always error-prone.

483
00:20:26,100 --> 00:20:29,000
So why you typically make a graphics Library, we don't quite have time

484
00:20:29,000 --> 00:20:29,700
to do that yet.

485
00:20:29,700 --> 00:20:29,800
That's

486
00:20:29,900 --> 00:20:32,500
what we will be doing sort of next week and going forwards in our

487
00:20:32,500 --> 00:20:33,000
game.

488
00:20:33,100 --> 00:20:35,400
So that will just be able to call things like draw a line and they'll

489
00:20:35,400 --> 00:20:36,000
just work.

490
00:20:36,400 --> 00:20:38,900
But for the time being, it's pretty simple for us to just sort of hack

491
00:20:38,900 --> 00:20:42,300
something together that will serve for our debugging purposes just

492
00:20:42,300 --> 00:20:42,800
fine.

493
00:20:43,500 --> 00:20:47,100
So, what I'm going to do here is I'm just going to step the why this

494
00:20:47,100 --> 00:20:51,100
is going to be this world's slowest and worst way of doing this, but

495
00:20:51,100 --> 00:20:54,500
I'm just going to basically step the line from the top to the bottom,

496
00:20:54,500 --> 00:20:55,100
basically.

497
00:20:55,700 --> 00:20:57,900
And then I will draw each pixel.

498
00:20:58,200 --> 00:20:59,800
So really all I need to do here.

499
00:21:00,000 --> 00:21:03,700
Is get a pointer to the memory that we want.

500
00:21:03,700 --> 00:21:11,900
Which is basically going to be a cast of this here, the cast of the

501
00:21:11,900 --> 00:21:14,700
memory for the bitmap, which we've allocated and we've drawn to this

502
00:21:14,700 --> 00:21:15,000
before.

503
00:21:15,000 --> 00:21:17,400
So you guys are all familiar with what I'm doing here.

504
00:21:17,800 --> 00:21:20,400
But basically, this is the pixel that we're looking at, it's going to

505
00:21:20,400 --> 00:21:23,200
be that back buffer, memory times.

506
00:21:23,600 --> 00:21:25,700
We're basically to move over.

507
00:21:25,700 --> 00:21:27,000
However, many bits per pixel.

508
00:21:27,000 --> 00:21:29,100
It is right, which we already know exactly.

509
00:21:29,100 --> 00:21:29,500
How many

510
00:21:30,000 --> 00:21:32,600
It is, it's basically four bits per pixel.

511
00:21:32,600 --> 00:21:36,100
You know, I don't know why we know, because it's in info.

512
00:21:36,200 --> 00:21:38,300
That's why I believe the bitmap impose.

513
00:21:38,300 --> 00:21:40,500
The thing that stores, the bits per pixel, right?

514
00:21:40,600 --> 00:21:43,500
But anyway, I feel like we should have had bits per pixel out here and

515
00:21:43,500 --> 00:21:46,300
I feel like we didn't feel like that got removed or something.

516
00:21:46,400 --> 00:21:50,600
I'm just going to say, bytes per pixel here, I guess because we

517
00:21:50,600 --> 00:21:51,900
already know what it is as well.

518
00:21:51,900 --> 00:21:53,400
So it could pretty much be a pound of fine.

519
00:21:53,400 --> 00:21:57,700
But anyway, I've been a move over the X X bytes per pixel, and that

520
00:21:57,700 --> 00:21:59,800
puts me at the correct place, but I also have to put

521
00:22:00,400 --> 00:22:02,700
Go down, y times, the pitch, right?

522
00:22:02,700 --> 00:22:05,700
Because I have to go that far down from the top of the buffer.

523
00:22:06,100 --> 00:22:07,700
So we just need to know what this actually is.

524
00:22:07,700 --> 00:22:09,700
So I'm going to I'm going to actually say, let's go ahead and get that

525
00:22:09,700 --> 00:22:10,100
back in there.

526
00:22:10,100 --> 00:22:11,300
I don't know why that went away.

527
00:22:12,200 --> 00:22:13,300
I'm sure we could go back on the stream.

528
00:22:13,300 --> 00:22:14,800
Historically and find out why it went away.

529
00:22:14,800 --> 00:22:15,800
Maybe someone recommended it.

530
00:22:15,800 --> 00:22:17,300
Maybe I was stupid one of the other.

531
00:22:18,000 --> 00:22:19,200
Both of them are very possible.

532
00:22:19,500 --> 00:22:22,000
But then when we get to this particular pixel here, we're going to

533
00:22:22,000 --> 00:22:24,200
write, excuse me.

534
00:22:24,600 --> 00:22:28,400
We're going to write into it as a un 32, so we can actually, I guess I

535
00:22:28,400 --> 00:22:29,800
can just cast you into it through there.

536
00:22:29,900 --> 00:22:30,100
R.

537
00:22:30,100 --> 00:22:31,400
So will basically do it like this.

538
00:22:31,400 --> 00:22:39,000
You went 32 star, pixel will write to it and then we will add to it.

539
00:22:39,100 --> 00:22:40,200
The pitch again.

540
00:22:40,500 --> 00:22:41,700
Alright, so there we go.

541
00:22:42,900 --> 00:22:45,700
That and when we write to the pixel, I don't know.

542
00:22:45,700 --> 00:22:46,500
We're going to write in here.

543
00:22:46,500 --> 00:22:47,600
We didn't act specify a color.

544
00:22:47,600 --> 00:22:51,000
I suppose we should allow the person passing it into specify colors.

545
00:22:51,000 --> 00:22:51,600
So there we go.

546
00:22:52,200 --> 00:22:55,300
And then we will just have withdraw protocol guy, specify a color and

547
00:22:55,300 --> 00:22:59,200
the color for now can just be that color and now we just got to do

548
00:22:59,200 --> 00:23:02,100
that b 4, pixel, when fix the errors.

549
00:23:02,100 --> 00:23:03,100
I don't actually know again.

550
00:23:03,100 --> 00:23:03,900
I don't know why.

551
00:23:03,900 --> 00:23:05,200
We got rid of bytes per pixel.

552
00:23:05,500 --> 00:23:07,500
It feels kind of weird that we did.

553
00:23:08,000 --> 00:23:11,700
Let's put it back in there, bytes per pixel and then when we are

554
00:23:11,700 --> 00:23:12,600
setting up that pitch,

555
00:23:12,800 --> 00:23:15,200
I would like to set up that bytes per pixel.

556
00:23:15,200 --> 00:23:17,900
So what I'd like to do here is just say, alright, bytes per pixel is

557
00:23:17,900 --> 00:23:18,200
here.

558
00:23:18,800 --> 00:23:21,200
Let's just go ahead and get that in there so that we already know

559
00:23:21,600 --> 00:23:23,700
because we've already got it to find here and let's just do that

560
00:23:23,700 --> 00:23:24,100
Hoops.

561
00:23:25,500 --> 00:23:28,200
Just to make sure everyone's using, it just seems like a better idea.

562
00:23:28,500 --> 00:23:29,100
All right.

563
00:23:29,400 --> 00:23:31,200
So why?

564
00:23:31,200 --> 00:23:31,500
Oh, right.

565
00:23:31,500 --> 00:23:33,500
It's top, not why it is.

566
00:23:34,200 --> 00:23:40,400
There we go, and secondary buffer size is something that is passed in

567
00:23:40,500 --> 00:23:42,300
the sound output.

568
00:23:42,300 --> 00:23:42,600
So that

569
00:23:42,700 --> 00:23:44,200
That actually needs to be referenced here.

570
00:23:44,500 --> 00:23:46,400
Alright, so we just typed in a crap ton of code.

571
00:23:46,400 --> 00:23:49,300
There's probably some problems in there, but hopefully you understand

572
00:23:49,300 --> 00:23:50,400
what I'm doing, really?

573
00:23:50,400 --> 00:23:52,600
All I'm doing is I'm stepping through a bunch of cursor positions that

574
00:23:52,600 --> 00:23:55,400
we saved in a rolling buffer, and I'm trying to draw them out.

575
00:23:55,700 --> 00:23:59,800
Basically, when I draw them out, I am going to have a to me.

576
00:24:00,700 --> 00:24:02,800
I'm going to have a vertical line.

577
00:24:02,800 --> 00:24:03,400
So all I did.

578
00:24:03,400 --> 00:24:07,600
There was I just stepped my pixel pointer to the top.

579
00:24:07,600 --> 00:24:10,700
I stepped it over by the X amount for each byte per pixel.

580
00:24:10,700 --> 00:24:12,600
And then I stepped it down by the pitch.

581
00:24:12,600 --> 00:24:15,800
However, many the top was then I just did as many rows as there were

582
00:24:15,800 --> 00:24:16,800
between top and bottom.

583
00:24:16,800 --> 00:24:17,400
And each time.

584
00:24:17,400 --> 00:24:19,900
I wrote the color out to pick slime at and advanced by the pitch to

585
00:24:19,900 --> 00:24:23,000
move down to the next row, really pretty basic nothing.

586
00:24:23,000 --> 00:24:24,700
Interesting going on there at all.

587
00:24:25,900 --> 00:24:28,100
Like I said, just kind of finicky because we don't have a graphics

588
00:24:28,400 --> 00:24:30,400
library at this point because we haven't gotten to that.

589
00:24:30,500 --> 00:24:31,000
Not yet.

590
00:24:31,100 --> 00:24:31,800
It's always hard.

591
00:24:31,800 --> 00:24:32,600
When you start from scratch.

592
00:24:32,600 --> 00:24:36,100
You kind of got a jungle as you kind of go upwards but eventually and

593
00:24:36,100 --> 00:24:37,700
it's not that long into it.

594
00:24:38,200 --> 00:24:41,000
You kind of get to a point where you've got sort of a lot of Leverage

595
00:24:41,000 --> 00:24:41,500
underneath you.

596
00:24:41,500 --> 00:24:43,900
And then these sorts of things aren't an issue anymore because you've

597
00:24:43,900 --> 00:24:44,700
got your line draw.

598
00:24:44,700 --> 00:24:47,100
You've got your rectangle in your, you're totally good to go.

599
00:24:48,400 --> 00:24:49,900
That's exactly what I thought would happen.

600
00:24:50,300 --> 00:24:52,600
You always crash the first time because you forget something.

601
00:24:53,300 --> 00:24:58,700
So, let's take a look here at what we're doing to do.

602
00:24:59,000 --> 00:24:59,500
So.

603
00:25:00,600 --> 00:25:03,200
What do what are we doing?

604
00:25:03,200 --> 00:25:08,300
Wrong are back by from memory times the bytes per pixel we did cast to

605
00:25:08,300 --> 00:25:13,500
a uh, so that's good art at value of 16 times the pitch and I don't

606
00:25:13,500 --> 00:25:14,600
actually know what the pitch is.

607
00:25:14,600 --> 00:25:15,900
The pitch may be negative.

608
00:25:15,900 --> 00:25:17,000
In this particular case.

609
00:25:17,000 --> 00:25:22,400
I'd like to take a look at that just to see global back buffer.

610
00:25:23,100 --> 00:25:23,700
There we go.

611
00:25:24,700 --> 00:25:25,500
Take a look at that.

612
00:25:25,500 --> 00:25:29,900
The pitch is not, so we're moving forwards each time by that pitch.

613
00:25:30,900 --> 00:25:33,500
You think so?

614
00:25:33,500 --> 00:25:36,700
And then we've got a 70 for what is our Y at?

615
00:25:36,700 --> 00:25:37,200
At this point.

616
00:25:37,200 --> 00:25:38,100
It's at 123.

617
00:25:38,100 --> 00:25:38,900
So we started off.

618
00:25:38,900 --> 00:25:43,000
Okay, and then when we got to 123, we crashed which suggests that we

619
00:25:43,000 --> 00:25:49,200
are advancing too far each time through or something, similar to this.

620
00:25:49,400 --> 00:25:54,500
That's a little suspicious and I'm not sure why that would be the

621
00:25:54,500 --> 00:25:55,000
case.

622
00:25:55,000 --> 00:25:59,800
So let's take a good look here and see what's actually going on.

623
00:25:59,800 --> 00:26:00,300
So the

624
00:26:00,400 --> 00:26:03,600
double back buffer is memory pointer is here, right?

625
00:26:03,900 --> 00:26:07,100
That's that's what that is and our pixel pointer.

626
00:26:07,600 --> 00:26:10,700
So I'm just gonna I'm just going to take a look at what our pixel

627
00:26:10,700 --> 00:26:12,900
pointer is subtracted from that.

628
00:26:13,600 --> 00:26:14,200
I'm sorry.

629
00:26:14,400 --> 00:26:18,000
Let's take Take This Global back buffer.

630
00:26:18,900 --> 00:26:22,500
I want to see what the memory size is, if that assuming that, that was

631
00:26:22,500 --> 00:26:27,700
a care star, so, we'll cast that and see, oops, unsigned care star.

632
00:26:27,700 --> 00:26:28,100
Sorry.

633
00:26:28,100 --> 00:26:28,500
Okay.

634
00:26:29,300 --> 00:26:30,000
A star.

635
00:26:30,600 --> 00:26:32,200
So that is the difference there.

636
00:26:32,200 --> 00:26:33,600
So the pixel pointer.

637
00:26:34,100 --> 00:26:36,500
That's that's not good at all.

638
00:26:37,000 --> 00:26:38,400
That is not good at all.

639
00:26:38,900 --> 00:26:40,500
What what did I do?

640
00:26:40,500 --> 00:26:42,200
I did something totally crazy there.

641
00:26:42,300 --> 00:26:44,300
This is one of those things where hey, it's just like, I probably

642
00:26:44,300 --> 00:26:46,600
wasn't paying attention and people on stream, probably already have

643
00:26:46,600 --> 00:26:50,000
it, but I'm not going to look over there again, because I would like

644
00:26:50,000 --> 00:26:53,000
to figure out, I would like to go through the steps that I would

645
00:26:53,000 --> 00:26:55,100
normally go through to figure it out.

646
00:26:55,100 --> 00:26:56,300
Like I've said, many times on the stream.

647
00:26:56,300 --> 00:26:58,100
I want to kind of show how to debug stuff.

648
00:26:58,400 --> 00:26:59,800
And so, when I have a bug eyed,

649
00:27:00,000 --> 00:27:03,800
Rather just kind of go through it slowly on my own even though people

650
00:27:03,800 --> 00:27:06,200
who have kind of been watching and not talking the whole time probably

651
00:27:06,200 --> 00:27:08,500
already can see what it is if they're professionals.

652
00:27:09,800 --> 00:27:10,200
Okay.

653
00:27:10,200 --> 00:27:13,500
So basically I know that I was going to draw in this code, right?

654
00:27:13,700 --> 00:27:19,200
So let me step in here and and and just start going through it.

655
00:27:19,700 --> 00:27:23,300
Basically, I've got the global back buffer memory pointer.

656
00:27:23,300 --> 00:27:24,200
I know what that is.

657
00:27:24,400 --> 00:27:27,600
And now I also know what my pixel pointer is.

658
00:27:27,800 --> 00:27:29,800
You can basically see it here.

659
00:27:30,000 --> 00:27:30,100
Here.

660
00:27:30,300 --> 00:27:31,900
And it looks to me.

661
00:27:32,400 --> 00:27:34,000
Oh, I'm just doing the subtraction backwards.

662
00:27:34,200 --> 00:27:35,000
That's, that's, that's it.

663
00:27:35,000 --> 00:27:36,000
So that wasn't actually right.

664
00:27:36,100 --> 00:27:36,700
There we go.

665
00:27:37,200 --> 00:27:40,700
So, if I do the subtraction here, now again, then I can actually see.

666
00:27:41,200 --> 00:27:42,700
This is, how far in?

667
00:27:42,700 --> 00:27:46,500
I stepped just from the, just from the beginning, right?

668
00:27:46,500 --> 00:27:50,200
So, just that first step, when I did my pixel offset, right.

669
00:27:50,200 --> 00:27:53,400
When I, when I tried to start from the beginning of the bitmap memory

670
00:27:53,700 --> 00:27:56,500
and go a little bit further into it.

671
00:27:57,000 --> 00:27:59,800
Basically, all I was doing was, I was going to add fist.

672
00:28:00,000 --> 00:28:00,900
Which which should be.

673
00:28:00,900 --> 00:28:02,600
Let's let's double-check the math here.

674
00:28:02,700 --> 00:28:05,300
I was going to add this much to get us to the right row, right?

675
00:28:05,300 --> 00:28:13,000
Which is 81 90 and I was going to add this much here for the X which

676
00:28:13,000 --> 00:28:15,300
which should be the remainder, right?

677
00:28:15,600 --> 00:28:16,000
Oops.

678
00:28:17,100 --> 00:28:18,200
Inserted an errant token.

679
00:28:18,200 --> 00:28:19,000
You're right.

680
00:28:19,200 --> 00:28:21,200
And that looks right like it did the math right now.

681
00:28:21,200 --> 00:28:23,700
50 120 per row.

682
00:28:23,800 --> 00:28:25,200
Does that sound about right?

683
00:28:25,200 --> 00:28:26,400
1280, x 4?

684
00:28:26,400 --> 00:28:29,800
That is what that is and if we were going to do 16 of those.

685
00:28:29,900 --> 00:28:30,700
Those right.

686
00:28:30,800 --> 00:28:31,800
That is what we expect.

687
00:28:31,800 --> 00:28:37,600
So that looks like the right number of bytes to step for the start in

688
00:28:37,600 --> 00:28:39,500
my opinion, that looks correct to me.

689
00:28:39,600 --> 00:28:42,200
That is what I would have expected to have happened.

690
00:28:42,200 --> 00:28:42,800
Certainly.

691
00:28:43,000 --> 00:28:44,800
So it looks like our

692
00:28:46,500 --> 00:28:47,200
Our computation.

693
00:28:47,200 --> 00:28:48,100
There is correct.

694
00:28:48,300 --> 00:28:51,600
Then we come in here for ry-ry is going to start at 16.

695
00:28:51,600 --> 00:28:54,600
It's going to step to 704 and basically what we're saying here is

696
00:28:54,600 --> 00:28:56,400
we're going to write to this pixel location.

697
00:28:56,800 --> 00:28:59,000
I want to you know, what I shouldn't have deleted that?

698
00:28:59,000 --> 00:29:03,300
I want to keep this here for now so I can see what my offset is.

699
00:29:03,900 --> 00:29:08,800
Let's see here Global set memory so that I can keep subtracting the

700
00:29:08,800 --> 00:29:11,400
two of those and just see what their value is.

701
00:29:11,400 --> 00:29:16,200
So there we go, any 194 and then I come through here and do my

702
00:29:16,300 --> 00:29:18,100
Addition and I stepped a row.

703
00:29:18,400 --> 00:29:21,500
So that is what I would expect to see happen.

704
00:29:21,600 --> 00:29:23,700
So I'm gonna set a breakpoint here and just make sure that this

705
00:29:23,700 --> 00:29:24,100
happens.

706
00:29:24,100 --> 00:29:25,200
Okay, that's interesting.

707
00:29:25,400 --> 00:29:28,900
So it actually succeeded the first time through.

708
00:29:29,000 --> 00:29:33,000
So it looks like it may be a computation of our X that is wrong.

709
00:29:33,100 --> 00:29:38,500
Perhaps, our X is actually off this this computation here when I kind

710
00:29:38,500 --> 00:29:41,100
of hastily sketched in this thing here, it looks like that might

711
00:29:41,100 --> 00:29:44,900
actually be wrong because it looks like as long as the x is low, which

712
00:29:44,900 --> 00:29:46,100
it is at this point in time.

713
00:29:46,200 --> 00:29:52,200
The thing seems to work which which would suggest that perhaps my ex

714
00:29:52,200 --> 00:29:53,600
computation was incorrect.

715
00:29:53,600 --> 00:29:56,300
So let's take a look when I actually get the crash.

716
00:29:56,300 --> 00:29:58,000
Now, I'm gonna step directly to the crash.

717
00:29:58,000 --> 00:29:59,800
What the actual X.

718
00:30:00,100 --> 00:30:01,300
Is to see if that's yeah.

719
00:30:01,300 --> 00:30:01,900
Okay.

720
00:30:07,600 --> 00:30:11,200
What do you think that that is not a very good x value?

721
00:30:11,400 --> 00:30:11,800
Okay.

722
00:30:12,700 --> 00:30:14,900
I'm kind of glad this is exactly what I hope to show on the stream.

723
00:30:15,000 --> 00:30:17,800
I know, it seems weird to be happy about showing you not being a very

724
00:30:17,800 --> 00:30:20,300
good programmer, but this is actually what I want to show in the

725
00:30:20,300 --> 00:30:23,500
Stream is this sort of thing because this sort of thing happens to me

726
00:30:23,500 --> 00:30:24,100
all the time.

727
00:30:24,100 --> 00:30:27,100
I'm not a great programmer at just writing exact stuff, right?

728
00:30:27,100 --> 00:30:29,800
The first time I always make mistakes and then I just

729
00:30:30,000 --> 00:30:32,000
have to debug them and it's really not a big deal.

730
00:30:32,100 --> 00:30:34,100
It's one of the reasons that you make libraries as well as two kind of

731
00:30:34,100 --> 00:30:35,200
to bug them once and then have them.

732
00:30:35,200 --> 00:30:37,300
And I'm a big advocate of that because I do make a lot of girls

733
00:30:37,300 --> 00:30:37,800
mistakes.

734
00:30:38,700 --> 00:30:39,600
But yes, I just want to show you.

735
00:30:39,600 --> 00:30:41,300
So you saw how I found that, right?

736
00:30:41,300 --> 00:30:42,100
Like that was pretty clear.

737
00:30:42,100 --> 00:30:45,000
How I went about debugging that, I just looked at what the memory was

738
00:30:45,000 --> 00:30:45,600
doing.

739
00:30:45,600 --> 00:30:47,900
I just looked at the pointers and I was like, oh, okay.

740
00:30:48,200 --> 00:30:49,200
I can see that.

741
00:30:49,200 --> 00:30:51,400
It appears to be tracking the why properly.

742
00:30:51,600 --> 00:30:54,900
So, and on a Nexus reasonable it seemed to work reasonably.

743
00:30:54,900 --> 00:30:58,800
So, I'm like, I guess the only other parameter there is that the X,

744
00:30:58,800 --> 00:30:59,900
the X must be out of bounds.

745
00:31:00,500 --> 00:31:02,700
And then, when that kind of true clued, me into bother looking at

746
00:31:02,700 --> 00:31:02,900
that.

747
00:31:02,900 --> 00:31:04,900
Now, if I look at the X first originally, I would have seen that right

748
00:31:04,900 --> 00:31:06,200
away, but I didn't do that.

749
00:31:06,500 --> 00:31:08,900
So maybe that's also a good thing to remember, always check all your

750
00:31:08,900 --> 00:31:13,600
parameters once just to see but, yeah, so that's pretty simple.

751
00:31:13,700 --> 00:31:14,500
We found the bug there.

752
00:31:14,500 --> 00:31:17,100
So it's just a bug in the X computation, which makes sense, because I

753
00:31:17,100 --> 00:31:19,900
just kind of slammed that in there and didn't even think about it.

754
00:31:20,500 --> 00:31:23,600
That was, that was not particularly particularly bright.

755
00:31:23,600 --> 00:31:24,100
Certainly.

756
00:31:24,700 --> 00:31:26,400
So let's think about this, a second.

757
00:31:26,400 --> 00:31:27,600
What are we actually doing?

758
00:31:28,200 --> 00:31:29,900
So basically what I wanted to do.

759
00:31:30,100 --> 00:31:33,000
With my computation here, and we'll go ahead and build that and then

760
00:31:33,000 --> 00:31:34,400
step in what I was trying to do.

761
00:31:34,400 --> 00:31:42,100
This competition here was just map from the B that the play cursor had

762
00:31:42,200 --> 00:31:44,500
basically out to the, the pixel width.

763
00:31:44,900 --> 00:31:47,900
And so I was hoping that this would be a relatively straightforward

764
00:31:47,900 --> 00:31:52,100
thing, but it looks like I made a mistake when I was doing that.

765
00:31:52,100 --> 00:31:55,300
So what I'd like to do here is I want to just so we can debug this and

766
00:31:55,300 --> 00:31:56,400
look at it a little clearer.

767
00:31:56,500 --> 00:31:59,800
What I'd like to do is break the computation into two steps.

768
00:32:00,000 --> 00:32:02,800
So here is going to be the two steps first.

769
00:32:02,800 --> 00:32:07,500
I'm going to compute the, the X in Real 32, right?

770
00:32:07,500 --> 00:32:10,300
And then I'm going to cast it and add the pad.

771
00:32:10,400 --> 00:32:13,700
So that way, you can see the result of multiplying by our coefficient

772
00:32:13,700 --> 00:32:16,400
and hopefully that will let it inspect it a little bit easier.

773
00:32:16,400 --> 00:32:17,000
Furthermore.

774
00:32:17,000 --> 00:32:20,400
I'm going to get this out into a local variable and this is basically

775
00:32:20,400 --> 00:32:23,100
just me setting myself up for debugging success.

776
00:32:23,100 --> 00:32:26,100
I'm basically just trying to get these values out there so that you

777
00:32:26,100 --> 00:32:28,600
can see exactly what it is.

778
00:32:29,900 --> 00:32:32,200
What is going on in the actual debugger?

779
00:32:32,500 --> 00:32:33,100
Right?

780
00:32:33,100 --> 00:32:35,700
So I just wanna make sure I compiled that there we go.

781
00:32:36,200 --> 00:32:41,200
So, in here, we can see what we get now in the watch window, and I

782
00:32:41,200 --> 00:32:45,400
can, I can kind of very easily, make sure that the various stuff that

783
00:32:45,400 --> 00:32:47,500
happens is reasonable.

784
00:32:47,600 --> 00:32:53,100
So, let's take a look there at our, that's a totally reasonable value.

785
00:32:53,100 --> 00:32:55,600
And so is the x that results from it.

786
00:32:55,600 --> 00:32:58,300
Our coefficient also seems reasonable.

787
00:32:58,700 --> 00:32:59,300
So, let's see.

788
00:32:59,400 --> 00:32:59,700
See.

789
00:33:00,000 --> 00:33:04,000
Happens when we sort of go through these here.

790
00:33:04,000 --> 00:33:07,100
Does it seem to do anything particularly odd?

791
00:33:07,200 --> 00:33:12,400
Okay, that is really bizarre.

792
00:33:12,500 --> 00:33:14,400
That looks like a totally.

793
00:33:15,100 --> 00:33:18,600
Yeah, so that looks like a totally uninitialized value of some kind,

794
00:33:18,800 --> 00:33:24,800
which makes me think that are clearing of the this buffer did not work

795
00:33:24,800 --> 00:33:25,500
properly.

796
00:33:25,500 --> 00:33:26,600
That is what I am thinking.

797
00:33:26,600 --> 00:33:27,500
So I'm going to check that.

798
00:33:27,500 --> 00:33:29,800
But what I want to do as well is also drop.

799
00:33:30,000 --> 00:33:31,200
An assertion in here.

800
00:33:31,200 --> 00:33:35,300
Because the other thing that we kind of know is supposed to be true is

801
00:33:35,300 --> 00:33:38,500
that this play cursor is always supposed to be smaller than the

802
00:33:38,500 --> 00:33:39,900
secondary buffer size.

803
00:33:39,900 --> 00:33:42,000
That's just what we were expecting to be true.

804
00:33:42,200 --> 00:33:42,600
Right?

805
00:33:42,600 --> 00:33:47,000
You're never supposed to be able to get what is this signed unsigned,

806
00:33:47,000 --> 00:33:48,100
Miss mismatch.

807
00:33:48,500 --> 00:33:51,500
Secondary buffer size, I guess is an ENT.

808
00:33:51,800 --> 00:33:52,100
Mmm.

809
00:33:52,200 --> 00:33:55,100
So, that's actually supposed to be a d word, I assume, but I'm not

810
00:33:55,100 --> 00:33:56,500
sure if we want to do it that way or not.

811
00:33:56,500 --> 00:33:57,600
We can do it that way for now.

812
00:33:57,900 --> 00:33:59,800
All right, so I'm assuming that a

813
00:34:00,000 --> 00:34:03,900
Well now just fire and that assert will basically tell us that hey,

814
00:34:04,100 --> 00:34:06,700
you're getting values that are totally out of range for what you were

815
00:34:06,700 --> 00:34:09,100
supposed to be allowing in this particular function.

816
00:34:09,699 --> 00:34:11,600
And I just want to put that assertion in there so that it's there and

817
00:34:11,600 --> 00:34:13,000
we'll catch those bugs in the future.

818
00:34:13,000 --> 00:34:15,699
Probably should have put one in there to begin with but was not

819
00:34:15,699 --> 00:34:16,199
thinking.

820
00:34:16,400 --> 00:34:20,000
Alright, so what that suggests to me is perhaps that this is

821
00:34:20,000 --> 00:34:26,500
uninitialized properly are our buffer that I said was going to handle

822
00:34:26,500 --> 00:34:28,000
like sort of the circular buffer there.

823
00:34:28,600 --> 00:34:29,800
So that was this right here.

824
00:34:29,900 --> 00:34:31,600
Here and I want to 0.

825
00:34:31,600 --> 00:34:33,100
We do.

826
00:34:33,100 --> 00:34:33,800
That's the problem.

827
00:34:34,000 --> 00:34:37,800
It looks like when I was hastily typing that in when I modified it to

828
00:34:37,800 --> 00:34:39,400
be game, update hurts.

829
00:34:39,699 --> 00:34:41,699
I accidentally deleted, the thing.

830
00:34:41,699 --> 00:34:42,000
I had.

831
00:34:42,000 --> 00:34:47,199
So carefully included, you'll notice last night in John's language

832
00:34:47,199 --> 00:34:47,800
demonstration.

833
00:34:47,800 --> 00:34:50,600
He did the initialized by default, unless you ask for it, not to be

834
00:34:50,600 --> 00:34:51,000
thing.

835
00:34:51,100 --> 00:34:53,600
I would love that feature so much because most of the time I want

836
00:34:53,600 --> 00:34:56,300
things cleared 20 and stuff like that.

837
00:34:56,300 --> 00:34:57,800
Where you just you accidentally delete.

838
00:34:57,800 --> 00:34:59,800
It is just makes you prone to errors.

839
00:35:00,000 --> 00:35:00,800
You shouldn't have.

840
00:35:01,300 --> 00:35:02,000
So there we go.

841
00:35:02,500 --> 00:35:05,800
Alright, so we're totally set now for drawing.

842
00:35:06,000 --> 00:35:07,700
That's obviously, drawing our stuff.

843
00:35:07,700 --> 00:35:08,900
The way we wanted to draw.

844
00:35:09,200 --> 00:35:09,900
Unfortunately.

845
00:35:09,900 --> 00:35:12,200
We also have the problem of basically.

846
00:35:12,200 --> 00:35:16,500
It looks like there's a little bit more than 30 of them is more than

847
00:35:16,500 --> 00:35:17,100
actually fits.

848
00:35:17,100 --> 00:35:19,300
So I'm going to maybe do a little less than that.

849
00:35:19,500 --> 00:35:22,700
I'll do half that, just so it stays on the page.

850
00:35:22,700 --> 00:35:23,500
So there we go.

851
00:35:24,600 --> 00:35:26,600
Yeah, that looks about right.

852
00:35:26,700 --> 00:35:31,300
So basically what we can see already from this is we do have problems

853
00:35:31,300 --> 00:35:32,400
with our timing already.

854
00:35:32,400 --> 00:35:34,700
You can kind of see just from what I'm looking at here.

855
00:35:34,700 --> 00:35:36,200
You can see they're not equally spaced.

856
00:35:36,400 --> 00:35:39,200
That actually reminds me of something I was thinking about last night

857
00:35:39,300 --> 00:35:42,600
after we had finished the stream that I remember there was a thing

858
00:35:42,600 --> 00:35:44,400
that we had done wrong that I forgot about.

859
00:35:45,500 --> 00:35:51,900
Basically, what I was remembering was we did our and anyway will we

860
00:35:51,900 --> 00:35:54,500
will go right back to the audio thing in a minute, but I this reminded

861
00:35:54,500 --> 00:35:56,600
me of this and we should we should fix it while we're here since we're

862
00:35:56,600 --> 00:35:59,300
doing the exactly this sort of stuff and this says not testing yet

863
00:35:59,300 --> 00:35:59,800
probably bug.

864
00:36:00,000 --> 00:36:03,200
Which is true, basically the timing stuff here.

865
00:36:03,200 --> 00:36:05,700
I was doing a little thing here to sort of lock our frame rate where

866
00:36:05,700 --> 00:36:09,500
we waited and we wait on the total frame time, which is a good idea.

867
00:36:09,500 --> 00:36:14,800
However, what I noticed is we don't track that fret, we don't snap

868
00:36:14,800 --> 00:36:15,800
that frame time.

869
00:36:16,400 --> 00:36:18,100
Basically, this last counter thing.

870
00:36:18,200 --> 00:36:20,100
We don't snap this at the right place.

871
00:36:20,300 --> 00:36:26,600
What we want to do is immediately after we do sort of that, that lock

872
00:36:27,000 --> 00:36:29,900
right, that time is actually when we

873
00:36:30,000 --> 00:36:34,000
Want to get that encounter because that is actually the thing that we

874
00:36:34,000 --> 00:36:34,800
are looking at.

875
00:36:34,800 --> 00:36:35,600
For our total time.

876
00:36:35,600 --> 00:36:38,000
It'll still it'll still count because you have to remember this is

877
00:36:38,000 --> 00:36:41,300
basically just a watermark that we haven't insert somewhere in our

878
00:36:41,300 --> 00:36:41,800
Loop.

879
00:36:42,000 --> 00:36:46,500
And if we're waiting for our Target seconds per frame, we want to wait

880
00:36:46,700 --> 00:36:50,100
on the entire time that it takes to do everything up to this point.

881
00:36:50,200 --> 00:36:54,300
And then immediately after we want to snap, whatever that time was and

882
00:36:54,300 --> 00:36:57,800
count the rest of the stuff towards the next frames time because

883
00:36:57,800 --> 00:36:59,700
otherwise, we'll wait till the target time.

884
00:37:00,000 --> 00:37:01,800
Then they'll be a bunch of time afterwards.

885
00:37:01,800 --> 00:37:05,200
When we're doing stuff, like doing our sink display in our buffer and

886
00:37:05,200 --> 00:37:05,700
all this sort of stuff.

887
00:37:05,700 --> 00:37:10,000
So this really needed to get moved to here and we didn't do that and

888
00:37:10,100 --> 00:37:13,100
we saw that, I remember, I said we need to look at that tomorrow.

889
00:37:13,200 --> 00:37:15,500
We saw that in the fact that these numbers were wrong.

890
00:37:15,500 --> 00:37:19,900
They were a little over 33 and that amount that was over was exactly

891
00:37:19,900 --> 00:37:23,100
that time that was taken up in here because we were waiting till our

892
00:37:23,100 --> 00:37:27,500
Target frame time, which was 33, then still doing some work without

893
00:37:27,500 --> 00:37:29,800
count that would count inside.

894
00:37:29,900 --> 00:37:31,800
Side that that frame Benchmark.

895
00:37:32,000 --> 00:37:34,400
So I just wanted to fix that to get one bug out of the way because I

896
00:37:34,400 --> 00:37:36,200
thought of it last night after you finish, I was like, well, we've got

897
00:37:36,200 --> 00:37:37,300
one bug in there already.

898
00:37:38,400 --> 00:37:42,700
So I wanted to fix that and see ya and so you can kind of see now as

899
00:37:42,700 --> 00:37:43,100
well.

900
00:37:43,900 --> 00:37:44,600
Yeah, that's fine.

901
00:37:45,300 --> 00:37:48,700
And basically you can kind of see now that 33 is right on the money.

902
00:37:48,700 --> 00:37:49,500
And that's what I wanted.

903
00:37:49,500 --> 00:37:52,700
I wanted us to be locked at 33 frames a second and that's exactly what

904
00:37:52,700 --> 00:37:53,400
I wanted.

905
00:37:53,700 --> 00:37:54,500
Now this assert.

906
00:37:54,600 --> 00:37:57,300
We've got an assert here that fires anytime we miss our frame rate.

907
00:37:57,800 --> 00:37:59,800
And so that's, you know, what you would expect.

908
00:38:00,000 --> 00:38:01,500
Switch to another guy.

909
00:38:01,500 --> 00:38:03,500
So that this is this is kind of something that we're not going to be

910
00:38:03,500 --> 00:38:08,000
able to, to do anything about certainly because when we do our sleep,

911
00:38:08,000 --> 00:38:11,200
we the operating system, like I said before, when we do our sleep, if

912
00:38:11,200 --> 00:38:14,000
we're not the running application, we're not getting priority.

913
00:38:14,000 --> 00:38:15,500
We might sleep for a very long time.

914
00:38:15,500 --> 00:38:17,800
So this is just an assertion in debug mode to tell us when we missed

915
00:38:17,800 --> 00:38:18,200
our frame rate.

916
00:38:18,200 --> 00:38:21,100
So, if we switch apps, it's going to happen because windows will just

917
00:38:21,100 --> 00:38:23,300
see no particular reason to give us the resources.

918
00:38:23,300 --> 00:38:24,200
We need to do is hit it.

919
00:38:24,300 --> 00:38:24,800
So that's fine.

920
00:38:24,800 --> 00:38:29,500
But now, we are basically running at 3333 Point 33.

921
00:38:29,900 --> 00:38:32,800
And for frame exactly as far as we can tell from our wall clock time,

922
00:38:32,800 --> 00:38:33,800
which is exactly what I wanted.

923
00:38:33,800 --> 00:38:37,900
So we know that that Parts working properly, but when I look at our

924
00:38:37,900 --> 00:38:41,800
sound, you can kind of see there's some weird kind of gapping, unless

925
00:38:41,800 --> 00:38:43,500
we've got a bug in the way we're recording it.

926
00:38:43,500 --> 00:38:47,500
And if you kind of see what's happening there, if I pause this this,

927
00:38:47,900 --> 00:38:50,400
like, let's say I just tapped take a pause here, right?

928
00:38:50,700 --> 00:38:53,100
I don't know if I can get, let's do it this way.

929
00:38:53,200 --> 00:38:56,200
I'm going to go ahead and take this guy sort of over here.

930
00:38:56,400 --> 00:38:59,800
So this way we can run the app and then

931
00:39:00,100 --> 00:39:03,200
Stop the app in the middle if that makes sense.

932
00:39:03,200 --> 00:39:05,400
I don't know if that'll actually how well that will actually work.

933
00:39:05,400 --> 00:39:06,500
I kind of just need it to.

934
00:39:07,800 --> 00:39:08,700
I'm going to do this.

935
00:39:09,200 --> 00:39:10,100
I'm going to do this.

936
00:39:10,400 --> 00:39:11,900
I guess I'll just make it kind of tiny.

937
00:39:11,900 --> 00:39:15,300
This is why people often have two monitors if they're doing a lot of

938
00:39:16,700 --> 00:39:18,000
debugging work, okay?

939
00:39:20,500 --> 00:39:21,900
No, that's not what I wanted.

940
00:39:27,500 --> 00:39:30,400
So, what I want to do is just stop it so you can see it.

941
00:39:30,400 --> 00:39:30,900
There we go.

942
00:39:31,600 --> 00:39:35,100
So what you can see is going on here is we're getting nice.

943
00:39:35,200 --> 00:39:39,200
Sort of equally spaced samples most of the time but then sometimes we

944
00:39:39,200 --> 00:39:43,300
get kind of these nasty hiccups where it's totally not right at all.

945
00:39:43,300 --> 00:39:45,500
You can kind of see that there were two lines in here and there were

946
00:39:45,500 --> 00:39:48,500
two lines in here, two lines in here, no line there.

947
00:39:49,000 --> 00:39:53,300
So we're not getting a very stable read on the audio pointer right

948
00:39:53,300 --> 00:39:57,100
that that that when we're asking for where that is it.

949
00:39:57,300 --> 00:39:59,400
Look like we're getting a very stable read from it.

950
00:39:59,500 --> 00:39:59,600
Now.

951
00:39:59,600 --> 00:40:02,900
I don't actually know at the moment why that is, it could be that this

952
00:40:02,900 --> 00:40:06,300
sound card, just doesn't give us a very stable read back from the

953
00:40:06,300 --> 00:40:06,900
frame buffer.

954
00:40:06,900 --> 00:40:08,000
I honestly don't know.

955
00:40:08,300 --> 00:40:12,000
But what I can say is, at least right now, we're getting back, a very

956
00:40:12,000 --> 00:40:16,000
unstable, sort, of piece of information from it for that play cursor,

957
00:40:16,400 --> 00:40:19,100
and I don't actually know exactly why that is so,

958
00:40:20,100 --> 00:40:21,200
It's something to think about though.

959
00:40:21,600 --> 00:40:25,200
So what we want to do here is start to sort of improve our situation.

960
00:40:25,600 --> 00:40:29,100
What I want to do is kind of try to do something.

961
00:40:29,500 --> 00:40:31,000
Let's try to think about this here.

962
00:40:31,000 --> 00:40:35,100
I wonder if there's a way we can ask for slightly more accurate time,

963
00:40:35,100 --> 00:40:36,300
or if that's the most accurate time.

964
00:40:36,300 --> 00:40:38,700
We're going to get because if that's if you think about it, if that

965
00:40:38,700 --> 00:40:41,000
actually isn't buggy, right?

966
00:40:41,000 --> 00:40:42,500
If that is not buggy at all.

967
00:40:43,800 --> 00:40:44,200
Excuse me.

968
00:40:45,100 --> 00:40:48,400
Then we're kind of, in a little bit of trouble to try and get audio

969
00:40:48,400 --> 00:40:48,700
sync.

970
00:40:48,700 --> 00:40:51,600
I mean, if you think about how inaccurate it would have to be if

971
00:40:51,600 --> 00:40:52,700
that's where it actually is.

972
00:40:53,400 --> 00:40:56,700
But so let's just take a look at that a little bit, a little bit here,

973
00:40:56,700 --> 00:40:59,100
just to see if we can increase that accuracy if we're doing something

974
00:40:59,100 --> 00:41:01,400
stupid or you know, hopefully hopefully there's something we're

975
00:41:01,400 --> 00:41:01,900
dismissing.

976
00:41:02,200 --> 00:41:05,400
So when we call this get current position here, let's just take a look

977
00:41:05,400 --> 00:41:07,000
at the documentation for that.

978
00:41:07,200 --> 00:41:11,800
Direct sound get current position just to see if there's anything that

979
00:41:11,800 --> 00:41:14,500
we could be doing when we create the buffer.

980
00:41:14,700 --> 00:41:17,300
Like that to make it be a little bit more accurate.

981
00:41:17,500 --> 00:41:20,800
I don't know if we can or not, but let's see.

982
00:41:21,100 --> 00:41:22,500
Let us see what it says here.

983
00:41:22,500 --> 00:41:24,900
The right cursor into this was safe to write blah, blah, blah.

984
00:41:24,900 --> 00:41:27,800
We know all this that is not going to help us.

985
00:41:28,100 --> 00:41:32,000
Let's take a look at the buffer creation stuff, just so we can kind of

986
00:41:32,000 --> 00:41:34,500
see set frequency is not really going to help.

987
00:41:34,700 --> 00:41:39,800
No, this looks particularly interesting, but we can take a look at

988
00:41:39,800 --> 00:41:43,000
that some of these things like the caps and stuff and then I can also

989
00:41:43,000 --> 00:41:44,500
take a look at this creates a buffer.

990
00:41:44,600 --> 00:41:47,800
And so we can take a look at whether there's anything we can do inside

991
00:41:47,800 --> 00:41:51,000
the buffer description to tell it that we kind of need some better

992
00:41:51,000 --> 00:41:51,200
stuff.

993
00:41:51,200 --> 00:41:53,900
So, let's see.

994
00:41:53,900 --> 00:41:57,000
So we don't really know what position notify exactly as I Tsum that

995
00:41:57,000 --> 00:41:59,900
was called back to maybe that might have some bearing on.

996
00:42:00,400 --> 00:42:01,200
Let's see here.

997
00:42:01,300 --> 00:42:02,900
She's new, be placed in direct sound.

998
00:42:02,900 --> 00:42:05,400
Let's let's take a look at some of this stuff says because some of

999
00:42:05,400 --> 00:42:06,400
this may be relevant.

1000
00:42:07,800 --> 00:42:11,600
So in direct sound DirectX, 12, Play cursor was significantly ahead of

1001
00:42:11,600 --> 00:42:13,700
the actual playing sound on emulated sound cards.

1002
00:42:13,700 --> 00:42:15,300
It was directly behind the right cursor.

1003
00:42:15,300 --> 00:42:18,100
Now, of course, is just the apples and get a more accurate play

1004
00:42:18,100 --> 00:42:18,800
position.

1005
00:42:19,000 --> 00:42:21,300
If this flag is not satisfied, the old behavior is preserved for

1006
00:42:21,300 --> 00:42:22,000
compatibility.

1007
00:42:22,000 --> 00:42:26,000
So so, you know, I'm just like I said, going out on a limb here.

1008
00:42:26,000 --> 00:42:28,700
Let's just try some of these things and see if we can get that guy to

1009
00:42:28,700 --> 00:42:31,800
be a little smoother and hope that it's just a little bit of something

1010
00:42:31,800 --> 00:42:34,000
we're doing wrong, that's causing that.

1011
00:42:34,000 --> 00:42:37,400
And then it doesn't have anything to do with the actual platform.

1012
00:42:37,600 --> 00:42:39,700
Which would be a lot harder for us to work around.

1013
00:42:39,700 --> 00:42:41,500
So I'm going to go ahead and set that in here.

1014
00:42:41,500 --> 00:42:43,300
I believe it is.

1015
00:42:43,700 --> 00:42:46,100
Well, I guess it's only on our secondary buffer that we care.

1016
00:42:46,300 --> 00:42:47,100
I'm not sure.

1017
00:42:47,800 --> 00:42:50,600
I'm not sure if that's true or not.

1018
00:42:50,900 --> 00:42:51,800
But I believe it is.

1019
00:42:51,800 --> 00:42:52,500
Let's see.

1020
00:42:53,100 --> 00:42:54,300
Let's see here.

1021
00:42:54,800 --> 00:42:57,600
It's recommended Bobby, if the but Bubba, Bubba blah, if this flag is

1022
00:42:57,600 --> 00:43:00,400
not satisfied, the old parachute note that the slag affects only

1023
00:43:00,400 --> 00:43:03,000
emulated sound cards effects on drivers present like cursors, accurate

1024
00:43:03,000 --> 00:43:04,500
for directs on all versions.

1025
00:43:05,900 --> 00:43:09,400
Well, this probably isn't an emulated sound card is the thing.

1026
00:43:09,800 --> 00:43:10,900
So that's not a good.

1027
00:43:11,100 --> 00:43:12,500
That's not a good sign for us.

1028
00:43:13,100 --> 00:43:14,000
But what you gonna do?

1029
00:43:14,000 --> 00:43:15,600
All right, we'll, we'll try it.

1030
00:43:15,600 --> 00:43:19,800
Anyway, just to see, is there anything else on here that might have a

1031
00:43:19,800 --> 00:43:22,200
bearing on it primary buffer?

1032
00:43:22,200 --> 00:43:24,100
No static.

1033
00:43:24,100 --> 00:43:25,400
No Focus.

1034
00:43:25,400 --> 00:43:28,400
No, no Global Focus.

1035
00:43:28,400 --> 00:43:29,400
None of this stuff.

1036
00:43:29,900 --> 00:43:34,200
None of this stuff looks particularly useful.

1037
00:43:34,500 --> 00:43:35,200
Yeah.

1038
00:43:36,400 --> 00:43:39,500
Well, we'll try, we'll just we'll try some things and see if we can

1039
00:43:39,500 --> 00:43:40,600
get any luck.

1040
00:43:40,900 --> 00:43:42,800
That definitely did not prove anything.

1041
00:43:43,400 --> 00:43:46,400
Let me also double-check that that's not the right cursor that we

1042
00:43:46,400 --> 00:43:47,400
don't have some kind of bug.

1043
00:43:47,400 --> 00:43:50,300
We're asking for them in the wrong order or something stupid like that

1044
00:43:50,300 --> 00:43:52,600
because that could certainly happen.

1045
00:43:53,100 --> 00:43:56,300
Just want to make sure, let's see here.

1046
00:43:56,900 --> 00:44:00,700
So back up a little bit to get current position.

1047
00:44:00,700 --> 00:44:03,700
It is the play cursor, first the right cursor, s so we're doing that

1048
00:44:03,700 --> 00:44:05,300
correctly and not

1049
00:44:05,500 --> 00:44:08,800
How much we can say about that set format?

1050
00:44:09,300 --> 00:44:12,600
The set format is not going to have anything for us and I think and

1051
00:44:12,600 --> 00:44:13,500
get caps.

1052
00:44:13,900 --> 00:44:15,500
Well, we can get a caps B.

1053
00:44:16,200 --> 00:44:18,000
And there is not a lot there.

1054
00:44:18,000 --> 00:44:21,300
We could see if it has this, but that's about it.

1055
00:44:21,300 --> 00:44:22,100
So, I don't know.

1056
00:44:22,100 --> 00:44:23,500
Not looking great for our hero.

1057
00:44:23,900 --> 00:44:28,400
What I will say is let's not despair just quite yet.

1058
00:44:29,700 --> 00:44:32,900
You know, it's sort of disparage, be it's sort of time to despair a

1059
00:44:32,900 --> 00:44:34,700
little bit to get up, get our despair on.

1060
00:44:34,700 --> 00:44:35,400
But what I'm going to do

1061
00:44:35,500 --> 00:44:42,900
Who is going to do a win32 Time, marker, or debug time marker?

1062
00:44:43,400 --> 00:44:46,200
I'm going to go ahead and put some in here.

1063
00:44:46,200 --> 00:44:55,100
That's got basically a play cursor cursor and a right cursor, right?

1064
00:44:55,100 --> 00:44:55,700
Like that.

1065
00:44:56,500 --> 00:44:59,800
And I am just going to go ahead and use that as what are our.

1066
00:45:00,300 --> 00:45:05,300
Is so our markers and our marker account.

1067
00:45:05,300 --> 00:45:12,500
And then I will just sort of change this here to that and so we can

1068
00:45:12,500 --> 00:45:15,500
get win32 debug time, marker.

1069
00:45:15,700 --> 00:45:17,500
This marker equals that.

1070
00:45:17,500 --> 00:45:25,500
So at that point, I can do play cursor that way and that will be easy

1071
00:45:25,500 --> 00:45:27,200
for us to get out and that's good.

1072
00:45:30,000 --> 00:45:31,800
That should just count.

1073
00:45:31,800 --> 00:45:32,400
There we go.

1074
00:45:32,700 --> 00:45:37,800
And then down in the other function here.

1075
00:45:37,800 --> 00:45:45,600
We have to basically do debug time markers and debug markers.

1076
00:45:45,700 --> 00:45:48,500
Now, you can see what I'm doing here, is really very straightforward.

1077
00:45:48,600 --> 00:45:51,200
I had something working where I was just recording one value and I

1078
00:45:51,200 --> 00:45:53,000
wanted to record more than one value.

1079
00:45:53,200 --> 00:45:54,900
So I just broke it into a struct.

1080
00:45:55,000 --> 00:45:55,300
Again.

1081
00:45:55,300 --> 00:45:58,300
This is this is that compression oriented programming sort of style

1082
00:45:58,300 --> 00:45:59,000
that I'm talking about.

1083
00:45:59,000 --> 00:45:59,900
We're just when you

1084
00:46:00,000 --> 00:46:00,600
You need something.

1085
00:46:00,600 --> 00:46:03,600
Just do the step that gives you what you need and the codes sort of

1086
00:46:03,600 --> 00:46:06,000
marches towards better over time.

1087
00:46:06,100 --> 00:46:06,500
Right?

1088
00:46:06,600 --> 00:46:07,600
It just gets a little cleaner.

1089
00:46:07,600 --> 00:46:10,800
A little better more flexible as you go and everything.

1090
00:46:11,200 --> 00:46:13,400
Hopefully works out for the best.

1091
00:46:13,400 --> 00:46:18,300
So these are going to be our debug time markers and that should be

1092
00:46:18,800 --> 00:46:20,300
roughly it.

1093
00:46:20,300 --> 00:46:27,400
So debug time marker index, debug time markers.

1094
00:46:28,500 --> 00:46:29,700
And we want this.

1095
00:46:30,300 --> 00:46:34,600
To just be that probably get done this with a search and replace a lot

1096
00:46:34,600 --> 00:46:35,200
easier.

1097
00:46:35,500 --> 00:46:38,400
But, you know, sometimes markers.

1098
00:46:38,400 --> 00:46:39,600
You just don't think about it.

1099
00:46:40,600 --> 00:46:44,300
And this guy needs to be changed up here.

1100
00:46:44,700 --> 00:46:45,200
There we go.

1101
00:46:45,700 --> 00:46:46,300
All right.

1102
00:46:49,800 --> 00:46:51,700
No conversion, you're right.

1103
00:46:51,700 --> 00:46:54,200
There is no conversion, but

1104
00:46:55,300 --> 00:46:55,600
You know what?

1105
00:46:55,600 --> 00:47:02,100
I can do went through to debug time marker, marker equals address of

1106
00:47:02,100 --> 00:47:04,300
that, so I can just snap the address of that.

1107
00:47:04,700 --> 00:47:09,200
And then what I'll actually do is I'll just go ahead and get it

1108
00:47:09,200 --> 00:47:11,200
directly into to this thing.

1109
00:47:11,400 --> 00:47:14,800
So there we go, Mark Guerrero play cursor, Marco error, right cursor,

1110
00:47:14,800 --> 00:47:16,100
and now I've got both of them.

1111
00:47:16,500 --> 00:47:22,800
So with both of them I can now also go ahead and draw them both if I

1112
00:47:22,800 --> 00:47:24,900
want to and see how those look.

1113
00:47:25,100 --> 00:47:27,200
As well, so I'm going to go ahead and do that.

1114
00:47:27,300 --> 00:47:29,500
I'll just lean on our vertical line draw again.

1115
00:47:29,900 --> 00:47:33,100
And so, basically, what I'll do here is just say, okay.

1116
00:47:33,900 --> 00:47:38,500
Let's go ahead and pull that out as well into just a little guy that

1117
00:47:38,500 --> 00:47:45,100
does this exact thing that and this will be winter to draw sound

1118
00:47:45,100 --> 00:47:47,500
buffer marker or something like this.

1119
00:47:48,200 --> 00:47:54,400
And that will take is substantively the exact same stuff like so it

1120
00:47:54,400 --> 00:47:54,900
will just take

1121
00:47:55,000 --> 00:47:59,900
Take the coefficient here that we had and it will just do exactly.

1122
00:48:00,500 --> 00:48:01,200
This stuff.

1123
00:48:01,200 --> 00:48:03,900
So this is where local functions would be really nice.

1124
00:48:03,900 --> 00:48:07,700
By the way, you know, features that sort of get added to the language,

1125
00:48:07,700 --> 00:48:09,800
over time stuff that you would want.

1126
00:48:09,800 --> 00:48:10,900
That is definitely one of them.

1127
00:48:11,400 --> 00:48:11,600
All.

1128
00:48:11,600 --> 00:48:12,000
Right.

1129
00:48:12,300 --> 00:48:15,500
So all we really need to do here is just pass this, the things that it

1130
00:48:15,500 --> 00:48:24,800
doesn't have, which is the Sea and the pad X, the top and the bottom.

1131
00:48:25,100 --> 00:48:29,900
So I will go ahead and call that and I'll call it on both.

1132
00:48:30,000 --> 00:48:30,500
Things.

1133
00:48:31,800 --> 00:48:37,200
So, all right, so bubble back, buffer sound.

1134
00:48:37,500 --> 00:48:39,500
I don't know why we're still calling This Global back buffer.

1135
00:48:39,500 --> 00:48:42,300
By the way, that's kind of absurd.

1136
00:48:42,500 --> 00:48:45,600
It should just be back buffer in here because it doesn't actually care

1137
00:48:45,600 --> 00:48:46,900
that's using the global one.

1138
00:48:46,900 --> 00:48:48,100
It's not Global anymore.

1139
00:48:48,300 --> 00:48:49,800
It's just using one that's passed in.

1140
00:48:50,500 --> 00:48:54,100
So we'll get that out there and we'll do this.

1141
00:48:54,300 --> 00:48:54,700
There we go.

1142
00:48:54,700 --> 00:49:01,200
Paddocks top and bottom like, so, there we go.

1143
00:49:02,000 --> 00:49:02,600
All right.

1144
00:49:03,100 --> 00:49:04,500
So that's all good.

1145
00:49:04,500 --> 00:49:08,000
Now, we just need to pass two different values to it, which is

1146
00:49:08,000 --> 00:49:10,800
basically going to be this thing right here.

1147
00:49:10,800 --> 00:49:15,500
So this is our value that we actually want to draw that's coming in

1148
00:49:15,700 --> 00:49:18,400
and I will just pass a different thing.

1149
00:49:18,400 --> 00:49:24,800
I'll pass the play cursor and maybe the color here and pass the right

1150
00:49:24,800 --> 00:49:27,300
cursor and a different color here.

1151
00:49:27,500 --> 00:49:31,500
Let's say something like that, you know, and this might be a good

1152
00:49:31,500 --> 00:49:31,600
time.

1153
00:49:31,700 --> 00:49:36,800
The turn off our gradient to say the least, but you know.

1154
00:49:37,900 --> 00:49:38,700
It's so pretty.

1155
00:49:39,000 --> 00:49:41,000
Sometimes it's hard to part with it.

1156
00:49:41,000 --> 00:49:41,600
Certainly.

1157
00:49:42,000 --> 00:49:45,300
So we'll do that and we'll get a color in here so we can do them to

1158
00:49:45,300 --> 00:49:45,700
the color.

1159
00:49:45,700 --> 00:49:49,100
So I'm just going to pass the right cursor and the play cursor, so I

1160
00:49:49,100 --> 00:49:52,400
can see the two of them as well.

1161
00:49:52,400 --> 00:49:55,800
So let's go ahead and fix that.

1162
00:49:56,000 --> 00:50:02,800
Buffer back buffer, and that should be it.

1163
00:50:02,900 --> 00:50:05,700
I should be seeing the red ones as well here.

1164
00:50:09,700 --> 00:50:10,300
Yeah.

1165
00:50:11,800 --> 00:50:16,200
It's just not looking, it's not looking good for Our Heroes.

1166
00:50:16,200 --> 00:50:16,500
It.

1167
00:50:17,800 --> 00:50:20,300
Yeah, yeah, I don't know.

1168
00:50:20,300 --> 00:50:22,600
That's that's not that's not what you want to see.

1169
00:50:22,700 --> 00:50:24,300
Certainly in your life.

1170
00:50:24,400 --> 00:50:28,700
I mean you can kind of see if I pause this guy at any particular point

1171
00:50:28,700 --> 00:50:29,800
in the execution here.

1172
00:50:30,700 --> 00:50:32,400
You can kind of see what's going on there.

1173
00:50:32,600 --> 00:50:35,700
There's just a really even though we've got some measure of

1174
00:50:35,700 --> 00:50:40,100
verification that we're always updating ourselves at basically the

1175
00:50:40,100 --> 00:50:40,700
right amount of time.

1176
00:50:40,700 --> 00:50:46,000
We're definitely getting just a really bad kind of read back from the

1177
00:50:46,000 --> 00:50:46,700
sound card here.

1178
00:50:46,700 --> 00:50:47,500
That's sort of

1179
00:50:47,800 --> 00:50:49,500
seems pretty unreliable to me.

1180
00:50:49,500 --> 00:50:50,000
I don't know.

1181
00:50:50,100 --> 00:50:53,700
Hopefully, maybe there's we're still doing something wrong, but you

1182
00:50:53,700 --> 00:50:57,900
can see why I'm just thinking getting any kind of tight audio sync

1183
00:50:57,900 --> 00:50:59,800
when you've got that much variability, is

1184
00:51:00,000 --> 00:51:03,600
Just not probably something that's going to be on the table if that

1185
00:51:03,600 --> 00:51:04,100
makes sense.

1186
00:51:04,100 --> 00:51:05,900
But what can you do?

1187
00:51:06,700 --> 00:51:09,400
Of course, we're not really calling it right at the moment.

1188
00:51:09,600 --> 00:51:13,200
So maybe maybe let's go and actually do the work of what we're going

1189
00:51:13,200 --> 00:51:14,000
to do today.

1190
00:51:14,300 --> 00:51:14,400
What?

1191
00:51:14,400 --> 00:51:17,200
I was hoping would be enough today, but you know, with that with

1192
00:51:17,200 --> 00:51:20,300
looking at how bad that is in terms of it's tough, It's unclear that

1193
00:51:20,300 --> 00:51:24,700
we're going to get anything in terms of sound sink, but maybe it's

1194
00:51:24,700 --> 00:51:27,200
just because we're calling it sloppily at the moment.

1195
00:51:27,200 --> 00:51:29,900
Maybe the fact that we're doing the lock in a bad.

1196
00:51:30,000 --> 00:51:31,700
Way is causing the hiccup.

1197
00:51:31,700 --> 00:51:34,800
I don't know, or maybe we've got something else stupid going on.

1198
00:51:34,800 --> 00:51:38,200
So, for now, I won't despair quite yet.

1199
00:51:38,700 --> 00:51:40,600
It was a little despairing to see it.

1200
00:51:40,800 --> 00:51:45,600
But, you know, maybe maybe, maybe we can under spare.

1201
00:51:46,600 --> 00:51:50,200
So what we want to do here is since we kind of know, roughly what our

1202
00:51:50,200 --> 00:51:51,900
frame sync is going to be.

1203
00:51:52,100 --> 00:51:55,500
In fact, we can sort of look back at the beginning here and we can see

1204
00:51:55,800 --> 00:51:57,900
what our what our frame situation looks like.

1205
00:51:57,900 --> 00:51:59,100
It's pretty consistent.

1206
00:51:59,400 --> 00:51:59,800
We always

1207
00:52:00,000 --> 00:52:03,500
Are actually getting that 33 frames a second that we want to pretty

1208
00:52:03,500 --> 00:52:06,400
much across the board when our app is not getting interrupted or

1209
00:52:06,400 --> 00:52:06,800
anything.

1210
00:52:06,800 --> 00:52:09,700
We're getting a pretty good read on that seems like.

1211
00:52:09,800 --> 00:52:13,400
So if that's always getting 33 milliseconds to frame round trip time,

1212
00:52:13,800 --> 00:52:16,400
then basically what we should be able to do at the very least is just

1213
00:52:16,400 --> 00:52:17,300
right 33.

1214
00:52:17,900 --> 00:52:22,300
We should be able to sort of like keep ourselves that far ahead in the

1215
00:52:22,300 --> 00:52:26,400
sound buffer and that should be sufficient for our purposes.

1216
00:52:26,400 --> 00:52:27,200
So basically,

1217
00:52:28,700 --> 00:52:33,700
When we go to actually write the sound out which is right here, when

1218
00:52:33,700 --> 00:52:36,800
we actually go to write the sound out, we should be able to just do it

1219
00:52:37,000 --> 00:52:37,800
by writing.

1220
00:52:38,100 --> 00:52:42,900
However, much ahead are actual frame time is and, and using that.

1221
00:52:42,900 --> 00:52:43,800
So basically,

1222
00:52:45,900 --> 00:52:52,900
Basically, what we want to do is we want to do something along the

1223
00:52:52,900 --> 00:52:54,400
lines of this.

1224
00:52:54,400 --> 00:52:59,800
So we kind of want to go here and say, all right, we're going to do

1225
00:52:59,800 --> 00:53:04,000
our game update and render and then we're going to go ahead and we're

1226
00:53:04,000 --> 00:53:09,100
going to write into the location that we think the sound will be at at

1227
00:53:09,100 --> 00:53:09,900
that time.

1228
00:53:10,900 --> 00:53:14,300
Well, yeah, there's a couple different ways we could do this about

1229
00:53:14,300 --> 00:53:14,400
this.

1230
00:53:14,400 --> 00:53:15,100
This is why I said it.

1231
00:53:15,300 --> 00:53:16,600
Going to be very hairy and complicated.

1232
00:53:16,600 --> 00:53:18,400
I think I said it originally.

1233
00:53:23,900 --> 00:53:26,000
We may have to eat up some Q&A time on this one because it's gonna be

1234
00:53:26,000 --> 00:53:26,500
pretty hairy.

1235
00:53:26,800 --> 00:53:27,300
All right.

1236
00:53:28,200 --> 00:53:32,200
So, the problem that we have is basically, we know we have to write

1237
00:53:32,200 --> 00:53:36,700
from the last position that we wrote to write because our Sound Stream

1238
00:53:36,700 --> 00:53:37,900
has to be continuous.

1239
00:53:38,400 --> 00:53:40,800
And so, basically, what we're doing here is we're sort of doing

1240
00:53:40,800 --> 00:53:43,000
exactly that we're passing the B to, right?

1241
00:53:43,200 --> 00:53:44,700
And we're passing the samples here.

1242
00:53:45,200 --> 00:53:50,500
So what we're trying to figure out here is how far ahead of the of the

1243
00:53:50,500 --> 00:53:51,600
current play cursor.

1244
00:53:51,900 --> 00:53:52,100
We

1245
00:53:52,400 --> 00:53:53,100
Should be writing.

1246
00:53:53,200 --> 00:53:56,500
So we're doing the play cursor, plus, whatever.

1247
00:53:56,500 --> 00:53:57,600
Our latency is.

1248
00:53:57,700 --> 00:53:57,900
Now.

1249
00:53:57,900 --> 00:53:59,800
We're expecting the play cursor, right?

1250
00:54:00,900 --> 00:54:02,200
From wherever it was.

1251
00:54:02,600 --> 00:54:06,500
We basically want to use the play cursor, plus 33 milliseconds.

1252
00:54:06,700 --> 00:54:09,600
We want to use the play cursor that we sampled back when we flipped

1253
00:54:09,600 --> 00:54:14,000
the previous frame and we want to add our frame latency into that

1254
00:54:14,100 --> 00:54:15,400
effectively, right?

1255
00:54:15,700 --> 00:54:19,200
So what we want to do is we want to we want to actually go and I guess

1256
00:54:19,200 --> 00:54:19,700
this is noooo.

1257
00:54:19,800 --> 00:54:21,700
This makes this not really debug anymore.

1258
00:54:22,300 --> 00:54:28,000
We actually want to go ahead and do this, this play cursor access.

1259
00:54:28,500 --> 00:54:30,000
We want to do that access.

1260
00:54:31,600 --> 00:54:32,700
Back here, right?

1261
00:54:32,700 --> 00:54:33,700
If that makes any sense.

1262
00:54:34,300 --> 00:54:38,800
So what we want to do is say, okay, let's go ahead and take that

1263
00:54:38,800 --> 00:54:39,300
sample.

1264
00:54:43,700 --> 00:54:44,700
At that time.

1265
00:54:45,200 --> 00:54:49,500
Will basically say all right, when we actually grab this, we're all.

1266
00:54:49,500 --> 00:54:50,800
So this is no longer.

1267
00:54:50,900 --> 00:54:53,600
No, no five minute warning.

1268
00:54:54,000 --> 00:54:56,500
No wait, this is selectable text.

1269
00:54:56,800 --> 00:54:57,700
Is that actually true?

1270
00:54:58,200 --> 00:54:58,900
No, no, it's doing.

1271
00:54:58,900 --> 00:55:01,400
I thought for a minute was like letting me select this?

1272
00:55:01,400 --> 00:55:02,200
Which is kind of hilarious.

1273
00:55:02,200 --> 00:55:03,600
It's actually talking about P Max.

1274
00:55:03,600 --> 00:55:04,100
Oh, that's fine.

1275
00:55:04,400 --> 00:55:04,800
Okay.

1276
00:55:05,500 --> 00:55:10,600
Anyway, so what I got to do here or what I'm going to do here is I'm

1277
00:55:10,600 --> 00:55:13,300
going to say when we do our flip, we're going to look at

1278
00:55:13,500 --> 00:55:16,800
Whatever the sound card said, it was at that time.

1279
00:55:17,000 --> 00:55:18,000
So we're already doing that.

1280
00:55:18,000 --> 00:55:19,700
So now this is no longer debug code.

1281
00:55:19,700 --> 00:55:20,300
Basically.

1282
00:55:20,600 --> 00:55:23,300
This is actually going to be real code.

1283
00:55:23,300 --> 00:55:27,500
So we're going to access that play cursor and the right cursor and

1284
00:55:27,500 --> 00:55:30,700
we're then going to record them for debugging purposes in debug build

1285
00:55:30,700 --> 00:55:31,600
so that we can draw them.

1286
00:55:32,100 --> 00:55:36,000
But we're actually going to always also have them as well, if that

1287
00:55:36,000 --> 00:55:36,600
makes sense.

1288
00:55:36,700 --> 00:55:40,700
So we're going to go ahead and say that there is a plate cursor and a

1289
00:55:40,700 --> 00:55:43,100
right cursor, the rod that's good.

1290
00:55:44,600 --> 00:55:46,500
I'm going to get them both here.

1291
00:55:48,700 --> 00:55:49,300
There we go.

1292
00:55:49,600 --> 00:55:54,500
And I will actually store them assuming that they worked will have to

1293
00:55:54,500 --> 00:55:58,100
handle it with the sound is valid thing here.

1294
00:55:58,200 --> 00:56:01,500
Otherwise, the sound is not valid here.

1295
00:56:02,800 --> 00:56:03,500
There we go.

1296
00:56:04,300 --> 00:56:08,700
And then I will simply set last play cursor, equal to play cursor.

1297
00:56:08,700 --> 00:56:12,400
And so we will actually have some understanding of where the play

1298
00:56:12,400 --> 00:56:12,900
cursor is.

1299
00:56:12,900 --> 00:56:16,800
Now, we're going to have to handle startup specially, do you word?

1300
00:56:17,900 --> 00:56:18,800
Quaker sir.

1301
00:56:19,000 --> 00:56:26,200
Yeah, to do Casey handles startup specially but then once we get

1302
00:56:26,200 --> 00:56:32,100
through here, went in our sound is valid, whereas our sound sound is

1303
00:56:32,100 --> 00:56:32,800
valid.

1304
00:56:33,100 --> 00:56:37,400
Our sound is valid also needs to be stored here as well.

1305
00:56:37,500 --> 00:56:40,000
Okay, so our startup is going to be totally messed up.

1306
00:56:40,100 --> 00:56:41,300
There's no question about that.

1307
00:56:41,500 --> 00:56:44,400
But I'm just trying to get the actual frame to frame update working

1308
00:56:44,400 --> 00:56:45,600
properly first.

1309
00:56:45,600 --> 00:56:47,400
So, when I come in here,

1310
00:56:47,600 --> 00:56:49,300
I no longer need to do this.

1311
00:56:49,900 --> 00:56:50,300
Basically.

1312
00:56:50,300 --> 00:56:53,200
All we need to do is ask whether the sound is valid or not.

1313
00:56:53,200 --> 00:56:56,800
And assuming the sound is valid, then we do the computation using the

1314
00:56:56,800 --> 00:56:58,700
play cursor that we already have.

1315
00:56:58,700 --> 00:56:59,800
So in here, instead of you.

1316
00:57:00,000 --> 00:57:02,000
Lakers are we will use last play cursor.

1317
00:57:02,300 --> 00:57:06,000
There will be note, cursor queried here and we'll do our computation

1318
00:57:06,000 --> 00:57:06,900
off of that.

1319
00:57:06,900 --> 00:57:11,000
Now, when we get that, we will then asked to write essentially,

1320
00:57:11,000 --> 00:57:15,300
however, far ahead, we want for our latency and that latency can be

1321
00:57:15,300 --> 00:57:16,100
the frame time.

1322
00:57:16,100 --> 00:57:18,600
Plus some, if we want to add additional buffer in there.

1323
00:57:19,100 --> 00:57:22,400
So whatever the latency sample count, actually comes out to be.

1324
00:57:22,500 --> 00:57:24,500
Let's take a look at how we're Computing that right now.

1325
00:57:24,700 --> 00:57:27,000
It looks like we're doing 15th of a second.

1326
00:57:27,400 --> 00:57:29,900
So, maybe what we'll do here is actually

1327
00:57:30,000 --> 00:57:33,900
Shorten that down for now to actually be one frames worth.

1328
00:57:34,900 --> 00:57:40,300
So that would be basically the samples per second divided by the frame

1329
00:57:40,300 --> 00:57:42,300
rate, it hurts.

1330
00:57:42,800 --> 00:57:47,500
And then if we wanted to move it back to to be two frames where a so

1331
00:57:47,500 --> 00:57:49,200
it's always writing an extra frame ahead.

1332
00:57:49,200 --> 00:57:52,600
We can do that for now by putting in the to write this.

1333
00:57:52,600 --> 00:57:56,600
We can put like frames of audio latency, something like that.

1334
00:57:56,800 --> 00:57:59,800
We can actually say that's a thing that we have, right?

1335
00:58:00,000 --> 00:58:00,900
So, we have that.

1336
00:58:01,300 --> 00:58:03,300
So let's take a look at that for a second here.

1337
00:58:03,700 --> 00:58:05,600
I think that's a little more sane.

1338
00:58:05,700 --> 00:58:06,000
Of course.

1339
00:58:06,000 --> 00:58:08,000
It's not really going to fix any of our problems that we had.

1340
00:58:08,000 --> 00:58:10,800
But I just wanted to get that in their first course.

1341
00:58:10,800 --> 00:58:14,100
The fact that I hear no sound right now is not a good sign, but

1342
00:58:14,100 --> 00:58:17,400
looking at looking at it.

1343
00:58:17,400 --> 00:58:26,500
It it does appear to be a little more stationary and stable Maybe.

1344
00:58:27,300 --> 00:58:29,600
Maybe I don't know about that.

1345
00:58:29,700 --> 00:58:30,900
Is that more stable.

1346
00:58:31,100 --> 00:58:34,000
Serve does look, more stable to me.

1347
00:58:34,600 --> 00:58:35,400
Those are not double.

1348
00:58:35,400 --> 00:58:37,100
Lines are just weird-- using stretch blitz.

1349
00:58:37,100 --> 00:58:39,300
So remember it's going to kind of stretch our Graphics a little bit.

1350
00:58:39,300 --> 00:58:43,100
So looks, that's looking better to me.

1351
00:58:43,500 --> 00:58:44,600
That is looking better.

1352
00:58:44,800 --> 00:58:47,000
I feel like, wouldn't you say?

1353
00:58:47,100 --> 00:58:47,800
I don't know.

1354
00:58:48,100 --> 00:58:50,400
Looks it looks a little more stable to me.

1355
00:58:50,400 --> 00:58:53,200
It's still a little variable more variable than I'd like, but that

1356
00:58:53,200 --> 00:58:53,900
looks more stable.

1357
00:58:53,900 --> 00:58:56,900
So maybe if we're very lucky, it was just the fact that

1358
00:58:57,200 --> 00:59:01,000
Locking the buffer kind of Wonka lie, that was causing it to be errant

1359
00:59:01,000 --> 00:59:03,200
and I'm really crossing my fingers that, that's what it is.

1360
00:59:03,500 --> 00:59:05,700
And not just the fact that the sound card is going to be really an

1361
00:59:05,700 --> 00:59:06,500
accurate on.

1362
00:59:06,500 --> 00:59:09,600
This machine wouldn't surprise me because it's one of those weird

1363
00:59:09,600 --> 00:59:12,000
Realtek embedded like five cent chips or whatever.

1364
00:59:15,100 --> 00:59:17,000
But hey, the reality is that's what's in a lot of computers.

1365
00:59:17,000 --> 00:59:17,300
So

1366
00:59:18,300 --> 00:59:19,900
You know, we got to work on that stuff.

1367
00:59:19,900 --> 00:59:22,400
We can't have some kind of gourmet sound card all the time.

1368
00:59:23,100 --> 00:59:24,000
That's not on the table.

1369
00:59:24,100 --> 00:59:25,800
All right, so sound is valid.

1370
00:59:27,600 --> 00:59:29,500
Let's take a look at what goes on with sound is valid.

1371
00:59:30,200 --> 00:59:33,100
Basically, we've got sound is valid being set to True when we can get

1372
00:59:33,100 --> 00:59:36,100
the play cursor and sounds valid equal to false when we can't.

1373
00:59:36,500 --> 00:59:39,800
So if that's equal to true, I'm not sure exactly why we were having a

1374
00:59:39,800 --> 00:59:40,200
problem.

1375
00:59:40,200 --> 00:59:40,600
Here.

1376
00:59:41,100 --> 00:59:45,100
We were using last play cursor to Target it.

1377
00:59:46,000 --> 00:59:47,500
Are we for some reason?

1378
00:59:48,100 --> 00:59:49,100
Not owee.

1379
00:59:49,200 --> 00:59:50,000
Yeah, that's good.

1380
00:59:50,000 --> 00:59:52,400
We drop that succeeded line.

1381
00:59:52,500 --> 00:59:53,200
You got to love that.

1382
00:59:53,200 --> 00:59:55,600
Succeeded always always comes and gets you.

1383
00:59:56,100 --> 00:59:57,200
I think it's succeeded.

1384
00:59:57,300 --> 00:59:58,200
Let me double check again.

1385
00:59:58,200 --> 00:59:59,200
I forgot what that?

1386
00:59:59,300 --> 00:59:59,800
What that

1387
01:00:00,000 --> 01:00:06,400
Was so, basically, that was get current position and return values.

1388
01:00:06,400 --> 01:00:07,100
Its dies.

1389
01:00:07,100 --> 01:00:08,300
Okay, so no, I guess.

1390
01:00:08,300 --> 01:00:09,100
I don't you succeeded.

1391
01:00:09,100 --> 01:00:10,600
I use DS.

1392
01:00:10,600 --> 01:00:11,500
Okay.

1393
01:00:12,200 --> 01:00:12,600
Yes.

1394
01:00:12,600 --> 01:00:13,300
Okay.

1395
01:00:13,700 --> 01:00:14,300
There we go.

1396
01:00:14,900 --> 01:00:16,700
So that should turn our sound back on.

1397
01:00:17,700 --> 01:00:18,300
There we go.

1398
01:00:18,900 --> 01:00:21,000
So, at least our sound is back on, never, we're still getting

1399
01:00:21,000 --> 01:00:21,500
scratchy.

1400
01:00:21,500 --> 01:00:22,900
So we're still got a bug.

1401
01:00:26,600 --> 01:00:28,300
Still, it looks a little gappy.

1402
01:00:28,300 --> 01:00:28,700
I don't know.

1403
01:00:28,700 --> 01:00:29,400
We still got a bug.

1404
01:00:29,400 --> 01:00:30,700
That you can hear that scratching this.

1405
01:00:30,700 --> 01:00:32,400
There's no real reason for it.

1406
01:00:32,700 --> 01:00:34,400
So we're doing something stupid.

1407
01:00:34,600 --> 01:00:35,900
I'm just not exactly sure what.

1408
01:00:35,900 --> 01:00:38,100
So, let's step through and see what's going on here because I kind of

1409
01:00:38,100 --> 01:00:38,800
did that a little bit.

1410
01:00:38,800 --> 01:00:39,300
Hastily.

1411
01:00:39,500 --> 01:00:41,600
It does say the Q&A begins now, but I think I'm going to go through

1412
01:00:41,600 --> 01:00:44,500
the Q&A time a little bit just so I can kind of finish debugging.

1413
01:00:44,500 --> 01:00:49,000
At least the step that we were on because I don't want to sort of lose

1414
01:00:49,000 --> 01:00:52,500
the mental state if you will of what the changes that we're trying to

1415
01:00:52,500 --> 01:00:54,400
make because it's nice to be able to make a single change and then

1416
01:00:54,400 --> 01:00:55,100
kind of like put it

1417
01:00:55,300 --> 01:00:57,400
Down and say, okay, we're basically done.

1418
01:00:58,100 --> 01:01:00,800
So I'm going to remove this to do because that is exactly what we're

1419
01:01:00,800 --> 01:01:01,400
doing here.

1420
01:01:01,800 --> 01:01:04,800
So assuming the sound is valid, we're going to take a look here and

1421
01:01:04,800 --> 01:01:09,800
look at where we were in The Sound output and we are going to map that

1422
01:01:09,800 --> 01:01:10,900
into our sound buffer.

1423
01:01:10,900 --> 01:01:14,700
We're going to say that and that's just where we're going to right to

1424
01:01:14,700 --> 01:01:15,300
right?

1425
01:01:16,400 --> 01:01:19,000
Then we're going to take wherever that last play cursor is.

1426
01:01:19,000 --> 01:01:19,900
So that's where ever.

1427
01:01:19,900 --> 01:01:21,500
We flipped the last frame.

1428
01:01:22,000 --> 01:01:23,200
We take a look at where that is.

1429
01:01:23,400 --> 01:01:25,000
We're going to advance.

1430
01:01:25,400 --> 01:01:27,500
However, many samples of latency we want.

1431
01:01:27,500 --> 01:01:30,200
We're going to advance their times of the bytes for sample.

1432
01:01:30,800 --> 01:01:34,500
And then we're going to basically say that is the location that we

1433
01:01:34,500 --> 01:01:35,200
want.

1434
01:01:35,200 --> 01:01:40,200
We're going to map that essentially into the buffer size as well.

1435
01:01:40,200 --> 01:01:42,400
So we're modding both these by the buffer size to make sure they both

1436
01:01:42,400 --> 01:01:44,600
stay in the buffer.

1437
01:01:45,000 --> 01:01:50,100
So assuming that the bite to lock is greater than the target cursor.

1438
01:01:54,600 --> 01:01:56,000
That assumes that it wrapped.

1439
01:01:56,000 --> 01:01:58,100
I guess, just assuming that it wrapped.

1440
01:01:58,400 --> 01:02:03,000
Then the B strep is right, is the whole sighs - whatever the B to lock

1441
01:02:03,000 --> 01:02:03,300
is.

1442
01:02:03,500 --> 01:02:05,000
So this this looks a little hairy to me.

1443
01:02:05,000 --> 01:02:07,300
Actually, let's Okay, so this is

1444
01:02:11,600 --> 01:02:14,200
We're just going to say we're going to check that next but I want to

1445
01:02:14,200 --> 01:02:15,000
take a look at that.

1446
01:02:15,000 --> 01:02:17,000
So, all right, so we'll get rid of this map is where actually

1447
01:02:17,000 --> 01:02:17,800
debugging that.

1448
01:02:18,300 --> 01:02:19,700
So we make the sound buffer.

1449
01:02:20,100 --> 01:02:22,500
We basically say how many samples we're going to write and that's

1450
01:02:22,500 --> 01:02:23,800
however much we computed in here.

1451
01:02:23,800 --> 01:02:25,200
So this guy is controlling everything.

1452
01:02:25,200 --> 01:02:28,300
This is basically compute.

1453
01:02:28,700 --> 01:02:31,500
How much sound too, right?

1454
01:02:31,600 --> 01:02:36,600
And we're okay, so we have that.

1455
01:02:37,200 --> 01:02:38,100
I would like to know.

1456
01:02:38,100 --> 01:02:40,900
Where does where does running sample index?

1457
01:02:41,700 --> 01:02:43,600
Where does that get updated?

1458
01:02:44,200 --> 01:02:46,400
So that gets updated in here.

1459
01:02:46,400 --> 01:02:51,000
So basically our our out, our fill sound buffer will advance that and

1460
01:02:51,000 --> 01:02:53,800
it's updating it correctly.

1461
01:02:53,800 --> 01:02:54,600
So that's good.

1462
01:02:54,700 --> 01:02:56,800
Okay, so we're going to lock that.

1463
01:02:56,800 --> 01:02:58,300
We're going to figure out what's going on there.

1464
01:02:58,700 --> 01:02:59,200
We'll look at that.

1465
01:02:59,200 --> 01:02:59,800
That's we're going to check.

1466
01:03:00,200 --> 01:03:01,000
More detail later.

1467
01:03:01,500 --> 01:03:03,900
So we call the game update and render and that actually gets our sound

1468
01:03:03,900 --> 01:03:05,300
output for the sample.

1469
01:03:05,300 --> 01:03:09,900
The number of samples that we thought we wanted which is basically

1470
01:03:09,900 --> 01:03:10,500
however, many bytes.

1471
01:03:10,500 --> 01:03:12,300
There are my /, the B for sample.

1472
01:03:12,300 --> 01:03:14,200
That's how many samples were going to write.

1473
01:03:14,800 --> 01:03:15,600
So that's fine.

1474
01:03:15,700 --> 01:03:18,100
And then we're going to check if the sound is valid.

1475
01:03:18,100 --> 01:03:20,700
Meaning if the last time we looked at the position that actually was

1476
01:03:20,700 --> 01:03:21,800
able to give it back to us.

1477
01:03:22,100 --> 01:03:26,000
We are going to go ahead and fill the sound buffer at that point with

1478
01:03:26,000 --> 01:03:27,600
whatever came back from the game.

1479
01:03:28,500 --> 01:03:29,800
We're then going to sleep.

1480
01:03:30,000 --> 01:03:32,100
Just gonna go ahead and wait and let it cut.

1481
01:03:32,100 --> 01:03:34,400
Let it catch up to where that should roughly have been.

1482
01:03:35,100 --> 01:03:36,100
And that's fine.

1483
01:03:36,400 --> 01:03:38,700
We're then going to go ahead and do seconds elapsed.

1484
01:03:38,800 --> 01:03:41,200
And then once we actually do the flip, we're going to look at where

1485
01:03:41,200 --> 01:03:42,600
the play cursor was.

1486
01:03:42,800 --> 01:03:45,200
So that doesn't look totally stupid to me.

1487
01:03:45,300 --> 01:03:47,400
There's nothing obviously dumb about it.

1488
01:03:47,700 --> 01:03:50,000
But of course, there's a lot of math in there and it does seem like

1489
01:03:50,000 --> 01:03:50,900
it's like a little finicky.

1490
01:03:50,900 --> 01:03:55,600
One thing we could do and maybe this is a good idea is to sort of

1491
01:03:55,900 --> 01:03:58,100
encapsulate, some more of this math.

1492
01:03:58,200 --> 01:03:59,800
We're doing a lot of this map by hand.

1493
01:04:00,000 --> 01:04:00,300
Here.

1494
01:04:00,600 --> 01:04:03,800
And there's a lot of possibilities for error like when stuff is in

1495
01:04:03,800 --> 01:04:05,700
samples versus in bites and stuff.

1496
01:04:05,700 --> 01:04:08,000
And it's kind of the onus is on you.

1497
01:04:08,000 --> 01:04:09,900
When you write each individual equation to do it, right?

1498
01:04:09,900 --> 01:04:12,400
So it could be that we should go ahead and capsulate that.

1499
01:04:12,600 --> 01:04:14,900
So what we have a handle that works the samples or something like

1500
01:04:14,900 --> 01:04:16,300
that, that we just use.

1501
01:04:16,300 --> 01:04:19,900
And we know that gets map down to B properly something like this, we

1502
01:04:19,900 --> 01:04:20,400
can think about that.

1503
01:04:20,400 --> 01:04:22,000
But for now, I want to take a look at this.

1504
01:04:22,500 --> 01:04:25,700
So basically, let's see what happens the first time through here.

1505
01:04:26,200 --> 01:04:27,600
We have some Target cursor, right?

1506
01:04:27,600 --> 01:04:29,200
The first time through your sound is going to be valid.

1507
01:04:29,200 --> 01:04:29,600
Anyway.

1508
01:04:30,600 --> 01:04:33,900
The next time through, we're going to have a location and we're going

1509
01:04:33,900 --> 01:04:35,200
to have a place of running sampling.

1510
01:04:35,200 --> 01:04:36,000
I set to zero.

1511
01:04:36,000 --> 01:04:38,300
So we're going to write we're going to do an invalid right the first

1512
01:04:38,300 --> 01:04:40,800
time through, which is why I said we have to handle startups,

1513
01:04:40,800 --> 01:04:42,900
especially because we're going to write for the getting a buffer to

1514
01:04:42,900 --> 01:04:43,600
where we should write.

1515
01:04:43,600 --> 01:04:47,200
But really what we should do, is only right from like the right cursor

1516
01:04:47,400 --> 01:04:47,900
up to there.

1517
01:04:47,900 --> 01:04:50,600
So, really, there's a thing that's like, if it's the first time, you

1518
01:04:50,600 --> 01:04:52,400
know, it should use the right cursor.

1519
01:04:52,400 --> 01:04:58,200
So like something like this to do if first time through, right, from

1520
01:04:58,200 --> 01:04:59,800
right Chris, or kind of a

1521
01:05:00,500 --> 01:05:04,500
Or just if it's the first time through in fact, you know, we can we -

1522
01:05:04,500 --> 01:05:05,000
let's do this.

1523
01:05:05,300 --> 01:05:08,600
So all you actually have to do is the running sample index.

1524
01:05:08,600 --> 01:05:10,900
The first time sound becomes valid.

1525
01:05:10,900 --> 01:05:11,200
Again.

1526
01:05:11,400 --> 01:05:15,800
Basically, we would say if the sound was, if sound was not valid,

1527
01:05:15,800 --> 01:05:16,100
right?

1528
01:05:16,100 --> 01:05:17,200
If the sound was not valid.

1529
01:05:17,200 --> 01:05:21,100
So we lost where we were playing somehow, which is would be on Startup

1530
01:05:21,100 --> 01:05:23,800
or at some other time when the buffer went haywire some weird thing

1531
01:05:23,800 --> 01:05:25,200
which probably should never happen.

1532
01:05:25,600 --> 01:05:29,700
But let's say it did then that running sample index where we need to

1533
01:05:29,700 --> 01:05:29,900
write.

1534
01:05:29,900 --> 01:05:31,800
It should just be the right cursor, right?

1535
01:05:31,800 --> 01:05:35,300
It should be the right cursor, like where we should write to, and we

1536
01:05:35,300 --> 01:05:36,800
just need to map that into samples.

1537
01:05:36,800 --> 01:05:40,100
So in order to do that, we just have to divide by the samples, the

1538
01:05:40,100 --> 01:05:41,600
bytes per sample, right?

1539
01:05:41,600 --> 01:05:42,900
That's that's really all we have to do.

1540
01:05:43,300 --> 01:05:44,300
So we're just going to do that.

1541
01:05:45,000 --> 01:05:49,300
And and so that actually at least we'll make it be the more correct in

1542
01:05:49,300 --> 01:05:50,300
theory on Startup.

1543
01:05:50,300 --> 01:05:53,600
I think we'll have to well again, we'll have to actually debug that.

1544
01:05:53,800 --> 01:05:54,900
So I think that's right.

1545
01:05:54,900 --> 01:05:57,000
On Startup now as well.

1546
01:05:57,000 --> 01:05:58,100
Let's go ahead and look there.

1547
01:05:58,400 --> 01:05:59,800
I take a take a look at that.

1548
01:06:00,600 --> 01:06:03,500
Special handle start up.

1549
01:06:03,500 --> 01:06:07,800
I said there it is, especially because now we're actually handling

1550
01:06:07,800 --> 01:06:08,000
that.

1551
01:06:08,000 --> 01:06:13,200
So we've got a bugs, but we are actually least trying so, okay.

1552
01:06:13,400 --> 01:06:17,000
What I'd like to do, I guess is take a quick look at what actually

1553
01:06:17,000 --> 01:06:20,100
happens when we come in here, but I want to check out this equation is

1554
01:06:20,100 --> 01:06:23,400
by inspection first, just so I can see what's wrong with it.

1555
01:06:23,600 --> 01:06:26,900
So anyway, okay, we've got our bite to lock, right?

1556
01:06:26,900 --> 01:06:28,400
And we've got our Target cursor.

1557
01:06:28,800 --> 01:06:29,800
So if the bite tool,

1558
01:06:30,000 --> 01:06:33,000
Locke is ahead of the target cursor.

1559
01:06:33,800 --> 01:06:36,900
Then that basically means I guess that we're wrapping.

1560
01:06:37,100 --> 01:06:39,600
So we're kind of going to have to write all the way around this, like

1561
01:06:39,600 --> 01:06:42,400
the buffer, if that makes sense.

1562
01:06:42,700 --> 01:06:47,900
So, our B to, right at that point are equal to, however, much we have

1563
01:06:47,900 --> 01:06:48,900
left in the buffer.

1564
01:06:49,100 --> 01:06:49,900
It seems right.

1565
01:06:50,500 --> 01:06:53,700
Plus however, far, we need to go to get to the Target cursor.

1566
01:06:53,900 --> 01:06:55,700
That seems correct.

1567
01:06:56,000 --> 01:06:59,900
Otherwise, so in the other case, if they were equal.

1568
01:07:00,000 --> 01:07:03,200
All, what would B to write bne base?

1569
01:07:03,200 --> 01:07:03,400
Right?

1570
01:07:03,400 --> 01:07:06,100
Would just be nothing and that seems right because if they're if

1571
01:07:06,100 --> 01:07:08,500
they're the same we wouldn't need to write anything.

1572
01:07:08,800 --> 01:07:11,400
And in the other case where the tart cursor is head of b 2 lakh.

1573
01:07:11,400 --> 01:07:13,800
We just need to go that far, right?

1574
01:07:14,600 --> 01:07:17,700
So that does seem that does seem about, right.

1575
01:07:18,100 --> 01:07:21,600
So, what I would like to do now, I guess is just take a look at what

1576
01:07:21,600 --> 01:07:26,300
happens the first time through and, you know, what we could do, as

1577
01:07:26,300 --> 01:07:29,600
well as we could do an output debug string here.

1578
01:07:29,900 --> 01:07:34,000
To kind of give us just a look at what's going on, just periodically,

1579
01:07:34,000 --> 01:07:34,500
right?

1580
01:07:34,500 --> 01:07:36,500
We could do a thing where we basically say.

1581
01:07:37,100 --> 01:07:43,000
Okay, let's go ahead here and just do a little

1582
01:07:45,700 --> 01:07:48,100
This way, let's just do a right.

1583
01:07:48,200 --> 01:07:51,400
That's just basically going to tell us where we wrote to where the

1584
01:07:51,400 --> 01:07:52,000
play cursor.

1585
01:07:52,000 --> 01:07:53,300
Was that sort of stuff.

1586
01:07:53,600 --> 01:07:58,400
So let's just do something like this, where we say, the play cursor,

1587
01:07:58,500 --> 01:08:07,200
whatever it was the bite to lock and the target cursor and the B to,

1588
01:08:07,200 --> 01:08:07,700
right?

1589
01:08:07,900 --> 01:08:11,200
So that just so we can have a little running log again, just a sanity

1590
01:08:11,200 --> 01:08:13,400
check and before and then the next

1591
01:08:13,500 --> 01:08:20,100
Be obviously 22 to actually go ahead and draw these out a little bit

1592
01:08:20,100 --> 01:08:23,200
better so we can see why exactly we're getting that skipping.

1593
01:08:23,200 --> 01:08:26,200
Because I'm going to, I can draw these, I could draw these rights in

1594
01:08:26,500 --> 01:08:27,000
as well.

1595
01:08:27,700 --> 01:08:29,300
So, B to, right?

1596
01:08:31,399 --> 01:08:32,600
Let's see here.

1597
01:08:33,399 --> 01:08:37,100
Target cursor, B to write B.

1598
01:08:38,300 --> 01:08:40,100
To lock go.

1599
01:08:41,100 --> 01:08:45,200
So now we'd also get a log of our audio so we can just take a look at

1600
01:08:45,200 --> 01:08:47,200
it here and kind of see what's going on.

1601
01:08:47,899 --> 01:08:50,000
So, looking at this, right?

1602
01:08:50,700 --> 01:08:55,700
This is actually kind of roughly what we would expect from a hardware

1603
01:08:55,700 --> 01:08:57,600
that wasn't reporting itself.

1604
01:08:57,600 --> 01:08:59,600
Very granular e, right?

1605
01:09:00,000 --> 01:09:03,300
Basically getting a bite to write value, that stays locked at some

1606
01:09:03,300 --> 01:09:04,700
very close values.

1607
01:09:05,800 --> 01:09:09,399
So they're either, it's either writing this much or it's writing this

1608
01:09:09,399 --> 01:09:10,000
much.

1609
01:09:10,300 --> 01:09:14,000
And so, that's exactly what we expect for something that updates at a,

1610
01:09:14,100 --> 01:09:16,200
you know, a non cycle gland granularity.

1611
01:09:16,899 --> 01:09:19,200
So that seems totally reasonable.

1612
01:09:19,700 --> 01:09:21,200
It also kind of tells us.

1613
01:09:21,800 --> 01:09:25,200
Wow, that the the granularity is not particularly good if that's

1614
01:09:25,200 --> 01:09:26,100
actually the case.

1615
01:09:27,200 --> 01:09:28,800
And we could actually see, I guess what?

1616
01:09:28,800 --> 01:09:29,899
The granularity was if

1617
01:09:30,000 --> 01:09:33,700
We wanted to one thing that we could do, which would be kind of fun.

1618
01:09:33,700 --> 01:09:38,399
I suppose is just to sit in a locked Loop and see how often that that

1619
01:09:38,399 --> 01:09:40,899
updates that would actually tell us, I guess, exactly.

1620
01:09:40,899 --> 01:09:45,399
Once we actually start things, once we actually start the direct sound

1621
01:09:45,399 --> 01:09:49,500
buffer, playing wherever that is lay.

1622
01:09:49,600 --> 01:09:50,200
There it is.

1623
01:09:50,500 --> 01:09:54,100
We could sit in the locked Loop right here and actually take a look at

1624
01:09:54,100 --> 01:09:54,400
that.

1625
01:09:54,400 --> 01:09:57,000
In fact, I may actually suggest that, that's actually what I want to

1626
01:09:57,000 --> 01:09:57,100
do.

1627
01:09:57,100 --> 01:09:59,900
So you can see what our granularity is just right off.

1628
01:10:00,000 --> 01:10:00,500
The bat.

1629
01:10:00,600 --> 01:10:01,900
So I'm going to go ahead and do that.

1630
01:10:02,100 --> 01:10:06,600
So basically right here, I'm going to go ahead and do a while loop

1631
01:10:06,600 --> 01:10:10,300
that basically just locks us up the app will never exit when I put

1632
01:10:10,300 --> 01:10:11,100
that this in here.

1633
01:10:12,000 --> 01:10:16,900
Basically, what I'm going to do is I'm just going to take a look at at

1634
01:10:16,900 --> 01:10:20,100
what that what that play cursor and what that right Chris or are

1635
01:10:20,100 --> 01:10:22,500
reporting as we go.

1636
01:10:22,500 --> 01:10:27,000
So basically I'm just going to do this call right right here in a lock

1637
01:10:27,000 --> 01:10:29,800
loop that will do nothing other than it.

1638
01:10:30,400 --> 01:10:32,200
And then I'm just going to print those out.

1639
01:10:32,200 --> 01:10:37,600
So I'm going to print out play cursor and right cursor as B.

1640
01:10:37,800 --> 01:10:40,200
So play cursor and right cursor.

1641
01:10:40,400 --> 01:10:43,900
And that'll let us see how often they even update at all, like what

1642
01:10:43,900 --> 01:10:45,100
the granularity is.

1643
01:10:45,400 --> 01:10:45,700
Yes.

1644
01:10:45,700 --> 01:10:49,900
Thank you for telling me that it is unreachable, code.

1645
01:10:50,700 --> 01:10:52,900
It certainly is unreachable code.

1646
01:10:53,000 --> 01:10:54,300
I'm well aware of that.

1647
01:10:54,800 --> 01:10:55,300
Fine.

1648
01:10:55,300 --> 01:10:59,800
Let's let's say while Global running equals.

1649
01:11:00,000 --> 01:11:02,300
Roo are you happy about that?

1650
01:11:02,600 --> 01:11:03,900
Because that make you happier.

1651
01:11:04,400 --> 01:11:04,900
Thank you.

1652
01:11:05,200 --> 01:11:05,900
All right.

1653
01:11:07,200 --> 01:11:10,400
So now oops, gotta have a carriage return in there.

1654
01:11:10,400 --> 01:11:14,400
So now we should be able to see as we go.

1655
01:11:14,900 --> 01:11:16,800
Did I miss a carriage return in the other one, too?

1656
01:11:17,300 --> 01:11:18,400
No, I didn't happen there.

1657
01:11:18,700 --> 01:11:21,500
So now, we should be able to see what the granularity here is here of

1658
01:11:21,500 --> 01:11:23,700
the sound cards reporting, right?

1659
01:11:24,000 --> 01:11:27,100
This will basically tell me how often it updates because you can see,

1660
01:11:27,100 --> 01:11:29,700
basically, it just reports the same thing over and over and over and

1661
01:11:29,700 --> 01:11:30,300
over again.

1662
01:11:30,600 --> 01:11:33,500
And when it does, go up goes up by a very specific value.

1663
01:11:33,600 --> 01:11:36,600
So, if I do this calculation, right, this is in B, remember

1664
01:11:36,700 --> 01:11:38,300
This is printing out in B.

1665
01:11:38,800 --> 01:11:41,300
So if I do this calculation, the sound card is giving me back that

1666
01:11:41,300 --> 01:11:41,800
position.

1667
01:11:41,800 --> 01:11:43,500
The previous position, it gave me back.

1668
01:11:43,700 --> 01:11:44,400
Was that one?

1669
01:11:44,900 --> 01:11:46,500
And that's 1920.

1670
01:11:48,400 --> 01:11:54,700
Well, 1920, first of all, we know we are running at four bytes per

1671
01:11:54,700 --> 01:11:55,900
sample, right?

1672
01:11:55,900 --> 01:11:58,100
That is our bytes per sample to 16 bit value.

1673
01:11:58,100 --> 01:11:59,400
So I divide that by 4.

1674
01:12:00,000 --> 01:12:01,500
Get back 480.

1675
01:12:02,800 --> 01:12:08,700
So 480 samples should roughly be so 480.

1676
01:12:08,700 --> 01:12:10,000
Samples is my value.

1677
01:12:10,000 --> 01:12:11,000
I'm going to write that down here.

1678
01:12:11,000 --> 01:12:11,600
So don't forget it.

1679
01:12:11,600 --> 01:12:12,200
480.

1680
01:12:12,200 --> 01:12:15,100
Samples is the granularity that I can hope to get back from this

1681
01:12:15,100 --> 01:12:15,500
thing.

1682
01:12:17,100 --> 01:12:20,700
And the number of samples per second is that is 48,000.

1683
01:12:21,400 --> 01:12:26,000
So assuming that we're updating at 30 frames a second that 480.

1684
01:12:27,100 --> 01:12:29,500
Should actually be three per frame.

1685
01:12:30,100 --> 01:12:35,000
So it should be enough for what we're trying to do to work.

1686
01:12:35,400 --> 01:12:36,500
That's above Nyquist.

1687
01:12:36,500 --> 01:12:43,400
Certainly, it feels like that.

1688
01:12:43,400 --> 01:12:44,300
Should be able to work.

1689
01:12:46,400 --> 01:12:48,500
I think about this so it's updating.

1690
01:12:48,500 --> 01:12:49,300
Unfortunately.

1691
01:12:49,300 --> 01:12:53,800
Sample granularity for each frame, right?

1692
01:12:53,800 --> 01:12:55,500
We have 30 frames a second.

1693
01:12:55,600 --> 01:12:58,200
So we have 1600 samples in a frame.

1694
01:12:58,200 --> 01:13:02,200
So 3200 samples is how many ahead we would be writing?

1695
01:13:02,500 --> 01:13:05,000
Is should we certainly shouldn't be getting Skips from that?

1696
01:13:05,200 --> 01:13:07,100
So we're Stephanie doing something wrong.

1697
01:13:07,600 --> 01:13:09,600
I'm just not exactly sure what it is.

1698
01:13:09,600 --> 01:13:10,600
But that's good to know.

1699
01:13:10,700 --> 01:13:14,000
I'm just going to drop a little comment in here next to this little

1700
01:13:14,000 --> 01:13:15,400
while loop that we just made.

1701
01:13:16,700 --> 01:13:20,500
So basically put an if 0 around it so it doesn't compile but then I'm

1702
01:13:20,500 --> 01:13:25,500
going to put a little thing in here that says note Casey this test the

1703
01:13:25,500 --> 01:13:32,300
audio update frequency the erasers here to play cursor, right?

1704
01:13:32,300 --> 01:13:33,500
Cursor update.

1705
01:13:33,500 --> 01:13:37,600
Frequency on the handmade hero machine.

1706
01:13:38,600 --> 01:13:43,400
It was for an 80 samples, right?

1707
01:13:44,500 --> 01:13:45,300
So, there you go.

1708
01:13:45,800 --> 01:13:49,100
So for any samples was our latency, alright, so moving them back to

1709
01:13:49,100 --> 01:13:53,800
where we were at for we're getting our nasty audio Skip and why are we

1710
01:13:53,800 --> 01:13:54,400
getting that?

1711
01:13:54,900 --> 01:13:58,200
So the play cursor was here, right?

1712
01:13:58,200 --> 01:14:01,900
Arbeit to write was quite a bit ahead of that.

1713
01:14:02,500 --> 01:14:05,100
And then the next time the play cursor was here.

1714
01:14:06,000 --> 01:14:10,200
I guess we should also probably be recording what the right cursor.

1715
01:14:10,200 --> 01:14:10,500
Was.

1716
01:14:10,500 --> 01:14:12,700
Maybe we're not far enough ahead of it.

1717
01:14:13,400 --> 01:14:14,500
That's a good question.

1718
01:14:14,700 --> 01:14:15,000
I guess.

1719
01:14:15,000 --> 01:14:15,600
I'll double-check.

1720
01:14:15,700 --> 01:14:18,700
That as well because we don't know how far ahead that right cursor

1721
01:14:18,700 --> 01:14:19,400
normally is.

1722
01:14:19,400 --> 01:14:21,700
Well, actually, you know what we did?

1723
01:14:22,000 --> 01:14:25,000
Because I just actually ran the thing that said that, but I'm going to

1724
01:14:25,000 --> 01:14:26,400
add that into our thing here.

1725
01:14:26,400 --> 01:14:28,700
So, last play cursor.

1726
01:14:28,700 --> 01:14:31,600
I'm going to put in the last right cursor as well, or actually, not

1727
01:14:31,600 --> 01:14:34,000
even the last one get current position.

1728
01:14:34,300 --> 01:14:37,900
I'll actually just go ahead and call that right before we do our

1729
01:14:37,900 --> 01:14:38,700
right.

1730
01:14:39,000 --> 01:14:42,700
And then print that out so we can essentially see exactly where we

1731
01:14:42,700 --> 01:14:44,200
ended up writing to.

1732
01:14:44,500 --> 01:14:45,600
So basically what I'm going to do.

1733
01:14:45,800 --> 01:14:46,100
Here.

1734
01:14:46,200 --> 01:14:50,400
Right is I'm just going to say okay get that.

1735
01:14:50,400 --> 01:14:52,900
Get that current position right there.

1736
01:14:54,800 --> 01:14:59,300
And this should probably, we should probably put internal build around

1737
01:14:59,300 --> 01:14:59,800
all of these.

1738
01:15:00,300 --> 01:15:03,700
Where is the build-up at here and made internal?

1739
01:15:04,200 --> 01:15:07,300
Yes, we're going to have to go through and put that around a bunch of

1740
01:15:07,300 --> 01:15:07,700
stuff.

1741
01:15:07,900 --> 01:15:10,400
But anyway, we're going to take a look at that and say, okay, give us

1742
01:15:10,400 --> 01:15:13,900
back the play cursor in the right cursor, right?

1743
01:15:13,900 --> 01:15:14,700
At this time.

1744
01:15:14,800 --> 01:15:17,700
We're going to ignore the play cursor for now, but then I'm actually

1745
01:15:17,700 --> 01:15:20,600
going to go ahead and do this print out down here.

1746
01:15:21,200 --> 01:15:25,300
So that what I can do is say, alright, when we feel that sound buffer.

1747
01:15:25,800 --> 01:15:27,800
Where did it actually think we were?

1748
01:15:27,800 --> 01:15:28,900
So this is the play cursor.

1749
01:15:28,900 --> 01:15:29,900
This was last play curse.

1750
01:15:30,900 --> 01:15:34,600
And then this is what the play cursor, and the right cursor are now,

1751
01:15:34,700 --> 01:15:35,000
right?

1752
01:15:35,000 --> 01:15:39,200
So that we can just see, did we did we actually just miss our timing

1753
01:15:39,200 --> 01:15:39,700
or something?

1754
01:15:39,700 --> 01:15:42,600
Are we writing are we not giving it enough Headroom that sort of

1755
01:15:42,600 --> 01:15:42,800
thing.

1756
01:15:42,800 --> 01:15:45,900
I'm just trying to figure out what our problem is with the skipping.

1757
01:15:45,900 --> 01:15:48,800
So I'm just trying to look at where we are writing in the buffer.

1758
01:15:48,800 --> 01:15:49,600
That makes sense.

1759
01:15:50,000 --> 01:15:52,600
So, let's take a quick look at that.

1760
01:15:53,900 --> 01:15:54,600
All right.

1761
01:15:54,700 --> 01:15:57,800
So the last play cursor was here by the time we query.

1762
01:15:57,800 --> 01:15:58,400
It's here.

1763
01:15:58,400 --> 01:15:59,600
So it has advanced one.

1764
01:15:59,900 --> 01:16:06,000
Once here is where the yeah, so that's well, that's the numbers, don't

1765
01:16:06,000 --> 01:16:06,500
lie.

1766
01:16:06,500 --> 01:16:08,700
Ladies and gentlemen, the numbers do not lie.

1767
01:16:08,700 --> 01:16:14,900
Basically the right cursor is just hella ahead of that play cursor.

1768
01:16:14,900 --> 01:16:20,500
So it looks like it looks like, we're pretty much going to have to

1769
01:16:20,500 --> 01:16:22,000
increase that audio latency.

1770
01:16:22,000 --> 01:16:23,600
It looks like the audio latency.

1771
01:16:23,700 --> 01:16:25,000
Isn't going to be enough.

1772
01:16:25,600 --> 01:16:26,500
That's unfortunate.

1773
01:16:26,500 --> 01:16:28,300
That's a lot of audio latency.

1774
01:16:28,300 --> 01:16:31,500
If you think about how far ahead that is.

1775
01:16:33,900 --> 01:16:36,300
Gosh, yeah, that's that's kind of crazy.

1776
01:16:37,000 --> 01:16:39,100
But that looks like that looks like the truth.

1777
01:16:39,100 --> 01:16:40,700
Is that, is that really right?

1778
01:16:41,300 --> 01:16:43,500
So so what's what is the Delta there?

1779
01:16:43,800 --> 01:16:46,900
What is the, what is the mandatory audio latency?

1780
01:16:46,900 --> 01:16:51,500
Basically the lowest audio latency would ever hope to get coming out

1781
01:16:51,500 --> 01:16:53,500
of this coming out of direct sound here.

1782
01:16:54,200 --> 01:16:54,900
What is it?

1783
01:16:54,900 --> 01:16:56,000
5920?

1784
01:16:56,400 --> 01:16:57,400
Holy cow.

1785
01:16:57,400 --> 01:16:58,300
Look at that.

1786
01:16:58,500 --> 01:17:00,000
Look at that value.

1787
01:17:03,100 --> 01:17:04,000
Oh, man.

1788
01:17:05,600 --> 01:17:06,400
All right.

1789
01:17:06,700 --> 01:17:13,600
Well, alright, that's so that's the number of samples, right?

1790
01:17:13,700 --> 01:17:16,500
And that's like several frames, right?

1791
01:17:16,500 --> 01:17:19,500
So how much of a second is that?

1792
01:17:19,500 --> 01:17:21,900
If I do the Divide paste?

1793
01:17:23,200 --> 01:17:24,100
That's oops.

1794
01:17:24,200 --> 01:17:24,900
Did that wrong?

1795
01:17:25,200 --> 01:17:25,800
Let me do that one.

1796
01:17:25,800 --> 01:17:26,300
More time.

1797
01:17:26,300 --> 01:17:30,200
We need, I need some better than this calculator for doing this stuff.

1798
01:17:30,700 --> 01:17:34,300
So that's the number of bytes so divided by 4.

1799
01:17:34,300 --> 01:17:40,500
That's the number of samples and so basically 1440 so 1440.

1800
01:17:40,800 --> 01:17:42,900
Wow, so it's actually gosh.

1801
01:17:43,200 --> 01:17:46,700
So it's actually asking for 30 frames a second ahead of latency just

1802
01:17:46,700 --> 01:17:49,100
to begin with, so I'm going to have to be even more than that.

1803
01:17:49,900 --> 01:17:51,100
Yikes, so I don't know.

1804
01:17:51,100 --> 01:17:53,000
I'm maybe I'm misreading these numbers.

1805
01:17:53,200 --> 01:17:56,300
Maybe it's just, you know, like I said, I'm it's always a bit of a

1806
01:17:56,300 --> 01:17:58,400
rush here when I'm doing stuff on a livestream.

1807
01:17:59,000 --> 01:17:59,800
So it's a little bit tough.

1808
01:18:00,000 --> 01:18:00,300
Me.

1809
01:18:00,800 --> 01:18:03,000
I will say that but that that looks to me.

1810
01:18:03,000 --> 01:18:06,500
Like, basically what's happening is, we need even more latency above

1811
01:18:06,500 --> 01:18:07,900
what we were already specifying.

1812
01:18:08,100 --> 01:18:09,200
I could be wrong about that.

1813
01:18:09,200 --> 01:18:12,600
So we'll just go a little Hog Wild here and see if that's true.

1814
01:18:12,700 --> 01:18:16,000
If I say four frames of audio latency, for example, what do I get?

1815
01:18:17,700 --> 01:18:19,500
Well, that's scary people.

1816
01:18:20,000 --> 01:18:21,600
That is scary.

1817
01:18:24,000 --> 01:18:26,700
Well, I'm glad we stuck with it because we know the piece of

1818
01:18:26,700 --> 01:18:29,900
information now that we needed to know which is that basically we are

1819
01:18:29,900 --> 01:18:32,400
talking about something that's going to force to write pretty far

1820
01:18:32,400 --> 01:18:32,800
ahead.

1821
01:18:32,800 --> 01:18:35,500
And we do have a very narrow range there.

1822
01:18:36,000 --> 01:18:36,800
Maybe we should look.

1823
01:18:36,800 --> 01:18:38,500
We should probably look at the right cursor.

1824
01:18:38,700 --> 01:18:39,400
First.

1825
01:18:39,400 --> 01:18:43,500
Look at how far ahead it is normally and adjust our latency to

1826
01:18:43,500 --> 01:18:44,800
compensate for that.

1827
01:18:46,900 --> 01:18:48,300
But yeah, there's not a lot more.

1828
01:18:48,800 --> 01:18:50,000
We're going to be able to do.

1829
01:18:50,000 --> 01:18:54,500
It looks like two frames of latency is just not quite enough to make

1830
01:18:54,500 --> 01:18:55,000
it work.

1831
01:18:55,000 --> 01:18:59,400
So we'll have to yeah, it's just not quite enough and it catches up to

1832
01:18:59,400 --> 01:18:59,700
us.

1833
01:19:01,000 --> 01:19:02,000
All right, well,

1834
01:19:06,000 --> 01:19:07,400
Not what I would have hoped for.

1835
01:19:07,500 --> 01:19:08,800
That's a lot of latency.

1836
01:19:09,100 --> 01:19:12,300
That's a lot of latency, but that's just, we're going to have to live

1837
01:19:12,300 --> 01:19:13,100
with for now.

1838
01:19:14,300 --> 01:19:16,600
Yeah, that's just quite a bit that it's basically mandating there.

1839
01:19:19,900 --> 01:19:24,200
I, I guess that'll be interesting thing when it comes time to kind of

1840
01:19:24,200 --> 01:19:25,600
tighten things up for ship.

1841
01:19:25,900 --> 01:19:29,700
Maybe we Implement X audio, and we see if we get lower latency out of

1842
01:19:29,700 --> 01:19:30,100
it.

1843
01:19:30,600 --> 01:19:33,700
Or we hope that we do anyway, I don't know.

1844
01:19:34,500 --> 01:19:36,500
But I would say that's about probably it for now.

1845
01:19:36,500 --> 01:19:37,400
We're almost out of time.

1846
01:19:37,400 --> 01:19:40,700
I would like to take 10 minutes of questions, if we can, so I don't

1847
01:19:40,700 --> 01:19:44,100
want to go any longer certainly, but we would probably have to still

1848
01:19:44,100 --> 01:19:46,600
tighten this up a little bit tomorrow, because I kind of slammed all

1849
01:19:46,600 --> 01:19:47,000
that in here.

1850
01:19:47,000 --> 01:19:49,500
And there's a bunch of loose ends like all these printouts.

1851
01:19:49,700 --> 01:19:50,100
The stuff.

1852
01:19:50,100 --> 01:19:53,200
So we're going to have to wrap all of that stuff up as well.

1853
01:19:53,200 --> 01:19:55,600
So we're not really done with what we want to do today.

1854
01:19:55,600 --> 01:19:59,800
We're pretty darn close though, but we're not quite done because what

1855
01:19:59,800 --> 01:20:03,800
I want to do here is actually draw where we're writing to so that we

1856
01:20:03,800 --> 01:20:06,200
can look a little bit more what's going on.

1857
01:20:06,200 --> 01:20:11,900
So I'm going to say to do draw where we're writing our sound because

1858
01:20:11,900 --> 01:20:13,100
that's where I'd hope to get to it.

1859
01:20:13,100 --> 01:20:16,200
Hope you get it to playing smoothly and drawing it out so we can see.

1860
01:20:17,300 --> 01:20:19,500
And so we'll have to do that tomorrow, which means we

1861
01:20:19,600 --> 01:20:23,100
might spill over into Monday or maybe we sneak in a secret week and

1862
01:20:23,100 --> 01:20:26,100
stream, you know, you can you can work over time once in a while.

1863
01:20:26,700 --> 01:20:27,300
So we'll see.

1864
01:20:27,500 --> 01:20:27,900
All right.

1865
01:20:27,900 --> 01:20:32,400
So with that stated, let's actually still do 10 minutes of questions.

1866
01:20:32,700 --> 01:20:36,600
If you could, please make sure that your question includes senior

1867
01:20:36,600 --> 01:20:39,900
ettore in it somewhere so that I will see it.

1868
01:20:39,900 --> 01:20:42,600
I have a little thing that looks for see meritorious so that it cuts

1869
01:20:42,600 --> 01:20:47,400
out talk between people and basically if you could please keep the

1870
01:20:47,400 --> 01:20:49,500
questions, two things we did tonight.

1871
01:20:49,600 --> 01:20:50,800
Or in a previous night.

1872
01:20:51,000 --> 01:20:52,300
Let's not talk about stuff.

1873
01:20:52,300 --> 01:20:54,900
We're going to do in the game later because we will do that when we

1874
01:20:54,900 --> 01:20:55,600
actually get there.

1875
01:20:56,100 --> 01:20:59,800
And we've obviously got tons of stuff that we've already done so far.

1876
01:21:00,000 --> 01:21:01,500
So, let's keep the questions to that.

1877
01:21:09,000 --> 01:21:09,600
All right.

1878
01:21:09,600 --> 01:21:10,600
Let's see.

1879
01:21:14,100 --> 01:21:16,100
Are you set up to use?

1880
01:21:16,100 --> 01:21:17,600
ASI sound drivers?

1881
01:21:18,200 --> 01:21:20,800
I'm not set up to do anything special on this machine.

1882
01:21:21,000 --> 01:21:22,300
It's as far as I know.

1883
01:21:22,300 --> 01:21:23,300
Anyway, at least I don't think so.

1884
01:21:23,300 --> 01:21:26,800
It's just a default install of a default sound card.

1885
01:21:27,400 --> 01:21:32,000
So, you know, I had hoped that you'd think that by the time you get to

1886
01:21:32,000 --> 01:21:34,200
Windows 7, right?

1887
01:21:35,500 --> 01:21:38,500
You would have mandated low audio latency to people and you'd have

1888
01:21:38,500 --> 01:21:40,200
like the pipe out to the card.

1889
01:21:40,200 --> 01:21:42,100
Would be good and whatever but you know,

1890
01:21:44,400 --> 01:21:47,400
It still requires all this special Finnick finesse, I guess to do that

1891
01:21:47,400 --> 01:21:51,000
sort of stuff and or maybe they don't support direct sound properly

1892
01:21:51,000 --> 01:21:51,400
anymore.

1893
01:21:51,400 --> 01:21:54,200
And so if we switch to X audio or something, it would, I don't know.

1894
01:21:54,200 --> 01:21:55,800
We'll find that out down the line.

1895
01:21:55,800 --> 01:21:57,700
But yeah, it's kind of sad.

1896
01:21:57,700 --> 01:22:00,100
It should just work right and there's no reason why this sort of thing

1897
01:22:00,100 --> 01:22:02,600
shouldn't just work, so it's kind of unfortunate.

1898
01:22:06,600 --> 01:22:07,900
Is your audio pointer code?

1899
01:22:07,900 --> 01:22:08,500
Calculating.

1900
01:22:08,500 --> 01:22:09,900
Independently of the variable?

1901
01:22:09,900 --> 01:22:11,800
Fixed visual frames per second.

1902
01:22:12,000 --> 01:22:13,000
Yes, essentially.

1903
01:22:13,000 --> 01:22:13,600
It is.

1904
01:22:14,200 --> 01:22:17,500
So basically, I have those two decoupled at the moment.

1905
01:22:17,600 --> 01:22:21,100
Basically, what's happening is the audio is just looking.

1906
01:22:21,300 --> 01:22:25,400
So the reason that I have to do that is because the audios clock is

1907
01:22:25,400 --> 01:22:29,000
not guaranteed to synchronize with the computers clock, right?

1908
01:22:29,100 --> 01:22:33,000
There's no reason why the audio output clock has to actually match the

1909
01:22:33,000 --> 01:22:33,500
wall clock.

1910
01:22:33,500 --> 01:22:35,400
They could diverge and if they diverge even

1911
01:22:35,600 --> 01:22:39,200
Little bit, then over time, that could lead to a big error that would

1912
01:22:39,200 --> 01:22:41,700
cause our audio to be running to the wrong place, right?

1913
01:22:44,200 --> 01:22:49,500
So what I need to do is I manage my own frame rate here.

1914
01:22:49,500 --> 01:22:50,500
Right?

1915
01:22:50,500 --> 01:22:53,600
I manage my own video frame rate.

1916
01:22:53,600 --> 01:22:57,500
And then what I do is I just look at where the sound output is when we

1917
01:22:57,500 --> 01:22:58,900
flip and I go.

1918
01:22:58,900 --> 01:23:01,600
Okay, that's where we were when we flipped.

1919
01:23:01,600 --> 01:23:06,400
So ideally, we want to write to a particular frame boundary.

1920
01:23:06,400 --> 01:23:08,900
We need to look and frames in the future.

1921
01:23:08,900 --> 01:23:11,500
And right to wear a frame, boundary will be in the future.

1922
01:23:11,500 --> 01:23:14,100
That is the earliest frame boundary we

1923
01:23:14,200 --> 01:23:20,400
Right to write that that is past the latency of those past, the audio

1924
01:23:20,400 --> 01:23:21,800
latency of the sound card.

1925
01:23:22,100 --> 01:23:24,500
Now, we could go a little further of this and right.

1926
01:23:25,100 --> 01:23:29,000
Just only however, much the audio latency of the soccer was and not

1927
01:23:29,000 --> 01:23:32,700
truncate to a frame boundary, but that would basically pass that

1928
01:23:33,000 --> 01:23:38,100
burden onto the game code to have to think about its audio output

1929
01:23:38,100 --> 01:23:40,400
being uncentered from a frame.

1930
01:23:41,900 --> 01:23:42,800
Should we do that?

1931
01:23:42,800 --> 01:23:43,800
Should we not do that?

1932
01:23:43,800 --> 01:23:44,500
I don't know.

1933
01:23:44,500 --> 01:23:45,200
I mean

1934
01:23:47,100 --> 01:23:49,800
I think you kind of want to optimize more for the well working

1935
01:23:49,800 --> 01:23:52,700
Hardware case where stuff goes out, the HDMI kind of are synchronized

1936
01:23:52,700 --> 01:23:58,000
and maybe, you know, penalize the 0s in some sense for being crappy

1937
01:23:58,600 --> 01:23:59,800
about that sink.

1938
01:24:00,100 --> 01:24:00,600
I don't know.

1939
01:24:00,600 --> 01:24:07,700
I'm disinclined to complicate the game code in the service of this but

1940
01:24:07,700 --> 01:24:11,700
you know, it's again it all depends on what your aim is if you want to

1941
01:24:11,700 --> 01:24:17,000
get that extra, you know, Ms or two of latency out because you're an

1942
01:24:17,000 --> 01:24:21,100
audio game like, for example, a beat matching game, you make different

1943
01:24:21,100 --> 01:24:21,700
trade-offs.

1944
01:24:21,900 --> 01:24:24,600
And so I'm certainly not going to say that one way is, right?

1945
01:24:24,600 --> 01:24:27,300
Or one way is wrong because that's totally not true.

1946
01:24:27,900 --> 01:24:29,800
But I think for this game, I'd say,

1947
01:24:30,000 --> 01:24:32,800
Let's keep it on frame boundaries and that's that.

1948
01:24:35,700 --> 01:24:38,500
What kind of what sort of problems can high audio latency introduce?

1949
01:24:38,500 --> 01:24:41,600
Well, they don't really introduce problems for say they just make the

1950
01:24:41,600 --> 01:24:43,500
experience feel a little less tight.

1951
01:24:43,600 --> 01:24:46,900
You know, ideally I'd like one frame of audio latency so that

1952
01:24:46,900 --> 01:24:49,800
basically the visuals are almost exactly in sync with the Audio.

1953
01:24:50,400 --> 01:24:54,600
I mean perfect in best of all possible worlds there.

1954
01:24:54,600 --> 01:24:55,100
Exactly.

1955
01:24:55,100 --> 01:25:00,500
Synced, right, but that's not, I guess realistic in this particular

1956
01:25:00,500 --> 01:25:00,800
case.

1957
01:25:00,800 --> 01:25:04,800
Now if we wanted to we could trade visual latency for audio.

1958
01:25:05,000 --> 01:25:05,500
See, right.

1959
01:25:05,600 --> 01:25:08,800
The way that we do that is we render frames and save them.

1960
01:25:08,800 --> 01:25:09,900
We'd buffer them up.

1961
01:25:09,900 --> 01:25:10,500
Right?

1962
01:25:10,700 --> 01:25:15,500
So, we'd render like three frames and we'd wait to flip the first

1963
01:25:15,500 --> 01:25:18,600
frame until we knew the audio had caught up, right?

1964
01:25:18,600 --> 01:25:22,600
And so, we'd always sort of be flipping behind where we knew the audio

1965
01:25:22,600 --> 01:25:25,900
was, but that would introduce control lag into the video.

1966
01:25:25,900 --> 01:25:28,100
And that seems like a really bad trade off.

1967
01:25:28,300 --> 01:25:29,400
So we don't want to do that.

1968
01:25:29,400 --> 01:25:29,900
Right?

1969
01:25:30,700 --> 01:25:33,400
So, we're kind of at a situation where we don't have any choice, but

1970
01:25:33,400 --> 01:25:34,700
to take the audio lag.

1971
01:25:35,500 --> 01:25:38,800
Because that's just what what's going to happen and what that means is

1972
01:25:38,800 --> 01:25:42,200
that you know, you push the button and ideally, you know, if you shoot

1973
01:25:42,200 --> 01:25:44,900
or something you want the shot sound to happen.

1974
01:25:45,100 --> 01:25:45,600
Exactly.

1975
01:25:45,600 --> 01:25:49,600
As you push the button and audio latency the higher.

1976
01:25:49,600 --> 01:25:52,200
The audio latency, the more lag there is between when you push that

1977
01:25:52,200 --> 01:25:55,800
button and when you hear the result, now people are actually very

1978
01:25:55,800 --> 01:25:57,200
forgiving about this sort of thing.

1979
01:25:57,300 --> 01:26:00,000
They sort of interpret things that's happening.

1980
01:26:00,800 --> 01:26:03,400
They interpret sounds is happening synchronized to events.

1981
01:26:03,400 --> 01:26:04,500
Even if they aren't.

1982
01:26:04,500 --> 01:26:04,800
So if they

1983
01:26:05,000 --> 01:26:07,300
See a shot and they hear a shot sound.

1984
01:26:07,300 --> 01:26:10,200
Even if they're very far apart, people actually think they're

1985
01:26:10,200 --> 01:26:11,300
happening at the same time.

1986
01:26:11,900 --> 01:26:15,500
So as long as your game doesn't rely on them, hearing the sound and

1987
01:26:15,500 --> 01:26:17,700
reacting immediately to it like a beat matching game.

1988
01:26:17,700 --> 01:26:20,100
Does your probably actually.

1989
01:26:20,100 --> 01:26:27,100
Okay, but even though the brain accounts for it, I still do feel and

1990
01:26:27,100 --> 01:26:29,700
you know, this is subjective certainly, but I still do feel that

1991
01:26:29,800 --> 01:26:34,700
narrowing, that audio latency does make it feel

1992
01:26:34,900 --> 01:26:37,600
Nicer to play, like taking some of that slop out.

1993
01:26:37,600 --> 01:26:39,200
Just, it feels more visceral.

1994
01:26:39,300 --> 01:26:42,000
When your brain is doing less of that correlation.

1995
01:26:42,000 --> 01:26:45,100
You kind of are sort of aware of it, when it gets above a certain

1996
01:26:45,100 --> 01:26:45,700
threshold.

1997
01:26:45,700 --> 01:26:47,100
Now, where is that threshold?

1998
01:26:47,200 --> 01:26:50,100
Your that threshold maybe like 100 milliseconds for a lot of people,

1999
01:26:50,100 --> 01:26:50,600
right?

2000
01:26:50,600 --> 01:26:51,900
Which we are well within.

2001
01:26:54,300 --> 01:26:59,300
But, you know, if that if that's at 30 milliseconds for most people,

2002
01:26:59,300 --> 01:26:59,800
let's say,

2003
01:27:00,200 --> 01:27:02,000
Then we are not even close.

2004
01:27:02,400 --> 01:27:04,300
We are going to sound a little laggy to them.

2005
01:27:04,300 --> 01:27:06,000
And so that's why it's just disappointing.

2006
01:27:06,000 --> 01:27:09,700
I was hoping that the hardware Windows to Hardware pipeline would have

2007
01:27:09,700 --> 01:27:10,000
been better.

2008
01:27:10,000 --> 01:27:10,800
There it is.

2009
01:27:18,600 --> 01:27:21,500
Could you use that Anonymous Union, struck trick to access the members

2010
01:27:21,500 --> 01:27:23,800
of bitmap info header structure more easily.

2011
01:27:24,000 --> 01:27:27,000
Not really, because there's nothing you can really do.

2012
01:27:28,500 --> 01:27:29,000
So.

2013
01:27:29,100 --> 01:27:32,600
So what the person was asking, was we basically have this and the

2014
01:27:32,600 --> 01:27:36,000
question was, if we want to reach in here and access something inside

2015
01:27:36,000 --> 01:27:36,700
the info.

2016
01:27:37,100 --> 01:27:38,500
Could I use the anonymous trick?

2017
01:27:38,500 --> 01:27:39,000
I did.

2018
01:27:39,400 --> 01:27:41,000
Hopefully, you remember here.

2019
01:27:41,000 --> 01:27:45,900
I use that Anonymous struct Rick out in here to basically push these

2020
01:27:45,900 --> 01:27:47,100
names up into

2021
01:27:47,600 --> 01:27:50,400
This struct even though they're kind of an interior structure and the

2022
01:27:50,400 --> 01:27:51,900
answer is not really.

2023
01:27:52,500 --> 01:27:54,600
Basically, in order to do that.

2024
01:27:54,600 --> 01:27:57,200
I would have to do something like this, right?

2025
01:27:59,700 --> 01:28:02,100
I would have to basically make this a descendant of it.

2026
01:28:02,400 --> 01:28:05,900
You can't insert to the best of my knowledge.

2027
01:28:05,900 --> 01:28:10,100
Anyway, you can't insert a struct anonymously into another struct in

2028
01:28:10,100 --> 01:28:11,100
standard C.

2029
01:28:11,400 --> 01:28:16,200
I think there's an extension that lets you do it, but I don't know how

2030
01:28:16,200 --> 01:28:17,500
well supported that extension is.

2031
01:28:21,600 --> 01:28:24,600
So, I'm sorry, I guess, I don't know of any way to do it.

2032
01:28:24,600 --> 01:28:29,000
No, but there might be, well, I should say, I am 100% positive.

2033
01:28:29,000 --> 01:28:31,500
There is an extension that can do it, but I don't know which compiler

2034
01:28:31,500 --> 01:28:32,200
support it.

2035
01:28:32,200 --> 01:28:34,700
Whether there is a standard way to do it that supported across many

2036
01:28:34,700 --> 01:28:36,300
compilers that I don't know.

2037
01:28:43,900 --> 01:28:45,300
Let's see.

2038
01:28:48,000 --> 01:28:50,700
How do you find the level sound libraries to work with, you choose

2039
01:28:50,700 --> 01:28:51,400
direct sound.

2040
01:28:51,400 --> 01:28:54,900
How did you make a meaningful choice of that over X body or something

2041
01:28:54,900 --> 01:28:55,200
else?

2042
01:28:55,300 --> 01:28:58,500
The reason is because it's the only thing that's that was that

2043
01:28:58,500 --> 01:29:01,600
supported, by default, besides wave out on XP.

2044
01:29:01,900 --> 01:29:02,700
As far as I know.

2045
01:29:04,900 --> 01:29:07,500
I can look and see whether there's another one that supported by

2046
01:29:07,500 --> 01:29:11,100
default on XP, but I wanted something again.

2047
01:29:11,100 --> 01:29:12,500
XP was our compatibility Target.

2048
01:29:12,500 --> 01:29:13,300
We ran out of

2049
01:29:13,400 --> 01:29:16,500
And everything worked just fine and I wanted to make sure that that

2050
01:29:16,500 --> 01:29:17,600
continues to be the case.

2051
01:29:17,600 --> 01:29:21,700
So I'm disinclined to switch to something else.

2052
01:29:21,700 --> 01:29:23,000
At least for the Prototype player.

2053
01:29:23,300 --> 01:29:27,000
What we will do perhaps in future ones is we will check to see if x.

2054
01:29:27,000 --> 01:29:29,200
Audio is there and try it.

2055
01:29:29,400 --> 01:29:29,900
Now.

2056
01:29:29,900 --> 01:29:35,300
I think one thing that I would point out is I suspect it would not

2057
01:29:35,300 --> 01:29:38,500
surprise me in the least to find that the latency is no better with X

2058
01:29:38,500 --> 01:29:38,900
audio.

2059
01:29:39,300 --> 01:29:42,400
So I know a lot of people are always excited about like oh, yeah.

2060
01:29:42,400 --> 01:29:43,200
It's on in the latency.

2061
01:29:43,400 --> 01:29:45,300
Is packages using direct sound, but they don't actually know because

2062
01:29:45,300 --> 01:29:47,100
they probably have never tested it on this particular card or

2063
01:29:47,100 --> 01:29:47,600
whatever.

2064
01:29:47,900 --> 01:29:49,800
And so a lot of times people get excited about something like you

2065
01:29:49,800 --> 01:29:52,600
should be using this API or you should be using that API, but that

2066
01:29:52,600 --> 01:29:55,200
doesn't actually come from experience and they're just kind of

2067
01:29:55,200 --> 01:29:56,500
speculating, right?

2068
01:29:56,900 --> 01:29:59,700
And so, what I would emphasize here is we don't actually even know if

2069
01:29:59,700 --> 01:29:59,900
that

2070
01:30:00,000 --> 01:30:04,300
Proof things, we will test later whether that will improve our audio

2071
01:30:04,300 --> 01:30:04,900
latency.

2072
01:30:06,000 --> 01:30:08,600
But it's entirely possible that this machine's audio latency just is

2073
01:30:08,600 --> 01:30:10,500
what that is and we're not going to get any better.

2074
01:30:11,000 --> 01:30:13,800
So we'll have to actually see in practice if that's the case.

2075
01:30:13,800 --> 01:30:17,500
So I wouldn't get too excited about X audio or wdm or any of the other

2076
01:30:17,500 --> 01:30:19,600
Technologies because it may be that they're all roughly the same

2077
01:30:19,600 --> 01:30:24,500
latency and it's the sound chip that is actually causing the latency

2078
01:30:25,000 --> 01:30:27,600
and it's driver is just latent right?

2079
01:30:27,800 --> 01:30:29,300
And that could very well be the case.

2080
01:30:29,300 --> 01:30:32,400
So I would hold off on that kind of speculation until we actually have

2081
01:30:32,400 --> 01:30:35,100
some data because otherwise it's just pure guesswork.

2082
01:30:35,700 --> 01:30:39,200
I think that some or another API will be better.

2083
01:30:51,200 --> 01:30:52,700
Let's see.

2084
01:30:55,600 --> 01:30:56,900
Let's see here.

2085
01:30:58,800 --> 01:31:00,900
I'm not seeing.

2086
01:31:02,600 --> 01:31:06,000
Any other questions?

2087
01:31:07,800 --> 01:31:10,200
That are about the audio stuff.

2088
01:31:12,800 --> 01:31:13,100
Let's see.

2089
01:31:13,100 --> 01:31:13,400
Okay.

2090
01:31:13,400 --> 01:31:14,800
Here's some, yeah, sorry.

2091
01:31:14,800 --> 01:31:16,100
Okay, miss this part right here.

2092
01:31:22,600 --> 01:31:24,700
I don't understand what this means.

2093
01:31:24,700 --> 01:31:26,700
Someone said the sound is looped.

2094
01:31:26,700 --> 01:31:30,100
Begin Loop is at end Loop.

2095
01:31:30,100 --> 01:31:33,600
Causing mega loop simply space the code and this will help.

2096
01:31:34,200 --> 01:31:38,000
I don't think I understand that.

2097
01:31:39,300 --> 01:31:44,400
So you may have to repost that direct sound docs say don't write

2098
01:31:44,400 --> 01:31:45,300
before right cursor.

2099
01:31:45,300 --> 01:31:46,100
Why are we safe?

2100
01:31:46,100 --> 01:31:47,500
Ignoring it suggestion.

2101
01:31:47,500 --> 01:31:50,400
Don't overlap play and right vertical lines, use half screen for each.

2102
01:31:50,400 --> 01:31:51,900
That is a good suggestion, by the way.

2103
01:31:52,700 --> 01:31:55,200
Well, we're not really, probably going to ignore the right cursor.

2104
01:31:55,200 --> 01:31:58,900
Like I said, we kind of, we will probably use it in the future.

2105
01:31:58,900 --> 01:32:01,300
But what you have to understand is the right cursor.

2106
01:32:01,300 --> 01:32:02,800
Actually isn't relevant to us.

2107
01:32:03,000 --> 01:32:03,700
The right cursor.

2108
01:32:03,700 --> 01:32:06,300
Is just something that says don't right before this.

2109
01:32:06,600 --> 01:32:07,000
Now.

2110
01:32:07,000 --> 01:32:10,000
What we actually care about is where the play cursor is, right?

2111
01:32:10,500 --> 01:32:12,900
And since the the play cursor on the right curse are actually

2112
01:32:12,900 --> 01:32:15,800
technically usually locked but they're not really it's under no

2113
01:32:15,800 --> 01:32:17,000
obligation to lock them.

2114
01:32:17,400 --> 01:32:19,600
So we want to do is look at the play cursor and say ideally what you

2115
01:32:19,600 --> 01:32:22,300
want to do is write this far in front of the play cursor, right?

2116
01:32:22,500 --> 01:32:26,200
So, all we really want to do with the right cursor, is just add a

2117
01:32:26,200 --> 01:32:30,100
little bit of code that says, make sure if for some reason, the right

2118
01:32:30,100 --> 01:32:34,800
cursor is actually further out than that by on average like will look

2119
01:32:34,800 --> 01:32:36,800
at where the right Chris, are how far apart the right?

2120
01:32:36,800 --> 01:32:38,900
Kristen plugins are, are on average.

2121
01:32:38,900 --> 01:32:42,500
However, far the right cursor, is a way if that is more than what our

2122
01:32:42,500 --> 01:32:45,600
expected latency writing is then change our expected late written,

2123
01:32:45,600 --> 01:32:50,200
latency writing to encapsulate that, but we don't actually want to use

2124
01:32:50,200 --> 01:32:52,300
the right cursor because the right curse is actually irrelevant.

2125
01:32:52,400 --> 01:32:52,900
Avant.

2126
01:32:52,900 --> 01:32:56,300
It's just something that says your latency better be more than this,

2127
01:32:56,500 --> 01:32:58,300
but it doesn't actually help us.

2128
01:32:58,300 --> 01:32:59,800
It doesn't actually give us information.

2129
01:33:00,000 --> 01:33:03,200
Where the sound is playing, which is what we actually care about for

2130
01:33:03,200 --> 01:33:05,000
synchronization, if that makes sense.

2131
01:33:10,800 --> 01:33:13,200
Do you think splitting related functionality like the sound into their

2132
01:33:13,200 --> 01:33:18,600
own files would make it easier to conceptualize and debug not really

2133
01:33:18,900 --> 01:33:19,400
impact in?

2134
01:33:19,400 --> 01:33:20,300
Probably make it worse.

2135
01:33:20,900 --> 01:33:25,400
The reason I say that is because if you take a look at what happens in

2136
01:33:25,400 --> 01:33:29,000
these Loops, they tend to get very interrelated very quickly.

2137
01:33:29,400 --> 01:33:35,500
So for example, we know that we need to take our our sound check.

2138
01:33:35,500 --> 01:33:37,400
We need our sound check to happen, right?

2139
01:33:37,400 --> 01:33:38,600
When the flip happens.

2140
01:33:38,800 --> 01:33:40,300
And so this is like, coupled code.

2141
01:33:40,600 --> 01:33:43,600
And if I was to pull all this out into other code, that wouldn't be

2142
01:33:43,600 --> 01:33:44,200
true anymore.

2143
01:33:44,200 --> 01:33:47,400
Now, if we want to put it in a separate file and make calls a bunch of

2144
01:33:47,400 --> 01:33:49,300
calls in here, then that's fine.

2145
01:33:49,600 --> 01:33:51,600
But I'm not sure that actually buys us very much.

2146
01:33:51,600 --> 01:33:54,100
It might actually make it harder to read because you have to guess

2147
01:33:54,100 --> 01:33:55,300
what that function is doing.

2148
01:33:55,800 --> 01:33:58,500
So, no, I don't think it would improve it very much, pulling it out,

2149
01:33:58,500 --> 01:33:59,600
into a separate file.

2150
01:33:59,700 --> 01:34:01,800
I think that would just make more work, but I'm not sure.

2151
01:34:03,300 --> 01:34:04,300
It's kind of personal preference.

2152
01:34:04,300 --> 01:34:06,400
So if you want to put it in a separate file, that's, you know, that's

2153
01:34:06,400 --> 01:34:07,600
how I see it up to you.

2154
01:34:10,300 --> 01:34:12,100
If we use the play cursor as offset.

2155
01:34:12,100 --> 01:34:14,800
Could we not overwrite previously written audio data?

2156
01:34:15,600 --> 01:34:20,900
Well again, maybe I need to draw a diagram because this seems to be

2157
01:34:21,100 --> 01:34:22,000
confusing people.

2158
01:34:22,000 --> 01:34:25,500
So I'm just going to go ahead and draw it one more time.

2159
01:34:26,000 --> 01:34:29,900
Just so we can kind of so that we can kind of get a feel for it.

2160
01:34:29,900 --> 01:34:30,200
Here.

2161
01:34:30,900 --> 01:34:32,500
I don't know what I'm going to use to draw it.

2162
01:34:33,000 --> 01:34:35,000
I guess I could use smooth draw again.

2163
01:34:35,000 --> 01:34:37,700
But I think I'm just going to go for the good old Microsoft Paint

2164
01:34:38,200 --> 01:34:39,900
painting tool of Champions.

2165
01:34:40,500 --> 01:34:41,200
So anyway.

2166
01:34:42,900 --> 01:34:45,600
Just to be 100% clear about what's happening here.

2167
01:34:46,100 --> 01:34:47,200
We're going to get something.

2168
01:34:47,900 --> 01:34:50,500
Well, okay, let's do our frame ticks again.

2169
01:34:50,500 --> 01:34:51,800
So here's our frame ticks.

2170
01:34:52,100 --> 01:34:54,200
These are happening at 30 frames a second.

2171
01:34:54,400 --> 01:34:54,900
Right?

2172
01:34:55,200 --> 01:34:58,800
So basically each one of these is going to be 33 milliseconds

2173
01:34:58,900 --> 01:34:59,700
approximately, right.

2174
01:34:59,700 --> 01:35:01,300
Thirty-three point three, three, three bar.

2175
01:35:02,200 --> 01:35:05,100
So what happens is we're going to query direct sound and it's going to

2176
01:35:05,100 --> 01:35:07,900
give us back something that looks like this.

2177
01:35:08,000 --> 01:35:08,900
It's going to give us back.

2178
01:35:08,900 --> 01:35:12,500
Something that says the play cursor is here and the right curse.

2179
01:35:12,800 --> 01:35:14,100
Is here, right?

2180
01:35:14,100 --> 01:35:17,400
And we now know that the difference between these actually itself is

2181
01:35:17,400 --> 01:35:19,700
like 33 milliseconds, if I remember correctly, right?

2182
01:35:19,700 --> 01:35:20,900
That's what we computed.

2183
01:35:21,900 --> 01:35:27,200
So, given that, this is true right to me.

2184
01:35:28,900 --> 01:35:33,000
What we want to know is we want to know where ever the play cursor is,

2185
01:35:33,700 --> 01:35:34,300
right?

2186
01:35:34,700 --> 01:35:37,700
We want to know where we can safely right to?

2187
01:35:39,000 --> 01:35:39,900
That's a frame.

2188
01:35:39,900 --> 01:35:41,300
You know, where what?

2189
01:35:41,300 --> 01:35:42,300
What frame boundary.

2190
01:35:42,300 --> 01:35:47,300
We can start writing our audio to where is that in our

2191
01:35:49,800 --> 01:35:50,600
How should I explain this?

2192
01:35:51,600 --> 01:35:53,300
Which of these frame boundaries?

2193
01:35:54,100 --> 01:35:59,500
Can we safely right to such that the right cursor, if you will won't

2194
01:35:59,500 --> 01:35:59,800
catch.

2195
01:36:00,000 --> 01:36:05,600
Up to there by the time we actually output it and we want to be as

2196
01:36:05,600 --> 01:36:09,200
close as possible to the fact that when we actually do the page.

2197
01:36:09,200 --> 01:36:13,200
Flip the play cursor will hit that when we do the play, the page flip.

2198
01:36:13,200 --> 01:36:16,600
Now what we've basically determined is that that's impossible because

2199
01:36:16,600 --> 01:36:20,200
our frame rate is actually roughly the same as our audio latency.

2200
01:36:20,400 --> 01:36:24,700
So we're basically in a really bad position where we can't pop.

2201
01:36:24,700 --> 01:36:27,900
It would just be cutting it too close to try and do it.

2202
01:36:27,900 --> 01:36:29,800
So we actually need three

2203
01:36:30,000 --> 01:36:31,800
Frames of latency to make this work.

2204
01:36:31,800 --> 01:36:35,600
And the reason for that, is that since these, this is about one frame

2205
01:36:36,000 --> 01:36:36,500
ahead.

2206
01:36:36,600 --> 01:36:36,900
Right?

2207
01:36:36,900 --> 01:36:37,200
The right.

2208
01:36:37,200 --> 01:36:38,500
Curse is about one frame ahead.

2209
01:36:38,500 --> 01:36:41,200
When we did our testing, what that means.

2210
01:36:41,200 --> 01:36:43,100
Is that wherever the play cursor is.

2211
01:36:43,500 --> 01:36:45,700
We know, we probably can't write.

2212
01:36:45,700 --> 01:36:48,100
We know, we definitely can't write to this because it's already behind

2213
01:36:48,100 --> 01:36:51,500
the play cursor and we know that we probably can't write to this.

2214
01:36:51,800 --> 01:36:54,800
Because given the granularity of how this is being updated.

2215
01:36:54,900 --> 01:36:56,900
We don't even know exactly the right cursor.

2216
01:36:56,900 --> 01:36:58,600
Could be anywhere really in practice.

2217
01:36:58,600 --> 01:36:59,800
We're in a lot of

2218
01:37:00,000 --> 01:37:02,400
But we don't actually know what's going on with a lot of these things

2219
01:37:03,000 --> 01:37:04,400
because they're moving as we go.

2220
01:37:04,800 --> 01:37:08,500
So really, we have to Target basically one frame ahead of the next

2221
01:37:08,500 --> 01:37:11,100
frame that it could be and that's where the 3 comes from.

2222
01:37:11,500 --> 01:37:13,300
So we're on this Frame, right?

2223
01:37:13,400 --> 01:37:14,800
We have to skip this one.

2224
01:37:15,100 --> 01:37:16,300
We have to skip this one.

2225
01:37:16,300 --> 01:37:20,400
Probably unless we hit it dead on and so we gotta always write to this

2226
01:37:20,400 --> 01:37:20,700
one.

2227
01:37:20,900 --> 01:37:23,500
And that's where we come up with our computation.

2228
01:37:23,800 --> 01:37:26,100
So the answer is can we ignore the right cursor?

2229
01:37:26,100 --> 01:37:29,700
Know, we have to look at that Delta there and

2230
01:37:29,900 --> 01:37:34,600
Find out what it is and make sure that whatever our frame latency is.

2231
01:37:35,000 --> 01:37:36,800
It's above that value.

2232
01:37:37,200 --> 01:37:37,800
Right?

2233
01:37:38,400 --> 01:37:42,600
But we don't actually care where the right cursor is ever.

2234
01:37:42,900 --> 01:37:43,000
It.

2235
01:37:43,000 --> 01:37:43,800
Doesn't matter.

2236
01:37:43,900 --> 01:37:47,200
What we care is, how far it is from the play curse, or we care about

2237
01:37:47,200 --> 01:37:49,100
this Delta, right?

2238
01:37:50,500 --> 01:37:53,000
Because we're trying to synchronize with this.

2239
01:37:53,200 --> 01:37:56,400
We're not trying to synchronize with this, we don't care when the

2240
01:37:56,400 --> 01:37:59,600
right curse or hit, something we care when the play cursor hit.

2241
01:38:00,900 --> 01:38:02,300
And that's that's about it.

2242
01:38:02,900 --> 01:38:08,300
So really, it seems like this is stupid when I'm saying it and that's

2243
01:38:08,300 --> 01:38:12,900
because this audio card is so latent, but imagine what would happen if

2244
01:38:12,900 --> 01:38:14,300
this audio card was better.

2245
01:38:14,600 --> 01:38:17,900
Imagine what would happen if when we queried it looked more like this,

2246
01:38:18,200 --> 01:38:18,400
right?

2247
01:38:18,400 --> 01:38:19,800
So here's the difference, right?

2248
01:38:19,800 --> 01:38:20,700
So here's the play cursor.

2249
01:38:20,700 --> 01:38:21,700
Here's the right cursor.

2250
01:38:22,100 --> 01:38:24,500
And now you're saying, well, let's synchronize using that.

2251
01:38:24,600 --> 01:38:27,100
Well, that's stupid because what's going to happen is now you've just

2252
01:38:27,100 --> 01:38:29,300
introduced that much audio latency.

2253
01:38:29,900 --> 01:38:32,400
On your frame boundary because you're going to synchronize with when

2254
01:38:32,400 --> 01:38:35,800
this thing hits that thing and that's wrong because this is actually

2255
01:38:35,800 --> 01:38:36,500
the playback.

2256
01:38:37,100 --> 01:38:41,500
So on a good card you would be very much better off thinking with the

2257
01:38:41,500 --> 01:38:44,000
play cursor because it's going to be very low latency.

2258
01:38:44,100 --> 01:38:45,800
And that is the thing you're trying to sync with.

2259
01:38:46,000 --> 01:38:48,600
So, you're only checking this ought, your only checking this Delta

2260
01:38:48,600 --> 01:38:52,900
here to figure out what your safety margin is on a bad card.

2261
01:38:53,000 --> 01:38:56,900
Well, it's already totally late in anyway, so I actually don't mind

2262
01:38:56,900 --> 01:38:59,200
the fact that we're a little more latent like let's say we're you

2263
01:38:59,200 --> 01:38:59,800
know, we're a little

2264
01:39:00,300 --> 01:39:04,200
We're you know, an extra 10 milliseconds Layton when the thing was

2265
01:39:04,200 --> 01:39:07,600
already 33 milliseconds, latent isn't as big of a deal to me

2266
01:39:07,900 --> 01:39:08,800
necessarily.

2267
01:39:09,400 --> 01:39:12,400
Like I said, we could be a little more proactive about that and cut

2268
01:39:12,400 --> 01:39:15,600
that down so that we wouldn't have that by allowing the game to write

2269
01:39:15,600 --> 01:39:20,100
on non frame boundaries, but I don't know, I just don't know if I feel

2270
01:39:20,100 --> 01:39:23,900
like that's a good trade-off to make their, we'll have to see.

2271
01:39:24,200 --> 01:39:26,600
So that's that's currently what what I'm thinking.

2272
01:39:37,500 --> 01:39:40,300
It looks like it might be the case that just like you'd favor.

2273
01:39:40,300 --> 01:39:42,000
Direct sound over wave out in Windows XP.

2274
01:39:42,000 --> 01:39:44,800
You should favor Wasabi or wave out for Vista 7.

2275
01:39:45,000 --> 01:39:47,000
So we might need to back ends for Windows based on OS.

2276
01:39:47,000 --> 01:39:48,000
We wanna support both.

2277
01:39:48,000 --> 01:39:50,800
Yes, and that's why I said, what we'll probably do is, we'll look,

2278
01:39:50,900 --> 01:39:56,000
we'll test at some point, x audio or will test whatever the very

2279
01:39:56,000 --> 01:40:01,200
latest thing was on Windows 7 will see if the audio latency is any

2280
01:40:01,200 --> 01:40:01,700
better?

2281
01:40:02,200 --> 01:40:03,700
If it isn't then we'll be like, okay.

2282
01:40:03,700 --> 01:40:04,900
This is just a waste of time.

2283
01:40:05,100 --> 01:40:06,400
But if it is, then we'll

2284
01:40:06,400 --> 01:40:10,000
I have a thing that says if we were able to open X audio will use it

2285
01:40:10,000 --> 01:40:11,200
if it wasn't, we won't.

2286
01:40:14,900 --> 01:40:16,300
Wood, rendering at 60 frames a second.

2287
01:40:16,300 --> 01:40:18,500
Instead of 30 frames per second, help with this latency problem.

2288
01:40:18,500 --> 01:40:19,100
Not really.

2289
01:40:19,100 --> 01:40:23,400
It does cut down the extra frame latency by a little bit.

2290
01:40:23,800 --> 01:40:27,600
So the total latency would go from an extra 33 milliseconds to an

2291
01:40:27,600 --> 01:40:30,300
extra 16 milliseconds potentially on the rounding.

2292
01:40:30,400 --> 01:40:32,500
So whichever direction it rounds.

2293
01:40:33,000 --> 01:40:35,600
You're rounding to a different granularity.

2294
01:40:35,600 --> 01:40:38,800
So you helps a little bit, but that's only because I said that I

2295
01:40:38,800 --> 01:40:42,400
wanted to keep it frame synchronized for audio if we decided to

2296
01:40:42,400 --> 01:40:43,800
desynchronize it and allowed.

2297
01:40:44,000 --> 01:40:48,700
The app to basically be writing to some non frame centered location

2298
01:40:48,800 --> 01:40:51,700
which might be a better decision, you know, as I'm saying it more and

2299
01:40:51,700 --> 01:40:52,000
more.

2300
01:40:52,000 --> 01:40:55,200
I'm thinking maybe we should just allow that because it doesn't really

2301
01:40:55,200 --> 01:40:55,400
matter.

2302
01:40:55,400 --> 01:40:58,500
The game doesn't really have to know the game could think it was frame

2303
01:40:58,500 --> 01:40:59,300
synchronized.

2304
01:40:59,300 --> 01:41:01,900
And really, all it's doing is cutting down that latency a little bit.

2305
01:41:03,000 --> 01:41:06,800
So it's probably a better thing to do anyway, but at the moment we're

2306
01:41:06,800 --> 01:41:09,900
not actually doing that but yeah, so if we switch to that, then it

2307
01:41:09,900 --> 01:41:10,800
wouldn't change at all.

2308
01:41:11,300 --> 01:41:13,200
The frame rate would be irrelevant.

2309
01:41:16,600 --> 01:41:18,700
Could you change latency values based on technically sound card

2310
01:41:18,700 --> 01:41:19,000
settings?

2311
01:41:19,000 --> 01:41:22,000
Yes, and that is what we will do based on the right cursor.

2312
01:41:22,000 --> 01:41:25,000
So tomorrow, we'll take a look at that, right cursor, and the right

2313
01:41:25,000 --> 01:41:25,300
cursor.

2314
01:41:25,300 --> 01:41:29,800
Will determine our sound are some granularity basically.

2315
01:41:31,100 --> 01:41:33,700
Is it possible that OBS is affecting the audio latency?

2316
01:41:33,700 --> 01:41:35,000
That's a very good point.

2317
01:41:35,300 --> 01:41:35,800
Yes.

2318
01:41:35,800 --> 01:41:36,100
It is.

2319
01:41:36,100 --> 01:41:37,200
Very, very possible.

2320
01:41:37,800 --> 01:41:40,300
I had not thought of that, but you're totally right.

2321
01:41:40,300 --> 01:41:43,200
It could be that the fact that I'm broadcasting.

2322
01:41:43,200 --> 01:41:45,800
This is what's causing that that could very well be.

2323
01:41:46,400 --> 01:41:47,400
I had not thought of that.

2324
01:41:47,800 --> 01:41:48,800
It's very good point.

2325
01:41:49,500 --> 01:41:53,600
We'll have to run this with after the streams over after run it and

2326
01:41:53,600 --> 01:41:55,600
see to see if it's different.

2327
01:42:00,800 --> 01:42:02,000
Let's see here.

2328
01:42:03,200 --> 01:42:05,000
Alright, I think that's it.

2329
01:42:05,000 --> 01:42:07,800
So I'm going to set up some sidhu's for tomorrow just so we know

2330
01:42:07,800 --> 01:42:08,800
what's going on here.

2331
01:42:09,300 --> 01:42:13,100
So the first thing to say is maybe we should just go ahead and run non

2332
01:42:13,100 --> 01:42:14,100
frame locked.

2333
01:42:14,900 --> 01:42:17,600
So I'm going to say to do Casey.

2334
01:42:18,300 --> 01:42:22,300
Let's think about running non frame.

2335
01:42:22,300 --> 01:42:25,100
Quantized for audio latency.

2336
01:42:25,800 --> 01:42:26,600
First of all,

2337
01:42:28,300 --> 01:42:30,100
So maybe that's just a better idea.

2338
01:42:30,300 --> 01:42:35,800
And the other to do is just let's use that right cursor to compute

2339
01:42:35,800 --> 01:42:37,000
whatever the latency is.

2340
01:42:37,000 --> 01:42:41,400
So to do Casey, let's use the right cursor.

2341
01:42:41,700 --> 01:42:48,600
Delta from the play cursor to adjust the target audio latency.

2342
01:42:49,600 --> 01:42:52,300
So that will, that will kind of give us that information.

2343
01:42:53,700 --> 01:42:54,300
All right.

2344
01:42:55,000 --> 01:42:55,300
Okay.

2345
01:42:55,300 --> 01:42:57,700
Well, thank you very much, everyone for joining us.

2346
01:42:58,000 --> 01:43:00,000
We kind of did accomplish what I wanted to accomplish today.

2347
01:43:00,000 --> 01:43:02,900
We're just a little bit behind and so we'll have to push it into

2348
01:43:02,900 --> 01:43:05,600
tomorrow a little bit, which means we may spill over into Monday,

2349
01:43:05,900 --> 01:43:07,900
maybe 21 days of platform code.

2350
01:43:07,900 --> 01:43:11,900
Instead of 20, you know, who's counting software is always late.

2351
01:43:12,600 --> 01:43:13,800
That's the kind of the rule.

2352
01:43:14,300 --> 01:43:17,400
So if it has to be that way, it has to be that way, but thank you very

2353
01:43:17,400 --> 01:43:18,300
much for joining me.

2354
01:43:18,500 --> 01:43:21,500
As always, if you would like a copy of the source code to play around

2355
01:43:21,500 --> 01:43:22,900
with at home, along with the

2356
01:43:23,100 --> 01:43:23,300
Aries.

2357
01:43:23,300 --> 01:43:26,800
You can go to handmade hero dot org and pre-order it using this handy.

2358
01:43:26,800 --> 01:43:27,900
Dandy little button here.

2359
01:43:28,300 --> 01:43:32,300
You can also if you would like to get more information and discuss the

2360
01:43:32,300 --> 01:43:35,900
series with people, you can click on this news and forums button and

2361
01:43:35,900 --> 01:43:38,600
you can basically get all sorts of stuff here.

2362
01:43:38,600 --> 01:43:41,400
There's a schedule on the homepage so you can see what's going on.

2363
01:43:41,800 --> 01:43:45,600
There's an episode guide which basically has all the episodes with

2364
01:43:45,600 --> 01:43:46,900
extra annotation on them.

2365
01:43:46,900 --> 01:43:48,300
So you can learn from them more easily.

2366
01:43:48,500 --> 01:43:51,400
There's a coding resources page which has ports that people have done

2367
01:43:51,400 --> 01:43:52,100
among other things.

2368
01:43:52,100 --> 01:43:52,900
So for example,

2369
01:43:53,300 --> 01:43:56,000
If you want to run this on Mac OS X, there's code.

2370
01:43:56,000 --> 01:43:56,900
There's information about that.

2371
01:43:56,900 --> 01:43:59,200
There's a Linux as well.

2372
01:43:59,500 --> 01:44:00,700
There's a bunch of stuff on there.

2373
01:44:01,200 --> 01:44:03,000
There's a form, we can discuss stuff.

2374
01:44:03,000 --> 01:44:04,200
There's all kinds of things.

2375
01:44:04,600 --> 01:44:06,600
So, please take a minute to check that out.

2376
01:44:06,600 --> 01:44:09,800
If you have questions, or if you want to discuss stuff in the series.

2377
01:44:09,800 --> 01:44:11,100
It's a great resource for that.

2378
01:44:11,900 --> 01:44:14,600
I will be back here tomorrow, but it's a Friday.

2379
01:44:14,600 --> 01:44:17,400
So it'll be in the morning as we always do our Friday morning.

2380
01:44:17,400 --> 01:44:18,200
So it's 11 a.m.

2381
01:44:18,200 --> 01:44:19,900
Tomorrow Pacific Standard Time.

2382
01:44:20,100 --> 01:44:22,400
Hope to see those of you there who can make it.

2383
01:44:22,500 --> 01:44:22,900
If not,

2384
01:44:23,100 --> 01:44:26,400
Again, you could always check the video archived on YouTube to get

2385
01:44:26,400 --> 01:44:27,900
that, right?

2386
01:44:27,900 --> 01:44:30,000
It should be a pretty soon after it plays.

2387
01:44:30,000 --> 01:44:32,900
If not, you can always use twitch also has it immediately after it

2388
01:44:32,900 --> 01:44:33,200
airs.

2389
01:44:33,700 --> 01:44:35,600
So either one of those is your source of that.

2390
01:44:35,600 --> 01:44:39,800
Thanks everyone for joining me, and I will go test that audio latency

2391
01:44:39,800 --> 01:44:41,100
with OBS off.

2392
01:44:41,400 --> 01:44:45,800
So we can see if that really was one of the problems or not.

2393
01:44:45,900 --> 01:44:46,300
Okay.

2394
01:44:46,700 --> 01:44:48,200
Have a great Friday.

2395
01:44:48,200 --> 01:44:50,100
If I don't see you tomorrow or and a great weekend.

2396
01:44:50,100 --> 01:44:52,700
I suppose we'll be back Monday at 8 p.m.

2397
01:44:52,700 --> 01:44:52,900
PST.

2398
01:44:53,000 --> 01:44:53,200
SD.

2399
01:44:53,200 --> 01:44:55,300
If you can't make the Friday stream tomorrow at 11 a.m.

2400
01:44:55,500 --> 01:44:57,500
Thanks everyone, and I will see you later.

