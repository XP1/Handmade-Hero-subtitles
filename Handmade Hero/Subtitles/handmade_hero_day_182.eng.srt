1
00:00:00,600 --> 00:00:01,700
Start recording.

2
00:00:02,800 --> 00:00:05,600
Okay, hello everyone and welcome to handmade hero.

3
00:00:05,600 --> 00:00:07,200
I know we are staring at the Emax ring.

4
00:00:07,200 --> 00:00:08,000
That's a little bit weird.

5
00:00:08,000 --> 00:00:10,300
Normally, we're not doing that on handmade here, it's because I was

6
00:00:10,300 --> 00:00:12,000
explaining something in the freestream to somebody.

7
00:00:12,000 --> 00:00:17,100
We had this little situation happening there, and so I'm going to go

8
00:00:17,100 --> 00:00:18,400
ahead and close that down.

9
00:00:19,000 --> 00:00:22,000
That was just a little, little pre stream, chat, little pre stream

10
00:00:22,000 --> 00:00:22,200
chat.

11
00:00:22,200 --> 00:00:25,000
We were chatting about some stuff and I wanted to demonstrate.

12
00:00:25,000 --> 00:00:28,600
But here you go back to the standard where we normally start the

13
00:00:28,600 --> 00:00:29,200
episode.

14
00:00:29,600 --> 00:00:31,400
Welcome to handmade hero show.

15
00:00:31,400 --> 00:00:32,400
Where we code a complete game.

16
00:00:32,500 --> 00:00:38,500
Live on Twitch and, you know, yesterday we kind of just went.

17
00:00:38,500 --> 00:00:43,300
I was surprised at how well yesterday went to be honest with you.

18
00:00:43,300 --> 00:00:47,500
I didn't really know how it was going to go and we just straight-up

19
00:00:47,500 --> 00:00:48,100
replaced.

20
00:00:48,100 --> 00:00:50,400
Our other debugging system with one that basically goes all the same

21
00:00:50,400 --> 00:00:53,800
stuff but captures the full information, including the timestamps and

22
00:00:53,800 --> 00:00:55,300
everything, and that was pretty awesome.

23
00:00:55,700 --> 00:00:59,100
And I'd like to go get back into that today because we haven't really

24
00:00:59,100 --> 00:00:59,800
played with it.

25
00:01:00,100 --> 00:01:02,400
Now that we have this extra information, we haven't done anything with

26
00:01:02,400 --> 00:01:02,500
it.

27
00:01:02,500 --> 00:01:05,099
Because we just finished up actually collecting it.

28
00:01:06,200 --> 00:01:07,800
That's pretty cool.

29
00:01:07,800 --> 00:01:12,400
Now, there is a slight issue with it, and it's an issue.

30
00:01:12,400 --> 00:01:18,300
That honestly, I haven't had to solve recently in professional

31
00:01:18,300 --> 00:01:23,400
programming, at Molly, because of the way that I do things, there's a

32
00:01:23,400 --> 00:01:26,900
different way that I structure the code, that makes it, so that this

33
00:01:26,900 --> 00:01:30,200
particular thing is not necessary, but I know that we're going to have

34
00:01:30,200 --> 00:01:32,000
to solve it here and I'm a little rusty.

35
00:01:32,000 --> 00:01:35,500
I'm sorry to say, I'm just rusty with the technique that we're going

36
00:01:35,500 --> 00:01:36,000
to need to use.

37
00:01:36,200 --> 00:01:40,200
Is or at least I assume that we're going to need to use unless the

38
00:01:40,200 --> 00:01:42,500
correct solution is just to kind of switch over to the way that I do

39
00:01:42,500 --> 00:01:42,600
it.

40
00:01:42,600 --> 00:01:44,900
Molly which I don't know that it necessarily is I think that's a

41
00:01:44,900 --> 00:01:48,500
little bit further down the rabbit hole than probably we would want to

42
00:01:48,500 --> 00:01:50,700
go for the code that we're doing right now.

43
00:01:50,700 --> 00:01:51,200
But

44
00:01:52,300 --> 00:01:53,300
I'd like to get back to it.

45
00:01:53,400 --> 00:01:55,900
I'd like to talk about some of the things, the shortcomings that we

46
00:01:55,900 --> 00:01:56,800
still have in there.

47
00:01:57,100 --> 00:01:58,100
Can we fix them?

48
00:01:58,400 --> 00:02:00,600
And if and then which ones we can leave?

49
00:02:00,600 --> 00:02:03,100
And then I'd like to go if we still have time after that which don't

50
00:02:03,100 --> 00:02:03,700
know if we will.

51
00:02:03,800 --> 00:02:06,100
I'd like to start going into like how to use the data a little bit

52
00:02:06,100 --> 00:02:06,500
more.

53
00:02:07,100 --> 00:02:11,500
And then for certain tomorrow and Friday I'd like to start a get into.

54
00:02:11,500 --> 00:02:14,100
Okay, let's let's make some nice visits now that we've got this extra

55
00:02:14,100 --> 00:02:14,500
information.

56
00:02:14,500 --> 00:02:16,300
Let's let's fix the visualizations.

57
00:02:16,300 --> 00:02:20,400
We were doing from a for to sort of have the information that now we

58
00:02:20,400 --> 00:02:21,900
can provide such as know.

59
00:02:22,400 --> 00:02:26,500
How much time a function took exclusive of its Children of the like of

60
00:02:26,500 --> 00:02:28,400
the people that called, for example, right?

61
00:02:28,700 --> 00:02:32,400
Or knowing how when things happened relative to each other that sort

62
00:02:32,400 --> 00:02:34,800
of stuff and that sort of stuff that I would like to be able to see in

63
00:02:34,800 --> 00:02:35,000
that part.

64
00:02:35,000 --> 00:02:37,800
I like to have a really nice profile view there because, you know,

65
00:02:37,800 --> 00:02:38,900
like, like you've seen so far.

66
00:02:38,900 --> 00:02:40,900
It doesn't take that long to do this stuff, you know, in a couple

67
00:02:40,900 --> 00:02:45,300
weeks of handmade hero time which is, you know, something like a few

68
00:02:45,300 --> 00:02:46,300
days of full time.

69
00:02:46,300 --> 00:02:49,200
Programming time, you can build yourself, a pretty nice inline

70
00:02:49,200 --> 00:02:51,900
profiling system, and there's really nothing like that.

71
00:02:52,000 --> 00:02:53,900
Having that nice in line profiling system.

72
00:02:54,000 --> 00:02:57,800
Really allows you to kind of just always have a heads up kind of a

73
00:02:57,800 --> 00:02:59,900
rough idea, you know, of what your

74
00:03:00,000 --> 00:03:03,300
Is doing without having to go into some kind of mentality that like,

75
00:03:03,300 --> 00:03:04,800
oh, I'm profiling, my code now.

76
00:03:05,000 --> 00:03:07,700
And so you never have to worry about like, oh, launching up some

77
00:03:07,700 --> 00:03:09,400
external profiling, tool of these sorts of things.

78
00:03:09,500 --> 00:03:13,300
So having that in line, profiler, even if you do, end up using

79
00:03:13,300 --> 00:03:15,400
external profiling tools because they have some features that you want

80
00:03:15,400 --> 00:03:17,700
that, you don't have time, it'll matter whatever having an inline

81
00:03:17,700 --> 00:03:21,700
profiling tools, usually, a really great idea because it's all about

82
00:03:21,700 --> 00:03:25,000
keeping that situational awareness of your code, so that you always

83
00:03:25,000 --> 00:03:29,000
know what's going on, all throughout the development, it really helps

84
00:03:29,000 --> 00:03:29,400
you keep

85
00:03:30,000 --> 00:03:31,100
In mind, it really helps.

86
00:03:31,100 --> 00:03:35,000
You spot bugs, weird, things happening earlier rather than later and

87
00:03:35,000 --> 00:03:37,500
it prevents you from getting into the situation where you suddenly

88
00:03:37,500 --> 00:03:41,500
opened, up this sort of really you know, you're opening up the trunk

89
00:03:41,500 --> 00:03:43,500
of the car and all this membered bodies are in there.

90
00:03:43,600 --> 00:03:47,300
Sometime at the end of the project, that's not the best place to be

91
00:03:47,300 --> 00:03:47,800
right.

92
00:03:47,800 --> 00:03:50,800
You'd rather always know what's going on and kind of have this.

93
00:03:50,800 --> 00:03:54,000
The sort of heads-up idea of like, where am I?

94
00:03:54,000 --> 00:03:56,900
Where's my time being spent roughly, how many times does things get

95
00:03:56,900 --> 00:03:59,900
called having that in in mind all the time helps you make,

96
00:04:00,000 --> 00:04:03,200
Really good architectural decisions all along the way so that you're

97
00:04:03,200 --> 00:04:06,100
not just slammed with it at the end and going, oh my God.

98
00:04:06,100 --> 00:04:09,500
Like what do I do now have I painted myself into a bunch of Corners?

99
00:04:09,500 --> 00:04:10,300
Like what do I do?

100
00:04:10,400 --> 00:04:12,700
So having that information all the time I think is really good and

101
00:04:12,700 --> 00:04:15,100
that's why I think spending this time is good and like you've seen, it

102
00:04:15,100 --> 00:04:16,700
just doesn't take that much time.

103
00:04:17,100 --> 00:04:21,200
We're talking about a few hours here, you know, 10 hours, 15 hours,

104
00:04:21,200 --> 00:04:22,200
something like that.

105
00:04:22,700 --> 00:04:26,200
To build a pretty good system from scratch is really a very small time

106
00:04:26,200 --> 00:04:29,800
investment on any project and so I really highly recommend

107
00:04:29,900 --> 00:04:34,500
And keeping that going if you can in your own projects and certainly

108
00:04:34,500 --> 00:04:35,700
I'd like to do it here on handmade hero.

109
00:04:35,700 --> 00:04:39,200
So anyway, I guess the price yet starts mentions day 182 if you have

110
00:04:39,200 --> 00:04:42,700
pre-ordered the game handmade hero dot org and you would like to

111
00:04:42,700 --> 00:04:44,600
follow along day, 181 source.

112
00:04:44,600 --> 00:04:47,900
Code is what I'm starting with today here on day 182, if you want to

113
00:04:47,900 --> 00:04:53,100
follow along unzip, that if you are using the GitHub, use the tag

114
00:04:53,300 --> 00:04:57,300
Browse by tags and grab tag 181 and that's where we're at.

115
00:04:57,300 --> 00:04:59,800
So, however, your however you're getting your source,

116
00:05:00,000 --> 00:05:02,500
Of these days whoever your source code hookup.

117
00:05:02,500 --> 00:05:08,300
Is there whether it's the Zips or the GitHub, go ahead and get that

118
00:05:08,300 --> 00:05:10,700
day out and that's where I'm going to be starting at now.

119
00:05:10,700 --> 00:05:13,800
If you remember what we did on the, on the last time we had just

120
00:05:13,800 --> 00:05:17,600
finished up, making sure that we could we could run with sort of this

121
00:05:17,600 --> 00:05:20,300
new system and that everything seemed to work realtively.

122
00:05:20,300 --> 00:05:21,400
Well, it does.

123
00:05:21,700 --> 00:05:22,600
And that's pretty cool.

124
00:05:22,600 --> 00:05:26,600
It's a little slower than our old system, but I have a feeling, I

125
00:05:26,600 --> 00:05:29,800
can't say for sure, but I have a feeling that a lot of

126
00:05:29,900 --> 00:05:32,100
That has nothing to do with the insertion of the timing.

127
00:05:33,800 --> 00:05:37,900
I think our timing code is probably still pretty darn efficient and I

128
00:05:37,900 --> 00:05:42,600
suspect that pretty much the entirety of the of the additional time

129
00:05:42,600 --> 00:05:46,000
spent on behalf of the system is in the collation phase and again,

130
00:05:46,000 --> 00:05:47,200
that's totally fine.

131
00:05:47,300 --> 00:05:52,800
If collation takes a long time and you know, that's a that's where all

132
00:05:52,800 --> 00:05:54,500
the time is spent for this particular profile system.

133
00:05:54,500 --> 00:05:57,200
It means that we can't really run the game at the full frame rate

134
00:05:57,200 --> 00:05:59,800
while we're pro while reviewing the profile, right?

135
00:06:00,500 --> 00:06:01,900
But we can certainly run it.

136
00:06:01,900 --> 00:06:06,400
The full frame rate then pause and view the profile for example or any

137
00:06:06,400 --> 00:06:10,200
other things like that, we can always sort of compensate for that

138
00:06:10,200 --> 00:06:10,400
stuff.

139
00:06:10,400 --> 00:06:12,700
So if it's just a collation phase, that's slow.

140
00:06:13,200 --> 00:06:14,500
That's really not going to be a problem.

141
00:06:14,500 --> 00:06:18,700
So as we dive a little bit deeper in the keep that in mind, the inline

142
00:06:18,700 --> 00:06:21,800
profile slowing our game down is only a problem if it's slowing the

143
00:06:21,800 --> 00:06:26,400
game down inside the actual code that we care about, if it's all stuff

144
00:06:26,400 --> 00:06:29,900
that can be isolated into a into a post pass, which I believe it

145
00:06:29,900 --> 00:06:30,100
already.

146
00:06:30,300 --> 00:06:33,500
Is because I think we did a reasonable job on it, then we really don't

147
00:06:33,500 --> 00:06:37,700
care because there's plenty of ways, we can get around that plenty,

148
00:06:37,700 --> 00:06:41,500
plenty of ways, you can get around that, that that we can do, that

149
00:06:41,500 --> 00:06:41,900
will make it.

150
00:06:41,900 --> 00:06:44,700
So we don't really have to care and that won't affect our ability to

151
00:06:44,700 --> 00:06:45,000
use it.

152
00:06:45,000 --> 00:06:46,400
I don't think so.

153
00:06:46,400 --> 00:06:51,300
Anyway, what I'd like to do now is go ahead and and talk about what we

154
00:06:51,300 --> 00:06:55,500
are actually doing here in terms of how the buffers work and some

155
00:06:55,500 --> 00:06:57,400
limitations of them, right?

156
00:06:57,900 --> 00:06:58,400
Okay.

157
00:06:58,600 --> 00:07:00,000
So first of limitations on

158
00:07:00,200 --> 00:07:02,500
I don't think I'm going to fix and then I don't know that we really

159
00:07:02,500 --> 00:07:05,900
ever would need to fix and that one I just want to get out of the way

160
00:07:05,900 --> 00:07:09,400
so that we're all aware that it's there and I'll put it to do in just

161
00:07:09,400 --> 00:07:10,100
to talk about it.

162
00:07:10,100 --> 00:07:10,400
Here.

163
00:07:10,800 --> 00:07:16,200
I will say to do Casey, no attempt is currently made.

164
00:07:17,400 --> 00:07:21,600
To ensure that the final debug record.

165
00:07:23,700 --> 00:07:26,200
Being written to the event array.

166
00:07:28,100 --> 00:07:40,600
Actually complete their output prior to the rollover for the swap of

167
00:07:40,600 --> 00:07:44,400
the event array Index, right?

168
00:07:45,000 --> 00:07:50,400
So, what I mean by that is we have this Global debug event array and I

169
00:07:50,400 --> 00:07:54,800
have two of them because as these events get streamed out into the

170
00:07:54,800 --> 00:07:57,500
system and are recorded,

171
00:07:57,900 --> 00:08:01,200
We want to be able to be doing that continuously from as many threads

172
00:08:01,200 --> 00:08:04,300
as we want and we don't want to have to put any restrictions on it as

173
00:08:04,300 --> 00:08:05,100
a result.

174
00:08:05,100 --> 00:08:09,600
When somebody goes to actually gather the information, there is no way

175
00:08:09,600 --> 00:08:14,800
for us to actually look at the data there, you know?

176
00:08:14,800 --> 00:08:18,300
We can't, we can't sort of say, okay, the buffer is done, go start,

177
00:08:18,300 --> 00:08:21,600
reusing it for the beginning, we can't do that until we've read, all

178
00:08:21,600 --> 00:08:24,400
the data and reading all the data might take some time.

179
00:08:24,500 --> 00:08:27,300
Meanwhile, some other threads want to be able to write to it.

180
00:08:27,700 --> 00:08:28,900
And we don't want introduce a mutex.

181
00:08:28,900 --> 00:08:31,200
And I think that's because the whole point of our timing blocks, as we

182
00:08:31,200 --> 00:08:32,299
want them to be as fast as possible.

183
00:08:32,299 --> 00:08:35,400
They're just like, right directly to the debug log and that's it.

184
00:08:36,500 --> 00:08:39,100
So because we've done it that way.

185
00:08:39,100 --> 00:08:41,000
It means we need sort of a double buffering system.

186
00:08:41,000 --> 00:08:44,600
We need to make sure that we are writing to one while we're reading

187
00:08:44,600 --> 00:08:45,100
from the other.

188
00:08:45,100 --> 00:08:49,300
And then we just in one Atomic, call swap them so that we know that we

189
00:08:49,300 --> 00:08:51,700
never have a conflict now, that's all fine.

190
00:08:51,800 --> 00:08:55,300
But what it does mean is that if somehow and it's incredibly unlikely

191
00:08:55,300 --> 00:08:59,400
but if some bizarre thing happened where a thread

192
00:09:00,100 --> 00:09:04,700
Got its debug event, array, index back from the synchronous operation

193
00:09:05,100 --> 00:09:09,200
had, not written to it yet and in that period of time, between when it

194
00:09:09,200 --> 00:09:12,300
got the index back and literally like it just got preempted right

195
00:09:12,300 --> 00:09:17,100
there and held on preemption for the entire time, it took the other

196
00:09:17,100 --> 00:09:22,300
thread to swap, do the atomic swap to the new buffer and then parse

197
00:09:22,300 --> 00:09:26,100
the whole debug buffer, all the way to the end where those missing

198
00:09:26,100 --> 00:09:29,900
elements are and then read those missing elements before.

199
00:09:30,000 --> 00:09:30,500
Or they were written.

200
00:09:30,500 --> 00:09:33,000
It would get bogus information, right?

201
00:09:34,700 --> 00:09:36,600
The chance of that happening are effectively zero.

202
00:09:36,600 --> 00:09:39,000
I think I don't think there's probably anyway can happen.

203
00:09:41,200 --> 00:09:43,400
It would be really crazy.

204
00:09:44,200 --> 00:09:47,100
Maybe if there were a lot less debug events in the array, it might

205
00:09:47,100 --> 00:09:50,700
happen once in a while, but we're talking about a debug array that has

206
00:09:50,800 --> 00:09:53,100
potentially hundreds of thousands of entries in it.

207
00:09:53,400 --> 00:09:58,000
Remember it had more than 64,000 entries in it already.

208
00:09:58,800 --> 00:10:01,600
So we're talking about a massive log of chances of that happening.

209
00:10:01,600 --> 00:10:06,700
I think are extremely slim, and if they were to happen, I think I'd be

210
00:10:06,700 --> 00:10:07,600
okay with that.

211
00:10:08,100 --> 00:10:09,300
So we'll just put it that way.

212
00:10:12,000 --> 00:10:16,000
Now Famous Last Words, maybe that'll come back to bite us, but I'm

213
00:10:16,000 --> 00:10:16,900
just not that concerned about.

214
00:10:16,900 --> 00:10:21,200
So I'm going to let it be and I don't think the cost of fixing it to,

215
00:10:21,200 --> 00:10:25,000
in terms of how that might affect the lightweightness of the ability

216
00:10:25,000 --> 00:10:25,900
to time those blocks.

217
00:10:25,900 --> 00:10:28,900
I just don't think it's worth it at that point.

218
00:10:29,200 --> 00:10:31,100
Okay, so that's what's going on.

219
00:10:31,900 --> 00:10:34,300
That's a limitation that I think we're just going to live with and be

220
00:10:34,300 --> 00:10:34,600
okay.

221
00:10:34,600 --> 00:10:38,100
With I don't foresee it causing us very many problems and I hope that

222
00:10:38,100 --> 00:10:38,800
is true.

223
00:10:39,400 --> 00:10:39,600
But

224
00:10:39,700 --> 00:10:42,300
but now we've got some limitations that we do want to fix.

225
00:10:42,700 --> 00:10:47,000
And those specifically are about, you know, this stuff that I didn't

226
00:10:47,000 --> 00:10:47,700
do, right?

227
00:10:47,700 --> 00:10:49,600
It's not like the system had a problem.

228
00:10:49,700 --> 00:10:52,600
But if you take a look here, I don't know what core index I'm on.

229
00:10:52,700 --> 00:10:54,500
I don't know what thread index.

230
00:10:54,500 --> 00:10:56,100
I'm on, right.

231
00:10:56,400 --> 00:11:02,400
And so that leaves me in a situation where I can't really do the work

232
00:11:02,400 --> 00:11:03,700
that I actually want to do.

233
00:11:04,100 --> 00:11:07,500
And the core index part is a nice to have.

234
00:11:08,000 --> 00:11:09,300
It's just nice to know.

235
00:11:09,500 --> 00:11:09,600
So

236
00:11:09,800 --> 00:11:14,100
You can see if we want to what korres, our threads are running on how

237
00:11:14,100 --> 00:11:17,800
they may get moved around that sort of stuff, that's just nice

238
00:11:17,800 --> 00:11:18,700
information to have.

239
00:11:18,700 --> 00:11:20,100
If we're doing profiling work,

240
00:11:21,100 --> 00:11:24,200
no big deal, we could leave that one a zero forever and not really

241
00:11:24,200 --> 00:11:24,600
care.

242
00:11:25,500 --> 00:11:28,400
And I was kind of hoping to get that out of our dtsc P but maybe

243
00:11:28,400 --> 00:11:31,400
that's too much to ask and so maybe we won't.

244
00:11:33,900 --> 00:11:37,400
So maybe fixable in the future, maybe not, I don't know something.

245
00:11:37,400 --> 00:11:40,200
I think about a little more but not that critical thread index is the

246
00:11:40,200 --> 00:11:43,500
big, one threading index is absolutely crucial.

247
00:11:43,500 --> 00:11:46,500
And the reason the thread index is crucial is because some of our

248
00:11:46,500 --> 00:11:48,400
threads call the same function.

249
00:11:48,400 --> 00:11:51,700
So for example, if we want to do profiling of our renderer, which is

250
00:11:51,700 --> 00:11:54,800
something that we very may, you know, we've already done some

251
00:11:54,800 --> 00:11:57,400
profiling, the render, it's a very time critical component, the

252
00:11:57,400 --> 00:11:59,300
chances of us wanting to insert

253
00:12:00,100 --> 00:12:02,800
Profile counters into the render very high.

254
00:12:02,800 --> 00:12:06,400
But the problem that we have, there is many different threads are

255
00:12:06,400 --> 00:12:07,800
using the exact same functions.

256
00:12:07,800 --> 00:12:11,300
What that means is, we cannot assume that any given functions, begin

257
00:12:11,300 --> 00:12:13,400
and end are happening on the same thread.

258
00:12:13,400 --> 00:12:16,500
So, we may see a begin event for one of our blocks and then an end

259
00:12:16,500 --> 00:12:20,300
event for one of our blocks, we don't know if that end event was from

260
00:12:20,300 --> 00:12:23,800
some other thread, finishing that function, or from the thread at the

261
00:12:23,800 --> 00:12:25,200
beginning was on.

262
00:12:25,200 --> 00:12:29,900
So, we need some way right of being

263
00:12:30,100 --> 00:12:33,900
Well, to determine how these things line up in a thread sense.

264
00:12:34,100 --> 00:12:38,500
Now, since we know that threads always are sequential, meaning inside

265
00:12:38,500 --> 00:12:40,900
a given thread, we're never going to have that happen.

266
00:12:40,900 --> 00:12:42,900
Because threads it actually do things in order.

267
00:12:42,900 --> 00:12:45,200
It's not like multi-threading where different things happen, different

268
00:12:45,200 --> 00:12:46,000
times, right?

269
00:12:47,000 --> 00:12:50,400
So, for a single thread, if we see begin, begin, begin and end.

270
00:12:50,600 --> 00:12:54,100
We know that the first begin goes with the last end, and the second,

271
00:12:54,100 --> 00:12:58,300
you know, we know that they line up, right, because a thread can only

272
00:12:58,300 --> 00:12:59,900
enter a timing block and then leave it.

273
00:13:00,000 --> 00:13:03,500
It and any entry that it did into another timing block would have to

274
00:13:03,500 --> 00:13:08,000
happen, you know, as something sort of subordinate to that and it

275
00:13:08,000 --> 00:13:09,800
would go in that order, right?

276
00:13:10,600 --> 00:13:13,500
But if we have multiple threads of the mix, that's no longer true.

277
00:13:13,500 --> 00:13:15,300
They can begin and end at arbitrary ties.

278
00:13:15,300 --> 00:13:17,700
We don't have any way to pair those up unless we have some kind of a

279
00:13:17,700 --> 00:13:21,600
unique identifier that tells us, which thread was weaving through

280
00:13:21,600 --> 00:13:25,400
here, which was the one that allows us to pair up.

281
00:13:25,400 --> 00:13:29,200
Those begins and ends as being the same, right?

282
00:13:32,200 --> 00:13:36,700
Okay, so we have two options for solving this problem.

283
00:13:37,900 --> 00:13:38,800
Option one.

284
00:13:40,100 --> 00:13:43,100
Is we figure out a way to get a thread index, we figure out a way to

285
00:13:43,100 --> 00:13:47,100
get some number that is unique to the thread that it's executing on

286
00:13:47,900 --> 00:13:48,800
and we use that.

287
00:13:49,200 --> 00:13:53,900
Now, the reason that I like that the most is because that allows us to

288
00:13:53,900 --> 00:13:57,700
tell other information such as what threads were doing, what?

289
00:13:57,700 --> 00:14:02,500
When so that we can have a picture of our threading, baked into the

290
00:14:02,500 --> 00:14:06,800
log, as well, and that's extra information, extra information that I

291
00:14:06,800 --> 00:14:08,400
would like to have now.

292
00:14:08,400 --> 00:14:09,800
We're not crazy threaded in hand.

293
00:14:10,000 --> 00:14:12,000
Here, you know, we have a few things that are threaded, it's not a

294
00:14:12,000 --> 00:14:13,800
complete crazy thread thing.

295
00:14:13,800 --> 00:14:17,700
We got like asset threads render threads and some background

296
00:14:17,700 --> 00:14:19,000
compositing threads, right?

297
00:14:19,000 --> 00:14:20,000
So we have threads

298
00:14:21,100 --> 00:14:22,800
But we're not thread, crazy.

299
00:14:22,800 --> 00:14:23,200
It's not.

300
00:14:23,200 --> 00:14:26,100
Our game is not all about multi threading or anything like that, so if

301
00:14:26,100 --> 00:14:28,900
we didn't want to do that, that wouldn't be the end of the world.

302
00:14:28,900 --> 00:14:31,100
If we find that it's too onerous to do so that would necessarily be

303
00:14:31,100 --> 00:14:34,900
the end of the world because the other thing we could do is since we

304
00:14:34,900 --> 00:14:36,900
know that the begin and end blocks are paired.

305
00:14:36,900 --> 00:14:41,400
What we could also do is introduce another counter, another u-32 that

306
00:14:41,400 --> 00:14:44,200
just gets atomically incremented every time.

307
00:14:45,300 --> 00:14:49,500
And instead of thread index, it would just be like unique ID and at

308
00:14:49,500 --> 00:14:51,100
the top of the block, we would sink.

309
00:14:51,100 --> 00:14:55,700
We would synchronously increment that counter put it in and then on

310
00:14:55,700 --> 00:14:58,900
the end block, we would use the same that same value so we can pair

311
00:14:58,900 --> 00:14:59,200
them up.

312
00:14:59,200 --> 00:14:59,800
And since we know that

313
00:15:00,000 --> 00:15:01,500
One of those will get a unique one.

314
00:15:01,500 --> 00:15:04,700
All the way till four billion when the counter wraps, which let's be

315
00:15:04,700 --> 00:15:08,700
honest is not going to happen inside the course of one frame because

316
00:15:08,700 --> 00:15:09,800
this debug buffer.

317
00:15:09,800 --> 00:15:12,400
First of all, whatever flow for starters.

318
00:15:13,000 --> 00:15:16,800
But yeah, since that we know is not an issue, we could easily do it

319
00:15:16,800 --> 00:15:22,100
that way and and get the base level functionality out of it right, we

320
00:15:22,100 --> 00:15:28,300
can get the base, the basic idea out of it, which is very specifically

321
00:15:28,900 --> 00:15:29,800
making sure that our beginning

322
00:15:30,000 --> 00:15:30,800
A properly.

323
00:15:31,600 --> 00:15:34,800
So very straightforward could Implement that immediately if we want to

324
00:15:34,800 --> 00:15:35,900
do that, we could do that.

325
00:15:36,600 --> 00:15:40,200
So, the only question is, can we get a number that corresponds to our

326
00:15:40,200 --> 00:15:43,000
thread index in any easier way?

327
00:15:43,000 --> 00:15:46,500
And so, what I'm going to do here is I'm going to first talk about in

328
00:15:46,500 --> 00:15:52,600
win32, there is a way that we can get the thread ID with a function

329
00:15:52,600 --> 00:15:53,000
call.

330
00:15:53,600 --> 00:15:58,500
Now, remember function call not really something that we want to do in

331
00:15:58,500 --> 00:15:59,800
the middle of a timer block.

332
00:16:00,300 --> 00:16:04,400
So what I'm going to do is I want to look and see if I do get current

333
00:16:04,400 --> 00:16:09,100
thread ID, I just want to see what that would do if I called it,

334
00:16:09,200 --> 00:16:09,700
right?

335
00:16:10,300 --> 00:16:12,900
So if in here, I have a thing where I'm going to do, get current

336
00:16:12,900 --> 00:16:20,200
thread ID and I just go, you know, red ID like so and I guess I'll put

337
00:16:20,200 --> 00:16:22,600
this in the winter to layer so we don't have to complicate things by

338
00:16:22,600 --> 00:16:24,400
including Windows here or anything like that.

339
00:16:24,500 --> 00:16:28,200
I just want to see what it is actually going to do.

340
00:16:30,100 --> 00:16:34,000
And so that we can have some some opinion about that, right?

341
00:16:34,100 --> 00:16:37,300
So here's when main right on the interest to win main, I'm going to

342
00:16:37,300 --> 00:16:39,900
see about getting that current thread ID.

343
00:16:40,000 --> 00:16:42,300
So I'm gonna pop over to bugger set a breakpoint win main.

344
00:16:42,400 --> 00:16:44,700
Oops again set a breakpoint in Maine.

345
00:16:46,900 --> 00:16:47,600
And here we go.

346
00:16:48,000 --> 00:16:49,700
And what I want to do is I want to look at the assembly.

347
00:16:49,700 --> 00:16:54,500
I want to see how expensive it is when it when it tries to get that

348
00:16:54,500 --> 00:16:55,600
out, right.

349
00:16:56,200 --> 00:16:58,900
And so you can see here here, we're in the assembly, right?

350
00:16:58,900 --> 00:17:00,000
Here's the code B.

351
00:17:00,600 --> 00:17:04,099
Here's the the parameters to the call, it's going to call out to this

352
00:17:04,099 --> 00:17:04,599
function.

353
00:17:04,800 --> 00:17:07,800
And so I want to do is I want to step in there and want to see what

354
00:17:07,800 --> 00:17:10,500
it's actually going to do goes into assume.

355
00:17:10,500 --> 00:17:13,000
This is like the the dynamic linking jump table.

356
00:17:13,700 --> 00:17:16,300
So let's go ahead in there and see what it does.

357
00:17:18,700 --> 00:17:24,500
So it looks like this is what I suspected, it looks like it's a really

358
00:17:24,500 --> 00:17:27,300
straightforward thing in order to get that thread ID.

359
00:17:27,300 --> 00:17:31,400
You can see that it's just referencing off the GS, which is segment.

360
00:17:31,600 --> 00:17:37,400
It's sort of loading in, I can sort of see if I can get some

361
00:17:37,700 --> 00:17:38,700
information here.

362
00:17:39,100 --> 00:17:40,600
It's loading into our ax.

363
00:17:40,600 --> 00:17:44,800
It's loading in this, this pointer here, I assume because you can see

364
00:17:44,800 --> 00:17:46,400
that's about to use it as a dressing.

365
00:17:46,600 --> 00:17:48,600
I assume that's our thread-local storage.

366
00:17:48,800 --> 00:17:50,800
So that's basically a pointer to memory.

367
00:17:50,800 --> 00:17:52,500
That's specific to our thread.

368
00:17:52,800 --> 00:17:55,500
I assume that this is some segmented addressing, right?

369
00:17:55,500 --> 00:17:59,200
Where the threads themselves have, each individual thread has a

370
00:17:59,200 --> 00:17:59,700
different

371
00:18:00,000 --> 00:18:02,000
Segment for addressing set.

372
00:18:02,200 --> 00:18:04,700
So then we go ahead and move off of that address.

373
00:18:04,700 --> 00:18:07,900
We move it into eax which is the return register.

374
00:18:08,000 --> 00:18:09,100
So there we go.

375
00:18:09,300 --> 00:18:15,200
So getting off our thread ID out for example is really a simple as a

376
00:18:15,200 --> 00:18:17,400
dressing off of this, this GS right here.

377
00:18:18,200 --> 00:18:23,700
So what that implies to me and you know, this this could be this could

378
00:18:23,700 --> 00:18:28,600
be a little bit presumptuous of me but what that implies to me.

379
00:18:29,600 --> 00:18:36,000
So, it's all I wanted to do was have a way of knowing what my thread

380
00:18:36,000 --> 00:18:40,300
actually was, it shouldn't be too difficult, right?

381
00:18:40,400 --> 00:18:43,700
It's just two instructions to access thread-local storage that the

382
00:18:43,700 --> 00:18:45,000
local storage for this thread.

383
00:18:46,200 --> 00:18:47,700
And again, we haven't really talked about that.

384
00:18:48,100 --> 00:18:51,100
So maybe I should just say really quickly what that is, but I'll

385
00:18:51,100 --> 00:18:52,400
postpone that for 45 seconds.

386
00:18:52,900 --> 00:18:55,100
I just have to figure out where my thread-local storage is by using

387
00:18:55,100 --> 00:18:59,900
this GS segment addressing and then I go ahead and address off of that

388
00:18:59,900 --> 00:19:01,600
into a fixed location to get the thread ID.

389
00:19:01,600 --> 00:19:05,400
But at some level, this is already a thread ID, right?

390
00:19:05,600 --> 00:19:08,800
Because whatever the address of my thread-local storage is, if that's

391
00:19:08,800 --> 00:19:10,500
unique to every thread, I could just use that.

392
00:19:11,100 --> 00:19:15,400
So really just RX just this one keyword move out of the GS segment.

393
00:19:16,900 --> 00:19:22,100
That one move is all I would need just one instruction and grab it.

394
00:19:25,200 --> 00:19:25,600
Sup.

395
00:19:27,900 --> 00:19:29,400
What I mean by thread-local storage?

396
00:19:30,300 --> 00:19:34,000
All, I mean by thread-local storage is most operating systems these

397
00:19:34,000 --> 00:19:36,600
days when a threads begins.

398
00:19:36,600 --> 00:19:38,500
So you saw us, we had create thread right?

399
00:19:38,500 --> 00:19:39,300
You remember this stuff?

400
00:19:39,300 --> 00:19:42,000
Hopefully for those of you who watch handmade here are regularly,

401
00:19:42,000 --> 00:19:44,900
we've got this function, create thread, we create the thread, we

402
00:19:44,900 --> 00:19:46,500
obviously get one thread of the beginning.

403
00:19:46,800 --> 00:19:49,500
When Windows calls are wind made, its calling it in a particular

404
00:19:49,500 --> 00:19:53,100
thread, it's our main thread and then we create other threads give

405
00:19:53,100 --> 00:19:54,000
them pointers to functions.

406
00:19:54,000 --> 00:19:56,900
Windows will create a thread for us, whatever that means to Windows

407
00:19:57,100 --> 00:19:57,600
and then

408
00:19:57,700 --> 00:20:02,000
Start executing the code at the function that we gave it at that time.

409
00:20:02,200 --> 00:20:02,900
On that thread.

410
00:20:02,900 --> 00:20:06,100
Now, when it creates the thread, both for our initial startup thread,

411
00:20:06,100 --> 00:20:10,500
and for the threads that we create, what it does, is it sets, aside,

412
00:20:10,500 --> 00:20:13,600
some memory that it's like, this is memory, that's going to be unique

413
00:20:13,600 --> 00:20:14,900
to this threat, right?

414
00:20:14,900 --> 00:20:17,800
It's like a little section of memory that's like this is for this

415
00:20:17,800 --> 00:20:21,800
thread and it sets up some known segment.

416
00:20:21,800 --> 00:20:25,300
Addressing some like some predefined stuff in the memory table

417
00:20:25,300 --> 00:20:25,900
basically.

418
00:20:27,800 --> 00:20:32,700
That's in fact, I think we might, there we go.

419
00:20:34,000 --> 00:20:37,800
It's actually right there in the actual registers you can see the GS

420
00:20:37,800 --> 00:20:39,100
segment right there.

421
00:20:39,700 --> 00:20:41,000
This is the value that it's actually.

422
00:20:41,000 --> 00:20:48,700
Got it sets up this concept of a location that's in the CPU registers

423
00:20:48,900 --> 00:20:52,800
in these extra segment registers right, which are again, things kind

424
00:20:52,800 --> 00:20:55,700
of that used to be like they were kind of a holdover from the old

425
00:20:55,700 --> 00:20:55,900
days.

426
00:20:55,900 --> 00:20:56,500
When you always

427
00:20:56,700 --> 00:20:57,900
has to do segmented addressing

428
00:21:00,100 --> 00:21:03,400
Out as we think about us and it's always flat but there's no reason

429
00:21:03,400 --> 00:21:07,000
you can't kind of consider there to be segments where you say oh I

430
00:21:07,000 --> 00:21:11,100
want to address off of a particular segment register and say like okay

431
00:21:11,300 --> 00:21:13,900
when I give you a value instead of you thinking, this is my normal

432
00:21:13,900 --> 00:21:14,500
memory.

433
00:21:16,000 --> 00:21:18,300
I want to tell you what segment, I'm going to go office.

434
00:21:18,300 --> 00:21:21,500
So if you look at here this is this is an example of I'm taking some

435
00:21:21,500 --> 00:21:25,300
address and I'm addressing 48, hex off of that address.

436
00:21:25,300 --> 00:21:26,100
I'm going to load it.

437
00:21:26,200 --> 00:21:29,900
That's just my normal standard addressing in sort of the default.

438
00:21:30,000 --> 00:21:32,300
Default segment, if you will of my virtual memory.

439
00:21:32,400 --> 00:21:36,500
This this GS segment is a way of saying, I want to address memory

440
00:21:36,900 --> 00:21:37,900
slightly differently.

441
00:21:37,900 --> 00:21:41,600
The address is based off of this other piece of information, right?

442
00:21:41,900 --> 00:21:45,300
And the reason that they use that in this case is because what they do

443
00:21:45,300 --> 00:21:48,500
is for every thread, when the operating system switches between

444
00:21:48,500 --> 00:21:51,800
threads, obviously restores the register state of the CPU.

445
00:21:51,800 --> 00:21:54,000
So like for example, if a thread is running, it gets preempted,

446
00:21:54,000 --> 00:21:56,900
another thread runs during that changeover, obviously it has to

447
00:21:56,900 --> 00:21:59,600
restore all the register State because whatever preamp something

448
00:21:59,600 --> 00:21:59,900
that's got

449
00:22:00,000 --> 00:22:03,100
See what the registers were because the code needs to be resumed at

450
00:22:03,100 --> 00:22:04,900
some point and have all those registers come back.

451
00:22:05,700 --> 00:22:08,900
One of the things that it restores are the segment registers.

452
00:22:09,200 --> 00:22:12,800
So each thread can have a segment register set to a different value

453
00:22:12,800 --> 00:22:16,900
that allows it to have effectively thread-local storage by saying any

454
00:22:16,900 --> 00:22:20,400
time you want to access some information that I believe to be specific

455
00:22:20,400 --> 00:22:21,600
to your thread.

456
00:22:21,600 --> 00:22:26,500
I will use the GS segment instead of normal and resting so that I can

457
00:22:26,500 --> 00:22:29,800
get you different information than what a different some

458
00:22:29,900 --> 00:22:31,600
Other thread would have gotten, right?

459
00:22:32,200 --> 00:22:34,400
And so something like that thread ID window.

460
00:22:34,400 --> 00:22:35,000
Zoe stores.

461
00:22:35,000 --> 00:22:39,400
It in exactly the same place for every thread in relative to the GS

462
00:22:39,400 --> 00:22:43,100
segment but that GSA went is actually pointing to a different place in

463
00:22:43,100 --> 00:22:45,400
memory for every thread, right?

464
00:22:46,300 --> 00:22:50,500
And so that's how that sort of situation works and that's you know

465
00:22:50,500 --> 00:22:52,200
that stuff is way before my time.

466
00:22:52,200 --> 00:22:54,300
I don't know really anything about segment addressing.

467
00:22:54,300 --> 00:22:56,400
I only know as much as I just said.

468
00:22:58,900 --> 00:23:03,500
You know, so I unfortunately can't really tell you much else about

469
00:23:03,500 --> 00:23:07,000
things like the GS segment or this, or these other segment registers

470
00:23:07,000 --> 00:23:12,300
like I that's out way outside my area of Competency for sure, but it's

471
00:23:12,300 --> 00:23:16,200
something that an old-school dust programmer would have known about a

472
00:23:16,200 --> 00:23:18,600
lot because segments were a much bigger deal back then.

473
00:23:20,700 --> 00:23:25,400
Because all memory addressing was all about segments all the time and

474
00:23:25,400 --> 00:23:28,800
it wasn't like you had this concept that one particular method of

475
00:23:28,800 --> 00:23:31,900
addressing was like the main way and then there were segments for

476
00:23:31,900 --> 00:23:38,800
special times, it was more like a little more sort of segments

477
00:23:38,800 --> 00:23:39,500
oriented than that.

478
00:23:40,100 --> 00:23:43,300
So anyway, what I can see there is that that's that's something that

479
00:23:43,300 --> 00:23:46,400
doesn't really require a function call at the end of the day.

480
00:23:47,400 --> 00:23:50,100
So what I'm kind of wondering is, is there some kind of intrinsic?

481
00:23:50,100 --> 00:23:50,500
I could use.

482
00:23:50,500 --> 00:23:54,000
I mean, I was like I just really do that directly myself, but is there

483
00:23:54,000 --> 00:23:54,900
some kind of intrinsic?

484
00:23:54,900 --> 00:23:57,000
I could use to get that.

485
00:23:57,000 --> 00:23:59,800
So for example, if I just want something like

486
00:24:01,000 --> 00:24:04,100
Thread ID, intrinsic some way to make it.

487
00:24:04,100 --> 00:24:04,900
Not have to drop.

488
00:24:04,900 --> 00:24:06,400
Drop a function call

489
00:24:07,600 --> 00:24:12,700
To do that every time and I don't know if it's likely this, this is

490
00:24:12,700 --> 00:24:14,300
not looking particularly good.

491
00:24:14,900 --> 00:24:18,200
This is this is talking about sort of other other sort of stuff and

492
00:24:18,200 --> 00:24:20,700
what's kind of frustrating about that as we know it's possible, right?

493
00:24:20,700 --> 00:24:22,500
It's just a simple mob.

494
00:24:24,100 --> 00:24:27,400
So it's kind of unfortunate to to think about that.

495
00:24:27,400 --> 00:24:29,800
But let's see in win32.

496
00:24:30,600 --> 00:24:34,000
Let's see if there's any know, if there's any real way to do that

497
00:24:34,400 --> 00:24:37,000
access to the ti be so you can see like there.

498
00:24:37,200 --> 00:24:42,000
Using inline as in there to do it which is you know again not what I

499
00:24:42,000 --> 00:24:42,900
would really like to do.

500
00:24:43,100 --> 00:24:46,700
Here we go with using Microsoft intrinsics, so they've got to

501
00:24:46,700 --> 00:24:48,900
underscore read DFS word there.

502
00:24:49,300 --> 00:24:52,900
So, you know, maybe we can do something a little bit cranky here.

503
00:24:53,100 --> 00:24:56,000
And again, since this is debug code, one of the benefits is even if

504
00:24:56,000 --> 00:24:59,200
what we do is a little bit janky and doesn't work reliably on end user

505
00:24:59,200 --> 00:25:01,800
system, it's okay because it's code will never run on an end user

506
00:25:01,800 --> 00:25:05,600
system unless we make a mistake and ship it, but you know what, we

507
00:25:05,600 --> 00:25:06,300
would fix that.

508
00:25:06,400 --> 00:25:07,000
So the idea is,

509
00:25:07,200 --> 00:25:10,700
No the profile blocks will get come we'll get compiled out and so we

510
00:25:10,700 --> 00:25:13,900
don't have to worry if it only works sometimes or some in some places

511
00:25:13,900 --> 00:25:15,900
or only on x 64 or stuff like that.

512
00:25:16,000 --> 00:25:21,000
That's actually, okay, so let's take a look and see M SV C compiler,

513
00:25:21,000 --> 00:25:23,700
intrinsics, I want to see if I just look

514
00:25:25,200 --> 00:25:26,400
Sort of directly in there.

515
00:25:26,800 --> 00:25:31,200
Can I find anything that's like talks about threads or anything like

516
00:25:31,200 --> 00:25:31,400
that?

517
00:25:31,400 --> 00:25:33,200
It doesn't look, doesn't look like it.

518
00:25:34,400 --> 00:25:37,500
So let's look at moves there is that move DFS?

519
00:25:37,500 --> 00:25:38,900
Word intrinsic there.

520
00:25:39,300 --> 00:25:42,300
Let's just take a look and see if we've got it.

521
00:25:44,000 --> 00:25:45,300
Move, move move.

522
00:25:46,400 --> 00:25:47,500
Let's see.

523
00:25:48,200 --> 00:25:49,600
Doesn't look good here.

524
00:25:50,000 --> 00:25:51,300
Does not look good.

525
00:25:54,700 --> 00:26:05,700
Let's see, access GS segment intrinsic or access GS intrinsic and it's

526
00:26:05,700 --> 00:26:06,200
DC.

527
00:26:08,800 --> 00:26:10,300
Let's see on Microsoft.

528
00:26:10,300 --> 00:26:11,900
S are some details.

529
00:26:13,400 --> 00:26:14,000
Let's see.

530
00:26:14,000 --> 00:26:17,800
It just for should not relate to the stock at all an extra stretchy

531
00:26:17,800 --> 00:26:19,300
part of the operating system data.

532
00:26:20,400 --> 00:26:21,400
Instead of FS segment.

533
00:26:21,400 --> 00:26:24,800
Descriptor, let's see FS.

534
00:26:24,800 --> 00:26:26,700
+ G SI B and long mode.

535
00:26:27,000 --> 00:26:29,200
Just are only available in kernel mode.

536
00:26:29,800 --> 00:26:31,700
Oh, that's unfortunate.

537
00:26:31,800 --> 00:26:33,600
You know, second area is just pointing to some kernel mode.

538
00:26:33,600 --> 00:26:35,400
You won't need to the address person.

539
00:26:35,400 --> 00:26:37,200
I don't know what these for these would be

540
00:26:39,500 --> 00:26:42,000
Well, that'd be too bad.

541
00:26:42,400 --> 00:26:45,000
That was true about this.

542
00:26:46,300 --> 00:26:49,600
Read memory location from a location for Side by an officer.

543
00:26:49,600 --> 00:26:51,100
Let's begin the GS segment.

544
00:26:52,400 --> 00:26:56,800
Well what do you know that sounds like exactly what I want?

545
00:26:57,000 --> 00:26:58,500
So it does look like that.

546
00:26:58,900 --> 00:26:59,700
Read G.

547
00:27:00,300 --> 00:27:03,800
GSD word would be sort of exactly what we would want.

548
00:27:04,200 --> 00:27:05,300
So I don't know.

549
00:27:05,700 --> 00:27:08,000
Like I said, not something that I've worked with before.

550
00:27:08,300 --> 00:27:10,200
I'm just kind of winging it here.

551
00:27:12,100 --> 00:27:14,500
So I'm going to go up, I'm gonna go up in here and I'm just going to

552
00:27:14,500 --> 00:27:20,500
say you know what, folks, let's go ahead and read GSD word and I'm

553
00:27:20,500 --> 00:27:22,700
also going to do, you know what I'm going to do too.

554
00:27:23,400 --> 00:27:27,900
I'm going to go ahead and say that, maybe we just straight-up.

555
00:27:27,900 --> 00:27:29,800
Look at exactly what that thing.

556
00:27:30,000 --> 00:27:34,000
Is doing because remember, it was, oh, hello.

557
00:27:34,300 --> 00:27:35,700
Nope, not cite.

558
00:27:35,700 --> 00:27:37,000
Don't yet, stop it.

559
00:27:37,100 --> 00:27:39,500
Stop, don't do not.

560
00:27:39,500 --> 00:27:40,100
There we go.

561
00:27:40,800 --> 00:27:43,500
So I'm just going to go ahead and step in there or not.

562
00:27:43,500 --> 00:27:46,200
I'm going to go ahead and step in there.

563
00:27:46,200 --> 00:27:50,600
I said, okay, I'm gonna go ahead and step in there after the jump.

564
00:27:51,200 --> 00:27:53,200
Double jump, double jump.

565
00:27:54,300 --> 00:27:57,300
Yep, the compiler Windows likes to double jump.

566
00:28:00,000 --> 00:28:01,500
It found that Metroid upgrade.

567
00:28:02,800 --> 00:28:06,600
So you can see we're accessing 30th off of that, right?

568
00:28:07,500 --> 00:28:11,300
For starters and I assume that is our thread-local storage segment.

569
00:28:11,800 --> 00:28:12,500
That's what I'm assuming.

570
00:28:12,500 --> 00:28:16,800
Anyway, so you could imagine us reading a d word off of that segment,

571
00:28:16,800 --> 00:28:19,900
like, so that's going to get us back a pointer.

572
00:28:20,100 --> 00:28:24,700
Apparently, this is our thread-local storage.

573
00:28:25,800 --> 00:28:31,600
I guess, again, totally just going by the disassembly here, I have no

574
00:28:31,600 --> 00:28:32,400
idea what I'm doing.

575
00:28:32,600 --> 00:28:38,500
Literally, I'm just reverse engineering pretty much exactly what I

576
00:28:38,500 --> 00:28:41,900
think I need to do in order to not have to do a double system, a jump

577
00:28:41,900 --> 00:28:43,600
into a system call and crap like this.

578
00:28:43,900 --> 00:28:47,300
So I do that and then I get back that pointer

579
00:28:48,400 --> 00:28:52,500
And then I'm going to go ahead and here and get that 48h off of the

580
00:28:52,500 --> 00:28:53,700
pointer, right?

581
00:28:53,800 --> 00:28:56,100
So that's going to be a reference off of there.

582
00:28:56,900 --> 00:29:00,500
So, yeah, so when I do this well, you know what, it's reading, a

583
00:29:00,500 --> 00:29:01,200
pointer.

584
00:29:01,300 --> 00:29:03,100
So Daddy words, not going to do it.

585
00:29:03,100 --> 00:29:05,200
Do I have the ability to read a quadword?

586
00:29:05,900 --> 00:29:06,400
I do.

587
00:29:06,400 --> 00:29:09,200
So I can read a quad word out there, right?

588
00:29:09,600 --> 00:29:12,100
So, I'm going to assume that that's a pointer.

589
00:29:12,100 --> 00:29:13,700
And again, it's reading a d word app.

590
00:29:13,700 --> 00:29:16,000
It's a d word the next time around, right?

591
00:29:16,000 --> 00:29:18,000
It's a d word, read.

592
00:29:18,200 --> 00:29:20,700
I'm going to do is it's going to steam this points to a d word.

593
00:29:20,700 --> 00:29:21,400
There it is.

594
00:29:21,500 --> 00:29:24,300
I'm then going to go ahead and grab it.

595
00:29:24,700 --> 00:29:31,100
This is our thread ID, number two and I'm just going to say okay so 48

596
00:29:31,100 --> 00:29:31,600
hex.

597
00:29:31,800 --> 00:29:35,200
Here's my thread-local storage although I guess technically I want

598
00:29:35,200 --> 00:29:37,600
this as a you ate so I can address off of it as 48.

599
00:29:39,300 --> 00:29:42,000
I thread-local storage plus 48.

600
00:29:43,100 --> 00:29:49,800
If I treat that as a you 32 and then dereference it, I believe that

601
00:29:49,800 --> 00:29:51,300
will give me the thing that I want.

602
00:29:51,300 --> 00:29:53,000
Now that may be protected memory.

603
00:29:53,000 --> 00:29:54,700
I don't know if I can even access that.

604
00:29:54,700 --> 00:29:57,200
I didn't see a ring transition there.

605
00:29:57,200 --> 00:29:59,900
So I don't know if that's true but I don't know if it

606
00:30:00,000 --> 00:30:00,900
Show me that in the debugger.

607
00:30:00,900 --> 00:30:08,400
Anyway, read gqd word is snot found did Ice.

608
00:30:09,000 --> 00:30:11,400
Oh whoops, it's G.

609
00:30:12,700 --> 00:30:13,300
St.

610
00:30:13,800 --> 00:30:14,300
There we go.

611
00:30:16,700 --> 00:30:17,500
There we go.

612
00:30:17,500 --> 00:30:18,400
Let's see.

613
00:30:19,000 --> 00:30:19,700
Bat.

614
00:30:22,000 --> 00:30:22,400
So I don't know.

615
00:30:22,400 --> 00:30:24,900
This is going to do it all again, I'm totally just playing around here

616
00:30:24,900 --> 00:30:26,700
to see what I can do.

617
00:30:27,300 --> 00:30:30,200
There's the thread ID, so it's thinking it's hex.

618
00:30:31,100 --> 00:30:32,800
1094 is the thread ID.

619
00:30:32,900 --> 00:30:36,400
Here's my thread-local storage looks like looks like it gave it back

620
00:30:36,400 --> 00:30:38,800
to me and it looks like it's the same value as I was getting before or

621
00:30:38,800 --> 00:30:42,000
something similar, like it's up in that that range so that's good.

622
00:30:42,100 --> 00:30:43,200
Grab that thread ID.

623
00:30:43,600 --> 00:30:44,400
What do you know?

624
00:30:44,700 --> 00:30:45,700
Look at that.

625
00:30:46,100 --> 00:30:47,400
Look at that folks.

626
00:30:48,300 --> 00:30:52,800
So now, if we take a look at what happens in the disassembly, right?

627
00:30:54,600 --> 00:30:58,700
We can see that this is actually just totally perfect, right?

628
00:30:58,700 --> 00:31:02,100
It's just one instruction even to get that GS pointer, which I know

629
00:31:02,100 --> 00:31:03,200
has to be correct.

630
00:31:03,200 --> 00:31:05,800
I can even ignore the thread-local storage part.

631
00:31:05,800 --> 00:31:08,500
Probably, although I don't know necessarily, I don't know if I need a

632
00:31:08,500 --> 00:31:09,300
second mauve.

633
00:31:09,300 --> 00:31:12,800
But tit, in order to get the windows thread ID, doing one extra

634
00:31:12,800 --> 00:31:16,800
instruction at this at every block start not a huge deal.

635
00:31:17,000 --> 00:31:18,200
Might be worth it.

636
00:31:18,400 --> 00:31:20,400
So that's kind of cool, right?

637
00:31:20,400 --> 00:31:21,800
That is kind of cool.

638
00:31:23,100 --> 00:31:24,000
I am pretty happy.

639
00:31:24,200 --> 00:31:24,800
About that.

640
00:31:24,800 --> 00:31:28,800
So let's just take a look at what it would take to go ahead and throw

641
00:31:28,800 --> 00:31:29,600
that in there.

642
00:31:29,700 --> 00:31:32,600
I'm going to jump into handmade debug here when we're doing reach

643
00:31:32,600 --> 00:31:34,200
record, debug event.

644
00:31:34,500 --> 00:31:38,300
If I wanted to make that happen it would be this, right?

645
00:31:38,700 --> 00:31:40,100
And there's our thread ID.

646
00:31:40,100 --> 00:31:43,600
And so if I then want to do, put that in thread index, I can do it

647
00:31:43,700 --> 00:31:44,300
like that.

648
00:31:44,300 --> 00:31:47,000
Now, we do have a problem, which I think our thread index is only you

649
00:31:47,000 --> 00:31:47,500
16.

650
00:31:47,500 --> 00:31:49,900
In fact, you can see right there that it is only.

651
00:31:49,900 --> 00:31:51,500
It's only a you 16.

652
00:31:52,700 --> 00:31:54,000
So there's that since we don't have

653
00:31:54,100 --> 00:31:55,500
Have the core index yet?

654
00:31:55,500 --> 00:31:58,500
I could just say, what the heck?

655
00:31:58,600 --> 00:31:59,800
Make this be a 32?

656
00:31:59,800 --> 00:32:02,100
So that way I don't have to worry when it comes back, but for now we

657
00:32:02,100 --> 00:32:03,200
could just chop it.

658
00:32:03,900 --> 00:32:04,900
We'll see how that goes.

659
00:32:05,200 --> 00:32:06,400
Oops, I met you 16.

660
00:32:10,000 --> 00:32:10,900
D, there we go.

661
00:32:11,600 --> 00:32:12,900
And so there we go.

662
00:32:13,400 --> 00:32:20,100
Now I feel like in general, that is just totally fine.

663
00:32:20,100 --> 00:32:25,400
And if we go into handmade intrinsics inside compiler msv, see, I can

664
00:32:25,400 --> 00:32:28,200
then sort of abstract this out because I don't know that that's

665
00:32:28,200 --> 00:32:29,900
actually going to work anywhere else.

666
00:32:30,200 --> 00:32:33,900
We probably mean to use a different technique on another platform.

667
00:32:37,700 --> 00:32:40,400
so if we want to get back thread ID,

668
00:32:45,100 --> 00:32:49,200
Like so then we need to do this on MSNBC or on Windows.

669
00:32:49,200 --> 00:32:51,200
I should say however you want to think about that.

670
00:32:51,300 --> 00:32:52,800
At the moment, they're the same.

671
00:32:52,900 --> 00:32:56,100
We might have to differentiate more by platforms later, but there's

672
00:32:56,200 --> 00:32:58,200
what that's what we would do, right?

673
00:32:59,100 --> 00:32:59,800
We do that region.

674
00:33:00,000 --> 00:33:05,400
Word the thread-local storage so on, so yeah, so that's pretty cool.

675
00:33:05,700 --> 00:33:08,700
That's really all we would need to do and then we just return that

676
00:33:08,700 --> 00:33:12,600
value and we are good to go at that point.

677
00:33:12,900 --> 00:33:18,900
So in theory, we can replace this with get thread ID and now we're

678
00:33:18,900 --> 00:33:23,900
still platform safe to a certain degree meaning that we can still run

679
00:33:23,900 --> 00:33:26,400
our profiles on other platforms by implementing those functions once

680
00:33:26,400 --> 00:33:29,000
we are actually on those other platforms.

681
00:33:29,400 --> 00:33:29,700
So,

682
00:33:30,000 --> 00:33:30,400
Are we go?

683
00:33:30,700 --> 00:33:33,100
Okay, so that's, I believe.

684
00:33:33,100 --> 00:33:37,000
Now gives us accurate thread, IDs, and Theory, as part of our profiler

685
00:33:37,000 --> 00:33:40,300
does not involve any operating system nonsense and should not flows

686
00:33:40,300 --> 00:33:43,800
down especially in an optimized build when that stuff gets in lined.

687
00:33:44,200 --> 00:33:48,500
So if we go over here and we check like build up at if I switch this

688
00:33:48,500 --> 00:33:52,100
to an optimized build, which is what we would be using for profiling

689
00:33:52,100 --> 00:33:54,400
that in theory, I should be in pretty good shape.

690
00:33:56,200 --> 00:33:57,600
I would think so.

691
00:33:57,600 --> 00:33:58,200
There we go.

692
00:33:58,200 --> 00:34:01,800
That's that's where we're at at the moment, and we've got a thread

693
00:34:01,800 --> 00:34:02,200
ideas now.

694
00:34:02,200 --> 00:34:05,900
So that should give us, plenty of ability to sort of be a little bit

695
00:34:05,900 --> 00:34:08,900
more fancy and get a little bit more data in here.

696
00:34:09,600 --> 00:34:12,900
So that went a lot more that went a lot easier than I thought it was

697
00:34:12,900 --> 00:34:13,500
going to go.

698
00:34:14,000 --> 00:34:17,699
I lucked out assuming that we're actually getting a reliable thread ID

699
00:34:17,699 --> 00:34:18,000
out of that.

700
00:34:18,000 --> 00:34:21,400
That was really smooth.

701
00:34:21,800 --> 00:34:23,900
So yeah.

702
00:34:24,000 --> 00:34:25,500
So we can go ahead and start right now.

703
00:34:26,000 --> 00:34:27,699
Bring together a better debug view than this one.

704
00:34:27,699 --> 00:34:31,300
Now that we have that more information and so what I'd like to do is

705
00:34:31,300 --> 00:34:32,600
I'd like to start.

706
00:34:34,500 --> 00:34:42,000
I think what I'd like to do is start having a concept if you will of

707
00:34:42,000 --> 00:34:45,199
when blocks begin and end in this sort of stuff, I'd like to start

708
00:34:45,199 --> 00:34:48,800
building more of a timeline view of things.

709
00:34:49,000 --> 00:34:51,699
I'd like to turn this thing down here, because I really like these

710
00:34:51,699 --> 00:34:52,699
kinds of displays.

711
00:34:52,900 --> 00:34:55,400
I'd like to turn this thing down here into something a little more.

712
00:34:55,900 --> 00:35:01,500
Well, that shows this kind of what's going on in terms of how our code

713
00:35:01,500 --> 00:35:04,000
is, who's taking up the time in our code.

714
00:35:06,200 --> 00:35:07,600
It's kind of like a pie chart, right?

715
00:35:07,600 --> 00:35:10,100
Every one of these lines is showing us what's going on where and you

716
00:35:10,100 --> 00:35:12,800
can already see how easy it is to tell.

717
00:35:13,200 --> 00:35:16,100
If we added some ability to like figure out what functions these were

718
00:35:16,100 --> 00:35:19,300
or whatever, you can already see very dramatically, who's taking the

719
00:35:19,300 --> 00:35:20,200
time, right?

720
00:35:20,200 --> 00:35:22,600
The giant blue bar is the problem.

721
00:35:22,800 --> 00:35:25,100
Not the little tiny green bar, right?

722
00:35:25,100 --> 00:35:28,700
And so I like having that ability because that's the kind of thing

723
00:35:28,700 --> 00:35:32,400
that allows me to sort of get more information about what is

724
00:35:32,500 --> 00:35:33,100
occurring.

725
00:35:33,800 --> 00:35:34,400
So okay.

726
00:35:35,100 --> 00:35:38,700
Since we have about 20 minutes left in the Stream.

727
00:35:41,100 --> 00:35:42,000
Yeah.

728
00:35:42,400 --> 00:35:44,900
Since we have about 20 minutes left in the Stream.

729
00:35:45,100 --> 00:35:50,400
I think, what I'll do is I'll sort of postponed improving the of is

730
00:35:51,300 --> 00:35:54,500
itself till tomorrow, when we can start right at the beginning on

731
00:35:54,500 --> 00:35:59,600
improving of is what I'd like to focus on today is getting rid of this

732
00:35:59,600 --> 00:35:59,800
thing.

733
00:36:00,200 --> 00:36:05,000
If I can so if you remember we pass this debug frame and input info

734
00:36:05,000 --> 00:36:08,600
thing in here and the only reason I was doing that is because there's

735
00:36:08,600 --> 00:36:15,000
no way to get these debug counters to to work at all on the platform

736
00:36:15,000 --> 00:36:15,800
side of things.

737
00:36:16,000 --> 00:36:19,300
But what I'd like to do is figure out a way that we can turn that

738
00:36:19,300 --> 00:36:19,900
around.

739
00:36:20,000 --> 00:36:24,400
I'd like to figure out a way that we could have the, debug counters

740
00:36:26,200 --> 00:36:26,300
that.

741
00:36:26,300 --> 00:36:28,600
We, I'd like to figure out a way that we could have it so that the

742
00:36:28,600 --> 00:36:29,700
platform code,

743
00:36:31,300 --> 00:36:36,400
Can be unified with our regular debug code such that we can use the

744
00:36:36,400 --> 00:36:43,100
counters on both sides of the of the of the program, which is a little

745
00:36:43,100 --> 00:36:43,600
tricky.

746
00:36:43,800 --> 00:36:44,900
But I think we could do it.

747
00:36:45,400 --> 00:36:47,600
There's I can't think of any reason why head why we can't do it just a

748
00:36:47,600 --> 00:36:48,300
little bit tricky.

749
00:36:48,500 --> 00:36:50,000
We have three compilation units.

750
00:36:50,200 --> 00:36:52,800
It seems like we should be able to have three arrays and have it work

751
00:36:52,800 --> 00:36:53,500
properly.

752
00:36:53,700 --> 00:36:56,500
And in theory, they should all be able to write into the global debug

753
00:36:56,500 --> 00:36:57,700
event array as well.

754
00:36:58,200 --> 00:37:00,400
So really, the only thing that's a little bit tricky.

755
00:37:00,600 --> 00:37:05,800
Is the handmade debug .h code has to be factored in such a way that

756
00:37:05,800 --> 00:37:08,600
would allow me to expose the important parts of it.

757
00:37:08,900 --> 00:37:10,900
The part that allows you to record a debug event.

758
00:37:10,900 --> 00:37:16,400
For example, that has to be accessible from the actual handmade

759
00:37:16,400 --> 00:37:17,800
platform.sh itself.

760
00:37:18,600 --> 00:37:22,500
And so it kind of has to move over, right?

761
00:37:23,200 --> 00:37:24,500
So I'm going to go ahead and do that.

762
00:37:24,500 --> 00:37:26,200
See how much of it I can get done in 15 minutes?

763
00:37:26,200 --> 00:37:27,600
Hopefully, most of it.

764
00:37:27,600 --> 00:37:30,400
And so that way tomorrow we can focus on improving the visibility.

765
00:37:30,500 --> 00:37:32,300
Is so I'm going to go ahead and start with that.

766
00:37:33,100 --> 00:37:37,100
Again, we kind of you can, you can sort of see it happening here, how

767
00:37:37,100 --> 00:37:40,700
record debug event work and how time block works here.

768
00:37:40,900 --> 00:37:43,100
So, what I'm going to do is, I'm going to try to pull those out, put

769
00:37:43,100 --> 00:37:46,800
them into the platform layer here, so that they actually are part of

770
00:37:46,800 --> 00:37:48,800
this this system right here.

771
00:37:49,200 --> 00:37:54,600
Okay, so let's do that, if I just go ahead and grab this out like so.

772
00:37:56,900 --> 00:38:00,900
And then I take this stuff and do the same.

773
00:38:03,100 --> 00:38:06,800
Then that's all the code that I actually need, right?

774
00:38:07,400 --> 00:38:09,100
And handmade intrinsics.

775
00:38:09,700 --> 00:38:13,600
These intrinsics, I guess the other thing is that atomic

776
00:38:15,200 --> 00:38:16,800
The atomics that are used in here.

777
00:38:17,200 --> 00:38:21,800
So we've got a couple of them, we would need the adieu 64, right?

778
00:38:21,800 --> 00:38:24,400
That guy, Atomic add 64.

779
00:38:24,400 --> 00:38:26,400
We've got two of those that are happening there.

780
00:38:27,100 --> 00:38:27,500
Oh, wait.

781
00:38:27,500 --> 00:38:31,200
No, we don't, this is, this is not necessary anymore, I guess, right?

782
00:38:31,200 --> 00:38:33,800
So actually, a bunch of this stuff can be removed.

783
00:38:35,200 --> 00:38:36,300
I'll leave that for.

784
00:38:36,600 --> 00:38:38,000
Well, you know, I might as well as do it.

785
00:38:38,200 --> 00:38:39,100
We don't need it right now.

786
00:38:39,600 --> 00:38:43,400
Goodbye, so record, debug event on the start and the end is all we

787
00:38:43,400 --> 00:38:44,700
really need there as far as this

788
00:38:44,800 --> 00:38:45,700
This is concerned.

789
00:38:45,700 --> 00:38:48,000
We need that counter in it, that's the needs to be there.

790
00:38:48,300 --> 00:38:50,800
However, some of this other stuff does not necessarily need to be

791
00:38:50,800 --> 00:38:53,100
there, we've got that hit count.

792
00:38:54,400 --> 00:38:56,300
I don't think we need to store any of that stuff.

793
00:38:57,400 --> 00:38:59,800
Looks like debug record star record.

794
00:39:00,000 --> 00:39:02,800
Doesn't really need to be stored either.

795
00:39:03,800 --> 00:39:09,600
So I think we're just looking at this if I'm not very much in error

796
00:39:10,800 --> 00:39:21,100
about that, I would say that looks pretty much like what I need right

797
00:39:21,500 --> 00:39:28,200
and to do record the hit count value here so that we can get those

798
00:39:28,300 --> 00:39:29,700
sort of numerical counter

799
00:39:30,000 --> 00:39:33,600
As vac potentially, we may want to add that a little bit later but

800
00:39:33,600 --> 00:39:35,800
that's not really relevant to what we're doing right now at all.

801
00:39:35,800 --> 00:39:37,000
It's something I wanted to mention.

802
00:39:37,600 --> 00:39:40,800
So that's all the code that we need for the for that block record,

803
00:39:40,800 --> 00:39:41,700
debug event.

804
00:39:41,700 --> 00:39:43,500
Again needs the atomic ad.

805
00:39:45,400 --> 00:39:49,300
And it needs the our dtsc, which we also don't really have our own

806
00:39:49,300 --> 00:39:53,400
call for, which we should have our own call for, and then we have that

807
00:39:53,400 --> 00:39:54,300
get thread ID.

808
00:39:54,500 --> 00:40:00,300
So those intrinsics, I don't know, transics, they are not in here at

809
00:40:00,300 --> 00:40:01,700
the moment, right?

810
00:40:02,300 --> 00:40:04,900
So the intrinsics would have to get moved in here as well.

811
00:40:05,500 --> 00:40:09,900
Not any of these other ones, these are all fine, but just these ones

812
00:40:09,900 --> 00:40:14,000
specifically right here, the atomics would have to get moved in as

813
00:40:14,000 --> 00:40:14,300
well.

814
00:40:14,900 --> 00:40:17,500
So I've got to do that, really nothing I can do about it because I

815
00:40:17,500 --> 00:40:20,800
need access to those so that's going to have to happen.

816
00:40:20,800 --> 00:40:22,600
But first, let's talk about the more pressing.

817
00:40:22,600 --> 00:40:25,800
That's, that's just a mess matter of, kind of cleaning this up a

818
00:40:25,800 --> 00:40:29,900
little bit and just doing it, but the more pressing problem, right?

819
00:40:30,200 --> 00:40:34,900
Is, how do we find the addresses to write to for these for these guys,

820
00:40:35,100 --> 00:40:35,400
right?

821
00:40:35,400 --> 00:40:39,900
How do we actually know the location of the rights?

822
00:40:39,900 --> 00:40:41,400
For any of these things?

823
00:40:41,400 --> 00:40:42,500
Like these debug events?

824
00:40:45,500 --> 00:40:46,000
Right.

825
00:40:49,500 --> 00:40:50,000
so,

826
00:40:52,000 --> 00:40:56,000
That part is a little bit trickier and I got to think it through

827
00:40:56,600 --> 00:41:00,500
because if you take a look at what happens here, this this right here

828
00:41:01,300 --> 00:41:07,100
and this right here are both sort of Global's that need to be

829
00:41:07,300 --> 00:41:09,300
available to the debug system.

830
00:41:09,300 --> 00:41:12,200
So that whenever you come through here and you're going to use them,

831
00:41:12,700 --> 00:41:15,500
you have to have a way of getting right.

832
00:41:15,500 --> 00:41:20,600
You have to have a way of knowing what we're what those pointers are.

833
00:41:20,800 --> 00:41:21,600
There's two

834
00:41:21,700 --> 00:41:26,000
Pointers and both pointers need to be respected in some way.

835
00:41:27,500 --> 00:41:31,000
So I don't necessarily know what the easiest way to do.

836
00:41:31,000 --> 00:41:31,800
That would be

837
00:41:36,000 --> 00:41:40,200
I feel like probably what we could do is make it so that they're

838
00:41:40,200 --> 00:41:41,600
always stored.

839
00:41:44,500 --> 00:41:49,100
They're always kind of stored on the platform's layer side, right?

840
00:41:49,100 --> 00:41:53,900
I mean, we can make it so that those are declared and, and they live

841
00:41:53,900 --> 00:41:58,200
on the platform of your side, when the dll is loaded, we can make it

842
00:41:58,200 --> 00:41:58,800
so that

843
00:42:00,000 --> 00:42:04,000
It is those global values are initialized at that startup time.

844
00:42:06,000 --> 00:42:08,700
I don't think that would be particularly difficult to do.

845
00:42:09,000 --> 00:42:15,500
I also don't know if we couldn't possibly just have it sink those

846
00:42:21,200 --> 00:42:25,700
I feel like dll binding should actually allow us to do.

847
00:42:26,800 --> 00:42:30,900
I haven't done this in a very long time, but I feel like, dll binding.

848
00:42:32,000 --> 00:42:36,700
Should be able to patch the address of the global just fine.

849
00:42:38,500 --> 00:42:41,800
so, I think

850
00:42:43,400 --> 00:42:45,400
Deco, spec import data.

851
00:42:46,600 --> 00:42:47,700
I think.

852
00:42:49,900 --> 00:42:54,500
We can just make it just plain work.

853
00:42:55,300 --> 00:42:59,000
So let's see if I see if you're outside.

854
00:42:59,000 --> 00:43:03,400
The deal was guess it's a convenient that removes labor Direction.

855
00:43:03,400 --> 00:43:06,000
When you import data from a dll you still have to go through the

856
00:43:06,000 --> 00:43:09,600
import address table before Douglass Park dealer import, this menu.

857
00:43:09,600 --> 00:43:11,900
I'd remember do next eleven direction, right?

858
00:43:12,100 --> 00:43:12,500
Okay.

859
00:43:12,500 --> 00:43:13,100
And access to that.

860
00:43:13,100 --> 00:43:16,400
So the dll you do that when you marked as like deal Imports and

861
00:43:16,400 --> 00:43:19,100
programmatic interested in the interaction table, the energy code for

862
00:43:19,100 --> 00:43:19,400
you,

863
00:43:19,700 --> 00:43:22,100
You no longer have to worry about the steps above as stated

864
00:43:22,100 --> 00:43:22,400
previously.

865
00:43:22,400 --> 00:43:25,900
Do not use things like deal import decoration on the data when

866
00:43:25,900 --> 00:43:30,400
building the dll functions within the dll do not use the import

867
00:43:30,400 --> 00:43:33,200
address table to access the data object, therefore, you will not have

868
00:43:33,200 --> 00:43:35,000
the extra love in Direction present.

869
00:43:35,200 --> 00:43:35,600
So.

870
00:43:35,600 --> 00:43:37,700
Okay, so that's actually probably what we want.

871
00:43:37,700 --> 00:43:42,500
Then, what that means is that we can leave it declared and operating

872
00:43:42,600 --> 00:43:46,200
the way that it was before, where it's actually the data's actually in

873
00:43:46,200 --> 00:43:47,600
the dll itself.

874
00:43:51,500 --> 00:43:52,900
And then the platform layer.

875
00:43:54,500 --> 00:43:55,500
Just grabs it.

876
00:43:56,400 --> 00:43:57,400
We could do that.

877
00:44:07,900 --> 00:44:09,300
But is that what we really want?

878
00:44:13,800 --> 00:44:14,700
It's so tricky.

879
00:44:15,900 --> 00:44:17,900
It's so tricky.

880
00:44:21,700 --> 00:44:22,600
Here's what I'm going to do.

881
00:44:23,900 --> 00:44:25,200
Here's what I'm going to do.

882
00:44:26,400 --> 00:44:31,500
I'm going to go ahead and say that.

883
00:44:31,500 --> 00:44:34,300
Yeah, I'm going to consolidate this a little bit.

884
00:44:34,900 --> 00:44:39,100
So what I'm going to do first of all is I'm going to say that we have

885
00:44:39,100 --> 00:44:43,600
some kind of a known way of addressing this thing so I'm going to

886
00:44:43,600 --> 00:44:45,300
simplify this a little bit down.

887
00:44:45,700 --> 00:44:48,700
So if I take a look at this here, you can see how we've got this all

888
00:44:48,700 --> 00:44:51,800
set up and it's kind of got this this whole situation going where we

889
00:44:51,800 --> 00:44:53,200
declare these things and

890
00:44:53,600 --> 00:44:57,500
Different places and have different stuff that going on, I don't know

891
00:44:57,500 --> 00:44:59,800
that we need some of the things that we were doing.

892
00:45:00,100 --> 00:45:04,100
So, for example, in handmade the CPP I think it is or handmade debug

893
00:45:04,100 --> 00:45:04,400
s.

894
00:45:04,500 --> 00:45:06,900
So, we include handmade debug way down at the bottom, right.

895
00:45:07,100 --> 00:45:09,500
You can kind of see the way that we did that.

896
00:45:10,900 --> 00:45:13,700
Is we did, you know, we Define these things here.

897
00:45:14,500 --> 00:45:16,100
We no longer really care.

898
00:45:16,100 --> 00:45:19,600
How many of those things there were we don't iterate over the debug

899
00:45:19,600 --> 00:45:21,800
record array ever, right?

900
00:45:22,100 --> 00:45:23,600
That's not something that we actually care.

901
00:45:23,600 --> 00:45:25,500
Well, I know that's not true.

902
00:45:28,000 --> 00:45:29,000
That's not quite true.

903
00:45:30,300 --> 00:45:33,000
Alright, so, but it doesn't really change my plan.

904
00:45:33,600 --> 00:45:37,100
So what I'm thinking is, can I consolidate this into a thing that's a

905
00:45:37,100 --> 00:45:40,400
little bit cleaner in terms of how you

906
00:45:40,500 --> 00:45:42,400
Actually access it, right?

907
00:45:42,700 --> 00:45:44,800
Can we do something where we say?

908
00:45:44,800 --> 00:45:48,900
All right, the thing that we're actually talking about here is going

909
00:45:48,900 --> 00:45:50,700
to be a struct, right?

910
00:45:51,000 --> 00:45:56,500
And that struct is going to have a debug record, debug record array

911
00:45:56,600 --> 00:45:59,600
thing in it and there's going to be three of them, because that's how

912
00:45:59,600 --> 00:46:01,900
many translation units we have.

913
00:46:02,000 --> 00:46:05,500
There's also going to be this stuff in it, right?

914
00:46:05,500 --> 00:46:09,600
There's going to be the, you 64 for the defendant array index, debug

915
00:46:09,600 --> 00:46:10,300
event thing.

916
00:46:10,400 --> 00:46:10,700
Thing.

917
00:46:11,100 --> 00:46:15,800
There's also going to be the debug event array pointers, right?

918
00:46:15,900 --> 00:46:19,800
So these are the the two arrays that we've got there.

919
00:46:25,200 --> 00:46:30,200
And so, furthermore, I think I could do this by going like that and

920
00:46:30,200 --> 00:46:34,100
just actually having it there and, similarly, the debug record erase

921
00:46:34,100 --> 00:46:34,400
stuff.

922
00:46:34,400 --> 00:46:37,200
We could just say, you know what, you can't have any more than,

923
00:46:37,200 --> 00:46:38,500
however, many counters there are.

924
00:46:38,500 --> 00:46:42,500
So we, you know, we've got, we've got, Max, debug event and Max debug

925
00:46:42,500 --> 00:46:49,800
event, or Max debug record count and you know, who cares what it is,

926
00:46:50,400 --> 00:46:51,200
does not matter.

927
00:46:53,500 --> 00:46:59,400
Something like this to find Max debug units and that's 3 or whatever

928
00:47:00,500 --> 00:47:03,400
translation units like that.

929
00:47:06,000 --> 00:47:06,400
Yeah.

930
00:47:08,500 --> 00:47:12,300
And so then this struct right?

931
00:47:13,400 --> 00:47:16,000
This struct has everything in it that we would need.

932
00:47:16,300 --> 00:47:19,300
So this is like our debug table or something, right?

933
00:47:20,000 --> 00:47:28,500
And yeah, like what I would then do is translate everything over to

934
00:47:28,500 --> 00:47:31,500
working solely off of the global debug tables.

935
00:47:31,600 --> 00:47:33,000
So there's the debug cable

936
00:47:34,900 --> 00:47:35,600
Right.

937
00:47:35,900 --> 00:47:36,800
And there we go.

938
00:47:37,500 --> 00:47:38,200
That's what it is.

939
00:47:38,200 --> 00:47:39,200
That's the whole thing.

940
00:47:40,800 --> 00:47:41,700
That's all we've got.

941
00:47:41,700 --> 00:47:44,300
I also might go ahead and say this was volatile.

942
00:47:45,300 --> 00:47:46,500
I never really did do that.

943
00:47:48,700 --> 00:47:50,500
The atomic should have done anyway but

944
00:47:53,100 --> 00:47:55,000
It helps I like having it there, so I can just remember.

945
00:47:55,000 --> 00:47:55,500
Oh, yeah.

946
00:47:56,800 --> 00:47:59,800
anyway, so we got the the diva table and then we don't need

947
00:48:00,100 --> 00:48:02,000
Any of these things, right?

948
00:48:02,300 --> 00:48:03,100
So that's good.

949
00:48:04,800 --> 00:48:07,600
Shove that in there, get rid of this.

950
00:48:08,000 --> 00:48:11,200
And now, we don't really need to declare anything anywhere.

951
00:48:11,200 --> 00:48:15,500
Really everyone just needs to be able to get at that debug table

952
00:48:15,500 --> 00:48:17,100
somehow, right?

953
00:48:17,300 --> 00:48:22,500
And they, when we actually do our build, instead of having the two

954
00:48:22,500 --> 00:48:26,700
ways we were doing before of defining stuff instead, we're just going

955
00:48:26,700 --> 00:48:29,000
to have just the debug record array index.

956
00:48:29,600 --> 00:48:31,000
That's all we actually need.

957
00:48:31,800 --> 00:48:32,500
Right?

958
00:48:32,600 --> 00:48:35,500
And so now we can actually do this like so.

959
00:48:35,800 --> 00:48:40,400
And so now the platform layer can be its own translation unit, we

960
00:48:40,400 --> 00:48:43,700
could even make this a more formal thing like translucent translation

961
00:48:43,700 --> 00:48:45,000
unit Index, right?

962
00:48:45,000 --> 00:48:46,500
Like we could do something like this.

963
00:48:50,000 --> 00:48:50,500
Right.

964
00:48:55,100 --> 00:48:58,300
And so now, we just have a thing that we know we've got three

965
00:48:58,300 --> 00:49:03,000
translation into units, so let's just go for it, right?

966
00:49:03,600 --> 00:49:04,000
Okay.

967
00:49:05,200 --> 00:49:08,300
So that seems reasonable to me.

968
00:49:10,400 --> 00:49:14,700
Certainly and let's see if we can then go ahead and kind of, you know,

969
00:49:14,700 --> 00:49:18,300
consolidate this stuff down into something a little bit cleaner.

970
00:49:18,900 --> 00:49:22,600
So let's go ahead and look now at the places where this is ever

971
00:49:22,600 --> 00:49:23,900
actually accessed.

972
00:49:24,300 --> 00:49:26,900
So you can see that this stuff down here is really just about storing.

973
00:49:26,900 --> 00:49:31,500
Some debug info doesn't really have anything to do with anything that

974
00:49:31,500 --> 00:49:32,700
we care about.

975
00:49:32,700 --> 00:49:36,200
So I'm going to go through here and see, you can see that some of the

976
00:49:36,200 --> 00:49:38,700
stuff is getting declared.

977
00:49:38,900 --> 00:49:39,200
Here.

978
00:49:39,200 --> 00:49:42,000
I don't care about any of that anymore because I just want my debug

979
00:49:42,000 --> 00:49:46,300
table, that's the whole thing just that right there like so call that

980
00:49:46,300 --> 00:49:47,500
the global debug table.

981
00:49:49,100 --> 00:49:51,600
There it is, this stuff now.

982
00:49:51,600 --> 00:49:57,600
No longer has to be their global current event array index that can

983
00:49:57,600 --> 00:49:59,900
also be moved into here.

984
00:49:59,900 --> 00:50:03,400
For example, it does that one doesn't really have to be but I feel

985
00:50:03,400 --> 00:50:04,400
like we might as well.

986
00:50:04,900 --> 00:50:06,100
Why not right?

987
00:50:07,700 --> 00:50:10,300
Then we've got the debug records optimized count.

988
00:50:10,400 --> 00:50:11,600
That's I don't.

989
00:50:11,600 --> 00:50:16,400
Think is, yeah, those things still kind of have to be declared

990
00:50:16,400 --> 00:50:16,900
somewhere.

991
00:50:17,600 --> 00:50:18,700
We just don't have to ever

992
00:50:18,900 --> 00:50:21,000
Do this part of it anymore, right?

993
00:50:21,100 --> 00:50:29,400
What we can do is just something like debug records count, you know,

994
00:50:29,400 --> 00:50:34,300
or wherever we want the actual counts to happen, give a record count 0

995
00:50:35,500 --> 00:50:36,500
is happening like this.

996
00:50:36,500 --> 00:50:39,000
We'll have to think about you.

997
00:50:39,000 --> 00:50:41,000
Almost you almost want something like this, right?

998
00:50:41,000 --> 00:50:42,300
Debug records count.

999
00:50:44,600 --> 00:50:47,000
And you kind of want them to have their different counter values in

1000
00:50:47,000 --> 00:50:47,200
here.

1001
00:50:47,200 --> 00:50:47,700
Right?

1002
00:50:48,200 --> 00:50:51,700
But that's not really something we can probably do directly.

1003
00:50:52,400 --> 00:50:54,000
So yeah, we kind of need these these.

1004
00:50:54,000 --> 00:50:56,600
We kind of need these extern cops kind of things.

1005
00:50:56,600 --> 00:50:58,700
Unfortunately, as far as I could tell,

1006
00:51:00,800 --> 00:51:01,200
Right?

1007
00:51:01,900 --> 00:51:02,800
We don't need the consignee.

1008
00:51:02,800 --> 00:51:05,100
More of though that can go away and these debug record optimized

1009
00:51:05,100 --> 00:51:06,800
declaration, these can all go away.

1010
00:51:07,100 --> 00:51:11,100
All we need to be able to do is say that we've got our debug records

1011
00:51:11,100 --> 00:51:12,600
main count now as well.

1012
00:51:13,200 --> 00:51:16,300
And that is going to be counter.

1013
00:51:17,700 --> 00:51:18,300
Right.

1014
00:51:18,400 --> 00:51:21,700
Then we've got that extern and that's one that we're gonna have to

1015
00:51:21,700 --> 00:51:25,200
pull in from the other file, the global debug table is declared there,

1016
00:51:25,200 --> 00:51:26,000
so that's all good.

1017
00:51:26,000 --> 00:51:28,100
And then we've got our handmade optimized over here.

1018
00:51:28,400 --> 00:51:31,700
That guy has got the debug records down here as well.

1019
00:51:31,700 --> 00:51:36,000
So there's it getting defined, we don't need it to do the, the records

1020
00:51:36,000 --> 00:51:36,600
anymore.

1021
00:51:37,200 --> 00:51:38,300
So that's all good.

1022
00:51:38,600 --> 00:51:42,200
And I think that's really all we would need from that.

1023
00:51:42,500 --> 00:51:47,100
So, let's continue down the road to success.

1024
00:51:47,600 --> 00:51:50,500
We hope lies ahead of us and not behind us.

1025
00:51:50,800 --> 00:51:55,500
But as we go, I'm going to go ahead and pull the debug table over here

1026
00:51:56,000 --> 00:51:57,900
because now we can go ahead and do this here.

1027
00:51:57,900 --> 00:52:00,600
And that is actually legitimate all the time.

1028
00:52:01,200 --> 00:52:05,700
I'm going to pull these time, Block B down there, so

1029
00:52:07,200 --> 00:52:07,600
Okay.

1030
00:52:09,000 --> 00:52:11,200
Oh, I did that exactly the wrong way.

1031
00:52:11,600 --> 00:52:15,000
This wants to be at the bottom of things, doesn't it?

1032
00:52:15,800 --> 00:52:16,200
There we go.

1033
00:52:17,900 --> 00:52:23,500
All right, so our debug table needs to be below their obviously, there

1034
00:52:23,500 --> 00:52:24,000
we go.

1035
00:52:24,700 --> 00:52:27,900
And now, we can just say the global debug table.

1036
00:52:28,300 --> 00:52:31,300
That's got the event array index.

1037
00:52:32,500 --> 00:52:37,500
So we can get rid of the debug parts of these things.

1038
00:52:37,500 --> 00:52:39,100
This is just the event array.

1039
00:52:39,100 --> 00:52:40,700
This is the record array.

1040
00:52:40,900 --> 00:52:42,500
Just call this event, some records.

1041
00:52:42,500 --> 00:52:47,500
Now, in fact, we could call this event array index, and event index.

1042
00:52:48,700 --> 00:52:52,300
In fact, event, array index, actually could just, yeah, I guess.

1043
00:52:52,300 --> 00:52:55,300
Well, now, you know that needs to do is and then we've got this is no

1044
00:52:55,300 --> 00:52:59,000
longer as we called go B, just current event array index so that all

1045
00:52:59,000 --> 00:53:00,500
is much nicer.

1046
00:53:00,500 --> 00:53:05,700
Certainly in here, we have our Global debug table access is now going

1047
00:53:05,700 --> 00:53:11,400
to be just accessing that I believe and we have our Atomic switch.

1048
00:53:11,400 --> 00:53:12,200
We have to move in.

1049
00:53:13,100 --> 00:53:14,500
I think I had about five minutes on the clock.

1050
00:53:14,500 --> 00:53:17,500
Not very much, but hopefully I can, I can finish up what I'm

1051
00:53:17,700 --> 00:53:17,900
Here.

1052
00:53:18,400 --> 00:53:20,600
So we have Global debug event array.

1053
00:53:21,000 --> 00:53:25,700
That's just going to be the global debug table.the events array.

1054
00:53:26,500 --> 00:53:28,700
And that is all she wrote for that.

1055
00:53:29,300 --> 00:53:29,800
We've got that.

1056
00:53:29,800 --> 00:53:34,500
Get thread ID, is not imported, yet debug record array index constant.

1057
00:53:34,600 --> 00:53:38,500
This is actually the translation unit now and we should probably go

1058
00:53:38,500 --> 00:53:40,500
ahead and rename that as well.

1059
00:53:40,500 --> 00:53:43,700
So in debug event instead of calling it d by record array, indexes of

1060
00:53:43,700 --> 00:53:45,600
just translation unit, right?

1061
00:53:47,500 --> 00:53:51,100
And that is something that we specify in the build translation unit

1062
00:53:51,100 --> 00:53:51,700
index.

1063
00:53:52,000 --> 00:53:55,700
We go Atomic, add get thread translation.

1064
00:53:55,700 --> 00:53:56,600
Unit index.

1065
00:53:56,600 --> 00:53:59,200
Undeclared identifier, what?

1066
00:54:00,000 --> 00:54:03,700
Translation unit index.

1067
00:54:05,300 --> 00:54:07,700
It's right there.

1068
00:54:08,100 --> 00:54:09,700
What are you complaining about?

1069
00:54:12,800 --> 00:54:15,000
Oh, in the test asset Builder.

1070
00:54:15,400 --> 00:54:19,900
Well, alright, I guess we got to tell it that in the end of the test

1071
00:54:19,900 --> 00:54:22,900
asset Builder as well, not that we'll ever use this in the test asset

1072
00:54:22,900 --> 00:54:26,000
Builder, but we need to be there.

1073
00:54:26,200 --> 00:54:27,300
So now it's there.

1074
00:54:29,200 --> 00:54:29,800
All right.

1075
00:54:30,100 --> 00:54:31,000
Got the atomic add.

1076
00:54:31,000 --> 00:54:32,400
We need to move in got thread ID.

1077
00:54:32,500 --> 00:54:33,100
That's fine.

1078
00:54:33,500 --> 00:54:35,700
Okay, so here we are in the debug record array.

1079
00:54:35,700 --> 00:54:41,900
So that's actually going to be Global debug table and then we have our

1080
00:54:41,900 --> 00:54:42,800
records

1081
00:54:44,400 --> 00:54:45,000
Excel.

1082
00:54:46,000 --> 00:54:46,500
See what else.

1083
00:54:46,500 --> 00:54:51,400
We've got the bug record array so that all looks fine.

1084
00:54:51,900 --> 00:54:53,800
Initializing cannot convert.

1085
00:54:55,200 --> 00:54:59,100
That is true because this now needs to use that translation unit

1086
00:54:59,100 --> 00:55:00,100
Index, right?

1087
00:55:02,000 --> 00:55:04,900
It wants that's that specific set.

1088
00:55:05,400 --> 00:55:10,300
So get thread ID, that's good Atomic, add get thread, ID talking head.

1089
00:55:10,600 --> 00:55:15,300
Okay, so let's go and fix this now before we import those, those

1090
00:55:15,300 --> 00:55:20,000
intrinsics cool ladybug records now has to know how many there are.

1091
00:55:20,400 --> 00:55:21,800
That's not really a problem.

1092
00:55:21,800 --> 00:55:23,900
Again, that's told to us right here.

1093
00:55:24,300 --> 00:55:29,100
So we have basically the oops, we have the the main count

1094
00:55:30,200 --> 00:55:33,200
Right, plus the debug records.

1095
00:55:34,500 --> 00:55:35,700
Optimize count.

1096
00:55:39,400 --> 00:55:47,200
account plus, you know, whatever debug records platform

1097
00:55:51,200 --> 00:55:55,200
And at the moment, we'll just make that be stubbed out since nothing's

1098
00:55:55,200 --> 00:55:55,800
coming from it.

1099
00:55:55,800 --> 00:55:58,100
But then we're going to want to clean that up in a second.

1100
00:55:59,100 --> 00:56:00,200
Well, probably tomorrow.

1101
00:56:01,100 --> 00:56:01,400
Okay.

1102
00:56:01,400 --> 00:56:03,400
So got to move those intrinsic sin.

1103
00:56:03,400 --> 00:56:04,200
Then what else we got?

1104
00:56:04,200 --> 00:56:09,200
Debug records main array County but it remained that's actually debug

1105
00:56:09,200 --> 00:56:11,100
workers main count.

1106
00:56:11,200 --> 00:56:11,900
Like so.

1107
00:56:12,900 --> 00:56:18,700
And then again, that's this guy is just going to be the counter array,

1108
00:56:19,100 --> 00:56:20,400
plus the main count.

1109
00:56:20,400 --> 00:56:20,800
And

1110
00:56:21,000 --> 00:56:21,900
Optimize count.

1111
00:56:26,900 --> 00:56:28,000
What else we got there?

1112
00:56:31,300 --> 00:56:31,700
Okay.

1113
00:56:32,600 --> 00:56:33,700
Oops, that's going to be 3.

1114
00:56:34,400 --> 00:56:38,800
This is going to be 3 and this is going to be 0 again for the moment.

1115
00:56:40,900 --> 00:56:41,400
All right.

1116
00:56:42,200 --> 00:56:45,800
So Undeclared, identifier, debug records main, that's true.

1117
00:56:45,800 --> 00:56:48,400
Because now, this is actually, in fact, we don't even need this

1118
00:56:48,400 --> 00:56:52,800
anymore because now, debug records translation unit can just be in the

1119
00:56:52,800 --> 00:56:56,100
global debug table, it can just look up directly in records because

1120
00:56:56,100 --> 00:56:58,300
we've set it up now to be working properly there.

1121
00:56:59,300 --> 00:56:59,700
Then we've

1122
00:57:00,000 --> 00:57:06,000
To debug record array index inside the event is actually just, again,

1123
00:57:06,000 --> 00:57:08,000
the translation unit I believe, right?

1124
00:57:08,000 --> 00:57:12,200
This is, this is looking we change what that means and so that's all

1125
00:57:12,200 --> 00:57:12,500
good.

1126
00:57:12,500 --> 00:57:15,800
Now we can come down here to the global current event.

1127
00:57:16,300 --> 00:57:20,000
That's just going to be the global debug table current event array

1128
00:57:20,000 --> 00:57:20,600
index.

1129
00:57:20,800 --> 00:57:23,500
So we're just again, just sort of cleaning up that naming scheme

1130
00:57:23,500 --> 00:57:23,700
there.

1131
00:57:23,700 --> 00:57:24,800
Nothing else happening here.

1132
00:57:25,200 --> 00:57:26,600
This is going to be the same thing.

1133
00:57:26,600 --> 00:57:29,500
Here's the global dubourg, table event array index.

1134
00:57:30,000 --> 00:57:30,700
Aunt, index.

1135
00:57:30,800 --> 00:57:37,100
And then in here, same thing, level debug table event array index.

1136
00:57:37,600 --> 00:57:38,000
Oops.

1137
00:57:38,600 --> 00:57:39,700
Is that current

1138
00:57:43,000 --> 00:57:44,700
I believe that's correct.

1139
00:57:45,600 --> 00:57:48,000
So now we've gotten rid of all the compiler errors and I'll just

1140
00:57:48,000 --> 00:57:50,100
quickly because I want to see where we're at.

1141
00:57:50,100 --> 00:57:52,800
In terms of having things work, I'm going to go ahead and take those

1142
00:57:52,800 --> 00:57:53,900
intrinsics out.

1143
00:57:54,600 --> 00:57:58,600
I'm going to go ahead and pull those into the platform layer.

1144
00:57:59,600 --> 00:57:59,900
Take it.

1145
00:57:59,900 --> 00:58:00,900
If compiler.

1146
00:58:01,400 --> 00:58:03,100
I believe we have that setup.

1147
00:58:03,100 --> 00:58:04,700
Here we do, right?

1148
00:58:04,700 --> 00:58:06,200
And there's our, if compiler, msec.

1149
00:58:06,200 --> 00:58:07,800
So we know that that's set by now.

1150
00:58:08,400 --> 00:58:10,400
So I'm going to go ahead and just drop those in here.

1151
00:58:10,400 --> 00:58:11,500
At the moment, we're going to have one.

1152
00:58:11,700 --> 00:58:13,100
Organize this file a little bit better.

1153
00:58:13,300 --> 00:58:15,700
It's getting a little bit unwieldy at this point where everything is

1154
00:58:15,700 --> 00:58:18,500
and if you kind of see it's just a little bit out of control.

1155
00:58:18,900 --> 00:58:22,100
So what I want to do here is I'm going to go ahead and grab these

1156
00:58:22,100 --> 00:58:24,900
atomics and and move them out.

1157
00:58:24,900 --> 00:58:25,400
So,

1158
00:58:26,900 --> 00:58:28,100
Let's grab all these guys here.

1159
00:58:28,100 --> 00:58:30,000
In fact, I guess I can just grab this whole block.

1160
00:58:34,000 --> 00:58:34,600
All right.

1161
00:58:37,700 --> 00:58:38,900
So I think we're all good now.

1162
00:58:40,100 --> 00:58:41,200
Lisa looks like anyway.

1163
00:58:41,200 --> 00:58:43,900
I also think I'm still building an O2, which I didn't mean to do.

1164
00:58:45,100 --> 00:58:48,300
So let's go back here and so I don't know where we're at now.

1165
00:58:48,600 --> 00:58:49,700
We'll find out in a second.

1166
00:58:51,100 --> 00:58:52,200
Looks like not fabulous.

1167
00:58:52,200 --> 00:58:56,100
So it looks like we've got a bug in there which is just in terms of

1168
00:58:56,100 --> 00:59:00,400
probably how we organized, our different translation unit stuff and

1169
00:59:00,400 --> 00:59:01,300
all that goodness.

1170
00:59:01,700 --> 00:59:08,800
Let's take a quick look to see what's going on there in handmade debug

1171
00:59:10,200 --> 00:59:13,800
Let's think this through just real quick again, not gonna try to debug

1172
00:59:13,800 --> 00:59:17,200
it too much but just want to do it just a double just just a quick

1173
00:59:17,200 --> 00:59:20,500
little check to see if I can immediately see what we did wrong.

1174
00:59:21,300 --> 00:59:24,700
Where's our collate, debug records?

1175
00:59:25,100 --> 00:59:32,000
So the counter Ray stuff that's doing translation unit I think

1176
00:59:32,000 --> 00:59:34,000
properly because main than optimized.

1177
00:59:34,000 --> 00:59:37,400
Yeah, that all seems roughly correct to me.

1178
00:59:37,600 --> 00:59:39,700
Let's take a look at handmade platform.sh.

1179
00:59:39,800 --> 00:59:42,600
Each and see what we see there as well.

1180
00:59:43,600 --> 00:59:46,600
When we are doing the stuff we put in that translation unit, the

1181
00:59:46,600 --> 00:59:48,500
translation of is but I think it is, right?

1182
00:59:49,500 --> 00:59:51,400
Yeah, it's 01 into.

1183
00:59:51,400 --> 00:59:53,600
That's what I would have wanted to be

1184
00:59:57,000 --> 00:59:59,300
So, we've got all that in their atomic.

1185
01:00:00,600 --> 01:00:02,900
To the event in the X.

1186
01:00:02,900 --> 01:00:03,600
Yeah.

1187
01:00:03,600 --> 01:00:04,800
Etcetera, Etc.

1188
01:00:05,200 --> 01:00:09,200
We've got the records array and the event array.

1189
01:00:09,800 --> 01:00:12,500
That all looks fine to me.

1190
01:00:14,600 --> 01:00:17,200
Yeah, what's, what is this guy saying here?

1191
01:00:18,000 --> 01:00:18,700
Current event rate.

1192
01:00:18,700 --> 01:00:20,000
Index equals not.

1193
01:00:21,600 --> 01:00:24,700
Whichever one is we're doing, we do the atomic exchange.

1194
01:00:25,000 --> 01:00:28,700
We set up the swap for the current event array index.

1195
01:00:28,700 --> 01:00:29,800
That's what I wanted.

1196
01:00:30,000 --> 01:00:31,300
And so that all looks good.

1197
01:00:31,600 --> 01:00:34,200
The event rate index, in the event, can't get pulled out of that.

1198
01:00:34,500 --> 01:00:39,100
That also looks good, we don't call ft by records anymore, and in fact

1199
01:00:39,100 --> 01:00:44,100
you can consider that not relevant anymore, Global debug event array.

1200
01:00:44,800 --> 01:00:46,100
Why is that even still here?

1201
01:00:47,600 --> 01:00:49,200
Why is that even still here?

1202
01:00:50,800 --> 01:00:52,800
Global debug event array.

1203
01:00:54,200 --> 01:00:56,400
That is our problem right there.

1204
01:00:57,600 --> 01:00:59,900
That's not good.

1205
01:01:00,500 --> 01:01:01,500
Why are you here?

1206
01:01:02,800 --> 01:01:03,900
So that's our problem.

1207
01:01:05,200 --> 01:01:06,300
That should have been this.

1208
01:01:09,000 --> 01:01:09,700
What can you do?

1209
01:01:10,500 --> 01:01:15,800
All right, little vestigial remain there and now we're back.

1210
01:01:17,100 --> 01:01:20,800
Okay and so we're almost we have a one more thing to do which is just

1211
01:01:20,800 --> 01:01:24,300
passing a piece of information from the platform layer for words that

1212
01:01:24,300 --> 01:01:28,700
says, how many counters that has but we pretty much did it.

1213
01:01:29,200 --> 01:01:30,300
So this is great.

1214
01:01:31,000 --> 01:01:33,900
I'm really happy about that because now we'll just be able to use

1215
01:01:33,900 --> 01:01:38,000
those uniformly across the platform boundary, which is what I wanted

1216
01:01:38,300 --> 01:01:40,800
and I think will also be able to kind of put it in a way that now it

1217
01:01:40,800 --> 01:01:42,900
doesn't matter how many translation units we have.

1218
01:01:44,200 --> 01:01:45,300
That's kind of cool too.

1219
01:01:45,700 --> 01:01:46,700
So yeah.

1220
01:01:46,900 --> 01:01:47,500
We're good.

1221
01:01:50,700 --> 01:01:55,700
And I would be pleased, I would be very pleased at this moment.

1222
01:01:55,700 --> 01:02:02,600
In time to take your questions, I would be very pleased to take some

1223
01:02:02,600 --> 01:02:10,800
questions from the handmade, hero studio audience, let's take a look

1224
01:02:11,100 --> 01:02:14,800
and made tail.

1225
01:02:16,300 --> 01:02:18,200
See, Merit or eqa.

1226
01:02:21,600 --> 01:02:24,600
All right, all right.

1227
01:02:38,700 --> 01:02:42,400
What do you think is an effective way to get better at assembly?

1228
01:02:42,700 --> 01:02:46,200
Go over a book tutorial, read the code disassembly and vs.

1229
01:02:46,200 --> 01:02:49,000
Mike acting can look at a piece of code for a couple of seconds and

1230
01:02:49,000 --> 01:02:50,500
estimating how much Cycles it takes.

1231
01:02:50,900 --> 01:02:54,900
And what the assembly code for it is I'd like to reach that level one

1232
01:02:54,900 --> 01:02:55,400
day.

1233
01:03:03,200 --> 01:03:03,800
so,

1234
01:03:06,100 --> 01:03:07,500
I guess what I would say is,

1235
01:03:09,400 --> 01:03:12,600
There's a couple ways you can go about it and I think you probably

1236
01:03:12,600 --> 01:03:14,600
want to do them all simultaneously.

1237
01:03:16,000 --> 01:03:17,700
You definitely want to read this assemblies.

1238
01:03:18,400 --> 01:03:22,500
Like I do, when you see me drop the December like we did on today's

1239
01:03:22,500 --> 01:03:27,700
stream, you want to be doing that so that you have an idea of what the

1240
01:03:27,700 --> 01:03:28,800
compiler is generating.

1241
01:03:28,800 --> 01:03:31,400
And you can just sort of go, well, you know, I don't really know what

1242
01:03:31,400 --> 01:03:34,400
this means, but I'm starting to see it, right?

1243
01:03:34,400 --> 01:03:35,400
It's kind of like an immersion.

1244
01:03:35,400 --> 01:03:37,600
Like when they said, like, you know, I want to go learn French so I

1245
01:03:37,600 --> 01:03:39,300
can go to Paris or something, right?

1246
01:03:39,500 --> 01:03:43,900
And it's like, okay, I I start watching, you know, a French film or

1247
01:03:43,900 --> 01:03:45,600
something with no subtitles.

1248
01:03:45,800 --> 01:03:46,900
Start hearing it.

1249
01:03:46,900 --> 01:03:49,400
So you get used to like oh I noticed when the person comes home, they

1250
01:03:49,400 --> 01:03:53,000
say this right there like, you know, bonjour madame or whatever.

1251
01:03:55,000 --> 01:03:58,100
So I think that's definitely important.

1252
01:03:58,100 --> 01:03:58,700
Do it.

1253
01:03:59,100 --> 01:04:01,800
You know it's free when you're debugging stuff to just do.

1254
01:04:01,800 --> 01:04:04,900
Right click and do show disassembly do it, you know do that.

1255
01:04:05,700 --> 01:04:09,900
Another one is the Intel architecture manual explains that the

1256
01:04:09,900 --> 01:04:13,000
instruction formats how they work you know spend some time with it,

1257
01:04:13,000 --> 01:04:15,600
just look read some very sections just you know just reading

1258
01:04:16,100 --> 01:04:20,000
Reading about it, read agner fogs webpage, that sort of stuff, you

1259
01:04:20,000 --> 01:04:22,500
know, just just do, just do reading occasionally on it.

1260
01:04:22,700 --> 01:04:27,100
And then finally, you know, right some definitely like we did with the

1261
01:04:27,100 --> 01:04:31,400
intrinsics on the renderer start writing some stuff in intrinsic.

1262
01:04:31,400 --> 01:04:33,600
That's that's not even really a Assembly Language, right?

1263
01:04:34,700 --> 01:04:37,900
But it's much closer than just straight C and then you can start to

1264
01:04:37,900 --> 01:04:39,900
think a little bit more in terms of how that's working.

1265
01:04:39,900 --> 01:04:44,000
And you can your disassembly, will look a lot more like what you're

1266
01:04:44,000 --> 01:04:45,700
writing and you can sort of start to narrow that.

1267
01:04:45,800 --> 01:04:51,000
Cap and so that's a lot of a lot of those are sort of good steps to

1268
01:04:51,000 --> 01:04:51,500
take.

1269
01:04:58,100 --> 01:05:00,400
Students say three were actually a pre-recorded laugh track.

1270
01:05:00,600 --> 01:05:01,200
Yes.

1271
01:05:02,300 --> 01:05:05,900
Hey I made here is filmed in front of a live studio audience, cue

1272
01:05:05,900 --> 01:05:06,800
Applause.

1273
01:05:08,800 --> 01:05:11,200
How would you deal with switching between multiple apis in a single

1274
01:05:11,200 --> 01:05:11,900
application?

1275
01:05:12,200 --> 01:05:15,000
Like software Hardware renderer, would it be structured similar to the

1276
01:05:15,000 --> 01:05:16,000
platform layer?

1277
01:05:19,900 --> 01:05:22,500
That's really kind of a very open-ended question.

1278
01:05:22,800 --> 01:05:28,800
It depends a lot on the nature of what you were doing software or

1279
01:05:28,800 --> 01:05:33,700
Hardware renderer switching is very different than how you would

1280
01:05:33,700 --> 01:05:35,300
switch other things platform wise.

1281
01:05:35,300 --> 01:05:35,900
Potentially,

1282
01:05:36,900 --> 01:05:39,200
And so it's worth understanding the difference.

1283
01:05:39,200 --> 01:05:43,500
And the reason for that is because there's theirs

1284
01:05:45,400 --> 01:05:49,300
There's a difference between wanting to switch, apis purely because

1285
01:05:49,300 --> 01:05:52,000
you need to interface with two different apis, that do the same thing.

1286
01:05:52,800 --> 01:05:55,800
And that might be an example of like opengl versus direct3d.

1287
01:05:55,900 --> 01:05:58,300
It's like, they're basically exactly the same, right?

1288
01:05:58,300 --> 01:05:59,800
It's like, they're just

1289
01:06:00,000 --> 01:06:03,000
Current syntactic dressing on exactly the same thing.

1290
01:06:03,000 --> 01:06:07,600
It's even saying driver underneath in a lot of cases, right with just

1291
01:06:07,600 --> 01:06:10,400
a different set of like ways in which it sort of fumbles itself

1292
01:06:10,400 --> 01:06:10,900
together.

1293
01:06:14,200 --> 01:06:18,000
There's a difference between Matt and abstracting a renderer in a way

1294
01:06:18,000 --> 01:06:21,400
that like, oh, I've got a totally different renderer.

1295
01:06:21,400 --> 01:06:26,000
Basically, for the iPad where it's like an embedded tiled, renderer

1296
01:06:26,300 --> 01:06:31,100
versus like, on the PC for like SLI card Invidia.

1297
01:06:31,200 --> 01:06:35,000
You know, Crazy Town by endless graphics.

1298
01:06:36,400 --> 01:06:38,800
The way in which you will separate those out.

1299
01:06:40,200 --> 01:06:41,500
Changes pretty dramatically.

1300
01:06:42,000 --> 01:06:48,900
And the reason for that is because the logic for the control flow

1301
01:06:51,000 --> 01:06:55,100
The boundary about where that, where you draw the line.

1302
01:06:56,100 --> 01:07:00,100
For the control flow changes, based on how different the control flow

1303
01:07:00,100 --> 01:07:03,200
has to be across all of the targets.

1304
01:07:04,200 --> 01:07:09,200
So for example, in opengl versus direct3d, you may be able to put

1305
01:07:09,200 --> 01:07:14,900
almost all of the control flow logic in the platform nonspecific part

1306
01:07:14,900 --> 01:07:18,500
of your code and the only thing that you will actually need in the

1307
01:07:18,500 --> 01:07:22,400
platform's aesthetic, part is the specific opengl or direct3d ish

1308
01:07:22,400 --> 01:07:23,200
calls.

1309
01:07:23,300 --> 01:07:25,700
You need to do to accomplish this exact same thing.

1310
01:07:25,900 --> 01:07:27,100
We're trying to do in both cases.

1311
01:07:29,400 --> 01:07:34,700
that may be completely not true for the case where you're talking

1312
01:07:34,700 --> 01:07:41,500
about going from, you know, some from opengl with Nvidia extensions,

1313
01:07:42,600 --> 01:07:44,700
Two metal on the iPad.

1314
01:07:45,100 --> 01:07:48,900
They may be like completely different control flows, not related at

1315
01:07:48,900 --> 01:07:49,200
all.

1316
01:07:49,900 --> 01:07:54,700
And in that case you typically want the the line of who is doing the

1317
01:07:54,700 --> 01:07:57,200
control flow moved up significantly.

1318
01:07:58,500 --> 01:08:02,800
And so you have to be very aware of the appropriate places to put

1319
01:08:02,800 --> 01:08:04,400
those divisions.

1320
01:08:05,000 --> 01:08:09,300
And the reason for that is because where you put that division, the

1321
01:08:09,300 --> 01:08:12,500
closer that lines up with the actual variability of the problem.

1322
01:08:12,500 --> 01:08:17,399
The more time you save in development, right?

1323
01:08:17,399 --> 01:08:21,500
Because if the cost for putting it too low, meaning the control flow

1324
01:08:21,500 --> 01:08:25,399
is all on the shared side and none of it's on the Lower Side.

1325
01:08:25,700 --> 01:08:28,100
The cost for that is if the if the thing is

1326
01:08:28,300 --> 01:08:31,899
On the other side, but s the actual implementations.

1327
01:08:33,500 --> 01:08:37,000
They will have this problem where they have to work around the

1328
01:08:37,000 --> 01:08:39,600
limitations of the control flow if they're very disparate.

1329
01:08:39,899 --> 01:08:41,899
So if they are all very different from each other.

1330
01:08:42,100 --> 01:08:45,000
Now it gets very expensive to try and Implement one of them because

1331
01:08:45,000 --> 01:08:47,899
they're essentially fighting the control flow decisions that were made

1332
01:08:47,899 --> 01:08:50,500
based on one specific one of them at some time.

1333
01:08:50,800 --> 01:08:53,800
And now it's just this nightmare and you get poorer performance and

1334
01:08:53,800 --> 01:08:57,700
you get Harry code in there and all sorts of bad things like that.

1335
01:08:58,800 --> 01:08:59,899
the consequence of,

1336
01:09:00,000 --> 01:09:03,399
Moving it too high is the opposite of that.

1337
01:09:03,600 --> 01:09:08,300
It's that now the upper layer does very little work and expects all

1338
01:09:08,300 --> 01:09:09,200
the implementations to do.

1339
01:09:09,200 --> 01:09:13,000
Most of the work they can now all be very custom, very efficient, but

1340
01:09:13,000 --> 01:09:14,500
you got no code reuse.

1341
01:09:15,100 --> 01:09:18,600
So now if it turns out that all of those implementations are all

1342
01:09:18,600 --> 01:09:21,899
basically the same, you just wasted a ton of effort because you could

1343
01:09:21,899 --> 01:09:25,800
have had all that be shared and now you've got 10 different, you know,

1344
01:09:25,800 --> 01:09:28,800
substrate layers on there that all have 90% of the coding common.

1345
01:09:28,899 --> 01:09:29,800
And it's like, oh,

1346
01:09:30,000 --> 01:09:31,100
Okay, that's not so good.

1347
01:09:31,800 --> 01:09:35,399
So in some circumstances you will even end up in a situation where you

1348
01:09:35,399 --> 01:09:39,399
draw the line in more than one place where you actually have a single

1349
01:09:39,399 --> 01:09:40,700
API stack.

1350
01:09:43,300 --> 01:09:48,300
A full stack for those of you who are full stack developers, you will

1351
01:09:48,300 --> 01:09:53,100
have a single sort of slice of the API there that actually has

1352
01:09:53,100 --> 01:09:54,200
multiple Cuts.

1353
01:09:54,800 --> 01:09:57,200
It's got the platform nonspecific part.

1354
01:09:57,700 --> 01:10:01,600
It's got the platform specific part, but in between there may be

1355
01:10:01,600 --> 01:10:05,300
another layer, which is sometimes there and sometimes not, and that is

1356
01:10:05,300 --> 01:10:11,200
shared code, that is common between some of the platform layers and

1357
01:10:11,200 --> 01:10:11,900
not others.

1358
01:10:12,400 --> 01:10:17,300
And so you end up building a three-tier four-tier who knows, right?

1359
01:10:17,300 --> 01:10:19,700
It could get very complicated depending on what sort of sisters were

1360
01:10:19,700 --> 01:10:20,500
talking about.

1361
01:10:20,800 --> 01:10:27,100
That are based on trying to build up the correct set of cuts through

1362
01:10:27,100 --> 01:10:32,200
the API that allow you to have the correct implementation everywhere

1363
01:10:32,800 --> 01:10:37,300
but without rewriting code unnecessarily throughout all of them.

1364
01:10:38,700 --> 01:10:39,900
Nobody does any of that, right?

1365
01:10:39,900 --> 01:10:40,600
Hardly ever.

1366
01:10:42,600 --> 01:10:44,900
It's it's an example of something that's very poorly done.

1367
01:10:44,900 --> 01:10:48,100
It's why I say, API design is definitely a very important skill and

1368
01:10:48,100 --> 01:10:49,300
very few people have it.

1369
01:10:49,400 --> 01:10:51,600
Almost nobody who makes apis has it?

1370
01:10:51,700 --> 01:10:55,000
Most of them have no idea, and that is why most apis are awful.

1371
01:10:55,600 --> 01:10:58,700
But it's obviously, it's a very important thing for architecture for

1372
01:10:58,700 --> 01:11:00,800
apis to understand that stuff.

1373
01:11:00,800 --> 01:11:01,700
It's worth practicing.

1374
01:11:01,700 --> 01:11:05,700
It's worth getting to understanding how important it is, and how all

1375
01:11:05,700 --> 01:11:06,900
these things work out.

1376
01:11:08,500 --> 01:11:09,700
It's a very important piece.

1377
01:11:09,800 --> 01:11:12,300
It's a piece, that's not taught very well, it's a piece of snow,

1378
01:11:12,500 --> 01:11:13,500
Dressed hardly ever.

1379
01:11:14,000 --> 01:11:17,000
And it's a piece of lot of people take for granted and and you end up

1380
01:11:17,000 --> 01:11:20,000
with, you know, you end up with with

1381
01:11:22,200 --> 01:11:27,400
The kinds of os and SDK API is that we get these days that are pretty

1382
01:11:27,400 --> 01:11:27,800
awful.

1383
01:11:36,100 --> 01:11:37,800
K, why don't you Powers expose apis?

1384
01:11:37,800 --> 01:11:41,100
That give us information about our code, like access to the AST,

1385
01:11:41,100 --> 01:11:43,600
because when we write a top-down, parser writing, something that the

1386
01:11:43,600 --> 01:11:44,400
car already has.

1387
01:11:45,000 --> 01:11:46,600
That is an excellent question.

1388
01:11:47,700 --> 01:11:52,900
and the answer to that question is because the C++ standard committee

1389
01:11:53,900 --> 01:11:59,400
is again, some of the worst designers that have ever come together to

1390
01:11:59,400 --> 01:11:59,700
make a

1391
01:12:01,100 --> 01:12:03,400
All of that stuff should have built been built in.

1392
01:12:03,600 --> 01:12:05,000
There is zero question about it.

1393
01:12:05,300 --> 01:12:09,600
In my mind, I've never been sure of anything else in my life, then

1394
01:12:09,600 --> 01:12:12,600
that meta information should have been a part of the C++ Peck from the

1395
01:12:12,600 --> 01:12:15,500
very beginning, but what do you want?

1396
01:12:15,800 --> 01:12:18,400
And so the compiler vendors.

1397
01:12:18,600 --> 01:12:22,800
Don't have a lot of incentive to provide that because they know that

1398
01:12:22,800 --> 01:12:25,200
most people Target more than one platform if they provide this

1399
01:12:25,200 --> 01:12:27,600
information, it doesn't really do anyone any good because they're not

1400
01:12:27,600 --> 01:12:29,700
going to Target it because I don't exist in that compiler, right?

1401
01:12:30,000 --> 01:12:33,100
Furthermore, they'd have to design it all themselves and maintain it

1402
01:12:33,100 --> 01:12:33,800
all themselves.

1403
01:12:34,100 --> 01:12:35,600
And that's just not something the compiler vendors.

1404
01:12:35,600 --> 01:12:36,300
Tend to do.

1405
01:12:36,800 --> 01:12:38,600
That said it has happened.

1406
01:12:39,200 --> 01:12:41,300
It has already happened before.

1407
01:12:42,200 --> 01:12:43,900
The compiler called Montana.

1408
01:12:44,500 --> 01:12:45,900
It was written at IBM.

1409
01:12:49,000 --> 01:12:51,000
It was a wonderful idea for C++ compiler.

1410
01:12:51,000 --> 01:12:54,600
Unfortunately was trapped inside a product called visual age that

1411
01:12:54,600 --> 01:12:59,200
nobody wanted to nobody used in, which is now gone, but it was

1412
01:12:59,200 --> 01:13:01,400
visually age version 56.

1413
01:13:01,400 --> 01:13:03,900
I'd 11:13, I have no idea.

1414
01:13:05,000 --> 01:13:09,400
The code name for the Pirates, Montana, and it did exactly that it

1415
01:13:09,400 --> 01:13:14,000
actually was obviously a bunch of people who actually got it.

1416
01:13:14,400 --> 01:13:15,900
They actually knew what they were doing.

1417
01:13:17,300 --> 01:13:20,500
Unfortunately, they were not the people working at Microsoft or

1418
01:13:21,200 --> 01:13:25,600
working on, you know, compilers that still existed but what they did

1419
01:13:25,600 --> 01:13:26,700
with the compiler was great.

1420
01:13:27,300 --> 01:13:28,500
It required no header files.

1421
01:13:28,600 --> 01:13:29,600
It was an incremental compiler.

1422
01:13:29,600 --> 01:13:31,200
Just like John, Blow wrote for Jay.

1423
01:13:31,200 --> 01:13:33,300
I were you don't need to pre to declare anything.

1424
01:13:33,500 --> 01:13:37,300
It was a C++ compiler that just it incremental way front.

1425
01:13:37,400 --> 01:13:39,400
So no decorations necessary.

1426
01:13:41,100 --> 01:13:44,900
Thing, one thing two, it exposed that information that you're talking

1427
01:13:44,900 --> 01:13:49,900
about via plug-in API, so you could write your own hookups to it, that

1428
01:13:50,700 --> 01:13:53,000
did compilation passes modified stuff.

1429
01:13:53,400 --> 01:13:57,800
It basically had like an open architecture for hooking into it and

1430
01:13:57,800 --> 01:14:01,600
attaching to it and I don't mean like the kind like llvm where you

1431
01:14:01,600 --> 01:14:04,400
have to, then go like build the compiler to do it.

1432
01:14:04,900 --> 01:14:08,000
I mean like you could just build like a dll that would like interface

1433
01:14:08,000 --> 01:14:09,500
with them and it would work, right?

1434
01:14:10,500 --> 01:14:11,300
So it has been done before.

1435
01:14:11,300 --> 01:14:13,700
Unfortunately, for a lot of other reasons, it was never something that

1436
01:14:13,700 --> 01:14:15,600
was really available in a way that anyone could use.

1437
01:14:15,600 --> 01:14:16,500
It was trapped inside.

1438
01:14:16,500 --> 01:14:20,600
This, you know, big corporate weird product that you know, wasn't

1439
01:14:20,600 --> 01:14:21,900
really going to be relevant to anyone.

1440
01:14:23,600 --> 01:14:27,800
But it had it was tried and did work and unfortunately, that wasn't

1441
01:14:27,800 --> 01:14:30,600
the lineage for a number of other reasons that were left with today.

1442
01:14:30,600 --> 01:14:32,700
So we don't get to having those benefits.

1443
01:14:32,700 --> 01:14:33,300
Unfortunately.

1444
01:14:35,700 --> 01:14:37,000
Are you still using the software renderer?

1445
01:14:37,000 --> 01:14:37,400
Yes.

1446
01:14:38,600 --> 01:14:39,700
We render and suffer.

1447
01:14:41,200 --> 01:14:43,000
At what point is the perfect become a good programmer.

1448
01:14:43,600 --> 01:14:45,100
What do you think you became a good programmer?

1449
01:14:45,700 --> 01:14:48,800
I think I became a good programmer sometime around when I was 16.

1450
01:14:50,300 --> 01:14:52,100
I have been preparing since I was 7.

1451
01:14:52,100 --> 01:14:54,900
I think I got better at programming recently.

1452
01:14:54,900 --> 01:14:59,200
Good at 16, I then become became really bad at programming when I was

1453
01:15:00,000 --> 01:15:00,500
Teen.

1454
01:15:00,500 --> 01:15:03,700
That's because I was introduced to C++ and arbitrary to programming

1455
01:15:03,700 --> 01:15:06,700
and I thought, you know, I believe people, and they said it was good.

1456
01:15:06,900 --> 01:15:09,500
And then I was a really bad programmer for about four or five years.

1457
01:15:10,100 --> 01:15:13,700
And then I, when I went back to and realize that was all awful with,

1458
01:15:13,800 --> 01:15:18,400
with the help of some very good friends, Jeff Roberts, John Miles, the

1459
01:15:18,400 --> 01:15:22,600
folks at Red game tools, kind of like, not really telling me.

1460
01:15:22,700 --> 01:15:25,300
They weren't like, you got to stop this, but just kind of being there

1461
01:15:25,300 --> 01:15:29,900
and kind of constantly sort of being a good example.

1462
01:15:30,000 --> 01:15:30,400
Sample.

1463
01:15:32,400 --> 01:15:34,300
I kind of came around to us like, oh yeah, this stuff.

1464
01:15:34,300 --> 01:15:35,100
Is already pretty dumb?

1465
01:15:35,100 --> 01:15:35,400
Huh.

1466
01:15:35,900 --> 01:15:38,200
And then I think I've been a decent programmer.

1467
01:15:38,200 --> 01:15:40,800
Since then, again, it took me a while to come back.

1468
01:15:40,800 --> 01:15:42,600
I think I've been a previous Emperor since then.

1469
01:15:46,500 --> 01:15:47,500
How do you handle programmer burnout?

1470
01:15:47,500 --> 01:15:49,400
Depression, those days when you're just not in the mood to do

1471
01:15:49,400 --> 01:15:51,100
anything, not productive or do motivated?

1472
01:15:51,100 --> 01:15:54,800
You can barely do any coding you rather do anything else other than

1473
01:15:54,800 --> 01:15:55,700
what you should be doing.

1474
01:15:57,700 --> 01:15:59,500
I would say that I wouldn't worry about too much.

1475
01:15:59,500 --> 01:16:04,100
Everyone has that, that problem the thing to do is always right an

1476
01:16:04,100 --> 01:16:06,300
hour or two of code, a day during that time.

1477
01:16:06,300 --> 01:16:10,400
Anyway, I don't care what it is, whatever it is that you're working on

1478
01:16:10,400 --> 01:16:12,400
and that you're stuck on that you don't know how to do when you don't

1479
01:16:12,400 --> 01:16:15,000
want to do type something in.

1480
01:16:15,600 --> 01:16:16,200
I don't care how

1481
01:16:16,300 --> 01:16:17,800
How lousy it is.

1482
01:16:18,100 --> 01:16:21,800
I don't care how far it is from an actual usable solution to the

1483
01:16:21,800 --> 01:16:23,000
problem that you have.

1484
01:16:23,900 --> 01:16:26,300
I don't care how much you know, you're going to rewrite it later.

1485
01:16:26,800 --> 01:16:31,100
The number one, cure for programmer, burnout and depression is to

1486
01:16:31,100 --> 01:16:38,100
write code because invariably once you get a little further over the

1487
01:16:38,100 --> 01:16:42,200
hump pitcher on, you realize that it's all code you can do and you

1488
01:16:42,200 --> 01:16:45,700
start to focus on actually doing it and then you're out of the funk.

1489
01:16:46,600 --> 01:16:50,500
And so much like doing anything else, like writing a book, or anything

1490
01:16:50,500 --> 01:16:51,000
else.

1491
01:16:51,000 --> 01:16:56,000
It's when you get in a psychological state, where you've decided that

1492
01:16:56,000 --> 01:16:57,900
you're stuck or that you can't do it, or whatever.

1493
01:16:57,900 --> 01:17:00,600
That is, what's stopping you from going forwards.

1494
01:17:00,600 --> 01:17:07,100
Not the actual failure of knowledge because the truth is you just got

1495
01:17:07,100 --> 01:17:09,400
something you don't know how to do yet and that's fine.

1496
01:17:09,400 --> 01:17:11,200
The way you get over.

1497
01:17:11,200 --> 01:17:14,200
That is by experimentation typing stuff in running.

1498
01:17:14,200 --> 01:17:16,500
The compiler makes small goals for self whatever.

1499
01:17:16,600 --> 01:17:17,600
Are you need to do?

1500
01:17:20,100 --> 01:17:23,600
Do that, just keep the code going, and you will get out of it.

1501
01:17:25,400 --> 01:17:28,300
If you allow yourself to lock up entirely, then you won't, and you'll

1502
01:17:28,300 --> 01:17:31,300
go for days without having done anything, and that's really bad.

1503
01:17:41,300 --> 01:17:44,800
In the 30, do you really prefer to save to unconditional jumps to the

1504
01:17:44,800 --> 01:17:45,700
CPU pipeline?

1505
01:17:45,700 --> 01:17:49,100
Won't be flushed at any chance instead of compiler and platform

1506
01:17:49,100 --> 01:17:52,000
Independence, referring to get thread ID part.

1507
01:17:53,400 --> 01:17:54,300
So first of all,

1508
01:17:56,500 --> 01:17:59,600
there would be no platform Independence because the way you would do

1509
01:17:59,600 --> 01:17:59,800
that,

1510
01:18:00,000 --> 01:18:03,000
Those in the way you do it on links are probably different, right?

1511
01:18:04,400 --> 01:18:06,900
So you need to make a different function, call, presumably on Linux,

1512
01:18:06,900 --> 01:18:10,700
then you would on Windows, or say on Mac, so there's no platform

1513
01:18:10,700 --> 01:18:11,200
Independence.

1514
01:18:11,500 --> 01:18:12,500
It's only compiling dependence.

1515
01:18:12,500 --> 01:18:15,600
There's only one compiler for this platform and unsurprisingly.

1516
01:18:15,600 --> 01:18:17,200
There's only one compiler for the other platforms.

1517
01:18:17,700 --> 01:18:20,600
We are only ever going to pile up with msec on Windows probably and if

1518
01:18:20,600 --> 01:18:22,500
we switch to another compiler, we just switch that composite we

1519
01:18:22,500 --> 01:18:24,000
wouldn't still compiled with msv.

1520
01:18:24,000 --> 01:18:27,000
See we're only going to compile with llvm on Linux and we're only

1521
01:18:27,000 --> 01:18:29,800
going to compile with the llvm xcode branch on

1522
01:18:30,000 --> 01:18:30,500
Mac.

1523
01:18:30,800 --> 01:18:37,100
So why add two jumps to every counter when you get nothing for it,

1524
01:18:37,200 --> 01:18:37,800
right?

1525
01:18:40,900 --> 01:18:42,000
Seems like a really bad decision.

1526
01:18:49,200 --> 01:18:49,800
Let's see.

1527
01:18:49,900 --> 01:18:52,000
Why are you making an engine instead of a game?

1528
01:18:53,500 --> 01:18:58,000
Well, I'm making both right, I don't really think of those two things

1529
01:18:58,000 --> 01:19:02,200
as being all that separate, but in order to because I decided I want

1530
01:19:02,200 --> 01:19:03,900
to start from scratch so that everyone could see how to make

1531
01:19:03,900 --> 01:19:04,400
everything.

1532
01:19:05,400 --> 01:19:09,200
I have to implement all of the pieces of an engine first, but we've

1533
01:19:09,200 --> 01:19:10,100
done most of that.

1534
01:19:10,400 --> 01:19:13,800
So we don't have a whole lot left to do and then we can do game stuff

1535
01:19:13,800 --> 01:19:14,200
as well.

1536
01:19:15,000 --> 01:19:18,300
But as for why I would make that decision, there's a huge number of

1537
01:19:18,300 --> 01:19:18,900
reasons.

1538
01:19:19,200 --> 01:19:20,900
Number one is, I am an engine programmer.

1539
01:19:21,000 --> 01:19:21,800
That's what I do.

1540
01:19:22,800 --> 01:19:28,100
I am not here to show you how to make a game, you know, making a game

1541
01:19:28,500 --> 01:19:29,900
is a separate discipline.

1542
01:19:30,600 --> 01:19:32,400
I am here to show how you do engine programming.

1543
01:19:33,100 --> 01:19:38,800
And so it doesn't really make any sense for me to not make an engine.

1544
01:19:38,800 --> 01:19:41,700
Because the whole point of the stream is to show you how you make an

1545
01:19:41,700 --> 01:19:42,100
engine.

1546
01:19:43,700 --> 01:19:46,800
And we, we are making a game as well.

1547
01:19:47,500 --> 01:19:51,000
And so, to that extent, I will be showing how to make a game.

1548
01:19:52,100 --> 01:19:57,400
But that is because the engine in the game are very, you know, closely

1549
01:19:57,400 --> 01:19:57,900
related.

1550
01:19:57,900 --> 01:20:02,000
And obviously I if I just showed you how to make an engine, there's a

1551
01:20:02,000 --> 01:20:02,700
whole bunch of stuff that's

1552
01:20:02,900 --> 01:20:05,500
Difficult to teach and show because it's like, well, why are we doing

1553
01:20:05,500 --> 01:20:09,800
this without a game there to motivate why we wrote the code?

1554
01:20:09,800 --> 01:20:15,900
You know, if we don't need the bullet to collide with the Statue and

1555
01:20:15,900 --> 01:20:19,100
have the statue fracture, we don't know why we are writing this code

1556
01:20:19,100 --> 01:20:21,600
injection code and we don't know why we are writing the statue

1557
01:20:21,600 --> 01:20:23,400
crumbling stuff, right?

1558
01:20:24,500 --> 01:20:26,500
And so to that extent, you know,

1559
01:20:28,500 --> 01:20:33,500
the reason that it is a game and an engine together is because I feel

1560
01:20:33,500 --> 01:20:35,600
like that is the way to learn.

1561
01:20:35,600 --> 01:20:39,000
It shows you why everything gets written.

1562
01:20:43,500 --> 01:20:47,600
So that you don't have to wonder why I'm putting in, you know, this or

1563
01:20:47,600 --> 01:20:49,800
that feature or why?

1564
01:20:49,800 --> 01:20:52,200
I'm implementing something the way I'm implementing it.

1565
01:20:52,500 --> 01:20:54,200
I can always point out.

1566
01:20:54,300 --> 01:20:57,500
Oh, I'm writing this piece of code because we're trying to make it so

1567
01:20:57,500 --> 01:20:59,800
that the world can be extremely large.

1568
01:21:00,200 --> 01:21:02,500
So I need to store it's parsley or something, right?

1569
01:21:02,700 --> 01:21:06,000
If I don't have that in mind then, you know, if there's no game then

1570
01:21:06,000 --> 01:21:06,800
you wouldn't know.

1571
01:21:07,000 --> 01:21:10,000
Maybe you don't need that, maybe it, you know, if it's a game, that's

1572
01:21:10,000 --> 01:21:11,500
just takes place on one screen.

1573
01:21:11,700 --> 01:21:12,900
Why am I doing that feature?

1574
01:21:12,900 --> 01:21:16,000
Right, so, so I tried to pick a game as well, in a game design that

1575
01:21:16,000 --> 01:21:19,400
has all of the things I want to teach, so that it can constantly

1576
01:21:19,400 --> 01:21:21,200
motivate, you know, the code in that way.

1577
01:21:22,700 --> 01:21:24,000
Hopefully, that makes some sense to you.

1578
01:21:28,100 --> 01:21:28,800
Let's see.

1579
01:21:28,800 --> 01:21:30,900
Do you think of owning a red X matter is worth it, useful for

1580
01:21:30,900 --> 01:21:31,600
metaprogramming?

1581
01:21:31,800 --> 01:21:33,300
No II, don't do it.

1582
01:21:34,000 --> 01:21:35,900
I don't, I don't really like Rex's.

1583
01:21:36,000 --> 01:21:38,400
I never have, I don't, I don't, I don't care for them.

1584
01:21:39,000 --> 01:21:40,900
I think they're too simplistic.

1585
01:21:42,400 --> 01:21:44,200
I'll be want to seem to be pretty and happy to call you my server.

1586
01:21:44,200 --> 01:21:45,900
Do you think programmers were better in the past?

1587
01:21:46,000 --> 01:21:46,600
Is this all for you?

1588
01:21:46,600 --> 01:21:49,700
Produce always Flawless and Bug lists, as asking, seriously, just

1589
01:21:49,700 --> 01:21:51,000
trying to return your point more clearly.

1590
01:21:51,500 --> 01:21:57,600
No, I don't think anyone really ever produces software that's false

1591
01:21:57,600 --> 01:21:58,300
and Douglas.

1592
01:21:59,500 --> 01:22:02,800
I mean maybe once in a while you get really lucky and you hit some

1593
01:22:02,800 --> 01:22:07,100
sweet spot but yes programmers were much better in the past

1594
01:22:07,600 --> 01:22:09,200
significantly better than they are today.

1595
01:22:09,500 --> 01:22:11,900
The reason for that was because it was very hard just to do

1596
01:22:12,100 --> 01:22:12,800
Basic programming.

1597
01:22:13,400 --> 01:22:15,600
And so really the only people who were programming in the past for

1598
01:22:15,600 --> 01:22:18,900
people who could pass a certain level of quality in terms of what they

1599
01:22:18,900 --> 01:22:21,200
knew, how to do, and how good they were, in my opinion.

1600
01:22:22,500 --> 01:22:24,200
So, there was a natural selection process.

1601
01:22:25,200 --> 01:22:27,800
Nowadays, anyone can program, like, it's trivial.

1602
01:22:27,800 --> 01:22:30,900
You can just like, you know, load up some PHP script and start quote,

1603
01:22:30,900 --> 01:22:31,700
unquote programming.

1604
01:22:32,400 --> 01:22:36,700
So I don't think there are less great programmers today than there

1605
01:22:36,700 --> 01:22:37,600
were in the past.

1606
01:22:37,600 --> 01:22:40,200
There's just a lot more bad programmers.

1607
01:22:40,400 --> 01:22:41,900
So, you know, however many good

1608
01:22:42,000 --> 01:22:42,400
Programmers.

1609
01:22:42,400 --> 01:22:44,200
There are probably hasn't changed that much.

1610
01:22:45,500 --> 01:22:47,600
But the number of bad programmers, have skyrocketed.

1611
01:22:47,600 --> 01:22:49,600
As a result most software doesn't work at all.

1612
01:22:50,200 --> 01:22:52,300
Oftentimes on the stream, you even see that happen yesterday?

1613
01:22:52,300 --> 01:22:53,200
We had a particular, a singer.

1614
01:22:53,200 --> 01:22:55,100
I just wanted to play a movie the first movie player.

1615
01:22:55,100 --> 01:22:56,500
I tried crashed the second movie.

1616
01:22:56,500 --> 01:22:58,600
I play our went through all these different things.

1617
01:22:59,000 --> 01:23:01,800
It started asking me if I wanted to, like, install a storefront.

1618
01:23:01,800 --> 01:23:04,900
And then it couldn't play the video because it had the codec and

1619
01:23:04,900 --> 01:23:05,400
couldn't find it.

1620
01:23:05,400 --> 01:23:08,600
It was like, you know, and you just like, yep, that's that's - offer,

1621
01:23:08,600 --> 01:23:09,000
you know?

1622
01:23:09,400 --> 01:23:12,700
And so as far as saying, you know, is everything produced Flawless and

1623
01:23:12,700 --> 01:23:13,000
buglets.

1624
01:23:13,000 --> 01:23:14,000
No, absolutely not.

1625
01:23:14,200 --> 01:23:14,800
But what I will say

1626
01:23:15,000 --> 01:23:21,700
Is I try to have a certain quality bar that I get my software to and I

1627
01:23:21,700 --> 01:23:26,000
don't just, you know, sort of put out whatever the random thing is

1628
01:23:27,200 --> 01:23:31,100
that happens to work in some giant stack of garbage, that's super

1629
01:23:31,100 --> 01:23:32,800
slow, and buggy and all this other stuff.

1630
01:23:33,000 --> 01:23:36,500
I don't try to, I try not to shift that, right?

1631
01:23:37,400 --> 01:23:40,200
Where's a lot of people just shift that and they're fine with that and

1632
01:23:40,200 --> 01:23:42,900
they don't see a problem with it, you know, like, Facebook apparently

1633
01:23:42,900 --> 01:23:46,000
doesn't see a problem with shipping their Facebook app and that's

1634
01:23:46,000 --> 01:23:46,600
insane to me.

1635
01:23:46,900 --> 01:23:48,400
Like, I don't understand how you do that.

1636
01:23:48,400 --> 01:23:51,600
I don't understand how you can't look at the Facebook app on the

1637
01:23:51,600 --> 01:23:53,300
iPhone and go like, oh my God.

1638
01:23:55,800 --> 01:23:57,700
We need to completely change our engineering practices.

1639
01:23:57,700 --> 01:23:59,000
This is an epic disaster.

1640
01:23:59,000 --> 01:23:59,800
That's not what they say.

1641
01:24:00,900 --> 01:24:03,900
And they write blog post about like how good they did or stuff and

1642
01:24:03,900 --> 01:24:08,000
you're just like that that's like more my problem with things.

1643
01:24:08,000 --> 01:24:11,600
It's like if you put out the Facebook app and you were like wow we're

1644
01:24:11,600 --> 01:24:12,200
really awful.

1645
01:24:12,200 --> 01:24:12,800
We're sorry.

1646
01:24:12,900 --> 01:24:14,200
This is the best we could do.

1647
01:24:14,300 --> 01:24:15,600
We don't really know what we're doing.

1648
01:24:15,700 --> 01:24:16,800
We're all taking a voluntary.

1649
01:24:16,800 --> 01:24:19,700
Pay cut and we apologize.

1650
01:24:20,000 --> 01:24:22,400
That's different than we're great.

1651
01:24:22,400 --> 01:24:26,600
And here's our app that's absolutely ridiculously bad and huge and a

1652
01:24:26,600 --> 01:24:29,800
nightmare and like it's slow to use and everything else, right?

1653
01:24:30,000 --> 01:24:30,100
Right.

1654
01:24:31,800 --> 01:24:32,200
So yeah.

1655
01:24:32,200 --> 01:24:33,700
So I think there's definitely a thing there.

1656
01:24:34,100 --> 01:24:40,100
And what I will say as well is like, you know, I've definitely learned

1657
01:24:40,100 --> 01:24:51,200
my lesson to overtime, you know, I feel like if anything my Quality

1658
01:24:51,200 --> 01:24:55,500
Bar is actually lower than it should be like I don't I don't feel like

1659
01:24:55,500 --> 01:24:58,200
I'm that high actually, right?

1660
01:24:58,200 --> 01:24:59,600
And that's the other thing that troubles me,

1661
01:25:00,000 --> 01:25:04,600
I think of myself ranked against meticulousness on programmers.

1662
01:25:04,700 --> 01:25:09,500
I'm low compared to programmers that that I respect, right?

1663
01:25:09,600 --> 01:25:13,600
I am not like the guy who demands the most Flawless bug was code.

1664
01:25:13,700 --> 01:25:16,200
I'm far from that guy, right?

1665
01:25:16,600 --> 01:25:19,900
And so that's like another kind of troubling thing about it in my mind

1666
01:25:21,500 --> 01:25:24,800
is that I shouldn't be the one telling you your software is bad,

1667
01:25:25,500 --> 01:25:25,800
right?

1668
01:25:25,900 --> 01:25:29,800
I shouldn't I if, if you've crossed below my

1669
01:25:29,900 --> 01:25:37,300
Bar, you're really low, you're way below acceptable, because I'm not

1670
01:25:37,300 --> 01:25:42,600
that high on the like on that, on that side of things.

1671
01:25:43,000 --> 01:25:43,600
I'm okay.

1672
01:25:43,600 --> 01:25:47,700
Letting things slide like, you know, Jeff Roberts is performance bar

1673
01:25:47,800 --> 01:25:49,000
compared to mine.

1674
01:25:49,400 --> 01:25:52,400
It's night and day things that I think are totally, fine, performance

1675
01:25:52,400 --> 01:25:53,500
wise and I'm okay with them.

1676
01:25:53,700 --> 01:25:56,300
He thinks are not even close to where they need to be

1677
01:25:56,300 --> 01:25:57,200
performance-wise, right?

1678
01:25:57,200 --> 01:25:59,600
So so if you're below my bar,

1679
01:26:00,300 --> 01:26:02,300
I don't even know what to say to you, right.

1680
01:26:02,700 --> 01:26:05,900
I don't know how you get down there in the old days.

1681
01:26:06,100 --> 01:26:06,500
Yeah.

1682
01:26:06,600 --> 01:26:09,800
I guess I'd say it's, you know, when I got into programming when I

1683
01:26:09,800 --> 01:26:12,300
sort of got out of like high school and then started, you know,

1684
01:26:12,300 --> 01:26:13,600
programming professionally.

1685
01:26:14,100 --> 01:26:17,600
I was the bottom of the barrel on that those opinions, right?

1686
01:26:17,700 --> 01:26:19,200
And that hasn't changed.

1687
01:26:19,300 --> 01:26:21,400
All the guys that I was pregnant with that those times.

1688
01:26:21,400 --> 01:26:24,300
You know, they have higher performance standards than I do.

1689
01:26:24,300 --> 01:26:26,300
They know more about optimization than I do.

1690
01:26:27,300 --> 01:26:28,800
And that really hasn't changed.

1691
01:26:28,800 --> 01:26:32,900
What's changed is the industry has just is necrotic.

1692
01:26:32,900 --> 01:26:37,500
I mean, the number of people who accept absolutely awful levels of

1693
01:26:37,500 --> 01:26:41,200
reliability and performance is just staggeringly bad.

1694
01:26:41,300 --> 01:26:45,100
And, you know, if I could just sit, you know, if I could leave with

1695
01:26:45,100 --> 01:26:47,900
one, if I could sum that, in one thought it really is.

1696
01:26:48,100 --> 01:26:53,100
If you are below my quality and performance bar, you are in trouble

1697
01:26:53,100 --> 01:26:56,500
because I am not the high Watermark opinion.

1698
01:26:56,500 --> 01:26:56,700
Why?

1699
01:26:56,800 --> 01:26:59,800
Eyes by a drastic drastic.

1700
01:27:00,700 --> 01:27:01,300
Delta.

1701
01:27:03,200 --> 01:27:04,800
bye, you know, drastic

1702
01:27:10,700 --> 01:27:11,300
Let's see.

1703
01:27:22,300 --> 01:27:23,700
All right, I think most of the rest of the stuff.

1704
01:27:23,700 --> 01:27:26,800
I can't really address in a short amount of time.

1705
01:27:26,800 --> 01:27:28,200
So I'm going to wrap it up.

1706
01:27:28,900 --> 01:27:30,800
I'm going to go ahead and wrap it up.

1707
01:27:32,000 --> 01:27:33,500
Let's close it.

1708
01:27:33,500 --> 01:27:34,600
Close it down.

1709
01:27:35,700 --> 01:27:39,800
Pretty happy with where we ended up today, actually, because I think

1710
01:27:39,800 --> 01:27:42,900
that puts us in good shape tomorrow for having a pretty nice system

1711
01:27:42,900 --> 01:27:43,900
set up and kind of like

1712
01:27:46,700 --> 01:27:48,600
So anyway, thank you very much for joining me for another episode of

1713
01:27:48,600 --> 01:27:49,400
handmade hero.

1714
01:27:49,500 --> 01:27:50,500
It was a pleasure coding with you.

1715
01:27:50,500 --> 01:27:53,500
As always, if you would like to follow along at home,

1716
01:27:54,900 --> 01:27:57,400
you can always pre-order the game and it comes to the source code,

1717
01:27:57,400 --> 01:28:01,000
even just right now, if you would like to play around with it, you can

1718
01:28:01,000 --> 01:28:04,300
go ahead and do so and experiment, have some fun.

1719
01:28:05,400 --> 01:28:05,900
You could do that.

1720
01:28:05,900 --> 01:28:07,500
Just by clicking on the little pre order button.

1721
01:28:08,000 --> 01:28:10,400
We also have a patreon page if you want to support the video series,

1722
01:28:10,400 --> 01:28:11,800
that's the place to do it.

1723
01:28:11,900 --> 01:28:13,300
It's always very much appreciated.

1724
01:28:13,300 --> 01:28:16,600
We also have a forum site, the forum's is place to ask questions.

1725
01:28:16,600 --> 01:28:18,200
You can look at an antidepressant guide.

1726
01:28:18,200 --> 01:28:19,200
There's all kinds of good stuff there.

1727
01:28:19,200 --> 01:28:20,900
So if you're interested in following along the series that's good

1728
01:28:20,900 --> 01:28:21,500
place to check out.

1729
01:28:21,500 --> 01:28:25,100
We also have a tweet bot the tweetbot Tweet the schedule use.

1730
01:28:25,100 --> 01:28:30,100
If you're trying to catch the schedule live at any given time, you can

1731
01:28:30,100 --> 01:28:32,400
go there and see what's going to be for the weak, or that day, and

1732
01:28:32,400 --> 01:28:33,000
that sort of stuff.

1733
01:28:33,800 --> 01:28:35,000
After that schedule, I will be back.

1734
01:28:35,100 --> 01:28:36,600
Back here at 5:00 p.m.

1735
01:28:36,600 --> 01:28:37,900
Pacific Daylight time tomorrow.

1736
01:28:37,900 --> 01:28:40,800
So if you want to see us, go ahead and start collecting that deep,

1737
01:28:40,800 --> 01:28:44,700
that new debug info that we got, in a way that we can then use,

1738
01:28:44,800 --> 01:28:47,400
that'll kind of span across platform where let us really start to take

1739
01:28:47,400 --> 01:28:50,000
a look at things and see how our code Works, which I'm pretty excited

1740
01:28:50,000 --> 01:28:50,200
about.

1741
01:28:50,200 --> 01:28:53,400
Honestly, right back here 5 p.m.

1742
01:28:53,400 --> 01:28:55,300
tomorrow that's the place to be.

1743
01:28:55,300 --> 01:28:56,200
Hope to see you all there.

1744
01:28:56,200 --> 01:29:01,100
Until then, please have fun coding and I'll see you guys on the

1745
01:29:01,100 --> 01:29:01,600
internet.

1746
01:29:01,800 --> 01:29:02,600
Take these everyone

