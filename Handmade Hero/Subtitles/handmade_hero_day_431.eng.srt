1
00:00:02,700 --> 00:00:04,600
Hello everyone and welcome to handmade hero.

2
00:00:04,600 --> 00:00:07,300
The show where we Cody complete game live on stream.

3
00:00:07,500 --> 00:00:12,700
We are actually, I'm pretty happy with how the lighting is coming.

4
00:00:13,300 --> 00:00:17,100
I don't really know how much more stuff we want to do with it.

5
00:00:17,300 --> 00:00:20,300
It kind of, we kind of have to make some finishing decisions here,

6
00:00:20,300 --> 00:00:21,700
which is difficult.

7
00:00:22,700 --> 00:00:25,600
If This Were a normal project, handmade hero, everything moves at a

8
00:00:25,600 --> 00:00:29,300
glacial Pace because I can only program for two hours at a time, twice

9
00:00:29,300 --> 00:00:32,400
a week at the moment or, you know, something like that.

10
00:00:32,700 --> 00:00:35,400
Five hours a week is usually the amount of time.

11
00:00:36,500 --> 00:00:40,300
The never gets spent on it and especially to keep it relatively

12
00:00:40,500 --> 00:00:42,800
manageable for people who try to follow along at home, and which there

13
00:00:42,800 --> 00:00:44,200
are quite a few people actually.

14
00:00:45,700 --> 00:00:49,600
And so, what that means is that the amount of actual experimentation

15
00:00:49,600 --> 00:00:52,800
and diligence we can do on anything is actually pretty limited and I

16
00:00:52,800 --> 00:00:56,000
know it seems like we take a long time on things but like the entire

17
00:00:56,000 --> 00:00:57,300
development time of handmade hero.

18
00:00:57,300 --> 00:00:59,900
So far has been like, 3 months of programming time or something,

19
00:01:00,200 --> 00:01:00,500
right?

20
00:01:00,500 --> 00:01:01,700
If you add it up, it's nuts.

21
00:01:01,700 --> 00:01:03,000
How small it is.

22
00:01:04,400 --> 00:01:06,000
And, you know, I'm a game engine developer.

23
00:01:06,000 --> 00:01:09,100
I'm used to say suspending, three months, just on the lighting or

24
00:01:09,100 --> 00:01:10,200
something, right?

25
00:01:11,800 --> 00:01:16,300
So you know what we would do, if we had the kind of time that we

26
00:01:16,300 --> 00:01:20,900
normally have on full project that isn't streamed and isn't supposed

27
00:01:20,900 --> 00:01:25,500
to be followed along with it, home is one thing and what we can afford

28
00:01:25,500 --> 00:01:27,900
to do on the stream in a reasonable amount of time.

29
00:01:28,900 --> 00:01:31,900
That doesn't take too many episodes is another

30
00:01:32,900 --> 00:01:36,900
So obviously, you know, to make it clear, I would spend hundreds more

31
00:01:36,900 --> 00:01:40,900
hours on this if it were my day job, right?

32
00:01:43,100 --> 00:01:46,400
But we aren't going to do that here because it would be years before

33
00:01:46,400 --> 00:01:46,900
we finished.

34
00:01:46,900 --> 00:01:48,100
So we can have to go.

35
00:01:48,100 --> 00:01:48,400
All right.

36
00:01:48,400 --> 00:01:52,000
We've done a reasonable number of episodes on the thing and we have

37
00:01:52,000 --> 00:01:54,200
some fairly workable stuff.

38
00:01:54,300 --> 00:01:57,700
What can we make in terms of assumptions now and sort of start to

39
00:01:57,700 --> 00:02:00,000
narrow in on something shippable?

40
00:02:00,000 --> 00:02:04,900
Because you know again we just we just can't do the kinds of research.

41
00:02:04,900 --> 00:02:09,500
We would normally want to do in a full-fledged project so just want to

42
00:02:09,500 --> 00:02:12,700
make that clear, I wouldn't normally be sort of tail.

43
00:02:13,100 --> 00:02:15,700
Telling things down at this point, but that's true of everything in

44
00:02:15,700 --> 00:02:17,100
the handmade here engine, right?

45
00:02:17,100 --> 00:02:20,000
Everything can always be done more, and if you have more time, you can

46
00:02:20,000 --> 00:02:23,700
do a better job and try more options and come to a better conclusion.

47
00:02:26,500 --> 00:02:29,200
So, given that.

48
00:02:31,600 --> 00:02:34,500
The major decision we have to make is whether we want to run GPU

49
00:02:34,600 --> 00:02:39,100
lighting or not and there's reasons to and not to do it.

50
00:02:39,800 --> 00:02:43,600
And I'm not sure how, you know, what direction you want to go on that.

51
00:02:45,000 --> 00:02:48,900
So I think what we want to do today, we multi-threaded the lighting

52
00:02:49,200 --> 00:02:49,900
yesterday.

53
00:02:50,400 --> 00:02:55,300
Sorry, last week on the last episode and it might be interesting to

54
00:02:55,300 --> 00:02:57,700
just take a look at what we've got.

55
00:02:58,200 --> 00:02:59,800
And see roughly

56
00:03:00,000 --> 00:03:03,000
What kind of performance we might expect to get.

57
00:03:04,400 --> 00:03:09,500
Out of this if we just kind of tune it a little bit, right, go through

58
00:03:09,500 --> 00:03:14,000
and try to make sure that we're not doing anything too stupid and make

59
00:03:14,000 --> 00:03:17,100
sure the compiler can do a reasonable job generating code.

60
00:03:17,200 --> 00:03:20,700
Maybe work on the spatial hark A little bit just so we can get a sense

61
00:03:20,700 --> 00:03:25,000
of like, okay how fast would this lighting run, if we were going to

62
00:03:25,000 --> 00:03:29,600
run it on the CPU, and that may give us some perspective.

63
00:03:30,900 --> 00:03:34,200
Once we have that kind of cleaned up as well, that might help us

64
00:03:34,200 --> 00:03:40,000
determine, you know, what do we think this would do on a GPU?

65
00:03:40,000 --> 00:03:43,600
Do we think that it's reasonable to run on the GPU and so on?

66
00:03:44,800 --> 00:03:48,400
Because we are still way too slow, you know it's getting faster but

67
00:03:48,400 --> 00:03:52,700
it's not nearly fast enough for what we probably would want to do in

68
00:03:52,700 --> 00:03:56,400
most cases because remember there's going to be even more lighting

69
00:03:56,400 --> 00:03:58,200
elements in there than there are right now.

70
00:03:58,600 --> 00:04:00,600
And so we need to be a little bit more.

71
00:04:01,000 --> 00:04:04,000
We need to make sure that we're better than we are right now.

72
00:04:04,000 --> 00:04:08,700
If we're gonna be able to ship something solid.

73
00:04:09,400 --> 00:04:14,300
So right now this is a example of a large number of

74
00:04:14,600 --> 00:04:18,399
In the world that are all having lighting apply to them right now and

75
00:04:18,399 --> 00:04:20,800
it's being applied, fairly reasonably.

76
00:04:20,800 --> 00:04:24,100
Like I'm pretty happy with this lighting, it's not bad, you know?

77
00:04:24,500 --> 00:04:26,600
And it's it's got everything.

78
00:04:26,600 --> 00:04:30,300
You would probably want at the moment in terms of the lighting system,

79
00:04:30,400 --> 00:04:32,500
how we're using lighting system is not great.

80
00:04:32,800 --> 00:04:36,100
We can definitely do a much better job of Distributing lighting points

81
00:04:36,800 --> 00:04:38,800
throughout the world and using them.

82
00:04:38,800 --> 00:04:41,900
So that part I think can be improved but in terms of the core letting

83
00:04:41,900 --> 00:04:44,100
system, which is what you care about at the moment.

84
00:04:44,900 --> 00:04:47,400
I feel like the lighting is working pretty nicely at this point

85
00:04:47,400 --> 00:04:48,000
actually.

86
00:04:49,000 --> 00:04:51,400
So the question is, just all right?

87
00:04:51,400 --> 00:04:56,700
Can we get you know a 2X 3x 4X speed up in the lighting?

88
00:04:57,100 --> 00:05:00,500
What can we do to like get significantly better than we are right now

89
00:05:01,300 --> 00:05:05,600
and just you know see what our what our chances are of making that

90
00:05:05,600 --> 00:05:06,000
happen.

91
00:05:07,900 --> 00:05:11,000
So in order to do that, I need to start taking some further steps.

92
00:05:12,100 --> 00:05:15,000
Here's the sorts of things that I want to look at today.

93
00:05:15,500 --> 00:05:19,000
So first of all, I want to just take a little bit of a survey through

94
00:05:19,000 --> 00:05:22,100
the code to figure out to what extent.

95
00:05:22,100 --> 00:05:27,500
I expect the code to be compilable, right?

96
00:05:27,700 --> 00:05:28,500
In a clean way.

97
00:05:29,300 --> 00:05:32,900
Because at the moment, for example, we don't really know very much

98
00:05:32,900 --> 00:05:37,000
about how the code is being generated and for all we know, it may be

99
00:05:37,500 --> 00:05:43,800
Generated very poorly, the code May yet at the present time.

100
00:05:43,800 --> 00:05:47,100
We may be doing some really stupid things and we may be generating

101
00:05:47,100 --> 00:05:50,400
code or the compiler may be generating code.

102
00:05:50,400 --> 00:05:51,700
That's just very, very bad.

103
00:05:52,600 --> 00:05:55,400
And so what I'd like to do is just take a kind of look at that and

104
00:05:55,400 --> 00:05:55,900
see.

105
00:05:58,800 --> 00:05:59,200
You know what?

106
00:05:59,200 --> 00:05:59,800
I think about it.

107
00:06:00,400 --> 00:06:02,800
And clean up any problems that might be there.

108
00:06:03,000 --> 00:06:06,400
The other thing I would like to do is take a look and see how our

109
00:06:06,400 --> 00:06:08,300
spatial hierarchy stuff could be improved.

110
00:06:10,900 --> 00:06:12,900
At the moment, I can tell you, for example.

111
00:06:15,300 --> 00:06:20,500
That you know, if you look at the statistics you can see that we have.

112
00:06:21,900 --> 00:06:24,900
Oh we're not sorry we didn't actually for so that's one thing to do

113
00:06:24,900 --> 00:06:25,200
to.

114
00:06:26,700 --> 00:06:27,900
We have not actually

115
00:06:31,400 --> 00:06:32,200
Hmm.

116
00:06:32,600 --> 00:06:34,500
Total casts initiated.

117
00:06:35,200 --> 00:06:36,900
Why is that still being recorded?

118
00:06:37,900 --> 00:06:39,300
That's not good, folks.

119
00:06:41,000 --> 00:06:42,400
We forget that one.

120
00:06:48,600 --> 00:06:49,200
Oh man.

121
00:06:50,800 --> 00:06:52,700
We're still bouncing a cache line around.

122
00:06:54,100 --> 00:06:58,400
Wonder how that will affect our speed, probably not much, but because

123
00:06:58,400 --> 00:07:00,500
the raycast is fairly heavy weight.

124
00:07:00,800 --> 00:07:02,300
But that was, we missed that one.

125
00:07:03,400 --> 00:07:04,100
Picked it.

126
00:07:04,100 --> 00:07:04,700
It's a

127
00:07:05,900 --> 00:07:08,100
doesn't look like it has changed it much though.

128
00:07:08,100 --> 00:07:08,900
So that's okay.

129
00:07:11,500 --> 00:07:15,800
All right, we can put the stats back in.

130
00:07:16,200 --> 00:07:22,500
All we have to do is some them per thread and then when we're done, we

131
00:07:22,500 --> 00:07:25,800
can add them together using a safe ad.

132
00:07:27,100 --> 00:07:27,600
So

133
00:07:30,000 --> 00:07:32,600
If you look at the statistics though, because I remember we look them

134
00:07:32,600 --> 00:07:37,100
before we still check way too many boxes per raycast.

135
00:07:37,100 --> 00:07:37,700
I think.

136
00:07:42,300 --> 00:07:45,800
Really the number of raycast we do isn't astronomical.

137
00:07:45,900 --> 00:07:50,700
The problem is the amount of work each raycast does is astronomical.

138
00:07:51,900 --> 00:07:53,300
And so let's go ahead.

139
00:07:53,300 --> 00:07:54,800
I mean I guess one thing we can do right now.

140
00:07:54,800 --> 00:07:58,400
Let's just go ahead and start by just getting those stats.

141
00:07:58,500 --> 00:08:01,400
Getting a Stat system in place so we can take a look at these.

142
00:08:01,700 --> 00:08:04,400
I think that would be a good place to go, right?

143
00:08:06,500 --> 00:08:10,200
So let's in fact we should have that lighting work.

144
00:08:10,200 --> 00:08:12,600
Don't we have lighting work or something like this?

145
00:08:12,600 --> 00:08:17,200
Yeah, so let's sort of promote lighting work here, right?

146
00:08:17,300 --> 00:08:21,300
I kind of said that Canadian, stop, promote promote, let's promote.

147
00:08:23,000 --> 00:08:27,500
So let's take lighting work and make that a real first-class Citizen.

148
00:08:28,300 --> 00:08:32,600
And when we can do here is say, alright, let's grab these things out.

149
00:08:34,400 --> 00:08:35,700
That we used to have here.

150
00:08:40,200 --> 00:08:41,299
And I'll put them in here.

151
00:08:41,600 --> 00:08:44,400
So the lighting work structure will take how many castes were

152
00:08:44,400 --> 00:08:45,000
initiated?

153
00:08:45,000 --> 00:08:46,500
How many partitions were tested?

154
00:08:46,500 --> 00:08:47,700
How many leaves were tested?

155
00:08:49,600 --> 00:08:50,400
And we will.

156
00:08:53,200 --> 00:08:59,200
go ahead and keep those / lighting like

157
00:09:00,800 --> 00:09:05,300
We will track those per thread, and then at the end, when the threads

158
00:09:05,300 --> 00:09:11,100
retire, their work, we will only have that time sum them up, and we

159
00:09:11,100 --> 00:09:14,800
can even do that without any locked increments, I'll show you how we

160
00:09:14,800 --> 00:09:15,300
can do that.

161
00:09:15,300 --> 00:09:19,300
So we can literally keep the cache line bouncing completely off the

162
00:09:19,300 --> 00:09:21,500
table until the very end.

163
00:09:22,200 --> 00:09:23,100
So we can do that.

164
00:09:23,100 --> 00:09:25,700
I don't know if there is anything else that we had here, that would

165
00:09:25,700 --> 00:09:26,300
have been /.

166
00:09:26,300 --> 00:09:30,400
Work-related, I don't think they're really

167
00:09:30,500 --> 00:09:32,000
Was a debug lines.

168
00:09:32,000 --> 00:09:37,700
I guess would be one thing that would be per work-related.

169
00:09:37,800 --> 00:09:42,600
However, I don't know that we really do anything with debug lines at

170
00:09:42,600 --> 00:09:43,100
the moment.

171
00:09:43,100 --> 00:09:45,000
So I think that's probably pretty safe.

172
00:09:45,200 --> 00:09:51,000
So because the push debug line call is not actually doing anything at

173
00:09:51,000 --> 00:09:51,500
the moment.

174
00:09:51,500 --> 00:09:53,700
So I can, for example, get rid of this

175
00:09:57,700 --> 00:09:58,700
And that should be fine.

176
00:10:00,500 --> 00:10:04,000
So I don't think we really need to do that because we could make the

177
00:10:04,000 --> 00:10:05,900
debug line system be thread safe.

178
00:10:05,900 --> 00:10:08,800
I don't think we really needed to be because we can always just turn

179
00:10:08,800 --> 00:10:11,200
off threading when we're trying to bug things.

180
00:10:11,400 --> 00:10:15,100
So there's really not a lot of point to wasting that time as I can't

181
00:10:15,100 --> 00:10:17,100
think of any reason to do it at the moment.

182
00:10:17,300 --> 00:10:20,600
So I would say it's probably better to just not bother, that's what

183
00:10:20,600 --> 00:10:21,000
I'd say.

184
00:10:22,000 --> 00:10:25,400
All right, so what I want to do now is take the letting solution here.

185
00:10:27,300 --> 00:10:30,900
And I want to go ahead and make the lighting work structure be the

186
00:10:30,900 --> 00:10:33,500
thing that gets passed around to everyone so that they can actually

187
00:10:33,500 --> 00:10:35,900
some their statistics, right?

188
00:10:37,100 --> 00:10:40,100
So what I want to do is I want to start with compute light,

189
00:10:40,100 --> 00:10:45,300
propagation probably here and in compute light propagation

190
00:10:47,300 --> 00:10:51,900
Instead of passing these things along here, I'm just going to pass the

191
00:10:51,900 --> 00:10:53,000
work structure along.

192
00:10:53,800 --> 00:10:54,400
Like so,

193
00:10:56,000 --> 00:11:00,300
And then, what I'll do is inside compute light propagation, that only

194
00:11:00,300 --> 00:11:04,700
takes the work structure, what we can do is grab these out here.

195
00:11:09,200 --> 00:11:16,500
And then we can have access to the stats for summation, which is what

196
00:11:16,500 --> 00:11:17,200
I want to do.

197
00:11:26,600 --> 00:11:31,000
All right, so there's all I really wanted to

198
00:11:33,900 --> 00:11:34,400
do there.

199
00:11:35,300 --> 00:11:40,900
So now when we actually were adding stuff in any of these routines, we

200
00:11:40,900 --> 00:11:42,600
can go ahead and Sample them.

201
00:11:43,100 --> 00:11:43,800
I don't know.

202
00:11:43,800 --> 00:11:45,200
Do we just delete?

203
00:11:45,300 --> 00:11:50,500
I thought we had well, I guess we didn't really need to add the sample

204
00:11:50,500 --> 00:11:50,900
points here.

205
00:11:50,900 --> 00:11:52,600
I guess that's already something that we know,

206
00:11:54,000 --> 00:11:55,100
So that's probably fine.

207
00:11:55,900 --> 00:11:57,600
So let's go ahead to me.

208
00:12:00,000 --> 00:12:03,800
And take a look at where we want to add this data.

209
00:12:06,100 --> 00:12:08,700
So it looks like here.

210
00:12:11,900 --> 00:12:14,800
That's our initiation call.

211
00:12:17,500 --> 00:12:21,500
Here's our other two stats here during the recursion.

212
00:12:36,800 --> 00:12:42,800
And that may be all were looking at the moment.

213
00:12:58,700 --> 00:13:00,400
So yeah.

214
00:13:08,800 --> 00:13:10,500
So I think that's all good.

215
00:13:11,500 --> 00:13:14,700
If we take a look at this, now these are gone.

216
00:13:15,200 --> 00:13:19,500
And what I want to do in compute light propagation now so you can see,

217
00:13:19,500 --> 00:13:22,000
we do like total cast initiated in this, our stuff here.

218
00:13:22,200 --> 00:13:28,200
I want to pull those out and I want to go to the actual place where we

219
00:13:28,200 --> 00:13:30,800
did the work distribution, which is here and compute light

220
00:13:30,800 --> 00:13:31,600
propagation.

221
00:13:32,600 --> 00:13:37,400
And so, what I'd like to do here is I'd like to Output those at the

222
00:13:37,400 --> 00:13:37,900
end.

223
00:13:38,600 --> 00:13:39,000
This.

224
00:13:40,700 --> 00:13:43,400
And I'd like those to just be sums here.

225
00:13:52,500 --> 00:13:57,100
And so what I'd like to do for that is just say well we know that we

226
00:13:57,100 --> 00:14:00,200
have all these work structures and we know that we distributed all of

227
00:14:00,200 --> 00:14:07,600
our work out, amongst them and so the work index value that we stop

228
00:14:07,600 --> 00:14:10,200
with here would tell us that information.

229
00:14:11,500 --> 00:14:12,000
Right.

230
00:14:15,000 --> 00:14:18,700
So what I'll probably do here is say, alright, here's our work count.

231
00:14:23,600 --> 00:14:24,300
Like so.

232
00:14:25,000 --> 00:14:29,300
And yeah, I mean that's that's really all we're talking about here.

233
00:14:29,300 --> 00:14:31,300
So when we get out of this, we know how many work

234
00:14:33,100 --> 00:14:34,000
elements we did.

235
00:14:34,500 --> 00:14:37,400
So then what I can do is I can just Loop over all of the work elements

236
00:14:37,400 --> 00:14:40,900
that we did and some them.

237
00:14:45,900 --> 00:14:47,500
So you can see what I'm doing here, right?

238
00:14:47,500 --> 00:14:52,300
I've got these work orders that I sent out to everyone.

239
00:14:53,000 --> 00:14:56,600
And then after everyone is done working, I just sum up whatever all

240
00:14:56,600 --> 00:14:59,500
their results were and again, this is really nice.

241
00:15:00,000 --> 00:15:05,600
Any way to do this because then the threads are all working on

242
00:15:05,600 --> 00:15:08,300
different parts of memory.

243
00:15:10,500 --> 00:15:16,000
If I were to do a locked increment it would be thread safe but it

244
00:15:16,000 --> 00:15:22,900
would pull the cache line back and forth between korres all the time

245
00:15:23,100 --> 00:15:24,000
for no reason.

246
00:15:24,400 --> 00:15:24,900
Right?

247
00:15:26,100 --> 00:15:30,200
And we don't want that because if they have to stall and wait on those

248
00:15:30,200 --> 00:15:35,800
cache lines then we are effectively ruining our performance

249
00:15:37,700 --> 00:15:42,900
All right, so all I want to do here is just some these guys up.

250
00:15:42,900 --> 00:15:47,100
So I want to take each individual work structure that we know actually

251
00:15:47,100 --> 00:15:49,700
got distributed dispatched.

252
00:15:57,000 --> 00:16:00,700
And once that's done, and we get all that information back, then I can

253
00:16:00,700 --> 00:16:01,400
send it out.

254
00:16:02,300 --> 00:16:05,300
So we have to pull out each member of the ray.

255
00:16:10,100 --> 00:16:13,900
But now we should have all of those statistics back and some correctly

256
00:16:13,900 --> 00:16:17,100
without bouncing any cache lines around between anybody else.

257
00:16:22,200 --> 00:16:27,800
That is bizarre though, so that actually spent a lot of that actually

258
00:16:27,800 --> 00:16:32,400
still gave us time hit there to see that.

259
00:16:38,400 --> 00:16:39,500
Hmm.

260
00:16:51,800 --> 00:16:55,300
I'm not sure why it did.

261
00:16:58,500 --> 00:17:00,500
Although so how big is this guy?

262
00:17:02,200 --> 00:17:04,000
We should probably try to align these

263
00:17:07,900 --> 00:17:10,599
So, the lighting work.

264
00:17:13,200 --> 00:17:17,300
That would be eight and eight, that's 16.

265
00:17:19,099 --> 00:17:25,500
So, we really want these to be 64 byte aligned if possible, Right?

266
00:17:27,400 --> 00:17:28,900
And right now, they're not.

267
00:17:31,700 --> 00:17:36,500
Here they would be right if we did that, we have the ability to do

268
00:17:36,500 --> 00:17:37,700
alignment.

269
00:17:39,900 --> 00:17:45,600
When we do our allocations, unfortunately, this is not allocated.

270
00:17:45,600 --> 00:17:47,300
Now we could make it allocated

271
00:17:48,300 --> 00:17:49,500
Let's, let's take a look here.

272
00:17:54,300 --> 00:17:58,800
I want to see if I can make this not be bouncing around, so we should

273
00:17:58,800 --> 00:17:59,800
probably be careful about.

274
00:18:00,000 --> 00:18:01,200
This regardless.

275
00:18:01,600 --> 00:18:02,100
So,

276
00:18:04,300 --> 00:18:08,400
The things that are being written to hear accumulated PPS and

277
00:18:08,400 --> 00:18:12,600
accumulated weight, and average direction to light, right?

278
00:18:12,600 --> 00:18:15,500
These are the things that get everything else gets read to.

279
00:18:15,700 --> 00:18:17,000
But these are written to.

280
00:18:18,200 --> 00:18:21,800
And for that matter, we could say that this goes in here too, right?

281
00:18:22,700 --> 00:18:26,800
So if we have those guys there, I don't think

282
00:18:29,100 --> 00:18:32,200
to scratch a and scratch be.

283
00:18:34,500 --> 00:18:36,100
Are those even used anymore?

284
00:18:46,300 --> 00:18:49,600
So we use scratch a and scratched be.

285
00:18:49,700 --> 00:18:51,700
Oh, those are, those are four boxes.

286
00:18:51,700 --> 00:18:52,100
Okay.

287
00:18:52,100 --> 00:18:52,700
So those are fine.

288
00:18:52,700 --> 00:18:53,700
We don't care about those anyway.

289
00:18:53,700 --> 00:18:54,900
They're not used in letting it all.

290
00:18:56,900 --> 00:19:01,200
So, I believe the only people we write to our, this is what gets

291
00:19:01,200 --> 00:19:01,800
written to.

292
00:19:04,400 --> 00:19:05,800
In fact, I can move these down here.

293
00:19:10,400 --> 00:19:12,000
I don't know about the entropy counter.

294
00:19:19,400 --> 00:19:22,500
And to be counter only gets updated at the end of every frame.

295
00:19:23,300 --> 00:19:24,200
That's also fine.

296
00:19:24,600 --> 00:19:26,600
So this stuff is generally speaking.

297
00:19:26,600 --> 00:19:27,600
Not written to

298
00:19:29,400 --> 00:19:30,600
During the course of lighting.

299
00:19:33,500 --> 00:19:34,800
In the multi-threaded section.

300
00:19:36,700 --> 00:19:38,400
So we're really only talking.

301
00:19:40,600 --> 00:19:42,100
About this stuff down here.

302
00:19:43,100 --> 00:19:46,600
And so what I'd like to do is I guess I'd like to just make that

303
00:19:46,600 --> 00:19:47,100
stuff.

304
00:19:47,700 --> 00:19:50,200
I'd like to make sure this stuff is Cash aligned

305
00:19:54,100 --> 00:19:56,700
And again, the reason that I'm doing this is because I want to take

306
00:19:56,700 --> 00:20:03,700
out of the equation, anything that might bounce back and forth between

307
00:20:03,700 --> 00:20:04,300
cores.

308
00:20:05,600 --> 00:20:09,100
So the way that happens I believe the term is typically applied to

309
00:20:09,100 --> 00:20:13,900
this is just false sharing which is a reasonable term for it.

310
00:20:13,900 --> 00:20:17,100
I guess sometimes computer terms are not very good.

311
00:20:17,500 --> 00:20:18,500
That one's okay.

312
00:20:22,300 --> 00:20:25,800
And all I'm trying to do here is make sure before we get any further

313
00:20:25,800 --> 00:20:28,600
into this, that you don't have the following thing happen.

314
00:20:32,000 --> 00:20:34,000
So, here is 64 bytes of memory.

315
00:20:34,400 --> 00:20:37,400
And here's the next 64, bytes of memory, right?

316
00:20:38,600 --> 00:20:41,800
And when I say, 64, bytes of memory, I mean something that is aligned

317
00:20:41,800 --> 00:20:45,900
such that the bottom 64 bytes worth of address is zero.

318
00:20:47,000 --> 00:20:50,200
all right, so remember a address

319
00:20:54,700 --> 00:20:56,600
has a bunch of bits in it.

320
00:20:56,900 --> 00:20:57,900
Here's the bits.

321
00:21:00,600 --> 00:21:09,600
Here's the 2 to the 0 to 1 to the 22 23, 24 25, 26, 27 28.

322
00:21:09,600 --> 00:21:09,800
Okay.

323
00:21:10,600 --> 00:21:14,100
So what I'm talking about here is it's got zeros all in the bottom.

324
00:21:16,600 --> 00:21:18,500
All right, so none of these are set.

325
00:21:20,000 --> 00:21:22,400
So the first thing is that our set or up here somewhere

326
00:21:23,500 --> 00:21:27,000
So this is an address that's aligned to a 64 byte boundary.

327
00:21:27,000 --> 00:21:31,900
And here's the next 64, byte boundary, the cash L1 L2.

328
00:21:31,900 --> 00:21:37,900
L3 thinks about things in this size, so it's going to move things back

329
00:21:37,900 --> 00:21:39,400
and forth to memory.

330
00:21:39,400 --> 00:21:40,900
And in between the caches.

331
00:21:40,900 --> 00:21:45,000
In this way, it's never going to think of things, like, more granular

332
00:21:45,000 --> 00:21:48,200
has never had to think about like this one bite here or something, it

333
00:21:48,200 --> 00:21:48,900
doesn't care.

334
00:21:49,000 --> 00:21:50,300
It's just going to think of that trunk.

335
00:21:51,400 --> 00:21:55,500
so what happens is if I'm doing multi-threading and one of my

336
00:21:55,500 --> 00:21:58,500
structures that I'm looking at goes like this,

337
00:22:01,100 --> 00:22:04,500
if I try to write to here,

338
00:22:05,800 --> 00:22:10,500
Right, there may be no other thread sake or zero is running this.

339
00:22:10,600 --> 00:22:14,600
There may be no other thread on any other core that's ever going to

340
00:22:14,600 --> 00:22:15,500
try to write here.

341
00:22:15,500 --> 00:22:18,100
I'm the only person who's going to try to right here so I have

342
00:22:18,600 --> 00:22:19,500
exclusive access to it.

343
00:22:19,500 --> 00:22:21,300
It should be full speed, right?

344
00:22:22,000 --> 00:22:28,000
However, if another person on another core core one has to write right

345
00:22:28,000 --> 00:22:30,600
here, nowhere near it, right?

346
00:22:30,600 --> 00:22:33,800
There's a giant gap of like, you know, 50 bytes in the way or

347
00:22:33,800 --> 00:22:34,300
something.

348
00:22:35,800 --> 00:22:36,700
Nowhere near each other.

349
00:22:36,700 --> 00:22:40,200
No chance of overwrite this cache line.

350
00:22:41,100 --> 00:22:47,900
The 64 bytes will still have to negotiate between the cores because

351
00:22:47,900 --> 00:22:52,300
they need to be able to resolve the fact that they both wrote to the

352
00:22:52,300 --> 00:22:57,200
same cache line because cache lines are what the processor thinks

353
00:22:57,200 --> 00:22:57,500
about.

354
00:22:57,500 --> 00:22:59,700
In terms of who gets to write what we're.

355
00:23:00,400 --> 00:23:04,700
And so we may be introducing overhead on the processor that will

356
00:23:05,400 --> 00:23:10,600
Our code to visit significantly less Speedy, simply by.

357
00:23:10,600 --> 00:23:15,900
Not making sure that the things that one thread uses are all on

358
00:23:15,900 --> 00:23:17,600
different cache lines in another thread.

359
00:23:17,800 --> 00:23:22,300
It's not about using less memory, it doesn't matter if the thing fits

360
00:23:22,300 --> 00:23:25,200
in the cache line or not, that's a separate kind of optimization.

361
00:23:25,200 --> 00:23:27,700
That's trying to optimize for the amount of cash or using

362
00:23:29,000 --> 00:23:31,900
What I'm talking about is just making sure that no matter how much

363
00:23:31,900 --> 00:23:36,900
memory they use, neither threat, none of the threads, use the same

364
00:23:36,900 --> 00:23:38,200
cache line for writing.

365
00:23:38,400 --> 00:23:43,100
They can all read from the same cache lines all day long reading from

366
00:23:43,100 --> 00:23:46,000
Cache lines is free, it's not a problem, right?

367
00:23:46,100 --> 00:23:49,300
If you never have to touch the cache line and you just read from it,

368
00:23:49,400 --> 00:23:52,700
all of the cores can store their own copies of those cache lines and

369
00:23:52,700 --> 00:23:55,700
since no one's ever updating them, they never have to talk to each

370
00:23:55,700 --> 00:23:57,400
other about it, right?

371
00:23:57,800 --> 00:23:58,600
The problem is when

372
00:23:58,800 --> 00:23:59,900
I'm goes to right to a cash.

373
00:24:00,100 --> 00:24:03,400
Now all the other cores need to be made aware of the fact that someone

374
00:24:03,400 --> 00:24:06,600
change that cache line and if heaven forbid, they need to write to it

375
00:24:06,600 --> 00:24:07,100
as well.

376
00:24:07,200 --> 00:24:10,200
Now they've got to negotiate about who gets to write it when what

377
00:24:10,200 --> 00:24:12,600
state it was in and all these are the sorts of things and who knows

378
00:24:12,600 --> 00:24:13,600
how bad that can be.

379
00:24:15,900 --> 00:24:16,400
So,

380
00:24:19,600 --> 00:24:20,600
What we want to do here.

381
00:24:22,700 --> 00:24:27,700
Is just ensure that all of these things are 64, byte aligned.

382
00:24:29,700 --> 00:24:31,200
And they all have.

383
00:24:34,400 --> 00:24:42,100
That they all have a memory address that starts on a 64 byte boundary.

384
00:24:42,200 --> 00:24:44,000
So we know that they're perfectly chunked.

385
00:24:45,200 --> 00:24:46,400
So that's what we want to do.

386
00:24:48,600 --> 00:24:52,600
So in handmade platform we do have the ability to allocate memory,

387
00:24:53,000 --> 00:24:53,500
right?

388
00:24:54,100 --> 00:24:56,100
But we probably don't really need to do that.

389
00:24:56,100 --> 00:24:57,900
So in the lighting solution here,

390
00:25:02,900 --> 00:25:05,200
I'm just going to make it so that it has two admission lies.

391
00:25:08,600 --> 00:25:10,700
And I'm also going to use again.

392
00:25:10,700 --> 00:25:13,600
We've got the ability in our

393
00:25:19,000 --> 00:25:21,400
System here to pass a memory Arena.

394
00:25:21,700 --> 00:25:24,600
So I can just say like where do you want me to get my memory from?

395
00:25:25,100 --> 00:25:28,400
And then when I allocate, I'm going to use the Ability our ability to

396
00:25:28,400 --> 00:25:33,800
allocate sort of things that are aligned because we have that you can

397
00:25:33,800 --> 00:25:36,800
see we've got these memory params, right?

398
00:25:36,800 --> 00:25:38,400
So I can say that something.

399
00:25:41,200 --> 00:25:43,500
Is an alliance piece of memory.

400
00:25:50,400 --> 00:25:53,600
And we don't need it cleared.

401
00:25:54,100 --> 00:25:54,500
I don't.

402
00:25:54,800 --> 00:25:56,700
Yeah I guess we do need it.

403
00:25:56,700 --> 00:25:58,200
Cleared this time so that's fine.

404
00:25:58,500 --> 00:26:00,500
I don't think we really do because it was already clear but that's

405
00:26:00,500 --> 00:26:00,900
okay.

406
00:26:02,100 --> 00:26:07,000
So we know we want this to be 64 by two lines and we know that we want

407
00:26:07,000 --> 00:26:07,500
it to be clear.

408
00:26:07,500 --> 00:26:09,000
So I'll pass the clear through there.

409
00:26:10,100 --> 00:26:12,300
So anyway, inside the

410
00:26:15,100 --> 00:26:16,600
Inside the lighting initialisation.

411
00:26:16,600 --> 00:26:18,100
I just want to do a push array.

412
00:26:18,700 --> 00:26:21,000
I'm going to pass that Arena that we're using.

413
00:26:21,700 --> 00:26:25,900
I know how many of this I want for each individual one and I know the

414
00:26:25,900 --> 00:26:26,900
type of it as well.

415
00:26:27,000 --> 00:26:29,000
So that should be pretty easy to get there.

416
00:26:29,000 --> 00:26:31,000
Just these guys here.

417
00:26:31,500 --> 00:26:33,000
So I knew that I want

418
00:26:35,300 --> 00:26:36,300
Some lighting work.

419
00:26:38,500 --> 00:26:42,300
Some accumulated weight, some accumulated PPS.

420
00:26:44,000 --> 00:26:45,700
And some average direction to light.

421
00:26:47,100 --> 00:26:47,600
so,

422
00:26:49,500 --> 00:26:55,500
so I know I want these four things here and I know, oops,

423
00:26:57,700 --> 00:26:58,700
Copied the wrong thing there.

424
00:27:01,300 --> 00:27:02,700
And I know which types they are.

425
00:27:07,800 --> 00:27:09,600
And that way they are all allocated.

426
00:27:11,700 --> 00:27:16,400
Okay, and so inside the lighting solution, I just have to assign

427
00:27:16,400 --> 00:27:16,800
these.

428
00:27:23,800 --> 00:27:24,100
Oops.

429
00:27:27,700 --> 00:27:30,400
And once, they're all signed, then this thing is pretty much ready to

430
00:27:30,400 --> 00:27:30,700
go.

431
00:27:31,600 --> 00:27:34,000
All we need to do now is like, if I were to run it, now, we would just

432
00:27:34,000 --> 00:27:36,300
crash because that no one's calling that.

433
00:27:36,700 --> 00:27:37,300
Right.

434
00:27:39,400 --> 00:27:40,800
What is this Intex?

435
00:27:40,800 --> 00:27:41,100
Oh,

436
00:27:44,500 --> 00:27:45,700
Needs to be defined first.

437
00:28:05,900 --> 00:28:08,700
So unfortunately, anyone doesn't array count, here is not going to

438
00:28:08,700 --> 00:28:09,900
have that information.

439
00:28:10,900 --> 00:28:11,800
Let me double-check.

440
00:28:15,300 --> 00:28:16,300
This quickly.

441
00:28:18,400 --> 00:28:20,300
I don't think anyone does use that, though.

442
00:28:23,300 --> 00:28:24,200
So it's just this one.

443
00:28:32,500 --> 00:28:33,900
Actually no it I'll just put it in here.

444
00:28:46,000 --> 00:28:46,600
So, there we go.

445
00:28:59,500 --> 00:29:00,600
Answer now.

446
00:29:06,500 --> 00:29:11,200
Everyone should know where they're getting everything this.

447
00:29:11,200 --> 00:29:12,400
Did I do this backwards?

448
00:29:12,900 --> 00:29:14,000
I did do this backwards.

449
00:29:15,400 --> 00:29:16,400
It's been a slow morning.

450
00:29:19,100 --> 00:29:22,700
Some days, you know, your little slow in the code uptake.

451
00:29:23,400 --> 00:29:23,900
There we go.

452
00:29:31,600 --> 00:29:32,300
Wait.

453
00:29:37,400 --> 00:29:39,100
Which it is Count first.

454
00:29:39,100 --> 00:29:39,500
Yeah.

455
00:29:43,600 --> 00:29:45,400
I am just smooth sailing, all of the place.

456
00:29:50,200 --> 00:29:51,600
Coffee's not kicking in yet.

457
00:29:52,000 --> 00:29:52,500
There we go.

458
00:29:54,000 --> 00:29:56,600
So we need to actually call and it lighting at some point.

459
00:29:59,000 --> 00:29:59,700
And so, whenever the

460
00:30:00,000 --> 00:30:06,900
Node structure gets actually initialized which it's been so long since

461
00:30:06,900 --> 00:30:08,000
we've ever looked at that code.

462
00:30:08,000 --> 00:30:11,500
That code is like, you know, ancient history at this point.

463
00:30:12,700 --> 00:30:17,400
But yeah, so here is the place where we actually put one of these on

464
00:30:17,900 --> 00:30:20,200
so we can just do it right here, right?

465
00:30:20,500 --> 00:30:26,100
We know that this is a reasonable place to do it because this is where

466
00:30:26,100 --> 00:30:29,100
the world mode gets initialized in the first place.

467
00:30:29,100 --> 00:30:29,500
So,

468
00:30:30,000 --> 00:30:30,600
totally fine.

469
00:30:34,500 --> 00:30:35,900
And that should, that should do it.

470
00:30:42,000 --> 00:30:44,400
it's called Tessa lighting, just letting

471
00:30:50,200 --> 00:30:51,800
So, that should be sufficient.

472
00:30:57,700 --> 00:31:00,700
and that should basically take care of all of our alignment issues,

473
00:31:02,200 --> 00:31:03,200
but we can double-check

474
00:31:08,100 --> 00:31:10,800
intersect so inside in it, lighting,

475
00:31:18,500 --> 00:31:20,000
Everything should go down located.

476
00:31:21,800 --> 00:31:24,100
And hopefully this will run correctly as well.

477
00:31:24,100 --> 00:31:24,400
No.

478
00:31:24,500 --> 00:31:28,300
Yes so now we can double check that everything is aligned.

479
00:31:29,400 --> 00:31:36,300
First of all and then we can check down check out why it's slow that

480
00:31:36,300 --> 00:31:37,700
we do those tests.

481
00:31:38,100 --> 00:31:43,000
So I assumed and I don't know I assume that doing these two right

482
00:31:43,000 --> 00:31:44,800
here, right?

483
00:31:48,000 --> 00:31:54,200
I assumed that doing those two was a cash sharing problem, but you can

484
00:31:54,200 --> 00:31:59,600
see like if we reduce, if we don't do those two ads with the predicate

485
00:31:59,600 --> 00:32:02,800
predicated, add their, we get massively faster.

486
00:32:03,000 --> 00:32:05,500
And if we do, do them, like so,

487
00:32:06,700 --> 00:32:11,000
We get way slower and the question is just we need to figure out why

488
00:32:11,000 --> 00:32:11,600
that's happening.

489
00:32:11,600 --> 00:32:15,100
There's a number of reasons why it could be happening and we have to

490
00:32:15,100 --> 00:32:20,300
take a closer look, but I want to eliminate any cash concerns, first

491
00:32:20,300 --> 00:32:22,000
before we go any further.

492
00:32:22,600 --> 00:32:25,500
So, when we come through the rest of the code, I want to make sure

493
00:32:25,500 --> 00:32:27,100
that it's all kosher.

494
00:32:29,000 --> 00:32:33,400
So I want to make sure that every work pointer that we get out here.

495
00:32:40,300 --> 00:32:44,600
So I want to make sure that if I am this value with 63, right?

496
00:32:44,600 --> 00:32:50,400
Which is all the bits set that are not 64-bit aligned, right?

497
00:32:53,600 --> 00:32:57,600
I want to make sure that they're all clear, so that we know that we're

498
00:32:57,600 --> 00:32:58,600
never getting

499
00:33:09,600 --> 00:33:13,400
So that we know that we're never getting any values that could be

500
00:33:13,400 --> 00:33:15,600
interpreted as unaligned.

501
00:33:16,000 --> 00:33:16,400
Alright?

502
00:33:16,900 --> 00:33:21,300
So, you can see here that we're not getting a line value there, right?

503
00:33:21,300 --> 00:33:22,500
So we're getting that assertion.

504
00:33:22,500 --> 00:33:24,900
Let's go ahead and double check.

505
00:33:25,200 --> 00:33:27,300
I'm going to go to debug mode for second here so I can expect

506
00:33:27,300 --> 00:33:27,700
everything.

507
00:33:33,800 --> 00:33:34,900
I'm going to run that.

508
00:33:35,200 --> 00:33:36,100
Here's that assertion.

509
00:33:36,500 --> 00:33:38,800
So let's take a look at the work structure itself.

510
00:33:38,800 --> 00:33:41,100
And I also want to take a look at which work in dextran.

511
00:33:41,100 --> 00:33:41,400
Run.

512
00:33:41,400 --> 00:33:42,000
Next one.

513
00:33:42,200 --> 00:33:46,100
So I think we just didn't make the structure the correct size, right?

514
00:33:47,000 --> 00:33:48,900
So if we do size of lighting work,

515
00:33:50,600 --> 00:33:51,400
It's 32.

516
00:33:51,800 --> 00:33:53,700
So I got a pad it out.

517
00:33:53,700 --> 00:33:55,600
So it's 64, right?

518
00:33:58,100 --> 00:33:58,300
Sorry.

519
00:33:58,300 --> 00:34:00,300
I think I was in the middle of this and then didn't

520
00:34:01,300 --> 00:34:01,800
How did I make it?

521
00:34:01,800 --> 00:34:05,500
Three to eight plus eight eight and eight.

522
00:34:05,500 --> 00:34:05,800
Yeah.

523
00:34:05,900 --> 00:34:06,400
All right.

524
00:34:06,900 --> 00:34:08,199
So really we need

525
00:34:11,699 --> 00:34:14,100
Quite a few of these actually or I could be explicit about it.

526
00:34:14,100 --> 00:34:18,199
We need an extra 32 bytes at the end to do nothing, right?

527
00:34:24,699 --> 00:34:28,900
Alright, so now we know that we are aligned at least that array is

528
00:34:28,900 --> 00:34:32,000
aligned and so that we can see.

529
00:34:32,000 --> 00:34:37,300
Now whether it was Cash, whether it was the the contention over that

530
00:34:37,300 --> 00:34:41,800
cache line, that was causing us, our problem and it was right.

531
00:34:41,900 --> 00:34:47,699
So you can see how now we are running at full speed again, which we

532
00:34:47,699 --> 00:34:48,400
weren't before.

533
00:34:48,400 --> 00:34:50,699
And so you can see that exactly what I thought was happening is

534
00:34:50,699 --> 00:34:52,800
probably what was happening, right?

535
00:34:53,500 --> 00:34:54,300
When we

536
00:34:54,500 --> 00:34:59,000
add these set up so that it was

537
00:35:00,100 --> 00:35:03,800
Well, you can just take a look at it here when we had these set up.

538
00:35:03,800 --> 00:35:06,800
So they were only 32 bytes, there would be two of them per cache line.

539
00:35:07,000 --> 00:35:09,500
So on two separate cores.

540
00:35:09,700 --> 00:35:13,400
We would be fighting over that cache line to do this increment, back

541
00:35:13,400 --> 00:35:16,000
and forth, back and forth, back and forth, back and forth, right?

542
00:35:17,700 --> 00:35:21,400
And so that's a tremendously bad situation and that is what was

543
00:35:21,400 --> 00:35:22,500
causing our speed hit.

544
00:35:22,500 --> 00:35:24,500
So thankfully, we've fixed that now.

545
00:35:25,100 --> 00:35:28,500
And this statistic is now free to gather, which is what we wanted,

546
00:35:28,800 --> 00:35:29,200
right?

547
00:35:32,400 --> 00:35:37,300
So again yeah cash very important to think about it was that was

548
00:35:37,300 --> 00:35:38,900
almost a 2X speed up, right?

549
00:35:38,900 --> 00:35:40,600
Just to make sure we got that right.

550
00:35:41,800 --> 00:35:44,600
Okay, that's not know what?

551
00:35:44,600 --> 00:35:44,800
What?

552
00:35:44,800 --> 00:35:45,300
Look at these.

553
00:35:50,900 --> 00:35:51,400
Okay.

554
00:35:53,300 --> 00:35:57,500
So as you can see, we've neglected to actually clear those values.

555
00:35:58,400 --> 00:35:59,800
So let's go ahead and do that.

556
00:36:02,100 --> 00:36:06,000
Otherwise we will know the total number we've ever tested but I don't

557
00:36:06,000 --> 00:36:10,400
know that we care about that very much so I'm going to print out a

558
00:36:10,400 --> 00:36:12,200
little bit more information to here.

559
00:36:12,800 --> 00:36:15,700
So what I'd like to know is for every cast.

560
00:36:16,400 --> 00:36:19,500
How many leaves we test and how many partitions we test?

561
00:36:21,800 --> 00:36:29,600
So I want a partitions, the cast and a leaves forecast.

562
00:36:36,600 --> 00:36:42,000
So in order to do that, I'm going to go ahead and take it slowly this

563
00:36:42,000 --> 00:36:42,200
way.

564
00:36:42,800 --> 00:36:46,400
I'm going to take a total, I'm using 64 here because I don't know how

565
00:36:46,400 --> 00:36:49,400
many of these are maybe getting up into the range where 24 bits is not

566
00:36:49,700 --> 00:36:50,500
going to cut it.

567
00:36:50,800 --> 00:36:52,900
I don't want to be pretty relatively precise.

568
00:36:55,700 --> 00:37:00,000
So all I'm going to do here is I'm going to create these values by

569
00:37:01,200 --> 00:37:06,100
Just dividing the total, the total number of things we tested in

570
00:37:06,100 --> 00:37:08,500
either Case by the total number of cast.

571
00:37:08,500 --> 00:37:11,300
So we know how many / cast we are testing.

572
00:37:11,600 --> 00:37:15,100
That's all I want to do there and then I'm going to go ahead and clear

573
00:37:15,100 --> 00:37:15,600
these out.

574
00:37:15,600 --> 00:37:18,100
Like I was saying before because right now we're not clearing those

575
00:37:18,100 --> 00:37:18,500
out.

576
00:37:19,300 --> 00:37:21,500
What we could do here since the distribution isn't really take any

577
00:37:21,500 --> 00:37:22,000
time.

578
00:37:23,600 --> 00:37:24,600
I could just do this.

579
00:37:28,000 --> 00:37:28,900
And leave it at that.

580
00:37:35,300 --> 00:37:36,900
so, these may not

581
00:37:38,600 --> 00:37:39,900
Give me an Avenue of 64.

582
00:37:42,300 --> 00:37:42,900
It's okay.

583
00:37:42,900 --> 00:37:44,900
I don't need to be printed as an x 64.

584
00:37:44,900 --> 00:37:47,300
I just need the Divide cap and a semester 64's.

585
00:37:47,300 --> 00:37:48,300
All I want to make sure

586
00:37:54,300 --> 00:37:57,100
So now we should be able to see pretty good.

587
00:37:59,400 --> 00:38:00,300
Sort of measurement here.

588
00:38:00,700 --> 00:38:05,800
So what I hope you can tell from that is if you look at what what

589
00:38:05,800 --> 00:38:10,500
we're actually seeing there are leaves forecast is not really that

590
00:38:10,500 --> 00:38:12,000
bad, right?

591
00:38:17,400 --> 00:38:24,600
You know, doing five testing five leaf nodes, 5-leaf boxes.

592
00:38:26,100 --> 00:38:28,500
/ cast is probably not the end of the world.

593
00:38:28,500 --> 00:38:29,900
That's probably pretty reasonable.

594
00:38:30,400 --> 00:38:35,400
The partitions forecast is pretty high 17, right?

595
00:38:35,400 --> 00:38:36,500
That's just a lot.

596
00:38:38,500 --> 00:38:42,500
And so, it may be that we need to balance that out a bit, right?

597
00:38:42,500 --> 00:38:45,200
We may need to do something a little bit more.

598
00:38:49,600 --> 00:38:55,200
We may meet me need to do something better there and there's a couple

599
00:38:55,200 --> 00:38:57,500
different things that we could do better here.

600
00:39:07,700 --> 00:39:08,200
so,

601
00:39:11,800 --> 00:39:14,100
the biggest thing that we're doing right now,

602
00:39:15,200 --> 00:39:19,000
and you know, it's one of those things where it's like you really need

603
00:39:19,000 --> 00:39:20,400
to do a bunch of trial and error but

604
00:39:22,400 --> 00:39:27,100
Right now, we're effectively using a KD tree that's what we're using

605
00:39:27,600 --> 00:39:31,500
but our KD tree doesn't actually take advantage of the fact that it is

606
00:39:31,500 --> 00:39:33,200
a KD tree meaning.

607
00:39:34,900 --> 00:39:39,000
It stores two sub boxes in it, but it doesn't take advantage of the

608
00:39:39,000 --> 00:39:42,400
fact that it knows that it only stores two sub boxes in it, right?

609
00:39:43,700 --> 00:39:47,900
We can make our test routine a lot, simpler and a lot faster probably

610
00:39:47,900 --> 00:39:49,600
if we just did that.

611
00:39:50,300 --> 00:39:53,500
So we have to think about it and again, it's experimentation is you do

612
00:39:53,500 --> 00:40:00,900
we want to have more children per partition potentially or do.

613
00:40:00,900 --> 00:40:04,500
We want to stick with two children per partition, in which case, we

614
00:40:04,500 --> 00:40:06,900
should go ahead and make that test way cheaper?

615
00:40:07,200 --> 00:40:12,300
And then 17 tests per partition mean be isn't a big deal, right?

616
00:40:40,600 --> 00:40:43,700
So I guess I don't have a particularly strong opinion about that.

617
00:40:45,100 --> 00:40:47,900
I'm really not sure what the best answer is there.

618
00:40:49,000 --> 00:40:54,000
Because on the one hand, it does seem like it would be attractive to

619
00:40:54,000 --> 00:40:57,700
just use a simple like binary tree because you can't reverse those

620
00:40:57,700 --> 00:40:58,500
pretty quickly.

621
00:41:00,800 --> 00:41:01,800
On the other hand.

622
00:41:03,300 --> 00:41:08,800
Having just a couple cubes per level and recasting against them has a

623
00:41:08,800 --> 00:41:10,600
certain attractiveness to it as well.

624
00:41:10,900 --> 00:41:11,600
So it

625
00:41:13,800 --> 00:41:14,500
it's tough.

626
00:41:30,400 --> 00:41:33,300
so another thing I would like to see, so does our profile give us our

627
00:41:33,300 --> 00:41:34,500
cycles per

628
00:41:35,700 --> 00:41:37,500
It doesn't tell us cycles per or does it.

629
00:41:37,500 --> 00:41:38,300
Yes it does.

630
00:41:40,200 --> 00:41:42,200
It tells us how many cycles per up.

631
00:41:43,300 --> 00:41:44,300
Per call.

632
00:41:45,300 --> 00:41:47,900
So I want to take a look at a couple things first.

633
00:41:50,200 --> 00:41:53,700
so inside recast recurse, I would like to know

634
00:41:55,200 --> 00:41:56,900
just what's going on there.

635
00:42:08,200 --> 00:42:10,300
Oh, did we run out of space?

636
00:42:10,300 --> 00:42:11,200
In the profiler?

637
00:42:11,500 --> 00:42:13,300
I guess we'd call that too many times.

638
00:42:15,100 --> 00:42:15,600
Yikes.

639
00:42:20,500 --> 00:42:21,400
Guess that makes sense.

640
00:42:22,800 --> 00:42:24,200
Given how many times it was called?

641
00:42:29,800 --> 00:42:34,200
You can also see how much slower we get now, because the debug system

642
00:42:34,300 --> 00:42:37,000
actually keeping track of all this stuff, right?

643
00:42:40,400 --> 00:42:44,000
You can see that debug collation takes a ton of time, right?

644
00:42:46,800 --> 00:42:48,300
But I just wanted to kind of see here.

645
00:42:51,100 --> 00:42:56,800
So you can see that our raycast itself that's just not very many

646
00:42:56,800 --> 00:42:58,200
cycles per raycast.

647
00:42:58,200 --> 00:42:58,900
Actually.

648
00:43:08,200 --> 00:43:12,400
So that is a very efficient raycast already actually by comparison to

649
00:43:12,400 --> 00:43:14,500
what you might think, all right.

650
00:43:19,500 --> 00:43:21,300
CR raycasting threads operating now,

651
00:43:23,600 --> 00:43:24,800
Here's the debug collation.

652
00:43:49,800 --> 00:43:51,100
so, you can see all these

653
00:43:56,700 --> 00:43:58,200
all these threads doing their lighting work.

654
00:44:10,600 --> 00:44:11,200
Such a little cool.

655
00:44:11,200 --> 00:44:13,700
This is so just a little fun system.

656
00:44:23,000 --> 00:44:23,600
So anyway,

657
00:44:41,600 --> 00:44:44,400
I would say just my gut instinct.

658
00:44:44,400 --> 00:44:47,600
This point is just to say, all right we got to try and reduce the

659
00:44:47,600 --> 00:44:50,300
number of operations.

660
00:44:50,300 --> 00:44:55,700
We do to get us down our tree and it seems like probably the best way

661
00:44:55,700 --> 00:44:59,800
to do that is to yeah, maybe

662
00:45:00,200 --> 00:45:02,300
It may be let it be a KD tree.

663
00:45:02,700 --> 00:45:05,100
Maybe get rid of the recursive function call.

664
00:45:06,700 --> 00:45:07,300
As well.

665
00:45:07,600 --> 00:45:13,100
We know, our tree can only be so deep, so maybe just have a nice

666
00:45:13,100 --> 00:45:13,900
little stack there.

667
00:45:13,900 --> 00:45:17,800
Let's just start with some basic Transformations and see how we do.

668
00:45:20,600 --> 00:45:21,200
Right.

669
00:45:24,000 --> 00:45:25,600
So, let's see how this has to happen.

670
00:45:25,600 --> 00:45:30,100
If you look at re castra curse, really the only thing that we're

671
00:45:30,100 --> 00:45:32,800
changing here is root box, right?

672
00:45:33,300 --> 00:45:35,400
When we call Ray castra curse.

673
00:45:37,200 --> 00:45:38,000
On a self.

674
00:45:38,000 --> 00:45:43,100
We have work solution, Ray, origin, Rady and results are all just

675
00:45:43,100 --> 00:45:44,400
passed, right?

676
00:45:44,400 --> 00:45:46,000
They don't do anything differently.

677
00:45:46,000 --> 00:45:49,600
It's really just this that changes.

678
00:45:49,600 --> 00:45:53,800
In either case, we just pass a new box on, right?

679
00:45:58,000 --> 00:46:04,700
So it seems to me that that's probably the way to go, right?

680
00:46:13,000 --> 00:46:16,100
We write directly into result and then we break out.

681
00:46:16,100 --> 00:46:21,000
So, you know, we really this should be fairly straightforward to make

682
00:46:21,100 --> 00:46:21,900
work, I think.

683
00:46:25,300 --> 00:46:26,900
I mean, all we have to really do here.

684
00:46:26,900 --> 00:46:29,200
I think is have a while loop on the outside.

685
00:46:32,100 --> 00:46:35,300
Which is, you know, well depth is greater than zero.

686
00:46:38,700 --> 00:46:39,600
And have a.

687
00:46:42,400 --> 00:46:46,900
A box back that's just which boxes we were talking about, right?

688
00:46:48,200 --> 00:46:52,500
And you know we know that that can't be very large because we just

689
00:46:52,500 --> 00:46:55,900
don't have the money boxes, that's probably massively Overkill, right?

690
00:46:58,800 --> 00:47:03,900
So what we would do at the outset is we actually as right this little

691
00:47:03,900 --> 00:47:09,100
more cleverly or cutely, we could do something like this where we just

692
00:47:09,100 --> 00:47:11,400
say, right, you push the root box onto the stack.

693
00:47:12,100 --> 00:47:16,300
And then while the depth is greater than 0, we go about our business,

694
00:47:16,700 --> 00:47:17,200
right?

695
00:47:24,100 --> 00:47:27,400
So if you look in here, the route box is only really used at the top

696
00:47:27,700 --> 00:47:28,400
of the loop.

697
00:47:29,500 --> 00:47:30,900
So we should be able to say

698
00:47:35,700 --> 00:47:37,700
Maybe I'll still just call it root box.

699
00:47:45,200 --> 00:47:49,400
And so the root box here is just going to be pulling off the top of

700
00:47:49,400 --> 00:47:49,900
the stack.

701
00:47:49,900 --> 00:47:53,300
So what we want to do is just decrease the stock depth right?

702
00:47:54,000 --> 00:47:57,400
Grab the box that we're supposed to be working on and work on that box

703
00:47:58,200 --> 00:47:59,800
when we need to call Ray cast your curse.

704
00:48:03,400 --> 00:48:07,400
The problem that we're going to have here is that we wanted to do that

705
00:48:07,400 --> 00:48:11,600
in the middle of the child index part of things, right?

706
00:48:12,500 --> 00:48:16,900
However, I don't really know that we have to because as far as I can

707
00:48:16,900 --> 00:48:23,400
tell, there's no actual reason why we would need to do these in any

708
00:48:23,400 --> 00:48:25,000
particular order yet.

709
00:48:25,600 --> 00:48:28,600
So we can choose to just do these in a completely different order.

710
00:48:28,600 --> 00:48:31,400
It's not going to change the result of the routine in any particular

711
00:48:31,400 --> 00:48:32,500
way that I can think of.

712
00:48:37,100 --> 00:48:42,100
So what I would say is as we kind of come through here, we could just

713
00:48:42,100 --> 00:48:42,400
go.

714
00:48:42,400 --> 00:48:44,300
All right, we're checking these

715
00:48:46,700 --> 00:48:48,500
It will change Behavior a little bit.

716
00:48:51,300 --> 00:48:51,600
Yeah.

717
00:48:52,000 --> 00:48:52,300
Well

718
00:48:54,200 --> 00:48:57,100
So anyway, as we're checking these, when we come through here, we can

719
00:48:57,100 --> 00:49:01,300
just say, alright, this is just going to be us pushing stuff on.

720
00:49:05,200 --> 00:49:05,900
so, will

721
00:49:07,500 --> 00:49:09,900
push on an additional box like, so,

722
00:49:11,700 --> 00:49:13,200
And then the same thing is true here.

723
00:49:21,300 --> 00:49:21,900
Like so.

724
00:49:25,100 --> 00:49:28,800
And I think technically that would get rid of the recursion in the

725
00:49:28,800 --> 00:49:30,000
function, right?

726
00:49:31,500 --> 00:49:35,800
So oddly enough that just that alone and I didn't really do anything.

727
00:49:35,800 --> 00:49:40,100
They're right, I just made it so it doesn't call a function just that

728
00:49:40,100 --> 00:49:40,500
alone.

729
00:49:40,500 --> 00:49:40,900
Actually.

730
00:49:40,900 --> 00:49:42,600
Sped us up quite considerably.

731
00:49:42,600 --> 00:49:44,900
We got 10, milliseconds back on the clock.

732
00:49:45,700 --> 00:49:46,700
Just from that.

733
00:49:48,900 --> 00:49:51,500
I have often said this dream that I don't really like it.

734
00:49:51,500 --> 00:49:58,600
Recursive functions being used anywhere that you know, we were you

735
00:49:58,600 --> 00:50:03,100
really care about how they're working and that's largely why to be

736
00:50:03,100 --> 00:50:07,200
fair we don't know that we're getting the same results so we hope we

737
00:50:07,200 --> 00:50:10,400
are anyway but we don't have it.

738
00:50:11,200 --> 00:50:12,700
We don't have a very good test case.

739
00:50:12,700 --> 00:50:13,800
I guess it's one of our problems.

740
00:50:14,000 --> 00:50:17,400
We probably should have made a more standard like killing a little

741
00:50:17,400 --> 00:50:17,900
Cornell box.

742
00:50:18,000 --> 00:50:18,700
Sir something.

743
00:50:19,000 --> 00:50:23,200
So we could verify visually that we're not breaking anything major you

744
00:50:23,200 --> 00:50:25,900
know it looks like the letting still working but you know lighting can

745
00:50:25,900 --> 00:50:28,800
be a little bit broken and still look like it's working.

746
00:50:31,600 --> 00:50:32,900
So, it's a little bit hard to say.

747
00:50:34,600 --> 00:50:43,100
anyway, so continuing on here, if we go ahead and look more closely at

748
00:50:43,100 --> 00:50:43,400
this,

749
00:50:47,800 --> 00:50:49,000
So working.

750
00:50:50,400 --> 00:50:56,400
Stack wise on this now that makes it so that we really don't have to

751
00:50:56,400 --> 00:50:57,900
have that recursive function.

752
00:50:57,900 --> 00:50:59,800
So I'm going to just get rid of this as well.

753
00:51:00,400 --> 00:51:01,900
Because there's really no point to it.

754
00:51:02,900 --> 00:51:05,200
Now, we don't need two functions here.

755
00:51:05,800 --> 00:51:07,200
It's going to just be one function.

756
00:51:08,700 --> 00:51:13,200
And so all we really need is the thing that does the initial setup and

757
00:51:13,200 --> 00:51:14,200
that can just be here.

758
00:51:15,600 --> 00:51:18,800
And this stuff is is not relevant anymore, right?

759
00:51:21,800 --> 00:51:22,100
Oops.

760
00:51:29,900 --> 00:51:30,600
so,

761
00:51:35,000 --> 00:51:35,600
Is that?

762
00:51:36,900 --> 00:51:38,800
So we set up the results initially here.

763
00:51:39,500 --> 00:51:41,400
So I set up all the things we were actually want to set up.

764
00:51:46,400 --> 00:51:47,000
I think so.

765
00:51:48,800 --> 00:51:52,600
So when we come through here now we gotta make the

766
00:51:55,500 --> 00:51:57,400
Result be accessed as a DOT.

767
00:51:57,600 --> 00:51:58,900
It's not an address anymore.

768
00:52:07,300 --> 00:52:08,900
And so that shouldn't change our run time.

769
00:52:10,500 --> 00:52:11,800
And it doesn't appear to have.

770
00:52:14,000 --> 00:52:17,100
So now we just have a raycast function in the raycast function does

771
00:52:17,100 --> 00:52:17,700
its thing.

772
00:52:18,000 --> 00:52:20,200
It also probably doesn't need to take this anymore.

773
00:52:21,800 --> 00:52:25,100
Because since it only pulls it out once and not every iteration, that

774
00:52:25,100 --> 00:52:25,700
should be fine.

775
00:52:33,600 --> 00:52:35,700
The, it can also be in line.

776
00:52:35,700 --> 00:52:37,600
Now it wants to be

777
00:52:42,200 --> 00:52:45,100
So that whole recasting can be inlined which may be a good thing for

778
00:52:45,100 --> 00:52:45,700
Speed as well.

779
00:52:47,000 --> 00:52:47,500
There we go.

780
00:52:48,100 --> 00:52:48,600
Oops.

781
00:52:49,100 --> 00:52:51,800
I accidentally grabbed don't know what I accidentally did.

782
00:52:55,200 --> 00:52:56,700
Oh, actually close Ms.

783
00:52:56,700 --> 00:52:58,300
Dad looks like he's, what happened?

784
00:53:02,100 --> 00:53:05,000
All right, so yeah.

785
00:53:09,700 --> 00:53:13,300
so now, at this point, I think I should be able to can I

786
00:53:15,400 --> 00:53:18,100
Can I ask again about the distribution of these two functions?

787
00:53:18,100 --> 00:53:20,900
Let me just, I want to know how much time I was spending in raycasting

788
00:53:21,300 --> 00:53:21,900
versus outside.

789
00:53:21,900 --> 00:53:26,600
The raycasting, it's going to affect our run time here but only

790
00:53:26,600 --> 00:53:27,900
because the debug collation.

791
00:53:27,900 --> 00:53:30,200
So I don't think it affects the actual product care about.

792
00:53:31,500 --> 00:53:32,100
Too much.

793
00:53:34,800 --> 00:53:38,100
So yeah, they're still twelve percent of the time spent in compute

794
00:53:38,100 --> 00:53:39,300
light propagation.

795
00:53:44,600 --> 00:53:47,000
So that's a little bit Squinkie there.

796
00:53:47,000 --> 00:53:50,000
I'm gonna see if it's handmade slow.

797
00:53:56,200 --> 00:53:58,400
I want to see if there's any weirdness with handmade slope.

798
00:53:58,400 --> 00:53:59,100
What's this?

799
00:54:16,500 --> 00:54:20,000
So, I can still get these even if I turn handmade slow off, so that's

800
00:54:20,000 --> 00:54:20,400
good.

801
00:54:35,100 --> 00:54:37,200
alrighty, so

802
00:54:40,400 --> 00:54:42,500
What's to tackle next?

803
00:55:10,500 --> 00:55:15,100
I am not sure what the most sensible thing is to start with now.

804
00:55:19,100 --> 00:55:23,000
I think maybe I will save spatial partitioning stuff for tomorrow and

805
00:55:23,000 --> 00:55:26,300
I think what I'll do now is just take a look at the raycast in general

806
00:55:27,600 --> 00:55:31,100
and just figure out if there's anything particularly Squinkie going

807
00:55:31,100 --> 00:55:31,500
on.

808
00:55:32,200 --> 00:55:37,800
I also think we could probably multi-lane this guy because we should

809
00:55:37,800 --> 00:55:41,700
be able to do all three checks at the same time, probably, right.

810
00:55:43,800 --> 00:55:44,800
Let's think about this.

811
00:55:45,800 --> 00:55:53,300
So, here in our raycast, we're going to go through the axes of a box,

812
00:55:54,200 --> 00:55:56,900
and we're going to the exact same code for every axis.

813
00:55:57,500 --> 00:56:01,500
The only difference you can see appear, right?

814
00:56:02,900 --> 00:56:07,800
The only difference is is these set up calls, then once you get in

815
00:56:07,800 --> 00:56:10,200
here there's they're pretty similar.

816
00:56:10,200 --> 00:56:15,400
So we could stack some things together and probably do this all as one

817
00:56:15,400 --> 00:56:16,400
like Cindy Lane.

818
00:56:17,400 --> 00:56:18,000
Right.

819
00:56:25,800 --> 00:56:27,300
That me my assumption anyway.

820
00:56:39,700 --> 00:56:40,900
So that's another kind of thing.

821
00:56:40,900 --> 00:56:45,400
So that way we could just do one set of Ops and get all three face.

822
00:56:45,400 --> 00:56:48,100
All three Cube sides in one go.

823
00:57:22,500 --> 00:57:24,500
So let's just sketch out what that would look like.

824
00:57:24,500 --> 00:57:25,300
I'm curious

825
00:57:41,800 --> 00:57:43,900
so, if we wanted to do that,

826
00:58:01,700 --> 00:58:05,000
so if we want to do that, we would basically say okay

827
00:58:07,200 --> 00:58:12,000
This could all be done in parallel, so could probably that.

828
00:58:22,800 --> 00:58:25,500
Yeah, I mean, we could simply optimize this pretty easily.

829
00:58:27,400 --> 00:58:28,100
You know I'm saying?

830
00:59:04,800 --> 00:59:06,800
So I guess we could try to do this in parts.

831
00:59:11,500 --> 00:59:13,600
Just try to think if I really want to start this now or not.

832
00:59:15,100 --> 00:59:17,700
I mean that's a pretty straightforward thing to do right?

833
00:59:18,800 --> 00:59:22,200
Because we're checking three things at a time with just different

834
00:59:22,200 --> 00:59:26,000
initial conditions and it seems like that should be a pretty

835
00:59:26,000 --> 00:59:27,300
straightforward thing to do.

836
00:59:28,300 --> 00:59:29,200
I guess.

837
00:59:29,600 --> 00:59:33,200
However, the question does remain about whether or not it's the right

838
00:59:33,200 --> 00:59:37,600
place to do it like another way to look at this would be to just do

839
00:59:40,700 --> 00:59:43,400
you know, for four different Rays at a time,

840
00:59:52,700 --> 00:59:53,700
and,

841
01:00:03,700 --> 01:00:05,700
I really couldn't say which one of those would be better.

842
01:00:14,600 --> 01:00:17,100
So if you imagine instead of doing that, right?

843
01:00:17,100 --> 01:00:19,900
If you did just for, if you did bundles of raised, right?

844
01:00:21,900 --> 01:00:26,200
so in Sample hemisphere you produce for raised, then you reduce this

845
01:00:26,200 --> 01:00:29,700
count by 4 so you were actually running this

846
01:00:37,300 --> 01:00:42,300
so, if you ran this, and then you

847
01:00:46,400 --> 01:00:49,800
Cast for a raise for everyone, Ray you were casting.

848
01:00:55,800 --> 01:00:59,600
Then if you did things perfectly which you won't because those rays

849
01:00:59,600 --> 01:01:02,600
will have to crawl differently through the boxes, so you won't get

850
01:01:02,600 --> 01:01:03,900
perfect 4X speed up.

851
01:01:04,300 --> 01:01:09,500
But you can see here that, you know, you would you would get a pretty

852
01:01:09,500 --> 01:01:11,200
significant speed win from doing that.

853
01:01:11,200 --> 01:01:14,700
Probably, if you could get close to this, you'd get down to 30

854
01:01:14,700 --> 01:01:17,600
milliseconds or so which would be 30 frames a second, which isn't bad.

855
01:01:20,800 --> 01:01:21,800
For the current lighting.

856
01:01:34,300 --> 01:01:36,600
I think that might be the better way to go.

857
01:01:42,300 --> 01:01:45,100
So if we were going to do that, how would we do that?

858
01:01:46,900 --> 01:01:50,700
So let's suppose that we were going to take sample hemisphere here.

859
01:01:51,900 --> 01:01:53,600
And we just call it four times.

860
01:01:56,200 --> 01:01:57,100
so, we could

861
01:01:58,700 --> 01:02:01,300
grab one of these guys, right?

862
01:02:01,300 --> 01:02:03,100
So we've got a V3 for x.

863
01:02:04,100 --> 01:02:05,400
For whatever, right?

864
01:02:12,600 --> 01:02:14,800
so instead of sample, D being this,

865
01:02:17,300 --> 01:02:18,800
We're actually going at four of those.

866
01:02:20,100 --> 01:02:24,900
So I don't really know how we were meant to initialize these, I guess

867
01:02:25,000 --> 01:02:27,100
we initialize them.

868
01:02:28,800 --> 01:02:30,400
Do we have any way to initialize them?

869
01:02:37,400 --> 01:02:40,200
Doesn't look like it so there should be a thing here.

870
01:02:40,200 --> 01:02:40,900
That's like

871
01:02:49,300 --> 01:02:54,000
so if we want to create one of these v34 X's, we should be able to

872
01:02:54,000 --> 01:02:55,700
pass like, you know,

873
01:03:05,000 --> 01:03:06,000
Something like this.

874
01:03:07,400 --> 01:03:08,100
You know I'm saying?

875
01:03:11,900 --> 01:03:14,300
And then have it Swizzle these things into place.

876
01:03:23,500 --> 01:03:31,000
And so then when we go to add these or set these in, I think they go

877
01:03:31,000 --> 01:03:32,200
low to high.

878
01:03:32,200 --> 01:03:37,100
And paradoxical sense, when you use asset p.s., I always forget this,

879
01:03:37,100 --> 01:03:39,300
there's a set RPS, which flips it.

880
01:03:39,300 --> 01:03:41,900
So I think the High bits in the high position but

881
01:04:00,100 --> 01:04:01,400
So something like this.

882
01:04:01,500 --> 01:04:02,300
Where we pack?

883
01:04:02,300 --> 01:04:03,300
Those in here.

884
01:04:04,800 --> 01:04:06,200
And so we can do.

885
01:04:23,900 --> 01:04:25,000
This bit here.

886
01:04:27,100 --> 01:04:28,400
Just four times for now.

887
01:04:31,100 --> 01:04:31,500
Right.

888
01:04:33,500 --> 01:04:39,000
Then when we recast, we would pass down that whole thing and it would

889
01:04:39,300 --> 01:04:45,000
write do four of those and it would come back with four raycast

890
01:04:45,000 --> 01:04:46,500
results at the same time.

891
01:04:49,200 --> 01:04:52,700
So, yeah, that's that's about it.

892
01:04:52,700 --> 01:04:56,600
So really what we'd have here is something like this

893
01:05:03,200 --> 01:05:04,400
Is what that would look like.

894
01:05:33,300 --> 01:05:34,800
I got space to what we're looking at.

895
01:05:46,300 --> 01:05:50,500
So, what I would say here is, I'd probably get rid of the raid.

896
01:05:50,900 --> 01:05:53,200
On most things.

897
01:05:54,800 --> 01:05:54,900
Yes.

898
01:06:01,600 --> 01:06:03,700
And then I'll just copy those up here.

899
01:06:15,100 --> 01:06:15,700
That.

900
01:06:37,900 --> 01:06:38,400
All right.

901
01:06:44,800 --> 01:06:51,300
So yeah, in order to do that, we actually need to get the re point

902
01:06:51,300 --> 01:06:52,400
value back.

903
01:06:52,900 --> 01:06:54,800
Since we know we always need that.

904
01:06:54,800 --> 01:06:59,600
We might just want to put that in the actual array itself hard to say,

905
01:07:03,700 --> 01:07:08,000
this code out here, would want to be done in a simple fashion as well.

906
01:07:08,000 --> 01:07:13,300
Eventually, so that's definitely something that we would have to think

907
01:07:13,300 --> 01:07:13,900
about.

908
01:07:14,300 --> 01:07:16,800
Um, but I'm going to go ahead and say that.

909
01:07:16,800 --> 01:07:19,000
That's something we can just grab.

910
01:07:32,900 --> 01:07:35,900
So actually we don't even need re T at that point.

911
01:07:35,900 --> 01:07:39,600
It's just the P value that we need the T value is not relevant.

912
01:07:40,100 --> 01:07:44,200
So actually what we could do is say forget that let's just keep this

913
01:07:44,200 --> 01:07:47,500
part and nuke that part, right?

914
01:07:56,700 --> 01:07:58,500
so, the sample devalue

915
01:08:04,300 --> 01:08:08,200
is not particularly hard to reconstitute.

916
01:08:13,900 --> 01:08:16,200
I guess, what we could do here is say

917
01:08:26,200 --> 01:08:26,899
For now.

918
01:08:57,200 --> 01:08:59,500
so, when we do accumulate sample and we pass,

919
01:09:00,000 --> 01:09:04,399
D to it I guess I'm not sure that's oh that's for the lighting.

920
01:09:04,399 --> 01:09:06,000
Dot product between the two.

921
01:09:08,899 --> 01:09:10,200
So that's, that's fine.

922
01:09:39,300 --> 01:09:40,000
All right.

923
01:10:19,900 --> 01:10:21,500
All right, so now we can see the update.

924
01:10:21,500 --> 01:10:22,700
This function to work with that.

925
01:10:22,700 --> 01:10:27,200
So in here, where We're looping through before we do anything else

926
01:10:27,200 --> 01:10:30,900
here, when we exit this, we need to make sure that we actually track

927
01:10:30,900 --> 01:10:34,500
that particular result.

928
01:10:35,700 --> 01:10:36,700
Value that we wanted.

929
01:10:36,700 --> 01:10:44,400
So we need to do, like result re P equals T re X sample d, right.

930
01:10:44,400 --> 01:10:44,800
The

931
01:10:46,000 --> 01:10:46,600
Coming through here.

932
01:10:46,600 --> 01:10:48,600
So it's real origin + Rady.

933
01:11:04,300 --> 01:11:06,300
So that's really it.

934
01:11:06,300 --> 01:11:10,300
And so then when we do 16 of these, we put build these together, we

935
01:11:10,300 --> 01:11:14,400
call the raycast and now the raycast just has to be able to actually

936
01:11:14,400 --> 01:11:18,300
work on the set of values there.

937
01:11:18,800 --> 01:11:23,100
So, at the moment, we can just use a loop on this and then we can turn

938
01:11:23,100 --> 01:11:27,800
the loop into something that actually does it wide, right?

939
01:11:31,300 --> 01:11:31,900
Sue.

940
01:11:32,200 --> 01:11:33,400
Yeah.

941
01:11:39,700 --> 01:11:43,900
This doesn't actually have to be 4X because it's I mean we could make

942
01:11:43,900 --> 01:11:45,500
it for X, I guess.

943
01:11:45,900 --> 01:11:51,200
It doesn't really need to be because it's not actually for wide.

944
01:11:51,200 --> 01:11:54,200
It's just the same value duplicated, four times.

945
01:11:55,600 --> 01:11:59,100
So you know this sample Point P thing.

946
01:12:07,300 --> 01:12:08,600
Just gets duped.

947
01:12:14,200 --> 01:12:15,300
and,

948
01:12:20,400 --> 01:12:21,000
Off we go.

949
01:12:22,200 --> 01:12:25,600
so now that we're getting past something where we could do for a raise

950
01:12:25,600 --> 01:12:26,400
at a time,

951
01:12:27,600 --> 01:12:29,700
it to look at which parts of the routine actually care.

952
01:12:31,300 --> 01:12:35,300
So this part needs to be made 70.

953
01:12:37,100 --> 01:12:41,000
And this part needs to be made 70, but the general structure of the

954
01:12:41,000 --> 01:12:42,600
loop doesn't actually change.

955
01:12:43,100 --> 01:12:45,300
So the reason for that is actually because

956
01:12:47,200 --> 01:12:52,500
Although it may seem odd the way that this thing works, is it just

957
01:12:52,500 --> 01:12:56,400
decides what boxes to process based on whether or not it thinks

958
01:12:56,400 --> 01:13:00,800
there's any chance that the Box itself will have an intersection in it

959
01:13:01,300 --> 01:13:04,200
with the Ray and some useful piece of geometry, right?

960
01:13:05,100 --> 01:13:10,300
Well, normally we would go, oh gosh, we don't want to Traverse any

961
01:13:10,300 --> 01:13:14,100
boxes that that we know we can't hit because that's a waste of time.

962
01:13:14,900 --> 01:13:16,900
But what would happen if we did Traverse bar,

963
01:13:17,000 --> 01:13:18,500
Is that we didn't actually hit?

964
01:13:18,700 --> 01:13:22,000
The answer is nothing because the things inside them won't hit so they

965
01:13:22,000 --> 01:13:23,600
won't produce closer T values.

966
01:13:23,600 --> 01:13:26,400
Or if they do hit, they'll produce further away T values, and we don't

967
01:13:26,400 --> 01:13:26,700
care.

968
01:13:27,900 --> 01:13:29,600
So, the really nice part about this.

969
01:13:31,000 --> 01:13:34,500
Is that because Ray casting has a discriminator in it.

970
01:13:34,500 --> 01:13:39,100
It has a t-value that tells us whether to accept or reject a hit

971
01:13:39,100 --> 01:13:44,000
irrespective of what we have traversed, there's no coughs to overturn

972
01:13:44,000 --> 01:13:44,500
versal.

973
01:13:45,100 --> 01:13:50,000
So when we cast for raised at a time, we literally don't have to do

974
01:13:50,000 --> 01:13:51,100
anything special.

975
01:13:51,500 --> 01:13:54,100
We can just make sure that we only update them, based on their

976
01:13:54,100 --> 01:13:55,600
individual T values.

977
01:13:56,100 --> 01:13:57,900
And we don't have to change our traversal.

978
01:13:58,200 --> 01:13:59,700
We can freely traversed, nodes.

979
01:13:59,700 --> 01:14:00,300
That have nothing.

980
01:14:00,500 --> 01:14:03,500
To do with one of those rays and even though we're wasting some

981
01:14:03,500 --> 01:14:07,700
computation by doing that, we're not actually failing to produce the

982
01:14:07,700 --> 01:14:10,900
correct result because they'll all produce T values that are either

983
01:14:10,900 --> 01:14:15,500
know hit or shit, is further away, and they will get discarded anyway,

984
01:14:15,900 --> 01:14:20,200
so that allows us to just maintain one stack instead of four stacks

985
01:14:20,500 --> 01:14:24,000
and only check one box at a time instead of four boxes at a time,

986
01:14:24,200 --> 01:14:27,800
which is exactly what we want to do, to minimize the amount of memory

987
01:14:27,800 --> 01:14:30,300
traffic that we're doing here and not down shift.

988
01:14:30,400 --> 01:14:35,000
Per Lane, which is a big risk and Cindy algorithms because the x64

989
01:14:35,000 --> 01:14:36,400
doesn't have scatter gather.

990
01:14:38,500 --> 01:14:39,600
They introduced it in.

991
01:14:42,400 --> 01:14:43,400
Avx-512.

992
01:14:43,400 --> 01:14:46,400
But everything prior to that, which is ever any machine at all that,

993
01:14:46,400 --> 01:14:50,000
you're that, and that game players would have today, doesn't have

994
01:14:50,000 --> 01:14:50,600
scatter gather.

995
01:14:50,600 --> 01:14:53,000
So lean scatter gather is difficult.

996
01:14:53,100 --> 01:14:54,300
Fortunately, we don't have to do it.

997
01:14:56,500 --> 01:14:59,800
All right, so let's start out with the most basic way of

998
01:15:00,000 --> 01:15:04,800
Looking at this function, let's try to do it so that we're really not

999
01:15:04,800 --> 01:15:09,600
going to symbolize anything other than just the fact that the things

1000
01:15:09,600 --> 01:15:10,600
came in that way.

1001
01:15:11,000 --> 01:15:13,500
And we'll introduce just a for Loop, right?

1002
01:15:13,500 --> 01:15:16,000
Just to make sure that the thing works at all.

1003
01:15:16,200 --> 01:15:17,400
It's not going to do anything.

1004
01:15:17,400 --> 01:15:18,400
It's just dumb.

1005
01:15:21,600 --> 01:15:24,500
And so, all I'm going to do is I'm going to do for Loop here.

1006
01:15:33,100 --> 01:15:34,700
And I'm going to pull out the real origin.

1007
01:15:38,600 --> 01:15:40,500
And the Rady manually.

1008
01:15:43,500 --> 01:15:46,000
So what I want to do is take the real origin.

1009
01:15:47,400 --> 01:15:48,200
XXXX here.

1010
01:15:56,700 --> 01:15:59,100
Actually, I'm going to make a function for this.

1011
01:16:24,800 --> 01:16:29,000
So I want to do that to get those out and then in our Cindy thing, I

1012
01:16:29,000 --> 01:16:30,400
want to have a way to do this.

1013
01:16:38,200 --> 01:16:39,200
So oops.

1014
01:16:39,900 --> 01:16:45,000
So I want to be able to say if you pass me a 3 V, 3 for X, right?

1015
01:16:52,000 --> 01:16:55,900
I want to be able to grab a particular one of those out and this is

1016
01:16:55,900 --> 01:16:59,400
the lean right that I would be grabbing out and this is a slow you.

1017
01:16:59,400 --> 01:17:02,200
This is not something we've generally ever want to do except at the

1018
01:17:02,200 --> 01:17:05,300
very end of an algorithm or something when we computed what we want.

1019
01:17:06,500 --> 01:17:11,100
So yeah this this part is I'm not going to spend too much time on this

1020
01:17:11,100 --> 01:17:12,300
part at the moment.

1021
01:17:14,000 --> 01:17:16,700
It's not really particularly important part, but eventually we think

1022
01:17:16,700 --> 01:17:17,200
about it more.

1023
01:17:19,000 --> 01:17:24,200
So let me do this part, we're accessing the various values here.

1024
01:17:24,200 --> 01:17:28,600
We need to do is pull out an x, a y, and a z, which are things we can

1025
01:17:28,600 --> 01:17:29,400
actually get right?

1026
01:17:29,400 --> 01:17:30,800
Like, you know, we can get the X.

1027
01:17:30,800 --> 01:17:34,800
Y&z problem is, they're all combined and we need a particular Lane

1028
01:17:34,900 --> 01:17:36,500
right now.

1029
01:17:36,500 --> 01:17:38,700
Fortunately, for us, we can actually get.

1030
01:17:38,700 --> 01:17:45,100
We can actually get those Lanes by looking at the mm 128.

1031
01:17:45,200 --> 01:17:46,100
You can see

1032
01:17:53,100 --> 01:17:55,600
Hopefully, the struct is defined in here.

1033
01:17:55,600 --> 01:17:59,400
Oops, I put too many underscores or not enough on the scores.

1034
01:18:02,500 --> 01:18:04,400
I just want you to show me the struct, please.

1035
01:18:08,100 --> 01:18:09,300
It's not too much to ask.

1036
01:18:18,700 --> 01:18:19,300
Anyone.

1037
01:18:24,300 --> 01:18:25,300
All right, never mind.

1038
01:18:25,300 --> 01:18:26,100
Don't care.

1039
01:18:28,300 --> 01:18:29,300
Do it myself.

1040
01:18:31,500 --> 01:18:33,700
Why do I even bother searching for things on the internet anymore?

1041
01:18:35,400 --> 01:18:36,000
All right.

1042
01:18:44,600 --> 01:18:46,300
Can't I go to the definition of this thing?

1043
01:18:48,400 --> 01:18:49,600
I know you've got it.

1044
01:19:09,800 --> 01:19:10,900
Now, can you give me?

1045
01:19:30,100 --> 01:19:31,200
It's right here.

1046
01:19:35,900 --> 01:19:37,100
All right, it doesn't matter.

1047
01:19:37,300 --> 01:19:38,800
I won't even get depressed about this.

1048
01:19:38,900 --> 01:19:40,200
This is all I wanted.

1049
01:19:40,800 --> 01:19:43,300
Just wanted to look at the name of that member because I was forget

1050
01:19:43,300 --> 01:19:44,500
it, because it's so weird.

1051
01:19:46,000 --> 01:19:46,600
So anyway,

1052
01:19:49,700 --> 01:19:53,900
Out of the X, we can use the sub component to pull that piece of data.

1053
01:19:54,100 --> 01:19:56,100
Where did that was weird?

1054
01:19:57,100 --> 01:19:57,300
Mr.

1055
01:19:57,300 --> 01:20:00,500
Pitts, D accidentally like f and B at the same time.

1056
01:20:02,600 --> 01:20:06,300
So in here I can pull out this particular index.

1057
01:20:06,400 --> 01:20:10,100
Again, this is not necessarily something that the compiler will

1058
01:20:10,100 --> 01:20:14,900
understand particularly well, so it's not something you can do in

1059
01:20:14,900 --> 01:20:17,000
necessarily in performance critical code.

1060
01:20:18,200 --> 01:20:19,400
If it's like right in the middle of

1061
01:20:19,600 --> 01:20:22,500
Things the compiler may or may not know what to do with it, so it's

1062
01:20:22,500 --> 01:20:27,400
not necessarily the best idea so we'll can address that later.

1063
01:20:28,000 --> 01:20:28,600
But

1064
01:20:31,500 --> 01:20:35,500
In this case also I guess here for a raycast results here.

1065
01:20:40,400 --> 01:20:42,700
This, we also want to do is see you next four.

1066
01:20:45,300 --> 01:20:46,000
At the end.

1067
01:20:46,800 --> 01:20:49,400
And again, all of these things will now try to do wide, right?

1068
01:20:49,400 --> 01:20:53,900
Because we don't actually want them to be done this way.

1069
01:21:08,500 --> 01:21:09,700
so, I think

1070
01:21:13,200 --> 01:21:13,900
For results.

1071
01:21:13,900 --> 01:21:14,500
He right here.

1072
01:21:14,500 --> 01:21:16,800
We only need four of those as well.

1073
01:21:21,600 --> 01:21:28,400
So and for the result that we get passed in, I think the only thing

1074
01:21:28,400 --> 01:21:29,700
that we need to set

1075
01:21:33,400 --> 01:21:37,000
Is that box value?

1076
01:21:37,000 --> 01:21:40,100
Nothing else needs to be reduced.

1077
01:21:40,100 --> 01:21:40,700
I don't think.

1078
01:21:43,900 --> 01:21:45,200
Yes, run as far as I can tell.

1079
01:21:46,200 --> 01:21:49,600
So when we come through here, all of that should should just be fine.

1080
01:21:49,600 --> 01:21:52,800
And then in here, we just need to actually set these

1081
01:21:57,000 --> 01:21:59,400
Like so, oops.

1082
01:22:05,300 --> 01:22:07,900
And again this is not how we want to do it.

1083
01:22:07,900 --> 01:22:12,800
I'm just trying to take some small steps and sort of work, the code

1084
01:22:12,800 --> 01:22:16,900
slowly into position where we can make it run more optimally.

1085
01:22:43,100 --> 01:22:45,800
Okay, so who knows what?

1086
01:22:45,800 --> 01:22:46,900
We're going to get out of this?

1087
01:22:46,900 --> 01:22:49,000
Oops, I don't want to run that project.

1088
01:22:52,900 --> 01:22:56,300
But again just starting slow or oh dear.

1089
01:23:06,300 --> 01:23:08,200
What were you complaining about?

1090
01:23:14,200 --> 01:23:17,000
Do we accidentally write something off the stack there?

1091
01:23:20,700 --> 01:23:21,500
Hold on one second.

1092
01:23:44,100 --> 01:23:46,000
So, what did I do there?

1093
01:23:46,000 --> 01:23:47,700
It really did not like that.

1094
01:23:55,700 --> 01:23:56,400
Take a look.

1095
01:23:58,700 --> 01:23:59,400
It's coming here.

1096
01:24:01,400 --> 01:24:03,700
I want to turn off threading as well.

1097
01:24:14,500 --> 01:24:17,600
so, if Ike and

1098
01:24:31,300 --> 01:24:34,100
So I'm going to turn off any threading.

1099
01:24:51,200 --> 01:24:55,000
And then I'm just going to make this pass.

1100
01:25:03,800 --> 01:25:04,600
Full range.

1101
01:25:04,700 --> 01:25:06,900
So now one thread will do everything.

1102
01:25:18,200 --> 01:25:18,900
Oh, and I guess.

1103
01:25:37,800 --> 01:25:38,800
Something like this.

1104
01:25:41,500 --> 01:25:43,000
So then we can assign this.

1105
01:25:49,400 --> 01:25:52,000
And let it do a single threaded re comp.

1106
01:25:54,000 --> 01:25:54,900
What is the problem?

1107
01:26:11,300 --> 01:26:13,100
Just hide that decoration so it doesn't go.

1108
01:26:14,000 --> 01:26:14,400
All right?

1109
01:26:22,000 --> 01:26:23,900
So I thought I said a break point right here.

1110
01:26:23,900 --> 01:26:24,700
But didn't obey.

1111
01:26:24,700 --> 01:26:25,600
My breakpoint.

1112
01:26:25,600 --> 01:26:26,600
Why did it not obey?

1113
01:26:26,600 --> 01:26:28,100
My breakpoint visual studio.

1114
01:26:28,200 --> 01:26:28,700
There we go.

1115
01:26:32,100 --> 01:26:34,200
So all I want to do here is just take a brief, check to make sure

1116
01:26:34,200 --> 01:26:37,800
everything is set to things that I think are you know, legitimate

1117
01:26:38,100 --> 01:26:38,600
right.

1118
01:26:49,800 --> 01:26:50,700
This seemed fine.

1119
01:27:33,200 --> 01:27:35,100
So, at some point we should get in here.

1120
01:27:38,800 --> 01:27:40,900
And then we should update these values.

1121
01:28:00,400 --> 01:28:01,000
Which we do.

1122
01:28:11,400 --> 01:28:13,400
I know one thing we don't update yet is this but that's going to get

1123
01:28:13,400 --> 01:28:14,200
handled outside.

1124
01:28:34,100 --> 01:28:35,300
So, we finish here.

1125
01:28:38,700 --> 01:28:39,800
Only this one hit.

1126
01:28:50,100 --> 01:28:50,700
And we're good.

1127
01:28:53,200 --> 01:28:54,600
So that was pretty straightforward.

1128
01:29:16,900 --> 01:29:19,900
So I can't say, I know what the problem is here.

1129
01:29:28,500 --> 01:29:29,600
Let's break in the middle.

1130
01:30:02,300 --> 01:30:04,200
I'm just looking to see if we ever get out of this routine.

1131
01:30:09,200 --> 01:30:10,400
It doesn't seem like we do.

1132
01:30:16,800 --> 01:30:18,200
So, which way are we on right now?

1133
01:30:39,700 --> 01:30:42,300
So it seems like it is still going up just fine.

1134
01:30:49,100 --> 01:30:50,900
We could have just gotten really slow.

1135
01:30:54,300 --> 01:30:56,200
Now, that doesn't seem right.

1136
01:30:59,500 --> 01:30:59,700
Right?

1137
01:30:59,700 --> 01:31:02,200
So it's running for a little while we were on 119.

1138
01:31:05,300 --> 01:31:05,700
Something.

1139
01:31:05,700 --> 01:31:06,700
Something's busted.

1140
01:31:14,100 --> 01:31:17,300
She's on Sample Point index, 125.

1141
01:31:35,800 --> 01:31:38,300
So, we are doing something really bad here.

1142
01:31:40,600 --> 01:31:44,000
You can see that it's got GS has a segment.

1143
01:31:45,100 --> 01:31:45,700
So,

1144
01:31:47,800 --> 01:31:49,800
you can see here that, like, if we,

1145
01:31:52,600 --> 01:31:55,600
This is just we're oh, presumably overwriting stuck somewhere.

1146
01:31:59,400 --> 01:32:02,100
I can say or bring stack, we're overriding memory somewhere.

1147
01:32:03,300 --> 01:32:04,400
I'm just not sure exactly where

1148
01:32:12,200 --> 01:32:14,900
so that's very bizarre looking in the debugger.

1149
01:32:14,900 --> 01:32:19,300
That was that was pretty strange so I'm not sure exactly what I messed

1150
01:32:19,300 --> 01:32:20,800
up here.

1151
01:32:44,600 --> 01:32:46,300
although, I guess

1152
01:33:06,500 --> 01:33:09,500
Should also double-check that we don't overflow our stack battery

1153
01:33:09,500 --> 01:33:09,800
there.

1154
01:33:11,100 --> 01:33:13,100
I mean this just doesn't make much sense to me.

1155
01:33:17,700 --> 01:33:19,800
I clearly did something really stupid.

1156
01:33:19,900 --> 01:33:24,600
This is probably an owl of Shame kind of situation but it I just need

1157
01:33:24,600 --> 01:33:25,600
a clue as to what it is.

1158
01:33:26,100 --> 01:33:28,300
It's definitely not a morning that I should have done this.

1159
01:33:30,200 --> 01:33:31,300
I can tell you that right now.

1160
01:34:13,900 --> 01:34:15,200
I'm waiting for it to fail.

1161
01:34:27,100 --> 01:34:27,600
There it is.

1162
01:34:29,200 --> 01:34:34,500
So at some point we actually get something that wants to go through

1163
01:34:34,500 --> 01:34:36,100
enough boxes.

1164
01:34:36,100 --> 01:34:42,600
That that's too small on the stack, which could be reasonable.

1165
01:34:42,800 --> 01:34:44,300
Now, that they're casting far.

1166
01:34:44,300 --> 01:34:47,300
He's at a time, we're not casting those raised in the roughly, the

1167
01:34:47,300 --> 01:34:49,500
same direction, which we want to do.

1168
01:34:50,200 --> 01:34:53,300
So if you get 4 raised to go out in all directions, you could Traverse

1169
01:34:53,400 --> 01:34:54,500
all of the boxes.

1170
01:34:55,800 --> 01:35:01,400
And so although you're retiring the boxes they each one can push for

1171
01:35:01,400 --> 01:35:02,200
new ones on.

1172
01:35:02,200 --> 01:35:04,900
So you know I could believe that that was the case.

1173
01:35:06,500 --> 01:35:10,500
So I still don't think that's the only thing wrong here but I'm okay

1174
01:35:10,500 --> 01:35:13,400
with making this a bigger stack if we want to

1175
01:35:17,700 --> 01:35:21,900
For the time being, but yeah.

1176
01:35:26,600 --> 01:35:28,800
Something else has got to be wrong here.

1177
01:35:30,500 --> 01:35:34,100
I mean, I guess it's possible that introducing that stuff because we

1178
01:35:34,100 --> 01:35:37,800
haven't seemed eyes that yet is adding enough overhead to see but it

1179
01:35:37,800 --> 01:35:39,200
just doesn't seem likely

1180
01:35:40,800 --> 01:35:42,700
So I must have done something really dumb there.

1181
01:35:43,100 --> 01:35:44,400
I'm just not sure what it is yet.

1182
01:35:56,200 --> 01:35:57,300
Oh, you know what?

1183
01:35:57,300 --> 01:35:59,700
The other thing is it'll be pushing those boxes on.

1184
01:36:00,000 --> 01:36:02,600
X as well, which we don't really need to do.

1185
01:36:04,500 --> 01:36:05,500
So, there is that.

1186
01:36:06,900 --> 01:36:09,000
I still don't think that's enough, but like,

1187
01:36:11,400 --> 01:36:11,800
Right?

1188
01:36:11,800 --> 01:36:15,700
When we come through here, when we check any individual re it can push

1189
01:36:15,700 --> 01:36:16,500
on the box.

1190
01:36:16,500 --> 01:36:19,200
We don't ever want it to push on the box.

1191
01:36:26,400 --> 01:36:31,200
If it's going to already Traverse that box separately, then we want to

1192
01:36:31,200 --> 01:36:33,500
just go ahead and let it do so we write.

1193
01:36:33,500 --> 01:36:38,400
So what we really want here is thing, which says, okay, we're going to

1194
01:36:38,400 --> 01:36:41,200
do this testing and we're gonna figure out whether we want to Traverse

1195
01:36:41,200 --> 01:36:43,100
into the box or not.

1196
01:36:44,700 --> 01:36:47,000
And then when we determine that, right?

1197
01:36:47,500 --> 01:36:48,700
We're just going to do it.

1198
01:36:48,800 --> 01:36:51,800
So really this stuff here has to be like a break.

1199
01:36:51,800 --> 01:36:55,900
It's like we're going to do the sub boxes of this box.

1200
01:36:55,900 --> 01:36:56,100
There.

1201
01:36:56,300 --> 01:36:58,300
Stop looking through.

1202
01:36:59,600 --> 01:37:00,100
Right.

1203
01:37:02,700 --> 01:37:05,500
And I think the same would be true with this.

1204
01:37:05,500 --> 01:37:12,000
So when we actually decide that we do want to Traverse this box more

1205
01:37:12,000 --> 01:37:16,000
fully, we need to break out of the entire Loop, right?

1206
01:37:17,400 --> 01:37:22,400
So this is a break as well but it's actually, you know, a full full

1207
01:37:22,400 --> 01:37:25,600
break because we push the Box on the stack and that's the end of it.

1208
01:37:25,600 --> 01:37:27,200
We don't keep checking

1209
01:37:32,400 --> 01:37:33,100
After that.

1210
01:37:44,100 --> 01:37:48,000
So at least that gets rid of some of the craft there but still not

1211
01:37:48,000 --> 01:37:49,400
nearly enough, right?

1212
01:37:49,500 --> 01:37:50,800
Like it's still a pretty crafty.

1213
01:38:02,000 --> 01:38:04,800
So even in release mode here, you can see it's pretty bad.

1214
01:38:06,300 --> 01:38:10,200
So we kinda have to push forward on that before we even got to know

1215
01:38:10,200 --> 01:38:13,200
whether it's a good idea or not because we can't be doing loops and

1216
01:38:13,200 --> 01:38:13,700
stuff.

1217
01:38:17,600 --> 01:38:18,100
In there.

1218
01:38:19,200 --> 01:38:19,600
Alright.

1219
01:38:19,600 --> 01:38:23,300
So yeah, we need some centralized in Easy Way of pushing the Box on,

1220
01:38:23,300 --> 01:38:25,100
but that'll fall out of this naturally.

1221
01:38:25,100 --> 01:38:30,100
I think when we actually start to Cindy, it eyes that here.

1222
01:38:30,600 --> 01:38:33,700
Now, if we actually wanted to send you guys this a little bit more, so

1223
01:38:33,700 --> 01:38:35,700
is in rectangle, centre-half.

1224
01:38:35,700 --> 01:38:40,500
Tim what we could do is try to symbolize that part first.

1225
01:38:41,100 --> 01:38:43,200
So is in

1226
01:38:44,000 --> 01:38:45,700
Rectangles centre-half.

1227
01:38:45,700 --> 01:38:46,200
Tim

1228
01:38:53,400 --> 01:38:59,900
it's just this code, so we can do it V3 for X of

1229
01:39:00,100 --> 01:39:04,100
Here, which we need, we know we needed anyway.

1230
01:39:04,400 --> 01:39:05,100
So

1231
01:39:08,000 --> 01:39:11,000
At least, I thought we did a relative.

1232
01:39:11,000 --> 01:39:11,600
Did we didn't?

1233
01:39:11,600 --> 01:39:12,200
We do that?

1234
01:39:12,200 --> 01:39:13,500
Maybe we don't do that anymore.

1235
01:39:21,100 --> 01:39:24,700
Yes, o re origin so you can see here.

1236
01:39:24,700 --> 01:39:29,300
We actually have real origin is an actual thing, right?

1237
01:39:29,700 --> 01:39:35,900
So Rel origin is the Box position.

1238
01:39:51,600 --> 01:39:56,500
So if we want to just load the Box position in, we can then just do

1239
01:39:56,800 --> 01:40:04,500
real origin here and get the point that we want to test, which is our

1240
01:40:04,600 --> 01:40:06,300
real origin, right?

1241
01:40:08,700 --> 01:40:11,000
And then we can subtract from it, the Box pee.

1242
01:40:13,000 --> 01:40:19,800
And that should give us this test value and then we just need to test

1243
01:40:19,800 --> 01:40:25,800
against the radius of the box which again is something we can just

1244
01:40:25,800 --> 01:40:26,900
lewd, right?

1245
01:40:27,900 --> 01:40:30,500
So we can do box radius X.

1246
01:40:41,800 --> 01:40:43,400
Remember what that's actually called.

1247
01:40:44,200 --> 01:40:44,900
It is just awesome.

1248
01:40:48,400 --> 01:40:52,300
So we can load those in right because we just want to blow this out to

1249
01:40:52,300 --> 01:40:55,200
multiple components and then we can actually test those all at the

1250
01:40:55,200 --> 01:40:56,000
same time.

1251
01:40:59,600 --> 01:41:01,000
So, this would actually going here.

1252
01:41:08,800 --> 01:41:09,100
Right?

1253
01:41:09,100 --> 01:41:15,700
So this test is just like, okay, we look to see component doesn't have

1254
01:41:15,700 --> 01:41:18,200
to happen until inside here.

1255
01:41:20,000 --> 01:41:23,300
So we can do the subtraction, we can do the absolute value and then we

1256
01:41:23,300 --> 01:41:24,100
can do.

1257
01:41:32,500 --> 01:41:38,000
This comparison operation and then we can look at the result of the

1258
01:41:38,000 --> 01:41:42,100
Mask value and see whether we need to do this at all right.

1259
01:41:43,200 --> 01:41:48,000
So, in order to know whether we want to do this in the first place,

1260
01:41:48,200 --> 01:41:51,900
presumably, we can predicate this on the child counts as well.

1261
01:41:51,900 --> 01:41:55,700
If the Box doesn't have a child count, then we know we don't have to

1262
01:41:55,700 --> 01:41:56,300
do this.

1263
01:41:57,000 --> 01:41:59,000
So this part can be predicated on that.

1264
01:41:59,000 --> 01:41:59,800
I'm not sure what the

1265
01:42:00,200 --> 01:42:06,000
Efficient way to do that is necessarily and also in terms of total

1266
01:42:06,000 --> 01:42:08,800
Leaf boxes tested.

1267
01:42:12,200 --> 01:42:15,900
Yeah, it's kind of a little bit difficult to specify exactly what

1268
01:42:15,900 --> 01:42:16,800
should be happening there.

1269
01:42:16,800 --> 01:42:21,300
But so assuming we do these, we now need a way to do an absolute value

1270
01:42:21,300 --> 01:42:25,700
of this circular we're going to have to do something like

1271
01:42:31,300 --> 01:42:33,000
We want to comparison operation.

1272
01:42:33,400 --> 01:42:36,300
And here, we're going to want something that looks like this.

1273
01:42:48,100 --> 01:42:54,500
Basically the same code only instead of actually producing a Boolean

1274
01:42:54,500 --> 01:42:57,200
it's going to have to produce an actual comparison value.

1275
01:42:58,600 --> 01:42:59,800
Because just going to be B.

1276
01:43:01,400 --> 01:43:05,200
And then the like is in rectangle.

1277
01:43:06,800 --> 01:43:11,600
Or is inbox is going to have to be like a function that we have which

1278
01:43:11,600 --> 01:43:17,400
is any throughs or something like this for the comparison.

1279
01:43:30,900 --> 01:43:34,900
So it will look something more like this will do this and say, okay,

1280
01:43:34,900 --> 01:43:36,600
if it's in the box and off, we go.

1281
01:43:36,700 --> 01:43:40,600
Now what we probably want to do here is just do a thing that says is

1282
01:43:40,600 --> 01:43:45,500
Inbox equals false and then do a box child count here.

1283
01:43:45,700 --> 01:43:46,400
Like so,

1284
01:43:49,400 --> 01:43:50,000
Right.

1285
01:43:53,600 --> 01:43:56,300
That way we're not doing the work on boxes, we don't need to do the

1286
01:43:56,300 --> 01:43:56,900
work on.

1287
01:43:58,900 --> 01:44:01,900
And here we can also put our

1288
01:44:08,200 --> 01:44:09,000
Statistics.

1289
01:44:10,200 --> 01:44:12,900
So we just need one thing here which will just do all the tests at

1290
01:44:12,900 --> 01:44:14,200
once and then I'll test it for all.

1291
01:44:14,200 --> 01:44:19,100
Four are raised and say does any re actually emanate Inside the Box?

1292
01:44:21,100 --> 01:44:23,800
Now one of the interesting things about this is that actually

1293
01:44:23,800 --> 01:44:29,000
technically Ray origin could just be, we could know that it was always

1294
01:44:29,000 --> 01:44:29,600
the same.

1295
01:44:30,700 --> 01:44:35,000
If we knew that Ray origin was always the same, there might be some

1296
01:44:35,000 --> 01:44:37,200
optimizations we could do here, right?

1297
01:44:37,800 --> 01:44:41,000
So for example, one of the things that we could do here is this test

1298
01:44:41,000 --> 01:44:42,400
wouldn't have to be performed Cindy.

1299
01:44:42,900 --> 01:44:46,900
However, since we pretty much wood could performance to me.

1300
01:44:46,900 --> 01:44:50,300
Anyway, the only difference is one move of the Mask register

1301
01:44:53,000 --> 01:44:58,000
it seems like it's pretty free to make this thing just work because I

1302
01:44:58,000 --> 01:44:59,800
don't know that there's really any reason to

1303
01:45:00,000 --> 01:45:01,200
It's all being the same origin.

1304
01:45:01,200 --> 01:45:01,700
We don't know.

1305
01:45:01,700 --> 01:45:03,300
We actually get anything for that.

1306
01:45:03,700 --> 01:45:04,800
So it seems like you might as well.

1307
01:45:04,800 --> 01:45:08,700
Let the person pass in different origins in case we ever actually need

1308
01:45:08,700 --> 01:45:09,200
that.

1309
01:45:10,400 --> 01:45:18,400
So but it's worth noting that for the most part, the outside routine

1310
01:45:18,400 --> 01:45:21,500
is just pissing picking different directions from the same origin,

1311
01:45:21,900 --> 01:45:22,600
right?

1312
01:45:22,600 --> 01:45:25,000
It doesn't need to pass in different Origins.

1313
01:45:25,700 --> 01:45:29,100
So we do have, if we cease a pattern developing where we think we

1314
01:45:29,100 --> 01:45:29,900
could do something with

1315
01:45:30,000 --> 01:45:30,500
that.

1316
01:45:32,200 --> 01:45:33,400
The options on the table.

1317
01:45:35,700 --> 01:45:38,300
So, if we take a look at our Sim decode, you know, we don't have very

1318
01:45:38,300 --> 01:45:40,300
much here yet, right?

1319
01:45:42,600 --> 01:45:45,600
So we need to do is augment that with some of the things that we need,

1320
01:45:45,900 --> 01:45:46,100
right?

1321
01:45:46,100 --> 01:45:47,700
Some of the functions that we don't have.

1322
01:45:48,500 --> 01:45:51,200
And so you can see here is essentially the ones, you know, it's pretty

1323
01:45:51,200 --> 01:45:55,400
obvious that we've got most of stuff that we need for the actual math,

1324
01:45:55,800 --> 01:46:01,200
basic operators problem now is we've got sort of some more sort of

1325
01:46:01,200 --> 01:46:02,600
specialized operators here.

1326
01:46:35,400 --> 01:46:38,700
So these are the things we would actually need in order to make this

1327
01:46:38,700 --> 01:46:39,500
code work.

1328
01:46:45,000 --> 01:46:47,000
What is the problem?

1329
01:46:52,800 --> 01:46:53,200
Oh,

1330
01:46:58,900 --> 01:46:59,900
Ah, okay.

1331
01:47:01,000 --> 01:47:02,300
I did that.

1332
01:47:02,300 --> 01:47:03,300
Stupid lie.

1333
01:47:05,300 --> 01:47:12,100
So, yeah, in this case, since these are the three, four X's, this is

1334
01:47:12,100 --> 01:47:13,900
just the Box radius itself.

1335
01:47:15,800 --> 01:47:18,800
I was thinking of that code a little bit backwards in my head.

1336
01:47:20,600 --> 01:47:25,700
So we can load the whole V3 up here and so this is actually just one

1337
01:47:25,700 --> 01:47:26,400
operation.

1338
01:47:26,500 --> 01:47:29,500
I don't know why so we don't really need the and they're right.

1339
01:47:36,100 --> 01:47:37,800
This is really all we're talking about.

1340
01:47:41,100 --> 01:47:41,400
Right?

1341
01:47:41,400 --> 01:47:47,000
Because this is not one, mmm 120, it's 3 and 128 so it can do all

1342
01:47:47,000 --> 01:47:48,500
three tests at the same time.

1343
01:47:50,000 --> 01:47:53,600
So we really don't need the and at the moment so I won't bother

1344
01:47:53,600 --> 01:47:56,900
implementing it or I didn't do it here anyway but that's all we

1345
01:47:56,900 --> 01:47:57,700
actually need.

1346
01:48:05,500 --> 01:48:08,000
Is there no subtract here.

1347
01:48:10,000 --> 01:48:11,600
Looks like we didn't do a subtract yet.

1348
01:48:33,400 --> 01:48:35,100
That was a good catch compiler.

1349
01:48:39,100 --> 01:48:41,800
And this is supposed to be.

1350
01:48:43,400 --> 01:48:44,700
Put a few four in there.

1351
01:48:50,500 --> 01:48:53,400
So I think in order to make that work properly, all we really need to

1352
01:48:53,400 --> 01:48:57,100
do here is make sure that these are actually implemented.

1353
01:48:57,600 --> 01:49:00,900
So one of these is Trivial which is this one right here.

1354
01:49:01,700 --> 01:49:08,000
These two are less so because they're not exactly direct analogs to an

1355
01:49:08,000 --> 01:49:08,500
operation.

1356
01:49:08,500 --> 01:49:09,400
That's insanity.

1357
01:49:09,900 --> 01:49:12,000
But yeah, it's not a huge deal.

1358
01:49:13,900 --> 01:49:20,400
All right, so if we want to do the operator one cure, so operator less

1359
01:49:20,400 --> 01:49:24,400
than or equal to, they actually have comp values.

1360
01:49:33,400 --> 01:49:36,500
They actually have comparison operators, right?

1361
01:49:36,500 --> 01:49:42,500
In Cindy Hsu, we can just do a comp less than, or equal to, which is

1362
01:49:42,500 --> 01:49:43,400
what we were trying to do.

1363
01:49:44,000 --> 01:49:46,600
And then I'll actually produce the mask values that we wanted.

1364
01:49:46,600 --> 01:49:48,500
So that's really pretty easy.

1365
01:49:49,600 --> 01:49:53,800
Any truth is probably the next easiest, one and absolute value is the

1366
01:49:53,800 --> 01:49:58,900
hardest only because it involves having to have a mask.

1367
01:49:59,100 --> 01:50:02,400
The reason that it involves having to have a mask is, at least, if I

1368
01:50:02,400 --> 01:50:03,100
remember correctly,

1369
01:50:03,400 --> 01:50:08,000
There is no absolute value instruction in Cindy instead.

1370
01:50:08,000 --> 01:50:11,400
What they do is they just say, well look floating Point values are

1371
01:50:11,400 --> 01:50:13,600
just they have a sign bit.

1372
01:50:13,700 --> 01:50:18,500
It's not like in two's complement where the value is like a different

1373
01:50:18,500 --> 01:50:22,300
value and you do some math up on it to get the absolute value.

1374
01:50:24,300 --> 01:50:27,700
In this case, it's literally just the high bit says whether it's

1375
01:50:27,700 --> 01:50:28,300
positive or negative.

1376
01:50:28,300 --> 01:50:34,100
So all an absolute value is is a mask of the high bit with 0 1, 1 1,

1377
01:50:34,100 --> 01:50:35,800
1, 1 0, no one, right?

1378
01:50:37,000 --> 01:50:45,000
So it's pretty easy to do that requires a constant so that's not

1379
01:50:45,000 --> 01:50:50,800
great, but they decided that welding that constant into the code was

1380
01:50:50,800 --> 01:50:52,500
not that big of a deal, right?

1381
01:50:53,500 --> 01:50:56,100
so they so they just don't provide a structure to do it because it's

1382
01:50:56,100 --> 01:50:59,400
just too instructions, one to load a mask in one day and it or do you

1383
01:50:59,400 --> 01:50:59,800
can generate

1384
01:51:00,000 --> 01:51:04,700
Tasks using some kind of a logical trick or something, right?

1385
01:51:04,700 --> 01:51:07,700
But you have to make just somehow have to get a mask in there and then

1386
01:51:07,700 --> 01:51:08,500
you use it.

1387
01:51:11,400 --> 01:51:13,500
So, let's take a look at any trues first, because, any throughs

1388
01:51:13,500 --> 01:51:15,800
actually is.

1389
01:51:22,400 --> 01:51:23,600
More closely.

1390
01:51:26,200 --> 01:51:27,100
Matching right there.

1391
01:51:28,900 --> 01:51:31,200
Is it mask move or move mask?

1392
01:51:31,700 --> 01:51:33,000
I never remember.

1393
01:51:47,000 --> 01:51:50,200
Set each bit of mask desk based on the most significant bit of the

1394
01:51:50,200 --> 01:51:53,000
corresponding packed single-precision 32-bit floating-point element in

1395
01:51:53,000 --> 01:51:53,200
a.

1396
01:51:53,200 --> 01:51:54,300
So that is what we want.

1397
01:51:55,400 --> 01:52:00,600
And so that basically says, all right look I know you did Lean based

1398
01:52:00,600 --> 01:52:03,200
comparisons of each of the values of the Cindy registers.

1399
01:52:03,500 --> 01:52:06,900
What I want you to do now is just tell me where any of them set,

1400
01:52:06,900 --> 01:52:07,600
right?

1401
01:52:08,000 --> 01:52:10,400
So that's what we want to do there.

1402
01:52:18,300 --> 01:52:20,000
So we do this move Mass, PS.

1403
01:52:20,000 --> 01:52:23,000
And then in here, I'm going to have this comparison now.

1404
01:52:23,100 --> 01:52:26,200
Normally we would just do that, but in this case we know we actually

1405
01:52:26,200 --> 01:52:30,900
have three different values and it wants to know if there's any truth

1406
01:52:30,900 --> 01:52:31,100
at.

1407
01:52:31,100 --> 01:52:31,400
All.

1408
01:52:31,400 --> 01:52:31,500
Right.

1409
01:52:31,500 --> 01:52:32,700
So this is an and

1410
01:52:35,900 --> 01:52:37,500
So, we actually need to do this.

1411
01:52:46,700 --> 01:52:52,600
Now, it's probably not like move mask, I don't remember, but I don't

1412
01:52:52,700 --> 01:52:54,100
think well.

1413
01:52:55,200 --> 01:52:57,900
So if you take a look here, it's a latency to instruction and the

1414
01:52:57,900 --> 01:52:59,200
throughput one instruction.

1415
01:53:00,400 --> 01:53:06,300
okay, on the other hand, if we take a look at and PS,

1416
01:53:09,400 --> 01:53:13,600
It's got latency one and throughput one and it's through puts even

1417
01:53:13,600 --> 01:53:15,400
better on Skylake, right?

1418
01:53:16,100 --> 01:53:17,300
Sue probably.

1419
01:53:17,300 --> 01:53:21,500
The smarter thing here to do would be to actually just and two things

1420
01:53:21,500 --> 01:53:23,600
together and then do the move mask, right?

1421
01:53:24,200 --> 01:53:28,400
So instead I'm just going to say all right, fine let's do.

1422
01:53:32,000 --> 01:53:33,700
Mmm, and PS.

1423
01:53:39,800 --> 01:53:43,500
Like so and just say, all right, let's and the X, the Y, and the Z

1424
01:53:44,400 --> 01:53:48,200
comparison results together first instead because all I want to know,

1425
01:53:48,200 --> 01:53:50,800
is, if any bits were set, I'm sorry or not.

1426
01:53:54,500 --> 01:53:54,700
Right.

1427
01:53:54,700 --> 01:53:56,800
This is if any of those were true.

1428
01:53:57,600 --> 01:53:59,900
Oh wait, no, no, no, no.

1429
01:54:00,300 --> 01:54:01,300
These were ins.

1430
01:54:01,300 --> 01:54:02,700
So this is not any truth.

1431
01:54:02,700 --> 01:54:04,600
This is all truths.

1432
01:54:04,800 --> 01:54:08,200
They all had to be true right for to be inside.

1433
01:54:09,600 --> 01:54:11,200
Nothing could be outside.

1434
01:54:13,000 --> 01:54:16,400
So we actually want both of these so there's an aura.

1435
01:54:16,400 --> 01:54:17,900
PS version right.

1436
01:54:17,900 --> 01:54:21,000
That's going to tell us if any of the values were true and that's what

1437
01:54:21,000 --> 01:54:22,100
I was initially writing.

1438
01:54:23,000 --> 01:54:27,500
But then there's also an and altars which is just the same exact

1439
01:54:27,500 --> 01:54:28,800
function of just with Ann's

1440
01:54:39,300 --> 01:54:39,500
Right?

1441
01:54:39,500 --> 01:54:44,200
And so that just requires that there be trues and all three of the

1442
01:54:44,200 --> 01:54:49,600
components instead of, you know, the other way around.

1443
01:54:50,400 --> 01:54:56,800
So it's tough to say what they should really be named because they're

1444
01:54:56,800 --> 01:54:58,800
talking about spreading over to different parts.

1445
01:54:58,800 --> 01:55:02,600
And this is why I got confused when I named it is because we want to

1446
01:55:02,600 --> 01:55:05,700
know if there's any trees across our 4X.

1447
01:55:11,300 --> 01:55:13,300
Not across the three wide.

1448
01:55:13,700 --> 01:55:15,600
We want those to all be true.

1449
01:55:15,700 --> 01:55:16,600
You know I'm saying?

1450
01:55:16,600 --> 01:55:23,200
Other words we've got four three wide for three element vectors and so

1451
01:55:23,200 --> 01:55:25,800
when you say do I want any of these to be true?

1452
01:55:25,800 --> 01:55:30,100
Do you mean across the four vectors or across the three vectors and so

1453
01:55:30,200 --> 01:55:32,100
yeah you've got kind of this.

1454
01:55:37,000 --> 01:55:38,300
Bizarre situation.

1455
01:55:43,800 --> 01:55:46,700
So maybe I should name these a little bit bit differently.

1456
01:55:51,800 --> 01:55:59,400
We say all true in at least one lane.

1457
01:56:02,500 --> 01:56:05,000
Like all three true and at least one lane.

1458
01:56:05,000 --> 01:56:06,500
Is it really more?

1459
01:56:06,500 --> 01:56:07,300
What it does?

1460
01:56:21,800 --> 01:56:24,500
and then there's any three true and at least one lane,

1461
01:56:30,200 --> 01:56:30,900
Yeah, I'm saying to you.

1462
01:56:30,900 --> 01:56:33,400
So it's a little confusing here.

1463
01:56:37,400 --> 01:56:40,300
And then there'd be in all Lanes would be if the result came back

1464
01:56:40,300 --> 01:56:40,700
differently.

1465
01:56:40,700 --> 01:56:41,200
So

1466
01:56:43,900 --> 01:56:46,700
I don't know those names aren't great, they're not great.

1467
01:56:49,500 --> 01:56:52,000
So then again, absolute absolute value.

1468
01:56:52,200 --> 01:56:56,000
Like I said, not a particularly hard one necessarily but it just does

1469
01:56:56,000 --> 01:56:58,100
it involves more work, right?

1470
01:56:59,300 --> 01:56:59,900
So you

1471
01:57:00,000 --> 01:57:01,000
Masks value.

1472
01:57:01,000 --> 01:57:05,300
And then to make the results, we're going to have to use the mass

1473
01:57:05,300 --> 01:57:07,200
value to knock out the high bit.

1474
01:57:07,600 --> 01:57:10,300
So you know, one way to do this, for example, would be asked me to

1475
01:57:10,300 --> 01:57:11,100
say, all right?

1476
01:57:11,100 --> 01:57:12,200
It's going to equal.

1477
01:57:15,500 --> 01:57:19,100
The or Ps of a, and the mask.

1478
01:57:23,100 --> 01:57:26,900
Since we probably want or anyway, what I could do is just say, look,

1479
01:57:26,900 --> 01:57:28,400
let's just put or in there.

1480
01:57:31,000 --> 01:57:31,400
Oops.

1481
01:57:37,700 --> 01:57:38,200
Actually.

1482
01:57:39,900 --> 01:57:41,700
Can I get ya?

1483
01:57:47,300 --> 01:57:48,700
so, if I just put or in there,

1484
01:57:55,500 --> 01:57:56,800
And I put and in there.

1485
01:57:59,900 --> 01:58:02,400
Then we can just do those operations, right?

1486
01:58:07,400 --> 01:58:09,200
I don't know why I said.

1487
01:58:10,700 --> 01:58:13,500
So, if I want to knock out that value, what I want to do here is say

1488
01:58:14,000 --> 01:58:14,500
okay.

1489
01:58:15,800 --> 01:58:17,600
I just need some masks value.

1490
01:58:22,600 --> 01:58:26,300
We're if I and the mask with the input, it will knock out the high

1491
01:58:26,300 --> 01:58:26,900
bit.

1492
01:58:27,100 --> 01:58:32,200
So it needs to be something that just has that one high bit set.

1493
01:58:33,100 --> 01:58:34,000
You know I'm saying?

1494
01:58:36,800 --> 01:58:41,700
So I might want to so I need something that will set actually and I

1495
01:58:41,700 --> 01:58:45,400
guess in this case we know the mask is the same for all of them.

1496
01:58:45,400 --> 01:58:50,400
So I can just do I don't have to actually construct a full V 3 for X.

1497
01:58:50,400 --> 01:58:51,000
It's the same.

1498
01:58:51,000 --> 01:58:52,600
We just need one for x value would do it.

1499
01:58:52,700 --> 01:58:55,100
It's going to be the same for every value.

1500
01:58:55,600 --> 01:58:59,300
So as long as I do set, 1 PS here to generate the value.

1501
01:58:59,300 --> 01:59:03,300
I need the question is just what's the value that knocks out the high

1502
01:59:03,300 --> 01:59:04,600
bit, right?

1503
01:59:05,000 --> 01:59:05,900
And in this case,

1504
01:59:07,000 --> 01:59:09,000
Presumably, it's easiest to just load it.

1505
01:59:10,100 --> 01:59:10,900
I would guess.

1506
01:59:11,800 --> 01:59:13,500
And so that's just going to be

1507
01:59:16,300 --> 01:59:17,200
One shifted up.

1508
01:59:17,200 --> 01:59:19,200
31 places, right?

1509
01:59:19,200 --> 01:59:20,600
And then knotted.

1510
01:59:20,700 --> 01:59:25,000
So I put the 1 there and then I flip it all the bit so that I have a

1511
01:59:25,000 --> 01:59:28,600
zero at the top and ones everywhere else and I and those together, it

1512
01:59:28,600 --> 01:59:31,800
should absolute value because the sign bit is the first bit in a

1513
01:59:31,800 --> 01:59:32,400
float.

1514
01:59:32,800 --> 01:59:33,600
And off we go.

1515
01:59:34,100 --> 01:59:37,200
Now we're at a time, but I should be able to step in here now,

1516
01:59:38,800 --> 01:59:42,200
Looks like we're not quite bug free either there, but I should be able

1517
01:59:42,200 --> 01:59:42,800
step in here now.

1518
01:59:42,800 --> 01:59:46,600
Just verify that some of those work before we go any further.

1519
01:59:47,600 --> 01:59:49,500
I don't think we're in debug mode.

1520
01:59:49,500 --> 01:59:52,200
So let me just quickly get us into debug mode.

1521
01:59:56,800 --> 01:59:58,000
And here we go.

1522
02:00:01,400 --> 02:00:05,900
So in his inbox should start out with zero and a zero and it does we

1523
02:00:05,900 --> 02:00:08,900
have the box position that were loading in here.

1524
02:00:09,700 --> 02:00:12,400
And so our box position

1525
02:00:14,900 --> 02:00:18,100
Which is this should be replicated for X.

1526
02:00:18,400 --> 02:00:25,100
So we should just see this, the X's the wise and the Z's, they're just

1527
02:00:25,100 --> 02:00:25,900
replicated, right?

1528
02:00:25,900 --> 02:00:28,200
This is just, this is replicating itself out.

1529
02:00:29,600 --> 02:00:32,600
The same thing should happen with our box radius.

1530
02:00:37,500 --> 02:00:43,400
So when we step through here, there's our value, and here's the values

1531
02:00:43,400 --> 02:00:44,300
replicated.

1532
02:00:44,700 --> 02:00:45,700
This is what we want.

1533
02:00:46,500 --> 02:00:47,200
So we're going to now.

1534
02:00:47,200 --> 02:00:51,400
Take the origin and subtract the Box fee from it to get the relative

1535
02:00:51,400 --> 02:00:52,000
origin.

1536
02:00:52,500 --> 02:00:54,400
This is where it is relative.

1537
02:00:54,500 --> 02:00:55,600
You know to the Box.

1538
02:00:58,500 --> 02:01:00,100
so you can see in here, we've got

1539
02:01:02,400 --> 02:01:05,300
the difference now between the two of these.

1540
02:01:06,500 --> 02:01:08,400
So this is the difference and I can

1541
02:01:10,400 --> 02:01:11,600
Sorry, the real origin here.

1542
02:01:12,100 --> 02:01:17,400
So this is the difference between the real origin values for negative

1543
02:01:17,400 --> 02:01:25,000
1 and negative 8, 7 there and the Box position, right?

1544
02:01:25,000 --> 02:01:28,300
So we've got like - 6 + 4.

1545
02:01:28,300 --> 02:01:30,300
So 10 is exactly what you expect.

1546
02:01:30,300 --> 02:01:32,700
They're right, because we're subtracting away the Box P.

1547
02:01:32,700 --> 02:01:33,600
You know, not if you don't

1548
02:01:35,600 --> 02:01:39,100
Alright, so now let's dip in to our attempt at doing this comparison

1549
02:01:39,100 --> 02:01:39,500
here.

1550
02:01:40,300 --> 02:01:42,100
So here's our absolute value call.

1551
02:01:42,400 --> 02:01:46,800
And so, we want to see here is, we want to see the mask coming in, and

1552
02:01:46,800 --> 02:01:50,900
we want to see that that if we looked at it as a u-32, for example,

1553
02:01:50,900 --> 02:01:55,000
that it produces the mass value that we would expect.

1554
02:01:59,600 --> 02:02:02,100
That is not even remotely.

1555
02:02:02,200 --> 02:02:08,200
Oh no no well there's our first problem.

1556
02:02:09,400 --> 02:02:12,900
So set 1 PS is going to take a floating point value.

1557
02:02:13,300 --> 02:02:18,700
I wanted to set it as an integer value so like you can see

1558
02:02:23,700 --> 02:02:25,400
hear what our problem is.

1559
02:02:27,800 --> 02:02:34,600
I can set it as a integer but it's kind of nasty because then I have

1560
02:02:34,600 --> 02:02:35,200
to cast it.

1561
02:02:35,200 --> 02:02:36,100
I don't know.

1562
02:02:36,400 --> 02:02:40,300
The eye versus em thing is so annoying in the interns.

1563
02:02:40,300 --> 02:02:41,600
I don't know why they did that.

1564
02:02:42,200 --> 02:02:45,100
I don't know that there's a particularly good reason for it to be

1565
02:02:45,100 --> 02:02:49,300
completely honest with you, but that's just the way it is.

1566
02:02:49,600 --> 02:02:53,500
So what we might want to do here is just you know, do something like

1567
02:02:53,500 --> 02:02:54,000
this.

1568
02:03:00,800 --> 02:03:02,100
And then just do.

1569
02:03:03,300 --> 02:03:04,400
Tell it looked, man.

1570
02:03:06,200 --> 02:03:08,100
I really need you to load this value.

1571
02:03:08,100 --> 02:03:10,600
Directly do not convert it to a float.

1572
02:03:12,000 --> 02:03:13,000
Let's try it one more time.

1573
02:03:15,800 --> 02:03:18,800
So here's our mess with you now, that's the actual mass value which is

1574
02:03:18,800 --> 02:03:21,900
correct and now it's make sure we can actually load that in here and

1575
02:03:21,900 --> 02:03:22,300
there it is.

1576
02:03:22,300 --> 02:03:27,000
So now it's actually loaded properly so here's our results value

1577
02:03:27,000 --> 02:03:29,100
that's alright, here's our input value.

1578
02:03:30,200 --> 02:03:31,200
And here's our result value.

1579
02:03:31,200 --> 02:03:34,000
And we want to see here is we want to see these things getting

1580
02:03:34,000 --> 02:03:34,800
absolute value.

1581
02:03:35,000 --> 02:03:40,500
So we should see our results end up being equal to ra, but with des-

1582
02:03:40,500 --> 02:03:42,200
has removed right.

1583
02:03:43,300 --> 02:03:43,900
And they do.

1584
02:03:44,200 --> 02:03:44,900
So there you go.

1585
02:03:45,900 --> 02:03:47,300
So that's what we wanted.

1586
02:03:47,500 --> 02:03:51,000
Then when we do our comparison here, we need to the operator, the less

1587
02:03:51,000 --> 02:03:52,000
than operator, right?

1588
02:03:52,000 --> 02:03:53,300
So that should be setting.

1589
02:03:54,500 --> 02:03:58,900
Our result values to like zeros or ones so these you can't.

1590
02:03:58,900 --> 02:04:01,600
They look like Nan's but if you actually look at what they actually

1591
02:04:01,600 --> 02:04:03,000
are, they're just all FS.

1592
02:04:04,200 --> 02:04:06,500
So because they're now like just bit patterns.

1593
02:04:06,500 --> 02:04:09,300
So if they try to interpret as a float it's going to think it's a -

1594
02:04:09,300 --> 02:04:12,900
Man - Nan because the high bid is

1595
02:04:13,100 --> 02:04:14,300
Set, right?

1596
02:04:14,500 --> 02:04:15,500
And that's the sign bit.

1597
02:04:15,500 --> 02:04:17,900
And then the Nan because it's all ones everywhere else.

1598
02:04:18,800 --> 02:04:19,500
So in here.

1599
02:04:19,500 --> 02:04:21,800
Yeah, we go through and we say, all right,

1600
02:04:23,800 --> 02:04:25,500
We did our comparison values.

1601
02:04:25,800 --> 02:04:31,200
So now is Inbox, we can do our move mask, operation, to see what we

1602
02:04:31,200 --> 02:04:36,000
get and looks like, we are not inside this particular box, is that

1603
02:04:36,000 --> 02:04:36,600
correct?

1604
02:04:37,600 --> 02:04:38,600
Doesn't seem right.

1605
02:04:48,100 --> 02:04:50,800
Although I mean, yeah, that is right according to this.

1606
02:04:50,800 --> 02:04:55,200
So it says, we're not inside the Box because we're only inside one.

1607
02:04:55,900 --> 02:04:59,200
We're only inside the wire Lane, the X, and the Z Lanes were not

1608
02:04:59,200 --> 02:04:59,800
inside.

1609
02:05:00,100 --> 02:05:05,300
So this is actually correct, but I thought the first box we should be

1610
02:05:05,300 --> 02:05:07,000
inside, shouldn't we?

1611
02:05:08,400 --> 02:05:11,600
Oh no, maybe we're only inside the other one so we would skip that

1612
02:05:11,600 --> 02:05:11,900
one.

1613
02:05:17,500 --> 02:05:20,200
As an inside, then next one, I suppose.

1614
02:05:21,200 --> 02:05:23,700
we would be though, we just

1615
02:05:26,200 --> 02:05:27,200
Loop back through here.

1616
02:05:27,500 --> 02:05:28,700
So Source index.

1617
02:05:35,200 --> 02:05:36,800
How is that the source index?

1618
02:05:42,500 --> 02:05:43,600
All right, I see.

1619
02:05:45,100 --> 02:05:46,300
Let's come back through here.

1620
02:05:50,700 --> 02:05:51,200
Good.

1621
02:05:51,500 --> 02:05:52,900
You say this time in is in box.

1622
02:05:52,900 --> 02:05:55,100
Should be true and it is, so that's good.

1623
02:05:58,500 --> 02:05:59,800
Okay, so

1624
02:06:00,200 --> 02:06:02,300
That's a good thing.

1625
02:06:03,500 --> 02:06:05,100
Let me just go ahead and

1626
02:06:16,300 --> 02:06:21,200
so we're still a bit janky here so we still aren't quite doing that.

1627
02:06:21,200 --> 02:06:25,500
Preamble correctly, right?

1628
02:06:26,000 --> 02:06:28,500
You can kind of see how our lighting is a little bit messed up.

1629
02:06:29,800 --> 02:06:32,800
so, even though we only really did,

1630
02:06:37,400 --> 02:06:44,600
Just this part here, this isn't box, testing must not quite be correct

1631
02:06:44,600 --> 02:06:48,000
because we didn't touch any of the other work, right?

1632
02:06:48,000 --> 02:06:52,400
So we didn't touch anything down here that was happening.

1633
02:06:52,800 --> 02:06:54,600
We only touched this part up here.

1634
02:06:55,200 --> 02:07:00,500
So we must still be doing something slightly wrong in our processing

1635
02:07:00,700 --> 02:07:02,200
of the

1636
02:07:05,600 --> 02:07:06,900
Of the Box values here.

1637
02:07:17,200 --> 02:07:17,600
Hubie.

1638
02:07:20,000 --> 02:07:21,200
so, what I could do here,

1639
02:07:23,100 --> 02:07:25,500
Is I could say.

1640
02:07:34,500 --> 02:07:37,500
I could introduce a secondary test function here that would just

1641
02:07:38,600 --> 02:07:41,200
compare the results of these two and stop whenever they were

1642
02:07:41,200 --> 02:07:41,900
different.

1643
02:07:46,900 --> 02:07:51,100
That seems like the easiest way to debug this because you know, unless

1644
02:07:51,100 --> 02:07:53,300
I can just spot check and find the bug.

1645
02:07:54,900 --> 02:07:59,000
The easiest way to find it would be to step through to the scalar case

1646
02:07:59,300 --> 02:08:03,500
that works and the non scalar case, it doesn't work and just look at

1647
02:08:03,500 --> 02:08:05,300
the difference, right?

1648
02:08:06,500 --> 02:08:07,200
so,

1649
02:08:41,000 --> 02:08:45,300
Yeah, I don't see anything particularly suspicious here, right?

1650
02:08:52,200 --> 02:08:53,200
I should make sure.

1651
02:08:56,700 --> 02:08:57,100
Whoa.

1652
02:09:03,000 --> 02:09:03,300
Yeah.

1653
02:09:06,000 --> 02:09:11,400
So yeah, I guess I will try testing that just because I'm not sure

1654
02:09:11,400 --> 02:09:13,300
which other way to do it.

1655
02:09:17,200 --> 02:09:18,600
And so, let's just try this.

1656
02:09:19,000 --> 02:09:20,400
I know we're over time but it's okay.

1657
02:09:20,400 --> 02:09:21,300
I started a little late.

1658
02:09:22,700 --> 02:09:24,100
So let's do a test here.

1659
02:09:28,300 --> 02:09:34,700
I'm going to call it test inbox and I'm just going to do is in the

1660
02:09:35,100 --> 02:09:38,300
rectangle haft centre-half damn thing, right?

1661
02:09:38,400 --> 02:09:44,200
The same thing we were doing for so basically, you know, oops,

1662
02:09:45,500 --> 02:09:51,500
This function and I'm going to go ahead and say we need box.

1663
02:09:51,500 --> 02:09:52,400
P.o.

1664
02:09:52,500 --> 02:09:54,200
box radius.

1665
02:09:56,100 --> 02:09:58,000
And the test is Right, origin.

1666
02:09:58,100 --> 02:10:00,300
I don't really need that.

1667
02:10:02,700 --> 02:10:03,400
so,

1668
02:10:05,900 --> 02:10:16,300
Once I have that, I can just say, all right, tell me if is inbox is

1669
02:10:16,300 --> 02:10:21,700
not equal or just break here whenever it's not equal.

1670
02:10:30,900 --> 02:10:36,300
So this way essentially, all I'm doing is saying, well, I'm was fairly

1671
02:10:36,300 --> 02:10:40,000
certain that the previous code was working correctly, least that's

1672
02:10:40,000 --> 02:10:41,200
what we thought.

1673
02:10:41,800 --> 02:10:43,800
So I have the same decode.

1674
02:10:43,800 --> 02:10:45,100
Why don't I just run them both?

1675
02:10:45,300 --> 02:10:47,500
And then just tell me when they disagree.

1676
02:10:47,600 --> 02:10:52,600
So that way, I can know that, you know, I've got a case right sitting

1677
02:10:52,600 --> 02:10:55,300
in front of me that I can just look at,

1678
02:10:56,400 --> 02:10:59,300
So in this case, r is inbox.

1679
02:11:09,700 --> 02:11:11,400
Our is in box value here.

1680
02:11:13,700 --> 02:11:16,400
Oh, okay, that's not quite right.

1681
02:11:16,400 --> 02:11:17,000
I have to

1682
02:11:18,300 --> 02:11:20,700
Make sure they're actually converted to boolean's.

1683
02:11:21,400 --> 02:11:24,700
So we want to say something more like this.

1684
02:11:36,100 --> 02:11:36,800
Okay.

1685
02:11:47,000 --> 02:11:48,500
That's really weird.

1686
02:11:56,800 --> 02:11:58,800
So, you're telling me these always agree.

1687
02:12:00,200 --> 02:12:02,400
And yet somehow we get different results.

1688
02:12:12,500 --> 02:12:14,800
That sure seems to be what you're telling me.

1689
02:12:18,600 --> 02:12:19,700
Did I miss something there?

1690
02:12:23,000 --> 02:12:25,100
So, those two are validated at that point.

1691
02:12:43,300 --> 02:12:47,600
And yet somehow that still breaks.

1692
02:12:49,600 --> 02:12:51,800
So what's the deal?

1693
02:12:51,800 --> 02:12:55,600
Let's suppose we actually just used that.

1694
02:13:11,600 --> 02:13:17,800
Oh, that's the only problem that break statement there is just

1695
02:13:17,800 --> 02:13:22,600
something that, yeah, that break statement used to break us out of

1696
02:13:22,600 --> 02:13:24,500
this Loop but that's not in there anymore.

1697
02:13:24,700 --> 02:13:28,100
So now it would break out of this Loop which is just patently wrong.

1698
02:13:29,000 --> 02:13:30,000
So, actually

1699
02:13:32,200 --> 02:13:33,600
Our code was working properly.

1700
02:13:33,600 --> 02:13:36,000
I think I don't think we have a problem there.

1701
02:13:36,500 --> 02:13:39,200
We were just inappropriately breaking out of the entire Loop.

1702
02:13:39,700 --> 02:13:41,800
So let's go ahead and take a look at what that looks like.

1703
02:13:41,800 --> 02:13:43,500
And I suspect it should now be correct.

1704
02:13:50,800 --> 02:13:51,300
There we go.

1705
02:13:52,600 --> 02:13:53,900
So much more.

1706
02:13:53,900 --> 02:13:54,300
Like what?

1707
02:13:54,300 --> 02:13:55,300
We expect to see.

1708
02:13:56,500 --> 02:13:57,400
So that's good.

1709
02:13:57,500 --> 02:13:59,400
So now we really need to focus.

1710
02:13:59,400 --> 02:14:00,700
Just on this part here.

1711
02:14:01,400 --> 02:14:05,300
I'm kind of in the mood to keep going, so I might just a little bit,

1712
02:14:05,400 --> 02:14:06,200
just a little bit.

1713
02:14:07,500 --> 02:14:10,100
So that's Cindy is now and then in here.

1714
02:14:10,100 --> 02:14:13,200
Now, what we'd have to say is like, okay so what do we do?

1715
02:14:15,200 --> 02:14:16,400
With the rest of this code.

1716
02:14:17,100 --> 02:14:21,100
So let's say we wanted to push this part down again, right?

1717
02:14:24,200 --> 02:14:25,100
One more time.

1718
02:14:29,100 --> 02:14:32,000
You know, maybe we want to just move it in inside one more.

1719
02:14:32,000 --> 02:14:36,000
So let's suppose we wanted to do to do this somehow, right?

1720
02:14:38,000 --> 02:14:39,800
Get this stuff working properly.

1721
02:14:42,500 --> 02:14:44,700
So how would we make this stuff work?

1722
02:14:45,400 --> 02:14:48,900
Let's go ahead and bracket this code here, just so we still have a

1723
02:14:48,900 --> 02:14:49,800
copy of it.

1724
02:14:55,000 --> 02:14:56,400
And let's try to reproduce it.

1725
02:14:57,600 --> 02:14:59,800
So at the end of the day, we're thing we're trying to produce here.

1726
02:15:00,000 --> 02:15:00,700
T right now.

1727
02:15:00,700 --> 02:15:05,800
Relative origin obviously is something that we need in both cases so I

1728
02:15:05,800 --> 02:15:08,000
might just compute relative origin.

1729
02:15:08,000 --> 02:15:10,100
Just right off the bat right?

1730
02:15:12,500 --> 02:15:17,500
So basically these two things, I'll just say that we just do, right?

1731
02:15:17,500 --> 02:15:23,200
We load in the boxes position replicated and then we get the relative

1732
02:15:23,400 --> 02:15:25,300
location of the tube those things.

1733
02:15:27,300 --> 02:15:32,400
So that way relative origin here is just automatically we just have it

1734
02:15:32,900 --> 02:15:33,600
box P.

1735
02:15:33,600 --> 02:15:35,300
We just have it box.

1736
02:15:35,300 --> 02:15:37,400
Radius will be just have it right?

1737
02:15:37,500 --> 02:15:41,200
We just those things are just shared values that are outside.

1738
02:15:44,300 --> 02:15:45,400
And everything's fine.

1739
02:15:46,500 --> 02:15:53,500
So then we come through here and say, so if I had to look at which

1740
02:15:53,500 --> 02:15:57,500
ones we're not doing it, so positive is redirection.

1741
02:16:00,500 --> 02:16:03,100
What's interesting, I guess now that I'm looking at this here.

1742
02:16:03,500 --> 02:16:09,200
So positive is actually just the same no matter what part of this Loop

1743
02:16:09,200 --> 02:16:09,800
were in.

1744
02:16:11,400 --> 02:16:13,800
So really, this is questionable.

1745
02:16:16,200 --> 02:16:19,100
And just reusable, I think.

1746
02:16:22,200 --> 02:16:23,700
Because it doesn't depend.

1747
02:16:25,500 --> 02:16:26,500
On this at all.

1748
02:16:30,100 --> 02:16:33,100
Like, in other words, these values, right?

1749
02:16:33,100 --> 02:16:34,600
They could just be out here.

1750
02:16:37,400 --> 02:16:37,900
Right.

1751
02:16:37,900 --> 02:16:42,900
I mean, I don't think they do anything so they could just be an array

1752
02:16:42,900 --> 02:16:46,000
of three things that you just look up into it, just the table and

1753
02:16:46,000 --> 02:16:46,600
you're done.

1754
02:16:46,900 --> 02:16:49,700
You don't actually need to generate them out of anything.

1755
02:16:50,100 --> 02:16:51,799
You don't need to test these values.

1756
02:16:51,900 --> 02:16:55,299
You just this whole thing is just always known, right?

1757
02:16:55,600 --> 02:16:59,700
And the same is true of the sign, like all of that stuff, is just all

1758
02:16:59,700 --> 02:17:00,400
just known.

1759
02:17:04,200 --> 02:17:06,900
So really, all you're talking about is grabbing that sign value out.

1760
02:17:06,900 --> 02:17:08,400
Let's just, let's just see.

1761
02:17:14,299 --> 02:17:19,200
I guess let me leave it in here but let's just see how that works.

1762
02:17:20,700 --> 02:17:27,100
All of that stuff is not dependent on anything about the box, so it's

1763
02:17:27,100 --> 02:17:28,100
just not relevant.

1764
02:17:28,200 --> 02:17:31,000
These two are dependent on the box and we already have them.

1765
02:17:36,100 --> 02:17:38,600
You already have that, right?

1766
02:17:39,600 --> 02:17:43,100
So really, the only part of this code we're talking about is this?

1767
02:17:43,700 --> 02:17:46,299
And this that's it.

1768
02:17:48,100 --> 02:17:53,000
This one is just the origin, the relative origin /.

1769
02:17:53,000 --> 02:17:57,700
The Raid direction for this particular axis.

1770
02:18:00,100 --> 02:18:01,799
Whichever access were on.

1771
02:18:26,600 --> 02:18:34,299
So it's a little nasty just because this Union here doesn't have an

1772
02:18:34,299 --> 02:18:39,400
overall Union for grabbing them out as indices.

1773
02:18:45,299 --> 02:18:46,600
Which is a little nasty.

1774
02:18:47,700 --> 02:18:48,500
To be sure.

1775
02:19:23,200 --> 02:19:25,900
And I'm not sure exactly how I want to do that.

1776
02:19:37,400 --> 02:19:42,299
So box surface index is only used all the way down here.

1777
02:19:52,500 --> 02:19:56,300
So that actually doesn't have to be symbolized in any particular way

1778
02:19:56,300 --> 02:19:57,300
at the moment.

1779
02:19:59,200 --> 02:19:59,700
Right.

1780
02:20:03,800 --> 02:20:06,300
It's literally just put just in that place.

1781
02:20:06,800 --> 02:20:10,700
So what we could do is say, you know,

1782
02:20:12,300 --> 02:20:17,300
since that will never occur any other place than literally right here.

1783
02:20:18,900 --> 02:20:24,000
We could just say let's put that down here for now and ignore it,

1784
02:20:24,000 --> 02:20:24,600
right?

1785
02:20:26,500 --> 02:20:30,000
Or more specifically like it can be put in here or something.

1786
02:20:32,600 --> 02:20:35,700
So it's really just this part that we have to know about here.

1787
02:20:36,800 --> 02:20:39,900
And one of the interesting things about this is now if you look at

1788
02:20:39,900 --> 02:20:43,900
what's going to happen with this whole situation,

1789
02:20:46,600 --> 02:20:50,000
We can actually change this to be something that's computed directly

1790
02:20:50,000 --> 02:20:50,800
as well.

1791
02:20:54,700 --> 02:20:57,200
Sorry, I'm still I'm just kind of playing with this, in my head.

1792
02:21:00,100 --> 02:21:03,500
so if you look at what happens here, we don't need to do an if at all

1793
02:21:03,500 --> 02:21:07,500
because if we just want a negative, a positive or negative value,

1794
02:21:08,600 --> 02:21:09,600
For the sign.

1795
02:21:10,100 --> 02:21:12,400
You can see what the sign is going to do down here, right?

1796
02:21:13,700 --> 02:21:18,600
The sine value here is just going to just it's just going to flip this

1797
02:21:18,600 --> 02:21:20,800
radius e-value, right?

1798
02:21:21,000 --> 02:21:23,700
So the radius e value has to be positive right now.

1799
02:21:23,700 --> 02:21:25,700
We don't use negative ones.

1800
02:21:27,600 --> 02:21:29,700
We don't use use - size boxes.

1801
02:21:31,000 --> 02:21:36,300
So what that tells you is actually that the sine value, this can

1802
02:21:36,300 --> 02:21:43,200
literally just be something that will flip the direction of this thing

1803
02:21:43,200 --> 02:21:47,200
based on which direction the ray is going, right?

1804
02:21:47,200 --> 02:21:48,600
We just want them to be the same.

1805
02:21:51,400 --> 02:21:57,400
So all we really have to do is just produce the high bitmask value

1806
02:21:57,400 --> 02:22:03,600
using, whatever this operation is, that will correctly make the same

1807
02:22:03,600 --> 02:22:04,400
sign there.

1808
02:22:04,900 --> 02:22:06,600
We don't even have to do a mole, right?

1809
02:22:06,600 --> 02:22:10,000
Look, we could do like an X or

1810
02:22:11,400 --> 02:22:11,900
Or something.

1811
02:22:11,900 --> 02:22:14,700
Probably we could we could do something creative there, right?

1812
02:22:19,700 --> 02:22:23,200
So yeah, this is going to simplify down to almost nothing and then

1813
02:22:23,200 --> 02:22:26,200
this is just a straight ahead divided, right?

1814
02:22:27,700 --> 02:22:28,700
Is all that is.

1815
02:22:36,300 --> 02:22:38,200
Yeah, that's that's just a straight ahead divided.

1816
02:22:43,000 --> 02:22:45,800
So yeah, I don't know exactly what to do with this.

1817
02:22:45,800 --> 02:22:51,000
I mean, really you want there to be the union array inside here so you

1818
02:22:51,000 --> 02:22:54,900
can still step over each individual axis just for conciseness of

1819
02:22:54,900 --> 02:22:59,500
writing the code, the first time, then you probably want to blow it

1820
02:22:59,500 --> 02:23:03,500
out to be unrolled so that you don't actually have any Loops over an

1821
02:23:03,500 --> 02:23:04,600
index like that.

1822
02:23:07,400 --> 02:23:09,600
Yeah, that's something the compiler would ideally do for you, but it

1823
02:23:09,600 --> 02:23:14,500
doesn't a lot of times there's no really clean way to just tell it.

1824
02:23:14,500 --> 02:23:15,200
Look, hey man.

1825
02:23:16,400 --> 02:23:17,400
You got to unroll this.

1826
02:23:17,400 --> 02:23:20,100
I don't really actually want this to be this way.

1827
02:23:25,200 --> 02:23:28,200
So yeah, I mean let's try it.

1828
02:23:28,200 --> 02:23:29,000
I guess.

1829
02:23:29,000 --> 02:23:31,100
So if you know

1830
02:23:49,500 --> 02:23:49,800
Well.

1831
02:24:13,400 --> 02:24:16,400
So what we can say here is like alright, in fact, you know, you can

1832
02:24:16,400 --> 02:24:20,500
see how we did this, it's the same as how we did it in.

1833
02:24:25,800 --> 02:24:30,900
In here so you can see we've got okay you know there's different

1834
02:24:30,900 --> 02:24:33,800
structures that we had here for these and then we've got finally at

1835
02:24:33,800 --> 02:24:36,700
the end one of these guys.

1836
02:24:38,200 --> 02:24:43,900
So you know it would basically say there's a struct that has these in

1837
02:24:43,900 --> 02:24:51,800
there or you can go ahead and access them as an array.

1838
02:24:53,500 --> 02:24:54,200
Like this.

1839
02:24:57,100 --> 02:24:57,700
Right.

1840
02:25:00,500 --> 02:25:03,200
Yeah, so you know we can do it that way.

1841
02:25:04,200 --> 02:25:07,100
I don't know how much more, that confuses, the compiler, it's pretty

1842
02:25:07,100 --> 02:25:07,700
nasty.

1843
02:25:07,700 --> 02:25:13,000
It's pretty gnarly data structure there to be sure.

1844
02:25:13,900 --> 02:25:14,900
But, you know,

1845
02:25:19,300 --> 02:25:21,000
I didn't design the language.

1846
02:25:22,900 --> 02:25:23,700
I wish I had.

1847
02:25:30,100 --> 02:25:32,900
So, you know, that allows us to access it either way.

1848
02:25:33,700 --> 02:25:37,900
So, if we were to literally just do this code fairly directly here,

1849
02:25:40,400 --> 02:25:44,600
Then what we have to produce, let's produce these things, sort of more

1850
02:25:44,600 --> 02:25:45,200
directly.

1851
02:25:46,000 --> 02:25:52,800
So if we want to produce a tear a here where we're trying to do for

1852
02:25:52,800 --> 02:25:58,000
wide, then what we're going to end up with is actually doing a div on,

1853
02:25:58,000 --> 02:26:01,700
just a standard single Sim devalue, right?

1854
02:26:02,500 --> 02:26:08,500
We're going to be doing effectively an M&M dsps here.

1855
02:26:09,500 --> 02:26:09,800
Oops.

1856
02:26:15,300 --> 02:26:16,300
Do we not have these?

1857
02:26:20,700 --> 02:26:21,400
I guess not.

1858
02:26:22,600 --> 02:26:23,200
It's got the other ones.

1859
02:26:23,200 --> 02:26:23,700
We have this one.

1860
02:26:24,900 --> 02:26:30,500
We'd be doing a divided here, between actually just one lane of this

1861
02:26:30,500 --> 02:26:32,200
thing at a time instead of all three.

1862
02:26:32,800 --> 02:26:35,800
Now, since we are at, I guess since we are going to do all three, I

1863
02:26:35,800 --> 02:26:38,400
guess, one other question would be why don't we just do it as one

1864
02:26:38,400 --> 02:26:42,400
divided up here that just executes across all three.

1865
02:26:43,700 --> 02:26:46,300
And I guess I don't have an answer for why we wouldn't just do that,

1866
02:26:46,300 --> 02:26:46,600
right?

1867
02:26:46,600 --> 02:26:47,500
You would just do this.

1868
02:27:04,400 --> 02:27:08,500
So, we just divide those two and then we'd get basically all of all of

1869
02:27:08,500 --> 02:27:09,800
the loops of these.

1870
02:27:10,000 --> 02:27:12,100
And that's a, I guess that's a negated there.

1871
02:27:13,900 --> 02:27:17,000
Why did we, I guess we negated it?

1872
02:27:17,000 --> 02:27:20,400
Because it gets used down here as a plus.

1873
02:27:23,900 --> 02:27:30,000
But why wouldn't we just swap those two and not negate it?

1874
02:27:30,100 --> 02:27:30,400
I don't know.

1875
02:27:30,400 --> 02:27:31,500
That seems kind of dumb.

1876
02:27:32,500 --> 02:27:35,200
That's probably just the just probably just a bug.

1877
02:27:38,300 --> 02:27:39,400
so, we'll note that

1878
02:27:40,900 --> 02:27:41,800
for the future.

1879
02:27:51,600 --> 02:27:57,000
So if you want to negate something I there's a couple different ways

1880
02:27:57,000 --> 02:27:57,800
you could do it.

1881
02:28:00,000 --> 02:28:06,600
This is probably not the most efficient way to do it because maybe X

1882
02:28:06,600 --> 02:28:07,600
soaring is the fish away.

1883
02:28:07,600 --> 02:28:08,500
But this one

1884
02:28:09,600 --> 02:28:14,300
It doesn't require actually generating The Mask or loading it, so I

1885
02:28:14,300 --> 02:28:14,500
don't know.

1886
02:28:14,500 --> 02:28:16,900
I haven't really thought about what's the best way to negate.

1887
02:28:16,900 --> 02:28:20,000
There is no negation instructions.

1888
02:28:20,000 --> 02:28:23,600
So you're just like, if you subtract the value from 0 that gives you

1889
02:28:23,600 --> 02:28:28,300
the negated version of it, you could in full.

1890
02:28:28,300 --> 02:28:31,100
So just do a thing that toggles, the hype it with an ex or something

1891
02:28:31,100 --> 02:28:31,400
like this.

1892
02:28:31,400 --> 02:28:34,800
So there's different ways that you could produce a negation and I'm

1893
02:28:34,800 --> 02:28:37,200
not going to think too hard about it right now which way is the best.

1894
02:28:37,200 --> 02:28:39,500
But you know keep in mind that

1895
02:28:39,600 --> 02:28:40,900
That's not.

1896
02:28:40,900 --> 02:28:46,000
There is no Cindy instruction that I know of for negation in sse2.

1897
02:28:48,700 --> 02:28:53,500
So when we come through here and we're doing now are negate negation

1898
02:28:53,500 --> 02:28:54,900
divide that can just be done.

1899
02:28:55,000 --> 02:28:57,500
All is one Fell Swoop up here.

1900
02:28:57,800 --> 02:29:01,900
So the other thing that we need to do is produce this special p-value.

1901
02:29:05,000 --> 02:29:05,400
Oops.

1902
02:29:09,700 --> 02:29:10,300
and,

1903
02:29:13,500 --> 02:29:14,800
It's that special p-value.

1904
02:29:14,800 --> 02:29:20,700
Presumably gets used later on somewhere for something.

1905
02:29:24,900 --> 02:29:26,000
Question is what?

1906
02:29:35,200 --> 02:29:35,700
oh,

1907
02:29:38,500 --> 02:29:39,100
Wait.

1908
02:29:43,400 --> 02:29:44,100
Does that?

1909
02:29:45,300 --> 02:29:45,800
Does that?

1910
02:29:45,900 --> 02:29:47,500
That's why you never get to use anywhere?

1911
02:29:52,500 --> 02:29:55,600
Does this support was this supposed to happen before?

1912
02:30:07,000 --> 02:30:10,500
So that's presumably supposed to happen actually beforehand.

1913
02:30:11,000 --> 02:30:12,700
I must have moved that code.

1914
02:30:12,700 --> 02:30:13,600
A little prematurely.

1915
02:30:13,600 --> 02:30:18,400
They're right because we must have to do the sign test.

1916
02:30:21,000 --> 02:30:26,900
So this this relative origin is not actually the same relative origin

1917
02:30:26,900 --> 02:30:28,000
call, right?

1918
02:30:28,200 --> 02:30:38,400
So you actually this this operation actually wants to happen to adjust

1919
02:30:38,400 --> 02:30:40,000
the relative origin here.

1920
02:30:40,000 --> 02:30:43,900
That's being computed to have this Edition.

1921
02:30:45,000 --> 02:30:45,600
To it.

1922
02:30:47,900 --> 02:30:48,400
Right.

1923
02:30:52,100 --> 02:30:53,200
It's actually subtraction.

1924
02:30:54,600 --> 02:30:57,700
If that makes sense, I'm assuming because otherwise why would we have

1925
02:30:57,700 --> 02:30:58,200
done it?

1926
02:30:59,800 --> 02:31:00,100
Right.

1927
02:31:00,100 --> 02:31:01,200
We wouldn't have it.

1928
02:31:01,200 --> 02:31:03,700
Must this must have been done like that.

1929
02:31:06,900 --> 02:31:09,200
Before the railroad before, the real origin call.

1930
02:31:09,900 --> 02:31:10,400
Right?

1931
02:31:11,500 --> 02:31:17,200
So, in this case, since we're adding this value before the subtract,

1932
02:31:17,300 --> 02:31:19,600
it would just be a subtraction of that value.

1933
02:31:19,600 --> 02:31:22,000
That would happen in here, right?

1934
02:31:24,100 --> 02:31:28,100
So we don't need the the div PS, but we do need the the p-value.

1935
02:31:30,300 --> 02:31:31,200
So the mmm.

1936
02:31:32,600 --> 02:31:35,300
128 value here of P.

1937
02:31:35,300 --> 02:31:36,400
For example, right?

1938
02:31:40,100 --> 02:31:41,400
Sorry m120.

1939
02:31:41,400 --> 02:31:47,700
Value of p is just going to be the one we already had, right?

1940
02:31:47,700 --> 02:31:52,800
So it's the, it's the real origin for the lane.

1941
02:31:55,700 --> 02:31:58,900
But then, we're going to take that and we're going to subtract away

1942
02:31:59,600 --> 02:32:04,600
this expression here, the sign radius, right?

1943
02:32:14,800 --> 02:32:18,700
In order to produce the p-value that we actually need to use once we

1944
02:32:18,700 --> 02:32:19,300
get in here.

1945
02:32:24,800 --> 02:32:25,900
But that's it.

1946
02:32:30,700 --> 02:32:31,500
Right.

1947
02:32:31,600 --> 02:32:36,000
And again since that's the same operation everywhere, you can I think

1948
02:32:36,000 --> 02:32:36,800
just do it?

1949
02:32:39,900 --> 02:32:40,600
Like this.

1950
02:32:47,400 --> 02:32:49,700
So this doesn't have to happen.

1951
02:32:55,400 --> 02:32:56,900
It's literally just this.

1952
02:32:58,600 --> 02:32:59,800
Where we take the signed radio.

1953
02:33:04,900 --> 02:33:06,600
Version which is this thing right here.

1954
02:33:07,000 --> 02:33:10,300
And that's the part that that's really the only interesting part in

1955
02:33:10,300 --> 02:33:12,700
terms of how we need to compute it.

1956
02:33:15,600 --> 02:33:16,500
I think that's it.

1957
02:33:17,800 --> 02:33:21,400
So really all we're talking about here is saying, we need to extract

1958
02:33:21,400 --> 02:33:28,200
the tier a value, and that's literally just the axis set that we did

1959
02:33:28,200 --> 02:33:29,500
just pulling it out.

1960
02:33:30,700 --> 02:33:35,700
And then you also need to pull out eventually the P1, right?

1961
02:33:47,100 --> 02:33:49,600
Since that's going to give us one for each.

1962
02:33:51,500 --> 02:33:53,200
Ray as well, there.

1963
02:33:58,600 --> 02:34:00,300
This needs to be.

1964
02:34:02,800 --> 02:34:07,000
Moved inside temporarily until we want to actually make that.

1965
02:34:10,600 --> 02:34:11,100
Wider.

1966
02:34:16,500 --> 02:34:19,500
So this is pulling out the axis index and then it's pulling out.

1967
02:34:19,500 --> 02:34:23,100
The M 128 F32.

1968
02:34:24,600 --> 02:34:31,500
Of it and it's pulling out the key 4X.

1969
02:34:40,500 --> 02:34:41,500
Get component.

1970
02:34:47,100 --> 02:34:47,400
Right.

1971
02:34:47,400 --> 02:34:52,700
So that's going to get whatever the p-value was for this.

1972
02:34:55,400 --> 02:35:00,000
So, these actually don't have to be done / access, right?

1973
02:35:00,000 --> 02:35:03,000
So this is the only part that we haven't figured out how to do yet to

1974
02:35:03,000 --> 02:35:04,600
produce that signed radius value.

1975
02:35:04,600 --> 02:35:07,100
But everything else is actually just a straightforward.

1976
02:35:08,100 --> 02:35:11,200
Yeah, it's just, it's just a straightforward operation that we don't

1977
02:35:11,200 --> 02:35:13,400
really have to worry about this point.

1978
02:35:13,800 --> 02:35:14,500
So,

1979
02:35:22,100 --> 02:35:23,900
Sorry, and it's not the p-value here.

1980
02:35:23,900 --> 02:35:27,600
In fact, actually, we don't need this at all right.

1981
02:35:27,600 --> 02:35:29,000
That's that's just not relevant.

1982
02:35:29,200 --> 02:35:33,600
So all we really needed to do here was just say to produce the rail

1983
02:35:33,600 --> 02:35:35,600
origin, the local rail origin.

1984
02:35:40,800 --> 02:35:45,800
Which is this part here, that's the part we actually care about that

1985
02:35:45,800 --> 02:35:46,900
relative origin value.

1986
02:35:46,900 --> 02:35:51,500
Just needs to be modified on its way down so this relative origin

1987
02:35:52,000 --> 02:35:57,000
actually becomes the face relative origin, effectively, right?

1988
02:35:57,000 --> 02:35:59,900
Is what we're actually talking about and that's the thing we have

1989
02:36:00,000 --> 02:36:01,100
Actually produce here.

1990
02:36:04,600 --> 02:36:06,000
Because those are two different values.

1991
02:36:08,400 --> 02:36:08,800
Right.

1992
02:36:11,700 --> 02:36:13,000
So that's what we need to do here.

1993
02:36:13,000 --> 02:36:18,600
And this is obviously a 4X here, you know, this is a, this is per axis

1994
02:36:18,700 --> 02:36:22,600
and again, that's going to be something that soups and these are v3's.

1995
02:36:24,600 --> 02:36:25,400
So yeah.

1996
02:36:33,700 --> 02:36:38,600
So we're looking at something like that and this can be done once

1997
02:36:38,600 --> 02:36:41,300
because it's going to be the same for each Ray.

1998
02:36:44,600 --> 02:36:45,100
So

1999
02:36:46,400 --> 02:36:49,600
This is the part that we now need to worry about because we need to be

2000
02:36:49,600 --> 02:36:53,800
able to produce this operation which adjusts the relative origin based

2001
02:36:53,800 --> 02:36:56,000
on which face for on, right?

2002
02:36:59,500 --> 02:37:04,300
So we can actually move some of the stuff down as well.

2003
02:37:04,600 --> 02:37:09,600
So, you know this stuff now can be done sort of inside here.

2004
02:37:15,500 --> 02:37:16,400
What groups?

2005
02:37:18,400 --> 02:37:19,100
Like this.

2006
02:37:27,800 --> 02:37:30,600
so, if you take a look at what's happening inside the re origin,

2007
02:37:30,600 --> 02:37:33,700
radius stuff where we actually pull this stuff out,

2008
02:37:39,000 --> 02:37:40,200
For use later on in here.

2009
02:37:42,000 --> 02:37:44,500
We also need to be able to compute some of this other stuff.

2010
02:37:44,500 --> 02:37:46,300
So we need that.

2011
02:37:46,300 --> 02:37:47,200
Well, no, we don't.

2012
02:37:47,900 --> 02:37:48,700
All right, never mind.

2013
02:37:48,800 --> 02:37:52,400
That's gonna be like, well, we need to compute those, but we don't

2014
02:37:52,400 --> 02:37:53,400
need to compute those.

2015
02:37:56,400 --> 02:37:58,700
Actually, none of that needs to be imputed just box.

2016
02:37:58,700 --> 02:38:00,300
Surface index is the only thing,

2017
02:38:06,100 --> 02:38:06,500
All right.

2018
02:38:06,600 --> 02:38:07,400
Well that's pretty nice.

2019
02:38:08,800 --> 02:38:12,600
Okay, so we need to be able to check this positive value.

2020
02:38:13,000 --> 02:38:16,900
And that's pretty straightforward because it's just a comparison with

2021
02:38:16,900 --> 02:38:19,100
zero, you know, I'm saying.

2022
02:38:20,800 --> 02:38:24,000
So in order to produce a complete set of tests to see whether

2023
02:38:24,000 --> 02:38:27,800
something was positive or not, all we need to do is actually do this

2024
02:38:27,800 --> 02:38:31,000
comparison and we can do it all the way across at once.

2025
02:38:32,300 --> 02:38:35,900
We also don't care about doing it inside here.

2026
02:38:35,900 --> 02:38:39,100
It's actually just a constant value that can be done up at the top,

2027
02:38:39,400 --> 02:38:39,900
right?

2028
02:38:40,200 --> 02:38:42,200
So we can do a v 3 for X.

2029
02:38:43,400 --> 02:38:45,100
That's just whether or not

2030
02:38:46,500 --> 02:38:47,100
You know what?

2031
02:38:47,100 --> 02:38:48,500
We call this positive things.

2032
02:38:48,500 --> 02:38:52,800
So it's like Ray D+, I guess we'll just call it right, Andrei.

2033
02:38:52,800 --> 02:38:56,100
D+ is just like 0 V, 3 for x.

2034
02:38:58,400 --> 02:38:59,600
It's just a comparison.

2035
02:39:00,500 --> 02:39:01,600
With the zero vector.

2036
02:39:04,500 --> 02:39:07,600
So if we take the 4X and we compare it here, we're just going to get

2037
02:39:07,600 --> 02:39:08,200
back a value.

2038
02:39:08,200 --> 02:39:11,400
That just tells us the because they're ready, directions, they don't

2039
02:39:11,400 --> 02:39:12,000
change.

2040
02:39:12,100 --> 02:39:16,300
So we can test a thousand billion trillion boxes with this.

2041
02:39:16,500 --> 02:39:18,900
If long as we're talking about the same redirection, we're always

2042
02:39:18,900 --> 02:39:22,500
going to have the same re positive value, it's never going to change.

2043
02:39:23,200 --> 02:39:25,900
So that's a pretty straightforward pull out, right?

2044
02:39:26,400 --> 02:39:30,300
The same thing is true of the Box surface Index, this is just the same

2045
02:39:30,300 --> 02:39:31,700
stuff, right?

2046
02:39:31,800 --> 02:39:33,800
It doesn't matter which one you're talking about.

2047
02:39:34,000 --> 02:39:37,700
You're always going to get the same box surface value here.

2048
02:39:38,400 --> 02:39:40,500
You're never going to get anything different because you're going to

2049
02:39:40,500 --> 02:39:42,800
or it with the Positive value thing.

2050
02:39:43,100 --> 02:39:45,400
But that again, just doesn't matter.

2051
02:39:47,500 --> 02:39:49,000
So the only thing we really cure in sight.

2052
02:39:49,000 --> 02:39:51,200
In fact, I don't really even need to do this this way.

2053
02:39:51,500 --> 02:39:52,000
Right.

2054
02:39:52,200 --> 02:39:55,100
I could just because this is outside, I could do this the other way,

2055
02:39:55,100 --> 02:39:55,900
at the moment.

2056
02:39:56,000 --> 02:40:00,000
I don't know, maybe we don't want to hard to say, but point being like

2057
02:40:00,000 --> 02:40:00,700
Fox service.

2058
02:40:00,700 --> 02:40:04,600
Index, for example, when we compute that down here, we could just make

2059
02:40:04,600 --> 02:40:05,600
box service index.

2060
02:40:05,600 --> 02:40:09,300
Just get the value by doing the the look up, right?

2061
02:40:12,400 --> 02:40:14,600
Because this stuff is just is just wrote.

2062
02:40:15,100 --> 02:40:16,500
It's just going to be

2063
02:40:19,200 --> 02:40:22,400
Whatever the axis index is so this is for, right.

2064
02:40:24,100 --> 02:40:25,200
It's just going to be whatever.

2065
02:40:25,200 --> 02:40:30,100
I'm sorry 3, this is going to be whatever the axis index is, and then

2066
02:40:30,100 --> 02:40:37,300
it's going to add one based on, whichever one, this is right?

2067
02:40:37,700 --> 02:40:38,300
So

2068
02:40:46,000 --> 02:40:47,900
if you imagine looking at this, this way,

2069
02:40:50,300 --> 02:40:52,400
I guess in here, we also need to see index.

2070
02:40:55,000 --> 02:40:55,800
Something like that.

2071
02:40:58,600 --> 02:41:01,000
And we can also probably figure out a good way to flatten this down as

2072
02:41:01,000 --> 02:41:03,100
well, but if you take a look at this here we just say, alright, the

2073
02:41:03,100 --> 02:41:08,900
Box service index is just something that looks like.

2074
02:41:12,500 --> 02:41:13,600
this actually,

2075
02:41:17,500 --> 02:41:23,400
And then it's depending on whether or not the particular value of this

2076
02:41:23,900 --> 02:41:29,900
thing that we tested, whether that's true or not is just going to be

2077
02:41:30,300 --> 02:41:31,400
what is going to be.

2078
02:41:31,400 --> 02:41:34,500
What tells us whether or not this value should be 0 or 1.

2079
02:41:35,600 --> 02:41:36,300
You know I'm saying?

2080
02:41:40,300 --> 02:41:41,000
so,

2081
02:41:42,400 --> 02:41:44,500
We could actually look at it more like this.

2082
02:41:50,600 --> 02:41:54,900
This is a loop just because a loop that just outside everything else

2083
02:41:55,100 --> 02:41:57,600
because that's going to get really onerous to, right?

2084
02:41:58,200 --> 02:41:59,800
So if we imagine doing it this way,

2085
02:42:09,500 --> 02:42:11,800
Really / VIX Index, and the see you next week.

2086
02:42:11,800 --> 02:42:15,200
And then just say surface into x axis and x and x.

2087
02:42:18,500 --> 02:42:23,600
Equals whatever this thing would we determine here and then we just

2088
02:42:23,600 --> 02:42:26,000
look it up outside, right?

2089
02:42:26,200 --> 02:42:28,500
So now this stuff is just not necessarily more.

2090
02:42:28,500 --> 02:42:32,000
So the only thing we were talking about here is the sine value and the

2091
02:42:32,000 --> 02:42:33,500
sine value we could load as well.

2092
02:42:34,500 --> 02:42:35,100
Outside.

2093
02:42:38,300 --> 02:42:43,200
right, so we can do both of these so in here,

2094
02:42:45,800 --> 02:42:52,400
Excuse me, when I come through, we'll just say, all right, if Ray D+

2095
02:42:53,500 --> 02:43:02,100
.e, accessing, x.m 1/20 32c index, like so.

2096
02:43:03,400 --> 02:43:07,500
So, if this particular value here, actually, I guess it's the you

2097
02:43:07,500 --> 02:43:08,900
three, two one that you want.

2098
02:43:09,600 --> 02:43:10,600
We've done this comparison.

2099
02:43:10,600 --> 02:43:14,500
So we know it will be set to 1 if the ray Direction, was less than it

2100
02:43:14,500 --> 02:43:15,500
will be set to 0.

2101
02:43:16,600 --> 02:43:18,000
If it wasn't.

2102
02:43:18,500 --> 02:43:22,900
And so what we want to know is, was it positive here, right?

2103
02:43:22,900 --> 02:43:24,400
And our definition for positive?

2104
02:43:25,200 --> 02:43:25,900
So I guess what?

2105
02:43:25,900 --> 02:43:27,400
I don't quite understand this.

2106
02:43:27,400 --> 02:43:28,400
Why the rate erection?

2107
02:43:28,400 --> 02:43:30,200
Oh, it's because we're testing is the positive side.

2108
02:43:30,200 --> 02:43:31,500
In that case, I guess, right?

2109
02:43:33,800 --> 02:43:37,500
So if the redirections pointing - then we're testing is the positive

2110
02:43:37,500 --> 02:43:38,100
side.

2111
02:43:39,100 --> 02:43:44,200
So in here we just want to say like okay the Box surface index is

2112
02:43:44,400 --> 02:43:48,100
going to be the axis industry or sorry.

2113
02:43:50,800 --> 02:43:56,800
One, shifted up access index plus r, a positive.

2114
02:43:59,800 --> 02:44:02,800
If it's positive or negative, it's going to be set thusly.

2115
02:44:03,800 --> 02:44:07,100
Now the sine value here is a little more complicated.

2116
02:44:07,300 --> 02:44:08,700
We could just set it manually.

2117
02:44:08,700 --> 02:44:10,300
In fact, we could just do that right now.

2118
02:44:12,400 --> 02:44:16,300
And basically this is, you know, the non Cindy way to do it.

2119
02:44:16,500 --> 02:44:19,000
Since I set the top 13, it probably is a matter that much right now

2120
02:44:19,000 --> 02:44:20,200
but we should fix it.

2121
02:44:22,200 --> 02:44:26,900
Later, obviously, but all we need to do here is just say, in fact, I

2122
02:44:26,900 --> 02:44:29,200
can just make positive be this thing.

2123
02:44:35,500 --> 02:44:36,700
And then just do it like this.

2124
02:44:40,600 --> 02:44:43,300
And again this is Jen just do exactly the same thing as we were doing

2125
02:44:43,300 --> 02:44:43,600
here.

2126
02:44:43,700 --> 02:44:46,400
So I'm just literally copying the code and since its can be pulled out

2127
02:44:46,400 --> 02:44:48,100
to the outside and I don't need to worry about that much.

2128
02:44:48,100 --> 02:44:51,300
Now this can all be made much more efficient by making it actually be

2129
02:44:51,300 --> 02:44:51,800
70.

2130
02:44:55,100 --> 02:44:55,600
In the future.

2131
02:44:55,600 --> 02:44:57,100
But for now, we'll just load it that way.

2132
02:44:57,200 --> 02:44:59,800
So that takes care of all of these things, right?

2133
02:45:00,400 --> 02:45:02,600
And so now we just need to make sure that this stuff works, right?

2134
02:45:02,700 --> 02:45:06,000
So signed radius this case we need to move by the radius.

2135
02:45:06,000 --> 02:45:09,500
So if this is just a multiplication because we know what the radius

2136
02:45:09,500 --> 02:45:11,300
value is, it's the Box radius here.

2137
02:45:12,000 --> 02:45:18,300
So that's really just a case of doing a sub PS to get this.

2138
02:45:19,700 --> 02:45:21,800
It's just doing a sub, like so.

2139
02:45:24,500 --> 02:45:26,300
On the signed radius, right?

2140
02:45:26,300 --> 02:45:28,100
And again, we're adding the sign radius here.

2141
02:45:28,200 --> 02:45:31,300
Now, the signed radius value is something actually to generate.

2142
02:45:31,300 --> 02:45:35,000
So, to produce a sign radius value, we need to multiply the sine X,

2143
02:45:35,000 --> 02:45:38,000
the Box radius, that's easy to do like so.

2144
02:45:39,000 --> 02:45:41,200
And I think now we're gonna have to go through this with a fine-tooth

2145
02:45:41,200 --> 02:45:41,300
comb.

2146
02:45:41,300 --> 02:45:43,400
They do a lot of random stuff in there.

2147
02:45:44,100 --> 02:45:44,500
Is there really?

2148
02:45:44,500 --> 02:45:45,900
No, there was

2149
02:45:56,000 --> 02:45:56,900
Set zero.

2150
02:45:57,000 --> 02:45:57,400
Oh man.

2151
02:45:57,400 --> 02:45:57,800
Okay.

2152
02:46:02,600 --> 02:46:05,500
Because I did a lot of stuff there in probably a bunch of it's wrong,

2153
02:46:05,800 --> 02:46:06,600
so that's fine.

2154
02:46:11,000 --> 02:46:13,200
Let's go ahead and get one of these in here.

2155
02:46:18,100 --> 02:46:21,000
In fact, if we have this, we can just use this for our subtract, for

2156
02:46:21,000 --> 02:46:22,600
our negate actually, as well.

2157
02:46:29,500 --> 02:46:30,100
Oddly enough.

2158
02:46:30,100 --> 02:46:32,600
I think you could just do that since zero is zero.

2159
02:46:32,600 --> 02:46:34,600
So you know, we don't even need to use set zero.

2160
02:46:34,600 --> 02:46:39,500
I suppose although maybe it helps to tell the compiler that I'm not

2161
02:46:39,500 --> 02:46:40,300
entirely sure.

2162
02:46:50,900 --> 02:46:51,500
All right.

2163
02:46:55,800 --> 02:46:59,800
So in this case, I don't think we have that particular operator yet

2164
02:47:00,000 --> 02:47:02,400
for our special CMD type here.

2165
02:47:02,400 --> 02:47:04,700
So I think we can just generate it.

2166
02:47:08,900 --> 02:47:09,600
Like so.

2167
02:47:13,900 --> 02:47:16,700
So if I want a comp less than it's the same as Sir less than or equal

2168
02:47:16,700 --> 02:47:17,900
to effectively.

2169
02:47:22,600 --> 02:47:25,000
This should be an F32 that we're signing.

2170
02:47:29,000 --> 02:47:33,600
We don't have a multiplication for one of these.

2171
02:47:33,900 --> 02:47:39,400
So what's interesting about this is the sine value here.

2172
02:47:43,400 --> 02:47:46,900
Is a straight F32 value.

2173
02:48:07,200 --> 02:48:11,200
So this is not quite correct, right?

2174
02:48:12,200 --> 02:48:14,000
This sign value.

2175
02:48:14,000 --> 02:48:15,800
Multiplication here

2176
02:48:17,100 --> 02:48:22,400
needs to be the same one for the axis.

2177
02:48:37,800 --> 02:48:38,000
Yeah.

2178
02:48:38,000 --> 02:48:41,600
So that actually does have to be inside the axis Loop there because it

2179
02:48:41,600 --> 02:48:41,900
neat.

2180
02:48:41,900 --> 02:48:45,300
That's the, that's the part that makes it dependent on that value.

2181
02:48:48,800 --> 02:48:51,700
Cuz we need to use that specific sign value.

2182
02:48:56,300 --> 02:48:59,600
So it's not dependent on the sea index at all but it is dependent on

2183
02:48:59,600 --> 02:49:02,000
the axis Index, right?

2184
02:49:03,100 --> 02:49:04,400
The rest of the stuff isn't.

2185
02:49:07,100 --> 02:49:08,400
Get the sine value.

2186
02:49:08,500 --> 02:49:11,700
We do actually need to load the appropriate one and use it for

2187
02:49:11,700 --> 02:49:12,400
everything.

2188
02:49:21,900 --> 02:49:22,200
Yeah.

2189
02:49:23,500 --> 02:49:24,200
Yeah.

2190
02:49:28,100 --> 02:49:28,400
Right?

2191
02:49:28,400 --> 02:49:32,300
Because the sine value is only dependent on the axis index.

2192
02:49:58,400 --> 02:50:00,600
Yeah, so those those are I'm conflate.

2193
02:50:00,600 --> 02:50:04,300
I conflated those two indices in my head, right?

2194
02:50:04,400 --> 02:50:08,800
Just because there's three axes, and we can store three in there.

2195
02:50:08,800 --> 02:50:12,300
Doesn't mean that's going to produce the right results across, right?

2196
02:50:12,600 --> 02:50:17,100
So you still do need to have these replicated out, you know what I'm

2197
02:50:17,100 --> 02:50:17,600
saying?

2198
02:50:18,000 --> 02:50:22,900
So, in other words, the Rady positive value is steel per axis.

2199
02:50:24,500 --> 02:50:31,300
Jenna I'm saying and it's just replicated across, you know, it doesn't

2200
02:50:31,300 --> 02:50:36,500
need to be done here but like so the sign right needs to actually be

2201
02:50:36,500 --> 02:50:45,100
replicated out so it's really more like, okay, the sine value.

2202
02:50:49,300 --> 02:50:51,000
For this axis index.

2203
02:50:57,000 --> 02:50:58,300
Needs to be.

2204
02:51:00,200 --> 02:51:01,500
A replication.

2205
02:51:04,500 --> 02:51:11,500
Of the vector that stores yet like each Lanes, sign replicated into

2206
02:51:11,500 --> 02:51:14,500
all three elements.

2207
02:51:15,500 --> 02:51:16,200
Does that make sense?

2208
02:51:16,200 --> 02:51:18,600
Because it's a scalar and I was kind of conflating.

2209
02:51:18,600 --> 02:51:20,800
If I'm like, well, you can store the excess that you can't start The

2210
02:51:20,800 --> 02:51:21,200
Exodus.

2211
02:51:21,200 --> 02:51:25,800
It needs to be looked up by the axis index, just like everyone else

2212
02:51:25,800 --> 02:51:31,600
would have to be so that that was just me kind of again slow morning.

2213
02:51:34,400 --> 02:51:38,900
So this sign value here is going to be per axis index, and when we

2214
02:51:38,900 --> 02:51:45,600
test these positive values, we need to then load this as a three

2215
02:51:45,600 --> 02:51:48,200
element Vector that just gets replicated.

2216
02:51:50,500 --> 02:51:54,200
The sign language web page 31 Vector which then and then we put four

2217
02:51:54,200 --> 02:52:00,100
of those together to produce are our actual value, right?

2218
02:52:01,000 --> 02:52:02,800
So I don't know.

2219
02:52:02,800 --> 02:52:04,900
Where are loading?

2220
02:52:05,200 --> 02:52:06,300
What are loading function?

2221
02:52:06,300 --> 02:52:07,200
Looks like here.

2222
02:52:08,000 --> 02:52:08,900
So it's this

2223
02:52:12,700 --> 02:52:16,000
And so, in order to do that, yeah, I mean, I guess I don't really want

2224
02:52:16,000 --> 02:52:18,500
to load it that way anyway, so I probably would want to just say,

2225
02:52:18,500 --> 02:52:20,000
okay, the sine X and X.

2226
02:52:20,900 --> 02:52:23,200
So for each of these

2227
02:52:25,100 --> 02:52:28,300
Right, the see the element here.

2228
02:52:28,400 --> 02:52:28,800
This is.

2229
02:52:28,800 --> 02:52:29,700
So you can see how this is.

2230
02:52:29,700 --> 02:52:34,300
Just, I was thinking about this in, just a, in a stupid way.

2231
02:52:35,800 --> 02:52:37,400
So ignore this temporarily.

2232
02:52:37,400 --> 02:52:41,500
So if I take a look here at the sign, it has to get loaded as a Nexus

2233
02:52:41,500 --> 02:52:43,100
index and then see an X.

2234
02:52:43,100 --> 02:52:46,100
And then this is actually just going to be

2235
02:52:51,900 --> 02:52:54,300
For any given Lane.

2236
02:53:07,000 --> 02:53:10,500
We're just going to load all positives into the X, the Y, and the Z.

2237
02:53:12,400 --> 02:53:13,900
It's what we actually want to do.

2238
02:53:15,300 --> 02:53:19,600
Which we don't really have a load function for unfortunately.

2239
02:53:24,300 --> 02:53:26,000
But this is actually what we want, right?

2240
02:53:26,000 --> 02:53:29,000
We're trying to load a scalar here if that makes sense.

2241
02:53:29,700 --> 02:53:33,000
And we're trying to load a scalar and the scalar varies per Lane.

2242
02:53:33,900 --> 02:53:37,900
So you know, if we were to have a load function for it,

2243
02:53:39,800 --> 02:53:44,000
So you can see here like here's one that's the same across all lanes

2244
02:53:45,200 --> 02:53:49,400
and what we would really have is something that was more like this, a

2245
02:53:49,400 --> 02:53:51,500
different scalar per Lane.

2246
02:53:57,500 --> 02:53:58,300
Like that.

2247
02:53:59,600 --> 02:53:59,800
And so,

2248
02:54:00,000 --> 02:54:03,800
In this case, we would say like okay yeah, you know.

2249
02:54:05,900 --> 02:54:08,800
It varies across liens, it does not vary.

2250
02:54:10,100 --> 02:54:11,200
Across elements.

2251
02:54:12,100 --> 02:54:16,000
So, the X, the Y, and the Z of each lane is the same, but every lane

2252
02:54:16,000 --> 02:54:18,100
has its own distinct value.

2253
02:54:19,800 --> 02:54:22,200
So that's what we were doing here since we're doing it inside a loop.

2254
02:54:22,200 --> 02:54:24,700
We're not actually going to call that but that is the load.

2255
02:54:24,700 --> 02:54:25,400
That is the load.

2256
02:54:25,400 --> 02:54:28,300
We're actually doing this one, loads the full set.

2257
02:54:28,300 --> 02:54:35,400
This one load scalars in two lanes, this one loads scalars replicated,

2258
02:54:37,200 --> 02:54:40,800
and so that's why I was kind of weird thinking in my head just the

2259
02:54:42,400 --> 02:54:45,700
Arrangements of the values were bizarre there.

2260
02:54:47,400 --> 02:54:49,900
So, here, when we come through here and we want to settle these

2261
02:54:49,900 --> 02:54:52,200
values, you know, that's all well and good.

2262
02:54:53,300 --> 02:54:57,800
And we can sort of set the sign for the actual Rady positive value,

2263
02:54:57,800 --> 02:55:01,800
where I do this comparison here and now I know whether it's positive

2264
02:55:01,800 --> 02:55:07,700
or not, I don't know whether that is ever used.

2265
02:55:09,800 --> 02:55:12,500
So I think it's just just for that testing, right?

2266
02:55:17,200 --> 02:55:20,600
Yeah, so we only really need that here.

2267
02:55:20,700 --> 02:55:23,700
Let's let's again let's let's make this a little bit more concise

2268
02:55:23,700 --> 02:55:24,100
here.

2269
02:55:33,500 --> 02:55:36,200
And let's just do this, exactly, the way we were doing it before, just

2270
02:55:36,200 --> 02:55:38,300
so we know, just because that was a little confusing.

2271
02:55:38,300 --> 02:55:40,300
I want to take that out of the equation for now.

2272
02:55:40,700 --> 02:55:43,100
So here is, you know what we were doing?

2273
02:55:47,000 --> 02:55:49,200
So that part we really don't need to do because it just happens right

2274
02:55:49,200 --> 02:55:49,800
there, right?

2275
02:55:49,800 --> 02:55:52,600
But this part will keep the same way that we were doing it before.

2276
02:55:53,500 --> 02:55:55,200
So now the Box surface index

2277
02:55:59,300 --> 02:56:04,100
again, same as it was before, positive value gets tested as the Rady

2278
02:56:04,100 --> 02:56:04,700
value.

2279
02:56:05,300 --> 02:56:06,000
Like so,

2280
02:56:08,100 --> 02:56:11,000
And so this would set our two things that we actually are trying to

2281
02:56:11,000 --> 02:56:11,500
keep.

2282
02:56:13,700 --> 02:56:15,200
And for now we won't bother with that one.

2283
02:56:21,400 --> 02:56:22,000
Right?

2284
02:56:22,100 --> 02:56:29,100
So setting, this is going to be 20s trips.

2285
02:56:36,500 --> 02:56:37,800
So setting that sign value.

2286
02:56:37,800 --> 02:56:41,600
I think is loaded correctly now and that should be it.

2287
02:56:41,600 --> 02:56:42,500
I believe.

2288
02:56:44,700 --> 02:56:45,200
Okay.

2289
02:56:47,100 --> 02:56:50,000
So now yeah, we may need to do the sign a little bit differently

2290
02:56:50,000 --> 02:56:50,200
there.

2291
02:56:50,200 --> 02:56:51,900
I'm not sure exactly how we want to do that.

2292
02:56:55,500 --> 02:56:58,200
But just looking at how the sine value gets multiplied now.

2293
02:56:58,200 --> 02:56:59,800
Yeah, maybe we want to set that as something else.

2294
02:57:00,100 --> 02:57:05,600
But so let's cross that bridge in a second, when we come to it, I'm

2295
02:57:05,600 --> 02:57:06,900
going to look at the other part of it.

2296
02:57:06,900 --> 02:57:09,100
Now here, and I don't need to know where all of those are.

2297
02:57:09,100 --> 02:57:10,100
Thank you very much though.

2298
02:57:13,900 --> 02:57:19,000
And so I think we don't have a divided here, do we?

2299
02:57:22,300 --> 02:57:22,600
See.

2300
02:57:24,900 --> 02:57:25,300
We do.

2301
02:57:28,900 --> 02:57:29,400
Undeclared.

2302
02:57:29,400 --> 02:57:32,300
It facial origin taxis.

2303
02:57:37,400 --> 02:57:37,900
All right.

2304
02:57:37,900 --> 02:57:38,400
So yeah.

2305
02:57:38,400 --> 02:57:39,900
Face real origin axes.

2306
02:57:40,000 --> 02:57:42,700
Like I said this was just a wrong way to think about this, this is

2307
02:57:42,700 --> 02:57:45,000
actually does have to get done / axis.

2308
02:57:45,100 --> 02:57:45,600
I don't know why.

2309
02:57:45,600 --> 02:57:49,100
I was thinking I for some reason just like the I forgot like there's

2310
02:57:49,100 --> 02:57:51,700
an XYZ to each of these so I don't know why I was thinking in my head

2311
02:57:51,700 --> 02:57:52,200
like

2312
02:57:55,300 --> 02:57:58,400
Wait, no, am I I need to draw this out.

2313
02:57:58,400 --> 02:58:00,500
Like, this is definitely exceeded my brain capacity.

2314
02:58:00,500 --> 02:58:01,000
This morning.

2315
02:58:02,000 --> 02:58:04,000
These were acts of slices, though.

2316
02:58:04,000 --> 02:58:06,200
We were just doing them per axis.

2317
02:58:19,500 --> 02:58:19,700
No.

2318
02:58:19,700 --> 02:58:22,500
I mean you did so you need to track all three values so it is still

2319
02:58:22,500 --> 02:58:23,100
that way.

2320
02:58:23,200 --> 02:58:27,600
Yeah, tear a on the other hand that one is one that could be done the

2321
02:58:27,600 --> 02:58:28,600
whole way round.

2322
02:58:29,000 --> 02:58:29,600
Right.

2323
02:58:29,900 --> 02:58:34,400
So tear, a is actually correct, tear, a is something that could be

2324
02:58:34,400 --> 02:58:36,000
done the whole way round.

2325
02:58:41,100 --> 02:58:44,000
Because it's only slicing it right.

2326
02:58:44,100 --> 02:58:50,400
The problem is, it depends on Rel origin and real origin doesn't work

2327
02:58:50,400 --> 02:58:51,000
that way.

2328
02:58:55,000 --> 02:58:55,700
I don't think.

2329
02:59:29,000 --> 02:59:31,900
Also, the ray position is actually produced here.

2330
02:59:37,200 --> 02:59:39,100
So it could have actually just been stored.

2331
02:59:47,900 --> 02:59:48,700
Am I right?

2332
03:00:03,300 --> 03:00:04,200
so, I believe

2333
03:00:10,900 --> 03:00:11,600
That.

2334
03:00:12,700 --> 03:00:14,100
Obviously need for that.

2335
03:00:19,700 --> 03:00:20,600
Alright.

2336
03:00:21,700 --> 03:00:25,500
Alright, so again taking a look at this here.

2337
03:00:25,500 --> 03:00:31,100
So we need the face relative origin and the face relative or should

2338
03:00:31,100 --> 03:00:33,500
just does change per axis.

2339
03:00:34,700 --> 03:00:38,800
So that's why the face relative origin value.

2340
03:00:38,800 --> 03:00:42,000
Still has to be computed in here.

2341
03:00:46,800 --> 03:00:47,300
Right?

2342
03:00:47,500 --> 03:00:49,200
So you take all four lanes.

2343
03:00:49,200 --> 03:00:54,200
At once, you have to do the relative origin - the sign for this axis

2344
03:00:54,200 --> 03:00:55,300
X, the Box radius.

2345
03:00:55,300 --> 03:00:59,900
That's the only way to produce the actual relative origin for all four

2346
03:00:59,900 --> 03:01:07,000
raised for this particular axis and then unfortunately tear a axis

2347
03:01:07,700 --> 03:01:09,700
doesn't is smacked us.

2348
03:01:09,700 --> 03:01:13,600
Whether we wish we could do that here, but we can't really write.

2349
03:01:13,600 --> 03:01:15,900
We wish we could do it outside but we can't.

2350
03:01:15,900 --> 03:01:16,500
Because it

2351
03:01:16,600 --> 03:01:22,700
Hires us to know the relative origin, which is kind of cross axis in

2352
03:01:22,700 --> 03:01:23,400
this case.

2353
03:01:25,700 --> 03:01:28,000
And I don't see any getting around that, right?

2354
03:01:36,700 --> 03:01:39,500
So, you know, that's just the way it goes sometimes.

2355
03:01:40,400 --> 03:01:43,300
So tear a is actually an M1 28.

2356
03:01:43,300 --> 03:01:44,200
In this case

2357
03:01:55,100 --> 03:01:56,300
and,

2358
03:01:58,900 --> 03:02:00,900
you know, it can be pulled out here.

2359
03:02:03,400 --> 03:02:04,100
so,

2360
03:02:05,800 --> 03:02:09,100
That will pull the tyria and let us continue in our regular scalar

2361
03:02:09,100 --> 03:02:09,700
form.

2362
03:02:11,200 --> 03:02:14,900
So we just need these two to operate properly here.

2363
03:02:15,900 --> 03:02:19,400
In order to for these operate properly, like I said, they have to kind

2364
03:02:19,400 --> 03:02:20,500
of be practicing text.

2365
03:02:20,500 --> 03:02:24,900
So if you look at how T re has to work, it's got to pull out the X,

2366
03:02:24,900 --> 03:02:26,300
the, the y or the Z.

2367
03:02:26,300 --> 03:02:29,100
So it does have to do you know this

2368
03:02:34,400 --> 03:02:34,800
Oops.

2369
03:03:11,400 --> 03:03:15,900
And so we can just compute tear a Forex directly there and we should

2370
03:03:15,900 --> 03:03:18,000
be good to go now.

2371
03:03:19,700 --> 03:03:21,000
Yes, thank you for telling me.

2372
03:03:23,300 --> 03:03:24,600
so, taking a look at,

2373
03:03:26,900 --> 03:03:28,500
The rest of the code here.

2374
03:03:37,400 --> 03:03:38,800
What else do we care about?

2375
03:03:47,400 --> 03:03:50,000
So yeah.

2376
03:04:01,500 --> 03:04:03,000
That's correct there.

2377
03:04:10,600 --> 03:04:14,900
And so looking at the last of this here, so face relative origin.

2378
03:04:18,200 --> 03:04:23,200
Which is the same across all Lanes, the tear a in this case would need

2379
03:04:23,200 --> 03:04:24,800
to be replicated up.

2380
03:04:28,100 --> 03:04:31,100
and maybe so we just want that to be a replicated value of trying to

2381
03:04:31,100 --> 03:04:35,300
see where else that gets used times the rate erection

2382
03:04:37,000 --> 03:04:38,600
Again, that's a 4 x value.

2383
03:04:39,400 --> 03:04:41,400
So, really tear a, in this case,

2384
03:04:43,100 --> 03:04:46,500
We could just do it as a thing that was replicated out.

2385
03:04:49,500 --> 03:04:51,600
And we made us want to do that.

2386
03:04:58,400 --> 03:05:02,700
Yeah, so if you look here, we've also got like our, you know, our box

2387
03:05:02,700 --> 03:05:04,100
radius for example.

2388
03:05:05,500 --> 03:05:06,700
So in this case,

2389
03:05:08,200 --> 03:05:14,800
I think we can just leave that doing exactly what it was doing, so the

2390
03:05:14,800 --> 03:05:19,600
Box radius value in this case, in fact, we can just

2391
03:05:23,100 --> 03:05:23,700
Grab it.

2392
03:05:29,400 --> 03:05:30,000
Here.

2393
03:05:35,200 --> 03:05:38,300
And then we really now just have to deal with this one line.

2394
03:05:38,300 --> 03:05:39,200
I think that's it.

2395
03:05:42,500 --> 03:05:45,000
so it's that and well and okay in the T-Rex

2396
03:05:47,500 --> 03:05:48,000
So yeah.

2397
03:05:48,000 --> 03:05:51,000
So we want to be able to do face real origin times, the T values, the

2398
03:05:51,000 --> 03:05:53,500
T value really wants to remain replicated.

2399
03:05:59,200 --> 03:05:59,900
if you look at,

2400
03:06:01,000 --> 03:06:01,600
Here.

2401
03:06:03,200 --> 03:06:07,500
Producing this tier a value if we were to do this way.

2402
03:06:08,000 --> 03:06:13,900
So we were to say, okay, let's produce the tear a 4 x value as

2403
03:06:13,900 --> 03:06:16,100
something that's replicated across.

2404
03:06:18,100 --> 03:06:20,400
then what we can do is,

2405
03:06:21,600 --> 03:06:27,200
Just Produce the values and then Loft them up.

2406
03:06:32,500 --> 03:06:37,200
this is going to produce the lane so we really just need, you know,

2407
03:06:44,000 --> 03:06:44,900
The sort of thing.

2408
03:06:51,900 --> 03:06:53,100
So we've got this call.

2409
03:06:56,300 --> 03:06:58,000
And I'm just talking about this call.

2410
03:07:13,800 --> 03:07:14,300
Right.

2411
03:07:14,800 --> 03:07:19,200
And this could be written more concisely this way.

2412
03:07:22,400 --> 03:07:23,800
Because this is all the same value.

2413
03:07:27,800 --> 03:07:32,100
So, we could do something like that and then tear a 4X.

2414
03:07:33,800 --> 03:07:38,400
is what you would expect now and here where we're pulling out

2415
03:07:38,400 --> 03:07:43,200
something on a lane, we don't care which one so now because the X y&z

2416
03:07:43,200 --> 03:07:47,900
all have the same value, because the scaler effectively

2417
03:07:49,400 --> 03:07:52,300
So we can just use that and off we go.

2418
03:07:52,900 --> 03:07:56,500
Now we could introduce another type which would kind of be nice here

2419
03:07:56,500 --> 03:07:59,800
probably which is just an F32 for X.

2420
03:08:00,300 --> 03:08:03,800
You don't have one of those yet and we probably should and that's how

2421
03:08:03,800 --> 03:08:05,700
that would work and we could try that in a second.

2422
03:08:06,800 --> 03:08:09,200
So we really are down to just this guy now.

2423
03:08:36,400 --> 03:08:37,800
Yeah, and so, yeah.

2424
03:08:37,800 --> 03:08:39,100
So you can see what the problem is here.

2425
03:08:39,100 --> 03:08:42,000
So if I actually do that Loft, then it doesn't know what to do here

2426
03:08:42,000 --> 03:08:43,300
because this is a vector multiply.

2427
03:08:43,300 --> 03:08:46,000
So it's like, what kind of multiply when I be doing hadamard product

2428
03:08:46,000 --> 03:08:48,500
dot product cross product, right?

2429
03:08:49,400 --> 03:08:54,000
So that's why it would help if we had the interior type, you know I'm

2430
03:08:54,000 --> 03:08:54,400
saying?

2431
03:08:55,300 --> 03:08:59,800
So if instead here we were to say, okay we've got a F32 for X which is

2432
03:09:00,000 --> 03:09:01,500
Part that we didn't have before.

2433
03:09:04,300 --> 03:09:05,600
That would be kind of nice.

2434
03:09:05,900 --> 03:09:07,900
So then we just have, you know,

2435
03:09:19,100 --> 03:09:19,900
something like this.

2436
03:09:24,000 --> 03:09:26,100
See the packed value and an e value.

2437
03:09:26,600 --> 03:09:30,300
So and then we can just Define these operators.

2438
03:09:30,300 --> 03:09:33,500
So now this becomes like a lot clearer what's going on, right?

2439
03:09:33,800 --> 03:09:36,100
So this is just an F32 4X.

2440
03:09:36,100 --> 03:09:37,300
It's a scalar value.

2441
03:09:38,600 --> 03:09:42,600
You know, I'm saying and then this can be written naturally as well.

2442
03:09:42,800 --> 03:09:44,300
It can be negative face.

2443
03:09:44,300 --> 03:09:46,300
Real origin /.

2444
03:09:52,700 --> 03:09:55,000
Ready for X, right?

2445
03:09:58,500 --> 03:10:02,000
Because now we can define those operations in here and they'll just

2446
03:10:02,000 --> 03:10:02,300
work.

2447
03:10:03,200 --> 03:10:07,200
Now, what we want to do here is say that this, by the way, you know,

2448
03:10:07,200 --> 03:10:09,000
is one of these values, right?

2449
03:10:11,100 --> 03:10:16,000
Like so, and in fact, if we could just say this was a union, it's a

2450
03:10:16,000 --> 03:10:22,100
little dicey to do that but we could do it that way so that, you know,

2451
03:10:22,100 --> 03:10:23,400
it had either of those two.

2452
03:10:23,600 --> 03:10:26,100
But yeah, I'm not sure if I really wanna do that.

2453
03:10:26,700 --> 03:10:30,800
So anyway, yet if you, if you look at how that's going to go here,

2454
03:10:30,800 --> 03:10:34,000
then what you could do is you can translate all of these into actual

2455
03:10:34,000 --> 03:10:37,800
operations on the F32 version, right?

2456
03:10:37,800 --> 03:10:40,700
So we can kind of do that slowly but you'll see what I mean.

2457
03:10:40,900 --> 03:10:41,300
Second.

2458
03:10:47,700 --> 03:10:50,300
That's also what the sign ja you would become.

2459
03:10:51,200 --> 03:10:55,900
So here's an F 3 to 4X of the sine value and that way when we do it

2460
03:10:55,900 --> 03:11:00,100
this way, we don't have to load it like that we can just say OK the

2461
03:11:00,100 --> 03:11:06,400
sine value for this axis index is going to be loaded, you know?

2462
03:11:08,800 --> 03:11:13,900
Just just one value is going to be loaded in there and and then we can

2463
03:11:14,900 --> 03:11:19,300
set that the way we would want to and I did it this way as well.

2464
03:11:19,300 --> 03:11:21,900
So we could actually just have it be set directly.

2465
03:11:22,300 --> 03:11:23,800
So the sine value.

2466
03:11:26,400 --> 03:11:30,800
Can be can be accessed the way you would expect and that that's much

2467
03:11:30,800 --> 03:11:31,200
nicer.

2468
03:11:31,200 --> 03:11:32,400
That cleans things up quite a bit.

2469
03:11:32,400 --> 03:11:36,200
In fact I should have done that at the outset but I didn't for

2470
03:11:36,200 --> 03:11:36,900
whatever reason

2471
03:11:40,300 --> 03:11:40,600
Yeah.

2472
03:11:44,100 --> 03:11:45,700
So, moving on.

2473
03:11:47,000 --> 03:11:52,000
What we would want to do now is just clean up the way that this part

2474
03:11:52,000 --> 03:11:52,700
is working here.

2475
03:11:52,700 --> 03:11:57,900
So sine value X Box radius like that multiplication as to be defined

2476
03:11:58,600 --> 03:11:59,900
the same as to be true for these.

2477
03:12:00,400 --> 03:12:04,100
Divides here, but that's mostly all we're talking about.

2478
03:12:05,400 --> 03:12:08,100
So let me go ahead and Implement those.

2479
03:12:08,900 --> 03:12:14,700
If we want to do our negation it's the same thing we already did.

2480
03:12:15,600 --> 03:12:17,400
So here's write this thing.

2481
03:12:21,600 --> 03:12:23,500
If we want to do our negation, we can just go.

2482
03:12:23,500 --> 03:12:26,800
Alright, our F32 4X.

2483
03:12:34,100 --> 03:12:35,400
Our result p.

2484
03:12:38,400 --> 03:12:41,200
In this case, is just going to be.

2485
03:12:49,200 --> 03:12:50,500
Whatever the input was.

2486
03:12:51,500 --> 03:12:52,600
With a sub PS.

2487
03:12:57,200 --> 03:12:58,400
On 0, right?

2488
03:12:58,600 --> 03:13:01,200
This is going to take whatever that input was and it's going to do the

2489
03:13:01,200 --> 03:13:01,900
operation.

2490
03:13:04,800 --> 03:13:06,800
And so the same thing we could actually do that.

2491
03:13:06,800 --> 03:13:09,200
Same thing here, you know, if we want to then start writing these in

2492
03:13:09,200 --> 03:13:13,600
terms of each other, we could, I'm not sure we want to do that just

2493
03:13:13,600 --> 03:13:14,100
yet.

2494
03:13:14,700 --> 03:13:18,300
But again, then you can actually have all of the operations that you

2495
03:13:18,300 --> 03:13:19,700
would normally have as well.

2496
03:13:21,600 --> 03:13:24,800
But then you can have the cross ones in addition.

2497
03:13:25,000 --> 03:13:29,400
So, if I have a V3 for X, for example, and I want to Define what

2498
03:13:29,400 --> 03:13:35,200
happens when we multiply a scalar times a vector,

2499
03:13:36,600 --> 03:13:39,000
we just can and that just works.

2500
03:13:39,200 --> 03:13:42,100
So I can say, all right, the result value.

2501
03:13:52,000 --> 03:13:56,100
In this case is just going to be a multiplication.

2502
03:14:02,900 --> 03:14:05,600
And it's always going to use the same value from a because it's a

2503
03:14:05,600 --> 03:14:11,400
scalar, but it's going to Loop over the different dimensions of be,

2504
03:14:11,600 --> 03:14:11,900
right?

2505
03:14:11,900 --> 03:14:15,900
So that defines that operation here that we needed so that that can

2506
03:14:15,900 --> 03:14:17,400
just happen, right?

2507
03:14:17,400 --> 03:14:19,100
So we can get this to work now.

2508
03:14:20,300 --> 03:14:24,400
Obviously, we need to pull out the axis index, one of them, whichever

2509
03:14:24,400 --> 03:14:26,000
one was proper appropriate for the X and X.

2510
03:14:26,000 --> 03:14:27,600
But other than that, we're done, right?

2511
03:14:29,000 --> 03:14:31,800
So then here, we've got another problem.

2512
03:14:32,000 --> 03:14:35,800
We've got to what is this, binary?

2513
03:14:36,000 --> 03:14:40,000
What, where are you seeing a binary -

2514
03:14:47,000 --> 03:14:50,700
I wouldn't have called that a binary -, to be honest with you, but,

2515
03:14:50,700 --> 03:14:54,500
okay, that looks like a unary minus to me.

2516
03:15:02,100 --> 03:15:06,100
So not sure why you said binary, but it's okay, first of all just, you

2517
03:15:06,100 --> 03:15:07,100
know, it's fine.

2518
03:15:08,900 --> 03:15:11,600
So when we take a look at what happened, what's going to happen here?

2519
03:15:11,700 --> 03:15:13,900
We've had a innie operator.

2520
03:15:16,000 --> 03:15:17,500
For rv3 for X's.

2521
03:15:18,200 --> 03:15:21,400
So I'm going to try what happens if we just say that gives you back an

2522
03:15:21,400 --> 03:15:23,600
F32 for X, right?

2523
03:15:25,000 --> 03:15:29,200
So then we take a look here and are divided as busted because, you

2524
03:15:29,200 --> 03:15:33,500
know, we've got a workout, we're going to do there, but that's okay.

2525
03:15:33,900 --> 03:15:36,700
And then let's see what else we got.

2526
03:15:36,700 --> 03:15:44,800
Okay, so our kirei for X, we pull out our x value, not a member of

2527
03:15:44,800 --> 03:15:45,300
F32.

2528
03:15:45,300 --> 03:15:46,200
That's true.

2529
03:15:48,000 --> 03:15:48,900
This we fixed.

2530
03:15:48,900 --> 03:15:50,400
So now we can just pull out the value.

2531
03:15:50,400 --> 03:15:53,000
Normally this is making it much cleaner should have done this a long

2532
03:15:53,000 --> 03:15:53,600
time ago.

2533
03:15:53,700 --> 03:15:59,200
I apologize for not doing so and then, I think we're pretty much done,

2534
03:15:59,200 --> 03:15:59,700
right?

2535
03:15:59,900 --> 03:16:05,100
So tear a 4X times, raid d4x.

2536
03:16:08,200 --> 03:16:12,800
I thought we did multiplication of a V4 of a V3.

2537
03:16:29,400 --> 03:16:31,700
So right, that's an extraction.

2538
03:16:32,800 --> 03:16:38,900
So in this case, where we've created this, we can produce the rapey

2539
03:16:38,900 --> 03:16:40,700
value up here.

2540
03:16:41,900 --> 03:16:42,700
Like so,

2541
03:16:43,800 --> 03:16:45,600
With a rapey 4 x value.

2542
03:16:46,700 --> 03:16:48,500
And then in here, we can pull it out.

2543
03:16:53,200 --> 03:16:53,600
Right.

2544
03:16:53,600 --> 03:16:56,300
So yeah, if you take a look, what has to happen there.

2545
03:16:57,500 --> 03:17:00,100
Also, I don't know that Ray origin needs to get pulled out anymore.

2546
03:17:01,400 --> 03:17:02,300
And neither is this.

2547
03:17:06,100 --> 03:17:06,400
Right?

2548
03:17:06,400 --> 03:17:09,800
Because we can produce the whole thing at once.

2549
03:17:18,600 --> 03:17:22,200
So if we have the P4 value of the, sorry that's a getcomponent call

2550
03:17:22,600 --> 03:17:23,900
because it's a slice wise.

2551
03:17:24,600 --> 03:17:25,000
So

2552
03:17:29,400 --> 03:17:32,600
And then we've got our divide, which we haven't implemented yet.

2553
03:17:34,700 --> 03:17:40,000
So that's a divided between two scalar values, which now we do have

2554
03:17:40,000 --> 03:17:44,600
the ability to properly represent.

2555
03:17:52,800 --> 03:17:59,800
And so there's our times there is so here is our

2556
03:18:00,400 --> 03:18:01,800
No, that's not.

2557
03:18:01,900 --> 03:18:02,800
No, no, no, no.

2558
03:18:02,800 --> 03:18:03,500
It's the other one.

2559
03:18:04,000 --> 03:18:05,800
I should organize these a second here.

2560
03:18:05,800 --> 03:18:06,300
There we go.

2561
03:18:07,800 --> 03:18:12,100
so if I want to do divide here actually this is not what I wanted

2562
03:18:12,100 --> 03:18:16,100
either just wanted to basic times there guys

2563
03:18:19,700 --> 03:18:22,200
You're not have any operators between these, I'll be I guess we don't

2564
03:18:22,200 --> 03:18:22,600
have any.

2565
03:18:22,900 --> 03:18:25,200
All right, well, this is our first operator then.

2566
03:18:45,900 --> 03:18:49,400
So what you can see all I'm doing here is just making something that

2567
03:18:49,400 --> 03:18:50,900
does these operations.

2568
03:18:56,700 --> 03:18:58,900
In scalar form there, right?

2569
03:18:59,900 --> 03:19:03,300
So now we're compiling but you know, hey we just went willy-nilly on

2570
03:19:03,300 --> 03:19:05,600
this, so we're going to have to step through it here and see what

2571
03:19:05,600 --> 03:19:06,100
we're doing.

2572
03:19:07,500 --> 03:19:10,500
So and I am not in debug mode.

2573
03:19:10,600 --> 03:19:13,000
I want to inspect all these

2574
03:19:14,200 --> 03:19:14,700
There we go.

2575
03:19:18,600 --> 03:19:23,900
so in here, if I you know, start taking a look

2576
03:19:29,200 --> 03:19:33,200
Like so, so we've got sign values.

2577
03:19:35,000 --> 03:19:38,100
And box surface indices that we want to produce.

2578
03:19:38,200 --> 03:19:41,200
So I'm just going to make sure that those get produced correctly.

2579
03:19:41,800 --> 03:19:44,200
So here's our BarkBox service indices.

2580
03:19:44,300 --> 03:19:46,000
And, you know, their plausible.

2581
03:19:46,000 --> 03:19:47,000
Do I know if they're right.

2582
03:19:47,000 --> 03:19:49,100
No, but they're plausible, so that's good.

2583
03:19:50,900 --> 03:19:53,800
R sine values, look right or reasonable anyway.

2584
03:19:55,600 --> 03:19:57,300
So that looks okay.

2585
03:19:59,300 --> 03:20:03,100
We know that this stuff was okay or at least we don't have any reason

2586
03:20:03,100 --> 03:20:06,400
to suspect it being that we broke it in any particular way.

2587
03:20:07,200 --> 03:20:09,000
But then we're going to get down here and we don't really know what's

2588
03:20:09,000 --> 03:20:10,100
going on down here, right?

2589
03:20:11,800 --> 03:20:14,100
So the first thing we need to do is produce the face relative origin.

2590
03:20:14,100 --> 03:20:17,700
That's by taking the relative origin and moving in the opposite

2591
03:20:17,700 --> 03:20:18,700
direction Here.

2592
03:20:18,900 --> 03:20:19,900
Sign wise.

2593
03:20:21,200 --> 03:20:25,300
So really this sign we could just make this a plus and negate.

2594
03:20:25,700 --> 03:20:26,600
The direction of the sign.

2595
03:20:27,000 --> 03:20:30,000
We don't have to for any particular reason but just worth noting that

2596
03:20:30,000 --> 03:20:31,100
we could have done that.

2597
03:20:31,400 --> 03:20:34,200
Right the sign isn't it used for anything else?

2598
03:20:34,200 --> 03:20:37,400
So it probably doesn't matter but that's the way that goes.

2599
03:20:37,800 --> 03:20:39,900
So we're going to use to face relative origin by starting at the

2600
03:20:39,900 --> 03:20:41,000
relative origin.

2601
03:20:42,100 --> 03:20:46,600
And then just moving outwards along the radius to wherever we actually

2602
03:20:46,600 --> 03:20:48,200
needed to go, right?

2603
03:20:56,000 --> 03:20:59,000
Although wait, that's not correct either.

2604
03:20:59,200 --> 03:20:59,700
So

2605
03:21:00,000 --> 03:21:04,600
Fox radius needs to just be

2606
03:21:10,000 --> 03:21:13,100
Right, this needs to only operate on.

2607
03:21:13,100 --> 03:21:18,100
Just just the one component here, so

2608
03:21:20,400 --> 03:21:22,400
That's that's incorrect again.

2609
03:21:22,400 --> 03:21:24,500
That was just when I'd gotten confused there.

2610
03:21:25,000 --> 03:21:29,000
I made some stupid assumptions about which way we were.

2611
03:21:29,000 --> 03:21:29,900
Slicing this data.

2612
03:21:30,000 --> 03:21:30,700
It was just dumb.

2613
03:21:33,600 --> 03:21:39,300
We only want to add one slice of this, right?

2614
03:21:39,600 --> 03:21:45,400
So we want to take the face relative origin here like so and what we

2615
03:21:45,400 --> 03:21:49,800
want to do is take just one slice of it, whichever the axis indexes

2616
03:21:49,800 --> 03:21:55,000
that we're talking about and just that axis index, we want to subtract

2617
03:21:55,000 --> 03:22:00,100
away, whatever the Box radius was for that.

2618
03:22:01,100 --> 03:22:01,600
Right?

2619
03:22:02,100 --> 03:22:05,000
So we're trying to do this is what we're trying to do there.

2620
03:22:05,000 --> 03:22:08,200
We're trying to take the relative origin and just move it, right?

2621
03:22:08,200 --> 03:22:14,100
We're just trying to move it based on the axis that we're on.

2622
03:22:14,600 --> 03:22:16,800
Now, I think we could probably do that more efficiently.

2623
03:22:16,800 --> 03:22:19,200
Like that's probably not the right way to do it.

2624
03:22:19,200 --> 03:22:20,300
It's a right way to do.

2625
03:22:20,300 --> 03:22:22,000
It is probably to look at what we were using.

2626
03:22:22,000 --> 03:22:26,700
The face relative origin for and try to adjust that value.

2627
03:22:26,700 --> 03:22:28,700
Maybe a little bit differently, I'm not sure.

2628
03:22:29,800 --> 03:22:30,800
But you can see here that these

2629
03:22:30,900 --> 03:22:35,000
Are all based on the axis index in this case, right?

2630
03:22:44,700 --> 03:22:48,700
And then we compute the actual final location of the ray here, and

2631
03:22:48,700 --> 03:22:50,000
that should still be right.

2632
03:22:53,300 --> 03:22:55,600
Now mind you, we don't actually have to do it this way.

2633
03:22:55,900 --> 03:22:56,600
So

2634
03:23:00,700 --> 03:23:02,600
Again, it's really tempting.

2635
03:23:03,500 --> 03:23:04,800
Maybe I wasn't wrong.

2636
03:23:04,800 --> 03:23:05,600
The first time

2637
03:23:08,800 --> 03:23:12,500
It's since we don't actually ever need the facial active origin,

2638
03:23:12,500 --> 03:23:12,700
right?

2639
03:23:12,700 --> 03:23:17,000
Because let's say we just want to produce the where the ray will land,

2640
03:23:17,400 --> 03:23:18,000
right?

2641
03:23:18,500 --> 03:23:21,500
If we all just want to produce where the ray will land, well, we can

2642
03:23:21,500 --> 03:23:27,300
just use the original Ray origin because once we know the T value, it

2643
03:23:27,300 --> 03:23:30,400
doesn't matter where we start from we, it doesn't matter which

2644
03:23:30,400 --> 03:23:31,200
coordinate system.

2645
03:23:31,200 --> 03:23:32,000
We do it in.

2646
03:23:32,900 --> 03:23:33,500
Right.

2647
03:23:36,800 --> 03:23:40,600
So, we can produce that Ray value here, right?

2648
03:23:40,600 --> 03:23:41,400
If we want to.

2649
03:23:41,600 --> 03:23:46,600
So the problem that we actually have is that when we come down here to

2650
03:23:46,600 --> 03:23:53,900
use, this re P value, this re P value needs to be based on whatever

2651
03:23:53,900 --> 03:23:54,500
the

2652
03:23:58,300 --> 03:23:59,800
this, this one needs to be based.

2653
03:24:00,100 --> 03:24:04,500
On whatever the relative origin was because it has to have its an

2654
03:24:04,500 --> 03:24:05,900
actually using the P value.

2655
03:24:05,900 --> 03:24:08,700
And that P value needs to be relative to the origin of the box.

2656
03:24:09,900 --> 03:24:10,400
Right.

2657
03:24:12,500 --> 03:24:13,700
That was how this worked.

2658
03:24:15,100 --> 03:24:17,900
So that was the reason that we needed to use the relative origin

2659
03:24:17,900 --> 03:24:18,300
there.

2660
03:24:18,300 --> 03:24:23,500
And I guess that's also why this rapey value can't be the same, right?

2661
03:24:25,300 --> 03:24:26,200
Unfortunately.

2662
03:24:29,900 --> 03:24:33,000
because this is really a relative one and this is an absolute

2663
03:24:38,500 --> 03:24:40,100
So that's pretty complicated.

2664
03:24:41,800 --> 03:24:45,600
Because you'd ideally like to not have to do that.

2665
03:24:52,000 --> 03:24:52,500
You know.

2666
03:25:06,500 --> 03:25:09,700
And so if you take a look in here, what you're checking based on?

2667
03:25:15,400 --> 03:25:18,500
The only place that it ever gets used, right?

2668
03:25:18,500 --> 03:25:23,500
Like the only place that that ever gets used is really just in this

2669
03:25:23,500 --> 03:25:24,100
check.

2670
03:25:24,800 --> 03:25:30,000
So you know the X and the Y check here it's just if the axis is 0

2671
03:25:31,500 --> 03:25:32,900
you're using the why

2672
03:25:34,400 --> 03:25:35,900
Otherwise, you're using the X.

2673
03:25:42,100 --> 03:25:46,800
Yeah, but unfortunately, I just don't see any real way around that.

2674
03:26:17,400 --> 03:26:19,300
So basically, we've got a displacement.

2675
03:26:31,500 --> 03:26:34,900
And, you know, we could do this any number of ways, but I'm just

2676
03:26:34,900 --> 03:26:38,700
looking at here and so, you know, we want to compute this re P value

2677
03:26:38,700 --> 03:26:41,900
that we're using before we have to get it out of the face, real pee.

2678
03:26:43,800 --> 03:26:44,400
Instead.

2679
03:26:47,300 --> 03:26:48,700
And it which that's really annoying.

2680
03:26:48,700 --> 03:26:50,100
But I'm not sure how it's we would do it.

2681
03:26:50,100 --> 03:26:52,400
We have to think that through, maybe there is some other way you could

2682
03:26:52,400 --> 03:26:52,900
actually do it.

2683
03:26:52,900 --> 03:26:53,600
I'm not sure.

2684
03:27:01,900 --> 03:27:06,400
So anyway, the point is yeah this actually needs to be moved in this

2685
03:27:06,400 --> 03:27:07,000
fashion.

2686
03:27:08,100 --> 03:27:11,800
This is just introduces a few more operators here which is fine.

2687
03:27:11,800 --> 03:27:15,900
We kind of want all these operators anyway but it's just a - equals

2688
03:27:15,900 --> 03:27:16,800
operator there.

2689
03:27:18,300 --> 03:27:26,300
So yeah if we just take a look at for example -

2690
03:27:29,300 --> 03:27:30,300
Plus like this one.

2691
03:27:32,300 --> 03:27:33,600
so, if we just do,

2692
03:27:39,000 --> 03:27:42,800
This I believe is all we actually need see here.

2693
03:27:49,000 --> 03:27:49,200
Yeah.

2694
03:27:49,200 --> 03:27:53,000
So we take if we just take the first one as a reference value,

2695
03:27:54,500 --> 03:27:55,000
so,

2696
03:28:00,400 --> 03:28:01,600
And then just say that.

2697
03:28:08,100 --> 03:28:09,900
Well, and just say that.

2698
03:28:13,400 --> 03:28:14,500
That's our - equals.

2699
03:28:14,600 --> 03:28:16,300
All right, so let's step into that again.

2700
03:28:17,400 --> 03:28:19,800
So, we take the relative origin now, we're going to take.

2701
03:28:19,900 --> 03:28:22,200
So if I look at face relative origin,

2702
03:28:24,100 --> 03:28:26,600
What we're going to do now is say okay for the exes, we're going to

2703
03:28:26,600 --> 03:28:29,800
modify just that axis Index, right?

2704
03:28:29,800 --> 03:28:31,400
And we're trying to replicate

2705
03:28:32,900 --> 03:28:34,000
this motion here.

2706
03:28:34,700 --> 03:28:37,100
So along the axis that we're testing, which in this case is the

2707
03:28:37,100 --> 03:28:41,400
x-axis, we're going to move the radius away, right?

2708
03:28:41,400 --> 03:28:45,700
But really the other values on touched and that's exactly what we did

2709
03:28:45,700 --> 03:28:46,200
here.

2710
03:28:47,400 --> 03:28:48,100
We're also going to.

2711
03:28:49,200 --> 03:28:49,500
Yeah.

2712
03:28:49,500 --> 03:28:52,400
Well then we're going to try to do that computation to find out what

2713
03:28:52,400 --> 03:28:56,100
the tear a values are and we're going to pull those out.

2714
03:28:56,100 --> 03:28:56,500
Right?

2715
03:28:56,500 --> 03:28:56,800
In here.

2716
03:28:56,800 --> 03:28:58,300
We go, right here and test them.

2717
03:28:58,300 --> 03:29:01,900
We're going to do our stuff and see where we go.

2718
03:29:01,900 --> 03:29:02,500
And so now,

2719
03:29:02,700 --> 03:29:05,700
You know, effectively, we're actually running the routine, we don't

2720
03:29:05,700 --> 03:29:05,800
know.

2721
03:29:05,800 --> 03:29:07,100
We might have bugs in it.

2722
03:29:07,900 --> 03:29:08,900
Probably we do.

2723
03:29:12,600 --> 03:29:14,000
But again, get a little closer.

2724
03:29:22,100 --> 03:29:22,600
All right.

2725
03:29:51,200 --> 03:29:51,800
so,

2726
03:29:54,900 --> 03:29:55,800
Finishing up here.

2727
03:29:57,700 --> 03:29:59,800
What I want to do is say.

2728
03:30:00,200 --> 03:30:05,700
Yeah, once we kind of come in here, so again, write like this part is

2729
03:30:05,700 --> 03:30:06,700
looking pretty nice.

2730
03:30:06,700 --> 03:30:10,000
Now, even up to here, it's pretty reasonable, right?

2731
03:30:10,000 --> 03:30:11,200
Like, not a lot of code.

2732
03:30:11,700 --> 03:30:15,100
This part should be simplified down, but this Parts pretty

2733
03:30:15,100 --> 03:30:18,500
straightforward, but this part is horrible, right?

2734
03:30:19,200 --> 03:30:22,300
So now, the last thing we have to do is actually make this stuff work

2735
03:30:22,300 --> 03:30:23,100
somehow reasonably.

2736
03:30:23,100 --> 03:30:25,300
This is the nasty part in here, for sure.

2737
03:30:27,700 --> 03:30:29,200
So that's kind of unfortunate.

2738
03:30:32,000 --> 03:30:32,800
To say the least.

2739
03:30:33,900 --> 03:30:37,500
Now rather than doing these via see index, we can just do our tests.

2740
03:30:37,500 --> 03:30:40,900
Now we should be able to do our tests just for wide immediately,

2741
03:30:41,100 --> 03:30:41,600
right?

2742
03:30:42,600 --> 03:30:45,500
So now we can do a thing where we just say.

2743
03:30:46,000 --> 03:30:48,800
All right, let's produce the test value itself.

2744
03:30:48,800 --> 03:30:54,200
These two can be moved inside the loops or this test value here can

2745
03:30:54,200 --> 03:30:55,400
actually be done outside.

2746
03:31:01,400 --> 03:31:07,200
Okay, so what we can do is say, let's first test will produce this

2747
03:31:07,200 --> 03:31:08,100
test value.

2748
03:31:09,000 --> 03:31:12,300
And we need to know when we kind of come through here.

2749
03:31:12,300 --> 03:31:13,900
What these test values are.

2750
03:31:14,400 --> 03:31:20,900
So I'm going to have an F 3 to 4X which is my you know, T check.

2751
03:31:24,000 --> 03:31:27,500
And here's the tea check and we just need to know if any of those are

2752
03:31:27,500 --> 03:31:28,000
true.

2753
03:31:29,200 --> 03:31:29,900
That makes sense.

2754
03:31:32,000 --> 03:31:34,700
So if any of them are true, then we can proceed.

2755
03:31:36,200 --> 03:31:37,700
Then we would come through here.

2756
03:31:39,800 --> 03:31:41,100
And perform the rest.

2757
03:31:42,400 --> 03:31:49,400
Skate serially right almost there.

2758
03:31:50,300 --> 03:31:56,400
So now we get to the point where, you know, the downshifting.

2759
03:31:56,400 --> 03:32:02,600
I'm not sure exactly how we want to downshift here because in theory,

2760
03:32:02,600 --> 03:32:07,600
we do sort of need to downshift potentially, maybe sort of possibly.

2761
03:32:07,600 --> 03:32:10,800
We could just avoid downshifting At All by just pouring in here.

2762
03:32:12,500 --> 03:32:16,200
The results that we actually need with a mask, right?

2763
03:32:17,000 --> 03:32:20,000
So that's kind of ridiculous that we could do that but we can.

2764
03:32:20,000 --> 03:32:21,000
I think I don't.

2765
03:32:21,000 --> 03:32:24,300
So we can we might be able to just do this entirely with no, for Loop,

2766
03:32:24,600 --> 03:32:25,200
right?

2767
03:32:25,500 --> 03:32:26,700
So we'd get rid of the seed.

2768
03:32:26,700 --> 03:32:29,900
See index entirely into the only thing we Loop over is the axis index

2769
03:32:29,900 --> 03:32:30,900
and we're basically done

2770
03:32:32,200 --> 03:32:32,800
in theory.

2771
03:32:35,600 --> 03:32:42,200
All right, so this part right here, yeah, it is a little nasty but it

2772
03:32:42,200 --> 03:32:45,400
just probably will just sort of work, right?

2773
03:32:46,100 --> 03:32:48,000
So we've got the face relative P.

2774
03:32:48,000 --> 03:32:53,100
So, what we can do here is just expand all of these two, for x's and

2775
03:32:53,100 --> 03:32:57,600
say, look, this is the face or LP now.

2776
03:33:05,200 --> 03:33:05,600
it's

2777
03:33:08,500 --> 03:33:11,100
I end that just works, right?

2778
03:33:11,100 --> 03:33:13,900
So we can load out for at a time there.

2779
03:33:17,200 --> 03:33:19,200
And that should be that should be fine.

2780
03:33:19,600 --> 03:33:20,000
Right?

2781
03:33:21,900 --> 03:33:24,200
Again this I guess we would have to

2782
03:33:25,300 --> 03:33:28,800
make a little equals operator for to make it be able to load them when

2783
03:33:28,800 --> 03:33:30,500
28, it's like that but that's fine.

2784
03:33:30,800 --> 03:33:34,900
The thing we could do is just say like E1 here because that one is

2785
03:33:35,100 --> 03:33:36,000
loaded that way.

2786
03:33:37,200 --> 03:33:39,600
So taking a look here.

2787
03:33:45,000 --> 03:33:46,400
The Box radius.

2788
03:33:48,500 --> 03:33:52,100
Is also loadable exactly this way, right?

2789
03:33:52,400 --> 03:33:55,600
So the Box radius can be loaded for a wide

2790
03:33:59,900 --> 03:34:01,400
and that would just work.

2791
03:34:03,200 --> 03:34:07,900
So then at that point after doing these wide.

2792
03:34:08,000 --> 03:34:09,900
So we wouldn't need to see index here at all.

2793
03:34:09,900 --> 03:34:13,000
In fact, this can just go away, right?

2794
03:34:22,800 --> 03:34:24,900
We could get it down to just this.

2795
03:34:40,400 --> 03:34:42,900
So we could get done, just this pretty straightforward there, we

2796
03:34:42,900 --> 03:34:44,900
wouldn't have to do very much work here, right?

2797
03:34:45,100 --> 03:34:53,400
So we would do again an F32 for and this would be our bound check

2798
03:34:53,400 --> 03:34:54,000
value.

2799
03:34:55,100 --> 03:34:58,100
It would come through like this, right?

2800
03:34:58,100 --> 03:35:02,000
And it would be checking, it would just be checking wide and then we

2801
03:35:02,000 --> 03:35:07,800
would do if any true there would basically a mask here.

2802
03:35:14,400 --> 03:35:18,200
It would have to be things that passed, both the T check and the bound

2803
03:35:18,200 --> 03:35:18,700
check.

2804
03:35:19,200 --> 03:35:24,000
If anyone passed both, then we actually have to look if nobody.

2805
03:35:24,000 --> 03:35:27,600
Did we skip it and we don't care, right?

2806
03:35:30,000 --> 03:35:30,600
Zombie sense.

2807
03:35:34,300 --> 03:35:36,300
So that's really it.

2808
03:35:36,900 --> 03:35:38,800
Then this part become.

2809
03:35:38,800 --> 03:35:39,300
This is the part.

2810
03:35:39,300 --> 03:35:39,900
That's nasty.

2811
03:35:39,900 --> 03:35:41,500
Maybe I'll save that for tomorrow.

2812
03:35:43,200 --> 03:35:47,100
But basically what has to happen here now is we have to select the

2813
03:35:47,100 --> 03:35:51,500
values that we would put into the results and or figure out whether we

2814
03:35:51,500 --> 03:35:54,700
wanted to do this situation here.

2815
03:35:55,200 --> 03:35:58,400
So, really, I think,

2816
03:36:02,400 --> 03:36:08,300
Close enough is also going to be something that comes out up here,

2817
03:36:08,300 --> 03:36:09,000
right?

2818
03:36:19,000 --> 03:36:23,400
So checking tear a 4X here we would know whether anyone was close

2819
03:36:23,400 --> 03:36:27,500
enough or not and if anyone's close enough for this that particular

2820
03:36:27,500 --> 03:36:31,500
Ray that particular raised going to get done in there.

2821
03:36:31,500 --> 03:36:34,300
Now the interesting thing about this is if you're going to go through

2822
03:36:34,300 --> 03:36:37,000
the process of checking off our raise any way by pushing a box on the

2823
03:36:37,000 --> 03:36:38,600
stack, you definitely don't need to do this.

2824
03:36:39,000 --> 03:36:42,900
So really all we have to do is just check whether or not the close

2825
03:36:42,900 --> 03:36:47,100
enough value, had any throughs at all in there.

2826
03:36:47,100 --> 03:36:48,600
So when we get in here we could

2827
03:36:48,800 --> 03:36:52,400
say, look if there's any truths in close enough,

2828
03:36:57,500 --> 03:37:05,300
Then we're going to do the Box stack push like so and then we can just

2829
03:37:05,300 --> 03:37:07,000
that's just a straight break out of here.

2830
03:37:07,200 --> 03:37:09,600
Out of the axis Loop, right?

2831
03:37:12,900 --> 03:37:15,400
Otherwise, if there aren't

2832
03:37:18,000 --> 03:37:22,100
Then this is when this would happen and also I guess the Box child

2833
03:37:22,100 --> 03:37:22,700
count.

2834
03:37:25,700 --> 03:37:26,400
Is the same.

2835
03:37:32,400 --> 03:37:35,300
So at that point, we're only talking about this.

2836
03:37:37,100 --> 03:37:41,200
And we would just want to load up these guys in here, right?

2837
03:37:41,300 --> 03:37:41,900
So,

2838
03:37:44,600 --> 03:37:49,500
You just want to like knock them instead of doing it the way that

2839
03:37:49,500 --> 03:37:50,900
we're doing it here.

2840
03:37:51,700 --> 03:37:53,600
So,

2841
03:38:01,000 --> 03:38:04,600
That's, that's that right?

2842
03:38:12,000 --> 03:38:17,600
Couple things we have it implemented there yet but otherwise seems

2843
03:38:17,600 --> 03:38:18,300
fine.

2844
03:38:19,300 --> 03:38:21,900
This needs an if statement, right?

2845
03:38:24,600 --> 03:38:25,600
For the time being.

2846
03:38:30,400 --> 03:38:34,200
And so to do that, we would need some way of asking but that's

2847
03:38:34,200 --> 03:38:35,700
actually pretty straightforward, right?

2848
03:38:35,700 --> 03:38:41,100
So what we could do there is just look at the pack value and say that

2849
03:38:41,100 --> 03:38:43,600
the u-32 version of that.

2850
03:38:46,900 --> 03:38:52,100
If that's true and so that's actually all we would need to know.

2851
03:38:54,900 --> 03:38:59,400
So, we can get rid of the concept of tear a 4X now, and just call it

2852
03:38:59,400 --> 03:38:59,800
to you Ray.

2853
03:39:02,000 --> 03:39:02,700
Which is nice.

2854
03:39:12,500 --> 03:39:14,100
Those are just things we have to Define.

2855
03:39:25,400 --> 03:39:27,500
It's complaining about c and x.

2856
03:39:27,500 --> 03:39:28,200
Where did we?

2857
03:39:28,300 --> 03:39:29,900
Are we still using see you next summer.

2858
03:39:30,100 --> 03:39:30,700
Oh, we are

2859
03:39:32,800 --> 03:39:38,000
So this result here a here results here, a actually now wants to act

2860
03:39:38,000 --> 03:39:40,000
be for wide properly.

2861
03:39:41,400 --> 03:39:45,400
So result, tear a, which was this value right here.

2862
03:39:45,900 --> 03:39:50,800
This wants to be a Forex and it wants to be a

2863
03:39:58,500 --> 03:39:59,900
Load up there, right?

2864
03:39:59,900 --> 03:40:00,700
That we convert.

2865
03:40:01,700 --> 03:40:02,400
Slowed it in.

2866
03:40:08,900 --> 03:40:15,500
These are just binary operators that we need to Define and these are.

2867
03:40:15,500 --> 03:40:16,900
What's this thing?

2868
03:40:17,800 --> 03:40:18,600
It's for operators.

2869
03:40:18,600 --> 03:40:19,300
We need

2870
03:40:21,400 --> 03:40:23,100
These are all just operators, we need.

2871
03:40:26,300 --> 03:40:26,700
Yeah.

2872
03:40:36,400 --> 03:40:42,400
Yeah, so I think that's all good result T.

2873
03:40:42,400 --> 03:40:42,800
Yeah.

2874
03:40:42,800 --> 03:40:46,700
This this now is, you know, you can see exactly how we're going to do

2875
03:40:46,700 --> 03:40:47,700
this now, right?

2876
03:40:48,000 --> 03:40:51,200
So this is just going to be combined via the mask

2877
03:40:52,600 --> 03:40:55,800
This could be confined by the mask, and this could be confined by The

2878
03:40:55,800 --> 03:40:56,200
Mask.

2879
03:40:56,200 --> 03:40:59,200
All of these could be basically mask operations.

2880
03:41:00,700 --> 03:41:06,300
So, you know, we're just going to have to do that slowly.

2881
03:41:08,400 --> 03:41:10,100
Because we have a lot of things to Define here.

2882
03:41:12,000 --> 03:41:16,500
So in handmade Cindy, I'm kind of tempted to break this out but I

2883
03:41:16,500 --> 03:41:17,800
don't know it's a little hard to do.

2884
03:41:17,800 --> 03:41:21,100
So, you know, I'm kind of having to break it into two files.

2885
03:41:21,200 --> 03:41:25,800
One for V, 3 is 14 f-22s, but I don't know if I want to do that or

2886
03:41:25,800 --> 03:41:29,900
not, it's a little bit Squinkie.

2887
03:41:30,600 --> 03:41:32,900
So, what I'm going to do here is I'm going to try

2888
03:41:35,000 --> 03:41:36,400
Just doing it this way for now.

2889
03:41:42,800 --> 03:41:44,400
And I'm just going to put all of these things.

2890
03:41:45,900 --> 03:41:47,100
Into their own section.

2891
03:41:53,100 --> 03:41:53,600
Like so.

2892
03:42:22,800 --> 03:42:27,100
All right, so if I wanted to find all the stuff that I might want on

2893
03:42:27,100 --> 03:42:28,800
an F32 for X.

2894
03:42:28,800 --> 03:42:31,100
Let's start with the basics.

2895
03:42:31,200 --> 03:42:32,900
So, here we have.

2896
03:42:35,500 --> 03:42:36,500
you know, re-

2897
03:42:43,200 --> 03:42:46,100
Let's get some basic option here.

2898
03:42:46,300 --> 03:42:47,400
A Plus

2899
03:42:49,800 --> 03:42:50,800
yours -

2900
03:42:55,600 --> 03:42:58,500
here's mall and here is div.

2901
03:43:02,500 --> 03:43:08,900
And then, let's go ahead for good measure and do the other versions.

2902
03:43:09,700 --> 03:43:13,500
So, plus equals x equals dou, V equals.

2903
03:43:16,600 --> 03:43:21,300
and if we want to, we can make these the sort of more platform neutral

2904
03:43:21,300 --> 03:43:22,700
by saying something,

2905
03:43:24,700 --> 03:43:25,400
Like that.

2906
03:43:29,100 --> 03:43:33,400
Right, because then we could all we could just pour just the one

2907
03:43:33,400 --> 03:43:36,500
divide routine and then Theory the compiler, I'll figure it out again,

2908
03:43:36,800 --> 03:43:39,800
it's a pretty big in theory there.

2909
03:43:39,800 --> 03:43:41,900
But what you gonna do

2910
03:43:47,100 --> 03:43:49,000
So, here is our various Ops.

2911
03:43:56,000 --> 03:43:58,600
Like so in the news will just suck down to these.

2912
03:44:04,500 --> 03:44:10,000
All right, so once we have all of those, we also need absolute value.

2913
03:44:26,000 --> 03:44:27,900
Absolute value works exactly the same way.

2914
03:44:27,900 --> 03:44:29,500
We just only need to do it on one.

2915
03:44:37,300 --> 03:44:37,800
Like so.

2916
03:44:39,300 --> 03:44:42,800
Right, we then have any true and all true.

2917
03:45:08,800 --> 03:45:11,500
I answer using these comparisons, here is pretty straightforward,

2918
03:45:11,500 --> 03:45:13,700
we're just going to use the move mask every time or it's going to

2919
03:45:13,700 --> 03:45:15,000
check it for different values.

2920
03:45:15,200 --> 03:45:19,400
So in the first case, we're just going to see if any of the move Mass

2921
03:45:19,400 --> 03:45:20,600
values were true at all.

2922
03:45:21,200 --> 03:45:24,400
In the Altru case we're going to make sure that it equals a predefined

2923
03:45:24,400 --> 03:45:30,100
value that we know about which I guess in this case is probably 15.

2924
03:45:30,400 --> 03:45:30,900
I guess.

2925
03:45:30,900 --> 03:45:31,800
I don't know.

2926
03:45:32,400 --> 03:45:34,800
We should go double check the documentation for that but let's just

2927
03:45:34,800 --> 03:45:38,400
say and then in the case of anything else we know

2928
03:45:38,600 --> 03:45:40,300
That it's just going to be.

2929
03:45:44,400 --> 03:45:47,700
It's just going to be zero because none of the values should be set.

2930
03:45:49,000 --> 03:45:49,500
So yeah.

2931
03:45:52,500 --> 03:45:53,000
All right.

2932
03:45:55,000 --> 03:45:57,900
Yeah, that's stuck P there.

2933
03:46:14,100 --> 03:46:14,400
oh,

2934
03:46:16,300 --> 03:46:17,000
sorry about that.

2935
03:46:22,000 --> 03:46:22,500
Let me go.

2936
03:46:25,000 --> 03:46:28,800
So now we eat our loads and I'm not sure how we want the syntax of our

2937
03:46:28,800 --> 03:46:29,700
loads to go.

2938
03:46:30,700 --> 03:46:31,500
So,

2939
03:46:38,700 --> 03:46:41,200
You know, one way to do it is to make them look like this.

2940
03:46:57,700 --> 03:46:58,200
Right.

2941
03:47:01,200 --> 03:47:02,400
And that seems pretty good.

2942
03:47:11,400 --> 03:47:13,000
I don't know if we actually have any of those in here.

2943
03:47:13,000 --> 03:47:13,700
I don't think we do.

2944
03:47:17,800 --> 03:47:18,700
And so inside here.

2945
03:47:18,700 --> 03:47:25,200
Yeah, we could just say, okay, we'll just call them F3 to underscore

2946
03:47:25,300 --> 03:47:28,500
for x and we'll just give it the value that we actually want.

2947
03:47:28,800 --> 03:47:31,300
So we just say here is our results.

2948
03:47:31,600 --> 03:47:32,000
We're still up.

2949
03:47:32,000 --> 03:47:34,700
He equals m M1, PS.

2950
03:47:40,500 --> 03:47:43,100
Is just a value that we gave for all of them.

2951
03:47:43,700 --> 03:47:46,900
This one, I don't really know again.

2952
03:47:46,900 --> 03:47:51,100
What the appropriate values here for these should be in terms of

2953
03:47:51,100 --> 03:47:55,100
loading Lane based because it's hard to say, which order run from

2954
03:47:55,100 --> 03:47:55,400
going.

2955
03:47:55,400 --> 03:47:58,300
In fact, I'm going to just not put that one in the moment.

2956
03:48:01,100 --> 03:48:01,600
Yeah.

2957
03:48:12,100 --> 03:48:15,100
Okay, so now we need our comparison operators.

2958
03:48:15,100 --> 03:48:18,800
Those are, you know, going to again be very straightforward and

2959
03:48:18,800 --> 03:48:23,500
they're just, they're just the same as these operators, like here,

2960
03:48:23,900 --> 03:48:25,200
comparison wise, right?

2961
03:48:27,600 --> 03:48:29,300
So, we just have to do compare here.

2962
03:48:31,600 --> 03:48:34,900
And we just want to give it all of our various comparison operators,

2963
03:48:34,900 --> 03:48:35,300
right?

2964
03:48:36,200 --> 03:48:43,700
So we want less than which is comp LT less than or equals 2, which is

2965
03:48:43,700 --> 03:48:47,500
comp le0 we want.

2966
03:48:48,900 --> 03:48:52,100
Greater than comp GT.

2967
03:48:52,900 --> 03:48:54,400
We want greater than or equal to

2968
03:48:55,500 --> 03:48:58,000
Just comp GE.

2969
03:48:58,900 --> 03:49:05,700
And then we want just our tube vanilla values which is comp equal and

2970
03:49:05,700 --> 03:49:08,000
comp not equal, right?

2971
03:49:08,600 --> 03:49:12,900
So that's comp not equal to that's comp equal to.

2972
03:49:13,700 --> 03:49:16,300
So now we have all of our comparison values and Theory

2973
03:49:19,600 --> 03:49:22,500
Sorry, I missed that mnemonic.

2974
03:49:26,300 --> 03:49:30,000
And in this case, Zero obviously is not an actual value.

2975
03:49:30,000 --> 03:49:34,000
So we need F3 for x or 0.

2976
03:49:35,300 --> 03:49:37,300
F 3 for X something like that.

2977
03:49:42,400 --> 03:49:44,800
So, we need that value to be in here somewhere.

2978
03:49:59,400 --> 03:49:59,700
Yeah.

2979
03:50:00,900 --> 03:50:05,100
And so then also are you to remind us that point could be written in

2980
03:50:05,100 --> 03:50:11,200
terms of our regular -, if we wanted to we could call this 0 and

2981
03:50:11,200 --> 03:50:13,300
subtract a from it like so.

2982
03:50:16,000 --> 03:50:19,000
And so, that's again, another way of taking the platform part out of

2983
03:50:19,000 --> 03:50:23,700
that in a nice way, so that we can make this easier to Port later on

2984
03:50:23,700 --> 03:50:24,600
when we actually care.

2985
03:50:26,000 --> 03:50:29,200
So, now, we get to our logical Ops and so on here,

2986
03:50:35,400 --> 03:50:39,300
So I'm down how good I need some updates.

2987
03:50:40,400 --> 03:50:44,000
Windows as updated like every day for the past several days.

2988
03:50:47,500 --> 03:50:50,400
Like, try to get your act together, people.

2989
03:50:52,800 --> 03:50:56,700
so we need an and here and

2990
03:51:02,600 --> 03:51:04,500
There's a couple ways to look at this.

2991
03:51:04,700 --> 03:51:09,100
So one of the unfortunate Parts about the and is that it's not really

2992
03:51:09,100 --> 03:51:10,000
doing a logical.

2993
03:51:10,000 --> 03:51:11,300
And technically

2994
03:51:13,400 --> 03:51:16,900
But we're not going to actually bother to do a logical and because we

2995
03:51:16,900 --> 03:51:20,100
know that our comparison operators, always produce all zeros are all

2996
03:51:20,100 --> 03:51:20,600
ones.

2997
03:51:20,700 --> 03:51:24,000
So a binary and actually works the same as a logical.

2998
03:51:24,000 --> 03:51:27,300
And for the case of we care about, however, it is a bit of a caveat

2999
03:51:27,500 --> 03:51:30,200
because if someone came along and actually expected that to be a

3000
03:51:30,200 --> 03:51:32,900
logical and all of a sudden, it wouldn't do it.

3001
03:51:33,200 --> 03:51:37,600
So it is a little bit Squinkie, but you just have to kind of be aware

3002
03:51:37,600 --> 03:51:39,800
of it, that, that is how that works, right?

3003
03:51:40,500 --> 03:51:42,200
So one way we could do it is say,

3004
03:51:42,400 --> 03:51:45,600
Yes, and just write that code.

3005
03:51:45,900 --> 03:51:50,700
So that it's clear to the people that they can't have the logical

3006
03:51:50,700 --> 03:51:51,000
version.

3007
03:51:51,000 --> 03:51:53,900
Even though we're using the logical version, it's not actually

3008
03:51:53,900 --> 03:51:55,400
logical, right?

3009
03:51:57,400 --> 03:52:00,100
And so that's kind of an important thing to just be aware of as you're

3010
03:52:00,100 --> 03:52:00,400
writing.

3011
03:52:00,400 --> 03:52:01,600
This kind of code, is there.

3012
03:52:01,900 --> 03:52:05,600
It's not doing a logical and you're actually doing a binary and and

3013
03:52:05,600 --> 03:52:08,300
you're just making that be the same thing.

3014
03:52:10,500 --> 03:52:15,400
So we need a way to do the conversion here from these and we can do

3015
03:52:15,400 --> 03:52:16,300
that pretty easily.

3016
03:52:16,300 --> 03:52:20,000
That's really only because we the way that we happen to write, this

3017
03:52:20,000 --> 03:52:21,200
was a little bit Squinkie.

3018
03:52:22,100 --> 03:52:26,500
What we can do is we could change these to F 32s in here instead.

3019
03:52:26,900 --> 03:52:29,800
And then that stuff would work, but we'd have to quickly rewrite all

3020
03:52:29,800 --> 03:52:31,700
the rest of our code, but that's okay.

3021
03:52:31,700 --> 03:52:32,600
We could do that.

3022
03:52:32,700 --> 03:52:36,300
I mean, you know, for feeling saucy, we can definitely do that.

3023
03:52:43,300 --> 03:52:43,900
Like so.

3024
03:52:44,300 --> 03:52:46,600
And now we're just going to get a lot of things here that are, that

3025
03:52:46,600 --> 03:52:47,800
are wrong.

3026
03:52:47,800 --> 03:52:52,200
However, one of the things that we can do here now is we can start to

3027
03:52:52,200 --> 03:52:56,800
make this stuff all work in terms of our other code if we wanted to.

3028
03:52:57,300 --> 03:53:01,900
So for example, like when we do operator plus we could now just do

3029
03:53:04,100 --> 03:53:05,700
Instead of add PS here, right?

3030
03:53:05,700 --> 03:53:07,200
We just we just do this.

3031
03:53:11,400 --> 03:53:15,600
so again now this all works in terms of that one, Cindy underlying set

3032
03:53:15,600 --> 03:53:21,000
there and hopefully you know, does the compiler doesn't puke face on

3033
03:53:21,000 --> 03:53:22,900
it but you know,

3034
03:53:25,300 --> 03:53:28,700
If the compiler can manage to figure out through all these ridiculous

3035
03:53:28,700 --> 03:53:32,700
Hoops, that c has us go through in order to make this look clean.

3036
03:53:36,000 --> 03:53:38,000
You know, we would it would be good.

3037
03:53:43,600 --> 03:53:43,800
Right?

3038
03:53:43,800 --> 03:53:46,000
And so you can see that that should just work there.

3039
03:53:46,100 --> 03:53:48,100
I'm not going to dress that one just quite yet.

3040
03:53:59,400 --> 03:53:59,700
Okay.

3041
03:54:01,100 --> 03:54:03,700
So yeah, again, same thing here.

3042
03:54:16,400 --> 03:54:17,100
And here.

3043
03:54:21,300 --> 03:54:24,600
And now, like I said, you know, this this is means that this is now

3044
03:54:24,600 --> 03:54:28,800
platform-independent, which is kind of nice because now you don't have

3045
03:54:28,800 --> 03:54:29,900
to Port it, right?

3046
03:54:29,900 --> 03:54:31,700
If you wanted to Port it to something else.

3047
03:54:36,300 --> 03:54:40,100
Some platform like neon, it just takes some of the work out of it

3048
03:54:40,500 --> 03:54:43,600
because they are all depending on just one set of those calls.

3049
03:54:44,400 --> 03:54:47,000
And, you know, that's not a huge deal because you can just use macros

3050
03:54:47,000 --> 03:54:47,400
or whatever.

3051
03:54:47,400 --> 03:54:52,300
It's not really a particularly big deal, but it's a little bit of a

3052
03:54:52,300 --> 03:54:52,900
leg up in.

3053
03:54:52,900 --> 03:54:53,600
That's nice.

3054
03:54:53,700 --> 03:54:56,400
You know, you can, you can continue to condense it down to something

3055
03:54:56,400 --> 03:55:00,300
that's pretty straightforward, you know, going even further than we're

3056
03:55:00,300 --> 03:55:03,900
going now, and just getting those base operations in place.

3057
03:55:04,500 --> 03:55:08,700
In a separate file and then you just swap out which file you're

3058
03:55:08,700 --> 03:55:10,200
talking about, right?

3059
03:55:12,200 --> 03:55:16,000
Honestly, these even are, you know, this this could just be that.

3060
03:55:28,900 --> 03:55:29,400
Right.

3061
03:55:35,400 --> 03:55:35,700
Oops.

3062
03:55:44,900 --> 03:55:47,300
Again, if I just started with this, the right way we wouldn't have

3063
03:55:47,300 --> 03:55:47,800
done this.

3064
03:55:47,800 --> 03:55:49,500
So that was kind of stupid.

3065
03:55:49,500 --> 03:55:50,100
But, you know,

3066
03:55:51,900 --> 03:55:55,400
Sometimes you got to just type and then you see the pattern, you're

3067
03:55:55,400 --> 03:55:56,500
like oh yeah, duh, right?

3068
03:55:56,500 --> 03:55:57,700
That was the right way to do it.

3069
03:55:58,900 --> 03:55:59,500
Obviously.

3070
03:56:07,200 --> 03:56:10,100
And again, it's worth doing, you know, it does make it harder on the

3071
03:56:10,100 --> 03:56:10,600
compiler.

3072
03:56:10,700 --> 03:56:13,600
Like I was saying before because, you know, like, for example, just

3073
03:56:13,600 --> 03:56:14,700
take a look at the transfer serious.

3074
03:56:14,700 --> 03:56:16,900
Did we want to call that function?

3075
03:56:16,900 --> 03:56:19,300
So that just gets done the way that it should get done on that

3076
03:56:19,300 --> 03:56:20,000
particular platform.

3077
03:56:20,000 --> 03:56:22,600
But, you know, this platform happens to require mask load.

3078
03:56:22,600 --> 03:56:25,400
If the compiler, can't figure out that, it can reuse that mask, that

3079
03:56:25,400 --> 03:56:27,200
just creates a lot of extra work there, right?

3080
03:56:27,200 --> 03:56:30,700
So, you got to be aware of the the extra stress replacement compiler.

3081
03:56:31,000 --> 03:56:33,500
Check to make sure that it knows what's going on later when we

3082
03:56:33,500 --> 03:56:34,800
actually care and Things Are

3083
03:56:36,600 --> 03:56:41,500
Potentially in a Squinkie State, you know, you don't you don't want

3084
03:56:41,500 --> 03:56:48,100
to, you don't want to be unaware of the additional stress that you're

3085
03:56:48,100 --> 03:56:51,200
putting on the compiler in this state.

3086
03:56:51,200 --> 03:56:53,800
Okay, so let's continue going here.

3087
03:56:53,800 --> 03:56:58,800
So if you have a f 3 for X here that we want to load, I'm going to do

3088
03:56:58,800 --> 03:56:59,800
an F 3 for x.

3089
03:57:00,000 --> 03:57:03,400
Wood on that value, and then do them all here.

3090
03:57:05,000 --> 03:57:05,700
Like so.

3091
03:57:27,900 --> 03:57:30,200
Oh, these are v34 X's.

3092
03:57:30,200 --> 03:57:32,800
Okay, let me fix that.

3093
03:57:35,500 --> 03:57:38,000
I'm like what's a complaining about in like that's right, we've got a

3094
03:57:38,600 --> 03:57:40,100
another type in here that I

3095
03:57:41,200 --> 03:57:43,200
Was using a different part of the code.

3096
03:57:45,800 --> 03:57:46,900
We want to do that as well.

3097
03:57:53,700 --> 03:57:54,700
Same thing applies here.

3098
03:58:15,800 --> 03:58:18,700
And these are just ordered together.

3099
03:58:19,900 --> 03:58:24,400
So in theory, we can just do this as an actual or now

3100
03:58:36,900 --> 03:58:39,900
So oops, so it's like or them all together and then do this.

3101
03:58:39,900 --> 03:58:42,500
And this one will just be like and them all together and then do it.

3102
03:58:51,100 --> 03:58:56,600
and so in this case, I guess we want to do here is say this is any

3103
03:58:56,600 --> 03:58:57,200
true

3104
03:58:59,100 --> 03:59:00,200
and this is any true.

3105
03:59:04,200 --> 03:59:05,600
Is that just a move mask?

3106
03:59:06,400 --> 03:59:07,200
This is what it was doing.

3107
03:59:13,000 --> 03:59:16,300
So this is just a load up again, same exact thing that we were doing

3108
03:59:16,300 --> 03:59:16,700
before.

3109
03:59:16,700 --> 03:59:17,500
So this is

3110
03:59:18,700 --> 03:59:19,500
Orion there.

3111
03:59:26,000 --> 03:59:27,900
Here's one that lives across the lanes.

3112
03:59:27,900 --> 03:59:30,700
So there's one that we do want to do that way, I guess.

3113
03:59:41,200 --> 03:59:44,500
So this is one that I guess we do want to do or where we would say F 3

3114
03:59:44,500 --> 03:59:47,400
to 4X and we would pass these in oops.

3115
03:59:56,800 --> 03:59:57,900
In that function.

3116
04:00:06,600 --> 04:00:09,100
again, it's just one of these and the difference here is that it just

3117
04:00:09,100 --> 04:00:10,000
has each of these

3118
04:00:21,100 --> 04:00:23,600
All right, getting there.

3119
04:00:24,300 --> 04:00:30,200
So now when we take a look here, this one is converting from an M1 28.

3120
04:00:30,200 --> 04:00:31,900
I don't really want anyone to be doing that anymore.

3121
04:00:31,900 --> 04:00:33,600
It's a, I'm going to vaporize that.

3122
04:00:37,500 --> 04:00:39,900
This can just be done by any now.

3123
04:00:41,500 --> 04:00:46,200
like so, and that's got to be an and

3124
04:00:49,700 --> 04:00:51,700
So this has to be a load.

3125
04:01:09,700 --> 04:01:12,000
Like so and that's it.

3126
04:01:12,600 --> 04:01:14,600
So now we just have to take a look.

3127
04:01:14,600 --> 04:01:15,300
What is this?

3128
04:01:15,300 --> 04:01:20,700
This is in our other code here and I'm set expression.

3129
04:01:22,200 --> 04:01:24,100
That's going to be this stuff here.

3130
04:01:32,700 --> 04:01:34,400
so that's just

3131
04:01:40,900 --> 04:01:41,900
That right.

3132
04:01:42,800 --> 04:01:43,200
Yeah.

3133
04:01:46,900 --> 04:01:49,600
Alright, so let's go back to the code that we were looking at before.

3134
04:01:49,600 --> 04:01:51,100
So here's the code.

3135
04:01:51,200 --> 04:01:53,200
You can see how we're pulling through here.

3136
04:01:55,200 --> 04:01:56,100
We do all this work.

3137
04:01:56,100 --> 04:01:56,500
Exactly.

3138
04:01:56,500 --> 04:02:01,100
The way that we used to do this work, and we do our checking and we

3139
04:02:01,100 --> 04:02:01,800
produce.

3140
04:02:01,900 --> 04:02:04,400
Well, we produce exactly what we thought were going to produce, right.

3141
04:02:08,300 --> 04:02:10,100
In theory, this code is complete.

3142
04:02:10,100 --> 04:02:14,500
Now we probably have bugs but in theory it is

3143
04:02:21,700 --> 04:02:22,900
So yeah.

3144
04:02:30,600 --> 04:02:33,200
I don't really want to run it and know how bad it is.

3145
04:02:33,200 --> 04:02:37,400
But I think what I'll probably do because we're way over time now is,

3146
04:02:37,400 --> 04:02:41,400
I'll probably just revisit this tomorrow.

3147
04:02:42,000 --> 04:02:42,800
Well, I'll be honest.

3148
04:02:42,800 --> 04:02:44,200
That was a lot better than I thought.

3149
04:02:44,200 --> 04:02:45,700
The lighting is still calculating.

3150
04:02:45,700 --> 04:02:47,500
Pretty reasonably actually.

3151
04:02:50,300 --> 04:02:55,600
So I wasn't necessarily expecting that, but that's pretty great.

3152
04:02:57,100 --> 04:02:58,100
So, I guess.

3153
04:02:58,100 --> 04:02:58,400
Yeah.

3154
04:02:58,400 --> 04:02:59,800
Well that was

3155
04:03:00,000 --> 04:03:00,300
Is it?

3156
04:03:01,000 --> 04:03:04,700
Alright, so now we actually are Computing.

3157
04:03:04,700 --> 04:03:11,100
All of these values pretty much all the way down doing for raised at a

3158
04:03:11,100 --> 04:03:11,800
time.

3159
04:03:12,500 --> 04:03:16,000
However, we are not actually doing the very last step.

3160
04:03:16,300 --> 04:03:19,200
It still has to do pull outs here which are not great.

3161
04:03:21,900 --> 04:03:25,300
Any other thing is with this, this Preamble code, is garbage the

3162
04:03:25,300 --> 04:03:26,000
moment, right?

3163
04:03:26,000 --> 04:03:28,800
Like, this part here is completely stupid.

3164
04:03:30,400 --> 04:03:34,200
So that part also could stand to be improved quite a bit, because

3165
04:03:34,200 --> 04:03:38,400
again, we don't really want to be down shifting all the time in that

3166
04:03:38,400 --> 04:03:38,700
way.

3167
04:03:40,400 --> 04:03:42,100
On the code on the outside.

3168
04:03:44,800 --> 04:03:47,800
It's got a loop over the sub raised here which again also isn't great.

3169
04:03:47,800 --> 04:03:51,100
So this part probably also would need to be symbolized in order to be

3170
04:03:51,200 --> 04:03:51,700
good.

3171
04:03:53,100 --> 04:03:57,200
So that's going to be a pain in the butt in addition but like I said I

3172
04:03:57,200 --> 04:04:00,200
can start tackling those tomorrow and then once we have all that done,

3173
04:04:00,200 --> 04:04:03,900
we can see this is the oh he's the nasty part about Cindy we can see

3174
04:04:03,900 --> 04:04:08,500
if we actually got any good performance improvements out of that, and

3175
04:04:08,500 --> 04:04:10,300
we can take a look at it tuning wise.

3176
04:04:12,800 --> 04:04:17,000
Yeah, and it's hard to say, you know, if we will, if we won't could

3177
04:04:17,000 --> 04:04:19,300
be, we were all memory Bound in which case, this is complete waste of

3178
04:04:19,300 --> 04:04:22,100
time, but we'll find out I guess.

3179
04:04:23,400 --> 04:04:24,200
Yeah, not sure.

3180
04:04:24,200 --> 04:04:25,800
I want to do this last part.

3181
04:04:26,000 --> 04:04:27,100
Well, you know, maybe I will,

3182
04:04:28,700 --> 04:04:33,200
So we do any true on The Masks, we can just check here too.

3183
04:04:36,300 --> 04:04:38,300
See if we need to push the Box on, if you don't need to press the box

3184
04:04:38,300 --> 04:04:42,900
that we need to do is update the results here and updating the results

3185
04:04:42,900 --> 04:04:44,800
is like a two-step thing that we want to do there.

3186
04:04:45,600 --> 04:04:50,000
So what we want to do is we want to take our are the way that we're

3187
04:04:50,000 --> 04:04:52,100
returning our results right now, this raycast result.

3188
04:04:52,800 --> 04:04:55,900
So we want to do is take that recast result and want to change the way

3189
04:04:55,900 --> 04:04:56,700
that's happening.

3190
04:04:57,000 --> 04:05:00,400
So, the first thing we do is just point out the fact that box into C's

3191
04:05:01,000 --> 04:05:02,100
can just be 32.

3192
04:05:02,200 --> 04:05:03,700
Just give me the indices, right?

3193
04:05:03,700 --> 04:05:05,000
They don't actually act have to

3194
04:05:05,200 --> 04:05:08,100
Actually be the boxes themselves.

3195
04:05:08,100 --> 04:05:11,700
The reason I know that it's because you can see like we do the get box

3196
04:05:11,700 --> 04:05:15,900
call right here and the get box call right.

3197
04:05:15,900 --> 04:05:18,100
Does a specific look up operation right?

3198
04:05:18,100 --> 04:05:19,800
It looks into the box table.

3199
04:05:22,600 --> 04:05:24,000
And pulls out a particular value.

3200
04:05:25,300 --> 04:05:26,700
So, that box table.

3201
04:05:30,300 --> 04:05:31,500
Here is the value.

3202
04:05:31,500 --> 04:05:33,000
We could just be returning.

3203
04:05:35,300 --> 04:05:39,000
If we wanted to could just return that directly out now, where is get

3204
04:05:39,000 --> 04:05:41,700
box actually called, it's not called that many places.

3205
04:05:45,800 --> 04:05:48,500
But we wanted, so we kind of we kind of want to do that without.

3206
04:05:48,500 --> 04:05:51,000
We don't necessarily want to pass this box index back.

3207
04:05:52,400 --> 04:05:55,200
We want to pass this one to avoid having to do those double lookups

3208
04:05:55,200 --> 04:05:55,500
there.

3209
04:05:55,500 --> 04:05:59,800
So you know I'm saying, so we really want to do here is

3210
04:06:00,000 --> 04:06:01,900
Is when we're actually in this routine.

3211
04:06:08,600 --> 04:06:09,800
Doing our a cast.

3212
04:06:10,000 --> 04:06:15,600
We want to do here is to be able to pass that box and X-Pac and have

3213
04:06:15,600 --> 04:06:19,200
some way of making that refer to which boxes were talking about.

3214
04:06:19,500 --> 04:06:22,500
We don't have a no box at the moment, which is kind of annoying, but

3215
04:06:22,500 --> 04:06:27,800
we can use the fact that the root box is not one that we ever return,

3216
04:06:28,800 --> 04:06:29,300
right?

3217
04:06:29,300 --> 04:06:31,400
We never, we never actually return the root box.

3218
04:06:32,600 --> 04:06:37,700
So we can took we can't take the route box index and make that one be

3219
04:06:38,500 --> 04:06:43,200
What we wanted to return if you know, if we decide to do that, right?

3220
04:06:45,500 --> 04:06:46,300
Something about

3221
04:06:49,100 --> 04:06:52,900
All right, so in here, what we could say is an, in fact, we could just

3222
04:06:52,900 --> 04:06:55,600
pass the other one back for now and just do the the other opposition

3223
04:06:55,600 --> 04:06:56,000
later.

3224
04:06:57,100 --> 04:06:59,700
So this is Source index that we would be returning here.

3225
04:07:00,900 --> 04:07:05,700
And so that way, what we could say is like, alright, let's pass back a

3226
04:07:05,700 --> 04:07:08,200
box in next in the raycast result.

3227
04:07:08,700 --> 04:07:14,100
So in here, where we've got this Source index, when we go to record,

3228
04:07:14,100 --> 04:07:17,500
which box got hit the box that got hit is actually going to be.

3229
04:07:17,700 --> 04:07:18,400
First index.

3230
04:07:19,600 --> 04:07:22,400
Like so, and the person on the outside.

3231
04:07:35,800 --> 04:07:37,300
Instead has to actually do that.

3232
04:07:37,300 --> 04:07:37,800
Look up.

3233
04:07:43,700 --> 04:07:44,100
Right?

3234
04:07:44,100 --> 04:07:47,000
And so that's just passing it back by a numerical index.

3235
04:07:47,000 --> 04:07:51,000
And instead of specific index, why do we have to do that?

3236
04:07:51,100 --> 04:07:53,900
Well, the reason that we had to do that is because if we want to pack

3237
04:07:53,900 --> 04:07:57,100
these, we can't pack 64-bit values into a semi register.

3238
04:07:57,100 --> 04:08:00,000
We have to pack 32-bit values into some your register, so just to

3239
04:08:00,000 --> 04:08:01,600
prepare for that, right?

3240
04:08:05,100 --> 04:08:08,300
So what we want to do now is figure out a way to sort of make these

3241
04:08:08,300 --> 04:08:14,500
things all and together properly and so that they can be loaded out.

3242
04:08:14,800 --> 04:08:19,000
So if I now go into handmade lighting and instead change the raycast

3243
04:08:19,000 --> 04:08:24,800
result here to a F32 for X, in each case here,

3244
04:08:31,900 --> 04:08:35,700
So instead of returning for a cast results, we're just going to return

3245
04:08:36,000 --> 04:08:39,400
one raycast results, but that raycast result will have all of the

3246
04:08:39,400 --> 04:08:43,600
values in it, then what we can do is say all right, let's clear the

3247
04:08:43,600 --> 04:08:45,500
Box index out first.

3248
04:08:45,700 --> 04:08:49,900
So the Box index is going to be equal to an F 3 to 4 x of 0.

3249
04:08:51,100 --> 04:08:51,700
Like so.

3250
04:08:53,100 --> 04:08:54,400
Guess that's floating Point.

3251
04:08:54,500 --> 04:08:55,200
That's okay.

3252
04:08:56,400 --> 04:08:59,600
Then we go through and we talked about that result value.

3253
04:09:05,000 --> 04:09:06,100
Such as in here.

3254
04:09:07,000 --> 04:09:11,200
Now we can just again do this in a sort of piecemeal fashion if we

3255
04:09:11,200 --> 04:09:14,100
want to and then pull it out at the end.

3256
04:09:14,300 --> 04:09:17,700
So for now let's just do that directly so you can make sure it's

3257
04:09:17,800 --> 04:09:18,600
working at all.

3258
04:09:20,200 --> 04:09:22,000
So yeah.

3259
04:09:22,100 --> 04:09:24,900
What I want to do here is say

3260
04:09:43,900 --> 04:09:45,300
Definition to save this for tomorrow.

3261
04:09:47,700 --> 04:09:50,400
We've got a way too long.

3262
04:09:52,500 --> 04:09:53,600
It's already 4:00.

3263
04:09:54,100 --> 04:09:55,600
It's already 5:00.

3264
04:09:58,700 --> 04:10:01,500
Disastrous, disastrous.

3265
04:10:01,500 --> 04:10:02,200
I say

3266
04:10:05,100 --> 04:10:06,200
I should say this for tomorrow.

3267
04:10:54,800 --> 04:11:00,000
All right, so I will save the rest that for tomorrow and that'll be

3268
04:11:00,000 --> 04:11:05,700
that we will take the briefest of q&a's.

3269
04:11:05,700 --> 04:11:09,900
They better be the most on topic that like I've ever

3270
04:11:11,500 --> 04:11:12,600
Seen before.

3271
04:11:13,300 --> 04:11:17,500
Like literally they have to be the honest of on topic.

3272
04:11:57,400 --> 04:11:59,200
see if there ain't, it doesn't look like there are

3273
04:12:01,800 --> 04:12:03,400
Also to clarify from earlier.

3274
04:12:03,700 --> 04:12:08,200
We don't actually stream at 60 frames a second and we don't need to

3275
04:12:08,200 --> 04:12:12,700
stream at 60 frames a second because even if the game is running at 30

3276
04:12:12,700 --> 04:12:15,800
frames a second, that would be fine with me or if it was six feet per

3277
04:12:15,800 --> 04:12:16,000
second.

3278
04:12:16,000 --> 04:12:17,300
Transfer 8:30 was.

3279
04:12:21,900 --> 04:12:27,100
The problem was that the capture card couldn't capture Progressive and

3280
04:12:27,100 --> 04:12:31,900
the computer at 60 frames a second and the computer can only output 60

3281
04:12:31,900 --> 04:12:33,300
frames a second Progressive.

3282
04:12:33,800 --> 04:12:35,700
So we end up with interlace

3283
04:12:36,700 --> 04:12:39,800
So even if we were streaming like 10 frames a second, it was still a

3284
04:12:39,800 --> 04:12:42,100
problem because it was all interlaced and ugly.

3285
04:12:42,500 --> 04:12:46,200
So even for game development where we're not running at frame rate yet

3286
04:12:46,200 --> 04:12:46,700
and everything.

3287
04:12:46,700 --> 04:12:49,600
It's like, it's got to be Progressive because

3288
04:12:51,600 --> 04:12:51,900
That.

3289
04:12:51,900 --> 04:12:56,300
Well yeah, it just you can't really interlace just as awful.

3290
04:12:58,600 --> 04:13:01,000
I think you call any true from within all True Connect, that's

3291
04:13:01,000 --> 04:13:01,500
intended.

3292
04:13:01,600 --> 04:13:03,000
Yes, that was intended.

3293
04:13:03,300 --> 04:13:05,600
So, what's happening there is

3294
04:13:12,900 --> 04:13:14,200
In this case, right?

3295
04:13:14,200 --> 04:13:18,600
We've got any true, all true, and all false, and these are ways of

3296
04:13:18,600 --> 04:13:21,800
testing what the lanes are in a 4 wide,

3297
04:13:23,000 --> 04:13:26,900
So, any true just tells us where any lanes true, right?

3298
04:13:28,600 --> 04:13:32,900
So I assume you're referring to this one in all three true.

3299
04:13:33,700 --> 04:13:39,700
The portent part his in is in at least one lane, so this is

3300
04:13:40,100 --> 04:13:43,700
essentially all true any true, right?

3301
04:13:43,800 --> 04:13:47,900
And the reason is because there's two Dimensions, your testing along

3302
04:13:48,200 --> 04:13:54,000
one is along the dimensions and here we're saying any for all three

3303
04:13:54,000 --> 04:13:57,500
dimensions or all for all three dimensions, right?

3304
04:13:58,300 --> 04:14:03,400
But then in both cases, we don't care which lane so we don't have to

3305
04:14:03,400 --> 04:14:04,800
use all true.

3306
04:14:04,900 --> 04:14:06,700
We could make another version of this.

3307
04:14:06,700 --> 04:14:12,700
That was any three true in all lanes and all three true in all lanes

3308
04:14:12,900 --> 04:14:15,300
and that would change this any to and all.

3309
04:14:16,000 --> 04:14:16,800
Does that make sense?

3310
04:14:17,700 --> 04:14:19,900
It's a matrix right?

3311
04:14:39,600 --> 04:14:41,600
This is what that data type looks like.

3312
04:14:43,200 --> 04:14:43,800
Right?

3313
04:14:44,900 --> 04:14:48,700
It's got an x, a y, and a z component in four different lanes.

3314
04:14:49,800 --> 04:14:51,500
And so any

3315
04:14:52,900 --> 04:14:54,200
And all.

3316
04:14:55,200 --> 04:14:56,800
Are plenty sufficient.

3317
04:14:56,800 --> 04:14:59,800
If you're just talking about a single scalar.

3318
04:15:00,200 --> 04:15:03,100
that's been replicated to four lanes because then you're just saying,

3319
04:15:03,100 --> 04:15:06,400
well are any lanes to are all Lanes true, but once you go to the

3320
04:15:06,400 --> 04:15:09,800
Matrix, you've got two enemies and all's there's any

3321
04:15:11,500 --> 04:15:15,400
and all on this axis and then there's any

3322
04:15:16,600 --> 04:15:21,500
And all on this axis and you can combine the two.

3323
04:15:21,600 --> 04:15:26,100
So if I said all, all that would mean our is this entire Matrix set to

3324
04:15:26,100 --> 04:15:26,600
True?

3325
04:15:26,700 --> 04:15:26,900
Right?

3326
04:15:26,900 --> 04:15:27,500
True, true, true true.

3327
04:15:27,500 --> 04:15:28,500
True too true.

3328
04:15:28,500 --> 04:15:30,600
Right, any here?

3329
04:15:30,600 --> 04:15:33,700
But all here would be like, is true.

3330
04:15:33,700 --> 04:15:38,000
Is any one of these rows have throughs all across and vice versa?

3331
04:15:38,100 --> 04:15:41,200
Is anyone column throughs all across, right?

3332
04:15:41,400 --> 04:15:42,600
Hopefully, that makes sense.

3333
04:15:45,400 --> 04:15:48,600
All right, I see no more on topic questions.

3334
04:15:59,000 --> 04:15:59,600
All right.

3335
04:16:04,800 --> 04:16:09,200
Thank you everyone for joining me for an extremely long episode of

3336
04:16:09,200 --> 04:16:10,000
handmade hero.

3337
04:16:10,200 --> 04:16:11,300
It's a pleasure cooking with you.

3338
04:16:11,300 --> 04:16:14,900
As always, we will come back tomorrow to finish our Cindy, ization of

3339
04:16:14,900 --> 04:16:17,600
this routine and then we will see if we can get it running any faster

3340
04:16:17,600 --> 04:16:18,100
that way.

3341
04:16:18,600 --> 04:16:21,800
Hopefully we can otherwise we just wasted a bunch of time doing

3342
04:16:21,800 --> 04:16:26,600
nothing if you want to follow along with the series at home.

3343
04:16:26,600 --> 04:16:29,700
Obviously, you can pre-order the game at hand made here at dot org and

3344
04:16:29,700 --> 04:16:30,800
it comes to the source code.

3345
04:16:30,900 --> 04:16:34,000
So if you wanted to play around with symbolizing it,

3346
04:16:34,100 --> 04:16:36,900
Self and learn a little bit about Cindy.

3347
04:16:36,900 --> 04:16:40,300
I symbolizing code that way, that's pretty good way to do it.

3348
04:16:41,200 --> 04:16:46,100
We'll be back here tomorrow to finish the 70 optimizations, until then

3349
04:16:46,100 --> 04:16:48,100
have fun programming everyone and I'll see you on the internet.

3350
04:16:48,200 --> 04:16:49,100
Take it easy, everybody.

