1
00:00:00,000 --> 00:00:00,700
The recording.

2
00:00:00,700 --> 00:00:02,200
Hello, everyone.

3
00:00:02,200 --> 00:00:06,000
And welcome back to handmade hero the show where we code a complete

4
00:00:06,000 --> 00:00:07,100
game live on stream.

5
00:00:07,100 --> 00:00:09,100
Although we have not been coding for two weeks.

6
00:00:09,100 --> 00:00:15,500
We had two weeks off because I was with out of the country and unable

7
00:00:15,500 --> 00:00:18,300
to actually do any sort of streaming so that.

8
00:00:18,300 --> 00:00:23,100
Yeah, that pretty much meant the show was down, but we are back now

9
00:00:23,100 --> 00:00:26,700
and we are trying to wrap up our debug system.

10
00:00:26,700 --> 00:00:29,900
That's what we sort of stopped on and we still have a few

11
00:00:30,000 --> 00:00:31,700
two more things left to do in that.

12
00:00:31,700 --> 00:00:34,200
So I would like to sort of get into doing them.

13
00:00:34,500 --> 00:00:38,100
Now, it's always kind of tricky, obviously, when you come back after

14
00:00:38,700 --> 00:00:42,200
taking a, while off from the code, you know, your brain can kind of

15
00:00:42,200 --> 00:00:45,700
sort of forget what it was working on a forget, what's going on.

16
00:00:45,700 --> 00:00:49,800
So, people were asking in the pre stream about that and wondering

17
00:00:49,800 --> 00:00:53,300
Lavetta and like I was sort of saying there and it Bears repeating

18
00:00:53,900 --> 00:00:58,500
generally what I do for this sort of thing is, I tend to try and keep

19
00:00:58,500 --> 00:00:59,900
my codebase very

20
00:01:00,000 --> 00:01:05,400
Like what I try to do with code, is I try to, you know, sort of make,

21
00:01:07,200 --> 00:01:10,300
you know, I try to make general rules about how I do stuff and you see

22
00:01:10,300 --> 00:01:14,600
me often times type in things, they they sort of look the same and

23
00:01:14,600 --> 00:01:17,100
follow the same sort of structure in general, when I'm writing code.

24
00:01:18,200 --> 00:01:20,000
That is there for a number of reasons.

25
00:01:20,000 --> 00:01:23,900
And one big one, is that the more consistent you are with the way that

26
00:01:23,900 --> 00:01:28,100
you choose to make things work, the less difficult it is for you to,

27
00:01:28,200 --> 00:01:28,700
you know,

28
00:01:30,000 --> 00:01:34,400
To guess what code does if you've forgotten right?

29
00:01:34,400 --> 00:01:39,100
So if I see a function and it's named a particular way and it takes a

30
00:01:39,100 --> 00:01:41,000
certain parameters in a certain order.

31
00:01:41,600 --> 00:01:44,800
All of those things are like Clues to me about how that function

32
00:01:44,800 --> 00:01:46,300
probably was implemented.

33
00:01:46,300 --> 00:01:49,900
And the closer, you can stay to having consistency in the code that

34
00:01:49,900 --> 00:01:50,200
works.

35
00:01:50,200 --> 00:01:54,300
That way, the less you have to remember about your code base, right?

36
00:01:54,800 --> 00:01:58,100
And so there's no way to do that perfectly, right.

37
00:01:58,100 --> 00:01:59,100
You can't really

38
00:02:01,500 --> 00:02:03,300
Eliminate all surprises.

39
00:02:04,200 --> 00:02:07,500
If you work on enough code and you make enough code, which I

40
00:02:07,500 --> 00:02:08,300
definitely do.

41
00:02:09,400 --> 00:02:13,300
You will forget stuff and you will forget some important things and

42
00:02:13,300 --> 00:02:17,000
you will get bugs because you forgot something and that's just the

43
00:02:17,000 --> 00:02:19,000
nature of the Beast and it's nothing to be worried about.

44
00:02:19,000 --> 00:02:24,100
But you do want to try to minimize that sort of thing because just in

45
00:02:24,100 --> 00:02:27,500
general, even from day-to-day coding, it tends to be pretty valuable

46
00:02:28,700 --> 00:02:30,000
to sort of have

47
00:02:30,200 --> 00:02:35,200
Of an expectation about what code does and to have that expectation

48
00:02:35,200 --> 00:02:36,100
usually be correct.

49
00:02:36,100 --> 00:02:39,700
It just saves a lot of mental energy and it prevents a lot of bugs

50
00:02:39,700 --> 00:02:40,600
that might happen.

51
00:02:41,800 --> 00:02:43,000
It's just a nice thing.

52
00:02:43,600 --> 00:02:47,800
So, let's just take a quick look at where we sort of left off.

53
00:02:48,100 --> 00:02:53,000
And you can see we've got our, our sort of game are running care, and

54
00:02:53,000 --> 00:02:55,900
if I remember correctly, we sort of turned the debug system off.

55
00:02:56,300 --> 00:02:59,200
Just to leave everything in a state where anyone who wanted to play

56
00:02:59,200 --> 00:02:59,800
around with it.

57
00:03:00,000 --> 00:03:03,300
Since we hadn't quite finished it yet, could play around with it and

58
00:03:03,300 --> 00:03:03,900
be fine with that.

59
00:03:03,900 --> 00:03:08,400
So what we want to do first is turn the debug system back on.

60
00:03:09,400 --> 00:03:13,600
And we've sort of have this debug, we just just at the end, we sort of

61
00:03:13,600 --> 00:03:17,400
pulled it back out the debug system, all kind of exists in here,

62
00:03:17,400 --> 00:03:18,000
right?

63
00:03:18,000 --> 00:03:22,100
And we've got some pound Defiance which turn it on and off, you can

64
00:03:22,100 --> 00:03:22,500
see that.

65
00:03:22,500 --> 00:03:24,100
Here's the one that actually turned it off.

66
00:03:24,100 --> 00:03:26,400
So if I do that, we can turn it back on again.

67
00:03:27,500 --> 00:03:31,100
And now we're building but I suspect we eventually crash or something

68
00:03:31,100 --> 00:03:31,500
like this.

69
00:03:31,500 --> 00:03:32,600
I would, I would think.

70
00:03:33,000 --> 00:03:33,800
Yeah, there we go.

71
00:03:34,300 --> 00:03:37,800
And so what I believe we stopped if I remember correctly where we

72
00:03:37,800 --> 00:03:41,000
actually stopped was that we were processing frames.

73
00:03:41,000 --> 00:03:42,800
Now we were actually processing them.

74
00:03:45,300 --> 00:03:46,400
Fully incrementally.

75
00:03:47,800 --> 00:03:51,500
But we had not actually gotten to the point where we freed everything,

76
00:03:52,000 --> 00:03:57,000
so we would get to to a circumstance where, you know, we were building

77
00:03:57,000 --> 00:04:02,600
up frames incrementally, but then nobody would ever actually free any

78
00:04:02,600 --> 00:04:04,500
memory taken up by those frames.

79
00:04:04,600 --> 00:04:09,300
So eventually you get enough frames in the debug buffer and you're

80
00:04:09,300 --> 00:04:10,700
going to run out of Arena space, right?

81
00:04:10,700 --> 00:04:12,700
And that's exactly what that was right here, right?

82
00:04:12,700 --> 00:04:16,399
Jesse, we're just running along its collecting debug events and doing

83
00:04:16,399 --> 00:04:17,100
whatever else.

84
00:04:17,100 --> 00:04:17,399
It's

85
00:04:17,500 --> 00:04:18,000
To do.

86
00:04:18,200 --> 00:04:21,100
And then you end up in a situation, like, you see here, where it's

87
00:04:21,100 --> 00:04:24,200
like, okay, we, you know, we've we sort of

88
00:04:25,400 --> 00:04:28,000
run out of the memory that we had to work with.

89
00:04:28,300 --> 00:04:33,400
Now one thing that's a little troubling to me and I'm not really sure,

90
00:04:33,400 --> 00:04:33,800
I guess.

91
00:04:33,800 --> 00:04:36,000
Okay, so it's not actually, I suppose it's not actually necessary

92
00:04:36,000 --> 00:04:39,600
trouble to me, but it's just a little weird to think about this.

93
00:04:39,800 --> 00:04:44,200
You can see that the this last frame time here, looks kind of weird

94
00:04:44,200 --> 00:04:46,400
and garbagey so I'm kind of interested to know.

95
00:04:46,400 --> 00:04:49,700
I guess we'll see when I actually go through and finish this up.

96
00:04:49,700 --> 00:04:52,700
We'll see what's actually going on there but that's just a little

97
00:04:52,700 --> 00:04:54,900
weird to me because you can tell the frame rate.

98
00:04:55,300 --> 00:04:56,300
That frame rate.

99
00:04:56,300 --> 00:04:59,900
If it actually the frame time was actually threaded, Ms, that would

100
00:04:59,900 --> 00:05:03,400
imply, you know, somewhere between four, three and four frames a

101
00:05:03,400 --> 00:05:04,200
second, right?

102
00:05:04,200 --> 00:05:05,500
If I'm if I'm doing that right.

103
00:05:06,700 --> 00:05:10,400
So three or four frames a second, this is running way too fast for

104
00:05:10,400 --> 00:05:10,600
that.

105
00:05:10,600 --> 00:05:12,000
That's way faster than three.

106
00:05:12,000 --> 00:05:12,600
Firms is like.

107
00:05:12,700 --> 00:05:13,600
So that's wrong.

108
00:05:13,700 --> 00:05:17,000
Now it may just be displaying, only the first frame and maybe the

109
00:05:17,000 --> 00:05:20,800
first frame took longer for various reasons but I just saying like

110
00:05:20,900 --> 00:05:22,700
anytime I see some like that, I get a little bit.

111
00:05:25,100 --> 00:05:25,700
Little bit nervous.

112
00:05:25,700 --> 00:05:29,200
So I'm just going to put that in the back of everyone's mind is

113
00:05:29,200 --> 00:05:31,700
something that shouldn't have been what it was.

114
00:05:31,700 --> 00:05:35,200
And so when we sort of finish doing this, if we were still seeing

115
00:05:35,200 --> 00:05:39,600
that, that probably is something that warrants investigation.

116
00:05:41,300 --> 00:05:43,400
All right, so let's go ahead and jump back.

117
00:05:43,600 --> 00:05:49,900
I think we left even some to dues in here for ourselves which meant

118
00:05:50,400 --> 00:05:53,100
mentioned about sort of the freeing you can kind of see here like

119
00:05:53,100 --> 00:05:56,100
okay, like we don't even have this free variable group stuff

120
00:05:56,100 --> 00:05:57,000
implemented.

121
00:05:57,100 --> 00:05:59,800
So if I remember correctly, basically,

122
00:06:00,000 --> 00:06:04,600
Want to do is take this like free frame thing and we want to sort of

123
00:06:04,600 --> 00:06:09,500
make this actually a actually work and be actually be called because I

124
00:06:09,500 --> 00:06:10,400
suspect.

125
00:06:10,500 --> 00:06:14,900
If I remember where we were at, I suspect we don't actually ever

126
00:06:14,900 --> 00:06:18,900
really call that and I'm looking through here and I'm seeing that I'm

127
00:06:18,900 --> 00:06:23,400
correct about that because this right here, all this is is the time

128
00:06:23,400 --> 00:06:27,400
when, if you were paused it will throw out the latest frames so that

129
00:06:27,400 --> 00:06:28,900
they don't take up any space.

130
00:06:28,900 --> 00:06:29,800
Don't do anything.

131
00:06:30,000 --> 00:06:30,000
Hey.

132
00:06:31,600 --> 00:06:37,100
But if you, you know, if you think about it, when you do, if that's

133
00:06:37,100 --> 00:06:40,200
the only time if they're getting free, then there's no time when we're

134
00:06:40,200 --> 00:06:43,700
actually freeing the frames in sort of that circular in that in that

135
00:06:43,700 --> 00:06:44,600
rolling buffer, right?

136
00:06:44,600 --> 00:06:50,800
There's no time when we're actually doing any sort of freeing of the

137
00:06:51,300 --> 00:06:54,200
the frames that are building up, which is what we want to do, right?

138
00:06:54,200 --> 00:06:58,900
Like we want to free frames as they build up so that we don't run out

139
00:06:58,900 --> 00:06:59,600
of that memory.

140
00:07:00,400 --> 00:07:00,600
So

141
00:07:01,400 --> 00:07:02,700
Those are the two things we need to do.

142
00:07:02,700 --> 00:07:08,500
We need to call free frame at the right times and we need to have have

143
00:07:08,500 --> 00:07:09,900
it actually do the free.

144
00:07:09,900 --> 00:07:12,300
So this for example, needs to happen.

145
00:07:13,300 --> 00:07:18,000
All right, so you can see we got to to to do is here as well.

146
00:07:20,000 --> 00:07:21,200
All right, so that's what we've got to do.

147
00:07:22,000 --> 00:07:24,500
And we also have a to do here, says remember to copy out the debug

148
00:07:24,500 --> 00:07:29,200
events into the debug variable links and what that was talking about

149
00:07:29,200 --> 00:07:30,100
this again.

150
00:07:30,100 --> 00:07:31,000
I guess so.

151
00:07:33,400 --> 00:07:37,800
Despite what I said, I guess what I'm sort of actually seeing here as

152
00:07:37,800 --> 00:07:40,400
I'm discussing this, as I guess, my memory for the code actually, is

153
00:07:40,400 --> 00:07:41,300
pretty good.

154
00:07:42,200 --> 00:07:45,200
I remember all this stuff, so I don't know, I guess two weeks is not

155
00:07:45,200 --> 00:07:46,100
long enough for me to have.

156
00:07:46,100 --> 00:07:49,800
Paged it out, which I suppose is a little bit surprising to me at my

157
00:07:49,800 --> 00:07:50,700
age, but I don't know.

158
00:07:50,900 --> 00:07:53,300
I guess that maybe I'm just getting lucky who knows.

159
00:07:53,400 --> 00:07:57,300
Anyway, point being, if you remember how the system worked at the end,

160
00:07:57,300 --> 00:08:00,300
what we decided to do, as we sort of started boiling down and like I

161
00:08:00,300 --> 00:08:02,300
said, we were kind of going through this period of like simplifying

162
00:08:02,300 --> 00:08:02,900
things going to get

163
00:08:03,500 --> 00:08:09,300
Although more sort of straightforward usable and a little more, you

164
00:08:09,300 --> 00:08:11,000
know, better structured and not.

165
00:08:11,000 --> 00:08:11,700
So sprawling.

166
00:08:12,700 --> 00:08:15,700
What we did here is we took the debug table and we had all the events

167
00:08:15,700 --> 00:08:17,100
that were being recorded.

168
00:08:17,100 --> 00:08:20,000
We used to have like, all the frames would just sort of sit there and

169
00:08:20,000 --> 00:08:20,900
those event arrays.

170
00:08:21,000 --> 00:08:23,600
So, as you sort of streamed out into the event, to raise the event,

171
00:08:23,600 --> 00:08:25,500
raised were actually with the source data was, then we have the

172
00:08:25,500 --> 00:08:27,200
co-leaders that would kind of run on that.

173
00:08:27,200 --> 00:08:29,800
It was kind of this all big proliferation of stuff.

174
00:08:29,800 --> 00:08:32,500
So we did the very end there as we just reduce it down to just two

175
00:08:32,500 --> 00:08:32,799
buffers.

176
00:08:33,000 --> 00:08:38,000
It's so basically, the game code well, or, you know, all the code I

177
00:08:38,000 --> 00:08:42,100
should say to the non debug code is writing into one of those event

178
00:08:42,100 --> 00:08:45,400
buffers while we are using the other event buffer, right?

179
00:08:45,400 --> 00:08:49,800
So it's just a, just a straight ping pong buffer scheme only two

180
00:08:49,800 --> 00:08:52,500
buffers, there's one that's being written to and one that's being read

181
00:08:52,500 --> 00:08:54,300
from at any given time, then that's it.

182
00:08:55,200 --> 00:08:59,700
And what that means is that as we are preserving those events,

183
00:09:00,000 --> 00:09:04,100
For later viewing in the debug system, we end up in a scenario where

184
00:09:04,100 --> 00:09:08,100
those debug events themselves cannot actually be used out of this

185
00:09:08,100 --> 00:09:11,700
buffers anymore because as soon as you're more than one frame back, if

186
00:09:11,700 --> 00:09:15,100
you're looking at four frames back, five frames back, the events are

187
00:09:15,100 --> 00:09:16,600
gone, right?

188
00:09:17,100 --> 00:09:21,400
So when we do the collation, we actually have to move the debug event

189
00:09:21,400 --> 00:09:25,000
out of here and into the actual permanent storage.

190
00:09:26,200 --> 00:09:29,600
Of those those debug variables that we had.

191
00:09:29,600 --> 00:09:29,800
Right?

192
00:09:29,800 --> 00:09:34,900
So that the actual sort of collation step needs to actually store the

193
00:09:34,900 --> 00:09:41,900
debug event where as I think if I'm not mistaken the way that this

194
00:09:41,900 --> 00:09:47,100
works at the moment, is it actually just references that debug event

195
00:09:47,100 --> 00:09:47,800
directly.

196
00:09:47,800 --> 00:09:49,800
So if you take a look at

197
00:09:51,700 --> 00:09:53,500
This code here, right?

198
00:09:58,900 --> 00:10:02,900
If you take a look at this code here, what you can see is that we have

199
00:10:02,900 --> 00:10:05,100
sort of these debug for everything that sort of thing.

200
00:10:05,300 --> 00:10:08,500
And the debug variable ink just points to a particular debug event,

201
00:10:08,800 --> 00:10:09,300
right?

202
00:10:09,800 --> 00:10:14,100
And that's not actually necessarily bad because we probably want to

203
00:10:14,100 --> 00:10:18,200
continue doing that since the debug event is the piece of actual data,

204
00:10:18,300 --> 00:10:18,800
right?

205
00:10:19,000 --> 00:10:20,600
That we're trying to keep their whatever.

206
00:10:21,800 --> 00:10:27,500
But the thing about that is that this debug variable link is, you

207
00:10:27,500 --> 00:10:32,100
know, there could be multiple of those that are all sort of pointing

208
00:10:32,100 --> 00:10:33,300
to the same piece of data, right?

209
00:10:33,300 --> 00:10:35,800
Because we have that thing, we can pull off piece of the UI.

210
00:10:35,800 --> 00:10:39,500
We sort of did that stuff before all of those pieces of the you.

211
00:10:39,500 --> 00:10:42,400
I might want to point at the same piece of data and so we you know

212
00:10:42,400 --> 00:10:45,400
it's not necessarily bad that it's a pointer right?

213
00:10:46,300 --> 00:10:48,300
Because we could just go like that and embed the data in.

214
00:10:48,300 --> 00:10:50,500
So it's not necessarily bad that it's a pointer but

215
00:10:52,200 --> 00:10:55,700
If if we do, in fact, even as a pointer, we need to, at least make

216
00:10:55,700 --> 00:10:59,900
space for wherever that debug event actually is supposed to go, right?

217
00:10:59,900 --> 00:11:05,900
And so there's that so I don't know again, that's the, that's the,

218
00:11:06,600 --> 00:11:09,500
that's the sort of thing that we're I don't know.

219
00:11:09,800 --> 00:11:11,800
I want to say, cut sort of wrestling with here.

220
00:11:12,000 --> 00:11:15,600
That's that's the sort of part that's that we're kind of going back

221
00:11:15,600 --> 00:11:19,400
and forth on, we know that these debug variable links will all sort of

222
00:11:19,600 --> 00:11:21,100
are things that kind of get allocated.

223
00:11:21,100 --> 00:11:21,300
And we

224
00:11:21,400 --> 00:11:23,300
That we have these sort of standing structures there.

225
00:11:23,300 --> 00:11:26,300
We know that we have debug events that are kind of getting written out

226
00:11:26,300 --> 00:11:28,600
and then we were sort of pointing at those is actual data.

227
00:11:28,600 --> 00:11:32,500
And then we also have this kind of concept of the collation step that

228
00:11:32,500 --> 00:11:35,200
runs over things and sort of tries to line up events with other events

229
00:11:35,200 --> 00:11:36,600
and do other sorts of stuff like that.

230
00:11:36,600 --> 00:11:40,900
And again, it's a very complex system and it's been sort of a

231
00:11:40,900 --> 00:11:44,400
winnowing process of figuring out how those things have to sort of

232
00:11:44,400 --> 00:11:45,000
come together.

233
00:11:45,000 --> 00:11:51,100
And so, it really is just a sort of, it really is a kind of

234
00:11:51,400 --> 00:11:57,500
fficult thing to sort of understand or sort of to to know exactly what

235
00:11:57,500 --> 00:11:59,800
the right thing is to do because again,

236
00:12:00,000 --> 00:12:03,500
You also look at sort of the way that this debug frame stuff works.

237
00:12:03,700 --> 00:12:07,500
It's tempting to say that the way that we were doing it before is

238
00:12:07,500 --> 00:12:08,900
actually how you might want to do it.

239
00:12:08,900 --> 00:12:12,900
Like, you could, it's tempting to say well, okay, could we not just

240
00:12:12,900 --> 00:12:15,300
make a giant circular buffer of the debug event.

241
00:12:15,300 --> 00:12:19,100
So the debug events all kind of go into that buffer, right?

242
00:12:19,200 --> 00:12:21,000
And then we just point back at them directly.

243
00:12:21,600 --> 00:12:26,800
The reason that I'm trending away from that is because when we did the

244
00:12:26,800 --> 00:12:29,200
collapse down to just having the debug events,

245
00:12:30,000 --> 00:12:34,500
I felt like it may have been a little bit too much of a collapse.

246
00:12:34,700 --> 00:12:37,900
And the reason for that is that when we actually collate things

247
00:12:37,900 --> 00:12:43,100
together, we're probably adding additional stuff there, right?

248
00:12:43,100 --> 00:12:46,700
And so, when we kind of look at what happens in sort of the debug

249
00:12:46,700 --> 00:12:48,900
interface stuff and and that sort of thing,

250
00:12:50,100 --> 00:12:54,000
When we look at what goes on here, it's unclear that we really want,

251
00:12:54,000 --> 00:12:56,200
you know that this is really enough, right?

252
00:12:56,200 --> 00:13:00,400
This is not the thing that really store has enough information so that

253
00:13:00,400 --> 00:13:03,600
collation step tends to sort of amplify the data or at least connected

254
00:13:03,600 --> 00:13:07,800
up and want to sort of have a more complicated structure than the

255
00:13:07,800 --> 00:13:10,600
things that we're writing to the debug log, which are meant to be as

256
00:13:10,600 --> 00:13:11,700
small as possible, right?

257
00:13:11,700 --> 00:13:15,600
We want those to be fairly concise and at the moment they're actually

258
00:13:15,600 --> 00:13:18,900
probably bigger than we even really want them to be because we haven't

259
00:13:18,900 --> 00:13:19,700
tried to do anything.

260
00:13:19,900 --> 00:13:24,000
Make this Union, say, for example, actually be more compressed so that

261
00:13:24,000 --> 00:13:26,400
it only takes up the amount of spot size is actually using.

262
00:13:26,400 --> 00:13:28,600
Which again, is something we could do when we're writing this out,

263
00:13:28,600 --> 00:13:31,600
that's relatively cheap for us to do, right?

264
00:13:33,300 --> 00:13:37,000
So again, like I said, the debug system, this is by far the most

265
00:13:37,000 --> 00:13:40,000
complicated structural thing that we've done, and it's the reason that

266
00:13:40,000 --> 00:13:43,500
I wanted to do it is just to sort of show and also I'm doing something

267
00:13:43,500 --> 00:13:47,200
that I, you know, this is not the style of debug system that I've ever

268
00:13:47,200 --> 00:13:47,800
done before.

269
00:13:48,200 --> 00:13:51,100
So I just want to kind of show how many times you tend to kind of work

270
00:13:51,100 --> 00:13:51,800
through these things.

271
00:13:53,100 --> 00:13:57,000
This is how architectural programming works when you're trying to

272
00:13:57,000 --> 00:13:59,800
figure out a new architecture for something and you're not sure how it

273
00:13:59,800 --> 00:14:02,500
goes, you go back and forth many times.

274
00:14:02,700 --> 00:14:07,100
Things and you have to be willing to do that because if you don't, you

275
00:14:07,100 --> 00:14:09,500
will never get to a good solution, right?

276
00:14:09,500 --> 00:14:12,800
You'll always kind of be stuck with sort of the basic whatever.

277
00:14:12,800 --> 00:14:16,600
First passed thing is, you'll never really get to the point where you

278
00:14:16,600 --> 00:14:19,000
kind of break through that and get to something, that's better that's

279
00:14:19,000 --> 00:14:20,500
on the other side, right?

280
00:14:21,400 --> 00:14:22,100
And so yeah.

281
00:14:22,200 --> 00:14:25,200
So again, I think nothing is still set in stone.

282
00:14:25,400 --> 00:14:27,300
It's really just a process of winning way down.

283
00:14:27,300 --> 00:14:30,500
And I kind of want to just sort of go go back and explain sort of what

284
00:14:30,500 --> 00:14:31,300
that means there.

285
00:14:32,700 --> 00:14:33,300
As we go.

286
00:14:33,600 --> 00:14:35,400
So I don't know about that, right?

287
00:14:35,400 --> 00:14:38,400
I don't know if that's the right thing or not, but it just sort of

288
00:14:38,400 --> 00:14:41,300
seems like that's sort of where we've gone back and forth on it twice.

289
00:14:41,500 --> 00:14:45,300
It seems like where it sort of wants to end up is, you know, don't try

290
00:14:45,300 --> 00:14:48,000
to force these two things to be the same thing when they're not

291
00:14:48,000 --> 00:14:49,000
actually the same thing.

292
00:14:49,200 --> 00:14:53,000
We're building these sort of arbitrary structures up that, you know,

293
00:14:53,000 --> 00:14:56,100
we want to try to collate into more usable things that can be

294
00:14:56,100 --> 00:14:59,700
displayed or can be, you know, that we can do whatever with, you know

295
00:14:59,700 --> 00:14:59,800
me.

296
00:15:00,000 --> 00:15:02,600
Maybe I'm missing something there.

297
00:15:02,700 --> 00:15:06,800
Maybe what I should be doing is just keeping all the debug events in a

298
00:15:06,800 --> 00:15:09,500
giant rolling buffer because then it would be more efficient if you

299
00:15:09,500 --> 00:15:12,800
always just kind of worked out of that buffer but maybe not.

300
00:15:12,900 --> 00:15:13,400
Right?

301
00:15:13,600 --> 00:15:19,300
And so that's just kind of I guess that's that's a there's really

302
00:15:19,300 --> 00:15:22,000
nothing I can say about that other than it's sort of a wait-and-see

303
00:15:22,000 --> 00:15:22,300
thing.

304
00:15:23,800 --> 00:15:26,900
So, so that's where we're at the moment.

305
00:15:26,900 --> 00:15:30,100
And so, what I want to do now is kind of go through here and, and

306
00:15:30,100 --> 00:15:33,100
start to push on this a little bit and try to get these sorts of

307
00:15:33,100 --> 00:15:34,500
things implemented, a little bit more.

308
00:15:35,000 --> 00:15:37,800
One thing I will say is that, when we're doing these discs, debug

309
00:15:37,800 --> 00:15:38,100
record.

310
00:15:38,100 --> 00:15:41,700
Coalition, one thing that's kind of interesting about it when we look

311
00:15:41,700 --> 00:15:46,200
at it here is and I think this may sort of again suggests a little bit

312
00:15:46,200 --> 00:15:50,600
of how we move forward on this part of the design as well.

313
00:15:51,200 --> 00:15:53,400
One thing that I was thinking is really what we

314
00:15:53,600 --> 00:15:58,100
Probably want to do most of the time as well is we want to be able to

315
00:15:58,100 --> 00:16:00,300
look at things over multiple frames.

316
00:16:00,300 --> 00:16:02,900
Probably like the typical thing that you're going to want to do, for

317
00:16:02,900 --> 00:16:05,900
example like especially with something like a performance counter or

318
00:16:05,900 --> 00:16:08,800
anything like that or even something like a variable.

319
00:16:08,800 --> 00:16:12,500
Just even that was a gameplay variable of some kind that had nothing

320
00:16:12,500 --> 00:16:15,200
to do with performance with such as is just something that you wanted

321
00:16:15,200 --> 00:16:18,000
to see if you want to look at it over time.

322
00:16:18,000 --> 00:16:21,500
Typically you're looking at it from the standpoint of the of the

323
00:16:21,500 --> 00:16:23,300
particular quantity involved.

324
00:16:23,500 --> 00:16:23,900
Right.

325
00:16:23,900 --> 00:16:25,600
And not in terms of the frame.

326
00:16:26,600 --> 00:16:30,900
Because usually the frame has like all this data in it and I typically

327
00:16:30,900 --> 00:16:33,200
don't want to look at the whole frame.

328
00:16:33,300 --> 00:16:36,400
What I'm doing is I'm looking at a particular piece of code and I'm

329
00:16:36,400 --> 00:16:39,000
trying to debug it or I'm trying to analyze it in some way that's

330
00:16:39,000 --> 00:16:39,800
important.

331
00:16:40,100 --> 00:16:44,000
And so I'm typically focusing on some particular part of that code,

332
00:16:44,000 --> 00:16:44,500
right?

333
00:16:44,600 --> 00:16:47,400
I'm saying here, is this variable, you know, like let's say we're

334
00:16:47,400 --> 00:16:50,300
optimizing something and I'm looking at a particular performance

335
00:16:50,300 --> 00:16:54,400
counter or particular whatever I want to look at that particular thing

336
00:16:54,400 --> 00:16:56,200
across multiple frames probably

337
00:16:56,300 --> 00:16:58,800
I want to see, like, what was it, you know, maybe like a graph over

338
00:16:58,800 --> 00:17:01,000
the last sixty, four frames, or whatever it is.

339
00:17:01,200 --> 00:17:04,800
I want to see, you know, where the spike was or how it was performing,

340
00:17:04,800 --> 00:17:07,000
an average or whatever, you know, these sorts of things.

341
00:17:08,000 --> 00:17:10,900
If we're talking about that sort of thing, then when we're collating

342
00:17:10,900 --> 00:17:14,400
debug records, as we go through here and we do this collation as we

343
00:17:14,400 --> 00:17:15,400
do, right?

344
00:17:17,300 --> 00:17:21,700
What we might want to start doing is taking anything, that's a debug

345
00:17:21,900 --> 00:17:27,500
event that we see in here and sort of moving it out into, like a list

346
00:17:27,500 --> 00:17:32,100
or a sort of an aggregation that's based on whichever variable it was

347
00:17:32,100 --> 00:17:35,400
so that we would just have one standing structure that ends up being

348
00:17:35,400 --> 00:17:36,100
created.

349
00:17:36,300 --> 00:17:40,700
That is like, here are all of the quantities or elements that the

350
00:17:40,700 --> 00:17:42,100
debug system is tracking.

351
00:17:42,500 --> 00:17:45,300
And each one of them, sort of shows overtime, right?

352
00:17:45,600 --> 00:17:46,700
And you can see,

353
00:17:46,800 --> 00:17:49,500
The other thing being true as well, whereas sometimes, we might want

354
00:17:49,500 --> 00:17:51,300
to see the things happening over time, right.

355
00:17:51,300 --> 00:17:55,900
So I feel like, one way of conceptualizing, what I think we would want

356
00:17:55,900 --> 00:17:59,700
to do as we try to sort of lock this down into, what the

357
00:18:00,000 --> 00:18:03,300
Form is that we're going to be using as we go forward in the game.

358
00:18:04,900 --> 00:18:08,800
Is to think about that sort of dichotomy there, where we have these

359
00:18:08,800 --> 00:18:12,700
debug events, they're coming in, in a stream, we're trying to pull

360
00:18:12,700 --> 00:18:16,800
them out and put them into a sort of some sort of a structure that can

361
00:18:16,800 --> 00:18:19,400
be viewed in either of those two ways.

362
00:18:19,500 --> 00:18:23,400
So in addition to just having it be a conceptualization of like the

363
00:18:23,400 --> 00:18:24,400
frames that happen over time.

364
00:18:24,400 --> 00:18:26,600
We can see what happened in a particular frame.

365
00:18:27,100 --> 00:18:30,400
It's also the constant that way, we can pick out one of these things

366
00:18:30,500 --> 00:18:31,500
and view it the other way.

367
00:18:31,500 --> 00:18:34,100
So it's kind of like a pivoting sort of a

368
00:18:34,900 --> 00:18:38,000
Effect, where we can look at it from the perspective of time, or from

369
00:18:38,000 --> 00:18:42,900
the perspective of the element and the other one becomes the other

370
00:18:42,900 --> 00:18:43,300
axis.

371
00:18:43,300 --> 00:18:46,000
So if we're looking at it from the perspective of time, we have the

372
00:18:46,000 --> 00:18:48,400
elements sort of coming across and we're looking at it from the

373
00:18:48,400 --> 00:18:51,500
perspective of the, the elements here, it's like time going across

374
00:18:52,100 --> 00:18:52,900
that sort of thing.

375
00:18:52,900 --> 00:18:56,100
I think that's sort of how we would want to view it and I think we're

376
00:18:56,100 --> 00:18:57,500
pretty close to that.

377
00:19:01,500 --> 00:19:07,900
And again that's the thing that sort of suggests to me that probably

378
00:19:07,900 --> 00:19:13,300
it was the right idea to stream out the events and then copy them out.

379
00:19:13,400 --> 00:19:18,500
But at the same time, I just don't know because in equivalently, valid

380
00:19:18,500 --> 00:19:24,100
way to approach this problem, I think is to just expand the notion of

381
00:19:24,100 --> 00:19:28,600
the debug event to have extra space here and then thread the debug

382
00:19:28,600 --> 00:19:30,400
events with that information.

383
00:19:31,200 --> 00:19:35,800
The fact, so the Coalition is just sweeping through that buffer, kind

384
00:19:35,800 --> 00:19:42,100
of like, you know, placing pointer threads through the actual debug

385
00:19:42,100 --> 00:19:45,900
events by like, you know, there's just space left up here, or

386
00:19:45,900 --> 00:19:46,300
whatever.

387
00:19:46,300 --> 00:19:49,000
You know, at the beginning of each debug event, that's not touched.

388
00:19:49,300 --> 00:19:50,700
So it doesn't cost anything.

389
00:19:50,700 --> 00:19:53,100
When the debug streaming is happening, it's just skipping over it.

390
00:19:53,100 --> 00:19:56,200
So it's not taking up any additional memory bandwidth during streaming

391
00:19:56,400 --> 00:19:59,100
and then when collation comes through it, just threads that stuff

392
00:19:59,100 --> 00:20:00,300
together, right?

393
00:20:02,600 --> 00:20:03,500
And so I don't know.

394
00:20:03,900 --> 00:20:09,500
I really just don't know and so I'm not sure, I'm not sure we're doing

395
00:20:09,500 --> 00:20:11,000
the right thing or the wrong thing here.

396
00:20:11,000 --> 00:20:18,100
I just a really, really really tough call and

397
00:20:20,100 --> 00:20:24,900
And I don't know, I I do not know but again I'm willing to kind of

398
00:20:24,900 --> 00:20:26,200
like flip it again.

399
00:20:26,200 --> 00:20:29,000
If we need to if we decide that we're just kind of wasting time here

400
00:20:29,000 --> 00:20:32,500
with this additional stuff that we're doing, that's totally fine.

401
00:20:32,700 --> 00:20:34,500
You know if you have to you have to.

402
00:20:35,600 --> 00:20:41,200
So okay when we are creating this these frames here, you can see that

403
00:20:41,200 --> 00:20:44,600
sort of the the frame stuff, what the main thing that we were testing

404
00:20:44,600 --> 00:20:48,800
out with this was the ability to sort of make this this sort of thing

405
00:20:48,800 --> 00:20:49,800
happen where we

406
00:20:49,900 --> 00:20:52,900
we have all of these sort of pieces of debug information happening on

407
00:20:52,900 --> 00:20:53,300
the frame.

408
00:20:54,700 --> 00:20:55,300
Right?

409
00:20:55,700 --> 00:20:59,000
And at the moment, those are just showing like for a particular frame.

410
00:20:59,000 --> 00:20:59,800
Here are the the

411
00:21:00,000 --> 00:21:02,900
But values that we were sort of that got announced during the frame.

412
00:21:03,300 --> 00:21:05,400
So if we want to kind of move forward with that,

413
00:21:07,100 --> 00:21:09,200
let's just kind of go ahead and finish up what we're doing there.

414
00:21:09,400 --> 00:21:13,600
What we need to be able to do is a have some way of freeing the The

415
00:21:13,800 --> 00:21:15,200
Knowing When We're supposed to free the frame.

416
00:21:15,200 --> 00:21:17,500
So, like I said before, we've got to be able to free the frame here.

417
00:21:18,200 --> 00:21:20,000
So, what I'll do is, I'll find a location.

418
00:21:20,400 --> 00:21:23,200
I'll find a particular way where I want to start freaking the frame,

419
00:21:23,200 --> 00:21:25,200
so we don't build up an infinite number of them.

420
00:21:25,500 --> 00:21:28,700
And then what we should do is as soon as we get soon as we do that, we

421
00:21:28,700 --> 00:21:31,600
should then hit this assertion because when it tries to free the

422
00:21:31,600 --> 00:21:34,300
frame, it will fail to free the frame because it'll hit the certian

423
00:21:34,300 --> 00:21:36,500
that it wasn't implemented and then we'll go Implement that.

424
00:21:37,400 --> 00:21:42,000
And if we take a look, just to see here, and I suppose, this is

425
00:21:42,000 --> 00:21:44,600
probably at in handmade, debug dedic.

426
00:21:44,600 --> 00:21:48,400
If I take a look at the debug frame, by the way, I'm totally

427
00:21:48,400 --> 00:21:49,300
jet-lagged as well.

428
00:21:49,300 --> 00:21:50,700
So you'll have to excuse me.

429
00:21:50,700 --> 00:21:56,100
If I'd gone during this Frame, just started during this some stream

430
00:21:56,100 --> 00:21:57,500
because that that will probably happen.

431
00:21:58,000 --> 00:22:00,200
So anyway, if we take a look at the debug frame here, you can see

432
00:22:00,200 --> 00:22:00,600
that.

433
00:22:00,700 --> 00:22:03,700
That really, if we look at it, we've got these these regions, the

434
00:22:03,700 --> 00:22:06,000
Region's aren't really doing anything at the moment that was like a

435
00:22:06,000 --> 00:22:06,500
holdover from

436
00:22:06,600 --> 00:22:08,000
Or old profiler thing.

437
00:22:08,500 --> 00:22:10,700
But so the only thing that really has to be freaking here at the

438
00:22:10,700 --> 00:22:13,600
moment is the debug variable group route group, because that's the

439
00:22:13,600 --> 00:22:16,300
thing that sort of holds that you I situation in there.

440
00:22:17,800 --> 00:22:18,300
Right.

441
00:22:23,600 --> 00:22:24,600
and so that,

442
00:22:26,000 --> 00:22:28,600
is the only thing that I actually had to be freed and

443
00:22:32,700 --> 00:22:33,900
looking at that.

444
00:22:35,400 --> 00:22:37,000
I would again, say

445
00:22:38,800 --> 00:22:44,100
That it's starting to taste to me like we're going to get closer.

446
00:22:44,300 --> 00:22:50,100
So what I'm envisioning, what sort of coming up in my head that that I

447
00:22:50,100 --> 00:22:54,200
think I was missing sort of, as we were sort of working this through

448
00:22:54,200 --> 00:22:57,100
before and we never quite touched on it.

449
00:22:57,200 --> 00:22:59,500
I'm, you know, I'm going to do, I'm going to bring up, I'm going to do

450
00:22:59,500 --> 00:22:59,800
it here.

451
00:22:59,800 --> 00:23:03,900
I'm going to bring up our Mischief.

452
00:23:04,400 --> 00:23:05,600
Let's take a look here.

453
00:23:05,600 --> 00:23:06,900
Blackboard a tart.

454
00:23:08,800 --> 00:23:15,100
So what I wow, that loaded crazy fast.

455
00:23:16,500 --> 00:23:17,600
How come that loaded?

456
00:23:17,600 --> 00:23:20,500
So fat normally Eunice, you guys have seen how long it takes mischief

457
00:23:20,500 --> 00:23:21,000
to load.

458
00:23:21,000 --> 00:23:23,200
Normally, it's all there.

459
00:23:24,700 --> 00:23:25,600
Weird.

460
00:23:26,500 --> 00:23:28,400
It's just me or was that kind of weird, guys?

461
00:23:29,800 --> 00:23:30,400
All right.

462
00:23:30,600 --> 00:23:31,900
Well, I'm you know what I'm gonna do?

463
00:23:32,100 --> 00:23:34,300
I'm gonna find a new area for us to start to.

464
00:23:34,300 --> 00:23:35,700
I want to put us right in here.

465
00:23:38,100 --> 00:23:40,100
See here to put us, right?

466
00:23:40,700 --> 00:23:41,200
Right here.

467
00:23:41,200 --> 00:23:41,600
Maybe.

468
00:23:41,900 --> 00:23:43,000
I think how big it do.

469
00:23:43,000 --> 00:23:45,400
I usually draw, I think I usually draw about that big.

470
00:23:46,000 --> 00:23:46,600
Would you say?

471
00:23:47,000 --> 00:23:47,800
Let's take a look.

472
00:23:48,700 --> 00:23:49,500
Let's take a look.

473
00:23:50,500 --> 00:23:51,000
Yeah.

474
00:23:51,400 --> 00:23:51,700
All right.

475
00:23:51,700 --> 00:23:52,500
I'm going to come in here.

476
00:23:53,500 --> 00:23:55,300
All right, so day 216.

477
00:23:57,400 --> 00:23:59,900
So, I just want to kind of underscores.

478
00:24:00,000 --> 00:24:04,400
Something that I think that I wasn't overtly recognizing before, but

479
00:24:04,400 --> 00:24:08,200
that was sort of implicit in the system that was causing, it was sort

480
00:24:08,200 --> 00:24:10,900
of preventing the design from progressing a little bit because, you

481
00:24:10,900 --> 00:24:14,300
know, as we sort of played around with things are pushing on things

482
00:24:14,300 --> 00:24:17,000
that would be never quite felt to me like was quite gelling.

483
00:24:18,100 --> 00:24:21,600
The way that I wanted to it and I think here is the part that I was

484
00:24:21,800 --> 00:24:27,800
sort of missing which is that like sort of the the concept of like a

485
00:24:27,800 --> 00:24:35,300
debug you know, sort of like a I want to say a debug element if you

486
00:24:35,300 --> 00:24:38,100
will was kind of a little nebulous.

487
00:24:38,800 --> 00:24:43,100
And I never really articulated before that whole thing about there

488
00:24:43,100 --> 00:24:45,800
being time and elements and those two things being similar.

489
00:24:46,000 --> 00:24:47,700
So what was happening is we

490
00:24:47,900 --> 00:24:50,800
I have a number of different things here, right?

491
00:24:50,900 --> 00:24:55,100
There's the debug events that happened in the log and we know that we

492
00:24:55,100 --> 00:24:58,300
at least have those because that's the source of the stuff but we

493
00:24:58,300 --> 00:24:59,800
don't really know anything else about them.

494
00:24:59,800 --> 00:25:01,300
We don't know what else they have to be.

495
00:25:01,300 --> 00:25:04,900
We only know that they have to dump the data that were eventually

496
00:25:04,900 --> 00:25:06,000
going to display.

497
00:25:06,100 --> 00:25:08,600
That's really all we know, right?

498
00:25:08,800 --> 00:25:11,000
So we know that that's going to happen and that's fine.

499
00:25:12,300 --> 00:25:16,000
But then we also have the concept of the debug you I right?

500
00:25:16,100 --> 00:25:19,500
So there was also you know these things are like just going into a log

501
00:25:19,500 --> 00:25:21,600
you know and we've got them and we don't really know much about them

502
00:25:21,600 --> 00:25:23,900
other than they've got sort of data in there and you know.

503
00:25:23,900 --> 00:25:27,100
So we've got there's some payload but everything else is like up in

504
00:25:27,100 --> 00:25:27,400
the air.

505
00:25:27,400 --> 00:25:28,200
What else they do?

506
00:25:28,200 --> 00:25:29,300
We don't know, right?

507
00:25:29,300 --> 00:25:34,400
We have the ability as The Architects of this to decide whether

508
00:25:34,400 --> 00:25:37,500
they're just straight payload or whether there's actually extra stuff

509
00:25:37,500 --> 00:25:39,400
in there and we've kind of gone back and forth on that a little bit.

510
00:25:39,400 --> 00:25:41,900
And so on, we then have the debug you, I

511
00:25:42,100 --> 00:25:42,500
Right?

512
00:25:42,600 --> 00:25:46,800
And that debug UI has stuff like, you know, hierarchies of stuff in

513
00:25:46,800 --> 00:25:50,600
that, you know, where we kind of have, you know, and sub hierarchies

514
00:25:50,600 --> 00:25:52,300
and whatever we kind of played around with that.

515
00:25:52,400 --> 00:25:55,500
Where we have, this is a sort of a hierarchical structure.

516
00:25:55,500 --> 00:25:57,200
It's not like this where it's linear.

517
00:25:57,300 --> 00:26:00,600
It's this kind of concept that things have parents and children, and

518
00:26:00,600 --> 00:26:01,000
whatever.

519
00:26:01,000 --> 00:26:02,300
And they can be expanded and collapsed.

520
00:26:02,300 --> 00:26:05,300
And they can show, you know, values in here, or whatever else happens.

521
00:26:05,300 --> 00:26:08,600
And we could drag, we just if we could drag and edit them, right?

522
00:26:08,600 --> 00:26:09,900
So we have that concept.

523
00:26:11,400 --> 00:26:12,100
All in there.

524
00:26:15,400 --> 00:26:20,700
And then we also have the concept of actually like a debug sort of, I

525
00:26:20,700 --> 00:26:22,900
want to say element, right?

526
00:26:22,900 --> 00:26:25,800
And this has been a little bit nebulous so far, but that's like, you

527
00:26:25,800 --> 00:26:30,600
know, this piece of UI right, is editing something, right, when we

528
00:26:30,600 --> 00:26:31,200
were doing that thing?

529
00:26:31,200 --> 00:26:34,100
Like, you know, we had, for example, in there, the debug camera

530
00:26:34,800 --> 00:26:35,700
distance.

531
00:26:36,400 --> 00:26:38,500
That was something that we were able to edit, right?

532
00:26:38,600 --> 00:26:41,200
We have the debug camera distance and you could drag the debug camera

533
00:26:41,200 --> 00:26:43,500
distance and it would change that value in the code.

534
00:26:43,900 --> 00:26:46,200
And so, it was like, kind of a real-time way, you could edit stuff,

535
00:26:46,200 --> 00:26:47,000
which was kind of nice.

536
00:26:47,000 --> 00:26:48,600
It was, it was sort of nice to have it in there.

537
00:26:48,700 --> 00:26:50,500
Originally, I thought we wouldn't really need it because we have Loop

538
00:26:50,500 --> 00:26:54,100
live coding, but there's something nice about being able to directly

539
00:26:54,100 --> 00:26:55,500
change a value, that might help us.

540
00:26:55,500 --> 00:26:57,900
When we're trying to do stuff like edit some colors of things in the

541
00:26:57,900 --> 00:26:58,200
game.

542
00:26:58,300 --> 00:26:59,800
You know that there's there's some Merit

543
00:27:00,000 --> 00:27:00,800
Do it, right?

544
00:27:02,000 --> 00:27:06,000
So if we think about this and we think about the fact that there's

545
00:27:06,000 --> 00:27:10,300
only here, the UI and the element are not necessarily the same thing,

546
00:27:10,400 --> 00:27:10,800
right?

547
00:27:10,800 --> 00:27:13,000
And that's kind of a little bit confusing, but we've never really

548
00:27:13,000 --> 00:27:16,400
quite defined exactly what that means.

549
00:27:16,900 --> 00:27:22,100
And so we were sort of having this problem where, you know, we've got

550
00:27:22,100 --> 00:27:26,100
these debug events and reprocessing, the debug events, they give rise

551
00:27:26,200 --> 00:27:27,700
to these debug elements, right?

552
00:27:27,700 --> 00:27:29,800
As we see something kind of come up in here,

553
00:27:30,000 --> 00:27:33,100
we're like, oh, whatever this thing is this value.

554
00:27:33,100 --> 00:27:37,000
Like if we see debug camera distance to open your, oh, that's a debug

555
00:27:37,000 --> 00:27:38,000
element, right?

556
00:27:38,300 --> 00:27:42,900
But these debug elements were only existing for as long as that, you

557
00:27:42,900 --> 00:27:44,100
know, State around.

558
00:27:44,300 --> 00:27:47,900
If on some frame we didn't see that it would suddenly disappear,

559
00:27:48,200 --> 00:27:48,800
right?

560
00:27:50,200 --> 00:27:51,400
And that's a little bit.

561
00:27:51,400 --> 00:27:56,600
Wonky in the sense that what I think we actually want to do is say

562
00:27:56,600 --> 00:27:59,100
that these things are permanent.

563
00:27:59,200 --> 00:28:01,300
I suspect that's what we actually want.

564
00:28:01,400 --> 00:28:01,800
I suspect.

565
00:28:01,800 --> 00:28:05,700
What we want to do is say that any time we see a debug element of some

566
00:28:05,700 --> 00:28:10,900
kind, it becomes a man like a matter of permanent record if you will.

567
00:28:10,900 --> 00:28:11,700
Right.

568
00:28:12,400 --> 00:28:16,400
So when we see one of these and we see debug camera distance, I think

569
00:28:16,400 --> 00:28:19,900
we want to create something that is the permanent concept of the debug

570
00:28:20,100 --> 00:28:24,900
A distance and the debug UI is a transient thing that sort of looks

571
00:28:24,900 --> 00:28:27,300
into here and edits that, right?

572
00:28:27,800 --> 00:28:33,900
And so when The Frame data goes away, what we actually want to go away

573
00:28:33,900 --> 00:28:38,100
as frames fall out of that sort of that rolling.

574
00:28:38,100 --> 00:28:43,700
Buffer is not the fact that there was a debug camera distance.

575
00:28:43,800 --> 00:28:48,000
I think we want that to persist what we want instead to go away, is

576
00:28:48,000 --> 00:28:49,800
just whatever its value was.

577
00:28:50,000 --> 00:28:52,300
Is on that frame, right?

578
00:28:53,800 --> 00:28:57,400
So, I think the thing that we actually want, right?

579
00:28:58,000 --> 00:29:01,700
Is we actually want something, which is kind of like this, this sort

580
00:29:01,700 --> 00:29:03,500
of table, right?

581
00:29:03,700 --> 00:29:07,600
Of, you know, we've got the debug elements here, whatever they are.

582
00:29:08,500 --> 00:29:13,500
And then you know in here we've sort of got the frame 0 1, 2, 3, and

583
00:29:13,500 --> 00:29:13,900
whatever.

584
00:29:13,900 --> 00:29:17,500
And the information that we have about this element on, this Frame

585
00:29:17,500 --> 00:29:18,600
goes in here, whatever.

586
00:29:19,000 --> 00:29:23,000
And these columns go away, right?

587
00:29:23,000 --> 00:29:23,100
So

588
00:29:23,200 --> 00:29:28,100
Of the words, my my notion of what this V bug element was on this

589
00:29:28,100 --> 00:29:32,000
Frame, that will go away, but this will not.

590
00:29:32,400 --> 00:29:37,200
And so that element of permanence was getting conflated, it was

591
00:29:37,200 --> 00:29:38,900
getting, it was partially in here.

592
00:29:38,900 --> 00:29:42,400
It was partially in here and partially in here, and it was like, it

593
00:29:42,400 --> 00:29:45,700
kind of half existed in half did in and who created it.

594
00:29:45,700 --> 00:29:49,100
And when, and it was just like, we weren't sort of concrete about

595
00:29:49,100 --> 00:29:49,600
that.

596
00:29:50,300 --> 00:29:53,100
But I think, you know, like I said, as I'm looking at

597
00:29:53,200 --> 00:29:53,800
At this.

598
00:29:54,800 --> 00:29:59,700
Now and perhaps this is just my brain coming back after two weeks.

599
00:30:00,000 --> 00:30:02,500
Thinking it has a good idea but it actually turns out that this is

600
00:30:02,500 --> 00:30:03,100
dumb.

601
00:30:03,900 --> 00:30:08,000
But you know, it's only one way to find out.

602
00:30:08,100 --> 00:30:12,300
I think that's what I want to sort of congeal to, right.

603
00:30:12,400 --> 00:30:16,000
That's where I want this this process to sort of end.

604
00:30:16,100 --> 00:30:17,500
I think that's what we need to do.

605
00:30:17,500 --> 00:30:21,000
Is basically make it so that we're creating a permanent sort of

606
00:30:21,000 --> 00:30:25,600
structure of elements that structure is based on what we see in the

607
00:30:25,600 --> 00:30:29,800
debug events, those debug events are tracked,

608
00:30:30,000 --> 00:30:33,700
Act as sort of existing over time.

609
00:30:34,600 --> 00:30:40,800
And as we sort of lose debug events, they fall out of sort of this

610
00:30:40,800 --> 00:30:44,800
this Tableau of some sorts, right?

611
00:30:45,900 --> 00:30:49,400
that is, I think the real thing that we were sort of missing

612
00:30:51,100 --> 00:30:53,700
So what that suggests to me?

613
00:30:55,100 --> 00:30:59,900
Now that I'm saying it is that that almost does sort of, that sort of

614
00:30:59,900 --> 00:31:04,300
starts to feel like we do want to, kind of just take this

615
00:31:05,000 --> 00:31:12,500
simplification one step further and and maybe actually keep the debug

616
00:31:12,500 --> 00:31:13,500
events actually in here.

617
00:31:13,500 --> 00:31:15,300
Not copy them, right?

618
00:31:15,700 --> 00:31:20,800
And so like this, debug table, for example, we actually do want to

619
00:31:20,800 --> 00:31:24,600
make the debug table, just be a giant buffer and you

620
00:31:24,800 --> 00:31:28,400
But the thing is, is the reason we weren't doing that because we don't

621
00:31:28,400 --> 00:31:31,800
have because it has to be a static.

622
00:31:32,800 --> 00:31:34,500
Is that a problem for us?

623
00:31:34,800 --> 00:31:39,400
And actually, no, because we do treat it as a static here.

624
00:31:39,600 --> 00:31:41,900
I don't know, we could avoid, we could make it something that gets

625
00:31:41,900 --> 00:31:43,100
allocated I suppose.

626
00:31:43,600 --> 00:31:44,600
I don't know point being

627
00:31:46,200 --> 00:31:46,400
Yeah.

628
00:31:46,400 --> 00:31:48,800
You know we easily could make that be something is allocated.

629
00:31:48,800 --> 00:31:54,300
It could actually be passed from the platform layer into the game now

630
00:31:54,300 --> 00:31:57,800
because we actually the we no longer need to know those counts or

631
00:31:57,800 --> 00:32:02,200
those sizes so that it may even be something that we actually would

632
00:32:02,200 --> 00:32:04,900
prefer to to have happen.

633
00:32:04,900 --> 00:32:09,100
But anyway so ignoring all that temporarily, let's just ignore that

634
00:32:09,100 --> 00:32:09,800
part.

635
00:32:10,900 --> 00:32:14,700
If we wanted to make this debug events just be a giant buffer.

636
00:32:14,900 --> 00:32:15,700
So you know

637
00:32:16,000 --> 00:32:16,900
Over the memory.

638
00:32:16,900 --> 00:32:20,600
We decide we set up side, 64 megabytes or whatever, for the debug

639
00:32:20,600 --> 00:32:21,500
system, right?

640
00:32:22,000 --> 00:32:27,000
This would just be a giant buffer of 64 megabytes worth of events.

641
00:32:27,200 --> 00:32:31,400
And when people write events in there, they just go ahead and write

642
00:32:31,400 --> 00:32:35,200
them linearly and rap, you know, the buffer, right?

643
00:32:36,700 --> 00:32:41,300
So as they're sort of writing those out, then all we do during

644
00:32:41,300 --> 00:32:47,100
collation is basically, you know, we thread through those events we

645
00:32:47,100 --> 00:32:48,000
thread through

646
00:32:50,400 --> 00:32:55,200
I want to say, like just basically like this, this, this Tableau here

647
00:32:55,200 --> 00:32:58,100
we basically said, like, okay, here is a particular type of debug

648
00:32:58,100 --> 00:32:59,800
event that we've seen and we

649
00:33:00,000 --> 00:33:00,700
Read through.

650
00:33:00,700 --> 00:33:05,600
Like, here are the values of it for every frame, right?

651
00:33:06,600 --> 00:33:09,200
That would basically be what we do now.

652
00:33:09,200 --> 00:33:12,700
The, the only thing that's tricky about that and the reason that I'm

653
00:33:12,700 --> 00:33:15,100
like, saying, well, you know, it sort of seems like we should do that

654
00:33:15,100 --> 00:33:16,500
but I'm not 100% sold on it.

655
00:33:17,300 --> 00:33:21,700
The reason that's a little tricky is because we don't actually know at

656
00:33:21,700 --> 00:33:26,800
that point when those events have gone away because if you imagined it

657
00:33:26,800 --> 00:33:28,800
just being a giant circular buffer, right?

658
00:33:28,800 --> 00:33:29,800
You can kind of see

659
00:33:30,000 --> 00:33:33,900
What I'm talking about here, hopefully let me go ahead and keep

660
00:33:33,900 --> 00:33:34,200
forgetting.

661
00:33:34,200 --> 00:33:35,900
I should just leave this in Pole Position here.

662
00:33:36,300 --> 00:33:41,600
All right, so what I'm sort of getting at here again and I'll just say

663
00:33:41,600 --> 00:33:43,400
it one more time, just in case it was ambiguous.

664
00:33:43,400 --> 00:33:46,600
It's if we have Asus say we just had this giant 64 MB buffer and

665
00:33:46,600 --> 00:33:48,000
here's where the debug events go.

666
00:33:48,100 --> 00:33:50,500
So, we start off at the beginning of it and we just write debug events

667
00:33:50,500 --> 00:33:53,000
in here, right to this is, you know, we're just writing them in, we

668
00:33:53,000 --> 00:33:55,000
write them in, we write them in the right to Remember at the memory

669
00:33:55,000 --> 00:33:59,400
and eventually some number of frames down the line, we get to the end

670
00:33:59,400 --> 00:33:59,800
of the buffer.

671
00:34:00,000 --> 00:34:01,000
Wrap back to beginning.

672
00:34:01,100 --> 00:34:05,900
So now the next event like over writes this one so basically event 0

673
00:34:05,900 --> 00:34:10,199
was here event zeros now gone and event like you know, two million

674
00:34:10,199 --> 00:34:12,000
four hundred and fifty thousand.

675
00:34:12,000 --> 00:34:15,699
I don't know what, you know, some number here event that event goes in

676
00:34:15,699 --> 00:34:16,300
this place.

677
00:34:17,900 --> 00:34:18,400
Right?

678
00:34:19,500 --> 00:34:26,100
So the problem is that if we were to do that, we don't know when that

679
00:34:26,100 --> 00:34:28,199
romping will occur because member we have multiple threads.

680
00:34:28,199 --> 00:34:31,400
All right into this debug buffer, they're just going nuts, right?

681
00:34:31,600 --> 00:34:36,199
And we don't know, at what point someone will overwrite this value.

682
00:34:36,600 --> 00:34:41,699
So, if again, taking this example where we had like, you know, the I

683
00:34:41,699 --> 00:34:45,000
think we were talking about specifically the debug camera distance.

684
00:34:45,300 --> 00:34:47,600
So we have the debug camera distance, right?

685
00:34:47,800 --> 00:34:50,900
And we go like, okay, we know about debug camera distance.

686
00:34:51,800 --> 00:34:52,500
That's in there.

687
00:34:53,100 --> 00:34:56,100
When we do our collation, we saw it was the first thing that came in

688
00:34:56,100 --> 00:34:57,700
it was, it was event 0.

689
00:34:57,900 --> 00:35:02,400
It was also event like for, you know, 593 or whatever, right?

690
00:35:02,600 --> 00:35:04,100
And so we said debug camera distance.

691
00:35:04,100 --> 00:35:06,400
Okay, here's the first instance of it.

692
00:35:06,500 --> 00:35:08,300
Here's the second instance of it, right.

693
00:35:08,300 --> 00:35:10,800
Here's the third instance of it maybe or something like that, and

694
00:35:10,800 --> 00:35:11,800
we've got those now.

695
00:35:11,900 --> 00:35:14,200
So, now in the, in the UI, we can display them.

696
00:35:14,200 --> 00:35:17,200
We know the three events and when they happened, and we can display

697
00:35:17,200 --> 00:35:17,600
those

698
00:35:17,700 --> 00:35:17,700
oh,

699
00:35:20,100 --> 00:35:22,200
To the user and let them do whatever they want.

700
00:35:22,300 --> 00:35:23,700
Blah, blah blah, right?

701
00:35:25,200 --> 00:35:28,300
Well the problem here is that some point this one gets overwritten but

702
00:35:28,300 --> 00:35:31,500
we don't know when it got over it, right?

703
00:35:31,500 --> 00:35:32,700
We have no idea.

704
00:35:33,200 --> 00:35:36,900
So there's not really anything that we can do to maintain the

705
00:35:36,900 --> 00:35:40,800
Integrity of some kind of a linked list or some kind of, you know,

706
00:35:40,800 --> 00:35:43,400
whatever else needs to be there, right?

707
00:35:44,300 --> 00:35:49,600
So, you know, that's why I still am like a little hesitant even though

708
00:35:49,600 --> 00:35:52,300
it would be more efficient to leave the debug events where they are,

709
00:35:52,300 --> 00:35:54,800
so they don't have to be copied out into anything.

710
00:35:56,100 --> 00:35:59,200
if we were to copy them out that problem solves itself because then we

711
00:35:59,200 --> 00:35:59,900
just have

712
00:36:00,100 --> 00:36:06,100
A static stable thing where debug instance I start debug distance has

713
00:36:06,100 --> 00:36:11,400
however many frames at saving right in there and we just free them

714
00:36:11,400 --> 00:36:13,400
when we want to free them and nobody cares.

715
00:36:13,700 --> 00:36:14,200
Right.

716
00:36:16,900 --> 00:36:20,200
And so again, like I say it's something that I'm talking out loud

717
00:36:20,200 --> 00:36:22,900
because this is actually what I would be thinking about in my head, if

718
00:36:22,900 --> 00:36:25,200
I were programming, I would think probably all of these thoughts.

719
00:36:26,400 --> 00:36:28,500
I would just hopefully think them a little bit faster than they are

720
00:36:28,500 --> 00:36:29,700
when I'm trying to explain them and draw them.

721
00:36:29,700 --> 00:36:29,800
But

722
00:36:30,000 --> 00:36:36,300
But you can kind of see the Dilemma there and so the way that I will

723
00:36:36,300 --> 00:36:39,600
rationalize this to myself because I don't necessarily know what the

724
00:36:39,600 --> 00:36:40,400
right answer is.

725
00:36:40,500 --> 00:36:46,000
So I'm trying to pick a reason why I might why I might plausibly argue

726
00:36:46,000 --> 00:36:46,900
for one way or the other.

727
00:36:47,400 --> 00:36:50,700
I think I could make a plausible argument that we do want to do the

728
00:36:50,700 --> 00:36:54,000
copy out even though it's a little less efficient because it like,

729
00:36:54,000 --> 00:36:55,600
basically doubles our memory traffic.

730
00:36:55,600 --> 00:36:59,900
They're the reason that I might argue that is

731
00:37:00,000 --> 00:37:05,300
Cuz I feel like we could easily get in a situation where we want to

732
00:37:05,300 --> 00:37:10,500
store, a lot of previous values, for some things, and not very many

733
00:37:10,500 --> 00:37:13,000
previous values for other things, right?

734
00:37:13,200 --> 00:37:17,900
For example, the debug camera distance, we really don't need 100

735
00:37:17,900 --> 00:37:22,900
frames worth of back catalogue on what that value was right, nobody

736
00:37:22,900 --> 00:37:24,500
cares what that value is.

737
00:37:24,600 --> 00:37:25,900
It's just the debug value.

738
00:37:25,900 --> 00:37:29,800
We use for like changing the camera to zoom in and out so that we can

739
00:37:29,900 --> 00:37:33,500
Test, like look at like, you know, more than just the reason region

740
00:37:33,500 --> 00:37:36,300
that the player is seeing when they're playing, that's all that does.

741
00:37:36,600 --> 00:37:39,900
So, the chances that I'm going to need to do something like record,

742
00:37:39,900 --> 00:37:44,200
100, or 1000 frames worth of what that did are like zero.

743
00:37:44,200 --> 00:37:45,400
That's just not going to happen.

744
00:37:46,300 --> 00:37:50,400
Whereas other things, you know, like, again performance Cal kinds of

745
00:37:50,400 --> 00:37:52,900
stuff that's something that may want to track.

746
00:37:52,900 --> 00:37:57,200
A lot of hits of it over time or certain values that sort of

747
00:37:57,300 --> 00:37:58,200
correspond to it.

748
00:37:58,400 --> 00:37:59,800
You know, that could might want

749
00:38:00,000 --> 00:38:03,200
Keep a lot more events in there because we're trying to do it.

750
00:38:03,400 --> 00:38:06,200
Furthermore, we might, you might even say it doesn't matter what the

751
00:38:06,200 --> 00:38:08,300
type is, it matters, what the users paying attention to?

752
00:38:08,500 --> 00:38:11,200
So, for example, we may want to have the ability to build system to do

753
00:38:11,200 --> 00:38:16,300
something like, say, hey, when I like shift-click on some value,

754
00:38:16,400 --> 00:38:17,000
right?

755
00:38:17,000 --> 00:38:20,700
In the debug, you, I, when I say flick out about you, debug you, I

756
00:38:20,900 --> 00:38:25,500
want to set that debug you, I value to a state where it records, you

757
00:38:25,500 --> 00:38:28,600
know, infinite number of frames are not infinite but like, you know,

758
00:38:28,600 --> 00:38:29,800
thousands of frames it just

759
00:38:29,900 --> 00:38:32,000
Means that that I'm considering that variable right now.

760
00:38:32,100 --> 00:38:35,700
So go ahead and take plenty of memory and actually make sure that that

761
00:38:35,700 --> 00:38:36,400
variable

762
00:38:37,600 --> 00:38:41,800
is known for a very very long run because I'm trying to do something

763
00:38:41,800 --> 00:38:42,900
special with it, right?

764
00:38:44,000 --> 00:38:49,500
So that to me kind of is a plausible argument for why I might pick one

765
00:38:49,500 --> 00:38:52,000
over the other because I'm just giving up some performance, does the

766
00:38:52,000 --> 00:38:52,700
debug system?

767
00:38:52,700 --> 00:38:55,200
So I'm not sure I ever really care about the performance of it that

768
00:38:55,200 --> 00:38:59,800
much, but I can Envision a feature that is

769
00:39:00,600 --> 00:39:02,700
You know, that it's more cleanly enabled here.

770
00:39:02,900 --> 00:39:06,200
And so that gets me out of the business of having to worry about how

771
00:39:06,200 --> 00:39:09,300
that threading would happen through this in for, you know, through

772
00:39:09,300 --> 00:39:11,000
this sort of buffer.

773
00:39:11,200 --> 00:39:15,700
And I can just say, I will actually do the copy out every time as we

774
00:39:15,700 --> 00:39:16,200
go.

775
00:39:16,300 --> 00:39:21,000
And so as I do the collation, I copy out into whatever sort of format,

776
00:39:21,000 --> 00:39:24,600
we're using to sort of keep that information, right?

777
00:39:26,000 --> 00:39:27,300
That seems pretty plausible to me.

778
00:39:27,300 --> 00:39:30,100
So I'm going to go ahead and, and, and say that.

779
00:39:30,300 --> 00:39:32,300
Is is the way it will go.

780
00:39:33,300 --> 00:39:34,500
All right, so that's good.

781
00:39:34,500 --> 00:39:37,300
That means that what we've got here is pretty much.

782
00:39:37,300 --> 00:39:41,500
Okay, this is a reasonable way to make this debug event system work,

783
00:39:41,500 --> 00:39:42,800
just use the ping pong buffer.

784
00:39:43,000 --> 00:39:48,000
The events themselves will just be sort of whatever is the necessary

785
00:39:48,000 --> 00:39:54,100
piece of information is that goes into those those ping-pong buffers

786
00:39:54,400 --> 00:39:58,500
and then what we'll do is we'll have two additional sort of things

787
00:39:58,500 --> 00:39:59,700
that sit on top of it.

788
00:40:00,400 --> 00:40:03,300
Which we sort of already have talked about one of them and

789
00:40:03,300 --> 00:40:06,600
implemented, one of them a bunch, which is sort of the UI elements.

790
00:40:06,600 --> 00:40:09,700
And we've kind of got some of that where we did like, debug trees and,

791
00:40:09,700 --> 00:40:12,700
and these sort of views, and that sort of stuff, we sort of worked out

792
00:40:12,700 --> 00:40:16,600
this a little bit, but we haven't quite gotten to the fact that sorry.

793
00:40:16,600 --> 00:40:18,500
We haven't quite gotten to the part.

794
00:40:19,800 --> 00:40:23,400
Where we've actually sort of solidified that debug element part of it.

795
00:40:23,400 --> 00:40:26,200
And so, that's the part that will kind of have to just finish up here

796
00:40:26,200 --> 00:40:28,500
in order to make this stuff work, right.

797
00:40:28,500 --> 00:40:31,900
And because this, this stuff is just it's not quite there yet, right?

798
00:40:31,900 --> 00:40:34,600
And you can kind of tell by the sort of the way that things aren't as

799
00:40:34,600 --> 00:40:37,500
disease is not quite there yet, and I think that was because we were

800
00:40:37,500 --> 00:40:39,000
sort of missing that concrete.

801
00:40:39,000 --> 00:40:41,900
I hadn't quite put it into words that concrete element, that there is

802
00:40:41,900 --> 00:40:45,700
a, well, that concrete debug element the concept that there is sort of

803
00:40:45,700 --> 00:40:49,300
this thing that exists across all the

804
00:40:49,700 --> 00:40:54,000
That sort of talks about, you know, the two talks about that

805
00:40:54,000 --> 00:40:54,900
particular piece of information.

806
00:40:58,100 --> 00:40:58,600
All right.

807
00:41:01,100 --> 00:41:02,400
So let's see what we can do.

808
00:41:03,000 --> 00:41:03,900
That's that's good.

809
00:41:03,900 --> 00:41:06,800
I think I feel like again, I feel like that kind of solidify some

810
00:41:06,800 --> 00:41:11,800
stuff it crystallizes in my head, some things that we didn't really,

811
00:41:12,200 --> 00:41:17,100
you know, we hadn't sort of put into words and that we're making us a

812
00:41:17,100 --> 00:41:19,800
little more listless than we needed to be as we were sort of trying to

813
00:41:19,800 --> 00:41:22,500
solidify this stuff and you got to make sure you kind of get through

814
00:41:22,500 --> 00:41:23,500
all of those barriers.

815
00:41:23,500 --> 00:41:27,500
But in order to really sort of get the system architecture stuff to

816
00:41:27,500 --> 00:41:28,400
where it needs to be.

817
00:41:29,000 --> 00:41:30,800
So when we go ahead and do our free frame,

818
00:41:31,000 --> 00:41:31,200
R.

819
00:41:32,700 --> 00:41:37,000
What that implies to me is that when we are doing a free frame, we're

820
00:41:37,000 --> 00:41:40,500
going to free kind of from the oldest to the newest frames.

821
00:41:41,500 --> 00:41:44,800
What that sort of implies to me is we're going to need a little bit of

822
00:41:44,800 --> 00:41:48,600
logic there about what does get freed and what doesn't get freed if we

823
00:41:48,600 --> 00:41:51,300
want to do stuff, like have things that have different sorts of life's

824
00:41:51,400 --> 00:41:52,300
lifetimes to them.

825
00:41:52,600 --> 00:41:56,200
I'm going to defer that part off just a little bit until I can have a

826
00:41:56,200 --> 00:41:57,400
little more visible in the system.

827
00:41:57,600 --> 00:41:59,800
And for now, I'm just going to say let's just

828
00:42:00,000 --> 00:42:02,000
That we're not going to have everything is going to be the same amount

829
00:42:02,000 --> 00:42:04,500
of time and we'll set a see how that breaks down.

830
00:42:04,900 --> 00:42:09,600
When I call free frame, the most logical point in time I think to try

831
00:42:09,600 --> 00:42:15,100
and reclaim memory by calling three frame is just if we actually go

832
00:42:15,100 --> 00:42:17,600
ahead and say that when we try to get new memory.

833
00:42:19,300 --> 00:42:20,600
Out of the debugger Arena.

834
00:42:20,700 --> 00:42:25,300
If we can't get it then we call free frame, right?

835
00:42:25,300 --> 00:42:30,000
So basically free frame is the thing that that sort of allows us to

836
00:42:30,000 --> 00:42:33,100
sort of grab new memory when we need it.

837
00:42:33,200 --> 00:42:36,000
So what I'm going to do is, I'm just going to take a quick look here

838
00:42:36,300 --> 00:42:40,600
for everyone who uses the debugger Arena, and this is a trick that

839
00:42:40,600 --> 00:42:42,100
I've done multiple times on handmade hero.

840
00:42:42,100 --> 00:42:43,100
I never get tired of it.

841
00:42:43,100 --> 00:42:43,800
It's a good one.

842
00:42:44,100 --> 00:42:47,400
All I'm going to do is I'm going to append an underscore to the debug

843
00:42:47,400 --> 00:42:48,400
Arena itself.

844
00:42:48,500 --> 00:42:48,700
So,

845
00:42:48,900 --> 00:42:53,200
that I can go ahead and see everyone who's using it, and you can see

846
00:42:53,200 --> 00:42:59,500
in here, you know, we've got basically the, the entirety I told you, I

847
00:42:59,500 --> 00:43:03,200
told you I was getting yawn and I did

848
00:43:04,800 --> 00:43:08,000
You can see the entirety of it pretty much exists in handmade debug

849
00:43:08,500 --> 00:43:10,800
and so that's what you know, I would have expected.

850
00:43:11,000 --> 00:43:13,800
So basically all I have to do is look at all these push trucks that

851
00:43:13,800 --> 00:43:18,100
happen on the debug Arena here and all I'm going to really have to do

852
00:43:18,300 --> 00:43:22,500
is make sure that all of those debug Arena allocations I'm just gonna

853
00:43:22,500 --> 00:43:29,200
sort of I'm going to make them happen in sort of a secondary.

854
00:43:30,500 --> 00:43:34,300
I'm going to insert a little step before allocation out of

855
00:43:34,500 --> 00:43:34,900
Rena.

856
00:43:35,000 --> 00:43:38,900
That basically says, if you can't allocate on this Arena, let me know.

857
00:43:38,900 --> 00:43:42,400
Because I will sort of, you know, I'll give some memory back.

858
00:43:42,500 --> 00:43:45,100
I'll figure out a way to get more memory there.

859
00:43:45,400 --> 00:43:48,900
Now, there is something that's, I think a little bit concerning to us,

860
00:43:49,100 --> 00:43:51,700
which is, I think we may have had a push truck turn hurt ya.

861
00:43:52,100 --> 00:43:54,500
You can see right here, we sort of got this push truck in here.

862
00:43:55,000 --> 00:43:58,500
So inside our free list allocate, we had baked in the concept of

863
00:43:58,500 --> 00:43:58,800
things.

864
00:43:58,800 --> 00:44:02,000
We're calling push direct for a particular Arena.

865
00:44:02,400 --> 00:44:04,300
And what I'd like to do is maybe say well

866
00:44:04,400 --> 00:44:04,500
L.

867
00:44:06,600 --> 00:44:09,200
I don't know if we actually want that to be the case although I could

868
00:44:09,200 --> 00:44:12,500
use a function or I could use overloading here to kind of help us out

869
00:44:12,500 --> 00:44:16,500
I suppose, although not necessarily with, with type in there, the way

870
00:44:16,500 --> 00:44:16,800
it is.

871
00:44:17,100 --> 00:44:22,200
So what I'd like to do here again is make sure that this supports

872
00:44:22,200 --> 00:44:25,000
being able to get the allocation from a different way and I think the

873
00:44:25,000 --> 00:44:27,300
way to do that and I probably should have done this way.

874
00:44:27,300 --> 00:44:30,300
Originally is what we're doing right now is they're passing in the

875
00:44:30,300 --> 00:44:33,600
arena but probably what we should do is pass in just the entire

876
00:44:33,600 --> 00:44:35,400
allocation itself, right?

877
00:44:36,000 --> 00:44:40,500
So what we do here is like allocation allocation code, right?

878
00:44:40,500 --> 00:44:43,200
And what we do is say like here's the allocation code that you're

879
00:44:43,200 --> 00:44:44,600
actually going to call, right?

880
00:44:44,600 --> 00:44:47,200
Here's that, that's the stuff that is what you're going to actually do

881
00:44:47,200 --> 00:44:49,800
there and so if we take a look at what happens when I compile this

882
00:44:49,800 --> 00:44:54,200
now, and of course I guess I got to put a debug Arena back together is

883
00:44:54,400 --> 00:44:57,400
in this, in this case.

884
00:44:59,000 --> 00:44:59,800
Wait, what?

885
00:45:00,200 --> 00:45:04,800
Separate development, debug events star.

886
00:45:05,800 --> 00:45:06,800
What did I do?

887
00:45:06,900 --> 00:45:11,600
Did I forget to change something?

888
00:45:13,900 --> 00:45:15,000
Yes, I did.

889
00:45:15,100 --> 00:45:17,200
Okay, don't know why I did that.

890
00:45:17,700 --> 00:45:22,800
Alright, so you can see now after I did that change vits, I'm just

891
00:45:22,800 --> 00:45:25,700
passing the debug Arena here, but what I actually need to do is I

892
00:45:25,700 --> 00:45:29,500
actually need to pass the the code that actually does the allocation.

893
00:45:30,100 --> 00:45:31,900
It, so I need to do something.

894
00:45:33,300 --> 00:45:34,500
That looks more like this.

895
00:45:36,300 --> 00:45:40,300
That makes sense, and if I compile that they're at least in theory

896
00:45:40,300 --> 00:45:41,000
that should work.

897
00:45:41,100 --> 00:45:44,800
Oops, there that should work.

898
00:45:45,400 --> 00:45:48,000
But I have to spell correctly.

899
00:45:48,000 --> 00:45:48,600
There we go.

900
00:45:50,500 --> 00:45:52,000
And so you can see what I did there.

901
00:45:52,000 --> 00:45:53,600
I just made it so I can pass in the application code.

902
00:45:53,600 --> 00:45:56,100
So that means this thing can be whatever it wants.

903
00:45:56,400 --> 00:45:59,500
When I look at this, I also note that now, the type doesn't actually

904
00:45:59,500 --> 00:46:00,700
have to be passed at all.

905
00:46:01,000 --> 00:46:02,700
So really, this doesn't have to be there.

906
00:46:03,200 --> 00:46:05,900
So mostly for frivolous allocate, you just need to put in what

907
00:46:06,000 --> 00:46:11,200
I think the variable you actually wanted what the, what the pointer

908
00:46:11,200 --> 00:46:14,600
was for the head and then whatever the thing is to get new memory, if

909
00:46:14,600 --> 00:46:15,300
it needs it.

910
00:46:15,600 --> 00:46:23,200
So that totally solves that problem for us at least in theory and

911
00:46:23,600 --> 00:46:24,200
here.

912
00:46:24,200 --> 00:46:28,900
In this guy, we just need to do the exact same thing, right?

913
00:46:29,000 --> 00:46:34,000
So this is going to be a.push a.push struct with open debug block,

914
00:46:34,500 --> 00:46:35,000
right?

915
00:46:35,800 --> 00:46:37,200
Or at least it it.

916
00:46:40,900 --> 00:46:45,500
So that allows me now to say, okay, whenever I'm going to get

917
00:46:45,500 --> 00:46:49,400
something from this debug Arena, I could instead, say that instead of

918
00:46:49,400 --> 00:46:53,900
doing something like push direct, I could make now, a way of sort of

919
00:46:53,900 --> 00:46:59,700
thinking through there to get stuff out of two free stuff.

920
00:46:59,700 --> 00:47:03,100
If I need to, if the arena is full, right?

921
00:47:03,100 --> 00:47:06,500
If I'm, if I dont have space left and I need to get stuff out of the

922
00:47:06,500 --> 00:47:07,100
debug Arena.

923
00:47:07,100 --> 00:47:09,800
I can, I can sort of free on demand, if that makes sense.

924
00:47:10,200 --> 00:47:10,300
The

925
00:47:10,400 --> 00:47:14,600
Nothing I could do and I'm not sure I really want to do this, but you

926
00:47:14,600 --> 00:47:17,000
can imagine adding that to the Arena's themselves.

927
00:47:17,000 --> 00:47:20,600
So if we thought we wanted to do that, if we thought we were going to

928
00:47:20,600 --> 00:47:23,600
do this sort of more generally, I could actually put it in here,

929
00:47:23,800 --> 00:47:24,200
right.

930
00:47:24,300 --> 00:47:28,300
I could put some concept of a call back in here that's like oh hey you

931
00:47:28,300 --> 00:47:31,700
know I don't have the memory so please get me the memory.

932
00:47:32,000 --> 00:47:34,200
I don't know that I love that.

933
00:47:34,200 --> 00:47:38,000
So I'm going to leave that aside for now, but I wouldn't get angry at

934
00:47:38,000 --> 00:47:40,300
somebody who was like, I just

935
00:47:40,400 --> 00:47:45,400
Aunt, the memory Arenas themselves to understand this and be able to

936
00:47:45,400 --> 00:47:46,900
handle it, right?

937
00:47:47,200 --> 00:47:50,200
So what I'm going to do instead though, I just I just don't want to go

938
00:47:50,200 --> 00:47:51,300
down that route right now.

939
00:47:51,400 --> 00:47:54,700
And so, what I want to do instead is I want to make it so that I have

940
00:47:54,700 --> 00:47:57,600
sort of a thunking through, to the debug Arena that will actually do

941
00:47:57,600 --> 00:47:58,100
that.

942
00:47:58,400 --> 00:47:59,800
And so, in order to do that,

943
00:48:00,000 --> 00:48:05,400
See in here in precise we have an assertion right that assertion is

944
00:48:05,400 --> 00:48:08,600
the thing that tells us whether or not there's room, right?

945
00:48:09,200 --> 00:48:12,400
And so, what I'd like to do is figure out a way to sort of make sure

946
00:48:12,400 --> 00:48:17,600
that I can ask the question of whether or not there is room and get

947
00:48:17,600 --> 00:48:21,300
the answer back without actually having to call Push sighs.

948
00:48:21,500 --> 00:48:22,100
Right?

949
00:48:22,300 --> 00:48:25,600
Alternatively, what I could do is I could actually just make this an

950
00:48:25,600 --> 00:48:28,000
if and I could make push size return 0.

951
00:48:28,300 --> 00:48:28,900
I'm not sure.

952
00:48:28,900 --> 00:48:29,900
Which one of those, I

953
00:48:30,000 --> 00:48:30,600
Want to do.

954
00:48:32,900 --> 00:48:34,300
It's a really good question.

955
00:48:38,400 --> 00:48:40,100
And I'm not quite sure.

956
00:48:40,400 --> 00:48:44,100
The reason it's a little complicated because as you can see, the

957
00:48:44,100 --> 00:48:47,000
alignment offset sort of gets added to the size here.

958
00:48:47,200 --> 00:48:50,800
So there's actually sort of a step an additional step that occurs.

959
00:48:50,800 --> 00:48:53,300
It's not just you can't just use this assertion directly.

960
00:48:53,400 --> 00:48:58,000
You have to actually compute this as well and so you know it's a

961
00:48:58,000 --> 00:49:00,200
little bit of codification of do it that way and I'm trying to think

962
00:49:00,200 --> 00:49:05,200
of you know do I want to like put it sort of make it more complicated.

963
00:49:05,200 --> 00:49:07,700
I don't really know but it would look something like this.

964
00:49:07,900 --> 00:49:15,600
I'd say, Okay, Arena has room, you know, four or something like that.

965
00:49:16,400 --> 00:49:19,300
And this would actually be exactly the same code that you would be

966
00:49:19,300 --> 00:49:20,000
calling, right?

967
00:49:20,000 --> 00:49:21,100
So you basically pass it.

968
00:49:21,100 --> 00:49:21,900
The exact same thing.

969
00:49:21,900 --> 00:49:23,200
You would pass the push size.

970
00:49:23,400 --> 00:49:27,900
It would do exactly the same thing and what it would return, right?

971
00:49:28,000 --> 00:49:32,000
Is just the result of the recession if that makes sense.

972
00:49:32,300 --> 00:49:36,900
So again exactly the same thing and just Returns the, the the result

973
00:49:36,900 --> 00:49:37,600
of that assertion that

974
00:49:37,800 --> 00:49:38,400
All it does.

975
00:49:38,700 --> 00:49:42,600
And what I look at it and I think about this it looks like that's

976
00:49:42,600 --> 00:49:45,700
really not that big of a deal because you could imagine doing this as

977
00:49:45,700 --> 00:49:46,600
well, right.

978
00:49:46,600 --> 00:49:51,600
You could imagine taking the memory index and going like Arena you

979
00:49:51,600 --> 00:49:59,100
know, get Arena effective size or something or get effective size for

980
00:49:59,100 --> 00:49:59,900
something like this.

981
00:50:00,300 --> 00:50:06,000
So if you imagine passing these are values into something I could do

982
00:50:06,000 --> 00:50:07,600
this part of it, pretty trivially.

983
00:50:07,900 --> 00:50:11,200
As a separate thing and then return the size.

984
00:50:12,400 --> 00:50:13,100
Like that.

985
00:50:13,800 --> 00:50:17,000
And then this just becomes something pretty trivial where you have

986
00:50:17,000 --> 00:50:18,900
Arena useless eyes, listening DeLorean size.

987
00:50:19,100 --> 00:50:23,500
This size right here is just get effective size 4 and we pass the

988
00:50:23,500 --> 00:50:24,500
arena, the size.

989
00:50:26,800 --> 00:50:30,900
And the alignment, all this stuff goes away.

990
00:50:33,700 --> 00:50:34,400
Make sense.

991
00:50:35,000 --> 00:50:38,900
So that's, you know, that seems pretty reasonable to me for the most

992
00:50:38,900 --> 00:50:39,400
part.

993
00:50:39,500 --> 00:50:40,200
I don't know.

994
00:50:40,300 --> 00:50:44,600
I probably was a little overzealous there, I feel like I might during

995
00:50:44,600 --> 00:50:47,200
debugging want to inspect that sort of a variable.

996
00:50:47,900 --> 00:50:53,300
So maybe that is a little bit, you know, more more my speed here, you

997
00:50:53,300 --> 00:50:56,500
can sort of see, I would just literally do that replacement.

998
00:50:56,700 --> 00:50:59,800
That seems us a little more, I like,

999
00:51:00,300 --> 00:51:01,000
I like that better.

1000
00:51:01,000 --> 00:51:02,900
I'm pretty happy with that.

1001
00:51:04,700 --> 00:51:06,800
I would, I would give that some funds up.

1002
00:51:06,800 --> 00:51:09,000
I'm gonna get rid of the default parameter here because the only

1003
00:51:09,000 --> 00:51:11,300
people who should be calling this or people who actually know what the

1004
00:51:11,300 --> 00:51:15,300
alignment supposed to be in general, and that kind of looks like maybe

1005
00:51:15,300 --> 00:51:16,400
it's a little bit more.

1006
00:51:18,700 --> 00:51:21,600
It's a little more kosher in my in my, in my mind.

1007
00:51:21,600 --> 00:51:21,800
Ooh.

1008
00:51:22,700 --> 00:51:26,700
So at that point what we can do is we can make a function here that

1009
00:51:26,700 --> 00:51:32,600
would sort of be the equivalent again of of our push size, right?

1010
00:51:34,700 --> 00:51:36,000
Is the equivalent of this.

1011
00:51:36,200 --> 00:51:40,300
And this is like, push size with the allocation or something like

1012
00:51:40,300 --> 00:51:40,800
that.

1013
00:51:42,200 --> 00:51:43,100
What we'd want to do?

1014
00:51:43,500 --> 00:51:44,000
Excuse me.

1015
00:51:44,300 --> 00:51:47,300
Here is do something like while

1016
00:51:50,300 --> 00:51:56,700
Let's see Arena has been for so while we don't have room for whatever

1017
00:51:56,700 --> 00:51:58,900
the thing is that we're allocating, right?

1018
00:51:59,600 --> 00:52:03,100
So here's the size, here's the alignment.

1019
00:52:05,700 --> 00:52:09,200
And instead of passing the debug Arena, but we're probably passing

1020
00:52:09,200 --> 00:52:14,100
here is the debug State because we've got debug free frame or, whoops.

1021
00:52:14,100 --> 00:52:16,500
We've got your frame.

1022
00:52:18,800 --> 00:52:20,400
we need to be able to pass the

1023
00:52:23,200 --> 00:52:24,100
device state in there.

1024
00:52:24,500 --> 00:52:26,100
So this would take the debug state.

1025
00:52:28,600 --> 00:52:32,600
And we take these other guys and it's essentially saying we need to do

1026
00:52:32,600 --> 00:52:34,700
a push size, we want to push this much.

1027
00:52:34,800 --> 00:52:37,100
Here's the alignment that we need to use for it, right?

1028
00:52:37,200 --> 00:52:42,200
When we do this push size, and at this point, we should probably also

1029
00:52:42,200 --> 00:52:42,700
do this.

1030
00:52:45,600 --> 00:52:47,300
Because this is appearing everywhere now.

1031
00:52:52,900 --> 00:52:53,400
Right.

1032
00:52:56,300 --> 00:52:58,500
So when we do this, this guy push that I think I had seven minutes

1033
00:52:58,500 --> 00:52:59,800
left on the clock from where we started.

1034
00:52:59,800 --> 00:53:02,400
So I'm going to use them when I do this push sighs.

1035
00:53:02,900 --> 00:53:07,700
What I'm essentially going to do is say okay while you know there

1036
00:53:07,700 --> 00:53:09,000
isn't room for this thing.

1037
00:53:09,800 --> 00:53:13,300
I'm going to like three frames, right?

1038
00:53:13,700 --> 00:53:19,100
And I might also say that it's while we have room for something and

1039
00:53:19,100 --> 00:53:23,500
there is a frame to free, we would free the frame and then at the end

1040
00:53:23,500 --> 00:53:25,100
of it, all right, then

1041
00:53:25,300 --> 00:53:28,300
And we would call precise, right?

1042
00:53:28,400 --> 00:53:30,500
And we would try to allocate the memory.

1043
00:53:30,700 --> 00:53:36,100
So at the end of it, we actually just thunk through to our, you know,

1044
00:53:36,200 --> 00:53:38,400
memory allocator as you might expect.

1045
00:53:39,200 --> 00:53:40,400
And here's our results.

1046
00:53:45,400 --> 00:53:48,700
All up Lee, this is up, you know, makes perfect sense and there's

1047
00:53:48,700 --> 00:53:52,400
nothing particularly weird or odd about what I'm saying here, but you

1048
00:53:52,400 --> 00:53:52,800
can see.

1049
00:53:52,800 --> 00:53:55,200
So we've got this precise with the allocation we're doing our push

1050
00:53:55,200 --> 00:53:55,900
size here.

1051
00:53:56,000 --> 00:53:58,300
What we're essentially going to do is just say, all right, we're going

1052
00:53:58,300 --> 00:53:59,800
to keep going through here.

1053
00:54:00,000 --> 00:54:06,000
And try to free frames until we have enough memory, for whatever.

1054
00:54:06,000 --> 00:54:06,900
The thing is, we're allocating.

1055
00:54:07,100 --> 00:54:09,500
Usually, that would be only one frame.

1056
00:54:09,900 --> 00:54:10,700
You know I'm saying?

1057
00:54:11,200 --> 00:54:14,000
Because typically, after you for your frame, we'd have tons of space

1058
00:54:14,000 --> 00:54:15,400
for everything as we're allocating.

1059
00:54:16,200 --> 00:54:18,300
But yeah, you can see the structure of this.

1060
00:54:18,600 --> 00:54:19,400
We're just saying,

1061
00:54:20,700 --> 00:54:25,800
If we had memory for it already we'd never enter this while loop so

1062
00:54:26,100 --> 00:54:28,900
it's a non-issue assuming we do enter the while loop we freed the

1063
00:54:28,900 --> 00:54:29,300
frame.

1064
00:54:29,300 --> 00:54:32,500
Now if for some reason we're allocating some giant thing and you know

1065
00:54:32,800 --> 00:54:35,700
this should never actually happen in the code but if it did and we had

1066
00:54:35,700 --> 00:54:39,100
to free more than one frame, we could right let's sit in the while

1067
00:54:39,100 --> 00:54:40,000
loop just bring it.

1068
00:54:40,500 --> 00:54:43,300
But basically all we really need to fill in here in order to make this

1069
00:54:43,300 --> 00:54:46,800
work properly and be coherent with what we actually want to occur.

1070
00:54:47,000 --> 00:54:50,300
All we really need to know is where we get the frames from.

1071
00:54:50,600 --> 00:54:51,300
Right?

1072
00:54:51,500 --> 00:54:56,500
So we just need some way of knowing what the, you know, most

1073
00:54:56,700 --> 00:55:01,300
uninteresting frame as was truly the like the the oldest right?

1074
00:55:01,600 --> 00:55:04,100
And you can see we actually have that information, right?

1075
00:55:04,100 --> 00:55:05,400
We actually scoped it.

1076
00:55:05,900 --> 00:55:12,800
So what we can do is say, well, as long as the debug state has, oops,

1077
00:55:14,300 --> 00:55:15,400
And oldest frame.

1078
00:55:16,000 --> 00:55:19,400
Then we'll free that oldest frame, right?

1079
00:55:19,500 --> 00:55:23,400
But when we do that, we probably should also make sure right?

1080
00:55:23,400 --> 00:55:26,800
Because we're doing dealer frame here, frame to free.

1081
00:55:29,800 --> 00:55:36,000
Like so when we actually free, that old is frame, we also need to, you

1082
00:55:36,000 --> 00:55:39,900
know, Advanced this pointer because I believe frames or threaded,

1083
00:55:39,900 --> 00:55:40,300
right?

1084
00:55:40,300 --> 00:55:45,300
If I remember correctly, how we decided to make that work.

1085
00:55:45,300 --> 00:55:47,900
Whereas whoops frame.

1086
00:55:49,700 --> 00:55:54,300
Dude, dude, you can see we've got our next there.

1087
00:55:55,100 --> 00:55:57,800
So whenever we forget, we got to make the oldest frame point to the

1088
00:55:57,800 --> 00:56:00,600
next one over, but other than that, right?

1089
00:56:00,600 --> 00:56:01,600
It's totally frame.

1090
00:56:02,300 --> 00:56:07,300
Now there is one sort of a caveat here that I'll point out, which is

1091
00:56:07,300 --> 00:56:11,900
that it's in theory possible that the most recent frame was also, what

1092
00:56:11,900 --> 00:56:13,000
the oldest frame was.

1093
00:56:13,500 --> 00:56:17,000
So we also need to do a thing here, we say, well, if the debug State

1094
00:56:17,000 --> 00:56:19,300
most recent frame equals the frame,

1095
00:56:19,500 --> 00:56:23,700
Free then that also needs to be.

1096
00:56:24,800 --> 00:56:29,000
Well, I mean technically it needs to do this right.

1097
00:56:33,000 --> 00:56:35,600
What that will presumably always be zero because there shouldn't be

1098
00:56:35,600 --> 00:56:37,900
anything after the most recent frame.

1099
00:56:39,300 --> 00:56:40,000
Make sense.

1100
00:56:40,900 --> 00:56:42,900
So that's really it.

1101
00:56:43,100 --> 00:56:47,300
That's the entirety of it in terms of how that stuff is going to go.

1102
00:56:48,500 --> 00:56:54,500
Now, we have to make a free frame actually be pre declared, right?

1103
00:56:54,500 --> 00:56:58,000
That's got to be up here because we're calling it, restart collation.

1104
00:56:58,000 --> 00:56:58,900
I believe it's gone.

1105
00:56:59,400 --> 00:56:59,800
So that's all.

1106
00:57:00,000 --> 00:57:03,600
I'm so the last thing we need to do is actually just make a macro for

1107
00:57:03,600 --> 00:57:07,200
this so that people can call it with sort of the convenience of push

1108
00:57:07,200 --> 00:57:09,200
struct, which they're used to.

1109
00:57:09,500 --> 00:57:14,000
So here, it's like instead, it's going to be, you know, debug push

1110
00:57:14,000 --> 00:57:15,300
direct or something like that.

1111
00:57:15,400 --> 00:57:18,900
And what that's going to do is going to call this,

1112
00:57:20,900 --> 00:57:24,500
And that's it, that's really all we need to do, right?

1113
00:57:24,800 --> 00:57:27,900
So I'm going to go ahead and sort of push through this a little bit

1114
00:57:27,900 --> 00:57:28,400
further.

1115
00:57:31,100 --> 00:57:40,200
Whoops, alignment offset alignment offset.

1116
00:57:41,400 --> 00:57:43,400
Yeah, that's unfortunate.

1117
00:57:43,500 --> 00:57:45,600
So I have to call that twice, which is annoying.

1118
00:57:46,200 --> 00:57:46,800
All right.

1119
00:57:46,800 --> 00:57:47,300
Well.

1120
00:57:49,100 --> 00:57:51,800
That's fine fine, it's totally fine.

1121
00:57:51,800 --> 00:57:52,700
Don't worry about it.

1122
00:57:53,700 --> 00:57:55,400
You know, don't care.

1123
00:57:56,500 --> 00:57:57,100
Don't care.

1124
00:57:58,600 --> 00:58:02,600
All right, so sighs initialize.

1125
00:58:02,600 --> 00:58:03,600
That's a good point.

1126
00:58:03,600 --> 00:58:04,700
Thank you for catching that mr.

1127
00:58:04,700 --> 00:58:09,100
Compiler, this one is as well.

1128
00:58:09,700 --> 00:58:10,700
Why did it not?

1129
00:58:11,900 --> 00:58:13,500
Complain about that one.

1130
00:58:15,100 --> 00:58:17,600
Was Arena has room for a never called it's just because it's never

1131
00:58:17,600 --> 00:58:20,700
called it would have come but don't worry would have complained about

1132
00:58:20,700 --> 00:58:26,100
that and you get concerned compiler wasn't sleeping on the job.

1133
00:58:26,100 --> 00:58:28,700
It was doing its job it just probably never called that because we

1134
00:58:28,700 --> 00:58:31,300
haven't actually called debug push truck yet.

1135
00:58:32,100 --> 00:58:32,400
Okay.

1136
00:58:32,400 --> 00:58:36,100
So then we can just presumably just go through here and replace push

1137
00:58:36,100 --> 00:58:38,000
truck with debug push struct.

1138
00:58:39,500 --> 00:58:40,300
Right.

1139
00:58:40,400 --> 00:58:42,900
And then we'll just have to change the parameters to it, to be debug

1140
00:58:42,900 --> 00:58:44,100
State instead of the Arena.

1141
00:58:44,600 --> 00:58:50,000
So I believe like all of these are fine.

1142
00:58:50,300 --> 00:58:51,100
Right?

1143
00:58:52,600 --> 00:58:53,400
What happened there?

1144
00:58:54,600 --> 00:58:55,100
What's going on?

1145
00:58:55,100 --> 00:58:55,800
Okay, there we go.

1146
00:58:56,200 --> 00:59:02,400
Struct struct push struct.

1147
00:59:04,000 --> 00:59:04,700
And that's it.

1148
00:59:05,300 --> 00:59:07,700
So now all those should give me a compile error and they should give

1149
00:59:07,700 --> 00:59:12,400
me a compile error because remember, we needed it this to actually

1150
00:59:12,900 --> 00:59:15,100
pass in some different stuff.

1151
00:59:15,500 --> 00:59:19,800
So, in here, instead of passing the arena, this is actually the debug

1152
00:59:19,800 --> 00:59:21,100
state, right?

1153
00:59:21,100 --> 00:59:25,900
So that's got to go in there and otherwise everything else is kosher

1154
00:59:26,000 --> 00:59:29,700
so I believe all we will have to do to resolve any of these compile

1155
00:59:29,700 --> 00:59:33,000
errors is just get rid of that sort of.

1156
00:59:33,900 --> 00:59:36,700
You know, Finding of the Arena that we were doing.

1157
00:59:37,900 --> 00:59:38,400
Right.

1158
00:59:40,200 --> 00:59:41,500
Again really really straightforward.

1159
00:59:41,500 --> 00:59:42,100
I'm doing here.

1160
00:59:42,100 --> 00:59:45,800
Nothing particularly interesting at all.

1161
00:59:48,300 --> 00:59:52,000
Oh oh we've got a push copy.

1162
00:59:53,200 --> 00:59:58,000
Mmm, we've gotta push copy people.

1163
00:59:58,700 --> 00:59:59,800
That's unfortunate because that

1164
01:00:00,000 --> 01:00:06,200
And we would have to sort of also have debug push copy, which is not

1165
01:00:06,200 --> 01:00:07,400
the greatest right?

1166
01:00:07,400 --> 01:00:10,400
And you can see why like I was saying you can see why there's some

1167
01:00:10,400 --> 01:00:13,200
argument for building this into the arena because then now it's like

1168
01:00:13,200 --> 01:00:16,600
okay we wanted to use push copy and then you have to have a copy of

1169
01:00:16,600 --> 01:00:20,200
push copy as well, which is kind of annoying.

1170
01:00:20,500 --> 01:00:21,200
Right?

1171
01:00:21,700 --> 01:00:25,400
So that you know, that that makes me reconsider.

1172
01:00:25,400 --> 01:00:26,300
That, that makes me think.

1173
01:00:26,300 --> 01:00:29,800
Well, maybe I should just take that take this guy right here.

1174
01:00:30,000 --> 01:00:34,100
Here and put it in, I don't know, I don't know.

1175
01:00:34,600 --> 01:00:40,800
It's got some Merit, not gonna lie, definitely does so.

1176
01:00:40,800 --> 01:00:45,700
Yeah, let's let's let's just think about that for tomorrow, just keep

1177
01:00:45,700 --> 01:00:49,500
that in mind and I don't know, maybe we'll talk about in the Q&A a

1178
01:00:49,500 --> 01:00:50,100
little bit.

1179
01:00:51,700 --> 01:00:55,800
So yeah, Okay, so we've got to push copy when push copy comes to

1180
01:00:55,800 --> 01:00:58,500
shove, so we've got a debug push copy.

1181
01:01:01,200 --> 01:01:02,400
And debug push struct.

1182
01:01:06,400 --> 01:01:06,800
Yeah.

1183
01:01:08,300 --> 01:01:09,300
Yeah.

1184
01:01:10,700 --> 01:01:11,700
See how we're doing here?

1185
01:01:11,700 --> 01:01:12,900
Debug state.

1186
01:01:15,100 --> 01:01:17,400
Undeclared identifier, is that?

1187
01:01:17,400 --> 01:01:19,500
So, yeah, that is actually so

1188
01:01:21,000 --> 01:01:21,500
There we go.

1189
01:01:23,200 --> 01:01:25,900
And hopefully that's the last one.

1190
01:01:25,900 --> 01:01:28,100
Yeah, see happen again.

1191
01:01:29,100 --> 01:01:29,600
Right.

1192
01:01:31,200 --> 01:01:38,400
So that that actually does that does kind of make me want to to build

1193
01:01:38,400 --> 01:01:38,800
it in.

1194
01:01:38,900 --> 01:01:45,000
Just looking at how many times we were using that that that just does

1195
01:01:46,900 --> 01:01:50,500
that that really does make me kind of go like okay, you know, that's

1196
01:01:50,500 --> 01:01:51,000
that's

1197
01:01:58,400 --> 01:01:58,900
troubling.

1198
01:02:01,800 --> 01:02:03,800
Is it just Graphics calls?

1199
01:02:04,200 --> 01:02:05,500
Debug push struct.

1200
01:02:06,800 --> 01:02:09,200
See push wrecked Dubai.

1201
01:02:09,200 --> 01:02:10,300
Push struct.

1202
01:02:11,500 --> 01:02:14,500
do my push struct VAR, struct your books, copy

1203
01:02:16,000 --> 01:02:18,200
struct array.

1204
01:02:19,400 --> 01:02:21,500
Font so yeah.

1205
01:02:21,500 --> 01:02:24,200
So I think that argues, that argues pretty strongly for it.

1206
01:02:24,600 --> 01:02:27,500
I guess is what I'd say because I don't think we want to be in the

1207
01:02:27,500 --> 01:02:29,200
business of duplicating all of these.

1208
01:02:29,900 --> 01:02:34,200
It's just not you know that's just not a useful thing for us to be

1209
01:02:34,200 --> 01:02:38,800
doing and you know there could be plenty more of that down the road

1210
01:02:38,800 --> 01:02:39,100
right?

1211
01:02:39,100 --> 01:02:42,700
There's no reason to think that it would intentionally proliferate so

1212
01:02:42,700 --> 01:02:48,500
yeah so I don't love that but there we go you know that's that's all

1213
01:02:48,500 --> 01:02:48,900
we really

1214
01:02:49,200 --> 01:02:50,700
To do regardless.

1215
01:02:52,600 --> 01:02:59,800
And so now in theory, we should get to a point where we actually yeah.

1216
01:03:00,300 --> 01:03:00,800
There we go.

1217
01:03:00,900 --> 01:03:03,600
Should get to a point where we run out of memory and we try to free

1218
01:03:03,600 --> 01:03:05,800
variable group and we get to are not implemented.

1219
01:03:05,800 --> 01:03:09,900
So that's what we wanted and that's what we got and that's good but I

1220
01:03:09,900 --> 01:03:14,500
think what we want to do is just you know, put it to do here.

1221
01:03:14,600 --> 01:03:23,500
It's like move this into the Arena's proper so that everything doesn't

1222
01:03:23,700 --> 01:03:25,500
have to be duplicated.

1223
01:03:28,100 --> 01:03:30,300
so that all the

1224
01:03:31,800 --> 01:03:39,000
Macros and utilities don't have to be duplicated.

1225
01:03:39,800 --> 01:03:43,300
And so there's like I said, there's a few downsides to that, right?

1226
01:03:43,300 --> 01:03:47,200
It's not all positive but maybe we'll address that tomorrow.

1227
01:03:48,200 --> 01:03:52,400
All right, that's about it for now, we're out of time.

1228
01:03:52,400 --> 01:03:56,500
So let's go ahead and go to the questions and answers, right?

1229
01:03:59,400 --> 01:04:01,700
let's just just Cuban a

1230
01:04:03,500 --> 01:04:05,800
If anyone has a question of what I was talking about today, and we'll

1231
01:04:05,800 --> 01:04:06,600
see.

1232
01:04:13,500 --> 01:04:14,900
Let's see.

1233
01:04:15,000 --> 01:04:17,400
Have you heard of the dtrace tool?

1234
01:04:17,600 --> 01:04:21,600
It allows Dynamic tracing on running binaries and also Colonel not

1235
01:04:21,600 --> 01:04:23,200
available on Windows though.

1236
01:04:24,900 --> 01:04:26,100
No, I don't think I have.

1237
01:04:26,100 --> 01:04:31,400
I mean I'm mostly developed on windows so I don't tend to know much

1238
01:04:31,400 --> 01:04:33,900
about the Linux utilities, to be honest.

1239
01:04:39,600 --> 01:04:42,500
Alvin you mentioned in the pre stream, a dynamic memory and how does

1240
01:04:42,500 --> 01:04:43,100
that actually work?

1241
01:04:43,100 --> 01:04:46,400
Since we allocate memory, only once what happens when the arena is

1242
01:04:46,400 --> 01:04:46,800
full.

1243
01:04:47,100 --> 01:04:51,100
So all you do is you just make it so that you allocate in chunks.

1244
01:04:51,200 --> 01:04:56,600
So you allocate like I said you know 256 MB time or something or or 64

1245
01:04:56,600 --> 01:05:00,700
Meg's at a time or however much you want at a time and you just go

1246
01:05:00,700 --> 01:05:03,300
back to the operating system and get more memory if you want a dynamic

1247
01:05:03,300 --> 01:05:03,900
Arena, right?

1248
01:05:03,900 --> 01:05:06,300
There's nothing pretty much everything we've done.

1249
01:05:07,200 --> 01:05:08,300
You can actually do

1250
01:05:08,500 --> 01:05:11,200
With that with dynamic memory, allocation as well.

1251
01:05:11,400 --> 01:05:13,700
All you have to do is just take the Arenas and when they run out of

1252
01:05:13,700 --> 01:05:16,500
memory, they just ask the operating system for more, right?

1253
01:05:17,800 --> 01:05:20,800
So I was just trying to point out that like at some point I may show

1254
01:05:20,800 --> 01:05:24,100
how to do that because it's very simple and it, you know, people get

1255
01:05:24,100 --> 01:05:28,300
confused sometimes about the static allocation nature of things and

1256
01:05:28,300 --> 01:05:31,400
it's just like there's no the code actually all the code.

1257
01:05:31,400 --> 01:05:33,000
We've written doesn't actually have to change at all.

1258
01:05:33,000 --> 01:05:36,000
It can, it can actually work exactly the same with almost no

1259
01:05:36,000 --> 01:05:36,800
modification.

1260
01:05:37,400 --> 01:05:38,300
And so that was just

1261
01:05:38,400 --> 01:05:38,600
Nothing.

1262
01:05:38,600 --> 01:05:39,300
I was mentioning.

1263
01:05:45,400 --> 01:05:48,000
Mojo 123 x, you mentioned, the term Coalition.

1264
01:05:48,000 --> 01:05:49,700
This episode in several previous episodes.

1265
01:05:49,700 --> 01:05:51,200
Where exactly do you mean we use that term?

1266
01:05:51,400 --> 01:05:54,900
What I mean is that we the way the debug system is set up right now is

1267
01:05:55,300 --> 01:05:59,800
all of the game and engine code rights debug events into a

1268
01:06:00,000 --> 01:06:03,100
For and those debug answer totally raw.

1269
01:06:03,200 --> 01:06:07,400
They're like I entered a timing region and I exited a timing region,

1270
01:06:07,400 --> 01:06:08,000
right?

1271
01:06:08,100 --> 01:06:11,900
But at no point, does anyone know how long we actually spent in that

1272
01:06:11,900 --> 01:06:12,400
region?

1273
01:06:13,200 --> 01:06:18,300
So then after the fact, the collate, the collation part is going back

1274
01:06:18,300 --> 01:06:22,000
through that buffer and going, oh, I see a start and an end event.

1275
01:06:22,000 --> 01:06:24,400
I'm going to like pair those up together.

1276
01:06:24,500 --> 01:06:27,700
Take the difference between their clock values and produce like the

1277
01:06:27,700 --> 01:06:29,900
actual amount of time that was spent.

1278
01:06:30,000 --> 01:06:30,400
Out there.

1279
01:06:30,400 --> 01:06:33,200
That's like it's like collating like this putting the things in order

1280
01:06:33,200 --> 01:06:34,800
and understanding what they mean or whatever.

1281
01:06:34,800 --> 01:06:35,300
Right.

1282
01:06:38,600 --> 01:06:40,700
What keyboard do you use this keyboard?

1283
01:06:40,700 --> 01:06:42,500
Right here is a Das Keyboard three.

1284
01:06:42,800 --> 01:06:46,300
My current favorite keyboard is actually the Razer stealth tournament

1285
01:06:46,300 --> 01:06:46,900
Edition.

1286
01:06:50,000 --> 01:06:52,100
That's what I have on my other computer, the other room.

1287
01:06:54,500 --> 01:06:57,200
Could you elaborate a bit more on what memory alignment means?

1288
01:06:58,100 --> 01:07:01,500
Not probably right now because that was a whole, we talked about that

1289
01:07:01,500 --> 01:07:03,900
back in the episode where we talk about memory alignment.

1290
01:07:04,000 --> 01:07:10,300
Basically, it just means, you know, the memory address that you're

1291
01:07:10,400 --> 01:07:11,500
actually talking about, right?

1292
01:07:11,500 --> 01:07:15,300
You know, pointer or you know, everything stored in memory somewhere,

1293
01:07:15,300 --> 01:07:15,400
right?

1294
01:07:15,400 --> 01:07:17,200
So pointer is like an address in memory.

1295
01:07:17,200 --> 01:07:18,900
It's like, where stuff is stored.

1296
01:07:19,800 --> 01:07:24,000
Basically certain operations on certain CPUs.

1297
01:07:24,400 --> 01:07:29,500
Require those addresses to be aligned to a certain boundary.

1298
01:07:29,700 --> 01:07:36,400
So for example, if you had the address, you know, 16 the 16th B in

1299
01:07:36,400 --> 01:07:41,100
memory, it might be valid to do an operation on this 16th by in

1300
01:07:41,100 --> 01:07:45,000
memory, but it might not be valid to try to do that same operation on

1301
01:07:45,000 --> 01:07:47,300
the 13th, but invent in memory.

1302
01:07:47,500 --> 01:07:50,900
And the reason for that might be that the alignment that's required by

1303
01:07:50,900 --> 01:07:53,900
the processor is sixteen, byte boundaries.

1304
01:07:54,300 --> 01:07:58,500
Which is to say that the bound, the actual like pointers have to be

1305
01:07:58,500 --> 01:08:00,100
aligned every 16, right?

1306
01:08:00,100 --> 01:08:04,900
So, if I wanted to talk about a certain value as far as the process is

1307
01:08:04,900 --> 01:08:09,000
concerned, it might just be like, okay, it's got to be there at 0, 16

1308
01:08:09,000 --> 01:08:09,300
32.

1309
01:08:09,300 --> 01:08:11,500
So, you know, 48 64.

1310
01:08:12,100 --> 01:08:14,200
It's got to be at one of those locations.

1311
01:08:14,600 --> 01:08:18,899
It can't be in between, it can't be like off of that alignment, that's

1312
01:08:18,899 --> 01:08:19,800
what memory alignment is.

1313
01:08:19,800 --> 01:08:22,899
But that's a very brief explanation that we talked about that a bunch

1314
01:08:22,899 --> 01:08:23,300
an earlier episode.

1315
01:08:23,300 --> 01:08:24,300
So you'd want to

1316
01:08:25,300 --> 01:08:26,700
you want to go back and

1317
01:08:28,000 --> 01:08:28,700
look at that.

1318
01:08:37,500 --> 01:08:41,200
Elvin but wouldn't ask him to us from Ur, me expose more flavor points

1319
01:08:41,200 --> 01:08:43,200
and that's against the hmh memory philosophy.

1320
01:08:43,399 --> 01:08:46,500
Since the whole point of our scheme was that we're sure once we run

1321
01:08:46,500 --> 01:08:47,700
the game, we can't crash.

1322
01:08:48,100 --> 01:08:53,399
Well, yeah, like I said, I don't expect that we will necessarily do

1323
01:08:53,399 --> 01:08:53,899
that.

1324
01:08:54,100 --> 01:08:59,700
Meaning, I don't know that we will use Dynamic arenas.

1325
01:09:00,000 --> 01:09:05,600
Or the actual game storage, but a lot of people ask questions about it

1326
01:09:05,600 --> 01:09:10,000
and it's really trivial to show how to do and it's conceivable that

1327
01:09:10,000 --> 01:09:12,300
you could ship the game with it that way.

1328
01:09:12,500 --> 01:09:15,899
And it would basically just be like, okay, if there was a dial that

1329
01:09:15,899 --> 01:09:19,899
the user can set for how big you want the game world to be and we're

1330
01:09:19,899 --> 01:09:25,200
like well we let you set that to as big as doesn't crash your machine

1331
01:09:25,399 --> 01:09:29,300
or something, you know you could see doing that, you know.

1332
01:09:30,100 --> 01:09:30,600
I don't know.

1333
01:09:31,300 --> 01:09:35,399
I I don't think I probably will do that, but I'm just saying, you

1334
01:09:35,399 --> 01:09:37,399
know, we could it's theirs.

1335
01:09:38,200 --> 01:09:40,200
I just kind of wanted to get across the fact that

1336
01:09:41,200 --> 01:09:45,399
You don't have to take my memory philosophy, right?

1337
01:09:45,600 --> 01:09:48,100
Let's say you want your stuff to just dynamically grow and if it

1338
01:09:48,100 --> 01:09:48,899
crashes, it crashes.

1339
01:09:48,899 --> 01:09:50,600
That's what you want your thing to do.

1340
01:09:53,000 --> 01:09:57,300
The point is just that, that decision doesn't change the rest of the

1341
01:09:57,300 --> 01:09:57,500
code.

1342
01:09:57,500 --> 01:10:00,600
We wrote, you'd still could write it exactly the same way and I

1343
01:10:00,600 --> 01:10:01,500
probably would.

1344
01:10:01,700 --> 01:10:02,200
Right?

1345
01:10:02,300 --> 01:10:07,300
So the actual the, the two aspects there, the the fact that we're at,

1346
01:10:07,300 --> 01:10:10,800
we we the fact that we may want to allocate a

1347
01:10:11,000 --> 01:10:14,500
Big block of memory and then run and know that we, you know, never

1348
01:10:14,500 --> 01:10:15,900
would crash or run out of memory.

1349
01:10:16,900 --> 01:10:21,000
That fact doesn't actually change.

1350
01:10:21,000 --> 01:10:24,500
If we were to change that decision, it doesn't actually change the

1351
01:10:24,500 --> 01:10:27,100
rest of the code all the rest, the coast days, exactly the same for

1352
01:10:27,100 --> 01:10:28,900
the most part, and that's the important part.

1353
01:10:40,000 --> 01:10:40,400
K.

1354
01:10:40,400 --> 01:10:44,200
I'm always hesitant when using linked lists in engine code, and

1355
01:10:44,200 --> 01:10:48,700
gameplay code, because of their cash and friendliness, random access

1356
01:10:48,700 --> 01:10:50,600
memory and difficulty in debugging.

1357
01:10:50,900 --> 01:10:54,300
You'd have to dig down a node to find what you're looking for.

1358
01:10:54,800 --> 01:10:58,300
Do you think it's not that big of a deal and I'm worrying too much.

1359
01:11:04,100 --> 01:11:05,800
well, I guess what I would say is,

1360
01:11:07,500 --> 01:11:12,000
yes, you probably are worrying too much but no, you don't want to

1361
01:11:12,300 --> 01:11:15,600
completely unworthy about it is, I guess what I'd say.

1362
01:11:16,900 --> 01:11:19,200
in general, like,

1363
01:11:23,200 --> 01:11:26,900
Places in the code that might be hitting.

1364
01:11:26,900 --> 01:11:31,600
Pretty heavy, might take a significant amount of the execution time in

1365
01:11:31,600 --> 01:11:36,000
general you know probably don't want to be using linked lists that

1366
01:11:36,000 --> 01:11:37,800
much depending on the circumstance.

1367
01:11:37,800 --> 01:11:39,400
The sometimes you do right.

1368
01:11:39,500 --> 01:11:42,100
Sometimes things are the best thing, Etc.

1369
01:11:43,000 --> 01:11:47,000
So you don't want to design your system in such a way that you have to

1370
01:11:47,000 --> 01:11:48,500
use linked list somewhere or that.

1371
01:11:48,500 --> 01:11:50,600
The whole thing depends on it being linked lists.

1372
01:11:50,600 --> 01:11:52,800
Because then when you profile the game,

1373
01:11:53,000 --> 01:11:54,700
And find out that something is slow.

1374
01:11:55,000 --> 01:11:58,200
And then go oh the reason it's slow is because it's a linked list and

1375
01:11:58,200 --> 01:11:59,800
it's like you know to cash on.

1376
01:12:00,000 --> 01:12:02,600
And we need to make this an array or some kind of, you know, things

1377
01:12:02,600 --> 01:12:03,200
like that.

1378
01:12:04,000 --> 01:12:06,200
You have all this work.

1379
01:12:06,200 --> 01:12:09,500
You have to now do to fix that, that could be a problem.

1380
01:12:09,900 --> 01:12:12,600
But as long as you're using, you know, if you're just using linked

1381
01:12:12,600 --> 01:12:15,600
lists in a way, that's would be easily for your replace at any time

1382
01:12:15,700 --> 01:12:16,600
with something else.

1383
01:12:16,900 --> 01:12:21,100
Then I wouldn't even really be worried about that because, you know,

1384
01:12:22,300 --> 01:12:25,600
as long as it's free, you know, as long as it's reasonably simple for

1385
01:12:25,600 --> 01:12:28,300
you to just go I see there's a performance from here so I changed it

1386
01:12:28,300 --> 01:12:30,100
for a linked list to something more efficient.

1387
01:12:30,300 --> 01:12:34,300
That seems a totally fine thing, right?

1388
01:12:36,200 --> 01:12:39,600
On the other hand, I would also point out that the concept that linked

1389
01:12:39,600 --> 01:12:40,900
lists are slow.

1390
01:12:42,900 --> 01:12:47,000
You actually have to understand where the slowness might be coming

1391
01:12:47,000 --> 01:12:48,500
from or whether it actually affects you.

1392
01:12:48,500 --> 01:12:52,900
Because one of the reasons that people might see linked list as being

1393
01:12:52,900 --> 01:12:55,900
slower than they actually are, is that if in general, you're

1394
01:12:55,900 --> 01:13:00,400
allocating them very sparsely, then you know, you're pulling in a

1395
01:13:00,400 --> 01:13:05,600
different cache line every time and that, you know, can make them be.

1396
01:13:05,700 --> 01:13:12,200
Very slow, but if you allocate them out of an area where they're all

1397
01:13:12,200 --> 01:13:17,200
together already anyway, it may be that they're actually not that slow

1398
01:13:17,200 --> 01:13:20,300
because they're all kind of actually fairly cache coherent, right?

1399
01:13:20,300 --> 01:13:22,900
And the way that we do the memory Arenas, a lot of times you will be

1400
01:13:22,900 --> 01:13:26,100
allocating linked lists right next to each other potentially.

1401
01:13:26,100 --> 01:13:31,400
So there's other reasons why linked lists might not be as cash

1402
01:13:31,400 --> 01:13:34,400
unfriendly depending on how you actually do them.

1403
01:13:35,700 --> 01:13:37,500
And so that's a sort of separate issue.

1404
01:13:37,500 --> 01:13:41,600
But not really that related in general, I just say the takeaway is

1405
01:13:44,000 --> 01:13:50,500
Always be aware of what the cost will be for you to fix to change

1406
01:13:50,500 --> 01:13:51,900
whatever the thing is you're doing.

1407
01:13:54,400 --> 01:13:58,400
If it turns out to be performance problem, that's a very good way to

1408
01:13:58,400 --> 01:14:02,600
think about it because it lets, you know, as you're going through the

1409
01:14:02,600 --> 01:14:05,400
code, when you need to make performance decisions.

1410
01:14:06,100 --> 01:14:08,800
And so if you get to a piece of the code and you go, it would be

1411
01:14:08,800 --> 01:14:12,100
expensive here for me to change the type the way that I'm storing

1412
01:14:12,100 --> 01:14:12,800
these things.

1413
01:14:13,300 --> 01:14:15,000
That's a time to usually go.

1414
01:14:15,000 --> 01:14:18,200
Okay, I should probably stop and figure out what would be a good

1415
01:14:18,200 --> 01:14:21,900
performance store or into the storage mechanism and Implement that

1416
01:14:21,900 --> 01:14:22,900
from the start.

1417
01:14:23,800 --> 01:14:27,000
Rather than just doing whatever is most expedient.

1418
01:14:27,000 --> 01:14:30,300
But in most cases doing what's most expedient is actually probably the

1419
01:14:30,300 --> 01:14:34,100
best thing to do first and then come back to it later when you're

1420
01:14:34,100 --> 01:14:36,200
actually able to measure the performance.

1421
01:14:36,500 --> 01:14:41,300
And if there is a problem at that point, now you have the actual you

1422
01:14:41,300 --> 01:14:44,300
have actual metrics now, to work with and know what you're actually

1423
01:14:44,300 --> 01:14:45,200
trying to do.

1424
01:14:45,400 --> 01:14:49,500
Rather than guessing what you should be doing and whether a linked

1425
01:14:49,500 --> 01:14:52,900
list or an array, or a hash table or whatever is better there, right?

1426
01:15:03,700 --> 01:15:07,700
Jim 0 0 says I'm debugging on day 1 2001.

1427
01:15:07,700 --> 01:15:11,600
Do you use ENT instead of in 32 for any reason?

1428
01:15:12,900 --> 01:15:14,900
I I might have

1429
01:15:16,200 --> 01:15:17,900
It depends what the circumstance was.

1430
01:15:18,300 --> 01:15:19,600
Most of the time.

1431
01:15:20,600 --> 01:15:24,200
I don't use something like that.

1432
01:15:25,500 --> 01:15:26,700
This is going to be hard, right?

1433
01:15:26,700 --> 01:15:28,500
Because it's going to show me all the ants.

1434
01:15:31,900 --> 01:15:32,900
Yeah, this is bad.

1435
01:15:37,900 --> 01:15:41,700
Yes, it looking through the code here, like, for example, this this is

1436
01:15:41,700 --> 01:15:42,500
not.

1437
01:15:42,500 --> 01:15:44,300
I don't know why that's an in right?

1438
01:15:44,300 --> 01:15:47,700
Like that should probably be you and 32.

1439
01:15:51,500 --> 01:15:56,100
I would say this one would probably be you in 32.

1440
01:15:58,000 --> 01:16:07,700
Those are, those are probably should not be there to sign wave, that's

1441
01:16:07,700 --> 01:16:08,600
just some test code.

1442
01:16:08,600 --> 01:16:13,400
So I wouldn't really care about that too much in depth and handmade

1443
01:16:13,400 --> 01:16:15,500
debug, I don't know why.

1444
01:16:16,100 --> 01:16:19,500
Yeah, so these I don't, those are just over sites.

1445
01:16:19,500 --> 01:16:23,400
They we really shouldn't be using ants.

1446
01:16:23,500 --> 01:16:26,300
I feel like in most of these cases

1447
01:16:29,400 --> 01:16:30,000
Yeah.

1448
01:16:38,400 --> 01:16:39,600
Yeah, I don't know.

1449
01:16:41,300 --> 01:16:43,400
I don't know why we're using ants in these.

1450
01:16:44,300 --> 01:16:46,100
I would say that's just an oversight.

1451
01:16:46,100 --> 01:16:48,200
I don't know why we're using in those cases.

1452
01:16:48,200 --> 01:16:51,000
We could probably replace them and probably should eventually

1453
01:16:56,800 --> 01:17:00,900
and SZ lives like the stb lives that you specify a custom Malik free

1454
01:17:00,900 --> 01:17:01,500
function.

1455
01:17:01,700 --> 01:17:04,500
How would you integrate that into an arena based system?

1456
01:17:07,000 --> 01:17:11,500
Well, I guess it depends on what you mean by integrate into if you're

1457
01:17:11,500 --> 01:17:16,700
trying to say how do we actually get the memory out for them?

1458
01:17:18,100 --> 01:17:20,500
Well, you know what honestly I guess I'm not sure what you mean.

1459
01:17:21,500 --> 01:17:22,800
What do you mean by that?

1460
01:17:25,300 --> 01:17:28,500
Would be would be my like, what do you mean by?

1461
01:17:28,800 --> 01:17:30,100
How do you integrate into it?

1462
01:17:32,300 --> 01:17:37,100
Are you saying if the are you basically saying, if you have an arena

1463
01:17:37,100 --> 01:17:41,800
based system that you're using and then you are trying to call the stb

1464
01:17:41,800 --> 01:17:43,300
library to do something.

1465
01:17:43,700 --> 01:17:47,600
How do you specify malloc and free to it?

1466
01:17:47,700 --> 01:17:48,700
Is that what you're saying?

1467
01:17:49,000 --> 01:17:49,500
I guess.

1468
01:17:54,600 --> 01:17:54,900
Little bit.

1469
01:17:54,900 --> 01:17:56,300
Have you heard of VM?

1470
01:17:56,700 --> 01:17:59,500
No, I have not heard of He-Man.

1471
01:18:03,500 --> 01:18:06,900
Alvin if you want to use object pools, reusable, recyclable object,

1472
01:18:06,900 --> 01:18:07,400
for enemies.

1473
01:18:07,400 --> 01:18:10,200
For example, where would be the best place to store?

1474
01:18:10,200 --> 01:18:11,600
Them permanent or Transit memory?

1475
01:18:11,600 --> 01:18:13,700
I guess they wouldn't be in transient because the whole game shares

1476
01:18:13,700 --> 01:18:15,300
the same tool so I guess permanent yet.

1477
01:18:15,300 --> 01:18:18,600
Anything permanent and transient is just about whether or not it's

1478
01:18:18,600 --> 01:18:21,900
something that could be regenerated if you've got rid of it, right?

1479
01:18:22,000 --> 01:18:25,500
And so the transient storage is just things that if you blew it away

1480
01:18:25,700 --> 01:18:28,500
it could just be recreated on the next frame and it would be slower to

1481
01:18:28,500 --> 01:18:31,400
do that because it's where all the stuff gets cached like Britt maps

1482
01:18:31,400 --> 01:18:32,100
and everything.

1483
01:18:32,300 --> 01:18:32,600
So you don't

1484
01:18:32,700 --> 01:18:35,400
Want to throw it away, but if you did throw it away, it was fine.

1485
01:18:36,300 --> 01:18:38,500
Permanent storage is, where you store stuff, that actually is the

1486
01:18:38,500 --> 01:18:41,100
state of the game and can't go away, right?

1487
01:18:41,400 --> 01:18:44,900
Meaning if you deleted the permanent store then you lost your game

1488
01:18:44,900 --> 01:18:48,700
state so the you know the user just lost whatever the game was that

1489
01:18:48,700 --> 01:18:51,500
they were playing so the permanent store you know, that needs to stay

1490
01:18:51,500 --> 01:18:51,900
there.

1491
01:18:54,700 --> 01:18:57,400
Elvin reinterpret, static cast and dynamic cast.

1492
01:18:57,400 --> 01:18:58,700
Are they of any good?

1493
01:18:58,700 --> 01:18:59,200
Use?

1494
01:18:59,900 --> 01:19:01,500
Not really there.

1495
01:19:01,500 --> 01:19:05,200
There's I guess.

1496
01:19:11,200 --> 01:19:14,400
No, I mean not not really not that I can think of offhand.

1497
01:19:15,200 --> 01:19:18,300
They're just kind of extra verbosity for no real reason.

1498
01:19:19,200 --> 01:19:19,800
I mean

1499
01:19:25,000 --> 01:19:28,000
yeah, I would say know that they're pretty useless.

1500
01:19:34,200 --> 01:19:37,100
And to see, there are lives that allocating and freeing multiple

1501
01:19:37,100 --> 01:19:38,600
chunks of memory during runtime.

1502
01:19:38,900 --> 01:19:41,900
How would you specify Malik free for them in an arena based game like

1503
01:19:41,900 --> 01:19:42,700
handmade hero?

1504
01:19:42,900 --> 01:19:50,700
You can't really, I mean, basically, if you have a system that that

1505
01:19:51,200 --> 01:19:58,700
requires fully dynamic memory, allocation, then there's no way you can

1506
01:19:58,800 --> 01:20:02,200
use it in a system which is not about fully dynamic memory,

1507
01:20:02,200 --> 01:20:02,800
allocation.

1508
01:20:03,400 --> 01:20:03,900
Right.

1509
01:20:06,600 --> 01:20:10,300
Now, for certain circumstances you can just ignore it.

1510
01:20:10,400 --> 01:20:12,800
Like for example, if you know that there's a bounded amount of memory,

1511
01:20:12,800 --> 01:20:18,000
the thing will use, you can just get not have free do anything and you

1512
01:20:18,000 --> 01:20:21,700
can have Malik just be pushed size and then when you're done calling

1513
01:20:21,700 --> 01:20:24,600
through the library, you just get rid of all the memory, right?

1514
01:20:24,600 --> 01:20:27,700
You use the like temporary memory Point thing that we did.

1515
01:20:28,600 --> 01:20:31,600
So, you know, you can do that if you want to

1516
01:20:33,500 --> 01:20:36,500
But yet you can't you can't integrate those in.

1517
01:20:38,100 --> 01:20:41,400
It's one of the reasons I don't really like using most libraries is

1518
01:20:41,400 --> 01:20:44,900
they don't have a solid memory model most of the time.

1519
01:20:45,200 --> 01:20:49,000
So they don't really let you give them efficient ways to deal with

1520
01:20:49,000 --> 01:20:49,300
memory.

1521
01:20:49,300 --> 01:20:54,200
They always just expect fully dynamic memory, which is usually not

1522
01:20:54,200 --> 01:20:57,300
necessary mean if you actually look at what the library actually

1523
01:20:57,300 --> 01:20:59,800
needs, it doesn't usually actually need

1524
01:21:00,400 --> 01:21:01,600
Fully dynamic memory.

1525
01:21:01,900 --> 01:21:06,500
Usually needs like two stacks, 14 stuff that's going to keep and then

1526
01:21:06,500 --> 01:21:12,200
a temporary stack that's usually all it needs but you know what do you

1527
01:21:12,200 --> 01:21:12,600
do?

1528
01:21:27,200 --> 01:21:28,800
Jim 000.

1529
01:21:28,800 --> 01:21:32,600
The interviews in question, was a lot in Sim Deidre, rectangular going

1530
01:21:32,600 --> 01:21:35,300
to today and my version of the code is crashing on access violation

1531
01:21:35,300 --> 01:21:40,100
reading location, when casting pixel to m120 a tie at the start could

1532
01:21:40,100 --> 01:21:46,100
iterating with inverses in 32 years and no, although, that that sounds

1533
01:21:46,100 --> 01:21:49,800
to me like an alignment problem memory alignment problem, but I don't

1534
01:21:49,800 --> 01:21:50,400
actually know.

1535
01:21:51,200 --> 01:21:54,400
it could also be because the source memories not there,

1536
01:21:55,700 --> 01:21:56,400
But I don't know.

1537
01:21:57,800 --> 01:21:59,700
But no, that has nothing to do with interested in 32.

1538
01:21:59,700 --> 01:22:00,600
I would suspect

1539
01:22:03,300 --> 01:22:05,500
Because in thin 32 are the same thing.

1540
01:22:05,900 --> 01:22:09,300
So there's really no difference between typing either of those

1541
01:22:12,000 --> 01:22:14,200
What do you think of passed by reference and references?

1542
01:22:14,200 --> 01:22:17,500
I think they opposite the code, because it's harder now to see from

1543
01:22:17,500 --> 01:22:21,500
the calling site to find out if an object, is passed by value, or are

1544
01:22:21,500 --> 01:22:24,500
we actually passing an address of it to modify it?

1545
01:22:29,400 --> 01:22:31,600
I guess what I would say is I actually

1546
01:22:32,900 --> 01:22:36,000
References like everything else in C++.

1547
01:22:36,600 --> 01:22:38,400
We're like a harsh.

1548
01:22:38,400 --> 01:22:42,600
Like, they were like somebody who didn't really know how to program

1549
01:22:43,100 --> 01:22:45,900
like was like I should probably try to do something that fixes this

1550
01:22:45,900 --> 01:22:49,600
thing and then they made something that didn't really actually fix the

1551
01:22:49,600 --> 01:22:50,100
thing.

1552
01:22:50,500 --> 01:22:51,000
Right?

1553
01:22:53,400 --> 01:22:58,200
And what I mean by that is like, so there actually is one useful thing

1554
01:22:58,300 --> 01:23:02,400
about references and that is that they allow you to use

1555
01:23:02,600 --> 01:23:08,400
Semantics of something as if you actually had it even though it's

1556
01:23:08,400 --> 01:23:10,100
actually a pointer, right.

1557
01:23:11,400 --> 01:23:16,700
And the reason that's kind of nice is because it gets you.

1558
01:23:17,200 --> 01:23:20,100
It gets you to be able to do stuff like this, right?

1559
01:23:20,200 --> 01:23:21,200
It's like, okay,

1560
01:23:22,700 --> 01:23:26,200
I write some code and I'm like, you know,

1561
01:23:34,000 --> 01:23:38,400
I do some stuff where it's like, food at x equals, you know, Bart of X

1562
01:23:38,400 --> 01:23:41,400
plus, you know, something, whatever.

1563
01:23:41,400 --> 01:23:42,000
I don't know.

1564
01:23:43,300 --> 01:23:44,700
This sort of thing, right?

1565
01:23:46,200 --> 01:23:49,000
And then later on, I decide I'm going to pull this out into a helper

1566
01:23:49,000 --> 01:23:49,700
function.

1567
01:23:49,800 --> 01:23:53,600
So I copy the thing, but I want to I need to pass the food that its

1568
01:23:53,600 --> 01:23:54,200
operating on.

1569
01:23:54,200 --> 01:23:56,700
So now I have to change it to a pointer, right?

1570
01:24:01,700 --> 01:24:02,900
That sort of thing happens.

1571
01:24:03,400 --> 01:24:07,300
And so this gets annoying when there's like, tons of these, right?

1572
01:24:07,300 --> 01:24:10,400
And now, like, I copied them up in here, and it's like, ah, crap.

1573
01:24:10,400 --> 01:24:13,600
I gotta, like, change these all to like the thing, right?

1574
01:24:13,600 --> 01:24:14,400
It's just annoying.

1575
01:24:14,700 --> 01:24:16,600
And so, being able to do this,

1576
01:24:18,500 --> 01:24:21,700
Was actually kind of nice because it means that like when I call this

1577
01:24:21,700 --> 01:24:22,200
thing.

1578
01:24:22,300 --> 01:24:23,800
Now, the code is the same.

1579
01:24:23,900 --> 01:24:27,600
Even though I'm trying to do this like concept, I'm trying to do this.

1580
01:24:27,600 --> 01:24:30,800
Like I'm passing you a thing that I want you to modify so I'm not

1581
01:24:30,800 --> 01:24:32,900
trying to pass it by value, right?

1582
01:24:34,400 --> 01:24:37,800
The problem is and this is not really necessarily the thing they were

1583
01:24:37,800 --> 01:24:40,100
trying to solve with references either mind you.

1584
01:24:40,500 --> 01:24:44,000
This is why I say that like you know, original C++ design is just all

1585
01:24:44,000 --> 01:24:44,600
messed up.

1586
01:24:48,200 --> 01:24:52,000
But the thing about this is, it's actually just papering.

1587
01:24:52,000 --> 01:24:55,600
Over the thing you actually wanted which is, to not have Dot and arrow

1588
01:24:55,600 --> 01:24:56,400
in the first place.

1589
01:24:56,600 --> 01:24:59,600
Like, what I actually wanted to just have this code, just be the same

1590
01:24:59,600 --> 01:25:01,500
in both cases, right?

1591
01:25:01,600 --> 01:25:06,900
Because it is basically the same, you know, the compiler doesn't need

1592
01:25:07,000 --> 01:25:08,000
this information.

1593
01:25:09,000 --> 01:25:13,100
In fact, there's never such a thing as code that can compile like this

1594
01:25:14,400 --> 01:25:17,300
and this at the same time, so the compiler.

1595
01:25:17,500 --> 01:25:18,200
Always goes.

1596
01:25:18,200 --> 01:25:18,900
Oh it's a pointer.

1597
01:25:18,900 --> 01:25:20,000
It needed an arrow.

1598
01:25:20,000 --> 01:25:21,100
It could have just gone.

1599
01:25:21,100 --> 01:25:23,400
Like when it's a pointer, I use the dot as well.

1600
01:25:23,900 --> 01:25:27,600
And that would have been a much better use of that, right?

1601
01:25:29,600 --> 01:25:30,200
So yeah.

1602
01:25:30,400 --> 01:25:33,000
So I don't really like references.

1603
01:25:33,000 --> 01:25:35,300
They do have one nice aspect, I guess.

1604
01:25:35,700 --> 01:25:36,300
But still

1605
01:25:48,600 --> 01:25:53,500
All right, looks like we don't have any more questions so I will go

1606
01:25:53,500 --> 01:26:00,700
ahead and sort of wind it down like a little like wind-up toy that has

1607
01:26:00,700 --> 01:26:04,000
run out of spring if you know what I'm saying.

1608
01:26:05,000 --> 01:26:07,100
So thank you everyone for joining me, for another episode of handmade

1609
01:26:07,100 --> 01:26:07,300
here.

1610
01:26:07,300 --> 01:26:09,100
It's good to be back.

1611
01:26:10,100 --> 01:26:16,300
I hope you have all sort of gotten your programming sensibilities back

1612
01:26:16,300 --> 01:26:17,600
on track for this week of code.

1613
01:26:18,700 --> 01:26:20,200
I will be back here tomorrow.

1614
01:26:20,400 --> 01:26:21,600
5:00 p.m.

1615
01:26:21,700 --> 01:26:24,000
Pacific Standard time again.

1616
01:26:24,700 --> 01:26:29,800
Hope, see you all back here on Twitch, and I guess I should also point

1617
01:26:29,800 --> 01:26:32,000
out the fact that it's a slightly short week.

1618
01:26:32,000 --> 01:26:36,000
We didn't have programming Monday, but will be programming Tuesday

1619
01:26:36,000 --> 01:26:39,300
through Friday, so and then will pretty much be back on a regular

1620
01:26:39,300 --> 01:26:40,700
schedule for the rest of the time.

1621
01:26:40,700 --> 01:26:42,900
I think, I don't know what we'll be doing about Thanksgiving.

1622
01:26:42,900 --> 01:26:45,900
That maybe will be off just Thanksgiving day.

1623
01:26:45,900 --> 01:26:46,600
I'm not sure.

1624
01:26:46,900 --> 01:26:47,600
But in general,

1625
01:26:47,700 --> 01:26:52,100
well, we should have a regular schedule from here till the holidays

1626
01:26:52,100 --> 01:26:53,200
till Christmas time.

1627
01:26:54,600 --> 01:26:56,700
All right, that's about it.

1628
01:26:56,800 --> 01:26:57,300
As always.

1629
01:26:57,300 --> 01:26:59,900
If you want to follow along at home, you can always

1630
01:27:00,000 --> 01:27:03,800
Pre-order the game on hand Mirador, get comes to the source code, and

1631
01:27:03,800 --> 01:27:09,900
so if you would like to actually play around with it yourself, that's

1632
01:27:09,900 --> 01:27:10,900
an easy way to do it.

1633
01:27:10,900 --> 01:27:14,400
We also have a forum site which has now been taken over by the

1634
01:27:14,400 --> 01:27:17,900
handmaid of guys, so it's hosted on their site and it seems to be

1635
01:27:17,900 --> 01:27:18,700
running pretty smoothly.

1636
01:27:18,700 --> 01:27:24,400
Now, you can see it's now at hero dot handmade, Dev dot org and it's

1637
01:27:24,400 --> 01:27:26,000
still kind of, you know, being worked on.

1638
01:27:26,000 --> 01:27:29,800
So there might be some some transition pains, as you can kind of see

1639
01:27:30,000 --> 01:27:34,800
See as it's coming imported but it seems like it's working pretty well

1640
01:27:35,900 --> 01:27:38,200
and and should be fully functional.

1641
01:27:38,200 --> 01:27:42,900
If it's not always let us know the the folks who are working out at

1642
01:27:42,900 --> 01:27:47,200
are pretty darn good and they managed to deal with Joomla nightmares

1643
01:27:47,200 --> 01:27:49,800
and all these other sorts of things pretty quickly.

1644
01:27:49,800 --> 01:27:54,700
So, if you report a bug, it tends to get fixed fixed presently.

1645
01:27:55,000 --> 01:27:56,100
We also have a patreon page.

1646
01:27:56,100 --> 01:27:57,300
Want to support the video series.

1647
01:27:57,300 --> 01:27:59,200
We have a tweetbot, the tweets, the schedule at you.

1648
01:28:00,000 --> 01:28:02,300
If you want to know, when this is going to be live, that's also a good

1649
01:28:02,300 --> 01:28:03,200
place to do it.

1650
01:28:05,000 --> 01:28:08,500
And we also have a convention coming up.

1651
01:28:08,500 --> 01:28:12,200
There's I think something like 25 tickets left.

1652
01:28:12,300 --> 01:28:13,500
I think at this point.

1653
01:28:14,000 --> 01:28:15,000
So it's almost sold out.

1654
01:28:15,000 --> 01:28:19,700
But if you would like to come to our convention, it's in Seattle, it's

1655
01:28:19,700 --> 01:28:22,800
coming up in just, what is it?

1656
01:28:22,900 --> 01:28:23,500
It's coming up.

1657
01:28:23,500 --> 01:28:24,400
It's right here.

1658
01:28:24,400 --> 01:28:27,900
So, it's just like, it's a little over two weeks away, two and a half

1659
01:28:27,900 --> 01:28:28,300
weeks away.

1660
01:28:28,300 --> 01:28:29,800
Let's say there's

1661
01:28:29,900 --> 01:28:32,700
There's still a chance to get some some tickets to it.

1662
01:28:32,700 --> 01:28:37,200
So if you type handmade con dot organ to your browser, you can go to

1663
01:28:37,200 --> 01:28:40,900
the site that that has the tickets on it and there are still some

1664
01:28:40,900 --> 01:28:41,600
available.

1665
01:28:42,100 --> 01:28:46,700
So again hope to see you guys back here tomorrow.

1666
01:28:46,700 --> 01:28:51,000
And of course, hope to see you at handmade Con in December until

1667
01:28:51,400 --> 01:28:56,500
either or both of those things have fun programming and I will see you

1668
01:28:56,500 --> 01:28:57,600
guys on the internet.

1669
01:28:57,600 --> 01:28:58,500
Take it easy, everyone.

