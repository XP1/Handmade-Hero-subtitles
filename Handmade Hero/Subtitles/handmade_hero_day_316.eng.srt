1
00:00:02,000 --> 00:00:04,400
Hello everyone and welcome to handmade here on the show.

2
00:00:04,400 --> 00:00:07,400
We could have complete game live on stream.

3
00:00:08,400 --> 00:00:12,100
We stopped yesterday after rewriting a bunch of stuff and we need to

4
00:00:12,100 --> 00:00:13,300
go to bucket and get it working.

5
00:00:17,200 --> 00:00:19,000
Kind of a nice thing actually.

6
00:00:19,800 --> 00:00:25,100
It's a lot like I know that writers or writing teachers or something,

7
00:00:25,100 --> 00:00:29,300
I don't know often say stuff like when you're writing a book or

8
00:00:29,300 --> 00:00:32,700
something, stop in, when you know exactly what you're going to write

9
00:00:32,700 --> 00:00:33,900
next that night.

10
00:00:33,900 --> 00:00:36,200
So that in the morning, it's easier to get started again or something

11
00:00:36,200 --> 00:00:36,600
like this.

12
00:00:36,600 --> 00:00:41,000
I have no idea point being we're in a situation where we know exactly

13
00:00:41,000 --> 00:00:43,200
what we need to do and it's just a mugging work.

14
00:00:43,200 --> 00:00:44,000
So hopefully.

15
00:00:44,500 --> 00:00:48,200
We can just jump right in day 3, 16, you want to start with de 315

16
00:00:48,200 --> 00:00:48,500
source?

17
00:00:48,500 --> 00:00:48,700
Code?

18
00:00:48,700 --> 00:00:50,200
That's what I'm working with right now.

19
00:00:51,100 --> 00:00:56,800
Hopefully you have that same day, Thrifty 315 source to start with,

20
00:00:57,200 --> 00:00:58,800
this is what was happening to us.

21
00:00:59,300 --> 00:01:01,300
Speaking of assertions, on the pre stream.

22
00:01:01,600 --> 00:01:04,200
This is exactly an example of one of those assertions.

23
00:01:04,599 --> 00:01:08,100
This is telling us that we have output, a cliprect index that is

24
00:01:08,100 --> 00:01:09,000
totally bogus.

25
00:01:10,000 --> 00:01:11,800
And so we need to kind of go.

26
00:01:11,900 --> 00:01:14,000
Look at all the sort of

27
00:01:14,100 --> 00:01:18,500
That we made to our code and, you know, it's not really a surprise

28
00:01:18,500 --> 00:01:20,700
that we mess something up, its kind of, finicky code that we were

29
00:01:20,700 --> 00:01:21,300
working on.

30
00:01:21,700 --> 00:01:24,400
So we need to kind of go back there and just take a look at what's

31
00:01:24,400 --> 00:01:30,900
going on and try to make sure that we have our code nailed down.

32
00:01:31,500 --> 00:01:36,100
Alright, so the first thing that I want to check obviously is you know

33
00:01:36,100 --> 00:01:37,600
we come in here and we get a clip.

34
00:01:37,600 --> 00:01:38,400
Rect index.

35
00:01:38,600 --> 00:01:40,600
That's that's way out of bounds right?

36
00:01:40,700 --> 00:01:43,800
16 527, not a clip rect that

37
00:01:44,100 --> 00:01:44,900
Really means anything.

38
00:01:45,000 --> 00:01:46,800
I wanted to see what the header is here.

39
00:01:47,300 --> 00:01:51,000
It looks to me like the header is is garbage, right?

40
00:01:51,200 --> 00:01:54,100
And the reason I just want to check that is because I wanted to know

41
00:01:54,100 --> 00:02:00,800
whether we were in a circumstance where you know, we were where we

42
00:02:00,800 --> 00:02:03,700
were looking at a wrong location or whether it was a wrong clip,

43
00:02:03,700 --> 00:02:04,200
directing this.

44
00:02:04,200 --> 00:02:06,200
It looks like we're looking at a wrong location.

45
00:02:06,800 --> 00:02:10,300
Now I, you know, I kind of already have because, you know, we wrote

46
00:02:10,300 --> 00:02:13,300
the code hastily yesterday and we didn't have a chance to really look

47
00:02:13,300 --> 00:02:14,000
at it at all.

48
00:02:14,100 --> 00:02:16,500
So, you know, in my mind, I've already got a bunch of ideas of

49
00:02:16,500 --> 00:02:19,700
probably what's wrong, and so I'm just going to go look at those first

50
00:02:19,700 --> 00:02:22,300
before I do anything more sophisticated than that.

51
00:02:23,000 --> 00:02:25,600
And the first thing that I want to look at is when we push it on.

52
00:02:25,800 --> 00:02:28,900
I don't know if I ever updated the code that actually sets what the

53
00:02:28,900 --> 00:02:31,500
offset actually is right.

54
00:02:32,400 --> 00:02:39,300
And so if we look when we do push render elements and you know, we we

55
00:02:39,300 --> 00:02:41,200
work with the offsets and stuff like that.

56
00:02:41,400 --> 00:02:43,200
You can see here we do, you know, whatever it is.

57
00:02:43,200 --> 00:02:44,000
We're going to do.

58
00:02:44,200 --> 00:02:48,100
And we come down here and we take a look at the offset stuff.

59
00:02:48,900 --> 00:02:53,300
I don't know if this offset stuff is really what I want it to be.

60
00:02:53,300 --> 00:02:54,400
I don't really know.

61
00:02:54,900 --> 00:02:57,200
I didn't really look too carefully at that code.

62
00:02:57,200 --> 00:02:59,800
So I don't know whether those offsets are valid offsets or

63
00:03:00,000 --> 00:03:02,700
Whether you know what they are or what's going on, right?

64
00:03:03,500 --> 00:03:07,700
So we kind of need to do a little bit of work to make sure that that

65
00:03:07,700 --> 00:03:09,400
what we're doing here, makes sense.

66
00:03:10,100 --> 00:03:13,400
And if I take a look at this code, it already looks stupid to me.

67
00:03:13,600 --> 00:03:16,300
I think I was probably just hallucinating when I wrote it.

68
00:03:17,100 --> 00:03:18,600
If you look at what's going on.

69
00:03:18,800 --> 00:03:21,800
That offset is supposed to be where in the buffer we wrote the data,

70
00:03:22,000 --> 00:03:22,700
right?

71
00:03:22,900 --> 00:03:27,100
And we didn't like what I did is is basically compute how far there is

72
00:03:27,100 --> 00:03:29,800
to the end of the buffer because I was thinking an end to buffer mode.

73
00:03:30,000 --> 00:03:30,900
Yeah, but we don't want that.

74
00:03:30,900 --> 00:03:34,400
We just want to know where in the buffer, it actually is.

75
00:03:34,400 --> 00:03:38,100
And so, you can kind of see here that that's what this computation

76
00:03:38,100 --> 00:03:38,600
would have been.

77
00:03:39,000 --> 00:03:39,900
So that was just dumb.

78
00:03:39,900 --> 00:03:41,200
So that's the problem to begin with.

79
00:03:41,200 --> 00:03:42,200
So, let's start.

80
00:03:42,300 --> 00:03:42,600
Oops.

81
00:03:42,600 --> 00:03:44,200
I didn't load my project file, did I?

82
00:03:45,100 --> 00:03:45,600
There we go.

83
00:03:46,900 --> 00:03:49,500
Let's start with that because that's at least one problem.

84
00:03:49,700 --> 00:03:50,800
Let's get that out of the way.

85
00:03:51,900 --> 00:03:59,100
All right, so now we're back to looks like actually a saner situation.

86
00:03:59,100 --> 00:04:02,300
Let's see how we're doing on the rest of our sorting.

87
00:04:03,000 --> 00:04:05,300
So that actually looks like we're sorting properly.

88
00:04:05,300 --> 00:04:09,200
Now in terms of our slices so who knows.

89
00:04:09,200 --> 00:04:10,700
Maybe that was the only error.

90
00:04:10,700 --> 00:04:15,500
I'm not entirely sure, but we definitely have one other problem that

91
00:04:15,500 --> 00:04:16,100
you can see that.

92
00:04:16,200 --> 00:04:18,500
Introduced, which is previously.

93
00:04:18,500 --> 00:04:22,800
We sort of had this thing for sorting the hero structure and you can

94
00:04:22,800 --> 00:04:23,100
see that.

95
00:04:23,100 --> 00:04:24,500
That's all busted now.

96
00:04:24,600 --> 00:04:25,200
Right.

97
00:04:25,700 --> 00:04:29,500
You can see that the hero is not at all that that aggregate sort

98
00:04:29,700 --> 00:04:33,200
concept that we have there, that's obviously completely trashed.

99
00:04:33,300 --> 00:04:35,000
So, we need to kind of go fix that.

100
00:04:35,000 --> 00:04:37,500
And we also have some weird things here, like, what's going on with

101
00:04:37,500 --> 00:04:38,500
those trees and stuff like that.

102
00:04:38,500 --> 00:04:41,600
So we've got a bunch of things that we need to go look at and so we

103
00:04:41,600 --> 00:04:43,800
can go look at them now.

104
00:04:45,800 --> 00:04:49,300
Alright, so the first thing that I want to look at is actually I'm

105
00:04:49,300 --> 00:04:56,000
going to take a quick detour here because I want to sort of take it

106
00:04:56,000 --> 00:05:01,200
one thing at a time inside, handmade world's mode.

107
00:05:01,200 --> 00:05:06,200
When we do add standard rooms, I'm going to go back to just one room

108
00:05:06,200 --> 00:05:10,500
briefly and I want to take a look at the aggregate sorting since that

109
00:05:10,500 --> 00:05:14,600
was code that we kind of broke before so you can kind of see and and

110
00:05:14,600 --> 00:05:15,400
you can see

111
00:05:16,200 --> 00:05:18,800
There's more than just that that's wrong, right?

112
00:05:18,800 --> 00:05:22,600
Because if if you look at what we had before, we didn't have all those

113
00:05:22,600 --> 00:05:24,700
weird blinking tree problems, right?

114
00:05:25,000 --> 00:05:27,100
So we're not quite there yet.

115
00:05:27,100 --> 00:05:30,600
We still have some errors as to as to, what's happening.

116
00:05:31,500 --> 00:05:35,300
So let's take a look at what's going on there and let's start to try

117
00:05:35,300 --> 00:05:38,100
and solidify that a little bit more.

118
00:05:38,900 --> 00:05:42,400
So one thing that's true about this is, I do want to make sure that

119
00:05:42,400 --> 00:05:44,000
this offset is actually correct.

120
00:05:44,000 --> 00:05:45,600
Now we know that it's not woefully

121
00:05:46,200 --> 00:05:49,700
It's not crashing lie wrong but we don't know if it may be points, it

122
00:05:49,700 --> 00:05:51,500
slightly the wrong thing or something like this.

123
00:05:52,100 --> 00:05:55,100
So if I have my pushed by for data at a time, I pushed by four base

124
00:05:55,100 --> 00:05:58,000
and I subtract those two, what I want to know is is this actually

125
00:05:58,000 --> 00:05:59,900
pointing at the correct location?

126
00:06:00,000 --> 00:06:00,300
Action.

127
00:06:00,700 --> 00:06:03,500
I think that it is but let me just make set, make sure of that.

128
00:06:03,800 --> 00:06:06,500
So in here, you know we have the put, in fact, you know what.

129
00:06:06,600 --> 00:06:09,100
Now, I think about it, what we really want to do is say where the

130
00:06:09,100 --> 00:06:10,700
header actually is, right?

131
00:06:10,700 --> 00:06:14,500
That's what we're trying to point out anyway, so let me just do this.

132
00:06:17,400 --> 00:06:19,000
I mean, that's what we actually wanted now.

133
00:06:19,000 --> 00:06:21,600
I think those are the same thing, so this shouldn't change anything.

134
00:06:21,600 --> 00:06:24,800
We should see the same behavior but that's what I want to start with

135
00:06:26,000 --> 00:06:27,100
certainly, right.

136
00:06:27,900 --> 00:06:29,900
And so so that's that's the Baseline.

137
00:06:30,600 --> 00:06:34,400
So now that I know that I've got the offset pointing at least a header

138
00:06:34,400 --> 00:06:35,900
that I'm actually filling in.

139
00:06:36,000 --> 00:06:36,700
Right.

140
00:06:36,900 --> 00:06:41,400
And you can see that I'm filling in sort of the various fields of

141
00:06:41,400 --> 00:06:41,600
that.

142
00:06:41,600 --> 00:06:43,900
And then I'm filling in the sort stuff as well.

143
00:06:44,900 --> 00:06:47,100
What I want to do now is take a look at the group is

144
00:06:47,200 --> 00:06:50,100
Hitting answer for the group is aggregating stuff.

145
00:06:50,100 --> 00:06:53,500
And I say first aggregate at, you know, we have the sort entry count

146
00:06:53,500 --> 00:06:57,600
here and I'm just saying if this happens to be the first one,

147
00:07:03,000 --> 00:07:06,500
Then I'm going to copy in the start key and if not, then I'm going to

148
00:07:06,500 --> 00:07:08,600
do the, the merge operations, right?

149
00:07:09,200 --> 00:07:13,600
I'm going to do a merge operations with that, same sort key that, that

150
00:07:13,600 --> 00:07:14,400
we were passed in.

151
00:07:14,900 --> 00:07:17,900
So, what I want to know is, is this operating properly and I just want

152
00:07:17,900 --> 00:07:20,100
to take a quick look at the actual code for this.

153
00:07:20,600 --> 00:07:23,000
So when we do a begin aggregate, sort, create, we're basically saying.

154
00:07:23,000 --> 00:07:26,000
The first aggregate is that wherever the sword entry count was?

155
00:07:26,300 --> 00:07:28,100
That's what we're saying, right?

156
00:07:28,700 --> 00:07:29,800
And that seems correct to me.

157
00:07:30,000 --> 00:07:32,800
Because that's pointing at essentially, the next one that we're going

158
00:07:32,800 --> 00:07:33,400
to fill in.

159
00:07:34,000 --> 00:07:37,100
So then when we come here and we say, first aggregate at equals

160
00:07:37,100 --> 00:07:38,900
commands sword and recount.

161
00:07:39,600 --> 00:07:42,300
I'm not really sure that that makes the most sense.

162
00:07:42,300 --> 00:07:45,300
I mean, really, what we want to do is take a look at whether it equals

163
00:07:45,300 --> 00:07:45,900
this thing.

164
00:07:46,500 --> 00:07:50,300
So I feel like the, the sort of the safer thing to do, rather than

165
00:07:50,300 --> 00:07:52,100
trying to be math tricky about it.

166
00:07:52,400 --> 00:07:57,400
Is, I could just, say first aggregate at equals push short entry and

167
00:07:57,400 --> 00:07:59,500
just actually take the

168
00:08:01,700 --> 00:08:03,600
It gets bright bound, right?

169
00:08:03,600 --> 00:08:06,800
The what is that called?

170
00:08:07,300 --> 00:08:12,300
The gets hard entries.

171
00:08:12,500 --> 00:08:17,600
That what I could just say as well, you know, if I was going to do

172
00:08:17,600 --> 00:08:22,200
gets sort of entries plus very segregated that I would want to, you

173
00:08:22,200 --> 00:08:23,500
know, make it be pushed toward entry.

174
00:08:23,800 --> 00:08:26,700
Now, the thing that occurs to me about that is I'm not sure why we're

175
00:08:26,700 --> 00:08:30,900
actually using an index for for that, in the first place, like,

176
00:08:31,100 --> 00:08:33,799
We actually need an index or can we just use a pointer?

177
00:08:33,900 --> 00:08:37,400
Because if you look here, when we do our iteration, it's like we're

178
00:08:37,400 --> 00:08:40,400
doing all this work bending over backwards to keep it an index.

179
00:08:40,600 --> 00:08:43,700
I say we just change it to a Pointer while I'm debugging.

180
00:08:43,700 --> 00:08:46,400
This I might as well change it to something that I want it to be that

181
00:08:46,400 --> 00:08:46,500
way.

182
00:08:46,500 --> 00:08:49,800
I'm not debugging, something that's not what I actually wanted, right?

183
00:08:50,500 --> 00:08:54,700
So let's go ahead and set sort Sprite bound to be first aggregate like

184
00:08:54,700 --> 00:08:55,400
that.

185
00:08:55,800 --> 00:08:59,700
And then what I'll do is say, okay, when we do first aggregate,

186
00:09:01,100 --> 00:09:04,200
We could also get rid of this is aggregating flag to if we wanted to

187
00:09:04,200 --> 00:09:10,400
actually we could just do this first Aggregate and get rid of this

188
00:09:10,400 --> 00:09:11,000
aggregating.

189
00:09:12,200 --> 00:09:15,500
So then what we could say it's just like, okay, let's assert that

190
00:09:15,500 --> 00:09:17,300
there isn't a first aggregate

191
00:09:18,800 --> 00:09:22,900
When we come through here, we'll set the first aggregate to get Sprite

192
00:09:22,900 --> 00:09:27,500
bounds, so I'd get sort entries, never gonna get that right Plus or

193
00:09:27,500 --> 00:09:29,000
Dent recount so whatever.

194
00:09:29,000 --> 00:09:33,000
The first aggregate is is whatever the current one is and then we'll

195
00:09:33,000 --> 00:09:38,800
save that then here will assert that we've got one of those and at the

196
00:09:38,800 --> 00:09:41,000
end we'll just set it to nothing.

197
00:09:43,000 --> 00:09:44,900
That would be don't even is that getting flag anymore.

198
00:09:45,700 --> 00:09:48,300
So then when we come through here, we can say

199
00:09:49,100 --> 00:09:53,000
Instead, let's just snap a pointer to the last one.

200
00:09:55,400 --> 00:09:59,700
So this is like one pass last entry and that can just be whatever.

201
00:09:59,700 --> 00:10:04,800
The current sword entry county is now we know is that's the one we're

202
00:10:04,800 --> 00:10:05,800
going to stop at.

203
00:10:05,800 --> 00:10:08,700
So then we just say, all right, we've got to sort spray pounds, we're

204
00:10:08,700 --> 00:10:14,400
going to start it at whatever the first aggregate was render group.

205
00:10:14,700 --> 00:10:16,000
First aggregate.

206
00:10:17,500 --> 00:10:22,500
We're going to go for each entry until we get to the one that we don't

207
00:10:22,500 --> 00:10:26,100
want to process like the very last one, and then we're going to plus

208
00:10:26,100 --> 00:10:26,600
plus entry.

209
00:10:26,600 --> 00:10:29,500
And you can see that was a - - entry that was wrong already.

210
00:10:29,500 --> 00:10:30,700
So that was a bug as well.

211
00:10:30,700 --> 00:10:33,600
But I just fixed because we're going forwards now not backwards,

212
00:10:33,900 --> 00:10:34,300
right?

213
00:10:35,500 --> 00:10:38,700
So then we come through here and we say, okay, do the operation going

214
00:10:38,700 --> 00:10:40,000
to do and then clear it out.

215
00:10:40,300 --> 00:10:41,900
So that seems a lot more saying to me.

216
00:10:41,900 --> 00:10:46,000
And then up here, all we have to do now is say well okay, if the first

217
00:10:46,000 --> 00:10:46,800
aggregate

218
00:10:47,300 --> 00:10:51,300
That were working with is the the one that we're talking about here,

219
00:10:51,300 --> 00:10:53,300
then we finish it off, right?

220
00:10:53,400 --> 00:10:58,000
So that seems totally sane to me that cleans that up to a, you know, I

221
00:10:58,000 --> 00:11:00,100
think a better place than it was before.

222
00:11:01,100 --> 00:11:03,400
And so I'm hoping that we can make that work cleanly.

223
00:11:03,600 --> 00:11:08,200
Now last thing is that now since we've reversed the order, I think we

224
00:11:08,200 --> 00:11:11,400
can go back to standard order on the other things that we push because

225
00:11:11,400 --> 00:11:16,700
before we had actually done them in like sort of reverse wise if

226
00:11:16,900 --> 00:11:22,800
That makes sense specifically so that we wouldn't have to worry about

227
00:11:22,800 --> 00:11:27,100
the fact that they were reversed before so in add, you know, player or

228
00:11:27,100 --> 00:11:27,700
whatever.

229
00:11:29,000 --> 00:11:33,500
We'd actually reversed this order to keep torso Shadow instead of the

230
00:11:33,500 --> 00:11:34,400
other way around.

231
00:11:34,800 --> 00:11:38,100
And so now we can kind of go back to logical order where we're pushing

232
00:11:38,100 --> 00:11:38,300
the road.

233
00:11:38,300 --> 00:11:40,500
We're going to draw, which I like better, like I'm glad we could do

234
00:11:40,500 --> 00:11:40,900
that.

235
00:11:41,800 --> 00:11:44,000
And now I think we're good to go, right?

236
00:11:44,300 --> 00:11:46,400
So now we just have to fix the head.

237
00:11:47,100 --> 00:11:49,500
I believe the head is still wrong.

238
00:11:49,800 --> 00:11:54,300
Let me check here, familiar, can you block me for a second?

239
00:11:54,300 --> 00:11:55,000
Thank you.

240
00:11:55,700 --> 00:11:56,000
Yeah.

241
00:11:56,000 --> 00:11:58,700
So I feel like that is the head.

242
00:11:58,800 --> 00:11:59,800
head part is

243
00:12:00,000 --> 00:12:01,100
Still kind of wrong there.

244
00:12:03,000 --> 00:12:03,600
Yeah.

245
00:12:03,600 --> 00:12:05,100
And I'm not sure.

246
00:12:10,700 --> 00:12:11,900
Where exactly, that's coming from.

247
00:12:11,900 --> 00:12:13,500
So I want to take a look at that one as well.

248
00:12:15,300 --> 00:12:18,500
Okay, so in handmade render group.

249
00:12:18,500 --> 00:12:21,900
I'm pretty sure Reserve sort key, really has nothing to do with that

250
00:12:23,000 --> 00:12:24,200
stuff we changed.

251
00:12:24,400 --> 00:12:28,000
So, I'm not sure why that would be the case, what I could do actually

252
00:12:28,000 --> 00:12:32,300
as well, and let me just go ahead and change this and I think about

253
00:12:32,300 --> 00:12:32,500
it.

254
00:12:33,400 --> 00:12:38,400
So, inside platform, I'm gonna turn on the the drawing here.

255
00:12:39,000 --> 00:12:43,500
I want to see whether we're getting a cycle at that point, so we are

256
00:12:43,500 --> 00:12:44,900
getting a cycle when that happens.

257
00:12:46,000 --> 00:12:47,500
So I suppose it's possible.

258
00:12:47,500 --> 00:12:50,300
There's just because again we're not really breaking Cycles in an

259
00:12:50,300 --> 00:12:51,200
intelligent way.

260
00:12:52,700 --> 00:12:55,900
Let me double-check that I can't make it happen without a cycle.

261
00:13:10,000 --> 00:13:11,000
It does seem.

262
00:13:11,600 --> 00:13:12,900
It sure does seem

263
00:13:19,500 --> 00:13:22,600
So, it will sometimes work when there's a cycle, but, of course,

264
00:13:22,600 --> 00:13:25,100
that's expected because we don't, we break Cycles randomly at the

265
00:13:25,100 --> 00:13:29,000
moment, but it doesn't seem to break unless there's a cycle so far.

266
00:13:36,500 --> 00:13:40,800
so that may actually just be because of Cycles hard to say,

267
00:13:52,000 --> 00:13:56,200
Yeah, so that may just because of Cycles will have to think about how

268
00:13:56,200 --> 00:14:00,900
we should break Cycles because I'm not really sure what you know, the

269
00:14:00,900 --> 00:14:02,800
way is that we would want to break them.

270
00:14:04,300 --> 00:14:05,800
I haven't really given it much thought.

271
00:14:06,100 --> 00:14:07,200
So I'm not sure.

272
00:14:07,300 --> 00:14:08,300
But yeah.

273
00:14:09,200 --> 00:14:09,600
All right.

274
00:14:09,600 --> 00:14:11,800
So that's our current situation.

275
00:14:11,900 --> 00:14:15,900
Let's go ahead and crank back up the room, count and start to look at

276
00:14:15,900 --> 00:14:21,200
some of the other bugs again, because that just seems like, okay good.

277
00:14:21,400 --> 00:14:21,700
Yeah.

278
00:14:22,300 --> 00:14:23,000
You know I'm saying?

279
00:14:24,200 --> 00:14:26,100
So, add standard room.

280
00:14:26,800 --> 00:14:28,100
Let's take a look.

281
00:14:30,600 --> 00:14:36,400
No, I like how many rooms.

282
00:14:36,400 --> 00:14:36,900
I don't know.

283
00:14:38,200 --> 00:14:39,300
Maybe 4 is fine.

284
00:14:39,300 --> 00:14:39,900
Let's say.

285
00:14:44,400 --> 00:14:46,100
Okay, so

286
00:14:47,100 --> 00:14:51,100
we're not getting a lot of those other bugs at the moment so it looks

287
00:14:51,100 --> 00:14:53,700
like we fixed a bunch of those with the way that we were.

288
00:14:53,700 --> 00:14:58,500
So those blinking tree bugs, were probably mostly based on the fact

289
00:14:58,500 --> 00:14:59,900
that we were

290
00:15:00,000 --> 00:15:03,600
Going backwards in the order, we were probably over writing sort keys

291
00:15:03,600 --> 00:15:05,200
for other entities.

292
00:15:06,000 --> 00:15:08,000
I wouldn't be surprised if that was the case.

293
00:15:08,700 --> 00:15:11,500
So let's take a look here at how that sorting is doing.

294
00:15:12,600 --> 00:15:16,900
It's looking pretty good, I guess I would say.

295
00:15:17,400 --> 00:15:22,600
So that's good and yeah, everything looks actually relatively solid

296
00:15:22,600 --> 00:15:23,300
right now.

297
00:15:30,200 --> 00:15:34,600
So that's starting to look pretty respectable and I think you know,

298
00:15:34,600 --> 00:15:40,000
we've got more stuff to do here, but it looks like the sort is less

299
00:15:40,000 --> 00:15:40,600
than a concern.

300
00:15:40,600 --> 00:15:42,600
Now, the cycle breaking is going to be something.

301
00:15:42,600 --> 00:15:44,000
We're going to have to deal with for sure.

302
00:15:44,500 --> 00:15:46,300
We'll see what happens when we put stuff in that.

303
00:15:46,300 --> 00:15:50,200
Has the correct bounds as well, but that's starting to look pretty

304
00:15:50,200 --> 00:15:51,200
reasonable.

305
00:15:51,700 --> 00:15:55,700
So, I think now we can go back to what we were doing before, which is

306
00:15:55,700 --> 00:15:57,100
getting the layer stuff working.

307
00:15:59,500 --> 00:16:01,100
Because that seems okay.

308
00:16:02,400 --> 00:16:04,300
All right, so yeah.

309
00:16:04,400 --> 00:16:09,000
And now you know, in theory, at least anyway, we're sorting by group

310
00:16:09,000 --> 00:16:14,600
now so we shouldn't have hopefully as much pressure either on the

311
00:16:14,600 --> 00:16:15,400
sort.

312
00:16:15,800 --> 00:16:17,800
And let's take a look at what's going on there.

313
00:16:18,500 --> 00:16:21,400
So if we take a look at build Sprite graph for calling it for four

314
00:16:21,400 --> 00:16:26,500
times but it is taking up a tremendous amount of time there although,

315
00:16:26,500 --> 00:16:28,600
you know, one thing that's a little bit hard about that.

316
00:16:28,600 --> 00:16:32,000
Lets we don't really want to look at it in the

317
00:16:32,200 --> 00:16:33,100
list of

318
00:16:35,900 --> 00:16:36,900
the debug system.

319
00:16:37,400 --> 00:16:42,100
So let's just go ahead and quickly pause and then look back at some of

320
00:16:42,100 --> 00:16:42,300
these.

321
00:16:42,300 --> 00:16:47,100
Okay, so if you look back at what's happening when we're not, when we

322
00:16:47,100 --> 00:16:48,500
don't have a debug system up.

323
00:16:48,500 --> 00:16:52,400
So here's a frame, that doesn't have the debug system up invisible.

324
00:16:53,000 --> 00:16:53,600
You can see that.

325
00:16:53,600 --> 00:16:57,300
It's kind of quite a bit less than once the debug system is visible

326
00:16:57,300 --> 00:17:00,300
its Giant and that's because all of these Sprites are all getting

327
00:17:00,300 --> 00:17:01,200
sorted as well.

328
00:17:02,400 --> 00:17:05,000
And you can still see the closest reversible as one of our worst

329
00:17:05,000 --> 00:17:05,300
offenders.

330
00:17:05,599 --> 00:17:08,500
Well, which is good because that's a completely an accelerated and

331
00:17:08,500 --> 00:17:13,000
squared algorithm which we know how to trivially accelerate.

332
00:17:13,000 --> 00:17:17,400
So that's a good one too, but that's still a lot of times Felton spent

333
00:17:17,400 --> 00:17:21,500
in build spray crap again, periodically, I just kind of like to check

334
00:17:21,500 --> 00:17:24,200
to see what the situation is here.

335
00:17:25,400 --> 00:17:28,500
So I'm just going to check build up at really quickly.

336
00:17:28,500 --> 00:17:31,400
I want to see what happens in release mode and make sure that there's

337
00:17:31,400 --> 00:17:34,100
nothing particularly unusual going on there.

338
00:17:34,100 --> 00:17:35,300
Let's just take a quick look.

339
00:17:36,300 --> 00:17:37,600
At what's happening there.

340
00:17:38,000 --> 00:17:42,500
Here's the profile and you know we can kind of see that in this

341
00:17:42,500 --> 00:17:43,100
situation.

342
00:17:43,100 --> 00:17:47,900
Build Sprite graph is it's still expensive, but not too bad and if I

343
00:17:47,900 --> 00:17:49,300
go back to

344
00:17:51,800 --> 00:17:53,200
Look at some other frames here.

345
00:17:53,600 --> 00:17:55,600
So here's one where the debug system isn't up.

346
00:17:55,700 --> 00:17:57,400
3% of the time isn't bad.

347
00:17:57,800 --> 00:17:59,800
You know, do I love three percent of the time?

348
00:18:01,000 --> 00:18:03,600
But you know, that's really not that bad considering how much work it

349
00:18:03,600 --> 00:18:04,300
has to do.

350
00:18:04,800 --> 00:18:08,200
And, you know, we haven't done a whole lot to optimize it yet other

351
00:18:08,200 --> 00:18:09,400
than just the grid based stuff.

352
00:18:09,400 --> 00:18:12,500
So, I'm okay with that, that's not going to make me to lyrics.

353
00:18:12,500 --> 00:18:14,000
Not going to lose sleep over that guy.

354
00:18:14,600 --> 00:18:17,100
So, I think we're okay, right?

355
00:18:18,200 --> 00:18:21,600
And this is nice and Zippy this is 60 frames a second as well.

356
00:18:22,100 --> 00:18:23,500
Let me unpause this guy.

357
00:18:25,400 --> 00:18:25,900
There we go.

358
00:18:26,800 --> 00:18:28,000
So yeah.

359
00:18:28,000 --> 00:18:29,600
So this is running at 60 frames a second.

360
00:18:29,600 --> 00:18:33,600
So we end we don't really have to worry too much at that point.

361
00:18:33,600 --> 00:18:38,900
Because yeah I mean the actual game itself isn't going to be that much

362
00:18:38,900 --> 00:18:41,400
more complicated in terms of what's happening on the screen than what

363
00:18:41,400 --> 00:18:43,500
we see right here, you know.

364
00:18:43,500 --> 00:18:47,800
So because this isn't a game with like thousands and thousands of

365
00:18:47,800 --> 00:18:52,300
Sprites that supposed to be you know roughly how many there are on the

366
00:18:52,300 --> 00:18:52,800
screen right now.

367
00:18:52,800 --> 00:18:56,600
You know they'll be more effects happening but effects can kind of

368
00:18:57,100 --> 00:18:58,100
Be their own thing.

369
00:18:58,100 --> 00:18:59,600
I think a lot of the time hopefully.

370
00:19:01,400 --> 00:19:02,600
So yeah.

371
00:19:09,100 --> 00:19:11,500
All right, so that all seems good.

372
00:19:18,900 --> 00:19:20,400
I don't really have any problem with that.

373
00:19:22,100 --> 00:19:23,300
I think that's all pretty reasonable.

374
00:19:24,600 --> 00:19:28,600
So now what we kind of have to look at is sort of what I was talking

375
00:19:28,600 --> 00:19:33,600
about before of, we have a problem at the moment as far as Alpha

376
00:19:33,600 --> 00:19:36,700
blending in and let me see if I can get it to a point where it's

377
00:19:36,700 --> 00:19:37,800
actually happening.

378
00:19:43,100 --> 00:19:45,100
a guitar do that, I'll have to go downstairs when I

379
00:19:47,000 --> 00:19:54,600
Okay, so this is an example of the alpha in problem, but I

380
00:19:54,700 --> 00:19:58,400
unfortunately, I can't I don't have trees that are quite on top of

381
00:19:58,400 --> 00:19:59,300
each other enough.

382
00:20:02,500 --> 00:20:05,200
But you could probably kind of see it happening down here a little

383
00:20:05,200 --> 00:20:05,600
bit.

384
00:20:07,400 --> 00:20:12,600
And that is essentially that well, you know, if we were to stack up

385
00:20:12,600 --> 00:20:16,700
some stuff, let me see if I can actually get that happening somewhere.

386
00:20:17,600 --> 00:20:18,200
So,

387
00:20:30,800 --> 00:20:32,500
I'm just not sure how to get anything.

388
00:20:32,500 --> 00:20:33,900
All that more obvious.

389
00:20:35,900 --> 00:20:38,600
I mean one on the one hand maybe it's a waste of our time to even go

390
00:20:38,600 --> 00:20:39,600
down this route.

391
00:20:40,300 --> 00:20:40,900
But

392
00:20:43,400 --> 00:20:45,300
It would be nice to show.

393
00:20:52,500 --> 00:20:52,900
I guess.

394
00:20:52,900 --> 00:20:58,900
One thing I could do is if I made this read that might help.

395
00:20:59,500 --> 00:20:59,800
So I'm

396
00:21:00,100 --> 00:21:01,100
Go ahead and do that.

397
00:21:01,100 --> 00:21:07,800
So let's suppose, we went into the world mode code or actually I guess

398
00:21:07,800 --> 00:21:08,500
that's an entity.

399
00:21:08,500 --> 00:21:15,000
Now, when we draw the Traverse Littles, we do an occupier check, and

400
00:21:15,000 --> 00:21:19,100
if someone's on and occupied Square, we change the color.

401
00:21:19,100 --> 00:21:25,600
So what I'm going to do is I'm going to change that to Pure red and so

402
00:21:25,600 --> 00:21:28,400
here you can sort of see that happening, right?

403
00:21:29,300 --> 00:21:31,700
So now what I'm going to do is I'm going to kind of come up here.

404
00:21:32,100 --> 00:21:37,200
So what I want you to focus on, is this is the area where this

405
00:21:37,300 --> 00:21:39,400
familiars head is floating, right?

406
00:21:39,400 --> 00:21:40,300
You can kind of see it.

407
00:21:41,500 --> 00:21:42,900
Now, there's no red there.

408
00:21:43,000 --> 00:21:45,600
It's like, brown tan or whatever, right?

409
00:21:45,600 --> 00:21:46,800
But doesn't look red.

410
00:21:47,200 --> 00:21:50,600
Now, as soon as I go like this, you'll notice it becomes kind of

411
00:21:50,600 --> 00:21:52,200
almost a reddish shade, right?

412
00:21:52,200 --> 00:21:54,500
You start to see red in there.

413
00:21:55,100 --> 00:21:58,500
It's all kind of a, almost more of a uniform color, right?

414
00:21:58,700 --> 00:22:01,200
And that's because this is getting transparent.

415
00:22:01,800 --> 00:22:05,700
If that makes sense, you can start to see that getting transparent.

416
00:22:06,400 --> 00:22:11,100
Now for a more, let me I can think I can do an even

417
00:22:11,200 --> 00:22:15,700
More obtuse or obvious version of that.

418
00:22:15,700 --> 00:22:17,400
Probably, let me see here.

419
00:22:18,100 --> 00:22:24,700
If I was to say shrink how big these are so suppose, I was to set this

420
00:22:24,700 --> 00:22:26,800
to something thin.

421
00:22:36,400 --> 00:22:40,500
So do you see how this is probably the most?

422
00:22:40,500 --> 00:22:41,700
Yeah, I should have thought of before.

423
00:22:42,100 --> 00:22:48,100
So do you see how you can't see this line coming through the head,

424
00:22:48,300 --> 00:22:48,900
right?

425
00:22:49,600 --> 00:22:53,000
You know, their heads opaque, it completely blocks out what's behind

426
00:22:53,000 --> 00:22:53,300
it.

427
00:22:53,600 --> 00:22:57,400
But when I start to Alpha it out all of a sudden you can see through

428
00:22:57,400 --> 00:23:01,400
the head, but you're never supposed to see through the head.

429
00:23:01,500 --> 00:23:04,900
We're supposed to Alpha out that whole floor as one

430
00:23:05,100 --> 00:23:07,700
Coherent piece, right?

431
00:23:08,400 --> 00:23:11,800
And so, that's a good example, that's probably the best example.

432
00:23:11,800 --> 00:23:16,900
I can give of why we would want to Alpha out everything it and so that

433
00:23:16,900 --> 00:23:18,700
it doesn't look like things are disappearing.

434
00:23:19,000 --> 00:23:23,300
It looks like the whole thing is fading away rather than pieces

435
00:23:23,300 --> 00:23:23,900
disappearing.

436
00:23:23,900 --> 00:23:28,500
On top of other pieces, which are also disappearing independently if

437
00:23:28,500 --> 00:23:29,300
that makes sense.

438
00:23:29,500 --> 00:23:31,400
So hopefully that's a little bit clearer.

439
00:23:32,200 --> 00:23:33,200
What's going on there?

440
00:23:34,100 --> 00:23:34,900
I don't know, I hope

441
00:23:35,000 --> 00:23:39,000
Hopefully, you can gain some sort of appreciation for why, I would

442
00:23:39,000 --> 00:23:40,000
might care about that.

443
00:23:40,000 --> 00:23:43,000
Being sort of a person who's OCD for that sort of thing.

444
00:23:44,100 --> 00:23:48,500
All right, so let's go ahead and take a look at what will require to

445
00:23:48,500 --> 00:23:49,600
make that happen.

446
00:23:50,900 --> 00:23:56,200
Now, we already have the concept of a barrier in here now, right?

447
00:23:56,800 --> 00:23:59,400
And so, we know that when we go to render things, we have the

448
00:24:00,000 --> 00:24:03,000
Have things occur at barriers.

449
00:24:03,700 --> 00:24:10,500
So, if we take a look at what's happening inside our sort code render.

450
00:24:10,500 --> 00:24:16,500
Now, when we come out of here, when we come out of sort entries, this

451
00:24:16,500 --> 00:24:24,600
sorted list of indices what it has in there obviously, are the things

452
00:24:24,600 --> 00:24:29,900
that it has in, their can include information to the render.

453
00:24:30,000 --> 00:24:31,500
I'm about stuff that needs to happen.

454
00:24:38,900 --> 00:24:42,700
So what we want to do there potentially is have there be a way that we

455
00:24:42,700 --> 00:24:44,000
can insert something.

456
00:24:44,000 --> 00:24:49,200
In addition to our barrier that says like, hey we need you to do an

457
00:24:49,200 --> 00:24:52,100
alpha fade on this whole thing that's coming up next.

458
00:24:52,600 --> 00:24:56,900
So you have to kind of do a separate composite to it, that's just kind

459
00:24:56,900 --> 00:24:59,500
of the way it goes right now.

460
00:24:59,500 --> 00:25:00,300
I don't know that.

461
00:25:00,300 --> 00:25:04,900
That's I think that might be pushing the system a little bit too far

462
00:25:05,100 --> 00:25:07,400
at that point and so

463
00:25:07,600 --> 00:25:12,500
I think we're going to probably want to do at this point is when we is

464
00:25:12,500 --> 00:25:19,000
to actually have the notion of a coherent block that, that has

465
00:25:19,000 --> 00:25:23,000
rendered Cape, that knows how to do some kind of certain rendering

466
00:25:23,000 --> 00:25:24,300
operations, right?

467
00:25:25,300 --> 00:25:29,400
So I think what we want to do is have our render command list actually

468
00:25:29,400 --> 00:25:34,500
have some understanding of sort of what's in there and we probably

469
00:25:34,500 --> 00:25:36,600
don't want to do something quite like that.

470
00:25:36,600 --> 00:25:38,500
I mean maybe we do I don't know.

471
00:25:39,500 --> 00:25:42,400
I mean maybe this is a fine architecture for it considering that we

472
00:25:42,400 --> 00:25:48,200
don't really need to push it that far, but it's just, it's I don't

473
00:25:48,200 --> 00:25:48,400
know.

474
00:25:48,500 --> 00:25:51,600
We'll see, maybe it's fine to have those in there.

475
00:25:51,600 --> 00:25:54,600
Maybe it's not, I'm not entirely sure we'll see as we go.

476
00:25:55,600 --> 00:26:00,500
But for the time being, we kind of have to ping-pong back to our open

477
00:26:00,500 --> 00:26:07,200
GL code, and our other render code in order to make this stuff work.

478
00:26:07,200 --> 00:26:10,200
So the first thing I want to do though is I want to see if we're still

479
00:26:10,200 --> 00:26:11,200
rendering, okay?

480
00:26:11,800 --> 00:26:15,100
Through our other system and it looks like we are.

481
00:26:15,100 --> 00:26:19,500
So this is the software renderer, that's so cool.

482
00:26:20,400 --> 00:26:23,900
I love the fact that our software renderer is so accurate.

483
00:26:25,100 --> 00:26:29,100
I want to fix that that half pixel offset as well, so that they're

484
00:26:29,100 --> 00:26:31,300
just exact someday we got to go do that.

485
00:26:32,300 --> 00:26:32,900
So anyway,

486
00:26:34,300 --> 00:26:41,400
Here is the software renderer doing its thing and, and looking awesome

487
00:26:41,700 --> 00:26:42,400
and all that.

488
00:26:42,700 --> 00:26:46,200
So what I think we want to do is go to our software renderer and

489
00:26:46,200 --> 00:26:49,300
implement this first so that everyone understands what it is that

490
00:26:49,300 --> 00:26:50,800
we're actually doing.

491
00:26:51,400 --> 00:26:55,700
And then we can go back and implement it in opengl, which is as always

492
00:26:55,700 --> 00:26:59,800
a huge pain in the butt because open Jill and basically all

493
00:27:00,100 --> 00:27:01,800
Safety is our ridiculous.

494
00:27:02,900 --> 00:27:08,700
So let's go ahead and talk about what needs to happen in order for

495
00:27:08,700 --> 00:27:11,100
that to occur and then we'll get started on it.

496
00:27:18,700 --> 00:27:19,200
Oops.

497
00:27:27,700 --> 00:27:30,600
so what we are going to be talking about here is multiple render

498
00:27:30,600 --> 00:27:31,300
targets

499
00:27:33,800 --> 00:27:41,600
And the phrase render Target basically means, you know, buffer of

500
00:27:41,600 --> 00:27:42,300
memory.

501
00:27:45,100 --> 00:27:48,300
That you draw, too.

502
00:27:52,300 --> 00:27:56,500
So what you have seen throughout the course of handmade hero when we

503
00:27:56,500 --> 00:28:00,800
wrote all the software renderer and all that stuff, you'll note that

504
00:28:00,800 --> 00:28:05,300
we were always rendering to the same piece of memory, right?

505
00:28:05,400 --> 00:28:08,700
We have this notion that there was sort of a back buffer like a screen

506
00:28:08,700 --> 00:28:12,400
buffer that was holding, what we were going to display.

507
00:28:12,600 --> 00:28:14,100
We render everything into it.

508
00:28:14,100 --> 00:28:18,300
So that piece of memory we draw into and then when we were done, we

509
00:28:18,300 --> 00:28:21,300
basically handed that buffer to Windows and said here show this

510
00:28:21,800 --> 00:28:25,300
And then when we did the opengl version of the code, we did

511
00:28:25,300 --> 00:28:26,600
essentially the same thing.

512
00:28:26,700 --> 00:28:30,000
We just said, here's all the stuff we wanted to draw into that buffer

513
00:28:30,200 --> 00:28:33,800
and then when we're done, we said swap, you know, like show it to the

514
00:28:34,000 --> 00:28:34,700
to the user.

515
00:28:35,800 --> 00:28:38,000
So that's how we've been thinking about things, right?

516
00:28:38,000 --> 00:28:42,600
We've been thinking about things in a sense of curious like the screen

517
00:28:43,500 --> 00:28:47,000
and we would thinking about like all of this stuff kind of like being

518
00:28:47,000 --> 00:28:50,100
drawn onto it, right and then we display it.

519
00:28:50,500 --> 00:28:51,400
So it's really like a

520
00:28:51,500 --> 00:28:54,200
A back we were sort of thinking of is like the back screen and then we

521
00:28:54,200 --> 00:28:55,800
were bringing it forwards, right?

522
00:28:57,300 --> 00:29:02,000
Well, what we have now is the need to expand that notion.

523
00:29:02,500 --> 00:29:04,200
So, what we want to do now, right?

524
00:29:04,200 --> 00:29:06,000
Is we have the actual screen.

525
00:29:07,800 --> 00:29:12,000
and previously we had, you know, one buffer,

526
00:29:16,100 --> 00:29:19,300
We call that the back buffer but let's call it for.

527
00:29:19,500 --> 00:29:23,500
Now that we're sort of spending out let's call this buffer a right and

528
00:29:23,500 --> 00:29:26,000
previous what was happening as we did all of our drawing into prefer a

529
00:29:26,100 --> 00:29:30,100
and then we had some way of getting buffer, a to the screen, right?

530
00:29:30,100 --> 00:29:33,800
That was either via a call to Windows that says, here, take this

531
00:29:33,800 --> 00:29:36,500
buffer and show it on screen or a call to opengl.

532
00:29:36,500 --> 00:29:39,000
That said, we're done rendering now show the buffer that we've been

533
00:29:39,000 --> 00:29:39,600
working on.

534
00:29:40,100 --> 00:29:40,600
Okay.

535
00:29:41,400 --> 00:29:45,300
And so previously, that's all are sort of composite phase.

536
00:29:45,300 --> 00:29:45,700
Look like

537
00:29:46,300 --> 00:29:50,600
But what we want to do now is we essentially want to take two buffers,

538
00:29:50,900 --> 00:29:51,300
right?

539
00:29:51,300 --> 00:29:56,100
Or more so we want like a buffer a and a buffer B and we want to

540
00:29:56,100 --> 00:29:59,900
combine buffer a and buffer B and draw them to the

541
00:30:01,100 --> 00:30:01,600
Right.

542
00:30:07,600 --> 00:30:08,700
so, what we want to do,

543
00:30:10,200 --> 00:30:12,300
Is we want to draw a bunch of stuff into my for p.

544
00:30:12,500 --> 00:30:15,100
We want to draw a bunch of stuff into my for a and then we want to

545
00:30:15,100 --> 00:30:19,100
combine them using our standard Alpha operation, write a standard

546
00:30:19,100 --> 00:30:23,400
Alpha blending operation, like what we've been using that sort of

547
00:30:23,400 --> 00:30:24,000
Composites.

548
00:30:24,000 --> 00:30:27,400
Those two things together to produce our final screen.

549
00:30:27,700 --> 00:30:31,000
And again, the reason we want to do that is so that we can apply a

550
00:30:31,000 --> 00:30:35,800
uniform alpha Fade to this buffer, or well, we can choose whichever

551
00:30:35,800 --> 00:30:36,100
buffer.

552
00:30:36,100 --> 00:30:39,100
We want to be the one that we're fading in and out.

553
00:30:39,800 --> 00:30:44,200
Out having separate pieces become in like see-through.

554
00:30:46,400 --> 00:30:47,300
Hopefully, that makes sense.

555
00:30:48,800 --> 00:30:49,900
So that's what we need to do.

556
00:30:50,700 --> 00:30:55,300
And so if you take a look at the way that our old renderer, our

557
00:30:55,300 --> 00:31:02,000
software under worked, you know, we can sort of pull that back and you

558
00:31:02,000 --> 00:31:04,900
can see that the way that that was happening.

559
00:31:04,900 --> 00:31:11,600
If we go to software under commands is we pass it in this output

560
00:31:11,600 --> 00:31:13,700
Target, and the output targets.

561
00:31:13,700 --> 00:31:17,600
The thing that was sort of doing double duty, right?

562
00:31:17,700 --> 00:31:18,200
Like I said,

563
00:31:18,300 --> 00:31:21,100
it's basically, it was basically buffer a

564
00:31:23,200 --> 00:31:26,400
And the sort of back buffer it was basically just we didn't really

565
00:31:26,400 --> 00:31:28,000
distinguish us to what it was.

566
00:31:28,500 --> 00:31:31,200
So it's just a place that we drew our stuff too.

567
00:31:31,500 --> 00:31:33,300
And then it was going to get displayed.

568
00:31:33,500 --> 00:31:38,800
But what we want to do now is essentially have more than one of these

569
00:31:38,800 --> 00:31:42,400
output targets that we choose between at the end, we'll composite

570
00:31:42,400 --> 00:31:43,900
between them, right?

571
00:31:43,900 --> 00:31:45,500
That's what we actually want to do.

572
00:31:47,000 --> 00:31:57,100
Now we have a situation here where I thought when we passed I'm gonna

573
00:31:57,300 --> 00:31:58,700
verify this.

574
00:31:59,600 --> 00:32:03,100
I thought when we pass these in,

575
00:32:09,600 --> 00:32:14,200
Yeah, so I we pass in a temporary ne4 to prep for render.

576
00:32:15,100 --> 00:32:17,800
I'm going to I'm going to keep that that love going.

577
00:32:18,400 --> 00:32:21,100
So I'm going to say that software renderer commands gets a temporary

578
00:32:21,100 --> 00:32:24,600
NE the arena for doing allocations right.

579
00:32:27,100 --> 00:32:28,300
So, where's that prep?

580
00:32:29,500 --> 00:32:30,600
Tempt Arena.

581
00:32:30,800 --> 00:32:34,800
It is so that way we can have some scratch memory, right?

582
00:32:35,500 --> 00:32:38,800
So I'm going to start really, really basic just so everyone can follow

583
00:32:38,800 --> 00:32:39,900
along with what I'm doing.

584
00:32:40,400 --> 00:32:44,200
All I'm going to do is I'm going to introduce a totally extraneous

585
00:32:44,200 --> 00:32:47,500
completely, unnecessary piece of work that we're going to do just to

586
00:32:47,500 --> 00:32:48,400
show you what I mean.

587
00:32:49,000 --> 00:32:52,300
So right now we have a loaded bitmap, it's called output Target.

588
00:32:52,300 --> 00:32:55,200
We know that whatever we draw into output Target is what we were then

589
00:32:55,200 --> 00:32:56,500
going to hand to Windows.

590
00:32:56,800 --> 00:32:59,500
in the software interface and say, here, display this in your

591
00:32:59,500 --> 00:32:59,800
windowsill

592
00:33:00,000 --> 00:33:02,000
Um, we don't know, we didn't write windows, we don't know how you're

593
00:33:02,000 --> 00:33:02,600
going to do that.

594
00:33:02,600 --> 00:33:06,000
We just know we produced a beautiful looking game image for you,

595
00:33:06,200 --> 00:33:07,700
please display it, right?

596
00:33:07,900 --> 00:33:11,500
So that's what output Target is and if you remember what that actually

597
00:33:11,500 --> 00:33:15,400
looks like, I can't remember where we Define loaded bitmap.

598
00:33:15,400 --> 00:33:24,200
I think it may be in the renter group code loaded bitmap or maybe in

599
00:33:24,200 --> 00:33:25,000
the asset code.

600
00:33:25,000 --> 00:33:25,500
I never remember.

601
00:33:25,500 --> 00:33:26,000
There it is.

602
00:33:27,000 --> 00:33:31,700
So we have this loaded bitmap and we've got that sort of memory

603
00:33:31,700 --> 00:33:33,600
pointer and all that nonsense, right?

604
00:33:35,100 --> 00:33:39,400
And so if we wanted to, what we could do is create a separate look,

605
00:33:39,400 --> 00:33:42,100
one of these loaded bitmaps that we draw two instead.

606
00:33:42,100 --> 00:33:46,000
Because remember output Target is just something that we pass through

607
00:33:46,000 --> 00:33:46,300
here.

608
00:33:46,300 --> 00:33:49,100
You can see all of this stuff where we do software renderer commands,

609
00:33:49,100 --> 00:33:54,600
you can see us doing this sort of work with the output Target, right?

610
00:33:54,900 --> 00:33:58,700
And then, when we have all that stuff, it actually kicks off the, the

611
00:33:58,700 --> 00:34:01,400
work and all that, you know, blah, blah, blah, blah blah, right?

612
00:34:02,100 --> 00:34:04,800
So software renderer commands when it gets caught,

613
00:34:04,900 --> 00:34:06,900
Old, that's what it's going to do.

614
00:34:07,400 --> 00:34:11,699
And so if I wanted to, I could say call this final output Target.

615
00:34:11,800 --> 00:34:16,100
I could, if I wanted to create another exact copy of it, right?

616
00:34:16,100 --> 00:34:21,000
I could basically say let's say we have another output Target which is

617
00:34:21,000 --> 00:34:24,199
going to be like a push struct on The Temper Inna.

618
00:34:26,500 --> 00:34:27,699
So let's create another one.

619
00:34:28,100 --> 00:34:33,800
I'm going to copy all of the values of the final output Target, right?

620
00:34:33,900 --> 00:34:37,000
So basically all this stuff, the with over height, the width, the

621
00:34:37,000 --> 00:34:39,699
height, the pitch that all, that junk.

622
00:34:40,199 --> 00:34:44,500
We're going to copy exactly, but since there's two different, you

623
00:34:44,500 --> 00:34:46,600
know, we don't want to draw to the same memory.

624
00:34:46,600 --> 00:34:50,000
Although you know what, I could obviously, if if I leave the memory

625
00:34:50,000 --> 00:34:50,699
part of the same.

626
00:34:50,900 --> 00:34:54,100
Now, if I just, I'm using that one nothing would change, right?

627
00:34:54,100 --> 00:34:55,600
I'm just going to do the same exact drawing that.

628
00:34:55,600 --> 00:34:56,199
I was, of course.

629
00:34:56,400 --> 00:34:59,500
I want to set it to actually call that renderer, so I have to switch

630
00:34:59,500 --> 00:35:00,200
it every time.

631
00:35:00,700 --> 00:35:05,100
So let's go ahead and say win32 rendering type equals win32.

632
00:35:07,400 --> 00:35:12,700
Display opengl but render and software so that now will be rendering

633
00:35:12,700 --> 00:35:16,100
to the software renderer at startup by default and there we go.

634
00:35:16,700 --> 00:35:19,200
So you know, it's just doing the exact same rendering, it's using the

635
00:35:19,200 --> 00:35:21,300
exact same memory pointer, right?

636
00:35:21,700 --> 00:35:23,200
But now I'm going to change it to say.

637
00:35:23,200 --> 00:35:29,500
Okay now, I want the output targets memory, I would like to have a

638
00:35:29,500 --> 00:35:30,500
memory block.

639
00:35:31,000 --> 00:35:37,100
That's the same size right as the other memory block as the

640
00:35:37,300 --> 00:35:41,200
On that was getting passed into me for the final output Target, right?

641
00:35:42,100 --> 00:35:46,500
So instead I'm going to now go to load a bitmap whereas little bit

642
00:35:46,500 --> 00:35:46,900
mad.

643
00:35:48,300 --> 00:35:49,900
Look at it, right?

644
00:35:50,500 --> 00:35:54,200
So now I want to say well okay I'm going to set the pitch to whatever

645
00:35:54,200 --> 00:35:55,400
I want the pitch to be.

646
00:35:55,900 --> 00:35:59,600
So I'm going to set the pitch to be the width times for because I want

647
00:35:59,600 --> 00:35:59,800
it back.

648
00:36:00,600 --> 00:36:05,000
So I'm just going to say like okay the the output Target.

649
00:36:05,000 --> 00:36:06,400
Oh well, actually you know what?

650
00:36:06,400 --> 00:36:09,700
I'll leave the pitch as it is I'm going to assert temporarily that the

651
00:36:09,700 --> 00:36:10,800
pitch is positive.

652
00:36:11,000 --> 00:36:11,700
Is that true?

653
00:36:15,900 --> 00:36:19,300
Yeah, some assert that the pitch is positive and then it's going to

654
00:36:19,300 --> 00:36:22,600
say okay the memory block that we're going to render to.

655
00:36:22,600 --> 00:36:27,100
Now I'm going to push a basically a block of memory on here.

656
00:36:27,200 --> 00:36:29,200
That happens to be exactly as big as I want.

657
00:36:29,200 --> 00:36:30,900
It wanted it to be right?

658
00:36:30,900 --> 00:36:34,900
I want the pitch times, the height.

659
00:36:35,000 --> 00:36:39,300
So block of memory that's basically as big as the old one was and I

660
00:36:39,300 --> 00:36:42,800
want you to give me that spare block of memory and that's what we're

661
00:36:42,800 --> 00:36:43,800
going to draw two now.

662
00:36:45,900 --> 00:36:48,800
Now, we know that this stuff has to be aligned.

663
00:36:49,300 --> 00:36:51,900
So I'm going to go ahead and ask for alignment here as well.

664
00:36:52,100 --> 00:36:55,300
I'm going to look just to make sure because I'm pretty sure that we

665
00:36:55,600 --> 00:36:58,800
asked for the alignment in the existing one as well.

666
00:36:59,200 --> 00:37:00,300
Yeah, you can see here.

667
00:37:01,100 --> 00:37:02,900
This is how we do this stuff.

668
00:37:03,200 --> 00:37:04,800
Oh we virtual Alec that.

669
00:37:05,100 --> 00:37:05,400
Wow.

670
00:37:05,400 --> 00:37:06,200
Aren't we fancy?

671
00:37:06,900 --> 00:37:07,600
My goodness?

672
00:37:08,400 --> 00:37:08,800
Well.

673
00:37:08,800 --> 00:37:13,400
Okay, that's, that's not how we're going to do it here but but

674
00:37:13,400 --> 00:37:14,000
whatever.

675
00:37:14,800 --> 00:37:15,100
So

676
00:37:15,400 --> 00:37:21,400
Go back to and may not h.

677
00:37:24,300 --> 00:37:24,600
Memory.

678
00:37:24,600 --> 00:37:25,200
That is it.

679
00:37:25,200 --> 00:37:25,600
There we go.

680
00:37:26,800 --> 00:37:29,700
I just want to look at how I did alignment there.

681
00:37:30,100 --> 00:37:32,500
And it looks like a line.

682
00:37:32,500 --> 00:37:32,700
No.

683
00:37:32,700 --> 00:37:35,000
Clear is what I probably want to do.

684
00:37:35,300 --> 00:37:36,100
So I'm going to say a line.

685
00:37:36,100 --> 00:37:39,400
No clear and I want you to align the 16 B boundaries so it's SSE

686
00:37:39,400 --> 00:37:40,700
aligned, right?

687
00:37:41,700 --> 00:37:45,300
So now I believe I can just run it and what we're doing now is we're

688
00:37:45,300 --> 00:37:46,900
rendering into that block of memory.

689
00:37:46,900 --> 00:37:49,200
Now you'll note you don't see anything on the screen and the reason

690
00:37:49,200 --> 00:37:51,600
you don't see anything on the screen is because we didn't touch the

691
00:37:51,600 --> 00:37:53,300
actual buffer that we're just

692
00:37:54,000 --> 00:37:56,600
But we didn't crash because we gave it a completely new buffer that

693
00:37:56,600 --> 00:37:58,200
can handle it and so it's fine.

694
00:37:58,900 --> 00:38:02,400
So now what I want to do is when we get to the end I want to copy

695
00:38:02,400 --> 00:38:03,000
these two.

696
00:38:03,100 --> 00:38:06,700
So after we do complete all work, I want to do a thing where we

697
00:38:06,700 --> 00:38:10,600
basically say like, okay let's Loop through all of the pixels and

698
00:38:10,600 --> 00:38:12,800
actually copy them one by one.

699
00:38:12,900 --> 00:38:16,700
Now I suppose I could just copy the whole memory you know I could just

700
00:38:16,700 --> 00:38:17,300
do this.

701
00:38:18,900 --> 00:38:22,300
So maybe that's the easiest thing to do first and that's again, pretty

702
00:38:22,300 --> 00:38:26,000
trivial all I'd be doing they're saying well I would like to copy the

703
00:38:26,000 --> 00:38:30,400
output targets pitch times, the output targets height.

704
00:38:31,600 --> 00:38:32,600
Worth of memory.

705
00:38:38,600 --> 00:38:42,300
I'd like to copy it from the output targets memory into the final

706
00:38:42,300 --> 00:38:43,400
output targets memory.

707
00:38:48,200 --> 00:38:48,700
Right.

708
00:38:48,700 --> 00:38:50,100
And there we go.

709
00:38:50,100 --> 00:38:55,000
So now we have meet our render or slower, certainly, because it's

710
00:38:55,000 --> 00:38:57,800
doing a big old copy of the entire screen for no reason.

711
00:38:57,800 --> 00:38:59,900
But we're seeing what's happening.

712
00:39:00,000 --> 00:39:00,800
Opening right?

713
00:39:00,800 --> 00:39:02,800
We're seeing what happens to that back, buffer.

714
00:39:03,600 --> 00:39:07,400
So now we've created a situation where we are doing this.

715
00:39:07,600 --> 00:39:14,100
We are basically saying okay renderer you know render into output

716
00:39:14,100 --> 00:39:14,700
Target.

717
00:39:18,300 --> 00:39:20,000
We are then issuing a copy.

718
00:39:21,400 --> 00:39:22,800
Two final output Target.

719
00:39:27,200 --> 00:39:27,900
Right.

720
00:39:28,300 --> 00:39:30,600
And then we're taking that buffer and we're giving that buffer to

721
00:39:30,600 --> 00:39:33,900
Windows, and that's what we're seeing on the screen to the software,

722
00:39:33,900 --> 00:39:35,200
vendor side of things, right?

723
00:39:36,600 --> 00:39:37,000
Okay.

724
00:39:37,400 --> 00:39:41,400
So hopefully now you can see it's a pretty short step to do two

725
00:39:41,400 --> 00:39:43,500
different renders, right?

726
00:39:43,500 --> 00:39:47,500
If I want to, I just now need to know.

727
00:39:47,800 --> 00:39:50,900
What are the two things that I'm going to render, right?

728
00:39:50,900 --> 00:39:52,000
I just need.

729
00:39:55,800 --> 00:39:56,700
The ability.

730
00:39:58,200 --> 00:40:01,100
To shunt things into different render targets.

731
00:40:01,400 --> 00:40:05,900
Now, since we already have the concept of clip, Rex, it seems to me

732
00:40:06,400 --> 00:40:11,300
like it would be pretty straightforward to do the same thing for

733
00:40:11,300 --> 00:40:12,900
render targets, right?

734
00:40:13,000 --> 00:40:16,100
So when you specify cliprect, you can also specify

735
00:40:18,200 --> 00:40:22,000
What render Target you were looking at right now.

736
00:40:22,000 --> 00:40:23,900
This is not the kind of clip, rect I'm actually talking about here,

737
00:40:23,900 --> 00:40:24,500
this is the clip.

738
00:40:24,500 --> 00:40:26,200
Rect obviously, for the tile.

739
00:40:27,600 --> 00:40:30,500
I'm talking about the other clip, rex that are specified in the actual

740
00:40:30,500 --> 00:40:31,000
stream.

741
00:40:32,500 --> 00:40:33,000
So,

742
00:40:36,000 --> 00:40:40,100
All we really need to add to the render system, other than some kind

743
00:40:40,100 --> 00:40:42,900
of an index and except break that says, which render Target to render

744
00:40:42,900 --> 00:40:48,400
to is, we need some way of saying how the final composite Stage Works,

745
00:40:48,700 --> 00:40:49,400
right?

746
00:40:49,400 --> 00:40:55,200
That's what we need something along those lines and in order to do

747
00:40:55,200 --> 00:40:57,300
that, there's a couple different things we could do.

748
00:40:57,500 --> 00:41:01,600
One of them is to just actually include those things in the Stream and

749
00:41:01,600 --> 00:41:05,600
that does seem like kind of a compelling way to do it in my mind.

750
00:41:06,300 --> 00:41:11,400
So I think that might be the way I would like to do it and

751
00:41:11,400 --> 00:41:17,300
furthermore, because we have this concept of sort of being able to

752
00:41:17,300 --> 00:41:18,500
render to.

753
00:41:18,500 --> 00:41:24,400
We could probably do something where we could select these as sources

754
00:41:24,400 --> 00:41:25,500
as well.

755
00:41:25,500 --> 00:41:30,500
I think it seems likely, right?

756
00:41:31,000 --> 00:41:33,700
So let's, let's take a look at what it would take.

757
00:41:33,700 --> 00:41:35,300
We'll take this one step at a time.

758
00:41:35,500 --> 00:41:35,600
I

759
00:41:35,900 --> 00:41:39,000
Have very much time left, unfortunately, but got about 15 minutes will

760
00:41:39,000 --> 00:41:40,000
make the most of it.

761
00:41:41,200 --> 00:41:45,500
So let's start by going into the render group code.

762
00:41:45,700 --> 00:41:50,100
And inside the render group code, I want to sort of do exactly what I

763
00:41:50,100 --> 00:41:54,000
was doing with the cliprect index stuff before, instead of just

764
00:41:54,000 --> 00:41:58,800
specifying a rectangle to, I, I want to specify a render Target as

765
00:41:58,800 --> 00:41:59,200
well.

766
00:41:59,600 --> 00:41:59,800
So,

767
00:42:00,000 --> 00:42:03,600
Here, I'm going to have like a Target index, something like that,

768
00:42:03,800 --> 00:42:04,400
right?

769
00:42:04,900 --> 00:42:11,700
And that Target index would allow me to say that I have more than one

770
00:42:11,700 --> 00:42:13,600
render Target or who knows what.

771
00:42:13,800 --> 00:42:14,500
Right.

772
00:42:15,000 --> 00:42:18,800
And I again, I'm gonna, you know, I'm not going to implement a really

773
00:42:19,200 --> 00:42:21,500
particularly robust system for this.

774
00:42:22,100 --> 00:42:25,700
I'm just going to do a very basic one, but this would basically say,

775
00:42:25,700 --> 00:42:29,800
okay for every clip rect I'm going to have a Target that Target is

776
00:42:30,000 --> 00:42:33,600
Going to tell me where I'm going to render to, and I can now have more

777
00:42:33,600 --> 00:42:36,800
than one render Target in play.

778
00:42:37,600 --> 00:42:40,400
So, what I want to do there is I want to say,

779
00:42:44,700 --> 00:42:47,700
Probably in the object transform, I'm guessing.

780
00:42:48,400 --> 00:42:49,100
But let's see.

781
00:42:49,100 --> 00:42:51,100
Cliprect index currents on purpose.

782
00:42:51,600 --> 00:42:55,100
So, in here, I could just say current render Target index.

783
00:42:55,100 --> 00:42:55,800
I suppose.

784
00:42:55,900 --> 00:42:58,100
Well, actually, when we push the clip, rect that's when we would do

785
00:42:58,100 --> 00:43:00,100
it, push cliprect, right?

786
00:43:02,200 --> 00:43:05,700
So here in the cliprect, when we specify one of these clip Rex,

787
00:43:06,300 --> 00:43:10,000
presumably what we would do is say, you know, whatever the render

788
00:43:10,000 --> 00:43:13,000
Target is that you say that you're going to render to that's that

789
00:43:13,000 --> 00:43:13,800
would get set here.

790
00:43:14,000 --> 00:43:16,400
So, in addition to that stuff, you would say, you know, render Target

791
00:43:16,400 --> 00:43:22,100
index, something like that, and the render Target index would just be,

792
00:43:22,100 --> 00:43:26,300
like, okay, here when we set the wreck stuff,

793
00:43:30,200 --> 00:43:31,100
Packets recorded.

794
00:43:32,100 --> 00:43:32,500
Right.

795
00:43:35,500 --> 00:43:36,700
What did I do?

796
00:43:37,200 --> 00:43:38,700
What did I do?

797
00:43:41,000 --> 00:43:42,400
Just called it Target index.

798
00:43:44,900 --> 00:43:45,400
There we go.

799
00:43:45,400 --> 00:43:45,800
Oops.

800
00:43:47,900 --> 00:43:50,700
and so, now when we're actually putting clip Rex in here,

801
00:43:56,200 --> 00:43:57,900
I should.

802
00:44:02,500 --> 00:44:06,200
I should be able to specify multiple render targets, they just won't

803
00:44:06,200 --> 00:44:09,200
do anything but I can specify them, right.

804
00:44:12,200 --> 00:44:12,700
Like so.

805
00:44:20,800 --> 00:44:22,400
And so invite a fault.

806
00:44:22,400 --> 00:44:26,000
Obviously we do is render to render Target zero and when I do push

807
00:44:26,000 --> 00:44:29,300
clip, Rex you know we've got a couple of different times that that

808
00:44:29,300 --> 00:44:33,300
happens here mostly in the debug system at the moment, right?

809
00:44:33,600 --> 00:44:36,500
And those I think we don't really care too much about.

810
00:44:38,100 --> 00:44:43,100
But what I'll do here is say, you know, render Target or

811
00:44:44,900 --> 00:44:45,400
That.

812
00:44:45,900 --> 00:44:50,000
So, you know, we can set it to whatever we want it to be later if we

813
00:44:50,000 --> 00:44:54,100
want to have a separate render Target for the debug system, right?

814
00:44:55,200 --> 00:44:59,800
And so in that case, I just need to store that here in the

815
00:45:00,000 --> 00:45:00,700
Like state.

816
00:45:01,100 --> 00:45:06,100
So I would have something in here where we're like render Target and

817
00:45:06,100 --> 00:45:09,200
that would just get cleared, 20, presumably when everything else gets

818
00:45:09,200 --> 00:45:12,900
there to 0 and then we should be done, right?

819
00:45:12,900 --> 00:45:13,700
That's all that.

820
00:45:13,700 --> 00:45:15,700
That would have to happen to have that be specified.

821
00:45:15,700 --> 00:45:20,700
So no big mystery there, nothing particularly exciting.

822
00:45:21,300 --> 00:45:25,600
Now, what we do need to do however is in the render group when we

823
00:45:25,600 --> 00:45:28,100
actually do set that information.

824
00:45:28,100 --> 00:45:29,900
So when we do a push clip,

825
00:45:30,000 --> 00:45:30,300
Right here.

826
00:45:30,300 --> 00:45:31,900
And we actually set that information.

827
00:45:32,100 --> 00:45:36,200
What we need to do is make sure that the, you know, if the group

828
00:45:36,800 --> 00:45:41,100
commands render Target count, which is something we'll have to track

829
00:45:41,500 --> 00:45:43,800
is not sufficient.

830
00:45:44,500 --> 00:45:49,800
So if it's less than or equal to the render Target index, or I guess,

831
00:45:49,800 --> 00:45:52,200
we'll call it Max render Target index.

832
00:45:54,300 --> 00:45:58,300
If those are insufficient, then we will set it.

833
00:45:58,300 --> 00:46:02,200
So this way, we'll track, whatever the maximum render Target index is

834
00:46:02,200 --> 00:46:07,700
that you used, we will, we will remember it, right?

835
00:46:10,500 --> 00:46:14,500
Okay, so let's see, cliprect count.

836
00:46:15,000 --> 00:46:20,700
So, in here, with all the rest of this stuff which gets initialized we

837
00:46:20,700 --> 00:46:27,700
can just say Max render Target index, like so, and that should now

838
00:46:27,700 --> 00:46:30,700
always be set to whatever that value, whatever.

839
00:46:30,700 --> 00:46:33,300
The highest one is that we actually used.

840
00:46:34,300 --> 00:46:39,200
So, now what we can do is go back to our renderer,

841
00:46:40,500 --> 00:46:41,000
Right.

842
00:46:41,800 --> 00:46:47,000
And make essentially, a table for the renderer of the render targets

843
00:46:47,300 --> 00:46:48,600
that we needed.

844
00:46:49,000 --> 00:46:51,800
So, here we are in there.

845
00:46:51,800 --> 00:46:55,400
When we do suffer render commands, what I'm going to do now is I'm

846
00:46:55,400 --> 00:47:00,900
effectively going to clone out as many render buffer is, as I think we

847
00:47:00,900 --> 00:47:02,500
need based on that number

848
00:47:03,500 --> 00:47:08,000
okay, so what I'm going to say is render targets

849
00:47:09,700 --> 00:47:10,200
Right.

850
00:47:14,300 --> 00:47:14,800
EXO.

851
00:47:16,100 --> 00:47:17,500
I'm going to do a push a ray.

852
00:47:18,700 --> 00:47:21,900
And I'm going to say, I want a loaded bitmap render Target.

853
00:47:23,800 --> 00:47:24,600
Four.

854
00:47:31,000 --> 00:47:32,100
You know, it's kind of amusing.

855
00:47:34,000 --> 00:47:38,400
We use the same thing for a little bit Maps as it for drawing, but I

856
00:47:38,400 --> 00:47:41,700
don't really remember why we ever did that.

857
00:47:41,800 --> 00:47:44,600
Did we ever draw to something and then use it as a texture?

858
00:47:47,500 --> 00:47:48,400
We did.

859
00:47:48,500 --> 00:47:53,800
I know what we were using that for, yeah, we use that for ground

860
00:47:53,800 --> 00:47:54,800
chunks as like a new.

861
00:47:54,800 --> 00:47:56,600
We must have done it for something.

862
00:47:56,600 --> 00:47:57,600
That's what we did it for.

863
00:47:58,300 --> 00:47:58,600
All right.

864
00:47:58,600 --> 00:47:59,800
So anyway, I'm going to push in a

865
00:48:00,000 --> 00:48:04,800
These guys and I'm going to push an array of Max render Target index

866
00:48:05,100 --> 00:48:06,800
plus 1, right?

867
00:48:07,900 --> 00:48:08,800
So that way.

868
00:48:09,200 --> 00:48:11,500
And in fact I just do render Target count here.

869
00:48:11,700 --> 00:48:13,500
I'll just sort of compute that

870
00:48:14,900 --> 00:48:17,100
Up above so we can see what it is but there you go.

871
00:48:17,900 --> 00:48:21,100
So I'm going to create an array of those and I'm going to set the

872
00:48:21,100 --> 00:48:24,100
first one equal to the final output Target.

873
00:48:24,100 --> 00:48:24,300
Right.

874
00:48:24,300 --> 00:48:29,000
So render Target zero Zoe's just the screen and then I'm going to do a

875
00:48:29,000 --> 00:48:31,800
loop over all the other ones if there are any.

876
00:48:32,100 --> 00:48:32,700
Right.

877
00:48:33,100 --> 00:48:38,300
So you know I'm going to go from one to the render Target count.

878
00:48:42,200 --> 00:48:43,600
Men go through each of the targets.

879
00:48:44,300 --> 00:48:48,300
And then I'm going to, I'm going to still do this part here.

880
00:48:49,900 --> 00:48:56,600
I'm going to get a chunk of memory for each of them.

881
00:48:57,700 --> 00:49:02,200
So for each case, and when I go ahead and say Target equals render

882
00:49:02,200 --> 00:49:08,100
targets plus Target index, I'm going to just romp over everything with

883
00:49:08,100 --> 00:49:10,200
whatever the final output targets settings are.

884
00:49:10,400 --> 00:49:13,800
And I'm just going to give it new memory everything else will remain

885
00:49:14,100 --> 00:49:15,300
exactly the same.

886
00:49:20,400 --> 00:49:21,000
Like so.

887
00:49:22,300 --> 00:49:26,100
And then in here, so for the tiling, five minute warning for the

888
00:49:26,100 --> 00:49:29,300
tiling, I'm going to do the same thing, right?

889
00:49:29,400 --> 00:49:32,600
I'm just going to use the final output Target for it instead.

890
00:49:33,000 --> 00:49:37,400
And then all I really need to do for these output Target things here

891
00:49:37,400 --> 00:49:42,100
is instead in that of that work, that sort of work array.

892
00:49:42,100 --> 00:49:44,800
I don't know where that's actually defined, to be honest with you,

893
00:49:44,900 --> 00:49:46,700
what is that called tile render work.

894
00:49:48,800 --> 00:49:50,200
Where's tile render work?

895
00:49:52,100 --> 00:49:54,700
There it is for towel render work.

896
00:49:54,700 --> 00:49:58,700
Instead of output Target, I'm going to call this render targets like

897
00:49:58,700 --> 00:50:05,100
so and I am going to set that to our render targets array.

898
00:50:05,400 --> 00:50:09,300
So now there's like, you know, n render targets and you can render to

899
00:50:09,300 --> 00:50:10,800
any of them that you want.

900
00:50:10,800 --> 00:50:17,200
And so then what we will find is out here where we do this, let's see.

901
00:50:17,200 --> 00:50:18,300
What is this doing?

902
00:50:18,300 --> 00:50:20,100
Render commands to bitmap?

903
00:50:20,500 --> 00:50:21,700
Yeah, so when we do run,

904
00:50:21,900 --> 00:50:25,400
Commands to bitmap instead of this output Target thing.

905
00:50:25,400 --> 00:50:30,100
Now, we actually need sort of a render targets array there.

906
00:50:32,100 --> 00:50:38,700
And that's a nice old array and we pass it.

907
00:50:41,900 --> 00:50:44,000
And let's see who else needs that because there's some other people

908
00:50:44,000 --> 00:50:47,300
who apparently need that, let's find out who that is.

909
00:50:47,300 --> 00:50:53,000
So render CrossFit map draw, rect angle that.

910
00:50:53,000 --> 00:50:54,100
So that's the clear.

911
00:50:55,000 --> 00:50:59,800
Let's see here, output Target those are all Apatow.

912
00:51:00,000 --> 00:51:01,000
It's here we go.

913
00:51:01,300 --> 00:51:02,600
Final output Target.

914
00:51:03,800 --> 00:51:05,700
This is all final output Target.

915
00:51:08,700 --> 00:51:09,100
Oops.

916
00:51:19,500 --> 00:51:20,000
Okay.

917
00:51:23,000 --> 00:51:23,500
So yeah.

918
00:51:26,700 --> 00:51:28,000
It's no longer needs to be here.

919
00:51:29,400 --> 00:51:31,200
And so I think that's basically it all.

920
00:51:31,200 --> 00:51:36,700
We now have to do is select the actual output Target that we want from

921
00:51:36,900 --> 00:51:37,900
our clip.

922
00:51:37,900 --> 00:51:41,800
Rect so we have a loaded bitmap, it's our output Target.

923
00:51:41,900 --> 00:51:45,300
It's going to be render targets plus whatever the clip rect is that

924
00:51:45,300 --> 00:51:46,600
we're currently using.

925
00:51:50,300 --> 00:51:51,400
I guess I can do it like this.

926
00:51:54,000 --> 00:51:57,300
It's going to be whatever the clip rect is that we're currently using

927
00:51:59,000 --> 00:51:59,800
Plus.

928
00:52:01,000 --> 00:52:01,300
I'm sorry.

929
00:52:01,300 --> 00:52:03,300
It's going to be the base of the Rena Target array.

930
00:52:03,500 --> 00:52:08,800
Plus whichever cliprect entry were using whichever render Target.

931
00:52:08,900 --> 00:52:09,900
It says that is

932
00:52:11,200 --> 00:52:12,100
it says it wants.

933
00:52:16,200 --> 00:52:16,700
Okay.

934
00:52:28,500 --> 00:52:29,000
Here we go.

935
00:52:32,300 --> 00:52:32,800
and,

936
00:52:34,000 --> 00:52:37,900
So now everything is doing exactly what we want in theory.

937
00:52:37,900 --> 00:52:42,000
We now have multiple render targets, we don't composite those render

938
00:52:42,000 --> 00:52:47,700
targets, but let's just check to see if that's actually working now,

939
00:52:47,700 --> 00:52:48,200
right?

940
00:52:48,200 --> 00:52:54,700
And we can do that pretty easily, I think just by saying, let's take

941
00:52:54,700 --> 00:53:03,400
the debug system and let's set the debug system so that it's code is

942
00:53:04,100 --> 00:53:06,900
Going to use the default render Target, right?

943
00:53:07,600 --> 00:53:12,500
So, when we call debug begin here and we set default cliprect to be

944
00:53:12,500 --> 00:53:19,200
current cliprect index or whatever this is, you know, I think this is

945
00:53:19,200 --> 00:53:20,900
using a custom cliprect.

946
00:53:20,900 --> 00:53:26,600
Let's go ahead and set that custom cliprect because we know we have it

947
00:53:26,600 --> 00:53:28,100
in here, render Target.

948
00:53:28,700 --> 00:53:31,400
I think that's what it's called yet render Target, let's set render

949
00:53:31,400 --> 00:53:32,600
Target equal to 1.

950
00:53:33,000 --> 00:53:33,800
So it's using a

951
00:53:34,000 --> 00:53:36,200
A different render Target number, right?

952
00:53:37,600 --> 00:53:39,500
Poof, where did it go?

953
00:53:40,100 --> 00:53:43,000
It's getting rendered to the other render Target and we can't see it,

954
00:53:43,500 --> 00:53:46,600
which is exactly what we expect and exactly what we want.

955
00:53:47,300 --> 00:53:51,200
So now we have more than one render Target in the actual software.

956
00:53:51,200 --> 00:53:55,400
Renderer, we just don't have any way to actually say how we want those

957
00:53:55,400 --> 00:53:58,100
things to be composited, but that's okay.

958
00:53:58,200 --> 00:53:59,800
That's something that we can do.

959
00:54:00,200 --> 00:54:01,300
Next week.

960
00:54:01,700 --> 00:54:05,000
So I will go ahead and leave that in this state.

961
00:54:08,300 --> 00:54:09,400
Let's go ahead and go to the Q&A.

962
00:54:51,700 --> 00:54:54,600
I'm sorry, I didn't mean to say next week, I meant tomorrow.

963
00:56:11,400 --> 00:56:13,200
A bit unrelated to the project.

964
00:56:13,200 --> 00:56:15,300
But what do you think about the rust language?

965
00:56:16,200 --> 00:56:19,100
Yeah, that is a bit unrelated to the project considering the fact that

966
00:56:19,100 --> 00:56:20,800
it is not written in Rust

967
00:56:24,200 --> 00:56:28,200
I have not used it so I don't I don't have any opinions about it.

968
00:56:39,700 --> 00:56:40,300
Build a strong.

969
00:56:40,300 --> 00:56:43,200
So when do we think we will be ready for the new graphics assets?

970
00:56:43,200 --> 00:56:49,000
I'm excited when we are when we have Z solidly under control and we

971
00:56:49,000 --> 00:56:51,500
might want to do lighting as well.

972
00:56:52,700 --> 00:56:57,000
So we kind of have a couple things we got to do their Graphics wise,

973
00:56:58,000 --> 00:56:59,400
that's then that's about it.

974
00:57:09,400 --> 00:57:15,200
So yeah, probably should stop doing that.

975
00:57:16,500 --> 00:57:16,900
but,

976
00:57:26,800 --> 00:57:28,600
Can you explain what this game is?

977
00:57:29,000 --> 00:57:29,400
Yes.

978
00:57:29,400 --> 00:57:34,300
Well it's it's actually an educational programming series.

979
00:57:35,500 --> 00:57:42,300
The the idea behind it is to show come creating a game completely from

980
00:57:42,300 --> 00:57:46,800
start to finish, not using any libraries or even.

981
00:57:46,900 --> 00:57:51,200
We don't even require opengl or even Hardware acceleration, like we

982
00:57:51,200 --> 00:57:54,500
even like I was just showing at the end of this stream, for example.

983
00:57:55,000 --> 00:57:56,600
Wrote Our Own rasterizer.

984
00:57:56,600 --> 00:57:59,200
That actually draws all the pixels one by one.

985
00:58:00,300 --> 00:58:11,100
And so the the game per se is basically a reason to show how all this

986
00:58:11,100 --> 00:58:18,500
stuff is done and, you know, eventually it will be just a game on its

987
00:58:18,500 --> 00:58:20,500
own that you can play and have fun with.

988
00:58:21,500 --> 00:58:24,800
But the point of the vast majority, certainly

989
00:58:24,900 --> 00:58:28,900
Out of all of the twitch coding is a little bit different.

990
00:58:28,900 --> 00:58:32,300
It's not to generate, you know publicity for the game or something

991
00:58:32,300 --> 00:58:35,900
that we're not just showing like fun parts, or simple things or

992
00:58:35,900 --> 00:58:36,400
whatever.

993
00:58:37,400 --> 00:58:42,000
We're actually just showing how to do game programming and the goal of

994
00:58:42,000 --> 00:58:45,900
the series is to have a really complete sort of video series of the

995
00:58:45,900 --> 00:58:48,800
end, where you can see how every last little part of a game is made,

996
00:58:48,800 --> 00:58:52,000
if that's something that you're interested in learning, and you can

997
00:58:52,000 --> 00:58:54,800
look at specific Parts if you want to see how

998
00:58:55,000 --> 00:58:56,900
A particular part of a game can get made.

999
00:58:56,900 --> 00:58:58,000
That's that's one.

1000
00:59:16,200 --> 00:59:19,200
Is writing to that other currently invisible render Target much.

1001
00:59:19,200 --> 00:59:22,500
Any less computation expensive than also sending it to this play.

1002
00:59:27,200 --> 00:59:31,800
Well it's it's not probably that much more computationally expensive

1003
00:59:31,800 --> 00:59:33,400
to render to the Target.

1004
00:59:33,400 --> 00:59:39,400
It can be depends on the cache situations and various other things,

1005
00:59:39,400 --> 00:59:39,800
right?

1006
00:59:39,800 --> 00:59:44,800
Because since we have a tiled renderer if the tile sort of data stays

1007
00:59:44,800 --> 00:59:49,100
in the cache multiplying out how many of those tiles you have to have

1008
00:59:49,100 --> 00:59:51,500
I don't know to what extent that would cause problems.

1009
00:59:51,800 --> 00:59:54,900
It depends how often you flip between rendering to the different

1010
00:59:54,900 --> 00:59:55,900
targets as well.

1011
00:59:55,900 --> 00:59:57,200
So there's a there's a bunch of

1012
00:59:57,200 --> 00:59:59,800
and stuff like that, that could be there, but in general,

1013
01:00:00,000 --> 01:00:06,000
All the main cost that were adding, isn't that hopefully the main

1014
01:00:06,000 --> 01:00:10,600
costs are adding is the composite step because that's pure cost,

1015
01:00:10,700 --> 01:00:11,200
right?

1016
01:00:11,300 --> 01:00:16,400
So when we render to render targets, if we had rendered all those

1017
01:00:16,400 --> 01:00:18,000
things to just one render Target?

1018
01:00:18,000 --> 01:00:19,200
Is that a little faster?

1019
01:00:19,200 --> 01:00:19,900
Yes.

1020
01:00:20,300 --> 01:00:21,600
But is it hugely faster?

1021
01:00:21,600 --> 01:00:22,600
Possibly not.

1022
01:00:23,400 --> 01:00:27,200
What is going to be much slower, is the fact that once we have

1023
01:00:27,200 --> 01:00:29,900
multiple charts, we got to bring them back together, sometime somehow.

1024
01:00:30,200 --> 01:00:33,700
And so that's a bunch of extra bandwidth, write a bunch of entrant

1025
01:00:33,700 --> 01:00:37,800
grabbing all that data back from the render targets compiled causing

1026
01:00:37,800 --> 01:00:41,600
together and putting it into yet another render Target, right?

1027
01:00:43,200 --> 01:00:45,700
So that's what I would say.

1028
01:00:50,800 --> 01:00:52,000
With multiple render targets.

1029
01:00:52,200 --> 01:00:55,900
Are there other effects you can do other than the alpha blending?

1030
01:00:59,000 --> 01:01:04,800
Well, you know, as far as multiple render targets is concerned,

1031
01:01:04,800 --> 01:01:10,900
specifically, you know, usually what you're talking about for render

1032
01:01:10,900 --> 01:01:15,000
targets, is if you want to do stuff, like I rendered the screen and

1033
01:01:15,000 --> 01:01:20,200
then I like did some kind of a wipe or like a maquette like, you know,

1034
01:01:20,700 --> 01:01:23,400
maybe you've seen on the old Nintendo games, like they do a circle

1035
01:01:23,400 --> 01:01:28,200
that squishes into like and then comes back out, you know, once you

1036
01:01:28,200 --> 01:01:28,500
are ready,

1037
01:01:28,700 --> 01:01:29,600
Two separate targets.

1038
01:01:29,600 --> 01:01:33,500
You can have Matt's between them, or you can offset them or you can do

1039
01:01:34,700 --> 01:01:35,400
stuff like that.

1040
01:01:35,400 --> 01:01:38,900
So, you know, you can also take a rendering and put it somewhere in

1041
01:01:38,900 --> 01:01:39,300
the game.

1042
01:01:39,300 --> 01:01:41,800
So, if you wanted like a little TV screen or something, you know, you

1043
01:01:41,800 --> 01:01:45,800
could do stuff like that, we won't really be doing that stuff.

1044
01:01:47,600 --> 01:01:50,500
There's nothing in particular that I have in mind that would require

1045
01:01:50,500 --> 01:01:51,200
any of that.

1046
01:01:51,500 --> 01:01:54,600
But, you know, you can, you can easily think of a lot of reasons.

1047
01:01:54,600 --> 01:01:58,000
Why once you have the game render into a buffer,

1048
01:01:58,600 --> 01:01:59,800
Things that you could do.

1049
01:02:04,200 --> 01:02:05,600
Are you going to support shaders?

1050
01:02:05,600 --> 01:02:09,400
And if so, will you try to support multiple render Targets in the

1051
01:02:09,400 --> 01:02:10,000
shaders?

1052
01:02:11,100 --> 01:02:12,700
So know.

1053
01:02:12,900 --> 01:02:15,700
So I'm not sure which question you're actually asking.

1054
01:02:17,000 --> 01:02:20,800
We don't have any need for shaders themselves, to have multiple render

1055
01:02:20,800 --> 01:02:24,100
Targets in the Shader, because that's a real thing.

1056
01:02:24,100 --> 01:02:27,700
A Shader can actually Target more than one render Target at a time.

1057
01:02:28,300 --> 01:02:30,700
However, for a game such as this one, that's a 2-D game.

1058
01:02:30,700 --> 01:02:33,100
That would be like a fantastically bad idea.

1059
01:02:33,400 --> 01:02:37,700
And the reason for that is only some graphics cards can support

1060
01:02:37,800 --> 01:02:42,900
multiple render targets out of a single Shader and since we don't need

1061
01:02:42,900 --> 01:02:45,000
the extra performance.

1062
01:02:45,000 --> 01:02:48,400
That that the only reason you do that is if you have specific

1063
01:02:48,400 --> 01:02:51,500
performance reasons, why you why that's more efficient for you to do?

1064
01:02:51,900 --> 01:02:57,000
We can easily just run the Shader twice and run it to each Target.

1065
01:02:57,000 --> 01:02:58,900
If that's something that we actually needed.

1066
01:02:59,300 --> 01:02:59,800
Now, I don't

1067
01:03:00,000 --> 01:03:04,800
Even know that we have any reasons, why we would even ever have a

1068
01:03:04,800 --> 01:03:07,400
Shader that would write to two Targets at the same time.

1069
01:03:08,000 --> 01:03:12,400
Anyway, I don't think we have any situations that would be like that

1070
01:03:13,300 --> 01:03:15,200
so I don't even think it would even come up.

1071
01:03:15,300 --> 01:03:17,500
But point being we wouldn't be doing that.

1072
01:03:17,900 --> 01:03:22,600
Now on the, if what you were actually asking is just when we do, the

1073
01:03:22,600 --> 01:03:26,500
opengl version will be support because we have an opengl renderer

1074
01:03:26,500 --> 01:03:27,200
running as well.

1075
01:03:27,200 --> 01:03:29,800
When we ping pong over to that, will we add render targets were too?

1076
01:03:30,000 --> 01:03:30,300
That.

1077
01:03:30,400 --> 01:03:31,300
Yes, absolutely.

1078
01:03:33,500 --> 01:03:36,900
But that doesn't have anything to do with shaders shaders.

1079
01:03:36,900 --> 01:03:40,200
Don't even know that there's multiple render targets.

1080
01:03:40,500 --> 01:03:43,800
They just know that they're like until you actually start targeting

1081
01:03:43,900 --> 01:03:48,200
more than one render Target inside the actual Shader, you don't, it

1082
01:03:48,200 --> 01:03:50,900
doesn't even know because that stuff gets set outside the Shader

1083
01:03:50,900 --> 01:03:52,200
before the Shader gets invoked.

1084
01:04:02,800 --> 01:04:05,800
Are you excited to get an art 64 tool chain up and running to get this

1085
01:04:05,800 --> 01:04:07,900
thing to run on a Raspberry Pi 3?

1086
01:04:08,400 --> 01:04:11,800
Not really platform work.

1087
01:04:11,800 --> 01:04:13,500
Doesn't usually excite me that much.

1088
01:04:14,800 --> 01:04:19,100
To be honest I kind of wish we had just settled that matter from now

1089
01:04:19,100 --> 01:04:25,100
and had it's just a just a ship the day gpus go away will be my

1090
01:04:25,100 --> 01:04:26,700
happiest day of all times.

1091
01:04:27,400 --> 01:04:27,800
Yeah.

1092
01:04:37,300 --> 01:04:39,500
Lord Marshal, are you still working full-time?

1093
01:04:39,600 --> 01:04:41,000
Why only stream one hour night?

1094
01:04:41,000 --> 01:04:48,000
Yes I work on an actual like full big game project in my normal hours

1095
01:04:48,000 --> 01:04:48,500
of work.

1096
01:04:50,400 --> 01:04:51,900
SC, 24 vad.

1097
01:04:51,900 --> 01:04:53,300
How would you go about rendering?

1098
01:04:53,300 --> 01:04:54,700
Huge tile, Maps.

1099
01:04:55,200 --> 01:04:56,900
Some batching techniques.

1100
01:04:56,900 --> 01:04:57,800
Or any tips?

1101
01:04:58,300 --> 01:05:00,300
What is a huge tile map.

1102
01:05:02,500 --> 01:05:03,900
I'm not sure what that means.

1103
01:05:06,200 --> 01:05:10,100
The tile maps in handmade hero can be so large that you could never

1104
01:05:10,100 --> 01:05:11,400
really even walk across them.

1105
01:05:11,600 --> 01:05:16,400
So if the question is just how do you render a scene out of a giant?

1106
01:05:16,400 --> 01:05:18,200
Tilemap, we already do that.

1107
01:05:18,700 --> 01:05:22,000
If the question is you want to zoom way out and have tiny little

1108
01:05:22,000 --> 01:05:22,600
tiles.

1109
01:05:23,500 --> 01:05:25,500
The answer there is like I'll be honest.

1110
01:05:25,600 --> 01:05:27,900
Chances are you won't even be able to get the tile tiny enough that

1111
01:05:27,900 --> 01:05:28,900
you even really care.

1112
01:05:28,900 --> 01:05:29,700
Performance-wise.

1113
01:05:32,700 --> 01:05:34,600
You just can't fit that many tiles on the screen.

1114
01:05:34,600 --> 01:05:37,700
I mean, even if you style, was only one pixel big.

1115
01:05:38,600 --> 01:05:42,500
So if what you want to do was zoom out to the point where each tile

1116
01:05:42,500 --> 01:05:46,400
was a fraction of a pixel or something like that, then you just need

1117
01:05:46,400 --> 01:05:47,500
to have multiresolution.

1118
01:05:47,500 --> 01:05:51,400
You need to have knowledge of what you basically MIT maps of your

1119
01:05:51,600 --> 01:05:55,900
world map so you can say, OK for this whole region, what's the tile

1120
01:05:55,900 --> 01:05:56,500
that I should use?

1121
01:05:56,500 --> 01:05:58,000
Or what's the color that I should use?

1122
01:05:59,000 --> 01:05:59,800
But I'm not sure which one

1123
01:06:00,000 --> 01:06:00,400
Asking.

1124
01:06:05,500 --> 01:06:06,100
Building strong.

1125
01:06:06,100 --> 01:06:08,900
Would that be a good technique to use to create an overhead map?

1126
01:06:11,300 --> 01:06:11,500
Yeah.

1127
01:06:11,500 --> 01:06:15,700
Possibly I mean it could be I don't think you'd really usually need to

1128
01:06:15,700 --> 01:06:15,900
though.

1129
01:06:15,900 --> 01:06:19,200
Because remember, you can just set a cliff region and then render up

1130
01:06:19,200 --> 01:06:21,200
into the corner, a smaller version.

1131
01:06:21,200 --> 01:06:23,400
You don't really need a separate render Target for it.

1132
01:06:23,600 --> 01:06:24,000
Separate.

1133
01:06:24,000 --> 01:06:27,800
Render targets are only necessary when you actually need to combine

1134
01:06:27,800 --> 01:06:32,300
two things after the fact, using operations, that could not have been

1135
01:06:32,300 --> 01:06:32,600
done.

1136
01:06:33,500 --> 01:06:35,300
Just in place, right?

1137
01:06:35,700 --> 01:06:40,600
So Alpha and other kinds of Composites, like that are good examples of

1138
01:06:40,600 --> 01:06:41,300
that, right?

1139
01:07:16,700 --> 01:07:19,000
It's about is pretty great.

1140
01:07:19,900 --> 01:07:21,200
I'm loving these and so Bots.

1141
01:07:26,500 --> 01:07:27,900
Let's see.

1142
01:07:37,800 --> 01:07:42,000
All right, let's go ahead and close down.

1143
01:07:49,600 --> 01:07:51,700
Thank you everyone for joining me for handmade here.

1144
01:07:51,700 --> 01:07:52,900
It's been a pleasure coding with you.

1145
01:07:52,900 --> 01:07:56,000
As always, if you want to follow along with series at home, you can

1146
01:07:56,000 --> 01:07:59,100
always pre-order the game on handmade hero dot org and it comes with a

1147
01:07:59,100 --> 01:08:00,700
source code which I update nightly.

1148
01:08:00,700 --> 01:08:02,700
So you can play around at home and learn.

1149
01:08:04,000 --> 01:08:07,600
We have a forum site, you can go to ask questions a patreon page if

1150
01:08:07,600 --> 01:08:11,200
you'd like to support our video series, a schedule bot, you can use if

1151
01:08:11,200 --> 01:08:15,600
you want to have the schedule tweeted when we're going to be live and

1152
01:08:15,600 --> 01:08:18,600
also an episode guide for trying to catch up on past episodes.

1153
01:08:19,300 --> 01:08:20,600
That's it for today.

1154
01:08:21,600 --> 01:08:23,600
I will be back here tomorrow, I believe 8, p.m.

1155
01:08:23,600 --> 01:08:25,100
Pacific Daylight time, but check the Tweet.

1156
01:08:25,100 --> 01:08:30,800
But if you want to know for sure, until then have fun coding and I

1157
01:08:30,800 --> 01:08:32,000
will see you guys on the internet.

1158
01:08:32,100 --> 01:08:33,000
Take it easy, everyone.

