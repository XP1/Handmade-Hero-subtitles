1
00:00:00,000 --> 00:00:05,100
And jump right in to another episode of handmade hero.

2
00:00:05,200 --> 00:00:05,900
Alright.

3
00:00:07,100 --> 00:00:11,700
Hello everyone and welcome to what I believe if I'm not very much an

4
00:00:11,700 --> 00:00:12,000
error.

5
00:00:12,000 --> 00:00:14,300
It is day 12 of handmade here.

6
00:00:14,300 --> 00:00:17,100
It's almost like the 12 Days of Christmas only.

7
00:00:17,100 --> 00:00:19,600
It is not Christmas and I'm not sure how that works out.

8
00:00:19,600 --> 00:00:20,000
Exactly.

9
00:00:20,000 --> 00:00:23,900
But I think we all know that the 12 days of Christmas are a little

10
00:00:23,900 --> 00:00:24,200
weird.

11
00:00:24,200 --> 00:00:26,400
If you listen to the song, It's a bit bizarre.

12
00:00:26,500 --> 00:00:29,800
And so I feel like we could easily say that handmade hero was on.

13
00:00:30,000 --> 00:00:32,700
One of those days, maybe you get five handmade Heroes for the fifth

14
00:00:32,700 --> 00:00:32,900
day.

15
00:00:32,900 --> 00:00:33,500
I don't really know.

16
00:00:35,600 --> 00:00:36,300
Either way.

17
00:00:36,600 --> 00:00:38,600
Thank you so much for joining me here on day 12.

18
00:00:39,400 --> 00:00:41,900
If you are someone who has pre-ordered the game and would like to

19
00:00:41,900 --> 00:00:43,300
follow along with the source code.

20
00:00:43,500 --> 00:00:46,300
You should have gotten a link in your email where you can download it.

21
00:00:46,300 --> 00:00:51,000
And when you download it, you want to unpack day 11 for this episode,

22
00:00:51,000 --> 00:00:54,100
because you always unpack the previous day's to start on the new day.

23
00:00:54,100 --> 00:00:55,500
So unpack 11.

24
00:00:55,700 --> 00:00:57,400
That is what we are going to be working with today.

25
00:00:57,400 --> 00:01:04,000
Now, yesterday, I went over all of the basics of platform API design

26
00:01:04,000 --> 00:01:04,099
and

27
00:01:04,200 --> 00:01:06,800
Basically, what I mean by platform API design, there really isn't a

28
00:01:06,800 --> 00:01:09,300
term for this explicitly.

29
00:01:09,300 --> 00:01:10,100
I don't think.

30
00:01:10,100 --> 00:01:15,000
But basically, what I'm talking about is the ability to abstract your

31
00:01:15,000 --> 00:01:19,200
code away, sort of like, pull your code out of being tied to an

32
00:01:19,200 --> 00:01:19,700
operating system.

33
00:01:19,700 --> 00:01:22,200
And so you can write all of your code.

34
00:01:22,200 --> 00:01:25,400
So that it's basically used across all the platforms that your game

35
00:01:25,400 --> 00:01:29,100
ships on and then you just have a small piece of code.

36
00:01:29,100 --> 00:01:32,200
That's basically, like a shim, a little platform layers, what I tend

37
00:01:32,200 --> 00:01:34,100
to call them that basically allows

38
00:01:34,200 --> 00:01:36,500
Game to run on whatever that platform is.

39
00:01:36,500 --> 00:01:42,500
Now what how complicated that is and how efficient that is all boils

40
00:01:42,500 --> 00:01:44,000
down to how good of a job.

41
00:01:44,000 --> 00:01:48,400
You do defining the boundary between the platform-specific code in the

42
00:01:48,400 --> 00:01:51,900
platform layer and the platform nonspecific code that comprises the

43
00:01:51,900 --> 00:01:52,800
rest of your game.

44
00:01:52,800 --> 00:01:56,400
And I talked about the philosophy of that yesterday, please be sure to

45
00:01:56,400 --> 00:01:59,300
watch that video if you have not already because it really does lay

46
00:01:59,300 --> 00:02:02,800
the foundation for everything that we're going to do for the rest of

47
00:02:02,800 --> 00:02:03,300
the week here.

48
00:02:03,300 --> 00:02:04,100
It's basically good.

49
00:02:04,200 --> 00:02:08,100
The driving force between the decision behind the decisions as we make

50
00:02:08,100 --> 00:02:08,400
them.

51
00:02:08,500 --> 00:02:11,100
And so really what I'm going to do today is I'm going to sort of

52
00:02:11,100 --> 00:02:15,700
continue to push a little further down the direction that I started at

53
00:02:15,700 --> 00:02:19,200
the end of the last dream, when I talked about the platform philosophy

54
00:02:19,300 --> 00:02:21,700
that I take in terms of separating things out.

55
00:02:21,700 --> 00:02:24,600
Now, if you'll remember, basically, what I said is we want to divide

56
00:02:24,600 --> 00:02:28,800
things up, into two sort of directions.

57
00:02:28,900 --> 00:02:33,300
There are services that the platform layer asked the game for and that

58
00:02:33,300 --> 00:02:34,100
stuff like what do you?

59
00:02:34,200 --> 00:02:35,000
Want to render.

60
00:02:35,100 --> 00:02:35,900
What do you want to play out?

61
00:02:35,900 --> 00:02:36,800
The sound card?

62
00:02:36,900 --> 00:02:37,400
Right?

63
00:02:38,600 --> 00:02:40,200
What do you want to do for files?

64
00:02:40,200 --> 00:02:42,000
Like, saving files, that sort of thing.

65
00:02:42,500 --> 00:02:44,200
So file IO sorts of stuff.

66
00:02:44,600 --> 00:02:47,300
And then there's stuff that goes the other direction, which is also

67
00:02:47,300 --> 00:02:50,400
files because it depends on which who's asking for who and who depends

68
00:02:50,400 --> 00:02:54,100
on who's doing what basically, you know, if the if the platform layer

69
00:02:54,100 --> 00:02:57,600
is asking the game to save it state or something that could go One

70
00:02:57,600 --> 00:02:58,000
Direction.

71
00:02:58,000 --> 00:02:59,800
Whereas if the game is asking to load a

72
00:03:00,000 --> 00:03:01,100
That might go the other direction.

73
00:03:01,100 --> 00:03:05,000
So that's sort of a bi-directional thing, but also their stuff like,

74
00:03:05,400 --> 00:03:08,700
you know, maybe the, the, the game needs to take some profiling

75
00:03:08,700 --> 00:03:09,200
information.

76
00:03:09,200 --> 00:03:11,900
It needs to look at the system clock or something like that, and

77
00:03:11,900 --> 00:03:13,900
that's going to be different on different platforms.

78
00:03:13,900 --> 00:03:15,100
So there's all sorts of things like that.

79
00:03:15,100 --> 00:03:18,300
So, basically, we break it down into two types, their services, that

80
00:03:18,300 --> 00:03:20,600
the platform layer provides for the game and services, that the game

81
00:03:20,600 --> 00:03:21,900
provides the platform layer.

82
00:03:22,300 --> 00:03:26,200
And what we did is we started last night after kind of going through

83
00:03:26,200 --> 00:03:28,700
all the philosophy of it and the reasons behind the different

84
00:03:28,700 --> 00:03:29,900
decisions, and we

85
00:03:30,000 --> 00:03:32,400
Leslie said the first thing that we're going to do is just abstract

86
00:03:32,400 --> 00:03:33,500
are simple gradient.

87
00:03:33,500 --> 00:03:34,800
And so we left off.

88
00:03:34,900 --> 00:03:36,300
Let me go ahead and open the debugger.

89
00:03:36,300 --> 00:03:36,500
Here.

90
00:03:36,500 --> 00:03:41,200
We left off at feature, parity, basically, where we were originally

91
00:03:41,200 --> 00:03:43,400
feature, parity, but we'd pulled out one piece of code.

92
00:03:43,400 --> 00:03:45,100
So we're back to where we used to be.

93
00:03:45,300 --> 00:03:47,400
If I grab the little trusty Gamepad here.

94
00:03:47,500 --> 00:03:49,300
I can still do this sort of stuff with it.

95
00:03:49,400 --> 00:03:50,900
It's back to where it needs to be.

96
00:03:51,300 --> 00:03:53,700
I can go ahead and do whatever I want to do with it.

97
00:03:53,700 --> 00:03:55,200
It's all good, but

98
00:03:56,000 --> 00:03:59,200
We have only abstracted one very small piece of code, which is that

99
00:03:59,200 --> 00:03:59,700
gradient.

100
00:03:59,700 --> 00:04:02,900
The render weird gradient thing is the only piece of code that we

101
00:04:02,900 --> 00:04:04,600
abstracted and that's a problem.

102
00:04:05,000 --> 00:04:08,200
Basically, because we've got a lot of other code that could be

103
00:04:08,200 --> 00:04:08,600
platform.

104
00:04:08,600 --> 00:04:13,100
Nonspecific that isn't the example, first of all, the storage of the

105
00:04:13,300 --> 00:04:15,000
X, and Y, offsets that happen.

106
00:04:15,000 --> 00:04:18,700
When you're moving the gradient around, there is the interpretation of

107
00:04:18,700 --> 00:04:21,899
the control events, like what the, what the things on the controller.

108
00:04:22,300 --> 00:04:25,500
What what, various operations with the controller.

109
00:04:25,700 --> 00:04:28,900
And as far as the response of the gradient, there's the sine wave that

110
00:04:28,900 --> 00:04:31,500
were outputting that supposed to basically just, you know, this is the

111
00:04:31,500 --> 00:04:35,700
test sine wave that generation of sine wave is not platform-specific.

112
00:04:35,700 --> 00:04:39,100
So we just have a lot of things that are still in our win32 layer.

113
00:04:39,100 --> 00:04:42,300
And what we want to do is move all of that stuff out here so that we

114
00:04:42,300 --> 00:04:46,500
can see how all of that stuff is going to flow back and forth because

115
00:04:46,500 --> 00:04:48,700
we made everything in the win32 platform layer.

116
00:04:48,700 --> 00:04:52,100
We made input, we made sound and we want to kind of move all that

117
00:04:52,100 --> 00:04:53,300
stuff out here.

118
00:04:53,700 --> 00:04:55,500
So we're going to start.

119
00:04:55,600 --> 00:04:58,400
Art by getting sound out because you can see, we did it already with

120
00:04:58,400 --> 00:04:59,500
the game on stream buffer.

121
00:04:59,700 --> 00:05:02,800
We're going to also now, try to get sound out of there.

122
00:05:03,000 --> 00:05:04,700
So sound is a little bit trickier.

123
00:05:04,700 --> 00:05:07,900
And the reason sound is a little bit trickier is because sound is

124
00:05:07,900 --> 00:05:08,900
actually temporal.

125
00:05:09,400 --> 00:05:09,600
Now.

126
00:05:09,600 --> 00:05:13,200
This is a little confusing to understand and it actually boils down to

127
00:05:13,200 --> 00:05:18,200
a technicality that we may or may not choose to to explore on the

128
00:05:18,200 --> 00:05:21,400
video side of things, but I'll explain it in detail after after a

129
00:05:21,400 --> 00:05:22,300
little almond milk.

130
00:05:26,800 --> 00:05:31,000
Basically, if you imagine what we are outputting we are outputting

131
00:05:31,100 --> 00:05:32,400
sound and video.

132
00:05:32,500 --> 00:05:36,900
At took basically comprised the audio visual feedback that the user is

133
00:05:36,900 --> 00:05:38,600
going to get when playing the game.

134
00:05:38,600 --> 00:05:40,800
And basically, that is what makes a video game.

135
00:05:40,800 --> 00:05:45,300
The audio visuals are, what make a video game because really, if you

136
00:05:45,300 --> 00:05:47,000
didn't have those, you would be bored gate.

137
00:05:47,000 --> 00:05:49,300
That's kind of the difference between the two things.

138
00:05:49,300 --> 00:05:52,600
So it's that it's that audio visual feedback that really kind of

139
00:05:52,600 --> 00:05:55,900
defines to a large extent, the fact that we are video games.

140
00:05:55,900 --> 00:05:56,000
It's

141
00:05:56,200 --> 00:05:56,800
Important.

142
00:05:56,800 --> 00:05:59,700
And it's one of the most important parts obviously to think.

143
00:06:01,500 --> 00:06:06,100
Audio is mandatorily temporal, right?

144
00:06:06,700 --> 00:06:08,800
Audio happens over time.

145
00:06:09,500 --> 00:06:15,200
So when you are listening to the audio output of a game, it is not

146
00:06:15,300 --> 00:06:18,400
optional how long it will be playing for.

147
00:06:19,100 --> 00:06:24,300
It has to play continuously if I'm playing a piece of music and I

148
00:06:24,300 --> 00:06:25,800
output say

149
00:06:26,900 --> 00:06:29,100
A sixteenth of a seconds worth of music.

150
00:06:29,500 --> 00:06:33,300
But I let that play for an eighth of a second, which is twice as long.

151
00:06:33,500 --> 00:06:35,700
The user is going to hear garbage or silence.

152
00:06:35,700 --> 00:06:39,200
Whatever was in the buffer at for the other eighth of a second right

153
00:06:39,200 --> 00:06:40,900
for the for the other sixteenth of a second.

154
00:06:40,900 --> 00:06:41,700
The first 16th.

155
00:06:41,700 --> 00:06:44,700
It'll play the music but the other 16th, nothing will happen.

156
00:06:45,400 --> 00:06:50,400
Contrast this with video if I play video on the screen, if I put up an

157
00:06:50,400 --> 00:06:54,500
image I can hold that image on the screen for as long as I want in

158
00:06:54,500 --> 00:06:56,600
some sense and really, what will be

159
00:06:56,800 --> 00:06:58,100
See if I hold it too long.

160
00:06:58,100 --> 00:07:03,100
Is that the frame rate starts to slow down but you really won't get

161
00:07:03,100 --> 00:07:04,100
that same kind of glitching.

162
00:07:04,100 --> 00:07:07,600
It's not like it, it disappears or something like this, right?

163
00:07:07,700 --> 00:07:09,600
It's still just it's just lowering.

164
00:07:09,600 --> 00:07:13,300
The sample rate is in some sense that I'm outputting to the person,

165
00:07:13,300 --> 00:07:17,000
but they're their mind, does a good job of assembling those images.

166
00:07:17,000 --> 00:07:20,500
So if I was displaying at 60 frames a second and then I miss one frame

167
00:07:20,600 --> 00:07:23,300
and I end up displaying at 30 frames a second from then on because of

168
00:07:23,300 --> 00:07:24,400
some system event or something.

169
00:07:24,400 --> 00:07:25,400
So, I get slower.

170
00:07:25,900 --> 00:07:26,600
It looks a little

171
00:07:26,700 --> 00:07:30,300
Little less smooth, but it did not really appear to be a serious

172
00:07:30,300 --> 00:07:31,500
glitch, right?

173
00:07:32,600 --> 00:07:35,000
And so what I'm trying to impress upon you here is basically that the

174
00:07:35,000 --> 00:07:38,700
video that gets output is a static snapshot in time.

175
00:07:38,800 --> 00:07:42,500
That is held for some amount of time and you're bringing reassembles

176
00:07:42,500 --> 00:07:46,700
those and considers them animation sound, doesn't really have that

177
00:07:46,700 --> 00:07:47,200
option.

178
00:07:47,400 --> 00:07:51,000
You basically have to Output a very large number of samples per

179
00:07:51,000 --> 00:07:51,300
second.

180
00:07:51,300 --> 00:07:53,400
I mean, if you look at it at the sample boundary, it kind of looks

181
00:07:53,400 --> 00:07:56,400
that way maybe but really it's so temporal that you

182
00:07:56,700 --> 00:08:00,100
The basically be outputting 48,000 things a second, and if you don't

183
00:08:00,100 --> 00:08:02,600
keep out, putting all those samples to tell the sound card, what the

184
00:08:02,600 --> 00:08:05,000
sound sounds like your brain immediately.

185
00:08:05,000 --> 00:08:06,000
Here's the error.

186
00:08:06,100 --> 00:08:08,300
It sounds harsh and unfortunate.

187
00:08:08,300 --> 00:08:11,800
It doesn't just seem like you're slowing down the sound or anything

188
00:08:11,800 --> 00:08:12,200
like that.

189
00:08:12,200 --> 00:08:15,600
That's not what happens or that the sample rate of the sound dropped,

190
00:08:15,800 --> 00:08:18,700
what actually sounds like is just a flat-out bug.

191
00:08:19,700 --> 00:08:26,000
So, so what that basically means is that when we prepare a frame.

192
00:08:27,200 --> 00:08:30,500
We don't really need to know how long that frame will be on the

193
00:08:30,500 --> 00:08:30,900
screen.

194
00:08:31,500 --> 00:08:34,700
It's a little weird to think about, but we really don't because we can

195
00:08:34,700 --> 00:08:37,700
put that frame on the screen and let's say, our Target frame rate was

196
00:08:37,700 --> 00:08:38,900
60 frames a second.

197
00:08:38,900 --> 00:08:43,000
We can put that frame on the screen and if we miss 60, we just update

198
00:08:43,000 --> 00:08:45,000
to the next frame when we're actually generating.

199
00:08:45,000 --> 00:08:46,400
The next frame, we say something like.

200
00:08:46,400 --> 00:08:46,800
Okay.

201
00:08:46,900 --> 00:08:47,900
Let's make that frame.

202
00:08:47,900 --> 00:08:51,600
Will advance the state of the world, a 30th of a second, and just flip

203
00:08:51,600 --> 00:08:52,000
it later.

204
00:08:52,000 --> 00:08:53,300
We'll just move it later on, right?

205
00:08:53,300 --> 00:08:54,600
We could recover in theory.

206
00:08:54,900 --> 00:08:56,500
Not necessary saying you

207
00:08:56,900 --> 00:08:58,400
Really do all of this in game code.

208
00:08:58,400 --> 00:08:59,900
I'm just pointing out to you the difference in the

209
00:09:00,000 --> 00:09:00,400
Put.

210
00:09:00,900 --> 00:09:04,600
So with that with rendering, you're basically just saying at a

211
00:09:04,600 --> 00:09:05,600
particular instant.

212
00:09:05,600 --> 00:09:06,200
In time.

213
00:09:06,200 --> 00:09:08,300
I need the image for this instant in time.

214
00:09:08,300 --> 00:09:09,200
Just please give it to me.

215
00:09:10,400 --> 00:09:12,500
With sound, that's not true.

216
00:09:12,500 --> 00:09:15,900
I have to say, I want the sound that starts at this particular point

217
00:09:15,900 --> 00:09:18,600
in time and I need this much of it, right?

218
00:09:18,600 --> 00:09:20,800
I need you to give me this much sound.

219
00:09:22,100 --> 00:09:26,500
Hopefully, that makes some sense and if you misjudge and you get to

220
00:09:26,500 --> 00:09:30,100
little sound and that play cursor, and direct sound catches up to you,

221
00:09:30,100 --> 00:09:31,700
you will get a glitch.

222
00:09:31,800 --> 00:09:32,900
That's just how that's going to work.

223
00:09:33,300 --> 00:09:33,500
Now.

224
00:09:33,500 --> 00:09:36,900
The reason I say that it's actually not quite true with video.

225
00:09:36,900 --> 00:09:40,100
What I'm saying is because, technically, you could imagine if your

226
00:09:40,100 --> 00:09:43,600
render was sophisticated enough to do, say, motion blur, you were

227
00:09:43,600 --> 00:09:45,400
doing really accurate motion blur.

228
00:09:45,900 --> 00:09:48,100
So that instead of a single, snapshot in time.

229
00:09:48,100 --> 00:09:50,900
You were actually rendering sort of the

230
00:09:51,900 --> 00:09:55,400
Motion of everything in the world over the time, step, right.

231
00:09:55,400 --> 00:09:59,300
Over the entire time that you anticipate the frame to be on the

232
00:09:59,300 --> 00:09:59,800
screen.

233
00:10:00,000 --> 00:10:03,100
Well, now you've essentially got the same problem that you have with

234
00:10:03,100 --> 00:10:04,700
sound now.

235
00:10:04,700 --> 00:10:08,600
The renderer needs to know exactly how long you plan to have that

236
00:10:08,600 --> 00:10:11,800
thing on the screen because it's actually going to do a blur between

237
00:10:11,800 --> 00:10:14,500
the start and ending position of all the entities.

238
00:10:14,700 --> 00:10:18,700
And if you were to hold it on screen for longer than you should, then

239
00:10:18,700 --> 00:10:21,500
things will teleport from their end to their new position.

240
00:10:21,800 --> 00:10:25,300
Actually, when you actually go to do the next frame, that's at the

241
00:10:25,300 --> 00:10:26,300
wrong time.

242
00:10:26,300 --> 00:10:26,900
Essentially.

243
00:10:27,300 --> 00:10:30,200
I know that sounds fairly complicated will to kind of drill down to it

244
00:10:30,200 --> 00:10:31,100
a little bit more.

245
00:10:31,400 --> 00:10:33,900
But basically, my point here is that there's a lot of subtlety

246
00:10:33,900 --> 00:10:34,900
involved in how you update.

247
00:10:34,900 --> 00:10:36,800
This most games, do this.

248
00:10:37,000 --> 00:10:37,900
Very poorly.

249
00:10:38,000 --> 00:10:42,500
Most games Loop actually is very ignorant of what advancing time

250
00:10:42,500 --> 00:10:45,700
actually means and what they're actually trying to achieve with it.

251
00:10:46,000 --> 00:10:49,800
What they normally do is just measure how much time elapsed and they

252
00:10:49,800 --> 00:10:51,700
like ask the you know, world to advance.

253
00:10:51,900 --> 00:10:55,400
That much time, they don't think of it in terms of like what the

254
00:10:55,400 --> 00:10:56,700
future is going to hold.

255
00:10:56,700 --> 00:10:57,400
And that sort of stuff.

256
00:10:57,400 --> 00:10:59,900
There are definitely our games that do that, but they tend to be

257
00:10:59,900 --> 00:11:00,400
higher end.

258
00:11:00,400 --> 00:11:04,000
So a lot of games just don't really aren't aware of all these sort of

259
00:11:04,000 --> 00:11:05,500
temporal issues that are involved.

260
00:11:06,700 --> 00:11:10,700
So anyway, what I'm going to do is I'm going to start out with a very

261
00:11:10,700 --> 00:11:16,400
correct, but very simplistic model of this kind of a request for audio

262
00:11:16,400 --> 00:11:18,900
and we can use it for video to if we want to.

263
00:11:20,200 --> 00:11:21,700
And there are some reasons.

264
00:11:21,800 --> 00:11:24,400
Is why we may not be able to get away with this?

265
00:11:24,400 --> 00:11:28,400
Exactly, in the end due to the whole audio frame rate glitch, sort of

266
00:11:28,400 --> 00:11:31,700
things where we if we're talking about trying to make sure that we can

267
00:11:31,700 --> 00:11:37,000
be as robust as possible in the face of system, things that may like,

268
00:11:37,000 --> 00:11:39,500
interrupt our frame rate or slow us down those sorts of things.

269
00:11:39,600 --> 00:11:43,800
But my start out with something that is relatively correct in a sense

270
00:11:44,100 --> 00:11:49,000
so that we can basically start there and loosen up to things that are

271
00:11:49,000 --> 00:11:51,400
less correct, as we need to if necessary.

272
00:11:51,800 --> 00:11:52,800
Ali that makes some sense.

273
00:11:53,000 --> 00:11:56,400
So what I'm going to do is I'm going to look in here into the game

274
00:11:56,400 --> 00:11:59,600
update and render and I'm basically going to think about the thing

275
00:11:59,600 --> 00:11:59,800
that I

276
00:12:00,000 --> 00:12:03,500
You said, and I'm going to State what I kind of want to have from the

277
00:12:03,500 --> 00:12:04,200
platform layer.

278
00:12:04,400 --> 00:12:08,000
And this is a very typical API design approach that I use.

279
00:12:08,200 --> 00:12:12,700
And I say this, very stringently actually in lectures.

280
00:12:12,700 --> 00:12:16,400
And so on, always write the usage code first.

281
00:12:16,400 --> 00:12:20,400
If you can, when designing something like an API, I'm trying to design

282
00:12:20,400 --> 00:12:21,200
Define here.

283
00:12:21,200 --> 00:12:25,200
What the platform layer gives me, but it's a mistake to try and Define

284
00:12:25,200 --> 00:12:26,100
that upfront.

285
00:12:26,100 --> 00:12:29,900
What I'd much rather do is just write some code that uses the

286
00:12:30,000 --> 00:12:32,900
Things that I think that I'm going to need look at it and go.

287
00:12:32,900 --> 00:12:33,300
Okay.

288
00:12:33,300 --> 00:12:35,300
The usage code is right now.

289
00:12:35,400 --> 00:12:39,300
Now, let's go Define the API to basically do exactly that or, as close

290
00:12:39,300 --> 00:12:40,300
to that, as we can.

291
00:12:42,700 --> 00:12:44,000
So that's what I'm going to do here.

292
00:12:44,500 --> 00:12:47,500
I'm basically going to say that well, I know that I need to do some

293
00:12:47,500 --> 00:12:48,100
stuff.

294
00:12:48,600 --> 00:12:52,200
I know that I need to, you know, update the sound right?

295
00:12:52,200 --> 00:12:53,500
I need to Output the sound.

296
00:12:53,600 --> 00:12:57,900
Let's let's call it output sound or output game sound, or something

297
00:12:57,900 --> 00:12:59,100
like this, right?

298
00:12:59,700 --> 00:12:59,900
I

299
00:13:00,000 --> 00:13:02,500
That I need to Output the sound and what I'm going to need for.

300
00:13:02,500 --> 00:13:05,900
That is like, well, whatever my game state is, and I don't have that

301
00:13:05,900 --> 00:13:07,200
yet because we haven't actually made a game.

302
00:13:07,200 --> 00:13:11,400
But then I'm going to need basically, how many samples worth of sound.

303
00:13:11,800 --> 00:13:14,100
You want me to Output, right?

304
00:13:14,200 --> 00:13:18,300
I need to know, essentially some kind of integer which is going to

305
00:13:18,300 --> 00:13:20,900
tell me, you know, how many samples.

306
00:13:20,900 --> 00:13:24,400
So the sample count to Output, right?

307
00:13:24,400 --> 00:13:28,400
I need to know that then I'm going to need a sound buffer to put them

308
00:13:28,400 --> 00:13:29,800
into and I'm probably going to

309
00:13:29,900 --> 00:13:31,000
Just lock that format.

310
00:13:31,000 --> 00:13:34,100
I'm going to probably just Define the format to be 16-bit interleave

311
00:13:34,100 --> 00:13:34,600
stereo.

312
00:13:34,600 --> 00:13:36,500
Like we were using in our regular buffer.

313
00:13:36,500 --> 00:13:40,200
I don't see any need to make it be sort of like more flexible than

314
00:13:40,200 --> 00:13:40,700
that the time.

315
00:13:40,700 --> 00:13:41,600
So it's going to say that.

316
00:13:41,700 --> 00:13:44,000
So it's going to need to know how many samples have put.

317
00:13:44,000 --> 00:13:47,100
It's going to need to know where to put those samples.

318
00:13:47,700 --> 00:13:52,000
And if we were really going to be, you know, sort of, if we were

319
00:13:52,000 --> 00:13:53,500
really going to be flexible about this.

320
00:13:53,700 --> 00:13:58,900
We would probably put in a way of saying, we're in the, we're in time,

321
00:13:59,100 --> 00:13:59,800
we want those

322
00:14:00,000 --> 00:14:04,000
Supposed to be so that we can if we want to we can skip.

323
00:14:04,000 --> 00:14:07,300
If we if we get into a situation where we're kind of in trouble, we

324
00:14:07,300 --> 00:14:08,600
can sort of skip forward.

325
00:14:08,800 --> 00:14:14,000
And so what we'd like to do here is basically Define something that

326
00:14:14,000 --> 00:14:15,500
allows us to sort of say.

327
00:14:15,500 --> 00:14:16,300
All right.

328
00:14:16,700 --> 00:14:21,000
I don't want you to really assume that every time I call you.

329
00:14:21,000 --> 00:14:23,200
I'm just asking for the next set of samples.

330
00:14:23,200 --> 00:14:25,800
That would be right abutted to the previous set.

331
00:14:25,800 --> 00:14:27,100
You set, you sent me.

332
00:14:27,400 --> 00:14:29,800
I might want you to, like, overwrite old.

333
00:14:29,900 --> 00:14:32,900
Sample, so we'll Advance last or I might want you to kind of like,

334
00:14:32,900 --> 00:14:35,200
give me samples that are further out.

335
00:14:35,300 --> 00:14:38,000
That's a harder thing for the game to respond to.

336
00:14:38,600 --> 00:14:42,000
But if we were really trying to be flexible, that's what we would do.

337
00:14:42,500 --> 00:14:44,200
I'm going to not do that yet.

338
00:14:44,300 --> 00:14:46,300
I'm going to put it to do here because it's harder for you to

339
00:14:46,300 --> 00:14:50,000
understand, given the stuff that we've said so far is already a lot of

340
00:14:50,000 --> 00:14:51,500
stuff in there that we kind of have to cover.

341
00:14:51,800 --> 00:14:55,100
It's hard to understand at the moment and it is harder to implement.

342
00:14:55,100 --> 00:14:58,000
So we'll start with the simple case, where we're always asking the

343
00:14:58,000 --> 00:14:59,700
game to just give us continuous sample.

344
00:15:00,000 --> 00:15:02,300
We say we want X number of samples.

345
00:15:02,400 --> 00:15:03,700
We're just going to plop those down.

346
00:15:03,700 --> 00:15:06,500
And then the next time we ask for X number of samples, we plop them

347
00:15:06,500 --> 00:15:07,300
down right at the end.

348
00:15:07,300 --> 00:15:09,900
They just kind of chain onto each other and we'll just assume that

349
00:15:09,900 --> 00:15:11,300
that's the way it goes later.

350
00:15:11,300 --> 00:15:13,600
We'll kind of look at a more advanced way of doing it, that can be,

351
00:15:13,600 --> 00:15:15,300
because I could do better error recovery.

352
00:15:16,500 --> 00:15:26,100
So, allow sample offsets here for more, robust platform options.

353
00:15:26,400 --> 00:15:29,200
So, so we're going to call the game the games.

354
00:15:30,000 --> 00:15:33,000
Sound output thing here, we're gonna pass it.

355
00:15:33,000 --> 00:15:36,000
A sound buffer, and the number of samples that it should output.

356
00:15:36,000 --> 00:15:36,500
There.

357
00:15:36,500 --> 00:15:37,500
It will do that.

358
00:15:37,500 --> 00:15:40,700
And for now, we're basically going to make that just be our sine wave.

359
00:15:40,800 --> 00:15:41,200
Right.

360
00:15:41,300 --> 00:15:42,400
And our sine wave.

361
00:15:42,500 --> 00:15:45,500
Again, was basically a something we pulled out here.

362
00:15:45,600 --> 00:15:48,300
It was this win32 fill sound buffer, and it was pretty

363
00:15:48,300 --> 00:15:48,900
straightforward.

364
00:15:48,900 --> 00:15:51,300
It basically looked like that, right?

365
00:15:51,300 --> 00:15:52,100
That's what it looked like.

366
00:15:54,200 --> 00:15:57,300
So this is roughly, what we're going to have for that code and I'll

367
00:15:57,300 --> 00:15:58,500
tune that up in a second here.

368
00:15:58,800 --> 00:15:59,900
So that's one thing we have.

369
00:16:00,200 --> 00:16:04,100
Got to kind of keep it, keep that out of the way of the of my of my

370
00:16:04,100 --> 00:16:07,400
talking head control L actually will do that for me.

371
00:16:07,700 --> 00:16:10,300
So that's what I'm going to do for the game for outputting sound.

372
00:16:10,300 --> 00:16:12,900
And then the other thing that I want to be able to do here is I want

373
00:16:12,900 --> 00:16:15,800
to be able to do the render in the exact same way.

374
00:16:15,900 --> 00:16:18,700
But basically what has to happen, there is we're going to have to

375
00:16:18,700 --> 00:16:19,700
start outputting.

376
00:16:19,700 --> 00:16:22,100
We're gonna have to start keeping State, and we're going to have to

377
00:16:22,100 --> 00:16:25,400
start using a timer to really do anything more complicated here,

378
00:16:25,400 --> 00:16:25,600
right?

379
00:16:25,600 --> 00:16:28,900
Because you can see, we're pretty much platform-independent with the

380
00:16:28,900 --> 00:16:29,800
rendering but

381
00:16:29,900 --> 00:16:32,000
We're passing in this blue offset green offset.

382
00:16:32,000 --> 00:16:34,800
So that's something that we're going to have to do once we actually

383
00:16:34,800 --> 00:16:35,000
get it.

384
00:16:35,000 --> 00:16:37,200
So we'll talk about that in one second.

385
00:16:37,200 --> 00:16:38,700
Let's just focus on the sound thing here.

386
00:16:38,800 --> 00:16:42,300
So if I want my game sound output thing to basically, you know, I

387
00:16:42,300 --> 00:16:43,800
don't like the order of those parameters.

388
00:16:43,800 --> 00:16:47,100
I tend to like things to look a little bit more like they have the

389
00:16:47,100 --> 00:16:50,100
object first for some reason, like they have the, this truck that

390
00:16:50,100 --> 00:16:51,700
holds the things if that makes sense.

391
00:16:51,900 --> 00:16:56,900
So, this is going to be a game sound output buffer, and I'm not

392
00:16:56,900 --> 00:16:58,400
thinking too hard about these names.

393
00:16:59,200 --> 00:16:59,800
Well, I'm having

394
00:17:00,000 --> 00:17:01,000
Typing troubles today.

395
00:17:01,500 --> 00:17:01,900
There we go.

396
00:17:02,000 --> 00:17:02,700
Sound buffer.

397
00:17:03,000 --> 00:17:05,400
And then I'm going to say sample count output here.

398
00:17:05,500 --> 00:17:07,500
Then we're going to go ahead and actually output those now.

399
00:17:07,500 --> 00:17:10,700
The sound buffer is basically just going to be something that gives us

400
00:17:10,700 --> 00:17:11,900
a pointer to the sound for now.

401
00:17:11,900 --> 00:17:15,300
There's not going to be anything more fascinating about it than that.

402
00:17:15,300 --> 00:17:18,700
And so really, what we should be able to do is essentially just use

403
00:17:18,700 --> 00:17:22,900
this code, exactly, as it is, so we should be able to use this code

404
00:17:22,900 --> 00:17:23,700
right here.

405
00:17:23,900 --> 00:17:26,599
We should be able to say which sample index we are on.

406
00:17:26,700 --> 00:17:29,800
We should be able to go up to the sample count entirely.

407
00:17:29,900 --> 00:17:32,400
Lee and then we should be able to.

408
00:17:32,400 --> 00:17:33,400
Let's see here.

409
00:17:34,300 --> 00:17:35,800
Is there anything else we want to do?

410
00:17:35,800 --> 00:17:36,300
Here?

411
00:17:37,000 --> 00:17:40,900
We can produce our sine wave exactly as we are.

412
00:17:40,900 --> 00:17:46,100
So we're going to need some where we are going to need to have our T

413
00:17:46,100 --> 00:17:46,600
sine.

414
00:17:46,700 --> 00:17:51,500
So for now, we'll just use, our will pass that in and save that.

415
00:17:51,600 --> 00:17:53,400
All right, there we go.

416
00:17:54,100 --> 00:17:56,300
And oh, you know what, the other thing we could do for it too.

417
00:17:56,300 --> 00:17:57,800
And maybe this is easier for now.

418
00:17:58,400 --> 00:17:59,800
Let's let's make this a local.

419
00:18:00,000 --> 00:18:00,400
St.

420
00:18:00,400 --> 00:18:03,300
Sign because we're going to move it out pretty much right away.

421
00:18:03,400 --> 00:18:06,700
So there's our T sine so that way we can just use it directly in here.

422
00:18:06,900 --> 00:18:11,100
When we have put the tea sign, we will go ahead and put our tone

423
00:18:11,100 --> 00:18:12,000
volume in here as well.

424
00:18:12,000 --> 00:18:14,100
Because these are all things that we are going to abstract out of the

425
00:18:14,100 --> 00:18:16,100
platform layer very shortly.

426
00:18:16,100 --> 00:18:17,700
So, we got our tone volume in here.

427
00:18:17,700 --> 00:18:21,900
That doesn't actually have to be persisted because that can just be

428
00:18:21,900 --> 00:18:23,000
essentially constant.

429
00:18:23,000 --> 00:18:23,700
There it is.

430
00:18:24,200 --> 00:18:25,000
So that's good.

431
00:18:25,000 --> 00:18:29,000
We've got our tone volume and then we store our sample out.

432
00:18:29,000 --> 00:18:29,800
So our sample out,

433
00:18:30,000 --> 00:18:30,100
Out.

434
00:18:30,100 --> 00:18:34,600
In this case is an in 16 and that's just going to be coming from the

435
00:18:34,600 --> 00:18:35,400
sound buffer.

436
00:18:35,400 --> 00:18:39,600
Basically, the sound buffer is going to store is going to sort of give

437
00:18:39,600 --> 00:18:41,400
us the pointer to where we're going to Output it.

438
00:18:41,400 --> 00:18:45,100
We're assuming the platform layer told us where we should dump our

439
00:18:45,100 --> 00:18:46,400
samples if that makes sense.

440
00:18:46,600 --> 00:18:51,400
So we do that, then we increment and I think running sample, index is

441
00:18:51,400 --> 00:18:53,500
now Irrelevant for us in this code.

442
00:18:53,500 --> 00:18:53,800
Yes.

443
00:18:54,100 --> 00:18:57,900
So basically all I did here was the basic minimal transformation

444
00:18:58,000 --> 00:18:59,000
essentially, nothing.

445
00:18:59,100 --> 00:18:59,800
All I did was

446
00:19:00,100 --> 00:19:02,800
I'm gonna get a pointer to a sound buffer, right?

447
00:19:03,000 --> 00:19:06,800
I am going to take a number of samples to Output, right?

448
00:19:07,000 --> 00:19:11,300
And then I am going to just dump the samples into whatever is in the

449
00:19:11,300 --> 00:19:12,000
sound buffer.

450
00:19:12,000 --> 00:19:12,500
That's it.

451
00:19:12,500 --> 00:19:17,800
So it's much less complicated than the old version because we're sort

452
00:19:17,800 --> 00:19:20,800
of simplifying things for the game and I'll talk about why I decided

453
00:19:20,800 --> 00:19:21,700
to do it that way.

454
00:19:22,200 --> 00:19:23,200
So let's see here.

455
00:19:23,200 --> 00:19:26,000
We've got samples for 2nd overtone hurts.

456
00:19:26,500 --> 00:19:28,500
So this is just, we're not even going to

457
00:19:30,100 --> 00:19:30,700
Let's see.

458
00:19:30,900 --> 00:19:34,100
So this is a good situation here actually and this kind of, this

459
00:19:34,100 --> 00:19:36,400
actually underscores exactly what I was talking about.

460
00:19:36,500 --> 00:19:37,300
So you'll notice here.

461
00:19:37,300 --> 00:19:38,100
I got to a point.

462
00:19:38,100 --> 00:19:40,800
I hadn't really been thinking about it much, but we want to know the

463
00:19:40,800 --> 00:19:44,200
samples or per second here in order to calculate this, this tone hurts

464
00:19:44,200 --> 00:19:44,400
thing.

465
00:19:44,400 --> 00:19:46,300
So, the tone Hearts, we know what we wanted.

466
00:19:46,400 --> 00:19:50,200
We know we wanted the tone hurts to be 256, but we don't know the

467
00:19:50,200 --> 00:19:52,400
samples per second here in the platform-specific code.

468
00:19:52,400 --> 00:19:53,900
A platform nonspecific code.

469
00:19:54,100 --> 00:19:57,200
So that tells me right away because I want to know the wave period.

470
00:19:57,200 --> 00:19:57,700
Right?

471
00:19:58,900 --> 00:19:59,800
What is the wave period?

472
00:20:00,200 --> 00:20:00,800
Let's see here.

473
00:20:00,800 --> 00:20:05,500
Wave period yet Saint in still, so I want to know that value so that

474
00:20:05,500 --> 00:20:10,500
tells me that basically just a huge clue that we want to store that

475
00:20:10,500 --> 00:20:13,500
value in the sound buffer because people who are going to be using the

476
00:20:13,500 --> 00:20:16,600
sound buffer from the platform are going to want to know how many

477
00:20:16,600 --> 00:20:17,800
samples per second or playing.

478
00:20:17,800 --> 00:20:21,700
So if they have things that are tone based they know how many output

479
00:20:21,700 --> 00:20:24,400
so that was literally I mean, that's exactly what I'm talking about.

480
00:20:24,400 --> 00:20:25,500
When I say things like, right?

481
00:20:25,500 --> 00:20:26,200
The usage code.

482
00:20:26,200 --> 00:20:28,900
First that just tells me what should be in that.

483
00:20:28,900 --> 00:20:29,500
I just know.

484
00:20:29,500 --> 00:20:29,800
Now I

485
00:20:29,900 --> 00:20:30,900
Didn't have to guess.

486
00:20:30,900 --> 00:20:32,000
I didn't have to presuppose.

487
00:20:32,000 --> 00:20:33,200
I didn't have to think hard about it.

488
00:20:33,200 --> 00:20:34,800
It just popped right on out.

489
00:20:37,000 --> 00:20:39,600
Okay, hopefully that makes some sense.

490
00:20:40,200 --> 00:20:42,300
I'm going to go ahead and start compiling here so we can start

491
00:20:42,300 --> 00:20:44,300
knocking down our errors.

492
00:20:44,800 --> 00:20:47,200
So I have this game sound output buffer.

493
00:20:47,200 --> 00:20:48,500
I've got to Define it.

494
00:20:48,600 --> 00:20:52,300
Obviously, I've got to come in here and actually make one of these.

495
00:20:54,300 --> 00:20:57,700
And so, really, all this is is the sample out, right?

496
00:20:57,700 --> 00:20:59,500
This is basically the, the

497
00:21:00,000 --> 00:21:00,900
Sample buffer.

498
00:21:00,900 --> 00:21:03,000
I don't know, we want to call this, they will just call it samples.

499
00:21:03,000 --> 00:21:05,000
That seems like a totally reasonable thing to call it.

500
00:21:05,000 --> 00:21:06,000
Because that is what it is.

501
00:21:06,000 --> 00:21:06,700
It's the samples.

502
00:21:07,100 --> 00:21:11,100
And then we know that we have essentially a well, you know, what we

503
00:21:11,100 --> 00:21:13,000
could do to I like this.

504
00:21:13,400 --> 00:21:14,800
I think I like this as well.

505
00:21:16,400 --> 00:21:17,600
Yeah, I like this as well.

506
00:21:17,600 --> 00:21:19,300
I think I might just roll this in here.

507
00:21:19,500 --> 00:21:19,800
Right?

508
00:21:19,800 --> 00:21:22,400
I might just say that there's a sample counting here and the sample

509
00:21:22,400 --> 00:21:25,700
count says, how many output then there's the samples per second,

510
00:21:25,700 --> 00:21:26,300
right?

511
00:21:26,600 --> 00:21:28,800
And that tells you about the buffer itself.

512
00:21:28,900 --> 00:21:32,600
And that to me actually looks even better because then you're just

513
00:21:32,600 --> 00:21:32,900
passing.

514
00:21:32,900 --> 00:21:34,200
One thing, you're saying here's a buffer.

515
00:21:34,200 --> 00:21:35,200
Please, fill it?

516
00:21:35,400 --> 00:21:39,300
You don't have to correspond that in its baked right in there, right?

517
00:21:39,300 --> 00:21:40,000
Like that.

518
00:21:40,100 --> 00:21:41,400
So that's pretty handy.

519
00:21:41,600 --> 00:21:43,800
And it eliminates one whole thing.

520
00:21:43,800 --> 00:21:45,200
That might happen down here.

521
00:21:45,700 --> 00:21:46,000
Let's

522
00:21:46,200 --> 00:21:49,400
Had to do that and that looks pretty good.

523
00:21:49,600 --> 00:21:51,800
Yeah, I think that's pretty good.

524
00:21:51,800 --> 00:21:52,100
Okay.

525
00:21:52,100 --> 00:21:55,800
So basically all we have to really do is pass that and that's it.

526
00:21:55,800 --> 00:21:58,100
And then we're going to have to talk about this T sign here and that's

527
00:21:58,100 --> 00:21:58,300
good.

528
00:21:58,300 --> 00:22:00,900
Because that's exactly what I did want to talk about immediately

529
00:22:00,900 --> 00:22:01,700
thereafter.

530
00:22:01,800 --> 00:22:02,100
Okay.

531
00:22:02,100 --> 00:22:03,600
So we're going to have to pass this.

532
00:22:03,700 --> 00:22:07,600
We pass our gret, our Graphics buffer here, but let's pass our sound

533
00:22:07,600 --> 00:22:08,300
buffer as well.

534
00:22:08,500 --> 00:22:09,600
So let's get that in there.

535
00:22:09,600 --> 00:22:12,300
So now it's going into the game.

536
00:22:12,800 --> 00:22:15,900
So we'll pass that and that way, it can pass and buffer on.

537
00:22:16,100 --> 00:22:17,700
To the sound filling call.

538
00:22:17,700 --> 00:22:19,300
Alright, so let's take a look.

539
00:22:19,300 --> 00:22:19,700
Here.

540
00:22:20,600 --> 00:22:21,900
I got missing semicolon.

541
00:22:21,900 --> 00:22:23,700
That's always good, sign.

542
00:22:23,700 --> 00:22:26,000
If so, which right, we're still in test code land.

543
00:22:26,300 --> 00:22:28,400
So I want to actually I think I've said this before.

544
00:22:28,500 --> 00:22:30,600
I want to actually Implement sign ourselves.

545
00:22:30,900 --> 00:22:32,100
I've already got a to do in there.

546
00:22:32,100 --> 00:22:34,800
So that should be fine for the test code, but I would like to go in

547
00:22:34,800 --> 00:22:38,100
there and just we'd like to look and make sure that we're doing a good

548
00:22:38,100 --> 00:22:40,300
Cindy, sign evaluation or something in there.

549
00:22:40,300 --> 00:22:42,800
I don't want to, I don't want sign to be sneaking around, doing all

550
00:22:42,800 --> 00:22:44,000
kinds of things behind my back.

551
00:22:44,000 --> 00:22:46,000
You never know what it might be doing.

552
00:22:46,200 --> 00:22:49,200
Behind your back, the compiler might do anything if you're not

553
00:22:49,200 --> 00:22:49,600
careful.

554
00:22:49,900 --> 00:22:52,200
Okay, so we've got a sound buffer now.

555
00:22:54,600 --> 00:22:58,700
Okay, so our sound output, buffer has to get filled.

556
00:22:58,900 --> 00:23:04,100
And now, you'll notice that what I've done is, I've implicitly made a

557
00:23:04,100 --> 00:23:07,100
decision here, and this may not necessarily turn out to be a good one

558
00:23:07,100 --> 00:23:07,800
or not.

559
00:23:08,000 --> 00:23:12,300
But it's the decision that I wanted to make at the outset, which is

560
00:23:12,300 --> 00:23:15,900
basically that sound is just not very big.

561
00:23:16,000 --> 00:23:18,400
Okay, that's something that you have to understand.

562
00:23:18,400 --> 00:23:21,100
Basically, if you take a look, let's say you are drawing.

563
00:23:21,100 --> 00:23:23,900
Like I said, at 60 frames a second, 60 frames a

564
00:23:24,300 --> 00:23:25,700
Well, we know we've got 40.

565
00:23:25,700 --> 00:23:26,100
Oops.

566
00:23:26,300 --> 00:23:30,300
Well, if your type right, we know we've got 48,000 samples per second

567
00:23:30,300 --> 00:23:31,000
that we're playing.

568
00:23:31,300 --> 00:23:34,100
We know that we divide that by 60 frames.

569
00:23:34,100 --> 00:23:35,300
That means each framed.

570
00:23:35,300 --> 00:23:38,300
We are outputting 800 samples.

571
00:23:38,400 --> 00:23:42,000
Okay, we know that each one of them is 2, bytes long, that's 1600.

572
00:23:42,000 --> 00:23:44,100
We know that there are two of them for stereo.

573
00:23:44,100 --> 00:23:47,500
That is 3200 B, that we are writing.

574
00:23:48,100 --> 00:23:49,400
3200.

575
00:23:49,400 --> 00:23:54,100
B is like the most insignificant thing modern.

576
00:23:54,200 --> 00:23:55,600
Processor has ever seen.

577
00:23:56,000 --> 00:23:59,800
We are talking about processors that can move GB of data a second.

578
00:24:00,000 --> 00:24:01,000
So 3200.

579
00:24:01,000 --> 00:24:02,900
B is literally irrelevant.

580
00:24:02,900 --> 00:24:07,500
So what I have elected to do here is suffer an extra buffer copy for

581
00:24:07,500 --> 00:24:11,900
those through got 3,200 bytes per frame, that will be going out.

582
00:24:11,900 --> 00:24:12,500
The wire.

583
00:24:13,000 --> 00:24:16,300
Basically, I'm going to do an extra buffer copy there because I would

584
00:24:16,300 --> 00:24:21,000
rather prevent present the game with a cleaner interface of just

585
00:24:21,000 --> 00:24:25,000
writing into a single buffer rather than forcing it to inherit the

586
00:24:25,000 --> 00:24:29,200
direct sound duel, right problem with the ring buffer.

587
00:24:29,400 --> 00:24:29,900
Because

588
00:24:30,000 --> 00:24:30,700
A complicated thing.

589
00:24:30,700 --> 00:24:31,700
It's easier to get wrong.

590
00:24:31,700 --> 00:24:35,200
And I don't want to pass it on to the game especially because there

591
00:24:35,200 --> 00:24:38,600
are other platforms that don't have that janky ring, buffer nonsense

592
00:24:38,600 --> 00:24:39,200
going on.

593
00:24:39,600 --> 00:24:43,200
And in those cases it this will be just as fast because it can write

594
00:24:43,200 --> 00:24:44,500
directly into the location.

595
00:24:44,500 --> 00:24:45,300
It's supposed to go.

596
00:24:45,600 --> 00:24:50,000
And so basically really I'm just saying, I don't think this is going

597
00:24:50,000 --> 00:24:51,100
to be a performance problem.

598
00:24:51,100 --> 00:24:53,900
So I don't want to pass this on to the application.

599
00:24:54,100 --> 00:24:57,100
I just don't think it's going to matter and that's always a judgment

600
00:24:57,100 --> 00:24:57,400
call.

601
00:24:57,400 --> 00:24:59,900
There are plenty of times where you have an opportunity to do.

602
00:25:00,000 --> 00:25:03,300
Nothing more efficiently, but you incur a bit of complexity and it

603
00:25:03,300 --> 00:25:06,100
really is a judgment call which one of those you take.

604
00:25:06,100 --> 00:25:08,800
And which one of those you don't in most cases.

605
00:25:08,800 --> 00:25:12,500
I tend to prefer to do the cleaner thing, if I can, if I know that

606
00:25:12,500 --> 00:25:16,000
it's not going to be too expensive and then later if it turns out to

607
00:25:16,000 --> 00:25:19,100
be a performance problem when we are actually measuring it, then I

608
00:25:19,100 --> 00:25:22,400
will go and introduce the added complexity at that time.

609
00:25:23,000 --> 00:25:26,300
That usually is a smarter way to go especially because it means that

610
00:25:26,300 --> 00:25:29,100
you already have the simpler case working correctly.

611
00:25:29,200 --> 00:25:29,800
And so when you

612
00:25:29,900 --> 00:25:32,500
Implement the more complex case you're just a bugging.

613
00:25:32,500 --> 00:25:33,900
It versus the simple case.

614
00:25:33,900 --> 00:25:36,700
Instead of writing, it completely fresh the first time.

615
00:25:36,700 --> 00:25:38,600
So it tends to actually be a good way to develop.

616
00:25:38,600 --> 00:25:41,800
Even if you weren't doing the methodology that I was talking about,

617
00:25:41,800 --> 00:25:45,100
which is see, make sure it's actually performance bottleneck before

618
00:25:45,100 --> 00:25:46,000
you incur the cost.

619
00:25:48,200 --> 00:25:48,700
Okay.

620
00:25:50,600 --> 00:25:52,000
So we've got our sound buffer here.

621
00:25:52,000 --> 00:25:58,400
And what that basically means is that if we take a look at to me, if

622
00:25:58,400 --> 00:26:00,600
we take a look at what's going to happen down here.

623
00:26:00,900 --> 00:26:04,800
We basically need to first, get some memory that we're going to store

624
00:26:04,800 --> 00:26:05,700
the this sound in.

625
00:26:05,700 --> 00:26:08,400
Now, we don't even actually have to allocate any memory because we're

626
00:26:08,400 --> 00:26:11,600
only actually going to be doing whatever our frame rate is and our

627
00:26:11,600 --> 00:26:12,700
frame rate at the moment.

628
00:26:12,700 --> 00:26:16,300
I think I'm leaning towards may be doubling that number instead of

629
00:26:16,300 --> 00:26:17,600
eight hundred samples.

630
00:26:17,600 --> 00:26:20,300
I'm going to, I'm not say that maybe we'll try to run at

631
00:26:21,100 --> 00:26:25,400
Like, you know, something more like more like 30 frames a second

632
00:26:25,400 --> 00:26:27,400
because since we're going to be doing software rendering, I think,

633
00:26:27,400 --> 00:26:31,100
trying to hit 60 frames a second is not going to be realistic in a lot

634
00:26:31,100 --> 00:26:31,600
of cases.

635
00:26:31,600 --> 00:26:34,200
So, 30 frames a second, might be more we target.

636
00:26:34,200 --> 00:26:37,600
So basically what I'm going to do is going to ask the game for a

637
00:26:37,600 --> 00:26:43,500
buffer that is going to be 1/30 of a second worth of audio each time.

638
00:26:43,600 --> 00:26:44,400
I ask it.

639
00:26:44,400 --> 00:26:47,100
So basically, I'm going to go in here and say that the sound buffer,

640
00:26:47,200 --> 00:26:47,700
right?

641
00:26:49,300 --> 00:26:50,800
And I'm going to look, take a look groups.

642
00:26:50,900 --> 00:26:51,700
That's not good.

643
00:26:51,900 --> 00:26:53,400
I got to take a look at the actual stuff.

644
00:26:53,400 --> 00:26:54,200
I got to put in here.

645
00:26:54,600 --> 00:26:57,800
So the samples per second that we've already got.

646
00:26:58,300 --> 00:26:59,100
That's fine.

647
00:26:59,400 --> 00:26:59,500
The

648
00:27:00,000 --> 00:27:03,800
For a sample count, that's going to be the samples per second divided

649
00:27:03,800 --> 00:27:04,400
by 34.

650
00:27:04,400 --> 00:27:07,800
Now again, this is all just sort of layering the code in.

651
00:27:07,800 --> 00:27:10,900
This is not supposed to be final shipping code or anything like that.

652
00:27:10,900 --> 00:27:14,100
I'm just showing you how we do these transformations in steps.

653
00:27:14,500 --> 00:27:17,400
So I'm going to go up here and say, okay, we have the samples per

654
00:27:17,400 --> 00:27:18,200
second, as well.

655
00:27:18,200 --> 00:27:20,200
It was right here in our sound output routine.

656
00:27:20,800 --> 00:27:24,200
So I'm going to go ahead and put that in here.

657
00:27:24,200 --> 00:27:24,800
There we go.

658
00:27:25,100 --> 00:27:26,300
And then the samples.

659
00:27:26,400 --> 00:27:28,500
I'm just going to put these right on the stack.

660
00:27:28,700 --> 00:27:29,800
I don't really need to allocate any.

661
00:27:30,000 --> 00:27:30,600
Memory for them.

662
00:27:30,600 --> 00:27:32,100
There's no sense in doing that.

663
00:27:32,200 --> 00:27:36,700
So, basically, I know that I just want this many of those, which is,

664
00:27:36,700 --> 00:27:38,400
which is pretty trivial for me to do.

665
00:27:38,600 --> 00:27:42,200
I can basically say that I, you know, I just got in 16, sample, count

666
00:27:42,600 --> 00:27:44,100
and soups samples.

667
00:27:44,500 --> 00:27:49,400
And I will, actually just say that I have some of them and will

668
00:27:49,400 --> 00:27:53,300
basically say, I don't know for now, we'll just say that we've got

669
00:27:53,800 --> 00:27:55,500
this many of those samples.

670
00:27:55,900 --> 00:27:59,100
So basically that is really all I wanted to do.

671
00:27:59,200 --> 00:27:59,900
It's pretty straightforward.

672
00:28:00,000 --> 00:28:00,500
Word.

673
00:28:00,700 --> 00:28:03,800
And then this is going to get cleaned up in a second here to use

674
00:28:03,800 --> 00:28:04,100
something.

675
00:28:04,100 --> 00:28:06,400
That's a little more flexible because the problem with doing it right

676
00:28:06,400 --> 00:28:09,600
on the stack, is that unless we use a function I have not talked about

677
00:28:09,600 --> 00:28:10,000
yet.

678
00:28:10,000 --> 00:28:14,000
You can't actually make anything that's on the stack, be parameterised

679
00:28:14,000 --> 00:28:14,700
on something.

680
00:28:15,000 --> 00:28:16,300
That isn't a constant.

681
00:28:16,400 --> 00:28:20,100
Now I could, of course, actually introduce a constant for it, but I

682
00:28:20,100 --> 00:28:22,700
don't see any reason to because I want to talk about how you do that

683
00:28:23,100 --> 00:28:23,800
also separately.

684
00:28:23,800 --> 00:28:24,500
All right.

685
00:28:24,500 --> 00:28:27,500
So if we do that, when we call game update and render, I can pass the

686
00:28:27,500 --> 00:28:28,000
sound buffer.

687
00:28:28,000 --> 00:28:29,800
Now, into this.

688
00:28:29,900 --> 00:28:30,900
Which I will do.

689
00:28:31,000 --> 00:28:31,600
There we go.

690
00:28:32,200 --> 00:28:34,700
And in theory, this will still run even though we've kind of just

691
00:28:34,700 --> 00:28:35,800
doing some janky stuff.

692
00:28:36,000 --> 00:28:41,900
Maybe not not, maybe not ladies and gentlemen, as I say that I'm

693
00:28:41,900 --> 00:28:42,800
totally lying.

694
00:28:43,000 --> 00:28:44,900
I did do the right number here, is that I not.

695
00:28:45,000 --> 00:28:47,400
This is, this is literally just for janky as code.

696
00:28:47,500 --> 00:28:51,300
I mean, yeah, I say it often times, but do not, you know, this is

697
00:28:51,300 --> 00:28:53,400
never something that should be left in the shipping program.

698
00:28:53,400 --> 00:28:57,000
I'm literally just trying to show you how to, how to push the platform

699
00:28:57,000 --> 00:28:58,300
layer, kind of up there.

700
00:28:58,300 --> 00:28:59,800
Just want to make sure I didn't type something.

701
00:29:00,000 --> 00:29:00,500
There we go.

702
00:29:00,600 --> 00:29:02,100
Okay, put the samples in there.

703
00:29:02,200 --> 00:29:03,100
That's good.

704
00:29:03,200 --> 00:29:04,700
I called the thing with the sound buffer.

705
00:29:04,700 --> 00:29:05,400
That's good.

706
00:29:05,400 --> 00:29:08,300
I don't remember what we wrote so far in here.

707
00:29:08,400 --> 00:29:11,700
Game output, sound got the sound buffer samples per second, the tone

708
00:29:11,700 --> 00:29:11,900
her.

709
00:29:11,900 --> 00:29:15,000
As we look at the samples there, the sample out, it's going to the

710
00:29:15,000 --> 00:29:15,600
sample count.

711
00:29:15,600 --> 00:29:18,000
Oh, this is right.

712
00:29:18,000 --> 00:29:22,700
This is right value in their sample index goes through its at putting

713
00:29:22,700 --> 00:29:23,300
two of them.

714
00:29:23,300 --> 00:29:23,600
Yes.

715
00:29:23,600 --> 00:29:24,600
Fantastic.

716
00:29:24,600 --> 00:29:25,500
This is just dumb.

717
00:29:26,300 --> 00:29:29,000
We are stereo, of course, so we need that.

718
00:29:29,000 --> 00:29:29,500
There we go.

719
00:29:29,900 --> 00:29:30,200
Okay.

720
00:29:31,800 --> 00:29:32,400
Good to go.

721
00:29:33,600 --> 00:29:36,400
So, one thing that's kind of nice about that and I'll talk about that

722
00:29:36,400 --> 00:29:36,800
in a second.

723
00:29:36,800 --> 00:29:40,100
As you notice when I forgot to multiply that, you'll notice that the

724
00:29:40,100 --> 00:29:42,200
debug Library caught it for me.

725
00:29:42,500 --> 00:29:46,600
So basically, what happened here, is they put some checking code to

726
00:29:46,600 --> 00:29:49,700
see if you over rote memory somewhere, right?

727
00:29:50,300 --> 00:29:51,600
And that's pretty helpful.

728
00:29:52,000 --> 00:29:55,900
It's it doesn't happen that frequently, especially if you're not

729
00:29:55,900 --> 00:29:58,400
trying to stream at the same time as your programming and you're

730
00:29:58,400 --> 00:29:59,800
paying attention, but it

731
00:30:00,000 --> 00:30:00,600
What happened?

732
00:30:00,800 --> 00:30:03,300
And so one of the things that's nice is, if you do have things that

733
00:30:03,300 --> 00:30:06,500
catch buffer overruns, it's something that helps take like a lot of

734
00:30:06,500 --> 00:30:10,000
people are afraid of pointers and afraid of languages that have them

735
00:30:10,000 --> 00:30:14,100
specifically because you can do stuff like this and you are afraid of

736
00:30:14,100 --> 00:30:14,600
shipping.

737
00:30:15,000 --> 00:30:17,100
Things that have this, these sorts of bugs in them and that's

738
00:30:17,100 --> 00:30:17,800
legitimate.

739
00:30:18,300 --> 00:30:21,400
But there's a lot of ways you can actually minimize those things and

740
00:30:21,400 --> 00:30:22,900
we haven't gotten to any of that yet.

741
00:30:22,900 --> 00:30:25,400
But this is already one that's even just built into msv.

742
00:30:25,400 --> 00:30:28,500
See, basically, I didn't have to write that, right.

743
00:30:28,500 --> 00:30:29,800
It just, it just caught that.

744
00:30:30,000 --> 00:30:31,600
For me, I didn't do that work.

745
00:30:31,600 --> 00:30:33,400
It just caught that buffer overrun for me.

746
00:30:33,900 --> 00:30:36,700
And so then when I fix it, it doesn't happen anymore, right?

747
00:30:36,700 --> 00:30:37,600
And that's pretty cool.

748
00:30:37,900 --> 00:30:40,100
We're going to be looking at ways of doing things that are a little

749
00:30:40,100 --> 00:30:43,200
more advanced than that to catch things that are possibly a little

750
00:30:43,200 --> 00:30:44,200
harder to catch.

751
00:30:44,400 --> 00:30:46,500
But for now, it's just worth mentioning, that that's kind of a nice

752
00:30:46,500 --> 00:30:49,400
thing for people who are going to be a little more scared of pointers.

753
00:30:49,400 --> 00:30:50,300
I'm never scared of them.

754
00:30:50,300 --> 00:30:52,500
I just like, throw them around and then I'm like, okay, when it's time

755
00:30:52,500 --> 00:30:53,700
to start tightening things down.

756
00:30:54,100 --> 00:30:56,800
I bounced check my things and I just go through a set of things that

757
00:30:56,800 --> 00:30:58,800
kind of, rigorously tightens things up.

758
00:30:58,800 --> 00:30:59,900
So I don't really worry.

759
00:31:00,000 --> 00:31:00,200
Out them.

760
00:31:00,200 --> 00:31:01,700
It really doesn't end up being a problem.

761
00:31:01,700 --> 00:31:04,100
But for people who are scared about things like that.

762
00:31:04,200 --> 00:31:06,400
It's worth noting that there are a lot of tools that help you.

763
00:31:06,500 --> 00:31:07,300
And that was one of them.

764
00:31:07,300 --> 00:31:08,900
That just that just helped us.

765
00:31:09,700 --> 00:31:10,200
Okay.

766
00:31:10,500 --> 00:31:14,200
So right now, we're still getting a sine wave from this, from the

767
00:31:14,200 --> 00:31:16,200
actual platform layer, right?

768
00:31:16,200 --> 00:31:19,800
We've, we've given us a sound buffer to the game.

769
00:31:19,800 --> 00:31:20,300
Right?

770
00:31:20,300 --> 00:31:23,900
And the game is, is doing the sound, you know, it's generating sound

771
00:31:23,900 --> 00:31:29,300
for the sound buffer, certainly, but we have a problem and that

772
00:31:29,300 --> 00:31:29,800
problem.

773
00:31:29,900 --> 00:31:33,700
It is that basically we are not using any of the stuff that comes

774
00:31:33,700 --> 00:31:34,000
back.

775
00:31:34,000 --> 00:31:36,700
We are still generating, the sound cook thing.

776
00:31:36,800 --> 00:31:39,600
All the sound code ourselves ourselves in the platform layer with

777
00:31:39,600 --> 00:31:41,000
win32, fill sound buffer.

778
00:31:41,200 --> 00:31:45,100
So what we'd rather do now is we'd rather use that win32, fill sound

779
00:31:45,100 --> 00:31:48,900
buffer code right to actually grab instead of the sine wave.

780
00:31:48,900 --> 00:31:50,500
Grab out of our buffer.

781
00:31:50,900 --> 00:31:51,800
So I can do that.

782
00:31:51,800 --> 00:31:52,800
Pretty simply write.

783
00:31:52,800 --> 00:31:53,800
I can just pass the sound.

784
00:31:53,800 --> 00:31:58,400
Buffer itself over to this thing right into win32, fill sound buffer.

785
00:31:58,600 --> 00:31:59,800
And now, instead of this.

786
00:32:00,000 --> 00:32:02,300
Her actually Computing a sign, right?

787
00:32:02,300 --> 00:32:07,000
It can instead just read from the buffer that we already had free

788
00:32:07,000 --> 00:32:09,800
prepared for it in the platform nonspecific codes.

789
00:32:09,800 --> 00:32:11,700
So I can say game sound output buffer.

790
00:32:12,800 --> 00:32:15,200
It's basically Source samples.

791
00:32:15,200 --> 00:32:18,000
Maybe, let's just call it source that Source buffer.

792
00:32:18,100 --> 00:32:18,400
I don't know.

793
00:32:18,400 --> 00:32:19,800
What have you guys want to call it, call it.

794
00:32:19,800 --> 00:32:21,600
Whatever you like anything.

795
00:32:21,600 --> 00:32:22,200
You like.

796
00:32:22,200 --> 00:32:23,200
It's fine with me.

797
00:32:23,300 --> 00:32:23,700
Okay.

798
00:32:23,800 --> 00:32:24,900
So let's say we have the source buffer.

799
00:32:24,900 --> 00:32:27,600
They're basically what we're going to do is we're just going to pull

800
00:32:27,600 --> 00:32:29,800
from that sort of buffer instead of the sign.

801
00:32:29,900 --> 00:32:30,100
Wave.

802
00:32:30,100 --> 00:32:31,300
So we got an M16?

803
00:32:31,600 --> 00:32:32,600
We've got sample.

804
00:32:33,400 --> 00:32:37,500
We got - we'll call it Source sample, and maybe we'll call this desk

805
00:32:37,500 --> 00:32:38,100
sample.

806
00:32:38,200 --> 00:32:38,700
Right?

807
00:32:39,000 --> 00:32:42,500
We'll just change the denominator here and that's going to be the same

808
00:32:42,600 --> 00:32:43,900
Source buffer samples.

809
00:32:43,900 --> 00:32:44,800
It's going to pull from.

810
00:32:45,100 --> 00:32:46,200
So in here.

811
00:32:46,400 --> 00:32:49,700
All we're really going to do is we're just going to copy, right?

812
00:32:49,700 --> 00:32:52,000
We're just going to copy every every last thing.

813
00:32:52,400 --> 00:32:56,100
So we're just going to do something like Source sample plus plus like

814
00:32:56,100 --> 00:32:56,600
that.

815
00:32:57,400 --> 00:32:59,800
Basically, this is all we're doing.

816
00:33:00,000 --> 00:33:01,800
Just copying from one buffer to another.

817
00:33:02,000 --> 00:33:03,900
We're just flat-out copying.

818
00:33:04,100 --> 00:33:09,900
Nothing else is happening of any interest to anyone for any reason,

819
00:33:10,000 --> 00:33:10,400
right?

820
00:33:10,400 --> 00:33:11,900
Okay, so we're just, that's it.

821
00:33:11,900 --> 00:33:13,100
That's all that's happening.

822
00:33:13,100 --> 00:33:15,100
Star Source, sample plus plus, in fact, you know what?

823
00:33:15,100 --> 00:33:16,200
I don't even need to do this.

824
00:33:16,300 --> 00:33:17,900
I can just copy this one up here.

825
00:33:17,900 --> 00:33:19,800
We don't need the sign stuff at all.

826
00:33:21,400 --> 00:33:23,500
I still have draw this out for people.

827
00:33:23,500 --> 00:33:24,700
I don't know if we drew it out or not.

828
00:33:24,700 --> 00:33:26,600
We didn't draw it out and you want me to see a draw?

829
00:33:26,600 --> 00:33:28,700
It now would be a good time to tell me.

830
00:33:29,100 --> 00:33:29,800
So, we're basically doing

831
00:33:30,000 --> 00:33:30,600
That copy.

832
00:33:31,300 --> 00:33:32,200
We're doing it twice.

833
00:33:32,300 --> 00:33:34,600
We can collapse these two Loops soon to actually, you can see there's

834
00:33:34,600 --> 00:33:38,500
trying to get even more ridiculously simple and related to each other.

835
00:33:38,600 --> 00:33:42,200
So that's really mostly.

836
00:33:42,200 --> 00:33:45,700
All we need to do to change it from out, putting the stuff that comes

837
00:33:45,700 --> 00:33:47,600
from one, from outputting stuff that comes from the other.

838
00:33:47,600 --> 00:33:51,200
Now, what we do have to do is deal with our start up a little bit

839
00:33:51,200 --> 00:33:57,200
differently because we initially filled the the sound buffer, with

840
00:33:57,200 --> 00:33:59,800
stuff at the start to put a sine wave in there.

841
00:34:00,000 --> 00:34:03,400
On a front loaded, but that's not really what we want to do.

842
00:34:03,500 --> 00:34:04,000
Right?

843
00:34:04,000 --> 00:34:05,200
We don't want to do that.

844
00:34:05,200 --> 00:34:07,800
What we want to do instead is just basically clear it at the

845
00:34:07,800 --> 00:34:08,500
beginning, right?

846
00:34:08,500 --> 00:34:10,100
We just want to clear the whole buffer.

847
00:34:10,600 --> 00:34:13,600
So what we really want is something another function here, which is

848
00:34:13,600 --> 00:34:17,300
basically like win32 clear buffer, something like that.

849
00:34:17,699 --> 00:34:21,300
And so what we want to say is like hey, why don't you why don't you

850
00:34:21,300 --> 00:34:24,800
just take the entire buffer flush it with zeros, and then we'll start

851
00:34:24,800 --> 00:34:28,600
writing sound into it at some appropriate point in time, right?

852
00:34:29,500 --> 00:34:33,600
So assuming that we do that win32 clear buffer.

853
00:34:33,900 --> 00:34:37,699
What we basically need here is something that goes ahead and does

854
00:34:37,699 --> 00:34:39,800
that, clear, 32 clear buffer.

855
00:34:40,400 --> 00:34:41,400
Let's take a look here.

856
00:34:41,400 --> 00:34:46,100
So we're going to Global lock this thing like this.

857
00:34:46,500 --> 00:34:47,100
Right?

858
00:34:47,300 --> 00:34:47,900
Here we go.

859
00:34:49,000 --> 00:34:51,300
And this is basically doing the exact same code.

860
00:34:51,699 --> 00:34:56,699
Nothing really doesn't need B to lock or B to write really?

861
00:34:56,699 --> 00:34:59,100
Because we know pretty much

862
00:34:59,300 --> 00:35:02,200
That were locking the entire buffer, right?

863
00:35:02,200 --> 00:35:02,600
Absolutely.

864
00:35:02,600 --> 00:35:07,900
Everything is going to get, is going to get that treatment.

865
00:35:08,000 --> 00:35:12,400
So the B to lock will be the entire size of the entire thing.

866
00:35:12,400 --> 00:35:15,700
So we basically want to basically just pass everything.

867
00:35:15,700 --> 00:35:17,400
Give me everything you have.

868
00:35:19,600 --> 00:35:22,400
From the start, all the way to the end of the buffer.

869
00:35:22,500 --> 00:35:23,500
So that'll lock that.

870
00:35:23,500 --> 00:35:24,600
It'll give it back to us.

871
00:35:24,800 --> 00:35:28,300
And then we just need to clear it basically, and we can use this same

872
00:35:28,300 --> 00:35:29,100
code here.

873
00:35:29,300 --> 00:35:31,100
We can basically say, well, we'll go ahead.

874
00:35:31,500 --> 00:35:32,600
We'll take that.

875
00:35:32,800 --> 00:35:34,100
Will take a look at the sample count.

876
00:35:34,100 --> 00:35:36,000
Well, actually, we don't even need to be in samples anymore.

877
00:35:36,000 --> 00:35:39,500
We can just be in B, so we can literally just take something that

878
00:35:39,500 --> 00:35:40,200
looks like this.

879
00:35:40,800 --> 00:35:46,300
You can say B index equals 0, B index less than that b index plus

880
00:35:46,300 --> 00:35:48,500
plus, and we can basically say

881
00:35:49,400 --> 00:35:52,800
This is going to be a un Tate like that.

882
00:35:52,900 --> 00:35:57,400
We're just going to basically clear everything the entire buffer 20.

883
00:35:57,400 --> 00:35:58,000
Does that make sense?

884
00:35:58,000 --> 00:35:58,900
Hopefully that makes sense.

885
00:35:59,200 --> 00:35:59,900
So we're basically just

886
00:36:00,000 --> 00:36:00,900
Saying, all right.

887
00:36:01,000 --> 00:36:01,400
Clear.

888
00:36:01,400 --> 00:36:02,900
Everything, everything.

889
00:36:02,900 --> 00:36:08,000
You've got every last bite in this buffer should be set to 0.

890
00:36:08,000 --> 00:36:08,600
So there you go.

891
00:36:08,600 --> 00:36:10,200
Now, I don't anticipate.

892
00:36:10,400 --> 00:36:13,900
This actually ever happening because it should just give us back one

893
00:36:13,900 --> 00:36:17,000
contiguous region since the thing isn't playing yet and we're locking

894
00:36:17,000 --> 00:36:19,800
from zero to the secondary buffer size, but just in case something

895
00:36:19,800 --> 00:36:21,200
wonky happens on might as well handle.

896
00:36:21,200 --> 00:36:22,400
It will cease.

897
00:36:22,400 --> 00:36:23,800
Okay, we got the dust samples.

898
00:36:23,800 --> 00:36:24,800
We get sick region 1.

899
00:36:25,100 --> 00:36:29,100
Go through all of region 1 we write zeros into it, same exact thing

900
00:36:29,100 --> 00:36:29,700
here.

901
00:36:30,000 --> 00:36:32,900
We're doing it by B naught by samples this time because we don't care,

902
00:36:33,100 --> 00:36:34,200
this could also be.

903
00:36:34,200 --> 00:36:38,000
If since we're not really trying to cause as little Library functions

904
00:36:38,000 --> 00:36:41,000
possible, there are functions like memset built in the C standard

905
00:36:41,000 --> 00:36:44,700
library, that would set memory to particular value and clear as well.

906
00:36:46,800 --> 00:36:48,200
But we're just doing it manually ourselves.

907
00:36:49,100 --> 00:36:52,200
Okay, so then we go ahead and we unlock the buffer after we're done

908
00:36:52,200 --> 00:36:52,700
with it.

909
00:36:52,900 --> 00:36:53,800
So there you go.

910
00:36:54,000 --> 00:36:54,800
That'll lock.

911
00:36:55,400 --> 00:36:57,700
You know, do the clear unlock right?

912
00:36:57,900 --> 00:36:58,600
Nice and clean.

913
00:36:59,300 --> 00:37:00,500
So hopefully that will clear a buffer.

914
00:37:00,500 --> 00:37:00,700
Yep.

915
00:37:00,700 --> 00:37:03,900
There we go, and now will actually sort of be playing our sine wave,

916
00:37:03,900 --> 00:37:06,000
but there's a bunch of janking ass in here that we now we have to

917
00:37:06,000 --> 00:37:06,500
clean up.

918
00:37:06,500 --> 00:37:08,500
I think it will probably actually play the same way, but it's going to

919
00:37:08,500 --> 00:37:10,900
be, it's going to be buggy if that makes sense.

920
00:37:12,800 --> 00:37:14,000
Gotta finish this as well.

921
00:37:14,500 --> 00:37:15,000
So,

922
00:37:15,100 --> 00:37:15,400
Okay.

923
00:37:15,500 --> 00:37:16,400
Yeah, sorry.

924
00:37:16,600 --> 00:37:19,300
Forgot to forgot that we were in the middle of a second function there

925
00:37:19,300 --> 00:37:19,700
as well.

926
00:37:19,900 --> 00:37:20,200
All right.

927
00:37:20,200 --> 00:37:23,700
So win32 Phil sound, buffer also has obviously has to work.

928
00:37:23,800 --> 00:37:25,500
All right, so we're going through our samples.

929
00:37:25,900 --> 00:37:28,300
We have our source buffer here.

930
00:37:28,900 --> 00:37:32,600
We're doing interleaved, which is correct.

931
00:37:33,100 --> 00:37:33,900
Oh, okay.

932
00:37:34,000 --> 00:37:36,100
So the other thing that we, yeah, this is, this is just the thing that

933
00:37:36,100 --> 00:37:38,300
I was about to say, I guess, I can't run it till I actually clean up

934
00:37:38,300 --> 00:37:39,200
the thing I was about to say.

935
00:37:39,500 --> 00:37:43,800
So I was going to say is so now, however, much we tell the game to

936
00:37:43,800 --> 00:37:45,000
fill, right?

937
00:37:45,700 --> 00:37:51,700
That is essentially going to be determined by that's going to be

938
00:37:51,700 --> 00:37:55,200
determined by our frame rate if we're trying to actually hit the

939
00:37:55,200 --> 00:37:59,000
framerate properly, but the problem is the thing that we were using

940
00:37:59,000 --> 00:38:02,800
for our right cursor is just taking wherever the target cursor is and

941
00:38:02,800 --> 00:38:05,700
looking at how far we would have to write to fill up to that point.

942
00:38:05,700 --> 00:38:06,400
Right?

943
00:38:06,600 --> 00:38:10,600
So what we actually have to do is we actually now have to think about

944
00:38:10,600 --> 00:38:12,200
where in the sound buffer.

945
00:38:12,300 --> 00:38:14,900
We actually need to start putting things and then we need to

946
00:38:15,100 --> 00:38:18,600
just always make sure that we update the right, the right amount of

947
00:38:18,600 --> 00:38:19,100
samples.

948
00:38:19,400 --> 00:38:22,700
So there's two ways that we can actually do this and maybe I should do

949
00:38:22,800 --> 00:38:26,100
the other way of doing it first, instead of saying, let's always

950
00:38:26,100 --> 00:38:28,800
output the number of samples that will correspond with the frame that

951
00:38:28,800 --> 00:38:29,500
we want.

952
00:38:29,600 --> 00:38:32,700
What we could do instead is say, let's just use the way we were doing

953
00:38:32,700 --> 00:38:37,800
it before and asked the game every time essentially to, to Output

954
00:38:37,800 --> 00:38:40,100
enough to fill to the point that we want.

955
00:38:40,300 --> 00:38:45,000
So basically, what we could say, right is we could do this here.

956
00:38:45,300 --> 00:38:52,800
And basically say all right, you know if sound is valid like this doo

957
00:38:52,800 --> 00:38:53,500
doo doo.

958
00:38:56,500 --> 00:38:58,100
Like that.

959
00:39:00,000 --> 00:39:04,600
Valid what we could do is do the computation that we were going to do

960
00:39:04,700 --> 00:39:05,200
before.

961
00:39:05,200 --> 00:39:09,600
So basically, assuming that the sound is valid, then we actually asked

962
00:39:09,600 --> 00:39:10,300
for that many.

963
00:39:10,300 --> 00:39:13,200
The reason that I wasn't doing that quite yet is because I wanted to

964
00:39:13,200 --> 00:39:16,700
do it without having to show you guys how to allocate stuff on the

965
00:39:16,700 --> 00:39:20,000
stack, but I guess we're going to have to because at the end of the

966
00:39:20,000 --> 00:39:21,400
day we can't actually call this thing.

967
00:39:21,400 --> 00:39:22,900
If it's not set up to work properly.

968
00:39:22,900 --> 00:39:24,000
It's just going to crash on us.

969
00:39:24,300 --> 00:39:26,600
We're going to have a huge problem there if I don't do it properly.

970
00:39:26,600 --> 00:39:29,200
So, you know, what can you do?

971
00:39:29,200 --> 00:39:29,900
I was trying for

972
00:39:30,000 --> 00:39:32,600
Something I gotta Backtrack on it.

973
00:39:32,700 --> 00:39:34,100
I gotta backtrack a little bit.

974
00:39:34,500 --> 00:39:35,900
That's what you know, what can you do?

975
00:39:35,900 --> 00:39:39,700
So anyway, if we take a look at these guys here and we basically say,

976
00:39:39,700 --> 00:39:41,200
all right, we've got this stuff.

977
00:39:41,700 --> 00:39:42,800
We're going to compute it.

978
00:39:42,900 --> 00:39:44,700
So we're essentially going to compute all these things.

979
00:39:44,700 --> 00:39:47,100
We're going to compute the B to luck.

980
00:39:48,000 --> 00:39:49,800
We're going to compute the target cursor.

981
00:39:51,600 --> 00:39:54,400
Damn, we're going to compute the B to, right?

982
00:39:54,700 --> 00:39:55,900
And we're going to save them.

983
00:39:56,300 --> 00:39:58,000
Right, oops.

984
00:39:59,300 --> 00:40:00,000
It's not right.

985
00:40:00,100 --> 00:40:00,400
There we go.

986
00:40:00,400 --> 00:40:04,000
We're going to compute the B to write are going to save.

987
00:40:04,000 --> 00:40:05,900
Those things are going to say that sound is valid.

988
00:40:05,900 --> 00:40:07,300
Assuming that we were able to actually do that.

989
00:40:07,300 --> 00:40:08,700
Assuming the sound is valid.

990
00:40:08,900 --> 00:40:13,400
Then what we want to do here essentially is we want to go ahead and

991
00:40:13,400 --> 00:40:16,800
ask the sound layer the game to Output the number of samples.

992
00:40:16,800 --> 00:40:20,700
We actually want because we now know how many there are, right.

993
00:40:20,800 --> 00:40:24,300
There's going to be b, b to right will basically be the thing we want.

994
00:40:24,300 --> 00:40:28,100
And since we're asking for it in samples, we basically need to divide

995
00:40:28,100 --> 00:40:29,100
that by our

996
00:40:29,200 --> 00:40:30,300
Sample size, right?

997
00:40:30,300 --> 00:40:32,600
However, big the bytes per sample is.

998
00:40:32,800 --> 00:40:35,700
So basically what we're doing here is we're saying okay the sample

999
00:40:35,700 --> 00:40:38,900
count that the game is supposed to write is going to be the B to write

1000
00:40:39,000 --> 00:40:41,800
/ r, b, / sample, right?

1001
00:40:42,600 --> 00:40:46,200
It's basically for dividing by 4, divided by stereo paired 16.

1002
00:40:46,800 --> 00:40:50,300
So the problem with that is this thing ain't going to hold that.

1003
00:40:50,300 --> 00:40:54,100
Now, I mean, I could be cheesy and do something like this, which would

1004
00:40:54,100 --> 00:40:55,300
be absolutely huge.

1005
00:40:55,400 --> 00:40:56,400
That's not what I want to do.

1006
00:40:56,400 --> 00:40:57,800
So we're not going to do that.

1007
00:40:58,000 --> 00:40:59,000
But at the moment we

1008
00:40:59,100 --> 00:41:00,300
We can probably do something.

1009
00:41:00,500 --> 00:41:02,700
What'd it sound output area.

1010
00:41:02,700 --> 00:41:04,500
So, let's see here.

1011
00:41:04,800 --> 00:41:08,500
All right, but first, maybe I'll just do it this way, just so we can

1012
00:41:08,500 --> 00:41:09,400
do bug this code.

1013
00:41:09,400 --> 00:41:11,400
I slammed a lot of code out there right now.

1014
00:41:11,400 --> 00:41:12,000
I appreciate that.

1015
00:41:12,400 --> 00:41:15,100
So we got to kind of debug it, get it working properly, step through

1016
00:41:15,100 --> 00:41:15,200
it.

1017
00:41:15,200 --> 00:41:16,200
Make sure everything's kosher.

1018
00:41:16,200 --> 00:41:19,200
And then we'll talk about this nonsense right here.

1019
00:41:19,200 --> 00:41:20,700
That seems like a reasonable thing to do.

1020
00:41:20,800 --> 00:41:27,000
All right, so hopefully, as you can see, we're back to basically

1021
00:41:27,000 --> 00:41:28,200
exactly what we wanted.

1022
00:41:28,400 --> 00:41:29,100
The only problem is

1023
00:41:29,200 --> 00:41:32,500
Is we've, we've kind of dropped our feature parity again, because we

1024
00:41:32,500 --> 00:41:37,200
no longer pass the tone hurts in the tone Hertz is not dependent on

1025
00:41:37,200 --> 00:41:38,800
the stick, which is what we wanted.

1026
00:41:39,100 --> 00:41:41,500
But we are actually generating our sine wave.

1027
00:41:41,500 --> 00:41:45,100
As you can see, sign f is no longer called in the platform layer at

1028
00:41:45,100 --> 00:41:45,500
all.

1029
00:41:45,600 --> 00:41:48,900
So, we know that basically, all of our sound is now coming from game

1030
00:41:48,900 --> 00:41:50,700
output sound, which is what we wanted.

1031
00:41:50,700 --> 00:41:53,600
However, we still got some really crusty stuff here, and I want to

1032
00:41:53,600 --> 00:41:54,700
step through that code.

1033
00:41:55,000 --> 00:41:56,400
Maybe what I'll do is I'll push it.

1034
00:41:56,400 --> 00:41:57,300
I've one more thing.

1035
00:41:57,300 --> 00:41:58,900
I maybe want to get to today.

1036
00:42:00,100 --> 00:42:02,200
Or maybe not.

1037
00:42:02,200 --> 00:42:04,600
Let's let's, I'm gonna push forward a little bit more.

1038
00:42:04,600 --> 00:42:07,100
I realize there's a lot of stuff in there, but in the Q&A, we'll go

1039
00:42:07,100 --> 00:42:08,900
over it again, just to let you know.

1040
00:42:08,900 --> 00:42:15,000
So let's let's yeah, let's let's take a take a look at maybe one other

1041
00:42:15,000 --> 00:42:16,700
thing first.

1042
00:42:17,100 --> 00:42:20,300
So, the other thing that I want to do, right?

1043
00:42:20,300 --> 00:42:22,200
Is I want to move that tone.

1044
00:42:22,200 --> 00:42:24,000
Like I want to move sort of the

1045
00:42:25,500 --> 00:42:25,900
You know what?

1046
00:42:25,900 --> 00:42:26,100
Now?

1047
00:42:26,200 --> 00:42:27,000
It's going to be tomorrow.

1048
00:42:27,000 --> 00:42:27,300
I'm sorry.

1049
00:42:27,300 --> 00:42:30,500
I'm thinking I'm kind of running ahead in my running forward in my

1050
00:42:30,500 --> 00:42:33,200
head and I'm just thinking about, I'm like it's going to be too

1051
00:42:33,200 --> 00:42:34,500
complicated for me to talk about all things.

1052
00:42:34,500 --> 00:42:36,400
I want to talk about for the next thing that we're going to do.

1053
00:42:36,600 --> 00:42:39,100
So instead what we're going to do is I'm basically just going to go

1054
00:42:39,100 --> 00:42:42,400
ahead and pass that tone hurts to get our feature, parity back.

1055
00:42:42,400 --> 00:42:46,100
And then tomorrow we will look at getting all of those values.

1056
00:42:46,200 --> 00:42:50,500
Basically that were passing here, right to game update render.

1057
00:42:50,900 --> 00:42:53,700
I'll look at extracting all of those back out again.

1058
00:42:53,700 --> 00:42:54,700
So tone hurts.

1059
00:42:55,400 --> 00:42:59,200
He's in here because the none of these should actually be being passed

1060
00:42:59,200 --> 00:43:00,800
from the platform layer at all.

1061
00:43:01,400 --> 00:43:03,000
None of that should be happening.

1062
00:43:03,400 --> 00:43:07,300
But I kind of tried do this in waves so that I don't overwhelm people

1063
00:43:07,300 --> 00:43:09,500
with too much reorganizing of the code at once.

1064
00:43:09,500 --> 00:43:10,000
Basically.

1065
00:43:10,300 --> 00:43:12,100
So the tone Hertz is now passed in.

1066
00:43:12,600 --> 00:43:14,400
We're good to go with that.

1067
00:43:14,400 --> 00:43:17,800
So, in theory, we should be back to feature parity yet.

1068
00:43:18,900 --> 00:43:20,100
That's what we wanted.

1069
00:43:20,300 --> 00:43:21,300
So that's all good.

1070
00:43:21,500 --> 00:43:24,800
So let's go through here now and take a look at all this crazy code, I

1071
00:43:24,800 --> 00:43:25,200
added.

1072
00:43:25,300 --> 00:43:25,500
It.

1073
00:43:25,500 --> 00:43:28,400
And then I guess the most important thing to talk about will be that

1074
00:43:28,400 --> 00:43:29,200
stack allocation.

1075
00:43:29,200 --> 00:43:29,600
So,

1076
00:43:31,000 --> 00:43:31,500
Okay.

1077
00:43:32,900 --> 00:43:39,400
I have choices here about where I want to store this sound stuff now

1078
00:43:39,400 --> 00:43:42,700
in the future, I don't really want it on the stack.

1079
00:43:42,900 --> 00:43:46,800
The stack is not probably where I want to actually put this stuff.

1080
00:43:47,000 --> 00:43:50,900
But like I said, while you are moving code around and doing stuff and

1081
00:43:50,900 --> 00:43:54,000
we're trying to get all the architecture in place, the way I want it.

1082
00:43:54,200 --> 00:43:57,400
I don't want to spend a lot of time, thinking about things like this,

1083
00:43:58,100 --> 00:43:59,100
you want to basically.

1084
00:43:59,100 --> 00:44:01,700
And and again, this is sort of the sort of thing, a lot of people talk

1085
00:44:01,700 --> 00:44:02,600
about garbage.

1086
00:44:02,700 --> 00:44:05,200
Collected languages and that sort of stuff and they're like, how can

1087
00:44:05,200 --> 00:44:07,500
you possibly deal with languages that don't have these things of, that

1088
00:44:07,500 --> 00:44:08,000
sort of stuff?

1089
00:44:08,100 --> 00:44:12,100
Well, the answer is actually I just don't worry about those sorts of

1090
00:44:12,100 --> 00:44:14,000
things till I'm ready to kind of tighten them down.

1091
00:44:14,200 --> 00:44:16,800
And in the interim, there's a lot of techniques you can use to not

1092
00:44:16,800 --> 00:44:19,400
really worry about memory to just kind of have it happen.

1093
00:44:19,400 --> 00:44:20,700
However, you want.

1094
00:44:20,700 --> 00:44:23,000
And you'll notice that we kind of haven't had any problem with that so

1095
00:44:23,000 --> 00:44:23,200
far.

1096
00:44:23,200 --> 00:44:25,700
We've basically never had to really think about memory at all.

1097
00:44:25,900 --> 00:44:28,200
We're just like, you know, most of them were thinking about memory.

1098
00:44:28,200 --> 00:44:30,200
We're talking about like writing things into buffers and stuff like

1099
00:44:30,200 --> 00:44:31,800
that, that you would have to think about.

1100
00:44:31,800 --> 00:44:32,500
Anyway, even if you were

1101
00:44:32,600 --> 00:44:33,800
Just filling them as a raise.

1102
00:44:33,900 --> 00:44:36,400
You can still do things like buffer, overruns and languages that don't

1103
00:44:36,400 --> 00:44:39,400
have pointers by just trying to right outside the bounds of an array

1104
00:44:39,400 --> 00:44:39,700
or something.

1105
00:44:39,700 --> 00:44:41,100
That's still a bug in your program.

1106
00:44:41,100 --> 00:44:42,200
You shouldn't have done it.

1107
00:44:42,400 --> 00:44:45,100
And so the fact that maybe the language doesn't crash as a result

1108
00:44:45,100 --> 00:44:48,700
isn't much of a is, it doesn't really help you because your programs

1109
00:44:48,700 --> 00:44:49,600
will just doesn't work.

1110
00:44:50,000 --> 00:44:55,200
So anyway, point being what I want to talk about here is if you just

1111
00:44:55,200 --> 00:44:57,400
are trying to get stuff working and you're just kind of screwing

1112
00:44:57,400 --> 00:44:59,800
around there, actually is a function.

1113
00:45:00,400 --> 00:45:04,500
Depending on the circumstances called a lucky and basically I don't

1114
00:45:04,500 --> 00:45:09,200
actually know to be honest with you whether they've standardized on an

1115
00:45:09,200 --> 00:45:10,400
actual name for it.

1116
00:45:10,400 --> 00:45:14,900
That always works or whether you have to choose whether it has an

1117
00:45:14,900 --> 00:45:19,500
underscore or not based on whether it's on a certain platform.

1118
00:45:19,500 --> 00:45:21,900
So I usually abstract this away.

1119
00:45:21,900 --> 00:45:24,600
It's actually in the platform include files.

1120
00:45:24,600 --> 00:45:27,800
I do it but it doesn't matter here because we're actually just calling

1121
00:45:27,800 --> 00:45:28,400
the windows version.

1122
00:45:28,400 --> 00:45:29,900
So we only care what

1123
00:45:30,100 --> 00:45:33,600
There's is and basically what this allows you to do.

1124
00:45:33,700 --> 00:45:37,000
You can basically say alakay and you can give it anything you want any

1125
00:45:37,000 --> 00:45:37,400
size.

1126
00:45:37,400 --> 00:45:39,500
So that's like a size that we want.

1127
00:45:39,500 --> 00:45:39,900
We want.

1128
00:45:39,900 --> 00:45:41,900
Let's say that many.

1129
00:45:42,000 --> 00:45:43,200
It's 16s, right?

1130
00:45:43,200 --> 00:45:44,700
That's how much we wanted.

1131
00:45:44,900 --> 00:45:48,000
And basically what that will do is that will just allocate on the

1132
00:45:48,000 --> 00:45:52,400
stack for you, that that much memory.

1133
00:45:52,600 --> 00:45:56,000
And the stack, if you think about, it is kind of a little like having

1134
00:45:56,000 --> 00:45:56,900
garbage collection, right?

1135
00:45:56,900 --> 00:45:59,900
If you don't care about something, you can throw it on the

1136
00:46:00,000 --> 00:46:03,000
stack and you know, that it will go away when the function is done.

1137
00:46:03,000 --> 00:46:04,700
So it's kind of automated in that sense.

1138
00:46:05,000 --> 00:46:08,800
If you're a C++ programmer and you like things like smart pointers or

1139
00:46:08,800 --> 00:46:09,700
things like that.

1140
00:46:10,100 --> 00:46:11,100
It's very similar, right?

1141
00:46:11,100 --> 00:46:13,400
There are things that are going to go out of scope at the end of a

1142
00:46:13,400 --> 00:46:15,300
function and just clean themselves up.

1143
00:46:15,300 --> 00:46:16,700
So you don't have to think about it.

1144
00:46:16,900 --> 00:46:21,200
I don't actually tend to use code that looks like this in shipping

1145
00:46:21,200 --> 00:46:25,100
code, very often because I prefer to do things slightly differently.

1146
00:46:25,100 --> 00:46:27,700
Once I have everything the way I want it, I tend to go in and do a

1147
00:46:27,700 --> 00:46:29,700
little picking this.

1148
00:46:30,200 --> 00:46:34,200
Hello, seediness that results in usually not having allocates happen

1149
00:46:34,200 --> 00:46:35,100
in code very often.

1150
00:46:36,300 --> 00:46:39,700
But when I'm just developing code, I will often throw and stuff like

1151
00:46:39,700 --> 00:46:41,200
that because hey, I just like, okay.

1152
00:46:41,200 --> 00:46:44,000
I know that that'll allocate the thing that I wanted, right?

1153
00:46:44,200 --> 00:46:44,900
And it'll be fine.

1154
00:46:44,900 --> 00:46:47,200
Where was the actual where was this guy to find?

1155
00:46:47,300 --> 00:46:54,000
It is in Malik .h ago, not H and I am going to go ahead and put that

1156
00:46:54,300 --> 00:46:55,500
down here.

1157
00:46:55,500 --> 00:46:56,100
There we go.

1158
00:46:57,800 --> 00:46:59,900
Put that standard eye out.

1159
00:47:00,000 --> 00:47:05,700
Okay, and then I should be able to compile now hopefully.

1160
00:47:06,600 --> 00:47:07,100
Oh, right.

1161
00:47:07,100 --> 00:47:09,700
And this returns a void star, of course, so I have to cast it to the

1162
00:47:09,700 --> 00:47:10,600
type that I wanted.

1163
00:47:10,900 --> 00:47:15,800
All right, so that's basically just a way to do that allocation or

1164
00:47:15,800 --> 00:47:16,400
not.

1165
00:47:16,800 --> 00:47:17,100
All right.

1166
00:47:17,100 --> 00:47:19,900
So I guess this is basically saying that I can't make something that

1167
00:47:19,900 --> 00:47:23,100
big on the stack is my guess due to do.

1168
00:47:23,400 --> 00:47:25,600
Maybe this is one good reason not to do it.

1169
00:47:25,900 --> 00:47:26,200
What to say.

1170
00:47:26,200 --> 00:47:27,300
Yes stack Overflow.

1171
00:47:27,500 --> 00:47:27,700
Okay.

1172
00:47:27,700 --> 00:47:29,900
So basically this is one of those things.

1173
00:47:30,000 --> 00:47:33,000
Where we looked at this before, if I want to start playing around with

1174
00:47:33,000 --> 00:47:33,600
alakay.

1175
00:47:34,200 --> 00:47:35,900
I'm going to have to actually deal with.

1176
00:47:36,000 --> 00:47:40,500
I would actually have to deal with having that stack size larger,

1177
00:47:40,500 --> 00:47:43,200
which, of course, we can do, if we just want to play with it.

1178
00:47:43,400 --> 00:47:45,300
But again, I just wanted to kind of show you that.

1179
00:47:45,300 --> 00:47:48,300
So I don't really know if that's worth doing.

1180
00:47:49,200 --> 00:47:51,600
Like I said, I almost never use Alec.

1181
00:47:51,600 --> 00:47:53,600
I only use it when I'm just playing around with stuff.

1182
00:47:53,600 --> 00:47:56,400
So if I'm going to allocate something that big it really wouldn't

1183
00:47:56,400 --> 00:47:57,100
matter much.

1184
00:47:57,400 --> 00:47:57,900
I don't know.

1185
00:47:58,500 --> 00:47:59,800
I don't know, we've got 10 minutes.

1186
00:48:00,000 --> 00:48:00,400
Minutes left.

1187
00:48:00,400 --> 00:48:01,500
So let me just go ahead and do it.

1188
00:48:01,500 --> 00:48:04,400
The real way to stack, Overflow is kind of like a message to us that

1189
00:48:04,400 --> 00:48:06,000
says we should actually just do it properly.

1190
00:48:06,400 --> 00:48:08,500
All right, so what would I want to do?

1191
00:48:08,500 --> 00:48:09,700
And I wanted to do this before.

1192
00:48:09,700 --> 00:48:12,100
It's basically we have our allocation up here, right?

1193
00:48:12,100 --> 00:48:15,900
We've got our virtual Alec right right here.

1194
00:48:16,500 --> 00:48:19,400
This was our virtual Alec the created, the bitmap that we actually

1195
00:48:19,400 --> 00:48:21,300
needed for our dip section.

1196
00:48:21,300 --> 00:48:21,800
Right?

1197
00:48:21,800 --> 00:48:25,700
And so if we wanted to do something trivial down here where we

1198
00:48:25,700 --> 00:48:29,000
actually just want memory for our buffer, the the easiest possible

1199
00:48:29,000 --> 00:48:29,900
thing to do the thing that

1200
00:48:30,000 --> 00:48:33,500
That's just the simplest is just to do this buffer once, right?

1201
00:48:33,600 --> 00:48:36,000
And I was trying to avoid actually going into this but I realize I got

1202
00:48:36,000 --> 00:48:39,400
plenty of time so I might as well just do it because it's the right

1203
00:48:39,400 --> 00:48:41,700
thing to do and it's what I wanted to do eventually.

1204
00:48:42,000 --> 00:48:46,000
So basically all I really have to do is I can just do this, right?

1205
00:48:46,100 --> 00:48:49,500
And I can actually virtual Alec the thing that I actually wanted

1206
00:48:49,600 --> 00:48:52,100
originally from Windows directly.

1207
00:48:52,300 --> 00:48:55,400
And basically, what I can do is I can say, why don't you give me

1208
00:48:55,400 --> 00:48:56,100
something?

1209
00:48:56,200 --> 00:48:59,600
That's the entire secondary buffer size, because I know that I can

1210
00:48:59,600 --> 00:48:59,900
never

1211
00:49:00,100 --> 00:49:03,700
I never will need to Output more sound than our entire buffer size and

1212
00:49:03,700 --> 00:49:05,100
that just gives me a backing store.

1213
00:49:05,100 --> 00:49:08,000
Now that I know will always be big enough to fit the thing that I

1214
00:49:08,000 --> 00:49:08,600
needed.

1215
00:49:08,600 --> 00:49:09,100
Right?

1216
00:49:09,200 --> 00:49:12,000
So basically, I'm doing this, you know, we're good to go.

1217
00:49:12,100 --> 00:49:13,200
I always have the memory.

1218
00:49:13,300 --> 00:49:15,800
I don't have to worry about alakay being to, you know, pick on the

1219
00:49:15,800 --> 00:49:16,200
stack.

1220
00:49:16,200 --> 00:49:17,500
I don't have to worry about any of that stuff.

1221
00:49:17,600 --> 00:49:20,100
This is just a memory that I wanted, right?

1222
00:49:20,900 --> 00:49:22,300
So that's pretty straightforward.

1223
00:49:22,300 --> 00:49:25,600
It's a very easy thing to do, but one of the things that I like to do

1224
00:49:25,600 --> 00:49:29,800
too, is I don't often like to necessarily have all these

1225
00:49:29,900 --> 00:49:30,900
Sewell Alex around.

1226
00:49:30,900 --> 00:49:33,400
So what we will probably do eventually and you'll see this very

1227
00:49:33,400 --> 00:49:33,700
shortly.

1228
00:49:33,700 --> 00:49:36,800
Actually is will pull these virtual Alex into a single virtual out

1229
00:49:36,800 --> 00:49:39,600
that just gets us are all the memory that we wanted and then we will

1230
00:49:39,600 --> 00:49:40,500
subdivide it out.

1231
00:49:40,600 --> 00:49:43,900
But for now that is really all we had to do.

1232
00:49:44,200 --> 00:49:47,600
Because if you think about it, we got this the memory for our bitmap

1233
00:49:47,600 --> 00:49:48,100
up here.

1234
00:49:48,500 --> 00:49:51,600
We've got the memory for our sound, buffer down here and basically

1235
00:49:51,600 --> 00:49:55,600
what's happening is we know that we never need more than that memory.

1236
00:49:55,600 --> 00:49:59,000
So it doesn't actually matter when we get down here.

1237
00:49:59,200 --> 00:49:59,800
It never actually.

1238
00:50:00,000 --> 00:50:03,300
Only matters how much we're going to ask the game for we could ask it

1239
00:50:03,300 --> 00:50:04,300
for a lot for a little.

1240
00:50:04,300 --> 00:50:07,900
We know that will always fit in that buffer that we got because that

1241
00:50:07,900 --> 00:50:13,000
buffer could have could hold if it needed to basically all the stuff

1242
00:50:13,000 --> 00:50:17,300
that was coming from the sound output right that there isn't any way

1243
00:50:17,500 --> 00:50:20,800
to play to direct sound more than the buffer size that we originally

1244
00:50:20,800 --> 00:50:21,400
had.

1245
00:50:21,700 --> 00:50:24,000
And so we can just allocate it this way, right?

1246
00:50:24,200 --> 00:50:25,300
It's really really straightforward.

1247
00:50:25,300 --> 00:50:27,800
I hope that makes some sense, but basically all we're doing.

1248
00:50:27,800 --> 00:50:29,100
I don't know why that always starts off.

1249
00:50:29,900 --> 00:50:31,000
That it's kind of weird.

1250
00:50:31,000 --> 00:50:34,000
I look, it's like for some reason, my Gamepad has this weird thing

1251
00:50:34,000 --> 00:50:37,500
where like it always starts off, not centered, or something, weird,

1252
00:50:37,500 --> 00:50:38,100
like that.

1253
00:50:38,100 --> 00:50:39,600
I'm not sure what is actually going on there.

1254
00:50:39,600 --> 00:50:40,700
It's weird or two.

1255
00:50:40,700 --> 00:50:43,600
I don't know if you can see this, but the GamePad itself isn't even

1256
00:50:43,600 --> 00:50:44,700
like initialized.

1257
00:50:45,200 --> 00:50:48,400
You can see that you notice how it lights up when I launch the app.

1258
00:50:49,100 --> 00:50:49,400
Yeah.

1259
00:50:49,400 --> 00:50:51,100
I haven't played much around with this game pad.

1260
00:50:51,200 --> 00:50:51,800
I suspect that.

1261
00:50:51,800 --> 00:50:52,100
Basically.

1262
00:50:52,100 --> 00:50:54,700
We just have to go in and tighten up that X input code a little bit,

1263
00:50:54,700 --> 00:50:58,100
which will do a little later on but it's kind of wonky anyway.

1264
00:50:59,400 --> 00:50:59,800
So that's really.

1265
00:51:00,000 --> 00:51:00,800
All that's going on here.

1266
00:51:00,800 --> 00:51:03,000
So, let's take a look at what's happening when we step through the

1267
00:51:03,000 --> 00:51:03,900
code, right?

1268
00:51:04,000 --> 00:51:04,700
Basically, what's happening.

1269
00:51:04,700 --> 00:51:05,900
Is that at startup time?

1270
00:51:05,900 --> 00:51:06,400
Here we go.

1271
00:51:06,400 --> 00:51:07,500
We opened our window.

1272
00:51:07,600 --> 00:51:10,400
We initialize, our sound output with D, sound and clear out that

1273
00:51:10,400 --> 00:51:11,100
buffer, right?

1274
00:51:11,100 --> 00:51:12,000
The buffer is gone.

1275
00:51:12,000 --> 00:51:12,800
It's cleared.

1276
00:51:13,300 --> 00:51:15,000
Now, what we do is we say, all right.

1277
00:51:15,000 --> 00:51:16,700
We need to allocate a backing store.

1278
00:51:16,900 --> 00:51:19,500
That's basically someplace that we can put the samples that the game

1279
00:51:19,500 --> 00:51:22,700
can stuff the samples that we can then copy out into the ring buffer

1280
00:51:22,800 --> 00:51:23,800
for a direct sound.

1281
00:51:23,800 --> 00:51:24,800
So it's that extra copy.

1282
00:51:24,800 --> 00:51:27,500
I said, it was a little inefficient it is but I didn't want to pass

1283
00:51:27,500 --> 00:51:28,800
that complexity on to the app.

1284
00:51:28,800 --> 00:51:29,900
So basically we get our

1285
00:51:30,000 --> 00:51:30,300
Will buffer.

1286
00:51:30,300 --> 00:51:33,100
There we go into our Loop and each time through our Loop.

1287
00:51:33,100 --> 00:51:35,500
Okay, after we're done processing messages and the controller,

1288
00:51:35,500 --> 00:51:36,700
obviously we go.

1289
00:51:36,700 --> 00:51:39,000
And we say, okay, where is the right cursor?

1290
00:51:39,000 --> 00:51:40,000
At the moment.

1291
00:51:40,100 --> 00:51:43,500
Tell me where it actually is and that will basically give us back how

1292
00:51:43,500 --> 00:51:46,000
Mitch we want to write into the sound buffer.

1293
00:51:46,100 --> 00:51:50,200
We will then create a faux little wrapper here that just says, here's

1294
00:51:50,200 --> 00:51:51,100
the samples per second.

1295
00:51:51,100 --> 00:51:54,400
We were using here is how many bytes I want you to write out / the

1296
00:51:54,400 --> 00:51:56,400
bikes for sample to give you a sample count to write.

1297
00:51:56,400 --> 00:51:58,400
This is basically telling the game how many to, right?

1298
00:51:58,500 --> 00:51:59,800
We're going to go ahead and set up the

1299
00:52:00,000 --> 00:52:00,800
Matt memory as well.

1300
00:52:00,800 --> 00:52:03,700
Like we did before, we then tell the game, we want the bitmap.

1301
00:52:03,700 --> 00:52:04,700
We want the sound.

1302
00:52:04,700 --> 00:52:06,200
It goes ahead and does it sound.

1303
00:52:06,200 --> 00:52:07,200
It looks at the samples.

1304
00:52:07,200 --> 00:52:08,300
It writes them into that buffer.

1305
00:52:08,300 --> 00:52:09,700
Using the sine wave, right?

1306
00:52:10,000 --> 00:52:11,600
Does the gradient like we did before?

1307
00:52:11,700 --> 00:52:15,700
Now, assuming that the sound the sound sort of request for the pointer

1308
00:52:15,700 --> 00:52:16,200
work before us?

1309
00:52:16,200 --> 00:52:18,200
That we know we're actually outputting sound properly.

1310
00:52:18,300 --> 00:52:19,600
We'll go ahead and fill that sound.

1311
00:52:19,600 --> 00:52:24,500
Buffer will come in here will copy out from the the samples that the

1312
00:52:24,500 --> 00:52:28,300
game stuck in the buffer will copy those out and we'll use the split

1313
00:52:28,300 --> 00:52:28,700
ring thing.

1314
00:52:28,700 --> 00:52:29,800
So we'll be so basically.

1315
00:52:29,900 --> 00:52:33,500
Turn it into the right thing for the ring buffer, if necessary, and

1316
00:52:33,500 --> 00:52:35,800
then we will unlock the buffer and it will play.

1317
00:52:35,800 --> 00:52:36,300
Right?

1318
00:52:36,400 --> 00:52:39,000
That is all we did very very straightforward.

1319
00:52:39,100 --> 00:52:40,100
Very, very simple.

1320
00:52:40,500 --> 00:52:40,900
Sorry.

1321
00:52:40,900 --> 00:52:43,600
That I sort of gave you a little red herring with the alakay there.

1322
00:52:43,600 --> 00:52:45,500
I thought it might be a good time to introduce allocate.

1323
00:52:45,500 --> 00:52:48,600
Wasn't because base, our stack just isn't big enough for something

1324
00:52:48,600 --> 00:52:49,500
that large.

1325
00:52:49,700 --> 00:52:53,100
That is a fair number of bytes because, you know, I was allocating the

1326
00:52:53,100 --> 00:52:54,700
entire seconds worth of samples.

1327
00:52:54,700 --> 00:52:57,200
If we were just allocating, just the 60th of a second or just the

1328
00:52:57,200 --> 00:52:57,800
30th.

1329
00:52:57,800 --> 00:52:59,100
That would probably work fine.

1330
00:52:59,500 --> 00:52:59,800
But when

1331
00:53:00,100 --> 00:53:01,500
Change to doing the whole thing.

1332
00:53:01,600 --> 00:53:03,000
That's, that's not going to fit.

1333
00:53:03,100 --> 00:53:06,300
We'd have to up our stack size and that seems stupid because I didn't

1334
00:53:06,300 --> 00:53:07,700
even really want that to happen.

1335
00:53:07,700 --> 00:53:11,000
And so it seemed like a bad idea to kind of go down the alligator out,

1336
00:53:11,000 --> 00:53:13,600
just because I started on it instead of switching to the correct

1337
00:53:13,600 --> 00:53:13,900
thing.

1338
00:53:14,400 --> 00:53:18,300
So basically what we're going to do this is going to get pulled pool

1339
00:53:18,400 --> 00:53:22,400
with bitmap virtual a lock and that's basically all we really need to

1340
00:53:22,400 --> 00:53:22,900
do there.

1341
00:53:23,200 --> 00:53:23,700
So,

1342
00:53:24,800 --> 00:53:26,800
That's mostly everything for sound output.

1343
00:53:26,900 --> 00:53:29,700
And so if you look at basically what we've done, we've got graphics

1344
00:53:29,700 --> 00:53:30,700
output moved over.

1345
00:53:30,700 --> 00:53:32,400
We've got sound output moved over.

1346
00:53:32,700 --> 00:53:36,700
So basically all we're going to do next time is look at, as look at

1347
00:53:36,700 --> 00:53:37,800
how to get input over there.

1348
00:53:37,800 --> 00:53:39,700
And then we've got all the platform Services over.

1349
00:53:40,100 --> 00:53:43,000
But we still have one more thing which is memory and we're going to

1350
00:53:43,000 --> 00:53:45,600
have to talk about that, probably the day after.

1351
00:53:45,600 --> 00:53:48,100
So unless the input goes extremely quickly, which I don't think it

1352
00:53:48,100 --> 00:53:51,100
will will do input tomorrow and then we'll do memory the day after and

1353
00:53:51,100 --> 00:53:52,700
then we should be in really good shape.

1354
00:53:52,900 --> 00:53:54,300
We're kind of in game land at that point.

1355
00:53:54,500 --> 00:53:58,300
Now, one thing that I wanted to talk about that's a little bit iffy

1356
00:53:58,300 --> 00:53:59,200
here, right?

1357
00:54:00,000 --> 00:54:03,300
Is this is still kind of janky?

1358
00:54:03,400 --> 00:54:06,000
Because if you think about what happens when we come to this code,

1359
00:54:06,000 --> 00:54:07,000
we've got five minutes left.

1360
00:54:07,000 --> 00:54:08,300
So I just want to kind of talk about it.

1361
00:54:09,100 --> 00:54:10,900
We're clearing the direct sound buffer.

1362
00:54:10,900 --> 00:54:12,500
So now it's all filled with zeros.

1363
00:54:13,000 --> 00:54:14,300
And then we're starting at playing.

1364
00:54:14,300 --> 00:54:15,700
So now Windows is just playing.

1365
00:54:16,700 --> 00:54:20,100
What I would like to do is say, well, the first time we start filling

1366
00:54:20,100 --> 00:54:25,300
it, we don't want to fill it basically from the beginning because that

1367
00:54:25,300 --> 00:54:26,300
doesn't make any sense.

1368
00:54:26,300 --> 00:54:29,300
There's no need to do that because we haven't actually done anything

1369
00:54:29,300 --> 00:54:29,400
yet.

1370
00:54:29,400 --> 00:54:29,900
What we want to

1371
00:54:30,000 --> 00:54:33,000
Do is start filling it somewhere in the buffer based on where direct

1372
00:54:33,000 --> 00:54:35,300
sound is at the time, right?

1373
00:54:35,500 --> 00:54:38,400
So what we want to do is basically in here, right?

1374
00:54:39,300 --> 00:54:43,000
When it figures out, this sort of stuff and it says, you know, where

1375
00:54:43,000 --> 00:54:44,100
the target Christians should be.

1376
00:54:44,300 --> 00:54:48,300
We want to always do the lock from like the right curse or something.

1377
00:54:49,700 --> 00:54:52,700
We'd want to, just put the sound out there, where it should be.

1378
00:54:53,500 --> 00:54:58,800
Now there's a problem that we run into as well, that's worth thinking

1379
00:54:58,800 --> 00:55:02,200
about which is when we look at this and we say, when did we call get

1380
00:55:02,200 --> 00:55:04,500
current position to get the right cursor?

1381
00:55:04,500 --> 00:55:04,700
Right?

1382
00:55:04,700 --> 00:55:08,400
Well, we know that we're going to call that we need to figure out how

1383
00:55:08,400 --> 00:55:11,800
much sound we want to write, if we're going to actually look at the

1384
00:55:11,800 --> 00:55:13,600
sound card to see how much we should do.

1385
00:55:13,600 --> 00:55:18,200
Well, the problem there is by the time we're then going to go through

1386
00:55:18,200 --> 00:55:19,500
when we do that we do that call.

1387
00:55:19,500 --> 00:55:21,300
Windows will tell us basically right here.

1388
00:55:21,300 --> 00:55:23,500
Where is the sound card?

1389
00:55:23,600 --> 00:55:26,700
Playing at that time, but then we're going to get down here.

1390
00:55:26,800 --> 00:55:29,300
And what's going to happen is we're going to call game update and

1391
00:55:29,300 --> 00:55:31,300
render and that's going to take a lot of time.

1392
00:55:31,400 --> 00:55:34,000
Game update and renders going to take like a 60th of a second.

1393
00:55:34,000 --> 00:55:36,100
So we can fully expect that.

1394
00:55:36,100 --> 00:55:39,900
This will will be like eight hundred samples out of date.

1395
00:55:39,900 --> 00:55:42,800
By the time we get down through this, right?

1396
00:55:42,800 --> 00:55:45,900
So we kind of have a mismatch there and we need to start accounting

1397
00:55:45,900 --> 00:55:46,500
for that.

1398
00:55:46,500 --> 00:55:48,500
That's sort of what I was saying is why we have to start getting more

1399
00:55:48,500 --> 00:55:50,900
advanced with these things because there's actually a lot of Fennekin,

1400
00:55:50,900 --> 00:55:53,400
Enos that happens there that we have to think about.

1401
00:55:53,500 --> 00:55:56,100
Now, one way to solve that problem obviously, is to always be very

1402
00:55:56,100 --> 00:55:58,600
latent to always be very far ahead.

1403
00:55:58,700 --> 00:56:02,500
So, for example, we could go in here and we could say that, you know,

1404
00:56:02,500 --> 00:56:03,800
we're always going to start.

1405
00:56:03,800 --> 00:56:07,500
We're going to try and be way ahead that latency sample count is going

1406
00:56:07,500 --> 00:56:10,700
to be like really fairly sizable or something like this.

1407
00:56:11,600 --> 00:56:14,300
But again, these are all things that we kind of have to look at a

1408
00:56:14,300 --> 00:56:17,300
little later when we start start to sort of tighten that down.

1409
00:56:18,300 --> 00:56:21,000
For now, we've gotten things working the same way that they did before

1410
00:56:21,100 --> 00:56:22,000
and that's fine.

1411
00:56:22,200 --> 00:56:24,100
But that's not going to cut it in the end.

1412
00:56:24,100 --> 00:56:26,700
So basically, I'm going to drop a little to do in here and that's

1413
00:56:26,700 --> 00:56:37,500
basically like Tighten Up Sound Logic so that we know where we should

1414
00:56:37,500 --> 00:56:47,600
be writing to and can anticipate the time spent in the game update.

1415
00:56:48,200 --> 00:56:49,600
Because that's going to be pretty important.

1416
00:56:49,600 --> 00:56:51,900
This is like I said, it's pretty janky right now.

1417
00:56:51,900 --> 00:56:53,600
It's not what we would want to do.

1418
00:56:53,600 --> 00:56:56,400
It's good for playing out a sound wave, but in terms of actually

1419
00:56:56,400 --> 00:56:59,500
robustly keeping the sound going, it's not going to be it's and and

1420
00:56:59,500 --> 00:56:59,800
there's

1421
00:57:00,000 --> 00:57:04,200
Basically, the code is structurally correct in, how it's getting the

1422
00:57:04,200 --> 00:57:06,700
data back from the game and how its feeling the sound buffer.

1423
00:57:06,700 --> 00:57:10,200
But it's essentially it's logistically incorrect.

1424
00:57:10,200 --> 00:57:13,300
Because it's asking, if the way that it's doing, it started

1425
00:57:13,300 --> 00:57:15,200
computation just isn't good.

1426
00:57:15,500 --> 00:57:16,600
It was, it was basically.

1427
00:57:16,600 --> 00:57:18,100
That's what we did to get things working in.

1428
00:57:18,100 --> 00:57:18,500
That's fine.

1429
00:57:18,500 --> 00:57:20,900
But we go, we gotta basically take that up a notch.

1430
00:57:21,300 --> 00:57:24,800
I'm not going to start doing that now because we're almost to the Q&A

1431
00:57:24,800 --> 00:57:26,600
but that's basically it for that.

1432
00:57:26,600 --> 00:57:28,000
So, let's take a look.

1433
00:57:28,000 --> 00:57:30,000
I can't bear if there's anything else we're supposed to.

1434
00:57:30,000 --> 00:57:31,300
To do today.

1435
00:57:31,400 --> 00:57:32,900
I don't think so.

1436
00:57:33,300 --> 00:57:35,000
Well, I guess at the very end of the stream here.

1437
00:57:35,100 --> 00:57:38,400
I might as well go ahead and do one thing that someone asked for, they

1438
00:57:38,400 --> 00:57:42,700
were asking to maybe have the this haven't if not exist.

1439
00:57:44,400 --> 00:57:47,800
Basically, in our build dot bat, you'll notice that it always says

1440
00:57:48,100 --> 00:57:50,100
this line and that was annoying.

1441
00:57:50,100 --> 00:57:55,300
Somebody that I guess they were stickler for for checking first.

1442
00:57:55,300 --> 00:57:56,900
So we can do a thing here.

1443
00:57:56,900 --> 00:57:58,600
I never do these.

1444
00:57:59,600 --> 00:57:59,800
Do you do?

1445
00:58:00,000 --> 00:58:02,100
Like this, I think that's how you do it.

1446
00:58:02,300 --> 00:58:06,000
So you just do if not exist the directory, then you give it the make

1447
00:58:06,000 --> 00:58:07,500
door and that works.

1448
00:58:07,500 --> 00:58:08,800
So, I'm pretty sure that works.

1449
00:58:08,900 --> 00:58:13,300
I guess I'll double check that it works because for all, I know it

1450
00:58:13,300 --> 00:58:13,800
might not.

1451
00:58:13,800 --> 00:58:18,800
So, inside that build directory, if I was to temporarily, say renamed

1452
00:58:18,800 --> 00:58:23,400
build to build Foo, would this guy?

1453
00:58:23,400 --> 00:58:24,600
Where is it?

1454
00:58:25,200 --> 00:58:26,200
Would it work?

1455
00:58:26,900 --> 00:58:28,100
Let's take a look.

1456
00:58:28,300 --> 00:58:28,800
It did.

1457
00:58:28,800 --> 00:58:29,700
Okay, so that's

1458
00:58:29,900 --> 00:58:33,200
Fine, let's go ahead and nuke that hoops.

1459
00:58:34,300 --> 00:58:36,100
And then we'll rename it back.

1460
00:58:36,700 --> 00:58:40,500
Okay, so hopefully that takes care of anyone who was was getting, sort

1461
00:58:40,500 --> 00:58:43,700
of forwarded by that or getting sort of annoyed by that coming in

1462
00:58:43,700 --> 00:58:47,200
there that that repeated attempt to make a directory when a directory

1463
00:58:47,200 --> 00:58:48,000
already existed.

1464
00:58:48,400 --> 00:58:53,500
Okay, so, we now have both sound and video happening out in here and

1465
00:58:53,500 --> 00:58:57,100
we basically our video is actually pretty okay.

1466
00:58:57,100 --> 00:58:59,800
There's some things that I want to change a just finish up about that.

1467
00:59:00,000 --> 00:59:02,400
As well, but we could write a whole renderer in here.

1468
00:59:02,400 --> 00:59:03,000
We'd be fine.

1469
00:59:03,000 --> 00:59:05,800
Our sound is still needs a little more tightening.

1470
00:59:05,800 --> 00:59:07,100
Whether we do that tomorrow or not.

1471
00:59:07,100 --> 00:59:07,800
I don't know.

1472
00:59:08,100 --> 00:59:10,300
I probably would rather get the input and everything over there and

1473
00:59:10,300 --> 00:59:13,300
then and then maybe do next week a little sound tightening.

1474
00:59:13,600 --> 00:59:16,500
Just go through and kind of have our Loop a little more laid out, but

1475
00:59:16,500 --> 00:59:17,500
we're pretty good.

1476
00:59:17,600 --> 00:59:18,900
We're in pretty good shape.

1477
00:59:19,400 --> 00:59:22,700
I don't think there's anything left dangling here.

1478
00:59:22,700 --> 00:59:24,100
I think it's pretty good.

1479
00:59:25,600 --> 00:59:26,700
I think it's pretty good.

1480
00:59:26,700 --> 00:59:28,000
So I'm relatively happy with that.

1481
00:59:28,000 --> 00:59:32,700
I think now is a pretty good time to go ahead and start the Q&A.

1482
00:59:33,300 --> 00:59:38,500
So let me see if anyone's got a Q&A out there to ask about.

1483
00:59:39,600 --> 00:59:40,400
Let's see.

1484
00:59:46,100 --> 00:59:48,000
Let's see.

1485
00:59:53,000 --> 00:59:55,300
Trying to figure out where the questions start.

1486
01:00:04,500 --> 01:00:06,500
You're allocating a new buffer every frame.

1487
01:00:06,500 --> 01:00:10,100
They don't get freed until the function exits.

1488
01:00:11,300 --> 01:00:11,500
Sorry.

1489
01:00:11,500 --> 01:00:13,600
I'm not sure that doesn't sound like a question, but that's okay.

1490
01:00:15,100 --> 01:00:16,200
Let's see.

1491
01:00:16,600 --> 01:00:18,000
This may be getting a little ahead of things.

1492
01:00:18,000 --> 01:00:19,600
But will we want to use allocated?

1493
01:00:19,600 --> 01:00:22,200
Do things like store pointers to game objects that are local to the

1494
01:00:22,200 --> 01:00:22,700
player?

1495
01:00:22,700 --> 01:00:26,300
No, so alakay is literally just a local variable.

1496
01:00:27,100 --> 01:00:28,500
So basically all it is.

1497
01:00:28,800 --> 01:00:31,600
I kind of I probably shouldn't have shown it today.

1498
01:00:31,600 --> 01:00:34,100
Like I said virtual Alec was really the right thing.

1499
01:00:34,300 --> 01:00:38,300
There and and more specifically pulling these Alex up ahead up above

1500
01:00:38,300 --> 01:00:42,400
is going to be the right thing eventually, so I probably should have

1501
01:00:42,400 --> 01:00:45,000
gone there first and you know, one of the things that's hard when I'm

1502
01:00:45,000 --> 01:00:49,000
in the Stream, I got to make split-second decisions about what I

1503
01:00:49,000 --> 01:00:50,500
decide to try to show you.

1504
01:00:50,500 --> 01:00:52,900
And I look for opportunities to show you things that might be

1505
01:00:52,900 --> 01:00:55,600
appropriate but I don't always know if they will be right?

1506
01:00:55,600 --> 01:00:59,700
Like I've never tried to allocate a 1 second sound buffer on the stack

1507
01:00:59,700 --> 01:01:00,100
before.

1508
01:01:00,100 --> 01:01:03,500
So for all I know that could have worked fine, although I guess we did

1509
01:01:03,500 --> 01:01:04,000
kind of check.

1510
01:01:04,200 --> 01:01:06,100
That I'm actually surprised that didn't fit.

1511
01:01:07,200 --> 01:01:08,800
It's probably should have, but it would have been just barely.

1512
01:01:08,800 --> 01:01:09,000
All right.

1513
01:01:09,000 --> 01:01:10,800
It doesn't really matter point.

1514
01:01:10,800 --> 01:01:14,000
Being what you have to remember alakay is basically goes away whenever

1515
01:01:14,000 --> 01:01:15,300
a local variable would have gone away.

1516
01:01:15,400 --> 01:01:18,600
So if I do an alligator here, let's say I do an in Star Foo equals

1517
01:01:18,600 --> 01:01:19,800
alakay, right?

1518
01:01:20,400 --> 01:01:22,900
And I say that I want, you know to allocate an inch.

1519
01:01:23,700 --> 01:01:27,700
This is basically, you know, this this is basically what's going to

1520
01:01:27,700 --> 01:01:29,600
happen will show you.

1521
01:01:30,000 --> 01:01:30,600
There we go.

1522
01:01:31,000 --> 01:01:34,100
So our food, let's say we wrote to Star Foo equals.

1523
01:01:34,300 --> 01:01:35,900
I have like that.

1524
01:01:35,900 --> 01:01:36,300
Right?

1525
01:01:36,300 --> 01:01:36,900
There we go.

1526
01:01:37,400 --> 01:01:41,100
So basically, what's going to happen is when I come in here, let's

1527
01:01:41,100 --> 01:01:41,900
take a look.

1528
01:01:43,200 --> 01:01:44,300
Hello, there we go.

1529
01:01:45,200 --> 01:01:47,900
Let us go to where I wrote that.

1530
01:01:48,500 --> 01:01:50,900
So it's basically going to happen is when I come in here and you can

1531
01:01:50,900 --> 01:01:52,300
actually see in the assembly here.

1532
01:01:52,300 --> 01:01:53,900
If I dump into it, right?

1533
01:01:54,500 --> 01:01:55,400
You can basically see that.

1534
01:01:55,400 --> 01:01:58,100
No actual allocation happens, right?

1535
01:01:58,100 --> 01:01:58,600
Nothing.

1536
01:01:58,600 --> 01:01:59,800
Nothing actually occurs.

1537
01:02:00,100 --> 01:02:00,700
What happens?

1538
01:02:00,700 --> 01:02:03,300
Is it just moves the stack?

1539
01:02:03,300 --> 01:02:07,000
It just expands the space in the stack just like it would be for a

1540
01:02:07,000 --> 01:02:07,900
local variable.

1541
01:02:07,900 --> 01:02:08,200
Right?

1542
01:02:08,300 --> 01:02:09,900
So it goes ahead and expand the stack.

1543
01:02:10,000 --> 01:02:12,800
And then basically what we end up with now is our food point.

1544
01:02:13,300 --> 01:02:13,900
Right.

1545
01:02:14,000 --> 01:02:15,900
That's the pointer to Foo, right?

1546
01:02:16,600 --> 01:02:19,500
Y offset is right, is right before it, right.

1547
01:02:19,500 --> 01:02:22,100
You can take a look at what the address of Y offset is.

1548
01:02:22,200 --> 01:02:23,300
They're right next to each other.

1549
01:02:23,300 --> 01:02:23,500
Right?

1550
01:02:23,500 --> 01:02:26,000
I mean, they're not a budding, but they're based on the same space.

1551
01:02:26,200 --> 01:02:30,600
So all that alakay does is just says the same place that I'm storing.

1552
01:02:30,600 --> 01:02:32,200
These local variables for the function.

1553
01:02:32,500 --> 01:02:32,800
I guess.

1554
01:02:32,800 --> 01:02:34,800
I need some memory that I don't know how much it is.

1555
01:02:34,800 --> 01:02:36,900
So I'm just going to pass you a number and I want you to give me that

1556
01:02:36,900 --> 01:02:38,100
much, right?

1557
01:02:39,100 --> 01:02:43,800
What that means is that literally at the at the soonest possible

1558
01:02:43,800 --> 01:02:44,600
instant, right?

1559
01:02:44,600 --> 01:02:47,000
So, this is the scope that we're in, we're in this scope.

1560
01:02:47,000 --> 01:02:48,900
So, if we go down here, right?

1561
01:02:48,900 --> 01:02:50,600
That's, that's here or whatever.

1562
01:02:50,600 --> 01:02:52,200
I can actually set a breakpoint there.

1563
01:02:52,200 --> 01:02:53,600
But, you know, you know what I mean?

1564
01:02:53,600 --> 01:02:58,400
That's like, that's like right down here as soon as the, the control

1565
01:02:58,400 --> 01:02:59,800
flow reaches the end of this.

1566
01:03:00,000 --> 01:03:00,800
Exit it.

1567
01:03:01,900 --> 01:03:04,300
It goes away that memory can go away.

1568
01:03:04,700 --> 01:03:06,300
The compiler might keep it around.

1569
01:03:06,300 --> 01:03:09,100
You know, it's at the compilers discretion basically exactly when it

1570
01:03:09,100 --> 01:03:12,500
cleans up the stack, but at the very least when the function exits

1571
01:03:12,900 --> 01:03:15,300
it's going to reuse that stack for the next function call.

1572
01:03:15,800 --> 01:03:20,800
So you cannot put anything at all in alakay that you want to keep.

1573
01:03:23,900 --> 01:03:25,200
Nothing that you want to keep.

1574
01:03:27,000 --> 01:03:31,700
You basically have to only use it for transient things, just like

1575
01:03:31,700 --> 01:03:32,600
local variables.

1576
01:03:33,100 --> 01:03:33,200
Now.

1577
01:03:33,200 --> 01:03:34,800
There are some exceptions to that.

1578
01:03:35,100 --> 01:03:40,000
Obviously, if you were to alakay in the middle of the main which never

1579
01:03:40,000 --> 01:03:43,200
exits, essentially, then you kind of have it forever.

1580
01:03:43,800 --> 01:03:47,400
But at that point it's also the only reason to really use alakay

1581
01:03:47,600 --> 01:03:50,600
instead of a regular Alec is because you expect it to go away.

1582
01:03:50,700 --> 01:03:54,800
I could have just called virtual Alec and got the memory and kept it

1583
01:03:55,300 --> 01:03:56,000
which is what I had to do.

1584
01:03:56,200 --> 01:03:56,900
Doing right?

1585
01:03:56,900 --> 01:04:00,900
So there is no real compelling reason to use alakay, unless you are

1586
01:04:00,900 --> 01:04:04,800
trying to use that stat clean up to get rid of the memory for you,

1587
01:04:04,900 --> 01:04:06,700
when you're done with it, right, too.

1588
01:04:07,200 --> 01:04:09,900
So it's really, it's a thing for temporary computation.

1589
01:04:10,000 --> 01:04:11,200
And that's really all it is.

1590
01:04:11,300 --> 01:04:14,800
You don't you can't use it for storing, anything permanent.

1591
01:04:16,500 --> 01:04:16,900
There we go.

1592
01:04:21,200 --> 01:04:22,700
Let's see.

1593
01:04:30,200 --> 01:04:34,700
If the DS buffer lock fails, you'll pass garbage, vars to the game

1594
01:04:34,700 --> 01:04:37,400
code update by the game output.

1595
01:04:38,300 --> 01:04:39,600
Buffer set up.

1596
01:04:39,600 --> 01:04:40,000
Yes.

1597
01:04:40,000 --> 01:04:43,700
That's, that's totally true and I can put it to do in there for you.

1598
01:04:43,700 --> 01:04:47,600
Like I said, this, this logic kind of needs to go away, but if it

1599
01:04:47,600 --> 01:04:49,300
makes you feel more comfortable, right?

1600
01:04:49,300 --> 01:04:56,200
You can do make sure this is guarded entirely, right?

1601
01:04:57,400 --> 01:04:59,300
Because yeah, we don't and we also don't know Zach.

1602
01:04:59,300 --> 01:04:59,600
What's going on?

1603
01:04:59,600 --> 01:04:59,900
I mean,

1604
01:05:00,000 --> 01:05:05,500
Suppose, I mean one thing I could do if it makes you feel better to is

1605
01:05:05,500 --> 01:05:07,100
like a do this, right?

1606
01:05:08,500 --> 01:05:10,000
And that would be fine as well.

1607
01:05:10,200 --> 01:05:13,500
Because then, if it does fail, this, you know, we'll get set to zero

1608
01:05:13,500 --> 01:05:14,700
here and that'll be fine.

1609
01:05:15,200 --> 01:05:17,500
But again, this is getting vaporized.

1610
01:05:17,500 --> 01:05:20,500
So I wouldn't worry too much about that because this computation is

1611
01:05:20,500 --> 01:05:22,000
not right.

1612
01:05:22,400 --> 01:05:24,700
It needs to get it, needs to get changed.

1613
01:05:24,700 --> 01:05:26,600
So we'll do that shortly.

1614
01:05:32,700 --> 01:05:34,900
When you say 60, FPS might not be feasible.

1615
01:05:34,900 --> 01:05:37,400
Do you mean for non-pc platforms or specifically?

1616
01:05:37,500 --> 01:05:40,700
So I mean for non Hardware acceleration or it might even be for

1617
01:05:40,700 --> 01:05:41,300
Hardware acceleration.

1618
01:05:41,300 --> 01:05:45,200
I mean, basically, we don't know going into a game.

1619
01:05:45,200 --> 01:05:48,200
What's going to be feasible, frame rate rise, because there's a

1620
01:05:48,200 --> 01:05:53,700
trade-off there, 60 frames a second means, you have worse looking

1621
01:05:53,700 --> 01:05:55,400
Graphics period.

1622
01:05:55,500 --> 01:05:58,300
I mean, that's, that's just by definition.

1623
01:05:58,400 --> 01:05:59,900
You have half as much time to generate the graph.

1624
01:06:00,000 --> 01:06:00,300
X.

1625
01:06:00,900 --> 01:06:04,400
So, basically, if you're at 60 frames a second, they will look half as

1626
01:06:04,400 --> 01:06:07,400
good as 30 frames a second and it's actually even worse than that

1627
01:06:07,400 --> 01:06:11,600
because some things are constant and don't scale depending on that.

1628
01:06:11,600 --> 01:06:16,900
And so, like there's at the risk of getting into something that's a

1629
01:06:16,900 --> 01:06:17,600
little bit too off.

1630
01:06:17,600 --> 01:06:21,100
Topic, what I mean, is basically, if you imagine, you have a post

1631
01:06:21,100 --> 01:06:24,800
process and a pre process that happened before doing the actual

1632
01:06:24,800 --> 01:06:27,500
Graphics, like, say a post-process filter on the screen.

1633
01:06:27,800 --> 01:06:29,800
Well, that filter is going to be the same amount of time.

1634
01:06:30,000 --> 01:06:32,400
I'm no matter whether you're doing it 30 frames a second or 60 frames

1635
01:06:32,400 --> 01:06:33,000
a second.

1636
01:06:33,400 --> 01:06:37,600
So basically if you expand to doing something at 30 frames a second it

1637
01:06:37,600 --> 01:06:41,700
takes up the post process takes up a lot less of a fraction of the

1638
01:06:41,700 --> 01:06:45,000
frame time than it did at 60th of a second.

1639
01:06:45,000 --> 01:06:48,100
So, the actual time you have to do, all your render stuff actually

1640
01:06:48,200 --> 01:06:50,300
goes up by more than a factor of two.

1641
01:06:51,600 --> 01:06:52,700
That's a little confusing.

1642
01:06:54,000 --> 01:06:57,000
It's probably bad explanation table that for much later when we talk

1643
01:06:57,000 --> 01:07:01,900
about rendering stuff but point being we may decide not to be 30

1644
01:07:01,900 --> 01:07:05,000
frames a second, even with Hardware acceleration if we want the

1645
01:07:05,000 --> 01:07:07,900
graphics to look better because for any given game, you have to make a

1646
01:07:07,900 --> 01:07:12,800
call about whether 60 frames per second is worth it or not.

1647
01:07:13,600 --> 01:07:16,600
Now, of course, it'll always be able to run at 60 frames a second.

1648
01:07:17,200 --> 01:07:20,900
Two years later when all the graphics cards are way better and stuff,

1649
01:07:21,000 --> 01:07:21,100
right?

1650
01:07:22,000 --> 01:07:28,400
But I mean at launch at the Target platform normal, you know person

1651
01:07:28,400 --> 01:07:34,100
does not own 50, SLI graphics cards and a giant water cooled case

1652
01:07:34,500 --> 01:07:35,200
machine.

1653
01:07:35,900 --> 01:07:39,000
Then maybe we'll decide 30 Hertz is better because we can make

1654
01:07:39,000 --> 01:07:40,200
prettier Graphics or something.

1655
01:07:43,800 --> 01:07:44,500
Let's see.

1656
01:07:46,200 --> 01:07:46,900
Let's see.

1657
01:07:51,500 --> 01:07:53,700
For a clean build blowing away build each time.

1658
01:07:53,700 --> 01:07:54,300
Would be nice.

1659
01:07:54,300 --> 01:07:57,200
But then the solution file is there are we not worried about clean

1660
01:07:57,200 --> 01:07:57,800
builds?

1661
01:07:58,000 --> 01:07:58,400
Yes.

1662
01:07:59,100 --> 01:08:01,600
We are not worried about clean builds at all because we rebuild

1663
01:08:01,600 --> 01:08:02,500
everything every time.

1664
01:08:02,500 --> 01:08:06,800
So build clean is something that you only have to do if you are doing

1665
01:08:06,800 --> 01:08:08,500
partial rebuild, right?

1666
01:08:08,500 --> 01:08:09,400
Since we build everything.

1667
01:08:09,400 --> 01:08:11,100
Every time we don't care at all.

1668
01:08:11,500 --> 01:08:13,100
We don't need a clean build.

1669
01:08:13,200 --> 01:08:15,900
We never will have that thing where the bill gets weirdly out-of-date.

1670
01:08:15,900 --> 01:08:17,300
It solves all those problems.

1671
01:08:17,300 --> 01:08:18,899
If you just build with a batch file that builds

1672
01:08:19,000 --> 01:08:19,399
Everything.

1673
01:08:19,600 --> 01:08:21,300
So we don't ever have to worry about a clean build.

1674
01:08:21,399 --> 01:08:24,899
So the fact that the sln is in there, doesn't matter to us because

1675
01:08:24,899 --> 01:08:26,700
we're never going to have to clean out that directory.

1676
01:08:26,700 --> 01:08:29,500
Now, you could move the sln somewhere else if you wanted to, that's

1677
01:08:29,500 --> 01:08:30,399
entirely up to you.

1678
01:08:31,700 --> 01:08:32,000
Yeah.

1679
01:08:38,300 --> 01:08:41,100
The allocating every frame was your bug with Alec, a you were calling

1680
01:08:41,100 --> 01:08:43,399
it in a loop, that's actually fine.

1681
01:08:43,899 --> 01:08:46,600
So basically, it doesn't matter if you call allocating the loop

1682
01:08:46,600 --> 01:08:48,700
because alakay goes away at the scope.

1683
01:08:48,700 --> 01:08:51,000
I believe, unless I'm wrong about that.

1684
01:08:51,100 --> 01:08:54,300
So for example, if I want to, but maybe that's not true.

1685
01:08:54,500 --> 01:08:55,700
Maybe I'm wrong about that.

1686
01:08:56,700 --> 01:08:58,100
I don't use Alec a very often.

1687
01:09:01,100 --> 01:09:03,000
Remember the last time I actually used alakay.

1688
01:09:04,200 --> 01:09:08,700
But but so I'm just going to go ahead and allocate something

1689
01:09:08,899 --> 01:09:12,600
relatively large here and see if that's actually true.

1690
01:09:12,899 --> 01:09:14,800
Just so I can't know, for sure.

1691
01:09:16,200 --> 01:09:17,899
Yeah, hmm.

1692
01:09:18,000 --> 01:09:18,300
Okay.

1693
01:09:18,300 --> 01:09:21,399
So, basically, that I think you're actually right about that, then

1694
01:09:21,500 --> 01:09:22,800
that does suggest, that that's true.

1695
01:09:23,100 --> 01:09:26,100
So, I was assuming that that would get cleaned up on the scope, but it

1696
01:09:26,100 --> 01:09:27,899
only gets cleaned up on the function.

1697
01:09:28,300 --> 01:09:31,000
I definitely have never called alakay in the loop before, that's

1698
01:09:31,000 --> 01:09:33,800
definitely true and I home hardly ever call alakay at all.

1699
01:09:34,899 --> 01:09:36,600
But it looks like okay.

1700
01:09:36,800 --> 01:09:37,100
Yeah.

1701
01:09:37,100 --> 01:09:38,399
So basically, I guess what?

1702
01:09:38,399 --> 01:09:39,399
That's a good catch.

1703
01:09:39,399 --> 01:09:42,000
So basically, let me take a look here.

1704
01:09:43,300 --> 01:09:44,100
Yeah, yeah.

1705
01:09:44,200 --> 01:09:44,800
Okay.

1706
01:09:44,800 --> 01:09:46,700
So what does it say that?

1707
01:09:47,200 --> 01:09:48,100
I know what it says.

1708
01:09:51,399 --> 01:09:53,000
Let's see.

1709
01:09:54,000 --> 01:09:54,200
Yeah.

1710
01:09:54,200 --> 01:09:54,500
Okay.

1711
01:09:54,500 --> 01:09:58,700
So basically it doesn't actually scope the alakay it only Scopes it to

1712
01:09:58,700 --> 01:09:59,400
the function.

1713
01:09:59,500 --> 01:10:00,700
So basically, okay.

1714
01:10:00,700 --> 01:10:03,800
So basically all that's going to mean is basically it's only going to

1715
01:10:03,800 --> 01:10:05,700
free when you leave so I should at.

1716
01:10:05,700 --> 01:10:06,000
Yes.

1717
01:10:06,000 --> 01:10:06,600
Oh, that makes sense.

1718
01:10:06,600 --> 01:10:08,200
So okay that that all makes good sense.

1719
01:10:08,200 --> 01:10:09,400
Now that was just mean, never.

1720
01:10:09,400 --> 01:10:12,700
I've never I've literally never called alakay in the loop before, so I

1721
01:10:12,700 --> 01:10:13,000
had no.

1722
01:10:13,200 --> 01:10:15,500
Idea what it would actually do in there.

1723
01:10:15,900 --> 01:10:19,700
So if we had done it right here, basically, this is not in a loop.

1724
01:10:19,700 --> 01:10:22,700
If we did it right here that suggests, it should have worked.

1725
01:10:23,500 --> 01:10:26,700
I just got dropped it in where it was logically, let's go ahead there.

1726
01:10:27,200 --> 01:10:32,800
So I should be able to instead do it this way.

1727
01:10:34,300 --> 01:10:35,600
Thank you, by the way.

1728
01:10:35,700 --> 01:10:36,100
Dyslexic.

1729
01:10:36,100 --> 01:10:38,000
Deity, or wait.

1730
01:10:38,000 --> 01:10:39,000
No, who was it?

1731
01:10:39,000 --> 01:10:39,300
Yes.

1732
01:10:39,300 --> 01:10:40,100
Dyslexic deity.

1733
01:10:42,100 --> 01:10:42,700
That catch.

1734
01:10:42,900 --> 01:10:45,500
Having more eyes on the stream is so good.

1735
01:10:46,600 --> 01:10:48,900
Like I probably would have just moved on and been, like, I would ever,

1736
01:10:48,900 --> 01:10:50,900
because I never use alakay, and I was just like, whatever.

1737
01:10:51,500 --> 01:10:52,300
But that's like, cool.

1738
01:10:52,300 --> 01:10:54,900
Like I learned something, right?

1739
01:10:55,000 --> 01:10:58,200
And that doesn't happen when you're just programming by yourself.

1740
01:10:58,600 --> 01:10:58,900
Yeah.

1741
01:10:58,900 --> 01:11:00,500
Okay, so he's so that's totally awesome.

1742
01:11:00,600 --> 01:11:02,200
So basically, we could have used alakay.

1743
01:11:02,300 --> 01:11:04,100
It was not a problem size.

1744
01:11:04,100 --> 01:11:06,500
Wise, we could have used alligator right here instead of virtual lock

1745
01:11:06,500 --> 01:11:07,600
and put it on the stack.

1746
01:11:07,600 --> 01:11:10,400
The problem was that I put it in a loop because I just assuming, oh,

1747
01:11:10,400 --> 01:11:14,600
the compiler, will clean it up when we exit that Loop, right?

1748
01:11:14,600 --> 01:11:15,400
When it comes down here.

1749
01:11:15,400 --> 01:11:15,800
It'll just grow.

1750
01:11:16,000 --> 01:11:19,400
The shocks think the shrink the stack to be honest.

1751
01:11:20,300 --> 01:11:23,300
I don't understand why it doesn't do that.

1752
01:11:23,300 --> 01:11:26,000
But I guess it's better that way because the compiler has more options

1753
01:11:26,000 --> 01:11:28,300
if it knows, it only has to clean it up later.

1754
01:11:28,500 --> 01:11:32,100
So that means you basically can't ever use it in a loop, but that's

1755
01:11:32,100 --> 01:11:32,500
okay.

1756
01:11:32,600 --> 01:11:34,800
Because we like I said, I've never actually used a loop before.

1757
01:11:34,800 --> 01:11:35,900
And in this case.

1758
01:11:36,300 --> 01:11:37,900
I didn't even want to use it in the loop.

1759
01:11:37,900 --> 01:11:40,200
I just had dropped it in where the loop was because I wasn't thinking

1760
01:11:40,200 --> 01:11:43,200
about it because we don't actually need it in the loop for any given

1761
01:11:43,200 --> 01:11:43,500
reason.

1762
01:11:43,500 --> 01:11:45,700
We just wanted to allocate the buffer.

1763
01:11:46,000 --> 01:11:47,300
One time so that's fine.

1764
01:11:47,500 --> 01:11:48,700
So that's actually totally fine.

1765
01:11:48,700 --> 01:11:49,800
You could use alakay there.

1766
01:11:50,400 --> 01:11:53,700
I'm not probably going to leave that in there because I want to use

1767
01:11:53,700 --> 01:11:57,100
Virtual Alec eventually, so I'll delete that.

1768
01:11:57,200 --> 01:11:59,800
But thank you very much just like Zod for pointing that out because

1769
01:12:00,000 --> 01:12:04,100
That is good to know for people who are going to use alakay.

1770
01:12:04,600 --> 01:12:06,600
That is you got to keep them out of the loop.

1771
01:12:06,600 --> 01:12:07,900
So you got to keep them only anything.

1772
01:12:08,200 --> 01:12:08,600
Yeah.

1773
01:12:09,800 --> 01:12:11,800
Well, you learn something new every day.

1774
01:12:13,100 --> 01:12:15,100
I guess I should have been using allocate a lot more.

1775
01:12:15,900 --> 01:12:16,800
Although I still don't really.

1776
01:12:16,800 --> 01:12:19,000
Yeah, like I said, I just I don't use it very often.

1777
01:12:19,000 --> 01:12:23,000
So it doesn't it's not that everything that comes up super much for

1778
01:12:23,000 --> 01:12:23,300
me.

1779
01:12:24,800 --> 01:12:26,200
Let's see.

1780
01:12:27,900 --> 01:12:28,600
Can you explain again?

1781
01:12:28,600 --> 01:12:30,500
Why our current sound buffer fills problematic?

1782
01:12:30,500 --> 01:12:32,200
Yes, let's do that.

1783
01:12:39,300 --> 01:12:42,700
So we'll bring up again paint brush, which is not the best paint

1784
01:12:42,700 --> 01:12:43,600
package in the world.

1785
01:12:43,600 --> 01:12:47,400
We admit that freely and let's see if I can draw something I can.

1786
01:12:48,200 --> 01:12:49,600
So basically here's what I was saying.

1787
01:12:49,600 --> 01:12:51,200
So we've got this situation.

1788
01:12:51,200 --> 01:12:53,000
We allocated our buffer and that's good.

1789
01:12:53,500 --> 01:12:55,400
And then what we did is we cleared it to 0.

1790
01:12:55,400 --> 01:12:56,900
So it's empty, right?

1791
01:12:56,900 --> 01:12:58,400
And then we started at playing.

1792
01:12:58,400 --> 01:13:01,900
So, now, direct sound is playing it through, and direct sound has a

1793
01:13:01,900 --> 01:13:03,100
play cursor, right?

1794
01:13:03,100 --> 01:13:06,300
Here's the play cursor and then it has a right cursor.

1795
01:13:06,300 --> 01:13:06,500
You know what?

1796
01:13:06,500 --> 01:13:07,500
I'm going to make this a little

1797
01:13:07,600 --> 01:13:08,900
Drew myself and just say p.

1798
01:13:09,500 --> 01:13:13,300
And then it's got a right cursor W, and it doesn't want us to write in

1799
01:13:13,300 --> 01:13:14,200
here, right?

1800
01:13:14,200 --> 01:13:15,800
Because this is the area that it's busy.

1801
01:13:16,000 --> 01:13:17,900
Possibly copying out to the sound card because, remember this is

1802
01:13:17,900 --> 01:13:20,000
constantly moving forwards, time.

1803
01:13:20,000 --> 01:13:24,200
Waits for no code, if you will, and then there's the right cursor.

1804
01:13:24,600 --> 01:13:29,000
So, ideally, what's happening is we have some place that we want to

1805
01:13:29,000 --> 01:13:30,200
write our sound too.

1806
01:13:30,300 --> 01:13:30,500
Right?

1807
01:13:30,500 --> 01:13:33,100
So we have some place we're writing our sound too.

1808
01:13:33,700 --> 01:13:34,200
Okay.

1809
01:13:35,800 --> 01:13:38,900
So at the start of the code, this is cleared to 0.

1810
01:13:39,000 --> 01:13:40,100
We start playing forwards.

1811
01:13:40,100 --> 01:13:41,200
It's playing silence.

1812
01:13:41,600 --> 01:13:43,400
Right now.

1813
01:13:43,400 --> 01:13:45,800
We query it and we say, where is the play cursor?

1814
01:13:45,800 --> 01:13:47,300
It says, well, the play cursor is here.

1815
01:13:47,800 --> 01:13:51,200
We're like, okay, we know we have a, you know, a 60th of a second

1816
01:13:51,200 --> 01:13:53,300
worth of frame time that we're going to wait for.

1817
01:13:53,300 --> 01:13:55,500
And then we've got some amount of latency you want.

1818
01:13:55,500 --> 01:13:59,500
So like ideally we'd like to write right here, right?

1819
01:13:59,700 --> 01:14:01,200
That's what we should be doing.

1820
01:14:01,200 --> 01:14:03,900
We should be saying ideally we'd like to write right here and then

1821
01:14:03,900 --> 01:14:05,500
we'd say ideally we'd like,

1822
01:14:05,700 --> 01:14:06,100
Right?

1823
01:14:06,100 --> 01:14:09,300
Right here and we'd like to fill two right here.

1824
01:14:09,300 --> 01:14:11,900
This is our optimal strategy, right?

1825
01:14:12,800 --> 01:14:17,600
And then the next time around, we query again for the second frame and

1826
01:14:17,600 --> 01:14:21,300
let's say we find out that the play, the play cursor ended up here,

1827
01:14:21,500 --> 01:14:21,800
right?

1828
01:14:21,800 --> 01:14:23,300
So it's been playing part of our thing.

1829
01:14:24,100 --> 01:14:27,400
Now, we don't have the freedom now, right?

1830
01:14:27,500 --> 01:14:32,200
To just write anywhere, we want, we have to write from where we left

1831
01:14:32,200 --> 01:14:33,800
off to continue our sine wave.

1832
01:14:33,900 --> 01:14:35,400
And then we say, well, if the play cursors here,

1833
01:14:35,600 --> 01:14:38,700
you know, our optimal fill is out to there or whatever, right?

1834
01:14:40,200 --> 01:14:43,100
So basically what I was trying to say before is although are

1835
01:14:43,100 --> 01:14:46,900
relatively janky code is doing that second part correctly.

1836
01:14:46,900 --> 01:14:49,000
It's saying, where is the play cursor?

1837
01:14:49,100 --> 01:14:52,300
Let's figure out where to write to and we'll fill from where we left

1838
01:14:52,300 --> 01:14:53,700
off up to there.

1839
01:14:53,900 --> 01:14:55,400
That's working correctly right now.

1840
01:14:55,600 --> 01:14:56,600
What's not working correctly?

1841
01:14:56,600 --> 01:14:58,000
Is that first time?

1842
01:14:58,200 --> 01:14:59,600
So the first time through

1843
01:15:00,100 --> 01:15:02,900
Basically, what we're doing is we're going to right from the beginning

1844
01:15:02,900 --> 01:15:06,700
of the buffer always which is guaranteed to be wrong and stupid

1845
01:15:06,700 --> 01:15:09,100
because basically, what it's going to do is to play cursor, is going

1846
01:15:09,100 --> 01:15:09,800
to be here.

1847
01:15:09,900 --> 01:15:10,700
We're going to look at it.

1848
01:15:10,700 --> 01:15:12,700
We're going to say, oh we'd like to fill to here.

1849
01:15:12,900 --> 01:15:15,200
Then it's going to fill this coal thing.

1850
01:15:15,600 --> 01:15:18,500
Including the region that direct sound told us specifically.

1851
01:15:18,500 --> 01:15:19,500
It didn't want us to fill.

1852
01:15:20,000 --> 01:15:20,700
Does that make sense?

1853
01:15:21,600 --> 01:15:26,500
So what we really want to do ideally is we want to make this logic a

1854
01:15:26,500 --> 01:15:29,700
little more sound and just do the first time through actually.

1855
01:15:30,000 --> 01:15:33,500
Realize that we don't have to continue from any particular location

1856
01:15:33,800 --> 01:15:36,700
and start it up at the right point, right?

1857
01:15:36,800 --> 01:15:37,900
Hopefully that makes some sense.

1858
01:15:42,300 --> 01:15:42,900
Let's see.

1859
01:15:43,700 --> 01:15:44,300
Didn't you say that?

1860
01:15:44,300 --> 01:15:46,400
We should write the sound far ahead of the graphic, so that it syncs

1861
01:15:46,400 --> 01:15:48,800
properly, wouldn't the current method of updated graphics and sound on

1862
01:15:48,800 --> 01:15:49,300
the same frame?

1863
01:15:49,300 --> 01:15:51,100
Cause some lag on the sound know.

1864
01:15:51,500 --> 01:15:55,600
So basically, what we're going to do is we'll have the frame, right?

1865
01:15:55,600 --> 01:15:58,400
And we'll know that the frame is going to be displayed here.

1866
01:15:58,500 --> 01:16:00,700
Right here is the frame of Graphics.

1867
01:16:01,500 --> 01:16:02,800
Yeah, like that.

1868
01:16:03,000 --> 01:16:05,300
So we know we're going to start displaying the frame here.

1869
01:16:05,400 --> 01:16:08,600
And so we know that we just fill in the audio right here, right?

1870
01:16:08,600 --> 01:16:11,600
And so we're Computing that somewhere back here, which is

1871
01:16:11,600 --> 01:16:12,100
Fine.

1872
01:16:12,500 --> 01:16:15,900
And then we just make sure that we output each at the correct time.

1873
01:16:16,000 --> 01:16:18,300
So, will predict when we're going to flip the frame.

1874
01:16:18,400 --> 01:16:21,100
We'll line up the sound there and then we'll go and again, like I

1875
01:16:21,100 --> 01:16:23,100
said, this is going to be kind of complicated code.

1876
01:16:23,300 --> 01:16:25,400
That's why I say, our current ones pretty janky because we're not

1877
01:16:25,400 --> 01:16:28,200
doing all the stuff we need to do to actually make any of this happen.

1878
01:16:28,600 --> 01:16:30,800
But like I said, I got to kind of walk us through it.

1879
01:16:31,200 --> 01:16:36,100
A wave at a time to avoid just throwing in a ton of code and then

1880
01:16:36,100 --> 01:16:38,500
being like, Oh, well, the reason this thing is doing this is because

1881
01:16:38,500 --> 01:16:41,300
it's other thing that we haven't talked about and that so I can't

1882
01:16:41,300 --> 01:16:41,500
quite

1883
01:16:41,700 --> 01:16:42,700
Do all of this at once.

1884
01:16:42,700 --> 01:16:45,500
So we're just starting with the basic one, which is just chasing the

1885
01:16:45,500 --> 01:16:49,400
play cursor properly, which is now working in so that we don't get any

1886
01:16:49,400 --> 01:16:49,700
skips.

1887
01:16:49,700 --> 01:16:53,300
And that's good but the startup is wrong and the alignment is wrong

1888
01:16:53,500 --> 01:16:55,700
because we're not actually trying to, we're not doing anything

1889
01:16:55,700 --> 01:16:58,200
intelligent right now to try and sink our audio with our video.

1890
01:16:58,700 --> 01:17:01,900
And we may not for a while because that's kind of advanced.

1891
01:17:08,600 --> 01:17:10,300
Since alakay is just a function call.

1892
01:17:10,300 --> 01:17:12,300
How does the compiler know when to free the memory?

1893
01:17:12,800 --> 01:17:14,200
It's not a function call.

1894
01:17:14,200 --> 01:17:16,800
So I think that's what I was trying to show before when we stepped in

1895
01:17:16,900 --> 01:17:19,600
It's actually an intrinsic to the compiler that tells it to do a

1896
01:17:19,600 --> 01:17:20,500
specific thing.

1897
01:17:21,100 --> 01:17:24,200
So it's kind of like our dtsc when we look at that before it's

1898
01:17:24,200 --> 01:17:26,800
basically telling it to do a specific set of CPU operations.

1899
01:17:26,800 --> 01:17:27,400
In this case.

1900
01:17:27,800 --> 01:17:30,700
The CPU operation is to expand large the stack so it's to move the

1901
01:17:30,700 --> 01:17:33,400
stack pointer or the stack, top basically.

1902
01:17:33,400 --> 01:17:37,500
So it knows that it is that that it's using that memory.

1903
01:17:40,600 --> 01:17:41,500
Let's see.

1904
01:17:45,200 --> 01:17:47,700
Will we split our game sound updates out of game update?

1905
01:17:47,700 --> 01:17:50,500
And render said it can be called from a callback or another thread.

1906
01:17:50,700 --> 01:17:51,600
Yeah, I think.

1907
01:17:51,600 --> 01:17:51,800
So.

1908
01:17:51,800 --> 01:17:52,900
That's why I was saying earlier.

1909
01:17:52,900 --> 01:17:56,200
I think I said in a previous stream that we may eventually have to

1910
01:17:56,200 --> 01:17:58,600
split it out, to fill it on a separate thread.

1911
01:17:59,000 --> 01:17:59,900
We may decide never

1912
01:18:00,000 --> 01:18:00,300
Do that.

1913
01:18:00,300 --> 01:18:02,000
There's plenty of game to ship that don't do that.

1914
01:18:02,400 --> 01:18:06,200
But if we want to do that, then we would have to put it up, but I'm

1915
01:18:06,200 --> 01:18:07,500
not going to put it up until we have to

1916
01:18:16,600 --> 01:18:19,500
So according to allocate, according to amnesty and Alec is deprecated.

1917
01:18:19,500 --> 01:18:20,800
Should we not use malloc?

1918
01:18:20,800 --> 01:18:21,700
I like it suggests.

1919
01:18:22,100 --> 01:18:24,900
I so as I have amply demonstrated.

1920
01:18:24,900 --> 01:18:29,700
I never use alakay really, it's just not something that I ever do and

1921
01:18:29,700 --> 01:18:34,200
so like, like I did not even know that it wouldn't cleaned up at

1922
01:18:34,200 --> 01:18:34,500
Loops.

1923
01:18:34,500 --> 01:18:38,500
I assume that it would, I don't know the difference between Malachi

1924
01:18:38,500 --> 01:18:42,200
and Alec a the fact that it's deprecated and it says, tells you not to

1925
01:18:42,200 --> 01:18:45,800
use it suggests that you should probably use malloc a, but I don't

1926
01:18:45,800 --> 01:18:45,900
actually

1927
01:18:46,000 --> 01:18:47,900
We know what the difference is.

1928
01:18:47,900 --> 01:18:48,900
You should check them out here.

1929
01:18:48,900 --> 01:18:51,200
If you actually care about that.

1930
01:18:51,200 --> 01:18:53,600
Like I said, I don't really want to use alakay.

1931
01:18:53,700 --> 01:18:56,500
I would rather use Virtual a lot for all of our memory including

1932
01:18:56,500 --> 01:18:59,600
Temporaries and probably will.

1933
01:19:00,800 --> 01:19:02,100
I tried to show some out gay stuff.

1934
01:19:02,100 --> 01:19:04,900
I probably just shouldn't have sorry to confuse people with that.

1935
01:19:04,900 --> 01:19:07,600
Like I said, it's not something I use and so I'm not really in a good

1936
01:19:07,600 --> 01:19:10,500
position to talk about it any further than just to point out what it

1937
01:19:10,500 --> 01:19:13,500
did and it seems like some people on the stream or pretty

1938
01:19:13,500 --> 01:19:14,200
knowledgeable about it.

1939
01:19:14,200 --> 01:19:15,500
They're the ones who corrected my bug.

1940
01:19:15,500 --> 01:19:15,800
So

1941
01:19:16,000 --> 01:19:16,900
Maybe on the forums.

1942
01:19:16,900 --> 01:19:21,600
Someone someone who is an alligator type person could speak to that.

1943
01:19:24,400 --> 01:19:27,700
But I don't know, I've never I don't even think I've ever shipped code

1944
01:19:27,700 --> 01:19:29,100
that had an Alec a in it.

1945
01:19:30,400 --> 01:19:32,100
I've used it a couple times for testing.

1946
01:19:32,500 --> 01:19:34,900
Like the thing that I was just about to do is something I would do in

1947
01:19:34,900 --> 01:19:35,500
testing.

1948
01:19:36,400 --> 01:19:40,000
I guess I just was never unfortunate enough to throw it in a loop, but

1949
01:19:40,000 --> 01:19:42,200
I never actually ship code that has allocated in it.

1950
01:19:42,700 --> 01:19:45,400
Because I almost always have a place that I want my memory to go by

1951
01:19:45,400 --> 01:19:46,700
the time, I'm actually done.

1952
01:19:47,100 --> 01:19:48,200
So

1953
01:19:49,000 --> 01:19:49,700
Yeah, I'm sorry.

1954
01:19:49,700 --> 01:19:51,700
I just don't have any experience with it so I can help.

1955
01:19:57,700 --> 01:20:00,400
Tom Forsythe says, Alec a scope versus function is probably a see

1956
01:20:00,400 --> 01:20:01,500
Legacy versus C++.

1957
01:20:01,500 --> 01:20:02,200
That's probably true.

1958
01:20:02,200 --> 01:20:04,700
C++ is more about cleaning things up in Scopes.

1959
01:20:05,600 --> 01:20:07,000
And so it might be old school.

1960
01:20:07,000 --> 01:20:07,500
See.

1961
01:20:12,200 --> 01:20:14,000
Let's see.

1962
01:20:17,900 --> 01:20:20,000
Can you provide a log of the chat on the website?

1963
01:20:20,000 --> 01:20:21,400
There are a lot of good questions here.

1964
01:20:24,100 --> 01:20:26,000
I don't really want to have to try and maintain that.

1965
01:20:26,000 --> 01:20:28,400
If someone wants to put up a site that the chat log, you can do it

1966
01:20:28,400 --> 01:20:29,000
pretty easily.

1967
01:20:29,000 --> 01:20:32,400
You can run something like hex chat that just records the log and then

1968
01:20:32,400 --> 01:20:34,600
you could post it so that you're more than welcome to do so, but

1969
01:20:34,600 --> 01:20:36,100
that's probably not something that I will do.

1970
01:20:43,600 --> 01:20:43,800
Okay.

1971
01:20:43,800 --> 01:20:47,200
So plain flavored who, I'm not sure why that is.

1972
01:20:47,200 --> 01:20:50,800
But says, Malachi decrements to stack at the size is less than 1 K or

1973
01:20:50,800 --> 01:20:52,800
calls Malik otherwise, okay.

1974
01:20:52,800 --> 01:20:55,400
So basically alakay that's interesting.

1975
01:20:55,700 --> 01:20:57,900
So basically what the person on the stream says, and I'm sorry.

1976
01:20:57,900 --> 01:20:58,800
Like I said, I don't know.

1977
01:20:58,800 --> 01:20:59,800
I'm not an Alec a person.

1978
01:21:00,500 --> 01:21:03,600
But I'll just say what he said in case this helps you understand it

1979
01:21:03,700 --> 01:21:06,600
and you can go read the documentation to check what he was saying.

1980
01:21:06,600 --> 01:21:08,100
Is basically Malachi.

1981
01:21:08,800 --> 01:21:11,300
Basically will actually do a real allocation.

1982
01:21:11,300 --> 01:21:13,600
If you're trying to allocate more than one k.

1983
01:21:14,100 --> 01:21:17,700
So and then it will automatically insert a free at the end.

1984
01:21:18,200 --> 01:21:19,200
So that's kind of Handy.

1985
01:21:19,200 --> 01:21:20,000
Actually, I guess.

1986
01:21:20,000 --> 01:21:21,300
I don't know seems reasonable.

1987
01:21:21,400 --> 01:21:23,400
I doesn't sound like a problem to me.

1988
01:21:24,000 --> 01:21:26,200
So I would say, yeah, that does sound kind of cool.

1989
01:21:26,300 --> 01:21:26,900
I don't know.

1990
01:21:27,000 --> 01:21:28,200
Like I said, I don't use them.

1991
01:21:28,200 --> 01:21:28,900
I'm not sure.

1992
01:21:34,200 --> 01:21:36,700
Can you talk a bit about how you can safely predict where the flip

1993
01:21:36,700 --> 01:21:39,000
happened so that you can write sound there?

1994
01:21:40,500 --> 01:21:41,600
Yeah.

1995
01:21:41,800 --> 01:21:47,300
So basically, what we're probably going to do and this this kind of

1996
01:21:47,300 --> 01:21:49,000
code is always pretty tough.

1997
01:21:49,600 --> 01:21:50,900
It's when we actually do it.

1998
01:21:50,900 --> 01:21:51,500
You'll see.

1999
01:21:51,500 --> 01:21:53,300
I will mess it up a few times.

2000
01:21:53,400 --> 01:21:57,200
I bet as I go to debug it because if I'm not like basically cheating

2001
01:21:57,200 --> 01:22:01,600
and looking at my existing code, it's complicated to do this

2002
01:22:01,600 --> 01:22:03,900
optimally, basically, here's what you need.

2003
01:22:04,000 --> 01:22:04,500
To do.

2004
01:22:07,400 --> 01:22:09,400
This is T equals zero.

2005
01:22:10,500 --> 01:22:10,800
Right.

2006
01:22:10,800 --> 01:22:14,900
This is when the program starts sound will start playing basically

2007
01:22:14,900 --> 01:22:15,600
immediately.

2008
01:22:15,600 --> 01:22:17,500
So off it goes, right?

2009
01:22:17,800 --> 01:22:20,200
And it will sort of Advance forward in time.

2010
01:22:20,400 --> 01:22:22,100
Now, these, right?

2011
01:22:22,100 --> 01:22:25,800
Ideally, our this is frame one, right?

2012
01:22:25,800 --> 01:22:29,200
So this is one, this is frame 0, this is frame to.

2013
01:22:29,700 --> 01:22:32,300
So we will be displaying nothing during this time.

2014
01:22:32,500 --> 01:22:32,900
Right?

2015
01:22:32,900 --> 01:22:33,800
We've just started up.

2016
01:22:33,800 --> 01:22:35,100
We haven't actually do anything.

2017
01:22:35,200 --> 01:22:38,400
So we're Computing frame one right here.

2018
01:22:38,500 --> 01:22:38,900
This is us.

2019
01:22:38,900 --> 01:22:40,100
Computing it, right?

2020
01:22:40,400 --> 01:22:44,000
And what we're going to try and do is flip it here so that it displays

2021
01:22:44,100 --> 01:22:47,100
right here and we're going to write sound here.

2022
01:22:47,300 --> 01:22:48,000
Right?

2023
01:22:48,300 --> 01:22:50,000
So the way we do that is we go.

2024
01:22:50,300 --> 01:22:51,600
How fast do we think?

2025
01:22:51,600 --> 01:22:53,500
Our frame rate will be right?

2026
01:22:53,900 --> 01:22:56,200
We compute the frame based on that expectation.

2027
01:22:56,200 --> 01:22:59,200
So if we're trying to run at 60 frames a second, we basically say,

2028
01:22:59,200 --> 01:23:04,100
okay, let's plan to do it at 1/60 of a second from now, right?

2029
01:23:04,100 --> 01:23:10,100
The audio into the buffer 1/60 ahead of when we started, right?

2030
01:23:10,200 --> 01:23:10,600
Right?

2031
01:23:10,600 --> 01:23:12,700
And assume that it won't catch up before then.

2032
01:23:13,300 --> 01:23:15,600
We will do the frame, get it ready.

2033
01:23:16,100 --> 01:23:20,600
And then we will either use the vertical blank to trigger it or we'll

2034
01:23:20,600 --> 01:23:23,700
just use the actual, our dtsc, or query performance counter.

2035
01:23:23,700 --> 01:23:24,600
Probably not ours to see.

2036
01:23:24,600 --> 01:23:27,100
Query performance counter to see how much time has elapsed.

2037
01:23:27,100 --> 01:23:29,900
And when a 60th of a second has elapsed, do the blind right there.

2038
01:23:30,100 --> 01:23:30,700
Right?

2039
01:23:31,100 --> 01:23:34,300
And we'll have to write some code, the janky code.

2040
01:23:34,700 --> 01:23:39,000
That's basically tries to make sure that if we end up in a situation

2041
01:23:39,000 --> 01:23:40,100
where we skip, where we

2042
01:23:40,200 --> 01:23:43,600
Miss a frame or something that a that the audio doesn't skip.

2043
01:23:43,600 --> 01:23:47,900
So we might have to write like two frames of audio and then overwrite

2044
01:23:47,900 --> 01:23:51,000
a frame of audio when we aren't skipping.

2045
01:23:51,000 --> 01:23:56,200
So, right ahead and then overwrite basically, and also to handle when

2046
01:23:56,200 --> 01:23:57,000
we miss a frame.

2047
01:23:57,000 --> 01:23:59,300
So that we're displaying at one frame for two frames that sort of

2048
01:23:59,300 --> 01:23:59,700
stuff.

2049
01:24:00,100 --> 01:24:01,500
It's really kind of janky.

2050
01:24:02,100 --> 01:24:02,900
It's not fun.

2051
01:24:05,100 --> 01:24:06,000
It's not fun at all.

2052
01:24:10,100 --> 01:24:10,900
So, let's see.

2053
01:24:10,900 --> 01:24:12,100
Yeah, so in answer to your question.

2054
01:24:12,100 --> 01:24:14,300
So how we predict where the flip happens.

2055
01:24:14,300 --> 01:24:16,000
We just use the query performance.

2056
01:24:16,000 --> 01:24:17,600
We use the timer in the system.

2057
01:24:17,600 --> 01:24:21,200
And we basically just try to try to use the timer to predict when

2058
01:24:21,200 --> 01:24:21,500
that's going to happen.

2059
01:24:21,500 --> 01:24:24,800
If we have vertical, refresh of e blank.

2060
01:24:24,800 --> 01:24:29,500
So a sink that we can sink to then that's good because basically,

2061
01:24:29,500 --> 01:24:31,500
there's a function that will wait for that vertical.

2062
01:24:31,500 --> 01:24:31,800
Retrace.

2063
01:24:31,800 --> 01:24:33,000
So we know that that's happening.

2064
01:24:33,000 --> 01:24:37,100
And also when we use opengl and direct3d it'll automatically, we can

2065
01:24:37,100 --> 01:24:38,600
set it to automatically, wait for that.

2066
01:24:38,600 --> 01:24:39,800
And we can see when that

2067
01:24:40,100 --> 01:24:41,800
As we can time, a few of them and see.

2068
01:24:41,900 --> 01:24:45,200
So, we've got some options, but it's really, it's awful.

2069
01:24:45,200 --> 01:24:46,300
And you'll see when we write it.

2070
01:24:46,300 --> 01:24:47,400
It's just, it's just awful.

2071
01:24:47,900 --> 01:24:49,900
It's what you, it's something you wish to operate system would do for

2072
01:24:49,900 --> 01:24:51,800
you because it's in a better position to do it.

2073
01:24:55,100 --> 01:24:58,000
We know that you can't really go below 30 frames per second, to give

2074
01:24:58,000 --> 01:24:59,200
the impression of smooth motion.

2075
01:24:59,200 --> 01:25:01,600
Is there similar standard rule of thumb for audio latency?

2076
01:25:04,200 --> 01:25:04,700
Well.

2077
01:25:07,200 --> 01:25:07,700
I don't know.

2078
01:25:07,700 --> 01:25:10,700
I think it varies per person and it depends on the type of game, you

2079
01:25:10,700 --> 01:25:14,700
know, if you're playing a game, where the audio is largely color.

2080
01:25:14,700 --> 01:25:17,600
It's just, it's like things that reinforce what's going on with the

2081
01:25:17,600 --> 01:25:20,000
graphics, but it's not integral to the great gameplay.

2082
01:25:20,200 --> 01:25:23,900
You can have pretty high audio latency, you know, you got if you have

2083
01:25:23,900 --> 01:25:26,500
like a hundred milliseconds of audio latency or something, which is

2084
01:25:26,500 --> 01:25:30,200
huge, you may get away with that, right?

2085
01:25:30,500 --> 01:25:33,400
Because the brain kind of does this weird thing where it sinks stuff

2086
01:25:33,400 --> 01:25:35,900
up, that doesn't happen at the same time.

2087
01:25:35,900 --> 01:25:36,000
It'll

2088
01:25:36,300 --> 01:25:41,700
Up, but two things if your gameplay is based on audio.

2089
01:25:41,700 --> 01:25:46,700
Like, you're playing Guitar Hero or something, or if you're just going

2090
01:25:46,700 --> 01:25:52,100
for that really tight, crisp feel then the lower the better really.

2091
01:25:52,200 --> 01:25:56,700
I mean if you can get it down, I don't think there's ever a time when

2092
01:25:56,700 --> 01:25:58,800
you don't feel better about lower latency audio.

2093
01:25:58,800 --> 01:25:59,200
I don't know.

2094
01:25:59,200 --> 01:26:00,500
It's tough to put your finger on.

2095
01:26:02,300 --> 01:26:05,100
I don't know if people have done sort of tests where they've seen how

2096
01:26:05,100 --> 01:26:06,100
the feel of the game is.

2097
01:26:06,300 --> 01:26:08,500
Improved by reducing the audio latency down.

2098
01:26:09,900 --> 01:26:11,500
But yeah, you'd like it to be 0.

2099
01:26:11,800 --> 01:26:17,100
You like there to be no separation between the frame display and when

2100
01:26:17,100 --> 01:26:18,900
the audio happens, so

2101
01:26:28,000 --> 01:26:28,900
Let's see.

2102
01:26:30,200 --> 01:26:35,200
AJ bunk husky says the reason allocate is deprecated is because it's

2103
01:26:35,200 --> 01:26:37,900
hard impossible to implement on some platforms.

2104
01:26:38,300 --> 01:26:38,700
Also.

2105
01:26:38,700 --> 01:26:41,300
It has to be a compiler built in which is clunky.

2106
01:26:41,500 --> 01:26:44,400
Lastly, things get tricky when you in line a function with an Alec a

2107
01:26:44,400 --> 01:26:48,400
or use inside a macro the Cincy, modern best practices to use

2108
01:26:48,400 --> 01:26:50,100
something like good new obstacle.

2109
01:26:50,100 --> 01:26:53,600
If you really want automatically free dynamic memory in C++.

2110
01:26:53,600 --> 01:26:56,100
You'd probably opt for Unique pointer shared point of these days.

2111
01:26:56,300 --> 01:26:56,900
Yeah.

2112
01:26:59,100 --> 01:26:59,800
and, like I said, I

2113
01:27:00,000 --> 01:27:04,400
Agree, I just don't use Alec a pretty much in shipping code.

2114
01:27:04,600 --> 01:27:06,800
So I don't actually know.

2115
01:27:06,800 --> 01:27:09,400
I can't really say if there's something else that you should use.

2116
01:27:10,500 --> 01:27:14,700
Yeah, if you're into shared pointer or basically I think that Dynamic

2117
01:27:14,700 --> 01:27:18,700
that a C++ class that dynamically freeze, the memory that it holds

2118
01:27:18,700 --> 01:27:21,900
when it exits, the scope, that's one totally valid solution.

2119
01:27:22,500 --> 01:27:25,900
Another thing that's nice about it is basically saying, well, you

2120
01:27:25,900 --> 01:27:26,300
know,

2121
01:27:28,100 --> 01:27:30,600
Can I get temporary memory in general in my system?

2122
01:27:30,600 --> 01:27:30,900
I don't know.

2123
01:27:32,000 --> 01:27:34,900
I will show you when we actually get into things.

2124
01:27:34,900 --> 01:27:38,500
When we I was the only reason allocate even came up today because I

2125
01:27:38,500 --> 01:27:39,500
thought I might mention it.

2126
01:27:39,500 --> 01:27:43,400
Since it's something that's worth knowing and I haven't gotten to

2127
01:27:43,400 --> 01:27:44,300
memory stuff yet.

2128
01:27:44,300 --> 01:27:47,200
So I'm not in a position to use the sorts of things that I normally

2129
01:27:47,200 --> 01:27:47,900
would use.

2130
01:27:48,300 --> 01:27:51,900
So I guess what I would say about it is yeah, just be aware that it's

2131
01:27:51,900 --> 01:27:52,300
there.

2132
01:27:52,300 --> 01:27:56,600
It allows you to use the stack in ways that that allow you to not have

2133
01:27:56,600 --> 01:27:57,100
to predict it.

2134
01:27:57,600 --> 01:28:01,500
But like the people on the stream said, it's kind of it's a tough.

2135
01:28:01,500 --> 01:28:02,700
It's a tough guy to ship.

2136
01:28:02,800 --> 01:28:04,300
It's a tough guy to rely on.

2137
01:28:04,500 --> 01:28:06,400
If you actually want it to always be there.

2138
01:28:06,600 --> 01:28:09,600
There's a really it's kind of unfortunate because it would be nice.

2139
01:28:09,600 --> 01:28:14,500
If there was a good way to treat the stack and memory, the same and

2140
01:28:14,500 --> 01:28:16,700
allocate Kai does allow you to do that.

2141
01:28:16,700 --> 01:28:18,100
But it's just in practice.

2142
01:28:18,200 --> 01:28:20,800
The main thing that killed, it always for me was the fact that there

2143
01:28:20,800 --> 01:28:23,700
was such a small limit typically, or you had to make the stack size

2144
01:28:23,700 --> 01:28:25,800
huge and there was all these sort of constraints on it.

2145
01:28:28,000 --> 01:28:29,500
That was always the thing that killed it for me.

2146
01:28:30,600 --> 01:28:33,800
But if I was like in charge of how see should have implemented, I

2147
01:28:33,800 --> 01:28:34,700
probably would have done things.

2148
01:28:34,700 --> 01:28:38,600
So that allocate could do huge allocations and you could have done it

2149
01:28:38,600 --> 01:28:42,200
so that the program stack was a giant memory stack and it worked a

2150
01:28:42,200 --> 01:28:42,700
different way.

2151
01:28:42,700 --> 01:28:48,500
Like so I would actually like to have a real alakay but allocate isn't

2152
01:28:48,500 --> 01:28:49,400
really that thing.

2153
01:28:49,500 --> 01:28:53,300
And so as a result, I've never actually used it in shipping code

2154
01:28:53,600 --> 01:28:55,300
because I never was comfortable with it.

2155
01:28:56,300 --> 01:28:56,600
Yeah.

2156
01:28:56,600 --> 01:28:57,100
And like you see

2157
01:28:57,200 --> 01:28:58,100
I didn't even really know.

2158
01:28:58,100 --> 01:29:01,000
I didn't even know when it was when its clean up rule was, I would

2159
01:29:01,000 --> 01:29:04,700
have thought that I didn't realize that I put it in a loop.

2160
01:29:04,700 --> 01:29:05,800
I wasn't thinking about at that time.

2161
01:29:05,800 --> 01:29:08,100
But even if I had, I would have thought that it would clean up at the

2162
01:29:08,100 --> 01:29:09,900
end of the loop because I would have figured that with the compiler

2163
01:29:09,900 --> 01:29:12,900
would do is entering the loop.

2164
01:29:12,900 --> 01:29:15,900
Push, the stack frame down on, exiting the loop, pop it up.

2165
01:29:16,200 --> 01:29:17,200
And to be honest.

2166
01:29:17,200 --> 01:29:18,900
I have no idea why you wouldn't just do that.

2167
01:29:18,900 --> 01:29:21,600
But I guess it makes things too complicated for the compiler because

2168
01:29:21,600 --> 01:29:23,600
it has to remember where it's basing things off.

2169
01:29:23,600 --> 01:29:25,100
The stack pointer is something I don't know.

2170
01:29:25,100 --> 01:29:27,100
It doesn't seem like it should be but you know, maybe.

2171
01:29:27,200 --> 01:29:27,600
It is.

2172
01:29:32,300 --> 01:29:34,200
Oh, and AJ Busca, I know you weren't picking out my style.

2173
01:29:34,200 --> 01:29:35,500
Like I said, I don't use alakay.

2174
01:29:35,500 --> 01:29:37,100
So it's not picking on my style at all.

2175
01:29:37,700 --> 01:29:40,100
The last thing I would do is recommend people use alakay because I

2176
01:29:40,100 --> 01:29:41,700
have no experience with it shipping code.

2177
01:29:42,100 --> 01:29:43,200
So I have no idea.

2178
01:29:43,700 --> 01:29:47,800
I was just saying I you know, it's there be aware of it allows you to

2179
01:29:47,800 --> 01:29:51,300
grow the stack size dynamically, and it looks like I guess from what

2180
01:29:51,300 --> 01:29:51,900
people are saying that.

2181
01:29:51,900 --> 01:29:53,800
Maybe you can't use it very effectively on their platform.

2182
01:29:53,800 --> 01:29:55,500
So that's maybe one good reason not to.

2183
01:29:55,800 --> 01:29:59,200
We won't be using it in the final in any of the final code of handmade

2184
01:29:59,200 --> 01:29:59,700
hero.

2185
01:30:00,000 --> 01:30:01,200
It's just not something I do.

2186
01:30:01,900 --> 01:30:05,400
But yeah, but I like I said, I try not to be ideological on the Stream

2187
01:30:05,400 --> 01:30:09,200
So I try not to say stuff, like don't use alakay because how should I

2188
01:30:09,200 --> 01:30:10,300
know right?

2189
01:30:10,400 --> 01:30:11,200
Especially things.

2190
01:30:11,200 --> 01:30:14,000
I don't have much experience with like Alec a or other sorts of

2191
01:30:14,000 --> 01:30:14,300
things.

2192
01:30:14,400 --> 01:30:17,800
I'm not in a position to tell you do use this, don't use this.

2193
01:30:19,000 --> 01:30:21,100
Usually all I can really do is say here's what I do.

2194
01:30:21,100 --> 01:30:22,000
Here's what works for me.

2195
01:30:22,000 --> 01:30:23,400
Here are some trade-offs about them.

2196
01:30:23,700 --> 01:30:26,000
Make your own decisions and for something like a like a.

2197
01:30:26,000 --> 01:30:28,000
Like I said, yeah, I couldn't say that.

2198
01:30:28,000 --> 01:30:28,800
So I do.

2199
01:30:28,800 --> 01:30:29,800
Wouldn't I don't you.

2200
01:30:30,000 --> 01:30:30,200
Is it?

2201
01:30:30,200 --> 01:30:31,500
But I wouldn't say don't use it.

2202
01:30:31,500 --> 01:30:33,500
I'd say go learn about it yourself.

2203
01:30:33,500 --> 01:30:36,100
Now that you kind of know about it and see what you think of it.

2204
01:30:36,600 --> 01:30:38,400
And like I said, there's a lot of people on the street who seem to

2205
01:30:38,400 --> 01:30:39,800
have more experience with than I do.

2206
01:30:40,200 --> 01:30:42,900
Maybe if they're on the forums, you guys could discuss it and they

2207
01:30:42,900 --> 01:30:46,400
could tell you a little bit about why they don't or do you use it and

2208
01:30:46,400 --> 01:30:47,500
you know, stuff like that.

2209
01:30:50,400 --> 01:30:53,000
How do you do two voices with sound waves in one buffer?

2210
01:30:53,000 --> 01:30:54,900
Well, we will be doing that.

2211
01:30:54,900 --> 01:30:55,700
Just you wait.

2212
01:30:57,500 --> 01:31:00,900
Let's see, when will be the first bright display in animation.

2213
01:31:00,900 --> 01:31:01,500
Who knows?

2214
01:31:01,500 --> 01:31:04,400
When we get to it, when we get to.

2215
01:31:04,400 --> 01:31:08,500
It depends how we, how long things take to explain?

2216
01:31:10,300 --> 01:31:11,300
Let's say.

2217
01:31:12,800 --> 01:31:16,300
I've heard the brain treats sounds with within 10 milliseconds is

2218
01:31:16,300 --> 01:31:17,600
happening at the same time.

2219
01:31:18,000 --> 01:31:20,100
I suspect audio to video think is the same.

2220
01:31:21,000 --> 01:31:22,400
No, I don't think that's true.

2221
01:31:22,400 --> 01:31:25,500
I think you can be way further off than 10 milliseconds in audio/video

2222
01:31:25,500 --> 01:31:29,000
sink, but I could be wrong about that.

2223
01:31:29,500 --> 01:31:30,800
Getting less than 10 millisecond.

2224
01:31:30,800 --> 01:31:33,600
Latency would be great and you would love to have that.

2225
01:31:33,600 --> 01:31:34,200
A lot of times.

2226
01:31:34,200 --> 01:31:36,800
I don't think you realistically get it, but that would be cool.

2227
01:31:40,900 --> 01:31:42,900
When you work with temporary memory, is there a risk of memory

2228
01:31:42,900 --> 01:31:44,000
overflow in memory leaks?

2229
01:31:44,000 --> 01:31:45,700
If so, how do you make sure these don't happen?

2230
01:31:46,500 --> 01:31:51,500
So yeah, I mean memory basically, anytime you're managing memory.

2231
01:31:52,600 --> 01:31:54,700
It is definitely something that you have to be aware of.

2232
01:31:56,100 --> 01:31:59,400
Typically, the way that I approach those problems and you'll see me do

2233
01:31:59,400 --> 01:31:59,800
this.

2234
01:31:59,800 --> 01:32:02,400
Like I said, I haven't gotten to the point where I've talked to you

2235
01:32:02,400 --> 01:32:03,000
about memory yet.

2236
01:32:03,000 --> 01:32:06,600
So we really haven't had a chance to do any of the things that I would

2237
01:32:06,600 --> 01:32:07,900
normally do, but we're getting there.

2238
01:32:07,900 --> 01:32:11,800
In fact, maybe Thursday that we do it.

2239
01:32:13,100 --> 01:32:14,500
the thing to understand is,

2240
01:32:15,700 --> 01:32:17,600
Managing memory actually, isn't that hard?

2241
01:32:17,600 --> 01:32:18,800
Once you build some tools?

2242
01:32:18,900 --> 01:32:20,000
We haven't built the tools yet.

2243
01:32:20,000 --> 01:32:20,500
So it's pretty.

2244
01:32:20,500 --> 01:32:21,700
It'd be pretty hard now.

2245
01:32:22,900 --> 01:32:26,200
So, but once you have some tools for it, you'll see it's actually not

2246
01:32:26,200 --> 01:32:27,000
that hard.

2247
01:32:27,100 --> 01:32:30,900
But, yes, you anytime you're doing low-level programming, even if it

2248
01:32:30,900 --> 01:32:32,000
has nothing to do with memory.

2249
01:32:32,100 --> 01:32:34,200
Let's say, you're just trying to fill it in a buffer.

2250
01:32:34,200 --> 01:32:37,600
That's that's, you know, you know, just some array, someone made.

2251
01:32:38,000 --> 01:32:40,500
If you don't, if you're not careful, you could write off the end right

2252
01:32:40,500 --> 01:32:40,900
off the beginning.

2253
01:32:40,900 --> 01:32:41,500
Who knows?

2254
01:32:41,800 --> 01:32:44,800
There are tricks for catching those sorts of things as well.

2255
01:32:45,000 --> 01:32:45,300
You saw

2256
01:32:45,500 --> 01:32:48,800
The compiler catch one of ours today, but there's another way you can

2257
01:32:48,800 --> 01:32:49,500
do it too.

2258
01:32:49,600 --> 01:32:52,400
And I'll be showing you that it's spacely with virtual Alec.

2259
01:32:52,400 --> 01:32:53,400
You can line things up.

2260
01:32:53,400 --> 01:32:56,900
So that if you write even a single bite off, the end of something,

2261
01:32:57,000 --> 01:32:59,800
you'll fault immediately and that's a good way to catch things, too.

2262
01:33:00,300 --> 01:33:03,100
But there's a lot of stuff that you have to do, basically, to make

2263
01:33:03,100 --> 01:33:05,400
sure that you could run and debug mode with that.

2264
01:33:05,400 --> 01:33:08,500
But then run in non debug mode without having all the overhead of

2265
01:33:08,500 --> 01:33:09,800
doing the lines up like that.

2266
01:33:09,800 --> 01:33:12,000
So we'll look, and we'll be getting to those things.

2267
01:33:16,400 --> 01:33:18,100
Let's see.

2268
01:33:22,500 --> 01:33:25,700
I'm a longtime rhythm game player and I can notice audio off sync as

2269
01:33:25,700 --> 01:33:28,300
little as 10 milliseconds earlier late getting it just right as both a

2270
01:33:28,300 --> 01:33:29,500
big deal and possible.

2271
01:33:29,500 --> 01:33:30,900
Yes, and I agree with that.

2272
01:33:30,900 --> 01:33:36,000
Like I said, the problem is you it's really not possible though.

2273
01:33:36,500 --> 01:33:40,000
Because even if you get it right on the output, which is what we'll

2274
01:33:40,000 --> 01:33:44,200
try to do your TV, May delay it and you're like you may plug it into

2275
01:33:44,200 --> 01:33:47,700
receiver and the audio plays on a delay that's different from the

2276
01:33:47,700 --> 01:33:48,400
video.

2277
01:33:48,700 --> 01:33:51,700
So it is very problematic getting

2278
01:33:52,100 --> 01:33:53,800
Getting below 10 milliseconds.

2279
01:33:54,500 --> 01:33:57,500
If you if you don't have some way to really calibrate your actual

2280
01:33:57,500 --> 01:34:01,600
setup so we can do stuff to try and get it so that we are outputting

2281
01:34:01,600 --> 01:34:06,800
things at the right time, but that doesn't really help the actual

2282
01:34:07,200 --> 01:34:08,000
real-world result.

2283
01:34:08,000 --> 01:34:08,800
Unfortunately.

2284
01:34:08,900 --> 01:34:09,100
Okay.

2285
01:34:09,100 --> 01:34:10,300
We're getting to the end of the stream here.

2286
01:34:10,400 --> 01:34:11,400
Last couple questions.

2287
01:34:16,000 --> 01:34:19,900
Let's see, any advice for a senior level CS student interested in game

2288
01:34:19,900 --> 01:34:20,200
development.

2289
01:34:21,100 --> 01:34:21,900
Not sorry.

2290
01:34:22,500 --> 01:34:24,100
If you want to ask those kind of questions.

2291
01:34:24,400 --> 01:34:27,100
Maybe we can do that on some kind of a stream that's not programming

2292
01:34:27,100 --> 01:34:31,100
oriented because basically those those questions are kind of general

2293
01:34:31,100 --> 01:34:33,300
and I'm not even a good person to answer them.

2294
01:34:33,700 --> 01:34:37,200
But in the pre stream before the stream starts, we will do questions

2295
01:34:37,400 --> 01:34:40,000
sometimes of that and I can answer them to the best of my ability, but

2296
01:34:40,000 --> 01:34:43,000
I don't know, I don't even really know answers to questions like that.

2297
01:34:46,300 --> 01:34:47,100
Let's see.

2298
01:34:51,900 --> 01:34:53,400
Think that's roughly it.

2299
01:34:53,400 --> 01:34:56,100
Do I see anything else on here?

2300
01:34:57,900 --> 01:35:01,100
I don't see anything else on here.

2301
01:35:03,000 --> 01:35:04,600
Let's see.

2302
01:35:05,000 --> 01:35:06,600
I think that's about it.

2303
01:35:07,200 --> 01:35:08,000
Alright, ladies and gentleman.

2304
01:35:08,000 --> 01:35:11,400
Thank you very much for joining us for another edition of handmade

2305
01:35:11,400 --> 01:35:11,900
hero.

2306
01:35:12,600 --> 01:35:16,900
I think everything besides our attempt to show allocated a, which was

2307
01:35:16,900 --> 01:35:20,200
kind of terrible, though the folks in the Stream, kind of saved it for

2308
01:35:20,200 --> 01:35:20,300
us.

2309
01:35:20,300 --> 01:35:21,700
So thank you very much for that.

2310
01:35:22,300 --> 01:35:25,600
Basically, that would have been that would have given people the wrong

2311
01:35:25,600 --> 01:35:26,700
impression of alakay.

2312
01:35:27,100 --> 01:35:28,900
Now, they've kind of got the right impression of, that's good, but,

2313
01:35:28,900 --> 01:35:31,900
basically, ignoring the allocating this today, I think we

2314
01:35:32,000 --> 01:35:34,800
Did a pretty good job of doing what we set out to do, which was

2315
01:35:34,800 --> 01:35:36,600
obstructing more of our platform layer.

2316
01:35:36,800 --> 01:35:40,600
We've now gotten to the point where we're all good with audio

2317
01:35:40,800 --> 01:35:42,200
happening on the other side.

2318
01:35:42,500 --> 01:35:45,500
So, we need to do some work on our platform layer, to make the audio

2319
01:35:45,500 --> 01:35:48,900
output actually synced more properly with the video, which is

2320
01:35:48,900 --> 01:35:52,100
something I want to do, but we'll hold off on that for a little while.

2321
01:35:52,100 --> 01:35:54,800
Tomorrow we're going to do input and then the day after that we'll do

2322
01:35:54,800 --> 01:35:58,000
memory and then we'll be in good shape for actually starting to write

2323
01:35:58,000 --> 01:35:59,800
some gain code or going in.

2324
01:36:00,000 --> 01:36:02,900
Hiding tightening down, a few of those platform things, which is,

2325
01:36:02,900 --> 01:36:04,600
maybe what we'll take some time to do.

2326
01:36:04,700 --> 01:36:07,400
Just so we can really solidify that platform layer and kind of be done

2327
01:36:07,400 --> 01:36:10,400
with it for a while, put it aside and move on to actually writing the

2328
01:36:10,400 --> 01:36:11,100
game code.

2329
01:36:11,200 --> 01:36:12,700
So thank you so much for joining us.

2330
01:36:12,700 --> 01:36:14,000
It has been a pleasure.

2331
01:36:14,000 --> 01:36:14,800
Thank you very much.

2332
01:36:14,800 --> 01:36:17,100
The people on the street who corrected the alakay stuff.

2333
01:36:17,700 --> 01:36:20,000
I could not do it without you guys because like I said, when I'm

2334
01:36:20,000 --> 01:36:22,300
program in the Stream It stuff up here.

2335
01:36:22,300 --> 01:36:23,400
It is definitely tough.

2336
01:36:23,600 --> 01:36:25,700
And especially when I'm working with some stuff and I want to point

2337
01:36:25,700 --> 01:36:27,800
out something that isn't something that I do frequently.

2338
01:36:27,900 --> 01:36:29,800
It really helps to have other experts on board.

2339
01:36:30,000 --> 01:36:32,900
Who can say, like, oh, you should know this or take a, look at that.

2340
01:36:32,900 --> 01:36:33,900
That's that's pretty helpful.

2341
01:36:33,900 --> 01:36:35,200
So, thank you guys for that.

2342
01:36:35,400 --> 01:36:39,000
And if you do have time to post on the forums, that would be great to

2343
01:36:39,000 --> 01:36:40,400
to fill in some of that knowledge.

2344
01:36:40,500 --> 01:36:43,100
If you go to handmade hero dot-org, there's this news and forums

2345
01:36:43,100 --> 01:36:43,600
button here.

2346
01:36:43,600 --> 01:36:47,100
You click on that, and you can get all the stuff you can get the

2347
01:36:47,100 --> 01:36:48,300
episode guide, which is pretty cool.

2348
01:36:48,300 --> 01:36:51,200
But you can also go to code discussion where we've got a bunch of

2349
01:36:51,200 --> 01:36:51,800
stuff there.

2350
01:36:52,200 --> 01:36:55,400
So thank you so much, everyone for joining me and I hope to see you

2351
01:36:55,400 --> 01:36:56,400
tomorrow at 8:00 p.m.

2352
01:36:56,400 --> 01:36:59,800
PST when we will tackle input.

2353
01:37:01,000 --> 01:37:02,900
And maybe memory.

2354
01:37:02,900 --> 01:37:05,300
I don't know if we'll get to it will do input in memory of the next

2355
01:37:05,300 --> 01:37:07,700
two days, but how much we get to tomorrow?

2356
01:37:07,800 --> 01:37:11,300
I can't say, so thank you very much for joining us and I will see you

2357
01:37:11,800 --> 01:37:12,400
tomorrow.

