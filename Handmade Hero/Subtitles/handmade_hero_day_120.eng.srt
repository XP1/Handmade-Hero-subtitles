1
00:00:00,300 --> 00:00:03,900
Hello everyone and welcome to handmade hero.

2
00:00:03,900 --> 00:00:06,600
The show recode a complete game live on Twitch.

3
00:00:06,600 --> 00:00:08,200
No engines, no libraries.

4
00:00:08,200 --> 00:00:13,800
It's just us coding here doing everything by hand and we are in the

5
00:00:13,800 --> 00:00:15,000
middle of optimizing so code.

6
00:00:15,000 --> 00:00:18,400
So I want to kind of get back to that if you want to follow along at

7
00:00:18,400 --> 00:00:20,600
home today is day 120.

8
00:00:20,600 --> 00:00:25,800
So if you would like to follow from where I am today, you can open up

9
00:00:25,800 --> 00:00:27,000
a day, 170.

10
00:00:27,000 --> 00:00:30,300
Sorry, day, 119 zip file and that is the source code that is

11
00:00:30,300 --> 00:00:31,900
Starting with today.

12
00:00:32,600 --> 00:00:37,500
So we had sort of two more things optimization why's that it wanted to

13
00:00:37,500 --> 00:00:39,900
talk about where we did it.

14
00:00:39,900 --> 00:00:43,100
You know, sort of rudimentary optimization work on this routine and we

15
00:00:43,100 --> 00:00:47,400
got it down to 48 cycles and I tried to make a little thing that would

16
00:00:47,400 --> 00:00:49,700
count cycles and it's fine.

17
00:00:49,700 --> 00:00:52,700
You know, I mean we did a thing that counts sarnax, not cycles, that

18
00:00:52,700 --> 00:00:53,600
counts instructions.

19
00:00:53,900 --> 00:00:57,000
And we did a little thing that does exactly that.

20
00:00:57,000 --> 00:00:59,000
So you can actually see

21
00:01:01,600 --> 00:01:02,200
See here.

22
00:01:02,500 --> 00:01:04,400
Mmm, you can see how we kind of did that.

23
00:01:04,400 --> 00:01:09,000
We made a little thing which goes through and pound defines all of the

24
00:01:09,000 --> 00:01:11,400
intrinsics that we were using to sort of count.

25
00:01:11,400 --> 00:01:13,500
How many of them there were.

26
00:01:14,100 --> 00:01:19,800
But but this, this got Fabien, this bothered Fabien at like a deep

27
00:01:19,800 --> 00:01:24,300
emotional level and not because of that he was fine with that but he

28
00:01:24,300 --> 00:01:26,500
did not like the way that we were attributing.

29
00:01:26,500 --> 00:01:29,900
Our accounts here and the reason he did not like them.

30
00:01:30,700 --> 00:01:35,900
Was because he felt like it was just not a useful number by putting

31
00:01:35,900 --> 00:01:38,800
the throughput directly in here, right?

32
00:01:38,800 --> 00:01:40,400
He didn't think that was a good idea.

33
00:01:40,400 --> 00:01:42,400
The reason he didn't think that was a good idea is because well, the

34
00:01:42,400 --> 00:01:48,200
throughput number or tea includes the parallelism of the CPU, right?

35
00:01:48,900 --> 00:01:52,500
So basically the three put number, if it says like this one right here

36
00:01:52,500 --> 00:01:53,800
that says, one-third.

37
00:01:54,000 --> 00:01:57,000
If it says one-third, what that means is that the processor could do

38
00:01:57,000 --> 00:01:58,800
three of those in a cycle, effectively.

39
00:01:58,800 --> 00:02:00,100
If everything was going probably

40
00:02:00,200 --> 00:02:03,200
up early and it was pipeline properly and whatever else has to happen,

41
00:02:03,400 --> 00:02:07,300
it's going to be able to do three of those in a cycle, right?

42
00:02:08,000 --> 00:02:16,200
So it's counting in that the way that it's actually doing that is

43
00:02:16,200 --> 00:02:19,200
because it has multiple units that can do.

44
00:02:19,200 --> 00:02:22,900
And and so what it can do is when it sees an and it could issue up to

45
00:02:22,900 --> 00:02:23,400
three of them.

46
00:02:23,400 --> 00:02:28,500
At the same time, hence, you get only a third of a cycle to do any

47
00:02:28,500 --> 00:02:30,900
given one of them because you can do three of them in effectively one

48
00:02:30,900 --> 00:02:37,800
cycle or a third of a cycle per, and right, but for something like an

49
00:02:38,000 --> 00:02:39,000
Her multiply, right?

50
00:02:39,000 --> 00:02:40,600
And you look at it, it says one cycle.

51
00:02:40,600 --> 00:02:43,400
That's the throughput for that because there's only one unit that can

52
00:02:43,400 --> 00:02:44,700
do and add or multiply.

53
00:02:44,700 --> 00:02:46,300
We actually went and verified that

54
00:02:47,600 --> 00:02:50,400
But an ad in a multiply could be issued together.

55
00:02:50,400 --> 00:02:52,600
We talked about this a little bit at the end of last stream.

56
00:02:52,600 --> 00:02:55,200
The fact that you could overlap ads and multiplies, which is why I

57
00:02:55,200 --> 00:02:58,900
said things were running so much faster than the total cycle count,

58
00:02:58,900 --> 00:02:59,800
even with the throughput,

59
00:03:00,000 --> 00:03:03,900
Factored in there, you know, it was a situation where it was clear

60
00:03:03,900 --> 00:03:06,600
that like, ads and multiplies were happening at the same time, and so

61
00:03:06,600 --> 00:03:06,700
on.

62
00:03:06,700 --> 00:03:10,000
And so what Fabien objected to was, it's kind of a meaningless number

63
00:03:10,000 --> 00:03:15,600
to add it up this way, because we are capturing the fact that the, and

64
00:03:15,600 --> 00:03:21,300
can be issued three times in one cycle, but we're not capturing the

65
00:03:21,300 --> 00:03:25,700
fact that the ad in the multiply can be issued in, in the same cycle.

66
00:03:25,700 --> 00:03:29,700
So really like either he's arguing and it's a perfectly reasonable.

67
00:03:30,000 --> 00:03:34,100
Double argument, you should change like, the ad in the multiply to be

68
00:03:34,100 --> 00:03:35,500
like half a cycle or some.

69
00:03:35,500 --> 00:03:39,200
I mean, you should you should try to like, incorporate that Crossing

70
00:03:39,200 --> 00:03:41,700
parallelism, but, you know, that's going to be an accurate for obvious

71
00:03:41,700 --> 00:03:46,200
reasons or you should knock out the and, and say, like, okay, you

72
00:03:46,200 --> 00:03:48,800
know, just try to count the total number instructions, like either do

73
00:03:48,800 --> 00:03:52,300
a proper over estimate or a proper underestimate, but like mixing

74
00:03:52,300 --> 00:03:54,300
them, it really bothered him.

75
00:03:54,900 --> 00:03:56,900
So I was like, well, we'll see what we can do.

76
00:03:58,000 --> 00:04:02,100
And I said to him but, you know, I mean, the only way to do this,

77
00:04:02,100 --> 00:04:05,200
right is the way I did it on the 360 which is, I wrote a little

78
00:04:05,200 --> 00:04:07,200
program that tries to simulate the CPU.

79
00:04:07,200 --> 00:04:09,900
And what it would do is it would take all the assembly that you had

80
00:04:10,000 --> 00:04:13,600
and the actual Assembly, not the intrinsics and it would actually go.

81
00:04:13,600 --> 00:04:17,200
And it would figure out exactly what the chip would do to the degree

82
00:04:17,200 --> 00:04:18,500
to, which it was documented.

83
00:04:18,500 --> 00:04:20,800
And that would tell you when there were stalls, like, because

84
00:04:20,800 --> 00:04:23,000
something couldn't get issued in the same cycle as something else or

85
00:04:23,000 --> 00:04:25,400
all these other things you can see, here's how many cycles.

86
00:04:25,400 --> 00:04:27,500
This thing should take best case.

87
00:04:30,700 --> 00:04:34,800
And Fabian was like well yeah they you can do that.

88
00:04:34,800 --> 00:04:37,300
Intel actually shifts a tool for you to do that.

89
00:04:37,300 --> 00:04:42,200
If you want a said it's it's the Intel architecture code analyzer and

90
00:04:42,200 --> 00:04:43,000
I'm like what?

91
00:04:44,500 --> 00:04:49,000
So he pointed me to this and I feel like we should at least try it out

92
00:04:49,000 --> 00:04:51,600
because this would be some way I could show on the stream.

93
00:04:51,600 --> 00:04:52,300
Exactly.

94
00:04:52,300 --> 00:04:54,200
What's happening in the processor will not exactly.

95
00:04:54,200 --> 00:04:56,700
But to the degree that Intel nose and right.

96
00:04:56,700 --> 00:04:57,500
Like Intel

97
00:04:57,800 --> 00:05:01,500
You know, they're the ones who know how it was made and so presumably

98
00:05:01,500 --> 00:05:04,600
and I don't know if maybe they sandbag a little bit to try and prevent

99
00:05:04,600 --> 00:05:06,100
some kind of reverse engineering or something.

100
00:05:06,100 --> 00:05:10,400
But presumably that would mean that all of the things that we don't

101
00:05:10,400 --> 00:05:12,300
know about what will happen with the processor.

102
00:05:12,300 --> 00:05:16,700
They have actually captured in here somewhere, so I don't know.

103
00:05:16,700 --> 00:05:19,400
I've never used this tool before but Fabien said you could just use it

104
00:05:19,400 --> 00:05:21,700
and it would show you that information.

105
00:05:21,800 --> 00:05:25,700
So, let's see, I'll brought it on our code and we can see if we can

106
00:05:25,700 --> 00:05:27,000
get a dump of that.

107
00:05:27,400 --> 00:05:27,700
So,

108
00:05:27,800 --> 00:05:29,900
Here's the windows 64-bit version.

109
00:05:29,900 --> 00:05:32,200
This is supposedly a free piece of software.

110
00:05:34,300 --> 00:05:38,200
Do not know what this license agreement says, does it say anything

111
00:05:38,200 --> 00:05:41,100
about not using this on handmade hero stream?

112
00:05:42,800 --> 00:05:43,800
Let's see.

113
00:05:43,800 --> 00:05:45,400
We are not trying to reverse engineer.

114
00:05:45,400 --> 00:05:48,200
It, we are not trying to distribute it.

115
00:05:48,800 --> 00:05:53,300
We are not expecting them to be liable for when this blows up the

116
00:05:53,300 --> 00:05:54,100
machine.

117
00:05:55,300 --> 00:05:57,600
So, I think we're okay.

118
00:05:57,800 --> 00:05:59,800
Here, I think this is okay.

119
00:06:00,800 --> 00:06:01,800
So let's take a look.

120
00:06:01,800 --> 00:06:04,800
So there is our wind 64.

121
00:06:06,300 --> 00:06:08,500
And like I said, I've never used this before so you'll have to bear

122
00:06:08,500 --> 00:06:08,900
with me.

123
00:06:08,900 --> 00:06:12,600
I don't really know anything about this tool much like visual studio

124
00:06:12,600 --> 00:06:16,000
2013, which we tried on the stream for the first time, this is

125
00:06:16,000 --> 00:06:16,800
development tool.

126
00:06:16,800 --> 00:06:21,400
I have no experience with so I make no promises, but we'll go ahead

127
00:06:21,700 --> 00:06:22,800
and we'll open up.

128
00:06:23,200 --> 00:06:24,400
Where is this W?

129
00:06:24,600 --> 00:06:30,000
Will open up W and we'll dump it in here and if it works, it works.

130
00:06:30,000 --> 00:06:30,700
So there we go.

131
00:06:31,000 --> 00:06:31,700
Alright.

132
00:06:32,200 --> 00:06:35,500
So I don't know why did that, why did that default to to

133
00:06:36,600 --> 00:06:38,600
Compressed air are encrypted.

134
00:06:39,100 --> 00:06:40,000
I don't know why that.

135
00:06:40,100 --> 00:06:45,700
All right, well, we don't really need to encrypt it, that's weird.

136
00:06:46,200 --> 00:06:48,800
All right, how do I decrypt that?

137
00:06:48,800 --> 00:06:51,700
Oh, I guess I've got to go through it this way because it can't handle

138
00:06:51,700 --> 00:06:53,500
the fact that the drive is substituted.

139
00:06:54,300 --> 00:06:56,300
I don't even want to know what that just was people.

140
00:06:57,100 --> 00:06:59,500
And, of course, now, Windows is thinking about it.

141
00:07:01,800 --> 00:07:05,800
So, maybe in classic Windows fashion that the hardest part about

142
00:07:05,800 --> 00:07:08,600
actually using this tool will be getting Windows to stop thinking

143
00:07:08,600 --> 00:07:12,900
about letting me use the tool, which apparently is like this really

144
00:07:12,900 --> 00:07:14,200
long involved process.

145
00:07:14,200 --> 00:07:19,000
I can't actually imagine why that is, but apparently that is okay.

146
00:07:19,000 --> 00:07:20,200
Can you please?

147
00:07:21,200 --> 00:07:22,400
What is the problem?

148
00:07:22,800 --> 00:07:23,900
This is absurd.

149
00:07:25,200 --> 00:07:26,300
So is there something?

150
00:07:26,300 --> 00:07:28,200
I don't understand here about what's going on?

151
00:07:28,200 --> 00:07:30,300
Well, I can use it while we're waiting for that to happen.

152
00:07:30,300 --> 00:07:31,400
I suppose I don't know what's going on.

153
00:07:31,400 --> 00:07:32,400
I can look at it after.

154
00:07:33,100 --> 00:07:37,500
So anyway what Fabien said is that basically what you're supposed to

155
00:07:37,500 --> 00:07:42,000
do is you're supposed to include this h-file temporarily right, you

156
00:07:42,000 --> 00:07:42,500
don't.

157
00:07:42,600 --> 00:07:45,500
This is not actually something you don't build with this normally but

158
00:07:45,500 --> 00:07:49,400
when you want it to give you when you want it, to run it through this

159
00:07:49,400 --> 00:07:51,100
little code analysis tool.

160
00:07:51,700 --> 00:07:54,400
What you do is you include this iaca marks

161
00:07:54,800 --> 00:07:58,300
File, which will go ahead and include in here, right?

162
00:07:58,300 --> 00:08:07,600
So let's go ahead and do that include I see a marks dot h, like so and

163
00:08:07,600 --> 00:08:13,900
then you can use that to Mark the section that you want it to give you

164
00:08:14,100 --> 00:08:17,300
a sort of an analysis of if that makes sense.

165
00:08:17,700 --> 00:08:22,000
So you can see it here and basically all this is is just it's

166
00:08:22,000 --> 00:08:24,600
literally just the markers that you're

167
00:08:24,700 --> 00:08:26,100
opposed to use, right?

168
00:08:26,700 --> 00:08:31,400
And so all I think it really does is emit code that then they're in

169
00:08:31,400 --> 00:08:34,900
out analyzing tool can use to look at your binary and see what's in

170
00:08:34,900 --> 00:08:35,799
it, right?

171
00:08:36,100 --> 00:08:40,100
So what we want to do is say alright, let's do a start and an end

172
00:08:40,200 --> 00:08:43,799
around this block that we were trying to analyze before, right?

173
00:08:43,900 --> 00:08:48,700
So like right here, we could just do a start and then let it, you

174
00:08:48,700 --> 00:08:53,000
know, let it count all that stuff and then we can go down and at the

175
00:08:53,000 --> 00:08:54,500
end of it, just

176
00:08:54,700 --> 00:08:56,500
Do do the end, right?

177
00:08:56,600 --> 00:08:59,500
So oops, is that

178
00:09:01,100 --> 00:09:03,200
That's actually here, I guess, right?

179
00:09:03,300 --> 00:09:04,400
Is that correct?

180
00:09:05,400 --> 00:09:06,200
Start?

181
00:09:06,900 --> 00:09:08,100
Yeah, and end.

182
00:09:08,700 --> 00:09:10,100
Okay, there we go.

183
00:09:12,000 --> 00:09:18,400
So that should be that I think so.

184
00:09:18,400 --> 00:09:21,000
We're going to have to modify the build briefly just to include that

185
00:09:21,000 --> 00:09:21,900
directory, right?

186
00:09:21,900 --> 00:09:24,800
Because it's not going to know where that actually is.

187
00:09:24,900 --> 00:09:28,500
So I need to have some way of telling it to how to find that.

188
00:09:28,500 --> 00:09:31,500
So when we actually compile our stuff, I'll just throw in and include

189
00:09:31,500 --> 00:09:32,700
directory here, right?

190
00:09:32,800 --> 00:09:41,100
I'll go back one, two, directories to this is a CA wind 64 /.

191
00:09:41,500 --> 00:09:44,600
Well no / just I think that's just just it, right?

192
00:09:44,600 --> 00:09:48,000
So let's compile that and see is that not correct?

193
00:09:48,100 --> 00:09:54,400
Backslash backslash I-64 that should be it right?

194
00:09:54,400 --> 00:09:57,000
Oh no we're in the build directory.

195
00:09:57,100 --> 00:09:57,700
Never mind.

196
00:09:57,700 --> 00:10:01,600
So we're building into W build so it's really just one backslash to

197
00:10:01,600 --> 00:10:02,800
get back to the root.

198
00:10:03,200 --> 00:10:04,400
That should be it right.

199
00:10:04,900 --> 00:10:06,900
I see a marks dot h.

200
00:10:08,600 --> 00:10:11,200
Feel like that should have worked although you know what I should do

201
00:10:11,200 --> 00:10:11,300
now?

202
00:10:11,400 --> 00:10:13,600
That I notice that as well for people on other platforms.

203
00:10:14,100 --> 00:10:16,400
It's got a capital letter in the name there.

204
00:10:16,600 --> 00:10:21,900
So for people who are building on Linux that would cause them to into

205
00:10:21,900 --> 00:10:22,300
the consternation.

206
00:10:22,300 --> 00:10:24,400
So let's go ahead and put that in there.

207
00:10:24,600 --> 00:10:30,900
So, why is this giving me grief if I do a w:, would it work?

208
00:10:31,400 --> 00:10:32,900
No, it's still can't find.

209
00:10:32,900 --> 00:10:36,700
I see a marks dot h but I don't.

210
00:10:36,700 --> 00:10:36,900
Oh,

211
00:10:39,500 --> 00:10:45,000
How about I don't edit the removed 32-bit version that's that's good.

212
00:10:45,500 --> 00:10:46,600
Nicely done Casey.

213
00:10:46,900 --> 00:10:48,600
Yeah that could be it.

214
00:10:50,000 --> 00:10:52,200
All right, let's see here.

215
00:10:54,200 --> 00:10:55,200
Well.

216
00:10:56,600 --> 00:11:00,100
That is a problem because it looks like that's not going to work on

217
00:11:00,100 --> 00:11:00,200
this.

218
00:11:00,200 --> 00:11:03,800
Do we need to do VC 64.

219
00:11:04,200 --> 00:11:05,600
Is this what we need to do here?

220
00:11:08,700 --> 00:11:13,400
Trying to figure out which one we would use if we need to use this

221
00:11:13,400 --> 00:11:13,700
one.

222
00:11:15,100 --> 00:11:18,400
Since it's the 64-bit to Burger can't do as mm.

223
00:11:18,400 --> 00:11:18,600
Mm.

224
00:11:18,600 --> 00:11:20,800
It's which kind of makes me wonder.

225
00:11:20,800 --> 00:11:21,600
What are they doing?

226
00:11:21,700 --> 00:11:22,500
I don't know what's.

227
00:11:22,500 --> 00:11:22,900
Right?

228
00:11:22,900 --> 00:11:26,000
GS B, that's pretty interesting.

229
00:11:26,000 --> 00:11:27,100
I don't even know what that is.

230
00:11:28,200 --> 00:11:28,700
That's some food.

231
00:11:28,700 --> 00:11:29,400
Be right there.

232
00:11:31,100 --> 00:11:32,000
That's pretty cool.

233
00:11:32,500 --> 00:11:36,800
All right, so now in theory, we are supposed to be able to.

234
00:11:36,800 --> 00:11:39,000
Let me make sure that we're building an O2.

235
00:11:39,000 --> 00:11:39,500
We are.

236
00:11:39,800 --> 00:11:42,800
So now, in theory, what you're supposed to be able to do is run this

237
00:11:42,800 --> 00:11:44,800
little eye, a see a thing, right?

238
00:11:44,800 --> 00:11:48,200
And you can tell it is a 64-bit thing, you can say that it's a, our

239
00:11:48,200 --> 00:11:52,300
got, an architecture, and nhm is the Nehalem thing that we've got?

240
00:11:52,300 --> 00:11:53,000
Right?

241
00:11:53,600 --> 00:11:55,600
And now we're supposed to be able, I guess it.

242
00:11:55,600 --> 00:11:59,700
Just give it our build, and it's supposed to know,

243
00:12:00,000 --> 00:12:05,100
Like, it's supposed to be able to tell us what the actual cycle counts

244
00:12:05,100 --> 00:12:05,500
are.

245
00:12:06,900 --> 00:12:11,100
And lo and behold, that's exactly what it did.

246
00:12:11,800 --> 00:12:12,300
Check it out.

247
00:12:12,300 --> 00:12:13,900
People look at this.

248
00:12:14,400 --> 00:12:14,700
All right.

249
00:12:14,700 --> 00:12:15,600
So this is pretty great.

250
00:12:15,600 --> 00:12:17,400
Let's go through this and see if we can understand it.

251
00:12:17,400 --> 00:12:19,200
I've never seen one of these before but

252
00:12:22,300 --> 00:12:23,000
Pretty great.

253
00:12:24,700 --> 00:12:27,500
All right, so Port binding in cycles per iteration.

254
00:12:30,000 --> 00:12:31,700
So here is all we've got.

255
00:12:31,800 --> 00:12:32,900
I don't actually know what.

256
00:12:34,200 --> 00:12:40,800
This readout is supposed to tell us though, because, looking at it

257
00:12:40,800 --> 00:12:41,700
here.

258
00:12:42,700 --> 00:12:49,400
That well actually, I guess that could sort of be well let's just

259
00:12:49,400 --> 00:12:50,200
let's just move through it.

260
00:12:50,200 --> 00:12:53,800
But anyway so here's what it says this chart is going to tell us here.

261
00:12:53,800 --> 00:12:56,200
I'm going to hold off on this for a second because I don't necessarily

262
00:12:56,200 --> 00:13:00,100
know exactly what that's trying to tell me in terms of like DV and d

263
00:13:00,100 --> 00:13:07,000
and so on here so I'm not sure oh divider pipe and but D I don't know.

264
00:13:07,000 --> 00:13:09,000
D is data, fetch pipe, okay?

265
00:13:09,000 --> 00:13:12,700
So we're just going to take a look here and see

266
00:13:12,800 --> 00:13:14,000
What's going on, right?

267
00:13:14,000 --> 00:13:15,200
So we've got to move.

268
00:13:16,600 --> 00:13:18,200
And so, I guess what it's telling us is, right?

269
00:13:18,300 --> 00:13:19,200
Is this struction?

270
00:13:19,300 --> 00:13:21,000
This is 1 micro op, right?

271
00:13:21,000 --> 00:13:23,300
Which is the thing that the processor fundamentally operates on

272
00:13:23,300 --> 00:13:25,200
remember, when I said things can have my coop.

273
00:13:25,200 --> 00:13:28,300
So we basically a single instruction might take multiple Micro Ops

274
00:13:28,500 --> 00:13:31,800
because it might be that that instruction itself is actually sort of

275
00:13:31,800 --> 00:13:35,000
broken into multiple instructions inside the processor, basically.

276
00:13:35,300 --> 00:13:38,000
So the things we see are not exactly what the processor executes.

277
00:13:38,000 --> 00:13:40,700
All time, sometimes they are and when something is 1 micro up, then it

278
00:13:40,700 --> 00:13:41,400
sort of is, right?

279
00:13:41,400 --> 00:13:45,300
It's like one, it's one to one, but doesn't have to be so that went

280
00:13:45,300 --> 00:13:46,100
into Port 1.

281
00:13:47,000 --> 00:13:51,000
This went into the these two moles both went into this port.

282
00:13:51,000 --> 00:13:55,300
Now something that I don't actually know what this is trying to say

283
00:13:55,300 --> 00:13:56,300
here, right?

284
00:13:56,400 --> 00:14:00,100
Is, I don't know if that implies that since these went into either

285
00:14:00,100 --> 00:14:03,700
poor it that they would be that they wouldn't conflict.

286
00:14:03,700 --> 00:14:06,000
Like since this is important 5 and this is important 0.

287
00:14:06,000 --> 00:14:11,100
Presumably, they could issue at the same time but I don't see against.

288
00:14:11,100 --> 00:14:12,900
I've never used this tool before.

289
00:14:13,500 --> 00:14:16,100
I've never I don't actually know.

290
00:14:16,500 --> 00:14:21,900
What the, you know, what is actually what it's actually trying to tell

291
00:14:21,900 --> 00:14:27,500
me as far as simultaneous execution is so CP.

292
00:14:27,600 --> 00:14:34,900
Like, I wonder if the CP, what is CP is CP like one clock tick or

293
00:14:34,900 --> 00:14:35,400
something?

294
00:14:35,400 --> 00:14:37,500
Potentially because that would make some sense, right?

295
00:14:37,500 --> 00:14:41,800
Like if you look at this, I don't know if CP means, like maybe that's

296
00:14:41,800 --> 00:14:44,800
when it had to click over and that would make some sense, right?

297
00:14:44,800 --> 00:14:46,300
Because well,

298
00:14:46,500 --> 00:14:48,700
Of course, you've got to multiplies in here so I don't know.

299
00:14:49,400 --> 00:14:50,200
So I'm not sure.

300
00:14:51,200 --> 00:14:55,500
So this may take actually some actually, you know, some study to try

301
00:14:55,500 --> 00:14:56,800
and figure out what all this stuff is.

302
00:14:56,800 --> 00:14:59,500
I mean, I'm sure there's a manual that comes with it and I don't know

303
00:14:59,500 --> 00:14:59,800
that we need.

304
00:15:00,000 --> 00:15:00,800
That right now.

305
00:15:00,800 --> 00:15:04,600
But this is kind of cool because I did not know that they had actually

306
00:15:04,700 --> 00:15:06,000
shipped a tool that you were allowed to use.

307
00:15:06,000 --> 00:15:08,700
Externally that did this sort of stuff that's really great.

308
00:15:08,700 --> 00:15:10,900
That's what we would have had to build ourselves.

309
00:15:10,900 --> 00:15:13,300
When I kind of alluded to, if we wanted to do something that really

310
00:15:13,300 --> 00:15:14,000
looked at the ports.

311
00:15:14,200 --> 00:15:18,400
This will basically tell us on the Nehalem exactly what the those sort

312
00:15:18,400 --> 00:15:20,800
of Port issues actually are right.

313
00:15:20,900 --> 00:15:23,300
And so this is much better than the little janky macros that I was

314
00:15:23,300 --> 00:15:25,800
using and this would be a great thing for us to use.

315
00:15:27,300 --> 00:15:33,200
So I again, wish ICP was listed as what that was going to do a lot of

316
00:15:33,200 --> 00:15:34,300
these other things here.

317
00:15:34,300 --> 00:15:38,900
It's actually says, like, microfusion happened, which I assume is sort

318
00:15:38,900 --> 00:15:43,100
of saying that Micro Ops could be done together in some way.

319
00:15:43,100 --> 00:15:43,800
I'm not sure.

320
00:15:44,300 --> 00:15:47,700
But you can see that this happened a couple times in here, right?

321
00:15:49,500 --> 00:15:51,700
But a lot of those other ones.

322
00:15:52,300 --> 00:15:54,800
0f, what else do we got in here?

323
00:15:55,700 --> 00:15:56,600
Mac, refuse.

324
00:15:56,700 --> 00:15:58,800
With the previous instruction occurred.

325
00:15:59,000 --> 00:16:00,100
So what was that?

326
00:16:00,700 --> 00:16:02,900
Let's see here Jas test.

327
00:16:02,900 --> 00:16:07,100
Okay so basically saying could do these together so it didn't actually

328
00:16:07,100 --> 00:16:10,300
have to count, I guess the jump a test is something that sets the

329
00:16:10,300 --> 00:16:12,300
condition B in the jump jumps on that.

330
00:16:12,400 --> 00:16:15,600
So this is like, you know, a conditional being executed here, right?

331
00:16:15,700 --> 00:16:19,000
And so I guess it was able to fuse those operations together so that

332
00:16:19,000 --> 00:16:22,000
they didn't take a cycle each or anything like this, right?

333
00:16:23,600 --> 00:16:24,500
So some of that.

334
00:16:25,100 --> 00:16:26,000
What else we got here?

335
00:16:26,000 --> 00:16:26,600
Anything else.

336
00:16:26,600 --> 00:16:33,700
Interesting looks like mostly just the carrot and the f.

337
00:16:34,300 --> 00:16:35,500
I don't see anything else.

338
00:16:36,500 --> 00:16:38,000
So, yeah, this is pretty great.

339
00:16:38,200 --> 00:16:41,400
I mean, this is also great because it tells us exactly what

340
00:16:41,400 --> 00:16:42,600
instructions are being executed.

341
00:16:42,600 --> 00:16:45,700
You can look at the assembly, pretty easily in this format and see

342
00:16:45,700 --> 00:16:47,200
what's going on, which is pretty great.

343
00:16:47,800 --> 00:16:49,400
So yeah, this is, this is pretty awesome.

344
00:16:49,400 --> 00:16:50,400
I'm glad you sent this to us.

345
00:16:50,600 --> 00:16:52,000
I also don't know.

346
00:16:52,400 --> 00:16:53,300
It looks like there's some other

347
00:16:53,400 --> 00:16:55,900
Of fun things to like, I don't know.

348
00:16:55,900 --> 00:16:58,000
There's just there's just some fun stuff in here.

349
00:16:58,000 --> 00:16:59,200
Like you can output a graph.

350
00:16:59,200 --> 00:17:02,300
I guess if you install graphviz I don't know.

351
00:17:02,300 --> 00:17:04,300
That's kind of cool, right?

352
00:17:05,400 --> 00:17:08,099
So there's just, I don't know, just pretty cool.

353
00:17:08,300 --> 00:17:11,700
So what this tells us if this is correct, it says that this block of

354
00:17:11,700 --> 00:17:15,900
code should take eighty six Cycles to execute right?

355
00:17:16,599 --> 00:17:22,099
And what's kind of interesting about that is that that is actually

356
00:17:22,099 --> 00:17:23,200
lower than

357
00:17:23,300 --> 00:17:25,800
than what we were observing, right?

358
00:17:26,800 --> 00:17:30,700
Because if you think about it, we were calculating four pixels at a

359
00:17:30,700 --> 00:17:32,500
time, right?

360
00:17:33,000 --> 00:17:38,600
So, 86 divided by 4 is like 21, 22, cycles per pixel.

361
00:17:39,200 --> 00:17:47,900
And so we are clearly half the speed we would be if this were just

362
00:17:48,100 --> 00:17:49,900
executing straight through.

363
00:17:50,700 --> 00:17:53,100
Right based on what this tool is saying.

364
00:17:53,900 --> 00:17:57,200
It says the block, throughput is 86 Cycles.

365
00:17:57,800 --> 00:17:59,700
So I don't know.

366
00:18:00,100 --> 00:18:03,800
Um, that would suggest that we might be waiting on some memory.

367
00:18:03,800 --> 00:18:07,500
That would suggest that maybe we can do some interesting things in

368
00:18:07,500 --> 00:18:10,800
terms of maybe doing some prefetching, I don't know, right?

369
00:18:13,600 --> 00:18:17,500
So I'm not sure it seems like maybe there's some room for improvement

370
00:18:17,500 --> 00:18:17,600
there.

371
00:18:17,600 --> 00:18:18,600
It's something to think about.

372
00:18:19,500 --> 00:18:21,600
So I don't know that we necessarily want to go into that right now,

373
00:18:21,600 --> 00:18:24,000
but I really wanted to kind of see if that work and it kind of looks

374
00:18:24,000 --> 00:18:24,500
like it does.

375
00:18:24,500 --> 00:18:25,300
So that's pretty awesome.

376
00:18:25,300 --> 00:18:29,200
That means we can get rid of all this craft and just have a nice way

377
00:18:29,400 --> 00:18:29,700
of

378
00:18:30,000 --> 00:18:31,700
Really using a tool.

379
00:18:31,700 --> 00:18:33,700
Like I said, it would be nice if I can power to this for you.

380
00:18:33,700 --> 00:18:36,200
Well, this is the next best thing, right?

381
00:18:36,200 --> 00:18:38,700
It's not built into the compiler, so it's a little inconvenient.

382
00:18:38,700 --> 00:18:42,500
You got to do some kind of little janky, a few janky, Little Steps

383
00:18:42,500 --> 00:18:47,000
there, but not on the whole, that was pretty unoffensive, right?

384
00:18:47,000 --> 00:18:48,800
That was not very difficult to do.

385
00:18:49,100 --> 00:18:53,800
And so I'll take that any day over having to write, you know, sort of

386
00:18:53,800 --> 00:18:58,600
like a simulator that I run myself for a processor where I don't

387
00:18:58,600 --> 00:18:59,800
actually have that.

388
00:19:00,000 --> 00:19:02,300
Surly all the documentation about how it's supposed to work.

389
00:19:02,300 --> 00:19:02,900
Right?

390
00:19:03,500 --> 00:19:06,500
If I trust Intel is actually doing a reasonable job on that thing,

391
00:19:06,500 --> 00:19:09,600
then, presumably it should be authoritative and we can run it through

392
00:19:09,600 --> 00:19:12,800
that tool and figure out what they think it actually will take to run.

393
00:19:12,800 --> 00:19:13,700
So that's pretty cool.

394
00:19:17,200 --> 00:19:20,200
All right, so we don't really need to do that at the moment.

395
00:19:20,300 --> 00:19:23,500
So what I'm going to do is I'm going to get rid of that for a minute,

396
00:19:24,100 --> 00:19:24,600
right?

397
00:19:26,900 --> 00:19:28,600
And I can do that pretty trivially this way.

398
00:19:28,600 --> 00:19:31,900
We don't need need that include because most of the time, we don't

399
00:19:31,900 --> 00:19:33,100
really want to be building with that.

400
00:19:33,100 --> 00:19:35,200
It's not it's not part of the program, right?

401
00:19:35,200 --> 00:19:36,900
That's not something that we're really.

402
00:19:38,400 --> 00:19:42,300
Using directly, but we want to kind of be able to perhaps turn it back

403
00:19:42,300 --> 00:19:44,000
on again a little bit in the future.

404
00:19:44,000 --> 00:19:45,900
So that's that's pretty great.

405
00:19:46,500 --> 00:19:49,700
Again, another big thanks to Fabien for that.

406
00:19:50,200 --> 00:19:52,000
He is like I said, kind of on Twitter.

407
00:19:52,100 --> 00:19:56,600
He is our sort of our optimization, our patron, saint of optimization

408
00:19:56,900 --> 00:20:00,900
at the moment and he mentioned something else that we should take a

409
00:20:00,900 --> 00:20:01,700
look at today.

410
00:20:01,900 --> 00:20:04,500
Today's kind of maybe a Fabien clean-up day in that sense.

411
00:20:04,700 --> 00:20:06,500
He mentioned something else that I think it would be nice to take a

412
00:20:06,500 --> 00:20:07,100
look at.

413
00:20:07,100 --> 00:20:07,400
He was

414
00:20:07,700 --> 00:20:13,000
Hang out as well that we didn't take as much advantage of some math

415
00:20:13,000 --> 00:20:16,400
rearrangement as we could and this kind of gets more into actual

416
00:20:16,400 --> 00:20:17,800
optimization optimization, right?

417
00:20:17,800 --> 00:20:20,700
Because all we really did, you know, you saw me do it.

418
00:20:20,700 --> 00:20:23,900
But all I really did write when we were working on this routine is I

419
00:20:23,900 --> 00:20:25,400
wasn't really optimizing, your team.

420
00:20:25,600 --> 00:20:27,500
I would just translating the routine, right?

421
00:20:27,600 --> 00:20:30,300
I was translating the routine from scalar to Cindy, and that's mostly

422
00:20:30,300 --> 00:20:30,900
what we did.

423
00:20:31,100 --> 00:20:34,700
And then I did a little bit yesterday of, like, finding some things

424
00:20:34,700 --> 00:20:37,400
that were easy to pull out into things that could be done in the loop.

425
00:20:37,600 --> 00:20:40,800
We save some cycles that way, but that, that was really it right?

426
00:20:42,300 --> 00:20:46,900
But what he was pointing out is well, first of all, he was saying, you

427
00:20:46,900 --> 00:20:50,000
know, bilinear and squaring, right?

428
00:20:51,400 --> 00:20:55,800
They don't actually have to be done in floating point if we didn't

429
00:20:55,800 --> 00:20:57,600
want to do them floating point, right?

430
00:20:57,700 --> 00:20:59,800
And furthermore, they don't have to be done.

431
00:21:00,200 --> 00:21:02,800
0 to 1, if we don't want to do them 0 to 1.

432
00:21:03,300 --> 00:21:07,000
So what he pointed out is we're doing all these multiplies right.

433
00:21:07,100 --> 00:21:11,000
Mul PS to do the in 5255 4X right word.

434
00:21:11,100 --> 00:21:15,700
These are these are in 0 to 255 space and we're turning into 01 space.

435
00:21:15,900 --> 00:21:20,900
He was saying, you know, at you know, very simply you could just start

436
00:21:20,900 --> 00:21:26,200
with doing that after you did the bilinear, right?

437
00:21:26,300 --> 00:21:29,600
Because you could square numbers just fine.

438
00:21:30,000 --> 00:21:36,100
In 0 to 255 space and you can bilinear, things just fine in 021 space.

439
00:21:36,400 --> 00:21:39,100
So I'm sorry in certain should be five space.

440
00:21:39,200 --> 00:21:41,300
So why are you multiplying all these values?

441
00:21:41,300 --> 00:21:46,000
When, if you just move that after the fact, right?

442
00:21:46,500 --> 00:21:49,500
You would only have to do the multiply on the result.

443
00:21:50,400 --> 00:21:52,400
So let's take a look at that, right?

444
00:21:52,700 --> 00:21:55,600
If we got rid of all of these multiplies, we're just doing the

445
00:21:55,600 --> 00:21:59,200
simplest first step, if I just got rid of all of these multiplies.

446
00:21:59,300 --> 00:21:59,900
So basically,

447
00:22:00,000 --> 00:22:02,100
Everything here was doing that mull.

448
00:22:02,100 --> 00:22:02,700
PS.

449
00:22:04,500 --> 00:22:07,800
We got rid of so I'm just, you know, I'm just killing it right.

450
00:22:08,700 --> 00:22:09,600
Kill rectangle.

451
00:22:10,800 --> 00:22:11,700
I'm just getting rid of it there.

452
00:22:11,700 --> 00:22:14,200
So basically all of these things that we're doing a multiply we just

453
00:22:14,200 --> 00:22:16,800
get rid of all those multiplies and we were doing a lot of multiplies

454
00:22:17,000 --> 00:22:17,600
and multiplies.

455
00:22:17,600 --> 00:22:20,100
We only have one unit, we learned that yesterday, the end of the

456
00:22:20,100 --> 00:22:23,800
stream we only have one unit so those multiplies don't overlap with

457
00:22:23,800 --> 00:22:26,600
each other, you can only get one per cycle at maximum, right?

458
00:22:26,600 --> 00:22:28,200
That was the throughput on those.

459
00:22:28,200 --> 00:22:30,800
I think, and there's only one unit, so they don't duel issue.

460
00:22:31,400 --> 00:22:33,700
So, you know, if you get too many multipliers, you could clog.

461
00:22:33,900 --> 00:22:34,600
Things up.

462
00:22:35,000 --> 00:22:37,400
So we get rid of those multiplies and we just have the square.

463
00:22:37,700 --> 00:22:40,800
So basically what it does is it squares the value in the 0 to 25

464
00:22:40,800 --> 00:22:41,300
range.

465
00:22:41,500 --> 00:22:46,300
So what that's going to mean is that the maximum value and sorry I

466
00:22:46,300 --> 00:22:49,300
guess I can get rid of this as well which is basically to say that

467
00:22:49,300 --> 00:22:55,300
Texel A text will be a textile CA and so on just don't even get

468
00:22:55,700 --> 00:22:56,300
processed at.

469
00:22:56,300 --> 00:22:57,000
All right.

470
00:22:57,000 --> 00:22:57,300
There?

471
00:22:58,600 --> 00:23:01,700
What that means is after we do the bilinear, right?

472
00:23:02,500 --> 00:23:02,800
Hmm.

473
00:23:06,000 --> 00:23:10,500
After we do the bilinear now we could do the conversion, right?

474
00:23:10,500 --> 00:23:15,600
So now when we do the multiplication by what we did, the location, we

475
00:23:15,600 --> 00:23:16,200
can do that.

476
00:23:16,300 --> 00:23:21,000
And I guess I just spotted this, we could do it by pre multiplying

477
00:23:21,000 --> 00:23:23,400
that term into the color term, right?

478
00:23:24,500 --> 00:23:27,600
Because we're already doing a multiplication here, right?

479
00:23:27,600 --> 00:23:31,300
We're already multiplying this by the color, which is a constant.

480
00:23:31,900 --> 00:23:37,200
So what if we just took that divisor and baked it right into the

481
00:23:37,200 --> 00:23:40,500
color, then we wouldn't have to add a new multi, do we just use the

482
00:23:40,500 --> 00:23:42,900
same multiply that we were already doing, right?

483
00:23:43,500 --> 00:23:45,900
So, let's just do that right in color.

484
00:23:46,000 --> 00:23:47,800
I think that's the only place that's ever used.

485
00:23:47,800 --> 00:23:50,600
Right, we've got color are 4X here, right?

486
00:23:50,600 --> 00:23:52,200
That's the only place that's ever used.

487
00:23:52,500 --> 00:23:54,100
So instead, let's go.

488
00:23:54,300 --> 00:23:55,900
Go ahead and do an M&M set 1.

489
00:23:55,900 --> 00:23:59,800
PS of of the info, you know, of

490
00:24:00,000 --> 00:24:03,600
Like, I guess are normalized coefficient will just call that, right?

491
00:24:05,100 --> 00:24:07,600
Of are normalized, coefficient, will bake that in there.

492
00:24:07,600 --> 00:24:08,200
And what's that?

493
00:24:08,200 --> 00:24:12,500
Normalized coefficient going to be right, well, before it was one over

494
00:24:12,500 --> 00:24:13,700
255, right?

495
00:24:13,700 --> 00:24:14,500
It was this

496
00:24:15,800 --> 00:24:22,900
But if you think about it that's not really correct for everybody.

497
00:24:23,300 --> 00:24:26,900
It's going to be correct for Alpha because there was a Rosario 2255

498
00:24:27,000 --> 00:24:30,000
but the rest of these guys got squared, right?

499
00:24:30,200 --> 00:24:34,000
So it really means that the the normalize if they were going from 0 to

500
00:24:34,000 --> 00:24:39,000
255, if they got squared, they're now going from 0 to 255 squared,

501
00:24:39,300 --> 00:24:39,600
right?

502
00:24:39,600 --> 00:24:43,300
So, their Reigns expanded, the range doesn't expand when your 0 to 1 U

503
00:24:43,300 --> 00:24:43,600
Square.

504
00:24:43,600 --> 00:24:45,400
It you stay 0 to 1, that's the magical.

505
00:24:45,500 --> 00:24:47,400
Property of zero to one, right?

506
00:24:48,800 --> 00:24:53,400
But if you actually have a value above one is your 0 to 55 when you

507
00:24:53,400 --> 00:24:55,200
square it, your total value goes up.

508
00:24:55,200 --> 00:24:56,500
So you widen that range.

509
00:24:56,900 --> 00:24:58,600
So we actually need to do here.

510
00:24:58,800 --> 00:25:01,600
Right is have a normalized squared c as well, right?

511
00:25:01,600 --> 00:25:04,800
Which is just to 55 squared, right?

512
00:25:07,400 --> 00:25:12,300
And so that is what we would multiply these guys by right to normalize

513
00:25:12,300 --> 00:25:13,000
them out.

514
00:25:13,200 --> 00:25:20,000
So I believe that if we just do that, think that should work but

515
00:25:20,000 --> 00:25:21,500
famous last words, right?

516
00:25:21,800 --> 00:25:24,300
And hey, guess what it does, right?

517
00:25:26,500 --> 00:25:28,000
Pretty spiffy.

518
00:25:28,700 --> 00:25:30,800
So we got rid of a bunch of work we could do there.

519
00:25:31,300 --> 00:25:32,900
Unfortunately, we didn't save too many cycles.

520
00:25:32,900 --> 00:25:37,200
We're down to forty five Cycles roughly now, but the other thing

521
00:25:37,200 --> 00:25:41,100
that's important to remember at this point, we also don't really know

522
00:25:41,300 --> 00:25:44,100
whether we're starting to be Memory bound here, right?

523
00:25:44,100 --> 00:25:49,000
So, it's hard to say this store that change saved as many cycles, or

524
00:25:49,000 --> 00:25:50,400
who knows what's happening, right?

525
00:25:50,400 --> 00:25:54,400
So, we don't really know necessarily all of that stuff.

526
00:25:54,400 --> 00:25:55,900
We, you know, it's hard to say,

527
00:25:56,200 --> 00:25:57,000
Some of these things.

528
00:25:57,100 --> 00:25:58,200
How much have benefit?

529
00:25:58,200 --> 00:26:01,600
They actually are Because unless we take memory out of the equation,

530
00:26:01,600 --> 00:26:02,500
it's hard to know.

531
00:26:03,200 --> 00:26:05,500
So one thing we could do, right?

532
00:26:06,000 --> 00:26:11,800
Is we could try to again like do something where we sort of fudge the

533
00:26:11,800 --> 00:26:13,900
sample values for example,

534
00:26:16,200 --> 00:26:18,400
To try and take these texture fetches out of the equation.

535
00:26:18,400 --> 00:26:19,500
For example, right?

536
00:26:20,000 --> 00:26:25,100
We could do something where we did something like this before.

537
00:26:25,700 --> 00:26:26,700
Where we sort of said,

538
00:26:29,200 --> 00:26:35,200
Excuse me, where we said, okay, you know what, if we were to, what if

539
00:26:35,200 --> 00:26:39,200
we were to, just stuff those sample values with actual, you know, u

540
00:26:39,200 --> 00:26:41,300
and v values or something like this, right?

541
00:26:41,500 --> 00:26:44,800
So we were to say, you know, this is you, oops.

542
00:26:44,800 --> 00:26:45,000
Sorry.

543
00:26:45,000 --> 00:26:50,800
This is, let's say, fetch X for x and this is fetch y4y or something

544
00:26:50,800 --> 00:26:52,900
like that, you know, we could try to stuff those values.

545
00:26:53,400 --> 00:26:54,200
I don't know.

546
00:26:55,200 --> 00:26:56,300
It's tough to say.

547
00:26:59,200 --> 00:26:59,700
I'm not sure.

548
00:27:00,000 --> 00:27:03,300
Best way to analyze that would be right, but at the very least,

549
00:27:03,300 --> 00:27:05,600
removing all those multiplies certainly can't hurt us.

550
00:27:06,100 --> 00:27:08,500
So I think that was a pretty cool thing, right?

551
00:27:08,600 --> 00:27:13,100
And it turns out that we actually had this kind of nice, this nice

552
00:27:13,100 --> 00:27:18,000
sort of lined up where we could do that factoring right in there and

553
00:27:18,000 --> 00:27:22,100
not have to actually introduce a multiply at the end at all, so that's

554
00:27:22,100 --> 00:27:22,700
pretty cool.

555
00:27:23,600 --> 00:27:27,900
The other thing that Fabien was suggesting to and let me just double

556
00:27:27,900 --> 00:27:29,900
check to make sure that that isn't something that

557
00:27:30,000 --> 00:27:30,200
at all.

558
00:27:30,200 --> 00:27:31,700
So we could do elsewhere, right?

559
00:27:31,700 --> 00:27:36,700
I don't think so, but I could be wrong about that.

560
00:27:37,000 --> 00:27:39,700
So let's see, we are doing.

561
00:27:39,700 --> 00:27:43,000
We after that, we do sort of the what we do the blend.

562
00:27:43,800 --> 00:27:46,800
I mean, technically

563
00:27:49,100 --> 00:27:50,400
I want to say,

564
00:27:53,200 --> 00:27:54,900
I mean, if you look at this routine,

565
00:27:56,300 --> 00:28:00,700
It kind of looks like we don't have to really undo the blend there.

566
00:28:00,700 --> 00:28:02,500
If we don't want to either, right?

567
00:28:02,500 --> 00:28:08,300
We could just keep it all in the 0 to 255 space.

568
00:28:08,900 --> 00:28:12,300
I mean correct me if I'm wrong but that seems like that could happen,

569
00:28:12,300 --> 00:28:13,100
right?

570
00:28:13,300 --> 00:28:16,900
Because if we change this, instead of being 0 to 1, if we change the

571
00:28:16,900 --> 00:28:21,800
clamp between 0 and 65535 or old 2 to 5 squared, so if I 534 whatever

572
00:28:21,800 --> 00:28:25,400
it is right, if we change the clamping it in 2022,

573
00:28:26,200 --> 00:28:27,600
Two x squared space.

574
00:28:29,600 --> 00:28:33,100
Then we could leave dest in that space as well.

575
00:28:34,000 --> 00:28:38,000
And the only thing we'd actually have to normalize would be the alpha

576
00:28:38,000 --> 00:28:40,600
value, right?

577
00:28:42,600 --> 00:28:44,400
And we wouldn't really even after our minds that, but we do it, would

578
00:28:44,400 --> 00:28:46,800
we have to do an extra normalization later potentially for it.

579
00:28:46,800 --> 00:28:47,200
But

580
00:28:50,100 --> 00:28:52,100
So I mean even that we might be little, but we could leave that for

581
00:28:52,100 --> 00:28:52,500
now.

582
00:28:52,800 --> 00:28:54,200
So if we got rid of that

583
00:28:55,500 --> 00:29:02,600
then when we came in here and did the blend right in theory, we could

584
00:29:02,600 --> 00:29:08,100
just use just this one multiplied at the end to put things back into

585
00:29:08,100 --> 00:29:09,300
the proper range.

586
00:29:10,200 --> 00:29:10,800
I think

587
00:29:12,200 --> 00:29:13,200
Does that make sense?

588
00:29:14,100 --> 00:29:16,700
I feel like it makes some sense, right?

589
00:29:17,300 --> 00:29:18,900
So you do the square root.

590
00:29:18,900 --> 00:29:22,400
You'd actually do the square root not in the zero to one range.

591
00:29:23,000 --> 00:29:24,800
Now, maybe that's dumb, I don't know.

592
00:29:24,800 --> 00:29:27,900
Because reciprocal square root might want to be.

593
00:29:30,600 --> 00:29:31,200
I don't know.

594
00:29:31,700 --> 00:29:32,400
Let's try it.

595
00:29:32,800 --> 00:29:34,700
I think it's worth trying, right?

596
00:29:34,800 --> 00:29:36,100
We got that far with it.

597
00:29:36,200 --> 00:29:37,500
We might as well keep going.

598
00:29:37,700 --> 00:29:38,600
That's what I think.

599
00:29:39,100 --> 00:29:40,200
So, let's give it a shot.

600
00:29:40,300 --> 00:29:41,000
So let's back out.

601
00:29:41,900 --> 00:29:45,600
And we'll leave these guys as just whatever the color was.

602
00:29:47,100 --> 00:29:47,600
Right.

603
00:29:49,600 --> 00:29:51,300
So, let's see here.

604
00:29:51,700 --> 00:29:57,700
So if these color values are all in that range, I'm trying to think.

605
00:29:58,000 --> 00:29:59,800
I feel like if the color values, if we were

606
00:30:00,000 --> 00:30:01,400
Do everything in the to 55 range.

607
00:30:01,400 --> 00:30:05,200
We'd have to, we're gonna have a little bit honestly of a problem

608
00:30:06,800 --> 00:30:07,500
here.

609
00:30:07,700 --> 00:30:09,500
It would seem with Precision.

610
00:30:10,700 --> 00:30:16,700
I'm a little nervous here about this because if we keep going there,

611
00:30:17,200 --> 00:30:19,700
when we multiply the color that's going to introduce,

612
00:30:23,600 --> 00:30:25,800
Well, it's a multiply, right?

613
00:30:26,400 --> 00:30:29,200
So in theory, I guess we could just leave the color in the zero to one

614
00:30:29,200 --> 00:30:29,800
space.

615
00:30:34,600 --> 00:30:35,300
Should work.

616
00:30:36,400 --> 00:30:38,400
I mean, it's a ratio so I don't know.

617
00:30:38,400 --> 00:30:39,600
It should work, I think.

618
00:30:39,600 --> 00:30:41,300
Let's just, let's do it.

619
00:30:41,600 --> 00:30:45,200
So we multiply by the incoming colors in the zero to one space.

620
00:30:45,200 --> 00:30:47,500
So these numbers are all to 0 to 255.

621
00:30:47,500 --> 00:30:50,400
Sorry, 0 to 65535 or whatever, right?

622
00:30:51,700 --> 00:30:55,100
Or it's not 653 for its 255 squared.

623
00:30:55,500 --> 00:30:57,000
I want to stop saying the wrong thing.

624
00:30:57,300 --> 00:31:00,300
It's that 6502 five, right?

625
00:31:04,400 --> 00:31:06,700
So we go through here we multiply by the colors.

626
00:31:07,500 --> 00:31:11,100
We would change this to like zero still, right?

627
00:31:11,100 --> 00:31:14,900
But this is Max color value or something.

628
00:31:16,000 --> 00:31:19,000
So we need we need to Define that, right?

629
00:31:21,200 --> 00:31:24,400
And then when we go from srgb to linear brightness space, here we

630
00:31:24,400 --> 00:31:27,100
would just do the squaring like we did before.

631
00:31:27,100 --> 00:31:30,400
We wouldn't do the multiply, we just leave the desk exactly as it was,

632
00:31:30,700 --> 00:31:35,000
and the only person that would get inverted is the alpha for now,

633
00:31:35,200 --> 00:31:36,800
which maybe we don't even have to do that.

634
00:31:36,800 --> 00:31:40,000
I'm not sure if that's a savings or not but you know, we'll leave it

635
00:31:40,000 --> 00:31:40,700
that way for now.

636
00:31:41,500 --> 00:31:45,800
Then we do the blend as normal everybody's in that space.

637
00:31:46,300 --> 00:31:51,800
And then when we do, when we do this Final Fix up, instead here this

638
00:31:51,800 --> 00:31:57,000
is just like the renormalize value, right re 255.

639
00:31:57,600 --> 00:32:02,800
I guess we'll call it or something, which put stuff back in 2255 space

640
00:32:03,800 --> 00:32:05,100
Reese, 255 of Fire.

641
00:32:08,000 --> 00:32:11,400
That is a horrible name for a variable so it puts it back into the

642
00:32:11,400 --> 00:32:14,500
0225 space and then off we go.

643
00:32:15,000 --> 00:32:16,200
Does that seem right?

644
00:32:18,200 --> 00:32:19,100
Feel like it is.

645
00:32:19,100 --> 00:32:23,100
So, you know, here we just have, we have Max color value, which is the

646
00:32:23,100 --> 00:32:23,800
mmm.

647
00:32:24,200 --> 00:32:27,800
Again, just just, it's just a replicated value that's that's going to

648
00:32:27,800 --> 00:32:30,800
be that, that 255 255 value, right?

649
00:32:30,800 --> 00:32:32,100
So that we can do the clamping.

650
00:32:34,300 --> 00:32:39,500
And then, you know, after that, we just need this guy, right?

651
00:32:39,900 --> 00:32:43,100
And that's just going to be after you do that square root.

652
00:32:45,700 --> 00:32:50,800
Well, I mean actually it just works right because the square roots

653
00:32:50,800 --> 00:32:54,300
going to bring it back to the zero to 25 range, right?

654
00:32:56,100 --> 00:32:58,400
I mean, I feel like we don't even have to do that.

655
00:32:58,800 --> 00:32:59,700
I feel like

656
00:33:00,700 --> 00:33:04,000
You just do the square root, right?

657
00:33:05,300 --> 00:33:08,400
I mean, maybe I'm wrong about that.

658
00:33:12,500 --> 00:33:17,600
But if it's already there and you square root that number, then that

659
00:33:17,600 --> 00:33:18,600
should be it, right?

660
00:33:18,600 --> 00:33:20,800
I mean that's what we're looking at.

661
00:33:21,900 --> 00:33:30,600
so really it's just the alpha that would need to be fixed up there and

662
00:33:32,000 --> 00:33:36,900
If we again didn't actually do that Alpha so that we essentially, you

663
00:33:36,900 --> 00:33:39,300
know, the way this works is you multiply in textile?

664
00:33:39,300 --> 00:33:41,300
A, we only care about infects Olay.

665
00:33:41,400 --> 00:33:46,900
So if I just, if I just left the desde the same,

666
00:33:47,900 --> 00:33:53,100
You know didn't Square it and and to be honest why was the alpha

667
00:33:53,100 --> 00:33:54,500
getting square rooted in the first place?

668
00:33:54,500 --> 00:33:56,100
Was that a typo that I just introduced?

669
00:33:56,100 --> 00:33:57,100
We don't want that.

670
00:33:57,900 --> 00:33:59,300
It's not supposed to be squared.

671
00:33:59,500 --> 00:34:02,400
It's because the alpha never gets squared, right?

672
00:34:04,500 --> 00:34:04,700
Right.

673
00:34:04,700 --> 00:34:09,000
We should be able to just do it with Texel a here where the only time

674
00:34:09,000 --> 00:34:12,400
we actually do it is to do this, this inversion, right?

675
00:34:13,199 --> 00:34:20,000
So I feel like as strange as it seems, that's actually correct.

676
00:34:21,400 --> 00:34:26,699
I mean it's kind of crazy, but I think it's right.

677
00:34:29,400 --> 00:34:30,199
Which is wild.

678
00:34:32,400 --> 00:34:34,800
Yeah, I mean, I think that's, I think that's correct.

679
00:34:35,500 --> 00:34:40,300
So that gets rid of a bunch of operations actually quite a few in

680
00:34:40,300 --> 00:34:41,000
fact.

681
00:34:41,500 --> 00:34:43,600
So let's take a look at what's going on there.

682
00:34:46,300 --> 00:34:50,500
So it looks like really we're having trouble getting anywhere below

683
00:34:50,500 --> 00:34:53,400
the that boundary, it looks like right.

684
00:34:53,699 --> 00:34:58,800
So I feel like if this point unless I'm I'm, you know, doing unless I

685
00:34:58,800 --> 00:35:04,000
did something very stupid that I'm not thinking of it sort of seems

686
00:35:04,000 --> 00:35:06,600
like we're running up against

687
00:35:08,400 --> 00:35:12,800
we're kind of running up against a bit of a boundary here, right?

688
00:35:13,400 --> 00:35:17,400
I feel like you know, let's take a look but if we take a look at what

689
00:35:17,400 --> 00:35:20,700
this said before, our block throughput was eighty, six point, six

690
00:35:20,700 --> 00:35:22,200
Cycles at maximum.

691
00:35:22,200 --> 00:35:25,400
If you know, that's not counting any kind of memory stuff, so if I go

692
00:35:25,400 --> 00:35:27,000
ahead and turn this back on again,

693
00:35:28,600 --> 00:35:31,100
And do the compile right?

694
00:35:36,900 --> 00:35:41,200
If I ask it what our cycle count is now, what does it have to say?

695
00:35:41,500 --> 00:35:41,900
Oops,

696
00:35:47,000 --> 00:35:49,000
86.2 5 Cycles.

697
00:35:49,500 --> 00:35:50,100
Wow.

698
00:35:54,400 --> 00:35:55,700
How is that possible?

699
00:35:58,600 --> 00:35:59,200
so,

700
00:36:00,000 --> 00:36:00,700
Of those things.

701
00:36:00,700 --> 00:36:05,300
We got rid of the compiler was already getting rid of, or something to

702
00:36:05,300 --> 00:36:06,200
that effect.

703
00:36:07,400 --> 00:36:10,700
I mean that's basically the same, right?

704
00:36:11,100 --> 00:36:13,800
I mean that's that's almost exactly the same.

705
00:36:14,900 --> 00:36:22,200
So, that's kind of crazy because I feel like that should not be the

706
00:36:22,200 --> 00:36:22,800
case.

707
00:36:24,700 --> 00:36:27,900
I mean, removing all of those multiplies they, I guess the compiler

708
00:36:27,900 --> 00:36:30,000
was smart enough to get rid of all of those.

709
00:36:30,000 --> 00:36:32,300
I don't even know how that would be possible.

710
00:36:32,700 --> 00:36:37,100
That seems kind of crazy but that, that would

711
00:36:37,200 --> 00:36:39,400
Seemed to suggest that, that was true.

712
00:36:39,800 --> 00:36:40,500
Right?

713
00:36:41,000 --> 00:36:46,800
Because when we recompiled there, it seems like the analysis is still

714
00:36:46,800 --> 00:36:47,400
the same.

715
00:36:48,700 --> 00:36:53,100
I probably should dip these two to see what the differences between

716
00:36:53,100 --> 00:36:53,800
them, right?

717
00:36:58,700 --> 00:37:00,300
Yeah.

718
00:37:05,600 --> 00:37:06,700
Yeah.

719
00:37:09,900 --> 00:37:12,400
I mean, there's definitely

720
00:37:14,100 --> 00:37:17,100
I feel like there's definitely more MLPs in there, but it's hard to

721
00:37:17,100 --> 00:37:17,900
really say.

722
00:37:19,000 --> 00:37:20,200
So, that's kind of frustrating.

723
00:37:20,200 --> 00:37:23,200
I guess I would not have expected that but I'm not sure.

724
00:37:23,600 --> 00:37:25,100
It does look like that.

725
00:37:25,100 --> 00:37:27,200
Really just has no effect, right?

726
00:37:27,800 --> 00:37:30,900
I mean, this is, this is kind of peculiar.

727
00:37:31,100 --> 00:37:34,100
I kind of want to go back and look at the difference between those

728
00:37:34,100 --> 00:37:34,500
two.

729
00:37:35,200 --> 00:37:38,300
So I don't know if wind, if is on this machine, that's the thing that

730
00:37:38,300 --> 00:37:39,100
comes with.

731
00:37:39,800 --> 00:37:40,400
Let's see.

732
00:37:40,600 --> 00:37:43,500
Do I have a diff of any kind diff?

733
00:37:43,600 --> 00:37:44,200
There we go.

734
00:37:45,400 --> 00:37:48,500
And maybe Beyond is beyond compare to on here as well.

735
00:37:49,000 --> 00:37:49,900
I don't know what's on here.

736
00:37:50,800 --> 00:37:55,200
So wind, if I feel like it's used to come with like developer Studio,

737
00:37:55,200 --> 00:37:59,100
there was a little different tool that you could use but I don't

738
00:37:59,100 --> 00:38:08,500
actually know if it's on their software development kit wind, if there

739
00:38:08,500 --> 00:38:09,100
it is.

740
00:38:09,400 --> 00:38:13,300
So when diff is installed on this machine, this is this comes with the

741
00:38:13,300 --> 00:38:15,500
Microsoft sdks or at least it used to.

742
00:38:16,100 --> 00:38:18,600
I assume it still does is a little tool for doing.

743
00:38:18,800 --> 00:38:19,400
And ifs.

744
00:38:19,600 --> 00:38:22,500
But you could use any, there's lots of public domain tools for dips.

745
00:38:22,500 --> 00:38:23,800
You could use anything for it.

746
00:38:23,800 --> 00:38:27,200
I think what I'd like to do is go ahead and capture these just so I

747
00:38:27,200 --> 00:38:30,300
can look at it because I've never used this tool before and I kind of

748
00:38:30,300 --> 00:38:34,800
want to see just for my own sort of Education, right?

749
00:38:34,900 --> 00:38:37,500
I kind of want to see what's going on.

750
00:38:37,500 --> 00:38:39,600
So I want to make dirt a

751
00:38:41,100 --> 00:38:42,900
And I'm going to capture this output.

752
00:38:43,100 --> 00:38:45,400
So I'm going to go to Temp.

753
00:38:46,100 --> 00:38:46,600
Let's see.

754
00:38:46,600 --> 00:38:54,500
This is our no moles run dot out, right?

755
00:38:55,500 --> 00:38:57,800
Oops, capture that.

756
00:38:58,500 --> 00:38:59,800
So we got the the one with

757
00:39:00,000 --> 00:39:00,600
Moles.

758
00:39:01,400 --> 00:39:06,100
And then, what I'm going to do is I'm going to copy the code, so I'll

759
00:39:06,100 --> 00:39:09,500
copy everything in this section, right?

760
00:39:11,000 --> 00:39:14,600
Like so but then I'm going to go ahead and I'm going to like back up

761
00:39:14,900 --> 00:39:16,800
to where we were, right?

762
00:39:17,600 --> 00:39:18,500
So here we go.

763
00:39:18,600 --> 00:39:23,300
Just undo backwards and do backwards and do backwards.

764
00:39:25,100 --> 00:39:26,200
All the way.

765
00:39:29,500 --> 00:39:33,600
To the initial run of things.

766
00:39:35,700 --> 00:39:36,900
Do do do.

767
00:39:40,300 --> 00:39:40,700
Okay.

768
00:39:42,400 --> 00:39:43,000
There we go.

769
00:39:49,900 --> 00:39:53,200
Okay, so let's double-check it now.

770
00:39:53,300 --> 00:39:55,100
You know, maybe I did something else.

771
00:39:55,100 --> 00:39:56,800
Stupid, I'm not sure.

772
00:39:57,800 --> 00:40:00,700
But here's the here's the new code we wrote, right?

773
00:40:00,700 --> 00:40:02,000
Just so we can keep it in there.

774
00:40:04,700 --> 00:40:07,800
And switch back to it later but here we go.

775
00:40:08,300 --> 00:40:09,400
Let's turn this back on.

776
00:40:09,900 --> 00:40:12,800
Compile it and then we'll capture.

777
00:40:12,800 --> 00:40:16,300
This is the mold run right so that's the one that's doing all those

778
00:40:16,300 --> 00:40:19,300
extra multiplications that we didn't really need to do.

779
00:40:19,600 --> 00:40:24,000
And so now I'm going to go ahead and compare the two files that are

780
00:40:24,100 --> 00:40:27,100
that are in that directory, right?

781
00:40:27,100 --> 00:40:28,700
The moles run in the no malls, run.

782
00:40:29,600 --> 00:40:30,400
Somos round.

783
00:40:30,400 --> 00:40:31,300
No malls room.

784
00:40:32,200 --> 00:40:33,600
Obviously, they're different.

785
00:40:34,200 --> 00:40:41,400
And I mean, they take exactly the same number of cycles and what's

786
00:40:41,400 --> 00:40:42,700
even more surprising about.

787
00:40:42,700 --> 00:40:46,200
It is the, you know, it's saying throughput Port through public is

788
00:40:46,200 --> 00:40:48,100
Port 1 and Port.

789
00:40:48,100 --> 00:40:49,600
One is the multiply Port.

790
00:40:49,800 --> 00:40:55,500
So you would think us removing a bunch of multiplies would actually

791
00:40:55,500 --> 00:40:58,900
have helped things out but I guess in reality the compiler was

792
00:40:58,900 --> 00:40:59,200
removing

793
00:40:59,500 --> 00:41:00,300
Or something.

794
00:41:00,300 --> 00:41:04,900
I don't really know and so you know, somehow that was not the case.

795
00:41:04,900 --> 00:41:09,500
So looking through here, I wish this counted it's not actually

796
00:41:09,500 --> 00:41:14,000
counting the total number of multiplies which is unfortunate.

797
00:41:14,000 --> 00:41:20,400
I don't know if there's a way to do it and you can even see the total

798
00:41:20,400 --> 00:41:26,700
number of Micro Ops is 349 in the original case and

799
00:41:30,300 --> 00:41:31,300
And 306.

800
00:41:31,300 --> 00:41:35,900
We actually got rid of 43 instructions, but getting rid of 43.

801
00:41:35,900 --> 00:41:39,700
Instructions did not change, the total Block throughput in any way.

802
00:41:40,200 --> 00:41:42,900
It's exactly the same basically, right?

803
00:41:45,500 --> 00:41:46,400
And so, let's take a look.

804
00:41:46,400 --> 00:41:50,600
So, here is the block here, you've got two moles in the red block to

805
00:41:50,600 --> 00:41:54,000
Moses in the, in the nominee.

806
00:41:54,000 --> 00:41:54,500
Block.

807
00:41:56,000 --> 00:41:56,500
This one.

808
00:41:56,500 --> 00:41:59,800
We actually have two moles at the head end, but only one mole here.

809
00:42:00,000 --> 00:42:00,200
Over.

810
00:42:00,200 --> 00:42:01,800
Here's the other Mall, presumably.

811
00:42:02,600 --> 00:42:04,100
So we've got two and two.

812
00:42:04,700 --> 00:42:05,200
There we go.

813
00:42:05,200 --> 00:42:06,700
No moles in anybody.

814
00:42:06,700 --> 00:42:08,600
Nobody's doing any malls for a while here.

815
00:42:08,600 --> 00:42:12,300
That's probably fetching this textures and so on or something like

816
00:42:12,300 --> 00:42:22,600
this, come down here, we get to know malls in here although we got p.

817
00:42:22,600 --> 00:42:28,000
And so these guys are creating a little bit of pressure here on that

818
00:42:28,000 --> 00:42:29,400
Port, right?

819
00:42:30,200 --> 00:42:32,800
But still no moles still.

820
00:42:32,800 --> 00:42:34,500
No most nobody is multiplying.

821
00:42:34,900 --> 00:42:35,500
Apparently.

822
00:42:37,000 --> 00:42:38,900
So here's mul PS.

823
00:42:38,900 --> 00:42:40,600
Here's the mall PS here.

824
00:42:40,900 --> 00:42:43,900
So we're doing two they're doing 1 then 3.

825
00:42:44,000 --> 00:42:48,700
Then here's the other two it's it's it's really looking eerily.

826
00:42:48,700 --> 00:42:52,100
Like it's doing exactly the same number of multiplies, doesn't it?

827
00:42:52,200 --> 00:42:55,300
I mean it's doing them in a different way but man.

828
00:43:00,000 --> 00:43:01,300
It just looks like it's doing.

829
00:43:03,700 --> 00:43:06,200
Almost exact same number of these guys.

830
00:43:06,600 --> 00:43:07,400
That's crazy.

831
00:43:08,100 --> 00:43:12,000
So somehow the compiler was actually and we'd have to go through to do

832
00:43:12,000 --> 00:43:17,000
the forensics, but the compiler was actually smart enough to do that

833
00:43:17,000 --> 00:43:20,800
transformation or something, close to it itself.

834
00:43:23,600 --> 00:43:24,200
Right.

835
00:43:24,700 --> 00:43:27,700
I mean it was actually figuring out.

836
00:43:29,500 --> 00:43:32,900
How to collapse all of that stuff that we were too dumb to do.

837
00:43:33,500 --> 00:43:37,400
So basically all of that strength reduction, all of those term

838
00:43:37,400 --> 00:43:38,500
cancellations.

839
00:43:38,900 --> 00:43:42,400
Well, strength reduction is not the right word all of those sort of

840
00:43:42,400 --> 00:43:43,400
those cancellations.

841
00:43:43,600 --> 00:43:44,600
It found

842
00:43:47,000 --> 00:43:48,900
As far as I can tell, I did that.

843
00:43:50,600 --> 00:43:52,800
Which is kind of awesome.

844
00:43:54,200 --> 00:43:56,300
I guess that's the kind of thing that compiler tree.

845
00:43:56,300 --> 00:44:01,200
Analysis is probably not that bad at doing like looking for sort of

846
00:44:01,200 --> 00:44:01,400
ways.

847
00:44:01,400 --> 00:44:05,800
You can restructure things and collapse constants but still a little

848
00:44:05,800 --> 00:44:07,100
bit surprising, right?

849
00:44:07,200 --> 00:44:12,200
I mean, you know, I often don't think of the compiler has really

850
00:44:12,200 --> 00:44:13,900
excelling at a lot of these things.

851
00:44:15,300 --> 00:44:18,000
So I'm reasonably impressed by that.

852
00:44:18,100 --> 00:44:20,200
I give the I give the compiler.

853
00:44:20,400 --> 00:44:24,700
People some props on that you know that's that's a lot better than I

854
00:44:24,700 --> 00:44:29,000
would have expected the compiler to be doing in that circumstance.

855
00:44:29,600 --> 00:44:30,600
That's just my opinion.

856
00:44:30,800 --> 00:44:33,700
Feel free to disagree but that's just my opinion.

857
00:44:36,100 --> 00:44:40,900
So yeah, that's kind of crazy but I guess that's just how it goes.

858
00:44:40,900 --> 00:44:44,400
So let's keep looking at this and now we feel like we should at least

859
00:44:44,400 --> 00:44:46,500
try to beat the compiler, right?

860
00:44:46,500 --> 00:44:51,500
It feels kind of stupid at this point, if we can, but oh well, right?

861
00:44:52,300 --> 00:44:53,200
So let's see here.

862
00:44:55,200 --> 00:44:59,600
okay, so if we run this guy, we still haven't really made any

863
00:45:00,000 --> 00:45:02,800
Answered if Improvement there and we kind of now know why it doesn't

864
00:45:02,800 --> 00:45:05,900
really matter which one of those we do, the compiler was kind of

865
00:45:05,900 --> 00:45:06,800
outsmarting us.

866
00:45:07,900 --> 00:45:11,100
So the question here, let's see, is what else can we do?

867
00:45:16,500 --> 00:45:22,700
So if we're doing these in 0 to 255 space, one thing we could do is

868
00:45:22,700 --> 00:45:25,300
square them before we convert, right?

869
00:45:26,600 --> 00:45:28,100
That would certainly be an option.

870
00:45:29,000 --> 00:45:30,500
Let's see how we're actually.

871
00:45:30,500 --> 00:45:32,700
So we're masking these guys out here.

872
00:45:33,700 --> 00:45:35,400
Let me think about this for a second.

873
00:45:35,700 --> 00:45:39,500
So this would be actually fairly complicated if we wanted to do it.

874
00:45:39,600 --> 00:45:41,900
But it is something that we could do, right?

875
00:45:41,900 --> 00:45:44,400
And it would take pressure off, Port one

876
00:45:45,200 --> 00:45:48,500
Because actually it would involve doing integer multiplied.

877
00:45:48,500 --> 00:45:49,600
So let's take a look.

878
00:45:50,300 --> 00:45:53,800
Let's talk about this for a second and take a look at what would be

879
00:45:53,800 --> 00:45:54,700
involved in doing this?

880
00:45:54,700 --> 00:45:59,200
I think it's probably too much of a change to do, just here at the end

881
00:45:59,200 --> 00:46:02,100
of the stream, but you know, what do you do?

882
00:46:03,100 --> 00:46:04,800
Let's take a look at the Intel intrinsics guide.

883
00:46:06,800 --> 00:46:13,400
I want to know about mmm mole epi32 on the hail, mmm, so same.

884
00:46:13,400 --> 00:46:18,200
Throughput on the, the epi32 --mm mul, which is the integer

885
00:46:18,200 --> 00:46:19,000
multiplied.

886
00:46:19,600 --> 00:46:20,200
Right?

887
00:46:21,700 --> 00:46:27,800
Instead of, you know, instead of wait, that's the wrong one.

888
00:46:27,800 --> 00:46:30,400
Sorry, I actually want epi16, I suppose, huh.

889
00:46:33,300 --> 00:46:36,600
I'm all epr we don't have any PI 30.

890
00:46:37,500 --> 00:46:38,700
We don't, is it only?

891
00:46:40,100 --> 00:46:46,500
Multiply the low 32 inches from each pack 64-bit element in a, and b,

892
00:46:46,500 --> 00:46:47,700
and store the sign to.

893
00:46:49,200 --> 00:46:50,900
All right, well,

894
00:46:52,800 --> 00:46:59,300
Well, I guess that's kind of dead in the water unless I'm missing

895
00:46:59,300 --> 00:46:59,900
something.

896
00:47:01,500 --> 00:47:05,900
Because if mmm oh oh duh.

897
00:47:06,200 --> 00:47:10,200
Right I forgot their split up into mole low and go high never mind.

898
00:47:11,600 --> 00:47:13,900
I was going to say, that'd be very, very strange.

899
00:47:14,200 --> 00:47:14,800
All right.

900
00:47:14,900 --> 00:47:17,000
I was like I could have sworn, I've done this before.

901
00:47:17,500 --> 00:47:19,100
That's just how it goes in the Stream sometimes.

902
00:47:19,400 --> 00:47:22,700
Alright, so basically what we've got here, you know, we've got

903
00:47:23,200 --> 00:47:26,200
multiplies, the throughput on them is, is one

904
00:47:27,700 --> 00:47:31,800
Which is, I believe comparable to what we were seeing before, right?

905
00:47:31,800 --> 00:47:35,500
Latency 5 to put one latency 3, throughput one's late exacts a little

906
00:47:35,500 --> 00:47:36,100
bit better.

907
00:47:36,400 --> 00:47:37,600
In the three puts the same.

908
00:47:38,200 --> 00:47:44,700
So we could, if we want to write, take a look at what we're doing here

909
00:47:45,400 --> 00:47:49,100
and try to do more of this wide wider than we were.

910
00:47:49,300 --> 00:47:51,600
Because when we converted to float, right?

911
00:47:51,600 --> 00:47:55,300
Like right here, we converted to float that meant from there on, we

912
00:47:55,300 --> 00:47:56,800
could only be four wide.

913
00:47:57,600 --> 00:47:59,800
And technically some of these operations.

914
00:48:00,000 --> 00:48:04,100
We could be doing in 16-bit integer, we mentioned that on a previous

915
00:48:04,100 --> 00:48:09,000
stream on staying, at that, on converting it to do in that with, we

916
00:48:09,000 --> 00:48:10,800
could choose to do that.

917
00:48:11,400 --> 00:48:14,500
If it turns out that some of these operations could be done, quickly

918
00:48:14,500 --> 00:48:18,500
in that space and we wouldn't have to worry because since we're

919
00:48:18,500 --> 00:48:23,800
already now allowing it to be in the zero to sixty six, sixty 5025

920
00:48:23,800 --> 00:48:27,600
space instead of 0 to 1, we wouldn't have to keep multiplying by a

921
00:48:27,600 --> 00:48:29,400
fix-up, which is what really kills.

922
00:48:30,000 --> 00:48:32,500
Fixed Point operations so we could.

923
00:48:34,300 --> 00:48:42,200
We could in theory do that and looking through here I feel like we

924
00:48:42,200 --> 00:48:44,300
could certainly do the square.

925
00:48:46,400 --> 00:48:50,600
And then I feel like we could do the square and then convert here,

926
00:48:50,600 --> 00:48:51,200
right?

927
00:48:51,200 --> 00:48:57,500
And that could, you know, that seems reasonable and similarly, at the

928
00:48:57,500 --> 00:49:01,800
end, I feel like we could in theory.

929
00:49:01,800 --> 00:49:05,700
Well, we're not going to be able to probably do a square root in fixed

930
00:49:05,700 --> 00:49:06,300
point, right?

931
00:49:06,300 --> 00:49:13,200
Like that's not probably going to happen, so I feel like probably,

932
00:49:13,200 --> 00:49:15,200
yeah, probably.

933
00:49:17,400 --> 00:49:20,200
We just have to we, you know, we just have to leave that the way it is

934
00:49:20,200 --> 00:49:22,000
although maybe I don't know, maybe there's something else we could do

935
00:49:22,000 --> 00:49:22,600
there.

936
00:49:22,600 --> 00:49:24,600
I don't think so though.

937
00:49:25,000 --> 00:49:25,500
So

938
00:49:26,900 --> 00:49:29,600
All right, so let's just take a quick look at what would what it would

939
00:49:29,600 --> 00:49:30,600
take to do that.

940
00:49:30,800 --> 00:49:35,100
Right right now what's happening is we're doing these shifts and masks

941
00:49:35,500 --> 00:49:41,600
to put these things into their proper places and so, you know, I guess

942
00:49:41,600 --> 00:49:48,300
what I would say is could we just instead of masking everything out

943
00:49:48,300 --> 00:49:51,900
just mask out two things at once.

944
00:49:51,900 --> 00:49:52,300
Right.

945
00:49:52,300 --> 00:49:55,300
This is this is, I guess what I would think you know just just off the

946
00:49:55,300 --> 00:49:56,600
top of my head about

947
00:49:56,800 --> 00:49:58,100
How to do this, right?

948
00:49:59,200 --> 00:50:04,300
So we've got a situation where we've got our values and, you know,

949
00:50:04,300 --> 00:50:06,200
they look like this.

950
00:50:07,400 --> 00:50:09,800
Right, this is what we've got coming in.

951
00:50:15,700 --> 00:50:20,500
You know, and if this is what we've got coming in, then I wonder if

952
00:50:20,500 --> 00:50:26,600
perhaps what we could do is instead of doing each one individually,

953
00:50:26,800 --> 00:50:33,100
what if we just knocked out the A and the G and right like so and left

954
00:50:33,100 --> 00:50:34,600
like the are in the be in there.

955
00:50:35,100 --> 00:50:35,600
Okay.

956
00:50:36,200 --> 00:50:43,000
Then these guys would be lined up exactly on the 16-bit lanes.

957
00:50:43,700 --> 00:50:45,000
So in theory,

958
00:50:45,200 --> 00:50:49,500
We could just multiply them in by six, you know, 16.

959
00:50:49,500 --> 00:50:52,500
We could Square them, right in place, right?

960
00:50:52,900 --> 00:50:59,800
Then we go ahead and up convert those to float by doing the

961
00:51:00,100 --> 00:51:02,400
The additional mask, right?

962
00:51:03,000 --> 00:51:07,800
Or doing an unpacked with zero doing something like that, that seems

963
00:51:07,800 --> 00:51:08,600
kind of compelling.

964
00:51:08,600 --> 00:51:11,600
So, let's see if we can do that, I'll just do it for one of our

965
00:51:11,600 --> 00:51:13,300
textiles texture samples.

966
00:51:14,400 --> 00:51:17,400
So I'm going to need something other than mask FF.

967
00:51:17,400 --> 00:51:21,200
I'm going to need something that's like, you know, that it's going to.

968
00:51:21,200 --> 00:51:27,200
It's going to mask out both the the bottom eight and the, and then the

969
00:51:27,200 --> 00:51:29,600
eight, that's 16 up from there, right?

970
00:51:30,300 --> 00:51:34,700
So, I want to do that, and we're going to call that I probably don't

971
00:51:34,700 --> 00:51:36,900
want to get rid of the actual mask FF just yet, though, because we're

972
00:51:36,900 --> 00:51:38,800
still using that for the other guys.

973
00:51:38,800 --> 00:51:43,300
So, I'm going to make this called mask foof mask foof.

974
00:51:43,300 --> 00:51:44,100
Sounds good to me.

975
00:51:44,900 --> 00:51:47,500
So we'll go in here and we will do it twice, right?

976
00:51:47,500 --> 00:51:50,700
We'll do a mask foof here, I will do a mask move here.

977
00:51:51,300 --> 00:51:56,100
And so all we need to do is do a mask foof of of these guys and

978
00:51:56,100 --> 00:52:01,100
instead of that being Texel a b, and I started Texel be and Texel G

979
00:52:01,100 --> 00:52:01,600
there.

980
00:52:02,000 --> 00:52:06,300
This is actually going to be Texel, R&B and Texel AG, right?

981
00:52:08,500 --> 00:52:09,500
So we're getting both of them.

982
00:52:10,200 --> 00:52:15,000
Okay so we're going to do that and I don't actually want to do this

983
00:52:15,000 --> 00:52:15,600
part yet.

984
00:52:15,600 --> 00:52:17,500
I don't want to do the convert.

985
00:52:17,700 --> 00:52:21,300
I want to just leave them the way that they are, right?

986
00:52:21,300 --> 00:52:25,200
I want to just leave them in place and then what I want to do is I

987
00:52:25,200 --> 00:52:25,900
want to square them.

988
00:52:25,900 --> 00:52:29,500
So what I need to do is I need to produce an A Squared version of this

989
00:52:29,500 --> 00:52:34,600
guy and a squared version of this guy which means I need to do an M&M.

990
00:52:36,300 --> 00:52:41,800
Mall of the of the 16-bit values, but we now have to talk about what

991
00:52:41,800 --> 00:52:45,600
the difference is between molo and mull.

992
00:52:45,700 --> 00:52:46,300
Hi.

993
00:52:46,600 --> 00:52:50,400
Okay, so this is going to be a square like so I don't know, maybe

994
00:52:50,400 --> 00:52:53,300
there's a smarter way to do the square as well, but just thinking it

995
00:52:53,300 --> 00:52:54,400
through at the moment.

996
00:52:55,000 --> 00:52:59,300
So what happens here is if you imagine having 16-bit values, right?

997
00:52:59,300 --> 00:53:03,500
So I've got 16 bits and I'm going to multiply it by another 16 bits.

998
00:53:03,800 --> 00:53:05,000
Technically the result

999
00:53:05,200 --> 00:53:07,800
That is actually 32 bits, right?

1000
00:53:07,800 --> 00:53:10,300
Because you're gonna, you know, it's kind of like if you multiply 10

1001
00:53:10,300 --> 00:53:12,600
by 10, write the result?

1002
00:53:12,600 --> 00:53:17,700
Oops, the result doesn't fit intestine into things, right?

1003
00:53:17,800 --> 00:53:19,800
It overflows to a higher.

1004
00:53:20,500 --> 00:53:22,800
Number of digits, right?

1005
00:53:23,200 --> 00:53:26,400
So if we're multiplying, two 16-bit values by each other, we're

1006
00:53:26,400 --> 00:53:30,200
technically going, get a 32-bit result, but the result since this is

1007
00:53:30,200 --> 00:53:34,700
operating in 16-bit Lanes, the result has to fit in 16 bits.

1008
00:53:34,700 --> 00:53:35,000
So,

1009
00:53:35,100 --> 00:53:40,600
So the multiply unit allows us to pick which of the resulting 16-bit

1010
00:53:40,600 --> 00:53:41,200
Lanes.

1011
00:53:41,400 --> 00:53:45,400
We actually want right now.

1012
00:53:45,400 --> 00:53:48,100
Fortunately, for us, we don't have to care about that too much because

1013
00:53:48,100 --> 00:53:50,800
we're only actually using the bottom 8 Bits.

1014
00:53:51,000 --> 00:53:53,800
So, when we multiply the bottom eight by the bottom eight, we're only

1015
00:53:53,800 --> 00:53:55,100
going to get a 16 bit results.

1016
00:53:55,100 --> 00:53:58,600
So the high portion, the Overflow that would have flowed into the rest

1017
00:53:58,600 --> 00:53:58,900
of it.

1018
00:53:59,000 --> 00:53:59,800
We don't actually care about

1019
00:54:00,400 --> 00:54:05,000
So we can just use milou, which is the thing that takes that produces,

1020
00:54:05,000 --> 00:54:09,000
the low 16 bits of the multiplied result and we don't have to care

1021
00:54:09,000 --> 00:54:09,800
about Maja at all.

1022
00:54:09,800 --> 00:54:11,300
We don't care about that, really?

1023
00:54:11,300 --> 00:54:13,700
I don't think there's any reason we need to worry about that.

1024
00:54:13,700 --> 00:54:17,200
So we can just do that and that will Square R values for us, right?

1025
00:54:18,400 --> 00:54:20,200
So that means we can get rid of this here.

1026
00:54:21,100 --> 00:54:21,600
so,

1027
00:54:23,100 --> 00:54:25,300
These, by the way, around 128 eyes.

1028
00:54:27,100 --> 00:54:31,700
And so, then we come down here to produce these M 128.

1029
00:54:34,400 --> 00:54:36,900
Of course I just realized we do have one problem which is that this

1030
00:54:36,900 --> 00:54:39,000
one square R Alpha as well.

1031
00:54:39,500 --> 00:54:40,200
Hmm.

1032
00:54:46,800 --> 00:54:47,900
That's kind of annoying.

1033
00:54:49,500 --> 00:54:51,900
That's kind of annoying.

1034
00:54:53,300 --> 00:54:54,700
Hmm.

1035
00:54:58,700 --> 00:55:02,400
That introduces a wrinkled because that means we can't quite get a

1036
00:55:02,400 --> 00:55:04,400
perfect, half reduction there.

1037
00:55:05,100 --> 00:55:12,500
You know at it would be nice if we could but I don't think we can.

1038
00:55:13,400 --> 00:55:16,400
So that's

1039
00:55:17,400 --> 00:55:18,900
That's less cool.

1040
00:55:20,000 --> 00:55:24,200
So we'd have to blow another instruction to or two of our Alphas

1041
00:55:24,200 --> 00:55:24,700
together.

1042
00:55:24,700 --> 00:55:29,200
In order to save the square, which doesn't sound necessarily like,

1043
00:55:29,200 --> 00:55:30,500
such a great idea.

1044
00:55:31,300 --> 00:55:35,800
I don't know, but it does mean for the time being that we would just

1045
00:55:35,800 --> 00:55:37,900
need to look at that.

1046
00:55:37,900 --> 00:55:39,700
Leave that the way it is.

1047
00:55:39,700 --> 00:55:41,400
So we'll think about that.

1048
00:55:45,200 --> 00:55:46,200
Not sure.

1049
00:55:49,100 --> 00:55:52,200
I mean, I guess I guess we don't have to go that far, right?

1050
00:55:52,200 --> 00:55:55,700
I mean we could just knock out the multiplier, right?

1051
00:55:55,700 --> 00:55:59,600
I mean, we could do something where we've got the alpha, you know, we

1052
00:55:59,600 --> 00:56:00,700
could do this, right?

1053
00:56:00,700 --> 00:56:08,800
We could, and with masks FF and that would knock out that Alpha in the

1054
00:56:08,800 --> 00:56:11,200
multiply, which would leave the alpha N squared.

1055
00:56:11,200 --> 00:56:14,400
But again, you know, it sucks because we thought we were going to get

1056
00:56:14,400 --> 00:56:15,700
a bigger reduction there than we were.

1057
00:56:15,700 --> 00:56:18,000
But we're having to do is like that additional

1058
00:56:19,200 --> 00:56:26,300
In which is, which is too bad but all right, you know, that's that's

1059
00:56:26,300 --> 00:56:27,100
just the way it is.

1060
00:56:27,300 --> 00:56:28,700
So once we've got that

1061
00:56:29,700 --> 00:56:35,100
You know, now we should be able to in theory, go ahead and lock these

1062
00:56:35,100 --> 00:56:37,700
up into the actual.

1063
00:56:37,800 --> 00:56:38,200
Sorry.

1064
00:56:38,200 --> 00:56:43,300
We could convert these up from from fixed point there to floating

1065
00:56:43,300 --> 00:56:48,100
point, right from zero, from the integers to floats and that's what

1066
00:56:48,100 --> 00:56:48,700
this will do.

1067
00:56:48,700 --> 00:56:52,300
But now we have a problem which is we actually have our and be mixed

1068
00:56:52,300 --> 00:56:53,100
together, right?

1069
00:56:53,100 --> 00:56:54,700
And Ang mixed together.

1070
00:56:55,100 --> 00:56:59,400
Okay, so we need to do is we need to introduce the concept.

1071
00:57:00,800 --> 00:57:08,100
In a way that will actually will actually grab out the ones we want,

1072
00:57:08,700 --> 00:57:09,100
right?

1073
00:57:10,800 --> 00:57:15,300
And so I think probably the most efficient way to do that is still

1074
00:57:15,300 --> 00:57:19,900
just with masking, I would think, I don't know.

1075
00:57:19,900 --> 00:57:20,700
That's a pipelines.

1076
00:57:20,700 --> 00:57:23,200
There's other ways we could do it on unpack, might do it.

1077
00:57:23,200 --> 00:57:27,100
So we might have to look and see which of the you know which of them

1078
00:57:27,100 --> 00:57:30,000
would be the most overlap above the things we have.

1079
00:57:30,600 --> 00:57:31,400
But the

1080
00:57:33,200 --> 00:57:34,400
Just looking at these values.

1081
00:57:34,600 --> 00:57:38,800
You know if we if we went on and introduced another and here where we

1082
00:57:38,800 --> 00:57:43,700
just and with with that mask FF that would give us just the, I guess

1083
00:57:43,700 --> 00:57:46,300
that would give us just the B channel, right?

1084
00:57:47,300 --> 00:57:50,900
That would knock out the a I'm sorry that we knock out the are and

1085
00:57:50,900 --> 00:57:57,900
then to get if we did the the shift to the right to bring the the

1086
00:57:57,900 --> 00:58:02,200
R-value down that would just be that that shift down by 16 right?

1087
00:58:02,200 --> 00:58:02,600
So we

1088
00:58:02,800 --> 00:58:08,100
You that to grab out that our value, similarly, for the G value,

1089
00:58:08,400 --> 00:58:11,500
that's already in that correct position.

1090
00:58:11,800 --> 00:58:22,100
So that would again also just be another mask put C of Of Texel a Ag

1091
00:58:22,600 --> 00:58:29,300
and then finally the the end here would just be grabbing out that

1092
00:58:29,300 --> 00:58:32,600
Alpha value from from the AG.

1093
00:58:32,700 --> 00:58:36,900
So I think I did that right kind of confusing mentally to think about.

1094
00:58:38,000 --> 00:58:41,700
But let's see if that looks right at all.

1095
00:58:41,800 --> 00:58:44,300
All right, I'm going to go ahead and say that that's probably

1096
00:58:44,300 --> 00:58:45,300
incorrect.

1097
00:58:45,400 --> 00:58:48,300
Now I'm just I just have a hunch looking at it.

1098
00:58:48,300 --> 00:58:51,300
I just have a hunch that that is probably not correct.

1099
00:58:51,300 --> 00:58:56,000
So let's go ahead, it's Q&A but let's go ahead and just try to try to

1100
00:58:56,000 --> 00:58:57,700
take a quick look and see what I did wrong there.

1101
00:58:58,600 --> 00:59:03,000
All right, so we've got our tekzilla AR are be and our Texel AG here.

1102
00:59:03,100 --> 00:59:06,700
The way I get them is by doing the shift.

1103
00:59:07,600 --> 00:59:10,300
And masking out values, right?

1104
00:59:10,300 --> 00:59:14,000
So that puts everyone in the 16-bit lanes or at least I think it does,

1105
00:59:14,500 --> 00:59:16,100
that's what I'm arguing that it does.

1106
00:59:16,800 --> 00:59:21,200
And and so I hope that's the case because yeah, that seems very

1107
00:59:21,200 --> 00:59:21,700
straightforward.

1108
00:59:21,700 --> 00:59:22,700
We could check it in the debugger.

1109
00:59:23,800 --> 00:59:27,900
We're then going to do a multiplication of with itself which will just

1110
00:59:27,900 --> 00:59:30,800
do that multiply and I'm arguing that would basically give us eight

1111
00:59:30,800 --> 00:59:31,400
bit tiny bit.

1112
00:59:31,400 --> 00:59:34,100
So it's giving us that 16-bit value that we wanted the multiplication

1113
00:59:34,100 --> 00:59:35,000
value that we wanted.

1114
00:59:36,400 --> 00:59:41,100
And in this case with the Texel AG I had to do an additional mask here

1115
00:59:41,100 --> 00:59:45,600
to mask out so that the multiply would only multiply just the green

1116
00:59:45,600 --> 00:59:46,000
value.

1117
00:59:46,000 --> 00:59:51,700
So I'm a stout that Alpha value from one side of the term, so it would

1118
00:59:51,700 --> 00:59:54,000
only multiply the G, right?

1119
00:59:55,800 --> 00:59:59,800
So I did that, I then tried to produce the Texel.

1120
01:00:00,000 --> 01:00:07,100
On them, by Shifting, the our B value down 16 in each of the 32-bit

1121
01:00:07,100 --> 01:00:12,100
wide Lanes, which I felt like should give me just the are sitting in

1122
01:00:12,100 --> 01:00:16,100
the bottom and of course since it's shifting in zeros that should just

1123
01:00:16,100 --> 01:00:16,400
clear.

1124
01:00:16,400 --> 01:00:18,500
It should just be clear with just the are sitting there.

1125
01:00:19,300 --> 01:00:21,900
The G is already in the bottom.

1126
01:00:21,900 --> 01:00:25,900
So I just had to take the a Ag and mask out that

1127
01:00:27,400 --> 01:00:32,300
Mask out, the the alpha, the, our B value right already.

1128
01:00:32,300 --> 01:00:34,000
Had the be sitting in the bottom.

1129
01:00:34,000 --> 01:00:38,000
So all I had to do is mask that out and then the a ag again, I can

1130
01:00:38,000 --> 01:00:44,100
just shift that down by 16 to get the alpha out of the, a, a g.

1131
01:00:44,100 --> 01:00:46,800
So I feel like that should have been correct.

1132
01:00:46,900 --> 01:00:50,800
You can then convert those directly to float and I felt like that

1133
01:00:50,800 --> 01:00:53,700
should have done it but

1134
01:00:55,900 --> 01:01:01,400
You know, as we can see it definitely didn't do it right.

1135
01:01:01,500 --> 01:01:06,700
That is a good example of what we might call not doing it.

1136
01:01:08,500 --> 01:01:11,200
What's sort of clear?

1137
01:01:11,200 --> 01:01:14,000
I think about well, you know what, I'm not sure.

1138
01:01:14,000 --> 01:01:19,100
I can read very much out of that, that's a little confusing.

1139
01:01:20,300 --> 01:01:25,000
So I'm not sure what's going on there, but yeah.

1140
01:01:25,300 --> 01:01:29,600
Let's go ahead and and just step through it the debugger and see what

1141
01:01:29,600 --> 01:01:30,200
happens.

1142
01:01:30,700 --> 01:01:33,800
All right, so I want to stuff something in here that I can actually

1143
01:01:33,800 --> 01:01:35,700
perceive, right?

1144
01:01:35,800 --> 01:01:37,900
I want to stuff something in here that I can see.

1145
01:01:39,000 --> 01:01:43,000
So what I'm going to do is I'm going to take sample a and I'm going to

1146
01:01:43,000 --> 01:01:48,600
do an M&M set epi32 on that guy.

1147
01:01:50,100 --> 01:01:53,400
So I can actually set the values of this guy there, ice in, there is a

1148
01:01:53,400 --> 01:01:54,500
set epi32.

1149
01:01:54,500 --> 01:01:54,800
Yeah.

1150
01:01:55,800 --> 01:01:59,700
So what I'm going to do there is I'm going to set the values of it to

1151
01:01:59,700 --> 01:02:02,300
look like kind of those values that we were talking about before,

1152
01:02:02,500 --> 01:02:03,000
right?

1153
01:02:03,100 --> 01:02:04,800
So I can see the little bit better.

1154
01:02:05,200 --> 01:02:08,400
So the first thing I'm going to do is I'm just going to set it so that

1155
01:02:08,400 --> 01:02:13,100
the red Channel I'm sorry, the blue channel is FF so I can see where

1156
01:02:13,100 --> 01:02:16,600
it goes, right and what happens to it.

1157
01:02:16,900 --> 01:02:19,600
Okay, so let's see.

1158
01:02:20,100 --> 01:02:22,900
And I, guess what I'll do here is I'll you know, what else I'll do?

1159
01:02:23,200 --> 01:02:32,200
I'll set these to something, that I'll be able to recognize, maybe

1160
01:02:32,500 --> 01:02:36,700
he's more easily when they get squared.

1161
01:02:36,800 --> 01:02:43,100
So let's see, that'll be squared to 2, then we'll do that and that,

1162
01:02:43,600 --> 01:02:44,100
right?

1163
01:02:46,900 --> 01:02:49,100
Yeah, that seems reasonable.

1164
01:02:51,000 --> 01:02:53,900
Oh, and this obviously goes there.

1165
01:02:54,300 --> 01:02:59,100
Okay, so let's see, let's see what that's doing.

1166
01:03:03,000 --> 01:03:05,100
here we come in to sample a

1167
01:03:08,200 --> 01:03:14,600
and if I take a look, I want to look at the the I-16 probably of it

1168
01:03:14,600 --> 01:03:17,900
since that's the sort of what we're what we're working with at this

1169
01:03:17,900 --> 01:03:18,600
point.

1170
01:03:19,000 --> 01:03:22,400
Well, it's actually you 16, I guess is what we're working with, right?

1171
01:03:22,800 --> 01:03:25,700
And so if I take a look at it, you can see that.

1172
01:03:25,700 --> 01:03:28,400
I sort of stuffed some things in here.

1173
01:03:30,300 --> 01:03:31,400
Rather specifically.

1174
01:03:36,900 --> 01:03:40,700
So well, I don't really love the order.

1175
01:03:40,700 --> 01:03:42,400
This is showing it to me and but that's okay.

1176
01:03:42,700 --> 01:03:50,000
So this is still roughly, what I would have expected 02.

1177
01:03:50,900 --> 01:03:53,400
Yeah, okay.

1178
01:03:53,800 --> 01:03:58,500
So now let's take a look at Texel a are B.

1179
01:03:58,700 --> 01:04:04,500
So after it does that masking, what are the actual values here?

1180
01:04:07,400 --> 01:04:13,700
And so, after doing the masking which is designed to remove the middle

1181
01:04:13,700 --> 01:04:15,700
values, we have nothing in there.

1182
01:04:15,800 --> 01:04:18,700
So we should just see the exact same stuff that we have here, which

1183
01:04:18,700 --> 01:04:20,000
is, which is good.

1184
01:04:20,500 --> 01:04:21,300
Let's see.

1185
01:04:21,500 --> 01:04:23,100
Texas, laaaaaag.

1186
01:04:23,600 --> 01:04:26,900
Now this one should have nothing in it, but zeros because this one is

1187
01:04:26,900 --> 01:04:29,200
supposed to shift and mask out.

1188
01:04:29,300 --> 01:04:31,000
So we should have all zeros which we do.

1189
01:04:31,900 --> 01:04:35,100
We're then going to do the squaring into Texel AR

1190
01:04:35,300 --> 01:04:37,400
All right, so these numbers should all square.

1191
01:04:39,500 --> 01:04:40,300
They do.

1192
01:04:41,800 --> 01:04:44,900
Oops, but that one is what that's fine, right?

1193
01:04:44,900 --> 01:04:47,000
We're supposed to square out in out of the to 55 range.

1194
01:04:47,000 --> 01:04:47,900
That's, that's what's supposed to happen.

1195
01:04:47,900 --> 01:04:48,400
That's fine.

1196
01:04:49,700 --> 01:04:54,900
And so now we have those values multiplied, low, and sitting in there,

1197
01:04:54,900 --> 01:04:57,600
waiting to be up converted, okay?

1198
01:04:59,200 --> 01:05:01,600
So here are the values.

1199
01:05:04,900 --> 01:05:05,400
Right.

1200
01:05:06,000 --> 01:05:09,600
And that is what we would expect them to be, right?

1201
01:05:10,000 --> 01:05:15,600
So, let's see when we actually go to do our, our upconversion Texel.

1202
01:05:18,400 --> 01:05:22,600
Hey are, which is the only thing that should have anything in it.

1203
01:05:22,900 --> 01:05:23,600
I believe.

1204
01:05:26,900 --> 01:05:27,900
Let's see what it actually.

1205
01:05:28,600 --> 01:05:31,200
It actually is m120.

1206
01:05:31,400 --> 01:05:31,700
Groups.

1207
01:05:31,700 --> 01:05:38,200
Mmm, the actual model for that, it's m 128.

1208
01:05:39,400 --> 01:05:40,600
F32.

1209
01:05:42,500 --> 01:05:43,900
All right, so we do it.

1210
01:05:45,200 --> 01:05:49,300
And we get all zeros for the red channel.

1211
01:05:49,300 --> 01:05:49,800
Oh that's okay.

1212
01:05:49,800 --> 01:05:50,900
I was the blue Channel.

1213
01:05:50,900 --> 01:05:53,000
Sorry that we were doing so that's actually correct.

1214
01:05:53,000 --> 01:05:59,600
The green channel, the blue channel so green channel, should have

1215
01:06:00,000 --> 01:06:03,000
Does and the blue channel should have those values in it.

1216
01:06:05,100 --> 01:06:08,600
And there is obviously my mistake.

1217
01:06:11,900 --> 01:06:12,900
Yes.

1218
01:06:15,800 --> 01:06:17,100
Well, that would do it.

1219
01:06:18,300 --> 01:06:19,900
That would do it folks.

1220
01:06:20,700 --> 01:06:25,400
So, you know, you got to think it all the way through.

1221
01:06:25,400 --> 01:06:28,500
You don't get any points for just thinking part of the way through, if

1222
01:06:28,500 --> 01:06:30,600
I'm a scout just the 8 Bits.

1223
01:06:30,600 --> 01:06:32,600
Well, that's not going to do us very much good.

1224
01:06:32,600 --> 01:06:39,300
If these are 16-bit values so we got a mask out, 16s, not eight.

1225
01:06:41,200 --> 01:06:43,300
Kind of a no-brainer there.

1226
01:06:44,700 --> 01:06:45,600
But what you going to do?

1227
01:06:47,500 --> 01:06:50,800
Okay, let's try that again, shall we?

1228
01:06:52,200 --> 01:06:54,800
Well, of course, I gotta take out my mmm set.

1229
01:06:55,000 --> 01:06:55,700
PS there.

1230
01:06:55,700 --> 01:06:58,900
If I want to see what it's actually looking like.

1231
01:07:00,800 --> 01:07:01,500
So there we go.

1232
01:07:02,400 --> 01:07:03,000
All right.

1233
01:07:03,000 --> 01:07:07,200
Not feeling great about that either, but it's better.

1234
01:07:07,700 --> 01:07:08,600
I'd lie enough.

1235
01:07:10,300 --> 01:07:16,000
It's actually partially correct, which doesn't make a whole lot of

1236
01:07:16,000 --> 01:07:18,000
sense to me to completely honest with you.

1237
01:07:19,300 --> 01:07:21,400
So that's a bit odd.

1238
01:07:21,800 --> 01:07:24,200
But you know, what are you gonna do?

1239
01:07:25,600 --> 01:07:27,700
Oh duh, I forgot.

1240
01:07:28,800 --> 01:07:30,100
To change both our masks.

1241
01:07:30,100 --> 01:07:31,500
That's probably the only problem.

1242
01:07:33,600 --> 01:07:34,900
Oops, spoke a little too soon.

1243
01:07:35,000 --> 01:07:36,600
Not quite just the only problem.

1244
01:07:39,400 --> 01:07:41,100
Oh, changed it in the wrong place?

1245
01:07:44,500 --> 01:07:44,800
No, no.

1246
01:07:44,800 --> 01:07:46,500
So I did, I did change in both places.

1247
01:07:46,800 --> 01:07:47,700
I take it back.

1248
01:07:48,100 --> 01:07:50,100
I'm not I'm not totally out to lunch.

1249
01:07:50,100 --> 01:07:50,800
It's totally fine.

1250
01:07:50,800 --> 01:07:58,200
So that's, I think all fine that makes reasonable sense.

1251
01:07:59,200 --> 01:08:00,000
Ah,

1252
01:08:02,800 --> 01:08:08,700
But forgot, one more thing I can't just mask this out, right?

1253
01:08:09,000 --> 01:08:11,700
Because I need the mullet Sam multiply right.

1254
01:08:11,700 --> 01:08:14,000
It would need to be one's there.

1255
01:08:15,500 --> 01:08:21,600
Hmm, so yeah, I mean I would need, I need to Miss Lee, make sure that

1256
01:08:21,600 --> 01:08:22,899
the alpha comes through.

1257
01:08:22,899 --> 01:08:28,100
So that's the lat.

1258
01:08:28,200 --> 01:08:31,000
That's yeah, I mean I can do it but it

1259
01:08:31,200 --> 01:08:32,500
It just cost more instructions out there.

1260
01:08:32,700 --> 01:08:38,500
I wonder, is there some clever way that I can make this work so that

1261
01:08:38,500 --> 01:08:45,700
the alpha comes through, you know, Uhn squared, which is what I want

1262
01:08:45,700 --> 01:08:48,399
to have happen, right?

1263
01:08:48,399 --> 01:08:55,600
I want that Alpha to remain unsquare the entire time because the alpha

1264
01:08:55,600 --> 01:08:59,399
never gets square rooted at the end and we want it linear.

1265
01:09:00,100 --> 01:09:00,800
Right.

1266
01:09:06,800 --> 01:09:09,200
That's the only thing we need as a trick.

1267
01:09:10,399 --> 01:09:15,000
We need a simple way to make this vector.

1268
01:09:16,399 --> 01:09:18,399
Not have the alpha B squared.

1269
01:09:19,000 --> 01:09:19,500
Well,

1270
01:09:21,200 --> 01:09:23,000
Actually do we need to do that?

1271
01:09:24,200 --> 01:09:28,200
I guess now that I think about it is that just stupid could we just

1272
01:09:28,200 --> 01:09:28,800
Square them?

1273
01:09:28,800 --> 01:09:33,399
Both right but but actually pull out the alpha ahead of time.

1274
01:09:34,500 --> 01:09:36,100
How hard would that be right?

1275
01:09:36,300 --> 01:09:37,200
Not very

1276
01:09:40,500 --> 01:09:43,800
So am I just making a mountain out of a molehill there?

1277
01:09:44,500 --> 01:09:44,899
Right.

1278
01:09:44,899 --> 01:09:48,700
Am I just was that just just a lot of Ado About Nothing and it turns

1279
01:09:48,700 --> 01:09:50,500
out that it was

1280
01:09:52,300 --> 01:09:53,800
All right, so that's pretty good.

1281
01:09:54,100 --> 01:09:55,200
That's a pretty good thing.

1282
01:09:55,200 --> 01:09:59,100
And now we can do that now, we can actually do those wide.

1283
01:09:59,400 --> 01:10:03,600
So let's take a look and see how that's doing there that totally runs

1284
01:10:03,600 --> 01:10:05,700
just fine, still nice and Zippy.

1285
01:10:06,700 --> 01:10:10,700
And so, let's take a look at what happens if we just go ahead and, you

1286
01:10:10,700 --> 01:10:13,300
know, and convert them.

1287
01:10:13,300 --> 01:10:14,700
All right?

1288
01:10:15,700 --> 01:10:17,900
So let's see if I was to convert them.

1289
01:10:17,900 --> 01:10:19,100
All right.

1290
01:10:19,100 --> 01:10:20,300
We just have.

1291
01:10:20,400 --> 01:10:21,900
That would be Texel a

1292
01:10:22,100 --> 01:10:23,400
Replace with text will be.

1293
01:10:24,100 --> 01:10:24,500
Yeah.

1294
01:10:24,800 --> 01:10:30,500
Then we do Texel be replaced with Texas C and then we do text will see

1295
01:10:30,500 --> 01:10:33,600
replaced with Texel D, probably should make a macro for these, huh?

1296
01:10:35,600 --> 01:10:36,800
And that would be that.

1297
01:10:37,200 --> 01:10:40,700
And then when we do the conversions again it would just be the same

1298
01:10:40,700 --> 01:10:42,000
here for everybody.

1299
01:10:42,000 --> 01:10:49,700
So Texel a it comes text, the be Texel, be becomes text to see and

1300
01:10:49,700 --> 01:10:51,900
text will see becomes

1301
01:10:52,000 --> 01:10:52,600
Text will be.

1302
01:10:56,400 --> 01:10:57,100
Right.

1303
01:10:59,000 --> 01:11:04,300
Off we go and hey that definitely did make a difference, right?

1304
01:11:04,900 --> 01:11:08,300
Although I feel like I introduced a bug there, it doesn't.

1305
01:11:08,400 --> 01:11:13,800
I feel like it's not quite by Lynn earring like it's supposed to could

1306
01:11:13,800 --> 01:11:14,700
be wrong about that.

1307
01:11:14,700 --> 01:11:18,200
I want to make sure, let's make sure I didn't do something stupid.

1308
01:11:18,200 --> 01:11:21,900
There, we probably should have some kind of compliance test at this

1309
01:11:21,900 --> 01:11:24,100
point since we're doing so many wacky things.

1310
01:11:24,100 --> 01:11:27,800
With the rendering spot-checking by, I is not exactly the best thing

1311
01:11:27,800 --> 01:11:28,500
to do there.

1312
01:11:29,100 --> 01:11:31,400
But what, what did I do?

1313
01:11:31,400 --> 01:11:32,000
Anything.

1314
01:11:32,100 --> 01:11:33,300
Totally done there.

1315
01:11:33,800 --> 01:11:35,300
We're doing the milou.

1316
01:11:37,700 --> 01:11:39,700
Ah, we're reading from only sample.

1317
01:11:39,700 --> 01:11:40,800
A, that's the problem.

1318
01:11:41,300 --> 01:11:42,100
So, there we go.

1319
01:11:42,100 --> 01:11:45,700
It's got a read only reading 411 sample.

1320
01:11:46,300 --> 01:11:47,200
So there we go.

1321
01:11:47,700 --> 01:11:49,500
Back to our proper by linear.

1322
01:11:50,000 --> 01:11:53,700
It does look like the we're getting still a little bit of Aditi.

1323
01:11:53,700 --> 01:11:58,300
Like if you look at our hero, he's got some green fringing, it looks

1324
01:11:58,300 --> 01:11:58,500
like it.

1325
01:11:58,500 --> 01:11:59,800
Just it looks like the Alphas.

1326
01:12:00,000 --> 01:12:00,900
Not quite right.

1327
01:12:00,900 --> 01:12:05,400
It looks like it's I feel like we're still a little bit buggy there

1328
01:12:06,800 --> 01:12:10,700
and so that's also we kind of eaten up most of the Q&A here.

1329
01:12:10,700 --> 01:12:13,900
Sorry about that but you know what do you do?

1330
01:12:15,500 --> 01:12:18,100
So I feel like oh there we go.

1331
01:12:18,300 --> 01:12:19,400
Still got one more.

1332
01:12:22,600 --> 01:12:24,900
Just as I'm saying, we need to make a macro for something.

1333
01:12:24,900 --> 01:12:26,000
There's cut and paste book.

1334
01:12:26,000 --> 01:12:28,300
Think that's pretty good evidence for it.

1335
01:12:28,900 --> 01:12:29,700
So there we go.

1336
01:12:37,400 --> 01:12:43,500
All right, and so that, let's see how that goes when we run it.

1337
01:12:47,500 --> 01:12:52,800
So that is actually way worse than we were doing before, right?

1338
01:12:53,300 --> 01:12:54,700
That's actually super.

1339
01:12:54,700 --> 01:12:57,300
So the only reason we would got that Phantom speed up there was

1340
01:12:57,300 --> 01:12:59,100
because I had have it the typo there.

1341
01:12:59,600 --> 01:13:03,800
So that's actually way worse than we were before doing those

1342
01:13:03,800 --> 01:13:10,000
operations in the doing those operations like so.

1343
01:13:10,300 --> 01:13:16,600
So I wonder if we run that through the little analyzer, I wonder

1344
01:13:16,900 --> 01:13:20,800
I right, so if I do this and do our compiled there,

1345
01:13:22,800 --> 01:13:25,200
And then go back to our little capture here.

1346
01:13:26,400 --> 01:13:31,300
This is 16-bit square, right?

1347
01:13:32,500 --> 01:13:35,500
Let's take a look at what it outputs.

1348
01:13:36,600 --> 01:13:37,100
Right.

1349
01:13:39,200 --> 01:13:44,100
So 16-bit square is way worse on the Cycles, right?

1350
01:13:45,100 --> 01:13:49,100
And it says the throughput bottleneck is inter iteration.

1351
01:13:50,000 --> 01:13:52,600
I don't even know what that means.

1352
01:13:53,200 --> 01:13:57,700
That would definitely be a question for Fabien, certainly not for me,

1353
01:13:59,800 --> 01:14:05,800
but the total number of Micro Ops is much smaller than it was before,

1354
01:14:06,200 --> 01:14:06,700
right?

1355
01:14:09,100 --> 01:14:10,200
Much much smaller.

1356
01:14:10,900 --> 01:14:16,500
So because if you remember, if you look back at our previous run here,

1357
01:14:16,500 --> 01:14:17,600
the no malls run.

1358
01:14:18,100 --> 01:14:20,200
If you look back it was 306.

1359
01:14:20,500 --> 01:14:22,900
And now it's 283, right?

1360
01:14:23,400 --> 01:14:25,400
And the moles run, furthermore?

1361
01:14:25,700 --> 01:14:26,300
Right?

1362
01:14:27,000 --> 01:14:29,200
Whatever it was, what was it called?

1363
01:14:29,200 --> 01:14:30,300
Moles?

1364
01:14:30,300 --> 01:14:31,400
Run that out?

1365
01:14:32,000 --> 01:14:33,200
The moles run, was more still.

1366
01:14:33,200 --> 01:14:34,800
So we went from 350.

1367
01:14:36,900 --> 01:14:43,100
Down to 283, actual operations, but because of which operations they

1368
01:14:43,100 --> 01:14:47,100
were it's actually worse for us.

1369
01:14:48,200 --> 01:14:52,100
In terms of the total block, throughput, right?

1370
01:14:53,700 --> 01:14:57,800
Which sucks can't catch a break.

1371
01:14:57,800 --> 01:14:58,600
You know what I'm saying?

1372
01:15:01,000 --> 01:15:05,700
So I don't know, I don't know if that sometimes I feel like that's

1373
01:15:05,700 --> 01:15:09,600
probably a good place to end because sometimes that means you should

1374
01:15:09,600 --> 01:15:12,200
backtrack other times.

1375
01:15:12,800 --> 01:15:16,300
That means you should push forward and try to find a better way to do

1376
01:15:16,300 --> 01:15:17,700
whatever it is that you were doing.

1377
01:15:18,900 --> 01:15:23,700
So I'm not 100% sure which one of these we should do and so it might

1378
01:15:23,700 --> 01:15:28,200
be good to just let it sit for a little bit and think about what we

1379
01:15:28,200 --> 01:15:31,900
want to pursue going forward, right?

1380
01:15:33,700 --> 01:15:37,200
Just something to think about now loading the destination.

1381
01:15:38,700 --> 01:15:41,600
We could do exactly the same thing, right?

1382
01:15:41,900 --> 01:15:42,900
So,

1383
01:15:56,900 --> 01:15:58,200
I mean, loading the destination.

1384
01:15:58,200 --> 01:16:01,200
We could do the exact same stuff for but if that made us slower, I'm

1385
01:16:01,200 --> 01:16:05,200
not sure that this is going to make us Faster by converting that in

1386
01:16:05,200 --> 01:16:08,100
theory, you would want some things in the in the floating-point pipe

1387
01:16:08,100 --> 01:16:10,500
while they're things were in the in the integer pipe anyway and stuff

1388
01:16:10,500 --> 01:16:11,100
like that.

1389
01:16:11,300 --> 01:16:12,900
So I don't really know.

1390
01:16:13,300 --> 01:16:14,200
This is kind of tough.

1391
01:16:14,200 --> 01:16:18,600
I feel like kind of staring at this disassembly and coming to some

1392
01:16:18,600 --> 01:16:23,500
conclusions about what needed to happen to take the pressure off in

1393
01:16:23,500 --> 01:16:26,100
the places where it's currently bottlenecking either.

1394
01:16:26,200 --> 01:16:30,800
In the pure floating-point version or here in the wide version would

1395
01:16:30,800 --> 01:16:34,700
be required before taking any next steps that don't have an immediate

1396
01:16:34,700 --> 01:16:37,400
idea of what we would do to do better.

1397
01:16:37,400 --> 01:16:41,600
We could change this to be wide but you know what wouldn't actually

1398
01:16:43,000 --> 01:16:43,600
help.

1399
01:16:48,100 --> 01:16:48,400
Yeah.

1400
01:16:48,400 --> 01:16:50,500
I mean it wouldn't and I don't think that would actually help.

1401
01:17:00,200 --> 01:17:03,400
All right, well I'm gonna do the Q&A because we should have some Q&A

1402
01:17:05,100 --> 01:17:10,800
so I'm going to go ahead and do that and we will you know maybe come

1403
01:17:10,800 --> 01:17:16,600
back and revisit this this this may not be the end of it because we

1404
01:17:16,600 --> 01:17:20,300
may want to take another look at these as we go.

1405
01:17:22,000 --> 01:17:22,600
So okay.

1406
01:17:31,400 --> 01:17:32,800
CPS answer critical path.

1407
01:17:32,800 --> 01:17:34,100
Okay, thanks guys.

1408
01:17:34,100 --> 01:17:36,900
I'm assuming people can read the manual for this as well.

1409
01:17:36,900 --> 01:17:40,200
So in theory you guys on stream should probably or probably already

1410
01:17:40,200 --> 01:17:44,900
know a bunch more about this tool than I do, but so, yes.

1411
01:17:44,900 --> 01:17:49,100
So critical path I guess is, is bad.

1412
01:17:54,300 --> 01:17:59,800
So we don't want to be seeing a lot of CP, but yeah.

1413
01:18:01,400 --> 01:18:02,500
Alright, let's take a look here.

1414
01:18:14,600 --> 01:18:18,300
I see was showing Port 1 as the bottleneck not ports.

1415
01:18:18,500 --> 01:18:23,400
Ah typical programmer non-programmer mistake, I made there.

1416
01:18:23,400 --> 01:18:27,000
So if Port one was the bottleneck then yeah reducing pressure on the

1417
01:18:27,000 --> 01:18:28,500
multiplies wouldn't help at all.

1418
01:18:32,300 --> 01:18:33,000
But wait.

1419
01:18:33,100 --> 01:18:35,000
So here is the part that was confusing me.

1420
01:18:35,100 --> 01:18:39,400
Why does the 1.0 go in that car in the zero?

1421
01:18:39,400 --> 01:18:40,900
Column for the mall PS?

1422
01:18:41,100 --> 01:18:43,100
That's why I was reading it that way.

1423
01:18:48,800 --> 01:18:49,600
So I don't know.

1424
01:18:49,600 --> 01:18:50,000
What are you?

1425
01:18:50,100 --> 01:18:53,000
How did you know that the mole PS was in the one?

1426
01:18:53,400 --> 01:18:54,400
I don't think that's true.

1427
01:18:54,400 --> 01:18:56,400
I feel like the mole PS is in the zero.

1428
01:18:57,400 --> 01:18:59,400
Are you sure Fletcher rated?

1429
01:19:02,500 --> 01:19:03,500
I don't think that's true.

1430
01:19:06,700 --> 01:19:12,000
Enter iteration means that run that run X of a loop depends on the x

1431
01:19:12,400 --> 01:19:14,000
minus one run.

1432
01:19:23,100 --> 01:19:24,500
Well, why would that be true?

1433
01:19:24,500 --> 01:19:26,600
Because these Loops are independent

1434
01:19:30,200 --> 01:19:34,200
You could run them totally separately if you wanted to their you

1435
01:19:34,200 --> 01:19:38,700
shouldn't be dependent in any way, actually.

1436
01:19:39,800 --> 01:19:41,400
So are you sure about that?

1437
01:19:56,200 --> 01:19:59,200
You should try pulling out the texture pointer dereferencing from the

1438
01:19:59,200 --> 01:20:01,200
inner loop to local variables.

1439
01:20:01,500 --> 01:20:05,100
The compiler is probably doing a read every time because of aliasing

1440
01:20:06,900 --> 01:20:08,700
doing a read

1441
01:20:11,200 --> 01:20:13,300
Everytime of what exactly.

1442
01:20:20,000 --> 01:20:21,900
Oh, are you talking about like texture?

1443
01:20:21,900 --> 01:20:23,400
Arrow pitch and so on?

1444
01:20:24,200 --> 01:20:29,100
Yes, I could totally pull those out because like texture pointer

1445
01:20:29,100 --> 01:20:31,400
obviously, is is going to be different.

1446
01:20:31,400 --> 01:20:32,500
Yes, I can certainly hoist.

1447
01:20:32,500 --> 01:20:35,900
Those, if you think that's something where the compiler thinks there's

1448
01:20:35,900 --> 01:20:37,400
aliasing and doesn't want to do it.

1449
01:20:37,700 --> 01:20:39,600
So the texture pitch I can put out here.

1450
01:20:40,000 --> 01:20:40,500
Right.

1451
01:20:42,800 --> 01:20:43,700
Text your pitch.

1452
01:20:53,200 --> 01:20:54,500
Let's see.

1453
01:20:58,400 --> 01:20:59,700
Texture pitch.

1454
01:21:02,500 --> 01:21:03,700
Looks like just texture pitch.

1455
01:21:03,700 --> 01:21:04,500
Texture memory.

1456
01:21:04,500 --> 01:21:06,000
Is it, right?

1457
01:21:06,000 --> 01:21:07,800
Those are the only things that are used.

1458
01:21:10,200 --> 01:21:11,300
And I'll see anything else.

1459
01:21:34,800 --> 01:21:35,300
Wow.

1460
01:21:35,600 --> 01:21:38,200
So that was a pretty good call as well.

1461
01:21:39,600 --> 01:21:42,600
Because this is the, the routine that was actually slow.

1462
01:21:42,700 --> 01:21:43,200
Right?

1463
01:21:43,200 --> 01:21:46,600
This was actually the routine that was much slower because we're still

1464
01:21:46,600 --> 01:21:48,800
using the old version there.

1465
01:21:49,500 --> 01:21:51,700
So, let's let's let me take a quick look at that.

1466
01:21:58,900 --> 01:22:00,200
Texture locals.

1467
01:22:06,000 --> 01:22:06,500
We go.

1468
01:22:17,000 --> 01:22:19,800
Yeah, that's that definitely did make an improvement so you were

1469
01:22:19,800 --> 01:22:21,800
correct the compiler did not know that.

1470
01:22:21,800 --> 01:22:26,400
It could save those because since they were accessing off a pointer it

1471
01:22:26,400 --> 01:22:31,900
thought I guess that it thought that maybe they could change so it had

1472
01:22:31,900 --> 01:22:35,400
to read them every time and that helped it out quite a bit possibly

1473
01:22:35,400 --> 01:22:40,200
because it can do you know, optimizations with them now and possibly

1474
01:22:40,200 --> 01:22:43,700
just because it doesn't have to do the read which, you know, maybe

1475
01:22:43,700 --> 01:22:44,100
that was problem.

1476
01:22:44,100 --> 01:22:46,700
That read would have always been in the cash so I

1477
01:22:46,800 --> 01:22:50,400
I doubt it but I guess it would have just at least help the compiler

1478
01:22:50,400 --> 01:22:52,800
in terms of all the other operators to know, right?

1479
01:22:52,800 --> 01:22:56,000
That that's not what's actually happening there.

1480
01:22:57,900 --> 01:23:00,300
So yeah, that was pretty cool.

1481
01:23:00,700 --> 01:23:01,700
Very good idea.

1482
01:23:03,500 --> 01:23:03,900
I guess.

1483
01:23:10,400 --> 01:23:11,300
So I guess the question.

1484
01:23:11,300 --> 01:23:13,600
Now, let me take a look at that runs.

1485
01:23:15,700 --> 01:23:16,900
With texture locals here.

1486
01:23:19,600 --> 01:23:25,100
279 my crops and so the previous 16-bit 1.

1487
01:23:25,500 --> 01:23:29,500
So we reduced the number of operations down just a little bit as well.

1488
01:23:31,000 --> 01:23:32,200
Block throughput though.

1489
01:23:32,900 --> 01:23:37,700
Still the same so that was purely just memory stuff that's causing

1490
01:23:37,700 --> 01:23:37,900
that.

1491
01:23:40,300 --> 01:23:41,800
That's a little weird.

1492
01:23:42,200 --> 01:23:42,700
Not sure.

1493
01:23:42,700 --> 01:23:45,700
I have full faith in what this is telling me.

1494
01:23:45,700 --> 01:23:46,200
But

1495
01:23:47,500 --> 01:23:48,100
All right.

1496
01:23:49,300 --> 01:23:49,800
so,

1497
01:23:51,400 --> 01:23:51,800
Yeah.

1498
01:23:55,600 --> 01:23:57,200
How does one support new instructions?

1499
01:23:57,200 --> 01:23:59,100
Which are not ubiquitous like a VX.

1500
01:23:59,100 --> 01:23:59,800
Do you just checks?

1501
01:24:00,000 --> 01:24:02,700
You but setup function pointers to appropriate, implementations.

1502
01:24:03,000 --> 01:24:04,600
Yes, that is exactly what you do.

1503
01:24:05,200 --> 01:24:06,900
What about register saving for things?

1504
01:24:06,900 --> 01:24:10,300
Like context switches would one have to worry about such things with

1505
01:24:10,300 --> 01:24:12,800
the same D registers, no.

1506
01:24:12,800 --> 01:24:15,100
Because in general, well,

1507
01:24:20,600 --> 01:24:22,100
Actually guess that's not true.

1508
01:24:24,100 --> 01:24:27,000
I don't actually know because I've never tried it.

1509
01:24:27,100 --> 01:24:33,000
What happens on a VX on older operating systems, if they're smart

1510
01:24:33,000 --> 01:24:37,600
enough to mask it from you or whether you still see the AV exes being

1511
01:24:37,600 --> 01:24:38,000
there.

1512
01:24:38,000 --> 01:24:42,400
And then if you use it, you would just get totally hosed because

1513
01:24:42,400 --> 01:24:43,800
they're not saved.

1514
01:24:44,500 --> 01:24:48,000
So I actually don't know, you may have to check for a combination of

1515
01:24:48,000 --> 01:24:51,800
operating system and cpuid.

1516
01:24:52,200 --> 01:24:53,100
I'm not sure.

1517
01:24:53,100 --> 01:24:53,700
So you would have to

1518
01:24:53,900 --> 01:24:59,600
At the very least go double-check that so I'm not sure I'm sorry you

1519
01:24:59,600 --> 01:25:03,300
have to at least check to see and then set the function pointers but

1520
01:25:03,300 --> 01:25:04,400
I'm just I'm just not sure.

1521
01:25:08,400 --> 01:25:12,100
How about try to play replace squirt with mul are squirt?

1522
01:25:13,000 --> 01:25:15,600
Yeah, we could definitely replace squirt with Mall r squared.

1523
01:25:15,600 --> 01:25:19,400
We're still using the slower throughput version here though so I'm a

1524
01:25:19,400 --> 01:25:23,000
little hesitant to try any of these things but we can do that.

1525
01:25:24,100 --> 01:25:26,500
What he's basically saying is instead of issuing, the actual square

1526
01:25:26,500 --> 01:25:32,300
root, you know, we could, instead of doing that use, there's a faster

1527
01:25:32,300 --> 01:25:36,700
reciprocal square root which gives you an approximated 1 over the

1528
01:25:36,700 --> 01:25:37,600
square root.

1529
01:25:38,000 --> 01:25:40,600
Um, it's this, right?

1530
01:25:41,900 --> 01:25:50,100
And so, you know, the idea which is is basically to

1531
01:25:53,200 --> 01:25:56,300
To use the reciprocal square root instead of the square root command.

1532
01:25:56,300 --> 01:25:58,300
And so a square root operation.

1533
01:25:58,700 --> 01:26:02,400
So I don't actually know what r squared throughput is but I think it's

1534
01:26:02,400 --> 01:26:07,700
very high right through put one or two on this processor.

1535
01:26:08,800 --> 01:26:11,100
And so if you take a look at

1536
01:26:12,900 --> 01:26:16,200
At the squirt PS that we were using right.

1537
01:26:16,200 --> 01:26:19,400
The throughput is much slower, right?

1538
01:26:19,700 --> 01:26:20,900
It's only 16.

1539
01:26:21,600 --> 01:26:23,000
So, yeah.

1540
01:26:23,000 --> 01:26:27,700
So basically the idea here would be, we have a number.

1541
01:26:27,700 --> 01:26:33,800
We have X and we know that we want to compute the square root of x.

1542
01:26:34,100 --> 01:26:39,300
But the only thing we actually can compute is one over the square root

1543
01:26:39,300 --> 01:26:40,700
of x, right?

1544
01:26:42,400 --> 01:26:43,400
Is that what we want to compute?

1545
01:26:43,400 --> 01:26:45,100
What are we competing in total here?

1546
01:26:46,400 --> 01:26:49,500
We're just taking Blended.

1547
01:26:50,000 --> 01:26:51,500
We're taking blind know that.

1548
01:26:51,500 --> 01:26:53,700
Yeah so that's that's what we want.

1549
01:26:53,700 --> 01:26:55,400
So we have one over the square root of x.

1550
01:26:55,500 --> 01:26:59,900
And what we want to do is we want to we want

1551
01:27:00,000 --> 01:27:01,200
Vert that right?

1552
01:27:03,800 --> 01:27:10,800
So yeah, if we take that and multiply it.

1553
01:27:12,400 --> 01:27:16,900
So if we take that, we've got, you know why, whatever, whatever it's

1554
01:27:16,900 --> 01:27:19,800
going to do, it's going to give us y equals.

1555
01:27:19,900 --> 01:27:24,900
You know, 1 over 1 over X, we need to be able to do something to that

1556
01:27:25,000 --> 01:27:28,400
that will produce just square root of x for us.

1557
01:27:28,700 --> 01:27:32,800
So if we do multiply both sides, right, multiply both sides by

1558
01:27:33,500 --> 01:27:36,800
We would get X over the square root of x, right?

1559
01:27:39,100 --> 01:27:44,900
And, of course, we know that x equals, we could replace this x right?

1560
01:27:44,900 --> 01:27:48,500
With square root of x times, square root of x, because squared of x

1561
01:27:48,500 --> 01:27:50,600
times, square, root of x or, you know, square root of x squared.

1562
01:27:50,600 --> 01:27:52,100
Right is X.

1563
01:27:52,100 --> 01:27:55,600
So that would cancel the square root.

1564
01:27:55,600 --> 01:27:57,800
Then just leave us with one square root X.

1565
01:27:57,800 --> 01:28:02,800
So, x times the value that we get back from that should give us the

1566
01:28:02,800 --> 01:28:04,600
value that we actually want, right?

1567
01:28:04,600 --> 01:28:07,400
So MLPs,

1568
01:28:09,100 --> 01:28:15,300
Our times reciprocal square root, right, Loops Spotify in the wrong

1569
01:28:15,300 --> 01:28:15,700
one here.

1570
01:28:18,100 --> 01:28:20,400
Mul PS mul PS.

1571
01:28:23,000 --> 01:28:23,900
And so on.

1572
01:28:29,800 --> 01:28:31,200
And there we go.

1573
01:28:40,400 --> 01:28:44,300
So getting those out of there, also does look like a good thing.

1574
01:28:44,400 --> 01:28:46,800
Let's take a look at the no square root version.

1575
01:28:46,800 --> 01:28:50,000
But again, since we don't we're kind of in flux a little bit here.

1576
01:28:50,600 --> 01:28:55,100
It's hard to tell sometimes because you know, we don't actually know

1577
01:28:59,900 --> 01:29:04,500
We're still using that wide squaring, which which didn't help us,

1578
01:29:04,800 --> 01:29:05,300
right?

1579
01:29:07,400 --> 01:29:09,300
No squirt or we just call this our squirt.

1580
01:29:11,400 --> 01:29:14,700
So let's go ahead and take a look at what that gives us.

1581
01:29:16,700 --> 01:29:17,900
And para Square it.

1582
01:29:19,500 --> 01:29:20,300
so that

1583
01:29:22,800 --> 01:29:24,000
did also.

1584
01:29:25,800 --> 01:29:28,100
Wait to that actually should have gone up.

1585
01:29:28,100 --> 01:29:32,100
Yeah so that added a few Cycles because I added a few instructions

1586
01:29:32,100 --> 01:29:37,600
because of the are squirt but it did reduce the total throughput down

1587
01:29:37,600 --> 01:29:39,600
from what it was previously.

1588
01:29:39,600 --> 01:29:43,800
So that is good, definitely good but so I don't know.

1589
01:29:43,800 --> 01:29:49,300
So maybe we should actually not do the wide thing or maybe we should

1590
01:29:49,300 --> 01:29:50,500
try doing the Wild Thing further.

1591
01:29:50,500 --> 01:29:54,900
Or maybe what we need to do is just do these in a slightly different

1592
01:29:54,900 --> 01:29:55,100
way.

1593
01:29:55,100 --> 01:29:55,200
So

1594
01:29:55,300 --> 01:29:59,700
oh, that they would be able to assign better out here and to be

1595
01:30:00,100 --> 01:30:03,300
I again since it's the first time I've ever used this thing, I don't

1596
01:30:03,300 --> 01:30:09,300
have a really good feel for the right way to interpret what I'm seeing

1597
01:30:09,300 --> 01:30:09,500
right?

1598
01:30:09,500 --> 01:30:12,500
It's not a tool I have experience with so on stream when I'm trying to

1599
01:30:12,500 --> 01:30:15,800
talk and go out something I can't you know I would have to be an

1600
01:30:15,800 --> 01:30:18,800
expert on this to be able to do anything real with it in the middle of

1601
01:30:18,800 --> 01:30:19,400
the stream.

1602
01:30:19,700 --> 01:30:21,500
So I suspect

1603
01:30:22,800 --> 01:30:27,200
T', I mean, looking at this, with all of these looking at this through

1604
01:30:27,200 --> 01:30:28,900
here, and you can see that.

1605
01:30:28,900 --> 01:30:31,100
So many things are going into Port one there.

1606
01:30:43,600 --> 01:30:43,900
Yeah.

1607
01:31:15,400 --> 01:31:17,700
So oh Fabien is actually watching.

1608
01:31:18,300 --> 01:31:21,200
See what we really need is him to just be in the chair that would help

1609
01:31:21,200 --> 01:31:25,800
things out a lot, but unfortunately, haven't quite gotten that

1610
01:31:25,800 --> 01:31:31,000
happening yet but yeah, he's just commenting on the thing before which

1611
01:31:31,000 --> 01:31:32,700
is multiplier important 0.

1612
01:31:32,700 --> 01:31:41,800
Ad in Port 1, it looks like also so things that happen in Port 1,

1613
01:31:42,400 --> 01:31:42,600
right?

1614
01:31:42,600 --> 01:31:44,500
We've got the ads.

1615
01:31:44,600 --> 01:31:49,800
The comps both happen in that port and it doesn't look like they can

1616
01:31:49,800 --> 01:31:51,900
ever happen on any other Port.

1617
01:31:52,200 --> 01:31:52,800
Right?

1618
01:31:53,800 --> 01:31:58,600
So the ads the Max's, the mins all that stuff kind of stuffs up in

1619
01:31:58,600 --> 01:31:59,600
that Port, which

1620
01:32:01,900 --> 01:32:02,900
And the sub.

1621
01:32:03,000 --> 01:32:03,400
Yeah.

1622
01:32:06,600 --> 01:32:09,000
so, the multiplies that are actually doing

1623
01:32:11,600 --> 01:32:13,900
The 16-bit multiplies.

1624
01:32:15,600 --> 01:32:20,400
I assume that those also went into Port 1, so that was yeah, pretty

1625
01:32:20,400 --> 01:32:21,400
much all bad.

1626
01:32:22,600 --> 01:32:24,500
so, I guess

1627
01:32:26,600 --> 01:32:29,200
I feel like that just sort of suggests that we don't want to try and

1628
01:32:29,200 --> 01:32:29,500
do this.

1629
01:32:29,500 --> 01:32:29,600
Why?

1630
01:32:29,600 --> 01:32:36,200
Because it just adds to all of that Port one pressure and if we did do

1631
01:32:36,200 --> 01:32:37,400
the multiplies in floating point.

1632
01:32:37,400 --> 01:32:40,300
It's kind of like they're free because they're going into Port 0 where

1633
01:32:40,300 --> 01:32:42,100
we didn't have the pressure

1634
01:32:44,700 --> 01:32:49,000
in theory but I guess you know, on top of that.

1635
01:32:49,000 --> 01:32:53,100
I also I don't know how to balance the fact that you can do more of

1636
01:32:53,100 --> 01:32:54,500
them at once, right?

1637
01:32:54,500 --> 01:32:59,800
So it is true that you can, you know, if this were clever or perhaps,

1638
01:33:00,000 --> 01:33:06,800
No, it is doing able to do more of the multipliers with one actual

1639
01:33:06,800 --> 01:33:08,200
issue of a multiplied.

1640
01:33:08,500 --> 01:33:12,600
So it's, it's, you know, I don't necessarily know how to balance that

1641
01:33:12,600 --> 01:33:13,200
out.

1642
01:33:15,300 --> 01:33:17,400
So I'm just, I'm just not sure about that.

1643
01:33:17,900 --> 01:33:20,600
So I probably, I think I just want to let this sit for a bit.

1644
01:33:21,000 --> 01:33:24,000
We'll come back to tomorrow since this is kind of interesting and I

1645
01:33:24,000 --> 01:33:27,700
get to learn about how to use this thing and how to read it, which is

1646
01:33:27,700 --> 01:33:29,100
yet again like on stream.

1647
01:33:29,100 --> 01:33:29,900
It's kind of be

1648
01:33:30,000 --> 01:33:32,100
Hard to be hit with a new thing and it's hard.

1649
01:33:32,100 --> 01:33:35,700
I apologize for not knowing all the stuff I should and looking at

1650
01:33:35,700 --> 01:33:37,500
because going to take me a little while to go into speed on it.

1651
01:33:37,500 --> 01:33:38,800
But looks pretty cool.

1652
01:33:41,200 --> 01:33:41,700
And yeah.

1653
01:33:43,600 --> 01:33:45,700
I mean, it looks like for the most part.

1654
01:33:49,100 --> 01:33:53,900
That would kind of indicate that because of that Port pressure going

1655
01:33:53,900 --> 01:33:56,800
wide would actually be very going wider would actually be very hard

1656
01:33:56,800 --> 01:34:01,700
for us to do because since we're already using that unit even in the

1657
01:34:01,700 --> 01:34:05,200
floating-point path to do the mins and Max's, we'd have to come up

1658
01:34:05,200 --> 01:34:08,200
with like some other creative way, not to do that.

1659
01:34:08,400 --> 01:34:08,900
So yeah.

1660
01:34:21,100 --> 01:34:23,200
How can removing the square root help performance?

1661
01:34:23,200 --> 01:34:27,000
If the square root is done on the multiplied Port, not the adder port.

1662
01:34:31,700 --> 01:34:36,300
So, I guess the thing that I would say about it was that normally that

1663
01:34:36,300 --> 01:34:37,900
would be the right way to think about it.

1664
01:34:37,900 --> 01:34:42,200
But I suspect in this case, it's not simply because it's so the

1665
01:34:42,200 --> 01:34:44,700
throughput so long, right?

1666
01:34:44,900 --> 01:34:49,600
It's 60 and cycle throughput, which means that it's like

1667
01:34:50,900 --> 01:34:56,100
Even if we were perfectly pipelined, we have to do three square roots,

1668
01:34:56,200 --> 01:35:01,100
which means, 3 times, 16 Cycles just to get those square roots done.

1669
01:35:01,900 --> 01:35:07,200
So, that amount of overhang is pretty hard to fill with stuff,

1670
01:35:07,600 --> 01:35:09,600
especially because it comes at the end of the loop.

1671
01:35:09,600 --> 01:35:12,000
So you're basically talking about going up into the next Loop,

1672
01:35:12,000 --> 01:35:14,000
probably to grab more stuff to do.

1673
01:35:14,000 --> 01:35:14,300
Right?

1674
01:35:14,300 --> 01:35:15,500
Is length, is going to come from.

1675
01:35:17,300 --> 01:35:22,700
So I feel like it probably has something to do with the fact that the

1676
01:35:22,700 --> 01:35:29,300
total distance between the last square root and you know, and when it

1677
01:35:29,300 --> 01:35:32,400
would have to issue a mole PS before it could do anything else just

1678
01:35:32,400 --> 01:35:35,000
isn't wide enough to be 3 times.

1679
01:35:35,000 --> 01:35:37,000
16 cycles Long, right.

1680
01:35:37,000 --> 01:35:38,700
It just isn't far enough.

1681
01:35:39,600 --> 01:35:46,200
So even though it's not on a high pressure port that it's so big.

1682
01:35:46,200 --> 01:35:47,900
It's footprint is so big.

1683
01:35:48,400 --> 01:35:49,500
I suspect the processor.

1684
01:35:49,500 --> 01:35:54,100
Just can't deal with having the port gone for that long.

1685
01:35:54,400 --> 01:35:57,800
It can't it can't move all the other malls you know?

1686
01:35:58,200 --> 01:35:59,800
I mean keep in mind there's dependencies

1687
01:36:00,000 --> 01:36:04,400
This whole code, the processor can't just execute any instruction.

1688
01:36:04,400 --> 01:36:08,000
It wants whenever it wants, it still has to execute dependent or

1689
01:36:08,200 --> 01:36:12,600
instructions in series so I suspect that that probably has a lot to do

1690
01:36:12,600 --> 01:36:15,500
with it, but I don't know that be my suspicions.

1691
01:36:17,000 --> 01:36:19,500
All right, I'm going to go ahead and end the stream.

1692
01:36:19,500 --> 01:36:24,800
This has been very interesting for me, because I never have seen this

1693
01:36:24,800 --> 01:36:25,300
tool before.

1694
01:36:25,300 --> 01:36:26,000
It's cool.

1695
01:36:26,400 --> 01:36:29,900
I'm gonna have to learn this, and I'm going to probably run this on my

1696
01:36:29,900 --> 01:36:33,700
own code now, because I did not know, it was available, it's pretty

1697
01:36:33,700 --> 01:36:34,200
great.

1698
01:36:36,900 --> 01:36:40,900
So, thank you for being for that and for your optimization help in

1699
01:36:40,900 --> 01:36:41,500
general.

1700
01:36:42,300 --> 01:36:48,600
I think that people are probably getting a much better view of

1701
01:36:48,600 --> 01:36:52,200
optimization in general already, and I think that will obviously go

1702
01:36:52,700 --> 01:36:53,300
double.

1703
01:36:53,700 --> 01:36:57,200
When you put up a stream or come on this stream.

1704
01:36:57,200 --> 01:37:00,600
One of the other which I hope we can make happen because.

1705
01:37:00,600 --> 01:37:02,600
Yeah, I mean, basically, like I said before,

1706
01:37:03,800 --> 01:37:07,300
If you have an expert on something, they're going to know a lot of

1707
01:37:07,300 --> 01:37:08,700
stuff that you don't know.

1708
01:37:09,200 --> 01:37:12,200
And you know, one of the things that's really nice about having been

1709
01:37:12,200 --> 01:37:12,800
in the game industry.

1710
01:37:12,800 --> 01:37:17,800
A long time is that you know people who you can ask when you know you

1711
01:37:17,800 --> 01:37:18,600
don't know stuff.

1712
01:37:18,700 --> 01:37:19,300
Right.

1713
01:37:19,500 --> 01:37:22,000
And optimization is one of those things that definitely an especially

1714
01:37:22,000 --> 01:37:22,700
on sse2.

1715
01:37:22,700 --> 01:37:27,800
I just haven't done very much of and so all of the things that you

1716
01:37:27,800 --> 01:37:31,400
should know if you really do it on a day-to-day basis and want to be

1717
01:37:31,400 --> 01:37:33,400
very good at it or not things that I can.

1718
01:37:33,900 --> 01:37:34,300
Teach.

1719
01:37:34,300 --> 01:37:38,200
So again, thank you very much for that and I think everyone on the

1720
01:37:38,200 --> 01:37:43,300
stream really appreciates you taking the time to give us the pointers

1721
01:37:43,300 --> 01:37:47,400
because otherwise you know we would have done just the translation of

1722
01:37:47,400 --> 01:37:49,500
the routine and that probably would have been it, right?

1723
01:37:49,800 --> 01:37:50,800
So that's pretty awesome.

1724
01:37:52,100 --> 01:37:57,000
And and we will come back to it tomorrow and maybe just try to think

1725
01:37:57,000 --> 01:37:58,000
about a little bit.

1726
01:37:58,200 --> 01:38:01,500
What our strategy is here is there anything interesting that we could

1727
01:38:01,500 --> 01:38:06,600
do or should we just go ahead and move it back to doing it in float

1728
01:38:06,600 --> 01:38:07,800
and say that that's the way?

1729
01:38:07,800 --> 01:38:08,600
It should probably work.

1730
01:38:09,100 --> 01:38:10,200
So that's what we'll do tomorrow.

1731
01:38:11,200 --> 01:38:18,800
As always, if you would like to follow along at home with handmade

1732
01:38:18,800 --> 01:38:21,300
hero, you can do so by

1733
01:38:21,900 --> 01:38:25,100
Go into the handmade hero website and you can pre-order The Source,

1734
01:38:25,200 --> 01:38:26,600
pre-order the game, it comes to the source code.

1735
01:38:26,600 --> 01:38:28,200
So if you want to follow along with what we're doing and play around

1736
01:38:28,200 --> 01:38:32,500
the optimization yourself and maybe find some faster ways to do the

1737
01:38:32,500 --> 01:38:33,600
things that we're doing.

1738
01:38:33,600 --> 01:38:37,900
Now, that you've seen how do it, anyone could read that diagram and in

1739
01:38:37,900 --> 01:38:39,900
fact, probably better than I can because it's the first time I've ever

1740
01:38:39,900 --> 01:38:40,500
seen it.

1741
01:38:40,500 --> 01:38:44,200
I will be going to read the the docks on it for sure.

1742
01:38:45,100 --> 01:38:47,300
So, you know, you can play around with it.

1743
01:38:47,300 --> 01:38:50,400
You could take a look and see if you could figure out different ways

1744
01:38:50,400 --> 01:38:51,700
to structure the same stuff that

1745
01:38:51,800 --> 01:38:57,000
we're doing so that it ends up filling those ports better getting rid

1746
01:38:57,000 --> 01:38:59,200
of some of those stalls doing whatever needs to happen.

1747
01:39:00,300 --> 01:39:03,800
Because I believe, unless I'm very much an error, those printouts that

1748
01:39:03,800 --> 01:39:06,300
we're seeing there are showing us what our maximum block.

1749
01:39:06,300 --> 01:39:09,300
Throughput would be if there were no memory cells.

1750
01:39:10,100 --> 01:39:13,500
And so in some sense, we're kind of for free getting a pretty,

1751
01:39:13,500 --> 01:39:17,600
presumably pretty good estimate of what the code speed actually is

1752
01:39:17,600 --> 01:39:20,900
when you discount anything that has to do with memory, which is kind

1753
01:39:20,900 --> 01:39:21,100
of nice.

1754
01:39:21,100 --> 01:39:24,800
Because it means we can sort of play around a little, with the how

1755
01:39:24,800 --> 01:39:29,400
fast the routine is capable of going intrinsically, pun intended.

1756
01:39:30,100 --> 01:39:34,300
Before actually looking at the memory part of it which kind of might

1757
01:39:34,300 --> 01:39:36,600
help us get through it because then we can kind of break those into

1758
01:39:36,600 --> 01:39:39,800
pieces and you know work on them separately until they converge,

1759
01:39:39,800 --> 01:39:40,300
right?

1760
01:39:40,500 --> 01:39:41,600
So that's kind of cool too.

1761
01:39:42,700 --> 01:39:45,900
Which is harder to do if you don't have a tool that can tell you what

1762
01:39:45,900 --> 01:39:47,900
that throughput would be separate from the memory.

1763
01:39:48,900 --> 01:39:49,200
All right.

1764
01:39:49,200 --> 01:39:51,900
So anyway thank you very much for joining me for another episode of

1765
01:39:51,900 --> 01:39:52,700
handmade hero.

1766
01:39:52,900 --> 01:39:55,200
As always, check out how many here at or if you need anything.

1767
01:39:55,200 --> 01:39:57,200
If you want to preorder the game, if you want to go to the forums and

1768
01:39:57,200 --> 01:40:00,500
ask questions or get poorest to Mac or Linux or a CD annotated episode

1769
01:40:00,500 --> 01:40:01,700
guide, all kinda stuff like that.

1770
01:40:02,100 --> 01:40:04,800
If you want to scrub the patreon page and support the video series, we

1771
01:40:04,800 --> 01:40:06,400
would very much love it if you did that.

1772
01:40:06,400 --> 01:40:08,700
And there's also the tweetbot which has the schedule.

1773
01:40:08,700 --> 01:40:11,900
So if you want to catch the live stream, that is what it will be.

1774
01:40:13,000 --> 01:40:16,600
And and it also has a schedule post on the weekend for the whole week

1775
01:40:16,600 --> 01:40:20,000
so hopefully you can always catch a slide if you want to see us lat

1776
01:40:20,300 --> 01:40:23,400
and until the next time that you do, thanks so much for tuning in.

1777
01:40:23,500 --> 01:40:26,700
We will be off tomorrow actually now that I think about it, it's

1778
01:40:26,700 --> 01:40:29,900
Saturday will be the next stream so definitely check the Tweet, but if

1779
01:40:29,900 --> 01:40:31,700
you want to catch that, I think it's Saturday at 8:00 p.m.

1780
01:40:32,200 --> 01:40:32,800
All right.

1781
01:40:32,800 --> 01:40:35,500
Thanks everyone, and I will catch you later.

