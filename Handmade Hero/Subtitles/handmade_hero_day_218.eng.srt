1
00:00:02,700 --> 00:00:04,700
Hello everyone and welcome to handmade here.

2
00:00:04,700 --> 00:00:08,100
Are the sure we could a complete game live on stream and I never have

3
00:00:08,100 --> 00:00:11,200
a cord that's long enough to actually let me keep my head where I want

4
00:00:11,200 --> 00:00:15,100
it to be because I don't know why.

5
00:00:15,100 --> 00:00:20,300
Because set some point I just don't like spending a lot of money on

6
00:00:20,300 --> 00:00:24,500
stuff and so I can't quite actually get a longer cord.

7
00:00:24,700 --> 00:00:26,400
That's just the way things are sometimes.

8
00:00:26,400 --> 00:00:28,800
And I guess the fact that this is not a dozen help, you know, maybe I

9
00:00:28,800 --> 00:00:31,000
could fix that, that would probably be a good start as well.

10
00:00:31,400 --> 00:00:32,299
Let's see if that helps.

11
00:00:38,900 --> 00:00:41,200
It's a little better but actually is a little bit better.

12
00:00:42,400 --> 00:00:46,100
So anyway, welcome to handmade hero today.

13
00:00:46,200 --> 00:00:52,000
We are as the as the Romans used to say having our lunch and eating it

14
00:00:52,000 --> 00:00:57,300
too, where we are going to try and get our debug system into a state,

15
00:00:57,300 --> 00:01:02,800
where it both works for sort of like, everything, everything dumps

16
00:01:02,800 --> 00:01:04,900
into a log on the game side of things.

17
00:01:05,800 --> 00:01:09,300
So there's no actual Interruption of the game running, no matter what

18
00:01:09,300 --> 00:01:12,000
kind of debug stuff you're doing or on the

19
00:01:12,300 --> 00:01:12,800
Oxide.

20
00:01:12,800 --> 00:01:16,700
It's just all sort of pulled up and collated and put it into a format.

21
00:01:16,700 --> 00:01:19,400
That's easy to sort of like View and do all these other sorts of

22
00:01:19,400 --> 00:01:19,900
things.

23
00:01:20,500 --> 00:01:24,300
It's sort of like the, it's sort of like, the all you can eat lunch,

24
00:01:24,300 --> 00:01:30,100
buffet of debug information and like any lunch buffet, you end up in a

25
00:01:30,100 --> 00:01:33,700
situation where, you know, sometimes the sneeze Shield doesn't go down

26
00:01:33,700 --> 00:01:38,100
all the way and, you know, some of the the those little troughs get

27
00:01:38,100 --> 00:01:42,000
contaminated and everyone in the restaurant.

28
00:01:42,200 --> 00:01:43,200
It's sick other times.

29
00:01:43,200 --> 00:01:46,800
It's great and they have the chicken tikka masala or whatever that you

30
00:01:46,800 --> 00:01:47,500
really like.

31
00:01:48,500 --> 00:01:50,700
And it's you can just have a much of it as you want.

32
00:01:50,900 --> 00:01:54,200
And so we don't really know which kind of a lunch buffet, our debug

33
00:01:54,200 --> 00:01:55,100
system is going to be yet.

34
00:01:55,100 --> 00:01:58,000
We're hoping that it's going to be the kind with the tikka masala and

35
00:01:58,000 --> 00:02:03,200
not the one where somebody sneezed into the the saag paneer, it's

36
00:02:03,200 --> 00:02:06,900
pretty hard to tell in saag paneer, whether or not someone has in fact

37
00:02:06,900 --> 00:02:10,199
sneeze into it because it kind of has that sort of Green + yellow.

38
00:02:10,199 --> 00:02:12,100
Look to it already and

39
00:02:12,200 --> 00:02:15,600
Even if they were really, really sick and sort of had a fair bit of

40
00:02:15,600 --> 00:02:20,100
bacteria in their mucus, you wouldn't necessarily be able to, you

41
00:02:20,100 --> 00:02:21,200
know, kind of see it.

42
00:02:21,400 --> 00:02:24,400
So I guess what I would say is, that's where we're at.

43
00:02:24,500 --> 00:02:28,600
And that's kind of a gross thought now that I'm thinking of it, I kind

44
00:02:28,600 --> 00:02:30,800
of wish I hadn't brought that up, but you know, whatever.

45
00:02:31,300 --> 00:02:32,000
What can you do?

46
00:02:33,000 --> 00:02:34,500
So we're going to jump back into it.

47
00:02:35,600 --> 00:02:39,200
Pretty much same thing we were doing yesterday just trying to like

48
00:02:39,200 --> 00:02:41,200
wrap up some of the code there.

49
00:02:41,700 --> 00:02:45,900
This of course is day to 18.

50
00:02:46,100 --> 00:02:49,400
So if you want to follow along at home, you want to unpack day, 217

51
00:02:49,400 --> 00:02:52,800
source code into a directory and that is what I'm starting with today.

52
00:02:52,800 --> 00:02:54,500
So here we go.

53
00:02:56,100 --> 00:02:57,500
With the handmade heroing.

54
00:02:58,800 --> 00:02:59,800
So I'm just going to go ahead and build.

55
00:03:00,000 --> 00:03:03,400
Your and if I remember correctly, we turned off the debug system.

56
00:03:03,500 --> 00:03:07,400
Just so people wouldn't have any trouble running it and so on.

57
00:03:07,900 --> 00:03:11,000
So we don't have it on at the moment and everything's, wow, look at

58
00:03:11,000 --> 00:03:11,200
that.

59
00:03:11,200 --> 00:03:15,300
Guy's if around there, okay, go back from that.

60
00:03:16,100 --> 00:03:18,600
But what we need to do, if we actually want the debug system to run,

61
00:03:18,600 --> 00:03:22,200
as we need to change our pan to find a turn debugging back on.

62
00:03:22,400 --> 00:03:24,800
And so now, we're back to where we were yesterday, which is, we were

63
00:03:24,800 --> 00:03:28,400
kind of in the middle of making changes and so, let's go right back

64
00:03:28,400 --> 00:03:28,900
into it.

65
00:03:29,100 --> 00:03:29,800
Like, I do.

66
00:03:30,000 --> 00:03:30,600
Always say.

67
00:03:35,100 --> 00:03:38,500
If you don't like what you have for lunch, the best thing to do is to

68
00:03:38,500 --> 00:03:42,500
just eat it as quickly as you can, there will always be a better lunch

69
00:03:42,500 --> 00:03:43,000
tomorrow.

70
00:03:43,000 --> 00:03:47,400
So let's let's take a look and see where we're at here.

71
00:03:47,400 --> 00:03:49,000
We are with our grid stuff.

72
00:03:49,000 --> 00:03:52,700
We just did this yesterday, what we wanted to do was sort of make it,

73
00:03:52,700 --> 00:03:57,500
so that no matter where we were in the debug recording process, any

74
00:03:57,500 --> 00:04:02,400
event that got recorded would basically have a grid associated with

75
00:04:02,400 --> 00:04:02,800
it.

76
00:04:02,900 --> 00:04:04,400
So that we knew that a particular

77
00:04:04,500 --> 00:04:08,300
Station in the file, could be uniquely identified so that all of the

78
00:04:08,300 --> 00:04:10,700
events that came from that location could sort of be grouped together

79
00:04:10,700 --> 00:04:11,800
and looked at as a whole.

80
00:04:12,300 --> 00:04:16,399
Now, of course, what we didn't do is we didn't actually change up in

81
00:04:16,399 --> 00:04:18,600
here, the definition of a debug event.

82
00:04:18,600 --> 00:04:20,800
So that's kind of thing.

83
00:04:20,800 --> 00:04:25,000
And, you know what, we've actually got a lot to do in here which we

84
00:04:25,000 --> 00:04:26,800
can get rid of because we got rid of the line number.

85
00:04:26,800 --> 00:04:28,400
And now we've just got grid.

86
00:04:28,400 --> 00:04:31,100
We still have block name, which is a different thing and I don't know

87
00:04:31,100 --> 00:04:34,200
if we want to keep block name or get rid of block named, we may be

88
00:04:34,200 --> 00:04:34,500
able to

89
00:04:34,500 --> 00:04:36,600
To get rid of block named as well in the future.

90
00:04:37,400 --> 00:04:43,100
Let's just say to do Casey, should we remove block name, altogether?

91
00:04:43,500 --> 00:04:48,500
And I don't know whether we should or not, but, you know, we'll find

92
00:04:48,500 --> 00:04:49,000
out.

93
00:04:49,400 --> 00:04:50,300
So, let's see here.

94
00:04:50,300 --> 00:04:55,700
We also I think maybe missed backslash at some point, we might have

95
00:04:55,700 --> 00:04:55,800
now.

96
00:04:55,800 --> 00:04:56,900
I guess we've got it in there.

97
00:04:57,300 --> 00:05:01,000
So we just need a semicolon that's about it and then I think we're

98
00:05:01,000 --> 00:05:01,300
good.

99
00:05:01,300 --> 00:05:04,300
Now, what we also have to do here because this is one of those things

100
00:05:04,300 --> 00:05:04,400
that

101
00:05:04,600 --> 00:05:07,500
happens, especially in a situation where

102
00:05:12,100 --> 00:05:14,500
it's kind of like, you know, we're making a fair bit of changes.

103
00:05:14,500 --> 00:05:18,200
It's like, I always say when you're trying to serve lunch, if you

104
00:05:18,200 --> 00:05:21,300
know, all the place settings are sort of shifted around that everyone

105
00:05:21,300 --> 00:05:23,600
sits down and they don't know where to eat, right?

106
00:05:23,600 --> 00:05:26,500
And so one of the things that you do as a programmer is, when you're

107
00:05:26,500 --> 00:05:29,900
serving lunch, if you want to do something, where you shift the place

108
00:05:29,900 --> 00:05:33,100
settings, you got to tell every got to go through until all the people

109
00:05:33,100 --> 00:05:36,200
who are coming to the lunch party that they need to kind of move over

110
00:05:36,200 --> 00:05:37,700
from their normal positions.

111
00:05:37,700 --> 00:05:39,400
And that's exactly what we have to do now, right?

112
00:05:39,400 --> 00:05:41,700
Because these people, when we do like these initializations at all,

113
00:05:41,800 --> 00:05:47,200
That stuff we need to sort of go in here and incorrect.

114
00:05:47,400 --> 00:05:49,800
The stuff that was expecting there to be founding block name.

115
00:05:49,800 --> 00:05:52,500
Etc and now there's going to be that with thing.

116
00:05:53,100 --> 00:05:57,200
So in here, we pass in the file name and all that sort of stuff.

117
00:05:57,200 --> 00:05:57,800
I number.

118
00:05:57,900 --> 00:05:59,800
So we want to do here is actually just be passing

119
00:06:00,000 --> 00:06:03,500
Weird instead and we're going to have to, you know make that work

120
00:06:03,500 --> 00:06:04,700
right, here we go.

121
00:06:05,400 --> 00:06:10,200
And of course the way we get the grid is is we do this thing so we can

122
00:06:10,200 --> 00:06:12,500
just anywhere that we were doing that before.

123
00:06:12,600 --> 00:06:14,500
We should be able to make that work.

124
00:06:14,500 --> 00:06:20,900
I'm wondering as well if I could do something like like this sort of

125
00:06:22,100 --> 00:06:23,500
I'm wondering if this will work.

126
00:06:23,700 --> 00:06:28,200
I'm wondering if something like that would be would be plausible.

127
00:06:28,800 --> 00:06:29,800
So that basically

128
00:06:30,000 --> 00:06:30,100
Lee.

129
00:06:30,400 --> 00:06:34,900
This would just you know, would just look like that and I don't really

130
00:06:34,900 --> 00:06:36,400
know but I'm going to try it anyway.

131
00:06:37,900 --> 00:06:42,700
So okay, if we do this, then anytime we call debug initialize value.

132
00:06:42,700 --> 00:06:45,000
Obviously, it's going to be incorrect.

133
00:06:45,800 --> 00:06:48,700
Oops, we go, it's going to be incorrect now.

134
00:06:48,700 --> 00:06:51,100
So we're going to have to make sure that works and you can see there.

135
00:06:51,100 --> 00:06:51,800
We're getting those areas.

136
00:06:51,800 --> 00:06:55,600
So, debug initialize value, let's go ahead and find that.

137
00:06:56,300 --> 00:06:58,800
I guess it's only in these two places, so that's actually pretty

138
00:06:58,800 --> 00:06:59,600
straightforward.

139
00:06:59,900 --> 00:07:03,500
And you can see here, we've got file line path, sort of stuff getting

140
00:07:03,500 --> 00:07:04,000
past.

141
00:07:04,100 --> 00:07:07,100
So we want to do is get rid of these here file online.

142
00:07:07,500 --> 00:07:08,900
Want to keep path because that's the name.

143
00:07:08,900 --> 00:07:12,400
But now in place where the grid was going to be, we want to do that

144
00:07:12,400 --> 00:07:16,200
unique file counter string like so and and hopefully that'll work.

145
00:07:16,200 --> 00:07:17,300
I don't know if it will work.

146
00:07:17,300 --> 00:07:20,700
Like I said, with macros, it's always kind of a little bit of an

147
00:07:20,700 --> 00:07:24,600
adventure because I never remember exactly how the macro browser Works

148
00:07:24,600 --> 00:07:27,200
other than the fact that I always remember that.

149
00:07:27,200 --> 00:07:33,200
It's a giant steaming pile of lunch as I always like to call it.

150
00:07:33,300 --> 00:07:33,800
So

151
00:07:36,400 --> 00:07:38,200
here we are in add variable to group.

152
00:07:38,300 --> 00:07:43,200
So now we've kind of that suggests to me that we've sort of corrected

153
00:07:43,200 --> 00:07:46,800
the errors that we had from the grid situation and we're back to sort

154
00:07:46,800 --> 00:07:48,700
of dealing now with the actual stuff.

155
00:07:48,900 --> 00:07:52,900
The actual structural stuff of the, the debug system that now has to

156
00:07:52,900 --> 00:07:55,200
change because of the stuff that we did yesterday.

157
00:07:57,400 --> 00:07:59,100
In deciding how it was going to work.

158
00:08:00,500 --> 00:08:01,900
And so let's go ahead and push forward.

159
00:08:02,000 --> 00:08:02,300
Oh,

160
00:08:03,600 --> 00:08:09,500
and that reminds me of something that I wanted to do as well, which I

161
00:08:09,500 --> 00:08:14,200
thought of this in the shower this morning, I was sort of, you know, I

162
00:08:14,600 --> 00:08:18,200
as I often do my brain just randomly thinks about something that I had

163
00:08:18,200 --> 00:08:20,000
been working on program lies or whatever.

164
00:08:22,100 --> 00:08:25,600
And, you know, it's kind of like one of those things when you're at

165
00:08:25,600 --> 00:08:28,400
the lunch table and you're, you know, you're just eating your lunch

166
00:08:28,400 --> 00:08:31,700
and your brain just kind of drifts off to think about memory,

167
00:08:31,700 --> 00:08:37,400
allocation, what I remembered is that when we were doing this code, we

168
00:08:37,400 --> 00:08:39,600
actually didn't quite do it, right?

169
00:08:39,900 --> 00:08:43,400
We don't know this yet, because we haven't actually gotten to the part

170
00:08:43,700 --> 00:08:48,100
where we're relying on it, but when we do this Arena has room for a

171
00:08:48,100 --> 00:08:50,700
thing, this actually this code is actually

172
00:08:50,900 --> 00:08:52,800
He not really correct.

173
00:08:53,100 --> 00:08:56,500
The reason it's not correct is because we are never actually planning

174
00:08:56,500 --> 00:08:57,800
to free any memory.

175
00:08:58,400 --> 00:08:59,800
We're just planning to recycle

176
00:09:00,300 --> 00:09:03,600
So the Arena's never going to have no more room, no matter how many

177
00:09:03,600 --> 00:09:04,800
times we for your frame.

178
00:09:05,100 --> 00:09:08,100
So really push size with the allocation was the wrong way to write

179
00:09:08,100 --> 00:09:08,500
this.

180
00:09:08,700 --> 00:09:13,300
Well, we actually wanted to do was have our allocator thing which

181
00:09:13,300 --> 00:09:15,300
allocates event stuff.

182
00:09:15,400 --> 00:09:19,200
We want to just that to like look and see if there is an old one to

183
00:09:19,200 --> 00:09:19,500
use.

184
00:09:19,500 --> 00:09:20,600
And if there isn't

185
00:09:21,500 --> 00:09:26,800
Allocate memory or rather free frames until it can.

186
00:09:29,400 --> 00:09:30,800
So, this was actually wrong.

187
00:09:32,700 --> 00:09:40,100
This is actually two totally wrong and needs to be different.

188
00:09:41,600 --> 00:09:45,200
That's just kind of a lunch sort of thing that we need to do.

189
00:09:46,300 --> 00:09:47,700
Not, it's like less of a dinner.

190
00:09:47,700 --> 00:09:48,900
It's not really a dinner or breakfast thing.

191
00:09:48,900 --> 00:09:49,900
It's more of a lunch thing.

192
00:09:51,000 --> 00:09:57,100
Kind of like, you know, you know sandwiches like no one eats a

193
00:09:57,100 --> 00:10:00,300
sandwich for breakfast or for dinner, they eat it for lunch, it's that

194
00:10:00,300 --> 00:10:01,000
kind of thing.

195
00:10:02,000 --> 00:10:02,200
Right.

196
00:10:02,200 --> 00:10:03,300
So moving on.

197
00:10:04,500 --> 00:10:06,900
Let's get back to business here because that's the memory stuff we

198
00:10:06,900 --> 00:10:07,200
can.

199
00:10:07,200 --> 00:10:11,100
We can do later once everything is structurally back and repaired.

200
00:10:11,400 --> 00:10:14,700
So what I want to do here again is I want to get this working so that

201
00:10:14,700 --> 00:10:16,900
we're keeping everything in the element hash.

202
00:10:16,900 --> 00:10:21,800
So that anything that comes in any time, we see a particular location

203
00:10:21,800 --> 00:10:26,000
coming through, we want to sort of have the co-leader, put it into

204
00:10:27,100 --> 00:10:30,200
basically a location based on where it came from in the code.

205
00:10:30,400 --> 00:10:33,300
So this what that good thing is for, we're just going to use that grid

206
00:10:33,300 --> 00:10:34,000
to just do it.

207
00:10:34,300 --> 00:10:37,300
We're doing a basic string hash here, where we're just going to take

208
00:10:37,600 --> 00:10:39,500
whatever we see there and put it in.

209
00:10:39,500 --> 00:10:43,200
Now, when I say string hash, I don't really mean it because one of the

210
00:10:43,200 --> 00:10:44,300
nice things about this,

211
00:10:45,700 --> 00:10:47,800
Just to be really clear on what I'm doing here.

212
00:10:48,400 --> 00:10:52,200
You can kind of see what I did for the quids right in this unique file

213
00:10:52,200 --> 00:10:52,800
counter string thing.

214
00:10:52,800 --> 00:10:56,400
What it does is it creates a concatenated string and that concatenated

215
00:10:56,400 --> 00:10:58,300
string has been created at compile time.

216
00:10:58,800 --> 00:11:01,600
So when it gets created, it's going to be put into the string table of

217
00:11:01,600 --> 00:11:05,800
the executable and because it is a unique string, that means that

218
00:11:05,800 --> 00:11:09,500
every single one of those will get a unique pointer in our program,

219
00:11:09,700 --> 00:11:13,300
which means that I don't actually have to Hash the string, which would

220
00:11:13,300 --> 00:11:15,200
be relatively slow, because I'd have to go through

221
00:11:15,300 --> 00:11:18,400
All of the elements of the string and add them together or and you

222
00:11:18,400 --> 00:11:21,900
know with some kind of a hash function and put it to do better hash

223
00:11:21,900 --> 00:11:23,000
function in there whatever.

224
00:11:23,300 --> 00:11:27,400
But because I happen to be doing it this way where I know that they'll

225
00:11:27,400 --> 00:11:29,800
all be put into a string table and have unique pointers.

226
00:11:30,000 --> 00:11:32,100
It means that really what I can use for the hash table is just a

227
00:11:32,100 --> 00:11:36,400
pointer to the string and I know that, no two strings that were

228
00:11:36,400 --> 00:11:39,200
generated this way we'll ever collapse into the same pointer because

229
00:11:39,200 --> 00:11:42,200
they each are a different string so that's kind of Handy.

230
00:11:46,700 --> 00:11:51,000
So really what I want to do is when we do kill ladybug record, we go

231
00:11:51,000 --> 00:11:54,100
through these events and what we can do is every time we get seeing

232
00:11:54,100 --> 00:11:58,000
event, we can use the grid from the event to create the element hash.

233
00:11:58,000 --> 00:11:59,900
So we can basically say like, all right, there is going to be

234
00:12:00,000 --> 00:12:03,600
On the corresponds to this and we want to do a get element from event

235
00:12:03,600 --> 00:12:07,100
kind of a thing, what we would do is pass the event and it would use

236
00:12:07,100 --> 00:12:11,400
the Grid in the event to determine which one it was and return us the

237
00:12:11,400 --> 00:12:13,800
proper debug element, right?

238
00:12:13,900 --> 00:12:15,700
So that's really straightforward, right?

239
00:12:15,700 --> 00:12:18,900
It just looks like this, we have our debug stay here.

240
00:12:20,500 --> 00:12:24,500
Oops, and we've got our debug events like so.

241
00:12:25,400 --> 00:12:29,100
And all we want to do now is we want to just grab out of this element

242
00:12:29,100 --> 00:12:34,100
hash the correct element for our for our event.

243
00:12:34,100 --> 00:12:36,200
Now our event has that grid, right?

244
00:12:36,200 --> 00:12:41,900
So we have the you know we almost could just use sort of the you at 30

245
00:12:41,900 --> 00:12:42,900
Tunas of it all.

246
00:12:47,000 --> 00:12:47,600
Right.

247
00:12:47,900 --> 00:12:54,400
In fact, I guess we should do memory index and this is a little bit,

248
00:12:54,500 --> 00:12:58,000
this is a little bit dainty, it's a little bit sort of weird.

249
00:12:58,200 --> 00:13:01,600
So if we create, if we take this thing which is a pointer and we

250
00:13:01,600 --> 00:13:04,600
create it to a memory index, the problem is we don't really know how

251
00:13:04,600 --> 00:13:06,000
big that is right.

252
00:13:06,100 --> 00:13:09,400
If we're compiling a 32-bit mode which we may want to do some day.

253
00:13:09,800 --> 00:13:12,800
We're not compiling a 32A right now but there's no real reason why we

254
00:13:12,800 --> 00:13:13,100
can't

255
00:13:15,400 --> 00:13:18,800
It could be a 32-bit value because the players will be 32 bit if it's

256
00:13:18,800 --> 00:13:21,700
a 64-bit compiled, then it's going to be 64-bit value.

257
00:13:22,000 --> 00:13:24,600
And so we don't really know what we would do with our hash function

258
00:13:24,600 --> 00:13:29,200
here because we'd want to mix the top into it if it was 64

259
00:13:29,200 --> 00:13:29,900
potentially.

260
00:13:30,600 --> 00:13:32,800
But what I'm going to do instead is I'm just going to treat it as a

261
00:13:32,800 --> 00:13:34,000
32-bit value.

262
00:13:35,300 --> 00:13:40,400
Because what I want to, what I want to do is say, all right.

263
00:13:40,500 --> 00:13:44,500
Chances are the string table is going to all be in one relatively

264
00:13:44,500 --> 00:13:45,600
confined location.

265
00:13:45,600 --> 00:13:50,800
So, it's probably the case that the top part of the string pointers

266
00:13:50,800 --> 00:13:52,900
are not going to be relevant, right?

267
00:13:53,000 --> 00:13:54,300
That's just my assumption.

268
00:13:54,400 --> 00:13:56,600
Now, I don't actually know if that's true.

269
00:13:56,600 --> 00:14:00,300
That might be totally wrong, but that's just what I'm assuming.

270
00:14:00,300 --> 00:14:01,600
So hopefully that's the case.

271
00:14:02,200 --> 00:14:04,800
So what I want to do is just use 32 bits but I also

272
00:14:04,900 --> 00:14:05,200
No.

273
00:14:05,200 --> 00:14:08,100
The in general it's probably going to be true that the pointers are

274
00:14:08,100 --> 00:14:10,000
not going to be unaligned.

275
00:14:10,000 --> 00:14:13,900
Like they're probably not going to give me pointers that are on like B

276
00:14:13,900 --> 00:14:14,600
boundaries.

277
00:14:14,600 --> 00:14:15,400
I'm just guessing.

278
00:14:15,400 --> 00:14:15,900
That's true.

279
00:14:15,900 --> 00:14:17,700
I don't know, it's true but I'm guessing.

280
00:14:18,300 --> 00:14:21,800
So what I want to do instead is I want to do something where I cast

281
00:14:21,800 --> 00:14:24,400
this down to either 64 or 32, don't care.

282
00:14:24,500 --> 00:14:28,200
I want to shift out some of those low bits because I don't think

283
00:14:28,200 --> 00:14:31,600
they're going to be relevant and then I'll make that be my hash value,

284
00:14:31,600 --> 00:14:32,100
right?

285
00:14:32,300 --> 00:14:33,700
So here is my hash value.

286
00:14:35,400 --> 00:14:36,000
Like so.

287
00:14:37,500 --> 00:14:37,900
Okay.

288
00:14:38,700 --> 00:14:41,700
So then what I do is I say, all right, the hash value.

289
00:14:42,700 --> 00:14:46,300
And I'm going to go ahead and mod it, by whatever.

290
00:14:46,300 --> 00:14:49,300
The array count is of the thing we're going into.

291
00:14:49,300 --> 00:14:53,800
And I would like, by the way, to De to verify, I'm just going to put

292
00:14:53,800 --> 00:14:59,500
it here to do Casey verify this turns into.

293
00:14:59,500 --> 00:14:59,800
And

294
00:15:00,000 --> 00:15:02,000
And not a mod.

295
00:15:02,300 --> 00:15:03,800
So we may do that as well.

296
00:15:04,400 --> 00:15:07,600
So this is the index right into the hash table.

297
00:15:08,000 --> 00:15:09,500
So we get the hash value back.

298
00:15:09,500 --> 00:15:15,300
We find out where we would put this thing and after that we then say,

299
00:15:15,300 --> 00:15:19,100
all right, that means that the debug element that we're supposed to be

300
00:15:19,100 --> 00:15:20,100
looking at here.

301
00:15:21,500 --> 00:15:23,000
Or rather the chain I should guess.

302
00:15:23,000 --> 00:15:26,500
I should say is going to be the element.

303
00:15:26,500 --> 00:15:27,100
Hash

304
00:15:30,700 --> 00:15:32,000
With that index.

305
00:15:36,700 --> 00:15:39,300
So now all we're doing is we're just going to look through to see if

306
00:15:39,300 --> 00:15:40,300
we can find it.

307
00:15:40,900 --> 00:15:46,000
And so for any given one here, if the chain grid equals the grid that

308
00:15:46,000 --> 00:15:49,200
we're looking for and again you'll notice here, I'm not comparing the

309
00:15:49,200 --> 00:15:52,000
strings and the reason I'm not comparing, the strings is exactly the

310
00:15:52,000 --> 00:15:52,500
same reason.

311
00:15:52,500 --> 00:15:55,300
I just said we know that the pointers to the strings are unique so

312
00:15:55,300 --> 00:15:58,900
it'd just be a complete waste of my time to actually compare them with

313
00:15:58,900 --> 00:16:00,400
a string comparison of some kind.

314
00:16:04,100 --> 00:16:04,400
Right.

315
00:16:04,400 --> 00:16:07,400
It's like you don't eat lunch if you're already full right.

316
00:16:07,500 --> 00:16:10,200
That's like first rule of programming, you don't eat lunch if you're

317
00:16:10,200 --> 00:16:13,800
already full and so, you know, in this case, we're already full by

318
00:16:13,800 --> 00:16:15,700
just checking the Grid's, there's no sense in eating.

319
00:16:15,700 --> 00:16:19,700
Some extremely elaborate lunch at that point, when all you're going to

320
00:16:19,700 --> 00:16:23,500
do is to get up afterwards, so we go through the chain here.

321
00:16:24,500 --> 00:16:27,700
We see if we find one if we have found one then we can just

322
00:16:27,700 --> 00:16:30,400
immediately know that we found our answer, right?

323
00:16:30,600 --> 00:16:33,600
And here's our debug element, we know we found our answer.

324
00:16:33,600 --> 00:16:36,100
So everyone's happy and we can return a result here.

325
00:16:36,100 --> 00:16:37,600
We could return out from the middle of this.

326
00:16:37,700 --> 00:16:42,600
I don't tend to love sort of returns out of the middle there.

327
00:16:42,600 --> 00:16:46,700
I just don't, I like sort of my functions to have a clean ending point

328
00:16:46,800 --> 00:16:47,900
that I know they always go to.

329
00:16:47,900 --> 00:16:51,100
So, unless I really feel like I need to, I tend not to do that.

330
00:16:51,200 --> 00:16:53,300
So here, I'm just going to go ahead and say that.

331
00:16:53,300 --> 00:16:54,200
Okay, we

332
00:16:54,400 --> 00:17:00,000
Grab that result and we go here will check to see if we did not get a

333
00:17:00,000 --> 00:17:00,700
result.

334
00:17:00,900 --> 00:17:03,100
We will then go ahead and put one in.

335
00:17:03,300 --> 00:17:03,900
Right?

336
00:17:04,099 --> 00:17:09,599
So if we did not get a result and then we know we need to do a

337
00:17:09,599 --> 00:17:15,300
allocation to actually allocate a new debug element, which I will go

338
00:17:15,300 --> 00:17:22,700
ahead and do so we'll just do push struct debug State, you big arena

339
00:17:22,700 --> 00:17:24,099
and now you'll notice that I'm

340
00:17:24,300 --> 00:17:28,700
I'm not using our other are sort of our allocation are special.

341
00:17:28,700 --> 00:17:31,200
One that's supposed to be for anything because I realize, like I said

342
00:17:31,400 --> 00:17:35,400
that that was actually stupid so we don't need to worry about that for

343
00:17:35,400 --> 00:17:37,000
the immediate moment.

344
00:17:37,000 --> 00:17:39,100
But anyway, so I'm going to do a push truck.

345
00:17:39,100 --> 00:17:43,200
I push truck the debug element here, so now I have a new one and then

346
00:17:43,200 --> 00:17:45,200
I just need to put it into the hash table.

347
00:17:45,500 --> 00:17:47,100
It's really pretty basic, right?

348
00:17:47,400 --> 00:17:49,200
So that's the location of It.

349
00:17:49,600 --> 00:17:53,300
Whatever the next in hash is of this guy will point to whatever was

350
00:17:53,300 --> 00:17:54,200
there before which

351
00:17:54,300 --> 00:17:55,600
Might be 0, might not be.

352
00:17:55,600 --> 00:17:58,100
We don't know and then we'll chain ourselves in.

353
00:17:58,700 --> 00:17:59,800
Now, once we've created a new

354
00:18:00,300 --> 00:18:03,400
Obviously we also probably want to initialize it at that point.

355
00:18:03,600 --> 00:18:05,600
So whatever the debug element is here,

356
00:18:06,800 --> 00:18:09,900
That we're talking about, you can see, it's kind of got some stuff.

357
00:18:09,900 --> 00:18:13,600
So we set up the next in hash and that's good but we probably also

358
00:18:13,600 --> 00:18:19,000
want to set up like oldest event and most recent event, 2.2 nothing,

359
00:18:19,100 --> 00:18:19,700
right?

360
00:18:19,700 --> 00:18:22,600
And then, we also need, like I said in cure, we kind of need these to

361
00:18:22,600 --> 00:18:24,300
have a grid as well.

362
00:18:24,700 --> 00:18:28,200
So we have to have in here is essentially just it's just a caressed

363
00:18:28,200 --> 00:18:28,800
are, right?

364
00:18:28,900 --> 00:18:29,900
That's the grid.

365
00:18:30,000 --> 00:18:34,900
And so in here, will say, well, whatever the quit is, the quid is

366
00:18:35,300 --> 00:18:36,400
whatever came in on that.

367
00:18:36,600 --> 00:18:41,200
That event like so I'm also going to put in assertion in here just to

368
00:18:41,200 --> 00:18:45,300
remind myself that all everything needs to have a grid.

369
00:18:45,300 --> 00:18:49,200
So that way if we kind of have some stuff lying around that never sets

370
00:18:49,200 --> 00:18:51,500
that grid when it does thing will go and fix it.

371
00:18:54,200 --> 00:18:55,800
Because I want everything to have that.

372
00:18:57,100 --> 00:19:01,700
Okay, because remember this, since we never, we never touched the

373
00:19:01,700 --> 00:19:02,500
string here.

374
00:19:02,700 --> 00:19:06,600
So again, this is not just a redundant, assertion, it's not a sorting,

375
00:19:06,600 --> 00:19:08,600
something that's just going to crash a little bit later.

376
00:19:08,900 --> 00:19:12,300
This assertion is important, because if I didn't assert that, a grade

377
00:19:12,300 --> 00:19:15,200
of zero would just work, this whole function would just go ahead and

378
00:19:15,200 --> 00:19:16,400
go, right?

379
00:19:17,400 --> 00:19:20,400
So I really wanted to make sure that we don't ever have a grid of 0

380
00:19:20,400 --> 00:19:22,600
because I want everything they have a unique with.

381
00:19:22,600 --> 00:19:25,500
So I just want to make sure that it's never going to do that.

382
00:19:25,700 --> 00:19:26,600
And that that's

383
00:19:27,100 --> 00:19:33,300
Yeah, in fact I could just say that so that's all that is and here you

384
00:19:33,300 --> 00:19:35,000
can see me getting that element now.

385
00:19:35,000 --> 00:19:38,000
So now I can compile that and hopefully everything is fine.

386
00:19:38,000 --> 00:19:42,000
In fact, I guess I didn't really look to see where we were at in the

387
00:19:42,000 --> 00:19:47,500
compiled structure there, where is that stuff?

388
00:19:47,900 --> 00:19:53,100
So to that all just compiled first time, wow, that is like that's like

389
00:19:53,100 --> 00:19:54,100
getting lunch delivered.

390
00:19:54,100 --> 00:19:56,300
There is what that is, that's pretty great.

391
00:19:56,400 --> 00:19:56,700
All right.

392
00:19:56,800 --> 00:19:57,200
Right.

393
00:19:59,100 --> 00:19:59,400
Anyway.

394
00:19:59,400 --> 00:20:01,700
We don't know that it worked so it's kind of like getting lunch

395
00:20:01,700 --> 00:20:03,700
delivered but you don't know if you like it you know.

396
00:20:03,700 --> 00:20:06,500
It's kind of like getting lunch from a restaurant, you've never been

397
00:20:06,500 --> 00:20:10,000
to before and so it's kind of cool that got delivered because you

398
00:20:10,000 --> 00:20:14,200
don't have to do any work but it may be something really awful, right?

399
00:20:14,400 --> 00:20:16,800
Like it could be like a salisbury steak or one of those things that's

400
00:20:16,800 --> 00:20:19,800
kind of in that like mucilaginous kind of gelatinous goo.

401
00:20:20,200 --> 00:20:23,900
And, you know, do you really want that even if it is delivered, you

402
00:20:23,900 --> 00:20:25,500
know, maybe if you're really hungry,

403
00:20:26,800 --> 00:20:29,200
You know, you'll eat that, you know, Beggars, can't be choosers,

404
00:20:29,200 --> 00:20:30,000
that's what I say.

405
00:20:31,000 --> 00:20:35,200
But at, you know, at the end of the day, if you are someone who maybe

406
00:20:35,200 --> 00:20:40,400
maybe you could can cook or can afford to get a better lunch than the

407
00:20:40,400 --> 00:20:44,400
Salisbury steak, then maybe you would write, maybe you would elect to

408
00:20:44,400 --> 00:20:45,300
make that decision.

409
00:20:45,700 --> 00:20:49,600
So all right, we have a little bit more work to do here.

410
00:20:49,600 --> 00:20:52,500
Like I said to kind of like cleanup what's going on here.

411
00:20:52,700 --> 00:20:55,700
This this stuff here with creating variable groups

412
00:20:57,100 --> 00:20:59,900
that again is not really relevant.

413
00:21:00,000 --> 00:21:04,700
At the moment I'm wondering if maybe we just if zero it out for the

414
00:21:04,700 --> 00:21:09,800
time being even because really this stuff is not relevant at the

415
00:21:09,800 --> 00:21:11,000
immediate moment.

416
00:21:11,000 --> 00:21:13,500
What's actually going to happen now, right?

417
00:21:13,500 --> 00:21:15,400
Is in here, right?

418
00:21:15,400 --> 00:21:17,900
Where we do this hashman, adverb group, this stuff right?

419
00:21:18,100 --> 00:21:19,400
Add variable to group.

420
00:21:19,400 --> 00:21:22,300
What we're actually going to do is take, whatever this event thing

421
00:21:22,300 --> 00:21:26,700
that was, that came in, and we're actually, just going to put it on to

422
00:21:26,700 --> 00:21:27,000
wear.

423
00:21:27,000 --> 00:21:29,800
It's hashes like event stream, right?

424
00:21:30,000 --> 00:21:30,200
Right.

425
00:21:30,200 --> 00:21:33,700
So whatever it The Element was that it would correspond with which

426
00:21:33,700 --> 00:21:34,900
we've already found, right?

427
00:21:34,900 --> 00:21:39,600
Because we already did the work right here to get it right.

428
00:21:39,700 --> 00:21:42,900
So all we're really going to do is say when we get one of these, we're

429
00:21:42,900 --> 00:21:48,100
going to go ahead and dump that into whatever the element is that's

430
00:21:48,100 --> 00:21:48,900
currently open.

431
00:21:52,400 --> 00:21:52,900
Right?

432
00:21:54,500 --> 00:21:56,100
And that's and that's all that is.

433
00:21:56,900 --> 00:22:01,700
So yeah I mean this again starting to sort of coalesce a little bit

434
00:22:01,700 --> 00:22:01,900
here.

435
00:22:01,900 --> 00:22:03,700
There's still just a lot of work to do but

436
00:22:06,000 --> 00:22:06,400
Your name.

437
00:22:07,200 --> 00:22:08,100
It's all good.

438
00:22:08,200 --> 00:22:11,300
So we have a debug start event and this is really, the only thing,

439
00:22:11,300 --> 00:22:12,000
this is kind of thing.

440
00:22:12,000 --> 00:22:14,900
I was talking about before where I was like, I kind of was just being

441
00:22:14,900 --> 00:22:19,900
dumb when we did that stuff to make everybody go through the

442
00:22:20,300 --> 00:22:21,200
allocation call.

443
00:22:21,300 --> 00:22:24,500
That was a stupid, not very bright.

444
00:22:25,100 --> 00:22:26,900
So, what we want to do, here is okay.

445
00:22:27,200 --> 00:22:28,600
We need a new steward event.

446
00:22:28,600 --> 00:22:31,400
This is the only thing that's actually going to get recycled because

447
00:22:31,400 --> 00:22:34,800
everything else is a standing structure that persists, but stored

448
00:22:34,800 --> 00:22:35,700
events just kind of

449
00:22:35,800 --> 00:22:39,200
Pile up until we run out of space for storing sort events and then we

450
00:22:39,200 --> 00:22:40,500
free old sort of events.

451
00:22:40,800 --> 00:22:44,300
So what we really wanted to do is we wanted to make that be the way.

452
00:22:44,300 --> 00:22:45,300
This thing worked.

453
00:22:46,000 --> 00:22:50,000
So what we really want to do is do like an allocate start event right?

454
00:22:50,600 --> 00:22:56,600
Or get or like store just maybe the store event, right?

455
00:22:56,800 --> 00:23:00,000
And so what we do when we do store event

456
00:23:01,100 --> 00:23:04,000
Pass the debug state that will take care of that allocation thing for

457
00:23:04,000 --> 00:23:04,300
us.

458
00:23:04,900 --> 00:23:09,000
And then we'll say okay, whatever the stored event is, we know that

459
00:23:09,000 --> 00:23:11,300
we've got some stuff to initialize here, right?

460
00:23:11,300 --> 00:23:16,600
We've got the next, we've got the frame index and we've got the event.

461
00:23:16,600 --> 00:23:23,100
Now the event is the easy part, because the event is obviously just

462
00:23:23,100 --> 00:23:28,000
coming directly in, so we can like quite literally just copy, whatever

463
00:23:28,000 --> 00:23:30,800
the data is there and be done with it, right?

464
00:23:30,900 --> 00:23:34,900
That's super simple, but the other stuff is a little bit more

465
00:23:34,900 --> 00:23:36,900
complicated for the framing decks.

466
00:23:36,900 --> 00:23:39,200
We have to know what frame were on right now.

467
00:23:39,500 --> 00:23:42,600
And so, fortunately we know that, if we're in here, we do know that

468
00:23:42,600 --> 00:23:44,200
piece of information, right?

469
00:23:44,200 --> 00:23:47,500
So we know that whatever framework collating that's got an index, so

470
00:23:47,500 --> 00:23:50,800
we will just go ahead and stuff that in there and that's pretty great.

471
00:23:53,400 --> 00:23:59,600
you know, easy peasy lemon squeezy like they say when you're about to

472
00:24:00,000 --> 00:24:03,000
I know if you guys take tea at lunch, but if you're the kind of people

473
00:24:03,000 --> 00:24:06,800
who duty at lunch, it's just customary for everyone to kind of go

474
00:24:06,800 --> 00:24:11,000
around the table and take a lemon slice and go easy peasy.

475
00:24:11,000 --> 00:24:15,200
Lemon squeezy and then you squeeze it into the tea.

476
00:24:15,200 --> 00:24:18,500
Obviously, you don't do that if you drink tea with milk because it

477
00:24:18,500 --> 00:24:19,200
will curdle.

478
00:24:20,500 --> 00:24:23,000
So you know, I mean why would you do that?

479
00:24:23,000 --> 00:24:23,800
That's just dumb.

480
00:24:25,500 --> 00:24:25,700
You know.

481
00:24:25,700 --> 00:24:27,600
It's like haven't you ever drink tea before?

482
00:24:27,600 --> 00:24:28,600
I don't even know what to say.

483
00:24:28,800 --> 00:24:29,800
But point being

484
00:24:31,800 --> 00:24:35,700
The only thing we have left then is the next and the next is part of

485
00:24:35,900 --> 00:24:38,400
the sort of chaining thing here that we're doing where we want the

486
00:24:38,400 --> 00:24:42,600
debug elements to just sort of be able to stack up events inside them.

487
00:24:42,900 --> 00:24:47,200
And so to do that, what we would say is alright the next element is

488
00:24:47,200 --> 00:24:50,100
always going to be zero because we're training this onto the end,

489
00:24:50,200 --> 00:24:55,200
which means that it's really just the element itself pointers that

490
00:24:55,200 --> 00:25:00,400
have to get updated the oldest event and the most recent event

491
00:25:00,500 --> 00:25:04,900
Oops, would become distorted vent in the case.

492
00:25:04,900 --> 00:25:07,000
Where, where are they?

493
00:25:09,500 --> 00:25:11,900
Sorry where there are zero.

494
00:25:11,900 --> 00:25:12,400
Right.

495
00:25:12,400 --> 00:25:17,800
So if we don't have anything on the on this debug element yet, which

496
00:25:17,800 --> 00:25:20,200
means that, you know, both of these things are 0, then we're just

497
00:25:20,200 --> 00:25:24,500
going to go ahead and put the stored event as the only thing in the

498
00:25:24,500 --> 00:25:25,000
list, right?

499
00:25:25,000 --> 00:25:26,900
It's both the oldest and the most recent.

500
00:25:26,900 --> 00:25:28,700
So it's the entirety of the list, right?

501
00:25:28,800 --> 00:25:33,500
But if there was one then whatever, the that most recent one is its

502
00:25:33,500 --> 00:25:35,600
next pointer is now going to point to us.

503
00:25:36,100 --> 00:25:39,000
And then the most recent frame is going to

504
00:25:39,200 --> 00:25:40,400
It's for event, right?

505
00:25:40,700 --> 00:25:44,000
And I always liked this kind of weird, like, cheesy way of doing this,

506
00:25:44,000 --> 00:25:47,800
which is that, it's kind of fun, right?

507
00:25:48,600 --> 00:25:49,100
I don't know.

508
00:25:49,100 --> 00:25:50,700
You know if you guys are down with that

509
00:25:51,400 --> 00:25:54,300
maybe you are, maybe you aren't

510
00:25:55,600 --> 00:25:56,800
It's not really my problem.

511
00:25:56,900 --> 00:26:01,000
At the end of the day, it's like everyone should eat lunch where they

512
00:26:01,000 --> 00:26:04,300
want and everyone should have the lunch that they want, you know,

513
00:26:04,300 --> 00:26:07,900
don't let other people tell you how to eat your lunch because that's

514
00:26:08,400 --> 00:26:12,000
sort of that's lunch despotism, and it's not, okay.

515
00:26:12,700 --> 00:26:15,800
So let's push forwards a little bit here.

516
00:26:17,300 --> 00:26:21,500
Really know if we care about this stuff just quite yet.

517
00:26:21,500 --> 00:26:23,600
I'm going to take a look at some of these other things first.

518
00:26:24,000 --> 00:26:27,400
So all right I'm pretty sure we don't really want the region stuff to

519
00:26:27,400 --> 00:26:28,800
be happening at the moment.

520
00:26:29,000 --> 00:26:36,700
So I'm going to take a quick sort of Gander at this and say that that

521
00:26:36,700 --> 00:26:43,200
soups that we don't want those for the time being.

522
00:26:43,800 --> 00:26:46,400
I'm also going to say that we don't want that.

523
00:26:47,700 --> 00:26:50,200
And that's how that goes sometimes.

524
00:26:53,400 --> 00:26:56,100
Excuse me for Mark debug value.

525
00:26:56,100 --> 00:26:59,900
In this case, again with the, with the add variable to group in this

526
00:27:00,000 --> 00:27:04,000
So I think we still want this to be essentially doing what this is

527
00:27:04,000 --> 00:27:04,800
doing here.

528
00:27:05,100 --> 00:27:08,800
And so, what I want to do probably is make it so that there's the

529
00:27:08,800 --> 00:27:13,600
concept, the store event thing we could probably do as a sort of a

530
00:27:15,500 --> 00:27:19,200
sort of a utility function so I could I could maybe even do it just

531
00:27:19,200 --> 00:27:20,700
like this, right?

532
00:27:21,600 --> 00:27:25,400
So I want to do a store event and and that'll like, do this whole

533
00:27:25,400 --> 00:27:28,700
thing for me and that way I can call it in more than one place if I

534
00:27:28,700 --> 00:27:29,300
want to.

535
00:27:30,100 --> 00:27:31,200
And go from there.

536
00:27:31,500 --> 00:27:33,500
Okay, so here we go.

537
00:27:35,200 --> 00:27:36,400
Internal void.

538
00:27:39,900 --> 00:27:45,100
Here is my store event and I guess that's not so void after all.

539
00:27:45,900 --> 00:27:50,700
So there's my store event, there's debug State, there's the debug

540
00:27:50,700 --> 00:27:53,100
element, there's debug event.

541
00:27:54,900 --> 00:27:58,800
And now, all I have to do is just make this thing.

542
00:27:59,900 --> 00:28:01,500
Well, I guess I really don't have to do much.

543
00:28:01,900 --> 00:28:02,500
I think about it.

544
00:28:02,500 --> 00:28:04,200
I don't know why add very little group is still there.

545
00:28:05,600 --> 00:28:08,400
I think that's pretty much all I would need.

546
00:28:08,600 --> 00:28:13,100
I just now need a way to get the actual stored event, right?

547
00:28:18,900 --> 00:28:21,500
And this should be stored event by the way.

548
00:28:28,900 --> 00:28:29,500
Right.

549
00:28:29,500 --> 00:28:32,700
And so what I need to do here is just have a way of getting this and

550
00:28:32,700 --> 00:28:35,200
that's the thing that we don't know at the moment, so that's fine.

551
00:28:36,200 --> 00:28:36,900
But

552
00:28:38,900 --> 00:28:43,600
Now, what we can do and what is, what are you complainant?

553
00:28:43,600 --> 00:28:46,600
Lets you stream is not a member of debug element.

554
00:28:46,800 --> 00:28:47,800
Is that really true?

555
00:28:48,600 --> 00:28:49,800
Are you, are you?

556
00:28:49,800 --> 00:28:50,800
Are you just joshing?

557
00:28:50,800 --> 00:28:52,200
I just messing with me, man.

558
00:28:52,400 --> 00:28:53,500
Are you messing with me?

559
00:28:54,400 --> 00:28:55,900
Where is my debug element?

560
00:28:57,500 --> 00:28:58,800
Oldest event.

561
00:28:59,100 --> 00:29:00,800
Oh, most recent frame.

562
00:29:00,900 --> 00:29:02,500
It's not most recent frame.

563
00:29:02,700 --> 00:29:03,900
Most recent event.

564
00:29:04,300 --> 00:29:06,400
Duh, there we go.

565
00:29:08,500 --> 00:29:09,200
So let's see here.

566
00:29:09,300 --> 00:29:14,800
Okay, so we've got ad region, this is still doing that, that region

567
00:29:14,800 --> 00:29:15,100
stuff.

568
00:29:15,100 --> 00:29:18,900
So we're going to take that out for the moment.

569
00:29:19,400 --> 00:29:20,000
There we go.

570
00:29:21,400 --> 00:29:24,000
Oops, got a little bit zealous with my hot keys.

571
00:29:24,000 --> 00:29:28,300
There ended up creating two versions of the compiled.

572
00:29:28,400 --> 00:29:30,600
Always good to see them in mirrored.

573
00:29:31,300 --> 00:29:33,500
So, let's see here, create variable group.

574
00:29:33,500 --> 00:29:36,300
Again, this is not particularly relevant.

575
00:29:36,300 --> 00:29:41,600
So I think at this point, I don't actually care link children to

576
00:29:41,600 --> 00:29:42,300
behave like group.

577
00:29:42,300 --> 00:29:47,000
I don't care about this at all, at the moment.

578
00:29:47,200 --> 00:29:49,700
Matching Block events match.

579
00:29:49,900 --> 00:29:50,400
Do you like it?

580
00:29:50,400 --> 00:29:50,700
Open?

581
00:29:50,700 --> 00:29:51,000
Debug.

582
00:29:51,200 --> 00:29:52,300
That's all fine.

583
00:29:54,700 --> 00:29:57,200
And then here is our store event.

584
00:30:00,000 --> 00:30:06,600
Like that takes care of that and here up at the.

585
00:30:06,600 --> 00:30:07,200
Where are you?

586
00:30:08,000 --> 00:30:09,100
Yes, Mark Cuban value.

587
00:30:09,100 --> 00:30:10,500
That also stores the event.

588
00:30:11,100 --> 00:30:12,700
Now I suspect

589
00:30:13,800 --> 00:30:18,800
I suspect that we probably will be able to clean up a bunch of this

590
00:30:18,800 --> 00:30:19,500
code as well.

591
00:30:19,500 --> 00:30:22,500
After things start to collapse down a little bit, at least that's my

592
00:30:22,500 --> 00:30:25,600
assumption, but we'll leave that for later.

593
00:30:26,000 --> 00:30:26,300
Okay.

594
00:30:26,300 --> 00:30:29,200
So we don't care about the values group anymore.

595
00:30:30,200 --> 00:30:35,600
We don't care about the ad tree anymore and we don't care about that.

596
00:30:35,600 --> 00:30:37,900
Okay, so we're back to just now.

597
00:30:37,900 --> 00:30:40,500
We're almost to the point where we can start to pull things back

598
00:30:40,500 --> 00:30:41,400
together again.

599
00:30:41,900 --> 00:30:43,100
Like I said this push sighs.

600
00:30:43,100 --> 00:30:43,400
It's yellow.

601
00:30:43,600 --> 00:30:45,800
Is something that was just a very bad idea.

602
00:30:46,500 --> 00:30:48,000
That was my bad.

603
00:30:48,000 --> 00:30:48,700
I apologize.

604
00:30:51,500 --> 00:30:55,400
I hate it made a faux pas there.

605
00:30:55,400 --> 00:30:58,500
It was a paw that was made of Pho.

606
00:31:00,600 --> 00:31:05,300
Kind of like, you know, the programming equivalent of when you you

607
00:31:05,300 --> 00:31:10,300
know you go to lunch and your sit at the wrong seat and everyone's

608
00:31:10,300 --> 00:31:13,300
embarrassed and it's just kind of this, you know this horrible thing.

609
00:31:13,300 --> 00:31:17,100
You just kind of run screaming and crying from the restaurant and it's

610
00:31:17,100 --> 00:31:18,100
scarred you for life.

611
00:31:18,800 --> 00:31:22,400
So anyway, let's let's just pretend this this stuff never happened

612
00:31:22,800 --> 00:31:27,300
because this was just like bad and and we don't want it to happen.

613
00:31:27,400 --> 00:31:29,400
So really, I'm just going to I'm just going to vaporize

614
00:31:29,500 --> 00:31:30,600
That it's gone.

615
00:31:30,600 --> 00:31:33,700
Like we're going to pretend that never happened and I mean that like

616
00:31:33,700 --> 00:31:36,400
really literally, like we're just going to pretend it never happened

617
00:31:36,400 --> 00:31:36,800
ever.

618
00:31:37,700 --> 00:31:43,100
And then we're just going to say that these are all going to be back

619
00:31:43,100 --> 00:31:44,900
to the way they were, right?

620
00:31:45,200 --> 00:31:47,900
We're like I said, it was just a, it was just a mistake.

621
00:31:48,300 --> 00:31:49,300
I admit that.

622
00:31:49,700 --> 00:31:52,900
And we're just gonna, you know, like don't harp on it, man.

623
00:31:53,300 --> 00:31:53,500
Right?

624
00:31:53,500 --> 00:31:55,100
I already said it was a mistake.

625
00:31:55,400 --> 00:31:56,300
Why you gotta why?

626
00:31:56,300 --> 00:31:59,300
You got to keep bringing it up, you know, let's just move past it.

627
00:31:59,500 --> 00:32:01,600
We need to move past it, you know.

628
00:32:01,600 --> 00:32:03,700
Don't don't let your whole life.

629
00:32:03,700 --> 00:32:05,300
We defined by the one-time.

630
00:32:05,400 --> 00:32:06,000
Bad lunch.

631
00:32:06,000 --> 00:32:07,000
You ate, you know.

632
00:32:09,200 --> 00:32:10,500
So anyway, let's

633
00:32:12,300 --> 00:32:16,100
Let's go in here, open debug block.

634
00:32:16,700 --> 00:32:20,700
Yes, that's gotta be this way again, just, this is just putting it

635
00:32:20,700 --> 00:32:24,800
back to the way that it was write.

636
00:32:25,100 --> 00:32:26,900
Debug push structs.

637
00:32:29,900 --> 00:32:30,300
Oops.

638
00:32:32,900 --> 00:32:33,300
Okay.

639
00:32:33,300 --> 00:32:36,400
So now in theory, we're totally set.

640
00:32:36,400 --> 00:32:40,000
Now for what we wanted except for the one thing, which is the stored

641
00:32:40,000 --> 00:32:40,800
event situation.

642
00:32:40,800 --> 00:32:42,100
And so now we have to do

643
00:32:47,100 --> 00:32:53,600
Is we have to just have a way of again, doing what we wanted to do

644
00:32:53,600 --> 00:32:55,100
with the debug Arena stuff.

645
00:32:55,200 --> 00:32:56,300
We wanted to do.

646
00:32:58,500 --> 00:32:59,600
Frames and the stored.

647
00:33:00,500 --> 00:33:02,300
We wanted those to work.

648
00:33:02,900 --> 00:33:07,100
So that as frames come in and sort events come in, we will free frames

649
00:33:07,100 --> 00:33:11,600
as necessary to make sure that we can store the new events that we

650
00:33:11,600 --> 00:33:13,100
get, right?

651
00:33:13,800 --> 00:33:16,600
And so, essentially we just have two things we've got new frame and

652
00:33:16,600 --> 00:33:21,000
we've got store event, and those two things both want to like, get a

653
00:33:21,000 --> 00:33:22,300
new piece of memory, right?

654
00:33:22,300 --> 00:33:24,500
They want to get a new chunk.

655
00:33:25,700 --> 00:33:32,900
And so what happens here is we want to, we want to have some way of

656
00:33:32,900 --> 00:33:36,600
saying, if I can't get the memory that I need free of frames so that I

657
00:33:36,600 --> 00:33:38,400
will be able to get the memory that I need.

658
00:33:38,900 --> 00:33:42,700
And so again it's the same code that we wrote before, I just it's not

659
00:33:42,700 --> 00:33:44,000
part of the Arena now.

660
00:33:44,000 --> 00:33:46,000
It doesn't need to talk to the arena at all.

661
00:33:46,600 --> 00:33:49,000
It just has to do something like, okay.

662
00:33:50,000 --> 00:33:52,200
And in fact, this stuff looks like it can be simplified.

663
00:33:52,200 --> 00:33:55,900
Now that to do looks like it can be fine.

664
00:33:55,900 --> 00:33:56,700
So let's see.

665
00:33:56,700 --> 00:33:58,000
That's just this, right?

666
00:33:59,000 --> 00:33:59,400
Yeah.

667
00:34:00,400 --> 00:34:01,400
So that's all good.

668
00:34:04,600 --> 00:34:07,600
yeah, I think so, although I would note

669
00:34:08,699 --> 00:34:14,699
That this is this should just be using our should be using our macros,

670
00:34:14,699 --> 00:34:15,199
right?

671
00:34:15,400 --> 00:34:19,000
This should use free list, deallocate or free lift allocate.

672
00:34:19,000 --> 00:34:19,500
Right?

673
00:34:20,000 --> 00:34:20,800
I would think.

674
00:34:22,199 --> 00:34:23,000
Yeah.

675
00:34:23,600 --> 00:34:26,400
So like this should just be this should just be free of us to

676
00:34:26,400 --> 00:34:29,400
allocate, really sure.

677
00:34:30,100 --> 00:34:32,800
Although I guess neither of these things could really use that now

678
00:34:32,800 --> 00:34:35,600
because these are going to have to sort of do the recycling bit,

679
00:34:36,100 --> 00:34:36,600
right?

680
00:34:38,300 --> 00:34:38,699
Okay.

681
00:34:39,199 --> 00:34:40,699
Alright, so let's write this then

682
00:34:42,400 --> 00:34:43,699
I'm going to get rid of this thing.

683
00:34:45,900 --> 00:34:47,699
And I'm going to say, okay.

684
00:34:49,699 --> 00:34:54,600
This is essentially what we have and I don't know that I need 20

685
00:34:54,600 --> 00:34:56,000
structure because we initialize everything.

686
00:34:56,000 --> 00:34:59,700
So I think this will just look like that and we'll be good to go.

687
00:35:01,400 --> 00:35:01,900
Yeah.

688
00:35:02,900 --> 00:35:07,900
So what I need to do now is I need to be able to get these guys off of

689
00:35:07,900 --> 00:35:09,700
the free list, right?

690
00:35:09,800 --> 00:35:12,500
So if you remember, we have a source for these, right?

691
00:35:12,500 --> 00:35:17,900
We have a source, not there.

692
00:35:21,500 --> 00:35:25,000
we have a source for these guys, which is like these,

693
00:35:27,600 --> 00:35:32,400
This is like our per frame storage.

694
00:35:37,500 --> 00:35:40,900
So, these guys are the two things that come in every frame.

695
00:35:40,900 --> 00:35:43,300
We get frame pointers, right?

696
00:35:43,300 --> 00:35:47,700
And then we get stored events that kind of, you know, accumulate.

697
00:35:48,400 --> 00:35:52,000
And so when we go to allocate either of these, obviously, the first

698
00:35:52,000 --> 00:35:54,700
thing we're going to do is say, okay, just assume.

699
00:35:56,500 --> 00:35:59,800
First of all, that we can get it from.

700
00:36:00,400 --> 00:36:02,300
The actual store there.

701
00:36:03,200 --> 00:36:06,000
And so then we have two cases if we actually got it.

702
00:36:06,800 --> 00:36:09,700
Then we just say that whatever the first free frame is

703
00:36:12,100 --> 00:36:14,900
is going to be equal to the next one.

704
00:36:16,500 --> 00:36:16,800
Right.

705
00:36:16,800 --> 00:36:21,500
So we're popping something off the free list there and off we go, but

706
00:36:21,500 --> 00:36:26,700
if we can't and in fact, I think this, we might, we might want to just

707
00:36:26,700 --> 00:36:30,900
say that this is effectively a while loop, right?

708
00:36:31,300 --> 00:36:34,300
This is essentially like while not results.

709
00:36:39,700 --> 00:36:42,800
we would say, okay, the debug state

710
00:36:45,300 --> 00:36:50,500
We try to see if we can get the first free frame if we can then then

711
00:36:50,500 --> 00:36:51,400
we're good to go.

712
00:36:51,900 --> 00:36:54,800
Otherwise we will try to do a free frame.

713
00:36:59,200 --> 00:37:05,000
And in this case again the frame that we are freeing we would need to.

714
00:37:05,600 --> 00:37:06,000
Yeah.

715
00:37:06,000 --> 00:37:09,100
It looks like we don't actually really pop that off either.

716
00:37:09,700 --> 00:37:11,900
So we want to do free.

717
00:37:12,200 --> 00:37:13,100
Oldest frame.

718
00:37:23,800 --> 00:37:24,600
And so free.

719
00:37:24,600 --> 00:37:26,600
All this Frame is pretty basic.

720
00:37:26,700 --> 00:37:27,800
All free old is frame.

721
00:37:27,800 --> 00:37:29,000
Does is go.

722
00:37:29,700 --> 00:37:31,400
We have the oldest Frank here.

723
00:37:31,700 --> 00:37:35,800
We say if there is such a thing as the oldest frame, then the oldest

724
00:37:35,800 --> 00:37:39,100
frame is going to be the one that gets freed.

725
00:37:40,400 --> 00:37:40,900
Frame.

726
00:37:43,200 --> 00:37:49,500
And we might say here that we might even assert this because in

727
00:37:49,500 --> 00:37:53,400
general, if we got into a situation where there was no more frames to

728
00:37:53,400 --> 00:37:56,700
free, we shouldn't be calling for you all this Frame.

729
00:37:57,200 --> 00:37:57,600
I don't know.

730
00:37:57,600 --> 00:37:58,900
Well, I guess you don't really need to start.

731
00:37:58,900 --> 00:37:59,400
I don't know.

732
00:38:00,500 --> 00:38:01,000
We'll see.

733
00:38:02,400 --> 00:38:03,900
So anyway, hmm.

734
00:38:06,100 --> 00:38:11,100
You know maybe we would say here we'd say you know assert that there

735
00:38:11,100 --> 00:38:12,800
is a framed for your something like that.

736
00:38:13,300 --> 00:38:15,100
Anyway you go free, all this Frame.

737
00:38:15,300 --> 00:38:19,000
We say okay the oldest frame, if there is one we grab it.

738
00:38:19,000 --> 00:38:20,900
We do a free frame of it.

739
00:38:21,400 --> 00:38:24,300
But first we also Advanced the pointer forward.

740
00:38:24,300 --> 00:38:27,900
So we say, you know, the debug all this Frame.

741
00:38:30,000 --> 00:38:32,200
Equals frame next.

742
00:38:33,000 --> 00:38:37,600
And if debug State most recent frame,

743
00:38:40,900 --> 00:38:43,700
Equals the frame, we were on the debug State.

744
00:38:43,700 --> 00:38:45,900
Most recent frame equals zero.

745
00:38:47,000 --> 00:38:47,500
Right.

746
00:38:51,800 --> 00:38:52,600
So that's it.

747
00:38:52,900 --> 00:38:56,400
That's just all we need to do to free the oldest frame and so when we

748
00:38:56,400 --> 00:38:58,400
get a new frame, we're just going to do something like this where we

749
00:38:58,400 --> 00:38:59,600
try to get it.

750
00:39:00,000 --> 00:39:01,100
Can't we free it?

751
00:39:01,500 --> 00:39:05,700
And we keep going right store event will do exactly the same thing

752
00:39:06,000 --> 00:39:08,600
like so all that's going to happen.

753
00:39:08,600 --> 00:39:11,500
Here is this going to be scored event instead?

754
00:39:12,800 --> 00:39:14,600
And I guess I could change that to result.

755
00:39:20,000 --> 00:39:20,700
and so,

756
00:39:23,600 --> 00:39:26,500
Again, the only difference here is instead of first free frame, its

757
00:39:26,500 --> 00:39:29,900
first restored event, right?

758
00:39:30,700 --> 00:39:35,700
And that's really all there is not really much else to it.

759
00:39:36,400 --> 00:39:40,100
So I think which is compiled that free frame doesn't take.

760
00:39:40,100 --> 00:39:40,700
That's true.

761
00:39:40,700 --> 00:39:41,400
It doesn't.

762
00:39:42,000 --> 00:39:45,600
And let's just take a look and make sure all the rest of our stuff is

763
00:39:45,600 --> 00:39:48,400
doing something relatively reasonable here.

764
00:39:53,900 --> 00:39:54,400
Okay.

765
00:39:56,500 --> 00:39:58,900
And the other thing I want to do is make sure that the free frame does

766
00:39:58,900 --> 00:39:59,700
something recently.

767
00:39:59,700 --> 00:40:00,500
Yes, it does.

768
00:40:00,800 --> 00:40:01,200
Okay.

769
00:40:02,200 --> 00:40:03,800
So I think we're in good shape there.

770
00:40:03,800 --> 00:40:06,200
And so now we just need to kind of go through and do a little bit of

771
00:40:06,200 --> 00:40:06,600
cleanup.

772
00:40:06,600 --> 00:40:13,600
Here is me and get everything sort of into a happy State.

773
00:40:14,200 --> 00:40:15,900
All right, so, let's see where our bugs are first.

774
00:40:15,900 --> 00:40:18,300
I probably can step through this because we wrote a lot of code, we

775
00:40:18,300 --> 00:40:21,200
don't really know what it's doing or rather, we think we know what

776
00:40:21,200 --> 00:40:22,700
it's doing, but we don't actually know

777
00:40:23,700 --> 00:40:24,700
But let's double-check.

778
00:40:25,000 --> 00:40:27,800
So okay.

779
00:40:27,800 --> 00:40:28,800
Oh, right.

780
00:40:31,400 --> 00:40:33,700
That code was a little short-sighted now that I think about it.

781
00:40:35,000 --> 00:40:41,800
This part where it has two free of frame is actually only necessary if

782
00:40:41,800 --> 00:40:44,000
we're out of memory, right?

783
00:40:44,200 --> 00:40:46,800
So if we have some memory, we could use.

784
00:40:47,500 --> 00:40:49,900
Then we wouldn't actually need to do that.

785
00:40:50,300 --> 00:40:55,700
So what we want to do here is actually this is the part that would do

786
00:40:55,800 --> 00:41:00,700
you know do we have enough room to store this thing and then if not do

787
00:41:00,700 --> 00:41:01,100
it

788
00:41:01,700 --> 00:41:07,800
okay, so that would do essentially if Arena has room for

789
00:41:11,000 --> 00:41:13,700
Then we allocate otherwise we don't write.

790
00:41:14,700 --> 00:41:18,600
And I don't like, you know, I look at this and I again this looks like

791
00:41:18,600 --> 00:41:23,700
something that I would like to be able to abstract as well, which I

792
00:41:23,700 --> 00:41:24,400
probably could.

793
00:41:24,400 --> 00:41:27,100
If I wanted to, I could probably make this an arena sort of thing that

794
00:41:27,100 --> 00:41:27,800
it can do.

795
00:41:28,800 --> 00:41:31,600
And I don't know if I should, maybe I should actually

796
00:41:34,700 --> 00:41:35,400
I don't know though.

797
00:41:35,700 --> 00:41:36,600
We'll find out.

798
00:41:37,600 --> 00:41:41,600
So anyway inside this guy where we've got the new frame and we do

799
00:41:41,600 --> 00:41:45,100
Arena has room for we're just saying, like, Okay, if we have room for

800
00:41:45,100 --> 00:41:49,000
another debug frame in the debug State, and this is going to be the

801
00:41:49,000 --> 00:41:50,400
like per frame Arena.

802
00:41:53,900 --> 00:41:57,100
If our Arena has room for one of these things, then we will simply

803
00:41:57,100 --> 00:41:57,800
allocate it.

804
00:42:03,700 --> 00:42:08,400
Otherwise we won't write and so that's again.

805
00:42:12,900 --> 00:42:14,300
Doing the exact same thing here.

806
00:42:18,700 --> 00:42:22,400
And so that basically says well, however, much memory we're going to

807
00:42:22,400 --> 00:42:26,700
set aside for storing per Frame data and just letting it pile up,

808
00:42:26,900 --> 00:42:27,500
right?

809
00:42:28,200 --> 00:42:33,300
We will use up to that amount and if we run out, we will then just

810
00:42:33,300 --> 00:42:34,300
start freeing stuff.

811
00:42:34,600 --> 00:42:35,100
Right.

812
00:42:35,900 --> 00:42:39,400
And that'll be that so pretty straightforward, right?

813
00:42:40,600 --> 00:42:44,800
And if I go down to where we actually set up our debug Arena,

814
00:42:48,200 --> 00:42:49,900
Which is somewhere in here.

815
00:42:49,900 --> 00:42:51,300
There it is initialize Arena.

816
00:42:52,200 --> 00:42:56,000
What I can do is do a submarine out of that guy which for however much

817
00:42:56,000 --> 00:42:58,400
we want to handle, right?

818
00:42:58,800 --> 00:43:00,100
So we could just say, okay?

819
00:43:00,100 --> 00:43:04,800
We're going to do a sub arena there and the sub arena for this guy.

820
00:43:10,400 --> 00:43:10,800
Rena.

821
00:43:11,900 --> 00:43:15,300
The Submariner for this guy is going to be our per frame Arena, the

822
00:43:15,300 --> 00:43:17,200
arena that it comes from is going to be this one.

823
00:43:18,600 --> 00:43:22,300
The memory index of the size is going to be.

824
00:43:22,300 --> 00:43:26,100
I don't really know how much we want it to be.

825
00:43:27,100 --> 00:43:32,000
I guess we could say that there is a total size memory size.

826
00:43:39,900 --> 00:43:47,200
And this would be some fraction of the total memory size probably

827
00:43:47,200 --> 00:43:50,200
three-quarters of it or I don't even know how much you want to donate

828
00:43:50,200 --> 00:43:51,400
dedicate to it, right?

829
00:43:51,400 --> 00:43:52,300
Something like this.

830
00:43:54,100 --> 00:43:57,300
And that will just write, that will just allow it to sort of work in

831
00:43:57,300 --> 00:43:57,600
there.

832
00:43:57,900 --> 00:44:00,500
Now, that means that, in addition to debug Arena, we do need a

833
00:44:00,500 --> 00:44:01,700
perfumery name here.

834
00:44:05,400 --> 00:44:06,100
And off we go.

835
00:44:08,000 --> 00:44:08,900
so,

836
00:44:10,900 --> 00:44:12,800
Arena has room for.

837
00:44:12,800 --> 00:44:18,900
I don't actually remember how we implemented that guy.

838
00:44:19,500 --> 00:44:22,600
I assume we just passed the size of, yes, we do.

839
00:44:23,300 --> 00:44:26,300
Oops, has room for

840
00:44:27,300 --> 00:44:28,300
Yes, eyes in it.

841
00:44:28,700 --> 00:44:31,200
So that's just size of keep up frame.

842
00:44:33,400 --> 00:44:33,700
Oops.

843
00:44:37,200 --> 00:44:39,200
And debug stored events.

844
00:44:39,200 --> 00:44:40,200
Same thing.

845
00:44:46,100 --> 00:44:48,800
Okay, and so let's see.

846
00:44:50,200 --> 00:44:51,300
Allocate rent.

847
00:44:51,300 --> 00:44:52,200
Wait what

848
00:44:56,800 --> 00:44:57,400
oh,

849
00:44:58,400 --> 00:44:59,800
I guess I didn't leave enough room.

850
00:45:00,000 --> 00:45:02,100
I don't actually remember to be honest with you.

851
00:45:02,300 --> 00:45:05,000
How much saw how much room is thing?

852
00:45:05,000 --> 00:45:07,500
Actually has 64?

853
00:45:08,900 --> 00:45:13,100
So yeah so I guess we would need maybe to take maybe only half.

854
00:45:13,100 --> 00:45:13,600
Let's say

855
00:45:15,400 --> 00:45:16,300
And leave the rest.

856
00:45:23,000 --> 00:45:25,900
we probably should allocate a lot more, debug memory than that, but

857
00:45:25,900 --> 00:45:26,300
you know,

858
00:45:29,400 --> 00:45:30,400
You can change that.

859
00:45:30,900 --> 00:45:31,800
Change that later.

860
00:45:34,200 --> 00:45:39,200
All right, so in theory, we are now actually.

861
00:45:39,700 --> 00:45:42,200
Oh, and you can notice our debug UI stuff is still working, which is

862
00:45:42,200 --> 00:45:42,800
kind of nice.

863
00:45:43,700 --> 00:45:50,900
So, in theory, we are now storing all of our debug data and restoring

864
00:45:50,900 --> 00:45:52,900
it all based on the location that it came from.

865
00:45:53,400 --> 00:45:57,900
So now, all we actually need to do is go through and start to actually

866
00:45:57,900 --> 00:46:03,800
use that now to sort of populate our hierarchical views.

867
00:46:04,000 --> 00:46:08,200
Then we should be back to roughly where we want to be, but without any

868
00:46:08,200 --> 00:46:11,900
of the limitations that we had before, in theory, at least that's the

869
00:46:11,900 --> 00:46:12,200
goal.

870
00:46:13,400 --> 00:46:18,600
Now unfortunately how much time we got left, that's not going to tell

871
00:46:18,600 --> 00:46:18,900
me.

872
00:46:19,300 --> 00:46:23,900
Yes, we got 13 minutes so I'm trying to think of exactly what part of

873
00:46:23,900 --> 00:46:25,100
this I want to start with.

874
00:46:25,200 --> 00:46:28,800
First of all I would like to know why our frame?

875
00:46:29,100 --> 00:46:30,900
Let's just maybe do this.

876
00:46:31,100 --> 00:46:33,000
Why is our last frame time wrong?

877
00:46:34,100 --> 00:46:36,900
Right, that's weird when you say.

878
00:46:38,800 --> 00:46:41,800
Most recent frame wall seconds elapsed.

879
00:46:42,000 --> 00:46:44,500
So where do we set the wall seconds elapsed?

880
00:46:52,100 --> 00:46:56,400
So it's every time we do a frame marker, it's whatever the value R32

881
00:46:56,400 --> 00:46:56,800
is.

882
00:46:57,400 --> 00:46:58,700
So let's just see

883
00:47:01,900 --> 00:47:03,100
What's actually happening there.

884
00:47:04,000 --> 00:47:05,400
So in handmade,

885
00:47:06,400 --> 00:47:07,500
Debug interface.

886
00:47:09,000 --> 00:47:12,900
So we have frame marker, s elapsed in it.

887
00:47:12,900 --> 00:47:16,500
So it looks like it's it mean that looks like it is correctly writing

888
00:47:16,500 --> 00:47:17,200
it down.

889
00:47:17,900 --> 00:47:22,900
So I'm wondering why we're never getting the right value there.

890
00:47:22,900 --> 00:47:27,300
Now, one thing, I guess, one thing that I haven't really thought

891
00:47:27,300 --> 00:47:30,900
through yet is when we're looking at the most recent frame, I'm not

892
00:47:30,900 --> 00:47:35,100
sure exactly when things get put on the most recent frame list.

893
00:47:35,800 --> 00:47:36,900
So let's see here.

894
00:47:38,100 --> 00:47:43,000
Frame marker, a certification frame, put the stuff on there.

895
00:47:43,200 --> 00:47:47,500
Finish the collation frame out re the frame of her paws for not.

896
00:47:47,500 --> 00:47:52,500
Paused put it on the list, so it seems to me like that should be

897
00:47:52,500 --> 00:47:52,900
working.

898
00:47:52,900 --> 00:47:57,300
So, I'm going to go ahead and take a look and see why we're not

899
00:47:58,000 --> 00:47:58,700
getting that, right?

900
00:47:58,700 --> 00:47:59,800
I'm going to go into

901
00:48:00,200 --> 00:48:04,000
That frame marker place and I'm going to see what's going on there,

902
00:48:04,300 --> 00:48:04,800
right?

903
00:48:06,800 --> 00:48:08,800
So, let's take a look right marker.

904
00:48:12,700 --> 00:48:17,100
All right, so a program is running and now we've hit a frame marker.

905
00:48:17,700 --> 00:48:19,900
Let's take a look at what's going on here.

906
00:48:19,900 --> 00:48:23,900
So we've got our Coalition frame, the frame that's currently being

907
00:48:23,900 --> 00:48:30,200
worked on which is right there and it's all seconds left are set to 0

908
00:48:30,200 --> 00:48:31,900
which is exactly what we would expect.

909
00:48:32,000 --> 00:48:34,900
We're going to come through here and set our

910
00:48:38,200 --> 00:48:40,400
That's that looks like the right value.

911
00:48:41,500 --> 00:48:45,400
And then we add it to the list.

912
00:48:45,800 --> 00:48:51,400
So the most recent frame wall seconds, elapsed is wrong.

913
00:48:53,100 --> 00:48:54,000
so,

914
00:49:00,300 --> 00:49:01,700
this is wrong.

915
00:49:04,400 --> 00:49:05,800
This is totally wrong.

916
00:49:10,500 --> 00:49:11,500
That would explain it.

917
00:49:12,400 --> 00:49:13,800
That would explain it.

918
00:49:16,600 --> 00:49:17,600
So right here.

919
00:49:19,600 --> 00:49:23,100
This should also be setting the most recent frame, right?

920
00:49:24,100 --> 00:49:24,600
Wait.

921
00:49:25,600 --> 00:49:28,900
What did that say handmade debug to see if he changed on disk?

922
00:49:30,100 --> 00:49:31,000
Visual Studio.

923
00:49:31,000 --> 00:49:32,200
Did you change?

924
00:49:32,200 --> 00:49:33,800
Did you write my file?

925
00:49:35,300 --> 00:49:37,200
I know you did not write my file.

926
00:49:37,300 --> 00:49:38,700
You better not have written my file.

927
00:49:38,700 --> 00:49:39,900
Did you write my file?

928
00:49:43,100 --> 00:49:46,100
I hate the fact that this thing rights to files.

929
00:49:46,100 --> 00:49:49,600
I wish you could set it into a mode where it didn't touch your files,

930
00:49:49,600 --> 00:49:51,000
like debug only mode.

931
00:49:54,100 --> 00:49:55,300
Yes, I want to edit the buffer.

932
00:49:55,300 --> 00:49:56,000
Yes,

933
00:49:58,500 --> 00:49:59,800
Visual Studio.

934
00:50:02,300 --> 00:50:03,100
Visual Studio.

935
00:50:03,800 --> 00:50:04,300
Okay.

936
00:50:04,900 --> 00:50:05,400
So

937
00:50:07,700 --> 00:50:10,600
What I want to do here is set the most recent frame as well, that was

938
00:50:10,600 --> 00:50:13,600
the part that was not actually happening the way it was supposed to.

939
00:50:14,100 --> 00:50:18,300
So now in theory, oops, we should be back to having a correct frame

940
00:50:18,300 --> 00:50:18,700
time.

941
00:50:19,100 --> 00:50:20,000
And hey, there it is.

942
00:50:20,500 --> 00:50:22,700
So that's what I would have expected and that's nice.

943
00:50:22,700 --> 00:50:24,600
That means we're kind of getting our frames there.

944
00:50:25,100 --> 00:50:29,500
I also kind of interested at this point in doing a little bit of

945
00:50:29,600 --> 00:50:34,200
Statistics, the sort of a thing here I would like to know with are

946
00:50:34,200 --> 00:50:35,100
stored events.

947
00:50:35,300 --> 00:50:36,600
I'm kind of interested to know how many

948
00:50:36,800 --> 00:50:42,300
You have them, we have stored, and what's going on there.

949
00:50:42,500 --> 00:50:46,800
So, what I'm going to do is, I'm going to go here and, and basically,

950
00:50:47,900 --> 00:50:51,100
print out the size that's being used of that Arena.

951
00:50:51,300 --> 00:50:56,500
So, when we do last frame time, I all I want to do like a thing, which

952
00:50:56,800 --> 00:50:58,400
which also prints out.

953
00:51:00,600 --> 00:51:03,000
The per frame Arena used.

954
00:51:04,200 --> 00:51:07,400
And this is just like how much B you know.

955
00:51:07,400 --> 00:51:11,700
I just I just want to know like the basic byte count, right?

956
00:51:12,100 --> 00:51:18,100
Of maybe like KB let's say something like that that's getting used of

957
00:51:18,100 --> 00:51:19,300
that of that buffer.

958
00:51:19,800 --> 00:51:24,900
And so that's I don't actually remember if we put that in here like

959
00:51:25,700 --> 00:51:27,200
get Arena size remaining.

960
00:51:28,100 --> 00:51:31,000
I guess is the opposite of it so we could just print that out.

961
00:51:31,000 --> 00:51:31,500
That's fine.

962
00:51:31,500 --> 00:51:33,800
I don't really care so we could do it.

963
00:51:34,000 --> 00:51:36,300
going to size remaining and

964
00:51:38,900 --> 00:51:45,500
so I want to take that feedback State per frame Arena and I want to

965
00:51:45,800 --> 00:51:47,300
buy is the alignment

966
00:51:52,100 --> 00:51:52,900
Oh, I get it.

967
00:51:53,000 --> 00:51:57,500
It's how much would be left if we assumed an alignment of four so we

968
00:51:57,500 --> 00:51:59,400
actually want to assume an alignment of one.

969
00:51:59,400 --> 00:52:00,900
Just tell me the actual size.

970
00:52:01,200 --> 00:52:01,800
Basically it

971
00:52:03,300 --> 00:52:03,800
All right.

972
00:52:04,000 --> 00:52:08,100
Anyway so we want to ask how much there is left in this per frame

973
00:52:08,100 --> 00:52:13,000
Arena, let you know, space remaining or something like that, I don't

974
00:52:13,000 --> 00:52:13,300
know.

975
00:52:13,800 --> 00:52:16,200
And then we want to print that out and kilobytes.

976
00:52:16,200 --> 00:52:21,700
So we're just going to divide by 1024 so that we have the thing in KB

977
00:52:22,800 --> 00:52:24,800
and that's it.

978
00:52:25,300 --> 00:52:30,000
Actually, that's all I actually wanted to print out and so let's see

979
00:52:30,000 --> 00:52:30,700
what happens.

980
00:52:31,600 --> 00:52:34,100
Get her inside is remaining connector over and want to marry me.

981
00:52:34,100 --> 00:52:35,200
And that's a good point.

982
00:52:35,200 --> 00:52:36,600
I need to pass the address there.

983
00:52:38,100 --> 00:52:38,800
So, let's see.

984
00:52:40,400 --> 00:52:45,900
Okay, so that's not really going to test our memory thing.

985
00:52:45,900 --> 00:52:51,000
Anytime soon, as you can see, we are going to take forever to run out

986
00:52:51,000 --> 00:52:53,400
of memory for our events.

987
00:52:53,400 --> 00:52:55,800
Because right now, we're not pushing enough events through it, which

988
00:52:55,800 --> 00:53:00,200
is, so I guess not particularly surprising given the fact that we

989
00:53:00,200 --> 00:53:04,500
don't actually do anything except that one little test piece, I

990
00:53:04,500 --> 00:53:05,100
suppose.

991
00:53:06,400 --> 00:53:10,000
All right, so maybe that's not such a good idea.

992
00:53:10,200 --> 00:53:16,000
I could do to sort of accelerate that process obviously is when we do

993
00:53:16,000 --> 00:53:22,400
some Arena and and do this I could instead you know, just give it some

994
00:53:22,400 --> 00:53:25,300
laughably, small thing like

995
00:53:27,600 --> 00:53:36,700
You know, maybe like 32k or 128k of memory, something like that and so

996
00:53:36,700 --> 00:53:37,800
it would run out right away.

997
00:53:39,300 --> 00:53:45,200
Least that be the goal and so that's what we want to have happen,

998
00:53:45,200 --> 00:53:45,400
right?

999
00:53:45,400 --> 00:53:46,300
That's exactly what we wanted.

1000
00:53:46,300 --> 00:53:50,700
We wanted to go down and hit zero and now it's just like recycling

1001
00:53:51,000 --> 00:53:51,800
that memory.

1002
00:53:52,000 --> 00:53:54,200
So assuming that things are working properly in there.

1003
00:53:54,200 --> 00:53:55,400
That's exactly right.

1004
00:53:55,600 --> 00:53:58,500
And we're happy, at least I'm happy.

1005
00:53:58,700 --> 00:53:59,800
I'm going to go ahead and just

1006
00:54:00,000 --> 00:54:04,700
Through that just to make sure that it's still working properly and

1007
00:54:05,200 --> 00:54:06,100
let's see here.

1008
00:54:07,400 --> 00:54:08,600
Looks like that's the case.

1009
00:54:08,600 --> 00:54:12,300
Let's let's see if we ever hit this case.

1010
00:54:13,200 --> 00:54:13,900
We do

1011
00:54:15,100 --> 00:54:19,100
Yeah, so I mean we haven't really checked it very thoroughly, but it

1012
00:54:19,100 --> 00:54:21,400
does look like it's working the way we expect it to work.

1013
00:54:23,300 --> 00:54:26,100
And we could do something like this.

1014
00:54:40,800 --> 00:54:45,700
So I think we've got our cells in good shape now.

1015
00:54:46,000 --> 00:54:49,900
So I think I'm going to call it there and then the next thing because

1016
00:54:49,900 --> 00:54:53,900
the next thing we want to do is to then go like re-enable the UI stuff

1017
00:54:54,500 --> 00:54:57,800
and start playing around with the fact that now we have this sort of

1018
00:54:57,800 --> 00:54:58,700
centralized stuff.

1019
00:54:58,800 --> 00:55:02,200
So I kind of want to start smashing those things back together.

1020
00:55:02,400 --> 00:55:07,200
So that's pretty good and I think thats yeah that's I think that's a

1021
00:55:07,200 --> 00:55:07,500
good stuff.

1022
00:55:07,700 --> 00:55:08,000
Point.

1023
00:55:08,000 --> 00:55:09,200
I don't think we want to do anything else.

1024
00:55:09,200 --> 00:55:14,900
They're all right, so I think that's a pretty you don't.

1025
00:55:15,000 --> 00:55:17,700
One of the things I say a lot of times when we talk about programming

1026
00:55:17,700 --> 00:55:21,500
is it's just like you don't want to eat more lunch than you can

1027
00:55:21,500 --> 00:55:22,500
reasonably digest.

1028
00:55:22,500 --> 00:55:23,000
Right?

1029
00:55:23,000 --> 00:55:27,600
So, you know, a lot of times people go into something and their eyes

1030
00:55:27,600 --> 00:55:29,900
are too big for their stomach and they'll just wait over eat the

1031
00:55:29,900 --> 00:55:30,500
lunch.

1032
00:55:30,900 --> 00:55:34,000
And so what I'm trying to do here is just keep lunch to a reasonable

1033
00:55:34,000 --> 00:55:37,400
amount of food so that we don't get too fat.

1034
00:55:37,600 --> 00:55:40,600
But we do get enough food to to keep ourselves going good.

1035
00:55:40,600 --> 00:55:43,500
And so then we could also there's always again like I always say

1036
00:55:43,500 --> 00:55:47,200
there's always lunch tomorrow and so that's, you know, tomorrow's

1037
00:55:47,200 --> 00:55:51,600
lunch will be a you know, will be just as tasty as today's lunch and

1038
00:55:51,600 --> 00:55:54,700
you know we can we can eat some of those other foods that we didn't

1039
00:55:54,700 --> 00:55:56,500
eat today at that time.

1040
00:55:56,700 --> 00:55:59,500
So with that I'd like to go ahead and go to the Q&A.

1041
00:56:01,400 --> 00:56:04,000
Oops, if I type it correctly.

1042
00:56:04,000 --> 00:56:08,900
So if anyone has any questions about where we're at, please prefix

1043
00:56:08,900 --> 00:56:15,200
them with q: and ask me and and I will answer them.

1044
00:56:32,700 --> 00:56:35,700
Oo, when we come to do the AI system, do you think would be reasonable

1045
00:56:35,700 --> 00:56:38,300
to give the dudes, a gather lunch behavior?

1046
00:56:39,100 --> 00:56:42,500
Well, you know, if there's lunch, I don't know that the game has much.

1047
00:56:44,500 --> 00:56:46,700
Lunch Concepts in it.

1048
00:56:46,700 --> 00:56:52,800
But, you know, we could try insofar as what did you have for lunch?

1049
00:56:52,800 --> 00:56:56,800
I had campfire barbecue for lunch, which is the best barbecue in

1050
00:56:56,800 --> 00:56:57,400
Seattle.

1051
00:56:58,800 --> 00:56:59,800
It's very, very good.

1052
00:57:00,200 --> 00:57:04,500
It's only available on Thursdays and Fridays or if you're live in,

1053
00:57:04,500 --> 00:57:08,200
Georgetown on Saturdays but I don't so it's only on Thursdays and

1054
00:57:08,200 --> 00:57:10,200
Fridays and it's a fantastic fantastic.

1055
00:57:10,200 --> 00:57:10,800
Barbecue.

1056
00:57:10,800 --> 00:57:13,600
Anyone who's in Seattle is doing themselves a disservice.

1057
00:57:13,600 --> 00:57:18,600
If they do not go to campfire, Barbecue on Thursdays and Fridays.

1058
00:57:19,000 --> 00:57:20,300
So you should do that.

1059
00:57:24,700 --> 00:57:25,700
Doritos Ranger.

1060
00:57:25,700 --> 00:57:28,800
Imagine that you're young again and you're eating your lunch and you

1061
00:57:28,800 --> 00:57:32,700
can choose between a c and Java, like language in what you can work

1062
00:57:32,700 --> 00:57:34,600
with memory and much see like way.

1063
00:57:34,800 --> 00:57:38,100
But that language would say how you, how to implement, some ideas like

1064
00:57:38,100 --> 00:57:40,500
a python is about line offsets, which is not good.

1065
00:57:40,500 --> 00:57:42,600
I think, what would you choose then?

1066
00:57:42,600 --> 00:57:43,500
And why

1067
00:57:44,500 --> 00:57:49,200
I so don't understand that question at all.

1068
00:57:56,000 --> 00:58:00,700
Basically, I think C is a perfectly fine language, right up until the

1069
00:58:00,700 --> 00:58:02,100
part where you try to do.

1070
00:58:03,800 --> 00:58:08,900
More higher, more higher level organization and generation of code.

1071
00:58:09,200 --> 00:58:12,300
And so, see I think is good and I don't have a lot of complaints with.

1072
00:58:12,300 --> 00:58:17,100
See there's some minor things I would tweak but it's pretty good job

1073
00:58:17,100 --> 00:58:17,900
has just garbage.

1074
00:58:17,900 --> 00:58:19,300
I have no use for it whatsoever.

1075
00:58:20,100 --> 00:58:23,400
So I would say I pretty much always would pitch pixie and then I would

1076
00:58:23,400 --> 00:58:26,300
want you know, basically to add like the new features to it, that I

1077
00:58:26,300 --> 00:58:30,200
would want but but Java definitely, there's I don't feel like Java has

1078
00:58:30,200 --> 00:58:32,000
any redeeming social value whatsoever?

1079
00:58:32,000 --> 00:58:33,100
I don't, I don't

1080
00:58:34,200 --> 00:58:40,900
I don't think Java has a reason for existing it's it is not useful

1081
00:58:40,900 --> 00:58:41,400
thing.

1082
00:58:42,700 --> 00:58:46,400
Ever during hmh Khan, will there be an organized lunch at the

1083
00:58:46,400 --> 00:58:46,700
campfire?

1084
00:58:46,700 --> 00:58:47,200
Barbecue?

1085
00:58:47,600 --> 00:58:54,400
No, because handmade Khan is on Saturday and you cannot get campfire,

1086
00:58:54,400 --> 00:58:56,400
Barbecue downtown on Saturday.

1087
00:58:58,700 --> 00:59:01,400
as far as I know, anyway, they're they're usually in Georgetown and

1088
00:59:01,400 --> 00:59:02,900
that's very difficult to get to

1089
00:59:04,900 --> 00:59:08,500
does emacs offer more syntax support than what I am seeing at the

1090
00:59:08,500 --> 00:59:09,200
moment.

1091
00:59:09,800 --> 00:59:12,800
Do you mean to me and sentox highlighting support?

1092
00:59:14,300 --> 00:59:18,400
And if you mean seeing as how your support the answer is, yes, there's

1093
00:59:18,400 --> 00:59:22,500
a lot of weird syntax highlighting support in there but I don't use a

1094
00:59:22,500 --> 00:59:23,200
lot of it.

1095
00:59:27,800 --> 00:59:29,500
Let's see.

1096
00:59:30,800 --> 00:59:32,600
Any other questions about the code?

1097
00:59:36,700 --> 00:59:39,000
Is there anything that could be considered a free lunch in low-level

1098
00:59:39,000 --> 00:59:39,600
optimization?

1099
00:59:39,800 --> 00:59:42,600
Sure when Intel comes out with like a new chip, that happens to run

1100
00:59:42,600 --> 00:59:44,600
your code faster, and you didn't actually do anything.

1101
00:59:44,700 --> 00:59:45,900
That's definitely a free lunch.

1102
00:59:47,300 --> 00:59:49,000
Kubrick Caleb fair warning.

1103
00:59:49,100 --> 00:59:51,800
The optimizer might store the strings in the same place which will

1104
00:59:51,800 --> 00:59:53,400
break the whole grid thing.

1105
00:59:55,300 --> 00:59:56,400
No it can't.

1106
00:59:58,600 --> 00:59:59,900
You know, there's no way for

1107
01:00:00,000 --> 01:00:04,100
Or there's no way for it to store two strings in the same place, if

1108
01:00:04,100 --> 01:00:05,000
they're different.

1109
01:00:05,900 --> 01:00:06,500
Right.

1110
01:00:08,700 --> 01:00:11,500
So unless you're thinking of something, I'm not thinking of that's not

1111
01:00:11,500 --> 01:00:12,400
actually possible.

1112
01:00:13,500 --> 01:00:17,400
BTN games, do you suggest programming should be snacked upon

1113
01:00:17,400 --> 01:00:20,800
throughout the day as an alternative to a three-course code feast?

1114
01:00:25,800 --> 01:00:29,100
In general, I would say that that you want to do.

1115
01:00:31,400 --> 01:00:36,100
At least two blocks of two hours worth of coding everyday at a bare

1116
01:00:36,100 --> 01:00:36,700
minimum.

1117
01:00:38,800 --> 01:00:41,100
And preferably three.

1118
01:00:43,000 --> 01:00:49,800
And I mean, actual coding like not Facebook is open, not, I'm code,

1119
01:00:49,800 --> 01:00:50,900
reviewing something.

1120
01:00:50,900 --> 01:00:53,900
I'm really talking about, like, making code in the computer, you

1121
01:00:53,900 --> 01:00:59,700
should be spending, you know, preferably three, two hour blocks and

1122
01:00:59,700 --> 01:01:02,400
then, yeah, you're not probably going to get eight hours of

1123
01:01:02,400 --> 01:01:04,800
programming every day because realistically, you got a lot of other

1124
01:01:04,800 --> 01:01:08,500
stuff to do if, you know,

1125
01:01:10,900 --> 01:01:13,200
In the course of actually making a game.

1126
01:01:13,200 --> 01:01:14,400
There's lots of things to do.

1127
01:01:14,400 --> 01:01:17,800
I know I often times, nowadays, actually some days.

1128
01:01:17,800 --> 01:01:20,100
I don't get any time to program because I have tons of this stuff have

1129
01:01:20,100 --> 01:01:20,400
to do.

1130
01:01:20,400 --> 01:01:22,400
I have to do 3D block outs after you left things.

1131
01:01:22,400 --> 01:01:29,200
So I like, have to manage my, my, my time blocks and, like, some days

1132
01:01:29,200 --> 01:01:29,900
I get to do programming.

1133
01:01:29,900 --> 01:01:31,500
Sometimes, I don't, and that sort of thing.

1134
01:01:33,200 --> 01:01:36,700
But yeah, assuming that your job is programming and you're not having

1135
01:01:36,700 --> 01:01:39,900
to substitute and make art or do other things with it.

1136
01:01:41,000 --> 01:01:45,300
Then you should be doing, hopefully, three two, hour blocks a day of

1137
01:01:45,300 --> 01:01:46,200
solid coating.

1138
01:01:46,800 --> 01:01:48,700
If you can get for awesome.

1139
01:01:49,800 --> 01:01:55,200
I these days tend to get 3 plus the one from handmade hero.

1140
01:01:55,200 --> 01:01:59,200
So I do tend to do for roughly 42, H E blocks of things.

1141
01:02:01,300 --> 01:02:06,000
And I sometimes get five, because I'll get another like, you know, are

1142
01:02:06,000 --> 01:02:08,700
or to block of, you know, maybe I got to work on stuff at night, like

1143
01:02:08,700 --> 01:02:09,600
the witness or whatever.

1144
01:02:09,600 --> 01:02:10,000
But

1145
01:02:11,300 --> 01:02:16,200
But never let yourself go below to if you go below to something's

1146
01:02:16,200 --> 01:02:16,600
wrong.

1147
01:02:29,100 --> 01:02:29,500
Insofar.

1148
01:02:29,500 --> 01:02:32,700
As why do you think there have been no good new languages since see

1149
01:02:32,800 --> 01:02:35,100
are all the languages irons out to lunch these days.

1150
01:02:35,500 --> 01:02:37,500
Yes, they are.

1151
01:02:40,700 --> 01:02:46,700
The reason that I think is because see was like the last time we're

1152
01:02:46,700 --> 01:02:49,100
great programmers made a language.

1153
01:02:50,700 --> 01:02:54,300
and as far as I know, like pretty much every language that was made

1154
01:02:54,300 --> 01:02:58,500
since then was made by people who actually aren't great production

1155
01:02:58,500 --> 01:02:59,800
like commercial

1156
01:03:00,000 --> 01:03:01,300
Shipping programmers.

1157
01:03:02,200 --> 01:03:04,300
I mean, the people who made see like made eunuchs, right?

1158
01:03:04,300 --> 01:03:09,200
Like they knew what they were doing, and they knew how to like ship

1159
01:03:09,200 --> 01:03:11,500
actual code like actual software.

1160
01:03:13,200 --> 01:03:17,300
And and I think that that's part of it, it's one of the reasons, our

1161
01:03:17,300 --> 01:03:19,200
students excited about j.

1162
01:03:19,200 --> 01:03:22,100
I is because Jay I like what Jonathan blows languages.

1163
01:03:22,400 --> 01:03:25,800
It's the first time a programmer who actually really knows what

1164
01:03:25,800 --> 01:03:26,500
they're doing.

1165
01:03:27,800 --> 01:03:31,900
He is making a language and has shipped multiple very complicated,

1166
01:03:31,900 --> 01:03:35,400
very Advanced things by themselves in some cases, right?

1167
01:03:37,400 --> 01:03:41,300
I just don't know very many other times in that never happened and so

1168
01:03:41,300 --> 01:03:45,600
I think that that tends to be one of the big reasons that there are so

1169
01:03:45,600 --> 01:03:46,900
many languages nowadays.

1170
01:03:46,900 --> 01:03:51,500
But most of them just really aren't very good at at actually achieving

1171
01:03:51,500 --> 01:03:57,100
high quality software is just because the people who made them work,

1172
01:03:57,300 --> 01:04:02,300
Experts in making high quality software, they were either academic or

1173
01:04:02,300 --> 01:04:06,400
they were, you know, trying to make, you know, low quality software

1174
01:04:06,400 --> 01:04:08,600
quickly or things like that.

1175
01:04:08,600 --> 01:04:11,600
And so, the goals are the knowledge, we're not there.

1176
01:04:11,600 --> 01:04:12,300
One of the other

1177
01:04:13,400 --> 01:04:15,800
cookies, Revenge, do you feel there's a perfect balance between test

1178
01:04:15,800 --> 01:04:20,400
based coding so more or more efficiency optimization or do you prefer

1179
01:04:20,400 --> 01:04:21,600
one over the other

1180
01:04:24,500 --> 01:04:26,200
I'm not sure, I understand the question.

1181
01:04:27,400 --> 01:04:30,800
I feel like test based coding is a totally reason, totally reasonable

1182
01:04:30,800 --> 01:04:31,500
thing to do.

1183
01:04:33,100 --> 01:04:36,900
As long as you're not spending more time total in Development, I've

1184
01:04:36,900 --> 01:04:40,900
said this many times, basically development should be looked at as a

1185
01:04:40,900 --> 01:04:42,400
sort of global optimization problem.

1186
01:04:42,400 --> 01:04:45,400
But you're trying to do is you're trying to take the least amount of

1187
01:04:45,400 --> 01:04:48,800
time to make the best possible code right for the thing you're doing.

1188
01:04:49,500 --> 01:04:54,500
And so if if test base coat, you know, if test-driven development is

1189
01:04:54,500 --> 01:04:57,800
actually going to, if the amount of time it takes to make the tests.

1190
01:04:59,200 --> 01:05:03,500
Is less than the amount of time it would take you to debug problems.

1191
01:05:03,500 --> 01:05:07,100
Later, on that the test would have caught, then it's a good trade-off.

1192
01:05:07,200 --> 01:05:10,000
If not, then you're just wasting your time, right?

1193
01:05:10,200 --> 01:05:12,600
And look, a lot of people are dogmatic about those sorts of things,

1194
01:05:12,600 --> 01:05:14,900
but you can't don't be right.

1195
01:05:14,900 --> 01:05:19,000
There's only one thing that is actually true, and that is what made

1196
01:05:19,000 --> 01:05:20,700
the best code in the shortest possible time.

1197
01:05:20,700 --> 01:05:22,500
Like, that's what you actually wanted.

1198
01:05:23,500 --> 01:05:27,800
And so only do something like, test-driven Dylan or whatever to the

1199
01:05:28,400 --> 01:05:34,300
It's that it actually leads to the same quality product in less time

1200
01:05:34,600 --> 01:05:38,400
if it's not doing that, then it's a waste of time and it's hurting

1201
01:05:38,400 --> 01:05:39,400
your development process.

1202
01:05:39,800 --> 01:05:43,100
And so I don't think there's anything as like like, you're asking a

1203
01:05:43,100 --> 01:05:46,300
perfect bounce, whatever, it's more just like you need to know these

1204
01:05:46,300 --> 01:05:46,700
things.

1205
01:05:46,800 --> 01:05:50,600
You need to learn enough and get used to the way you program enough to

1206
01:05:50,600 --> 01:05:54,400
know when it's appropriate to do tests based because you know the

1207
01:05:54,400 --> 01:05:57,300
thing that you're working on is difficult to get right?

1208
01:05:57,300 --> 01:05:58,200
You know that if you spend

1209
01:05:58,300 --> 01:05:59,100
Time to make the test.

1210
01:05:59,100 --> 01:05:59,900
Now, you'll save a lot.

1211
01:06:00,000 --> 01:06:03,800
Time to bugging later and you you know your ship a less buggy product,

1212
01:06:04,500 --> 01:06:06,000
you should know those things.

1213
01:06:06,000 --> 01:06:10,400
And you furthermore should know the kinds of bugs you make so that,

1214
01:06:10,400 --> 01:06:12,800
you know, your test-driven development might not be the same as

1215
01:06:12,800 --> 01:06:15,500
someone else's because the kinds of tests you might need to make, are

1216
01:06:15,500 --> 01:06:16,400
different than the kinds.

1217
01:06:16,400 --> 01:06:20,100
I might need to make because maybe I don't ever make a mistake of kind

1218
01:06:20,100 --> 01:06:23,300
X, but I do make kind Y.

1219
01:06:23,500 --> 01:06:24,700
And you are the opposite.

1220
01:06:24,700 --> 01:06:27,000
You never make mistake, why, but you always make us take X.

1221
01:06:27,300 --> 01:06:29,800
Well, our tests should be geared towards that my test.

1222
01:06:30,000 --> 01:06:31,500
Should test for the kinds of mistakes.

1223
01:06:31,500 --> 01:06:33,000
I make right?

1224
01:06:34,000 --> 01:06:34,800
Etc, etc.

1225
01:06:39,300 --> 01:06:41,300
What are your thoughts on clang?

1226
01:06:43,000 --> 01:06:46,900
The sort like trying to build it in the source tree like that.

1227
01:06:46,900 --> 01:06:48,300
The source code is a mess.

1228
01:06:48,300 --> 01:06:49,200
It's a nightmare.

1229
01:06:50,000 --> 01:06:51,600
It's way too object-oriented.

1230
01:06:51,600 --> 01:06:56,200
And it's just like it takes thousands of lines of code and clang to do

1231
01:06:56,200 --> 01:06:59,300
something that you should be able to do in like, you know, one line of

1232
01:06:59,300 --> 01:07:00,600
code or something, right?

1233
01:07:00,900 --> 01:07:04,200
So I don't like that aspect of it, but in terms of the actual quality

1234
01:07:04,200 --> 01:07:07,900
of the product relative to say visual Studios compiler, it's actually

1235
01:07:07,900 --> 01:07:08,600
quite good.

1236
01:07:09,300 --> 01:07:11,400
So, you know, I think they did a nice job.

1237
01:07:11,400 --> 01:07:14,300
Even I don't, I feel like the coding practice isn't playing.

1238
01:07:14,300 --> 01:07:18,400
Make it a very hard sorcery to work with and probably a lot less

1239
01:07:18,800 --> 01:07:22,200
efficient, and probably a lot less easy to modify than it should be.

1240
01:07:23,200 --> 01:07:26,100
But even that said, compared to the competition, it's quite good.

1241
01:07:32,100 --> 01:07:36,000
The Maxis, I think he meant string literals like the OG flag.

1242
01:07:36,000 --> 01:07:39,700
I think not sure what that refers to.

1243
01:07:41,200 --> 01:07:43,100
What do you think about Unity, Etc?

1244
01:07:46,400 --> 01:07:49,000
I don't I don't have much of a thought about Unity.

1245
01:07:52,400 --> 01:07:59,100
Any any licensable tool you can really always evaluate it the same

1246
01:07:59,100 --> 01:08:02,900
way, does it do what you needed to do and if so then you could use it

1247
01:08:02,900 --> 01:08:04,900
if not then you can't.

1248
01:08:05,600 --> 01:08:12,100
I think the biggest problem that I see or the thing that I think the

1249
01:08:12,100 --> 01:08:15,300
mistake of popular make is They Don't Really account for all of the

1250
01:08:15,300 --> 01:08:18,399
problems with something like Unity or Unreal Engine or whatever.

1251
01:08:20,100 --> 01:08:22,000
And so you know I think

1252
01:08:22,200 --> 01:08:29,800
People don't really appreciate what actually goes into making a

1253
01:08:29,800 --> 01:08:31,399
quality game, even with unity.

1254
01:08:32,200 --> 01:08:34,300
Because a lot of times people will use Unity, but then the thing that

1255
01:08:34,300 --> 01:08:36,800
they ship is like really low quality, right?

1256
01:08:37,000 --> 01:08:41,000
And so, just using a license will engine, doesn't give you a

1257
01:08:41,000 --> 01:08:42,100
high-quality thing.

1258
01:08:42,399 --> 01:08:44,500
You still have to do a tremendous amount of work to make a

1259
01:08:44,500 --> 01:08:45,800
high-quality thing engines.

1260
01:08:45,800 --> 01:08:48,700
Aren't at the point where you can just like magically just be a

1261
01:08:48,700 --> 01:08:51,300
designer and not have to know anything about programming and expected

1262
01:08:51,300 --> 01:08:51,700
to come out.

1263
01:08:51,700 --> 01:08:52,000
Good.

1264
01:08:52,100 --> 01:08:54,399
Could the only time that really works if you're making something like

1265
01:08:54,399 --> 01:08:58,600
exactly like what the engines demo cook does or something, right?

1266
01:09:00,899 --> 01:09:04,300
Like if you happen to be making Gears of War, or maybe exactly you

1267
01:09:04,300 --> 01:09:06,399
probably can just use the Unreal Engine, right?

1268
01:09:06,800 --> 01:09:07,700
Or something like this.

1269
01:09:07,700 --> 01:09:11,200
But so I don't have much thoughts about those sort of things.

1270
01:09:11,200 --> 01:09:15,800
Personally, I have a very low tolerance for a lot of the design

1271
01:09:15,800 --> 01:09:19,600
decisions in a lot of those things, they aren't designed the way I

1272
01:09:19,600 --> 01:09:21,899
would design them and they don't work the way I want them to work.

1273
01:09:22,600 --> 01:09:27,600
So I tend to not like, to use most of that stuff.

1274
01:09:28,800 --> 01:09:31,300
I also don't like to be beholden to somebody else for my core

1275
01:09:31,300 --> 01:09:36,300
technology and that's just, you know, part of building a company and

1276
01:09:36,300 --> 01:09:36,700
so on.

1277
01:09:36,700 --> 01:09:41,100
So I have plenty of extra reasons why I wouldn't use something like

1278
01:09:41,100 --> 01:09:46,500
Unity but that's doesn't necessarily mean that you shouldn't so.

1279
01:09:46,500 --> 01:09:46,800
Yeah.

1280
01:09:49,600 --> 01:09:51,899
What's the biggest hurdle you've had to overcome so far on this

1281
01:09:51,899 --> 01:09:52,600
endeavor?

1282
01:09:53,000 --> 01:09:53,800
I don't think we've

1283
01:09:55,100 --> 01:09:56,900
Really had hurdles to overcome.

1284
01:09:56,900 --> 01:09:59,900
I mean, we're just we're just doing programming, you know?

1285
01:10:03,700 --> 01:10:04,800
Killer for 3,000.

1286
01:10:04,800 --> 01:10:07,100
What do you suggest for people who are in the first year of C++?

1287
01:10:07,100 --> 01:10:09,900
Newest projects for coding throughout the day.

1288
01:10:10,200 --> 01:10:11,900
Feel free to skip a few answers before.

1289
01:10:14,600 --> 01:10:18,500
I'm not sure what you mean by coding throughout the day, but, you

1290
01:10:18,500 --> 01:10:20,900
know, if you're just starting out, I've said this many times, I think

1291
01:10:20,900 --> 01:10:24,400
asteroids, is the best thing to make because it's the simplest,

1292
01:10:24,400 --> 01:10:24,700
really?

1293
01:10:24,700 --> 01:10:30,200
It's the most simple game you can do and it, but it still features.

1294
01:10:30,200 --> 01:10:31,500
All of the basic components.

1295
01:10:31,500 --> 01:10:33,800
I always say, start making asteroid game.

1296
01:10:34,800 --> 01:10:36,500
Because we can't make an asteroid game.

1297
01:10:37,400 --> 01:10:40,700
Then you're not ready to do any of these more advanced things, right?

1298
01:10:40,800 --> 01:10:44,200
So you should focus on like understanding how to make an asteroid game

1299
01:10:44,200 --> 01:10:45,800
first and then you move forwards.

1300
01:10:45,800 --> 01:10:48,400
Right hand made sure I was like, way more complicated than an asteroid

1301
01:10:48,400 --> 01:10:48,700
game.

1302
01:10:48,700 --> 01:10:49,300
Right?

1303
01:10:50,800 --> 01:10:53,600
And so, like, you someday when I do, like the intro to see e part

1304
01:10:53,600 --> 01:10:56,500
thing or whatever we do, I do.

1305
01:10:56,500 --> 01:10:57,600
Like, here's how you make.

1306
01:10:57,600 --> 01:11:01,800
Just asteroids, it's like a little ship, it can shoot like a missile

1307
01:11:02,000 --> 01:11:04,500
and there's a little asteroid on the screen and it can hit it, right?

1308
01:11:04,700 --> 01:11:08,800
Just doing that and that's a good way to learn because it's so basic.

1309
01:11:08,800 --> 01:11:11,300
It's so simple that you can really just focus on.

1310
01:11:11,300 --> 01:11:15,100
Can you can you just do the just very basic aspects of programming?

1311
01:11:16,200 --> 01:11:18,700
And so that's, you know, that's a good one.

1312
01:11:18,700 --> 01:11:19,200
I think.

1313
01:11:22,700 --> 01:11:23,900
Jesse Meyer.

1314
01:11:24,000 --> 01:11:25,100
Have you seen John Cleese this?

1315
01:11:25,100 --> 01:11:26,000
Talk and creativity.

1316
01:11:26,000 --> 01:11:27,100
If so, what are your thoughts on it?

1317
01:11:27,200 --> 01:11:28,000
Yes, I have.

1318
01:11:28,000 --> 01:11:28,800
I liked it.

1319
01:11:30,300 --> 01:11:31,800
Maybe that's a question to ask in the freestream.

1320
01:11:31,800 --> 01:11:32,800
We can talk more about it.

1321
01:11:36,700 --> 01:11:39,000
It's a first, how many more features will the debug system get it

1322
01:11:39,000 --> 01:11:39,300
already.

1323
01:11:39,300 --> 01:11:41,100
Eats most other engines lunch.

1324
01:11:41,300 --> 01:11:42,700
Well it's not really there yet.

1325
01:11:42,700 --> 01:11:46,500
Like I said we're we're still kind of had to do our organization and

1326
01:11:46,500 --> 01:11:47,400
get these things, right.

1327
01:11:48,200 --> 01:11:51,300
So we still need to now go in and put in the interface and like kind

1328
01:11:51,300 --> 01:11:55,200
of get that data working in a better sort of flow so we can see stuff

1329
01:11:56,600 --> 01:11:58,400
and then and then I'll be pretty happy with it.

1330
01:11:59,100 --> 01:11:59,800
So it's not really that.

1331
01:12:00,000 --> 01:12:04,500
Get lots of features per se but we just need to clean everything up

1332
01:12:04,500 --> 01:12:07,800
and make it actually work well, because we haven't gotten to that

1333
01:12:07,800 --> 01:12:08,500
point yet.

1334
01:12:08,600 --> 01:12:08,900
So I don't know.

1335
01:12:08,900 --> 01:12:10,400
That will necessarily add more features.

1336
01:12:10,400 --> 01:12:12,800
We might add some diagramming support, but that's about it.

1337
01:12:25,900 --> 01:12:29,000
Lexington to feel that taken Calculus 1 2 is need to become a good

1338
01:12:29,000 --> 01:12:29,600
programmer.

1339
01:12:30,400 --> 01:12:31,900
Probably not.

1340
01:12:31,900 --> 01:12:39,400
If you if you are never doing any simulation code, you could probably

1341
01:12:39,400 --> 01:12:41,000
get away with not taking Calculus.

1342
01:12:41,000 --> 01:12:44,500
If you're however, if you're going to do any, simulation, simulation

1343
01:12:44,500 --> 01:12:47,100
and my simulation, I mean, really any simulation?

1344
01:12:47,100 --> 01:12:49,300
So rendering would be including there because that's simulation of

1345
01:12:49,300 --> 01:12:49,800
light.

1346
01:12:50,400 --> 01:12:53,500
Sound would be, including there, because simulation of vibration

1347
01:12:53,500 --> 01:12:55,500
propagation, certainly

1348
01:12:55,600 --> 01:12:59,200
Physics certainly any even even fake physics.

1349
01:13:00,400 --> 01:13:02,800
All that stuff you need calculus.

1350
01:13:03,500 --> 01:13:07,000
So if you're if you're planning on doing like game, programming is no

1351
01:13:07,000 --> 01:13:07,400
question.

1352
01:13:07,400 --> 01:13:08,200
You need calculus.

1353
01:13:08,400 --> 01:13:10,500
If you're planning on doing a web server,

1354
01:13:12,300 --> 01:13:13,900
Probably don't need calculus.

1355
01:13:14,000 --> 01:13:14,800
That'd be my guess.

1356
01:13:32,200 --> 01:13:32,600
Thanks miss.

1357
01:13:32,600 --> 01:13:35,100
It was actually a GF flag for the MSP C compiler, enable, string

1358
01:13:35,100 --> 01:13:37,600
pooling lumping all string literals into a read-only portion of

1359
01:13:37,600 --> 01:13:37,800
memory.

1360
01:13:37,800 --> 01:13:40,200
So it only stores one of each different string.

1361
01:13:40,400 --> 01:13:40,900
Yeah.

1362
01:13:41,000 --> 01:13:43,700
I guess what I'm trying to say is, I don't know why that was brought

1363
01:13:43,700 --> 01:13:46,800
up though, because we don't care if it pulls strings.

1364
01:13:47,100 --> 01:13:48,100
It can't pool.

1365
01:13:48,100 --> 01:13:49,700
Two strings that are different.

1366
01:13:49,700 --> 01:13:52,100
Strings string, pooling only pools.

1367
01:13:52,100 --> 01:13:54,800
Two strings that are the same string, right?

1368
01:13:55,000 --> 01:13:58,900
And since we created a different string for each grid, it think they

1369
01:13:58,900 --> 01:14:00,800
won't ever collapse, right?

1370
01:14:02,500 --> 01:14:03,400
Does that make sense?

1371
01:14:04,100 --> 01:14:08,200
So it's like, we don't care what the compiler does, whatever it did to

1372
01:14:08,200 --> 01:14:10,600
produce strings that were all the strings.

1373
01:14:10,600 --> 01:14:13,100
We told to produce, they're going to be at different locations in

1374
01:14:13,100 --> 01:14:15,000
memory because they're actually Different Strings.

1375
01:14:15,500 --> 01:14:19,000
It can only pull strings if we generate the same string for two grids,

1376
01:14:19,100 --> 01:14:21,200
but in that case, we would want them to collapse.

1377
01:14:21,200 --> 01:14:23,100
Because that means the grid is the same.

1378
01:14:24,200 --> 01:14:26,600
And our definition, the system is if the grid the same, then it's the

1379
01:14:26,600 --> 01:14:27,800
same, right?

1380
01:14:40,700 --> 01:14:43,500
Let's see, I'm just roids.

1381
01:14:43,500 --> 01:14:46,900
Do you think there really hasn't been a good language in C period?

1382
01:14:47,700 --> 01:14:49,200
Yes, I would probably say that.

1383
01:14:49,200 --> 01:14:52,700
Although to be fair I don't know, like all languages, right?

1384
01:14:52,700 --> 01:14:57,100
I mean there are so many languages out there that to really say that

1385
01:14:57,100 --> 01:14:59,500
definitively you'd have to be someone who just studies languages all

1386
01:14:59,500 --> 01:14:59,800
the time.

1387
01:15:01,900 --> 01:15:05,600
What I should perhaps what I could perhaps take more definitively is I

1388
01:15:05,600 --> 01:15:09,800
don't know of another good language that's been made since see.

1389
01:15:14,700 --> 01:15:17,500
And and to be fair, you know, I don't even, I would soften outside

1390
01:15:17,500 --> 01:15:23,500
late, I don't know of another language that's been developed since see

1391
01:15:23,500 --> 01:15:27,100
that isn't just basically see with a few minor additions or something.

1392
01:15:27,100 --> 01:15:29,700
Because there have been things like d for example or something.

1393
01:15:29,700 --> 01:15:32,900
Which maybe, you know, I haven't really spent any time with it but

1394
01:15:32,900 --> 01:15:37,700
maybe is like, as good as C4, what you're doing, but doesn't really

1395
01:15:37,700 --> 01:15:40,000
appreciably Advanced Beyond it, right?

1396
01:15:40,200 --> 01:15:42,900
And so that's probably more of the right way to say it.

1397
01:15:46,900 --> 01:15:47,400
So yeah.

1398
01:16:01,000 --> 01:16:03,500
Insofar as what if it doesn't pull strings.

1399
01:16:03,500 --> 01:16:07,500
And to same string, literals get different addresses with the system

1400
01:16:07,500 --> 01:16:08,300
lose its lunch.

1401
01:16:08,400 --> 01:16:12,400
No, because again, that's fine each.

1402
01:16:12,400 --> 01:16:16,100
One of our debug locations is intending intentionally.

1403
01:16:16,100 --> 01:16:19,200
Generates a different string so that each location gets a different

1404
01:16:19,200 --> 01:16:19,600
quick.

1405
01:16:19,800 --> 01:16:22,700
So we don't actually want it to pull the strings for any particular

1406
01:16:22,700 --> 01:16:24,900
reason, but we also don't care if it does because since they're all

1407
01:16:24,900 --> 01:16:26,200
different, they won't pool.

1408
01:17:06,600 --> 01:17:07,600
And Signum 73.

1409
01:17:07,600 --> 01:17:11,600
I actually don't believe that good language is relative to what you're

1410
01:17:11,600 --> 01:17:12,100
doing.

1411
01:17:13,600 --> 01:17:17,200
That's kind of the place where I sort of depart from that.

1412
01:17:18,900 --> 01:17:22,300
I always prefer to program in C pretty much period.

1413
01:17:23,100 --> 01:17:26,600
So if I wanted to do something prologue, like I would want to

1414
01:17:26,600 --> 01:17:30,600
implement whatever the part of prologue is that I wanted in see

1415
01:17:31,300 --> 01:17:34,300
because what invariably I find is that lets say, I

1416
01:17:34,500 --> 01:17:40,600
Did actually go use prologue to do it a, whatever the prologue, like

1417
01:17:41,000 --> 01:17:42,600
compiler or interpreter.

1418
01:17:42,600 --> 01:17:46,900
I used to do that, I probably can't run it on all the machines.

1419
01:17:46,900 --> 01:17:49,200
I might want to run it on and then I end up in the situation where

1420
01:17:49,200 --> 01:17:53,600
like, my code doesn't work anymore or whatever or it's too slow and I

1421
01:17:53,600 --> 01:17:56,800
can't optimize it because it's like someone else's like crappy old

1422
01:17:56,800 --> 01:17:57,900
prologue whatever.

1423
01:17:58,100 --> 01:17:59,500
So I actually

1424
01:18:00,000 --> 01:18:03,300
Actually, literally no longer write anything that isn't in.

1425
01:18:03,300 --> 01:18:08,300
See, like, the handmade hero GitHub.

1426
01:18:08,600 --> 01:18:12,400
Validator, I actually wrote myself in C, right?

1427
01:18:13,000 --> 01:18:14,500
And the reason that I did that

1428
01:18:15,300 --> 01:18:18,900
Was just because every time I've ever done something like, oh, it's

1429
01:18:18,900 --> 01:18:21,300
just a little web thing, I'll just write it in PHP or whatever.

1430
01:18:21,300 --> 01:18:22,900
I always regret it.

1431
01:18:22,900 --> 01:18:24,400
It always crashes.

1432
01:18:24,400 --> 01:18:28,200
They change like the the PHP to a different version and now doesn't

1433
01:18:28,200 --> 01:18:32,000
run anymore or like, I try to like move it from one machine to the

1434
01:18:32,000 --> 01:18:35,300
other, but like, oh, it required like my sequel to store the thing and

1435
01:18:35,300 --> 01:18:36,000
that's not running.

1436
01:18:36,000 --> 01:18:36,700
And it goes right.

1437
01:18:36,700 --> 01:18:40,000
Whereas here, I just know, nope, it's here's the C code.

1438
01:18:40,000 --> 01:18:43,200
I recompiled it, it never crashes, never goes down.

1439
01:18:43,200 --> 01:18:45,300
It can handle like a massive amount.

1440
01:18:45,400 --> 01:18:46,300
Of throughput.

1441
01:18:46,800 --> 01:18:49,000
So I don't have to worry about like, my machine being slow or

1442
01:18:49,000 --> 01:18:51,600
something like that and like, hey guess what they have me here at

1443
01:18:51,600 --> 01:18:56,400
GitHub valladares, been running for, like, God knows how long never

1444
01:18:56,400 --> 01:18:57,300
had a problem with it.

1445
01:18:57,300 --> 01:18:59,300
It's trivial for me to just move to another machine.

1446
01:18:59,300 --> 01:19:01,200
You just copy to files and you're done.

1447
01:19:03,100 --> 01:19:05,400
So yeah, like no, I am.

1448
01:19:05,400 --> 01:19:09,800
So not okay with the concept that like, oh, I'll just use this other

1449
01:19:09,800 --> 01:19:10,300
language.

1450
01:19:10,300 --> 01:19:11,800
I've never had that work.

1451
01:19:11,900 --> 01:19:13,600
Never not even once.

1452
01:19:16,700 --> 01:19:17,100
So yeah.

1453
01:19:17,100 --> 01:19:22,800
So I use see even when I'm just going to do like a little

1454
01:19:25,500 --> 01:19:28,600
You know, a little thing that's not meant to be whatever.

1455
01:19:29,000 --> 01:19:33,300
And so one of the reasons that I really want, like I said us a real

1456
01:19:33,300 --> 01:19:37,800
strong successor to see is because like right now, Eileen very heavily

1457
01:19:37,800 --> 01:19:39,900
on metaprogramming to do stuff.

1458
01:19:40,900 --> 01:19:43,300
And also, I can't really take advantage of a lot of people's, like,

1459
01:19:43,300 --> 01:19:46,200
libraries and stuff because people don't tend to write libraries for

1460
01:19:46,200 --> 01:19:47,200
see anymore, right?

1461
01:19:47,300 --> 01:19:51,700
They tend to write libraries for like C, sharp or Java or something.

1462
01:19:52,600 --> 01:19:55,100
And so, I would really like there to be a successor to see you.

1463
01:19:55,300 --> 01:20:00,400
Comes along so that the world would start using that and so there'd be

1464
01:20:00,400 --> 01:20:04,000
a lot more of that happening and a lot less of these other languages

1465
01:20:04,000 --> 01:20:06,700
which I think are pretty much universally bad and literally should

1466
01:20:06,700 --> 01:20:07,500
never be used.

1467
01:20:15,100 --> 01:20:18,600
All right, I'm going to go ahead and wind down here.

1468
01:20:25,900 --> 01:20:28,100
Thank you everyone for joining me, for another episode of handmade

1469
01:20:28,100 --> 01:20:28,300
here.

1470
01:20:28,300 --> 01:20:29,500
It's been a pleasure coding with you.

1471
01:20:29,500 --> 01:20:32,000
As always, if you would like to follow along at home with the source

1472
01:20:32,000 --> 01:20:32,900
code, you can always do.

1473
01:20:32,900 --> 01:20:36,400
So, by pre-ordering the game which comes to the source code in every

1474
01:20:36,400 --> 01:20:38,900
night, you can download it after I finish here, I uploaded to the

1475
01:20:38,900 --> 01:20:41,600
server so that you can stay up to date.

1476
01:20:42,900 --> 01:20:46,500
If you want to do that, 10 made hero dot-org, you can also find links

1477
01:20:46,500 --> 01:20:50,300
there to other useful things such as our Forum site which has an

1478
01:20:50,300 --> 01:20:52,300
antidepressant guide ports to Mac and Linux.

1479
01:20:52,300 --> 01:20:56,100
Those sorts of things a patreon where you can support our video series

1480
01:20:56,100 --> 01:20:59,500
if you like what you see and want to donate.

1481
01:20:59,700 --> 01:20:59,800
And

1482
01:21:00,000 --> 01:21:03,500
So we have a tweet bot, which treats the schedule at you.

1483
01:21:03,600 --> 01:21:06,800
So if you would like to know when we are going to be live, that is the

1484
01:21:06,800 --> 01:21:07,600
place to go.

1485
01:21:08,000 --> 01:21:11,000
It is always kept up to date, at least.

1486
01:21:11,100 --> 01:21:15,900
If I don't forget to upload the schedule that's about it.

1487
01:21:16,000 --> 01:21:19,400
I will be back tomorrow for the final stream of this week, 5 p.m.

1488
01:21:19,400 --> 01:21:21,900
Pacific Standard Time and of course we will be streaming next week the

1489
01:21:21,900 --> 01:21:27,100
lead-up to handmade hero con, which is coming our conference.

1490
01:21:27,400 --> 01:21:29,800
I don't know if there are any tickets left, I think there are

1491
01:21:30,200 --> 01:21:33,800
There were like 25 left when I checked last time, but if you go to

1492
01:21:33,800 --> 01:21:39,400
handmade conduct org, you can find some information about our

1493
01:21:39,400 --> 01:21:40,200
conference.

1494
01:21:41,100 --> 01:21:42,600
There were having on December 5th.

1495
01:21:42,700 --> 01:21:47,400
It's got a great lineup, actually, if you are planning on coming to

1496
01:21:47,400 --> 01:21:47,700
that.

1497
01:21:47,700 --> 01:21:48,400
Where are we here?

1498
01:21:48,400 --> 01:21:52,500
Hey, Mike on 2015 schedule, we've got Tommy referenced, Mike, actin,

1499
01:21:52,500 --> 01:21:55,700
Pat Wyatt, Jonathan Blow and Ron Gilbert which is kind of a crazy

1500
01:21:56,100 --> 01:21:57,300
lineup of people.

1501
01:21:59,000 --> 01:22:01,700
Base of the program was responsible for some of the, you know, most

1502
01:22:01,700 --> 01:22:04,200
famous games of all time, back to back.

1503
01:22:04,200 --> 01:22:05,500
So it's pretty cool.

1504
01:22:05,500 --> 01:22:08,000
We're working on finalizing sort of the AV set up.

1505
01:22:08,000 --> 01:22:11,200
Now we're hoping to be able to stream it here on handmade here as

1506
01:22:11,200 --> 01:22:14,700
well, but I don't know if we're gonna be able to do that because it's

1507
01:22:14,700 --> 01:22:16,900
not something that we technically specialize in.

1508
01:22:17,500 --> 01:22:18,800
So we're going to do the best we can.

1509
01:22:18,800 --> 01:22:21,700
But anyway point being we'd love to see you there like I said there

1510
01:22:21,700 --> 01:22:25,800
are still a few tickets left so if you want to go to that check it

1511
01:22:25,800 --> 01:22:26,400
out.

1512
01:22:26,800 --> 01:22:28,800
That's about it for today until

1513
01:22:28,900 --> 01:22:33,800
Tomorrow have fun programming and I'll see you guys on the internet.

1514
01:22:34,100 --> 01:22:37,000
And, you know, don't forget to eat lunch, right?

1515
01:22:37,100 --> 01:22:38,200
Most important meal of the day.

1516
01:22:38,500 --> 01:22:38,800
Thank you.

1517
01:22:38,800 --> 01:22:39,400
He's everyone.

