1
00:00:00,700 --> 00:00:01,600
There we go.

2
00:00:02,200 --> 00:00:08,300
Hello, everyone and welcome to day 34 of handmade hero the show where

3
00:00:08,300 --> 00:00:12,400
we coded complete game from scratch using nothing, but our bear typing

4
00:00:12,400 --> 00:00:16,600
fingers and you may ask, why are we doing this?

5
00:00:17,400 --> 00:00:19,200
And a lot of people do ask a lot of times?

6
00:00:19,200 --> 00:00:20,200
Why aren't you using this?

7
00:00:20,200 --> 00:00:21,000
Why aren't you using that?

8
00:00:21,000 --> 00:00:21,900
Why do you use this editor?

9
00:00:21,900 --> 00:00:22,800
Why do use this language?

10
00:00:22,800 --> 00:00:29,400
We don't use an engine and a lot of the the the answer to that.

11
00:00:30,100 --> 00:00:32,900
Is actually kind of complicated and I suppose that I don't explain it

12
00:00:32,900 --> 00:00:33,300
often enough.

13
00:00:33,300 --> 00:00:35,900
So maybe I'm just going to take a couple minutes here just to say why

14
00:00:35,900 --> 00:00:39,000
we do what we do on the stream and why I think it's important.

15
00:00:39,300 --> 00:00:41,800
So, basically, the first thing I just want to point out to everyone

16
00:00:41,800 --> 00:00:44,300
out there, and this has really nothing to do with my own personal

17
00:00:44,300 --> 00:00:45,600
preference or anything like that.

18
00:00:45,900 --> 00:00:48,300
The game industry runs on C and C++.

19
00:00:48,300 --> 00:00:51,700
That is just the the truth of the situation.

20
00:00:52,500 --> 00:00:56,600
And basically almost everything that you play was programmed in C and

21
00:00:56,600 --> 00:00:59,900
C++ the engine for the game was written in C and C++.

22
00:01:00,000 --> 00:01:03,900
And it is extraordinarily rare to find games where that is not true.

23
00:01:03,900 --> 00:01:04,599
Doesn't mean you can't.

24
00:01:04,599 --> 00:01:07,900
There are examples of games written in all sorts of languages out

25
00:01:07,900 --> 00:01:09,600
there that you can find and that's always good.

26
00:01:09,600 --> 00:01:12,700
But everything that, you know, about and everything that sets the bar

27
00:01:12,700 --> 00:01:14,700
for gaming is C and C++.

28
00:01:14,700 --> 00:01:18,700
If you go out and you buy the best selling game of Last Christmas, if

29
00:01:18,700 --> 00:01:23,500
you buy Call of Duty or you buy, you know, Grand Theft Auto, they

30
00:01:23,500 --> 00:01:24,700
weren't written in F sharp.

31
00:01:24,700 --> 00:01:25,700
They weren't written in C.

32
00:01:25,700 --> 00:01:26,000
Sharp.

33
00:01:26,000 --> 00:01:27,200
They weren't written in Java.

34
00:01:27,200 --> 00:01:28,300
They weren't written in Python.

35
00:01:28,300 --> 00:01:29,400
They weren't written in PHP.

36
00:01:29,400 --> 00:01:29,800
They weren't

37
00:01:29,900 --> 00:01:32,000
In JavaScript, they weren't written HTML5.

38
00:01:32,200 --> 00:01:34,900
They were written in C and C++.

39
00:01:34,900 --> 00:01:41,600
So at the bottom of the sort of, basically, at the base layer of every

40
00:01:41,600 --> 00:01:43,500
game, that is what is there.

41
00:01:43,500 --> 00:01:47,100
And maybe someday that'll change, it's hard to say, but the truth of

42
00:01:47,100 --> 00:01:47,900
the matter is C.

43
00:01:47,900 --> 00:01:49,900
And C++ is what runs the game industry.

44
00:01:49,900 --> 00:01:53,800
And so, if least for the time being, that is what people need to know

45
00:01:53,800 --> 00:01:57,100
if they are programming games in their programming games, seriously at

46
00:01:57,100 --> 00:01:59,800
a low level trying to do performance oriented programming, that is

47
00:02:00,000 --> 00:02:01,500
What the game industry runs on now?

48
00:02:01,500 --> 00:02:03,900
Doesn't mean you shouldn't go programming something else depending on

49
00:02:03,900 --> 00:02:07,300
what your goals are, but it does mean that when I do teaching on this

50
00:02:07,300 --> 00:02:10,300
stream to try and teach little game programming that is what we are

51
00:02:10,300 --> 00:02:13,100
going to use, because that is the industry standard.

52
00:02:13,600 --> 00:02:15,000
So that is just the the case.

53
00:02:15,000 --> 00:02:18,900
Now, I happen to like, C and C++ as well, I like having control over

54
00:02:18,900 --> 00:02:19,600
what I program.

55
00:02:19,600 --> 00:02:23,700
And one of the reasons that I like C and C++ a lot is because I like

56
00:02:23,700 --> 00:02:26,600
to basically be able to nitpick every little thing.

57
00:02:26,900 --> 00:02:29,800
I'm very detail-oriented in that way and I like to be able to know

58
00:02:29,900 --> 00:02:34,300
I know that after I go over my first pass of programming.

59
00:02:34,300 --> 00:02:36,900
I always have that room to kind of go down there and drill down into

60
00:02:36,900 --> 00:02:38,600
every little bit and have complete control.

61
00:02:38,600 --> 00:02:41,900
I don't want the language doing anything for me.

62
00:02:42,900 --> 00:02:47,700
I want to be able to do it all myself and that's just sort of a

63
00:02:47,700 --> 00:02:50,300
philosophical thing and I don't want to force it on anyone else, but I

64
00:02:50,300 --> 00:02:52,500
could just basically tell you that, that is the way I make games and

65
00:02:52,500 --> 00:02:54,400
that is the way I enjoy making games.

66
00:02:54,500 --> 00:02:59,000
I think there's something kind of just at a fundamental level really,

67
00:02:59,000 --> 00:02:59,800
very much.

68
00:03:00,700 --> 00:03:04,000
Fun about programming computer directly.

69
00:03:04,300 --> 00:03:08,100
It's why I got into this business in the first place.

70
00:03:08,400 --> 00:03:10,500
It's what still gets me excited about things.

71
00:03:10,500 --> 00:03:11,600
When I'm actually programming.

72
00:03:11,800 --> 00:03:14,200
I like being the person who is in control, right?

73
00:03:14,200 --> 00:03:15,800
From the CPU, all the way up.

74
00:03:15,800 --> 00:03:17,300
And in fact, to be honest with you.

75
00:03:17,300 --> 00:03:18,400
Nothing aggravates me.

76
00:03:18,400 --> 00:03:21,200
More of these days in the fact that the operating system is kind of,

77
00:03:21,200 --> 00:03:21,800
in my way.

78
00:03:21,800 --> 00:03:23,000
I really don't love it.

79
00:03:23,700 --> 00:03:26,000
And it's one of the reasons that one of my personal goals to the

80
00:03:26,000 --> 00:03:28,000
stream, is to eventually get us to the point where we're programming

81
00:03:28,000 --> 00:03:29,900
on a Raspberry Pi because I would like,

82
00:03:30,100 --> 00:03:33,300
To get the operating system completely out of the picture so that we

83
00:03:33,300 --> 00:03:36,100
can start doing stuff at a really low level.

84
00:03:36,100 --> 00:03:38,700
And, you know, maybe we can even try to do that on the PC sometime.

85
00:03:38,700 --> 00:03:43,800
But the problem is the sort of the mess of devices and specifications

86
00:03:43,800 --> 00:03:45,200
for how the devices work on the PC.

87
00:03:45,200 --> 00:03:48,500
Makes it a lot harder to do something like that in a short time scale.

88
00:03:50,900 --> 00:03:51,500
So anyway,

89
00:03:54,000 --> 00:03:55,900
That is why we are using what we are using.

90
00:03:56,800 --> 00:04:00,100
And one of the big things that I just want to say is like, you know,

91
00:04:00,100 --> 00:04:03,400
if that is something that people, you know, aren't super interested

92
00:04:03,400 --> 00:04:04,400
in, that's totally cool.

93
00:04:04,400 --> 00:04:05,700
I don't want to be dogmatic about stuff.

94
00:04:05,700 --> 00:04:08,400
I think everyone should use what they want to use to program.

95
00:04:09,300 --> 00:04:13,900
But I would also say that there's something to be said, for the fact

96
00:04:14,100 --> 00:04:16,899
that low-level programming does have really some pretty interesting

97
00:04:16,899 --> 00:04:17,300
results.

98
00:04:17,300 --> 00:04:19,399
And that we have made some pretty amazing things with it.

99
00:04:19,500 --> 00:04:22,500
If you look back over the history of game programming,

100
00:04:22,700 --> 00:04:25,500
In Assembly Language have given us some of the most formative gaming

101
00:04:25,500 --> 00:04:28,500
experiences that have ever occurred, you know, things like doom and

102
00:04:28,500 --> 00:04:31,400
Quake back in the old days, all the way up to the things that you play

103
00:04:31,400 --> 00:04:31,800
today.

104
00:04:32,800 --> 00:04:35,900
And I think there's just something kind of interesting about that and

105
00:04:35,900 --> 00:04:37,200
I do think that it's worth learning.

106
00:04:37,600 --> 00:04:40,200
I also think that the more, you know, about how to program a computer

107
00:04:40,200 --> 00:04:42,800
at a low level, the more powerful you are even at the high level.

108
00:04:42,800 --> 00:04:46,400
So when you do jump up and you start using someone's prefab engine

109
00:04:46,400 --> 00:04:48,300
like Unity or unreal or something like this.

110
00:04:48,600 --> 00:04:51,600
And when you do jump up there and you use something that's like a

111
00:04:51,600 --> 00:04:52,400
higher level language.

112
00:04:52,600 --> 00:04:55,300
You want to use to Sharp, you want to something like that, knowing

113
00:04:55,300 --> 00:04:58,400
what it is that those languages have to do to provide the services to

114
00:04:58,400 --> 00:05:02,800
that they provide such as garbage collection, or such as the animation

115
00:05:02,800 --> 00:05:05,500
system in unity or any of these sorts of things does.

116
00:05:05,500 --> 00:05:09,400
Kind of put you at a significant advantage to someone who has no idea

117
00:05:09,400 --> 00:05:10,900
how those Services work.

118
00:05:11,100 --> 00:05:13,300
Because if you've been there and you've implemented one of those

119
00:05:13,300 --> 00:05:17,200
systems yourself someday, even if you choose, not to use it because

120
00:05:17,200 --> 00:05:21,900
someone else provides a better system that you can license knowing how

121
00:05:21,900 --> 00:05:22,500
it worked.

122
00:05:22,800 --> 00:05:26,300
Allows you to use it in a much more intelligent way and avoid the kind

123
00:05:26,300 --> 00:05:28,100
of pitfalls that often happen.

124
00:05:28,100 --> 00:05:31,100
When people who don't know anything about these sorts of systems, or

125
00:05:31,100 --> 00:05:35,100
how they work, try to implement relatively complicated games in

126
00:05:35,100 --> 00:05:39,200
high-level languages are or engines going into those sorts of

127
00:05:39,200 --> 00:05:44,000
problems, not knowing what the support engine and what the libraries

128
00:05:44,000 --> 00:05:45,800
have to do in order to do the things.

129
00:05:45,800 --> 00:05:49,600
You're asking them to makes it really hard for you to sort of make

130
00:05:49,600 --> 00:05:52,400
good decisions about how you use them and how you structure the Cody.

131
00:05:52,600 --> 00:05:55,100
Even at a high level, the truth is, we just haven't gotten to the

132
00:05:55,100 --> 00:05:59,700
point yet where people can program games and not care about the

133
00:05:59,700 --> 00:05:59,900
hardware.

134
00:06:00,000 --> 00:06:01,100
Not know anything about it.

135
00:06:01,200 --> 00:06:02,800
Maybe if your game is very, very simple.

136
00:06:02,800 --> 00:06:03,400
That's true.

137
00:06:03,700 --> 00:06:06,300
But it's your game gets more and more complicated and more taxing on

138
00:06:06,300 --> 00:06:06,900
the system.

139
00:06:07,000 --> 00:06:11,000
It really becomes important for you to know, sort of, at least, at a

140
00:06:11,000 --> 00:06:12,500
basic level, how all these things work.

141
00:06:13,000 --> 00:06:15,800
So personally, I just think it's a great idea for everyone to have the

142
00:06:15,800 --> 00:06:16,300
experience.

143
00:06:16,300 --> 00:06:19,400
Just once to kind of go through the complete pipeline of a game and

144
00:06:19,400 --> 00:06:20,300
see how everything works.

145
00:06:20,300 --> 00:06:22,100
From the bottom, all the way up to the top.

146
00:06:22,200 --> 00:06:23,500
It's very, very empowering.

147
00:06:23,500 --> 00:06:27,600
I think it's a great idea and it doesn't take that long to do an hour.

148
00:06:27,600 --> 00:06:29,800
A night is all we're doing here and I think we make great.

149
00:06:30,000 --> 00:06:30,400
Progress.

150
00:06:30,400 --> 00:06:33,500
There's so much that you can learn in just that our or if you even go

151
00:06:33,500 --> 00:06:35,000
off and do it on your own.

152
00:06:35,000 --> 00:06:38,000
There's so much that you can learn in just a little bit of time.

153
00:06:38,700 --> 00:06:41,800
And so I highly recommend that everyone seriously consider that even

154
00:06:41,800 --> 00:06:44,200
if they are someone who thinks that, it's a waste of time to program C

155
00:06:44,200 --> 00:06:46,500
and C++ or waste of time to write your own engine.

156
00:06:47,200 --> 00:06:50,800
I'm not here to convince you otherwise but I am here to say there is a

157
00:06:50,800 --> 00:06:54,000
lot to learn about how things work and the more, you know, about that,

158
00:06:54,000 --> 00:06:57,700
the more empowering is and there's also a surprising amount of fun to

159
00:06:57,700 --> 00:06:59,700
be had at the lower levels when you

160
00:07:00,000 --> 00:07:03,500
To get pretty fast out with it and don't knock it.

161
00:07:03,700 --> 00:07:06,900
There's something to be said for that, you know, back in the 70s in

162
00:07:06,900 --> 00:07:10,300
the 80s, huddling over a personal computer and just figuring out how

163
00:07:10,300 --> 00:07:10,700
to make it.

164
00:07:10,700 --> 00:07:14,900
Do the basic stuff that it could do was just, it's a really rewarding

165
00:07:14,900 --> 00:07:15,500
experience.

166
00:07:16,300 --> 00:07:18,800
I think for a lot of people and I think we can have those kind of

167
00:07:18,800 --> 00:07:19,700
experiences again.

168
00:07:20,000 --> 00:07:22,600
So I think there's just a lot of positive stuff to say about the sort

169
00:07:22,600 --> 00:07:24,000
of stuff that we're doing on handmade hero.

170
00:07:24,000 --> 00:07:27,800
So I would encourage everyone to maybe not focus, so much on questions

171
00:07:27,800 --> 00:07:29,800
about whose language is better or whatever.

172
00:07:29,900 --> 00:07:32,400
Are you should be using or why you're not using an engine of those

173
00:07:32,400 --> 00:07:34,400
sorts of things because really those questions, don't matter.

174
00:07:34,400 --> 00:07:39,400
Very much when you are making a game, the big, the big picture and the

175
00:07:39,400 --> 00:07:42,000
big questions often are a lot more important than those things.

176
00:07:42,300 --> 00:07:45,000
And it's really about the craftsmanship, your knowledge of the

177
00:07:45,000 --> 00:07:48,200
programming, your knowledge of how to use the hardware and your kind

178
00:07:48,200 --> 00:07:51,600
of ability to to focus on what's important in a project that really

179
00:07:51,600 --> 00:07:52,000
matters.

180
00:07:53,300 --> 00:07:56,700
And so, I think we're doing a pretty good job of this on that on this

181
00:07:56,700 --> 00:07:57,100
stream.

182
00:07:57,500 --> 00:07:59,200
And I think we made some really great progress.

183
00:07:59,200 --> 00:07:59,800
We haven't even made

184
00:08:00,000 --> 00:08:01,500
Through one full work week yet.

185
00:08:01,500 --> 00:08:05,900
It's day, 34 day, 40 will be the end of our first work week and we

186
00:08:05,900 --> 00:08:07,400
have so much to show for it.

187
00:08:07,900 --> 00:08:09,800
We have features that even professional engines.

188
00:08:09,800 --> 00:08:11,600
Don't have looped livecode.

189
00:08:11,600 --> 00:08:12,200
Anything is something.

190
00:08:12,200 --> 00:08:15,600
You can't even buy today and we've already written it.

191
00:08:16,000 --> 00:08:17,800
So, I think there's a lot of good stuff going on here and I would

192
00:08:17,800 --> 00:08:21,500
encourage people really to just have fun with it and maybe don't worry

193
00:08:21,500 --> 00:08:23,000
so much about a lot of those other things.

194
00:08:23,100 --> 00:08:24,800
All right, that's my PSA for the day.

195
00:08:25,600 --> 00:08:26,600
I am done talking at you.

196
00:08:26,600 --> 00:08:29,000
It is time to do some programming because we're at a pretty fun part

197
00:08:29,000 --> 00:08:29,800
of the product right now.

198
00:08:29,900 --> 00:08:30,500
You asked me.

199
00:08:32,600 --> 00:08:37,200
All right, so if you are following along at home with the source code

200
00:08:37,600 --> 00:08:38,700
today is day 34.

201
00:08:38,700 --> 00:08:40,600
So you want to unzip day 33 source code.

202
00:08:40,600 --> 00:08:43,100
If you have pre-ordered the game on handmade hero dot-org, you will

203
00:08:43,100 --> 00:08:44,300
have gotten a link in your email.

204
00:08:44,300 --> 00:08:47,600
You can click on that link and it will have a zip file inside.

205
00:08:47,600 --> 00:08:49,500
That zip file is one ZIP per day.

206
00:08:49,700 --> 00:08:53,700
You just go ahead and you find a 33.0 you unzip that into directory

207
00:08:53,700 --> 00:08:57,500
and you are exactly the same spot in the code base as I am right now.

208
00:08:58,000 --> 00:08:59,700
And so you can follow along at home.

209
00:09:00,000 --> 00:09:03,700
Exactly the same way that you see me do on the street.

210
00:09:03,800 --> 00:09:04,200
Okay.

211
00:09:04,600 --> 00:09:08,400
So if you remember, we had just started finished.

212
00:09:08,400 --> 00:09:10,300
Virtualizing, our tilemap yesterday.

213
00:09:10,800 --> 00:09:13,500
What we have basically done is we've turned of, we're sort of making a

214
00:09:13,500 --> 00:09:14,100
scratch game.

215
00:09:14,100 --> 00:09:14,500
Right now.

216
00:09:14,500 --> 00:09:17,800
We're basically just sort of laying out what the sorts of things we

217
00:09:17,800 --> 00:09:17,900
want.

218
00:09:17,900 --> 00:09:20,700
Our game engine to do so that we can go right our game engine.

219
00:09:20,700 --> 00:09:24,300
And one of the things I did just before the end was, I made it so that

220
00:09:24,400 --> 00:09:27,400
every time the player now moved to a new tile, we move the camera.

221
00:09:27,800 --> 00:09:29,700
Now that's not maybe so nice because I

222
00:09:30,000 --> 00:09:32,700
People would probably prefer some smooth scrolling there.

223
00:09:32,900 --> 00:09:35,600
So one thing that might be kind of fun to do would just be to go ahead

224
00:09:35,800 --> 00:09:36,800
and add the smooth scrolling.

225
00:09:36,800 --> 00:09:38,600
So why don't we just do that for now?

226
00:09:38,800 --> 00:09:41,700
Because I feel like that's probably a pretty regional thing to do.

227
00:09:41,700 --> 00:09:43,200
You know what the one thing I haven't checked recently.

228
00:09:43,200 --> 00:09:43,700
By the way.

229
00:09:43,900 --> 00:09:47,800
I haven't checked to see whether we have any, I wanted to double check

230
00:09:48,000 --> 00:09:50,700
because we had added some things at the end of the win32 platform

231
00:09:50,700 --> 00:09:51,300
layer stuff.

232
00:09:51,300 --> 00:09:54,500
I want to do that control shift, escape to bring up the task manager

233
00:09:54,500 --> 00:09:56,900
and just make sure we're not doing anything weird with our memory.

234
00:09:57,000 --> 00:09:58,800
I want to make sure it always stays nice and constant.

235
00:09:58,800 --> 00:09:59,900
It does so,

236
00:10:00,100 --> 00:10:00,500
Was good.

237
00:10:00,800 --> 00:10:03,700
Anyway, we'll be adding a lot of features that allow us to track our

238
00:10:03,700 --> 00:10:04,500
debug stuff.

239
00:10:04,900 --> 00:10:08,000
Probably not too, too long after we get sort of our render a chops up

240
00:10:08,000 --> 00:10:08,700
a little bit.

241
00:10:08,800 --> 00:10:11,000
But anyway, so what I'd like to do is just go ahead and make this

242
00:10:11,000 --> 00:10:11,700
smooth scroll.

243
00:10:11,800 --> 00:10:14,400
Now, if you remember how this worked, we basically were drawing the

244
00:10:14,400 --> 00:10:15,100
tile map.

245
00:10:15,100 --> 00:10:17,500
We're drawing the town map, by starting it whatever tile to player is

246
00:10:17,500 --> 00:10:17,900
on.

247
00:10:18,100 --> 00:10:20,400
And then we're just asking what the tiles are that are around him.

248
00:10:20,400 --> 00:10:21,700
And we're drawing, that's all we're doing.

249
00:10:22,300 --> 00:10:25,000
So instead of moving the player Sprite like we're doing now, it's all

250
00:10:25,000 --> 00:10:25,500
relative.

251
00:10:25,500 --> 00:10:29,200
Like Einstein said really all we have to do is we just have to move

252
00:10:29,200 --> 00:10:29,800
the map and said

253
00:10:29,900 --> 00:10:31,900
Out of the player and then we'd have smooth scrolling, right?

254
00:10:31,900 --> 00:10:33,300
That's really all we have to do right now.

255
00:10:33,300 --> 00:10:35,600
We're moving the player based on his offset.

256
00:10:35,800 --> 00:10:38,400
But all we have to do, when we draw instead of drawing, the player

257
00:10:38,400 --> 00:10:42,100
Sprite offset from the tile, we can just draw all the tiles offset and

258
00:10:42,100 --> 00:10:43,700
the player stays in the middle, right?

259
00:10:43,700 --> 00:10:44,500
Pretty darn simple.

260
00:10:44,500 --> 00:10:46,400
But I feel like that would just be a funny thing to do.

261
00:10:46,400 --> 00:10:49,600
Right now, people were asking about smooth scrolling and I just

262
00:10:49,600 --> 00:10:52,400
thought it would be funny if we go ahead and do that for them.

263
00:10:52,400 --> 00:10:55,500
So let's let's just take a look at how simple that would be.

264
00:10:57,000 --> 00:10:57,300
Again.

265
00:10:57,300 --> 00:10:59,700
We will not really be doing smooth scrolling in the game because I

266
00:10:59,700 --> 00:10:59,800
don't

267
00:11:00,000 --> 00:11:00,700
Super like that.

268
00:11:00,700 --> 00:11:01,400
Feel of a game.

269
00:11:01,400 --> 00:11:03,000
I like, walking from screen to screen.

270
00:11:03,400 --> 00:11:05,900
But I just wanted to make sure everyone would be aware that.

271
00:11:05,900 --> 00:11:08,800
The engine could support either one and we're not actually cutting any

272
00:11:08,800 --> 00:11:09,500
Corners there.

273
00:11:09,900 --> 00:11:12,300
It's just something that I don't think is particularly interesting.

274
00:11:12,300 --> 00:11:17,600
So in here, we do our drawing with our Center X Center y, right?

275
00:11:17,800 --> 00:11:22,300
And basically all of the tiles when we draw them are based off of that

276
00:11:22,300 --> 00:11:23,400
Center X Center y.

277
00:11:23,500 --> 00:11:27,400
So if we wanted to, we could just go ahead and add the players offset

278
00:11:27,400 --> 00:11:27,700
in here.

279
00:11:27,700 --> 00:11:29,800
So right now you can see the players off.

280
00:11:29,900 --> 00:11:32,600
Set is being used to offset their position.

281
00:11:32,700 --> 00:11:33,200
Right?

282
00:11:33,400 --> 00:11:34,100
Right here.

283
00:11:34,900 --> 00:11:39,300
We can just go ahead if we want to and make that offset the world's

284
00:11:39,300 --> 00:11:41,400
physician the opposite direction, right?

285
00:11:41,400 --> 00:11:46,200
So instead of adding that in here, I will just subtract it from from

286
00:11:46,200 --> 00:11:47,400
where we're drawing the tiles.

287
00:11:47,600 --> 00:11:51,000
And instead of subtracting this and here, I will add it to where we're

288
00:11:51,000 --> 00:11:52,400
drawing the tiles, right?

289
00:11:52,400 --> 00:11:54,700
And that would be a pretty straightforward way.

290
00:11:54,700 --> 00:11:56,600
I believe to make that happen.

291
00:11:56,800 --> 00:11:59,800
Hmm, I believe, you know, don't quote me on this but

292
00:12:00,100 --> 00:12:00,900
So there you go.

293
00:12:01,300 --> 00:12:02,700
That's smooth scrolling, right?

294
00:12:02,700 --> 00:12:05,700
That's the way you would normally see it in a game where the player

295
00:12:05,700 --> 00:12:09,000
was locked in the center and you scrolled around obviously, we could

296
00:12:09,000 --> 00:12:11,400
put logic in there for the camera about when you would actually do

297
00:12:11,400 --> 00:12:14,300
that scrolling, if we wanted to make it so that you only scrolled when

298
00:12:14,300 --> 00:12:15,200
you hit the end.

299
00:12:15,500 --> 00:12:16,200
But these are things.

300
00:12:16,200 --> 00:12:18,100
Like I said, we're not really doing for this game.

301
00:12:18,400 --> 00:12:22,600
So I just wanted to show how, how simple that was to conceptualize.

302
00:12:23,100 --> 00:12:27,100
So at this point, we sort of have to start thinking about some other

303
00:12:27,100 --> 00:12:27,800
things here.

304
00:12:28,000 --> 00:12:29,800
First of all, we've never really tested.

305
00:12:31,500 --> 00:12:33,300
Our virtual tile system or any of that stuff.

306
00:12:33,300 --> 00:12:36,100
We've never tested a bunch of the things that we implemented

307
00:12:36,100 --> 00:12:36,700
yesterday.

308
00:12:36,800 --> 00:12:40,000
So one thing that we might want to do is start to think about making

309
00:12:40,000 --> 00:12:44,000
like a much bigger world and making some way that we can actually sort

310
00:12:44,000 --> 00:12:47,600
of zoom out and see, like a large part of the world or something like

311
00:12:47,600 --> 00:12:48,000
this.

312
00:12:48,800 --> 00:12:50,100
I'm not sure how we want to do that.

313
00:12:50,100 --> 00:12:50,500
Exactly.

314
00:12:50,500 --> 00:12:51,600
I'll have to think about it.

315
00:12:51,600 --> 00:12:53,800
I also want to take a look at the two dudes in the code base right

316
00:12:53,800 --> 00:12:57,500
now, just to see what they were, just to see where we're at on, on the

317
00:12:57,500 --> 00:12:59,900
stuff that we have to figure out on the tile system.

318
00:13:01,800 --> 00:13:04,300
All right, let's take a look.

319
00:13:04,300 --> 00:13:07,600
So we've got player movement code, which will be doing a little bit

320
00:13:07,600 --> 00:13:08,100
later.

321
00:13:08,700 --> 00:13:11,700
We started using the tell side and M that to do is done.

322
00:13:12,400 --> 00:13:15,900
Let's see, we've got to do some work on our floating Point math.

323
00:13:15,900 --> 00:13:17,500
In here that's going to be a problem.

324
00:13:18,400 --> 00:13:20,200
But that's about it for two dues.

325
00:13:20,200 --> 00:13:22,700
Not a lot of to do is left in our town map system.

326
00:13:23,200 --> 00:13:24,300
So that's pretty cool.

327
00:13:24,700 --> 00:13:28,400
We did this switch that we said we were going to do and so now we can

328
00:13:28,400 --> 00:13:30,000
just document this basically

329
00:13:30,300 --> 00:13:35,800
Um, these are fixed Point Tile locations.

330
00:13:37,400 --> 00:13:44,000
The top Nazi, the High bits are the tile chunk index, and the low bits

331
00:13:44,000 --> 00:13:47,400
are the tile index in the chunk.

332
00:13:47,700 --> 00:13:48,300
Right?

333
00:13:48,400 --> 00:13:53,500
Just so we know what those are and then we kind of said, what we kind

334
00:13:53,500 --> 00:13:53,800
of said.

335
00:13:53,800 --> 00:13:56,600
We're we going to make these offsets from the center for tile.

336
00:14:00,000 --> 00:14:00,800
I don't know.

337
00:14:02,700 --> 00:14:06,000
It kind of feels like we should make them offsets from the center of a

338
00:14:06,000 --> 00:14:08,100
tile because then there's really no bias.

339
00:14:08,500 --> 00:14:11,800
We don't kind of have this sort of concept of an upper corner or, you

340
00:14:11,800 --> 00:14:13,300
know, a left or right or anything like that.

341
00:14:13,300 --> 00:14:17,100
There's just the center is always the center and it's the same whether

342
00:14:17,100 --> 00:14:18,600
you flip upside down or not.

343
00:14:18,600 --> 00:14:19,600
It's all the same.

344
00:14:22,400 --> 00:14:26,200
And that sense, it seems kind of compelling to make it be the offset

345
00:14:26,200 --> 00:14:28,500
of the offsets be from the center of the tile.

346
00:14:31,800 --> 00:14:35,700
But at the same time, if the off sensor from the center of the tile,

347
00:14:35,700 --> 00:14:37,300
I'm just trying to think about.

348
00:14:37,600 --> 00:14:39,700
So then we would just do a rounding operation.

349
00:14:39,700 --> 00:14:42,900
I supposed to figure out which tile we were in.

350
00:14:43,600 --> 00:14:44,600
I don't know.

351
00:14:44,800 --> 00:14:49,100
It's tough to say I guess maybe let's try making it from the center of

352
00:14:49,100 --> 00:14:49,500
the tile.

353
00:14:49,500 --> 00:14:50,700
Let's see what happens.

354
00:14:51,200 --> 00:14:54,700
And then we'll basically say whether or not we like that one way or

355
00:14:54,700 --> 00:14:55,200
the other.

356
00:14:55,800 --> 00:14:57,200
So we basically have

357
00:14:58,800 --> 00:14:59,800
we have a tile side, and

358
00:15:00,000 --> 00:15:03,300
First, we could change that tile side and M to basically be a tile

359
00:15:03,300 --> 00:15:04,200
radius in meters.

360
00:15:04,400 --> 00:15:08,200
If you will and we can sort of start to think about it as being

361
00:15:08,200 --> 00:15:08,900
measured this way.

362
00:15:08,900 --> 00:15:12,700
So we basically have a center position and we've got, you know a

363
00:15:12,700 --> 00:15:17,200
radius out to here and that radius is the same in all directions.

364
00:15:17,400 --> 00:15:20,800
So that would basically be our, it would be half what we were doing

365
00:15:20,800 --> 00:15:21,000
now.

366
00:15:21,000 --> 00:15:25,500
I think we said that tiles were 1.4 meters and we were basically

367
00:15:25,500 --> 00:15:29,900
saying something like okay, now if we divide that by two, they'd be

368
00:15:30,000 --> 00:15:32,500
point seven meters in radius, right?

369
00:15:33,000 --> 00:15:34,000
So that was one thing we could do.

370
00:15:34,000 --> 00:15:38,300
Someone also suggested that they like the idea of having of a nice one

371
00:15:38,300 --> 00:15:40,100
meter, a nice unit measure.

372
00:15:40,200 --> 00:15:44,000
One thing we could think about doing is making the tiles V, 2 meters

373
00:15:44,000 --> 00:15:44,600
long.

374
00:15:44,600 --> 00:15:45,900
If the tiles are two meters long.

375
00:15:45,900 --> 00:15:47,300
The radius would be 1 meter.

376
00:15:47,700 --> 00:15:49,200
I don't know if that's a compelling thing.

377
00:15:49,300 --> 00:15:50,600
Hard to hard to say.

378
00:15:54,100 --> 00:15:57,500
But it is something to think about, that's another thing we could try.

379
00:15:58,500 --> 00:15:59,600
So, I don't know.

380
00:16:00,000 --> 00:16:00,700
I don't know.

381
00:16:00,700 --> 00:16:02,600
I don't have a strong feeling today.

382
00:16:02,600 --> 00:16:04,700
I'm not sure what the best stuff to do is here.

383
00:16:05,200 --> 00:16:07,200
So I think maybe I will just go ahead.

384
00:16:08,700 --> 00:16:10,200
I will just go ahead and say

385
00:16:15,200 --> 00:16:16,600
Yeah, let's let's do it for the center.

386
00:16:16,800 --> 00:16:17,300
I don't know.

387
00:16:17,700 --> 00:16:20,300
I think this is the case where I just got to do an experiment here and

388
00:16:20,300 --> 00:16:21,800
see whether I liked it better or not.

389
00:16:21,800 --> 00:16:22,600
I don't really know.

390
00:16:23,200 --> 00:16:26,000
And so if we have our economic collapse coordinates, basically, this

391
00:16:26,000 --> 00:16:27,500
is the place where it's going to affect things.

392
00:16:27,700 --> 00:16:28,600
This tile relative.

393
00:16:28,600 --> 00:16:29,500
Exhale relative.

394
00:16:29,500 --> 00:16:32,500
Why is going to take on a little bit of a different meaning if now

395
00:16:32,500 --> 00:16:34,100
what we basically say is, okay.

396
00:16:34,200 --> 00:16:35,000
This is the center.

397
00:16:35,000 --> 00:16:39,300
So the time that we need to offset where our tile actually was is just

398
00:16:39,300 --> 00:16:42,800
going to be about how far we are from that Center and when that

399
00:16:42,800 --> 00:16:44,800
distance gets larger than the tile radio,

400
00:16:46,000 --> 00:16:48,400
Then we will go ahead and update it.

401
00:16:48,700 --> 00:16:49,500
So, let's take a look.

402
00:16:49,500 --> 00:16:50,000
Here.

403
00:16:50,400 --> 00:16:54,300
We saying the world is assumed to be to a real topology.

404
00:16:54,700 --> 00:16:57,400
If you step off one and you come back on the other.

405
00:16:57,400 --> 00:16:58,300
Oh, you know what?

406
00:16:59,200 --> 00:17:02,100
Maybe I can think of a reason why you wouldn't want this.

407
00:17:03,300 --> 00:17:06,300
Maybe I can, you know, what?

408
00:17:06,700 --> 00:17:07,300
Can I?

409
00:17:15,000 --> 00:17:18,099
No, no, I can't really, I don't think I can, I almost did.

410
00:17:18,400 --> 00:17:20,800
I was thinking maybe that there is a reason not to do it.

411
00:17:20,900 --> 00:17:21,599
So let's take a look.

412
00:17:21,599 --> 00:17:23,500
I'm going to take a look at what happens when we do this.

413
00:17:23,800 --> 00:17:29,000
Alright, so if we basically said, cure is where are our Center Point

414
00:17:29,000 --> 00:17:30,400
is on the number line.

415
00:17:31,100 --> 00:17:35,100
We're at the center of the tile, and that's right on a numeric

416
00:17:35,100 --> 00:17:35,900
boundary or right?

417
00:17:35,900 --> 00:17:36,800
That's zero.

418
00:17:37,200 --> 00:17:40,900
And so then we have some number Crossing where basically, if we go

419
00:17:40,900 --> 00:17:42,400
over that crossing right now, it would be

420
00:17:42,500 --> 00:17:43,600
Be 1.4.

421
00:17:43,600 --> 00:17:48,200
So be -1.4 is to be positive one point for when we do the Divide out

422
00:17:48,200 --> 00:17:52,400
by 1.4., What we would get is essentially, we would normalize this

423
00:17:52,400 --> 00:17:56,300
down to a negative 1, positive 1, right.

424
00:17:57,000 --> 00:17:59,800
And here's our zero, and we've got, you know.

425
00:18:00,000 --> 00:18:06,500
Our our Vector here, what we would then do I guess is instead of doing

426
00:18:06,500 --> 00:18:11,500
the flooring we would just do around around in function, right?

427
00:18:11,500 --> 00:18:14,000
Because we just want to know the closest whole number.

428
00:18:14,000 --> 00:18:17,300
Because remember, we've got the, we're talking about the tile.

429
00:18:17,300 --> 00:18:20,800
We've got an offset from the center of the tile, and now we want to

430
00:18:20,800 --> 00:18:22,200
renormalize one of our coordinates.

431
00:18:22,200 --> 00:18:23,900
If it was pointing outside the tile.

432
00:18:23,900 --> 00:18:26,700
We basically just want to find out where the nearest whole number was

433
00:18:26,700 --> 00:18:29,800
and then we're going to make it an offset from that.

434
00:18:30,000 --> 00:18:30,400
That right.

435
00:18:30,400 --> 00:18:32,300
So we're just talking about a rounding operation.

436
00:18:32,300 --> 00:18:35,200
Now, we just need to basically do a rounding operation.

437
00:18:36,300 --> 00:18:37,800
So, how do we want to do?

438
00:18:38,100 --> 00:18:39,800
How do we do that rounding operation?

439
00:18:40,000 --> 00:18:41,000
And the other question too?

440
00:18:41,000 --> 00:18:43,500
Is the routing operation.

441
00:18:44,300 --> 00:18:45,800
What that we would have to do.

442
00:18:45,900 --> 00:18:48,700
We also have the question of how do we support that rounding operation

443
00:18:48,700 --> 00:18:49,200
in float?

444
00:18:49,200 --> 00:18:50,800
Because we're going to have to handle negative numbers.

445
00:18:50,800 --> 00:18:51,000
Now.

446
00:18:51,000 --> 00:18:52,900
I don't remember if we handle negative numbers in are rounding.

447
00:18:52,900 --> 00:18:53,600
Probably not.

448
00:18:54,100 --> 00:18:57,400
So, basically the way we were doing rounding before is we were

449
00:18:57,400 --> 00:19:01,400
basically just adding point five and then truncating.

450
00:19:01,400 --> 00:19:05,000
So basically we have the truncation, the truncation goes towards zero,

451
00:19:05,200 --> 00:19:05,600
right?

452
00:19:06,000 --> 00:19:07,000
Any on the circumstance?

453
00:19:07,400 --> 00:19:12,200
And so basically we would have to change the direction that we added

454
00:19:12,200 --> 00:19:14,800
in order to do the rounding when we get to 0.

455
00:19:14,800 --> 00:19:17,000
We'd have to we'd have to make it flip, right?

456
00:19:17,000 --> 00:19:19,800
Because what we were doing before for rounding, I don't know if you

457
00:19:19,800 --> 00:19:21,000
remember when I said this.

458
00:19:21,500 --> 00:19:25,800
Basically, for rounding, we had something where we would take, you

459
00:19:25,800 --> 00:19:27,700
know, the point five, right?

460
00:19:27,700 --> 00:19:31,200
And we wanted anyone who is in this part to round up and anyone who is

461
00:19:31,200 --> 00:19:32,500
in this part to round down.

462
00:19:32,800 --> 00:19:35,800
So what we did is we just added point five and then truncated

463
00:19:35,900 --> 00:19:39,200
So that would push people in the upper quadrant over here and then the

464
00:19:39,200 --> 00:19:42,100
truncation would knock them back down and people here would knock up

465
00:19:42,100 --> 00:19:44,900
as well, but they would not pass the next whole number.

466
00:19:44,900 --> 00:19:46,000
So they would come back down.

467
00:19:46,500 --> 00:19:48,200
If we have negative numbers.

468
00:19:48,600 --> 00:19:52,100
Unfortunately, I believe since the rounding Direction flips the I mean

469
00:19:52,100 --> 00:19:53,100
the truncation direction.

470
00:19:53,100 --> 00:19:56,700
Flips, we would technically want to be subtracting point five if we

471
00:19:56,700 --> 00:20:00,200
wanted to round properly and so we can actually Implement that.

472
00:20:00,900 --> 00:20:01,300
Again.

473
00:20:01,300 --> 00:20:05,500
We have not actually written that in our in our intrinsics.

474
00:20:06,600 --> 00:20:06,900
Right.

475
00:20:06,900 --> 00:20:10,900
All we did was this which will only work for a positive numbers.

476
00:20:11,100 --> 00:20:13,800
So we'd beat basically be in another circumstance where we have to

477
00:20:13,800 --> 00:20:15,400
lean on math.h.

478
00:20:15,400 --> 00:20:17,900
I believe we can use the round function.

479
00:20:17,900 --> 00:20:18,300
There.

480
00:20:18,900 --> 00:20:19,700
Let's see.

481
00:20:19,700 --> 00:20:23,400
CRT round or I should say round F.

482
00:20:23,400 --> 00:20:26,300
I believe, I don't actually remember if we, they actually have one of

483
00:20:26,300 --> 00:20:26,700
these.

484
00:20:27,200 --> 00:20:28,000
Let's take a look.

485
00:20:28,300 --> 00:20:29,500
Let's take a look.

486
00:20:30,900 --> 00:20:35,700
Although we could also just keep using floor and and do the bias on

487
00:20:35,700 --> 00:20:36,200
floor as well.

488
00:20:37,300 --> 00:20:39,200
So, let's see what we actually have.

489
00:20:39,200 --> 00:20:40,400
Yeah, so there is a round F.

490
00:20:40,400 --> 00:20:41,800
I don't know why it wasn't getting found.

491
00:20:42,600 --> 00:20:47,500
So round f is is what we would be doing and so really.

492
00:20:49,200 --> 00:20:52,600
Yeah, I think this basically ends up being exactly the same thing and

493
00:20:52,600 --> 00:20:55,400
we're still, you know, this is our intrinsic stuff is basically going

494
00:20:55,400 --> 00:20:57,300
to have to re-implement these functions.

495
00:20:57,900 --> 00:20:59,800
Now, they will actually get in Trent we

496
00:21:00,000 --> 00:21:04,400
See that when we turn on intrinsic and FP fast in our build line.

497
00:21:04,400 --> 00:21:08,100
I don't know if you remember this, from one of the q&as if we turn on

498
00:21:08,700 --> 00:21:13,100
020 ifp fast, we don't actually call the C runtime library for these.

499
00:21:13,900 --> 00:21:15,600
I think in a lot of circumstances.

500
00:21:15,800 --> 00:21:19,600
And so, technically we wouldn't probably have to re-implement these

501
00:21:19,600 --> 00:21:20,000
ourselves.

502
00:21:20,000 --> 00:21:22,500
The compiler would do them for us, but we might as well learn how to

503
00:21:22,500 --> 00:21:23,000
implement them.

504
00:21:23,000 --> 00:21:26,400
Anyway, So eventually we'll get around to that as well.

505
00:21:26,600 --> 00:21:29,900
Alright, so I believe all we really

506
00:21:30,000 --> 00:21:34,200
Want to do here is make sure that these things round properly, the

507
00:21:34,200 --> 00:21:36,000
truncations there, sine and cosine.

508
00:21:36,000 --> 00:21:38,400
So we are basically calling the C runtime library for these sorts of

509
00:21:38,400 --> 00:21:38,800
things.

510
00:21:39,000 --> 00:21:44,700
And this will be our to do to convert these to our own at some point

511
00:21:44,800 --> 00:21:45,400
in the future.

512
00:21:45,600 --> 00:21:46,000
Okay.

513
00:21:47,400 --> 00:21:48,600
What are we complaining about?

514
00:21:48,600 --> 00:21:50,000
We've have an extra parentheses.

515
00:21:50,100 --> 00:21:50,600
There we go.

516
00:21:51,800 --> 00:21:55,600
So, if I want to do that, and I don't know if anyone actually uses

517
00:21:55,600 --> 00:21:58,300
that right now, okay, there are some people who use it for rent for

518
00:21:58,600 --> 00:22:00,600
for the rectangle drawing routine.

519
00:22:00,900 --> 00:22:03,300
So I'll double check to make sure that they still work properly, but I

520
00:22:03,300 --> 00:22:04,400
believe that they do.

521
00:22:05,400 --> 00:22:09,900
Let's go ahead and make sure that there's no weirdness there.

522
00:22:10,000 --> 00:22:11,100
Yeah, everything's fine there.

523
00:22:11,700 --> 00:22:15,400
So if I want to go ahead and make this change to do it on the center,

524
00:22:16,300 --> 00:22:16,900
the center point.

525
00:22:17,800 --> 00:22:20,400
Basically, all I'm going to need to do now is I'm going to have to

526
00:22:20,400 --> 00:22:24,500
say, all right, we're going to take whatever that tile relative thing

527
00:22:24,500 --> 00:22:25,400
is /.

528
00:22:25,400 --> 00:22:27,200
The tile radius in meters.

529
00:22:28,000 --> 00:22:28,800
Let's see here.

530
00:22:31,600 --> 00:22:35,000
And so you can kind of see in some sense.

531
00:22:35,000 --> 00:22:39,000
You can kind of see what I'm a little concerned about.

532
00:22:39,800 --> 00:22:42,300
In fact, this was the thing that I sort of said in my head and maybe,

533
00:22:42,300 --> 00:22:46,400
as I'm starting to implement it, I'm thinking that that maybe I was

534
00:22:46,400 --> 00:22:47,600
right to be worried of it.

535
00:22:47,700 --> 00:22:50,100
But basically, here's the part that I'm a little concerned about.

536
00:22:50,700 --> 00:22:54,800
So the only thing that I'm wondering is if we do it from the center

537
00:22:54,800 --> 00:22:58,000
point, if we do it from the center point, so this is the center point

538
00:22:58,000 --> 00:22:59,300
of a tile, right?

539
00:22:59,300 --> 00:23:01,100
And then I'm dividing by the radius.

540
00:23:01,200 --> 00:23:02,600
Which is half the length.

541
00:23:02,600 --> 00:23:05,300
Because this is the point at which it crosses over.

542
00:23:05,900 --> 00:23:09,100
Well, no, I guess I can still just divide.

543
00:23:09,100 --> 00:23:10,800
No, no, okay.

544
00:23:10,800 --> 00:23:11,600
I'm thinking about it wrong.

545
00:23:11,800 --> 00:23:13,200
I can still divide.

546
00:23:13,200 --> 00:23:14,700
I don't need to divide by the radius.

547
00:23:14,700 --> 00:23:20,900
I can still divide by the tile size the tile side in meters and do the

548
00:23:20,900 --> 00:23:24,400
exact same math because the rounding is the thing that makes the

549
00:23:24,400 --> 00:23:26,600
change right round.

550
00:23:26,600 --> 00:23:29,400
Real 32 to in 32 is what will make the change for me.

551
00:23:29,400 --> 00:23:31,200
Because basically what will happen is

552
00:23:31,200 --> 00:23:36,100
Is if I go half the distance which is the radius, the rounding will

553
00:23:36,100 --> 00:23:38,500
push me to the next center point.

554
00:23:38,500 --> 00:23:41,100
So I really don't need to think about the radius at all.

555
00:23:41,100 --> 00:23:42,700
I can really just use the towel cited M.

556
00:23:42,700 --> 00:23:43,000
Again.

557
00:23:43,000 --> 00:23:45,200
It's really just a question of how I do the snapping.

558
00:23:45,200 --> 00:23:46,700
That's kind of nice how that worked out.

559
00:23:47,100 --> 00:23:48,700
I don't know if you guys saw that.

560
00:23:50,000 --> 00:23:51,000
Hopefully, that makes sense.

561
00:23:51,000 --> 00:23:53,200
But basically, I was thinking I was gonna have to do something

562
00:23:53,200 --> 00:23:55,800
different with like the fact that you only go halfway and then you

563
00:23:55,800 --> 00:23:57,300
have to go a full one to get the next one.

564
00:23:57,300 --> 00:23:59,700
But the rounding basically, I think takes care of that.

565
00:24:00,100 --> 00:24:03,900
So I think if we do that rounding, I think we're all good.

566
00:24:04,500 --> 00:24:08,100
Can't think of any particular reason why anything else changes here.

567
00:24:08,100 --> 00:24:09,200
Does anything else change?

568
00:24:09,200 --> 00:24:11,200
Pretty much just are assertions change.

569
00:24:11,500 --> 00:24:16,100
We basically have to make sure that we're bounded on either side by

570
00:24:16,100 --> 00:24:20,900
the radius now, which is this way like that, but I think that might be

571
00:24:20,900 --> 00:24:21,900
all that changes.

572
00:24:23,500 --> 00:24:24,300
I don't know.

573
00:24:26,500 --> 00:24:29,100
So I'm going to say that.

574
00:24:30,900 --> 00:24:34,000
So I think that just works, does it just work?

575
00:24:34,000 --> 00:24:37,200
So I just divided by the tile side of meters around.

576
00:24:37,300 --> 00:24:38,700
That gives me my offset.

577
00:24:39,100 --> 00:24:41,700
I do the offset on their I subtract.

578
00:24:41,700 --> 00:24:43,300
However many I went.

579
00:24:44,800 --> 00:24:46,600
Which seems totally fine.

580
00:24:48,100 --> 00:24:48,400
Yeah.

581
00:24:48,400 --> 00:24:48,800
I don't know.

582
00:24:48,800 --> 00:24:50,800
Gosh, that seems a lot to simple, doesn't it?

583
00:24:50,800 --> 00:24:51,300
People.

584
00:24:51,600 --> 00:24:54,200
I'm a little nervous about the fact that I'm forgetting something or

585
00:24:54,200 --> 00:24:56,900
missing something but that seems pretty simple.

586
00:24:57,300 --> 00:24:59,600
So if that was the entirety of the change,

587
00:25:01,000 --> 00:25:06,000
Then a really, I think the only difference here would be how we draw.

588
00:25:06,600 --> 00:25:10,000
The offset of the guy in terms of the fact that now that it's from the

589
00:25:10,000 --> 00:25:14,700
center instead of from, you know, it's instead of from

590
00:25:16,300 --> 00:25:16,800
excuse me.

591
00:25:18,700 --> 00:25:20,700
Yeah, it's Center instead of from the corner.

592
00:25:21,100 --> 00:25:23,800
So let's take a look at how we were drawing this here.

593
00:25:24,300 --> 00:25:25,300
Center x minus World.

594
00:25:25,300 --> 00:25:30,500
M, 2 pixels game State player Pete, our relative X+ r l column.

595
00:25:30,500 --> 00:25:33,500
So, basically, the problem now, is when we're drawing, these were

596
00:25:33,500 --> 00:25:33,900
drawing.

597
00:25:33,900 --> 00:25:35,600
These, this is good.

598
00:25:35,600 --> 00:25:37,000
The Min X in the Min y.

599
00:25:37,000 --> 00:25:40,000
But now, this is technically the center X and the center.

600
00:25:40,000 --> 00:25:41,100
Why if that makes sense?

601
00:25:41,200 --> 00:25:44,500
Because we're basing it around the player and that, that relative

602
00:25:44,500 --> 00:25:45,700
offset is the center.

603
00:25:45,900 --> 00:25:46,200
A really?

604
00:25:46,200 --> 00:25:52,300
All we need to do is we basically just need to take a little bit of a

605
00:25:52,600 --> 00:25:58,400
of a step there and make this be, you know, I should probably pick a

606
00:25:58,400 --> 00:25:59,700
different name for Center X.

607
00:25:59,700 --> 00:26:03,600
This is actually screen center X would make a little more sense.

608
00:26:04,000 --> 00:26:05,200
So that we know what we're talking about.

609
00:26:05,200 --> 00:26:07,900
Here is the screen center, X screen center.

610
00:26:07,900 --> 00:26:08,300
Why?

611
00:26:08,800 --> 00:26:11,400
And so really, all I need to do is say well, okay, now we're Computing

612
00:26:11,400 --> 00:26:14,500
the center because this tile relative X, Ty relative, why those are

613
00:26:14,600 --> 00:26:15,700
the relative position?

614
00:26:15,800 --> 00:26:18,200
It's of the guy from the center of a tile.

615
00:26:18,200 --> 00:26:21,300
So if you want to draw the tile around them, we have to basically take

616
00:26:21,300 --> 00:26:27,400
the center and subtract half the tile radius from that if that makes

617
00:26:27,400 --> 00:26:27,800
sense.

618
00:26:28,900 --> 00:26:30,800
So I will go ahead and do that.

619
00:26:30,900 --> 00:26:33,900
Of course, we're passing them in Acts and the max is inverted now,

620
00:26:33,900 --> 00:26:37,100
which I guess we don't, don't even really have to do that.

621
00:26:37,100 --> 00:26:39,800
We could just go ahead and normalize these things as well.

622
00:26:40,300 --> 00:26:45,700
Send y, minus 0.5 times World Towson inside and pixels like that.

623
00:26:46,300 --> 00:26:52,400
And I think that is mostly all we would need to do.

624
00:26:52,700 --> 00:26:55,400
I'm not sure again of just kind of slapping that down there.

625
00:26:55,400 --> 00:26:56,600
I just, oh my goodness.

626
00:26:57,100 --> 00:26:58,100
Well, that's no good.

627
00:26:58,300 --> 00:26:58,800
What did I do?

628
00:26:58,800 --> 00:26:59,200
Oh,

629
00:27:00,300 --> 00:27:02,100
This, this doesn't need to be half at all.

630
00:27:02,100 --> 00:27:04,000
Well, it could be we could just face it off the center.

631
00:27:04,000 --> 00:27:05,700
That's what you would do for that.

632
00:27:05,800 --> 00:27:07,600
But yeah, I don't know if you saw what happened.

633
00:27:07,600 --> 00:27:08,000
There is.

634
00:27:08,000 --> 00:27:12,100
I changed the the computation as if it was always going to base off

635
00:27:12,100 --> 00:27:15,700
the center, but then I was still using the Min and the max not very

636
00:27:15,700 --> 00:27:15,800
good.

637
00:27:15,800 --> 00:27:17,800
They're all right.

638
00:27:18,300 --> 00:27:20,300
So, let's see.

639
00:27:23,700 --> 00:27:25,300
Seems pretty good.

640
00:27:26,800 --> 00:27:27,700
That look good to you guys.

641
00:27:27,700 --> 00:27:28,700
It looks good to me.

642
00:27:29,300 --> 00:27:32,900
Looks like it's working to me seems to move the tile but he's on his

643
00:27:32,900 --> 00:27:33,700
Active Child moves.

644
00:27:33,700 --> 00:27:35,000
Every time we do that.

645
00:27:36,100 --> 00:27:39,100
So yeah, that seems pretty good.

646
00:27:39,500 --> 00:27:44,600
So maybe now would be a good time to start thinking about.

647
00:27:44,800 --> 00:27:46,000
And I guess now that I think about it.

648
00:27:46,000 --> 00:27:49,000
I'm going to have to maybe, maybe I'll have to have a key here.

649
00:27:49,400 --> 00:27:51,800
Maybe the space bar or something like that or, you know, one of the

650
00:27:51,800 --> 00:27:52,300
buttons.

651
00:27:53,400 --> 00:27:57,300
I think to speed this guy up so I can walk around the world a little

652
00:27:57,300 --> 00:27:57,900
faster.

653
00:27:58,700 --> 00:28:02,500
He's pretty, he's pretty slow for debugging purposes.

654
00:28:02,800 --> 00:28:04,700
I don't know if depending on how the game works out.

655
00:28:04,700 --> 00:28:07,900
Maybe that won't be too slow for the game, but I probably want to have

656
00:28:07,900 --> 00:28:11,100
a key that allows me to scoot around the world just a little faster.

657
00:28:11,100 --> 00:28:14,600
So what I'm thinking about here is perhaps, we just have a little

658
00:28:14,600 --> 00:28:15,200
thing.

659
00:28:15,400 --> 00:28:16,500
Temporarily again.

660
00:28:16,500 --> 00:28:19,400
The player movement code is really just not something I want to talk

661
00:28:19,400 --> 00:28:21,500
about yet because we're going to talk about that a lot.

662
00:28:21,800 --> 00:28:22,900
But what I could do

663
00:28:23,200 --> 00:28:26,200
Basically say that there's a player speed and we'll go ahead and make

664
00:28:26,500 --> 00:28:30,300
that player speed be based off one of those one of those key.

665
00:28:30,300 --> 00:28:35,800
So, I know in gear, I basically said that those key down messages,

666
00:28:36,100 --> 00:28:36,600
right?

667
00:28:36,700 --> 00:28:40,800
We were processing, the key down messages and I think I added some

668
00:28:40,800 --> 00:28:41,500
extra ones.

669
00:28:41,700 --> 00:28:42,200
Right?

670
00:28:42,200 --> 00:28:46,300
We've got, we've got the k space and that was the back button.

671
00:28:47,100 --> 00:28:50,200
We've got well, we've got the different buttons here up left.

672
00:28:50,200 --> 00:28:53,000
So maybe when I push up, I'll have them go really fast.

673
00:28:53,100 --> 00:28:56,500
So, I'll just say whenever the up button is down.

674
00:28:57,400 --> 00:28:59,900
Right, and I don't remember, that's action up.

675
00:28:59,900 --> 00:29:01,700
I will just go ahead.

676
00:29:01,700 --> 00:29:03,000
It's demeaning move that in there.

677
00:29:03,000 --> 00:29:06,200
I will just go ahead and make the players feed.

678
00:29:06,200 --> 00:29:07,600
Be quite a bit more than it was.

679
00:29:07,600 --> 00:29:08,300
Right.

680
00:29:08,300 --> 00:29:11,900
And so now when he moves around, if I want to he can he can go into

681
00:29:11,900 --> 00:29:13,800
acceleration mode and that's fine.

682
00:29:13,800 --> 00:29:16,300
You can see I don't know if you can see this too.

683
00:29:16,300 --> 00:29:18,200
When we get to the player movement code.

684
00:29:18,200 --> 00:29:21,200
I'm going to talk about this a lot, but you could already see now why

685
00:29:21,200 --> 00:29:24,800
it's so important to do good player movement code because like you see

686
00:29:24,800 --> 00:29:27,200
how we get stuck on things and stuff that just

687
00:29:27,600 --> 00:29:32,200
Awful when games have this problem, a lot of times, especially if

688
00:29:32,200 --> 00:29:34,100
they're not done by people, with a lot of experience.

689
00:29:34,400 --> 00:29:35,800
They'll have these sorts of problems.

690
00:29:36,200 --> 00:29:38,900
And so, one of the things that's kind of nice is when we do the player

691
00:29:38,900 --> 00:29:41,300
movement, code, will be talking a lot about how to not have that kind

692
00:29:41,300 --> 00:29:43,800
of stickiness, like you want to be able to aim for a door and just go

693
00:29:43,800 --> 00:29:44,400
right through it.

694
00:29:44,500 --> 00:29:46,700
So that'll be fun code to write when we get down there because there's

695
00:29:46,700 --> 00:29:48,200
a lot of interesting things to talk about in there.

696
00:29:48,700 --> 00:29:52,200
Anyway, so what I want to do now is I want to kind of get this world

697
00:29:52,200 --> 00:29:54,000
situation, a little more straightened out.

698
00:29:54,200 --> 00:29:56,400
Let's go ahead and say that we're going to do.

699
00:29:58,900 --> 00:29:59,800
You know how much?

700
00:30:00,000 --> 00:30:00,600
Larger world.

701
00:30:00,600 --> 00:30:02,800
Let's try to put a much larger World in there now, so we can just

702
00:30:02,800 --> 00:30:04,700
start a test the systems, make three things.

703
00:30:04,800 --> 00:30:06,800
Everything's kosher and nothing weird is going on.

704
00:30:07,200 --> 00:30:11,200
So what I want to do is I want to go in and say that instead of this

705
00:30:11,200 --> 00:30:14,500
hand coded, tilemap like we had before let's start thinking about

706
00:30:14,500 --> 00:30:17,400
making something that's going to be more procedural.

707
00:30:17,500 --> 00:30:21,600
And so let's just go ahead and add some very basic things to our tile

708
00:30:21,600 --> 00:30:22,200
map system.

709
00:30:22,500 --> 00:30:26,200
I'm relatively happy at the moment with the way that we're sort of

710
00:30:26,200 --> 00:30:27,000
doing the tile map thing.

711
00:30:27,000 --> 00:30:29,700
So I think I might start to pull that out a little bit.

712
00:30:30,300 --> 00:30:33,000
Into its own file.

713
00:30:33,400 --> 00:30:35,600
I'm thinking that maybe it's a good time to start doing that.

714
00:30:35,600 --> 00:30:39,700
I'm not 100% sure but I'm, you know, I'm leaning towards it.

715
00:30:39,700 --> 00:30:41,200
So I think I might start doing that.

716
00:30:41,600 --> 00:30:49,700
I'm going to make sort of a handmade tile maybe dot h, which will

717
00:30:49,700 --> 00:30:51,600
start to contain this stuff.

718
00:30:51,700 --> 00:30:53,900
And I'm going to go ahead and say that.

719
00:30:53,900 --> 00:30:56,900
Now that I'm relatively happy with it that we're kind of have some

720
00:30:56,900 --> 00:30:57,800
some of this stuff.

721
00:30:58,200 --> 00:30:59,900
We'll kind of go in here and I'm going to

722
00:31:00,000 --> 00:31:04,000
Pull this thing out to basically be, you know, I don't know what we're

723
00:31:04,000 --> 00:31:05,200
going to call this yet.

724
00:31:05,200 --> 00:31:06,600
Maybe we'll call this.

725
00:31:07,900 --> 00:31:09,200
You know, our maybe this.

726
00:31:09,200 --> 00:31:09,900
Well, you know what?

727
00:31:09,900 --> 00:31:11,300
It's just this is the tile map.

728
00:31:11,400 --> 00:31:13,000
This is the map, it's the whole map.

729
00:31:13,400 --> 00:31:17,700
So maybe we'll just call that the tile map for now and that will have

730
00:31:17,700 --> 00:31:19,100
all of our child chunks in it.

731
00:31:19,500 --> 00:31:22,000
It'll have this stuff in here.

732
00:31:22,600 --> 00:31:23,400
There we go.

733
00:31:24,000 --> 00:31:28,400
It will kind of probably in fact all of this stuff that was in world

734
00:31:28,400 --> 00:31:29,800
really this is going to be world.

735
00:31:29,900 --> 00:31:34,100
World will have a tile map because the world will have other things in

736
00:31:34,100 --> 00:31:35,400
it, right?

737
00:31:35,500 --> 00:31:38,100
Because the world will have, you know, and it conducts this included

738
00:31:38,100 --> 00:31:38,600
directly.

739
00:31:39,000 --> 00:31:41,700
The world will have actual achieving.

740
00:31:42,700 --> 00:31:46,000
The world will have actual things in it, like the entities and stuff

741
00:31:46,000 --> 00:31:46,400
as well.

742
00:31:46,400 --> 00:31:50,100
So it'll have the tile map, but it also have the rest of the stuff as

743
00:31:50,100 --> 00:31:50,400
well.

744
00:31:54,500 --> 00:31:55,700
Do I want that to be a pointer?

745
00:31:56,400 --> 00:31:57,100
Maybe I do.

746
00:31:57,300 --> 00:31:58,400
We'll go ahead and make that a pointer.

747
00:31:58,400 --> 00:31:59,200
I'm not sure yet.

748
00:32:00,600 --> 00:32:01,600
Okay.

749
00:32:01,600 --> 00:32:07,800
So now that we have one of these, what I want to do is I want to move

750
00:32:08,100 --> 00:32:11,100
the functions over out into here that we were using.

751
00:32:12,000 --> 00:32:16,300
So I'm going to go ahead and say that we have a bunch of stuff like

752
00:32:16,300 --> 00:32:19,800
the get tile value, and these sorts of things.

753
00:32:20,100 --> 00:32:21,300
There's our draw, a rectangle call.

754
00:32:21,300 --> 00:32:22,600
We're not going to touch that.

755
00:32:23,000 --> 00:32:24,300
Get this out here.

756
00:32:24,800 --> 00:32:26,100
So this will come in.

757
00:32:26,500 --> 00:32:27,000
Oops.

758
00:32:27,000 --> 00:32:28,300
That was the CPP file.

759
00:32:28,600 --> 00:32:29,200
My bad.

760
00:32:29,200 --> 00:32:30,300
Let's paste that into the H value.

761
00:32:30,500 --> 00:32:31,000
Belongs.

762
00:32:31,800 --> 00:32:37,700
So the CPP file will have those get Tau chunk calls in there and these

763
00:32:37,700 --> 00:32:39,100
for now, I don't know.

764
00:32:39,300 --> 00:32:41,300
I think those will probably stay in line for now.

765
00:32:41,700 --> 00:32:47,000
Let's see re canonicalize position, get chunk position for that's

766
00:32:47,000 --> 00:32:49,400
going to be that's something that's based on the town map.

767
00:32:49,400 --> 00:32:52,600
Certainly the tile value and is controlled point.

768
00:32:52,600 --> 00:32:53,000
Empty.

769
00:32:53,000 --> 00:32:54,700
Those are certainly in there as well.

770
00:32:55,500 --> 00:32:58,300
And then there's a question about the coordinates and who measured

771
00:32:58,300 --> 00:32:59,100
manages those.

772
00:32:59,100 --> 00:32:59,900
I'm not sure.

773
00:33:00,000 --> 00:33:01,300
Actually, who that should be.

774
00:33:03,900 --> 00:33:05,000
I really don't know.

775
00:33:05,100 --> 00:33:06,300
Is this a world position?

776
00:33:06,300 --> 00:33:06,800
Technically?

777
00:33:06,800 --> 00:33:08,600
Or is this a tile map position?

778
00:33:08,900 --> 00:33:12,100
It's kind of a tile map position when you think about it, because it's

779
00:33:12,100 --> 00:33:13,900
based on the tile map structure.

780
00:33:14,800 --> 00:33:17,100
So I don't know if that should go in there or not.

781
00:33:17,300 --> 00:33:17,600
Again.

782
00:33:17,600 --> 00:33:20,300
These are kind of questions that I don't know that we really need to

783
00:33:20,300 --> 00:33:23,900
answer all that definitively, but I might go ahead and say that that's

784
00:33:23,900 --> 00:33:26,100
a tile map position and that's going to be our final.

785
00:33:27,400 --> 00:33:31,800
Name for that percent, you know, it's a position on the tile map.

786
00:33:32,300 --> 00:33:34,000
Yeah, that seems kind of reasonable.

787
00:33:34,300 --> 00:33:36,000
So maybe we'll call it that.

788
00:33:36,000 --> 00:33:39,500
Those are Tha map positions and then we will go ahead and call this a

789
00:33:39,500 --> 00:33:42,300
tile map position like that.

790
00:33:42,400 --> 00:33:44,700
And I will go ahead and say in here.

791
00:33:44,700 --> 00:33:47,800
Then we do we will put the canonicalize coordinates.

792
00:33:48,400 --> 00:33:50,700
We will go ahead and put those in here.

793
00:33:50,700 --> 00:33:53,200
Now we could also go ahead, you know that thing we could do is split

794
00:33:53,200 --> 00:33:55,700
these out into their own file as well, which is basically coordinate

795
00:33:55,700 --> 00:33:56,500
oriented.

796
00:33:57,000 --> 00:34:00,200
But I don't know if that's necessary quite yet, so I'm going to go

797
00:34:00,200 --> 00:34:02,400
ahead and just do that much for now.

798
00:34:02,600 --> 00:34:06,800
And we will see what we want to do with that going forwards.

799
00:34:07,200 --> 00:34:11,300
All right, so let's go ahead and make sure that those are all included

800
00:34:11,300 --> 00:34:12,000
in here.

801
00:34:13,100 --> 00:34:16,300
Make sure that that all works and then we will go ahead.

802
00:34:16,300 --> 00:34:18,900
And why do I not have tile map?

803
00:34:18,900 --> 00:34:20,400
That's in handmade .h.

804
00:34:20,400 --> 00:34:21,100
That's the problem.

805
00:34:21,800 --> 00:34:26,800
So, handmade .h, this stuff should be probably

806
00:34:27,699 --> 00:34:31,600
probably how I want to do this.

807
00:34:31,600 --> 00:34:33,199
See handmade that H has these things.

808
00:34:33,199 --> 00:34:35,600
So I probably want one more h-file.

809
00:34:35,900 --> 00:34:40,199
Handmade H is kind of our basic stuff if you will.

810
00:34:40,500 --> 00:34:43,000
Well, you know, it doesn't really matter how I decide to do this for

811
00:34:43,000 --> 00:34:43,300
now.

812
00:34:43,600 --> 00:34:45,699
So I think, maybe what I'll do is I'll just do it this way.

813
00:34:47,600 --> 00:34:49,000
We can deal with that, a little later on.

814
00:34:49,600 --> 00:34:55,199
All right, so now tile basically World becomes tilemap.

815
00:34:55,500 --> 00:34:59,200
So basically World becomes tilemap everywhere.

816
00:34:59,400 --> 00:34:59,900
I guess.

817
00:35:00,000 --> 00:35:01,600
Actually, I shouldn't say World becomes.

818
00:35:01,600 --> 00:35:02,800
Tilemap everywhere.

819
00:35:03,600 --> 00:35:06,200
So let's go ahead and make that happen.

820
00:35:06,800 --> 00:35:07,500
There we go.

821
00:35:08,000 --> 00:35:09,900
Let's do a nice little place there.

822
00:35:10,400 --> 00:35:14,700
Oops, didn't mean to stick a y in there and then World becomes tilemap

823
00:35:15,400 --> 00:35:17,100
that, there we go.

824
00:35:18,500 --> 00:35:23,900
This redefinition tile chunk.

825
00:35:23,900 --> 00:35:24,300
That's right.

826
00:35:24,300 --> 00:35:25,200
This is pal chunk.

827
00:35:25,200 --> 00:35:27,600
Not calm at this.

828
00:35:28,600 --> 00:35:29,200
There we go.

829
00:35:29,900 --> 00:35:34,500
And now, this stuff is actually stuff that gets allocated, or sorry,

830
00:35:34,500 --> 00:35:37,800
that gets handled by.

831
00:35:38,200 --> 00:35:40,100
Yeah, by our tile map.

832
00:35:41,400 --> 00:35:43,400
So those will all be initialized.

833
00:35:43,400 --> 00:35:46,400
Well, I guess I could still do it this way for now, but I want to

834
00:35:46,400 --> 00:35:49,000
start moving things kind of over into a little bit more, proper space.

835
00:35:49,000 --> 00:35:50,000
We'll see how that goes.

836
00:35:50,800 --> 00:35:51,100
Sorry.

837
00:35:51,100 --> 00:35:53,800
It's a little bit of dead time here, but I just got to kind of clean

838
00:35:53,800 --> 00:35:54,400
things up.

839
00:35:54,700 --> 00:35:55,800
When you make a change like this.

840
00:35:55,800 --> 00:35:57,100
I guess World dot becomes.

841
00:35:57,100 --> 00:35:59,800
Tilemap dot is a pretty safe changed.

842
00:36:00,100 --> 00:36:01,200
Make everywhere.

843
00:36:01,200 --> 00:36:02,600
So I will just make it.

844
00:36:03,100 --> 00:36:03,700
There we go.

845
00:36:04,300 --> 00:36:08,600
And now we've I thought we did world that we gonna have to miss that

846
00:36:08,600 --> 00:36:09,000
guy.

847
00:36:10,000 --> 00:36:14,800
World position becomes tilemap position as well.

848
00:36:15,200 --> 00:36:20,500
We go to toot and now we've got a couple more of these guys.

849
00:36:20,500 --> 00:36:23,100
So World becomes tile map.

850
00:36:23,200 --> 00:36:23,500
Yeah.

851
00:36:24,000 --> 00:36:24,500
Yep.

852
00:36:28,000 --> 00:36:28,500
Here we go.

853
00:36:29,200 --> 00:36:34,100
And that brought up a good point, which is, this is no longer is, is

854
00:36:34,300 --> 00:36:36,500
tilemap point and oh, we are did that one as well?

855
00:36:36,800 --> 00:36:37,500
All right, good.

856
00:36:38,300 --> 00:36:41,800
So that should hopefully leave us exactly where we were and it did.

857
00:36:42,200 --> 00:36:45,300
So, what I want to do now is I essentially want to have a way to start

858
00:36:45,300 --> 00:36:46,600
writing to this tile map.

859
00:36:46,900 --> 00:36:51,200
What I want to be able to do is basically set the tile type of any

860
00:36:51,200 --> 00:36:52,500
place in the world.

861
00:36:54,600 --> 00:36:56,100
I don't care if it's particularly slow.

862
00:36:56,900 --> 00:36:59,100
I just want to be able to start reading the tile map.

863
00:36:59,100 --> 00:36:59,600
Right?

864
00:37:00,000 --> 00:37:03,500
So what I want to do is I want to do something that just starts making

865
00:37:03,900 --> 00:37:04,300
Maps.

866
00:37:04,300 --> 00:37:05,000
Basically.

867
00:37:05,600 --> 00:37:07,100
I don't know exactly how we want to do this.

868
00:37:07,100 --> 00:37:08,900
It's a kind of a good question.

869
00:37:10,200 --> 00:37:14,600
And I'm not sure but basically what I guess I would say is at startup.

870
00:37:14,800 --> 00:37:18,200
Now when we kind of come in here instead of having this thing and I

871
00:37:18,200 --> 00:37:20,100
really want to do this thing at all.

872
00:37:21,100 --> 00:37:25,800
We kind of had our 17 by 9 idea of how big a screen was.

873
00:37:26,100 --> 00:37:28,100
So I'm just going to vaporize this goodbye.

874
00:37:29,100 --> 00:37:33,300
And then what I'm going to do is I'm going to say, okay in our is

875
00:37:33,300 --> 00:37:37,000
initialized, when we are not Alysha lized, we are going to go ahead

876
00:37:37,000 --> 00:37:38,400
and do a little

877
00:37:39,800 --> 00:37:43,900
World construction, I don't know how many screens will make.

878
00:37:43,900 --> 00:37:48,000
It doesn't really matter, but I'll basically say something like, you

879
00:37:48,000 --> 00:37:51,200
know, screen X or screen.

880
00:37:51,200 --> 00:37:53,600
Y equals zero screen Y is less than that.

881
00:37:53,600 --> 00:37:58,300
On our, let's say we make thirty two screens in that direction and

882
00:37:58,300 --> 00:37:59,900
thirty two screens and X as well.

883
00:38:00,700 --> 00:38:01,700
I don't know why not.

884
00:38:02,300 --> 00:38:04,600
But basically, what we're going to do here is just going to generate

885
00:38:04,600 --> 00:38:07,800
whatever random stuff we want to generate.

886
00:38:08,600 --> 00:38:12,600
So we'll go ahead in there and then I'll say tile x equals zero tile

887
00:38:12,600 --> 00:38:13,100
X.

888
00:38:15,800 --> 00:38:17,700
Is less than whatever we said that.

889
00:38:17,700 --> 00:38:19,600
Tell thing was I think we said it was 17.

890
00:38:20,200 --> 00:38:23,300
In fact, I'll go ahead and basically make some kind of defined for

891
00:38:23,300 --> 00:38:31,100
this here, which is that, you know, screen width is going to be 17 or

892
00:38:31,700 --> 00:38:38,000
tiles per width is 17 and tiles per height is 9 because I think that's

893
00:38:38,000 --> 00:38:38,800
what we said.

894
00:38:39,300 --> 00:38:44,200
So we'll say tiles per width and we will go ahead and do those, and

895
00:38:44,200 --> 00:38:45,400
we'll also go ahead and

896
00:38:46,100 --> 00:38:52,400
Unit 32 tile, y equals x, y less than tiles per height, so I'm just

897
00:38:52,400 --> 00:38:56,400
going to spam down some tiles here so that we can make a world.

898
00:38:56,900 --> 00:38:59,600
And actually, I guess at the outset, I might as well just

899
00:39:00,000 --> 00:39:03,100
Zeros everywhere, because, why not?

900
00:39:03,300 --> 00:39:09,000
So let's just go ahead and say set tile value and will pass the tile

901
00:39:09,000 --> 00:39:09,600
map.

902
00:39:09,700 --> 00:39:12,600
Which we haven't decided, how we're going to get yet, and we'll pass

903
00:39:12,600 --> 00:39:14,100
the ABS to accept.

904
00:39:14,100 --> 00:39:17,500
I'll Y, and we'll say that, we're going to set it to 0, which means

905
00:39:17,500 --> 00:39:18,600
that there's nothing in there.

906
00:39:19,000 --> 00:39:22,100
Now, the app style X and the ABS tile y AB style.

907
00:39:22,100 --> 00:39:28,500
X is just going to be equal to the screen x times.

908
00:39:28,500 --> 00:39:29,900
However many there were a witness.

909
00:39:30,000 --> 00:39:35,700
With right, plus, whatever, whatever.

910
00:39:35,700 --> 00:39:37,200
We're actually on for a tile, right?

911
00:39:37,200 --> 00:39:37,700
That's it.

912
00:39:37,700 --> 00:39:39,000
That's, that's all we're doing here.

913
00:39:40,400 --> 00:39:40,700
Right?

914
00:39:40,700 --> 00:39:42,400
So that's the absolute tile index.

915
00:39:43,500 --> 00:39:45,700
And then we're just going to go ahead and write some logic in here to

916
00:39:45,700 --> 00:39:46,700
actually make something.

917
00:39:47,200 --> 00:39:48,900
But at the moment, we can skip that.

918
00:39:49,600 --> 00:39:52,700
So we're going to do this will spam that in there.

919
00:39:52,700 --> 00:39:53,400
That'll be nice.

920
00:39:53,400 --> 00:39:55,900
But we do have a problem, which is we don't really know where to get

921
00:39:55,900 --> 00:39:56,700
our town map from.

922
00:39:56,700 --> 00:39:59,800
And so we are actually going to go ahead and get our town.

923
00:40:00,000 --> 00:40:03,300
Up from our game State now.

924
00:40:03,300 --> 00:40:06,600
So we'll get rid of well, you know, what, we'll have the world I guess

925
00:40:06,900 --> 00:40:07,100
or do.

926
00:40:07,100 --> 00:40:08,800
We really need the world to be in the game State?

927
00:40:08,800 --> 00:40:10,600
I don't know if we should have a secondary structure for it.

928
00:40:11,100 --> 00:40:11,900
What the heck?

929
00:40:12,000 --> 00:40:13,200
Let's go ahead and do that.

930
00:40:13,300 --> 00:40:14,600
We'll just have a pointer to a world.

931
00:40:14,600 --> 00:40:19,000
Will have the tile map for that world and we will have well, I guess

932
00:40:19,000 --> 00:40:20,300
that's all we really need for now.

933
00:40:20,900 --> 00:40:25,900
So we will basically say that we have a world which we will create

934
00:40:25,900 --> 00:40:26,100
here.

935
00:40:26,100 --> 00:40:29,800
So gamestate World equals some magic function.

936
00:40:29,900 --> 00:40:32,100
Action that we're about to write which gives us a world.

937
00:40:32,100 --> 00:40:38,100
We will then say that our world is that and we will use that world.

938
00:40:38,100 --> 00:40:43,100
So our world tilemap, we will set the value and we need to do all of

939
00:40:43,100 --> 00:40:43,600
this stuff.

940
00:40:43,600 --> 00:40:46,600
Only once now, we were you doing it every update before we don't need

941
00:40:46,600 --> 00:40:47,400
to do that anymore.

942
00:40:47,400 --> 00:40:50,800
We can basically do that once when we create that tile map.

943
00:40:51,200 --> 00:40:54,500
So basically, what we'll do here is we'll save the world, tilemap

944
00:40:54,500 --> 00:40:55,900
equals, you know.

945
00:40:59,400 --> 00:41:01,800
I guess what we can do is say that it's going to be the address to

946
00:41:01,800 --> 00:41:02,600
something that we push.

947
00:41:02,700 --> 00:41:04,100
We need this thing again up here.

948
00:41:04,500 --> 00:41:06,600
I'm sort of skirting around something that we're about to write

949
00:41:06,600 --> 00:41:09,400
because that'll be probably the bulk of the next 20.

950
00:41:09,400 --> 00:41:11,900
Minutes is actually getting started on something that we haven't

951
00:41:11,900 --> 00:41:13,100
written yet that we need for this.

952
00:41:13,500 --> 00:41:17,300
But anyway, we'll then go ahead and write into this tile map.

953
00:41:17,600 --> 00:41:21,300
Well, I guess I can quickly just do a thing, which says, town map, dot

954
00:41:21,300 --> 00:41:22,900
equals, tilemap arrow.

955
00:41:22,900 --> 00:41:25,800
That will go ahead and take care of all these guys.

956
00:41:25,900 --> 00:41:27,400
Oops, didn't you do that?

957
00:41:28,500 --> 00:41:29,100
And

958
00:41:29,600 --> 00:41:30,400
Then.

959
00:41:33,000 --> 00:41:40,900
All I should have to do now is actually go ahead and grab that towel

960
00:41:40,900 --> 00:41:43,200
map out after we actually create it.

961
00:41:43,700 --> 00:41:48,500
So Will basically do tilemap start AA map equals world's tile map.

962
00:41:49,000 --> 00:41:52,500
Okay, so we just have to do our allocation stuff here, which we

963
00:41:52,500 --> 00:41:54,500
haven't really made any system for doing any of that stuff yet.

964
00:41:54,500 --> 00:41:58,200
So we're going to have to go do that and then we will go ahead and do

965
00:41:58,200 --> 00:41:59,800
our set towel values.

966
00:42:00,000 --> 00:42:01,200
Which will happen here.

967
00:42:01,800 --> 00:42:04,100
And we might have to pass that a little bit more since that thing is

968
00:42:04,100 --> 00:42:07,600
going to have to be able to, to push new pages and so on.

969
00:42:08,200 --> 00:42:09,500
So we'll do that.

970
00:42:09,800 --> 00:42:15,500
And then when we come out here, we will need to do exactly the same

971
00:42:15,500 --> 00:42:16,900
things that we did in here.

972
00:42:16,900 --> 00:42:20,500
We will need to take our game State structure and grab the tile map

973
00:42:20,500 --> 00:42:21,400
and stuff out of there.

974
00:42:21,400 --> 00:42:22,500
The world in the town map.

975
00:42:23,100 --> 00:42:27,200
And so now tilemap dot becomes tilemap are oh there we go.

976
00:42:27,400 --> 00:42:29,800
Going in there and

977
00:42:30,000 --> 00:42:31,000
Let's see where we're at.

978
00:42:31,200 --> 00:42:32,800
So we haven't implemented those.

979
00:42:33,100 --> 00:42:36,600
The set tell value, we haven't implemented, but we will the re

980
00:42:36,600 --> 00:42:44,600
canonicalize position that is no longer taking address of tilemap.

981
00:42:44,600 --> 00:42:47,600
So address of tile map is just going to be tilemap because now that's

982
00:42:47,600 --> 00:42:48,300
a pointer.

983
00:42:48,400 --> 00:42:50,200
So it doesn't need to take its address anymore.

984
00:42:50,200 --> 00:42:50,800
There we go.

985
00:42:52,000 --> 00:42:53,200
And what else we got?

986
00:42:53,200 --> 00:42:54,300
What else we got here?

987
00:42:54,300 --> 00:42:56,700
Player left player with okay.

988
00:42:56,700 --> 00:42:59,900
So the player with we

989
00:43:00,100 --> 00:43:01,800
Moved into somewhere unenforced.

990
00:43:01,800 --> 00:43:04,200
So these are actually still we haven't done anything with the player

991
00:43:04,200 --> 00:43:04,400
yet.

992
00:43:04,400 --> 00:43:06,600
So the player with could stay out there.

993
00:43:06,700 --> 00:43:09,800
All right, so now we're down to just those do and the set towel value.

994
00:43:09,800 --> 00:43:13,900
Now, what we can do, if we want to is, we kind of skirt this for a

995
00:43:13,900 --> 00:43:17,500
second by actually just making it allocate ahead of time.

996
00:43:17,500 --> 00:43:18,200
I don't know if I want it.

997
00:43:18,400 --> 00:43:19,700
I'm gonna go big or go home.

998
00:43:19,900 --> 00:43:21,400
I'm going to say, let's just start this.

999
00:43:21,400 --> 00:43:23,500
If we don't finish by the end of the stream, it's not the end of the

1000
00:43:23,500 --> 00:43:23,700
world.

1001
00:43:23,700 --> 00:43:25,700
We're going to be getting into problems that are big enough that they

1002
00:43:25,700 --> 00:43:28,900
don't fit inside one stream anyway, and so that's not really the end

1003
00:43:28,900 --> 00:43:29,500
of the world.

1004
00:43:31,700 --> 00:43:35,100
And I can do the super, super, super, super simple, super simple thing

1005
00:43:35,100 --> 00:43:38,300
first, which is okay.

1006
00:43:38,700 --> 00:43:41,800
Here's the situation that we have found ourselves in now, which is ass

1007
00:43:41,800 --> 00:43:44,900
good situation, to be in because we need to do this eventually and now

1008
00:43:44,900 --> 00:43:46,700
is as good a time as any to get it started.

1009
00:43:48,300 --> 00:43:52,400
We have a world that we would like to start setting tilemap sin.

1010
00:43:52,700 --> 00:43:54,700
And that means we would like it to persist.

1011
00:43:54,700 --> 00:43:58,300
Now, if it's going to persist, it needs to be in our storage are

1012
00:43:58,300 --> 00:43:59,200
persistent storage.

1013
00:43:59,200 --> 00:44:00,300
For the, for the

1014
00:44:00,400 --> 00:44:04,500
Game, and so, what we want to do is we basically have this gigantic

1015
00:44:04,500 --> 00:44:07,800
chunk of memory that we've got for storing the game state in.

1016
00:44:08,200 --> 00:44:10,800
And what we want to do now is we want to start partitioning that

1017
00:44:10,800 --> 00:44:13,200
memory up into stuff that we can use.

1018
00:44:13,200 --> 00:44:15,700
Now, we already use a little bit of that game.

1019
00:44:15,700 --> 00:44:20,100
Memory, just the first few bites of it for our game State structure

1020
00:44:20,400 --> 00:44:22,600
because we did that just as a test, right?

1021
00:44:22,700 --> 00:44:25,000
We did that and we're still using it to store the player.

1022
00:44:25,000 --> 00:44:29,000
That's why the players position can persist across frames.

1023
00:44:29,000 --> 00:44:30,300
Now, what you may not have realized,

1024
00:44:30,400 --> 00:44:30,600
Sighs.

1025
00:44:30,600 --> 00:44:33,500
And what we were doing that whole time, is we work recreating that

1026
00:44:33,500 --> 00:44:34,100
tilemap.

1027
00:44:34,100 --> 00:44:36,100
Every frame the way we're doing it before.

1028
00:44:36,100 --> 00:44:37,700
Remember, it was all in game update and render.

1029
00:44:37,700 --> 00:44:39,600
So, when we came in the game update and render, it would just create

1030
00:44:39,600 --> 00:44:42,200
the tile map on the stack, create the whole world, right?

1031
00:44:42,200 --> 00:44:43,300
On the stack right there.

1032
00:44:43,600 --> 00:44:44,600
We don't want to do that anymore.

1033
00:44:44,600 --> 00:44:46,100
We actually want our world to be persistent.

1034
00:44:46,100 --> 00:44:48,800
So what we want to do is we want to start using some of this game

1035
00:44:48,800 --> 00:44:50,700
memory to store our tile map.

1036
00:44:50,700 --> 00:44:53,700
But of course, we don't actually know how much time that we actually

1037
00:44:53,700 --> 00:44:57,200
need to store because we don't know how many of those pages are

1038
00:44:57,200 --> 00:44:58,000
actually going to be filled.

1039
00:44:58,000 --> 00:44:59,400
We virtualized our town map.

1040
00:44:59,400 --> 00:44:59,800
And so we

1041
00:45:00,000 --> 00:45:03,200
Restore places in the world that actually have tiles in them, but we

1042
00:45:03,200 --> 00:45:04,200
don't know how many they're going to be.

1043
00:45:04,200 --> 00:45:06,800
So what we want to be able to do is basically use a little bit of our

1044
00:45:06,800 --> 00:45:08,500
B for the basic tilemap structure.

1045
00:45:08,500 --> 00:45:11,900
But then we want to allow the town map every time it needs to to

1046
00:45:11,900 --> 00:45:14,200
basically take a little more memory in a little more memory in a

1047
00:45:14,200 --> 00:45:19,000
little more memory from the pool in order to store those pages right

1048
00:45:19,000 --> 00:45:20,100
in order to store those pages.

1049
00:45:20,600 --> 00:45:25,000
So all we really need to do at the at the start right at the very

1050
00:45:25,000 --> 00:45:25,500
start.

1051
00:45:25,500 --> 00:45:26,500
We're not going to do anything too.

1052
00:45:26,500 --> 00:45:27,000
Complicated here.

1053
00:45:27,000 --> 00:45:27,900
All we need to really do it.

1054
00:45:27,900 --> 00:45:28,300
The start.

1055
00:45:28,300 --> 00:45:29,600
It's just have something that can get us.

1056
00:45:29,600 --> 00:45:29,800
Some

1057
00:45:30,000 --> 00:45:31,900
Emery in that permanent store.

1058
00:45:31,900 --> 00:45:35,100
So basically what we need to do is we need to basically say we've got

1059
00:45:35,100 --> 00:45:35,600
a struct here.

1060
00:45:35,600 --> 00:45:36,600
We've got a world.

1061
00:45:36,700 --> 00:45:40,000
What I want to do essentially is I want to I want to basically

1062
00:45:41,600 --> 00:45:44,800
You know, you know, have a thing.

1063
00:45:44,800 --> 00:45:45,800
That's like push memory.

1064
00:45:45,800 --> 00:45:47,000
I want to basically get some memory.

1065
00:45:47,000 --> 00:45:50,000
I want to I want to put some memory onto the stack or reserve some

1066
00:45:50,000 --> 00:45:50,800
memory, grab some memory.

1067
00:45:50,800 --> 00:45:54,100
However, you want to think about it and I want to basically, you know,

1068
00:45:54,100 --> 00:45:55,900
I guess I want to push a struct.

1069
00:45:55,900 --> 00:45:57,900
I want to push World on here, right?

1070
00:45:57,900 --> 00:46:00,300
So I want to get one of those and then I want to do that again.

1071
00:46:00,300 --> 00:46:02,000
I want to push the tile map, right?

1072
00:46:02,000 --> 00:46:04,300
I want to be able to get those so that we can use them.

1073
00:46:04,900 --> 00:46:06,500
Okay, hopefully that makes some sense.

1074
00:46:06,900 --> 00:46:08,200
So I want to get those two things.

1075
00:46:08,300 --> 00:46:11,000
And what I want to do furthermore is I want to be able to specify

1076
00:46:11,300 --> 00:46:11,900
Those things go.

1077
00:46:11,900 --> 00:46:13,400
So the world in the tile map.

1078
00:46:13,700 --> 00:46:16,300
I want to make sure that we know exactly where they're going.

1079
00:46:16,400 --> 00:46:21,000
So I'm going to say that I want to have sort of the concept of a

1080
00:46:21,000 --> 00:46:23,900
particular pool of particular place where this memory is coming from.

1081
00:46:24,300 --> 00:46:28,900
That allows me to sort of control a little bit more specifically where

1082
00:46:28,900 --> 00:46:30,500
the memory is used.

1083
00:46:33,800 --> 00:46:34,300
so,

1084
00:46:35,400 --> 00:46:37,300
I'm just gonna pretend I have one of those as well.

1085
00:46:37,900 --> 00:46:41,000
I'm basically going to say that there is some new thing.

1086
00:46:41,200 --> 00:46:48,400
I'm going to call it a memory Arena because you know, sometimes that's

1087
00:46:48,400 --> 00:46:50,200
a you know, it's an arena.

1088
00:46:50,200 --> 00:46:51,200
Its place for people to fight.

1089
00:46:51,200 --> 00:46:51,700
I guess.

1090
00:46:51,800 --> 00:46:52,400
I don't really know.

1091
00:46:53,100 --> 00:46:55,500
I'm going to say that I have this thing called a memory Arena, right?

1092
00:46:55,600 --> 00:46:57,900
That I'm going to be able to use to control these sorts of things.

1093
00:46:57,900 --> 00:47:03,000
Basically something that will allow me to say where I want this stuff

1094
00:47:03,000 --> 00:47:05,100
to be and I'll just say that we basically have

1095
00:47:05,800 --> 00:47:09,700
You know, the World Arena is the thing that the world uses for now, so

1096
00:47:09,700 --> 00:47:11,500
I'm just going to say that we have that and we'll see.

1097
00:47:11,500 --> 00:47:14,000
Like I said the way I like to code is to just kind of write the first

1098
00:47:14,000 --> 00:47:16,100
thing that comes to mind, see how it works and go up from there.

1099
00:47:16,100 --> 00:47:17,900
So I'm not going to even say what's in there yet.

1100
00:47:18,600 --> 00:47:20,600
I kind of have a guess because I've written a lot of these before.

1101
00:47:20,600 --> 00:47:24,700
But I'm just going to say, I want to be able to say at any given time

1102
00:47:25,200 --> 00:47:26,000
where things come from.

1103
00:47:26,000 --> 00:47:29,300
So, I'm going to say that these things come from that World Arena and

1104
00:47:29,300 --> 00:47:31,200
then they'll just get added on their right.

1105
00:47:32,100 --> 00:47:35,000
So given that the case I do need a way.

1106
00:47:35,100 --> 00:47:36,800
Way of initializing that World Arena.

1107
00:47:36,800 --> 00:47:39,200
I need to initialize that World Arena with some memory.

1108
00:47:39,200 --> 00:47:42,900
So I need to be able to say something like, you know, initialize

1109
00:47:42,900 --> 00:47:43,400
Arena.

1110
00:47:43,400 --> 00:47:44,500
I need to pass it.

1111
00:47:44,800 --> 00:47:47,100
The arena that fits in question fact, these should probably be

1112
00:47:47,100 --> 00:47:47,800
addresses, right?

1113
00:47:47,800 --> 00:47:49,100
Because they're modifying that Arena.

1114
00:47:50,000 --> 00:47:52,100
So I'm going to say I got that World Arena.

1115
00:47:52,100 --> 00:47:55,000
I need to initialize it and I want to tell it where to put gets

1116
00:47:55,200 --> 00:47:55,800
memory.

1117
00:47:55,800 --> 00:47:56,500
Right?

1118
00:47:56,900 --> 00:47:59,900
And the memory that I wanted is is on this permanent.

1119
00:48:00,000 --> 00:48:02,300
Where is I don't have anything else that's going on the permanent

1120
00:48:02,300 --> 00:48:03,600
storage at the moment.

1121
00:48:03,600 --> 00:48:08,200
So I should probably be able to initialize that with wherever we are

1122
00:48:08,700 --> 00:48:09,900
at the beginning of permanent storage.

1123
00:48:09,900 --> 00:48:12,300
So I might basically say, all right.

1124
00:48:12,400 --> 00:48:14,600
I don't know how big the the permit store is.

1125
00:48:14,700 --> 00:48:16,700
Let me go ahead and see, I believe we passed.

1126
00:48:16,700 --> 00:48:17,600
That least.

1127
00:48:17,600 --> 00:48:20,300
I hope we did on here somewhere.

1128
00:48:22,000 --> 00:48:23,700
Let's see.

1129
00:48:24,400 --> 00:48:26,400
Game memory permanent storage size.

1130
00:48:26,400 --> 00:48:27,200
So there it is.

1131
00:48:27,400 --> 00:48:27,700
Right.

1132
00:48:27,700 --> 00:48:29,200
So we've got the permanent storage size.

1133
00:48:29,600 --> 00:48:32,900
So I'm basically going to say, well, the permanent storage size of the

1134
00:48:32,900 --> 00:48:34,900
Arena, right choose me.

1135
00:48:37,100 --> 00:48:40,700
Permanent storage size - the part we used, right?

1136
00:48:40,700 --> 00:48:45,700
Which is the game State size of, did I make my own size of?

1137
00:48:45,700 --> 00:48:46,400
I don't think I did.

1138
00:48:46,400 --> 00:48:48,900
We'll just use this size of game state.

1139
00:48:49,600 --> 00:48:50,800
That is how big it is.

1140
00:48:51,300 --> 00:48:52,400
And the pointer to.

1141
00:48:52,400 --> 00:48:58,100
It is just going to be the memory that permanent storage wherever that

1142
00:48:58,100 --> 00:48:58,500
is.

1143
00:48:58,600 --> 00:49:02,600
It's going to be that plus that game State structure, right?

1144
00:49:02,600 --> 00:49:05,300
It's going to be I'm just basically saying we're not going to touch

1145
00:49:05,800 --> 00:49:07,700
Game State structure structures memory.

1146
00:49:07,700 --> 00:49:09,600
So we're going to point right after it.

1147
00:49:09,600 --> 00:49:10,300
Does that make sense?

1148
00:49:10,800 --> 00:49:11,200
So based?

1149
00:49:11,200 --> 00:49:13,300
I'm just going to say that I'm initialize that Arena miss a you can

1150
00:49:13,300 --> 00:49:15,200
use all the memory because we don't have any other Arenas yet.

1151
00:49:15,200 --> 00:49:17,700
So you can use all the memory that's in the whole thing.

1152
00:49:18,300 --> 00:49:20,800
But what I want you to do is I want you to use it at the part that

1153
00:49:20,800 --> 00:49:22,600
starts right after the game state, right?

1154
00:49:23,100 --> 00:49:25,200
And then when we do this push, I want you to get it.

1155
00:49:25,200 --> 00:49:26,800
The memory out of there, please.

1156
00:49:26,900 --> 00:49:28,100
That's what I would like you to do.

1157
00:49:28,400 --> 00:49:29,000
Right?

1158
00:49:29,600 --> 00:49:32,300
And so I all I really have to do now is I just have to implement

1159
00:49:32,300 --> 00:49:32,700
those.

1160
00:49:32,900 --> 00:49:35,400
I have to say, you know, I've got this initialized

1161
00:49:35,700 --> 00:49:37,800
Arena guy, so, I don't know.

1162
00:49:37,800 --> 00:49:41,200
That's, that's something that takes us Arena and initializes it.

1163
00:49:41,200 --> 00:49:47,400
So that takes this memory Arena that it's using.

1164
00:49:47,400 --> 00:49:49,900
Its takes a size.

1165
00:49:49,900 --> 00:49:53,400
So we don't have, do we have a science type yet?

1166
00:49:53,400 --> 00:49:56,400
I don't know if we do or not.

1167
00:49:56,400 --> 00:50:01,400
I hope we do but we don't we don't have one of those yet.

1168
00:50:01,400 --> 00:50:04,900
So what did we actually Define our memory to be?

1169
00:50:04,900 --> 00:50:05,100
We

1170
00:50:05,700 --> 00:50:07,000
To be you n64's.

1171
00:50:07,500 --> 00:50:10,500
That's probably not so necessary.

1172
00:50:11,300 --> 00:50:14,900
That seems like maybe that's a bad idea to make those be mandatorily.

1173
00:50:14,900 --> 00:50:15,700
You and sixty four rows.

1174
00:50:15,700 --> 00:50:16,400
We want to do that.

1175
00:50:16,400 --> 00:50:17,500
Do we not want to do that?

1176
00:50:23,800 --> 00:50:25,700
I'm a little torn, a little bit torn.

1177
00:50:25,700 --> 00:50:29,200
They're just a bit teats.

1178
00:50:29,400 --> 00:50:31,800
I want to know whether we should basically say that this is 64 bit and

1179
00:50:31,800 --> 00:50:35,500
64-bit and 32-bit and 32-bit seems like we probably should.

1180
00:50:35,700 --> 00:50:39,200
Would, you know, basically what I'm saying is, should we have

1181
00:50:39,200 --> 00:50:43,800
something that's essentially a size, T type, A type that like the one

1182
00:50:43,800 --> 00:50:47,300
that c defines which basically is going to be the size this necessary

1183
00:50:47,400 --> 00:50:50,200
for a memory to to record.

1184
00:50:50,200 --> 00:50:52,500
However, big memory could potentially be.

1185
00:50:53,500 --> 00:50:57,000
I don't actually know which one of those I actually want to do.

1186
00:50:57,000 --> 00:50:57,600
I don't know that.

1187
00:50:57,600 --> 00:50:59,800
I really need to deal with that right now because I don't know.

1188
00:51:00,000 --> 00:51:03,200
We're going to store anything that's above 4 GB inside, one Arena.

1189
00:51:06,500 --> 00:51:10,200
So many choices, let's go ahead and say that we do have that.

1190
00:51:10,700 --> 00:51:15,100
Let's say that we do have a size T and that size T type.

1191
00:51:15,700 --> 00:51:16,400
I don't know what we're.

1192
00:51:16,400 --> 00:51:19,500
I don't really have a good name for that one so we could just call it

1193
00:51:19,500 --> 00:51:23,000
sighs tea or something like this.

1194
00:51:23,800 --> 00:51:26,800
We could call it, you know, memory index.

1195
00:51:26,800 --> 00:51:27,700
Something like that.

1196
00:51:28,100 --> 00:51:30,700
Something that actually can be the size of memory.

1197
00:51:30,700 --> 00:51:34,000
I'm really not sure you call it an input pointer.

1198
00:51:34,100 --> 00:51:35,300
We call a lot of things.

1199
00:51:40,200 --> 00:51:43,200
I do things a little bit differently in my own code and I'm trying to

1200
00:51:43,200 --> 00:51:45,600
think about what's the best thing to do for the circumstances that

1201
00:51:45,600 --> 00:51:52,500
were in here and I'm thinking I'm thinking yeah, that I just kind of

1202
00:51:52,500 --> 00:51:55,200
want something like memory index or something like that.

1203
00:51:55,300 --> 00:51:56,600
I'm going to call it memory index for now.

1204
00:51:56,600 --> 00:51:59,900
Nothing else is going to use that so we can always come back to that

1205
00:51:59,900 --> 00:52:03,300
later and and and make it something else if we don't like it.

1206
00:52:03,600 --> 00:52:04,900
All right, so we're going to have a memory index.

1207
00:52:04,900 --> 00:52:06,200
That's the size and we

1208
00:52:06,300 --> 00:52:10,700
Can have a memory index that is the offset or rather.

1209
00:52:11,100 --> 00:52:13,100
That is the the location.

1210
00:52:13,100 --> 00:52:15,100
In fact, you know what, I guess this is just a pointer.

1211
00:52:15,600 --> 00:52:18,000
This is the pointer the storage area.

1212
00:52:18,100 --> 00:52:22,000
So this is the storage and and that is all that would really need.

1213
00:52:22,000 --> 00:52:24,600
So our Arena will have those two things.

1214
00:52:24,600 --> 00:52:25,700
It'll have the size.

1215
00:52:25,900 --> 00:52:28,200
It'll have the storage that will have the base pointer.

1216
00:52:28,200 --> 00:52:34,600
I guess we can call that and then we can just say what we have are

1217
00:52:34,600 --> 00:52:36,100
used amount and are used in.

1218
00:52:36,300 --> 00:52:37,800
Is going to be 0 at the start.

1219
00:52:37,800 --> 00:52:40,900
Let's say, because we haven't used anything inside the arena, and then

1220
00:52:40,900 --> 00:52:44,200
we have our push struct are pushed.

1221
00:52:44,200 --> 00:52:48,500
Direct is basically just going to be a function that returns some

1222
00:52:48,500 --> 00:52:53,500
memory like this and it is going to take that memory Arena like we

1223
00:52:53,500 --> 00:52:59,100
said, and it is going to take a size to push, basically, a size that

1224
00:52:59,100 --> 00:53:00,200
we want to push on there.

1225
00:53:00,400 --> 00:53:03,300
We're going to take the used size of the Arena.

1226
00:53:03,300 --> 00:53:05,600
We're going to increment it by the size.

1227
00:53:05,600 --> 00:53:06,200
So we're

1228
00:53:06,300 --> 00:53:10,100
basically using up a certain amount of the memory in there, and we're

1229
00:53:10,100 --> 00:53:14,200
going to make the result be wherever the Arena's base pointer would

1230
00:53:14,200 --> 00:53:15,000
have been at that point.

1231
00:53:15,000 --> 00:53:20,000
So, the base pointer plus, however, much was used before the call is

1232
00:53:20,000 --> 00:53:22,200
sort of the first free part of the Arena.

1233
00:53:22,200 --> 00:53:24,800
So that's where we'll return as our result.

1234
00:53:25,200 --> 00:53:28,200
And then we'll say, we use that much and then we'll turn the result.

1235
00:53:28,200 --> 00:53:29,900
And, of course, we would like to assert here.

1236
00:53:30,100 --> 00:53:33,400
We'd like to assert that the used amount.

1237
00:53:34,400 --> 00:53:39,800
Plus the size is less than the total size of the Arena if that makes

1238
00:53:39,800 --> 00:53:42,500
sense or equal to, we could go right up to the end if we had to.

1239
00:53:43,200 --> 00:53:44,400
And so then we'll do that push direct.

1240
00:53:44,400 --> 00:53:44,500
Now.

1241
00:53:44,500 --> 00:53:47,700
What we want to do here is we want to be able to say push a struct

1242
00:53:47,900 --> 00:53:48,800
that is this size.

1243
00:53:48,800 --> 00:53:51,600
So we're going to need a macro for that because basically what we want

1244
00:53:51,600 --> 00:53:54,400
to do is we want to say when you do a push struct and you give it a

1245
00:53:54,400 --> 00:53:56,600
type, you give it the arena and you give it a type.

1246
00:53:56,600 --> 00:53:58,500
We then call our push trucks function.

1247
00:53:59,300 --> 00:53:59,800
We do the

1248
00:54:00,000 --> 00:54:00,600
I asked here.

1249
00:54:00,600 --> 00:54:03,900
We do the type star to cast it to the right type whatever the person

1250
00:54:03,900 --> 00:54:06,600
asked for and we do the size of automatically for them.

1251
00:54:07,100 --> 00:54:09,000
So they get the right size back as well.

1252
00:54:09,800 --> 00:54:13,700
And there we go when we pass the arena, so that's all nice and good.

1253
00:54:14,000 --> 00:54:15,700
What are we complaining about saving?

1254
00:54:15,700 --> 00:54:16,100
Okay.

1255
00:54:17,000 --> 00:54:19,800
So now we actually need to put those things in our Arena.

1256
00:54:19,800 --> 00:54:20,800
I forgot to do that.

1257
00:54:21,000 --> 00:54:25,400
So we go in here and we say there's our Arena we have got our memory

1258
00:54:25,400 --> 00:54:26,700
index for the sighs.

1259
00:54:27,300 --> 00:54:27,900
There we go.

1260
00:54:28,600 --> 00:54:29,800
We've got our memory in.

1261
00:54:30,000 --> 00:54:30,800
Index or sorry.

1262
00:54:30,800 --> 00:54:33,000
Are you eight star for the base?

1263
00:54:33,100 --> 00:54:37,300
And then we have our memory index for the used portion that we go.

1264
00:54:38,100 --> 00:54:41,500
And let's see.

1265
00:54:41,500 --> 00:54:42,300
Let's see.

1266
00:54:42,300 --> 00:54:43,400
What did I do?

1267
00:54:43,400 --> 00:54:43,900
Oops?

1268
00:54:44,600 --> 00:54:46,100
Well know.

1269
00:54:46,100 --> 00:54:48,400
What was the what's what are we complaining about?

1270
00:54:48,500 --> 00:54:51,300
No, I was takes memory Arena.

1271
00:54:51,300 --> 00:54:55,600
Did I did I typo that or something somewhere?

1272
00:54:55,600 --> 00:54:56,200
I did.

1273
00:54:56,300 --> 00:54:57,500
That's what we memory index.

1274
00:54:57,500 --> 00:54:58,600
Not memory Arena.

1275
00:54:59,200 --> 00:54:59,900
So all we have to do.

1276
00:55:00,000 --> 00:55:02,900
Now is Implement that Sceptile value that's going to be over in our

1277
00:55:02,900 --> 00:55:03,700
tile file.

1278
00:55:05,100 --> 00:55:08,500
So we have to go ahead and Implement that you know what, I realized.

1279
00:55:08,500 --> 00:55:12,300
I forgot to put that my index card up course is a little late now, but

1280
00:55:12,300 --> 00:55:14,300
that probably means I've been typing behind my head a little bit.

1281
00:55:14,300 --> 00:55:15,400
I apologize for that.

1282
00:55:15,500 --> 00:55:16,100
One of these days.

1283
00:55:16,100 --> 00:55:18,600
I'm going to get around to writing the little thing that automatically

1284
00:55:18,600 --> 00:55:19,600
puts a window there.

1285
00:55:19,600 --> 00:55:21,300
I apologize for forgetting sometimes.

1286
00:55:22,000 --> 00:55:25,000
Really what I want to do is whenever my cursor goes there, moves my

1287
00:55:25,000 --> 00:55:28,700
head to a different side of the screen, that'd be future technology

1288
00:55:28,700 --> 00:55:29,400
right there people.

1289
00:55:29,400 --> 00:55:31,700
You know I'm saying, that'd be future technology.

1290
00:55:32,700 --> 00:55:33,000
All right.

1291
00:55:33,000 --> 00:55:34,500
So for now the world atomic bomb.

1292
00:55:34,700 --> 00:55:40,700
Go ahead and pass the that arena in here as well, the World Arena, but

1293
00:55:40,700 --> 00:55:43,800
later, we might sort of make it so that that's permanently sort of

1294
00:55:43,800 --> 00:55:44,700
stored in the town map.

1295
00:55:44,700 --> 00:55:45,500
So that doesn't have to.

1296
00:55:45,500 --> 00:55:48,700
But anyway, so I'm going to say that we have a memory Arena here.

1297
00:55:48,700 --> 00:55:49,700
We've got the arena.

1298
00:55:50,100 --> 00:55:56,900
We have our tile map that we are trying to set the value in.

1299
00:55:57,400 --> 00:56:01,400
We have our ABS tile X, our ABS tile Y, and then we have our tile

1300
00:56:01,400 --> 00:56:02,700
value, right?

1301
00:56:02,900 --> 00:56:04,600
So all we're really going to do here.

1302
00:56:04,700 --> 00:56:07,800
Is we're just going to try and do the exact same thing that get tile

1303
00:56:07,800 --> 00:56:08,200
value.

1304
00:56:08,200 --> 00:56:09,200
Does nothing different?

1305
00:56:09,200 --> 00:56:09,500
Right?

1306
00:56:09,500 --> 00:56:12,400
We're just gonna do exactly the same thing, get the tile chunk, but

1307
00:56:12,400 --> 00:56:20,000
the difference now is when that Tao Chunk, we want to be able to say,

1308
00:56:20,000 --> 00:56:23,300
if the top shock isn't there, we want to be able to create the tell

1309
00:56:23,300 --> 00:56:23,700
chunk.

1310
00:56:23,700 --> 00:56:24,200
Right?

1311
00:56:24,200 --> 00:56:28,500
We want to be able to say if the tile chunk comes back and actually is

1312
00:56:28,500 --> 00:56:28,900
there.

1313
00:56:29,300 --> 00:56:30,200
Well, that's fine.

1314
00:56:30,300 --> 00:56:34,500
We'll just go ahead and and set it but if it's not there then

1315
00:56:34,700 --> 00:56:38,200
Will be very sad and upset and lonely in our life.

1316
00:56:40,400 --> 00:56:41,900
And and and that would be bad.

1317
00:56:41,900 --> 00:56:44,900
So what we want to do is we basically want to make a way that we would

1318
00:56:44,900 --> 00:56:47,500
can create tile chunks whenever we go to set a value somewhere and

1319
00:56:47,500 --> 00:56:49,000
there is no tile chunk to store.

1320
00:56:49,500 --> 00:56:50,400
What should be there.

1321
00:56:50,600 --> 00:56:51,100
Right?

1322
00:56:51,400 --> 00:56:54,400
So we go ahead and here we say, if we do not get a tile chunk back.

1323
00:56:54,400 --> 00:56:58,000
Then we are going to we are going to go ahead and set that.

1324
00:56:58,000 --> 00:56:59,400
So get tile chunk.

1325
00:57:00,100 --> 00:57:03,200
If you remember gets the well, you know what, we could do.

1326
00:57:03,200 --> 00:57:04,400
This might be a little premature.

1327
00:57:04,400 --> 00:57:05,400
Now, I think about it.

1328
00:57:05,800 --> 00:57:08,400
Let's just go ahead and assert tile chunk for now and put it to do

1329
00:57:08,400 --> 00:57:08,800
there.

1330
00:57:09,300 --> 00:57:11,700
Because what I'd rather do not I think about is we're at the End of

1331
00:57:11,700 --> 00:57:11,900
the Street.

1332
00:57:11,900 --> 00:57:15,600
I'd rather spend more time talking about that tomorrow, even though

1333
00:57:15,600 --> 00:57:17,500
it's not really what we probably do eventually.

1334
00:57:17,600 --> 00:57:19,100
I yeah, I don't want quite do that yet.

1335
00:57:19,100 --> 00:57:24,000
So we're going to start the touch on everything to put to do on demand

1336
00:57:24,300 --> 00:57:26,600
tile, chunk creation.

1337
00:57:27,100 --> 00:57:29,700
But really, we're just going to take the tile chunk here and then

1338
00:57:29,700 --> 00:57:29,900
we're going.

1339
00:57:30,000 --> 00:57:31,700
To do that set that set.

1340
00:57:31,700 --> 00:57:33,100
We're going to do like a set towel value.

1341
00:57:33,100 --> 00:57:36,400
So we're going to do the exact thing here.

1342
00:57:36,500 --> 00:57:39,700
We're going to we're going to basically mirror the get towel value in

1343
00:57:40,700 --> 00:57:44,700
almost exactly the way that it works.

1344
00:57:44,800 --> 00:57:47,400
But instead we're going to call set to value and then back up to the

1345
00:57:47,400 --> 00:57:50,500
top where we've got our get, Tau value call, which retrieves the tile

1346
00:57:50,500 --> 00:57:51,000
value.

1347
00:57:51,400 --> 00:57:55,700
We're just going to do the exact same thing where we do where we do

1348
00:57:55,700 --> 00:57:59,500
the inverse operation instead of retrieving the value, we change the

1349
00:57:59,500 --> 00:57:59,800
value.

1350
00:58:00,000 --> 00:58:00,600
Here.

1351
00:58:03,200 --> 00:58:04,600
Yeah, so here we go.

1352
00:58:05,600 --> 00:58:09,900
And this also would be a set tile value on chunk, unchecked little

1353
00:58:09,900 --> 00:58:11,500
worried about maybe there's too many levels here.

1354
00:58:11,500 --> 00:58:15,100
I wonder if maybe we should just only have one of those but what do

1355
00:58:15,100 --> 00:58:15,600
you do?

1356
00:58:15,700 --> 00:58:18,200
Well, we can we can always eliminate functions in the future.

1357
00:58:18,600 --> 00:58:20,100
So there's our total value.

1358
00:58:21,000 --> 00:58:21,600
There we go.

1359
00:58:22,100 --> 00:58:25,800
And so all we do is just reverse the sense of this setting.

1360
00:58:26,600 --> 00:58:28,200
And there we go.

1361
00:58:28,900 --> 00:58:30,600
That and compiled.

1362
00:58:30,600 --> 00:58:32,900
So we need to pass the

1363
00:58:33,000 --> 00:58:33,800
Actual value here.

1364
00:58:33,800 --> 00:58:34,700
This is not return.

1365
00:58:34,700 --> 00:58:38,400
Anything make that take the value.

1366
00:58:38,400 --> 00:58:39,000
There we go.

1367
00:58:39,700 --> 00:58:43,700
And we don't need to return anything from you.

1368
00:58:45,700 --> 00:58:49,700
We are passing the World Arena by pointer now, and there we go.

1369
00:58:49,700 --> 00:58:50,600
So, now what will happen?

1370
00:58:50,600 --> 00:58:53,200
Of course, when we do this is we will crash immediately or at least.

1371
00:58:53,200 --> 00:58:54,500
That's what I think we'll do.

1372
00:58:54,600 --> 00:58:56,500
Because we don't actually have those chunks at all.

1373
00:58:56,900 --> 00:58:59,400
So, we immediately stop right here and say, oh, there are no touching.

1374
00:58:59,400 --> 00:59:02,900
So all I'm going to do is I'm just going to preallocate a ton of

1375
00:59:03,000 --> 00:59:04,000
Those tile chunks.

1376
00:59:04,000 --> 00:59:07,300
And then tomorrow we'll take a look at doing something a little bit

1377
00:59:07,300 --> 00:59:07,700
smarter.

1378
00:59:07,700 --> 00:59:11,700
So what I'm going to do here is I'm going to say, okay, we have our

1379
00:59:11,700 --> 00:59:12,500
tile map.

1380
00:59:13,500 --> 00:59:14,600
Let's go grab that.

1381
00:59:14,900 --> 00:59:16,200
We have our tile map.

1382
00:59:16,500 --> 00:59:19,600
I'm going to go ahead and say that our tile chunk X and our Tau chunk.

1383
00:59:19,600 --> 00:59:23,700
Why are very large, you know, they just got, we've got tons of them.

1384
00:59:23,700 --> 00:59:24,300
Let's say

1385
00:59:27,100 --> 00:59:31,500
Excuse me, and I guess at this point to it's unclear.

1386
00:59:31,500 --> 00:59:34,500
Why we actually even have to make this be a dynamic allocation.

1387
00:59:34,500 --> 00:59:36,400
But I guess we I guess we did.

1388
00:59:36,400 --> 00:59:38,400
So we'll have to sort of just live with that.

1389
00:59:38,700 --> 00:59:42,000
But what we can do here since these are 256 by 256 there even doesn't

1390
00:59:42,000 --> 00:59:42,800
have to be that many of them.

1391
00:59:42,800 --> 00:59:43,900
We could even just do that, many.

1392
00:59:44,300 --> 00:59:46,400
All I'm going to do here is just spin through here and allocate

1393
00:59:46,400 --> 00:59:47,000
everything.

1394
00:59:47,000 --> 00:59:49,100
I'm gonna go into the Q&A a little bit because I just want to kind of

1395
00:59:49,100 --> 00:59:49,800
finish up.

1396
00:59:50,000 --> 00:59:53,500
We're almost there and we can we can we're going to undo some of this

1397
00:59:53,500 --> 00:59:55,400
tomorrow, anyway, so it's no big deal.

1398
00:59:56,200 --> 00:59:56,700
All right.

1399
00:59:56,900 --> 00:59:59,800
So let's do, let's just do a quick quick Loop through.

1400
01:00:00,000 --> 01:00:02,700
Here, nothing particularly fancy.

1401
01:00:02,800 --> 01:00:05,800
I'm just going to Loop through all the ones that we have.

1402
01:00:07,900 --> 01:00:08,500
Like this.

1403
01:00:09,800 --> 01:00:16,500
Yeah, and I'm just going to go ahead and store into our tile map.

1404
01:00:17,100 --> 01:00:20,700
Basically wherever the tile chunks are, I'm going to do this the

1405
01:00:20,700 --> 01:00:23,200
standard thing that we had to access the tile chunks.

1406
01:00:23,400 --> 01:00:26,900
I'm going to do tell chunks why I'm sorry.

1407
01:00:26,900 --> 01:00:32,600
Tau chunk x times the Y plus the X and I'm going to go ahead and do a

1408
01:00:32,600 --> 01:00:37,300
push truck there to push one of the top shot.

1409
01:00:37,500 --> 01:00:40,500
So that we basically have a touch on in all of the locations that we

1410
01:00:40,500 --> 01:00:44,400
wanted to know why I'm going by the wrong stride.

1411
01:00:44,400 --> 01:00:47,800
There always go by y first and then X, so, yeah, so we'll go ahead and

1412
01:00:47,800 --> 01:00:48,700
push those on there.

1413
01:00:49,000 --> 01:00:50,700
We also need at this point.

1414
01:00:51,300 --> 01:00:52,800
Our tile chunks array.

1415
01:00:54,800 --> 01:00:56,000
Actually, that's not what that is.

1416
01:00:56,200 --> 01:00:58,600
It's supposed to be.

1417
01:00:59,500 --> 01:01:02,600
It's supposed to be the actual tiles that we want to do here.

1418
01:01:03,300 --> 01:01:03,600
Yeah.

1419
01:01:03,600 --> 01:01:04,400
So there we go.

1420
01:01:05,100 --> 01:01:07,400
We want to go ahead and yeah, so I you know what?

1421
01:01:07,500 --> 01:01:08,600
I might just stop here.

1422
01:01:08,900 --> 01:01:13,300
I might I might stop here just because

1423
01:01:14,600 --> 01:01:16,400
I also got to talk about push array.

1424
01:01:17,800 --> 01:01:20,200
Do I want to go about 5 or 10 minutes longer?

1425
01:01:20,500 --> 01:01:21,100
Let's keep going.

1426
01:01:21,600 --> 01:01:22,300
Let's keep going.

1427
01:01:22,600 --> 01:01:23,100
Sometimes.

1428
01:01:23,100 --> 01:01:24,400
Sometimes you just got to keep going.

1429
01:01:24,600 --> 01:01:28,500
All right, so I also want to do my, I want to do another one of these

1430
01:01:28,500 --> 01:01:31,800
guys here basically, so that I can push things on to my Arena.

1431
01:01:32,200 --> 01:01:36,400
I want to do the ability here to push an array of things.

1432
01:01:36,900 --> 01:01:38,400
You know what this isn't push structurally.

1433
01:01:38,400 --> 01:01:41,000
This is just push size, which is all it is.

1434
01:01:41,300 --> 01:01:43,800
So all I have to do here if I want to do an array of things.

1435
01:01:44,300 --> 01:01:45,600
I want to push an array of things.

1436
01:01:45,700 --> 01:01:48,000
I just have to introduce account parameter, right?

1437
01:01:48,100 --> 01:01:53,700
And then multiply the, the size that I was allocating by that count.

1438
01:01:53,700 --> 01:01:55,500
And then you can do the same thing for a push array.

1439
01:01:55,800 --> 01:02:00,400
All I want to do here is, I wanted to basically allocate this tile

1440
01:02:00,400 --> 01:02:00,900
array.

1441
01:02:01,200 --> 01:02:04,100
So I wanted to allocate you in 32s, and I have to allocate, however,

1442
01:02:04,100 --> 01:02:08,700
many, there are in each one of these things, which is chunk, Tim.

1443
01:02:08,700 --> 01:02:09,200
Right?

1444
01:02:09,400 --> 01:02:10,100
So I need chunk.

1445
01:02:10,100 --> 01:02:12,000
Tim times chunk Tim squared.

1446
01:02:12,000 --> 01:02:14,100
It's because it's, you know, it's a, it's a way, I think.

1447
01:02:14,200 --> 01:02:18,000
We said it was a 256 by 256 array for each of the chunk.

1448
01:02:18,000 --> 01:02:22,100
So I need to basically go in there and create that array.

1449
01:02:22,100 --> 01:02:23,100
And similarly.

1450
01:02:23,200 --> 01:02:25,000
I inside the tile map itself.

1451
01:02:25,200 --> 01:02:28,500
I also have to go into those tile chunks and I need to push an array

1452
01:02:28,500 --> 01:02:31,100
there of tile chunks and the number of tiles chunks.

1453
01:02:31,100 --> 01:02:33,800
That I have right is going to basically be.

1454
01:02:34,100 --> 01:02:38,800
I need to pass that World Arena their game State World Arena.

1455
01:02:38,900 --> 01:02:40,300
Probably pull that into a variable.

1456
01:02:41,100 --> 01:02:41,700
There we go.

1457
01:02:43,100 --> 01:02:47,100
So I'm going to basically take that those tile, chunk that top

1458
01:02:47,100 --> 01:02:48,900
Tanqueray, that used to be a static thing.

1459
01:02:48,900 --> 01:02:50,300
I'm going to allocate that as well.

1460
01:02:50,500 --> 01:02:52,700
And I'm just going to say well we know how many we have.

1461
01:02:52,800 --> 01:02:56,800
We have the tile chunk x times of Tau chunk count, why that's how many

1462
01:02:56,800 --> 01:02:57,700
there are total.

1463
01:02:58,200 --> 01:02:59,400
And so that's all we need.

1464
01:03:00,000 --> 01:03:00,400
At that.

1465
01:03:00,400 --> 01:03:05,200
And so that I think should allocate all of the tile map stuff for us

1466
01:03:05,600 --> 01:03:07,100
kind of Slam that in there really quickly.

1467
01:03:07,100 --> 01:03:08,000
And I apologize for that.

1468
01:03:08,000 --> 01:03:09,900
But we kind of hung out running out of time at stream.

1469
01:03:09,900 --> 01:03:12,200
So we'll have to go to a little more detail there.

1470
01:03:12,800 --> 01:03:17,400
Eventually, probably tomorrow or in the Q&A.

1471
01:03:18,100 --> 01:03:18,700
You never know.

1472
01:03:19,600 --> 01:03:22,700
Turns out the Q&A is, what is what is?

1473
01:03:22,800 --> 01:03:24,200
What are we complaining about here?

1474
01:03:24,600 --> 01:03:25,700
What are we complaining about?

1475
01:03:25,900 --> 01:03:27,200
Why, why are we complaining?

1476
01:03:27,400 --> 01:03:28,600
Why are we being a grumpy?

1477
01:03:28,600 --> 01:03:29,100
Little monkey?

1478
01:03:29,100 --> 01:03:29,900
I don't even know why these

1479
01:03:30,000 --> 01:03:32,200
He's our are in 32s.

1480
01:03:32,200 --> 01:03:33,100
To be honest with you.

1481
01:03:34,100 --> 01:03:35,000
No operator.

1482
01:03:35,000 --> 01:03:37,900
Found tile chunks.

1483
01:03:38,300 --> 01:03:39,500
So tile chunks.

1484
01:03:39,500 --> 01:03:40,800
This is the wrong thing.

1485
01:03:41,100 --> 01:03:42,900
It's actually dot tiles.

1486
01:03:43,300 --> 01:03:43,900
Here we go.

1487
01:03:44,500 --> 01:03:45,800
So I don't know if this will work at all.

1488
01:03:45,900 --> 01:03:46,700
Probably not.

1489
01:03:46,900 --> 01:03:48,000
Yeah, didn't think so.

1490
01:03:49,900 --> 01:03:51,400
What are we complaining about here?

1491
01:03:51,900 --> 01:03:56,400
The size of this thing to do?

1492
01:03:56,400 --> 01:03:57,900
How big is the size of this thing?

1493
01:03:58,600 --> 01:03:59,400
Let's take a look.

1494
01:04:02,200 --> 01:04:05,300
Okay, it's not useful sighs.

1495
01:04:05,300 --> 01:04:05,700
Let's make a.

1496
01:04:05,700 --> 01:04:06,900
What is Arena size.

1497
01:04:10,100 --> 01:04:11,000
Sighs is 0.

1498
01:04:11,000 --> 01:04:14,200
So we actually did use all of that is allocated a few, too many of

1499
01:04:14,200 --> 01:04:17,600
those looks like, that's a, that's a good reason to make those a

1500
01:04:17,600 --> 01:04:18,500
little bit smaller.

1501
01:04:18,900 --> 01:04:20,900
We'll have to think a little bit more about that in the future.

1502
01:04:21,200 --> 01:04:22,400
A lot of things to think about here.

1503
01:04:23,800 --> 01:04:24,300
Okay.

1504
01:04:24,900 --> 01:04:28,100
So, of course, this should actually always be finding a tile chunk.

1505
01:04:28,100 --> 01:04:31,900
I feel like, so, I'm not sure why that didn't find a towel trunk.

1506
01:04:32,200 --> 01:04:34,100
I got to make sure that I did everything right here.

1507
01:04:34,800 --> 01:04:35,800
Let's take a look.

1508
01:04:36,300 --> 01:04:38,500
So the tile chunks.

1509
01:04:40,900 --> 01:04:42,900
Again, sorry for just saying that, there's sometimes I get carried

1510
01:04:42,900 --> 01:04:43,300
away.

1511
01:04:43,900 --> 01:04:47,700
I promise I will talk a lot more in depth about this very, very

1512
01:04:47,700 --> 01:04:48,000
quickly.

1513
01:04:48,000 --> 01:04:51,900
But sometimes I get on a little bit of a tear and I just, you know, I

1514
01:04:51,900 --> 01:04:52,900
kind of had to go.

1515
01:04:53,600 --> 01:04:54,900
I kind of had to go for it.

1516
01:04:55,300 --> 01:04:56,200
And so, yeah.

1517
01:04:56,300 --> 01:04:57,200
Yeah, what can you do?

1518
01:04:57,700 --> 01:05:04,200
So when I make the tile chunks, here, I'm pushing this array.

1519
01:05:04,200 --> 01:05:05,700
Let's go ahead and stop in here.

1520
01:05:06,200 --> 01:05:07,200
Let's, let's

1521
01:05:09,700 --> 01:05:11,600
Win32 handmade new hammock.

1522
01:05:11,600 --> 01:05:12,500
So be, there we go.

1523
01:05:13,300 --> 01:05:14,000
All right.

1524
01:05:14,100 --> 01:05:14,900
So we come in.

1525
01:05:14,900 --> 01:05:16,400
Here we go ahead.

1526
01:05:16,400 --> 01:05:19,700
We initialize our Arena and our Arena has nothing in it.

1527
01:05:19,700 --> 01:05:20,000
Again.

1528
01:05:20,000 --> 01:05:24,000
All our arena is basically, all I'm doing here is I'm just saying, all

1529
01:05:24,000 --> 01:05:24,300
right.

1530
01:05:24,300 --> 01:05:29,200
I want a struct that basically tracks where I am in my memory storage

1531
01:05:29,300 --> 01:05:33,400
and every time that I want to allocate something, I'm just going to

1532
01:05:33,400 --> 01:05:36,300
put it wherever I was and move this thing down.

1533
01:05:36,300 --> 01:05:36,700
One.

1534
01:05:36,700 --> 01:05:38,000
That's all I'm doing, right?

1535
01:05:38,000 --> 01:05:39,300
It's really really

1536
01:05:39,500 --> 01:05:40,400
Trivial for now.

1537
01:05:40,500 --> 01:05:43,600
That's the only thing it's doing so memory allocation is just plus

1538
01:05:43,800 --> 01:05:44,200
feste.

1539
01:05:44,400 --> 01:05:47,400
That's our entire memory allocation screen as we just stick something

1540
01:05:47,400 --> 01:05:53,200
wherever our current top is and we just move it to down by however

1541
01:05:53,200 --> 01:05:54,200
much we pushed, right?

1542
01:05:54,200 --> 01:05:55,300
So that's all I'm doing here.

1543
01:05:55,400 --> 01:05:57,400
So I create one of those, right?

1544
01:05:57,400 --> 01:05:59,800
Here's my, my game state.

1545
01:06:00,500 --> 01:06:02,700
I create one of these these World Arenas.

1546
01:06:02,700 --> 01:06:06,000
I say that it's got all the permanent store in it - the part that we

1547
01:06:06,000 --> 01:06:07,500
use for our game State itself.

1548
01:06:08,000 --> 01:06:09,000
Give it the base pointer.

1549
01:06:09,200 --> 01:06:11,400
And then there's nothing used in it.

1550
01:06:11,500 --> 01:06:13,800
I then go ahead and push a world struck down there.

1551
01:06:14,700 --> 01:06:15,500
Oh, and you know what?

1552
01:06:15,500 --> 01:06:16,400
I actually forgot to do.

1553
01:06:16,400 --> 01:06:18,100
I've got to clear these guys as well.

1554
01:06:18,400 --> 01:06:20,200
So I want to, I want to go ahead and

1555
01:06:22,000 --> 01:06:26,700
Do it, big ol to do here to do Casey important?

1556
01:06:29,500 --> 01:06:34,600
Firstly, that clear 20 option.

1557
01:06:35,000 --> 01:06:35,400
You need to.

1558
01:06:35,400 --> 01:06:36,000
We need to

1559
01:06:37,200 --> 01:06:38,100
Do that as well.

1560
01:06:39,000 --> 01:06:39,500
All right.

1561
01:06:39,500 --> 01:06:44,300
So anyway, sorry, I've got talk about that a little bit.

1562
01:06:44,300 --> 01:06:46,800
Anyway, we going here, we create that, we push a struct on.

1563
01:06:46,800 --> 01:06:51,000
So now we've basically in our memory stack, we've pushed the world

1564
01:06:51,500 --> 01:06:53,200
right onto the top of the stack.

1565
01:06:53,300 --> 01:06:53,900
In fact, I'll draw it.

1566
01:06:53,900 --> 01:06:55,800
Explicitly, we come in here.

1567
01:06:56,200 --> 01:06:57,700
The game state is here.

1568
01:06:57,800 --> 01:06:58,100
Right?

1569
01:06:58,100 --> 01:06:58,700
Game state is.

1570
01:06:58,700 --> 01:07:00,200
Here are Rena's pointing here.

1571
01:07:00,400 --> 01:07:04,600
We push the world's the world onto their, right?

1572
01:07:04,600 --> 01:07:05,800
So the world's on there now,

1573
01:07:06,800 --> 01:07:08,400
and now we've got a world, right?

1574
01:07:08,400 --> 01:07:11,000
But our world isn't cleared to zero, which I said, I want it to be.

1575
01:07:11,000 --> 01:07:11,900
Oh, you know what?

1576
01:07:13,500 --> 01:07:17,500
It is though because our whole memory is cleared to 0, I remembered

1577
01:07:17,500 --> 01:07:18,400
respect that.

1578
01:07:19,500 --> 01:07:21,100
So no, we don't actually need to do that.

1579
01:07:21,100 --> 01:07:21,700
That's okay.

1580
01:07:22,100 --> 01:07:23,000
I take it all back.

1581
01:07:23,100 --> 01:07:24,100
I take it back people.

1582
01:07:24,300 --> 01:07:26,200
We do clear it all 20.

1583
01:07:26,500 --> 01:07:27,300
So that's fine.

1584
01:07:27,500 --> 01:07:29,900
All right, so we come in here, we get down here.

1585
01:07:30,200 --> 01:07:33,800
We get our world, our world, some code 0, it is we then go ahead and

1586
01:07:33,800 --> 01:07:35,200
push our town map on there.

1587
01:07:35,300 --> 01:07:36,200
We got our tile map.

1588
01:07:36,200 --> 01:07:38,500
Our tile map has nothing initialize, and that's fine.

1589
01:07:38,900 --> 01:07:40,600
So we have to go ahead and initialize it.

1590
01:07:40,800 --> 01:07:41,900
We set the chunk shift.

1591
01:07:41,900 --> 01:07:42,200
We set.

1592
01:07:42,300 --> 01:07:46,600
Mass, we set the dimension and then we go ahead and create our tile

1593
01:07:46,600 --> 01:07:47,000
chunks.

1594
01:07:47,700 --> 01:07:48,600
Oh, that's fantastic.

1595
01:07:48,600 --> 01:07:49,400
Well, that's our problem.

1596
01:07:49,400 --> 01:07:50,000
Right there.

1597
01:07:50,000 --> 01:07:51,600
We have initialized those yet.

1598
01:07:51,600 --> 01:07:53,000
Where did that go people?

1599
01:07:53,800 --> 01:07:56,000
Well done, Casey move that up there.

1600
01:07:56,200 --> 01:07:56,600
All right.

1601
01:07:58,000 --> 01:08:01,000
So we go ahead and set that, then we allocate.

1602
01:08:01,300 --> 01:08:02,400
So let's go ahead here.

1603
01:08:02,400 --> 01:08:04,100
Let's do do, doot, do do doot.

1604
01:08:04,100 --> 01:08:04,700
There we go.

1605
01:08:05,300 --> 01:08:06,300
We push that around there.

1606
01:08:06,300 --> 01:08:09,700
So now we've got our tile map and our tile chunks are just sitting

1607
01:08:09,700 --> 01:08:12,500
there but there's actually nothing I guess in them yet.

1608
01:08:12,900 --> 01:08:15,000
And that's fine.

1609
01:08:15,000 --> 01:08:21,500
So we go ahead through here and we spin through each of them and we

1610
01:08:21,500 --> 01:08:22,600
allocate tiles for them.

1611
01:08:22,600 --> 01:08:24,600
So now they all have tiles, right?

1612
01:08:24,600 --> 01:08:27,600
We go through each one of our tile chunks and we allocate towels.

1613
01:08:27,800 --> 01:08:28,700
So it's not as far as yet.

1614
01:08:28,700 --> 01:08:32,100
This is actually just a dense, tilemap a giant dense tilemap.

1615
01:08:32,700 --> 01:08:35,200
And so then we go ahead and initialize the rest of the tile map

1616
01:08:35,200 --> 01:08:37,200
parameters and then we start setting.

1617
01:08:37,200 --> 01:08:41,399
Tilemap parameters per screen here.

1618
01:08:41,399 --> 01:08:42,200
So we go into that.

1619
01:08:42,200 --> 01:08:43,899
Get tout that set tile value.

1620
01:08:45,500 --> 01:08:47,600
And then let's see.

1621
01:08:47,600 --> 01:08:49,899
Well, I guess now it works because I actually allocated a thing,

1622
01:08:49,899 --> 01:08:50,300
right?

1623
01:08:50,300 --> 01:08:53,700
So that's fine, we go through me, set them all and then our game is

1624
01:08:53,700 --> 01:08:55,200
running and we're in a giant empty world.

1625
01:08:55,200 --> 01:08:59,800
So, presumably if we wanted to, we could create a very large world.

1626
01:09:00,000 --> 01:09:02,899
Are just to end the day off, not too much overtime.

1627
01:09:02,899 --> 01:09:03,899
10 minutes overtime.

1628
01:09:04,100 --> 01:09:08,700
When we said the tile value here we could do something like, you know,

1629
01:09:08,700 --> 01:09:12,500
if tile x equals tile, why?

1630
01:09:14,000 --> 01:09:14,600
Right?

1631
01:09:16,000 --> 01:09:17,000
Tile x equals tile.

1632
01:09:17,000 --> 01:09:17,600
Why?

1633
01:09:17,600 --> 01:09:25,899
And tile y mod 2 or something that, you know, will just do that.

1634
01:09:25,899 --> 01:09:29,600
Then if that's true, then there's something there.

1635
01:09:29,600 --> 01:09:32,899
Otherwise, there's not just so we can see that we set things.

1636
01:09:33,500 --> 01:09:37,800
Oh, and of course, I happen to start out right in one of course, isn't

1637
01:09:37,800 --> 01:09:38,899
that always the way?

1638
01:09:40,899 --> 01:09:44,800
Let's go ahead and and change our starting parameter here.

1639
01:09:44,800 --> 01:09:45,700
I don't remember where the

1640
01:09:45,899 --> 01:09:48,300
You'd actually starts out.

1641
01:09:48,700 --> 01:09:52,700
I think he starts out 33.

1642
01:09:52,700 --> 01:09:54,400
So let's just make him start out at 13.

1643
01:09:54,900 --> 01:09:57,000
Alright, so there we go.

1644
01:09:57,000 --> 01:10:00,900
Now we've got some now, we've got like, I don't really want to call

1645
01:10:00,900 --> 01:10:02,600
this a world.

1646
01:10:03,200 --> 01:10:05,200
It's not a particularly compelling world.

1647
01:10:05,300 --> 01:10:06,100
That's true.

1648
01:10:06,600 --> 01:10:10,000
But at least some things are set and that's always good.

1649
01:10:10,000 --> 01:10:13,700
I suppose for lack of a better thing.

1650
01:10:13,800 --> 01:10:15,700
Alright, so there we go.

1651
01:10:15,800 --> 01:10:24,500
With that, and I feel like we should have been setting more screens.

1652
01:10:24,500 --> 01:10:26,700
This is supposed to be tiles for height here.

1653
01:10:27,200 --> 01:10:28,500
So, that's a bug as well.

1654
01:10:28,800 --> 01:10:31,300
I feel like we should have set more screens worth of that.

1655
01:10:31,300 --> 01:10:32,000
There we go.

1656
01:10:32,700 --> 01:10:35,800
So, there's our other things.

1657
01:10:35,800 --> 01:10:39,800
So new, we now kind of have a relatively big world that we can play

1658
01:10:39,800 --> 01:10:41,800
in, which is always fun.

1659
01:10:42,600 --> 01:10:44,000
But I kind of spend a lot of stuff out there.

1660
01:10:44,000 --> 01:10:44,900
So I apologize for that.

1661
01:10:44,900 --> 01:10:47,800
I just, that's, that's one of those habits that I probably should

1662
01:10:47,800 --> 01:10:48,600
break on the stream.

1663
01:10:48,600 --> 01:10:52,000
You don't want to just go, you know, code code wild.

1664
01:10:52,000 --> 01:10:54,100
I tried to explain everything while I was doing it, but I realized, I

1665
01:10:54,100 --> 01:10:56,700
probably introduced to many Concepts there.

1666
01:10:57,700 --> 01:11:00,400
So anyway, we're in pretty good shape here.

1667
01:11:00,400 --> 01:11:01,600
We've got all that stuff working.

1668
01:11:01,700 --> 01:11:04,900
Let me just briefly re say what it is that I did.

1669
01:11:05,300 --> 01:11:08,700
So previously, we were creating everything on the stack just in here

1670
01:11:08,700 --> 01:11:09,700
in game update and render.

1671
01:11:09,700 --> 01:11:12,000
And what I want to do is I wanted to move it all to the memory.

1672
01:11:12,500 --> 01:11:14,700
The actual permanent memory storage, right?

1673
01:11:14,800 --> 01:11:18,300
So I did that the way I did that is I made a really simple thing.

1674
01:11:18,700 --> 01:11:20,200
That's basically it's a Memory allocator.

1675
01:11:20,200 --> 01:11:23,600
It's just a very simple one and the way the memory allocator works is

1676
01:11:23,600 --> 01:11:26,400
it starts out with all the memory and it points to the bottom of it.

1677
01:11:26,400 --> 01:11:30,000
And then as soon as you allocate something it just uses whatever the

1678
01:11:30,000 --> 01:11:32,500
the next chunk of memory is and moves down to the bottom.

1679
01:11:32,500 --> 01:11:34,800
You can't even ever free anything in the scheme, right?

1680
01:11:35,400 --> 01:11:36,800
It just keeps using memory.

1681
01:11:37,500 --> 01:11:40,300
So I basically then just converted everything that we were declaring

1682
01:11:40,300 --> 01:11:41,100
on the stack.

1683
01:11:41,200 --> 01:11:42,200
I converted it to you.

1684
01:11:42,300 --> 01:11:45,600
Using the push array or push truck, which basically just pushes a size

1685
01:11:46,300 --> 01:11:48,300
on to that memory jump.

1686
01:11:49,300 --> 01:11:52,300
I went in and I pre-allocated everything because I didn't want to get

1687
01:11:52,300 --> 01:11:53,700
too far down the rabbit hole.

1688
01:11:54,100 --> 01:11:57,800
But basically what we're going to do tomorrow is will actually make

1689
01:11:57,800 --> 01:11:59,000
some real screens here.

1690
01:11:59,000 --> 01:11:59,800
So we'll actually make some.

1691
01:12:00,000 --> 01:12:00,500
Check the drawers.

1692
01:12:00,500 --> 01:12:04,500
Some screens with doors and stuff so that we can actually start

1693
01:12:04,500 --> 01:12:05,800
testing that a little bit.

1694
01:12:06,000 --> 01:12:09,300
But what I want to do and what I wanted to get to so hopefully we'll

1695
01:12:09,300 --> 01:12:10,300
get to it tomorrow.

1696
01:12:10,600 --> 01:12:12,100
Is this Sceptile value?

1697
01:12:12,600 --> 01:12:16,800
That will basically go ahead and allocate as necessary, the tile

1698
01:12:16,800 --> 01:12:17,300
chunks.

1699
01:12:18,500 --> 01:12:22,300
Now one thing that's also true, is we're using 256 by 256 child chunks

1700
01:12:22,300 --> 01:12:27,000
at the moment, but I do wonder and also, I suppose we should set this

1701
01:12:27,000 --> 01:12:27,900
chunked in value.

1702
01:12:28,000 --> 01:12:29,900
We can set this off of the

1703
01:12:30,000 --> 01:12:31,400
Chunk shift as well.

1704
01:12:31,400 --> 01:12:31,600
Right?

1705
01:12:31,600 --> 01:12:34,900
We could just do that because that's going to be 256, right?

1706
01:12:34,900 --> 01:12:35,600
That makes sense.

1707
01:12:36,100 --> 01:12:38,900
So anyway, we if we run this, you know, we've got our thing.

1708
01:12:39,000 --> 01:12:40,100
I wonder too.

1709
01:12:40,200 --> 01:12:45,600
If we could quickly test how our chunked system is working exactly by

1710
01:12:45,600 --> 01:12:48,100
going ahead and going in here and saying, okay.

1711
01:12:48,300 --> 01:12:51,600
What if we were to make really small chunks, right?

1712
01:12:52,000 --> 01:12:54,100
And I don't know what would happen if we did really small chunks.

1713
01:12:54,100 --> 01:12:58,200
So we do really small chunks and then we beef this number up a bit,

1714
01:12:58,200 --> 01:12:58,700
right?

1715
01:12:58,800 --> 01:12:59,900
I don't know if that's a good idea or not.

1716
01:13:00,800 --> 01:13:03,200
Yeah, I feel like the problem is we're going to I have to make it big

1717
01:13:03,200 --> 01:13:08,200
enough now after I make that so that these will be, I have there.

1718
01:13:08,200 --> 01:13:12,000
So few of them now that I have to make sure that we get enough of

1719
01:13:12,000 --> 01:13:12,400
them.

1720
01:13:12,500 --> 01:13:14,500
I didn't actually bothered to compute how many it would be.

1721
01:13:14,600 --> 01:13:15,600
Can we do this many?

1722
01:13:15,900 --> 01:13:17,000
I don't know how many we can do.

1723
01:13:17,900 --> 01:13:20,400
Yeah, of course, we can't do too many for the arena size.

1724
01:13:22,600 --> 01:13:25,500
Should probably think about how big that Aria sighs have to be.

1725
01:13:25,700 --> 01:13:30,700
So now our chunks are actually much smaller, right are chunks are now

1726
01:13:30,700 --> 01:13:32,800
only four by four.

1727
01:13:33,300 --> 01:13:34,100
I believe I say.

1728
01:13:34,100 --> 01:13:35,000
Oh no, we set the ship.

1729
01:13:35,000 --> 01:13:37,600
So there's 16 by 16 chunks, right?

1730
01:13:37,600 --> 01:13:40,800
And so now we're traveling across many of these chunks and I'm just

1731
01:13:40,800 --> 01:13:43,200
trying to make sure that our system was working fine.

1732
01:13:43,700 --> 01:13:46,300
So basically, we can change her to that page granularity to be

1733
01:13:46,300 --> 01:13:49,100
whatever we want it to be, and that's kind of nice.

1734
01:13:49,600 --> 01:13:50,500
So that's a good thing.

1735
01:13:50,900 --> 01:13:51,100
Here.

1736
01:13:51,100 --> 01:13:51,400
We are.

1737
01:13:51,700 --> 01:13:54,700
All around our world, very exciting.

1738
01:13:54,800 --> 01:13:55,400
All right.

1739
01:13:56,600 --> 01:14:00,600
So yeah, sorry to spend all that at you, but I really didn't do very

1740
01:14:00,600 --> 01:14:01,000
much.

1741
01:14:01,000 --> 01:14:04,500
All I did was just move things over to that permanent memory store.

1742
01:14:04,500 --> 01:14:07,300
We haven't actually talked about how we're storing these things yet.

1743
01:14:07,400 --> 01:14:10,500
We literally are just doing exactly all the same things that we were

1744
01:14:10,500 --> 01:14:13,900
doing before just now we're doing them in a way, that's actually

1745
01:14:13,900 --> 01:14:15,600
proper and permanently stored.

1746
01:14:15,600 --> 01:14:18,300
So it persists from frame to frame and if we were to change it on a

1747
01:14:18,300 --> 01:14:20,200
given frame, that would work.

1748
01:14:20,700 --> 01:14:21,100
So yeah.

1749
01:14:21,100 --> 01:14:26,200
So tomorrow we will do our sparse storage which

1750
01:14:26,400 --> 01:14:30,800
Be fine, and I think that we didn't actually put do we actually put a

1751
01:14:31,900 --> 01:14:34,800
to do in there for that on demand cha Chun Creations, that's good.

1752
01:14:34,800 --> 01:14:37,400
That'll be a primary to use for tomorrow, but that's about it.

1753
01:14:37,400 --> 01:14:40,300
Alright, so let's still we can still get in 50 minutes of Q&A.

1754
01:14:40,300 --> 01:14:42,700
That's not too bad here on day 34.

1755
01:14:43,400 --> 01:14:47,600
So I will go ahead and start the Q&A.

1756
01:14:47,800 --> 01:14:50,100
Sorry for taking up a little bit of that time and I hope that that

1757
01:14:50,100 --> 01:14:52,400
made some sense what I was doing there at the end.

1758
01:14:52,400 --> 01:14:54,300
I just wanted to kind of get us back to a running State.

1759
01:14:54,300 --> 01:14:56,100
I like ending the day on a running state.

1760
01:14:56,500 --> 01:14:59,900
So, sometimes I go a little bit too far and I have to quickly.

1761
01:15:00,000 --> 01:15:00,500
Do some stuff.

1762
01:15:00,500 --> 01:15:01,300
So I apologize for that.

1763
01:15:01,300 --> 01:15:06,200
Anyway, if you could please keep the questions to stuff we did on the

1764
01:15:06,200 --> 01:15:09,300
stream today or on a previous day.

1765
01:15:09,300 --> 01:15:13,200
That would be very helpful to stay on topic and please make sure you

1766
01:15:13,200 --> 01:15:16,700
put Q: in front of your questions so that I see them.

1767
01:15:29,700 --> 01:15:31,000
Let's see.

1768
01:15:31,100 --> 01:15:33,200
What have we got for questions.

1769
01:15:41,100 --> 01:15:41,600
Questions.

1770
01:15:41,600 --> 01:15:43,400
Questions questions.

1771
01:15:45,500 --> 01:15:47,100
Got to wait for the questions.

1772
01:15:49,600 --> 01:15:53,500
Of course, you guys don't hear this till after I have set it quite

1773
01:15:53,500 --> 01:15:54,300
some time ago.

1774
01:16:05,600 --> 01:16:07,000
Girl into bloom, hello.

1775
01:16:08,000 --> 01:16:09,300
Hello to you as well.

1776
01:16:18,600 --> 01:16:21,000
Can you explain the motivation behind controlling the page

1777
01:16:21,000 --> 01:16:21,800
granularity?

1778
01:16:21,800 --> 01:16:25,300
Yes, so let's talk about this a little bit.

1779
01:16:26,700 --> 01:16:28,900
Because this will be good setup for what we need to do tomorrow.

1780
01:16:30,400 --> 01:16:30,800
Okay.

1781
01:16:32,100 --> 01:16:40,200
So basically what we want to do, if you think about it is we have to

1782
01:16:40,200 --> 01:16:44,600
store a very potentially a world that has potentially very large.

1783
01:16:44,600 --> 01:16:50,000
Dimensions is what I would like to be able to do because I don't know

1784
01:16:50,300 --> 01:16:53,200
how big we want to make our game.

1785
01:16:53,200 --> 01:16:55,600
Exactly but you know, it might be pretty big.

1786
01:16:56,400 --> 01:17:00,000
So basically we have a possible.

1787
01:17:00,200 --> 01:17:03,700
Size of 4 billion by 4 billion tiles.

1788
01:17:04,300 --> 01:17:08,600
Okay, that is far too many tiles that we could possibly ever hope to

1789
01:17:08,600 --> 01:17:09,000
store.

1790
01:17:09,000 --> 01:17:12,100
Obviously for a billion times, for a billion is more than any

1791
01:17:12,100 --> 01:17:13,800
machines, memory has.

1792
01:17:13,800 --> 01:17:16,600
I mean, maybe you know, the NSA or somebody has something like that.

1793
01:17:16,600 --> 01:17:21,000
But for a billion times 4 billion is way too big of a memory for any

1794
01:17:21,300 --> 01:17:22,900
computer that anyone's going to run the game on.

1795
01:17:22,900 --> 01:17:27,300
So we certainly can't just allocate an array of four billion by four

1796
01:17:27,300 --> 01:17:30,000
billion tiles because no matter how big the towels worry.

1797
01:17:30,100 --> 01:17:33,900
Even thousand or 1 bit per tile, it still would be too big.

1798
01:17:34,500 --> 01:17:37,800
So what we need to do instead is we need to say, all right, obviously,

1799
01:17:37,800 --> 01:17:42,100
we can't make a world quite that big unless it was entirely procedural

1800
01:17:42,100 --> 01:17:43,300
and couldn't be modified.

1801
01:17:43,300 --> 01:17:46,600
So that when you walk to a world location, you really just got a

1802
01:17:46,600 --> 01:17:50,900
generated world right there and you couldn't modify it.

1803
01:17:50,900 --> 01:17:53,800
You would never modify it or save it or anything out because you know,

1804
01:17:53,800 --> 01:17:55,300
eventually that would run out of space.

1805
01:17:56,200 --> 01:17:59,800
So if that's the case, then what we're saying is, there's some subset.

1806
01:18:00,000 --> 01:18:01,000
Here, right?

1807
01:18:01,500 --> 01:18:03,200
Where the actual World exists.

1808
01:18:03,400 --> 01:18:06,700
So there's some subset where there actually are tiles.

1809
01:18:06,700 --> 01:18:07,500
And you know, I don't know.

1810
01:18:07,500 --> 01:18:10,200
You can imagine like a little thing, you know that kind of all these

1811
01:18:10,200 --> 01:18:14,300
like her tiles that are filled in or whatever, right and maybe they're

1812
01:18:14,300 --> 01:18:17,900
kind of eccentric so they don't lay, they don't densely cluster.

1813
01:18:17,900 --> 01:18:19,800
Always like there are dense clusters of them.

1814
01:18:19,800 --> 01:18:22,800
Like maybe there's a lot of them right here, but there's like winding

1815
01:18:22,800 --> 01:18:24,500
B, that kind of wind around and whatever.

1816
01:18:25,100 --> 01:18:27,200
And so now we have to do is figure out how to store this.

1817
01:18:28,100 --> 01:18:31,500
So, what we want to do is we want to have a way of storing it such

1818
01:18:31,500 --> 01:18:36,300
that we can kind of isolate the Region's right where there actually is

1819
01:18:36,300 --> 01:18:40,800
something going on and kind of box that out and store it but then not

1820
01:18:40,800 --> 01:18:43,600
ever store anything out in all these other regions, right?

1821
01:18:43,600 --> 01:18:46,200
And so we haven't actually talked about how we're going to do that

1822
01:18:46,200 --> 01:18:46,400
yet.

1823
01:18:46,400 --> 01:18:49,100
We have to start doing that and that'll be maybe what we start talking

1824
01:18:49,100 --> 01:18:52,400
about tomorrow after we finish our on-demand allocation stuff.

1825
01:18:52,400 --> 01:18:54,700
That's what maybe we'll talk about.

1826
01:18:54,700 --> 01:18:58,100
But basically what we already have to think.

1827
01:18:58,300 --> 01:19:03,800
And what we already wrote is the concept that we need some way of

1828
01:19:03,800 --> 01:19:08,600
creating small tile sets, you know, and this case like I think I left

1829
01:19:08,600 --> 01:19:10,600
it set at, you know, for by I'm sorry.

1830
01:19:10,600 --> 01:19:11,800
16 by 16.

1831
01:19:13,300 --> 01:19:17,700
Sixteen by sixteen tilesets that exists somewhere in the world that we

1832
01:19:17,700 --> 01:19:19,600
can basically use as our tile storage.

1833
01:19:19,600 --> 01:19:23,100
And and wherever there's tiles will store those 16 by 16 s around

1834
01:19:23,100 --> 01:19:25,300
where that is and when there aren't, we won't.

1835
01:19:25,400 --> 01:19:28,200
Now the question that the person was asking is how do you come up with

1836
01:19:28,200 --> 01:19:28,400
this?

1837
01:19:28,400 --> 01:19:29,900
Why are we storing them this way?

1838
01:19:30,000 --> 01:19:31,700
You know, how come we're storing them in chunks.

1839
01:19:32,300 --> 01:19:35,100
The reason for that is because basically we're going to have no

1840
01:19:35,100 --> 01:19:35,400
matter.

1841
01:19:35,400 --> 01:19:39,500
What is we're going to have some kind of an indexing scheme that

1842
01:19:39,500 --> 01:19:42,800
allows us to get at the tiles that are

1843
01:19:43,100 --> 01:19:44,000
Restored, right?

1844
01:19:44,000 --> 01:19:45,500
We're going to have a tile index.

1845
01:19:45,500 --> 01:19:47,400
You know, we've got a tile index, it's over here.

1846
01:19:47,600 --> 01:19:49,000
And we want to ask the question.

1847
01:19:49,200 --> 01:19:50,700
Is there anything stored there?

1848
01:19:51,200 --> 01:19:56,400
Now, if we were to actually store the tiles themselves in that table,

1849
01:19:56,400 --> 01:20:01,900
the table would be too big in order to be the table itself.

1850
01:20:01,900 --> 01:20:05,000
If we want to make it efficient, whatever the indexing scheme is, we

1851
01:20:05,000 --> 01:20:09,200
use for those tiles is going to incur way too much overhead because

1852
01:20:09,200 --> 01:20:12,900
there are so many tiles that are filled, we

1853
01:20:13,000 --> 01:20:16,300
Don't want to store sort of this infrastructure for querying them

1854
01:20:16,300 --> 01:20:19,100
directly because the infrastructure itself that we will build for the

1855
01:20:19,100 --> 01:20:22,600
sparse stuff would be too heavy weight in and of itself.

1856
01:20:22,700 --> 01:20:25,800
So what we'd rather do is have an infrastructure that just deals with

1857
01:20:25,800 --> 01:20:31,500
some aggregate amount of tiles, such a 16 by 16, 64 by 64.

1858
01:20:31,500 --> 01:20:34,700
Let's say something like that that we have to pick so that the

1859
01:20:34,700 --> 01:20:37,700
infrastructure can deal with far less of these, right?

1860
01:20:37,700 --> 01:20:40,400
Because let's say we do 64 by let's say what okay?

1861
01:20:40,700 --> 01:20:42,700
To put this in a little more explicit terms.

1862
01:20:42,700 --> 01:20:42,900
Let's

1863
01:20:43,000 --> 01:20:44,300
Say that the infrastructure.

1864
01:20:45,900 --> 01:20:49,100
Has a certain cost to storing how it's indexing.

1865
01:20:49,100 --> 01:20:50,600
These sparse tiles, right?

1866
01:20:50,900 --> 01:20:58,900
If I have to do 64 times 64, let's say right that's 4096 tiles in a

1867
01:20:58,900 --> 01:20:59,400
page.

1868
01:21:00,000 --> 01:21:00,500
Right.

1869
01:21:01,700 --> 01:21:05,400
That means that if that means that essentially, I can reduce my

1870
01:21:05,400 --> 01:21:12,400
infrastructure cost by 4096 times, just by using pages of that size,

1871
01:21:12,500 --> 01:21:12,700
right?

1872
01:21:12,700 --> 01:21:15,500
Because whatever, cost to do the indexing if I was doing them on

1873
01:21:15,500 --> 01:21:21,800
individual tiles, it cost me 4096, more infrastructure, cost, whatever

1874
01:21:21,800 --> 01:21:25,100
that have structure is then if I was doing it on these pages, so

1875
01:21:25,100 --> 01:21:29,300
basically the page granularity is about spining that trade-off where

1876
01:21:29,300 --> 01:21:31,200
the infrastructure where your

1877
01:21:31,400 --> 01:21:35,300
I feel fine enough that, you're not massively overstating where the

1878
01:21:35,300 --> 01:21:36,100
tiles are, right?

1879
01:21:36,100 --> 01:21:39,600
Like we could make it before thousand Isis by 4096, but then it's like

1880
01:21:39,600 --> 01:21:41,500
storing tons of stuff that doesn't need to store.

1881
01:21:41,800 --> 01:21:46,800
So, we want to be small enough that can capture the, the sort of shape

1882
01:21:46,800 --> 01:21:48,500
of the actual stuff for trying to store.

1883
01:21:49,000 --> 01:21:53,600
But we also want it to eliminate the to cut that total number of

1884
01:21:53,600 --> 01:21:56,300
things that are being tracked by the infrastructure down enough.

1885
01:21:56,900 --> 01:21:59,200
That the infrastructure itself doesn't become a problem.

1886
01:21:59,800 --> 01:22:02,500
And, you know, it's not out of the question that sometimes you even do

1887
01:22:02,500 --> 01:22:03,600
these things hierarchically.

1888
01:22:03,700 --> 01:22:07,300
You can imagine doing like 16 by 16 s, but then those 16 by 16 s are

1889
01:22:07,300 --> 01:22:09,200
in something that itself has 16 by 16.

1890
01:22:09,200 --> 01:22:10,900
There's there's different ways of doing it.

1891
01:22:10,900 --> 01:22:13,300
But since we haven't talked about how we're actually gonna do this for

1892
01:22:13,300 --> 01:22:14,300
our storage yet.

1893
01:22:14,400 --> 01:22:16,700
We don't actually know what that's going to look like.

1894
01:22:16,700 --> 01:22:19,900
We can't make a good trade off yet, but I know it's probably going to

1895
01:22:19,900 --> 01:22:21,800
be something like this.

1896
01:22:21,800 --> 01:22:25,000
So I just started us off by having a little tile sections because

1897
01:22:25,000 --> 01:22:26,800
we're going to want something along those lines.

1898
01:22:36,100 --> 01:22:36,700
Call Dragon.

1899
01:22:36,700 --> 01:22:39,000
I'm a little confused about the purpose of the memory Arena.

1900
01:22:39,000 --> 01:22:40,100
Would it be accurate to say?

1901
01:22:40,100 --> 01:22:43,600
It's for more temporary objects than we're storing in the game, State

1902
01:22:43,600 --> 01:22:44,500
directly know.

1903
01:22:45,300 --> 01:22:46,900
So basically here's what's going on.

1904
01:22:47,700 --> 01:22:49,800
So we need to store our game state.

1905
01:22:50,100 --> 01:22:50,700
Right?

1906
01:22:51,000 --> 01:22:54,800
And the, we need to store the whole game state, right?

1907
01:22:55,400 --> 01:22:57,300
We need it to be persistent.

1908
01:22:57,300 --> 01:23:00,100
We may even need to save it to disk in the case where the person stops

1909
01:23:00,100 --> 01:23:01,900
playing for a while, wants to come back to it.

1910
01:23:05,400 --> 01:23:07,500
We're kind of doing a roguelike Style game.

1911
01:23:08,200 --> 01:23:12,000
So we may never save it to disk in the sense that you can save and

1912
01:23:12,000 --> 01:23:13,100
load your game.

1913
01:23:13,300 --> 01:23:17,100
But if the user like needs to quit for a second, and come back to it

1914
01:23:17,100 --> 01:23:19,400
tomorrow night or whatever, when they're playing, we want to be able

1915
01:23:19,400 --> 01:23:22,300
to have them quit and they can just load back up where they were or

1916
01:23:22,300 --> 01:23:23,100
something, right?

1917
01:23:23,100 --> 01:23:24,400
So it may be need a persistent disk.

1918
01:23:24,400 --> 01:23:25,700
So basically this whole thing,

1919
01:23:27,300 --> 01:23:27,900
Right?

1920
01:23:28,400 --> 01:23:30,900
This game State, we need to store all of it.

1921
01:23:30,900 --> 01:23:32,900
And what is the game State entail?

1922
01:23:32,900 --> 01:23:37,000
Well, it's going to entail the world map that we generated, right?

1923
01:23:37,000 --> 01:23:38,000
It's going to entail.

1924
01:23:38,000 --> 01:23:41,100
All the entities that exist in the world.

1925
01:23:41,100 --> 01:23:44,600
It's going to have any attributes that they have, right, like our

1926
01:23:44,600 --> 01:23:48,000
things and it's going to have like score or gold or whatever, you

1927
01:23:48,000 --> 01:23:51,400
know, whatever the things are that the player has all that stuff.

1928
01:23:51,500 --> 01:23:53,200
This is all part of our game state.

1929
01:23:53,700 --> 01:23:55,000
So we need to store it all somewhere.

1930
01:23:55,700 --> 01:23:59,100
And so what we need to do is we need to have a place to store it.

1931
01:23:59,100 --> 01:23:59,900
Now, what you'll remember.

1932
01:24:00,100 --> 01:24:03,300
Is our game State structure, right?

1933
01:24:03,500 --> 01:24:06,400
Actually does contain all these things are game State structure

1934
01:24:06,400 --> 01:24:09,200
contains the world like it's a pointer to the world.

1935
01:24:09,200 --> 01:24:10,700
It's got the top position of the player.

1936
01:24:10,700 --> 01:24:13,000
The world has the tile map in it blah, blah, blah, right.

1937
01:24:13,400 --> 01:24:16,400
So all the memory arena, is it something that allows us to

1938
01:24:16,400 --> 01:24:19,700
conveniently, put more things on to the permanent storage?

1939
01:24:19,700 --> 01:24:23,500
Now, you didn't see it cost anything because the first thing we

1940
01:24:23,500 --> 01:24:24,300
allocate,

1941
01:24:25,100 --> 01:24:27,300
In the permanent storage doesn't require any work.

1942
01:24:27,600 --> 01:24:30,500
It's just the pointer to the firm and storage, whatever the base of

1943
01:24:30,500 --> 01:24:31,200
the Perma storages.

1944
01:24:31,200 --> 01:24:34,200
We stuck our game State there, that's free to do, but could you

1945
01:24:34,200 --> 01:24:35,600
imagine what would happen?

1946
01:24:35,700 --> 01:24:40,200
If all of these things I had to do the arithmetic for figuring out

1947
01:24:40,200 --> 01:24:42,300
where they were in the permanent storage.

1948
01:24:42,300 --> 01:24:44,400
That would be a huge pain, right?

1949
01:24:44,500 --> 01:24:46,000
This would have to be okay.

1950
01:24:46,000 --> 01:24:49,800
Take this and add however big it was and do it and then this thing

1951
01:24:49,800 --> 01:24:51,600
would have to figure out okay, where was the world?

1952
01:24:51,600 --> 01:24:54,600
Okay, put it after the World by however big the world was and then

1953
01:24:54,600 --> 01:24:54,700
this

1954
01:24:54,800 --> 01:24:56,400
I have to go and do a bubble bar.

1955
01:24:56,400 --> 01:24:56,900
Right?

1956
01:24:57,300 --> 01:25:00,200
So all the memory arena is the only thing that is doing for us.

1957
01:25:00,200 --> 01:25:04,500
Right now is basically saying automatically layout where all of our

1958
01:25:04,500 --> 01:25:06,300
stuff goes in memory.

1959
01:25:06,300 --> 01:25:08,000
So we don't have to do it manually.

1960
01:25:08,100 --> 01:25:11,000
So all it's doing is it's storing stuff in the permanent storage just

1961
01:25:11,000 --> 01:25:13,100
like the game state, but it's laying things out for us.

1962
01:25:13,100 --> 01:25:14,400
So we don't have to do it ourselves.

1963
01:25:14,400 --> 01:25:17,200
It's an automation for that, right?

1964
01:25:30,000 --> 01:25:30,700
Let's see.

1965
01:25:30,700 --> 01:25:34,400
Why not have smooth rolling and have the world generation.

1966
01:25:34,400 --> 01:25:35,200
Add edges.

1967
01:25:35,200 --> 01:25:38,800
We're scrolling stops acting as rooms or local tile Maps.

1968
01:25:39,300 --> 01:25:42,400
Yes, so that's that is essentially what we will be doing.

1969
01:25:42,400 --> 01:25:42,500
It.

1970
01:25:42,500 --> 01:25:44,700
Just I don't like Smooth scrolling.

1971
01:25:45,300 --> 01:25:49,300
So we won't really have any rooms that are bigger than can fit on the

1972
01:25:49,300 --> 01:25:49,700
screen.

1973
01:25:49,700 --> 01:25:50,500
Does that make sense?

1974
01:25:50,800 --> 01:25:52,100
So that is what we'll be doing.

1975
01:25:52,100 --> 01:25:57,200
Will have the world generation generate rooms, you know that, you know

1976
01:25:57,400 --> 01:25:58,600
kind of have a certain

1977
01:25:59,100 --> 01:26:00,900
Layout to them, right?

1978
01:26:02,500 --> 01:26:06,100
Like this sort of thing and then we'll just the camera will just

1979
01:26:06,100 --> 01:26:07,800
always be looking at one of them.

1980
01:26:07,900 --> 01:26:11,200
And when you walk off of one of them, you the camera is switched to be

1981
01:26:11,200 --> 01:26:12,400
looking at a different one.

1982
01:26:12,600 --> 01:26:14,700
That's that's what we're going to do, right?

1983
01:26:16,200 --> 01:26:16,500
Yeah.

1984
01:26:21,400 --> 01:26:22,800
I already have the oi compiler.

1985
01:26:22,800 --> 01:26:23,500
Flag set.

1986
01:26:23,700 --> 01:26:26,000
Do we already have the oi comparison like set?

1987
01:26:27,700 --> 01:26:28,600
Yeah, we do.

1988
01:26:29,300 --> 01:26:32,100
Hmm, so I wonder why, I guess.

1989
01:26:32,500 --> 01:26:33,300
Oh, you know what?

1990
01:26:33,300 --> 01:26:35,200
It's probably FP fast.

1991
01:26:35,400 --> 01:26:36,400
It's FP fast.

1992
01:26:36,400 --> 01:26:37,800
Probably that we didn't, you know what?

1993
01:26:37,800 --> 01:26:40,300
And we can probably just set that in our compiler.

1994
01:26:40,300 --> 01:26:42,000
Flags in general as well.

1995
01:26:42,500 --> 01:26:46,100
I suspect that would totally be fine because that's not really a

1996
01:26:46,100 --> 01:26:48,900
debugging issue for us, and we just don't want to call the C runtime

1997
01:26:48,900 --> 01:26:50,000
Library pretty much.

1998
01:26:51,000 --> 01:26:52,700
So let's take a look at what that does.

1999
01:26:52,700 --> 01:26:55,400
Assuming that we have FP fast set.

2000
01:26:55,500 --> 01:26:56,900
I feel like then

2001
01:26:57,500 --> 01:26:59,800
when we are in the tile, so, let's see.

2002
01:27:00,000 --> 01:27:04,100
Unreal 3 to 2 in 32, or is it you at 32?

2003
01:27:04,100 --> 01:27:08,000
I think that we actually used but either or let's go into the

2004
01:27:08,000 --> 01:27:10,600
disassembly here and just see if it did the right thing.

2005
01:27:11,500 --> 01:27:13,300
Yeah, so that's see that's great.

2006
01:27:13,400 --> 01:27:14,600
And that's what I like.

2007
01:27:15,800 --> 01:27:17,000
It's, you know, it's not.

2008
01:27:17,000 --> 01:27:18,300
Oh wait, no, no, never mind.

2009
01:27:18,300 --> 01:27:19,500
I just, I got too excited.

2010
01:27:19,500 --> 01:27:22,500
It's still calling around F lame-o.

2011
01:27:23,100 --> 01:27:24,700
Well, what do you do?

2012
01:27:25,700 --> 01:27:26,500
So anyway, yeah.

2013
01:27:26,500 --> 01:27:29,800
I was hoping that basically - ft fast and - oh I together.

2014
01:27:30,000 --> 01:27:32,500
I would do it, but maybe you actually, I guess.

2015
01:27:32,500 --> 01:27:36,600
Do you have to specify - 02 to get to get it to do?

2016
01:27:37,400 --> 01:27:38,100
Let's see.

2017
01:27:43,000 --> 01:27:45,400
Where is the place that does that give me?

2018
01:27:45,400 --> 01:27:46,800
Where is my tile?

2019
01:27:47,100 --> 01:27:48,800
I want my tile routine.

2020
01:27:49,400 --> 01:27:50,700
I want my tile routine.

2021
01:27:51,400 --> 01:27:53,000
Get tile value.

2022
01:27:53,700 --> 01:27:54,200
There we go.

2023
01:27:55,200 --> 01:27:59,100
So let's go ahead and see it in line to that.

2024
01:27:59,100 --> 01:27:59,700
Didn't it?

2025
01:27:59,800 --> 01:28:03,800
Yeah, it's in line and it's aligning everything which I which is good.

2026
01:28:03,800 --> 01:28:10,200
I like inlining but I don't actually know ghost assembly.

2027
01:28:11,100 --> 01:28:14,500
I don't actually know what it decided to do for rounding.

2028
01:28:16,100 --> 01:28:17,300
Let's take a look here.

2029
01:28:18,600 --> 01:28:19,900
Did it ever call around?

2030
01:28:19,900 --> 01:28:20,300
F?

2031
01:28:20,300 --> 01:28:23,700
Get a chunk, and get Top Value.

2032
01:28:24,200 --> 01:28:26,100
I'm not seeing a call to it.

2033
01:28:26,700 --> 01:28:28,000
I'm not seeing a call to it.

2034
01:28:28,000 --> 01:28:31,400
So that's although it doesn't.

2035
01:28:31,400 --> 01:28:32,400
Actually, now never mind.

2036
01:28:32,400 --> 01:28:34,500
Doesn't actually need to do that for Recon Eclipse coordinates.

2037
01:28:34,500 --> 01:28:35,900
That's going to be in the other one.

2038
01:28:35,900 --> 01:28:40,000
We only ever call that, we only ever call that back here.

2039
01:28:40,100 --> 01:28:42,500
So if you wanted to see whether to recalls round, if we've got to look

2040
01:28:42,500 --> 01:28:44,600
at here right there, right?

2041
01:28:44,600 --> 01:28:45,300
Basically, right.

2042
01:28:45,300 --> 01:28:45,600
We got to

2043
01:28:45,900 --> 01:28:47,700
What it does when it re canonicalize is.

2044
01:28:48,700 --> 01:28:56,300
So let's take a look and see be canonicalize position is going to go

2045
01:28:56,300 --> 01:28:59,500
ahead and do well.

2046
01:28:59,500 --> 01:29:03,500
PS Shuff PS Shuff Psy.

2047
01:29:03,500 --> 01:29:05,600
Is it what's shuffling out?

2048
01:29:06,000 --> 01:29:07,400
I guess I shouldn't be looking at this.

2049
01:29:07,400 --> 01:29:07,600
Now.

2050
01:29:07,600 --> 01:29:10,900
This is not really what we should be doing now, so it's still calls

2051
01:29:10,900 --> 01:29:11,700
round F.

2052
01:29:11,900 --> 01:29:13,400
So that's that's lame.

2053
01:29:14,200 --> 01:29:15,400
I wish it wouldn't do that.

2054
01:29:15,600 --> 01:29:16,100
Is I guess what?

2055
01:29:16,100 --> 01:29:20,300
I would say, but I guess we'll have to basically, like I said, we'll

2056
01:29:20,300 --> 01:29:21,500
have to write that ourselves.

2057
01:29:22,100 --> 01:29:22,700
What are you gonna do?

2058
01:29:23,400 --> 01:29:27,500
What are you going to do if the compiler whilst all around if it's

2059
01:29:27,500 --> 01:29:28,300
going to call around death?

2060
01:29:33,400 --> 01:29:34,800
Does using the memory Lee Arena?

2061
01:29:34,800 --> 01:29:36,400
Still allow you to Hot Load your code.

2062
01:29:36,400 --> 01:29:36,900
Yes.

2063
01:29:37,100 --> 01:29:40,300
In fact, that's the reason that we have things set up the way that we

2064
01:29:40,300 --> 01:29:40,900
do.

2065
01:29:41,400 --> 01:29:44,900
So if you notice the, you know, if we want to do stuff like are looped

2066
01:29:44,900 --> 01:29:47,400
Live code editing, I can totally do that.

2067
01:29:47,400 --> 01:29:49,800
So we come here and there we go.

2068
01:29:49,800 --> 01:29:52,600
You can see it's reloading properly just as it was before.

2069
01:29:53,000 --> 01:29:53,800
No big deal.

2070
01:29:54,000 --> 01:29:58,900
The reason for that is because that memory Arena again, you know,

2071
01:29:59,200 --> 01:29:59,800
don't be fooled.

2072
01:30:00,100 --> 01:30:03,000
Names of things just because I called it a memory Rina.

2073
01:30:03,000 --> 01:30:06,800
I called it that because that's sort of what I think of it as being.

2074
01:30:07,400 --> 01:30:09,700
But look at what it's doing, right?

2075
01:30:09,700 --> 01:30:11,400
You can answer this question for yourself.

2076
01:30:12,500 --> 01:30:14,100
The memory permanent storage.

2077
01:30:14,100 --> 01:30:15,300
Where did that come from?

2078
01:30:15,600 --> 01:30:16,000
Right?

2079
01:30:16,000 --> 01:30:17,000
Where did that come from?

2080
01:30:17,300 --> 01:30:19,300
You remember because we allocated it.

2081
01:30:19,300 --> 01:30:19,600
Right.

2082
01:30:19,600 --> 01:30:21,600
We allocated it with virtual a lock.

2083
01:30:22,300 --> 01:30:25,200
So what we did is we did our virtual Alec here.

2084
01:30:26,300 --> 01:30:28,600
The permanent storage came out of it.

2085
01:30:28,600 --> 01:30:30,700
The transient storage came out of it, right?

2086
01:30:30,700 --> 01:30:32,100
So we have that one memory block.

2087
01:30:32,500 --> 01:30:35,700
Now, that memory block remember is getting persisted by everything

2088
01:30:35,700 --> 01:30:37,100
that we do, right?

2089
01:30:37,100 --> 01:30:40,700
So everything that we do with the loop live coding, and all that stuff

2090
01:30:40,700 --> 01:30:43,100
is getting persisted all this whole block.

2091
01:30:43,700 --> 01:30:47,300
Now permanent storage, is the memory that we have here.

2092
01:30:47,800 --> 01:30:50,700
The arena only uses that memory in permanent storage.

2093
01:30:50,800 --> 01:30:54,000
It's only just all it's doing is giving you back things that are

2094
01:30:54,000 --> 01:30:55,900
inside the permanent storage and never call.

2095
01:30:56,000 --> 01:30:57,400
An allocation function or anything.

2096
01:30:57,800 --> 01:31:01,400
So, basically, what happens, there is all of the stuff that gets get

2097
01:31:01,400 --> 01:31:06,400
goes through the the the arena is always going to be persistable

2098
01:31:06,400 --> 01:31:08,900
because it's always going into that one memory block, right?

2099
01:31:09,100 --> 01:31:13,600
And so that's that's a, that's an easy way to think of it is like,

2100
01:31:13,600 --> 01:31:14,600
basically everything's going there.

2101
01:31:14,600 --> 01:31:15,700
So, so there.

2102
01:31:15,800 --> 01:31:18,000
Yeah, there's no issue with the persistence with that.

2103
01:31:32,500 --> 01:31:33,300
Will we be covering trigger?

2104
01:31:33,300 --> 01:31:34,600
Approximations msec.

2105
01:31:34,600 --> 01:31:35,300
Doesn't seem that right?

2106
01:31:35,300 --> 01:31:35,600
Yes.

2107
01:31:35,600 --> 01:31:40,000
We will have to implement our own sine and cosine because at least

2108
01:31:40,000 --> 01:31:42,100
last time I remember looking at it.

2109
01:31:42,100 --> 01:31:45,000
I don't think SSE has anything like that as he doesn't have signs of

2110
01:31:45,000 --> 01:31:45,500
cosines.

2111
01:31:45,500 --> 01:31:48,900
You have to do it with like serious Fashions and stuff.

2112
01:31:51,400 --> 01:31:52,300
So, we'll be doing this.

2113
01:32:01,200 --> 01:32:03,200
Will there be enough memory to store the entire sparse?

2114
01:32:03,200 --> 01:32:05,900
Tilemap, or, will you paging it in and out, in chunks?

2115
01:32:06,400 --> 01:32:08,600
I feel like, we'll just, we'll use enough memory for that.

2116
01:32:08,600 --> 01:32:09,800
I feel like, I don't know.

2117
01:32:09,800 --> 01:32:10,900
I mean, we'll have to see.

2118
01:32:15,000 --> 01:32:15,900
These are the kind of questions.

2119
01:32:15,900 --> 01:32:18,400
I can't answer off the bat because we haven't even really made the

2120
01:32:18,400 --> 01:32:18,800
game yet.

2121
01:32:18,800 --> 01:32:21,800
And once we make the game will start to feel, will have a feel for how

2122
01:32:21,800 --> 01:32:23,500
big we want the world to be.

2123
01:32:23,500 --> 01:32:26,900
And if it turns out that that answer is that it sometimes, you want to

2124
01:32:26,900 --> 01:32:27,900
set it to be huge.

2125
01:32:28,200 --> 01:32:29,600
Maybe we page things in and out.

2126
01:32:29,700 --> 01:32:33,000
It's not impossible paging in and out, would certainly work fine.

2127
01:32:33,100 --> 01:32:33,600
So,

2128
01:32:40,000 --> 01:32:41,600
Let's see.

2129
01:32:44,600 --> 01:32:47,400
Why not just allocate a large giant one-dimensional array.

2130
01:32:47,400 --> 01:32:48,600
Instead of the current tile.

2131
01:32:48,600 --> 01:32:52,300
Map tiles 2 dimensional array and refer to it by y times with plus X

2132
01:32:52,300 --> 01:32:52,800
format.

2133
01:32:53,500 --> 01:32:53,900
So.

2134
01:32:53,900 --> 01:32:56,600
Well, first of all, everything in memory obviously is one-dimensional,

2135
01:32:57,400 --> 01:32:58,600
but there is a question.

2136
01:32:58,600 --> 01:32:59,800
There is a sort of a

2137
01:33:00,000 --> 01:33:05,900
In there that does bear analysis, which is how you choose to break up

2138
01:33:05,900 --> 01:33:07,800
the world stride wise, right?

2139
01:33:08,700 --> 01:33:11,000
So, basically,

2140
01:33:12,200 --> 01:33:15,600
We could do one of two things for storing chunks.

2141
01:33:16,500 --> 01:33:21,700
We could store a long thin chunks like this or we could store

2142
01:33:21,700 --> 01:33:24,600
rectangular chunks like this, right?

2143
01:33:24,600 --> 01:33:26,100
And these would be the same size.

2144
01:33:26,100 --> 01:33:26,400
Right?

2145
01:33:26,400 --> 01:33:31,600
Let's say this was, you know, a 4x4, right?

2146
01:33:31,600 --> 01:33:35,400
So we can store something that's like this sort of thing where we

2147
01:33:35,400 --> 01:33:39,300
basically have four things for chunk.

2148
01:33:40,300 --> 01:33:48,700
Right, or we can store this sort of thing where we've got a 4 by 4,

2149
01:33:49,100 --> 01:33:49,400
right?

2150
01:33:49,400 --> 01:33:54,900
So we can have we can have a sixteen by one or a 4x4, right?

2151
01:33:54,900 --> 01:33:56,100
We could make those decisions.

2152
01:33:56,500 --> 01:34:01,700
And there's a difference between these two and the difference is when

2153
01:34:01,700 --> 01:34:03,400
we actually go to do sparseness.

2154
01:34:03,600 --> 01:34:06,900
Remember, we've got this whole world and we've got some stuff in it

2155
01:34:06,900 --> 01:34:07,900
that we want to represent.

2156
01:34:07,900 --> 01:34:10,000
And now, what we have to do is we

2157
01:34:10,100 --> 01:34:15,800
To accept some additional storage that we didn't actually want when we

2158
01:34:15,800 --> 01:34:19,700
go to fit these things to this thing, right?

2159
01:34:20,700 --> 01:34:24,500
So when we actually go to do this, we're going to have that problem

2160
01:34:24,800 --> 01:34:26,500
right now.

2161
01:34:26,600 --> 01:34:31,400
What we don't want to do is pick a shape for the sparseness that will

2162
01:34:31,400 --> 01:34:33,800
have negative connotations.

2163
01:34:33,800 --> 01:34:36,400
Like, when we want to store, you know, a thin thing of people are

2164
01:34:36,400 --> 01:34:38,300
walking up and down, when you don't want to be storing.

2165
01:34:38,500 --> 01:34:40,800
All of these extra, all of this extra stuff out here.

2166
01:34:40,800 --> 01:34:43,900
That would happen if we were storing with this long thing.

2167
01:34:43,900 --> 01:34:48,100
So, because we know we're having rectangular rooms and that sort of

2168
01:34:48,100 --> 01:34:48,500
stuff.

2169
01:34:48,800 --> 01:34:50,300
This is going to be a much

2170
01:34:50,500 --> 01:34:53,700
Better fit a rectangular or square piece is going to be a much better

2171
01:34:53,700 --> 01:34:57,400
fit to fit the data that we actually want, if that makes sense.

2172
01:34:58,200 --> 01:35:01,200
So that's why we're going with chunks that are that size.

2173
01:35:01,700 --> 01:35:02,100
Now.

2174
01:35:02,100 --> 01:35:05,000
There is a question, which is that if we have a canonical screen size

2175
01:35:05,000 --> 01:35:07,000
and that does end up being 16 by 9.

2176
01:35:07,600 --> 01:35:11,800
Don't we want to store them as 617 by nine chunks and the answer is

2177
01:35:11,800 --> 01:35:13,100
yes, we kind of do.

2178
01:35:13,800 --> 01:35:17,500
And so what we may decide to do is actually use 17 by nine chunks

2179
01:35:17,500 --> 01:35:20,300
eventually and and eat the extra.

2180
01:35:20,400 --> 01:35:25,000
Cost of doing the lookups because the lookups become a lot more

2181
01:35:25,000 --> 01:35:27,800
expensive when these aren't power of 2, right?

2182
01:35:29,400 --> 01:35:30,200
So, there's that.

2183
01:35:40,200 --> 01:35:42,800
You are losing a lot of pointers here.

2184
01:35:43,100 --> 01:35:47,400
How are you managing the memory regarding leaks and um, our etcetera.

2185
01:35:48,000 --> 01:35:49,500
Well, we

2186
01:35:52,900 --> 01:35:53,700
I'm not really sure.

2187
01:35:53,700 --> 01:35:54,800
I understand the question.

2188
01:35:56,700 --> 01:35:57,500
So.

2189
01:35:58,700 --> 01:35:59,900
I guess I'll kind of give a general.

2190
01:36:00,000 --> 01:36:00,400
Sir.

2191
01:36:02,000 --> 01:36:04,800
The way we're doing things, we just use a memory block.

2192
01:36:04,900 --> 01:36:06,200
So we don't have to.

2193
01:36:06,200 --> 01:36:08,300
We don't have any memory leaks like that.

2194
01:36:08,300 --> 01:36:10,500
Memory got gets Fleet Freed at the end.

2195
01:36:10,600 --> 01:36:13,800
There's no way we can leak the memory.

2196
01:36:15,600 --> 01:36:17,700
So there isn't.

2197
01:36:18,800 --> 01:36:22,000
I mean, this is something that I guess that I don't know, you kind of

2198
01:36:22,000 --> 01:36:23,700
just have to watch and see how I do it.

2199
01:36:23,700 --> 01:36:26,500
I guess as we go forwards but people often ask me this question.

2200
01:36:26,500 --> 01:36:28,600
They're like, how do you manage memory or how do you deal with

2201
01:36:28,600 --> 01:36:29,100
garbage?

2202
01:36:29,100 --> 01:36:30,200
Not having garbage collection All-Star.

2203
01:36:30,200 --> 01:36:37,800
Sup, there's no memory to manage in a game like games, typically just

2204
01:36:38,400 --> 01:36:40,100
they create their stuff and then they run.

2205
01:36:40,100 --> 01:36:41,800
There isn't any memory to manage.

2206
01:36:41,800 --> 01:36:45,800
It's usually just people sort of misunderstanding, the basic way that

2207
01:36:45,800 --> 01:36:47,200
you should probably program things.

2208
01:36:47,200 --> 01:36:48,300
I feel like when you have

2209
01:36:48,500 --> 01:36:50,700
Lots of memory getting allocated and stuff like this.

2210
01:36:51,000 --> 01:36:53,100
That has to get managed and freed in that way.

2211
01:36:54,000 --> 01:36:56,900
And so, if you'll notice, I've never allocated any memory that has to

2212
01:36:56,900 --> 01:36:57,400
get freed.

2213
01:36:57,400 --> 01:37:00,700
I've never done anything that requires tracking of pointers or

2214
01:37:00,700 --> 01:37:03,600
anything like that and that's intentional.

2215
01:37:03,700 --> 01:37:05,800
This whole game will be structured in a very clean way.

2216
01:37:05,800 --> 01:37:07,600
Such that, that sort of stuff, never happens.

2217
01:37:08,100 --> 01:37:10,700
So there won't ever be any leaks because there won't ever be any

2218
01:37:10,700 --> 01:37:11,300
allocations.

2219
01:37:11,300 --> 01:37:12,100
If that makes sense.

2220
01:37:12,700 --> 01:37:16,800
When we create the world, the world will get created as one in this in

2221
01:37:16,800 --> 01:37:17,700
this block.

2222
01:37:17,800 --> 01:37:18,300
And when

2223
01:37:18,400 --> 01:37:22,800
When you close that down and go to a new and it'll just jettison the

2224
01:37:22,800 --> 01:37:27,200
entire Block in as a whole and start a new block, right?

2225
01:37:27,200 --> 01:37:32,100
So you never have to worry about freeing forests of things which is

2226
01:37:32,100 --> 01:37:34,200
where you need garbage collection and stuff to help you.

2227
01:37:34,200 --> 01:37:37,400
If you are getting confused or whatever you don't you just don't ever

2228
01:37:37,400 --> 01:37:38,400
do those things.

2229
01:37:40,000 --> 01:37:42,800
And so yeah, this is why a lot of times I guess people find it weird,

2230
01:37:42,800 --> 01:37:45,600
but I don't think about memory management memory management is isn't

2231
01:37:45,600 --> 01:37:46,100
an issue.

2232
01:37:47,400 --> 01:37:48,300
How much memory

2233
01:37:48,500 --> 01:37:51,800
I'm using is always an issue, but that's because I always try to think

2234
01:37:51,800 --> 01:37:53,100
about think giving these just rain.

2235
01:37:53,100 --> 01:37:56,900
Like, I always try to think about let's keep everything inside like

2236
01:37:56,900 --> 01:37:59,300
64, Meg's or something like that.

2237
01:37:59,400 --> 01:38:02,400
And that's always something that you have to work on and think about,

2238
01:38:02,400 --> 01:38:06,600
because using how much memory you actually need is a problem, but

2239
01:38:06,800 --> 01:38:09,700
freeing it and managing ownership and that's our stuff is just.

2240
01:38:09,700 --> 01:38:11,200
You should never even think about that.

2241
01:38:11,200 --> 01:38:12,300
Or even have to think about that.

2242
01:38:12,300 --> 01:38:15,100
If you're thinking about that, you probably did something wrong in

2243
01:38:15,100 --> 01:38:16,700
your architecture and you should rethink it.

2244
01:38:17,000 --> 01:38:17,800
If that makes sense.

2245
01:38:18,400 --> 01:38:20,800
And so you'll just have to kind of trust me that that's true.

2246
01:38:20,800 --> 01:38:25,600
And you can see as I go that I always have a good solution for that at

2247
01:38:25,600 --> 01:38:28,200
all times and that I'm never in the situation where I'm like, oh and

2248
01:38:28,200 --> 01:38:30,800
then we have to free the thing and oh, but that points out the things

2249
01:38:30,800 --> 01:38:33,400
in those I've got for you to you never like, don't don't do that.

2250
01:38:33,400 --> 01:38:39,100
Just never ever write that code because it's basically like it's not

2251
01:38:39,100 --> 01:38:44,400
necessary and when you write it either you have to use a language that

2252
01:38:44,400 --> 01:38:46,900
has garbage collection because you can't manage it yourself because

2253
01:38:46,900 --> 01:38:48,200
it's too complicated or something.

2254
01:38:49,000 --> 01:38:51,400
And that incurs all these costs for the garbage collection and all

2255
01:38:51,400 --> 01:38:52,900
these other things that don't have to happen.

2256
01:38:52,900 --> 01:38:55,900
You're just wasting the user's time running all that stuff like the

2257
01:38:55,900 --> 01:38:59,700
garbage collector collector or if you're writing a language without

2258
01:38:59,700 --> 01:38:59,800
cover.

2259
01:39:00,000 --> 01:39:02,200
Listen, you're making a ton of more work for yourself.

2260
01:39:02,200 --> 01:39:03,700
Having to remember what's getting freed.

2261
01:39:03,700 --> 01:39:05,900
And what's not or using all these smart pointers to do all these

2262
01:39:05,900 --> 01:39:08,600
checks and those checks and corrects your cost and you're just

2263
01:39:08,600 --> 01:39:10,400
incurring all this extra cost.

2264
01:39:10,400 --> 01:39:14,000
All this extra work that the CPU does or that you're doing, mentally,

2265
01:39:14,000 --> 01:39:16,400
all that stuff that never needed to happen.

2266
01:39:16,600 --> 01:39:21,700
So just don't write that code, like, never write that code, write it

2267
01:39:21,700 --> 01:39:22,400
this way.

2268
01:39:22,600 --> 01:39:24,000
And then you never have to worry about it.

2269
01:39:24,000 --> 01:39:27,100
And I think that's deaf just generally a very good rule of thumb.

2270
01:39:27,600 --> 01:39:28,200
So, there you go.

2271
01:39:33,700 --> 01:39:36,100
Well, maybe Arena be aligning the assigned memory, depending on the

2272
01:39:36,100 --> 01:39:37,600
size of the first on the struct.

2273
01:39:38,000 --> 01:39:40,400
Well, eventually, when we care about alignment, actually, we will

2274
01:39:40,400 --> 01:39:42,400
probably be passing an alignment to the arena.

2275
01:39:43,100 --> 01:39:45,700
Because when we actually care about alignment, we will be caring about

2276
01:39:45,700 --> 01:39:49,200
the alignment on probably things like 16, but by boundaries or

2277
01:39:49,200 --> 01:39:50,000
something like that.

2278
01:39:52,400 --> 01:39:54,500
Don't forget to disable 02 again.

2279
01:39:55,700 --> 01:39:56,700
That's a good idea.

2280
01:39:57,100 --> 01:39:57,600
Thank you.

2281
01:39:59,000 --> 01:40:00,700
Thank you and X Sy.

2282
01:40:04,100 --> 01:40:11,000
Let's see X E6, ICS sign coasts, so it doesn't unfortunately that so

2283
01:40:11,200 --> 01:40:17,700
basically I mean it does but we're in x64 and you have to use the FPU

2284
01:40:17,800 --> 01:40:18,900
to do sign Coast.

2285
01:40:18,900 --> 01:40:20,600
So you really don't want to go that route.

2286
01:40:20,600 --> 01:40:22,500
You want to you and x64.

2287
01:40:22,500 --> 01:40:24,200
You really don't want to call sign coasts.

2288
01:40:25,400 --> 01:40:29,300
You want to do the the other way, if that makes sense like X.

2289
01:40:29,300 --> 01:40:32,500
Because x 86 had the, a, the

2290
01:40:32,700 --> 01:40:37,000
X87 FPU which had sinned coasts, but you never want to use that

2291
01:40:37,000 --> 01:40:41,900
anymore because it's way slower than the SSE registers and the SSE

2292
01:40:41,900 --> 01:40:43,200
path that's due to path.

2293
01:40:43,200 --> 01:40:46,100
So we're always going to be on the sse2 path, if that makes sense.

2294
01:40:53,100 --> 01:40:54,400
All right.

2295
01:40:54,800 --> 01:40:56,300
Let's see.

2296
01:40:56,300 --> 01:40:57,500
Let's see.

2297
01:40:57,900 --> 01:40:58,500
Why don't you use?

2298
01:40:58,500 --> 01:41:00,000
Look-up tables for sine and cosine.

2299
01:41:00,000 --> 01:41:00,900
You'll see when we get there.

2300
01:41:00,900 --> 01:41:02,400
It's very easy to do them in sse2.

2301
01:41:02,400 --> 01:41:06,300
What's not easy, but basically, you don't want to introduce memory to

2302
01:41:06,300 --> 01:41:08,200
solve something that a okay.

2303
01:41:08,200 --> 01:41:11,500
Well, let me just quickly say, the reason you don't use look-up tables

2304
01:41:11,500 --> 01:41:15,800
anymore for most math operations is because what's the most expensive

2305
01:41:15,800 --> 01:41:17,100
operation you can do on a computer.

2306
01:41:17,100 --> 01:41:17,700
Right now.

2307
01:41:18,300 --> 01:41:21,900
It's memory access memory.

2308
01:41:22,100 --> 01:41:29,900
This is like often times 100 times slower often times 100 times slower

2309
01:41:30,800 --> 01:41:32,400
than just doing an operation.

2310
01:41:32,500 --> 01:41:37,300
So if you can do and you know, 100 operations to do your sign, it's

2311
01:41:37,300 --> 01:41:42,500
probably faster than polluting, the cash with a sine cosine, table

2312
01:41:42,500 --> 01:41:45,500
that will now slow down memory access overall, because that's another

2313
01:41:45,500 --> 01:41:48,600
thing that causes cash to be evicted and can miss and so on.

2314
01:41:49,500 --> 01:41:51,500
So, look up tables.

2315
01:41:51,700 --> 01:41:51,800
It.

2316
01:41:52,000 --> 01:41:54,900
Unless the thing is crazy expensive.

2317
01:41:54,900 --> 01:41:58,200
I mean, it better be so expensive to compute.

2318
01:41:58,200 --> 01:41:59,800
It better be thousands of instructions.

2319
01:42:00,000 --> 01:42:04,400
There's something to compute do not do look up tables for operations

2320
01:42:04,400 --> 01:42:08,300
that aren't very very expensive and sine and cosine aren't that

2321
01:42:08,300 --> 01:42:09,200
expensive?

2322
01:42:09,200 --> 01:42:12,000
So you probably don't want to use look-up tables anymore.

2323
01:42:12,900 --> 01:42:14,800
I'm not a hardcore optimization guy.

2324
01:42:14,800 --> 01:42:17,100
So I don't want to say definitively.

2325
01:42:17,100 --> 01:42:19,300
Never use a lookup table for sine and cosine.

2326
01:42:19,400 --> 01:42:20,500
That's not my place to say.

2327
01:42:20,500 --> 01:42:22,800
I don't have that kind of authority on those sorts of matters.

2328
01:42:22,800 --> 01:42:26,200
Certainly, but what I would say is it's highly unlikely that we will

2329
01:42:26,200 --> 01:42:28,400
do that because it's usually the case that you're going to come up

2330
01:42:28,400 --> 01:42:29,000
with something.

2331
01:42:29,100 --> 01:42:29,900
That's not too many.

2332
01:42:30,000 --> 01:42:33,600
A SSE instructions to do it and then you're not using those precious

2333
01:42:33,600 --> 01:42:36,200
memory accesses, which you really want to be used for other things.

2334
01:42:39,100 --> 01:42:39,800
Let's see.

2335
01:42:43,600 --> 01:42:43,900
DJ.

2336
01:42:43,900 --> 01:42:44,200
Mr.

2337
01:42:44,200 --> 01:42:46,600
Regarding what you said about memory management, how can you say you

2338
01:42:46,600 --> 01:42:49,600
don't need to free up memory when you start spawning infinite numbers

2339
01:42:49,600 --> 01:42:50,300
of enemies?

2340
01:42:50,700 --> 01:42:52,500
Well, you'll just have to see what we do.

2341
01:42:52,500 --> 01:42:54,000
When we start sweating enemies.

2342
01:42:54,000 --> 01:42:56,500
I don't want to give away the surprise.

2343
01:42:57,300 --> 01:42:59,600
Why would you keep coming back to the twitch stream?

2344
01:43:01,600 --> 01:43:04,600
I guess I can give you a little hint which is that you can't have an

2345
01:43:04,600 --> 01:43:05,900
infinite number of enemies.

2346
01:43:06,900 --> 01:43:09,300
There isn't enough memory to store an infinite, number of them

2347
01:43:09,300 --> 01:43:09,900
enemies.

2348
01:43:10,100 --> 01:43:14,900
So I'm pretty sure you only have a limited number of enemies.

2349
01:43:14,900 --> 01:43:18,300
And if you only have a limited number of enemies, well, you should

2350
01:43:18,300 --> 01:43:22,600
have a pretty easy way of spawning, new ones when opens go away.

2351
01:43:25,600 --> 01:43:26,300
Let's see.

2352
01:43:28,300 --> 01:43:30,600
Enemy Mouse is memory access slower than mod.

2353
01:43:30,600 --> 01:43:31,000
Yes.

2354
01:43:31,000 --> 01:43:32,800
I mean memory access is slower than everything.

2355
01:43:33,400 --> 01:43:35,900
There's nothing slower than a memory access that I'm aware of like, I

2356
01:43:35,900 --> 01:43:37,100
don't think there's an instruction.

2357
01:43:37,100 --> 01:43:37,400
I don't know.

2358
01:43:37,400 --> 01:43:40,200
Someone correct me who's an Assembly Language guy if I'm wrong, but I

2359
01:43:40,200 --> 01:43:41,600
don't think there is a single.

2360
01:43:41,800 --> 01:43:44,600
I don't think there is any instruction you can execute.

2361
01:43:44,600 --> 01:43:45,200
That's a slow.

2362
01:43:45,200 --> 01:43:48,500
As the memory Access Memory access is the slowest operation.

2363
01:43:49,200 --> 01:43:51,800
The only time you can get operations.

2364
01:43:51,800 --> 01:43:55,900
The only time you can issue instructions that are slower than then,

2365
01:43:55,900 --> 01:43:58,000
things that gather data are, is it

2366
01:43:58,200 --> 01:43:59,100
Data is in the cache.

2367
01:43:59,400 --> 01:44:04,300
The Cache can be faster sometimes an instructions, but the but memory

2368
01:44:05,000 --> 01:44:08,200
know, if you're actually going to main memory, I don't think there's a

2369
01:44:08,200 --> 01:44:12,900
single instruction that you can execute no matter what random it

2370
01:44:13,100 --> 01:44:15,600
instruction it was but especially not sse2.

2371
01:44:15,600 --> 01:44:20,000
Sse3 instructions tend to be two clocks and I think memory accesses

2372
01:44:20,000 --> 01:44:21,900
can often be like 200 clocks.

2373
01:44:22,200 --> 01:44:25,000
So I literally think this 100 X is not off-base.

2374
01:44:25,000 --> 01:44:27,800
Like, I think I think you're talking about, like, two orders of

2375
01:44:27,800 --> 01:44:28,000
magnitude.

2376
01:44:28,100 --> 01:44:32,700
Attitude to decimal, or does the magnitude between between the average

2377
01:44:32,700 --> 01:44:33,700
SSE instruction?

2378
01:44:35,000 --> 01:44:35,900
And going to memory.

2379
01:44:46,000 --> 01:44:49,200
Why tiles, why are tiles used to reduce calculation or some other

2380
01:44:49,200 --> 01:44:51,300
reason what is the real benefit of tile mapping?

2381
01:44:51,300 --> 01:44:51,900
What will happen?

2382
01:44:51,900 --> 01:44:53,300
If we do not use it in a meme hero.

2383
01:44:53,300 --> 01:44:57,800
Well, basically I want to tell math because I felt like we needed some

2384
01:44:57,800 --> 01:44:59,800
basis for

2385
01:45:00,000 --> 01:45:04,600
World at the lowest level and there's really only two choices.

2386
01:45:04,600 --> 01:45:07,300
Sort of that we can do one, is like polygonal, right?

2387
01:45:07,300 --> 01:45:11,300
We could sort of Define our Region's, you know, our walls as polygons,

2388
01:45:11,300 --> 01:45:15,000
or we can define define them as tile maps, and I felt like, tile maps

2389
01:45:15,000 --> 01:45:18,000
have kind of a nicer understanding for the player.

2390
01:45:18,000 --> 01:45:21,500
Like, players could understand tiles a little easier.

2391
01:45:21,500 --> 01:45:23,600
They can do those kind of puzzles, where you have something that you

2392
01:45:23,600 --> 01:45:27,400
push around the Tom app easily and it you can actually make puzzles

2393
01:45:27,400 --> 01:45:29,800
that the players understand instead of just like random.

2394
01:45:30,000 --> 01:45:31,500
I just feel like polygonal things.

2395
01:45:31,700 --> 01:45:34,300
They turn into these random physics, bouncing around things, and

2396
01:45:34,300 --> 01:45:36,100
there's no concreteness to them.

2397
01:45:36,300 --> 01:45:39,000
And so we won't ever render things, the style Maps will always be

2398
01:45:39,000 --> 01:45:42,000
rendering, things more robustly and colliding with things and kind of

2399
01:45:42,000 --> 01:45:45,000
more interesting way then Thomas but the basic part of the world.

2400
01:45:45,000 --> 01:45:47,200
I just kind of felt like tile Maps was a good way to go and I felt

2401
01:45:47,200 --> 01:45:50,300
like it kind of Titus back to sort of the old school games as well in

2402
01:45:50,300 --> 01:45:51,300
a way that I thought was nice.

2403
01:45:52,200 --> 01:45:52,500
All right.

2404
01:45:52,500 --> 01:45:55,500
I think we are basically done.

2405
01:45:57,000 --> 01:45:59,000
with with

2406
01:46:02,100 --> 01:46:03,100
there are some few sections.

2407
01:46:03,100 --> 01:46:03,700
Well, let's see.

2408
01:46:03,800 --> 01:46:06,100
There's so few structures that can take the order of 100 Cycles on

2409
01:46:06,100 --> 01:46:12,400
has, well, okay, but x87 because the x87 is like really old school,

2410
01:46:12,600 --> 01:46:13,100
right?

2411
01:46:19,200 --> 01:46:22,100
Six hundred Cycles, like what FPU instructions?

2412
01:46:22,100 --> 01:46:23,100
Are we talking about?

2413
01:46:23,200 --> 01:46:26,300
Because I don't think the, if you're tired of the x87, FPU, that's

2414
01:46:26,300 --> 01:46:29,200
Legacy part and you don't ever even call that anymore.

2415
01:46:29,200 --> 01:46:30,600
So I wouldn't actually call that BJ.

2416
01:46:30,600 --> 01:46:32,300
Well anyway, we can talk about that on different dream.

2417
01:46:32,700 --> 01:46:37,800
Anyway, I think we are basically we are basically, you know, we're

2418
01:46:37,800 --> 01:46:38,900
already 15 minutes overtime.

2419
01:46:38,900 --> 01:46:41,700
So we've done a full QA even though I went over time.

2420
01:46:41,700 --> 01:46:44,900
So I'm going to call that the end of the stream for the day.

2421
01:46:45,100 --> 01:46:47,400
Thank you very much for joining me.

2422
01:46:47,400 --> 01:46:48,800
Everyone has been a pleasure programming.

2423
01:46:49,100 --> 01:46:53,400
You as always, I'm going to go ahead and close this down here.

2424
01:46:53,600 --> 01:46:54,200
There we go.

2425
01:46:55,600 --> 01:46:59,800
If you would like to follow along at home, you can pre-order the game

2426
01:46:59,800 --> 01:47:03,400
at handmade, here it up org and you will get your own copy of the

2427
01:47:03,400 --> 01:47:05,400
source code, which you can download every night.

2428
01:47:05,400 --> 01:47:06,000
I upload it.

2429
01:47:06,000 --> 01:47:08,200
After I finish programming every day.

2430
01:47:08,600 --> 01:47:10,500
So you can go ahead and follow along at home.

2431
01:47:10,500 --> 01:47:12,500
It's kind of cool way to be able to do that.

2432
01:47:12,500 --> 01:47:15,700
And that will also come with the our test sets that we use during

2433
01:47:15,700 --> 01:47:16,800
development as well.

2434
01:47:17,200 --> 01:47:18,900
So, and of course it comes,

2435
01:47:19,000 --> 01:47:22,200
With a copy of the game at the end, which should be pretty awesome as

2436
01:47:22,200 --> 01:47:22,500
well.

2437
01:47:22,900 --> 01:47:24,800
So definitely check that out.

2438
01:47:24,800 --> 01:47:26,600
If you're interested and the other thing is we have a patreon.

2439
01:47:26,600 --> 01:47:30,300
If you want Sports a video series, you can subscribe to our patreon as

2440
01:47:30,300 --> 01:47:30,600
well.

2441
01:47:30,600 --> 01:47:33,400
Now, if you're trying to learn from a series that news and forms

2442
01:47:33,400 --> 01:47:35,300
button, I just clicked on is a great place to go to.

2443
01:47:35,500 --> 01:47:36,900
It has all sorts of stuff for you.

2444
01:47:36,900 --> 01:47:38,500
It has a code discussion forum.

2445
01:47:38,500 --> 01:47:40,300
You can ask questions on, it's got coding resources.

2446
01:47:40,300 --> 01:47:43,600
So if you want to look at the people of done ports, to Mac and Linux

2447
01:47:43,600 --> 01:47:46,400
and so on, so if you're looking to run it on other platforms, that's a

2448
01:47:46,400 --> 01:47:48,900
great resource for you and an episode guys can use to catch up.

2449
01:47:49,000 --> 01:47:51,300
It's also got the schedule for the week that I post every Monday.

2450
01:47:51,400 --> 01:47:54,500
So if you are trying to follow the series closely, that is a great

2451
01:47:54,500 --> 01:47:55,200
place to go.

2452
01:47:55,600 --> 01:47:57,300
So, thank you everyone for joining me tomorrow.

2453
01:47:57,300 --> 01:47:59,700
We will be right back here at 10:00 a.m.

2454
01:48:00,000 --> 01:48:00,800
Too long from now.

2455
01:48:00,800 --> 01:48:02,800
Just just twelve short hours from now.

2456
01:48:03,500 --> 01:48:07,200
I will be back and we will do our little bit of are sparse allocation

2457
01:48:07,200 --> 01:48:08,300
stuff just to get that stuff working.

2458
01:48:08,300 --> 01:48:12,000
And then I don't know what we'll do after that because we probably

2459
01:48:12,000 --> 01:48:15,100
want to sort of close out the week so that we can start next week on

2460
01:48:15,100 --> 01:48:16,500
some, some fresh stuff.

2461
01:48:16,600 --> 01:48:19,100
But anyway, so please join me tomorrow at 10 a.m.

2462
01:48:19,100 --> 01:48:20,200
Pacific Standard time.

2463
01:48:20,400 --> 01:48:23,900
It would be great to see you here tomorrow on Twitch for more.

2464
01:48:23,900 --> 01:48:24,900
Handmade hero.

2465
01:48:25,100 --> 01:48:25,900
Thanks, everyone.

2466
01:48:26,100 --> 01:48:26,600
Have a good one.

