1
00:00:04,100 --> 00:00:06,400
Hello everybody and welcome to handmade her.

2
00:00:06,400 --> 00:00:09,100
Sure we could complete game live on stream.

3
00:00:09,100 --> 00:00:10,900
I left some windows up from the pre stream.

4
00:00:10,900 --> 00:00:11,900
I don't really know why.

5
00:00:12,000 --> 00:00:15,100
I, don't even know why this was up here, probably just because I was

6
00:00:15,100 --> 00:00:18,400
showing some window stuff and so we need to launch the game.

7
00:00:19,400 --> 00:00:24,300
I want to start out but in the pre stream, Kim Jorgensen and I

8
00:00:24,800 --> 00:00:25,300
apologize.

9
00:00:25,300 --> 00:00:30,600
I impress their, I might be jÃ¸rgensen, I'm always wishing that.

10
00:00:30,700 --> 00:00:33,200
I got a pronunciation guide with everyone's name so I could.

11
00:00:33,200 --> 00:00:33,700
So I could get the

12
00:00:33,900 --> 00:00:34,300
Right?

13
00:00:34,800 --> 00:00:38,300
One of the downsides of the internet, like I feel like Twitter and

14
00:00:38,300 --> 00:00:43,000
twitch and stuff should have a little, a little, what's it called?

15
00:00:43,300 --> 00:00:46,400
Like, a little one of those little speaker icons on there, where you

16
00:00:46,400 --> 00:00:48,900
could just click on it and it would have them pronouncing their name

17
00:00:48,900 --> 00:00:49,600
how they wanted.

18
00:00:49,600 --> 00:00:53,900
It said, so that that would be a nice addition.

19
00:00:53,900 --> 00:00:59,100
But anyway, he's asking for Linux change.

20
00:00:59,300 --> 00:01:02,200
There's a he said there's a small compilation error with clang that

21
00:01:02,200 --> 00:01:03,400
says extra tokens at the

22
00:01:03,800 --> 00:01:06,700
End of the end if in handmade import dot CPP.

23
00:01:08,200 --> 00:01:13,600
This is probably something that, that windows that we compiled with

24
00:01:13,600 --> 00:01:17,400
Microsoft compiler normally, on handmade hero, because we started with

25
00:01:17,400 --> 00:01:21,300
that, clang, couldn't really compile stuff for Windows when we started

26
00:01:21,300 --> 00:01:22,100
it, can now.

27
00:01:22,100 --> 00:01:25,300
So we actually could use clang, we maybe should add a clang.

28
00:01:25,300 --> 00:01:28,100
Step two, just compiled to make sure it compiles properly.

29
00:01:28,100 --> 00:01:32,000
But point being, it probably is something that the Microsoft compiler

30
00:01:32,000 --> 00:01:33,600
should also be complaining about

31
00:01:33,800 --> 00:01:35,900
Doesn't because it's a little bit more permissive.

32
00:01:36,000 --> 00:01:38,800
It's probably not supposed to be there.

33
00:01:38,800 --> 00:01:43,300
So I'm just going to go down and get rid of that for people who are

34
00:01:43,300 --> 00:01:43,900
compiling it.

35
00:01:43,900 --> 00:01:48,200
Oh yeah, you can see, oh wait, no I can't see.

36
00:01:51,000 --> 00:01:51,800
Oh, there it is.

37
00:01:51,900 --> 00:01:52,200
Yeah.

38
00:01:52,500 --> 00:01:54,900
So I don't know what that's doing there.

39
00:01:54,900 --> 00:01:58,000
I'm going to get rid of that and then I think we're good to go.

40
00:01:58,500 --> 00:02:00,300
I suspect that was the one.

41
00:02:02,000 --> 00:02:02,600
I hope that's what.

42
00:02:02,600 --> 00:02:06,200
Is that the right one can just give it to me, thumbs up or thumbs

43
00:02:06,200 --> 00:02:06,500
down.

44
00:02:06,500 --> 00:02:10,699
Was that the only one we needed to remove for the for the?

45
00:02:11,600 --> 00:02:11,900
Yes?

46
00:02:11,900 --> 00:02:12,300
Okay.

47
00:02:12,500 --> 00:02:15,200
So I just want to get rid of that at the at the outset of today's

48
00:02:15,200 --> 00:02:18,800
stream just so I try to keep it, the codebase Fairly clean so that

49
00:02:18,800 --> 00:02:20,500
people who are trying to compile on Linux or

50
00:02:20,700 --> 00:02:23,400
Her other platforms don't have too much trouble.

51
00:02:26,500 --> 00:02:27,900
Since we don't do those on stream.

52
00:02:27,900 --> 00:02:31,700
If someone wants to follow along on those, it helps to just clean up

53
00:02:31,900 --> 00:02:35,200
whatever we're working on to make sure that it behaves properly.

54
00:02:35,200 --> 00:02:36,900
And under the circumstances,

55
00:02:38,000 --> 00:02:42,600
all right, so at the end of the the previous stream, I wanted to start

56
00:02:42,600 --> 00:02:46,800
working on some entity storage stuff that would try to be a larger

57
00:02:46,800 --> 00:02:50,200
study, larger set of information for entities that were sort of in the

58
00:02:50,200 --> 00:02:53,900
important set that would then go away afterward but that still

59
00:02:53,900 --> 00:02:58,500
persisted frame to frame and so I want to do that but while I was

60
00:02:58,500 --> 00:02:59,900
doing it I was like I'd really like to show

61
00:03:00,000 --> 00:03:04,300
The memory usage here so that we can be cognizant of it and also just

62
00:03:04,300 --> 00:03:07,200
so I can point out why there's some reasons why we want to consider

63
00:03:07,200 --> 00:03:09,100
doing this or why it's important for us to do this.

64
00:03:10,000 --> 00:03:14,000
And so just looking at how we had our stuff set up, there was really

65
00:03:14,000 --> 00:03:18,500
no way to track memory allocations because we didn't really.

66
00:03:18,500 --> 00:03:21,500
Yeah, we really just didn't have a way of saying hey, cures the stuff

67
00:03:21,500 --> 00:03:23,000
that's currently allocated.

68
00:03:23,800 --> 00:03:27,300
And so, if you take a look at our memory system here, I upgraded it.

69
00:03:27,300 --> 00:03:32,600
So that now every time you call Push size, which is are pretty much,

70
00:03:32,600 --> 00:03:34,700
our only thing that allocates memory in our system.

71
00:03:35,000 --> 00:03:39,900
There are a couple of the things in the platform layer that will

72
00:03:39,900 --> 00:03:40,800
occasionally, do it.

73
00:03:40,800 --> 00:03:44,800
But in terms of the actual running game, more or less everything we do

74
00:03:44,800 --> 00:03:46,500
goes through, this push size, call,

75
00:03:47,400 --> 00:03:50,000
so every memory allocation we care about looking at

76
00:03:53,600 --> 00:03:57,900
it goes through that and inside the push sighs, call, where you've

77
00:03:57,900 --> 00:04:00,200
got, internal memory per am here.

78
00:04:00,400 --> 00:04:03,400
What we're doing is we're saying when we compile and handmade internal

79
00:04:03,400 --> 00:04:08,400
mode, what we're going to do is pass a file name in line number 2, the

80
00:04:08,400 --> 00:04:09,100
push sighs call.

81
00:04:09,100 --> 00:04:15,000
So we know on whose behalf the size was requested that amount of

82
00:04:15,000 --> 00:04:15,400
memory.

83
00:04:16,300 --> 00:04:20,300
Now the question is so at this point thanks to yesterday's stream.

84
00:04:20,500 --> 00:04:23,300
We have it so that that is happening right now.

85
00:04:23,500 --> 00:04:27,100
We're getting all of that information, but once we get into the push

86
00:04:27,100 --> 00:04:30,500
size, we don't do anything with it, right?

87
00:04:31,400 --> 00:04:37,700
So we don't actually have any way of using the information that were

88
00:04:37,700 --> 00:04:42,700
actually getting and that creates a problem for us because now when we

89
00:04:42,700 --> 00:04:46,100
want to go print it out we you know, putting it out at the time we do

90
00:04:46,100 --> 00:04:47,900
the allocation doesn't really help us.

91
00:04:48,100 --> 00:04:51,200
We want to be able to print it out at a specific time when we go to

92
00:04:51,200 --> 00:04:52,300
say draw

93
00:04:53,500 --> 00:04:58,200
The information about what's in this Arena and so there's a couple

94
00:04:58,200 --> 00:05:01,400
different ways that we could really do this but what I'm assuming the

95
00:05:01,400 --> 00:05:06,600
most efficient way for us to do it would be is to just sort of have

96
00:05:06,600 --> 00:05:12,000
this information gets stacked up inside the debug system somehow and

97
00:05:12,000 --> 00:05:16,300
so I'm going to just make a system for doing that explicitly and then

98
00:05:16,300 --> 00:05:20,100
we'll kind of figure out how we want to massage that later.

99
00:05:21,100 --> 00:05:25,700
Now we have one issue which is that our memory Arenas themselves

100
00:05:26,400 --> 00:05:30,000
probably when you actually create one of these Arenas?

101
00:05:30,200 --> 00:05:34,400
So, you know, you can see in here where we actually do a like, all

102
00:05:34,400 --> 00:05:37,600
right, if there's a current block or not, current block, these sorts

103
00:05:37,600 --> 00:05:38,100
of things.

104
00:05:38,900 --> 00:05:41,600
When we actually go through and use these Arenas, I don't think you

105
00:05:41,600 --> 00:05:46,100
actually have to do anything to make them actually work, right?

106
00:05:47,000 --> 00:05:50,700
So if you just have an arena, that's just got nothing in it.

107
00:05:50,900 --> 00:05:54,500
just zeros then what will happen is when you first go to use it, it'll

108
00:05:54,500 --> 00:05:57,200
just start allocating some memory for you right there, because here's

109
00:05:57,200 --> 00:05:59,800
the call, for example, that allocates a block for the

110
00:06:00,000 --> 00:06:01,000
You need to start using.

111
00:06:01,400 --> 00:06:04,100
If you just pass an arena that's just garbage like zero.

112
00:06:04,100 --> 00:06:06,300
It's completely zero doubt, it just starts working.

113
00:06:06,300 --> 00:06:09,300
So that's it's one of those zero is initialization patterns that I

114
00:06:09,300 --> 00:06:15,700
like and so we want to preserve that what that means is that when we

115
00:06:15,700 --> 00:06:21,200
actually record these allocations, we do sort of have an issue, which

116
00:06:21,200 --> 00:06:27,200
is we don't necessarily know how to talk about what the arena is.

117
00:06:27,500 --> 00:06:29,900
We can use the pointer so we can

118
00:06:30,000 --> 00:06:32,000
Say that like this Arena pointer?

119
00:06:34,000 --> 00:06:37,800
Is the thing that we are associating these with.

120
00:06:38,100 --> 00:06:44,200
And I think unless I'm mistaken, that's probably the best call.

121
00:06:44,400 --> 00:06:48,300
Because if we don't do that I'm not sure how else we would really

122
00:06:48,300 --> 00:06:49,300
identify them.

123
00:06:49,300 --> 00:06:53,500
We don't ever have a place where we specifically named Arenas and I

124
00:06:53,500 --> 00:06:57,100
don't really know that we necessarily want to either, right.

125
00:06:57,400 --> 00:07:01,000
I think what we want to do is just say look this is the pointer to the

126
00:07:01,000 --> 00:07:01,500
arena.

127
00:07:02,300 --> 00:07:04,500
And here's all the allocations that it had.

128
00:07:05,600 --> 00:07:09,000
Now, one of the problems that we're definitely going to run into is

129
00:07:09,000 --> 00:07:13,600
that those pointers as memory to pointers may not be stable, right?

130
00:07:13,900 --> 00:07:18,600
And what I mean by that is that obviously Arenas come and go so we

131
00:07:18,600 --> 00:07:21,900
can't really count on that Arena pointer pointing to anything

132
00:07:21,900 --> 00:07:22,700
specific.

133
00:07:23,100 --> 00:07:28,600
I think that's probably okay, as long as we track arenas by pointer,

134
00:07:28,600 --> 00:07:33,100
we should still be able to record what happened to them and show it

135
00:07:33,100 --> 00:07:35,300
later just by association.

136
00:07:35,400 --> 00:07:39,800
As if the pointer was a name and since Arenas have to be properly, 32

137
00:07:39,800 --> 00:07:42,900
otherwise it's leaking memory anyway, which is something we would want

138
00:07:42,900 --> 00:07:43,500
to see.

139
00:07:44,900 --> 00:07:48,600
We shouldn't really have to care about whether that Arena pointer is a

140
00:07:48,600 --> 00:07:53,000
still valid or be getting reused, right?

141
00:07:53,000 --> 00:07:56,800
Because you should have had to have called things, like, free all

142
00:07:56,800 --> 00:07:58,300
memory or whatever, right?

143
00:07:58,600 --> 00:08:00,000
Clear, right.

144
00:08:00,400 --> 00:08:01,500
We should have had to call things.

145
00:08:01,500 --> 00:08:04,800
Like clear to get rid of the memory before we reuse the thing.

146
00:08:04,800 --> 00:08:05,200
Anyway.

147
00:08:05,300 --> 00:08:06,800
A or before we get rid of it.

148
00:08:07,000 --> 00:08:11,400
And so, you know, we don't really have to worry about use after free

149
00:08:11,400 --> 00:08:12,400
of the pointer.

150
00:08:13,900 --> 00:08:18,700
I'm sorry reuse of the same memory location but for a different Arena

151
00:08:18,800 --> 00:08:22,200
because we can actually just think of that as the same Arena that just

152
00:08:22,200 --> 00:08:22,900
got cleared.

153
00:08:22,900 --> 00:08:26,800
So there's no real downside to using the pointer out thing.

154
00:08:28,400 --> 00:08:33,600
So mostly what I would like to do here, is just say, okay let's just

155
00:08:33,600 --> 00:08:37,299
say that what we're going to do is create this allocation here.

156
00:08:38,500 --> 00:08:42,400
And what we're going to do is we're going to say that when we get to

157
00:08:42,400 --> 00:08:46,300
the end of it, we're going to say like debug record allocation or

158
00:08:46,300 --> 00:08:47,400
something like that, right?

159
00:08:47,400 --> 00:08:49,500
We're going to have some call that we make.

160
00:08:50,200 --> 00:08:51,800
And that's what we're going to pass.

161
00:08:51,800 --> 00:08:55,700
We've got that file name and line number that again are coming in

162
00:08:55,700 --> 00:08:56,200
here.

163
00:08:58,200 --> 00:08:59,500
and we need to give it some

164
00:09:00,000 --> 00:09:01,900
About what actually happened.

165
00:09:02,100 --> 00:09:05,700
So you can see here, that these are probably the two things we need.

166
00:09:06,300 --> 00:09:09,800
This is the amount of size we allocated, and this is where we

167
00:09:09,800 --> 00:09:11,100
allocated it.

168
00:09:11,800 --> 00:09:15,100
But the other thing that we probably want to do is we may want to

169
00:09:15,100 --> 00:09:20,000
record how much size was actually used because again because of

170
00:09:20,000 --> 00:09:25,800
alignments we may be allocating from the arena more memory than we

171
00:09:25,800 --> 00:09:29,500
actually needed and that may be something that we want to.

172
00:09:30,000 --> 00:09:30,600
Do as well.

173
00:09:30,600 --> 00:09:32,600
So an allocated size.

174
00:09:32,600 --> 00:09:37,000
And then the amount that we used those, two things are probably

175
00:09:37,100 --> 00:09:42,600
important as well, just to make sure that we can see that waste that

176
00:09:42,600 --> 00:09:44,100
is essentially waste.

177
00:09:44,800 --> 00:09:47,800
And so it's nice to have that in any given block.

178
00:09:48,000 --> 00:09:50,100
You know, how many bytes did we waste?

179
00:09:51,000 --> 00:09:52,500
It won't matter for a large blocks.

180
00:09:52,500 --> 00:09:53,100
Those who cares?

181
00:09:53,100 --> 00:09:56,100
If he waits a few bites but for small blocks, it could matter if we're

182
00:09:56,100 --> 00:09:57,200
looking and we're seeing in and thing.

183
00:09:57,200 --> 00:09:59,400
That's like, wow, there's a lot of like wasted space there.

184
00:10:00,800 --> 00:10:02,400
Maybe that's important, I don't know.

185
00:10:03,100 --> 00:10:06,800
So if we then look at how this thing would work we'd say, alright, we

186
00:10:06,800 --> 00:10:09,500
got the file name, we got the line number, we've got the allocations

187
00:10:09,500 --> 00:10:11,300
how much they were, how much we used.

188
00:10:12,000 --> 00:10:15,800
And so what we want to do is we probably want to give it the necessary

189
00:10:15,800 --> 00:10:17,700
information to do a good job tracking.

190
00:10:17,700 --> 00:10:21,400
This, the arena pointer, like I said, I think would be good, but the

191
00:10:21,400 --> 00:10:24,300
other thing that might also be good it, since we know that we're

192
00:10:24,300 --> 00:10:28,400
allocating out of the thing called the current block, and that current

193
00:10:28,400 --> 00:10:30,000
block has a base pointer, what

194
00:10:30,200 --> 00:10:34,000
Might want to do is say also in addition, here is the base pointer,

195
00:10:34,200 --> 00:10:34,600
right?

196
00:10:35,400 --> 00:10:38,200
So we're basically saying, look, here's the pointer.

197
00:10:38,600 --> 00:10:41,600
If in case you want to associate things together as parts of

198
00:10:41,800 --> 00:10:45,500
individual chunks, we could say here is the the base pointer.

199
00:10:45,500 --> 00:10:49,900
In fact, we could even give it the whole block structure if we go.

200
00:10:49,900 --> 00:10:50,400
Oops.

201
00:10:54,100 --> 00:10:59,300
If we go and look at the memory Arena here, you can see that this this

202
00:10:59,300 --> 00:11:03,200
platform memory block is going to give a lot of that information will

203
00:11:03,200 --> 00:11:07,300
be could say is like, look, maybe we give it the entire thing so that

204
00:11:07,300 --> 00:11:12,200
the debug system can look at that that block and know all of the stuff

205
00:11:12,200 --> 00:11:14,000
that's that's involved in it, right?

206
00:11:15,800 --> 00:11:19,600
So, if we recorded all of these information, all of this information,

207
00:11:19,600 --> 00:11:23,400
we'd be in pretty good shape, but we also need one more piece of

208
00:11:23,400 --> 00:11:26,300
information which is that that will only tell us when things are

209
00:11:26,300 --> 00:11:27,400
allocated.

210
00:11:27,500 --> 00:11:31,300
It will not tell us when things are D allocated.

211
00:11:31,600 --> 00:11:36,700
And I think what's important to realize is that we can do a good job

212
00:11:36,800 --> 00:11:42,600
of tracking this through the debug system by recognizing anytime we

213
00:11:42,600 --> 00:11:44,900
free things in an arena we are freeing.

214
00:11:45,000 --> 00:11:50,800
In one of two ways either we are rewinding a blocks used pointer or we

215
00:11:50,800 --> 00:11:53,500
are getting rid of the block entirely.

216
00:11:53,800 --> 00:11:58,000
And so if we take a look here we could do

217
00:12:01,700 --> 00:12:02,400
This.

218
00:12:05,300 --> 00:12:10,800
That tells us that this entire block got removed and similarly, in

219
00:12:11,800 --> 00:12:16,000
anywhere we rewind, which I'm pretty sure there's only one place we

220
00:12:16,000 --> 00:12:18,400
wind which is in and temporary memory.

221
00:12:18,800 --> 00:12:20,400
Any place where we rewind.

222
00:12:20,400 --> 00:12:23,900
It's literally just a question of backing up the pointer.

223
00:12:24,100 --> 00:12:30,100
And so, in that case, we could say, debug record block, I guess,

224
00:12:30,400 --> 00:12:31,300
rewind

225
00:12:32,200 --> 00:12:33,200
Or truncate.

226
00:12:35,400 --> 00:12:38,300
And again no real need to do anything fancy here.

227
00:12:38,300 --> 00:12:40,000
If we just pass that block,

228
00:12:41,000 --> 00:12:42,500
we should be good to go.

229
00:12:42,900 --> 00:12:46,300
So yeah, I think that's all.

230
00:12:46,300 --> 00:12:48,800
We really need with those three functions.

231
00:12:48,800 --> 00:12:54,000
We have told the debug system everything about what's happening inside

232
00:12:54,000 --> 00:12:59,800
of these memory Arenas so that it can keep its own lists and it keep

233
00:12:59,800 --> 00:13:05,800
its own track of what it may need to draw or record as far as Arenas

234
00:13:05,800 --> 00:13:06,900
are concerned.

235
00:13:06,900 --> 00:13:11,000
And so the only other thing I think we really need is

236
00:13:11,100 --> 00:13:16,500
To go look at the arena part of things and I think what was that

237
00:13:16,500 --> 00:13:16,700
called?

238
00:13:16,700 --> 00:13:19,600
Like debug no.

239
00:13:23,300 --> 00:13:23,700
Okay.

240
00:13:28,900 --> 00:13:31,000
It's in here somewhere.

241
00:13:31,200 --> 00:13:34,000
Actually.

242
00:13:34,000 --> 00:13:36,100
I'll just go to the code because I don't really remember what it's

243
00:13:36,100 --> 00:13:36,900
called.

244
00:13:39,800 --> 00:13:41,900
Yeah, I just have no idea what it's called.

245
00:13:44,200 --> 00:13:45,400
Casey doesn't remember what it's called.

246
00:13:45,400 --> 00:13:46,200
Oh, is that it right there?

247
00:13:48,700 --> 00:13:49,000
Yeah.

248
00:13:50,400 --> 00:13:53,700
So you can see here, we've got this debug value and you pass these

249
00:13:53,700 --> 00:14:01,900
Arenas and I thinking that I don't really necessarily know that I want

250
00:14:01,900 --> 00:14:04,800
to do it that way.

251
00:14:07,600 --> 00:14:11,500
What you can see here is we've got this debug data block memory in the

252
00:14:11,500 --> 00:14:11,800
old days.

253
00:14:11,800 --> 00:14:14,800
I think we kind of needed this because we were placing these like,

254
00:14:14,800 --> 00:14:17,600
Arenas in there as something we wanted to view.

255
00:14:17,900 --> 00:14:21,900
I think we just want to show all arenas that have been tracked in kind

256
00:14:21,900 --> 00:14:26,400
of like a scrolling list and and do that, which we can do.

257
00:14:26,800 --> 00:14:30,700
And so what I think we want to do here more is just associate names

258
00:14:30,800 --> 00:14:31,600
with Arenas.

259
00:14:32,000 --> 00:14:35,200
So in other words, what I would like to do is something like this.

260
00:14:37,900 --> 00:14:41,400
Where we say, look, you're going to hear about a bunch of these

261
00:14:41,400 --> 00:14:42,200
Arenas.

262
00:14:42,900 --> 00:14:47,700
I'm going to tell you how to display them in like, a human friendly

263
00:14:47,700 --> 00:14:48,800
way, right?

264
00:14:48,800 --> 00:14:53,000
Because it's just going to get these pointers and it doesn't know

265
00:14:53,000 --> 00:14:58,100
like, it doesn't know what those Arenas would be called to a human.

266
00:14:58,100 --> 00:14:59,800
It just knows that there.

267
00:15:00,000 --> 00:15:03,500
You know, something that's out getting memory and in those whose

268
00:15:03,500 --> 00:15:06,300
allocating the memory but it doesn't know anything else, right?

269
00:15:08,100 --> 00:15:11,000
So I think what I'd like to do is something along these lines.

270
00:15:11,000 --> 00:15:14,600
We pass these pointers down, right?

271
00:15:18,100 --> 00:15:21,800
Like so and we just say, look I'm going to tell you what the names of

272
00:15:21,800 --> 00:15:22,500
these are.

273
00:15:22,900 --> 00:15:29,400
There's a game mode memory, there's an audio memory or audio playback,

274
00:15:29,800 --> 00:15:30,400
right?

275
00:15:31,000 --> 00:15:32,300
There's a frame.

276
00:15:34,100 --> 00:15:34,900
Temporary.

277
00:15:36,300 --> 00:15:36,900
Okay.

278
00:15:38,900 --> 00:15:42,300
There's a little bit stalling for you and then there's like an asset

279
00:15:42,300 --> 00:15:42,800
store.

280
00:15:44,800 --> 00:15:49,100
And so I think like, you know, this this is probably the best way to

281
00:15:49,100 --> 00:15:49,600
do this.

282
00:15:51,100 --> 00:15:55,500
Anytime soon as allocated or freed, we just pass a pointer and say,

283
00:15:55,500 --> 00:15:57,300
Here's the arena that was associated with.

284
00:15:57,400 --> 00:16:01,100
I don't know anything other than that, just deal with it.

285
00:16:01,400 --> 00:16:04,900
And then later we can announce in a central place.

286
00:16:06,200 --> 00:16:08,800
Anytime there's a particular Arena pointer.

287
00:16:08,800 --> 00:16:11,300
We want to attach a name to that pointer.

288
00:16:12,200 --> 00:16:16,000
We just can, and it will basically use that as like, sort of a hash

289
00:16:16,800 --> 00:16:19,600
where it just says, look, I'm going to look up what the name of this

290
00:16:19,600 --> 00:16:20,400
pointer is.

291
00:16:20,900 --> 00:16:21,600
And display it.

292
00:16:21,600 --> 00:16:26,000
If I've got one if I don't, I'm just going to say unnamed Arena and

293
00:16:26,000 --> 00:16:28,400
let you figure it out by who's allocating it, right?

294
00:16:28,400 --> 00:16:30,100
Who's allocating in it you know I'm saying.

295
00:16:31,200 --> 00:16:35,500
So I think that's what we want and I think that would make it a little

296
00:16:35,500 --> 00:16:39,900
bit nicer just so we can understand what we're looking at in there.

297
00:16:40,700 --> 00:16:43,500
So if we look at the debug system I don't think this is actually that

298
00:16:43,500 --> 00:16:44,200
hard to implement.

299
00:16:44,200 --> 00:16:48,900
It's just a bit of typing I think the debugger Rena is therefore our

300
00:16:49,100 --> 00:16:50,700
ability to sit to

301
00:16:50,800 --> 00:16:52,600
Or permanent things.

302
00:16:53,000 --> 00:16:56,400
And so really all I need to do is develop a little storage for the

303
00:16:56,400 --> 00:16:56,700
things.

304
00:16:56,700 --> 00:16:59,200
I just said, so we can eat here.

305
00:16:59,200 --> 00:17:02,200
Say, look, there's a debug Arena

306
00:17:03,800 --> 00:17:06,400
And or debug memory.

307
00:17:06,400 --> 00:17:07,700
I don't know how we wanted.

308
00:17:08,099 --> 00:17:10,000
I don't know what I want to call this one, the call T bug arena for

309
00:17:10,000 --> 00:17:10,400
now.

310
00:17:10,900 --> 00:17:15,599
Inside the debugger Weena, I know that I want a name for this thing,

311
00:17:15,700 --> 00:17:16,200
right?

312
00:17:16,300 --> 00:17:18,500
And that's if I associate it like this.

313
00:17:19,200 --> 00:17:22,099
So I want to definitely have a name for the thing in the debug Arena,

314
00:17:23,099 --> 00:17:26,500
and that's going to allow me to associate the pointer with it.

315
00:17:26,599 --> 00:17:33,300
I also need the like Arena pointer because I want to store when I do.

316
00:17:33,300 --> 00:17:33,400
Like

317
00:17:33,600 --> 00:17:34,900
Cash comparisons or something.

318
00:17:35,300 --> 00:17:39,600
I want to be able to kind of store that information.

319
00:17:41,400 --> 00:17:42,200
For matching.

320
00:17:43,800 --> 00:17:46,400
And so if I've got the debugger Arena and I've got these things, I'm

321
00:17:46,400 --> 00:17:54,600
just going to create what amounts to a for lack of a better term, a

322
00:17:54,600 --> 00:17:59,800
mirror of what I'm being told by the arena system.

323
00:18:00,000 --> 00:18:01,100
On the debug side.

324
00:18:03,700 --> 00:18:08,400
And so in here I've got like the file name and the line number that

325
00:18:08,400 --> 00:18:13,000
I'm actually, you know, working with in terms of the each allocation,

326
00:18:13,900 --> 00:18:19,800
I know that I want the size allocated and the size used so that we

327
00:18:19,800 --> 00:18:23,900
have those two pieces of information that we can print out.

328
00:18:24,000 --> 00:18:28,500
So we know like who allocated it, where how much they asked for and

329
00:18:28,500 --> 00:18:32,400
how much was used and then each of those can just be chained

330
00:18:34,000 --> 00:18:34,700
Right?

331
00:18:35,800 --> 00:18:36,900
And oh, and sorry.

332
00:18:40,100 --> 00:18:42,900
Maybe the offset from the block.

333
00:18:44,100 --> 00:18:44,500
Right.

334
00:18:48,400 --> 00:18:53,300
And so in each allocation, we sort of have this information and then

335
00:18:53,300 --> 00:18:56,800
what we want to do is inside the arena block, we just want to say you

336
00:18:56,800 --> 00:19:00,700
know first allocation and here we want to know.

337
00:19:01,100 --> 00:19:01,500
Okay.

338
00:19:01,500 --> 00:19:03,800
What's the like memory address?

339
00:19:04,100 --> 00:19:04,400
Right?

340
00:19:04,400 --> 00:19:05,700
Like where was this thing?

341
00:19:07,200 --> 00:19:14,300
And similarly I want to be able to say what the next block was.

342
00:19:16,800 --> 00:19:20,400
So that allows me to basically store all my applications in in the

343
00:19:20,400 --> 00:19:23,900
block to which they, you know, were associated.

344
00:19:24,100 --> 00:19:27,400
There is no real need to name blocks for a particular reason.

345
00:19:27,800 --> 00:19:29,500
So I think it just looks like this.

346
00:19:30,900 --> 00:19:31,500
Right?

347
00:19:31,700 --> 00:19:34,500
And this just lets us create a mirrored structure inside the debug

348
00:19:34,500 --> 00:19:34,800
system.

349
00:19:34,800 --> 00:19:37,500
So it's not ruining the run time of our game and we can compile it out

350
00:19:37,500 --> 00:19:42,600
trivially and it's you know you might ask and it's a toy legitimate

351
00:19:42,600 --> 00:19:49,800
question, why not just make the arena store these things right with

352
00:19:49,800 --> 00:19:53,100
the memory and the reason for that is we want to be able to compile it

353
00:19:53,100 --> 00:19:55,000
out because it's unnecessary for runtime.

354
00:19:55,800 --> 00:20:00,000
So I wanna be able to compile it out and I don't want it to affect how

355
00:20:00,000 --> 00:20:00,500
the actual

356
00:20:00,600 --> 00:20:03,400
The is being laid out because I want to see how that memory is

357
00:20:03,400 --> 00:20:05,900
actually going to be laid out when we actually run the game with a

358
00:20:05,900 --> 00:20:07,300
compiled out, right?

359
00:20:08,600 --> 00:20:12,300
So that's why this stuff is going to be a mirror rather than just

360
00:20:12,300 --> 00:20:14,300
placed in line, which would be easier, right?

361
00:20:14,300 --> 00:20:16,200
Or or injected in, right?

362
00:20:18,100 --> 00:20:23,200
And so anyway, when we've got this, we've got this backing structure

363
00:20:23,200 --> 00:20:27,100
that will allow me to display it and update it as a story, as we get

364
00:20:27,100 --> 00:20:31,900
information from the running game in, through the debug system.

365
00:20:31,900 --> 00:20:36,100
I think this is mostly all we would need

366
00:20:42,600 --> 00:20:45,700
I don't really think we need anything else, do we

367
00:20:50,200 --> 00:20:51,600
I mean, I think that's everything.

368
00:20:54,600 --> 00:20:55,000
Yeah.

369
00:20:56,000 --> 00:20:58,700
And again I want to see like yeah I wasn't really that pleased with

370
00:20:58,700 --> 00:20:59,800
how the debug system and

371
00:21:00,000 --> 00:21:03,300
Up working, I think, someday, I'd like to go back and clean it up.

372
00:21:03,300 --> 00:21:04,900
This is more how it should look.

373
00:21:05,000 --> 00:21:08,200
We should have just built purpose-built things for what we wanted,

374
00:21:08,200 --> 00:21:11,000
rather than trying to make everything be, you know.

375
00:21:13,800 --> 00:21:16,400
Rather than trying to make everything go through something generic

376
00:21:16,500 --> 00:21:17,500
that was just dumb.

377
00:21:18,100 --> 00:21:22,200
But, you know, I like every other programmer make plenty of mistakes

378
00:21:22,600 --> 00:21:23,700
and that's merely one of them.

379
00:21:24,800 --> 00:21:28,800
But anyway, this way, we can just record the stuff directly, and off

380
00:21:28,800 --> 00:21:29,200
we go.

381
00:21:29,200 --> 00:21:32,900
Now, we do have an issue, which is to say that when we do this stuff,

382
00:21:32,900 --> 00:21:36,300
we may want to be handling multiple.

383
00:21:36,700 --> 00:21:40,700
So this memory could be coming from lots of different places and

384
00:21:40,800 --> 00:21:43,000
different threads we have to

385
00:21:43,200 --> 00:21:47,400
Red aware because we use threads in handmade hero but also because in,

386
00:21:47,700 --> 00:21:50,900
you know, computers really, don't get that much faster these days

387
00:21:51,600 --> 00:21:56,200
single-threaded they tend to get faster by being parallelized out to

388
00:21:56,200 --> 00:21:57,000
multiple threads.

389
00:21:57,300 --> 00:22:00,400
And so we really don't want to create systems that will prevent us

390
00:22:00,400 --> 00:22:04,100
from using threading or that fall apart the instant we need to analyze

391
00:22:04,100 --> 00:22:05,000
something that's threaded.

392
00:22:05,700 --> 00:22:07,600
That's especially true, debug systems.

393
00:22:07,600 --> 00:22:12,900
And the reason for that is because debug systems are

394
00:22:13,100 --> 00:22:18,200
often times most needed with multi-threaded code because

395
00:22:18,200 --> 00:22:20,500
multi-threaded code is the hardest kind of code.

396
00:22:20,600 --> 00:22:24,300
There's way more happening once in way more possible errors than

397
00:22:24,300 --> 00:22:25,300
single threaded code.

398
00:22:25,400 --> 00:22:30,700
And so usually, you want to try to avoid scenarios, that would create

399
00:22:32,800 --> 00:22:36,800
difficult code multi-threaded code sections, that then cannot be

400
00:22:36,800 --> 00:22:39,900
analyzed with your debug tools because then you're putting yourself at

401
00:22:39,900 --> 00:22:41,600
like a double disadvantage.

402
00:22:41,700 --> 00:22:43,000
The code is more.

403
00:22:43,200 --> 00:22:44,600
Complicated than the single threaded code.

404
00:22:44,600 --> 00:22:48,400
You were trying to debug and you cannot use your debug tools to

405
00:22:48,400 --> 00:22:49,300
analyze it.

406
00:22:49,400 --> 00:22:52,500
And so you want to try and get as much as you can.

407
00:22:52,500 --> 00:22:56,400
I know it's difficult to make sure that your debug systems handle

408
00:22:56,400 --> 00:23:01,000
multi-threading and don't require like locking and things that would

409
00:23:01,000 --> 00:23:06,300
intrude on the multi-threading and change the behavior of it.

410
00:23:06,300 --> 00:23:08,800
When they attempt to be, you know, do you don't want to Heisenberg it

411
00:23:08,800 --> 00:23:11,500
out in that way?

412
00:23:12,000 --> 00:23:12,900
You want to be as

413
00:23:13,100 --> 00:23:14,400
as transparent as you can be.

414
00:23:14,400 --> 00:23:16,400
In that sense it's never perfect.

415
00:23:16,400 --> 00:23:19,300
Any time you're analyzing something it will change but you want to try

416
00:23:19,300 --> 00:23:20,700
and avoid anything major.

417
00:23:21,500 --> 00:23:25,500
And so, what I want to do here is when we look at these calls that we

418
00:23:25,500 --> 00:23:28,900
have, and we go to the debug interface system, I'm going to add them

419
00:23:28,900 --> 00:23:30,300
in here so we can make them

420
00:23:31,600 --> 00:23:36,000
What I want to be able to do here is say, alright for like these

421
00:23:36,000 --> 00:23:40,300
things, that I said, we were going to start recording.

422
00:23:40,600 --> 00:23:45,100
I want them to go into the debug stream, first right?

423
00:23:45,500 --> 00:23:46,700
This is very important.

424
00:23:49,900 --> 00:23:54,500
I want them to go into the regular debug string, first not directly

425
00:23:54,500 --> 00:23:57,700
into the debug system.

426
00:23:57,900 --> 00:23:59,700
And the reason for that is I don't

427
00:24:00,000 --> 00:24:00,900
Tulloch.

428
00:24:00,900 --> 00:24:05,100
Anything I want them to just go into this, to the stream of events and

429
00:24:05,100 --> 00:24:08,500
then I'll pull them out later from that stream and create stuff from

430
00:24:08,500 --> 00:24:13,300
them that way, because that will allow me to do the allow this to all

431
00:24:13,300 --> 00:24:19,400
run multi-threaded perfectly without having any locking or contention

432
00:24:19,400 --> 00:24:20,400
or anything like that happening.

433
00:24:20,400 --> 00:24:22,400
It's just people dumping into an array while there's still some

434
00:24:22,400 --> 00:24:26,300
potential but it's better, right?

435
00:24:28,400 --> 00:24:30,400
So these are the calls.

436
00:24:30,400 --> 00:24:31,500
We actually need

437
00:24:34,000 --> 00:24:38,900
It's not immediately clear to me, whether this call needs to occur or

438
00:24:38,900 --> 00:24:39,500
not.

439
00:24:39,800 --> 00:24:43,900
One could argue that debug break, debug record block truncate is

440
00:24:43,900 --> 00:24:45,700
sufficient and we should just call it.

441
00:24:46,700 --> 00:24:52,800
Also does anyone know why record block truncate?

442
00:24:54,700 --> 00:24:57,800
We were supposed to, oh, because it's got the used.

443
00:24:57,800 --> 00:24:59,700
Okay, I'm like, why didn't we pass the amount there?

444
00:24:59,700 --> 00:25:00,500
Because we don't need to.

445
00:25:01,500 --> 00:25:07,000
All right, so we've got the block filename line number the size.

446
00:25:07,000 --> 00:25:09,400
So this is the allocated sighs.

447
00:25:09,400 --> 00:25:14,800
This is the used size and this right here is the result.

448
00:25:15,000 --> 00:25:17,800
It's because we want offsets inside the block.

449
00:25:17,800 --> 00:25:21,300
I may make it easier on myself here and just pass that directly.

450
00:25:22,700 --> 00:25:23,700
I don't have.

451
00:25:24,100 --> 00:25:25,300
Auntie You could argue.

452
00:25:25,300 --> 00:25:27,800
It's a little bit better to not do it that way, I don't know, but if

453
00:25:27,800 --> 00:25:30,200
you look here, you can see when we compute.

454
00:25:30,200 --> 00:25:33,400
This result, we're already doing an offset into the block.

455
00:25:35,700 --> 00:25:39,000
So I may just say look we know what that is.

456
00:25:39,400 --> 00:25:40,600
We're all friends here.

457
00:25:40,600 --> 00:25:46,100
I don't trust this system and I'm just going to go ahead and pass that

458
00:25:46,100 --> 00:25:46,600
down.

459
00:25:47,200 --> 00:25:50,600
So that way we don't have to do any point arithmetic there that could

460
00:25:50,600 --> 00:25:52,800
be slightly wrong or something weird happening.

461
00:25:52,800 --> 00:25:53,300
I don't know.

462
00:25:54,200 --> 00:25:57,400
And so we're just going to record what the actual offset and block is

463
00:25:58,900 --> 00:25:59,900
And off we go.

464
00:26:00,500 --> 00:26:05,200
And so, I think that should be mostly all I need at the moment.

465
00:26:06,200 --> 00:26:07,600
I'm relatively happy with that.

466
00:26:08,200 --> 00:26:09,400
So, here's the stuff.

467
00:26:09,400 --> 00:26:10,500
We actually have.

468
00:26:10,500 --> 00:26:13,300
I'm going to go ahead and put those in here as dummies.

469
00:26:13,700 --> 00:26:17,500
That's so that when we compile this out, these calls do nothing.

470
00:26:17,500 --> 00:26:20,700
And again, this is why I wanted to go with a mirroring based system.

471
00:26:20,700 --> 00:26:26,100
Like I said before, both in both cases, I just want to be as

472
00:26:26,700 --> 00:26:28,100
unobtrusive as possible.

473
00:26:28,500 --> 00:26:32,500
So in the case where you compile it out, it's not there at all, it

474
00:26:32,500 --> 00:26:33,900
just completely goes away.

475
00:26:34,400 --> 00:26:37,600
Even the file name and line number information goes away completely

476
00:26:37,600 --> 00:26:38,600
from the whole system.

477
00:26:39,200 --> 00:26:44,000
And I wanted that to be sort of a requirement of the implementation

478
00:26:45,400 --> 00:26:49,200
Okay, so now we've got these things, we need some way of recording

479
00:26:49,200 --> 00:26:49,800
these events.

480
00:26:49,800 --> 00:26:53,800
Thankfully we have a fairly flexible system that allows us to do that.

481
00:26:53,800 --> 00:26:54,900
You can see it here.

482
00:26:54,900 --> 00:26:57,100
This is how we've been doing everything.

483
00:26:57,300 --> 00:26:59,800
We got these record, debug events and so if

484
00:27:00,100 --> 00:27:05,400
I add these in here where I can just say, let's record these events.

485
00:27:05,400 --> 00:27:07,300
Some of them will be pretty easy.

486
00:27:07,300 --> 00:27:11,400
Some of them will be harder what we know is, they'll probably look

487
00:27:11,400 --> 00:27:12,200
like this.

488
00:27:17,600 --> 00:27:18,200
Right.

489
00:27:18,600 --> 00:27:19,200
This is

490
00:27:21,700 --> 00:27:23,300
actually, I don't know why.

491
00:27:23,300 --> 00:27:25,600
It's why is it passing unknown?

492
00:27:25,600 --> 00:27:27,200
And then setting it to set Hood?

493
00:27:28,400 --> 00:27:33,500
Is that, is that some is that because record debug event would

494
00:27:33,500 --> 00:27:37,500
complain if you passed it, something that it didn't understand.

495
00:27:37,900 --> 00:27:39,400
It's been a while since I used this.

496
00:27:39,700 --> 00:27:42,900
Let me just see what's happening there.

497
00:27:42,900 --> 00:27:47,000
So here's record debug event, here's the event type that's getting

498
00:27:47,000 --> 00:27:51,200
passed into their this is it setting the event type here.

499
00:27:51,700 --> 00:27:54,200
I'll be honest I don't see a lot of reason for that.

500
00:27:56,700 --> 00:27:58,700
So I feel like you could just pass that down.

501
00:27:58,800 --> 00:28:06,400
Actually the grit in it, I don't think we want anything, they're

502
00:28:06,400 --> 00:28:08,500
really the name in it.

503
00:28:11,700 --> 00:28:14,100
We could use ourselves probably.

504
00:28:14,700 --> 00:28:16,200
So I think that's all good.

505
00:28:16,300 --> 00:28:18,300
I'm going to go look at that event structure.

506
00:28:21,000 --> 00:28:23,500
And what you can see here is we've got this sort of Union of

507
00:28:23,500 --> 00:28:24,100
information.

508
00:28:24,100 --> 00:28:27,900
Here's a stirring that memory Arena P information there.

509
00:28:28,200 --> 00:28:31,200
These events are already 1V for long.

510
00:28:31,200 --> 00:28:33,300
That's quite large actually.

511
00:28:33,400 --> 00:28:34,900
That's for values.

512
00:28:35,300 --> 00:28:38,000
So we should be able to stick a memory.

513
00:28:38,000 --> 00:28:42,400
A piece of memory information in here that should allow us to do

514
00:28:42,600 --> 00:28:44,100
whatever we need to do.

515
00:28:44,500 --> 00:28:47,400
So given this record debug event call.

516
00:28:47,400 --> 00:28:49,200
I also don't know for the grid stuff.

517
00:28:49,200 --> 00:28:50,300
What are we doing for that?

518
00:28:50,600 --> 00:28:51,800
Just debug name.

519
00:28:53,500 --> 00:28:54,300
For the grid.

520
00:28:54,600 --> 00:28:57,600
So I don't actually know what we would want to do there.

521
00:29:02,300 --> 00:29:05,400
I don't know if we need those squids for anything in particular.

522
00:29:09,800 --> 00:29:11,000
That's a tough one.

523
00:29:17,100 --> 00:29:19,400
You know, just looking at how we're doing that.

524
00:29:20,200 --> 00:29:24,500
You know, you can see here like we've got this sort of a grid, I may

525
00:29:24,500 --> 00:29:28,500
just do that because that seems like the most logical thing to me.

526
00:29:28,700 --> 00:29:31,200
So inside here we do debug arena name.

527
00:29:31,200 --> 00:29:35,000
I may just do something like this, which is just like, you know, set

528
00:29:35,000 --> 00:29:38,400
arena name and I'm going to put this in oops.

529
00:29:39,700 --> 00:29:40,400
Like that.

530
00:29:43,200 --> 00:29:46,400
And so, one of the things with set arena name is, I think it's kind of

531
00:29:46,400 --> 00:29:49,600
doesn't need anything special because the name could just come in as

532
00:29:49,600 --> 00:29:52,400
the name parameter and that's all good.

533
00:29:52,800 --> 00:29:58,400
Once we get two things here like block, free and record allocation,

534
00:29:58,600 --> 00:29:59,800
we're going to need a little bit more.

535
00:30:00,000 --> 00:30:01,100
Nation, probably.

536
00:30:01,800 --> 00:30:04,700
So here we've got, you know,

537
00:30:07,200 --> 00:30:10,800
Arena block free and maybe I'll call this.

538
00:30:12,200 --> 00:30:13,200
Arena set name.

539
00:30:13,300 --> 00:30:14,800
So these all just start with Arena.

540
00:30:20,900 --> 00:30:26,600
The name parameter here again, we don't really have a name for it, so

541
00:30:26,600 --> 00:30:28,500
it's hard to pass anything there.

542
00:30:29,100 --> 00:30:30,400
So we'll just say nothing for.

543
00:30:30,400 --> 00:30:35,400
Now what we need to be able to do here is pass some kind of block

544
00:30:35,400 --> 00:30:36,300
pointer at, right?

545
00:30:36,500 --> 00:30:42,500
And so we know we've got a platform memory block yet.

546
00:30:45,900 --> 00:30:48,900
And I don't know what memory Arena p is there.

547
00:30:48,900 --> 00:30:54,000
Is there a reason we needed that to be specific?

548
00:30:55,700 --> 00:30:58,800
I'm guessing it's because of the way we did the debug HUD thing.

549
00:30:58,800 --> 00:31:04,300
So I'm thinking that maybe that is not super necessary for debug type

550
00:31:04,300 --> 00:31:05,200
memory nappy.

551
00:31:05,200 --> 00:31:07,400
It's probably was just for auto detection.

552
00:31:07,600 --> 00:31:11,100
So I think we could probably do memory Arena

553
00:31:11,900 --> 00:31:12,900
Debug type.

554
00:31:19,200 --> 00:31:21,000
So actually that block needs to things.

555
00:31:21,000 --> 00:31:25,700
So I'm going to actually say maybe we could call this

556
00:31:29,900 --> 00:31:33,400
Maybe we could call this something slightly different.

557
00:31:34,000 --> 00:31:37,500
So maybe we should say here.

558
00:31:37,500 --> 00:31:38,400
All right.

559
00:31:41,600 --> 00:31:44,000
This debug type.

560
00:31:45,000 --> 00:31:48,100
Actually is like memory.

561
00:31:49,900 --> 00:31:56,700
Hop or something and this is just memory up.

562
00:31:57,900 --> 00:32:06,400
Mmmm up and this thing is like, you know, I'm saying to you.

563
00:32:19,300 --> 00:32:23,100
I guess this should just be in keeping with the spirit.

564
00:32:23,800 --> 00:32:27,200
And so, in here, what I want is I want the pointer to the arena that

565
00:32:27,200 --> 00:32:28,500
we're talking about.

566
00:32:29,200 --> 00:32:34,100
I want the platform memory block that we're talking about.

567
00:32:35,500 --> 00:32:38,600
The filename in line number could actually go up into the grid.

568
00:32:38,600 --> 00:32:41,200
That's probably what we should do with that now that I think about it.

569
00:32:41,200 --> 00:32:42,500
So we'll make that work.

570
00:32:43,100 --> 00:32:46,500
There's a little bit of gyrations, we should do for debug record

571
00:32:46,500 --> 00:32:49,100
allocation and we can make that be nice and clean.

572
00:32:49,100 --> 00:32:51,400
So we don't have to we can parse those out after the fact.

573
00:32:52,400 --> 00:32:56,000
So I think all we need here is just the two pieces of actual

574
00:32:56,000 --> 00:32:57,000
allocation information.

575
00:32:57,000 --> 00:32:59,400
So there's allocated size used size and offset.

576
00:32:59,500 --> 00:32:59,800
So we need

577
00:33:00,100 --> 00:33:04,100
Allocated size used size.

578
00:33:05,300 --> 00:33:07,100
And offset in Block.

579
00:33:08,000 --> 00:33:11,600
But what you can see here is this is like gonna blow it out a little

580
00:33:11,600 --> 00:33:12,400
bit, too big.

581
00:33:12,600 --> 00:33:15,900
You look at something like a rectangle, 3, that's 6 parameters.

582
00:33:17,800 --> 00:33:19,700
I don't really want to blow it too much more than that.

583
00:33:19,700 --> 00:33:21,600
So if you look you've got

584
00:33:23,200 --> 00:33:24,800
This will probably the biggest thing in here.

585
00:33:24,800 --> 00:33:27,600
If you look at it like it's bigger than a rectangle 3, right?

586
00:33:28,200 --> 00:33:32,200
And so I kind of feel like these things should probably have been you

587
00:33:32,200 --> 00:33:33,900
know I mean I guess we could compress them though.

588
00:33:33,900 --> 00:33:35,700
We could only output the size.

589
00:33:35,700 --> 00:33:36,800
We actually need.

590
00:33:37,600 --> 00:33:40,100
I don't actually know for doing that at the moment.

591
00:33:40,100 --> 00:33:41,100
Probably not

592
00:33:44,900 --> 00:33:45,600
We take a look.

593
00:33:48,900 --> 00:33:49,600
Yeah, we're not.

594
00:33:49,600 --> 00:33:51,400
We just it's just a giant array of these.

595
00:33:55,100 --> 00:33:57,500
So it's a little bit annoying in that sense, right?

596
00:33:57,500 --> 00:34:01,100
Where we've got the debug memory up coming into the stream here and

597
00:34:01,100 --> 00:34:03,900
we're sort of just it's a little bit too big, right?

598
00:34:04,300 --> 00:34:09,900
And so I feel like this this is just to blow T at that point and I

599
00:34:09,900 --> 00:34:13,699
would like some way of making it less bad.

600
00:34:15,400 --> 00:34:19,199
I would assume that probably the easiest way to do that.

601
00:34:19,199 --> 00:34:19,400
Right?

602
00:34:19,400 --> 00:34:23,500
If these were not, if we just didn't track,

603
00:34:24,900 --> 00:34:31,000
Is that were too large, so we just marked them as such that would keep

604
00:34:31,000 --> 00:34:33,500
this down to a more manageable size, right?

605
00:34:37,500 --> 00:34:38,400
We do something like this.

606
00:34:38,900 --> 00:34:42,000
So this is 1 2 3 4 5 6 7 8.

607
00:34:42,000 --> 00:34:45,199
So that's 8 long looking at something like this.

608
00:34:45,199 --> 00:34:46,199
That's six.

609
00:34:46,199 --> 00:34:52,000
So you know it's still it's still just too big it's just too large

610
00:34:52,100 --> 00:34:52,800
right.

611
00:34:58,500 --> 00:35:02,800
And if you did that, I suppose that would we would do it, right?

612
00:35:02,800 --> 00:35:08,500
But you kind of you're missing the overhang part of this a little bit.

613
00:35:08,500 --> 00:35:11,500
So you don't really know how much you actually used here, which is a

614
00:35:11,500 --> 00:35:16,600
little annoying but hey, we can sort of work with that.

615
00:35:16,600 --> 00:35:20,800
For now, I do think we can solve all this by just having the having

616
00:35:20,800 --> 00:35:21,300
this.

617
00:35:23,700 --> 00:35:25,900
We could look record two events, right?

618
00:35:25,900 --> 00:35:27,500
You could just anytime you need.

619
00:35:27,700 --> 00:35:30,200
You think bigger like we should do that for rectangles as well.

620
00:35:31,400 --> 00:35:35,400
Anytime you need more than one event, just record more than one event,

621
00:35:35,400 --> 00:35:35,800
right?

622
00:35:35,800 --> 00:35:37,400
Just like take forwards.

623
00:35:38,800 --> 00:35:42,800
And just record like a sequence, you know what I mean?

624
00:35:43,300 --> 00:35:46,600
So you could just say, hey every time you see one of these, you need

625
00:35:46,600 --> 00:35:49,600
to see one of these after it, right?

626
00:35:50,500 --> 00:35:54,400
And you just specify the same grid for both of them or something like

627
00:35:54,400 --> 00:35:55,200
this, right?

628
00:35:55,300 --> 00:35:56,600
We could do something like that.

629
00:35:56,700 --> 00:35:59,300
I'm not going to go down that road right now because I just don't want

630
00:35:59,300 --> 00:35:59,800
to deal with that.

631
00:36:00,000 --> 00:36:03,600
Actually, we don't super need it but it's worth noting that like

632
00:36:03,600 --> 00:36:07,000
there's better stuff we probably could do if we put our minds to it

633
00:36:07,000 --> 00:36:07,300
here.

634
00:36:09,900 --> 00:36:12,200
Alright, so looking at this stuff here.

635
00:36:12,900 --> 00:36:19,500
So we've got the arena block and so on, in these debug types, I want

636
00:36:19,500 --> 00:36:20,600
to be able to set.

637
00:36:21,400 --> 00:36:25,100
I want to be able to set the type differently and have it.

638
00:36:25,100 --> 00:36:28,100
You know it probably shouldn't come through here, she'd probably be

639
00:36:28,100 --> 00:36:29,300
something like this, right?

640
00:36:31,000 --> 00:36:34,900
And I don't think I want to make different ones for each of these.

641
00:36:34,900 --> 00:36:37,200
I think they can all be that, right?

642
00:36:37,500 --> 00:36:39,500
So I'm going to call it like, hey,

643
00:36:40,400 --> 00:36:41,400
there's,

644
00:36:42,500 --> 00:36:45,100
Arena set name.

645
00:36:45,300 --> 00:36:48,900
There's Arena block free.

646
00:36:48,900 --> 00:36:50,200
There's

647
00:36:51,300 --> 00:37:00,300
Arena block truncate and there's Arena allocate, right?

648
00:37:03,100 --> 00:37:03,500
Um,

649
00:37:09,300 --> 00:37:10,300
I think that's everything.

650
00:37:10,700 --> 00:37:15,400
And so in here, when we're doing our record debug event and all this

651
00:37:15,800 --> 00:37:17,900
fun stuff, second it's out there.

652
00:37:18,700 --> 00:37:25,600
So in here we want to say Arena block truncate and in here we want to

653
00:37:25,600 --> 00:37:29,400
say Arena block allocate.

654
00:37:29,500 --> 00:37:30,700
Oops, sorry allocated.

655
00:37:31,700 --> 00:37:36,000
And I think because these don't take anything in particular.

656
00:37:37,800 --> 00:37:39,800
I'm just calling them what their event is.

657
00:37:44,400 --> 00:37:50,100
But in this case, I want this place here to take the grid explicitly.

658
00:37:50,400 --> 00:37:53,600
So what I'm going to change is this is actually going to be the grid.

659
00:37:54,800 --> 00:37:58,200
And that's going to get passed through and we'll go from there.

660
00:37:58,800 --> 00:38:03,500
So in these, where we have like allocated size, use size, all set in

661
00:38:03,500 --> 00:38:04,000
Block.

662
00:38:04,000 --> 00:38:08,200
Like I said, that stuff is unfortunately not really that useful to us

663
00:38:08,200 --> 00:38:11,600
at the moment because we can't quite store it exactly that way.

664
00:38:12,200 --> 00:38:15,800
So, what I'm going to do here is, I'm just going to say alright, let's

665
00:38:15,800 --> 00:38:19,800
go ahead and record what we can out of it, and then we'll see if it

666
00:38:19,800 --> 00:38:20,600
ever causes us.

667
00:38:20,600 --> 00:38:22,800
A problem, a little later down the line.

668
00:38:23,500 --> 00:38:24,400
So, if we look down in here,

669
00:38:24,600 --> 00:38:29,400
Here, we've got this, like value Diogo, debug memory up kind of thing.

670
00:38:30,400 --> 00:38:33,800
So in all of these were going to want to set certain parameters of

671
00:38:33,800 --> 00:38:38,300
these, and we have Arena block allocated size of offset and block to

672
00:38:38,300 --> 00:38:39,400
be recorded.

673
00:38:39,500 --> 00:38:43,400
So in here, we want to say, all right, here's the arena.

674
00:38:49,700 --> 00:38:50,800
Here's the block.

675
00:38:51,400 --> 00:38:53,100
Here's the allocated size.

676
00:38:55,900 --> 00:38:56,800
Here's the offset.

677
00:38:58,100 --> 00:38:58,400
Yeah.

678
00:39:01,700 --> 00:39:05,400
And what we're going to do here is just literally do like these

679
00:39:05,400 --> 00:39:05,700
things.

680
00:39:05,700 --> 00:39:08,100
Truncated to you 32s, right?

681
00:39:09,900 --> 00:39:11,500
And we're just going to hope for the best

682
00:39:15,300 --> 00:39:17,200
and then someday we'll maybe try to do better.

683
00:39:35,500 --> 00:39:40,200
All right, so that's hard to read.

684
00:39:47,900 --> 00:39:48,500
Tell you what?

685
00:39:50,600 --> 00:39:51,200
How about that?

686
00:39:54,800 --> 00:39:58,800
All right, so for the other parts of this, we're still going to

687
00:39:58,800 --> 00:40:01,900
basically do the same thing, but we don't have any other information

688
00:40:01,900 --> 00:40:03,200
to record, right?

689
00:40:04,500 --> 00:40:07,000
So we're literally just recording the arena in the block and off, we

690
00:40:07,000 --> 00:40:07,300
go.

691
00:40:08,300 --> 00:40:08,800
In this case.

692
00:40:08,800 --> 00:40:11,000
We don't even have a block, we're just doing the arena, but we still

693
00:40:11,000 --> 00:40:12,400
need to say what the arena pointer was.

694
00:40:12,400 --> 00:40:14,700
Otherwise it would have no idea what it was when it went to actually

695
00:40:14,700 --> 00:40:16,800
set the name which is this, right?

696
00:40:18,100 --> 00:40:23,700
So I think that all would work just fine and yeah.

697
00:40:27,600 --> 00:40:30,100
I think that gives us everything that we needed.

698
00:40:33,300 --> 00:40:33,600
Okay.

699
00:40:34,200 --> 00:40:37,600
So debug record allocation is now wrong.

700
00:40:38,700 --> 00:40:41,400
These are apparently not known, so just get rid of that.

701
00:40:45,000 --> 00:40:46,400
I have no idea what this is.

702
00:40:46,400 --> 00:40:47,300
Oh, that's for event data.

703
00:40:47,300 --> 00:40:48,300
We don't need that.

704
00:40:57,100 --> 00:40:58,600
What are you complaining about?

705
00:41:00,700 --> 00:41:04,700
Trailing return type is not allowed after wait.

706
00:41:04,700 --> 00:41:05,100
What?

707
00:41:18,400 --> 00:41:19,000
um,

708
00:41:26,200 --> 00:41:30,400
I guess, I'm not sure what that is trying to say to me.

709
00:41:32,100 --> 00:41:38,100
Trailing return type is not allowed after I nonfunction declarer.

710
00:41:53,600 --> 00:41:58,300
So, my guess is that, that's just because we haven't adjusted this to

711
00:41:58,300 --> 00:41:59,800
take the grid yet.

712
00:42:00,000 --> 00:42:01,200
We were using it.

713
00:42:05,800 --> 00:42:07,100
Don't quote me on that.

714
00:42:07,100 --> 00:42:11,300
But so if you take a look at how we're using file in line here,

715
00:42:12,200 --> 00:42:15,800
essentially, what I want to say is this probably needs to look more

716
00:42:16,200 --> 00:42:17,000
like this.

717
00:42:19,700 --> 00:42:20,300
Right.

718
00:42:20,800 --> 00:42:23,900
And so what we want to do with the file and line numbers, there is

719
00:42:23,900 --> 00:42:27,700
when we create those we want to create those as grids basically,

720
00:42:27,700 --> 00:42:28,200
right?

721
00:42:28,800 --> 00:42:33,500
And so you where we kind of munge, it Munch all the information

722
00:42:33,500 --> 00:42:36,400
together into one thing and sort of store it away, right?

723
00:42:38,300 --> 00:42:40,800
And so if you look at how we're doing that, like debug name that the

724
00:42:40,800 --> 00:42:47,000
function, for example is probably the easiest way to do it but we

725
00:42:47,000 --> 00:42:50,500
could also have some other name there where we we could put in like

726
00:42:50,500 --> 00:42:53,900
who, which one of these people was was responsible for it or something

727
00:42:53,900 --> 00:42:57,500
like that would be another way that we could have that happen.

728
00:42:57,500 --> 00:42:59,400
So I don't know which one exactly what I do.

729
00:42:59,500 --> 00:43:02,400
But basically just going to do a debug name and so that way it'll

730
00:43:02,400 --> 00:43:04,900
create the grid this way, right?

731
00:43:05,500 --> 00:43:07,300
Where it like builds the name up out of the

732
00:43:07,500 --> 00:43:12,000
Is a piece of information and as far as I know, it looks like to me

733
00:43:12,000 --> 00:43:14,400
the name part is never used anymore.

734
00:43:14,400 --> 00:43:15,300
Anyway, right.

735
00:43:15,300 --> 00:43:18,800
You can see it's just ignored because I think we couldn't figure out

736
00:43:18,800 --> 00:43:19,900
how to correctly, make it.

737
00:43:19,900 --> 00:43:23,300
Well, Don in certain situations, so kind of unfortunate, but that's

738
00:43:23,300 --> 00:43:24,300
just how it works right now.

739
00:43:25,400 --> 00:43:28,700
So what I think I'm going to do is just use this debug name here and

740
00:43:28,700 --> 00:43:32,500
say, all right, everywhere that we were doing a file in line, I'm just

741
00:43:32,500 --> 00:43:35,900
going to do debug name and I'm going to like put the name of the thing

742
00:43:35,900 --> 00:43:37,300
that caused it to happen.

743
00:43:37,600 --> 00:43:38,100
Right.

744
00:43:39,500 --> 00:43:43,000
So like in this case, it's, you know, debug name.

745
00:43:44,400 --> 00:43:46,700
Push array and that won't come through right now.

746
00:43:46,700 --> 00:43:49,600
But if we ever sort of like modified or debug system to work around

747
00:43:49,600 --> 00:43:53,400
that, we got rid of it because of some Linux nonsense, clang was being

748
00:43:53,400 --> 00:43:55,800
stupid and there was really no way to fix it.

749
00:43:55,800 --> 00:43:57,300
So we had to kind of get rid of it.

750
00:43:58,000 --> 00:44:00,600
But that's just you know that's how that goes.

751
00:44:00,900 --> 00:44:01,600
It's not really clanks.

752
00:44:01,600 --> 00:44:05,300
Well, I think with GCC who actually set the precedent of having

753
00:44:05,300 --> 00:44:07,700
certain things not be correctly.

754
00:44:10,500 --> 00:44:13,400
And I, you know, I want to say that even got a adopted by the

755
00:44:13,400 --> 00:44:14,200
standards committee.

756
00:44:14,200 --> 00:44:17,600
You know, in their infinite, decimal wisdom, things not being created

757
00:44:17,600 --> 00:44:18,400
as spring constants.

758
00:44:18,400 --> 00:44:21,100
It's a long story, but you can go back and look at the archives for

759
00:44:21,100 --> 00:44:21,300
why.

760
00:44:21,300 --> 00:44:23,400
We had a Nerf that bit works.

761
00:44:23,400 --> 00:44:27,400
Just fine, on Microsoft's compiler, but it doesn't work correctly.

762
00:44:27,400 --> 00:44:31,000
On sort of the Linux origin compilers.

763
00:44:33,200 --> 00:44:37,200
All right, so once we've got those in there now we should be passing

764
00:44:37,200 --> 00:44:38,400
grids properly.

765
00:44:39,300 --> 00:44:43,300
As soon as I actually changed this.

766
00:44:49,000 --> 00:44:52,900
Okay, so I think that's correct now, unfortunately, that had nothing

767
00:44:52,900 --> 00:44:55,200
to do with the error, but that is something we needed to fix

768
00:44:55,400 --> 00:44:56,100
regardless.

769
00:44:56,500 --> 00:44:57,600
All right, so let's see.

770
00:44:57,900 --> 00:44:59,800
I have no idea what this is complaining about.

771
00:45:00,000 --> 00:45:01,100
Event seems fine.

772
00:45:01,600 --> 00:45:03,900
Is it just the fact that this comment is annoying you?

773
00:45:03,900 --> 00:45:04,500
I doubt it.

774
00:45:06,800 --> 00:45:08,500
So, what did I do wrong there?

775
00:45:08,500 --> 00:45:10,100
Allocated size?

776
00:45:11,300 --> 00:45:16,600
Equals allocated size, which is getting passed in, which should just

777
00:45:16,600 --> 00:45:17,800
be fine, right?

778
00:45:18,600 --> 00:45:20,200
I mean, I don't know why it wouldn't be.

779
00:45:20,200 --> 00:45:22,700
I've since this is a macro, I should technically do this, but it

780
00:45:22,700 --> 00:45:25,200
doesn't matter because it's not being used that way.

781
00:45:26,800 --> 00:45:28,000
Do not like this.

782
00:45:28,200 --> 00:45:31,300
What do you not like that's a very cryptic error message

783
00:45:40,200 --> 00:45:41,800
And it's only on those two.

784
00:45:42,100 --> 00:45:43,500
So, is there some of the thing?

785
00:45:43,800 --> 00:45:46,500
When we're actually calling debug record allocation

786
00:45:48,400 --> 00:45:50,900
We're passing Arena Arena current block.

787
00:45:50,900 --> 00:45:52,100
We're passing the grid.

788
00:45:52,100 --> 00:45:53,700
I should probably could be safe.

789
00:45:53,700 --> 00:45:54,900
Also do this?

790
00:45:55,500 --> 00:45:56,200
Nothing.

791
00:45:56,600 --> 00:46:00,300
You should never be doing anything that would have caused this to be

792
00:46:00,300 --> 00:46:03,700
happening, but just principle of least surprise, for on for the

793
00:46:03,700 --> 00:46:04,200
caller.

794
00:46:05,000 --> 00:46:05,800
I'll just, you know,

795
00:46:11,900 --> 00:46:15,400
These getting past should just work.

796
00:46:17,800 --> 00:46:20,400
I really don't know what that are is about.

797
00:46:25,200 --> 00:46:29,700
And if I could quickly, just double-check that, I'm not insane.

798
00:46:37,800 --> 00:46:42,300
I mean that just looks really straightforward, right?

799
00:46:55,200 --> 00:46:57,400
Except wait.

800
00:47:00,000 --> 00:47:01,600
Why is that working at all?

801
00:47:01,600 --> 00:47:03,800
These should have been dots the entire time.

802
00:47:04,400 --> 00:47:05,400
How did it?

803
00:47:05,800 --> 00:47:07,900
How do you think these were correct?

804
00:47:08,400 --> 00:47:09,400
What's going on here?

805
00:47:11,300 --> 00:47:13,100
Something very strange is happening.

806
00:47:13,600 --> 00:47:17,100
Like, how did it actually allow?

807
00:47:22,000 --> 00:47:31,400
What's oh, there's one space after our that was just a preprocessor

808
00:47:31,400 --> 00:47:31,800
error.

809
00:47:31,900 --> 00:47:32,900
Oh, my god.

810
00:47:32,900 --> 00:47:36,400
There was just a space after that ate the macaroni pasta.

811
00:47:36,600 --> 00:47:37,700
They couldn't have fixed it.

812
00:47:38,100 --> 00:47:38,700
30 years.

813
00:47:38,700 --> 00:47:39,500
They couldn't fix it.

814
00:47:39,500 --> 00:47:40,100
40 years.

815
00:47:42,500 --> 00:47:44,100
These are all supposed to be dots.

816
00:47:44,700 --> 00:47:46,200
Don't ask me why I wrote them as arrows.

817
00:47:46,200 --> 00:47:47,100
It's not a pointer.

818
00:47:51,600 --> 00:47:57,200
So let's see here name is an Undeclared identifier, that's probably

819
00:47:57,200 --> 00:47:59,800
true because I don't remember.

820
00:48:03,100 --> 00:48:04,200
Anything about that.

821
00:48:06,400 --> 00:48:08,500
Yeah, don't ask me what that's doing there.

822
00:48:09,400 --> 00:48:14,600
So I'm not sure what we want to put for the name in this case.

823
00:48:17,400 --> 00:48:19,200
What do people normally do?

824
00:48:19,200 --> 00:48:22,900
It looks like they just put the string of the thing that they were

825
00:48:23,300 --> 00:48:23,900
taking.

826
00:48:26,300 --> 00:48:29,200
In our case I don't know that we really have anything like that.

827
00:48:30,200 --> 00:48:34,400
So I guess I will just say like you know

828
00:48:38,600 --> 00:48:40,600
I could pass the grid twice, I suppose.

829
00:48:40,600 --> 00:48:42,800
Other than that, I'm not sure what to see, what we end up doing with

830
00:48:42,800 --> 00:48:46,200
that and then we'll go from there, I guess.

831
00:48:46,900 --> 00:48:48,600
So, let's see.

832
00:48:48,600 --> 00:48:50,900
Size is not a member.

833
00:48:50,900 --> 00:48:51,500
Oh, right?

834
00:48:51,500 --> 00:48:52,300
This won't work.

835
00:49:04,700 --> 00:49:05,100
so,

836
00:49:10,700 --> 00:49:12,500
Let's just make that work.

837
00:49:12,500 --> 00:49:13,100
That way.

838
00:49:14,400 --> 00:49:17,600
Um and sure.

839
00:49:23,300 --> 00:49:27,000
Free is not a member again with the same problem.

840
00:49:41,900 --> 00:49:43,100
Just name conflicts.

841
00:49:52,900 --> 00:49:53,700
Let's see.

842
00:49:55,000 --> 00:49:56,300
Screw this.

843
00:49:58,900 --> 00:50:00,200
And leave it like that.

844
00:50:02,900 --> 00:50:04,700
Do you put buck truncates?

845
00:50:09,700 --> 00:50:11,800
Who is having a problem?

846
00:50:15,100 --> 00:50:16,100
Run Kate.

847
00:50:20,400 --> 00:50:23,400
and that's just a case of

848
00:50:25,900 --> 00:50:28,400
still passing this down for no reason.

849
00:50:36,500 --> 00:50:40,100
And we've got an unexpected.

850
00:50:41,200 --> 00:50:42,700
Yes, that is true.

851
00:50:42,700 --> 00:50:45,400
This is like I accidentally deleted.

852
00:50:46,500 --> 00:50:47,900
The closing parenthesis.

853
00:50:48,500 --> 00:50:51,100
All right, so just a lot of fussing there.

854
00:50:52,300 --> 00:50:57,600
Unresolved external symbol Global symbol cubics up, so because these

855
00:50:57,600 --> 00:50:58,900
events are getting recorded.

856
00:50:58,900 --> 00:50:59,900
Now, it looks like

857
00:51:00,100 --> 00:51:00,700
Our.

858
00:51:02,900 --> 00:51:08,100
Artest PNG doesn't have any way to record that sort of information.

859
00:51:08,400 --> 00:51:11,200
So I think what we want to do there is just make sure that we turn

860
00:51:11,200 --> 00:51:14,200
this stuff off right for the memory subsystem.

861
00:51:15,100 --> 00:51:18,600
So I would say that's probably just something that when we're doing

862
00:51:18,600 --> 00:51:25,900
tests P&G itself, we probably want to do like that for the test PNG.

863
00:51:27,000 --> 00:51:28,800
Just so that's not actually happening.

864
00:51:30,200 --> 00:51:31,400
Probably do this, actually,

865
00:51:40,400 --> 00:51:42,600
And we should probably do that for yeah, for everybody.

866
00:51:49,100 --> 00:51:52,400
We could add the debug system to them but it's just not worth it,

867
00:51:52,400 --> 00:51:52,600
right?

868
00:51:52,600 --> 00:51:54,100
There's no point in having that

869
00:51:56,200 --> 00:52:00,600
Okay, so looks like this is actually not.

870
00:52:00,700 --> 00:52:08,200
This is itself is a pointer already and I guess that makes sense with

871
00:52:08,200 --> 00:52:09,900
how it's actually being used.

872
00:52:11,700 --> 00:52:16,800
So I guess I'll just go ahead and pass it directly.

873
00:52:18,800 --> 00:52:20,300
Other than that, I think we're good.

874
00:52:20,300 --> 00:52:21,000
Right?

875
00:52:21,200 --> 00:52:22,300
What else we got?

876
00:52:22,800 --> 00:52:24,900
Oh, it's not supposed to be a

877
00:52:25,300 --> 00:52:25,800
Colon.

878
00:52:29,800 --> 00:52:31,200
All right, so I think we're good.

879
00:52:31,200 --> 00:52:36,200
The only thing now is this doesn't want to be done the way it's being

880
00:52:36,200 --> 00:52:37,200
done here at all.

881
00:52:38,200 --> 00:52:43,000
We kind of want now, our own way of displaying these things, and we

882
00:52:43,000 --> 00:52:47,200
probably want to display them, sort of the way that we're displaying

883
00:52:47,200 --> 00:52:48,200
like this other stuff.

884
00:52:48,600 --> 00:52:53,800
For example, the thread interval, glass, graph, top clocks list this

885
00:52:53,800 --> 00:52:55,100
stuff, right?

886
00:52:56,000 --> 00:52:59,400
I think, what we want to do is this stuff should probably be.

887
00:53:01,100 --> 00:53:02,400
What's displayed?

888
00:53:02,600 --> 00:53:04,000
We want the same thing.

889
00:53:04,200 --> 00:53:07,900
So we want to kind of get rid of this since it's never supposed to

890
00:53:07,900 --> 00:53:12,300
happen now and we just want Arena occupancy itself to be the thing

891
00:53:12,300 --> 00:53:12,900
that's there.

892
00:53:16,200 --> 00:53:18,200
This will be Rewritten.

893
00:53:18,800 --> 00:53:23,200
So I think we're fine to just do that.

894
00:53:24,400 --> 00:53:26,700
And then I think we can go from there.

895
00:53:27,900 --> 00:53:29,400
I think that's what we need.

896
00:53:30,900 --> 00:53:34,900
Yeah, so I'm assuming, and I don't know, but I think we've laid the

897
00:53:34,900 --> 00:53:35,300
groundwork.

898
00:53:35,300 --> 00:53:39,400
Now, I'm assuming if we ran it, we should now get an assertion that we

899
00:53:39,400 --> 00:53:43,200
don't handle the debug stream that comes in during collation.

900
00:53:43,500 --> 00:53:50,500
Because now in the code where we are going to process it, we're like

901
00:53:50,500 --> 00:53:55,800
coaling all of our events which we haven't touched in years, right?

902
00:53:55,800 --> 00:53:57,500
But here Co like debug records.

903
00:54:00,000 --> 00:54:00,500
Stuff.

904
00:54:00,500 --> 00:54:04,400
We've got debug pin, lock and block data block clothes blocks that

905
00:54:04,400 --> 00:54:08,000
HUD, blah, blah, blah, right in here.

906
00:54:08,300 --> 00:54:10,900
I guess we maybe, I guess we wouldn't actually have.

907
00:54:10,900 --> 00:54:14,500
It would just flow through here and not do what we want, which is

908
00:54:14,500 --> 00:54:16,800
recorded as specific memory events.

909
00:54:17,400 --> 00:54:21,000
So what I want to do now is I want to take those memory events and

910
00:54:21,000 --> 00:54:25,800
make sure they get handled by specific code, designed to do the right

911
00:54:25,800 --> 00:54:29,400
thing to record what's happening with our memory.

912
00:54:30,000 --> 00:54:32,900
And in this case, it should be pretty straightforward.

913
00:54:32,900 --> 00:54:35,700
Because these things have exactly purpose.

914
00:54:35,900 --> 00:54:39,300
We designed them purposely to have exactly what we need to create a

915
00:54:39,300 --> 00:54:40,200
backing store.

916
00:54:41,900 --> 00:54:46,400
Of exactly the information about who allocated.

917
00:54:46,400 --> 00:54:46,500
What?

918
00:54:46,500 --> 00:54:51,300
And when so inside here, those will now flow through and just get

919
00:54:51,300 --> 00:54:54,600
ignored, but we can soon break them out and something that actually

920
00:54:54,600 --> 00:54:56,100
records the correct information.

921
00:54:56,900 --> 00:55:01,500
And so if I now Run the game, I just want to make sure that everything

922
00:55:01,500 --> 00:55:05,100
still flowing properly and that nothing bad happens.

923
00:55:05,600 --> 00:55:08,400
Looking at our debug, it can kind of see here.

924
00:55:08,400 --> 00:55:11,100
We've got everything, but the memory is now available.

925
00:55:11,700 --> 00:55:13,500
This is all working properly, right?

926
00:55:14,100 --> 00:55:16,200
And so I think we're pretty good to go here.

927
00:55:18,100 --> 00:55:21,900
So now what we want to do is from the

928
00:55:24,800 --> 00:55:27,100
From the debug events themselves.

929
00:55:27,100 --> 00:55:30,800
We want to translate these debug events that are in the debug buffer

930
00:55:31,200 --> 00:55:35,900
into calls that will actually create the mirror structure that I typed

931
00:55:35,900 --> 00:55:38,100
in just a few moments ago.

932
00:55:38,700 --> 00:55:48,000
So each of these calls should essentially create a an operation to

933
00:55:49,300 --> 00:55:51,600
This stuff right here, right?

934
00:55:51,600 --> 00:55:55,300
We want to now start creating these, these three things, right?

935
00:55:57,300 --> 00:55:59,300
So the first one is pretty easy, right?

936
00:55:59,300 --> 00:56:03,700
What we would do here is we would say something like get Arena by

937
00:56:03,700 --> 00:56:05,700
pointer, you know what I mean?

938
00:56:06,300 --> 00:56:08,000
And we would pass here.

939
00:56:08,000 --> 00:56:14,400
Well, all of these are going to use effectively, some kind of a cast

940
00:56:14,400 --> 00:56:16,200
down of the actual event.

941
00:56:16,500 --> 00:56:18,900
So in here, where we actually

942
00:56:19,100 --> 00:56:26,300
Get the event in question which I assume is this right here, we're

943
00:56:26,300 --> 00:56:30,900
going to want to do something where we say, like, hey, debugging

944
00:56:30,900 --> 00:56:34,800
memory up and maybe it should have been called memory event.

945
00:56:36,900 --> 00:56:37,800
But who knows?

946
00:56:38,500 --> 00:56:42,200
I'm just going to say look, give me just that part of this thing.

947
00:56:45,000 --> 00:56:45,500
Right?

948
00:56:45,700 --> 00:56:49,600
So we're just getting out the, the mop part of this.

949
00:56:50,500 --> 00:56:53,500
And then we're going to use that to figure out what's going on.

950
00:56:53,800 --> 00:56:56,800
So what I want to do here is I want to do like a debug get Arena by

951
00:56:56,800 --> 00:56:57,500
pointer.

952
00:56:57,500 --> 00:56:59,800
I want to pass the arena that

953
00:57:00,000 --> 00:57:01,000
Recorded.

954
00:57:01,100 --> 00:57:04,500
That should give me back one of these, right?

955
00:57:08,000 --> 00:57:10,500
And then I can go ahead and set its name.

956
00:57:15,100 --> 00:57:19,200
So that allows me to just record what Arenas are called for pretty

957
00:57:19,200 --> 00:57:20,100
printing basically.

958
00:57:21,100 --> 00:57:24,600
And so now what I need to do is I need to manage the actual allocation

959
00:57:24,600 --> 00:57:29,400
stack in there, so we can kind of see what actually what's actually

960
00:57:29,400 --> 00:57:31,700
available now in the future?

961
00:57:31,700 --> 00:57:37,900
What we probably want to do as we sort of get a little fancier here is

962
00:57:37,900 --> 00:57:39,700
and I'm going to put these two dudes in there.

963
00:57:50,400 --> 00:57:52,600
I should probably, you know I'll say this to use for later I'll

964
00:57:52,600 --> 00:57:54,500
explain a little bit later because I'll put them in the actual

965
00:57:54,500 --> 00:57:55,100
functions.

966
00:57:56,200 --> 00:57:58,200
But anyway, where we have

967
00:58:00,400 --> 00:58:01,500
And maybe I should make this.

968
00:58:03,500 --> 00:58:04,400
Do that too.

969
00:58:06,000 --> 00:58:07,100
Yeah, let's do that.

970
00:58:07,500 --> 00:58:10,400
So up here, we'll just have our calls and we'll just Funk out to them

971
00:58:10,400 --> 00:58:11,500
immediately, right?

972
00:58:11,500 --> 00:58:21,100
So, this will be Arena right, Arena set name, this will be Arena

973
00:58:22,100 --> 00:58:23,000
lock-free.

974
00:58:24,000 --> 00:58:25,900
This will be Arena.

975
00:58:29,200 --> 00:58:32,000
From Kate and this will be.

976
00:58:35,000 --> 00:58:35,700
Alakay.

977
00:58:37,700 --> 00:58:42,900
So each of these, I think what we want to do is just pass the debug

978
00:58:42,900 --> 00:58:46,400
event down and we'll take it from there.

979
00:58:50,100 --> 00:58:50,900
and so,

980
00:58:53,200 --> 00:58:58,000
I'm going to put this up in here and that way, you know, these things

981
00:58:58,000 --> 00:58:59,100
are just pulled out too.

982
00:59:02,900 --> 00:59:06,300
I do that because I think I might want to just I just want to kind of

983
00:59:06,300 --> 00:59:10,100
be able to see them as the for Ops and make them do what I want them

984
00:59:10,100 --> 00:59:10,400
to do.

985
00:59:21,600 --> 00:59:24,600
All right, so here's allocate.

986
00:59:24,900 --> 00:59:26,800
Here's block.

987
00:59:26,800 --> 00:59:30,400
Truncate and cures block free.

988
00:59:32,200 --> 00:59:36,500
These will want the up but the also want the event.

989
00:59:36,500 --> 00:59:38,700
That's why I passed the event itself.

990
00:59:41,000 --> 00:59:46,200
That's just necessary because the event has information like the name

991
00:59:46,200 --> 00:59:47,300
and stuff like that in it.

992
00:59:48,400 --> 00:59:51,200
So I'm going to go ahead and grab this in each case.

993
00:59:55,300 --> 00:59:58,200
And then I'm going to go ahead and do the actual work.

994
01:00:00,000 --> 01:00:00,300
Right.

995
01:00:00,600 --> 01:00:05,100
So in here, what we're going to go ahead and do is say that, all

996
01:00:05,100 --> 01:00:07,700
right, when we do an arena set name, right?

997
01:00:07,700 --> 01:00:08,800
We're going to get the arena.

998
01:00:08,800 --> 01:00:13,300
We're going to set the name to whatever the name says, it is in the

999
01:00:13,300 --> 01:00:14,400
rest of these, right?

1000
01:00:14,400 --> 01:00:16,100
We're going to need the same thing.

1001
01:00:17,800 --> 01:00:19,800
So this is kind of always going to happen.

1002
01:00:19,800 --> 01:00:23,000
Probably this is probably just, you know, the first two things of each

1003
01:00:23,000 --> 01:00:23,400
of these

1004
01:00:24,700 --> 01:00:25,300
Is that?

1005
01:00:26,800 --> 01:00:29,000
And but then each of us can do something a little bit different.

1006
01:00:29,000 --> 01:00:32,600
So when we do Arena block free in this case, now, we need to do is we

1007
01:00:32,600 --> 01:00:38,800
need to scan the list of blocks in the arena and we need to get rid of

1008
01:00:38,800 --> 01:00:40,200
the one that it asks us to.

1009
01:00:41,300 --> 01:00:44,500
Now at the moment we happen to know that block freeze will always go

1010
01:00:44,500 --> 01:00:45,300
in reverse order.

1011
01:00:45,600 --> 01:00:49,200
So we may be able to just do an assertion and just take the easy route

1012
01:00:49,200 --> 01:00:53,300
here and actually write something even dumber than that, which is to

1013
01:00:53,300 --> 01:00:56,000
say that when we look at the Block,

1014
01:00:56,100 --> 01:01:01,200
Pointer, we may be able to verify what it actually that that block

1015
01:01:01,200 --> 01:01:01,700
pointer.

1016
01:01:02,700 --> 01:01:03,800
Is the top one.

1017
01:01:04,500 --> 01:01:13,000
So I might just do an assert Arena, first block memory address.

1018
01:01:16,500 --> 01:01:23,300
Equals whatever this block address was.

1019
01:01:27,100 --> 01:01:28,000
Do we have?

1020
01:01:34,500 --> 01:01:35,200
Hold, please.

1021
01:01:35,200 --> 01:01:38,900
I want to look at what our conversion is.

1022
01:01:39,300 --> 01:01:40,400
I know we've got some

1023
01:01:47,600 --> 01:01:51,600
so it looks like we don't have a way of casting between these, so I'm

1024
01:01:51,600 --> 01:01:53,000
going to actually do this

1025
01:02:08,500 --> 01:02:12,600
Although actually that should probably not be necessary.

1026
01:02:17,200 --> 01:02:18,200
That should just work.

1027
01:02:19,800 --> 01:02:22,900
All right, so I'm going to do here.

1028
01:02:22,900 --> 01:02:28,000
I'm going to say I want to um em from this pointer, which is

1029
01:02:29,000 --> 01:02:33,700
The Block in question and it's going to assert that these are the same

1030
01:02:34,300 --> 01:02:36,900
and then I'm going to go ahead and remove the first one.

1031
01:02:37,400 --> 01:02:47,300
So I have the bug memory block or something like that.

1032
01:02:47,300 --> 01:02:48,300
The big arena block.

1033
01:02:50,500 --> 01:02:52,200
Why am I calling it an arena block?

1034
01:02:54,900 --> 01:02:55,300
I don't know.

1035
01:02:56,500 --> 01:02:57,000
Who knows?

1036
01:02:57,100 --> 01:02:59,800
We don't even call these Arenas but we sort of do home.

1037
01:03:00,000 --> 01:03:03,100
Mary is I guess, Hannah, who cares, anyway?

1038
01:03:03,400 --> 01:03:06,000
I'm gonna go ahead and get this free block out of here.

1039
01:03:08,400 --> 01:03:11,700
In fact, I could do this which is just to say that.

1040
01:03:13,200 --> 01:03:14,000
Let's assert that.

1041
01:03:14,000 --> 01:03:18,500
This just all works and then I'm going to say, all right, the arena

1042
01:03:18,500 --> 01:03:21,500
first block is going to be whatever the next block was.

1043
01:03:22,600 --> 01:03:26,700
And then we're just going to take this block and all of its

1044
01:03:26,700 --> 01:03:32,900
allocations and we're going to move them to the free store.

1045
01:03:33,700 --> 01:03:39,800
So we're going to take and have you know, in our main system here,

1046
01:03:39,800 --> 01:03:40,900
we're going to need.

1047
01:03:42,600 --> 01:03:44,100
Well, we're going to need a couple things, right?

1048
01:03:44,100 --> 01:03:45,200
We're going to need.

1049
01:03:47,200 --> 01:03:48,100
A hash here.

1050
01:03:51,300 --> 01:03:54,100
For our debugger Enos because we need to be able to look them up by

1051
01:03:54,100 --> 01:03:59,500
pointer, not sure where that should go but maybe it just goes here.

1052
01:04:03,700 --> 01:04:07,700
So in our Arenas we've got, you know, look up, that's too many for

1053
01:04:07,700 --> 01:04:08,000
this.

1054
01:04:08,000 --> 01:04:09,000
It doesn't even matter.

1055
01:04:09,000 --> 01:04:10,400
I don't even know that we need a hash.

1056
01:04:10,400 --> 01:04:11,700
We could just linearly search.

1057
01:04:11,700 --> 01:04:14,300
There's only going to be like 10 of them or something, right?

1058
01:04:15,900 --> 01:04:20,800
I mean, how many Arenas even are there but, you know, we've got Arenas

1059
01:04:20,800 --> 01:04:21,800
that we're looking up here.

1060
01:04:23,100 --> 01:04:24,800
And the Arenas are never going to get freed.

1061
01:04:25,200 --> 01:04:29,600
So we always remember every Arena that we've seen, I think, to be

1062
01:04:29,600 --> 01:04:31,100
fair, I guess we kind of

1063
01:04:34,000 --> 01:04:35,400
need to get rid of them though.

1064
01:04:35,500 --> 01:04:36,400
So I guess we

1065
01:04:40,500 --> 01:04:42,400
Yeah, so maybe I don't want to Hash them.

1066
01:04:42,700 --> 01:04:44,400
Maybe I just want this.

1067
01:04:50,300 --> 01:04:55,600
I think that might be fine and then we want blocks and allocations.

1068
01:05:10,700 --> 01:05:14,700
So that's I think all we really need their and so what I'm going to do

1069
01:05:14,700 --> 01:05:18,600
is just put it onto that list when we free the block.

1070
01:05:20,200 --> 01:05:25,100
And what I need to do here is when we actually free the last block, we

1071
01:05:25,100 --> 01:05:27,300
need to free the arena as well.

1072
01:05:27,300 --> 01:05:28,200
Does that make sense?

1073
01:05:29,400 --> 01:05:34,100
So we can do debug, get Arena by pointer because we do want that.

1074
01:05:35,200 --> 01:05:38,400
But we are going to just now, literally search that list instead,

1075
01:05:38,400 --> 01:05:41,200
because there aren't that many Arenas, and I guess I just think it's a

1076
01:05:41,200 --> 01:05:43,800
waste of time to do something more complicated for fetching them.

1077
01:05:46,100 --> 01:05:51,000
Yeah, super things like block truncate block.

1078
01:05:51,000 --> 01:05:53,300
Truncate just gets rid of allocations that are after it.

1079
01:05:53,300 --> 01:05:56,900
So what we're basically doing is moving things off of the the list and

1080
01:05:56,900 --> 01:05:59,800
into the into the free list.

1081
01:06:00,000 --> 01:06:04,200
Our particular block and then debugger and allocate will just be

1082
01:06:04,200 --> 01:06:06,700
putting things on to those blocks, right?

1083
01:06:07,300 --> 01:06:10,600
And if there's a new block, we actually use the new block, okay?

1084
01:06:10,600 --> 01:06:13,500
So let's just Implement all of those and then I think we're good to go

1085
01:06:13,500 --> 01:06:16,800
and then we can go work on, rendering them in some way that we can

1086
01:06:16,800 --> 01:06:17,500
inspect

1087
01:06:19,100 --> 01:06:21,800
So we're going to do here is say, alright, when we free a block

1088
01:06:21,800 --> 01:06:27,700
entirely, what we do is we take the first block and we assert that

1089
01:06:27,700 --> 01:06:30,200
that's got to be the one referring because we don't allow freaking out

1090
01:06:30,200 --> 01:06:32,200
from inside Arenas at the moment.

1091
01:06:32,900 --> 01:06:35,600
And so we're going to go ahead and Advance it to the next one.

1092
01:06:35,600 --> 01:06:39,200
And then we're going to insert this block onto our linked list.

1093
01:06:39,500 --> 01:06:42,400
So basically the debug States,

1094
01:06:44,800 --> 01:06:47,500
First free Block, right?

1095
01:06:47,500 --> 01:06:53,300
The the free Block itself is going to point to that thing.

1096
01:06:54,600 --> 01:06:58,000
And then it's going to point to the three blocks.

1097
01:06:58,000 --> 01:06:59,800
So we're just pushing that on, right?

1098
01:07:07,300 --> 01:07:11,200
So that's basically going to take it off of here, right?

1099
01:07:11,200 --> 01:07:12,100
It's going to remove it.

1100
01:07:12,100 --> 01:07:13,800
So in fact, I'll just note it for you.

1101
01:07:17,800 --> 01:07:18,800
We're adding it back.

1102
01:07:19,000 --> 01:07:21,600
So the only other thing we need to do here is have a while loop that

1103
01:07:21,600 --> 01:07:28,000
gets rid of all of the stuff that's actually on the, all of the

1104
01:07:28,000 --> 01:07:29,700
allocations that are actually on here.

1105
01:07:29,700 --> 01:07:33,000
Those need to go to the free list right now.

1106
01:07:33,000 --> 01:07:34,300
There's two ways we could do it.

1107
01:07:34,400 --> 01:07:38,400
One is we can do a while loop here and the other is, we could actually

1108
01:07:38,400 --> 01:07:41,500
keep a tail pointer and then just move the whole thing in one.

1109
01:07:41,500 --> 01:07:45,200
Go, I like tail pointers, call me crazy.

1110
01:07:45,200 --> 01:07:46,900
So I think I may just do it that way.

1111
01:07:49,400 --> 01:07:53,300
But some and so what we're going to do here is just say look, since we

1112
01:07:53,300 --> 01:07:57,200
know there's a tail pointer, we're good to go if the arena.

1113
01:07:57,400 --> 01:07:57,600
Oops?

1114
01:07:57,600 --> 01:08:00,300
Sorry if the free Block.

1115
01:08:04,900 --> 01:08:07,300
If that free Block, whatever the free Block is.

1116
01:08:09,400 --> 01:08:12,000
Happens to have any allocations on it.

1117
01:08:13,200 --> 01:08:17,500
Then I'm going to go ahead and move all of those allocations over to

1118
01:08:18,300 --> 01:08:20,500
the free list.

1119
01:08:21,300 --> 01:08:23,100
So to do that, it's pretty straightforward.

1120
01:08:23,100 --> 01:08:28,200
We just say that the free Block last allocation, whatever that one was

1121
01:08:28,500 --> 01:08:32,700
its next pointer is going to point to whatever the first free

1122
01:08:32,700 --> 01:08:34,399
allocation was, right?

1123
01:08:34,399 --> 01:08:36,100
So, we're just saying, Shane it.

1124
01:08:36,100 --> 01:08:38,200
So we have one big long list of free box.

1125
01:08:38,600 --> 01:08:44,200
And then the big debug State first free, allocation becomes whatever.

1126
01:08:44,700 --> 01:08:46,100
Our first application was

1127
01:08:47,100 --> 01:08:50,300
So now we have a big long list just chained up there, so that just

1128
01:08:50,300 --> 01:08:53,100
loves to move them all at the same time, right?

1129
01:08:54,700 --> 01:08:56,899
So that's pretty straightforward.

1130
01:09:07,700 --> 01:09:11,000
And again is can just be done in constant time if we do track a tail

1131
01:09:11,000 --> 01:09:14,000
pointer and since we're already in that cache line tracking the tail

1132
01:09:14,000 --> 01:09:15,399
pointer should be effectively free.

1133
01:09:15,600 --> 01:09:18,200
That's so I think it's a better trade off than spending through all

1134
01:09:18,200 --> 01:09:19,399
that memory for no reason.

1135
01:09:20,800 --> 01:09:25,200
So in here, we've got the set named function should just work.

1136
01:09:25,200 --> 01:09:28,600
We've got the debug block free that looks like everything that needs

1137
01:09:28,600 --> 01:09:29,000
to happen.

1138
01:09:29,000 --> 01:09:33,200
There, we've got the block truncate block truncate, just needs to move

1139
01:09:33,200 --> 01:09:35,100
things to the free list sequentially.

1140
01:09:36,800 --> 01:09:39,200
And so, I'm going to do the same thing.

1141
01:09:39,200 --> 01:09:40,800
In fact, I may just do this.

1142
01:09:52,500 --> 01:09:55,400
I'm think I'm just going to do that.

1143
01:10:06,000 --> 01:10:09,900
And that way in here, we can call this function, debug move to free

1144
01:10:09,900 --> 01:10:11,700
list with both of them.

1145
01:10:11,700 --> 01:10:16,800
So the first free allocation and the last reallocation

1146
01:10:22,100 --> 01:10:22,600
Sorry.

1147
01:10:24,800 --> 01:10:26,800
I'm at first allocation last location.

1148
01:10:27,500 --> 01:10:29,500
We can move all those to the free list this way.

1149
01:10:42,900 --> 01:10:44,100
And reuse that.

1150
01:10:49,400 --> 01:10:49,900
Right.

1151
01:10:51,200 --> 01:10:52,300
So I think all that's good.

1152
01:10:52,300 --> 01:10:54,900
We could also assert that the last pointer is bad because if you have

1153
01:10:54,900 --> 01:11:00,800
a first pointer, you know, you should have both or neither, right?

1154
01:11:00,800 --> 01:11:02,300
So we could just make sure that that's true.

1155
01:11:03,200 --> 01:11:05,600
So that allows us to move all these to the free list.

1156
01:11:05,900 --> 01:11:08,900
What we would do for truncate is basically the same thing.

1157
01:11:09,100 --> 01:11:13,400
We would just say, look, we're going to go through here and we're

1158
01:11:13,400 --> 01:11:15,600
going to look for all of the allocations.

1159
01:11:17,400 --> 01:11:23,500
That we would be precluded by this retraction in the size of the

1160
01:11:23,500 --> 01:11:24,100
block.

1161
01:11:24,500 --> 01:11:32,400
So for this for this Arenas first, you know, it's top block, we want

1162
01:11:32,400 --> 01:11:35,500
to I mean I guess we want to do the exact same thing we're doing here.

1163
01:11:38,000 --> 01:11:42,000
We want to say, take that top block assume that it's the correct

1164
01:11:42,000 --> 01:11:44,000
block, because we should only be truncating.

1165
01:11:44,000 --> 01:11:47,400
The final block of the Arena, the most recently allocated one at any

1166
01:11:47,400 --> 01:11:48,100
given time.

1167
01:11:49,000 --> 01:11:54,600
Then we want to do is just step through that block and see if we ever

1168
01:11:58,500 --> 01:11:59,800
We want to see.

1169
01:12:00,300 --> 01:12:03,800
How many of its allocations would be invalidated by the rewind that

1170
01:12:03,800 --> 01:12:05,600
has happened because of the truncation.

1171
01:12:06,600 --> 01:12:10,100
so, what we want to do is say, let's start with

1172
01:12:16,900 --> 01:12:19,300
In fact, we could do this.

1173
01:12:34,000 --> 01:12:34,800
So we want to do here.

1174
01:12:34,800 --> 01:12:38,100
Say alright, let's start with the first allocation.

1175
01:12:38,100 --> 01:12:43,200
Let's push this pointer all the way in fact.

1176
01:12:46,400 --> 01:12:48,800
What's called first valid that that makes more sense.

1177
01:12:48,900 --> 01:12:51,700
Okay, so let's take first valid.

1178
01:12:52,800 --> 01:12:57,100
And let's push that all the way to the first allocation in this block.

1179
01:12:57,400 --> 01:13:00,300
That will still remain after the rewind.

1180
01:13:00,700 --> 01:13:05,400
So what we want to do is say okay you know I guess just while first

1181
01:13:05,400 --> 01:13:11,400
valid if the first valid thing is correctly break otherwise we do

1182
01:13:11,400 --> 01:13:13,700
first valid equals first valid Max right.

1183
01:13:14,100 --> 01:13:17,700
So inside each of these memory blocks we know that we have

1184
01:13:19,500 --> 01:13:24,200
We know that we have an offset From the Block boundary and what we

1185
01:13:24,200 --> 01:13:29,200
want to do is see did we rewind past that allocation, right?

1186
01:13:29,600 --> 01:13:34,600
And so, if the offset From the Block is now higher than the size that

1187
01:13:34,600 --> 01:13:39,800
the block actually is, which you know what?

1188
01:13:39,800 --> 01:13:42,300
We didn't record.

1189
01:13:43,700 --> 01:13:45,800
And we need to.

1190
01:13:49,400 --> 01:13:51,000
So that's something we need to fix.

1191
01:13:51,600 --> 01:13:58,300
So in here where we have the interface, we need to fix that.

1192
01:14:03,500 --> 01:14:03,900
Yeah.

1193
01:14:05,500 --> 01:14:12,500
So in here, where we do the offset in Block, we need to record that so

1194
01:14:12,800 --> 01:14:15,100
that needs to actually be specified here.

1195
01:14:15,500 --> 01:14:23,400
So when we do that call, which is

1196
01:14:24,700 --> 01:14:25,100
Here.

1197
01:14:26,300 --> 01:14:31,100
So when we do a block free or the arena name, those are both fine

1198
01:14:31,400 --> 01:14:33,500
because they're storing information.

1199
01:14:33,500 --> 01:14:36,800
We can use to reconstruct what happened this one.

1200
01:14:37,200 --> 01:14:38,900
Well I'm so is the same with occasion.

1201
01:14:38,900 --> 01:14:40,100
This one does not.

1202
01:14:40,500 --> 01:14:45,500
We need to in addition here record one more piece of information which

1203
01:14:45,500 --> 01:14:47,200
is off of the block pointer.

1204
01:14:47,400 --> 01:14:52,300
We need to know what the used size is now, right?

1205
01:14:54,500 --> 01:14:59,300
So when we do the record truncate there, you have to make sure that

1206
01:14:59,300 --> 01:14:59,800
we're calling it.

1207
01:15:00,100 --> 01:15:02,000
The appropriate time.

1208
01:15:03,900 --> 01:15:07,400
So that would be right here.

1209
01:15:08,000 --> 01:15:08,500
Yeah.

1210
01:15:08,800 --> 01:15:09,900
So you can see me.

1211
01:15:09,900 --> 01:15:10,100
Yeah.

1212
01:15:10,100 --> 01:15:11,000
Doing it here.

1213
01:15:11,000 --> 01:15:13,600
This is where that needs to happen, right?

1214
01:15:15,000 --> 01:15:19,900
And so I think what we want to say is yeah keep this in the like

1215
01:15:19,900 --> 01:15:25,600
allocated size or whatever it is and and do that, right?

1216
01:15:28,200 --> 01:15:29,700
So I think that's where we're at.

1217
01:15:35,300 --> 01:15:35,700
Yeah.

1218
01:15:39,400 --> 01:15:39,800
Okay.

1219
01:15:48,600 --> 01:15:51,300
Okay, let's see here.

1220
01:15:51,300 --> 01:15:54,400
First reblock must, we must be using that for something else.

1221
01:15:55,900 --> 01:16:01,200
What does it say yes, this other kind of block here, so I guess we

1222
01:16:01,200 --> 01:16:03,300
need first free Arena block.

1223
01:16:09,600 --> 01:16:14,100
Okay, so let's see where we are at.

1224
01:16:14,900 --> 01:16:16,800
It looks like for some reason.

1225
01:16:16,800 --> 01:16:20,000
My mom is not a member, right?

1226
01:16:20,000 --> 01:16:24,600
I think we called it the actual name it is which is memory write

1227
01:16:24,600 --> 01:16:25,400
debug.

1228
01:16:28,800 --> 01:16:30,700
so, that's actually supposed to be that

1229
01:16:32,800 --> 01:16:35,600
I just forgot we named it consistent with the other things in that

1230
01:16:35,600 --> 01:16:38,300
list, even though we don't really need it to be.

1231
01:16:38,300 --> 01:16:39,200
We did anyway.

1232
01:16:42,500 --> 01:16:43,000
Okay.

1233
01:16:46,100 --> 01:16:46,600
Here we go.

1234
01:16:47,700 --> 01:16:49,600
So, going back to where we were at.

1235
01:16:49,700 --> 01:16:50,400
I want to finish up.

1236
01:16:50,400 --> 01:16:51,200
We were doing here.

1237
01:16:52,300 --> 01:16:56,200
So, when we actually go to use these things, like I said, this will

1238
01:16:56,200 --> 01:16:57,300
move it to the free list.

1239
01:16:57,300 --> 01:16:59,600
This has to be Arena.

1240
01:16:59,600 --> 01:17:04,200
Block like I said, because we already have something called block

1241
01:17:04,200 --> 01:17:06,700
there, but let's get back to truncation.

1242
01:17:06,700 --> 01:17:10,900
So in truncation, we start at the first link and we go, every time

1243
01:17:10,900 --> 01:17:14,500
we're going to do this, we want to see whether the offset From the

1244
01:17:14,500 --> 01:17:15,800
Block is

1245
01:17:15,900 --> 01:17:24,000
Higher than the or equal to I guess the the used the allocated size

1246
01:17:24,000 --> 01:17:25,400
value, right?

1247
01:17:26,700 --> 01:17:29,900
So if the offset in the block is higher than what the allocated sizes,

1248
01:17:29,900 --> 01:17:33,000
then we know that this thing is now no longer valid.

1249
01:17:33,600 --> 01:17:38,400
And so, I guess the, the way we would do it as this way, we stopped at

1250
01:17:38,400 --> 01:17:39,900
that point, right?

1251
01:17:40,100 --> 01:17:42,200
So we want to advance this to the place.

1252
01:17:42,200 --> 01:17:45,200
That's the first valid thing that will remain.

1253
01:17:45,800 --> 01:17:51,000
if the first valid just doesn't exist anymore, meaning if we rewound

1254
01:17:51,000 --> 01:17:52,400
all the way back,

1255
01:17:54,300 --> 01:17:57,500
Then we're moving the whole thing, so that's effectively going to do

1256
01:17:57,500 --> 01:17:58,700
this, right?

1257
01:18:00,500 --> 01:18:01,300
That makes sense.

1258
01:18:02,900 --> 01:18:04,000
Otherwise

1259
01:18:05,500 --> 01:18:07,600
we want to move a subset.

1260
01:18:07,900 --> 01:18:14,400
We want to move all the way to First valid and not any further, right?

1261
01:18:15,000 --> 01:18:20,200
So in order to do that, the problem is this is not a one passed last

1262
01:18:20,200 --> 01:18:21,400
kind of a scenario.

1263
01:18:21,400 --> 01:18:24,300
We actually to pass the last one we're actually moving.

1264
01:18:25,100 --> 01:18:29,500
What that means is we really sort of need the one prior to the one we

1265
01:18:29,500 --> 01:18:30,200
stopped on.

1266
01:18:35,200 --> 01:18:36,100
Something like this.

1267
01:18:36,800 --> 01:18:40,600
And so each time through here we sort of need to do that.

1268
01:18:41,100 --> 01:18:44,100
And that's the one we actually wanted to send down

1269
01:18:46,200 --> 01:18:46,800
Like so.

1270
01:18:48,900 --> 01:18:52,300
So I think in this case, also the interesting thing about that is that

1271
01:18:52,300 --> 01:18:53,700
means we don't have to do this anymore.

1272
01:18:53,700 --> 01:18:57,100
I think you can literally just do the if

1273
01:19:05,000 --> 01:19:05,900
If weave.

1274
01:19:08,200 --> 01:19:14,200
If we haven't Advanced meaning, if we didn't go anywhere, then we

1275
01:19:14,200 --> 01:19:18,200
don't want to create free, anything that really probably shouldn't

1276
01:19:18,200 --> 01:19:20,500
ever happen but just in case it does.

1277
01:19:22,200 --> 01:19:25,000
And then what we want to do is free everything else up to that point,

1278
01:19:25,100 --> 01:19:25,600
right?

1279
01:19:27,100 --> 01:19:28,200
So I think that's correct.

1280
01:19:28,300 --> 01:19:32,000
We'll see, we should still get this call.

1281
01:19:32,000 --> 01:19:35,000
So I don't think we need to free the Block in the case where

1282
01:19:35,000 --> 01:19:37,100
everything Gottfried I think we're okay.

1283
01:19:37,900 --> 01:19:39,800
But we do want to do in either cases.

1284
01:19:39,800 --> 01:19:42,700
If we update this, we need to change what the pointers actually.

1285
01:19:42,700 --> 01:19:43,400
Now are.

1286
01:19:44,100 --> 01:19:50,200
So the first the last allocation would still be valid sometimes but

1287
01:19:50,200 --> 01:19:54,600
the first allocation will always need to change in the case of last

1288
01:19:54,600 --> 01:19:55,400
allocation.

1289
01:19:55,600 --> 01:19:56,800
What we want to do there.

1290
01:19:57,000 --> 01:20:00,200
I guess is just see whether or not we freed everything.

1291
01:20:00,900 --> 01:20:03,800
So we're gonna have to do a little bit of an if there but for the

1292
01:20:03,800 --> 01:20:08,400
first allocation we know that first valid is the the correct thing

1293
01:20:08,400 --> 01:20:09,400
there, right?

1294
01:20:11,000 --> 01:20:14,000
And for the last allocation we just need to say if

1295
01:20:16,900 --> 01:20:19,000
We are freeing the entire list.

1296
01:20:19,300 --> 01:20:20,400
Another way to say this.

1297
01:20:20,400 --> 01:20:24,300
That might be clear, would be if the free Block last allocation equals

1298
01:20:24,300 --> 01:20:25,300
the last free.

1299
01:20:25,700 --> 01:20:28,900
Then that means we freed everything, so it's gone, right?

1300
01:20:30,200 --> 01:20:32,900
So that allows us to get rid of any allocations that have now been

1301
01:20:32,900 --> 01:20:33,700
rewound.

1302
01:20:33,700 --> 01:20:38,600
When we do our allocate, this is actually the easiest possible case in

1303
01:20:38,600 --> 01:20:45,500
this one we just need to create a block if there wasn't one and place

1304
01:20:45,500 --> 01:20:47,100
the memory in it, right?

1305
01:20:48,800 --> 01:20:52,500
So in this case, what we want to do is say, alright, this is really

1306
01:20:52,500 --> 01:20:56,800
the only place that we're allocating blocks or allocations, but we

1307
01:20:56,800 --> 01:20:59,800
need to do block

1308
01:21:01,700 --> 01:21:02,200
Haitian.

1309
01:21:06,400 --> 01:21:10,800
And so in this case, we need to do is say look at the top lock of the

1310
01:21:10,800 --> 01:21:11,400
Arena.

1311
01:21:11,400 --> 01:21:16,400
If the top lock of the Arena happens to have the particular

1312
01:21:16,400 --> 01:21:20,200
characteristic, we want then we use it, otherwise we create a new one,

1313
01:21:20,200 --> 01:21:20,600
right?

1314
01:21:21,200 --> 01:21:24,900
So I believe this should just look like this.

1315
01:21:30,100 --> 01:21:30,800
Like that.

1316
01:21:38,800 --> 01:21:41,700
And we have to check whether the block is valid here because the first

1317
01:21:41,700 --> 01:21:44,800
time you allocate something in arena, there will be no block at all.

1318
01:21:45,400 --> 01:21:48,800
And so we do need to say, look, let's look at that first block.

1319
01:21:49,600 --> 01:21:53,600
If we assume that, it's, if it's invalid, or it doesn't match what

1320
01:21:53,600 --> 01:21:55,600
we're trying to do, we make a new one, right?

1321
01:21:56,800 --> 01:22:00,400
And we could scan but you know we could assert if we want to later

1322
01:22:00,400 --> 01:22:03,800
that there isn't already blocked somewhere else with that address, but

1323
01:22:03,800 --> 01:22:05,600
that's sort of a separate check.

1324
01:22:06,300 --> 01:22:07,500
I don't know that we really need it.

1325
01:22:07,900 --> 01:22:11,800
So anyway, we're going to take the first block if we didn't get one

1326
01:22:11,800 --> 01:22:13,000
that we need to allocate one.

1327
01:22:13,000 --> 01:22:16,300
So then we're going to just say, all right, push struct.

1328
01:22:18,900 --> 01:22:26,500
Debug Arena block and that's going to come from the debug State you

1329
01:22:26,500 --> 01:22:28,000
big arena set.

1330
01:22:28,000 --> 01:22:29,000
That's things called.

1331
01:22:29,900 --> 01:22:30,200
Yeah.

1332
01:22:32,000 --> 01:22:33,600
So we're going to do that but

1333
01:22:39,600 --> 01:22:41,300
We can get it from the free list as well.

1334
01:22:46,800 --> 01:22:52,200
And so assuming that, you know, we assuming that we could

1335
01:22:58,400 --> 01:23:00,200
But assuming that we can't we just make a new one.

1336
01:23:00,700 --> 01:23:02,000
So we really don't ever.

1337
01:23:02,100 --> 01:23:05,200
We don't ever say, oh, we gotta stop retake with their fists of the

1338
01:23:05,200 --> 01:23:05,400
can.

1339
01:23:05,400 --> 01:23:09,300
Otherwise we make a new one in the D Block itself.

1340
01:23:09,600 --> 01:23:13,200
We don't really have to do anything other than add it to the list of

1341
01:23:13,200 --> 01:23:14,300
blocked for this Arena.

1342
01:23:14,700 --> 01:23:17,300
And then track with the allocation actually is, we know the first

1343
01:23:17,300 --> 01:23:18,300
allocation is 0.

1344
01:23:18,300 --> 01:23:21,700
We know the last allocation is 0 when we first create a block, we know

1345
01:23:21,700 --> 01:23:24,600
the memory address is just whatever the memory address is.

1346
01:23:27,200 --> 01:23:31,100
We already found it up here when we looked, we're looking to see which

1347
01:23:31,100 --> 01:23:35,100
one we were doing, so that should be a simple matter.

1348
01:23:36,800 --> 01:23:39,200
And so, the only other thing we need to do is just create that next

1349
01:23:39,200 --> 01:23:39,700
pointer.

1350
01:23:40,300 --> 01:23:44,800
The next pointer should be whatever would chain it onto the arena

1351
01:23:44,800 --> 01:23:45,300
itself.

1352
01:23:48,000 --> 01:23:52,300
And so that's the entirety of constructing that, you know, stable

1353
01:23:52,300 --> 01:23:57,300
stable state in memory, finally, we do the same thing for the

1354
01:23:57,300 --> 01:23:58,600
allocations themselves.

1355
01:23:58,600 --> 01:23:59,900
We know that there can't be

1356
01:24:00,000 --> 01:24:01,100
An existing application.

1357
01:24:01,100 --> 01:24:02,700
So, we always need a new one.

1358
01:24:03,300 --> 01:24:07,600
So what we're doing is we're saying like first free, allocation is

1359
01:24:07,600 --> 01:24:08,500
what we want.

1360
01:24:08,500 --> 01:24:12,400
If there wasn't one, we need to do some work, right?

1361
01:24:14,700 --> 01:24:19,600
So if there was one, then the next pointer, right is going to be

1362
01:24:21,300 --> 01:24:27,600
Used to sort of maintain the free list, but otherwise we need to

1363
01:24:27,600 --> 01:24:29,400
create a new one from Whole cloth.

1364
01:24:40,000 --> 01:24:44,000
So that's maintains now and finally, we just fill out the information

1365
01:24:44,000 --> 01:24:47,000
that goes in there for any given allocation.

1366
01:24:48,800 --> 01:24:53,800
Just this I guess filename in line number are probably the wrong

1367
01:24:53,800 --> 01:24:54,700
things to be tracking.

1368
01:24:54,700 --> 01:24:58,200
Now instead what we do is we track these good things, right?

1369
01:24:59,000 --> 01:25:04,600
So we just want to put the Grid in there and that comes down just as

1370
01:25:04,600 --> 01:25:05,400
the event.

1371
01:25:05,700 --> 01:25:06,600
Like, that's all.

1372
01:25:06,700 --> 01:25:10,900
I think that is that actually is and so we just need to record this

1373
01:25:10,900 --> 01:25:12,000
other information.

1374
01:25:12,000 --> 01:25:14,000
We've got the offset From the Block.

1375
01:25:14,600 --> 01:25:16,500
We've got the size, allocated

1376
01:25:17,500 --> 01:25:20,100
And we've got the size used unfortunately.

1377
01:25:20,100 --> 01:25:23,200
We can't really fill these out properly yet because we're not, we

1378
01:25:23,200 --> 01:25:24,500
don't send them all down.

1379
01:25:25,200 --> 01:25:30,200
And so for now they just have to be sort of from, did you know?

1380
01:25:45,100 --> 01:25:50,300
So you know, one of the things that we could do to is we, you know, we

1381
01:25:50,300 --> 01:25:53,000
maybe don't really need the size used anyway.

1382
01:25:54,100 --> 01:25:57,200
In fact, I think I'm going to delete that because what I realize is

1383
01:25:59,600 --> 01:26:04,300
That'll just show up when you look, you'll see the gaps so I guess we

1384
01:26:04,300 --> 01:26:08,400
don't really need that like when they get drawn you'll just see the

1385
01:26:08,400 --> 01:26:09,200
gaps in between them.

1386
01:26:09,200 --> 01:26:11,200
You're like well that's the memory we're wasting.

1387
01:26:11,300 --> 01:26:12,600
There it is, right.

1388
01:26:15,600 --> 01:26:17,700
That actually seems fine.

1389
01:26:18,800 --> 01:26:24,200
We may also want inside the block to store the total size.

1390
01:26:29,300 --> 01:26:31,200
So that we just know how big it is.

1391
01:26:31,500 --> 01:26:35,100
And so I think I may want to do this.

1392
01:26:40,000 --> 01:26:46,500
And that would come from the debug memory up in this case, has that

1393
01:26:46,500 --> 01:26:50,500
size allocated field and I think that's where I would want it.

1394
01:26:56,700 --> 01:26:59,800
so if you look up here, we can just place that

1395
01:27:00,100 --> 01:27:05,400
To, you know, these two things are capable of recording that for us

1396
01:27:05,400 --> 01:27:06,000
actually.

1397
01:27:08,300 --> 01:27:12,700
So I think if we just went down to the place where we actually do the

1398
01:27:17,500 --> 01:27:19,100
oh wait, no, I take it back.

1399
01:27:19,200 --> 01:27:23,900
We don't know that because we don't ever actually record a block

1400
01:27:23,900 --> 01:27:26,200
allocation, as its own step.

1401
01:27:28,500 --> 01:27:30,200
Maybe we should.

1402
01:27:33,200 --> 01:27:37,700
I think maybe we should because since we know when blocks are

1403
01:27:37,700 --> 01:27:41,100
allocated, we should probably record it.

1404
01:27:50,600 --> 01:27:53,000
Because it would literally just look like this.

1405
01:28:15,700 --> 01:28:18,600
Used is not what we want here.

1406
01:28:18,600 --> 01:28:24,000
So, the platform memory block in this case,

1407
01:28:25,500 --> 01:28:25,800
Oops.

1408
01:28:30,200 --> 01:28:34,900
We actually want the total size here.

1409
01:28:36,200 --> 01:28:36,500
The

1410
01:28:39,700 --> 01:28:40,200
Hmm.

1411
01:28:44,600 --> 01:28:46,200
The memory itself.

1412
01:28:51,400 --> 01:28:54,700
Why that's not supposed to be used?

1413
01:28:55,000 --> 01:28:57,000
That's supposed to be total used.

1414
01:28:58,800 --> 01:28:59,700
Right.

1415
01:29:04,400 --> 01:29:06,400
So how did that fly?

1416
01:29:06,400 --> 01:29:08,000
Shouldn't we be getting an error on that?

1417
01:29:16,300 --> 01:29:19,200
I'm just going to assume that we would have been, so that should be

1418
01:29:19,200 --> 01:29:24,300
total used and this should be total size, right.

1419
01:29:25,700 --> 01:29:28,600
So, I'm just going to say that that would have been an error and

1420
01:29:28,600 --> 01:29:31,300
without actually looking because we got too much other stuff to bother

1421
01:29:31,300 --> 01:29:31,800
with right now.

1422
01:29:31,800 --> 01:29:37,700
But total use is not a member of platform memory block.

1423
01:29:39,300 --> 01:29:40,100
Isn't it though?

1424
01:29:40,400 --> 01:29:42,000
Oh, that's stats.

1425
01:29:42,300 --> 01:29:43,400
Okay, nevermind.

1426
01:29:43,400 --> 01:29:45,800
Sorry, I take it all back.

1427
01:29:53,100 --> 01:29:56,100
It is used in size, sorry everybody.

1428
01:29:56,700 --> 01:29:57,600
Sorry about that.

1429
01:30:01,600 --> 01:30:02,000
Okay.

1430
01:30:03,600 --> 01:30:04,500
Minor diversion.

1431
01:30:06,700 --> 01:30:08,300
All right, so moving along here.

1432
01:30:08,300 --> 01:30:12,900
So if I want to do that, then what that means is, when I do my

1433
01:30:12,900 --> 01:30:14,900
collation, of debug events in here.

1434
01:30:14,900 --> 01:30:17,100
I just have one more to worry about, right?

1435
01:30:17,100 --> 01:30:21,200
I just want to say Arena block allocate.

1436
01:30:23,100 --> 01:30:23,800
and,

1437
01:30:25,300 --> 01:30:26,300
I call it here.

1438
01:30:26,900 --> 01:30:31,500
That's really all that has to happen and then we move in here because

1439
01:30:31,500 --> 01:30:34,400
I had I guess I have that now block allocation there.

1440
01:30:34,800 --> 01:30:35,500
I need

1441
01:30:37,000 --> 01:30:37,900
This one too.

1442
01:30:39,700 --> 01:30:42,900
Make sure that it goes away when necessary, all I need to do is just

1443
01:30:42,900 --> 01:30:44,900
call this block allocation.

1444
01:30:45,700 --> 01:30:49,600
Anytime I actually produce one of these blocks and I believe that the

1445
01:30:49,600 --> 01:30:53,100
only time that that happens is inside here.

1446
01:30:53,100 --> 01:30:56,500
So when this occurs right, you can see me getting the new block right

1447
01:30:56,500 --> 01:30:57,100
here.

1448
01:30:57,500 --> 01:30:58,700
I should be able to just go.

1449
01:30:58,700 --> 01:30:59,500
All right.

1450
01:31:00,600 --> 01:31:01,800
Here's the arena.

1451
01:31:02,700 --> 01:31:06,700
Here's the current block, and we're done, right?

1452
01:31:07,300 --> 01:31:09,900
Because there's nowhere else that actually ever allocation blocks.

1453
01:31:10,000 --> 01:31:10,800
As far as I know,

1454
01:31:14,300 --> 01:31:17,300
It's completely isolated which is exactly what we want in is good.

1455
01:31:19,000 --> 01:31:21,700
So when I actually do that here and we have the allocate, all I'm

1456
01:31:21,700 --> 01:31:25,000
going to do is pull out the code that I was just doing implicitly

1457
01:31:25,000 --> 01:31:25,500
there.

1458
01:31:26,200 --> 01:31:28,500
So this part right here where we're sort of

1459
01:31:30,600 --> 01:31:32,800
Allocating that block at the.

1460
01:31:32,800 --> 01:31:38,500
Outset that right here we're going to just change this back to one of

1461
01:31:38,500 --> 01:31:39,200
those assertions.

1462
01:31:39,200 --> 01:31:40,200
Like it was before.

1463
01:31:40,700 --> 01:31:44,200
So this stuff will come up here and we will deal with that.

1464
01:31:44,200 --> 01:31:44,800
Right?

1465
01:31:45,700 --> 01:31:50,900
But we're going to change to just assuming the top block is accurate.

1466
01:31:51,200 --> 01:31:54,200
So in here, any time you push an allocation, we're like it better be

1467
01:31:54,200 --> 01:31:55,200
on the current block.

1468
01:31:55,300 --> 01:31:58,000
Otherwise something guys, think, and we need to fix the code.

1469
01:31:58,500 --> 01:32:00,300
The debug code is obviously like, you know,

1470
01:32:00,500 --> 01:32:01,200
Misbehaving.

1471
01:32:02,000 --> 01:32:06,500
So when you tell me to allocate a block, then what I can do is avoid

1472
01:32:06,500 --> 01:32:12,500
this sort of nonsense all together and just say, okay, we know we need

1473
01:32:12,500 --> 01:32:15,600
a new block so we're not sort of doing this kind of test anymore.

1474
01:32:16,700 --> 01:32:20,200
What we're doing instead is going directly, right?

1475
01:32:20,200 --> 01:32:24,000
We're going to say we know, we need to allocate a new block off of

1476
01:32:24,000 --> 01:32:24,700
this Arena.

1477
01:32:25,100 --> 01:32:28,700
I should probably put these in there though.

1478
01:32:30,600 --> 01:32:33,000
So you know we're going to get a new one assuming we did, we unchain

1479
01:32:33,000 --> 01:32:33,100
it?

1480
01:32:33,100 --> 01:32:36,100
If we didn't, we create a new one, then we need to fill out all of the

1481
01:32:36,100 --> 01:32:39,700
information on their this.

1482
01:32:42,100 --> 01:32:48,400
Has to go there but otherwise we just fill everything out.

1483
01:32:48,400 --> 01:32:50,500
Doesn't have any allocations to start with.

1484
01:32:50,800 --> 01:32:52,600
This is the address that actually has.

1485
01:32:52,800 --> 01:32:54,100
Here's how much space.

1486
01:32:54,400 --> 01:32:58,400
It got reserved for the block and then we change it together when we

1487
01:32:58,400 --> 01:32:59,700
go to the arena allocate.

1488
01:32:59,700 --> 01:32:59,800
Now,

1489
01:33:00,500 --> 01:33:04,000
We just say they did better be off of the main block, then we do the

1490
01:33:04,000 --> 01:33:07,400
same thing, get ourselves, something to use to record it.

1491
01:33:08,200 --> 01:33:12,000
And then we need to actually put it on to the block and question where

1492
01:33:12,000 --> 01:33:13,000
it's supposed to go.

1493
01:33:14,000 --> 01:33:16,300
And so to remember, to fill out all the rest of these, we just say,

1494
01:33:16,300 --> 01:33:20,500
okay, we've got the grid, we've got the awesome bucket size allocated.

1495
01:33:20,700 --> 01:33:24,400
The next pointer is always going to be zero because we're changing

1496
01:33:24,400 --> 01:33:27,300
these onto a linked list in the order in which they're actually

1497
01:33:27,300 --> 01:33:28,200
allocated.

1498
01:33:31,700 --> 01:33:33,600
Although we still want them in reverse order.

1499
01:33:33,600 --> 01:33:36,300
So no actually we're not, that's not true.

1500
01:33:37,700 --> 01:33:41,100
So the next pointer is because we want these to push on like a stack

1501
01:33:41,500 --> 01:33:44,600
so because we want the most recent allocation to be first.

1502
01:33:45,200 --> 01:33:47,800
So what we're going to say is all right, the next one is for whatever

1503
01:33:47,800 --> 01:33:52,100
block we ended up using its first allocation is going to be the next

1504
01:33:52,100 --> 01:33:52,700
one here.

1505
01:33:53,700 --> 01:33:55,500
And then the block first allocation

1506
01:33:57,900 --> 01:33:59,000
It's going to be.

1507
01:34:02,000 --> 01:34:03,400
The one we're on, right?

1508
01:34:04,200 --> 01:34:08,100
And now what we have to do because we decided we wanted to keep a next

1509
01:34:08,100 --> 01:34:10,900
pointer, is the next pointer has to get updated.

1510
01:34:11,000 --> 01:34:13,700
I've started a last pointer has to be updated as well.

1511
01:34:14,400 --> 01:34:17,300
And the way that we update that is the last allocation

1512
01:34:18,600 --> 01:34:23,900
always stays the same unless it's zero, right?

1513
01:34:23,900 --> 01:34:28,600
Because the first time we allocate something in the list, everything

1514
01:34:28,600 --> 01:34:31,500
else comes on before that thing, right?

1515
01:34:32,100 --> 01:34:37,000
And so that last pointer just stays pointing to the element of 22, no

1516
01:34:37,000 --> 01:34:38,400
matter how much stuff you put on it.

1517
01:34:39,000 --> 01:34:43,300
And so, the only thing we want to do here is say, look, if there was

1518
01:34:43,300 --> 01:34:48,300
no last pointer at all, then, we are also the last

1519
01:34:48,500 --> 01:34:49,800
Her right.

1520
01:34:50,000 --> 01:34:51,500
But otherwise we never touch it.

1521
01:34:51,800 --> 01:34:55,700
So that first allocation is the only thing we're updating each time.

1522
01:34:56,500 --> 01:34:57,600
We're pushing that backwards.

1523
01:34:57,800 --> 01:35:03,200
The next pointer is, you know, sort of going to the the allocation

1524
01:35:03,200 --> 01:35:07,500
that happened prior in time, if that makes sense, like it's the

1525
01:35:07,500 --> 01:35:10,600
previous allocation that happened or something,

1526
01:35:13,300 --> 01:35:15,600
All right, so we need to get Arena by pointer.

1527
01:35:18,900 --> 01:35:20,000
For one more collating.

1528
01:35:29,000 --> 01:35:30,800
I'm going to leave this out for now.

1529
01:35:34,200 --> 01:35:38,200
Like so, and I just want to take care of all of our compile errors

1530
01:35:38,900 --> 01:35:40,200
before we get to that.

1531
01:35:41,000 --> 01:35:43,500
So what is the problem here?

1532
01:35:43,500 --> 01:35:43,700
I don't know.

1533
01:35:43,700 --> 01:35:45,000
It's probably there, look at that in a second.

1534
01:35:45,100 --> 01:35:49,100
These all just kind of need the capacity bug state may, go ahead and

1535
01:35:49,100 --> 01:35:50,100
make sure that's happening.

1536
01:35:52,300 --> 01:35:55,500
and then we'll address it the second

1537
01:36:08,400 --> 01:36:13,000
Okay, this is actually event name so that's why that was wrong with

1538
01:36:13,000 --> 01:36:14,200
the opt itself.

1539
01:36:14,500 --> 01:36:16,100
It doesn't have the name.

1540
01:36:16,100 --> 01:36:20,700
It's in the outer debug structure, so let's see here.

1541
01:36:20,700 --> 01:36:24,500
This is just block memory address not free Block.

1542
01:36:26,700 --> 01:36:31,700
In fact, I don't know why free Block was ever used there.

1543
01:36:34,800 --> 01:36:36,500
We're not actually freeing the block.

1544
01:36:37,600 --> 01:36:38,200
Block.

1545
01:36:39,300 --> 01:36:41,000
Remains untouched actually.

1546
01:36:46,100 --> 01:36:48,600
This is off of the op, not the event.

1547
01:36:50,000 --> 01:36:54,700
In this case, this is the first block, not the first free Block.

1548
01:36:55,100 --> 01:36:57,700
Well, actually no, it is butts off of the debug State.

1549
01:36:58,700 --> 01:36:59,200
There we go.

1550
01:37:04,200 --> 01:37:04,900
Same here.

1551
01:37:08,900 --> 01:37:09,700
What else we got?

1552
01:37:12,600 --> 01:37:18,900
So, the debug Arena block first free black.

1553
01:37:18,900 --> 01:37:20,200
We made that mistake before.

1554
01:37:23,700 --> 01:37:24,400
Mina block.

1555
01:37:27,900 --> 01:37:28,500
and,

1556
01:37:32,800 --> 01:37:35,200
Just need an address of.

1557
01:37:39,900 --> 01:37:40,400
Sighs.

1558
01:37:40,400 --> 01:37:44,500
Allocated seems like that should just work.

1559
01:37:45,300 --> 01:37:49,800
What's the complaint for the?

1560
01:37:54,300 --> 01:37:55,900
Those with have a size allocated.

1561
01:37:56,800 --> 01:37:57,100
Oops.

1562
01:38:00,500 --> 01:38:01,300
But does this?

1563
01:38:03,900 --> 01:38:05,100
Allocated size.

1564
01:38:07,300 --> 01:38:08,000
All right.

1565
01:38:08,000 --> 01:38:08,900
Good consistent.

1566
01:38:08,900 --> 01:38:09,900
Naming their Casey.

1567
01:38:11,800 --> 01:38:17,400
Um, yeah, let's see what we got here.

1568
01:38:17,400 --> 01:38:22,500
So again, that's up to debug State, not the arena, this needs to

1569
01:38:22,500 --> 01:38:24,300
allocate here.

1570
01:38:27,100 --> 01:38:30,200
And this is don't tell me.

1571
01:38:34,300 --> 01:38:35,300
Allocated size.

1572
01:38:41,700 --> 01:38:47,500
so in this case, the allocates the offset from block

1573
01:38:52,400 --> 01:38:54,500
Let me go ahead and jump directly to that.

1574
01:38:54,700 --> 01:38:59,800
So in the debug memory up, we called that offset.

1575
01:39:00,100 --> 01:39:01,000
In Block.

1576
01:39:03,300 --> 01:39:05,300
Yeah, this is this is not a good naming day.

1577
01:39:05,300 --> 01:39:08,600
Wow, to is exact same thing and I didn't manage to call it.

1578
01:39:08,600 --> 01:39:10,600
The same thing always good.

1579
01:39:11,900 --> 01:39:14,800
So we've got Arena block allocate here.

1580
01:39:14,800 --> 01:39:16,700
Oops, Got Arena block allocate here.

1581
01:39:16,700 --> 01:39:17,900
We need to add that in.

1582
01:39:23,600 --> 01:39:28,700
I guess I'll do it like that and when we actually go into the debug

1583
01:39:28,700 --> 01:39:31,900
interface, we need to make sure we're passing that properly.

1584
01:39:31,900 --> 01:39:36,100
So we got the block allocation.

1585
01:39:36,100 --> 01:39:39,000
I'm going to move that down to the applications, both parts together.

1586
01:39:39,500 --> 01:39:42,500
This is going to be a block allocate.

1587
01:39:44,500 --> 01:39:45,100
So

1588
01:39:46,400 --> 01:39:48,200
And then, I think we're pretty close.

1589
01:39:54,300 --> 01:39:57,900
So in here, we've got Hoops in here, we've got debug Arena.

1590
01:40:00,300 --> 01:40:01,000
Results.

1591
01:40:03,400 --> 01:40:06,200
I guess I could just call it result.

1592
01:40:07,800 --> 01:40:09,300
I'm going to return the result.

1593
01:40:10,900 --> 01:40:14,100
What I want to do here is say find it for me.

1594
01:40:21,200 --> 01:40:23,100
By looping through everything.

1595
01:40:27,600 --> 01:40:31,700
In this case, like I said, I just decided it's not worth it to try to

1596
01:40:31,700 --> 01:40:34,000
accelerate these as probably just going to spend more time than it

1597
01:40:34,000 --> 01:40:37,200
actually saves because there's only going to be like 20 of these

1598
01:40:37,200 --> 01:40:38,000
things, right?

1599
01:40:38,300 --> 01:40:42,900
And so linear search, you know, you really don't want to start putting

1600
01:40:42,900 --> 01:40:45,000
in kinds of weird acceleration structures for things.

1601
01:40:45,000 --> 01:40:47,700
When there's not enough of them to act, like the amount of time.

1602
01:40:47,700 --> 01:40:51,100
You spend handling, those acceleration structures just ends up being

1603
01:40:51,100 --> 01:40:53,200
slower than if you just checked to begin with,

1604
01:40:55,100 --> 01:40:58,800
So in this keep occurring debugger Arena.

1605
01:40:58,800 --> 01:41:02,700
I'm just going to test to see if we found the one that we're actually

1606
01:41:02,700 --> 01:41:05,600
talking about here and go from there.

1607
01:41:05,600 --> 01:41:07,300
This doesn't need to be avoid.

1608
01:41:07,300 --> 01:41:08,700
I'm not sure why did that?

1609
01:41:08,700 --> 01:41:13,400
It could just be an actual point of the arena and I should note.

1610
01:41:20,000 --> 01:41:22,200
So I just want to make sure people know they're not that you shouldn't

1611
01:41:22,200 --> 01:41:23,100
be doing anything with it.

1612
01:41:23,100 --> 01:41:24,400
It's just there to let you know.

1613
01:41:25,100 --> 01:41:28,700
So maybe that, you know, maybe you would argue that, that should be

1614
01:41:28,700 --> 01:41:31,300
that way, just so people don't get the wrong idea.

1615
01:41:32,500 --> 01:41:37,500
So all I want to do here is say, look is the arena pointer the same as

1616
01:41:37,500 --> 01:41:39,600
the one that I'm that I'm asked to find.

1617
01:41:40,800 --> 01:41:45,700
If it is, then I'm going to say that that's done and off you go.

1618
01:41:46,200 --> 01:41:49,400
If we couldn't find it, then I need to allocate a new one.

1619
01:41:50,300 --> 01:41:52,300
So at that point I'm just going to say

1620
01:41:57,900 --> 01:41:59,800
Let's go ahead and create a new one.

1621
01:42:02,800 --> 01:42:04,000
Let's fill it out.

1622
01:42:17,500 --> 01:42:23,200
Although, you know, I could name it with the first person who used it.

1623
01:42:25,800 --> 01:42:26,400
I don't know that.

1624
01:42:26,400 --> 01:42:27,400
I want to do that though.

1625
01:42:30,500 --> 01:42:31,500
I don't want to do that.

1626
01:42:32,700 --> 01:42:34,400
And so then I think that's it.

1627
01:42:34,400 --> 01:42:36,500
So we're done now.

1628
01:42:36,800 --> 01:42:40,300
And now we have to actually get all this working, the debug state.

1629
01:42:43,700 --> 01:42:48,800
First Arena here, just needs to be updated to make sure this is all

1630
01:42:48,800 --> 01:42:49,800
changed together.

1631
01:42:50,600 --> 01:42:52,000
But other than that I think we're fine.

1632
01:42:54,300 --> 01:42:55,600
What else we got?

1633
01:42:57,300 --> 01:43:02,600
Okay, so now we just have to debug this, but it should now be

1634
01:43:02,600 --> 01:43:07,200
recording everything that happens in there.

1635
01:43:07,200 --> 01:43:11,300
And once we've debunked it, we should be good to go, right?

1636
01:43:12,300 --> 01:43:17,200
I would hope let me switch to debug mode so it makes it easier on us.

1637
01:43:17,200 --> 01:43:20,900
While we're bugging, we don't have to worry about any kinds of crazy

1638
01:43:20,900 --> 01:43:23,200
nonsense that the optimized for me.

1639
01:43:23,200 --> 01:43:23,600
I've done.

1640
01:43:25,400 --> 01:43:26,800
And we can see our errors better.

1641
01:43:28,100 --> 01:43:31,000
So off we go we're running now.

1642
01:43:31,200 --> 01:43:37,500
We're collating a frame and it looks like we're getting a Arena

1643
01:43:37,500 --> 01:43:41,700
allocate call on something that didn't have its block allocation at

1644
01:43:41,700 --> 01:43:43,100
the top, right?

1645
01:43:44,400 --> 01:43:47,300
And so we got to figure out why you know what happened.

1646
01:43:48,100 --> 01:43:51,400
And let's start by looking at the arena itself.

1647
01:43:52,000 --> 01:43:54,600
So looking at the arena you can

1648
01:43:54,700 --> 01:43:57,200
That it just didn't register a blackout cake call.

1649
01:43:58,100 --> 01:44:00,000
That's, that's the entirety of the reason.

1650
01:44:00,900 --> 01:44:04,100
And so that suggests to me that there's something wrong with the way

1651
01:44:04,100 --> 01:44:09,000
that we're actually calling block allocate because we shouldn't have

1652
01:44:09,000 --> 01:44:09,700
had that happen.

1653
01:44:09,700 --> 01:44:13,900
So when this occurs up here, it should have pushed that on there.

1654
01:44:15,400 --> 01:44:18,900
Specifically, this piece of code right here should have been called.

1655
01:44:19,100 --> 01:44:23,500
I'm going to go ahead and set a breakpoint there and see I just want

1656
01:44:23,500 --> 01:44:25,600
to see what happens right before that events.

1657
01:44:33,200 --> 01:44:36,900
So you can see that this is working properly for a little while, but

1658
01:44:36,900 --> 01:44:41,100
then it fails at a at some specific point, right?

1659
01:44:41,100 --> 01:44:46,600
So it's not that we never created the correct setup for an arena.

1660
01:44:47,000 --> 01:44:48,400
It's that at some point.

1661
01:44:48,400 --> 01:44:54,000
We did an incorrect somehow, this got got much with right.

1662
01:44:56,600 --> 01:44:59,800
So, let's take a quick look and see if that particular Arena was.

1663
01:45:00,000 --> 01:45:01,200
Implicated or not.

1664
01:45:02,000 --> 01:45:03,900
So I'm going to go ahead and do this.

1665
01:45:08,000 --> 01:45:15,100
So here's one Arena that we call the block, Al Catan, wish I could

1666
01:45:15,100 --> 01:45:16,500
cut, and paste this value.

1667
01:45:25,400 --> 01:45:29,000
And then we come down here, you can see, we're using the same Arena.

1668
01:45:30,800 --> 01:45:31,900
Come back up here.

1669
01:45:32,000 --> 01:45:32,800
Same Arena.

1670
01:45:34,000 --> 01:45:35,200
Different Arena now.

1671
01:45:45,300 --> 01:45:48,600
Although you know what actually am I being stupid?

1672
01:45:49,000 --> 01:45:50,100
Maybe?

1673
01:45:53,900 --> 01:45:59,900
Maybe remedy being is better than Visual Studio in this way and I

1674
01:45:59,900 --> 01:46:00,800
should just use it.

1675
01:46:00,800 --> 01:46:02,000
Let's find out.

1676
01:46:03,500 --> 01:46:07,800
We come in here and we get this Arena, so I lock that value.

1677
01:46:11,500 --> 01:46:13,500
No, it did not work.

1678
01:46:20,100 --> 01:46:24,800
Although this one didn't update.

1679
01:46:34,100 --> 01:46:36,000
I don't understand that was weird.

1680
01:46:36,900 --> 01:46:37,800
Did it work or didn't?

1681
01:46:37,800 --> 01:46:38,900
It may pay?

1682
01:46:38,900 --> 01:46:39,700
Close attention.

1683
01:46:40,100 --> 01:46:41,900
Be coming here, we've got 1.

1684
01:46:41,900 --> 01:46:42,100
V.

1685
01:46:42,100 --> 01:46:43,100
1 4 3 F.

1686
01:46:43,100 --> 01:46:44,900
1C 1D 0, right?

1687
01:46:45,800 --> 01:46:47,000
I lock it.

1688
01:46:48,400 --> 01:46:54,200
I run and that one updated, but this one didn't.

1689
01:46:56,500 --> 01:46:58,200
Oh that.

1690
01:46:58,800 --> 01:46:59,400
Okay.

1691
01:46:59,400 --> 01:47:01,600
So that probably locks.

1692
01:47:04,900 --> 01:47:09,100
That locks it to look at that stack location probably.

1693
01:47:10,100 --> 01:47:16,400
Is there any way in remedy to lock the current pointer like just this

1694
01:47:16,400 --> 01:47:17,000
thing?

1695
01:47:24,800 --> 01:47:25,600
I want to know.

1696
01:47:37,400 --> 01:47:38,400
I guess not.

1697
01:47:41,000 --> 01:47:44,700
Georgina out there today is he probably not, I think he's on vacation

1698
01:47:45,200 --> 01:47:45,500
actually.

1699
01:47:45,500 --> 01:47:46,800
I think he said he was on vacation.

1700
01:47:49,800 --> 01:47:56,200
so I feel like this would be a really good feature potentially, which

1701
01:47:56,200 --> 01:47:57,900
is like

1702
01:48:00,400 --> 01:48:03,400
And and maybe we can send it to George, send the recording to George

1703
01:48:03,400 --> 01:48:06,200
if someone can mark this for me.

1704
01:48:08,000 --> 01:48:11,300
What I want to be able to do is come through here and I want to say

1705
01:48:11,300 --> 01:48:16,400
like okay I hit this thing and Arena was this let me like and in fact

1706
01:48:16,400 --> 01:48:20,700
the best possible version would be looks like this and I like right

1707
01:48:20,700 --> 01:48:24,600
click or something and there's the menu which is like remembered this

1708
01:48:24,600 --> 01:48:31,400
like keep showing this and it would add effectively this, right?

1709
01:48:32,200 --> 01:48:33,800
it would just add like,

1710
01:48:41,300 --> 01:48:46,800
It would have that automatically so that when I run I still have this

1711
01:48:46,800 --> 01:48:49,300
one always right.

1712
01:48:49,400 --> 01:48:53,600
And when every time it changes I just right click and save it again.

1713
01:48:54,600 --> 01:48:57,000
So I've got them all, you know what I'm saying?

1714
01:48:58,400 --> 01:49:00,700
Like something that makes that really quick and painless.

1715
01:49:00,700 --> 01:49:05,800
So you can just do it anytime you want, or maybe you can even set up

1716
01:49:05,800 --> 01:49:08,500
things, like, save every time there's a new one of these, you know

1717
01:49:08,500 --> 01:49:09,100
what I mean?

1718
01:49:10,500 --> 01:49:13,500
Because that would be so handy, right?

1719
01:49:14,400 --> 01:49:15,100
Oops, I screwed up.

1720
01:49:15,100 --> 01:49:16,800
I think I'm supposed to type f8 there.

1721
01:49:17,100 --> 01:49:17,700
I did it wrong.

1722
01:49:17,700 --> 01:49:18,900
I copied this one.

1723
01:49:30,600 --> 01:49:31,900
all right, so

1724
01:49:38,800 --> 01:49:40,000
so, if we look at these,

1725
01:49:43,500 --> 01:49:46,300
These two properly have first blocks as we would expect.

1726
01:49:46,700 --> 01:49:48,900
I'm going to set a breakpoint in the block.

1727
01:49:48,900 --> 01:49:49,500
Clear.

1728
01:49:51,100 --> 01:49:51,500
As well.

1729
01:49:58,400 --> 01:49:59,500
That we should get a block.

1730
01:49:59,600 --> 01:50:01,600
Does who are we on now?

1731
01:50:01,600 --> 01:50:03,200
We're on 360.

1732
01:50:04,400 --> 01:50:05,200
That's fine.

1733
01:50:06,000 --> 01:50:06,700
C8.

1734
01:50:06,700 --> 01:50:09,400
So there's we just we're just great and plenty of different Arenas

1735
01:50:09,400 --> 01:50:09,700
here.

1736
01:50:19,800 --> 01:50:21,800
And we're allocating off the one we just did.

1737
01:50:32,900 --> 01:50:35,600
And so, it's actually.

1738
01:50:38,000 --> 01:50:41,100
That that one we never allocated.

1739
01:50:43,100 --> 01:50:46,200
So we never saw a block allocate call for that one.

1740
01:50:46,200 --> 01:50:46,700
Good way.

1741
01:50:47,500 --> 01:50:48,900
Let's verify that's the case.

1742
01:50:48,900 --> 01:50:52,600
So we get for that, we do and the fifth one screws up.

1743
01:50:55,400 --> 01:50:57,000
One, two.

1744
01:50:58,800 --> 01:50:59,800
34.

1745
01:51:00,000 --> 01:51:00,500
Five.

1746
01:51:00,500 --> 01:51:01,000
Six.

1747
01:51:01,100 --> 01:51:03,000
Seven, eight, nine.

1748
01:51:04,300 --> 01:51:04,800
10:00.

1749
01:51:06,500 --> 01:51:08,100
So that's five that were correct.

1750
01:51:11,400 --> 01:51:12,300
And six fails.

1751
01:51:20,100 --> 01:51:20,800
That one more time.

1752
01:51:25,900 --> 01:51:26,400
Okay.

1753
01:51:26,700 --> 01:51:30,700
So b0 twice, f8.

1754
01:51:32,400 --> 01:51:35,400
60 twice, C 8.

1755
01:51:38,600 --> 01:51:42,600
And it is 30 guy, we just never saw.

1756
01:51:44,200 --> 01:51:48,100
So, is there some way that an arena gets a block?

1757
01:51:48,100 --> 01:51:48,900
Allocated?

1758
01:51:48,900 --> 01:51:52,300
That wouldn't go through the path that I'm talking about?

1759
01:51:53,300 --> 01:51:53,900
Right.

1760
01:52:11,800 --> 01:52:16,700
so, in order to do that, you would need to have

1761
01:52:18,200 --> 01:52:19,500
Gotten here.

1762
01:52:22,500 --> 01:52:25,000
Well, okay, so here's a question.

1763
01:52:25,000 --> 01:52:26,800
What if you allocated zero?

1764
01:52:28,700 --> 01:52:30,600
Maybe I just need to special case that.

1765
01:52:34,600 --> 01:52:36,000
Did it allocate 0?

1766
01:52:39,400 --> 01:52:40,900
So, here's the event.

1767
01:52:48,000 --> 01:52:48,500
Right.

1768
01:52:49,000 --> 01:52:50,800
Who is the person involved here?

1769
01:52:51,100 --> 01:52:54,600
It's handmade win32 at 1298.

1770
01:52:59,700 --> 01:53:02,600
hmm, I wonder if this is because

1771
01:53:04,800 --> 01:53:05,700
this is a

1772
01:53:06,900 --> 01:53:09,900
win32 layer problem.

1773
01:53:11,700 --> 01:53:12,900
Who is doing that?

1774
01:53:15,800 --> 01:53:17,100
1298.

1775
01:53:22,600 --> 01:53:25,800
So it's the file group memory in particular.

1776
01:53:50,500 --> 01:53:51,600
When does that?

1777
01:53:54,500 --> 01:53:56,400
Well, I guess it would be fine, right?

1778
01:53:56,400 --> 01:53:59,400
I mean it's just created as a zero doubt thing.

1779
01:54:01,000 --> 01:54:02,000
and,

1780
01:54:03,100 --> 01:54:06,500
In theory, when it first enters that push struct.

1781
01:54:10,100 --> 01:54:12,800
It should just allocate a block.

1782
01:54:16,000 --> 01:54:16,600
Right.

1783
01:54:20,900 --> 01:54:25,300
so, I'm not sure why we would be seeing the allocation prior,

1784
01:54:35,800 --> 01:54:38,500
I'm just not sure why we be seeing the application prior to when it

1785
01:54:38,500 --> 01:54:39,400
was actually

1786
01:54:41,400 --> 01:54:44,100
Or why we wouldn't see the block allocation prior to, when the

1787
01:54:44,100 --> 01:54:48,400
allocation is used, the fact that it's the wintry to makes me worry.

1788
01:54:48,400 --> 01:54:51,800
That this is because these are two different modules recording events.

1789
01:54:52,800 --> 01:54:54,700
And so, are they doing?

1790
01:54:54,800 --> 01:54:57,600
Is there some kind of out of order problem that happens there?

1791
01:54:57,600 --> 01:55:00,000
I don't see why there would be though.

1792
01:55:05,800 --> 01:55:11,200
So, I don't know, these should happen in the same order.

1793
01:55:11,200 --> 01:55:15,100
So, what I'm going to do is, I'm going to take a look at push size and

1794
01:55:15,100 --> 01:55:19,400
I'm going to see stack wise when does this stuff happen?

1795
01:55:20,200 --> 01:55:24,400
So here's a push sighs, it's happening on.

1796
01:55:27,200 --> 01:55:29,300
Probably the game, right?

1797
01:55:32,400 --> 01:55:32,700
Don't know.

1798
01:55:32,700 --> 01:55:33,100
It's here.

1799
01:55:51,400 --> 01:55:53,100
So, it's doing a bootstrap.

1800
01:55:55,200 --> 01:55:58,500
It's actually the very first thing that it does right for the getting

1801
01:55:58,500 --> 01:55:59,400
the file types.

1802
01:56:30,600 --> 01:56:33,400
I suppose another way to do that, with just be to go like this.

1803
01:56:36,300 --> 01:56:37,600
Access violation.

1804
01:56:39,300 --> 01:56:39,700
What?

1805
01:56:48,500 --> 01:56:49,200
I miss something.

1806
01:56:49,200 --> 01:56:51,000
How did that caused an access violation?

1807
01:56:54,900 --> 01:56:57,900
Because that us again, I'm just concerned that has something to do

1808
01:56:57,900 --> 01:56:58,400
with something.

1809
01:56:58,400 --> 01:56:59,600
We don't really remember.

1810
01:57:00,100 --> 01:57:01,600
How those two are partitioned.

1811
01:57:16,300 --> 01:57:17,400
Alright, let's take a look.

1812
01:57:19,800 --> 01:57:20,900
So, there's the arena.

1813
01:57:24,700 --> 01:57:29,500
Yes, I mean that's just clearly somehow it skipped right over this.

1814
01:57:33,700 --> 01:57:36,600
Hit it just never called it right.

1815
01:57:43,500 --> 01:57:46,800
So why did that happen?

1816
01:57:47,700 --> 01:57:49,700
Why didn't it call?

1817
01:57:56,900 --> 01:57:58,000
Let's try and set it to this.

1818
01:57:58,000 --> 01:57:59,200
Just make sure that happens again.

1819
01:57:59,900 --> 01:58:04,400
So first time through we record a block allocation on Arena, it's like

1820
01:58:04,400 --> 01:58:06,300
he ate right.

1821
01:58:06,900 --> 01:58:13,400
Then we allocate on E8, then we switch to 40 and we never saw 40 never

1822
01:58:13,400 --> 01:58:15,500
hit here, right?

1823
01:58:16,600 --> 01:58:19,000
So, how is that possible?

1824
01:58:19,600 --> 01:58:22,100
Like how is this able to?

1825
01:58:23,600 --> 01:58:26,200
with 325 group memory now is like a

1826
01:58:30,500 --> 01:58:32,300
Oh no.

1827
01:58:34,100 --> 01:58:39,200
Hmm, the plot thickens.

1828
01:58:39,200 --> 01:58:40,300
Doesn't it?

1829
01:58:43,100 --> 01:58:48,800
Oh this, this is Saucy, indeed.

1830
01:58:50,100 --> 01:58:52,400
So, do you guys see what happened there?

1831
01:58:53,100 --> 01:58:57,400
The problem is that the memory arena is actually just a thing.

1832
01:58:57,400 --> 01:58:58,600
You can move around.

1833
01:58:58,600 --> 01:58:59,400
It doesn't.

1834
01:58:59,400 --> 01:59:01,700
All that matters is that this chain

1835
01:59:02,900 --> 01:59:04,400
Is correct.

1836
01:59:05,000 --> 01:59:10,300
And so, when you do a bootstrap, you use a different Arena.

1837
01:59:10,300 --> 01:59:15,900
It's temporary for the initial allocation.

1838
01:59:17,600 --> 01:59:23,300
And then it relocates itself to inside the place it allocated.

1839
01:59:26,600 --> 01:59:31,400
So, while we don't, while we can still track the memory, just fine.

1840
01:59:34,000 --> 01:59:38,500
We wouldn't have any way of naming, the Arena's the way that we wanted

1841
01:59:38,500 --> 01:59:39,000
to.

1842
01:59:45,300 --> 01:59:50,400
Because of the ability you have to do that sort of squirrelly little

1843
01:59:51,000 --> 01:59:51,700
maneuver.

1844
02:00:03,200 --> 02:00:08,900
so, I really don't know what else we could do here other than

1845
02:00:11,100 --> 02:00:15,100
When you first make a memory Arena, we mark it.

1846
02:00:20,200 --> 02:00:23,700
I think that's the only thing we'll really be able to do.

1847
02:00:40,100 --> 02:00:42,600
I mean, I really just can't think of any other way to do it.

1848
02:00:42,600 --> 02:00:46,500
We would need to put something in here effectively, right?

1849
02:00:49,300 --> 02:00:55,500
We're inside the memory Arena, we add a debug tag that only exists at

1850
02:00:55,500 --> 02:00:56,800
debug time, right?

1851
02:00:57,900 --> 02:01:05,300
And we could work around this specific problem by because bootstrap

1852
02:01:05,300 --> 02:01:09,300
Arena happens to know that you moved the arena.

1853
02:01:09,700 --> 02:01:13,700
We could simply add a debug call that says the arena moved.

1854
02:01:14,000 --> 02:01:19,000
But the problem is, I don't know that like anyone could still do that

1855
02:01:19,000 --> 02:01:22,200
on their own, like anyone can still do this.

1856
02:01:26,400 --> 02:01:28,200
On their own this copy.

1857
02:01:29,300 --> 02:01:36,100
And so we would I mean we could just enforce it by discipline and say

1858
02:01:36,100 --> 02:01:40,400
don't do that or make this call when you do, right?

1859
02:01:44,500 --> 02:01:46,300
And I guess that's fine.

1860
02:01:48,600 --> 02:01:52,100
That's the only other way I can think to do it.

1861
02:01:52,100 --> 02:01:54,800
In other words, you would do, you would have to do this.

1862
02:02:25,800 --> 02:02:26,600
You know, I'm saying to you.

1863
02:02:36,000 --> 02:02:40,600
So effectively you would not really be allowed to copy an arena

1864
02:02:40,600 --> 02:02:41,200
manually.

1865
02:02:41,200 --> 02:02:44,700
You'd have to copy it yourself, which I hate that kind of crap.

1866
02:02:45,300 --> 02:02:52,300
So I don't love this but maybe it's the best compromise.

1867
02:02:57,900 --> 02:02:59,800
because the only other thing I can think of is,

1868
02:03:00,000 --> 02:03:01,100
Is you have to mark them?

1869
02:03:02,200 --> 02:03:03,300
It's not where that goes.

1870
02:03:06,300 --> 02:03:06,600
Right.

1871
02:03:06,600 --> 02:03:08,800
Like I just don't know.

1872
02:03:12,800 --> 02:03:17,200
I don't know how I would track it and so if we want to be able to name

1873
02:03:17,200 --> 02:03:21,100
them, that's the way we would have to do it.

1874
02:03:32,700 --> 02:03:33,700
Let me think.

1875
02:03:35,300 --> 02:03:36,500
Is that really true?

1876
02:03:38,000 --> 02:03:38,500
Did I just?

1877
02:03:40,900 --> 02:03:43,000
Did I just say something stupid?

1878
02:03:51,700 --> 02:03:52,100
No.

1879
02:03:54,900 --> 02:03:56,300
I am being stupid.

1880
02:03:56,900 --> 02:04:00,300
I think I can actually pull this off without that.

1881
02:04:04,500 --> 02:04:05,200
And I'm going to try.

1882
02:04:08,400 --> 02:04:12,300
I'm going to argue that if we just let this be the way it was before,

1883
02:04:12,700 --> 02:04:16,100
without a move Arena call, there is a way we can do it and we just

1884
02:04:16,100 --> 02:04:18,000
have to change our thinking a little bit

1885
02:04:18,800 --> 02:04:19,400
right.

1886
02:04:21,400 --> 02:04:22,000
so,

1887
02:04:24,200 --> 02:04:25,700
Inside the debug system.

1888
02:04:26,100 --> 02:04:28,900
We're looking at marinas by pointer, right?

1889
02:04:30,500 --> 02:04:36,300
But what we know is that a rinas are just strings of blocks.

1890
02:04:37,100 --> 02:04:43,300
So if instead we just did this, oops,

1891
02:04:51,400 --> 02:04:52,400
and said,

1892
02:04:53,700 --> 02:04:57,400
Arena's are just a name String of blocks.

1893
02:04:59,800 --> 02:05:06,900
In theory, I think that would always work.

1894
02:05:08,100 --> 02:05:16,500
Meaning, when we go to get an arena, if we just knew what the top

1895
02:05:16,500 --> 02:05:19,300
block pointer was at the time,

1896
02:05:21,500 --> 02:05:27,600
That should be sufficient for us to maintain the chain.

1897
02:05:29,300 --> 02:05:33,600
The problem of course is that the blocks themselves were it requires

1898
02:05:33,600 --> 02:05:38,900
us to record what those blocks actually are.

1899
02:05:40,000 --> 02:05:41,600
Which in some cases is Trivial.

1900
02:05:41,600 --> 02:05:43,300
In this case, it's just works.

1901
02:05:45,300 --> 02:05:47,100
In this case, it just works.

1902
02:05:47,900 --> 02:05:49,700
In this case, it just works.

1903
02:05:51,300 --> 02:05:53,000
And in this case, it just works.

1904
02:05:53,500 --> 02:05:57,000
The only one that's complicated is this one?

1905
02:05:57,600 --> 02:05:59,800
And so when we allocate a block,

1906
02:06:00,200 --> 02:06:04,400
We just have to pass the old block that we were using.

1907
02:06:07,500 --> 02:06:08,600
You with me on this.

1908
02:06:10,800 --> 02:06:13,100
This is some seriously nutso stuff.

1909
02:06:13,900 --> 02:06:15,800
So if we were to say

1910
02:06:24,300 --> 02:06:24,900
That.

1911
02:06:26,400 --> 02:06:26,900
Or.

1912
02:06:29,200 --> 02:06:29,800
That.

1913
02:06:32,500 --> 02:06:33,800
I think it works.

1914
02:06:35,200 --> 02:06:38,000
And then you always look it up by this block.

1915
02:06:39,400 --> 02:06:40,200
so,

1916
02:06:42,300 --> 02:06:44,900
when we do debug get Arena.

1917
02:06:48,300 --> 02:06:49,800
By look up block.

1918
02:06:51,600 --> 02:06:54,100
We're just always going to do this here.

1919
02:07:03,400 --> 02:07:08,600
And I'm going to argue that that will actually work because as long as

1920
02:07:08,600 --> 02:07:12,100
we always pass, which one would have needed for that.

1921
02:07:16,100 --> 02:07:20,100
I think you can just maintain chains without ever actually thinking

1922
02:07:20,100 --> 02:07:21,400
about an arena at all.

1923
02:07:21,800 --> 02:07:24,600
And then you just need to know which chain you're talking about, which

1924
02:07:24,600 --> 02:07:27,600
is always correctly identifiable by whatever the top block, was at the

1925
02:07:27,600 --> 02:07:29,100
time, right?

1926
02:07:29,700 --> 02:07:32,200
Because that's just how the arena is working itself.

1927
02:07:34,300 --> 02:07:37,500
So I think if we do that, oops,

1928
02:07:41,200 --> 02:07:43,600
Then this whole thing just kind of works.

1929
02:07:48,100 --> 02:07:49,900
in here, we just say,

1930
02:07:51,200 --> 02:07:55,000
Whatever the first block is it should look at that.

1931
02:07:55,000 --> 02:07:56,100
Look that right.

1932
02:07:59,400 --> 02:08:01,700
And I think that's all there is to it.

1933
02:08:17,400 --> 02:08:19,200
Oh, but it's not first block.

1934
02:08:21,000 --> 02:08:21,600
It's that.

1935
02:08:28,000 --> 02:08:28,200
Right.

1936
02:08:30,400 --> 02:08:31,800
I think that's correct.

1937
02:08:32,100 --> 02:08:38,000
And so then what would happen is whenever the final block got removed

1938
02:08:44,300 --> 02:08:45,900
At that point.

1939
02:08:50,000 --> 02:08:52,200
You would have to record.

1940
02:08:53,900 --> 02:08:55,800
That the arena went away.

1941
02:08:57,900 --> 02:08:58,800
Entirely.

1942
02:09:01,800 --> 02:09:02,600
Right.

1943
02:09:07,900 --> 02:09:10,400
I think that's the only thing that becomes sort of complicated.

1944
02:09:10,600 --> 02:09:14,200
So when we're doing that, look up, you have to go back and say

1945
02:09:19,200 --> 02:09:22,400
yeah, you have to actually be able to clean those out, which I think

1946
02:09:22,400 --> 02:09:24,400
we would have had to do anyway now the think about it.

1947
02:09:24,400 --> 02:09:26,400
So that's actually no different than before.

1948
02:09:27,100 --> 02:09:32,300
So I think we just have to track that fact that whenever you clear an

1949
02:09:32,300 --> 02:09:37,300
arena down to zero, we have to remove it from the list.

1950
02:09:37,800 --> 02:09:44,800
So in the case, where you do a block free on the last block, right?

1951
02:09:52,800 --> 02:09:57,800
this case right here, you have to do a thing that basically says if

1952
02:09:57,800 --> 02:10:01,900
the arena first block

1953
02:10:08,500 --> 02:10:09,600
Is nothing.

1954
02:10:15,000 --> 02:10:17,100
Then this has to be scheduled for removal.

1955
02:10:26,900 --> 02:10:31,400
And so I think that's okay and we can schedule when we want those

1956
02:10:31,400 --> 02:10:36,200
Arenas to be cleaned up so that we don't have to remove ones.

1957
02:10:39,800 --> 02:10:43,900
Until later if we want to for at the moment I guess I would say we

1958
02:10:43,900 --> 02:10:51,300
probably can just remove them now but in the future if you want them

1959
02:10:51,300 --> 02:10:53,100
to persist so we can inspect them.

1960
02:10:53,200 --> 02:10:56,500
We may want to do something like just marking blocks as being free,

1961
02:10:57,500 --> 02:11:01,000
you know, and cleaning these out as sort of a separate path.

1962
02:11:01,000 --> 02:11:04,700
So we can watch what happened for now.

1963
02:11:04,700 --> 02:11:04,900
I guess.

1964
02:11:04,900 --> 02:11:07,700
I'll say look, we just remove this Arena, right?

1965
02:11:17,800 --> 02:11:18,800
And I think that's fine.

1966
02:11:19,800 --> 02:11:23,100
All right, so this is pretty pretty tricky, right?

1967
02:11:23,700 --> 02:11:26,900
It's pretty nuts.

1968
02:11:28,300 --> 02:11:32,100
When you think about it, but I guess I think that all just works and

1969
02:11:32,100 --> 02:11:37,200
the only thing that you need to do is normally, yeah, you would just

1970
02:11:37,200 --> 02:11:41,700
pass the same block there, but in the case of one of them, you have to

1971
02:11:41,700 --> 02:11:43,100
do a little bit extra.

1972
02:11:43,100 --> 02:11:47,600
So in all of these cases where you're sitting the array, this thing,

1973
02:11:47,600 --> 02:11:48,500
it's actually Arena.

1974
02:11:48,500 --> 02:11:49,700
Look up block now.

1975
02:11:50,500 --> 02:11:54,300
And what's going to happen is, it's just whatever current block is,

1976
02:11:54,400 --> 02:11:55,000
right.

1977
02:11:56,300 --> 02:11:57,200
I have to get set.

1978
02:11:58,300 --> 02:11:59,800
So in here, where we do

1979
02:12:00,000 --> 02:12:04,700
Arena set name, or any of this stuff really Arena set name.

1980
02:12:04,700 --> 02:12:08,300
I think could technically occur in a case where there wasn't top block

1981
02:12:09,100 --> 02:12:09,700
at all.

1982
02:12:10,600 --> 02:12:14,100
And so I feel like that one makes it a little bit harder.

1983
02:12:17,200 --> 02:12:18,100
To work with.

1984
02:12:20,200 --> 02:12:23,800
So, in this case, we would, I think, have to say that if we didn't

1985
02:12:23,800 --> 02:12:28,400
have a top block, we couldn't name this Arena yet, so it probably

1986
02:12:28,400 --> 02:12:29,800
looks something like

1987
02:12:34,300 --> 02:12:35,900
It probably looks something like this.

1988
02:12:44,600 --> 02:12:48,600
You know, I'm saying, but otherwise, yeah, I think it's always just

1989
02:12:48,600 --> 02:12:49,100
this.

1990
02:12:52,400 --> 02:12:52,800
Oops.

1991
02:12:57,600 --> 02:13:00,900
And so looking at these in a little more detail, I think we can then

1992
02:13:00,900 --> 02:13:06,000
go ahead and be a little bit more specific about how these things are

1993
02:13:06,000 --> 02:13:06,500
working.

1994
02:13:07,400 --> 02:13:12,100
If we come in here, we can sort of see that like the record.

1995
02:13:14,000 --> 02:13:16,600
This is just passing the arena current block anyway.

1996
02:13:17,100 --> 02:13:23,100
So I think we could just say, all right, on record allocation, we're

1997
02:13:23,100 --> 02:13:24,700
really just doing

1998
02:13:27,300 --> 02:13:30,300
We're just passing the same block twice, right?

1999
02:13:30,800 --> 02:13:34,600
And so I wonder if maybe it makes more sense to say in that case we

2000
02:13:34,600 --> 02:13:38,500
just passed this so it's just blbl.

2001
02:13:41,600 --> 02:13:42,100
Right.

2002
02:13:44,700 --> 02:13:46,600
For truncation.

2003
02:13:49,800 --> 02:13:50,800
Let me grab that.

2004
02:13:58,700 --> 02:14:00,800
For truncation, it's the same thing.

2005
02:14:00,800 --> 02:14:06,800
So I think again that's not changing which block is up there and

2006
02:14:06,800 --> 02:14:07,800
neither is this.

2007
02:14:08,400 --> 02:14:11,800
So I think these are all just this.

2008
02:14:24,900 --> 02:14:28,700
And you don't need that Arena anymore and you can sort of see where

2009
02:14:28,700 --> 02:14:29,400
I'm going with this.

2010
02:14:29,400 --> 02:14:33,400
Hopefully, this is again, pretty complicated, but I think it works.

2011
02:14:40,200 --> 02:14:42,300
So we can do the lookup book here.

2012
02:14:49,100 --> 02:14:52,600
Many are confused to this is the BL and so all that's good.

2013
02:14:52,600 --> 02:14:54,700
The only one we have to do here.

2014
02:14:54,800 --> 02:14:55,800
This is the weird one.

2015
02:14:55,800 --> 02:14:58,000
It's this requires a previous block.

2016
02:15:01,400 --> 02:15:05,000
so when we actually go to record a block allocation,

2017
02:15:07,100 --> 02:15:11,100
We need to know which one was when we actually did that black,

2018
02:15:11,100 --> 02:15:11,600
allocation.

2019
02:15:11,600 --> 02:15:15,200
So, when we do debug record block, allocation, we need to know what

2020
02:15:15,200 --> 02:15:19,600
the one was that was before us in order to do that.

2021
02:15:19,600 --> 02:15:23,700
I think what we want to do there is we need and in fact now I think

2022
02:15:23,700 --> 02:15:24,200
about it,

2023
02:15:27,300 --> 02:15:31,100
I guess we kind of always know which one that is because you can see

2024
02:15:33,300 --> 02:15:36,200
We have the arena preview here.

2025
02:15:36,500 --> 02:15:44,700
So actually if we just do this, we can actually just do this.

2026
02:15:50,800 --> 02:15:52,200
So I think that's all good.

2027
02:15:52,300 --> 02:15:56,900
And furthermore, because this this actually shakes out to be much more

2028
02:15:56,900 --> 02:16:00,500
interesting, it means that because we've got an extra

2029
02:16:02,500 --> 02:16:07,600
Field here, we can actually get a little bit more ridiculous if we

2030
02:16:07,600 --> 02:16:08,200
want to.

2031
02:16:08,700 --> 02:16:12,600
So, if we go to debug memory up now, and we look at what's actually

2032
02:16:12,600 --> 02:16:20,500
happening, it means that this could actually be more explicit, so if

2033
02:16:20,500 --> 02:16:21,400
we have,

2034
02:16:29,200 --> 02:16:31,700
if we have block,

2035
02:16:33,100 --> 02:16:33,900
Allocate.

2036
02:16:37,100 --> 02:16:37,600
Right.

2037
02:16:40,500 --> 02:16:45,100
We've got something like this and then we've got the allocated size.

2038
02:16:45,500 --> 02:16:49,600
In this case, all of these don't need another one.

2039
02:16:50,200 --> 02:16:55,200
So that means we can get what we wanted, which is these to be fully

2040
02:16:57,100 --> 02:17:03,200
These can have the complete memory size so they don't have to be

2041
02:17:03,200 --> 02:17:05,299
truncated anymore, right?

2042
02:17:07,400 --> 02:17:11,000
Without making this any larger than our previously previously size,

2043
02:17:11,000 --> 02:17:11,799
debug event.

2044
02:17:13,700 --> 02:17:15,700
So that seems good.

2045
02:17:16,000 --> 02:17:19,200
And so I think, what we want to do is this

2046
02:17:27,600 --> 02:17:31,299
So, we can always use the block there, and then only this particular,

2047
02:17:31,299 --> 02:17:33,600
one uses, two of them.

2048
02:17:34,600 --> 02:17:36,100
And so, it's going to use

2049
02:17:37,500 --> 02:17:42,200
Its own special version because it's got this bad changing Behavior.

2050
02:17:42,200 --> 02:17:44,100
We have to handle, right.

2051
02:17:44,900 --> 02:17:48,299
I think that's the only place where that actually has to happen.

2052
02:17:48,600 --> 02:17:52,799
So that way, we could do this and never have any truncation at all.

2053
02:17:53,900 --> 02:17:59,700
Everything would always be full full width, which is much better than

2054
02:17:59,700 --> 02:17:59,900
what

2055
02:18:00,100 --> 02:18:00,700
Before.

2056
02:18:05,799 --> 02:18:07,299
So I like that a lot.

2057
02:18:07,900 --> 02:18:12,100
And then when we actually correlate, those inside the debug system,

2058
02:18:15,600 --> 02:18:17,900
Everything should just work the only differences.

2059
02:18:17,900 --> 02:18:22,400
Now, the block allocate has this sort of other weird situation going.

2060
02:18:22,700 --> 02:18:24,500
So we've got the arena look up book there.

2061
02:18:24,500 --> 02:18:29,900
The rest of these can just use the block as is and be flying with

2062
02:18:29,900 --> 02:18:30,900
that, right?

2063
02:18:49,200 --> 02:18:51,500
Okay, let's see.

2064
02:18:51,500 --> 02:18:55,100
So let's try to make sure we've got everything going correctly here.

2065
02:18:55,400 --> 02:18:59,500
We've got to do the arena removal, and then we got to fix all of our

2066
02:18:59,500 --> 02:19:00,000
errors.

2067
02:19:00,000 --> 02:19:03,600
All right, so in debug record block, allocation here.

2068
02:19:04,900 --> 02:19:10,299
Also, I'm gonna make sure that I made those macros correctly.

2069
02:19:16,299 --> 02:19:18,299
Yeah, this should just do that.

2070
02:19:28,799 --> 02:19:30,600
What is the question BL?

2071
02:19:34,000 --> 02:19:36,200
We have a capital B lb, use their summer.

2072
02:19:45,600 --> 02:19:48,800
Not sure, I see where that's coming from.

2073
02:19:48,800 --> 02:19:49,700
Am I missing something?

2074
02:19:49,700 --> 02:19:51,300
It says Capital BL.

2075
02:19:56,300 --> 02:19:57,800
I mean, number 196.

2076
02:20:00,500 --> 02:20:03,700
In debug record block, allocation there it is.

2077
02:20:04,200 --> 02:20:05,000
So don't the wrong one.

2078
02:20:10,000 --> 02:20:13,200
Okay, so let's make all these things work properly.

2079
02:20:13,200 --> 02:20:17,000
So in the arena, look up block here where we get one of these things.

2080
02:20:17,600 --> 02:20:19,200
I think what we actually want to do.

2081
02:20:20,600 --> 02:20:21,500
Here.

2082
02:20:23,400 --> 02:20:24,600
Let's see.

2083
02:20:25,000 --> 02:20:30,800
So when we're actually looking these up we just want to use a block

2084
02:20:30,800 --> 02:20:31,600
address.

2085
02:20:32,700 --> 02:20:37,500
And the block address has to be the address of the first block, right?

2086
02:20:38,300 --> 02:20:44,800
So meaning we're going to be looking this up by this.

2087
02:20:46,700 --> 02:20:52,200
and so, we have to say, like, if test first block, and test first

2088
02:20:52,200 --> 02:20:52,800
block,

2089
02:20:55,900 --> 02:20:59,300
Memory, address equals look up.

2090
02:21:00,000 --> 02:21:01,000
Address right.

2091
02:21:05,100 --> 02:21:06,800
And so the look up address.

2092
02:21:11,800 --> 02:21:15,000
Is just whatever the block pointer was that we were asked to find

2093
02:21:15,100 --> 02:21:16,800
assuming that we did find it.

2094
02:21:18,600 --> 02:21:20,500
We go ahead and and return it.

2095
02:21:21,800 --> 02:21:25,600
If we don't find it, we create a new one, right?

2096
02:21:26,900 --> 02:21:30,100
That should always work except in this one case where we're not

2097
02:21:30,100 --> 02:21:32,300
allowed to do it because we're not going to fill in a block.

2098
02:21:33,100 --> 02:21:36,800
And if we're not going to fill out in Block, we're kind of screwed

2099
02:21:36,800 --> 02:21:39,200
because we need to look it up by that, right?

2100
02:21:41,200 --> 02:21:49,500
So in here, we get Block free food, free list that should all just

2101
02:21:49,500 --> 02:21:54,400
work, right think all this code should be fine.

2102
02:21:54,500 --> 02:21:55,600
What's wrong with this?

2103
02:21:56,800 --> 02:21:59,200
But you just be block

2104
02:22:02,400 --> 02:22:03,600
And that should just be blocks.

2105
02:22:03,600 --> 02:22:06,500
Well fact, I should be true everywhere.

2106
02:22:07,400 --> 02:22:09,000
So

2107
02:22:13,300 --> 02:22:14,700
That's correct.

2108
02:22:14,700 --> 02:22:15,900
That's all correct.

2109
02:22:15,900 --> 02:22:17,100
So, I think we're good.

2110
02:22:18,800 --> 02:22:21,200
And we just now need to build you to do the removal.

2111
02:22:22,700 --> 02:22:27,800
Get Arena by pointer, is not what this is called anymore.

2112
02:22:29,700 --> 02:22:33,100
And so then I think the only thing we need is is this code.

2113
02:22:40,100 --> 02:22:43,600
And so this needs to take a debug state.

2114
02:22:45,600 --> 02:22:50,100
In the arena to remove and all we're going to do here is look to see

2115
02:22:50,100 --> 02:22:51,300
when we find it.

2116
02:22:52,300 --> 02:22:55,600
So basically, we're going to say that we're going to look at the debug

2117
02:22:55,600 --> 02:22:56,900
State's first Arena.

2118
02:23:02,400 --> 02:23:05,400
We're going to look to see if we can find this particular one.

2119
02:23:05,600 --> 02:23:06,800
So we're going to say, oops.

2120
02:23:09,700 --> 02:23:15,700
so while we have one that's valid, we are going to

2121
02:23:26,200 --> 02:23:29,500
We're going to kind of move through each one grabbing the pointer.

2122
02:23:29,900 --> 02:23:34,200
If we find this particular one then we just skip it, right?

2123
02:23:34,200 --> 02:23:36,700
I guess I could write this in a simpler way.

2124
02:23:37,100 --> 02:23:39,100
That doesn't require so much fancy footwork.

2125
02:23:40,400 --> 02:23:44,900
I could just say this if the first Arena equals the arena, hmm.

2126
02:23:46,500 --> 02:23:47,600
Then debug state.

2127
02:23:48,600 --> 02:23:49,700
Skips it, right?

2128
02:23:54,100 --> 02:23:55,200
Otherwise, we stand.

2129
02:24:11,300 --> 02:24:16,200
And this is just a little easier to read it was the first one skip it.

2130
02:24:17,400 --> 02:24:22,200
If it's any other one, just do the same thing and check.

2131
02:24:22,200 --> 02:24:22,400
Right.

2132
02:24:22,400 --> 02:24:24,800
I was going to write them as one because you can you can do it by just

2133
02:24:24,800 --> 02:24:25,900
using the address the pointer.

2134
02:24:26,400 --> 02:24:30,200
But I decided not to just for making it easier to read.

2135
02:24:32,400 --> 02:24:36,000
So if the next pointer would have pointed to us, we just say that it

2136
02:24:36,000 --> 02:24:37,800
points past this right?

2137
02:24:37,800 --> 02:24:38,400
And then we're done.

2138
02:24:40,200 --> 02:24:44,000
So that gets it out of the list and then we can just put pop it on the

2139
02:24:44,000 --> 02:24:44,900
free store, right?

2140
02:24:56,700 --> 02:25:00,700
And so the only thing I want to do here is is again.

2141
02:25:00,700 --> 02:25:02,100
Just try to get it.

2142
02:25:05,700 --> 02:25:06,500
From a free store.

2143
02:25:21,500 --> 02:25:25,100
So we try to get it here and I guess I can just do it like this.

2144
02:25:28,900 --> 02:25:29,800
so, if we get it,

2145
02:25:42,800 --> 02:25:44,600
And if we don't, we make a new one.

2146
02:25:46,200 --> 02:25:48,100
I think that's all I really needed.

2147
02:25:53,300 --> 02:25:53,800
and,

2148
02:25:55,300 --> 02:25:58,500
I need to put that someplace actually store that in here.

2149
02:25:59,000 --> 02:25:59,700
Oh I already did.

2150
02:26:05,600 --> 02:26:10,000
So hopefully, now we can actually debug this for real and make sure

2151
02:26:10,000 --> 02:26:14,000
that we're actually getting the proper order of events here.

2152
02:26:15,300 --> 02:26:18,000
That was what I was worried about before so I'm just trying to make

2153
02:26:18,000 --> 02:26:18,500
that work.

2154
02:26:18,500 --> 02:26:21,800
Now let's see what the the bugs.

2155
02:26:21,800 --> 02:26:27,200
We actually hit our first before I go tracking down Jimmy.

2156
02:26:31,300 --> 02:26:34,500
So it looks like we've got a tracking problem with our first and last

2157
02:26:34,500 --> 02:26:34,900
pointers here.

2158
02:26:34,900 --> 02:26:37,900
You can see that the these don't match.

2159
02:26:37,900 --> 02:26:40,300
I was just an assertion designed to catch the fact that we're not

2160
02:26:40,300 --> 02:26:41,800
tracking the last pointer properly.

2161
02:26:42,700 --> 02:26:45,300
Let me go take a look at who's responsible for that.

2162
02:26:46,300 --> 02:26:50,800
You can see that we're asking to remove all of the allocations in our

2163
02:26:51,500 --> 02:26:58,200
block here, so it looks like our reblock in question is actually the

2164
02:26:58,200 --> 02:26:59,100
thing that's wrong.

2165
02:27:00,000 --> 02:27:03,300
so, looking at when that's getting updated,

2166
02:27:05,500 --> 02:27:09,300
There's two people who can be responsible for that one is when we're

2167
02:27:09,300 --> 02:27:09,900
allocating.

2168
02:27:09,900 --> 02:27:11,900
Well I guess you're three people actually technically.

2169
02:27:13,400 --> 02:27:23,400
So when we actually create a block itself where's our block out kit

2170
02:27:23,400 --> 02:27:23,600
called?

2171
02:27:23,600 --> 02:27:23,800
Yeah.

2172
02:27:23,800 --> 02:27:31,400
And here we set them both to 0 and then when we allocate a block I'm

2173
02:27:31,400 --> 02:27:31,600
sorry.

2174
02:27:31,600 --> 02:27:33,100
We at we do an allocation

2175
02:27:34,000 --> 02:27:38,700
We need to update the pointers here and you can actually see, it's

2176
02:27:38,700 --> 02:27:41,000
just a not, it's missing the not in that case.

2177
02:27:41,000 --> 02:27:43,800
So the debug Arena allocate just needs.

2178
02:27:46,700 --> 02:27:50,000
To update it when it's not set.

2179
02:27:50,100 --> 02:27:50,800
That was just a

2180
02:27:52,100 --> 02:27:53,100
Stupid type of, right?

2181
02:27:55,100 --> 02:28:01,000
Okay, so yeah, I don't want to quite do breakpoints just yet.

2182
02:28:01,000 --> 02:28:03,500
I want to let this thing run and see what happens.

2183
02:28:03,800 --> 02:28:04,500
That's bad.

2184
02:28:07,000 --> 02:28:10,800
Okay, so now we're at a place where we actually get.

2185
02:28:11,200 --> 02:28:11,500
Okay.

2186
02:28:11,500 --> 02:28:16,000
So we found an arena by a block, but there's no blocks in the arena.

2187
02:28:16,000 --> 02:28:18,100
That's actually not allowed.

2188
02:28:18,100 --> 02:28:25,600
So again, another bug case here that we actually want to fix in fact,

2189
02:28:25,600 --> 02:28:29,600
the so yeah.

2190
02:28:38,800 --> 02:28:41,800
The arena itself did come back, correct?

2191
02:28:41,800 --> 02:28:46,100
So first block should never really be allowed to be set to 0.

2192
02:28:47,600 --> 02:28:50,500
So in the case, where we do a

2193
02:28:52,600 --> 02:28:55,700
One of these get Arena by look up block.

2194
02:28:55,800 --> 02:29:00,700
I think what I may want to do, there is actually disallow creation

2195
02:29:00,700 --> 02:29:02,900
except on a very specific type of call.

2196
02:29:04,500 --> 02:29:08,400
So that we can have this error occur earlier in the process and and

2197
02:29:08,400 --> 02:29:09,500
debug it, right?

2198
02:29:10,000 --> 02:29:12,200
So in here we're we're doing this.

2199
02:29:18,200 --> 02:29:20,700
Maybe I guess what I'll do is like assert.

2200
02:29:22,000 --> 02:29:25,900
Allow creation or results, right?

2201
02:29:26,000 --> 02:29:30,000
Either we got one or you're going to let me create one but not both.

2202
02:29:30,100 --> 02:29:34,100
In fact I could also do it this way assert allow creation.

2203
02:29:35,100 --> 02:29:40,400
So that way when we do this we're just going to say most of the time

2204
02:29:40,400 --> 02:29:41,800
you can't make one of these.

2205
02:29:42,300 --> 02:29:45,100
In fact the only time that you're actually allowed to make one of

2206
02:29:45,100 --> 02:29:45,800
these

2207
02:29:48,300 --> 02:29:52,000
Is Jimmy when we're getting it here.

2208
02:29:54,300 --> 02:29:59,200
Right, and so this I'm hoping we'll catch problems with the way that

2209
02:29:59,200 --> 02:29:59,800
were processed.

2210
02:30:00,000 --> 02:30:05,100
This because it'll tell me like somebody tried to look up a block that

2211
02:30:05,100 --> 02:30:07,200
they shouldn't have been able to look up, right?

2212
02:30:08,800 --> 02:30:09,500
So, let's see.

2213
02:30:11,700 --> 02:30:16,000
It's in an allocation call and it's trying to create a block.

2214
02:30:18,800 --> 02:30:24,300
for whatever this is right and we haven't actually gotten that block

2215
02:30:24,300 --> 02:30:27,300
through here or it cleared out all of its memory

2216
02:30:31,400 --> 02:30:34,000
Well, no, it would have had to have called the free.

2217
02:30:34,000 --> 02:30:36,300
So so we don't really know, right?

2218
02:30:36,300 --> 02:30:39,300
We don't know why it's at why we're getting this event without that

2219
02:30:39,300 --> 02:30:42,900
information, but we want to know, right?

2220
02:30:42,900 --> 02:30:45,500
So we want to know like what's going on here.

2221
02:30:46,200 --> 02:30:49,400
Now, the question is, how many of these have we gone through before we

2222
02:30:49,400 --> 02:30:51,100
hit the problem and I don't know.

2223
02:30:51,200 --> 02:30:52,300
So let's find out.

2224
02:31:01,000 --> 02:31:01,900
Quite a few.

2225
02:31:03,400 --> 02:31:07,000
So we're like processing all of this stuff, right?

2226
02:31:07,600 --> 02:31:10,400
And this is all not causing a problem.

2227
02:31:11,100 --> 02:31:16,100
So we get to quite a few allocations and before we actually hit this

2228
02:31:16,400 --> 02:31:17,800
issue, right?

2229
02:31:19,100 --> 02:31:20,200
That's unfortunate.

2230
02:31:20,200 --> 02:31:22,400
It makes it a lot harder for subtract down.

2231
02:31:22,500 --> 02:31:25,600
But, you know, let's start by just going.

2232
02:31:25,800 --> 02:31:27,900
What's the actual location?

2233
02:31:29,000 --> 02:31:30,600
Who's causing the problem?

2234
02:31:31,400 --> 02:31:32,700
Maybe that'll give us a clip.

2235
02:31:34,000 --> 02:31:39,400
So the queen is coming from handmade memory, .h 388, right.

2236
02:31:49,000 --> 02:31:51,400
So it's another bootstrap, right?

2237
02:31:51,400 --> 02:31:57,000
It's a bootstrap, that's causing the problem and it's specifically the

2238
02:31:57,000 --> 02:31:59,800
first bootstrap that's causing the problem.

2239
02:32:13,100 --> 02:32:15,800
I should say the first allocation in the bootstrap is really what I

2240
02:32:15,800 --> 02:32:16,100
mean.

2241
02:32:20,800 --> 02:32:26,300
so somehow, this first bootstrap push size,

2242
02:32:28,000 --> 02:32:29,000
this one here.

2243
02:32:39,600 --> 02:32:44,400
Somehow that push size is using a block pointer.

2244
02:32:46,100 --> 02:32:50,800
They did not previously call.

2245
02:32:54,500 --> 02:32:56,200
The block allocate.

2246
02:32:57,100 --> 02:32:59,800
Now, why would that be

2247
02:33:03,100 --> 02:33:04,100
Tell me more.

2248
02:33:08,600 --> 02:33:16,600
It's the very first allocation in a bootstrap it did allocate 32 bytes

2249
02:33:16,600 --> 02:33:17,300
of memory.

2250
02:33:20,000 --> 02:33:21,300
And somehow.

2251
02:33:22,900 --> 02:33:28,100
It did not hit or this did not properly work.

2252
02:33:33,500 --> 02:33:35,200
This part of the code.

2253
02:33:52,600 --> 02:33:55,900
So, why is the question?

2254
02:34:02,600 --> 02:34:04,000
Why would that?

2255
02:34:08,600 --> 02:34:09,600
Be the case.

2256
02:34:20,500 --> 02:34:21,900
Let's ask another question.

2257
02:34:22,800 --> 02:34:27,500
So here we've got, in fact, I could even look at these a little more

2258
02:34:27,500 --> 02:34:28,200
closely.

2259
02:34:28,400 --> 02:34:33,400
So, since it's only the one bootstrap one, I'm interested to know how

2260
02:34:33,400 --> 02:34:37,300
often are we bootstrapping, and which ones of those are having the

2261
02:34:37,300 --> 02:34:38,800
problem, right?

2262
02:34:39,200 --> 02:34:44,600
So, if inside the bootstrapper here, if I just like, say, let's go

2263
02:34:44,600 --> 02:34:44,800
here.

2264
02:34:44,800 --> 02:34:47,400
First one, two,

2265
02:34:50,000 --> 02:34:50,600
Buck.

2266
02:34:51,300 --> 02:34:55,100
So I know there's only two of these that actually happen.

2267
02:34:55,400 --> 02:34:59,700
I can step through them, write down what they did and see why we're

2268
02:34:59,700 --> 02:35:00,400
getting an error.

2269
02:35:01,100 --> 02:35:08,000
The first one attempts to record a block allocation here, the arena

2270
02:35:08,100 --> 02:35:11,900
setup is as follows, you can see that the current block would be

2271
02:35:11,900 --> 02:35:19,600
whatever I just recorded here so it's, you know, to see 1476 f00.

2272
02:35:19,800 --> 02:35:21,300
Zero right.

2273
02:35:23,000 --> 02:35:25,100
So that's the block allocation.

2274
02:35:25,100 --> 02:35:28,800
That should be entered into the list right now as going with the, you

2275
02:35:28,800 --> 02:35:30,700
know, this operation here.

2276
02:35:33,300 --> 02:35:34,300
And

2277
02:35:40,800 --> 02:35:45,400
It will record the previous block as well, so it will the one that it

2278
02:35:45,400 --> 02:35:46,700
will use for look up.

2279
02:35:47,800 --> 02:35:49,200
Is actually zero.

2280
02:35:58,800 --> 02:35:59,800
Which should still work.

2281
02:36:00,000 --> 02:36:02,200
Okay, oddly enough.

2282
02:36:04,300 --> 02:36:08,100
We'll get to that in a second, I then come through and I'm going to go

2283
02:36:08,100 --> 02:36:11,000
ahead and do a debug credit allocation here.

2284
02:36:11,000 --> 02:36:15,900
I look at the current block and the current block does correctly

2285
02:36:16,000 --> 02:36:16,500
mirror this.

2286
02:36:16,500 --> 02:36:21,600
So there should be two events in the debug stream back-to-back.

2287
02:36:21,800 --> 02:36:26,600
And honestly, I think I can even verify that because if I look at the

2288
02:36:26,600 --> 02:36:28,700
global debug stream,

2289
02:36:31,600 --> 02:36:32,600
Where is that?

2290
02:36:39,900 --> 02:36:43,600
If I look at this.

2291
02:37:00,600 --> 02:37:01,900
This is going to be kind of tricky.

2292
02:37:19,300 --> 02:37:23,600
Search 82, which means I should be able to just do this.

2293
02:37:33,500 --> 02:37:34,100
Right.

2294
02:37:34,100 --> 02:37:37,600
So this is the first one, this would be like the next one that we

2295
02:37:37,600 --> 02:37:38,800
would actually record.

2296
02:37:39,600 --> 02:37:43,000
So we actually want to look at the one just before that, and the one

2297
02:37:43,000 --> 02:37:43,900
just before that.

2298
02:37:44,500 --> 02:37:49,200
So number 80, in this case, right?

2299
02:37:50,700 --> 02:37:54,900
Here's the block allocation and let's see what it said.

2300
02:37:55,000 --> 02:37:58,700
It said the lookup block was zero and the block was, you know, F 0,

2301
02:37:58,700 --> 02:38:00,700
which is exactly what we'd expect.

2302
02:38:00,900 --> 02:38:02,600
Let's see what the next one says.

2303
02:38:03,100 --> 02:38:04,000
In this case,

2304
02:38:08,800 --> 02:38:10,800
and in that case, we have got

2305
02:38:15,200 --> 02:38:18,200
That block as record to correctly as well, right?

2306
02:38:18,800 --> 02:38:23,700
There's the f00 other, so those are both recorded properly.

2307
02:38:23,800 --> 02:38:24,800
Let's see what happens.

2308
02:38:24,800 --> 02:38:28,600
The next time through on the push, block, the precise for the

2309
02:38:28,600 --> 02:38:29,300
bootstrap.

2310
02:38:32,900 --> 02:38:33,300
Let's see.

2311
02:38:33,300 --> 02:38:37,300
We got the arena current block to d d 0 0, 0 0, right?

2312
02:38:37,300 --> 02:38:38,700
So that's the second one.

2313
02:38:45,000 --> 02:38:45,700
That's that one.

2314
02:38:46,500 --> 02:38:51,600
And so what we want to do here is say let's just remember which of the

2315
02:38:51,600 --> 02:38:55,300
this was the first this is the second that we hit and there's only two

2316
02:38:56,600 --> 02:38:59,800
so then we go into record the allocation

2317
02:39:00,000 --> 02:39:02,600
We're going to use the current block, its, it is correct.

2318
02:39:03,000 --> 02:39:07,600
So again, those should be correct, 1661 should show us that as well,

2319
02:39:07,600 --> 02:39:08,100
right?

2320
02:39:08,200 --> 02:39:16,300
So that should be the block a lock looking at that, we get a zero and

2321
02:39:16,300 --> 02:39:20,200
a DD there, which is exactly what we want.

2322
02:39:20,500 --> 02:39:27,500
And then if we run it and record the other event, I should be able to

2323
02:39:27,700 --> 02:39:28,400
get opes.

2324
02:39:30,700 --> 02:39:31,000
Be nice.

2325
02:39:31,000 --> 02:39:33,500
If cursor positioning worked in.

2326
02:39:34,400 --> 02:39:35,000
What is it?

2327
02:39:35,100 --> 02:39:37,000
Here I am gooey or whatever it's called.

2328
02:39:42,200 --> 02:39:44,700
So yeah looking at the memory up here gd0.

2329
02:39:44,700 --> 02:39:49,000
So so these are totally correct as far as I can tell.

2330
02:39:49,400 --> 02:39:53,900
So it looks to me like we just have a bug with how we're processing

2331
02:39:53,900 --> 02:39:56,500
the events because the events look like they should work.

2332
02:39:57,100 --> 02:39:58,400
So the give me one second here.

2333
02:39:58,400 --> 02:40:03,400
I just want to look into the debugs systems handling of these.

2334
02:40:14,200 --> 02:40:17,900
So inside luck allocate, this is going to get passed a 0 which should

2335
02:40:17,900 --> 02:40:20,500
hopefully mean that it does actually allocate one.

2336
02:40:21,300 --> 02:40:23,200
It will then go ahead and

2337
02:40:27,100 --> 02:40:29,700
Nick, the new block like so.

2338
02:40:31,400 --> 02:40:34,700
Either way, it'll say there's no locations in it.

2339
02:40:35,000 --> 02:40:36,000
It'll take.

2340
02:40:37,600 --> 02:40:42,900
The block that was passed as the new one that's going to be there set

2341
02:40:42,900 --> 02:40:45,100
the memory rest of that, which is what it should do.

2342
02:40:47,600 --> 02:40:49,700
And then record that that Arenas.

2343
02:40:49,700 --> 02:40:52,800
First block is this one, right?

2344
02:40:54,100 --> 02:40:57,500
And again, when we're scanning for these, that's what we're using,

2345
02:40:57,500 --> 02:40:57,800
right?

2346
02:40:57,800 --> 02:41:03,100
We look through the Arenas and we look for the first block and

2347
02:41:03,100 --> 02:41:06,200
assuming that there is one we test to make sure that the memory

2348
02:41:06,200 --> 02:41:10,900
address is whatever address you asked us to look up.

2349
02:41:11,600 --> 02:41:17,300
And then when we add it in here, we just say, yeah, like take the

2350
02:41:17,300 --> 02:41:18,300
first free one.

2351
02:41:22,400 --> 02:41:23,400
And use it.

2352
02:41:28,700 --> 02:41:30,500
That all seems fine to me.

2353
02:41:31,200 --> 02:41:32,600
Oh, hi.

2354
02:41:34,900 --> 02:41:36,000
That's pretty stupid.

2355
02:41:38,700 --> 02:41:42,800
In the case where we used one, we never actually bothered to set it

2356
02:41:42,800 --> 02:41:43,400
State.

2357
02:41:43,800 --> 02:41:45,600
You think that could have something to do with it?

2358
02:41:46,200 --> 02:41:47,300
Yeah, probably.

2359
02:41:48,700 --> 02:41:50,200
All right, but it does seem to be working.

2360
02:41:50,200 --> 02:41:51,700
Okay, so far so let's see.

2361
02:41:51,700 --> 02:41:53,800
Now that tracks it properly.

2362
02:41:56,600 --> 02:41:59,800
And we can sort of see how owners it is.

2363
02:42:02,300 --> 02:42:02,700
Later.

2364
02:42:03,400 --> 02:42:06,200
Alright, so now we seem to be going okay.

2365
02:42:06,200 --> 02:42:10,700
If I go ahead and switch this to release build, we can see whether we

2366
02:42:10,700 --> 02:42:16,300
have any horrible memory runaway Happening Here.

2367
02:42:21,100 --> 02:42:22,300
Seems reasonable.

2368
02:42:23,600 --> 02:42:28,000
But it looks like we are sort of maybe leaking a bit there or doing

2369
02:42:28,000 --> 02:42:33,000
something that great like watch you can if you can almost feel it when

2370
02:42:33,000 --> 02:42:33,600
it happens.

2371
02:42:40,600 --> 02:42:42,200
Yeah, I mean just look at what's happening.

2372
02:42:42,200 --> 02:42:47,900
Right, so we're not quite processing that correctly but we're close.

2373
02:42:48,000 --> 02:42:48,500
Okay.

2374
02:42:49,200 --> 02:42:52,500
So let's try to

2375
02:42:56,300 --> 02:42:59,300
Let's try to just isolate our memory are here and then I think we're

2376
02:42:59,300 --> 02:43:03,600
good to go and this was pretty tricky to get right to try and track

2377
02:43:03,600 --> 02:43:08,100
all this without actually intruding at all into the thing we were

2378
02:43:08,100 --> 02:43:13,000
tracking but I think we did it unless there's a gotcha here that I

2379
02:43:13,000 --> 02:43:14,200
didn't anticipate.

2380
02:43:15,200 --> 02:43:18,900
But yeah so if we look oh.um

2381
02:43:23,500 --> 02:43:26,700
Yeah, we're probably we're properly calling all this out.

2382
02:43:27,500 --> 02:43:30,700
All right, so if we look at what's happening on all of these, let's

2383
02:43:30,700 --> 02:43:32,900
just double-check our process.

2384
02:43:33,300 --> 02:43:36,700
And then we'll make one pass.

2385
02:43:36,700 --> 02:43:39,100
One more, pass that a burger and see if we can get it properly.

2386
02:43:40,800 --> 02:43:41,300
Okay.

2387
02:43:42,100 --> 02:43:43,800
So, first things first.

2388
02:43:44,100 --> 02:43:45,800
Here's where we manage the Arenas.

2389
02:43:45,800 --> 02:43:52,200
So in here we say okay you know look through all of our Arenas see

2390
02:43:52,200 --> 02:43:53,900
whether or not we've got one here.

2391
02:43:54,000 --> 02:43:57,600
This actually should never be allowed to be zero.

2392
02:43:58,500 --> 02:44:00,500
So in a sense we could just do this.

2393
02:44:00,500 --> 02:44:03,200
Probably for starters, let's let's do that.

2394
02:44:03,200 --> 02:44:06,900
And just make sure that's true because you're not really ever allowed

2395
02:44:06,900 --> 02:44:08,200
to do that.

2396
02:44:10,900 --> 02:44:14,500
You're not allowed to leave somebody in here after the initial ad who

2397
02:44:14,500 --> 02:44:16,200
doesn't get their block pointer set.

2398
02:44:16,400 --> 02:44:20,200
So that's, you know, should just be the case when we come through here

2399
02:44:20,200 --> 02:44:23,700
we say, look, are there any free ones of these that we can grab?

2400
02:44:23,700 --> 02:44:26,300
If there are great, use it.

2401
02:44:26,300 --> 02:44:30,600
So we advance the, you know, pop it off the free list, basically,

2402
02:44:30,900 --> 02:44:33,600
otherwise just add a new one on here.

2403
02:44:34,200 --> 02:44:36,300
Either way we set the name initialize.

2404
02:44:36,300 --> 02:44:40,500
The fact, there's no blocks in it and then we change it on by

2405
02:44:40,700 --> 02:44:45,400
Hang the first arena points to it, and I'm sorry that it's next

2406
02:44:45,400 --> 02:44:47,900
pointer points to the first Arena and the first arena points to it as

2407
02:44:47,900 --> 02:44:50,700
a standard linked list addition, right?

2408
02:44:53,800 --> 02:44:55,100
For setting the name.

2409
02:44:55,500 --> 02:44:56,700
We don't do anything.

2410
02:44:56,700 --> 02:44:59,800
We just look up to see whether or not there's a block.

2411
02:45:00,100 --> 02:45:03,000
Pointer that's valid and if there is we just set its name and that's

2412
02:45:03,000 --> 02:45:03,700
all we do.

2413
02:45:04,100 --> 02:45:06,500
So we shouldn't really be able to do anything there that would cause

2414
02:45:06,500 --> 02:45:08,900
any memory to have exchanges to happen at all.

2415
02:45:08,900 --> 02:45:11,400
And since we're not even allowed to allocate here, we would get an

2416
02:45:11,500 --> 02:45:15,800
assert if it did moving stuff to the free list here.

2417
02:45:15,800 --> 02:45:18,700
This is probably a place where we could be having some serious

2418
02:45:18,700 --> 02:45:22,200
problems because we need to make sure we do this very carefully.

2419
02:45:22,700 --> 02:45:27,200
So, if we have a list where we've got a first and a last year, and

2420
02:45:27,200 --> 02:45:29,800
what we're doing is we're saying, okay, if there is a first point,

2421
02:45:30,000 --> 02:45:30,200
Order.

2422
02:45:30,600 --> 02:45:31,600
Then we need to do some work.

2423
02:45:31,600 --> 02:45:33,900
Otherwise we don't, but we want to make sure that there's no last four

2424
02:45:33,900 --> 02:45:34,600
in that case.

2425
02:45:35,000 --> 02:45:38,200
So assuming there's a first and a last Point, what we do is say the

2426
02:45:38,200 --> 02:45:38,800
next.

2427
02:45:38,800 --> 02:45:42,300
So From First to Last is a block of chunk of these links.

2428
02:45:42,600 --> 02:45:47,000
The next pointer will point to whatever the currently first free,

2429
02:45:47,000 --> 02:45:51,100
allocation is on the free list, and then we will point to the head of

2430
02:45:51,100 --> 02:45:54,800
this using debug State first reallocation, right?

2431
02:45:56,200 --> 02:45:57,900
That seems correct to me.

2432
02:45:59,100 --> 02:46:02,200
I don't see anything weird happening there.

2433
02:46:05,900 --> 02:46:09,900
So, that all seems fine when we go to remove an arena, pretty

2434
02:46:09,900 --> 02:46:10,900
straightforward process.

2435
02:46:10,900 --> 02:46:17,400
If it's the first Arena, then we just move the first pointer to

2436
02:46:17,400 --> 02:46:19,500
whatever was after it, right?

2437
02:46:20,300 --> 02:46:25,600
Otherwise we start by looking at the first Arena and we go as far as

2438
02:46:25,600 --> 02:46:26,500
we can go.

2439
02:46:34,500 --> 02:46:37,100
Yeah, we just look and see if it was the next pointer.

2440
02:46:37,900 --> 02:46:41,500
We then hop over it exactly the same way that we would have done here

2441
02:46:41,700 --> 02:46:42,300
and stop.

2442
02:46:43,000 --> 02:46:46,200
We then set its next pointer to point to whatever the whole chain of

2443
02:46:46,200 --> 02:46:47,700
fruit currently free reasons were.

2444
02:46:47,800 --> 02:46:48,700
So we do that.

2445
02:46:48,800 --> 02:46:52,400
We then say that the debug first free arena points to the arena,

2446
02:46:52,700 --> 02:46:53,200
right?

2447
02:46:53,200 --> 02:46:54,200
To the arena itself.

2448
02:46:56,500 --> 02:46:59,900
Maintaining the free train in debug Arena, block free.

2449
02:46:59,900 --> 02:47:04,100
This is taking one of these blocks and getting rid of the whole thing.

2450
02:47:04,500 --> 02:47:07,500
so what we want to do here is move everything to it, which is what we

2451
02:47:07,500 --> 02:47:11,500
do right at the outset and

2452
02:47:16,100 --> 02:47:19,100
We're just asserting here that this is that it is the top block on its

2453
02:47:19,100 --> 02:47:19,500
back.

2454
02:47:20,400 --> 02:47:24,500
So we do this, of course, that would have to be true.

2455
02:47:24,500 --> 02:47:27,500
So this is sort of kind of pointless, but, you know, whatever.

2456
02:47:30,800 --> 02:47:34,100
In order to remove the free block from the arena after we move all of

2457
02:47:34,100 --> 02:47:38,900
its allocations off of it, we say that the first block on the arena is

2458
02:47:38,900 --> 02:47:41,700
whatever the next block after it would have been.

2459
02:47:49,000 --> 02:47:49,800
That seems fine.

2460
02:47:50,100 --> 02:47:52,300
We then add the old block to the free list.

2461
02:47:52,500 --> 02:47:55,600
We do that by saying, it's next corner is whatever the arena block

2462
02:47:55,600 --> 02:47:59,800
free list, previously was, and then the free Block points to us, we

2463
02:48:00,000 --> 02:48:04,600
Say if that would have been the last block, then get rid of the Arena

2464
02:48:04,600 --> 02:48:05,300
entirely.

2465
02:48:07,800 --> 02:48:09,200
Now, for truncation.

2466
02:48:10,800 --> 02:48:14,200
So, this is quite possibly where we would have problems.

2467
02:48:15,100 --> 02:48:19,600
So, here we say, alright, get the arena by the block, assert that it's

2468
02:48:19,600 --> 02:48:20,800
the block we want.

2469
02:48:21,800 --> 02:48:26,000
We're going to start by looking at the first allocation, and if the

2470
02:48:26,000 --> 02:48:31,400
first allocations offset From the Block is less than the total size,

2471
02:48:31,600 --> 02:48:36,500
then we know that this is a valid allocation, right?

2472
02:48:41,600 --> 02:48:45,200
And the question is, is that actually is that shot going to work?

2473
02:48:45,200 --> 02:48:47,700
If we're always pushing allegations on in the reverse order.

2474
02:48:47,700 --> 02:48:53,100
So like, allocations come on and they get added to the front, right?

2475
02:48:53,100 --> 02:48:55,400
Which we did, you know that we did?

2476
02:48:55,400 --> 02:48:58,800
Make it so that every time you allocate its the first thing.

2477
02:49:00,900 --> 02:49:05,700
Nope, it's the first thing on here, right?

2478
02:49:07,700 --> 02:49:10,100
So they should go in ascending order.

2479
02:49:10,400 --> 02:49:17,100
So, if this block is less than the allocated size, then none of the

2480
02:49:17,100 --> 02:49:20,100
ones after it should be either, right?

2481
02:49:21,000 --> 02:49:24,600
We could add some assertions, if we want to double up on that, right?

2482
02:49:26,300 --> 02:49:28,600
But anyway, what we're trying to do here is say, oh, right?

2483
02:49:29,400 --> 02:49:33,200
So assuming that that that was the case, we just stopped and that's

2484
02:49:33,200 --> 02:49:33,800
the end.

2485
02:49:34,400 --> 02:49:39,800
But if it's not then what we do is say well we could free this one, so

2486
02:49:39,800 --> 02:49:42,600
Advanced the pointer and remember that we could have freed this one

2487
02:49:43,700 --> 02:49:47,900
if we get to the end of this and we find that the first allocation in

2488
02:49:47,900 --> 02:49:53,500
the block is not the one that we ended that iteration on.

2489
02:49:53,800 --> 02:49:58,000
Then we know that there is a range, we could free, we move everything

2490
02:49:58,000 --> 02:50:03,000
from the first application and it up to and including whatever the

2491
02:50:03,000 --> 02:50:06,000
last 31 was we move those to the free list.

2492
02:50:06,300 --> 02:50:10,000
We then make the first allocation whatever this first valid part was

2493
02:50:10,000 --> 02:50:10,500
here

2494
02:50:12,600 --> 02:50:17,400
And then we say if the last allocation was the one that we would have

2495
02:50:17,400 --> 02:50:22,600
freed there, then we now have no allocations left in the block

2496
02:50:22,600 --> 02:50:27,800
whatsoever, we don't actually deallocate the block because we assume

2497
02:50:27,800 --> 02:50:32,900
that it will tell us to do that in a call to block deallocate or block

2498
02:50:32,900 --> 02:50:33,700
free rather.

2499
02:50:33,700 --> 02:50:36,100
We assumed it would have called this, right?

2500
02:50:40,800 --> 02:50:45,700
Again seems pretty solid Arena block allocates that actually has to

2501
02:50:45,700 --> 02:50:46,800
make a new one of these.

2502
02:50:46,800 --> 02:50:50,800
It first says, can we get a free one if we can just Advance the

2503
02:50:50,800 --> 02:50:52,100
pointer for the free list.

2504
02:50:52,100 --> 02:50:55,300
So we get a different next time, otherwise I'll get a new one,

2505
02:50:55,600 --> 02:50:57,400
initialize its stuff.

2506
02:50:57,500 --> 02:50:59,800
Put it onto the Arena's first block.

2507
02:51:00,000 --> 02:51:00,400
Here.

2508
02:51:00,900 --> 02:51:05,500
And we know that must at least be working because otherwise we would

2509
02:51:05,500 --> 02:51:08,300
get assertions when people were trying to use the memory address

2510
02:51:08,300 --> 02:51:09,000
there, right?

2511
02:51:10,700 --> 02:51:14,400
So finally, we're down to allocate, we get whatever the block is that

2512
02:51:14,400 --> 02:51:18,100
we're supposed to be putting this one on it inside the arena.

2513
02:51:18,100 --> 02:51:19,800
First block part here.

2514
02:51:20,700 --> 02:51:25,600
What we want to do is say yeah make sure we're on the one.

2515
02:51:25,600 --> 02:51:29,600
We think we should be on then look to see if we have a free

2516
02:51:29,600 --> 02:51:30,500
allocation.

2517
02:51:30,800 --> 02:51:34,200
If we do then move the free list up one.

2518
02:51:34,500 --> 02:51:39,900
If we don't then make a new one record, the allocation by

2519
02:51:40,200 --> 02:51:44,300
Being that the grid from for this allocation is the grid from the

2520
02:51:44,300 --> 02:51:46,600
event that the offset is the offset.

2521
02:51:46,600 --> 02:51:50,000
The size of the size, the next pointer is going to be whatever was

2522
02:51:50,000 --> 02:51:54,800
previously on the the blocks list the blocks first, allocation,

2523
02:52:07,700 --> 02:52:09,200
I think, I just realized.

2524
02:52:11,900 --> 02:52:14,800
What the problem is, I don't actually think there is a memory leak.

2525
02:52:16,000 --> 02:52:20,700
So we use memory Arenas inside the debug system.

2526
02:52:23,300 --> 02:52:23,900
Right.

2527
02:52:25,500 --> 02:52:26,200
so,

2528
02:52:28,000 --> 02:52:34,100
this will always create an infinite Loop of allocations, because every

2529
02:52:34,100 --> 02:52:38,300
time you allocate you record an event which has to allocate

2530
02:52:40,200 --> 02:52:44,400
another record to store it, which will create an event, which will

2531
02:52:44,400 --> 02:52:45,800
create another allocation, right?

2532
02:52:46,600 --> 02:52:53,200
So we can't do this for things that are in the debug system, right?

2533
02:52:54,900 --> 02:53:00,000
If we do, we can never record them all because the act of recording

2534
02:53:00,000 --> 02:53:02,200
creates an event right.

2535
02:53:04,800 --> 02:53:09,000
So we need a way of telling the system.

2536
02:53:09,100 --> 02:53:14,600
When were allocating these, please don't remember that.

2537
02:53:19,000 --> 02:53:19,500
Um,

2538
02:53:21,900 --> 02:53:22,800
hahaha.

2539
02:53:26,800 --> 02:53:28,200
So yeah.

2540
02:53:30,600 --> 02:53:34,100
That makes it a little trishy.

2541
02:53:34,600 --> 02:53:35,700
That's awesome.

2542
02:53:37,000 --> 02:53:38,000
That's so cool.

2543
02:53:40,400 --> 02:53:44,100
So, probably what we would need to do.

2544
02:53:44,100 --> 02:53:47,200
There is this

2545
02:53:56,100 --> 02:53:59,800
everybody when we do the get a real look up,

2546
02:54:00,200 --> 02:54:06,200
If I look up block, I think what we have to do there is essentially

2547
02:54:06,600 --> 02:54:09,700
put in sort of a suppression operations.

2548
02:54:09,700 --> 02:54:14,700
So when you query this thing, you might not get one back even though

2549
02:54:14,700 --> 02:54:16,000
you know that doesn't make any sense.

2550
02:54:16,000 --> 02:54:20,300
Well, it does because we're going to have to suppress any calls that

2551
02:54:20,300 --> 02:54:24,000
came from the debug system in the first place, right?

2552
02:54:24,500 --> 02:54:28,000
In fact, I guess there's maybe one other way we could do this now,

2553
02:54:28,000 --> 02:54:29,100
that I think about it.

2554
02:54:30,500 --> 02:54:34,700
Which is when we actually go to dispatch the event.

2555
02:54:38,600 --> 02:54:39,200
Right.

2556
02:54:41,300 --> 02:54:45,500
We could look to see whether this event came from the debug system or

2557
02:54:45,500 --> 02:54:46,000
not.

2558
02:54:46,000 --> 02:54:48,500
And if it did we just throw it out.

2559
02:54:49,100 --> 02:54:54,800
If it's a Memory op that came from the debug debug system itself,

2560
02:54:55,200 --> 02:54:55,800
right?

2561
02:54:56,800 --> 02:55:02,900
And the way to do that, I think I hope

2562
02:55:12,700 --> 02:55:14,100
alone on saying that.

2563
02:55:14,200 --> 02:55:17,600
Yeah, if the debug system calls something that's outside the debug

2564
02:55:17,600 --> 02:55:18,600
system that would work.

2565
02:55:18,900 --> 02:55:20,100
So I take it back.

2566
02:55:20,100 --> 02:55:22,600
I do think you want this right?

2567
02:55:25,800 --> 02:55:30,300
You want something which basically guards all of the calls on if

2568
02:55:30,300 --> 02:55:31,700
Arena, right?

2569
02:55:35,300 --> 02:55:39,600
and then, in here, where we actually

2570
02:55:42,900 --> 02:55:44,700
Find this stuff, right?

2571
02:55:45,700 --> 02:55:51,600
What we would do here is say, you know, if results.

2572
02:55:53,000 --> 02:55:54,100
Suppress.

2573
02:56:00,600 --> 02:56:01,900
Then it's zero, right?

2574
02:56:02,700 --> 02:56:07,100
And so what we would need here is we need the ability to set an event

2575
02:56:07,100 --> 02:56:12,500
that basically says this Arena cannot ever.

2576
02:56:13,000 --> 02:56:16,300
Look, don't ever let this thing do anything, right?

2577
02:56:17,500 --> 02:56:22,100
And so when we get this event here and we get the name back, we want

2578
02:56:22,100 --> 02:56:26,600
to do is probably also be able to set a suppression event here.

2579
02:56:28,300 --> 02:56:30,100
Don't ask me why I spelled that wrong.

2580
02:56:43,500 --> 02:56:44,400
Something like that.

2581
02:56:44,400 --> 02:56:51,600
So if we set that secret flag in there or something, then it will, you

2582
02:56:51,600 --> 02:56:58,700
know, allow us to suppress this Arena and stop recording the events on

2583
02:56:58,700 --> 02:56:59,800
it because

2584
02:57:01,000 --> 02:57:02,300
That's sort of hilarious.

2585
02:57:02,300 --> 02:57:03,600
I was like, wait a minute.

2586
02:57:04,900 --> 02:57:10,800
Even if we don't have any bugs in this system, it will still fail.

2587
02:57:10,800 --> 02:57:15,800
There is no way to record the recording system for memory because just

2588
02:57:15,800 --> 02:57:20,000
the act of recording it required the memory, right?

2589
02:57:24,500 --> 02:57:25,400
And so yeah.

2590
02:57:26,500 --> 02:57:27,300
So anyway,

2591
02:57:29,500 --> 02:57:31,300
I think that should be fine.

2592
02:57:31,300 --> 02:57:36,900
And then what we want to do is when we initially create the debug

2593
02:57:36,900 --> 02:57:40,300
Arena, we just need that Arena to be suppressed.

2594
02:57:40,700 --> 02:57:46,100
So, both fat, and the per frame Arena will always be suppressed.

2595
02:57:57,900 --> 02:58:00,800
And since there's only two of those, I don't actually know where the

2596
02:58:00,800 --> 02:58:03,400
per frame Arena comes into play here.

2597
02:58:08,500 --> 02:58:10,400
But we want to suppress that one too.

2598
02:58:11,200 --> 02:58:17,900
Even the that one technically is okay because since we don't allocate

2599
02:58:17,900 --> 02:58:23,500
from that one, we could still like track it.

2600
02:58:23,600 --> 02:58:27,800
I just don't want to because it's like where

2601
02:58:30,700 --> 02:58:32,300
That's in-store event there.

2602
02:58:32,300 --> 02:58:32,600
Yeah.

2603
02:58:32,600 --> 02:58:35,300
So so the per frame Arena.

2604
02:58:37,200 --> 02:58:38,200
I don't know where we.

2605
02:58:38,500 --> 02:58:41,500
We have to wipe that one out there to don't we like

2606
02:58:45,000 --> 02:58:45,800
how is that one?

2607
02:58:47,100 --> 02:58:48,500
Being used, exactly.

2608
02:58:55,700 --> 02:58:59,000
Shouldn't there be a place where we clear that.

2609
02:59:02,700 --> 02:59:03,200
Oh no.

2610
02:59:03,200 --> 02:59:04,700
So we don't really do that.

2611
02:59:04,700 --> 02:59:05,500
It looks like

2612
02:59:09,700 --> 02:59:10,500
So it looks like more.

2613
02:59:10,500 --> 02:59:15,300
What we do there is we do allocate from it with a store event but we

2614
02:59:20,200 --> 02:59:21,800
We just recycle.

2615
02:59:23,200 --> 02:59:24,400
So is there a reason why?

2616
02:59:24,400 --> 02:59:24,900
That's

2617
02:59:27,100 --> 02:59:29,200
Is there a reason why we even have that anymore?

2618
02:59:45,400 --> 02:59:46,900
Interesting.

2619
02:59:51,700 --> 02:59:55,000
So, we don't really need these two Arenas.

2620
02:59:55,000 --> 02:59:59,300
We only need one now, right?

2621
03:00:06,600 --> 03:00:07,400
I want to say,

2622
03:00:10,100 --> 03:00:11,200
can we just do this?

2623
03:00:28,600 --> 03:00:29,500
Because I think so.

2624
03:00:35,600 --> 03:00:38,400
Yeah, I mean I don't I think we can just get rid of it.

2625
03:00:38,400 --> 03:00:39,900
So let's just do that too.

2626
03:00:40,500 --> 03:00:43,000
While we're at it that just simplifies things, we only have to

2627
03:00:43,000 --> 03:00:44,000
suppress one Arena.

2628
03:00:48,900 --> 03:00:50,000
I'm a nobody cares.

2629
03:00:50,700 --> 03:00:51,300
I think.

2630
03:00:52,200 --> 03:00:53,900
I hope so.

2631
03:00:53,900 --> 03:00:56,100
Now we just need that suppression call.

2632
03:00:56,600 --> 03:00:59,300
And that seems pretty simple because it's basically the same call as

2633
03:00:59,300 --> 03:01:00,200
the name call.

2634
03:01:12,000 --> 03:01:17,100
And so, I think all we have to do here is just say Arena suppress.

2635
03:01:24,400 --> 03:01:29,700
And then this just needs to set the little secret Special Sauce.

2636
03:01:37,000 --> 03:01:37,200
Oops.

2637
03:01:43,000 --> 03:01:43,500
Right?

2638
03:01:44,900 --> 03:01:47,700
So, I think that would allow us to suppress those messages so that

2639
03:01:47,700 --> 03:01:49,400
nothing would actually happen there.

2640
03:01:49,400 --> 03:01:50,000
I hope.

2641
03:01:58,200 --> 03:02:01,000
Yeah, and so I think we're good.

2642
03:02:01,000 --> 03:02:05,000
Now those will all get named and then that one debug one would get

2643
03:02:05,000 --> 03:02:06,100
properly suppressed.

2644
03:02:06,100 --> 03:02:10,400
I think what's going on here?

2645
03:02:18,500 --> 03:02:19,300
Hold on a second.

2646
03:02:20,800 --> 03:02:23,100
Looks like we've got somebody who's doing.

2647
03:02:25,200 --> 03:02:26,700
Allocate their, that shouldn't be.

2648
03:02:39,800 --> 03:02:40,500
Who is it?

2649
03:03:00,900 --> 03:03:02,600
So I guess.

2650
03:03:02,600 --> 03:03:03,200
Yeah.

2651
03:03:03,200 --> 03:03:04,000
You know what though?

2652
03:03:08,200 --> 03:03:12,400
I guess the problem there is we still do have to sort of track them.

2653
03:03:13,500 --> 03:03:17,800
A little bit, we can't detract them entirely.

2654
03:03:19,500 --> 03:03:20,800
So we hat.

2655
03:03:20,800 --> 03:03:22,700
We do unfortunately.

2656
03:03:22,800 --> 03:03:26,100
Actually have to remember how many blocks there are because otherwise

2657
03:03:26,100 --> 03:03:27,800
we don't actually know.

2658
03:03:32,100 --> 03:03:35,200
Yeah, like we don't actually know who to suppress without tracking the

2659
03:03:35,200 --> 03:03:40,000
blocks, so I guess we do have to do a thing which basically says if

2660
03:03:40,600 --> 03:03:47,000
Arena suppress here and then everybody else actually still needs to do

2661
03:03:47,000 --> 03:03:48,500
all the same work that they were doing.

2662
03:03:49,500 --> 03:03:50,000
Right.

2663
03:03:53,800 --> 03:03:54,400
I think.

2664
03:03:55,700 --> 03:03:58,100
Block, allocate block truncate.

2665
03:03:59,500 --> 03:04:00,600
Not so much.

2666
03:04:04,100 --> 03:04:05,500
But everybody else, yeah.

2667
03:04:06,900 --> 03:04:07,800
Man, this is crazy.

2668
03:04:07,800 --> 03:04:10,500
If this ends up working out to be pretty psyched because this was a

2669
03:04:10,500 --> 03:04:10,900
nut.

2670
03:04:10,900 --> 03:04:14,400
So thing to try and do but you know, sometimes it's fun.

2671
03:04:17,500 --> 03:04:18,700
So that's all good.

2672
03:04:31,100 --> 03:04:36,000
So we just don't track the allocations, but we do track the blocks.

2673
03:04:37,100 --> 03:04:42,000
And the suppression should stop anybody from going crazy with that.

2674
03:04:47,300 --> 03:04:51,700
And you can see us now being stable here it looks like which is good,

2675
03:04:52,000 --> 03:04:52,600
right?

2676
03:04:56,700 --> 03:04:58,200
I'll see if it climbs to.

2677
03:04:58,200 --> 03:04:59,000
Hi there.

2678
03:04:59,900 --> 03:05:03,100
It should go for a little while and then level out.

2679
03:05:06,000 --> 03:05:09,200
once the debug system starts, recycling events,

2680
03:05:14,900 --> 03:05:17,400
and that's just climbing too slowly for me to even really tell.

2681
03:05:17,400 --> 03:05:20,000
So I'm going to go ahead and crank it in two,

2682
03:05:23,300 --> 03:05:27,900
02, and just so I can see if

2683
03:05:30,000 --> 03:05:31,300
What I remember is feeling is there.

2684
03:05:39,500 --> 03:05:40,400
Wait, where?

2685
03:05:43,100 --> 03:05:43,800
Where are we?

2686
03:05:45,300 --> 03:05:47,500
How come we're not showing up in here?

2687
03:05:50,200 --> 03:05:50,800
What the hay?

2688
03:05:55,500 --> 03:05:56,000
There we go.

2689
03:06:02,800 --> 03:06:03,300
It's a now.

2690
03:06:03,300 --> 03:06:04,500
We're nice and stable.

2691
03:06:07,900 --> 03:06:09,500
And in theory tracking all the memory.

2692
03:06:10,400 --> 03:06:14,300
So now we know exactly where all of our memory is and who allocated

2693
03:06:14,300 --> 03:06:15,200
it, right?

2694
03:06:18,400 --> 03:06:25,500
And so in theory, I want to say that then we can just go ahead and

2695
03:06:26,300 --> 03:06:27,700
take the profile.

2696
03:06:33,400 --> 03:06:34,400
Information.

2697
03:06:34,400 --> 03:06:39,500
Like we were doing here where we created like a profile group.

2698
03:06:44,200 --> 03:06:48,100
I feel like we can then just put, you know, like

2699
03:06:49,900 --> 03:06:52,700
Debug state memory group like this.

2700
03:06:53,200 --> 03:06:57,600
And so in the like profile Group by just say, like all right, make one

2701
03:06:57,600 --> 03:07:02,600
of these things where we're going to have a memory display that just

2702
03:07:02,600 --> 03:07:05,100
hangs around and does whatever it does.

2703
03:07:07,100 --> 03:07:12,600
And I like how we were, we actually didn't even have the macro for

2704
03:07:12,600 --> 03:07:12,900
that.

2705
03:07:12,900 --> 03:07:14,900
It's this system needs a cleanup someday.

2706
03:07:15,900 --> 03:07:17,300
It's close to being good.

2707
03:07:17,400 --> 03:07:19,600
Actually, it's not that far.

2708
03:07:19,700 --> 03:07:24,100
Just a few bad decisions that if you just undid them, it would be

2709
03:07:24,400 --> 03:07:25,300
pretty sweet.

2710
03:07:26,900 --> 03:07:30,100
So I think that we just need to

2711
03:07:33,300 --> 03:07:35,700
you know, be able to add to the

2712
03:07:37,000 --> 03:07:40,400
you're this this route Profile Event bit here.

2713
03:07:41,900 --> 03:07:43,100
I'm just not sure.

2714
03:07:43,100 --> 03:07:49,100
I know how you set that up because I don't remember how we were doing

2715
03:07:49,100 --> 03:07:49,400
it.

2716
03:07:50,400 --> 03:07:57,300
I'm going to look and see who actually mux with that and how they

2717
03:07:57,300 --> 03:07:59,900
could figure like what it's going to show, you know.

2718
03:08:08,100 --> 03:08:09,600
Look, I don't really know.

2719
03:08:19,600 --> 03:08:22,700
Like how do you tell that thing that you want to see like the frame

2720
03:08:22,700 --> 03:08:23,700
displaying stuff?

2721
03:08:23,900 --> 03:08:24,700
You know what I mean?

2722
03:08:26,300 --> 03:08:27,200
I have no idea.

2723
03:08:34,300 --> 03:08:36,700
It's all just as very unnecessarily complicated.

2724
03:08:40,600 --> 03:08:43,700
Cuz you know, like I want to be able to do that for the memory group

2725
03:08:44,100 --> 03:08:48,000
and I just don't actually know.

2726
03:08:50,500 --> 03:08:53,400
Like how did it know that here's the route group?

2727
03:08:53,800 --> 03:08:55,100
Here's the function group.

2728
03:08:55,200 --> 03:08:56,600
Here's the profile group, right?

2729
03:08:56,800 --> 03:08:59,900
The profile group is, what you would.

2730
03:09:00,100 --> 03:09:00,600
Viewing.

2731
03:09:00,600 --> 03:09:03,300
And somehow that thing knows.

2732
03:09:05,100 --> 03:09:07,700
What it should do.

2733
03:09:07,700 --> 03:09:10,800
But how did it know that?

2734
03:09:15,500 --> 03:09:16,700
Does it get somewhere?

2735
03:09:25,600 --> 03:09:26,800
Apparently not.

2736
03:09:32,700 --> 03:09:36,900
Yeah, so I just don't know how that ends up getting set because, like,

2737
03:09:37,000 --> 03:09:38,900
just to sort of explain what?

2738
03:09:38,900 --> 03:09:42,400
I'm not remembering about how we did this stuff.

2739
03:09:52,000 --> 03:09:55,500
I thought you needed to set a thing like this demo profiling thing,

2740
03:09:55,500 --> 03:09:55,800
right?

2741
03:09:55,800 --> 03:09:57,200
That's what this is.

2742
03:09:57,200 --> 03:09:59,900
What it sets when you want to.

2743
03:09:59,900 --> 03:10:00,900
Look at that.

2744
03:10:04,900 --> 03:10:07,200
when you want to look at that using the debug system, you know, it

2745
03:10:07,200 --> 03:10:09,200
just sets it here and then

2746
03:10:12,800 --> 03:10:13,800
That's what it.

2747
03:10:13,800 --> 03:10:18,200
That's what the the thing uses to determine what it should display.

2748
03:10:18,400 --> 03:10:19,000
Right?

2749
03:10:19,000 --> 03:10:20,700
That's how this thing works.

2750
03:10:21,600 --> 03:10:24,500
At least I thought, but maybe that's not true.

2751
03:10:24,500 --> 03:10:29,800
I guess I could look at debug mode profiling here and see what it

2752
03:10:29,800 --> 03:10:31,000
actually does.

2753
03:10:31,100 --> 03:10:32,100
But

2754
03:10:37,500 --> 03:10:40,500
So I guess this is how we did it.

2755
03:10:41,900 --> 03:10:46,200
Okay, so I guess if we want something here we would say like here's

2756
03:10:46,200 --> 03:10:47,400
the memory of you.

2757
03:10:50,900 --> 03:10:51,700
I guess.

2758
03:11:00,300 --> 03:11:02,000
and then here we could say,

2759
03:11:10,300 --> 03:11:11,600
I don't know what this.

2760
03:11:13,100 --> 03:11:13,900
Means.

2761
03:11:15,500 --> 03:11:16,300
Either.

2762
03:11:17,400 --> 03:11:18,400
Probably just a name.

2763
03:11:21,400 --> 03:11:22,100
I guess.

2764
03:11:23,700 --> 03:11:26,900
So I don't really know if this will work because this is weird.

2765
03:11:34,400 --> 03:11:35,400
And kind of stupid.

2766
03:11:40,600 --> 03:11:41,000
Yeah.

2767
03:11:42,900 --> 03:11:45,000
So what I want to do here, right?

2768
03:11:45,000 --> 03:11:51,400
Is I want to now have a way of viewing, what these are rinas, actually

2769
03:11:51,500 --> 03:11:53,200
are showing right?

2770
03:11:54,000 --> 03:11:55,000
What they're tracking.

2771
03:11:56,900 --> 03:11:59,800
and there's a lot of different ways that I can do that, but

2772
03:12:00,000 --> 03:12:03,700
I want to do first is just do a simple summary of you.

2773
03:12:04,400 --> 03:12:07,700
So if you look at what happens here, right, we've got like,

2774
03:12:10,500 --> 03:12:12,200
Top clocks list.

2775
03:12:14,200 --> 03:12:16,100
I don't know what debug memory info is.

2776
03:12:16,100 --> 03:12:19,700
So it's that element that just prints like, the basic information,

2777
03:12:19,700 --> 03:12:20,100
right?

2778
03:12:20,200 --> 03:12:24,700
Like if you look at the profile view, here's what we kind of stacked

2779
03:12:24,700 --> 03:12:26,200
up on their right.

2780
03:12:27,800 --> 03:12:30,400
And so those

2781
03:12:32,100 --> 03:12:32,800
Calls.

2782
03:12:32,800 --> 03:12:33,800
Create this thing.

2783
03:12:33,800 --> 03:12:34,600
That's the frame.

2784
03:12:34,600 --> 03:12:35,300
Slider.

2785
03:12:35,700 --> 03:12:38,000
That's the last frame info.

2786
03:12:40,400 --> 03:12:41,600
Probably here.

2787
03:12:43,400 --> 03:12:47,000
Although, I don't know what last framing for is because I don't know

2788
03:12:47,000 --> 03:12:50,200
which one that this is, if his last frame in, for a debug memory info.

2789
03:12:50,200 --> 03:12:51,000
I'm not sure.

2790
03:12:52,900 --> 03:12:56,600
And then the top clocks list is this thing right with these buttons on

2791
03:12:56,600 --> 03:12:59,000
it, that kind of shows us what the profile looks like.

2792
03:13:00,700 --> 03:13:03,900
And so, what we want to do is probably something similar to that for

2793
03:13:03,900 --> 03:13:05,200
our Arenas, right?

2794
03:13:06,500 --> 03:13:09,800
And so I think we can just yeah, the name came through there.

2795
03:13:09,800 --> 03:13:11,400
So I guess we want to see like,

2796
03:13:14,500 --> 03:13:19,200
Should I call this like I used memory or something?

2797
03:13:19,200 --> 03:13:20,100
I don't even know.

2798
03:13:24,400 --> 03:13:28,600
But what I should be able to do now is kind of just copy the thing

2799
03:13:28,600 --> 03:13:29,900
that list.

2800
03:13:29,900 --> 03:13:38,400
So like inside the debug system where we actually draw the top clocks

2801
03:13:38,400 --> 03:13:40,300
list or back on stuff, right?

2802
03:13:44,300 --> 03:13:48,300
um, so in draw top clocks list you can see

2803
03:13:52,400 --> 03:13:57,500
Where were sort of, you know, placing these pieces of information?

2804
03:13:57,500 --> 03:14:04,500
Like here, is all that stuff and the top clock list itself, we can see

2805
03:14:04,500 --> 03:14:05,100
here.

2806
03:14:06,400 --> 03:14:09,700
We create some buttons that allow us to like switch, what's actually

2807
03:14:09,700 --> 03:14:10,700
going on.

2808
03:14:11,900 --> 03:14:17,500
And we probably want that to be the case with the memory system as

2809
03:14:17,500 --> 03:14:18,000
well.

2810
03:14:18,900 --> 03:14:23,900
So I'm just going to go ahead and say that we probably do something

2811
03:14:23,900 --> 03:14:25,200
like this.

2812
03:14:33,600 --> 03:14:34,300
Right.

2813
03:14:38,400 --> 03:14:40,600
And I guess the graph.

2814
03:14:45,500 --> 03:14:47,300
There's the debug view profile.

2815
03:14:47,300 --> 03:14:48,400
Graph thing here.

2816
03:14:52,700 --> 03:14:57,800
We've already got one for Arenas so we should probably use it.

2817
03:15:02,200 --> 03:15:04,900
I don't know what we're going to store in there but probably

2818
03:15:04,900 --> 03:15:06,300
something, right.

2819
03:15:08,300 --> 03:15:09,200
And

2820
03:15:11,200 --> 03:15:15,600
So when we do this, debug memory, if you encounter this, we probably

2821
03:15:15,600 --> 03:15:18,500
want to put the stuff we want to have here.

2822
03:15:18,500 --> 03:15:27,700
So we can say like, you know, Arenas or like, you know, totals Arenas

2823
03:15:27,700 --> 03:15:30,400
frames or totals or something like that.

2824
03:15:35,900 --> 03:15:36,500
I don't know.

2825
03:15:37,600 --> 03:15:41,800
And then, in here, when we've got these debug types, instead of memory

2826
03:15:41,800 --> 03:15:46,900
info, we would do is say, like which ones we actually wanted.

2827
03:15:47,200 --> 03:15:51,200
So, where we say,

2828
03:15:56,700 --> 03:15:58,300
People type two big memory, info.

2829
03:15:59,200 --> 03:16:03,000
That's actually going to have like a couple different things.

2830
03:16:03,100 --> 03:16:09,200
So like this would be like debug type Arenas, debug type

2831
03:16:13,700 --> 03:16:20,000
Arenas like, maybe arenas by frame arenas, by Arena, right, or like,

2832
03:16:21,200 --> 03:16:27,700
memory by Arena memory, by frame memory by total,

2833
03:16:32,100 --> 03:16:33,100
By size.

2834
03:16:34,500 --> 03:16:39,800
Um, something like that and so that we could just have those work the

2835
03:16:39,800 --> 03:16:40,300
same way.

2836
03:16:40,300 --> 03:16:41,400
The other stuff works.

2837
03:16:41,400 --> 03:16:51,200
So in here, like get rid of that and just say, give me these sets

2838
03:16:51,200 --> 03:16:51,600
here.

2839
03:16:54,100 --> 03:16:57,600
and that way, we print this out, we would say like memory by Arena

2840
03:16:59,700 --> 03:17:00,500
by frame.

2841
03:17:02,000 --> 03:17:03,000
and by size,

2842
03:17:05,900 --> 03:17:06,300
You know what I mean?

2843
03:17:07,500 --> 03:17:10,200
All right and so we probably won't even those I'm already way over

2844
03:17:10,200 --> 03:17:14,100
time because I got kind of a little too into it but that's basically

2845
03:17:14,100 --> 03:17:14,700
all I want to do.

2846
03:17:14,700 --> 03:17:21,700
So here we would say like the memory by size or something like that,

2847
03:17:21,900 --> 03:17:23,100
probably maybe.

2848
03:17:27,000 --> 03:17:27,500
Ends up.

2849
03:17:27,500 --> 03:17:28,900
We'll just do a really basic one.

2850
03:17:28,900 --> 03:17:32,200
Now to see if we're if this thing's working at all and then next

2851
03:17:32,200 --> 03:17:35,400
weekend, we'll do it more fun version.

2852
03:17:36,500 --> 03:17:44,800
So let's go ahead and say that, I don't know what this is going to do

2853
03:17:44,800 --> 03:17:45,300
right now.

2854
03:17:45,300 --> 03:17:49,000
That's probably going to look at what arena were actually talking

2855
03:17:49,000 --> 03:17:49,300
about here.

2856
03:17:49,300 --> 03:17:50,600
So I'm going to leave that.

2857
03:17:50,800 --> 03:17:51,900
That route button out.

2858
03:17:51,900 --> 03:17:53,500
We probably will use it eventually.

2859
03:17:54,100 --> 03:17:55,700
But for right now, I'm not going to bother

2860
03:17:56,400 --> 03:17:59,800
and what we should see now is that if

2861
03:18:00,000 --> 03:18:01,800
Actually, look at the memory graph.

2862
03:18:03,300 --> 03:18:05,000
Well, that didn't actually

2863
03:18:07,300 --> 03:18:09,700
Do you even remotely what I was expecting?

2864
03:18:13,100 --> 03:18:14,500
How did it even draw that?

2865
03:18:25,600 --> 03:18:28,700
Who is calling draw Arena occupancy in the first place because nobody

2866
03:18:28,700 --> 03:18:29,200
should be.

2867
03:18:33,600 --> 03:18:34,000
Oops.

2868
03:18:42,500 --> 03:18:45,000
Okay, so, Arena occupancy.

2869
03:18:52,700 --> 03:18:56,900
Oh wait, did I do something stupid here?

2870
03:18:57,000 --> 03:18:57,900
I don't think I did.

2871
03:18:58,800 --> 03:19:00,200
That was actually different type.

2872
03:19:02,400 --> 03:19:07,100
So, that was actually something that was in here and just not used.

2873
03:19:09,500 --> 03:19:10,000
Right.

2874
03:19:11,100 --> 03:19:12,000
Which is nuts.

2875
03:19:12,800 --> 03:19:13,500
But okay.

2876
03:19:13,900 --> 03:19:16,600
So basically this

2877
03:19:19,400 --> 03:19:20,500
In the profile.

2878
03:19:25,200 --> 03:19:29,600
I totally just because there actually wasn't one of those Arena

2879
03:19:29,600 --> 03:19:31,900
occupancy needs to go away.

2880
03:19:32,600 --> 03:19:33,500
It's not a thing.

2881
03:19:44,400 --> 03:19:49,300
Yeah, so this whole thing needs to be saved for later is I guess what

2882
03:19:49,300 --> 03:19:50,900
I'm saying, right?

2883
03:19:53,300 --> 03:19:55,200
But that is kind of what I wanted.

2884
03:19:55,200 --> 03:20:00,200
So, I want this to sort of be what we would base the codon, right?

2885
03:20:00,200 --> 03:20:03,100
So we want to save it, I don't want it to go away.

2886
03:20:07,800 --> 03:20:08,400
There we go.

2887
03:20:09,900 --> 03:20:10,900
And so yeah.

2888
03:20:10,900 --> 03:20:14,800
We do actually want this stuff to do something eventually, right?

2889
03:20:22,000 --> 03:20:25,800
So now if I run it, I should get in the profile.

2890
03:20:26,700 --> 03:20:30,800
It should just be what it was before, which it does look like in the

2891
03:20:30,800 --> 03:20:31,800
memory subsystem.

2892
03:20:31,800 --> 03:20:34,600
I should just have these which I can pick now.

2893
03:20:34,600 --> 03:20:37,500
Unfortunately, that's actually switching me to a totally different

2894
03:20:37,500 --> 03:20:42,000
type because I didn't actually correctly make these.

2895
03:20:42,400 --> 03:20:46,900
So I want to actually have these set to memory by Arena.

2896
03:20:50,400 --> 03:20:51,500
Everybody frame.

2897
03:20:53,400 --> 03:20:58,600
Remember by size and then I do want this stuff to happen as well.

2898
03:20:59,200 --> 03:20:59,800
So,

2899
03:21:00,200 --> 03:21:05,300
Basically like this.

2900
03:21:13,600 --> 03:21:16,000
Still pretty much wants to happen.

2901
03:21:20,300 --> 03:21:25,500
I don't know what this value wants to do with its life, but probably

2902
03:21:25,500 --> 03:21:26,300
not much.

2903
03:21:37,900 --> 03:21:40,800
But these are going to be the things where we actually call out to

2904
03:21:40,800 --> 03:21:43,700
some function that visualizes the memory somehow.

2905
03:21:48,400 --> 03:21:55,000
And then yeah, I don't know what this is supposed to be.

2906
03:21:57,500 --> 03:21:59,600
Yeah and this stuff didn't mean anything anymore.

2907
03:21:59,600 --> 03:22:00,500
That's why we got rid of it.

2908
03:22:00,500 --> 03:22:01,200
Okay, I see.

2909
03:22:05,800 --> 03:22:07,300
All right, so that's just done.

2910
03:22:08,200 --> 03:22:10,300
So I think this is everything we need now.

2911
03:22:10,300 --> 03:22:12,900
So we've done all of the infrastructure we have all the information,

2912
03:22:12,900 --> 03:22:16,600
and we just need to do the visualizations now and we can totally see

2913
03:22:16,600 --> 03:22:18,300
what's going on with the memory.

2914
03:22:20,100 --> 03:22:20,700
In theory.

2915
03:22:23,000 --> 03:22:26,100
And so we can much like the one we did before we should be able to

2916
03:22:26,100 --> 03:22:30,900
like you know do it just like the profile where it comes up on their

2917
03:22:30,900 --> 03:22:31,400
right.

2918
03:22:33,000 --> 03:22:38,200
And so if we wanted to do memory by size top, clocks list is

2919
03:22:38,200 --> 03:22:41,500
basically, you know, it's basically what we want.

2920
03:22:41,700 --> 03:22:45,200
And so I feel like we should be able to do something where we kind of

2921
03:22:45,600 --> 03:22:47,000
know where we just use.

2922
03:22:52,800 --> 03:22:54,900
The same process.

2923
03:22:58,800 --> 03:22:59,700
Probably.

2924
03:23:00,700 --> 03:23:04,800
So like if I was to literally just just clone the sky, right?

2925
03:23:07,700 --> 03:23:12,300
and I don't know where the memory stuff was at the moment, but

2926
03:23:19,200 --> 03:23:21,400
so if here, I just said like okay,

2927
03:23:24,000 --> 03:23:27,700
Go ahead and do a truck, an equivalent, right?

2928
03:23:33,200 --> 03:23:34,100
Of this.

2929
03:23:40,700 --> 03:23:45,600
Sort of if I wanted to do the same thing.

2930
03:23:45,900 --> 03:23:51,300
I feel like I probably just could so we know how many Arenas there are

2931
03:23:51,300 --> 03:23:53,500
by doing the exact same thing we're doing here, right?

2932
03:23:53,500 --> 03:23:58,900
So we could say either Garena equals Arena you know give your state

2933
03:23:59,300 --> 03:23:59,800
first girl.

2934
03:24:02,100 --> 03:24:05,900
Arena Arena, ankles Arena next, right?

2935
03:24:05,900 --> 03:24:07,300
I mean, that counts, the arenas.

2936
03:24:13,100 --> 03:24:19,800
Same thing, but we can create the Sorting situation here.

2937
03:24:25,600 --> 03:24:27,800
We can walk through these.

2938
03:24:28,400 --> 03:24:29,500
We can do the Radix.

2939
03:24:29,500 --> 03:24:33,800
Sort exactly the same way as we were doing it before.

2940
03:24:37,700 --> 03:24:39,100
In theory, I think.

2941
03:24:48,300 --> 03:24:52,400
Yeah, and then I think we literally can just spin through these and

2942
03:24:52,400 --> 03:24:53,200
write it down.

2943
03:24:53,900 --> 03:24:59,000
So for every one of these arenas,

2944
03:25:03,300 --> 03:25:06,800
in fact, you know, this is literally exactly the same.

2945
03:25:09,400 --> 03:25:11,600
Bright for every one of these Arenas.

2946
03:25:11,600 --> 03:25:15,200
As we go, we just need to track the index here.

2947
03:25:29,300 --> 03:25:32,000
So for every single one of these, I think we just do the same thing.

2948
03:25:32,000 --> 03:25:34,900
We just say that we have a total amount of memory.

2949
03:25:34,900 --> 03:25:39,000
I don't know that the are 60/40 is to happen over the statistics.

2950
03:25:39,000 --> 03:25:41,600
It does though so

2951
03:25:42,800 --> 03:25:44,500
I think we just do the same thing.

2952
03:25:44,700 --> 03:25:47,300
We just say total memory equal zero.

2953
03:25:48,600 --> 03:25:52,000
Don't ask me what the f doing on there because it's a double.

2954
03:25:54,000 --> 03:25:58,000
But for each one of these, we just say like okay whatever the entry

2955
03:25:58,000 --> 03:26:03,100
element is that's probably this.

2956
03:26:05,600 --> 03:26:08,400
And then we just do the stats from there.

2957
03:26:08,400 --> 03:26:13,700
So the entry arena is just the arena with talking about.

2958
03:26:15,300 --> 03:26:18,900
We won't need this that all works.

2959
03:26:19,900 --> 03:26:24,100
We then say the debug memory lock

2960
03:26:28,400 --> 03:26:29,600
Or sorry, either.

2961
03:26:29,600 --> 03:26:30,900
Arena block.

2962
03:26:43,200 --> 03:26:46,600
And we don't really need to know.

2963
03:26:46,600 --> 03:26:51,000
I mean, we could sort on two different metrics here, I guess.

2964
03:27:02,200 --> 03:27:07,100
we can sort on the total amount of used memory versus the total amount

2965
03:27:07,100 --> 03:27:07,600
of

2966
03:27:09,100 --> 03:27:10,300
Allocated memory.

2967
03:27:11,500 --> 03:27:16,400
And so I guess the statistic here isn't necessarily all that useful.

2968
03:27:21,300 --> 03:27:22,200
For us.

2969
03:27:29,800 --> 03:27:30,700
I want to look at this.

2970
03:27:37,100 --> 03:27:38,700
Actually, no, that seems very useful.

2971
03:27:38,700 --> 03:27:39,500
So I'm going to use it.

2972
03:27:40,800 --> 03:27:42,800
So what we do here is we say, okay?

2973
03:27:43,300 --> 03:27:46,000
We're going to accumulate our debug statistic here.

2974
03:27:47,200 --> 03:27:50,400
For the min max sum average count situation, right?

2975
03:27:50,700 --> 03:27:55,600
I could keep two of them, one for used and 14 total.

2976
03:27:56,300 --> 03:28:01,300
I don't know which one I want to do or if I want to do both, but maybe

2977
03:28:01,300 --> 03:28:02,200
I'll do both.

2978
03:28:11,000 --> 03:28:17,900
So if I came through here and I said, what we're going to allocate

2979
03:28:17,900 --> 03:28:20,200
this, we're going to use for each block.

2980
03:28:20,200 --> 03:28:24,600
I know the total that's been allocated because I can just say that

2981
03:28:26,600 --> 03:28:32,000
the debug information keeps that explicitly, right?

2982
03:28:32,000 --> 03:28:34,300
It's the size allocated inside the block.

2983
03:28:34,900 --> 03:28:36,200
So I just

2984
03:28:43,000 --> 03:28:48,000
I just cute allocated and used as my to stats.

2985
03:28:57,600 --> 03:28:59,000
like so I think

2986
03:29:05,800 --> 03:29:06,900
that seems right to me.

2987
03:29:11,000 --> 03:29:14,700
Yeah, and so for each of these, I just need to do the actual

2988
03:29:15,500 --> 03:29:16,400
accumulation.

2989
03:29:16,400 --> 03:29:20,800
And so for the allocated one, it's just the size that was allocated,

2990
03:29:20,800 --> 03:29:22,100
which we always know.

2991
03:29:23,200 --> 03:29:27,100
And so here, we just have that for this one.

2992
03:29:31,600 --> 03:29:34,600
We actually need to do an interior Loop, right?

2993
03:29:34,800 --> 03:29:37,400
We need to say Arena, allocation

2994
03:29:44,400 --> 03:29:49,200
And in here, we just say go ahead and accumulate whatever that

2995
03:29:49,800 --> 03:29:51,500
allocated size was.

2996
03:29:54,400 --> 03:29:57,400
And I think that's all we need.

2997
03:29:57,400 --> 03:29:59,800
The total amount of memory allocated.

2998
03:30:01,500 --> 03:30:03,000
And the total amount.

2999
03:30:08,700 --> 03:30:13,100
Can also be tracked through the process by just doing it here, right?

3000
03:30:17,300 --> 03:30:19,800
so, the total allocated

3001
03:30:27,500 --> 03:30:29,700
and the total used can just be

3002
03:30:34,600 --> 03:30:37,300
Summed up, we probably shouldn't use two levels of statistics for

3003
03:30:37,300 --> 03:30:37,500
that.

3004
03:30:37,500 --> 03:30:41,900
I'm not sure why we don't, but we don't for the sort key.

3005
03:30:41,900 --> 03:30:45,700
What we want to do here is just take whoever is largest.

3006
03:30:45,700 --> 03:30:46,400
So

3007
03:30:49,600 --> 03:30:52,700
I guess it's goes in negative Direction so I guess we do want this.

3008
03:30:53,100 --> 03:30:58,900
We probably want allocated but we may want to do used as well for

3009
03:30:58,900 --> 03:30:59,300
later.

3010
03:30:59,400 --> 03:31:00,900
I don't know what you do.

3011
03:31:00,900 --> 03:31:02,300
The Radix sort.

3012
03:31:06,800 --> 03:31:10,300
I guess this is kind of doing printouts here.

3013
03:31:14,700 --> 03:31:17,700
Not sure exactly how that wants to work.

3014
03:31:21,100 --> 03:31:23,900
If the total time, it's 1 over the total time.

3015
03:31:23,900 --> 03:31:26,900
So this would just be like the total allocated, right?

3016
03:31:31,400 --> 03:31:34,100
But that's like the percentage so that's the percentage total

3017
03:31:34,100 --> 03:31:35,700
allocated percentage.

3018
03:31:35,700 --> 03:31:40,100
Clocks probably what it meant should be Pa, probably, now if we were

3019
03:31:40,100 --> 03:31:43,100
being pedantic about it.

3020
03:31:43,800 --> 03:31:49,300
So once we come through here, we should be able to do like

3021
03:31:54,000 --> 03:31:56,200
Like allocated mused.

3022
03:32:00,800 --> 03:32:01,800
Like so.

3023
03:32:05,000 --> 03:32:08,100
And we know the arena cuz we kept that information.

3024
03:32:10,400 --> 03:32:13,600
Again, the running sum, I don't know which one you want to do.

3025
03:32:13,800 --> 03:32:16,600
It's that's why it's a little confusing but we could use allocated for

3026
03:32:16,600 --> 03:32:17,000
now.

3027
03:32:18,500 --> 03:32:24,000
We then want to go ahead and put a, you know, sort of a way of

3028
03:32:24,000 --> 03:32:30,100
printing out, whatever this information is, which I don't really know

3029
03:32:30,100 --> 03:32:31,700
exactly how we want to do that.

3030
03:32:32,900 --> 03:32:39,500
But in terms of what we've got to show, we pretty much know, we know

3031
03:32:39,500 --> 03:32:42,300
like how many blocks there were which is I guess another thing we

3032
03:32:42,300 --> 03:32:43,600
should have probably counted.

3033
03:32:43,600 --> 03:32:44,800
In fact let's count that.

3034
03:32:47,000 --> 03:32:49,600
Oh wait, we do know that.

3035
03:32:57,100 --> 03:32:59,700
so, in here, the

3036
03:33:00,000 --> 03:33:03,800
Once on the debug statistic for allocated would tell us that.

3037
03:33:04,500 --> 03:33:08,100
So basically, what we would want to do, there is just say

3038
03:33:11,100 --> 03:33:11,500
Yeah.

3039
03:33:11,500 --> 03:33:16,100
Like you know even know how we want to show this it's kind of

3040
03:33:16,100 --> 03:33:21,700
complicated so we've got the arena name which you know may or may not

3041
03:33:21,700 --> 03:33:23,000
be something human-readable.

3042
03:33:23,000 --> 03:33:28,000
We hope it is certainly and then we've got a bunch of information we

3043
03:33:28,000 --> 03:33:28,900
can print out here.

3044
03:33:28,900 --> 03:33:31,500
How many blocks there are, all that kind of stuff.

3045
03:33:35,000 --> 03:33:38,000
So I don't know what we want to do with this.

3046
03:33:38,000 --> 03:33:42,100
Number four percent 10, you see why there or whatever?

3047
03:33:42,100 --> 03:33:46,900
But probably we just wanted to like the MB of the thing.

3048
03:33:49,000 --> 03:33:54,000
so we would say something like MB there and so we would say like the

3049
03:33:54,000 --> 03:34:00,600
allocated some you know, / MB

3050
03:34:04,800 --> 03:34:05,200
Oops.

3051
03:34:08,700 --> 03:34:13,400
That casted would give us a megabyte number it probably doesn't need

3052
03:34:13,400 --> 03:34:17,600
to be 10 long because how would you allocate that many megabytes?

3053
03:34:18,900 --> 03:34:22,100
So what we want to do with that is probably printed out in something

3054
03:34:22,100 --> 03:34:26,200
that's like you know nothing's going to be more than a couple GB even

3055
03:34:26,200 --> 03:34:27,800
in the most ridiculous scenarios.

3056
03:34:27,800 --> 03:34:30,100
So we're probably talking about something like a percent for their

3057
03:34:30,100 --> 03:34:30,600
right.

3058
03:34:33,100 --> 03:34:38,600
so then we've got our actual floating-point number, which is going to

3059
03:34:38,600 --> 03:34:39,600
tell us now,

3060
03:34:42,400 --> 03:34:45,400
What percentage of the allocations total in the system?

3061
03:34:45,400 --> 03:34:47,800
This was taking up, right?

3062
03:34:48,800 --> 03:34:51,600
And then we've got information, like, how many allocations there were

3063
03:34:51,600 --> 03:34:54,700
and how many blocks there were and stuff like that.

3064
03:34:55,400 --> 03:34:58,500
So we could do for those.

3065
03:34:58,500 --> 03:35:04,000
Like, we could say, the allocated count and the used counts,

3066
03:35:09,200 --> 03:35:09,800
I don't know.

3067
03:35:16,700 --> 03:35:18,300
I'm going to get rid of this for now.

3068
03:35:20,900 --> 03:35:25,400
But we probably do want to hover tooltip on that at some point.

3069
03:35:29,200 --> 03:35:31,500
That's off the block, my bad.

3070
03:35:35,900 --> 03:35:38,500
So the Radix sort needs Arena counts.

3071
03:35:38,500 --> 03:35:39,300
Same here.

3072
03:35:46,900 --> 03:35:50,800
And the PC PA.

3073
03:35:51,600 --> 03:35:53,600
All right, so let's just see.

3074
03:35:53,600 --> 03:35:58,500
Now if we've got anything resembling anything here, I don't know what

3075
03:35:58,500 --> 03:35:59,900
temp name is for but it was probably

3076
03:36:00,000 --> 03:36:03,000
For constructing the name of the thing which we don't actually use, we

3077
03:36:03,000 --> 03:36:04,300
just have the name now.

3078
03:36:05,700 --> 03:36:10,000
So if we go and let's take a look at what that actually displays.

3079
03:36:13,700 --> 03:36:18,100
Okay, well, displaying nothing was not what I was hoping for in case

3080
03:36:18,100 --> 03:36:23,700
anyone was wondering, but to be fair to me, if you want something to

3081
03:36:23,700 --> 03:36:25,500
draw, you have to actually call it.

3082
03:36:26,600 --> 03:36:28,100
And so, one of the things that

3083
03:36:30,700 --> 03:36:34,100
You'll learn about CPUs as if you never tell them to Branch somewhere,

3084
03:36:34,300 --> 03:36:34,900
it turns out.

3085
03:36:34,900 --> 03:36:41,100
They usually won't know, sometimes they still will, but usually they

3086
03:36:41,100 --> 03:36:41,500
won't.

3087
03:36:42,300 --> 03:36:44,500
So, let's try that one more time and actually try calling her

3088
03:36:44,500 --> 03:36:44,800
function.

3089
03:36:44,800 --> 03:36:50,300
This time, the debug element root elements is not actually something

3090
03:36:50,300 --> 03:36:50,700
we need.

3091
03:36:50,700 --> 03:36:52,200
So that should probably go away.

3092
03:36:53,100 --> 03:36:57,300
We do want the rest of this stuff, though, to be occurring.

3093
03:36:57,700 --> 03:36:59,700
So, yeah, we want that to happen.

3094
03:37:00,400 --> 03:37:03,300
If I go look, I want to see how we're calling top clocks list to make

3095
03:37:03,300 --> 03:37:08,400
sure basically the same way because we want this to be effectively the

3096
03:37:08,400 --> 03:37:09,300
same thing.

3097
03:37:09,900 --> 03:37:14,400
So, when we call Tops clocks list, we're calling it with the debug

3098
03:37:14,400 --> 03:37:19,500
State, the debug ID here, the layout elements boundary,

3099
03:37:21,200 --> 03:37:25,000
And the mouse pee from the layout and that's it.

3100
03:37:25,300 --> 03:37:28,900
If I go back here I'm just going to get rid of that root element

3101
03:37:28,900 --> 03:37:30,500
because that shouldn't be used.

3102
03:37:30,500 --> 03:37:34,000
We have the Arenas in a separate storage location.

3103
03:37:39,200 --> 03:37:41,100
I am so now let's see if we got anything.

3104
03:37:43,800 --> 03:37:46,200
We've got a problem with our print out.

3105
03:37:52,800 --> 03:37:55,000
Oh, and yeah, we sure do.

3106
03:37:55,800 --> 03:38:00,100
So I forgot to I said, present for but I didn't actually say

3107
03:38:03,500 --> 03:38:04,700
what it should print it as

3108
03:38:06,800 --> 03:38:07,700
where is that guy?

3109
03:38:11,500 --> 03:38:14,100
So that wants to be an unsigned value there.

3110
03:38:20,700 --> 03:38:21,300
One more time.

3111
03:38:24,600 --> 03:38:25,200
All right.

3112
03:38:25,300 --> 03:38:25,700
Mmm.

3113
03:38:27,000 --> 03:38:33,500
So looking at this stuff here, we should probably name the suppressed

3114
03:38:33,500 --> 03:38:37,300
one and we've got to that that didn't get names.

3115
03:38:37,300 --> 03:38:40,700
We might want to try to figure out how to associate the names of them,

3116
03:38:40,700 --> 03:38:46,300
but you can kind of see now more or less, probably exactly what you

3117
03:38:46,300 --> 03:38:47,700
would have expected, right?

3118
03:38:47,700 --> 03:38:52,700
You can see that the debug system tracks, like a lot of stuff so it's

3119
03:38:52,700 --> 03:38:53,800
eating up a ton of memory.

3120
03:38:53,800 --> 03:38:56,600
We don't care about that as long as it doesn't crash or sister or

3121
03:38:56,600 --> 03:38:56,900
something because

3122
03:38:57,000 --> 03:38:59,900
it's just debug the game itself is running.

3123
03:39:00,000 --> 03:39:02,200
In sixty nine megabytes of memory right now.

3124
03:39:03,500 --> 03:39:04,600
There's a frame.

3125
03:39:05,700 --> 03:39:07,800
There's a frame temporary storage.

3126
03:39:07,800 --> 03:39:11,000
That's sitting at two megabytes, but it's important to remember that.

3127
03:39:11,000 --> 03:39:15,700
This, we probably need some additional additional statistics tracking,

3128
03:39:16,100 --> 03:39:20,600
to actually know some of that information because by the time we come

3129
03:39:20,600 --> 03:39:26,800
back around, we met because it's constantly getting like used a little

3130
03:39:26,800 --> 03:39:29,800
and shrunk, back potentially, the two megabytes is

3131
03:39:30,000 --> 03:39:34,200
Is like what it ends on before it gets flushed for the next frame, but

3132
03:39:34,200 --> 03:39:36,400
it could have like used quite a bit more than that.

3133
03:39:37,300 --> 03:39:45,200
But anyway, so you can now see exactly what those memory layouts are,

3134
03:39:45,200 --> 03:39:47,100
and who's using, what memory and for what?

3135
03:39:47,200 --> 03:39:48,900
And this is exactly what we want to see.

3136
03:39:48,900 --> 03:39:50,200
We want to see basically.

3137
03:39:50,600 --> 03:39:53,800
We don't care about this buddy, but when we want to see, like

3138
03:39:53,800 --> 03:39:57,800
everything in asset storage, because the best possible scenario for

3139
03:39:57,800 --> 03:39:59,800
our game, is we just use

3140
03:40:00,100 --> 03:40:05,200
As much memory the machine as we can to store our assets and nothing

3141
03:40:05,200 --> 03:40:06,900
gets used for anything else, right?

3142
03:40:06,900 --> 03:40:12,000
No, Pig leanness anywhere else and so so there's our memory sort of

3143
03:40:13,700 --> 03:40:15,000
analysis there, right?

3144
03:40:16,000 --> 03:40:19,000
And so if we want to draw the Arena's, that would be more similar to

3145
03:40:19,000 --> 03:40:21,900
the thing where we're drawing like the frame layout and that would

3146
03:40:21,900 --> 03:40:29,500
show like who was doing what in each of those Arenas doing that.

3147
03:40:29,600 --> 03:40:29,800
I don't know.

3148
03:40:29,900 --> 03:40:30,500
How hard that would be?

3149
03:40:30,500 --> 03:40:32,200
I'll take a flying leap at it now.

3150
03:40:34,000 --> 03:40:38,800
So I going to say oh let me add to that suppress called the actual

3151
03:40:38,800 --> 03:40:39,300
name.

3152
03:40:39,800 --> 03:40:42,900
And so when we have in the debug interface

3153
03:40:45,400 --> 03:40:48,200
When we suppress the arena, I'm going to go ahead and give it a name

3154
03:40:48,200 --> 03:40:48,700
as well.

3155
03:40:49,700 --> 03:40:52,200
So in here, we do debug arena name.

3156
03:40:53,900 --> 03:40:57,400
I'm gonna do that, right?

3157
03:41:08,200 --> 03:41:12,100
And that way, we can properly, mark it as the debugger Arena and

3158
03:41:12,100 --> 03:41:13,600
that'll be good, right?

3159
03:41:14,000 --> 03:41:16,400
So let's see here.

3160
03:41:22,800 --> 03:41:26,100
Where the other Arenas are coming from that are still persisting.

3161
03:41:26,600 --> 03:41:33,100
I'm guessing maybe they're ones that are coming from like,

3162
03:41:36,800 --> 03:41:38,300
Maybe the platform layer.

3163
03:41:42,300 --> 03:41:45,400
I don't know, we'll have to go see who they're coming from, but it

3164
03:41:45,400 --> 03:41:47,000
should be pretty obvious eventually.

3165
03:41:47,600 --> 03:41:51,000
All right, so now we should see is like the debug one is properly

3166
03:41:51,000 --> 03:41:53,600
marked as debug which is fine.

3167
03:41:55,700 --> 03:41:58,400
And we may want to remove that one as well.

3168
03:41:59,400 --> 03:41:59,800
So,

3169
03:42:00,000 --> 03:42:03,100
We may want to have a toggle here that says, whether you want to see

3170
03:42:03,100 --> 03:42:07,600
that one or not and so that way you can look at your percentages

3171
03:42:07,600 --> 03:42:13,100
without debug sitting in their car like sort of crumpling.

3172
03:42:13,100 --> 03:42:13,800
Crunking it up.

3173
03:42:13,800 --> 03:42:19,400
Let's say, so what I want to do now is just take a flying leap at

3174
03:42:19,400 --> 03:42:23,200
putting in the occupancy version, just to see how it looks.

3175
03:42:24,100 --> 03:42:29,600
If we take a look at the profile version of this, so we've got the top

3176
03:42:29,600 --> 03:42:29,800
men.

3177
03:42:30,000 --> 03:42:34,500
Plus version, this doesn't need to be here, does it anymore?

3178
03:42:34,500 --> 03:42:34,900
No.

3179
03:42:39,000 --> 03:42:43,500
So if we look at how this one's working, we've got the thread

3180
03:42:43,500 --> 03:42:43,900
interval.

3181
03:42:43,900 --> 03:42:46,200
Graph is really the one we want to look at there.

3182
03:42:47,600 --> 03:42:53,600
And so I want to do the same thing as doing here and do like draw

3183
03:42:55,300 --> 03:42:58,100
Arena interval graph, or something.

3184
03:43:01,500 --> 03:43:06,800
And so, at draw top men list in here, I want to do the same thing that

3185
03:43:06,800 --> 03:43:08,000
I was doing there.

3186
03:43:08,000 --> 03:43:10,200
Only now it's called this and not that.

3187
03:43:11,000 --> 03:43:15,300
And then what I want to do is I want to go to that draw profile in

3188
03:43:15,300 --> 03:43:19,900
thing and I want to do the same thing, right?

3189
03:43:21,000 --> 03:43:22,300
So I want to

3190
03:43:25,600 --> 03:43:29,700
Take one of these profile bars things and like figure out how to get

3191
03:43:29,700 --> 03:43:30,900
these two working.

3192
03:43:39,000 --> 03:43:39,500
There we go.

3193
03:43:41,500 --> 03:43:42,400
So

3194
03:43:43,500 --> 03:43:47,100
if we're going to do this, we need to know how many lanes there are,

3195
03:43:47,100 --> 03:43:50,700
but the number of lanes there are is just the number of Arenas there

3196
03:43:50,700 --> 03:43:51,700
are right.

3197
03:43:52,000 --> 03:43:54,600
And so we could just make a thing that's like, how many Arenas are

3198
03:43:54,600 --> 03:43:55,000
there.

3199
03:43:59,600 --> 03:44:01,600
And the number of Arenas is this.

3200
03:44:07,200 --> 03:44:09,200
And we could even cash that value if we felt like it.

3201
03:44:09,200 --> 03:44:10,800
So for some reason we didn't want to Loop over them.

3202
03:44:10,800 --> 03:44:13,100
But so few of them doesn't matter.

3203
03:44:18,400 --> 03:44:20,600
and so this way we can just ask how many there are

3204
03:44:22,600 --> 03:44:29,800
and when we then go through and draw these, we've got the link out in

3205
03:44:29,800 --> 03:44:32,400
the lane height stuff, that would be bad base to the same.

3206
03:44:33,000 --> 03:44:37,000
So we could have said, get Arena count for the jig's debug State.

3207
03:44:38,400 --> 03:44:44,000
That'll produce the lane height for us the frame stuff.

3208
03:44:54,700 --> 03:44:58,200
so really what we would need this for is if you wanted to like zoom in

3209
03:44:58,200 --> 03:44:59,200
on blocks,

3210
03:45:00,900 --> 03:45:01,700
Or something.

3211
03:45:18,600 --> 03:45:22,700
And and honestly, that just doesn't seem particularly

3212
03:45:25,500 --> 03:45:26,500
Plausible to me.

3213
03:45:26,500 --> 03:45:30,800
I'm just trying to think of how you actually do this, because the way

3214
03:45:30,800 --> 03:45:35,000
that this works is you want to be able to like see the blocks and see

3215
03:45:35,000 --> 03:45:40,100
where the allocations are inside the blocks, showing just the blocks

3216
03:45:40,100 --> 03:45:43,000
at first, and then you click on a block and it shows you the block,

3217
03:45:43,100 --> 03:45:44,300
maybe that makes sense.

3218
03:46:03,400 --> 03:46:06,300
So I think maybe maybe that's what I should do.

3219
03:46:22,700 --> 03:46:23,200
I'll be honest.

3220
03:46:23,200 --> 03:46:26,900
That doesn't really make any sense to me anyway, because why would you

3221
03:46:26,900 --> 03:46:28,400
care about seeing the blocks?

3222
03:46:28,400 --> 03:46:32,000
The blocks are just a list of blocks like, who cares about that at

3223
03:46:32,000 --> 03:46:32,300
all.

3224
03:46:32,700 --> 03:46:35,300
So you really just only need to see the individual things.

3225
03:46:35,300 --> 03:46:39,600
And so I think what you want more is just to be able to pick a

3226
03:46:39,600 --> 03:46:42,200
particular Arena and then just see it's layout.

3227
03:46:42,300 --> 03:46:43,800
I mean, that's really all you need.

3228
03:46:44,500 --> 03:46:49,700
And so I think like honestly, we don't really need a drum memory bars

3229
03:46:49,700 --> 03:46:50,800
call here.

3230
03:46:52,200 --> 03:46:55,600
I can just go ahead and get this out in its entirety.

3231
03:46:55,600 --> 03:46:57,200
I think I want to say,

3232
03:47:02,100 --> 03:47:04,400
And then I'm going to dump that in here and we're going to take a look

3233
03:47:04,400 --> 03:47:05,000
at it.

3234
03:47:06,200 --> 03:47:10,300
So I think yeah.

3235
03:47:10,400 --> 03:47:15,900
Like we just want to know which Arena you're trying to view and maybe

3236
03:47:15,900 --> 03:47:18,700
we just draw those as a little like bars.

3237
03:47:18,700 --> 03:47:23,100
You can then click on assuming that you click on one we then see which

3238
03:47:23,100 --> 03:47:26,600
one it actually is, I guess.

3239
03:47:30,000 --> 03:47:34,700
That seems like the best thing.

3240
03:47:34,700 --> 03:47:37,500
Maybe, I don't know.

3241
03:47:38,600 --> 03:47:42,600
So maybe what I'll do first is, I won't even do that, right?

3242
03:47:43,400 --> 03:47:45,800
Maybe I'll just do a thing that's like look.

3243
03:47:56,500 --> 03:47:59,800
Maybe I'll do is I'll just draw like all the allocations as a bar.

3244
03:48:00,000 --> 03:48:03,000
In here and we'll just call it a day, right?

3245
03:48:04,100 --> 03:48:06,900
And we'll kind of figure out what we want to do after that.

3246
03:48:06,900 --> 03:48:15,500
So if we actually do this stuff in here, this is mostly all we need.

3247
03:48:15,500 --> 03:48:19,100
I think we don't need a depth.

3248
03:48:20,300 --> 03:48:26,900
Thing we just do that all of this goes away, I think.

3249
03:48:33,400 --> 03:48:37,300
And so really, we're just mainly talking about this stuff, right?

3250
03:48:38,400 --> 03:48:41,200
We're going to pull this, swell know, we kind of want this.

3251
03:48:42,000 --> 03:48:46,000
So what I want to do is for each Arena, I want to go through each

3252
03:48:46,000 --> 03:48:46,700
block.

3253
03:48:50,400 --> 03:48:50,800
Oops.

3254
03:48:59,900 --> 03:49:01,800
And then I want to go through each allocation.

3255
03:49:19,900 --> 03:49:24,700
then what I want to do is I just need a way of creating whatever the

3256
03:49:24,700 --> 03:49:28,400
rectangle is going to be for that, allocation

3257
03:49:30,700 --> 03:49:35,200
And if I just divided it up on Long, the screen, right?

3258
03:49:35,200 --> 03:49:39,400
I would have a bar and each chunk would be one of these allocations.

3259
03:49:39,800 --> 03:49:42,700
The problem is, I don't know how many allegations we have.

3260
03:49:42,700 --> 03:49:46,800
You know, if there's thousands of them, they're going to be too small

3261
03:49:46,900 --> 03:49:49,600
for you to actually get into one and pick.

3262
03:49:49,900 --> 03:49:53,200
But, you know, I could just have there be a zoom factor that you could

3263
03:49:53,200 --> 03:49:59,200
use to zoom in and out on them and maybe that's sufficient to solve

3264
03:49:59,200 --> 03:49:59,500
that

3265
03:49:59,600 --> 03:50:00,200
Problem.

3266
03:50:00,500 --> 03:50:04,900
But the other way to do it would be to actually use the full 2D space

3267
03:50:05,100 --> 03:50:08,300
and like actually sort of just stripe them in there.

3268
03:50:09,800 --> 03:50:12,700
And you draw like multiple rectangles if you would fill more than one

3269
03:50:12,700 --> 03:50:14,500
row or that kind of thing, right?

3270
03:50:15,000 --> 03:50:19,600
And so you know that does seem like something good.

3271
03:50:19,600 --> 03:50:21,600
Probably, I don't know.

3272
03:50:25,500 --> 03:50:29,500
using the color table here also would be good, but would probably just

3273
03:50:29,500 --> 03:50:31,500
do that by which,

3274
03:50:34,600 --> 03:50:37,600
In next we are on the actual allocations.

3275
03:50:37,700 --> 03:50:38,500
Probably.

3276
03:50:41,300 --> 03:50:41,900
Just guess.

3277
03:50:48,000 --> 03:50:49,900
So this would probably be something like this.

3278
03:50:57,500 --> 03:50:59,900
this part is the part, we don't really know exactly how

3279
03:51:00,000 --> 03:51:00,900
We're going to do it.

3280
03:51:01,500 --> 03:51:05,500
The lien index is just going to be whatever Arena you're in though for

3281
03:51:05,500 --> 03:51:06,000
now.

3282
03:51:07,600 --> 03:51:08,200
Right.

3283
03:51:21,900 --> 03:51:26,700
And then most of this stuff could closely can pretty much closely

3284
03:51:26,700 --> 03:51:28,200
resemble what we're actually doing here.

3285
03:51:30,300 --> 03:51:33,400
We don't need the getname bit.

3286
03:51:33,400 --> 03:51:34,900
I don't think.

3287
03:51:38,000 --> 03:51:42,100
I think you just want to see that grid because it's constructed for

3288
03:51:42,100 --> 03:51:43,900
just the name by itself.

3289
03:51:44,800 --> 03:51:51,900
So my assumption is you don't need that but I could be wrong.

3290
03:51:52,500 --> 03:51:53,600
So

3291
03:51:58,400 --> 03:52:01,000
yeah, so I think we don't need this.

3292
03:52:01,500 --> 03:52:03,000
We just need that.

3293
03:52:04,200 --> 03:52:08,700
That's what you wanted to know and you want to know what the allocated

3294
03:52:08,700 --> 03:52:09,700
size was.

3295
03:52:09,900 --> 03:52:10,500
Right?

3296
03:52:10,800 --> 03:52:14,900
So you want to know for this application, what were you actually

3297
03:52:14,900 --> 03:52:17,500
looking at here in terms of B?

3298
03:52:18,500 --> 03:52:22,000
So you want to know like exactly how many bytes there were in this

3299
03:52:22,000 --> 03:52:22,400
particular.

3300
03:52:22,400 --> 03:52:29,400
Allocation, we don't need that to be formatted out.

3301
03:52:29,400 --> 03:52:31,300
That way it can look like this.

3302
03:52:33,100 --> 03:52:36,400
so, assuming that we print that out,

3303
03:52:41,700 --> 03:52:44,100
I don't think there's any way to zoom on these

3304
03:52:46,100 --> 03:52:49,100
so, I think that's just a non-issue

3305
03:52:52,700 --> 03:52:54,800
So I think we're literally just looking at that.

3306
03:52:56,400 --> 03:52:59,400
And then for each of these, what we really just need to do is for out

3307
03:52:59,500 --> 03:53:02,000
where the heck, this thing goes right?

3308
03:53:02,900 --> 03:53:07,400
And so for each block, what we could do is just say, well maybe the

3309
03:53:07,400 --> 03:53:11,100
block, since we know the total size of the block, we just draw the

3310
03:53:11,100 --> 03:53:13,500
block and then draw the things inside the block.

3311
03:53:15,600 --> 03:53:17,100
Proportional to where they were.

3312
03:53:17,100 --> 03:53:19,800
Cuz that is the information that we needed, right?

3313
03:53:21,300 --> 03:53:25,100
And so we don't really know is how big the block should be.

3314
03:53:25,100 --> 03:53:31,000
I could count the number of blocks and do it that way or I could just

3315
03:53:31,000 --> 03:53:32,700
keep stacking blocks.

3316
03:53:35,400 --> 03:53:37,800
Until we run out of room, I don't really know.

3317
03:53:38,700 --> 03:53:39,200
That's a

3318
03:53:43,000 --> 03:53:45,400
That's a kind of weird situation.

3319
03:53:45,400 --> 03:53:49,800
I don't know the answer to maybe what we'll do is is that is exactly

3320
03:53:49,800 --> 03:53:50,500
that though.

3321
03:53:53,100 --> 03:53:56,400
So, will basically start the blocks off at like, 00 or something,

3322
03:53:56,400 --> 03:53:57,000
right?

3323
03:54:00,400 --> 03:54:03,500
And relative to the profile wrecked.

3324
03:54:03,500 --> 03:54:07,100
I mean in fact I suppose I should actually just do it that way, right?

3325
03:54:07,100 --> 03:54:12,000
So the profile wrecked Min EX

3326
03:54:14,600 --> 03:54:14,900
Profile.

3327
03:54:14,900 --> 03:54:15,200
Rekt.

3328
03:54:15,200 --> 03:54:15,500
Max.

3329
03:54:15,500 --> 03:54:18,800
Why is where this thing starts?

3330
03:54:19,200 --> 03:54:25,400
And each time we record a new block, we just like go to the next

3331
03:54:28,400 --> 03:54:34,800
Go to the next thing I could on here also say like which Arena it is

3332
03:54:35,500 --> 03:54:39,100
so we could say like arena name something like that.

3333
03:54:40,400 --> 03:54:44,200
So I can use a double string there, so we'd have like a reading name

3334
03:54:44,200 --> 03:54:48,100
and then the grid that it was and how many bytes was allocated for

3335
03:54:48,100 --> 03:54:49,100
that thing.

3336
03:54:49,100 --> 03:54:52,400
And then we just need to know like, for each block and I guess that

3337
03:54:52,400 --> 03:54:53,900
gets rid of the lane thing too.

3338
03:54:54,300 --> 03:54:56,300
So we wouldn't really be using Lanes.

3339
03:54:56,300 --> 03:54:58,600
We'd just be showing blocks, right?

3340
03:54:59,400 --> 03:55:03,900
And so, this whole thing would go away for the most part and we don't

3341
03:55:03,900 --> 03:55:05,000
care about that.

3342
03:55:05,800 --> 03:55:10,100
We just do this so we need to know like what the

3343
03:55:10,200 --> 03:55:14,300
Dimension is so we need to know like how big is a block.

3344
03:55:15,800 --> 03:55:19,300
And I'm guessing that that needs to be fairly wide, but not

3345
03:55:19,300 --> 03:55:21,300
particularly high, right?

3346
03:55:22,300 --> 03:55:28,700
So maybe we say, like we want the profile wrecked, like maybe we want

3347
03:55:28,700 --> 03:55:31,700
to get the width of the profile.

3348
03:55:31,700 --> 03:55:32,300
Rex

3349
03:55:37,100 --> 03:55:41,400
And then here we want to say something that's more like a fixed size,

3350
03:55:41,400 --> 03:55:41,700
right?

3351
03:55:41,700 --> 03:55:45,700
So you know I don't know what this is but maybe it's like you know,

3352
03:55:45,700 --> 03:55:47,800
just 20 high or something like that.

3353
03:55:48,600 --> 03:55:52,700
And so the get with here where we do Jimmy hmm.

3354
03:55:54,900 --> 03:55:56,200
Where we get the profile wrecked.

3355
03:55:56,200 --> 03:56:01,600
We just say look, we want to fit like you know, some number of blocks

3356
03:56:01,600 --> 03:56:02,400
across.

3357
03:56:03,100 --> 03:56:07,800
So we just divide by that number and that's the block Dimension.

3358
03:56:08,800 --> 03:56:12,200
So when we want to know how big a block is, we do it here.

3359
03:56:12,600 --> 03:56:16,100
We also know that since it's four wide, every for we could reset.

3360
03:56:18,000 --> 03:56:21,700
So I guess what we'd want to do with that is like block index, as

3361
03:56:21,700 --> 03:56:22,100
well.

3362
03:56:32,200 --> 03:56:35,400
And I suppose that means we also could just do it this way.

3363
03:56:35,400 --> 03:56:38,800
So when we do a block, we know where it is, we just say the block

3364
03:56:44,000 --> 03:56:46,000
can be constructed from a wrecked and Max effect.

3365
03:56:46,000 --> 03:56:46,900
We could just do it this way.

3366
03:56:46,900 --> 03:56:47,800
Here is the block.

3367
03:56:49,900 --> 03:56:52,600
That's the block wrecked on here.

3368
03:56:52,600 --> 03:56:55,100
We say we want to know like

3369
03:56:57,700 --> 03:56:59,800
we know what the dim is so we could really

3370
03:57:00,000 --> 03:57:00,900
Say wrecked.

3371
03:57:06,300 --> 03:57:07,200
We want recommending.

3372
03:57:07,200 --> 03:57:07,600
Damn?

3373
03:57:07,600 --> 03:57:08,000
Really?

3374
03:57:08,500 --> 03:57:09,100
Yeah, there it is.

3375
03:57:10,100 --> 03:57:14,100
So what we would do is we'd pass the dimension, which is this and the

3376
03:57:14,900 --> 03:57:20,800
upper side of it is just going to be whatever our current, why is and

3377
03:57:20,800 --> 03:57:22,500
then the block index.

3378
03:57:25,700 --> 03:57:27,600
Time's the dimension.

3379
03:57:29,100 --> 03:57:29,600
Right.

3380
03:57:31,400 --> 03:57:33,500
So that's how we would stack blocks up.

3381
03:57:35,900 --> 03:57:37,900
And we can make that a little bit better in the future.

3382
03:57:37,900 --> 03:57:44,000
We'll do some dressing on that as well but that way we have the block

3383
03:57:44,000 --> 03:57:48,500
wrecked and all we really need to do on the why is say like lock why

3384
03:57:53,000 --> 03:57:57,400
and that's going to start out with the profile wrecked Max, why right?

3385
03:57:58,900 --> 03:58:04,800
Um, so yeah, actually, sorry - blocked in y.

3386
03:58:04,800 --> 03:58:07,900
So it's, you know, the first row of blocks starting at the top.

3387
03:58:08,800 --> 03:58:09,600
Each time.

3388
03:58:09,800 --> 03:58:14,000
The block index goes up over for, though.

3389
03:58:14,000 --> 03:58:17,300
We now need to advance it.

3390
03:58:17,300 --> 03:58:18,800
In fact, I guess I'll do that the bottom.

3391
03:58:19,300 --> 03:58:22,500
I'll just say like, you know, Block Plus

3392
03:58:22,800 --> 03:58:30,100
Parking decks if block and x equals 4 block and x equals 0.

3393
03:58:30,100 --> 03:58:33,600
And then we do block, why reset right?

3394
03:58:38,400 --> 03:58:40,500
So we just move it down a row each time.

3395
03:58:42,400 --> 03:58:47,600
So then we would need for each allocation to figure out where it is

3396
03:58:47,600 --> 03:58:49,200
inside that block.

3397
03:58:49,200 --> 03:58:54,600
But after that, we're good, right?

3398
03:58:57,000 --> 03:59:03,100
So we really just need to be able to create a barycentric rectangle

3399
03:59:03,600 --> 03:59:06,800
out of this larger rectangle, right?

3400
03:59:07,700 --> 03:59:11,800
And we know what the proportions are because well first of all we know

3401
03:59:11,800 --> 03:59:14,300
that we're going to use the full height of the thing so that makes

3402
03:59:14,300 --> 03:59:15,300
that easy.

3403
03:59:16,300 --> 03:59:23,200
But in terms of what the percentage is like where we are inside that

3404
03:59:23,200 --> 03:59:26,100
rectangle, we know we've got like a sort of a

3405
03:59:26,300 --> 03:59:28,200
You mean in a team, Max, right?

3406
03:59:28,300 --> 03:59:33,400
And what those are is inside our allocation structure, we were already

3407
03:59:33,400 --> 03:59:34,300
storing.

3408
03:59:34,500 --> 03:59:38,400
What we need to know where in the block we are, we're storing the

3409
03:59:38,400 --> 03:59:42,400
offset From the Block and restoring the size allocated, right?

3410
03:59:43,700 --> 03:59:48,900
So we know that if we add these two together here, we have the max,

3411
03:59:48,900 --> 03:59:49,500
right.

3412
03:59:50,300 --> 03:59:54,500
And if we look at this one, we have the position.

3413
03:59:55,100 --> 03:59:59,000
And so all we really need to do is we need to have a scaling value

3414
03:59:59,000 --> 03:59:59,800
that's sort of the

3415
04:00:00,000 --> 04:00:04,300
Inverse of the size of the block will, he know what that is?

3416
04:00:04,300 --> 04:00:08,700
Because each block itself has its size allocated on it, right?

3417
04:00:09,300 --> 04:00:13,500
So, whatever that size allocated is, we could just say like in size

3418
04:00:13,500 --> 04:00:14,500
allocated,

3419
04:00:16,200 --> 04:00:21,200
And we can say, if the block Rex has any size allocated, which pretty

3420
04:00:21,200 --> 04:00:25,500
much always should we just go ahead and take the inverse of that,

3421
04:00:26,000 --> 04:00:26,500
right?

3422
04:00:29,300 --> 04:00:33,300
So then, every time we want to compute one of these, we just say all

3423
04:00:33,300 --> 04:00:38,500
right, convert it to an F32 and then actually just compute the ratio.

3424
04:00:38,800 --> 04:00:42,800
This tells us we're inside the rectangle, we are for this particular

3425
04:00:42,800 --> 04:00:43,200
thing.

3426
04:00:43,400 --> 04:00:45,400
We know the upper and lower bounds.

3427
04:00:45,500 --> 04:00:46,500
Those are obvious.

3428
04:00:47,100 --> 04:00:49,000
So we really just need very eccentric.

3429
04:01:00,600 --> 04:01:01,700
That makes me grumpy.

3430
04:01:07,000 --> 04:01:10,300
So hmm what do I want to do with this?

3431
04:01:10,300 --> 04:01:13,900
I don't really want to lose what I was typing in here because there

3432
04:01:13,900 --> 04:01:20,400
was a fair bit of it although I suppose what I could do is take a

3433
04:01:20,400 --> 04:01:21,800
screenshot of that.

3434
04:01:28,900 --> 04:01:30,200
The easiest way to do that.

3435
04:01:33,200 --> 04:01:33,500
Yeah.

3436
04:01:34,700 --> 04:01:35,200
That works.

3437
04:01:41,400 --> 04:01:44,200
I don't know how much I had there.

3438
04:01:50,500 --> 04:01:52,900
Can we show me where?

3439
04:01:54,600 --> 04:01:56,400
that was it should be errors there now,

3440
04:02:05,000 --> 04:02:06,300
So what is this function?

3441
04:02:06,300 --> 04:02:07,700
Draw Arena interval.

3442
04:02:14,500 --> 04:02:16,800
This is still here for no good reason.

3443
04:02:19,900 --> 04:02:24,500
All right, so we've got this stuff is still there but we lost our we

3444
04:02:24,500 --> 04:02:27,900
lost this guy, right?

3445
04:02:33,000 --> 04:02:36,800
So I should be able to type this guy back in here and go from there.

3446
04:02:41,400 --> 04:02:43,000
Toggle fullscreen.

3447
04:02:49,700 --> 04:02:50,100
There we go.

3448
04:02:51,500 --> 04:02:52,600
So, let's see.

3449
04:02:52,600 --> 04:02:59,500
Inside, toggle are sorry inside, Rupp Arena, interval, or drop-top,

3450
04:02:59,500 --> 04:02:59,800
man.

3451
04:03:00,000 --> 04:03:01,800
Members, I guess is where I'm starting there.

3452
04:03:03,800 --> 04:03:06,500
So draw Arena interval.

3453
04:03:08,400 --> 04:03:15,200
Debug state32 luck state that by DeGraff ID rectangle to profile Rex.

3454
04:03:18,000 --> 04:03:18,800
And the mouse pee.

3455
04:03:24,400 --> 04:03:24,900
All right.

3456
04:03:24,900 --> 04:03:28,700
And so do I actually need Alec index?

3457
04:03:28,700 --> 04:03:34,300
I do because I need to know what color it's going to be for Block.

3458
04:03:34,300 --> 04:03:38,700
Tim I need the with the profile wrecked.

3459
04:03:46,900 --> 04:03:51,300
I need the block index and I need the block.

3460
04:03:51,300 --> 04:03:51,900
Why?

3461
04:03:57,300 --> 04:04:01,000
Then I need to Loop over the arena.

3462
04:04:28,500 --> 04:04:32,800
And track the block.

3463
04:04:32,800 --> 04:04:33,300
Why?

3464
04:04:39,000 --> 04:04:40,000
That seems fine.

3465
04:04:47,300 --> 04:04:49,900
We may not have a get with on that.

3466
04:04:51,000 --> 04:04:52,400
I think it's just get dim.

3467
04:04:55,900 --> 04:04:56,400
Right.

3468
04:04:59,700 --> 04:05:05,500
Yeah, alright, so we create the block wrecked with got the in size

3469
04:05:05,600 --> 04:05:07,400
allocated.

3470
04:05:07,500 --> 04:05:07,800
Oops.

3471
04:05:11,500 --> 04:05:12,100
Do we have?

3472
04:05:12,100 --> 04:05:14,200
We have a safe ratio, right?

3473
04:05:15,200 --> 04:05:16,400
So it's really just that

3474
04:05:26,900 --> 04:05:30,300
So in this case, what we want to do is say well whatever the block

3475
04:05:30,400 --> 04:05:36,100
size allocated is that's what we're trying to do, right?

3476
04:05:37,100 --> 04:05:38,200
So that seems fine.

3477
04:05:40,200 --> 04:05:43,200
And then I just want to Loop through the allocations debug Arena

3478
04:05:43,200 --> 04:05:44,600
allocations.

3479
04:05:57,700 --> 04:05:59,800
And then the color.

3480
04:06:00,100 --> 04:06:01,600
The color table.

3481
04:06:08,600 --> 04:06:14,100
Like so our team in, we know what that is.

3482
04:06:18,200 --> 04:06:20,500
Arcamax, we know what that is.

3483
04:06:30,800 --> 04:06:38,300
And then this stuff we did do like this is nonsense code.

3484
04:06:40,000 --> 04:06:44,000
So we do need to do this part, but we need to compute the rectangle

3485
04:06:44,000 --> 04:06:44,600
first.

3486
04:06:44,600 --> 04:06:46,800
So we don't know what region wrecked is yet.

3487
04:06:54,900 --> 04:06:56,200
The base is e part.

3488
04:06:56,200 --> 04:06:59,400
Also, I don't think we need to do for this because we're not stuck in

3489
04:06:59,400 --> 04:07:01,000
things on top of each other at the moment.

3490
04:07:05,400 --> 04:07:10,300
The color in this case is probably, well, I can just grab this from

3491
04:07:10,300 --> 04:07:12,300
the existing code because that's how that worked.

3492
04:07:12,300 --> 04:07:18,700
Let me actually delete this temporarily and just in here, do a, if is

3493
04:07:18,700 --> 04:07:21,700
in rectangle region, Rex mouse key.

3494
04:07:22,200 --> 04:07:26,100
And then here, we'll just do a tooltip buffer text buffer, equals

3495
04:07:26,500 --> 04:07:27,200
wine,

3496
04:07:33,900 --> 04:07:45,400
And then we'll do the format string text Data, arena name.

3497
04:07:49,000 --> 04:07:56,600
This is actually the Alec would and the size allocated, okay?

3498
04:08:00,500 --> 04:08:06,400
So the I need to go and cut and paste the the region or at the park

3499
04:08:06,400 --> 04:08:06,800
there.

3500
04:08:09,300 --> 04:08:09,900
Right?

3501
04:08:10,200 --> 04:08:13,400
Also, this means of termination from that.

3502
04:08:13,400 --> 04:08:19,900
So in the drop profile in or bars or whatever the part where it's

3503
04:08:19,900 --> 04:08:22,400
doing this, we need to capture this part here.

3504
04:08:23,100 --> 04:08:25,900
The base is e is just stupid stuff.

3505
04:08:25,900 --> 04:08:27,900
I don't think we actually need that.

3506
04:08:28,500 --> 04:08:33,000
So I'm pretty sure that you can just get rid of this for now would be

3507
04:08:33,000 --> 04:08:35,900
my assumption like the way that other people are drawing stuff, right?

3508
04:08:35,900 --> 04:08:37,400
They don't need to do that.

3509
04:08:38,400 --> 04:08:42,900
And so, I'm pretty sure that that part is not so important, right?

3510
04:08:53,600 --> 04:08:56,500
Yeah, I mean I just I don't think you need any of this.

3511
04:08:56,900 --> 04:08:57,600
I'm not sure.

3512
04:08:57,600 --> 04:08:58,700
But I don't think you need it.

3513
04:08:58,700 --> 04:08:59,800
So I'm just going to get rid of it for now.

3514
04:09:04,100 --> 04:09:07,100
And then if we have to change that, I will change that.

3515
04:09:09,300 --> 04:09:11,600
So how are we doing here?

3516
04:09:11,900 --> 04:09:14,900
If we push these rectangles on and have a little party,

3517
04:09:16,100 --> 04:09:17,000
Is everything going to be?

3518
04:09:17,000 --> 04:09:17,600
Okay.

3519
04:09:18,500 --> 04:09:19,600
What else do we need to know?

3520
04:09:21,600 --> 04:09:24,800
So, render group region wrecked.

3521
04:09:26,500 --> 04:09:26,900
You.

3522
04:09:26,900 --> 04:09:33,100
I so those things we need to get out of the debug State I assume

3523
04:09:41,100 --> 04:09:45,400
Yeah, so this stuff has to come out of the debug State.

3524
04:09:46,000 --> 04:09:46,300
What else?

3525
04:09:46,300 --> 04:09:46,900
We need?

3526
04:09:50,200 --> 04:09:54,500
So then I think we're down to just the barycentric version and so I

3527
04:09:54,500 --> 04:09:57,100
think yeah, it looks like we did this already.

3528
04:09:57,900 --> 04:10:01,700
So the barycentric version is good because it means we can just sort

3529
04:10:01,700 --> 04:10:05,000
of get the Min and the max is that we actually need

3530
04:10:08,000 --> 04:10:11,900
so, what we should be able to do here is say, hey,

3531
04:10:17,400 --> 04:10:18,300
Give me.

3532
04:10:20,200 --> 04:10:23,100
The rectangle min-max.

3533
04:10:26,400 --> 04:10:28,000
Let me go ahead and get those out here.

3534
04:10:28,000 --> 04:10:30,300
So let's get them in.

3535
04:10:34,400 --> 04:10:35,500
And Max like this.

3536
04:10:36,100 --> 04:10:37,900
So we have this block wrecked.

3537
04:10:39,800 --> 04:10:46,000
And what I want to do is get the Bary Centric location inside that

3538
04:10:46,000 --> 04:10:46,700
rectangle.

3539
04:10:48,700 --> 04:10:50,500
And the way I want to do that is

3540
04:10:54,300 --> 04:10:57,300
you know what, I guess I don't even really need to put these there.

3541
04:10:57,300 --> 04:10:58,400
I could just do this.

3542
04:11:05,600 --> 04:11:06,100
Right.

3543
04:11:07,000 --> 04:11:11,900
So the first things first from getting the minimum the X minimum is

3544
04:11:11,900 --> 04:11:14,900
going to be the team in the Y minimum is just going to be zero.

3545
04:11:15,400 --> 04:11:19,400
The maximum is going to be the max we computed and 1.0 so because we

3546
04:11:19,400 --> 04:11:21,300
want the full height of the thing, right?

3547
04:11:22,900 --> 04:11:27,300
And so at that point, I think that gives us our region Rex which is

3548
04:11:27,300 --> 04:11:31,200
what we actually want and then we're good, right?

3549
04:11:36,000 --> 04:11:40,500
All right, so, I don't know if this will actually work or what, we

3550
04:11:41,000 --> 04:11:42,700
probably won't be very good, visualization.

3551
04:11:43,200 --> 04:11:49,500
And but we can make better one next week so inside Arena, and of

3552
04:11:49,500 --> 04:11:51,600
course, I should remember to call.

3553
04:11:54,100 --> 04:11:56,800
I did remember to call it before, but then we crashed.

3554
04:11:57,300 --> 04:11:59,100
And so now I have to remember again.

3555
04:12:07,900 --> 04:12:11,500
So I think we want to just call draw Rena interval there and then, you

3556
04:12:11,500 --> 04:12:15,200
know, we don't have the frame version of this yet but that's okay.

3557
04:12:22,900 --> 04:12:24,200
Not reassuring.

3558
04:12:26,600 --> 04:12:27,700
Say the least.

3559
04:12:32,600 --> 04:12:34,300
So I'm not sure what the air is there.

3560
04:12:34,300 --> 04:12:38,800
It could just be that we're not placing these things correctly or

3561
04:12:38,800 --> 04:12:40,400
something similar to that, right?

3562
04:12:41,000 --> 04:12:46,600
When we're actually creating these like blocks, it could be also that

3563
04:12:46,800 --> 04:12:47,900
we are going.

3564
04:12:47,900 --> 04:12:52,300
I don't know which way our stuff goes as things to send.

3565
04:12:53,600 --> 04:12:56,800
I was assuming that y was going up but maybe why is going down?

3566
04:12:56,900 --> 04:13:01,000
I don't remember how we wrote this system, so that's one of those

3567
04:13:01,000 --> 04:13:02,200
things that could easily do.

3568
04:13:02,800 --> 04:13:04,000
Let me just take a look here.

3569
04:13:12,600 --> 04:13:17,800
You know, it's you can see it here, it's going down like that.

3570
04:13:19,300 --> 04:13:23,400
So I think when we get the dimensions of the profile wreck and we do a

3571
04:13:23,400 --> 04:13:26,300
y IO but that is not correct.

3572
04:13:26,400 --> 04:13:28,500
It's the maximum that we actually want.

3573
04:13:29,500 --> 04:13:29,900
Right.

3574
04:13:30,000 --> 04:13:31,100
Oh no, no.

3575
04:13:31,100 --> 04:13:34,900
I'm that's supposed to be the X.

3576
04:13:34,900 --> 04:13:37,600
First of all the block, why is the max?

3577
04:13:37,600 --> 04:13:40,200
Why - the black team that seems right?

3578
04:13:45,400 --> 04:13:49,500
The block index here is getting incremented, isn't it?

3579
04:13:49,600 --> 04:13:52,600
No, it's not so that would also be a problem.

3580
04:14:07,800 --> 04:14:08,700
How about that part?

3581
04:14:11,100 --> 04:14:12,900
So I think that's all good.

3582
04:14:15,600 --> 04:14:21,000
We should probably also draw the block itself here.

3583
04:14:34,300 --> 04:14:38,900
Just has like a gray like backdrop thing, maybe like this.

3584
04:14:42,600 --> 04:14:43,000
Um,

3585
04:14:52,600 --> 04:14:56,000
And then I messed up into this and just see why it's failing to

3586
04:14:56,000 --> 04:14:59,100
produce any actual trouble regions.

3587
04:15:06,000 --> 04:15:08,800
Okay, so kind of a little wonky.

3588
04:15:08,800 --> 04:15:09,900
What's going on there?

3589
04:15:10,400 --> 04:15:13,500
But the block wrecked at least is drawing that looks like it's drawing

3590
04:15:13,500 --> 04:15:14,300
itself now.

3591
04:15:15,000 --> 04:15:18,400
So I wonder if there's just something stupid that I'm doing here.

3592
04:15:18,900 --> 04:15:21,600
We've got a recommend dim and a strong.

3593
04:15:21,600 --> 04:15:22,400
It's going to draw this.

3594
04:15:23,400 --> 04:15:26,300
It should be a quarter of the size of the profile wrecked.

3595
04:15:27,800 --> 04:15:29,600
It didn't seem to be changing size.

3596
04:15:29,600 --> 04:15:30,800
So that seems bad.

3597
04:15:33,200 --> 04:15:36,500
Something seems a little bit busted there and I don't know what.

3598
04:15:38,200 --> 04:15:40,300
So we have to step in there and see.

3599
04:15:42,100 --> 04:15:46,800
we could make sure that we're passing the right size there, but

3600
04:15:54,100 --> 04:15:55,200
But it looks like we are, right?

3601
04:15:55,200 --> 04:15:59,500
So there's the layout elements bounds, so that feels like that should

3602
04:15:59,500 --> 04:16:00,300
be fine.

3603
04:16:10,000 --> 04:16:12,800
So I'm not sure why we're getting that kind of weird Behavior.

3604
04:16:12,800 --> 04:16:14,800
So let's step in there and take a look.

3605
04:16:21,800 --> 04:16:24,100
Just get a feel for like, what's actually being drawn.

3606
04:16:30,000 --> 04:16:32,000
This is turning out to be a totally Marathon session.

3607
04:16:33,000 --> 04:16:40,900
So inside, I want to bring this up first so we can take a look at it.

3608
04:16:42,200 --> 04:16:45,300
And I'm just going to go ahead and look at the Arenas.

3609
04:16:45,900 --> 04:16:50,600
So, if I now set a breakpoint inside drawer an interval there.

3610
04:16:53,600 --> 04:16:55,200
What's going on, right?

3611
04:16:55,300 --> 04:16:59,600
So as we come through here, let's just look at what our all our

3612
04:16:59,600 --> 04:17:00,200
variables are.

3613
04:17:00,200 --> 04:17:03,100
Just we know whether we're in complete nutso town or not.

3614
04:17:10,000 --> 04:17:13,100
That seems reasonable so long as our center.

3615
04:17:13,100 --> 04:17:16,900
It's almost the middle of the screen is 0 0, which maybe it is, you

3616
04:17:16,900 --> 04:17:21,600
know I don't remember how we set up the coordinate system that seems

3617
04:17:21,600 --> 04:17:24,300
fine that doesn't seem totally bizarre anything.

3618
04:17:25,500 --> 04:17:27,200
How big should each of our blocks me?

3619
04:17:30,300 --> 04:17:31,900
Again seems totally fine.

3620
04:17:36,100 --> 04:17:36,400
Okay.

3621
04:17:36,400 --> 04:17:40,700
So first of all, yeah, this is wrong because we're not we're not

3622
04:17:40,700 --> 04:17:43,400
offsetting by the profile wrecked corner.

3623
04:17:45,500 --> 04:17:47,100
So that's definitely wrong.

3624
04:17:50,100 --> 04:17:50,400
Let's see.

3625
04:17:50,400 --> 04:17:51,100
What else is wrong?

3626
04:17:51,100 --> 04:17:52,600
That's probably the only thing that's wrong though.

3627
04:18:01,700 --> 04:18:07,000
So the so let's see the block wrecked.

3628
04:18:19,700 --> 04:18:23,300
I mean, the rest seems that all seems pretty reasonable, right?

3629
04:18:34,800 --> 04:18:37,500
The Serene apparently has no allocations in it whatsoever.

3630
04:18:49,500 --> 04:18:51,800
That seems bad.

3631
04:18:54,700 --> 04:18:57,700
How are none of these having any allocations in them?

3632
04:19:03,200 --> 04:19:03,800
What?

3633
04:19:08,200 --> 04:19:10,100
We must have some kind of a bug in there.

3634
04:19:15,700 --> 04:19:17,100
Which arena is this pain away?

3635
04:19:23,900 --> 04:19:26,400
Oh well, I take it back.

3636
04:19:27,400 --> 04:19:30,400
The debugger Arena that is what you expect to see because the blocks

3637
04:19:30,400 --> 04:19:33,800
can't have any actual data in them because it's suppressed.

3638
04:19:34,300 --> 04:19:35,500
We should also not draw them.

3639
04:19:46,400 --> 04:19:47,500
I was going to say that's nuts.

3640
04:19:47,500 --> 04:19:49,300
We did something wrong, but we didn't do something wrong.

3641
04:19:49,300 --> 04:19:50,700
That's what's supposed to happen.

3642
04:19:51,100 --> 04:19:54,300
Let me also while I'm recompiling there, let me add the profile

3643
04:19:54,300 --> 04:19:55,300
recommend mm corner.

3644
04:19:58,400 --> 04:20:02,300
I just said we're off set properly out, that's going to help, but

3645
04:20:05,900 --> 04:20:08,200
It'll at least Center the thing properly.

3646
04:20:27,000 --> 04:20:29,400
For now, I want to actually see what's being drawn before I start to

3647
04:20:29,400 --> 04:20:29,800
building.

3648
04:20:34,200 --> 04:20:35,700
all right, so

3649
04:20:39,900 --> 04:20:45,500
Now we're at least properly sizing but by properly, I mean, it doesn't

3650
04:20:45,500 --> 04:20:48,100
seem like we're ever actually advancing the block though.

3651
04:20:51,400 --> 04:20:53,500
So that's a little bit weird, right?

3652
04:21:01,600 --> 04:21:05,900
But this block index should be moving the rectangle along.

3653
04:21:07,200 --> 04:21:09,000
And it does not actually appear to be.

3654
04:21:21,900 --> 04:21:24,200
But I'm not sure why that would be.

3655
04:21:34,200 --> 04:21:35,100
Yeah, I don't see it.

3656
04:21:36,600 --> 04:21:40,000
So, let's step through there, see why we're only drawing, what appears

3657
04:21:40,000 --> 04:21:43,000
to be a single rectangle and it's the wrong size, right?

3658
04:21:43,300 --> 04:21:47,100
So it's supposed to be a quarter of the size of the profile wrecked,

3659
04:21:47,100 --> 04:21:49,000
but it's like a half the size.

3660
04:21:49,400 --> 04:21:52,800
Although we could be drunk two, rectangles only and then not drawing a

3661
04:21:52,800 --> 04:21:57,400
third, which would produce what would amount to the same result.

3662
04:21:58,900 --> 04:22:04,500
What I could do is outline these as well, which I probably should do.

3663
04:22:06,700 --> 04:22:09,400
Something like this so that they have a little bit of an outline

3664
04:22:09,400 --> 04:22:13,000
around them just so we can see whether or not that's happening.

3665
04:22:14,000 --> 04:22:15,700
I don't know, we'll find out.

3666
04:22:24,600 --> 04:22:25,700
Just make sure that's built.

3667
04:22:38,200 --> 04:22:41,800
All right, so now we've got

3668
04:22:55,200 --> 04:22:58,900
So, were there's two of them that are being drawn.

3669
04:23:00,500 --> 04:23:04,300
And then we don't know why, we don't know what else is happening.

3670
04:23:04,500 --> 04:23:08,800
So we want to go now set that break point and see why.

3671
04:23:09,600 --> 04:23:14,200
So, if I come in here, we start out with block index 0

3672
04:23:16,400 --> 04:23:17,800
We suppress this entire thing.

3673
04:23:17,800 --> 04:23:21,000
So I guess I probably have to do this to get to the first unsuppressed

3674
04:23:21,000 --> 04:23:21,300
one.

3675
04:23:28,900 --> 04:23:31,800
We've produced a block rectangle for this entire block.

3676
04:23:35,800 --> 04:23:36,900
Looks pretty reasonable.

3677
04:23:43,600 --> 04:23:45,000
The Z on this is wrong.

3678
04:23:45,000 --> 04:23:47,900
So should probably make these so they can draw over these.

3679
04:23:47,900 --> 04:23:49,400
But that's a separate issue.

3680
04:23:49,600 --> 04:23:50,900
We haven't addressed yet.

3681
04:23:54,000 --> 04:23:59,100
So, this is not good at all.

3682
04:24:08,200 --> 04:24:10,000
This recommend Max.

3683
04:24:15,200 --> 04:24:18,500
Oh, wait a minute, wait a minute, wait a minute, wait a minute.

3684
04:24:23,700 --> 04:24:28,200
So get Bary Centric, does the opposite thing that I thought it did.

3685
04:24:29,100 --> 04:24:30,300
So get barycentric.

3686
04:24:30,300 --> 04:24:32,800
Actually computes the barycentric coordinates

3687
04:24:34,300 --> 04:24:39,400
I guess we don't have one that gives them back to us.

3688
04:24:40,700 --> 04:24:43,300
Like, when we put one in, we get back with the location, would have

3689
04:24:43,300 --> 04:24:44,800
been using that.

3690
04:24:49,600 --> 04:24:50,400
That's okay.

3691
04:24:52,100 --> 04:24:54,800
Again, the problem still is that our block works or wrong.

3692
04:24:54,800 --> 04:25:00,300
So I'm not so concerned about this part of it yet, but for what it's

3693
04:25:00,300 --> 04:25:02,100
worth, it's a pretty trivial fix.

3694
04:25:03,900 --> 04:25:05,800
We just want to do a linear interpolation here.

3695
04:25:07,700 --> 04:25:13,900
We want to take the block wrecked Min X, our team, in the Brock

3696
04:25:13,900 --> 04:25:20,700
wrecked, Max X, and then the Min, why?

3697
04:25:28,100 --> 04:25:29,600
And maybe I'll still do this.

3698
04:25:33,400 --> 04:25:34,800
Just to make it a little easier to read.

3699
04:25:51,500 --> 04:25:55,900
So that is the correct way to actually still hanging around.

3700
04:25:56,700 --> 04:25:58,400
That's what we were trying to do.

3701
04:25:58,400 --> 04:26:04,200
I wanted to sort of do a bilinear but I guess we don't really have

3702
04:26:04,200 --> 04:26:04,700
that.

3703
04:26:05,900 --> 04:26:08,300
So we kind of just have to make do right?

3704
04:26:09,800 --> 04:26:11,800
So I think we're fine otherwise.

3705
04:26:11,800 --> 04:26:13,100
I feel like I could have used that.

3706
04:26:13,100 --> 04:26:16,600
We do have a V2 version of this so I suppose I could have done that

3707
04:26:17,400 --> 04:26:18,100
but who cares?

3708
04:26:19,900 --> 04:26:23,400
I'm so, finally, I think that that was probably, our problem is why we

3709
04:26:23,400 --> 04:26:26,000
weren't getting actual memory ranges drawn in there.

3710
04:26:26,000 --> 04:26:29,200
But the problem again that we're going to have is that we're still

3711
04:26:29,200 --> 04:26:30,800
like the block reaches themselves.

3712
04:26:30,800 --> 04:26:31,400
The throng.

3713
04:26:31,700 --> 04:26:33,800
And so we have to step through and find out what's going on there.

3714
04:26:33,800 --> 04:26:39,500
I don't know what's happening there so when we step through here, we

3715
04:26:39,500 --> 04:26:43,600
should now have region rex that correspond more probably.

3716
04:26:43,600 --> 04:26:44,500
Yeah, exactly.

3717
04:26:45,300 --> 04:26:46,600
So that's much better.

3718
04:26:47,000 --> 04:26:49,000
And then what we need to know is

3719
04:26:49,100 --> 04:26:50,400
is when we

3720
04:26:52,600 --> 04:26:55,200
When we actually get down here, right?

3721
04:26:55,300 --> 04:26:58,000
And we increment that we should now.

3722
04:26:58,000 --> 04:26:59,800
See that block index.

3723
04:27:01,000 --> 04:27:02,200
Changing right.

3724
04:27:05,600 --> 04:27:07,000
How many of the virus?

3725
04:27:07,000 --> 04:27:08,700
So many of those suppressed.

3726
04:27:08,700 --> 04:27:09,700
Did you see that?

3727
04:27:10,100 --> 04:27:11,000
What's going on there?

3728
04:27:11,300 --> 04:27:12,100
Hold on a second.

3729
04:27:27,600 --> 04:27:32,800
How the heck is suppress set to 1 on the game mode?

3730
04:27:37,400 --> 04:27:39,600
I must have done something stupid somewhere else, too.

3731
04:27:52,800 --> 04:27:55,600
I bet you I bet that's just garbage right because we didn't fill it

3732
04:27:55,600 --> 04:27:59,200
out so that that was also about that was getting set to suppress.

3733
04:28:02,700 --> 04:28:05,200
Because we don't want to clear things in the debug system.

3734
04:28:05,200 --> 04:28:07,400
We wanted to be as fast as possible, so that was probably what was

3735
04:28:07,400 --> 04:28:08,100
happening there.

3736
04:28:09,400 --> 04:28:11,500
Alright, let's check it.

3737
04:28:11,500 --> 04:28:12,500
Check it one more time.

3738
04:28:20,000 --> 04:28:20,900
All right.

3739
04:28:22,200 --> 04:28:23,600
This is kind of nonsense.

3740
04:28:23,700 --> 04:28:25,300
I don't know what this is supposed to be.

3741
04:28:30,100 --> 04:28:32,900
Or actually that's kind of correct.

3742
04:28:33,100 --> 04:28:34,900
Those would all be fixed size, drunks.

3743
04:28:48,200 --> 04:28:50,500
So now that's looking mostly correct.

3744
04:28:50,500 --> 04:28:57,100
Actually I'm going to go ahead and change this back to regular build.

3745
04:28:57,100 --> 04:28:58,500
I think we're pretty close.

3746
04:28:58,500 --> 04:29:01,100
I'm going to probably call it a day now because we've done a ton of

3747
04:29:01,100 --> 04:29:03,600
work but I think we're at the point where we can now visualize our

3748
04:29:03,600 --> 04:29:05,000
memory allocations correctly.

3749
04:29:30,200 --> 04:29:30,900
Interesting.

3750
04:29:46,800 --> 04:29:49,800
You know, this is going to be pretty cool once we kind of get it, more

3751
04:29:49,800 --> 04:29:50,500
dialed.

3752
04:29:53,800 --> 04:29:55,000
Anyway, let me show you the thing.

3753
04:29:55,000 --> 04:29:56,100
I was actually trying to show you

3754
04:29:59,100 --> 04:29:59,800
so, here's the

3755
04:30:00,100 --> 04:30:06,800
Out of the world's with the extra bloating in it right those are all

3756
04:30:06,800 --> 04:30:09,800
the world chunks and what started us down this whole Rat Hole

3757
04:30:09,800 --> 04:30:14,700
yesterday where I was like I want to visualize the memory was inside

3758
04:30:16,400 --> 04:30:17,200
the entity struck time.

3759
04:30:17,200 --> 04:30:20,600
Like we want to start paying attention to this stuff and I was just

3760
04:30:20,600 --> 04:30:21,700
trying to make a point.

3761
04:30:21,700 --> 04:30:25,300
I was like I don't have any way to visualize it so this ground cover

3762
04:30:25,300 --> 04:30:25,800
here.

3763
04:30:25,900 --> 04:30:27,900
Let's say we don't have ground cover in there.

3764
04:30:30,100 --> 04:30:30,300
Right.

3765
04:30:30,300 --> 04:30:35,500
So there's no storage for ground cover and then I run this thing and I

3766
04:30:35,500 --> 04:30:37,900
look at the memory visualization, right?

3767
04:30:42,100 --> 04:30:47,500
Look at how big the block of memory is taken up by our entire world

3768
04:30:47,500 --> 04:30:48,700
is, right.

3769
04:30:49,700 --> 04:30:50,700
Remember that?

3770
04:30:51,900 --> 04:30:52,400
What is it?

3771
04:30:52,400 --> 04:30:59,600
1 2 3 4 5 6 7 8, 9 10 rows, 11, rows long, right?

3772
04:31:00,300 --> 04:31:04,900
I come in here and I add the ground cover in to these entities.

3773
04:31:06,300 --> 04:31:07,000
and now,

3774
04:31:09,200 --> 04:31:10,000
It's massive.

3775
04:31:12,000 --> 04:31:12,500
Right.

3776
04:31:12,600 --> 04:31:14,100
It's like twice that size.

3777
04:31:15,300 --> 04:31:24,000
1 2 3 4 5 6, 8 9 10 11 12 that right, furthermore, we could just look

3778
04:31:24,000 --> 04:31:25,100
at this number, right?

3779
04:31:25,100 --> 04:31:26,600
It's sixty nine megabytes.

3780
04:31:38,500 --> 04:31:39,600
And then we look in here.

3781
04:31:41,300 --> 04:31:43,300
And it's 47, right?

3782
04:31:43,600 --> 04:31:48,400
So just that one member is just way ridiculous in terms of its impact

3783
04:31:48,400 --> 04:31:49,400
on our footprint.

3784
04:31:49,600 --> 04:31:52,700
And that only goes up because every entity we added the world would do

3785
04:31:52,700 --> 04:31:53,100
it.

3786
04:31:53,400 --> 04:31:57,900
And so, I just wanted just to be able to show that what that kind of a

3787
04:31:57,900 --> 04:31:58,700
difference was.

3788
04:31:59,900 --> 04:32:01,600
Tyler founder, but there you go.

3789
04:32:03,700 --> 04:32:05,900
We will fix

3790
04:32:06,900 --> 04:32:08,500
that visualization to be better.

3791
04:32:11,000 --> 04:32:11,500
Later.

3792
04:32:12,500 --> 04:32:14,200
Hey, the mouse is working on Linux today.

3793
04:32:14,200 --> 04:32:14,900
That's a first

3794
04:32:16,000 --> 04:32:20,200
All right, let's go to extremely brief Q&A because I my throat is

3795
04:32:20,200 --> 04:32:23,900
tired this point, but now we've got the memory of is in there and we

3796
04:32:23,900 --> 04:32:24,900
can make it better.

3797
04:32:31,600 --> 04:32:33,200
Because right now, it's not really proportional.

3798
04:32:38,400 --> 04:32:42,100
So we kind of want that to be fixed.

3799
04:33:00,000 --> 04:33:00,700
On top of it all.

3800
04:33:00,700 --> 04:33:04,599
But could you just say hi to my friend, Thomas Grimm, who was a

3801
04:33:04,599 --> 04:33:06,300
fervent follower of yours?

3802
04:33:07,400 --> 04:33:13,800
so Thomas Grimm is a very, I feel like that is the kind of name that

3803
04:33:15,400 --> 04:33:19,500
You want to be an author of gruesome, children's books, right?

3804
04:33:19,500 --> 04:33:21,900
I mean that's what you always think of, when you think of Grimm, like

3805
04:33:21,900 --> 04:33:22,900
Grimm fairy tales.

3806
04:33:24,599 --> 04:33:28,300
Do you write children's literature would be my very first question.

3807
04:33:29,800 --> 04:33:31,599
And is it sort of somewhat gruesome?

3808
04:33:55,700 --> 04:33:56,099
All right.

3809
04:33:56,099 --> 04:33:59,700
No questions is good because we've been on here for a while.

3810
04:34:03,800 --> 04:34:05,500
So, I'm going to go ahead and close it down.

3811
04:34:23,900 --> 04:34:26,800
All right, thank you for joining me for an episode of handmade hero,

3812
04:34:26,800 --> 04:34:28,099
very long episode of Hannah here.

3813
04:34:28,099 --> 04:34:30,700
It's my pleasure coding with you, as always, if you'd like to follow

3814
04:34:30,700 --> 04:34:33,800
this with the series at home, you always pre-order game on hand.

3815
04:34:33,800 --> 04:34:36,099
Me here at org comes to the source code.

3816
04:34:36,400 --> 04:34:39,300
You could go make it better memory.

3817
04:34:39,300 --> 04:34:43,800
Visualizer we've done all the groundwork now, so that might be kind of

3818
04:34:43,800 --> 04:34:47,300
a fun little challenge if you're interested because like, the one that

3819
04:34:47,300 --> 04:34:50,400
we just threw in there, it's not even proportional to the size

3820
04:34:50,400 --> 04:34:50,900
correctly.

3821
04:34:50,900 --> 04:34:53,300
So like although it divides the

3822
04:34:53,500 --> 04:34:55,599
Upper block, it doesn't divide.

3823
04:34:55,599 --> 04:34:59,800
Stuff up for the total amount of memory being used and so we're going

3824
04:34:59,800 --> 04:35:02,400
to make a better one than that to be sure.

3825
04:35:02,900 --> 04:35:06,700
And you could be this to it, you have all week to make some better

3826
04:35:06,700 --> 04:35:10,000
memory visualizers in there using the data that's in there, do

3827
04:35:10,000 --> 04:35:15,900
something cool I'll be back next week to do some myself and and we'll

3828
04:35:15,900 --> 04:35:17,099
see what happens.

3829
04:35:17,200 --> 04:35:20,599
Until then have fun programming and I'll see everyone on the internet.

3830
04:35:20,700 --> 04:35:21,599
Take it easy, everybody.

