1
00:00:02,200 --> 00:00:05,800
Alright, hello everyone, and welcome to handmade hero.

2
00:00:05,800 --> 00:00:11,800
The, this is the stream where we code a complete game live here on

3
00:00:11,800 --> 00:00:12,300
Twitch.

4
00:00:12,700 --> 00:00:17,200
Here's the thing, I believe, yesterday, I was just about to finish

5
00:00:17,200 --> 00:00:19,800
cleaning up some code and I didn't really get a chance to do it.

6
00:00:19,800 --> 00:00:23,000
So we're just going to dive right back into that we were sort of

7
00:00:23,000 --> 00:00:26,700
cleaning up our debug layer so that we can call it done and kind of

8
00:00:26,700 --> 00:00:29,500
put the stamp of approval on it for use in the game.

9
00:00:30,000 --> 00:00:31,400
And so I got some things that

10
00:00:31,500 --> 00:00:35,400
Want to do to make that happen and so we're going to finish doing

11
00:00:35,400 --> 00:00:35,800
those.

12
00:00:36,800 --> 00:00:39,800
If you are trying to follow along at home today is day 250.

13
00:00:40,400 --> 00:00:42,400
Not quite at day, 255 yet.

14
00:00:42,400 --> 00:00:45,400
Obviously when we get to date 55 we're going to wrap or back around

15
00:00:45,400 --> 00:00:47,200
today zero because we only have a bike counter.

16
00:00:47,300 --> 00:00:47,700
Just kidding.

17
00:00:47,700 --> 00:00:51,000
That's not actually true but it would be funny if it was anyway day

18
00:00:51,000 --> 00:00:55,700
250 you want to unpack day 249 source code if you're following along

19
00:00:55,700 --> 00:00:57,400
with the source code at home because that's what I'm going to start

20
00:00:57,400 --> 00:00:57,700
with today.

21
00:00:57,700 --> 00:01:00,700
So if you're trying to follow the stream on your own,

22
00:01:01,400 --> 00:01:02,200
Start there.

23
00:01:02,200 --> 00:01:05,800
So let's take a look at where we ended up, if you remember correctly.

24
00:01:05,800 --> 00:01:10,000
At the end of last night's dream, I turned off the debug system

25
00:01:10,000 --> 00:01:14,300
because I didn't want to leave the checked-in code in a broken say,

26
00:01:14,300 --> 00:01:14,800
for any money.

27
00:01:15,000 --> 00:01:17,600
So, right now we're not actually seeing any debug output on the screen

28
00:01:17,600 --> 00:01:17,900
at all.

29
00:01:17,900 --> 00:01:21,100
We're just seeing the regular game startup, as it normally would with

30
00:01:21,100 --> 00:01:23,700
the cutscene sequence and all that sort of stuff, right?

31
00:01:24,700 --> 00:01:29,100
So what we want to do now is we want to go ahead and get back to that

32
00:01:29,100 --> 00:01:30,400
sort of debugging.

33
00:01:30,500 --> 00:01:31,300
Well, wasn't debugging it.

34
00:01:31,500 --> 00:01:32,500
Actually just us.

35
00:01:32,800 --> 00:01:34,000
Oh, you don't need the max anymore.

36
00:01:34,000 --> 00:01:34,500
I always forget.

37
00:01:34,500 --> 00:01:35,700
It's like force of habit.

38
00:01:36,900 --> 00:01:41,700
We need to get back to getting our stuff compiling because we changed

39
00:01:41,700 --> 00:01:48,800
around how the macros were going to work on on our debug layer.

40
00:01:48,900 --> 00:01:50,600
And so we need to like finish that.

41
00:01:51,300 --> 00:01:52,500
So here we go.

42
00:01:52,500 --> 00:01:56,200
Let's load up our project and let's build.

43
00:01:56,300 --> 00:01:57,000
There we go.

44
00:01:57,300 --> 00:02:01,300
And so if I load our build that bat file, it was this part right here.

45
00:02:01,400 --> 00:02:02,700
Here right hand made internal.

46
00:02:02,700 --> 00:02:05,400
That's our debug switch and you can see that I've switched it off.

47
00:02:05,400 --> 00:02:07,800
If I switch it back to on, we will go back to getting.

48
00:02:08,500 --> 00:02:11,800
I assumed or not.

49
00:02:11,800 --> 00:02:17,300
I figured we would have got compiler errors on that but I guess not.

50
00:02:17,400 --> 00:02:17,900
There we go.

51
00:02:18,000 --> 00:02:18,800
I don't know what happened there.

52
00:02:18,800 --> 00:02:19,600
That was weird.

53
00:02:22,000 --> 00:02:27,800
All right, I won't ask anyway when I when I compile now we're back to

54
00:02:27,800 --> 00:02:28,800
getting compile errors.

55
00:02:28,800 --> 00:02:31,800
And so what we have to do now is we have to go through and fix the

56
00:02:31,800 --> 00:02:35,800
compile errors, that we got from changing the way that we do our debug

57
00:02:35,800 --> 00:02:36,600
output.

58
00:02:36,700 --> 00:02:42,000
And I believe what we decided to do here was we updated how debug data

59
00:02:42,000 --> 00:02:46,400
block works and that's in debug interface, you can kind of see, debug

60
00:02:46,700 --> 00:02:47,400
data block

61
00:02:49,100 --> 00:02:49,300
Right?

62
00:02:49,300 --> 00:02:51,000
Here is one of these things.

63
00:02:51,200 --> 00:02:55,400
All it actually typically gets past is the name, whatever the name of

64
00:02:55,400 --> 00:02:59,800
the data block is actually supposed to be and, and that's all

65
00:03:00,000 --> 00:03:00,900
That's all it is.

66
00:03:01,200 --> 00:03:02,400
So I don't know.

67
00:03:02,400 --> 00:03:05,600
Like I said, we sort of got rid of the concept of having a debug ID

68
00:03:05,600 --> 00:03:06,600
beyond that.

69
00:03:06,800 --> 00:03:10,700
It's just that one name pointer that gets used.

70
00:03:10,900 --> 00:03:12,800
So I don't know, maybe that'll be a bad decision.

71
00:03:12,800 --> 00:03:14,300
I don't think it particularly will be.

72
00:03:14,300 --> 00:03:15,800
I think it's probably going to be okay.

73
00:03:16,200 --> 00:03:19,000
But what that means is that this point we can sort of get rid of this

74
00:03:19,000 --> 00:03:23,800
concept here in it's entirely and the end of The Entity debug ID which

75
00:03:23,800 --> 00:03:28,100
we had up here, was previously just being used for this debug hit

76
00:03:28,100 --> 00:03:29,800
stuff, which is basically what let's

77
00:03:30,000 --> 00:03:33,800
If you say whether or not you were going to request that thing and

78
00:03:33,800 --> 00:03:35,200
that can stay in, right?

79
00:03:35,200 --> 00:03:38,600
So the thing that actually works for that, that totally is fine.

80
00:03:38,800 --> 00:03:42,000
And if we wanted to, we could associate this data block with that

81
00:03:42,000 --> 00:03:46,200
entity, debug ID in the future by having some way of specifying that

82
00:03:46,200 --> 00:03:46,800
as a value.

83
00:03:46,800 --> 00:03:50,800
Like we could, if we wanted to include this in here,

84
00:03:53,200 --> 00:03:56,300
I need you back ID for coder, has its expansion for.

85
00:03:56,300 --> 00:03:59,500
Some reason, doesn't pick things that are nearby to the cursor yet.

86
00:03:59,500 --> 00:04:01,400
So it's kind of hard to use the auto expand.

87
00:04:01,400 --> 00:04:03,000
It doesn't work like it used to in emacs.

88
00:04:03,000 --> 00:04:05,100
I tend to it tends to be pretty tough.

89
00:04:05,600 --> 00:04:07,700
I'm not sure how it actually decides that.

90
00:04:07,800 --> 00:04:10,600
But anyway, so that's why I kind of got cycle through that.

91
00:04:10,900 --> 00:04:13,300
But anyway, we could do something like that in the future.

92
00:04:13,800 --> 00:04:17,600
So, I'll just say, you know, do we want this?

93
00:04:18,600 --> 00:04:22,200
And I don't know if we'll have much of a reason to use that or not.

94
00:04:22,700 --> 00:04:26,700
You know, it's our prerogative if we want to, I don't know.

95
00:04:27,100 --> 00:04:30,100
So anyway, like that's that's how that works.

96
00:04:30,200 --> 00:04:32,500
And what's the problem here?

97
00:04:32,700 --> 00:04:33,900
This is supposed to be a string.

98
00:04:34,200 --> 00:04:40,500
So this is like simulation entity, kind of switch to the / for passing

99
00:04:40,500 --> 00:04:40,800
text.

100
00:04:40,800 --> 00:04:43,000
In case I want underscores, I figured I should pick something that

101
00:04:43,000 --> 00:04:44,600
isn't a valid identifier name.

102
00:04:45,800 --> 00:04:46,700
So yeah.

103
00:04:46,900 --> 00:04:49,000
And now we got to fix the debug system because we removed some of

104
00:04:49,000 --> 00:04:52,300
these things like name event block name for now.

105
00:04:54,400 --> 00:04:57,800
I think what we want to do here is just let this be the grid for now,

106
00:04:57,800 --> 00:05:01,300
but in the future we're going to parse that get out and actually do

107
00:05:01,300 --> 00:05:02,000
some stuff with it.

108
00:05:02,000 --> 00:05:04,100
So we'll leave that for now.

109
00:05:04,700 --> 00:05:07,800
Open data block, I don't know that we actually want any of this here.

110
00:05:07,800 --> 00:05:10,500
I think I might just say that that's not going to get printed out at

111
00:05:10,500 --> 00:05:12,500
all because we decided to stop putting those anyway and they're

112
00:05:12,500 --> 00:05:16,100
handled kind of differently in the external code anyway.

113
00:05:16,800 --> 00:05:19,600
And so I think we're just going to leave that like that here.

114
00:05:19,600 --> 00:05:23,200
I'll put that grid again if we need to and

115
00:05:23,800 --> 00:05:27,100
In case for debugging purposes, I think that should basically be it.

116
00:05:27,200 --> 00:05:28,300
So let's see.

117
00:05:28,300 --> 00:05:29,400
So we've got that.

118
00:05:29,500 --> 00:05:31,500
Now, we've got get group for her.

119
00:05:31,500 --> 00:05:32,300
Cool name.

120
00:05:32,600 --> 00:05:37,100
If we are to pass the, the block name in here, I mean, sorry, we're

121
00:05:37,100 --> 00:05:41,000
for past the the Grid in there, we'll have to do some work inside

122
00:05:41,000 --> 00:05:44,000
there to sort of first find the the end of it.

123
00:05:44,000 --> 00:05:44,500
Right.

124
00:05:44,700 --> 00:05:47,300
Because the way that we're building these now is a little bit

125
00:05:47,300 --> 00:05:48,700
different, right?

126
00:05:48,700 --> 00:05:49,900
We've got handmade.

127
00:05:51,500 --> 00:05:56,400
Debug interface is, is building, these potentially using the debug

128
00:05:56,400 --> 00:05:57,400
name thing.

129
00:05:57,700 --> 00:05:59,600
And speaking of that, is there a

130
00:06:00,200 --> 00:06:06,100
Do we know why we didn't do the debug name here?

131
00:06:06,200 --> 00:06:08,600
I feel like that's a screw-up.

132
00:06:08,600 --> 00:06:11,300
Like I feel like we want this to really be that, right?

133
00:06:11,300 --> 00:06:12,500
Because what's the what?

134
00:06:12,500 --> 00:06:14,700
Why wouldn't we do that, right?

135
00:06:15,300 --> 00:06:18,500
It only gives us more information and the name is preserved when it's

136
00:06:18,500 --> 00:06:20,600
passed through, so we can still parse it out.

137
00:06:20,600 --> 00:06:23,000
So I think we're pretty much always going to want to do that.

138
00:06:23,000 --> 00:06:26,200
If I'm not mistaken, all names that come through the system, I think

139
00:06:26,200 --> 00:06:29,800
we would probably want to First, do a debug name on them so that we

140
00:06:30,000 --> 00:06:32,800
just have that information about where it came from.

141
00:06:33,000 --> 00:06:36,900
So I would say, almost all of these are probably that way, right?

142
00:06:37,000 --> 00:06:41,100
When we do any of these things because record debug event, I don't

143
00:06:41,100 --> 00:06:43,300
think will automatically do it right record.

144
00:06:43,300 --> 00:06:46,700
Debug event doesn't try to do anything automatic, it just takes it

145
00:06:46,700 --> 00:06:47,700
directly as it is.

146
00:06:47,700 --> 00:06:48,700
You can kind of see that.

147
00:06:49,400 --> 00:06:52,900
So I think in all these cases, what we really want to do is we want to

148
00:06:52,900 --> 00:06:56,900
make sure that we're always passing that debug name because that's the

149
00:06:56,900 --> 00:06:59,700
thing that will wrap whatever we say.

150
00:07:00,100 --> 00:07:02,500
Into a string that's got the additional information.

151
00:07:02,500 --> 00:07:04,100
So I think that's what we want.

152
00:07:04,300 --> 00:07:07,100
We can obviously always bail on that if we if it turns out that I'm

153
00:07:07,100 --> 00:07:10,300
doing something stupid and that's not a good idea, but that feels to

154
00:07:10,300 --> 00:07:14,400
me like the right thing because that way, we're essentially packing

155
00:07:14,400 --> 00:07:17,800
all of the important information into one pointer, it just has a

156
00:07:17,800 --> 00:07:20,400
string that's just got all of that in it and that way the debugging

157
00:07:20,500 --> 00:07:25,100
system at its Leisure later can just kind of grew up extract that as

158
00:07:25,100 --> 00:07:27,300
necessary, which seems reasonable to me.

159
00:07:32,000 --> 00:07:35,700
Yeah, we're going to have a little bit of work to do obviously later

160
00:07:35,700 --> 00:07:38,700
on where we have to kind of deal with these strings.

161
00:07:39,900 --> 00:07:43,700
That's going to be a separate issue but anyway, so alright.

162
00:07:43,700 --> 00:07:45,400
That seems fine to me.

163
00:07:45,500 --> 00:07:46,500
Let's see what we've got here.

164
00:07:47,500 --> 00:07:48,700
Block name

165
00:07:52,100 --> 00:07:55,200
So this matching block named stuff is just going to match the grid,

166
00:07:56,000 --> 00:07:57,800
that's pretty straightforward, right?

167
00:07:58,600 --> 00:08:00,000
What else we got here?

168
00:08:00,000 --> 00:08:01,300
Block name?

169
00:08:02,200 --> 00:08:03,900
Yeah, I don't I don't know that.

170
00:08:04,400 --> 00:08:07,200
I don't know that there's really a lot of cases where we can't just

171
00:08:07,200 --> 00:08:12,200
swap block name, you know, we're we can't just swap block name with

172
00:08:12,200 --> 00:08:15,600
with that code and then later we just got to kind of parse it out and

173
00:08:15,600 --> 00:08:16,900
make it into something more reasonable.

174
00:08:17,500 --> 00:08:20,700
So anyway, time date we're now in the to time block

175
00:08:20,900 --> 00:08:22,900
So we got to go ahead and fix our time to lock stuff.

176
00:08:23,300 --> 00:08:24,700
So here is time block.

177
00:08:29,600 --> 00:08:31,300
Not sure what the complaint is there.

178
00:08:31,300 --> 00:08:34,200
It looks like our unwrapping macro is not working properly.

179
00:08:35,900 --> 00:08:37,799
It looks like it's not welding.

180
00:08:37,799 --> 00:08:41,299
Maybe the way that it should because this is a, this is the first time

181
00:08:41,299 --> 00:08:44,200
that we've got two time blocks, I guess.

182
00:08:44,200 --> 00:08:45,200
Or is that just the first time?

183
00:08:45,200 --> 00:08:46,000
Like what does it say?

184
00:08:48,000 --> 00:08:52,300
Time block underscore so it's not actually welding a number on there.

185
00:08:53,100 --> 00:08:57,000
So that just looks like a macro bug, it's not welding this number,

186
00:08:57,100 --> 00:08:57,700
right?

187
00:08:58,100 --> 00:08:59,800
So why isn't it welding that number?

188
00:09:00,200 --> 00:09:04,600
Well, if we say time block name, it looks like it's not welding the

189
00:09:04,600 --> 00:09:08,500
number because we accidentally eliminated that which is stupid.

190
00:09:08,700 --> 00:09:10,300
So, that's not a good idea.

191
00:09:11,100 --> 00:09:14,400
So let's not do that and then we should be fine.

192
00:09:14,900 --> 00:09:24,300
Okay, so missing clothes before, identify our pixel fill again.

193
00:09:24,300 --> 00:09:26,600
This is probably just a problem with them.

194
00:09:30,900 --> 00:09:32,200
With the macro.

195
00:09:32,600 --> 00:09:37,200
So pixel Phil is going to come out right here.

196
00:09:38,200 --> 00:09:43,300
Where is debug name function and debug name name?

197
00:09:44,100 --> 00:09:46,100
That needs to be a string.

198
00:09:46,400 --> 00:09:47,900
Am I right about that?

199
00:09:48,300 --> 00:09:56,200
So yeah, let's take a look at that particular guy wears it.

200
00:09:56,200 --> 00:09:56,700
There we go.

201
00:09:57,600 --> 00:10:02,000
So I think the only problem here is that that's supposed to be a

202
00:10:02,000 --> 00:10:05,000
string and it wasn't a string other than that.

203
00:10:05,000 --> 00:10:08,900
I think we're fine ignored time, block.

204
00:10:09,600 --> 00:10:11,200
I don't know what an ignored time.

205
00:10:11,200 --> 00:10:16,400
Block was supposed to be, so I guess these are not really so ignored

206
00:10:16,400 --> 00:10:19,200
if I may, so that's fine.

207
00:10:19,200 --> 00:10:21,000
I mean, there's nothing wrong with that.

208
00:10:21,500 --> 00:10:21,800
All right.

209
00:10:21,800 --> 00:10:27,100
So ignored time block pixel, Phil just needs to again, be

210
00:10:27,300 --> 00:10:28,700
Like this.

211
00:10:30,900 --> 00:10:32,400
See what else we got here.

212
00:10:32,800 --> 00:10:36,200
These guys don't need to be there anymore.

213
00:10:38,100 --> 00:10:42,300
And debug data block, platform.

214
00:10:42,300 --> 00:10:43,800
/ controls.

215
00:10:46,500 --> 00:10:49,000
You know, I don't know why that happens.

216
00:10:49,000 --> 00:10:51,800
Also, there's a weird photo thing where it loses.

217
00:10:51,800 --> 00:10:53,900
The compilation directory, periodically.

218
00:10:54,100 --> 00:10:56,800
I got to see what I'm doing wrong there, because that must be

219
00:10:56,800 --> 00:10:59,100
something I'm doing since I'm the one, who stores the compilation

220
00:10:59,100 --> 00:10:59,700
directory.

221
00:11:00,700 --> 00:11:04,300
So, I must have a bug in my fur coat or config, but I don't actually

222
00:11:04,300 --> 00:11:05,000
know what the bug is.

223
00:11:05,000 --> 00:11:08,200
I got to look into it because I'm actually the person who stores that

224
00:11:08,500 --> 00:11:12,400
and it gets, I must like accidentally hit a key that overwrites it,

225
00:11:12,400 --> 00:11:13,500
that I bound to something, I don't know.

226
00:11:13,500 --> 00:11:14,100
It's weird.

227
00:11:14,300 --> 00:11:14,600
I

228
00:11:14,900 --> 00:11:16,600
Something up anyway.

229
00:11:16,900 --> 00:11:19,100
So let's see, executable refresh.

230
00:11:19,300 --> 00:11:20,600
So this is begin block.

231
00:11:20,600 --> 00:11:25,200
Now again I think this is just going to be a situation where this is

232
00:11:25,200 --> 00:11:27,700
actually a word now where we don't have to.

233
00:11:27,700 --> 00:11:30,700
Yes it's so that's really there's not particularly much.

234
00:11:31,500 --> 00:11:33,900
Wait, why does end block need a name?

235
00:11:36,800 --> 00:11:38,000
That doesn't really make any sense.

236
00:11:38,000 --> 00:11:40,300
Does it do they match by name?

237
00:11:43,100 --> 00:11:44,200
Is that how we did that?

238
00:11:46,900 --> 00:11:48,200
Because I assume that they

239
00:11:49,700 --> 00:11:53,000
Like what's, what is the idea behind that does anyone know?

240
00:11:57,400 --> 00:11:59,800
in fact, end block is not supposed to even have to take an

241
00:12:00,000 --> 00:12:00,500
Anymore.

242
00:12:06,900 --> 00:12:08,800
Yeah, I don't know what the point of that is I'm just going to delete

243
00:12:08,800 --> 00:12:10,900
that and then we'll see if that actually matters because the blocks

244
00:12:10,900 --> 00:12:12,400
have to open and close symmetrically.

245
00:12:12,400 --> 00:12:16,800
It's not like you could open one block, close a different block and

246
00:12:16,800 --> 00:12:18,100
then close that block.

247
00:12:18,400 --> 00:12:22,500
I don't think we allow that or at least if we do, I think it's fine to

248
00:12:22,500 --> 00:12:25,000
disallow it because I don't really feel like putting that in there,

249
00:12:25,300 --> 00:12:25,800
you know?

250
00:12:27,300 --> 00:12:27,800
So yeah.

251
00:12:27,800 --> 00:12:30,900
So let's let's, let's go ahead and

252
00:12:32,700 --> 00:12:36,300
And I get rid of that because I don't even know what the point of that

253
00:12:36,300 --> 00:12:36,600
is.

254
00:12:38,300 --> 00:12:40,600
It should just always close the surrounding block.

255
00:12:41,600 --> 00:12:44,900
And I suppose, what we could do is we could make this be a begin block

256
00:12:44,900 --> 00:12:45,400
and block.

257
00:12:45,500 --> 00:12:49,000
We could just use timed block for this pair and have it passed the

258
00:12:49,000 --> 00:12:49,600
string twice.

259
00:12:49,600 --> 00:12:51,800
If we wanted to do that, you could do that.

260
00:12:51,800 --> 00:12:53,700
I don't know that we care that much about it.

261
00:12:56,900 --> 00:12:57,400
We'll see.

262
00:13:05,300 --> 00:13:06,000
All right.

263
00:13:08,900 --> 00:13:10,000
Oh wait, I need that.

264
00:13:11,500 --> 00:13:12,600
Why am I doing that?

265
00:13:12,800 --> 00:13:18,400
I just said, I just said, I didn't want that or that

266
00:13:21,500 --> 00:13:21,900
go.

267
00:13:26,500 --> 00:13:27,800
And let's see.

268
00:13:33,300 --> 00:13:39,700
Okay, so now I don't actually know if where we should probably have,

269
00:13:41,000 --> 00:13:44,700
we didn't really go finish the debug layer to change it to support the

270
00:13:44,700 --> 00:13:45,800
things that we did.

271
00:13:46,400 --> 00:13:53,100
So we are kind of not quite there yet but we're already, you know,

272
00:13:53,100 --> 00:13:58,500
working to a certain degree as you can kind of see we have like we

273
00:13:58,500 --> 00:14:00,900
have some stuff doing some stuff.

274
00:14:01,500 --> 00:14:02,900
The problem is that right now.

275
00:14:03,100 --> 00:14:06,400
Doing is this taking every debug event and like I said, since we're

276
00:14:06,400 --> 00:14:10,900
not parsing this extra information that it that we get and stripping

277
00:14:10,900 --> 00:14:14,500
it off before, we do any of our other debug work, we just end up in

278
00:14:14,500 --> 00:14:19,000
this circumstance where we got all kinds of garbage in here because

279
00:14:19,000 --> 00:14:21,500
each one of our dear this is like there's going to be one of these for

280
00:14:21,500 --> 00:14:25,400
every line of debug code because hey our grid is working good news.

281
00:14:26,100 --> 00:14:28,600
It's got the file line, encounter and all that stuff.

282
00:14:28,700 --> 00:14:32,600
So it means that we have a unique source for every last piece of

283
00:14:32,600 --> 00:14:32,900
debugging.

284
00:14:33,000 --> 00:14:36,800
Ugh code in our game but that's not how we want to actually display

285
00:14:36,800 --> 00:14:37,200
it.

286
00:14:37,200 --> 00:14:39,800
So basically we need to do now is just ping back over to the debug

287
00:14:39,800 --> 00:14:43,900
code and when these goods come in, we want to parse them out so that

288
00:14:43,900 --> 00:14:49,600
we grab the file line and counter information from them, which is all

289
00:14:49,600 --> 00:14:50,100
good.

290
00:14:53,200 --> 00:14:53,900
but,

291
00:14:55,400 --> 00:14:59,700
we want to strip that part off and save it and then just

292
00:15:00,000 --> 00:15:04,800
Is that that other part, which is sort of the like that the real name

293
00:15:04,800 --> 00:15:09,000
that we gave it, parse that, and use that to construct the debug

294
00:15:09,000 --> 00:15:10,500
hierarchy as necessary.

295
00:15:11,100 --> 00:15:13,100
So that's what we need to switch over to doing now.

296
00:15:13,100 --> 00:15:17,600
I think, I mean, don't quote me on this, but I think we're at the

297
00:15:17,600 --> 00:15:23,300
point where we, where the macros are a little saner.

298
00:15:25,200 --> 00:15:28,500
So, anyway, we, I'm pretty sure we also tested.

299
00:15:28,500 --> 00:15:29,800
This will have to test this again.

300
00:15:30,000 --> 00:15:33,300
As you know, this is the this is the debug space remaining.

301
00:15:33,700 --> 00:15:36,700
And so when this gets down to zero is when debug information starts

302
00:15:36,700 --> 00:15:39,600
getting recycled after we're done with all this.

303
00:15:39,600 --> 00:15:43,100
Since we've made so many changes, we should set the total debugger

304
00:15:43,100 --> 00:15:47,500
Mina down to a really small size like you know 1K or something so that

305
00:15:47,500 --> 00:15:51,400
we can watch it recycle a lot and make sure that we don't have a bug

306
00:15:51,400 --> 00:15:55,800
in there because obviously, even though we tested it a while back,

307
00:15:56,100 --> 00:15:59,000
we're not really testing it now because until that number gets to

308
00:15:59,000 --> 00:15:59,800
zero, no,

309
00:16:00,000 --> 00:16:01,200
Recycling is happening.

310
00:16:01,300 --> 00:16:05,300
So until that number gets a 0, we have no idea what's actually

311
00:16:05,300 --> 00:16:08,500
happening in the recycling recycling might be totally broken because

312
00:16:08,500 --> 00:16:10,400
it's never getting run, right?

313
00:16:11,300 --> 00:16:16,300
And so that's also just something to something to note when if until

314
00:16:16,300 --> 00:16:20,100
this number read zero, we have not tested the recycling in sort of the

315
00:16:20,100 --> 00:16:20,700
new stuff.

316
00:16:22,900 --> 00:16:27,400
All right, so, let's take a look at where we're at, in the debug

317
00:16:27,400 --> 00:16:28,000
system.

318
00:16:28,600 --> 00:16:33,500
So I need to take a moment to reefer miliar eyes myself, with sort of

319
00:16:33,500 --> 00:16:37,500
what we had here, because we've pulled some things out, and sort of

320
00:16:37,500 --> 00:16:39,000
reorganize things a little bit.

321
00:16:39,100 --> 00:16:42,200
And so, I kind of want to make sure that we're, you know, we don't

322
00:16:42,200 --> 00:16:45,800
have too much of a stijl remains at the outset here.

323
00:16:45,800 --> 00:16:49,800
I kind of want to trim away, potentially a little bit of that as

324
00:16:49,800 --> 00:16:51,700
necessary and we'll see how we go.

325
00:16:52,300 --> 00:16:52,500
So,

326
00:16:52,700 --> 00:16:55,500
Going to start at the beginning and just take a quick look at how we

327
00:16:55,500 --> 00:16:57,900
ended up in terms of our structures here.

328
00:16:58,200 --> 00:17:04,200
You can see that the debug state is pretty pretty giant here yet at

329
00:17:04,200 --> 00:17:05,500
the risk of stating the obvious.

330
00:17:05,700 --> 00:17:07,099
So, we've got a lot of stuff in here.

331
00:17:07,200 --> 00:17:09,300
We have the high priority queue.

332
00:17:11,400 --> 00:17:16,000
And I believe, the only reason we have that at all is because this

333
00:17:16,000 --> 00:17:20,800
needs to be able to display font information and other bitmap debug

334
00:17:20,800 --> 00:17:21,300
data.

335
00:17:21,599 --> 00:17:26,500
So it needs to be able to talk to the asset system and load stuff.

336
00:17:26,500 --> 00:17:28,400
So I suspect that's why that's there.

337
00:17:29,000 --> 00:17:31,400
But again since I'm just refill your muscles I'm going to I'm just

338
00:17:31,400 --> 00:17:35,000
going to make sure that I actually know that that's true for for

339
00:17:35,000 --> 00:17:35,600
reals.

340
00:17:36,200 --> 00:17:36,900
So

341
00:17:38,700 --> 00:17:45,300
So I'm going to go and search this file and just say, okay, where is

342
00:17:45,300 --> 00:17:48,100
high priority queue actually used.

343
00:17:51,600 --> 00:17:53,300
it's like the answer is no, where

344
00:17:56,100 --> 00:17:59,400
So let's take a brief look and see if we even need that anymore, we

345
00:17:59,400 --> 00:17:59,800
might not.

346
00:18:02,900 --> 00:18:03,900
Looks like we don't.

347
00:18:04,600 --> 00:18:07,000
So if the hike priority queue is not need anymore.

348
00:18:07,000 --> 00:18:10,400
I'm just going to vape it because yes since we're talking to the asset

349
00:18:10,400 --> 00:18:14,900
system I'm assuming that that's yeah you know what that was it was for

350
00:18:14,900 --> 00:18:18,800
when we actually called the renderer in here probably but we don't

351
00:18:18,800 --> 00:18:21,800
anymore we just build the command q and let it deal with it later.

352
00:18:22,200 --> 00:18:25,200
So I think it's probably fine because the render group is going to

353
00:18:25,200 --> 00:18:28,400
have access to that I mean at least I assume.

354
00:18:28,700 --> 00:18:32,700
So anyway, let's go back to what we're looking at here.

355
00:18:33,400 --> 00:18:34,300
So we've got our Rena's

356
00:18:34,500 --> 00:18:36,100
You're going to nationalize that stuff's fine.

357
00:18:36,100 --> 00:18:39,400
Our render groups are fonts which we need.

358
00:18:39,700 --> 00:18:43,100
We don't really need the compiler anymore because we don't ever run

359
00:18:43,100 --> 00:18:48,000
the compiler from the debugger anymore so that actually could go away

360
00:18:48,200 --> 00:18:52,200
and we could if we wanted to pull that stuff out of the platform layer

361
00:18:53,200 --> 00:18:56,300
and just say, we don't do that anymore because since we don't actually

362
00:18:56,300 --> 00:18:57,300
need it for anything.

363
00:18:57,300 --> 00:19:04,300
As far as I know we could just we could just Vape that maybe we should

364
00:19:06,000 --> 00:19:08,400
And we can leave it in the platform layer for now.

365
00:19:09,100 --> 00:19:10,000
You know, we can say that.

366
00:19:10,000 --> 00:19:13,300
That's, that's going to stay in the platform layer for now.

367
00:19:13,300 --> 00:19:15,000
Just in case, we want to turn it back on.

368
00:19:15,300 --> 00:19:19,800
We won't delete the important part of the code, but you know, might as

369
00:19:19,800 --> 00:19:20,800
well get rid of that for now.

370
00:19:21,500 --> 00:19:24,300
So we've got menus and selections and that sort of stuff.

371
00:19:24,400 --> 00:19:27,500
And then we've got our hash tables here for elements and information

372
00:19:27,500 --> 00:19:31,000
about elements of the root groups and the trees.

373
00:19:31,100 --> 00:19:33,100
That's what I want to take a little bit more of look at first.

374
00:19:33,100 --> 00:19:34,700
First, I'm going to just go through here and just

375
00:19:35,200 --> 00:19:37,900
Check this stuff out scope to record.

376
00:19:37,900 --> 00:19:40,600
I believe that was a thing we were using for profiling.

377
00:19:40,600 --> 00:19:44,200
I'm going to get rid of that temporarily and C because I wanted to

378
00:19:44,200 --> 00:19:44,800
know.

379
00:19:45,300 --> 00:19:49,300
Is that just that that actually is part of the collation work?

380
00:19:51,300 --> 00:19:52,500
I'll leave that in there temporarily.

381
00:19:52,500 --> 00:19:55,800
But that probably we want to reassess as well as we do the profiling

382
00:19:55,900 --> 00:19:57,300
as we do a profile view.

383
00:19:58,900 --> 00:19:59,200
All right.

384
00:19:59,200 --> 00:20:02,000
So oldest frame, most recent frame and collation frame.

385
00:20:02,300 --> 00:20:06,400
I don't really remember very much about these frames to be honest with

386
00:20:06,400 --> 00:20:06,700
you.

387
00:20:07,400 --> 00:20:10,300
So I'm going to take a look at that.

388
00:20:10,300 --> 00:20:12,900
Struck debug frame, just to see what's here.

389
00:20:13,300 --> 00:20:17,000
So yeah.

390
00:20:18,600 --> 00:20:20,800
So these are just in Max reasons for frame.

391
00:20:20,800 --> 00:20:21,800
Is that even a thing?

392
00:20:21,800 --> 00:20:24,600
Do we even do any of this stuff anymore?

393
00:20:24,900 --> 00:20:26,600
To what extent do we use these?

394
00:20:26,900 --> 00:20:28,000
I'm interested to know.

395
00:20:28,200 --> 00:20:29,500
So let's take a look.

396
00:20:29,500 --> 00:20:32,100
Let's look at collation frame.

397
00:20:33,000 --> 00:20:34,700
Is that even being used anywhere?

398
00:20:34,800 --> 00:20:35,300
There it is.

399
00:20:35,600 --> 00:20:39,500
So when we do this we create a frame and we're collating that frame

400
00:20:40,900 --> 00:20:43,900
and then I guess we're done with that frame.

401
00:20:43,900 --> 00:20:47,700
We push it on that set of frames, so that's fine.

402
00:20:48,300 --> 00:20:50,000
Don't really know what we do.

403
00:20:50,000 --> 00:20:52,200
I guess that's just kind of sitting there waiting for us to put more

404
00:20:52,200 --> 00:20:55,500
information in it because if you take a look at it right, there's

405
00:20:55,500 --> 00:20:59,700
nothing really in here, it's just, it's pretty minimal.

406
00:21:00,000 --> 00:21:00,700
Formation.

407
00:21:00,800 --> 00:21:04,800
It's just when the frame began and ended how much time elapsed between

408
00:21:04,800 --> 00:21:08,500
those two and then some information that you might have used if you

409
00:21:08,500 --> 00:21:10,400
were displaying like other stuff.

410
00:21:10,900 --> 00:21:15,100
So I feel like, yeah, that's not super important.

411
00:21:17,900 --> 00:21:18,200
Hmm.

412
00:21:18,300 --> 00:21:18,800
Interesting.

413
00:21:19,300 --> 00:21:21,000
Anyway, not doesn't matter.

414
00:21:21,400 --> 00:21:25,600
So anyway, yeah, so we got the frame information there.

415
00:21:25,800 --> 00:21:28,800
We've got this stuff which is really only used during collation.

416
00:21:28,800 --> 00:21:31,000
We could probably pull this out into a separate thing.

417
00:21:31,700 --> 00:21:34,600
So it was clear that was only two user in question, but this is how we

418
00:21:34,800 --> 00:21:36,400
sort of build up our collation stuff.

419
00:21:37,300 --> 00:21:41,600
And then we've got sort of our free lists here, just for some memory

420
00:21:41,600 --> 00:21:43,700
management purposes, but that's about it.

421
00:21:44,200 --> 00:21:46,800
So, alright, that all seems fine for now.

422
00:21:47,300 --> 00:21:47,400
Why

423
00:21:47,700 --> 00:21:49,700
Shouldn't looking at it in a little more detail here.

424
00:21:49,700 --> 00:21:53,600
Is this element the element tree view, all that stuff?

425
00:21:54,100 --> 00:21:57,600
Because I kind of don't really know much about how this is supposed to

426
00:21:57,600 --> 00:21:58,400
work, right?

427
00:21:58,400 --> 00:22:02,600
And we went through a couple different revisions of it and so we kind

428
00:22:02,600 --> 00:22:06,100
of never quite settled it down into exactly what we wanted.

429
00:22:06,100 --> 00:22:06,700
For, sure.

430
00:22:07,000 --> 00:22:08,900
And we're closer to understanding what we want now.

431
00:22:08,900 --> 00:22:13,200
So now I think would be a good time to massage that down just kind of

432
00:22:13,200 --> 00:22:17,000
Polish it out and make sure that it's working in a reasonable fashion.

433
00:22:17,600 --> 00:22:21,500
So, we have four things here, in addition to debug events, debug

434
00:22:21,500 --> 00:22:24,300
events are the things that go into the buffers that we actually look

435
00:22:24,300 --> 00:22:29,300
at that actually capture some important piece of data, but then we've

436
00:22:29,300 --> 00:22:30,700
got four more things.

437
00:22:30,700 --> 00:22:35,500
We've got a debug elements, a debug view, a debug variable group and a

438
00:22:35,500 --> 00:22:41,600
debug tree, and I feel like that's just too much stuff.

439
00:22:42,600 --> 00:22:47,500
My, my, my hunch is that

440
00:22:48,200 --> 00:22:51,300
You know, I wanted to do explorations to see how much stuff we could

441
00:22:51,300 --> 00:22:55,400
do and maybe we want to cut a feature or two, that we don't super care

442
00:22:55,400 --> 00:23:01,100
about necessarily and make a nice try to get that feature in a

443
00:23:01,100 --> 00:23:04,000
different way so that we don't have to worry about some of the things.

444
00:23:04,200 --> 00:23:07,600
So, for example, one of the things that I was playing around with was

445
00:23:07,600 --> 00:23:10,400
the ability to tear off, I don't know if you remember this like you

446
00:23:10,400 --> 00:23:13,100
could tear off a variable and and view it.

447
00:23:13,100 --> 00:23:16,900
I don't know if we still have, I don't know if we actually still have

448
00:23:16,900 --> 00:23:17,400
that.

449
00:23:17,600 --> 00:23:22,600
At all, but I think you could like, right, right.

450
00:23:22,600 --> 00:23:23,800
Tear off something.

451
00:23:24,100 --> 00:23:26,800
I don't really remember how it worked.

452
00:23:27,700 --> 00:23:30,800
It was some weird thing that you could do.

453
00:23:31,500 --> 00:23:34,700
Yeah, I have no idea but we had some weird thing a while back we could

454
00:23:34,700 --> 00:23:39,200
tear off things and place them and I don't think we really need that.

455
00:23:39,800 --> 00:23:42,800
I think that was an interesting thing to look at but it was probably

456
00:23:42,800 --> 00:23:44,300
just not that necessary.

457
00:23:44,400 --> 00:23:46,700
Because what I was thinking and I don't know why I didn't think of

458
00:23:46,700 --> 00:23:47,400
this before.

459
00:23:47,600 --> 00:23:51,800
But what I was thinking is if you want to build you know easier access

460
00:23:51,800 --> 00:23:56,000
things, we don't really need that to be.

461
00:23:57,800 --> 00:23:59,400
We don't really need that to be.

462
00:24:00,000 --> 00:24:00,900
So dynamic.

463
00:24:03,600 --> 00:24:03,900
Right?

464
00:24:03,900 --> 00:24:08,000
We can still just have one debug view tree and then we can just have

465
00:24:08,000 --> 00:24:11,500
different like trees that it could view that we just set which one it

466
00:24:11,500 --> 00:24:14,300
is in the program and be done with it.

467
00:24:14,700 --> 00:24:18,000
We don't need the ability to really like dynamically customize those

468
00:24:18,000 --> 00:24:21,700
at runtime or do anything else to ridiculous there.

469
00:24:22,000 --> 00:24:26,400
So I'm not sure that we really need to do it that way, but either way,

470
00:24:27,800 --> 00:24:31,100
you know, we may want to keep the concept around anyway because we

471
00:24:31,100 --> 00:24:33,100
probably do want multiple views into the data.

472
00:24:33,400 --> 00:24:36,500
We can like have optimized use for different types of debugging like

473
00:24:36,600 --> 00:24:39,900
when we're trying to bug memory, we can set it up for one way and when

474
00:24:39,900 --> 00:24:43,100
we're trying to debug you know performance we set it up a different

475
00:24:43,100 --> 00:24:44,600
way or who knows what, right?

476
00:24:45,600 --> 00:24:48,500
So let's just try to drill into these a little bit.

477
00:24:48,500 --> 00:24:51,000
So I'm just going to go take a look at what each of those is and what

478
00:24:51,000 --> 00:24:51,900
it's supposed to do.

479
00:24:52,400 --> 00:24:54,500
So you can see the debug view is here.

480
00:24:56,000 --> 00:25:00,300
And debug views are just all a debug view is and this is something

481
00:25:00,300 --> 00:25:03,000
that I don't think really needs to be edited much.

482
00:25:03,400 --> 00:25:10,100
All a debug view is is a way to give some information that attaches to

483
00:25:10,100 --> 00:25:15,400
a piece of debugging state that says like how to view it, right?

484
00:25:15,600 --> 00:25:19,200
Because what's happening is we've got these debug events than they're

485
00:25:19,200 --> 00:25:20,200
sort of coming in.

486
00:25:22,400 --> 00:25:25,100
These events are like coming in through the system.

487
00:25:25,300 --> 00:25:26,700
We're recording them.

488
00:25:26,700 --> 00:25:27,900
All right?

489
00:25:28,000 --> 00:25:31,800
And we wanted some way of saying oh when I'm looking at one of these I

490
00:25:31,800 --> 00:25:33,400
want to attach some information to it.

491
00:25:33,400 --> 00:25:36,000
That'll let me know what to do when I debug.

492
00:25:36,600 --> 00:25:40,500
And so they were set up so that we could sort of look at them up in by

493
00:25:40,500 --> 00:25:41,600
debug idea or whatever.

494
00:25:41,600 --> 00:25:44,800
And that would give us the information that we needed to know about

495
00:25:44,800 --> 00:25:47,100
what should be happening in that case.

496
00:25:47,200 --> 00:25:49,900
And the reason that we did that by hash was so that we could have it

497
00:25:49,900 --> 00:25:50,900
be sparse and

498
00:25:51,200 --> 00:25:54,300
Sleepy like if you interacted with something, then we'll remember it.

499
00:25:54,400 --> 00:25:56,700
But if you've never interacted with it, then we don't really need to

500
00:25:56,700 --> 00:25:57,400
remember it.

501
00:25:57,500 --> 00:26:00,600
So that way, we could view things like giant list of things without

502
00:26:00,600 --> 00:26:03,200
having to really worry too much about them, right?

503
00:26:09,800 --> 00:26:12,600
So I don't know how necessary that is, but there's nothing wrong with

504
00:26:12,600 --> 00:26:13,000
that system.

505
00:26:13,000 --> 00:26:14,300
Seems totally fine.

506
00:26:14,800 --> 00:26:17,500
So, I don't know that we need to do anything too, much more

507
00:26:17,500 --> 00:26:18,600
complicated with it.

508
00:26:18,900 --> 00:26:21,200
We can just leave that as it is at the moment.

509
00:26:21,800 --> 00:26:24,800
So, let's move on here.

510
00:26:25,000 --> 00:26:27,600
So we have debug start event.

511
00:26:28,700 --> 00:26:33,800
Debug stored event is how we take information out of our debug buffers

512
00:26:34,000 --> 00:26:35,600
and keep it around permanently.

513
00:26:35,800 --> 00:26:38,700
Those are the things that we're sort of filling up that, that

514
00:26:38,900 --> 00:26:40,800
Per frame Arena storage as it kind of goes up.

515
00:26:40,800 --> 00:26:42,700
That's what storing it is.

516
00:26:42,700 --> 00:26:46,500
This thing, this debug start event our debug element,

517
00:26:48,100 --> 00:26:52,800
A debug element is a sort of the header that says this is a particular

518
00:26:52,800 --> 00:26:54,800
source of debug information in the program.

519
00:26:55,100 --> 00:26:58,500
And it's got some number of stored events that have happened to it

520
00:26:58,500 --> 00:26:59,800
over time and

521
00:27:00,000 --> 00:27:00,700
Are stored here.

522
00:27:00,700 --> 00:27:06,000
So, this right here is basically a linked list of all of the events

523
00:27:06,500 --> 00:27:09,900
that occurred from this particular element, right?

524
00:27:11,300 --> 00:27:17,600
Then we have this, which is a hierarchical way of viewing, the sort of

525
00:27:17,600 --> 00:27:19,600
the data, right?

526
00:27:19,600 --> 00:27:22,600
Can link this up to children and then finally have debug trees and

527
00:27:22,600 --> 00:27:29,100
debug trees are just the one of those sort of like the notion that we

528
00:27:29,100 --> 00:27:29,800
would start.

529
00:27:30,000 --> 00:27:33,300
At some variable Group, which is the higher cool thing and display it

530
00:27:33,400 --> 00:27:35,700
somewhere on the screen, right?

531
00:27:39,200 --> 00:27:42,900
So honestly as much as I'd like to say that, it's a little

532
00:27:42,900 --> 00:27:43,600
overwrought.

533
00:27:43,600 --> 00:27:47,200
Honestly, I think we've represented actually, each thing we do really

534
00:27:47,200 --> 00:27:48,200
need to have in here.

535
00:27:48,200 --> 00:27:50,400
Like none of those are particularly redundant.

536
00:27:50,800 --> 00:27:53,900
You could collapse some of them down onto each other if you wanted to

537
00:27:53,900 --> 00:27:57,400
lose a feature like for example, we could collapse the concept of a

538
00:27:57,400 --> 00:27:58,300
debug View.

539
00:27:59,600 --> 00:28:03,700
We could just collapse that into the debug variable link itself that

540
00:28:03,700 --> 00:28:05,200
probably would work fine.

541
00:28:05,600 --> 00:28:10,300
But if we did that, then different debug trees would not be able to

542
00:28:10,300 --> 00:28:11,400
have different states.

543
00:28:11,500 --> 00:28:15,200
So for example, if we had to debug trees that both included somewhere

544
00:28:15,200 --> 00:28:17,700
in them, a particular collapsible group.

545
00:28:17,800 --> 00:28:20,600
When we expanded the group, it would be expanded in both.

546
00:28:20,600 --> 00:28:26,100
So you can see why, you know, you might not want to do that reduction

547
00:28:26,100 --> 00:28:27,700
because you definitely lose a feature.

548
00:28:27,900 --> 00:28:28,900
So I'm not sure that

549
00:28:29,100 --> 00:28:32,800
These are actually completely redundant so it seems fine to me that we

550
00:28:32,800 --> 00:28:35,300
actually have them so really all.

551
00:28:35,300 --> 00:28:39,000
I think we need to focus on for the time being in order to get things

552
00:28:39,000 --> 00:28:43,200
to a state that's useful to us at the moment is that the debug

553
00:28:43,200 --> 00:28:46,900
element, the debug elements that we're building.

554
00:28:47,500 --> 00:28:50,500
These grids are now those full names that have a bunch of information

555
00:28:50,500 --> 00:28:51,000
in them.

556
00:28:51,300 --> 00:28:55,300
And I think what we probably want to do is parcel out that information

557
00:28:55,800 --> 00:28:58,800
into something that's actually going to be.

558
00:29:01,200 --> 00:29:03,300
It's going to be more human usable, right?

559
00:29:03,300 --> 00:29:04,600
So you saw how it was going there.

560
00:29:04,600 --> 00:29:08,600
We want just that last part to be constructing like the hierarchy for

561
00:29:08,600 --> 00:29:08,800
us.

562
00:29:09,100 --> 00:29:13,000
We want to parse out the file name and the line number in a different

563
00:29:13,000 --> 00:29:13,800
way or whatever.

564
00:29:14,000 --> 00:29:17,500
So what we could do is say that when we encounter a debug event, we

565
00:29:17,500 --> 00:29:23,100
will create a debug element that sort of has that information in it.

566
00:29:23,100 --> 00:29:26,600
So we'll have you know the file name that it came from you know the

567
00:29:26,600 --> 00:29:30,600
function name that it came from perhaps and the the

568
00:29:31,100 --> 00:29:33,800
The line number in that file, right?

569
00:29:33,900 --> 00:29:37,000
We can have that information and then we can have its actual name.

570
00:29:37,200 --> 00:29:38,300
All of that stuff.

571
00:29:38,300 --> 00:29:42,900
We can actually have sort of known, right?

572
00:29:42,900 --> 00:29:48,000
All of that stuff seems totally totally doable so when we get to one

573
00:29:48,100 --> 00:29:51,400
we parse it out and we put it in that format that way our debug

574
00:29:51,400 --> 00:29:54,700
elements actually kind of had that information blown out and people

575
00:29:54,700 --> 00:29:57,700
can use the one, they actually want to use, right?

576
00:29:58,700 --> 00:29:59,700
So let's just start there.

577
00:30:00,200 --> 00:30:02,500
Because I know that I want to do that, so we might as well do that.

578
00:30:03,700 --> 00:30:04,400
All right.

579
00:30:05,000 --> 00:30:08,600
So when we're doing this and we're looking to see if we can match

580
00:30:09,500 --> 00:30:13,100
instead of matching these grids, we don't want to do that anymore.

581
00:30:13,100 --> 00:30:16,300
Anyway, that's just not a good idea, right?

582
00:30:16,600 --> 00:30:20,100
In fact, when we, when I'm looking at this, what we probably want to

583
00:30:20,100 --> 00:30:24,400
do is just take it a little slower actually, hash the string value,

584
00:30:24,500 --> 00:30:25,100
right?

585
00:30:25,100 --> 00:30:31,100
Because if we want this to work across hot loading, we have to be able

586
00:30:31,100 --> 00:30:33,400
to allow the

587
00:30:33,600 --> 00:30:35,700
Winds to change pointer, right?

588
00:30:35,900 --> 00:30:38,500
We can't count on the Grid's, always being the same pointer because

589
00:30:38,500 --> 00:30:42,800
across hot loads of the game code, all of those pointers are going to

590
00:30:42,800 --> 00:30:45,500
change those strengths while not necessarily all of them, but some of

591
00:30:45,500 --> 00:30:48,400
them probably are going to change possibly all of them but certainly

592
00:30:48,400 --> 00:30:49,700
some of them are going to change.

593
00:30:49,700 --> 00:30:53,000
So what we want to do here is we want to have some way of actually

594
00:30:53,000 --> 00:30:55,200
hashing the stably, I think so.

595
00:30:55,200 --> 00:30:58,700
I think what we want to do here is do a string hash, right?

596
00:31:00,200 --> 00:31:02,600
So we always do exactly what I said.

597
00:31:02,600 --> 00:31:04,300
We always always need to do, right.

598
00:31:04,300 --> 00:31:08,100
And you remember this, we need to do this right here.

599
00:31:08,400 --> 00:31:09,400
Better hash function

600
00:31:10,600 --> 00:31:13,300
You always put it to do in front of your hashtags as better hash

601
00:31:13,300 --> 00:31:13,700
function.

602
00:31:13,800 --> 00:31:17,000
Then you write a really bad hash function and then you ship it.

603
00:31:17,100 --> 00:31:19,400
That is how everything always happens.

604
00:31:19,800 --> 00:31:20,700
It's a requirement.

605
00:31:20,700 --> 00:31:22,600
If you're going to be a professional programmer, you need to know how

606
00:31:22,600 --> 00:31:26,500
to do this because, you know, you, hey, you put it to do there.

607
00:31:26,600 --> 00:31:29,700
So, the fact that you'd use an awful, hash function, you're absolved

608
00:31:29,700 --> 00:31:30,700
of all guilt, right?

609
00:31:30,700 --> 00:31:32,200
I mean what's the problem?

610
00:31:32,700 --> 00:31:36,800
So, here's my scan function, I'm going to take a look at the grid as

611
00:31:36,800 --> 00:31:40,100
it comes in so that the event has that grid that's that's coming in.

612
00:31:40,500 --> 00:31:45,400
I'm going to look through the the string here and I'm going to start

613
00:31:45,400 --> 00:31:49,900
with a hash value of 0, I'm going to go ahead and you know what we

614
00:31:49,900 --> 00:31:50,300
could do.

615
00:31:50,300 --> 00:31:54,000
And I don't even I don't, I'm loathe to eat and do this because I'm

616
00:31:54,000 --> 00:31:56,400
teaching you the wrong thing I suppose.

617
00:31:57,500 --> 00:32:01,700
But if we were to type in good string hash, right?

618
00:32:03,900 --> 00:32:08,500
We could take a look to see if there's any particularly good hash

619
00:32:08,500 --> 00:32:09,400
functions here.

620
00:32:10,400 --> 00:32:14,400
Hey look, it's University of Washington, which is, you know, actually

621
00:32:14,500 --> 00:32:17,300
pretty good for CS right.

622
00:32:17,500 --> 00:32:22,200
You can see here, they've got a whole slide presentation on it.

623
00:32:22,700 --> 00:32:23,700
Making string fast.

624
00:32:23,700 --> 00:32:25,000
Use Horner's rule.

625
00:32:27,500 --> 00:32:31,900
This doesn't look I'm not I'm not so confident in that hash functions

626
00:32:31,900 --> 00:32:32,800
for Strings.

627
00:32:33,400 --> 00:32:39,100
Let's see here, let's see here what have we got for hash functions for

628
00:32:39,100 --> 00:32:39,800
Strings.

629
00:32:41,000 --> 00:32:45,200
Because we could take a look and see if there were good hashes for

630
00:32:45,200 --> 00:32:45,900
Strings.

631
00:32:48,500 --> 00:32:49,100
Here we go.

632
00:32:50,200 --> 00:32:54,100
So, here is an example of a string hash, right?

633
00:32:55,900 --> 00:32:56,600
Not

634
00:32:57,500 --> 00:32:59,300
Particularly good looking.

635
00:32:59,300 --> 00:32:59,800
Maybe it is.

636
00:33:00,000 --> 00:33:03,500
I don't know but you can kind of see what what tends to happen with

637
00:33:03,500 --> 00:33:04,100
these guys.

638
00:33:04,500 --> 00:33:09,800
You do some math Ops on the thing as you go and that supposedly gives

639
00:33:09,800 --> 00:33:10,900
you a better string hashing.

640
00:33:12,100 --> 00:33:14,700
I don't know, I'm not gonna do it.

641
00:33:15,700 --> 00:33:17,200
I don't know anything about hashing.

642
00:33:17,800 --> 00:33:22,400
If that's number Theory and I'm zero, knowledge of number Theory so we

643
00:33:22,400 --> 00:33:27,200
are just going to use the world's worst hash value for Strings which

644
00:33:27,200 --> 00:33:31,200
is to just use the the sum of the values and we'll just let the chat

645
00:33:31,300 --> 00:33:32,100
people on the chat.

646
00:33:32,100 --> 00:33:34,100
They'll be somebody who's more into number 3 and chat.

647
00:33:34,100 --> 00:33:39,800
Maybe pseudonym 73 will know and then he can say maybe multiply the

648
00:33:39,800 --> 00:33:43,900
values by this, as you mix them together and then it'll be better and

649
00:33:43,900 --> 00:33:45,100
then we can go back to it.

650
00:33:45,700 --> 00:33:47,800
But I don't really want to do that now because I don't know.

651
00:33:48,000 --> 00:33:52,200
So anyway, so once we get a reasonable hash value and we pretend that

652
00:33:52,200 --> 00:33:53,400
somebody else did that for us.

653
00:33:53,600 --> 00:33:55,500
Obviously, we do the same thing that we always do.

654
00:33:55,500 --> 00:33:57,500
It's trivial to get an index from that.

655
00:33:57,500 --> 00:33:58,000
We just say.

656
00:33:58,000 --> 00:34:01,300
Alright, let's go ahead and MOB that value so that we know that we're

657
00:34:01,300 --> 00:34:04,400
inside the array and then we can search through here to see if we get

658
00:34:04,400 --> 00:34:06,100
any matches for that string.

659
00:34:06,200 --> 00:34:09,199
Now, when we take a look at that string, we are no longer going to be

660
00:34:09,199 --> 00:34:10,900
able to just check these two.

661
00:34:10,900 --> 00:34:15,300
We have to actually do a string compare but we can

662
00:34:15,400 --> 00:34:18,600
do a string compare on some of the other values.

663
00:34:18,600 --> 00:34:21,300
Probably a little more easily if that makes sense.

664
00:34:22,900 --> 00:34:24,100
Although well,

665
00:34:27,100 --> 00:34:30,199
No little turn here.

666
00:34:30,400 --> 00:34:34,699
So if we just do one string compare than that makes it a little bit

667
00:34:34,699 --> 00:34:38,600
quicker, I suppose than having to do multiple of them, I don't know.

668
00:34:38,600 --> 00:34:41,900
But what I was thinking of doing and maybe this is a bad idea.

669
00:34:42,100 --> 00:34:45,699
Is I was thinking of saying like oh okay, maybe I what I actually want

670
00:34:45,699 --> 00:34:48,800
here is debug element source.

671
00:34:50,400 --> 00:34:55,500
And debug element Source has that in it, right?

672
00:34:57,300 --> 00:35:01,000
And that way, what I can do is I can just say, like, oh, okay, when

673
00:35:01,000 --> 00:35:06,000
you actually send me one of these things, for whatever it is that the

674
00:35:06,000 --> 00:35:06,900
debug event.

675
00:35:07,900 --> 00:35:11,300
I'm actually gonna, I'm going to actually assume that after we do the

676
00:35:11,300 --> 00:35:12,200
hash of the quid.

677
00:35:12,300 --> 00:35:15,800
We're going to store it in here, but then we're going to want to parse

678
00:35:15,800 --> 00:35:17,100
it out, right?

679
00:35:17,300 --> 00:35:21,900
So we're going to want to do the parse of this, debug element Source

680
00:35:22,200 --> 00:35:23,900
into its separate pieces.

681
00:35:24,100 --> 00:35:26,200
So that we actually can compare them, which we

682
00:35:26,400 --> 00:35:29,300
Not have otherwise been able to do, right?

683
00:35:29,700 --> 00:35:31,300
So that makes it a little bit trickier.

684
00:35:31,400 --> 00:35:34,800
The that's why I say it's a little bit, it's a little bit iffy.

685
00:35:38,000 --> 00:35:40,800
I also don't know we don't actually get the function name do we.

686
00:35:40,900 --> 00:35:44,700
We only that sometimes past so it's really just this is all we have,

687
00:35:45,000 --> 00:35:45,700
right?

688
00:35:46,000 --> 00:35:50,500
So maybe what I actually would need to do again.

689
00:35:50,500 --> 00:35:53,600
Just trying to think through how this is actually going to work out.

690
00:35:53,900 --> 00:35:58,000
Maybe I do still want to keep the grid there and then I would want to

691
00:35:58,000 --> 00:35:59,400
do something like say well,

692
00:36:00,000 --> 00:36:04,200
You know we've got the grid and then what we do with the grid

693
00:36:04,200 --> 00:36:11,700
afterwards is we just parse it, maybe we keep sort of like a pointer

694
00:36:11,700 --> 00:36:16,200
into it that we can use like something like you know.

695
00:36:17,800 --> 00:36:19,900
Val name, count caressed.

696
00:36:19,900 --> 00:36:22,900
Our file name, something like this, right?

697
00:36:24,500 --> 00:36:25,100
And

698
00:36:28,200 --> 00:36:33,600
Since we know that we have to sort of extract it and then like this,

699
00:36:34,000 --> 00:36:36,900
so we'd still just keep one buffer and then we just keep pointers into

700
00:36:36,900 --> 00:36:39,800
it to sort of say where those things work.

701
00:36:39,900 --> 00:36:41,200
I don't know if that's a great idea or not.

702
00:36:41,200 --> 00:36:43,400
But that's what I'm, that's what I'm thinking.

703
00:36:44,200 --> 00:36:47,200
So anyway this way if we did the reason we do that way is because then

704
00:36:47,200 --> 00:36:51,400
if we keep the grid then I can at least just do like strings are equal

705
00:36:51,500 --> 00:36:54,300
to each other and then I can say like if the goods are equal to each

706
00:36:54,300 --> 00:36:56,300
other as strings, then this is the one

707
00:36:56,500 --> 00:36:57,600
If not, then it's not.

708
00:36:57,600 --> 00:37:01,800
And so then here we would go and we would get that information out,

709
00:37:01,800 --> 00:37:02,400
right?

710
00:37:02,600 --> 00:37:04,900
And so if we get to me,

711
00:37:06,500 --> 00:37:09,800
if we get to the point where we need to allocate a new one, then what

712
00:37:09,800 --> 00:37:15,200
I would want to do is I'd want to use sort of the debug memory to

713
00:37:15,200 --> 00:37:16,000
store these grids.

714
00:37:16,000 --> 00:37:20,600
Like, before we weren't storing the Grid's, we weren't sort of pushing

715
00:37:20,600 --> 00:37:22,200
them, onto our, debug memory.

716
00:37:22,600 --> 00:37:24,400
And that to me is like a bad idea.

717
00:37:24,400 --> 00:37:27,200
Because like I said during reload, you know, we would crash

718
00:37:27,300 --> 00:37:30,100
occasionally there, we would be using it because the debug system was

719
00:37:30,100 --> 00:37:31,600
not safe across hot loading.

720
00:37:31,600 --> 00:37:33,800
So if we try to Hot Load, we could crash device.

721
00:37:33,800 --> 00:37:34,800
I mean I don't want to do that.

722
00:37:34,800 --> 00:37:36,100
I want the final table system to be able

723
00:37:36,300 --> 00:37:37,900
To work across reload.

724
00:37:37,900 --> 00:37:40,500
So that when you're doing hot reloading, you can use the debug system.

725
00:37:40,500 --> 00:37:42,200
I mean, we want those two sets of work together.

726
00:37:42,700 --> 00:37:45,100
So, what I want to be able to do here is I want to be able to push

727
00:37:45,100 --> 00:37:50,300
that string onto some permanent storage and you know, inside handmade

728
00:37:50,700 --> 00:37:54,400
debug dot h, we have an arena for permanent storage that we can use

729
00:37:55,200 --> 00:37:58,100
because we've got the perfume, we also got the debugger Reno one and

730
00:37:58,100 --> 00:38:01,000
so what I was hoping is that we could say well the debug State

731
00:38:01,600 --> 00:38:05,700
debugger Arena, you know can we just push that string on there?

732
00:38:08,200 --> 00:38:13,000
So this way now we would always use that result grid instead and now

733
00:38:13,000 --> 00:38:16,500
we can sort of do that parsing out that I was talking about before.

734
00:38:16,600 --> 00:38:21,500
So we have we have the next in hash part that all that all that stuff

735
00:38:21,500 --> 00:38:27,100
is going to be exactly the same that that's all just that this is all

736
00:38:27,100 --> 00:38:27,900
exactly the same.

737
00:38:28,100 --> 00:38:31,100
The only difference now is we're going to be passing event name

738
00:38:31,500 --> 00:38:35,000
through here and that's going to be what's used for the hierarchical

739
00:38:35,000 --> 00:38:35,800
name stuff.

740
00:38:36,000 --> 00:38:36,300
And so

741
00:38:36,500 --> 00:38:41,900
All we have to do to get this working properly is due the parse of the

742
00:38:41,900 --> 00:38:46,700
name so that we can extract the that sort of additional info that we

743
00:38:46,700 --> 00:38:50,600
need for like the file name in the line number in that stuff.

744
00:38:50,600 --> 00:38:52,400
So we just want to make this stuff work now.

745
00:38:53,100 --> 00:38:55,400
So the first thing we have is we have the file name.

746
00:38:55,600 --> 00:38:58,000
We want to get the file name by just scanning through the string to

747
00:38:58,000 --> 00:38:59,900
find where we actually.

748
00:39:00,000 --> 00:39:02,500
Our that open parentheses close parentheses.

749
00:39:02,900 --> 00:39:05,500
So we would just start with our scan again.

750
00:39:05,800 --> 00:39:07,500
We in fact you know what, we could do.

751
00:39:07,500 --> 00:39:09,300
We could also just do it right here.

752
00:39:09,400 --> 00:39:11,400
So while we're in the middle of hashing, we're all.

753
00:39:11,400 --> 00:39:12,800
We already going through the string.

754
00:39:12,800 --> 00:39:15,400
Once we could just do do it right here.

755
00:39:15,500 --> 00:39:18,800
We could say that like well we know the file name pointer in fact, I

756
00:39:18,800 --> 00:39:21,800
don't even know why we bothered with the filename for enter the file

757
00:39:21,800 --> 00:39:22,000
name.

758
00:39:22,000 --> 00:39:24,500
Pointer is just the quid pointer, right?

759
00:39:26,400 --> 00:39:26,800
This is

760
00:39:31,900 --> 00:39:32,400
Right?

761
00:39:32,500 --> 00:39:37,600
Those are the same thing so they're just used in whatever case you

762
00:39:37,600 --> 00:39:38,900
just would use the file named count.

763
00:39:38,900 --> 00:39:42,500
So really all we're solving here is the file name count, if that makes

764
00:39:42,500 --> 00:39:42,900
sense.

765
00:39:43,100 --> 00:39:44,600
And don't ask me why this isn't it?

766
00:39:45,300 --> 00:39:45,900
Because I don't know.

767
00:39:46,900 --> 00:39:49,800
So anyway, so the filename can't we just need to start at zero and

768
00:39:49,800 --> 00:39:55,300
then we just got to go till we see that open parenthesis there and the

769
00:39:55,300 --> 00:39:56,300
closed parenthesis.

770
00:39:56,700 --> 00:40:01,500
So we know that we've got those parentheticals and what we could do,

771
00:40:01,800 --> 00:40:04,100
Know if you had a file name that had a parenthesis in it.

772
00:40:04,100 --> 00:40:04,700
This would work.

773
00:40:04,700 --> 00:40:05,200
We don't.

774
00:40:05,200 --> 00:40:06,600
So we'd have to care about that.

775
00:40:06,700 --> 00:40:09,800
But just so, you know, this isn't a going to be like a robust parse of

776
00:40:09,800 --> 00:40:14,700
this thing and and so we could just look for the first parentheses and

777
00:40:14,700 --> 00:40:17,100
say that's the end of the file name and that's totally fine.

778
00:40:17,200 --> 00:40:21,300
Now, in order to do that, we just say, if you know, that's what we

779
00:40:21,300 --> 00:40:21,700
see.

780
00:40:23,500 --> 00:40:28,900
then filename, count equals scan - the beginning,

781
00:40:30,900 --> 00:40:34,100
That's how big it is, right, really, really straightforward.

782
00:40:35,400 --> 00:40:39,600
And I suppose this could also be as well.

783
00:40:39,600 --> 00:40:42,900
Just be named starts at right?

784
00:40:43,800 --> 00:40:44,800
That's pretty simple.

785
00:40:45,400 --> 00:40:48,300
So anyway, we've got we've got the file name count.

786
00:40:48,300 --> 00:40:49,400
That's how long that's going to be.

787
00:40:50,400 --> 00:40:56,000
We've got the name starts at and the way we know where the name starts

788
00:40:56,000 --> 00:41:00,500
at is the name starts after the file name.

789
00:41:00,600 --> 00:41:03,600
It's got the parentheses going to dots go.

790
00:41:03,600 --> 00:41:05,200
Number two, I got: right.

791
00:41:05,200 --> 00:41:08,700
So when we see that:,

792
00:41:11,200 --> 00:41:12,900
And where's our debug name here?

793
00:41:13,100 --> 00:41:18,300
Debug dot h, or excitation state interface, so here it is.

794
00:41:18,700 --> 00:41:22,700
We should just make this be the optimal thing for parsing, now that I

795
00:41:22,700 --> 00:41:23,500
think about it.

796
00:41:23,700 --> 00:41:27,300
So probably what we would actually want is just this

797
00:41:33,600 --> 00:41:39,100
So all we have to do is just say like okay each one of these bars

798
00:41:39,900 --> 00:41:42,900
tells us that particular piece of information, right?

799
00:41:44,700 --> 00:41:45,400
so,

800
00:41:48,600 --> 00:41:54,000
every time we hit a bar in this Loop, we know that we've got a

801
00:41:54,000 --> 00:41:54,700
different one.

802
00:41:54,900 --> 00:41:58,100
So first thing will be, it'll be the file name, count.

803
00:42:04,400 --> 00:42:12,400
The next time we hit a bar, it'll be the Y number, right?

804
00:42:19,000 --> 00:42:22,300
and then, the last time that we hit the bar,

805
00:42:24,400 --> 00:42:27,600
Actually I guess technically this is the file name, count and the line

806
00:42:27,600 --> 00:42:28,100
number.

807
00:42:28,600 --> 00:42:32,000
The next time we hit it, we don't care the next time.

808
00:42:35,700 --> 00:42:38,300
And the next time the last time we hit it, that's the file name.

809
00:42:45,100 --> 00:42:45,500
Right?

810
00:42:46,700 --> 00:42:49,700
So I think that's what we actually want the line number.

811
00:42:49,700 --> 00:42:51,500
We actually have to parse out, right?

812
00:42:51,500 --> 00:42:53,200
So that's actually one of these.

813
00:42:53,400 --> 00:42:56,000
It's, it's like that.

814
00:42:56,900 --> 00:43:00,400
And again, at some point when we replace the C runtime Library, we're

815
00:43:00,400 --> 00:43:02,100
going to have to replace this guy.

816
00:43:02,300 --> 00:43:06,700
So not a hard one to replace, so I would don't really feel bad about

817
00:43:06,900 --> 00:43:09,600
calling that it's not going to be a lot of work for us to replace an

818
00:43:09,600 --> 00:43:10,000
A2.

819
00:43:10,000 --> 00:43:11,300
Ia2 is pretty easy.

820
00:43:11,500 --> 00:43:14,700
We don't have to parse a floating-point number even so it's especially

821
00:43:14,700 --> 00:43:14,700
easy.

822
00:43:14,900 --> 00:43:15,300
Here.

823
00:43:15,900 --> 00:43:16,700
So, that's okay.

824
00:43:17,000 --> 00:43:17,900
So, that's not a big deal.

825
00:43:17,900 --> 00:43:20,500
Anytime we call something from the C runtime library, right?

826
00:43:20,700 --> 00:43:24,700
If we presumably at the end of the series, want to actually get rid of

827
00:43:24,700 --> 00:43:25,500
it entirely,

828
00:43:28,700 --> 00:43:29,400
Just for fun.

829
00:43:31,500 --> 00:43:34,000
Anything we call we kind of want to know when I think we call a couple

830
00:43:34,000 --> 00:43:37,400
things, a couple math functions, printf, et toi, and so those if we

831
00:43:37,400 --> 00:43:40,100
want to get rid of them it's just good to know if you're calling

832
00:43:40,100 --> 00:43:43,200
something particularly crazy and weird but we're not.

833
00:43:43,200 --> 00:43:44,800
So atoi is pretty easy.

834
00:43:45,800 --> 00:43:48,000
All right, so and

835
00:43:50,600 --> 00:43:52,000
it's the same thing we call in our

836
00:43:53,100 --> 00:43:56,700
Parser to write, I don't know, doesn't matter point being, it's not a

837
00:43:56,700 --> 00:43:58,200
bad function, it's pretty easy to implement.

838
00:43:58,200 --> 00:44:01,700
So I don't, I don't think we're adding any kind of unnecessary burden

839
00:44:01,700 --> 00:44:03,600
on our cells for that.

840
00:44:04,200 --> 00:44:08,600
So anyway when we do the scan, what we all we really need to know is

841
00:44:08,600 --> 00:44:12,000
like this is the I guess the pipe count.

842
00:44:14,900 --> 00:44:18,400
So the first time we hit one second time, we hit one and third time,

843
00:44:18,400 --> 00:44:20,600
we hit one, right?

844
00:44:27,500 --> 00:44:29,200
And right now we don't care about the counter value.

845
00:44:29,200 --> 00:44:32,200
There's really nothing for us to do with it and so if we have all that

846
00:44:32,200 --> 00:44:35,400
information, now when we actually get down here, we should be able to

847
00:44:35,400 --> 00:44:37,800
just fill out the struct pretty trivially.

848
00:44:37,800 --> 00:44:43,700
So we can just go ahead and say, oh, okay, let's see here.

849
00:44:44,900 --> 00:44:46,000
I've got h.

850
00:44:47,700 --> 00:44:55,100
So filename, count equals results line number equals and result in

851
00:44:55,100 --> 00:44:58,700
starts at so filename.

852
00:44:58,700 --> 00:44:59,800
Count we already

853
00:45:01,500 --> 00:45:02,300
Line number.

854
00:45:02,300 --> 00:45:04,400
We've got and name starts at.

855
00:45:04,400 --> 00:45:07,200
We have, I believe

856
00:45:09,100 --> 00:45:09,700
Right?

857
00:45:10,500 --> 00:45:12,000
So, yeah.

858
00:45:12,300 --> 00:45:15,100
And we could also make a little thing here, that's just like

859
00:45:17,600 --> 00:45:21,000
Get name, debug element element.

860
00:45:21,800 --> 00:45:26,800
And that could just be, hey, if you want to get that and I could do

861
00:45:26,800 --> 00:45:30,100
this week, There's no actual need for that Union.

862
00:45:30,100 --> 00:45:35,300
Obviously, that way, there's basically just a way to get those without

863
00:45:35,300 --> 00:45:37,500
you having to actually remember that.

864
00:45:37,500 --> 00:45:38,800
That's what that work is.

865
00:45:38,900 --> 00:45:43,600
We can just say like, oh yeah, yeah, the result of this guy is going

866
00:45:43,600 --> 00:45:47,000
to be the element grid plus name starts at

867
00:45:47,400 --> 00:45:48,000
Right.

868
00:45:48,300 --> 00:45:54,600
And that will return this and this is get file name that can just

869
00:45:54,600 --> 00:45:56,900
return the grid directly

870
00:45:58,900 --> 00:46:00,900
Although it's technically a counted string.

871
00:46:01,600 --> 00:46:06,800
So, you know, you kind of got to say something like, I don't know if

872
00:46:06,800 --> 00:46:09,600
we even have that concept of counter string.

873
00:46:09,600 --> 00:46:13,600
So we do here in deep here, in debug variable group, we've got that

874
00:46:13,600 --> 00:46:14,600
concept right here.

875
00:46:14,800 --> 00:46:19,400
So probably what we would want to do, I would think is make that a

876
00:46:19,400 --> 00:46:20,900
little bit more of a First-Class citizen, right?

877
00:46:20,900 --> 00:46:23,000
So we probably want to do something like saying,

878
00:46:24,500 --> 00:46:31,200
Stretchy, bowstring, and that would be like name length or length and

879
00:46:31,700 --> 00:46:42,000
contents something like this and or value and so that way, you know,

880
00:46:42,000 --> 00:46:46,300
when you get one of these you could just get, you know, the file name

881
00:46:46,300 --> 00:46:49,900
as a debug string and it would return it to that way.

882
00:46:50,000 --> 00:46:54,000
So you just say like oh you know, the result of this is just the

883
00:46:54,300 --> 00:46:59,800
It's filename count and the elements value.

884
00:47:00,000 --> 00:47:06,100
Sorry, the element WID is the value, and then that's it.

885
00:47:09,100 --> 00:47:10,200
So that seems reasonable to me.

886
00:47:10,200 --> 00:47:13,400
And then this guy from the debug variable group, obviously, that could

887
00:47:13,400 --> 00:47:16,900
also eventually become a debug string after we, you know, if once we

888
00:47:16,900 --> 00:47:17,200
care

889
00:47:19,000 --> 00:47:22,500
So yeah, debug source that went away.

890
00:47:22,600 --> 00:47:27,500
Name starts at that is supposed to be off the element pointer

891
00:47:27,500 --> 00:47:28,200
obviously.

892
00:47:30,100 --> 00:47:32,800
And what's the confusion here?

893
00:47:33,600 --> 00:47:38,300
That is not supposed to be there, not supposed to be there at all.

894
00:47:43,000 --> 00:47:45,200
All right, so let's see.

895
00:47:45,300 --> 00:47:48,600
This is obviously just going to be assumed that these can never be

896
00:47:48,800 --> 00:47:49,200
whoop.

897
00:47:51,100 --> 00:47:51,600
There we go.

898
00:47:52,400 --> 00:47:54,700
That these can never be that long so we're just going to cast them

899
00:47:54,700 --> 00:47:55,200
down.

900
00:47:55,700 --> 00:47:56,300
That's fine.

901
00:47:59,300 --> 00:47:59,600
No.

902
00:48:00,000 --> 00:48:01,600
Wait, how is our atoi?

903
00:48:01,600 --> 00:48:04,700
Not found because it's in, right?

904
00:48:04,700 --> 00:48:05,800
I mean, isn't it in here?

905
00:48:06,100 --> 00:48:07,200
Maybe I'm missing something.

906
00:48:08,800 --> 00:48:10,200
Not really remember where that is.

907
00:48:17,200 --> 00:48:17,700
There we go.

908
00:48:21,400 --> 00:48:23,600
I really wish my five-minute warning window would go away.

909
00:48:24,100 --> 00:48:25,900
I can't see anything.

910
00:48:26,000 --> 00:48:26,700
Hello.

911
00:48:29,300 --> 00:48:30,200
Try that one more time.

912
00:48:37,700 --> 00:48:39,300
so, same thing here,

913
00:48:40,800 --> 00:48:44,400
Obviously since these are 64-bit pointers after we do subtraction on

914
00:48:44,400 --> 00:48:47,300
them, they want to say 64 a bit but we don't really want them to.

915
00:48:48,800 --> 00:48:52,300
So, push string needs to take the address of the Arena.

916
00:48:52,300 --> 00:48:53,200
That's all fine.

917
00:48:54,600 --> 00:48:59,800
And then this right here actually needs to take get name

918
00:49:02,700 --> 00:49:03,500
Other result.

919
00:49:05,900 --> 00:49:10,400
All right, so I don't know if this will work well have to step through

920
00:49:10,400 --> 00:49:13,700
it and see first, I'm just going to run it so I can see what the

921
00:49:13,700 --> 00:49:17,000
output of it is and then we'll go from there, all right?

922
00:49:17,000 --> 00:49:20,900
So interestingly enough it looks like part of the person is working.

923
00:49:22,400 --> 00:49:26,600
So I guess that's a good sign to some degree anyway and

924
00:49:28,300 --> 00:49:31,700
And so really, I guess if I just use get name when I'm printing these

925
00:49:31,700 --> 00:49:32,300
out.

926
00:49:34,000 --> 00:49:34,900
Yeah, it's kind of interesting.

927
00:49:39,300 --> 00:49:41,000
I think this is going to be good soon.

928
00:49:41,500 --> 00:49:44,800
I'm thinking by tomorrow, this will start to look kind of nice, I'm

929
00:49:44,800 --> 00:49:45,800
looking forward to that.

930
00:49:46,600 --> 00:49:50,400
All right, so anyway, we when we're printing the grid we really don't

931
00:49:50,400 --> 00:49:52,000
ever want to print the grid anymore.

932
00:49:52,000 --> 00:49:54,600
Like, we're printing the grid and a bunch of places and that's just a

933
00:49:54,600 --> 00:49:56,300
bad idea, right?

934
00:49:57,500 --> 00:50:00,300
So we kind of want that to stop happening entirely.

935
00:50:01,200 --> 00:50:04,500
And so, for example, here, we don't want that ever.

936
00:50:04,500 --> 00:50:08,100
We want to do instead of this, we want to do get name.

937
00:50:09,100 --> 00:50:11,100
On the, on the element.

938
00:50:11,500 --> 00:50:12,400
In fact.

939
00:50:14,200 --> 00:50:14,900
Why is this?

940
00:50:15,700 --> 00:50:16,900
What is this doing?

941
00:50:22,500 --> 00:50:24,800
so, when we do a debug event to text,

942
00:50:26,000 --> 00:50:28,100
I guess when we remap I'm going to.

943
00:50:28,100 --> 00:50:30,400
So I got to look story event.

944
00:50:31,700 --> 00:50:33,000
How does story event work?

945
00:50:34,300 --> 00:50:35,200
So here we go.

946
00:50:35,200 --> 00:50:36,700
We go into story event.

947
00:50:37,300 --> 00:50:39,600
We take the frame index, remember the frame index?

948
00:50:39,800 --> 00:50:42,500
We copy the event over so that's just wrong.

949
00:50:43,400 --> 00:50:44,100
That is?

950
00:50:44,100 --> 00:50:45,700
That is also a problem, right?

951
00:50:45,700 --> 00:50:48,000
Because that means that, that Gwynedd value.

952
00:50:53,000 --> 00:50:56,500
That grid value is going to get copied and it's going to be wrong.

953
00:50:56,900 --> 00:50:59,500
I don't know what this is here for.

954
00:50:59,500 --> 00:50:59,800
Exactly.

955
00:51:00,300 --> 00:51:04,500
But all the rest of these aren't pointers and that's important, right?

956
00:51:05,300 --> 00:51:06,200
These two are.

957
00:51:06,200 --> 00:51:10,400
And we may have to deal with them separately, but this right here is

958
00:51:10,400 --> 00:51:11,600
not going to be safe.

959
00:51:11,600 --> 00:51:15,600
And so what we actually want when we when we do this is we want the

960
00:51:15,700 --> 00:51:17,300
resulting element.

961
00:51:18,900 --> 00:51:23,600
Sorry event to actually use the grid from the element because that's

962
00:51:23,600 --> 00:51:24,600
been cloned.

963
00:51:24,900 --> 00:51:29,100
And so now that will be safe across reloads because it's not going to

964
00:51:29,100 --> 00:51:29,800
point to a string.

965
00:51:30,000 --> 00:51:30,300
Table.

966
00:51:30,300 --> 00:51:32,900
That's in a dll that might go away, right?

967
00:51:34,800 --> 00:51:36,100
So that's yeah.

968
00:51:36,600 --> 00:51:38,400
That's a, obviously, a good thing.

969
00:51:42,900 --> 00:51:45,000
You know, I kind of thought about just now something that's kind of

970
00:51:45,000 --> 00:51:46,400
interesting, I suppose.

971
00:51:46,400 --> 00:51:49,500
One thing you could do with hot reloading now on 64 bit System.

972
00:51:49,500 --> 00:51:52,300
Since you have kind of infinite memory in some sense, as long as

973
00:51:52,300 --> 00:51:55,500
you're not touching it, you're not infinite memory but a lot

974
00:51:59,900 --> 00:52:01,600
You could just load the dlls.

975
00:52:03,400 --> 00:52:04,400
And never free them.

976
00:52:05,800 --> 00:52:10,400
So you just load a dll in and it's got the script string table and you

977
00:52:10,400 --> 00:52:13,600
load another dll in and it's got another string table, but the old

978
00:52:13,600 --> 00:52:14,800
string table still valid.

979
00:52:16,200 --> 00:52:16,700
Right.

980
00:52:17,200 --> 00:52:20,400
And then if you wanted to, you wouldn't have to ever worry about

981
00:52:20,400 --> 00:52:21,200
copying the strings.

982
00:52:21,500 --> 00:52:23,800
It's not that big of a deal because you still can't do this stuff that

983
00:52:23,800 --> 00:52:27,000
you would have wanted to do, which is compared like to string pointers

984
00:52:27,000 --> 00:52:29,200
for equivalents and know that they were pointing the same string.

985
00:52:29,300 --> 00:52:32,800
Because that doesn't work anymore anyway, but it's kind of

986
00:52:32,800 --> 00:52:33,100
interesting.

987
00:52:33,100 --> 00:52:33,900
I never thought about that.

988
00:52:33,900 --> 00:52:38,000
If you wanted to keep data around from previous runs for some reason,

989
00:52:38,100 --> 00:52:41,600
you just can just don't free the library because you can load 12

990
00:52:41,600 --> 00:52:44,000
copies of the game code, right?

991
00:52:44,400 --> 00:52:45,900
You load 50 100 copies of

992
00:52:46,000 --> 00:52:47,100
You can roll as many as you want.

993
00:52:47,100 --> 00:52:48,500
It don't matter, right?

994
00:52:49,300 --> 00:52:50,300
So that's kind of nice.

995
00:52:50,900 --> 00:52:54,800
But anyway, so, weak restorative have a problem here, which is when

996
00:52:54,800 --> 00:52:59,300
we're doing this, debug print, the event, the event printing.

997
00:53:02,700 --> 00:53:06,200
We don't actually have the element, which is where our stuff has been

998
00:53:06,200 --> 00:53:06,800
parsed.

999
00:53:07,100 --> 00:53:11,300
And so really, when we do debug event to text, I kind of feel like in

1000
00:53:11,300 --> 00:53:15,300
here we want to supply the element pointer if possible, right?

1001
00:53:15,400 --> 00:53:15,900
So you

1002
00:53:16,000 --> 00:53:18,800
want to do like, you know,

1003
00:53:20,500 --> 00:53:22,300
Optional element or something like that.

1004
00:53:22,700 --> 00:53:26,200
So that you wouldn't have to keep parsing the debug name all the time

1005
00:53:26,800 --> 00:53:27,700
for no reason.

1006
00:53:27,700 --> 00:53:30,400
Right now it's not a big deal to parse that all the time.

1007
00:53:30,400 --> 00:53:34,500
We could just always parse to the last pipe and print that out.

1008
00:53:34,600 --> 00:53:39,900
It's not like that's that costly or super problematic but it does just

1009
00:53:39,900 --> 00:53:43,700
kind of strike me as being not that particularly important.

1010
00:53:43,900 --> 00:53:44,300
Oh

1011
00:53:48,500 --> 00:53:51,500
or we could just store it pre advanced.

1012
00:53:54,800 --> 00:53:55,700
That's interesting.

1013
00:53:56,100 --> 00:53:59,700
So what we could do to is when we do store event, we

1014
00:54:00,000 --> 00:54:04,200
To say, like I forget that like let's do this.

1015
00:54:11,200 --> 00:54:13,000
Now, they would always just be the name.

1016
00:54:16,000 --> 00:54:17,300
Right when we print them out.

1017
00:54:20,000 --> 00:54:20,900
So, that's interesting.

1018
00:54:22,500 --> 00:54:24,000
That's, that's pretty interesting to me.

1019
00:54:24,700 --> 00:54:28,600
All right, so I'm going to go ahead and and take that one step

1020
00:54:28,600 --> 00:54:29,100
further.

1021
00:54:29,600 --> 00:54:34,600
So those slashes, there, any time we were talking about underscores

1022
00:54:34,600 --> 00:54:36,900
before we're talking about slashes.

1023
00:54:36,900 --> 00:54:41,300
Now, obviously, got to remember to change my for CO2.

1024
00:54:41,300 --> 00:54:43,200
Config, I forgot to change it.

1025
00:54:43,600 --> 00:54:45,200
Gotta change it, I'll do that tonight.

1026
00:54:47,700 --> 00:54:50,900
So yeah, what I want to do here is, I want to go ahead and say, all

1027
00:54:50,900 --> 00:54:53,200
right, that since we're talking about started last time, just score,

1028
00:54:53,300 --> 00:54:56,700
that's really going to be called started last / now, you know I'm

1029
00:54:56,700 --> 00:55:04,000
saying, and so start at last /, it's going to look for that.

1030
00:55:07,700 --> 00:55:08,600
This guy.

1031
00:55:15,500 --> 00:55:19,800
Yeah, and the other thing we're going to want to do is now when we're

1032
00:55:19,800 --> 00:55:26,600
parsing for that, which we're doing, we actually want this thing to be

1033
00:55:26,800 --> 00:55:29,600
this get group Parc, guell name, whatever nonsense here.

1034
00:55:30,000 --> 00:55:32,900
We actually want that to be this.

1035
00:55:33,000 --> 00:55:36,500
So I'm going to call this first separator, right?

1036
00:55:39,900 --> 00:55:43,200
So that we don't have to pin it down to an underscore.

1037
00:55:45,800 --> 00:55:46,100
There we go.

1038
00:55:46,100 --> 00:55:46,700
Separator.

1039
00:55:48,500 --> 00:55:50,600
First separator.

1040
00:55:51,500 --> 00:55:54,300
Versed, separator.

1041
00:55:55,000 --> 00:55:55,400
Okay.

1042
00:55:59,100 --> 00:55:59,500
Okay.

1043
00:56:05,100 --> 00:56:12,100
So now I think we're getting closer, still not quite there yet because

1044
00:56:12,100 --> 00:56:15,100
it's a little confusing as to why these look like they do.

1045
00:56:15,600 --> 00:56:18,800
So we're not quite and and these are like printing out weirdly right

1046
00:56:18,800 --> 00:56:22,800
so we got we got more work to do obviously but we're at least in

1047
00:56:22,800 --> 00:56:23,600
better shape.

1048
00:56:24,500 --> 00:56:27,400
So I think we're in good shape for tomorrow to kind of get displays

1049
00:56:27,400 --> 00:56:28,200
into a better place.

1050
00:56:28,200 --> 00:56:30,900
We can also start filling in the profile stuff and think about how we

1051
00:56:30,900 --> 00:56:33,900
want to do these like these things.

1052
00:56:34,500 --> 00:56:34,700
So

1053
00:56:35,100 --> 00:56:39,700
Let's go ahead and let's go ahead and call it for now.

1054
00:56:39,700 --> 00:56:41,200
So I'm going to go ahead and go to the Q&A.

1055
00:56:44,700 --> 00:56:47,400
And leave it at that.

1056
00:56:57,200 --> 00:56:58,700
This is like hatch competition.

1057
00:56:59,100 --> 00:56:59,800
655

1058
00:57:00,000 --> 00:57:04,600
I'm 9 plus can so do we know if that's a good idea?

1059
00:57:05,900 --> 00:57:08,700
I mean, obviously you want to do something other than something the

1060
00:57:08,700 --> 00:57:10,400
values, but I just don't know.

1061
00:57:10,600 --> 00:57:14,500
How did you, how do we know that 65 599 is a good idea.

1062
00:57:14,800 --> 00:57:16,200
I guess you've got a source there.

1063
00:57:16,400 --> 00:57:17,900
Let's see what it says.

1064
00:57:22,000 --> 00:57:23,800
Look at pseudonym 73's.

1065
00:57:24,200 --> 00:57:26,700
I trust his math skills is all.

1066
00:57:33,400 --> 00:57:43,100
So what he's suggesting is anding out the high for bits.

1067
00:57:45,000 --> 00:57:49,200
And then X touring with them shifted down, knotting them.

1068
00:57:49,200 --> 00:57:52,000
Well, that's a crazy little, that is a crazy.

1069
00:57:52,000 --> 00:57:52,700
Hash,

1070
00:57:54,400 --> 00:57:56,000
Is there a reasoning behind?

1071
00:57:56,000 --> 00:57:56,700
The sash?

1072
00:57:57,300 --> 00:57:59,000
Is there a reasoning is their reasoning behind?

1073
00:57:59,000 --> 00:58:00,800
What why we would pick this hash?

1074
00:58:03,300 --> 00:58:05,200
and fnv hash,

1075
00:58:11,500 --> 00:58:16,500
And then someone else's is suggesting this, the 655 91.

1076
00:58:16,500 --> 00:58:19,700
So let's take a look at what that one is comprehensive collection of

1077
00:58:19,700 --> 00:58:20,700
hash functions.

1078
00:58:39,900 --> 00:58:41,700
Oh, hey, look KN.

1079
00:58:41,700 --> 00:58:44,500
Our first edition, had the sum them all up.

1080
00:58:44,700 --> 00:58:45,400
That's so great.

1081
00:58:45,400 --> 00:58:46,700
That it goes all the way back there.

1082
00:58:49,100 --> 00:58:52,000
I just kind of six five five six five, five, nine nine was picked out

1083
00:58:52,000 --> 00:58:56,200
of thin air, while experimenting with different constants and turns

1084
00:58:56,200 --> 00:58:57,100
out to be prime.

1085
00:58:57,200 --> 00:59:00,400
This is one of the algorithms used in Berkeley DB and elsewhere.

1086
00:59:04,300 --> 00:59:04,900
Beard.

1087
00:59:07,100 --> 00:59:09,100
I feel like somebody should have.

1088
00:59:11,400 --> 00:59:15,700
A more sort of stringent proof of why this is good.

1089
00:59:18,600 --> 00:59:20,000
I'm not look back at the chat.

1090
00:59:33,300 --> 00:59:34,800
Hmm.

1091
00:59:36,300 --> 00:59:42,600
So I guess what I would say is time 6599 is really easy to do.

1092
00:59:42,900 --> 00:59:47,000
So I feel like if we were always going to do you know to do better

1093
00:59:47,000 --> 00:59:48,400
hash, right?

1094
00:59:48,500 --> 00:59:52,700
So if we were like to do Casey better hash function and you're going

1095
00:59:52,700 --> 00:59:54,100
to type this in any way.

1096
00:59:57,900 --> 00:59:59,800
Oh wait, that's not, that's a different.

1097
01:00:00,100 --> 01:00:02,500
I'd say we have that comment, it's so good.

1098
01:00:02,900 --> 01:00:05,700
So if we have to do better hash function and the only thing that we're

1099
01:00:05,700 --> 01:00:09,900
going to do here is do this add.

1100
01:00:10,000 --> 01:00:14,500
It seems pretty straightforward to actually do the six.

1101
01:00:14,800 --> 01:00:16,300
Five five, nine, nine one.

1102
01:00:16,300 --> 01:00:16,800
Right.

1103
01:00:17,000 --> 01:00:17,600
So

1104
01:00:26,700 --> 01:00:29,700
That seems trivial to remember, right?

1105
01:00:29,700 --> 01:00:35,500
6599, if that's all it takes to get us, you know, I don't want to say

1106
01:00:35,500 --> 01:00:38,400
significantly better hash function but perhaps significantly better

1107
01:00:38,400 --> 01:00:42,200
hash function that seems worth typing in, right.

1108
01:00:42,700 --> 01:00:43,600
I mean

1109
01:00:46,000 --> 01:00:46,900
That seems are typing it.

1110
01:00:47,200 --> 01:00:49,800
Now what students are going through is saying is that using the 1/4

1111
01:00:49,800 --> 01:00:53,000
symbols, and elf might be a good idea because we have common strings

1112
01:00:53,000 --> 01:00:57,100
with numbers at the end, and at that, be a similar case.

1113
01:00:57,500 --> 01:01:02,200
And so, it may be that the one that pseudonym 73 was suggesting might

1114
01:01:02,200 --> 01:01:06,300
actually be the better one for this case here, but it looked like it

1115
01:01:06,300 --> 01:01:11,700
was a little harder to remember, potentially, if that makes sense.

1116
01:01:12,500 --> 01:01:15,500
So, I don't know about that part.

1117
01:01:15,800 --> 01:01:19,700
like, it'd be kind of hard to remember that L function, if you were

1118
01:01:19,700 --> 01:01:20,900
just going to type something in

1119
01:01:22,400 --> 01:01:22,900
You know.

1120
01:01:23,500 --> 01:01:26,000
So what do you think pseudonyms anything you think that this one is

1121
01:01:26,000 --> 01:01:26,700
good enough?

1122
01:01:32,800 --> 01:01:35,900
Like, how would you feel if we just went with a 65 599?

1123
01:01:35,900 --> 01:01:37,100
What do you think it's going to be okay?

1124
01:01:37,700 --> 01:01:39,500
I mean, either way, it's probably okay.

1125
01:01:39,500 --> 01:01:40,400
But, you know,

1126
01:02:03,800 --> 01:02:06,600
All right, so we'll just leave that in there.

1127
01:02:08,500 --> 01:02:09,600
And we'll call that good.

1128
01:02:44,000 --> 01:02:45,900
Looks like no questions today.

1129
01:02:59,000 --> 01:02:59,800
It's all quiet.

1130
01:03:29,600 --> 01:03:30,200
Kenny's room.

1131
01:03:30,200 --> 01:03:31,800
Do you have a stream schedule?

1132
01:03:32,200 --> 01:03:32,600
Yes.

1133
01:03:32,600 --> 01:03:37,300
Actually if you want to know the stream schedule, there's a couple

1134
01:03:37,300 --> 01:03:39,800
different ways you can get it, but the easiest way, I've been, there's

1135
01:03:40,300 --> 01:03:44,100
one way is this button tells you the countdown to the to the next one

1136
01:03:44,200 --> 01:03:45,500
on handmade here at dot org.

1137
01:03:45,600 --> 01:03:46,500
So that's helpful.

1138
01:03:46,600 --> 01:03:48,800
The other one is, there's the tweetbot.

1139
01:03:49,300 --> 01:03:52,700
So if you follow this tweetbot, handmade hero on Twitter.

1140
01:03:52,900 --> 01:03:55,300
Then, basically, it just tweets the schedule all the time.

1141
01:03:55,400 --> 01:03:58,200
So you can always know when it is at the beginning of the week, at

1142
01:03:58,200 --> 01:03:58,900
tweet, something that looks

1143
01:03:59,100 --> 01:03:59,600
Like this.

1144
01:03:59,800 --> 01:04:02,000
So you can just look and see what the whole week schedule is going to

1145
01:04:02,000 --> 01:04:03,500
be and then everyday.

1146
01:04:03,500 --> 01:04:06,800
It tells you the time in the morning that that's that the stream will

1147
01:04:06,800 --> 01:04:07,200
be.

1148
01:04:07,300 --> 01:04:11,700
And then an hour beforehand, it'll ping with the link in case you want

1149
01:04:11,700 --> 01:04:12,100
that.

1150
01:04:12,200 --> 01:04:17,700
It also afterwards will will ping out the YouTube video in case you

1151
01:04:17,700 --> 01:04:18,600
missed the live stream.

1152
01:04:19,700 --> 01:04:20,800
So, it's pretty handy.

1153
01:04:26,400 --> 01:04:29,100
Students 33 actually, could you humor me and look at the assembly for

1154
01:04:29,100 --> 01:04:31,500
that hash function, the six, five five, nine, nine one.

1155
01:04:31,600 --> 01:04:38,400
I'm curious to know how well, it compiles it but an integer multiplied

1156
01:04:38,400 --> 01:04:39,800
is not going to be that extension.

1157
01:04:39,800 --> 01:04:41,900
Extensive is it expensive?

1158
01:04:41,900 --> 01:04:42,500
Is it?

1159
01:04:44,000 --> 01:04:47,800
What's the, what's the clock cycle on an Eye mole?

1160
01:04:50,600 --> 01:04:52,600
These days, maybe it's still is I don't know.

1161
01:05:04,500 --> 01:05:05,400
Actually, you know what I could do?

1162
01:05:05,400 --> 01:05:07,200
That would probably faster than trying to look it up there.

1163
01:05:09,000 --> 01:05:11,400
But yes, I will definitely humor you in a second.

1164
01:05:11,400 --> 01:05:14,600
I just kind of want to satisfy my own curiosity here first.

1165
01:05:28,600 --> 01:05:30,400
I mean that's like,

1166
01:05:31,500 --> 01:05:34,000
That's like no-cost, pseudonym 73.

1167
01:05:34,000 --> 01:05:35,500
Is I mean right?

1168
01:05:36,900 --> 01:05:38,700
So why what?

1169
01:05:38,800 --> 01:05:41,400
I'm curious to know what you're concerned about is actually.

1170
01:05:41,400 --> 01:05:42,800
What now I'm curious.

1171
01:05:42,900 --> 01:05:48,200
I'm curious about your curiosity but yes, we'll do it twice obviously

1172
01:05:48,300 --> 01:05:51,500
the this version has optimizations off.

1173
01:05:51,800 --> 01:05:57,900
So that's not going to be very interesting to probably but we'll do

1174
01:05:57,900 --> 01:05:58,400
that first.

1175
01:05:58,400 --> 01:05:59,800
And then I'll switch off patients on.

1176
01:06:00,700 --> 01:06:02,400
Because that's what you're actually going to want to look at.

1177
01:06:02,400 --> 01:06:10,000
I would assume, so if we go into him a debug, and we take a look at

1178
01:06:10,000 --> 01:06:12,400
655 Hoops 99.

1179
01:06:13,100 --> 01:06:13,500
Oops.

1180
01:06:14,000 --> 01:06:14,700
Yes, thank you.

1181
01:06:15,000 --> 01:06:15,800
Thank you, goodbye.

1182
01:06:16,900 --> 01:06:20,200
And we set a break point on that line and run it.

1183
01:06:22,200 --> 01:06:23,300
What's the problem?

1184
01:06:24,000 --> 01:06:24,500
There we go.

1185
01:06:25,600 --> 01:06:28,600
So if we run that guy and take a look at what it did with no

1186
01:06:28,600 --> 01:06:29,700
optimizations,

1187
01:06:33,500 --> 01:06:34,300
What did it do?

1188
01:06:35,100 --> 01:06:36,200
It's just issues the Imo.

1189
01:06:38,400 --> 01:06:40,200
So, read issues the IMO.

1190
01:06:40,900 --> 01:06:44,100
It does the ad and then it's done.

1191
01:06:45,600 --> 01:06:47,300
So that's what you would expect.

1192
01:06:47,400 --> 01:06:51,000
I would think I don't know how expensive the IMO is.

1193
01:06:53,500 --> 01:06:57,900
To be honest with you, I just don't remember how well it's not.

1194
01:06:57,900 --> 01:07:00,400
I don't remember, I just haven't looked recently, how expensive and I

1195
01:07:00,400 --> 01:07:03,000
mul actually is but I have trouble believing, it's particularly

1196
01:07:03,000 --> 01:07:03,600
expensive.

1197
01:07:04,100 --> 01:07:08,200
If if the mole epi32 is a throughput one instruction, then maybe

1198
01:07:08,200 --> 01:07:09,700
you've got a little bit of an overhang.

1199
01:07:09,700 --> 01:07:15,800
What was the latency on that five worst case, and you have five Cycles

1200
01:07:15,800 --> 01:07:20,700
isn't the best but at the same time it ain't horrible, right?

1201
01:07:21,600 --> 01:07:22,200
So

1202
01:07:23,400 --> 01:07:28,900
there's there's that if I go ahead and allow the optimization stuff to

1203
01:07:28,900 --> 01:07:33,700
kick in so we haven't done that in a while but

1204
01:07:35,600 --> 01:07:42,100
It's, if I go to handmade platform that itch, where do we turn off the

1205
01:07:42,100 --> 01:07:42,900
optimizer?

1206
01:07:42,900 --> 01:07:43,800
I don't remember.

1207
01:07:49,600 --> 01:07:51,400
Because we do what we do.

1208
01:07:51,400 --> 01:07:52,300
Do it right.

1209
01:08:00,500 --> 01:08:04,400
or did we not so have we never

1210
01:08:08,900 --> 01:08:09,700
Let's see.

1211
01:08:09,700 --> 01:08:12,200
64-bit build Hammer.

1212
01:08:12,200 --> 01:08:13,500
Dot CPP.

1213
01:08:16,100 --> 01:08:17,300
I've been through two, handmade.

1214
01:08:18,600 --> 01:08:23,300
Yes, so we we change the optimization, right?

1215
01:08:23,300 --> 01:08:26,399
So that we always

1216
01:08:30,399 --> 01:08:33,399
we always build with optimizations on, right?

1217
01:08:37,000 --> 01:08:37,399
Huh.

1218
01:08:41,500 --> 01:08:45,300
So, what did, what did we, what did we do here?

1219
01:08:45,300 --> 01:08:46,200
I'm super confused.

1220
01:08:46,200 --> 01:08:47,600
Did we just never?

1221
01:08:47,700 --> 01:08:50,000
We never went and back and did that, but we did switch the code

1222
01:08:50,000 --> 01:08:50,500
together.

1223
01:08:52,399 --> 01:08:54,300
All right, to be continued on that one.

1224
01:08:54,300 --> 01:08:57,800
But for right now let's go ahead and build with optimizations on and

1225
01:08:57,800 --> 01:08:58,800
see what happens here.

1226
01:09:12,899 --> 01:09:16,500
Okay, same basic difference.

1227
01:09:16,600 --> 01:09:21,100
I would say didn't really do anything else looks like it's just

1228
01:09:25,100 --> 01:09:26,200
Still issuing and I'm alone.

1229
01:09:26,200 --> 01:09:26,800
Dad.

1230
01:09:34,100 --> 01:09:34,899
Kb3.

1231
01:09:34,899 --> 01:09:36,100
What is I'm o?

1232
01:09:36,200 --> 01:09:37,200
Integer multiplied.

1233
01:09:37,200 --> 01:09:38,200
Yes, it is.

1234
01:09:38,399 --> 01:09:38,899
I'm all.

1235
01:09:38,899 --> 01:09:44,300
Is just a standard in x86 instruction, which got carried forward to x

1236
01:09:44,300 --> 01:09:46,000
64, which is what we're using here.

1237
01:09:47,700 --> 01:09:51,399
It's just the standard instruction for multiplying two integer values

1238
01:09:51,399 --> 01:09:51,800
together.

1239
01:09:51,800 --> 01:09:57,800
So basically, what happens is you put, which registers you actually

1240
01:09:57,800 --> 01:10:02,300
wanted to multiply

1241
01:10:03,200 --> 01:10:06,700
In this case, because we're multiplying by multiplying by a constant,

1242
01:10:06,800 --> 01:10:13,000
there's actually a special form, this kind of gets pretty off-topic.

1243
01:10:13,000 --> 01:10:17,500
But so Intel instructions set is

1244
01:10:20,100 --> 01:10:21,800
so, it's kind of a

1245
01:10:23,400 --> 01:10:24,600
It's kind of an interesting instruction set.

1246
01:10:24,600 --> 01:10:29,500
So the way the into Intel instruction set works is it's not like say

1247
01:10:29,500 --> 01:10:34,300
powerpc or something where every instruction is a fixed size.

1248
01:10:35,000 --> 01:10:37,200
Like, you know, how we do sometimes on stream?

1249
01:10:37,200 --> 01:10:40,100
Like, we'll do like a struct and we'll just have a union and all the

1250
01:10:40,100 --> 01:10:41,200
different things are in the union.

1251
01:10:41,200 --> 01:10:45,700
So every, even though there's multiple types of things, everyone is

1252
01:10:45,700 --> 01:10:46,400
the same size.

1253
01:10:46,400 --> 01:10:48,700
So, just it's however, the biggest one is, however, big.

1254
01:10:48,700 --> 01:10:52,000
The biggest one is, That's How big each of our things is.

1255
01:10:52,100 --> 01:10:53,000
And then we just,

1256
01:10:53,200 --> 01:10:55,200
A union in there, that's like the different size, whatever.

1257
01:10:55,200 --> 01:10:58,800
Well, some instructions that are instruction sets are like that.

1258
01:10:58,800 --> 01:11:01,500
So for example, powerpc was like that where every instruction was the

1259
01:11:01,500 --> 01:11:02,200
same size.

1260
01:11:02,300 --> 01:11:05,300
So when you looked at it instruction you knew that it was exactly the

1261
01:11:05,300 --> 01:11:08,900
size and all of the instructions have to fit in whatever that was, you

1262
01:11:08,900 --> 01:11:10,000
couldn't answer that was longer.

1263
01:11:10,600 --> 01:11:12,000
Until is not like that.

1264
01:11:12,100 --> 01:11:15,200
The way into the instructions work, is it's encoded as a variable

1265
01:11:15,200 --> 01:11:15,900
number of bytes.

1266
01:11:16,100 --> 01:11:21,100
And so, different bit patterns in each bite, tell you whether to read

1267
01:11:21,100 --> 01:11:21,900
the next bite.

1268
01:11:22,000 --> 01:11:23,000
So, for example, you can see

1269
01:11:23,100 --> 01:11:27,400
See here that this this mob ex and SX instruction is actually encoded

1270
01:11:27,400 --> 01:11:34,000
as 3 B, it's encoded as ofbe 03 but the I'm all is actually encoded as

1271
01:11:34,000 --> 01:11:34,800
a lot more bites.

1272
01:11:34,800 --> 01:11:39,200
It's 69 f f 3 F 0, 0 0, 1 0 0, right.

1273
01:11:39,500 --> 01:11:41,100
So it's totally different.

1274
01:11:42,500 --> 01:11:44,000
Now you may ask?

1275
01:11:44,100 --> 01:11:45,200
Why is this the case?

1276
01:11:45,500 --> 01:11:51,300
The answer is because of the way that it got extended over time if you

1277
01:11:51,300 --> 01:11:53,700
want to do backwards looking and try to be generous to it.

1278
01:11:53,700 --> 01:11:56,700
You would say that it's because you want to have the ability to have

1279
01:11:56,700 --> 01:11:57,200
some instructions.

1280
01:11:57,200 --> 01:11:59,900
Be longer than others, so that you don't waste time spending.

1281
01:12:00,000 --> 01:12:01,700
A lot of B encoding, a lot of instructions.

1282
01:12:01,700 --> 01:12:06,900
So it's kind of like a Huffman tree encoding of instructions, right?

1283
01:12:07,500 --> 01:12:10,500
And you could see that being a very smart way to encode instruction

1284
01:12:10,500 --> 01:12:11,700
streams for processors.

1285
01:12:11,700 --> 01:12:15,000
If you don't know what a Huffman tree is is basically a way of it's a

1286
01:12:15,000 --> 01:12:17,600
it's a compression technique.

1287
01:12:17,600 --> 01:12:21,600
You can go take a look at it but point being Intel's, architecture

1288
01:12:21,600 --> 01:12:25,500
editors, destruction coding is sort of like that, but it's not a

1289
01:12:25,500 --> 01:12:27,700
particularly well-designed Huffman tree.

1290
01:12:27,900 --> 01:12:29,900
Because instead of having all the instructions,

1291
01:12:30,000 --> 01:12:33,000
As you ever might want known ahead of time and then perfectly

1292
01:12:33,000 --> 01:12:38,500
balancing the Huffman tree to be set up for the frequency of a given

1293
01:12:38,500 --> 01:12:41,000
instruction translating to how many bytes it takes to encode.

1294
01:12:41,000 --> 01:12:44,800
It it's actually more like every time they went to extend something

1295
01:12:45,000 --> 01:12:48,400
that became another sort of level down the Huffman tree or whatever,

1296
01:12:48,600 --> 01:12:50,800
and so it's actually not that.

1297
01:12:50,800 --> 01:12:53,800
Well, designed for compressing necessarily, whatever.

1298
01:12:53,800 --> 01:12:54,500
What are you gonna do?

1299
01:12:54,600 --> 01:12:55,100
That's Legacy.

1300
01:12:55,100 --> 01:12:56,000
That's just how it goes.

1301
01:12:56,700 --> 01:12:59,800
So the long and short, that, that's a very long.

1302
01:13:00,000 --> 01:13:03,500
Roundabout way of saying, well what ends up happening is that you can

1303
01:13:03,500 --> 01:13:06,000
encode, some pretty fancy ridiculous instructions.

1304
01:13:06,000 --> 01:13:10,900
So one of the things you can encode for example is an I'm all where

1305
01:13:10,900 --> 01:13:14,500
you're going to say that you want to multiply the contents of EDI by

1306
01:13:14,500 --> 01:13:17,500
some constant that is included in the instruction.

1307
01:13:17,900 --> 01:13:20,500
So you didn't have to load a constant into register first.

1308
01:13:20,500 --> 01:13:24,400
And then say, I'm all this fresh vaginally, the instruction itself.

1309
01:13:24,400 --> 01:13:29,800
These bites right here are actually encoding the actual

1310
01:13:29,900 --> 01:13:33,100
In itself, the actual constant itself, right?

1311
01:13:33,300 --> 01:13:40,200
So the, the 100 3 F, that's actually this part right here, right of

1312
01:13:40,200 --> 01:13:40,400
that.

1313
01:13:40,400 --> 01:13:43,400
I'm oh, so the I'm always like, oh, I'm all this register.

1314
01:13:43,400 --> 01:13:45,700
And then here's a constant that we just stuck right in the

1315
01:13:45,700 --> 01:13:46,300
instruction.

1316
01:13:46,400 --> 01:13:47,700
And we're going to multiply, right?

1317
01:13:48,700 --> 01:13:51,000
And so that's just something you can do.

1318
01:13:51,200 --> 01:13:54,700
When you've got a crazy variable length instruction set architecture.

1319
01:13:54,800 --> 01:13:57,300
Like Intel's is, you can just go Hog Wild.

1320
01:13:57,300 --> 01:13:59,800
So, a lot of times when you look at

1321
01:14:00,000 --> 01:14:02,800
Documentation for an Intel instruction.

1322
01:14:02,900 --> 01:14:07,000
It looks very different from the documentation for say, a powerpc

1323
01:14:07,000 --> 01:14:11,000
instruction because like a simpler more straightforward non-variable,

1324
01:14:11,000 --> 01:14:13,200
instruction size architecture.

1325
01:14:13,400 --> 01:14:15,900
Typically, has instructions that are very simple.

1326
01:14:16,000 --> 01:14:20,900
It's like, here's the multiply the first parameter is the register 2

1327
01:14:20,900 --> 01:14:26,100
multiplied, by the second parameter is the register to multiply two.

1328
01:14:26,100 --> 01:14:29,800
And it stores it in that in that second one, the

1329
01:14:29,900 --> 01:14:32,800
Result it over right, sit there that with result or something, right?

1330
01:14:32,800 --> 01:14:35,700
Something like that is what you would see documented in like the power

1331
01:14:35,700 --> 01:14:37,700
PC or something like that, usually, right?

1332
01:14:38,200 --> 01:14:40,600
But if you look at, I'm all on an Intel architecture.

1333
01:14:40,900 --> 01:14:41,900
It's nothing like that.

1334
01:14:42,200 --> 01:14:42,400
What?

1335
01:14:42,400 --> 01:14:46,300
I'm a looks like on an Intel architecture is like, ah well

1336
01:14:48,100 --> 01:14:51,900
Here are the eight thousand ways you might want to run an Eye mole.

1337
01:14:52,000 --> 01:14:54,400
So let me tell you about them, right?

1338
01:14:54,500 --> 01:14:59,800
And you can see that here if I pull it up here,

1339
01:15:00,000 --> 01:15:03,000
Are all of the things that it might be right.

1340
01:15:03,600 --> 01:15:05,600
So it's like, oh, did you want?

1341
01:15:05,600 --> 01:15:08,600
Like, you know, this times an immediate that you want this times?

1342
01:15:08,600 --> 01:15:10,300
Memory, did you want this one?

1343
01:15:10,500 --> 01:15:13,200
Like each one of these is actually two different ones that's like,

1344
01:15:13,200 --> 01:15:15,400
register or memory 16.

1345
01:15:16,400 --> 01:15:18,300
Like, oh, there's all kinds of stuff.

1346
01:15:18,300 --> 01:15:21,900
Like it's just, it's a festival, right?

1347
01:15:23,200 --> 01:15:28,300
So the Intel instruction sets are very like crazy, configurable in

1348
01:15:28,300 --> 01:15:29,800
that way and like everything.

1349
01:15:30,000 --> 01:15:33,000
Is like all these prefix codes, or they're like, oh, well, if you set

1350
01:15:33,000 --> 01:15:37,200
the high bit of that, then it means that that you'll read the next

1351
01:15:37,200 --> 01:15:41,100
bite and use that to determine whether or not it's going to be an

1352
01:15:41,100 --> 01:15:41,600
immediate.

1353
01:15:41,600 --> 01:15:44,100
And if it is, then it's the first part is the seven bits of the

1354
01:15:44,100 --> 01:15:46,000
immediate that combined with the blah and blah blah blah.

1355
01:15:46,000 --> 01:15:49,100
And and that's honestly that's how the instructions that works.

1356
01:15:49,100 --> 01:15:53,300
It's a crazy instruction set to work with if you're writing a

1357
01:15:53,300 --> 01:15:56,700
compiler, because the outputting the instructions is just this funny

1358
01:15:56,700 --> 01:15:59,900
like crazy bit of code, that is so much more complicated.

1359
01:16:00,000 --> 01:16:03,000
Then what it would look like in like a powerpc or something.

1360
01:16:12,900 --> 01:16:15,900
Okay, let's see here.

1361
01:16:16,500 --> 01:16:17,000
Yeah.

1362
01:16:18,600 --> 01:16:19,900
Extracting pixels, dude.

1363
01:16:19,900 --> 01:16:21,600
You inspire me to write a handmade Windows?

1364
01:16:21,600 --> 01:16:22,000
Debugger?

1365
01:16:22,000 --> 01:16:22,500
Are you serious?

1366
01:16:22,700 --> 01:16:23,500
Are you serious?

1367
01:16:24,900 --> 01:16:29,100
Because if you are seriously doing that, is there any way that you

1368
01:16:29,100 --> 01:16:32,700
could make it be callable as like, a dll?

1369
01:16:32,700 --> 01:16:35,100
So, that, like, you know, we could integrate into for coder or

1370
01:16:35,100 --> 01:16:37,500
something, because that would be awesome.

1371
01:16:40,300 --> 01:16:43,700
I would love or Windows debugger that wasn't Visual Studio.

1372
01:16:46,600 --> 01:16:47,700
Mojo Bojo.

1373
01:16:47,700 --> 01:16:51,200
Why did you put the Delta time of each frame into the input struct?

1374
01:16:51,200 --> 01:16:53,700
That seemed a bit strange to me while looking through the source code

1375
01:16:53,700 --> 01:16:54,100
today?

1376
01:16:54,600 --> 01:16:56,300
Well, I guess I'm not sure.

1377
01:16:56,400 --> 01:17:01,000
I understand your question is the question, why do we need to pass the

1378
01:17:01,000 --> 01:17:02,900
Delta time per frame to the game?

1379
01:17:03,300 --> 01:17:04,200
Or is the question?

1380
01:17:04,300 --> 01:17:06,400
Why was it passed in that structure?

1381
01:17:06,700 --> 01:17:08,400
Which, which of those two questions?

1382
01:17:09,000 --> 01:17:10,900
Do you actually want to know the answer to?

1383
01:17:13,800 --> 01:17:14,100
Qbert.

1384
01:17:14,100 --> 01:17:17,400
Caleb, why are the half b of the hex value.

1385
01:17:18,000 --> 01:17:21,100
100 3F reversed in the instruction.

1386
01:17:21,400 --> 01:17:24,500
I can understand the B being reversed, but the half b.

1387
01:17:29,600 --> 01:17:33,000
Let me see what you're trying to say.

1388
01:17:33,700 --> 01:17:35,600
I don't think they are.

1389
01:17:37,900 --> 01:17:39,000
These are B.

1390
01:17:39,500 --> 01:17:41,500
Not half B, right?

1391
01:17:41,700 --> 01:17:46,600
And so this is the 3F, right?

1392
01:17:47,000 --> 01:17:48,400
This is the zero zero.

1393
01:17:49,600 --> 01:17:53,800
This is the 01 now you can't see the 01 there but there it is.

1394
01:17:54,000 --> 01:17:54,500
Right?

1395
01:17:54,900 --> 01:17:58,800
And remember that's not super unusual because Intel's little endian,

1396
01:17:59,000 --> 01:17:59,600
right?

1397
01:17:59,600 --> 01:17:59,800
And what

1398
01:18:00,000 --> 01:18:03,600
Means is that in memory the 3F comes first.

1399
01:18:03,600 --> 01:18:05,600
It actually goes in the bottom of the register.

1400
01:18:05,800 --> 01:18:06,800
The 00 comes next.

1401
01:18:06,800 --> 01:18:09,900
It goes next 01 goes it comes next, right?

1402
01:18:10,100 --> 01:18:12,900
If it was big ending to be the other way around so it's not that

1403
01:18:12,900 --> 01:18:16,400
unusual for Intel to encode it this way in memory because it is a

1404
01:18:16,400 --> 01:18:17,500
little endian architecture.

1405
01:18:17,500 --> 01:18:21,900
So that's how it would be encoded in memory regularly like for reals,

1406
01:18:22,100 --> 01:18:22,800
right?

1407
01:18:23,600 --> 01:18:27,600
And I suspect that this might be a full 32-bit immediate because that

1408
01:18:27,600 --> 01:18:29,800
is probably part of the I'm oh, let me take a look.

1409
01:18:30,000 --> 01:18:30,000
Look.

1410
01:18:33,600 --> 01:18:34,000
Uh-huh.

1411
01:18:36,600 --> 01:18:37,300
Sure enough.

1412
01:18:39,300 --> 01:18:40,200
Check it out.

1413
01:18:40,400 --> 01:18:45,600
So basically what it's doing here is this is a full 32-bit immediate

1414
01:18:46,000 --> 01:18:47,100
and it's just happens.

1415
01:18:47,100 --> 01:18:50,100
So it's actually storing this value in there, right?

1416
01:18:53,700 --> 01:18:55,000
That's what it's actually storing.

1417
01:18:55,900 --> 01:18:59,300
And so it's just it's like 3 F 0, 0 0.

1418
01:18:59,300 --> 01:19:00,200
1 0 0.

1419
01:19:00,300 --> 01:19:01,500
That's what, it's, that's what it is.

1420
01:19:01,500 --> 01:19:04,800
So so it's like, here's the I'm all 69 f f.

1421
01:19:05,400 --> 01:19:06,700
That's the instructions.

1422
01:19:06,700 --> 01:19:11,100
That's the like I want to do and I'm all with an immediate and you can

1423
01:19:11,100 --> 01:19:16,100
see here that we're probably doing, let's let's take a little bit.

1424
01:19:16,500 --> 01:19:18,900
Let's look at the instruction operating coding here, right?

1425
01:19:19,600 --> 01:19:22,400
So operands one operand to Upper in 3M for here,

1426
01:19:23,500 --> 01:19:29,900
upper and 3 is that immediate 32 operator operand to is one of these

1427
01:19:29,900 --> 01:19:33,900
like register memory and and this one is a register

1428
01:19:35,500 --> 01:19:40,500
So I'm assuming that in our world that we may be in the one operand

1429
01:19:40,500 --> 01:19:41,600
from because it's just EDI.

1430
01:19:41,600 --> 01:19:45,100
But this was an echo to that used by the most traction source operand

1431
01:19:45,100 --> 01:19:46,100
is multiplied by the value.

1432
01:19:46,100 --> 01:19:49,300
In the ill X RX pressure to perform with this.

1433
01:19:49,300 --> 01:19:52,100
From a destination operand is multiplied by The Source operand, the

1434
01:19:52,100 --> 01:19:53,800
same summer has jumper must register in the source.

1435
01:19:53,800 --> 01:19:55,200
Operand is an immediate value.

1436
01:19:56,500 --> 01:19:58,000
A jumper stretch for or remember location.

1437
01:19:58,000 --> 01:20:00,600
The intermediate product is truncated stored.

1438
01:20:00,700 --> 01:20:02,400
So do they have the encoding?

1439
01:20:02,400 --> 01:20:02,800
I don't know.

1440
01:20:02,800 --> 01:20:04,900
That they do, we probably just the general encoding.

1441
01:20:06,800 --> 01:20:07,700
Let's see here.

1442
01:20:07,900 --> 01:20:09,900
Did you sign multiply opcode.

1443
01:20:10,100 --> 01:20:14,500
F 6/5 here.

1444
01:20:16,000 --> 01:20:18,700
So I don't actually remember the encoding.

1445
01:20:18,700 --> 01:20:22,600
The, I don't remember the decryption that way to decode how that is,

1446
01:20:22,800 --> 01:20:27,400
but I'm assuming that that actually has EDI encoded in it, that makes

1447
01:20:27,400 --> 01:20:27,700
sense.

1448
01:20:41,900 --> 01:20:45,300
Quarter on and you want until the ship a unifying ISO for all gpus.

1449
01:20:45,600 --> 01:20:47,900
Yeah I mean look ma'am.

1450
01:20:49,700 --> 01:20:51,100
Just because it's ugly.

1451
01:20:52,300 --> 01:20:54,900
Doesn't mean it doesn't work, right?

1452
01:20:55,100 --> 01:20:55,600
Like

1453
01:20:58,000 --> 01:20:59,800
every year these

1454
01:21:00,000 --> 01:21:01,800
You still run all the code.

1455
01:21:01,800 --> 01:21:02,800
That was compiled for them.

1456
01:21:04,000 --> 01:21:09,100
Right, like code, I compiled 10 years ago, if I run it today.

1457
01:21:09,200 --> 01:21:14,500
The only way it doesn't work, is if Windows screwed up the apis which

1458
01:21:14,500 --> 01:21:15,700
they often do, right?

1459
01:21:15,700 --> 01:21:18,900
But the exit before just works.

1460
01:21:19,400 --> 01:21:24,600
So as crazy as that sounds and I admit this is a wacky instruction

1461
01:21:24,600 --> 01:21:25,100
encoding.

1462
01:21:25,200 --> 01:21:26,600
You know what it does.

1463
01:21:26,600 --> 01:21:30,600
The thing I want it provides an extremely reliable way to build a

1464
01:21:30,600 --> 01:21:32,100
piece of code and run it forever.

1465
01:21:32,400 --> 01:21:33,700
It's like it's exactly.

1466
01:21:33,800 --> 01:21:38,800
I want so yes I would love if intel would just be like here is the iso

1467
01:21:38,800 --> 01:21:43,400
for gpus because if they committed to that and treated it like xxt as

1468
01:21:43,400 --> 01:21:47,500
just part of x64 from now on what an amazing world that would usher in

1469
01:21:47,900 --> 01:21:50,400
there be like no more compatibility problems at all.

1470
01:21:50,900 --> 01:21:53,300
They just be gone overnight, right?

1471
01:21:53,400 --> 01:21:57,400
And I would trade almost any amount of graphics performance for that

1472
01:21:57,400 --> 01:22:01,000
because man, the times when I'm sitting around going, we don't have

1473
01:22:01,000 --> 01:22:03,100
enough graphics performance compared to the time to sit around going.

1474
01:22:03,100 --> 01:22:03,700
I wish.

1475
01:22:03,800 --> 01:22:06,400
Of the stuff, we ran it all and didn't crash, you know?

1476
01:22:06,400 --> 01:22:08,300
It's just it's no contest nowadays.

1477
01:22:17,700 --> 01:22:21,100
Okay, so let's see here, extracting pixels.

1478
01:22:21,100 --> 01:22:21,900
I'll keep that in mind.

1479
01:22:21,900 --> 01:22:22,800
Please do if.

1480
01:22:22,800 --> 01:22:27,900
Yeah, if you have any interest in like making, if you're going to do

1481
01:22:27,900 --> 01:22:30,600
the work of making the debugging stuff, which is a bunch of work to

1482
01:22:30,600 --> 01:22:34,900
like parse pdb files or not, really parse them, but read them with the

1483
01:22:35,200 --> 01:22:36,100
apis or whatever.

1484
01:22:36,100 --> 01:22:39,800
And then you know, set the brake set breakpoints and get register

1485
01:22:39,800 --> 01:22:40,600
information out.

1486
01:22:40,800 --> 01:22:42,000
If you're going to do that work.

1487
01:22:42,000 --> 01:22:45,500
If you could expose that as a dll that people could call,

1488
01:22:46,900 --> 01:22:49,700
Or you know, whatever that would be kind of amazing because then

1489
01:22:49,700 --> 01:22:53,100
people could build tools on top of it and that would be awesome.

1490
01:22:54,400 --> 01:22:55,100
Mojo Jojo.

1491
01:22:55,200 --> 01:22:57,000
Why was it passed in that structure?

1492
01:22:57,100 --> 01:23:00,300
It was specifically looking for the Delta time variable and that was

1493
01:23:00,300 --> 01:23:01,100
the last, I supposed to be.

1494
01:23:01,300 --> 01:23:05,100
So, the reason that I passed the clock as part of input is because, if

1495
01:23:05,100 --> 01:23:08,600
you think about what the clock is, its input, right?

1496
01:23:09,400 --> 01:23:14,300
Like basically, like you can think of the things that are coming from

1497
01:23:14,300 --> 01:23:15,100
the outside.

1498
01:23:15,100 --> 01:23:16,100
I've got, you know what?

1499
01:23:16,100 --> 01:23:19,800
I'm tapping on the keyboard, what I'm clicking on the mouse and that

1500
01:23:19,800 --> 01:23:21,000
time is passing.

1501
01:23:21,400 --> 01:23:23,700
So when I need to, like hand, the game stuff,

1502
01:23:23,900 --> 01:23:25,600
And be like, here's all the information.

1503
01:23:25,600 --> 01:23:27,100
You need to know what happened.

1504
01:23:27,200 --> 01:23:29,500
Since last time you did something.

1505
01:23:30,000 --> 01:23:33,600
The time is, just like all of those things, right?

1506
01:23:33,600 --> 01:23:36,800
It's the interval of time that has elapsed between the two and then

1507
01:23:36,800 --> 01:23:39,100
like, these are the key presses that elapsed between the two of these

1508
01:23:39,100 --> 01:23:40,200
are the mouse clicks of that.

1509
01:23:40,300 --> 01:23:43,000
So I consider that to basically input other way to look at.

1510
01:23:43,000 --> 01:23:46,600
It would be, what are the things that you would have to record in

1511
01:23:46,600 --> 01:23:49,900
order to play back a user's session, right?

1512
01:23:50,200 --> 01:23:53,500
And again, same thing, I need the keyboard input, the mouse input,

1513
01:23:53,800 --> 01:23:55,300
The time, right.

1514
01:23:55,800 --> 01:23:59,500
So basically, like it is essentially an input device.

1515
01:24:00,000 --> 01:24:05,100
The wall clock is an input device and so that's why I tend to think of

1516
01:24:05,100 --> 01:24:06,000
them as the same.

1517
01:24:13,500 --> 01:24:16,800
Mojo budget to add on since each player has their own input struct.

1518
01:24:16,900 --> 01:24:20,100
It seems to me like passing it through each one, was going to be the

1519
01:24:20,100 --> 01:24:20,900
same for each player.

1520
01:24:20,900 --> 01:24:21,600
Seems redundant.

1521
01:24:21,700 --> 01:24:22,600
That's not.

1522
01:24:22,700 --> 01:24:23,800
We don't do that.

1523
01:24:24,200 --> 01:24:25,600
That's not how it works at all.

1524
01:24:25,900 --> 01:24:31,300
So if you go and look at handmade platform.sh, where that stuff is

1525
01:24:31,300 --> 01:24:32,100
defined here,

1526
01:24:40,300 --> 01:24:44,700
You can see in game input that you only pass the DT once and then

1527
01:24:44,700 --> 01:24:48,400
like, for however, many controllers, there are, is a separate set of

1528
01:24:48,400 --> 01:24:48,900
inputs.

1529
01:24:48,900 --> 01:24:50,600
So that we don't do that.

1530
01:24:50,600 --> 01:24:53,100
There are not separate inputs per person.

1531
01:24:58,100 --> 01:25:00,000
So so yeah.

1532
01:25:00,800 --> 01:25:01,400
So there you go.

1533
01:25:02,500 --> 01:25:04,100
All right, I'm gonna go ahead and close this.

1534
01:25:07,800 --> 01:25:08,700
Here, I should do that.

1535
01:25:09,800 --> 01:25:16,100
Now that I think about it, probably shouldn't quite cozy yet cuz we

1536
01:25:16,100 --> 01:25:20,100
shouldn't leave the probably leave it compiling, you know, to, because

1537
01:25:20,100 --> 01:25:22,600
I'll forget and be wondering why our debugging is all squirrelly and

1538
01:25:22,600 --> 01:25:24,000
then be like, oh, that's why.

1539
01:25:25,000 --> 01:25:31,200
So, let's go ahead and save that off and leave it like that so

1540
01:25:31,200 --> 01:25:31,900
building, right?

1541
01:25:32,800 --> 01:25:33,200
Yeah.

1542
01:25:34,200 --> 01:25:36,300
Alright, let's close this down.

1543
01:25:40,000 --> 01:25:41,900
Alright everyone, thank you for joining me for another episode of

1544
01:25:41,900 --> 01:25:42,400
handmade here.

1545
01:25:42,400 --> 01:25:43,600
It's been a pleasure coding with you.

1546
01:25:43,600 --> 01:25:46,900
As always, if you would like to follow along the series, you can

1547
01:25:46,900 --> 01:25:49,300
always pre-order the game on handmade here at org and it comes to the

1548
01:25:49,300 --> 01:25:51,000
source code so you can play around with it.

1549
01:25:51,000 --> 01:25:53,300
So if you want to learn from the string, that's a great way to do that

1550
01:25:53,400 --> 01:25:55,400
and you can do that right here on having a dork.

1551
01:25:55,400 --> 01:26:00,100
We also have a forum site, you can go to the Forum site to find out

1552
01:26:00,500 --> 01:26:05,500
more about the series ask questions and and have Martin's Mosaic.

1553
01:26:05,500 --> 01:26:07,300
Oh I don't really know how to pronounce his last name.

1554
01:26:07,300 --> 01:26:08,600
Answer them because somehow

1555
01:26:08,700 --> 01:26:11,700
Seems to know the answer to everything so before I even see your

1556
01:26:11,700 --> 01:26:13,800
question, he'll probably answer it with a better answer that I would

1557
01:26:13,800 --> 01:26:14,400
give an anyway.

1558
01:26:14,400 --> 01:26:17,800
We have a patreon page where you can split the video series and other

1559
01:26:17,800 --> 01:26:19,300
hand made projects.

1560
01:26:19,300 --> 01:26:22,600
We also have a tweet bot that I mentioned earlier on the stream during

1561
01:26:22,600 --> 01:26:23,000
the Q&A.

1562
01:26:23,000 --> 01:26:25,900
When someone asked that tells you what the schedule is it speaking to

1563
01:26:25,900 --> 01:26:26,200
schedule?

1564
01:26:26,200 --> 01:26:27,700
I will be back here for the last few of the week.

1565
01:26:27,700 --> 01:26:30,400
Friday Stream, 5 p.m.

1566
01:26:30,400 --> 01:26:31,500
Pacific Daylight time tomorrow.

1567
01:26:31,500 --> 01:26:35,100
Hope to see you here for that when we can do a little work prettying

1568
01:26:35,100 --> 01:26:38,700
up our debug display, that's about it, hope to see you.

1569
01:26:38,700 --> 01:26:41,800
You guys here tomorrow till then have fun programming and I'll see you

1570
01:26:41,800 --> 01:26:42,700
guys on the internet.

1571
01:26:42,800 --> 01:26:43,600
Take it easy everyone.

