1
00:00:00,100 --> 00:00:05,400
Okay, if John is done, that means we should go ahead and start here.

2
00:00:06,000 --> 00:00:07,000
Three minutes.

3
00:00:07,000 --> 00:00:08,200
That was not too long to wait.

4
00:00:08,200 --> 00:00:11,100
I think I'm pretty excited about John's new language.

5
00:00:11,100 --> 00:00:12,100
I hope you guys are too.

6
00:00:12,100 --> 00:00:15,200
It's the first time I've seen anyone, who really cares about the same

7
00:00:15,200 --> 00:00:18,500
sorts of things that I care about, try to make a new language.

8
00:00:18,500 --> 00:00:20,500
And so I'm pretty optimistic.

9
00:00:20,600 --> 00:00:22,900
I think maybe a year or two from now.

10
00:00:22,900 --> 00:00:25,700
I can do handmade hero in j.i.

11
00:00:25,700 --> 00:00:26,800
Or something fun like that.

12
00:00:26,800 --> 00:00:28,200
And I think that would be a blast.

13
00:00:28,200 --> 00:00:29,900
I'm sure there's a bunch of cool stuff we could do with.

14
00:00:30,000 --> 00:00:33,900
It anyway, thank you for indulging.

15
00:00:33,900 --> 00:00:35,600
Me and waiting the extra few minutes.

16
00:00:35,600 --> 00:00:41,100
I wanted to catch the the whole thing, a job, John's presentation, but

17
00:00:41,200 --> 00:00:41,700
it is time.

18
00:00:41,700 --> 00:00:44,400
Now, for day, 18.

19
00:00:44,400 --> 00:00:45,500
Am I correct people?

20
00:00:45,500 --> 00:00:46,700
I believe it is day.

21
00:00:46,700 --> 00:00:52,100
18 of handmade hero the show, where we create an entire game,

22
00:00:52,300 --> 00:00:54,400
professional quality from scratch.

23
00:00:54,400 --> 00:00:55,300
No libraries.

24
00:00:55,300 --> 00:00:56,100
No nothing.

25
00:00:56,300 --> 00:00:59,800
So we can see how every last little thing actually works.

26
00:01:00,400 --> 00:01:03,100
And to me, that is very important, because I think it's crucial to

27
00:01:03,100 --> 00:01:05,000
really kind of understand how everything works.

28
00:01:05,000 --> 00:01:09,000
Even when you do, then go on to use libraries or use engines, just

29
00:01:09,000 --> 00:01:11,000
having that full perspective.

30
00:01:11,000 --> 00:01:14,200
There, that lets you at anytime drop down to a low level and fix

31
00:01:14,200 --> 00:01:16,900
anything that you need to, or to understand why something might be

32
00:01:16,900 --> 00:01:20,300
going wrong in code that you're using that kind of stuff is just so

33
00:01:20,300 --> 00:01:20,900
valuable.

34
00:01:21,300 --> 00:01:23,500
And so we are going to do it all here on this stream.

35
00:01:23,500 --> 00:01:27,900
We're going to keep on making sure we go into detail every last little

36
00:01:27,900 --> 00:01:28,700
place we can.

37
00:01:29,400 --> 00:01:34,900
So today on our we've got a pretty big to-do item that we've got to do

38
00:01:34,900 --> 00:01:35,100
today.

39
00:01:35,100 --> 00:01:36,900
And I don't know if we're going to get it all in today.

40
00:01:37,300 --> 00:01:38,400
So we're going to try.

41
00:01:38,700 --> 00:01:44,100
And basically what we have to do is we have not actually done the work

42
00:01:44,100 --> 00:01:47,800
to make a proper synchronized timing Loop to drive our games.

43
00:01:47,800 --> 00:01:51,800
So we could go ahead and make our game on the platform layer that we

44
00:01:51,800 --> 00:01:57,400
have now, but we would be at risk of having greater audio latency than

45
00:01:57,400 --> 00:01:58,200
we should have.

46
00:01:58,200 --> 00:01:58,900
We would be

47
00:01:59,400 --> 00:02:02,100
At risk of sort of having just synchronization problems there.

48
00:02:02,400 --> 00:02:06,300
We just haven't quite gotten to the point where we really understand

49
00:02:06,300 --> 00:02:10,100
the timing of when things show up on the screen and when the audio

50
00:02:10,100 --> 00:02:11,100
plays out the speakers.

51
00:02:11,100 --> 00:02:14,400
And so I'd like to do a little tightening there before we even start.

52
00:02:14,400 --> 00:02:16,800
I know, I've said later that we're going to go and have a pass on the

53
00:02:16,800 --> 00:02:19,400
win32 platform, where we're going to ship, where we do a bunch of

54
00:02:19,400 --> 00:02:22,100
things that we've been putting off that, our performance kind of

55
00:02:22,100 --> 00:02:25,300
stuff, that sort of thing and compatibility stuff that we're not

56
00:02:25,300 --> 00:02:28,300
addressing now, but this, I want to address sooner rather than later

57
00:02:28,300 --> 00:02:29,100
because

58
00:02:29,400 --> 00:02:34,200
All of the decisions that we make in the actual game itself are all

59
00:02:34,200 --> 00:02:35,900
driven off of this timing.

60
00:02:35,900 --> 00:02:38,700
So when we are playing the game, when we were deciding, how long

61
00:02:38,700 --> 00:02:40,500
things should take in the game.

62
00:02:40,900 --> 00:02:47,900
Every last thing we do is going to be based on on to me is going to be

63
00:02:47,900 --> 00:02:50,200
based on whatever that clocking is.

64
00:02:50,400 --> 00:02:54,600
So if we have that clocking wrong in the platform, prototyping layer,

65
00:02:54,600 --> 00:02:58,300
that we've got now, then we're at risk of making a whole bunch of

66
00:02:58,300 --> 00:02:59,100
tuning things.

67
00:02:59,200 --> 00:02:59,800
things in,

68
00:03:00,000 --> 00:03:03,900
Wrecked in our game and then when we go to finalize the platform layer

69
00:03:03,900 --> 00:03:06,700
and tighten all that stuff up, then we have this problem.

70
00:03:06,700 --> 00:03:07,000
Where.

71
00:03:07,000 --> 00:03:10,200
Oh, now all the tuning values that all of the stuff that we tuned in

72
00:03:10,200 --> 00:03:12,700
our game and all of the stuff that we thought was right for

73
00:03:12,700 --> 00:03:13,800
playability of the game.

74
00:03:13,800 --> 00:03:14,700
As we were developing.

75
00:03:14,700 --> 00:03:16,400
It is actually all wrong.

76
00:03:16,500 --> 00:03:20,200
So what we want to do is just take a little bit of time now to go

77
00:03:20,200 --> 00:03:24,000
through and kind of make it a little more coherent, what it's trying

78
00:03:24,000 --> 00:03:28,000
to do and make sure that we understand that so that we can know that

79
00:03:28,000 --> 00:03:29,800
we don't have any critical problems.

80
00:03:30,000 --> 00:03:32,800
That will lead us to make a bunch of bad decisions and that we have to

81
00:03:32,800 --> 00:03:33,700
kind of redo later.

82
00:03:34,300 --> 00:03:36,900
Anyway, yeah, some of them screams.

83
00:03:36,900 --> 00:03:38,300
I don't forget to start recording the problem.

84
00:03:38,300 --> 00:03:40,900
There is, I did forget to do the stop, start recording.

85
00:03:40,900 --> 00:03:44,100
So that just means I, it's really used to convenience feature for me.

86
00:03:44,100 --> 00:03:46,800
It just means that I have to go through and take the file and just

87
00:03:46,800 --> 00:03:49,900
clip out the first little bit before I upload to Youtube.

88
00:03:49,900 --> 00:03:53,000
So that the YouTube archive doesn't have a bunch of me watching John

89
00:03:53,000 --> 00:03:54,700
on the stream, although, who knows.

90
00:03:54,700 --> 00:03:58,200
Maybe it should be a bunch of me, watching John Street, but ignoring

91
00:03:58,200 --> 00:03:58,300
that.

92
00:03:58,300 --> 00:03:59,800
So what we need to do today,

93
00:04:00,000 --> 00:04:02,400
Is we need to go take care of that?

94
00:04:02,400 --> 00:04:06,300
So if you have pre-ordered the game, then you have access to the

95
00:04:06,300 --> 00:04:06,800
source code.

96
00:04:06,800 --> 00:04:08,600
You got an email that has a link in it.

97
00:04:08,700 --> 00:04:11,100
That link allows you to download the source code every night.

98
00:04:11,100 --> 00:04:14,200
So, I highly recommend you do that because if you would like, to

99
00:04:14,200 --> 00:04:17,200
follow along with what we are doing today, here on day 18, you just

100
00:04:17,200 --> 00:04:21,500
unzipped the day 17 piece out of your zip file, that zip file has

101
00:04:21,500 --> 00:04:22,300
every days in there.

102
00:04:22,300 --> 00:04:25,000
So you can jump to any day you want and work on it.

103
00:04:25,100 --> 00:04:29,100
So if you're looking at this video, you want to be a day 17 Source

104
00:04:29,100 --> 00:04:29,800
unzipped

105
00:04:29,900 --> 00:04:32,800
That is what I am starting with and that is what you should start with

106
00:04:32,900 --> 00:04:33,400
as well.

107
00:04:33,700 --> 00:04:34,300
All right.

108
00:04:34,300 --> 00:04:40,000
So before we go and actually do any coding, what I want to do first is

109
00:04:40,000 --> 00:04:44,500
take a look at the goals that we have for what we're trying to what

110
00:04:44,500 --> 00:04:45,100
we're trying to make.

111
00:04:45,100 --> 00:04:49,300
I want to, I want to really kind of go over sort of the, the high

112
00:04:49,300 --> 00:04:50,000
level picture.

113
00:04:50,000 --> 00:04:52,300
So that everyone understands what we're trying to do.

114
00:04:52,500 --> 00:04:52,900
Now.

115
00:04:52,900 --> 00:04:56,800
I took some recommendations from folks and I downloaded this package

116
00:04:56,800 --> 00:04:59,800
called Smooth draw, which I guess is is

117
00:05:00,000 --> 00:05:03,200
Thing that they use on Khan Academy or something like this.

118
00:05:03,300 --> 00:05:08,300
Just to see if it's any better than the thing that that we were using

119
00:05:08,300 --> 00:05:10,300
the paint Microsoft Paint.

120
00:05:10,300 --> 00:05:13,400
I tried it a little bit and honestly, it doesn't seem to actually be

121
00:05:13,400 --> 00:05:13,800
any better.

122
00:05:13,800 --> 00:05:18,700
It seems to be basically just the same thing as we had before here.

123
00:05:18,700 --> 00:05:20,700
It doesn't actually seem to be all that much better.

124
00:05:20,700 --> 00:05:24,200
But you know what, we'll give it a little shot and we'll see how it

125
00:05:24,200 --> 00:05:25,000
plays out.

126
00:05:25,000 --> 00:05:28,300
So what I want to talk about is I want to go back to that diagram sort

127
00:05:28,300 --> 00:05:28,800
of that.

128
00:05:28,800 --> 00:05:29,800
I've been using for quite

129
00:05:29,900 --> 00:05:32,900
um time where I'm talking about the various frames when they're

130
00:05:32,900 --> 00:05:35,300
computed when they're displayed that sort of thing.

131
00:05:35,700 --> 00:05:39,400
So I'm going to make some tick marks on our timeline here like this.

132
00:05:39,600 --> 00:05:43,100
And basically what we have here is is this is T going for, is this is

133
00:05:43,100 --> 00:05:43,600
time.

134
00:05:44,000 --> 00:05:45,900
This is our timeline, right?

135
00:05:46,000 --> 00:05:48,800
And the timeline, you know, I can I get asked, can I get a?

136
00:05:49,000 --> 00:05:54,500
Can I get that little low smaller time line that gets smaller, didn't

137
00:05:54,500 --> 00:05:55,700
feel like it got much smaller.

138
00:05:55,700 --> 00:05:55,900
I don't know.

139
00:05:55,900 --> 00:05:56,800
What did you guys think that?

140
00:05:56,800 --> 00:05:59,800
Got smaller hard to say, let's go even smaller.

141
00:06:00,200 --> 00:06:04,100
Other than that time, why do you know what?

142
00:06:04,300 --> 00:06:05,700
It's just not very good.

143
00:06:05,800 --> 00:06:08,300
I don't know about this program will give it a little more.

144
00:06:08,600 --> 00:06:09,700
Will give it a little more time.

145
00:06:09,700 --> 00:06:11,600
But I'm not I'm not optimistic.

146
00:06:11,600 --> 00:06:15,000
That this is actually, you know, yeah, what what it, what can you do,

147
00:06:16,500 --> 00:06:16,800
something?

148
00:06:16,800 --> 00:06:18,700
We can address a little later perhaps.

149
00:06:19,000 --> 00:06:23,200
Anyway, basically if we take a look at what happens here, we start the

150
00:06:23,200 --> 00:06:27,100
game at some point that will call t 0, right?

151
00:06:27,300 --> 00:06:29,800
And basically, this is when the game actually begins running.

152
00:06:30,000 --> 00:06:33,200
So the person runs the executable and we got to do our Windows startup

153
00:06:33,200 --> 00:06:34,500
stuff and all that sort of thing.

154
00:06:34,700 --> 00:06:37,700
Now, at some point we actually start the timing.

155
00:06:37,700 --> 00:06:42,300
So we actually take a look at what our timer value actually is.

156
00:06:42,300 --> 00:06:44,600
And that was query, performance counter was the thing that we were

157
00:06:44,600 --> 00:06:45,400
using to measure time.

158
00:06:45,400 --> 00:06:48,700
We're going to take a look at what that timing value actually is.

159
00:06:48,700 --> 00:06:52,700
And when we take a look at that, that first time example, we take is

160
00:06:52,700 --> 00:06:55,700
going to be the first Benchmark that we have, for figuring out how

161
00:06:55,700 --> 00:06:58,800
much wall clock time has elapsed during our code.

162
00:06:58,800 --> 00:07:00,000
So, I'm going to

163
00:07:00,000 --> 00:07:02,400
Called t0 vat, actual time.

164
00:07:02,700 --> 00:07:04,200
That is our first.

165
00:07:04,300 --> 00:07:08,300
Look at a query performance counter, right?

166
00:07:08,300 --> 00:07:09,500
That's our T equals 0.

167
00:07:10,500 --> 00:07:11,400
Now, what's going to happen?

168
00:07:11,400 --> 00:07:15,900
There is during this first interval during this interval here, right?

169
00:07:16,300 --> 00:07:17,700
During that first interval.

170
00:07:18,000 --> 00:07:21,900
We are going to be displaying essentially nothing, right.

171
00:07:22,100 --> 00:07:25,400
This is just plain Blackness on the screen.

172
00:07:25,900 --> 00:07:28,600
We will, if anything we just have a cleared window.

173
00:07:28,800 --> 00:07:29,700
There's nothing there.

174
00:07:29,900 --> 00:07:35,900
Because we have not actually prepared any actual, anything really?

175
00:07:35,900 --> 00:07:38,400
We haven't actually got a frame buffer that we can show.

176
00:07:38,800 --> 00:07:42,700
So, extending backwards as far as time goes, is some sort of Blackness

177
00:07:43,000 --> 00:07:44,500
and then there's going to be some tick.

178
00:07:44,500 --> 00:07:47,200
Mark, That's the first tick mark, where we actually display a frame.

179
00:07:47,400 --> 00:07:50,600
Now, if we want to, we can also call this t 0.

180
00:07:50,700 --> 00:07:51,700
It depends this.

181
00:07:51,700 --> 00:07:53,300
This is again, we're gonna have a bunch of decisions.

182
00:07:53,300 --> 00:07:53,600
Here.

183
00:07:53,800 --> 00:07:54,500
We have a bunch of decisions.

184
00:07:54,500 --> 00:07:56,100
We could also call t 0.

185
00:07:56,500 --> 00:07:59,800
The first the the first frame flip.

186
00:08:00,000 --> 00:08:01,400
Right, we could call it here.

187
00:08:01,400 --> 00:08:01,600
Right?

188
00:08:01,600 --> 00:08:03,500
So, I don't know which one we want to call T equals 0.

189
00:08:03,500 --> 00:08:08,000
We could call it the start, we could call it here hard to say

190
00:08:08,400 --> 00:08:08,600
something.

191
00:08:08,600 --> 00:08:12,600
We're gonna have to decide in a few minutes, but basically, at some

192
00:08:12,600 --> 00:08:15,100
point during here inside, here.

193
00:08:15,100 --> 00:08:18,900
We are Computing frame 0, right.

194
00:08:18,900 --> 00:08:22,900
We are Computing frame 0 audio and video, right?

195
00:08:22,900 --> 00:08:25,000
We've got both of those coming online.

196
00:08:25,000 --> 00:08:28,800
So we're doing the computation work inside this time interval to

197
00:08:28,800 --> 00:08:29,700
compute those.

198
00:08:29,900 --> 00:08:31,900
When they are done, we will then flip them.

199
00:08:31,900 --> 00:08:33,299
So that right here.

200
00:08:33,299 --> 00:08:36,100
And coming forwards to here, in this interval.

201
00:08:36,100 --> 00:08:39,799
You can actually see frame 0 displayed.

202
00:08:39,799 --> 00:08:42,600
So on the screen, you will see frame 0, right?

203
00:08:42,900 --> 00:08:47,400
And ideally, what we'd also like to do is have audio 0 show up right

204
00:08:47,400 --> 00:08:47,900
along with that.

205
00:08:47,900 --> 00:08:48,400
Right?

206
00:08:48,400 --> 00:08:51,500
So we want audio zero to come right here as well.

207
00:08:51,500 --> 00:08:51,800
Right?

208
00:08:52,300 --> 00:08:52,700
I don't know.

209
00:08:52,700 --> 00:08:54,600
I don't know you guys feel about slashes 20.

210
00:08:54,600 --> 00:08:57,500
Sometimes I feel like it's a little classy, you know, it feels a

211
00:08:57,500 --> 00:08:59,100
little European, a little fancy.

212
00:08:59,300 --> 00:08:59,900
So maybe I'll just

213
00:09:00,000 --> 00:09:00,900
Go ahead and put that in there.

214
00:09:02,400 --> 00:09:03,100
Put that in there.

215
00:09:08,200 --> 00:09:14,100
So, what we've got now, is we've basically got a time interval.

216
00:09:15,000 --> 00:09:17,700
This could have been as long as we wanted right because Blackness is

217
00:09:17,700 --> 00:09:19,300
on the screen and no audio is playing.

218
00:09:19,300 --> 00:09:21,600
So this is silent Blackness, right?

219
00:09:22,000 --> 00:09:25,400
Sounds like some bad sci-fi movie Silent Blackness is here.

220
00:09:25,600 --> 00:09:28,800
And then once we start here, we have both audio and a frame on the

221
00:09:28,800 --> 00:09:29,300
screen.

222
00:09:29,600 --> 00:09:33,400
So what basically happens is this can be arbitrarily long.

223
00:09:33,600 --> 00:09:37,300
This this time interval is arbitrarily long and we don't actually

224
00:09:37,300 --> 00:09:37,900
care.

225
00:09:38,200 --> 00:09:40,300
How long it takes it could take an hour.

226
00:09:40,300 --> 00:09:42,400
Well, I mean we care about that because we don't want to keep the user

227
00:09:42,400 --> 00:09:45,300
waiting obviously, but doesn't matter how long it takes because there

228
00:09:45,300 --> 00:09:47,200
isn't anything actually being displayed.

229
00:09:47,300 --> 00:09:50,100
So as far as the user knows, they're not going to see any glitches or

230
00:09:50,100 --> 00:09:51,100
hear any glitches.

231
00:09:51,200 --> 00:09:54,200
If this takes too long because there's actually nothing going on.

232
00:09:54,300 --> 00:09:55,300
It's just starting up.

233
00:09:55,300 --> 00:09:56,600
The, the window has just come.

234
00:09:56,600 --> 00:10:02,300
Come on screen, but once we get to hear this, now, we actually have

235
00:10:02,300 --> 00:10:06,400
some Target for the amount of time.

236
00:10:06,400 --> 00:10:07,600
If this is going to be on the screen.

237
00:10:08,000 --> 00:10:10,600
This is basically a fixed duration here.

238
00:10:10,600 --> 00:10:11,000
Right?

239
00:10:11,000 --> 00:10:11,400
Oops.

240
00:10:11,500 --> 00:10:12,400
That's not very good.

241
00:10:12,900 --> 00:10:19,200
This is basically a fixed duration that we have to compute the next

242
00:10:19,200 --> 00:10:19,700
frame.

243
00:10:19,900 --> 00:10:20,400
Now.

244
00:10:20,700 --> 00:10:25,400
I want to really underscore why I say this is fixed duration, because

245
00:10:25,400 --> 00:10:26,700
there's a lot of stuff.

246
00:10:26,700 --> 00:10:29,700
Like, I don't know if you guys have seen Nvidia, has made some

247
00:10:29,700 --> 00:10:34,000
announcements and there's been announcements unlike other standards

248
00:10:34,000 --> 00:10:37,500
and stuff about variable frame rate displays, right?

249
00:10:43,600 --> 00:10:49,400
Basically, normal monitors to me, like the kind you would normally see

250
00:10:50,100 --> 00:10:51,400
from just today.

251
00:10:52,100 --> 00:10:56,500
Normal monitors have some framerate that, they update the image app.

252
00:10:56,600 --> 00:11:00,600
And so, that framerate whatever the monitor is updating at is also

253
00:11:00,600 --> 00:11:02,000
what we would like to update at.

254
00:11:02,100 --> 00:11:06,400
If the monitor is refreshing, the image right at 60 frames a second.

255
00:11:06,400 --> 00:11:09,200
So that's, you know, 16 milliseconds or so, 16.6.

256
00:11:09,200 --> 00:11:10,800
Something like 17 milliseconds of frame.

257
00:11:11,100 --> 00:11:16,100
Right, if you think about that, we want to synchronize with that

258
00:11:16,100 --> 00:11:20,700
presentation because if we do something other than 60 + C, Ms of

259
00:11:20,700 --> 00:11:24,300
frame, then we will essentially be offbeat with the monitor.

260
00:11:24,400 --> 00:11:28,100
So if you imagine the monitor has kind of a timeline down here as

261
00:11:28,100 --> 00:11:28,500
well.

262
00:11:28,800 --> 00:11:34,400
If it was updating at a different rate than we were, let's say a

263
00:11:34,400 --> 00:11:36,200
little bit less like this.

264
00:11:38,600 --> 00:11:42,900
Right, of course, and if I can get that out of my head, there we go.

265
00:11:43,700 --> 00:11:46,800
Basically, what will happen is eventually we'll miss a frame.

266
00:11:46,900 --> 00:11:49,100
So right here, it won't matter here.

267
00:11:49,100 --> 00:11:49,700
It will display.

268
00:11:49,800 --> 00:11:51,700
It will display this Frame here.

269
00:11:51,700 --> 00:11:53,500
It will display this Frame here.

270
00:11:53,500 --> 00:11:57,300
It will display this Frame, but here it will display the same frame,

271
00:11:57,300 --> 00:11:57,800
again.

272
00:11:57,800 --> 00:11:59,800
The monitor will and will have to wait.

273
00:12:00,000 --> 00:12:02,900
A much longer time than the user has used to been seeing.

274
00:12:02,900 --> 00:12:04,200
It's used to seeing this interval.

275
00:12:04,300 --> 00:12:04,500
Now.

276
00:12:04,500 --> 00:12:06,500
It's going to see this interval and we're going to see.

277
00:12:06,500 --> 00:12:08,900
We feel like we skipped a frame to the user.

278
00:12:09,200 --> 00:12:13,700
So we want the monitors refresh rate and our refresh rate to be the

279
00:12:13,700 --> 00:12:14,200
same.

280
00:12:14,300 --> 00:12:14,500
Right?

281
00:12:14,500 --> 00:12:17,200
We want to update roughly the same frequency.

282
00:12:17,200 --> 00:12:20,000
So we're consistent so that every time the monitor goes to get a new

283
00:12:20,000 --> 00:12:20,500
frame.

284
00:12:20,900 --> 00:12:22,200
We give it a new frame.

285
00:12:22,200 --> 00:12:28,200
That's the goal so we can do that on either the monitors actual

286
00:12:28,200 --> 00:12:28,800
refresh rate.

287
00:12:28,800 --> 00:12:29,800
Like let's say it's 90.

288
00:12:30,000 --> 00:12:32,000
She hurts or 120 hertz monitor.

289
00:12:32,100 --> 00:12:34,800
We can do that actually hundred twenty Hertz, or we can do it as some

290
00:12:34,800 --> 00:12:36,000
subdivision of that.

291
00:12:36,000 --> 00:12:39,400
So let's say we're up in our game at 60 frames a second.

292
00:12:39,400 --> 00:12:42,300
And the monitor is 120 frames a second 120.

293
00:12:42,300 --> 00:12:42,800
Hertz, 60.

294
00:12:42,800 --> 00:12:45,200
Hertz Hertz is just cycles per second.

295
00:12:46,200 --> 00:12:49,600
Well, as long as we're a multiple of 2 or something, an even multiple

296
00:12:49,600 --> 00:12:52,800
three, whatever away from that, then we know that we're never going to

297
00:12:52,800 --> 00:12:57,000
hit that beat frequency problem, where we're going to have problems of

298
00:12:57,000 --> 00:12:57,700
skipping a frame.

299
00:12:57,700 --> 00:12:59,600
As far as the monitors concerned and having the user.

300
00:12:59,600 --> 00:12:59,800
See

301
00:13:00,700 --> 00:13:03,300
Apparent change in animation speed.

302
00:13:04,400 --> 00:13:04,900
I'm sorry.

303
00:13:06,100 --> 00:13:10,200
I made, I made some homemade almond milk today and I didn't do a very

304
00:13:10,200 --> 00:13:10,600
good job.

305
00:13:10,600 --> 00:13:11,500
It's kind of rough.

306
00:13:11,800 --> 00:13:13,100
And it kind of scratches your throat.

307
00:13:13,100 --> 00:13:13,600
A little bit.

308
00:13:13,700 --> 00:13:14,500
I don't know how to fix that.

309
00:13:14,500 --> 00:13:15,100
Exactly.

310
00:13:15,400 --> 00:13:16,400
I got to think about it.

311
00:13:16,500 --> 00:13:18,100
I'm still new at making almond milk.

312
00:13:18,100 --> 00:13:19,800
So yeah, what you gonna do?

313
00:13:19,800 --> 00:13:21,000
It's not the store bought brand.

314
00:13:21,200 --> 00:13:22,300
So all right.

315
00:13:23,000 --> 00:13:25,900
Basically what I wanted to say about that is that there's a lot of

316
00:13:26,300 --> 00:13:29,400
talk now about variable refresh rate monitors and basically what those

317
00:13:29,400 --> 00:13:32,300
are monitors that can update at Whatever frequency you want for the

318
00:13:32,300 --> 00:13:33,100
most part.

319
00:13:33,400 --> 00:13:35,700
So basically what happens is whenever

320
00:13:35,900 --> 00:13:36,700
A frame is done.

321
00:13:36,700 --> 00:13:39,000
You just say display the frame, right?

322
00:13:39,500 --> 00:13:42,300
And so you might say, well, why do we care about any of this isn't

323
00:13:42,300 --> 00:13:45,600
isn't the future going to just be, you take, as long as you need to

324
00:13:45,600 --> 00:13:47,600
display the frame and then you display it.

325
00:13:47,600 --> 00:13:48,500
Isn't that fine?

326
00:13:48,800 --> 00:13:52,900
And I don't understand the attraction of that to me that just sounds.

327
00:13:52,900 --> 00:13:53,900
Absolutely awful.

328
00:13:53,900 --> 00:13:57,300
I do not understand why anyone would ever want such a monitor at all.

329
00:13:57,500 --> 00:14:01,100
And the reason that I say that is because I feel like it always forces

330
00:14:01,100 --> 00:14:05,700
you to be completely wrong with how you displayed your animation and

331
00:14:05,800 --> 00:14:10,200
The reason I say that is because imagine how the computation cycle

332
00:14:10,200 --> 00:14:13,600
goes on one of these variable frame rate monitors.

333
00:14:13,600 --> 00:14:14,800
Well, I come down here.

334
00:14:14,800 --> 00:14:15,400
Right?

335
00:14:15,400 --> 00:14:18,400
And I'm basically saying that I'm going to use a variable frame rate.

336
00:14:18,400 --> 00:14:22,000
So it looks something like this, you know, who knows what it looks

337
00:14:22,000 --> 00:14:22,200
like.

338
00:14:22,200 --> 00:14:23,700
Let's say it looks like that, right?

339
00:14:24,300 --> 00:14:25,700
So we've got something here.

340
00:14:26,000 --> 00:14:29,800
Let's say this is going to be, you know, something like 30

341
00:14:29,800 --> 00:14:30,600
milliseconds.

342
00:14:30,700 --> 00:14:32,400
This is going to be something like 16.

343
00:14:32,400 --> 00:14:33,900
This was like 20, right?

344
00:14:33,900 --> 00:14:35,500
And this was back to 30 again.

345
00:14:35,800 --> 00:14:38,200
We have a completely variable thing here.

346
00:14:38,700 --> 00:14:43,200
So what happens, we know that 30 milliseconds has elapsed.

347
00:14:43,200 --> 00:14:44,200
These are milliseconds here.

348
00:14:44,200 --> 00:14:46,800
We know that 30 milliseconds, has elapsed between here and here,

349
00:14:47,000 --> 00:14:47,600
right?

350
00:14:47,700 --> 00:14:48,900
Something was on the screen here.

351
00:14:48,900 --> 00:14:50,300
We don't know what it was, what we're saying.

352
00:14:50,300 --> 00:14:51,100
This is some point in time.

353
00:14:51,100 --> 00:14:52,900
So as with the previous frame, who knows what happened.

354
00:14:53,100 --> 00:14:54,900
So let's talk about starting here.

355
00:14:55,300 --> 00:14:59,900
Well, we know that the world updated 30 milliseconds between

356
00:15:00,000 --> 00:15:01,100
Here, right.

357
00:15:01,100 --> 00:15:03,600
We know that 30ml sense of Time Has Gone by.

358
00:15:03,800 --> 00:15:07,900
So we need to tell the physics engine for whatever frame is that we're

359
00:15:07,900 --> 00:15:09,800
going to display right here.

360
00:15:10,000 --> 00:15:13,600
We would want to tell it 30 milliseconds because there is a state of

361
00:15:13,600 --> 00:15:15,000
the world here, right?

362
00:15:15,000 --> 00:15:16,600
This is World State 0.

363
00:15:16,600 --> 00:15:20,500
This is World zero, and now we need to display a world State one,

364
00:15:20,600 --> 00:15:20,900
right?

365
00:15:20,900 --> 00:15:25,000
We want to render what the world looks like 30 milliseconds into the

366
00:15:25,000 --> 00:15:25,500
future.

367
00:15:25,900 --> 00:15:27,900
Okay, but there's a problem.

368
00:15:28,500 --> 00:15:29,800
We don't actually know.

369
00:15:30,000 --> 00:15:33,700
No this value yet because we have a variable frame rate monitor and

370
00:15:33,700 --> 00:15:34,900
we're going to flip whenever we're done.

371
00:15:34,900 --> 00:15:37,800
We have no idea what the 30 milliseconds is.

372
00:15:37,800 --> 00:15:41,000
And most of this time is usually rendering, like this is rendering

373
00:15:41,000 --> 00:15:42,300
right here, right?

374
00:15:42,500 --> 00:15:45,100
So, the physics happen somewhere in here.

375
00:15:45,300 --> 00:15:49,000
It's got to know right away before we even have any idea how long the

376
00:15:49,000 --> 00:15:49,500
framerate is.

377
00:15:49,500 --> 00:15:52,500
It's got to know how much to update the World by, how does it know to

378
00:15:52,500 --> 00:15:53,400
pick 30 milliseconds?

379
00:15:53,400 --> 00:15:56,400
Well, it doesn't so it probably looks at the previous frame for a

380
00:15:56,400 --> 00:15:56,900
guess.

381
00:15:57,100 --> 00:15:59,300
Well, if it looks at the previous frame, it's always going to be

382
00:15:59,300 --> 00:15:59,600
wrong.

383
00:15:59,600 --> 00:15:59,900
It's going.

384
00:16:00,000 --> 00:16:03,200
Get 30 milliseconds here, but surprise, this took 16 milliseconds.

385
00:16:03,300 --> 00:16:06,100
So, now you've got a world that appears to be moving twice as fast.

386
00:16:06,100 --> 00:16:07,600
Then we go here, we look in it.

387
00:16:07,600 --> 00:16:10,300
So it's actually turns out to be 20, but we thought it was going to be

388
00:16:10,300 --> 00:16:10,900
16.

389
00:16:11,000 --> 00:16:13,800
So this is actually a world that appears to be moving slightly slower,

390
00:16:13,900 --> 00:16:20,200
blah, blah, blah, right, so I do not understand, I don't, I do not get

391
00:16:20,200 --> 00:16:20,500
it.

392
00:16:20,700 --> 00:16:23,100
People who believe in this technology.

393
00:16:23,600 --> 00:16:27,300
Please feel free to write in and tell me what the attraction is

394
00:16:27,300 --> 00:16:29,800
because I do not see it at all as far.

395
00:16:29,900 --> 00:16:33,800
As I'm concerned you need to know what you expect your frame rate to

396
00:16:33,800 --> 00:16:37,900
be in the future and you need to guarantee that you're going to hit

397
00:16:37,900 --> 00:16:41,200
that framerate in order to get a smooth believable.

398
00:16:41,200 --> 00:16:42,400
Looking non hiccup.

399
00:16:42,400 --> 00:16:47,000
Be sort of Animation unless you just don't care, you know, and so this

400
00:16:47,000 --> 00:16:48,200
I think is very important.

401
00:16:48,400 --> 00:16:52,200
So what I would say is variable update monitors might be useful if

402
00:16:52,200 --> 00:16:55,800
your frame rate if you can guarantee your frame rate, but you happen

403
00:16:55,800 --> 00:16:57,900
to know, it's always 45 milliseconds.

404
00:16:57,900 --> 00:16:59,500
Let's say of course, that would be pretty bad.

405
00:16:59,500 --> 00:16:59,800
So, let's

406
00:17:00,000 --> 00:17:02,900
It's something like 20, you know, it's always 20 milliseconds.

407
00:17:03,100 --> 00:17:03,800
Well, that's fine.

408
00:17:03,800 --> 00:17:08,200
Then as long as you're fixing that rate but really a variable refresh

409
00:17:08,200 --> 00:17:11,200
rate monitor doesn't actually help you in during the course of your

410
00:17:11,200 --> 00:17:11,500
game.

411
00:17:11,500 --> 00:17:15,400
What you all you really can use is something that's essentially a

412
00:17:15,800 --> 00:17:18,200
fixed rate monitor where you can set the rate.

413
00:17:18,700 --> 00:17:22,500
And so that that I think is kind of mostly all I wanted to convey

414
00:17:22,500 --> 00:17:23,000
about that.

415
00:17:23,000 --> 00:17:27,800
I don't really understand the attraction of those things, much at all.

416
00:17:27,800 --> 00:17:29,800
And I think if anything, they're only good.

417
00:17:29,900 --> 00:17:31,600
Good because they allow games to run it.

418
00:17:31,600 --> 00:17:36,200
Other frame other fixed frame rates that aren't 30-60-90.

419
00:17:36,200 --> 00:17:39,600
Basically, maybe you can get, you know, you can use 70 or something,

420
00:17:40,000 --> 00:17:43,400
and you maybe you couldn't do that before in any realistic way.

421
00:17:43,800 --> 00:17:44,700
So I don't know.

422
00:17:45,900 --> 00:17:47,900
Just something to think about, want to get that out there.

423
00:17:48,300 --> 00:17:51,600
So maybe I'm maybe I'm thinking about the wrong way, but I, that

424
00:17:51,600 --> 00:17:54,000
that's always been my problem with that whole concept.

425
00:17:54,200 --> 00:17:59,800
So for me, whenever I do a game Loop and looking at timing stuff.

426
00:18:00,000 --> 00:18:04,200
I always want to have a Target frame rate and we try very hard to hit

427
00:18:04,200 --> 00:18:04,800
that frame rate.

428
00:18:04,800 --> 00:18:07,800
And if for some reason we're not hitting that framerate, we pick a new

429
00:18:07,900 --> 00:18:12,000
lower frame rate and we're always trying to stay fixed at whatever

430
00:18:12,000 --> 00:18:12,700
that framerate is.

431
00:18:12,700 --> 00:18:15,800
So if we're trying to run at 60 and we can't let 60 we drop down to 30

432
00:18:15,800 --> 00:18:16,900
or something like that.

433
00:18:17,000 --> 00:18:19,400
And again, maybe that's where, you know, these variable friends could

434
00:18:19,400 --> 00:18:19,700
come in.

435
00:18:19,700 --> 00:18:23,200
They allow us to change our fixed frame rate, but I never want the

436
00:18:23,200 --> 00:18:24,400
frame rate to be variable.

437
00:18:24,400 --> 00:18:28,300
I never ever ever want that because there's no way to actually make

438
00:18:28,300 --> 00:18:29,100
that work properly.

439
00:18:29,100 --> 00:18:29,800
Your physics is

440
00:18:30,000 --> 00:18:32,300
Is always wrong if you do that.

441
00:18:33,000 --> 00:18:37,100
So when I want to do is I want to make a frame Loop that basically

442
00:18:37,100 --> 00:18:40,700
obeys this sort of thing where it's going to fee.

443
00:18:40,700 --> 00:18:43,300
It's going to have an opinion about the frame rate.

444
00:18:43,300 --> 00:18:44,700
It can hit, right?

445
00:18:44,800 --> 00:18:48,300
So it knows how many milliseconds that is, will call that the target

446
00:18:48,300 --> 00:18:49,100
milliseconds.

447
00:18:49,200 --> 00:18:50,400
So we know what our Target.

448
00:18:50,400 --> 00:18:52,000
Ms is, right?

449
00:18:52,100 --> 00:18:53,100
The target Ms.

450
00:18:53,100 --> 00:18:55,800
Comes in to physics, updates the world, right?

451
00:18:55,800 --> 00:18:57,200
So we got our update here.

452
00:18:57,600 --> 00:18:59,000
It's the target Ms.

453
00:18:59,000 --> 00:18:59,800
Drives our update.

454
00:19:00,200 --> 00:19:04,500
We do our render, and then we do our page flip of that render, right?

455
00:19:04,500 --> 00:19:08,800
As a close to the boundary of the target milliseconds as we can write,

456
00:19:08,800 --> 00:19:12,400
then we do the same thing over again for the next thing.

457
00:19:12,500 --> 00:19:14,700
And now this may be pipelined.

458
00:19:14,800 --> 00:19:19,100
So remember this may go off to a GPU or something, which actually

459
00:19:19,100 --> 00:19:22,000
delays everything by a frame, while it chews, through it, or whatever.

460
00:19:22,100 --> 00:19:22,700
That's fine.

461
00:19:22,700 --> 00:19:27,300
As long as we are, always pushing it at a synchronous thing and we set

462
00:19:27,300 --> 00:19:29,600
it to synchronize say, with the with the, with the

463
00:19:30,000 --> 00:19:34,100
Blank or whatever, that the monitor refresh will still be just fine.

464
00:19:34,100 --> 00:19:38,200
As long as we always know that we're updating with a particular Target

465
00:19:38,200 --> 00:19:41,800
in mind and that Target matches our flip rate.

466
00:19:41,800 --> 00:19:43,500
And that is what we're trying to do.

467
00:19:43,500 --> 00:19:44,700
Now, for the audio.

468
00:19:44,700 --> 00:19:47,200
We have a slight other problem here.

469
00:19:47,200 --> 00:19:51,600
The problem with the audio is ideally what we'd like to do is feed

470
00:19:51,600 --> 00:19:54,700
just exactly the amount of audio that we need every frame.

471
00:19:54,700 --> 00:20:00,000
But if we do that, we do run the risk of if we miss like let's say

472
00:20:00,000 --> 00:20:04,400
Say we missed a for our 30 millisecond time, right?

473
00:20:04,400 --> 00:20:07,200
So we actually missed and we're going to have a frame lag.

474
00:20:07,300 --> 00:20:09,200
Well our audio would skip here.

475
00:20:09,600 --> 00:20:13,200
So we have two choices because you know, we basically need to make

476
00:20:13,200 --> 00:20:14,200
sure the audio is always there.

477
00:20:14,200 --> 00:20:14,800
On time.

478
00:20:14,800 --> 00:20:18,100
We have two choices, always get the audio there on time.

479
00:20:18,100 --> 00:20:18,400
Meaning.

480
00:20:18,400 --> 00:20:21,900
Our frame rate is a hard constraint and we've basically written the

481
00:20:21,900 --> 00:20:23,900
game to never miss framerate.

482
00:20:25,400 --> 00:20:29,900
The other one is always feed the audio somewhat further ahead.

483
00:20:30,200 --> 00:20:33,500
And there's two methods of doing this one method is just too, like to

484
00:20:33,500 --> 00:20:35,400
be a frame of lag off, right?

485
00:20:35,400 --> 00:20:39,200
Or something or half a frame of lag off, right, in order to handle a

486
00:20:39,200 --> 00:20:40,100
whole frame, miss.

487
00:20:40,300 --> 00:20:43,400
You kind of got to be a whole frame of audio ahead.

488
00:20:43,500 --> 00:20:43,900
Right?

489
00:20:43,900 --> 00:20:47,400
So that would incur 16 milliseconds or 30 milliseconds, depending on

490
00:20:47,400 --> 00:20:48,200
the frame rate.

491
00:20:48,400 --> 00:20:50,100
This is at 60 hertz.

492
00:20:50,200 --> 00:20:51,900
And this is at 30 Hertz.

493
00:20:51,900 --> 00:20:54,800
I should probably start saying 17, because it's really, it's

494
00:20:54,900 --> 00:20:56,200
86 repeating, right?

495
00:20:56,300 --> 00:20:59,800
It's 1,000 divided by 60, but

496
00:21:00,000 --> 00:21:04,800
What I mean, when I say 16, its code word for Seventeen, sixteen and a

497
00:21:04,800 --> 00:21:06,800
half, whatever, you know what I'm saying?

498
00:21:07,100 --> 00:21:13,100
Anyway, basically what happens here is I'm introducing audio latency,

499
00:21:13,100 --> 00:21:16,200
so I could try to reduce that, audio latency by doing one of two

500
00:21:16,200 --> 00:21:16,800
things.

501
00:21:16,900 --> 00:21:22,100
One thing I can do is always feed two frames of audio, but when I do

502
00:21:22,100 --> 00:21:25,500
hit my target, when I do find that I wake up and I've got plenty of

503
00:21:25,500 --> 00:21:27,700
time to update the audio, so I'm here and I go.

504
00:21:27,700 --> 00:21:27,900
Okay.

505
00:21:27,900 --> 00:21:29,800
I got plenty time to update the audio up.

506
00:21:30,000 --> 00:21:34,400
Update it as overwrite the old stuff that I wrote.

507
00:21:34,400 --> 00:21:34,900
Right?

508
00:21:34,900 --> 00:21:39,900
So basically always always give it an extra frame, but don't use that

509
00:21:39,900 --> 00:21:40,400
extra frame.

510
00:21:40,400 --> 00:21:41,200
If we have time.

511
00:21:41,200 --> 00:21:42,900
We'll just Splat a new one, right?

512
00:21:42,900 --> 00:21:44,000
That's one way of doing it.

513
00:21:44,400 --> 00:21:50,300
Another way of doing it is like I said to just always actually write

514
00:21:50,300 --> 00:21:54,600
one whole frame ahead and a final way of doing it would be to have

515
00:21:54,600 --> 00:21:58,000
like a thread or something that sitting there waiting.

516
00:21:58,100 --> 00:21:59,900
And it looks to see if we've updated

517
00:22:00,000 --> 00:22:01,700
Did by, like right here.

518
00:22:02,400 --> 00:22:06,400
And if we haven't it emergency flushes another frame of audio, right?

519
00:22:06,400 --> 00:22:08,200
So, it's kind of like a guard, right?

520
00:22:08,200 --> 00:22:09,800
So we got, we got a couple options.

521
00:22:10,100 --> 00:22:12,000
We've basically got one always hit.

522
00:22:12,200 --> 00:22:14,500
You know, we've got always hit the frame rate.

523
00:22:14,700 --> 00:22:21,200
We've got overwrite the frame, overwrite the next frame.

524
00:22:23,100 --> 00:22:24,800
We've got a frame of lag.

525
00:22:26,200 --> 00:22:28,100
And we've got a guard thread.

526
00:22:29,600 --> 00:22:30,800
And there maybe even other methods.

527
00:22:30,800 --> 00:22:33,500
Those are just the ones that I happen to know about and have ever seen

528
00:22:33,500 --> 00:22:34,700
used or use myself.

529
00:22:36,200 --> 00:22:42,400
So I'm not 100% certain that I can honestly argue directly for any one

530
00:22:42,400 --> 00:22:43,600
of these in particular.

531
00:22:44,300 --> 00:22:45,700
It's kind of hard to say.

532
00:22:46,600 --> 00:22:50,600
I think the one that I would rather go with because it's simpler and

533
00:22:50,600 --> 00:22:55,000
enforces, sort of a little bit of discipline would just be going with

534
00:22:55,000 --> 00:22:55,300
option.

535
00:22:55,300 --> 00:22:59,200
1 Option, 1 is the easiest option is to always hit your framerate,

536
00:22:59,200 --> 00:22:59,700
right?

537
00:23:00,000 --> 00:23:03,800
And one of the things that's interesting about that that I like is I

538
00:23:03,800 --> 00:23:05,400
like the mentality of saying

539
00:23:05,600 --> 00:23:09,100
This game has to hit its frame rate instead of just allowing it, like

540
00:23:09,100 --> 00:23:12,300
oh it kind of got slow sometimes when we don't want to optimize the

541
00:23:12,300 --> 00:23:15,300
when the explosion happens or whatever and it gets slow.

542
00:23:15,400 --> 00:23:18,700
So just let it get slow there and will compensate by having the frame

543
00:23:18,700 --> 00:23:21,000
rate looks crappy, but the audio doesn't skip.

544
00:23:21,000 --> 00:23:22,500
So we're happy, right?

545
00:23:22,900 --> 00:23:23,900
I don't love that.

546
00:23:24,100 --> 00:23:28,300
I feel like if we write a game and the user is being reasonable.

547
00:23:28,300 --> 00:23:30,700
So they're playing our game and not running like another game in the

548
00:23:30,700 --> 00:23:33,800
background or something, where they deserve to hear some audio skips

549
00:23:33,800 --> 00:23:34,800
if that's where they're going.

550
00:23:35,600 --> 00:23:38,100
I would prefer kind of to say, we always said our frame rate.

551
00:23:38,100 --> 00:23:39,700
So, you know, we target 30 Hertz.

552
00:23:39,700 --> 00:23:42,000
Let's say, and we always get there.

553
00:23:42,100 --> 00:23:45,100
And if we don't hit 30 Hertz, then that means we have to optimize

554
00:23:45,100 --> 00:23:45,600
whatever it is.

555
00:23:45,600 --> 00:23:47,400
It's making us not hit 30 Hertz.

556
00:23:48,000 --> 00:23:49,800
So I'm tempted to go with this one first.

557
00:23:49,800 --> 00:23:52,100
I think that might be which one I go with first, but I wanted to

558
00:23:52,100 --> 00:23:55,300
mention these other ones because maybe we'll have to switch to them.

559
00:23:55,300 --> 00:23:58,600
If we find that we run satisfied with what I'm talking about here.

560
00:23:59,300 --> 00:23:59,800
Or

561
00:24:00,100 --> 00:24:06,000
You may choose when you're implementing this basically, to, to go with

562
00:24:06,000 --> 00:24:09,100
a different option because you care about different things, because

563
00:24:09,600 --> 00:24:10,800
many things in programming.

564
00:24:11,300 --> 00:24:12,800
There's not a right answer.

565
00:24:12,900 --> 00:24:17,500
They're simply a question of your priorities and those priorities will

566
00:24:17,500 --> 00:24:20,800
lead you to, to make a certain decision or a different decision.

567
00:24:21,000 --> 00:24:23,700
And it you can't really say that the decision was wrong or right, you

568
00:24:23,700 --> 00:24:29,000
could only say if it was wrong or right based with respect to some

569
00:24:29,000 --> 00:24:29,800
priority system.

570
00:24:30,000 --> 00:24:30,900
Oh, so, there you go.

571
00:24:30,900 --> 00:24:32,200
Hopefully, that makes some sense.

572
00:24:35,900 --> 00:24:38,300
So, we need to do a couple things that were not doing right now.

573
00:24:38,900 --> 00:24:40,200
In order to make this happen.

574
00:24:40,500 --> 00:24:43,200
The first thing that we're going to have to do is we have to figure

575
00:24:43,200 --> 00:24:48,500
out some way of knowing or at least getting some idea of what the

576
00:24:48,500 --> 00:24:52,700
monitor refresh rate, even is because we want to run at that refresh

577
00:24:52,700 --> 00:24:53,200
rate.

578
00:24:53,500 --> 00:24:58,800
And so we kind of have to go ahead and take a look at at ways to

579
00:24:58,800 --> 00:25:01,800
figure out what the refresh rate is of the monitor that were actually

580
00:25:01,800 --> 00:25:03,200
using now to be

581
00:25:03,300 --> 00:25:06,300
Honest, I haven't done this in a long time, and I did write down some

582
00:25:06,300 --> 00:25:10,200
notes about how I used to do it, but it's going to be a little dicey.

583
00:25:10,200 --> 00:25:15,000
And the reason for that is I don't really know all the stuff that

584
00:25:15,000 --> 00:25:21,700
happens essentially, with sort of with multiple monitor scenarios.

585
00:25:21,800 --> 00:25:25,900
So, if you take a look, basically, here's the, here's the thing that I

586
00:25:25,900 --> 00:25:31,300
was thinking about can actually see get monitor refresh rate.

587
00:25:32,000 --> 00:25:33,100
Let's just take a look here.

588
00:25:33,500 --> 00:25:36,100
Where is our msdn msdn?

589
00:25:36,100 --> 00:25:36,300
Here?

590
00:25:36,300 --> 00:25:36,800
It is.

591
00:25:37,000 --> 00:25:38,000
Let's take a look here.

592
00:25:38,700 --> 00:25:43,400
I'm pretty sure that some of these are just not actually well.

593
00:25:43,400 --> 00:25:44,800
Okay, this this might work.

594
00:25:45,000 --> 00:25:47,500
So this might actually work because it does take the HDC.

595
00:25:47,500 --> 00:25:50,600
So we'd be able to pass our Windows device context handle.

596
00:25:51,200 --> 00:25:55,100
And let's see if this is going to be something that we think is a

597
00:25:55,200 --> 00:25:56,300
reliable value.

598
00:25:56,400 --> 00:25:58,400
I don't actually know if it is or not, but we can sort of see.

599
00:25:58,700 --> 00:26:00,000
So here we go.

600
00:26:00,000 --> 00:26:02,900
The current vertical, refresh rate of the device in cycles per

601
00:26:03,300 --> 00:26:09,100
And so basically this, yeah, a vertical refresh rate value of 0 or 1

602
00:26:09,100 --> 00:26:11,900
represents the display Hardware as default refresh rate.

603
00:26:12,000 --> 00:26:13,700
So that's not really useful.

604
00:26:13,700 --> 00:26:13,900
Right?

605
00:26:13,900 --> 00:26:15,100
That's not going to tell us.

606
00:26:15,100 --> 00:26:19,300
We actually need it to say something like 60 or something like that.

607
00:26:19,300 --> 00:26:22,000
That's if it's if it's just going to tell us if it's just going to

608
00:26:22,000 --> 00:26:23,000
tell us something nonsense.

609
00:26:23,000 --> 00:26:25,800
He like that that's not going to help us so we can enumerate.

610
00:26:25,900 --> 00:26:27,500
We can also enumerate the monitors.

611
00:26:27,500 --> 00:26:28,800
Try to find it from there.

612
00:26:28,900 --> 00:26:30,200
I'm not entirely sure.

613
00:26:31,200 --> 00:26:32,100
I'm not entirely sure.

614
00:26:32,100 --> 00:26:33,100
What the best way to do it is

615
00:26:33,300 --> 00:26:37,400
Day, is this is this is a good question, and I'm not super prepared to

616
00:26:37,500 --> 00:26:38,300
to answer it.

617
00:26:38,300 --> 00:26:38,900
So.

618
00:26:40,800 --> 00:26:42,600
Yeah, yeah, I don't know.

619
00:26:44,300 --> 00:26:46,900
I don't usually trust the stack Overflow answers.

620
00:26:46,900 --> 00:26:48,600
I found them to be wrong a lot of time.

621
00:26:48,800 --> 00:26:52,400
So I don't tend to look at these very often and this doesn't look

622
00:26:52,400 --> 00:26:54,300
particularly convincing here either.

623
00:26:54,400 --> 00:26:55,000
So I don't know.

624
00:26:55,000 --> 00:26:58,100
I'm gonna go ahead and say that I'm just going to do.

625
00:26:58,300 --> 00:26:59,800
I'm just going to go with the numbing the monitor.

626
00:27:00,200 --> 00:27:03,500
This is the kind of thing that I do nowadays and I haven't really

627
00:27:03,500 --> 00:27:05,400
played around with refresh rates too much.

628
00:27:05,600 --> 00:27:06,800
But I just want to kind of.

629
00:27:07,500 --> 00:27:11,400
I feel like this might be the most useful way to go because I think

630
00:27:11,400 --> 00:27:13,500
this will probably give us a way to get it.

631
00:27:13,500 --> 00:27:14,500
So I'm going to take a look at this.

632
00:27:14,500 --> 00:27:17,500
Basically, anytime display monitors is the thing that allows us to see

633
00:27:18,500 --> 00:27:22,400
basically, all of the things in the system that are monitors, that can

634
00:27:22,400 --> 00:27:23,200
be explained graphics.

635
00:27:23,200 --> 00:27:27,400
And I believe we can do a pretty easy way to actually get the one that

636
00:27:27,400 --> 00:27:28,500
we're on as well.

637
00:27:28,500 --> 00:27:29,900
So, let me take a look at this, then.

638
00:27:30,000 --> 00:27:33,000
We call get monitor, we can call, get monitor info on those, and I

639
00:27:33,000 --> 00:27:38,000
believe that sort of thing will be able to allow us to ask for stuff

640
00:27:38,000 --> 00:27:38,900
about the refresh rate.

641
00:27:38,900 --> 00:27:43,300
I'm not actually sure that that's actually true, but I think it might

642
00:27:43,300 --> 00:27:43,600
be.

643
00:27:43,600 --> 00:27:46,600
So let's take a look here, monitor info.

644
00:27:47,600 --> 00:27:51,100
Yeah, we can see still not still not the case.

645
00:27:51,100 --> 00:27:55,200
Let's see, get refresh rate of H monitor because I really like to be

646
00:27:55,200 --> 00:27:59,500
able to do it from here if possible, because I just don't, I just

647
00:27:59,500 --> 00:27:59,900
don't accept.

648
00:28:00,000 --> 00:28:02,200
We trust the other thing.

649
00:28:02,300 --> 00:28:05,900
Yeah, so you can, I don't know.

650
00:28:06,100 --> 00:28:06,500
I'm sorry.

651
00:28:06,500 --> 00:28:07,700
I'm having in hauling so much here.

652
00:28:07,700 --> 00:28:10,200
I just a lot of times these things are pretty crazy.

653
00:28:10,200 --> 00:28:13,700
So, basically, excuse me.

654
00:28:14,000 --> 00:28:18,900
It looks like the, this device mode structure here would actually tell

655
00:28:18,900 --> 00:28:19,700
us what it is.

656
00:28:19,700 --> 00:28:20,400
We want to know.

657
00:28:20,400 --> 00:28:25,500
So, let's just see if we can get one of those relatively easily from

658
00:28:25,500 --> 00:28:27,500
from the Monitor and whether that gives us back.

659
00:28:27,500 --> 00:28:29,800
I'll just test it, whether it gives us back.

660
00:28:29,900 --> 00:28:32,500
At the actual information that we want.

661
00:28:32,500 --> 00:28:34,200
It looks like it probably would.

662
00:28:34,400 --> 00:28:35,700
So let's take a look here.

663
00:28:37,400 --> 00:28:39,900
This height display frequency, right?

664
00:28:39,900 --> 00:28:41,200
So is that Define?

665
00:28:41,200 --> 00:28:44,700
Let's see what msdn says again, msdn can definitely be wrong, but it's

666
00:28:44,700 --> 00:28:46,000
usually my first go-to.

667
00:28:46,400 --> 00:28:50,500
I trust it more than stackoverflow anyway, so, let's take a look here,

668
00:28:50,500 --> 00:28:51,600
frequency.

669
00:28:52,300 --> 00:28:57,600
What that basically says is this value is also known by blah blah.

670
00:28:57,600 --> 00:28:59,800
When you call this, the summe return with

671
00:29:00,800 --> 00:29:02,500
What is with this zero and one thing?

672
00:29:03,500 --> 00:29:07,600
Well, alright, I guess, I'm not sure what way I can really

673
00:29:07,600 --> 00:29:10,500
definitively say what the monitor refresh time.

674
00:29:10,500 --> 00:29:11,300
Actually, is.

675
00:29:11,300 --> 00:29:13,700
It does not seem to be something that's worth coming.

676
00:29:15,300 --> 00:29:16,400
So, I don't know.

677
00:29:16,400 --> 00:29:21,600
That's, that's kind of, that's kind of disappointing to me normally.

678
00:29:21,600 --> 00:29:22,800
So I mean, just to be clear.

679
00:29:22,800 --> 00:29:25,600
The reason that this doesn't normally come up, is normally what

680
00:29:25,600 --> 00:29:29,800
happens in opengl and direct3d is you set them into a mode.

681
00:29:29,900 --> 00:29:32,100
Where they flip on the monitor refresh.

682
00:29:32,100 --> 00:29:35,600
Anyway, so when you do that, all you have to do to figure out what

683
00:29:35,600 --> 00:29:37,400
your refresh rate is, is time.

684
00:29:37,400 --> 00:29:40,400
How long it takes to flip in one of those two things and then you

685
00:29:40,400 --> 00:29:42,300
roughly know what the graphics card is doing.

686
00:29:42,900 --> 00:29:45,600
That's pretty straightforward, and not that difficult.

687
00:29:45,700 --> 00:29:48,600
But in this case, if we actually want to know because we're doing the

688
00:29:48,600 --> 00:29:50,500
flip, we're doing the blind ourselves.

689
00:29:51,100 --> 00:29:53,200
So we don't really have that freedom.

690
00:29:53,300 --> 00:29:57,800
The way you would use to do, it is with direct draw, but direct draw

691
00:29:57,800 --> 00:29:59,300
is kind of old and deprecated.

692
00:29:59,300 --> 00:29:59,700
I don't know.

693
00:29:59,700 --> 00:29:59,800
We

694
00:30:00,000 --> 00:30:04,100
Try to do it director, aw, get vertical refresh.

695
00:30:04,200 --> 00:30:06,200
This is the way that I used to do it in the old days.

696
00:30:06,200 --> 00:30:07,700
We could we could try to do it.

697
00:30:07,800 --> 00:30:13,100
I don't actually know whether that will be sort of whether that will

698
00:30:13,100 --> 00:30:15,100
actually be accurate though.

699
00:30:15,100 --> 00:30:17,800
When we ask for a particular monitors, vertical refresh.

700
00:30:17,800 --> 00:30:20,300
So, let's see what it actually says here.

701
00:30:20,300 --> 00:30:21,300
I don't know what this is.

702
00:30:21,300 --> 00:30:22,700
This is some crazy stuff here.

703
00:30:23,900 --> 00:30:25,300
Let's see anything.

704
00:30:25,300 --> 00:30:26,800
Particularly interesting here.

705
00:30:28,000 --> 00:30:28,700
No, this.

706
00:30:28,700 --> 00:30:29,800
This looks totally that.

707
00:30:30,000 --> 00:30:31,400
Looks totally off the rails.

708
00:30:32,100 --> 00:30:35,200
This is the msdn page but it's for the flip call.

709
00:30:35,300 --> 00:30:38,400
So I don't actually know if that's something particularly useful and

710
00:30:38,400 --> 00:30:39,800
it's Windows mobile.

711
00:30:39,900 --> 00:30:41,100
So that's not going to do it.

712
00:30:41,500 --> 00:30:42,100
Yeah, I don't know.

713
00:30:42,100 --> 00:30:45,400
This may be after something we'll have to save for tomorrow and we'll

714
00:30:45,400 --> 00:30:46,900
just have to put in the value.

715
00:30:47,100 --> 00:30:51,000
I'll go look at my old code that uses direct draw and we can try it

716
00:30:51,400 --> 00:30:56,000
unless there's some better way to do it that we can find because we

717
00:30:56,000 --> 00:30:59,600
can't really if we can't rely on, one of these things to not give us

718
00:30:59,600 --> 00:30:59,800
back.

719
00:31:00,000 --> 00:31:04,800
R1, I'm not sure what we can really do because if you look at like I

720
00:31:04,800 --> 00:31:07,200
don't know if we look at this code, it doesn't look, particularly.

721
00:31:08,300 --> 00:31:09,700
It doesn't look particularly useful.

722
00:31:09,700 --> 00:31:11,300
There's really nothing you can do there.

723
00:31:12,400 --> 00:31:13,100
The default.

724
00:31:13,100 --> 00:31:16,800
Refresh rate is not something that that seems to be defined anywhere.

725
00:31:17,500 --> 00:31:23,600
So anyway, excuse me, we'll have to tackle that tomorrow, I guess and

726
00:31:23,600 --> 00:31:25,700
I'll just I guess I'll do the direct.

727
00:31:25,700 --> 00:31:27,400
I'll guess I'll do the direct 3D version.

728
00:31:27,500 --> 00:31:29,100
I'm sorry, the director all version.

729
00:31:29,400 --> 00:31:29,800
I don't know what.

730
00:31:29,900 --> 00:31:31,100
Well, so that's not the command prompt.

731
00:31:31,100 --> 00:31:31,400
We won't.

732
00:31:31,400 --> 00:31:33,000
We have our own custom command prompt.

733
00:31:33,100 --> 00:31:33,600
There we go.

734
00:31:33,900 --> 00:31:34,800
Well, that's disappointing.

735
00:31:34,800 --> 00:31:37,500
I was hoping that there would be an easy way to get it but it looks

736
00:31:37,500 --> 00:31:41,200
like there isn't that's the that's the sad State sometimes of

737
00:31:41,200 --> 00:31:42,100
operating systems something.

738
00:31:42,100 --> 00:31:43,300
Like getting them on to refresh rate.

739
00:31:43,300 --> 00:31:44,500
Should be just like one call.

740
00:31:44,500 --> 00:31:47,200
You're like, here's though, the monitor I'm on, tell me what the

741
00:31:47,200 --> 00:31:49,600
refresh rate is and it should guarantee to give you back the refresh

742
00:31:49,600 --> 00:31:50,000
rate.

743
00:31:50,600 --> 00:31:54,000
And I do not know how we get into situations, where that is.

744
00:31:54,000 --> 00:31:57,800
Not the, the sort of the standard thing to happen.

745
00:31:57,800 --> 00:31:59,400
But you know, what do you do?

746
00:31:59,500 --> 00:31:59,800
That's

747
00:32:00,600 --> 00:32:01,300
That's just life.

748
00:32:01,300 --> 00:32:02,900
As a programmer in the platform layer.

749
00:32:03,000 --> 00:32:05,300
It's one of the reasons will be very happy to get off the platform

750
00:32:05,300 --> 00:32:06,300
layer next week.

751
00:32:06,300 --> 00:32:08,100
So we don't have to deal with stuff like this.

752
00:32:08,200 --> 00:32:10,600
Alright, so basically we're going to have to do is we're going to have

753
00:32:10,600 --> 00:32:13,100
to assume that we make up a refresh rate.

754
00:32:13,100 --> 00:32:15,500
And so for now we'll just call it will say that there's a refresh rate

755
00:32:15,500 --> 00:32:21,800
up here, will say that this is a refresh or monitor refresh Kurtz and

756
00:32:21,800 --> 00:32:23,800
that will be just 64 now, right?

757
00:32:23,800 --> 00:32:26,100
So we'll just say it's 60 refreshes per second.

758
00:32:29,800 --> 00:32:39,300
And we'll say to do, how do we reliably query this on Windows?

759
00:32:39,500 --> 00:32:43,500
Because we don't know maybe directdraw is still the way to do it which

760
00:32:43,500 --> 00:32:46,500
would be kind of scary because directdraw is deprecated.

761
00:32:47,100 --> 00:32:48,800
So that would that would not be my preference.

762
00:32:48,800 --> 00:32:49,600
But what do you do?

763
00:32:49,800 --> 00:32:50,400
All right.

764
00:32:50,400 --> 00:32:53,300
So then what we can do is from that we can compute some synthetic

765
00:32:53,300 --> 00:32:54,100
values, right?

766
00:32:54,600 --> 00:32:59,100
We know that from that, we can compute, how much time we

767
00:32:59,500 --> 00:32:59,800
to go.

768
00:33:00,800 --> 00:33:02,800
In seconds for every frame.

769
00:33:03,100 --> 00:33:07,900
So basically, the seconds elapsed per frame, right?

770
00:33:08,000 --> 00:33:13,200
Is going to be the MS, 1,000 milliseconds per frame /, that monitor

771
00:33:13,200 --> 00:33:15,100
refresh hurt hurts, right?

772
00:33:15,200 --> 00:33:18,100
That's going to give us how many seconds are elapsed every frame.

773
00:33:18,300 --> 00:33:23,600
So, I guess the other thing we should say is we need we have a game

774
00:33:24,000 --> 00:33:25,700
update hurts as well.

775
00:33:25,800 --> 00:33:26,000
Right?

776
00:33:26,000 --> 00:33:28,800
And I sort of was saying that we probably don't want it to be the

777
00:33:28,800 --> 00:33:29,900
monitor refresh rate because

778
00:33:30,000 --> 00:33:33,000
we're going to not probably hit 60 when we're doing software

779
00:33:33,000 --> 00:33:33,400
rendering.

780
00:33:33,400 --> 00:33:37,600
So maybe let's say this is 30 as well and basically will derive this

781
00:33:37,600 --> 00:33:40,600
from this once we actually get to some place where we can get this

782
00:33:40,600 --> 00:33:41,000
value.

783
00:33:41,000 --> 00:33:43,900
So, you know for now we'll say it's that divided by 2 or something

784
00:33:43,900 --> 00:33:44,500
like that.

785
00:33:44,500 --> 00:33:48,000
So really the second laps per frame is actually going to be our games

786
00:33:48,000 --> 00:33:51,600
update hurts because we'll probably be only flipping every other time.

787
00:33:52,200 --> 00:33:55,100
So that's how much we want to actually have elapsed.

788
00:33:55,300 --> 00:33:59,600
So the first thing we need to do is actually measure this which we

789
00:33:59,600 --> 00:33:59,800
already

790
00:34:00,000 --> 00:34:04,600
Put in the basis of and then we want to actually wait until we get to

791
00:34:04,600 --> 00:34:06,100
the point where we're at.

792
00:34:06,100 --> 00:34:09,199
This this time elapsed and then we can go ahead.

793
00:34:10,500 --> 00:34:16,000
And sort of delay, if you will, our page flip to just the right time.

794
00:34:16,000 --> 00:34:19,600
So that we get, you know, 60 frames a second, or when this case, 30

795
00:34:19,600 --> 00:34:20,000
frames/second.

796
00:34:20,000 --> 00:34:21,500
Whatever our game updates, Hertz is.

797
00:34:21,699 --> 00:34:24,500
So, what we want to do is down here somewhere, right?

798
00:34:25,000 --> 00:34:26,500
After we've done everything.

799
00:34:26,600 --> 00:34:28,000
Remember, we have a thing.

800
00:34:28,000 --> 00:34:30,800
We already kind of puts a thing in here, where we query, performance

801
00:34:30,800 --> 00:34:31,199
counter.

802
00:34:32,800 --> 00:34:36,000
So, we know how much time has elapsed, and we were printing that out

803
00:34:36,000 --> 00:34:37,699
before we were printing that out right here.

804
00:34:38,000 --> 00:34:40,199
So, we basically have a value

805
00:34:40,400 --> 00:34:43,600
Which is the counter elapsed and we actually did the milliseconds per

806
00:34:43,600 --> 00:34:44,600
frame thing here.

807
00:34:45,000 --> 00:34:47,699
And so what we want to do here is change up what we're doing a little

808
00:34:47,699 --> 00:34:48,199
bit.

809
00:34:48,400 --> 00:34:54,400
What we want to do here is say how much time has actually elapsed so

810
00:34:54,400 --> 00:34:55,100
far, right?

811
00:34:55,100 --> 00:34:59,800
So seconds, elapsed for compute basically for work.

812
00:34:59,900 --> 00:35:01,700
Let's say how much we actually had to do.

813
00:35:02,500 --> 00:35:03,800
And we know what that value is.

814
00:35:03,800 --> 00:35:04,800
That's this right here.

815
00:35:05,100 --> 00:35:06,600
So we're going to go ahead and do that.

816
00:35:06,600 --> 00:35:08,800
And that's just this particular thing.

817
00:35:08,800 --> 00:35:10,100
We don't actually care about this.

818
00:35:10,400 --> 00:35:13,800
The 32-bit - I'm sorry, the 64-bit nice of that because we've already

819
00:35:13,800 --> 00:35:14,600
done the subtract.

820
00:35:14,600 --> 00:35:15,500
So that's all good.

821
00:35:15,500 --> 00:35:19,700
So once we do that, we basically have and we don't need the Thousand

822
00:35:19,700 --> 00:35:22,000
anymore because that's that was to compute milliseconds.

823
00:35:22,000 --> 00:35:26,000
So really all we need to do is divide the time that elapsed by the

824
00:35:26,000 --> 00:35:29,600
frequency of that of our account of our clock of that Windows reported

825
00:35:29,600 --> 00:35:30,300
for our clock.

826
00:35:30,400 --> 00:35:34,500
And that will give us back how many seconds elapsed during the work

827
00:35:34,500 --> 00:35:36,700
that we did for our frame right.

828
00:35:36,700 --> 00:35:36,800
Now.

829
00:35:36,800 --> 00:35:39,800
What's going to happen here is that's going to be different.

830
00:35:40,300 --> 00:35:44,300
And the other value, the value that we basically computed up here,

831
00:35:44,600 --> 00:35:47,400
which is how much s we want to elapse for frame.

832
00:35:47,400 --> 00:35:50,000
So this is the second slept for frame Target and we could actually

833
00:35:50,000 --> 00:35:53,800
call that Target s laps per frame or Target seconds per frame.

834
00:35:53,800 --> 00:35:54,400
Something like that.

835
00:35:54,400 --> 00:35:54,900
Right?

836
00:35:55,400 --> 00:35:59,200
So we have a Target second per frame that we're going to see like

837
00:35:59,200 --> 00:35:59,800
basically how much

838
00:36:00,100 --> 00:36:01,500
Time we have left.

839
00:36:01,600 --> 00:36:05,300
So assuming we're always trying to be under it, right.

840
00:36:08,500 --> 00:36:13,900
So we're assuming that we essentially have, we almost want to have

841
00:36:13,900 --> 00:36:15,200
sort of a while loop here.

842
00:36:15,900 --> 00:36:16,400
Right?

843
00:36:16,500 --> 00:36:19,600
We want to kind of say, while the seconds elapsed.

844
00:36:21,200 --> 00:36:22,100
We could even think.

845
00:36:22,600 --> 00:36:22,800
Yeah.

846
00:36:22,800 --> 00:36:24,700
In fact, I might change it back to so far because we could just go

847
00:36:24,700 --> 00:36:28,100
ahead and do, you know what?

848
00:36:28,100 --> 00:36:29,400
Because we're going to put that up their mind.

849
00:36:29,400 --> 00:36:30,200
I'm Gonna Save it that way.

850
00:36:30,200 --> 00:36:30,800
That was good.

851
00:36:30,900 --> 00:36:35,200
So I'm going to do seconds, elapsed for frame, right?

852
00:36:35,200 --> 00:36:38,200
And we'll start that off by saying we're going to actually

853
00:36:38,400 --> 00:36:40,100
Be doing this, this query performance counter.

854
00:36:40,100 --> 00:36:42,500
We're going to be doing this actually inside a loop.

855
00:36:42,500 --> 00:36:44,500
So we're going to take a look at the seconds left for work.

856
00:36:44,500 --> 00:36:46,600
We're going to say that we're going to start with that and we're going

857
00:36:46,600 --> 00:36:51,000
here and say if the seconds a lap for frame is less than what we

858
00:36:51,000 --> 00:36:51,900
actually wanted.

859
00:36:51,900 --> 00:36:54,100
So if it's less than the Target, right?

860
00:36:54,100 --> 00:36:58,500
Then we're going to take some action to basically, make sure that we

861
00:36:58,500 --> 00:37:00,800
are not going too fast.

862
00:37:00,800 --> 00:37:02,900
So we're basically going to going to slow things down.

863
00:37:03,300 --> 00:37:05,900
So the first thing we can do and this is just the CPU.

864
00:37:05,900 --> 00:37:08,200
Melting version is, we can just do this.

865
00:37:08,300 --> 00:37:09,600
This again, right?

866
00:37:09,600 --> 00:37:13,000
We can just go ahead and and and full-on do this sort of thing.

867
00:37:13,100 --> 00:37:15,800
Now, you can see that this is gonna start to get messy if I keep doing

868
00:37:15,800 --> 00:37:19,400
something like this, where I keep, you know, I keep checking and

869
00:37:19,400 --> 00:37:20,300
checking in checking.

870
00:37:21,400 --> 00:37:23,400
So we're going to probably want to pull this out and utility function.

871
00:37:23,400 --> 00:37:25,200
But for now, we should probably be fine.

872
00:37:25,200 --> 00:37:28,200
So what we'll do is we'll just keep getting the end counter over and

873
00:37:28,200 --> 00:37:28,600
over.

874
00:37:28,700 --> 00:37:31,400
We'll look at the counter elapsed and then will basically do the

875
00:37:31,400 --> 00:37:31,700
seconds.

876
00:37:31,700 --> 00:37:35,500
Elapsed for frame computation will just do it inside this Loop, right?

877
00:37:35,500 --> 00:37:38,000
We'll just keep on doing it and doing it and doing it.

878
00:37:38,100 --> 00:37:40,900
And so what we should do, oops, don't want to find that again.

879
00:37:41,400 --> 00:37:43,000
What we basically should do here.

880
00:37:43,600 --> 00:37:44,700
You know, what I can even do.

881
00:37:44,800 --> 00:37:45,700
I don't even need to do that.

882
00:37:45,800 --> 00:37:47,200
I can just stick that right in there.

883
00:37:47,500 --> 00:37:50,200
There we go and make that divide a little clearer.

884
00:37:50,200 --> 00:37:50,700
There we go.

885
00:37:51,300 --> 00:37:54,800
So basically what we can do is just keep on doing this and until we

886
00:37:54,800 --> 00:37:58,800
get to the time when we actually get above the target seconds per

887
00:37:58,800 --> 00:37:59,500
frame, right?

888
00:37:59,500 --> 00:38:01,800
And then we can go ahead and do our flip.

889
00:38:01,900 --> 00:38:06,100
So in theory, if we actually do that now, in fact we should actually

890
00:38:06,100 --> 00:38:10,800
that should actually just be basically a locked Loop that forces us to

891
00:38:10,800 --> 00:38:12,800
update at 60 frames a second.

892
00:38:13,100 --> 00:38:16,300
Now we can we'll have to verify that that's actually true but let's

893
00:38:16,300 --> 00:38:18,200
just go ahead and make that happen here.

894
00:38:20,400 --> 00:38:20,900
Where are we?

895
00:38:20,900 --> 00:38:21,400
There we go.

896
00:38:21,900 --> 00:38:22,400
Let's see.

897
00:38:23,300 --> 00:38:24,000
Why am I not?

898
00:38:26,400 --> 00:38:27,900
Why am I not getting any input here?

899
00:38:28,700 --> 00:38:30,300
That does not look reassuring?

900
00:38:30,900 --> 00:38:33,500
I feel like we should be getting some input, but we are getting no

901
00:38:33,500 --> 00:38:34,600
input whatsoever.

902
00:38:34,800 --> 00:38:35,800
That doesn't sound good.

903
00:38:36,000 --> 00:38:38,100
Something has gone horribly.

904
00:38:38,200 --> 00:38:39,200
Horribly wrong.

905
00:38:39,400 --> 00:38:42,400
I suspect that probably this while loop was busted.

906
00:38:42,400 --> 00:38:43,400
Hold on one second.

907
00:38:44,000 --> 00:38:48,000
Well, S 2 laps for frame is less than Target seconds per frame.

908
00:38:49,600 --> 00:38:51,000
No, that's should be.

909
00:38:51,200 --> 00:38:52,200
What did I do wrong?

910
00:38:52,300 --> 00:38:53,700
It was off to a good start in the Stream today.

911
00:38:53,700 --> 00:38:54,900
When the first thing I

912
00:38:55,000 --> 00:38:59,000
Pin is already lousy, but you know, programming is like that some

913
00:38:59,000 --> 00:38:59,800
days, some days.

914
00:39:00,000 --> 00:39:03,300
You're on and some days you're off and on days when you're off, it

915
00:39:03,300 --> 00:39:05,700
just means you got to do a lot more debugging and you know it when it

916
00:39:05,700 --> 00:39:08,700
happens, but you know, what?

917
00:39:08,700 --> 00:39:09,100
Can you do?

918
00:39:09,100 --> 00:39:13,700
He's got a you just gotta you got a chin up, you know, and get through

919
00:39:13,700 --> 00:39:14,000
it.

920
00:39:14,100 --> 00:39:16,600
Anyway, let's let's go in here and step in the debugger.

921
00:39:16,600 --> 00:39:18,400
Hopefully it'll be relatively obvious.

922
00:39:19,000 --> 00:39:19,200
What?

923
00:39:19,200 --> 00:39:22,400
I messed up there because we're not actually updating.

924
00:39:22,400 --> 00:39:26,300
So I think what's happening is this while loop is is never actually

925
00:39:26,300 --> 00:39:28,600
making this get big enough for what it should be.

926
00:39:28,900 --> 00:39:29,400
So

927
00:39:30,000 --> 00:39:30,900
Oh well.

928
00:39:32,100 --> 00:39:32,800
That was easy.

929
00:39:33,500 --> 00:39:36,000
It looks like we left a yeah, that's good.

930
00:39:36,300 --> 00:39:37,100
That's stupid.

931
00:39:37,500 --> 00:39:38,100
All right.

932
00:39:38,800 --> 00:39:41,200
What I basically did there is I computed the target milliseconds per

933
00:39:41,200 --> 00:39:43,400
frame instead of the target seconds per frame.

934
00:39:44,000 --> 00:39:46,400
So that's that's pretty much the entirety of the bug.

935
00:39:47,000 --> 00:39:49,900
Not, not particularly interesting to say the least.

936
00:39:50,200 --> 00:39:56,400
So, okay, in theory, we should actually be going at somewhat more of a

937
00:39:56,400 --> 00:39:58,300
consistent frame rate, but I don't actually know if that's true.

938
00:39:58,300 --> 00:40:00,900
We should be going at 30 now, but I'm not sure if that's true, that,

939
00:40:00,900 --> 00:40:01,400
that audience.

940
00:40:01,500 --> 00:40:03,700
No, skipping like crazy, so I'll have to take a look at what's going

941
00:40:03,700 --> 00:40:04,100
on there.

942
00:40:04,500 --> 00:40:07,800
So let's take a look here at that while loop make sure that's actually

943
00:40:08,100 --> 00:40:08,900
running properly.

944
00:40:09,500 --> 00:40:11,000
Okay, so this is wrong as well.

945
00:40:11,200 --> 00:40:15,100
So this end counter has to actually be done outside.

946
00:40:15,100 --> 00:40:17,900
So let's let's go ahead and pull.

947
00:40:17,900 --> 00:40:19,100
I don't know if you could see what was happening there.

948
00:40:19,100 --> 00:40:22,300
But basically we need we need to update our last counter to be proper.

949
00:40:22,300 --> 00:40:23,900
I mean, the fix is very simple.

950
00:40:23,900 --> 00:40:27,500
It's this right here, but let's this code is now super messy.

951
00:40:27,500 --> 00:40:28,900
So I'm going to go ahead and pull that out.

952
00:40:29,700 --> 00:40:31,100
Let's see if that makes a little bit.

953
00:40:34,300 --> 00:40:34,700
Okay.

954
00:40:36,000 --> 00:40:38,900
Yeah, so that looks that looks more, correct.

955
00:40:39,000 --> 00:40:41,500
All right, but this is still super ugly here.

956
00:40:41,500 --> 00:40:42,700
So we got to pull this out.

957
00:40:42,700 --> 00:40:48,100
So let's start by pulling out this the clocking stuff into something.

958
00:40:48,100 --> 00:40:49,900
That's a little more understandable.

959
00:40:50,000 --> 00:40:50,600
Right?

960
00:40:50,800 --> 00:40:53,700
So let's basically say, first of all, I kind of want to go ahead and

961
00:40:53,700 --> 00:40:58,100
say that the the query performance frequency, this thing right here.

962
00:40:58,600 --> 00:41:01,700
I kind of want the query performance frequency to basically be

963
00:41:01,700 --> 00:41:04,900
something that can be always access since we compute it once.

964
00:41:04,900 --> 00:41:05,600
I want that to be just

965
00:41:05,800 --> 00:41:06,700
Global variable.

966
00:41:07,100 --> 00:41:09,800
That's just whatever the frequency is and we initialize that startup.

967
00:41:09,800 --> 00:41:14,700
So what I would like to do at least is have this variable basically,

968
00:41:14,800 --> 00:41:15,200
right?

969
00:41:15,300 --> 00:41:17,600
I'd like this to be a global.

970
00:41:17,700 --> 00:41:20,200
So I'd like that to be a global variable.

971
00:41:20,400 --> 00:41:24,500
So the perfect count frequency is basically going to be this thing

972
00:41:24,500 --> 00:41:25,100
here.

973
00:41:25,600 --> 00:41:28,800
See that we had it at the four per count frequency.

974
00:41:29,300 --> 00:41:32,200
So basically we just want a global variable that always lets us know

975
00:41:32,600 --> 00:41:35,400
what that frequency is so that we clear it once and then we can use it

976
00:41:35,400 --> 00:41:35,600
outside.

977
00:41:35,700 --> 00:41:38,200
Side in a different in a different context.

978
00:41:38,400 --> 00:41:42,300
And so then what we have is we basically have our rooms.

979
00:41:42,300 --> 00:41:42,600
You mean.

980
00:41:43,800 --> 00:41:46,700
We have our actual call that does our computation.

981
00:41:46,800 --> 00:41:49,900
We want that to be something that's kind of nicely encapsulated.

982
00:41:49,900 --> 00:41:53,200
So I'm just going to pull it out here and I'm basically going to have

983
00:41:53,200 --> 00:41:58,800
a way of saying, snap a counter at various places and then take a

984
00:41:58,800 --> 00:41:59,600
difference on them.

985
00:42:00,100 --> 00:42:03,400
So basically, I want something here, which is basically, you know,

986
00:42:03,400 --> 00:42:07,700
it's just an inline function, that's going to do, get seconds elapsed,

987
00:42:07,700 --> 00:42:13,900
something like this, and it will take two different ones of these.

988
00:42:13,900 --> 00:42:17,600
So, start and end, let's say like that.

989
00:42:18,000 --> 00:42:21,400
So, take the start and end and then they'll do this computation

990
00:42:21,400 --> 00:42:22,100
properly.

991
00:42:22,200 --> 00:42:25,900
It'll know that basically, whatever the elapsed time is here, you

992
00:42:25,900 --> 00:42:29,400
know, it'll do end dot quad, part -

993
00:42:30,000 --> 00:42:31,400
Start dot quad part.

994
00:42:31,400 --> 00:42:33,300
It'll do this, this reliably.

995
00:42:33,300 --> 00:42:35,300
So, we know we don't have a typo or anything in it.

996
00:42:35,300 --> 00:42:37,100
We can debug it once and make sure it's right.

997
00:42:37,700 --> 00:42:39,700
Basically, we'll just do that seconds elapsed.

998
00:42:39,800 --> 00:42:42,400
It'll do that computation and then return it.

999
00:42:42,900 --> 00:42:43,800
So, there we go.

1000
00:42:44,100 --> 00:42:44,600
That

1001
00:42:45,900 --> 00:42:46,600
So that's fine.

1002
00:42:46,800 --> 00:42:50,300
And then we also will have one which our bait which is basically just

1003
00:42:50,300 --> 00:42:52,900
a way to get a clock value.

1004
00:42:52,900 --> 00:42:55,800
So went through to get get wall clock.

1005
00:42:55,800 --> 00:42:59,900
Basically, that will actually do this query performance counter and

1006
00:42:59,900 --> 00:43:02,600
just return that value directly.

1007
00:43:03,000 --> 00:43:05,900
So that way, at least we can see it's a little clearer.

1008
00:43:06,000 --> 00:43:10,000
What we're actually trying to do with it and we can go ahead and

1009
00:43:10,100 --> 00:43:11,000
return that.

1010
00:43:11,000 --> 00:43:11,400
There we go.

1011
00:43:11,400 --> 00:43:15,600
So, now we can replace our stuff with this and hopefully it will

1012
00:43:15,800 --> 00:43:16,600
Be good.

1013
00:43:16,600 --> 00:43:18,300
So perf can't frequencies there.

1014
00:43:18,800 --> 00:43:22,000
Let's go ahead and put this up with our Global's and we'll call that

1015
00:43:22,500 --> 00:43:22,900
Lobo.

1016
00:43:22,900 --> 00:43:24,100
Perfect count for currency.

1017
00:43:24,100 --> 00:43:28,000
So, perfect, count frequency and that should never change during the

1018
00:43:28,000 --> 00:43:28,800
Run of our program.

1019
00:43:28,800 --> 00:43:30,000
So we should be good to go.

1020
00:43:30,000 --> 00:43:32,300
Now, in here.

1021
00:43:32,400 --> 00:43:36,800
We need to replace our all of our stuff that we were doing for query

1022
00:43:36,800 --> 00:43:37,700
performance counter.

1023
00:43:37,700 --> 00:43:44,700
But we actually want to do here is say, okay, our last counter is

1024
00:43:44,700 --> 00:43:45,600
equal to

1025
00:43:45,700 --> 00:43:49,200
I went through to get wall clock, right?

1026
00:43:49,200 --> 00:43:52,600
Like that and we can leave our our dtsc's for now.

1027
00:43:52,600 --> 00:43:55,800
We're going to do something else with those later, but our dtsc is is

1028
00:43:55,800 --> 00:43:56,900
very prosperous Pacific.

1029
00:43:56,900 --> 00:43:59,500
So you can't really use that for timing.

1030
00:44:00,100 --> 00:44:02,500
If you're at you can't use that for timing that runs on the user's

1031
00:44:02,500 --> 00:44:03,100
machine.

1032
00:44:03,300 --> 00:44:06,800
You can only use Query performance counter for actually timing stuff

1033
00:44:06,800 --> 00:44:07,900
on the on the user's machine.

1034
00:44:07,900 --> 00:44:11,600
So our game code has to be driven off of create performance, counter

1035
00:44:11,700 --> 00:44:14,100
are dtsc's only for timing code for profiling.

1036
00:44:17,000 --> 00:44:19,900
Because how it behaves varies from CPU to CPU and all sorts of other

1037
00:44:19,900 --> 00:44:20,100
stuff.

1038
00:44:20,100 --> 00:44:25,100
So you don't want to ship a game that uses our dtsc for actual game

1039
00:44:25,100 --> 00:44:25,500
time.

1040
00:44:27,400 --> 00:44:28,000
All right.

1041
00:44:28,600 --> 00:44:30,100
So then we get down here.

1042
00:44:30,100 --> 00:44:33,500
We can say this is basically our work counter.

1043
00:44:33,500 --> 00:44:38,600
So our work counter win32, get wall clock, will get that there.

1044
00:44:39,200 --> 00:44:40,300
Then we have.

1045
00:44:41,000 --> 00:44:44,000
Those are so that was our cycles that can go up there till we deal

1046
00:44:44,000 --> 00:44:44,700
with it later.

1047
00:44:45,000 --> 00:44:48,500
So we have our work counter there and we want to know our seconds, the

1048
00:44:48,500 --> 00:44:53,000
elapsed are, let's just call this work seconds, elapsed like that.

1049
00:44:53,000 --> 00:44:57,100
Guess they went through to get seconds elapsed and we'll give that.

1050
00:44:57,200 --> 00:44:59,800
Between our work counter basically work.

1051
00:45:00,000 --> 00:45:03,300
Counter and our last counter.

1052
00:45:04,400 --> 00:45:08,200
So that's the the actual last kind of gets updated at the very end.

1053
00:45:08,500 --> 00:45:09,100
So

1054
00:45:10,900 --> 00:45:13,200
Think that's roughly right.

1055
00:45:13,200 --> 00:45:14,100
What I want to do.

1056
00:45:14,100 --> 00:45:15,200
Then I'm going to go through here.

1057
00:45:15,200 --> 00:45:17,200
And this is going to be our work seconds, the elapsed, right?

1058
00:45:17,200 --> 00:45:21,700
We're going to go through here and say we're going to update our check

1059
00:45:21,700 --> 00:45:22,700
counter basically.

1060
00:45:22,700 --> 00:45:27,500
And that's going to get the wall clock time here, wall clock that, and

1061
00:45:27,500 --> 00:45:30,600
then we're going to get the S laps wins here to get seconds elapsed.

1062
00:45:30,600 --> 00:45:35,900
And we're going to try to time in between the last counter and our

1063
00:45:35,900 --> 00:45:37,000
check counter, right?

1064
00:45:37,000 --> 00:45:39,700
And we can also just basically do this, right.

1065
00:45:40,400 --> 00:45:43,400
Kind of nice having functions encapsulate, our stuff is nice because

1066
00:45:43,400 --> 00:45:45,700
it just makes the code so much, read more readable, right?

1067
00:45:45,800 --> 00:45:49,200
So we can basically just sit here and keep going.

1068
00:45:49,700 --> 00:45:52,400
In fact, we could even be even more ridiculous if we really wanted to

1069
00:45:52,400 --> 00:45:55,600
and put that expression right here, but I don't think we need to go

1070
00:45:55,600 --> 00:45:56,100
that far.

1071
00:45:56,200 --> 00:45:59,300
That doesn't seem useful, so will not do that quite yet.

1072
00:45:59,600 --> 00:46:02,400
Anyway, I'm going to F0 out all these things for now because we're not

1073
00:46:02,400 --> 00:46:03,600
dealing with them at the moment.

1074
00:46:03,900 --> 00:46:05,900
Then at the end here at the very end.

1075
00:46:06,100 --> 00:46:07,900
We need to update our last counter.

1076
00:46:08,300 --> 00:46:10,200
So basically, what we can do is we can say

1077
00:46:10,300 --> 00:46:15,400
say that our encounter here, large integer and counter equals 1/2 to

1078
00:46:15,400 --> 00:46:19,000
get wall clock, which is what we wanted and then we can set the last

1079
00:46:19,000 --> 00:46:20,100
counter equal to that.

1080
00:46:20,100 --> 00:46:24,400
Now the this this guy here, I'm going to leave all these guys together

1081
00:46:24,600 --> 00:46:26,500
and stick them down at the very end.

1082
00:46:27,100 --> 00:46:29,700
This stuff needs to probably be cleaned up a little bit.

1083
00:46:30,000 --> 00:46:31,900
But yeah, let's just move all that down there.

1084
00:46:32,000 --> 00:46:35,400
Okay, so that should be about, right.

1085
00:46:36,000 --> 00:46:39,700
I think that looks about right now, of course, the problem is at the

1086
00:46:39,700 --> 00:46:40,200
moment.

1087
00:46:40,400 --> 00:46:45,200
We don't really have a good way to tell even whether what we're even

1088
00:46:45,200 --> 00:46:49,700
running at like, we have no actual way of knowing what our actual

1089
00:46:49,700 --> 00:46:50,800
frame rate even is.

1090
00:46:50,800 --> 00:46:54,500
And so, that's a little bit of a problem, to say the least, when you

1091
00:46:54,500 --> 00:46:55,500
actually look at it.

1092
00:46:56,000 --> 00:47:01,700
You know, it does it look consistent now, oh, you know, sure, right.

1093
00:47:01,700 --> 00:47:03,100
But how do you really know?

1094
00:47:03,100 --> 00:47:06,700
And so we kind of want to do is probably have some way of actually

1095
00:47:06,700 --> 00:47:10,200
trying to verify that and one thing we could do and I think

1096
00:47:10,300 --> 00:47:14,500
This is probably what we should do in maybe in the remaining time is

1097
00:47:14,500 --> 00:47:18,200
put a little counter that just goes up every frame that we can

1098
00:47:18,200 --> 00:47:22,000
actually time with, you know, like a stopwatch or something and verify

1099
00:47:22,000 --> 00:47:25,900
that in like a minutes worth of time that it is actually gone up by

1100
00:47:25,900 --> 00:47:29,100
the amount that we should think that it should right by, you know, 60

1101
00:47:29,100 --> 00:47:30,300
times our frame rate.

1102
00:47:30,300 --> 00:47:33,600
So 60 times, 30 or whatever it is, but maybe I don't know.

1103
00:47:33,600 --> 00:47:34,400
Maybe, we'll do that tomorrow.

1104
00:47:34,400 --> 00:47:35,800
We're getting kind of low on time here.

1105
00:47:35,800 --> 00:47:37,700
So let's just keep going with what I was talking about here.

1106
00:47:37,700 --> 00:47:39,800
So what we do want to do

1107
00:47:40,300 --> 00:47:41,800
We kind of want to stay here.

1108
00:47:41,800 --> 00:47:44,300
Even though this is while loop work will work just fine.

1109
00:47:44,600 --> 00:47:46,200
There's a couple other things we want to do here.

1110
00:47:46,400 --> 00:47:48,200
First of all, you need

1111
00:47:49,200 --> 00:47:53,000
What we do want to do is we want to actually verify that we didn't

1112
00:47:53,000 --> 00:47:53,800
miss a frame.

1113
00:47:54,000 --> 00:47:57,200
So in the if s allows what we'd like to do is put an else at the end

1114
00:47:57,200 --> 00:47:59,800
of this while, right, but you can't actually do that and see.

1115
00:48:00,000 --> 00:48:03,500
So, what we want to do here is say, okay, if the seconds elapsed for

1116
00:48:03,500 --> 00:48:06,800
frame was actually higher than the target.

1117
00:48:08,300 --> 00:48:10,100
Then we've got a problem, right?

1118
00:48:10,100 --> 00:48:12,800
Because if it's actually a little bit higher, that means we missed our

1119
00:48:12,800 --> 00:48:13,500
frame rate.

1120
00:48:13,700 --> 00:48:17,500
And so this is something we want to do here, says missed framerate,

1121
00:48:17,500 --> 00:48:21,600
you know, that's that and we could we could even do an assertion here.

1122
00:48:22,200 --> 00:48:23,800
But the problem is the assertion would lock up.

1123
00:48:23,800 --> 00:48:27,800
So what we'd really like to do is, is this this will be a thing that

1124
00:48:27,800 --> 00:48:30,800
will log and we'll be able to see that actually pretty soon.

1125
00:48:31,100 --> 00:48:33,300
I don't know if we'll do logging next week, but pretty soon.

1126
00:48:35,800 --> 00:48:37,800
We'll be able to start seeing some of these things that we wanted a

1127
00:48:37,800 --> 00:48:39,500
lot, but we don't have a system for yet.

1128
00:48:40,500 --> 00:48:43,100
So the other thing we want to do is this will basically just melt the

1129
00:48:43,100 --> 00:48:44,400
CPU if that makes sense.

1130
00:48:45,800 --> 00:48:49,600
Basically, even if the CPU did all the work that it needs to do for

1131
00:48:49,600 --> 00:48:52,200
the entire frame in a millisecond.

1132
00:48:52,800 --> 00:48:55,700
It's still going to sit here in this spinlock, doing a ton of work

1133
00:48:55,700 --> 00:48:58,500
constantly checking the performance counter, right?

1134
00:48:58,500 --> 00:49:01,300
It's just like wasting CPU time.

1135
00:49:01,600 --> 00:49:06,600
So what we'd rather do is we'd rather see if there's any time left

1136
00:49:06,600 --> 00:49:08,700
that we can actually use to just sleep.

1137
00:49:08,900 --> 00:49:10,200
Just tell the operating system to put the

1138
00:49:10,400 --> 00:49:13,200
Pewter rest or do other work that it has to do.

1139
00:49:13,500 --> 00:49:19,000
So, what we'd like to do is use this command from msdn sleep, which

1140
00:49:19,000 --> 00:49:23,100
basically choose me which basically just takes a number of

1141
00:49:23,100 --> 00:49:26,500
milliseconds and it waits it basically just wait for that number

1142
00:49:26,500 --> 00:49:26,900
milliseconds.

1143
00:49:26,900 --> 00:49:31,600
So what we would like to do here is basically say, let's do that sleep

1144
00:49:32,000 --> 00:49:34,800
for the MS, you know, sleep Ms.

1145
00:49:34,800 --> 00:49:35,700
Basically, right?

1146
00:49:35,700 --> 00:49:39,100
And so in here we're going to say that we have a sleep milliseconds

1147
00:49:39,300 --> 00:49:40,200
and the sleep.

1148
00:49:40,300 --> 00:49:42,800
Is going to be how many milliseconds we could afford to sleep, right?

1149
00:49:42,800 --> 00:49:43,600
We going to say.

1150
00:49:43,800 --> 00:49:46,000
All right, we'll take the target seconds per frame.

1151
00:49:46,300 --> 00:49:50,700
Okay, like that will take the seconds elapsed for frame will subtract

1152
00:49:50,700 --> 00:49:51,100
them.

1153
00:49:51,200 --> 00:49:51,800
Right?

1154
00:49:52,000 --> 00:49:52,900
Why did that not copy?

1155
00:49:52,900 --> 00:49:53,400
There we go.

1156
00:49:53,400 --> 00:49:54,600
S last per frame.

1157
00:49:55,200 --> 00:49:56,800
Will multiply that by 1,000.

1158
00:49:57,000 --> 00:49:57,600
Right?

1159
00:49:57,700 --> 00:50:00,400
Because this is in seconds and now we've got milliseconds and that's

1160
00:50:00,400 --> 00:50:03,000
how many milliseconds or left, right?

1161
00:50:03,100 --> 00:50:05,000
That's how many milliseconds are left to.

1162
00:50:05,000 --> 00:50:05,500
Wait.

1163
00:50:06,200 --> 00:50:08,800
What we want to do now is that's going to be a fractional value

1164
00:50:08,800 --> 00:50:09,400
obviously.

1165
00:50:10,400 --> 00:50:10,700
Evening.

1166
00:50:11,800 --> 00:50:15,300
And so, we only want to, we basically want to truncate that if that

1167
00:50:15,300 --> 00:50:15,800
makes sense.

1168
00:50:16,500 --> 00:50:19,700
We want to sort of, you know, what, I forgot to.

1169
00:50:20,300 --> 00:50:21,400
I forgot this right here.

1170
00:50:22,200 --> 00:50:22,800
There we go.

1171
00:50:23,200 --> 00:50:27,100
We, we need to actually wait to display the frame.

1172
00:50:27,400 --> 00:50:30,200
This would actually have displayed the frame and then waited which is

1173
00:50:30,200 --> 00:50:31,100
not particularly useful.

1174
00:50:32,100 --> 00:50:33,600
So, what we want to do here.

1175
00:50:33,600 --> 00:50:33,800
Yeah.

1176
00:50:33,800 --> 00:50:37,000
Is we want to go ahead and see how many milliseconds we can sleep.

1177
00:50:37,300 --> 00:50:39,400
So to do that, we're going to go ahead and truncate this fractional

1178
00:50:39,400 --> 00:50:40,000
value.

1179
00:50:40,300 --> 00:50:44,000
We're truncate the fractional value out to a d word after we compute

1180
00:50:44,000 --> 00:50:44,400
it.

1181
00:50:44,400 --> 00:50:46,500
And so that will give us how much we could sleep.

1182
00:50:46,500 --> 00:50:47,300
And then we will sleep.

1183
00:50:47,300 --> 00:50:47,500
Now.

1184
00:50:47,500 --> 00:50:50,700
There is a huge problem, though, with doing this.

1185
00:50:50,700 --> 00:50:54,300
Unfortunately, which we probably won't see when we run it here.

1186
00:50:54,300 --> 00:50:55,300
But it's there.

1187
00:50:55,300 --> 00:50:56,600
You'll just have to take my word for it.

1188
00:50:56,600 --> 00:50:57,500
Oh, well, you can kind of?

1189
00:50:57,500 --> 00:50:59,800
Yeah, you can, you can

1190
00:51:00,000 --> 00:51:00,400
See it.

1191
00:51:00,700 --> 00:51:05,100
And it's it's something that it's hard to see when we don't actually

1192
00:51:05,100 --> 00:51:07,900
have something running and when you're not in certain circumstances

1193
00:51:07,900 --> 00:51:08,500
and whatever.

1194
00:51:09,500 --> 00:51:12,000
There's because there's a whole bunch of stuff that ties into this but

1195
00:51:12,000 --> 00:51:13,100
we'll get to those in a second.

1196
00:51:17,200 --> 00:51:17,800
The problem.

1197
00:51:17,800 --> 00:51:21,500
Is that basically, this sleep function in Windows?

1198
00:51:22,600 --> 00:51:26,500
Has a certain granularity with how long it can.

1199
00:51:26,500 --> 00:51:28,100
It can actually put your thread to sleep.

1200
00:51:28,100 --> 00:51:31,800
So, if it decides when you call it, that it's going to put your thread

1201
00:51:31,800 --> 00:51:32,600
to sleep.

1202
00:51:32,700 --> 00:51:34,700
Meaning your thread will no longer be executing.

1203
00:51:35,800 --> 00:51:42,500
It is going to wait for the next scheduler, granularity to wake you

1204
00:51:42,500 --> 00:51:43,000
up.

1205
00:51:43,400 --> 00:51:46,000
Now, what that means, for those of you unfamiliar with operating

1206
00:51:46,000 --> 00:51:48,300
systems is inside at every operating system.

1207
00:51:48,300 --> 00:51:51,300
There's some code called a scheduler, and a scheduler is what decides

1208
00:51:51,400 --> 00:51:52,700
when threads run?

1209
00:51:52,700 --> 00:51:54,800
Like, when different processes run, when the threads run.

1210
00:51:55,000 --> 00:51:57,900
It's basically the thing that makes your operating system preemptively

1211
00:51:57,900 --> 00:51:58,700
multitasked.

1212
00:51:58,700 --> 00:52:02,800
It's the thing that lets you run a bunch of different programs at once

1213
00:52:02,800 --> 00:52:05,200
and it dulls out the work, you do without the

1214
00:52:05,300 --> 00:52:08,600
If you time to each of these programs to allow them to do the work,

1215
00:52:08,600 --> 00:52:09,200
right?

1216
00:52:09,700 --> 00:52:14,200
But what happens is that scheduler basically has to be sort of a thing

1217
00:52:14,200 --> 00:52:15,900
that interrupts what's going on.

1218
00:52:15,900 --> 00:52:18,700
If you imagine you have one program running and you need to let the

1219
00:52:18,700 --> 00:52:20,900
CPU do some work on another program.

1220
00:52:21,300 --> 00:52:23,600
Then the Opry system, you imagine have to like interrupt, right?

1221
00:52:23,600 --> 00:52:26,400
It has to jump in and say, okay, stop the process.

1222
00:52:26,400 --> 00:52:28,400
Hold on that, you're doing like, emacs.

1223
00:52:28,400 --> 00:52:30,000
Let's say stop emacs.

1224
00:52:30,000 --> 00:52:30,700
Hold it.

1225
00:52:30,800 --> 00:52:34,400
I gotta go run the code for this timer overlay that Casey wrote right

1226
00:52:34,400 --> 00:52:34,800
or something.

1227
00:52:34,800 --> 00:52:35,000
Like

1228
00:52:35,200 --> 00:52:36,400
This if that makes sense.

1229
00:52:37,700 --> 00:52:42,700
So if you think about what happens there, however, frequently that

1230
00:52:42,700 --> 00:52:48,800
scheduler wakes up is the maximum is the minimum amount of time you

1231
00:52:48,800 --> 00:52:51,500
could sleep for, because if your thread goes to sleep, it's not going

1232
00:52:51,500 --> 00:52:55,400
to wake back up again, until the scheduler comes back on the CPU and

1233
00:52:55,400 --> 00:52:56,300
looks to see.

1234
00:52:56,700 --> 00:52:57,200
And goes.

1235
00:52:57,200 --> 00:52:59,000
Oh, he wanted to wake up in X.

1236
00:52:59,000 --> 00:52:59,500
Ms.

1237
00:52:59,500 --> 00:52:59,700
X.

1238
00:52:59,700 --> 00:53:00,300
Ms.

1239
00:53:00,300 --> 00:53:01,300
Have elapsed.

1240
00:53:01,400 --> 00:53:02,400
So, I'll wake him up.

1241
00:53:02,700 --> 00:53:05,600
But if the scheduler only wakes up, so, let's say every 50

1242
00:53:05,600 --> 00:53:07,200
milliseconds, and you ask to

1243
00:53:07,600 --> 00:53:08,800
For two milliseconds.

1244
00:53:08,900 --> 00:53:12,000
Well, you're actually going to sleep for 15 milliseconds because the

1245
00:53:12,000 --> 00:53:14,500
scheduler ain't going to wake up every two milliseconds.

1246
00:53:14,500 --> 00:53:20,200
And look, she is name, so we can fix this.

1247
00:53:20,300 --> 00:53:23,100
It's not a perfect fix, but we can fix this.

1248
00:53:23,200 --> 00:53:26,200
We can fix it with something called time to get in Period.

1249
00:53:27,200 --> 00:53:29,600
Now what time begin period is it's a weird?

1250
00:53:31,200 --> 00:53:35,200
I don't even want to know how this ended up being the way to do this.

1251
00:53:35,400 --> 00:53:39,100
You can sort of see how, but oh my Lord, you would think there'd be

1252
00:53:39,100 --> 00:53:41,600
something called set scheduler granularity.

1253
00:53:42,100 --> 00:53:46,000
But know what actually happens is time begin.

1254
00:53:46,000 --> 00:53:51,000
Period is like an old multimedia system call for about for setting

1255
00:53:51,200 --> 00:53:54,500
when you would get, callback timers and what resolution they had to

1256
00:53:54,500 --> 00:53:54,900
be.

1257
00:53:55,000 --> 00:53:56,900
And of course, the Callback timers couldn't happen.

1258
00:53:57,000 --> 00:53:59,800
Open the timer granularity, unless the scheduler was.

1259
00:54:00,000 --> 00:54:02,000
Making up at that granularity.

1260
00:54:02,000 --> 00:54:05,900
So it ends up setting the schedule granularity in Windows and it sets

1261
00:54:05,900 --> 00:54:08,700
it to whatever this period is here, right?

1262
00:54:12,200 --> 00:54:14,100
So that period is in milliseconds, which means the scheduled

1263
00:54:14,100 --> 00:54:17,700
granularity, we can set all the way down to 1 millisecond, which is

1264
00:54:17,700 --> 00:54:20,700
fine because we're only going to sleep at a millisecond granularity.

1265
00:54:21,100 --> 00:54:24,600
Anyway, I don't know if that makes sense, but hopefully it makes

1266
00:54:24,600 --> 00:54:25,000
sense.

1267
00:54:26,000 --> 00:54:28,800
I don't actually remember, to be honest with these been a long time.

1268
00:54:29,000 --> 00:54:31,900
I don't actually remember how you make this call.

1269
00:54:31,900 --> 00:54:35,900
It escapes me at the moment, but we'll go ahead and put it in here and

1270
00:54:35,900 --> 00:54:36,300
she's me.

1271
00:54:37,400 --> 00:54:41,000
So basically you call time again, period, and you pass it.

1272
00:54:41,000 --> 00:54:44,000
The MS granularity that you want to use me.

1273
00:54:44,700 --> 00:54:51,700
So, basically desired scheduler milliseconds, that is one.

1274
00:54:51,900 --> 00:54:54,500
So we can just do people reading this code knows what's going on.

1275
00:54:54,800 --> 00:55:00,100
Note Casey set the windows scheduler granularity.

1276
00:55:01,900 --> 00:55:03,100
To 1 millisecond.

1277
00:55:06,400 --> 00:55:08,300
So that our sleep.

1278
00:55:09,400 --> 00:55:11,000
Can be more granular.

1279
00:55:12,300 --> 00:55:13,200
So let's do that.

1280
00:55:13,600 --> 00:55:14,500
So there we go.

1281
00:55:14,500 --> 00:55:18,000
And now I just can't really think can't remember is whether you need

1282
00:55:18,400 --> 00:55:21,300
to actually well, you know what, you know what, I think.

1283
00:55:22,400 --> 00:55:23,400
Yeah, you know what I think.

1284
00:55:23,400 --> 00:55:25,400
I think there is one of the things that we want to do.

1285
00:55:25,800 --> 00:55:30,200
I'm just it's the old, the memory is kind of, you know, jogs.

1286
00:55:30,700 --> 00:55:32,300
I don't actually remember.

1287
00:55:33,000 --> 00:55:35,800
Let's see if there is.

1288
00:55:35,800 --> 00:55:39,200
I felt like there was a way we could figure out to verify.

1289
00:55:39,200 --> 00:55:39,700
That was right.

1290
00:55:39,700 --> 00:55:42,100
Well, we can look at the H result at the very least.

1291
00:55:43,100 --> 00:55:47,700
So if this mm result thing, that comes back, if that returns time, no

1292
00:55:47,700 --> 00:55:48,700
are successful.

1293
00:55:49,300 --> 00:55:51,300
I like time or no can do.

1294
00:55:51,500 --> 00:55:52,200
That's interesting.

1295
00:55:52,200 --> 00:55:53,400
Someone had a sense of humor there.

1296
00:55:53,800 --> 00:55:59,900
So basically, if that does this, then, it's okay to sleep, or I should

1297
00:55:59,900 --> 00:56:02,600
say sleep, is, is granular.

1298
00:56:02,800 --> 00:56:03,500
Just true.

1299
00:56:04,300 --> 00:56:05,600
In fact, we could just do this.

1300
00:56:05,700 --> 00:56:10,200
You can just record this like that will 32.

1301
00:56:10,200 --> 00:56:12,700
Sleep is granular equals that, so,

1302
00:56:13,000 --> 00:56:15,900
There you can sort of see, I'm just based on recording whether this

1303
00:56:15,900 --> 00:56:16,200
worked.

1304
00:56:16,200 --> 00:56:19,600
So if it believed it could set it, then we'll then we'll set it.

1305
00:56:19,600 --> 00:56:23,000
Now, the thing that the reason that I wanted to record what it is is

1306
00:56:23,000 --> 00:56:25,700
because I don't want to introduce this sleep, if the operating system

1307
00:56:25,700 --> 00:56:27,000
isn't going to be able to do it.

1308
00:56:27,100 --> 00:56:30,500
So basically I want to do, if sleep is granular than allow the sleep.

1309
00:56:30,500 --> 00:56:32,000
Otherwise don't allow the sleep.

1310
00:56:32,000 --> 00:56:32,700
Does that make sense?

1311
00:56:33,400 --> 00:56:35,800
Now that was a like I said a multimedia function.

1312
00:56:35,800 --> 00:56:38,900
So in order to link with that, we have to link with the multimedia

1313
00:56:38,900 --> 00:56:42,500
Library, which is pretty trivial to do and is this on all windows?

1314
00:56:42,500 --> 00:56:42,700
So

1315
00:56:42,800 --> 00:56:43,900
So, that's not a risk.

1316
00:56:43,900 --> 00:56:48,700
It's not a linking risk, I believe it's when mmm, that lib.

1317
00:56:48,800 --> 00:56:49,700
Yeah, it is.

1318
00:56:49,700 --> 00:56:50,200
Of course.

1319
00:56:50,300 --> 00:56:53,100
Remember you can always determine that by going down here, but

1320
00:56:53,100 --> 00:56:55,300
sometimes I like to see if I still remember.

1321
00:56:55,300 --> 00:56:56,500
So, all right.

1322
00:56:56,500 --> 00:56:58,500
Now we have basically gotten that working.

1323
00:56:58,800 --> 00:56:59,700
Our sleep should be more.

1324
00:57:00,000 --> 00:57:00,400
Allure.

1325
00:57:00,800 --> 00:57:02,000
But we still have no idea.

1326
00:57:02,000 --> 00:57:03,300
Whether this is working right?

1327
00:57:03,300 --> 00:57:03,800
Or not.

1328
00:57:03,800 --> 00:57:07,500
Like we've got no idea and so we can't really make a conclusions yet,

1329
00:57:07,500 --> 00:57:08,700
but we're out of time for the day.

1330
00:57:10,600 --> 00:57:12,400
So this may be incredibly buggy.

1331
00:57:12,800 --> 00:57:15,000
We don't know, but at least we've gone through the theory of what

1332
00:57:15,000 --> 00:57:15,500
we're trying to do.

1333
00:57:15,500 --> 00:57:19,600
We've started to make ourselves try to Target lock to a frame rate.

1334
00:57:19,700 --> 00:57:20,700
So that's good.

1335
00:57:20,800 --> 00:57:24,200
And tomorrow, we should be able to go through and actually clean up

1336
00:57:24,200 --> 00:57:27,800
the audio side of things and do some testing to verify that we're

1337
00:57:27,800 --> 00:57:28,800
actually running at the frame rate.

1338
00:57:28,800 --> 00:57:29,600
We think we are.

1339
00:57:30,000 --> 00:57:34,200
Because all of this stuff is probably buggy before we test it.

1340
00:57:34,200 --> 00:57:37,100
So not tested yet.

1341
00:57:37,500 --> 00:57:39,600
Probably buggy.

1342
00:57:40,200 --> 00:57:40,900
Right?

1343
00:57:41,200 --> 00:57:42,100
So we will do that.

1344
00:57:42,100 --> 00:57:43,500
You know, what we could do as well.

1345
00:57:43,800 --> 00:57:45,700
We could go in here as a very simple test.

1346
00:57:45,700 --> 00:57:49,300
Not particularly great one, but we can go in here as well and turn

1347
00:57:49,300 --> 00:57:50,200
this back on.

1348
00:57:50,800 --> 00:57:56,700
This would give us a little bit of a sort of an idea if you will of

1349
00:57:56,700 --> 00:57:58,000
what's actually going on.

1350
00:57:58,400 --> 00:57:59,800
It would do our old print out.

1351
00:58:00,000 --> 00:58:02,500
We had so counter elapsed.

1352
00:58:02,900 --> 00:58:11,700
We would just need to go this here, counter elapsed milliseconds per

1353
00:58:11,700 --> 00:58:14,000
frame, like that.

1354
00:58:14,000 --> 00:58:17,500
So the milliseconds per frame is win32, get wall clock.

1355
00:58:17,600 --> 00:58:24,300
Sorry get seconds elapsed like that one thousand and then we would

1356
00:58:24,300 --> 00:58:28,600
just do and counter last counter like that.

1357
00:58:29,000 --> 00:58:29,800
So that would give us

1358
00:58:29,900 --> 00:58:30,100
Us.

1359
00:58:30,100 --> 00:58:34,600
At least a little bit of an idea what's going on in.

1360
00:58:34,600 --> 00:58:36,800
We don't actually need or do we.

1361
00:58:36,800 --> 00:58:40,500
That's Global that counter elapsed.

1362
00:58:40,900 --> 00:58:42,300
We don't actually have that unfortunate.

1363
00:58:42,300 --> 00:58:45,300
Okay, so let's get rid of the frame right here for now.

1364
00:58:45,400 --> 00:58:47,300
Well, that's easy for us to compute again.

1365
00:58:48,000 --> 00:58:50,300
Let's just go ahead and zero that out.

1366
00:58:50,300 --> 00:58:55,700
We'll do that in a second and buffer is redefinition.

1367
00:58:55,800 --> 00:58:58,500
We've already got a buffer, not surprising.

1368
00:58:59,300 --> 00:58:59,800
Let's see.

1369
00:59:00,000 --> 00:59:01,100
That was buffer.

1370
00:59:01,400 --> 00:59:02,600
Well, actually, yes.

1371
00:59:02,600 --> 00:59:06,500
I don't care what it's do FPS buffer and then we're done.

1372
00:59:06,500 --> 00:59:08,800
So I'm just turning this on as a last little thing we do in the fridge

1373
00:59:08,800 --> 00:59:09,900
so we could take a look.

1374
00:59:12,700 --> 00:59:14,000
Oh good.

1375
00:59:14,000 --> 00:59:15,500
It's telling us a warning about this.

1376
00:59:15,500 --> 00:59:18,200
Well, what do you want me to use?

1377
00:59:18,200 --> 00:59:20,900
I guess it's basically giving us a security warning here.

1378
00:59:21,500 --> 00:59:24,500
And that security warning is because you might have a buffer overrun,

1379
00:59:24,500 --> 00:59:26,000
which is fine, but this is debug code.

1380
00:59:26,000 --> 00:59:26,900
So I wish it wouldn't do that.

1381
00:59:26,900 --> 00:59:32,300
We could turn off that warning, but I believe there should be some

1382
00:59:32,300 --> 00:59:34,900
kind of a guarded printf.

1383
00:59:35,800 --> 00:59:36,600
You would think.

1384
00:59:36,600 --> 00:59:38,300
Oh, it's still thinks that's unsafe.

1385
00:59:38,300 --> 00:59:41,300
What would you like me to use underscore S?

1386
00:59:41,300 --> 00:59:41,800
I guess.

1387
00:59:41,900 --> 00:59:42,100
So, yeah.

1388
00:59:42,300 --> 00:59:43,200
Going to use this.

1389
00:59:43,500 --> 00:59:44,900
What do you want me to use?

1390
00:59:45,500 --> 00:59:47,000
Alright, well, hopefully that works.

1391
00:59:47,400 --> 00:59:47,800
Basically.

1392
00:59:47,800 --> 00:59:51,200
They try to increase security by doing these things and they often

1393
00:59:51,200 --> 00:59:51,900
fail in the end up.

1394
00:59:51,900 --> 00:59:52,600
Just annoying you.

1395
00:59:52,600 --> 00:59:55,900
But, you know, they were trying, at least they were trying to do some

1396
00:59:55,900 --> 00:59:56,500
security.

1397
00:59:57,600 --> 00:59:59,500
So we look like, we're pretty close.

1398
00:59:59,500 --> 00:59:59,800
We've got a

1399
01:00:00,000 --> 01:00:03,600
Is to go before we're actually really accurate but it looks like we're

1400
01:00:03,600 --> 01:00:06,000
sort of getting our thirty-three point three, three, three, three,

1401
01:00:06,000 --> 01:00:07,200
three, three, three, three, three.

1402
01:00:07,800 --> 01:00:11,400
We have some reasons why we won't basically the thing that we haven't

1403
01:00:11,400 --> 01:00:16,400
done yet is we don't include this this time information properly and

1404
01:00:16,400 --> 01:00:18,700
some other various things that we're not doing properly.

1405
01:00:19,100 --> 01:00:21,200
So there's definitely some other stuff that we want to kind of do to

1406
01:00:21,200 --> 01:00:24,000
try and make that a little more accurate, but at the moment, it looks

1407
01:00:24,000 --> 01:00:24,800
like we're pretty good.

1408
01:00:24,800 --> 01:00:26,200
So we're getting there.

1409
01:00:26,400 --> 01:00:28,300
So that's good with that.

1410
01:00:28,500 --> 01:00:29,800
We are now at the way.

1411
01:00:30,000 --> 01:00:32,300
We should be at the Q&A because we started three minutes late and it's

1412
01:00:32,300 --> 01:00:33,300
903 now.

1413
01:00:33,700 --> 01:00:35,800
So we should be right where the qh should be.

1414
01:00:39,000 --> 01:00:43,300
So let's go ahead and do some Q&A here.

1415
01:00:43,500 --> 01:00:45,400
I'm going to open up the twitch chat.

1416
01:00:45,500 --> 01:00:49,300
Please make sure to put seem your ettore in your question somewhere,

1417
01:00:49,300 --> 01:00:50,100
so I can see it.

1418
01:00:50,100 --> 01:00:53,100
And please keep the questions to stuff we've done on this dream or in

1419
01:00:53,100 --> 01:00:57,100
some previous dream because stuff about future stuff is stuff.

1420
01:00:57,100 --> 01:00:58,600
We will get to in the future.

1421
01:00:59,000 --> 01:01:03,600
So, alright, let's go ahead and see what we have for questions.

1422
01:01:06,100 --> 01:01:07,400
Let's see.

1423
01:01:09,200 --> 01:01:10,200
If we are locking.

1424
01:01:10,200 --> 01:01:13,600
The framerate won't that mean that this engine will slow down the

1425
01:01:13,600 --> 01:01:14,800
entire game.

1426
01:01:15,000 --> 01:01:18,900
If a person has a bad computer and cannot hit our frame rate.

1427
01:01:20,200 --> 01:01:23,900
Yeah, so we're not locking the frame rate.

1428
01:01:23,900 --> 01:01:28,000
That's kind of a, that's not really what we're trying to do here.

1429
01:01:28,200 --> 01:01:31,200
What we're trying to do is run at a fixed frame rate.

1430
01:01:31,600 --> 01:01:34,500
So what we will do as we go forward,

1431
01:01:34,800 --> 01:01:39,000
Is in this code, this right here, this target hurts.

1432
01:01:39,100 --> 01:01:40,500
We will update what?

1433
01:01:40,500 --> 01:01:41,300
We are trying.

1434
01:01:41,300 --> 01:01:45,900
What the framerate is that we're trying to hit dynamically so that the

1435
01:01:45,900 --> 01:01:48,400
user has a computer that can't even hit 30 frames per second.

1436
01:01:48,400 --> 01:01:49,100
For some reason.

1437
01:01:49,800 --> 01:01:53,200
We will we could drop down to 15 for example, and then the game will

1438
01:01:53,200 --> 01:01:55,500
still run at the right speed, but the frame rate will be very slow, we

1439
01:01:55,500 --> 01:01:56,300
could do that.

1440
01:01:56,600 --> 01:01:59,400
Now I would argue that we should probably just put up a big old box

1441
01:01:59,400 --> 01:02:01,800
that says, you got to buy a new computer because you shouldn't ever

1442
01:02:01,800 --> 01:02:02,900
run a game at 15 frames.

1443
01:02:02,900 --> 01:02:04,300
S basically unplayable.

1444
01:02:04,300 --> 01:02:04,600
But

1445
01:02:04,700 --> 01:02:08,100
But we can decide what we want to do at that point much later, down

1446
01:02:08,100 --> 01:02:11,800
the line, but we're not we're not saying the game has a fixed frame

1447
01:02:11,800 --> 01:02:12,300
rate.

1448
01:02:12,300 --> 01:02:16,800
We're saying that we're fixing the frame rate at any given time so

1449
01:02:16,800 --> 01:02:19,000
that we know when we're going to flip.

1450
01:02:19,000 --> 01:02:22,800
So that our animation is consistent, but we can always change what

1451
01:02:22,800 --> 01:02:24,800
that fixed frame rate is if we want to.

1452
01:02:25,000 --> 01:02:28,600
And then the game will always use whatever we tell it is the framerate

1453
01:02:28,600 --> 01:02:29,900
to do its World updating.

1454
01:02:30,000 --> 01:02:34,200
So we have the flexibility to run at 60 31:20, whatever we want to run

1455
01:02:34,200 --> 01:02:34,600
at based on.

1456
01:02:34,800 --> 01:02:38,300
Speed of the end users machine and the game will respond accordingly.

1457
01:02:42,200 --> 01:02:45,400
Even if you could grab the refresh rate of the monitor, how do you

1458
01:02:45,400 --> 01:02:46,300
synchronize with it?

1459
01:02:46,300 --> 01:02:52,000
Well, so for our prototype prototyping engine, we won't probably

1460
01:02:52,000 --> 01:02:53,200
bother synchronizing with it.

1461
01:02:53,200 --> 01:02:58,000
Direct three directdraw actually does have a thing that allows you to

1462
01:02:58,000 --> 01:02:59,700
wait for the vertical blank and we

1463
01:03:00,100 --> 01:03:01,400
Use that if we wanted to.

1464
01:03:01,400 --> 01:03:04,200
Again, depends, if you want to use direct draw, which nowadays is very

1465
01:03:04,200 --> 01:03:04,800
deprecated.

1466
01:03:04,800 --> 01:03:06,100
Unfortunately, I don't know why.

1467
01:03:06,100 --> 01:03:10,300
It would be nice if they'd maintained it, but basically for a

1468
01:03:10,300 --> 01:03:12,300
particular we probably won't sink with the monitor.

1469
01:03:12,500 --> 01:03:17,200
So that's fine because all that means is that will be like off one

1470
01:03:17,200 --> 01:03:17,500
frame.

1471
01:03:17,500 --> 01:03:22,200
Potentially all will get a real get some tearing like a line down the

1472
01:03:22,200 --> 01:03:25,500
middle as the as the frame is flipped.

1473
01:03:26,300 --> 01:03:29,200
But when we actually go to do the final platform layer will be

1474
01:03:29,200 --> 01:03:29,800
outputting through

1475
01:03:30,000 --> 01:03:33,300
the opengl or direct3d, and those have ability to set a flag.

1476
01:03:33,300 --> 01:03:35,000
That just says automatically sync.

1477
01:03:35,000 --> 01:03:37,000
Like, when you do a flip flip it with the monitor.

1478
01:03:37,200 --> 01:03:38,900
So we won't have to worry about that.

1479
01:03:38,900 --> 01:03:40,700
That will just be taken care of by the operating system.

1480
01:03:40,700 --> 01:03:43,300
When we push a frame down, it'll automatically sync to it.

1481
01:03:43,400 --> 01:03:46,200
So we don't actually have to do that ourselves for the, for the

1482
01:03:46,200 --> 01:03:46,800
shipping game.

1483
01:03:51,700 --> 01:03:54,700
Doesn't the sleep function go in the surrounding If instead of the

1484
01:03:54,700 --> 01:03:57,400
while loop, well, it can go either place.

1485
01:03:57,900 --> 01:03:59,400
I should think, right?

1486
01:04:00,400 --> 01:04:03,200
Because basically this should I mean one of the things we should do

1487
01:04:03,300 --> 01:04:05,900
obviously we could certainly put it.

1488
01:04:08,200 --> 01:04:08,700
Well.

1489
01:04:09,600 --> 01:04:12,500
Yeah, we could we could certainly put it here and you would assume

1490
01:04:12,500 --> 01:04:14,100
that that was, that was accurate.

1491
01:04:14,500 --> 01:04:18,500
But really, the thing that I didn't do and need to do here is make

1492
01:04:18,500 --> 01:04:20,900
sure that we don't bother ever climb the operating system to sleep

1493
01:04:20,900 --> 01:04:21,200
isn't.

1494
01:04:21,500 --> 01:04:21,900
Out.

1495
01:04:22,100 --> 01:04:23,300
So that's a bit of a mistake.

1496
01:04:23,400 --> 01:04:25,500
And so yeah what the person was asking is why don't we just do this

1497
01:04:25,500 --> 01:04:26,600
outside and they're totally right?

1498
01:04:26,600 --> 01:04:29,300
We can do it outside because there's no need to do it inside the while

1499
01:04:29,300 --> 01:04:32,500
loop because the second time through the while loop sleep milliseconds

1500
01:04:32,500 --> 01:04:33,600
is always going to be 0.

1501
01:04:33,600 --> 01:04:37,300
Presumably assuming we actually slept for the time that we thought we

1502
01:04:37,300 --> 01:04:38,000
were going to sleep.

1503
01:04:38,300 --> 01:04:39,200
So, I don't know.

1504
01:04:40,300 --> 01:04:41,500
You could put it out there.

1505
01:04:41,500 --> 01:04:42,600
You can put it in here.

1506
01:04:42,600 --> 01:04:46,300
It doesn't actually matter where you put it as long as you checked the

1507
01:04:46,300 --> 01:04:48,700
milliseconds to make sure that they're greater than 0.

1508
01:04:49,000 --> 01:04:50,800
So I don't know.

1509
01:04:52,800 --> 01:04:56,000
I feel like if it's inside the while loop, it catches some problems.

1510
01:04:56,100 --> 01:04:59,200
Like let's say, sleep doesn't sleep us for the time for some reason

1511
01:04:59,200 --> 01:05:02,300
because the operating system just thought it was going to just wake us

1512
01:05:02,300 --> 01:05:03,200
up writing, right away.

1513
01:05:03,200 --> 01:05:03,500
Again.

1514
01:05:03,500 --> 01:05:06,800
For some reason, then we just spin lock for no reason and maybe we

1515
01:05:06,800 --> 01:05:09,100
want to give the operating system the chance to sleep us again.

1516
01:05:10,800 --> 01:05:12,300
So I feel a little more comfortable.

1517
01:05:13,500 --> 01:05:14,400
Having it in here.

1518
01:05:15,100 --> 01:05:19,000
Although that said, it does do one extra computation, which maybe we

1519
01:05:19,000 --> 01:05:21,500
would argue is bad for the spinlock.

1520
01:05:21,500 --> 01:05:22,300
So I don't know.

1521
01:05:22,700 --> 01:05:23,800
It's really hard to say.

1522
01:05:24,500 --> 01:05:27,900
I guess we'll leave it out for now, but I could go either way on that

1523
01:05:28,300 --> 01:05:31,600
and and whatever you want to do in your version of this code.

1524
01:05:32,800 --> 01:05:34,300
You can make that judgment call.

1525
01:05:37,700 --> 01:05:39,700
Let's see.

1526
01:05:46,900 --> 01:05:48,300
Does win32 fill sound buffer?

1527
01:05:48,300 --> 01:05:50,200
Need to come after the vsync loop?

1528
01:05:50,400 --> 01:05:50,700
Yeah.

1529
01:05:50,700 --> 01:05:54,100
Well, so we need to and I'll put in to do just so you guys know who

1530
01:05:54,100 --> 01:05:56,800
are following along at home, who might be confused about that.

1531
01:05:57,400 --> 01:05:58,600
Where is okay.

1532
01:05:58,600 --> 01:05:59,600
So basically

1533
01:06:02,200 --> 01:06:08,600
Sound is wrong now because we haven't updated it to go with the new

1534
01:06:08,600 --> 01:06:09,600
frame Loop.

1535
01:06:09,800 --> 01:06:11,300
So I haven't touched down at all.

1536
01:06:11,600 --> 01:06:16,400
So sound is just wrong and I don't want to patch sound right now.

1537
01:06:16,400 --> 01:06:21,200
Like I don't want to to fix this or anything because that's

1538
01:06:21,200 --> 01:06:21,500
interesting.

1539
01:06:21,500 --> 01:06:21,900
I don't know why.

1540
01:06:21,900 --> 01:06:24,300
This is note should be.

1541
01:06:25,100 --> 01:06:29,300
Oh, I guess it's just saying stuff because that basically I don't want

1542
01:06:29,300 --> 01:06:31,900
to touch down at all because we're going to redo how

1543
01:06:32,000 --> 01:06:33,000
During the sound timing.

1544
01:06:33,300 --> 01:06:36,400
So I want to do that in line with with with the rest of it.

1545
01:06:36,500 --> 01:06:38,600
So don't think about sound at all.

1546
01:06:38,600 --> 01:06:40,000
We haven't looked at sound at all.

1547
01:06:40,100 --> 01:06:43,600
It's totally wrong and doesn't obey the diagram that I was drawing at

1548
01:06:43,600 --> 01:06:45,200
the beginning that I said that we wanted to do.

1549
01:06:45,200 --> 01:06:46,000
So tomorrow.

1550
01:06:46,000 --> 01:06:48,600
Our job is to make sound line up with that diagram.

1551
01:06:54,500 --> 01:06:58,500
Check dwm, get composition timing info on msdn.

1552
01:06:58,500 --> 01:07:02,100
If arrow is on well, I'd rather do something that that worked without

1553
01:07:02,100 --> 01:07:02,600
Arrow.

1554
01:07:02,600 --> 01:07:05,400
Because I'd like to work on Windows XP and the direct draw one does

1555
01:07:05,400 --> 01:07:07,800
work on on Windows XP.

1556
01:07:07,800 --> 01:07:09,400
So I probably won't use that.

1557
01:07:09,400 --> 01:07:11,100
But thank you for pointing that out.

1558
01:07:13,100 --> 01:07:15,700
Could you explain the potential advantages or detriments to handling

1559
01:07:15,700 --> 01:07:18,000
update and render on separate timers threads?

1560
01:07:18,000 --> 01:07:20,800
Is there ever a good reason for a programmer to update the game State

1561
01:07:20,800 --> 01:07:23,200
more frequently than they render it to the screen.

1562
01:07:25,100 --> 01:07:29,300
So, no, there isn't a good reason to update the game State more often

1563
01:07:29,300 --> 01:07:31,300
than they render it to the street to the screen.

1564
01:07:32,000 --> 01:07:36,500
However, there is a good reason, tightly related to that.

1565
01:07:36,500 --> 01:07:41,800
There is a good reason why you may need to subdivide some aspects of

1566
01:07:41,800 --> 01:07:46,900
the update into more granular updates than the rendering.

1567
01:07:47,300 --> 01:07:49,900
And so the example of that would be

1568
01:07:51,100 --> 01:07:53,200
Let's say that your physics time.

1569
01:07:53,200 --> 01:07:55,000
Step needs to be one-to-one.

1570
01:07:55,600 --> 01:07:57,100
1/20 of a second.

1571
01:07:57,200 --> 01:08:00,100
But your game frame rate is only 30 frames a second.

1572
01:08:00,200 --> 01:08:03,300
Well, then you kind of are in a situation where you're going to have

1573
01:08:03,300 --> 01:08:06,300
to run the physics update more frequently.

1574
01:08:06,900 --> 01:08:09,500
So you have to kind of run it on a subdivided time step.

1575
01:08:10,400 --> 01:08:16,600
So there are definitely ways that you could do that with separate

1576
01:08:16,600 --> 01:08:17,899
threads if you wanted to.

1577
01:08:17,899 --> 01:08:20,500
There's, there's a lot of different ways you can attach.

1578
01:08:21,000 --> 01:08:21,899
That problem.

1579
01:08:21,899 --> 01:08:24,600
But obviously the simplest one that doesn't involve threading or any

1580
01:08:24,600 --> 01:08:27,399
sort of stuff like that is just to run the physics in like a for I

1581
01:08:27,399 --> 01:08:29,899
Loop inside the game update, its face like we're going to do the

1582
01:08:29,899 --> 01:08:30,700
update for the game.

1583
01:08:30,800 --> 01:08:34,200
We need to update the physics four times for everyone update of the

1584
01:08:34,200 --> 01:08:34,399
game.

1585
01:08:34,399 --> 01:08:38,600
So we just call it four times with a quarter of the time step and

1586
01:08:38,600 --> 01:08:39,000
we're done.

1587
01:08:39,500 --> 01:08:42,600
So that definitely does happen whether or not you should multi-thread

1588
01:08:42,600 --> 01:08:45,300
that and then update the game at a different time.

1589
01:08:45,300 --> 01:08:45,800
I mean,

1590
01:08:47,500 --> 01:08:50,399
I don't like that kind of thing, but I wouldn't necessarily say that

1591
01:08:50,399 --> 01:08:54,600
it's wrong because you can sort of see Arguments for why you might

1592
01:08:54,600 --> 01:08:55,300
want to do that.

1593
01:08:55,300 --> 01:08:56,899
I mean, I don't know, I don't love it.

1594
01:08:56,899 --> 01:08:59,800
But but I would be hesitant to say that it was the wrong way to think.

1595
01:09:00,000 --> 01:09:01,700
Just I don't particularly love that.

1596
01:09:02,700 --> 01:09:05,700
So I think it adds a lot of complexity and I'm not sure you get a lot

1597
01:09:05,700 --> 01:09:06,700
of benefit for it.

1598
01:09:09,899 --> 01:09:11,200
Let's see.

1599
01:09:17,600 --> 01:09:19,300
If we are locking.

1600
01:09:19,300 --> 01:09:21,600
No, okay, already answered that.

1601
01:09:27,300 --> 01:09:30,300
How would you adjust your memory management strategy for devices with

1602
01:09:30,300 --> 01:09:31,399
limited memory.

1603
01:09:33,100 --> 01:09:36,600
We haven't done a memory management strategy yet.

1604
01:09:36,600 --> 01:09:39,500
So wait until we actually do our memory management and then that

1605
01:09:39,500 --> 01:09:40,899
should become clear.

1606
01:09:41,000 --> 01:09:41,500
I think.

1607
01:09:42,899 --> 01:09:45,300
What we miss frame rate due to the sleep because while you're

1608
01:09:45,300 --> 01:09:46,500
truncating to Ms.

1609
01:09:46,500 --> 01:09:49,800
You aren't accounting for the up to 1 millisecond granularity would

1610
01:09:49,800 --> 01:09:52,300
just removing one millisecond from the weight work.

1611
01:09:54,100 --> 01:09:59,500
Well, I don't think so because I mean basically this is going to give

1612
01:09:59,500 --> 01:10:02,200
us how many milliseconds to sleep and it's going to be fractional.

1613
01:10:02,200 --> 01:10:03,400
So this value is going to come back.

1614
01:10:03,400 --> 01:10:04,400
Like ten point three.

1615
01:10:04,400 --> 01:10:05,100
Milliseconds.

1616
01:10:05,300 --> 01:10:09,000
Let's say if we then truncate it, we get 10 milliseconds.

1617
01:10:09,300 --> 01:10:13,900
That gives us point three milliseconds of time that has to be spent

1618
01:10:13,900 --> 01:10:14,700
spin locking.

1619
01:10:15,000 --> 01:10:17,300
So I don't think we would miss the framerate at all there.

1620
01:10:17,700 --> 01:10:18,200
Now.

1621
01:10:18,700 --> 01:10:22,400
There is a separate problem, which is that we're not accounting for

1622
01:10:22,400 --> 01:10:23,200
the fact that if we

1623
01:10:23,300 --> 01:10:27,100
Actually, we're talking about doing this in sync with something.

1624
01:10:27,300 --> 01:10:31,500
We would want to account for how long this took, and wait for how much

1625
01:10:31,500 --> 01:10:32,400
- that.

1626
01:10:32,400 --> 01:10:36,400
But we're in, we're encapsulating all of the time because we're using

1627
01:10:36,400 --> 01:10:37,400
our encounter.

1628
01:10:37,900 --> 01:10:41,500
We're always counting for all the loop time, because we're subtracting

1629
01:10:41,500 --> 01:10:43,200
from last counter, which gets sent here.

1630
01:10:43,600 --> 01:10:46,100
So we're actually accounting for the time that it takes to flip as

1631
01:10:46,100 --> 01:10:47,600
well, but I don't know.

1632
01:10:47,600 --> 01:10:49,800
So I don't actually think we would need to do that.

1633
01:10:49,800 --> 01:10:52,400
But if the MS, if the Sleep MS.

1634
01:10:53,300 --> 01:10:58,800
Lee causes us to sometimes sleep, an extra Ms.

1635
01:10:58,800 --> 01:10:59,100
Then.

1636
01:10:59,100 --> 01:11:00,500
Yes, we want to subtract that.

1637
01:11:00,500 --> 01:11:04,900
Now, something we could do here just for our own benefit is assuming

1638
01:11:04,900 --> 01:11:08,300
that we went through here and did the target seconds per frame thing

1639
01:11:08,300 --> 01:11:14,300
and whatever we could assert basically that the first time when we

1640
01:11:14,300 --> 01:11:19,800
actually check the time here, we could assert that it that it is like

1641
01:11:19,800 --> 01:11:20,600
this, right?

1642
01:11:20,600 --> 01:11:23,100
It could assert that test s laps for frame is

1643
01:11:23,400 --> 01:11:24,600
Than 0, right?

1644
01:11:25,600 --> 01:11:29,700
Or sorry is is is less than Target s, right?

1645
01:11:29,700 --> 01:11:31,800
So to sort that we didn't sleep too long.

1646
01:11:32,400 --> 01:11:35,600
We could do that and we can see what happens there.

1647
01:11:36,100 --> 01:11:40,200
Just to see if we ever Miss and we don't, which is what I would

1648
01:11:40,200 --> 01:11:41,800
expect, right?

1649
01:11:42,500 --> 01:11:43,800
So basically, we can see what I'm doing.

1650
01:11:43,800 --> 01:11:45,100
There is I'm just saying, Hey look.

1651
01:11:46,100 --> 01:11:50,300
After you do the Sleep, let's verify that we didn't, we didn't like

1652
01:11:50,400 --> 01:11:51,800
sleep past the frame time.

1653
01:11:51,800 --> 01:11:54,800
So we didn't do the thing that you were worried about it doing and so,

1654
01:11:54,800 --> 01:11:58,500
I don't think it's going to do that from the readout here.

1655
01:11:58,500 --> 01:11:59,000
You do.

1656
01:11:59,000 --> 01:11:59,900
Notice that this is just

1657
01:12:00,000 --> 01:12:00,700
Not right.

1658
01:12:00,700 --> 01:12:03,200
Like this should be really close to thirty three point three, three,

1659
01:12:03,500 --> 01:12:03,900
and it's not.

1660
01:12:03,900 --> 01:12:05,000
So we still have bugs.

1661
01:12:05,000 --> 01:12:08,100
So I don't want to say that we're not buggy, but I just, I just don't

1662
01:12:08,100 --> 01:12:10,200
think that thing you're talking about is actually happening, or if it

1663
01:12:10,200 --> 01:12:10,700
is happening.

1664
01:12:10,700 --> 01:12:14,500
It's happening a different way because we should be, we are starting

1665
01:12:14,500 --> 01:12:16,400
this year and we now can see that.

1666
01:12:17,500 --> 01:12:20,000
That that's that's not actually the case, right?

1667
01:12:21,200 --> 01:12:21,900
Hopefully that's clear.

1668
01:12:21,900 --> 01:12:22,400
What's happening?

1669
01:12:22,400 --> 01:12:22,700
There.

1670
01:12:33,200 --> 01:12:34,800
Carl and oh, Bloom says, shouldn't tear.

1671
01:12:34,800 --> 01:12:37,000
If we were in windowed mode in Windows, at least, unless people

1672
01:12:37,000 --> 01:12:37,500
disabled.

1673
01:12:37,500 --> 01:12:38,300
Wdm are.

1674
01:12:38,300 --> 01:12:38,500
Oh, yeah.

1675
01:12:38,500 --> 01:12:41,500
I think I assume that Arrow does all of its compositing on a flip.

1676
01:12:41,500 --> 01:12:44,400
So we shouldn't see tearing, but if you are on Windows XP, you might,

1677
01:12:44,400 --> 01:12:45,000
I don't know.

1678
01:12:45,000 --> 01:12:48,900
I am not sure depends on the operating system and what you have.

1679
01:12:57,700 --> 01:13:00,300
Can you fix the physics animation frame rate without fixing the

1680
01:13:00,300 --> 01:13:01,300
graphics frame rate?

1681
01:13:01,300 --> 01:13:04,300
So if you miss a frame, just run the physics more than once before

1682
01:13:04,300 --> 01:13:06,600
rendering the next frame know that that doesn't help you.

1683
01:13:06,600 --> 01:13:08,900
You still showed the wrong thing, right?

1684
01:13:09,300 --> 01:13:11,500
We don't have to run the physics multiple times because our physics is

1685
01:13:11,500 --> 01:13:13,800
going to allow large time steps, probably.

1686
01:13:14,300 --> 01:13:17,100
So we'll always have the physics be able to run the right amount of

1687
01:13:17,100 --> 01:13:19,800
time to catch up to where it thinks it should be.

1688
01:13:20,400 --> 01:13:22,900
But just to sort of illustrate the problem here.

1689
01:13:24,600 --> 01:13:26,100
Based on what you were sort of saying.

1690
01:13:26,600 --> 01:13:28,300
So I'm going to go ahead and clear this out.

1691
01:13:29,300 --> 01:13:30,000
Fantastic.

1692
01:13:30,000 --> 01:13:32,900
Of course, that's exactly what I want to do is make it tiny for some

1693
01:13:32,900 --> 01:13:33,300
reason.

1694
01:13:34,000 --> 01:13:36,400
I do not understand why I did that but that's fine.

1695
01:13:37,200 --> 01:13:39,400
Let's go ahead and zoom back in there.

1696
01:13:39,900 --> 01:13:40,200
Wait.

1697
01:13:40,200 --> 01:13:42,600
Oh now the zoom is to what what?

1698
01:13:43,200 --> 01:13:44,900
This is not look like a good program.

1699
01:13:45,600 --> 01:13:49,600
No, smooth draw.

1700
01:13:50,200 --> 01:13:51,900
No.

1701
01:13:53,300 --> 01:14:00,600
Okay, anyway, so basically what I was trying to say to that question

1702
01:14:00,600 --> 01:14:05,500
is, let's say we're here and we've computed, you know, so we're on our

1703
01:14:05,500 --> 01:14:06,300
fixed frame rate.

1704
01:14:06,300 --> 01:14:09,700
So we advance the world 16 milliseconds, right?

1705
01:14:09,700 --> 01:14:15,100
We advance the world, we plus 16 milliseconds and we That was supposed

1706
01:14:15,100 --> 01:14:18,100
to show up here, but we missed it because we took too long and we

1707
01:14:18,100 --> 01:14:18,600
ended up here.

1708
01:14:18,600 --> 01:14:23,300
So it was basically a plus 16 millisecond update and we end up

1709
01:14:23,600 --> 01:14:26,100
With a 30 millisecond interval, right?

1710
01:14:27,200 --> 01:14:30,500
What I'm trying to illustrate here is this is wrong.

1711
01:14:30,500 --> 01:14:31,700
No matter what.

1712
01:14:31,700 --> 01:14:34,700
Now, it's just you showed a wrong frame.

1713
01:14:34,800 --> 01:14:38,900
This Frame should have been at plus 33 milliseconds in physics time,

1714
01:14:39,100 --> 01:14:41,600
but it was actually at plus 16 milliseconds and physics time.

1715
01:14:41,800 --> 01:14:44,100
So it's just wrong, wrong, wrong wrong.

1716
01:14:44,100 --> 01:14:45,300
It's all wrong.

1717
01:14:45,300 --> 01:14:47,400
It is all wrong.

1718
01:14:47,900 --> 01:14:50,300
So what a lot of people do is exactly what you're saying and it's

1719
01:14:50,300 --> 01:14:51,000
totally wrong.

1720
01:14:51,000 --> 01:14:54,200
What they do is they then go okay I missed that.

1721
01:14:54,200 --> 01:14:56,500
So what I'll do is it took 33

1722
01:14:56,900 --> 01:14:57,100
Sounds.

1723
01:14:57,200 --> 01:14:58,600
So I'll make this Frame.

1724
01:14:58,800 --> 01:14:59,900
Add 33.

1725
01:15:00,000 --> 01:15:00,500
The time.

1726
01:15:00,600 --> 01:15:03,200
But now this Frame might flip in 16.

1727
01:15:03,200 --> 01:15:06,800
So now what you've done is you've like wronged yourself twice.

1728
01:15:07,000 --> 01:15:09,500
This is 2x wrong, right?

1729
01:15:09,500 --> 01:15:15,100
So this is always wrong and no, don't like know much like Smooth draw

1730
01:15:15,100 --> 01:15:15,200
is.

1731
01:15:15,200 --> 01:15:16,300
No, don't do it.

1732
01:15:16,300 --> 01:15:16,800
That way.

1733
01:15:17,100 --> 01:15:22,000
What you need to do is try to figure out how much time you think this

1734
01:15:22,000 --> 01:15:23,800
Frame will take to draw.

1735
01:15:24,100 --> 01:15:28,300
And that is how much you need to update your physics by never use the

1736
01:15:28,300 --> 01:15:29,800
last frames time.

1737
01:15:30,000 --> 01:15:33,900
I'm unless you then decide that that is exactly how long you're going

1738
01:15:33,900 --> 01:15:38,200
to gate this Frame Time by and you think you can hit it like the

1739
01:15:38,200 --> 01:15:41,100
previous frames time doesn't tell you anything about this frames time

1740
01:15:41,100 --> 01:15:43,000
because you don't know what happened on this Frame.

1741
01:15:43,100 --> 01:15:45,400
It could have been that something unusual happened on this Frame, that

1742
01:15:45,400 --> 01:15:46,500
isn't going to happen on this Frame.

1743
01:15:46,500 --> 01:15:47,900
And so they're not going to be similar times.

1744
01:15:48,300 --> 01:15:51,900
So you need to be aware of all this stuff and make good decisions,

1745
01:15:51,900 --> 01:15:57,000
instead of just mindlessly, forwarding that last frame time for this

1746
01:15:57,000 --> 01:15:59,100
Frame time, because that's just totally wrong, a lot of games do it,

1747
01:15:59,100 --> 01:15:59,800
and it's totally wrong.

1748
01:16:00,300 --> 01:16:01,700
It's never correct.

1749
01:16:10,400 --> 01:16:12,600
Why are we handling sound and video differently?

1750
01:16:15,400 --> 01:16:15,700
I'm afraid.

1751
01:16:15,700 --> 01:16:17,000
I'm not sure what that means.

1752
01:16:17,300 --> 01:16:18,800
If you could tell me what you mean by that.

1753
01:16:18,800 --> 01:16:20,400
I will try to answer that question.

1754
01:16:20,400 --> 01:16:22,900
I suspect it's probably a good question, but I'm just not sure exactly

1755
01:16:22,900 --> 01:16:23,400
what it means.

1756
01:16:25,600 --> 01:16:26,400
Let's see.

1757
01:16:27,600 --> 01:16:29,600
Bring Cruiser check if Deidre works on Windows 8.

1758
01:16:29,600 --> 01:16:31,200
I have problems with old games that use it.

1759
01:16:31,200 --> 01:16:33,900
Well, yeah, I mean, we're not actually going to use D draw just to be

1760
01:16:33,900 --> 01:16:34,400
clear.

1761
01:16:34,600 --> 01:16:37,200
We would literally just use the D draw, call that gets the monitor

1762
01:16:37,200 --> 01:16:40,300
refresh rate, and then we test to see if that was reliable.

1763
01:16:40,300 --> 01:16:42,600
We're not actually to use, direct draw to draw.

1764
01:16:44,500 --> 01:16:46,200
Yeah, cuz I don't think that's very supported.

1765
01:16:46,400 --> 01:16:47,300
It should be.

1766
01:16:47,600 --> 01:16:48,600
I wish they had done it.

1767
01:16:53,400 --> 01:16:55,900
Wouldn't you want to fill the screen buffer before you hit the frame

1768
01:16:55,900 --> 01:16:58,700
flip points that the monitor could grab the correct data when it

1769
01:16:58,700 --> 01:16:59,300
refreshes.

1770
01:16:59,300 --> 01:17:03,400
Well, yes, but, you have to remember, we don't know when the monitor

1771
01:17:03,400 --> 01:17:04,200
is refreshing.

1772
01:17:04,400 --> 01:17:08,400
So all we're doing here is we're just creating a loop that will keep

1773
01:17:08,400 --> 01:17:11,000
our game running at 30 frames a second.

1774
01:17:11,000 --> 01:17:15,300
So that all of our timing decisions will be correct later when we do a

1775
01:17:15,300 --> 01:17:19,900
win32 layer that outputs through one of the modern graphic apis, like

1776
01:17:19,900 --> 01:17:23,100
opengl and direct3d, then that we will

1777
01:17:23,200 --> 01:17:25,600
A different strategy of doing exactly what you're saying, which is

1778
01:17:25,600 --> 01:17:28,500
pushing the frame down and then waiting and letting the flip happen at

1779
01:17:28,500 --> 01:17:31,400
the right time, but we don't even know when the flip is happening

1780
01:17:31,400 --> 01:17:31,500
here.

1781
01:17:31,500 --> 01:17:35,200
So we can't actually do anything about that.

1782
01:17:36,500 --> 01:17:37,200
There's just, no way.

1783
01:17:37,200 --> 01:17:41,400
So what we'd rather do is wait the right amount of time here before we

1784
01:17:41,400 --> 01:17:41,700
flip.

1785
01:17:41,700 --> 01:17:43,900
So that we know that our flips are always happening.

1786
01:17:44,100 --> 01:17:46,400
Because remember, this is variable time up here.

1787
01:17:46,400 --> 01:17:49,900
The game may take variable time to update and this will take a

1788
01:17:49,900 --> 01:17:53,000
constant amount of time roughly or should so we want to do.

1789
01:17:53,100 --> 01:17:56,400
Is wait to make sure we're up at the 33 millisecond time?

1790
01:17:56,400 --> 01:17:58,200
Then do the flip right there.

1791
01:18:04,100 --> 01:18:06,100
Isn't d-word an integer.

1792
01:18:08,600 --> 01:18:14,900
Yes, but why sorry, it's an unsigned 32-bit integer, but I don't

1793
01:18:14,900 --> 01:18:16,000
understand the question.

1794
01:18:16,500 --> 01:18:17,900
It is, it is.

1795
01:18:18,500 --> 01:18:22,300
But if you could, if you could tell me why you were asking that, I may

1796
01:18:22,300 --> 01:18:25,800
be able to clarify more if that makes sense.

1797
01:18:31,600 --> 01:18:31,900
Sorry.

1798
01:18:31,900 --> 01:18:34,300
Go off topic, but will the art and Music Creation?

1799
01:18:34,300 --> 01:18:35,500
Be live-streamed.

1800
01:18:35,800 --> 01:18:38,600
No, those are done by other people.

1801
01:18:38,600 --> 01:18:40,200
So that's a separate thing.

1802
01:18:41,500 --> 01:18:44,500
What do you think about having a fixed physics time unconnected to the

1803
01:18:44,500 --> 01:18:47,600
drawn frame Time by interpreting positions of objects based on their

1804
01:18:47,600 --> 01:18:48,600
time differences?

1805
01:18:54,900 --> 01:18:56,900
The answer is, I don't really know what I think about it because I've

1806
01:18:56,900 --> 01:18:57,900
never done it that way.

1807
01:18:59,100 --> 01:19:02,500
There are some attractive features of it, which is that?

1808
01:19:02,700 --> 01:19:05,900
It kind of lets you have a more consistent gameplay experience.

1809
01:19:05,900 --> 01:19:07,800
Potentially, if it's done, right?

1810
01:19:07,800 --> 01:19:11,100
Because it would allow you to make sure that the physics plays the

1811
01:19:11,100 --> 01:19:15,700
same in some sense on all platforms, whether it's a 50 hertz, 60 hertz

1812
01:19:15,700 --> 01:19:18,500
display, something like that, but

1813
01:19:20,000 --> 01:19:25,000
I feel like you're doing a lot of extra weird stuff there that may

1814
01:19:25,000 --> 01:19:28,700
actually end up giving you a worse experience because the user is

1815
01:19:28,700 --> 01:19:31,500
putting in, put in at a time.

1816
01:19:31,500 --> 01:19:33,500
That actually is before the time.

1817
01:19:33,500 --> 01:19:37,300
That is the latest thing, the physics or Eddie knows to be true.

1818
01:19:37,600 --> 01:19:41,200
So, the user actually now has input lag, that they wouldn't have had

1819
01:19:41,200 --> 01:19:42,300
before an input.

1820
01:19:42,300 --> 01:19:44,500
Lag is not good for gameplay experience.

1821
01:19:45,600 --> 01:19:46,900
So I really don't know.

1822
01:19:47,400 --> 01:19:50,600
I'd be torn, I don't think it's a great idea.

1823
01:19:50,600 --> 01:19:52,100
But maybe if you did it, right?

1824
01:19:52,100 --> 01:19:52,600
It is.

1825
01:19:52,600 --> 01:19:53,500
So I don't know.

1826
01:19:53,500 --> 01:19:56,800
I can't speak to it really in any other than a gut reaction because

1827
01:19:56,800 --> 01:19:58,700
I've never implemented the game that way myself.

1828
01:20:00,400 --> 01:20:03,300
Anytime you compute World update, shouldn't that just set something

1829
01:20:03,300 --> 01:20:05,900
that says if we get there early wait until it's ready.

1830
01:20:06,200 --> 01:20:09,100
Doesn't that also handle the new Dynamic vsync stuff.

1831
01:20:09,400 --> 01:20:12,500
I always wait if you beat your time, but if you miss you get to update

1832
01:20:12,500 --> 01:20:14,100
right when you're done without tearing.

1833
01:20:16,400 --> 01:20:22,500
Yeah, I mean, that is, that is in some sense, a quote-unquote benefit

1834
01:20:22,500 --> 01:20:26,300
of the variable sink stuff, but the point is never miss.

1835
01:20:26,500 --> 01:20:30,000
Like, you should never ever ever miss your frame rate or it's

1836
01:20:30,200 --> 01:20:31,000
To be a bad experience.

1837
01:20:31,000 --> 01:20:34,300
Like, unless you only missed your frame rate by like a tiny, tiny

1838
01:20:34,300 --> 01:20:34,900
fraction.

1839
01:20:35,900 --> 01:20:40,100
In which case, that maybe the user couldn't perceive, and maybe that's

1840
01:20:40,100 --> 01:20:41,300
a good thing about those variable.

1841
01:20:41,300 --> 01:20:44,800
V6 is like, hey, I missed it by just a tiny, tiny amount and flip then

1842
01:20:44,800 --> 01:20:45,400
that's fine.

1843
01:20:45,900 --> 01:20:49,500
But you kind of need to make sure you never miss by anything other

1844
01:20:49,500 --> 01:20:51,300
than the tiniest fraction even in that case.

1845
01:20:51,300 --> 01:20:54,500
And so if you can only ever Miss by the tiniest fraction, you should

1846
01:20:54,500 --> 01:20:55,300
just not miss it.

1847
01:20:55,300 --> 01:20:58,900
All like I mean, it's not that different saying I have to hit 17

1848
01:20:58,900 --> 01:20:59,800
milliseconds versus

1849
01:21:00,000 --> 01:21:03,800
in point six, six, six, six, six milliseconds, so I don't really see

1850
01:21:03,800 --> 01:21:06,600
there being that much of a difference between those two things, but

1851
01:21:07,000 --> 01:21:07,400
you know,

1852
01:21:09,500 --> 01:21:10,200
It is what it is.

1853
01:21:10,800 --> 01:21:15,100
Certainly it's not like bad that they're doing the variables think

1854
01:21:15,100 --> 01:21:15,300
thing.

1855
01:21:15,300 --> 01:21:18,400
It's always better to have a variable Sigma honor because there's more

1856
01:21:18,400 --> 01:21:19,200
you could do with it.

1857
01:21:19,200 --> 01:21:19,800
Right?

1858
01:21:20,900 --> 01:21:22,400
It can only ever help.

1859
01:21:22,400 --> 01:21:25,600
It was not a hurt unless they broke something when they started doing

1860
01:21:25,600 --> 01:21:26,300
that, right?

1861
01:21:26,900 --> 01:21:29,600
So it is always better to have a variable sink monitor.

1862
01:21:29,900 --> 01:21:31,600
It's just like,

1863
01:21:33,300 --> 01:21:37,000
I just don't know if it's worth the cost or whatever that they mean it

1864
01:21:37,100 --> 01:21:37,500
eventually.

1865
01:21:37,500 --> 01:21:38,000
She brilliant.

1866
01:21:38,000 --> 01:21:40,300
Presumably, just be free to kind of have that logic in there or

1867
01:21:40,300 --> 01:21:41,800
something and then we just always want it.

1868
01:21:41,800 --> 01:21:42,400
But it's like

1869
01:21:43,400 --> 01:21:45,500
Do I really see much of a benefit to it?

1870
01:21:45,500 --> 01:21:47,900
No, it's like a super, super minor incremental thing.

1871
01:21:47,900 --> 01:21:49,500
Like it's not, it's not a big deal.

1872
01:21:49,600 --> 01:21:50,200
I feel like.

1873
01:21:50,300 --> 01:21:53,100
So that's that's all I was trying to say about that.

1874
01:21:53,200 --> 01:21:55,500
I'm not trying to like pesum eyes, those monitors and time with God

1875
01:21:55,500 --> 01:21:56,200
their crap.

1876
01:21:56,500 --> 01:21:58,200
I think they are better than what we have.

1877
01:21:58,200 --> 01:22:00,100
They're just not much better.

1878
01:22:09,800 --> 01:22:10,600
Let's see.

1879
01:22:10,600 --> 01:22:13,900
I think that might be all might be it.

1880
01:22:15,800 --> 01:22:17,200
That might be it.

1881
01:22:18,000 --> 01:22:19,200
Are we done with the Q&A?

1882
01:22:19,300 --> 01:22:20,600
Are we is that it for Q and A.

1883
01:22:20,600 --> 01:22:22,900
I think we maybe don't the Q&A five minutes early.

1884
01:22:24,100 --> 01:22:25,100
That is good stuff.

1885
01:22:25,400 --> 01:22:26,600
That is very good stuff.

1886
01:22:28,100 --> 01:22:28,700
All right.

1887
01:22:28,800 --> 01:22:33,300
Well, I mean, I will wait for another minute to see if there's any

1888
01:22:33,300 --> 01:22:37,700
last questions that come in to use up our remaining now four minutes,

1889
01:22:38,100 --> 01:22:42,300
but if not, I think we have we have ended the stream a little bit

1890
01:22:42,300 --> 01:22:42,600
early.

1891
01:22:42,600 --> 01:22:45,200
Even though we started late, we made good time today.

1892
01:22:45,500 --> 01:22:48,200
Although I really wished I could have finished up sound today as well.

1893
01:22:48,700 --> 01:22:50,100
But you know what, we'll do it tomorrow.

1894
01:22:50,100 --> 01:22:51,000
So that'll be fine.

1895
01:22:51,200 --> 01:22:53,200
So that will be fine.

1896
01:22:54,900 --> 01:22:55,900
All right.

1897
01:22:56,200 --> 01:22:58,600
Looks like there's no questions coming in there.

1898
01:23:00,400 --> 01:23:01,600
It looks looks good.

1899
01:23:01,800 --> 01:23:02,400
All right.

1900
01:23:03,200 --> 01:23:06,100
Well, oh, nope.

1901
01:23:06,100 --> 01:23:08,500
Oh, well, there was a, there was a bunch of things that just came in

1902
01:23:08,500 --> 01:23:08,600
there.

1903
01:23:08,600 --> 01:23:09,500
The minute earlier.

1904
01:23:09,500 --> 01:23:12,000
I watch one of Chandler Karis talks where he describes relationship

1905
01:23:12,000 --> 01:23:14,400
between data structures and algorithms in the context of C++

1906
01:23:14,400 --> 01:23:14,900
performance.

1907
01:23:15,200 --> 01:23:17,700
He mentioned that you could lose compiler observations for an object

1908
01:23:17,700 --> 01:23:19,400
by bringing its address into it.

1909
01:23:19,400 --> 01:23:20,300
Its identity.

1910
01:23:20,700 --> 01:23:24,500
Could you shed some light on exactly what this means I'd have.

1911
01:23:24,600 --> 01:23:25,500
Go re-watch it.

1912
01:23:25,500 --> 01:23:28,500
I'm not sure what you mean by the phrase bringing its address into its

1913
01:23:28,500 --> 01:23:31,700
identity, but I could go watch that we could talk about on a future

1914
01:23:31,700 --> 01:23:32,100
stream.

1915
01:23:33,700 --> 01:23:34,500
So that's good.

1916
01:23:39,400 --> 01:23:43,300
Is it worth talking about timing resolution in kernel or two deep?

1917
01:23:44,500 --> 01:23:48,200
Well, I mean, I think we can't really talk about the timing resolution

1918
01:23:48,200 --> 01:23:52,900
in the colonel largely because we don't know, like the windows kernel

1919
01:23:52,900 --> 01:23:54,200
is closed source, as far as I know.

1920
01:23:54,200 --> 01:23:55,200
I've never seen it.

1921
01:23:55,500 --> 01:23:58,600
So anything that I said that was talking about the windows kernel,

1922
01:23:58,600 --> 01:23:59,800
would kind of just be talking.

1923
01:24:01,400 --> 01:24:05,700
You know, hypothetically and going off of like what people post in

1924
01:24:05,700 --> 01:24:07,400
msdn blog posts or something.

1925
01:24:08,000 --> 01:24:10,100
So maybe there's a good lecture out there.

1926
01:24:10,400 --> 01:24:12,600
There might be a good lecture out there by Windows kernel.

1927
01:24:12,600 --> 01:24:15,800
Guy who talks about the timing and we could go by that.

1928
01:24:16,100 --> 01:24:18,400
But honestly, like I don't really know much about the windows kernel

1929
01:24:18,400 --> 01:24:18,700
timing.

1930
01:24:18,700 --> 01:24:20,200
I don't know what they do in there.

1931
01:24:20,300 --> 01:24:22,100
I know that time to get period changes.

1932
01:24:22,100 --> 01:24:26,500
The kernel timing, but I don't actually know much more.

1933
01:24:27,500 --> 01:24:28,400
Much more than that.

1934
01:24:35,100 --> 01:24:37,600
Pretty sure Chandler was suggesting passing by value because the

1935
01:24:37,600 --> 01:24:39,600
compiler had a lot of problems optimizing through corners.

1936
01:24:39,600 --> 01:24:40,500
Yes, that is true.

1937
01:24:40,500 --> 01:24:42,800
But that really only helps with inlining.

1938
01:24:44,400 --> 01:24:48,300
I think he was talking about, inlining the optimizer, you could

1939
01:24:48,300 --> 01:24:51,000
actually make your code slower by passing, things by value.

1940
01:24:51,000 --> 01:24:55,100
If it can't in line them because it would have to actually do the

1941
01:24:55,100 --> 01:24:55,600
copy.

1942
01:24:56,400 --> 01:24:56,700
So pay.

1943
01:24:56,700 --> 01:25:00,100
So you have to kind of know, you kind of got to actually look at what

1944
01:25:00,100 --> 01:25:01,100
the compiler is doing.

1945
01:25:01,700 --> 01:25:04,800
You can't just go always pass by value, always pass by pointer or

1946
01:25:04,900 --> 01:25:08,300
Are you kind of have to say, let me see this code?

1947
01:25:08,300 --> 01:25:09,100
Why is it slow?

1948
01:25:09,100 --> 01:25:11,100
And let me see if I can make it faster.

1949
01:25:11,100 --> 01:25:14,600
By changing, the way certain things are passed to it that.

1950
01:25:14,600 --> 01:25:18,200
So as a good rule of thumb, super small things, always should be

1951
01:25:18,200 --> 01:25:22,100
passed by value, obviously because it's easy to do so, and it's like,

1952
01:25:22,100 --> 01:25:25,000
if they're smaller than 8 bytes then they're smaller than a pointer.

1953
01:25:25,000 --> 01:25:28,500
Anyway, so you should always be passing, 8, B things by value, you

1954
01:25:28,500 --> 01:25:31,100
would think, because passing the pointer to them takes as much space

1955
01:25:31,100 --> 01:25:31,900
as passing them.

1956
01:25:31,900 --> 01:25:34,400
So, you're only incurring a speed hit, but things are

1957
01:25:34,900 --> 01:25:38,000
Only bigger than a pointer 64, byte things.

1958
01:25:38,000 --> 01:25:41,700
Let's say dirty to bite things at that point.

1959
01:25:41,700 --> 01:25:45,000
You may be getting into the territory where you have to actually know

1960
01:25:45,100 --> 01:25:45,200
that.

1961
01:25:45,200 --> 01:25:49,000
The compiler really can optimize it before you actually get a win.

1962
01:25:49,000 --> 01:25:51,900
So so be careful, I would say about that.

1963
01:25:53,700 --> 01:25:54,500
That is what I would say.

1964
01:25:54,500 --> 01:25:57,500
All right, I think we are done with questions for the day.

1965
01:25:57,500 --> 01:26:02,100
Thank you so much for joining me, and I hope you also enjoyed John

1966
01:26:02,100 --> 01:26:03,100
stream earlier today.

1967
01:26:03,100 --> 01:26:08,800
I know I did, if you would like for them to use me to follow along at

1968
01:26:08,800 --> 01:26:11,300
home with the source code, and the graphics assets.

1969
01:26:11,300 --> 01:26:13,900
Once we start working with Graphics, which will probably be next week.

1970
01:26:13,900 --> 01:26:18,300
I think you can pre-order the game on handmade here at the org and

1971
01:26:18,300 --> 01:26:20,600
you'll get a link that allows you to download the source code every

1972
01:26:20,600 --> 01:26:21,100
night.

1973
01:26:21,100 --> 01:26:23,200
You can go there as often as you want and download the latest source

1974
01:26:23,200 --> 01:26:23,400
code.

1975
01:26:24,300 --> 01:26:27,800
That is really easy to do and it has a source code for all the days,

1976
01:26:27,800 --> 01:26:30,100
so you can go jump back to any day and follow it that way.

1977
01:26:30,700 --> 01:26:33,300
If you'd like to talk about handmade hero, there is this news and

1978
01:26:33,300 --> 01:26:35,000
forums link here, which is pretty cool.

1979
01:26:35,300 --> 01:26:38,500
You can go to the episode guide, which has a bunch of like, annotated

1980
01:26:38,500 --> 01:26:40,000
references for past episodes.

1981
01:26:40,000 --> 01:26:44,000
You can go to the code discussion page, which has a bunch of stuff

1982
01:26:44,200 --> 01:26:47,500
that people are talking about and I answer questions on there as well.

1983
01:26:47,500 --> 01:26:50,400
So if you have questions, that's a great place to post them, all sorts

1984
01:26:50,400 --> 01:26:51,100
of stuff like that.

1985
01:26:51,100 --> 01:26:53,500
There's also if you click on the ham you hear a central thing the

1986
01:26:53,600 --> 01:26:55,200
Schedule, for the week is always up there.

1987
01:26:55,200 --> 01:26:58,100
So that you know what the hours are going to be just a bunch of good

1988
01:26:58,100 --> 01:26:58,400
stuff.

1989
01:26:58,400 --> 01:26:59,700
So that's also a good place.

1990
01:27:00,200 --> 01:27:03,000
If you want more, handmade hero information, so thank you.

1991
01:27:03,000 --> 01:27:04,100
Everyone for joining us.

1992
01:27:04,700 --> 01:27:07,700
I will be back here again at 8 p.m.

1993
01:27:07,700 --> 01:27:11,800
Pacific Standard time tomorrow, when hopefully, we will finish up our

1994
01:27:11,800 --> 01:27:15,500
Loop and then we can do a little fun stuff on Friday.

1995
01:27:15,500 --> 01:27:20,300
Have a little fun thing plan we can do on Friday, which I don't know

1996
01:27:20,300 --> 01:27:21,900
how many people can make it to the 11:00 a.m.

1997
01:27:21,900 --> 01:27:22,200
Stream.

1998
01:27:22,200 --> 01:27:23,100
I know it's an Austrian.

1999
01:27:23,100 --> 01:27:27,000
We got a little fun thing we can do on Friday, if we get through our

2000
01:27:28,700 --> 01:27:32,000
If we can get through the sound stuff tomorrow, so hopefully we will.

2001
01:27:32,000 --> 01:27:33,300
Thank you everyone for joining us.

2002
01:27:33,600 --> 01:27:37,200
I will go update the source code and the videos, and I will see you

2003
01:27:37,200 --> 01:27:38,200
here tomorrow.

