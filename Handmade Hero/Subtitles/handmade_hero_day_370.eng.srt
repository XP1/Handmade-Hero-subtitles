1
00:00:04,600 --> 00:00:07,600
Hello, everyone, and welcome to handmade hero.

2
00:00:07,600 --> 00:00:10,800
The show where we code complete game live on stream.

3
00:00:10,800 --> 00:00:15,700
We have a special guest in the studio with us, who will be joining us

4
00:00:15,700 --> 00:00:19,000
for the rest of our streams, as a trusted companion.

5
00:00:19,000 --> 00:00:23,600
If you have noticed, if you are a observant viewer, you may have

6
00:00:23,600 --> 00:00:27,300
noticed that there is now a little owl icon up in the corner here.

7
00:00:27,300 --> 00:00:32,700
This a like on was generously donated by quarter Tron.

8
00:00:32,700 --> 00:00:34,500
If you see seen him around

9
00:00:34,600 --> 00:00:40,800
On the streams on the IRC or on the twitch chat, as quarter Tron, key

10
00:00:40,800 --> 00:00:42,800
sent me a pretty fabulous device.

11
00:00:42,800 --> 00:00:45,700
A few months ago, about two months ago, I haven't had a chance to

12
00:00:45,700 --> 00:00:46,500
really play with it.

13
00:00:46,500 --> 00:00:50,500
I had a chance this morning to do so and make sure it was all working

14
00:00:50,600 --> 00:00:51,700
and so I have it set up.

15
00:00:51,700 --> 00:00:59,100
Now, it is a notification owl, that is actually a physical device, and

16
00:00:59,800 --> 00:01:03,000
I don't know if you can see this here on the webcam, but it's a

17
00:01:03,000 --> 00:01:04,400
little, I don't want to stretch the

18
00:01:04,599 --> 00:01:08,600
Chord too far but it's a little owl and well let me see if you can see

19
00:01:08,600 --> 00:01:09,200
that on that.

20
00:01:09,200 --> 00:01:11,600
Let me bring up the little window and see if you can see that here.

21
00:01:16,900 --> 00:01:18,300
It's really hard to for me to.

22
00:01:18,500 --> 00:01:20,500
I can't quite well, you know what, I can unplug him.

23
00:01:20,900 --> 00:01:21,400
There we go.

24
00:01:22,900 --> 00:01:24,100
It's a little owl.

25
00:01:24,800 --> 00:01:31,400
And on the back of the owl, is a like USB plug can see you kind of

26
00:01:31,400 --> 00:01:38,500
have a USB but and if you plug this USB, but into the cable and plug

27
00:01:38,500 --> 00:01:43,500
it into the computer, the owl can be told to light up.

28
00:01:44,600 --> 00:01:48,500
And so, for example, when you first plug it in, it'll light up, just

29
00:01:48,500 --> 00:01:49,400
to tell you, it's working.

30
00:01:50,200 --> 00:01:52,300
But now if I go on too,

31
00:01:52,500 --> 00:01:53,300
A stream.

32
00:01:53,700 --> 00:01:57,600
And I'm going to go onto the handmade Network IRC, which is where it

33
00:01:57,600 --> 00:01:58,100
listens.

34
00:01:58,500 --> 00:02:05,600
If I talk to a labott and just say something, then he will, The Little

35
00:02:05,600 --> 00:02:06,800
Owl will light up.

36
00:02:07,200 --> 00:02:08,300
That is how this works.

37
00:02:09,300 --> 00:02:10,600
I don't actually know.

38
00:02:11,100 --> 00:02:13,100
I should probably restart him here.

39
00:02:16,300 --> 00:02:16,700
Here we go.

40
00:02:20,100 --> 00:02:25,400
All right, I don't actually know if I think only quarter Tron can

41
00:02:25,400 --> 00:02:29,600
signal him, I did give info about the ability to Signal him as well.

42
00:02:30,600 --> 00:02:35,700
And so, at some point, we'll have to get in sohbat to be to be able to

43
00:02:35,700 --> 00:02:37,900
Signal him for various reasons.

44
00:02:39,700 --> 00:02:40,500
Yeah, there he goes.

45
00:02:40,700 --> 00:02:44,600
So I don't know if you can see this again because I think the cable

46
00:02:44,600 --> 00:02:47,600
doesn't quite reach as long as it might have to.

47
00:02:48,100 --> 00:02:49,700
Maybe I can just put it in the corner here.

48
00:02:50,600 --> 00:02:51,100
There you go.

49
00:02:51,900 --> 00:02:54,900
So I'm going to go ahead and try to Signal him here.

50
00:02:54,900 --> 00:02:55,700
So you on the IRC.

51
00:02:55,700 --> 00:02:58,000
You can see you see how he lights up like that.

52
00:02:59,200 --> 00:02:59,500
That's what

53
00:03:00,400 --> 00:03:05,100
So what that means is, I will be able to see if there's something a

54
00:03:05,100 --> 00:03:06,300
problem with the stream.

55
00:03:06,300 --> 00:03:08,900
Like there is sometimes we had this happen.

56
00:03:09,100 --> 00:03:11,500
So I wanted to try and get him working.

57
00:03:13,900 --> 00:03:16,800
We had this happen where the stream.

58
00:03:16,900 --> 00:03:21,800
I there was a hotkey or something in in OBS that made it.

59
00:03:21,800 --> 00:03:26,100
So that my like webcam took over the full size of the screen last time

60
00:03:26,100 --> 00:03:26,700
or something.

61
00:03:27,500 --> 00:03:29,800
So hopefully, the the

62
00:03:30,000 --> 00:03:34,200
A labott signal, can be used now to to Signal me when there is a

63
00:03:34,200 --> 00:03:39,200
problem and I trust that we can add people to the owl bot signal, okay

64
00:03:39,200 --> 00:03:39,700
list.

65
00:03:40,300 --> 00:03:42,800
So that someone will always be watching and signal if there is a

66
00:03:42,800 --> 00:03:43,400
problem.

67
00:03:48,200 --> 00:03:49,000
So, there you go.

68
00:03:50,400 --> 00:03:54,000
That is our new feathered friend and thank you very much.

69
00:03:54,000 --> 00:03:57,600
The quarter Tron for sending that in, it's pretty awesome.

70
00:03:58,000 --> 00:03:59,800
I think he's kind of got this down now.

71
00:03:59,800 --> 00:04:04,400
He, I think he was saying that he now makes these guys.

72
00:04:04,400 --> 00:04:08,400
They're, they're basically like little, I don't know, like bath toys

73
00:04:08,400 --> 00:04:13,500
or something little or like cat toys or something that he then like

74
00:04:13,500 --> 00:04:17,500
kind of Hollows out apart in the back and puts an Arduino into, it's a

75
00:04:17,500 --> 00:04:18,399
pretty great idea.

76
00:04:19,700 --> 00:04:20,000
So

77
00:04:21,000 --> 00:04:22,900
You should set up a little store notification.

78
00:04:22,900 --> 00:04:23,500
I will store.

79
00:04:24,700 --> 00:04:25,000
All right.

80
00:04:25,000 --> 00:04:30,400
So that's that is our special guest and as long as he is up here or

81
00:04:30,400 --> 00:04:32,400
she, I guess I don't know the gender of this owl.

82
00:04:33,500 --> 00:04:38,300
But the friendly notification owl can let me know if anything weird is

83
00:04:38,300 --> 00:04:39,000
going down.

84
00:04:39,700 --> 00:04:41,600
So we are now good to go.

85
00:04:42,100 --> 00:04:44,600
All right I will go ahead and get started here.

86
00:04:45,200 --> 00:04:49,200
Let's go ahead and open up the project.

87
00:04:51,100 --> 00:04:54,100
and if you remember from last week,

88
00:04:55,300 --> 00:04:58,600
We're actually the part where almost everything is what we wanted it

89
00:04:58,600 --> 00:05:00,300
to be at a basic level.

90
00:05:00,900 --> 00:05:03,800
The only thing that we were unable to get working on this graphics

91
00:05:03,800 --> 00:05:09,800
card is apparently, for whatever reason, multi-sample rendering, which

92
00:05:09,800 --> 00:05:16,400
we now use multi sample rendering is not available with srgb, which

93
00:05:16,400 --> 00:05:20,900
makes not a whole lot of sense because those things should probably

94
00:05:20,900 --> 00:05:24,300
not be related, but I guess they are.

95
00:05:26,100 --> 00:05:29,300
I mean I guess I could see why they might be if you're writing to

96
00:05:29,300 --> 00:05:33,100
multiple samples maybe the hardware that does the translation is only

97
00:05:33,100 --> 00:05:37,600
works on Sample zero or something like this if that's possible it

98
00:05:37,600 --> 00:05:41,100
seems unlikely obviously but you know it's how should I know right?

99
00:05:41,100 --> 00:05:43,600
I don't know how the internals of this card work.

100
00:05:46,400 --> 00:05:48,900
I'm definitely not in the position to say what should or should not be

101
00:05:48,900 --> 00:05:53,800
easy in the particular pipeline that this card implemented because I

102
00:05:53,800 --> 00:05:55,400
have no idea what they implemented.

103
00:05:56,000 --> 00:05:59,800
But suffice to say, that means our Graphics are

104
00:06:00,100 --> 00:06:01,600
Not quite correct.

105
00:06:01,900 --> 00:06:07,100
So what we're looking at here is almost an exact replica of what we

106
00:06:07,100 --> 00:06:14,200
had had before we decided to put all the 3D stuff but there's there's

107
00:06:14,200 --> 00:06:16,400
like all the colors are too dark right there.

108
00:06:16,400 --> 00:06:19,600
They're being rendered as if they have srgb.

109
00:06:19,600 --> 00:06:24,100
So like the textures are in an srgb format, the rendering is set to

110
00:06:24,100 --> 00:06:29,900
use srgb but srgb is not available in terms of the texture that

111
00:06:30,000 --> 00:06:31,500
We're to which we are rendering.

112
00:06:31,700 --> 00:06:35,400
And so, as a result, we get incorrect results.

113
00:06:35,800 --> 00:06:41,300
Now we can fix this by implementing srgb ourselves and maybe that's

114
00:06:41,300 --> 00:06:42,200
the right solution.

115
00:06:42,200 --> 00:06:45,100
I don't know if we just Implement srgb ourselves.

116
00:06:45,100 --> 00:06:50,900
What that means is that we will Square n square, root our colors as

117
00:06:50,900 --> 00:06:53,600
they come in and out of the pipeline and we would just do this

118
00:06:53,600 --> 00:06:54,300
manually.

119
00:06:55,000 --> 00:06:59,500
The reason this is not a great solution is because if you really want

120
00:06:59,500 --> 00:06:59,800
to do this,

121
00:07:00,000 --> 00:07:00,500
Correctly.

122
00:07:01,600 --> 00:07:04,900
You would have to turn off, bilinear, filtering in the hardware and

123
00:07:04,900 --> 00:07:09,100
actually take the bilinear samples yourself because bilinear filtering

124
00:07:09,100 --> 00:07:14,400
itself wants the correction of the srgb done before the bilinear

125
00:07:14,400 --> 00:07:14,900
combined.

126
00:07:14,900 --> 00:07:18,700
Because remember if you're trying to do linear math operations, which

127
00:07:18,700 --> 00:07:22,800
by linear as its name, implies certainly is you want to do that in

128
00:07:22,800 --> 00:07:26,600
light linear space, not in srgb space, which is an exponential space

129
00:07:26,800 --> 00:07:29,800
where bilinear filtering will not produce the correct results.

130
00:07:29,900 --> 00:07:30,300
So,

131
00:07:33,100 --> 00:07:36,600
That being said, I'm not sure how to progress.

132
00:07:38,700 --> 00:07:42,300
On this particular card in a way that makes a lot of sense because

133
00:07:42,300 --> 00:07:50,500
certainly, we don't want to, you know, we don't want to handicap all

134
00:07:50,500 --> 00:07:53,500
the modern cards out there that would have no trouble turning that on.

135
00:07:54,300 --> 00:07:58,400
So I think what we have to do here is probably try to figure out some

136
00:07:58,400 --> 00:08:03,100
way of detecting whether a card can't do this or not and if we detect

137
00:08:03,100 --> 00:08:05,500
it then we can do the squaring and square rooting in the Shader.

138
00:08:05,500 --> 00:08:07,600
But if we don't detect it, then we won't.

139
00:08:08,600 --> 00:08:10,400
That seems like the best plan.

140
00:08:10,700 --> 00:08:14,700
The problem is that's easier said than done and the reason that that's

141
00:08:14,700 --> 00:08:18,400
easier said than done is just because, well, I don't really know if

142
00:08:18,400 --> 00:08:19,500
there's any way to do it.

143
00:08:19,500 --> 00:08:22,100
Other than just trying to create the texture ourselves.

144
00:08:22,500 --> 00:08:24,000
Now maybe that's the best plan.

145
00:08:24,000 --> 00:08:27,600
I don't know and then when we try to create the texture we will then

146
00:08:27,600 --> 00:08:31,300
find that it failed using check gel error.

147
00:08:31,300 --> 00:08:36,500
And then when we find that it failed, will try again without that flag

148
00:08:36,500 --> 00:08:37,700
and see how we do.

149
00:08:38,299 --> 00:08:39,799
That's the only thing I can think of right now.

150
00:08:39,799 --> 00:08:41,500
I don't think there's some other way.

151
00:08:41,500 --> 00:08:45,000
I don't think there's a capability, kind of a query.

152
00:08:45,000 --> 00:08:49,200
You can do that asks, whether or not you can support multi sample plus

153
00:08:49,200 --> 00:08:50,100
srgb.

154
00:08:50,800 --> 00:08:54,700
So I think that's pretty much where we're at right now.

155
00:08:54,700 --> 00:08:58,000
I can't really give any more of an estimation than that.

156
00:08:59,100 --> 00:08:59,600
So what I

157
00:09:00,000 --> 00:09:04,100
We're going to have to do here is you know, if we've got this sort of

158
00:09:04,100 --> 00:09:07,700
situation here where we've got supports srgb frame buffer and default

159
00:09:07,700 --> 00:09:10,900
internal texture format I feel like probably what we're going to want

160
00:09:10,900 --> 00:09:14,100
to do here is maybe regress this a little bit and maybe just have

161
00:09:14,100 --> 00:09:19,100
something that's like supports srgb or srgb support.

162
00:09:21,100 --> 00:09:21,600
Right?

163
00:09:22,700 --> 00:09:25,600
And what we could sort of do here is just say like, all right, if it

164
00:09:25,600 --> 00:09:31,600
has srgb support everywhere then we turn it on everywhere and we do

165
00:09:31,600 --> 00:09:37,400
srgb and Hardware whereas if we detect that it doesn't have srgb

166
00:09:37,400 --> 00:09:37,800
support.

167
00:09:37,800 --> 00:09:44,800
Then we do srgb nowhere and we insert into our Shader code that will

168
00:09:44,800 --> 00:09:48,000
correct for the srgb that's coming out of the textures.

169
00:09:48,400 --> 00:09:50,800
That's the only thing I can think of there.

170
00:09:50,900 --> 00:09:53,200
Be something smarter to do, but that's when they can think of right

171
00:09:53,200 --> 00:09:53,500
now.

172
00:09:56,300 --> 00:10:00,400
So since that's the only actual likes bug, we have at the moment.

173
00:10:01,100 --> 00:10:04,800
That's a I think the first thing to rectify because we can't really

174
00:10:04,800 --> 00:10:08,200
call our rendering done because there's so much stuff I want to do,

175
00:10:08,200 --> 00:10:10,700
like I want to go clean up how we're mute.

176
00:10:10,700 --> 00:10:13,100
Like, right now we're still using partly opengl fixed function

177
00:10:13,100 --> 00:10:15,700
pipeline because I just showed how to add shaders, just lacks week.

178
00:10:15,700 --> 00:10:18,600
I'd like to go in and like, get rid of the rest of the fixed function

179
00:10:18,600 --> 00:10:21,700
pipeline so that we're entirely on shaders and buffers or something

180
00:10:21,700 --> 00:10:22,300
like that.

181
00:10:22,300 --> 00:10:23,500
Just to clean everything up.

182
00:10:23,600 --> 00:10:24,100
I like to do that.

183
00:10:24,100 --> 00:10:26,000
But before we do that, I would definitely like

184
00:10:26,100 --> 00:10:31,100
To make sure that we are rendering properly, that's really it.

185
00:10:32,700 --> 00:10:35,000
Now, I suppose the other thing I should do to, actually I guess before

186
00:10:35,000 --> 00:10:38,400
I go too far down that road is, I don't remember how we were

187
00:10:38,400 --> 00:10:39,600
initializing our opengl.

188
00:10:39,600 --> 00:10:40,200
Exactly.

189
00:10:40,900 --> 00:10:45,400
So I want to, I should probably make sure just just do a check to make

190
00:10:45,400 --> 00:10:50,800
sure that we didn't do something in initialization that would make us.

191
00:10:52,000 --> 00:10:54,900
That would cause us not to have these capabilities when we actually

192
00:10:54,900 --> 00:10:55,800
should have them.

193
00:10:56,100 --> 00:10:58,600
So, for example, in our attribute list, right?

194
00:10:58,900 --> 00:11:02,300
You can see that we pass a bunch of information here in

195
00:11:02,500 --> 00:11:04,900
Terms of what we want for our pixels.

196
00:11:05,100 --> 00:11:07,800
And then in terms of our opengl context, we have a bunch of stuff

197
00:11:07,800 --> 00:11:08,100
here.

198
00:11:08,100 --> 00:11:11,900
Like major version, our band minor version, our been stuff like that.

199
00:11:12,600 --> 00:11:16,800
So I don't really know which context we would necessarily need.

200
00:11:16,800 --> 00:11:21,200
Like it may be that a 3.0 context isn't supposed to be able to have

201
00:11:22,300 --> 00:11:25,300
the srgb frame buffers with multi sample for all.

202
00:11:25,300 --> 00:11:26,600
I know you know I don't know.

203
00:11:28,500 --> 00:11:31,200
So it could be that we just needed to make this go up further.

204
00:11:31,200 --> 00:11:32,300
So I don't know if

205
00:11:32,400 --> 00:11:35,600
This card supports opengl 4.0 but we could try we could just see what

206
00:11:35,600 --> 00:11:38,600
happens if we did that.

207
00:11:38,600 --> 00:11:42,500
I don't know what would happen, but we could take and set a breakpoint

208
00:11:42,500 --> 00:11:46,100
in their it during initialization and see whether we get higher

209
00:11:46,100 --> 00:11:49,100
context, if we ask for it and then if we do ask for the higher

210
00:11:49,100 --> 00:11:52,600
context, I could try again to see if maybe in a higher context setting

211
00:11:52,900 --> 00:11:57,700
we would get that better texture format handling, I don't know like I

212
00:11:57,700 --> 00:11:59,800
said it's this totally just speculative on my part.

213
00:12:00,500 --> 00:12:01,400
So I'm going to go in here.

214
00:12:01,400 --> 00:12:04,500
You can see us getting extensions here and then our initialization.

215
00:12:04,800 --> 00:12:08,800
So in this right here where we do context of trip Barb, I'll just step

216
00:12:08,800 --> 00:12:10,200
in and see did we get one?

217
00:12:10,200 --> 00:12:15,600
We did not so it would fall down to a backup context in the case where

218
00:12:15,600 --> 00:12:16,700
we ask for 4.0.

219
00:12:17,000 --> 00:12:19,700
So 3.0 is definitely the Baseline.

220
00:12:19,900 --> 00:12:23,000
I don't know if I can ask for 3.1, let's find out if I can

221
00:12:25,400 --> 00:12:29,800
So 3.1, I can ask for again, not sure that would do me any good at

222
00:12:29,800 --> 00:12:33,100
all, especially since we have a compatibility contest specified.

223
00:12:33,500 --> 00:12:37,500
So, I'm assuming it would not my assumption is that it would not

224
00:12:37,500 --> 00:12:41,900
prevent us from doing something with the compatibility bit set.

225
00:12:42,600 --> 00:12:45,300
But, you know, I don't really know again.

226
00:12:45,300 --> 00:12:48,300
Drivers are very fussy and finicky, and they don't conform to spec

227
00:12:48,300 --> 00:12:49,200
most of the time.

228
00:12:50,000 --> 00:12:51,700
So I just want to be doubly.

229
00:12:51,700 --> 00:12:53,600
Sure, that there isn't something going on there.

230
00:12:53,600 --> 00:12:54,500
That's preventing us.

231
00:12:55,200 --> 00:12:56,500
Getting back to work.

232
00:12:57,000 --> 00:13:00,600
So if I now come in here and I turn this back on, I'm expecting it to

233
00:13:00,600 --> 00:13:01,300
still not work.

234
00:13:01,300 --> 00:13:03,600
I'm expecting it to give me an assertion there.

235
00:13:12,300 --> 00:13:13,600
Just got it, clean that up.

236
00:13:13,600 --> 00:13:14,000
Its

237
00:13:15,400 --> 00:13:16,000
this now,

238
00:13:20,200 --> 00:13:20,500
Yeah.

239
00:13:21,700 --> 00:13:25,000
And so we still are unable to call that we are still unable to call,

240
00:13:25,000 --> 00:13:27,200
Geo text 2D multi sample.

241
00:13:28,200 --> 00:13:31,400
So I'm assuming that it just can't handle that for whatever reason.

242
00:13:31,400 --> 00:13:32,600
This card can't do that.

243
00:13:33,500 --> 00:13:36,300
So I'm going to go back to win 3-2 handmade and turn that off because

244
00:13:36,300 --> 00:13:39,200
I don't think we really need that for any particular reason.

245
00:13:39,200 --> 00:13:41,000
So 3.0 context is fine.

246
00:13:43,200 --> 00:13:47,600
So in here, basically, what I need to do now is have a way of instead

247
00:13:47,600 --> 00:13:50,700
of this being a default, internal texture format.

248
00:13:51,000 --> 00:13:56,900
I need to have a way of specifying this as not being srgb and and

249
00:13:56,900 --> 00:13:57,500
figuring that out.

250
00:13:57,500 --> 00:14:03,700
So what what we need to do I think is go in here and have a test where

251
00:14:03,700 --> 00:14:07,200
we basically call this function and see whether we can call it at all,

252
00:14:08,000 --> 00:14:10,700
basically create like a canary in the mine field.

253
00:14:10,800 --> 00:14:12,000
So to speak, where

254
00:14:12,100 --> 00:14:16,300
We can try to do this call and see what happens, right?

255
00:14:17,400 --> 00:14:20,800
So I'm guessing that we do something down here.

256
00:14:23,600 --> 00:14:27,200
Where we would say, all right, you know, GL text image, 2D

257
00:14:27,200 --> 00:14:35,100
multi-sample Geo, oops, texture at their, it was 2D multi sample.

258
00:14:35,900 --> 00:14:39,800
We would specify that Max multi sample count, which I could just get

259
00:14:40,300 --> 00:14:40,600
Once.

260
00:14:40,600 --> 00:14:45,100
In fact, that could be done instead of being done here, we could

261
00:14:45,100 --> 00:14:48,000
actually pull this out and put it in the open gel.

262
00:14:49,600 --> 00:14:51,700
Structure itself, right?

263
00:14:52,300 --> 00:14:54,500
So up in here, where we've got

264
00:14:56,300 --> 00:14:57,600
I guess it could be Glu in.

265
00:15:07,000 --> 00:15:07,900
It's called pap.

266
00:15:09,000 --> 00:15:12,200
So, what I can do now is say, alright, I've got that Max multi sample

267
00:15:12,200 --> 00:15:12,700
count.

268
00:15:14,400 --> 00:15:18,200
I'm going to go ahead and get that robe open gel.

269
00:15:18,400 --> 00:15:24,800
I'm going to clamp it as well to 16 because I don't want to ever be

270
00:15:24,800 --> 00:15:25,800
higher than that.

271
00:15:26,600 --> 00:15:30,500
That's, that would just be excessive at that point for our purposes.

272
00:15:30,900 --> 00:15:33,000
So when we take a look at the multi sample,

273
00:15:34,300 --> 00:15:35,700
We can then use it to say.

274
00:15:35,700 --> 00:15:38,100
Let's go ahead and try to create one of those.

275
00:15:39,000 --> 00:15:44,900
I need to bind a texture here and I need to bind the oops.

276
00:15:46,800 --> 00:15:49,600
I need to bind a texture and try it.

277
00:15:49,800 --> 00:15:50,500
And then

278
00:15:52,800 --> 00:15:53,500
Undo it.

279
00:15:53,600 --> 00:15:58,200
I don't remember if we need to bind it to that Slaughter.

280
00:15:58,200 --> 00:16:00,100
Not, I think we do.

281
00:16:00,400 --> 00:16:00,900
Yeah, we do.

282
00:16:02,200 --> 00:16:04,300
So, I'm just going to bind a texture to that slot.

283
00:16:04,300 --> 00:16:06,000
A dummy that doesn't really exist.

284
00:16:06,000 --> 00:16:07,100
It doesn't do anything.

285
00:16:07,800 --> 00:16:11,700
I'm going to try here to just make one, right?

286
00:16:12,100 --> 00:16:16,900
And I'm going to pretend that it looks like the screen, right?

287
00:16:18,800 --> 00:16:22,700
So it looks like a dummy kind of screen that we might expect to use,

288
00:16:23,900 --> 00:16:28,800
and then we could say, all right, if we can get one of these with srgb

289
00:16:29,400 --> 00:16:30,600
then we will use it.

290
00:16:30,700 --> 00:16:32,400
Otherwise we will right.

291
00:16:35,800 --> 00:16:39,400
So once we've set that default context firm and we look at this will

292
00:16:39,400 --> 00:16:40,600
specify the texture.

293
00:16:41,200 --> 00:16:44,200
We also want to delete that texture after we're done.

294
00:16:45,100 --> 00:16:51,800
So I guess, I don't know how to tell it that, we don't need that

295
00:16:51,800 --> 00:16:53,500
texture anymore, which is interesting.

296
00:16:54,400 --> 00:16:59,200
I guess I could GL text image, multi, sample was 0 but I need to tell

297
00:16:59,200 --> 00:17:01,300
it that it can release the the

298
00:17:04,800 --> 00:17:09,099
The state backed by that, I could do that with delete texture by doing

299
00:17:09,099 --> 00:17:12,599
a gen textures and then, delete textures, let me double check to make

300
00:17:12,599 --> 00:17:17,099
sure that that's the right way to actually get rid of that because I

301
00:17:17,099 --> 00:17:21,000
want, I don't want that texture sitting around because it's just

302
00:17:21,000 --> 00:17:22,900
taking up graphics card memory at that point.

303
00:17:23,500 --> 00:17:27,099
So, let me just take a look and see what that does.

304
00:17:28,800 --> 00:17:30,400
Specifically, oops.

305
00:17:46,200 --> 00:17:47,900
So I think we can just call that.

306
00:17:48,300 --> 00:17:50,900
I think we can just call GL delete textures.

307
00:17:54,300 --> 00:17:55,600
Test texture.

308
00:17:55,600 --> 00:17:56,400
Equals 1.

309
00:18:00,100 --> 00:18:03,300
And for good measure, I suppose we could actually just have it, do it

310
00:18:03,600 --> 00:18:07,900
GL textures, one test texture.

311
00:18:10,300 --> 00:18:14,200
And so here you know I'm just going to go ahead and create this test

312
00:18:14,200 --> 00:18:14,900
texture.

313
00:18:15,100 --> 00:18:19,600
See if GL text image 2D multi sample works and then delete it if it

314
00:18:19,600 --> 00:18:20,200
doesn't.

315
00:18:20,800 --> 00:18:22,700
So what I'm going to do here is just say

316
00:18:25,700 --> 00:18:28,800
You'll get error to clear the air and then he'll get error to get the

317
00:18:28,800 --> 00:18:29,400
are back.

318
00:18:30,500 --> 00:18:33,300
So I'll say if you'll get error equals Jill no error.

319
00:18:33,900 --> 00:18:36,200
In this case actually what I really want is not equal to.

320
00:18:37,200 --> 00:18:41,400
And what I'll do here is just say, okay in the case where it doesn't

321
00:18:41,400 --> 00:18:45,300
work, we'll just regress from what I said, right?

322
00:18:46,100 --> 00:18:47,800
We'll go back to just doing

323
00:18:52,000 --> 00:18:52,800
Our GPA.

324
00:18:55,400 --> 00:18:57,900
So what I can do here is I can clean this up a little bit more.

325
00:18:57,900 --> 00:19:03,800
To what I could do here is just say like okay, if we're going to

326
00:19:07,100 --> 00:19:11,700
If we're going to do this, we might as well get this guy first, right?

327
00:19:12,000 --> 00:19:16,400
And then only if we actually we're going to set this to True, let's

328
00:19:16,400 --> 00:19:18,200
just only do the test in there.

329
00:19:18,200 --> 00:19:20,900
That way I can do it a little bit more snazzle e, right?

330
00:19:21,400 --> 00:19:25,000
If we were going to do something that would have the frame buffer

331
00:19:25,000 --> 00:19:29,400
support and the texture support already and we think that's going to

332
00:19:29,400 --> 00:19:30,700
work, then we go.

333
00:19:30,700 --> 00:19:34,200
Okay, let's try the test texture now, do that.

334
00:19:35,000 --> 00:19:36,700
And if it equals know,

335
00:19:36,900 --> 00:19:40,900
our then we'll go ahead and do it and will enable it here like so,

336
00:19:43,500 --> 00:19:44,100
Right.

337
00:19:44,700 --> 00:19:47,800
And so then the only change we have to make there is the texture

338
00:19:47,800 --> 00:19:48,100
format.

339
00:19:48,100 --> 00:19:48,800
We were going to use.

340
00:19:48,800 --> 00:19:51,200
We have to supply that in here.

341
00:19:52,600 --> 00:19:52,800
Right.

342
00:19:52,800 --> 00:19:55,000
So now we come through and we say, all right, if we have a chance at

343
00:19:55,000 --> 00:19:58,900
supporting srgb, let's go ahead and try to create a texture here and

344
00:19:58,900 --> 00:20:02,800
see if the texture is created properly then we'll assume that we can

345
00:20:02,800 --> 00:20:03,400
do it.

346
00:20:03,600 --> 00:20:07,500
If it's not then we'll assume that we can't do it and off we would go

347
00:20:08,000 --> 00:20:08,500
right.

348
00:20:09,200 --> 00:20:10,700
I think that's about it.

349
00:20:11,800 --> 00:20:14,500
I think that's really all we need, they're right.

350
00:20:20,600 --> 00:20:22,800
So I'm going to go ahead and test that out and see if that actually

351
00:20:22,800 --> 00:20:23,300
works.

352
00:20:23,900 --> 00:20:25,100
We don't know if it will or not.

353
00:20:29,300 --> 00:20:31,600
We need to go ahead and put that in.

354
00:20:31,600 --> 00:20:32,100
There we go.

355
00:20:32,300 --> 00:20:33,600
Real nice sample count.

356
00:20:36,200 --> 00:20:37,900
It does seem like 32f.

357
00:20:37,900 --> 00:20:39,700
I'm not sure why I put 32 F in there.

358
00:20:39,700 --> 00:20:42,100
That's probably not useful.

359
00:20:43,900 --> 00:20:45,300
We don't really need float.

360
00:20:46,800 --> 00:20:48,000
Should probably be 32.

361
00:20:48,300 --> 00:20:52,000
Floating-point, obviously only has 24 bits of precision, whereas an

362
00:20:52,000 --> 00:20:56,200
integer has 32 bits of precision and we don't need a wide range.

363
00:20:56,200 --> 00:20:59,800
So we're, you know, a very small view distance in terms of what we

364
00:21:00,000 --> 00:21:00,900
See on the screen.

365
00:21:01,100 --> 00:21:05,400
So I feel like we just probably want a 32-bit integer there but that's

366
00:21:05,400 --> 00:21:06,800
that's I don't know why that was like that.

367
00:21:06,800 --> 00:21:07,800
That's just how that is.

368
00:21:08,200 --> 00:21:10,100
Just how that was, and it should be changed.

369
00:21:10,600 --> 00:21:13,100
So, okay, we just gotta change these to the max multi sample, count

370
00:21:13,100 --> 00:21:18,400
variable that we now store permanently when we do get texture, what is

371
00:21:18,400 --> 00:21:19,600
the problem here?

372
00:21:21,500 --> 00:21:22,400
GN, okay.

373
00:21:22,400 --> 00:21:25,700
Sorry it's not an unsigned, it's a signed integer apparently.

374
00:21:29,000 --> 00:21:29,600
There we go.

375
00:21:30,200 --> 00:21:30,700
And

376
00:21:35,400 --> 00:21:39,900
I guess what I'm not sure about is supports srgb frame before.

377
00:21:39,900 --> 00:21:42,100
I don't actually know who's using that right now.

378
00:21:47,800 --> 00:21:50,000
Does anyone know, support groups?

379
00:21:54,300 --> 00:21:55,600
So, I want to do a search.

380
00:21:58,600 --> 00:22:01,200
Sports srgb, frame buffer.

381
00:22:03,800 --> 00:22:06,000
So that's in win32.

382
00:22:10,500 --> 00:22:12,200
So that's really just used by.

383
00:22:13,300 --> 00:22:14,100
By this.

384
00:22:14,800 --> 00:22:17,300
So that's not really a Boolean, right?

385
00:22:17,300 --> 00:22:20,100
So really the only thing that I'm not really building that we use in

386
00:22:20,100 --> 00:22:24,400
the open gel layer so that really all we're talking about here in

387
00:22:24,400 --> 00:22:25,500
terms of stuff we care about.

388
00:22:25,500 --> 00:22:26,800
In fact, I don't know.

389
00:22:27,300 --> 00:22:28,000
That's interesting.

390
00:22:30,000 --> 00:22:32,300
I don't know who even sets this or why.

391
00:22:40,000 --> 00:22:42,600
I guess it just gets set in the info.

392
00:22:44,500 --> 00:22:45,400
Would be my guess.

393
00:22:47,500 --> 00:22:49,900
Anyway it's not a very good indicator of it.

394
00:22:49,900 --> 00:22:58,800
So really what I want to do is like Shader srg Shader, Sim srgb, we'll

395
00:22:58,800 --> 00:22:59,800
set that to false.

396
00:23:00,000 --> 00:23:05,600
And in here what I'll do is say the Shader has to simulate srgb in the

397
00:23:05,600 --> 00:23:07,200
case where we don't support it.

398
00:23:10,500 --> 00:23:11,700
I guess I would do that like this.

399
00:23:15,600 --> 00:23:16,100
Right.

400
00:23:16,700 --> 00:23:21,100
So then we would get down here to our Shader code and in our Shader

401
00:23:21,100 --> 00:23:25,300
code, we need a way of specifying whether or not it needs to do the

402
00:23:25,300 --> 00:23:27,200
srgb in the Shader, right?

403
00:23:27,600 --> 00:23:30,700
So what we want to do here is basically introduced, probably like it

404
00:23:30,700 --> 00:23:31,900
if deaf or something like this.

405
00:23:32,500 --> 00:23:34,300
So we've got our header code here, right?

406
00:23:34,300 --> 00:23:35,800
And here's the, here's the header code.

407
00:23:36,200 --> 00:23:38,900
What we want to do is probably do something like, well, okay.

408
00:23:40,300 --> 00:23:44,100
Here's the header code which normally doesn't have very much in it.

409
00:23:44,300 --> 00:23:49,100
What we want to do is add, you know, do kind of a an if that will

410
00:23:49,100 --> 00:23:52,100
determine which kind, you know, which we're going to do here in terms

411
00:23:52,100 --> 00:23:52,900
of header code vertex.

412
00:23:52,900 --> 00:23:56,400
So, what I could do to is maybe when we do open, Jill create program,

413
00:23:56,500 --> 00:23:59,800
maybe I have header code and I have

414
00:24:00,000 --> 00:24:02,800
Fines or something like that, like this.

415
00:24:04,000 --> 00:24:07,500
And so, what I can do is when we actually do that, opengl create

416
00:24:07,500 --> 00:24:08,000
program,

417
00:24:11,700 --> 00:24:13,800
That defines will go in here as well.

418
00:24:17,300 --> 00:24:20,700
So everybody gets these like pound defines, that's another thing, in

419
00:24:20,700 --> 00:24:23,500
addition to the header code that goes in there and that way, what we

420
00:24:23,500 --> 00:24:26,900
can do is we can have like all of our code pretty much intact and then

421
00:24:26,900 --> 00:24:30,100
we can have our defines and those would just be nothing.

422
00:24:30,800 --> 00:24:35,800
But if the Shader has two SIM srgb then we can set the defines equal

423
00:24:35,800 --> 00:24:37,500
to something else, right?

424
00:24:38,100 --> 00:24:42,600
And so maybe we set the defines to stimulate srgb or something like

425
00:24:42,600 --> 00:24:45,200
that or shaders him srgb right?

426
00:24:45,300 --> 00:24:46,900
We can pound to find that to be one.

427
00:24:47,800 --> 00:24:51,300
And that way all of our code in here is free to use a pound of find

428
00:24:51,400 --> 00:24:52,000
for of that.

429
00:24:52,000 --> 00:24:53,200
Shader CM srgb.

430
00:24:53,300 --> 00:24:54,100
Does that make sense?

431
00:24:54,500 --> 00:24:57,400
So we're basically just predicating are shaders based on whether or

432
00:24:57,400 --> 00:24:59,900
not we got srgb support or not.

433
00:25:00,400 --> 00:25:01,900
I don't know why I put a see in there.

434
00:25:03,400 --> 00:25:03,800
There we go.

435
00:25:04,900 --> 00:25:06,800
So now when I run this out in theory,

436
00:25:09,000 --> 00:25:09,800
we should wait.

437
00:25:09,900 --> 00:25:10,200
Who

438
00:25:11,700 --> 00:25:12,000
what?

439
00:25:16,300 --> 00:25:21,900
Okay, so I guess the version number has to be with the defines

440
00:25:21,900 --> 00:25:22,600
apparently

441
00:25:37,200 --> 00:25:39,800
And I guess I could use the same syntax error using before.

442
00:25:47,100 --> 00:25:47,600
There we go.

443
00:25:53,600 --> 00:25:57,900
All right, and so we can then slip our little pound finding there in

444
00:25:57,900 --> 00:26:01,400
the rest of our code, can stay the way that it was, which is good.

445
00:26:02,200 --> 00:26:06,500
So I think hopefully, that's good now.

446
00:26:07,900 --> 00:26:09,400
And so now what we

447
00:26:10,900 --> 00:26:13,000
Okay, that's pretty cool.

448
00:26:13,000 --> 00:26:14,900
It's already doing that detection, I guess.

449
00:26:14,900 --> 00:26:16,700
And turning off the frame buffer, right?

450
00:26:17,200 --> 00:26:18,100
So that's pretty nice.

451
00:26:18,500 --> 00:26:22,900
All right, so what we need to do now is actually sink think through

452
00:26:22,900 --> 00:26:26,200
the way that we're doing our srgb and actually have something sensible

453
00:26:26,200 --> 00:26:27,200
in here that will work.

454
00:26:29,000 --> 00:26:29,700
As we go.

455
00:26:30,100 --> 00:26:33,000
So, if we take a look at what's happening, we're gonna have to do a

456
00:26:33,000 --> 00:26:33,900
couple different things.

457
00:26:34,400 --> 00:26:37,800
But first of all, we know that when we do this test here, we're going

458
00:26:37,800 --> 00:26:41,500
to come through and we're going to have a problem where we will either

459
00:26:41,500 --> 00:26:44,100
enable or disable frame buffer srgb.

460
00:26:44,400 --> 00:26:47,600
If we enable or disable framebuffer RGB with that mean, srgb is what

461
00:26:47,600 --> 00:26:51,900
that means is that the final blit, where we take, and we go from the

462
00:26:51,900 --> 00:26:55,300
multi sample, buffer down to the actual buffer, strips on the screen

463
00:26:55,500 --> 00:26:57,800
that will be doing Sr.

464
00:26:57,800 --> 00:26:58,400
That will

465
00:26:59,000 --> 00:26:59,900
Be doing an srgb.

466
00:27:00,000 --> 00:27:00,900
Version or not.

467
00:27:01,200 --> 00:27:01,700
Right.

468
00:27:02,400 --> 00:27:03,000
So

469
00:27:06,900 --> 00:27:08,800
Just to make this a little bit clearer here.

470
00:27:16,900 --> 00:27:18,100
so, we basically have

471
00:27:27,100 --> 00:27:27,800
Texture.

472
00:27:30,800 --> 00:27:31,400
Buffer.

473
00:27:33,100 --> 00:27:33,800
And screen.

474
00:27:36,600 --> 00:27:37,000
Right.

475
00:27:38,000 --> 00:27:39,700
And so we have a couple different places.

476
00:27:40,000 --> 00:27:42,800
So here is like, to srgb.

477
00:27:45,000 --> 00:27:46,100
and this is a from,

478
00:27:47,500 --> 00:27:48,400
Srgb.

479
00:27:48,400 --> 00:27:52,300
This is a to srgb.

480
00:27:52,500 --> 00:27:54,100
This is a from

481
00:27:57,500 --> 00:28:01,400
So, every one of these arrows has an srgb conversion on both sides.

482
00:28:01,600 --> 00:28:05,100
So the texture right is encoded in srgb.

483
00:28:06,500 --> 00:28:12,000
If we have srgb support for our textures, then the srgb conversion

484
00:28:12,000 --> 00:28:14,400
here can happen, right?

485
00:28:16,300 --> 00:28:20,700
So we would not have to correct for that, but we would have to correct

486
00:28:20,700 --> 00:28:23,100
for is this srgb?

487
00:28:23,300 --> 00:28:26,500
Would not occur, right?

488
00:28:26,600 --> 00:28:30,300
We would not be able to have srgb happen when it actually goes to,

489
00:28:30,300 --> 00:28:34,400
right, to the freight to the backing texture buffer, right?

490
00:28:34,400 --> 00:28:35,800
This is our multi sample buffer.

491
00:28:37,600 --> 00:28:42,300
So one way we can fail is we can't do it here right.

492
00:28:42,900 --> 00:28:44,300
Another way we can fail.

493
00:28:44,900 --> 00:28:49,700
Similarly, is we are able to do it here and these two thankfully

494
00:28:49,700 --> 00:28:52,800
happen symmetrically as far as I can tell, right?

495
00:28:52,900 --> 00:28:57,600
So if this texture cannot be set to srgb format, then both of these

496
00:28:57,600 --> 00:28:58,200
will fail.

497
00:28:58,400 --> 00:29:01,400
And this is effectively not doing a two or a from

498
00:29:02,500 --> 00:29:03,000
right.

499
00:29:04,600 --> 00:29:08,200
Then this one could fail separately, right?

500
00:29:08,200 --> 00:29:11,400
This is a separate type of failure and that's the failure when we're

501
00:29:11,400 --> 00:29:13,300
going to go do the resolved, right?

502
00:29:14,800 --> 00:29:18,400
So what I would say is we probably need all of these to be Atomic.

503
00:29:18,700 --> 00:29:21,300
The reason we need them to be Atomic is because when we do the

504
00:29:21,300 --> 00:29:26,000
resolved we don't have a Shader involved there right now we're not

505
00:29:26,000 --> 00:29:28,600
loading anything into the graphics card and we shouldn't be expect to

506
00:29:28,600 --> 00:29:31,500
be able to necessarily because it depends on the hardware that could

507
00:29:31,500 --> 00:29:36,200
take their resolve and do something smart with it, right?

508
00:29:37,000 --> 00:29:40,200
So what we pretty much have to do is say that there's two srgb flags,

509
00:29:40,500 --> 00:29:42,500
there's basically texture read

510
00:29:45,700 --> 00:29:47,200
and frame buffer, right?

511
00:29:53,300 --> 00:29:53,700
Oops.

512
00:30:00,500 --> 00:30:00,900
Okay.

513
00:30:02,500 --> 00:30:06,700
So basically what we're looking at here is we need to support either

514
00:30:06,700 --> 00:30:08,000
of these two things failing.

515
00:30:08,500 --> 00:30:11,800
And when this one fails, what that means is something in these two

516
00:30:11,800 --> 00:30:12,900
failed, right?

517
00:30:12,900 --> 00:30:13,700
It could be either.

518
00:30:13,700 --> 00:30:17,200
One of them is not supported, we don't care which one if it's not

519
00:30:17,200 --> 00:30:22,400
supported then we have to simulate it in the back of the Shader right

520
00:30:22,400 --> 00:30:23,600
here, right?

521
00:30:24,600 --> 00:30:29,700
And so either we have to simulate it on one side or both sides or you

522
00:30:29,700 --> 00:30:32,100
know, one side of the other or both, right?

523
00:30:32,500 --> 00:30:33,900
So we're really going to end up with.

524
00:30:33,900 --> 00:30:37,200
I think two different things, which is like

525
00:30:40,400 --> 00:30:46,100
Sim texture load, srgb and shaders Sim.

526
00:30:49,000 --> 00:30:50,400
Text right, srgb.

527
00:30:53,600 --> 00:30:58,500
And so we assume that we'll have to do either of those two, right?

528
00:31:01,800 --> 00:31:04,700
But that we don't know whether we'll have to do both or one or the

529
00:31:04,700 --> 00:31:05,100
other

530
00:31:11,700 --> 00:31:15,600
We know on this card will have to do it the right one, another cards

531
00:31:15,600 --> 00:31:19,000
we might have to do both on some cards modern cars, presumably we'd

532
00:31:19,000 --> 00:31:20,700
have to do neither right?

533
00:31:21,700 --> 00:31:24,000
So what we want to do here is say okay we'll assume you have to do

534
00:31:24,000 --> 00:31:28,100
both of them if the frame buffer supports RGB and and and right and we

535
00:31:28,100 --> 00:31:33,300
have all these sorts of things then we're gonna try this stuff but

536
00:31:33,400 --> 00:31:37,700
honestly this one is separate so really what we want to know.

537
00:31:40,100 --> 00:31:41,500
Is a little bit different than that.

538
00:31:41,600 --> 00:31:43,800
We want to say if the GLX texture.

539
00:31:43,800 --> 00:31:45,100
Srgb is there.

540
00:31:45,200 --> 00:31:50,100
Then we'll assume that the text load is false because if we know that

541
00:31:50,100 --> 00:31:53,800
GLX texture srgb is there then that means we know will be able to turn

542
00:31:53,800 --> 00:31:56,300
on our texture format.

543
00:31:57,700 --> 00:32:03,800
Our texture format for reading textures will be correct right for and

544
00:32:03,800 --> 00:32:07,300
and that means we will need a second one here, instead of just one

545
00:32:07,300 --> 00:32:08,400
default internal texture.

546
00:32:08,500 --> 00:32:16,500
Format, we need default, Sprite texture format and a default.

547
00:32:18,400 --> 00:32:20,400
Frame buffer, texture format, great.

548
00:32:20,400 --> 00:32:21,300
We need both of these.

549
00:32:23,000 --> 00:32:27,500
So what we want to do here is say okay, our default Sprite texture

550
00:32:27,500 --> 00:32:33,500
format is going to be set separately because we know that that's sort

551
00:32:33,500 --> 00:32:34,600
of control differently.

552
00:32:37,500 --> 00:32:41,300
And will again assume in both cases, that we will.

553
00:32:44,000 --> 00:32:44,600
Fault.

554
00:32:45,200 --> 00:32:45,800
Just right.

555
00:32:46,300 --> 00:32:49,000
That we will set it to the correct value by trying to do some checks

556
00:32:49,000 --> 00:32:49,300
here.

557
00:32:49,800 --> 00:32:52,700
Okay, so we have a default Sprites texture format if you vote for a

558
00:32:52,700 --> 00:32:56,000
vector format, this right texture format is just if we think we have

559
00:32:56,000 --> 00:32:57,900
it we will we will use it.

560
00:32:57,900 --> 00:32:59,800
And then we will not try to simulate the load.

561
00:33:00,200 --> 00:33:02,700
On the other hand, if it looks like we might get the frame buffer will

562
00:33:02,700 --> 00:33:09,900
test it and see and if we can, then we'll do default frame buffer

563
00:33:09,900 --> 00:33:13,500
format and we'll set that.

564
00:33:14,700 --> 00:33:15,700
Flag to let us know.

565
00:33:15,700 --> 00:33:16,500
We don't have to do that.

566
00:33:16,500 --> 00:33:19,800
Shaders Sim text, right?

567
00:33:20,700 --> 00:33:24,200
Okay, so now we have to fix up the places that use that

568
00:33:30,800 --> 00:33:31,500
in the code.

569
00:33:31,500 --> 00:33:32,600
So here we are.

570
00:33:33,100 --> 00:33:34,100
We're allocating texture.

571
00:33:34,100 --> 00:33:35,800
This is going to be a default Sprite.

572
00:33:35,800 --> 00:33:37,800
Everything's going to be defaults breaks at that one.

573
00:33:38,100 --> 00:33:39,200
Place that allocates.

574
00:33:39,400 --> 00:33:40,700
Yeah, this guy basically.

575
00:33:45,300 --> 00:33:45,700
Go.

576
00:33:48,200 --> 00:33:52,100
And so now we just have to in here actually handle these.

577
00:33:52,100 --> 00:33:56,800
So what we need to do now is is have these sort of predicated, based

578
00:33:56,800 --> 00:34:00,500
on what we found we may want to make it so that we can sort of create

579
00:34:00,500 --> 00:34:00,900
this string.

580
00:34:00,900 --> 00:34:01,700
Dynamically.

581
00:34:02,500 --> 00:34:08,000
So what we might do is since we're in a place where we can concatenate

582
00:34:08,000 --> 00:34:10,800
strings together, we could just make something that sort of prints

583
00:34:10,800 --> 00:34:12,800
these out into each other.

584
00:34:13,400 --> 00:34:15,600
Let's let's take a look at that here.

585
00:34:16,600 --> 00:34:21,000
So here's our format string call.

586
00:34:21,000 --> 00:34:24,900
I'm going to go ahead and use that to basically build a dynamic string

587
00:34:24,900 --> 00:34:25,199
here.

588
00:34:25,199 --> 00:34:29,800
So I'm just going to make this be some giant string that we can stick

589
00:34:29,800 --> 00:34:31,900
stuff into that that may be excessive.

590
00:34:31,900 --> 00:34:36,199
And so what I want to do here is just say like okay let's format a

591
00:34:36,199 --> 00:34:42,699
string, let's pass it, this guy and then I'm just going to go ahead

592
00:34:42,699 --> 00:34:43,699
and pass it.

593
00:34:43,699 --> 00:34:45,300
Some strings here, right?

594
00:34:45,600 --> 00:34:46,600
First of all,

595
00:34:56,900 --> 00:34:58,800
I guess we have the version one.

596
00:35:07,100 --> 00:35:09,800
And then and I guess I actually now I think about it that can just be

597
00:35:09,800 --> 00:35:11,900
baked in there because we know that's always going to be there.

598
00:35:12,100 --> 00:35:14,200
It's the other two that we're not sure if they're there.

599
00:35:15,100 --> 00:35:19,100
So then we have one for our text reads.

600
00:35:23,800 --> 00:35:24,300
There we go.

601
00:35:27,600 --> 00:35:29,400
And we have another for our text rights.

602
00:35:37,100 --> 00:35:38,300
That was what we called it, right.

603
00:35:39,400 --> 00:35:42,400
Shooters Sim text read and write.

604
00:35:45,100 --> 00:35:46,300
It's load.

605
00:35:52,600 --> 00:35:56,400
All right, so now we've got one where we can actually build the

606
00:35:56,400 --> 00:35:57,400
strings together.

607
00:35:57,400 --> 00:35:59,800
So there's the two strings that might appear and then we'll pass.

608
00:36:00,000 --> 00:36:00,200
Are.

609
00:36:00,200 --> 00:36:04,100
So what I can do here is just say, alright if Shader semtex, right?

610
00:36:04,100 --> 00:36:05,500
Srgb is true.

611
00:36:05,700 --> 00:36:10,900
Then we'll add that string otherwise not same thing with text read,

612
00:36:15,300 --> 00:36:19,300
So now depending on whether or not we want Shader semtex, right?

613
00:36:19,300 --> 00:36:23,900
Or Center 7, text read, we'll put those defines in or not, right.

614
00:36:24,300 --> 00:36:26,700
The other thing I guess I could do which maybe is a better way to do

615
00:36:26,700 --> 00:36:32,100
it is just have this be maybe maybe just something which prints it out

616
00:36:32,600 --> 00:36:35,700
every time but adds the right value to it.

617
00:36:35,700 --> 00:36:37,400
So I could just do a % D there.

618
00:36:37,400 --> 00:36:39,900
For example, maybe that's a clearer way.

619
00:36:49,700 --> 00:36:50,200
Right?

620
00:36:50,200 --> 00:36:53,700
So then I would just say, Okay, print out the shaders him text, right?

621
00:36:53,700 --> 00:36:56,400
And the Shader semtex read.

622
00:36:56,400 --> 00:37:02,300
Put those two out and, and just put a 0 or 1 there, depending on

623
00:37:02,300 --> 00:37:04,500
which, which ones are on or off, right?

624
00:37:04,500 --> 00:37:07,500
And so then we don't need any ifs at all.

625
00:37:07,500 --> 00:37:09,600
We're just going to produce that string.

626
00:37:09,600 --> 00:37:12,600
Concatenated then we've got the header code which we don't really have

627
00:37:12,600 --> 00:37:16,200
to take advantage of yet vertex code and fragment code, right?

628
00:37:16,200 --> 00:37:19,700
So now what we need to do is actually use these and what I can do is

629
00:37:19,700 --> 00:37:20,000
In here.

630
00:37:20,000 --> 00:37:23,000
I can I can do it if shaders semtex, right?

631
00:37:27,100 --> 00:37:28,600
And a Shader semtex read.

632
00:37:30,600 --> 00:37:31,700
Not to just correct these.

633
00:37:32,200 --> 00:37:36,200
So basically, you can see what's going on here in the Shader, right?

634
00:37:36,200 --> 00:37:38,100
I can, I'm basically adding two stages.

635
00:37:38,500 --> 00:37:42,300
Here is the place where we sample the texture here, is the place where

636
00:37:42,300 --> 00:37:43,900
the texture gets output, right?

637
00:37:44,300 --> 00:37:47,800
And so, when we go to write this back to the frame buffer, or when we

638
00:37:47,800 --> 00:37:51,800
go to read this texture in, in those two places, I could stimulate the

639
00:37:51,800 --> 00:37:55,300
srgb, transform myself, right?

640
00:37:55,800 --> 00:38:00,200
So what I need to do here is essentially effectively the same thing.

641
00:38:00,900 --> 00:38:04,500
As we are doing in our software renderer, right?

642
00:38:04,500 --> 00:38:05,700
It's the exact same thing.

643
00:38:06,000 --> 00:38:09,100
So, if you take a look inside the code for handmade here already, and

644
00:38:09,100 --> 00:38:10,600
we look at the render code.

645
00:38:14,100 --> 00:38:16,000
You can see draw a rectangle quickly here.

646
00:38:16,900 --> 00:38:21,500
Here's our code for this and let's see.

647
00:38:21,900 --> 00:38:24,400
Here's our unpacked by linear, right?

648
00:38:26,900 --> 00:38:27,600
Let's see.

649
00:38:27,600 --> 00:38:28,900
So

650
00:38:35,100 --> 00:38:41,600
Looks like this is the conversion here so you can see, let's see.

651
00:38:53,100 --> 00:38:56,400
We should be doing in a course, is very always, very hard to read the

652
00:38:56,400 --> 00:38:57,700
code.

653
00:38:57,900 --> 00:38:58,300
When we've

654
00:39:00,000 --> 00:39:01,600
Is it all out like this?

655
00:39:05,200 --> 00:39:08,100
I was going to point out where this happens, but let's see.

656
00:39:08,900 --> 00:39:11,400
So this right here.

657
00:39:17,200 --> 00:39:21,400
this right here is actually doing so this is taking the

658
00:39:26,700 --> 00:39:31,800
Red blue and it's actually lining those up.

659
00:39:34,000 --> 00:39:36,500
You can see it masking out the various parts.

660
00:39:36,800 --> 00:39:40,800
So this is actually separating out the parts of the texture and then

661
00:39:40,800 --> 00:39:43,200
cured doing the bilinear blend.

662
00:39:51,000 --> 00:39:52,800
Here's the bilinear blend of the texture.

663
00:39:55,500 --> 00:40:00,600
So it looks like we don't really do this properly, the squaring of the

664
00:40:00,600 --> 00:40:03,100
or maybe we did, and maybe we did it back a little bit further because

665
00:40:03,100 --> 00:40:05,200
this is actually the destination now that I look at it.

666
00:40:05,300 --> 00:40:07,700
So, this is loading, the destination and doing the squaring of the

667
00:40:07,700 --> 00:40:08,700
destination.

668
00:40:10,200 --> 00:40:12,500
But I don't see where we're squaring the source.

669
00:40:16,500 --> 00:40:19,800
And it might just because we cleverly put in a way to do that in here.

670
00:40:20,900 --> 00:40:21,800
I'm not sure.

671
00:40:31,300 --> 00:40:32,700
Because I don't see it.

672
00:40:38,600 --> 00:40:43,000
I don't see it obviously in here but maybe we just, I'm not looking.

673
00:40:43,000 --> 00:40:44,500
I'm not looking in the right place.

674
00:40:47,300 --> 00:40:51,900
But either, or this is the exact thing we're trying to simulate here

675
00:40:52,100 --> 00:40:56,300
on the destination side, you can see it squaring the values on the

676
00:40:56,300 --> 00:41:02,100
incoming and then on the way out again, we kind of have to do the the

677
00:41:03,000 --> 00:41:07,600
reverse process and you can see right here that happen as well, right?

678
00:41:07,600 --> 00:41:09,700
We've got the MMR squared PS.

679
00:41:10,600 --> 00:41:15,400
So what we need to do is that same process, the are the G and the B

680
00:41:15,400 --> 00:41:15,600
need.

681
00:41:15,800 --> 00:41:17,900
To get flipped back up, basically.

682
00:41:23,200 --> 00:41:24,800
so, when we go to right out,

683
00:41:25,900 --> 00:41:26,400
Right?

684
00:41:26,700 --> 00:41:35,400
And when we, when we read in, we have to do the text sample RGB, we

685
00:41:35,400 --> 00:41:37,500
have to be able to do a square here.

686
00:41:37,500 --> 00:41:42,500
So texts sample RGB has to equal basically times itself, right?

687
00:41:43,500 --> 00:41:47,000
It just has to get squared and like I said, in shaders, unlike the

688
00:41:47,000 --> 00:41:51,800
way, we wrote it in shaders, when you do a multiplication, it

689
00:41:51,800 --> 00:41:54,600
defaults, if it's a vector to just doing component wise.

690
00:41:54,600 --> 00:41:55,600
So it's the hadamard product.

691
00:41:55,700 --> 00:41:58,900
Duct, which is what we would want to square, right?

692
00:42:00,000 --> 00:42:03,700
Similarly, on the result we need to do, basically a square root.

693
00:42:03,700 --> 00:42:08,300
I don't know if you can write this this way, but that's what we need

694
00:42:08,300 --> 00:42:09,900
to do, right?

695
00:42:11,000 --> 00:42:13,200
So I'm not sure.

696
00:42:18,200 --> 00:42:18,500
Oops.

697
00:42:21,400 --> 00:42:26,600
We'll have to check the Shader reference card to see whether that how

698
00:42:26,600 --> 00:42:28,100
allowed that actually is.

699
00:42:28,200 --> 00:42:30,600
In terms of, how do you do the square root part of things?

700
00:42:31,600 --> 00:42:34,000
I know we had one up before.

701
00:42:49,100 --> 00:42:53,700
Okay, so there's our square roots in the inverse square root.

702
00:42:54,200 --> 00:42:57,600
I don't know whether square root is to perform is more performance.

703
00:42:57,600 --> 00:42:58,000
Intensive.

704
00:42:58,000 --> 00:43:01,400
That if inverse square root is an approximate square root, sometimes

705
00:43:01,400 --> 00:43:02,200
that is the case.

706
00:43:02,500 --> 00:43:05,600
So I don't know if we can tell it it, we may have to use inverse

707
00:43:05,600 --> 00:43:07,000
square root and then invert it.

708
00:43:07,000 --> 00:43:07,800
I'm not sure.

709
00:43:08,100 --> 00:43:09,400
Hopefully, we don't have to.

710
00:43:09,800 --> 00:43:15,000
So in theory that will just work and we'll be able to get that to just

711
00:43:15,200 --> 00:43:17,300
do what it needs to do vertex.

712
00:43:17,500 --> 00:43:22,400
Soak a fragment Shader undefeated in fire result.

713
00:43:23,600 --> 00:43:27,200
That is not obviously what we want.

714
00:43:29,600 --> 00:43:30,800
Sorry, result color.

715
00:43:31,800 --> 00:43:33,200
And this is supposed to be

716
00:43:35,200 --> 00:43:36,000
Sold color.

717
00:43:36,700 --> 00:43:37,200
There we go.

718
00:43:39,500 --> 00:43:40,300
Try that again.

719
00:43:41,800 --> 00:43:42,400
There we go.

720
00:43:43,200 --> 00:43:46,800
So now we've sort of got a couple of different things happening here.

721
00:43:46,800 --> 00:43:47,700
We'll talk about those.

722
00:43:50,600 --> 00:43:51,000
Okay.

723
00:43:52,700 --> 00:43:57,900
So now, I believe our colors for our Sprites should be more correct,

724
00:43:57,900 --> 00:43:58,200
right?

725
00:43:58,200 --> 00:44:00,800
And they do look more correct to me as well, right?

726
00:44:00,800 --> 00:44:04,100
When I'm looking at them, that actually looks like the correct colors

727
00:44:04,300 --> 00:44:05,800
to me, which is good.

728
00:44:06,900 --> 00:44:13,300
So I think we now have everything working properly in on that path.

729
00:44:13,800 --> 00:44:19,600
So when we and properly, I mean, for the case, where the shaders for

730
00:44:19,600 --> 00:44:22,100
where multi sample doesn't support it and we have to

731
00:44:22,300 --> 00:44:25,500
Simulate the srgb in the Shader right now.

732
00:44:25,500 --> 00:44:28,400
We don't have another card here that does it properly, so we can't

733
00:44:28,400 --> 00:44:30,800
test to see whether our path actually works, as part of our path is

734
00:44:30,800 --> 00:44:34,100
supposed to turn this off when we get in the circumstance where the

735
00:44:34,100 --> 00:44:34,900
card can do it.

736
00:44:34,900 --> 00:44:37,400
So we really need to test it on another piece of Hardware eventually

737
00:44:37,400 --> 00:44:40,900
which will try to do, but at least we have it working.

738
00:44:40,900 --> 00:44:45,400
I think correctly on out in our particular case here now we do have

739
00:44:45,400 --> 00:44:46,400
another problem.

740
00:44:46,500 --> 00:44:49,900
However and that gets to the next set of things that I want to do.

741
00:44:50,200 --> 00:44:52,100
And that is that the rest of the pipeline.

742
00:44:52,200 --> 00:44:54,800
Line, however, doesn't go through this path, right?

743
00:44:56,100 --> 00:44:59,500
The rest of our pipeline is still fixed function, and still doing

744
00:44:59,500 --> 00:44:59,800
things.

745
00:45:00,000 --> 00:45:00,500
Old way.

746
00:45:00,800 --> 00:45:04,400
And so, for example, our cubes are still the wrong color because our

747
00:45:04,400 --> 00:45:08,900
cubes are still specifying colors in srgb space, but that path is

748
00:45:08,900 --> 00:45:12,800
unaware of the fact that the frame buffer does not support srgb

749
00:45:12,800 --> 00:45:14,200
conversion, right?

750
00:45:14,300 --> 00:45:17,500
So it's still using the wrong colors, which means our cubes are darker

751
00:45:17,500 --> 00:45:18,400
than they should be.

752
00:45:19,100 --> 00:45:23,400
Everything else is correct, but that is not so, okay.

753
00:45:23,400 --> 00:45:24,800
So we're definitely getting closer though.

754
00:45:24,800 --> 00:45:28,600
Like, you know, our little hero guy I think is now more of the correct

755
00:45:28,600 --> 00:45:29,800
color that he's supposed to be.

756
00:45:30,000 --> 00:45:31,500
Be, he looks right to me now.

757
00:45:31,500 --> 00:45:35,600
Anyway, whereas before he definitely didn't and so I think we're in

758
00:45:35,600 --> 00:45:39,700
better shape for that but we still have to deal with the fact that the

759
00:45:39,700 --> 00:45:43,800
other code is you know the rectangle code in the cube code is still

760
00:45:43,800 --> 00:45:45,300
kind of on the Antiquated path.

761
00:45:45,600 --> 00:45:48,400
So that's I think where we need to sort of move towards.

762
00:45:48,500 --> 00:45:52,100
We also have a few other items that we want to take a look at

763
00:45:52,100 --> 00:45:52,700
eventually.

764
00:45:54,000 --> 00:45:54,900
Which is based up.

765
00:45:54,900 --> 00:46:00,000
Basically, we want to segregate our code out in terms of stuff that

766
00:46:00,000 --> 00:46:03,400
has transparency in it you can see right now that for example our

767
00:46:03,900 --> 00:46:07,500
shadows in like these cases which are doing Alpha.

768
00:46:07,500 --> 00:46:11,000
Remember we no longer have really any Alpha per se.

769
00:46:11,500 --> 00:46:16,200
We only have multi sample, which means that we end up in a

770
00:46:16,200 --> 00:46:18,400
circumstance where our

771
00:46:21,900 --> 00:46:26,400
Because we have the only eight steps of alpha due to the fact that

772
00:46:26,400 --> 00:46:28,900
multi sample, we only have eight times multi sampling on.

773
00:46:29,200 --> 00:46:32,600
You can see a lot of banding in anything that's transparent.

774
00:46:32,600 --> 00:46:34,700
You can see it in the Fade Out of these guys.

775
00:46:34,700 --> 00:46:38,700
You can see it in the shadows and so there's probably some things we

776
00:46:38,700 --> 00:46:39,700
could do there.

777
00:46:40,300 --> 00:46:45,000
That would increase our Fidelity by not always relying entirely on

778
00:46:45,000 --> 00:46:47,800
Multi sample for Alpha and go and maybe

779
00:46:49,900 --> 00:46:54,700
Doing something where we segregate, for example, our Sprites that have

780
00:46:55,100 --> 00:46:59,300
translucency transparency, like, the Shadows do segregating them into

781
00:46:59,300 --> 00:47:03,000
a separate buffer so that they can get rendered after the fact without

782
00:47:03,000 --> 00:47:03,900
Z checking.

783
00:47:04,100 --> 00:47:07,900
For example, would be one way that we can make that work.

784
00:47:08,100 --> 00:47:11,900
So we may be able to do some things that will drastically improve the

785
00:47:11,900 --> 00:47:15,400
quality of those sorts of drawing operations.

786
00:47:16,200 --> 00:47:19,000
But we, you know, like I said, there's

787
00:47:19,800 --> 00:47:23,000
There's costs associated with everything and so you'll have to see as

788
00:47:23,000 --> 00:47:24,000
we sort of go through it.

789
00:47:25,100 --> 00:47:25,900
What the trade-offs are.

790
00:47:26,000 --> 00:47:30,800
But at least for things like Shadows which tend to occur in isolation

791
00:47:31,200 --> 00:47:34,900
and which where mistakes are not as visible on them.

792
00:47:35,100 --> 00:47:36,500
There's some pretty easy ways.

793
00:47:36,500 --> 00:47:41,100
We can get free real Alpha in there and so we probably will want to

794
00:47:43,600 --> 00:47:48,600
Okay, so that's it for the srgb part.

795
00:47:48,600 --> 00:47:51,600
For now, like I said, we kind of need to play around that on a, some

796
00:47:51,600 --> 00:47:55,000
better Hardware that can actually play around with this and see what's

797
00:47:55,000 --> 00:47:55,700
going on.

798
00:47:56,800 --> 00:47:59,800
So I think all this stuff should now be more.

799
00:48:00,400 --> 00:48:05,300
I were correct and and something we can can use going forward.

800
00:48:05,700 --> 00:48:10,100
What we need to do now is just take a look and see about modernizing

801
00:48:10,100 --> 00:48:15,000
the rest of the part of the parts of the pipeline that we were sort of

802
00:48:15,000 --> 00:48:17,900
leaving in the old school format.

803
00:48:18,800 --> 00:48:22,200
I want to take a look at buying frame buffer here for a second, just

804
00:48:22,200 --> 00:48:23,600
to see how that's working.

805
00:48:33,200 --> 00:48:33,800
All right.

806
00:48:34,400 --> 00:48:37,800
Okay so what we need to do now is basically just go through and start

807
00:48:37,800 --> 00:48:41,600
to clean out the parts of this that are sort of working differently.

808
00:48:41,900 --> 00:48:45,000
Now one of the things that you'll notice if you take a look at how

809
00:48:45,000 --> 00:48:46,700
this this code is structured right now.

810
00:48:47,400 --> 00:48:51,500
So you can see that we've got our render entry bitmap code here.

811
00:48:51,900 --> 00:48:54,700
And you can see that basically what it's doing is it's kind of taking

812
00:48:54,700 --> 00:48:59,700
these vertices and it's doing a very predictable, sort of out sort of

813
00:49:01,200 --> 00:49:04,900
Blowing out, if you will, it's taking the vertices and it's doing a

814
00:49:04,900 --> 00:49:08,600
specific sort of amplification of the information that's coming in

815
00:49:08,600 --> 00:49:10,300
which are these like axes and stuff.

816
00:49:10,600 --> 00:49:13,700
And then it's doing this sort of like creation of these with the Z

817
00:49:13,700 --> 00:49:14,700
bias and whatever.

818
00:49:15,000 --> 00:49:15,500
Right.

819
00:49:17,300 --> 00:49:20,900
And then if you come down here, you can see the render entry Cube and

820
00:49:20,900 --> 00:49:23,100
it does exactly the same stuff, right?

821
00:49:23,100 --> 00:49:26,700
It's taking in some inputs and it's doing this amplification, right?

822
00:49:27,900 --> 00:49:30,500
And then you get down here to render entry.

823
00:49:31,100 --> 00:49:31,900
Rectangle.

824
00:49:32,300 --> 00:49:34,300
And that's effectively the same thing to write.

825
00:49:34,300 --> 00:49:38,000
It's calling the up in jail rectangle call but otherwise it's pretty

826
00:49:38,000 --> 00:49:39,700
much doing exactly the same thing.

827
00:49:40,400 --> 00:49:46,900
And so what I want to look at today is let's in preparation for sort

828
00:49:46,900 --> 00:49:50,300
of cleaning all this out and making this more concise and

829
00:49:52,000 --> 00:49:52,700
And useful.

830
00:49:53,700 --> 00:49:55,900
Let's talk about maybe what?

831
00:49:55,900 --> 00:50:01,100
If we were to just change the format that we submit these things in

832
00:50:01,800 --> 00:50:07,100
and we just always submitted them as, you know, quads or something,

833
00:50:07,200 --> 00:50:07,800
right?

834
00:50:08,500 --> 00:50:13,000
Like, we always submitted them as or as triangles, you know what I'm

835
00:50:13,000 --> 00:50:17,400
saying, something where we would just say, let's clean up.

836
00:50:17,400 --> 00:50:21,600
Let's not have multiple different type things.

837
00:50:21,800 --> 00:50:25,100
Come in in terms of drawing, let's just have everything just draw

838
00:50:25,100 --> 00:50:27,300
textured triangle since that's what we know.

839
00:50:29,300 --> 00:50:31,500
We end up doing it the low end, right?

840
00:50:32,700 --> 00:50:35,400
And furthermore, since we know that we're actually always textured

841
00:50:35,400 --> 00:50:39,400
quadrilaterals not textured triangles, maybe we can figure out a way

842
00:50:39,400 --> 00:50:41,100
to make that work as well.

843
00:50:43,200 --> 00:50:43,600
Right.

844
00:50:45,600 --> 00:50:49,000
So let's try this, let's just try moving it that way.

845
00:50:49,600 --> 00:50:53,000
And so, what I want to do here is I basically want to get rid of these

846
00:50:53,000 --> 00:50:59,100
other paths, and I want to bake these paths into the render group side

847
00:50:59,100 --> 00:50:59,800
of things.

848
00:51:00,800 --> 00:51:04,500
That's on the app side and have the opengl output side.

849
00:51:04,600 --> 00:51:08,900
All it deals with is just textured quads, that's it, right?

850
00:51:10,200 --> 00:51:11,600
That's what I would like to do.

851
00:51:12,300 --> 00:51:18,100
And so yeah, if we could go ahead and do that I think we might be in

852
00:51:18,400 --> 00:51:21,000
some interesting shape here because then that sort of simplifies our

853
00:51:21,000 --> 00:51:22,100
render a down quite a bit.

854
00:51:22,100 --> 00:51:25,100
We can start to do some more useful stuff with it, okay?

855
00:51:25,100 --> 00:51:28,000
So if I were to do that, let's go over here to render group.

856
00:51:30,800 --> 00:51:35,000
and what I'm going to do is I'm going to maybe say let's say we had a

857
00:51:35,000 --> 00:51:40,400
render group entry that was like render group entry type, you know,

858
00:51:40,400 --> 00:51:41,400
textured,

859
00:51:48,400 --> 00:51:52,000
So basically I'm going to introduce a new type here and I'm going to

860
00:51:52,500 --> 00:51:55,800
use that type to sort of maybe slowly move everything over to that

861
00:51:55,800 --> 00:51:56,300
type.

862
00:51:56,300 --> 00:52:00,400
And then I'll just delete the rest of the types that aren't extremely

863
00:52:00,400 --> 00:52:01,100
specific.

864
00:52:01,100 --> 00:52:04,400
Like, for example, this one, we probably need to leave in there.

865
00:52:04,400 --> 00:52:09,100
The Red Door Group entry type, render entry blend Target, right?

866
00:52:10,200 --> 00:52:13,400
There's things that do like compositing operations like that.

867
00:52:16,100 --> 00:52:18,900
And that would probably have to remain, you know?

868
00:52:20,300 --> 00:52:21,300
Least, I would think so.

869
00:52:22,300 --> 00:52:25,100
Okay, so you know, let's keep going with this.

870
00:52:25,300 --> 00:52:30,800
So, if I have a render entry textured quads, what I want to do here is

871
00:52:30,800 --> 00:52:35,400
say that I have such a thing as a textured quad, and this textured

872
00:52:35,400 --> 00:52:40,000
quad is going to be sort of just a minimal information, you would need

873
00:52:40,700 --> 00:52:42,800
to make that happen, right?

874
00:52:43,600 --> 00:52:45,500
So the textured quad,

875
00:52:47,100 --> 00:52:52,200
In this case is going to have maybe a textured vertex.

876
00:52:54,000 --> 00:52:54,800
Concept.

877
00:52:55,300 --> 00:52:58,200
And so what we would have here is I'm going to pack the color down.

878
00:52:58,300 --> 00:53:02,100
So I would say at every vertex we would have a color value.

879
00:53:03,700 --> 00:53:10,000
I'm also going to say that we probably I don't know if we need texture

880
00:53:10,000 --> 00:53:14,100
coordinates or not because really they're just going to be zero to one

881
00:53:14,100 --> 00:53:15,400
pretty much all the time.

882
00:53:16,200 --> 00:53:18,600
So I don't know that those are super necessary.

883
00:53:18,600 --> 00:53:23,700
Actually, they could just be inferred, would be my thought.

884
00:53:25,600 --> 00:53:29,800
So it's a little bit hard to say, but for now, I guess we could say,

885
00:53:29,800 --> 00:53:30,800
will pass down the texture.

886
00:53:30,800 --> 00:53:32,800
Coordinates, just why not?

887
00:53:34,300 --> 00:53:37,000
So it's also going to have texture coordinates.

888
00:53:38,400 --> 00:53:42,300
So this will be like a UV coordinate, and then it's going to have a

889
00:53:42,900 --> 00:53:45,500
position coordinate as well, right?

890
00:53:46,100 --> 00:53:49,100
And if you look at the way these are structured, it's a little bit

891
00:53:49,100 --> 00:53:52,400
unfortunate because we end up having with our textured vertex here.

892
00:53:52,600 --> 00:53:55,100
We have four floats, right?

893
00:53:55,200 --> 00:53:58,100
Which is 34 32-bit values.

894
00:53:59,200 --> 00:53:59,800
So we have

895
00:54:00,200 --> 00:54:00,900
Pack of four.

896
00:54:03,200 --> 00:54:05,800
Then we have 2 plus a third.

897
00:54:05,800 --> 00:54:08,000
That's the same space as a float.

898
00:54:09,000 --> 00:54:12,000
So it's kind of like there's this one this is a little bit of an

899
00:54:12,000 --> 00:54:12,900
alignment here.

900
00:54:14,000 --> 00:54:19,000
It would be nice if we just had one more thing but we don't really

901
00:54:19,000 --> 00:54:24,700
have one more thing for the vertex right now that may be okay because

902
00:54:24,700 --> 00:54:27,300
again I think two graphics cards tend to be pretty good about being

903
00:54:27,300 --> 00:54:31,400
able to deal with the unaligned packed, sort of formats of stuff.

904
00:54:31,700 --> 00:54:32,300
So it's probably

905
00:54:32,500 --> 00:54:36,100
Fine, but I'm just pointing out the fact that, you know, in, I'm

906
00:54:36,100 --> 00:54:39,600
always like try to get things lined up into good chunks.

907
00:54:39,600 --> 00:54:41,700
But yeah, neither here, nor there.

908
00:54:43,900 --> 00:54:46,600
So, we're basically have four vertices for Quad, right?

909
00:54:46,600 --> 00:54:50,400
And so four of these, at least, that's one thing we could say, will

910
00:54:50,400 --> 00:54:51,300
come out nicely.

911
00:54:51,500 --> 00:54:57,700
So in this case, where we've got seven of the, we've got, you know, 4

912
00:54:57,700 --> 00:54:58,600
plus 2, plus 1.

913
00:54:58,900 --> 00:55:02,100
So we've got seven of these guys, but we're going to do them four

914
00:55:02,100 --> 00:55:03,500
times items up with 28.

915
00:55:03,500 --> 00:55:05,000
It's not quite as bad.

916
00:55:06,100 --> 00:55:06,600
I guess.

917
00:55:06,600 --> 00:55:07,700
Maybe, maybe not.

918
00:55:08,200 --> 00:55:10,000
But oh wait, no, that's actually good.

919
00:55:12,100 --> 00:55:13,200
That's actually pretty good.

920
00:55:13,300 --> 00:55:17,500
Because if, if the textured quad itself is that sighs I suppose we

921
00:55:17,500 --> 00:55:17,700
could.

922
00:55:17,700 --> 00:55:18,700
Well, yeah, I don't know.

923
00:55:18,900 --> 00:55:20,400
I'm kind of babbling at this point.

924
00:55:20,500 --> 00:55:20,900
Let's forget.

925
00:55:20,900 --> 00:55:21,300
All that.

926
00:55:22,400 --> 00:55:25,800
Alright, so here's the next part that we have to think about is for

927
00:55:25,800 --> 00:55:29,200
every textured quad, we need to specify a bitmap, right?

928
00:55:30,800 --> 00:55:33,900
So there's some bitmap that has to be specified of here and that

929
00:55:33,900 --> 00:55:39,000
bitmap has to tell us effectively what texture went on this

930
00:55:39,000 --> 00:55:40,800
quadrilateral, right?

931
00:55:40,800 --> 00:55:41,900
That's what we need to know.

932
00:55:43,100 --> 00:55:47,200
And so you know you can see that if we were doing this in software

933
00:55:47,200 --> 00:55:49,400
that's a pretty reasonable format for it.

934
00:55:49,500 --> 00:55:54,500
But as you know, vertices and textures are sort of handled completely

935
00:55:54,500 --> 00:55:57,500
different differently unfortunately.

936
00:55:59,200 --> 00:56:02,600
Jimmy on the graphics card, right?

937
00:56:03,200 --> 00:56:07,600
So we do have this sort of nasty problem where vertices are things

938
00:56:07,600 --> 00:56:10,800
that we want to submit to the graphics card, but textures are things

939
00:56:10,800 --> 00:56:12,800
that we have to handle outside in our Loop.

940
00:56:12,800 --> 00:56:16,700
Now, it's worth noting that this is only because graphic cards.

941
00:56:16,700 --> 00:56:18,800
Haven't been completely modernized yet.

942
00:56:18,900 --> 00:56:22,800
It's actually not true at a fundamental level.

943
00:56:23,000 --> 00:56:27,300
So, for example, let's say you're on an Nvidia card, a modern, and

944
00:56:27,300 --> 00:56:28,000
video card.

945
00:56:28,600 --> 00:56:29,100
Right?

946
00:56:29,900 --> 00:56:35,300
Well on a modern Nvidia card, it's actually the case that you can have

947
00:56:35,900 --> 00:56:37,400
a texture pointer.

948
00:56:41,400 --> 00:56:44,500
You can actually have that inside the Shader.

949
00:56:45,500 --> 00:56:48,000
So you can actually have something where you've got, you know,

950
00:56:48,000 --> 00:56:54,000
vertices and a texture pointer actually on the card and the card as

951
00:56:54,000 --> 00:56:55,100
it's doing.

952
00:56:55,100 --> 00:56:59,600
Rasterization can actually go look, use that texture pointer.

953
00:57:00,000 --> 00:57:06,200
Seems that texture pointer for a primitive if it wants to write and

954
00:57:06,200 --> 00:57:08,600
video cards are very general purpose at this point.

955
00:57:11,900 --> 00:57:14,400
And they allow you access to a lot of those features which is pretty

956
00:57:14,400 --> 00:57:14,800
awesome.

957
00:57:16,700 --> 00:57:19,500
AMD, it's pretty much true as well.

958
00:57:19,500 --> 00:57:22,800
Although the access to it varies more due to this driver things and

959
00:57:22,800 --> 00:57:23,400
stuff like this.

960
00:57:24,400 --> 00:57:28,200
But the real problem, the thing that pretty much always holds it back

961
00:57:28,900 --> 00:57:31,300
is is not those two, it's the Intel.

962
00:57:32,700 --> 00:57:37,300
Chips, the Intel chip, still have a lot of sort of antiquated Notions

963
00:57:37,300 --> 00:57:42,100
about what is state that has 2 B managed on the outside and what the

964
00:57:42,100 --> 00:57:43,900
state that has to get managed on the inside.

965
00:57:44,500 --> 00:57:49,600
And so, you know, even though on a modern GPU, you could think of a

966
00:57:49,600 --> 00:57:51,400
lot of things like the pointer to the texture.

967
00:57:51,400 --> 00:57:56,600
As actually being something that's actually dynamic in the Shader that

968
00:57:56,600 --> 00:58:01,700
is not true because of the limitations of some of the like on of the

969
00:58:01,700 --> 00:58:02,400
integrated graphics.

970
00:58:02,500 --> 00:58:05,600
Parts from Intel, make it such can't just do it that way.

971
00:58:05,900 --> 00:58:10,300
But someday, you know, we will be out of that world.

972
00:58:10,300 --> 00:58:14,600
I hope that that day just isn't today.

973
00:58:15,700 --> 00:58:18,300
So what I would encourage us to look at here.

974
00:58:18,300 --> 00:58:20,000
Anyway, is just the concept that?

975
00:58:20,000 --> 00:58:24,100
Well, what we might want to do instead is say something like, you

976
00:58:24,100 --> 00:58:25,400
know, bitmap array.

977
00:58:27,800 --> 00:58:30,300
And vertex array.

978
00:58:32,900 --> 00:58:36,000
Where we know that we would just be taking these vertices say four at

979
00:58:36,000 --> 00:58:41,300
a time to create the quads, but our bitmap pointers would actually be,

980
00:58:41,400 --> 00:58:45,200
you know, sort of stored in a separate referencing array.

981
00:58:46,200 --> 00:58:49,800
And the reason that I say that it's just because, you know, as we move

982
00:58:49,800 --> 00:58:52,600
forward with trying to make our Hardware path, may be a little bit

983
00:58:52,600 --> 00:58:53,100
better.

984
00:58:54,600 --> 00:58:59,800
You can imagine us wanting the vertices to be all in one.

985
00:58:59,800 --> 00:59:04,600
Nice packed area that can just get sent to the graphics card as

986
00:59:04,600 --> 00:59:06,500
opposed to, you know,

987
00:59:09,400 --> 00:59:12,900
as opposed to having to segregate them first out of the bitmap array,

988
00:59:13,300 --> 00:59:16,100
that's out of a packed array that has both bitmaps and vertices in.

989
00:59:16,100 --> 00:59:17,200
It is all.

990
00:59:17,900 --> 00:59:22,100
So I'm thinking that we probably want something more like this, so

991
00:59:22,100 --> 00:59:24,900
rather than having individual of texture quads, which is the more

992
00:59:24,900 --> 00:59:27,400
logical like way to think about it.

993
00:59:28,000 --> 00:59:29,900
We may want to have them these two separate arrays.

994
00:59:29,900 --> 00:59:32,500
So kind of like we do in simply land, where you have a structure of

995
00:59:32,500 --> 00:59:34,100
arrays, rather than array of structures.

996
00:59:34,700 --> 00:59:36,300
We're very much going that way.

997
00:59:36,300 --> 00:59:38,800
I think with this, we will want to go that way where we can sort of

998
00:59:38,800 --> 00:59:39,000
start.

999
00:59:39,200 --> 00:59:42,400
Segregate stuff out things in bulk that can be handed to the graphics

1000
00:59:42,400 --> 00:59:43,900
card as a chunk.

1001
00:59:44,400 --> 00:59:47,700
Like in this case, where we have this vertex array, I think that's

1002
00:59:47,700 --> 00:59:49,500
more what we want to do, right?

1003
00:59:51,400 --> 00:59:54,900
Now, things get even more complicated than that.

1004
00:59:54,900 --> 00:59:59,600
Potentially because we may also in this case want to do,

1005
01:00:00,000 --> 01:00:06,200
Where we have that memory provided the or aligned, or specific to how

1006
01:00:06,200 --> 01:00:07,600
the graphics card is operating.

1007
01:00:07,800 --> 01:00:11,700
We may want that textured vertex, array, to be a chunk of memory.

1008
01:00:11,700 --> 01:00:16,400
That the graphics card gives us rather than a chunk of memory.

1009
01:00:16,400 --> 01:00:19,000
We hand to the graphics card, right?

1010
01:00:20,600 --> 01:00:24,800
And the reason for that is again, we kind of went over this a long

1011
01:00:24,800 --> 01:00:27,300
time ago and handmade hero but I'll just specify it again.

1012
01:00:28,700 --> 01:00:31,300
the reason for that is, if you think about how these things are

1013
01:00:31,300 --> 01:00:36,400
working on a PC, where the memory is disaggregated, so we have GPU

1014
01:00:36,400 --> 01:00:36,900
memory

1015
01:00:40,700 --> 01:00:41,800
And CPU memory.

1016
01:00:46,200 --> 01:00:50,400
Remember that these two things are not the same, they are in different

1017
01:00:50,400 --> 01:00:52,600
places on the motherboard, right?

1018
01:00:53,000 --> 01:00:56,900
And furthermore, the CPU also has cash, right?

1019
01:00:57,700 --> 01:00:59,000
Which is not the same.

1020
01:00:59,500 --> 01:01:01,600
So there's a memory hierarchy here.

1021
01:01:02,000 --> 01:01:06,400
And this is the slowest of them all from the CPUs perspective because

1022
01:01:06,400 --> 01:01:10,600
in between the two is the PCI bus and anything that we want to do, has

1023
01:01:10,600 --> 01:01:12,300
to go through the PCI bus.

1024
01:01:12,600 --> 01:01:15,100
Now, maybe on some super fancy.

1025
01:01:15,700 --> 01:01:20,000
Empty situation, it can go right from the cash to the PCI bus in other

1026
01:01:20,000 --> 01:01:22,800
situations that might have to write through the main memory to the PCI

1027
01:01:22,800 --> 01:01:24,400
bus who knows, right.

1028
01:01:25,200 --> 01:01:27,800
None of that is really important to us at this point.

1029
01:01:27,800 --> 01:01:31,100
It's just important to recognize the fact that there is a big old

1030
01:01:31,100 --> 01:01:35,900
special bus in between the CPU and the graphics card memory, no matter

1031
01:01:35,900 --> 01:01:36,600
what we do.

1032
01:01:37,400 --> 01:01:40,300
And so you have to account for this, right?

1033
01:01:41,100 --> 01:01:45,000
What that means is typically we may end because of the way that these

1034
01:01:45,000 --> 01:01:45,400
two

1035
01:01:45,600 --> 01:01:47,100
Are operating in parallel, right?

1036
01:01:47,100 --> 01:01:49,700
These are two different ships, operating, and completely different

1037
01:01:49,700 --> 01:01:51,300
clocks that completely different times.

1038
01:01:52,400 --> 01:01:58,500
What we often need to do is build up in CPU memory, a buffer of stuff.

1039
01:02:00,800 --> 01:02:06,600
And then later the GPU will kind of come across the PCI bus, get this

1040
01:02:06,600 --> 01:02:09,300
stuff and it will get transferred back, right.

1041
01:02:09,500 --> 01:02:14,300
So it will sort of fetch that memory over to itself, where it can

1042
01:02:14,400 --> 01:02:15,500
actually use it for drawing.

1043
01:02:16,500 --> 01:02:20,600
What that means is this may have to be placed in special memory.

1044
01:02:21,600 --> 01:02:26,800
Write a special region of CPU memory, and that region has to be a

1045
01:02:26,800 --> 01:02:31,000
region that set up to be mapped to the GPU, right?

1046
01:02:31,000 --> 01:02:33,300
The GPU depending on the architecture.

1047
01:02:33,300 --> 01:02:36,700
Cannot necessarily just grab any part of CPU memory.

1048
01:02:37,000 --> 01:02:41,900
It may have to grab a part that specifically set up for its transfer.

1049
01:02:42,100 --> 01:02:43,000
Why is this?

1050
01:02:43,100 --> 01:02:45,800
Well, you have to remember that virtual memory exists.

1051
01:02:52,200 --> 01:02:53,900
On the PC, right?

1052
01:02:54,000 --> 01:02:58,900
Everything that we do in our CPU on the PC at our level which is app

1053
01:02:58,900 --> 01:02:59,200
level.

1054
01:02:59,200 --> 01:02:59,800
It's above the

1055
01:03:00,000 --> 01:03:04,300
All right, everything that we do doesn't deal with actual physical

1056
01:03:04,300 --> 01:03:05,000
addresses.

1057
01:03:05,100 --> 01:03:08,200
The address is that we deal with our virtual addresses which are

1058
01:03:08,200 --> 01:03:11,700
translated by the CPUs virtual address table into actual physical

1059
01:03:11,700 --> 01:03:14,700
addresses of Hardware in the machine.

1060
01:03:15,200 --> 01:03:18,400
So, every time we give an address and say, hey here's a place in

1061
01:03:18,400 --> 01:03:19,900
memory, I want you to read or write from.

1062
01:03:20,000 --> 01:03:22,500
It's actually going through a translation table, to find out what the

1063
01:03:22,500 --> 01:03:25,900
actual address is of actual physical memory, that it can send out to

1064
01:03:25,900 --> 01:03:28,700
the memory bus to actually get that or hit the cash to get that out of

1065
01:03:28,700 --> 01:03:29,000
the cache.

1066
01:03:29,000 --> 01:03:29,800
If it's, if it's hot.

1067
01:03:30,000 --> 01:03:30,800
Not right.

1068
01:03:32,800 --> 01:03:38,000
So at some point right there is a physical address and that physical

1069
01:03:38,000 --> 01:03:40,900
address is what's actually used when you actually go out the bus to

1070
01:03:40,900 --> 01:03:41,900
memory to get it.

1071
01:03:42,400 --> 01:03:46,100
But in terms of what we're talking about inside the CPU at our app

1072
01:03:46,100 --> 01:03:49,300
level, all of the registers are actually containing virtual addresses.

1073
01:03:50,200 --> 01:03:54,700
Now, why this is important, and why bring it up now is because the GPU

1074
01:03:55,000 --> 01:03:59,900
when it fetches things across the PCI bus, it is not made aware of the

1075
01:03:59,900 --> 01:04:01,600
CPUs virtual address.

1076
01:04:01,800 --> 01:04:02,200
Table.

1077
01:04:02,200 --> 01:04:02,800
Why?

1078
01:04:03,000 --> 01:04:06,700
Because if it was, it would have to have this whole separate scheme of

1079
01:04:06,700 --> 01:04:12,700
syncing, all of the virtual address tables across to the GPU, right?

1080
01:04:12,800 --> 01:04:16,200
Which is a complete waste of time, most of the time because most of

1081
01:04:16,200 --> 01:04:19,900
the memory that the CPU is using in Virtual addressing isn't memory.

1082
01:04:19,900 --> 01:04:21,500
The GPU ever needs to access.

1083
01:04:21,700 --> 01:04:24,500
So you'd be spending a ton of time sinking virtual address tables

1084
01:04:24,500 --> 01:04:27,300
across to the GPU and you have to synchronize that access.

1085
01:04:27,300 --> 01:04:29,900
So you knew that no one was ever accessing the wrong thing because

1086
01:04:29,900 --> 01:04:31,600
someone didn't get an update or whatever, right?

1087
01:04:31,700 --> 01:04:33,600
Might it be this huge mess?

1088
01:04:35,000 --> 01:04:40,500
So what happens is the GPU needs to know physical addresses, usually

1089
01:04:41,100 --> 01:04:45,400
or at least not necessarily physical addresses, but at least like

1090
01:04:45,400 --> 01:04:48,000
consistent addresses, right?

1091
01:04:48,500 --> 01:04:53,600
When you give the GPU something to do that involves main memory, it

1092
01:04:53,600 --> 01:05:00,000
has to have a reliable way of accessing that memory and not having to

1093
01:05:00,000 --> 01:05:04,200
worry about the CPU changing what that memory means out from under it.

1094
01:05:04,300 --> 01:05:04,600
Or

1095
01:05:04,800 --> 01:05:06,400
Changing where that memory is located.

1096
01:05:06,900 --> 01:05:10,900
So, when we talk to the GPU, we can't just send down a virtual address

1097
01:05:10,900 --> 01:05:14,400
from our process space because we don't even know if that memory is

1098
01:05:14,400 --> 01:05:14,900
resident.

1099
01:05:14,900 --> 01:05:17,600
Write that for all we know that memory could have gotten swapped out

1100
01:05:17,600 --> 01:05:20,000
to disk or something, like the operation could do whatever it wants.

1101
01:05:20,100 --> 01:05:21,000
We have no idea.

1102
01:05:23,700 --> 01:05:24,100
So,

1103
01:05:25,300 --> 01:05:29,000
As a result in certain circumstances depending on the architecture

1104
01:05:29,000 --> 01:05:31,000
depending on the driver blah blah blah.

1105
01:05:31,800 --> 01:05:35,600
What we may want to do is use memory for reading our vertices that is

1106
01:05:35,600 --> 01:05:41,700
specifically set up to facilitate GPU transfers without a copy and

1107
01:05:41,700 --> 01:05:44,800
what that means is it would have to be put in memory that is locked.

1108
01:05:48,000 --> 01:05:50,800
It has to be put in memory, which is locked to a known physical

1109
01:05:50,800 --> 01:05:55,100
address and which the CPU and operating system will not move until the

1110
01:05:55,100 --> 01:05:57,200
GPU can use it, right?

1111
01:05:58,000 --> 01:05:59,900
And so, there's facilities for doing this.

1112
01:06:00,000 --> 01:06:01,900
And we'll take a look at those potentially later.

1113
01:06:03,200 --> 01:06:04,400
It's not always a good idea to do.

1114
01:06:04,400 --> 01:06:06,300
It depends on the circumstances like I said.

1115
01:06:06,500 --> 01:06:09,300
But in order to allow our renderer to take advantage of that in the

1116
01:06:09,300 --> 01:06:13,900
future, if it needs to, we may want to be aware of the fact that the

1117
01:06:13,900 --> 01:06:17,500
platform layer the operating system layer may be the thing that gives

1118
01:06:17,500 --> 01:06:22,300
us the memory specifically, for doing things that do GPU transfers,

1119
01:06:23,300 --> 01:06:26,700
this is less true for textures, and the reason that it's less true for

1120
01:06:26,700 --> 01:06:28,700
textures is because textures arse whistled.

1121
01:06:33,400 --> 01:06:36,100
So, depending on whether there's hardware stores along or not and all

1122
01:06:36,100 --> 01:06:39,400
these other things, whether or not you actually care about your

1123
01:06:39,400 --> 01:06:43,800
textures, being put into memory, that's locked, is a separate issue,

1124
01:06:43,800 --> 01:06:45,100
and it's less likely to be true.

1125
01:06:45,100 --> 01:06:46,400
It's sometimes true, it depends.

1126
01:06:46,900 --> 01:06:50,700
This is the nasty world of multi-gpu programming, but in terms of

1127
01:06:50,700 --> 01:06:52,600
vertices vertices are not swiveled.

1128
01:06:52,600 --> 01:06:57,400
When they go down the pipe, vertices go down just as they are.

1129
01:06:58,200 --> 01:07:02,200
And so it often times can be useful for you to put vertices into it.

1130
01:07:02,300 --> 01:07:06,000
For that is in a place where the graphics card can access it, and it

1131
01:07:06,000 --> 01:07:10,200
does not have to be first copied into a locked down, memory range

1132
01:07:10,200 --> 01:07:11,300
before that happens.

1133
01:07:11,400 --> 01:07:15,000
So, again a lot of, like, hand-waving there because we really just

1134
01:07:15,000 --> 01:07:19,400
don't know on the PC, usually, what have, what of a suite of things?

1135
01:07:19,400 --> 01:07:21,900
Might be happening under the hood, because it depends on the card,

1136
01:07:21,900 --> 01:07:23,700
depends on the driver, depends on a lot of things.

1137
01:07:24,800 --> 01:07:26,300
So we don't know.

1138
01:07:26,500 --> 01:07:30,100
But what we do know, is that it's possible and when something is

1139
01:07:30,100 --> 01:07:32,200
possible, and we know we might want to take advantage

1140
01:07:32,300 --> 01:07:33,100
Advantage of it.

1141
01:07:33,100 --> 01:07:35,400
That means that we need to architect our.

1142
01:07:35,400 --> 01:07:40,600
So the way that we have are things set up at the higher levels of the

1143
01:07:40,600 --> 01:07:44,200
code, in order to make sure we don't preclude the possibility that it

1144
01:07:44,200 --> 01:07:44,700
happens.

1145
01:07:45,000 --> 01:07:48,700
And so that's why I say this is a something we want to think about

1146
01:07:48,800 --> 01:07:52,100
saying, hey, the vertex array that we're dealing with here, we

1147
01:07:52,100 --> 01:07:53,700
probably want to have it.

1148
01:07:53,700 --> 01:07:58,500
So that that vertex array can be stored in GPU locked memory in.

1149
01:07:58,500 --> 01:08:02,100
Well, in CPU memory, that's been locked for GPU access in case that

1150
01:08:02,300 --> 01:08:04,600
It's out to be an important transfer criteria.

1151
01:08:05,600 --> 01:08:06,900
Will we be kidding?

1152
01:08:06,900 --> 01:08:08,600
The case where we actually care about this?

1153
01:08:08,600 --> 01:08:12,900
Probably not, but again, just trying to show some of the concerns here

1154
01:08:12,900 --> 01:08:13,800
that you might have.

1155
01:08:13,900 --> 01:08:16,600
We probably will not be pushing enough vertices for that to matter.

1156
01:08:16,600 --> 01:08:21,000
But, you know, if you were talking about a heavy vertex, throughput

1157
01:08:21,300 --> 01:08:22,200
situation,

1158
01:08:23,600 --> 01:08:24,600
It's something to be aware of.

1159
01:08:26,000 --> 01:08:28,600
All right, so when we do render entry texture crowds with quads, what

1160
01:08:28,600 --> 01:08:30,899
I'm thinking of here, it's like, okay, we've got a little bit map.

1161
01:08:30,899 --> 01:08:34,399
We've got a bit of a a we've got a textured vertex and that's going to

1162
01:08:34,399 --> 01:08:35,399
point to this vertex array.

1163
01:08:35,399 --> 01:08:38,300
Here we may want this to actually be more of an index.

1164
01:08:38,600 --> 01:08:42,899
So we may want this to be like vertex array offset.

1165
01:08:46,399 --> 01:08:49,700
And then that textured vertex array would be something that was more

1166
01:08:49,800 --> 01:08:53,300
like stored on the render group or in the render commands.

1167
01:08:53,500 --> 01:08:55,600
So like in the game render commands for

1168
01:08:55,700 --> 01:08:56,000
Apple.

1169
01:09:13,500 --> 01:09:14,000
Oh, they are.

1170
01:09:15,100 --> 01:09:19,500
So in the game Rider commands, when we've got the situation here and

1171
01:09:19,500 --> 01:09:22,899
we've got like the push buffer and that sort of stuff, you know, I'm

1172
01:09:22,899 --> 01:09:24,300
thinking of something more like this.

1173
01:09:24,500 --> 01:09:26,100
So we have a Vertex array here.

1174
01:09:26,100 --> 01:09:30,700
That's the, that's what we would be writing into and that vertex array

1175
01:09:30,700 --> 01:09:33,399
is filled with these textured vertices, right?

1176
01:09:35,500 --> 01:09:36,100
Like so.

1177
01:09:41,200 --> 01:09:44,800
And so I've got this textured vertex array, and I can write into it

1178
01:09:44,800 --> 01:09:49,399
and now it would be something that is provided to us from the system.

1179
01:09:49,899 --> 01:09:51,700
And we're just sort of writing into it.

1180
01:09:51,899 --> 01:09:55,300
And so then when we have something come down the pipe like this, where

1181
01:09:55,300 --> 01:09:58,600
we say, here's the textured quads that we're trying to write here is

1182
01:09:58,600 --> 01:10:03,500
the offset into that vertex array that I expect you to use to start

1183
01:10:03,500 --> 01:10:03,900
with.

1184
01:10:04,300 --> 01:10:09,400
Now we know we can just have one big bulk buffer of vertices and then

1185
01:10:09,400 --> 01:10:10,800
we're just sort of talking about

1186
01:10:11,200 --> 01:10:15,400
Hey, I need you to use these vertices out of that vertex array, right?

1187
01:10:16,000 --> 01:10:18,800
And again, that's just a step towards making things a little bit more

1188
01:10:18,800 --> 01:10:22,200
efficient than they, otherwise would be.

1189
01:10:22,500 --> 01:10:23,800
And so, you know,

1190
01:10:31,300 --> 01:10:36,100
So then I'll be really need here is up to to round it out would be how

1191
01:10:36,100 --> 01:10:41,500
many of them there are and so we just have like a ray of bitmaps

1192
01:10:41,900 --> 01:10:45,500
pointers which say which textures to use and then we've got how many

1193
01:10:45,500 --> 01:10:49,700
quads were going to draw and the offset into the global sort of.

1194
01:10:49,700 --> 01:10:52,000
It's not really Global but it's you know, it's Global to this render

1195
01:10:52,000 --> 01:10:55,700
pass array of vertices that we're just writing into with all of the

1196
01:10:55,700 --> 01:10:57,400
vertices that we ever need.

1197
01:10:57,900 --> 01:11:00,700
So then when we're done with a frame, we can just turn around and say,

1198
01:11:00,700 --> 01:11:00,800
hey,

1199
01:11:01,000 --> 01:11:01,700
Grab this card.

1200
01:11:01,900 --> 01:11:05,200
Take this whole vertex array, just the whole thing.

1201
01:11:05,200 --> 01:11:07,100
It's all in there, right?

1202
01:11:08,100 --> 01:11:12,700
And then, you know, we can piece it out and say, draw these with this

1203
01:11:12,700 --> 01:11:15,000
texture of these, with this texture of these, are this texture and so

1204
01:11:15,000 --> 01:11:16,100
on, right?

1205
01:11:16,900 --> 01:11:18,600
And that's really all we're talking about.

1206
01:11:18,700 --> 01:11:23,100
So that's that's sort of, I guess what I'm getting at for how we could

1207
01:11:23,100 --> 01:11:25,300
start to sort of transition these things over.

1208
01:11:27,000 --> 01:11:29,800
All right, so let's say we're on the opengl side.

1209
01:11:29,800 --> 01:11:32,700
How would we Implement something like this just as a first pass just

1210
01:11:32,700 --> 01:11:33,400
to get it working.

1211
01:11:34,500 --> 01:11:39,000
So let's say we're here, we see one of these textured quads doodads,

1212
01:11:41,400 --> 01:11:41,900
right?

1213
01:11:43,000 --> 01:11:47,500
Well we know how to draw one of these guys, right?

1214
01:11:50,700 --> 01:11:52,100
So it's going to start with that code.

1215
01:11:56,200 --> 01:11:59,100
And what I want to do here is just encourage you to kind of look at

1216
01:11:59,100 --> 01:11:59,800
how much work.

1217
01:12:00,100 --> 01:12:04,200
So this is to draw one Sprite and look at how much work is involved

1218
01:12:04,200 --> 01:12:04,500
here.

1219
01:12:04,600 --> 01:12:07,300
We're actually setting up like, what program to use.

1220
01:12:07,500 --> 01:12:11,400
We're setting up these matrices, right, we're setting up like all the

1221
01:12:11,400 --> 01:12:14,600
stuff that needs to happen here, right?

1222
01:12:15,600 --> 01:12:20,500
And a lot of this stuff is just busy work, it doesn't need to be done

1223
01:12:20,500 --> 01:12:24,000
every time certainly, we don't need to change the program every time

1224
01:12:24,200 --> 01:12:27,300
if we're using this program for all the quads, you know, that's

1225
01:12:27,300 --> 01:12:29,600
something we can do once and then every

1226
01:12:30,000 --> 01:12:33,600
Odd can can use that, you know, going forwards, right?

1227
01:12:33,700 --> 01:12:37,700
So we can set the program once and then we can, you know, for every

1228
01:12:37,700 --> 01:12:41,100
quad it's just sending down a new Quad but the same program so already

1229
01:12:41,100 --> 01:12:42,500
we can save that, right?

1230
01:12:43,900 --> 01:12:48,900
The same thing is true of our of our transfer Matrix here, right?

1231
01:12:49,300 --> 01:12:52,800
Probably we could just save this and the begin all of that stuff.

1232
01:12:52,800 --> 01:12:53,900
Doesn't have to happen.

1233
01:12:54,500 --> 01:12:57,500
/ /, trying to lie there, right?

1234
01:12:57,600 --> 01:12:59,200
So all that stuff comes out.

1235
01:13:02,400 --> 01:13:05,000
Let's go ahead and make our for Loop here for each triangle.

1236
01:13:09,600 --> 01:13:12,300
And so then inside our for I Loop, what we're doing really here is

1237
01:13:12,300 --> 01:13:16,400
saying, hey, we've got a quad index and we're going to go through our

1238
01:13:16,400 --> 01:13:17,900
quota quad count here.

1239
01:13:18,400 --> 01:13:19,900
This is, I gotta change the surrender.

1240
01:13:19,900 --> 01:13:21,400
Entry textured quads,

1241
01:13:30,200 --> 01:13:31,200
And off we go.

1242
01:13:32,100 --> 01:13:34,100
So let's take a look here.

1243
01:13:37,100 --> 01:13:39,600
We would just say the entry quad count.

1244
01:13:41,300 --> 01:13:46,000
Like so, and we now know we have basically a few pointers.

1245
01:13:46,600 --> 01:13:53,000
We've got our vertex pointer which will not s where we go here.

1246
01:13:53,900 --> 01:13:57,100
So we've got this vertex array inside our game commands,

1247
01:14:01,200 --> 01:14:05,900
And we know the offset of that because we know inside the entry, we

1248
01:14:05,900 --> 01:14:08,300
have the vertex array offset.

1249
01:14:12,100 --> 01:14:12,900
Where'd that guy go?

1250
01:14:17,000 --> 01:14:17,500
Right here.

1251
01:14:19,300 --> 01:14:19,500
Right?

1252
01:14:19,500 --> 01:14:22,700
So we know the vertex V offset there were talking about so we know

1253
01:14:22,700 --> 01:14:27,500
where we start in the vertex array, so this is our, our textured

1254
01:14:28,600 --> 01:14:29,300
Vertex.

1255
01:14:31,900 --> 01:14:35,900
So, that's the vertex we're looking at at the base.

1256
01:14:36,700 --> 01:14:39,900
We then have the count, which we know is how many of the quads were

1257
01:14:39,900 --> 01:14:40,500
going to do?

1258
01:14:40,900 --> 01:14:44,000
And we have a pointer to the bitmap that we can sort of advanced as

1259
01:14:44,000 --> 01:14:44,300
well.

1260
01:14:45,000 --> 01:14:46,800
So we can say like, here's our bitmap

1261
01:14:49,800 --> 01:14:52,600
And that's just going to be equal to this entries bitmap array as we

1262
01:14:52,600 --> 01:14:53,700
start with, right?

1263
01:14:56,000 --> 01:14:59,900
Like so, all right, so we know that.

1264
01:15:00,000 --> 01:15:01,000
That stuff right?

1265
01:15:01,000 --> 01:15:02,500
That's all pretty basic.

1266
01:15:03,000 --> 01:15:05,200
So now as we go here, what are we looking at?

1267
01:15:05,300 --> 01:15:05,700
Well,

1268
01:15:10,800 --> 01:15:12,400
Got a load of bitmap, I suppose.

1269
01:15:12,400 --> 01:15:17,800
I should probably do it this way, something like this before.

1270
01:15:20,500 --> 01:15:26,000
Every that and so I can say OK, the bitmap is the bitmap at this point

1271
01:15:26,000 --> 01:15:29,600
and will advance it one because we know for every quad redraw, we need

1272
01:15:29,600 --> 01:15:35,100
to load a new bitmap out and then the textured vertex, we know is the

1273
01:15:35,100 --> 01:15:36,500
vert at, right?

1274
01:15:36,500 --> 01:15:39,400
But we know that we're going to have four of these, right?

1275
01:15:39,400 --> 01:15:46,600
So we know that we're going to have like vert 01 route to invert 3.

1276
01:15:48,500 --> 01:15:49,100
EXO.

1277
01:15:50,800 --> 01:15:52,600
So we can just grab those out as well.

1278
01:15:54,200 --> 01:15:56,400
And now, we have everything we need to draw with.

1279
01:15:57,400 --> 01:15:57,900
All right.

1280
01:15:58,100 --> 01:16:00,500
So now we don't have any of this stuff anymore.

1281
01:16:00,800 --> 01:16:01,300
Right.

1282
01:16:01,400 --> 01:16:03,200
None of these things are going to be here.

1283
01:16:05,400 --> 01:16:06,900
We do have to bind our texture.

1284
01:16:06,900 --> 01:16:09,400
Obviously, I don't know that we need to bother with this.

1285
01:16:09,400 --> 01:16:13,500
If I don't think we do because our texture coordinates are packed in

1286
01:16:13,500 --> 01:16:13,800
there.

1287
01:16:14,100 --> 01:16:15,800
So we don't have to test this anymore.

1288
01:16:16,600 --> 01:16:20,100
And so we really just need to do the buying texture.

1289
01:16:20,400 --> 01:16:24,300
Now, I suppose this is a case where until we use something more

1290
01:16:24,300 --> 01:16:27,000
advanced than the fixed like pipeline, I'm not allowed to

1291
01:16:27,200 --> 01:16:29,900
To bind a texture inside of begin end.

1292
01:16:30,300 --> 01:16:35,100
So for now, I will have to turn that off and put it on the inside but

1293
01:16:35,100 --> 01:16:38,800
eventually, we will want that to be more efficient as well probably.

1294
01:16:41,700 --> 01:16:47,400
So I need to Again, by in the texture here, that we're that's coming

1295
01:16:47,400 --> 01:16:49,200
in from the bitmap.

1296
01:16:52,200 --> 01:16:54,300
So we'll do that with that.

1297
01:16:55,100 --> 01:16:59,400
And then I've got these are all for creating the UV coordinates, which

1298
01:16:59,400 --> 01:17:01,800
we're assuming we will do on the other side because they're already

1299
01:17:01,800 --> 01:17:04,200
into the packed into the vertex, right?

1300
01:17:05,800 --> 01:17:08,300
So what we need is

1301
01:17:12,400 --> 01:17:17,600
In terms of our values coming in, we do have a color and we need to

1302
01:17:17,600 --> 01:17:20,000
specify our color to opengl.

1303
01:17:20,000 --> 01:17:25,700
That color is a pact 32-bit value so we want to be able to specify

1304
01:17:25,700 --> 01:17:28,600
that color as a as like a GL color for you.

1305
01:17:28,600 --> 01:17:29,500
Be basically

1306
01:17:38,700 --> 01:17:42,300
And you can see here, the one that we actually want, which is whoops,

1307
01:17:42,300 --> 01:17:43,200
that's three.

1308
01:17:43,900 --> 01:17:45,500
Which is this one GL color for you.

1309
01:17:45,500 --> 01:17:48,100
Be now we have to unpack it.

1310
01:17:48,100 --> 01:17:52,200
So again, this is this is going to get more streamlined.

1311
01:17:52,200 --> 01:17:54,700
When we switch away from the fixed function pipeline because that

1312
01:17:54,700 --> 01:17:57,700
unpacking can happen automatically in the vertex Shader actually.

1313
01:17:58,600 --> 01:17:59,800
So, this is actually going to be

1314
01:18:00,000 --> 01:18:03,300
A lot less efficient right now than it will be when we're actually

1315
01:18:03,300 --> 01:18:04,100
reading them directly.

1316
01:18:04,100 --> 01:18:08,400
But, you know, I want to do it one step at a time, both for ease of

1317
01:18:08,400 --> 01:18:11,500
debugging and so that you can kind of see the steps as we go through

1318
01:18:11,500 --> 01:18:11,800
them.

1319
01:18:13,000 --> 01:18:16,900
All right, so what we want to do here is we want to do a GL and we

1320
01:18:16,900 --> 01:18:20,600
probably want to do this as a separate as as like a macro basically

1321
01:18:21,000 --> 01:18:23,700
which is like color you be macro or something like this where we can

1322
01:18:23,700 --> 01:18:29,300
just specify in here this color

1323
01:18:31,300 --> 01:18:33,100
And it will unpack it, right?

1324
01:18:33,400 --> 01:18:37,900
So what we want is something like this, where we specify, you know, a

1325
01:18:37,900 --> 01:18:38,700
color value,

1326
01:18:40,100 --> 01:18:44,400
And then that color valued translates into a Geo color for you be

1327
01:18:45,200 --> 01:18:46,700
where we're actually going to do.

1328
01:18:49,600 --> 01:18:50,400
This sort of thing.

1329
01:18:57,500 --> 01:19:01,400
So we're going to take that, you know, that packed about version and

1330
01:19:01,400 --> 01:19:03,400
this wants rgba.

1331
01:19:03,700 --> 01:19:08,200
So the r value in our case, as far as the packed colors are concerned,

1332
01:19:08,300 --> 01:19:10,000
we have to pick some kind of a format

1333
01:19:21,600 --> 01:19:27,500
So I'm just going to specify that this is rgba packed so it read a BGR

1334
01:19:27,600 --> 01:19:29,200
in a register, for example.

1335
01:19:29,900 --> 01:19:37,100
So that means that the bottom is the red one up is the green and then

1336
01:19:37,100 --> 01:19:42,400
we get to the blue and finally the alpha is packed at the top, right?

1337
01:19:44,500 --> 01:19:47,500
So that's what I want to specify their as my color.

1338
01:19:47,500 --> 01:19:48,700
So we're going to draw in specified.

1339
01:19:48,700 --> 01:19:54,000
That is color and so we know that we would specify a color per vertex.

1340
01:19:59,600 --> 01:20:00,100
Right.

1341
01:20:02,500 --> 01:20:07,800
We also specify UV and so we know how to specify that as well, which

1342
01:20:07,800 --> 01:20:08,500
is like this.

1343
01:20:10,900 --> 01:20:14,300
So rgl Tech Support to F can be a 2fv in this case because it's just

1344
01:20:14,300 --> 01:20:15,500
the vertex u v.

1345
01:20:17,100 --> 01:20:19,300
And then same with the vertex 4fv.

1346
01:20:19,300 --> 01:20:23,100
We know the position we actually have as well.

1347
01:20:25,300 --> 01:20:26,000
Right?

1348
01:20:26,700 --> 01:20:29,100
So we know that's what we're putting out.

1349
01:20:30,400 --> 01:20:30,900
Right.

1350
01:20:31,700 --> 01:20:36,200
So now we just need to do this in a way that's actually going to draw

1351
01:20:36,200 --> 01:20:38,300
it as two triangles.

1352
01:20:39,500 --> 01:20:43,100
Now, what would be nice is if we could just do GL quads, which

1353
01:20:43,100 --> 01:20:44,200
unfortunately,

1354
01:20:45,800 --> 01:20:48,900
I do I think in the fixed function pipeline we can probably still just

1355
01:20:48,900 --> 01:20:50,400
do eventually.

1356
01:20:50,400 --> 01:20:51,300
We'll have to do you like to see.

1357
01:20:51,300 --> 01:20:52,800
We'll do a little well to do a little trickery.

1358
01:20:52,800 --> 01:20:55,400
If we want to get the modern pipeline to do it because there's no such

1359
01:20:55,400 --> 01:20:56,100
thing as quads.

1360
01:20:56,100 --> 01:20:59,600
You have to kind of set up a try strip with the restart its kind of

1361
01:21:00,100 --> 01:21:01,200
But it's doable.

1362
01:21:03,500 --> 01:21:05,600
So, what I probably can do is just do it like this.

1363
01:21:17,200 --> 01:21:20,500
If this card allows me to specify quads, which I don't remember if it

1364
01:21:20,500 --> 01:21:21,400
does, or it doesn't.

1365
01:21:21,400 --> 01:21:26,100
So that's going to be anyone's guess really, whether that'll work.

1366
01:21:26,800 --> 01:21:28,200
It's a really good question.

1367
01:21:28,800 --> 01:21:30,400
Probably, I should try it first.

1368
01:21:30,400 --> 01:21:33,600
Somewhere else to see whether it works before we go diving in there.

1369
01:21:35,400 --> 01:21:37,600
So yeah, that's

1370
01:21:41,200 --> 01:21:42,900
That's something I'll go do right now.

1371
01:21:50,000 --> 01:21:52,900
So, these all have to specify the float part of them because it

1372
01:21:52,900 --> 01:21:55,700
doesn't understand how to take the structure and produce a float from

1373
01:21:55,700 --> 01:21:56,000
it.

1374
01:21:58,000 --> 01:21:58,600
There we go.

1375
01:22:01,900 --> 01:22:03,900
And so, that's path isn't getting called right now.

1376
01:22:03,900 --> 01:22:05,400
We're just calling this old path still.

1377
01:22:05,900 --> 01:22:09,700
So it's neither here nor there, but one thing at a time, so what I'll

1378
01:22:09,700 --> 01:22:12,900
do is I'll just test to see whether quads work or not.

1379
01:22:12,900 --> 01:22:17,200
I can go up here into where we were doing this before, and say, let's

1380
01:22:17,200 --> 01:22:20,000
if we change this to quads, does that work temporarily?

1381
01:22:20,000 --> 01:22:21,800
Because we're going to want to draw as quads later.

1382
01:22:21,800 --> 01:22:24,400
So we can specify less things to the graphics card.

1383
01:22:26,500 --> 01:22:30,500
So here's that lower triangle and then we just need the upper triangle

1384
01:22:30,500 --> 01:22:30,800
that

1385
01:22:31,000 --> 01:22:33,900
Max Max version is there.

1386
01:22:33,900 --> 01:22:39,300
So we need the min max version, which is where

1387
01:22:45,100 --> 01:22:45,400
Yeah.

1388
01:22:52,600 --> 01:22:54,700
Yeah, so that's fine.

1389
01:22:55,800 --> 01:23:00,000
So we can use quads for now and then we'll show how to kind of do

1390
01:23:00,000 --> 01:23:00,300
those.

1391
01:23:00,300 --> 01:23:03,200
Because eventually we're going to have to switch away from GL.

1392
01:23:03,200 --> 01:23:06,800
Begin an individual text Cord sending down to that sort of stuff.

1393
01:23:06,900 --> 01:23:10,200
When we get to that point, I'll explain kind of what I mean by quads,

1394
01:23:10,200 --> 01:23:11,300
not being supported anymore.

1395
01:23:11,300 --> 01:23:13,700
And you actually do something different, it's a little wonky.

1396
01:23:13,700 --> 01:23:16,700
But it's, it's basically, it went, from being something where you

1397
01:23:16,700 --> 01:23:20,600
specify, how Primitives are assembled in a way that makes it

1398
01:23:20,600 --> 01:23:22,300
reasonable to specify quads to have

1399
01:23:22,700 --> 01:23:25,300
Sort of more flexibility about how perimeters are assembled.

1400
01:23:25,400 --> 01:23:28,100
But as a result, you have to construct the ability to make quads

1401
01:23:28,100 --> 01:23:30,300
yourself, kind of, if that makes sense.

1402
01:23:30,400 --> 01:23:32,500
So, you'll see that eventually

1403
01:23:34,200 --> 01:23:40,100
Alright, so here is sort of a way of outputting these textured quads

1404
01:23:40,400 --> 01:23:44,100
and you can kind of see how this works, it's very straightforward, the

1405
01:23:44,100 --> 01:23:46,900
only kind of wonky part about it and the thing that's a little bit

1406
01:23:46,900 --> 01:23:51,600
problematic is just you can see that we sort of have this problem of

1407
01:23:51,600 --> 01:23:54,500
binding, the texture every quad, right?

1408
01:23:55,500 --> 01:23:59,800
This is actually one reason why depending on the hardware you're on

1409
01:24:00,200 --> 01:24:02,200
Why people like to use things like texture?

1410
01:24:02,200 --> 01:24:06,300
Atlas has for example or other things like that those are really just

1411
01:24:06,300 --> 01:24:06,800
work around.

1412
01:24:06,800 --> 01:24:12,000
Like there's no point to a texture Atlas right other than to work

1413
01:24:12,000 --> 01:24:16,000
around basic limitations one of which being if texture binding is

1414
01:24:16,000 --> 01:24:20,100
expensive so that you, you know, because you can't put it in line with

1415
01:24:20,100 --> 01:24:21,200
your other data.

1416
01:24:22,400 --> 01:24:26,400
Another reason, if graphics cards cannot efficiently, manage non power

1417
01:24:26,400 --> 01:24:27,300
of two textures.

1418
01:24:27,500 --> 01:24:30,500
There's a lot of reasons for it, but they're all just basic

1419
01:24:30,500 --> 01:24:31,700
workarounds right there.

1420
01:24:31,700 --> 01:24:37,800
Just workarounds from the concept that you can't deal properly with

1421
01:24:37,800 --> 01:24:42,700
having just in line with things a pointer to an arbitrary rectangle

1422
01:24:42,700 --> 01:24:46,200
that you're trying to blit, which is what you would have wanted for

1423
01:24:46,200 --> 01:24:47,100
drawing us, right?

1424
01:24:47,700 --> 01:24:52,000
So anyway, we've got this situation now where this should draw quads

1425
01:24:52,200 --> 01:24:52,500
Lee.

1426
01:24:52,800 --> 01:24:55,700
Of course we just now have to feed it, some actual quads that it can

1427
01:24:55,700 --> 01:24:56,100
draw.

1428
01:24:56,600 --> 01:25:02,600
And so what we'll do at first is we'll just start by setting up a

1429
01:25:02,600 --> 01:25:05,500
circumstance where we can feed our Sprites down as these quads and see

1430
01:25:06,200 --> 01:25:07,800
how that goes, right?

1431
01:25:07,800 --> 01:25:08,900
And that's what we'll try to do.

1432
01:25:09,400 --> 01:25:11,600
So we have two problems that we need to address.

1433
01:25:12,500 --> 01:25:16,100
One is the bitmap specification array and the other is the vertex,

1434
01:25:16,100 --> 01:25:19,500
specification, Ray the vertex specification array is the one that I

1435
01:25:19,500 --> 01:25:21,400
want to come from the platform side.

1436
01:25:21,800 --> 01:25:22,000
So,

1437
01:25:22,200 --> 01:25:25,900
When the game commands themselves, get allocated.

1438
01:25:30,400 --> 01:25:32,500
Render commands, here it is.

1439
01:25:33,600 --> 01:25:39,100
So when the render commands get specified here, you can see where the

1440
01:25:39,100 --> 01:25:40,500
push buffer gets put on here.

1441
01:25:41,600 --> 01:25:44,900
In addition to these and we do render command struct that render

1442
01:25:44,900 --> 01:25:45,500
commands truck.

1443
01:25:45,500 --> 01:25:48,200
Now needs to have some additional information with it.

1444
01:25:51,500 --> 01:25:55,800
So you can see here like the put buffer width height stuff going on

1445
01:25:55,800 --> 01:26:03,400
here and so then there's the push buffer and the push buffer base data

1446
01:26:03,400 --> 01:26:04,400
at sort of situation.

1447
01:26:05,000 --> 01:26:05,700
So,

1448
01:26:07,000 --> 01:26:10,200
What we want to do is also specify this vertex array.

1449
01:26:21,500 --> 01:26:24,400
so that when we have this render command struct, it needs to specify

1450
01:26:24,400 --> 01:26:24,900
that

1451
01:26:30,200 --> 01:26:33,300
So if we come back here to where the push buffer is created, you can

1452
01:26:33,300 --> 01:26:34,300
see that happening here.

1453
01:26:35,300 --> 01:26:40,700
You know for now what we can do is just specify the vertex array as

1454
01:26:40,700 --> 01:26:41,000
well.

1455
01:26:41,200 --> 01:26:46,400
Now what we might want to do is say Max vertex count just for our own

1456
01:26:46,400 --> 01:26:47,400
checking purposes.

1457
01:26:48,000 --> 01:26:49,900
There's no other real reason for it.

1458
01:26:56,400 --> 01:26:58,400
It's just for our checking to make sure we don't go over.

1459
01:27:04,300 --> 01:27:08,200
so I don't know what our Max vertex count is, let's say our Max vertex

1460
01:27:08,200 --> 01:27:10,700
count is going to be

1461
01:27:12,700 --> 01:27:15,900
64k of vertices, why not?

1462
01:27:17,000 --> 01:27:21,600
And so when we win three to allocate this memory, we will go ahead and

1463
01:27:21,600 --> 01:27:22,300
do Max.

1464
01:27:23,300 --> 01:27:25,900
Vertex, count times size of.

1465
01:27:28,600 --> 01:27:29,600
Textured vertex.

1466
01:27:32,300 --> 01:27:33,000
and then,

1467
01:27:42,800 --> 01:27:43,500
and that's it.

1468
01:27:46,000 --> 01:27:47,400
So now we have a Vertex array.

1469
01:28:00,800 --> 01:28:03,700
And we need to actually start using that vertex array and putting

1470
01:28:03,700 --> 01:28:04,300
stuff in it.

1471
01:28:04,300 --> 01:28:07,600
Obviously Max vertex count

1472
01:28:14,400 --> 01:28:15,300
and,

1473
01:28:34,900 --> 01:28:37,000
We need to actually write the vertices in there and we need to figure

1474
01:28:37,000 --> 01:28:40,300
out how we're going to write our loaded bitmap stuff out and I don't

1475
01:28:40,300 --> 01:28:41,000
really know.

1476
01:28:43,500 --> 01:28:44,900
At this point, you're completely honest with you.

1477
01:28:44,900 --> 01:28:46,800
I'm not sure how I want to do that.

1478
01:28:51,700 --> 01:28:56,100
I mean, I kind of feel like it probably should just be part of the

1479
01:28:56,100 --> 01:28:57,200
push buffer.

1480
01:29:00,400 --> 01:29:01,100
Maybe.

1481
01:29:14,100 --> 01:29:16,500
I mean, I think that's almost certainly the right way to do it.

1482
01:29:16,900 --> 01:29:17,800
So let's do it that way.

1483
01:29:26,500 --> 01:29:28,300
It's high allergy season here folks.

1484
01:29:30,500 --> 01:29:31,600
And I'm a naughty boy.

1485
01:29:32,700 --> 01:29:35,300
All right, so let's go ahead and take a look at how this will work

1486
01:29:35,900 --> 01:29:36,300
inside.

1487
01:29:36,300 --> 01:29:40,300
The render group, what we're going to want to do is have a way of just

1488
01:29:40,300 --> 01:29:43,200
kind of like aggregating these overtime.

1489
01:29:44,200 --> 01:29:48,100
So inside the render group probably what I would do is say all right,

1490
01:29:48,100 --> 01:29:51,300
we've got this render group here, the render group is going to have a

1491
01:29:51,300 --> 01:29:57,000
thing in it called texture Vertex or

1492
01:29:58,800 --> 01:29:59,800
to called render entry.

1493
01:30:00,000 --> 01:30:02,800
certain vertex, textured quads, that that guy

1494
01:30:06,800 --> 01:30:09,800
I'm a Savage in color to called car and quads, right?

1495
01:30:10,700 --> 01:30:14,300
And what this is going to do is current quads is going to have a

1496
01:30:14,300 --> 01:30:14,900
thing.

1497
01:30:15,900 --> 01:30:17,900
It's going to have some calls associated with it.

1498
01:30:18,400 --> 01:30:22,700
And so, what I'm going to have here is like begin quads.

1499
01:30:27,700 --> 01:30:29,000
And N quads.

1500
01:30:32,000 --> 01:30:34,500
And what this is essentially going to do is it's going to like push an

1501
01:30:34,500 --> 01:30:40,500
entry onto the render group that's for the quads.

1502
01:30:43,900 --> 01:30:48,000
As they're getting pushed on and what I'd like to do is I'd like to

1503
01:30:48,000 --> 01:30:51,800
kind of have that be part of the push.

1504
01:30:54,400 --> 01:30:57,800
The sort of the push entry structure if you will.

1505
01:30:58,300 --> 01:31:02,300
So when we do a push render element, I think I'd like that to kind of

1506
01:31:02,300 --> 01:31:03,800
be in line with it.

1507
01:31:04,500 --> 01:31:07,500
And so, what I want to have happen here is like when we push a render

1508
01:31:07,500 --> 01:31:13,300
element on, I would like to make that.

1509
01:31:13,900 --> 01:31:17,900
Well, I guess let me, let me not go too far with that yet, let me just

1510
01:31:17,900 --> 01:31:21,000
see because I kind of got to work with both of these at the same time

1511
01:31:21,000 --> 01:31:22,500
here, till we remove the other kind.

1512
01:31:23,300 --> 01:31:23,700
So what I

1513
01:31:23,900 --> 01:31:27,400
Do here is when we do a push bitmap instead of calling push render

1514
01:31:27,400 --> 01:31:32,200
element, but I really want to do is take all this code that I had here

1515
01:31:32,400 --> 01:31:37,800
and I want to just do what it was going to do inside the opengl code,

1516
01:31:38,300 --> 01:31:38,700
right?

1517
01:31:39,900 --> 01:31:41,600
So remember this is what it used to do.

1518
01:31:44,400 --> 01:31:45,100
Is this stuff?

1519
01:31:49,400 --> 01:31:49,900
Right.

1520
01:31:51,200 --> 01:31:53,600
So in here, what I'd like to do

1521
01:31:58,500 --> 01:31:59,700
Is something more like this.

1522
01:32:04,600 --> 01:32:05,800
Is this still happening?

1523
01:32:25,700 --> 01:32:27,100
That is very interesting.

1524
01:32:29,800 --> 01:32:30,700
Hold on a second.

1525
01:32:40,000 --> 01:32:44,800
So in this case, if the Sprite was flat, it doesn't.

1526
01:32:44,800 --> 01:32:46,500
Oh I see we use the camera.

1527
01:32:46,500 --> 01:32:47,400
Axes only.

1528
01:32:47,400 --> 01:32:51,100
If the Sprite is not flat at the Sprite is flat, then we just use the

1529
01:32:51,100 --> 01:32:51,900
regular axes.

1530
01:32:52,100 --> 01:32:53,000
All right, that's fine.

1531
01:32:54,300 --> 01:32:54,800
Anyway.

1532
01:32:58,400 --> 01:32:59,900
so, what I want to do here is, I want

1533
01:33:00,000 --> 01:33:04,000
Just do this, right in line, so rather than storing up the information

1534
01:33:04,000 --> 01:33:07,800
necessary to do this, I want to get rid of all this stuff, right?

1535
01:33:08,700 --> 01:33:17,900
But I want to actually sort of have this, do all the sort of out sort

1536
01:33:17,900 --> 01:33:20,800
of the blowing out of the data right in line.

1537
01:33:24,800 --> 01:33:29,900
Now at this point I assuming we have a bitmap we never call push

1538
01:33:29,900 --> 01:33:32,400
bitmap on something that doesn't have a dimension.

1539
01:33:33,200 --> 01:33:34,900
So I think that's probably fine.

1540
01:33:35,200 --> 01:33:36,300
Am I right about that?

1541
01:33:39,700 --> 01:33:43,400
Yeah, so the bitmap has to be filled in so we can actually do this.

1542
01:33:43,800 --> 01:33:47,500
One thing we can do is since this can't be drawn if these aren't both

1543
01:33:47,500 --> 01:33:51,000
here, I suppose I could just just make this whole thing predicated on

1544
01:33:51,000 --> 01:33:52,800
that actually, right?

1545
01:33:56,000 --> 01:33:59,700
And basically say all right, you know what, if the bitmap is invalid,

1546
01:33:59,700 --> 01:34:05,000
then we're just not even going to entertain that at all.

1547
01:34:05,800 --> 01:34:09,700
So when the bitmap comes in here and we do all this stuff for it,

1548
01:34:09,900 --> 01:34:14,100
instead of this pushing of the entry here, we're going to do something

1549
01:34:14,100 --> 01:34:15,100
slightly different.

1550
01:34:15,200 --> 01:34:18,900
But before we get to that, I'll also say that, you know like the

1551
01:34:18,900 --> 01:34:20,300
x-axis that sort of thing.

1552
01:34:20,600 --> 01:34:21,900
These are actually going to be

1553
01:34:30,800 --> 01:34:33,200
there's a bunch of noise outside that sounded like,

1554
01:34:34,200 --> 01:34:34,900
Dramatic.

1555
01:34:35,400 --> 01:34:36,200
And if you heard it.

1556
01:34:37,400 --> 01:34:38,600
There's like sirens and things.

1557
01:34:38,600 --> 01:34:39,500
I don't know what's going on.

1558
01:34:40,500 --> 01:34:42,100
We don't need another pointer for this.

1559
01:34:45,900 --> 01:34:50,200
All right, so if you take a look at what goes on here, we sort of have

1560
01:34:50,200 --> 01:34:51,900
a situation where we can collapse.

1561
01:34:51,900 --> 01:34:53,500
A lot of this work that we were doing here.

1562
01:34:53,500 --> 01:34:54,800
We can just call this mean p.

1563
01:34:54,800 --> 01:34:58,600
If we want to, we have the Z bias.

1564
01:34:58,600 --> 01:35:00,400
It's already there, right?

1565
01:35:01,600 --> 01:35:06,300
So we've got all this information that we can use and now we can

1566
01:35:06,300 --> 01:35:09,900
directly do the computations that we were deferring to later.

1567
01:35:10,200 --> 01:35:11,700
So we just directly do all of these.

1568
01:35:11,700 --> 01:35:13,400
Obviously we don't need any of this stuff.

1569
01:35:15,900 --> 01:35:19,300
And where's our Primo color?

1570
01:35:19,300 --> 01:35:20,000
There it is.

1571
01:35:26,100 --> 01:35:30,900
So now what we need to do is we just need to create the these

1572
01:35:30,900 --> 01:35:31,800
vertices.

1573
01:35:31,800 --> 01:35:37,300
We need to write those out as our verts rather than calling GL to

1574
01:35:37,600 --> 01:35:39,500
store them in some way, right?

1575
01:35:40,300 --> 01:35:44,000
So we fill compute all of this information and we need the color

1576
01:35:44,000 --> 01:35:46,700
value, but we need to be able to pack the color down here.

1577
01:35:47,300 --> 01:35:50,200
And so I believe we have a packing call.

1578
01:35:52,000 --> 01:35:52,600
Do we?

1579
01:35:56,000 --> 01:35:56,600
Somewhere.

1580
01:36:07,200 --> 01:36:08,600
I just don't know what we called it.

1581
01:36:17,200 --> 01:36:18,400
Yeah, there's a crazy stuff.

1582
01:36:18,400 --> 01:36:19,600
I want to know what's going on outside.

1583
01:36:19,600 --> 01:36:20,000
I'm gonna go.

1584
01:36:20,000 --> 01:36:21,200
Look, hold on one second.

1585
01:36:21,200 --> 01:36:22,300
Sorry to drop the Stream.

1586
01:37:01,000 --> 01:37:04,700
So I'm not sure what is going on outside but it's kind of nuts.

1587
01:37:04,700 --> 01:37:08,800
Like there's there's like a bunch of police outside and there's like

1588
01:37:08,800 --> 01:37:13,000
loud kind of explosion e noises but I don't and there's tons of people

1589
01:37:13,000 --> 01:37:14,800
like lined up on the streets.

1590
01:37:15,200 --> 01:37:16,500
I don't know exactly what it is.

1591
01:37:16,600 --> 01:37:20,700
It might be some it might be a protest or it might be a parade of some

1592
01:37:20,700 --> 01:37:21,300
kind.

1593
01:37:21,700 --> 01:37:22,700
I have no idea.

1594
01:37:24,100 --> 01:37:28,300
It's a very, I literally don't know what's going on.

1595
01:37:28,500 --> 01:37:30,600
This is the the hazard of being on stream.

1596
01:37:32,800 --> 01:37:34,700
Downtown in downtown Seattle.

1597
01:37:34,700 --> 01:37:35,400
I suppose.

1598
01:37:36,100 --> 01:37:39,100
Let me see if there's a explanation of what's going on here.

1599
01:37:41,100 --> 01:37:42,700
From somewhere.

1600
01:37:46,900 --> 01:37:48,000
News related.

1601
01:38:02,500 --> 01:38:03,600
Let's see.

1602
01:38:07,400 --> 01:38:08,500
I don't see anything.

1603
01:38:22,700 --> 01:38:24,100
I do not see anything.

1604
01:38:25,900 --> 01:38:28,900
So I guess it must not be anything, particularly weird, maybe it was

1605
01:38:28,900 --> 01:38:30,800
just something that was supposed to be happening.

1606
01:38:33,200 --> 01:38:34,700
I do not know.

1607
01:38:41,500 --> 01:38:45,600
Anybody know, anybody know, does anyone on the stream now?

1608
01:38:51,800 --> 01:38:52,600
That's quarter Tron.

1609
01:38:52,600 --> 01:38:56,200
Looks like you posted something from Komo News live police fire

1610
01:38:56,200 --> 01:38:56,900
scanner.

1611
01:38:57,900 --> 01:38:58,600
What is that?

1612
01:39:00,800 --> 01:39:04,300
Ah, that's pretty cool.

1613
01:39:05,500 --> 01:39:07,000
It does anyone know what it is?

1614
01:39:16,300 --> 01:39:16,800
I don't know.

1615
01:39:16,800 --> 01:39:19,200
Well, okay, it's rather disturbing.

1616
01:39:19,200 --> 01:39:20,800
I will say, it's doesn't make me.

1617
01:39:20,800 --> 01:39:24,700
Feel super comfortable sitting here streaming with this going on

1618
01:39:24,700 --> 01:39:27,900
outside, but I guess it's better than being outside.

1619
01:39:28,500 --> 01:39:33,900
If you see me duck down at some point during the stream.

1620
01:39:35,900 --> 01:39:37,300
Yeah, I may have to end it.

1621
01:39:37,300 --> 01:39:38,600
Prematurely what?

1622
01:39:38,600 --> 01:39:39,300
How about?

1623
01:39:39,300 --> 01:39:40,700
I don't know how long is Life In The Stream?

1624
01:39:40,700 --> 01:39:43,700
What time are we going till 1:00, 1:15?

1625
01:39:44,600 --> 01:39:45,300
I guess.

1626
01:39:49,300 --> 01:39:50,200
Is that right?

1627
01:39:52,700 --> 01:39:57,200
I don't remember what time I started 1130, I started at 1:15 right?

1628
01:39:57,200 --> 01:40:01,200
So yeah, I guess let's let's try to survive for 15 minutes more.

1629
01:40:10,100 --> 01:40:10,600
Yeah.

1630
01:40:11,900 --> 01:40:17,100
All right anyway, so moving on if I if I just want to write these out

1631
01:40:17,100 --> 01:40:18,500
to a Vertex dream, right?

1632
01:40:18,500 --> 01:40:23,600
Then I'm just assuming that I have here a pointer to somewhere in the

1633
01:40:23,600 --> 01:40:26,800
vertex buffer, which will worry about how to get the right one later.

1634
01:40:27,400 --> 01:40:31,000
But I know that I'm going to eventually have these textured vertices

1635
01:40:32,000 --> 01:40:34,100
and I have to write them out, right?

1636
01:40:34,100 --> 01:40:37,900
So at some point, I've got a textured vertex, star, vert here,

1637
01:40:38,100 --> 01:40:39,800
whatever that texture vertex, Tarver,

1638
01:40:40,000 --> 01:40:44,300
Is that is going to be where I'm writing and I'm going to like you

1639
01:40:44,300 --> 01:40:48,000
know, output 1 vertex, Advance it to the next one output 1 vertex

1640
01:40:48,000 --> 01:40:50,000
advance to the next one, right?

1641
01:40:51,800 --> 01:40:54,000
So what I need to do is just write to my vertex.

1642
01:40:54,000 --> 01:40:56,100
I need to write the P.

1643
01:40:56,300 --> 01:40:59,100
I need to write the UV and I need to write the color.

1644
01:40:59,900 --> 01:41:02,800
Like, so, now in this case, we need to pack our color down, like I

1645
01:41:02,800 --> 01:41:04,200
said, couldn't quite find that.

1646
01:41:04,400 --> 01:41:06,900
So we'll take a look at how to pack that down in a second.

1647
01:41:07,500 --> 01:41:10,400
We could just write it in here in line here, if we can't find the

1648
01:41:10,400 --> 01:41:16,700
existing one and then I need to sort of like keep these all the rest

1649
01:41:16,700 --> 01:41:19,300
of this stuff, exactly as it is, right.

1650
01:41:20,100 --> 01:41:21,300
So the position of the first

1651
01:41:21,400 --> 01:41:24,600
Vertex and you know, you've ease of the vertices.

1652
01:41:24,800 --> 01:41:29,900
These are actually going to be all exactly as they appear here, right?

1653
01:41:32,300 --> 01:41:35,300
So, I'm literally just streaming after this buffer.

1654
01:41:35,500 --> 01:41:41,600
Exactly the same stuff that I would have been streaming out to the

1655
01:41:41,600 --> 01:41:42,500
opengl.

1656
01:41:43,700 --> 01:41:44,900
Immediate mode.

1657
01:41:45,000 --> 01:41:46,600
Old-school fixed function pipeline.

1658
01:41:46,800 --> 01:41:48,400
I'm just putting these into memory.

1659
01:41:48,500 --> 01:41:53,600
So it there's really no I'm not doing anything differently in terms of

1660
01:41:53,600 --> 01:41:57,100
the computation or development of the values.

1661
01:41:57,500 --> 01:41:59,800
All I'm doing is I'm just writing to memory

1662
01:42:00,000 --> 01:42:04,200
Previously, we were handing to open gel by a series of fixed function

1663
01:42:04,200 --> 01:42:05,200
pipeline calls.

1664
01:42:05,600 --> 01:42:06,800
That's it, right?

1665
01:42:08,300 --> 01:42:12,500
So I'm literally just making a very simple mechanical change to what's

1666
01:42:12,500 --> 01:42:15,600
happening to the vertices and that's it.

1667
01:42:22,600 --> 01:42:23,000
Okay.

1668
01:42:38,600 --> 01:42:44,300
So this will write out effectively, the four vertices of the quad.

1669
01:42:45,100 --> 01:42:49,800
And like I said, what we want to do here is we want to write these out

1670
01:42:49,800 --> 01:42:50,700
sequentially.

1671
01:42:51,500 --> 01:42:54,300
So that we're writing to me,

1672
01:42:56,100 --> 01:43:02,000
So that we're writing 24, different vertices.

1673
01:43:02,400 --> 01:43:02,800
Oops.

1674
01:43:04,500 --> 01:43:07,000
That comprise the quad.

1675
01:43:14,400 --> 01:43:16,400
Or I should say that constitute the quad.

1676
01:43:17,200 --> 01:43:20,700
So there's our four vertices and then after we've written them, we

1677
01:43:20,700 --> 01:43:26,400
would want to advance the vertex pointer by that, you know, by for.

1678
01:43:26,800 --> 01:43:29,700
But again, we don't really know exactly how we're doing any of that

1679
01:43:29,700 --> 01:43:30,200
stuff yet.

1680
01:43:30,200 --> 01:43:34,900
So we need to sort of have a more coherent system for that in place

1681
01:43:34,900 --> 01:43:36,700
and we'll deal with that in a second, right?

1682
01:43:38,500 --> 01:43:42,500
First, we need to do is figure out a way to smack this value down,

1683
01:43:42,600 --> 01:43:43,100
right?

1684
01:43:43,500 --> 01:43:46,600
Because this is currently a veck for that's coming in, that's a

1685
01:43:46,600 --> 01:43:48,100
premultiplied veck for.

1686
01:43:48,600 --> 01:43:54,000
We need that premultiplied veck for to have some more, you know, be

1687
01:43:54,000 --> 01:43:58,400
compacted down, be a little more concise so we need some way to pack

1688
01:43:58,800 --> 01:44:01,900
those colors down and let's see.

1689
01:44:01,900 --> 01:44:04,500
Like I said, I don't know, I thought we had written one of those, an

1690
01:44:04,500 --> 01:44:06,000
RGB one of those.

1691
01:44:06,000 --> 01:44:07,400
In fact, I know that we have

1692
01:44:07,700 --> 01:44:09,300
I just don't know where it went.

1693
01:44:09,300 --> 01:44:11,000
We're at scampered off to.

1694
01:44:12,300 --> 01:44:13,700
So, okay, here we go.

1695
01:44:15,300 --> 01:44:21,400
So here's Pack 4 by 8 and what you can see here is this is packed 4 by

1696
01:44:21,400 --> 01:44:23,900
8 but it's in the old format, right?

1697
01:44:23,900 --> 01:44:29,800
And so we want in addition to pack board by 8 and unpack 4x8, I think.

1698
01:44:29,800 --> 01:44:33,400
We also want them to have both versions of these.

1699
01:44:33,800 --> 01:44:39,600
So what I probably want to do here is say, hey, let's go ahead and go

1700
01:44:39,600 --> 01:44:40,800
to the math Library.

1701
01:44:41,400 --> 01:44:44,300
Let's put these packing calls in there because they're pretty

1702
01:44:44,300 --> 01:44:44,700
generally.

1703
01:44:44,900 --> 01:44:45,400
Useful.

1704
01:44:45,600 --> 01:44:46,100
Right?

1705
01:44:47,100 --> 01:44:50,100
And then what I'd like to do is have both versions of them.

1706
01:44:50,900 --> 01:44:59,700
So I want unpack 4 by 8 and Pack 4 by 8 and I want RGB versus our GBA

1707
01:44:59,700 --> 01:44:59,800
version.

1708
01:45:00,000 --> 01:45:01,700
Is be gra, right?

1709
01:45:02,800 --> 01:45:07,500
So this would be the gra unpack be gri pack.

1710
01:45:09,000 --> 01:45:10,400
and then we want the

1711
01:45:14,200 --> 01:45:17,200
switch version as well, right?

1712
01:45:18,500 --> 01:45:19,700
So you want both of these.

1713
01:45:21,200 --> 01:45:25,300
So instead of, in this case, where we've got a RGB in descending

1714
01:45:25,300 --> 01:45:27,800
order, we want rgba and descending order there.

1715
01:45:28,300 --> 01:45:32,700
And the same thing is true here where we're going out to our g b.

1716
01:45:32,700 --> 01:45:35,500
A so it's just flipping those two around.

1717
01:45:35,500 --> 01:45:38,700
So this is going to be an rgba Pack 4 by 8.

1718
01:45:39,900 --> 01:45:40,500
Right.

1719
01:45:41,100 --> 01:45:45,800
That's going to pack it down and and that's yet all we really need out

1720
01:45:45,800 --> 01:45:46,300
of that.

1721
01:45:47,500 --> 01:45:51,600
So let's see here.

1722
01:45:53,100 --> 01:45:54,600
Wait a minute, what is XX?

1723
01:45:54,600 --> 01:45:56,200
0 x axis and y axis are in here.

1724
01:45:56,200 --> 01:45:58,600
So we're going to call this x axis to.

1725
01:45:59,000 --> 01:46:01,500
This is the two dimensional sort of.

1726
01:46:02,900 --> 01:46:03,900
Version of that.

1727
01:46:10,400 --> 01:46:12,300
And we can make this code, much more efficient as well.

1728
01:46:16,100 --> 01:46:19,700
And we got to change These Guys, these are be Gra.

1729
01:46:21,300 --> 01:46:22,000
Unpacks.

1730
01:46:25,700 --> 01:46:26,100
Okay.

1731
01:46:28,000 --> 01:46:28,300
All right.

1732
01:46:28,300 --> 01:46:29,600
So I think we're good now.

1733
01:46:29,600 --> 01:46:34,700
All we need is a way of actually streaming out the, the bitmap and

1734
01:46:34,800 --> 01:46:36,600
texture vertex data, which we don't have.

1735
01:46:36,600 --> 01:46:39,600
So now we've got the code ready to do all the rights.

1736
01:46:40,400 --> 01:46:42,400
We just don't have the actual right themselves.

1737
01:46:42,400 --> 01:46:46,100
A, similarly, you know, we need Somehow Here, we need to do like start

1738
01:46:46,100 --> 01:46:50,600
bitmap out equals bitmap, right?

1739
01:46:50,600 --> 01:46:54,900
I mean, we need something like that and we don't have that either.

1740
01:46:56,500 --> 01:46:58,100
So in both cases, we need that.

1741
01:46:58,400 --> 01:47:04,100
And we also need some way of advancing the those four words and that

1742
01:47:04,100 --> 01:47:04,700
kind of stuff.

1743
01:47:05,000 --> 01:47:08,200
So what I want to do here in the render group is I when we open the

1744
01:47:08,200 --> 01:47:15,200
render group, I need some way of specifying where those pointers are

1745
01:47:15,400 --> 01:47:16,000
basically.

1746
01:47:16,500 --> 01:47:20,900
And when we do the begin and the end stuff, we need some way of

1747
01:47:20,900 --> 01:47:24,500
saying, here's where, you know, in the buffer hasn't been taken yet.

1748
01:47:25,100 --> 01:47:25,600
So I think

1749
01:47:25,800 --> 01:47:32,100
Probably since the render commands actually care about that a little

1750
01:47:32,100 --> 01:47:33,000
more specifically.

1751
01:47:33,100 --> 01:47:34,800
I think that has to be in here, right?

1752
01:47:34,800 --> 01:47:40,700
Because if multiple people open a street open a render group at

1753
01:47:40,700 --> 01:47:46,400
different times of the pipeline, they need to be able to know where

1754
01:47:46,400 --> 01:47:51,600
they're writing into the sort of that that vertex array memory.

1755
01:47:52,100 --> 01:47:52,700
And so on.

1756
01:47:53,100 --> 01:47:55,600
So we need probably a Max or discount and

1757
01:47:55,700 --> 01:47:57,400
And a Vertex count, right?

1758
01:47:57,900 --> 01:47:59,700
And so we need that to be

1759
01:48:00,000 --> 01:48:04,600
Satisfied like this so that it can sort of output as it goes, right.

1760
01:48:06,600 --> 01:48:10,600
Okay, so when we're running to the vertices, that one is probably as

1761
01:48:10,600 --> 01:48:14,400
simple as actually using the render commands themselves.

1762
01:48:14,400 --> 01:48:16,700
So, that's actually kind of pretty straightforward.

1763
01:48:16,700 --> 01:48:21,500
I think, what we can do there is just say, alright, we know we've got

1764
01:48:21,500 --> 01:48:25,600
our render commands, the render commands have the vertex array in

1765
01:48:25,600 --> 01:48:30,000
them, and we know we're going to write into the vertex array at the

1766
01:48:30,000 --> 01:48:33,600
location that is currently indicated by its vertex count.

1767
01:48:33,600 --> 01:48:36,300
And then we need to increment the vertex count by 4 because

1768
01:48:36,500 --> 01:48:39,300
Going to use four vertices, right?

1769
01:48:39,500 --> 01:48:41,600
But I think that's all we really have to do.

1770
01:48:42,600 --> 01:48:47,000
Similarly, when we do that, we should make sure that the amount that

1771
01:48:47,000 --> 01:48:53,700
we've used is reasonable and has not exceeded the maximum, right?

1772
01:48:55,700 --> 01:48:59,700
I think that's mostly what we need to do there to make that work.

1773
01:49:00,300 --> 01:49:05,900
Now, here in the binary, operator equals situation here, you can see

1774
01:49:05,900 --> 01:49:09,600
that I've accidentally kept the part that opengl needs, which we don't

1775
01:49:09,600 --> 01:49:11,200
actually need to get rid of that.

1776
01:49:11,800 --> 01:49:15,800
And so that leaves us with only one thing which is the bitmap out

1777
01:49:15,800 --> 01:49:16,300
part.

1778
01:49:16,600 --> 01:49:17,000
Right?

1779
01:49:19,100 --> 01:49:19,500
Okay.

1780
01:49:20,800 --> 01:49:22,800
So now we're definitely getting much closer.

1781
01:49:24,000 --> 01:49:31,300
And we have not we have thankfully avoided getting shelled by whatever

1782
01:49:31,400 --> 01:49:35,600
bombardments were happening outside the window, which is also helpful

1783
01:49:35,700 --> 01:49:36,300
I suppose.

1784
01:49:38,600 --> 01:49:42,800
So, what we need to do now is figure out how we're going to actually

1785
01:49:42,800 --> 01:49:46,800
take the render entry for the quads and output it.

1786
01:49:46,800 --> 01:49:53,400
Now, what we can do just at first is a pretty, as a pretty basic way

1787
01:49:53,400 --> 01:49:57,500
of getting this working is to do the, the absolutely dumbest thing

1788
01:49:57,500 --> 01:50:04,500
which is to push one render entry, textured quad for, every time we do

1789
01:50:04,500 --> 01:50:07,100
this, which is exactly the opposite of what we want to accomplish

1790
01:50:07,100 --> 01:50:08,600
because the whole point

1791
01:50:08,600 --> 01:50:12,600
Into this is to do multiple that once but we can start by pushing one

1792
01:50:12,700 --> 01:50:13,500
each time.

1793
01:50:14,600 --> 01:50:15,200
Right?

1794
01:50:16,000 --> 01:50:20,400
And if we do that, then we should be able to get it working and then

1795
01:50:20,800 --> 01:50:22,800
add a thing to the render Group, which Aggregates them.

1796
01:50:22,800 --> 01:50:26,100
So then whenever you call push bitmap, it just sticks it onto an

1797
01:50:26,100 --> 01:50:29,900
existing one that's in there and so that's where I'm trying to get

1798
01:50:29,900 --> 01:50:30,800
with this, right?

1799
01:50:31,700 --> 01:50:33,700
But if we just do it one at a time, now then it's pretty

1800
01:50:33,700 --> 01:50:34,300
straightforward.

1801
01:50:34,300 --> 01:50:37,700
What we need to do is just have some place to put the bitmap out stuff

1802
01:50:37,700 --> 01:50:38,700
that we're talking about here.

1803
01:50:38,900 --> 01:50:42,600
When this entry comes back we know what the entry has to have in it,

1804
01:50:42,600 --> 01:50:43,200
right?

1805
01:50:43,400 --> 01:50:44,300
The entry is actually

1806
01:50:44,400 --> 01:50:46,000
I'm very, very straightforward.

1807
01:50:46,000 --> 01:50:47,700
It's just these three things, right?

1808
01:50:47,700 --> 01:50:48,600
So the entry

1809
01:50:50,500 --> 01:50:52,900
Bitmap array, we need that to exist, somewhere.

1810
01:50:53,300 --> 01:50:54,100
We have the quad.

1811
01:50:54,100 --> 01:50:55,700
Count the quad count.

1812
01:50:55,700 --> 01:50:59,400
We know is one in this case, because we're not aggregating yet the

1813
01:50:59,400 --> 01:50:59,800
vertex,

1814
01:51:00,100 --> 01:51:00,900
Offset.

1815
01:51:01,000 --> 01:51:02,000
We know what that is.

1816
01:51:02,500 --> 01:51:04,400
It's the commands vertex count.

1817
01:51:05,000 --> 01:51:09,500
And so, all we really need to do here is have that bitmap array, be

1818
01:51:09,500 --> 01:51:10,400
something we can use.

1819
01:51:10,400 --> 01:51:15,900
Now, when we call Push render element, I believe there's the size

1820
01:51:15,900 --> 01:51:16,900
here, right?

1821
01:51:17,000 --> 01:51:20,100
And so, what I want to do is, I want to use in this push render

1822
01:51:20,100 --> 01:51:20,900
element.

1823
01:51:21,300 --> 01:51:25,600
I want to actually use something a little bit Squinkie here to use the

1824
01:51:25,600 --> 01:51:29,600
technical term where instead of pushing render elk calling push render

1825
01:51:29,600 --> 01:51:29,900
elements.

1826
01:51:30,000 --> 01:51:33,500
I meant through the macro, which does the cast for us?

1827
01:51:33,700 --> 01:51:36,800
I'm going to do something a little bit swankier, and I'm going to say,

1828
01:51:37,200 --> 01:51:40,400
hey, let's call the the actual function itself.

1829
01:51:41,000 --> 01:51:43,800
Let's go ahead and put into the

1830
01:51:47,200 --> 01:51:47,800
What is this called?

1831
01:51:47,800 --> 01:51:49,300
Render group entry type.

1832
01:51:49,600 --> 01:51:50,000
We go.

1833
01:51:51,500 --> 01:51:55,700
I'm going to go in ahead and actually call the function directly so

1834
01:51:55,700 --> 01:52:01,800
that I can say, give me the size of one of these things, plus the

1835
01:52:01,800 --> 01:52:02,600
size.

1836
01:52:04,800 --> 01:52:05,700
Of a bitmap pointer.

1837
01:52:07,700 --> 01:52:12,900
So now I know I've got some extra size at the end of this thing and so

1838
01:52:12,900 --> 01:52:17,900
when I am done getting that back, I know if I want to I can tell it

1839
01:52:17,900 --> 01:52:19,400
that the loaded bitmap

1840
01:52:22,000 --> 01:52:27,700
Array in question is actually just going to be right after the entry.

1841
01:52:27,700 --> 01:52:30,600
So I'm pushing the entry memory and I'm just assuming some extra space

1842
01:52:30,900 --> 01:52:33,800
at the end of it for that loaded bitmap, right?

1843
01:52:34,700 --> 01:52:38,500
And so what I'll do here is say, okay, the entry bitmap

1844
01:52:40,300 --> 01:52:44,400
Array is going to be equal to the bitmap that comes in and I only have

1845
01:52:44,400 --> 01:52:46,600
to push one of them, right?

1846
01:52:48,200 --> 01:52:50,000
This needs to get specified.

1847
01:52:50,000 --> 01:52:50,400
There we go.

1848
01:52:51,500 --> 01:52:54,900
And so now, I think I'm actually pushing those on, right?

1849
01:52:55,200 --> 01:52:58,900
I believe anyway, so hopefully that's good.

1850
01:53:01,900 --> 01:53:04,300
Of course, I appear to have done something incorrectly.

1851
01:53:05,500 --> 01:53:06,300
Ah, yes.

1852
01:53:09,100 --> 01:53:10,100
and in here,

1853
01:53:12,100 --> 01:53:16,300
Because I'm including that when we encounter one of these ones, in

1854
01:53:16,300 --> 01:53:21,100
addition to advancing the size of this, we also must advance.

1855
01:53:23,200 --> 01:53:31,000
An additional size which is however, much after we've gone past the

1856
01:53:31,000 --> 01:53:32,400
render entry textured quads.

1857
01:53:32,600 --> 01:53:37,900
We also have to go however many loaded bitmaps there were in our

1858
01:53:37,900 --> 01:53:38,600
bitmap array.

1859
01:53:38,600 --> 01:53:44,500
So the quad count times, the size of a loaded bitmap pointer

1860
01:53:45,800 --> 01:53:48,700
Right, as we advance forward.

1861
01:53:51,000 --> 01:53:51,400
Okay.

1862
01:53:52,400 --> 01:53:56,400
So as you can see, not exactly a stunning success because we are not

1863
01:53:56,400 --> 01:53:59,900
seeing our Sprites, but that is the idea and

1864
01:54:00,000 --> 01:54:03,500
Now, we just have to debug that and I wanted to do it this way like I

1865
01:54:03,500 --> 01:54:06,400
said before, because I want to do it one step at a time.

1866
01:54:06,400 --> 01:54:10,600
So now I want to just be able to bug one thing at a time, not half the

1867
01:54:10,600 --> 01:54:16,500
debug, both the aggregation part and the bundled part here.

1868
01:54:17,100 --> 01:54:20,600
So you can see that this is calling the same path for all intents and

1869
01:54:20,600 --> 01:54:21,100
purposes.

1870
01:54:21,100 --> 01:54:23,800
So I just have to go to bug now and see why.

1871
01:54:23,800 --> 01:54:28,300
I'm getting a difference between the two of them as we go.

1872
01:54:28,400 --> 01:54:29,300
Now I'm not crashing.

1873
01:54:29,300 --> 01:54:29,900
So that

1874
01:54:30,000 --> 01:54:33,300
Just that the texture loading is at least loading out of a reasonable

1875
01:54:33,300 --> 01:54:33,800
place.

1876
01:54:34,300 --> 01:54:38,100
But, yeah, we have to take a look and see whether these vertices are

1877
01:54:38,100 --> 01:54:41,700
coming through in a reasonable fashion and everything else.

1878
01:54:41,700 --> 01:54:45,500
And so, yeah, we'll take a look.

1879
01:54:48,300 --> 01:54:49,800
We will take a look at that.

1880
01:54:49,900 --> 01:54:53,400
Just doing a quick scan here to make sure I didn't do anything

1881
01:54:53,400 --> 01:54:57,100
obviously wrong that jumps out at me.

1882
01:54:57,800 --> 01:55:04,200
So anyway, the a re at the entry plus 1, that is logical quad cab

1883
01:55:04,200 --> 01:55:07,300
being one is logical.

1884
01:55:07,900 --> 01:55:09,300
We are opening our quads.

1885
01:55:09,300 --> 01:55:14,500
We get four vertices out of it, and we are specifying the color, you

1886
01:55:14,500 --> 01:55:17,400
be srgb.

1887
01:55:17,700 --> 01:55:23,900
And a there which is exactly what I would expect it to look like.

1888
01:55:35,500 --> 01:55:39,400
That all looks pretty reasonable to me.

1889
01:55:39,500 --> 01:55:43,900
And these are set up with the same values that I was having before.

1890
01:55:45,500 --> 01:55:46,700
Again, looks pretty reasonable.

1891
01:55:46,700 --> 01:55:49,800
So I'm going to go ahead and here and I want to just take a quick

1892
01:55:49,800 --> 01:55:50,200
look.

1893
01:55:51,200 --> 01:55:56,600
I'm going to set a breakpoint inside the renderer to just see what

1894
01:55:56,600 --> 01:55:57,900
what those values are coming through.

1895
01:55:57,900 --> 01:56:02,500
As again, as just a sort of sniff test to make sure that when I see a

1896
01:56:02,500 --> 01:56:04,600
quad, it seems like a, you know,

1897
01:56:04,900 --> 01:56:06,800
Sensible quad and there isn't.

1898
01:56:06,800 --> 01:56:08,100
It isn't all messed up.

1899
01:56:11,600 --> 01:56:17,400
So here's a bitmap, it's a pretty reasonable looking bitmap so that's,

1900
01:56:17,500 --> 01:56:23,400
you know, I could easily see that being something reasonable in here.

1901
01:56:23,400 --> 01:56:25,000
We've got our vertices.

1902
01:56:25,600 --> 01:56:27,100
Let's take a look at the hexadecimal.

1903
01:56:30,300 --> 01:56:31,300
Kind of not particularly.

1904
01:56:38,000 --> 01:56:40,600
Okay, this color is the super wrong.

1905
01:56:41,600 --> 01:56:42,100
Ah,

1906
01:56:44,300 --> 01:56:44,700
Yeah.

1907
01:56:44,700 --> 01:56:45,200
Okay.

1908
01:56:46,000 --> 01:56:48,800
I'm I'm I'm not quite right here.

1909
01:56:48,900 --> 01:56:51,200
The RGB pack 4x8 call.

1910
01:56:51,200 --> 01:56:54,700
I just realized I was a little overzealous.

1911
01:56:54,700 --> 01:56:55,400
There wasn't I?

1912
01:56:55,900 --> 01:56:57,100
So these

1913
01:57:00,300 --> 01:57:02,600
Don't x 255.

1914
01:57:07,600 --> 01:57:08,000
Right.

1915
01:57:08,000 --> 01:57:08,500
They just

1916
01:57:10,100 --> 01:57:11,000
unpack.

1917
01:57:12,500 --> 01:57:14,300
Directly, right.

1918
01:57:15,200 --> 01:57:17,200
So, that's not particularly useful.

1919
01:57:17,200 --> 01:57:21,100
You have to multiply by 255 first, right?

1920
01:57:21,100 --> 01:57:26,700
You need you basically need to do that before you could actually use

1921
01:57:26,700 --> 01:57:27,000
them.

1922
01:57:32,500 --> 01:57:33,300
Oh my God.

1923
01:57:34,400 --> 01:57:35,100
okay, that's

1924
01:57:38,900 --> 01:57:39,800
That is.

1925
01:57:42,700 --> 01:57:43,900
That's pretty good.

1926
01:57:45,000 --> 01:57:46,600
I was not expecting that.

1927
01:57:46,900 --> 01:57:50,000
I just realized that we didn't properly use.

1928
01:57:50,000 --> 01:57:51,800
The the we didn't.

1929
01:57:55,400 --> 01:57:56,900
That was, that was pretty good.

1930
01:57:57,100 --> 01:57:57,300
Yeah.

1931
01:57:57,300 --> 01:58:00,700
We did not use the the proper value there.

1932
01:58:01,000 --> 01:58:02,500
That was all right.

1933
01:58:02,500 --> 01:58:03,200
That was funny.

1934
01:58:04,000 --> 01:58:04,300
So.

1935
01:58:04,300 --> 01:58:05,000
Okay good.

1936
01:58:05,000 --> 01:58:06,200
Just in time for the Q&A.

1937
01:58:06,200 --> 01:58:10,100
We finish what I wanted to finish, which is getting that set up and

1938
01:58:10,100 --> 01:58:13,100
ready for us to move away from the fixed function pipeline.

1939
01:58:13,700 --> 01:58:16,300
We've got some more work to do, we'll do that tomorrow, but I think

1940
01:58:16,300 --> 01:58:17,900
that's a good place as any to stop.

1941
01:58:19,300 --> 01:58:21,100
I'll go ahead and go to the Q&A here.

1942
01:58:40,800 --> 01:58:42,000
This used right?

1943
01:58:42,000 --> 01:58:44,900
Simulating srgb, texture loads and extra fragment rates is not enough

1944
01:58:44,900 --> 01:58:45,300
srgb.

1945
01:58:45,300 --> 01:58:47,400
Also affects blending, which you can't emulate.

1946
01:58:48,200 --> 01:58:49,000
Yes, that's true.

1947
01:58:49,200 --> 01:58:51,500
In fact, emulation of srgb.

1948
01:58:51,500 --> 01:58:52,800
I also want to be clear.

1949
01:58:53,200 --> 01:58:54,300
It's totally stop.

1950
01:58:54,300 --> 01:58:59,800
It's just a stopgap thing to do so that your game runs at all in a

1951
01:58:59,800 --> 01:59:03,600
reasonable way, but it's not even correct.

1952
01:59:03,600 --> 01:59:09,300
Because again srgb, especially if you're using actual srgb, is not a

1953
01:59:09,300 --> 01:59:09,500
square.

1954
01:59:09,700 --> 01:59:10,800
Square root either.

1955
01:59:11,200 --> 01:59:16,300
So even even just if you take blending out and you take by linear out,

1956
01:59:16,400 --> 01:59:17,200
right?

1957
01:59:17,600 --> 01:59:20,300
Because remember our bilinear will be wrong as well because the

1958
01:59:20,300 --> 01:59:22,300
bilinear happens before the squaring.

1959
01:59:24,100 --> 01:59:29,700
So this is just a you know, kind of a patch that's like okay if your

1960
01:59:29,700 --> 01:59:31,800
graphics card for some reason can't do this.

1961
01:59:32,000 --> 01:59:36,000
Then you can run through this pipe and will at least not look,

1962
01:59:36,100 --> 01:59:39,300
obviously completely wrong, but it's not at all.

1963
01:59:39,600 --> 01:59:45,200
The correct procedure and I think you can even probably see.

1964
01:59:45,200 --> 01:59:47,900
I mean I know I could be making this up but I suspect that there's a

1965
01:59:47,900 --> 01:59:49,200
dark Fringe here.

1966
01:59:49,200 --> 01:59:54,300
That's darker than it should be as well on the Sprites for example,

1967
01:59:54,300 --> 01:59:58,700
and like, just in general, you will have incorrect results if you are

1968
01:59:58,700 --> 01:59:59,800
expecting to have RS,

1969
02:00:00,000 --> 02:00:04,400
CB and your game is set up for it and you don't get it then you have a

1970
02:00:04,400 --> 02:00:05,500
problem, right?

1971
02:00:05,500 --> 02:00:11,300
It's like there's no way to really fix it entirely that I know of

1972
02:00:11,300 --> 02:00:11,800
anyway.

1973
02:01:07,800 --> 02:01:08,400
So the risk.

1974
02:01:08,400 --> 02:01:11,900
Oh, do you have a license for all those cubes?

1975
02:01:12,400 --> 02:01:13,400
What do you mean?

1976
02:01:15,200 --> 02:01:16,600
What do you mean a license?

1977
02:01:17,900 --> 02:01:21,200
Brooke tag, what texture will you use for Rex and cubes?

1978
02:01:22,300 --> 02:01:25,900
So four rectangles and cubes, those will all have textures.

1979
02:01:25,900 --> 02:01:30,200
Eventually we could use a zero texture if we want to talk about solid

1980
02:01:30,200 --> 02:01:33,600
color but the cubes actually are supposed to be textured.

1981
02:01:33,600 --> 02:01:36,100
They're just not textured right now because we haven't updated to a

1982
02:01:36,100 --> 02:01:41,600
new art pack, but the cubes will have textures on them, like grass and

1983
02:01:41,600 --> 02:01:42,100
stuff.

1984
02:01:52,800 --> 02:01:58,000
MTS marks is it worth testing srgb and msaa in the non opengl

1985
02:01:58,000 --> 02:01:59,200
compatibility mode.

1986
02:01:59,400 --> 02:02:00,700
I'm sorry, I'm not sure what you mean.

1987
02:02:00,700 --> 02:02:04,200
What do you mean by in the non opengl compatibility mode?

1988
02:02:12,400 --> 02:02:14,800
Do you mean not setting the compatibility bit?

1989
02:02:20,900 --> 02:02:23,500
If, if you mean, not setting the compatibility, but I'll just answer

1990
02:02:23,500 --> 02:02:27,500
that before you actually have a chance to respond, but if you mean by

1991
02:02:27,500 --> 02:02:29,600
not saying the compatibility bit, yes, it is.

1992
02:02:29,600 --> 02:02:33,100
Absolutely worth, testing it, but we can't test it yet because we

1993
02:02:33,100 --> 02:02:35,500
haven't gotten rid of all the fixed function pipeline stuff.

1994
02:02:35,700 --> 02:02:38,800
Once we're, once we've removed all the fixed function pipeline stuff,

1995
02:02:38,900 --> 02:02:40,100
which is what I will be.

1996
02:02:40,100 --> 02:02:45,300
You know what, I'm working on getting us towards, then we can turn off

1997
02:02:45,300 --> 02:02:48,200
compatibility mode, but at the moment, we can't because I'm pretty

1998
02:02:48,200 --> 02:02:48,900
sure that opens you

1999
02:02:49,000 --> 02:02:51,400
Alcor profile, three removes immediate mode.

2000
02:02:52,100 --> 02:02:53,400
I could be wrong about that.

2001
02:03:07,500 --> 02:03:10,800
Jim says will you be using more than one Shader program?

2002
02:03:10,800 --> 02:03:13,600
If so how do you minimize switching between programs when rendering?

2003
02:03:15,000 --> 02:03:21,100
So at this point if we I don't know that we will have very many Shader

2004
02:03:21,100 --> 02:03:25,700
programs we probably won't but it really depends on the circumstance.

2005
02:03:25,700 --> 02:03:32,500
One of the things that's true about rendering with Z buffer, like we

2006
02:03:32,500 --> 02:03:36,000
are now is that we don't we're not super dependent.

2007
02:03:36,100 --> 02:03:37,900
The order of rendering.

2008
02:03:38,200 --> 02:03:40,600
So if we want to, we can have some buckets.

2009
02:03:40,900 --> 02:03:43,800
And when things come in, whichever Shader they need, they just go into

2010
02:03:43,800 --> 02:03:47,300
that bucket and then we render each bucket with, you know, set the

2011
02:03:47,300 --> 02:03:49,000
Shader and render everything in the bucket.

2012
02:03:50,300 --> 02:03:52,100
So we can certainly do something like that if we care.

2013
02:03:52,100 --> 02:03:53,500
I again, I don't know how many shares were have.

2014
02:03:53,600 --> 02:03:56,100
The other thing you can do is actually have branching in the Shader,

2015
02:03:56,900 --> 02:04:00,400
sometimes at the branches are cheap enough and since everything's

2016
02:04:00,400 --> 02:04:05,300
always going through the same Branch, you can actually just use Shader

2017
02:04:05,300 --> 02:04:05,800
branching.

2018
02:04:06,700 --> 02:04:09,300
if you have, if you have more fine-grained switching than that,

2019
02:04:20,900 --> 02:04:24,100
MTS, mock said, you could unset it and just see if the assert will

2020
02:04:24,100 --> 02:04:24,500
fail.

2021
02:04:24,700 --> 02:04:29,100
Yeah, we can if you want to just see if it can get there.

2022
02:04:30,700 --> 02:04:32,000
We can certainly try it.

2023
02:04:58,900 --> 02:05:05,300
Yes, so I think you have to specify core.

2024
02:05:06,600 --> 02:05:07,400
Here.

2025
02:05:16,100 --> 02:05:17,100
Is the thing.

2026
02:05:18,600 --> 02:05:20,900
Let me look up this.

2027
02:05:38,700 --> 02:05:40,200
That's the one we want.

2028
02:05:53,600 --> 02:05:57,500
So we already have it, so I believe you would just specify that.

2029
02:06:00,500 --> 02:06:04,400
And I guess if I was cool, I would probably do this.

2030
02:06:09,700 --> 02:06:14,000
So now in theory a nothing will work, okay, wasn't expecting that.

2031
02:06:18,800 --> 02:06:26,300
Well, so yeah, I'm not sure why that allowed us to work at all, but I

2032
02:06:26,300 --> 02:06:27,100
guess it did.

2033
02:06:27,800 --> 02:06:28,800
So that's interesting.

2034
02:06:30,500 --> 02:06:32,700
Because I would have expected the fixed function stuff not to work.

2035
02:06:32,700 --> 02:06:35,300
Maybe they didn't remove it till 4:00, I don't know.

2036
02:06:35,600 --> 02:06:38,300
I thought they were moved in three so I thought that would have aired.

2037
02:06:38,300 --> 02:06:41,000
It might be that this driver just doesn't do the error checking

2038
02:06:41,000 --> 02:06:42,500
properly that's also possible.

2039
02:06:42,500 --> 02:06:43,200
I have no idea.

2040
02:06:47,700 --> 02:06:49,900
But that worked apparently.

2041
02:06:53,300 --> 02:06:54,200
So alright.

2042
02:06:54,600 --> 02:07:02,700
Alright so now in theory we're passing core profile bit so that's good

2043
02:07:03,000 --> 02:07:08,400
and if we pass core profile bit, now we can just see over inside

2044
02:07:08,400 --> 02:07:09,100
opengl.

2045
02:07:12,400 --> 02:07:13,400
Let's see here.

2046
02:07:24,000 --> 02:07:27,700
So it's still errors out, even in court profile mode.

2047
02:07:30,600 --> 02:07:35,100
So, I'm pretty sure this car just doesn't do it or the driver doesn't

2048
02:07:35,100 --> 02:07:37,700
know how to enable it or something.

2049
02:07:55,100 --> 02:07:58,100
Insofar as says are you passing a major minor version to?

2050
02:07:58,100 --> 02:08:01,900
I think the bit might be enabled sub 3.2?

2051
02:08:03,300 --> 02:08:04,600
Well, we are.

2052
02:08:04,600 --> 02:08:06,000
I mean there's a minor version here.

2053
02:08:06,000 --> 02:08:10,000
I can certainly pass 3.2 and see if that does anything.

2054
02:08:12,500 --> 02:08:13,000
Right.

2055
02:08:20,200 --> 02:08:20,800
Where is?

2056
02:08:32,700 --> 02:08:35,000
So, we did get, we did get the context.

2057
02:08:40,300 --> 02:08:41,900
But still no dice.

2058
02:08:50,800 --> 02:08:51,400
Yep.

2059
02:09:27,700 --> 02:09:31,100
Looks like looks like weird pretty much good to go.

2060
02:09:31,100 --> 02:09:34,700
Now, in terms of end of questions, so I'm going to head and wrap it

2061
02:09:34,700 --> 02:09:35,000
up.

2062
02:09:36,400 --> 02:09:41,800
Insofar, as I saw insofar as join the chat, I will just end the

2063
02:09:41,800 --> 02:09:42,100
stream.

2064
02:09:42,100 --> 02:09:45,200
I wanted to ask you a question, so I'll be right back over to the

2065
02:09:45,200 --> 02:09:46,200
chatting in a minute here.

2066
02:09:47,200 --> 02:09:49,700
But let's go ahead and wind this down.

2067
02:09:51,500 --> 02:09:52,500
Okay.

2068
02:09:54,500 --> 02:09:58,000
Thank you everybody for joining me for another episode of handmade

2069
02:09:58,000 --> 02:09:58,200
here.

2070
02:09:58,200 --> 02:09:59,300
It's been a pleasure coding with you.

2071
02:09:59,300 --> 02:10:01,900
As always, if you would like to follow along with hers at home, you

2072
02:10:01,900 --> 02:10:04,200
can always pre-order the game on handmade here a.org.

2073
02:10:04,500 --> 02:10:07,200
It comes with a source code so that you can play around with it.

2074
02:10:07,200 --> 02:10:11,300
We also have the Forum site, you can go to ask questions a patreon

2075
02:10:11,300 --> 02:10:11,600
page.

2076
02:10:11,600 --> 02:10:12,000
You go to.

2077
02:10:12,000 --> 02:10:14,900
If you want Sports video series, a schedule bot, which lets you know

2078
02:10:14,900 --> 02:10:18,500
what the schedule is going to be for the weekend and an episode guide,

2079
02:10:18,500 --> 02:10:21,200
that lets you catch up on old episodes.

2080
02:10:21,200 --> 02:10:22,300
Now we also

2081
02:10:24,500 --> 02:10:25,900
We'll be back here tomorrow.

2082
02:10:26,500 --> 02:10:33,700
And as the schedule bot says, you can see here this weekend schedule

2083
02:10:33,700 --> 02:10:36,100
is 11 today, 10 a.m.

2084
02:10:36,100 --> 02:10:36,800
tomorrow.

2085
02:10:37,000 --> 02:10:43,800
But you'll notice here in the US in the Pacific time zone we have

2086
02:10:43,800 --> 02:10:44,800
daylight savings time.

2087
02:10:44,900 --> 02:10:46,500
It happens tomorrow.

2088
02:10:46,800 --> 02:10:53,000
So actually I believe that this will be at the same time tomorrow.

2089
02:10:54,800 --> 02:10:57,800
Because basically what I did is I set them at the same time for the

2090
02:10:57,800 --> 02:11:00,000
weekend but the time zone changes over.

2091
02:11:00,300 --> 02:11:04,600
So tomorrow it will actually be at the same time but it it's actually

2092
02:11:04,600 --> 02:11:07,600
an hour earlier because of the fact that the clock go back.

2093
02:11:07,600 --> 02:11:08,900
I think I did that, right?

2094
02:11:09,000 --> 02:11:09,600
I could be wrong.

2095
02:11:09,600 --> 02:11:10,800
In the clocks, go, the other direction.

2096
02:11:10,800 --> 02:11:14,300
I have no idea but either way, we'll be here at 10 a.m.

2097
02:11:14,300 --> 02:11:16,600
Pacific Daylight time tomorrow.

2098
02:11:19,000 --> 02:11:21,400
So just be aware that the clocks do change for trying to make that

2099
02:11:21,400 --> 02:11:22,200
broadcast.

2100
02:11:22,700 --> 02:11:24,000
That's and I don't know.

2101
02:11:24,000 --> 02:11:26,300
Your time zone may not even have daylight savings time.

2102
02:11:26,300 --> 02:11:29,700
In which case, you'll be even more confused than I am, but there you

2103
02:11:29,700 --> 02:11:30,000
go.

2104
02:11:30,700 --> 02:11:31,700
So that's about it.

2105
02:11:31,700 --> 02:11:33,000
I hope to see everyone back here tomorrow.

2106
02:11:33,000 --> 02:11:36,200
Assuming that the time, change doesn't miss, everybody up until then

2107
02:11:36,200 --> 02:11:39,300
have fun programming it and I'll see y'all on the internet.

2108
02:11:39,400 --> 02:11:40,300
Take it easy, everybody.

