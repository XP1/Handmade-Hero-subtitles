1
00:00:00,000 --> 00:00:00,500
Recording.

2
00:00:01,700 --> 00:00:03,900
Hello, everyone, and welcome to handmade hero.

3
00:00:03,900 --> 00:00:09,400
The sure we could have complete game live on stream and yesterday we

4
00:00:09,400 --> 00:00:13,600
went ahead and implemented multi-threaded texture downloads but we

5
00:00:13,600 --> 00:00:16,300
didn't have a chance to actually step through and debug any of it.

6
00:00:16,700 --> 00:00:19,500
So our textured downloads are definitely not working yet.

7
00:00:19,700 --> 00:00:22,800
All we did was write the actual code for it and that was because we

8
00:00:22,800 --> 00:00:25,200
spent most of time yesterday talking about what those even were and

9
00:00:25,200 --> 00:00:27,700
describing them on the Blackboard so we didn't have that much time to

10
00:00:27,700 --> 00:00:28,200
code.

11
00:00:29,000 --> 00:00:31,900
Maybe 30, 35 minutes on 034.

12
00:00:31,900 --> 00:00:34,600
Probably 45 minutes cuz I went late long because I want to get it all

13
00:00:34,600 --> 00:00:34,800
done.

14
00:00:34,800 --> 00:00:37,400
So we did it all but now we got actually two buckets.

15
00:00:37,400 --> 00:00:38,500
That's we're going to do today.

16
00:00:38,900 --> 00:00:43,000
If you are trying to follow along with today's stream and you're

17
00:00:43,000 --> 00:00:46,800
someone who pre-ordered the game when you download that source, code

18
00:00:46,800 --> 00:00:48,200
today is day 2 44.

19
00:00:48,200 --> 00:00:54,100
So download day 243 source code out of that source code ZIP and that's

20
00:00:54,100 --> 00:00:55,000
where I'm at today.

21
00:00:55,900 --> 00:00:58,600
So let's go ahead and get that going.

22
00:00:59,900 --> 00:01:05,600
Let's go ahead and load up our, handmade code situation here, handmade

23
00:01:05,800 --> 00:01:06,700
prj.

24
00:01:07,200 --> 00:01:13,100
And if I build and run, you can see where we're at, which is, we're

25
00:01:13,100 --> 00:01:16,700
not like crashing or anything, but our textures just don't get

26
00:01:16,700 --> 00:01:17,200
downloaded.

27
00:01:17,200 --> 00:01:21,500
Like they don't actually get through to the card so that when we run

28
00:01:21,500 --> 00:01:25,300
the game, as you can see, like we end up in this circumstance where

29
00:01:25,300 --> 00:01:28,700
it's just like clearly drawing with just a white texture.

30
00:01:28,900 --> 00:01:31,400
Doesn't actually have any content in it.

31
00:01:32,300 --> 00:01:35,900
So our job today, which is always an unsavory job.

32
00:01:35,900 --> 00:01:39,300
Anytime you're trying to debug anything with Graphics drivers.

33
00:01:39,500 --> 00:01:41,900
It's always an epic Nightmare.

34
00:01:42,400 --> 00:01:45,000
And the reason is because, of course, it's much, like, debugging

35
00:01:45,000 --> 00:01:45,900
things on Windows.

36
00:01:46,300 --> 00:01:51,100
You can't actually step into their code and see what's actually going

37
00:01:51,100 --> 00:01:51,400
on.

38
00:01:51,800 --> 00:01:54,800
So you have to kind of treat it as a black box and sometimes, you

39
00:01:54,800 --> 00:01:57,900
know, you can get errors back from the black box that will help you

40
00:01:58,100 --> 00:01:58,700
and we will

41
00:01:58,800 --> 00:02:00,500
I'll probably try to do some of that.

42
00:02:00,600 --> 00:02:03,500
Potentially today to get some errors back from opengl.

43
00:02:03,500 --> 00:02:06,600
Maybe that might give us some information about what's going wrong,

44
00:02:07,200 --> 00:02:10,400
but in general it's just a much harder problem than when we debug our

45
00:02:10,400 --> 00:02:10,800
own code.

46
00:02:10,800 --> 00:02:14,600
Because when we do about our own code, we can see 100% of what's

47
00:02:14,600 --> 00:02:15,200
actually happening.

48
00:02:15,200 --> 00:02:17,700
And that's actually one of the really nice things about programming,

49
00:02:18,500 --> 00:02:21,700
you know, a whole game engine to is that drastically limits, the

50
00:02:21,700 --> 00:02:24,200
amount of stuff that you don't understand, and you don't know, and you

51
00:02:24,200 --> 00:02:27,600
can't step through it right on him a hero, we kind of had it easy

52
00:02:27,600 --> 00:02:28,700
because we invented everything.

53
00:02:28,900 --> 00:02:29,700
Even the renderer.

54
00:02:29,700 --> 00:02:33,800
So when a pixel looked wrong we can step in and find out exactly why.

55
00:02:34,100 --> 00:02:34,800
Unfortunately.

56
00:02:34,800 --> 00:02:38,000
When we decided to add Hardware acceleration and we knew this was

57
00:02:38,000 --> 00:02:38,400
coming.

58
00:02:38,400 --> 00:02:41,300
I mean we knew we had to take advantage of the GPU if we want to ship

59
00:02:41,300 --> 00:02:46,300
a game that that is comparable performance to, you know, games that,

60
00:02:46,300 --> 00:02:48,200
you know, other games that you can buy.

61
00:02:48,400 --> 00:02:51,100
We know we have to use the GPU because it's where most of the graphics

62
00:02:51,100 --> 00:02:52,900
horsepower the machine and we can't not use it.

63
00:02:52,900 --> 00:02:57,400
But the trade-off is, once you start using the GPU, there's this huge

64
00:02:57,400 --> 00:02:58,800
driver in the way and

65
00:02:58,900 --> 00:02:59,900
all this graphics card.

66
00:03:00,200 --> 00:03:05,000
Specific stuff in the way and you lose that all of that, nice ability

67
00:03:05,000 --> 00:03:06,700
to see everything that's going on.

68
00:03:07,300 --> 00:03:10,600
And so in some sense, it puts you more back into the shoes of, you

69
00:03:10,600 --> 00:03:13,800
know, of JavaScript or Java, those sorts of things, where there's this

70
00:03:13,800 --> 00:03:16,100
whole system beneath you.

71
00:03:16,100 --> 00:03:20,400
That you can't see and you can't step into that one part of our

72
00:03:20,400 --> 00:03:23,100
program that handles the graphics now has that same problem.

73
00:03:23,100 --> 00:03:24,600
It's very frustrating, right?

74
00:03:24,600 --> 00:03:25,900
We're spoiled again.

75
00:03:25,900 --> 00:03:28,600
When we do see stupas us because we can literally look at the assembly

76
00:03:28,600 --> 00:03:29,800
and see exactly what our codes.

77
00:03:30,000 --> 00:03:31,000
Doing when it goes wrong.

78
00:03:31,000 --> 00:03:32,400
We can see exactly why.

79
00:03:32,400 --> 00:03:35,000
And that's just so nice and so convenient.

80
00:03:35,300 --> 00:03:37,400
With unfortunately, as soon as you start using that Harbor

81
00:03:37,400 --> 00:03:40,000
acceleration, it just hasn't gotten to that point yet.

82
00:03:40,500 --> 00:03:43,100
Someday, My fond hope is that I will live to see the day.

83
00:03:43,400 --> 00:03:44,800
When graphics cards are.

84
00:03:44,800 --> 00:03:48,800
No, don't exist anymore and you just have a processor and you program

85
00:03:48,800 --> 00:03:49,600
that processor.

86
00:03:49,800 --> 00:03:53,100
And it just happens to have a lot of really beefy, ALU stuff in it

87
00:03:53,300 --> 00:03:55,800
because then we would be able to have just, you know, our software

88
00:03:55,800 --> 00:03:58,500
renderer could have been the actual renderer and it could access all

89
00:03:58,500 --> 00:03:59,900
that horsepower and we could have

90
00:04:00,000 --> 00:04:03,800
It'd be something that we had complete control over.

91
00:04:04,500 --> 00:04:05,000
That's not the world.

92
00:04:05,000 --> 00:04:06,600
We live in, what you gonna do?

93
00:04:07,200 --> 00:04:08,800
So we just have to live with it a little bit.

94
00:04:09,000 --> 00:04:11,000
It's not like our whole programs that way.

95
00:04:11,200 --> 00:04:14,800
So what we try to do is isolate the amount to which we talked to the

96
00:04:14,800 --> 00:04:15,800
driver, right?

97
00:04:18,500 --> 00:04:22,300
We try to keep the graphic systems kind of carp compartmentalised

98
00:04:22,800 --> 00:04:26,200
because it is this thing that we just don't have access to and it's a

99
00:04:26,200 --> 00:04:31,200
very frustrating part of the code if you're used to having that Total

100
00:04:31,200 --> 00:04:31,700
Access.

101
00:04:32,400 --> 00:04:33,900
So that's just the reality of where we're at.

102
00:04:33,900 --> 00:04:36,100
So now we're in a black box that bugging scenario.

103
00:04:36,300 --> 00:04:39,000
We know that we're not seeing anything on the screen, we will be able

104
00:04:39,000 --> 00:04:41,200
to do some limited stepping to see like whether or not.

105
00:04:41,200 --> 00:04:43,700
For example, we're actually creating the context that we thought we

106
00:04:43,700 --> 00:04:45,700
were creating or other things like that.

107
00:04:45,700 --> 00:04:47,000
But beyond that, we will have

108
00:04:47,100 --> 00:04:49,900
A very limited ability to step into any code and so we're going to

109
00:04:49,900 --> 00:04:53,000
have to start using debugging techniques more made for sort of Black

110
00:04:53,000 --> 00:04:53,200
Box.

111
00:04:53,200 --> 00:04:55,900
The bugging again like the sort you would use for when you're dealing

112
00:04:55,900 --> 00:04:58,500
with the windows platform layer and you can't see in there or when

113
00:04:58,500 --> 00:05:02,200
you're in some higher-level, language python PHP Java whatever where

114
00:05:02,400 --> 00:05:04,300
there's a whole system beneath you.

115
00:05:04,300 --> 00:05:08,500
And you can't actually see how you're talking to the CPU because it's

116
00:05:08,500 --> 00:05:11,400
somebody else who's talking to CPU, write on your behalf.

117
00:05:12,600 --> 00:05:15,000
So that's the situation that we find ourselves in now.

118
00:05:15,900 --> 00:05:19,900
So diving into this, the first thing we should do obviously is just

119
00:05:20,000 --> 00:05:23,700
take a stroll through our new opengl code and see if there's anything

120
00:05:23,700 --> 00:05:27,800
that's obviously a missed because it might be that we have some rather

121
00:05:27,800 --> 00:05:34,300
obvious bugs that are not at all subtle or or complex, that won't take

122
00:05:34,300 --> 00:05:35,000
very long to debug.

123
00:05:35,000 --> 00:05:38,000
And we should try to get those out of the way first, so just take a

124
00:05:38,000 --> 00:05:38,500
look through.

125
00:05:38,500 --> 00:05:39,400
We made some changes.

126
00:05:39,400 --> 00:05:42,300
Let's just make sure we're still doing things that we roughly

127
00:05:42,400 --> 00:05:43,100
spect to do.

128
00:05:43,100 --> 00:05:49,100
So here we are in in the opengl code where we create that context

129
00:05:49,400 --> 00:05:52,800
initially and one of the things that you can see and I just kind of

130
00:05:52,800 --> 00:05:56,500
want to emphasize this again and I know this sounds like I'm sort of

131
00:05:56,500 --> 00:05:59,800
bad-mouthing Graphics drivers and that is exactly what I am tending

132
00:05:59,800 --> 00:05:59,900
to.

133
00:06:00,000 --> 00:06:01,100
Actually, it's bad about them.

134
00:06:01,700 --> 00:06:04,800
Not so much this early because I think that they're sort of written

135
00:06:04,800 --> 00:06:05,700
poorly or anything like this.

136
00:06:05,700 --> 00:06:08,700
It's more just because that whole ecosystem is actually kind of an

137
00:06:08,700 --> 00:06:09,500
epic disaster.

138
00:06:09,700 --> 00:06:14,900
What that means is that just the act and you saw there, just the act

139
00:06:15,000 --> 00:06:20,300
of initializing that opengl context was like, a noticeable delay.

140
00:06:20,500 --> 00:06:23,100
Like, I don't know if you saw that, but I can step back in gear.

141
00:06:23,600 --> 00:06:25,100
Right here we are.

142
00:06:25,300 --> 00:06:28,700
And I'm about to initialize opengl watch how long it takes me to step

143
00:06:28,700 --> 00:06:29,400
over this line.

144
00:06:31,000 --> 00:06:34,500
Did you see that that's like two seconds or something?

145
00:06:34,600 --> 00:06:38,400
Right the whole startup time for our app was like instant before, most

146
00:06:38,400 --> 00:06:39,700
of the time was waiting for me.

147
00:06:39,700 --> 00:06:43,100
Blows the fade are memos fade that he wanted to do.

148
00:06:43,100 --> 00:06:43,200
Right?

149
00:06:43,200 --> 00:06:45,200
If we took that out, it just comes up like that.

150
00:06:45,300 --> 00:06:50,900
Now all of a sudden all we do, all we did was ask for Hardware

151
00:06:50,900 --> 00:06:54,800
acceleration to get initialized and all of a sudden our startup time

152
00:06:55,100 --> 00:06:57,000
got, you know, what 10x worse?

153
00:06:57,000 --> 00:06:59,500
I don't even know how bad it is, but it's way worse.

154
00:07:01,200 --> 00:07:03,500
That's just, that's the kind of thing that just drives me insane.

155
00:07:03,500 --> 00:07:04,900
It's like and there's nothing you can do.

156
00:07:05,300 --> 00:07:06,800
There's nothing we can do about it, right?

157
00:07:06,800 --> 00:07:09,600
If we want to talk to the hardware, we have to go through the driver

158
00:07:09,600 --> 00:07:09,800
layer.

159
00:07:09,800 --> 00:07:11,000
There's nothing we can do.

160
00:07:11,700 --> 00:07:15,700
And so that's unfortunate someday, like I said, Someday, I'm really

161
00:07:15,700 --> 00:07:19,300
hoping that I, I don't want to die programming computers like this.

162
00:07:19,300 --> 00:07:23,800
I want to, I want to like code my last lines on something, where I

163
00:07:23,800 --> 00:07:26,400
actually coded the hardware, and there wasn't two seconds worth of

164
00:07:26,400 --> 00:07:29,300
startup time, just to get a display surface.

165
00:07:29,500 --> 00:07:30,600
So here we go.

166
00:07:30,800 --> 00:07:30,900
Go.

167
00:07:31,000 --> 00:07:35,600
We've got back our context and we can see that it actually worked in

168
00:07:35,600 --> 00:07:35,800
that.

169
00:07:35,800 --> 00:07:37,900
We got a context and we were able to make it current.

170
00:07:37,900 --> 00:07:39,800
Now, that's the same code that were using before.

171
00:07:39,800 --> 00:07:41,400
So that makes sense, that that worked.

172
00:07:41,700 --> 00:07:44,700
And what we're doing here is you can see, we're kind of storing this

173
00:07:44,700 --> 00:07:45,100
off.

174
00:07:45,300 --> 00:07:49,100
So we're storing this open, Jill RC to a global, there it is.

175
00:07:49,100 --> 00:07:52,100
And you can see, it's the same one that is the modern one, which is

176
00:07:52,100 --> 00:07:52,600
what we want.

177
00:07:52,600 --> 00:07:53,800
So that's all good.

178
00:07:54,400 --> 00:07:58,500
And then later on down here, when we get to the bottom, we're going to

179
00:07:58,500 --> 00:08:00,700
store off that window DC as well, right?

180
00:08:00,800 --> 00:08:04,800
That's the DC of our window and I believe we have a CSO DC window

181
00:08:04,800 --> 00:08:07,800
which means that that we don't have to worry.

182
00:08:08,900 --> 00:08:10,000
About ever releasing that.

183
00:08:10,000 --> 00:08:12,800
But I'm going to go double check because I don't actually know if

184
00:08:12,800 --> 00:08:13,300
that's true.

185
00:08:14,200 --> 00:08:16,700
So I should double-check that, just in case that's a possible.

186
00:08:18,000 --> 00:08:19,300
Like problematic thing.

187
00:08:20,700 --> 00:08:23,400
So, yeah, it looks like we don't have a CS phone DC here.

188
00:08:24,000 --> 00:08:26,200
So, I'm a little nervous about that.

189
00:08:26,300 --> 00:08:30,200
I'm just a little as have a twinge of nervousness about that because

190
00:08:30,200 --> 00:08:35,299
if we don't have a CSO DC here then I don't think holding the DC open

191
00:08:35,299 --> 00:08:36,900
like that is a good idea.

192
00:08:37,100 --> 00:08:41,600
Now, granted we don't really hold it that open because we could

193
00:08:41,600 --> 00:08:44,500
actually release it like right here because we've once we've we're

194
00:08:44,500 --> 00:08:47,500
just doing it saving the DC and we could release it right here.

195
00:08:47,700 --> 00:08:49,400
And then we wouldn't need to see us on DC.

196
00:08:49,500 --> 00:08:52,500
And in fact, that's something that I could totally do like, right

197
00:08:52,500 --> 00:08:58,200
here, maybe I should, but I'm going to go ahead and see what happens

198
00:08:58,200 --> 00:08:59,800
if we make that a CSO DC win.

199
00:09:01,300 --> 00:09:01,800
Do I need to do?

200
00:09:02,200 --> 00:09:04,600
You know what I'm not gonna do that.

201
00:09:04,600 --> 00:09:05,300
I'm not gonna do that.

202
00:09:05,300 --> 00:09:07,800
I'm just going to go ahead and do the the open and close.

203
00:09:09,500 --> 00:09:12,300
So the way that I'm going to do that is temporarily.

204
00:09:12,800 --> 00:09:17,200
I'm just going to go in here and say okay we've got this Global DC

205
00:09:17,200 --> 00:09:18,900
thing happening, right?

206
00:09:19,600 --> 00:09:22,200
And what I think I'm going to do is I'm going to make these a little

207
00:09:22,200 --> 00:09:24,700
less, a little less specific there.

208
00:09:24,900 --> 00:09:28,200
And I'm going to go to the part where we initialize opengl.

209
00:09:28,200 --> 00:09:31,100
So I don't know where that actually is.

210
00:09:31,100 --> 00:09:31,700
There it is.

211
00:09:32,100 --> 00:09:36,200
So in win32 in it, opengl what I'd like to do here is I'd like to make

212
00:09:36,200 --> 00:09:38,500
this actually return the open.

213
00:09:38,700 --> 00:09:39,400
Lrc.

214
00:09:39,700 --> 00:09:43,300
So that hdlr see that we create whichever one we decide to go with.

215
00:09:43,300 --> 00:09:47,300
I'm going to have that return it and so I'm going to have that be

216
00:09:47,300 --> 00:09:52,600
something where we sort of take down here instead of assigning it to a

217
00:09:52,600 --> 00:09:53,100
global.

218
00:09:53,300 --> 00:09:56,300
I'm going to make that just return the thing.

219
00:09:57,700 --> 00:10:00,000
And the other thing I'm going to do, I'm going to get rid of this is

220
00:10:00,000 --> 00:10:02,100
I'm going to say that this thing.

221
00:10:02,400 --> 00:10:04,900
When we pass in the window, in fact, I don't even know when we pass in

222
00:10:04,900 --> 00:10:06,700
the window, do we even use the window?

223
00:10:07,400 --> 00:10:08,200
Whereas I can't see.

224
00:10:08,200 --> 00:10:09,200
It's behind my head.

225
00:10:10,200 --> 00:10:12,100
Do we ever use the window itself?

226
00:10:12,700 --> 00:10:14,400
So we never even used the window itself.

227
00:10:14,400 --> 00:10:17,300
So what I'm going to do instead is I'm going to pass the HDC in and

228
00:10:17,300 --> 00:10:19,900
the reason I'm doing this again it's just a sort of lift this code up

229
00:10:19,900 --> 00:10:23,200
just a little bit more because I don't want it to be too Global and

230
00:10:23,200 --> 00:10:26,300
stringing you know in a platform layer the platform that you're on top

231
00:10:26,300 --> 00:10:27,400
of is typically banana.

232
00:10:27,600 --> 00:10:29,900
And you can see that we're going through all this ridiculous stuff for

233
00:10:29,900 --> 00:10:31,100
no good reason, right?

234
00:10:31,300 --> 00:10:34,000
And so, I don't really care about having global variables in the

235
00:10:34,000 --> 00:10:35,400
platform layer or crazy.

236
00:10:35,400 --> 00:10:36,000
Spaghetti code.

237
00:10:36,000 --> 00:10:38,700
The platform there because typically that sort of has to happen and if

238
00:10:38,700 --> 00:10:40,900
you try to over engineer it you end up to spending a lot of time for

239
00:10:40,900 --> 00:10:46,900
no real reason but just because that's the case doesn't mean I

240
00:10:46,900 --> 00:10:49,500
shouldn't take the opportunity to make things a little cleaner when I

241
00:10:49,500 --> 00:10:51,800
can just to keep it.

242
00:10:51,800 --> 00:10:55,100
So it's readable and we don't accidentally make some weird mistakes

243
00:10:55,100 --> 00:10:56,400
when we're changing things.

244
00:10:56,400 --> 00:10:56,700
So,

245
00:10:59,000 --> 00:11:02,600
I'm gonna go ahead and make that change and and sort of make it so

246
00:11:02,600 --> 00:11:04,700
that we passed that, that DC in.

247
00:11:05,400 --> 00:11:07,400
So what I'm going to do here is I'm going to say let's get the DC

248
00:11:07,400 --> 00:11:08,100
right here.

249
00:11:09,300 --> 00:11:12,300
And what I'm going to do is I'm going to say like that Global DC, I

250
00:11:12,300 --> 00:11:13,400
think is what it was called.

251
00:11:13,500 --> 00:11:16,600
I'm going to get the DC here for the global DC and then I'm going to

252
00:11:16,600 --> 00:11:17,900
release it after we're done.

253
00:11:24,900 --> 00:11:26,700
And we could make it so that we pass this stuff through.

254
00:11:26,700 --> 00:11:29,700
Now, like, I sort of, almost did before, we could definitely do

255
00:11:29,700 --> 00:11:32,900
something like that if we want to in the future because now I know

256
00:11:32,900 --> 00:11:35,600
that I was a little confused about how the platform stuff worked, the

257
00:11:35,600 --> 00:11:38,000
platform cool stuff because I didn't quite remember how we were

258
00:11:38,100 --> 00:11:41,600
dispatching those and so at this point, you know, that's that's

259
00:11:41,600 --> 00:11:44,900
reasonable and I'm okay with what's happening here for now.

260
00:11:44,900 --> 00:11:47,700
So I don't need to like go the full, the full nine, but I just kind of

261
00:11:47,700 --> 00:11:48,500
want to make that a little clearer.

262
00:11:48,700 --> 00:11:48,800
So

263
00:11:48,900 --> 00:11:53,200
We get that DC and then I'll just get that Global heo, the global

264
00:11:53,200 --> 00:11:54,800
opengl RC right here as well.

265
00:11:55,000 --> 00:11:57,800
And so now I can sort of see that code a little bit more cleanly.

266
00:11:58,400 --> 00:11:59,900
So let's go ahead and compile that information.

267
00:12:00,000 --> 00:12:01,400
Some of the errors that might be there.

268
00:12:02,300 --> 00:12:02,800
Let's see.

269
00:12:02,800 --> 00:12:03,100
Oh, right.

270
00:12:03,100 --> 00:12:05,200
That's that actually take that Global DC.

271
00:12:05,800 --> 00:12:10,300
So, so that's just a little that was just a little cleaner.

272
00:12:12,400 --> 00:12:13,000
So, oops.

273
00:12:13,000 --> 00:12:16,300
That's a speaking of times to go fix that code.

274
00:12:17,200 --> 00:12:18,100
It's not

275
00:12:19,100 --> 00:12:19,900
There's Valeria.

276
00:12:21,000 --> 00:12:23,200
So here we are in the ended up in jail again.

277
00:12:23,600 --> 00:12:27,600
Like I said we're going to do go through here and and go ahead and

278
00:12:28,100 --> 00:12:31,700
look at all those delays God look at all those toys.

279
00:12:31,700 --> 00:12:37,300
All right, so anyway we can return up until our see here so now

280
00:12:37,300 --> 00:12:41,900
hopefully both our Global DC and our Global up until our C are both

281
00:12:41,900 --> 00:12:43,000
valid and I think they are.

282
00:12:43,000 --> 00:12:48,200
In this case, then we go ahead and create these work cues and the low

283
00:12:48,200 --> 00:12:48,700
priority

284
00:12:48,900 --> 00:12:50,100
Q needs opengl.

285
00:12:50,100 --> 00:12:50,900
We set that to True.

286
00:12:50,900 --> 00:12:51,600
Right?

287
00:12:51,800 --> 00:12:55,300
So now I'm going to go ahead in there and we're going to go ahead and

288
00:12:55,300 --> 00:12:56,000
create this now.

289
00:12:56,000 --> 00:12:56,400
Actually.

290
00:12:56,400 --> 00:12:59,700
So now that I look at this though, to we even really can't quite

291
00:12:59,700 --> 00:13:02,100
release it here because we don't actually know that the cues are done

292
00:13:02,100 --> 00:13:03,700
using this yet, right?

293
00:13:04,600 --> 00:13:09,100
So we could there's two ways we could sort of do this and it depends

294
00:13:09,100 --> 00:13:09,900
on which way we want.

295
00:13:09,900 --> 00:13:18,600
But we could create the the opengl context outside of the cube but

296
00:13:18,800 --> 00:13:19,500
I don't know if you noticed this.

297
00:13:19,500 --> 00:13:22,600
I can't I can't actually release this here because if I go into winter

298
00:13:22,600 --> 00:13:26,900
to make you right, what's going to happen is when I call create thread

299
00:13:26,900 --> 00:13:31,300
that's going to start that other thread running and that other thread

300
00:13:31,300 --> 00:13:34,900
is going to do in the thread proc, it's going to potentially do this

301
00:13:35,300 --> 00:13:37,100
create opengl concert or worker thread.

302
00:13:37,200 --> 00:13:41,100
I'm a race down to release the jeep.

303
00:13:41,100 --> 00:13:44,800
That that window DC before, it has a chance to actually create the

304
00:13:44,800 --> 00:13:46,100
context, right?

305
00:13:46,700 --> 00:13:48,500
And so I actually can't

306
00:13:48,800 --> 00:13:50,200
You that release d.c.

307
00:13:50,400 --> 00:13:52,300
That's just not something I can actually do.

308
00:13:53,000 --> 00:13:56,200
So I think that does mean we got a hold that that open.

309
00:13:56,700 --> 00:13:57,600
Which means I'm going to.

310
00:13:57,800 --> 00:13:59,000
I'm going to go ahead and claim.

311
00:13:59,000 --> 00:14:01,800
This is a known to you as the CSO DC window for now.

312
00:14:02,900 --> 00:14:06,000
Which allows us to hold that, open permanently if we want to.

313
00:14:07,200 --> 00:14:12,900
So yeah, so let's go ahead and jump in here and, you know, and like I

314
00:14:12,900 --> 00:14:15,400
said, there's some ways we might now that we're seeing that that's

315
00:14:15,400 --> 00:14:18,800
kind of a little bit of a pain and create some problems for us.

316
00:14:18,800 --> 00:14:20,100
We can take steps to avoid it.

317
00:14:20,100 --> 00:14:23,200
So, you know, I wouldn't worry too much about that, but it's just, you

318
00:14:23,200 --> 00:14:24,400
know, for now, it's fine.

319
00:14:24,900 --> 00:14:28,600
So, let's go in here and take a look at what happens when we actually

320
00:14:28,600 --> 00:14:31,800
need to create the opengl context for one of these worker threads.

321
00:14:32,300 --> 00:14:32,500
This

322
00:14:32,600 --> 00:14:36,400
Should be hopefully one of these ones that has a needs opengl set.

323
00:14:36,500 --> 00:14:40,400
It should be one of our low priority queues, right?

324
00:14:40,600 --> 00:14:41,900
And so if I go in here,

325
00:14:43,500 --> 00:14:46,800
To where we're going to create opengl context for worker thread.

326
00:14:47,800 --> 00:14:48,200
We just got to.

327
00:14:48,200 --> 00:14:50,800
See, do we have the ability to open the will context?

328
00:14:50,800 --> 00:14:51,500
We do.

329
00:14:52,000 --> 00:14:53,900
We've got that Global DC still around.

330
00:14:53,900 --> 00:14:55,800
We've got the open, Jill RC still around.

331
00:14:55,900 --> 00:14:58,000
Now, we're going to try and create a shared context with it, by

332
00:14:58,000 --> 00:14:59,800
passing the DC and the context.

333
00:15:00,000 --> 00:15:04,300
What we are sharing were then passing those at ribs that we know that

334
00:15:04,300 --> 00:15:06,800
we had and then we're just going to see.

335
00:15:06,800 --> 00:15:08,300
Oh, and now we got, we've got another thread.

336
00:15:08,700 --> 00:15:11,900
So we don't really, we haven't done too much thread to bugging, so let

337
00:15:11,900 --> 00:15:14,200
me just explain what's going on here because you may be a little

338
00:15:14,200 --> 00:15:15,500
confused about what just happened.

339
00:15:20,600 --> 00:15:22,200
So we created two threads.

340
00:15:23,400 --> 00:15:26,500
I mean, we created eight threads actually, but we created two of those

341
00:15:26,500 --> 00:15:29,000
threads are for low priority work, which means they just sit in the

342
00:15:29,000 --> 00:15:33,300
background doing stuff like loading files off disk and submitting

343
00:15:33,300 --> 00:15:34,200
textures opengl.

344
00:15:34,200 --> 00:15:35,000
That's all they do.

345
00:15:36,400 --> 00:15:39,800
Those ones because they need to submit text, opengl have to have their

346
00:15:39,800 --> 00:15:40,700
own opengl context.

347
00:15:40,700 --> 00:15:42,200
So we're going through the process of creating them.

348
00:15:42,800 --> 00:15:46,400
That means there are two separate threads, which right now are

349
00:15:46,400 --> 00:15:49,500
executing this win32 create opengl context for worker thread.

350
00:15:49,900 --> 00:15:57,200
Now, the way the actual debugger works is when you step in the code,

351
00:15:58,100 --> 00:16:02,800
it's actually going to show us different threads executing, right.

352
00:16:03,100 --> 00:16:05,400
And so what we're trying to do is we were trying to follow

353
00:16:05,600 --> 00:16:10,300
One of those thread prox through we were trying to follow.

354
00:16:11,400 --> 00:16:12,900
You can see these are the worker threads, right?

355
00:16:12,900 --> 00:16:15,900
Can you see all these guys here that aren't opening up in jail?

356
00:16:16,000 --> 00:16:18,500
They're all sitting there waiting for a, you know, they're just on a

357
00:16:18,500 --> 00:16:19,800
delay, right.

358
00:16:20,100 --> 00:16:24,000
This guy is the one we were just on and this guy is the other one

359
00:16:24,000 --> 00:16:24,700
who's about to come through.

360
00:16:24,700 --> 00:16:26,900
So these guys are both going to initialize opengl.

361
00:16:28,300 --> 00:16:32,400
What we want to do is say I only want to see just this threads

362
00:16:32,400 --> 00:16:33,100
execution.

363
00:16:33,300 --> 00:16:38,000
So what I'm going to do is I'm going to essentially say, actually know

364
00:16:38,000 --> 00:16:39,900
if you can do a freeze all but

365
00:16:42,400 --> 00:16:44,400
I don't actually remember, I thought you could, I don't see it there.

366
00:16:44,600 --> 00:16:46,800
But anyway here I'm just going to say freeze This Thread.

367
00:16:46,800 --> 00:16:48,500
This is the other guy who's actually doing this.

368
00:16:48,500 --> 00:16:52,100
They freeze that thread and freeze the main thread because then I

369
00:16:52,100 --> 00:16:54,600
don't have to worry about seeing them their paused and they're not

370
00:16:54,600 --> 00:16:55,500
going to do anything.

371
00:16:55,900 --> 00:16:56,400
Okay?

372
00:16:57,000 --> 00:17:03,100
So now I should be able to do that step where I can step onto in

373
00:17:03,100 --> 00:17:04,200
through the main domain.

374
00:17:04,200 --> 00:17:07,700
Proc, if that makes sense, at least I think I can maybe not.

375
00:17:08,300 --> 00:17:09,099
What's the problem?

376
00:17:10,400 --> 00:17:11,099
Here, I thought.

377
00:17:13,400 --> 00:17:14,400
Are you waiting on this guy?

378
00:17:22,000 --> 00:17:22,900
What is the problem?

379
00:17:23,700 --> 00:17:24,800
Why can you not step?

380
00:17:28,800 --> 00:17:32,500
well, I was going to do that, but I guess now I'm not

381
00:17:36,500 --> 00:17:37,800
What exactly did I do that?

382
00:17:37,800 --> 00:17:38,800
Made you so upset?

383
00:17:39,000 --> 00:17:41,400
Can you tell me why can you tell me what you are?

384
00:17:42,100 --> 00:17:43,300
What you are grumpy about?

385
00:17:44,300 --> 00:17:46,500
I mean, this is the person who has the execution right now, right.

386
00:17:46,500 --> 00:17:48,300
You can tell that by that little thing there.

387
00:17:48,600 --> 00:17:50,700
So I'm not sure why that isn't

388
00:17:52,200 --> 00:17:52,600
All right.

389
00:17:52,600 --> 00:17:54,500
Well that did not go very well.

390
00:17:57,600 --> 00:17:59,800
That should have worked but I don't know why.

391
00:18:00,600 --> 00:18:02,300
So, let's try that one more time.

392
00:18:12,700 --> 00:18:13,600
Okay, there we go.

393
00:18:13,900 --> 00:18:16,400
So now we're almost through to create opengl thread.

394
00:18:17,100 --> 00:18:20,800
I'm going to go ahead and freeze the other thread before.

395
00:18:20,800 --> 00:18:22,300
It has a chance of do anything.

396
00:18:23,100 --> 00:18:25,800
I'm not sure why this is in the CRT or what?

397
00:18:25,800 --> 00:18:27,400
Exactly it's doing in the CRT.

398
00:18:27,900 --> 00:18:29,400
I'm not sure about that.

399
00:18:29,400 --> 00:18:31,600
I don't know if that's part of the thread startup or what's going on

400
00:18:31,600 --> 00:18:32,000
there.

401
00:18:32,600 --> 00:18:34,200
So, that's a bit weird.

402
00:18:34,500 --> 00:18:36,800
But anyway, here we are in this code.

403
00:18:38,300 --> 00:18:39,700
So I'm going to go ahead and step in here.

404
00:18:40,200 --> 00:18:42,400
I'm going to let it start to create that context.

405
00:18:42,400 --> 00:18:44,900
We're going to switch out to this, this guy's going to come through,

406
00:18:44,900 --> 00:18:47,800
he's going to try and create that context as well.

407
00:18:48,000 --> 00:18:49,800
And so I just want to see if we got anything back.

408
00:18:50,000 --> 00:18:54,200
So we did get an RC back which suggests that that worked right?

409
00:18:54,600 --> 00:18:57,100
And then we're going to do a wiggle make current with the window DC

410
00:18:57,100 --> 00:18:58,800
and the module are see.

411
00:18:59,400 --> 00:19:00,600
We're going to see if that worked.

412
00:19:00,600 --> 00:19:02,900
We're going to do that on both threads, right?

413
00:19:03,500 --> 00:19:04,800
And then I guess what?

414
00:19:04,800 --> 00:19:07,200
A problem is we don't actually have a line of code here so we can

415
00:19:07,200 --> 00:19:07,700
actually see

416
00:19:07,900 --> 00:19:08,600
That worked.

417
00:19:08,700 --> 00:19:11,800
And so maybe one thing I could do, now that I think about it, that

418
00:19:11,800 --> 00:19:15,800
would make it easier for us to actually edit that is I could do where

419
00:19:15,800 --> 00:19:17,400
we do our wiggle make current.

420
00:19:18,200 --> 00:19:22,800
I could actually have a thing that, that sort of

421
00:19:27,200 --> 00:19:28,000
Where is that?

422
00:19:28,500 --> 00:19:29,100
Here it is.

423
00:19:29,800 --> 00:19:30,900
Inside are BOGO Mei, current.

424
00:19:30,900 --> 00:19:32,500
If for some reason, we don't get it.

425
00:19:38,800 --> 00:19:41,100
We can like fail loudly.

426
00:19:41,200 --> 00:19:43,600
So we know that that it actually is, is broken.

427
00:19:45,600 --> 00:19:48,000
So let's just see what actually happened.

428
00:19:48,000 --> 00:19:51,200
I'm set a breakpoint there and see if that actually ever occurs.

429
00:19:55,900 --> 00:20:00,800
So we don't ever get there, which says, to me, that we are actually

430
00:20:00,900 --> 00:20:05,100
able to set up our opengl context, they are actually working.

431
00:20:05,800 --> 00:20:10,600
So again, that doesn't actually tell us that we've set them up

432
00:20:10,600 --> 00:20:11,500
correctly.

433
00:20:11,700 --> 00:20:14,000
So, there may still be problems that we are.

434
00:20:14,000 --> 00:20:19,700
Not aware of that, are going to come back and haunt us, and that might

435
00:20:19,700 --> 00:20:22,200
be wired to start downloading, but we've at least done the due

436
00:20:22,200 --> 00:20:22,800
diligence to know.

437
00:20:22,800 --> 00:20:23,300
Okay?

438
00:20:23,700 --> 00:20:25,100
Nothing is obvious.

439
00:20:25,200 --> 00:20:29,700
We failing when we create these extra context and make them current on

440
00:20:29,700 --> 00:20:30,900
the threads that were using.

441
00:20:31,200 --> 00:20:33,200
So we at least know that much is happening.

442
00:20:33,500 --> 00:20:36,900
Now, let's go over to the opengl bit here and I guess I should

443
00:20:36,900 --> 00:20:38,100
probably do this in the

444
00:20:40,700 --> 00:20:43,700
in the debugger because that's what we actually want to step through

445
00:20:43,700 --> 00:20:44,000
it.

446
00:20:44,500 --> 00:20:47,200
Well so what I want to do is I want to see now.

447
00:20:47,200 --> 00:20:50,100
The texture download went three to allocate texture and D

448
00:20:50,100 --> 00:20:50,900
architecture.

449
00:20:51,000 --> 00:20:52,800
What I want to do is I want to step through those

450
00:20:54,900 --> 00:20:56,900
and I want to see what happens in those.

451
00:20:57,300 --> 00:20:59,900
So if I run now as soon as

452
00:21:00,000 --> 00:21:04,000
Somebody tries to actually download a texture, we should get that

453
00:21:04,000 --> 00:21:04,400
call.

454
00:21:04,700 --> 00:21:06,900
All right, so that's a good sign.

455
00:21:07,600 --> 00:21:10,600
If we're never hitting that break point, then that means we just have

456
00:21:10,600 --> 00:21:11,300
a bug in.

457
00:21:11,300 --> 00:21:13,400
We're never actually trying to initiate the texture.

458
00:21:13,400 --> 00:21:17,600
Download right some but thing is failing we're we're never actually

459
00:21:17,600 --> 00:21:20,000
getting that that call through.

460
00:21:20,000 --> 00:21:23,400
So this might just be a real simple bug on our side and that would be

461
00:21:23,400 --> 00:21:25,900
great because if it's a book on our side like I said before that keeps

462
00:21:25,900 --> 00:21:29,900
us out of the whole Black Box to bugging thing that isn't particularly

463
00:21:30,000 --> 00:21:30,700
Ali fun.

464
00:21:31,100 --> 00:21:34,300
So I assume that when we come in here,

465
00:21:35,800 --> 00:21:36,200
I assume.

466
00:21:36,200 --> 00:21:37,000
Oh, you know what?

467
00:21:37,500 --> 00:21:38,500
This is the problem right here.

468
00:21:38,600 --> 00:21:40,900
We never said that finalized operation.

469
00:21:41,000 --> 00:21:42,300
So we're never accessed.

470
00:21:42,300 --> 00:21:46,900
We're never asking for our our thing to be downloaded, so it's just

471
00:21:46,900 --> 00:21:48,000
never hitting that path.

472
00:21:48,200 --> 00:21:51,200
So if we're supremely lucky and I'm not trying to suggest that we will

473
00:21:51,200 --> 00:21:51,800
be here.

474
00:21:52,100 --> 00:21:55,600
But if we were going to be supremely lucky right now, this would be

475
00:21:55,600 --> 00:21:58,300
our only bug and then everything else would work great.

476
00:21:58,300 --> 00:22:00,200
So here's our finalized asset none.

477
00:22:00,400 --> 00:22:03,200
We're going to say that it's a bitmap now, so that we're in load

478
00:22:03,200 --> 00:22:04,900
bitmap, it should actually.

479
00:22:04,900 --> 00:22:05,100
Now

480
00:22:05,600 --> 00:22:06,500
The actual download.

481
00:22:06,600 --> 00:22:09,200
So now let's let's run and see what happens.

482
00:22:09,900 --> 00:22:14,500
Super long startup time brought to you by AMD, then we can go ahead

483
00:22:14,500 --> 00:22:18,300
and jump in here and say, all right, we got that bitmap.

484
00:22:19,600 --> 00:22:22,500
Now, we are actually in the finalized path, which is what we wanted,

485
00:22:23,000 --> 00:22:25,400
and we're going to call through to load texture, right?

486
00:22:26,600 --> 00:22:27,100
Okay.

487
00:22:27,900 --> 00:22:30,100
And we've never actually loaded that pointer.

488
00:22:30,100 --> 00:22:30,900
At least.

489
00:22:30,900 --> 00:22:31,700
I don't think we did.

490
00:22:32,400 --> 00:22:33,200
So back here.

491
00:22:33,200 --> 00:22:34,400
Went through handmade.

492
00:22:35,400 --> 00:22:38,500
We never actually, did we have the allocate memory call back?

493
00:22:39,700 --> 00:22:40,200
Right.

494
00:22:41,100 --> 00:22:42,900
So that was where was that?

495
00:22:42,900 --> 00:22:43,700
That's right here.

496
00:22:45,500 --> 00:22:46,300
Just roll it up and place.

497
00:22:46,900 --> 00:22:50,100
So yeah, we just never actually we implemented the functions.

498
00:22:50,100 --> 00:22:51,300
We just never put in the pointers.

499
00:22:53,500 --> 00:22:54,800
So this is allocate texture.

500
00:22:57,200 --> 00:22:58,200
And so is this.

501
00:23:04,500 --> 00:23:05,000
All right.

502
00:23:06,000 --> 00:23:09,300
So now what happens when we try to allocate texture?

503
00:23:09,300 --> 00:23:10,800
Do we actually call through it?

504
00:23:10,800 --> 00:23:11,400
Looks like we do.

505
00:23:12,200 --> 00:23:14,400
So here is US trying to get a handle for the texture.

506
00:23:14,800 --> 00:23:17,200
We got back handle one, which makes sense is the first time we're done

507
00:23:17,200 --> 00:23:17,700
with a texture.

508
00:23:17,700 --> 00:23:19,000
That seems like the thing.

509
00:23:19,000 --> 00:23:20,100
The driver, we return.

510
00:23:20,400 --> 00:23:21,600
We bind that texture.

511
00:23:21,600 --> 00:23:24,600
We try to send down the data to it, which is what we're doing here.

512
00:23:25,300 --> 00:23:26,100
We bind,

513
00:23:27,500 --> 00:23:30,000
The texture and set the parameters for it like we did before we, then

514
00:23:30,000 --> 00:23:33,600
say, we're no longer a talk about that texture on this thread, and

515
00:23:33,600 --> 00:23:35,200
then we leave, right?

516
00:23:35,700 --> 00:23:37,100
And, and that's it.

517
00:23:37,300 --> 00:23:38,500
So that's our texture.

518
00:23:38,500 --> 00:23:40,900
Download in the background and hey, look, it actually worked.

519
00:23:42,000 --> 00:23:47,500
So, now in theory, we should have gotten ourselves potentially out of

520
00:23:47,500 --> 00:23:50,400
the situation where we have the stars in the fact we didn't, we did

521
00:23:50,400 --> 00:23:53,300
not have that frame stutter, which is pretty great.

522
00:23:53,300 --> 00:23:56,100
So now we're downloading our textures on a separate thread.

523
00:23:56,800 --> 00:23:59,800
And it's in that whole queuing system.

524
00:24:00,000 --> 00:24:03,100
Being kind of overlap with everything else we're doing now.

525
00:24:03,100 --> 00:24:04,700
Is it 100% efficient right now?

526
00:24:04,700 --> 00:24:06,700
Is it doing everything as best that it possibly could?

527
00:24:06,700 --> 00:24:09,700
I don't know we don't have really any visibility.

528
00:24:09,700 --> 00:24:12,000
We're not we don't have any GPU visibility right now.

529
00:24:12,000 --> 00:24:14,600
There's there's tools we can use to like visualize what the GPU is

530
00:24:14,600 --> 00:24:17,600
doing and when so we don't know very much about what's going on right

531
00:24:17,600 --> 00:24:22,100
now, but we do know that we're at least nominally having our

532
00:24:22,100 --> 00:24:25,500
architecture work properly in that, it's going to allow the driver to

533
00:24:25,500 --> 00:24:26,300
overlap those downloads.

534
00:24:26,300 --> 00:24:28,800
If the card can do it, which is what we wanted.

535
00:24:28,800 --> 00:24:29,900
So, that's

536
00:24:36,700 --> 00:24:37,100
Okay.

537
00:24:37,700 --> 00:24:40,000
So here is our game, right?

538
00:24:40,900 --> 00:24:44,500
And our game, of course, is now runs.

539
00:24:44,500 --> 00:24:45,200
Kind of a little bit.

540
00:24:45,200 --> 00:24:51,700
Ridiculously smoothly on Hardware, certainly, I guess what that means

541
00:24:52,100 --> 00:24:53,300
at the moment.

542
00:24:59,200 --> 00:25:02,200
Are we done with our Hardware acceleration?

543
00:25:06,400 --> 00:25:07,400
I think we might be.

544
00:25:08,200 --> 00:25:10,000
I mean that pretty much handles everything.

545
00:25:10,000 --> 00:25:13,400
We now have full asset streaming through the graphics, hardware, and

546
00:25:13,400 --> 00:25:15,800
all of our Sprites are rendered through the opengl path.

547
00:25:15,800 --> 00:25:19,900
Now, everything sorted correctly like we're pretty much good to go.

548
00:25:27,200 --> 00:25:29,400
I don't know, I think we might be.

549
00:25:30,400 --> 00:25:31,900
So yeah.

550
00:25:31,900 --> 00:25:35,600
Is that if that, I guess that might be it, there was one of the thing

551
00:25:35,600 --> 00:25:36,800
that we kind of wanted to do.

552
00:25:38,400 --> 00:25:43,500
Which is to set s RGB mode on the frame buffer and we didn't really

553
00:25:43,500 --> 00:25:44,900
have a chance to do that.

554
00:25:45,200 --> 00:25:49,600
So since I think that just kind of is it, I don't think there's

555
00:25:49,600 --> 00:25:51,300
anything else that we actually needed to do.

556
00:25:56,600 --> 00:25:59,500
I got 30 minutes left so I don't know what else to do.

557
00:25:59,500 --> 00:26:02,200
I mean I was planning on debugging the textures this whole time, but

558
00:26:02,200 --> 00:26:04,100
it turns out there was nothing to the bug.

559
00:26:07,100 --> 00:26:07,800
All right.

560
00:26:08,700 --> 00:26:14,800
Well, that was an unexpected gift from the gods of programming instead

561
00:26:14,800 --> 00:26:16,200
of bringing us a lump of coal.

562
00:26:17,500 --> 00:26:18,300
They yeah.

563
00:26:18,300 --> 00:26:20,200
Well all right you know what I'm gonna say anything about it.

564
00:26:20,200 --> 00:26:22,300
Who knows don't know why that happened?

565
00:26:22,500 --> 00:26:27,200
That's not how Graphics programming ever goes when you're working on

566
00:26:27,300 --> 00:26:30,000
Graphics drivers but I guess it just because well no it's a

567
00:26:30,000 --> 00:26:32,800
multi-threaded texture download it's really not that simple.

568
00:26:32,800 --> 00:26:34,400
Actually I don't know.

569
00:26:34,600 --> 00:26:36,700
I don't know how that ended up working all

570
00:26:37,000 --> 00:26:37,500
so,

571
00:26:38,800 --> 00:26:42,100
Just want to mention something to make it.

572
00:26:42,100 --> 00:26:45,400
Absolutely clear what's going on here as well because there's a very

573
00:26:45,400 --> 00:26:48,300
important thing that's underlying.

574
00:26:48,300 --> 00:26:51,600
What's going on that you may not be aware of that.

575
00:26:51,600 --> 00:26:53,000
You probably should be aware of.

576
00:26:54,300 --> 00:26:58,600
And what that is is that if you look at how we're doing our texture

577
00:26:58,600 --> 00:26:59,200
downloads,

578
00:27:00,200 --> 00:27:01,200
We're doing the texture.

579
00:27:01,200 --> 00:27:02,700
Download from a separate thread.

580
00:27:04,000 --> 00:27:04,300
Right?

581
00:27:04,300 --> 00:27:08,100
And so, inside handmade asset dot CPP.

582
00:27:08,600 --> 00:27:11,700
You know that the actual texture download is happening right here and

583
00:27:11,700 --> 00:27:12,800
this is a threaded function.

584
00:27:13,000 --> 00:27:17,000
So the worker thread, those low priority worker threads are actually,

585
00:27:17,000 --> 00:27:18,100
what's doing the download.

586
00:27:18,600 --> 00:27:23,000
Now when that happens, what that means is there is no synchronization

587
00:27:24,100 --> 00:27:28,500
between the this part of the code.

588
00:27:28,600 --> 00:27:32,700
This part that's actually doing the finalized asset, there's no

589
00:27:32,700 --> 00:27:33,600
synchronization.

590
00:27:33,800 --> 00:27:38,500
Between Matt and the rendering, okay?

591
00:27:38,600 --> 00:27:40,100
As far as opengl is concerned.

592
00:27:40,300 --> 00:27:43,700
Meaning as far as opengl is concerned when we are submitting that

593
00:27:43,700 --> 00:27:47,800
texture, that is a totally separate thing from when we're doing our

594
00:27:47,800 --> 00:27:48,200
drawing.

595
00:27:48,400 --> 00:27:53,200
So it will not attempt to serialize those operations for us at all.

596
00:27:53,800 --> 00:28:00,000
Okay, what that means is that there's nothing preventing the opengl

597
00:28:00,400 --> 00:28:02,900
from trying to render with a texture.

598
00:28:03,100 --> 00:28:03,400
That is

599
00:28:03,700 --> 00:28:05,300
Not yet finished downloading.

600
00:28:06,900 --> 00:28:08,300
So that can happen.

601
00:28:10,700 --> 00:28:15,300
In other words, if let's say we start a texture download and we don't

602
00:28:15,300 --> 00:28:16,900
finish by the time we actually need it.

603
00:28:17,600 --> 00:28:18,900
So it's like the cutscene.

604
00:28:19,200 --> 00:28:23,100
We don't quite get it loaded and sent to the GL in time.

605
00:28:24,500 --> 00:28:27,500
So we loaded up, we started sending and it hasn't transferred in time

606
00:28:28,400 --> 00:28:30,900
and then we actually get to the frame where we need it and we issue

607
00:28:30,900 --> 00:28:31,800
the render command.

608
00:28:32,900 --> 00:28:36,800
If those were on the same thread, meaning, if we were only using a

609
00:28:36,800 --> 00:28:43,400
single threaded opengl opengl would wait, and it wouldn't render until

610
00:28:43,400 --> 00:28:45,200
it finish downloading the texture.

611
00:28:47,600 --> 00:28:52,700
Since we are multi-threaded and have two separate context only

612
00:28:52,700 --> 00:28:57,400
operations on opengl which are in the same context are serialized.

613
00:28:58,000 --> 00:29:02,700
So it doesn't feel any particular need to serialize the download of

614
00:29:02,700 --> 00:29:05,200
that, texture with its use in the other thread.

615
00:29:07,000 --> 00:29:07,600
I think.

616
00:29:08,600 --> 00:29:10,000
I don't really remember this.

617
00:29:10,500 --> 00:29:14,700
What the specification says, it might be allowed to serialize them.

618
00:29:15,200 --> 00:29:19,500
Meaning it could decide to do that, but it's not required to do that.

619
00:29:20,300 --> 00:29:23,700
What that means is that we may just draw garbage on the screen,

620
00:29:23,900 --> 00:29:26,400
essentially, if the texture hasn't gotten there in time,

621
00:29:28,500 --> 00:29:33,200
I would prefer to leave it that way and just try to make it so that

622
00:29:33,200 --> 00:29:37,100
our code is always enough ahead that we don't get ourselves in a

623
00:29:37,100 --> 00:29:39,000
situation where we're rendering something.

624
00:29:39,000 --> 00:29:43,100
We haven't loaded because the only thing that we could do in that

625
00:29:43,100 --> 00:29:46,400
situation really is either render the wrong thing.

626
00:29:46,400 --> 00:29:48,900
Like, try to substitute some other bitmap in which is going to be

627
00:29:48,900 --> 00:29:53,900
wrong or pause the frame creating a hiccup, right?

628
00:29:53,900 --> 00:29:57,400
Wait till the actual thing goes and neither of those.

629
00:29:57,500 --> 00:29:58,400
Those are good, right?

630
00:29:58,400 --> 00:29:59,800
What we want to do is always run at 60.

631
00:30:00,100 --> 00:30:01,600
60 frames a second.

632
00:30:02,400 --> 00:30:06,900
Always have no load screens and always have the right bitmaps.

633
00:30:07,200 --> 00:30:08,500
So that's our goal.

634
00:30:08,700 --> 00:30:12,300
And if we have to give up one of those, I think I would rather just

635
00:30:12,300 --> 00:30:13,500
have it not draw anything.

636
00:30:13,500 --> 00:30:16,700
Like the drawing is just garbage or missing or old data, whatever have

637
00:30:16,700 --> 00:30:17,600
a little glitch.

638
00:30:17,800 --> 00:30:22,100
I think I'd rather have a little glitch, then a frame rate hiccup.

639
00:30:22,200 --> 00:30:27,400
Like I'd rather someone sees a little glitch then stutter because it's

640
00:30:27,400 --> 00:30:29,800
if an action game, I want it to always be 64 as I do.

641
00:30:30,000 --> 00:30:31,300
I want that kitchen there now.

642
00:30:31,400 --> 00:30:34,600
Really we don't want anything, so our goal, the whole time is going to

643
00:30:34,600 --> 00:30:39,000
make it so that it's incredibly rare that we ever Miss forecast, so

644
00:30:39,000 --> 00:30:41,400
badly that we can't pull those things in.

645
00:30:42,400 --> 00:30:43,100
In time.

646
00:30:43,300 --> 00:30:45,800
So, our goal is never have any of those things happen.

647
00:30:45,900 --> 00:30:48,900
But if we had to give one up, I don't think I want it fenced.

648
00:30:49,000 --> 00:30:53,100
I would rather still hit 60 hertz and just have a drawing bug.

649
00:30:54,000 --> 00:30:58,700
Then have no drawing bug and drop to 30 or 15 frames a second for that

650
00:30:58,700 --> 00:31:02,000
little period where it had to wait to catch up, right?

651
00:31:02,300 --> 00:31:03,900
That's just my opinion.

652
00:31:05,600 --> 00:31:08,600
And you know, if you want to make a different decision, I'm not trying

653
00:31:08,600 --> 00:31:08,900
to tell you.

654
00:31:08,900 --> 00:31:09,900
That's the right way to go.

655
00:31:10,100 --> 00:31:12,000
I'm trying to tell you that you have to pick one.

656
00:31:12,200 --> 00:31:13,800
You have to pick some way to fail.

657
00:31:14,400 --> 00:31:17,000
And so when you're going to pick that way to fail, pick the one that

658
00:31:17,000 --> 00:31:20,600
you want, but understand what the trade-offs are and what's actually

659
00:31:20,600 --> 00:31:21,600
happening there, right?

660
00:31:23,400 --> 00:31:27,200
If we wanted to design a more sophisticated system, we could do

661
00:31:27,200 --> 00:31:31,400
something where we try to swap in other assets, that are closer to

662
00:31:31,400 --> 00:31:34,600
what it is to minimize the amount of the graphical glitch, but it's

663
00:31:34,600 --> 00:31:37,300
just a bunch of work and you still don't really quite fix the problem.

664
00:31:37,300 --> 00:31:42,000
So unless you really do, I mean, a good example of this would be

665
00:31:42,100 --> 00:31:44,400
Be rage like ID software is Rage.

666
00:31:45,000 --> 00:31:48,000
I mean, that's an example of a system that tries to use lower detail

667
00:31:48,000 --> 00:31:50,800
textures when it hasn't page in the text, you need people still

668
00:31:50,800 --> 00:31:52,500
thought it was super glitchy, right?

669
00:31:52,900 --> 00:31:56,000
So you know the degree to which you can really ever solve.

670
00:31:56,000 --> 00:31:58,800
The problem is is unclear, if that makes sense.

671
00:31:59,400 --> 00:32:02,600
So really our best bet is just going to be like, hey, let's always try

672
00:32:02,600 --> 00:32:07,200
to be really out in front with the streaming and the prediction and,

673
00:32:07,300 --> 00:32:09,300
and try to make sure that we're just always on time.

674
00:32:09,300 --> 00:32:10,500
So we just never have that problem.

675
00:32:14,800 --> 00:32:18,900
And also you know, it makes Gamers feel good be like yeah you got to

676
00:32:18,900 --> 00:32:20,100
have an SSD to play this.

677
00:32:20,100 --> 00:32:22,500
You have got to have a sweet gaming rig to play this game, man.

678
00:32:23,000 --> 00:32:24,900
You're going to get, you're going to get graphic glitches.

679
00:32:24,900 --> 00:32:28,400
If you have a hard drive, hard drives like to to Old School, although

680
00:32:28,400 --> 00:32:31,100
this machine has a hard drives but that's beside the point.

681
00:32:31,300 --> 00:32:35,600
Anyway, point being that's pretty much all I wanted to do with the

682
00:32:35,600 --> 00:32:37,900
texture streaming and maybe we'll revisit some of it later if there's

683
00:32:37,900 --> 00:32:38,700
anything else you want to do.

684
00:32:38,700 --> 00:32:40,100
But I that's basically it.

685
00:32:40,500 --> 00:32:43,400
So I think the only thing that we're not doing now is we're not

686
00:32:44,000 --> 00:32:46,700
Don't actually have srgb support on the frame buffer.

687
00:32:47,300 --> 00:32:55,000
We are enabling srgb rights to the frame buffer back in here

688
00:32:55,000 --> 00:32:55,600
somewhere.

689
00:32:55,900 --> 00:32:57,000
I don't remember where

690
00:33:00,000 --> 00:33:00,800
Yeah.

691
00:33:01,700 --> 00:33:02,600
Yeah.

692
00:33:03,000 --> 00:33:07,800
I don't actually know where that is but I know that we were somewhere.

693
00:33:08,800 --> 00:33:10,200
Maybe it's over here.

694
00:33:16,600 --> 00:33:18,400
Let's see.

695
00:33:19,300 --> 00:33:22,100
I don't care about any that code that is not.

696
00:33:22,100 --> 00:33:23,800
We're talking about this is what we're talking about.

697
00:33:23,800 --> 00:33:28,500
So this right here, this GL and able g l frame, buffer, srgb.

698
00:33:31,600 --> 00:33:37,000
Tells the GL to do those operations like we were doing in our software

699
00:33:37,000 --> 00:33:37,700
rasterizer.

700
00:33:37,700 --> 00:33:40,000
I hope you all remember this, the whole reason we did the software

701
00:33:40,000 --> 00:33:42,100
rasterizer, if you remember because I didn't think it was gonna be

702
00:33:42,100 --> 00:33:44,800
fast enough to run the game, but turns out it was probably but with

703
00:33:44,800 --> 00:33:48,500
some point was to learn about gravity our stuff.

704
00:33:48,800 --> 00:33:51,200
So if you remember we wrote the software rasterizer.

705
00:33:51,200 --> 00:33:55,800
Remember there's two places where we did like gamma correction which

706
00:33:55,800 --> 00:33:56,900
is the srgb thing.

707
00:33:57,800 --> 00:34:01,200
One place was in the textures, so we read out of the texture, we

708
00:34:01,200 --> 00:34:06,200
convert the textures, srgb to linear light by performing that mapping

709
00:34:06,400 --> 00:34:07,000
on load.

710
00:34:07,000 --> 00:34:11,500
So we load in the texture, convert it from srgb to linear, but the

711
00:34:11,500 --> 00:34:13,600
other place we did, it was the frame buffer.

712
00:34:13,800 --> 00:34:17,900
So, when we were loading a frame buffer pixel to blend with a pixel

713
00:34:18,000 --> 00:34:19,000
that were drawing.

714
00:34:19,500 --> 00:34:25,500
We also had to convert that from srgb to linear.

715
00:34:26,100 --> 00:34:27,300
Now the degree to

716
00:34:27,300 --> 00:34:32,100
Which that matters is like almost none because it's really only for

717
00:34:32,100 --> 00:34:35,199
super translucent things that were even going to know or just like

718
00:34:35,199 --> 00:34:38,000
around the edges of things where there's like the alpha values.

719
00:34:38,000 --> 00:34:38,500
Right?

720
00:34:38,500 --> 00:34:44,600
Because normally we don't actually see what was in the frame buffer

721
00:34:44,600 --> 00:34:47,500
because things stack up on top of each other and we only see the last

722
00:34:47,500 --> 00:34:47,600
one.

723
00:34:47,600 --> 00:34:50,400
And that last one was coming from a texture read.

724
00:34:50,400 --> 00:34:54,400
But if it happened to be transparent or it happens to be right around

725
00:34:54,400 --> 00:34:57,300
the edges, then we are seeing a little bit of

726
00:34:57,400 --> 00:35:02,100
What's underneath and that blend operation is wrong if we don't gamma

727
00:35:02,400 --> 00:35:03,600
correct.

728
00:35:04,100 --> 00:35:07,700
The thing we pull in again very, very subtle.

729
00:35:07,800 --> 00:35:09,100
No one will ever know.

730
00:35:09,800 --> 00:35:12,500
But it's a good sort of technique to kind of understand.

731
00:35:12,500 --> 00:35:15,800
Because in the future, if you know, you're someone who follows

732
00:35:15,800 --> 00:35:19,200
handmade hero and your goal is to do a 3D engine one day.

733
00:35:19,700 --> 00:35:20,700
A lot of the stuff we do in.

734
00:35:20,700 --> 00:35:24,100
Handmade here are kind of translates over but you kind of have to do a

735
00:35:24,100 --> 00:35:27,100
much more complicated Graphics layer, right?

736
00:35:27,400 --> 00:35:34,500
Um, that that that technique of knowing when gamma correction has to

737
00:35:34,500 --> 00:35:37,500
be applied, becomes much more important when you're trying to do

738
00:35:37,500 --> 00:35:40,300
things like multiple light passes that have to combine with each other

739
00:35:40,300 --> 00:35:42,700
properly, things like that.

740
00:35:42,900 --> 00:35:44,900
And for all we know we might add in some.

741
00:35:45,000 --> 00:35:47,800
Let when we do a little more with lighting, we may add in some things

742
00:35:47,800 --> 00:35:51,500
that also have that that characteristic.

743
00:35:51,500 --> 00:35:54,200
And at that point again, it becomes a little more important.

744
00:35:54,400 --> 00:35:57,200
So what we want to do here is try to figure out a way to tell

745
00:35:57,300 --> 00:35:59,900
tell opengl that, hey, I

746
00:36:00,000 --> 00:36:01,700
We enabled frame buffer rights here.

747
00:36:01,700 --> 00:36:05,000
If the frame buffer is in Sr is is an srgb frame buffer.

748
00:36:05,600 --> 00:36:10,200
Unfortunately we have not yet told it that the frame buffer that we're

749
00:36:10,200 --> 00:36:11,100
drawing to on the window.

750
00:36:11,100 --> 00:36:12,400
Should be srgb.

751
00:36:12,700 --> 00:36:17,400
Okay, now you might ask, why are there two separate enables for this

752
00:36:17,400 --> 00:36:17,800
thing?

753
00:36:18,900 --> 00:36:23,300
And the reason is because open just a little wonky, this way, opengl

754
00:36:23,300 --> 00:36:29,300
tends to set State on both the objects that exist in the system and

755
00:36:30,000 --> 00:36:31,100
the system itself.

756
00:36:31,700 --> 00:36:35,600
So basically what happens is, if you have a texture, there's typically

757
00:36:35,600 --> 00:36:40,200
two ways you can set how that texture is sampled one way is on the

758
00:36:40,200 --> 00:36:40,800
texture.

759
00:36:41,600 --> 00:36:45,300
And another way is in the actual like blood, like in the actual

760
00:36:45,300 --> 00:36:46,800
shading code, right?

761
00:36:47,000 --> 00:36:51,800
Or the actual shading setup and those two things typically combined to

762
00:36:51,800 --> 00:36:54,400
produce how something is actually sampled.

763
00:36:54,500 --> 00:36:58,300
Now, in our case, it may seem odd for the frame buffer to have two

764
00:36:58,300 --> 00:36:59,800
ways of setting it one on the frame.

765
00:37:00,000 --> 00:37:00,500
For itself.

766
00:37:00,500 --> 00:37:03,700
And one in the GL, it's sort of shading enables.

767
00:37:05,100 --> 00:37:09,500
But the reason for that is in opengl, you can create multiple frame

768
00:37:09,500 --> 00:37:09,900
buffers.

769
00:37:09,900 --> 00:37:12,700
Like we could create back buffers to draw to that we use as

770
00:37:12,700 --> 00:37:14,100
Temporaries or something like this.

771
00:37:14,100 --> 00:37:17,500
Write it as part of a more complicated render pass where we might

772
00:37:17,500 --> 00:37:20,500
render multiple passes and then recombine them or something like that

773
00:37:20,600 --> 00:37:21,800
into the final image.

774
00:37:22,600 --> 00:37:25,300
And so what they wanted to do with opengl design is make it.

775
00:37:25,300 --> 00:37:29,700
So you could set some of those frame buffers as are srgb and some of

776
00:37:29,700 --> 00:37:34,400
them as linear and then when you bound a frame buffer to draw too,

777
00:37:35,200 --> 00:37:40,400
If GL frame before srgb, rendering is on, then if the frame buffer is

778
00:37:40,400 --> 00:37:44,300
srgb, will use that if it's not it won't, right?

779
00:37:44,900 --> 00:37:46,800
And so it allows you to kind of mix and match.

780
00:37:46,800 --> 00:37:48,000
I don't care for that design.

781
00:37:48,100 --> 00:37:50,900
I don't think it's good but that's what it is.

782
00:37:51,200 --> 00:37:53,000
And it's not like a totally stupid design.

783
00:37:53,000 --> 00:37:56,500
If there is a logic behind it, it's just not what I would have done.

784
00:37:57,200 --> 00:37:59,500
So anyway, so that's why we have to enable it in two different places.

785
00:37:59,500 --> 00:38:03,900
We have to enable it once to say hey do srgb, be blending.

786
00:38:04,400 --> 00:38:04,800
If you

787
00:38:05,000 --> 00:38:09,100
Happened to see an srgb frame buffer and then the other side is we

788
00:38:09,100 --> 00:38:12,000
actually have to get that srgb frame buffer so that when it looks at

789
00:38:12,000 --> 00:38:15,200
the frame buffer that we happen to be using and it says oh I mean

790
00:38:15,200 --> 00:38:17,900
that's RGB mode is this something I should use srgb on?

791
00:38:18,100 --> 00:38:19,700
It actually goes, yes it is.

792
00:38:20,900 --> 00:38:22,600
So that's what we want to do here.

793
00:38:22,600 --> 00:38:26,500
Now in a perfect world, all we would have to do is right here with PFD

794
00:38:26,500 --> 00:38:31,900
support opengl or PFD type srgb, A or something, we be able to just

795
00:38:31,900 --> 00:38:34,000
set srgb and be done.

796
00:38:34,300 --> 00:38:34,700
That would be

797
00:38:34,900 --> 00:38:35,200
eight.

798
00:38:38,600 --> 00:38:41,400
Unfortunately, not going to happen.

799
00:38:42,300 --> 00:38:46,400
What actually happened is all of the stuff that you might want to do

800
00:38:46,400 --> 00:38:49,000
to frame buffers that happened after opengl.

801
00:38:49,000 --> 00:38:54,000
One point x in wiggle, was actually implemented as an extended version

802
00:38:54,400 --> 00:38:57,200
of this whole choose pixel format.

803
00:38:57,300 --> 00:38:59,800
Like, you know, this whole thing

804
00:39:00,300 --> 00:39:02,800
This thing where we do the choose pixel, describe pixel steps weren't

805
00:39:03,000 --> 00:39:03,600
that stuff.

806
00:39:03,600 --> 00:39:07,300
Actually got extended versions and it's in those extended versions,

807
00:39:07,700 --> 00:39:09,200
were all of this takes place.

808
00:39:09,400 --> 00:39:13,500
So what we need to do is go look at yet another extended situation

809
00:39:13,500 --> 00:39:13,900
here.

810
00:39:16,600 --> 00:39:18,600
So here's we will choose pixel format ARB.

811
00:39:18,600 --> 00:39:22,000
For example, this sport format.

812
00:39:22,100 --> 00:39:27,000
Sorry this extension provides the functions that actually allow us to

813
00:39:27,000 --> 00:39:29,800
use any of the more modern features of

814
00:39:30,100 --> 00:39:31,200
Of a back.

815
00:39:31,200 --> 00:39:32,400
Buffer, a frame back buffer.

816
00:39:33,500 --> 00:39:37,100
So you can kind of see that it's basically just a whole nother

817
00:39:37,100 --> 00:39:40,300
specification that specifies almost literally exactly the same

818
00:39:40,300 --> 00:39:44,500
functions but now with like some additional sort of stuff in them,

819
00:39:44,800 --> 00:39:45,400
right?

820
00:39:46,100 --> 00:39:48,200
So this is what we would have to implement to do that.

821
00:39:48,200 --> 00:39:50,700
And what you can see here is we have, for example,

822
00:39:52,500 --> 00:39:57,300
This get pixel format and choose pixel format, those are basically

823
00:39:57,300 --> 00:39:59,600
analogous to these things that we're doing here.

824
00:39:59,600 --> 00:40:02,500
So the, the choose pixel format will replace this call with the

825
00:40:02,500 --> 00:40:04,100
extended choose pixel format.

826
00:40:04,200 --> 00:40:07,000
And then we've got this describe pixel format and we would replace

827
00:40:07,000 --> 00:40:10,200
that call with the describe physical format one, right?

828
00:40:10,200 --> 00:40:16,500
So hopefully that makes some sense you know, hopefully that that makes

829
00:40:16,500 --> 00:40:17,700
them some reasonable sense to you.

830
00:40:18,300 --> 00:40:18,900
All right?

831
00:40:19,000 --> 00:40:21,500
So that's what we actually need to do.

832
00:40:23,200 --> 00:40:27,000
And as far as I know, I guess.

833
00:40:27,000 --> 00:40:28,100
I'm not sure.

834
00:40:28,400 --> 00:40:29,200
Let's take a look here.

835
00:40:31,800 --> 00:40:33,000
I don't think.

836
00:40:36,200 --> 00:40:40,600
Yeah, I don't I don't actually know if we ever actually have to

837
00:40:40,900 --> 00:40:45,600
replace set pixel format I think we can just still use the same call

838
00:40:45,600 --> 00:40:47,000
to set pixel format.

839
00:40:47,600 --> 00:40:51,000
I think it's only the choose and describe that are the ones that we

840
00:40:51,000 --> 00:40:55,200
actually have to replace I believe because set pixel format still just

841
00:40:55,200 --> 00:40:58,600
takes an integer and I think it just takes the integer that comes back

842
00:40:58,600 --> 00:40:59,400
from one of these.

843
00:40:59,600 --> 00:41:00,800
So when we call

844
00:41:03,800 --> 00:41:05,800
When we call these functions, I think it's still just works.

845
00:41:05,900 --> 00:41:12,600
So let's take a look at what it says here and we'll see, doodoo will

846
00:41:12,600 --> 00:41:15,100
uses pixel form Inc.'s, refer to pixel formats Centre.

847
00:41:15,100 --> 00:41:18,000
Pixel format function, is described as towards Bob, La Follette types,

848
00:41:18,000 --> 00:41:20,800
of formats, using piss-poor description, layer table and just a set of

849
00:41:20,800 --> 00:41:23,600
functions may be used to Korean spices for My Tattoos, by name

850
00:41:23,900 --> 00:41:27,300
grateful, for my attributes, find two functions can be used and and

851
00:41:27,300 --> 00:41:28,700
here they are right?

852
00:41:29,400 --> 00:41:33,000
So then we can do our what attributes we want and they can be done by

853
00:41:33,000 --> 00:41:33,300
name.

854
00:41:33,500 --> 00:41:35,200
I think that's what we need.

855
00:41:37,700 --> 00:41:41,100
So, I think that's what we should do now, granted, I may be wrong

856
00:41:41,100 --> 00:41:41,800
about this.

857
00:41:41,900 --> 00:41:46,300
You may not have to go this whole route, but I'm pretty sure you do

858
00:41:47,500 --> 00:41:50,600
choose to before it will never s of formats from either group 2 or 4

859
00:41:50,600 --> 00:41:53,300
2, x 0, plus 1, star displayable, which have sent attributes.

860
00:41:55,000 --> 00:41:56,400
Let's see.

861
00:41:56,400 --> 00:41:57,500
We don't care about any of that stuff.

862
00:41:57,500 --> 00:41:58,200
I don't think.

863
00:41:59,600 --> 00:41:59,800
Yeah.

864
00:42:01,000 --> 00:42:02,000
So, that's what we need to do.

865
00:42:04,900 --> 00:42:05,700
So let's do it.

866
00:42:05,900 --> 00:42:07,100
So here's our functions.

867
00:42:07,400 --> 00:42:10,000
We have, we will get pixel format at Rib.

868
00:42:10,100 --> 00:42:12,900
Well, there's two of them, there's two different kinds, right?

869
00:42:13,100 --> 00:42:15,800
If you look at the actual functions here, they basically gave us two

870
00:42:15,800 --> 00:42:17,700
pixel format things.

871
00:42:17,900 --> 00:42:23,600
And there's F&I and so, there's float, right?

872
00:42:24,200 --> 00:42:26,100
And there's n t, if that makes sense.

873
00:42:32,600 --> 00:42:34,700
I'm not sure what we would need float for.

874
00:42:36,600 --> 00:42:41,500
It seems a little bit crazy but yeah, we've got a.

875
00:42:41,500 --> 00:42:46,000
Let's see if this actually has the srgb stuff that we need, let's see

876
00:42:46,100 --> 00:42:47,400
pixel type ARB.

877
00:42:47,500 --> 00:42:50,400
So wiggle pixel type ARB is probably what we actually need there.

878
00:42:50,400 --> 00:42:51,000
Right?

879
00:42:52,300 --> 00:42:53,000
Let's see here.

880
00:42:53,500 --> 00:42:56,300
Wiggle wiggle.

881
00:42:59,100 --> 00:43:02,000
We're just a big old pixel type actually know where it is.

882
00:43:04,000 --> 00:43:05,600
Type herb.

883
00:43:08,100 --> 00:43:08,600
There it is.

884
00:43:11,000 --> 00:43:13,300
So that's not quite it, that's not necessarily be.

885
00:43:16,900 --> 00:43:20,300
So this doesn't look like it actually has the one we want to me.

886
00:43:21,800 --> 00:43:24,800
I mean it should have unless we it well unless it just uses a

887
00:43:24,800 --> 00:43:25,500
standard.

888
00:43:27,300 --> 00:43:30,200
It might just use a standard identifier from different part of the

889
00:43:30,200 --> 00:43:36,000
spec and still be in here so that I don't actually know that I'm not

890
00:43:36,000 --> 00:43:36,800
sure about.

891
00:43:36,800 --> 00:43:38,300
So let's actually take a look here.

892
00:43:45,800 --> 00:43:47,000
Let's take a look.

893
00:43:50,500 --> 00:43:54,100
So this I don't think well there you go.

894
00:43:54,700 --> 00:43:58,500
Accepted by the atrabilious parameter of Jill, excuse visible and she

895
00:43:58,500 --> 00:43:59,500
likes, get config.

896
00:43:59,500 --> 00:44:03,600
That's the X version and accepted by the pi attributes parameter of

897
00:44:03,600 --> 00:44:06,900
will get pixel format, a trip IV, EXT and wiggle, get picked.

898
00:44:06,900 --> 00:44:13,300
So those are that would suggest that we do call those and just you

899
00:44:13,300 --> 00:44:17,900
also in addition to that one have to have our frame buffer srgb

900
00:44:18,500 --> 00:44:20,200
available in order to

901
00:44:20,300 --> 00:44:22,500
Actually do this, right?

902
00:44:23,200 --> 00:44:27,500
So we actually need this wiggle frame before srgb capable ARB, and we

903
00:44:27,500 --> 00:44:30,100
need to pass that into

904
00:44:32,300 --> 00:44:33,400
To the function, we did it.

905
00:44:33,700 --> 00:44:37,400
So I believe that is the that's the whole thing that will have to do.

906
00:44:37,400 --> 00:44:41,600
Unfortunately, and so let's just give it a shot, let's just see.

907
00:44:41,600 --> 00:44:45,500
So here is our functions that were actually going to need, and I'm

908
00:44:45,500 --> 00:44:48,100
going to go ahead up and end up.

909
00:44:48,100 --> 00:44:49,500
Put those into our opengl.

910
00:44:50,300 --> 00:44:51,000
Let's see here.

911
00:44:52,200 --> 00:44:53,900
Let's see here.

912
00:44:57,700 --> 00:44:58,500
Handmade.

913
00:45:02,200 --> 00:45:05,800
And here are our.

914
00:45:08,400 --> 00:45:09,100
We go calls.

915
00:45:10,200 --> 00:45:13,600
So we've got type 2 pool and we've got wiggle.

916
00:45:13,600 --> 00:45:17,000
Get pixel format.

917
00:45:17,300 --> 00:45:18,500
That's one heck of a name.

918
00:45:19,200 --> 00:45:22,000
Ivy ARB

919
00:45:23,900 --> 00:45:27,300
And that is that function got one of these guys.

920
00:45:41,000 --> 00:45:43,100
And last but not least.

921
00:45:51,000 --> 00:45:51,500
There we go.

922
00:45:52,500 --> 00:45:53,400
So that's

923
00:45:55,200 --> 00:45:58,100
The functions were actually going to need oops forgot to win API and

924
00:45:58,100 --> 00:46:00,200
that guy for wiggle.

925
00:46:00,800 --> 00:46:05,400
And we have to get all of those the same way we got.

926
00:46:05,500 --> 00:46:07,100
We got these guys, right?

927
00:46:07,500 --> 00:46:07,800
I don't know.

928
00:46:07,800 --> 00:46:09,500
Why is that the trip?

929
00:46:09,500 --> 00:46:11,900
TS is that supposed to be a tea?

930
00:46:13,000 --> 00:46:14,000
I don't think it would be.

931
00:46:14,400 --> 00:46:16,400
Do you attribute ESR?

932
00:46:17,300 --> 00:46:18,100
That seems wrong?

933
00:46:19,100 --> 00:46:20,100
Where is that defined?

934
00:46:20,100 --> 00:46:24,200
By the way, is that to find it in win32, handmade?

935
00:46:25,800 --> 00:46:26,800
For an opengl.

936
00:46:29,200 --> 00:46:30,400
I don't know where that's defined.

937
00:46:32,700 --> 00:46:34,500
Just you see what I'm talking about.

938
00:46:36,000 --> 00:46:37,600
We're gonna create oh it's right there.

939
00:46:37,700 --> 00:46:38,100
Duh.

940
00:46:38,500 --> 00:46:40,200
Yes, I think that's just a typo.

941
00:46:40,400 --> 00:46:41,500
That's just a bad type of.

942
00:46:42,000 --> 00:46:43,500
So here's our other wiggle guys.

943
00:46:44,100 --> 00:46:45,800
So I'm going to go ahead and get those guys in here.

944
00:46:45,800 --> 00:46:50,200
So Global variable wiggle, get pixel.

945
00:46:50,200 --> 00:46:52,600
Format at Rib IV ARB.

946
00:46:53,000 --> 00:46:53,400
We're go.

947
00:46:53,400 --> 00:47:00,800
Get pixel format rib IV ARB we've got Global variable, wiggled, get

948
00:47:01,700 --> 00:47:04,800
pixel format at Rib, fer

949
00:47:05,900 --> 00:47:09,400
Pixel format rib, FB ARB.

950
00:47:10,100 --> 00:47:14,900
And finally, we're gonna choose pixel format ARB.

951
00:47:19,800 --> 00:47:23,900
And all of those folks need to get loaded as extensions.

952
00:47:24,400 --> 00:47:28,000
So when we do a wiggle, get proc address right here.

953
00:47:29,500 --> 00:47:34,300
And we load those guys in we then are going to want to do sort of that

954
00:47:34,600 --> 00:47:38,900
that elevated that elevated querying, right?

955
00:47:39,900 --> 00:47:43,400
So I guess actually no that's not true.

956
00:47:43,500 --> 00:47:48,200
We kind of have to do that really way back at the beginning, right?

957
00:47:48,700 --> 00:47:51,600
Because we need to actually do that before we do the pixel format

958
00:47:51,600 --> 00:47:52,500
choosing stuff.

959
00:47:52,800 --> 00:47:56,200
So in theory, I think we would have to do it here.

960
00:47:56,400 --> 00:47:57,800
Like we'd have to do it right?

961
00:47:57,800 --> 00:47:58,500
Right away.

962
00:47:59,500 --> 00:47:59,800
And I see.

963
00:48:00,000 --> 00:48:01,100
Goes to some extent.

964
00:48:01,100 --> 00:48:03,700
We don't need this big Global actually, right?

965
00:48:03,800 --> 00:48:05,700
Because we're only going to ever use them.

966
00:48:07,900 --> 00:48:11,300
Like we don't actually need these to be to remain around because we're

967
00:48:11,300 --> 00:48:16,300
only going to actually use them just at one time during their during

968
00:48:16,300 --> 00:48:17,800
that, that process.

969
00:48:18,100 --> 00:48:21,500
So I think and I'm not quite certain about that.

970
00:48:22,100 --> 00:48:26,000
But I believe we, since these are wiggle calls, we should be able to

971
00:48:26,000 --> 00:48:29,800
get them even though we don't have a context yet, right?

972
00:48:30,000 --> 00:48:32,800
At least that's my guest, don't quote me on that, but that's what I

973
00:48:32,800 --> 00:48:33,300
think.

974
00:48:33,600 --> 00:48:36,500
So I'm going to first see whether we can get any of these.

975
00:48:37,800 --> 00:48:42,300
Ins and if we can, then I think we're good to go if we can't then you

976
00:48:42,300 --> 00:48:43,200
know what you going to do.

977
00:48:45,700 --> 00:48:47,000
So let's go ahead and do that.

978
00:48:59,900 --> 00:49:00,300
Okay.

979
00:49:02,100 --> 00:49:02,600
We go.

980
00:49:04,100 --> 00:49:08,000
And so each of these is literally just going to be exactly the same as

981
00:49:08,000 --> 00:49:11,600
what we did before which is just to say that this is just going to be

982
00:49:11,600 --> 00:49:11,900
a wiggle.

983
00:49:11,900 --> 00:49:15,700
Get crock address and we just pass it.

984
00:49:15,700 --> 00:49:17,700
The name of the thing that we're trying to get, right?

985
00:49:17,800 --> 00:49:20,600
So it's exactly the same as this thing down here, right?

986
00:49:20,600 --> 00:49:21,200
Exactly.

987
00:49:21,200 --> 00:49:23,500
They're all, they're all just that same exact thing.

988
00:49:24,300 --> 00:49:31,300
So we go get proc address and it'll get

989
00:49:35,500 --> 00:49:37,900
So let's just see if that's at all.

990
00:49:37,900 --> 00:49:38,700
Correct.

991
00:49:39,100 --> 00:49:41,800
It's like, that's why wasn't this indented did?

992
00:49:41,800 --> 00:49:43,500
I accidentally leave something open?

993
00:49:44,800 --> 00:49:45,500
I don't think so.

994
00:49:51,000 --> 00:49:53,000
I think I may have confused for a coder.

995
00:49:53,300 --> 00:49:54,600
Did I or maybe not?

996
00:49:55,700 --> 00:49:59,500
Maybe I actually maybe I've got something that wasn't supposed to be

997
00:49:59,500 --> 00:49:59,800
there.

998
00:50:01,300 --> 00:50:02,700
So 561.

999
00:50:06,700 --> 00:50:09,600
Nope, looks like that was fine was just that think we changed.

1000
00:50:10,300 --> 00:50:16,500
So let's go into win32 in it, open GL there and let's see what what I

1001
00:50:16,500 --> 00:50:20,000
guess we could do here is we can now know if we got all of these

1002
00:50:21,600 --> 00:50:24,200
yeah, I think for coder is now confused indentation wise

1003
00:50:25,300 --> 00:50:27,100
Think don't quote me on that.

1004
00:50:27,500 --> 00:50:30,900
I know Alan was working on the lexer today, so I assume that means

1005
00:50:30,900 --> 00:50:34,000
that the lexer is far from from ready to go.

1006
00:50:34,800 --> 00:50:38,300
So it's surprising actually that we had, we don't hit we don't really

1007
00:50:38,300 --> 00:50:43,100
hit much in the way of bugs with it yet which I guess it's great.

1008
00:50:43,100 --> 00:50:48,900
But anyway, so if we get all these guys then we know that we're good

1009
00:50:48,900 --> 00:50:49,300
to go.

1010
00:50:49,300 --> 00:50:50,000
I think

1011
00:50:52,600 --> 00:50:55,200
And we should be able to actually make this thing.

1012
00:50:55,500 --> 00:50:56,900
Do you know what we need to do?

1013
00:50:57,200 --> 00:50:57,700
So

1014
00:51:00,000 --> 00:51:03,300
Is the code that actually check to see if we can get, these will use

1015
00:51:03,300 --> 00:51:07,200
the path where we call set, pixel format sort of the old school way,

1016
00:51:07,500 --> 00:51:08,600
and then I guess it will do.

1017
00:51:08,600 --> 00:51:14,600
Here is just say, oh, let's see here.

1018
00:51:20,200 --> 00:51:25,300
Yeah, so what we can do is say, well, we're going to call set pixel

1019
00:51:25,300 --> 00:51:26,400
format either way.

1020
00:51:26,600 --> 00:51:27,500
So we'll just have two.

1021
00:51:27,500 --> 00:51:34,200
Branches will have one which is going to use the old format because

1022
00:51:34,200 --> 00:51:36,700
hey if it doesn't support srgb, rented, the frame buffer.

1023
00:51:36,700 --> 00:51:41,200
We don't really care like it's only a Minor error to not have that.

1024
00:51:41,200 --> 00:51:43,900
So we don't want to like cause the whole game to like not be able to

1025
00:51:43,900 --> 00:51:46,700
run just because like that thing wasn't found seems like a poor

1026
00:51:46,700 --> 00:51:47,200
choice.

1027
00:51:48,200 --> 00:51:48,600
So

1028
00:51:48,900 --> 00:51:50,400
We should probably still make it work.

1029
00:51:50,500 --> 00:51:51,000
Right?

1030
00:51:51,300 --> 00:51:54,800
So what I'd like to do is say, okay, if we do have the extended

1031
00:51:54,800 --> 00:51:55,400
versions,

1032
00:51:57,900 --> 00:52:01,100
Then we'll use them if we don't end the extended versions, then forget

1033
00:52:01,100 --> 00:52:03,000
it, just just don't worry about it.

1034
00:52:06,100 --> 00:52:07,100
Use the old way.

1035
00:52:08,800 --> 00:52:14,000
And so when we have, I guess describe pixel format, we can also call

1036
00:52:14,000 --> 00:52:16,500
that back in actually remained as well, right?

1037
00:52:16,600 --> 00:52:18,300
So, it's literally just

1038
00:52:19,300 --> 00:52:20,900
This part here, I think.

1039
00:52:25,500 --> 00:52:27,800
so if we did this, where we just said, okay,

1040
00:52:29,400 --> 00:52:30,500
Here's one path.

1041
00:52:30,600 --> 00:52:34,300
And then now we've got another path which will also do.

1042
00:52:34,300 --> 00:52:35,300
You know the hole?

1043
00:52:36,700 --> 00:52:39,900
Pixel format selecting thing, but it will do it the other way.

1044
00:52:40,600 --> 00:52:42,300
Let's see if we can make that work.

1045
00:52:42,900 --> 00:52:44,200
So I'm going to try calling.

1046
00:52:44,200 --> 00:52:47,300
I think we want wiggle, get format, a trip.

1047
00:52:47,300 --> 00:52:47,900
Ivr.

1048
00:52:47,900 --> 00:52:50,900
I don't understand why there's a float in an inversion.

1049
00:52:51,200 --> 00:52:54,500
I because you need to pass all the parameters to one of the versions.

1050
00:52:54,700 --> 00:52:57,000
So I kind of probably need to look at the Docks little bit on that

1051
00:52:57,000 --> 00:52:59,100
figure, what's going on there because I'll be honest, that doesn't

1052
00:52:59,100 --> 00:53:00,100
make a lot of sense to me.

1053
00:53:00,500 --> 00:53:02,700
And if it doesn't make a lot of sense to me intuitively, that usually

1054
00:53:02,700 --> 00:53:05,500
means, unless the spec is somehow broken that, I just don't

1055
00:53:05,500 --> 00:53:06,100
understand.

1056
00:53:06,700 --> 00:53:07,500
The point, right?

1057
00:53:07,500 --> 00:53:08,200
I'm like missing.

1058
00:53:08,200 --> 00:53:10,500
I'm like I'm thinking it's working one way, but actually it's not

1059
00:53:10,500 --> 00:53:11,100
working that way.

1060
00:53:11,300 --> 00:53:12,700
And so that usually is a bad thing.

1061
00:53:13,500 --> 00:53:17,500
But for now let's just go ahead and actually see if we can do the

1062
00:53:17,500 --> 00:53:18,800
basic implementation of it.

1063
00:53:19,200 --> 00:53:19,800
So here's truth.

1064
00:53:19,800 --> 00:53:23,200
Pixel format and we have the corresponding call to to Circle for down

1065
00:53:23,200 --> 00:53:23,600
here.

1066
00:53:23,800 --> 00:53:27,500
We were passing this pixel format as a struct with a bunch of stuff in

1067
00:53:27,500 --> 00:53:32,600
it and now we're going to do is we're passing it as like a list of

1068
00:53:32,700 --> 00:53:34,500
parameters essentially, right?

1069
00:53:37,000 --> 00:53:40,400
Oh, I see what this actually is.

1070
00:53:41,700 --> 00:53:43,100
This is just querying.

1071
00:53:44,500 --> 00:53:46,500
What they would be set to.

1072
00:53:46,600 --> 00:53:48,800
So we really only need this one.

1073
00:53:50,000 --> 00:53:50,500
Okay.

1074
00:53:50,500 --> 00:53:53,200
So these are not, all right, never mind.

1075
00:53:53,500 --> 00:53:55,200
These are not necessary at all.

1076
00:53:55,900 --> 00:53:58,200
That was just, that's why there's two versions because those are just

1077
00:53:58,200 --> 00:53:59,000
the query calls.

1078
00:53:59,100 --> 00:53:59,800
This is the only one

1079
00:54:00,000 --> 00:54:00,800
Actually need.

1080
00:54:01,400 --> 00:54:02,600
Okay, so we don't need that.

1081
00:54:02,600 --> 00:54:03,500
That's that's good.

1082
00:54:03,500 --> 00:54:04,300
That makes sense.

1083
00:54:04,900 --> 00:54:05,200
That wasn't.

1084
00:54:05,200 --> 00:54:06,500
That was bugging me a little bit there.

1085
00:54:06,700 --> 00:54:08,300
I was like, what is happening?

1086
00:54:08,900 --> 00:54:12,500
Okay, so if we do, we choose pixel format are what we need to do is we

1087
00:54:12,500 --> 00:54:13,600
painted past the DC.

1088
00:54:13,600 --> 00:54:16,100
Now we know what the DC is this, the same DC where were using before,

1089
00:54:16,100 --> 00:54:20,400
just that window to see we now have an enlist and afloat list, right?

1090
00:54:20,400 --> 00:54:25,900
So we have an input attribute list and afloat at Rib list and then

1091
00:54:25,900 --> 00:54:29,800
we've got like, Max formats

1092
00:54:30,000 --> 00:54:31,800
It's and how many formats we want out.

1093
00:54:31,800 --> 00:54:36,200
Which I believe is just sort of saying like, hey it's going to chew.

1094
00:54:36,200 --> 00:54:39,800
It's going to give us back as many pixel formats I guess as as are

1095
00:54:40,100 --> 00:54:43,200
necessary here that makes sense as matched.

1096
00:54:43,800 --> 00:54:45,600
And I don't know that what we would do.

1097
00:54:45,600 --> 00:54:47,800
I don't know how we would distinguish between them.

1098
00:54:48,500 --> 00:54:52,600
Meaning, I don't know, I assume we just take the first one or

1099
00:54:52,600 --> 00:54:53,200
something, right?

1100
00:54:53,200 --> 00:54:55,800
Because we don't have any other criteria to judge these.

1101
00:54:55,800 --> 00:54:56,300
We just know.

1102
00:54:56,300 --> 00:54:58,700
We want one that follows the criteria that we have.

1103
00:54:58,700 --> 00:54:59,900
So I assume that's the

1104
00:55:00,000 --> 00:55:01,300
Thing to do but I don't really know.

1105
00:55:02,600 --> 00:55:09,400
So Pi attributes is this set of things which are all things that we

1106
00:55:09,400 --> 00:55:10,500
might want to specify.

1107
00:55:11,300 --> 00:55:12,900
So let's just take a look at them.

1108
00:55:14,400 --> 00:55:16,200
So we have number of pixel formats.

1109
00:55:16,900 --> 00:55:20,200
We don't really care about that draw to window.

1110
00:55:20,200 --> 00:55:22,700
Does need to be there, right?

1111
00:55:23,100 --> 00:55:24,400
So we're going to need that.

1112
00:55:26,500 --> 00:55:28,000
I assume that's the GL true.

1113
00:55:29,700 --> 00:55:30,200
True.

1114
00:55:30,200 --> 00:55:31,100
It just is true.

1115
00:55:31,100 --> 00:55:32,900
I assume feel true but I don't really know.

1116
00:55:33,200 --> 00:55:34,100
We will draw to bitmap.

1117
00:55:34,100 --> 00:55:36,700
We don't care about that will acceleration with pissarro supported by

1118
00:55:36,700 --> 00:55:37,600
the driver.

1119
00:55:38,200 --> 00:55:39,600
It's the set to no acceleration.

1120
00:55:39,600 --> 00:55:40,800
That only software under supports.

1121
00:55:40,800 --> 00:55:44,600
This pixel format generic, a certain format is supported by MC driver

1122
00:55:44,600 --> 00:55:47,400
isn't set to full acceleration by an ICD driver.

1123
00:55:47,900 --> 00:55:50,800
Obviously we want an ICD driver, right?

1124
00:55:51,600 --> 00:55:53,200
And an ICD driver.

1125
00:55:57,400 --> 00:56:00,200
And then CD driver is like a subordinate driver that runs through the

1126
00:56:00,200 --> 00:56:04,500
Windows driver and an ICD driver is one that actually is a complete

1127
00:56:04,500 --> 00:56:08,400
implementation of opengl which is all we would really be interested

1128
00:56:08,400 --> 00:56:08,600
in.

1129
00:56:09,400 --> 00:56:11,500
We don't need a pallet, we don't need system palette.

1130
00:56:11,500 --> 00:56:13,300
Swap player, buffers truth mr.

1131
00:56:13,300 --> 00:56:16,500
Format supports, swapping layer, planes independently of the main

1132
00:56:16,500 --> 00:56:17,000
planes.

1133
00:56:17,800 --> 00:56:21,200
I don't really know what that means.

1134
00:56:26,400 --> 00:56:27,700
Layer planes.

1135
00:56:27,700 --> 00:56:28,400
I'm not sure.

1136
00:56:28,800 --> 00:56:32,200
I'm not sure if we need that or not, that's very ambiguous.

1137
00:56:33,400 --> 00:56:34,600
Well let's see what else it says.

1138
00:56:34,600 --> 00:56:38,200
Wiggle swap method are up if the pixel format supports a back buffer,

1139
00:56:38,400 --> 00:56:40,100
then this indicates how they are swapped.

1140
00:56:40,200 --> 00:56:43,500
If it's actually set to swap exchange our than swapping exchange the

1141
00:56:43,500 --> 00:56:45,100
front and back buffer contents.

1142
00:56:45,300 --> 00:56:48,600
If it is such a real swap, copy ARB, then swapping copies, the back,

1143
00:56:48,600 --> 00:56:49,200
buffer contest.

1144
00:56:49,200 --> 00:56:52,300
The front buffer, if it is set to wiggle swap, undefined arms in the

1145
00:56:52,300 --> 00:56:54,400
back over, connoisseur, copy the front buffer, the back, buffer,

1146
00:56:54,400 --> 00:56:55,400
connoisseur, undefined

1147
00:56:55,500 --> 00:56:56,200
The operation.

1148
00:56:57,000 --> 00:56:58,500
So we don't really care about any of those.

1149
00:56:58,500 --> 00:56:59,800
I don't think we don't care.

1150
00:57:00,000 --> 00:57:03,700
Laughs as long as it does overlays we don't care about under those.

1151
00:57:03,700 --> 00:57:05,100
Don't care about transparent.

1152
00:57:05,100 --> 00:57:05,900
We don't care about it.

1153
00:57:05,900 --> 00:57:07,700
All share depth.

1154
00:57:09,500 --> 00:57:10,900
We don't care about any of these things.

1155
00:57:11,000 --> 00:57:12,400
You don't care about sharing death.

1156
00:57:12,500 --> 00:57:15,200
Don't care about the stencil, you don't care how the accumulation we

1157
00:57:15,200 --> 00:57:17,200
don't share about GDI a drawing.

1158
00:57:17,700 --> 00:57:19,300
We do need opengl

1159
00:57:21,900 --> 00:57:22,200
Right.

1160
00:57:22,200 --> 00:57:30,100
That's obviously true groups and we also need double buffer.

1161
00:57:31,900 --> 00:57:34,400
Because we do want to be able to draw to the back bumper.

1162
00:57:34,800 --> 00:57:38,000
While we're seeing the front buffer, we've got stereo.

1163
00:57:38,000 --> 00:57:43,000
We don't care about that pixel type, we do care about we don't want

1164
00:57:43,000 --> 00:57:44,000
color index.

1165
00:57:44,400 --> 00:57:48,400
Obviously, we want to do full RGB rendering so we're going to want

1166
00:57:48,400 --> 00:57:48,900
that.

1167
00:57:55,100 --> 00:57:59,600
Wiggle color B, the number of color B planes for srgb is the size of

1168
00:57:59,600 --> 00:58:02,500
the color buffer, excluding the alphabet planes.

1169
00:58:03,700 --> 00:58:07,900
So in this case, that is going to be 24, right?

1170
00:58:08,800 --> 00:58:10,500
Number of red B planes.

1171
00:58:10,600 --> 00:58:14,500
Well, I mean, this is, I don't even know why were bothering with this.

1172
00:58:14,500 --> 00:58:15,300
But, okay.

1173
00:58:15,600 --> 00:58:18,900
So, red bits and I assume you want to specify all of these guys.

1174
00:58:21,400 --> 00:58:22,800
Do we actually care about this though?

1175
00:58:22,800 --> 00:58:25,000
You know, do we don't care about any of this.

1176
00:58:25,200 --> 00:58:28,400
Like, we don't care that it how many bits of color there are to be

1177
00:58:28,400 --> 00:58:28,900
honest.

1178
00:58:29,200 --> 00:58:32,300
I mean, if it wanted to give us a 16-bit back buffer, fine, we don't

1179
00:58:32,300 --> 00:58:32,400
care.

1180
00:58:32,400 --> 00:58:33,600
If it's or is it a more Precision?

1181
00:58:33,900 --> 00:58:34,900
So do we actually need?

1182
00:58:34,900 --> 00:58:36,500
I'm going to say we could just skip those.

1183
00:58:37,100 --> 00:58:38,900
We don't care about depth is we don't care about something, but you

1184
00:58:38,900 --> 00:58:39,400
don't care about this.

1185
00:58:39,400 --> 00:58:41,100
I think that's literally all we care about.

1186
00:58:41,400 --> 00:58:43,000
That's it, right?

1187
00:58:43,200 --> 00:58:44,300
I think that's all there is.

1188
00:58:45,500 --> 00:58:46,900
So let's read this thing.

1189
00:58:49,900 --> 00:58:50,700
And see what it says.

1190
00:58:51,400 --> 00:58:52,500
So let's see.

1191
00:58:53,400 --> 00:58:54,900
Wiggle cheese, pizza format.

1192
00:58:55,500 --> 00:58:58,200
So, so list of attributes have like type value pairs containing

1193
00:58:58,200 --> 00:59:00,900
integer or followed by a corresponding, the, this determinate, with a

1194
00:59:00,900 --> 00:59:01,400
zero.

1195
00:59:01,900 --> 00:59:05,500
So all we have to do in here is just say, like, okay, here's our

1196
00:59:05,500 --> 00:59:07,100
integer list, right?

1197
00:59:07,200 --> 00:59:09,900
Here's our NT NT, a Tribble list,

1198
00:59:11,300 --> 00:59:13,000
And here they all are right.

1199
00:59:13,000 --> 00:59:15,800
Each individual pair, we get down to the bottom.

1200
00:59:15,800 --> 00:59:19,600
We stick a 0 in there for a terminator, and that's all there is to it.

1201
00:59:19,700 --> 00:59:24,000
So there's our in touch with list, and then we come down here, and we

1202
00:59:24,000 --> 00:59:27,200
say, like, mx4 mx4 mats.

1203
00:59:27,700 --> 00:59:29,400
So list of attributes of, I was participating.

1204
00:59:29,400 --> 00:59:34,700
Floating-point, the floating Point values, I don't know where those

1205
00:59:34,700 --> 00:59:35,800
are, what those are?

1206
00:59:35,800 --> 00:59:37,800
I don't, is there a floating point.

1207
00:59:38,400 --> 00:59:39,800
I didn't see anything.

1208
00:59:39,800 --> 00:59:41,400
We care about, that's floating point.

1209
00:59:41,400 --> 00:59:43,600
So I'm just going to assume that the float trip list is actually

1210
00:59:43,600 --> 00:59:44,100
nothing.

1211
00:59:47,300 --> 00:59:49,000
Although actually, I guess we have to do

1212
00:59:53,500 --> 00:59:55,200
zero Terminator, right?

1213
00:59:55,600 --> 00:59:59,100
Because if that's all that, it knows if we don't send it an array

1214
00:59:59,100 --> 00:59:59,800
count, it's got to go.

1215
01:00:00,000 --> 01:00:00,700
It's a zero.

1216
01:00:01,700 --> 01:00:04,800
So if we do, we will choose pixel format ARB, we've got Max formats

1217
01:00:04,800 --> 01:00:06,200
play formats and I'm formats.

1218
01:00:06,500 --> 01:00:07,800
We got to find out what those things are.

1219
01:00:09,500 --> 01:00:10,600
So let's go ahead and do that.

1220
01:00:10,700 --> 01:00:14,300
So in choose pixel format are when we have n Max formats, the maximum

1221
01:00:14,300 --> 01:00:15,600
pixel formats to be returned.

1222
01:00:15,700 --> 01:00:18,200
Pfr us went through an array of return, indices, the match piece of

1223
01:00:18,200 --> 01:00:20,700
quartz, the best pixel formats are the head of the list.

1224
01:00:21,700 --> 01:00:24,300
The caller must look at this array num for us was the number of

1225
01:00:24,300 --> 01:00:25,100
matching funds, all right?

1226
01:00:25,100 --> 01:00:27,600
So basically what we want to do is say look we can't tell the

1227
01:00:27,600 --> 01:00:28,400
difference between special for us.

1228
01:00:28,400 --> 01:00:29,700
Anyway we just don't know.

1229
01:00:30,100 --> 01:00:32,100
So we only want one, right?

1230
01:00:32,500 --> 01:00:36,200
And then we want to to say essentially that suggested pixel format

1231
01:00:36,200 --> 01:00:38,900
index is actually going to be the one.

1232
01:00:39,500 --> 01:00:42,600
The place to put it, it's the only one, right?

1233
01:00:42,800 --> 01:00:45,900
And then the count is just that some ignored thing that we don't even

1234
01:00:45,900 --> 01:00:47,100
care about right?

1235
01:00:48,100 --> 01:00:54,200
Like so although I guess we could say count or like, we could do, we

1236
01:00:54,200 --> 01:01:00,300
could do this, you could say extended pick equal 0 and then here we

1237
01:01:00,300 --> 01:01:01,400
could say extended picks.

1238
01:01:01,400 --> 01:01:05,500
So if it found one that will be set to 1,

1239
01:01:06,400 --> 01:01:11,600
And then what we can do and this seems like a good idea what we could

1240
01:01:11,600 --> 01:01:19,600
do here is say, Okay, if that extended pick equals 0, then we know

1241
01:01:19,600 --> 01:01:21,500
that this code path failed.

1242
01:01:21,600 --> 01:01:24,500
So, just fall back and try the old one, right?

1243
01:01:24,800 --> 01:01:28,100
So, that way, we'll always actually do the other one as well.

1244
01:01:28,600 --> 01:01:32,500
So, now let's see whether we can get this working at all and probably

1245
01:01:32,500 --> 01:01:33,700
all we actually need to do.

1246
01:01:33,700 --> 01:01:36,000
I think is

1247
01:01:37,000 --> 01:01:40,000
Is defined, you know, copy these constants over and then we should be

1248
01:01:40,000 --> 01:01:40,500
good to go.

1249
01:01:40,900 --> 01:01:44,000
What is this complaining about me about something will choose?

1250
01:01:44,000 --> 01:01:44,800
One cannot convert.

1251
01:01:44,800 --> 01:01:47,200
I'm going to six from into UNT.

1252
01:01:47,800 --> 01:01:49,800
Oh well, excuse me.

1253
01:01:50,300 --> 01:01:53,700
So what we're saying is this is actually a you end or Jill.

1254
01:01:53,700 --> 01:01:57,300
You inte is that we're saying that is what we're saying.

1255
01:01:58,000 --> 01:02:01,200
So all we really need to do is make sure we can Define all these guys

1256
01:02:02,000 --> 01:02:06,000
and so that's just something again that can be put placed in here.

1257
01:02:06,900 --> 01:02:08,300
Because it's just an extension.

1258
01:02:08,300 --> 01:02:10,600
It's an open G extension, and we just need to know what those

1259
01:02:10,600 --> 01:02:11,900
constants actually are.

1260
01:02:12,800 --> 01:02:14,200
And they should be defined in here.

1261
01:02:14,200 --> 01:02:15,000
I would think.

1262
01:02:16,500 --> 01:02:16,900
Yep.

1263
01:02:16,900 --> 01:02:20,700
Looks like they are and so we had draw to window.

1264
01:02:20,900 --> 01:02:23,500
So we got, in fact, I guess we could just copy this whole thing.

1265
01:02:23,500 --> 01:02:24,300
Well not really.

1266
01:02:25,000 --> 01:02:27,900
So let's go ahead and and just paste that in there.

1267
01:02:28,100 --> 01:02:31,500
Draw two window we had

1268
01:02:33,000 --> 01:02:34,800
Double buffer, right?

1269
01:02:35,900 --> 01:02:37,400
Support opengl

1270
01:02:38,700 --> 01:02:41,500
Both of those guys are in there.

1271
01:02:44,000 --> 01:02:45,200
We got pixel type.

1272
01:02:48,200 --> 01:02:54,200
In there and think, is that it?

1273
01:02:56,600 --> 01:02:57,600
I think that might have been it.

1274
01:02:59,400 --> 01:02:59,800
Let's see.

1275
01:03:00,200 --> 01:03:04,800
Draw the window acceleration.

1276
01:03:05,600 --> 01:03:06,200
I get that.

1277
01:03:06,300 --> 01:03:06,500
Yeah.

1278
01:03:08,700 --> 01:03:09,500
Acceleration.

1279
01:03:10,000 --> 01:03:15,500
So we had brought a window acceleration support opengl double buffer

1280
01:03:15,500 --> 01:03:17,600
and pixel type, right?

1281
01:03:18,100 --> 01:03:24,000
And so now we just need the actual settings and those are this guy

1282
01:03:25,600 --> 01:03:29,900
which is the pixel type, you actually used and the full acceleration

1283
01:03:29,900 --> 01:03:30,300
ARB

1284
01:03:33,300 --> 01:03:36,400
Okay, so there's guys are both there.

1285
01:03:37,900 --> 01:03:40,300
And I'm over time here so I gotta wrap it up.

1286
01:03:40,300 --> 01:03:41,600
I gotta wrap it up folks.

1287
01:03:41,800 --> 01:03:43,300
We didn't really, we didn't really start late today.

1288
01:03:43,300 --> 01:03:44,200
We started on time today.

1289
01:03:48,000 --> 01:03:53,500
Okay, so there's the, you know, the stuff we actually need.

1290
01:03:54,300 --> 01:04:02,400
So now if we go into the, the code here and and and win32 in it opengl

1291
01:04:04,000 --> 01:04:08,300
If I step into that code to see what's going on, I should be able to

1292
01:04:08,300 --> 01:04:11,400
see whether we actually are able to get a that function in the first

1293
01:04:11,400 --> 01:04:11,900
place.

1294
01:04:12,100 --> 01:04:13,200
And it looks like we're not.

1295
01:04:16,000 --> 01:04:17,900
So, we don't even we can't even get that function.

1296
01:04:20,800 --> 01:04:24,700
So now, my only question is can we not get that function simply

1297
01:04:24,700 --> 01:04:27,800
because we haven't created an elevated context because I don't know

1298
01:04:27,800 --> 01:04:32,200
what the rules for that are so like if we go in here and we do create

1299
01:04:32,200 --> 01:04:37,600
context at Rib like so I'm curious if now, we jump back.

1300
01:04:39,100 --> 01:04:39,900
Mike is here.

1301
01:04:40,100 --> 01:04:42,200
We've created that that fancy conducts.

1302
01:04:42,400 --> 01:04:45,200
If I jump back what I get it now and I don't know.

1303
01:04:45,700 --> 01:04:46,800
So let's find out.

1304
01:04:46,800 --> 01:04:49,900
So I'm gonna do a set next statement and then I'm going to run to it

1305
01:04:50,700 --> 01:04:52,800
and hey, that totally worked.

1306
01:04:53,700 --> 01:04:55,900
So now I'm not sure

1307
01:04:58,300 --> 01:05:00,300
what to make of that, right?

1308
01:05:02,400 --> 01:05:06,900
If I have to call wiggle make current

1309
01:05:09,900 --> 01:05:13,300
In order to get that function, but we're gonna make current requires

1310
01:05:13,300 --> 01:05:16,300
me to set the pixel format of my DC first, which I thought it.

1311
01:05:16,300 --> 01:05:18,300
Did you see the Dilemma there?

1312
01:05:19,700 --> 01:05:21,300
Let's see what actually happens here.

1313
01:05:21,300 --> 01:05:22,100
By the way, though.

1314
01:05:22,800 --> 01:05:23,500
So

1315
01:05:25,200 --> 01:05:26,800
Extended pick use 24.

1316
01:05:27,000 --> 01:05:28,600
I said the max was one.

1317
01:05:29,400 --> 01:05:31,100
I guess that's how many there would have been.

1318
01:05:33,600 --> 01:05:34,200
Well anyway.

1319
01:05:36,100 --> 01:05:36,700
Whatever.

1320
01:05:37,500 --> 01:05:38,500
So point being

1321
01:05:40,300 --> 01:05:43,800
I'm not exactly sure, that's a subtlety that I'm not sure about, it's

1322
01:05:43,800 --> 01:05:47,400
pretty clear that we need to actually have wiggle configured up at

1323
01:05:47,400 --> 01:05:50,200
least, to a certain extent before we can call that wiggle.

1324
01:05:50,200 --> 01:05:51,100
Get proc address.

1325
01:05:51,400 --> 01:05:56,200
Now, I don't actually know to what extent, we need that to happen and

1326
01:05:56,200 --> 01:05:58,400
so maybe there's a limited amount of start-up.

1327
01:05:58,400 --> 01:05:59,100
We could do.

1328
01:05:59,500 --> 01:05:59,800
That would make

1329
01:06:00,000 --> 01:06:00,600
At work.

1330
01:06:00,900 --> 01:06:03,300
Let's let's do another test here.

1331
01:06:03,500 --> 01:06:05,300
Oops, it's not what I wanted to do at all.

1332
01:06:07,400 --> 01:06:09,000
So let's, let's hop in here.

1333
01:06:09,600 --> 01:06:13,700
Let's go ahead and let this dude, do its thing.

1334
01:06:15,100 --> 01:06:18,400
I'm just going to have it do just create context, so there's just an

1335
01:06:18,400 --> 01:06:21,800
opengl context that exists, right?

1336
01:06:22,500 --> 01:06:25,200
And I'm going to call Nick Hern on it.

1337
01:06:25,700 --> 01:06:28,800
So now, we're not using extended context, we're just using the regular

1338
01:06:28,800 --> 01:06:32,500
context and now I'm going to jump back up here and force it to try

1339
01:06:32,500 --> 01:06:34,000
that call again and see what happens.

1340
01:06:34,100 --> 01:06:34,500
Okay?

1341
01:06:35,400 --> 01:06:39,200
So it just needs opengl to have been started at all.

1342
01:06:39,300 --> 01:06:41,200
It does not need to have been elevated.

1343
01:06:41,300 --> 01:06:42,700
It needs to have been started.

1344
01:06:43,000 --> 01:06:44,100
So we can't call wiggle.

1345
01:06:44,100 --> 01:06:44,700
Get praça dos.

1346
01:06:44,900 --> 01:06:47,100
Which I guess I sort of knew that's why I structured this code this

1347
01:06:47,100 --> 01:06:47,400
way.

1348
01:06:47,600 --> 01:06:51,800
So I guess I knew that you had to, at least have it set up first.

1349
01:06:53,700 --> 01:06:55,600
But the problem is now, I just don't see.

1350
01:06:55,600 --> 01:06:57,000
Do we re pick?

1351
01:06:57,200 --> 01:06:59,800
Can we reset the pixel format.

1352
01:07:00,300 --> 01:07:01,300
Does that work?

1353
01:07:01,900 --> 01:07:04,900
Like can you call set pixel format another time?

1354
01:07:09,300 --> 01:07:10,700
Because that's a bit of a mystery to me.

1355
01:07:12,700 --> 01:07:16,800
So what I would say is, let's go ahead and break for today because

1356
01:07:16,800 --> 01:07:19,600
we're out of time and let's come back to this tomorrow, because that's

1357
01:07:19,600 --> 01:07:20,500
an interesting conundrum.

1358
01:07:20,700 --> 01:07:26,000
I don't actually know or if I did know, I forgot how we would make

1359
01:07:26,000 --> 01:07:26,500
this

1360
01:07:28,000 --> 01:07:30,300
Do what it needs to do, right?

1361
01:07:30,800 --> 01:07:33,600
And for what it's worth, I don't actually ever do what we're doing

1362
01:07:33,600 --> 01:07:34,100
right now.

1363
01:07:34,100 --> 01:07:38,600
Which is why I don't know, because I actually usually render to a

1364
01:07:38,600 --> 01:07:43,800
separate buffer and have to do like a separate sort of resolve pass to

1365
01:07:43,800 --> 01:07:47,100
draw to the actual buffer, the front buffer, which means you don't

1366
01:07:47,100 --> 01:07:48,800
need srgb on that buffer.

1367
01:07:52,600 --> 01:07:55,500
So yeah, so I actually don't know.

1368
01:07:55,600 --> 01:07:58,200
So this will be interesting for me too so I'm just going to put it to

1369
01:07:58,200 --> 01:08:06,000
do here and be like this needs to happen after we create the initial

1370
01:08:06,000 --> 01:08:08,100
opengl context.

1371
01:08:08,400 --> 01:08:15,900
But how do we do that given that the DC needs to be in the correct

1372
01:08:15,900 --> 01:08:21,700
format first, do we just wiggle make current

1373
01:08:22,600 --> 01:08:33,200
Back to zero and then reset the pixel format or what.

1374
01:08:33,800 --> 01:08:36,899
And so that'll just be, you know, obviously that, you know, there's

1375
01:08:36,899 --> 01:08:39,800
some defined way in which, you know, you're supposed to like, oh yeah,

1376
01:08:39,800 --> 01:08:42,899
just create the contacts and unset it and then reset it, and it's fine

1377
01:08:42,899 --> 01:08:43,200
or whatever.

1378
01:08:43,200 --> 01:08:46,899
But I don't know what the magic incantation is and so we'll have to

1379
01:08:46,899 --> 01:08:47,600
figure that out.

1380
01:08:48,600 --> 01:08:51,800
All right, so let's go ahead and break for now and we got time for

1381
01:08:51,800 --> 01:08:53,600
questions so let's take questions.

1382
01:09:11,000 --> 01:09:11,500
UNIF.

1383
01:09:11,500 --> 01:09:15,399
And don't you have a race condition according to the C11 and C++ 11

1384
01:09:15,399 --> 01:09:16,100
memory models?

1385
01:09:16,100 --> 01:09:19,700
When you set the texture handle from the worker thread and read it on

1386
01:09:19,700 --> 01:09:21,000
the rendering thread.

1387
01:09:21,100 --> 01:09:25,100
Without any synchronization, I think you need to use an atomic

1388
01:09:25,100 --> 01:09:25,700
operation.

1389
01:09:25,700 --> 01:09:28,000
Are the compiler could mess up the generated code?

1390
01:09:29,500 --> 01:09:30,500
How would it?

1391
01:09:31,200 --> 01:09:34,100
I don't understand how it could possibly mess up the generated code.

1392
01:09:50,200 --> 01:09:55,400
Yeah, I mean no I don't think so that that doesn't sound right to me

1393
01:09:55,400 --> 01:09:55,800
at all.

1394
01:09:56,700 --> 01:10:00,900
Now granted the C11 C++ 11, memory models.

1395
01:10:01,000 --> 01:10:04,600
Are God knows like they're complete nightmare, right?

1396
01:10:04,600 --> 01:10:07,900
They're the ones that have all the weird undefined behaviors and so,

1397
01:10:08,300 --> 01:10:12,700
technically, none of handmade hero would run, right?

1398
01:10:12,800 --> 01:10:15,500
Because we do all sorts of stuff like sub, allocating out of ranges of

1399
01:10:15,500 --> 01:10:17,800
memory, which the switch see, doesn't even let you do it.

1400
01:10:17,800 --> 01:10:18,700
All right.

1401
01:10:20,000 --> 01:10:24,800
And and all that stuff is just ridiculous nonsense that I don't pay

1402
01:10:24,800 --> 01:10:25,400
attention to.

1403
01:10:25,700 --> 01:10:29,800
So, in that sense, maybe there is something, but in the sense of like

1404
01:10:29,800 --> 01:10:33,500
could any actual reasonable compiler, that we would ever actually use

1405
01:10:33,700 --> 01:10:35,900
legitimately generate wrong code here because it doesn't know what

1406
01:10:35,900 --> 01:10:36,500
we're trying to do.

1407
01:10:36,500 --> 01:10:38,200
I don't I don't think there's any possible way.

1408
01:10:39,700 --> 01:10:40,200
but,

1409
01:10:43,900 --> 01:10:44,600
Q4 Caleb.

1410
01:10:44,600 --> 01:10:46,500
Why don't you render directly to the back buffer at Molly?

1411
01:10:46,700 --> 01:10:52,200
The reason is because you have to do like typically you'll end up with

1412
01:10:52,200 --> 01:10:57,300
something like a, an example would be lets say that you have, you

1413
01:10:57,300 --> 01:10:59,300
know, two

1414
01:11:01,700 --> 01:11:06,200
You've got like, well I'll give you extremely simple example.

1415
01:11:06,800 --> 01:11:11,600
Let's say, you're you want to support rendering at a lower resolution

1416
01:11:11,600 --> 01:11:12,400
than the screen.

1417
01:11:13,300 --> 01:11:18,000
In case, the user's computer is too slow to render at their full

1418
01:11:18,000 --> 01:11:20,400
resolution and that's really common, right?

1419
01:11:20,400 --> 01:11:25,700
Because maybe the users monitor is, you know, super high res, it's

1420
01:11:25,700 --> 01:11:29,000
like a 4k monitor or something but they're gravis card isn't even

1421
01:11:29,000 --> 01:11:31,200
close to being able to actually render the game at 4K.

1422
01:11:31,300 --> 01:11:33,500
Just it's not a powerful enough graphics card for that.

1423
01:11:34,500 --> 01:11:39,200
Then oftentimes, if you don't want to set the resolution differently,

1424
01:11:39,900 --> 01:11:42,700
what you can do is you can just render to a back buffer, that's like

1425
01:11:42,700 --> 01:11:45,500
1920 by 1080 or some regular HD resolution.

1426
01:11:45,700 --> 01:11:49,400
And then you have a final pass that scales that up to the actual size

1427
01:11:49,400 --> 01:11:50,800
of their monitor, right?

1428
01:11:52,000 --> 01:11:54,600
Obviously, it's not as good as rendering the actual home monitor, but

1429
01:11:54,600 --> 01:11:55,800
they're gravatar isn't good enough for that.

1430
01:11:55,800 --> 01:11:56,800
So that's never an option.

1431
01:11:56,800 --> 01:11:59,800
So you got to do something and this is better than sex.

1432
01:12:00,000 --> 01:12:03,100
The resolution because at least it doesn't run the whole thing of

1433
01:12:03,100 --> 01:12:06,100
like, oh it messes up the icons on their desktop or does all the other

1434
01:12:06,100 --> 01:12:06,700
weird things, right?

1435
01:12:06,700 --> 01:12:08,700
Windows is real bad setting resolutions.

1436
01:12:10,100 --> 01:12:13,600
So at that point, you know, there's a pass that just copies from one

1437
01:12:13,600 --> 01:12:15,400
buffer to another with some limited upscaler.

1438
01:12:15,400 --> 01:12:21,000
Something that never reads from the actual back buffer, right?

1439
01:12:21,800 --> 01:12:24,200
And so, it's not that you don't render to the back, but are you always

1440
01:12:24,200 --> 01:12:26,700
actually do end up drawing to the back part of the question is whether

1441
01:12:26,700 --> 01:12:28,500
you have a readout of the back buffer?

1442
01:12:28,700 --> 01:12:32,500
Because the only time the srgb flag actually does anything is if you

1443
01:12:32,500 --> 01:12:35,200
actually read out of the back buffer, right?

1444
01:12:37,400 --> 01:12:40,200
So, you know, well that's not actually true.

1445
01:12:41,900 --> 01:12:44,700
if you ever read out of the back, buffer,

1446
01:12:46,500 --> 01:12:48,500
And use that you need srgb.

1447
01:12:48,700 --> 01:12:53,400
Or if you ever write to the back buffer out of a Shader that is in

1448
01:12:53,400 --> 01:12:56,900
linear light space, you would need the srg, right?

1449
01:12:57,200 --> 01:12:59,400
But if all you're doing is copying from something.

1450
01:12:59,400 --> 01:13:05,000
That's already an srgb to the back buffer, which is in srgb, you never

1451
01:13:05,000 --> 01:13:08,700
need to Mark the back buffer as srgb because no translation has to

1452
01:13:08,700 --> 01:13:10,300
take place, right?

1453
01:13:13,600 --> 01:13:15,600
So, yeah, so that's one thing you can do.

1454
01:13:15,600 --> 01:13:22,400
Now, to be honest, when I, when I'm thinking about this, I feel like

1455
01:13:22,400 --> 01:13:23,800
it might be that Molly.

1456
01:13:23,800 --> 01:13:26,100
We might still want it like now that I'm gonna know how to do this,

1457
01:13:26,100 --> 01:13:28,500
but I've never actually tried doing this before because I've never

1458
01:13:28,500 --> 01:13:31,900
tried saying the bankrupt srgb if it works relatively.

1459
01:13:31,900 --> 01:13:36,400
Well, I might do it at Molly anyway, because technically

1460
01:13:40,000 --> 01:13:45,200
If you set srgb on the street, if you were doing a stretch and you

1461
01:13:45,200 --> 01:13:49,000
said Archie, Archie be it should be more accurate.

1462
01:13:49,000 --> 01:13:53,400
The stretching should look nicer in theory because the bilinear blend

1463
01:13:53,400 --> 01:13:55,600
would be done in a more accurate space.

1464
01:14:00,500 --> 01:14:01,000
so,

1465
01:14:02,600 --> 01:14:03,000
You know.

1466
01:14:22,300 --> 01:14:23,500
Broken up code FYI?

1467
01:14:23,500 --> 01:14:24,400
No you can't change.

1468
01:14:24,400 --> 01:14:24,900
Pixel format.

1469
01:14:24,900 --> 01:14:25,500
What's been set?

1470
01:14:25,500 --> 01:14:28,100
You need to create a temp window and contacts get the wiggle.

1471
01:14:28,100 --> 01:14:30,600
Our function pointers then destroy Cox and we don't create a new

1472
01:14:30,600 --> 01:14:33,200
window and connects with Michael are very annoying, but that's how it

1473
01:14:33,200 --> 01:14:34,000
works on Windows far.

1474
01:14:34,000 --> 01:14:37,800
As I know, it wouldn't surprise me if that's the whole answer, right?

1475
01:14:37,800 --> 01:14:38,800
I mean that's the kind of thing.

1476
01:14:38,800 --> 01:14:41,300
Like I said, Microsoft doesn't support opengl.

1477
01:14:42,700 --> 01:14:46,400
they would rather you use DirectX so they don't do anything to make it

1478
01:14:46,400 --> 01:14:50,400
easy on you and so the driver vendors have to do kind of to kind of go

1479
01:14:50,400 --> 01:14:53,800
around their backs and that sounds like the kind of thing the driver

1480
01:14:53,800 --> 01:14:56,600
probably like probably the driver doesn't get loaded until someone

1481
01:14:56,600 --> 01:14:59,900
creates a context so you can't call, we will create context and so

1482
01:15:00,000 --> 01:15:01,800
Don't have any other way to do it, you know.

1483
01:15:02,400 --> 01:15:05,000
But that's okay because we can create a dummy window and we can do

1484
01:15:05,000 --> 01:15:05,400
that.

1485
01:15:05,600 --> 01:15:06,400
That's not hard.

1486
01:15:06,500 --> 01:15:08,500
So we'll try that tomorrow and go from there.

1487
01:15:09,600 --> 01:15:12,000
Will we be back to the debug code and finish it up after this?

1488
01:15:12,000 --> 01:15:12,700
Or have you finished it?

1489
01:15:12,700 --> 01:15:15,800
Now you know we'll be back on the debug code as soon as we're done

1490
01:15:15,800 --> 01:15:18,400
with this probably or I don't know if there's anything else we have to

1491
01:15:18,400 --> 01:15:18,500
do.

1492
01:15:18,500 --> 01:15:20,200
Probably not really.

1493
01:15:23,200 --> 01:15:25,800
Cooper, Caleb, thanks for ruining the in-depth explanation.

1494
01:15:25,800 --> 01:15:27,400
We be going over modern Geo later.

1495
01:15:27,600 --> 01:15:30,000
Probably not, I'm not sure.

1496
01:15:30,500 --> 01:15:34,300
We might probably, we might do some shaders, because we probably will

1497
01:15:34,300 --> 01:15:36,100
need them for lighting.

1498
01:15:37,400 --> 01:15:43,200
so we're probably do some shaders, we will probably never do vertex

1499
01:15:43,200 --> 01:15:46,300
buffer stuff because that we don't need

1500
01:15:48,500 --> 01:15:51,500
and it's rather than be absurd, but

1501
01:16:42,100 --> 01:16:43,200
Set it for cues.

1502
01:16:46,800 --> 01:16:47,500
On topic use.

1503
01:16:47,500 --> 01:16:48,000
I mean,

1504
01:16:54,400 --> 01:16:56,400
Cuz I ain't seen no more cues.

1505
01:16:56,400 --> 01:16:57,600
That look on topic.

1506
01:17:15,100 --> 01:17:17,400
Apparently, in DirectX, 12, you can select a separate context for

1507
01:17:17,400 --> 01:17:18,300
different gpus.

1508
01:17:19,400 --> 01:17:19,700
Yeah.

1509
01:17:19,700 --> 01:17:20,100
I mean,

1510
01:17:22,600 --> 01:17:24,200
I don't actually know.

1511
01:17:27,300 --> 01:17:30,100
To what extent you could do that in DirectX 11 as well.

1512
01:17:30,100 --> 01:17:31,300
Like I don't program DirectX.

1513
01:17:31,300 --> 01:17:36,100
So I only know an opengl, you can't do it in Vulcan that you can at

1514
01:17:36,100 --> 01:17:41,700
least you could the last time I saw it long ago and so directx12.

1515
01:17:41,700 --> 01:17:48,000
Presumably you can as well because they're not that different, but I

1516
01:17:48,000 --> 01:17:48,400
don't know.

1517
01:17:48,800 --> 01:17:52,700
And like I said, I didn't know if direct II figured maybe DirectX 11,

1518
01:17:52,700 --> 01:17:55,400
would let you do would already have let you do that, but I guess it's

1519
01:17:55,400 --> 01:17:56,300
not true.

1520
01:18:10,100 --> 01:18:10,700
Just 25.

1521
01:18:10,700 --> 01:18:11,400
Where did you up before?

1522
01:18:11,400 --> 01:18:13,500
A crowd of videos, I'm not upload the fur coat of yours.

1523
01:18:13,500 --> 01:18:17,400
I just have them on this machine and I'm waiting for Alan to tell me

1524
01:18:17,400 --> 01:18:21,300
where he wants me to put them, or what he wants me to do with them.

1525
01:18:23,900 --> 01:18:25,300
But they'll they're saved.

1526
01:18:25,300 --> 01:18:26,900
I just haven't put them up anywhere yet.

1527
01:18:33,000 --> 01:18:33,900
Do you censor my guest?

1528
01:18:33,900 --> 01:18:35,000
You 3D 11 to.

1529
01:18:35,100 --> 01:18:37,900
Yeah, so that's why I figured I was like I figured d3d would have let

1530
01:18:37,900 --> 01:18:40,500
you do that for a while because Microsoft wants you to use that and

1531
01:18:40,500 --> 01:18:44,700
has you no control over the platform.

1532
01:18:44,700 --> 01:18:46,500
So I figured they would have done that eventually.

1533
01:18:49,700 --> 01:18:52,500
I don't know what version of DirectX added it but

1534
01:18:58,000 --> 01:19:03,600
Couldn't you use a pb0 for streaming in textures?

1535
01:19:05,700 --> 01:19:07,100
A pixel buffer object.

1536
01:19:11,200 --> 01:19:18,100
I mean, I guess you could, I'm not sure why like what the goal

1537
01:19:18,100 --> 01:19:20,100
necessarily would be with that.

1538
01:19:22,800 --> 01:19:28,700
I mean I don't I don't know that there's any real benefit to using one

1539
01:19:28,700 --> 01:19:29,400
thing or another.

1540
01:19:29,500 --> 01:19:32,300
I mean, one thing you can do if you want to avoid the possibility of

1541
01:19:32,300 --> 01:19:34,300
any fragmentation is.

1542
01:19:34,300 --> 01:19:38,700
You can also just allocate like a couple large textures and pack your

1543
01:19:38,700 --> 01:19:42,600
textures into them and you just use instead of calling text image 2D

1544
01:19:42,600 --> 01:19:46,900
like we are we call text sub image, 2D and pick out a smaller area.

1545
01:19:48,300 --> 01:19:50,600
But I don't know that.

1546
01:19:50,600 --> 01:19:57,200
There's any real reason why you would do any particular thing until

1547
01:19:57,200 --> 01:20:01,700
you had some strong opinion about what your game like that.

1548
01:20:01,700 --> 01:20:03,700
Your game was having some problem doing it.

1549
01:20:03,700 --> 01:20:05,100
One of the other ways, right?

1550
01:20:05,200 --> 01:20:08,300
Like, I don't know that you would really, I don't know why you would

1551
01:20:08,300 --> 01:20:10,600
switch to a pixel buffer object for any particular reason.

1552
01:20:12,600 --> 01:20:14,000
Or what you thought you were getting from.

1553
01:20:14,000 --> 01:20:16,200
That that make sense.

1554
01:20:36,200 --> 01:20:38,600
Alright, let's wrap it up, folks.

1555
01:20:38,900 --> 01:20:41,300
Let us wrap it up.

1556
01:20:44,800 --> 01:20:46,300
All right, everybody.

1557
01:20:46,700 --> 01:20:50,000
Thank you for joining me for another episode of handmade hero.

1558
01:20:50,000 --> 01:20:51,000
It's been a pleasure coding with you.

1559
01:20:51,000 --> 01:20:55,300
As always, we are now doing background downloads or textures, which is

1560
01:20:55,300 --> 01:20:57,400
pretty great, which pretty much wraps up anything.

1561
01:20:57,400 --> 01:20:58,800
We really need to do with opengl.

1562
01:21:00,300 --> 01:21:03,300
Maybe we want to load shaders because like I said, I think we're

1563
01:21:03,300 --> 01:21:04,700
probably gonna need those for lighting.

1564
01:21:04,700 --> 01:21:08,400
I mean, I'm not certain, but I suspect because we'll probably want

1565
01:21:08,400 --> 01:21:10,800
some effects that are just good with, you wouldn't want to do them

1566
01:21:10,800 --> 01:21:11,500
without a Shader.

1567
01:21:12,400 --> 01:21:14,100
So we might want to load shaders at some point.

1568
01:21:14,100 --> 01:21:16,600
But other than that, I think we're pretty much everything that we

1569
01:21:16,600 --> 01:21:18,400
really need out of opengl.

1570
01:21:18,400 --> 01:21:19,500
We pretty much got it ready?

1571
01:21:20,800 --> 01:21:23,200
And like I said, it's pretty nice because now we actually can just

1572
01:21:23,200 --> 01:21:26,400
toggle a Boolean and render through either our software under or in

1573
01:21:26,400 --> 01:21:28,000
jail, so we kind of have the best of both worlds.

1574
01:21:28,000 --> 01:21:30,000
We can have suffer enduring if we're

1575
01:21:30,100 --> 01:21:32,400
Want to play around with it and we can have Harbor, rendering if we

1576
01:21:32,400 --> 01:21:35,900
want to get the speed of the graphics card involved every everyone

1577
01:21:35,900 --> 01:21:36,300
wins.

1578
01:21:37,900 --> 01:21:40,600
So, tomorrow, we'll take a look at that srgb thing.

1579
01:21:40,600 --> 01:21:43,100
And we'll try doing the maybe like a dummy window, like someone

1580
01:21:43,100 --> 01:21:45,400
suggesting because that might be our only way of actually making that

1581
01:21:45,400 --> 01:21:45,800
work.

1582
01:21:46,400 --> 01:21:48,100
So, we'll do that tomorrow and we'll get that working.

1583
01:21:48,100 --> 01:21:50,800
And then I think we can sort of move on to finishing our debug layer

1584
01:21:50,800 --> 01:21:51,900
and just tidying up.

1585
01:21:51,900 --> 01:21:54,100
Anything that we need to do before we just do gameplay programming

1586
01:21:54,700 --> 01:21:58,600
because it feels like it's a good time to start that and I had said I

1587
01:21:58,600 --> 01:22:00,800
want to do that somewhere around a 200.

1588
01:22:01,900 --> 01:22:04,000
And so we're right about day 250.

1589
01:22:04,000 --> 01:22:07,300
It seems like we're you know we're a little over but that's fine with

1590
01:22:07,300 --> 01:22:07,500
me.

1591
01:22:08,000 --> 01:22:10,000
But I think it's probably a good time to transition over that because

1592
01:22:10,000 --> 01:22:11,400
we've made most of the stuff we need.

1593
01:22:11,400 --> 01:22:13,500
We don't really need to belabor most of the point.

1594
01:22:14,100 --> 01:22:16,100
We can kind of kind of start doing gameplay coding.

1595
01:22:16,100 --> 01:22:17,100
Sometimes, you might think.

1596
01:22:18,000 --> 01:22:18,900
So, we'll do that.

1597
01:22:19,400 --> 01:22:23,800
If you'd like to do that, we'll be doing that tomorrow.

1598
01:22:24,200 --> 01:22:26,100
Come back and check it out.

1599
01:22:26,600 --> 01:22:29,600
And you can see this sort of as the wrap up of this this wave of

1600
01:22:29,600 --> 01:22:30,500
opengl coding.

1601
01:22:31,400 --> 01:22:34,900
As always, if you want to follow along at home, you can if you

1602
01:22:34,900 --> 01:22:37,500
preorder the game on handmade here at org comes with a saw.

1603
01:22:37,700 --> 01:22:38,000
This code.

1604
01:22:38,000 --> 01:22:39,400
So you can follow along every day.

1605
01:22:39,600 --> 01:22:41,100
So if you want to learn from it, that's a cool thing to do.

1606
01:22:41,100 --> 01:22:42,100
We also have Forum site.

1607
01:22:42,100 --> 01:22:46,700
You can go to ask questions if you want to, you know, sort of work on

1608
01:22:46,700 --> 01:22:49,500
the series sort of off stream and have questions about it.

1609
01:22:49,500 --> 01:22:50,600
That's a great place to go.

1610
01:22:50,900 --> 01:22:51,900
We also have a patreon page.

1611
01:22:51,900 --> 01:22:53,900
If you want to support the video series, we have a tweetbot, the

1612
01:22:53,900 --> 01:22:54,800
tweets, the schedule you.

1613
01:22:55,400 --> 01:22:58,500
And if you want more information on the editor that we use on stream,

1614
01:22:58,500 --> 01:23:01,700
it is actually written by someone who is a handmade here.

1615
01:23:01,700 --> 01:23:02,700
Our viewer, mr.

1616
01:23:02,700 --> 01:23:04,600
Fourth dimension on the chat on Webster.

1617
01:23:04,900 --> 01:23:07,600
You can go to his patreon page and you can

1618
01:23:07,700 --> 01:23:10,700
And get your own copy three tiers.

1619
01:23:10,700 --> 01:23:14,600
There's a one dollar per month, tier of $5 per month to attend our

1620
01:23:14,600 --> 01:23:15,100
month of here.

1621
01:23:15,500 --> 01:23:18,700
One dollar month is the editor to $5 a month includes programmability

1622
01:23:18,700 --> 01:23:22,400
and C so you can make your own basically completely customized version

1623
01:23:22,400 --> 01:23:23,300
and $10 a month.

1624
01:23:23,300 --> 01:23:28,000
Gets you like Community contribute like basically like I send him my

1625
01:23:28,500 --> 01:23:30,200
config file that I use and less Fu.

1626
01:23:30,200 --> 01:23:33,700
And and if you do the ten dollar or two, are you get that all that

1627
01:23:33,700 --> 01:23:35,400
code as part of it as well?

1628
01:23:35,400 --> 01:23:36,300
So it's pretty great.

1629
01:23:36,400 --> 01:23:37,500
Check it out and support a good.

1630
01:23:37,600 --> 01:23:38,300
Project.

1631
01:23:38,800 --> 01:23:39,800
Highly recommend it.

1632
01:23:40,400 --> 01:23:43,700
It's coming along pretty nicely, that's about it tomorrow.

1633
01:23:43,700 --> 01:23:44,700
We'll be back here at 5:00 p.m.

1634
01:23:44,700 --> 01:23:45,900
Pacific Standard Time.

1635
01:23:46,200 --> 01:23:50,600
Hope see here, finish up our opengl and have a little party, until

1636
01:23:50,600 --> 01:23:51,100
then take it.

1637
01:23:51,100 --> 01:23:51,600
Easy.

1638
01:23:51,800 --> 01:23:53,800
Have fun programming and I'll see you guys on the internet.

1639
01:23:54,100 --> 01:23:55,100
So long, everybody.

