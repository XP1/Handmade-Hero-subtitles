1
00:00:37,400 --> 00:00:38,500
Crisis averted.

2
00:00:39,400 --> 00:00:39,800
Yes.

3
00:00:39,800 --> 00:00:42,100
The crisis has been averted, hna.

4
00:00:42,100 --> 00:00:42,600
You.

5
00:00:43,700 --> 00:00:45,500
The crisis actually has not been averted.

6
00:00:45,500 --> 00:00:46,400
Unfortunately.

7
00:00:47,000 --> 00:00:49,900
The reason that the stream is starting late today is because

8
00:00:51,000 --> 00:00:54,200
Well, we're having a little bit of a problem.

9
00:00:55,000 --> 00:00:57,000
I wanted to get rid of my taskbar.

10
00:00:57,000 --> 00:00:58,700
I was talking about this on the last.

11
00:01:00,900 --> 00:01:04,800
On the last stream and I thought I had seen, some people say that you

12
00:01:04,800 --> 00:01:06,300
could finally get rid of the taskbar.

13
00:01:06,300 --> 00:01:08,300
Again, used to be able to enter the test bar on.

14
00:01:09,800 --> 00:01:10,800
Windows XP.

15
00:01:10,800 --> 00:01:14,300
And of course, when they introduced their improvements,

16
00:01:15,800 --> 00:01:20,700
Two windows with Vista and 7 where they improved everything.

17
00:01:20,700 --> 00:01:21,500
They improved it.

18
00:01:21,500 --> 00:01:23,000
So that it no longer works.

19
00:01:23,600 --> 00:01:27,900
So you can't actually hide the task bar anymore.

20
00:01:27,900 --> 00:01:32,400
Basically, you only have this thing that basically it always pops up.

21
00:01:32,400 --> 00:01:36,400
If you go back up to the edge of the screen and it's awful.

22
00:01:36,700 --> 00:01:39,200
And so you used to be able to, there's a thing in here that said

23
00:01:39,200 --> 00:01:43,200
taskbar is always on top or whatever and you could uncheck that and

24
00:01:43,200 --> 00:01:44,100
that was awesome.

25
00:01:44,100 --> 00:01:45,500
It was like, totally

26
00:01:45,700 --> 00:01:49,100
Perfect and did exactly what you want because then all of your full

27
00:01:49,100 --> 00:01:52,300
screen Windows would just be over it which is what I wanted.

28
00:01:59,700 --> 00:02:00,600
But I don't know what to say.

29
00:02:01,000 --> 00:02:03,100
So basically, I was trying to get rid of that.

30
00:02:03,200 --> 00:02:06,200
I was looking on the web for some of these things, basically.

31
00:02:06,200 --> 00:02:08,000
And yeah.

32
00:02:09,500 --> 00:02:10,400
Couldn't find it.

33
00:02:12,900 --> 00:02:16,000
There's, there's like some tools you could course they got rid of it.

34
00:02:16,000 --> 00:02:23,900
So thoroughly that you have to see taskbar always on top Windows 7 and

35
00:02:23,900 --> 00:02:26,200
like I was trying to find people who are talking about this sort of

36
00:02:26,200 --> 00:02:31,500
thing and there's like utilities you can install where I tried

37
00:02:31,500 --> 00:02:35,200
installing one of them but didn't actually work.

38
00:02:36,000 --> 00:02:37,300
So basically like

39
00:02:38,300 --> 00:02:41,700
You know, when you're not used to track bar, start menu, BlahBlah, it

40
00:02:41,700 --> 00:02:44,500
seemed like to keep taskbar on top unchecking that box.

41
00:02:44,500 --> 00:02:45,800
This is what I actually wanted.

42
00:02:46,000 --> 00:02:49,700
Like, I've been surpassed the 7 plus Tech taskbar tweaker.

43
00:02:49,800 --> 00:02:50,100
Does.

44
00:02:50,100 --> 00:02:51,300
This job better than my code.

45
00:02:51,300 --> 00:02:53,500
I recommend you selling said, I installed this.

46
00:02:54,500 --> 00:02:57,500
I do not actually see any option for doing it.

47
00:02:57,600 --> 00:02:59,700
So I don't know if I'm just using the tool wrong.

48
00:03:00,000 --> 00:03:01,200
I haven't tried this one yet.

49
00:03:01,200 --> 00:03:04,800
I guess I could try it just to get a few more viruses on my machine.

50
00:03:04,800 --> 00:03:09,200
You know, it's always good but I don't actually know.

51
00:03:09,200 --> 00:03:12,600
Yeah, if it would actually work, I could try it.

52
00:03:13,400 --> 00:03:17,300
And I don't, I just don't understand why this guy thinks that this

53
00:03:17,300 --> 00:03:18,300
tool does it.

54
00:03:18,500 --> 00:03:20,500
They doesn't actually say how you would do it.

55
00:03:21,000 --> 00:03:21,700
You can see here.

56
00:03:21,700 --> 00:03:23,100
Like, I've got this thing installed.

57
00:03:23,100 --> 00:03:24,300
If you open it up, right?

58
00:03:24,400 --> 00:03:26,100
I don't even see an option for it.

59
00:03:26,100 --> 00:03:28,900
I don't even see, I don't even see a heading where the option would

60
00:03:28,900 --> 00:03:29,400
go.

61
00:03:31,700 --> 00:03:35,000
but I don't know, like there just doesn't seem to be

62
00:03:37,200 --> 00:03:38,200
I got nothing.

63
00:03:38,200 --> 00:03:41,500
There doesn't seem to be any any actual thing here to click on.

64
00:03:41,600 --> 00:03:42,200
You know, I'm saying.

65
00:03:44,600 --> 00:03:45,600
You know what I'm saying?

66
00:03:52,200 --> 00:03:53,500
Anyone, no, no.

67
00:03:53,500 --> 00:03:56,100
Non this no one on the stream, probably knows because

68
00:03:57,300 --> 00:04:00,000
I'm guessing that people on the stream, probably have already moved to

69
00:04:00,000 --> 00:04:00,900
some other thing.

70
00:04:01,000 --> 00:04:03,600
I should probably try to install a classic shell and see if that has

71
00:04:03,600 --> 00:04:06,200
it or one of those other shell tools and see if it you know can

72
00:04:06,200 --> 00:04:08,500
replace this whole task bar with something more usable.

73
00:04:09,600 --> 00:04:12,700
But yeah, so he says install 7, plus taskbar speaker.

74
00:04:12,700 --> 00:04:14,300
Here is 7 plus taskbar tweaker.

75
00:04:14,600 --> 00:04:20,500
I do not actually see any options that actually would work dropping.

76
00:04:20,500 --> 00:04:23,100
Hovering thumbnails pin left.

77
00:04:23,100 --> 00:04:26,100
Click other high, the start button that actually does have the start

78
00:04:26,100 --> 00:04:26,400
button.

79
00:04:26,400 --> 00:04:26,900
That doesn't help.

80
00:04:27,400 --> 00:04:28,800
Show desktop button can go away.

81
00:04:28,800 --> 00:04:29,800
That doesn't help either.

82
00:04:29,800 --> 00:04:31,600
Although I'd be fine with having that go.

83
00:04:31,600 --> 00:04:32,600
I never use that button.

84
00:04:33,000 --> 00:04:36,300
Just like s is good, but doesn't help here Reserve empty space doesn't

85
00:04:36,300 --> 00:04:39,400
help doesn't do anything in our case.

86
00:04:39,400 --> 00:04:40,300
I just I don't know.

87
00:04:40,600 --> 00:04:42,600
I guess I could look at the help me.

88
00:04:42,600 --> 00:04:43,600
The help has something.

89
00:04:45,500 --> 00:04:48,200
Let's see, search top.

90
00:04:51,400 --> 00:04:56,100
Some of these symptoms that you tune aspects of the tweeker disabled

91
00:04:56,100 --> 00:04:57,200
10 topmost.

92
00:04:57,200 --> 00:04:57,600
Oh,

93
00:04:59,100 --> 00:05:00,100
wait, so

94
00:05:01,500 --> 00:05:07,900
It does have a setting, but how do you access the setting options X?

95
00:05:08,900 --> 00:05:11,700
That's what you can use to manage objects is it can be opened from the

96
00:05:11,700 --> 00:05:12,900
tray icon?

97
00:05:13,300 --> 00:05:13,900
Okay.

98
00:05:14,100 --> 00:05:14,700
All right.

99
00:05:14,700 --> 00:05:15,600
All right.

100
00:05:16,600 --> 00:05:19,400
Let me see if I right click on the tray icon Advanced.

101
00:05:20,000 --> 00:05:21,100
Okay?

102
00:05:22,600 --> 00:05:23,100
Wait for it.

103
00:05:23,100 --> 00:05:23,700
People.

104
00:05:23,700 --> 00:05:24,700
This could be exciting.

105
00:05:24,900 --> 00:05:26,300
This could be exciting right here.

106
00:05:26,500 --> 00:05:27,300
Apply.

107
00:05:28,100 --> 00:05:28,800
Okay.

108
00:05:29,900 --> 00:05:31,800
I think I also accidentally shut this thing off.

109
00:05:31,800 --> 00:05:33,200
So it's a run at startup.

110
00:05:34,100 --> 00:05:34,500
Okay.

111
00:05:35,500 --> 00:05:36,800
All right done.

112
00:05:37,800 --> 00:05:38,500
There we go.

113
00:05:39,500 --> 00:05:40,500
Let's take a look.

114
00:05:42,200 --> 00:05:49,100
That does not appear to be disabling, topmost to me, but maybe it did.

115
00:05:49,100 --> 00:05:51,000
I don't know, doesn't look like it.

116
00:05:52,500 --> 00:05:54,400
Let's take a look by default.

117
00:05:54,400 --> 00:05:56,200
Passwords are taught this option, allows change Behavior.

118
00:05:56,200 --> 00:05:58,300
Always on top, not always on top, but not over.

119
00:05:58,300 --> 00:05:59,800
Okay, so I gotta set it to two.

120
00:06:00,700 --> 00:06:03,200
Rtfm, I guess is the answer there.

121
00:06:03,200 --> 00:06:04,100
Let's try it.

122
00:06:04,100 --> 00:06:05,400
One minute left in the Stream.

123
00:06:05,700 --> 00:06:06,700
Can we do it?

124
00:06:07,100 --> 00:06:11,000
Can we do it to return?

125
00:06:11,400 --> 00:06:11,900
Apply?

126
00:06:12,000 --> 00:06:12,600
Okay.

127
00:06:14,300 --> 00:06:16,300
Oh my God, look at it.

128
00:06:17,300 --> 00:06:18,600
Are you looking at it?

129
00:06:19,100 --> 00:06:20,500
Look at how beautiful that is.

130
00:06:21,500 --> 00:06:22,900
That is so excellent.

131
00:06:23,600 --> 00:06:27,100
Although it ruins other topmost windows.

132
00:06:28,500 --> 00:06:32,300
Like my top most windows are now not topmost anymore.

133
00:06:39,900 --> 00:06:42,400
So close and yet so far.

134
00:06:43,700 --> 00:06:46,100
Why would you taunt me like that people?

135
00:06:47,400 --> 00:06:48,200
Why?

136
00:06:50,300 --> 00:06:54,600
Well, I guess we could also just double-check trying could exit the

137
00:06:54,600 --> 00:06:58,000
timer app and then start the timer app again.

138
00:06:58,500 --> 00:07:00,900
I suppose it's see if that helps.

139
00:07:04,700 --> 00:07:05,300
There we go.

140
00:07:05,300 --> 00:07:06,200
So I guess it just it.

141
00:07:06,200 --> 00:07:07,900
Did it to all top level Windows.

142
00:07:07,900 --> 00:07:09,500
It must have messed up the Z order.

143
00:07:10,100 --> 00:07:10,400
All right.

144
00:07:10,400 --> 00:07:11,700
So what day are we on?

145
00:07:11,800 --> 00:07:12,700
I don't even know.

146
00:07:13,300 --> 00:07:13,800
What is it day?

147
00:07:13,800 --> 00:07:14,500
37.

148
00:07:14,500 --> 00:07:18,900
I want to say, Let's Take a Look, What day, what actual day are we at

149
00:07:18,900 --> 00:07:19,500
right now?

150
00:07:20,800 --> 00:07:21,300
Sorry.

151
00:07:21,400 --> 00:07:23,600
We may have actually solved this problem.

152
00:07:23,600 --> 00:07:25,100
So I'm pretty happy about that.

153
00:07:25,500 --> 00:07:27,800
But let's see what make sure we're on the right day here.

154
00:07:28,100 --> 00:07:30,300
Video archive day, 37 was yesterday.

155
00:07:30,700 --> 00:07:32,700
So we're on day 38 today.

156
00:07:33,300 --> 00:07:34,100
All right.

157
00:07:34,500 --> 00:07:35,900
Well, that's pretty exciting.

158
00:07:35,900 --> 00:07:38,500
You have to admit that is is pretty exciting.

159
00:07:38,500 --> 00:07:40,400
I am relatively excited about that.

160
00:07:42,500 --> 00:07:43,800
Let's get all this stuff straightened out.

161
00:07:43,800 --> 00:07:44,100
Again.

162
00:07:44,300 --> 00:07:48,000
That means we no longer have this ridiculous unused area at the top of

163
00:07:48,000 --> 00:07:48,600
the screen.

164
00:07:49,100 --> 00:07:52,000
We can actually have everything go up to the height that was supposed

165
00:07:52,000 --> 00:07:52,300
to be.

166
00:07:52,300 --> 00:07:54,300
Let's see, does RE/MAX go to the whole?

167
00:07:54,300 --> 00:07:55,300
Look at that?

168
00:07:56,300 --> 00:07:57,600
That's fantastic.

169
00:07:58,100 --> 00:07:59,600
Well, that is just great news.

170
00:07:59,800 --> 00:08:01,000
I'm very happy about that.

171
00:08:01,000 --> 00:08:02,300
That is super cool.

172
00:08:03,000 --> 00:08:04,400
You know, this is a little things.

173
00:08:04,600 --> 00:08:05,300
You know, I'm saying?

174
00:08:05,500 --> 00:08:08,400
Even if someone else had to write them for for Microsoft, at least

175
00:08:08,400 --> 00:08:10,000
someone did there we go.

176
00:08:10,900 --> 00:08:11,700
All right.

177
00:08:11,800 --> 00:08:13,700
I guess we can start the stream now.

178
00:08:18,500 --> 00:08:21,400
I hope everyone shared in that Triumph.

179
00:08:22,500 --> 00:08:23,700
I don't know if they did or not.

180
00:08:23,800 --> 00:08:24,900
Can't see what's going on on there.

181
00:08:25,600 --> 00:08:26,600
Yeah.

182
00:08:27,600 --> 00:08:30,800
Yeah, I think everyone's pretty except excited.

183
00:08:30,900 --> 00:08:31,800
I know I am.

184
00:08:32,000 --> 00:08:37,400
So let's go ahead and get the, get the gloves on here and we will, we

185
00:08:37,400 --> 00:08:38,500
will go ahead and start the stream.

186
00:08:38,500 --> 00:08:40,799
Now that we've had that, that small victory.

187
00:08:42,299 --> 00:08:45,400
I guess, I can close the old command prompt from yesterday as well.

188
00:08:45,600 --> 00:08:48,700
Get back to our standard standard screen.

189
00:08:49,900 --> 00:08:54,700
And we can actually get programming, which seems like a pretty good

190
00:08:54,700 --> 00:08:55,000
idea.

191
00:08:55,000 --> 00:08:58,900
Since this is supposed to be handmade hero, not handmade fighting with

192
00:08:58,900 --> 00:08:59,800
the windows user interface.

193
00:09:00,000 --> 00:09:03,300
Taskbar out of the way, even though sometimes that is what programming

194
00:09:03,300 --> 00:09:05,600
ends up being fighting with Microsoft to get it out of your way is

195
00:09:05,600 --> 00:09:08,200
often thing that does happen when you're programming.

196
00:09:08,200 --> 00:09:10,500
So, you know, it's not that far off I suppose.

197
00:09:10,900 --> 00:09:18,300
But let us go ahead and return to the program.

198
00:09:18,600 --> 00:09:19,400
Hello, everyone.

199
00:09:19,400 --> 00:09:23,900
Welcome to day 38 of handmade hero the show where we coded complete

200
00:09:23,900 --> 00:09:27,300
game from scratch using nothing, but our typing a little fingers.

201
00:09:27,400 --> 00:09:28,800
No libraries, no engines.

202
00:09:29,100 --> 00:09:29,900
So we can actually see

203
00:09:30,000 --> 00:09:33,100
See the complete process of making game and you can learn how

204
00:09:33,100 --> 00:09:36,900
absolutely everything works, right from where the pixels are drawn on

205
00:09:36,900 --> 00:09:40,300
the screen, all the way up to how the game code operates at a high

206
00:09:40,300 --> 00:09:40,800
level.

207
00:09:40,900 --> 00:09:46,600
So today we happen to be at the point where we are putting Sprites on

208
00:09:46,600 --> 00:09:50,400
the screen and we are not doing our full render yet because that's a

209
00:09:50,400 --> 00:09:51,600
little bit more of an involved process.

210
00:09:51,600 --> 00:09:53,900
But basically we just wanted to have something where we could easily

211
00:09:53,900 --> 00:09:57,500
put some graphics up on the screen for our own testing purposes.

212
00:09:57,500 --> 00:09:59,800
As we are sort of going through and figuring out what we want.

213
00:10:00,000 --> 00:10:00,900
Engine architecture.

214
00:10:00,900 --> 00:10:02,900
And one of the big parts of that obviously is going to be what we want

215
00:10:02,900 --> 00:10:05,700
for our rendering architecture and it's kind of hard to make those

216
00:10:05,700 --> 00:10:08,300
decisions without something to work with.

217
00:10:08,300 --> 00:10:10,000
So that's what we wrote yesterday.

218
00:10:10,000 --> 00:10:11,800
But we have a couple things left that we need to do to it.

219
00:10:11,800 --> 00:10:13,300
So that's what we're going to be doing today.

220
00:10:13,500 --> 00:10:16,400
If you'd like to follow along at home and you went to handmade here at

221
00:10:16,400 --> 00:10:17,500
Oregon pre-ordered, the source code.

222
00:10:17,500 --> 00:10:20,700
You should have gotten a link in your email address in your email,

223
00:10:20,700 --> 00:10:24,800
inbox and that link will allow you to download both the art assets

224
00:10:24,800 --> 00:10:28,300
that were using and it will also allow you to download the source

225
00:10:28,300 --> 00:10:28,500
code.

226
00:10:28,500 --> 00:10:29,800
So if you download that source code

227
00:10:30,100 --> 00:10:31,000
today is day 38.

228
00:10:31,000 --> 00:10:34,600
So go ahead and unzip day, 37 source code out of the source code ZIP

229
00:10:34,600 --> 00:10:35,000
file.

230
00:10:35,000 --> 00:10:37,000
So zip file is basically has a ton of little zip files in.

231
00:10:37,000 --> 00:10:38,800
It's like a Russian nesting doll kind of thing.

232
00:10:39,800 --> 00:10:40,700
And there you go.

233
00:10:40,900 --> 00:10:43,900
That will basically give you the same source code that I am starting

234
00:10:43,900 --> 00:10:45,100
with right now.

235
00:10:45,700 --> 00:10:48,100
So let's go ahead, we've got a bunch of stuff to do.

236
00:10:48,100 --> 00:10:49,400
So, let's get to it.

237
00:10:50,100 --> 00:10:53,500
I'm going to open up the debugger here and just point out where we

238
00:10:53,500 --> 00:10:57,600
were before, if you remember, we were looking at putting the Sprite up

239
00:10:57,600 --> 00:10:59,200
on the screen, but the colors were wrong.

240
00:10:59,500 --> 00:10:59,800
And so,

241
00:11:00,000 --> 00:11:01,400
Question was, what was going on there?

242
00:11:01,400 --> 00:11:04,000
And it turned out that since I think it was my fault.

243
00:11:04,000 --> 00:11:04,500
Actually.

244
00:11:04,700 --> 00:11:09,200
I had run a little resizing tool on some of the I'd run imagemagick to

245
00:11:09,200 --> 00:11:14,300
resize, some of the bitmaps and it wrote them out in a different byte

246
00:11:14,300 --> 00:11:17,000
order than the ones that came straight out again.

247
00:11:17,300 --> 00:11:21,100
And so, basically, what we have to do today, we figured out this at

248
00:11:21,100 --> 00:11:23,700
the end of last dream that basically the bitmap header has these

249
00:11:23,700 --> 00:11:26,400
things of the bottom red green and blue mask that we figured out, and

250
00:11:26,400 --> 00:11:27,700
we've got them laid out in here.

251
00:11:27,700 --> 00:11:29,800
So we know where they are and the in the files.

252
00:11:29,900 --> 00:11:34,000
Well, that basically tell us where the red green and blue components

253
00:11:34,000 --> 00:11:38,400
go and it's I guess assumed that the alpha is just whatever these

254
00:11:38,400 --> 00:11:41,600
aren't because there's obviously an alpha component as well and there

255
00:11:41,600 --> 00:11:43,800
isn't an alpha mask parameter as far as I can tell.

256
00:11:43,800 --> 00:11:47,000
Although maybe there actually is an extended version of the file

257
00:11:47,000 --> 00:11:47,300
format.

258
00:11:47,300 --> 00:11:49,900
I'm not sure, but when we were looking on, on the website of the

259
00:11:49,900 --> 00:11:53,400
documentation, it looked like it was only red green and blue but

260
00:11:53,400 --> 00:11:55,300
doesn't really matter because we can tell if the alpha is because it's

261
00:11:55,300 --> 00:11:56,700
where the red green and blue isn't.

262
00:12:00,200 --> 00:12:00,700
so,

263
00:12:01,900 --> 00:12:05,100
what we need to do here is we need to, I don't know if you remember

264
00:12:05,100 --> 00:12:05,400
this.

265
00:12:05,400 --> 00:12:08,500
But basically, we already we're doing a thing where we were swapping

266
00:12:08,500 --> 00:12:10,800
around the order of the stuff that came in because it wasn't the order

267
00:12:10,800 --> 00:12:11,300
that we wanted.

268
00:12:11,300 --> 00:12:15,600
So, our pixels were packed with a BGR, which is this thing right here.

269
00:12:15,900 --> 00:12:17,800
And so this is actually not correct anymore.

270
00:12:17,800 --> 00:12:20,300
This comment we've learned is erroneous.

271
00:12:20,300 --> 00:12:22,800
And so basically what we need to do is change this to say what's

272
00:12:22,800 --> 00:12:28,500
actually going on, which is the byte order in memory is determined by

273
00:12:29,000 --> 00:12:30,400
the header itself.

274
00:12:31,200 --> 00:12:31,500
So,

275
00:12:31,700 --> 00:12:39,400
We have to read out the masks and convert our pixels ourselves.

276
00:12:40,000 --> 00:12:40,400
Right?

277
00:12:40,600 --> 00:12:42,600
And so that's what we're going to have to do today.

278
00:12:42,600 --> 00:12:45,500
So basically now we assume that when we load one of these BMP files,

279
00:12:45,500 --> 00:12:48,700
we have no idea what order things are in.

280
00:12:49,000 --> 00:12:52,700
And we basically have to go ahead and figure out where they are.

281
00:12:52,700 --> 00:12:55,400
Now we could for we, now know, we know that, basically, none of the

282
00:12:55,400 --> 00:12:58,100
files that we're saving, you're going to have anything other than 8

283
00:12:58,100 --> 00:12:59,600
bits per channel.

284
00:12:59,800 --> 00:13:01,500
So, we do know that we're basically looking at a number

285
00:13:01,600 --> 00:13:05,800
0xff, kind of a mass, but we just don't know where it actually is in

286
00:13:05,800 --> 00:13:06,600
the 32 bits.

287
00:13:06,600 --> 00:13:09,000
We don't really know where it shows up.

288
00:13:09,300 --> 00:13:13,500
So what we need to do is we basically need to get a shift value for

289
00:13:13,500 --> 00:13:15,600
each of our components.

290
00:13:16,700 --> 00:13:19,900
So, if you think about it, we basically have a redshift not to be

291
00:13:19,900 --> 00:13:23,400
confused with the kind of red shift that they use in astronomy.

292
00:13:23,600 --> 00:13:26,000
Obviously, that's a different kind of red ship, but we have a

293
00:13:26,000 --> 00:13:29,800
redshift, a green shift, a blue shift, and an alpha shift, right?

294
00:13:30,300 --> 00:13:31,500
There we go.

295
00:13:31,500 --> 00:13:34,400
And so what we're going to have to do, is we have to figure out what

296
00:13:34,400 --> 00:13:37,600
those are and they're gonna have to come in here and actually get them

297
00:13:37,600 --> 00:13:38,200
out.

298
00:13:38,200 --> 00:13:38,600
Right?

299
00:13:38,600 --> 00:13:43,000
And so when we actually build our thing, we could make this a little

300
00:13:43,000 --> 00:13:47,000
simple by taking the actual color value, grab that, and then we could

301
00:13:47,000 --> 00:13:47,900
do it this way.

302
00:13:47,900 --> 00:13:50,200
Just make it a little more easy for us to write here.

303
00:13:50,200 --> 00:13:54,200
We basically can figure that we know, we need to put pack things such

304
00:13:54,200 --> 00:13:55,400
that the alphas on top.

305
00:13:55,400 --> 00:13:57,400
Then the red, then the green than the blue, right?

306
00:13:57,400 --> 00:14:00,200
So what we need to do essentially, is

307
00:14:00,300 --> 00:14:03,800
We need to shift the red.

308
00:14:05,800 --> 00:14:06,800
Well, you know what?

309
00:14:06,900 --> 00:14:09,900
Unfortunately, I don't know that there's really any way we can do the

310
00:14:09,900 --> 00:14:13,300
shift totally generically in with only one shift.

311
00:14:13,300 --> 00:14:15,800
I'd have to think about that because really, we need to shift it.

312
00:14:15,800 --> 00:14:19,400
It could have to shift in either direction, right, where, where the

313
00:14:19,400 --> 00:14:20,800
red is in our source.

314
00:14:20,800 --> 00:14:25,000
I don't know if you guys are already on the same page here in terms of

315
00:14:25,000 --> 00:14:25,700
what I want to do.

316
00:14:25,700 --> 00:14:28,600
But basically, I've got something where I've done.

317
00:14:28,700 --> 00:14:31,300
You know, I've got a 32-bit value, right?

318
00:14:31,300 --> 00:14:32,800
This is my 32-bit value.

319
00:14:33,200 --> 00:14:35,400
And essentially, I've got the eight.

320
00:14:35,600 --> 00:14:38,400
Here, the this is 8, Bits, 8, B 8, B, 8 Bits, right?

321
00:14:38,400 --> 00:14:42,500
This is the low, this is the high, and basically, what I need to do is

322
00:14:42,500 --> 00:14:46,000
I've got, you know, some set of things.

323
00:14:46,500 --> 00:14:48,200
I've got the red is Summer of the green of Summer.

324
00:14:48,200 --> 00:14:49,200
The blue is somewhere whatever.

325
00:14:49,200 --> 00:14:53,300
So I've got my ABCD and I basically need to rearrange these right in

326
00:14:53,300 --> 00:14:54,400
some arbitrary way.

327
00:14:54,400 --> 00:14:57,100
Like I have no idea where they actually need to go.

328
00:14:57,100 --> 00:14:59,700
But I know that I'm going to determine where they need to go.

329
00:15:00,100 --> 00:15:03,600
So what I need to be able to do is I need to be able to mask it out

330
00:15:03,600 --> 00:15:06,200
and then shift it to the right location, but I don't actually know

331
00:15:06,200 --> 00:15:07,700
which direction is going to have to go.

332
00:15:07,900 --> 00:15:10,900
It may be that like this was the green before and the green now has to

333
00:15:10,900 --> 00:15:11,300
go here.

334
00:15:11,300 --> 00:15:13,500
So the shift would actually be a left shift, right?

335
00:15:13,500 --> 00:15:17,100
It be getting higher but it could be the other way around where it's

336
00:15:17,100 --> 00:15:17,600
actually below.

337
00:15:17,600 --> 00:15:19,800
And so it's actually Gonna Be Right shift, right?

338
00:15:20,600 --> 00:15:23,700
And since I don't actually know if there's really any way to write

339
00:15:23,700 --> 00:15:27,000
that concisely, what I think I'm going to have to do instead is first

340
00:15:27,000 --> 00:15:28,800
shift it down and then shift it up.

341
00:15:28,800 --> 00:15:29,900
So I know that my shifts are

342
00:15:30,000 --> 00:15:34,700
Always basically are always going to be to the right for the

343
00:15:34,700 --> 00:15:35,700
parametric amount.

344
00:15:35,700 --> 00:15:38,400
So basically my to take the C and I'll shift it down by the alpha

345
00:15:38,400 --> 00:15:39,900
shift value, right?

346
00:15:40,000 --> 00:15:45,600
Whatever that Alpha shift value is, I will end it with with the mask.

347
00:15:45,600 --> 00:15:48,800
So that I know that I've basically, now just got the alpha sitting in

348
00:15:48,800 --> 00:15:51,900
the low eight bits, and then I'll shift it up by 24 to put it in the

349
00:15:51,900 --> 00:15:55,800
position where I actually want my Alpha to be right.

350
00:15:56,100 --> 00:15:59,000
So that is basically what I'm going to do for each of my values.

351
00:15:59,000 --> 00:15:59,700
Just so I can

352
00:16:00,100 --> 00:16:02,100
Usually a lot of times people call this like a swizzle.

353
00:16:02,700 --> 00:16:04,000
Not really sure why they call it a swizzle.

354
00:16:04,000 --> 00:16:07,400
But a lot of times I do so I basically want to get the red the green

355
00:16:07,400 --> 00:16:10,400
and the Blue by shifting them down like this masking them and then

356
00:16:10,400 --> 00:16:14,000
putting them back into the place where I actually want them to be like

357
00:16:14,000 --> 00:16:14,500
that.

358
00:16:14,800 --> 00:16:18,700
And so really, all I need to do here is figure out what the shift

359
00:16:18,700 --> 00:16:23,600
would be to get whatever the value is down into the bottom down to the

360
00:16:23,600 --> 00:16:24,000
bottom eight.

361
00:16:24,000 --> 00:16:28,100
Bits problem is, I don't actually have that.

362
00:16:28,100 --> 00:16:29,300
I have the mask.

363
00:16:30,400 --> 00:16:33,300
And I don't have an alpha mask technically, right?

364
00:16:33,800 --> 00:16:34,200
Hello.

365
00:16:34,400 --> 00:16:35,000
That was odd.

366
00:16:36,600 --> 00:16:37,700
What I actually have.

367
00:16:37,900 --> 00:16:39,300
I've got the red mask, right?

368
00:16:39,300 --> 00:16:41,400
That comes out of the header red mask.

369
00:16:41,700 --> 00:16:44,100
I've got the the green mask.

370
00:16:44,900 --> 00:16:49,000
I've got the blue mask, but the alpha mask actually, isn't there?

371
00:16:49,100 --> 00:16:50,200
As far as we know, right?

372
00:16:50,200 --> 00:16:53,200
I don't actually have an alpha mask.

373
00:16:53,300 --> 00:16:56,500
So what I'm going to do is I'm going to assume that the alpha mask is

374
00:16:56,500 --> 00:16:59,100
just wherever there wasn't a red, a green or a blue.

375
00:16:59,300 --> 00:16:59,800
So if I

376
00:16:59,900 --> 00:17:01,400
Or the other mask together.

377
00:17:01,400 --> 00:17:04,300
Basically make a composite mass that would mass for red green and

378
00:17:04,300 --> 00:17:04,599
blue.

379
00:17:04,599 --> 00:17:05,599
All the same time.

380
00:17:05,900 --> 00:17:08,500
I'm going to assume that the not of that.

381
00:17:08,500 --> 00:17:11,099
If I flip all the bits in that, that I'm going to get basically where

382
00:17:11,099 --> 00:17:12,099
the alpha is, right?

383
00:17:12,099 --> 00:17:15,800
Because that will basically give us wherever the other ones aren't,

384
00:17:15,800 --> 00:17:16,400
right?

385
00:17:16,700 --> 00:17:19,800
And I'll just I'll dummy up these values for a moment just so I can

386
00:17:20,300 --> 00:17:21,400
show you what I'm talking about.

387
00:17:21,400 --> 00:17:25,900
For those of you who may not be super comfortable with bit operations

388
00:17:25,900 --> 00:17:26,300
yet.

389
00:17:27,599 --> 00:17:31,600
I think it's amusing, actually, but I think someone was actually

390
00:17:31,600 --> 00:17:34,300
asking, just on like a stream like yesterday or the day before or

391
00:17:34,300 --> 00:17:39,800
whether we, how, if B operations, normally get used in today is like

392
00:17:39,800 --> 00:17:41,400
all about bid operations, right?

393
00:17:41,600 --> 00:17:43,500
So the answer is definitely yes.

394
00:17:44,000 --> 00:17:47,100
Anyway, so if we read out the red green, the blue mask, you can see

395
00:17:47,100 --> 00:17:47,800
them here, right?

396
00:17:47,800 --> 00:17:50,500
There's the red mask, the green mask, and the blue mask, that's saying

397
00:17:50,500 --> 00:17:52,900
it's basically the Reds in the high Greens.

398
00:17:52,900 --> 00:17:55,700
In the second down the blues and the second from the bottom and the

399
00:17:55,700 --> 00:17:56,600
end the alpha.

400
00:17:56,600 --> 00:17:57,000
We don't

401
00:17:57,100 --> 00:17:58,200
No, we don't get that.

402
00:17:58,200 --> 00:17:58,400
Right.

403
00:17:58,400 --> 00:17:59,900
So what I'm going to do is going to order them all together.

404
00:18:00,000 --> 00:18:04,800
Which will basically produce 0xffff, right?

405
00:18:04,900 --> 00:18:07,200
And then I'm going to knot it so you can see that.

406
00:18:07,200 --> 00:18:10,900
Basically what I get is I get what the the part is that isn't filled

407
00:18:10,900 --> 00:18:13,000
in in any of these other ones, right?

408
00:18:13,200 --> 00:18:14,900
And so that's what that that's what I wanted.

409
00:18:14,900 --> 00:18:16,400
Just wanted to fill in that extra value.

410
00:18:16,400 --> 00:18:16,900
Right?

411
00:18:16,900 --> 00:18:20,200
And I can do that a little more explicitly, if you guys want just to

412
00:18:20,200 --> 00:18:22,100
just to see what I'm talking about here.

413
00:18:22,200 --> 00:18:22,700
Right?

414
00:18:23,000 --> 00:18:24,300
I can do it in two steps.

415
00:18:24,800 --> 00:18:28,800
I wish they allowed you to step into an expression and be so much

416
00:18:28,800 --> 00:18:29,100
nicer.

417
00:18:29,100 --> 00:18:29,500
God.

418
00:18:29,500 --> 00:18:29,800
What do

419
00:18:30,000 --> 00:18:31,700
All the things debuggers could do and don't.

420
00:18:32,200 --> 00:18:34,700
So there's the alpha mask first before I have not had it right?

421
00:18:34,700 --> 00:18:36,300
You can see basically, or them together.

422
00:18:36,300 --> 00:18:39,300
I get the composite of all of those masks, basically.

423
00:18:39,600 --> 00:18:43,200
And then the not just flips, just flips what the actual values are,

424
00:18:43,200 --> 00:18:43,500
right?

425
00:18:43,500 --> 00:18:45,700
So that's what that's what I was doing there.

426
00:18:46,200 --> 00:18:50,200
So that gives you all the masks, but now we have a problem, which is

427
00:18:50,200 --> 00:18:54,600
basically, we need to actually know, essentially, what the lowest bit

428
00:18:54,600 --> 00:18:56,500
is that set in these values, right?

429
00:18:56,500 --> 00:18:58,200
Because we need to know how far down to shift.

430
00:18:58,200 --> 00:18:59,900
So we're simply want to count how many

431
00:19:00,000 --> 00:19:04,100
There are that are zero starting from the first bit and going up to

432
00:19:04,100 --> 00:19:07,400
the very first bit that set right now.

433
00:19:07,600 --> 00:19:10,000
What's interesting about this is, this is actually something the

434
00:19:10,000 --> 00:19:13,100
processor can, sometimes, actually, just do for you.

435
00:19:13,500 --> 00:19:15,900
It's called a bit scan, right?

436
00:19:16,400 --> 00:19:18,600
And basically, like, well, you know what?

437
00:19:18,600 --> 00:19:20,800
I can even probably search for it here, right?

438
00:19:21,200 --> 00:19:24,300
So if I look in here and say, B can forward, there we go.

439
00:19:24,900 --> 00:19:27,400
If I take a look at this here, you can look at the msdn.

440
00:19:27,600 --> 00:19:29,600
It's actually compiler intrinsic, the compiler.

441
00:19:29,600 --> 00:19:29,800
Can

442
00:19:29,900 --> 00:19:31,200
You instructions for it.

443
00:19:31,300 --> 00:19:34,000
Basically, what it says is, it'll search from the least significant

444
00:19:34,000 --> 00:19:34,900
bit, right?

445
00:19:34,900 --> 00:19:37,800
Which if you remember, if I was least significance at the bottom,

446
00:19:37,800 --> 00:19:38,000
right?

447
00:19:38,000 --> 00:19:40,300
So this is this is we're talking about the bit here.

448
00:19:40,400 --> 00:19:41,600
This is the most significant.

449
00:19:41,600 --> 00:19:43,200
This is the least significant bit.

450
00:19:43,400 --> 00:19:44,900
This is the most significant one, right?

451
00:19:44,900 --> 00:19:46,500
And this in our 32-bit value.

452
00:19:47,500 --> 00:19:50,400
So this is B 31, and this is B 0.

453
00:19:51,000 --> 00:19:51,300
Okay.

454
00:19:51,300 --> 00:19:53,200
So basically we do B, can forward.

455
00:19:53,200 --> 00:19:53,800
What we can do.

456
00:19:53,800 --> 00:19:55,100
There is we can say, okay.

457
00:19:55,500 --> 00:19:59,800
What I'd like you to do is, give me back whatever the position.

458
00:20:00,000 --> 00:20:03,200
Mission was where the first bit was set.

459
00:20:03,200 --> 00:20:03,400
Right?

460
00:20:03,400 --> 00:20:06,700
So tell me which bit was the first one set, which is kind of what we

461
00:20:06,700 --> 00:20:06,900
want.

462
00:20:06,900 --> 00:20:08,000
Because up here somewhere.

463
00:20:08,000 --> 00:20:12,200
We've got eight bits set, right somewhere.

464
00:20:12,500 --> 00:20:15,600
And we want to know how far to shift them down so that they line up

465
00:20:15,600 --> 00:20:16,300
right here.

466
00:20:16,400 --> 00:20:17,400
So they start here.

467
00:20:18,000 --> 00:20:20,800
And so really what we're trying to do is we're trying to do a bit scan

468
00:20:21,100 --> 00:20:23,000
to find where that value is, right?

469
00:20:23,200 --> 00:20:25,900
So we can implement this ourselves obviously, right?

470
00:20:25,900 --> 00:20:29,800
We could go ahead and actually search for it so I could do for example

471
00:20:29,900 --> 00:20:34,600
I could come in here and say internal and I could basically have I

472
00:20:34,600 --> 00:20:38,600
guess a Bool 32, for example, if I guess I don't really know because

473
00:20:38,600 --> 00:20:41,300
this the way that this processor I don't actually remember what the

474
00:20:41,400 --> 00:20:44,600
how the actual instruction works, but it looks like the way this thing

475
00:20:44,600 --> 00:20:44,900
works.

476
00:20:45,200 --> 00:20:49,400
Is it basically returns a Boolean that says whether or not it found a

477
00:20:49,400 --> 00:20:53,900
bit at all and then it writes to an index to tell you where we're that

478
00:20:53,900 --> 00:20:56,400
index, where it did actually find it.

479
00:20:57,100 --> 00:20:59,800
So if we were going to mirror the way that that work base,

480
00:21:00,400 --> 00:21:02,500
It's an unsigned care that it returns.

481
00:21:03,100 --> 00:21:05,100
And so I don't actually know that I care about that so much.

482
00:21:05,100 --> 00:21:08,900
I'm going to do a un 32 there and then it's going to be an unsigned

483
00:21:08,900 --> 00:21:09,000
in.

484
00:21:09,000 --> 00:21:11,000
That's the that's the index as well.

485
00:21:11,200 --> 00:21:14,400
So basically it looks something like this.

486
00:21:16,500 --> 00:21:19,700
It's can forward, right?

487
00:21:20,700 --> 00:21:25,600
And if I go ahead in here and say, all right, I want to implement this

488
00:21:25,600 --> 00:21:26,700
myself, right?

489
00:21:26,700 --> 00:21:28,500
You can kind of see how we would do it.

490
00:21:28,600 --> 00:21:30,500
It's not particularly complicated, right?

491
00:21:30,500 --> 00:21:32,700
We just have a un 32.

492
00:21:32,700 --> 00:21:36,200
Well, I can actually do a pool 32 here because it's still 32-bit value

493
00:21:36,200 --> 00:21:39,400
and I can, you know, found equals false.

494
00:21:39,700 --> 00:21:45,000
I can then do a search like literally with a for Loop, right, which

495
00:21:45,000 --> 00:21:46,200
is, you know,

496
00:21:46,300 --> 00:21:50,500
Equals zero, test is less than 32 plus plus test, right?

497
00:21:50,800 --> 00:21:55,900
And then I can do value and one shifted up by whatever the test amount

498
00:21:55,900 --> 00:21:56,300
is.

499
00:21:56,800 --> 00:21:59,500
And if that turns out to be set, right?

500
00:21:59,500 --> 00:22:04,000
If value, and one should set up test, turns out to be set, then I will

501
00:22:04,000 --> 00:22:10,500
write the value of the bit into the result and otherwise, I will not

502
00:22:10,500 --> 00:22:15,400
and so that will basically give me, you know, whichever one.

503
00:22:16,700 --> 00:22:17,300
It hits.

504
00:22:17,600 --> 00:22:19,300
Now if I find one.

505
00:22:20,100 --> 00:22:20,700
Oh, sorry.

506
00:22:20,700 --> 00:22:25,200
I've I've actually done that slightly backwards if we're trying to

507
00:22:25,200 --> 00:22:29,100
look for the first but that's set not the first with that's not set.

508
00:22:29,200 --> 00:22:31,500
So we actually as soon as we find one that is set.

509
00:22:31,600 --> 00:22:35,800
We want to stop looking and if we didn't hit one, we will write to our

510
00:22:35,800 --> 00:22:36,500
index value, right?

511
00:22:36,500 --> 00:22:42,300
So if it's a zero, we count that as a, as a as an index.

512
00:22:44,700 --> 00:22:45,300
Okay, nevermind.

513
00:22:45,300 --> 00:22:46,200
No, I'm correct.

514
00:22:46,200 --> 00:22:46,800
I was correct.

515
00:22:46,800 --> 00:22:47,600
The first I'm sorry.

516
00:22:47,600 --> 00:22:49,300
I got I confused my own self there.

517
00:22:49,700 --> 00:22:52,900
As soon as we find out the set were actually trying to return that

518
00:22:52,900 --> 00:22:53,200
index.

519
00:22:53,200 --> 00:22:56,000
So we just set the index equal to the one we found and we break out.

520
00:22:56,100 --> 00:22:57,100
Everything should be fine.

521
00:22:57,100 --> 00:22:57,600
Right?

522
00:22:59,300 --> 00:23:03,100
And and I guess we set found equal to True here so that we know that

523
00:23:03,100 --> 00:23:05,900
we actually found when we can return the value properly.

524
00:23:06,200 --> 00:23:08,900
Now, let me take a look here because since I confused my own self

525
00:23:09,000 --> 00:23:12,600
during the explanation, let's actually go ahead and make sure that we

526
00:23:12,600 --> 00:23:13,600
actually did it correctly.

527
00:23:14,300 --> 00:23:20,300
So this is redshift, we pass the address of red shift and we will

528
00:23:20,300 --> 00:23:25,400
basically look and see red found equals that and we can assert read

529
00:23:25,400 --> 00:23:29,100
found like so, and then we'll compile that.

530
00:23:29,600 --> 00:23:30,000
Oh, right.

531
00:23:30,000 --> 00:23:32,000
We already have the redshift we go.

532
00:23:33,200 --> 00:23:38,900
So, and what was the problem?

533
00:23:39,300 --> 00:23:42,300
Cannot convert argument one from in 32?

534
00:23:42,400 --> 00:23:43,100
Oh, yes, right.

535
00:23:43,100 --> 00:23:44,700
Sorry you and 32, there we go.

536
00:23:45,500 --> 00:23:51,400
So, if I go ahead in here and actually step into it, what I should

537
00:23:51,400 --> 00:23:53,000
find is that I pass in here.

538
00:23:53,000 --> 00:23:54,500
I've got a value that I'm checking for.

539
00:23:54,500 --> 00:23:55,700
It's all the way at the top.

540
00:23:55,800 --> 00:23:58,900
So I'm expecting the value to basically 24, right?

541
00:23:59,200 --> 00:23:59,900
So I come in here.

542
00:24:00,800 --> 00:24:05,200
And I keep shifting up test to see whether it actually hits against

543
00:24:05,200 --> 00:24:05,700
the value.

544
00:24:05,700 --> 00:24:08,300
It's not going to hit for the first twenty four times, right?

545
00:24:08,300 --> 00:24:09,200
Blah blah blah blah, blah.

546
00:24:09,200 --> 00:24:10,400
Well 23 times.

547
00:24:10,400 --> 00:24:13,200
I should say turn off.

548
00:24:13,200 --> 00:24:13,700
Hexadecimals.

549
00:24:13,700 --> 00:24:18,000
You can see 13, testing testing, testing testing, testing testing up

550
00:24:18,000 --> 00:24:25,000
to 20 22, 23, and now, 24 should hit it writes back to the index.

551
00:24:25,000 --> 00:24:27,200
So, now, the index gets 24 written to it.

552
00:24:27,400 --> 00:24:29,700
At least that's what should happen find out.

553
00:24:30,000 --> 00:24:32,600
Oops, start Index, right 24.

554
00:24:32,900 --> 00:24:35,500
We say that we did find it and then we return.

555
00:24:35,900 --> 00:24:36,700
So, there we go.

556
00:24:36,700 --> 00:24:37,100
We've done.

557
00:24:37,100 --> 00:24:38,300
The B can forward.

558
00:24:38,300 --> 00:24:40,000
And we say that red was found.

559
00:24:40,000 --> 00:24:42,400
The red shift is 24, which is exactly what we wanted.

560
00:24:42,500 --> 00:24:46,800
So that's the B can operation, but we're now doing it a very slow way.

561
00:24:46,800 --> 00:24:49,300
So what we'd like to do is we'd like to actually have the processor,

562
00:24:49,300 --> 00:24:49,800
do it.

563
00:24:49,800 --> 00:24:51,900
And this is the perfect time to talk a little about the intrinsics

564
00:24:51,900 --> 00:24:54,600
things that I keep alluding to, but haven't actually done yet.

565
00:24:54,600 --> 00:24:59,900
So, maybe today we will actually do intrinsic so that we can

566
00:25:00,400 --> 00:25:01,600
The B can forward.

567
00:25:06,600 --> 00:25:07,100
Okay.

568
00:25:08,900 --> 00:25:09,200
Yeah.

569
00:25:11,500 --> 00:25:14,400
Also, I should point out for those of you who aren't familiar with

570
00:25:14,400 --> 00:25:16,400
these, there's a bunch of these sorts of things.

571
00:25:16,400 --> 00:25:16,600
Right?

572
00:25:16,600 --> 00:25:18,900
So you can actually count the other way as well.

573
00:25:19,200 --> 00:25:19,400
Right?

574
00:25:19,400 --> 00:25:23,700
If you want to do from the from the high downward to count, like the

575
00:25:23,700 --> 00:25:27,800
basically the zeros that come at the top, you can call the reverse

576
00:25:27,800 --> 00:25:28,200
version.

577
00:25:28,200 --> 00:25:31,000
So so, you know, you've got, there's yeah, there's a bunch of

578
00:25:31,000 --> 00:25:34,600
intrinsics that will output those sort of things that the combat the

579
00:25:34,700 --> 00:25:38,400
CPU can do, but that don't really have any way of specifying them in

580
00:25:38,400 --> 00:25:41,000
C, /, say so,

581
00:25:41,100 --> 00:25:43,200
Let's go ahead and get this working first with that.

582
00:25:43,200 --> 00:25:46,100
But then, what I think we might do is just go ahead and do that today.

583
00:25:46,100 --> 00:25:51,900
So we can go ahead and do move this into the intrinsics and call the

584
00:25:51,900 --> 00:25:55,900
MS, VC version, and there we go, and we can leave this, you know, sort

585
00:25:55,900 --> 00:25:59,400
of slow implementation as the reference implementation as well, which

586
00:25:59,400 --> 00:25:59,900
will be nice.

587
00:25:59,900 --> 00:26:04,200
Because that would basically mean that, you know, we wouldn't have

588
00:26:04,300 --> 00:26:08,800
sort of a yeah, we wouldn't have a problem if people wanted to compile

589
00:26:08,800 --> 00:26:11,000
on an architecture where the CPU can't do that and

590
00:26:11,100 --> 00:26:14,000
A just need a slow version of it to make it work.

591
00:26:14,200 --> 00:26:14,700
That's good too.

592
00:26:14,700 --> 00:26:16,700
Because remember, this isn't really time critical here.

593
00:26:17,100 --> 00:26:19,000
So at least for this function, it wouldn't matter.

594
00:26:19,000 --> 00:26:22,100
If you could, you could use the slowest possible thing and it wouldn't

595
00:26:22,100 --> 00:26:22,500
really matter.

596
00:26:22,500 --> 00:26:23,200
Right?

597
00:26:23,900 --> 00:26:26,600
So the other thing too is I wonder if I should fix the API little bit

598
00:26:26,600 --> 00:26:29,900
because I guess we can always wrap the intrinsic in our own in line

599
00:26:29,900 --> 00:26:33,700
that just kind of would get, you know, kind of felt a little bit.

600
00:26:33,700 --> 00:26:36,800
I could make it so you don't have to pass an address there basically.

601
00:26:37,400 --> 00:26:40,900
So I could do something more like this, which is like a bit.

602
00:26:41,300 --> 00:26:45,100
Scan result or something like that, which is, you know, whether or not

603
00:26:45,100 --> 00:26:49,600
it was found and the UN 32, that was the index, write something like

604
00:26:49,600 --> 00:26:50,000
this.

605
00:26:50,400 --> 00:26:53,700
And then that could do something that looks more like that in line, B

606
00:26:53,700 --> 00:26:54,200
can result.

607
00:26:54,200 --> 00:26:59,000
So B can result and that would equal, you know, nothing at first.

608
00:27:00,400 --> 00:27:01,800
Having some typing problems today.

609
00:27:02,000 --> 00:27:02,600
It was true.

610
00:27:03,200 --> 00:27:07,500
And so then when we actually go through, we will then return the

611
00:27:07,500 --> 00:27:15,800
result here and we will do results that index equals tests and results

612
00:27:15,900 --> 00:27:19,600
found equals true like that and break out and then we'll return the

613
00:27:19,600 --> 00:27:20,200
result that way.

614
00:27:20,200 --> 00:27:24,200
And so that would be a little handier than having to do sort of

615
00:27:24,200 --> 00:27:29,000
passing the address nonsense, which doesn't seem particularly useful

616
00:27:29,000 --> 00:27:29,300
to me.

617
00:27:29,300 --> 00:27:30,000
I don't I don't

618
00:27:30,200 --> 00:27:31,900
Really think there's any reason to structure it like that.

619
00:27:31,900 --> 00:27:34,400
I was just mirroring the way they were doing it in the other one.

620
00:27:34,400 --> 00:27:37,100
So now you can basically do something like this where we basically

621
00:27:37,100 --> 00:27:38,500
have these.

622
00:27:39,200 --> 00:27:43,400
So we'll just get the bit scan results out of our mask values directly

623
00:27:43,600 --> 00:27:46,700
like that, and we'll do the B can forwards here.

624
00:27:47,500 --> 00:27:50,600
And, you know, the other thing I might do, since I'm kind of in charge

625
00:27:50,600 --> 00:27:54,800
now and not Microsoft at B can forwards, kind of a weird term.

626
00:27:56,000 --> 00:27:57,700
Maybe I would do something like

627
00:28:00,300 --> 00:28:06,900
Find lowest find least significant.

628
00:28:08,200 --> 00:28:08,700
One.

629
00:28:10,000 --> 00:28:14,700
Bit personally, significant set bit, something like that, right?

630
00:28:14,700 --> 00:28:16,900
Because that actually says, what it is like B can forward.

631
00:28:16,900 --> 00:28:18,100
Well, what do you mean by forward?

632
00:28:18,400 --> 00:28:18,900
At least now?

633
00:28:18,900 --> 00:28:23,400
We know, we're trying to find the least significant one that set and

634
00:28:23,400 --> 00:28:25,700
so that actually seems, maybe a little more saying to me.

635
00:28:25,700 --> 00:28:29,200
I don't know, I guess it would depend on endianness things and blah,

636
00:28:29,200 --> 00:28:32,300
blah, blah, but I think that might be a little bit better because at

637
00:28:32,300 --> 00:28:33,700
least, I understand what that is.

638
00:28:33,700 --> 00:28:36,700
When I read it at least on one architecture, it makes sense.

639
00:28:37,100 --> 00:28:38,800
So that seems like perhaps a better idea.

640
00:28:39,200 --> 00:28:39,600
So let's go

641
00:28:39,900 --> 00:28:46,800
And do that will now get each of them out blue mask, and Alpha mask.

642
00:28:47,100 --> 00:28:51,700
So now we have found those and now we just shift those by, their

643
00:28:51,700 --> 00:28:57,700
indices like so index, index, index, index.

644
00:28:58,000 --> 00:29:03,700
And we can also do an assertion on each of them because basically,

645
00:29:04,000 --> 00:29:06,900
we're not supporting loading anything but doesn't have all of these

646
00:29:06,900 --> 00:29:08,500
channels at the moment.

647
00:29:09,400 --> 00:29:09,600
Maybe.

648
00:29:09,700 --> 00:29:10,600
In the future we would.

649
00:29:10,600 --> 00:29:13,200
But for now we want at least ensure that we don't actually

650
00:29:13,200 --> 00:29:15,600
accidentally load something that doesn't have one of these channels.

651
00:29:16,200 --> 00:29:19,700
So let's take a look at where that puts us on the scale of fixing our

652
00:29:19,700 --> 00:29:20,700
color problems.

653
00:29:20,900 --> 00:29:22,300
Hey, it looks exactly right.

654
00:29:22,300 --> 00:29:22,500
It to me.

655
00:29:22,500 --> 00:29:23,100
Now.

656
00:29:23,400 --> 00:29:25,900
The only thing that we're not handling now is, of course, the alpha

657
00:29:25,900 --> 00:29:28,500
blending around those the edges and on the background.

658
00:29:28,500 --> 00:29:29,600
And that's the next thing we have to do.

659
00:29:29,600 --> 00:29:32,200
Anyway, so that seems like a pretty good thing to do.

660
00:29:32,400 --> 00:29:35,000
I'm going to go ahead and say though, that, since we're, we've got a

661
00:29:35,000 --> 00:29:37,300
fair bit of time here, I'm just going to go ahead and give the

662
00:29:37,300 --> 00:29:38,300
intrinsic thing a shot.

663
00:29:38,300 --> 00:29:39,600
Just because it's about time that we

664
00:29:39,800 --> 00:29:41,400
Started talking about those sorts of things.

665
00:29:41,600 --> 00:29:42,700
We don't have to do very much.

666
00:29:42,700 --> 00:29:43,700
It's not very complicated.

667
00:29:43,700 --> 00:29:46,000
It's a very simple thing to do so it might be a good one to start

668
00:29:46,000 --> 00:29:46,400
with.

669
00:29:46,700 --> 00:29:49,600
So basically what I want to do in here is I want to move this B can

670
00:29:49,600 --> 00:29:50,200
result.

671
00:29:50,600 --> 00:29:53,400
I want to move this out and I want to move it to here.

672
00:29:53,600 --> 00:29:54,200
Right?

673
00:29:54,300 --> 00:29:58,700
And so, what I want to do is be able to have this this function, such

674
00:29:58,700 --> 00:29:59,800
that if we are

675
00:30:00,000 --> 00:30:00,500
Compiler.

676
00:30:00,500 --> 00:30:02,700
That can do it really quickly.

677
00:30:02,800 --> 00:30:07,200
It will do it and, and not have to go through this for Loop.

678
00:30:07,200 --> 00:30:12,100
It'll it said, just tell the processor to basically tell the processor

679
00:30:12,100 --> 00:30:16,100
to do it, you know, in a much more expedient way if that makes sense.

680
00:30:16,500 --> 00:30:20,000
So really, what I need to do here is I need to be able to figure out

681
00:30:20,000 --> 00:30:23,700
whether or not, you know, basically whether I'm on it, what compiler?

682
00:30:23,700 --> 00:30:24,700
I'm on if that makes sense.

683
00:30:28,100 --> 00:30:29,800
And as you know,

684
00:30:30,000 --> 00:30:34,800
No, I said, I talked about quite a bit at the beginning, you want to

685
00:30:34,800 --> 00:30:39,100
keep all of your stuff segregated as much as possible in terms of

686
00:30:39,900 --> 00:30:43,300
keeping platform code out of platform-independent code.

687
00:30:43,300 --> 00:30:43,900
Right?

688
00:30:44,000 --> 00:30:47,300
So, you'll notice that we buried everything inside, win32 handmade and

689
00:30:47,300 --> 00:30:50,800
you'll notice, none of this stuff leaks out into our main code.

690
00:30:50,800 --> 00:30:52,900
All the win32 specific code is all in here.

691
00:30:52,900 --> 00:30:53,600
Right?

692
00:30:54,400 --> 00:30:57,200
But there are limits to what we can do there.

693
00:30:57,200 --> 00:30:59,800
If we don't want to sacrifice performance, like what I could do here.

694
00:31:00,000 --> 00:31:04,300
Right is like a call a function back in the platform layer that did

695
00:31:04,300 --> 00:31:05,200
this operation.

696
00:31:05,200 --> 00:31:05,800
Right?

697
00:31:05,900 --> 00:31:08,400
And that would keep it and I could even pass in a pointer to that

698
00:31:08,400 --> 00:31:08,800
function.

699
00:31:08,800 --> 00:31:10,300
So it was completely isolated.

700
00:31:10,300 --> 00:31:11,400
I could do all kinds of stuff.

701
00:31:11,600 --> 00:31:15,300
But the problem is the only reason why you ever care about intrinsics

702
00:31:15,300 --> 00:31:17,100
in the first place is for performance.

703
00:31:17,100 --> 00:31:20,200
If we didn't care about performance, we just run this for Loop, right?

704
00:31:20,700 --> 00:31:24,700
So the intrinsics file, the whole point of this intrinsics file is

705
00:31:24,700 --> 00:31:26,800
going to be the, this is the place.

706
00:31:27,500 --> 00:31:31,700
Where we make a compromise and say that, this is the place where we

707
00:31:31,700 --> 00:31:36,400
are, allowed to do Platform specific stuff that can be directly

708
00:31:36,400 --> 00:31:41,500
included right into the code of platform nonspecific stuff, if that

709
00:31:41,500 --> 00:31:42,100
makes sense.

710
00:31:42,800 --> 00:31:45,100
And again, the only reason we're doing that is performance.

711
00:31:45,100 --> 00:31:47,300
If we didn't care about performance at all, if we literally just had

712
00:31:47,300 --> 00:31:50,000
no performance concerns, then there would be no reason to do this.

713
00:31:50,000 --> 00:31:50,900
There'd be no point.

714
00:31:50,900 --> 00:31:53,100
You would just always do things the way we had been doing them.

715
00:31:53,600 --> 00:31:56,900
But in the case of intrinsics, which are, which you're only using

716
00:31:56,900 --> 00:31:57,100
really

717
00:31:57,200 --> 00:31:59,000
You're caring about performance in the first place.

718
00:31:59,600 --> 00:32:02,500
This is where that sort of stuff comes in.

719
00:32:02,500 --> 00:32:06,100
And so what you want to do is you basically want to have it isolated

720
00:32:06,100 --> 00:32:10,000
again, you know, even though it's you're sort of saying it's okay to

721
00:32:10,000 --> 00:32:11,300
mix things up a little bit here.

722
00:32:11,300 --> 00:32:13,400
You still want it as isolated as possible.

723
00:32:13,800 --> 00:32:17,400
And so you want to basically boil it down to like a file or two that

724
00:32:17,400 --> 00:32:23,000
have compiler switches in them and that bring in that sort of non

725
00:32:23,000 --> 00:32:24,400
independent parts of the code.

726
00:32:25,300 --> 00:32:27,800
Right, so that's basically what we're going to do here.

727
00:32:28,800 --> 00:32:32,100
So what we're going to do is basically say, you know, if the compiler

728
00:32:32,100 --> 00:32:36,600
is msv, see right, then we know that we can issue this thing, because

729
00:32:36,600 --> 00:32:40,600
this compiler happens to support this B can forward thing, right?

730
00:32:40,900 --> 00:32:44,300
And we want to do from low LSB to MSB.

731
00:32:44,700 --> 00:32:46,100
So we're basically going to call this one.

732
00:32:46,500 --> 00:32:47,400
We know that, in this case.

733
00:32:47,400 --> 00:32:48,900
We're scanning a 32-bit value.

734
00:32:49,000 --> 00:32:53,900
So basically what we're going to do here is we're going to call this B

735
00:32:53,900 --> 00:32:54,700
can forward.

736
00:32:54,800 --> 00:32:57,600
The result found is going to be equal to that return value.

737
00:32:58,000 --> 00:32:58,500
We're going to

738
00:32:58,600 --> 00:32:59,800
pass the address of the

739
00:33:00,000 --> 00:33:02,700
That we wanted to be set and it'll set it and then we're going to pass

740
00:33:02,700 --> 00:33:03,200
that value.

741
00:33:03,200 --> 00:33:06,000
And so that's just going to allow it to do it right there.

742
00:33:06,000 --> 00:33:08,000
And we're going to make sure this is marked in line.

743
00:33:08,000 --> 00:33:11,100
So hopefully, if the compiler isn't Dumb, it will go ahead and say,

744
00:33:11,100 --> 00:33:15,800
oh, yes, we can go ahead and inline this directly and turn this into a

745
00:33:15,800 --> 00:33:17,600
instruction, right?

746
00:33:17,600 --> 00:33:20,900
So that's about all we have to do there.

747
00:33:20,900 --> 00:33:23,000
But we have to do this compiler and determination.

748
00:33:23,000 --> 00:33:26,600
And so, I'm going to go back to our handmade believe, it's handmade

749
00:33:26,600 --> 00:33:27,300
platform, right?

750
00:33:27,300 --> 00:33:29,100
Yeah, in handmade platform.

751
00:33:29,100 --> 00:33:29,900
What I'm

752
00:33:30,000 --> 00:33:32,400
Going to introduce at the top kind of like, you know, we have this

753
00:33:32,400 --> 00:33:33,100
sort of basic.

754
00:33:33,100 --> 00:33:35,600
This is like the basic setup for the code.

755
00:33:35,600 --> 00:33:37,100
This is what has to happen in the code.

756
00:33:37,200 --> 00:33:40,500
I'm going to do a little thing here, which basically says, you know,

757
00:33:40,500 --> 00:33:46,200
compiler M SV C is 0 and maybe compiler llvm.

758
00:33:46,500 --> 00:33:47,800
Because I know those are the two things.

759
00:33:47,800 --> 00:33:52,500
At least that we will compile under, right, and what we will do is

760
00:33:52,500 --> 00:33:55,700
will sort of do an if here on some kind of thing.

761
00:33:56,500 --> 00:33:59,500
Basically, if you know, if not,

762
00:34:00,000 --> 00:34:01,000
Compiler msv.

763
00:34:01,000 --> 00:34:02,900
See, I should do this way.

764
00:34:03,300 --> 00:34:05,600
If and F compiler, MSNBC.

765
00:34:05,700 --> 00:34:13,300
And if and if and F llvm this, you know, I could write these out a

766
00:34:13,300 --> 00:34:15,900
little bit more cleanly so you can kind of see what they're doing.

767
00:34:15,900 --> 00:34:20,300
So short, if end f is like a shorthand could do to find that.

768
00:34:20,500 --> 00:34:24,600
So what I'm going to do is if the compiler variables and maybe I'll

769
00:34:24,600 --> 00:34:29,800
even make a little section here like this and just going to be, you

770
00:34:29,800 --> 00:34:29,800
know,

771
00:34:29,900 --> 00:34:34,800
No note, Casey types like this.

772
00:34:35,300 --> 00:34:38,600
Thank you, emacs, for, indenting me, for a pits, finding the C++

773
00:34:38,600 --> 00:34:39,100
bracket.

774
00:34:39,100 --> 00:34:41,800
There are doing the indentation, which I didn't actually want to do,

775
00:34:42,199 --> 00:34:45,500
what you gonna do compilers.

776
00:34:46,199 --> 00:34:49,000
So basically, what I want to do here is I want to basically say, okay.

777
00:34:51,000 --> 00:34:55,400
If the build system, whoever is building us our batch file, whatever,

778
00:34:55,500 --> 00:34:58,500
if they want to explicitly set what the compiler is, then we'll just

779
00:34:58,500 --> 00:34:59,300
let them set it.

780
00:34:59,500 --> 00:35:03,600
So basically we're only going to set these if they're not already set

781
00:35:04,200 --> 00:35:04,600
then.

782
00:35:04,600 --> 00:35:05,200
So we're going to end.

783
00:35:05,200 --> 00:35:08,500
We're going to clear them to 0 or actually, I guess what we could do

784
00:35:08,500 --> 00:35:12,900
is if they're not already set, right, then what we do is at the end

785
00:35:12,900 --> 00:35:13,400
here.

786
00:35:13,400 --> 00:35:14,500
Now I still need to do this.

787
00:35:14,900 --> 00:35:20,200
So we need to do something like if the, if the compiler is not set at

788
00:35:20,200 --> 00:35:20,500
all.

789
00:35:21,000 --> 00:35:23,300
If we have no compiler set whatsoever.

790
00:35:23,300 --> 00:35:23,500
Right?

791
00:35:23,500 --> 00:35:24,200
This sort of thing.

792
00:35:25,100 --> 00:35:30,200
Then inside here is where I'm going to actually try to determine what

793
00:35:30,200 --> 00:35:31,500
the compiler actually is.

794
00:35:31,700 --> 00:35:34,900
So if neither the compiler things have been set by anyone, then I'm

795
00:35:34,900 --> 00:35:37,400
going to go ahead and try to see what the compiler actually is.

796
00:35:37,700 --> 00:35:38,900
And MSD.

797
00:35:38,900 --> 00:35:42,900
See, for example, will automatically Define something that tells us

798
00:35:42,900 --> 00:35:43,500
what it is.

799
00:35:43,500 --> 00:35:44,200
I don't remember.

800
00:35:44,200 --> 00:35:45,000
It's like Ms.

801
00:35:45,000 --> 00:35:45,600
Seaver.

802
00:35:45,600 --> 00:35:50,200
I mean, I think it's it's something like that, but I want to actually

803
00:35:50,200 --> 00:35:50,600
go see

804
00:35:50,800 --> 00:35:54,800
See what it actually is before I make that block Proclamation,

805
00:35:55,200 --> 00:35:56,800
underscore it, Miss Seaver.

806
00:35:56,900 --> 00:35:58,200
Yeah, almost underscore Ms.

807
00:35:58,200 --> 00:35:58,600
Seaver.

808
00:35:59,200 --> 00:35:59,800
So basically

809
00:36:00,200 --> 00:36:02,100
I want to do that and say if that's true.

810
00:36:02,100 --> 00:36:02,700
Then compiler.

811
00:36:02,700 --> 00:36:05,400
M SV, C equals 1, right?

812
00:36:05,800 --> 00:36:09,900
And then what we'll also do is we'll do an else here.

813
00:36:10,500 --> 00:36:14,500
And in this case, we'll just assume it's llvm for now, but we'll put

814
00:36:14,500 --> 00:36:18,800
it to do here which is basically like more compilers or something.

815
00:36:19,000 --> 00:36:19,500
Right?

816
00:36:20,600 --> 00:36:21,800
Maybe even like that.

817
00:36:22,700 --> 00:36:26,800
And So eventually we'll do something a little smarter than that as we

818
00:36:26,800 --> 00:36:27,000
go.

819
00:36:27,000 --> 00:36:29,000
But right now we're only compiling an MS VC.

820
00:36:30,000 --> 00:36:32,600
So, you know, for now that should be good enough.

821
00:36:32,600 --> 00:36:35,600
So when we actually do that, let's take a look at what happens here.

822
00:36:36,000 --> 00:36:36,400
Oh, right.

823
00:36:36,400 --> 00:36:39,200
We have to undefined compiler, it because we Define it 2-0 and you

824
00:36:39,200 --> 00:36:40,100
can't just change it.

825
00:36:40,100 --> 00:36:46,500
Unfortunately, you gotta undef it first like so and then when I got 11

826
00:36:46,500 --> 00:36:48,300
missing end of, so then there's a end if they're.

827
00:36:49,200 --> 00:36:49,800
All right.

828
00:36:49,800 --> 00:36:55,200
So now it's coming that B can forward is not defined and that may be

829
00:36:55,200 --> 00:36:55,800
true.

830
00:36:55,800 --> 00:36:59,900
Let's see what has to be defined in order.

831
00:37:00,000 --> 00:37:01,900
Therefore that to exist somewhere.

832
00:37:02,600 --> 00:37:03,800
Let's see.

833
00:37:05,400 --> 00:37:08,200
Well it looks like we just need to do that or do we actually have to

834
00:37:08,200 --> 00:37:10,100
pound include intron .h.

835
00:37:10,100 --> 00:37:13,600
I'm not actually sure if we need to do that or not we could take a

836
00:37:13,600 --> 00:37:14,200
look.

837
00:37:16,000 --> 00:37:20,100
I guess the first thing we could do is try this first and see what it

838
00:37:20,100 --> 00:37:20,600
does.

839
00:37:21,000 --> 00:37:27,200
So if we are defining msv, see, we can basically now have our little

840
00:37:27,700 --> 00:37:29,800
section where we do the things that,

841
00:37:29,900 --> 00:37:34,900
We want to do if M SV C is here, such as that pragma in terms of

842
00:37:34,900 --> 00:37:36,100
function not declared.

843
00:37:36,100 --> 00:37:40,200
So, okay, so I guess we have to do include this file as well, which is

844
00:37:40,200 --> 00:37:42,400
the intrinsics and then we'll see.

845
00:37:43,100 --> 00:37:44,200
Okay, B.

846
00:37:44,200 --> 00:37:48,100
Can forward cannot convert argument one from you in 30, to start to

847
00:37:48,100 --> 00:37:49,600
unsigned long star.

848
00:37:51,300 --> 00:37:56,600
Why not types pointed to her unrelated?

849
00:37:56,700 --> 00:37:58,000
Is that really true?

850
00:37:58,600 --> 00:38:04,500
Why would those be unrelated, I guess unsigned in and unsigned long or

851
00:38:04,500 --> 00:38:05,500
technically different types.

852
00:38:09,100 --> 00:38:13,700
Oh, the mysteries of C++, Ivan program it for so long, and yet things

853
00:38:13,700 --> 00:38:14,800
like that, always still confuse me.

854
00:38:14,800 --> 00:38:17,600
I'm like, what actually do, you believe the technical difference to be

855
00:38:17,900 --> 00:38:19,000
between those types?

856
00:38:19,500 --> 00:38:20,800
And I have absolutely no idea.

857
00:38:21,200 --> 00:38:22,500
Oops, put that in the wrong place.

858
00:38:22,700 --> 00:38:23,200
There we go.

859
00:38:24,100 --> 00:38:25,900
So I believe that should probably work.

860
00:38:26,000 --> 00:38:29,200
Let's find out and see if it does and hey guess what it does.

861
00:38:29,500 --> 00:38:32,300
And now let's take a look in there and see what it actually did

862
00:38:32,300 --> 00:38:34,200
differently now when we step into it.

863
00:38:34,600 --> 00:38:37,400
So if you step in here, you can see that this is actually using this,

864
00:38:37,400 --> 00:38:38,700
this line that we

865
00:38:38,900 --> 00:38:42,000
Talked about, and if you go to the disassembly, we can take a look at

866
00:38:42,000 --> 00:38:42,600
what it does.

867
00:38:43,100 --> 00:38:47,600
So essentially what happens here is, do you see this BSF?

868
00:38:47,600 --> 00:38:49,200
That's B can forward.

869
00:38:49,200 --> 00:38:51,800
It's literally one Assembly Language instruction.

870
00:38:52,300 --> 00:38:54,100
That does all the work of that for Loop.

871
00:38:54,400 --> 00:38:56,400
Now, don't let that fool you because Assembly Language Learners can

872
00:38:56,400 --> 00:38:58,000
still take a while to execute sometimes.

873
00:38:58,500 --> 00:38:59,800
But the point here is basically that

874
00:39:00,500 --> 00:39:04,300
That is so much more concise certainly to the processor and it's

875
00:39:04,300 --> 00:39:07,000
probably going to be much faster than if we were to actually have two

876
00:39:07,000 --> 00:39:08,800
micro to code the loop ourselves.

877
00:39:08,900 --> 00:39:11,200
Because if this is executing something in microcode, that's still

878
00:39:11,200 --> 00:39:12,600
going to be a lot faster, right?

879
00:39:12,700 --> 00:39:15,900
So basically, what happens here, in fact, you can even watch work,

880
00:39:16,300 --> 00:39:18,700
what it's going to do here is going to move the value.

881
00:39:18,800 --> 00:39:19,900
This thing right here.

882
00:39:20,000 --> 00:39:22,900
It's going to load that value into the eax register, right?

883
00:39:23,000 --> 00:39:24,700
And that's this register right here.

884
00:39:24,800 --> 00:39:27,800
It's a little confusing because we're in x64 mode, which means that it

885
00:39:27,800 --> 00:39:29,800
uses are a x to denote the ax artistry.

886
00:39:30,000 --> 00:39:31,300
Because it's 64 bits long.

887
00:39:31,300 --> 00:39:33,600
But really, what we're talking about is we're talking about the bottom

888
00:39:33,600 --> 00:39:34,600
portion of it here, right?

889
00:39:34,600 --> 00:39:37,600
We're talking about the bottom 32-bit value.

890
00:39:37,700 --> 00:39:39,600
So, when we do that, you see how it loaded it in there.

891
00:39:39,600 --> 00:39:40,200
There it is.

892
00:39:40,400 --> 00:39:41,500
You just loaded it right there.

893
00:39:41,900 --> 00:39:45,900
And now it's going to call that BSF function on the value in the

894
00:39:45,900 --> 00:39:47,100
register to load it out.

895
00:39:47,100 --> 00:39:47,600
Right.

896
00:39:47,600 --> 00:39:50,600
It goes ahead and does that and the destination is also EXO.

897
00:39:50,600 --> 00:39:52,100
It's going to write the result back in there.

898
00:39:52,100 --> 00:39:52,600
Right?

899
00:39:52,900 --> 00:39:55,400
And you can see that it wrote the result back in there.

900
00:39:55,800 --> 00:39:57,800
And that's the result that we were expecting, right?

901
00:39:57,800 --> 00:39:59,400
That's what we wanted to actually have again.

902
00:39:59,400 --> 00:39:59,800
It's the next

903
00:40:00,000 --> 00:40:04,000
Small, which is why it looks like an 18 instead of a 24.

904
00:40:04,400 --> 00:40:07,500
But you know, that's that's just well, you know, I can, I can.

905
00:40:07,800 --> 00:40:08,200
Here you go.

906
00:40:08,200 --> 00:40:10,300
So x 18, right?

907
00:40:10,300 --> 00:40:13,000
You can see that, that's just the hexadecimal encoding for 24.

908
00:40:13,200 --> 00:40:13,900
So there it is.

909
00:40:14,700 --> 00:40:18,500
And then that is the entirety that right there did like the entirety

910
00:40:18,500 --> 00:40:20,300
of that, this Loop, right?

911
00:40:20,500 --> 00:40:22,000
So, that's intrinsics in a nutshell.

912
00:40:22,000 --> 00:40:22,900
They're really pretty simple.

913
00:40:22,900 --> 00:40:25,900
And basically, what we want to do is we want to do those for anything,

914
00:40:25,900 --> 00:40:28,400
where there is a convenient CPU instructions, so that we can access it

915
00:40:28,400 --> 00:40:29,800
because we don't want to go around especially

916
00:40:29,900 --> 00:40:32,500
When we start getting more time critical code, we don't want to go

917
00:40:32,500 --> 00:40:35,800
around wasting a lot of that stuff that the processor could do for us

918
00:40:36,900 --> 00:40:38,000
by obvious getting it.

919
00:40:38,000 --> 00:40:38,100
Now.

920
00:40:38,100 --> 00:40:40,700
It's possible that the compiler might have actually been smart enough,

921
00:40:40,700 --> 00:40:43,800
sometimes depending on the compared, to actually realize that this is

922
00:40:43,800 --> 00:40:47,700
a bit scan forward, but why make it do that when we could just go

923
00:40:47,700 --> 00:40:49,200
ahead and say this is exactly what we want.

924
00:40:49,200 --> 00:40:49,700
Right?

925
00:40:49,900 --> 00:40:52,200
And so now we've done that and we're in good shape.

926
00:40:52,200 --> 00:40:54,800
So now we're loading our stuff and we're pretty happy.

927
00:40:55,100 --> 00:40:58,000
But if you actually take a look at what happens here, you'll notice

928
00:40:58,000 --> 00:40:59,800
that we would like to be able to composite.

929
00:41:00,000 --> 00:41:02,900
This guy on top of things and right now we're not actually doing that.

930
00:41:02,900 --> 00:41:06,600
And so that brings up use of the alpha Channel, which we should talk

931
00:41:06,600 --> 00:41:06,800
about.

932
00:41:06,800 --> 00:41:07,000
Now.

933
00:41:07,000 --> 00:41:10,000
It's actually very, very easy for us to make this work.

934
00:41:11,600 --> 00:41:14,600
But, you know, well, you know what?

935
00:41:14,600 --> 00:41:18,400
I'll do first, I'll basically show you the really simple version

936
00:41:18,400 --> 00:41:20,100
first, and then we'll talk about it a little bit.

937
00:41:20,300 --> 00:41:22,600
So, as, you know, the alpha channel, right?

938
00:41:22,800 --> 00:41:27,500
If you remember, how this is, how this works, in the actual art tool.

939
00:41:27,600 --> 00:41:28,700
Let me see if I can actually.

940
00:41:28,700 --> 00:41:29,400
How would I do this?

941
00:41:29,400 --> 00:41:29,800
I'll go too.

942
00:41:29,900 --> 00:41:36,300
A handmade data test and I will load up that hero front head.

943
00:41:36,500 --> 00:41:37,700
There we go, edit with gimp.

944
00:41:38,900 --> 00:41:40,400
So if we look at this here.

945
00:41:44,000 --> 00:41:48,800
You can see that basically you've got your red green and blue color

946
00:41:48,800 --> 00:41:49,100
channels.

947
00:41:49,100 --> 00:41:51,700
But you also have a fourth Channel and that channel is called the

948
00:41:51,700 --> 00:41:52,200
alpha Channel.

949
00:41:52,200 --> 00:41:55,400
Now, most people probably sort of, you know, even if you don't know

950
00:41:55,400 --> 00:41:58,500
exactly what that is, you know intuitively now what it is because

951
00:41:58,500 --> 00:41:59,800
you've probably seen it in pain.

952
00:42:00,000 --> 00:42:02,300
G like, you've probably worked with it before, right?

953
00:42:02,700 --> 00:42:06,800
And so, if we take a look at the channels dialogue, let's take a look

954
00:42:06,800 --> 00:42:08,600
here inside gimp.

955
00:42:09,100 --> 00:42:11,000
There's a channels dialogue, right?

956
00:42:11,000 --> 00:42:13,300
Which is this, you can actually see.

957
00:42:13,300 --> 00:42:16,900
I can turn off the channels and we can actually see the alpha Channel

958
00:42:16,900 --> 00:42:17,600
by itself.

959
00:42:17,600 --> 00:42:17,900
Right.

960
00:42:17,900 --> 00:42:21,500
Instead of the other channels, which is basically all the alpha

961
00:42:21,500 --> 00:42:25,000
channel is is it's basically just something that says where the image

962
00:42:25,000 --> 00:42:29,400
exists and where it doesn't and it's got partial values around the

963
00:42:29,400 --> 00:42:29,800
edges.

964
00:42:30,000 --> 00:42:33,100
That basically say, well the it was transitioning at this point,

965
00:42:33,100 --> 00:42:33,300
right?

966
00:42:33,300 --> 00:42:34,200
It was transitioning.

967
00:42:34,200 --> 00:42:36,600
It's anti-aliasing that edge basically, right?

968
00:42:36,600 --> 00:42:40,500
It's giving a partial value because the shape obviously can't be rep

969
00:42:40,500 --> 00:42:43,100
is not perfectly pixelated.

970
00:42:43,100 --> 00:42:45,700
The shape was actually supposed to be a smooth line that went through

971
00:42:45,700 --> 00:42:46,000
there.

972
00:42:46,100 --> 00:42:49,000
And so, these Alpha values are basically there to kind of smooth that

973
00:42:49,000 --> 00:42:49,600
out.

974
00:42:50,100 --> 00:42:52,000
And to sort of give you that gradual fall off.

975
00:42:52,000 --> 00:42:53,900
So, it's not a hard cookie cutter Edge, right?

976
00:42:53,900 --> 00:42:54,600
It just kind of feathers.

977
00:42:54,600 --> 00:42:56,000
The things that's the background for you.

978
00:42:56,300 --> 00:42:58,000
That's the way the art was set up to work.

979
00:42:58,400 --> 00:42:59,800
So right now we're drawing those

980
00:43:00,000 --> 00:43:02,300
Green and blue channels but we're not doing anything with the alpha

981
00:43:02,300 --> 00:43:02,600
Channel.

982
00:43:02,600 --> 00:43:05,400
And obviously, since the alpha channel is the only thing that tells us

983
00:43:05,400 --> 00:43:07,900
where the image exists, we need to start doing something with the

984
00:43:07,900 --> 00:43:10,300
alpha channel to display.

985
00:43:10,300 --> 00:43:13,600
The person such that display things on top of other things, so that

986
00:43:13,600 --> 00:43:17,500
like bottom layers show through Upper layers, right?

987
00:43:17,500 --> 00:43:21,000
And so inside our renderer, this is going to work.

988
00:43:21,000 --> 00:43:21,500
Well.

989
00:43:21,500 --> 00:43:24,100
Yeah, I won't say how it's going to work in the render in a surly.

990
00:43:24,100 --> 00:43:25,300
That's that's a little premature.

991
00:43:29,200 --> 00:43:30,600
So, let's not say that word.

992
00:43:31,700 --> 00:43:32,800
Let's say a different word.

993
00:43:33,400 --> 00:43:35,600
What I'm actually going to say, it's not that what I'm going to say

994
00:43:35,600 --> 00:43:39,200
is, let's talk about one way.

995
00:43:39,400 --> 00:43:46,000
We could easily implement this for our testing purposes, for our

996
00:43:46,000 --> 00:43:46,700
testing purposes.

997
00:43:46,700 --> 00:43:50,800
What we can do is basically do exactly what Photoshop or anything else

998
00:43:50,800 --> 00:43:53,800
does, where we basically just think about things, in terms of layers.

999
00:43:53,800 --> 00:43:58,200
We could draw something first, we could draw down, you know, our trees

1000
00:43:58,200 --> 00:44:00,200
or whatever in the background, right?

1001
00:44:00,200 --> 00:44:01,200
And then, we want to stick a guy.

1002
00:44:01,400 --> 00:44:02,400
On top of that.

1003
00:44:02,900 --> 00:44:05,900
What we would do is we'd essentially think of creating a separate

1004
00:44:05,900 --> 00:44:06,500
layer, right?

1005
00:44:06,500 --> 00:44:07,800
Which has our guy on it.

1006
00:44:08,800 --> 00:44:13,300
And basically, what we'll do is when we draw that layer will only draw

1007
00:44:13,300 --> 00:44:16,300
in the places where the alpha Channel says, there was actually a shape

1008
00:44:16,300 --> 00:44:20,000
and we won't touch what's underneath in the places where it's not.

1009
00:44:20,000 --> 00:44:22,500
So will basically do compositing very much the way you would think

1010
00:44:22,500 --> 00:44:25,000
about in Photoshop where you have one layer and you're basically

1011
00:44:25,000 --> 00:44:29,800
drawing layers on top of each other and you just don't draw where the

1012
00:44:29,800 --> 00:44:31,200
alpha Channel says there isn't anything.

1013
00:44:31,300 --> 00:44:32,600
A thing and that gives you the so through.

1014
00:44:32,600 --> 00:44:36,000
So it's basically like it's like taking pieces of paper cutouts and

1015
00:44:36,000 --> 00:44:39,200
stacking them on top of each other wherever it was cut out.

1016
00:44:39,200 --> 00:44:41,000
You can still see through to the thing.

1017
00:44:41,000 --> 00:44:42,100
That was underneath, right?

1018
00:44:43,200 --> 00:44:46,100
So that Alpha layer of alpha channel, is basically telling us where to

1019
00:44:46,100 --> 00:44:46,700
do the cutout.

1020
00:44:46,700 --> 00:44:49,100
It's basically what tells us how to do the cut out.

1021
00:44:49,500 --> 00:44:51,500
So, how do we actually Implement that, right?

1022
00:44:52,100 --> 00:44:55,300
Well, while we are drawing, right, we basically have something, you

1023
00:44:55,300 --> 00:44:58,500
know, we've got our trees, you know, they're there and then we've got

1024
00:44:58,500 --> 00:44:59,800
our guy and

1025
00:45:00,000 --> 00:45:02,800
Got the alpha channel on him that says where things exist.

1026
00:45:03,100 --> 00:45:06,100
And basically, it's 0 everywhere where he does not exist.

1027
00:45:06,100 --> 00:45:08,300
Its 255 everywhere that he does.

1028
00:45:08,500 --> 00:45:12,300
And at the edges, it's somewhere between those two values, right?

1029
00:45:12,900 --> 00:45:15,600
So it's basically a brightness value, you might think of it between 0

1030
00:45:15,600 --> 00:45:19,400
and 25 that says what, you know, how much he exists at that particular

1031
00:45:19,400 --> 00:45:20,100
point.

1032
00:45:20,500 --> 00:45:22,300
So what we would like to do right?

1033
00:45:22,300 --> 00:45:26,400
Is we like to think about that essentially for now as an opacity value

1034
00:45:26,400 --> 00:45:29,900
basically to say how much of the guy Blends through and by the

1035
00:45:30,000 --> 00:45:33,200
Way we could use this Alpha Channel as well, for partial transparency.

1036
00:45:33,200 --> 00:45:35,800
Like if we have something that's supposed to be, sort of ghost-like,

1037
00:45:36,000 --> 00:45:38,400
that we want to sort of only partially blind on just, like in

1038
00:45:38,400 --> 00:45:41,300
Photoshop, how you can paint the alpha channel, to be some middle

1039
00:45:41,300 --> 00:45:45,300
value, like 128, or something that's partially translucent.

1040
00:45:45,500 --> 00:45:46,500
We might want to do that too.

1041
00:45:46,500 --> 00:45:50,300
So what we'd like to do is use this value essentially as a way of

1042
00:45:50,300 --> 00:45:53,500
blending in between the two, right?

1043
00:45:54,600 --> 00:45:57,100
So I don't want to talk about that yet because let's just do the

1044
00:45:57,100 --> 00:45:58,200
simplest possible thing.

1045
00:45:58,400 --> 00:45:59,800
Let's do something that just for

1046
00:46:00,000 --> 00:46:05,500
Starters uses zero or 255 or sort of rather on or off.

1047
00:46:05,500 --> 00:46:09,100
So, will basically say, if it's zero, we won't draw anything and if

1048
00:46:09,100 --> 00:46:12,700
it's 255, or sorry, if it's anything from 1 to 255.

1049
00:46:12,700 --> 00:46:15,100
Anything in between, we will I guess.

1050
00:46:15,100 --> 00:46:17,200
Another thing we could do is say, 128 is the cutoff.

1051
00:46:17,200 --> 00:46:18,900
So basically anything less than 128.

1052
00:46:18,900 --> 00:46:20,500
We won't try anything created the 128.

1053
00:46:20,500 --> 00:46:21,700
We will draw right?

1054
00:46:22,000 --> 00:46:23,400
You can pretty much see how we could do that.

1055
00:46:23,400 --> 00:46:24,200
Very simply, right?

1056
00:46:24,200 --> 00:46:27,500
Because we're iterating over all the pixels of the guy in our

1057
00:46:27,500 --> 00:46:28,100
drawbitmap.

1058
00:46:28,100 --> 00:46:29,000
Er Team right.

1059
00:46:29,100 --> 00:46:29,800
We iterate.

1060
00:46:29,900 --> 00:46:33,900
Over all the values here to do this dest plus plus equals Source plus,

1061
00:46:33,900 --> 00:46:34,400
right?

1062
00:46:34,700 --> 00:46:38,800
So what we could do instead is we could go ahead and change the way

1063
00:46:38,800 --> 00:46:39,300
this works.

1064
00:46:39,300 --> 00:46:42,700
We could do both, we could always do both advances, right?

1065
00:46:43,100 --> 00:46:45,500
And we can isolate just the copy like that.

1066
00:46:45,500 --> 00:46:49,200
And what we could say is if that Source value, The Source part that's

1067
00:46:49,200 --> 00:46:51,100
coming in extract the alpha, right?

1068
00:46:51,100 --> 00:46:53,600
We shifted down by 24 to get, just the alpha by itself.

1069
00:46:54,100 --> 00:46:57,700
If that value is greater than 128, then we do the copy.

1070
00:46:57,700 --> 00:46:58,500
Otherwise we do.

1071
00:47:00,300 --> 00:47:02,000
Makes sense, right?

1072
00:47:02,500 --> 00:47:03,600
So if we did that,

1073
00:47:04,800 --> 00:47:08,500
And we ran it, we now get much more of what we would expect to get,

1074
00:47:08,500 --> 00:47:08,800
right.

1075
00:47:08,800 --> 00:47:15,000
We now get something which doesn't draw the guy everywhere where he

1076
00:47:15,100 --> 00:47:18,600
had an alpha value less than 128 and it does draw the guy everywhere.

1077
00:47:18,600 --> 00:47:21,700
There's a value over 128 and all we did was just add that one simple

1078
00:47:21,700 --> 00:47:22,200
test, right?

1079
00:47:22,200 --> 00:47:23,100
That's all we were doing.

1080
00:47:23,900 --> 00:47:24,100
Now.

1081
00:47:24,100 --> 00:47:28,600
What you'll notice is it has a very hard edge around him, right?

1082
00:47:28,800 --> 00:47:31,800
If I was to do the the the zooming on this, right?

1083
00:47:31,800 --> 00:47:34,400
Let's say we go into creating their own.

1084
00:47:34,500 --> 00:47:36,300
I don't actually know if how crito work sir.

1085
00:47:36,300 --> 00:47:39,600
Can I do a paste as New Image paste into New Image?

1086
00:47:41,900 --> 00:47:43,900
I don't know what you're asking me.

1087
00:47:47,400 --> 00:47:47,800
I don't know.

1088
00:47:47,800 --> 00:47:49,200
I don't really know how to use this program.

1089
00:47:51,000 --> 00:47:52,100
Does this what I want.

1090
00:47:52,100 --> 00:47:53,000
I don't even know.

1091
00:47:53,300 --> 00:47:53,600
All right.

1092
00:47:53,600 --> 00:47:54,200
Yeah, I guess it is.

1093
00:47:54,200 --> 00:47:55,100
It's doing what I wanted.

1094
00:47:55,100 --> 00:47:56,100
Okay, good enough.

1095
00:47:56,900 --> 00:47:59,500
So if you look in here, you can see, you know, there's a lot of

1096
00:47:59,500 --> 00:47:59,800
antioxidants.

1097
00:48:00,000 --> 00:48:01,300
This is very smooth Graphics.

1098
00:48:01,300 --> 00:48:03,000
There's a lot of anti aliasing everywhere in here.

1099
00:48:03,000 --> 00:48:05,600
There's a lot of kind of, you know, blurring of those edges to make

1100
00:48:05,600 --> 00:48:06,200
them a little smoother.

1101
00:48:06,200 --> 00:48:09,000
That's kind of the way the artworks, but when we get to this guy,

1102
00:48:09,000 --> 00:48:10,500
you'll notice there's no smooth.

1103
00:48:10,500 --> 00:48:12,000
There's no blending there at all.

1104
00:48:12,000 --> 00:48:15,100
So it's a very hard pixel Edge along the guy.

1105
00:48:15,500 --> 00:48:18,200
And the reason for that again, is because we're not using any partial

1106
00:48:18,200 --> 00:48:19,000
Alpha values at.

1107
00:48:19,000 --> 00:48:22,100
All, right, we're not doing anything to try and use those values that

1108
00:48:22,100 --> 00:48:24,100
are in between 0 and 255.

1109
00:48:25,200 --> 00:48:26,600
We're just making a hard cut off.

1110
00:48:26,600 --> 00:48:28,500
Now, what this is often called.

1111
00:48:28,500 --> 00:48:29,800
In fact, you'd see this called this in

1112
00:48:30,000 --> 00:48:30,600
3D Graphics lot.

1113
00:48:30,600 --> 00:48:34,200
It's called Alpha test is what this is called, which is basically a

1114
00:48:34,200 --> 00:48:37,500
hard clamp limit, which basically just looks at the alpha value and

1115
00:48:37,500 --> 00:48:40,900
says, I'm either going to do an operation or not based on whether the

1116
00:48:40,900 --> 00:48:43,000
alpha exceeds a threshold or not.

1117
00:48:43,000 --> 00:48:44,500
And that is exactly what we implemented.

1118
00:48:44,500 --> 00:48:48,500
This is basically Alpha test right here, but we'd like to do, is

1119
00:48:48,500 --> 00:48:50,200
something a little bit better than Alpha test.

1120
00:48:50,200 --> 00:48:53,600
We'd rather do something that's actually some kind of an alpha blend.

1121
00:48:53,600 --> 00:48:56,900
A blend that uses the alpha Bal you to compute.

1122
00:48:56,900 --> 00:48:59,400
The, the resulting color that will.

1123
00:49:00,000 --> 00:49:05,900
What's underneath to actually and show through what's underneath in

1124
00:49:05,900 --> 00:49:09,300
case, the alpha value is not to be 5, that make sense.

1125
00:49:13,500 --> 00:49:18,900
Now we are going to do this in the slowest and dumbest possible way

1126
00:49:19,000 --> 00:49:22,600
because I'd like to make show the math being explicit.

1127
00:49:23,500 --> 00:49:26,400
And so this will not be fast by any stretch of the imagination.

1128
00:49:26,400 --> 00:49:27,500
It will be very slow.

1129
00:49:28,000 --> 00:49:29,900
But again, we are not writing the render at the moment.

1130
00:49:29,900 --> 00:49:33,400
What we're trying to do is write stuff that we can use and so what I'd

1131
00:49:33,400 --> 00:49:35,200
rather do is just so well, you know what,

1132
00:49:38,200 --> 00:49:41,100
No, I'm not going to talk about how to do any of the fast stuff.

1133
00:49:41,100 --> 00:49:43,400
We're just going to do it being the slowest possible way.

1134
00:49:44,000 --> 00:49:45,400
So what we'd like to do now.

1135
00:49:46,500 --> 00:49:49,500
Is we'd like to go ahead and and see about how to actually do that.

1136
00:49:49,500 --> 00:49:50,100
Alpha planned.

1137
00:49:50,300 --> 00:49:53,600
Now, I probably shouldn't spend too much time belaboring this because

1138
00:49:53,600 --> 00:49:58,700
there's actually an entire video in fact of me explaining

1139
00:49:59,100 --> 00:50:00,000
interpolation.

1140
00:50:00,200 --> 00:50:03,600
And I don't know whether we want to rehash that entirely on the stream

1141
00:50:03,600 --> 00:50:05,500
or just to that just crash.

1142
00:50:06,000 --> 00:50:08,300
I think creates it just totally crashed on me.

1143
00:50:08,700 --> 00:50:09,700
It did, didn't it?

1144
00:50:11,300 --> 00:50:12,300
Yes, it did create.

1145
00:50:12,300 --> 00:50:12,400
It.

1146
00:50:12,400 --> 00:50:13,800
Just totally just crashed.

1147
00:50:13,800 --> 00:50:15,000
It just full-on.

1148
00:50:15,300 --> 00:50:16,100
It's full-on.

1149
00:50:17,000 --> 00:50:18,200
Went away completely.

1150
00:50:21,500 --> 00:50:23,100
Well, what you gonna do?

1151
00:50:23,200 --> 00:50:24,400
Let's launch it back up.

1152
00:50:25,100 --> 00:50:25,800
Come on.

1153
00:50:27,500 --> 00:50:28,400
You can do it.

1154
00:50:31,100 --> 00:50:31,600
It was working.

1155
00:50:31,600 --> 00:50:32,900
So, well, there for a while.

1156
00:50:33,000 --> 00:50:34,700
See, I tried to make a new image.

1157
00:50:34,800 --> 00:50:35,000
I guess.

1158
00:50:35,000 --> 00:50:38,000
The, the thing to remember is never tried to make a new image.

1159
00:50:38,000 --> 00:50:38,500
People.

1160
00:50:38,700 --> 00:50:39,700
That's the rules.

1161
00:50:39,900 --> 00:50:41,600
You don't ever want to make a new image.

1162
00:50:42,600 --> 00:50:44,100
All right, that's fine.

1163
00:50:44,400 --> 00:50:45,600
Make the image please.

1164
00:50:46,700 --> 00:50:47,200
There we go.

1165
00:50:48,000 --> 00:50:48,600
Hello.

1166
00:50:49,200 --> 00:50:50,700
All right, okay.

1167
00:50:51,800 --> 00:50:52,500
So, here we go.

1168
00:50:53,300 --> 00:50:56,100
So what we need to essentially do here, right?

1169
00:50:56,600 --> 00:50:59,800
Is, I want to make something that allows us to smoothly blend.

1170
00:51:00,000 --> 00:51:01,400
Between the two values.

1171
00:51:01,600 --> 00:51:04,100
So we have a background value, right?

1172
00:51:04,100 --> 00:51:08,300
Don't know why that's always the hand shake just is, I guess the hand

1173
00:51:08,300 --> 00:51:09,400
was what they thought was good there.

1174
00:51:09,900 --> 00:51:12,100
So I have a background color that's coming in.

1175
00:51:12,100 --> 00:51:12,400
Right?

1176
00:51:12,400 --> 00:51:13,300
I've got a hand.

1177
00:51:13,700 --> 00:51:15,100
Apparently that's drawing this.

1178
00:51:15,100 --> 00:51:15,500
Now.

1179
00:51:15,600 --> 00:51:16,600
I've got a background color.

1180
00:51:16,600 --> 00:51:19,800
It's funny to have it be a hand like that, that help at all.

1181
00:51:19,800 --> 00:51:20,100
Nope.

1182
00:51:20,100 --> 00:51:21,000
That doesn't help at all.

1183
00:51:21,500 --> 00:51:23,100
Welcome to the mysteries of the universe.

1184
00:51:23,100 --> 00:51:25,200
Ladies and gentlemen, I've got a background pixel.

1185
00:51:25,200 --> 00:51:27,200
So this is one pixel, right?

1186
00:51:27,600 --> 00:51:29,900
I've got a background pixel and I've got

1187
00:51:30,000 --> 00:51:32,300
A foreground pixel, right that this is the spry.

1188
00:51:32,300 --> 00:51:34,700
Guess I'll call this the Sprite pixel, the bitmap pixel that we're

1189
00:51:34,700 --> 00:51:36,000
drawing, right?

1190
00:51:38,300 --> 00:51:41,300
So this is what ever is in the buffer, and this is whatever, is in the

1191
00:51:41,300 --> 00:51:41,400
thing.

1192
00:51:41,400 --> 00:51:43,000
We're putting on top, right?

1193
00:51:43,400 --> 00:51:47,600
And so, in this code here, we've got a source at a desk, right?

1194
00:51:47,600 --> 00:51:49,500
So, basically, this is the desk.

1195
00:51:49,500 --> 00:51:54,500
This is the thing we're writing to and we've got the source here.

1196
00:51:54,700 --> 00:51:55,500
This is the source.

1197
00:51:55,500 --> 00:51:56,900
This is the thing that we're trying to draw down.

1198
00:51:56,900 --> 00:51:58,600
This is the guy's head, right?

1199
00:51:58,800 --> 00:52:00,400
So, this is the trees pixels.

1200
00:52:00,400 --> 00:52:03,600
This is the head pixels, right?

1201
00:52:04,200 --> 00:52:05,500
So now if we do this,

1202
00:52:06,500 --> 00:52:09,900
what we need to do is this is some color, you know, let's call that

1203
00:52:09,900 --> 00:52:12,700
color a and this is another color will call that color.

1204
00:52:12,700 --> 00:52:13,100
Be.

1205
00:52:13,700 --> 00:52:14,100
Wow.

1206
00:52:14,500 --> 00:52:15,300
This is awful.

1207
00:52:15,300 --> 00:52:17,200
Like I can't even click down anymore.

1208
00:52:18,600 --> 00:52:21,400
I tell you computers these days.

1209
00:52:21,400 --> 00:52:22,700
Nothing ever works anymore.

1210
00:52:23,100 --> 00:52:23,500
Okay.

1211
00:52:23,700 --> 00:52:26,300
So I've got these two colors, A and B.

1212
00:52:26,600 --> 00:52:30,400
And what I want to do is I want to produce a third color, out of

1213
00:52:30,400 --> 00:52:31,100
these, right?

1214
00:52:31,100 --> 00:52:35,700
I want to produce a see that some blend between a and b and what I

1215
00:52:35,700 --> 00:52:36,100
want it to.

1216
00:52:36,300 --> 00:52:40,400
You is I want it to blend based on that Alpha channel, right?

1217
00:52:40,400 --> 00:52:45,200
I want the alpha channel to blend it such that when it's zero, I get

1218
00:52:45,300 --> 00:52:45,800
a.

1219
00:52:46,600 --> 00:52:49,100
And when it's 255, right?

1220
00:52:50,100 --> 00:52:50,900
I get B.

1221
00:52:52,000 --> 00:52:52,700
Does that make sense?

1222
00:52:53,700 --> 00:52:54,400
So,

1223
00:52:59,000 --> 00:53:00,200
When I actually go to do this.

1224
00:53:01,800 --> 00:53:06,900
What I need to do is figure out some some mathematical way.

1225
00:53:08,300 --> 00:53:14,300
Of getting from A to B smoothly based on another value, right?

1226
00:53:14,300 --> 00:53:16,900
I need to figure out some way to pick because if you think about the

1227
00:53:16,900 --> 00:53:20,800
number line, right, you know, I've got to 55 at the high end for each

1228
00:53:20,800 --> 00:53:24,100
Channel and I've got zero at the low end, right?

1229
00:53:24,200 --> 00:53:27,600
Essentially what I'm doing here is I'm saying I've got two points on

1230
00:53:27,600 --> 00:53:30,100
this and I don't really know where they are.

1231
00:53:30,100 --> 00:53:32,400
In fact, they don't even have to be any particular order, a could be

1232
00:53:32,400 --> 00:53:35,200
higher than b or vice versa or whatever, right?

1233
00:53:35,700 --> 00:53:37,700
So this is let's say, and this is what I say.

1234
00:53:37,900 --> 00:53:40,500
Colors, obviously, I mean one channel so we could think of this as

1235
00:53:40,500 --> 00:53:41,900
just the red channel, right?

1236
00:53:41,900 --> 00:53:44,100
Or the green Channel or the blue Channel, just one of them.

1237
00:53:44,900 --> 00:53:47,900
So what I'm going to do this, I basically have whatever was in the

1238
00:53:47,900 --> 00:53:50,700
background, whatever that channels color was, right?

1239
00:53:50,700 --> 00:53:51,600
That's here.

1240
00:53:52,300 --> 00:53:56,500
And then I have whatever the the new color is that I'm blowing it up.

1241
00:53:56,500 --> 00:53:58,700
Whatever that the Sprite is, whatever is in the guy.

1242
00:53:59,800 --> 00:53:59,900
and,

1243
00:54:00,000 --> 00:54:00,400
Here.

1244
00:54:01,400 --> 00:54:04,400
And what I need to do is figure out a way to produce all of these

1245
00:54:04,400 --> 00:54:06,800
values in between here, right?

1246
00:54:06,900 --> 00:54:10,100
I need to be able to produce all of those values based on what the

1247
00:54:10,100 --> 00:54:12,800
alpha channel is based on what the app that Alpha Channel says.

1248
00:54:13,000 --> 00:54:15,900
And if you have a channel 0 that I'm going to leave it where it was,

1249
00:54:16,500 --> 00:54:18,200
so I'm not going to touch the background at all.

1250
00:54:18,300 --> 00:54:19,500
If the alpha channel is 55.

1251
00:54:19,500 --> 00:54:21,800
I'm going to drive it all the way to be, right.

1252
00:54:22,600 --> 00:54:26,200
So essentially the way you could think about this and the way that I

1253
00:54:26,200 --> 00:54:29,000
usually like to sort of explain it to begin with.

1254
00:54:29,800 --> 00:54:34,200
Is that you can think of it as being based around one of the numbers

1255
00:54:34,200 --> 00:54:36,500
we can think of it as being based around the number.

1256
00:54:36,800 --> 00:54:38,000
That's that's zero Primal.

1257
00:54:38,000 --> 00:54:41,500
So the number where we have zero yields that value which in this case

1258
00:54:41,500 --> 00:54:42,900
is the background color, right?

1259
00:54:43,900 --> 00:54:45,200
We could think of starting there.

1260
00:54:46,200 --> 00:54:49,500
And what we want to do is we want to start there and we want to sort

1261
00:54:49,500 --> 00:54:54,900
of go some distance towards be where that distance is going to be 255.

1262
00:54:54,900 --> 00:54:59,500
If we went all the way right and 0 if we didn't, so

1263
00:54:59,700 --> 00:55:00,500
How do we produce?

1264
00:55:00,500 --> 00:55:01,100
What that?

1265
00:55:01,100 --> 00:55:02,500
What that actual distance is?

1266
00:55:02,500 --> 00:55:02,700
Right?

1267
00:55:02,700 --> 00:55:03,700
What's that value?

1268
00:55:04,300 --> 00:55:07,700
Well, if you know, rudimentary math, you already know what that is.

1269
00:55:07,800 --> 00:55:11,000
It's just B minus a right B.

1270
00:55:11,000 --> 00:55:14,800
Minus a is if you will almost and we haven't talked about vectors yet,

1271
00:55:14,800 --> 00:55:17,300
but it is essentially a one dimensional Vector but it's basically the

1272
00:55:17,300 --> 00:55:17,900
Delta, right?

1273
00:55:17,900 --> 00:55:23,200
It's the, it's the difference between a and b such that if I were to

1274
00:55:23,200 --> 00:55:29,500
take a star today and add back in some, you know, this this

1275
00:55:29,600 --> 00:55:34,800
The full portion I would get be and it's pretty trivial to see why

1276
00:55:34,800 --> 00:55:40,500
algebra wise write a plus B minus a well the to the a positive and a

1277
00:55:40,500 --> 00:55:43,200
negative cancel, and you just are left with B, which is the value that

1278
00:55:43,200 --> 00:55:44,400
I said we would get right.

1279
00:55:45,700 --> 00:55:50,000
So this is basically the core, the core of the thing that we're going

1280
00:55:50,000 --> 00:55:52,300
to use to determine how to blend something, right?

1281
00:55:52,500 --> 00:55:57,000
Because basically all I really need to do is take this expression, the

1282
00:55:57,000 --> 00:56:01,900
a plus the B, minus a right and say as if I can figure out some way to

1283
00:56:01,900 --> 00:56:05,300
only add part of this in there, right?

1284
00:56:05,800 --> 00:56:09,200
All I really need to do is stick some kind of a percentage in here,

1285
00:56:09,300 --> 00:56:09,900
right?

1286
00:56:09,900 --> 00:56:14,900
Some kind of a value that's like a percentage from 0 to 100%, right?

1287
00:56:15,300 --> 00:56:18,900
If I could just multiply this by some percentage, then I could go any

1288
00:56:18,900 --> 00:56:21,300
percentage of the way from A to B.

1289
00:56:21,300 --> 00:56:22,200
Just by changing.

1290
00:56:22,200 --> 00:56:28,600
What p is write a plus, some percent of the distance from A to B is

1291
00:56:28,600 --> 00:56:31,300
going to give me exactly what I want, right?

1292
00:56:32,100 --> 00:56:36,100
So, if we go ahead and build on that assumption, right?

1293
00:56:36,100 --> 00:56:41,300
If I want to say, I've got a plus some percentage here, right?

1294
00:56:41,300 --> 00:56:44,700
And also by convention, this is often called T.

1295
00:56:44,700 --> 00:56:46,000
I'll just point that out to you.

1296
00:56:46,000 --> 00:56:49,300
We can use that because you'll see it uses this way for a often.

1297
00:56:49,300 --> 00:56:53,300
But some percentage of the distance from A to B.

1298
00:56:53,300 --> 00:56:56,700
This would basically give me that value.

1299
00:56:56,700 --> 00:56:57,300
That I wanted.

1300
00:56:57,300 --> 00:56:59,600
This would be that result in color.

1301
00:56:59,600 --> 00:56:59,900
This would

1302
00:57:00,000 --> 00:57:02,300
The color that I wanted out, right?

1303
00:57:03,100 --> 00:57:05,200
So really all I have to do is figure out how to do this.

1304
00:57:05,700 --> 00:57:05,900
Now.

1305
00:57:05,900 --> 00:57:09,900
What you'll also notice is I can rearrange this expression in a couple

1306
00:57:09,900 --> 00:57:10,700
of different ways.

1307
00:57:11,000 --> 00:57:13,600
If, you know, algebra, which I'm hoping everyone on the stream does

1308
00:57:13,600 --> 00:57:17,300
because well, honestly, I've never thought about how to teach algebra

1309
00:57:17,300 --> 00:57:17,800
before.

1310
00:57:17,900 --> 00:57:21,200
So I don't suspect that would give a very good explanation, but

1311
00:57:21,200 --> 00:57:23,500
assuming, you know, algebra, then you also know that I can pretty

1312
00:57:23,500 --> 00:57:27,200
trivially Use the distributive property here to distribute T into this

1313
00:57:27,200 --> 00:57:27,700
expression.

1314
00:57:27,700 --> 00:57:29,700
And I would end up with these terms, right?

1315
00:57:29,700 --> 00:57:29,900
A

1316
00:57:30,000 --> 00:57:34,800
+ TB minus ta, right and I can rearrange those terms.

1317
00:57:35,600 --> 00:57:39,900
Anyway, I want to so I could group them this way, right?

1318
00:57:39,900 --> 00:57:44,700
I could group them here by just removing this term, this term here

1319
00:57:44,700 --> 00:57:45,300
moves here.

1320
00:57:45,500 --> 00:57:46,100
Right?

1321
00:57:46,700 --> 00:57:49,500
And this term stays where it is, this term, slides there.

1322
00:57:49,900 --> 00:57:53,100
If I do that rearrangement, what you can see here, is these two front

1323
00:57:53,100 --> 00:57:57,800
terms, both have an A in it, so I can pull out the 1, minus t there,

1324
00:57:57,900 --> 00:57:59,800
times a plus TB.

1325
00:58:01,200 --> 00:58:05,600
Okay, and now you have what's usually the more canonical version of

1326
00:58:05,600 --> 00:58:08,500
what's called a linear blend, right?

1327
00:58:10,800 --> 00:58:15,400
This is usually called a linear blend and what it is in either form,

1328
00:58:15,400 --> 00:58:17,600
doesn't matter which one you find more attractive.

1329
00:58:17,600 --> 00:58:19,900
They're just different ways of computing, the exact same thing, right?

1330
00:58:19,900 --> 00:58:20,600
Algebra.

1331
00:58:20,700 --> 00:58:21,600
It's the same thing.

1332
00:58:22,800 --> 00:58:25,300
All they are our way of taking one thing in.

1333
00:58:25,900 --> 00:58:28,400
That's your, you know, your starting value one thing in that you're

1334
00:58:28,400 --> 00:58:32,000
ending value and basically being able to produce anything in between

1335
00:58:32,000 --> 00:58:34,700
them by plugging, in this percentage value here, but we haven't

1336
00:58:34,700 --> 00:58:37,900
actually talked about how to actually make this percentage value work

1337
00:58:38,000 --> 00:58:39,200
in practice.

1338
00:58:39,200 --> 00:58:41,500
I just kind of magically wave my hand and said we had a percentage

1339
00:58:41,500 --> 00:58:41,900
value here.

1340
00:58:41,900 --> 00:58:44,600
So we now need to talk a little bit about just how that guy works.

1341
00:58:44,600 --> 00:58:45,200
Right?

1342
00:58:45,600 --> 00:58:50,400
Well, literally in the mass sense, and if you're doing this entirely

1343
00:58:50,400 --> 00:58:52,500
in floating Point math, it could literally

1344
00:58:52,700 --> 00:58:55,500
Be a percentage, right, you know how to translate percentages.

1345
00:58:55,500 --> 00:58:57,500
Again, if you've had high school math or whatever, you know, how to

1346
00:58:57,500 --> 00:59:00,300
track to translate percentages into floating Point math.

1347
00:59:01,000 --> 00:59:09,500
100 percent, right is 1.0., 50% is 0.5., Right?

1348
00:59:09,800 --> 00:59:12,300
0% is 0, right?

1349
00:59:12,300 --> 00:59:18,500
So the numbers between 0 and 1 all inclusive in, there are just those

1350
00:59:18,500 --> 00:59:19,000
percentages.

1351
00:59:19,000 --> 00:59:22,500
So really in this expression, if T were to rain,

1352
00:59:22,600 --> 00:59:26,000
Between zero and one, including on the fractional values in between

1353
00:59:26,000 --> 00:59:26,400
it.

1354
00:59:26,700 --> 00:59:29,600
Then no matter what a and b are, I don't care what they are.

1355
00:59:29,600 --> 00:59:30,400
They could be colors.

1356
00:59:30,400 --> 00:59:32,000
They could be anything positions in space.

1357
00:59:32,000 --> 00:59:33,000
Whatever doesn't matter.

1358
00:59:34,300 --> 00:59:36,100
This will give us a blend between them.

1359
00:59:36,700 --> 00:59:37,000
Right?

1360
00:59:37,000 --> 00:59:39,600
This will allow us to move smoothly between the two of them.

1361
00:59:40,800 --> 00:59:44,200
Okay, and so, if you're interested about in more about this sort of

1362
00:59:44,200 --> 00:59:48,700
stuff as well, I would also recommend if you do want to go to YouTube

1363
00:59:49,400 --> 00:59:50,000
on the handmade.

1364
00:59:50,000 --> 00:59:54,400
In fact, Youtube Casey Amira Tori, I think is what you would type in

1365
00:59:54,400 --> 00:59:54,800
here.

1366
00:59:55,800 --> 00:59:57,000
Let's see here.

1367
00:59:57,400 --> 00:59:58,700
Casey, Mira Tori on YouTube.

1368
00:59:58,700 --> 00:59:59,200
There we go.

1369
01:00:00,000 --> 01:00:02,500
You can actually see in my videos page.

1370
01:00:02,900 --> 01:00:09,200
There is a witness Wednesday part 10 interpolation video and that is a

1371
01:00:09,200 --> 01:00:12,100
full-on 50-minute explanation of interpolation and how it works in a

1372
01:00:12,100 --> 01:00:12,800
lot of different ways.

1373
01:00:13,500 --> 01:00:16,500
So basically, if you want to watch that for more information, you can

1374
01:00:16,500 --> 01:00:17,200
do that as well.

1375
01:00:18,100 --> 01:00:20,200
So, where are we at here?

1376
01:00:20,200 --> 01:00:21,800
We've only got seven minutes left.

1377
01:00:22,000 --> 01:00:25,500
So let's go ahead and slam in the floating-point version of this so

1378
01:00:25,500 --> 01:00:28,500
that we can actually see it in action and then maybe we'll go ahead

1379
01:00:28,500 --> 01:00:29,800
and fix it to be fixed.

1380
01:00:30,000 --> 01:00:33,000
Point version later, but basically you can see exactly what I'm

1381
01:00:33,000 --> 01:00:33,700
talking about here.

1382
01:00:33,900 --> 01:00:34,400
Right?

1383
01:00:34,500 --> 01:00:35,000
So

1384
01:00:36,100 --> 01:00:39,300
If I was to go in here and write the floating-point version of this,

1385
01:00:39,800 --> 01:00:41,700
let's go ahead and see what we get.

1386
01:00:41,700 --> 01:00:42,200
Right.

1387
01:00:42,900 --> 01:00:43,500
What I would get.

1388
01:00:43,500 --> 01:00:46,400
First of all is I got to extract my read.

1389
01:00:46,400 --> 01:00:52,000
Write and so my red channel is going to basically be shifted down by

1390
01:00:52,100 --> 01:00:53,100
by 16.

1391
01:00:53,100 --> 01:00:54,800
Whatever is in that Source, right?

1392
01:00:54,800 --> 01:00:55,800
And then masked off.

1393
01:00:56,100 --> 01:00:56,800
So, there we go.

1394
01:00:57,200 --> 01:00:58,600
And convert it to a float.

1395
01:00:58,600 --> 01:01:00,800
So, that's a number between 0 and 255.

1396
01:01:01,400 --> 01:01:01,900
There we go.

1397
01:01:03,200 --> 01:01:05,200
Do do so, then we have green.

1398
01:01:06,000 --> 01:01:09,500
I guess I could just do r g and B short, right?

1399
01:01:09,900 --> 01:01:14,600
The green is the eighth and that's zero then the alpha channel, right?

1400
01:01:14,700 --> 01:01:18,100
I need, I just said, I need it to be a number between 0 and 1.

1401
01:01:18,100 --> 01:01:21,600
Well, this will be a number between 0 and 255, right?

1402
01:01:21,700 --> 01:01:26,500
So if I want to turn a number between 0, to 5 into a number between 0

1403
01:01:26,500 --> 01:01:29,600
and 1, I need to divide by that range.

1404
01:01:29,600 --> 01:01:31,100
So I need to divide by 255.

1405
01:01:31,100 --> 01:01:34,200
So, that way 0 will map to 0 255 will map to one and everything in

1406
01:01:34,200 --> 01:01:35,700
between will map somewhere in between.

1407
01:01:35,900 --> 01:01:36,400
Right.

1408
01:01:36,600 --> 01:01:40,100
So now I've got an ARG and it be that are actually in floating point.

1409
01:01:40,500 --> 01:01:42,400
Now I need to do the exact equation.

1410
01:01:42,400 --> 01:01:45,100
I just said I need to create my new red.

1411
01:01:45,200 --> 01:01:49,100
So I'll say that my red is now going to be equal to 0.

1412
01:01:49,100 --> 01:01:49,900
I forgot something.

1413
01:01:50,100 --> 01:01:51,200
I need the desk as well.

1414
01:01:51,700 --> 01:01:55,800
So I have my source, ours and my desk ours, right?

1415
01:01:55,800 --> 01:01:59,400
I've gotta I've gotta pull them out of here so that I can blend with

1416
01:01:59,400 --> 01:01:59,700
them.

1417
01:01:59,900 --> 01:02:00,500
Right.

1418
01:02:00,700 --> 01:02:04,600
So I pull out the Death Star of the desk G, the destiny, and I've got

1419
01:02:04,600 --> 01:02:05,700
my Sorcerer And source.

1420
01:02:05,900 --> 01:02:09,000
And to be fair, I guess, I don't actually even care what these are.

1421
01:02:09,100 --> 01:02:12,000
We don't even care if these are r, g and B, we just care that their

1422
01:02:12,000 --> 01:02:13,700
Channel 0 1 & 2, right?

1423
01:02:13,700 --> 01:02:14,700
We don't even care.

1424
01:02:15,100 --> 01:02:17,700
So we could be wrong about these shifts and it wouldn't matter as long

1425
01:02:17,700 --> 01:02:18,500
as we do them all.

1426
01:02:19,200 --> 01:02:22,500
So anyway, now I'm going to actually produce my result red.

1427
01:02:22,900 --> 01:02:26,200
And my result red is just going to be the exact equation that I just

1428
01:02:26,200 --> 01:02:27,000
specified.

1429
01:02:27,000 --> 01:02:31,400
It's going to be a plus T, A minus B, if I wanted to do it that way,

1430
01:02:31,400 --> 01:02:34,800
or I can do it this way over here, which is 1 minus t plus t b.

1431
01:02:34,900 --> 01:02:35,400
Right?

1432
01:02:35,500 --> 01:02:35,700
So I

1433
01:02:35,800 --> 01:02:41,000
I can do it this way, right times a plus T times B.

1434
01:02:41,000 --> 01:02:42,500
So we'll leave it that way for now.

1435
01:02:42,500 --> 01:02:47,800
And will basically, say, okay, if I do one, what's mighty well might,

1436
01:02:47,800 --> 01:02:48,500
he's the alpha value.

1437
01:02:48,500 --> 01:02:49,400
That's the thing.

1438
01:02:49,400 --> 01:02:52,300
That's, that's actually causing it to work there.

1439
01:02:52,300 --> 01:02:55,800
And then what's my a, and my B, my a is going to be my destination.

1440
01:02:55,800 --> 01:02:57,600
Red X, my source red.

1441
01:02:57,600 --> 01:02:59,500
Because I'm trying to get to the source red, right?

1442
01:02:59,500 --> 01:02:59,900
So that's all.

1443
01:03:00,000 --> 01:03:05,400
Red is the B color and the background color is the a color, right?

1444
01:03:06,900 --> 01:03:08,400
All right, I believe, that's what we said.

1445
01:03:08,400 --> 01:03:08,900
It was.

1446
01:03:09,100 --> 01:03:12,900
And so off, we go now we'll go ahead and just do that for all of them.

1447
01:03:13,400 --> 01:03:14,400
Got to move that up a bit.

1448
01:03:14,400 --> 01:03:16,700
So it's not obscured by the five-minute warning.

1449
01:03:16,700 --> 01:03:19,400
The dreaded five-minute warning, the oops.

1450
01:03:21,200 --> 01:03:21,600
Okay?

1451
01:03:21,800 --> 01:03:26,200
Okay, be be like that.

1452
01:03:26,300 --> 01:03:29,700
And then, once we're done, we have to then reassemble the

1453
01:03:30,000 --> 01:03:33,400
Resulting value back into something that we can actually use.

1454
01:03:33,600 --> 01:03:38,100
So, what I have to do now is actually do sort of that that build back

1455
01:03:38,100 --> 01:03:40,700
again for the thing that we're going to actually write for desk.

1456
01:03:40,700 --> 01:03:43,400
So we have to actually write something to dest, and what we're going

1457
01:03:43,400 --> 01:03:47,500
to write to test is going to be our our board with r.g.

1458
01:03:47,500 --> 01:03:52,100
Ordered with our be, but we have to now turn them back into actual

1459
01:03:52,800 --> 01:03:54,100
actual rounded values, right?

1460
01:03:54,100 --> 01:03:58,100
So we have to actually round the values each time now, so,

1461
01:04:00,200 --> 01:04:03,500
Like that, I suppose we could just go ahead since we know these are

1462
01:04:03,500 --> 01:04:05,000
always positive.

1463
01:04:05,000 --> 01:04:09,700
We could also do this as a truncation which would be a little cleaner,

1464
01:04:09,700 --> 01:04:10,000
right?

1465
01:04:10,000 --> 01:04:13,800
I could do it this way where we just actually truncate the values,

1466
01:04:14,100 --> 01:04:15,400
plus, the rounding amount.

1467
01:04:15,800 --> 01:04:19,700
Like so, which I think, you know, probably is a little scenery here

1468
01:04:19,700 --> 01:04:23,900
since we are actually doing this per pixel, per pixel, things are very

1469
01:04:23,900 --> 01:04:24,700
expensive.

1470
01:04:25,200 --> 01:04:28,100
So we do have to watch out even in our test code so that we won't get

1471
01:04:28,100 --> 01:04:29,100
too slow and not be able.

1472
01:04:29,300 --> 01:04:31,800
For us, not for us to use it but we may replace this.

1473
01:04:32,200 --> 01:04:34,300
We probably don't want to be doing this necessarily in floating Point

1474
01:04:34,300 --> 01:04:35,700
math, the way that we're doing it here at now.

1475
01:04:35,700 --> 01:04:37,300
Anyway, but anyway, point being.

1476
01:04:37,800 --> 01:04:38,500
So here we go.

1477
01:04:38,500 --> 01:04:40,800
We're going to actually take these values and pack them back into the

1478
01:04:40,800 --> 01:04:42,900
places that they normally go right?

1479
01:04:42,900 --> 01:04:46,600
Like so you basically unpack them and pack them.

1480
01:04:47,400 --> 01:04:47,700
Oops.

1481
01:04:48,900 --> 01:04:50,500
816 like that.

1482
01:04:50,500 --> 01:04:53,900
The our get shifted back up, think I've put everything in there, don't

1483
01:04:53,900 --> 01:04:54,300
know.

1484
01:04:54,300 --> 01:04:55,800
I wrote that in pretty quickly.

1485
01:04:55,800 --> 01:04:59,100
There will have to step through this and see if it works but I believe

1486
01:04:59,200 --> 01:05:02,400
If we typed it correctly, we should have.

1487
01:05:02,400 --> 01:05:03,300
I'm not going to open.

1488
01:05:03,400 --> 01:05:06,500
I'm not going to paste things in the Creed anymore lesson learned.

1489
01:05:06,600 --> 01:05:09,700
We're going to paste things in to get from now on that way, if it

1490
01:05:09,700 --> 01:05:11,600
crashes, we can still draw in the background.

1491
01:05:11,700 --> 01:05:13,300
So now let's take a look at what happened.

1492
01:05:13,400 --> 01:05:13,900
Can you see?

1493
01:05:13,900 --> 01:05:14,300
And hear?

1494
01:05:14,300 --> 01:05:17,100
How that, how that looks now, where you've basically got?

1495
01:05:17,800 --> 01:05:19,800
You know, that kind of smooth that nice smooth edge.

1496
01:05:19,800 --> 01:05:23,400
Now, that we're being the alpha channel, so that's a much nicer comp,

1497
01:05:23,400 --> 01:05:23,600
right?

1498
01:05:23,600 --> 01:05:27,000
That's just a much nicer thing to look at, right?

1499
01:05:27,100 --> 01:05:29,100
And yeah, I mean,

1500
01:05:29,300 --> 01:05:30,900
That's, that's Alpha blending in a nutshell.

1501
01:05:30,900 --> 01:05:31,200
Right?

1502
01:05:31,200 --> 01:05:34,200
And so what kind of alpha blending actually is?

1503
01:05:34,200 --> 01:05:34,400
This?

1504
01:05:34,400 --> 01:05:37,400
This is a straight, linear blend between the two.

1505
01:05:38,000 --> 01:05:40,100
There's other, like I said before, on the previous screen, there's

1506
01:05:40,100 --> 01:05:41,000
lots of different things.

1507
01:05:41,000 --> 01:05:42,100
You could mean we say Alpha bunny.

1508
01:05:42,100 --> 01:05:45,200
It depends on what that blend equation is, right?

1509
01:05:45,300 --> 01:05:49,500
So basically this guy here, this is our blend equation that we're

1510
01:05:49,500 --> 01:05:51,600
using there are other blend equations.

1511
01:05:53,600 --> 01:05:59,800
So what I'll also say here is to do Casey someday.

1512
01:06:00,100 --> 01:06:07,000
A we need to talk about premultiplied Alpha because we are not talking

1513
01:06:07,000 --> 01:06:10,900
about that at the moment, but now is not the time to start that

1514
01:06:10,900 --> 01:06:13,200
discussion suffice to say.

1515
01:06:15,300 --> 01:06:19,000
This is not be multiplied Alpha but I'll just leave that for a little

1516
01:06:19,000 --> 01:06:22,400
thing that we can talk about later on because at the moment, it's

1517
01:06:22,400 --> 01:06:24,200
really not something that you need to think about whether it's pretty

1518
01:06:24,200 --> 01:06:28,100
multiplied or or not, but it is something that we will have to think

1519
01:06:28,100 --> 01:06:30,700
about a little later on because it affects the math in very important

1520
01:06:30,700 --> 01:06:31,100
ways.

1521
01:06:31,400 --> 01:06:34,700
And we will need to switch to using pre multiply multiply Alpha for

1522
01:06:34,700 --> 01:06:35,900
our final assets and so on.

1523
01:06:36,300 --> 01:06:41,300
So, since we are basically out of time here, I believe.

1524
01:06:41,300 --> 01:06:42,600
Yes, we have one minute left.

1525
01:06:42,700 --> 01:06:44,000
I'm going to call that done for the day.

1526
01:06:44,000 --> 01:06:44,900
We have our alphabet.

1527
01:06:45,000 --> 01:06:45,400
Working.

1528
01:06:45,400 --> 01:06:45,800
Oh, you know what?

1529
01:06:45,800 --> 01:06:46,900
I'm not going to quite call it done for the day.

1530
01:06:46,900 --> 01:06:48,000
I might do one more thing.

1531
01:06:48,800 --> 01:06:52,200
Although I think this this actually will cause us to have a couple

1532
01:06:52,200 --> 01:06:55,400
bugs, but I'm going to go ahead and make our our hero head.

1533
01:06:56,700 --> 01:07:02,000
Actually draw at the location of the player now.

1534
01:07:02,100 --> 01:07:02,900
Yeah, so there we go.

1535
01:07:03,100 --> 01:07:05,300
So there's our hero head, very exciting.

1536
01:07:05,300 --> 01:07:06,800
He's not actually in the right position.

1537
01:07:07,100 --> 01:07:10,300
But at least he moves around there with the guy very much fun.

1538
01:07:10,600 --> 01:07:11,200
Yay.

1539
01:07:11,200 --> 01:07:11,200
Yay.

1540
01:07:11,200 --> 01:07:11,900
Yay.

1541
01:07:12,000 --> 01:07:13,000
For Alpha blending.

1542
01:07:13,100 --> 01:07:13,900
We're pretty close now.

1543
01:07:13,900 --> 01:07:14,800
So, I think basically,

1544
01:07:14,900 --> 01:07:17,000
Tomorrow, we'll have a little guy walking around instead of our

1545
01:07:17,000 --> 01:07:18,100
rectangle because we're pretty close.

1546
01:07:18,300 --> 01:07:24,100
All right, everyone, that is it for now the Q & A has begun.

1547
01:07:24,100 --> 01:07:24,800
Remember?

1548
01:07:24,800 --> 01:07:28,900
I only start looking for Q Colin's when we start the Q&A.

1549
01:07:28,900 --> 01:07:33,000
So please, if you have a question that you'd like, answered now is the

1550
01:07:33,000 --> 01:07:35,200
time to post it to to the twitch chat.

1551
01:07:35,200 --> 01:07:36,700
Put a q: front of it.

1552
01:07:36,700 --> 01:07:39,700
And please keep the questions here in the post dream to stuff.

1553
01:07:39,700 --> 01:07:42,000
It's actually about the code that we wrote today or in previous day's.

1554
01:07:42,300 --> 01:07:44,800
If it's something, that's off topic and about something else.

1555
01:07:45,500 --> 01:07:48,600
Please come before us dream sometime often times.

1556
01:07:48,600 --> 01:07:51,500
I try to be on the stream, about 15 minutes, early to answer just any

1557
01:07:51,500 --> 01:07:53,100
off-topic questions that you want answered.

1558
01:07:53,400 --> 01:07:55,600
And so I do answer those, which is not on the poster because this is

1559
01:07:55,600 --> 01:08:00,300
the one that kind of goes into the recorded, handmade hero stream for

1560
01:08:00,300 --> 01:08:02,700
people to learn on later and I don't want to have lots of off-topic

1561
01:08:02,700 --> 01:08:03,800
stuff that they have to skip through.

1562
01:08:07,000 --> 01:08:11,100
Okay, tiny typo in function, name finally significant set.

1563
01:08:11,100 --> 01:08:12,300
B is missing an eye.

1564
01:08:12,400 --> 01:08:12,800
Okay.

1565
01:08:12,900 --> 01:08:14,900
Thank you, death lizard.

1566
01:08:14,900 --> 01:08:22,500
Let's take a look at that intrinsic, find least significant.

1567
01:08:22,500 --> 01:08:23,100
There we go.

1568
01:08:23,300 --> 01:08:23,899
That's better.

1569
01:08:24,300 --> 01:08:25,500
Let's go ahead and fix that.

1570
01:08:25,500 --> 01:08:28,399
Find least significant bit.

1571
01:08:30,399 --> 01:08:30,800
Okay.

1572
01:08:31,300 --> 01:08:31,899
Thank you very much.

1573
01:08:31,899 --> 01:08:34,899
That is a, definitely a typo.

1574
01:08:39,100 --> 01:08:40,399
Yes, that's true.

1575
01:08:40,800 --> 01:08:43,399
So Mo zaiko was talking about asserting.

1576
01:08:43,399 --> 01:08:44,399
The compression mode is true.

1577
01:08:44,399 --> 01:08:49,000
We only load one type of compression now, which is compression mode 3.

1578
01:08:49,300 --> 01:08:52,500
So, while we were asserting The Masks, we should probably also go

1579
01:08:52,500 --> 01:08:56,700
ahead and assert that the header compression mode is still in that 3

1580
01:08:56,700 --> 01:08:59,000
mode because we don't load any of the other compression modes at

1581
01:08:59,000 --> 01:08:59,300
present.

1582
01:08:59,300 --> 01:08:59,800
So we'd want to

1583
01:09:00,700 --> 01:09:04,899
If we got a file that didn't conform to that compression mode so that

1584
01:09:04,899 --> 01:09:06,100
we could be warned about it.

1585
01:09:06,100 --> 01:09:06,899
It's a good point.

1586
01:09:13,500 --> 01:09:17,399
So also someone was saying we don't need that intrinsic definition

1587
01:09:17,399 --> 01:09:17,899
anymore.

1588
01:09:18,100 --> 01:09:20,399
Well, we do actually need so I do that's not actually true.

1589
01:09:20,700 --> 01:09:21,100
So

1590
01:09:24,200 --> 01:09:26,300
I'll tell you what the person is saying, and then I want to make sure

1591
01:09:26,300 --> 01:09:28,700
that that is actually the case that I'm not sure it is.

1592
01:09:29,100 --> 01:09:32,399
So we'll, yeah, we'll talk about that.

1593
01:09:32,899 --> 01:09:38,500
So basically what the person was saying, they were saying that the you

1594
01:09:38,500 --> 01:09:42,800
don't need this pragma intrinsic if you include intron .h, but I'm not

1595
01:09:42,800 --> 01:09:44,899
100% certain if that's the case.

1596
01:09:49,899 --> 01:09:51,000
Let's find out.

1597
01:09:51,899 --> 01:09:54,500
So let's say we do that right now.

1598
01:09:54,500 --> 01:09:58,300
Let's go take a look at the code that gets generated just so I can see

1599
01:09:59,400 --> 01:10:02,800
if it actually still does that as intrinsic it might.

1600
01:10:03,000 --> 01:10:07,500
But I just want to make sure because I don't actually know, sometimes

1601
01:10:07,500 --> 01:10:08,700
it doesn't for other functions.

1602
01:10:08,700 --> 01:10:09,700
I'm pretty sure it doesn't.

1603
01:10:09,700 --> 01:10:12,500
But for this function because they may not have done a separate

1604
01:10:12,500 --> 01:10:13,600
implementation of it.

1605
01:10:14,000 --> 01:10:14,900
Then it might not.

1606
01:10:15,000 --> 01:10:17,100
So that's, that's definitely possible.

1607
01:10:17,300 --> 01:10:17,700
All right.

1608
01:10:17,700 --> 01:10:18,700
What am I looking for here?

1609
01:10:18,700 --> 01:10:21,300
I'm looking for load bitmap, right?

1610
01:10:21,900 --> 01:10:22,800
BMP.

1611
01:10:23,400 --> 01:10:28,700
So, basically, in here, what we want to do is take a look at this and

1612
01:10:28,700 --> 01:10:31,700
see what it generated to go to disassembly.

1613
01:10:32,000 --> 01:10:32,200
Nope.

1614
01:10:32,200 --> 01:10:32,900
So it does it.

1615
01:10:33,200 --> 01:10:33,400
Okay.

1616
01:10:33,400 --> 01:10:34,300
So that's totally fine.

1617
01:10:34,800 --> 01:10:36,400
So then it is fine without it.

1618
01:10:36,500 --> 01:10:40,500
Sometimes, the reason that I don't that I sometimes if you, if you

1619
01:10:40,500 --> 01:10:43,300
have, if you don't put the private intrinsic, it'll only use it in

1620
01:10:43,300 --> 01:10:44,700
optimized builds or whatever.

1621
01:10:44,700 --> 01:10:47,600
And so I wanted to make sure it was we there's no reason for us, not

1622
01:10:47,600 --> 01:10:48,300
to always use it.

1623
01:10:48,300 --> 01:10:50,300
But as long as it always does, you that then that's totally fine.

1624
01:10:54,900 --> 01:10:57,100
Would it be worthwhile to avoid converted to float when doing the

1625
01:10:57,100 --> 01:10:57,700
alpha blend?

1626
01:10:58,000 --> 01:10:59,900
Yeah, well.

1627
01:11:02,100 --> 01:11:06,300
So this is one of those things that basically what we have to say is

1628
01:11:06,300 --> 01:11:07,100
who knows.

1629
01:11:08,700 --> 01:11:13,400
So technically, I think it probably would be in this particular case,

1630
01:11:13,500 --> 01:11:14,000
right?

1631
01:11:15,600 --> 01:11:20,100
But we're so far away from actually doing performance oriented stuff,

1632
01:11:20,400 --> 01:11:21,600
that who knows.

1633
01:11:21,600 --> 01:11:22,000
It may be.

1634
01:11:22,000 --> 01:11:24,500
That it really, just doesn't matter for our purposes at all in this

1635
01:11:24,500 --> 01:11:29,000
particular case, but for something, this trivial you can do it

1636
01:11:29,000 --> 01:11:31,800
entirely without moving to float.

1637
01:11:32,400 --> 01:11:38,200
But you know, first of all, you never do this, you'd load the whole

1638
01:11:38,200 --> 01:11:40,400
thing as a Cindy Vector.

1639
01:11:40,400 --> 01:11:43,800
Instead of doing the channels individually, like this is just not

1640
01:11:44,900 --> 01:11:47,000
We aren't thinking about performance right now.

1641
01:11:47,400 --> 01:11:50,600
So thinking about whether you could convert to float or not is just

1642
01:11:50,600 --> 01:11:53,400
not that relevant because there's so many things that are wrong with

1643
01:11:53,400 --> 01:11:58,500
this and from a performance standpoint that it's just not really that

1644
01:11:58,500 --> 01:11:59,600
useful to think about it.

1645
01:11:59,600 --> 01:11:59,900
I mean,

1646
01:12:00,600 --> 01:12:05,000
It's a I actually would suspect probably that at the end of the day.

1647
01:12:05,000 --> 01:12:07,200
We won't even be storing things in this format.

1648
01:12:07,200 --> 01:12:10,000
We won't even have a RGB as we might have like a buffer of a as a

1649
01:12:10,000 --> 01:12:13,000
buffer of ours and a buffer of geez and so on, right?

1650
01:12:13,000 --> 01:12:14,600
Like so things might

1651
01:12:16,500 --> 01:12:21,200
It's worth being aware of how your code is performing, but it's also

1652
01:12:21,200 --> 01:12:23,800
worth knowing when you don't really care about some differences.

1653
01:12:23,800 --> 01:12:24,300
And in that case.

1654
01:12:24,300 --> 01:12:25,000
I think that's a difference.

1655
01:12:25,000 --> 01:12:26,400
We probably wouldn't care about that much.

1656
01:12:26,400 --> 01:12:29,400
It might be interesting to do it, just to show how you would do it

1657
01:12:29,400 --> 01:12:30,800
without, converting it to float.

1658
01:12:31,200 --> 01:12:34,200
But yeah, do I expect this to be a major performance thing?

1659
01:12:34,200 --> 01:12:37,800
No, not really because we're already performing so poorly probably

1660
01:12:38,400 --> 01:12:38,600
that.

1661
01:12:38,600 --> 01:12:41,000
I'm not sure how much worse this would really make it.

1662
01:12:41,000 --> 01:12:42,400
You know, it's hard to say.

1663
01:12:48,100 --> 01:12:49,300
Why is the windows logo stuff?

1664
01:12:49,300 --> 01:12:52,200
Isn't that the I have no idea because I don't know if you caught at

1665
01:12:52,200 --> 01:12:53,000
the beginning of the stream.

1666
01:12:53,000 --> 01:12:54,300
I was doing that.

1667
01:12:54,800 --> 01:12:57,600
That tweak thing that 7 + taskbar, tweaker thing.

1668
01:12:58,400 --> 01:13:01,600
And it's the thing that that's causing the windows to not be on top.

1669
01:13:01,600 --> 01:13:02,500
It might be.

1670
01:13:03,300 --> 01:13:04,300
It might be possible.

1671
01:13:04,300 --> 01:13:06,000
That that's a thing that was intentional.

1672
01:13:06,400 --> 01:13:08,700
So, let me see if it's in the advanced options.

1673
01:13:09,500 --> 01:13:10,300
I'm not sure.

1674
01:13:10,800 --> 01:13:11,700
Let's see.

1675
01:13:15,400 --> 01:13:17,400
Let's see why that's doing that.

1676
01:13:17,800 --> 01:13:22,900
You know, that's in the help over here.

1677
01:13:23,200 --> 01:13:28,300
So C option, z x, and

1678
01:13:30,000 --> 01:13:30,400
Fix this.

1679
01:13:30,400 --> 01:13:34,100
But when the classic theme is used clicking on the screen Corner, no

1680
01:13:34,200 --> 01:13:35,400
customized, horizontal paging.

1681
01:13:35,400 --> 01:13:37,600
It's a shown two o'clock loves to customize.

1682
01:13:37,600 --> 01:13:38,800
Show desktop button.

1683
01:13:39,100 --> 01:13:40,500
It's rest reverse the direction.

1684
01:13:41,800 --> 01:13:42,000
Yeah.

1685
01:13:42,000 --> 01:13:45,400
I don't, I don't actually know if there's a thing.

1686
01:13:45,400 --> 01:13:50,100
I'll look for it later, but I don't see unfortunately.

1687
01:13:50,100 --> 01:13:52,300
I don't see a way to get it to stop doing that.

1688
01:13:52,700 --> 01:13:55,700
So I think that's might just happen for a while until we figure out

1689
01:13:55,700 --> 01:13:56,600
how to get rid of it.

1690
01:14:07,900 --> 01:14:09,500
Let's see.

1691
01:14:12,300 --> 01:14:16,000
Are there other ways to use out or are there other ways to Alpha

1692
01:14:16,000 --> 01:14:16,600
blend?

1693
01:14:16,900 --> 01:14:18,900
And should you be taking into account?

1694
01:14:18,900 --> 01:14:21,100
Which colors are easier to see?

1695
01:14:21,300 --> 01:14:23,800
Like, green appears to be brighter than red.

1696
01:14:25,700 --> 01:14:29,500
So assuming that, I understand your question correctly.

1697
01:14:31,300 --> 01:14:34,500
I think what you're asking is, are there other ways to blend between

1698
01:14:34,500 --> 01:14:35,400
two colors?

1699
01:14:36,700 --> 01:14:39,300
Such that you're not just using per Channel.

1700
01:14:45,800 --> 01:14:50,600
So the first thing I will say is that yes, there are many ways.

1701
01:14:50,600 --> 01:14:53,000
You could consider blending between two things.

1702
01:14:53,900 --> 01:14:55,200
This is a linear blend.

1703
01:14:59,000 --> 01:14:59,700
For starters.

1704
01:15:01,800 --> 01:15:07,700
And it's linear in whatever space, the colors are in which themselves

1705
01:15:08,000 --> 01:15:09,100
may not be linear.

1706
01:15:09,600 --> 01:15:12,300
So we haven't will talk about this a lot.

1707
01:15:12,300 --> 01:15:13,100
We get to the renderer.

1708
01:15:13,100 --> 01:15:16,000
But basically what you have to understand is that the colors that are

1709
01:15:16,000 --> 01:15:18,300
displayed out of the monitor or actually not linear.

1710
01:15:19,100 --> 01:15:21,900
So basically, you know, we think about these colors and we're doing

1711
01:15:21,900 --> 01:15:22,400
this math.

1712
01:15:22,400 --> 01:15:28,200
The math actually is assuming that the colors are are linear a lot of

1713
01:15:28,200 --> 01:15:30,400
times but actually the way

1714
01:15:30,800 --> 01:15:32,600
Work is there's actually a curve.

1715
01:15:32,700 --> 01:15:35,800
So basically, you know, there's a color value that you set.

1716
01:15:36,100 --> 01:15:39,500
So there's basically a value from 250 0 to 255 that we are setting and

1717
01:15:39,500 --> 01:15:41,300
we're calling that the color, right?

1718
01:15:43,400 --> 01:15:45,400
So, what happens though?

1719
01:15:45,600 --> 01:15:50,300
Is that when that value is given over to the display?

1720
01:15:51,400 --> 01:15:54,100
It actually goes through a number of mappings potentially once

1721
01:15:54,100 --> 01:15:55,200
potentially on the graphics card.

1722
01:15:55,200 --> 01:15:59,000
And once potentially, by the monitor, that actually changes the

1723
01:15:59,000 --> 01:16:02,200
perceived brightness of that to not be linear.

1724
01:16:02,300 --> 01:16:04,900
So, then there's brightness here, right?

1725
01:16:06,800 --> 01:16:10,700
And so what actually happens is there some curve that happens here,

1726
01:16:10,900 --> 01:16:11,600
right?

1727
01:16:12,500 --> 01:16:17,600
You know, there's there's some curve you can imagine where as you

1728
01:16:17,600 --> 01:16:22,800
change the actual numerical value of the color instead of it getting

1729
01:16:23,300 --> 01:16:27,500
you know, if you change it from between 0 and 10, the difference in

1730
01:16:27,500 --> 01:16:31,700
brightness, may be much more than the same distance, right?

1731
01:16:31,700 --> 01:16:35,500
240 to 250 or something might be a lot less.

1732
01:16:35,700 --> 01:16:38,200
Of a difference in brightness, right?

1733
01:16:38,500 --> 01:16:41,300
Let's say or vice versa, depending on how those curves are set.

1734
01:16:42,200 --> 01:16:44,800
I think they're usually set in this way, but I can't quite remember

1735
01:16:44,800 --> 01:16:46,300
their exponentiated, right?

1736
01:16:46,600 --> 01:16:50,200
Yeah, so well for exponentially, they won't be this way.

1737
01:16:50,200 --> 01:16:50,600
I don't know.

1738
01:16:51,000 --> 01:16:51,700
Let's take a look.

1739
01:16:51,900 --> 01:16:55,100
So just to just to give you the, it's been a.

1740
01:16:56,100 --> 01:16:57,700
This is the first Graphics programming.

1741
01:16:57,700 --> 01:16:59,300
I've done in a long time actually.

1742
01:16:59,800 --> 01:17:03,100
So, you know a lot of this stuff is Rusty for me to be honest with

1743
01:17:03,100 --> 01:17:03,300
you.

1744
01:17:04,300 --> 01:17:05,500
So, let's see.

1745
01:17:05,600 --> 01:17:07,100
The srgb Gama curve?

1746
01:17:07,100 --> 01:17:08,100
Can we look at that?

1747
01:17:08,200 --> 01:17:10,800
Can we get that up here somewhere gamma curve.

1748
01:17:10,900 --> 01:17:11,700
Here we go.

1749
01:17:13,500 --> 01:17:19,300
So linear space, and there's well, that's not what I actually wanted.

1750
01:17:19,300 --> 01:17:22,200
I wanted one on one side and one with the other.

1751
01:17:23,900 --> 01:17:25,400
This is not giving me the values.

1752
01:17:25,400 --> 01:17:26,000
I want.

1753
01:17:26,000 --> 01:17:31,300
I just want brightness on one side and value on the other.

1754
01:17:33,300 --> 01:17:35,100
I'm not looking for gamma correction.

1755
01:17:35,700 --> 01:17:37,200
I'm actually looking for just that.

1756
01:17:37,400 --> 01:17:38,600
Doesn't anyone bake it down.

1757
01:17:38,600 --> 01:17:40,700
I just want someone who's baked down for me.

1758
01:17:41,200 --> 01:17:42,600
That's really all I want.

1759
01:17:44,700 --> 01:17:49,700
Well, let's take a look at see if this has it so srgb.

1760
01:17:49,800 --> 01:17:51,600
That's actually got the full color Cube.

1761
01:17:51,600 --> 01:17:52,100
Here we go.

1762
01:17:52,800 --> 01:17:57,100
Srgb intensity is versus HIV numerical values, right?

1763
01:17:58,400 --> 01:17:59,800
So basically

1764
01:18:00,000 --> 01:18:01,200
Let's see, which one is red.

1765
01:18:01,200 --> 01:18:04,000
So srgb numerical values are red curve.

1766
01:18:04,200 --> 01:18:05,700
These are the numerical values.

1767
01:18:08,900 --> 01:18:10,900
And I assume that's the intensity.

1768
01:18:12,900 --> 01:18:17,400
Showing exact look impressed value of serving at linear intensity.

1769
01:18:19,500 --> 01:18:21,400
Or at a linear intensity of this curve is linear.

1770
01:18:21,400 --> 01:18:24,700
So the gamma is 1, which curve are we talking about?

1771
01:18:25,300 --> 01:18:25,600
All right.

1772
01:18:25,600 --> 01:18:26,400
This is not what I wanted.

1773
01:18:26,400 --> 01:18:28,700
I just want, why can't I get what I want?

1774
01:18:28,700 --> 01:18:31,300
Maybe I'm misinterpreting these diagrams, but I literally just want

1775
01:18:31,300 --> 01:18:32,200
what I just drew.

1776
01:18:32,400 --> 01:18:33,100
I wanted something.

1777
01:18:33,100 --> 01:18:35,100
That's the value that you put into the buffer.

1778
01:18:35,100 --> 01:18:38,800
It's coming out and how bright it appears on the monitor.

1779
01:18:38,800 --> 01:18:40,000
That's all I wanted.

1780
01:18:40,200 --> 01:18:40,700
I don't know why.

1781
01:18:40,700 --> 01:18:41,200
I can't get.

1782
01:18:41,200 --> 01:18:42,300
I just want one graph.

1783
01:18:42,300 --> 01:18:45,600
That's just got that curve on it so that I could show you, but I don't

1784
01:18:45,600 --> 01:18:45,700
know.

1785
01:18:45,700 --> 01:18:46,800
Okay, so we can't get that curve.

1786
01:18:46,800 --> 01:18:48,100
Maybe we'll look up that curve.

1787
01:18:48,200 --> 01:18:49,000
I'll look up that curve out.

1788
01:18:49,200 --> 01:18:49,800
Side the stream.

1789
01:18:49,800 --> 01:18:51,900
So I won't have to waste your time watching me.

1790
01:18:51,900 --> 01:18:55,400
You try to read through documentation, but basically point being it's

1791
01:18:55,400 --> 01:18:56,000
nonlinear.

1792
01:18:56,600 --> 01:19:03,000
So it's entirely possible, that that is a bad thing for your blend.

1793
01:19:03,100 --> 01:19:03,600
Right?

1794
01:19:03,700 --> 01:19:08,100
You may be doing Alpha blending a and you want this this Alpha was

1795
01:19:08,100 --> 01:19:09,400
expecting it to be.

1796
01:19:09,600 --> 01:19:13,000
You know, let's say a smooth linear transition.

1797
01:19:13,000 --> 01:19:16,200
So as you change Alpha, you get a smooth step all along the way.

1798
01:19:16,700 --> 01:19:19,000
But instead, you're actually, if you're doing it in this,

1799
01:19:19,100 --> 01:19:20,200
Exponentiate space.

1800
01:19:20,400 --> 01:19:24,300
Unbeknownst to you a little bit of the blend actually goes a long way

1801
01:19:24,300 --> 01:19:26,300
in terms of what the perceived blend towards.

1802
01:19:26,300 --> 01:19:28,100
The new color, is things like that.

1803
01:19:28,100 --> 01:19:29,800
So there's Alpha corrected versions.

1804
01:19:29,800 --> 01:19:30,800
You can do some of these things.

1805
01:19:30,800 --> 01:19:36,200
There's other blend equations that do other operations that aren't

1806
01:19:36,200 --> 01:19:37,900
designed to basically map.

1807
01:19:37,900 --> 01:19:38,800
One thing on to the other.

1808
01:19:38,800 --> 01:19:43,000
There's pre multiplied versus not, non P multiplied, Alpha, which is

1809
01:19:43,000 --> 01:19:47,600
basically getting rid of this 1.0 - a term and baking it into the to

1810
01:19:47,600 --> 01:19:49,100
the I'm sorry gets rid of

1811
01:19:49,200 --> 01:19:52,600
A term and makes it into the SSR term, which is another thing

1812
01:19:52,600 --> 01:19:53,300
altogether.

1813
01:19:53,300 --> 01:19:55,300
So, there is a lot of stuff that goes on here.

1814
01:19:55,600 --> 01:19:59,000
I don't know if that's exactly what you were asking, but that's how

1815
01:19:59,000 --> 01:19:59,600
that works.

1816
01:19:59,900 --> 01:20:03,200
Whether you take into account the fact that channels work differently.

1817
01:20:04,300 --> 01:20:05,500
I don't think so.

1818
01:20:05,600 --> 01:20:09,200
Because the images themselves have already had that taken into account

1819
01:20:09,200 --> 01:20:11,600
and you need to smoothly blend between them.

1820
01:20:12,600 --> 01:20:17,100
So you can blend in a different color space like you could blend

1821
01:20:17,100 --> 01:20:20,400
instead of letting in RGB you could blend in HSV or you can blend and

1822
01:20:20,400 --> 01:20:22,000
log or you could do other things like this.

1823
01:20:22,000 --> 01:20:25,700
I don't know whether that's really such a good idea though, because

1824
01:20:25,700 --> 01:20:30,100
then what you'll get is you're not going to get smooth changes in the

1825
01:20:30,100 --> 01:20:33,100
colors of the pixel elements on the screen since they are r.

1826
01:20:33,100 --> 01:20:35,900
G and B, so I think that's probably where you want to be for the

1827
01:20:35,900 --> 01:20:36,900
operation that we're doing.

1828
01:20:36,900 --> 01:20:39,900
But if you were trying to Alpha blend, if you're trying to do an

1829
01:20:39,900 --> 01:20:42,300
alphabet, that was trying to do something else like smoothly.

1830
01:20:42,700 --> 01:20:44,200
Hughes of things together.

1831
01:20:44,400 --> 01:20:46,800
Then you might want to blend in a different color space one that

1832
01:20:46,800 --> 01:20:49,800
wasn't based on our gnb one that had different properties.

1833
01:20:50,000 --> 01:20:50,500
I don't know.

1834
01:20:50,700 --> 01:20:50,900
Sorry.

1835
01:20:50,900 --> 01:20:52,200
I don't have a good answer to that question.

1836
01:20:52,200 --> 01:20:52,600
Really?

1837
01:20:54,600 --> 01:20:55,000
I don't know.

1838
01:20:55,000 --> 01:20:59,400
Yeah, I don't think I answered that very well, but there are different

1839
01:20:59,400 --> 01:20:59,800
ways of

1840
01:21:00,000 --> 01:21:00,500
Things.

1841
01:21:00,900 --> 01:21:03,100
But I don't know if they are exactly the way that maybe you're

1842
01:21:03,100 --> 01:21:04,000
thinking about it.

1843
01:21:07,600 --> 01:21:10,300
Are we at all concerned with the destinations alpha or blending with a

1844
01:21:10,300 --> 01:21:11,700
transparent destination?

1845
01:21:12,400 --> 01:21:16,400
So, well, we are and we aren't basically, we're not concerned.

1846
01:21:16,400 --> 01:21:18,300
The reason we're not concerned with the destinations.

1847
01:21:18,300 --> 01:21:20,800
Alpha Channel at the moment is a because we don't

1848
01:21:22,400 --> 01:21:23,100
So, two reasons.

1849
01:21:24,600 --> 01:21:26,400
First of all, we never really right?

1850
01:21:26,400 --> 01:21:29,300
The destinations Alpha Channel because we don't care about it at.

1851
01:21:29,300 --> 01:21:29,600
All.

1852
01:21:29,700 --> 01:21:32,000
Right, so you can see in this expression.

1853
01:21:32,000 --> 01:21:32,700
We don't even write it.

1854
01:21:32,700 --> 01:21:34,200
It's always zero, right?

1855
01:21:34,200 --> 01:21:36,500
The destination just always going to have a zero Alpha Channel always.

1856
01:21:37,800 --> 01:21:39,500
Now, that doesn't mean you have to do that.

1857
01:21:39,900 --> 01:21:43,700
You can do rendering that uses the destination Alpha channel to store

1858
01:21:43,700 --> 01:21:45,300
important information that it will use.

1859
01:21:45,900 --> 01:21:49,900
And this is basically something that we may explore later when we're

1860
01:21:49,900 --> 01:21:52,900
actually doing our actual renderer because there's reasons why you

1861
01:21:52,900 --> 01:21:54,700
might want to use destination Alpha to do things.

1862
01:21:55,600 --> 01:21:57,300
But for right now, we don't have a destination up.

1863
01:21:57,900 --> 01:22:00,300
However, what I do want to point out is this doesn't have anything to

1864
01:22:00,300 --> 01:22:04,200
do with blending with other transparent things because that actually

1865
01:22:04,200 --> 01:22:07,200
just always works because basically since we are

1866
01:22:07,800 --> 01:22:12,700
Since we're basically, since we are always drawing things in Photoshop

1867
01:22:12,700 --> 01:22:17,800
style, like I was saying before we're going to layer things down such

1868
01:22:17,800 --> 01:22:22,300
that we start with the bottom layer, right, which has just whatever

1869
01:22:22,300 --> 01:22:23,200
our base coat is, right.

1870
01:22:23,200 --> 01:22:24,900
It's some grass or something, right?

1871
01:22:24,900 --> 01:22:28,800
And then we're going to like, right onto that a tree or whatever, and

1872
01:22:28,800 --> 01:22:30,000
then we're going to write on top of that.

1873
01:22:30,000 --> 01:22:32,800
The guy that's in front of the tree, since we know, we're always going

1874
01:22:32,800 --> 01:22:33,500
to be doing that.

1875
01:22:33,500 --> 01:22:37,100
Photoshop on top of, on top of, on top of, on top of compositing.

1876
01:22:38,300 --> 01:22:41,000
We will always work because just like Photoshop layers.

1877
01:22:41,000 --> 01:22:42,600
Always stack on top of each other properly.

1878
01:22:42,600 --> 01:22:45,700
We will always stack on top of each other properly, if we were to draw

1879
01:22:45,700 --> 01:22:47,200
out of order, right?

1880
01:22:47,200 --> 01:22:50,500
So in other words, if we're trying to draw stuff stacked up,

1881
01:22:52,200 --> 01:22:52,600
Right.

1882
01:22:52,600 --> 01:22:55,300
I'm going to try and do it a really bad stacking diagram here.

1883
01:22:56,000 --> 01:22:59,600
So if this is our background, and this is Sprite one, and this is

1884
01:22:59,600 --> 01:23:03,200
Sprite to if we're always drawing in this order, right from the

1885
01:23:03,200 --> 01:23:03,600
bottom.

1886
01:23:03,600 --> 01:23:06,400
Most thing to the top, then stamping down.

1887
01:23:06,500 --> 01:23:09,200
We know that all we're doing is writing in the colors of this thing

1888
01:23:09,200 --> 01:23:11,900
where they exist and blending them with the background, whatever it

1889
01:23:11,900 --> 01:23:12,300
was.

1890
01:23:12,700 --> 01:23:16,900
So another transparent thing that comes on top doesn't have to care.

1891
01:23:17,100 --> 01:23:20,800
That the destination buffer is actually already the combination of two

1892
01:23:20,800 --> 01:23:21,400
things.

1893
01:23:21,500 --> 01:23:21,800
It

1894
01:23:21,900 --> 01:23:24,100
Here, it'll just stack on top of it properly.

1895
01:23:24,300 --> 01:23:26,300
So it doesn't matter to this guy.

1896
01:23:26,300 --> 01:23:28,900
Whether this guy had a transparent portion or not because that's

1897
01:23:28,900 --> 01:23:32,900
already been resolved by this guy by this operation right.

1898
01:23:33,100 --> 01:23:34,600
By the time this guy writes to it.

1899
01:23:34,600 --> 01:23:37,400
It's as if they're only ever was one buffer.

1900
01:23:37,600 --> 01:23:40,900
Because all the things that came before, it have already been slammed

1901
01:23:40,900 --> 01:23:46,200
in their right if we were going out of order, if we were going to try

1902
01:23:46,200 --> 01:23:49,900
and render the top thing like the this bottom thing, then this top

1903
01:23:49,900 --> 01:23:51,400
thing, then the middle thing.

1904
01:23:52,400 --> 01:23:56,000
And this has to insert between them, then that's the point where you

1905
01:23:56,000 --> 01:23:59,600
start worrying about what the what was actually written to the buffer

1906
01:23:59,600 --> 01:23:59,800
before?

1907
01:24:00,500 --> 01:24:01,000
Right?

1908
01:24:01,000 --> 01:24:02,300
And that's all huge mess.

1909
01:24:02,600 --> 01:24:06,800
So basically what we want to do as much as possible, since we are 2D

1910
01:24:06,800 --> 01:24:10,800
game, we have the luxury of probably being able to do always, to

1911
01:24:10,800 --> 01:24:14,400
always know the order in which were drawing things, and that will let

1912
01:24:14,400 --> 01:24:17,600
us do a bunch of things that are actually extremely difficult.

1913
01:24:17,700 --> 01:24:21,500
In fact, sometimes impossible in 3D renderers, which is basically

1914
01:24:21,500 --> 01:24:23,500
order independent transparency.

1915
01:24:23,500 --> 01:24:27,100
Is what they have to do and they have to do all kinds of work to make

1916
01:24:27,100 --> 01:24:28,200
that stuff happen properly.

1917
01:24:28,200 --> 01:24:29,500
It's really a nightmare for them.

1918
01:24:31,500 --> 01:24:34,800
It's WHY games really hate stuff like looking through several sets of

1919
01:24:34,800 --> 01:24:38,200
windows at some Smoky particles, right?

1920
01:24:38,300 --> 01:24:38,700
Having it.

1921
01:24:38,700 --> 01:24:43,400
Lots of translucence is actually really hard in renderers for a number

1922
01:24:43,400 --> 01:24:43,900
of reasons.

1923
01:24:43,900 --> 01:24:47,000
So they try to avoid those sorts of things or do them with sort of

1924
01:24:47,400 --> 01:24:52,000
what they'll usually do is they'll they'll actually break apart.

1925
01:24:52,000 --> 01:24:57,600
The pieces of the scene that are transparent partially and they'll

1926
01:24:57,600 --> 01:25:00,100
sort they actually will sort those they'll draw everything.

1927
01:25:00,200 --> 01:25:02,600
It's not transparent first and then we'll actually sort the

1928
01:25:02,600 --> 01:25:05,000
transparent pieces and draw those in passes.

1929
01:25:05,200 --> 01:25:07,300
Just like we're going to do for our rendering.

1930
01:25:07,300 --> 01:25:10,100
But we have the luxury of being able to sort all of our stuff.

1931
01:25:10,100 --> 01:25:13,300
So everything will just work for free in that way, but they don't have

1932
01:25:13,300 --> 01:25:15,600
the luxury of that because they have a much higher primitive count.

1933
01:25:15,600 --> 01:25:18,300
They have a much higher primitive per pixel count than we do.

1934
01:25:18,700 --> 01:25:21,200
And so they don't they can't get away with that.

1935
01:25:21,200 --> 01:25:21,700
Right?

1936
01:25:22,700 --> 01:25:23,100
So yeah.

1937
01:25:29,000 --> 01:25:33,700
Will the final Blend favor, the source over the destination or is

1938
01:25:33,700 --> 01:25:35,000
linear good enough.

1939
01:25:36,600 --> 01:25:37,800
I'm not sure what that means.

1940
01:25:37,800 --> 01:25:39,400
We're really not favoring anybody.

1941
01:25:39,400 --> 01:25:44,400
We're just using the alpha channel to tell us how much of the

1942
01:25:44,400 --> 01:25:46,700
foreground should come in at that point.

1943
01:25:46,700 --> 01:25:47,300
Right?

1944
01:25:48,000 --> 01:25:49,800
How much of the source should be used?

1945
01:25:50,700 --> 01:25:51,300
So I'm not sure.

1946
01:25:51,300 --> 01:25:52,500
Can you restate that question?

1947
01:25:59,600 --> 01:26:00,100
Let's see.

1948
01:26:00,100 --> 01:26:01,900
How would you deal with other picture formats?

1949
01:26:01,900 --> 01:26:04,700
Such as PNG, jpg, GIF, Etc.

1950
01:26:05,500 --> 01:26:08,800
Well, we just write a loader for whatever the other format was or if

1951
01:26:08,800 --> 01:26:11,100
you're lazy and don't want to write another loader.

1952
01:26:11,100 --> 01:26:14,400
You could just run a conversion tool and then load them that way,

1953
01:26:15,100 --> 01:26:15,700
right?

1954
01:26:16,100 --> 01:26:18,500
You could just run some freely available conversion tool back from

1955
01:26:18,500 --> 01:26:22,200
virtual like imagemagick to batch convert your stuff from whatever

1956
01:26:22,200 --> 01:26:24,000
your Source format is into bmps.

1957
01:26:24,000 --> 01:26:27,400
You could either load them yourself or do that or like I said, I'm

1958
01:26:27,400 --> 01:26:27,800
handmade here.

1959
01:26:27,800 --> 01:26:28,100
Are we right?

1960
01:26:28,300 --> 01:26:30,100
Think of a scratch but you don't have to write everything from

1961
01:26:30,100 --> 01:26:34,200
scratch, you know, there's no reason that you can't use an image

1962
01:26:34,200 --> 01:26:36,400
loading Library if you'd like to and there are several that are

1963
01:26:36,400 --> 01:26:37,000
available.

1964
01:26:37,500 --> 01:26:39,000
This thing called free image.

1965
01:26:39,200 --> 01:26:43,900
Loads images, you know, your mileage may vary, but there's libraries,

1966
01:26:43,900 --> 01:26:44,400
you can use.

1967
01:26:44,800 --> 01:26:46,000
So, it's entirely up to you.

1968
01:26:47,600 --> 01:26:47,900
Yeah.

1969
01:26:53,800 --> 01:26:55,700
Why is the mass so complicated to use?

1970
01:26:55,800 --> 01:26:58,500
I assume the BMP format does that because it is somehow easier than

1971
01:26:58,500 --> 01:26:59,200
doing something else?

1972
01:26:59,200 --> 01:26:59,800
Why isn't the master?

1973
01:27:00,000 --> 01:27:02,500
Specified something that can just be ended with the value or

1974
01:27:02,500 --> 01:27:03,000
something.

1975
01:27:03,200 --> 01:27:05,800
So I don't know why they chose that.

1976
01:27:06,000 --> 01:27:08,200
It seems like a really bad idea to me.

1977
01:27:08,200 --> 01:27:11,400
What I would have done is I would have specified the order just hard

1978
01:27:11,400 --> 01:27:12,200
coded the order.

1979
01:27:14,300 --> 01:27:17,600
And if I really wanted to different orders like 14 little Indian 14

1980
01:27:17,600 --> 01:27:20,000
beginning and I would have had a flag, but you're right.

1981
01:27:20,000 --> 01:27:24,000
The masks and BMP are complicated to use for no real reason.

1982
01:27:24,000 --> 01:27:25,000
Like why do we have two bits?

1983
01:27:25,000 --> 01:27:29,600
Can them because they're just it was not a very smart format or store.

1984
01:27:29,600 --> 01:27:29,900
The

1985
01:27:30,000 --> 01:27:33,200
Often there to right, like store the shift and I'm like, what spend an

1986
01:27:33,200 --> 01:27:40,700
extra 16 bits at the front of your at the front of your file format,

1987
01:27:40,700 --> 01:27:41,000
right?

1988
01:27:41,000 --> 01:27:43,500
To to tell what the shifts were.

1989
01:27:52,700 --> 01:27:54,000
Something else that came up earlier stream.

1990
01:27:54,000 --> 01:27:56,800
Did you mean to call the Arts under power llvm and clang?

1991
01:27:56,900 --> 01:27:58,500
I always call llvm.

1992
01:28:00,400 --> 01:28:03,900
Because really, it's, it's not clang, that really is the thing that

1993
01:28:03,900 --> 01:28:05,400
determines what the intrinsics are.

1994
01:28:05,400 --> 01:28:10,400
It's llvm for the most part because llvm either has those intrinsics

1995
01:28:10,400 --> 01:28:13,600
in the bytecode or doesn't and if llvm doesn't have the, in transition

1996
01:28:13,600 --> 01:28:16,400
the bytecode then it's like playing is just, I mean, client just a

1997
01:28:16,400 --> 01:28:19,000
thing that like spits out llvm byte code, right?

1998
01:28:19,000 --> 01:28:23,500
Like and so if llvm byte code, has the intrinsic that it has it and if

1999
01:28:23,500 --> 01:28:24,200
not, it doesn't.

2000
01:28:24,700 --> 01:28:28,000
So I typically always think of it as llvm, but you could call clang if

2001
01:28:28,000 --> 01:28:29,300
you wanted to, it's up to you.

2002
01:28:38,200 --> 01:28:39,600
In the pits can function.

2003
01:28:39,600 --> 01:28:41,900
What about returning the index and have it set to negative one.

2004
01:28:41,900 --> 01:28:42,800
If not found.

2005
01:28:42,900 --> 01:28:44,600
I see search functions doing that a lot.

2006
01:28:44,700 --> 01:28:46,100
Yes, you could do that.

2007
01:28:46,400 --> 01:28:48,700
I find that to just be a little more error-prone.

2008
01:28:49,200 --> 01:28:50,300
So I would rather have there.

2009
01:28:50,300 --> 01:28:53,300
Be a clear rule that you can switch on, because the compiler is

2010
01:28:53,300 --> 01:28:56,900
probably going to reorganize that stuff anyway, and so it just seems

2011
01:28:56,900 --> 01:28:57,900
like an easier thing to do.

2012
01:29:05,000 --> 01:29:09,300
Can you go over the linear Alpha blend diagram again?

2013
01:29:10,100 --> 01:29:10,600
Sure.

2014
01:29:11,500 --> 01:29:12,500
I certainly can.

2015
01:29:15,600 --> 01:29:21,700
So a linear blend is actually something that you can think about

2016
01:29:21,700 --> 01:29:26,000
working between any two things, even if you don't really even know

2017
01:29:26,400 --> 01:29:30,000
what they were as long as they obey a few simple properties, right?

2018
01:29:30,600 --> 01:29:33,900
You could almost think of it as just any two points in any space,

2019
01:29:34,400 --> 01:29:34,800
right?

2020
01:29:34,900 --> 01:29:38,500
As long as that space obeys, some linearity things, which let's not.

2021
01:29:38,800 --> 01:29:41,600
Let's not get too crazy for the moment.

2022
01:29:41,600 --> 01:29:44,100
But basically, if I have a point that I'm going to

2023
01:29:44,400 --> 01:29:46,500
And a point that I'm starting from right.

2024
01:29:46,500 --> 01:29:48,300
And I want to linear blend between these.

2025
01:29:48,500 --> 01:29:52,600
All I need to do to be able to do a linear blend is have a way of

2026
01:29:52,600 --> 01:29:58,300
producing the sort of the the difference between the right.

2027
01:29:58,400 --> 01:29:59,800
I need a way of being able to say

2028
01:30:00,000 --> 01:30:04,200
- be, I need to be able to produce that and what that is like a minus

2029
01:30:04,200 --> 01:30:04,900
B, right.

2030
01:30:04,900 --> 01:30:06,700
Sorry, B, minus a because we're going to be.

2031
01:30:07,000 --> 01:30:10,600
So, B, minus a is basically telling me this motion.

2032
01:30:10,600 --> 01:30:14,400
It's telling me how to go from A, to B, right.

2033
01:30:15,100 --> 01:30:16,700
So, on a simple number line, right?

2034
01:30:16,700 --> 01:30:19,000
If, if I'm talking about just five.

2035
01:30:19,400 --> 01:30:20,800
The number five is B.

2036
01:30:21,000 --> 01:30:23,200
And the number two is a I subtract them.

2037
01:30:23,200 --> 01:30:23,500
Right?

2038
01:30:23,500 --> 01:30:26,300
And I get three, it's the amount of steps.

2039
01:30:26,300 --> 01:30:29,800
It would take the distance, it would take to get from one to the

2040
01:30:29,800 --> 01:30:29,900
other.

2041
01:30:30,000 --> 01:30:30,800
Other right?

2042
01:30:30,800 --> 01:30:32,900
But this works in all Dimensions, not just one.

2043
01:30:33,000 --> 01:30:35,200
So I'm just going to say, like, okay, it's something, it doesn't

2044
01:30:35,200 --> 01:30:36,900
matter, two dimensions, three dimensions, for Dimensions.

2045
01:30:36,900 --> 01:30:37,500
I don't care.

2046
01:30:38,500 --> 01:30:41,200
As long as we're talking about is, you know, basically euclidean stuff

2047
01:30:41,200 --> 01:30:41,600
here.

2048
01:30:42,600 --> 01:30:45,600
As long as I can produce this, I can do a linear blend, and the way I

2049
01:30:45,600 --> 01:30:47,600
do that linear blend is you can think about it.

2050
01:30:47,600 --> 01:30:48,300
Exactly.

2051
01:30:48,300 --> 01:30:52,200
Like you think about starting some place and walking somewhere else,

2052
01:30:52,200 --> 01:30:52,800
right?

2053
01:30:52,900 --> 01:30:53,900
If I started a

2054
01:30:55,000 --> 01:30:57,500
And I add in this difference.

2055
01:30:57,600 --> 01:31:01,300
This movement right here, that B minus a right?

2056
01:31:01,400 --> 01:31:02,900
And I add in b - A.

2057
01:31:04,200 --> 01:31:06,900
I will get to be that's just how it works.

2058
01:31:06,900 --> 01:31:10,500
Like you can think of it very simply if I take the distance between

2059
01:31:10,500 --> 01:31:14,400
these two things and I walk it, I'm going to end up at the other one

2060
01:31:14,400 --> 01:31:15,700
right now.

2061
01:31:15,700 --> 01:31:16,300
Technically.

2062
01:31:16,300 --> 01:31:17,300
It's not quite a distance.

2063
01:31:17,300 --> 01:31:19,100
It's actually a directional distance.

2064
01:31:19,100 --> 01:31:19,700
Right?

2065
01:31:19,800 --> 01:31:23,100
I know what direction I'm walking to and that's why it's important

2066
01:31:23,100 --> 01:31:25,400
that we're talking about signed numbers here, right?

2067
01:31:25,400 --> 01:31:28,800
Be, you know, if I say, like, I said before, I let's say be, was was

2068
01:31:28,800 --> 01:31:31,800
actually three and a was, the five are sorry this to was what I said

2069
01:31:31,800 --> 01:31:32,000
before.

2070
01:31:32,000 --> 01:31:33,800
Let's say B was to, in a was the five.

2071
01:31:34,100 --> 01:31:36,700
It's important that I don't end up with three here.

2072
01:31:36,700 --> 01:31:37,900
When I do this operation.

2073
01:31:38,000 --> 01:31:41,100
I need to end up with negative 3 because it's a direction.

2074
01:31:41,100 --> 01:31:43,400
I need to know which way I'm going, right?

2075
01:31:44,600 --> 01:31:47,100
But basically, as long as you can produce that you could end up with

2076
01:31:47,100 --> 01:31:49,900
this, which is basically just I mean, it's a simple.

2077
01:31:49,900 --> 01:31:55,700
As as this it's b equals a plus B, minus a right, this this equation

2078
01:31:55,700 --> 01:31:56,200
right here.

2079
01:31:56,500 --> 01:31:59,200
If you can produce that equation for the things that you're talking

2080
01:31:59,200 --> 01:32:03,800
about linear blending is a simple as introducing this right.

2081
01:32:04,000 --> 01:32:07,700
You can produce that new Point by saying instead of walking the whole

2082
01:32:07,700 --> 01:32:09,700
distance between A and B.

2083
01:32:09,800 --> 01:32:12,700
I'm going to walk some portion of the distance between A and B.

2084
01:32:12,700 --> 01:32:15,300
Some fractional value that can be whatever it is.

2085
01:32:15,300 --> 01:32:16,700
It could be 50%.

2086
01:32:16,800 --> 01:32:19,100
It could be 25 percent, whatever it is.

2087
01:32:19,100 --> 01:32:24,000
And I will get however far along their I need to go and that is a

2088
01:32:24,000 --> 01:32:25,000
linear blend.

2089
01:32:25,000 --> 01:32:27,300
Like I said, you can use algebra to rearrange it.

2090
01:32:27,300 --> 01:32:29,700
If you want to you can multiply this out.

2091
01:32:29,800 --> 01:32:33,100
If I have a plus T B minus a

2092
01:32:34,000 --> 01:32:35,600
Equal, some new value.

2093
01:32:35,700 --> 01:32:38,900
I know that if I rearrange that I can use the distributive property,

2094
01:32:38,900 --> 01:32:42,400
T, B, minus t, a like that.

2095
01:32:42,500 --> 01:32:43,900
And I can go ahead and regroup.

2096
01:32:43,900 --> 01:32:45,700
The terms, these two a terms.

2097
01:32:45,800 --> 01:32:52,700
I have a I have a 1 here in front of my a coefficient, right?

2098
01:32:52,700 --> 01:32:54,100
And I have a minus t here.

2099
01:32:54,200 --> 01:32:55,100
So that's just 1.

2100
01:32:55,100 --> 01:32:55,500
Minus.

2101
01:32:55,500 --> 01:32:58,500
T times a plus TB.

2102
01:32:58,600 --> 01:32:59,100
I just regroup.

2103
01:32:59,100 --> 01:32:59,800
The terms like group.

2104
01:33:00,000 --> 01:33:03,400
German this term into one term and then the TB still there.

2105
01:33:03,400 --> 01:33:06,500
And that's the other form of the linear, blend that you often.

2106
01:33:06,500 --> 01:33:06,800
See.

2107
01:33:06,800 --> 01:33:09,200
So you've got those two different formats.

2108
01:33:09,700 --> 01:33:11,100
They're right.

2109
01:33:11,500 --> 01:33:13,100
And so that's linear blending in a nutshell.

2110
01:33:13,100 --> 01:33:14,100
It's very, very simple.

2111
01:33:14,100 --> 01:33:15,700
Extremely powerful.

2112
01:33:16,100 --> 01:33:19,700
This one equation is so powerful.

2113
01:33:20,000 --> 01:33:22,800
Actually that you will see it.

2114
01:33:22,800 --> 01:33:27,200
Under Li almost everything we do in this game.

2115
01:33:27,900 --> 01:33:33,600
There will be almost no part of the code that does not at some point

2116
01:33:33,800 --> 01:33:36,600
compute, some variation of this thing.

2117
01:33:39,100 --> 01:33:42,300
So, trust me on this one, you will have if you don't quite understand

2118
01:33:42,300 --> 01:33:45,600
it, now, you will have a lot of opportunity to practice because this

2119
01:33:45,600 --> 01:33:49,300
is literally, this is probably if I had to say and I don't know, I

2120
01:33:49,300 --> 01:33:51,400
haven't thought this through, I'm just saying this off the cuff, but

2121
01:33:51,400 --> 01:33:56,600
if I had to say this is probably the most important equation in all of

2122
01:33:56,600 --> 01:34:01,600
gaming, like games need this equation, probably more than any other

2123
01:34:01,600 --> 01:34:02,200
equation.

2124
01:34:02,600 --> 01:34:05,600
And there's tons of equations that are important to gaming, but if you

2125
01:34:05,600 --> 01:34:07,200
could only have one

2126
01:34:07,800 --> 01:34:12,100
This is probably the one you would need because the games can't do

2127
01:34:12,100 --> 01:34:16,000
anything without a linear blind because everything else is built on

2128
01:34:16,000 --> 01:34:16,500
top of it.

2129
01:34:16,500 --> 01:34:18,400
Nonlinear blending is built on top of it.

2130
01:34:19,000 --> 01:34:21,300
All of rasterization is built on top of it.

2131
01:34:21,800 --> 01:34:24,000
All of Animation is built on top of it.

2132
01:34:24,200 --> 01:34:26,300
It's just incredibly incredibly important.

2133
01:34:37,100 --> 01:34:38,600
I'm an experience with Windows.

2134
01:34:38,600 --> 01:34:39,800
I know we do a large virtual.

2135
01:34:39,800 --> 01:34:40,500
A look at the beginning.

2136
01:34:40,500 --> 01:34:43,200
Is this basically the same as M map in Linux?

2137
01:34:43,200 --> 01:34:44,900
Yes, for the most part.

2138
01:34:44,900 --> 01:34:48,700
I'm not super experience with em map, so I'm not prepared to say

2139
01:34:48,700 --> 01:34:52,400
exactly but what I would say is I would encourage you if you have

2140
01:34:52,400 --> 01:34:55,900
questions like that the best place to go at the moment since I haven't

2141
01:34:55,900 --> 01:34:58,900
really looked at the Linux stuff and haven't done an implementation of

2142
01:34:58,900 --> 01:34:59,500
it yet.

2143
01:34:59,700 --> 01:35:02,500
If you go to handmade here at or click on news and forums,

2144
01:35:03,300 --> 01:35:04,900
There's a coding resources page.

2145
01:35:04,900 --> 01:35:08,600
If you go to that coding resources page go to the Linux listing and

2146
01:35:08,600 --> 01:35:14,500
click on handmade penguin, sdl Port because I believe and I'm sorry if

2147
01:35:14,500 --> 01:35:18,800
I had turns out to be wrong, but I believe he actually explains how to

2148
01:35:18,800 --> 01:35:26,200
do all of the stuff that I did in in in Linux so you can kind of go

2149
01:35:26,200 --> 01:35:27,300
through here and look.

2150
01:35:27,400 --> 01:35:30,800
So there's that M map and it appears to be in the same place as our

2151
01:35:30,800 --> 01:35:31,600
virtual Alex.

2152
01:35:31,600 --> 01:35:32,900
Oh, so take a look.

2153
01:35:33,000 --> 01:35:39,100
Look at that page handmade penguin because that that would probably be

2154
01:35:39,100 --> 01:35:41,400
the best place to go for an exploration since I know he's actually

2155
01:35:41,400 --> 01:35:42,300
worked it all out already.

2156
01:35:49,600 --> 01:35:51,300
Let's take a look here.

2157
01:35:52,400 --> 01:35:53,500
What bit value?

2158
01:35:53,500 --> 01:35:55,200
If it is 50% brightness?

2159
01:35:55,200 --> 01:35:57,900
Well, it'd be you have zero, and you have 255.

2160
01:35:58,100 --> 01:35:59,800
So you can

2161
01:36:00,000 --> 01:36:01,900
Think of it as 127.

2162
01:36:01,900 --> 01:36:02,500
Well, okay.

2163
01:36:02,500 --> 01:36:04,400
So here's how to think about it in our actual thing.

2164
01:36:04,400 --> 01:36:04,700
Right?

2165
01:36:04,700 --> 01:36:06,300
Here's how to answer that question basically.

2166
01:36:06,700 --> 01:36:09,200
So, you know that the alpha value that we're pulling out is going to

2167
01:36:09,200 --> 01:36:13,400
be whatever the alpha value in the bitmap is divided by 225.

2168
01:36:13,600 --> 01:36:14,300
Right?

2169
01:36:14,600 --> 01:36:19,900
So if you think about it, what we would want to do is say all right,

2170
01:36:20,500 --> 01:36:24,100
if we have 128 divided by 225.

2171
01:36:24,100 --> 01:36:24,700
What is that?

2172
01:36:24,800 --> 01:36:26,500
Well, it's .50 something?

2173
01:36:26,500 --> 01:36:27,300
Something something, right?

2174
01:36:27,300 --> 01:36:28,800
Not quite exactly 5127.

2175
01:36:30,000 --> 01:36:33,000
/ 255 is point for a 98, something.

2176
01:36:33,000 --> 01:36:33,700
Something something, something.

2177
01:36:33,700 --> 01:36:33,900
Something.

2178
01:36:33,900 --> 01:36:34,500
Right?

2179
01:36:34,900 --> 01:36:39,300
So, the actual answer is that there is no actual value for exactly

2180
01:36:39,300 --> 01:36:42,200
5127 is a little bit low.

2181
01:36:42,200 --> 01:36:44,100
128 is a little bit High.

2182
01:36:45,700 --> 01:36:46,400
What do you do?

2183
01:36:46,500 --> 01:36:52,100
You could have just this math to make it exact, you know, if you

2184
01:36:52,100 --> 01:36:53,800
wanted to write.

2185
01:36:54,500 --> 01:36:58,700
But but the problem is you want to make sure that one is exact.

2186
01:36:58,700 --> 01:37:01,400
So you need to make sure that to view 5 by 2 to 5 is 0.

2187
01:37:01,400 --> 01:37:05,400
Like, if we were to do, 128 divided by 256, you get an exact.

2188
01:37:05,400 --> 01:37:07,800
So if we divide it by 256, or you can get exact, but you could never

2189
01:37:07,800 --> 01:37:11,200
get one because then your highest value is 256 285.

2190
01:37:11,300 --> 01:37:13,900
You would end up never quite being able to get one either and that has

2191
01:37:13,900 --> 01:37:14,900
consequences as well.

2192
01:37:15,600 --> 01:37:17,000
Worst consequences in fact.

2193
01:37:22,600 --> 01:37:24,600
Let's see here.

2194
01:37:25,300 --> 01:37:26,500
Let's see.

2195
01:37:30,500 --> 01:37:31,700
What else we got?

2196
01:37:34,600 --> 01:37:37,700
Does the display blind operation actually do anything with the alpha

2197
01:37:37,700 --> 01:37:38,300
Channel?

2198
01:37:39,900 --> 01:37:42,300
No, it just write zeros to the alpha channel.

2199
01:37:42,300 --> 01:37:45,200
It's only using the alpha Channel as a control to basically control

2200
01:37:45,200 --> 01:37:46,100
how the blind operate.

2201
01:37:46,100 --> 01:37:49,100
So it's reading it but it never writes it if that's what you're

2202
01:37:49,100 --> 01:37:49,600
asking.

2203
01:37:51,100 --> 01:37:52,900
Which I think is what you're asking about.

2204
01:37:52,900 --> 01:37:53,200
Now.

2205
01:37:59,200 --> 01:38:04,800
The solid curve on Wikipedia's gamma correction is the linear space.

2206
01:38:04,800 --> 01:38:07,400
Intensity should be what you were looking for.

2207
01:38:07,400 --> 01:38:07,700
Okay.

2208
01:38:07,700 --> 01:38:12,700
So you're saying, go to Wikipedia and look up gamma correction.

2209
01:38:12,700 --> 01:38:14,500
Did you say or something else?

2210
01:38:14,500 --> 01:38:16,600
What I'm sorry, I just spaced out there.

2211
01:38:17,500 --> 01:38:19,200
Let's see, but we're out of time.

2212
01:38:19,600 --> 01:38:20,500
Let's just grab it.

2213
01:38:20,500 --> 01:38:22,200
The inside, curve on gamma correction.

2214
01:38:22,200 --> 01:38:23,900
Okay, so gamma correction Wikipedia,

2215
01:38:25,000 --> 01:38:28,000
So you're saying there's a solid curve on here?

2216
01:38:28,100 --> 01:38:31,000
Okay, so you're saying this curve right here?

2217
01:38:32,400 --> 01:38:33,300
Hopefully it's what you're saying.

2218
01:38:33,700 --> 01:38:34,900
So I didn't do the reading it.

2219
01:38:34,900 --> 01:38:36,600
But assuming that, that's a solid curve.

2220
01:38:37,000 --> 01:38:39,800
Basically, is this what are the two axes though?

2221
01:38:40,000 --> 01:38:41,900
The dotted line is linear transfer function.

2222
01:38:41,900 --> 01:38:43,000
Satellite shows here, T.

2223
01:38:43,200 --> 01:38:43,700
There's difference.

2224
01:38:43,700 --> 01:38:45,000
What are the axes?

2225
01:38:46,300 --> 01:38:48,600
By the way, which axis is, which?

2226
01:38:50,900 --> 01:38:51,800
Hi there, guys.

2227
01:38:51,800 --> 01:38:53,200
Can you tell me what the axes are?

2228
01:38:53,800 --> 01:38:56,700
Because which one is, which one is the brightness?

2229
01:38:56,700 --> 01:38:59,700
And which one is the input value?

2230
01:39:02,400 --> 01:39:05,000
Correction, the dotted line indicates a linear transfer function.

2231
01:39:05,600 --> 01:39:09,000
The solid line shows how a typical CRT behaves.

2232
01:39:09,200 --> 01:39:11,600
The dashed line represents the inverse function.

2233
01:39:12,400 --> 01:39:14,100
So, yeah, so I guess I don't actually know.

2234
01:39:14,100 --> 01:39:17,100
It doesn't say I assume this is brightness and this is the input

2235
01:39:17,100 --> 01:39:20,100
value, but I guess I don't actually know assuming it was and you can

2236
01:39:20,100 --> 01:39:21,500
see that's what the curve looks like.

2237
01:39:21,900 --> 01:39:26,200
So it actually has a lot more kind of resolution there at the bottom.

2238
01:39:27,100 --> 01:39:27,900
Then at the top.

2239
01:39:27,900 --> 01:39:30,000
There's not a lot of resolution in the brightness, but I don't know.

2240
01:39:30,000 --> 01:39:31,300
I don't know if that's reading the just

2241
01:39:31,500 --> 01:39:32,600
Because it doesn't actually have things.

2242
01:39:32,600 --> 01:39:35,000
So we'll have to look at that a little more detail later.

2243
01:39:36,600 --> 01:39:37,400
All right.

2244
01:39:39,400 --> 01:39:40,900
Let's see.

2245
01:39:41,600 --> 01:39:43,500
I think that's about it for stuff.

2246
01:39:43,500 --> 01:39:44,600
We can cover today.

2247
01:39:45,300 --> 01:39:47,200
We have gotten, this is pretty good.

2248
01:39:47,300 --> 01:39:49,900
We have gotten to the point where we can now do layered graphics on

2249
01:39:49,900 --> 01:39:50,400
the screen.

2250
01:39:51,200 --> 01:39:56,000
So I'm thinking it's a, you know, it's kind of a question to some

2251
01:39:56,000 --> 01:39:58,200
degree about where we go next.

2252
01:39:58,300 --> 01:40:03,000
Like you know, what, what is the next thing that we should be doing if

2253
01:40:03,000 --> 01:40:06,300
we're actually talking about moving forwards on the game.

2254
01:40:06,300 --> 01:40:11,600
And so, what I was thinking of doing next is working on our player

2255
01:40:11,600 --> 01:40:13,800
motion code because I think that's important because it's going to

2256
01:40:13,800 --> 01:40:16,300
talk, it's going to basically speak to how we need to do our Collision

2257
01:40:16,300 --> 01:40:19,600
detection, which speaks to how we need to interpret the tile map.

2258
01:40:19,600 --> 01:40:23,800
So I was thinking of doing is basically saying, all right, maybe we do

2259
01:40:23,800 --> 01:40:27,600
a little cleanup tomorrow and Friday of stuff that still needs to kind

2260
01:40:27,600 --> 01:40:30,500
of get cleaned up a little bit, just looking looking at things like

2261
01:40:30,500 --> 01:40:30,600
that.

2262
01:40:30,600 --> 01:40:34,400
See what we want to do in terms of that sort of stuff, but maybe what

2263
01:40:34,400 --> 01:40:36,300
I was thinking is so we'll start.

2264
01:40:36,300 --> 01:40:41,200
Next week on like actually talking about linear algebra and vectors

2265
01:40:41,200 --> 01:40:44,100
and will actually start writing the movement code for the guy for real

2266
01:40:44,100 --> 01:40:45,100
so that it feels good.

2267
01:40:45,100 --> 01:40:47,800
And we'll talk talking about Collision detection for real so that we

2268
01:40:47,800 --> 01:40:50,600
can kind of see what we need from our engine for that, because that's

2269
01:40:50,600 --> 01:40:52,100
a really big important thing to spec.

2270
01:40:52,800 --> 01:40:54,000
That's one direction to go.

2271
01:40:55,000 --> 01:40:57,900
The other direction to go is, we need to talk about how to actually

2272
01:40:57,900 --> 01:41:00,000
build these background bitmaps, right?

2273
01:41:00,000 --> 01:41:03,200
Which is to say, take the tile map and kind of go ahead and build the

2274
01:41:03,200 --> 01:41:04,200
background bitmaps.

2275
01:41:04,700 --> 01:41:06,200
I don't know which one we should do next.

2276
01:41:06,400 --> 01:41:08,300
Kind of a tough thing to say.

2277
01:41:08,900 --> 01:41:10,000
So it's a toss-up.

2278
01:41:10,100 --> 01:41:11,300
Maybe we'll flip a coin.

2279
01:41:11,800 --> 01:41:12,800
Maybe we'll take a poll.

2280
01:41:12,800 --> 01:41:15,100
I'm not sure both of them have to get done before.

2281
01:41:15,100 --> 01:41:17,800
We know what our what our engine spec really truly is.

2282
01:41:18,300 --> 01:41:19,900
So it's something to think about.

2283
01:41:20,200 --> 01:41:23,500
But for now, we can at least be happy that we now have a nice

2284
01:41:23,500 --> 01:41:26,100
splitting engine, we can use so you can put stuff up on the screen

2285
01:41:26,100 --> 01:41:29,100
which is kind of nice and from now on we'll always have Graphics to

2286
01:41:29,100 --> 01:41:31,600
back us up, which is much nicer than looking at a bunch of rectangles,

2287
01:41:31,800 --> 01:41:32,400
my opinion.

2288
01:41:33,000 --> 01:41:36,200
So, thank you everyone for joining me for another.

2289
01:41:36,300 --> 01:41:38,300
ER, episode of handmade hero.

2290
01:41:38,300 --> 01:41:41,000
It has been a pleasure coding with you as always.

2291
01:41:41,000 --> 01:41:44,000
And it was a pleasure talking about the linear blend, which like I

2292
01:41:44,000 --> 01:41:47,300
said, is one of the most important things you will see it, come up

2293
01:41:47,300 --> 01:41:51,900
again and again, and again, on the stream, so it was nice to finally

2294
01:41:51,900 --> 01:41:52,400
get to that.

2295
01:41:52,400 --> 01:41:55,100
I think that's a pretty big milestone starting to actually use the

2296
01:41:55,100 --> 01:41:56,100
linear blend and I get them.

2297
01:41:56,200 --> 01:41:59,000
Like I said, we'll talk about it a lot more in the future, and we'll

2298
01:41:59,000 --> 01:41:59,900
see a lot.

2299
01:42:00,000 --> 01:42:00,500
More about it.

2300
01:42:00,500 --> 01:42:03,400
And what kind of learn more and more about how interesting it is and

2301
01:42:03,400 --> 01:42:08,200
how intricate you can basically how amazing it is that you can do so

2302
01:42:08,200 --> 01:42:12,000
much for such a simple function and basically how it underlies

2303
01:42:12,000 --> 01:42:12,900
everything if you will.

2304
01:42:13,200 --> 01:42:16,000
So anyway, thank you very much for joining me.

2305
01:42:16,400 --> 01:42:19,600
If you would like to follow along at home, with the source code.

2306
01:42:19,600 --> 01:42:23,300
You can pre-order the game and it comes with full source code already

2307
01:42:23,600 --> 01:42:24,200
every night.

2308
01:42:24,200 --> 01:42:26,100
I update the source code and you'll basically a link in your email

2309
01:42:26,100 --> 01:42:27,300
that you can use to download the source code.

2310
01:42:27,300 --> 01:42:29,500
It also has the artists that we've been using on the stream.

2311
01:42:29,500 --> 01:42:29,800
There's a

2312
01:42:30,100 --> 01:42:30,700
Separate zip file.

2313
01:42:30,700 --> 01:42:34,200
You can download if you want to use like, you know, the little guy and

2314
01:42:34,500 --> 01:42:37,500
the backgrounds and that sort of stuff for doing your development.

2315
01:42:37,700 --> 01:42:41,400
And so, you know anything you're basically completely follow along at

2316
01:42:41,400 --> 01:42:44,200
home and all the assets that you need to follow along completely at

2317
01:42:44,200 --> 01:42:47,100
home, come with the with the with that pre-order.

2318
01:42:47,300 --> 01:42:47,900
So check that out.

2319
01:42:47,900 --> 01:42:48,700
If you're interested.

2320
01:42:48,800 --> 01:42:49,600
We also have a patreon.

2321
01:42:49,600 --> 01:42:51,700
If you want to support the video series, you can always subscribe

2322
01:42:51,700 --> 01:42:52,100
there.

2323
01:42:52,200 --> 01:42:54,600
We also have that news and Forum site, which I showed just a few

2324
01:42:54,600 --> 01:42:56,900
minutes ago, which has a ton of resources for people who are trying to

2325
01:42:56,900 --> 01:42:59,600
learn on the stream to a lot of great stuff, the schedule for the

2326
01:42:59,600 --> 01:42:59,800
week.

2327
01:43:00,000 --> 01:43:00,800
Is posted here.

2328
01:43:01,500 --> 01:43:04,200
There's also the episode guy, which allows you to catch up with old

2329
01:43:04,200 --> 01:43:04,700
episodes.

2330
01:43:04,700 --> 01:43:08,300
Got nice annotated video series on their coding resources.

2331
01:43:08,300 --> 01:43:08,900
Has the ports.

2332
01:43:08,900 --> 01:43:11,800
Like I showed before and other resources, you might need like good

2333
01:43:11,800 --> 01:43:15,100
documentation stuff, and there's a form you can post in when you need

2334
01:43:15,100 --> 01:43:15,700
to ask questions.

2335
01:43:15,700 --> 01:43:16,600
So please check that out.

2336
01:43:16,600 --> 01:43:17,600
If you try to learn from the series.

2337
01:43:17,600 --> 01:43:19,600
It's a great resource, and there's a lot of very helpful people on

2338
01:43:19,600 --> 01:43:23,200
there who are very nice on the forums who will also try to answer your

2339
01:43:23,200 --> 01:43:26,100
questions if I'm not around to do so, so thank you very much for

2340
01:43:26,100 --> 01:43:26,600
joining me.

2341
01:43:27,200 --> 01:43:28,300
I will see you tomorrow.

2342
01:43:28,300 --> 01:43:29,800
Same time, same place, 8:00 p.m.

2343
01:43:29,900 --> 01:43:31,900
I am Pacific Standard time on Twitch.

2344
01:43:32,200 --> 01:43:33,900
So I hope to see you all there.

2345
01:43:33,900 --> 01:43:38,500
And if I don't have an excellent Thursday, see you later, buddy.

