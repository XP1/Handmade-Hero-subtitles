1
00:00:02,400 --> 00:00:05,100
Hello, everyone, and welcome to handmade hero.

2
00:00:05,100 --> 00:00:10,600
The the show, I forgot about the fact that that would just be looking

3
00:00:11,000 --> 00:00:12,200
looking straight back at us.

4
00:00:12,200 --> 00:00:13,300
They're from the free stream.

5
00:00:13,600 --> 00:00:16,400
Um, welcome to handmade hero.

6
00:00:16,700 --> 00:00:20,900
The show where we code a complete game live on stream on Twitch.

7
00:00:21,000 --> 00:00:22,100
No engines, no libraries.

8
00:00:22,100 --> 00:00:22,800
It's just us.

9
00:00:23,300 --> 00:00:27,400
And we do all of the code for the game, not just a little bitty tippy

10
00:00:27,400 --> 00:00:30,400
top at the, you know, but the whole thing

11
00:00:31,100 --> 00:00:34,900
And right now we're in the middle of doing something that I want to do

12
00:00:34,900 --> 00:00:35,400
for a while.

13
00:00:35,400 --> 00:00:38,100
But you know, everything in due course, you can't rush things.

14
00:00:38,400 --> 00:00:41,300
And so it's kind of come to the point where now we can finally do it

15
00:00:41,400 --> 00:00:45,300
and that is to get ourselves off of bitmaps and wav files and switch

16
00:00:45,300 --> 00:00:51,300
over to a proper asset file system that we can sort of use.

17
00:00:51,300 --> 00:00:56,700
And when I say file system, I don't mean a file system like FAT32.

18
00:00:57,300 --> 00:01:00,900
I mean an asset file which you know

19
00:01:01,100 --> 00:01:04,700
no a system for using the asset file where we can load all of our

20
00:01:04,700 --> 00:01:07,500
resources for the game out of it, all of our assets, for the game, out

21
00:01:07,500 --> 00:01:10,500
of it, and it defines all of the things that we need to know about

22
00:01:10,500 --> 00:01:13,500
those resources in order to run the game.

23
00:01:15,000 --> 00:01:19,500
And so we started on that yesterday and now today, I think we will

24
00:01:19,500 --> 00:01:23,600
probably will get a chance to go ahead and actually write out an asset

25
00:01:23,600 --> 00:01:26,900
file and I don't know whether we'll get a chance to read it in as

26
00:01:26,900 --> 00:01:30,100
well, but I think between today and tomorrow, we should be in a good

27
00:01:30,100 --> 00:01:31,000
shape, kind of have everything

28
00:01:31,300 --> 00:01:33,000
you know, roughly spect and working

29
00:01:35,400 --> 00:01:36,600
So let's Dive Right In There.

30
00:01:37,800 --> 00:01:39,500
Today is day, 1, 48.

31
00:01:40,000 --> 00:01:42,600
So if you would like to follow along at home, you should unpack day

32
00:01:42,600 --> 00:01:47,900
147 source code into the directory where you're going to be working.

33
00:01:47,900 --> 00:01:52,500
If you would like to follow along with us, and remember, be a

34
00:01:52,500 --> 00:01:55,300
programmer, not a faux grammar.

35
00:01:55,700 --> 00:01:57,200
All right, we'll just put that away.

36
00:01:57,800 --> 00:02:01,300
Okay, so where were we?

37
00:02:01,400 --> 00:02:04,000
Let's get back to where we were.

38
00:02:04,000 --> 00:02:04,800
Here we go.

39
00:02:06,300 --> 00:02:07,200
What I did.

40
00:02:07,200 --> 00:02:10,300
And you remember yesterday, I did a little bit of, I simplify the

41
00:02:10,300 --> 00:02:11,200
asset system a bit.

42
00:02:11,200 --> 00:02:14,300
We had added some unnecessary complexity in there and I removed it

43
00:02:14,500 --> 00:02:15,300
when I saw it.

44
00:02:15,300 --> 00:02:19,100
So that was a good thing, but it took up some time yesterday, but this

45
00:02:19,100 --> 00:02:21,100
is where we're at at the moment.

46
00:02:21,800 --> 00:02:25,100
You know, all these things are loading in off of disk as individual

47
00:02:25,100 --> 00:02:26,300
files in that sort of stuff.

48
00:02:26,400 --> 00:02:28,300
Oh, that's no good.

49
00:02:28,300 --> 00:02:30,500
Looks like the simplification I did yesterday, has some kind of a

50
00:02:30,500 --> 00:02:32,400
problem with it but I'm sorry, I thought we tested this.

51
00:02:33,100 --> 00:02:34,500
I thought we tested this

52
00:02:35,400 --> 00:02:36,700
But it looks like.

53
00:02:41,000 --> 00:02:44,500
Looks like this is going this this doesn't look like that's related

54
00:02:44,500 --> 00:02:44,800
actually.

55
00:02:44,800 --> 00:02:50,000
This looks like we have a bug in our estimation of when the sound is

56
00:02:50,000 --> 00:02:51,400
going to stop, right?

57
00:02:51,400 --> 00:02:54,700
Because look at this playing sound.

58
00:02:54,700 --> 00:02:59,300
Samples played is one entire buffer over, right?

59
00:03:00,000 --> 00:03:01,300
800.

60
00:03:01,500 --> 00:03:03,100
And it's only 48.

61
00:03:04,300 --> 00:03:05,000
That's interesting.

62
00:03:05,100 --> 00:03:06,200
We should probably

63
00:03:08,900 --> 00:03:10,200
I'm sorry, it's actually under.

64
00:03:10,600 --> 00:03:11,600
That's what I meant to say, sorry.

65
00:03:12,400 --> 00:03:15,100
So it didn't quite end where it was supposed to end.

66
00:03:15,600 --> 00:03:18,600
So, input samples were supposed to have ended, but it didn't actually

67
00:03:18,600 --> 00:03:21,900
go there and this was something that we had taken a look at earlier.

68
00:03:21,900 --> 00:03:24,900
So we should probably debug this before we take a look at the asset

69
00:03:24,900 --> 00:03:27,900
thing because if it's a transient kind of error here, we don't really

70
00:03:27,900 --> 00:03:28,400
know.

71
00:03:28,400 --> 00:03:32,000
You know, we want to make sure that we understand what it actually is

72
00:03:32,600 --> 00:03:35,200
rather than just assuming that it will happen again later at a

73
00:03:35,200 --> 00:03:37,200
convenient time because we don't know that it will

74
00:03:38,000 --> 00:03:39,700
So, let's take a look at what happened here.

75
00:03:40,000 --> 00:03:41,400
What did we actually?

76
00:03:41,400 --> 00:03:42,600
See occur.

77
00:03:43,700 --> 00:03:48,500
We looked at chunks to mix and chunks remaining in sound and they were

78
00:03:48,500 --> 00:03:50,600
actually going to be disparate now.

79
00:03:50,600 --> 00:03:55,000
I assume that they aren't anymore because chunks to mix actually got

80
00:03:55,000 --> 00:03:55,900
modified

81
00:03:57,000 --> 00:03:58,200
Let's see if that's actually the case.

82
00:03:58,200 --> 00:04:01,400
Yeah, chunks remaining in sound.

83
00:04:01,900 --> 00:04:05,500
So it's interesting about that is even at this point these things

84
00:04:05,500 --> 00:04:07,200
should have been equal, right?

85
00:04:07,600 --> 00:04:09,900
These things should have been equal and they're not.

86
00:04:09,900 --> 00:04:10,800
So where did we?

87
00:04:10,800 --> 00:04:11,300
Where does that?

88
00:04:11,300 --> 00:04:12,400
Actually get updated?

89
00:04:12,400 --> 00:04:17,200
We got a sort of page this back into our brain here, but chunks to mix

90
00:04:17,700 --> 00:04:20,000
doesn't get touched anywhere, right?

91
00:04:20,100 --> 00:04:23,100
Like if you look at what happens, here we come in here.

92
00:04:23,100 --> 00:04:26,700
We say chunks to mix if it's greater than chunks remaining and

93
00:04:26,800 --> 00:04:29,800
And right, and that's the only way input samples ended could have been

94
00:04:29,800 --> 00:04:31,200
set to true.

95
00:04:31,200 --> 00:04:33,200
So we're assuming that this actually happened, right?

96
00:04:33,200 --> 00:04:37,300
Because otherwise, input samples ended would not be set to true and we

97
00:04:37,300 --> 00:04:41,100
would not be able to end up in this part of the code, right?

98
00:04:42,200 --> 00:04:46,100
So, in order for that to have been set to true, it means that chunks

99
00:04:46,100 --> 00:04:48,900
to mix and chunks remaining in sound would have had to have been equal

100
00:04:48,900 --> 00:04:49,300
here.

101
00:04:50,800 --> 00:04:54,300
So the only way that I could think of what would have happened, oh,

102
00:04:54,800 --> 00:04:56,000
it's the volume.

103
00:04:57,600 --> 00:05:00,400
So we must have had a volume change.

104
00:05:01,400 --> 00:05:03,400
Ah yeah.

105
00:05:03,400 --> 00:05:04,400
You can see the bug.

106
00:05:04,400 --> 00:05:06,600
Right guys, do you see the bug?

107
00:05:08,500 --> 00:05:10,400
This is kind of an interesting kind of bug.

108
00:05:11,000 --> 00:05:12,600
And I feel like this sort of.

109
00:05:13,100 --> 00:05:18,600
Oops, this begs the description here where I should talk about this,

110
00:05:18,600 --> 00:05:23,200
kind of a bug and point out a good way that we should probably try to

111
00:05:23,200 --> 00:05:23,900
avoid it.

112
00:05:24,500 --> 00:05:27,500
I would say if we can, I don't know if we can or not.

113
00:05:31,100 --> 00:05:31,600
So,

114
00:05:33,600 --> 00:05:35,300
here is what I would say about this.

115
00:05:37,000 --> 00:05:38,300
Why did this bug happen?

116
00:05:38,300 --> 00:05:40,800
And first, I'll say with the bug, is for people who don't already know

117
00:05:40,800 --> 00:05:41,500
what the bug is.

118
00:05:41,600 --> 00:05:42,000
You know what?

119
00:05:42,000 --> 00:05:44,100
Let me also move it over to the side where my head isn't.

120
00:05:44,100 --> 00:05:44,800
So we have more room.

121
00:05:45,600 --> 00:05:46,200
All right.

122
00:05:46,600 --> 00:05:50,000
So if you take a look at what happened here, when we do our audio

123
00:05:50,000 --> 00:05:53,500
mixing, we wanted to know how far we should mix in the sound.

124
00:05:54,000 --> 00:05:58,400
And we do that by looking at how much we could mix how much we want to

125
00:05:58,400 --> 00:05:59,800
mix, see if

126
00:06:00,000 --> 00:06:00,900
Would run our samples.

127
00:06:00,900 --> 00:06:04,900
If we would have run out of samples, we set weeks or to truncate the

128
00:06:04,900 --> 00:06:05,700
amount we're going to mix.

129
00:06:06,100 --> 00:06:09,700
We also look at the volume change and if the volume changes we're

130
00:06:09,700 --> 00:06:12,000
going to we're going to end.

131
00:06:12,000 --> 00:06:15,700
We also have that as a stopping criteria, right?

132
00:06:16,300 --> 00:06:19,400
And then what we do is we just let this thing loop as many times as it

133
00:06:19,400 --> 00:06:23,600
needs to finish the various sort of sections different sections that

134
00:06:23,600 --> 00:06:26,000
it needs to go through and all that sort of stuff, right?

135
00:06:26,500 --> 00:06:29,500
Well, the bug is when we figure out if the, if the

136
00:06:30,000 --> 00:06:31,500
I was going to end, right?

137
00:06:31,500 --> 00:06:33,600
We say that input samples, ended equals true.

138
00:06:33,600 --> 00:06:36,300
And we set the chunks to mix to be how much it would take to get to

139
00:06:36,300 --> 00:06:36,800
that point.

140
00:06:36,800 --> 00:06:42,200
But we then go ahead and potentially stop earlier than that, when the

141
00:06:42,200 --> 00:06:47,000
volume change would have ended, which means that at that point input

142
00:06:47,000 --> 00:06:50,500
samples ended will not necessarily be true, right?

143
00:06:52,700 --> 00:06:58,100
And so the problem that we have here is we're recording this match and

144
00:06:58,100 --> 00:07:01,200
assuming that it's going to stay true even though we have other things

145
00:07:01,200 --> 00:07:04,000
that might cause it to not actually be true.

146
00:07:04,500 --> 00:07:07,100
We had this bug for both volumes any.

147
00:07:07,100 --> 00:07:11,100
At the same time, we even put a to do here for it's the same bug.

148
00:07:11,100 --> 00:07:15,200
Now we have three different ways in which this could happen, three

149
00:07:15,200 --> 00:07:18,700
different things where we don't know exactly when they're going to

150
00:07:19,100 --> 00:07:19,800
end.

151
00:07:19,800 --> 00:07:21,900
And so that's kind of, you know,

152
00:07:22,600 --> 00:07:25,300
That's kind of just underscoring.

153
00:07:25,300 --> 00:07:25,500
Why?

154
00:07:25,500 --> 00:07:29,500
This sort of structural way that that we've chosen to trigger this

155
00:07:29,500 --> 00:07:33,000
stuff here is maybe not a good idea because we've already seen

156
00:07:33,200 --> 00:07:38,000
basically three well two different types of bugs or two different bugs

157
00:07:38,000 --> 00:07:40,400
that can arise from the exact same thing, right?

158
00:07:44,300 --> 00:07:45,200
so, the question is,

159
00:07:47,100 --> 00:07:53,300
Could we come up with a could be, come up with a better way, right?

160
00:07:53,800 --> 00:07:58,200
And I think that the better way here would probably be to say, well,

161
00:07:58,200 --> 00:08:02,000
you know, if we have chunks remaining and sound

162
00:08:04,600 --> 00:08:07,700
And we know that we're setting chunks to mix to be equal to that,

163
00:08:07,900 --> 00:08:08,400
right?

164
00:08:09,200 --> 00:08:12,000
Since we're not modifying either of those two things.

165
00:08:12,300 --> 00:08:17,600
We're not modifying the chunks remaining in sound when we do chunks to

166
00:08:17,600 --> 00:08:17,900
mix.

167
00:08:17,900 --> 00:08:22,900
And that kind of pulls through here, right, what we could do is

168
00:08:22,900 --> 00:08:28,100
instead of testing input samples ended, we could just say, if these

169
00:08:28,100 --> 00:08:33,400
two things are equal at the end, then we know that we actually

170
00:08:34,000 --> 00:08:36,000
That it actually ended right?

171
00:08:36,000 --> 00:08:39,100
We could just make that be the definition of input samples ended,

172
00:08:39,100 --> 00:08:39,400
right?

173
00:08:39,400 --> 00:08:43,299
If those two things were equal and I think we kind of did that before,

174
00:08:43,900 --> 00:08:47,700
and we had reasons why we didn't necessarily want to do it because of

175
00:08:47,700 --> 00:08:51,400
the way that we were actually processing the loop.

176
00:08:51,700 --> 00:08:55,000
We're using the sample position I guess actually was what it was and

177
00:08:55,000 --> 00:08:58,400
that was a little bit touchy because that thing was getting updated in

178
00:08:58,400 --> 00:08:59,800
various ways since we know that

179
00:09:00,000 --> 00:09:00,200
Chunks.

180
00:09:00,200 --> 00:09:03,800
The mix is a fixed amount and we will advance by exactly that amount

181
00:09:03,800 --> 00:09:04,500
through the loop.

182
00:09:05,000 --> 00:09:08,000
It feels like this might be the smarter way to do it, right?

183
00:09:08,900 --> 00:09:12,700
And so then volume ended would be pretty much exactly the same thing.

184
00:09:12,900 --> 00:09:17,100
And so what we would do is volume ends at, or something like that,

185
00:09:17,400 --> 00:09:18,800
would be what we would record.

186
00:09:18,900 --> 00:09:21,800
And then so instead of saying volume ended, you know, set of doing

187
00:09:21,800 --> 00:09:22,700
this right?

188
00:09:22,700 --> 00:09:26,700
We would, we would just do this, we would say, okay, this was the

189
00:09:26,700 --> 00:09:29,000
actual value that we set chunks to mix too.

190
00:09:29,200 --> 00:09:29,900
So if

191
00:09:30,000 --> 00:09:34,400
At the end chunks to mix is still equal to that, then we know that

192
00:09:34,400 --> 00:09:36,800
that particular volume ended right.

193
00:09:37,900 --> 00:09:38,700
Does that make sense?

194
00:09:41,100 --> 00:09:43,800
So really what I'm doing here is I'm saying, let's make the criteria

195
00:09:43,800 --> 00:09:46,300
that we actually care about.

196
00:09:46,500 --> 00:09:50,000
Let's make that be the thing that actually gets used, right?

197
00:09:50,600 --> 00:09:55,200
And I feel like that should be a little bit a little bit better,

198
00:09:55,200 --> 00:09:55,500
right?

199
00:09:55,500 --> 00:09:59,500
I feel like that should be more in line with what we wanted, if that

200
00:09:59,500 --> 00:10:00,100
makes sense.

201
00:10:01,700 --> 00:10:02,400
Let's see.

202
00:10:03,000 --> 00:10:07,000
So let's go ahead and make this operate over that array.

203
00:10:07,600 --> 00:10:08,500
And this one is what.

204
00:10:08,500 --> 00:10:14,000
Whoops, that's not good volume and at and let's see if that's a little

205
00:10:14,000 --> 00:10:14,800
bit clearer.

206
00:10:26,400 --> 00:10:27,900
So I'm a little more comfortable with that.

207
00:10:27,900 --> 00:10:31,200
And and really, what that's doing is that's just saying, well, if

208
00:10:31,300 --> 00:10:33,900
You've got these things that are actually dependent on a particular

209
00:10:33,900 --> 00:10:37,800
variable, instead of introducing these secondary variables, where we

210
00:10:37,800 --> 00:10:42,300
might make a mistake in how they set their state, because that state

211
00:10:42,300 --> 00:10:46,300
is really not representing the actual end condition, can we go ahead

212
00:10:46,300 --> 00:10:47,100
and bake it down?

213
00:10:47,100 --> 00:10:51,800
So that it's actually checking the real condition, which is this

214
00:10:51,800 --> 00:10:52,500
chunks to mix.

215
00:10:52,500 --> 00:10:57,200
That is the thing that we as we go through this code, right chunks to

216
00:10:57,200 --> 00:11:01,000
mix is the thing that we're actually updating to represent how far we

217
00:11:01,300 --> 00:11:01,800
really need to go.

218
00:11:01,800 --> 00:11:06,800
So if that's the Primal piece of data, having the end conditions,

219
00:11:06,800 --> 00:11:10,400
operate on that, Primal piece of data means that, as long as the

220
00:11:10,400 --> 00:11:13,500
algorithm is working, RN check will work.

221
00:11:13,600 --> 00:11:16,700
Whereas the other way, there are these ancillary values which have

222
00:11:16,700 --> 00:11:20,400
nothing to do with how the algorithm actually function that we were

223
00:11:20,400 --> 00:11:21,100
just setting.

224
00:11:21,200 --> 00:11:24,700
Those can easily become out of sync with the algorithm or we can

225
00:11:24,700 --> 00:11:28,000
misunderstand how they might be set or forget one of the things.

226
00:11:28,800 --> 00:11:31,100
And so it really does help if you can

227
00:11:32,600 --> 00:11:35,600
To try and condense code that way so that it's actually working with

228
00:11:35,600 --> 00:11:40,300
the with the specific conditions that are actually important and not

229
00:11:40,600 --> 00:11:44,300
have it be about sort of the separate things that you're sort of

230
00:11:44,300 --> 00:11:44,700
setting.

231
00:11:45,000 --> 00:11:47,000
And, you know, I think that will be.

232
00:11:47,000 --> 00:11:49,500
I think this will be an easier routine for us to the bug now that

233
00:11:49,500 --> 00:11:54,200
we've gotten rid of that additional state, so that's good.

234
00:11:55,200 --> 00:11:56,800
I'm glad we caught that, that's pretty cool.

235
00:11:57,900 --> 00:11:59,800
And you'll also notice another point,

236
00:12:00,000 --> 00:12:03,300
Just while we're talking about debugging things, you'll notice that

237
00:12:03,300 --> 00:12:06,200
probably we never would have known about that bug.

238
00:12:06,200 --> 00:12:08,700
We would just have maybe a little audio error because all that would

239
00:12:08,700 --> 00:12:10,000
have happened is our sound with stops in.

240
00:12:10,000 --> 00:12:13,700
So the only reason we even knew that that happened is because we

241
00:12:13,700 --> 00:12:15,700
placed this a certain here to check.

242
00:12:16,600 --> 00:12:20,500
And so again that's why if you're not used to using asserts you know

243
00:12:20,500 --> 00:12:23,500
again I'm not the kind of person who tells you to stick a lot of stuff

244
00:12:23,500 --> 00:12:23,900
in the code.

245
00:12:23,900 --> 00:12:25,100
That's extraneous, right?

246
00:12:25,900 --> 00:12:29,800
I'm very sparing that way but you'll notice I do often sick ass.

247
00:12:30,000 --> 00:12:33,500
Shirts in there and I actually stick Less asserts in this code.

248
00:12:33,500 --> 00:12:36,000
What I'm on stream because we have a limited amount of time and I

249
00:12:36,800 --> 00:12:39,600
don't always have the ability to kind of relax as much as I would like

250
00:12:39,600 --> 00:12:43,300
to into the programming and think about it, because I'm talking all

251
00:12:43,300 --> 00:12:43,800
sorts of things.

252
00:12:44,100 --> 00:12:46,400
So I even put in less probably than I would.

253
00:12:46,400 --> 00:12:47,400
In my normal code.

254
00:12:47,600 --> 00:12:50,100
Assert is something I really do recommend.

255
00:12:50,500 --> 00:12:54,800
It is not one of those things like const where I find that, it's just

256
00:12:54,800 --> 00:12:55,700
kind of a waste of typing.

257
00:12:55,700 --> 00:12:57,600
It doesn't really catch bugs asserts.

258
00:12:57,800 --> 00:12:59,900
Catch bugs, and they catch the

259
00:13:00,000 --> 00:13:04,200
It bugs you care about catching they catch bugs like this where we

260
00:13:04,200 --> 00:13:08,100
never would have caught that we never would have even known about

261
00:13:08,100 --> 00:13:08,700
that.

262
00:13:08,900 --> 00:13:11,900
It just there would have been a little audio scratch at the end of

263
00:13:11,900 --> 00:13:13,000
sound sometimes or something.

264
00:13:13,000 --> 00:13:14,800
They've gotten truncated in just the right way.

265
00:13:14,800 --> 00:13:16,400
One time he'd like what was that?

266
00:13:16,500 --> 00:13:19,700
And it's like these little hard to find bugs.

267
00:13:19,700 --> 00:13:22,700
That is exactly what assert does for you.

268
00:13:22,700 --> 00:13:25,900
And so I really would like to every time it happens.

269
00:13:25,900 --> 00:13:29,400
I try to point it out where it's like that is a bug that would have

270
00:13:29,400 --> 00:13:29,800
been really

271
00:13:29,900 --> 00:13:33,700
really hard to ever find if you had to put a certain there,

272
00:13:37,200 --> 00:13:42,200
So asserts, they are your friend and like and they're a good tool to

273
00:13:42,200 --> 00:13:45,400
because you can fine-tune them to catch the kind of Errors you make.

274
00:13:45,700 --> 00:13:49,600
As you see yourself, making it, you know, the more you code, the more

275
00:13:49,600 --> 00:13:53,800
you'll know the kinds of bugs you will make and it's not the same for

276
00:13:53,800 --> 00:13:54,300
everybody mean.

277
00:13:54,300 --> 00:13:56,400
There's some kind of bugs that everyone has is just complicated,

278
00:13:56,400 --> 00:14:00,700
whatever, but there's other types of bugs and const, is that way to

279
00:14:00,700 --> 00:14:00,900
write.

280
00:14:00,900 --> 00:14:04,000
Like, I don't necessarily know that other people might not actually

281
00:14:04,100 --> 00:14:05,500
Catch a lot of bugs with cons, I catch.

282
00:14:05,500 --> 00:14:06,900
No bugs with Khan so I don't type it.

283
00:14:06,900 --> 00:14:12,300
Really, but assert is as kind of flexible that way, right?

284
00:14:12,400 --> 00:14:16,000
You can choose to put in the asserts that catch the kinds of bugs that

285
00:14:16,000 --> 00:14:19,600
you find yourself making, right and so as you get a little bit more

286
00:14:19,600 --> 00:14:23,100
familiar, if you're a newer programmer as you get more familiar with a

287
00:14:23,100 --> 00:14:26,000
kind of mistakes you make in whatever the language is that you happen

288
00:14:26,000 --> 00:14:26,900
to be using

289
00:14:28,000 --> 00:14:29,900
And the type of code that you have to be writing.

290
00:14:30,500 --> 00:14:35,800
It's a good idea to get familiar with that and learn to place the

291
00:14:35,800 --> 00:14:40,000
proper asserts to safeguard yourself against the mistakes that you

292
00:14:40,000 --> 00:14:41,300
tend to make you can think of it.

293
00:14:41,300 --> 00:14:45,500
Kind of like, you know, like a rock climber places bolts and like you

294
00:14:45,500 --> 00:14:48,300
know as they go up the ascent to prevent themselves from falling,

295
00:14:48,300 --> 00:14:49,600
that's very much.

296
00:14:49,600 --> 00:14:51,400
The way you kind of want to think about asserts.

297
00:14:51,400 --> 00:14:57,100
It's like know yourself know how you tend to screw up.

298
00:14:57,500 --> 00:14:59,900
and let the asserts be a way that you

299
00:15:00,000 --> 00:15:03,500
Can guard against the mistakes that you're going to make.

300
00:15:03,500 --> 00:15:06,600
Because every programmer I don't care how experienced they are, how

301
00:15:06,600 --> 00:15:10,900
good they are, will make mistakes and a lot of being effective at

302
00:15:10,900 --> 00:15:13,800
programming is knowing what they might be and how to catch them and

303
00:15:13,800 --> 00:15:15,100
recover from them quickly, right?

304
00:15:15,100 --> 00:15:17,400
So again, can't stress that enough.

305
00:15:17,600 --> 00:15:21,200
It's a very good thing to learn how to do and that was an example of a

306
00:15:21,200 --> 00:15:22,900
very helpful.

307
00:15:22,900 --> 00:15:26,000
Assert that caught a bug that you know may have just shift in the game

308
00:15:26,000 --> 00:15:28,300
for all we know like that could have totally gone out, right?

309
00:15:30,000 --> 00:15:32,800
And we always would have had a little glitch in there, so, yeah.

310
00:15:33,100 --> 00:15:33,900
So that's cool.

311
00:15:35,200 --> 00:15:36,000
That's a good thing.

312
00:15:36,600 --> 00:15:41,900
And let's now go back to what we were doing which is we wanted to make

313
00:15:41,900 --> 00:15:45,300
our handmade asset processor, right?

314
00:15:45,300 --> 00:15:50,600
Basically, a little test piece of code, it's called test asset Builder

315
00:15:50,800 --> 00:15:52,500
and we were in the process of getting this working.

316
00:15:52,500 --> 00:15:56,900
So what we wanted to do, if you remember from yesterday is right now

317
00:15:56,900 --> 00:15:59,800
in the game, we basically just fo build a bunch of

318
00:15:59,900 --> 00:16:02,900
That's in the middle of the game, like, we just say, okay, we're at

319
00:16:02,900 --> 00:16:06,500
startup, we're just like, build a fake asset structure like that has a

320
00:16:06,500 --> 00:16:11,100
bunch of Assets in it that we want and just use file names to say

321
00:16:11,100 --> 00:16:14,000
where to go grab those assets off of the actual directory structure on

322
00:16:14,000 --> 00:16:16,300
disk when you need them, right?

323
00:16:16,300 --> 00:16:18,700
And so that's how we were doing things.

324
00:16:18,700 --> 00:16:22,900
Well, we want to transition to is a single big file that we can just

325
00:16:22,900 --> 00:16:26,900
open a single handle to seek around in it as necessary, and grab the

326
00:16:26,900 --> 00:16:27,600
assets out.

327
00:16:27,600 --> 00:16:29,900
And the file itself will contain all

328
00:16:29,900 --> 00:16:32,400
All the information we need to quickly grab things and all of the

329
00:16:32,400 --> 00:16:33,500
metadata we need.

330
00:16:33,500 --> 00:16:36,400
So that all of this stuff that we're currently having to annotate in

331
00:16:36,400 --> 00:16:40,600
here, inside the game, all just goes into the file and can be produced

332
00:16:40,600 --> 00:16:41,100
offline.

333
00:16:42,300 --> 00:16:46,600
So to facilitate this process and again, what I'll do is I'll actually

334
00:16:46,600 --> 00:16:50,400
make that asset file for us taking all of the art that you action did

335
00:16:50,400 --> 00:16:52,100
and putting it in there and that sort of stuff.

336
00:16:52,400 --> 00:16:57,100
I'll actually do that as a separate thing so we'll just have one but

337
00:16:57,100 --> 00:16:59,200
because I want to show the complete process here.

338
00:16:59,200 --> 00:16:59,800
We want to see

339
00:17:00,000 --> 00:17:04,500
Check out that file right, eight example writer and example reader for

340
00:17:04,500 --> 00:17:08,800
it so that we've done all of that on Stream So that anyone who wants

341
00:17:08,800 --> 00:17:12,300
to duplicate that stuff can write.

342
00:17:16,500 --> 00:17:17,000
All right?

343
00:17:17,200 --> 00:17:17,599
So

344
00:17:18,800 --> 00:17:21,900
Let's keep going what we want to do now.

345
00:17:21,900 --> 00:17:24,800
And since this stuff again, we're just kind of putting things out

346
00:17:24,800 --> 00:17:25,200
here.

347
00:17:25,800 --> 00:17:31,000
So what we ended up doing here was, you know, we had cut and pasted

348
00:17:31,000 --> 00:17:32,400
this code a little bit too early.

349
00:17:33,000 --> 00:17:36,000
So what I think I might do is just go back because we, this was before

350
00:17:36,000 --> 00:17:42,100
the simplification that we did in here, where we got rid of sort of

351
00:17:42,100 --> 00:17:43,800
the debug information.

352
00:17:43,800 --> 00:17:46,800
In fact, I guess inside, handmade asked that we now have some stuff

353
00:17:46,800 --> 00:17:48,400
that isn't necessary, right?

354
00:17:48,500 --> 00:17:50,900
We don't need bitmap and sound count anymore.

355
00:17:50,900 --> 00:17:51,700
Do we right?

356
00:17:51,700 --> 00:17:53,900
They're just, they're just totally unnecessary.

357
00:17:53,900 --> 00:17:54,900
It's only asset count.

358
00:17:54,900 --> 00:17:55,800
That matters, I think.

359
00:17:55,800 --> 00:17:56,100
Yeah.

360
00:17:57,500 --> 00:17:59,800
So what we should be able to do now is we should be able to

361
00:18:00,000 --> 00:18:01,800
This code here, right?

362
00:18:02,500 --> 00:18:05,600
That's now been greatly simplified, so it should be much easier for us

363
00:18:05,600 --> 00:18:06,000
to.

364
00:18:06,600 --> 00:18:09,800
We should be able to do that and paste that into the asset bundler

365
00:18:09,800 --> 00:18:12,800
here and have it all work out.

366
00:18:12,800 --> 00:18:16,200
Now, I do need to go re-enable building it because I think we turn

367
00:18:16,200 --> 00:18:17,100
that off yesterday.

368
00:18:17,800 --> 00:18:18,700
So let's go ahead.

369
00:18:18,700 --> 00:18:20,000
There's that asset Builder.

370
00:18:21,400 --> 00:18:22,000
Here we go.

371
00:18:22,900 --> 00:18:26,400
And so all I'm going to do here is I'm going to go ahead and I guess

372
00:18:26,400 --> 00:18:27,300
why even fight it.

373
00:18:27,300 --> 00:18:29,400
Let's just go ahead and make game assets.

374
00:18:29,400 --> 00:18:33,400
Be a thing off we go right, there we go.

375
00:18:35,000 --> 00:18:38,400
And all of this stuff can can just kind of live in there and it should

376
00:18:38,400 --> 00:18:40,900
compile that way you don't have to even do the replacement.

377
00:18:41,600 --> 00:18:47,000
So V2 align percentage, I'm just going to quickly change that to these

378
00:18:47,000 --> 00:18:47,200
two.

379
00:18:47,200 --> 00:18:50,100
So we don't have to pull in the mass stuff unnecessarily since I don't

380
00:18:50,100 --> 00:18:51,100
want to bother doing that.

381
00:18:54,400 --> 00:18:56,100
It is the thing of bitmap ID.

382
00:18:56,500 --> 00:18:59,200
And so we can also pull this guy's in from howling assets.

383
00:18:59,200 --> 00:19:02,100
They sound ID and bitmap ID.

384
00:19:03,600 --> 00:19:04,100
Serve.

385
00:19:08,200 --> 00:19:13,100
Go and then I think we should be good to go here.

386
00:19:13,100 --> 00:19:13,900
So all right.

387
00:19:13,900 --> 00:19:16,700
So we don't need to do push strings anymore because we're not doing

388
00:19:16,700 --> 00:19:20,700
Dynamic code real reuse or anything here so that can just be file name

389
00:19:20,700 --> 00:19:24,300
directly and I guess we also have to fix this.

390
00:19:25,700 --> 00:19:26,300
Asset stuff.

391
00:19:26,300 --> 00:19:30,500
Here, we need to go ahead and put in the union like we had before so

392
00:19:30,500 --> 00:19:38,700
we can store the the sort of bitmap and sound info as well likes like

393
00:19:38,700 --> 00:19:39,100
so.

394
00:19:40,100 --> 00:19:41,300
So there we go.

395
00:19:41,900 --> 00:19:50,800
And yeah let's go ahead and compile that a line percentage is now

396
00:19:50,800 --> 00:19:52,400
going to be one of these guys, right?

397
00:19:52,400 --> 00:19:53,400
So we've got

398
00:19:54,300 --> 00:19:55,600
It's set this way.

399
00:19:59,000 --> 00:20:02,700
And again, we don't care about Arenas or anything here, because we

400
00:20:02,700 --> 00:20:04,400
won't have to deal with any of that.

401
00:20:05,800 --> 00:20:07,900
And next, I need to play dot value.

402
00:20:07,900 --> 00:20:08,600
Must have it.

403
00:20:08,600 --> 00:20:11,400
So isn't the roofs isn't next idea to play?

404
00:20:11,400 --> 00:20:12,600
Isn't that a sound idea?

405
00:20:12,600 --> 00:20:15,400
What, why did that not work?

406
00:20:15,400 --> 00:20:16,600
Next idea to play.

407
00:20:17,600 --> 00:20:18,700
What was the problem there?

408
00:20:19,700 --> 00:20:20,800
Sound.you.

409
00:20:20,900 --> 00:20:23,300
Next idea to play dot value.

410
00:20:23,500 --> 00:20:25,400
Let's have a class Union struct.

411
00:20:25,700 --> 00:20:28,600
It does though oh no we remove that.

412
00:20:28,700 --> 00:20:30,400
It looks like so.

413
00:20:30,400 --> 00:20:31,700
All right sound ID.

414
00:20:34,900 --> 00:20:42,100
All right, so asset tag ID that is probably something that should go

415
00:20:42,100 --> 00:20:43,800
in the common area.

416
00:20:43,800 --> 00:20:45,800
And remember, we made a place for this.

417
00:20:46,900 --> 00:20:49,000
It was type ID here, right?

418
00:20:49,300 --> 00:20:50,700
So it can kind of go in there.

419
00:20:51,100 --> 00:20:53,900
We're, we're, we're defining, those sort of permanent things.

420
00:20:55,200 --> 00:20:57,900
And then, I think we may be good to go.

421
00:20:58,300 --> 00:20:59,800
So, what I'm going to do here is, leave this

422
00:21:00,100 --> 00:21:01,300
Pretty much intact.

423
00:21:02,000 --> 00:21:06,500
I'm going to make a little you can see this, this is a little pattern,

424
00:21:06,500 --> 00:21:08,000
I will occasionally use.

425
00:21:08,200 --> 00:21:12,800
So if we go ahead and take the game assets structure, like so if I was

426
00:21:12,800 --> 00:21:16,500
to do this right then all of these guys which are expecting a pointer,

427
00:21:16,500 --> 00:21:21,100
I have to go change them right to pointers but since I was keeping the

428
00:21:21,100 --> 00:21:24,300
code basically the same, what I can do is just put an underscore under

429
00:21:24,300 --> 00:21:28,500
it, and take the a dress like that and now write it all.

430
00:21:28,500 --> 00:21:29,900
Doesn't it, you know, none of it needs.

431
00:21:30,000 --> 00:21:31,900
To to do that, right?

432
00:21:32,900 --> 00:21:36,600
So that's just a little that's just a little like sleight of hand that

433
00:21:36,600 --> 00:21:37,700
I will occasionally do.

434
00:21:38,900 --> 00:21:41,900
So all right a bitmap assets.

435
00:21:41,900 --> 00:21:45,600
These guys need to default to zero I think or is it point five?

436
00:21:45,700 --> 00:21:49,000
I think it's point, five is what they do default to but I'll

437
00:21:49,000 --> 00:21:51,600
double-check what we were actually defaulting to

438
00:21:53,100 --> 00:21:55,300
Yeah, it's point five point five, see it right there.

439
00:21:57,100 --> 00:22:02,400
So I think that's really most of what we would need to do.

440
00:22:02,400 --> 00:22:04,600
I suppose, I could have been clever and done that a slightly different

441
00:22:04,600 --> 00:22:09,500
way, but maybe maybe we don't want to be all that clever all the time.

442
00:22:10,500 --> 00:22:17,900
So, let me go ahead and change hero line here to here, 0, line, 0,

443
00:22:18,200 --> 00:22:20,600
comic, hero, a line one.

444
00:22:21,700 --> 00:22:22,000
And

445
00:22:22,200 --> 00:22:24,700
And we will be done with that.

446
00:22:24,700 --> 00:22:27,200
I went, can't see what happens behind my head.

447
00:22:28,000 --> 00:22:28,900
All right, there we go.

448
00:22:29,600 --> 00:22:31,700
And what is this saying?

449
00:22:31,700 --> 00:22:34,000
Cannot force an idea to asset star.

450
00:22:34,000 --> 00:22:34,900
That is true.

451
00:22:34,900 --> 00:22:37,900
In fact, this code now just needs to we already.

452
00:22:37,900 --> 00:22:41,700
This is just because this code was copied before we sort of finished

453
00:22:42,900 --> 00:22:44,000
doing the port yesterday.

454
00:22:44,400 --> 00:22:46,700
So if I just go like this, I think will be good, right?

455
00:22:46,700 --> 00:22:50,000
If I just go ahead and use the new code, we should be good.

456
00:22:51,500 --> 00:22:54,000
And then we'll need the is valid zall though.

457
00:22:54,200 --> 00:22:55,100
I don't really know.

458
00:22:56,600 --> 00:22:58,300
In fact, I don't really know if we care about that.

459
00:22:58,300 --> 00:22:59,200
I could just do this.

460
00:23:06,100 --> 00:23:09,500
Last music is a star 0 as well.

461
00:23:10,500 --> 00:23:13,500
Alright I think that's it.

462
00:23:14,700 --> 00:23:21,000
Just about F open this function or variable may be unsafe consider

463
00:23:21,000 --> 00:23:22,900
using F open S instead.

464
00:23:23,700 --> 00:23:30,500
Yeah thank you for the helpful learning but no this is not a high

465
00:23:30,500 --> 00:23:32,100
security operation here.

466
00:23:32,100 --> 00:23:36,700
My friend, this is a offline asset processor.

467
00:23:37,600 --> 00:23:39,900
So in test asset Builder.

468
00:23:40,300 --> 00:23:43,300
I would like to go ahead and disable that warning.

469
00:23:43,300 --> 00:23:47,200
I guess they're saying, I just pound to find this to disable that

470
00:23:47,200 --> 00:23:47,600
warning.

471
00:23:47,600 --> 00:23:49,000
So there we go.

472
00:23:50,400 --> 00:23:51,300
And off we go.

473
00:23:51,300 --> 00:23:55,100
Okay, so we're now building our test asset Builder so that's good.

474
00:24:01,500 --> 00:24:04,900
but we're not actually read anything out and we also need to do one

475
00:24:04,900 --> 00:24:05,800
thing, which is

476
00:24:07,300 --> 00:24:09,900
You know, I might want an h-file for this, so I think I'm going to

477
00:24:09,900 --> 00:24:12,400
have an h-file where I can quickly view these things.

478
00:24:13,100 --> 00:24:13,800
So there we go.

479
00:24:14,300 --> 00:24:15,700
Now, I've got an h-file in here.

480
00:24:18,800 --> 00:24:20,100
Make that look like that.

481
00:24:20,100 --> 00:24:26,200
All right, lb include test asset Builder .h.

482
00:24:27,300 --> 00:24:27,900
Lovely.

483
00:24:30,900 --> 00:24:35,600
So really what we need to do now is just initialize game assets,

484
00:24:35,800 --> 00:24:36,400
right?

485
00:24:38,200 --> 00:24:44,700
So right in here we want to initialize anything in here that we want.

486
00:24:44,700 --> 00:24:50,100
So bitmap, count and sound count and infos.

487
00:24:50,100 --> 00:24:53,300
These are all like we don't care about any of that stuff anymore that

488
00:24:53,300 --> 00:24:54,000
stuff's gone.

489
00:24:56,200 --> 00:25:00,500
And so we really only have to deal with these guys.

490
00:25:00,500 --> 00:25:00,500
So

491
00:25:00,700 --> 00:25:05,200
Got tag counts and we've got these guys.

492
00:25:05,200 --> 00:25:06,200
That's that's it, though.

493
00:25:06,300 --> 00:25:07,600
That's all we're going to have to deal with.

494
00:25:07,600 --> 00:25:08,900
So we've got assets.

495
00:25:11,900 --> 00:25:19,000
And that is all right now.

496
00:25:19,000 --> 00:25:22,500
So the asset counts going to default to 1 because obviously we have a

497
00:25:22,600 --> 00:25:27,700
sort of a null asset at the beginning, I guess, how did we?

498
00:25:27,700 --> 00:25:29,800
And I guess used s account.

499
00:25:29,800 --> 00:25:32,100
How did we actually initialize these in the original one?

500
00:25:33,900 --> 00:25:34,600
I wonder.

501
00:25:37,500 --> 00:25:38,300
Let's see.

502
00:25:38,300 --> 00:25:40,200
Debug used asset count.

503
00:25:40,800 --> 00:25:41,000
Yeah.

504
00:25:41,000 --> 00:25:44,100
So we could even do this a slightly different way as well, but I'm

505
00:25:44,100 --> 00:25:45,000
going to set this to this.

506
00:25:45,000 --> 00:25:47,900
We're going to, we're going to play around with this a little bit in a

507
00:25:47,900 --> 00:25:48,400
second here.

508
00:25:48,400 --> 00:25:50,100
But let's go ahead and set that up.

509
00:25:50,200 --> 00:25:54,900
Okay, so what I would like to do now, right?

510
00:25:55,200 --> 00:25:59,200
Is, I would like to go ahead and start thinking about how we're

511
00:25:59,200 --> 00:26:02,400
actually going to write these out, right?

512
00:26:03,300 --> 00:26:06,000
And so, what we have to think about is we now have like a table.

513
00:26:06,000 --> 00:26:07,100
Basically, we have this game,

514
00:26:07,300 --> 00:26:11,900
Such thing in our goal is we have all of the assets to find in here.

515
00:26:11,900 --> 00:26:14,900
What we want to do is process, you know, go through all those assets

516
00:26:14,900 --> 00:26:18,300
and write out a giant file, which has the directory information we

517
00:26:18,300 --> 00:26:21,000
need, which is this metadata stuff here, right?

518
00:26:21,000 --> 00:26:24,900
Like all this, all the assets, tough, the info, that the part of it

519
00:26:24,900 --> 00:26:26,500
that's info related, right?

520
00:26:27,800 --> 00:26:35,500
We want to write that out and then once we have that we want to write

521
00:26:35,500 --> 00:26:38,200
out actually all that the actual physical data, right?

522
00:26:38,200 --> 00:26:41,300
We want to write out the actual bitmap data in the actual sound data

523
00:26:41,300 --> 00:26:44,000
all into one file so that it can be accessed right?

524
00:26:44,100 --> 00:26:46,400
That's what we're trying to do is just kind of merge all those things

525
00:26:46,400 --> 00:26:50,700
together and with the directory that could be loaded, right?

526
00:26:50,800 --> 00:26:51,400
So

527
00:26:56,000 --> 00:26:59,700
let's start, let's just start the

528
00:27:00,000 --> 00:27:04,900
Thing that I want to do is make a handmade asset file dot h, which is

529
00:27:04,900 --> 00:27:07,700
going to, I guess, you know what, I'm not going to call it that.

530
00:27:08,000 --> 00:27:12,200
I'm gonna call it handmade file format.

531
00:27:12,300 --> 00:27:17,900
.H think that file formats dot h and this is just going to be a thing

532
00:27:17,900 --> 00:27:20,600
that defines the file formats that we actually use, right?

533
00:27:21,400 --> 00:27:25,600
And again, I want to go ahead and make a pragma pack like we normally

534
00:27:25,600 --> 00:27:26,100
do.

535
00:27:28,200 --> 00:27:33,200
I assume we did a pragma pack or somewhere we had 10, you know, where

536
00:27:33,200 --> 00:27:34,000
we probably had one.

537
00:27:34,000 --> 00:27:35,800
We probably had one in the bitmap code.

538
00:27:36,000 --> 00:27:36,500
Right?

539
00:27:36,700 --> 00:27:38,900
See did we?

540
00:27:38,900 --> 00:27:39,800
Where is that?

541
00:27:40,500 --> 00:27:42,400
Let's take a look crap.

542
00:27:43,200 --> 00:27:43,900
Oh, you know what?

543
00:27:43,900 --> 00:27:46,100
That's because we moved to the renderer, right?

544
00:27:47,300 --> 00:27:49,400
For the for the asset file I should say.

545
00:27:50,900 --> 00:27:51,400
There it is.

546
00:27:52,200 --> 00:27:56,900
So if you remember, see when you define a structure, introduces

547
00:27:56,900 --> 00:28:01,100
padding to make sure things are aligned and the padding can be

548
00:28:01,100 --> 00:28:05,000
different depending on, you know, the circumstances, obviously.

549
00:28:05,000 --> 00:28:08,300
And we don't want it to introduce any of that padding, right?

550
00:28:08,300 --> 00:28:10,900
So what we want to do is to find things exactly how they're going to

551
00:28:10,900 --> 00:28:12,300
be in the in the file.

552
00:28:12,900 --> 00:28:18,000
And so we want to enclose our definition of our file format

553
00:28:18,000 --> 00:28:18,700
structures.

554
00:28:19,000 --> 00:28:20,500
We want to enclose them inside.

555
00:28:21,300 --> 00:28:23,200
A pragma pack push and pop.

556
00:28:23,200 --> 00:28:27,100
So that we know that the exact format that we specify in these trucks

557
00:28:27,100 --> 00:28:30,000
is going to be what's actually written to disk right?

558
00:28:31,900 --> 00:28:36,300
So the first thing that we should probably do is we said that we're

559
00:28:36,300 --> 00:28:37,300
going to have a handmade.

560
00:28:37,300 --> 00:28:41,800
Remember we sort of said in here when we when we did that that test

561
00:28:41,800 --> 00:28:44,200
asset Builder we said that it was going to be an h.h.

562
00:28:44,200 --> 00:28:44,900
a file.

563
00:28:45,500 --> 00:28:50,500
So we probably want to have an h.h., a header something that starts

564
00:28:50,500 --> 00:28:55,500
the file so that if you were to open one of these files, you could

565
00:28:55,500 --> 00:28:59,600
test to see by looking at the header whether or not it was actually a

566
00:28:59,600 --> 00:29:01,200
handmade hero file or not.

567
00:29:01,400 --> 00:29:04,600
This is a very common thing in file formats, and you've seen it

568
00:29:04,700 --> 00:29:08,900
already in the file formats that we've talked about so far, right?

569
00:29:08,900 --> 00:29:14,300
If you look back at the stuff that we've loaded in handmade in handy

570
00:29:14,300 --> 00:29:15,700
here already, right?

571
00:29:16,300 --> 00:29:20,300
You can see that, we have always done these sort of things like oh,

572
00:29:20,500 --> 00:29:24,500
when we load the, the header in of this wave file, you should always

573
00:29:24,500 --> 00:29:29,900
see this like riff chunk header and this wave ID these sort of values.

574
00:29:29,900 --> 00:29:31,000
We predefined

575
00:29:31,300 --> 00:29:37,100
Right there, just nothing more than just specific values that are

576
00:29:37,100 --> 00:29:39,700
stuck in the file to let you know that it is.

577
00:29:39,700 --> 00:29:43,100
What it says it is that you know, it is in fact a WAV file, right?

578
00:29:43,200 --> 00:29:46,100
And so we know that like, for the wav files, it always starts off with

579
00:29:46,100 --> 00:29:51,800
the letters are iff, and then a size, and then the letters, wave412,

580
00:29:51,800 --> 00:29:52,600
it's a WAV file.

581
00:29:52,600 --> 00:29:52,800
Right?

582
00:29:52,800 --> 00:29:56,600
So we know that we're expecting to see that and, you know, do you

583
00:29:56,600 --> 00:29:57,400
absolutely need that?

584
00:29:57,400 --> 00:29:59,800
No, but it's just this nice kind of thing.

585
00:30:00,000 --> 00:30:04,100
For error, checking where your code can always look to see when it

586
00:30:04,100 --> 00:30:07,500
opens up a file, does it see these things that it's expecting to see

587
00:30:07,500 --> 00:30:11,600
if not you can raise an error and it just helps him to bugging, you

588
00:30:11,600 --> 00:30:14,100
know, to sort of say, oh, you know, I think there's a problem here

589
00:30:14,100 --> 00:30:16,500
because we're opening this file and it's garbage or whatever we could,

590
00:30:16,500 --> 00:30:19,100
you know, at least you can tell whether it was actually the right kind

591
00:30:19,100 --> 00:30:19,900
of file or whatever.

592
00:30:20,600 --> 00:30:24,300
And so, these are typically called Magic values is what they're

593
00:30:24,300 --> 00:30:24,800
called.

594
00:30:27,200 --> 00:30:30,500
They're called Magic values because they have no actual reason for

595
00:30:30,500 --> 00:30:31,200
being there.

596
00:30:31,900 --> 00:30:34,700
It's not like the value was picked to mean something.

597
00:30:34,900 --> 00:30:38,400
Instead, it's just a purely magic random value that you pick that

598
00:30:38,400 --> 00:30:42,400
lets, you know, that it is, you know, such and such a file.

599
00:30:43,300 --> 00:30:48,000
So what we might want to do is put in a magic value their right and

600
00:30:48,000 --> 00:30:52,800
the magic value we could just pound to find to be like some you know,

601
00:30:52,800 --> 00:30:56,700
we're going to have a specific pattern that we always expect to see at

602
00:30:56,700 --> 00:30:56,900
the beginning.

603
00:30:57,000 --> 00:30:59,300
Bang of a handmade hero file.

604
00:30:59,300 --> 00:31:05,600
Now unfortunately, H is not something that we can really represent

605
00:31:05,600 --> 00:31:10,500
because you know as you know hexadecimal stops at F, right?

606
00:31:11,200 --> 00:31:15,600
So handmade hero is not really possible and I'd love to make the thing

607
00:31:15,600 --> 00:31:21,600
be like, you know, something, something like that, you know, but

608
00:31:21,600 --> 00:31:24,000
there's really no way that we can do that.

609
00:31:24,800 --> 00:31:26,800
So I don't know what the magic number.

610
00:31:27,300 --> 00:31:29,000
Really should be.

611
00:31:30,700 --> 00:31:31,900
It's a good question.

612
00:31:36,800 --> 00:31:40,600
I guess what we could do is take up a letter from the the rift code

613
00:31:40,600 --> 00:31:44,900
Playbook or to our sorry, take a play from the rift code Playbook

614
00:31:44,900 --> 00:31:50,600
here, and just use ASCII characters to say something that seems like a

615
00:31:50,600 --> 00:31:53,200
totally reasonable thing to say.

616
00:31:53,900 --> 00:31:58,000
And we could just say that we wanted to make a similar thing to this

617
00:31:58,000 --> 00:32:04,300
here, where we were going to do like, okay, let's do an h.h., a code

618
00:32:04,600 --> 00:32:06,200
and since we are

619
00:32:08,100 --> 00:32:11,200
I guess since we are little endian the way that they do it in.

620
00:32:11,200 --> 00:32:11,900
Rif is good.

621
00:32:11,900 --> 00:32:14,400
It's going to be like the first thing first, and that's, that's all

622
00:32:14,400 --> 00:32:14,800
fine.

623
00:32:15,900 --> 00:32:22,300
So we will make an h, a code and the HHA code could just be HHA and

624
00:32:23,700 --> 00:32:26,400
handmade hero asset file.

625
00:32:27,400 --> 00:32:28,100
So there we go.

626
00:32:28,500 --> 00:32:31,000
HAF that can be our magic value.

627
00:32:31,800 --> 00:32:34,300
So we'll just stick that at the beginning of the file and that just

628
00:32:34,300 --> 00:32:36,200
lets everyone know that this is

629
00:32:36,300 --> 00:32:42,700
Is a handmade hero file, lest they be confused about that, right?

630
00:32:43,900 --> 00:32:46,700
So I think that's all we really want to do.

631
00:32:46,900 --> 00:32:50,400
Some people like to put a version number in here, right?

632
00:32:51,700 --> 00:32:55,500
I don't know how much we care about that because I don't know that

633
00:32:55,500 --> 00:32:59,500
we're going to rev versions of these things in that way, but we could

634
00:32:59,500 --> 00:32:59,800
sit

635
00:33:00,100 --> 00:33:01,100
Free to stick it in there.

636
00:33:01,100 --> 00:33:05,800
We could stick it in there and we could do version

637
00:33:08,400 --> 00:33:13,100
Say this is version 0 and so those would just be prescribed values

638
00:33:13,100 --> 00:33:16,800
that are set to HAF and 0 on disk when we write it out.

639
00:33:17,100 --> 00:33:20,400
And so then after that, really all, we're looking for now.

640
00:33:21,800 --> 00:33:26,400
Is we need some way of starting to Define where our data is.

641
00:33:26,600 --> 00:33:31,000
And so if you take a look you know I realize maybe some people have

642
00:33:31,000 --> 00:33:33,100
done this before so I want to come take it a little slow.

643
00:33:33,200 --> 00:33:35,200
This is really very basic stuff we're doing here.

644
00:33:37,400 --> 00:33:40,600
but if it's your first experience with defining your own file,

645
00:33:41,900 --> 00:33:44,200
it may be kind of confusing, right?

646
00:33:45,100 --> 00:33:48,100
So I just want to kind of underscore what's going to happen here so

647
00:33:48,100 --> 00:33:52,700
that you can kind of, you know, attach it to something mentally.

648
00:33:54,300 --> 00:33:55,700
So what's going to happen, right?

649
00:33:55,700 --> 00:34:01,600
When we load in one of these files we're going to load in a chunk at

650
00:34:01,600 --> 00:34:02,400
the beginning of the file.

651
00:34:02,400 --> 00:34:02,700
Let's say.

652
00:34:02,700 --> 00:34:03,500
Right?

653
00:34:03,500 --> 00:34:05,200
That is that header?

654
00:34:05,200 --> 00:34:09,699
And based on, what's in that Chunk, we need to be able to know how to

655
00:34:09,699 --> 00:34:11,100
get at more data.

656
00:34:11,100 --> 00:34:15,699
So we have that magic value and we have that version, right?

657
00:34:15,699 --> 00:34:19,500
And those are just there to sort of verify that the thing that we're

658
00:34:19,500 --> 00:34:22,600
about to load, we have the capability to delude like that.

659
00:34:22,600 --> 00:34:24,000
It is a handmade hero file in the first.

660
00:34:24,699 --> 00:34:27,600
And that it is the version that we expect it to be because you know,

661
00:34:27,600 --> 00:34:31,000
if this is a thing that supports version 0 is trying to load some

662
00:34:31,000 --> 00:34:34,500
handmade hero file from the future, that's like am a Hero version 7.

663
00:34:34,699 --> 00:34:36,400
Well, that's not going to work, right?

664
00:34:36,400 --> 00:34:38,300
So those are there for our verification purposes.

665
00:34:38,900 --> 00:34:42,699
So then the rest of the header, what we want to do is when we load

666
00:34:42,699 --> 00:34:44,400
this, we're then going to be stuck.

667
00:34:44,500 --> 00:34:47,000
Basically, we've just got a header, we don't know what else is in the

668
00:34:47,000 --> 00:34:48,500
file or where it is, or a mess up.

669
00:34:48,500 --> 00:34:51,900
So the next thing that we need in that header is some information

670
00:34:51,900 --> 00:34:54,400
about where in the file we would look for other things.

671
00:34:55,600 --> 00:35:00,900
And also some information about how many other things there are or

672
00:35:00,900 --> 00:35:01,300
things like that.

673
00:35:01,300 --> 00:35:07,200
So that we can prepare our memory in the game to load it in, right?

674
00:35:07,200 --> 00:35:10,400
Because we want to, we don't want to have to do like parsing of it or

675
00:35:10,400 --> 00:35:13,700
we don't want to waste a lot of time because we are controlling the

676
00:35:13,700 --> 00:35:14,600
format of this file.

677
00:35:14,600 --> 00:35:18,600
We are pre-processing it to make sure that it's efficient for us to

678
00:35:18,600 --> 00:35:19,000
use.

679
00:35:19,000 --> 00:35:22,700
And so, what we want to do is we want to just like, give the game the

680
00:35:22,700 --> 00:35:25,300
maximum out of information, it can get so that it can be very

681
00:35:25,800 --> 00:35:27,600
When it loads, these things in, right?

682
00:35:28,700 --> 00:35:31,000
And so that's the next part that we want to do here.

683
00:35:31,600 --> 00:35:34,300
And we already sort of know what we need to put, right?

684
00:35:34,500 --> 00:35:38,700
Because we know we have assets and we know we have tags, right?

685
00:35:38,800 --> 00:35:41,800
And so what we want to do is we want to put information in here that

686
00:35:41,800 --> 00:35:44,600
will sort of tell us, you know, where are the assets, where are the

687
00:35:44,600 --> 00:35:45,100
tags?

688
00:35:45,100 --> 00:35:47,100
How many of them are there, right?

689
00:35:47,500 --> 00:35:51,200
And so, I, you know, was aware of this sort of stuff when we were kind

690
00:35:51,200 --> 00:35:53,800
of working on the asset file system, I've done these sorts of things,

691
00:35:53,800 --> 00:35:55,400
a lot of times before it's tough.

692
00:35:55,400 --> 00:35:55,500
I

693
00:35:55,600 --> 00:35:59,700
I just kind of know how it goes right, and what sorts of things, I

694
00:36:00,000 --> 00:36:04,600
So, if you look at the way that I've set this up, it's already set up,

695
00:36:04,600 --> 00:36:06,300
kind of like it would be in a file.

696
00:36:06,300 --> 00:36:09,400
There's like a block of tags and a block of assets right?

697
00:36:10,500 --> 00:36:14,300
And a block of asset types and you can just imagine how we're going to

698
00:36:14,300 --> 00:36:14,600
do this.

699
00:36:14,600 --> 00:36:20,000
We can pretty much just do a fairly direct sort of way of writing

700
00:36:20,000 --> 00:36:21,000
these out, right?

701
00:36:22,200 --> 00:36:24,700
So, let's go back to the test Builder here, right?

702
00:36:25,400 --> 00:36:28,200
And take a look at what we actually have to work with.

703
00:36:28,500 --> 00:36:33,100
So, we've got some number of tags and we know that we're probably not

704
00:36:33,100 --> 00:36:36,700
going to have more than four billion tags, right?

705
00:36:37,200 --> 00:36:40,400
So having a tag count, that's 32-bit is probably going to be more than

706
00:36:40,400 --> 00:36:42,000
enough same with assets.

707
00:36:42,000 --> 00:36:46,100
We know that there's probably going to be less than 4 billion assets.

708
00:36:46,700 --> 00:36:47,600
How do we know this?

709
00:36:47,800 --> 00:36:51,500
Because even if each asset was only one k--,

710
00:36:52,200 --> 00:37:01,200
In size that would be 4 terabytes, right of gameplay footprint.

711
00:37:03,600 --> 00:37:07,000
And well, maybe sometime 10 years in the future.

712
00:37:07,000 --> 00:37:09,700
Everyone will Snicker at the fact that we thought four terabytes was a

713
00:37:09,700 --> 00:37:13,700
lot but as far as handmade Heroes concerned for a terabytes is never

714
00:37:13,700 --> 00:37:14,300
going to happen.

715
00:37:14,900 --> 00:37:18,000
So we pretty much know that 4 billion which is the maximum number.

716
00:37:18,000 --> 00:37:22,400
We could set in in a 32-bit unsigned integer.

717
00:37:22,400 --> 00:37:26,800
We pretty much know that 4 billion is going to be fine for the number

718
00:37:26,800 --> 00:37:27,900
of things that we have.

719
00:37:28,000 --> 00:37:30,900
Now, it wouldn't necessarily be fine for the total size.

720
00:37:31,000 --> 00:37:33,000
We may want a total asset.

721
00:37:33,400 --> 00:37:36,200
Footprint size of greater than 4 gigabytes, right?

722
00:37:36,600 --> 00:37:38,100
That's not out of the question.

723
00:37:38,400 --> 00:37:44,700
So in terms of talking about places in the file, the file may need a

724
00:37:44,700 --> 00:37:47,400
64-bit offset to say where and it you are.

725
00:37:47,600 --> 00:37:51,900
But in terms of how many of something of a actual individual assets,

726
00:37:51,900 --> 00:37:54,200
there are a 32 bit value should suffice.

727
00:37:55,900 --> 00:37:58,800
Okay, and then we've got asset types, right?

728
00:37:58,800 --> 00:38:01,400
And sort of what I said about the asset types is those are going to be

729
00:38:01,400 --> 00:38:02,700
done a little bit differently.

730
00:38:03,200 --> 00:38:08,800
So when we say here, we kind of have asset type entry count.

731
00:38:09,100 --> 00:38:12,200
And the reason that I said that is if you remember from the previous

732
00:38:12,200 --> 00:38:17,100
day what I said is that we have this asset type table and I want to

733
00:38:17,100 --> 00:38:20,300
actually allow it to say what the asset types are.

734
00:38:20,300 --> 00:38:24,400
That are represented in that table rather than just assuming that they

735
00:38:24,400 --> 00:38:25,200
are 01.

736
00:38:25,400 --> 00:38:29,500
You three four whatever because we may have only certain asset types

737
00:38:29,500 --> 00:38:33,500
represented and we may add new asset types or who knows what goes on

738
00:38:33,500 --> 00:38:33,900
there.

739
00:38:34,400 --> 00:38:37,900
And so what I want to do is just allow that to be a little bit

740
00:38:37,900 --> 00:38:38,900
different, right?

741
00:38:40,500 --> 00:38:44,000
So, we have a tag count and asset count and asset type entry count,

742
00:38:44,100 --> 00:38:48,100
and that's really all that there is that's going to have to be in this

743
00:38:48,100 --> 00:38:49,500
file and everything else.

744
00:38:49,500 --> 00:38:52,400
Will presumably be offsets off of that, right?

745
00:38:52,600 --> 00:38:55,900
And so what we need, then, again, in addition is once, we have that

746
00:38:55,900 --> 00:38:59,800
information, we need to know where we would find those things.

747
00:39:00,400 --> 00:39:05,100
And so, what I want to do is say that there is like, you know, tag

748
00:39:05,100 --> 00:39:09,100
array offset and asset array offset.

749
00:39:09,800 --> 00:39:10,300
Right?

750
00:39:10,700 --> 00:39:17,200
And a, you know, an asset type entry array offset, right?

751
00:39:17,200 --> 00:39:18,800
And, I guess I don't have to say array,

752
00:39:21,500 --> 00:39:22,300
could just say,

753
00:39:24,100 --> 00:39:25,500
That right?

754
00:39:26,300 --> 00:39:28,200
And so the idea here is you read the header.

755
00:39:28,200 --> 00:39:31,200
You know how many of each of the things you're going to have and then

756
00:39:31,200 --> 00:39:36,500
these offsets will tell you where in the file you actually need to go

757
00:39:36,500 --> 00:39:40,700
to get that those those arrays, right?

758
00:39:42,800 --> 00:39:45,800
Hopefully, that makes reasonable good sense, right?

759
00:39:46,600 --> 00:39:49,600
So then what we need to do is we need to actually Define some of

760
00:39:49,600 --> 00:39:50,000
these.

761
00:39:50,300 --> 00:39:52,800
So stored on disk, what does a tag look like?

762
00:39:52,800 --> 00:39:55,400
And for now, these are basically, these are mostly just going to be,

763
00:39:55,500 --> 00:39:57,400
you know, cut and paste, right?

764
00:39:57,400 --> 00:40:00,500
Because we're not really storing much in the game about these things.

765
00:40:00,500 --> 00:40:03,200
So they're going to look very similar, right?

766
00:40:03,300 --> 00:40:05,500
So we have a tag offset, right?

767
00:40:05,900 --> 00:40:08,700
And this is basically going to be, you know, this, this offset in the

768
00:40:08,700 --> 00:40:11,200
file is going to store something like

769
00:40:11,400 --> 00:40:12,400
Yes, right.

770
00:40:12,500 --> 00:40:14,300
It's going to store an array of these guys.

771
00:40:15,100 --> 00:40:21,300
The asset offset here is going to store it, h FH, h a asset, and

772
00:40:21,300 --> 00:40:22,400
asset, count of those.

773
00:40:22,600 --> 00:40:29,500
And same thing here, HHA asset, type entry.

774
00:40:30,100 --> 00:40:34,300
And I guess I don't really need to say entry no sense being overly

775
00:40:34,300 --> 00:40:37,900
verbose like so right.

776
00:40:39,100 --> 00:40:42,000
And we could even pluralize these, there we go.

777
00:40:43,700 --> 00:40:44,600
and so,

778
00:40:49,200 --> 00:40:53,000
Kind of like that as well, or I could even just do it this way.

779
00:40:54,200 --> 00:40:54,700
Who knows?

780
00:40:54,700 --> 00:40:56,900
We'll see how it goes anyway.

781
00:40:57,000 --> 00:40:59,900
So, if you take a look at basic what we're doing here, we're just sort

782
00:40:59,900 --> 00:41:03,700
of, defining on disc the sorts of stuff that we want store and how

783
00:41:03,700 --> 00:41:05,600
it's going to be stored.

784
00:41:05,700 --> 00:41:07,300
So, that's all easy enough.

785
00:41:07,400 --> 00:41:10,900
And so now, we just need what each of these things actually would be

786
00:41:10,900 --> 00:41:13,000
storing in it, right?

787
00:41:13,700 --> 00:41:16,900
And so, here we go, the asset type.

788
00:41:16,900 --> 00:41:21,700
Like I kind of said already is just going to be the type ID for that

789
00:41:21,700 --> 00:41:22,500
asset type.

790
00:41:23,100 --> 00:41:23,900
And then it's going to

791
00:41:24,000 --> 00:41:28,700
You like the first asset index and then the asset count, right?

792
00:41:28,800 --> 00:41:32,100
So it's going to be basically the same, right?

793
00:41:33,100 --> 00:41:34,900
Oh, I guess we did one pass last.

794
00:41:35,000 --> 00:41:35,900
So that's how we did it.

795
00:41:36,800 --> 00:41:39,000
So it's going to be basically the same right.

796
00:41:39,000 --> 00:41:41,400
Except we're also going to store the type ID.

797
00:41:41,600 --> 00:41:45,700
So it's not just going to be implicit in the load there, right?

798
00:41:46,600 --> 00:41:48,200
And then for our H, h.h.

799
00:41:49,200 --> 00:41:53,500
a asset, our HHA asset.

800
00:41:53,900 --> 00:41:57,600
is going to store basically what we've written here in the Builder

801
00:41:57,600 --> 00:41:59,500
because I guess, like, I already kind of did it,

802
00:42:00,000 --> 00:42:01,100
But here, right?

803
00:42:01,400 --> 00:42:03,500
So it has what its first tag is it has one.

804
00:42:03,500 --> 00:42:06,900
It's what the one pass the last tag is it's got where.

805
00:42:06,900 --> 00:42:09,600
It's actual data is stored, right?

806
00:42:10,600 --> 00:42:12,000
Whatever that happens to be.

807
00:42:14,600 --> 00:42:16,000
And then it needs to store.

808
00:42:17,400 --> 00:42:21,100
Whatever the info is that we're going to store about these things and

809
00:42:21,100 --> 00:42:24,100
this is going to be a little bit different, right?

810
00:42:24,300 --> 00:42:30,700
So these it's going to, we're going to have HHA like bitmap and an ha

811
00:42:30,700 --> 00:42:32,200
sound, right?

812
00:42:33,800 --> 00:42:38,200
Like so, and what we can do here is just these are probably fine as

813
00:42:38,200 --> 00:42:39,100
they are, right?

814
00:42:39,100 --> 00:42:40,400
We kind of know the next day to play.

815
00:42:40,400 --> 00:42:42,000
We know the sample count, these are all the same.

816
00:42:42,400 --> 00:42:45,200
The difference here is, we're not going to have a file named in either

817
00:42:45,200 --> 00:42:46,800
of these cases, right?

818
00:42:47,800 --> 00:42:51,000
So, for right now we don't have much else that maybe we would need to

819
00:42:51,000 --> 00:42:51,400
know.

820
00:42:51,400 --> 00:42:52,900
Although actually you know what we do.

821
00:42:55,900 --> 00:42:59,800
We actually do because the other thing that we have here is we have

822
00:42:59,800 --> 00:43:00,700
the width and height.

823
00:43:00,700 --> 00:43:04,900
So we have the dimensions right of the bitmap because remember once we

824
00:43:04,900 --> 00:43:09,200
include the bitmap data directly in the file, we will no longer

825
00:43:09,200 --> 00:43:13,500
actually know what those dimensions are if we don't store them.

826
00:43:13,500 --> 00:43:16,500
Because the reason that we have them now is because when we load the

827
00:43:16,500 --> 00:43:19,100
bitmap file, we look at the header, right?

828
00:43:19,200 --> 00:43:20,100
But we won't be loading.

829
00:43:20,100 --> 00:43:23,200
Bitmap files anymore will be loading data directly out of our file,

830
00:43:23,300 --> 00:43:24,000
right?

831
00:43:24,700 --> 00:43:25,200
So yeah.

832
00:43:26,000 --> 00:43:32,000
So I think that's pretty much it, right?

833
00:43:33,000 --> 00:43:35,000
And you can sort of see what we've got here.

834
00:43:35,000 --> 00:43:38,200
It's not particularly complicated, but there it is right.

835
00:43:41,600 --> 00:43:42,000
Okay.

836
00:43:44,200 --> 00:43:49,600
So yeah, not not a whole lot to it.

837
00:43:50,600 --> 00:43:54,300
I'm going to go ahead and say let's let's organize it this way for now

838
00:43:55,700 --> 00:44:01,900
I think that's everything that we would really need and you know we

839
00:44:01,900 --> 00:44:04,700
could store what type of asset it was here but it's kind of just

840
00:44:04,700 --> 00:44:09,200
implicit in how the game references it, so we don't really even need

841
00:44:09,200 --> 00:44:10,200
to do that.

842
00:44:11,800 --> 00:44:13,400
We may need to do that over here.

843
00:44:14,200 --> 00:44:16,800
But we wouldn't necessarily need to do that over here so we'll see if

844
00:44:16,800 --> 00:44:19,200
we want to include those or if we don't want include those right?

845
00:44:19,200 --> 00:44:23,500
But the way that would look as in here we would include a type field.

846
00:44:23,500 --> 00:44:27,200
That says, is this a bitmap or is this a sound in the, you know, in

847
00:44:27,200 --> 00:44:28,100
the asset field.

848
00:44:28,300 --> 00:44:28,800
Right?

849
00:44:30,400 --> 00:44:31,000
So there we go.

850
00:44:31,400 --> 00:44:34,200
So that's that really

851
00:44:38,200 --> 00:44:40,400
Yeah, I can't think of anything else.

852
00:44:40,400 --> 00:44:43,400
So let's just start, let's start writing it out.

853
00:44:44,000 --> 00:44:46,300
So if we come down here, let's go ahead and compile.

854
00:44:46,900 --> 00:44:52,700
If you come down here, we need to include this handmade file format,

855
00:44:52,700 --> 00:44:54,200
study age, right?

856
00:44:56,100 --> 00:44:59,800
Handmade file formats dot h.

857
00:45:02,000 --> 00:45:09,100
There we go, and I will just go ahead and start writing this out.

858
00:45:09,400 --> 00:45:12,600
So the first thing that we need to write out is the header, right?

859
00:45:13,200 --> 00:45:17,400
And so we need one of these guys, but there is a little bit of a

860
00:45:17,400 --> 00:45:18,700
caveat here, right?

861
00:45:18,700 --> 00:45:22,900
Here is the header and so if I want to actually set this, I can set it

862
00:45:22,900 --> 00:45:23,300
all up.

863
00:45:23,300 --> 00:45:26,900
I can say the magic value is, you know, the h a magic value.

864
00:45:27,100 --> 00:45:30,900
I can say that the version is the H version.

865
00:45:32,100 --> 00:45:36,100
But then I got a problem which is that I don't really necessarily know

866
00:45:36,600 --> 00:45:37,800
some of this information.

867
00:45:38,000 --> 00:45:40,200
I do know the tag count, right?

868
00:45:40,300 --> 00:45:43,600
So I can say that the tag count is the assets tag count, right?

869
00:45:44,800 --> 00:45:53,200
I do know the asset count right, oops, count assets, asset count, and

870
00:45:53,200 --> 00:45:56,900
I do know the asset type count as well.

871
00:45:58,100 --> 00:46:02,100
Well I don't even really know if I do because we don't know which of

872
00:46:02,100 --> 00:46:03,200
those might be filled.

873
00:46:03,200 --> 00:46:05,100
So we don't necessarily know that, right?

874
00:46:05,100 --> 00:46:08,000
We don't necessarily know that but what I definitely don't know at

875
00:46:08,000 --> 00:46:12,100
this point is I don't know necessarily where these things are right.

876
00:46:12,100 --> 00:46:15,500
So I don't know what the offsets in the file are right.

877
00:46:15,600 --> 00:46:17,900
You know where it where are the tags going to be?

878
00:46:18,400 --> 00:46:21,200
Where are the asset types going to be right?

879
00:46:21,800 --> 00:46:23,300
Where are the assets going to be?

880
00:46:23,300 --> 00:46:24,900
I don't actually know, right?

881
00:46:24,900 --> 00:46:27,200
I have no idea where those are going to be.

882
00:46:28,800 --> 00:46:33,800
So you know, I could start writing in code to compute the layout here.

883
00:46:33,800 --> 00:46:35,400
I could be like, oh you know what?

884
00:46:35,400 --> 00:46:38,200
These are going to go at a particular location and maybe I should do

885
00:46:38,200 --> 00:46:40,300
that just to show you what that looks like and then I'll show you some

886
00:46:40,300 --> 00:46:42,800
ways to avoid having to do that.

887
00:46:42,800 --> 00:46:44,100
So maybe today will do that.

888
00:46:44,100 --> 00:46:46,400
And then maybe maybe this will be a good way to bring down today.

889
00:46:46,400 --> 00:46:47,500
I'll do it that way.

890
00:46:47,600 --> 00:46:48,900
And then tomorrow I'll kind of show you.

891
00:46:48,900 --> 00:46:51,900
Okay, we can save some work there, right?

892
00:46:52,900 --> 00:46:55,000
And maybe that'll be a good, a good thing to show.

893
00:46:55,000 --> 00:46:56,900
That's, that's now I think about, that's probably a good idea.

894
00:46:58,200 --> 00:46:59,900
So yeah, so asset type count.

895
00:46:59,900 --> 00:47:02,500
We're not really sure how many of them actually got used for now.

896
00:47:02,500 --> 00:47:06,200
I guess what I could do is just say that we're going to have an all,

897
00:47:06,300 --> 00:47:09,600
you know, have an entry for all of them, but I'm going to put you do

898
00:47:09,600 --> 00:47:11,400
there, which is like to do.

899
00:47:11,500 --> 00:47:19,700
You know, do we really want to do this sparse miss or something?

900
00:47:21,700 --> 00:47:25,000
So then, yeah, if I was going to compute these, right, where do the

901
00:47:25,000 --> 00:47:25,700
tags go?

902
00:47:25,700 --> 00:47:27,000
Well, we can just put the tags.

903
00:47:27,000 --> 00:47:27,700
We're going to write the

904
00:47:27,800 --> 00:47:29,200
Our in, right?

905
00:47:29,300 --> 00:47:31,700
So the header is, is however, big, it is right?

906
00:47:31,700 --> 00:47:33,200
The header is this big.

907
00:47:33,400 --> 00:47:36,200
So, we know that the first place in the file, we can start to write an

908
00:47:36,200 --> 00:47:38,100
array, would be after the header.

909
00:47:38,600 --> 00:47:40,300
So that's where that would be right?

910
00:47:40,600 --> 00:47:45,500
And then the asset types would go wherever the you know where ever the

911
00:47:45,500 --> 00:47:46,800
tag array started.

912
00:47:46,900 --> 00:47:50,600
It's going to go tag count number of tags passed it.

913
00:47:50,800 --> 00:47:51,400
Right.

914
00:47:51,700 --> 00:47:56,100
So you know something like this where I'm going to say all right, you

915
00:47:56,100 --> 00:47:57,700
know, I've got this many

916
00:47:57,800 --> 00:47:59,900
he tags that come after it, so that

917
00:48:00,000 --> 00:48:05,200
That's there and then the assets right are going to come after that.

918
00:48:05,200 --> 00:48:10,400
So it's going to be wherever that was plus however, many asset types,

919
00:48:10,400 --> 00:48:12,300
there were right.

920
00:48:12,600 --> 00:48:16,700
So however, many we said they were going to be of that times the asset

921
00:48:17,400 --> 00:48:19,300
entry their type.

922
00:48:19,500 --> 00:48:23,000
So, so that is where the things are going to be in the file.

923
00:48:23,000 --> 00:48:26,100
You can see that basically, I have to kind of do a bunch of math, kind

924
00:48:26,100 --> 00:48:27,900
of in my head there, which might be a little error prone.

925
00:48:27,900 --> 00:48:29,700
But for a file so far.

926
00:48:29,700 --> 00:48:29,800
Are

927
00:48:30,000 --> 00:48:31,000
Files, very simple.

928
00:48:31,100 --> 00:48:33,200
You know, we could you know we don't even really need.

929
00:48:33,200 --> 00:48:36,900
Maybe we don't need to actually address that but there's ways we can

930
00:48:37,100 --> 00:48:40,300
certainly make that better if we do decide to write.

931
00:48:40,600 --> 00:48:44,800
So that's the header and, you know, now I can write the header, right?

932
00:48:44,800 --> 00:48:47,900
I can go ahead and say, all right, let's write the header out, F.

933
00:48:47,900 --> 00:48:52,400
Right is the equivalent to right file, like we were using in the

934
00:48:52,400 --> 00:48:57,700
platform layer, and it allows you to say, I want to write something of

935
00:48:57,700 --> 00:48:58,600
a specific size.

936
00:48:58,600 --> 00:48:59,400
And here it is, right?

937
00:48:59,400 --> 00:48:59,900
So you give it.

938
00:49:00,000 --> 00:49:00,700
Information.

939
00:49:02,000 --> 00:49:06,700
And and and it goes ahead and writes it right now, there's a weirdness

940
00:49:06,700 --> 00:49:07,300
to it.

941
00:49:07,800 --> 00:49:08,800
It's kind of annoying.

942
00:49:08,800 --> 00:49:10,400
In fact sometimes I don't like using, right?

943
00:49:10,400 --> 00:49:13,400
I like using the slightly lower level ones and I'll show you what is

944
00:49:13,400 --> 00:49:14,400
weird about it.

945
00:49:15,400 --> 00:49:18,800
So I, but just so you kind of if you ever choose to use it yourself,

946
00:49:19,100 --> 00:49:22,300
what you can see is instead of, you know, you pass it the pointer

947
00:49:22,300 --> 00:49:25,100
which is like what I'm going to write and you pass it.

948
00:49:25,100 --> 00:49:28,600
The file handle that you wanted to write it to which all makes good

949
00:49:28,600 --> 00:49:29,000
sense, right.

950
00:49:29,000 --> 00:49:29,800
It's almost exactly.

951
00:49:29,900 --> 00:49:34,000
Like we did in the winter to layer, but then you've got two different

952
00:49:34,000 --> 00:49:34,500
sizes.

953
00:49:34,700 --> 00:49:38,900
You have account in a size and the way that F rate is defined is that

954
00:49:38,900 --> 00:49:41,200
it will try to write, you know.

955
00:49:41,200 --> 00:49:45,800
This many things of this size from that pointer and it will return to

956
00:49:45,800 --> 00:49:46,300
you.

957
00:49:46,600 --> 00:49:50,500
Write a value that's representative of that.

958
00:49:50,600 --> 00:49:53,200
So if you look, it's the return value.

959
00:49:53,200 --> 00:49:54,900
Isn't how many bytes that were written?

960
00:49:54,900 --> 00:49:57,100
It's the number of elements that were written.

961
00:49:57,400 --> 00:49:59,800
So if you set the size of 21,

962
00:50:00,400 --> 00:50:02,800
Then you will actually get back the number of bytes written, but if

963
00:50:02,800 --> 00:50:05,200
you set the size of something else, you'll get it / that right.

964
00:50:05,200 --> 00:50:08,500
It's just I don't know why they probably had a good reason.

965
00:50:08,500 --> 00:50:09,200
I don't really know.

966
00:50:10,600 --> 00:50:15,000
So yeah, so we probably want to do is say oh the size is you know we

967
00:50:15,000 --> 00:50:16,700
just want to write out one whole Big Blocks.

968
00:50:16,700 --> 00:50:20,600
We probably want to say, write out a single unit of this size, right?

969
00:50:20,600 --> 00:50:24,500
That's just blam, just write it out and you're done, okay?

970
00:50:25,200 --> 00:50:26,500
So we're going to do that, right?

971
00:50:26,800 --> 00:50:27,700
You know, we should also do it.

972
00:50:27,700 --> 00:50:30,600
Just verify them, can open the file right now.

973
00:50:30,600 --> 00:50:34,800
So I'm going to go ahead and do a printf here and say, error couldn't

974
00:50:35,300 --> 00:50:38,400
open file, right, whatever.

975
00:50:39,800 --> 00:50:40,000
So,

976
00:50:40,600 --> 00:50:43,700
So that's going to write out the header and, of course, the way that

977
00:50:43,700 --> 00:50:48,000
the C runtime works is it keeps sort of an idea of where in the file

978
00:50:48,000 --> 00:50:48,600
you are.

979
00:50:48,900 --> 00:50:52,500
So you start out writing at the zero with b, and after you write the

980
00:50:52,500 --> 00:50:55,200
header, your then pointing to the thing, immediately after it right in

981
00:50:55,200 --> 00:50:55,800
the file.

982
00:50:55,800 --> 00:50:58,400
So, it's kind of a streaming, right Paradigm.

983
00:50:58,400 --> 00:50:59,900
Which by the way, I absolutely

984
00:51:00,000 --> 00:51:02,100
Of the concept of streaming.

985
00:51:03,900 --> 00:51:09,700
Just the concept that file handles have a position was just the worst

986
00:51:09,700 --> 00:51:10,300
thing.

987
00:51:12,900 --> 00:51:19,300
So bad it's so bad but yeah what do you do anyway so that's how that

988
00:51:19,300 --> 00:51:19,600
works.

989
00:51:20,800 --> 00:51:23,200
So you'll notice that when we set what you know, you'll notice that

990
00:51:23,200 --> 00:51:25,900
even though we're specifying two numbers, they're both just sighs.

991
00:51:26,100 --> 00:51:26,500
Nothing.

992
00:51:26,500 --> 00:51:29,900
Here is said we're in the file to Reich and that's because it's just

993
00:51:29,900 --> 00:51:33,600
implicit that it starts out wherever the file handle was.

994
00:51:33,700 --> 00:51:37,700
And when you write it, it moves that far forward and then you right at

995
00:51:37,700 --> 00:51:40,000
the next position and you can seek in the file.

996
00:51:40,900 --> 00:51:44,000
But if you want to do a seek and a right together, it's two separate

997
00:51:44,000 --> 00:51:47,800
commands instead of it being one command, in my opinion, that should

998
00:51:47,800 --> 00:51:50,500
never ever ever happen ever.

999
00:51:50,700 --> 00:51:53,300
Any circumstances it was a very bad idea.

1000
00:51:54,400 --> 00:51:58,500
It's the worst possible way for a file system to work what you want is

1001
00:51:58,500 --> 00:52:01,800
you always specify the location and the size.

1002
00:52:02,100 --> 00:52:05,900
And the reason for that is because you don't want the hidden state of

1003
00:52:05,900 --> 00:52:07,600
this file position.

1004
00:52:07,800 --> 00:52:10,200
You want to introduce that at a later level because otherwise it

1005
00:52:10,200 --> 00:52:12,800
causes all sorts of problems with like threading, where two people

1006
00:52:12,800 --> 00:52:16,200
use, the same file handle and they got the pointers are now.

1007
00:52:16,200 --> 00:52:18,900
They, you know, one guy uses it and it's the wrong place.

1008
00:52:18,900 --> 00:52:22,700
And you can't queue up the rights because you'd have to save where the

1009
00:52:22,700 --> 00:52:24,100
file handle was in order.

1010
00:52:24,200 --> 00:52:26,700
To figure out where the person thought they were writing at the time

1011
00:52:26,700 --> 00:52:28,300
there, but it's just it's awful.

1012
00:52:29,500 --> 00:52:32,000
So yeah, really don't like it.

1013
00:52:33,000 --> 00:52:36,000
Just using it because I wanted to write this simple app here and I

1014
00:52:36,200 --> 00:52:39,600
said, I would show to use the C runtime library and it's totally fine

1015
00:52:39,600 --> 00:52:41,400
to use, but just be aware that.

1016
00:52:41,400 --> 00:52:43,900
It's just a bad, bad, bad API.

1017
00:52:44,000 --> 00:52:47,400
The worst idea for file API that we've ever had and unfortunately,

1018
00:52:47,400 --> 00:52:48,300
it's the default.

1019
00:52:48,500 --> 00:52:49,100
What do you do?

1020
00:52:50,500 --> 00:52:55,000
All right, so what we want to do now is write out these actual arrays.

1021
00:52:55,000 --> 00:52:56,300
We've got three arrays to write out.

1022
00:52:56,300 --> 00:52:58,500
We've got to write the tags array, right?

1023
00:52:59,000 --> 00:53:02,200
So we want to write out the tags array here, right?

1024
00:53:03,400 --> 00:53:04,100
And

1025
00:53:05,700 --> 00:53:06,400
Flexo.

1026
00:53:08,200 --> 00:53:10,600
And then we want to write the asset types array.

1027
00:53:12,500 --> 00:53:14,500
And then we want to write the assets right now.

1028
00:53:14,500 --> 00:53:15,700
What you can see here.

1029
00:53:15,900 --> 00:53:18,200
These question marks here which are the sizes that we're going to

1030
00:53:18,200 --> 00:53:21,200
write, we actually already know what those are because we use them up

1031
00:53:21,200 --> 00:53:22,400
here, right?

1032
00:53:22,800 --> 00:53:26,000
So what we want to do is we probably want to reuse that work and just

1033
00:53:26,000 --> 00:53:30,800
say, okay, we've got some sizes here and I guess we, these sizes have

1034
00:53:30,800 --> 00:53:33,600
to be restricted to you 32s at the moment because we're using a

1035
00:53:33,700 --> 00:53:34,400
32-bit, right?

1036
00:53:34,400 --> 00:53:36,400
But that's, that's fine, but all will be.

1037
00:53:37,400 --> 00:53:41,000
So right here, we have the tag array size, right?

1038
00:53:42,700 --> 00:53:45,200
Tag array size.

1039
00:53:45,600 --> 00:53:51,700
So and then here we have the asset type asset type

1040
00:53:53,800 --> 00:53:56,400
Side array size, right?

1041
00:53:58,700 --> 00:53:59,800
A sit tight.

1042
00:54:00,900 --> 00:54:01,600
Sighs.

1043
00:54:02,500 --> 00:54:05,000
And then finally, we didn't do the assets one because we didn't

1044
00:54:05,000 --> 00:54:07,800
actually need to put anything after it, but we will eventually.

1045
00:54:07,800 --> 00:54:12,600
So, we have the asset array size and that's just going to be the

1046
00:54:12,600 --> 00:54:18,400
header asset, count X size of ha asset.

1047
00:54:20,800 --> 00:54:23,100
And I guess, let me see.

1048
00:54:23,200 --> 00:54:23,900
File formats.

1049
00:54:23,900 --> 00:54:29,900
Here, it's tags, tag asset type count, so that should be

1050
00:54:30,400 --> 00:54:32,500
I want that to be lined up.

1051
00:54:32,500 --> 00:54:33,100
There we go.

1052
00:54:34,400 --> 00:54:34,800
Okay.

1053
00:54:35,100 --> 00:54:37,200
So now we actually know what the sizes are, right?

1054
00:54:37,200 --> 00:54:38,800
This is the tag array size.

1055
00:54:39,700 --> 00:54:45,800
This is the asset array size and this is the oops.

1056
00:54:46,800 --> 00:54:53,300
This is the asset type array size and these are the assets, right?

1057
00:54:54,100 --> 00:54:56,900
And so now what we really need to do is we just need to actually build

1058
00:54:56,900 --> 00:54:57,700
these guys, right?

1059
00:54:57,700 --> 00:54:59,200
We need to actually build

1060
00:55:00,700 --> 00:55:03,700
The actual arrays here that we're going to write out.

1061
00:55:04,100 --> 00:55:06,500
So we can compile and we should everything should be fine.

1062
00:55:06,800 --> 00:55:10,300
But we haven't actually, you know, we haven't actually constructed

1063
00:55:10,300 --> 00:55:12,700
these asset array as a type array.

1064
00:55:16,500 --> 00:55:17,900
So yeah, so that's it.

1065
00:55:17,900 --> 00:55:18,300
Really?

1066
00:55:18,300 --> 00:55:22,400
And that would give us a file that who's had its headers structured

1067
00:55:22,400 --> 00:55:23,600
properly, right?

1068
00:55:24,100 --> 00:55:25,500
But we need to actually produce those.

1069
00:55:25,500 --> 00:55:27,800
So let's take a look at what we've got here.

1070
00:55:28,000 --> 00:55:31,400
Now, if we actually just made these be exactly if we actually just

1071
00:55:31,400 --> 00:55:35,500
produce these by using the hhha in the tag stuff.

1072
00:55:35,700 --> 00:55:38,600
So we can do that for some of our stuff for tags.

1073
00:55:38,600 --> 00:55:41,400
For example, we could totally do that, right?

1074
00:55:46,400 --> 00:55:50,600
So if we make this be an h.h., a tag instead, right?

1075
00:55:51,200 --> 00:55:54,800
And got rid of asset tag, nothing would change, right?

1076
00:55:55,100 --> 00:55:56,700
I think everything would just be fine.

1077
00:55:58,600 --> 00:55:59,100
Right?

1078
00:55:59,500 --> 00:56:04,700
And so then assets tags is just the thing we constructed in memory is

1079
00:56:04,700 --> 00:56:08,200
actually exactly the thing that we actually wanted, right?

1080
00:56:09,300 --> 00:56:12,700
It's just totally, it's just totally the right thing, right?

1081
00:56:12,700 --> 00:56:14,500
So that's that's totally easy.

1082
00:56:14,600 --> 00:56:15,200
Totally fine.

1083
00:56:16,600 --> 00:56:19,500
So then the question is, well, what else can we do that with right

1084
00:56:19,700 --> 00:56:20,800
asset type?

1085
00:56:21,400 --> 00:56:24,900
That thing here we could totally do it with that as well, right?

1086
00:56:24,900 --> 00:56:27,100
Because what we could do is just

1087
00:56:28,100 --> 00:56:34,100
Well, that array, we're kind of going to have to compress so well, no,

1088
00:56:34,100 --> 00:56:36,700
you know what, we totally could now we could totally do it with that

1089
00:56:36,700 --> 00:56:38,800
as well, we could totally do with that as well.

1090
00:56:39,200 --> 00:56:40,800
So, let's go ahead and do that as well.

1091
00:56:40,800 --> 00:56:45,700
I'll just get rid of asset type here and change this to HHA.

1092
00:56:46,400 --> 00:56:47,800
What did I call that in here?

1093
00:56:47,800 --> 00:56:49,200
It's just asset type yet.

1094
00:56:49,200 --> 00:56:52,200
It is hsas at type, right?

1095
00:56:52,700 --> 00:56:56,000
And we do know that we can never have more than asset count of these.

1096
00:56:56,300 --> 00:56:57,900
So, what I'll do here is just call this

1097
00:56:58,000 --> 00:56:59,900
This in fact, I'll start to break these out.

1098
00:57:00,000 --> 00:57:01,500
Little bit more, right?

1099
00:57:02,100 --> 00:57:07,300
So we have the tags, we have the assets, we have the asset type count

1100
00:57:07,400 --> 00:57:08,000
as well.

1101
00:57:08,500 --> 00:57:12,700
What I can do here and these these ones also can, these can sort of

1102
00:57:12,700 --> 00:57:17,200
start to go away and we can clean that up a little bit, but if I go

1103
00:57:17,200 --> 00:57:23,500
ahead and do that, then I can also do this assets asset type array

1104
00:57:24,100 --> 00:57:24,600
like so.

1105
00:57:25,300 --> 00:57:28,900
So I'm going to go ahead and just do that asset types.

1106
00:57:30,000 --> 00:57:30,400
Right.

1107
00:57:31,000 --> 00:57:35,600
So yeah, if I do it that way, then what I'd have to do though is when

1108
00:57:35,600 --> 00:57:41,000
we are actually doing the entries here, what is, what are we talking

1109
00:57:41,000 --> 00:57:41,700
about?

1110
00:57:42,400 --> 00:57:45,100
Right, she say Jas it tight.

1111
00:57:46,800 --> 00:57:47,200
Yeah.

1112
00:57:47,200 --> 00:57:49,400
So if I actually do it that way, the only thing that we would have to

1113
00:57:49,400 --> 00:57:52,800
change is when we do begin asset type right.

1114
00:57:53,600 --> 00:57:57,500
When we do this type ID here, when we set what these are only thing I

1115
00:57:57,500 --> 00:57:59,700
would have to do is just store it, right?

1116
00:58:00,000 --> 00:58:04,300
Are the type because that's the only thing that we actually changed in

1117
00:58:04,300 --> 00:58:06,400
the in the entire thing, right?

1118
00:58:06,400 --> 00:58:11,700
So now our asset type array also conforms to the file format because

1119
00:58:11,900 --> 00:58:16,800
it's actually storing the type ID because the rest of the stuff was

1120
00:58:16,800 --> 00:58:17,600
the same, right?

1121
00:58:17,600 --> 00:58:20,000
So the only thing that we had to do is stick what type of asset we

1122
00:58:20,000 --> 00:58:22,000
were talking about into that array.

1123
00:58:22,200 --> 00:58:23,200
And so now we've done that.

1124
00:58:23,600 --> 00:58:29,000
So the only thing that's a little bit squirrelly is, is that assets

1125
00:58:29,100 --> 00:58:29,800
because those

1126
00:58:29,900 --> 00:58:33,100
Those are the ones that actually store two different things right,

1127
00:58:33,100 --> 00:58:34,900
depending on what we're doing.

1128
00:58:35,200 --> 00:58:37,700
And so, let's just go ahead and comment that out for a second since

1129
00:58:37,700 --> 00:58:38,600
we're out of time.

1130
00:58:39,400 --> 00:58:40,300
So that

1131
00:58:41,300 --> 00:58:46,100
This code, let's actually just step through it quickly because I want

1132
00:58:46,100 --> 00:58:49,500
to I want to sort of show you what we're doing here.

1133
00:58:50,000 --> 00:59:00,000
If I go ahead and do M SW W, builds test, asset Builder, EXE,

1134
00:59:03,600 --> 00:59:10,100
Oops, I think, I think I maybe did a not-so-good batch file.

1135
00:59:12,200 --> 00:59:12,800
Yes.

1136
00:59:13,800 --> 00:59:16,200
You'll notice we made a little batch file so I could type Ms Dev

1137
00:59:16,200 --> 00:59:18,400
instead of Devon's because I'm so used to typing it.

1138
00:59:18,400 --> 00:59:20,200
All right, we didn't pass any arguments to it.

1139
00:59:20,300 --> 00:59:22,200
I think that's the way you do that, right?

1140
00:59:23,800 --> 00:59:24,400
There we go.

1141
00:59:24,900 --> 00:59:28,400
So when I actually call that it didn't actually passed the fact that I

1142
00:59:28,400 --> 00:59:29,500
wanted to open that file,

1143
00:59:30,800 --> 00:59:35,400
All right, so what I want to do here, I've just I've created sort of a

1144
00:59:35,400 --> 00:59:39,500
new debug environment by opening by launching with the test asset

1145
00:59:39,500 --> 00:59:42,900
Builder, instead of our normal XZ because I just want to kind of Step

1146
00:59:42,900 --> 00:59:43,400
through this.

1147
00:59:43,600 --> 00:59:50,200
So if I go ahead and set this, this guy's directory to be looking at

1148
00:59:50,200 --> 00:59:53,400
our standard handmade directory, the way that we do, right?

1149
00:59:53,400 --> 00:59:58,000
Handmade data like so then if I start step through here,

1150
00:59:59,500 --> 00:59:59,800
oh,

1151
01:00:01,600 --> 01:00:03,100
No, debug for the file.

1152
01:00:04,300 --> 01:00:05,600
Do you want to cook tuna bugging?

1153
01:00:05,600 --> 01:00:06,000
No.

1154
01:00:06,500 --> 01:00:08,500
Did I not specify a debug info?

1155
01:00:09,700 --> 01:00:10,400
What happened?

1156
01:00:11,000 --> 01:00:12,200
What happened?

1157
01:00:12,200 --> 01:00:13,400
- Z?

1158
01:00:18,500 --> 01:00:19,500
Scott z7.

1159
01:00:20,800 --> 01:00:23,200
So why does it not have debug info?

1160
01:00:23,500 --> 01:00:24,800
Dare I ask

1161
01:00:27,600 --> 01:00:32,900
Where's the compilation line to build our social link common Linker

1162
01:00:32,900 --> 01:00:35,000
Flags incremental.

1163
01:00:35,000 --> 01:00:38,300
No opt ref, seems a little odd, doesn't it?

1164
01:00:38,400 --> 01:00:39,900
Like, where's the

1165
01:00:41,200 --> 01:00:42,400
Where's the wires?

1166
01:00:42,400 --> 01:00:43,400
Are no, debug info.

1167
01:00:45,000 --> 01:00:46,700
Oh, do we like delete?

1168
01:00:46,900 --> 01:00:47,700
Ah,

1169
01:00:49,000 --> 01:00:50,900
Because we delete the PD bees here.

1170
01:00:51,800 --> 01:00:55,800
So we really probably want to push this up like so there we go.

1171
01:00:55,800 --> 01:00:58,100
We were deleting the pdb is because that's part of our little build

1172
01:00:58,100 --> 01:00:59,100
process that we're doing.

1173
01:00:59,300 --> 01:00:59,800
All right?

1174
01:01:01,600 --> 01:01:02,300
So here we go.

1175
01:01:03,200 --> 01:01:05,600
We come through here and we're going to generate all our assets,

1176
01:01:05,800 --> 01:01:06,400
right?

1177
01:01:06,400 --> 01:01:11,600
Just the same way that we were doing them before so or not.

1178
01:01:16,000 --> 01:01:17,700
What is the problem?

1179
01:01:17,700 --> 01:01:20,300
Assert, debug asset about less than asset?

1180
01:01:20,300 --> 01:01:24,100
Ah, I guess I should mention

1181
01:01:25,200 --> 01:01:26,000
And fix.

1182
01:01:26,500 --> 01:01:30,400
So in the way we were doing it before our asset count in the, in the

1183
01:01:30,400 --> 01:01:33,000
game was actually doing the total number of these things that you

1184
01:01:33,000 --> 01:01:34,000
could have at all.

1185
01:01:34,300 --> 01:01:38,000
So these asserts are no longer actually meaningful, right?

1186
01:01:38,000 --> 01:01:40,500
Because asset count actually tracks the actual number.

1187
01:01:41,300 --> 01:01:43,300
So really what I think we should do here.

1188
01:01:44,100 --> 01:01:45,100
Sorry for going over time.

1189
01:01:45,100 --> 01:01:46,300
Sometimes you know how it is.

1190
01:01:46,400 --> 01:01:48,700
I just I'm in the middle of something and you got to do it.

1191
01:01:48,900 --> 01:01:51,700
I think what we really want to do here is just get rid of those if

1192
01:01:51,700 --> 01:01:52,400
that makes sense.

1193
01:01:53,200 --> 01:01:54,900
And go ahead and clean those

1194
01:01:55,000 --> 01:01:58,800
Out because what we really want to do is just have it be, you know,

1195
01:01:59,800 --> 01:02:04,000
always using actually the asset count itself, instead of having that

1196
01:02:04,000 --> 01:02:05,900
debug value, right?

1197
01:02:05,900 --> 01:02:09,500
It's just, it's just whatever the actual asset things are.

1198
01:02:10,200 --> 01:02:14,300
So there we go, because we need, we need that count for our other

1199
01:02:14,300 --> 01:02:15,000
stuff as well.

1200
01:02:15,500 --> 01:02:17,900
So see tag count.

1201
01:02:23,400 --> 01:02:24,000
What is this?

1202
01:02:25,600 --> 01:02:27,200
This is just asset count.

1203
01:02:29,700 --> 01:02:33,200
And then these guys go away, all right?

1204
01:02:35,600 --> 01:02:44,700
So now we can get rid of those assertions because I believe this will

1205
01:02:44,700 --> 01:02:48,300
always be, you know, that's never going to actually be possible.

1206
01:02:48,300 --> 01:02:49,100
Oh, you know what I could do?

1207
01:02:49,100 --> 01:02:54,400
I could do array count assets right since those are static arrays.

1208
01:02:54,400 --> 01:02:58,000
Now do we have any more of those assertions anywhere?

1209
01:03:00,000 --> 01:03:02,200
Yes, we've got one right above it.

1210
01:03:02,800 --> 01:03:06,600
So that is this one right here, right?

1211
01:03:09,500 --> 01:03:12,000
Because those remember, we were dynamically allocating those in the

1212
01:03:12,000 --> 01:03:14,100
actual game whereas now they're just static arrays.

1213
01:03:15,200 --> 01:03:18,500
So okay, we've defined everything here and we can take a look right.

1214
01:03:18,500 --> 01:03:22,600
This is the assets sort of meta structure that we've created here.

1215
01:03:22,600 --> 01:03:24,900
So like you can look here's all the tags, right?

1216
01:03:24,900 --> 01:03:29,700
That we've made for, you know, for whatever looks like we don't have a

1217
01:03:29,700 --> 01:03:29,900
whole lot.

1218
01:03:30,000 --> 01:03:33,600
Lot of different tag types being used best as we can really play with

1219
01:03:33,600 --> 01:03:34,500
the tags much.

1220
01:03:34,900 --> 01:03:37,700
And we've got the asset types to find here in this array, right?

1221
01:03:37,700 --> 01:03:41,700
And then we got the assets themselves and it looks like those are

1222
01:03:41,800 --> 01:03:43,400
valid and all that stuff, right?

1223
01:03:44,200 --> 01:03:46,600
So now we're going to come through here and actually do right out the

1224
01:03:46,600 --> 01:03:47,100
file.

1225
01:03:47,300 --> 01:03:50,700
So the first thing we do is we prep that header, right?

1226
01:03:52,300 --> 01:03:53,800
And you can see it here.

1227
01:03:53,800 --> 01:03:56,000
Is that magic value, right?

1228
01:03:56,800 --> 01:03:59,600
And we can even see if we tell the debugger.

1229
01:03:59,600 --> 01:04:03,600
I'd like to look at that as, you know, an actual care.

1230
01:04:03,600 --> 01:04:06,100
So you can see the H AF that we wanted there.

1231
01:04:06,800 --> 01:04:09,400
And so, you know, here, we're prepping the header saying there's 13

1232
01:04:09,400 --> 01:04:14,500
tags 17, asset types, 51 assets, and then the offsets we haven't

1233
01:04:14,500 --> 01:04:16,000
specified yet, right?

1234
01:04:16,400 --> 01:04:21,900
So there, you know, the header itself is,

1235
01:04:22,100 --> 01:04:23,600
Before bytes long.

1236
01:04:23,900 --> 01:04:27,700
So you can see that the asset tiger is going to start on the 44th bite

1237
01:04:28,100 --> 01:04:30,900
and then the type array is going to start after that.

1238
01:04:31,100 --> 01:04:33,600
The assets are gonna start after that and then we're just going to

1239
01:04:33,600 --> 01:04:34,200
write them out.

1240
01:04:34,200 --> 01:04:37,800
So that writes out the header that writes out the tag array that

1241
01:04:37,800 --> 01:04:39,500
writes out the asset type array and we have it.

1242
01:04:39,500 --> 01:04:45,400
Finished the assets yet we have closed the file and exit and that is

1243
01:04:45,500 --> 01:04:46,800
our asset file, right?

1244
01:04:46,900 --> 01:04:47,700
Not done yet.

1245
01:04:47,700 --> 01:04:50,400
But that is the entire process and you can pretty much see.

1246
01:04:50,800 --> 01:04:51,900
It's really not very

1247
01:04:52,000 --> 01:04:52,900
Very complicated.

1248
01:04:53,100 --> 01:04:56,100
We're really just going to basically do that again tomorrow.

1249
01:04:56,100 --> 01:05:02,800
And there you can see the the test dot out file that we have produced

1250
01:05:02,900 --> 01:05:03,200
now.

1251
01:05:03,200 --> 01:05:07,600
I don't actually know if I have anything on here that can view.

1252
01:05:07,600 --> 01:05:10,600
I don't know if I have a hex editor on this, we may have to download a

1253
01:05:10,600 --> 01:05:11,300
hex editor.

1254
01:05:11,500 --> 01:05:20,800
I could use emacs is hex editor is like the worst, the worst, it's

1255
01:05:20,800 --> 01:05:21,600
just awful.

1256
01:05:22,300 --> 01:05:27,500
You know, this is not a long-term solution, but whoa.

1257
01:05:29,300 --> 01:05:32,700
What just happened there?

1258
01:05:37,400 --> 01:05:38,700
Am I missing something?

1259
01:05:39,300 --> 01:05:41,800
Is that actually, how did we manage that?

1260
01:05:45,800 --> 01:05:50,900
Is that actually what though that's test dot out I want test that ha I

1261
01:05:50,900 --> 01:05:54,200
was going to say I almost freaked out there's like how did that

1262
01:05:54,200 --> 01:05:54,600
happen?

1263
01:05:55,800 --> 01:05:57,800
So I'm going to try hexyl mode.

1264
01:05:58,500 --> 01:05:59,900
I don't recommend doing this at

1265
01:06:00,100 --> 01:06:01,000
It's awful.

1266
01:06:01,900 --> 01:06:05,600
But, you know, just to give you some perspective on what happens.

1267
01:06:05,600 --> 01:06:09,500
So this is looking at the actual file that we wrote out in HEX in a

1268
01:06:09,500 --> 01:06:10,100
hex editor.

1269
01:06:10,100 --> 01:06:12,100
So we can just see what the actual data is.

1270
01:06:12,300 --> 01:06:15,900
You can kind of see that we got exactly what we expect, right?

1271
01:06:16,300 --> 01:06:19,100
Remember a you 32 is 4, bytes long.

1272
01:06:19,100 --> 01:06:23,800
So here are those for a b 1, 2, 3 4 and they are HAF, right?

1273
01:06:24,100 --> 01:06:26,800
Then we have the version number, which was also for B and it's just

1274
01:06:26,800 --> 01:06:27,400
set to 0.

1275
01:06:27,400 --> 01:06:29,300
So there are the 40 bytes.

1276
01:06:30,300 --> 01:06:32,600
And you can just go ahead and read these directly out, right?

1277
01:06:32,600 --> 01:06:37,100
Then we have the tag count, right?

1278
01:06:37,100 --> 01:06:39,400
That was in there as well and you can see.

1279
01:06:39,400 --> 01:06:41,500
Now remember, it's little endian, right?

1280
01:06:41,500 --> 01:06:46,800
So the lowest order thing comes first so that 0 D is, that's the tag

1281
01:06:46,800 --> 01:06:47,900
count, right?

1282
01:06:48,000 --> 01:06:51,000
If it was more, if the, if we had a lot more tags, you would see

1283
01:06:51,000 --> 01:06:52,600
numbers up in here as well, right?

1284
01:06:52,600 --> 01:06:55,300
But we only have a very small number of taxa far, right?

1285
01:06:55,300 --> 01:06:58,300
So, there's a tag count and you can just see that it, you know, it

1286
01:06:58,300 --> 01:06:59,900
getting written out here and then we wrote,

1287
01:07:00,000 --> 01:07:03,400
You know, the various these are the, this is like tiger a out here and

1288
01:07:03,400 --> 01:07:04,800
the asset type array, right?

1289
01:07:05,000 --> 01:07:08,000
And so that's all we're doing, you know, really, really

1290
01:07:08,000 --> 01:07:08,900
straightforward.

1291
01:07:09,100 --> 01:07:11,600
It's really just a question of taking the stuff in memory and writing

1292
01:07:11,600 --> 01:07:11,800
it out.

1293
01:07:11,800 --> 01:07:16,000
We're doing the simplest possible file format stuff and so that's

1294
01:07:16,000 --> 01:07:18,400
like, you know, that's all we're trying to accomplish right now.

1295
01:07:19,100 --> 01:07:21,800
Now, I don't actually remember how to get out of hexyl mode.

1296
01:07:23,100 --> 01:07:26,900
I remember it's you can't alt k-kill buffer.

1297
01:07:28,000 --> 01:07:28,900
Yes, thank you.

1298
01:07:29,600 --> 01:07:33,800
All right, so I guess we'll go ahead and go to questions.

1299
01:07:33,900 --> 01:07:38,800
So let me go ahead and start the Q&A and tomorrow, we can go ahead and

1300
01:07:38,800 --> 01:07:41,300
finish up writing those things, right?

1301
01:07:41,300 --> 01:07:46,100
So if you have questions, please pray.

1302
01:07:46,100 --> 01:07:50,400
Fix them with q: and so that I can see them.

1303
01:07:50,600 --> 01:07:55,400
And yeah, if you have a question about what we're doing, if you have

1304
01:07:55,400 --> 01:07:58,700
an off topic question, please save it for tomorrow's pretty stream.

1305
01:08:03,200 --> 01:08:06,200
Gaston, five, why is he positioned for a stream?

1306
01:08:06,200 --> 01:08:07,400
A bad idea.

1307
01:08:08,900 --> 01:08:12,700
So essentially, it's because it's hidden state.

1308
01:08:13,100 --> 01:08:17,899
That is easy to get wrong and you always should know where you're

1309
01:08:17,899 --> 01:08:19,000
actually are going to be.

1310
01:08:20,300 --> 01:08:22,899
So I'll give you a couple examples, right?

1311
01:08:24,200 --> 01:08:28,899
So, let's suppose I say, right?

1312
01:08:31,100 --> 01:08:37,399
You know, you know, chunk a right.

1313
01:08:37,500 --> 01:08:42,000
I'm just going to say right a, and we know that means chunk, and then

1314
01:08:42,000 --> 01:08:43,000
I'm going to say, right?

1315
01:08:44,000 --> 01:08:45,500
Be okay.

1316
01:08:46,000 --> 01:08:49,399
This is the stream position way of doing things, I say, write a I say

1317
01:08:49,399 --> 01:08:50,899
right, be right.

1318
01:08:52,500 --> 01:08:54,500
This is the bad way.

1319
01:08:55,300 --> 01:08:57,100
Here is the good way.

1320
01:08:58,200 --> 01:08:59,600
if I instead say right,

1321
01:09:00,200 --> 01:09:08,000
You know, location a a right location B.

1322
01:09:08,100 --> 01:09:09,700
Be okay.

1323
01:09:10,200 --> 01:09:13,300
So I'm saying this is good and this is bad, right?

1324
01:09:13,500 --> 01:09:14,800
And so the question is why?

1325
01:09:15,100 --> 01:09:20,399
Well the answer is this always works in all circumstances, no matter

1326
01:09:20,399 --> 01:09:21,500
what you want to do.

1327
01:09:21,700 --> 01:09:25,800
So if your API looks like this where you say, right the location and

1328
01:09:25,800 --> 01:09:27,100
the size, right?

1329
01:09:27,700 --> 01:09:29,100
This will always work.

1330
01:09:29,899 --> 01:09:36,200
This only works for single-threaded, very simplistic, use cases, and

1331
01:09:36,200 --> 01:09:37,500
I'll give you some examples.

1332
01:09:38,800 --> 01:09:44,600
So let's say, I want to have this be, you know, if I'm just exiting,

1333
01:09:44,600 --> 01:09:47,300
the simple basic single threaded, right?

1334
01:09:47,500 --> 01:09:51,200
So I come through and here is my file, right?

1335
01:09:51,200 --> 01:09:55,000
And I say, I want to write a and here's location a and I happen to

1336
01:09:55,000 --> 01:09:56,200
know the file pointer is pointing there.

1337
01:09:56,200 --> 01:09:58,700
So it writes in a and we're happy, right?

1338
01:09:59,100 --> 01:09:59,400
I then

1339
01:09:59,800 --> 01:10:03,700
And I see be and I'm like, okay be goes here and that happens to be

1340
01:10:03,700 --> 01:10:05,900
where I want to be and so it's all good, right?

1341
01:10:05,900 --> 01:10:07,100
That's the stream version.

1342
01:10:07,300 --> 01:10:09,600
That's what you want to have happen now.

1343
01:10:09,900 --> 01:10:13,700
Suppose, I now do something where I say, oh, you know what, I want to

1344
01:10:13,700 --> 01:10:15,600
queue up my rights, right?

1345
01:10:15,600 --> 01:10:18,900
I want to queue up where the rights are going to be, right?

1346
01:10:19,200 --> 01:10:21,600
And so these are going to get added to a queue.

1347
01:10:21,800 --> 01:10:24,700
So I go ahead and I add right a and I add right.

1348
01:10:24,700 --> 01:10:28,500
Be I say, you know, I do add and add.

1349
01:10:29,400 --> 01:10:33,100
Well the problem now is let's suppose that Q maybe that Q is an out of

1350
01:10:33,100 --> 01:10:34,400
order Q, right?

1351
01:10:34,500 --> 01:10:37,900
Maybe maybe this gets added such that it's going to pop off first.

1352
01:10:37,900 --> 01:10:41,200
So now what happens is, when they pop these things off, it pops off be

1353
01:10:41,200 --> 01:10:41,800
first, right?

1354
01:10:41,800 --> 01:10:45,100
It's like a stack, let's say so it pushes a, it pushes be, it pops

1355
01:10:45,100 --> 01:10:45,400
off.

1356
01:10:45,400 --> 01:10:49,300
Be, that means b gets written first at location, a witch and it's

1357
01:10:49,300 --> 01:10:49,700
longer.

1358
01:10:49,700 --> 01:10:52,900
So, who even knows where a ends up a ends up somewhere out here.

1359
01:10:53,000 --> 01:10:55,300
And now, I've got things in the wrong order and in the wrong place,

1360
01:10:55,500 --> 01:10:56,100
right?

1361
01:10:57,200 --> 01:10:57,900
So not good.

1362
01:10:58,200 --> 01:11:00,600
So already even in a single-threaded case.

1363
01:11:00,600 --> 01:11:04,300
If you queued, you'd already have to start storing this information.

1364
01:11:04,400 --> 01:11:08,300
So behind the scenes, if you did have a streaming concept it's going

1365
01:11:08,300 --> 01:11:11,200
to have to record where the stream at thought you were writing anyway,

1366
01:11:11,500 --> 01:11:11,700
right?

1367
01:11:11,700 --> 01:11:15,800
So that's just going to happen so that's going to happen.

1368
01:11:15,800 --> 01:11:18,600
So that's that's that right now.

1369
01:11:18,600 --> 01:11:21,600
Let's suppose it's multi-threaded because now things get even worse,

1370
01:11:21,600 --> 01:11:22,000
right?

1371
01:11:22,100 --> 01:11:25,400
If it's multi-threaded I don't even know what's going to happen here,

1372
01:11:25,400 --> 01:11:25,900
right?

1373
01:11:25,900 --> 01:11:26,900
So let's suppose

1374
01:11:27,000 --> 01:11:30,700
Close that my entire interface to the operating system?

1375
01:11:33,100 --> 01:11:36,000
I guess the other way to say it is in this case, I could fix this by

1376
01:11:36,000 --> 01:11:40,100
saying, okay all cues have to be first in first out, right?

1377
01:11:40,100 --> 01:11:41,400
And then this case would work, right?

1378
01:11:41,400 --> 01:11:44,700
I just guarantee that if I pushed a first, then a comes first and then

1379
01:11:44,700 --> 01:11:48,400
B and then I don't then I don't need to store this right.

1380
01:11:48,900 --> 01:11:52,400
But let's suppose that I then say, okay, we're going to have things be

1381
01:11:52,400 --> 01:11:53,800
multi-threaded right?

1382
01:11:56,700 --> 01:11:59,400
Yeah, because that would still allow me to do this, right?

1383
01:12:00,000 --> 01:12:01,200
Say, I want to fix that, right?

1384
01:12:01,200 --> 01:12:03,000
And I want to do something where it's multi-threaded.

1385
01:12:03,000 --> 01:12:06,100
So I don't know what the file handle is actually, where the streams

1386
01:12:06,100 --> 01:12:07,500
actually going to point, right?

1387
01:12:08,100 --> 01:12:08,700
I don't know.

1388
01:12:08,700 --> 01:12:11,200
So I want to be able to say, well, let's always make sure the file

1389
01:12:11,200 --> 01:12:13,700
handle points to where a is and always make sure the file handle

1390
01:12:13,700 --> 01:12:15,100
points to where B is right.

1391
01:12:15,200 --> 01:12:19,000
So, I write a thing that's like seek to location a.

1392
01:12:19,200 --> 01:12:24,300
Write a seek to location, B.

1393
01:12:24,400 --> 01:12:25,100
Right?

1394
01:12:25,300 --> 01:12:26,800
Be right.

1395
01:12:26,800 --> 01:12:29,800
So I'm saying well alright, you know, it's multi-threaded.

1396
01:12:30,000 --> 01:12:33,500
And so, I don't know you or, you know, I want to do these out of

1397
01:12:33,500 --> 01:12:34,500
order, right?

1398
01:12:34,500 --> 01:12:36,000
Or I don't know what order they're being done in.

1399
01:12:36,200 --> 01:12:40,300
So we're basically saying, oh, okay, I can emulate the good API by

1400
01:12:40,300 --> 01:12:43,500
just doing, you know, the Cyrano is it has seek and it has right?

1401
01:12:43,500 --> 01:12:45,700
So, I'll just, I'll seek to where I want to write.

1402
01:12:45,700 --> 01:12:48,300
And then, alright, I'll seek to where I want to write and then I'll

1403
01:12:48,300 --> 01:12:49,200
write, right?

1404
01:12:49,400 --> 01:12:52,500
Surely that will fix the problems that we were going to you know the

1405
01:12:52,500 --> 01:12:54,500
any problems that we were going to see because it makes sure that I'm

1406
01:12:54,500 --> 01:12:57,100
always at the location that I think I'm going to be at, right?

1407
01:12:57,500 --> 01:12:59,800
Well the problem is multi-threading totally breaks this

1408
01:13:00,000 --> 01:13:04,000
Because if you seek to here right and then you expect to write at that

1409
01:13:04,000 --> 01:13:06,000
location at any time.

1410
01:13:06,000 --> 01:13:07,900
If this was thread, be right?

1411
01:13:07,900 --> 01:13:09,200
Here's here's another thread.

1412
01:13:09,200 --> 01:13:12,400
I guess I'll do well I could do thread just to avoid confusion.

1413
01:13:12,500 --> 01:13:14,700
Here's thread to and here's the red one.

1414
01:13:16,200 --> 01:13:20,600
If thread one executes, it seek, but then gets preempted and thread to

1415
01:13:20,600 --> 01:13:23,000
starts, executing executes, its seek.

1416
01:13:23,100 --> 01:13:24,400
Then does the right?

1417
01:13:24,800 --> 01:13:28,800
And then we pop back to this guy at some point, and he tries to do his

1418
01:13:28,800 --> 01:13:30,100
right, his right?

1419
01:13:30,100 --> 01:13:33,100
Will this seek doesn't matter anymore because it got overwritten by

1420
01:13:33,100 --> 01:13:34,300
this one, right?

1421
01:13:34,800 --> 01:13:36,700
And so, it's absolutely critical.

1422
01:13:36,900 --> 01:13:41,800
That the Sikhs always be bundled directly with the right in that low

1423
01:13:41,800 --> 01:13:44,400
in the, in the actual part of the API that actually does the

1424
01:13:44,400 --> 01:13:45,800
operation, right?

1425
01:13:47,200 --> 01:13:51,200
Because otherwise, no matter what you do, if you have to do this at

1426
01:13:51,200 --> 01:13:55,700
some point, you will break in a multi-threaded scenario, right?

1427
01:13:56,400 --> 01:13:57,200
So that's awful.

1428
01:13:57,200 --> 01:13:58,200
It's just really, really bad.

1429
01:13:58,200 --> 01:14:00,300
Never never never ever, ever API do that?

1430
01:14:00,300 --> 01:14:00,900
It's awful.

1431
01:14:01,300 --> 01:14:07,400
Now, if you then want to, if you want streaming Behavior higher up in

1432
01:14:07,400 --> 01:14:11,400
the API, you can always make a little thing that's like, you know,

1433
01:14:11,600 --> 01:14:12,500
struct

1434
01:14:13,500 --> 01:14:15,300
my stream, right?

1435
01:14:15,400 --> 01:14:22,700
That's like you 64 position, you know, file handle, or whatever it

1436
01:14:22,700 --> 01:14:22,900
right.

1437
01:14:22,900 --> 01:14:25,200
I mean, you know, file,

1438
01:14:26,400 --> 01:14:28,300
File or whatever, right?

1439
01:14:28,900 --> 01:14:31,000
And you just issue your rights through this thing.

1440
01:14:31,100 --> 01:14:35,600
It looks at what the position was issues the proper right in this

1441
01:14:35,600 --> 01:14:40,000
format, right to the, to the, you know, that needs to happen and then

1442
01:14:40,000 --> 01:14:41,900
increments position by the amount.

1443
01:14:41,900 --> 01:14:46,300
And now, you know, that because this is unique to your thread, you

1444
01:14:46,300 --> 01:14:49,300
will never have to deal with the other problem, right?

1445
01:14:50,500 --> 01:14:53,600
So, that's the right way to do it in my opinion, because then,

1446
01:14:55,500 --> 01:14:59,000
another way to say this would be, if you do it this way, it means only

1447
01:14:59,000 --> 01:14:59,900
people who actually

1448
01:15:00,000 --> 01:15:03,500
We care about the streaming part ever deal with it.

1449
01:15:04,200 --> 01:15:07,300
Whereas if you do it this way at your lowest level, what that means is

1450
01:15:07,300 --> 01:15:10,600
that most people who don't really care about streaming because most of

1451
01:15:10,600 --> 01:15:13,200
the time you're loading chunks out of a file in a multi-threaded way

1452
01:15:13,200 --> 01:15:15,500
and I'm getting this back this batch whatever, right?

1453
01:15:16,800 --> 01:15:19,400
If you do it this way, what you then we'll have to do, is you'll have

1454
01:15:19,400 --> 01:15:22,500
to proliferate the number of operating system handles.

1455
01:15:22,700 --> 01:15:26,400
You actually have, if your operating system works this way, right?

1456
01:15:26,400 --> 01:15:30,600
Because if your operating system only allows you to do seek, right?

1457
01:15:30,600 --> 01:15:34,800
That means that every thread has to have a separate actual operating

1458
01:15:34,800 --> 01:15:38,800
system handle to the file because there's no other way to make it

1459
01:15:38,800 --> 01:15:41,200
thread safe, if you don't do that, right?

1460
01:15:41,300 --> 01:15:45,100
Whereas, if your operating system API is just always,

1461
01:15:46,400 --> 01:15:48,800
+ + contents, right?

1462
01:15:49,500 --> 01:15:52,900
Then, all you have to do is it's a few places that you actually want

1463
01:15:52,900 --> 01:15:53,300
streaming.

1464
01:15:53,300 --> 01:15:55,300
You just implement it right?

1465
01:15:55,400 --> 01:15:58,900
And then everything is nice and clean and you only need one handle to

1466
01:15:58,900 --> 01:15:59,300
the file.

1467
01:15:59,300 --> 01:15:59,500
No matter.

1468
01:15:59,500 --> 01:16:01,000
How many people are accessing it, right.

1469
01:16:01,000 --> 01:16:02,700
You never need multiple OS handles.

1470
01:16:03,300 --> 01:16:07,500
So yeah, so I hate I really hate this.

1471
01:16:08,300 --> 01:16:09,800
I never ever like this.

1472
01:16:10,300 --> 01:16:14,300
And I almost always never abandon almost never actually use much of

1473
01:16:14,300 --> 01:16:15,600
this sort of thing in.

1474
01:16:15,600 --> 01:16:16,200
Exactly.

1475
01:16:16,300 --> 01:16:19,400
This way, I find that when I actually do want to do something like

1476
01:16:19,400 --> 01:16:21,600
this, usually wants to be more complicated anyway.

1477
01:16:21,800 --> 01:16:25,900
So the crappy one that's built into the OS for me, I ever want, I

1478
01:16:25,900 --> 01:16:26,700
don't want that one.

1479
01:16:26,700 --> 01:16:28,700
It's not good, right?

1480
01:16:28,700 --> 01:16:32,000
So I find that it's I even typically even if the OS has the streaming,

1481
01:16:32,000 --> 01:16:35,200
I have to duplicate that streaming myself because I want more

1482
01:16:35,200 --> 01:16:36,800
abilities than it gave me or whatever.

1483
01:16:36,800 --> 01:16:38,700
And I want where I want to be more convenient, right?

1484
01:16:38,700 --> 01:16:42,200
If I'm if I'm going through the trouble of making this API where I'm

1485
01:16:42,200 --> 01:16:45,700
going to, I'm saying that having the ability to talk about things

1486
01:16:45,700 --> 01:16:46,100
lining up.

1487
01:16:46,400 --> 01:16:47,500
Certain ways is beneficial.

1488
01:16:47,500 --> 01:16:49,400
I typically want more than what the OS gives me.

1489
01:16:49,600 --> 01:16:50,700
So hopefully that gives you some

1490
01:16:54,700 --> 01:16:58,700
some sort of what's around looking for perspective on just why I have

1491
01:16:58,700 --> 01:16:59,800
an aversion to it.

1492
01:17:01,900 --> 01:17:03,700
Are you concerned that trusting the file format?

1493
01:17:03,700 --> 01:17:05,100
Could have security concerns each you.

1494
01:17:05,100 --> 01:17:07,600
Someone could say they've made some modded assets and give out a

1495
01:17:07,600 --> 01:17:11,300
specially crafted H file, that runs arbitrary code.

1496
01:17:11,800 --> 01:17:14,600
No, I am not really concerned about that.

1497
01:17:15,100 --> 01:17:15,900
Pretty much at all.

1498
01:17:19,500 --> 01:17:20,800
and the reason for that,

1499
01:17:22,000 --> 01:17:27,500
Is this is not like this code is not going to be designed for

1500
01:17:27,500 --> 01:17:28,900
security, right?

1501
01:17:28,900 --> 01:17:37,000
Like, we are not going to try to make this a mission-critical kind of

1502
01:17:37,000 --> 01:17:42,800
app, so it's just assumed that, you know, if you, if you are for some

1503
01:17:42,800 --> 01:17:47,600
reason, running handmade hero with elevated privileges on your machine

1504
01:17:47,600 --> 01:17:51,100
or whatever, you know, all bets are off.

1505
01:17:51,100 --> 01:17:51,400
I have no.

1506
01:17:51,800 --> 01:17:54,000
It's going to do, it's not my responsibility, it's a game.

1507
01:17:54,000 --> 01:17:59,600
It's not you know meant it's not going to be put through the kind of

1508
01:18:00,100 --> 01:18:04,700
The analysis that you would need to do in order to have that be true,

1509
01:18:04,800 --> 01:18:05,400
right?

1510
01:18:07,300 --> 01:18:09,100
So yeah, so I'm not concerned about that.

1511
01:18:09,100 --> 01:18:12,400
About the fuzz testing aspects of it if that makes sense.

1512
01:18:13,000 --> 01:18:21,700
What we and what I would suspect would be the case in general is that

1513
01:18:26,000 --> 01:18:27,200
I guess what I would say about that is

1514
01:18:28,600 --> 01:18:33,400
It should be the case, like, let's say, Microsoft was competent,

1515
01:18:33,600 --> 01:18:34,300
right?

1516
01:18:34,600 --> 01:18:37,200
It should be the case that you would never even remotely.

1517
01:18:37,200 --> 01:18:39,800
Have to think about what you just said, right?

1518
01:18:40,000 --> 01:18:41,300
Because it's a game.

1519
01:18:42,600 --> 01:18:46,200
It doesn't need to send email, it doesn't even need to connect to the

1520
01:18:46,200 --> 01:18:46,900
internet.

1521
01:18:47,400 --> 01:18:51,100
But you know, whatever it doesn't need to write to anything on the

1522
01:18:51,100 --> 01:18:54,400
hard drive other than a small area to do save files, right?

1523
01:18:54,700 --> 01:18:58,400
It needs to do is essentially nothing and it would have been trivial

1524
01:18:58,400 --> 01:19:03,500
for Microsoft for many years to make Windows, such that it could run a

1525
01:19:03,500 --> 01:19:05,600
game with no risk to the user.

1526
01:19:06,100 --> 01:19:09,500
It would have actually been very, very easy for them to do that.

1527
01:19:09,800 --> 01:19:12,100
Pretty much the only thing that isn't

1528
01:19:12,400 --> 01:19:16,000
About that is the GPU security part of it, right?

1529
01:19:17,600 --> 01:19:20,700
But they have chosen to make it almost the opposite of that they

1530
01:19:20,700 --> 01:19:23,000
basically chosen to make it so that you can't really even install a

1531
01:19:23,000 --> 01:19:23,200
game.

1532
01:19:23,200 --> 01:19:25,200
Most of the time without having administrator privileges and you,

1533
01:19:25,200 --> 01:19:27,600
oftentimes have to run it with elevated privileges anyway.

1534
01:19:29,100 --> 01:19:32,500
And so it's kind of sad that this is even something you have to think

1535
01:19:32,500 --> 01:19:35,700
about because what you're talking about could easily happen.

1536
01:19:35,700 --> 01:19:39,400
Like most games can be given data files, that would allow them to

1537
01:19:39,400 --> 01:19:42,300
execute arbitrary code like pretty much all of them, right?

1538
01:19:43,600 --> 01:19:46,000
But I really just don't think that is the game developers

1539
01:19:46,000 --> 01:19:46,700
responsibilities.

1540
01:19:46,700 --> 01:19:49,200
That is what an operating system is supposed to do.

1541
01:19:50,200 --> 01:19:55,100
And I am not really willing to spend a ton of time cleaning up after

1542
01:19:55,100 --> 01:19:59,700
Microsoft's fault because they're the ones who charged you $199 for

1543
01:19:59,700 --> 01:20:01,400
software whose job.

1544
01:20:01,400 --> 01:20:07,600
It was to make sure you did not have to trust random game developers

1545
01:20:07,600 --> 01:20:09,300
to be Security, Experts.

1546
01:20:09,600 --> 01:20:12,800
And they are the ones who should be fixing this, right?

1547
01:20:13,200 --> 01:20:16,800
And I think it's unrealistic to expect game developers in general, to

1548
01:20:16,800 --> 01:20:19,400
even have the security expertise.

1549
01:20:19,400 --> 01:20:23,600
Necessary to know whether they've covered all the angles, could we do

1550
01:20:23,700 --> 01:20:27,300
some work, some reasonable work, to try and Bulletproof the handmade

1551
01:20:27,300 --> 01:20:29,300
hero asset, file against that kind of thing.

1552
01:20:29,300 --> 01:20:29,800
Yes.

1553
01:20:31,000 --> 01:20:36,400
Should we consider ourselves qualified to actually say that?

1554
01:20:36,400 --> 01:20:39,100
It can that it is, you know, bulletproof.

1555
01:20:39,100 --> 01:20:39,500
Absolutely.

1556
01:20:39,500 --> 01:20:41,700
Not, I'm not a security researcher.

1557
01:20:43,200 --> 01:20:45,800
I have no idea all the things that could be happening there.

1558
01:20:46,200 --> 01:20:51,000
And so, you know, to really do a thorough security audit on our code,

1559
01:20:51,000 --> 01:20:53,800
I think, is way out of the question and definitely not something that

1560
01:20:53,800 --> 01:20:59,600
I would ever want to undertake certainly, it's way beyond my sort of

1561
01:21:00,200 --> 01:21:01,300
Area of expertise.

1562
01:21:01,400 --> 01:21:02,000
Thank sense.

1563
01:21:10,100 --> 01:21:12,400
What is the main difference between using a search in your code and

1564
01:21:12,400 --> 01:21:15,300
writing separate test functions programs, that check your results and

1565
01:21:15,300 --> 01:21:16,800
when do you choose one over the other?

1566
01:21:17,800 --> 01:21:22,500
So asserts are the preferred method typically in game development

1567
01:21:22,500 --> 01:21:27,100
because most of the time in game development, it is difficult or

1568
01:21:27,100 --> 01:21:32,600
impossible to write actual inclusive tests, like tests that actually

1569
01:21:32,600 --> 01:21:35,000
cover, all of the things you might want to do.

1570
01:21:36,200 --> 01:21:38,500
So most of the time in game development, you'll be dealing with

1571
01:21:38,500 --> 01:21:42,200
asserts because writing separate test code is infeasible.

1572
01:21:44,200 --> 01:21:47,000
It's not to say that you couldn't write separate Tesco that test some

1573
01:21:47,000 --> 01:21:51,100
things but those things are usually the least interesting things

1574
01:21:51,100 --> 01:21:53,900
they're going to be the things that are least likely to be the bugs

1575
01:21:53,900 --> 01:21:55,200
that you will actually have trouble.

1576
01:21:55,200 --> 01:21:55,700
Finding

1577
01:21:56,800 --> 01:21:59,200
and so a search are a lot more valuable because you could put them

1578
01:21:59,200 --> 01:22:01,700
everywhere and they catch bugs at runtime.

1579
01:22:01,700 --> 01:22:05,800
When things are actually happening in real scenarios, not fake

1580
01:22:05,800 --> 01:22:09,600
scenarios that you've created in your test programs to try to see if

1581
01:22:09,600 --> 01:22:10,500
you can find bugs.

1582
01:22:11,700 --> 01:22:14,400
Now, when you would actually use a test function, it's when you would

1583
01:22:14,400 --> 01:22:20,200
like to bulletproof something in anticipation that the bugs in it will

1584
01:22:20,200 --> 01:22:21,600
be subtle or hard-to-find.

1585
01:22:21,700 --> 01:22:25,200
So, for example, let's suppose that what we wanted to do was really

1586
01:22:25,200 --> 01:22:27,300
make sure our mixer didn't have any bugs in it.

1587
01:22:27,300 --> 01:22:30,400
Well, we could easily write some test code that would pass a bunch of

1588
01:22:30,400 --> 01:22:33,600
different kinds of buffers to the mixing code to see if we can get it

1589
01:22:33,600 --> 01:22:34,100
to fail.

1590
01:22:35,000 --> 01:22:40,100
And what I would point out there is we probably would still use the

1591
01:22:40,100 --> 01:22:42,800
assertions in a lot of cases to find where the bugs are.

1592
01:22:43,000 --> 01:22:47,000
And so, the test code, in some sense is almost there to try to make

1593
01:22:47,000 --> 01:22:48,400
the asserts happen, right?

1594
01:22:48,400 --> 01:22:51,600
We're trying to force the code into a situation where it's going to

1595
01:22:51,600 --> 01:22:53,300
hit uncomfortable places for it.

1596
01:22:53,300 --> 01:22:56,400
That are not exercise that frequency frequently that will cause that

1597
01:22:56,400 --> 01:22:57,500
assertion, right.

1598
01:22:59,400 --> 01:23:03,000
examples of places where I have written test code in the past memory,

1599
01:23:03,000 --> 01:23:03,800
allocators,

1600
01:23:05,200 --> 01:23:09,900
Database queries to use the term loosely like, like like the actual

1601
01:23:09,900 --> 01:23:12,100
code that implements handling a date.

1602
01:23:12,100 --> 01:23:17,300
It like the database code basically is when we put it math functions

1603
01:23:17,900 --> 01:23:20,700
like when we Implement a math function, let's say we were to

1604
01:23:20,700 --> 01:23:27,200
implement, you know, our own cosine, you know, verifying that it

1605
01:23:27,200 --> 01:23:30,200
actually lines up with the cosine that we think that's a very common

1606
01:23:30,200 --> 01:23:31,400
place to write test code.

1607
01:23:32,400 --> 01:23:34,500
So there are places and we might we might do that on.

1608
01:23:34,700 --> 01:23:36,100
Made here a couple times as well.

1609
01:23:43,400 --> 01:23:46,600
Well, multiple threads pose any problems to reading the assets file.

1610
01:23:46,800 --> 01:23:51,600
No, and that's one of the reasons why I like I was saying I like to

1611
01:23:51,600 --> 01:23:54,400
make things be always talking about reading from a particular

1612
01:23:54,400 --> 01:23:55,100
location.

1613
01:23:55,300 --> 01:23:59,100
So when we have threads that will read from the asset file, they will

1614
01:23:59,100 --> 01:23:59,800
always issue.

1615
01:24:00,000 --> 01:24:02,500
Used to the operating system that are like I need to read this

1616
01:24:02,800 --> 01:24:05,400
location for this much memory, right?

1617
01:24:06,700 --> 01:24:07,700
For this much size.

1618
01:24:12,800 --> 01:24:14,600
It's C++ that introspection with this.

1619
01:24:14,600 --> 01:24:17,100
Be a place where you would use it to introspect the types.

1620
01:24:17,100 --> 01:24:18,800
You want to include in the asset pack.

1621
01:24:19,600 --> 01:24:23,400
Probably not like you're you're right in that.

1622
01:24:23,600 --> 01:24:29,500
This is the type of code that maybe you might use introspection for in

1623
01:24:29,500 --> 01:24:32,900
the sense that like writing things to disk write, is a typical place

1624
01:24:32,900 --> 01:24:35,900
where you want to stretch code for our purposes.

1625
01:24:35,900 --> 01:24:36,500
I

1626
01:24:38,700 --> 01:24:42,000
I've kind of architected it so that we get a ton of Leverage from a

1627
01:24:42,000 --> 01:24:43,500
very small number of things.

1628
01:24:43,700 --> 01:24:47,400
So we really just have tags assets and asset types and they're so

1629
01:24:47,400 --> 01:24:51,100
simple that any code that you might use introspection for is probably

1630
01:24:51,100 --> 01:24:52,200
just going to be dead weight.

1631
01:24:53,000 --> 01:24:57,000
So the time that what you're talking about would come into fruition a

1632
01:24:57,000 --> 01:25:01,200
little bit more would be like let's say that this was not going to be

1633
01:25:01,200 --> 01:25:05,600
a game that was procedurally generated and it said it was going to be

1634
01:25:05,600 --> 01:25:07,500
a game where it was very heavily authored.

1635
01:25:07,500 --> 01:25:08,400
So we were thinking they're gonna be

1636
01:25:08,600 --> 01:25:10,600
Of level designers doing a lot of level design.

1637
01:25:11,100 --> 01:25:14,600
So we've got all of these things of like oh there are traps and traps

1638
01:25:14,600 --> 01:25:19,200
.22 script code that runs on the Trap which acts as think right?

1639
01:25:19,200 --> 01:25:23,700
You might start to have a proliferation of structured stored types.

1640
01:25:25,200 --> 01:25:29,700
And at that point you can leverage introspection to take some of the

1641
01:25:29,700 --> 01:25:32,000
heat off you for writing that file IO code.

1642
01:25:32,400 --> 01:25:35,700
In our case the file a Coke is gonna be so simple that while you could

1643
01:25:35,700 --> 01:25:37,400
have used some introspection for it.

1644
01:25:37,500 --> 01:25:41,300
It's probably just not going to save you that much time in practice,

1645
01:25:41,300 --> 01:25:41,900
right?

1646
01:25:42,100 --> 01:25:44,600
And so yeah just to answer a question there.

1647
01:25:44,600 --> 01:25:47,300
It's like what you're saying is totally right.

1648
01:25:47,300 --> 01:25:48,600
It's just in our game.

1649
01:25:48,600 --> 01:25:51,400
We've kind of just don't part of it.

1650
01:25:51,400 --> 01:25:54,600
That's the procedural generation aspect of it and because we're smart

1651
01:25:54,600 --> 01:25:54,900
about it.

1652
01:25:55,000 --> 01:25:58,500
A smart about how we organize things, we just don't have that much

1653
01:25:58,500 --> 01:26:03,200
work to do here, but it is the kind of a place where in a game that

1654
01:26:03,200 --> 01:26:10,100
needed more from its backing store where you were, yes, you absolutely

1655
01:26:10,100 --> 01:26:13,600
could benefit from the C++ having intersection if it did.

1656
01:26:17,500 --> 01:26:20,400
Are there any specific times your stream start and end?

1657
01:26:20,600 --> 01:26:20,900
Yeah.

1658
01:26:20,900 --> 01:26:27,000
Actually, there are if you go to handmade hero dot-org, the Tweet bot,

1659
01:26:27,400 --> 01:26:28,100
that's there.

1660
01:26:28,200 --> 01:26:32,400
You can click on tweets, you can either subscribe to this or just

1661
01:26:32,400 --> 01:26:33,000
check it.

1662
01:26:33,600 --> 01:26:39,200
And you can see when the way that it works at the beginning of the

1663
01:26:39,200 --> 01:26:42,800
week, it will show you the schedule and that will tell you when it

1664
01:26:42,800 --> 01:26:43,700
will be live.

1665
01:26:44,400 --> 01:26:46,600
And usually, what we do is we're on stream anywhere from

1666
01:26:46,900 --> 01:26:50,600
Five to 30 minutes beforehand just kind of hanging out and chatting.

1667
01:26:51,200 --> 01:26:54,200
But then at the scheduled start time, here we usually try to start

1668
01:26:54,200 --> 01:26:59,100
programming sometime around there and you can also see that during,

1669
01:26:59,200 --> 01:26:59,900
you know, each

1670
01:27:00,100 --> 01:27:01,700
A it will send out a reminder.

1671
01:27:01,700 --> 01:27:05,100
So if you just wondering what the stream is for that day, it typically

1672
01:27:05,100 --> 01:27:07,700
there's a tweet that will tell you that and so that's usually the

1673
01:27:07,700 --> 01:27:11,900
easiest way to know if you're just on the web or whatever.

1674
01:27:17,600 --> 01:27:20,500
Why not just read the entire file in as a string and parse it.

1675
01:27:20,500 --> 01:27:23,200
As you please, then do the same for writing.

1676
01:27:24,000 --> 01:27:26,300
So for writing anything goes.

1677
01:27:26,300 --> 01:27:28,300
And like I said, we're not really concerned with writing the asset

1678
01:27:28,300 --> 01:27:31,200
file, we're just going to assume that we've spect an asset file.

1679
01:27:31,200 --> 01:27:34,600
And there's some thing that will produce an asset file in that format,

1680
01:27:34,600 --> 01:27:35,200
right?

1681
01:27:35,500 --> 01:27:37,700
And like I said, I'll take care of bundling all the assets that we

1682
01:27:37,700 --> 01:27:39,900
actually have up and writing them out into the file.

1683
01:27:39,900 --> 01:27:41,800
And that's how we'll distribute the artists that's for hitting here

1684
01:27:41,800 --> 01:27:42,300
anyway.

1685
01:27:43,800 --> 01:27:46,900
So writing doesn't matter, do whatever you want, it doesn't you can be

1686
01:27:46,900 --> 01:27:47,600
super inefficient.

1687
01:27:47,600 --> 01:27:48,400
It can run overnight.

1688
01:27:48,400 --> 01:27:49,600
Who cares, right?

1689
01:27:51,100 --> 01:27:53,600
If you're actually if you're doing a game that's developed in a sort

1690
01:27:53,600 --> 01:27:56,800
of different way than we're doing it here like where you have a lot of

1691
01:27:56,800 --> 01:27:59,900
you want to do rapid art, turn around which we don't you know,

1692
01:28:00,000 --> 01:28:03,200
yangshin and I don't even work in the same office, right?

1693
01:28:04,800 --> 01:28:09,900
So there's no such thing as fast asset turn around there and and she

1694
01:28:09,900 --> 01:28:11,800
you know kind of does it as a Contracting job.

1695
01:28:11,800 --> 01:28:12,900
She doesn't run the game or anything.

1696
01:28:13,100 --> 01:28:15,300
Because we don't have a game to run yet because we're doing it in this

1697
01:28:15,300 --> 01:28:16,600
sort of weird our night things.

1698
01:28:16,600 --> 01:28:19,800
There's all these reasons why we're a little bit different, it's the

1699
01:28:19,800 --> 01:28:23,900
nature of the project but you might care about how assets got into the

1700
01:28:23,900 --> 01:28:24,800
game a little bit differently.

1701
01:28:24,800 --> 01:28:27,400
If you're trying to do fast asset, turn around, but what I would point

1702
01:28:27,400 --> 01:28:30,600
out but there is usually the way you handle that is you have a special

1703
01:28:30,600 --> 01:28:33,100
mechanism for handling the fast asset turn around because you want to

1704
01:28:33,100 --> 01:28:34,600
be as fast as possible.

1705
01:28:34,700 --> 01:28:38,000
So, typically, when you're talking about optimizing, the writing part

1706
01:28:38,000 --> 01:28:38,600
of things,

1707
01:28:39,500 --> 01:28:41,900
You end up having a separate thing where you're right out of band

1708
01:28:41,900 --> 01:28:42,200
data.

1709
01:28:42,200 --> 01:28:45,800
Like you know it'll just grab Junctions PSD file directly and update

1710
01:28:45,800 --> 01:28:47,600
the Assets in place in memory or something.

1711
01:28:47,900 --> 01:28:51,200
You wouldn't repack it into the asset file to do fast turnaround for

1712
01:28:51,200 --> 01:28:51,300
her.

1713
01:28:51,300 --> 01:28:55,200
So that's that's a whole separate wing of discussion.

1714
01:28:55,500 --> 01:28:56,700
That's not relevant.

1715
01:28:56,700 --> 01:28:58,500
So I'm just going to tackle the part of your question.

1716
01:28:58,500 --> 01:28:59,500
It's about reading.

1717
01:28:59,900 --> 01:29:02,300
And you said, why not just read in the entire file as a string and

1718
01:29:02,300 --> 01:29:03,500
parse it as you please?

1719
01:29:03,700 --> 01:29:08,100
The answer is because the file is going to be many gigabytes long.

1720
01:29:10,700 --> 01:29:11,300
Right?

1721
01:29:12,400 --> 01:29:15,300
We it may be bigger than the memory of the machine.

1722
01:29:16,200 --> 01:29:17,500
It could be a queen who knows?

1723
01:29:17,600 --> 01:29:21,200
We want to support a 32 gigabyte asset file.

1724
01:29:21,300 --> 01:29:25,600
We want to support a Grand Theft Auto sized asset footprint, right?

1725
01:29:27,200 --> 01:29:28,200
Will we ever have that?

1726
01:29:28,200 --> 01:29:32,300
I don't know, but we want to support it and so there's no such thing

1727
01:29:32,300 --> 01:29:32,900
as reading it in.

1728
01:29:32,900 --> 01:29:35,300
As a string, like that's totally off the table, you know?

1729
01:29:35,300 --> 01:29:37,600
There's no question that's not going to happen, right?

1730
01:29:37,900 --> 01:29:40,100
And so what we want to do is have an asset family, just has some

1731
01:29:40,100 --> 01:29:42,200
binary data up front that we can just flat load.

1732
01:29:42,800 --> 01:29:45,500
And that that binary data that we flat load will be, you know, two,

1733
01:29:45,500 --> 01:29:47,200
three megabytes tops.

1734
01:29:47,500 --> 01:29:49,400
That just is a giant thing.

1735
01:29:49,400 --> 01:29:52,400
That tells us everything about all the assets without actually,

1736
01:29:52,400 --> 01:29:55,000
including the data for the assets, which is the big part, right?

1737
01:29:55,000 --> 01:29:56,000
The actual bitmaps.

1738
01:29:56,000 --> 01:29:56,800
The actual sounds

1739
01:29:57,000 --> 01:29:57,500
Are not there.

1740
01:29:58,000 --> 01:29:59,800
So it's just that, that's that header.

1741
01:30:00,000 --> 01:30:00,600
The arrays.

1742
01:30:01,200 --> 01:30:06,000
We grab that in and then that tells us where we find anything that we

1743
01:30:06,000 --> 01:30:06,500
need.

1744
01:30:07,500 --> 01:30:10,400
And so then what we do is remember we wrote an asset streaming system,

1745
01:30:10,400 --> 01:30:14,100
our game already streams assets, so all we then need to do is have the

1746
01:30:14,100 --> 01:30:19,100
asset streaming system will just now use that little directory

1747
01:30:19,200 --> 01:30:21,100
whenever it says, oh, I need this asset.

1748
01:30:21,100 --> 01:30:23,600
It will just go jump into that part of the file.

1749
01:30:23,600 --> 01:30:26,800
Grab just the piece that needs and continue running.

1750
01:30:27,600 --> 01:30:30,900
And so, that way we can have arbitrarily large files.

1751
01:30:30,900 --> 01:30:34,500
They will always be instantaneous, no, loading times, no nothing.

1752
01:30:34,500 --> 01:30:37,000
It will be just be totally perfect streaming all the time.

1753
01:30:38,000 --> 01:30:39,000
And that's what we want.

1754
01:30:44,100 --> 01:30:46,400
Another option is to memory map the file and then do as you will

1755
01:30:46,400 --> 01:30:48,300
although they may not work on other consoles I guess.

1756
01:30:48,300 --> 01:30:48,500
Okay.

1757
01:30:48,500 --> 01:30:50,900
So the reason you don't want a memory map of file is you can no longer

1758
01:30:50,900 --> 01:30:51,900
run in 32 bit.

1759
01:30:52,600 --> 01:30:56,900
So memory mapping a file requires that you're able to actually map the

1760
01:30:56,900 --> 01:31:01,300
whole file into memory and on a 32-bit processor.

1761
01:31:01,500 --> 01:31:05,300
So on people who are running say Windows XP or running Windows 7, 32

1762
01:31:05,300 --> 01:31:10,600
bit, which admittedly is a dwindling portion of the folks but you know

1763
01:31:10,600 --> 01:31:13,600
again if we poured the Raspberry Pi it ain't dwindling potentially.

1764
01:31:13,800 --> 01:31:16,800
Yeah, you know, point being it's less and less people, unless you're

1765
01:31:16,800 --> 01:31:21,400
talking about say China, China runs a huge number of XP machines and

1766
01:31:21,400 --> 01:31:22,100
they're all 32 bit.

1767
01:31:22,100 --> 01:31:23,500
So your depends who you're targeting.

1768
01:31:23,500 --> 01:31:26,800
But the point is if you rely on memory mapping, that means that your

1769
01:31:26,800 --> 01:31:30,500
memory that your file can is really only going to be able to be, you

1770
01:31:30,500 --> 01:31:32,200
know, a gigabyte or something or less.

1771
01:31:32,200 --> 01:31:36,300
It's got to be, it can't really be very large because it's got to fit

1772
01:31:36,300 --> 01:31:39,000
in the actual memory space of the machine.

1773
01:31:39,800 --> 01:31:43,500
On a 64-bit machine, you have plenty of address space so you can

1774
01:31:43,500 --> 01:31:44,200
memory map.

1775
01:31:44,200 --> 01:31:46,900
The biggest file that you ever wanted because of course it's just

1776
01:31:46,900 --> 01:31:48,200
memory mapping the file.

1777
01:31:48,200 --> 01:31:49,800
It's not loading the whole file, right?

1778
01:31:49,800 --> 01:31:50,700
And so that's fine.

1779
01:31:51,200 --> 01:31:54,000
And you always have plenty of address based on 64-bit but the reason

1780
01:31:54,000 --> 01:31:56,400
that's a memory map is 32-bit, it doesn't work.

1781
01:31:56,500 --> 01:31:59,400
Maybe someday everything will always be 64 bit and always yellow

1782
01:31:59,400 --> 01:32:00,100
memory mapping that way.

1783
01:32:00,100 --> 01:32:00,900
And you can do that.

1784
01:32:01,700 --> 01:32:05,100
Second reason not to memory map, you have no idea when the operating

1785
01:32:05,100 --> 01:32:08,600
system will choose to put pull that stuff in or what the cost may be

1786
01:32:08,600 --> 01:32:09,500
to doing that, right?

1787
01:32:09,700 --> 01:32:13,600
So being able to, so if you think about how you have to do that, you

1788
01:32:13,600 --> 01:32:16,200
have to have a background thread where the background thread is going

1789
01:32:16,200 --> 01:32:20,100
to go poke the memory and that stall until the operation gets it in

1790
01:32:20,100 --> 01:32:20,500
there, right?

1791
01:32:20,500 --> 01:32:21,900
That's like how it's going to be structured.

1792
01:32:22,400 --> 01:32:25,700
That's just a lot more implicit than I want it to be, but I'd rather

1793
01:32:25,700 --> 01:32:28,800
be a just be able to issue the operating system, a stream of like,

1794
01:32:28,800 --> 01:32:31,000
load this block, this block, this block, this block, this block, let

1795
01:32:31,000 --> 01:32:34,200
me know when they come in right and that's just really nice and clean

1796
01:32:34,200 --> 01:32:37,300
and it's it's telling you is what I actually want to do rather than

1797
01:32:37,300 --> 01:32:39,500
memory mapped files where it's just kind of implicit what I

1798
01:32:39,600 --> 01:32:40,000
to do.

1799
01:32:40,000 --> 01:32:43,900
And it also gives me control over what amount of memory is actually

1800
01:32:43,900 --> 01:32:48,000
used to store stuff from the file because windows will.

1801
01:32:48,000 --> 01:32:50,700
Then just start saving if it's memory map that file.

1802
01:32:50,700 --> 01:32:53,600
It will start randomly making decisions about what gets evicted.

1803
01:32:53,600 --> 01:32:55,500
It might start using up memory.

1804
01:32:55,500 --> 01:32:59,500
I actually wanted for me and make that for the file and swap out.

1805
01:33:00,000 --> 01:33:03,200
I cared about him a hero when I didn't need it to store that stuff.

1806
01:33:03,200 --> 01:33:03,600
Right.

1807
01:33:03,600 --> 01:33:04,800
So we lose a lot of control.

1808
01:33:04,800 --> 01:33:07,200
So so I would really recommend against memory mapped files.

1809
01:33:07,200 --> 01:33:10,200
I don't think they're very good idea unless you have a really clear

1810
01:33:10,200 --> 01:33:13,500
plan of what you think you want to do with them and why you think

1811
01:33:13,500 --> 01:33:15,100
they're going to be good, right?

1812
01:33:21,000 --> 01:33:24,200
Do the Molly rocket artists, ever interact with the asset Packer or is

1813
01:33:24,200 --> 01:33:24,400
it a no?

1814
01:33:24,700 --> 01:33:27,400
Is it automated somehow if they immediately want to preview how their

1815
01:33:27,400 --> 01:33:28,300
artworks and game?

1816
01:33:28,900 --> 01:33:33,400
So that's actually separate thing the at Molly rocket.

1817
01:33:33,400 --> 01:33:34,900
It's a totally different code base.

1818
01:33:34,900 --> 01:33:36,700
So it's a very different thing.

1819
01:33:37,400 --> 01:33:43,200
But yes, in fact, one of things I'm working on right now at work is is

1820
01:33:43,300 --> 01:33:48,000
making the turnaround is doing some things that make turn around even

1821
01:33:48,000 --> 01:33:50,300
easier than it than it would otherwise be

1822
01:33:57,300 --> 01:34:00,300
I was taught to use exceptions because it does not convolute the code

1823
01:34:00,300 --> 01:34:01,800
with the error checking code.

1824
01:34:03,000 --> 01:34:06,700
So that's kind of a pretty wide open topic.

1825
01:34:07,000 --> 01:34:10,600
I guess what I would say is, I do not know.

1826
01:34:11,900 --> 01:34:19,100
I literally do not know a single good programmer who thinks exceptions

1827
01:34:19,100 --> 01:34:19,800
are a good idea.

1828
01:34:20,900 --> 01:34:24,800
I literally do not know one because there's a lot of things

1829
01:34:24,800 --> 01:34:27,900
programming practices that, you know, different programs, different

1830
01:34:27,900 --> 01:34:28,400
opinions on.

1831
01:34:28,400 --> 01:34:31,400
And I can find a good programmer who has an opinion one way or a good

1832
01:34:31,400 --> 01:34:31,900
present.

1833
01:34:32,400 --> 01:34:34,900
I literally don't know of one now.

1834
01:34:34,900 --> 01:34:37,300
Maybe I'm just not thinking of the right print, maybe there's someone

1835
01:34:37,300 --> 01:34:39,500
who does who I do think it's a good programmer who just never

1836
01:34:39,500 --> 01:34:42,300
mentioned it to me but literally I just don't know anyone.

1837
01:34:44,100 --> 01:34:46,600
And so, without going into too much detail, I guess what I would say

1838
01:34:46,600 --> 01:34:53,200
is exceptions, are C++ exceptions are something you should just never

1839
01:34:53,200 --> 01:34:56,600
use and some time on him in here, maybe we can go into why that's

1840
01:34:56,600 --> 01:34:57,000
true.

1841
01:34:57,600 --> 01:35:03,700
There's a lot of reasons, but they are categorically bad and you know,

1842
01:35:03,700 --> 01:35:06,800
we can go into Y at substring when we have more time already over time

1843
01:35:06,800 --> 01:35:07,200
here.

1844
01:35:07,800 --> 01:35:10,100
But suffice to say, if you just want to rule of thumb, never ever, use

1845
01:35:10,100 --> 01:35:11,900
them ever under any circumstances.

1846
01:35:12,100 --> 01:35:12,700
They're never

1847
01:35:12,900 --> 01:35:13,400
Good idea.

1848
01:35:26,000 --> 01:35:27,600
See him 73, just a clarification.

1849
01:35:27,600 --> 01:35:30,200
When I said, memory mapped file, I meant as an addition as an

1850
01:35:30,200 --> 01:35:33,600
alternative to F, read nozzle, turn to streamed loading.

1851
01:35:34,500 --> 01:35:39,100
Oh okay, yes, that's okay.

1852
01:35:39,100 --> 01:35:39,700
I see what you're saying.

1853
01:35:39,700 --> 01:35:41,800
So I guess I must have missed the part of the discussion.

1854
01:35:42,000 --> 01:35:43,400
I'm not sure why that came up is a queue.

1855
01:35:43,400 --> 01:35:45,800
Then it was with somebody talking about because we don't even call it

1856
01:35:45,800 --> 01:35:48,200
freed anywhere.

1857
01:35:48,600 --> 01:35:49,100
So I'm not sure.

1858
01:35:49,100 --> 01:35:53,700
But yes so pseudonym 73 is saying if you're going to load a whole file

1859
01:35:53,700 --> 01:35:55,300
into memory and yeah, that's true.

1860
01:35:56,100 --> 01:35:57,900
you know, if you're going to load a whole file into memory, then

1861
01:35:57,900 --> 01:35:59,800
memory mapping kind of gives the

1862
01:36:00,100 --> 01:36:04,500
Operating system the knowledge of what you're doing with it, so it can

1863
01:36:04,500 --> 01:36:06,500
sort of be more efficient, right?

1864
01:36:07,100 --> 01:36:10,800
It can go, okay, I understand that he wants to access this whole file.

1865
01:36:11,000 --> 01:36:13,800
I can just say here's a block of memory, that's going to map that file

1866
01:36:13,800 --> 01:36:15,500
to it, you know.

1867
01:36:15,500 --> 01:36:20,000
And at that point you can, you know, you can avoid having double

1868
01:36:20,000 --> 01:36:21,300
copies and things like this.

1869
01:36:28,100 --> 01:36:28,800
All right.

1870
01:36:39,400 --> 01:36:40,600
Looks like we are done.

1871
01:36:42,200 --> 01:36:43,500
I would wrap it up for today.

1872
01:36:44,900 --> 01:36:46,100
Let's go ahead and Save.

1873
01:36:50,000 --> 01:36:53,500
Okay, okay.

1874
01:36:57,200 --> 01:36:59,800
And we've created a new debugging Target as well.

1875
01:37:01,300 --> 01:37:04,100
So, we'll go ahead and save that and our bill directory along with

1876
01:37:04,100 --> 01:37:05,200
win32, handmade.

1877
01:37:07,100 --> 01:37:11,300
All right, thank you, everyone for joining me for another episode of

1878
01:37:11,300 --> 01:37:11,900
handmade hero.

1879
01:37:11,900 --> 01:37:13,100
It's been a pleasure coding with you.

1880
01:37:13,100 --> 01:37:13,900
As always.

1881
01:37:13,900 --> 01:37:17,400
Today, we had a little bit of unexpected sound debugging, but I'm kind

1882
01:37:17,400 --> 01:37:20,100
of glad that we took a look at that and I think we made a good change

1883
01:37:20,100 --> 01:37:24,400
there and then we got our asset files writing out partially, we set up

1884
01:37:24,400 --> 01:37:25,200
a little bit more work to do.

1885
01:37:25,200 --> 01:37:27,600
So I think tomorrow what we'll do is we'll just kind of finish up with

1886
01:37:27,600 --> 01:37:28,200
that.

1887
01:37:28,600 --> 01:37:31,900
What we need to do now is we need to handle the actual asset part.

1888
01:37:32,000 --> 01:37:34,200
In order to do that, what we want to do is well load in the bitmaps,

1889
01:37:34,200 --> 01:37:36,300
in the wav files that the assets.

1890
01:37:36,800 --> 01:37:39,800
You and then we want to kind of write them out as we go and that'll be

1891
01:37:39,800 --> 01:37:40,600
kind of interesting.

1892
01:37:40,800 --> 01:37:45,800
You can sort of see how that's going to work and then we will be done

1893
01:37:45,900 --> 01:37:49,100
with writing out our asset file and we can switch over to reading in

1894
01:37:49,100 --> 01:37:49,900
the asset file.

1895
01:37:50,400 --> 01:37:51,700
Which won't be very difficult.

1896
01:37:51,700 --> 01:37:55,800
But it will take us a little bit of time to do that because although

1897
01:37:56,700 --> 01:37:59,700
you know sort of we can do sort of a test pass on it pretty quickly.

1898
01:38:00,000 --> 01:38:02,200
What I want to do is then take that opportunity to show you how to go

1899
01:38:02,200 --> 01:38:04,100
do proper file IO in Windows.

1900
01:38:04,100 --> 01:38:06,600
Because if you remember correctly, the only file I/O that we

1901
01:38:06,700 --> 01:38:10,600
Actually, have in our platform layer right now is called debug because

1902
01:38:10,600 --> 01:38:11,700
it's just the debug version.

1903
01:38:11,700 --> 01:38:14,800
And I said I wanted to wait a little while before we showed how to

1904
01:38:14,800 --> 01:38:15,400
plan it properly.

1905
01:38:15,400 --> 01:38:18,600
So that's also something that we're going to do now because I want to

1906
01:38:18,600 --> 01:38:23,600
show you how to properly do overlapped IO in Windows because there's

1907
01:38:23,600 --> 01:38:24,500
different ways you can do it.

1908
01:38:24,500 --> 01:38:27,600
And I'd like to show you what I think is probably the cleanest way

1909
01:38:27,600 --> 01:38:30,700
that you can do it in a game and it makes things kind of easier on you

1910
01:38:30,700 --> 01:38:34,100
and and it's very efficient through Windows as well.

1911
01:38:34,400 --> 01:38:36,600
So that's what we'll be doing for the rest of the week.

1912
01:38:36,900 --> 01:38:38,300
And I think it's a pretty good thing.

1913
01:38:38,300 --> 01:38:40,500
You know, I'd like to Target, you know, I think by the end of the

1914
01:38:40,500 --> 01:38:42,300
week, we'll probably be in pretty good shape.

1915
01:38:42,600 --> 01:38:45,000
And we'll have our asset file, working relatively cleanly.

1916
01:38:45,500 --> 01:38:46,600
So I think we're in good shape.

1917
01:38:46,600 --> 01:38:47,700
I think that's pretty cool.

1918
01:38:48,200 --> 01:38:50,600
So hopefully you'll join me for some more asset programming.

1919
01:38:50,700 --> 01:38:53,000
That's it for our programming, we will be doing it tomorrow.

1920
01:38:53,000 --> 01:38:53,500
5:00 p.m.

1921
01:38:53,500 --> 01:38:55,900
Pacific Daylight time, just like today, right here on Twitch.

1922
01:38:56,900 --> 01:38:59,700
If in the meantime you would like to play around the source code at

1923
01:38:59,700 --> 01:38:59,800
home.

1924
01:39:00,300 --> 01:39:01,100
Please remember that.

1925
01:39:01,100 --> 01:39:01,800
Anyone who pre-orders?

1926
01:39:01,800 --> 01:39:04,500
The game gets the source code every night after I'm done with it.

1927
01:39:04,500 --> 01:39:07,800
It gets uploaded and you can download it from send out.

1928
01:39:07,800 --> 01:39:09,200
You'll get a little Link in your email.

1929
01:39:09,200 --> 01:39:10,100
You can download it.

1930
01:39:10,300 --> 01:39:12,400
So if that interests, you head over to handle your rhetoric, you can

1931
01:39:12,400 --> 01:39:13,000
do that.

1932
01:39:13,300 --> 01:39:15,600
And also on he made here at Orange, you got these other options up

1933
01:39:15,600 --> 01:39:15,800
here.

1934
01:39:15,800 --> 01:39:17,900
We talked about the Tweet bottom today's stream, it's a thing that

1935
01:39:17,900 --> 01:39:19,600
allows you to know when it's going to be scheduled.

1936
01:39:19,600 --> 01:39:21,700
So that's a good place to check out if you want to catch a stream

1937
01:39:21,700 --> 01:39:24,600
live, we also have a forum site.

1938
01:39:25,200 --> 01:39:28,600
Where you can go watch annotated episodes from the past.

1939
01:39:28,600 --> 01:39:30,800
So you can kind of see like you know if you missed stuff, if you're

1940
01:39:30,800 --> 01:39:32,700
new to the series, you can see older episodes.

1941
01:39:32,700 --> 01:39:36,200
What we've been doing every last piece of code that we wrote for this

1942
01:39:36,200 --> 01:39:40,100
game is fully committed by me up there.

1943
01:39:40,500 --> 01:39:42,700
And there's members of the community who have gone through an

1944
01:39:42,700 --> 01:39:45,200
annotated with time markers, which is kind of amazing that they've

1945
01:39:45,200 --> 01:39:45,700
been doing that.

1946
01:39:45,700 --> 01:39:47,900
It's really kind of a pretty big undertaking and they've done an

1947
01:39:47,900 --> 01:39:49,300
amazing job doing that.

1948
01:39:49,300 --> 01:39:50,000
It's pretty awesome.

1949
01:39:50,100 --> 01:39:50,800
So, check that out.

1950
01:39:50,800 --> 01:39:51,900
It's also got a forum site.

1951
01:39:51,900 --> 01:39:52,900
You can ask questions.

1952
01:39:53,300 --> 01:39:54,700
It's got a

1953
01:39:55,100 --> 01:39:57,400
ports to Mac and Linux you want to follow along on different

1954
01:39:57,400 --> 01:39:57,900
platforms.

1955
01:39:58,000 --> 01:39:59,100
There's just great stuff up there.

1956
01:39:59,300 --> 01:40:00,500
Check it out members of community done.

1957
01:40:00,500 --> 01:40:01,500
Some really awesome things.

1958
01:40:02,100 --> 01:40:04,700
We also have patreon page if you want to support this video series,

1959
01:40:05,200 --> 01:40:06,600
it's always very much appreciates place.

1960
01:40:06,600 --> 01:40:09,900
You can subscribe, and that's about it.

1961
01:40:09,900 --> 01:40:13,600
So I guess that's enough handmade hero for today.

1962
01:40:14,200 --> 01:40:17,800
I will see you guys tomorrow, until then have fun programming.

