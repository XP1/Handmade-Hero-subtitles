1
00:00:00,600 --> 00:00:01,700
And start crying.

2
00:00:02,300 --> 00:00:04,300
Hello everyone and welcome to handmade hero.

3
00:00:04,300 --> 00:00:06,700
The show Rico to complete game live on stream.

4
00:00:07,600 --> 00:00:14,100
We just recently did a switch over to using the 3D transforms of

5
00:00:14,100 --> 00:00:19,000
opengl to do our transference before we were using opengl, just as a

6
00:00:19,000 --> 00:00:22,600
dumb bit mat drawing back end basically, and we did all of our

7
00:00:22,600 --> 00:00:23,400
transforms

8
00:00:24,600 --> 00:00:25,300
Ourselves.

9
00:00:26,000 --> 00:00:29,000
But we wanted to start taking advantage of things like z-buffering,

10
00:00:30,000 --> 00:00:32,800
and we want to remove stuff like Sprite sorting from the engine

11
00:00:32,800 --> 00:00:36,300
because it just didn't seem to be the right way to do things to me

12
00:00:37,500 --> 00:00:38,600
when we implemented it.

13
00:00:40,400 --> 00:00:44,400
I just didn't have a good feeling about it in terms of scalability, so

14
00:00:44,400 --> 00:00:45,600
I decided to switch it over.

15
00:00:45,600 --> 00:00:46,900
And so we've done that.

16
00:00:46,900 --> 00:00:52,300
Now, actually, and we had our game running with running through open

17
00:00:52,300 --> 00:00:53,900
shell for the 3D transform.

18
00:00:56,100 --> 00:01:01,000
The perspective scaling and such, but we still had all this right?

19
00:01:01,000 --> 00:01:02,300
Sorting code in there.

20
00:01:03,100 --> 00:01:06,000
And so what I did at the end of yesterday's stream is, I started to

21
00:01:06,000 --> 00:01:10,100
gut that code and I got it to a reasonable stopping point, but we

22
00:01:10,100 --> 00:01:13,200
didn't quite have a chance to finish all of the gutting.

23
00:01:14,000 --> 00:01:16,000
So we need to go do that now.

24
00:01:16,400 --> 00:01:19,000
And yeah, it's relatively straightforward work.

25
00:01:19,000 --> 00:01:23,000
We're basically just returning the pipeline essentially to the state

26
00:01:23,000 --> 00:01:25,000
that it was before we added this right sword.

27
00:01:25,200 --> 00:01:29,300
So we're really just sort of removing what we added.

28
00:01:29,300 --> 00:01:31,400
We're not really doing anything particularly new.

29
00:01:31,400 --> 00:01:34,500
We're just kind of pulling out some of the parts that we added in that

30
00:01:34,500 --> 00:01:36,100
really, we don't want anymore.

31
00:01:37,100 --> 00:01:39,600
So let's go ahead and get back to that.

32
00:01:39,700 --> 00:01:41,200
Like I just flashed up their day.

33
00:01:41,200 --> 00:01:44,000
361 is the day-to-day.

34
00:01:44,000 --> 00:01:48,500
So if you are trying to follow along at home, you want day 360 source

35
00:01:48,500 --> 00:01:48,900
code.

36
00:01:50,100 --> 00:01:52,800
Let's go ahead and open up the project in for coder.

37
00:01:55,400 --> 00:01:56,400
And get started.

38
00:01:57,300 --> 00:02:00,100
So if you remember where we left off yesterday, we essentially had

39
00:02:00,100 --> 00:02:05,100
gutted, most of the code, but the, the render Loop we kind of nerfed

40
00:02:05,100 --> 00:02:07,000
out because it didn't have anything to iterate over.

41
00:02:07,000 --> 00:02:09,800
So, we're just at a grey screen right now because the part that

42
00:02:09,800 --> 00:02:13,600
actually takes the push buffer and execute, it has just been if zeroed

43
00:02:13,600 --> 00:02:14,100
out.

44
00:02:14,400 --> 00:02:17,400
Now, the reason that if zeroed out is because we have to go in now

45
00:02:17,500 --> 00:02:21,400
that we've got it all the Sorting code and what we have to do is we

46
00:02:21,400 --> 00:02:24,100
have to make sure that when we push a render entry

47
00:02:25,700 --> 00:02:26,500
Let me go in there.

48
00:02:27,000 --> 00:02:31,500
Push render elements re not render entry, you can see how it was

49
00:02:31,500 --> 00:02:32,000
working.

50
00:02:32,600 --> 00:02:36,800
It calls the, the push buffer code and the push buffer code is going

51
00:02:36,800 --> 00:02:39,900
to give it back the place to write the information that it's trying to

52
00:02:39,900 --> 00:02:40,400
write.

53
00:02:40,900 --> 00:02:44,800
And you can see this push puffer coat here, takes a data size and

54
00:02:44,800 --> 00:02:47,100
unfortunately, it, you can see what's happening here.

55
00:02:48,400 --> 00:02:52,200
The push buffer data at - data size, check and the - equals data size,

56
00:02:52,600 --> 00:02:55,300
it's walking backwards from the end.

57
00:02:55,500 --> 00:02:59,800
Of the stream, the end of the buffer and sticking things in.

58
00:03:01,000 --> 00:03:02,600
and the reason that we were doing that,

59
00:03:04,700 --> 00:03:05,600
if you called,

60
00:03:07,000 --> 00:03:09,200
Is just because we had wanted.

61
00:03:11,200 --> 00:03:14,900
To put the sort entries at the beginning of the buffer.

62
00:03:15,000 --> 00:03:18,200
So, we were growing from the bottom of the render buffer up to put the

63
00:03:18,200 --> 00:03:21,800
sword entries in there, and the top of the render buffer down to put

64
00:03:21,800 --> 00:03:22,800
the data in.

65
00:03:23,300 --> 00:03:26,500
And so, that way, we had a flat array starting from the first from

66
00:03:26,500 --> 00:03:30,700
zero of the sort entries, we would sort those and then we would use

67
00:03:30,700 --> 00:03:34,300
those to jump into the right place in the render buffer to find the

68
00:03:34,300 --> 00:03:35,700
data for each sort entries.

69
00:03:35,700 --> 00:03:37,500
Actual information.

70
00:03:37,500 --> 00:03:40,400
Now, since we are now switching to not sort, and

71
00:03:40,600 --> 00:03:42,700
Again the reason I didn't like what sort of because they're because

72
00:03:42,700 --> 00:03:45,600
there were all this extra stuff, I was like the Z buffer is just the

73
00:03:45,600 --> 00:03:46,500
right way to handle this.

74
00:03:46,500 --> 00:03:50,100
It's more flexible and it doesn't have all these problems that I'm

75
00:03:50,100 --> 00:03:54,200
talking about where you like, have to do all this extra work with more

76
00:03:54,200 --> 00:03:56,400
elements and indirection, and all that stuff.

77
00:03:56,400 --> 00:04:01,600
All of those things will eventually, even if not him nearby think even

78
00:04:01,600 --> 00:04:04,500
on him hero, they would have caused us problems because I want to do

79
00:04:04,500 --> 00:04:05,500
some particle system stuff.

80
00:04:05,500 --> 00:04:08,000
And I think particle systems would when we start to put a lot of

81
00:04:08,000 --> 00:04:10,400
particles in there, would really start to stress that system.

82
00:04:10,500 --> 00:04:12,100
Out and it would roll over and die.

83
00:04:15,600 --> 00:04:19,600
You know, all of that indirection and extra data and extra walking and

84
00:04:19,600 --> 00:04:24,400
sorting work is just putting too much extra work per element that we

85
00:04:24,400 --> 00:04:25,000
want to draw.

86
00:04:25,000 --> 00:04:28,900
And when we are trying to get good drawing performance, one of the

87
00:04:28,900 --> 00:04:32,800
biggest things you want to do is try to just stream out information

88
00:04:33,000 --> 00:04:36,300
that we can hand to the GPU or hand to the software renderer that it

89
00:04:36,300 --> 00:04:37,700
can just process directly.

90
00:04:38,100 --> 00:04:41,700
The more middle information there is there the more middle in

91
00:04:41,700 --> 00:04:43,200
Direction that's going on there?

92
00:04:43,900 --> 00:04:44,500
It's just

93
00:04:44,600 --> 00:04:49,200
Adding and adding, and adding cost per element and every time you add

94
00:04:49,200 --> 00:04:53,000
cost for element the number of elements you can do goes down, right.

95
00:04:54,300 --> 00:04:57,700
And so I want to move the renderer towards a more direct streaming

96
00:04:57,700 --> 00:05:04,000
approach with less interference and part of a big part doing, I think

97
00:05:04,000 --> 00:05:05,000
it's just getting rid of the Sorting.

98
00:05:05,000 --> 00:05:06,400
So that's why I wanted to do that.

99
00:05:06,400 --> 00:05:10,300
And that's like an example, right here of that, sort of thing, still

100
00:05:10,300 --> 00:05:13,600
even after pulling out the sort code, you can still see the vestigial

101
00:05:13,600 --> 00:05:15,000
remains of that happening.

102
00:05:15,600 --> 00:05:18,200
And so, let's go ahead and continue to get rid of that.

103
00:05:18,700 --> 00:05:21,100
So, here we are at the push, buffer result structure, right?

104
00:05:21,100 --> 00:05:23,200
It Returns the header of the thing.

105
00:05:23,500 --> 00:05:23,900
So, when you do,

106
00:05:24,100 --> 00:05:25,600
Push buffer, it's got that header in there.

107
00:05:25,600 --> 00:05:26,200
It's going to do.

108
00:05:27,900 --> 00:05:31,800
And when we go ahead and push that on, what we can do here is take a

109
00:05:31,800 --> 00:05:35,300
look and go, how is this thing?

110
00:05:35,700 --> 00:05:36,700
I believe it was in the platform.

111
00:05:36,700 --> 00:05:37,300
How is this thing?

112
00:05:37,300 --> 00:05:37,800
Doing that?

113
00:05:37,800 --> 00:05:41,500
Sort of walk down and I believe there's the render gamer enter

114
00:05:41,500 --> 00:05:42,400
commands bit.

115
00:05:42,400 --> 00:05:44,800
Here you can see the max push push.

116
00:05:44,800 --> 00:05:47,600
Buffer size, there's this sort entry count thing here.

117
00:05:47,600 --> 00:05:51,400
Push, buffer base and push buffer data at Push by base and push buffer

118
00:05:51,400 --> 00:05:51,800
data.

119
00:05:51,800 --> 00:05:54,500
At are the two things we're going to use to kind of walk up.

120
00:05:55,300 --> 00:05:57,100
We are not going to use the the

121
00:05:57,200 --> 00:05:59,700
manual sort key bit here.

122
00:06:00,200 --> 00:06:03,200
And we're not going to use a sword entry count, but we do need

123
00:06:03,200 --> 00:06:05,000
something that lets the renderer know.

124
00:06:05,000 --> 00:06:06,600
It's at the end, right?

125
00:06:09,100 --> 00:06:10,000
So, we need something.

126
00:06:12,100 --> 00:06:15,900
And what we can use there is to push buffer data at if we just let

127
00:06:15,900 --> 00:06:17,200
that be sort of the end cap.

128
00:06:17,200 --> 00:06:20,200
So we've got kind of this is where the bottom that is.

129
00:06:20,200 --> 00:06:22,400
And this is where the high Watermark is so far.

130
00:06:23,400 --> 00:06:26,300
Then what we can do is just keep incrementing that as we go and we

131
00:06:26,300 --> 00:06:29,900
should be fine at that point, right?

132
00:06:30,300 --> 00:06:33,300
We should be able to use that to tell us where to start and where to

133
00:06:33,300 --> 00:06:33,800
stop.

134
00:06:34,100 --> 00:06:36,800
So when we do push buffer troops to me to put a question mark in

135
00:06:36,800 --> 00:06:37,000
there.

136
00:06:37,500 --> 00:06:38,800
When we do push buffer,

137
00:06:40,000 --> 00:06:41,800
What we want to do is say all right.

138
00:06:42,600 --> 00:06:46,500
When we do commands push buffer at to check to see whether we can fit

139
00:06:46,500 --> 00:06:49,700
in here, what we want to do is say, all right, if the commands pushed

140
00:06:49,700 --> 00:06:57,900
buffer at - well actually, I guess we could just say we want Push

141
00:06:57,900 --> 00:07:00,300
buffer base plus Max.

142
00:07:02,400 --> 00:07:03,700
Backsplash, Barber size.

143
00:07:05,100 --> 00:07:07,200
This is essentially like an end pointer.

144
00:07:10,400 --> 00:07:14,000
As long as we're less than the end, right?

145
00:07:14,100 --> 00:07:15,100
We could do it.

146
00:07:16,600 --> 00:07:22,200
But we have to account for how much wants to be pushed on, right?

147
00:07:22,600 --> 00:07:25,500
So, if we were to take where we're at, and we were to add how much we

148
00:07:25,500 --> 00:07:29,300
want to push as long as we're less than our end cap, right?

149
00:07:29,800 --> 00:07:30,900
Then, then we're good.

150
00:07:33,700 --> 00:07:37,300
And we can do the push slight aside.

151
00:07:37,500 --> 00:07:41,700
Again, this kind of a check is only valid for code.

152
00:07:41,700 --> 00:07:42,300
We control.

153
00:07:42,300 --> 00:07:46,700
Obviously those of you who are more security minded thinking about

154
00:07:46,700 --> 00:07:48,800
things where the user input comes into play.

155
00:07:48,800 --> 00:07:53,200
And so on obviously these sorts of computations can fail because if

156
00:07:53,200 --> 00:07:56,700
this number is big enough to cause this to wrap, it will still be less

157
00:07:56,700 --> 00:08:00,400
than the push buffer end so you have to do more careful checking here

158
00:08:00,400 --> 00:08:02,000
if you if you

159
00:08:02,200 --> 00:08:05,500
Assumed that data size could be coming from some nefarious.

160
00:08:05,500 --> 00:08:09,000
So, and so, you know, these sorts of checks don't work because this

161
00:08:09,000 --> 00:08:11,400
could be big enough to wrap this value, and then the check would

162
00:08:11,400 --> 00:08:12,200
succeed.

163
00:08:12,500 --> 00:08:16,800
And then you would write over a bunch of memory as someone did stuff,

164
00:08:16,800 --> 00:08:17,300
right?

165
00:08:17,700 --> 00:08:21,300
So yeah, you know how it is with security code.

166
00:08:21,300 --> 00:08:24,300
There's a lot more to consider there, but we are not looking at that

167
00:08:24,300 --> 00:08:25,100
kind of code.

168
00:08:25,400 --> 00:08:29,000
We know that data size is always coming from one of our routines and

169
00:08:29,000 --> 00:08:30,900
games are not security critical in that way.

170
00:08:30,900 --> 00:08:32,000
At least not finger player.

171
00:08:32,100 --> 00:08:32,400
Ones.

172
00:08:35,600 --> 00:08:39,299
That's more, Microsoft's job than ours, to make sure that a user level

173
00:08:39,299 --> 00:08:39,799
app.

174
00:08:40,200 --> 00:08:43,299
Isn't, you know, getting some of the root privileges on your machine,

175
00:08:45,400 --> 00:08:47,700
Not that Microsoft doesn't particularly good job at it mind you.

176
00:08:47,700 --> 00:08:48,500
But, you know,

177
00:08:50,500 --> 00:08:51,900
What you gonna do anyway?

178
00:08:53,000 --> 00:08:54,200
So here we go.

179
00:08:57,200 --> 00:08:59,800
What we need to do here is switch the order of these

180
00:09:00,000 --> 00:09:02,500
Going to take where we're at in the push buffer and say that's we're

181
00:09:02,500 --> 00:09:05,500
going to push the next thing then we're going to increment by that

182
00:09:05,500 --> 00:09:08,100
size so we're saying okay here's what the push bumpers at we're going

183
00:09:08,100 --> 00:09:08,900
past that size.

184
00:09:10,700 --> 00:09:14,000
And so then we return that chunk to right into and now the push buffer

185
00:09:14,000 --> 00:09:15,500
is at the correct position.

186
00:09:16,000 --> 00:09:16,400
Right.

187
00:09:16,700 --> 00:09:19,400
So now when we're doing our push buffer code, and that's really all we

188
00:09:19,400 --> 00:09:20,100
need to do there.

189
00:09:21,900 --> 00:09:24,000
Get rid of this Reserve, sort key stuff.

190
00:09:27,900 --> 00:09:29,000
What are you talking about?

191
00:09:29,000 --> 00:09:30,700
Uh, real through to us, right?

192
00:09:30,700 --> 00:09:35,000
We gotta when we do our initialization here, we've got to change that

193
00:09:35,000 --> 00:09:35,200
out.

194
00:09:35,200 --> 00:09:38,400
So render command struct if the mass with Versailles to push buffer,

195
00:09:38,400 --> 00:09:42,400
the width and the height, so the push buffer base.

196
00:09:43,500 --> 00:09:46,600
And push buffer data at is, just going to be the same.

197
00:09:48,200 --> 00:09:48,800
Off we go.

198
00:09:50,500 --> 00:09:51,400
So, yeah.

199
00:09:51,800 --> 00:09:53,600
All we need to do there is just go.

200
00:09:55,600 --> 00:09:56,000
Okay.

201
00:09:56,000 --> 00:09:59,100
Now we're pushing from the bottom up, which is what we want.

202
00:09:59,200 --> 00:10:02,500
And so, if we go to handmade opengl and take a look at that render

203
00:10:02,500 --> 00:10:07,600
Loop that we nerfed out, what we have to do now is like unnerve it

204
00:10:07,600 --> 00:10:08,300
out, right.

205
00:10:08,700 --> 00:10:12,800
So, what we need to do is we need to start at like

206
00:10:14,500 --> 00:10:16,500
Essentially, the base location.

207
00:10:16,600 --> 00:10:17,200
Right?

208
00:10:18,000 --> 00:10:22,900
So we need like a header at variable or header offset.

209
00:10:23,900 --> 00:10:24,800
It's not really an offset.

210
00:10:24,800 --> 00:10:25,600
It's actually a pointer.

211
00:10:25,600 --> 00:10:29,500
So to say header app and we know that that header has to start at the

212
00:10:29,500 --> 00:10:30,500
push buffer base.

213
00:10:37,600 --> 00:10:39,000
We do have one problem.

214
00:10:41,300 --> 00:10:44,200
That we're going to have to fix which has the cliprect situation.

215
00:10:44,600 --> 00:10:53,100
And I suspect that that's going to have to use a some kind of a that's

216
00:10:53,100 --> 00:10:57,100
going to have to use some kind of a more intelligent thing I guess.

217
00:10:57,400 --> 00:10:59,800
Well, alright yeah, actually, I guess that's not true.

218
00:10:59,900 --> 00:11:00,200
I guess.

219
00:11:00,200 --> 00:11:01,900
There are ways that we can get around that.

220
00:11:01,900 --> 00:11:03,400
So we'll take a look at that in a second.

221
00:11:03,400 --> 00:11:06,500
I'll explain why I say we have to do that but we're just going to take

222
00:11:06,500 --> 00:11:07,500
it one step at a time.

223
00:11:08,100 --> 00:11:10,200
So we're going to go ahead and grab the header out of the

224
00:11:10,400 --> 00:11:14,100
By four base which is in that command structure.

225
00:11:14,300 --> 00:11:16,700
We know that's where the first header is going to be written.

226
00:11:17,400 --> 00:11:20,800
Then we just have to make sure that we're always less than the push

227
00:11:20,800 --> 00:11:26,000
buffer data at which is the highest place we ever got to.

228
00:11:26,000 --> 00:11:30,600
So we know that at the very last time someone pushed a header they set

229
00:11:30,600 --> 00:11:33,800
push buffer data at to be like the part after the chunk that they

230
00:11:33,800 --> 00:11:34,500
pushed on.

231
00:11:34,700 --> 00:11:37,900
So we know once we get there, we're done right?

232
00:11:38,900 --> 00:11:41,800
And we don't have anything we can do inside this Loop because how much

233
00:11:41,800 --> 00:11:46,500
we advance by is based entirely on the struct that we received, right?

234
00:11:46,800 --> 00:11:51,000
So when we get render grouped entry, you know, render entry bitmap,

235
00:11:51,300 --> 00:11:56,100
when we take a look at how these Saucy fellows worked over here.

236
00:11:56,700 --> 00:11:59,800
We we know that they're going to eat

237
00:12:00,100 --> 00:12:02,900
Be whatever the size is of the case that we encountered.

238
00:12:02,900 --> 00:12:04,600
So here's render entry bitmap.

239
00:12:04,700 --> 00:12:07,800
We know that we would have to advance by this much, but we also know

240
00:12:07,800 --> 00:12:11,800
that we have to advance by however big the header is itself, right?

241
00:12:12,600 --> 00:12:15,000
So the render group entry header bit.

242
00:12:15,000 --> 00:12:21,200
That's this right here and this is no longer applicable either.

243
00:12:21,800 --> 00:12:24,500
So the render group entry header here that has the type in the clip

244
00:12:24,500 --> 00:12:25,900
directing Vex packed in here.

245
00:12:25,900 --> 00:12:29,400
And sometimes also a debug tag in case we want that for any kind of

246
00:12:29,400 --> 00:12:29,900
debugging information.

247
00:12:30,000 --> 00:12:30,600
Information.

248
00:12:34,100 --> 00:12:36,500
That's something we always have to advance by.

249
00:12:36,500 --> 00:12:38,800
So we know like, you know, we can in here.

250
00:12:38,800 --> 00:12:42,100
For example, if we wanted to just say, well, we know, we're always

251
00:12:42,100 --> 00:12:46,700
going to have to advance by the size of the render group entry header.

252
00:12:46,800 --> 00:12:49,000
So that always has to happen, right?

253
00:12:50,400 --> 00:12:54,300
But then we also know that we have to add in each one of these.

254
00:12:54,700 --> 00:13:00,500
We have to take however big this thing is right and advanced by that

255
00:13:00,500 --> 00:13:01,000
as well.

256
00:13:01,700 --> 00:13:02,800
So header at

257
00:13:03,300 --> 00:13:07,900
Has to sort of Advance by that size, specific to the thing that we

258
00:13:07,900 --> 00:13:08,800
encountered.

259
00:13:09,800 --> 00:13:10,600
So, you know,

260
00:13:12,500 --> 00:13:18,400
It's easy peasy lemon squeezy as Jeff Roberts would say but you know,

261
00:13:18,400 --> 00:13:19,700
we got to actually do it.

262
00:13:24,800 --> 00:13:25,900
But that's really all the code.

263
00:13:25,900 --> 00:13:26,500
There is there.

264
00:13:26,500 --> 00:13:32,000
Now, if we actually do this we're going to fail right off the bat.

265
00:13:32,400 --> 00:13:38,200
And yeah, you can you can see exactly how that that's failing.

266
00:13:38,700 --> 00:13:40,600
The first time we grab one of these header.

267
00:13:40,600 --> 00:13:42,200
Well, okay, that's actually not true.

268
00:13:42,200 --> 00:13:45,200
I forgot one more thing I had to do first, so that's actually

269
00:13:45,200 --> 00:13:45,900
different failure.

270
00:13:46,100 --> 00:13:48,700
Let's fix that failure, first, but we have a different failure in

271
00:13:48,700 --> 00:13:49,000
there.

272
00:13:49,600 --> 00:13:52,700
So when we grab the header, obviously this piece of code is wrong.

273
00:13:52,700 --> 00:13:54,000
We need to actually use the header

274
00:13:54,200 --> 00:13:55,300
That we produce there.

275
00:13:55,700 --> 00:13:59,500
But yes, I believe we're still going to be wrong, even after that.

276
00:14:00,200 --> 00:14:04,600
So what you can see here is, we're getting a header and it's nonsense,

277
00:14:04,700 --> 00:14:05,000
right?

278
00:14:05,000 --> 00:14:08,600
I mean, this is, this is not, there is no type 96, that's that sort of

279
00:14:08,600 --> 00:14:09,300
Chris obviously.

280
00:14:10,600 --> 00:14:11,600
So what's going on there?

281
00:14:11,900 --> 00:14:13,700
Well, at least one other thing we have to fix.

282
00:14:13,700 --> 00:14:16,700
I mean, that maybe we may have multiple bugs in here because we ripped

283
00:14:16,700 --> 00:14:20,300
out a lot of code but at least one problem that we have is we are

284
00:14:20,300 --> 00:14:23,900
pushing the the clip rect, you know, the clip rect

285
00:14:24,100 --> 00:14:27,700
Typing rectangles that we use, which are used now for both the camera

286
00:14:27,700 --> 00:14:32,600
transform and for clipping that is gets pushed onto push buffer just

287
00:14:32,600 --> 00:14:33,600
like everything else.

288
00:14:33,900 --> 00:14:34,300
Right?

289
00:14:34,600 --> 00:14:38,200
And what you can see here is render entry cliprect is all, that gets

290
00:14:40,000 --> 00:14:45,000
sort of pulled out of that and that actually isn't going to work if

291
00:14:45,000 --> 00:14:48,900
we're walking through these because the renderer doesn't know when it

292
00:14:48,900 --> 00:14:50,300
sees one of these clip Rex

293
00:14:51,200 --> 00:14:54,200
The renderer doesn't know what it is.

294
00:14:54,300 --> 00:14:59,700
So it's stepping through this buffer looking for the things that

295
00:15:00,000 --> 00:15:02,800
Anne's it see stuff like drawbitmap.

296
00:15:02,800 --> 00:15:03,700
It knows what it is.

297
00:15:03,700 --> 00:15:07,300
It processes it skips over it but then it gets to a clip.

298
00:15:07,300 --> 00:15:10,200
Rect and the clip art doesn't even have a header in it, right?

299
00:15:10,200 --> 00:15:13,700
It's doesn't even conform to the header structure for the elements.

300
00:15:14,300 --> 00:15:18,300
So what we need to do is even though we don't draw anything on a clip.

301
00:15:18,300 --> 00:15:21,900
Rect we have to insert a header for them here.

302
00:15:22,900 --> 00:15:26,900
And actually, put that piece of information in there, right?

303
00:15:27,700 --> 00:15:29,800
So if we go to push render element here,

304
00:15:31,800 --> 00:15:32,200
Oops.

305
00:15:34,500 --> 00:15:35,600
And just grab that out.

306
00:15:35,600 --> 00:15:39,200
In fact, we could just use somebody who's already doing a push render

307
00:15:39,200 --> 00:15:39,800
element called.

308
00:15:39,800 --> 00:15:41,100
You can see how it works, right?

309
00:15:41,100 --> 00:15:44,500
We just have this sort of thing, we just need to do that for our clip

310
00:15:44,500 --> 00:15:45,000
Rex.

311
00:15:45,600 --> 00:15:48,500
So that when we do this, instead of calling push buffer directly which

312
00:15:48,500 --> 00:15:52,200
we don't want to do, we're just going to call Push render entry clip,

313
00:15:52,200 --> 00:15:56,400
rect and push it as a regular entry, okay?

314
00:15:57,300 --> 00:16:00,900
So when we come through here then we will have that

315
00:16:08,500 --> 00:16:12,500
So now we actually will have that rectangle and everything else will

316
00:16:12,500 --> 00:16:13,800
work from there.

317
00:16:14,600 --> 00:16:17,600
Okay, let's go ahead and build that.

318
00:16:17,600 --> 00:16:18,100
There we go.

319
00:16:19,000 --> 00:16:22,000
So now what will happen or what should happen if I was right about

320
00:16:22,000 --> 00:16:26,200
that is we should get a break in the default case because now the

321
00:16:26,200 --> 00:16:31,300
render when it goes through, this Loop will correctly, be able to

322
00:16:31,300 --> 00:16:35,500
interpret the clip rect and you can see that it is a render type two.

323
00:16:36,500 --> 00:16:41,000
Which is exactly what we expected, 01 to, right?

324
00:16:41,700 --> 00:16:45,200
And so now we are in a good position because since we don't want the

325
00:16:45,200 --> 00:16:48,600
renderer at the moment to do anything with those cliprect because it

326
00:16:48,600 --> 00:16:50,000
uses them in a different way, right?

327
00:16:50,000 --> 00:16:54,300
It does that serialization first, all we have to do to make the rest

328
00:16:54,300 --> 00:16:57,400
of the render render Loop stream properly.

329
00:16:57,800 --> 00:17:02,100
It just makes sure that when we see one of these, we skip it because

330
00:17:02,100 --> 00:17:04,500
it's already being handled elsewhere, right?

331
00:17:11,200 --> 00:17:13,599
So, now, it'll skip over those Loops.

332
00:17:14,599 --> 00:17:18,300
So, now, it'll skip over those rather than having them trip up the

333
00:17:18,300 --> 00:17:18,700
renderer.

334
00:17:19,500 --> 00:17:22,300
So now, we just have to make sure that everything else goes goes

335
00:17:22,400 --> 00:17:26,800
correctly in the any bugs, we inadvertently reduced, we inadvertently

336
00:17:26,800 --> 00:17:27,300
introduced.

337
00:17:27,300 --> 00:17:27,900
We get rid of.

338
00:17:28,300 --> 00:17:32,300
And obviously, I have to do the advancement here as well.

339
00:17:41,300 --> 00:17:44,300
Okay so now we're back in good shape.

340
00:17:44,300 --> 00:17:47,900
Right again, we still have not turned the z-buffer on because we're

341
00:17:47,900 --> 00:17:50,700
sort of inching slowly towards that so we still have complete nut.

342
00:17:50,700 --> 00:17:54,500
So sorting it's just whatever order things went down in randomly so we

343
00:17:54,500 --> 00:17:58,600
get all that crazy flashing nonsense but everything's working fine,

344
00:17:58,600 --> 00:17:59,200
right?

345
00:17:59,200 --> 00:17:59,700
The clip rectangle.

346
00:18:00,600 --> 00:18:03,400
And such are not causing any problems.

347
00:18:03,400 --> 00:18:06,300
Now, the render is able to access all the things that want access and

348
00:18:06,300 --> 00:18:07,100
that's all good.

349
00:18:09,500 --> 00:18:09,900
Okay.

350
00:18:12,500 --> 00:18:14,600
So now we've pulled the sorting out.

351
00:18:15,400 --> 00:18:18,300
And maybe there's a little bit of a still remain to that but not much

352
00:18:18,300 --> 00:18:23,800
anymore and now we can start to focus on the actual 3D Miss of

353
00:18:23,800 --> 00:18:26,200
everything that we're doing, right?

354
00:18:27,200 --> 00:18:29,500
And we can try to like start to work through that a little bit more.

355
00:18:31,800 --> 00:18:33,800
Well, I crunch on this biscuit.

356
00:18:39,400 --> 00:18:40,500
It's a pretty good biscuit.

357
00:18:51,500 --> 00:18:53,200
It's from a place called Dahlia Bakery.

358
00:18:54,900 --> 00:18:55,600
Here in Seattle.

359
00:18:57,900 --> 00:18:58,900
And they make pretty good biscuits.

360
00:19:02,400 --> 00:19:04,100
I realize this is not relevant to programming.

361
00:19:05,800 --> 00:19:07,000
But it is relevant to biscuits.

362
00:19:09,400 --> 00:19:09,900
All right.

363
00:19:11,500 --> 00:19:12,200
Moving on.

364
00:19:13,500 --> 00:19:14,400
Okay, so

365
00:19:18,200 --> 00:19:19,500
In terms of our to do list.

366
00:19:19,500 --> 00:19:23,500
Now it's I think what we might want to make a little, a little, you

367
00:19:23,500 --> 00:19:28,700
know, a little, you know, such and such, we made the concept of 3D

368
00:19:28,700 --> 00:19:30,000
rooms that can be queried already.

369
00:19:30,000 --> 00:19:34,600
And we did update the camera to move between proven cases for 3D rooms

370
00:19:34,600 --> 00:19:37,300
that actually kind of already happened.

371
00:19:37,300 --> 00:19:41,500
So we have some of that stuff cleaned up but we do have some stuff

372
00:19:41,500 --> 00:19:43,200
here, we have to fix the unprojected.

373
00:19:43,200 --> 00:19:48,100
Let's just make a quick little understanding of

374
00:19:48,300 --> 00:19:49,100
Has to happen here.

375
00:19:49,600 --> 00:19:53,500
So where we've got this film Project stuff going on here.

376
00:19:53,500 --> 00:19:56,100
So let's take a look at what our high level objectives are now.

377
00:19:56,800 --> 00:20:01,700
So we want to basically be able to turn on the z-buffer, right?

378
00:20:02,200 --> 00:20:09,100
We need to be able to draw sprites or let's say draw the world in a

379
00:20:09,100 --> 00:20:10,000
logical way.

380
00:20:11,400 --> 00:20:16,400
And that means like stand-up cards for some things.

381
00:20:17,100 --> 00:20:20,700
That means cubes for other things.

382
00:20:22,500 --> 00:20:25,900
And that may be actually be it, it depends what we want to support in

383
00:20:25,900 --> 00:20:29,700
terms of the stuff that we're going to draw, but we kind of need, you

384
00:20:29,700 --> 00:20:33,700
know, turning on the Z, buffer is not the end of the job.

385
00:20:33,700 --> 00:20:36,800
We have to sort of come up with some ways, in which, we're going to

386
00:20:36,800 --> 00:20:37,700
structure things.

387
00:20:38,200 --> 00:20:40,800
So that they work reasonably well in terms.

388
00:20:41,000 --> 00:20:42,300
How you see them, how they work.

389
00:20:43,300 --> 00:20:44,600
And talk a little bit about that.

390
00:20:45,400 --> 00:20:49,900
So really we just need to sort of again in baby steps move towards a

391
00:20:49,900 --> 00:20:53,400
3D more 3D version of the world.

392
00:20:54,300 --> 00:20:58,200
So what I want to do in order to lead up to that because I think it

393
00:20:58,200 --> 00:20:59,600
will be important for debugging.

394
00:21:00,500 --> 00:21:04,800
Is basically like a freely rotatable world.

395
00:21:06,800 --> 00:21:12,900
And I don't ever want the world to rotate in the actual game because

396
00:21:12,900 --> 00:21:15,100
the art isn't set up for that, right?

397
00:21:15,100 --> 00:21:15,800
Like it.

398
00:21:15,900 --> 00:21:21,300
We don't want the game to spin and not because it's not fun for the

399
00:21:21,300 --> 00:21:22,600
game to spend or something.

400
00:21:22,600 --> 00:21:27,900
But we don't want the game to be spinning this way at all.

401
00:21:28,800 --> 00:21:30,600
It might tilt that way a little bit.

402
00:21:31,100 --> 00:21:34,100
You know, change the Tilt that way a little bit but we don't want to

403
00:21:34,100 --> 00:21:34,800
do this.

404
00:21:35,100 --> 00:21:36,500
And the reason is because as soon as you

405
00:21:36,600 --> 00:21:38,900
Start doing this with a 2-D game.

406
00:21:38,900 --> 00:21:45,900
You see how like everything is a, is a card that faces the user and,

407
00:21:45,900 --> 00:21:47,200
and we don't really want that.

408
00:21:47,900 --> 00:21:51,600
So you want to think more along the lines of something like, don't

409
00:21:51,600 --> 00:21:53,200
starve or something?

410
00:21:53,200 --> 00:21:58,600
Where, you know, the game is 3D with cards for it.

411
00:21:58,600 --> 00:22:01,900
But it, you know, it never is allowed to go like this because I feel

412
00:22:01,900 --> 00:22:04,300
like well as soon as things start to go like that, it starts to look

413
00:22:04,300 --> 00:22:06,400
kind of crappy whereas if it's always line.

414
00:22:06,500 --> 00:22:10,700
Up, you know, it maintains the believability quite a bit more in my

415
00:22:10,700 --> 00:22:11,200
opinion.

416
00:22:11,800 --> 00:22:16,400
So that's what we want to start looking at figuring out a good way to

417
00:22:16,400 --> 00:22:19,900
get to that point and so we will.

418
00:22:20,200 --> 00:22:22,600
Yeah, we will do that.

419
00:22:22,600 --> 00:22:26,600
But in the meantime, what I do want to do is I want to have a way to

420
00:22:26,600 --> 00:22:29,700
freely rotate, the camera in the world.

421
00:22:30,100 --> 00:22:32,800
And the reason that I want to be able to freely rotate the camera in

422
00:22:32,800 --> 00:22:36,300
the world is because for debugging purposes.

423
00:22:36,700 --> 00:22:39,500
once we start trying to construct,

424
00:22:40,400 --> 00:22:47,900
Fake 3D things, like how we want to align cards to the camera and

425
00:22:47,900 --> 00:22:48,800
stuff like that.

426
00:22:49,200 --> 00:22:52,300
We're going to want to be able to spin the world around.

427
00:22:53,500 --> 00:22:58,000
And not have the cards turn to faces or anything but rather just see

428
00:22:58,000 --> 00:23:02,100
what their actual 3D geometry looked like because that's going to make

429
00:23:02,100 --> 00:23:05,100
debugging a lot easier for us, right?

430
00:23:07,200 --> 00:23:10,900
If we can't ever see the world from any angle, other than just, the

431
00:23:10,900 --> 00:23:13,400
one we're actually viewing the game at.

432
00:23:14,000 --> 00:23:17,700
It's going to be hard for us to debug because a number of different

433
00:23:17,700 --> 00:23:21,300
2D, a number of different 3D constructions.

434
00:23:21,500 --> 00:23:26,400
Might produce very similar, or identical 2D projections.

435
00:23:27,200 --> 00:23:30,200
And will be like, oh, you know, we tried to make this car that was

436
00:23:30,200 --> 00:23:32,200
like, standing up like this, and it's not quite working, right?

437
00:23:32,200 --> 00:23:35,300
But we can't tell what are the actual 3D co-ordinates of that thing

438
00:23:35,300 --> 00:23:35,900
and we can't

439
00:23:36,200 --> 00:23:38,200
Spin the world to see what they are.

440
00:23:38,800 --> 00:23:39,800
And so that's a position.

441
00:23:39,800 --> 00:23:41,300
I didn't want to find myself in.

442
00:23:41,300 --> 00:23:45,700
So what I want to do is I want to be able to extend the notion

443
00:23:46,700 --> 00:23:50,800
of what the game specifies for that transform, so that it can spin

444
00:23:50,800 --> 00:23:53,900
everything around if it wants to and we're never going to use the full

445
00:23:53,900 --> 00:23:56,500
spinning in the actual game.

446
00:23:56,500 --> 00:23:59,900
Although we might use the tilting

447
00:24:00,200 --> 00:24:01,400
Right, so it's not.

448
00:24:01,500 --> 00:24:03,400
It's not like it's completely useless for the game.

449
00:24:03,400 --> 00:24:07,100
We may want to Tilt The World Slightly just to give it a little 3D

450
00:24:07,400 --> 00:24:09,200
more 3D feel to it, for example.

451
00:24:10,100 --> 00:24:13,500
So you know it might be something that gets used in game as well.

452
00:24:13,700 --> 00:24:19,200
It's just you know, for the most part it's a the main feature that

453
00:24:19,200 --> 00:24:23,100
we're looking for here is to be able to debug our render output.

454
00:24:25,600 --> 00:24:26,100
All right.

455
00:24:29,300 --> 00:24:32,800
So, let's talk a little bit more about how that would work.

456
00:24:33,300 --> 00:24:38,500
So right now, we're specifying a bunch of stuff in 2D and we've got

457
00:24:38,500 --> 00:24:39,800
this projection Matrix here.

458
00:24:40,800 --> 00:24:44,300
Now, I'd like to talk a little bit about matrices.

459
00:24:44,300 --> 00:24:48,000
Again, we kind of touch on them frequently in handmade hero.

460
00:24:48,000 --> 00:24:51,700
And I think I've hopefully giving you enough insight into how matrices

461
00:24:51,700 --> 00:24:52,100
work.

462
00:24:53,200 --> 00:24:57,400
We talked about them, like I said, many times, so hopefully you're

463
00:24:57,400 --> 00:24:59,300
getting pretty comfortable with matrices.

464
00:24:59,500 --> 00:25:03,100
But just going to say one more time, some things about how these work.

465
00:25:03,100 --> 00:25:06,700
So that again we can continue to take those baby steps towards having

466
00:25:06,700 --> 00:25:08,800
the pipeline be operating completely in 3D.

467
00:25:09,700 --> 00:25:12,000
So here is day 361.

468
00:25:13,800 --> 00:25:18,500
And we are talking about rotation matrices.

469
00:25:26,700 --> 00:25:27,100
Right.

470
00:25:29,000 --> 00:25:32,000
So, fundamentally speaking.

471
00:25:33,100 --> 00:25:36,600
Hopefully, you understand how rotation works at this point, if you

472
00:25:36,600 --> 00:25:39,800
don't, you want to go back to the handmade hero, where we talked about

473
00:25:39,800 --> 00:25:44,500
this in depth, where we implemented rotation of our bitmaps, because I

474
00:25:44,500 --> 00:25:47,200
explained it all there, but just quickly.

475
00:25:47,200 --> 00:25:49,900
Again, always remember when you're working with rotation.

476
00:25:50,000 --> 00:25:52,300
Remember your unit circle, right?

477
00:25:52,700 --> 00:25:53,700
Here's our unit circle.

478
00:25:54,700 --> 00:26:00,200
Poorly drawn by me and remember our right triangle.

479
00:26:02,100 --> 00:26:05,800
Let me draw here and remember the fact that the x coordinate of the

480
00:26:05,800 --> 00:26:07,500
right triangle for a given angle.

481
00:26:09,100 --> 00:26:12,100
Okay, the x-coordinate is the cosine of that angle.

482
00:26:12,700 --> 00:26:14,700
And remember that the y-coordinate

483
00:26:15,600 --> 00:26:20,600
Of that point on the unit circle is the sine of that angle.

484
00:26:21,500 --> 00:26:27,400
This fundamental diagram to remember is the key to always sort of

485
00:26:29,400 --> 00:26:34,100
understanding, how to re-derive, rotation matrices, or really any

486
00:26:34,100 --> 00:26:39,500
rotational element that you're working with except maybe quaternions,

487
00:26:39,500 --> 00:26:43,000
because they involve a bunch of more extensive crazy math nonsense.

488
00:26:44,900 --> 00:26:47,400
But even they're still based on this concept, you just need to know

489
00:26:47,400 --> 00:26:48,000
more stuff.

490
00:26:48,000 --> 00:26:52,100
But rotation in general, if you remember the unit circle,

491
00:26:57,800 --> 00:26:58,900
you will be happy camper.

492
00:27:00,000 --> 00:27:01,200
Will you be a happy camper?

493
00:27:01,900 --> 00:27:02,300
Well.

494
00:27:04,600 --> 00:27:07,100
What we know we need to do, right?

495
00:27:07,400 --> 00:27:11,500
Whenever we are talking about rotation is we know we need to take a

496
00:27:11,500 --> 00:27:17,700
point and we need to reinterpret it along new axes right?

497
00:27:18,400 --> 00:27:21,300
So fundamentally what we're doing when we asked to rotate.

498
00:27:21,300 --> 00:27:26,400
Something is we're saying we have a point that is currently expressed

499
00:27:26,500 --> 00:27:29,400
right in some coordinate system, right?

500
00:27:29,800 --> 00:27:33,900
It's expressed in a coordinate system that is not rotated.

501
00:27:34,200 --> 00:27:35,900
For our purposes, right?

502
00:27:36,100 --> 00:27:40,500
So the X and Y, axes are set up, so that they are aligned with the

503
00:27:40,500 --> 00:27:42,400
screen or the world or whatever.

504
00:27:42,800 --> 00:27:46,300
We have a point expressed in that system and to rotate that point.

505
00:27:46,300 --> 00:27:50,700
What were primarily talking about is figuring out how to reinterpret

506
00:27:50,800 --> 00:27:55,100
this point in the exact same way that it was interpreted before.

507
00:27:55,100 --> 00:27:57,900
Just along different axes.

508
00:27:58,100 --> 00:28:00,200
Those axes have been rotated, right?

509
00:28:00,200 --> 00:28:01,700
They've been lifted.

510
00:28:03,200 --> 00:28:04,400
Up, right?

511
00:28:05,300 --> 00:28:08,900
And so the first step in deriving, any sort of rotation and again, I

512
00:28:08,900 --> 00:28:09,600
would encourage you go back.

513
00:28:09,600 --> 00:28:11,700
We spent more time in this before, I'd encourage you go back.

514
00:28:11,700 --> 00:28:14,500
If you're hazy on this about how it works, I'm not going to re-explain

515
00:28:14,500 --> 00:28:18,500
it 100% here just to avoid constantly reaching the same things.

516
00:28:20,900 --> 00:28:21,800
Deriving.

517
00:28:21,800 --> 00:28:25,100
These two axes is very simple, right?

518
00:28:25,300 --> 00:28:31,600
First of all deriving the new x axis when we rotate something is as

519
00:28:31,600 --> 00:28:35,900
simple as interpreting, this diagram directly because as you can see

520
00:28:35,900 --> 00:28:41,100
the rotation about an angle for the x-axis is just directly

521
00:28:41,100 --> 00:28:42,400
interpreting this diagram.

522
00:28:42,600 --> 00:28:48,800
It's just literally cosine, Theta, sine Theta because hey, that starts

523
00:28:48,800 --> 00:28:49,300
pointing this

524
00:28:49,600 --> 00:28:53,700
Right along the x-axis when Theta is 0 and it just winds its way

525
00:28:53,700 --> 00:28:54,600
around the circle.

526
00:28:54,600 --> 00:28:56,500
Exactly like we want, right?

527
00:28:57,600 --> 00:29:01,100
So the only tricky bit is, what do we do about the y-axis?

528
00:29:01,100 --> 00:29:04,700
Because that starts this way and the answer there is, well, it's

529
00:29:04,700 --> 00:29:06,900
really not all that much more difficult.

530
00:29:06,900 --> 00:29:11,600
All we have to do is pretend that our diagram started pointing upwards

531
00:29:11,800 --> 00:29:14,100
and if you think about what happens when it would start pointing

532
00:29:14,100 --> 00:29:14,400
upwards.

533
00:29:14,400 --> 00:29:19,000
Well cosine Theta is the thing that equals 1 at the start.

534
00:29:19,000 --> 00:29:23,100
So we want R cosine Theta to beat the y-coordinate, right?

535
00:29:23,100 --> 00:29:24,300
Here's our x-axis.

536
00:29:26,500 --> 00:29:27,700
Here's our y-axis.

537
00:29:28,400 --> 00:29:31,300
So our y coordinate is actually the thing that starts at one.

538
00:29:31,300 --> 00:29:34,400
Right here was our X that starts at 1, it goes down to 0.

539
00:29:34,400 --> 00:29:35,900
And then 2 negative 1 here.

540
00:29:35,900 --> 00:29:38,400
The exact same thing is happening in y, right?

541
00:29:38,400 --> 00:29:41,000
It's starting at 1, it's going to 0, then it's going to -1.

542
00:29:41,400 --> 00:29:45,400
So we know that cosine, Theta actually goes in the bottom, right?

543
00:29:45,400 --> 00:29:48,500
It goes in the y-coordinate and it's the x-coordinate that's going to

544
00:29:48,500 --> 00:29:49,500
be something else.

545
00:29:49,600 --> 00:29:50,600
What does the x coordinate?

546
00:29:50,600 --> 00:29:54,500
Well, the x-coordinate starts at 0, goes to negative 1.

547
00:29:54,900 --> 00:29:57,400
Comes back to zero, goes to positive one, right?

548
00:29:58,300 --> 00:29:59,800
That's the same thing that sign.

549
00:30:00,000 --> 00:30:03,100
Does here starts at 0, goes to 1 goes to 0.

550
00:30:03,100 --> 00:30:06,500
Except the sign is flipped instead of going to negative 1 first,

551
00:30:06,500 --> 00:30:06,600
right?

552
00:30:06,600 --> 00:30:08,400
It doesn't go this way, it goes this way.

553
00:30:08,700 --> 00:30:12,300
So all we need to do is to flip the sign on that and we get the right

554
00:30:12,300 --> 00:30:12,700
motion.

555
00:30:13,400 --> 00:30:15,000
Now, you'll notice this.

556
00:30:15,500 --> 00:30:16,200
Right?

557
00:30:16,200 --> 00:30:18,900
Is just the perpendicular operator, right?

558
00:30:18,900 --> 00:30:21,400
Flip the two and negate one of them, right?

559
00:30:21,400 --> 00:30:24,800
The - flip, it's just the perpendicular operator, which we've learned

560
00:30:24,800 --> 00:30:26,000
in 2D before, as well.

561
00:30:26,000 --> 00:30:28,800
So you could have also looked at it as how do I get a perpendicular to

562
00:30:28,800 --> 00:30:29,800
this sauce?

563
00:30:30,000 --> 00:30:31,700
I'll see gentlemen here, right?

564
00:30:33,200 --> 00:30:37,700
And you can see that we can really quickly derive the X and Y axes

565
00:30:37,700 --> 00:30:38,700
that we wanted.

566
00:30:39,000 --> 00:30:39,400
Okay?

567
00:30:42,100 --> 00:30:45,500
so now the question is, if I can derive axes,

568
00:30:46,600 --> 00:30:49,000
How do I derive a rotation Matrix?

569
00:30:50,400 --> 00:30:51,000
Unfortunately.

570
00:30:51,000 --> 00:30:53,600
A lot of programmers people who aren't very familiar with 3D and

571
00:30:53,600 --> 00:30:56,300
haven't done a lot of work in it so they haven't had to work it out.

572
00:30:58,800 --> 00:31:01,500
Treat rotation matrices as something.

573
00:31:01,500 --> 00:31:07,000
They have to look up in a book that is unfortunate because it's it's

574
00:31:07,000 --> 00:31:09,100
much better to be able to derive them yourself.

575
00:31:09,600 --> 00:31:12,300
And so in our circumstance here at the question is well?

576
00:31:12,300 --> 00:31:15,700
Okay, you know for those of you understood everything that I just said

577
00:31:15,700 --> 00:31:16,100
there,

578
00:31:17,500 --> 00:31:20,000
But don't necessarily know what a rotation Matrix is or how to make

579
00:31:20,000 --> 00:31:20,400
one.

580
00:31:21,000 --> 00:31:23,600
The question is, how do I make a rotation Matrix?

581
00:31:23,600 --> 00:31:26,400
If I know how to do this fundamental operation?

582
00:31:26,400 --> 00:31:29,500
Because I understand the math here but maybe I don't know enough about

583
00:31:29,600 --> 00:31:32,900
matrices to translate that into something that I could use in a matrix

584
00:31:32,900 --> 00:31:33,400
sense.

585
00:31:34,200 --> 00:31:37,000
Well, the good news is as we said multiple times on the stream, when

586
00:31:37,000 --> 00:31:43,100
we talk about matrices, matrices are just one way of using axes to

587
00:31:43,100 --> 00:31:44,000
reinterpret something.

588
00:31:44,000 --> 00:31:46,500
So actually, this right here,

589
00:31:47,100 --> 00:31:51,700
Is the derivation of a rotation Matrix and let me show you why.

590
00:31:52,600 --> 00:31:58,700
So suppose I was to take a 2d Matrix and some incoming points, right?

591
00:31:59,100 --> 00:32:02,900
And I should put axis down here obviously, so we know.

592
00:32:02,900 --> 00:32:05,600
We're talking about, not the X and Y, coordinates, right?

593
00:32:06,000 --> 00:32:09,400
An incoming X and Y point that I put in here.

594
00:32:09,600 --> 00:32:12,500
Right, again, we've done this before on handmade Harris.

595
00:32:12,500 --> 00:32:16,300
I'm just reiterating it here if I imagine that, my

596
00:32:16,900 --> 00:32:17,500
Access.

597
00:32:17,800 --> 00:32:22,100
My Matrix here is a 2d Matrix that has four values.

598
00:32:22,300 --> 00:32:24,700
We know we've done this a million times.

599
00:32:24,700 --> 00:32:26,500
Well 100 times on handmade here.

600
00:32:27,100 --> 00:32:33,600
We know that we will just get ax plus b y, + CX plus d, y, right.

601
00:32:33,600 --> 00:32:34,700
This is what we will get.

602
00:32:35,200 --> 00:32:38,400
Well, what does this look like to?

603
00:32:38,400 --> 00:32:39,500
You write?

604
00:32:39,500 --> 00:32:45,500
If you look at what you see here, this is a vector, right?

605
00:32:45,800 --> 00:32:46,300
It is

606
00:32:47,000 --> 00:32:49,300
Essentially, the two vectors some together.

607
00:32:49,300 --> 00:32:53,300
If you want to break it up that way, write any Vector.

608
00:32:53,300 --> 00:32:56,700
That's something plus something on both sides, you can split down the

609
00:32:56,700 --> 00:32:59,800
middle and just write it as Vector math.

610
00:33:00,200 --> 00:33:08,500
I could say x CX, plus b, y, d y, and these two things are equal,

611
00:33:08,500 --> 00:33:08,600
right?

612
00:33:08,600 --> 00:33:10,800
Because when we add two vectors together, we just add their

613
00:33:10,800 --> 00:33:12,500
corresponding elements, right?

614
00:33:12,800 --> 00:33:17,700
If we further take this and separate out the pieces, we say well the x

615
00:33:17,700 --> 00:33:18,600
is common here.

616
00:33:18,600 --> 00:33:20,200
And the why is common here?

617
00:33:20,300 --> 00:33:22,300
So it's just the AC and BD.

618
00:33:22,400 --> 00:33:24,500
It's really just x times.

619
00:33:24,600 --> 00:33:29,900
AC plus y times, BD and hey.

620
00:33:30,000 --> 00:33:34,500
Look at what that does, that is specifically, the axial,

621
00:33:34,500 --> 00:33:40,400
interpretation of this x and y, coordinate along the axis, AC, and the

622
00:33:40,400 --> 00:33:41,800
axis b d, right?

623
00:33:41,800 --> 00:33:46,000
Because remember what multiplication of a scalar does to a vector, if

624
00:33:46,000 --> 00:33:48,000
I have a vector, right?

625
00:33:48,000 --> 00:33:50,800
And it's pointing in this direction, let's say this is the vector AC,

626
00:33:50,800 --> 00:33:51,700
right?

627
00:33:51,700 --> 00:33:53,800
And I multiply it by some value X.

628
00:33:53,800 --> 00:33:59,300
That means I'm walking out along it by X distance right now, granted,

629
00:33:59,300 --> 00:33:59,500
I

630
00:34:00,000 --> 00:34:01,300
Buying it by the length of this Vector.

631
00:34:01,300 --> 00:34:05,700
But if this is a unit Vector, it has a length of one.

632
00:34:05,800 --> 00:34:09,100
So I'm literally just going the distance X along it, right?

633
00:34:09,100 --> 00:34:12,900
Because it doesn't change that amount if it was scaled right would

634
00:34:12,900 --> 00:34:15,600
change the amount but it's not going to if it's a unit vector.

635
00:34:16,400 --> 00:34:20,100
So the exact operation that I wanted to do here.

636
00:34:20,100 --> 00:34:22,300
I have two vectors, right?

637
00:34:22,300 --> 00:34:28,100
I have my x axis and my Y axis, the exact operation of walking out

638
00:34:28,100 --> 00:34:28,699
along X.

639
00:34:28,699 --> 00:34:34,000
And then walking out along y to a particular location is exactly what

640
00:34:34,000 --> 00:34:42,300
this Matrix actually does, if I use AC and BD as my axes.

641
00:34:42,300 --> 00:34:46,100
So, hey, that's exactly what I can do to build my rotation.

642
00:34:46,800 --> 00:34:48,600
This is the axis for X.

643
00:34:49,699 --> 00:34:54,000
This is the axis for why, I know that is what the math will do.

644
00:34:54,199 --> 00:34:56,900
When I multiplied by the x, y, coordinate Vector.

645
00:34:57,500 --> 00:35:00,800
So all I have to do is shove the actual values.

646
00:35:00,800 --> 00:35:05,100
I want for those axes into their corresponding locations, and I am

647
00:35:05,100 --> 00:35:06,200
done, right?

648
00:35:06,200 --> 00:35:08,300
This is the x-axis here.

649
00:35:09,700 --> 00:35:15,700
This is the y-axis here and that is what the columns of a matrix r

650
00:35:16,200 --> 00:35:17,800
that is literally what they are.

651
00:35:17,800 --> 00:35:22,900
The Columns of a matrix are axes along which the input Vector that

652
00:35:22,900 --> 00:35:26,600
you're multiplying by is walking each coordinate.

653
00:35:26,600 --> 00:35:31,000
The x-coordinate walks along the First Column the the second most, so

654
00:35:31,000 --> 00:35:34,000
I should say the first coordinate walks along the First Column.

655
00:35:34,000 --> 00:35:37,400
The second coordinate walks along the second column, third,

656
00:35:37,400 --> 00:35:39,300
coordinate, third column, and so on.

657
00:35:39,400 --> 00:35:40,700
On, right?

658
00:35:41,400 --> 00:35:45,000
So if we look at how this would actually look, if we actually just

659
00:35:45,000 --> 00:35:49,100
shove these values in there, we have derived our rotation Matrix.

660
00:35:49,400 --> 00:35:51,200
We put the cosine Theta here.

661
00:35:51,300 --> 00:35:53,100
We put the sine Theta here, right?

662
00:35:53,100 --> 00:35:58,000
Because the x axis there, they are cosine sine Y axis.

663
00:35:58,000 --> 00:35:59,700
Next column negative sine

664
00:36:01,900 --> 00:36:02,800
Cosine Theta.

665
00:36:05,400 --> 00:36:05,900
Right.

666
00:36:07,700 --> 00:36:09,900
So that is a 2d rotation Matrix.

667
00:36:17,800 --> 00:36:18,200
Okay.

668
00:36:21,200 --> 00:36:22,600
Yeah, so there you go.

669
00:36:23,900 --> 00:36:24,500
Happy day.

670
00:36:25,100 --> 00:36:26,800
So now the question is, well, okay?

671
00:36:28,800 --> 00:36:33,700
I get it right, I get it for 2D rotation, matrices, that's fine, but

672
00:36:33,700 --> 00:36:36,400
we need 3D rotation matrices, right?

673
00:36:37,300 --> 00:36:39,500
We need to have a 3D rotation Matrix Somehow Here.

674
00:36:45,700 --> 00:36:46,800
And this is all well and good.

675
00:36:46,800 --> 00:36:49,000
But you know, how does that extend something in 3D?

676
00:36:50,600 --> 00:36:55,100
Well, fortunately for us all the things that I just said, matrices

677
00:36:55,100 --> 00:36:59,600
don't really change depending on their Dimension, if they're Square.

678
00:36:59,900 --> 00:37:02,900
Anyway, there's a non Square matrices, have other properties.

679
00:37:02,900 --> 00:37:05,900
That, you know, we don't want to really bring in this point, but

680
00:37:06,300 --> 00:37:07,300
Square matrices.

681
00:37:09,400 --> 00:37:11,800
Always work the same way, no matter what dimension you're in.

682
00:37:12,400 --> 00:37:15,800
So exactly what I just said, right?

683
00:37:25,100 --> 00:37:25,600
Exactly.

684
00:37:25,600 --> 00:37:29,400
What I just said is true of 2D.

685
00:37:29,400 --> 00:37:32,500
Matrices is also true of 3D matrices, right?

686
00:37:32,600 --> 00:37:35,500
The math is substantively doesn't change at all.

687
00:37:36,500 --> 00:37:40,500
It still produces the exact same kind of equations, right?

688
00:37:40,600 --> 00:37:45,400
And you can see me working it out here for your amusement

689
00:37:53,000 --> 00:37:53,600
Right?

690
00:37:53,700 --> 00:37:55,500
Here are the elements of the Matrix here.

691
00:37:55,500 --> 00:37:56,500
Is what it's produced.

692
00:37:56,600 --> 00:37:58,200
You can see how very clearly.

693
00:37:58,500 --> 00:37:59,400
I don't need an arrow.

694
00:37:59,400 --> 00:38:07,000
I suppose there how very clearly that equals ax DX, g x, plus b.

695
00:38:07,000 --> 00:38:13,300
Y ey h y, plus c, z FZ.

696
00:38:13,800 --> 00:38:14,400
I z

697
00:38:15,600 --> 00:38:16,200
Right.

698
00:38:16,200 --> 00:38:20,800
Which again if you pull out the common terms is just X adg.

699
00:38:21,200 --> 00:38:23,800
Look at that column right there, right?

700
00:38:23,800 --> 00:38:24,900
That's the x-axis.

701
00:38:26,700 --> 00:38:27,700
Take a look at this guy.

702
00:38:28,500 --> 00:38:34,700
Plus, why beh oops went behind my head there and thought I wasn't

703
00:38:34,700 --> 00:38:35,100
drawn.

704
00:38:36,100 --> 00:38:40,100
Why beh that's the y-axis right there multiplies, the y coordinate

705
00:38:40,100 --> 00:38:40,700
that comes in.

706
00:38:42,100 --> 00:38:47,700
And finally, we've got the Z axis, which is our new axis CFI, right?

707
00:38:48,200 --> 00:38:48,900
And there it is.

708
00:38:51,100 --> 00:38:57,600
So again, First Step, very straightforward, we now know a 3D Matrix.

709
00:38:59,000 --> 00:38:59,700
is just the,

710
00:39:00,000 --> 00:39:04,500
Access in the First Column, the y-axis in the second, column the Z

711
00:39:04,500 --> 00:39:09,300
axis in the third column, that's it, right?

712
00:39:13,000 --> 00:39:13,900
Very, very simple.

713
00:39:15,500 --> 00:39:22,400
Now, let's take a look though at how we extend our rotation into three

714
00:39:22,400 --> 00:39:26,200
dimensions because there's an open question.

715
00:39:26,200 --> 00:39:32,700
Now, how do I produce a 3D set of axes that are rotated about some

716
00:39:33,300 --> 00:39:34,700
that are rotated in some way?

717
00:39:35,000 --> 00:39:38,000
Because I don't really know how to do that, right?

718
00:39:38,000 --> 00:39:44,100
We looked at the 2D version and you know, maybe you kind of can't, you

719
00:39:44,100 --> 00:39:44,900
know, see

720
00:39:45,300 --> 00:39:49,900
Actually how that extends, because that was only for a rotation in 2D.

721
00:39:51,500 --> 00:39:53,800
Well, the answer is for starters.

722
00:39:54,300 --> 00:39:57,700
There is a way we can derive sort of a separate thing.

723
00:39:57,800 --> 00:39:59,500
Maybe we should do at some point.

724
00:39:59,600 --> 00:40:01,200
We don't want to it's not relevant ordering.

725
00:40:01,200 --> 00:40:05,200
Now I'm going to focus on doing the primary rotations first because

726
00:40:05,200 --> 00:40:08,900
you should do those and then we can talk about deriving, generic

727
00:40:09,100 --> 00:40:10,700
rotation later.

728
00:40:10,700 --> 00:40:16,000
But so there's two kinds of rotation we want to derive one because it

729
00:40:16,300 --> 00:40:16,900
I guess I should

730
00:40:18,500 --> 00:40:19,500
To avoid getting hit myself.

731
00:40:19,500 --> 00:40:22,500
I should also mention in two Dimensions.

732
00:40:22,500 --> 00:40:25,800
There's only one way to rotate really, right?

733
00:40:26,200 --> 00:40:30,200
The only access we can rotate around is is sort of the axis that isn't

734
00:40:30,200 --> 00:40:30,700
there, right?

735
00:40:30,700 --> 00:40:33,800
We've got X and Y and we're sort of act rotating around the z-axis,

736
00:40:33,800 --> 00:40:34,400
right?

737
00:40:34,500 --> 00:40:36,100
We're looking down on this thing.

738
00:40:36,400 --> 00:40:38,400
You know, the Z axis is pointing up.

739
00:40:38,500 --> 00:40:42,600
We've got a Sprite on the screen here is the x-axis, here's the y-axis

740
00:40:42,800 --> 00:40:45,200
and we're really rotating around this axis.

741
00:40:45,600 --> 00:40:48,200
Right, we're rotating around the z-axis.

742
00:40:48,200 --> 00:40:50,100
SS into Dr.

743
00:40:50,100 --> 00:40:51,100
Rotation is around an axis.

744
00:40:51,100 --> 00:40:52,100
We can't even see.

745
00:40:52,200 --> 00:40:53,700
It's an access that isn't even there.

746
00:40:54,000 --> 00:40:56,400
Right in 3D.

747
00:40:56,500 --> 00:41:00,900
We now have at any arbitrary choice of access we could rotate about

748
00:41:01,000 --> 00:41:03,400
any number of infinite number of axes, right?

749
00:41:03,400 --> 00:41:07,800
Because in 3D, we can move and we can specify any sort of access we

750
00:41:07,800 --> 00:41:09,400
want to write.

751
00:41:11,000 --> 00:41:14,800
It's one of the reasons 3D is so much harder than 2D is specifically

752
00:41:14,800 --> 00:41:18,200
because of rotations positions in 2D and 3D working identically.

753
00:41:18,200 --> 00:41:21,600
There's no difference between a petition in position in 3D and 2D they

754
00:41:21,800 --> 00:41:23,100
perform exactly the same.

755
00:41:23,200 --> 00:41:26,900
They are simple, Vector spaces, euclidean Vector spaces with no

756
00:41:26,900 --> 00:41:30,800
unusual properties rotation.

757
00:41:30,800 --> 00:41:32,200
In 2D is very simple.

758
00:41:32,200 --> 00:41:35,900
You saw it very, very straightforward in 3D, it becomes very

759
00:41:35,900 --> 00:41:40,000
complicated specifically because now there is not

760
00:41:40,200 --> 00:41:42,500
Just one axis of rotation.

761
00:41:42,900 --> 00:41:46,800
There is this complicated way in which you can rotate stuff about any

762
00:41:46,800 --> 00:41:49,100
number of axes in 3D.

763
00:41:50,600 --> 00:41:53,300
I know it's a little bit weird but you know it intuitively, right?

764
00:41:54,000 --> 00:41:57,100
You can't think of any other access to rotate something around other

765
00:41:57,100 --> 00:41:58,600
than the one that comes out of the screen.

766
00:41:58,600 --> 00:41:59,500
When we're talking about 2D,

767
00:42:00,500 --> 00:42:02,800
But in three dimensions, when you're just looking about the real

768
00:42:02,800 --> 00:42:06,700
world, you're like, well, I could pick any any line, right?

769
00:42:07,400 --> 00:42:11,200
I can rotate around, right any there any line in 3D?

770
00:42:11,200 --> 00:42:13,000
It could be my Axis of rotation.

771
00:42:13,000 --> 00:42:17,800
There's no difference between any of those in terms of the validity of

772
00:42:17,800 --> 00:42:18,300
what I get.

773
00:42:18,300 --> 00:42:24,200
If I rotate into D, I can't do that because in 2D any line that is in

774
00:42:24,200 --> 00:42:29,700
the plane of the actual two dimensional space would rotate things out

775
00:42:29,700 --> 00:42:29,900
of

776
00:42:30,000 --> 00:42:32,500
That two dimensional space and we wouldn't be in 2D anymore.

777
00:42:32,500 --> 00:42:34,800
You need the third dimension in order to use them.

778
00:42:35,200 --> 00:42:40,200
So the only access which keeps everything still in 2D is the one that

779
00:42:40,200 --> 00:42:44,500
doesn't go in that plane at all which is the one that comes out of the

780
00:42:44,500 --> 00:42:45,100
space.

781
00:42:45,100 --> 00:42:45,700
Right.

782
00:42:46,600 --> 00:42:49,300
So rotation in 2D is very special.

783
00:42:49,500 --> 00:42:52,800
It's very different and much more simplified.

784
00:42:54,300 --> 00:43:00,700
In 3D, you're in a place where now it's possible to construct lines in

785
00:43:00,700 --> 00:43:04,700
the space that can also rotate things in the space and it's the first

786
00:43:04,700 --> 00:43:10,000
time you can't do that in 1D or 2D 3D is the first time that happens

787
00:43:10,000 --> 00:43:11,300
which is why it's special.

788
00:43:11,500 --> 00:43:18,600
It's why it's hard and it's why people are constantly dealing with

789
00:43:20,400 --> 00:43:25,200
So much more complex structures, like what turn Ian's, like,

790
00:43:25,200 --> 00:43:29,200
exponential Maps, you know, these sorts of things just you never

791
00:43:29,200 --> 00:43:30,700
really have to do them in 2D.

792
00:43:30,900 --> 00:43:33,700
You'd never even have to know about them into D if you didn't want to.

793
00:43:34,200 --> 00:43:37,800
Because 2D rotations you can get by with just a simple scalar and

794
00:43:37,800 --> 00:43:40,800
thinking about rotating around the z-axis and that will work, you will

795
00:43:40,800 --> 00:43:44,000
never be forced to confront any more significant problems.

796
00:43:46,600 --> 00:43:50,700
All right, sorry for that long aside but I kind of wanted to make sure

797
00:43:50,700 --> 00:43:53,600
everyone sort of understood what was going on there.

798
00:43:55,500 --> 00:43:59,200
All right, so now talking a little bit more about the 3D rotation

799
00:43:59,200 --> 00:43:59,900
matrices.

800
00:44:00,200 --> 00:44:03,500
So how do we extend the logic that we did here, right?

801
00:44:05,700 --> 00:44:08,800
This derivation, if you think about it.

802
00:44:10,200 --> 00:44:15,100
The key insight to creating rotation, matrices, in 3D around.

803
00:44:15,100 --> 00:44:16,300
Cardinal axes.

804
00:44:18,200 --> 00:44:22,200
Is to realize that this math just works.

805
00:44:24,000 --> 00:44:24,800
Unchanged.

806
00:44:25,400 --> 00:44:26,000
Right.

807
00:44:26,200 --> 00:44:30,300
Because if you just want to rotate around a cardinal axis, the other

808
00:44:30,300 --> 00:44:32,400
axis is left undisturbed.

809
00:44:32,700 --> 00:44:33,800
Now what do I mean by that?

810
00:44:34,000 --> 00:44:36,500
Well, let's suppose that we were in 3D.

811
00:44:40,100 --> 00:44:41,500
Here's my 3D coordinate system.

812
00:44:41,700 --> 00:44:42,600
Here is the X.

813
00:44:42,700 --> 00:44:43,600
Here is the Y.

814
00:44:43,600 --> 00:44:44,400
Here's the Z.

815
00:44:45,300 --> 00:44:45,800
Okay.

816
00:44:46,500 --> 00:44:46,800
Actually.

817
00:44:46,800 --> 00:44:47,300
That's horrible.

818
00:44:47,300 --> 00:44:48,300
That's left-handed.

819
00:44:49,800 --> 00:44:50,700
I take it all back.

820
00:44:50,900 --> 00:44:51,700
Here's the X.

821
00:44:52,300 --> 00:44:53,000
Here's the why.

822
00:44:54,200 --> 00:44:56,100
Here is this a much better?

823
00:44:58,400 --> 00:44:59,800
You can follow the right-hand rule.

824
00:45:00,000 --> 00:45:05,100
That you're always in the right coordinate system in terms of left and

825
00:45:05,100 --> 00:45:05,700
a right handed.

826
00:45:05,700 --> 00:45:09,300
I'll just mention this really quickly a left handed coordinate system

827
00:45:10,600 --> 00:45:12,500
versus a right-handed coordinate system.

828
00:45:15,500 --> 00:45:18,800
Is what the winding order is of your axes.

829
00:45:19,100 --> 00:45:23,900
So if I take my x-axis in my y-axis and I draw them like this, then

830
00:45:23,900 --> 00:45:26,500
the question is, which direction does ego?

831
00:45:26,700 --> 00:45:30,700
Does is z+ in this direction, or is it positive in this direction?

832
00:45:31,000 --> 00:45:33,400
If it's positive in this direction, it's left-handed.

833
00:45:33,500 --> 00:45:36,300
And if it's positive in this direction is right handed, right?

834
00:45:36,400 --> 00:45:36,800
Oops,

835
00:45:40,000 --> 00:45:44,000
And the reason that we call it that is if you imagine putting your

836
00:45:44,100 --> 00:45:47,400
hand with like a thumbs-up sign, right?

837
00:45:51,300 --> 00:45:52,200
That's the worst.

838
00:45:52,500 --> 00:45:53,600
I realize that's horrible.

839
00:45:56,000 --> 00:45:58,400
If you imagine curling your hand.

840
00:45:58,400 --> 00:46:00,800
So here are your fingers, right?

841
00:46:03,300 --> 00:46:04,600
And there's your thumb.

842
00:46:05,400 --> 00:46:07,700
Well that's not just awful, that's just the worst thumb.

843
00:46:07,800 --> 00:46:12,300
All right, I need Anna here to draw something for us.

844
00:46:13,400 --> 00:46:16,200
This is why I'm not the artist at Molly rocket.

845
00:46:16,800 --> 00:46:19,000
If you curl your hand over, right?

846
00:46:19,000 --> 00:46:19,800
Here's your hand.

847
00:46:19,800 --> 00:46:20,800
Here's your watch.

848
00:46:22,100 --> 00:46:24,300
Underhand your thumb.

849
00:46:24,400 --> 00:46:28,400
If your you take your right hand and do this, if you curl from the

850
00:46:28,400 --> 00:46:32,200
x-axis toward the y-axis, right?

851
00:46:32,200 --> 00:46:36,200
Your thumb will point along the z-axis, right?

852
00:46:36,300 --> 00:46:41,700
So curl, your fingers from X towards Y and your thumb points out, the

853
00:46:41,700 --> 00:46:42,500
Z axis.

854
00:46:43,100 --> 00:46:46,100
If you do that with your right hand and it works, then you're

855
00:46:46,100 --> 00:46:47,100
right-handed.

856
00:46:47,100 --> 00:46:51,000
If on the other hand, I took my left hand and you know it would be

857
00:46:51,000 --> 00:46:51,700
curling this

858
00:46:51,900 --> 00:46:52,200
Way.

859
00:46:52,400 --> 00:46:52,900
Right.

860
00:46:53,800 --> 00:46:55,000
So here's my fingers coming.

861
00:46:55,000 --> 00:46:57,400
This way the thumb would come out this way.

862
00:47:00,700 --> 00:47:03,000
Here's the watch on the hand again, right?

863
00:47:03,100 --> 00:47:05,600
The thumb would point that direction, right?

864
00:47:05,600 --> 00:47:09,300
If I curled from the X to the Y and hence, dad is a left handed

865
00:47:09,300 --> 00:47:10,900
coordinate system, right?

866
00:47:11,000 --> 00:47:14,700
That's why that nominee that's what that nominal Ledger comes from.

867
00:47:14,700 --> 00:47:19,000
Its if you curl your hand from X to Y, which way does ego?

868
00:47:19,000 --> 00:47:21,000
That's the way to think about it, right?

869
00:47:22,100 --> 00:47:29,000
Another way to say it is that if you were to counter clockwise draw an

870
00:47:29,000 --> 00:47:30,300
arc, right?

871
00:47:30,300 --> 00:47:30,400
So

872
00:47:30,600 --> 00:47:37,700
Like, counterclockwise, draw an arc like that, then the Z axis comes

873
00:47:37,700 --> 00:47:41,700
out from the perspective into the place where it looks

874
00:47:41,700 --> 00:47:43,500
counterclockwise, right?

875
00:47:43,500 --> 00:47:46,500
Because remember, if I was looking at it from behind it, would look

876
00:47:46,500 --> 00:47:47,900
clockwise right?

877
00:47:47,900 --> 00:47:50,200
From here, from this side, it looks clockwise.

878
00:47:50,500 --> 00:47:55,600
So, if the Z comes out of the counterclockwise rotation, right?

879
00:47:55,600 --> 00:47:58,800
And again, that's like the curling of the thumbs, right?

880
00:47:58,800 --> 00:47:59,800
That's the thumb curl.

881
00:48:00,900 --> 00:48:05,500
Then it's right-handed If instead, it comes out of the clockwise

882
00:48:05,500 --> 00:48:09,300
turning, if it comes out that way, which would be here, imagine

883
00:48:09,300 --> 00:48:10,200
flipping it, right?

884
00:48:10,200 --> 00:48:13,600
So if I flipped it, so we had here is my x-axis.

885
00:48:15,400 --> 00:48:16,400
Here is my y-axis.

886
00:48:16,700 --> 00:48:17,900
Here's my Z axis.

887
00:48:18,000 --> 00:48:18,500
Right?

888
00:48:18,500 --> 00:48:21,900
So I'm just taking this diagram here and I'm rotating it this way.

889
00:48:21,900 --> 00:48:24,000
I'm looking at it from the other direction, right?

890
00:48:25,000 --> 00:48:25,900
Here's left.

891
00:48:27,900 --> 00:48:28,800
Here's right.

892
00:48:29,400 --> 00:48:34,500
So now if I looked at that curl, right, you can see it's clockwise now

893
00:48:34,500 --> 00:48:35,900
because we're looking at it from the other side.

894
00:48:35,900 --> 00:48:41,900
So if it comes out the clockwise side then it's left-handed, right?

895
00:48:42,100 --> 00:48:44,800
So you can think of this as this is the clockwise curl.

896
00:48:46,600 --> 00:48:48,500
This is the counter clockwise curl.

897
00:48:50,600 --> 00:48:53,300
I always use right-handed.

898
00:48:53,800 --> 00:48:58,200
The reason for that is not because I am right handed because like you

899
00:48:58,200 --> 00:49:03,200
don't have to be more coordinated, this is an easy motion to do with

900
00:49:03,200 --> 00:49:04,400
either hand, right?

901
00:49:04,400 --> 00:49:07,500
So you don't, it doesn't matter whether you are right-handed or

902
00:49:07,500 --> 00:49:08,100
left-handed.

903
00:49:08,500 --> 00:49:10,700
So I always use right-handed coordinate systems.

904
00:49:10,700 --> 00:49:15,900
The reason for that is because math tends to use right-handed

905
00:49:15,900 --> 00:49:19,300
coordinate systems by default in most textbooks.

906
00:49:19,700 --> 00:49:20,100
So

907
00:49:20,300 --> 00:49:23,700
Because when you're dealing with 3D Graphics, you tend to bring a lot

908
00:49:23,700 --> 00:49:29,200
more math in when you want to read papers and textbooks that are

909
00:49:29,200 --> 00:49:33,700
written for you know, doing advanced math that you are now doing

910
00:49:33,700 --> 00:49:38,200
because you have to do physics and more complex geometry and all these

911
00:49:38,200 --> 00:49:41,800
other sorts of things that you're bringing into it, you really don't

912
00:49:41,800 --> 00:49:45,100
want to have to constantly be switching, which handedness your mind is

913
00:49:45,100 --> 00:49:48,700
working in so it helps to just pick and go with the math version,

914
00:49:48,700 --> 00:49:49,800
which is right-handed.

915
00:49:50,200 --> 00:49:53,700
So I always go with right-handed, so all the things that I will ever

916
00:49:53,700 --> 00:49:54,600
talk about in 3D.

917
00:49:54,600 --> 00:49:57,500
I will always talk about them right-handed unless I simply make a

918
00:49:57,500 --> 00:49:58,100
mistake.

919
00:50:03,200 --> 00:50:05,000
But I never intentionally.

920
00:50:06,200 --> 00:50:13,100
Would do something left handed and again that has literally nothing to

921
00:50:13,100 --> 00:50:15,500
do with left-handed or right-handed people.

922
00:50:16,200 --> 00:50:19,000
I am right-handed but that is not why I do it right handed.

923
00:50:19,000 --> 00:50:22,300
If math had been left-handed, I would have done it left-handed because

924
00:50:22,300 --> 00:50:26,100
it's simply about trying to maintain consistency to avoid having to

925
00:50:26,100 --> 00:50:27,200
flip back and forth.

926
00:50:27,900 --> 00:50:29,600
If you go read something,

927
00:50:30,900 --> 00:50:31,800
In the math text.

928
00:50:32,000 --> 00:50:33,900
So this is math convention.

929
00:50:33,900 --> 00:50:38,300
Not people convention, do not worry if you are left-handed, that does

930
00:50:38,300 --> 00:50:40,600
not matter and is not relevant here at all.

931
00:50:41,100 --> 00:50:44,000
It's just about the convention.

932
00:50:44,300 --> 00:50:49,100
Okay, so we know our 3D matrices look like this.

933
00:50:56,400 --> 00:50:57,000
Right.

934
00:50:57,100 --> 00:50:58,200
We know that's what they look like.

935
00:50:58,600 --> 00:50:59,800
Furthermore, we know our unit

936
00:51:00,000 --> 00:51:02,200
Uncle has given us this, right?

937
00:51:02,200 --> 00:51:03,400
We know that we have an X axis.

938
00:51:03,400 --> 00:51:04,100
This cosine.

939
00:51:04,100 --> 00:51:07,500
Sine Theta Y axis, negative sine cosine, right?

940
00:51:08,700 --> 00:51:10,000
so, the question is,

941
00:51:11,400 --> 00:51:14,500
What if I want to start by just picking some access to rotate around

942
00:51:14,500 --> 00:51:15,600
that, I'm just going to do.

943
00:51:15,600 --> 00:51:19,000
Essentially the same operation I was doing before, let's suppose I

944
00:51:19,000 --> 00:51:24,500
want to rotate around the XY axis still but just in 3D, right?

945
00:51:24,500 --> 00:51:27,500
So I don't want to produce a rotation that actually moves things

946
00:51:27,500 --> 00:51:28,900
between axes at all.

947
00:51:29,800 --> 00:51:33,600
I just want to go ahead and produce a rotation around, one of the

948
00:51:33,600 --> 00:51:34,400
primary axis.

949
00:51:34,500 --> 00:51:38,000
So, in this case, I want to rotate around the z-axis, which means that

950
00:51:38,000 --> 00:51:41,100
the XY plane is where the rotation is occurring.

951
00:51:41,200 --> 00:51:41,700
Right?

952
00:51:41,700 --> 00:51:45,200
So everything in the end in XY plane or the you know, the entire

953
00:51:45,200 --> 00:51:48,400
cylinder of X Y is getting spun if you will.

954
00:51:50,100 --> 00:51:51,000
How do I do that?

955
00:51:51,400 --> 00:51:56,400
Well, if you take a look at what that implies here, right, when I

956
00:51:56,400 --> 00:52:00,300
multiply my coordinates, I've got my X, my y, my Z.

957
00:52:00,600 --> 00:52:03,200
We just said that the way that this works right?

958
00:52:03,200 --> 00:52:07,200
Was, was that these axes are slotted here, and we know that the

959
00:52:07,200 --> 00:52:12,400
x-coordinate is going to be, you know, X, the x axis the y coordinate

960
00:52:12,400 --> 00:52:14,900
is going to multiply the y axis and the Z coordinates going to

961
00:52:14,900 --> 00:52:17,100
multiply the Z axis, right?

962
00:52:17,600 --> 00:52:19,200
And what we just said

963
00:52:20,100 --> 00:52:24,000
Was that we want to just rotate the XY around and relieving the Z

964
00:52:24,000 --> 00:52:24,700
untouched.

965
00:52:25,000 --> 00:52:25,500
Right.

966
00:52:25,600 --> 00:52:29,200
So no matter where you are, you don't have to be in just one plane

967
00:52:29,300 --> 00:52:33,000
anywhere in 3D space that z-axis is just a giant axle.

968
00:52:33,000 --> 00:52:36,000
Essentially, everything is going to rotate around it through all of 3D

969
00:52:36,000 --> 00:52:39,900
space, but no matter where you are in a 3D space, your Z coordinates

970
00:52:39,900 --> 00:52:41,300
not going to change, right?

971
00:52:41,400 --> 00:52:44,400
Because the rotation is only affecting the X and Y coordinates.

972
00:52:44,600 --> 00:52:45,400
What that means?

973
00:52:45,400 --> 00:52:49,500
Is we know right off the bat that this isn't should produce no effect

974
00:52:49,600 --> 00:52:50,100
Effect.

975
00:52:52,300 --> 00:52:53,800
Right, nothing should change.

976
00:52:55,800 --> 00:52:56,800
So how do we do that?

977
00:52:58,800 --> 00:53:01,100
well, if we take a look at what the values are here,

978
00:53:03,400 --> 00:53:04,500
XYZ.

979
00:53:05,200 --> 00:53:05,600
I know.

980
00:53:05,600 --> 00:53:07,600
I want x times something.

981
00:53:08,900 --> 00:53:09,500
Right?

982
00:53:09,600 --> 00:53:13,700
I want y times something now.

983
00:53:13,700 --> 00:53:16,200
I know what it is and then I just want Z.

984
00:53:17,200 --> 00:53:20,500
Right, I just want, you know, my Z value.

985
00:53:21,500 --> 00:53:26,200
Well, if I just want my Z value to be the exact same thing that it was

986
00:53:26,200 --> 00:53:27,700
when it came in, right?

987
00:53:27,800 --> 00:53:31,600
We know that when we do X, Y and Z, we're going to do that.

988
00:53:31,600 --> 00:53:37,400
That product for that bottom, sorry, I should say, one more thing that

989
00:53:37,400 --> 00:53:42,800
we know, we also know that the X and Y coordinates should not depend

990
00:53:42,800 --> 00:53:43,700
on Z at all.

991
00:53:43,700 --> 00:53:44,200
Either.

992
00:53:44,500 --> 00:53:46,900
Right because no matter where,

993
00:53:47,000 --> 00:53:49,300
You are along this Z axis.

994
00:53:50,200 --> 00:53:54,200
you should not rotate more or less based on where you are in Z,

995
00:53:54,600 --> 00:53:59,500
everyone rotates the same no matter whether their way far away, Along

996
00:53:59,500 --> 00:53:59,800
Z axis

997
00:54:00,000 --> 00:54:02,300
Right next to us, far behind us doesn't matter.

998
00:54:02,300 --> 00:54:05,600
They should all rotate the same amount the rotation is constant

999
00:54:05,600 --> 00:54:06,200
throughout space.

1000
00:54:06,200 --> 00:54:14,300
So what that means is not only should Z essentially be must be the

1001
00:54:14,300 --> 00:54:15,800
only thing that we end up with here.

1002
00:54:15,800 --> 00:54:16,100
Right?

1003
00:54:16,100 --> 00:54:18,700
The Z axis that we end up with here.

1004
00:54:18,700 --> 00:54:23,400
Should literally just be the the z-axis we started with, right?

1005
00:54:23,400 --> 00:54:29,700
Just 001 the, the, the Z axis, but also Z should come into

1006
00:54:30,000 --> 00:54:32,500
Play in no way in these two.

1007
00:54:32,600 --> 00:54:36,800
So the Z coordinate should not appear in the equations for x or y,

1008
00:54:37,200 --> 00:54:37,800
right.

1009
00:54:38,200 --> 00:54:43,800
So what that tells us is we can fill in all of our Matrix that

1010
00:54:43,800 --> 00:54:47,000
involves easy with just the identity Matrix, right?

1011
00:54:47,100 --> 00:54:53,000
With no change because we know first of all, that Z should be produced

1012
00:54:53,000 --> 00:54:53,700
with this axis.

1013
00:54:53,700 --> 00:54:59,200
So, we know these values and then furthermore, we know that are our

1014
00:54:59,200 --> 00:54:59,900
coordinates

1015
00:55:00,000 --> 00:55:00,900
Are right.

1016
00:55:00,900 --> 00:55:04,400
We don't know what's in the top two because those are the parts that

1017
00:55:04,400 --> 00:55:07,300
are actually do the rotation, but we know the bottom two should have

1018
00:55:07,300 --> 00:55:14,300
no like, there should be no change at all in the, in the, in the Z

1019
00:55:14,300 --> 00:55:19,300
direction, right X and Y, should not move in Z at all, right.

1020
00:55:21,400 --> 00:55:26,000
So, there's our sort of our, you know, our easy way to eliminate a

1021
00:55:26,000 --> 00:55:29,600
bunch of stuff out of the Matrix and, hey, guess what we're left with.

1022
00:55:29,600 --> 00:55:31,200
Only the upper 2 by 2.

1023
00:55:31,600 --> 00:55:35,400
And if we want to produce that same rotation, that we were producing

1024
00:55:35,400 --> 00:55:40,700
before with a two, by two Matrix, we can just do exactly that, right?

1025
00:55:40,800 --> 00:55:44,500
Because the parts of the rotation that we care about are happening,

1026
00:55:44,500 --> 00:55:46,200
only in the X, Y axes.

1027
00:55:46,200 --> 00:55:46,900
Anyway.

1028
00:55:47,300 --> 00:55:51,000
So exactly the same Matrix that worked up here.

1029
00:55:51,200 --> 00:55:55,000
Works in 3D when we only care about two of those axes, right?

1030
00:55:55,000 --> 00:55:59,500
Negative, sine cosine, cosine, sine that for axes will work.

1031
00:55:59,500 --> 00:56:00,600
Exactly correctly.

1032
00:56:00,800 --> 00:56:03,900
So, if we just put those in here in exactly the same place,

1033
00:56:06,600 --> 00:56:11,600
That they were, we can construct a z axis rotation.

1034
00:56:13,800 --> 00:56:17,600
In 3D using nothing more than exactly what we did in 2D.

1035
00:56:18,500 --> 00:56:19,100
Right?

1036
00:56:21,800 --> 00:56:25,200
Because as you can see exactly what we want to have happen happens,

1037
00:56:25,200 --> 00:56:28,800
the x-coordinate will now get interpreted, not in any way differently

1038
00:56:28,800 --> 00:56:29,600
in Z, right?

1039
00:56:29,600 --> 00:56:33,100
It's not going to move us in Z at all, but it will move us cosine

1040
00:56:33,100 --> 00:56:37,400
Theta, sine Theta, will move along that axis right in the world which

1041
00:56:37,400 --> 00:56:38,000
is what we want.

1042
00:56:38,000 --> 00:56:40,500
That's the new x-axis, it's been bent, right?

1043
00:56:40,500 --> 00:56:44,800
It's been rotated the y-axis, same thing we want to move along

1044
00:56:44,800 --> 00:56:47,900
negative sine cosine and that's exactly what it will do.

1045
00:56:48,300 --> 00:56:48,800
Right?

1046
00:56:49,600 --> 00:56:53,000
And again no change in Z because ours new Z coordinate.

1047
00:56:53,000 --> 00:56:55,300
For our point is not dependent on where we were in.

1048
00:56:55,300 --> 00:56:56,800
Why it stays the same

1049
00:56:58,800 --> 00:56:59,800
Soca producing a z.

1050
00:57:00,000 --> 00:57:04,600
This rotation in 3D is literally just the same as producing the 2D

1051
00:57:04,600 --> 00:57:05,200
rotation.

1052
00:57:05,400 --> 00:57:08,400
It's just now there's padding and it essentially to make sure that the

1053
00:57:08,400 --> 00:57:13,500
Z coordinate flows through, not only untouched itself, but also

1054
00:57:13,500 --> 00:57:16,800
without affecting anybody else, right?

1055
00:57:19,700 --> 00:57:21,700
And without them affecting it, I should say.

1056
00:57:21,700 --> 00:57:24,800
So it affects does not affect them, they do not affect it.

1057
00:57:25,000 --> 00:57:28,000
The X Y and the Z are separate completely because that is what this

1058
00:57:28,000 --> 00:57:29,000
rotation means.

1059
00:57:29,300 --> 00:57:29,900
And in fact,

1060
00:57:30,000 --> 00:57:32,200
at is a specifically, what an axis of rotation is.

1061
00:57:32,200 --> 00:57:36,000
If you think about it, the axis of rotation is the axis along, which

1062
00:57:36,000 --> 00:57:40,700
everything is constant, all the other axes are spinning and they're

1063
00:57:40,700 --> 00:57:45,400
spinning around that axis, but that axis nothing changes the measure

1064
00:57:45,400 --> 00:57:45,900
of things.

1065
00:57:45,900 --> 00:57:48,600
Along that axis are not changed in any way.

1066
00:57:48,700 --> 00:57:52,100
During a rotation, that's what an axis of rotation is, right?

1067
00:57:52,400 --> 00:57:58,200
The One Direction, a wheel does not change in a car is the axle,

1068
00:57:58,700 --> 00:57:59,300
right?

1069
00:58:00,400 --> 00:58:01,900
It's spinning all around.

1070
00:58:01,900 --> 00:58:04,300
If you look at it from the side, the wheel, every point on the wheel

1071
00:58:04,300 --> 00:58:05,000
is changing.

1072
00:58:05,200 --> 00:58:07,700
If you look at it from the perspective of the axle, the wheel is

1073
00:58:07,700 --> 00:58:09,500
staying in one place, right?

1074
00:58:09,600 --> 00:58:12,400
It doesn't move this way on the car, right?

1075
00:58:12,400 --> 00:58:14,600
If these are the wheels, they're not doing that at all.

1076
00:58:14,600 --> 00:58:16,700
They're not doing this right there.

1077
00:58:16,700 --> 00:58:17,700
Exactly, in place.

1078
00:58:17,700 --> 00:58:20,300
But if you look at it from the axles perspective where the axe is

1079
00:58:20,300 --> 00:58:23,900
coming, right at us now, everything is all the points are changing,

1080
00:58:24,100 --> 00:58:24,600
right?

1081
00:58:26,900 --> 00:58:27,500
So, there you go.

1082
00:58:28,500 --> 00:58:30,600
So now the question is, well, can we produce an X?

1083
00:58:30,800 --> 00:58:34,000
What about an excitation or what, about a y rotation, right?

1084
00:58:34,100 --> 00:58:37,300
Rotation around the x-axis or the y-axis?

1085
00:58:38,200 --> 00:58:41,400
Well, the answer is we can construct those exactly the same way we

1086
00:58:41,400 --> 00:58:43,500
constructed this one, right?

1087
00:58:44,400 --> 00:58:46,200
So, the way that we constructed this one,

1088
00:58:49,100 --> 00:58:54,500
To put it into the 3D context is we said let's pick right the axis of

1089
00:58:54,500 --> 00:58:56,100
rotation as Z.

1090
00:58:56,200 --> 00:58:57,800
That's what we said, right.

1091
00:58:58,100 --> 00:59:01,600
And so what we effectively, we're doing when we did that with said,

1092
00:59:01,600 --> 00:59:03,800
let's produce that unit circle.

1093
00:59:05,700 --> 00:59:10,500
On the X and Y axis, and the Z axis will be our rotation axis, right?

1094
00:59:10,700 --> 00:59:11,600
That's what we were saying.

1095
00:59:12,100 --> 00:59:16,100
So when we constructed our sine cosine, we're constructing them in the

1096
00:59:16,100 --> 00:59:17,800
plane of the XY.

1097
00:59:18,000 --> 00:59:21,800
And here's that cosine, here's that sign, right?

1098
00:59:21,900 --> 00:59:22,900
This is for Z.

1099
00:59:27,300 --> 00:59:32,600
What if we simply picked one of the other axes X or Y, as the rotation

1100
00:59:32,600 --> 00:59:37,100
and constructed this circle in the other axes, right?

1101
00:59:37,700 --> 00:59:41,200
So let's go ahead and pick those exact same

1102
00:59:44,100 --> 00:59:47,400
Let's go ahead and construct the exact same diagram, but just now with

1103
00:59:47,400 --> 00:59:49,600
a different axis selected, right?

1104
00:59:49,800 --> 00:59:52,100
So, let's say, we want to rotate about the x axis.

1105
00:59:52,300 --> 00:59:54,300
Well, first question is, how do we construct?

1106
00:59:54,300 --> 00:59:56,900
The unit circle with the other axes?

1107
00:59:57,300 --> 00:59:59,900
And the answer is, you still want to always obey the

1108
01:00:00,000 --> 01:00:03,700
Right hand rule to remain consistent with mathematics and what the

1109
01:00:03,700 --> 01:00:07,300
right-hand rule says, again, is whatever the axis wherever the axis

1110
01:00:07,300 --> 01:00:11,800
pointing out of, we want to look counterclockwise, right with respect

1111
01:00:11,800 --> 01:00:13,100
to it, right?

1112
01:00:13,300 --> 01:00:14,700
So that means constructing.

1113
01:00:14,700 --> 01:00:15,900
Our unit circle.

1114
01:00:16,000 --> 01:00:17,400
Looks like this.

1115
01:00:17,600 --> 01:00:19,300
Here is our unit circle, right?

1116
01:00:19,400 --> 01:00:21,600
It's starting from y.

1117
01:00:21,600 --> 01:00:22,500
Going to Z.

1118
01:00:24,500 --> 01:00:28,400
Here is our little right, triangle, right here.

1119
01:00:28,400 --> 01:00:30,900
Is our cosine Theta.

1120
01:00:31,600 --> 01:00:32,800
Here is our sign.

1121
01:00:35,600 --> 01:00:36,100
Theta.

1122
01:00:36,400 --> 01:00:38,500
Right, that makes sense.

1123
01:00:39,400 --> 01:00:42,300
And what you can see here is, when you look at how this is

1124
01:00:42,300 --> 01:00:47,100
constructed, you can immediately read off exactly what these axes are

1125
01:00:47,100 --> 01:00:48,300
going to be again, right?

1126
01:00:48,400 --> 01:00:51,700
We now know it's our y axis and our Z axis that are being

1127
01:00:51,700 --> 01:00:52,600
reinterpreted.

1128
01:00:52,700 --> 01:00:54,700
But you can see exactly what they are.

1129
01:00:54,800 --> 01:01:00,000
The y axis in this case, is constructed such that the y-coordinate

1130
01:01:00,500 --> 01:01:03,600
write the x coordinate is not relevant here, right?

1131
01:01:04,800 --> 01:01:09,400
So we don't care what the x coordinate is, at all the new Y axis is

1132
01:01:09,400 --> 01:01:14,000
going to be constructed, such that its y-coordinate is the cosine,

1133
01:01:14,200 --> 01:01:14,500
right?

1134
01:01:14,500 --> 01:01:15,800
You can see that.

1135
01:01:15,800 --> 01:01:17,900
That's, you know, what's going on the y-coordinate.

1136
01:01:17,900 --> 01:01:22,100
It's going to be the cosine here as it goes down, right?

1137
01:01:22,400 --> 01:01:24,900
So that's what are Y coordinates.

1138
01:01:25,600 --> 01:01:26,300
What are Y?

1139
01:01:26,300 --> 01:01:28,600
Axis, y coordinate is and it's X.

1140
01:01:29,000 --> 01:01:29,400
I'm sorry.

1141
01:01:31,400 --> 01:01:35,400
What it's Z coordinate is which is the other coordinate we care about

1142
01:01:35,600 --> 01:01:38,700
is varying as the sign varies and it's again exactly how the sign of

1143
01:01:38,700 --> 01:01:39,500
Aries gets positive.

1144
01:01:39,500 --> 01:01:40,900
First then goes to 0 again.

1145
01:01:40,900 --> 01:01:43,100
Then goes to negative then goes to 0 again right?

1146
01:01:43,700 --> 01:01:44,900
So it looks like that

1147
01:01:46,300 --> 01:01:49,700
And our Z axis, we can do exactly the same thing.

1148
01:01:49,900 --> 01:01:55,400
Our Z axis starts here, right and rotates down again doing the

1149
01:01:55,400 --> 01:01:56,600
counterclockwise rotation.

1150
01:01:56,800 --> 01:02:01,700
If we look at how that rotation works as the Theta here increases,

1151
01:02:01,900 --> 01:02:02,400
right?

1152
01:02:02,700 --> 01:02:04,800
We're going to be on the unit circle there again.

1153
01:02:04,800 --> 01:02:10,600
As normal there is our pick, as you can see, cosine is specifying the

1154
01:02:10,600 --> 01:02:15,400
Z axis, the Z coordinate of the Z axis, right?

1155
01:02:16,700 --> 01:02:22,600
So that goes in there and the sign on the other hand, as that rotates

1156
01:02:22,600 --> 01:02:29,000
around the sign is specifying the y coordinate of the Z axis.

1157
01:02:29,200 --> 01:02:32,200
But as you can see it's gets - at the start.

1158
01:02:32,300 --> 01:02:36,400
So once again it's you know, it's got that - on it and you can start

1159
01:02:36,400 --> 01:02:38,100
to see the pattern here.

1160
01:02:38,100 --> 01:02:38,800
Right?

1161
01:02:39,100 --> 01:02:45,900
Cosine is always cosine and you know, that's not an accident.

1162
01:02:45,900 --> 01:02:46,000
I

1163
01:02:47,700 --> 01:02:52,500
in terms of how the rotation is working because it always starts at 1

1164
01:02:52,500 --> 01:02:56,200
on the axis and then drops to 0 if you want to rotate the other

1165
01:02:56,200 --> 01:02:59,800
direction obviously you know you would you would

1166
01:03:00,000 --> 01:03:02,200
Probably have to think about a little differently, but assuming that

1167
01:03:02,200 --> 01:03:07,300
you're obeying the the right-hand rule we get the exact same thing.

1168
01:03:07,500 --> 01:03:11,100
So cosine works the same way in both negative sign and sign works the

1169
01:03:11,100 --> 01:03:11,400
same way.

1170
01:03:11,400 --> 01:03:13,300
In both, one of them gets the negative version.

1171
01:03:13,300 --> 01:03:16,600
One against the other, the reason for that again is because it's 90

1172
01:03:16,600 --> 01:03:18,100
degrees offset, right?

1173
01:03:18,100 --> 01:03:22,200
In fact, if you remember your trig identities, you know, the whole

1174
01:03:25,200 --> 01:03:27,900
I'll just mention this real quickly here, because it's mildly

1175
01:03:27,900 --> 01:03:31,100
mathematically, interesting, if you remember your trigonometry

1176
01:03:31,300 --> 01:03:32,900
trigonometric identities, right?

1177
01:03:33,000 --> 01:03:36,800
You remember some weird stuff where they lie cosine of 90 plus an

1178
01:03:36,800 --> 01:03:38,300
angle or whatever, right?

1179
01:03:40,100 --> 01:03:42,900
And what you can see if you actually draw these out is you can sort of

1180
01:03:42,900 --> 01:03:44,500
start to see where those actually came from.

1181
01:03:44,500 --> 01:03:46,700
In case they were a little bit hazy, back in math class where they

1182
01:03:46,700 --> 01:03:48,200
tend to not explain things very well.

1183
01:03:49,000 --> 01:03:53,500
So if we have an angle Theta here, right, you can imagine constructing

1184
01:03:53,500 --> 01:03:54,400
that same exact

1185
01:03:55,000 --> 01:03:56,300
Out here, right?

1186
01:03:56,300 --> 01:03:57,400
With the same Theta.

1187
01:03:59,000 --> 01:04:04,000
Okay, so this is the original Theta here is Theta, you know, same

1188
01:04:04,000 --> 01:04:04,600
Theta.

1189
01:04:04,700 --> 01:04:07,100
Essentially, this is theta plus 90, right?

1190
01:04:07,100 --> 01:04:10,100
It's theta plus 90 degrees, right?

1191
01:04:10,400 --> 01:04:11,200
Rotating up this way.

1192
01:04:11,900 --> 01:04:17,100
Well, whatever you were going to get for your cosine here, right?

1193
01:04:17,200 --> 01:04:21,200
Is not going to change, like the cosine behavior.

1194
01:04:21,300 --> 01:04:24,300
Is going to be exactly the same as it moves, right?

1195
01:04:24,800 --> 01:04:28,600
Sort of around, but the sign behavior is going to change.

1196
01:04:29,000 --> 01:04:31,800
The sign behavior is going to change when it gets here and it's going

1197
01:04:31,800 --> 01:04:35,300
to flip to - and then flip back to positive, right?

1198
01:04:35,700 --> 01:04:40,000
And so you can sort of start to see that difference between the two if

1199
01:04:40,000 --> 01:04:43,000
that makes any sense where they don't.

1200
01:04:44,000 --> 01:04:49,000
They don't behave the same because one of them starts going where they

1201
01:04:49,000 --> 01:04:49,600
start going on.

1202
01:04:49,600 --> 01:04:50,700
The circle is different.

1203
01:04:50,900 --> 01:04:52,300
I'm explaining this extremely poorly.

1204
01:04:53,200 --> 01:04:55,400
You know what just forget about I ever said that, that's just a kid.

1205
01:04:55,400 --> 01:04:56,400
That's just confusing.

1206
01:04:58,000 --> 01:05:01,200
But point being, you can kind of see how that is relevant here.

1207
01:05:01,700 --> 01:05:04,600
Because since you're always starting on the axis, when you're actually

1208
01:05:04,600 --> 01:05:07,500
starting on the access, the cosine is the thing that gives you that

1209
01:05:07,500 --> 01:05:10,800
behavior of walking around the circle when you have to be talking

1210
01:05:10,800 --> 01:05:13,200
about the person who's 90° offset from you,

1211
01:05:13,900 --> 01:05:17,400
Then you end up getting that - in there because the sign has to be

1212
01:05:17,400 --> 01:05:19,700
doing the work at 90 degrees.

1213
01:05:19,700 --> 01:05:20,400
Plus itself.

1214
01:05:20,900 --> 01:05:23,300
That's all I was trying to say which and I said it extremely poorly.

1215
01:05:23,300 --> 01:05:24,600
I'm still saying it's really poorly.

1216
01:05:26,800 --> 01:05:29,500
Doesn't matter, not relevant point being.

1217
01:05:29,500 --> 01:05:31,700
Here's our Y and z-axis.

1218
01:05:31,900 --> 01:05:37,300
So if we take a look at what we want to do to produce the the rotation

1219
01:05:37,400 --> 01:05:39,200
again, here is our Z axis rotation.

1220
01:05:39,700 --> 01:05:42,200
We can take a look at our x axis rotation,

1221
01:05:45,300 --> 01:05:47,500
And we know the Y and Z axes.

1222
01:05:47,900 --> 01:05:50,200
We can just slot them in exact, like we're doing before.

1223
01:05:50,200 --> 01:05:54,400
So there's R cosine Theta, there's R, sine Theta, here's our negative

1224
01:05:54,400 --> 01:05:55,200
sine Theta.

1225
01:05:55,400 --> 01:05:58,000
Here's R cosine Theta, right?

1226
01:05:58,600 --> 01:05:59,300
And then

1227
01:06:00,000 --> 01:06:04,800
Again the what the the x-axis is unchanged right?

1228
01:06:04,800 --> 01:06:09,300
There is no it's just the regular old x-axis that we would have if we

1229
01:06:09,300 --> 01:06:10,800
hadn't done anything, right.

1230
01:06:12,300 --> 01:06:15,000
So, you can see, we've got these two rotation matrices here.

1231
01:06:15,100 --> 01:06:16,900
Here's a z axis rotation, right?

1232
01:06:16,900 --> 01:06:21,400
Leave Z unchanged entirely, just affects X&Y.

1233
01:06:21,600 --> 01:06:22,900
Here's our x x rotation.

1234
01:06:23,100 --> 01:06:25,600
X is unchanged exactly the same way.

1235
01:06:25,800 --> 01:06:28,000
But y&z are modified.

1236
01:06:28,200 --> 01:06:33,500
And I suspect you could probably yourself derive, the y axis rotation.

1237
01:06:33,500 --> 01:06:34,300
At this point.

1238
01:06:34,300 --> 01:06:36,700
I will do it because obviously we should, you know, we're going to

1239
01:06:36,700 --> 01:06:40,200
have to do it on stream because we want to be able to generate all of

1240
01:06:40,200 --> 01:06:40,500
these.

1241
01:06:42,000 --> 01:06:43,500
Matrices, right.

1242
01:06:43,500 --> 01:06:49,900
If x Y & Z, we want to rotate around the y axis again that means right

1243
01:06:49,900 --> 01:06:54,100
hand, rule means we're going to be counterclockwise risk with respect

1244
01:06:54,100 --> 01:06:55,000
to the y-axis.

1245
01:06:55,400 --> 01:06:59,600
So again if we were standing up where the Y is positive, Y and looking

1246
01:06:59,600 --> 01:07:02,100
down, we should see a counter clockwise.

1247
01:07:02,100 --> 01:07:04,600
This is counter clockwise from the perspective of somebody looking

1248
01:07:05,000 --> 01:07:06,600
back down the y-axis, right?

1249
01:07:07,700 --> 01:07:13,100
So that counterclockwise rotation that we're doing their implies, that

1250
01:07:13,100 --> 01:07:16,800
we need to construct the rotation for x and z.

1251
01:07:17,400 --> 01:07:19,100
So we can see exactly what that's going to be.

1252
01:07:19,100 --> 01:07:22,100
The x axis is going to be going this way, right?

1253
01:07:22,300 --> 01:07:26,100
And so, what's going to happen there again, cosine is going to do

1254
01:07:26,100 --> 01:07:28,800
exactly the same thing that it always does is going to start at 1 get

1255
01:07:28,800 --> 01:07:30,700
20 then go to - right.

1256
01:07:31,100 --> 01:07:35,700
So we know as far as our x axis is concerned the x-coordinate of the

1257
01:07:35,700 --> 01:07:36,500
x-axis.

1258
01:07:36,700 --> 01:07:37,100
Going to be

1259
01:07:37,200 --> 01:07:38,500
Cosine Theta just like it.

1260
01:07:38,500 --> 01:07:44,500
Always is in every particular case and then we've got the the

1261
01:07:44,600 --> 01:07:49,900
z-coordinate part of it and the Z coordinate, part of it is going to

1262
01:07:49,900 --> 01:07:55,400
be getting - right away, write it in as it rotates.

1263
01:07:55,400 --> 01:07:58,000
It's not going to start off going positive, right?

1264
01:07:58,000 --> 01:08:01,800
So it's doing the sign behavior of starting at 0 and going towards

1265
01:08:01,800 --> 01:08:05,400
one, but - one not positive one, right.

1266
01:08:05,700 --> 01:08:07,000
So it's a negative sign it.

1267
01:08:07,200 --> 01:08:07,400
Oops.

1268
01:08:08,600 --> 01:08:09,600
It's a negative sign.

1269
01:08:10,200 --> 01:08:13,800
As it moves again, the y coordinate, in this case, since it's the axis

1270
01:08:13,800 --> 01:08:18,600
of rotation, not involved, write x and z are operating alone.

1271
01:08:18,600 --> 01:08:22,700
They do not involve y, so we know that that is a 0 in both cases, the

1272
01:08:22,700 --> 01:08:23,399
Z axis.

1273
01:08:23,399 --> 01:08:24,600
Again, same thing.

1274
01:08:25,000 --> 01:08:28,200
We have a cosine, the cosine term is going to do exactly what it

1275
01:08:28,200 --> 01:08:28,800
always does.

1276
01:08:28,800 --> 01:08:32,200
It's going to start at one, go to -1, come back, right?

1277
01:08:32,200 --> 01:08:34,800
So we know that the Z coordinate is cosine Theta.

1278
01:08:35,800 --> 01:08:38,399
And then we just have to figure out what is the y-coordinate.

1279
01:08:38,500 --> 01:08:38,800
I'm sorry.

1280
01:08:38,800 --> 01:08:40,300
What is the x coordinate?

1281
01:08:40,300 --> 01:08:43,200
The x coordinate is going to start at 0.

1282
01:08:43,399 --> 01:08:46,100
Go to one and come back, right?

1283
01:08:46,200 --> 01:08:49,800
So again following that exact same pattern, a negative sign in the

1284
01:08:49,800 --> 01:08:52,700
sign right to cosines Neuroscience sign, right?

1285
01:08:53,700 --> 01:08:55,700
So that implies a structure of our Matrix.

1286
01:08:55,700 --> 01:08:59,899
Pretty directly just like in the rest of the cases, we know that Y is

1287
01:09:00,000 --> 01:09:04,700
You just completely so we would expect it to just have, you know, no

1288
01:09:04,700 --> 01:09:08,899
information in it that changes at all its axis and it's projection,

1289
01:09:08,899 --> 01:09:09,800
both the same.

1290
01:09:10,300 --> 01:09:12,500
And so we're just filling in these parts here.

1291
01:09:12,600 --> 01:09:12,800
Right?

1292
01:09:12,800 --> 01:09:17,700
The x-axis cosine Theta 0, negative sine Theta, right.

1293
01:09:18,700 --> 01:09:22,899
Similarly Z sine Theta, 0, cosine, Theta.

1294
01:09:24,100 --> 01:09:26,500
And that is our Y, axis rotation.

1295
01:09:29,200 --> 01:09:31,600
and so assuming that I haven't made any math errors there,

1296
01:09:33,600 --> 01:09:35,000
I'm not particularly good at math.

1297
01:09:37,399 --> 01:09:40,399
as you've heard me say many times on the Stream, So I guarantee I in

1298
01:09:40,399 --> 01:09:44,600
no way guarantee freedom from math, errors on the Stream,

1299
01:09:48,300 --> 01:09:49,700
I guarantee you, we have them.

1300
01:09:51,000 --> 01:09:52,800
Maybe just not right now, but we have them.

1301
01:09:56,000 --> 01:09:58,400
Those are rotation matrices.

1302
01:09:59,800 --> 01:10:00,200
Okay.

1303
01:10:02,100 --> 01:10:04,700
so now you know how to build

1304
01:10:06,600 --> 01:10:08,200
The Cardinal rotation matrices.

1305
01:10:15,500 --> 01:10:16,200
Great job.

1306
01:10:16,400 --> 01:10:17,000
Good job.

1307
01:10:22,500 --> 01:10:25,200
Alright, so now, you know how to build the car notation matrices and

1308
01:10:25,200 --> 01:10:25,900
that's good.

1309
01:10:28,000 --> 01:10:31,400
And the question is, how does this help us Casey great?

1310
01:10:31,700 --> 01:10:34,800
You went down this whole diversion of how to build rotation matrices.

1311
01:10:34,800 --> 01:10:35,300
What?

1312
01:10:35,300 --> 01:10:36,700
You know, how does this help us?

1313
01:10:36,700 --> 01:10:37,400
What's going on?

1314
01:10:37,400 --> 01:10:38,000
I'm confused.

1315
01:10:38,000 --> 01:10:39,000
I don't care.

1316
01:10:39,500 --> 01:10:40,400
Give me something.

1317
01:10:40,400 --> 01:10:41,400
Why are we even doing this?

1318
01:10:41,400 --> 01:10:46,100
Well, once we can build Cardinal rotation matrices, we can actually

1319
01:10:46,100 --> 01:10:49,000
allow ourselves to build a little camera that will rotate around the

1320
01:10:49,000 --> 01:10:52,100
world and give us the ability to orbit our world and see what the

1321
01:10:52,100 --> 01:10:56,000
structure is, like, in three dimensions, which is exactly what we

1322
01:10:56,100 --> 01:10:56,800
wanted.

1323
01:10:57,200 --> 01:10:57,700
Right?

1324
01:10:59,500 --> 01:11:03,700
And the way that we can do that is we can compose these Cardinal

1325
01:11:03,700 --> 01:11:07,900
rotation, matrices into a little Euler angle system, like almost a

1326
01:11:07,900 --> 01:11:08,500
little toy.

1327
01:11:08,500 --> 01:11:12,900
If you will, for producing like two dials that will allow us to rotate

1328
01:11:13,000 --> 01:11:14,200
around our world.

1329
01:11:14,200 --> 01:11:17,300
And let's just talk really quickly about how that works and then we

1330
01:11:17,300 --> 01:11:18,300
can go try to build it.

1331
01:11:18,300 --> 01:11:21,700
I don't know if I'm gonna have time, we've only got about 40, 45

1332
01:11:21,700 --> 01:11:25,300
minutes and this these explanations cannot take a while because I have

1333
01:11:25,300 --> 01:11:26,600
to sort of get like,

1334
01:11:29,500 --> 01:11:34,200
I have to kind of get a lot of the math out there, but matrix

1335
01:11:34,200 --> 01:11:35,900
multiplication we've covered before.

1336
01:11:39,800 --> 01:11:43,200
We've talked about it before and the way that it works, right?

1337
01:11:43,200 --> 01:11:45,600
Is you just have like, ABC.

1338
01:11:46,200 --> 01:11:49,300
Well, you know, I'm going to do a slightly different way so that you

1339
01:11:49,300 --> 01:11:49,900
can see

1340
01:11:52,100 --> 01:11:53,900
She gets a little bit more of it.

1341
01:11:54,600 --> 01:11:58,900
So I'm going to produce a matrix C and I'm going to produce it by

1342
01:11:58,900 --> 01:11:59,800
multiplying a

1343
01:12:00,000 --> 01:12:01,800
I am be right.

1344
01:12:01,900 --> 01:12:05,800
That's just what I'm gonna do because I got start with that in order

1345
01:12:05,800 --> 01:12:07,400
to give you something to hang onto.

1346
01:12:08,000 --> 01:12:11,600
So this is matrix multiplication, I'm taking two matrices, A and B,

1347
01:12:11,600 --> 01:12:12,800
and multiply together to produce.

1348
01:12:12,800 --> 01:12:17,500
See right now, matrix multiplication, and Vector, multiplication are

1349
01:12:17,500 --> 01:12:22,000
the same thing when we've talked about this in hand M before, but I'm

1350
01:12:22,000 --> 01:12:24,200
going to stress it again because now it's actually starting to become

1351
01:12:24,200 --> 01:12:25,300
a lot more important.

1352
01:12:26,100 --> 01:12:32,800
A vector is just a matrix that has less columns, okay, and what

1353
01:12:32,800 --> 01:12:33,800
happens with matrix?

1354
01:12:33,800 --> 01:12:38,400
Multiplication is the rules of multiplication are defined such that.

1355
01:12:38,400 --> 01:12:45,700
The only thing that has to be true is the number of rows in the left

1356
01:12:45,700 --> 01:12:47,300
hand side Matrix,

1357
01:12:49,000 --> 01:12:51,000
I'm sorry, the number of columns.

1358
01:12:51,000 --> 01:12:55,500
In the left hand side Matrix has to be the same as the number of rows

1359
01:12:55,500 --> 01:12:58,200
in the right hand side Matrix, right?

1360
01:12:58,500 --> 01:13:02,100
And as long as that condition holds you can perform the matrix

1361
01:13:02,100 --> 01:13:02,800
multiplication.

1362
01:13:02,900 --> 01:13:06,000
Now you know this intuitively because of the way we've in structuring

1363
01:13:06,000 --> 01:13:08,300
our matrix multiplication, but you may have never thought about

1364
01:13:08,300 --> 01:13:08,700
explicitly.

1365
01:13:08,700 --> 01:13:13,600
So let's take a look at what I mean and how the math actually works

1366
01:13:13,900 --> 01:13:14,300
out.

1367
01:13:14,400 --> 01:13:18,100
Okay, so I'm going to draw this the way we have been drawing these

1368
01:13:19,200 --> 01:13:23,000
Here is our Matrix a and I'm going to enumerate the elements of it

1369
01:13:23,100 --> 01:13:24,300
programmer style.

1370
01:13:24,800 --> 01:13:25,300
Okay?

1371
01:13:26,200 --> 01:13:29,800
So I'm going to say that we have a right and I'm going to say that

1372
01:13:29,800 --> 01:13:31,100
this is a zero zero.

1373
01:13:31,500 --> 01:13:33,900
I'm going to call this a 10.

1374
01:13:34,000 --> 01:13:36,600
I'm going to call this a 2-0, right?

1375
01:13:37,800 --> 01:13:41,700
I'm going to go across and I'm going to put the the column number in

1376
01:13:41,700 --> 01:13:42,900
the first one, right?

1377
01:13:42,900 --> 01:13:43,400
I don't know that.

1378
01:13:43,400 --> 01:13:44,400
That's such a good idea.

1379
01:13:44,400 --> 01:13:45,300
In fact, you know what?

1380
01:13:47,100 --> 01:13:47,800
I'm going to do it.

1381
01:13:47,800 --> 01:13:51,700
Like I said, programmer style, which I suppose means we should use the

1382
01:13:51,700 --> 01:13:52,300
the lit.

1383
01:13:52,300 --> 01:13:56,000
The least significant part first.

1384
01:13:56,400 --> 01:14:00,800
So I suppose, I should say a 0 0, a 0.

1385
01:14:00,800 --> 01:14:02,700
1 is 0 2.

1386
01:14:03,000 --> 01:14:06,800
Okay, because I'm going for a, I want to translate this into code in a

1387
01:14:06,800 --> 01:14:07,400
second.

1388
01:14:08,000 --> 01:14:13,700
And so I believe math, notation traditionally math notation would

1389
01:14:13,700 --> 01:14:14,400
actually number them.

1390
01:14:14,400 --> 01:14:18,500
The way that I did it the first time, usually, they will put the

1391
01:14:18,500 --> 01:14:21,000
column as the, the first one.

1392
01:14:21,000 --> 01:14:22,400
And the row is the second one.

1393
01:14:22,600 --> 01:14:27,800
So this is just for temporary, just for briefly for now I'm doing this

1394
01:14:27,800 --> 01:14:29,200
the way we're going to write a for I Loop.

1395
01:14:29,200 --> 01:14:33,000
So the lineup but keep in mind that this notation is fungible and if

1396
01:14:33,000 --> 01:14:35,300
you were going to be in a math textbook, you could easily see them in

1397
01:14:35,300 --> 01:14:37,000
the opposite order, okay?

1398
01:14:39,700 --> 01:14:41,100
So again, going down here.

1399
01:14:45,800 --> 01:14:46,100
Oops.

1400
01:14:54,600 --> 01:14:56,300
Okay, so you can see how I've numbered them.

1401
01:14:56,300 --> 01:14:57,900
Here, they go 0.

1402
01:14:57,900 --> 01:14:59,500
120 120.

1403
01:15:00,000 --> 01:15:02,000
In the first because the row is coming.

1404
01:15:02,000 --> 01:15:06,600
First, then we have 0, 0 0, the column number coming S, 0 0, 0, 1 1, 1

1405
01:15:06,700 --> 01:15:07,500
2, 2 2, right?

1406
01:15:07,500 --> 01:15:09,500
And again, I'm doing this program or numbering so that we can

1407
01:15:09,500 --> 01:15:10,600
translate it quickly.

1408
01:15:11,500 --> 01:15:15,000
Don't take that as some kind of hard and fast rule because I believe

1409
01:15:15,000 --> 01:15:15,200
math.

1410
01:15:15,200 --> 01:15:17,900
Textbook will also do it the other way round, right?

1411
01:15:18,700 --> 01:15:21,900
And when we do derivations on handmade hero because we want a lineup

1412
01:15:21,900 --> 01:15:24,600
with math, we may do them the other way, round in every other case

1413
01:15:24,600 --> 01:15:25,200
that we're doing.

1414
01:15:25,400 --> 01:15:27,800
I just want to show you for the implementation side of things.

1415
01:15:28,300 --> 01:15:29,900
This is that's all this diagram is for

1416
01:15:30,000 --> 01:15:30,800
or okay.

1417
01:15:31,500 --> 01:15:32,800
And so here is my b.

1418
01:15:33,900 --> 01:15:35,900
And I'm going to number them exactly the same way.

1419
01:15:45,500 --> 01:15:45,900
Oops.

1420
01:15:56,500 --> 01:15:59,200
All right, this is my Matrix C.

1421
01:15:59,500 --> 01:16:00,700
This is my Matrix B.

1422
01:16:01,100 --> 01:16:01,900
This is my Matrix.

1423
01:16:01,900 --> 01:16:02,100
A

1424
01:16:04,000 --> 01:16:08,400
all right, so this equation a times b equals c can be drawn out this

1425
01:16:08,400 --> 01:16:12,000
way where we have a and and these to appear in the same order they

1426
01:16:12,000 --> 01:16:12,800
appear here right?

1427
01:16:12,800 --> 01:16:15,800
A and B and the result just goes here you know I could put it over

1428
01:16:15,800 --> 01:16:19,500
here I could I could do it this way to make it a little bit more

1429
01:16:19,500 --> 01:16:22,700
lining up with the diagram right where C is kind of off to the right a

1430
01:16:22,700 --> 01:16:25,800
little bit more so hopefully maybe that helps a little bit but anyway

1431
01:16:25,800 --> 01:16:29,800
we have a times B in that order and the order is important because

1432
01:16:29,800 --> 01:16:33,700
matrix multiplication will see why in a second but that's what we're

1433
01:16:33,800 --> 01:16:35,200
I'm here now.

1434
01:16:36,500 --> 01:16:40,500
Like I said, major small location, vector equation exactly the same,

1435
01:16:40,900 --> 01:16:45,400
the way that this multiplication works, is it steps through each row

1436
01:16:45,400 --> 01:16:52,000
of B and each column of a to produce a single term in the output.

1437
01:16:52,100 --> 01:16:52,600
Right.

1438
01:16:53,300 --> 01:16:54,100
So exactly.

1439
01:16:54,100 --> 01:16:55,900
Like, we've been doing our Vector math.

1440
01:16:56,100 --> 01:16:58,700
It's the first element first element, right?

1441
01:16:58,700 --> 01:17:00,100
So it's a 0 0.

1442
01:17:00,100 --> 01:17:02,100
B 0 0, right?

1443
01:17:02,200 --> 01:17:04,600
Then it's be 10, a 10.

1444
01:17:07,400 --> 01:17:13,000
And then finally oops should keep them in the right order there a 01

1445
01:17:13,000 --> 01:17:14,500
be 10.

1446
01:17:14,800 --> 01:17:21,300
And then finally we have the last one a zero to be 20.

1447
01:17:21,800 --> 01:17:22,500
Right?

1448
01:17:22,600 --> 01:17:23,300
Can already tell that?

1449
01:17:23,300 --> 01:17:24,300
I'm going to run out of space here.

1450
01:17:24,300 --> 01:17:29,500
So I'm going to frill actively delete that.

1451
01:17:29,500 --> 01:17:30,100
All right.

1452
01:17:31,300 --> 01:17:31,600
Right.

1453
01:17:31,600 --> 01:17:32,700
And that's our first term.

1454
01:17:32,900 --> 01:17:37,000
Our next term is going to use a different row of a, but the same

1455
01:17:37,000 --> 01:17:45,500
column of B, write a 10, B, 0 0, a 1, 1 B, 10.

1456
01:17:47,200 --> 01:17:49,900
A 12 b 2 0, right?

1457
01:17:50,000 --> 01:17:51,700
The bees are the same.

1458
01:17:51,900 --> 01:17:53,900
The, a is different, right?

1459
01:17:55,000 --> 01:17:56,600
Same exact thing one more time.

1460
01:17:56,900 --> 01:17:57,900
A 2000.

1461
01:18:00,200 --> 01:18:01,100
A 2-1.

1462
01:18:02,200 --> 01:18:05,500
B10 a to to be 20.

1463
01:18:05,800 --> 01:18:09,600
That is our first column of C.

1464
01:18:10,600 --> 01:18:14,000
Now that is exactly the same as the vector multiplication.

1465
01:18:14,000 --> 01:18:16,700
If this if we pretend that this wasn't here, right?

1466
01:18:16,700 --> 01:18:17,900
It's exactly the same.

1467
01:18:18,100 --> 01:18:20,700
That's the way I say, Vector, multiplication and matrix.

1468
01:18:20,700 --> 01:18:24,300
Multiplication are exactly the same operation of vector is just a

1469
01:18:24,300 --> 01:18:26,600
matrix with less columns, right?

1470
01:18:26,800 --> 01:18:30,000
A vector is just a matrix that only has one column.

1471
01:18:30,200 --> 01:18:31,900
Whereas The Matrix and have as many columns as it

1472
01:18:32,000 --> 01:18:32,300
W.

1473
01:18:33,400 --> 01:18:35,900
And again, multiplication between two matrices.

1474
01:18:35,900 --> 01:18:40,700
If you look at how this works, it doesn't matter how many columns B

1475
01:18:40,700 --> 01:18:44,700
has be, could have 100 columns, and this would still work totally

1476
01:18:44,700 --> 01:18:49,000
well, because all that matters is that I have the same number of

1477
01:18:49,000 --> 01:18:51,700
columns in a, as rows in B.

1478
01:18:52,000 --> 01:18:57,600
So once I say what a is and I say how many columns a has be, can only

1479
01:18:57,600 --> 01:18:58,900
have that many rows?

1480
01:18:58,900 --> 01:19:00,200
That's the constraint.

1481
01:19:00,700 --> 01:19:03,000
But I can have as many columns as it wants this

1482
01:19:03,200 --> 01:19:08,900
Same thing is true of the rows of a right, the rows of a, a could have

1483
01:19:08,900 --> 01:19:10,200
as many roses it wants.

1484
01:19:10,200 --> 01:19:12,000
It doesn't matter how many rows it has.

1485
01:19:12,000 --> 01:19:14,900
It only matters how many columns it has because the columns have to

1486
01:19:14,900 --> 01:19:16,500
line up with the rows of B.

1487
01:19:17,000 --> 01:19:17,500
Right.

1488
01:19:18,500 --> 01:19:20,200
That's a mighty just multiplication works.

1489
01:19:20,800 --> 01:19:22,500
So what might respond to location?

1490
01:19:22,500 --> 01:19:27,300
Says in terms of being defined for the wrote kind of multiplication

1491
01:19:27,300 --> 01:19:28,400
we're doing here.

1492
01:19:28,400 --> 01:19:31,500
There, there's other sorts of Matrix math and things that you might

1493
01:19:31,500 --> 01:19:33,000
care about when you're talking about.

1494
01:19:33,100 --> 01:19:36,700
King with two matrices that don't obey those criteria.

1495
01:19:36,700 --> 01:19:39,800
But the vanilla Matrix map that we're doing here and the one that we

1496
01:19:39,800 --> 01:19:42,500
do for, basically, all 3D stuff that we're going to care about in

1497
01:19:42,500 --> 01:19:43,300
handmade hero.

1498
01:19:44,100 --> 01:19:46,100
That simple matrix product.

1499
01:19:47,000 --> 01:19:53,200
The basic fundamental matrix product, it just means that a columns.

1500
01:19:56,100 --> 01:19:57,800
Equals bees Rose.

1501
01:19:58,600 --> 01:20:00,700
That's all we need to have, right?

1502
01:20:01,800 --> 01:20:05,700
And they can see exactly how we produced it, we just step Through The

1503
01:20:05,700 --> 01:20:12,000
Columns of a and the and the rows of B and multiply them and that

1504
01:20:12,000 --> 01:20:17,200
produces a term and we do that for every row of a and doesn't matter

1505
01:20:17,200 --> 01:20:21,100
how many rows of a has, we just keep going then to produce how many

1506
01:20:21,100 --> 01:20:22,500
columns we want here?

1507
01:20:23,200 --> 01:20:25,400
We would just keep going through The Columns of B.

1508
01:20:25,400 --> 01:20:25,700
So now

1509
01:20:25,900 --> 01:20:30,400
We go back to the start of a and we just say, all right, it's a 0-0

1510
01:20:30,400 --> 01:20:31,100
again.

1511
01:20:31,300 --> 01:20:37,400
Right, we're using a 0 0 again but now we are going to produce use our

1512
01:20:37,400 --> 01:20:41,100
product using Loops, not the plus using the column of B.

1513
01:20:41,100 --> 01:20:43,100
So we go to be 01.

1514
01:20:43,100 --> 01:20:48,500
Now instead of 0 0 again, a is this act the same a 01 but now instead

1515
01:20:48,500 --> 01:20:54,800
of B10 it's be 11, then we go to a 0 2 and again because of B20 it's

1516
01:20:54,800 --> 01:20:55,700
be 21.

1517
01:20:55,800 --> 01:20:56,300
Right.

1518
01:20:56,300 --> 01:20:59,700
And now we again reproduce exactly the same operation.

1519
01:20:59,700 --> 01:20:59,800
We're

1520
01:21:00,000 --> 01:21:03,200
You're now the bees will be the same in this column but the A's will

1521
01:21:03,200 --> 01:21:04,200
change, right?

1522
01:21:04,200 --> 01:21:15,700
It's a 10 B, 0 1, a 1 1 b, 1 0, sorry, 11 a 12 B 21?

1523
01:21:16,100 --> 01:21:20,400
Right again, same thing a 2-0, b, 0 1,

1524
01:21:21,800 --> 01:21:25,400
A21 b11.

1525
01:21:26,400 --> 01:21:32,500
A.22, B21 right.

1526
01:21:34,200 --> 01:21:35,100
Make good sense.

1527
01:21:35,600 --> 01:21:36,400
Now, you can guess what?

1528
01:21:36,400 --> 01:21:37,800
The final column is, right?

1529
01:21:37,800 --> 01:21:39,900
It's exactly the same pattern that we've been following.

1530
01:21:40,100 --> 01:21:45,400
The a stay the same on a row, the be stay the same on a column, right?

1531
01:21:45,400 --> 01:21:50,700
So stepping here, we now have the final column here is 0 to 1 to 2 2,

1532
01:21:51,000 --> 01:21:51,400
right?

1533
01:21:51,400 --> 01:21:53,800
So here we were 0, 1 1, 1 2 1.

1534
01:21:53,800 --> 01:21:56,400
Now we're going to be 0 to 1 to 2 2, right?

1535
01:21:56,500 --> 01:22:03,900
But the A's will stay the same so we have a 0 0 B 0 to a 0 1 V 1 2.

1536
01:22:04,800 --> 01:22:08,100
Write a zero to be 22.

1537
01:22:09,600 --> 01:22:14,000
And then again the product here, the A's are going to stay the same

1538
01:22:14,000 --> 01:22:14,700
from this Row.

1539
01:22:14,800 --> 01:22:16,600
The bees are going to stay the same from the column.

1540
01:22:16,800 --> 01:22:19,600
So we end up with a 10 B.

1541
01:22:21,500 --> 01:22:29,700
0 to a 1 1 b, 1 2, a 1 2, b 2 2.

1542
01:22:30,000 --> 01:22:42,300
And finally again a is from here, a 2 0, B 0 2, a 2 1, b, 1 2 and a 2

1543
01:22:42,300 --> 01:22:43,700
2, b, 2 2.

1544
01:22:45,000 --> 01:22:50,900
And that is our new Matrix right now, what you can see is it's very

1545
01:22:51,100 --> 01:22:55,100
very concise how this is enumerated.

1546
01:22:55,300 --> 01:22:57,800
It is a giant set of math and matrix.

1547
01:22:57,800 --> 01:23:00,000
Multiplication mind you is slow, right?

1548
01:23:00,000 --> 01:23:05,200
It is a slow operation because there's just a lot of Mads going on.

1549
01:23:05,200 --> 01:23:06,500
There's a lot of multiply add.

1550
01:23:06,800 --> 01:23:08,900
Write a lot of two things multiplied by each other.

1551
01:23:08,900 --> 01:23:10,900
Plus two things multiplied, each other plus two things all over each

1552
01:23:10,900 --> 01:23:11,200
other, right?

1553
01:23:11,200 --> 01:23:12,500
That's how these are getting produced

1554
01:23:14,500 --> 01:23:18,400
There's a lot of that going on, but how it is going on is very

1555
01:23:18,400 --> 01:23:20,100
straightforward, right?

1556
01:23:20,200 --> 01:23:25,100
For if we wanted to write this in a more concise summation, notation

1557
01:23:25,100 --> 01:23:26,200
or something, right?

1558
01:23:26,300 --> 01:23:29,100
And we look at what we've got here, if I can sort of try to line it

1559
01:23:29,100 --> 01:23:32,000
up, you can see that what we have here, right?

1560
01:23:32,000 --> 01:23:33,200
Is the summation.

1561
01:23:34,300 --> 01:23:39,600
in this case of I from 0 to 2,

1562
01:23:41,400 --> 01:23:44,900
Right of a very simple product.

1563
01:23:44,900 --> 01:23:54,600
It's a 0, I bi0 right now, if you've never seen this term before,

1564
01:23:54,700 --> 01:23:57,500
maybe you got to go back to remember, your high school math, right?

1565
01:23:57,600 --> 01:23:59,800
This is saying, I'm going to some

1566
01:24:00,400 --> 01:24:02,000
It's a for I Loop, right?

1567
01:24:02,100 --> 01:24:07,900
This is just for I equals 0 to 2, right?

1568
01:24:08,100 --> 01:24:09,400
The thing inside.

1569
01:24:09,500 --> 01:24:10,300
Right Summit.

1570
01:24:10,300 --> 01:24:11,200
The thing inside.

1571
01:24:11,300 --> 01:24:14,700
So some equals zero sum

1572
01:24:16,300 --> 01:24:22,500
Plus equals write this thing a 0 I bi 0, right?

1573
01:24:22,500 --> 01:24:25,500
So this is Maths for I Loop, right?

1574
01:24:25,500 --> 01:24:28,900
And it's for I loop with a plus equals implicitly built into it,

1575
01:24:28,900 --> 01:24:29,300
right?

1576
01:24:29,400 --> 01:24:31,200
So it's saying take the first one.

1577
01:24:31,300 --> 01:24:33,800
Add it to the second one, add it to the third one, and the fourth one,

1578
01:24:33,800 --> 01:24:36,700
fifth, and sixth one, however, many Loops you want to take it just a

1579
01:24:36,700 --> 01:24:37,800
summation, right?

1580
01:24:38,200 --> 01:24:41,000
So this is all that is right.

1581
01:24:41,400 --> 01:24:43,800
Let's take a look at the second term again.

1582
01:24:43,800 --> 01:24:44,800
These are all

1583
01:24:46,100 --> 01:24:52,700
I equals 0 to 2, in fact, if I may, perhaps, you would permit me to

1584
01:24:52,700 --> 01:24:54,400
write this even more concise, right?

1585
01:24:54,400 --> 01:24:56,200
Because these summations, you can see what's going to happen.

1586
01:24:56,200 --> 01:24:58,500
They're all going to be i0 to to hear.

1587
01:24:58,500 --> 01:25:02,200
It's going to be the same thing a 0 I because we're still on the row

1588
01:25:02,200 --> 01:25:03,300
of a, right?

1589
01:25:03,300 --> 01:25:06,600
But now the B is instead of i 0 its I won.

1590
01:25:08,000 --> 01:25:08,500
Right.

1591
01:25:12,100 --> 01:25:13,500
So hopefully you can see what's going to happen.

1592
01:25:13,500 --> 01:25:16,300
I'm just going to do that for each of these positions, right?

1593
01:25:16,300 --> 01:25:18,700
And if you would permit me to write that in a slightly more concise

1594
01:25:18,700 --> 01:25:22,100
way I could put the summation outside because the summation is true

1595
01:25:22,100 --> 01:25:24,100
for every single element, right?

1596
01:25:24,200 --> 01:25:25,500
So, it's really, is summation of.

1597
01:25:25,500 --> 01:25:29,600
I equals 0 to 2 of The Matrix, right?

1598
01:25:31,000 --> 01:25:35,300
Hey 0, I bi 0, right?

1599
01:25:35,600 --> 01:25:37,700
And then if I go back, well, I've done it again.

1600
01:25:37,700 --> 01:25:39,500
I've managed to not get myself quite enough room.

1601
01:25:39,500 --> 01:25:41,800
Let's just pick a little bit bigger there, right?

1602
01:25:42,900 --> 01:25:45,500
The summation from I equals 0 to 2.

1603
01:25:45,800 --> 01:25:49,100
I've got a and again in this case right?

1604
01:25:49,100 --> 01:25:52,300
You can see across every one of these.

1605
01:25:52,300 --> 01:25:57,000
It the a constant changes per row not per column.

1606
01:25:58,300 --> 01:25:58,900
Right?

1607
01:25:58,900 --> 01:26:03,400
So the summation in this case here it's always 0, I right?

1608
01:26:03,400 --> 01:26:08,000
Because it goes across the some, the eye is in the second part is the

1609
01:26:08,000 --> 01:26:11,700
part that increments right bi 0.

1610
01:26:12,400 --> 01:26:15,700
And then, if I move down again the bees don't change, the bees are the

1611
01:26:15,700 --> 01:26:20,900
same in any column but the a changes so I'd have a one I right?

1612
01:26:20,900 --> 01:26:28,000
Oops that's one I bi 0, a 2, I be

1613
01:26:28,900 --> 01:26:30,400
Zero, right?

1614
01:26:31,900 --> 01:26:34,000
Because you can see the bees are unchanged.

1615
01:26:34,300 --> 01:26:38,700
They're always the same no matter which row there in here and then

1616
01:26:38,700 --> 01:26:42,900
moving across the A's are the same across a row but the bees change,

1617
01:26:42,900 --> 01:26:43,400
right?

1618
01:26:43,400 --> 01:26:50,200
So this is a 0 I still but now it's bi 1, this is a 0 I still but now

1619
01:26:50,200 --> 01:26:50,900
it's bi2.

1620
01:26:52,000 --> 01:26:52,600
Right?

1621
01:26:52,800 --> 01:26:55,400
And now again it's just copy, just copy and paste.

1622
01:26:55,400 --> 01:26:58,300
I'm one eye to eye.

1623
01:26:58,400 --> 01:26:59,800
I won.

1624
01:27:00,100 --> 01:27:05,100
Eye-to-eye, and in this case, we've got the be right.

1625
01:27:05,700 --> 01:27:06,300
I won.

1626
01:27:06,300 --> 01:27:07,100
It's coming from here.

1627
01:27:07,100 --> 01:27:13,700
Now, b, 1, B, I2 B I2.

1628
01:27:15,500 --> 01:27:17,700
So this is matrix multiplication.

1629
01:27:21,500 --> 01:27:22,000
Right.

1630
01:27:22,000 --> 01:27:23,500
That's all we're trying to do.

1631
01:27:24,800 --> 01:27:28,400
It's just the for I Loop and really if we wanted to, we could do

1632
01:27:28,400 --> 01:27:32,200
another for we could do multiple for a loop, because you can see these

1633
01:27:32,200 --> 01:27:34,300
actually have regular structure to them as well.

1634
01:27:34,300 --> 01:27:37,800
Write the column and the row of the result.

1635
01:27:38,000 --> 01:27:42,400
Tell you the constants for these, whichever column I'm on is the

1636
01:27:42,400 --> 01:27:45,300
constant for be, whichever row.

1637
01:27:45,300 --> 01:27:47,300
I'm on is the constant for a.

1638
01:27:47,500 --> 01:27:51,100
So three, nested for I Loops essentially give me

1639
01:27:51,600 --> 01:27:55,700
My whole Matrix multiply with one term, right?

1640
01:27:57,500 --> 01:27:58,700
So that's matrix multiplication.

1641
01:27:58,700 --> 01:28:01,200
Let me just go ahead and write it out for you now in code.

1642
01:28:01,300 --> 01:28:04,500
So you can see, hope you can see how that all got derived.

1643
01:28:04,600 --> 01:28:08,000
I'm going to go to handmade math and I'm just going to sort of Speck

1644
01:28:08,000 --> 01:28:08,300
in here.

1645
01:28:08,300 --> 01:28:11,600
Just really quickly and inline Matrix multiply

1646
01:28:12,800 --> 01:28:17,400
I don't think we have a matrix class anywhere, right?

1647
01:28:17,400 --> 01:28:19,700
There's no struct Matrix.

1648
01:28:19,800 --> 01:28:21,500
I don't think so.

1649
01:28:21,500 --> 01:28:24,900
I'm going to go over to the platform code where that is it's kind of

1650
01:28:24,900 --> 01:28:26,000
out in here somewhere.

1651
01:28:26,000 --> 01:28:26,700
Yeah there it is.

1652
01:28:26,900 --> 01:28:31,400
You can see V3 and V4 and all that.

1653
01:28:31,800 --> 01:28:36,500
So I'm going to go ahead and just throw in a matrix here.

1654
01:28:36,500 --> 01:28:38,800
So you can see it really quickly.

1655
01:28:39,200 --> 01:28:42,500
I'm going to make a full four by four Matrix so that we have one

1656
01:28:42,600 --> 01:28:47,100
Just for our own purposes and I'm going to go ahead and and just make

1657
01:28:47,100 --> 01:28:49,400
that 4 by 4, right?

1658
01:28:50,900 --> 01:28:51,300
Okay.

1659
01:28:52,000 --> 01:28:54,900
So I'm going to make something that is basically a multiple

1660
01:28:54,900 --> 01:28:59,400
multiplication operator between two matrices, so I'm going to take a

1661
01:28:59,400 --> 01:29:05,500
matrix, a and Matrix B, and I'm going to produce a matrix result out

1662
01:29:05,500 --> 01:29:05,900
of it.

1663
01:29:07,000 --> 01:29:10,700
And I'm going to do the for I Loop version so that you can see it and

1664
01:29:10,700 --> 01:29:13,300
we'll probably just leave it that way because the compiler is usually

1665
01:29:13,300 --> 01:29:16,200
smart enough to unroll constant Loops, right?

1666
01:29:16,800 --> 01:29:18,400
So I'm going to keep our notation.

1667
01:29:18,400 --> 01:29:19,000
Here are

1668
01:29:20,700 --> 01:29:22,900
For interior, some of the terms.

1669
01:29:23,400 --> 01:29:26,800
So I'm going to go ahead and say all right I've got an interior.

1670
01:29:26,800 --> 01:29:27,700
That's I

1671
01:29:30,300 --> 01:29:32,600
And we'll go ahead and step out words from the eye.

1672
01:29:33,200 --> 01:29:39,500
I'm going to use here a and say we're going to do columns here.

1673
01:29:42,300 --> 01:29:42,500
Right?

1674
01:29:42,500 --> 01:29:45,700
That's the column and here's the row.

1675
01:29:51,000 --> 01:29:54,300
And what we want to do is into our result, right?

1676
01:29:54,300 --> 01:29:58,400
We want to be able to place a some into our results.

1677
01:29:58,400 --> 01:29:59,800
So we've got the result here.

1678
01:30:00,500 --> 01:30:01,900
We know we have the elements.

1679
01:30:02,000 --> 01:30:04,300
So the question is, you know, we need to

1680
01:30:06,600 --> 01:30:08,400
Initialize this 20 obviously.

1681
01:30:08,700 --> 01:30:10,100
And again this is, you know,

1682
01:30:20,600 --> 01:30:23,600
This is supposed to be the instructive version of this, you can just

1683
01:30:23,600 --> 01:30:24,200
see how it works.

1684
01:30:24,200 --> 01:30:28,200
Not supposed to be the most efficient way necessarily or anything like

1685
01:30:28,200 --> 01:30:28,600
that.

1686
01:30:29,200 --> 01:30:32,300
So when we want to do the multiplication here we've got a some these

1687
01:30:32,300 --> 01:30:33,200
terms together, right?

1688
01:30:33,200 --> 01:30:34,800
And you can see, we've got a 0.

1689
01:30:34,800 --> 01:30:37,000
I bi 0, a 1.

1690
01:30:37,000 --> 01:30:38,200
I bi 0, right?

1691
01:30:38,200 --> 01:30:44,500
So it's always the, I is the column on a and the row on be right?

1692
01:30:45,000 --> 01:30:47,300
So I'm just going to copy.

1693
01:30:49,800 --> 01:30:52,900
Exactly that notation over and say that it.

1694
01:30:52,900 --> 01:30:58,200
So he's you can see that the second coordinate and I is I the first

1695
01:30:58,200 --> 01:30:59,800
coordinate is be.

1696
01:31:00,100 --> 01:31:03,700
So then we've got row and column, right of our result.

1697
01:31:04,200 --> 01:31:09,700
And like I said, the way that I did it is we've got in terms of what

1698
01:31:09,700 --> 01:31:11,100
is rho and what's column.

1699
01:31:11,600 --> 01:31:13,400
If you recall, I mean, sorry.

1700
01:31:13,400 --> 01:31:17,200
Pan back over to that information, right?

1701
01:31:17,600 --> 01:31:18,300
You can see the way I

1702
01:31:19,000 --> 01:31:23,700
Row is the first value and column is the second value, right?

1703
01:31:25,400 --> 01:31:28,700
So if you want to take a look at how this is going, when we're

1704
01:31:28,700 --> 01:31:33,300
producing a row and column of the output row is the first, right?

1705
01:31:33,300 --> 01:31:36,500
And column is the second, so we're producing one of our outputs.

1706
01:31:36,800 --> 01:31:40,300
And so then we just have to look up into our table here that we've

1707
01:31:40,600 --> 01:31:41,900
meticulously created.

1708
01:31:42,200 --> 01:31:48,300
If we want to produce the, you know, the 00, the row column version,

1709
01:31:48,900 --> 01:31:53,000
who gets the row, who gets the column, you can see that be right.

1710
01:31:53,000 --> 01:31:54,600
It's constant is

1711
01:31:54,700 --> 01:31:57,100
Always getting the column, right?

1712
01:31:57,100 --> 01:32:02,800
So it's always the column for be right 0, 0 0, 1 1, 1 2 2 2.

1713
01:32:03,200 --> 01:32:05,300
Right so be is always getting the column.

1714
01:32:05,400 --> 01:32:09,300
You can see that the constant for a is always the row, right?

1715
01:32:10,500 --> 01:32:11,400
So there's the row.

1716
01:32:13,800 --> 01:32:16,200
And so now you can see matrix multiplication.

1717
01:32:16,200 --> 01:32:19,800
That is how you multiply two matrices together that produces the

1718
01:32:19,800 --> 01:32:20,600
result.

1719
01:32:20,600 --> 01:32:24,600
In this case, you know we were doing a 3D Matrix here.

1720
01:32:24,600 --> 01:32:27,600
I wanted to do a matrix that's the full homogeneous Matrix like we

1721
01:32:27,600 --> 01:32:29,400
have to pass to opengl.

1722
01:32:29,600 --> 01:32:31,800
I want to do the whole Matrix.

1723
01:32:31,800 --> 01:32:37,600
So it's going to be a 3 in this case because it's 0 1 2 3, not 0 1 2.

1724
01:32:38,000 --> 01:32:41,400
So we've got an extra row and column but again the Matrix math doesn't

1725
01:32:41,400 --> 01:32:43,100
care about that it only cares.

1726
01:32:43,200 --> 01:32:50,400
There's dimensionality why's that the rows of of right hand side and

1727
01:32:50,400 --> 01:32:52,900
The Columns of the left hand side have the same number in them.

1728
01:32:53,500 --> 01:32:57,900
Now, what you can see from the construction of this Loop is you can

1729
01:32:57,900 --> 01:32:59,800
see exactly why that has to be

1730
01:33:00,000 --> 01:33:07,100
To write when you Loop through these, you can see that a is getting

1731
01:33:07,100 --> 01:33:12,100
picked out by R 0, and B is getting picked up by column the row and

1732
01:33:12,100 --> 01:33:13,700
column values in.

1733
01:33:13,700 --> 01:33:17,600
No way affect the up the two in any other way, right?

1734
01:33:17,800 --> 01:33:23,700
So that basically means that your choice of row, what are has to be is

1735
01:33:23,700 --> 01:33:28,300
only relevant for a because it only appears in the expression for a

1736
01:33:29,100 --> 01:33:29,800
similarly

1737
01:33:30,000 --> 01:33:34,100
Lee, the column only appears in the expression for B?

1738
01:33:35,300 --> 01:33:38,600
So the row and column counts are not relevant in that way.

1739
01:33:38,700 --> 01:33:41,100
A is free to have as many roses at wants.

1740
01:33:41,100 --> 01:33:44,900
It determines the R&B is free to have as many columns as it wants

1741
01:33:44,900 --> 01:33:47,000
because it determines the sea.

1742
01:33:47,600 --> 01:33:50,100
However, you see the Restriction.

1743
01:33:50,100 --> 01:33:53,700
It's baked into the code and into the rules of Matrix math.

1744
01:33:54,300 --> 01:34:01,200
I appears in both it appears as the column of a and the row of B.

1745
01:34:01,400 --> 01:34:04,700
And that is where that fundamental, that that

1746
01:34:04,900 --> 01:34:09,000
Basic restriction of Matrix math comes from because that is how the

1747
01:34:09,000 --> 01:34:10,400
terms are contracted.

1748
01:34:10,400 --> 01:34:14,400
It means that you always must have the same number.

1749
01:34:14,400 --> 01:34:17,900
It could be any number you want here, but that means that you have to

1750
01:34:17,900 --> 01:34:22,600
have the same number of columns of a, as you have rows of B, because

1751
01:34:22,600 --> 01:34:25,200
that is where the term is the same, right?

1752
01:34:25,200 --> 01:34:27,800
That I attorney that I picks out both.

1753
01:34:29,600 --> 01:34:30,000
Okay.

1754
01:34:34,000 --> 01:34:37,900
Alright, so now we have the way a way to define one of these Saucy

1755
01:34:37,900 --> 01:34:39,300
matrices, right?

1756
01:34:40,600 --> 01:34:43,100
And I could avoid initializing it here because I'm just doing that.

1757
01:34:43,100 --> 01:34:46,300
Some, I could just say, you know what, clear it to 0, right?

1758
01:34:46,500 --> 01:34:49,000
And again this is not necessarily optimal because you can see here.

1759
01:34:49,000 --> 01:34:51,400
Well I don't really need to clear it to zero because I could start by

1760
01:34:51,400 --> 01:34:55,100
initializing it to the first term of the series if I wanted to write

1761
01:34:55,100 --> 01:34:56,000
blah blah blah, right?

1762
01:34:56,000 --> 01:34:59,100
I can you could imagine pulling this out and making it be equal to the

1763
01:34:59,100 --> 01:35:02,700
first one of these up here and then doing this equals I equals 1 2 3.

1764
01:35:02,900 --> 01:35:05,000
And only something in things that actually to be some great.

1765
01:35:05,000 --> 01:35:07,900
So so this is the instructor version, not the optimal version.

1766
01:35:07,900 --> 01:35:09,900
You can make a better version of this if you want to.

1767
01:35:09,900 --> 01:35:12,000
But I wanted to make it look as close to the math as possible.

1768
01:35:12,100 --> 01:35:13,400
Hopefully, that's very clear.

1769
01:35:13,900 --> 01:35:15,500
What's going on here, right?

1770
01:35:16,600 --> 01:35:17,500
This is the row.

1771
01:35:19,000 --> 01:35:20,000
This is the column.

1772
01:35:21,900 --> 01:35:30,400
And this is, this is rows of a Columns of B.

1773
01:35:32,000 --> 01:35:36,800
Now, what you can also see, just by looking at the routine is no

1774
01:35:36,800 --> 01:35:38,900
matter what you decide to do Matrix wise.

1775
01:35:39,200 --> 01:35:42,500
You can see what the definition is of the result.

1776
01:35:42,500 --> 01:35:45,200
What's the shape of that result, right?

1777
01:35:46,200 --> 01:35:51,400
And the answer is it will have as many rows and I guess I should put

1778
01:35:51,400 --> 01:35:55,800
up here rows of a Columns of B, right?

1779
01:35:57,700 --> 01:35:59,800
Who put that backwards.

1780
01:36:01,400 --> 01:36:02,200
homes of a,

1781
01:36:03,800 --> 01:36:04,700
Roosevelt, there we go.

1782
01:36:05,500 --> 01:36:08,700
You can see exactly what the shape of that output is, right?

1783
01:36:09,200 --> 01:36:13,300
It's going to have as many rows that as a has, and it's going to have

1784
01:36:13,300 --> 01:36:16,700
as many columns as be has, right?

1785
01:36:16,800 --> 01:36:22,300
So what that means is your, you know, your your inputs, the two

1786
01:36:22,300 --> 01:36:28,500
matrices that you combine, their Dimensions, the row dimension of a,

1787
01:36:28,500 --> 01:36:33,200
and the convention of be will determine the shape of the resulting

1788
01:36:33,200 --> 01:36:33,500
Matrix.

1789
01:36:34,200 --> 01:36:34,500
Right.

1790
01:36:34,500 --> 01:36:38,300
And you can see that right in this one fundamental line of code,

1791
01:36:38,400 --> 01:36:38,900
right?

1792
01:36:38,900 --> 01:36:41,500
You can see rows and columns,

1793
01:36:43,600 --> 01:36:46,500
And that again that row column come that row comes from how many are

1794
01:36:46,500 --> 01:36:47,000
in a.

1795
01:36:47,000 --> 01:36:47,400
Why?

1796
01:36:47,500 --> 01:36:51,400
Because a is the only person who cares about our our is never even

1797
01:36:51,400 --> 01:36:53,100
used in be right?

1798
01:36:53,700 --> 01:36:58,200
Similarly columns never used in a only used in be

1799
01:36:59,800 --> 01:37:02,900
So again, it's very, very clear, just from typing out the code, you

1800
01:37:02,900 --> 01:37:07,500
can see exactly how the math actually ends up being defined, right?

1801
01:37:07,800 --> 01:37:10,200
And you can see that from the picture over here, as well.

1802
01:37:11,100 --> 01:37:12,300
Just to hammer this home.

1803
01:37:13,000 --> 01:37:16,700
Let's say I made an a that looked, you know, quite a bit different.

1804
01:37:20,900 --> 01:37:24,600
Okay, so here's one two, three, four, five, right?

1805
01:37:24,600 --> 01:37:29,100
So it's five columns across a and it's two down, right?

1806
01:37:29,300 --> 01:37:34,300
So tell me, what does the shape of be have to be?

1807
01:37:38,800 --> 01:37:40,600
All right, I'm giving you a little while.

1808
01:37:41,700 --> 01:37:43,400
What is the shape of B have to be?

1809
01:37:44,600 --> 01:37:45,800
You should now know this.

1810
01:37:48,000 --> 01:37:55,600
And the answer is the shape of B has to be at least five rows tall,

1811
01:37:56,100 --> 01:37:56,700
right?

1812
01:37:56,800 --> 01:37:57,400
Why?

1813
01:37:57,600 --> 01:38:03,500
Because as we step Through The Columns of a, we must step down the

1814
01:38:03,500 --> 01:38:05,100
rows of B.

1815
01:38:05,700 --> 01:38:09,700
And so that is how we know B has to be 5 tall.

1816
01:38:10,100 --> 01:38:13,200
How many columns does B have to have?

1817
01:38:13,200 --> 01:38:17,500
The answer is as many as it wants.

1818
01:38:18,000 --> 01:38:18,700
Right.

1819
01:38:19,000 --> 01:38:21,600
And however many it has let's say, it had three

1820
01:38:25,000 --> 01:38:29,900
Write that again, will determine the shape of the result.

1821
01:38:29,900 --> 01:38:35,300
The shape of the result is, however, many rows.

1822
01:38:35,300 --> 01:38:36,200
You had of a

1823
01:38:38,500 --> 01:38:41,200
And however, many columns you had of be.

1824
01:38:43,600 --> 01:38:47,800
And again, all of this stuff is Trivial to remember just by

1825
01:38:47,800 --> 01:38:49,700
remembering this fundamental contraction.

1826
01:38:49,700 --> 01:38:52,700
This picture tells you everything you need to know, you don't need to

1827
01:38:52,700 --> 01:38:54,200
remember any of that stuff separately.

1828
01:38:54,300 --> 01:38:57,600
You just have to remember this contraction where you have to step

1829
01:38:57,600 --> 01:38:59,800
down, you know you make these little lines.

1830
01:39:00,000 --> 01:39:03,100
I always make you can see this one, this one, this one, this one, this

1831
01:39:03,100 --> 01:39:03,200
one.

1832
01:39:03,200 --> 01:39:04,000
This one is missing.

1833
01:39:04,100 --> 01:39:07,700
You can see what has to line up and you don't care how many columns

1834
01:39:07,700 --> 01:39:08,300
you have, right?

1835
01:39:08,300 --> 01:39:09,000
You don't care.

1836
01:39:09,000 --> 01:39:13,600
How many rows you have of a or a Columns of B that just makes a bigger

1837
01:39:13,600 --> 01:39:17,500
or smaller result here in terms of columns or rows.

1838
01:39:19,700 --> 01:39:20,200
All right.

1839
01:39:23,000 --> 01:39:24,000
So, how does that help us?

1840
01:39:25,200 --> 01:39:27,600
Again, we're trying to get to the point where we can do that rotation.

1841
01:39:29,500 --> 01:39:32,700
Well, the way that that helps us is this matrix multiplication here.

1842
01:39:34,800 --> 01:39:38,700
That we just worked out how to do, right?

1843
01:39:38,700 --> 01:39:41,100
Where I want to produce C equals a times B.

1844
01:39:41,100 --> 01:39:42,900
The answer is, why do I want to know that?

1845
01:39:42,900 --> 01:39:45,500
Well, the answer is jumping ahead.

1846
01:39:45,500 --> 01:39:50,200
A little bit, is that if I were to transform a point by a times B,

1847
01:39:50,200 --> 01:39:55,800
it's the same as transforming it by the, by the result of the

1848
01:39:55,800 --> 01:39:59,900
medication, that's obvious in some sense, because if we're saying that

1849
01:39:59,900 --> 01:40:04,400
C equals a times B, well, that means anywhere, we see a times B, we

1850
01:40:04,400 --> 01:40:04,800
could substitute.

1851
01:40:04,900 --> 01:40:06,900
Two in C, right?

1852
01:40:07,300 --> 01:40:10,700
So matrix multiplication we know how to do it and we know how to make

1853
01:40:10,700 --> 01:40:12,000
it equal, right?

1854
01:40:13,800 --> 01:40:17,900
And that is exactly what we need to do in our open GL code.

1855
01:40:17,900 --> 01:40:18,400
Right?

1856
01:40:18,500 --> 01:40:21,600
Because what we want to be able to do now is do the projection Matrix

1857
01:40:21,600 --> 01:40:25,600
that we're doing here, plus maybe some rotation around X and Y and Z,

1858
01:40:25,600 --> 01:40:27,200
we want to be able to do all that stuff.

1859
01:40:27,600 --> 01:40:31,100
If we have the ability to take matrices, we know how to build

1860
01:40:31,100 --> 01:40:36,500
composite them together in this way to produce a set of transforms

1861
01:40:36,500 --> 01:40:39,800
that we want to do, then we will be able

1862
01:40:41,900 --> 01:40:43,700
To do all of the work we want to do.

1863
01:40:47,900 --> 01:40:48,900
With just one Matrix.

1864
01:40:48,900 --> 01:40:49,500
Multiply

1865
01:40:51,400 --> 01:40:52,800
Which is really handy, right?

1866
01:40:55,100 --> 01:40:56,400
All right, so let's continue from there.

1867
01:40:57,400 --> 01:41:00,900
So, we know how to build all these matrices.

1868
01:41:00,900 --> 01:41:04,400
If we want to build these matrices with four dimensions, we can always

1869
01:41:04,400 --> 01:41:09,100
just augment them right to have an additional identity that just

1870
01:41:09,100 --> 01:41:11,800
leaves the W coordinate untouched, right?

1871
01:41:11,800 --> 01:41:15,100
Because we don't care again about that W coordinate, right?

1872
01:41:15,100 --> 01:41:17,800
We're not rotating it at all.

1873
01:41:19,200 --> 01:41:20,100
It's another dimension.

1874
01:41:20,100 --> 01:41:23,600
That's not being affected by the rotation in that plane because

1875
01:41:23,600 --> 01:41:24,800
rotation is only half,

1876
01:41:25,000 --> 01:41:29,100
In the plane of rotation that we care about, it's a fundamentally 2D

1877
01:41:29,100 --> 01:41:32,000
rotation happening in three dimensions, right?

1878
01:41:32,000 --> 01:41:35,500
It is not a rotation of three dimensions happening in four dimensions

1879
01:41:35,500 --> 01:41:36,600
or anything like that.

1880
01:41:37,200 --> 01:41:37,700
So,

1881
01:41:39,300 --> 01:41:42,700
What that means is we can take the stuff that we derived before.

1882
01:41:43,400 --> 01:41:43,600
M.

1883
01:41:43,600 --> 01:41:45,200
4 by 4 here, right?

1884
01:41:45,500 --> 01:41:48,300
And I can say, you know, X rotation.

1885
01:41:51,800 --> 01:41:52,900
Wow, rotation

1886
01:42:01,300 --> 01:42:05,400
And I can make routines that will do.

1887
01:42:09,800 --> 01:42:12,300
You know, I'm going to stop saying that you just assume that's true

1888
01:42:12,300 --> 01:42:13,500
until we optimize something.

1889
01:42:14,500 --> 01:42:18,900
I'm going to make something that will construct exactly the rotation

1890
01:42:18,900 --> 01:42:21,800
matrices that we're talking about here, right?

1891
01:42:35,000 --> 01:42:37,400
Okay, and I'm going to construct them.

1892
01:42:45,100 --> 01:42:50,700
Such that we can actually see their structure here.

1893
01:42:52,600 --> 01:42:56,500
Now, what I do have to do in this case is I probably have to bracket

1894
01:42:56,500 --> 01:43:00,300
this one more time because that's actually an initializer there.

1895
01:43:01,100 --> 01:43:03,200
Don't know why for coder was doing that.

1896
01:43:03,300 --> 01:43:03,800
There we go.

1897
01:43:05,400 --> 01:43:07,700
No, I guess it wanted to move it over for the extra brace.

1898
01:43:07,700 --> 01:43:08,700
That actually makes sense.

1899
01:43:09,900 --> 01:43:12,300
So this would be an identity Matrix, right?

1900
01:43:32,100 --> 01:43:35,500
That would be a matrix that does nothing to its input.

1901
01:43:36,600 --> 01:43:38,800
And again, we've talked about that multiple times on handmade hero.

1902
01:43:38,800 --> 01:43:42,900
So hopefully, that's not something that's particularly strange to you,

1903
01:43:42,900 --> 01:43:43,500
right?

1904
01:43:43,900 --> 01:43:46,700
And furthermore, we could actually just save one of these, in case we

1905
01:43:46,700 --> 01:43:47,500
want it later.

1906
01:43:48,100 --> 01:43:50,100
We could just make one called identity.

1907
01:43:57,400 --> 01:43:59,200
Literally just returns that Matrix.

1908
01:44:01,100 --> 01:44:02,900
So now we've already worked out.

1909
01:44:02,900 --> 01:44:03,900
What all of these are.

1910
01:44:03,900 --> 01:44:05,000
Let's go ahead and do it.

1911
01:44:05,100 --> 01:44:08,800
Our Z axis rotation, we know is going to be cosine, sine negative,

1912
01:44:08,800 --> 01:44:10,400
sine cosine, right?

1913
01:44:10,400 --> 01:44:13,100
So it's just going to be cosine sine.

1914
01:44:14,700 --> 01:44:16,500
- sine cosine, right?

1915
01:44:16,600 --> 01:44:20,200
And what we can do here is just compute those up front.

1916
01:44:20,200 --> 01:44:23,100
So the cosine is going to be the cosine of the angle.

1917
01:44:23,300 --> 01:44:25,000
The sign is going to be the sine of the angle.

1918
01:44:25,200 --> 01:44:26,800
All of the routines want that.

1919
01:44:26,900 --> 01:44:29,500
And all we're doing to produce these different rotation.

1920
01:44:29,500 --> 01:44:32,200
Matrices is just picking where we're putting them, right?

1921
01:44:32,200 --> 01:44:35,400
And like I said, we already worked all this out, so let's just go read

1922
01:44:35,400 --> 01:44:37,500
them off, you know, if I could find them.

1923
01:44:38,500 --> 01:44:40,000
So, there's our X rotation.

1924
01:44:42,000 --> 01:44:43,200
There's cosine, sine.

1925
01:44:47,300 --> 01:44:48,400
Sine cosine, right?

1926
01:44:48,400 --> 01:44:52,400
So there's our X rotation, and here's our y rotation down here.

1927
01:44:54,300 --> 01:44:57,000
Cosine negative, sine.

1928
01:45:00,800 --> 01:45:01,900
And then sine cosine.

1929
01:45:02,900 --> 01:45:04,800
I think I got all those in the right place.

1930
01:45:04,800 --> 01:45:05,100
Yeah.

1931
01:45:07,200 --> 01:45:10,200
So now we can build any rotation Matrix.

1932
01:45:10,200 --> 01:45:15,600
We want in terms of cardinal rotations, we can multiply any two

1933
01:45:15,600 --> 01:45:18,800
rotations together to produce a rotation that does both.

1934
01:45:19,400 --> 01:45:20,500
And we can

1935
01:45:22,600 --> 01:45:25,500
Yeah, we can, we can do anything we want here, right?

1936
01:45:25,500 --> 01:45:28,400
We can we can produce and multiply any rotations that we want.

1937
01:45:28,500 --> 01:45:31,800
Now, the important thing to remember here and this is where things

1938
01:45:32,000 --> 01:45:35,300
start to get a little Squinkie, because we're not using shaders.

1939
01:45:35,300 --> 01:45:37,200
Yet, we're using the fixed function pipeline.

1940
01:45:37,800 --> 01:45:42,500
If I go to the platform code, I need to make a note here.

1941
01:45:42,700 --> 01:45:44,400
These are stored.

1942
01:45:46,200 --> 01:45:51,600
Such that they are column sorry row, major right?

1943
01:45:52,500 --> 01:45:52,800
So

1944
01:46:16,100 --> 01:46:20,900
Second third, fourth, fifth, sixth seventh eighth, right?

1945
01:46:21,000 --> 01:46:22,400
Not this one.

1946
01:46:22,400 --> 01:46:23,300
Then this one, then this one.

1947
01:46:23,300 --> 01:46:27,300
Then this one, what that means is, it's not this way.

1948
01:46:28,600 --> 01:46:29,200
Right?

1949
01:46:29,200 --> 01:46:33,200
This is opengl style and this is not, this is column major.

1950
01:46:34,000 --> 01:46:37,700
So I want to do it this way because I want are matrices to look math

1951
01:46:37,700 --> 01:46:39,300
style, right?

1952
01:46:39,300 --> 01:46:43,100
I want you to be able to see them math style, so when they we write

1953
01:46:43,100 --> 01:46:43,400
them out.

1954
01:46:43,400 --> 01:46:44,800
That's what we expect them to look.

1955
01:46:44,800 --> 01:46:47,300
Like is the way we would write them in math.

1956
01:46:47,500 --> 01:46:50,800
And so what we're going to do when we get over to the opengl side of

1957
01:46:50,800 --> 01:46:53,700
things is we're just going to flip them around, right?

1958
01:46:53,700 --> 01:46:57,100
We're going to before we load them in opengl, we're just going to flip

1959
01:46:57,100 --> 01:46:57,400
them.

1960
01:46:59,100 --> 01:47:02,600
And I'm pretty sure there's actually a transpose load in opengl

1961
01:47:02,600 --> 01:47:06,600
nowadays to even if you're using the fixed function pipeline, I could

1962
01:47:06,600 --> 01:47:07,300
be wrong about that.

1963
01:47:07,300 --> 01:47:08,100
Let me just see.

1964
01:47:09,400 --> 01:47:10,800
You'll load Matrix.

1965
01:47:12,400 --> 01:47:13,900
Is there a transpose?

1966
01:47:15,900 --> 01:47:22,200
So here you go, Geo load transpose, Matrix, we can look, we can call

1967
01:47:22,200 --> 01:47:27,300
that and it would do the transpose load, right?

1968
01:47:27,300 --> 01:47:34,100
So you actually can you actually can load in a matrix in row major

1969
01:47:34,100 --> 01:47:35,300
order nowadays?

1970
01:47:35,300 --> 01:47:39,200
It just this would be load transpose Matrix.

1971
01:47:39,200 --> 01:47:42,400
F and the problem is that is a function.

1972
01:47:42,400 --> 01:47:43,500
We would have to load.

1973
01:47:43,500 --> 01:47:44,900
So rather than do that.

1974
01:47:44,900 --> 01:47:45,800
And like I said, we won't

1975
01:47:46,000 --> 01:47:47,900
Here we get to the fixed function when we get out of the fixed

1976
01:47:47,900 --> 01:47:48,200
function.

1977
01:47:48,200 --> 01:47:52,600
Anyway, rather than do that, instead what I would rather do is just

1978
01:47:52,600 --> 01:47:58,300
swap the values around so that we actually end up with a matrix at the

1979
01:47:58,300 --> 01:47:59,900
end, that is in open.

1980
01:48:00,000 --> 01:48:02,500
Whales preferred format, right?

1981
01:48:03,700 --> 01:48:06,500
Okay, so that's all well and good.

1982
01:48:06,900 --> 01:48:10,200
But again, we need, you know, we need some way of doing that.

1983
01:48:10,200 --> 01:48:13,700
So let's just go ahead and make a transpose operation here that will

1984
01:48:13,700 --> 01:48:17,200
produce what we actually want in this case.

1985
01:48:17,400 --> 01:48:17,900
So,

1986
01:48:21,100 --> 01:48:23,100
remember if we wanted to,

1987
01:48:25,100 --> 01:48:29,400
Produce the kind of a matrix that open Jaws expecting, right,

1988
01:48:29,400 --> 01:48:29,800
essentially?

1989
01:48:29,800 --> 01:48:35,500
What we're saying is, Well, we start our things, a b c d, e, f, g, h.

1990
01:48:35,800 --> 01:48:37,100
I j k.

1991
01:48:37,100 --> 01:48:40,100
L m n o p, right?

1992
01:48:40,100 --> 01:48:43,100
That's the 4 by 4 Matrix that we're storing that goes in this order,

1993
01:48:43,100 --> 01:48:43,700
right?

1994
01:48:43,700 --> 01:48:46,100
Opengl is going to read it in that order.

1995
01:48:46,300 --> 01:48:50,900
So the Matrix that opengl is actually going to see is going to be a

1996
01:48:51,000 --> 01:48:51,400
e-i-e-i-o.

1997
01:48:52,400 --> 01:48:54,000
I am right?

1998
01:48:55,300 --> 01:48:58,100
F JN, right?

1999
01:48:58,100 --> 01:49:00,100
See you can see what's going on here, right?

2000
01:49:00,100 --> 01:49:01,800
CGH right.

2001
01:49:01,800 --> 01:49:03,400
It's reading them this way.

2002
01:49:04,000 --> 01:49:07,000
So all we have to do is first flip our Matrix.

2003
01:49:07,000 --> 01:49:10,500
So our Rose, become our columns, in our comms Camaros, that's just

2004
01:49:10,500 --> 01:49:11,700
that transpose.

2005
01:49:12,200 --> 01:49:14,500
Operator, write the transpose.

2006
01:49:14,500 --> 01:49:19,600
Operator is the thing that takes AI J and flips it to AJ.

2007
01:49:19,600 --> 01:49:23,800
I write it just flips, the indices and that's exactly what open Jill's

2008
01:49:23,800 --> 01:49:24,300
doing.

2009
01:49:25,000 --> 01:49:26,400
When it's reading out our Matrix.

2010
01:49:26,400 --> 01:49:27,900
So we just have to do the opposite.

2011
01:49:27,900 --> 01:49:32,100
We may want a transpose operator anyway, but you know, we might not

2012
01:49:32,100 --> 01:49:34,900
want to transfer the operator for four by fours but you know, a 6-1

2013
01:49:34,900 --> 01:49:35,400
have done there.

2014
01:49:35,400 --> 01:49:36,200
You'll see what I mean.

2015
01:49:36,200 --> 01:49:43,100
Later down the line but point being our result here, what we can do is

2016
01:49:43,100 --> 01:49:46,000
just do and I oops, it's going to take a

2017
01:49:47,500 --> 01:49:48,400
A source Matrix.

2018
01:49:48,400 --> 01:49:54,200
A all I need to do here is just do again the a IJ

2019
01:49:57,200 --> 01:49:57,900
I did that.

2020
01:49:58,300 --> 01:49:59,900
Technically, I goes on the inside.

2021
01:50:00,200 --> 01:50:01,000
Usually for me.

2022
01:50:04,500 --> 01:50:07,600
in this case and we could just say alright, the resulting

2023
01:50:11,800 --> 01:50:12,300
J.

2024
01:50:12,300 --> 01:50:15,700
I is going to equal the input.

2025
01:50:17,400 --> 01:50:17,900
I j.

2026
01:50:22,200 --> 01:50:24,000
And that's it, right?

2027
01:50:24,400 --> 01:50:26,300
And really it doesn't matter which order you do those in.

2028
01:50:26,700 --> 01:50:27,500
I just did it.

2029
01:50:27,600 --> 01:50:30,800
I had eye on the interior up here before so I kept on the interior at

2030
01:50:30,800 --> 01:50:32,000
this time but that's about it.

2031
01:50:32,200 --> 01:50:34,300
So you can see all its doing, they're just flipping the coordinates,

2032
01:50:34,300 --> 01:50:34,700
right?

2033
01:50:35,400 --> 01:50:38,600
So if we wanted to now we could take a baby step here because again

2034
01:50:38,600 --> 01:50:40,700
we're running out of time and I've had this sort of dumped a lot of

2035
01:50:40,700 --> 01:50:43,100
major stuff out on to you today just to get us to a point where you

2036
01:50:43,100 --> 01:50:44,300
start to write these things.

2037
01:50:45,600 --> 01:50:48,600
What I want to do here is just let's let's start by saying, oh well

2038
01:50:48,600 --> 01:50:51,000
okay what if we just made a thing here?

2039
01:50:51,000 --> 01:50:51,900
That was like

2040
01:50:52,000 --> 01:50:53,600
Action Matrix, right?

2041
01:50:54,100 --> 01:50:57,300
And we're going to start working on this projection Matrix.

2042
01:50:57,500 --> 01:50:59,700
We need a

2043
01:51:00,000 --> 01:51:01,000
Things to build that, right?

2044
01:51:01,000 --> 01:51:05,000
We need our ratio like our aspect ratio.

2045
01:51:05,000 --> 01:51:09,400
So our aspect with over height, right?

2046
01:51:09,400 --> 01:51:12,100
We need to come in here and then we need our focal length.

2047
01:51:13,000 --> 01:51:15,000
Those are the two things that we're taking right now for our

2048
01:51:15,000 --> 01:51:16,200
projection Matrix, right?

2049
01:51:16,400 --> 01:51:19,500
And I want to build this projection Matrix but I want to build it in

2050
01:51:19,500 --> 01:51:21,400
our format, right?

2051
01:51:21,500 --> 01:51:27,500
So I want to build the M4 by for projection Matrix here that we have,

2052
01:51:27,900 --> 01:51:29,900
but now, I want to build it in our

2053
01:51:30,000 --> 01:51:30,600
format.

2054
01:51:32,000 --> 01:51:33,900
So you should know, right?

2055
01:51:33,900 --> 01:51:35,400
You should know how to do this.

2056
01:51:44,000 --> 01:51:48,800
Because if that is what we were feeding to opengl, what does the

2057
01:51:48,800 --> 01:51:53,200
Matrix look like if it was in our format, right?

2058
01:51:53,400 --> 01:51:54,500
What's the difference?

2059
01:51:54,700 --> 01:51:55,800
How does it change?

2060
01:51:56,400 --> 01:52:00,700
Okay, tell me what I should be writing here.

2061
01:52:02,100 --> 01:52:04,200
That that's the difference between them.

2062
01:52:04,400 --> 01:52:06,900
Well, remember the difference is a transpose, right?

2063
01:52:06,900 --> 01:52:09,100
So it's flipping column-major to row major.

2064
01:52:09,300 --> 01:52:10,800
It's Jay, I equals i j.

2065
01:52:11,000 --> 01:52:12,700
Well, most of this Matrix is

2066
01:52:13,100 --> 01:52:17,900
The a, the be, the one, the 0 down, the diagonal, all of that stays in

2067
01:52:17,900 --> 01:52:20,600
the same place because if Jay and I are equal, right?

2068
01:52:20,600 --> 01:52:24,600
This is 0 0, this is 1, 1, this is 2 2.

2069
01:52:25,100 --> 01:52:27,300
They're not going to flip, they stay exactly where they are.

2070
01:52:27,300 --> 01:52:29,000
There's no change, right?

2071
01:52:29,300 --> 01:52:33,500
So the only thing that flips is this term right here and it comes

2072
01:52:33,500 --> 01:52:34,000
down.

2073
01:52:34,600 --> 01:52:36,000
I'm going to go ahead and make that a see.

2074
01:52:36,300 --> 01:52:38,900
It comes down here, right?

2075
01:52:38,900 --> 01:52:40,800
It goes from right here, to right here.

2076
01:52:44,100 --> 01:52:47,200
Furthermore, I guess I'm going to say let's do one over focal length

2077
01:52:47,200 --> 01:52:47,600
here.

2078
01:52:54,600 --> 01:52:55,200
Just that way.

2079
01:52:55,200 --> 01:52:59,200
Because since it, we were already using that in verse number there, I

2080
01:52:59,200 --> 01:53:02,000
feel like we can just have that be passed in, right?

2081
01:53:02,600 --> 01:53:06,300
So if that is the projection Matrix that were passing down, it's very

2082
01:53:06,300 --> 01:53:07,000
straightforward, right?

2083
01:53:07,000 --> 01:53:09,100
I can compile everything and off the go.

2084
01:53:09,100 --> 01:53:10,200
Oops, it's in there.

2085
01:53:19,000 --> 01:53:23,600
And that A and B, let's go grab those.

2086
01:53:24,900 --> 01:53:25,800
Got to put them in here.

2087
01:53:39,200 --> 01:53:44,000
Okay, so if I now wanted to try and reproduce, what I had just to get

2088
01:53:44,000 --> 01:53:48,200
us started and again will concentrate more on this next week when

2089
01:53:48,200 --> 01:53:49,100
we've got more time.

2090
01:53:49,100 --> 01:53:50,800
But here is what we are producing before.

2091
01:53:50,800 --> 01:53:52,300
We want to produce the same thing.

2092
01:53:52,700 --> 01:53:55,700
So if I wanted to hear what I could do is say, all right.

2093
01:53:57,800 --> 01:53:59,800
you know, I've got my see here, my C is going to be

2094
01:54:02,000 --> 01:54:02,700
Right.

2095
01:54:03,100 --> 01:54:07,400
I want to produce this projection Matrix so I say projection and I've

2096
01:54:07,400 --> 01:54:09,400
got my B and my see here.

2097
01:54:12,400 --> 01:54:15,900
Here's my projection Matrix and then I need to transpose it because

2098
01:54:15,900 --> 01:54:18,100
like I said, open Jill's taking it the wrong way.

2099
01:54:21,400 --> 01:54:25,200
But then I can just go ahead and load it and off I go, right?

2100
01:54:29,300 --> 01:54:32,600
It's got a point it at the beginning there and off we go.

2101
01:54:34,000 --> 01:54:36,000
So hopefully if we did that right?

2102
01:54:36,100 --> 01:54:37,200
We should end up with the same thing.

2103
01:54:37,600 --> 01:54:40,600
Of course, we don't because we're almost out of time

2104
01:54:41,800 --> 01:54:43,600
I think we've got everything here, right?

2105
01:54:43,600 --> 01:54:45,900
The beasts one.

2106
01:54:45,900 --> 01:54:48,300
See, that's all correct.

2107
01:54:48,900 --> 01:54:51,900
And then we need to do the transposon that projection to put it back

2108
01:54:51,900 --> 01:54:58,900
into the other form aspect with over height is in the right place.

2109
01:54:58,900 --> 01:55:02,400
Yes a is one that doesn't need to be there anymore.

2110
01:55:03,400 --> 01:55:09,500
A is one b and then the one is in the right place and the sea is the

2111
01:55:09,500 --> 01:55:11,300
one over for focal length.

2112
01:55:11,500 --> 01:55:14,500
Is also in the right place.

2113
01:55:15,100 --> 01:55:16,900
That feels correct to me.

2114
01:55:16,900 --> 01:55:18,700
Let me just double-check that.

2115
01:55:18,700 --> 01:55:20,800
I don't have any busted stuff there.

2116
01:55:24,600 --> 01:55:25,200
There we go.

2117
01:55:27,300 --> 01:55:31,700
Oh, weird that I did that change because I got rid of the a yeah.

2118
01:55:32,800 --> 01:55:34,000
So let me just jump in there.

2119
01:55:34,000 --> 01:55:35,400
Just to see what I messed up there.

2120
01:55:35,400 --> 01:55:37,100
I typed in a lot of code there pretty quickly.

2121
01:55:41,100 --> 01:55:43,800
So here's my projection Matrix and I just want to make sure that it's

2122
01:55:44,100 --> 01:55:46,700
sane that looks like what I

2123
01:55:49,500 --> 01:55:52,200
Actually, why is that?

2124
01:55:53,700 --> 01:55:57,800
Oh huh, I don't know why the focal length.

2125
01:55:58,700 --> 01:56:00,200
Presumably, we should have a focal length up.

2126
01:56:00,200 --> 01:56:00,700
There we go.

2127
01:56:00,700 --> 01:56:02,700
This is the one I actually want to look at as guess that that must

2128
01:56:02,700 --> 01:56:04,500
have been that the null one that starts.

2129
01:56:04,600 --> 01:56:05,300
Okay, there we go.

2130
01:56:06,300 --> 01:56:09,200
So now we've got the protective case that looks like what I was

2131
01:56:09,200 --> 01:56:09,600
expecting.

2132
01:56:09,600 --> 01:56:13,100
I expecting the one over .3 there to work.

2133
01:56:13,200 --> 01:56:14,300
So now we have to see.

2134
01:56:14,400 --> 01:56:19,400
Does r transpose work properly and I don't know if it does, it does

2135
01:56:19,400 --> 01:56:20,400
not appear to

2136
01:56:22,300 --> 01:56:23,700
Did I mess up our transpose?

2137
01:56:29,900 --> 01:56:32,600
A, i j equals.

2138
01:56:40,900 --> 01:56:41,300
oh,

2139
01:56:42,800 --> 01:56:43,200
Wow.

2140
01:56:44,400 --> 01:56:51,200
Talk about not paying attention for some reason.

2141
01:56:51,300 --> 01:56:56,800
You know, I mean, I guess if I because I was writing it math way, I

2142
01:56:56,800 --> 01:56:57,000
guess.

2143
01:56:57,000 --> 01:56:58,300
I'll stick to that.

2144
01:56:59,500 --> 01:56:59,800
Wow.

2145
01:57:00,000 --> 01:57:05,100
I was only doing 012 instead of, I basically just wasn't looping over

2146
01:57:05,100 --> 01:57:05,600
all the values.

2147
01:57:05,600 --> 01:57:06,700
That's, that's pretty great.

2148
01:57:07,400 --> 01:57:08,300
Wow, it's slow morning.

2149
01:57:08,300 --> 01:57:08,800
Hi guys.

2150
01:57:09,200 --> 01:57:10,400
All right, well,

2151
01:57:12,000 --> 01:57:12,800
that's just how it goes.

2152
01:57:13,200 --> 01:57:16,200
All right, let's try that one more time.

2153
01:57:20,800 --> 01:57:24,000
There's our projection Matrix there is the transpose.

2154
01:57:24,000 --> 01:57:24,500
Okay.

2155
01:57:24,500 --> 01:57:28,000
So yeah, that's probably our only problem and there we go.

2156
01:57:29,000 --> 01:57:29,500
So, yeah.

2157
01:57:29,500 --> 01:57:32,100
So that's the beginnings of a little bit of Matrix stuff.

2158
01:57:32,100 --> 01:57:33,800
Hopefully, it wasn't too daunting.

2159
01:57:34,000 --> 01:57:35,900
We'll get to the multiplication again.

2160
01:57:35,900 --> 01:57:40,200
Next week, we didn't have to do it yet and I'll there's one thing that

2161
01:57:40,200 --> 01:57:42,600
I haven't explained yet, I showed you how to perform a small station.

2162
01:57:42,900 --> 01:57:46,200
I didn't really explain why it does anything useful.

2163
01:57:46,200 --> 01:57:50,500
So next week, we'll, you know, hopefully you understood the rotation.

2164
01:57:50,700 --> 01:57:51,700
Just stuff pretty clearly.

2165
01:57:51,700 --> 01:57:53,700
We went through that the transpose really.

2166
01:57:53,700 --> 01:57:56,400
In this case is just to fix the fact that open Jill's reading things

2167
01:57:56,400 --> 01:57:57,000
in opposite order.

2168
01:57:57,000 --> 01:57:59,800
So we're not really using the transpose mathematically in any

2169
01:57:59,800 --> 01:58:04,000
particular way, here that's really just a bookkeeping issue but the

2170
01:58:04,000 --> 01:58:07,900
transpose is a mathematical operation and we may use it later as well

2171
01:58:07,900 --> 01:58:09,200
for other reasons you'll see.

2172
01:58:10,700 --> 01:58:15,000
So, really, all we have to do here is understand those things.

2173
01:58:15,100 --> 01:58:18,600
Next week, we'll jump into multiplication now that we've got it.

2174
01:58:18,600 --> 01:58:20,000
Why does it do something useful?

2175
01:58:20,000 --> 01:58:21,100
What can we do with it?

2176
01:58:21,100 --> 01:58:24,200
To make our X rotation, y rotation, Z rotation, stuff work, cleanly,

2177
01:58:24,400 --> 01:58:27,700
how do we combine that with projection displacement and so on?

2178
01:58:28,500 --> 01:58:30,100
So let's go ahead and jump to the Q&A.

2179
01:58:37,300 --> 01:58:39,400
and if you got questions,

2180
01:59:25,400 --> 01:59:26,400
Upholstery Mage.

2181
01:59:26,400 --> 01:59:30,200
You once said that people don't really use matrices as the storage in

2182
01:59:30,200 --> 01:59:30,700
real world.

2183
01:59:30,700 --> 01:59:33,100
Things can you talk about the Alternatives?

2184
01:59:33,800 --> 01:59:42,000
Yes, so typically for matrices there, what you'll see is they tend to

2185
01:59:42,000 --> 01:59:48,900
get used, mostly how we use them in the, in the opengl side of things

2186
01:59:48,900 --> 01:59:49,400
right here.

2187
01:59:49,700 --> 01:59:54,300
So typically, what happens is when you're done with all your work,

2188
01:59:54,700 --> 01:59:59,500
Produce matrices that gets multiplied together for compositing

2189
01:59:59,500 --> 01:59:59,900
purposes.

2190
02:00:00,400 --> 02:00:04,000
To produce a final transform that you that the GPU like operates on

2191
02:00:04,000 --> 02:00:05,200
stuff like that, right?

2192
02:00:07,600 --> 02:00:09,800
Sometimes you don't even do that.

2193
02:00:09,800 --> 02:00:14,700
Sometimes you actually pass things down, decomposed to the GPU, it

2194
02:00:14,700 --> 02:00:18,800
really depends on how the pipeline operates, but again, typically

2195
02:00:18,800 --> 02:00:21,000
matrices are used in the computation phase.

2196
02:00:21,800 --> 02:00:25,500
The reason they're not used in the storage phase is because you can

2197
02:00:25,500 --> 02:00:27,100
kind of see what's going to happen here, right?

2198
02:00:27,100 --> 02:00:30,700
If I'm producing these rotation, matrices, and multiplying them

2199
02:00:30,700 --> 02:00:33,900
together, and stuff like that, I'm going to end up with a giant bag of

2200
02:00:33,900 --> 02:00:34,500
numbers.

2201
02:00:34,500 --> 02:00:37,100
That's very hard to pull, meaning back out of.

2202
02:00:37,100 --> 02:00:42,500
And so there's nothing wrong with using matrices when you don't have

2203
02:00:42,500 --> 02:00:43,900
to pull stuff out of them.

2204
02:00:43,900 --> 02:00:47,600
But when you start piling a bunch of stuff into matrices for

2205
02:00:47,600 --> 02:00:51,500
computation purposes, if you ever want to back out of the Matrix.

2206
02:00:52,700 --> 02:00:56,600
You put you've mixed up too many things, right?

2207
02:00:56,900 --> 02:01:00,700
Like you may have gotten rotation and scaling and shearing and all

2208
02:01:00,700 --> 02:01:01,600
this other stuff.

2209
02:01:02,300 --> 02:01:07,200
All encapsulated up into these upper nut 9 numbers, the 3 by 3 here

2210
02:01:07,200 --> 02:01:08,500
at, they will all be up in there.

2211
02:01:09,800 --> 02:01:12,200
And it's very costly to pull it out again.

2212
02:01:13,300 --> 02:01:17,800
And so, the reason that you typically don't want to do that until

2213
02:01:17,800 --> 02:01:22,000
you're done needing to understand the state of something.

2214
02:01:23,400 --> 02:01:28,000
Is because pulling like the rotation out of an upper 3x3 of the of the

2215
02:01:28,000 --> 02:01:31,400
four by four Matrix here, if they're scaling already in it or other

2216
02:01:31,400 --> 02:01:32,900
things already in it is difficult.

2217
02:01:33,900 --> 02:01:34,400
Right.

2218
02:01:36,900 --> 02:01:41,600
It costs too much to do especially if there's shearing.

2219
02:01:42,700 --> 02:01:46,300
And so typically you store things as decompose because it's more

2220
02:01:46,300 --> 02:01:47,100
efficient.

2221
02:01:47,200 --> 02:01:51,800
So if you have objects that can scale and rotate, you typically store

2222
02:01:51,800 --> 02:01:55,600
the scaling and the rotation separate, right?

2223
02:01:56,800 --> 02:01:58,900
And that is why

2224
02:02:01,000 --> 02:02:06,200
That is why a lot of times you will see newer pipelines.

2225
02:02:06,200 --> 02:02:11,900
Don't do things as matrices natively until sort of the back end of the

2226
02:02:11,900 --> 02:02:16,100
process, when everything is already been like interpolated to its

2227
02:02:16,100 --> 02:02:17,500
final placement.

2228
02:02:17,800 --> 02:02:22,100
And then when things want to get combined, like I want to combine the

2229
02:02:22,100 --> 02:02:25,600
placement of this object in the world with the camera, transform with

2230
02:02:25,600 --> 02:02:27,700
the projection onto the screen.

2231
02:02:27,800 --> 02:02:30,600
I want like all those things smush together then the matrices

2232
02:02:30,700 --> 02:02:33,600
I'm out because they can, they're very efficient, potentially for

2233
02:02:33,600 --> 02:02:34,900
doing that, right?

2234
02:02:41,000 --> 02:02:43,900
Disused, will we use quaternions reducing rotation Matrix from

2235
02:02:43,900 --> 02:02:44,300
Katrina?

2236
02:02:44,300 --> 02:02:47,300
Seems like a good idea, I know we will probably not use quaternions

2237
02:02:47,300 --> 02:02:51,600
because this code is only really for camera, debug movement, and we

2238
02:02:51,600 --> 02:02:55,400
won't probably be rotating things in game at all.

2239
02:02:56,600 --> 02:02:59,900
So we won't really need to get into quaternions and interpolated.

2240
02:03:00,200 --> 02:03:05,200
Or any of that sort of stuff because we probably won't have that as a

2241
02:03:05,200 --> 02:03:05,900
thing we do.

2242
02:03:09,900 --> 02:03:12,100
From now on you will only be streaming on Saturday and Sunday?

2243
02:03:12,300 --> 02:03:15,600
Yeah, well I don't know from now on but for the time being anyway, the

2244
02:03:15,600 --> 02:03:17,100
stream is generally Saturday Sunday.

2245
02:03:19,200 --> 02:03:19,800
Pepe vote.

2246
02:03:19,800 --> 02:03:22,900
Would it be worth investing time doing a Sim D optimisation for matrix

2247
02:03:22,900 --> 02:03:26,200
multiplication or is it like killing ants with a rifle?

2248
02:03:26,900 --> 02:03:31,300
No it's not a bad idea to Cindy optimize any math code that you might

2249
02:03:31,300 --> 02:03:31,900
have.

2250
02:03:32,500 --> 02:03:39,300
It can it's always useful to have that optimization but in our case

2251
02:03:40,200 --> 02:03:43,400
this again is just for the camera, right?

2252
02:03:43,400 --> 02:03:46,100
We're not we're not probably ever going to have any matrices for

2253
02:03:46,100 --> 02:03:46,800
anything in the game.

2254
02:03:46,800 --> 02:03:48,100
This is just for the camera.

2255
02:03:49,400 --> 02:03:51,300
So it's only going to be done like once.

2256
02:03:52,400 --> 02:03:55,800
And so for our purposes, we don't need any semi opposition this

2257
02:03:55,800 --> 02:03:57,800
because we're never going to be calling it, right?

2258
02:03:57,800 --> 02:04:01,000
It's so infrequent that it won't do anything.

2259
02:04:01,100 --> 02:04:04,800
But if you were doing a tons of objects going through tons of

2260
02:04:04,800 --> 02:04:08,400
matrices, then you can see why, you know, maybe that point you want

2261
02:04:08,400 --> 02:04:09,800
Sam to optimize some of that stuff.

2262
02:04:25,500 --> 02:04:27,000
Padam my panda.

2263
02:04:27,100 --> 02:04:27,400
Panda.

2264
02:04:27,400 --> 02:04:32,100
Might are you going to use simpler rotation functions that are mainly

2265
02:04:32,100 --> 02:04:33,100
focused on smaller?

2266
02:04:33,100 --> 02:04:39,500
Matrices, such as your 4x4, then emphasizing another method on much

2267
02:04:39,500 --> 02:04:41,100
larger matrices.

2268
02:04:42,300 --> 02:04:45,000
I don't think I understand the question.

2269
02:04:48,600 --> 02:04:55,400
Could you be more specific of the question fell craft says, is it

2270
02:04:55,400 --> 02:04:59,000
worth having code for producing a full rotation Matrix?

2271
02:04:59,000 --> 02:05:03,500
X y&z at once instead of multiplying three different matrices.

2272
02:05:05,000 --> 02:05:09,800
The answer there is, it might be because again, you could symbolically

2273
02:05:09,800 --> 02:05:13,200
multiply these three matrices together and just get the results of

2274
02:05:13,200 --> 02:05:16,100
that, rather than producing them separately in the multiplying them.

2275
02:05:16,400 --> 02:05:17,600
Again, the only

2276
02:05:17,800 --> 02:05:18,600
To do that.

2277
02:05:18,700 --> 02:05:22,200
Is if you care about the speed and in this case, we're only doing this

2278
02:05:22,200 --> 02:05:22,700
once.

2279
02:05:22,900 --> 02:05:25,000
So, the speed is irrelevant, right?

2280
02:05:25,600 --> 02:05:28,300
We're never going to care how fast that's being done.

2281
02:05:28,500 --> 02:05:32,000
But if you were doing it, you know, tens of thousands of times a frame

2282
02:05:32,700 --> 02:05:33,600
for some reason.

2283
02:05:34,100 --> 02:05:37,500
So not just for our camera but like all the objects were all doing it

2284
02:05:37,500 --> 02:05:38,400
and everything else.

2285
02:05:38,600 --> 02:05:41,900
Then you know that becomes a perhaps a more useful thing to do.

2286
02:05:42,100 --> 02:05:45,100
Of course at that point you also might really not be doing.

2287
02:05:45,300 --> 02:05:47,600
Like this is Euler angle rotation effectively.

2288
02:05:47,700 --> 02:05:48,900
It's important.

2289
02:05:48,900 --> 02:05:51,600
We want Euler angle rotation for the kind of thing that we're going to

2290
02:05:51,600 --> 02:05:53,200
be doing which is an orbit camera.

2291
02:05:53,600 --> 02:05:54,800
We actually want that.

2292
02:05:54,800 --> 02:05:58,000
But you know, for other things we may not be loyal, or angles have

2293
02:05:58,100 --> 02:05:59,800
problems that manifest.

2294
02:06:00,000 --> 02:06:03,700
Cells in it, depending on what you're doing using them for.

2295
02:06:04,500 --> 02:06:07,700
So you may not want to do rotation this way at all.

2296
02:06:07,700 --> 02:06:08,300
Anyway, right.

2297
02:06:08,300 --> 02:06:11,200
That's when you start getting to quaternions or other options for how

2298
02:06:11,200 --> 02:06:13,000
you might be handling your rotation anyway.

2299
02:06:23,600 --> 02:06:26,500
So there is co I'm inferring that those braces encompassing the four

2300
02:06:26,500 --> 02:06:29,500
rows in this Matrix operations isn't doing anything.

2301
02:06:29,800 --> 02:06:32,000
It isn't creating an extra dimension in The Matrix.

2302
02:06:33,000 --> 02:06:37,600
So what that's doing is just because I wasn't sure if we get an error

2303
02:06:37,600 --> 02:06:42,600
on partially bracketed initializer list from the C compiler.

2304
02:06:42,600 --> 02:06:48,300
If we didn't do it right because this is the E Matrix and so I feel

2305
02:06:48,300 --> 02:06:50,200
like it needs, it may need that.

2306
02:06:50,200 --> 02:06:52,500
If we did this I'm not sure if

2307
02:06:52,700 --> 02:06:53,000
Yet.

2308
02:06:53,100 --> 02:06:54,700
Yeah, right.

2309
02:06:55,200 --> 02:06:58,500
You're not allowed to do that in C.

2310
02:06:58,500 --> 02:07:01,100
You have to fully bracket your initializers.

2311
02:07:04,000 --> 02:07:08,300
That's why it's saying that that's one element, it's the E element and

2312
02:07:08,300 --> 02:07:10,400
these are sub elements of the element.

2313
02:07:10,800 --> 02:07:14,300
So that's just a it's just c, b and c.

2314
02:07:15,400 --> 02:07:15,900
Right.

2315
02:07:18,400 --> 02:07:18,800
More.

2316
02:07:18,800 --> 02:07:23,100
I mean, if that's a little confusing more specifically, it's because

2317
02:07:23,100 --> 02:07:27,500
we have a struct and the array is inside the struct, right?

2318
02:07:27,500 --> 02:07:29,700
So if we were to do this,

2319
02:07:33,100 --> 02:07:34,500
Now, you don't need them.

2320
02:07:36,700 --> 02:07:39,000
Right now, that's correct.

2321
02:07:39,800 --> 02:07:43,200
But since this is embedded in a struct, the outside.

2322
02:07:43,200 --> 02:07:45,300
Brackets are the struct brackets.

2323
02:07:45,400 --> 02:07:46,600
The inside brackets.

2324
02:07:46,600 --> 02:07:48,500
Are the E, array, brackets.

2325
02:07:48,600 --> 02:07:53,000
And these are the separate elements of e brackets, right?

2326
02:07:53,000 --> 02:07:56,400
And you need them all for see to be happy about the initializer.

2327
02:07:58,000 --> 02:07:59,000
Hopefully, that makes sense.

2328
02:08:09,100 --> 02:08:09,600
Tomorrow.

2329
02:08:09,600 --> 02:08:10,100
37.

2330
02:08:10,100 --> 02:08:11,700
Hi, Casey haven't caught a stream in a while.

2331
02:08:11,700 --> 02:08:12,600
How are things going?

2332
02:08:12,900 --> 02:08:13,600
Pretty good?

2333
02:08:14,400 --> 02:08:15,300
No complaints.

2334
02:09:09,500 --> 02:09:09,800
Pepe.

2335
02:09:09,800 --> 02:09:10,800
Well, don't you have to return to?

2336
02:09:10,800 --> 02:09:13,200
Oh yeah, probably did I just forget that?

2337
02:09:13,200 --> 02:09:17,100
Yeah, so one of the weird things, this is supposed to have returned

2338
02:09:17,100 --> 02:09:17,500
are here.

2339
02:09:17,800 --> 02:09:23,300
One of the weird things about visual Studios compiler and I guess this

2340
02:09:23,300 --> 02:09:26,200
is just a detail of the implementation of how it works.

2341
02:09:27,200 --> 02:09:29,400
Is that until you call a function?

2342
02:09:29,900 --> 02:09:33,200
It doesn't check to see whether that function has a return value.

2343
02:09:33,600 --> 02:09:37,000
So what you can see here is, I compile this and it works fine.

2344
02:09:37,000 --> 02:09:38,800
I remove the return value and it works.

2345
02:09:39,000 --> 02:09:39,300
Fine.

2346
02:09:39,700 --> 02:09:42,600
The reason for that is it's never getting multiplied.

2347
02:09:42,900 --> 02:09:45,200
It's never no one's ever using this function.

2348
02:09:45,800 --> 02:09:49,500
What we would have seen like you know, next week or whatever.

2349
02:09:50,700 --> 02:09:56,900
When I come through here, is that oops, Jim is that if I was to call

2350
02:09:56,900 --> 02:09:57,100
it.

2351
02:09:57,100 --> 02:10:01,100
So let's say I, you know, did projection times projection, right?

2352
02:10:01,100 --> 02:10:02,800
So I just I call it, I just call it.

2353
02:10:03,500 --> 02:10:04,800
Now we get the error.

2354
02:10:06,000 --> 02:10:06,300
Right.

2355
02:10:06,300 --> 02:10:10,500
And you can see it is going to find that for you.

2356
02:10:10,500 --> 02:10:14,800
So it's not like it would be a mystery, but it just doesn't happen

2357
02:10:14,800 --> 02:10:16,000
until you call it.

2358
02:10:16,100 --> 02:10:22,000
So I guess, like, what, whatever the stage is in the compiler, in

2359
02:10:22,000 --> 02:10:23,800
Microsoft's compiler, where it checks?

2360
02:10:23,800 --> 02:10:29,300
That return value, that, that return value exists, that stage only

2361
02:10:29,300 --> 02:10:33,400
happens once calling to the function occurs, and if the function is

2362
02:10:33,400 --> 02:10:35,400
never called it's eliminated before ever.

2363
02:10:35,400 --> 02:10:35,600
Checking

2364
02:10:35,800 --> 02:10:36,500
Turn value.

2365
02:10:36,700 --> 02:10:40,900
What's interesting is the rest of the areas you might have not true.

2366
02:10:41,000 --> 02:10:43,300
So for example, if I set a equals B

2367
02:10:44,600 --> 02:10:45,100
Here.

2368
02:10:46,900 --> 02:10:49,500
Oh well, maybe not.

2369
02:10:55,500 --> 02:10:56,500
Okay, so there we go.

2370
02:10:56,500 --> 02:11:00,300
I guess equals B would be automatically generated now, think about.

2371
02:11:00,300 --> 02:11:01,700
So obviously, that that's not an error.

2372
02:11:01,700 --> 02:11:02,300
So that's why.

2373
02:11:02,900 --> 02:11:06,500
So if I don't have some other things like I tried to do a plus

2374
02:11:06,500 --> 02:11:10,400
operator and it doesn't have the plus operator, like all the rest of

2375
02:11:10,400 --> 02:11:12,600
the errors you might have to that.

2376
02:11:12,600 --> 02:11:17,200
I can think of any way will be announced whether you call it or not.

2377
02:11:18,200 --> 02:11:21,700
But return value just for whatever reason just isn't one of them.

2378
02:11:21,800 --> 02:11:25,100
So the stage at which it checks for that error just

2379
02:11:25,300 --> 02:11:26,400
Ever occurs at the functions.

2380
02:11:26,400 --> 02:11:27,200
Never called.

2381
02:11:28,500 --> 02:11:29,400
so, that might

2382
02:11:31,700 --> 02:11:36,500
That might help and IMA sorry says it might be worth pointing out that

2383
02:11:36,500 --> 02:11:39,500
behavior that that behavior and MSU is specific to inline functions.

2384
02:11:41,000 --> 02:11:41,900
Are you sure?

2385
02:11:43,100 --> 02:11:43,800
But that's true.

2386
02:11:48,100 --> 02:11:50,900
I didn't know that actually that's news to me.

2387
02:11:53,000 --> 02:11:53,900
Let me change it.

2388
02:11:57,300 --> 02:11:59,600
Yeah, I don't I don't think that's true.

2389
02:12:01,200 --> 02:12:07,900
Yeah, so it's actually, it's only for external functions that that

2390
02:12:07,900 --> 02:12:08,300
happens.

2391
02:12:08,300 --> 02:12:11,500
And that's because at that point, the function is technically called,

2392
02:12:11,600 --> 02:12:12,200
right?

2393
02:12:12,500 --> 02:12:14,000
So, it doesn't have to be in line.

2394
02:12:14,000 --> 02:12:16,100
It just has to not be called.

2395
02:12:16,800 --> 02:12:21,400
And when a function is external has external linkage, the compiler has

2396
02:12:21,400 --> 02:12:24,000
to assume that somebody is calling it.

2397
02:12:24,200 --> 02:12:28,200
So that's essentially effectively a call, right?

2398
02:12:30,100 --> 02:12:31,100
If that makes sense.

2399
02:12:32,100 --> 02:12:37,300
So basically since all of our stuff we don't export any functions in

2400
02:12:37,300 --> 02:12:41,200
handmade hero, every function is internal to a single compilation unit

2401
02:12:41,200 --> 02:12:41,900
effectively.

2402
02:12:44,300 --> 02:12:45,600
All of our functions of obey.

2403
02:12:45,600 --> 02:12:49,700
This rule, we will never get a warning or an error from the compiler

2404
02:12:49,700 --> 02:12:51,700
about not returning a value ever.

2405
02:12:51,900 --> 02:12:54,700
If we don't call the function because all of our functions are in line

2406
02:12:54,700 --> 02:12:55,800
or internal basically.

2407
02:12:56,900 --> 02:12:59,800
And and so, you know,

2408
02:13:05,600 --> 02:13:07,100
If they're not called, they're not called.

2409
02:13:21,300 --> 02:13:25,200
Panda, might, I kind of just joined onto this channel, sorry about the

2410
02:13:25,200 --> 02:13:27,500
lack of the knowledge of the code so far.

2411
02:13:27,500 --> 02:13:32,000
But I was referring to the case of having such large matrices that you

2412
02:13:32,000 --> 02:13:34,700
would consider partitioning the matrices into separate parts for

2413
02:13:34,700 --> 02:13:39,000
quicker rotations, okay.

2414
02:13:39,000 --> 02:13:43,000
So, I think I understand the question and

2415
02:13:49,900 --> 02:13:56,100
I guess here's how I would phrase it so matrices are a very versatile

2416
02:13:56,100 --> 02:14:03,400
mathematical tool that can be used in a lot of ways 4 by 4 matrices

2417
02:14:03,500 --> 02:14:05,400
tend to be mostly full.

2418
02:14:06,300 --> 02:14:12,100
The only thing that's not full about them is sometimes the bottom row

2419
02:14:12,100 --> 02:14:16,100
remains at 0 0 1 for a long time, right?

2420
02:14:16,100 --> 02:14:19,600
Up until the projection matrices come in.

2421
02:14:20,500 --> 02:14:21,000
Right?

2422
02:14:23,000 --> 02:14:28,800
And so it's not uncommon for people to use 3 by 4 matrices or you know

2423
02:14:28,800 --> 02:14:30,500
three rows, four columns.

2424
02:14:30,600 --> 02:14:31,500
Everybody say that.

2425
02:14:33,000 --> 02:14:37,300
Because typically that bottom row is 0, 0 0, 1 right up, till the very

2426
02:14:37,300 --> 02:14:37,800
end

2427
02:14:39,000 --> 02:14:47,000
When projection actually does do some stuff down in there but the top

2428
02:14:47,000 --> 02:14:48,800
part is typically all filled with numbers.

2429
02:14:48,800 --> 02:14:54,900
So yeah it starts out looking like it's mostly not used but pretty

2430
02:14:54,900 --> 02:14:59,500
soon once you multiply this matrix by this Matrix now the upper 3x3

2431
02:15:00,000 --> 02:15:02,100
All filled with numbers, right?

2432
02:15:02,400 --> 02:15:06,400
And then when we add translation in these, three numbers will be

2433
02:15:06,400 --> 02:15:07,100
filled.

2434
02:15:07,500 --> 02:15:10,800
So, very quickly, you end up with the top three by four is filled with

2435
02:15:10,800 --> 02:15:13,000
actual data, so you're really not.

2436
02:15:14,600 --> 02:15:18,700
Wasting anything most of the time in the upper 3 by 4.

2437
02:15:18,900 --> 02:15:22,100
But like I said, people do treat the bottom part.

2438
02:15:22,200 --> 02:15:26,900
As 0001 fairly frequently are specifically because it does remain

2439
02:15:27,000 --> 02:15:27,400
empty.

2440
02:15:27,600 --> 02:15:31,800
Since we are not doing much work with these matrices, I will not make

2441
02:15:31,800 --> 02:15:36,000
that optimization because we don't care, but if you were using them

2442
02:15:36,000 --> 02:15:37,400
heavily, you probably would.

2443
02:15:38,100 --> 02:15:43,800
Now that's the answer for 4x4 matrices in.

2444
02:15:43,900 --> 02:15:44,400
Space.

2445
02:15:45,500 --> 02:15:50,500
What I would like to emphasize is that if you extend your thinking

2446
02:15:50,500 --> 02:15:55,200
about matrices out to generic linear algebra, the kinds of stuff

2447
02:15:55,200 --> 02:15:58,800
people do for large systems Solutions and things where you have

2448
02:15:58,800 --> 02:16:02,200
matrices that are tens of thousands of rows by tens of thousands of

2449
02:16:02,200 --> 02:16:02,900
columns.

2450
02:16:03,800 --> 02:16:07,200
Then you absolutely do exactly what you're talking about which is

2451
02:16:07,200 --> 02:16:12,600
partitioned them into parts that you can operate on more quickly, that

2452
02:16:12,600 --> 02:16:13,700
field of

2453
02:16:13,800 --> 02:16:20,800
Of research is called sparse Matrix operations and there's entire

2454
02:16:20,900 --> 02:16:26,000
fields of research dedicated to exploiting the structure of matrices

2455
02:16:26,000 --> 02:16:28,000
that have known locations.

2456
02:16:28,700 --> 02:16:32,600
And this is for, when you have matrices that, you know, are 30,000 by

2457
02:16:32,600 --> 02:16:36,900
30,000, but that have large parts of them are 0.

2458
02:16:37,900 --> 02:16:38,299
Right?

2459
02:16:40,000 --> 02:16:44,299
Because at that point, it just becomes prohibitively expensive not to

2460
02:16:44,299 --> 02:16:46,799
think about the empty space as empty space.

2461
02:16:46,799 --> 02:16:48,400
That doesn't need to be operated on

2462
02:17:01,500 --> 02:17:05,299
Bulbous, would it not be better to make the Matrix structure?

2463
02:17:05,299 --> 02:17:09,600
Use our 32 array of 16 elements instead of two of a two dimensional.

2464
02:17:09,600 --> 02:17:12,000
One in that we simply The Matrix operation.

2465
02:17:12,000 --> 02:17:16,700
So well again I don't really care about this speed.

2466
02:17:16,700 --> 02:17:20,200
These are going to be called only a few times a frame, so it's

2467
02:17:20,200 --> 02:17:20,500
irrelevant.

2468
02:17:20,500 --> 02:17:24,700
If you were worried about speed, yes, you would want to sort of

2469
02:17:24,700 --> 02:17:29,299
structure your matrices to be speed specific, but I would also caution

2470
02:17:29,299 --> 02:17:31,299
to say, you don't really know what that would look like.

2471
02:17:31,299 --> 02:17:31,500
-

2472
02:17:31,600 --> 02:17:33,299
Sara Lee until, you know, your data.

2473
02:17:33,700 --> 02:17:37,000
It may be that you would want to store your matrices in some kind of

2474
02:17:37,400 --> 02:17:40,900
structure of a raise style rather than array of structure style so

2475
02:17:40,900 --> 02:17:44,100
that you actually are considering the 0 0 element.

2476
02:17:44,100 --> 02:17:48,299
Like if you have 10,000 matrices, may be the zero, zero element of all

2477
02:17:48,299 --> 02:17:48,900
10,000.

2478
02:17:48,900 --> 02:17:53,100
Matrices is stored first, then the 0 1, element of all the matrices is

2479
02:17:53,100 --> 02:17:57,000
stored, second, you know, and so on, you don't know, it's going to

2480
02:17:57,000 --> 02:17:59,799
depend entirely on what your operations are, what the efficient.

2481
02:18:00,000 --> 02:18:03,200
To store your matrices as so optimization.

2482
02:18:04,100 --> 02:18:08,200
You can't just look at operations and say I'm going to optimize them,

2483
02:18:08,400 --> 02:18:12,500
you have to know what you're actually doing a lot of because the

2484
02:18:12,500 --> 02:18:15,299
format that you put your data in is going to be entirely dependent on

2485
02:18:15,299 --> 02:18:16,299
what you're doing.

2486
02:18:16,600 --> 02:18:20,400
Not on looking at operations and saying, how could I make this

2487
02:18:20,400 --> 02:18:21,700
operation more efficient?

2488
02:18:21,700 --> 02:18:24,500
Because you need to know is that the operation you're normally doing?

2489
02:18:24,700 --> 02:18:26,000
How is the data flowing into that?

2490
02:18:26,000 --> 02:18:29,900
Are you doing multiple Matrix multiplies that can be paralyzed at the

2491
02:18:30,000 --> 02:18:32,900
the same time or do you tend to do individual Matrix?

2492
02:18:32,900 --> 02:18:33,799
Multiply is right.

2493
02:18:33,799 --> 02:18:36,900
And you have to know that before you can efficiently optimize your

2494
02:18:36,900 --> 02:18:37,299
code.

2495
02:18:37,400 --> 02:18:40,299
You can't just look at a matrix by segment optimize this operation.

2496
02:18:40,500 --> 02:18:43,299
You don't know the context of that operation yet and knowing the

2497
02:18:43,299 --> 02:18:47,299
context is crucial to optimizing things and to knowing what you should

2498
02:18:47,299 --> 02:18:47,799
optimize

2499
02:19:10,600 --> 02:19:14,700
Team R&B forgive the dumb question, but why are your include guards to

2500
02:19:14,700 --> 02:19:17,100
find at the bottom of the header?

2501
02:19:17,100 --> 02:19:18,600
Instead of the top?

2502
02:19:18,900 --> 02:19:19,799
Is this purely?

2503
02:19:19,799 --> 02:19:20,799
What you chose to do?

2504
02:19:20,799 --> 02:19:24,000
Or is there another purpose pound if checked at the top?

2505
02:19:24,000 --> 02:19:26,799
But the pound of finds at the bottom, most kind of thing, does it at

2506
02:19:26,799 --> 02:19:27,799
the top?

2507
02:19:29,600 --> 02:19:31,100
So first of all, I thought we deleted.

2508
02:19:31,100 --> 02:19:31,700
All that.

2509
02:19:32,100 --> 02:19:33,100
Are those still in here?

2510
02:19:37,200 --> 02:19:37,600
Are you?

2511
02:19:37,799 --> 02:19:39,200
Where is the include guard?

2512
02:19:40,700 --> 02:19:42,400
That you're looking at.

2513
02:19:59,400 --> 02:20:02,800
So answer number one just is that there shouldn't be any include

2514
02:20:02,800 --> 02:20:03,700
guards anymore.

2515
02:20:07,300 --> 02:20:10,100
So if you're singing include guard, tell me where it is because there

2516
02:20:10,100 --> 02:20:11,300
shouldn't be any include guards.

2517
02:20:12,400 --> 02:20:15,400
And the reason for that is because we compiled as a single compilation

2518
02:20:15,400 --> 02:20:15,800
unit.

2519
02:20:16,500 --> 02:20:18,500
So include guards are meaningless.

2520
02:20:18,900 --> 02:20:23,700
We're never going to include a file twice so you don't need a pound

2521
02:20:23,700 --> 02:20:26,800
pragma for it or a Pam pragma once core and include guard or anything

2522
02:20:26,800 --> 02:20:28,400
else, right?

2523
02:20:29,100 --> 02:20:33,300
However, to answer the question that you're asking as opposed to

2524
02:20:33,300 --> 02:20:36,300
saying, why the question at this point is moot

2525
02:20:36,400 --> 02:20:41,200
It the question, you're asking why would somebody when they do put an

2526
02:20:41,200 --> 02:20:42,300
include Garden there?

2527
02:20:42,900 --> 02:20:48,800
Like I used to in the old days, why would you put the pound to find at

2528
02:20:48,800 --> 02:20:51,300
the bottom instead of the top or vice versa?

2529
02:20:51,900 --> 02:20:56,000
And the answer there is because I want to know if I've created an

2530
02:20:56,000 --> 02:20:57,100
include cycle.

2531
02:20:57,400 --> 02:20:59,800
And if I've created an include cycle that includes

2532
02:21:00,000 --> 02:21:03,700
L will get automatically broken and ignored if I put the defined at

2533
02:21:03,700 --> 02:21:05,500
the top, right?

2534
02:21:06,200 --> 02:21:10,100
But if I created include cycle and I put the pound of, at the bottom,

2535
02:21:10,100 --> 02:21:12,300
I'll get an infinite Loop error in the compiler.

2536
02:21:12,300 --> 02:21:16,200
And I'll know so that's just there, so that I could see that

2537
02:21:16,200 --> 02:21:17,800
happening, right?

2538
02:21:18,800 --> 02:21:21,800
Because I want to eliminate that I didn't want to have that, but

2539
02:21:21,800 --> 02:21:25,900
nowadays, I compile everything in single compilation units, always.

2540
02:21:25,900 --> 02:21:29,600
Anyway, so now include guards are relevant.

2541
02:21:29,600 --> 02:21:29,700
You

2542
02:21:30,000 --> 02:21:31,600
Need them, same with pregnant.

2543
02:21:31,600 --> 02:21:35,400
Once not, it's not necessary because it it doesn't do anything.

2544
02:21:48,100 --> 02:21:53,400
And yet, team R&B, even in the older streams, those things weren't

2545
02:21:53,400 --> 02:21:54,600
used ever.

2546
02:21:54,900 --> 02:21:59,000
It was just because I had my old emac config that I was using just

2547
02:21:59,000 --> 02:22:00,200
automatically inserted them.

2548
02:22:00,200 --> 02:22:03,500
Whenever I open an h-file, I never actually needed them.

2549
02:22:03,900 --> 02:22:06,000
So even back then they were irrelevant.

2550
02:22:06,000 --> 02:22:08,700
They just were like out anachronism that I never bother to change in

2551
02:22:08,700 --> 02:22:09,700
my emacs config.

2552
02:22:10,900 --> 02:22:15,600
So now I just one point during the stream, I was just like, I gotta

2553
02:22:15,600 --> 02:22:16,000
get rid of these.

2554
02:22:16,000 --> 02:22:17,300
I they're not in there for any particular reason.

2555
02:22:17,500 --> 02:22:17,600
So

2556
02:22:17,800 --> 02:22:20,600
rid of them so they were always irrelevant even the beginning because

2557
02:22:20,600 --> 02:22:26,800
we've always compiled its in a single compilation unit fashion, but

2558
02:22:27,300 --> 02:22:27,800
you know,

2559
02:22:34,300 --> 02:22:36,700
That was just because my emac config was from back in the days when I

2560
02:22:36,700 --> 02:22:37,700
didn't used to do that.

2561
02:22:39,000 --> 02:22:42,700
And I never have to because, you know, you can still have include

2562
02:22:42,700 --> 02:22:43,400
guards, right?

2563
02:22:43,400 --> 02:22:47,400
They don't just because they're not doing you any good you can still

2564
02:22:47,400 --> 02:22:50,100
put them in right so I didn't need to get rid of them.

2565
02:22:50,100 --> 02:22:50,600
It just event.

2566
02:22:50,600 --> 02:22:52,400
I was like sick of seeing them in there because I'm like these aren't

2567
02:22:52,400 --> 02:22:54,500
doing their wire there so I got rid of them.

2568
02:22:58,600 --> 02:22:59,200
All right.

2569
02:23:00,300 --> 02:23:01,100
Are you going here?

2570
02:23:01,800 --> 02:23:02,500
It's getting late.

2571
02:23:04,800 --> 02:23:06,000
I think I got all questions there.

2572
02:23:07,400 --> 02:23:07,900
Hopefully.

2573
02:23:15,800 --> 02:23:16,300
All right.

2574
02:23:16,300 --> 02:23:18,300
Thank you, everyone for joining me for another person, handmade here.

2575
02:23:18,300 --> 02:23:19,500
It's been a pleasure coding with you.

2576
02:23:19,500 --> 02:23:22,200
As always, hopefully, that gave you a pretty solid understanding of

2577
02:23:22,200 --> 02:23:26,400
the rotation Math and how it went into matrices and how many teachers

2578
02:23:26,400 --> 02:23:27,200
are multiplied together.

2579
02:23:27,400 --> 02:23:32,100
Next week, we will go ahead and look at why we want to multiply those

2580
02:23:32,100 --> 02:23:36,100
matrices together, why that works and will construct the rotation

2581
02:23:36,100 --> 02:23:41,000
stuff using the routines that we wrote this week in order to spin our

2582
02:23:41,000 --> 02:23:44,100
camera around, which is the reason that I kind of wanted to be able to

2583
02:23:44,100 --> 02:23:45,000
do that sort of stuff.

2584
02:23:46,000 --> 02:23:47,100
So, we'll go ahead and do that.

2585
02:23:48,400 --> 02:23:51,200
And that'll be able to grow our goal for next week, which I think we

2586
02:23:51,200 --> 02:23:52,600
should be able to do pretty cleanly.

2587
02:23:53,300 --> 02:23:54,400
That's about it for.

2588
02:23:54,400 --> 02:23:57,700
Now, again, if you want to follow along series at home, of course, you

2589
02:23:57,700 --> 02:23:59,800
can always pre-order the game on handmade hero to

2590
02:24:00,000 --> 02:24:01,000
Comes with all the source code.

2591
02:24:01,000 --> 02:24:03,700
I updated every night so that you can play around with the latest

2592
02:24:03,700 --> 02:24:04,000
build.

2593
02:24:04,000 --> 02:24:06,800
If you like we have a forum site, you can go to.

2594
02:24:06,800 --> 02:24:09,300
If you want to ask questions, we have a patreon page and go to if you

2595
02:24:09,300 --> 02:24:10,900
want to support the series.

2596
02:24:11,200 --> 02:24:15,200
And also that patreon, I used to a lot of the stuff that patreons is

2597
02:24:15,200 --> 02:24:17,900
dispersed out to people who support handmade hero like for example, a

2598
02:24:17,900 --> 02:24:22,500
lot of that money goes to paying for annotations or the the site that

2599
02:24:22,500 --> 02:24:24,200
hosts the forums, for example, that sort of stuff.

2600
02:24:24,200 --> 02:24:26,600
So we try to put that money back into the community as much as

2601
02:24:26,600 --> 02:24:27,200
possible.

2602
02:24:28,500 --> 02:24:30,900
There's also a schedule bot, which you can go to.

2603
02:24:30,900 --> 02:24:32,600
If you want to know when this is going to be live.

2604
02:24:32,700 --> 02:24:35,100
Typically on Friday night, it'll tweet out what the schedule is for

2605
02:24:35,100 --> 02:24:35,900
that weekend.

2606
02:24:36,300 --> 02:24:38,800
If you want to know, when the series going to be live and then we got

2607
02:24:38,800 --> 02:24:42,500
a past episodes guide, you can go to if you'd like to catch up on

2608
02:24:42,500 --> 02:24:46,400
episodes that you missed and that is about it.

2609
02:24:47,100 --> 02:24:48,800
I will be back here next week.

2610
02:24:49,000 --> 02:24:52,700
Again, to just sort of show how to do that rotation stuff that we were

2611
02:24:52,700 --> 02:24:57,000
how to put that into use and hopefully I will see everyone back here

2612
02:24:57,000 --> 02:24:57,900
for that until then.

2613
02:24:58,100 --> 02:25:00,700
Have fun programming this week and I'll see y'all on the internet.

2614
02:25:00,700 --> 02:25:03,200
Take it easy everybody and have a good week.

