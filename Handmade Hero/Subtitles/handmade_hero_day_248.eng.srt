1
00:00:01,400 --> 00:00:03,600
Hello everyone and welcome to handmade here on the show.

2
00:00:03,600 --> 00:00:06,100
We go to complete game live on stream.

3
00:00:06,600 --> 00:00:11,600
We are going to do a little bit more debug code today because we did a

4
00:00:11,600 --> 00:00:14,600
bit of it yesterday and we have a little bit more of it to do.

5
00:00:15,100 --> 00:00:18,300
I believe what we wanted to do was to make it so that we could edit

6
00:00:18,300 --> 00:00:22,300
some debug values, which I think we already kind of have the structure

7
00:00:22,300 --> 00:00:26,800
for that in place in the actual debug system itself.

8
00:00:26,800 --> 00:00:29,000
So it's really just a case of going through and cleaning out some

9
00:00:29,000 --> 00:00:30,300
stuff and doing some wiring.

10
00:00:30,900 --> 00:00:33,400
I don't know that we have a whole lot of new code that has to be

11
00:00:33,400 --> 00:00:35,100
written to make that happen.

12
00:00:37,300 --> 00:00:38,300
So that's what I'm doing.

13
00:00:40,700 --> 00:00:42,900
And today is day 2 48.

14
00:00:42,900 --> 00:00:45,600
So, if you're someone who pre-ordered the game on handmade hero

15
00:00:45,600 --> 00:00:49,100
dot-org and you want to follow along with the source code, you want to

16
00:00:49,100 --> 00:00:54,900
start with a 247 source code because day 247 source code is what the,

17
00:00:54,900 --> 00:00:57,000
you know, the code base that I am starting with today.

18
00:00:57,000 --> 00:01:00,700
So when you see me like load files and stuff, that's what I am loading

19
00:01:00,900 --> 00:01:01,500
out of.

20
00:01:02,700 --> 00:01:07,200
All right, so let's go ahead and launch for it here and get ourselves.

21
00:01:07,300 --> 00:01:09,900
Get ourselves into position, get us.

22
00:01:10,100 --> 00:01:12,100
I was into compromising position.

23
00:01:12,900 --> 00:01:13,500
Let's see.

24
00:01:13,500 --> 00:01:15,000
We got our piace file.

25
00:01:16,600 --> 00:01:17,600
And we are building.

26
00:01:18,100 --> 00:01:18,800
There we go.

27
00:01:19,200 --> 00:01:23,400
So if you recall from yesterday, we left it with us.

28
00:01:23,400 --> 00:01:27,800
Being able to Output debug data, but we haven't really done much

29
00:01:28,100 --> 00:01:29,100
beyond that, right?

30
00:01:29,100 --> 00:01:31,600
So we have a course, really long startup times.

31
00:01:31,600 --> 00:01:33,400
Now, which is really unfortunate.

32
00:01:33,700 --> 00:01:36,100
Our startup times opengl on this platform.

33
00:01:36,100 --> 00:01:39,600
Takes a long time to start up, which is kind of, which is too bad.

34
00:01:39,700 --> 00:01:41,500
Not sure there's much, we can do about that.

35
00:01:41,900 --> 00:01:44,900
Although we could, since we don't really know what our final needs are

36
00:01:44,900 --> 00:01:45,900
going to be in terms of texture.

37
00:01:46,900 --> 00:01:49,800
It could be that we can create less context which would help.

38
00:01:50,900 --> 00:01:52,200
Because that's the slow part.

39
00:01:52,800 --> 00:01:56,200
So here, if we take a look at the platform stuff, you can see that we

40
00:01:56,200 --> 00:02:01,400
actually have the the stuff that we wanted to edit, which is inside

41
00:02:01,400 --> 00:02:05,200
this platform, drop down here, you can see, we've got like this block

42
00:02:05,200 --> 00:02:08,900
that we output and we never really did anything for prettily printing

43
00:02:08,900 --> 00:02:09,699
blocks or anything.

44
00:02:10,000 --> 00:02:12,900
But we are out putting the values that we had and what we want to be

45
00:02:12,900 --> 00:02:15,200
able to do is like click on these values, right?

46
00:02:15,200 --> 00:02:19,100
We want to be able to click on these values and have them toggle and

47
00:02:19,100 --> 00:02:20,600
so I need to go into

48
00:02:20,700 --> 00:02:24,400
Code and figure out how to make sure that that works both basically.

49
00:02:24,400 --> 00:02:27,000
Like I said, it's going to be mostly just archaeology because I think

50
00:02:27,000 --> 00:02:29,100
we already pretty much have the code for doing this.

51
00:02:29,800 --> 00:02:32,900
It already exists inside our our system.

52
00:02:36,000 --> 00:02:36,500
All right.

53
00:02:38,200 --> 00:02:44,100
So let's take a look because I think mostly, like I said, this is

54
00:02:44,100 --> 00:02:46,100
going to be a plumbing exercise might be expensive, Plumbing,

55
00:02:46,100 --> 00:02:46,400
exercise.

56
00:02:46,400 --> 00:02:48,300
Like I said, we're trying to finish up that debug system.

57
00:02:48,300 --> 00:02:52,200
So we kind of have a have our work cut out for us because there's a

58
00:02:52,200 --> 00:02:55,300
bunch of stuff in there, and it doesn't quite do yet, what we want to

59
00:02:55,300 --> 00:02:55,500
do.

60
00:02:55,500 --> 00:02:59,800
So here's the debug interface and what we're doing right now is

61
00:03:00,100 --> 00:03:02,800
The debug system works entirely For Better.

62
00:03:02,800 --> 00:03:08,900
Or For Worse is every time a debug call gets made essentially goes

63
00:03:08,900 --> 00:03:12,500
into a giant buffer, so it's just like kind of rolling log of

64
00:03:12,500 --> 00:03:13,200
information.

65
00:03:13,700 --> 00:03:16,900
And you can kind of see here that we can output a bunch of different

66
00:03:16,900 --> 00:03:22,100
pieces of data and they sort of store a type with them that says what

67
00:03:22,100 --> 00:03:23,200
the data actually is.

68
00:03:23,400 --> 00:03:28,700
So at any time when we do this, we get sort of a, you know, we get a

69
00:03:28,700 --> 00:03:29,800
rolling event log.

70
00:03:30,000 --> 00:03:33,900
That has that piece of data in it, but what you will notice, is that,

71
00:03:33,900 --> 00:03:37,000
that data is copied into the event log by value.

72
00:03:37,200 --> 00:03:39,000
So, you can see that it no longer.

73
00:03:39,000 --> 00:03:43,400
It doesn't actually remember where that thing is, right?

74
00:03:43,400 --> 00:03:45,800
It doesn't know if it was going to edit it.

75
00:03:45,800 --> 00:03:50,200
It doesn't have any idea necessarily how to, like, get that value

76
00:03:50,200 --> 00:03:50,700
back.

77
00:03:51,600 --> 00:03:55,500
And so, what we need to do and that's not actually a bad idea, right?

78
00:03:56,300 --> 00:03:59,800
There's two ways to sort of do debug systems like this one is to snap.

79
00:04:00,000 --> 00:04:03,200
Pointer to the thing that and that's a little bit easier to do.

80
00:04:03,600 --> 00:04:08,600
And so, for example, in here, let me look at the win32 file.

81
00:04:08,600 --> 00:04:09,800
Where this is actually happening.

82
00:04:10,400 --> 00:04:11,400
Did you handmade?

83
00:04:11,400 --> 00:04:12,100
That's okay.

84
00:04:13,000 --> 00:04:20,200
If I was to go to debug value, so you can see what's going on here.

85
00:04:20,500 --> 00:04:23,900
Every time through this Loop, we are going to issue one of these debug

86
00:04:23,900 --> 00:04:26,500
value commands once for Global pause and once for Global rendering

87
00:04:26,500 --> 00:04:26,700
type.

88
00:04:26,700 --> 00:04:29,800
Now, the important thing to note here is that we are not starting

89
00:04:29,900 --> 00:04:32,900
The pointers of those, we're only like, pushing their values into the

90
00:04:32,900 --> 00:04:35,500
debug stream, which means it's trivial press to print out what they

91
00:04:35,500 --> 00:04:39,100
are, but we can't actually ever modify them right now.

92
00:04:39,100 --> 00:04:41,500
Like I was saying, one way to make a demon system is to actually use

93
00:04:41,500 --> 00:04:42,200
the pointer here.

94
00:04:42,200 --> 00:04:45,700
So when we call this, we actually record the pointer so that when we

95
00:04:45,700 --> 00:04:48,000
want to edit it we just go back in there and write it.

96
00:04:48,200 --> 00:04:51,700
The reason why we're not going to do that is because if we were to do

97
00:04:51,700 --> 00:04:55,100
that it would mean that we could not ever output debug values that

98
00:04:55,100 --> 00:04:58,100
were transient because once we snap the pointer, that means that we

99
00:04:58,100 --> 00:04:59,800
have to leave that memory round.

100
00:05:00,000 --> 00:05:03,200
Till after the debug systems done with it and our debug system right

101
00:05:03,200 --> 00:05:05,800
now is set up to record frames basically forever.

102
00:05:06,000 --> 00:05:08,900
And so we don't want to have to deal with a situation where we could

103
00:05:08,900 --> 00:05:12,300
be generating tons of debug data and all of a sudden all this memory

104
00:05:12,400 --> 00:05:14,600
that was Associated like, you know, entity structure.

105
00:05:14,600 --> 00:05:17,600
Something that we would have liked to get rid of and not keep around

106
00:05:17,700 --> 00:05:20,400
suddenly have to sit around until the debug systems are them, which

107
00:05:20,400 --> 00:05:22,100
could be never, right?

108
00:05:22,900 --> 00:05:24,100
You know, we got a lot of memories this machine.

109
00:05:24,100 --> 00:05:26,600
We don't really have that much so we don't want to just keep

110
00:05:26,600 --> 00:05:28,100
generating it things out of an item.

111
00:05:30,200 --> 00:05:33,100
So what we'd like to do is only store the parts we actually want,

112
00:05:33,600 --> 00:05:36,100
which in this case is just maybe an inch or whatever like this.

113
00:05:36,400 --> 00:05:38,800
So we don't necessarily want to snap a pointer and have to make sure

114
00:05:38,800 --> 00:05:42,600
that the whole memory blocks are pieces of things are retained.

115
00:05:43,900 --> 00:05:48,300
Now, what that means is that we need some other mechanism.

116
00:05:48,300 --> 00:05:50,300
If we're not going to go the point around, we need some other

117
00:05:50,300 --> 00:05:54,600
mechanism of doing the editing and we kind of built in a mechanism

118
00:05:54,600 --> 00:05:57,600
exactly like that which was this debug ID thing.

119
00:05:57,800 --> 00:05:59,400
So this debug ID thing was a way of

120
00:05:59,500 --> 00:05:59,900
of saying, hey,

121
00:06:01,600 --> 00:06:05,900
I'm going to tell you that there's this kind of permanent identifier,

122
00:06:05,900 --> 00:06:08,200
you can use to know what I'm talking about.

123
00:06:08,200 --> 00:06:09,200
Civic block.

124
00:06:09,200 --> 00:06:13,500
So that later, when I come back round, when I do these debug values,

125
00:06:13,500 --> 00:06:19,000
if you have done edits to them I could pick up those edits now

126
00:06:20,100 --> 00:06:20,600
Right?

127
00:06:21,800 --> 00:06:25,500
And so we kind of already put ourselves in a position to we set

128
00:06:25,500 --> 00:06:26,400
ourselves up for success.

129
00:06:26,400 --> 00:06:31,400
As I sometimes like to say, we are in a position to do that now

130
00:06:31,400 --> 00:06:36,100
because we have a coherent explanation of how that might work, but

131
00:06:36,100 --> 00:06:39,900
it's not trivial but, you know, we have a common explanation.

132
00:06:40,100 --> 00:06:45,100
And so, if I remember correctly, we had something where we could get

133
00:06:45,300 --> 00:06:49,100
data out of this thing and this is why it's going to be archaeology.

134
00:06:49,100 --> 00:06:49,700
Because I just don't

135
00:06:49,900 --> 00:06:54,300
Remember everything about how that actually works, but I believe we

136
00:06:54,300 --> 00:06:55,500
had something like that.

137
00:06:55,500 --> 00:06:55,900
I don't know.

138
00:06:55,900 --> 00:06:59,100
That was actually exposed here in the interface, so it may have to be

139
00:06:59,100 --> 00:07:01,200
pulled out a little bit more, but we'll take a look.

140
00:07:02,400 --> 00:07:05,400
So here's where these things sort of get set up.

141
00:07:05,600 --> 00:07:08,700
Debugging issue, lies value is no longer a relevant thing.

142
00:07:08,700 --> 00:07:13,100
I don't believe, we don't actually ever use that anymore if I'm not

143
00:07:13,100 --> 00:07:15,800
mistaken and you know what, we don't need this stuff anymore.

144
00:07:15,800 --> 00:07:19,700
Either, write these things are that so deep

145
00:07:19,800 --> 00:07:22,100
Bug initialize value.

146
00:07:22,100 --> 00:07:23,600
I think we can also get rid of that guy.

147
00:07:23,600 --> 00:07:25,600
So I'm going to I'm going to prune this stuff first because I don't

148
00:07:25,600 --> 00:07:27,800
think this stuff is relevant anymore.

149
00:07:27,800 --> 00:07:28,900
So let's see here.

150
00:07:28,900 --> 00:07:30,000
Debug initialize value.

151
00:07:30,200 --> 00:07:34,700
That was for if we wanted this to devant to define the values itself,

152
00:07:34,800 --> 00:07:35,400
right?

153
00:07:35,800 --> 00:07:38,200
So we can get rid of that, no longer necessary.

154
00:07:38,800 --> 00:07:42,400
So what we need to do is we need that that function, that looks things

155
00:07:42,400 --> 00:07:42,900
up.

156
00:07:43,100 --> 00:07:44,600
And like I said, I don't see it there.

157
00:07:44,600 --> 00:07:47,700
So I'm going to take a look and see if it's if we still have it, I

158
00:07:47,700 --> 00:07:49,700
think we might but we'll find out.

159
00:07:50,200 --> 00:07:51,100
So, here we go.

160
00:07:51,100 --> 00:07:53,800
We've got, we've got our debug code.

161
00:07:53,800 --> 00:07:58,600
I'm just scanning through it to look to look to see if I can see it.

162
00:08:00,800 --> 00:08:03,500
We don't need right handmade config anymore because we decided that

163
00:08:03,500 --> 00:08:05,300
that's not going to happen, right?

164
00:08:05,600 --> 00:08:07,600
So, this is this guy can go as well.

165
00:08:07,700 --> 00:08:10,000
You can just be can be eliminated.

166
00:08:12,000 --> 00:08:16,100
Oops, we've got this on it.

167
00:08:16,400 --> 00:08:18,500
I need to work on my editing commands.

168
00:08:20,000 --> 00:08:21,000
Something that I really need to do.

169
00:08:21,000 --> 00:08:23,200
I need to upgrade like how my edit commands work.

170
00:08:23,200 --> 00:08:25,900
Now that I do this modal thing, because it means that there's a bunch

171
00:08:25,900 --> 00:08:26,600
of things that I do.

172
00:08:26,600 --> 00:08:29,200
They're stupid like, what you want it to do, is you always want to

173
00:08:29,200 --> 00:08:30,700
clean up the white space for you.

174
00:08:30,900 --> 00:08:32,200
Like I have a specific way.

175
00:08:32,200 --> 00:08:33,799
My code is already set up.

176
00:08:33,799 --> 00:08:38,600
And so, for example, in this circumstance, if I was going to do

177
00:08:38,600 --> 00:08:41,799
something, like, I'm going to paste something in here, you know?

178
00:08:41,799 --> 00:08:43,299
Like, I'm going to paste something.

179
00:08:44,500 --> 00:08:47,100
I'm trying to think of what the, the right example is, but if I'm

180
00:08:47,100 --> 00:08:49,700
going to pay something, I always want a space after the comma.

181
00:08:49,900 --> 00:08:52,800
Ah, and so I get in these situations where I'm in the mode and I do

182
00:08:52,800 --> 00:08:55,200
the paste operation, probably that was a bad idea.

183
00:08:56,000 --> 00:08:59,700
Like let's say, I grab this, I do the paste operation and now it's

184
00:09:00,000 --> 00:09:04,100
Hard for me to fix up the spacing for no reason.

185
00:09:04,100 --> 00:09:07,200
Like all I should really have to do is do that and everything should

186
00:09:07,200 --> 00:09:10,800
be fine because I just need the syntax but unfortunately, I have to do

187
00:09:10,800 --> 00:09:13,000
like a bunch of stuff here, where I do this, and then switch.

188
00:09:13,000 --> 00:09:15,200
Back to this mode, then switch into this mode, hit the space, right?

189
00:09:15,200 --> 00:09:19,800
And so, I feel like if I just made some smart stuff, it could be a lot

190
00:09:19,800 --> 00:09:21,000
easier but that's neither here.

191
00:09:21,000 --> 00:09:21,300
Nor there.

192
00:09:21,300 --> 00:09:22,600
That's just notes.

193
00:09:22,600 --> 00:09:25,500
Now, that now that I have for coder and I can program it and see

194
00:09:25,500 --> 00:09:29,700
there's all these things that I couldn't like interested in going to

195
00:09:30,000 --> 00:09:32,800
Do because I could never programme Lis well enough.

196
00:09:32,800 --> 00:09:36,900
I don't think to do a lot of the stuff I would have wanted to do but

197
00:09:36,900 --> 00:09:39,500
see I could, you know, I could make some pretty good stuff.

198
00:09:39,500 --> 00:09:39,900
So

199
00:09:41,200 --> 00:09:41,900
It's kind of on the table.

200
00:09:41,900 --> 00:09:44,200
Thank you, Alan, for that anyway.

201
00:09:44,300 --> 00:09:48,600
So here we are again in the debug code, I'm just looking to see cuz I

202
00:09:48,600 --> 00:09:52,300
thought we had some stuff that could do those look-ups for us or

203
00:09:52,300 --> 00:09:53,800
something, similar to that.

204
00:09:54,100 --> 00:09:59,400
So, here is an example right here, get our create debug view for, and

205
00:09:59,400 --> 00:10:03,500
you can see that, you know, it's passing a debug ID, and it's looking

206
00:10:03,500 --> 00:10:05,300
to Hash that value, right?

207
00:10:05,400 --> 00:10:09,500
And when it hatches that value, it creates this debug view thing.

208
00:10:09,800 --> 00:10:10,800
And the debug View

209
00:10:11,000 --> 00:10:15,400
Is, you know, one of those like, like this drop-down things, it stores

210
00:10:15,400 --> 00:10:16,200
that state.

211
00:10:16,500 --> 00:10:20,100
So, what that means is that we already have a way of saying, oh,

212
00:10:20,100 --> 00:10:24,300
there's a way to, like, look up the debug view, for whatever this ID

213
00:10:24,300 --> 00:10:25,100
happened to be.

214
00:10:25,500 --> 00:10:29,100
So, that's thing number one, and we'll look, we'll sort of look at

215
00:10:29,100 --> 00:10:30,100
that in a second here.

216
00:10:31,400 --> 00:10:36,400
And then I think, once we're in there, there should be a way to, to,

217
00:10:36,400 --> 00:10:40,800
like, sort of get things by hierarchical name because we're sorting.

218
00:10:40,900 --> 00:10:44,500
Those things into a hierarchy that kind of has to work right

219
00:10:44,500 --> 00:10:46,200
otherwise, we wouldn't be able to do that.

220
00:10:46,600 --> 00:10:48,500
So we know that that also is there.

221
00:10:48,500 --> 00:10:48,800
Okay?

222
00:10:48,800 --> 00:10:49,900
So here is an example.

223
00:10:49,900 --> 00:10:56,100
Right here is a variable group thing that creates Veracruz find name

224
00:10:56,100 --> 00:10:58,100
and you can, it can create things.

225
00:10:58,700 --> 00:11:02,300
It can it can sort of access things with names and stuff like that.

226
00:11:02,600 --> 00:11:06,800
So we've got to sort of things here but that one that one is really

227
00:11:06,800 --> 00:11:07,500
more.

228
00:11:10,600 --> 00:11:12,400
that was really more, I think for

229
00:11:14,100 --> 00:11:16,900
I think that we sort of had these as two separate systems, right?

230
00:11:17,000 --> 00:11:20,600
One was for creating sort of a hierarchical menu of stuff and one was

231
00:11:20,600 --> 00:11:22,200
for doing the output in the other way.

232
00:11:22,300 --> 00:11:24,700
And so I kind of want to smush them down, right?

233
00:11:24,700 --> 00:11:29,900
I want to smash them into into one and so I think what I might want to

234
00:11:29,900 --> 00:11:32,800
do is just sort of again, like

235
00:11:37,100 --> 00:11:41,900
What I might want to do here is say, okay, if I do this, debug begin

236
00:11:41,900 --> 00:11:43,100
data, Block B.

237
00:11:43,300 --> 00:11:47,300
And then I do this this, you know, this stuff here where I've got the

238
00:11:47,300 --> 00:11:49,100
debug pointer ID thing here.

239
00:11:49,400 --> 00:11:53,100
What I want to do, I think is sort of take this code that used to be

240
00:11:53,100 --> 00:11:58,800
sort of a separate system and sort of make this code work.

241
00:12:00,300 --> 00:12:02,000
Inside these data blocks.

242
00:12:04,300 --> 00:12:07,600
So, basically, the application is responsible for being able to being

243
00:12:07,600 --> 00:12:08,600
able to produce

244
00:12:10,000 --> 00:12:14,100
Some sort of an identifier that can tell you that you're inside a data

245
00:12:14,100 --> 00:12:14,600
block.

246
00:12:14,600 --> 00:12:19,500
And then in there, everything else is just sort of done by name inside

247
00:12:19,500 --> 00:12:20,400
the data block.

248
00:12:20,500 --> 00:12:22,700
So it can like go and do lookups there.

249
00:12:22,700 --> 00:12:25,700
And it could find out like what the latest state would be for that

250
00:12:25,700 --> 00:12:27,100
thing or stuff like that.

251
00:12:27,200 --> 00:12:30,300
I think that's where I want to go with this because, like I said, I

252
00:12:30,300 --> 00:12:33,100
kind of want this to sort of collapse down to something a little bit

253
00:12:33,100 --> 00:12:35,900
more manageable, and it was just a little too sprawling before for our

254
00:12:35,900 --> 00:12:39,200
purposes and a little bit, you know, like I said, I like

255
00:12:39,800 --> 00:12:42,800
Code by exploration, which means you take some time to go figure out

256
00:12:42,800 --> 00:12:44,700
you know to play with some things and see what happens.

257
00:12:44,900 --> 00:12:47,800
But at the end you don't want to just like leave it that way you want

258
00:12:47,800 --> 00:12:50,900
to you know start condensing it and figuring out what you actually

259
00:12:50,900 --> 00:12:52,100
needed and then make that stuff work.

260
00:12:52,100 --> 00:12:55,100
Well otherwise you just end up with this giant sprawl that, you know,

261
00:12:55,100 --> 00:12:56,000
is tons of code.

262
00:12:56,000 --> 00:12:58,400
You baby don't want or that isn't working particular efficiently or

263
00:12:58,400 --> 00:12:59,400
who knows what else?

264
00:13:00,100 --> 00:13:03,700
So, I think that's where I'd like to go with this and I think that's a

265
00:13:03,700 --> 00:13:06,200
reasonable way to approach this problem.

266
00:13:07,200 --> 00:13:11,100
Potentially what I want to look at first before I make that decision

267
00:13:11,100 --> 00:13:15,900
though, is we are using in some other places we are using debug values

268
00:13:16,400 --> 00:13:19,600
in some slightly different ways we are doing like, ifs on those

269
00:13:19,600 --> 00:13:20,200
values.

270
00:13:20,400 --> 00:13:25,300
So for example, you know, inside the renderer, I guess we are using

271
00:13:25,300 --> 00:13:29,400
some things like yeah, like Global renderer show, lighting samples.

272
00:13:30,500 --> 00:13:33,900
So the way we're doing those right now is we're just placing them as

273
00:13:33,900 --> 00:13:34,600
Global's.

274
00:13:35,500 --> 00:13:36,900
I don't think there's anything wrong with that though.

275
00:13:36,900 --> 00:13:40,400
So I think what we would do is we just have a place where there was a

276
00:13:40,400 --> 00:13:44,200
data block that out, put those things and off you go.

277
00:13:45,200 --> 00:13:50,400
So the only thing that makes me a little bit nervous about this.

278
00:13:50,400 --> 00:13:55,500
Right is the whole the dynamic code reloading.

279
00:13:55,900 --> 00:14:00,100
Like normally, if we just want to create some kind of an ID here,

280
00:14:00,300 --> 00:14:01,200
It's pretty trivial.

281
00:14:01,300 --> 00:14:04,800
In fact we could just use a counter variable and the file in line.

282
00:14:04,900 --> 00:14:05,000
You know.

283
00:14:05,000 --> 00:14:08,900
We could just use the file on a counter and that could be sufficient

284
00:14:09,200 --> 00:14:11,900
to create our debug ID, right?

285
00:14:13,000 --> 00:14:14,700
Because it's a unique place in the code.

286
00:14:14,900 --> 00:14:19,300
So we would have the ability to create ones that were based on

287
00:14:20,200 --> 00:14:23,900
locations in the code as well as ones that weren't the problem is when

288
00:14:23,900 --> 00:14:28,200
we do Dynamic code reloading, those things will move potentially,

289
00:14:28,200 --> 00:14:28,700
right?

290
00:14:29,000 --> 00:14:30,100
So we're in the middle of the running.

291
00:14:30,200 --> 00:14:30,700
Game.

292
00:14:30,700 --> 00:14:34,800
We reload the code and we really need like some kind of a grid, right?

293
00:14:34,800 --> 00:14:38,200
We need something here that's like a grid that we can actually hold

294
00:14:38,200 --> 00:14:38,700
onto.

295
00:14:46,500 --> 00:14:50,600
And I'll be honest, as I'm saying that right now, I'm kind of

296
00:14:50,600 --> 00:14:51,400
wondering.

297
00:14:53,300 --> 00:14:59,800
if we would just use a quid because we could just

298
00:15:00,000 --> 00:15:03,700
Rate, a random 64-bit value.

299
00:15:06,300 --> 00:15:08,200
And that would work.

300
00:15:14,600 --> 00:15:16,200
You know, I hadn't really considered that before.

301
00:15:19,700 --> 00:15:21,500
I had not really considered that before.

302
00:15:26,000 --> 00:15:27,600
But that would totally be fine.

303
00:15:30,500 --> 00:15:36,600
For example and and I'm like this is a very strange thing, but I'm

304
00:15:36,600 --> 00:15:37,700
just going to point it out.

305
00:15:37,900 --> 00:15:38,900
So for example,

306
00:15:40,700 --> 00:15:45,500
if we just took this table and every time we wanted a new one of

307
00:15:45,500 --> 00:15:50,100
these, we just grabbed the, you know, one of these guys out of here,

308
00:15:51,000 --> 00:15:52,300
that would be that

309
00:15:54,600 --> 00:15:58,300
I've never thought of doing that before, I'm not sure why.

310
00:15:58,700 --> 00:16:02,000
Because then, if you just throw that into that line of code and you

311
00:16:02,000 --> 00:16:05,400
just always, you know, as that coat piece of code moves around, it's

312
00:16:05,400 --> 00:16:06,900
always uniquely identified.

313
00:16:10,900 --> 00:16:12,100
What a strange idea.

314
00:16:14,000 --> 00:16:15,400
I'm not sure how I feel about that.

315
00:16:15,400 --> 00:16:17,900
It doesn't seem like, it's that different, from maintaining an h-file

316
00:16:17,900 --> 00:16:21,000
where you would, just put the, the squids like we were doing before.

317
00:16:22,600 --> 00:16:24,500
And it's certainly not as good as some kind of thing.

318
00:16:24,500 --> 00:16:28,200
Where we would met a code, where we could just know that it would,

319
00:16:28,300 --> 00:16:30,800
they would all be extracted and matched by name in some way.

320
00:16:33,400 --> 00:16:33,800
Hmm.

321
00:16:35,300 --> 00:16:38,200
Well, to be honest, I guess now I think about it, I don't think that's

322
00:16:38,200 --> 00:16:41,000
really necessary because now that I think about it, that may be going

323
00:16:41,000 --> 00:16:44,300
a little bit overboard because really, since we know that we want

324
00:16:44,300 --> 00:16:48,600
these things to be displayed to the user, they would need unique names

325
00:16:48,600 --> 00:16:52,500
which means that when we call begin data, block, whatever this string

326
00:16:52,500 --> 00:16:58,300
is here, that could actually be used as the ID if we wanted to write.

327
00:16:59,700 --> 00:17:03,100
So we could to choose to just hash that string, which is something

328
00:17:03,100 --> 00:17:04,599
that we sort of were talking.

329
00:17:04,800 --> 00:17:05,700
That doing before.

330
00:17:05,800 --> 00:17:09,300
So since this is 0, this is not a performance thing, that's not

331
00:17:09,300 --> 00:17:10,300
performance critical.

332
00:17:10,500 --> 00:17:12,599
This is not something that's used in.

333
00:17:13,500 --> 00:17:14,300
This is used to output.

334
00:17:14,300 --> 00:17:18,200
Table of values is not used in like site inside the loop or something

335
00:17:18,200 --> 00:17:18,500
weird.

336
00:17:18,500 --> 00:17:20,500
Like that, where we would care about the timing.

337
00:17:20,800 --> 00:17:24,500
I guess probably what I would say is the most logical thing to do is

338
00:17:24,500 --> 00:17:27,800
just to actually hash the string there because we know that string is

339
00:17:27,800 --> 00:17:29,500
essentially also a

340
00:17:31,200 --> 00:17:33,300
Is also going to be unique.

341
00:17:33,600 --> 00:17:35,700
So that seems like an interesting idea.

342
00:17:35,700 --> 00:17:38,000
I think that's what I would like to try.

343
00:17:38,500 --> 00:17:43,100
So basically that would involve and I think we already do a little bit

344
00:17:43,100 --> 00:17:43,900
of that, right?

345
00:17:47,300 --> 00:17:48,000
Let's see.

346
00:17:50,400 --> 00:17:55,300
So it looks like we have a grid That's Unique, file counter string and

347
00:17:55,300 --> 00:17:55,800
unique file.

348
00:17:55,800 --> 00:17:59,900
Counter string is is unique, applying this thing based on

349
00:18:00,000 --> 00:18:00,900
Its location.

350
00:18:01,900 --> 00:18:05,100
And I don't know that that we really care about that too much, right?

351
00:18:05,100 --> 00:18:08,000
Like I said before, that's not particularly useful.

352
00:18:08,300 --> 00:18:09,100
So,

353
00:18:25,600 --> 00:18:29,500
So yeah sorry I'm just trying to think this through to see exactly

354
00:18:29,500 --> 00:18:30,900
what I want because interesting decision.

355
00:18:31,100 --> 00:18:34,500
So I think what I specifically want there is when I do a begin data

356
00:18:34,500 --> 00:18:37,900
block, if I have this ID and you can see that you know, I do the

357
00:18:37,900 --> 00:18:43,800
record debug event and I put the ID in there if I perhaps do not

358
00:18:43,800 --> 00:18:45,200
supply and ID.

359
00:18:45,700 --> 00:18:49,600
So there is no actual ID given to this thing.

360
00:18:49,600 --> 00:18:50,500
Whatever it is.

361
00:18:51,700 --> 00:18:55,500
then that to me suggest, you know,

362
00:18:57,400 --> 00:19:00,000
That I could just leave off the ID, and it would use the string.

363
00:19:00,200 --> 00:19:04,700
So, in cases, where I'm not trying to associate this, with some actual

364
00:19:04,700 --> 00:19:10,400
data that I have, that's real, that seems like a reasonable way to go,

365
00:19:11,200 --> 00:19:11,700
I don't know.

366
00:19:12,600 --> 00:19:15,100
So that that seems reasonable to me.

367
00:19:15,600 --> 00:19:19,000
Now, this one in particular, doesn't matter because this one actually

368
00:19:19,000 --> 00:19:21,400
is in the platform layer and cannot be dynamically reloaded.

369
00:19:21,700 --> 00:19:24,100
And it's possible that maybe we never really need to fight that

370
00:19:24,100 --> 00:19:26,300
because it may be that we always actually have a pointer.

371
00:19:26,300 --> 00:19:27,000
We can use

372
00:19:29,300 --> 00:19:32,000
So maybe even now that I'm thinking about it more, maybe we don't even

373
00:19:32,000 --> 00:19:33,200
care literally at all.

374
00:19:34,800 --> 00:19:37,800
So yeah, but anyway, I just wanted to think that through.

375
00:19:37,900 --> 00:19:41,700
So what we would do in the case where, if we want to make it so that

376
00:19:41,700 --> 00:19:45,600
we're not going to pass any kind of debug ID here, right at all.

377
00:19:46,300 --> 00:19:50,200
In that case all we would do is we would just use this string I think

378
00:19:50,200 --> 00:19:53,900
and we would snap an ID for that string.

379
00:19:53,900 --> 00:19:57,100
Like we'd actually hash that string and and remember

380
00:19:57,300 --> 00:19:59,400
Idea of it that seems like the smartest thing to do.

381
00:19:59,900 --> 00:20:03,600
Alright, so back to the task at hand, here we are in

382
00:20:05,400 --> 00:20:08,200
In our debug value thing, we're going to be outputting this Global.

383
00:20:08,200 --> 00:20:11,400
Pause on-site inside this platform controls bit here.

384
00:20:11,700 --> 00:20:14,700
And like I said, what we want to do is start to make this.

385
00:20:15,100 --> 00:20:15,900
Have what?

386
00:20:15,900 --> 00:20:18,700
When we're out putting those debug blocks, we want to start making

387
00:20:18,700 --> 00:20:26,000
this have the overall structure of the of the stuff that was doing

388
00:20:26,000 --> 00:20:26,200
this.

389
00:20:26,200 --> 00:20:28,000
Get group for hierarchical name, right?

390
00:20:28,000 --> 00:20:29,200
That was doing this sort of stuff.

391
00:20:29,800 --> 00:20:33,500
Now, the problem with this stuff is that this was made for building

392
00:20:33,500 --> 00:20:34,900
things that are stationary.

393
00:20:36,100 --> 00:20:39,300
and I don't know that we necessarily want that specifically, but I

394
00:20:39,300 --> 00:20:40,000
think

395
00:20:41,500 --> 00:20:43,200
For the most part we probably do.

396
00:20:43,400 --> 00:20:46,100
Meaning there are certain circumstances where maybe we want data, that

397
00:20:46,100 --> 00:20:48,800
would be there on some frames and not be there another frames.

398
00:20:49,000 --> 00:20:52,800
Maybe we would just gray that out but I think we probably want to

399
00:20:52,800 --> 00:20:56,600
create the hierarchical structure permanently anyway as if it was

400
00:20:56,600 --> 00:20:57,700
going through this thing.

401
00:20:58,100 --> 00:20:59,400
And so I think

402
00:21:00,000 --> 00:21:04,200
Just my assumption, but I think what we do want to do is just take

403
00:21:04,200 --> 00:21:05,700
this hierarchical stuff here.

404
00:21:07,300 --> 00:21:11,000
and I think we want to just bring it up above and actually use it

405
00:21:11,800 --> 00:21:14,700
specifically for the

406
00:21:16,600 --> 00:21:19,300
For the, for the outputting of the, of the debug blocks.

407
00:21:19,600 --> 00:21:21,100
That's what I think we actually want to do.

408
00:21:21,900 --> 00:21:23,100
So, let's give that a try.

409
00:21:24,300 --> 00:21:26,500
Let's see where those debug block things were happening.

410
00:21:26,500 --> 00:21:31,200
Right here is our see here, debug

411
00:21:37,400 --> 00:21:38,100
Let's see here.

412
00:21:38,100 --> 00:21:40,200
So here's where our debug block stuff is happening.

413
00:21:40,200 --> 00:21:43,100
So I'm going to just, let me just put that in drop that in here for

414
00:21:43,100 --> 00:21:43,500
now.

415
00:21:44,900 --> 00:21:46,300
And we'll get rid of right hand.

416
00:21:46,300 --> 00:21:48,400
Make config because that doesn't happen anymore.

417
00:21:49,000 --> 00:21:51,500
What is this right here and interact?

418
00:21:51,500 --> 00:21:52,800
Okay, we don't care about that.

419
00:21:55,400 --> 00:21:59,400
So when we create one of these blocks, right, we sort of see these

420
00:21:59,400 --> 00:22:01,000
blocks come in as we go.

421
00:22:01,600 --> 00:22:06,400
And I guess what we want to do, as we see a block come in and we want

422
00:22:06,400 --> 00:22:06,600
to sort

423
00:22:06,700 --> 00:22:10,500
Put that into the place where it was existing before.

424
00:22:11,400 --> 00:22:16,400
So I want to sort of add here, where is it?

425
00:22:20,600 --> 00:22:21,900
I want

426
00:22:26,200 --> 00:22:27,700
at element group.

427
00:22:31,200 --> 00:22:34,500
I think this is what we're talking about here, right?

428
00:22:35,200 --> 00:22:36,600
So here you can see it.

429
00:22:36,600 --> 00:22:39,900
Looking up to see this, get element from event if you can see what's

430
00:22:39,900 --> 00:22:40,300
going on.

431
00:22:40,300 --> 00:22:43,500
And then it will sort of push the thing in it'll sort of push it on

432
00:22:43,500 --> 00:22:44,700
the stack and use it.

433
00:22:44,700 --> 00:22:49,400
So this get element from event is the thing that does the Coalition.

434
00:22:49,400 --> 00:22:51,000
You can see it happening here.

435
00:22:51,600 --> 00:22:57,500
And so, what I want to do is I want that to happen, I guess, for

436
00:22:57,500 --> 00:23:00,200
everything that we might be doing now.

437
00:23:09,900 --> 00:23:15,600
It's not immediately clear to me, when we actually do the debug block

438
00:23:16,000 --> 00:23:18,000
stuff, because here is the the begin block.

439
00:23:18,000 --> 00:23:19,300
End block stuff.

440
00:23:19,300 --> 00:23:22,900
Right when we do begin, block, and end block when we come through

441
00:23:22,900 --> 00:23:23,400
here,

442
00:23:25,800 --> 00:23:27,100
I don't actually know.

443
00:23:27,100 --> 00:23:28,200
Oh, sorry data block is long?

444
00:23:28,200 --> 00:23:33,200
Actually about I don't actually know, since any time we come through

445
00:23:33,200 --> 00:23:33,700
here.

446
00:23:38,600 --> 00:23:42,800
We've already gotten a debug element which means it already should

447
00:23:42,800 --> 00:23:47,600
have taken its name and done, you know, and done this to it.

448
00:23:47,900 --> 00:23:52,800
So I feel like that should have meant unless I'm missing something

449
00:23:53,600 --> 00:23:57,300
that we should have actually had those things hierarchy, placed

450
00:23:57,300 --> 00:23:59,800
properly, with the underscores parsed out of them.

451
00:24:00,500 --> 00:24:03,000
But it doesn't seem like that's what actually happened.

452
00:24:04,400 --> 00:24:05,200
You know what I mean?

453
00:24:06,300 --> 00:24:11,000
Like, so I feel like I'm missing something about how we were doing,

454
00:24:11,000 --> 00:24:15,600
what we were doing, because it just feels like, it feels like

455
00:24:15,600 --> 00:24:17,100
something is a little out of place.

456
00:24:19,300 --> 00:24:20,500
Maybe I'm forgetting.

457
00:24:21,200 --> 00:24:24,200
But my recollection was that like?

458
00:24:25,000 --> 00:24:29,500
So, for example, platform underscore controls, right platform

459
00:24:29,500 --> 00:24:32,900
underscore controls would have been parsed into platform and then

460
00:24:32,900 --> 00:24:37,100
controls underneath it and I guess that's not what actually

461
00:24:38,300 --> 00:24:39,300
How it actually works.

462
00:24:39,700 --> 00:24:42,200
I guess it did parse out the platform part.

463
00:24:42,600 --> 00:24:45,400
So now that I think about it is doing the first part of that plan

464
00:24:45,500 --> 00:24:48,200
parsing, and I guess what happens is, when it gets to a debug block,

465
00:24:48,200 --> 00:24:49,500
it doesn't print the element name.

466
00:24:49,500 --> 00:24:54,300
It prints, the debug block name, that might be the case, but let's

467
00:24:54,300 --> 00:24:54,600
see.

468
00:24:54,800 --> 00:24:55,900
So let's actually find out.

469
00:24:55,900 --> 00:24:58,600
So it looks like it's actually already doing what I wanted it to do

470
00:24:58,600 --> 00:24:59,700
for the most part.

471
00:25:00,200 --> 00:25:03,100
And so, let's take a look at what's actually going on there.

472
00:25:03,800 --> 00:25:06,100
Because I think, I think this is actually in pretty good shape.

473
00:25:06,100 --> 00:25:07,800
And like I said, this is mostly archaeology because I think

474
00:25:08,000 --> 00:25:09,700
Have most of the code, we actually need.

475
00:25:09,700 --> 00:25:14,600
We just have to remember how it works and then sort of tweak it around

476
00:25:14,600 --> 00:25:15,100
a little bit.

477
00:25:16,500 --> 00:25:21,000
So if that's the case inside here, where we, where we do the opened it

478
00:25:21,000 --> 00:25:22,400
about closed 8:00.

479
00:25:28,500 --> 00:25:30,100
When we're running through here.

480
00:25:31,900 --> 00:25:36,800
The events that we get are presumably going to be debug value events,

481
00:25:36,800 --> 00:25:37,100
right?

482
00:25:37,100 --> 00:25:42,100
Because inside the interface code if you remember the stuff we were

483
00:25:42,100 --> 00:25:46,100
just looking at this debug value set event data.

484
00:25:46,300 --> 00:25:50,900
So what actually happens here is we call record debug event with debug

485
00:25:50,900 --> 00:25:54,500
type unknown and then we call debug value set event.

486
00:25:54,500 --> 00:25:58,400
And that sets, the type to whatever the thing was going to be

487
00:25:58,600 --> 00:25:59,100
whatever.

488
00:25:59,100 --> 00:26:01,400
The actual thing we want to record was

489
00:26:02,000 --> 00:26:05,800
And so if we come through here, that's gonna fall into this case here

490
00:26:06,700 --> 00:26:10,900
which puts things inside these these data blocks, right?

491
00:26:11,000 --> 00:26:16,500
And it calls, you know, this storage element has been called.

492
00:26:16,500 --> 00:26:19,700
So in theory, that parsing should have occurred, right?

493
00:26:20,200 --> 00:26:23,400
So I want to just take a look, I think the easiest way for me to

494
00:26:23,400 --> 00:26:25,800
understand what I was doing at that time.

495
00:26:26,000 --> 00:26:29,200
It's just a look in the debugger for that because I kind of want to

496
00:26:29,200 --> 00:26:29,900
see what happens there.

497
00:26:29,900 --> 00:26:31,400
So that's Kool-Aid, debug events.

498
00:26:33,700 --> 00:26:35,300
Because I want to understand a little bit better.

499
00:26:35,300 --> 00:26:40,200
Why the parsing isn't doing what I would have expected it to do.

500
00:26:44,300 --> 00:26:45,200
Of course, it helps.

501
00:26:47,100 --> 00:26:48,400
if I actually set a breakpoint,

502
00:26:50,100 --> 00:26:52,700
Cool 8, debug records.

503
00:26:58,500 --> 00:26:58,900
Better.

504
00:27:00,400 --> 00:27:05,200
So in here, I'm going to just start taking a look at some of these

505
00:27:05,200 --> 00:27:08,900
things as they come in, just so I know what's happening.

506
00:27:09,900 --> 00:27:16,400
Okay, so let's see, we've got a grid, it's coming in from debug

507
00:27:16,400 --> 00:27:22,200
interface, study H, where's the like filing line and or is that just

508
00:27:22,200 --> 00:27:22,900
what this is?

509
00:27:22,900 --> 00:27:25,700
I guess we don't actually know the file online information of this or

510
00:27:25,700 --> 00:27:27,900
do we debug event?

511
00:27:29,300 --> 00:27:30,800
Does not have one of those.

512
00:27:32,000 --> 00:27:35,600
Let's see here and what is the element that it got?

513
00:27:37,000 --> 00:27:40,100
Let's see it, God.

514
00:27:44,200 --> 00:27:45,200
I'll begin block.

515
00:27:52,200 --> 00:27:53,300
To begin blocks.

516
00:27:57,000 --> 00:27:59,300
Oh, these are those are those are not the kind of blocks amount that

517
00:27:59,300 --> 00:28:00,400
I'm going to skip right to here.

518
00:28:01,400 --> 00:28:03,700
So let's take a look at what the event is in this case.

519
00:28:04,300 --> 00:28:06,100
So the event in this place is the global pause.

520
00:28:06,100 --> 00:28:06,600
So that's good.

521
00:28:06,600 --> 00:28:07,900
This is the one I want to look at.

522
00:28:09,100 --> 00:28:12,900
And so this is going to store this guy.

523
00:28:14,700 --> 00:28:15,500
Let's see here.

524
00:28:16,200 --> 00:28:18,000
So there is a first did lock.

525
00:28:18,000 --> 00:28:19,900
So it's going to go ahead and

526
00:28:24,000 --> 00:28:27,300
It's going to go ahead and use inside the state of block.

527
00:28:27,300 --> 00:28:31,200
It's going to use the storage of that.

528
00:28:33,300 --> 00:28:35,800
It's going to put it underneath that data block, which we open, which

529
00:28:35,800 --> 00:28:38,000
is what we want, because that's the data block, that's for the

530
00:28:38,000 --> 00:28:38,600
controls.

531
00:28:39,200 --> 00:28:40,800
So when we call store event,

532
00:28:43,500 --> 00:28:44,200
Looks like that.

533
00:28:44,200 --> 00:28:48,600
Just goes ahead and puts it in there, which is pretty straightforward

534
00:28:49,100 --> 00:28:51,600
and yeah, nothing else to it.

535
00:28:51,800 --> 00:28:56,400
So that stores the data from the particular frame of that we have.

536
00:28:57,700 --> 00:29:01,100
And so I guess really at that point, it all came through get element

537
00:29:01,100 --> 00:29:05,000
from event and and that was it, so,

538
00:29:06,500 --> 00:29:11,700
And what does it do with the event information at that point when it

539
00:29:11,700 --> 00:29:15,700
gets back the element it actually stores that element, right?

540
00:29:15,800 --> 00:29:16,300
Yeah.

541
00:29:19,500 --> 00:29:21,400
Okay, so no, it doesn't.

542
00:29:22,600 --> 00:29:23,700
Hmm.

543
00:29:23,700 --> 00:29:24,400
Okay.

544
00:29:25,200 --> 00:29:26,500
So I guess

545
00:29:29,600 --> 00:29:31,400
I guess that's a little confusing.

546
00:29:33,700 --> 00:29:38,200
I feel like this code because it went through so many iterations is

547
00:29:38,200 --> 00:29:41,100
sort of like unnecessarily obtuse, right?

548
00:29:41,300 --> 00:29:45,200
Because there's just a lot of stuff going on here that maybe doesn't

549
00:29:45,200 --> 00:29:46,400
necessarily need to.

550
00:29:46,500 --> 00:29:49,600
Now the store event stuff makes sense because you can see that what we

551
00:29:49,600 --> 00:29:53,800
need is we need a way of recording information that never runs out of

552
00:29:53,800 --> 00:29:54,300
space.

553
00:29:54,500 --> 00:29:57,900
So the way that this works is it just goes well if I don't have room

554
00:29:57,900 --> 00:29:59,800
to store the value of this variable that's

555
00:30:00,000 --> 00:30:00,800
Really a big deal.

556
00:30:00,800 --> 00:30:04,400
All I really have to do is

557
00:30:09,600 --> 00:30:14,100
overwrite some old thing, so that's totally fine.

558
00:30:14,100 --> 00:30:15,100
And that seems reasonable.

559
00:30:15,900 --> 00:30:17,600
So that store event thing makes sense.

560
00:30:17,800 --> 00:30:20,800
What doesn't super make sense is the element part?

561
00:30:21,300 --> 00:30:26,600
Because the debug elements, I don't really understand exactly this

562
00:30:26,600 --> 00:30:31,500
part here, where like it gets stored underneath the block that it was

563
00:30:31,500 --> 00:30:36,700
in, which is fine, but that doesn't seem to

564
00:30:38,300 --> 00:30:42,600
That wouldn't do sort of that parsing into the hierarchical stuff so I

565
00:30:42,600 --> 00:30:46,200
guess we just count on the listing later to do that.

566
00:30:46,700 --> 00:30:49,800
I don't super understand though because if we are calling get element

567
00:30:49,800 --> 00:30:53,700
from event here, doesn't that mean that we already gave this thing?

568
00:30:56,400 --> 00:30:57,200
Okay, I see.

569
00:30:57,400 --> 00:31:01,300
So we only parse out the enough to make the parent.

570
00:31:01,800 --> 00:31:06,000
So we just look at whatever its immediate parent was, which I suppose

571
00:31:06,000 --> 00:31:07,500
makes sense, right?

572
00:31:07,600 --> 00:31:10,100
And then then we would just say where we're going to put it in that

573
00:31:10,100 --> 00:31:10,600
group.

574
00:31:24,000 --> 00:31:25,900
Try to decide whether I'm okay with that or not.

575
00:31:27,300 --> 00:31:27,600
Yeah.

576
00:31:28,800 --> 00:31:29,100
Yeah.

577
00:31:31,400 --> 00:31:36,600
Yeah, so then I assume most of what we're getting in terms of how

578
00:31:36,600 --> 00:31:41,300
things are printed out, then actually has to do with when we sort of

579
00:31:42,000 --> 00:31:44,600
call this main menu situation, right?

580
00:31:45,000 --> 00:31:47,500
Because then we come down, we come into that.

581
00:31:48,100 --> 00:31:53,100
And we're doing sort of are walking here of the stacks and we look to

582
00:31:53,100 --> 00:31:56,300
see what we've got in here.

583
00:31:56,500 --> 00:31:59,900
And we call debug draw element and presumably.

584
00:31:59,900 --> 00:32:00,300
So what's

585
00:32:00,500 --> 00:32:01,800
Opening as we're getting to.

586
00:32:06,300 --> 00:32:11,100
Here, when we're going to draw this data block, and we Loop through

587
00:32:11,100 --> 00:32:14,200
these things and we print them out, right?

588
00:32:15,300 --> 00:32:18,400
So that's presumably, whoa.

589
00:32:19,900 --> 00:32:23,700
So, we actually Loop through to find the oldest event every time.

590
00:32:31,100 --> 00:32:33,000
That seems like a bad idea.

591
00:32:34,900 --> 00:32:36,700
Debug type open data block.

592
00:32:37,300 --> 00:32:42,300
When we call debug draw element, we then look to see what the oldest

593
00:32:42,300 --> 00:32:43,400
one is.

594
00:32:48,500 --> 00:32:50,600
Yeah, that doesn't look super sustainable to me.

595
00:32:52,000 --> 00:32:55,100
I mean, I suppose it's fine if you cap the total number of frames that

596
00:32:55,100 --> 00:32:58,700
goes back but you can see why this is kind of not particularly great.

597
00:32:58,900 --> 00:32:59,800
Because what

598
00:33:00,000 --> 00:33:00,400
Happened.

599
00:33:00,400 --> 00:33:04,300
Here is as we store more events this will continue to get older and

600
00:33:04,300 --> 00:33:04,800
older.

601
00:33:05,400 --> 00:33:08,800
This will get longer and longer that traversal and you'll spend all

602
00:33:08,800 --> 00:33:10,600
your time sitting in these Loops doing nothing.

603
00:33:12,100 --> 00:33:15,700
You know I'm saying, and that's not particularly useful for anybody.

604
00:33:16,200 --> 00:33:20,600
So that seems like a really bad idea to say the least.

605
00:33:21,300 --> 00:33:24,600
So I think we want to kind of clean this up, right?

606
00:33:30,100 --> 00:33:33,100
Yeah, so I think what we're going to have to do

607
00:33:34,500 --> 00:33:40,000
Is we're going to have to clean up the way that we sort of manage

608
00:33:40,000 --> 00:33:45,200
these things, and make something a little bit more, make something a

609
00:33:45,200 --> 00:33:50,400
little bit more clean, for building a building that, and also storing

610
00:33:50,400 --> 00:33:52,200
it how we're thinking about storing it.

611
00:33:53,100 --> 00:33:56,900
So, I feel like the store event stuff is probably where we want to

612
00:33:56,900 --> 00:33:59,700
start and I feel like we want to clean that up a little bit.

613
00:33:59,700 --> 00:34:02,700
So when we're calling the store event stuff,

614
00:34:04,500 --> 00:34:07,100
I think that's going to stay and I think this get element from event

615
00:34:07,100 --> 00:34:07,400
B.

616
00:34:07,400 --> 00:34:09,699
This that's going to not, not probably stay.

617
00:34:11,100 --> 00:34:11,600
I'm assuming

618
00:34:13,500 --> 00:34:14,100
So, we'll see.

619
00:34:14,800 --> 00:34:18,199
But anyway, so when restoring an event, and we're storing it inside an

620
00:34:18,199 --> 00:34:18,900
element here.

621
00:34:19,100 --> 00:34:22,699
The element part is just for keeping things together with stuff that

622
00:34:22,699 --> 00:34:23,800
we care about.

623
00:34:24,400 --> 00:34:29,300
So this stuff here, where we where we sort of look for things to free,

624
00:34:29,600 --> 00:34:33,100
and then we store them, this part seems reasonable because it means we

625
00:34:33,100 --> 00:34:36,500
can take as many events as we want and just sort of store them.

626
00:34:36,600 --> 00:34:39,100
And we know that they'll just grow and grow and grow until we run out

627
00:34:39,100 --> 00:34:43,000
of space and Willie told frames that seems like the right thing to do.

628
00:34:43,300 --> 00:34:48,900
What didn't seem so right to me, is the fact that we seem to be the

629
00:34:48,900 --> 00:34:50,400
way that we're storing.

630
00:34:50,699 --> 00:34:55,100
Multiple events of the same kind, is by that linked list and we don't

631
00:34:55,100 --> 00:35:01,000
have any real way of of, navigating that particularly well, right?

632
00:35:06,500 --> 00:35:10,400
So I'm not sure what the best thing to do here would be.

633
00:35:11,100 --> 00:35:15,600
It seems like maybe a better you know this maybe is trying to be too

634
00:35:15,600 --> 00:35:19,000
clever because this is not going to be able to kind of just jump

635
00:35:19,000 --> 00:35:23,000
around inside wherever that list is where as if this was just a fixed

636
00:35:23,000 --> 00:35:26,900
size thing where we just said oh you know, we're going to store the

637
00:35:26,900 --> 00:35:29,800
past 200 of these are the past thousand of these.

638
00:35:30,100 --> 00:35:32,100
It would have just been an array, right?

639
00:35:33,700 --> 00:35:36,100
And that makes it

640
00:35:36,300 --> 00:35:41,300
Easier to do stuff, like, say I wanted, you know, Loop over them and

641
00:35:41,500 --> 00:35:46,800
and talk about the, you know, talk about the first one, the last one,

642
00:35:47,800 --> 00:35:50,800
the nth go back to frame X and see it.

643
00:35:52,000 --> 00:35:52,600
So I

644
00:35:56,200 --> 00:35:57,900
I'm a little torn on that.

645
00:35:59,100 --> 00:35:59,500
You know.

646
00:36:00,000 --> 00:36:01,100
A little torn.

647
00:36:03,300 --> 00:36:08,400
I wonder if it wouldn't make much, wouldn't make more sense to just

648
00:36:08,400 --> 00:36:12,400
say, all right, in this case, where we're going to store an event

649
00:36:13,000 --> 00:36:15,000
maybe that event

650
00:36:18,400 --> 00:36:20,000
just gets inserted into a slot.

651
00:36:20,000 --> 00:36:22,500
And I feel like we've played with this before and we decide to do this

652
00:36:22,500 --> 00:36:25,900
but I think maybe I don't know how smart that was of a decision,

653
00:36:26,100 --> 00:36:26,800
right.

654
00:36:27,100 --> 00:36:32,400
I feel like that may not have been such a good idea, because we're

655
00:36:32,400 --> 00:36:35,800
kind of going to end up with a standing structure that just has all

656
00:36:35,800 --> 00:36:38,200
the stuff in it that we ever, you know, that has like a sort of

657
00:36:38,200 --> 00:36:42,000
standing debug view, sort of thing to it.

658
00:36:42,700 --> 00:36:46,500
And I feel like that we want that too.

659
00:36:47,600 --> 00:36:49,300
Have an own frame look back.

660
00:36:50,500 --> 00:36:52,600
That you can just quickly access, right?

661
00:36:52,600 --> 00:36:56,000
And I just worry about, you know,

662
00:36:57,700 --> 00:36:59,800
I worry about how to manage it if we don't.

663
00:37:00,100 --> 00:37:04,500
I like the fact that it can just sort of take reclaim memory as it

664
00:37:04,500 --> 00:37:07,500
needs it, but I just worry that the linked list is going to be a

665
00:37:07,500 --> 00:37:08,300
problem there.

666
00:37:08,600 --> 00:37:09,400
You know what I mean?

667
00:37:10,700 --> 00:37:12,600
I mean hopefully that it's relatively clear.

668
00:37:12,600 --> 00:37:14,700
Why that why that's a little troubling.

669
00:37:14,900 --> 00:37:17,800
And I know we played around with this a bunch before and this is

670
00:37:17,800 --> 00:37:22,800
definitely the only I would say logical solution to

671
00:37:26,200 --> 00:37:27,400
To having it always reclaim.

672
00:37:28,500 --> 00:37:32,500
And I mean another thing we could do is say we could just store a

673
00:37:32,500 --> 00:37:37,100
pointer to the most recent or a cursor that says, here's where we're

674
00:37:37,100 --> 00:37:40,900
viewing in that can move forward and backward or something, but I

675
00:37:40,900 --> 00:37:43,200
don't know, I just, I really just don't know.

676
00:37:47,500 --> 00:37:49,900
You can't have all the things all the time.

677
00:37:50,000 --> 00:37:55,400
Unfortunately, I wish you could but of course you can't and

678
00:37:59,200 --> 00:38:00,600
It even looks like here.

679
00:38:00,600 --> 00:38:04,400
You can see that we were storing the most recent event which is the

680
00:38:04,400 --> 00:38:06,400
one that we write.

681
00:38:06,700 --> 00:38:11,300
And in fact, I guess I don't know why when we output that open block,

682
00:38:12,500 --> 00:38:16,200
I'm not sure, exactly why we even wanted to do it that way that we did

683
00:38:16,200 --> 00:38:16,600
it.

684
00:38:21,700 --> 00:38:22,500
Kind of curious.

685
00:38:23,300 --> 00:38:27,600
So we start at the oldest event, we go through, I guess it's because

686
00:38:27,800 --> 00:38:30,800
there's events in there in the events that are in.

687
00:38:30,800 --> 00:38:32,500
There are like open data block.

688
00:38:32,500 --> 00:38:34,600
Here are some values, close data block.

689
00:38:37,700 --> 00:38:38,400
I see.

690
00:38:39,100 --> 00:38:41,800
So really the main change.

691
00:38:41,800 --> 00:38:42,700
We need to make

692
00:38:44,300 --> 00:38:49,100
Just for starters is that we should no longer be storing data, blocks

693
00:38:49,100 --> 00:38:53,200
as data blocks, probably, what we actually wanted to do is make that

694
00:38:53,200 --> 00:38:54,700
be part of a standing structure.

695
00:38:56,200 --> 00:38:58,200
Now, I can see why we didn't do that.

696
00:38:58,800 --> 00:38:59,800
We didn't do that because

697
00:39:00,000 --> 00:39:03,100
we wanted to be able to Output like multiple, like if we had multiple

698
00:39:03,100 --> 00:39:06,600
entities selected, maybe wanted to Output multiple entities, but I

699
00:39:06,600 --> 00:39:09,900
think the UI for that still probably wants to be

700
00:39:12,100 --> 00:39:14,400
Constructed, as a standing set.

701
00:39:15,500 --> 00:39:18,900
you know, that can be looked into and then you would just have like a

702
00:39:18,900 --> 00:39:21,800
next and previous on it or something like that, where you could move

703
00:39:21,800 --> 00:39:26,300
through it, but I don't think you would so much want to have

704
00:39:27,400 --> 00:39:32,400
It like this where it's a stream that has to kind of be parsed, right?

705
00:39:35,800 --> 00:39:36,200
Yeah.

706
00:39:42,900 --> 00:39:45,000
I think that's what makes the most sense to me.

707
00:39:45,700 --> 00:39:50,300
So, what I would say is open data block as a debug type and I'm

708
00:39:50,300 --> 00:39:52,300
interested to know to about the debug type sir.

709
00:39:52,300 --> 00:39:53,400
So here they are, right?

710
00:39:56,500 --> 00:40:00,300
Open data block as a debug type is really not something that I think I

711
00:40:00,300 --> 00:40:03,100
want to store in this way.

712
00:40:03,100 --> 00:40:06,200
That this is stuff that we actually print out, right?

713
00:40:06,200 --> 00:40:08,200
So when we come through these debug elements,

714
00:40:10,300 --> 00:40:11,500
And we're taking a look at these.

715
00:40:11,800 --> 00:40:14,600
Don't really know why we're checking the oldest element here by the

716
00:40:14,600 --> 00:40:16,300
way, but apparently we are

717
00:40:20,300 --> 00:40:22,300
You think we'd check the most recent one, wouldn't you?

718
00:40:22,800 --> 00:40:24,100
That seems like the most logical.

719
00:40:24,800 --> 00:40:28,600
But anyway, so checking the oldest element like we switch on this.

720
00:40:28,900 --> 00:40:31,600
And so, depending on what it actually is, that were outputting there

721
00:40:33,400 --> 00:40:35,200
Oh, this could be kind of cool.

722
00:40:35,200 --> 00:40:38,700
Alright, so I'm sorry it takes so long but we parsing all this back

723
00:40:38,700 --> 00:40:40,000
into my head and deciding what to do with.

724
00:40:40,000 --> 00:40:41,800
It is takes a little bit of time.

725
00:40:41,800 --> 00:40:46,800
So I think this is this is you know, we were maybe a little misguided

726
00:40:46,800 --> 00:40:49,200
men were doing it before because again we were tired of trying things

727
00:40:49,200 --> 00:40:51,100
we didn't necessarily know exactly what we wanted to have happen.

728
00:40:51,100 --> 00:40:55,800
So I think in this particular case we sort of have a situation where

729
00:40:55,800 --> 00:41:00,100
maybe we were we were trying to do a little bit too much in this place

730
00:41:00,100 --> 00:41:03,300
and not really maybe thinking through what would be a good.

731
00:41:03,400 --> 00:41:04,200
Sweet spot.

732
00:41:04,200 --> 00:41:08,000
So what we were doing here when we got an open data block, close data

733
00:41:08,000 --> 00:41:10,900
block pair and we streams of into it is we just kind of stuffed all

734
00:41:10,900 --> 00:41:12,300
that into a big old stream.

735
00:41:12,400 --> 00:41:15,100
And if we had multiple data blocks, that came through the same ID,

736
00:41:15,100 --> 00:41:17,400
they all just kind of got stuffed on there as a stream.

737
00:41:17,800 --> 00:41:20,000
And I think we don't really want that to happen.

738
00:41:20,200 --> 00:41:24,100
I think what we would rather have happen is just treat that as

739
00:41:24,100 --> 00:41:28,300
multiple frames basically, only, they're not actually multiple frames,

740
00:41:28,400 --> 00:41:28,900
right?

741
00:41:28,900 --> 00:41:33,200
So I think what we want to do is still consider values to have

742
00:41:33,500 --> 00:41:34,300
You know, ranges.

743
00:41:34,300 --> 00:41:37,900
And if we need to special case the fact that some values occur more

744
00:41:37,900 --> 00:41:41,100
often than others, you know, maybe can occur several times a frame,

745
00:41:41,400 --> 00:41:43,800
maybe treat that as like, a sort of a separate thing.

746
00:41:45,200 --> 00:41:50,600
so I want to just, I feel like that's, you know, maybe how we want to

747
00:41:50,600 --> 00:41:54,400
approach this and so that this, when we're doing, you know, this stuff

748
00:41:54,400 --> 00:41:57,600
here, we're printing things out, I think what we would want to do is

749
00:41:57,600 --> 00:41:58,800
make it so that

750
00:42:00,400 --> 00:42:05,200
This stuff is not really stored this way and doesn't, you know,

751
00:42:05,200 --> 00:42:06,600
doesn't work quite like this.

752
00:42:06,900 --> 00:42:07,200
Now, what?

753
00:42:07,200 --> 00:42:08,200
I don't know.

754
00:42:13,300 --> 00:42:15,200
It looks like the way this was working.

755
00:42:15,300 --> 00:42:21,200
Is it just says like okay I want to I want to scan for words to find

756
00:42:21,500 --> 00:42:22,800
the last open block.

757
00:42:23,100 --> 00:42:25,600
And then I'm going to just print out one blocks worth of data.

758
00:42:25,900 --> 00:42:29,000
I think what I'm trying to say here is this should no longer really be

759
00:42:29,000 --> 00:42:32,000
something that happens compartmentalize that way.

760
00:42:32,000 --> 00:42:36,700
I don't think I don't know that we really want that to happen, right?

761
00:42:36,800 --> 00:42:39,800
Because as long as that happens, then we won't be going through the

762
00:42:39,800 --> 00:42:42,500
central system for parsing or any of that stuff and

763
00:42:42,700 --> 00:42:44,000
They're more like as data.

764
00:42:44,000 --> 00:42:48,900
If data isn't display, isn't present on a particular block, the block

765
00:42:48,900 --> 00:42:52,600
will like the debug display would like jump in size and do weird stuff

766
00:42:52,600 --> 00:42:56,500
like this where I'm not really sure that's how we want it to work.

767
00:42:57,200 --> 00:43:03,900
I mean, maybe we do, but that just seems a little bit, not what we

768
00:43:03,900 --> 00:43:05,200
maybe would want.

769
00:43:05,400 --> 00:43:06,300
It's hard to say.

770
00:43:08,600 --> 00:43:11,700
I'm spending extra time thinking about this because I'm assuming that

771
00:43:11,700 --> 00:43:13,200
we were smart in the past, right?

772
00:43:13,200 --> 00:43:15,400
And I don't want to necessarily dismiss what we did.

773
00:43:21,500 --> 00:43:24,300
So I'm trying to think of maybe other Arguments for why I went might

774
00:43:24,300 --> 00:43:25,300
want to keep it this way.

775
00:43:27,700 --> 00:43:28,300
So yeah.

776
00:43:37,800 --> 00:43:42,300
So since this is calling debug draw event, by the way, when we kind of

777
00:43:42,300 --> 00:43:45,500
look in here and we do this default, if we didn't want the clothes

778
00:43:45,500 --> 00:43:48,000
block, I mean, I'm just so now I'm starting to pick up like little

779
00:43:48,000 --> 00:43:51,100
things and I'm just going to like do a little playing around with it

780
00:43:51,800 --> 00:43:53,300
so I can see what I actually think.

781
00:43:53,800 --> 00:43:57,700
So, you know, this end data block, I don't obviously would never want

782
00:43:57,700 --> 00:43:58,600
to print that out.

783
00:43:58,700 --> 00:44:00,800
So presumably if we didn't want to print that out.

784
00:44:01,100 --> 00:44:01,500
Oops.

785
00:44:03,400 --> 00:44:07,000
Casey, and his doesn't really know how to do modal editing very well.

786
00:44:09,900 --> 00:44:11,500
We have 15 minutes left on the clock by the way.

787
00:44:11,500 --> 00:44:14,000
So I'm not going to stop quite yet.

788
00:44:14,800 --> 00:44:19,000
So in here if we were to say we had an open data block,

789
00:44:21,500 --> 00:44:25,200
Or here where we say, we have a closed beta block.

790
00:44:28,900 --> 00:44:32,300
Then I believe that would be sufficient for me to do.

791
00:44:32,400 --> 00:44:38,400
Essentially, what I wanted to do, which was to prevent those from

792
00:44:38,400 --> 00:44:41,200
getting printed out, maybe in the same ways that were happening

793
00:44:41,200 --> 00:44:41,700
before.

794
00:44:41,900 --> 00:44:48,200
So for example, for open data block, I could do this right, do me.

795
00:44:51,200 --> 00:44:52,100
I could do this.

796
00:44:55,000 --> 00:44:57,800
Think for coders indentation is very unhappy right now.

797
00:45:01,500 --> 00:45:04,300
so I could do this and

798
00:45:05,400 --> 00:45:10,200
I don't really know, I guess.

799
00:45:10,200 --> 00:45:14,700
I don't really want it to do debug event to text, to be honest.

800
00:45:17,400 --> 00:45:21,300
Although I guess debug varda text, maybe I do sort of want to do that.

801
00:45:21,300 --> 00:45:27,200
Here is the the code for placing this interaction and this would be

802
00:45:27,300 --> 00:45:31,100
essentially a collapse expand, kind of interaction, I guess.

803
00:45:33,600 --> 00:45:35,700
So what kind of leave that for now?

804
00:45:36,300 --> 00:45:40,600
What I don't know is when we do sort of our, when we do our

805
00:45:40,600 --> 00:45:45,000
indentation, I feel like we are our layouts.

806
00:45:45,000 --> 00:45:48,500
Direct knows how to do indentation which means that we could easily

807
00:45:48,500 --> 00:45:53,300
make our data blocks, be indented as well, right?

808
00:45:53,300 --> 00:45:54,600
Because I think.

809
00:45:54,700 --> 00:46:00,400
So if we do open data block here or well, I guess, debug drumming men.

810
00:46:00,400 --> 00:46:01,700
You should have that in it.

811
00:46:02,400 --> 00:46:03,000
So when we do our

812
00:46:03,200 --> 00:46:04,100
Backed up stuff.

813
00:46:04,700 --> 00:46:08,700
You can kind of see here that we should have a thing that allows us to

814
00:46:08,700 --> 00:46:12,900
sort of indent or not indent and so

815
00:46:18,800 --> 00:46:21,400
Where do we draw our children?

816
00:46:21,400 --> 00:46:22,700
Oh, this is an inorder Loop.

817
00:46:22,700 --> 00:46:25,600
So this isn't even recursive so we don't require us.

818
00:46:25,600 --> 00:46:28,300
We just kind of call straight through, so that's kind of crazy.

819
00:46:28,300 --> 00:46:34,000
But anyway, when we come through here, there should be a way for us to

820
00:46:34,000 --> 00:46:36,800
draw our children, indented or not indented.

821
00:46:36,900 --> 00:46:41,800
So when we do, let's see,

822
00:46:42,900 --> 00:46:44,400
when we do depth,

823
00:46:45,600 --> 00:46:49,700
I guess it's just this, that's it, right?

824
00:46:51,100 --> 00:46:57,100
So the layout depth gets incremented or decremented so if we wanted to

825
00:46:59,000 --> 00:47:06,100
we can push these people sort of in and out as we go through.

826
00:47:06,400 --> 00:47:10,000
So for example in here we could say that like everyone who's

827
00:47:10,000 --> 00:47:11,200
underneath this guy,

828
00:47:14,300 --> 00:47:15,400
Gets incremented.

829
00:47:17,000 --> 00:47:20,600
And everyone who's underneath this guy, the opposite is true.

830
00:47:23,100 --> 00:47:25,700
So yeah.

831
00:47:43,600 --> 00:47:46,500
So that is more what we want, right?

832
00:47:46,600 --> 00:47:50,400
That allows us to put things underneath in the indentation area where

833
00:47:50,400 --> 00:47:54,100
we wanted and presumably that works regardless of the situation.

834
00:47:54,100 --> 00:47:55,900
So yeah that's that's all good there.

835
00:47:58,800 --> 00:47:59,800
And what we would expect.

836
00:48:00,900 --> 00:48:08,900
so I think mostly the question I have then is just yeah, I mean, I

837
00:48:08,900 --> 00:48:13,000
guess maybe I just don't know, maybe my concern isn't that warranted

838
00:48:13,900 --> 00:48:14,400
but

839
00:48:16,600 --> 00:48:18,000
Well, let's just keep going with this for now.

840
00:48:18,700 --> 00:48:22,100
So if I want to do that and I want to make this collapsible, then I

841
00:48:22,100 --> 00:48:26,700
would need a way to get a debug view for this thing, right?

842
00:48:26,700 --> 00:48:32,100
I would need a way to find out sort of like yeah when we do debug draw

843
00:48:32,100 --> 00:48:34,700
element, you can see that we do this thing.

844
00:48:34,700 --> 00:48:38,800
Get her, or, or create debug before, for whatever the thing is that

845
00:48:38,800 --> 00:48:39,800
we're printing out.

846
00:48:40,100 --> 00:48:45,000
And when we, when we do a data block, we don't ever actually

847
00:48:46,500 --> 00:48:49,800
We don't ever actually do any of that stuff for any of these guys

848
00:48:49,800 --> 00:48:50,100
inside.

849
00:48:50,100 --> 00:48:54,900
Debug draw event and I'm not really sure why we decided to do it in a

850
00:48:54,900 --> 00:48:59,100
tooth tear in a two-tiered way that way, but either way.

851
00:48:59,100 --> 00:49:00,900
Oh, I guess we do have you here as well.

852
00:49:01,100 --> 00:49:05,900
So, since we have a view for open data block, I assume that that just

853
00:49:05,900 --> 00:49:09,400
means that we could, if we wanted to do the exact same sort of expand

854
00:49:09,400 --> 00:49:13,300
and collapse Behavior as we were doing for the other stuff, right?

855
00:49:13,400 --> 00:49:13,900
So,

856
00:49:16,200 --> 00:49:20,900
Inside debug dropping menu, where we have the ability to sort of do

857
00:49:21,200 --> 00:49:23,500
this toggle interaction in theory.

858
00:49:23,500 --> 00:49:29,300
We could just make that also happen for open data blocks.

859
00:49:30,000 --> 00:49:32,200
What seems like what we want.

860
00:49:32,200 --> 00:49:37,100
So if we want to do that for open data blocks, we would need to do

861
00:49:37,100 --> 00:49:40,100
sort of the default interaction stuff, right?

862
00:49:40,100 --> 00:49:45,600
We would need to have whatever the item interaction for that was going

863
00:49:45,600 --> 00:49:45,800
to be.

864
00:49:45,800 --> 00:49:49,600
And I guess, in this case, we do an event interaction, that's an auto

865
00:49:49,600 --> 00:49:52,800
modify variable, we don't actually want that to be the case for open

866
00:49:52,800 --> 00:49:56,400
data block, what we want to do instead is say that the item

867
00:49:56,400 --> 00:49:59,200
interaction for this is going to be a toggle expansion.

868
00:50:00,000 --> 00:50:03,700
So what I also don't know is when we do get a, create a debug view

869
00:50:03,700 --> 00:50:06,600
for, oops, that's no good.

870
00:50:08,000 --> 00:50:10,600
Yeah, for create a bogey for.

871
00:50:10,900 --> 00:50:14,200
I don't know how he knows what kind of debug view information.

872
00:50:14,200 --> 00:50:15,600
It's going to actually store.

873
00:50:17,300 --> 00:50:19,900
I'm assuming it's go ahead and

874
00:50:23,700 --> 00:50:26,400
I thought I do not have that bound.

875
00:50:28,300 --> 00:50:29,200
I guess, I don't.

876
00:50:32,700 --> 00:50:35,600
very confused right now, that know,

877
00:50:37,000 --> 00:50:39,400
That know.

878
00:50:39,600 --> 00:50:40,000
Huh.

879
00:50:40,900 --> 00:50:44,800
That's weird because X is supposed to do something that is not doing.

880
00:50:45,100 --> 00:50:47,300
I wonder if my for coder, config is busted.

881
00:50:48,600 --> 00:50:50,600
It might be my take a quick look.

882
00:50:57,100 --> 00:50:59,200
so, if I look for,

883
00:51:02,200 --> 00:51:03,200
Corresponding.

884
00:51:04,700 --> 00:51:07,000
So, KC chorus, find corresponding file.

885
00:51:09,700 --> 00:51:12,000
And Casey open file your window.

886
00:51:12,000 --> 00:51:12,200
Yeah.

887
00:51:12,200 --> 00:51:15,300
So that's not what that's supposed to be.

888
00:51:15,800 --> 00:51:19,900
That's supposed to be fine, corresponding file, other window and so I

889
00:51:19,900 --> 00:51:20,800
have to fix that.

890
00:51:21,100 --> 00:51:23,200
All right, well, that's a to do.

891
00:51:24,800 --> 00:51:30,700
Anyway, so what I wanted to find out here and so I guess what I'll do

892
00:51:30,700 --> 00:51:33,600
is I'll switch to this again.

893
00:51:33,600 --> 00:51:36,200
Handmade H manually.

894
00:51:37,900 --> 00:51:38,100
What?

895
00:51:38,100 --> 00:51:42,200
I'm not sure about is in debug view, like, which one it is going to be

896
00:51:42,200 --> 00:51:46,500
inline block, or, or collapsible to be honest.

897
00:51:46,600 --> 00:51:47,200
I'm not sure.

898
00:51:47,200 --> 00:51:49,800
We don't want to just fat in this up and put all that stuff in there.

899
00:51:49,800 --> 00:51:50,800
Because why not?

900
00:51:51,300 --> 00:51:52,300
But who knows.

901
00:51:53,200 --> 00:51:54,000
So anyway,

902
00:51:54,700 --> 00:51:57,800
Either way, we would have that collapsible.

903
00:51:58,000 --> 00:52:01,100
And so we could just make it so that whether or not we show what's

904
00:52:01,100 --> 00:52:09,100
under the collapsible is actually just used by by the system, right?

905
00:52:09,100 --> 00:52:12,300
So I could make it so that when we do that, let's see.

906
00:52:12,500 --> 00:52:14,900
So we got bitmap, ID close, datablock opened, do Mi.

907
00:52:15,300 --> 00:52:18,600
So when we do open data block week, when we do that printout, we could

908
00:52:18,600 --> 00:52:20,500
make it expand or collapse based on that.

909
00:52:20,600 --> 00:52:24,400
Now, the problem is, we actually want to do it here to be.

910
00:52:24,500 --> 00:52:29,900
Just so really, I suppose the proper place to do this stuff is to say

911
00:52:30,100 --> 00:52:32,700
you wouldn't ever really do this.

912
00:52:32,900 --> 00:52:35,200
You would probably just do it out here.

913
00:52:35,200 --> 00:52:38,000
When, you know, you've got an open data block, before you draw any of

914
00:52:38,000 --> 00:52:41,500
these events, you do this stuff, you know what I'm saying?

915
00:52:44,200 --> 00:52:44,700
And

916
00:52:45,900 --> 00:52:48,200
The layout depth increment decrement stuff.

917
00:52:48,400 --> 00:52:48,900
Same way.

918
00:52:52,500 --> 00:52:57,900
So in here, where we do open data, block print this out before we're

919
00:52:57,900 --> 00:52:58,800
going to

920
00:53:00,100 --> 00:53:01,800
Do any of these guys here?

921
00:53:08,600 --> 00:53:13,600
We are I guess really we're really brutalizing for coders inventor.

922
00:53:14,600 --> 00:53:15,900
It is not happy right now.

923
00:53:17,300 --> 00:53:23,800
So inside here right I guess the item interaction has not been created

924
00:53:23,800 --> 00:53:29,300
yet so I would create that that interaction myself right because it's

925
00:53:29,300 --> 00:53:32,200
getting created up here one of these one of these guys.

926
00:53:33,500 --> 00:53:36,300
So yeah, I'm going to create whatever the interaction is that I wanted

927
00:53:36,300 --> 00:53:37,400
this guy to have

928
00:53:38,000 --> 00:53:40,700
And that's the toggle.

929
00:53:40,900 --> 00:53:45,100
I'm going to go through here and do the printout, I'm and all that

930
00:53:45,100 --> 00:53:45,600
stuff.

931
00:53:45,700 --> 00:53:50,600
And then what I want to do is if it's not collapsed then I would do

932
00:53:50,600 --> 00:53:54,300
this stuff but if it is collapsed that I'm not going to do any of that

933
00:53:54,900 --> 00:53:55,300
at all.

934
00:53:55,300 --> 00:53:57,800
It's we're not going to look through any of its events or print out

935
00:53:57,800 --> 00:53:59,900
any of that stuff that seems

936
00:54:00,400 --> 00:54:02,100
That seems fair, right?

937
00:54:04,000 --> 00:54:07,200
So in this case, do we ever get a view for these guys?

938
00:54:07,700 --> 00:54:08,200
We do.

939
00:54:08,600 --> 00:54:14,400
So I can look to see if the views the collapsible part of the view is

940
00:54:14,400 --> 00:54:17,200
going to be expanded.

941
00:54:18,400 --> 00:54:19,500
Always, I guess.

942
00:54:24,700 --> 00:54:25,500
Not really sure.

943
00:54:25,900 --> 00:54:27,000
It's a good question.

944
00:54:28,100 --> 00:54:30,400
And then what's the ID is just debug ID here?

945
00:54:30,400 --> 00:54:30,900
I guess.

946
00:54:32,700 --> 00:54:33,600
And let's see.

947
00:54:33,600 --> 00:54:35,000
So we got d by D.

948
00:54:35,500 --> 00:54:40,200
We have some event that we're going to use here.

949
00:54:42,600 --> 00:54:47,300
So, debug event to text the event that we actually want is the, the

950
00:54:47,300 --> 00:54:49,000
one that we were going to draw.

951
00:54:49,700 --> 00:54:52,800
So it's the last open block, is the actual one.

952
00:54:53,400 --> 00:54:55,200
So I believe it's last open.

953
00:54:55,200 --> 00:54:57,000
Block is the one we wanted to actually make

954
00:54:59,900 --> 00:55:01,900
Store, debug event.

955
00:55:03,100 --> 00:55:05,500
If that's loops.

956
00:55:09,400 --> 00:55:11,100
So yes, that's true.

957
00:55:11,700 --> 00:55:13,000
I agree with you mr.

958
00:55:13,000 --> 00:55:13,600
Compiler.

959
00:55:13,900 --> 00:55:15,800
It's actually last open block event.

960
00:55:20,000 --> 00:55:21,300
Although, it's winter.

961
00:55:23,900 --> 00:55:26,300
we then have debug text out at

962
00:55:27,800 --> 00:55:31,600
Connect apartment 3, and I agree with that as well.

963
00:55:33,200 --> 00:55:35,300
Let's see, one, two, three,

964
00:55:40,300 --> 00:55:42,500
Well, that's actually the to so it's actually the item.

965
00:55:42,500 --> 00:55:43,800
Wait what?

966
00:55:45,300 --> 00:55:47,400
Oh, we're looking at item Claire's under code in a fire.

967
00:55:47,400 --> 00:55:47,900
Okay.

968
00:55:48,300 --> 00:55:50,800
Well I don't really know what the item color should be, to be honest

969
00:55:50,800 --> 00:55:51,200
with you.

970
00:55:51,200 --> 00:55:53,000
I guess we want to do the same stuff here.

971
00:55:53,700 --> 00:55:56,300
I'm not sure, that's a good question.

972
00:55:57,000 --> 00:56:00,600
So I want to know whether or not this item color is hot or not and

973
00:56:00,600 --> 00:56:02,600
then do what it's going to do.

974
00:56:03,600 --> 00:56:05,200
View is Undeclared identifier.

975
00:56:06,300 --> 00:56:09,300
That's because it actually gently got lower case for some reason.

976
00:56:11,600 --> 00:56:12,800
so, in theory,

977
00:56:19,600 --> 00:56:23,200
Yeah, so actually, this thing is kind of Handy.

978
00:56:23,400 --> 00:56:24,600
I like how this is working.

979
00:56:24,600 --> 00:56:26,900
I think there's just a little bit too much code in there.

980
00:56:27,100 --> 00:56:30,300
We probably need a little bit more utility functions because it's just

981
00:56:30,300 --> 00:56:34,300
a lot of cut and paste that has to happen there, but otherwise that

982
00:56:34,300 --> 00:56:35,900
actually works relatively well.

983
00:56:36,600 --> 00:56:38,200
So, that's kind of nice actually.

984
00:56:39,800 --> 00:56:43,000
And similarly, I guess now that I think about it,

985
00:56:44,900 --> 00:56:48,700
So we also know that the reason that we can't edit these is just, I

986
00:56:48,700 --> 00:56:52,000
guess we would actually have been able to edit those values.

987
00:56:52,000 --> 00:56:55,200
If we had ways of editing integers, which we don't get.

988
00:56:56,700 --> 00:56:59,200
All right, so maybe there's really not that much stuff to actually do

989
00:56:59,200 --> 00:56:59,700
in the debug

990
00:57:00,100 --> 00:57:02,400
We just need to clean up some of this code and maybe it's actually

991
00:57:02,400 --> 00:57:06,700
okay because that actually just does what we want.

992
00:57:07,800 --> 00:57:10,200
Pretty much straight up straight away, right?

993
00:57:10,300 --> 00:57:10,800
I mean,

994
00:57:12,100 --> 00:57:15,900
pretty much does what I wanted to do and so we just need to make some

995
00:57:15,900 --> 00:57:19,300
interactions for these guys and then we'd be done.

996
00:57:19,900 --> 00:57:23,600
Also the way this is being printed out is dumb and I don't know why

997
00:57:23,600 --> 00:57:27,700
it's being printed out that way but I don't want it to be printed out

998
00:57:27,700 --> 00:57:28,200
that way.

999
00:57:28,500 --> 00:57:32,000
So I think we would also want to make a thing over here that would

1000
00:57:32,000 --> 00:57:33,100
chop off.

1001
00:57:33,100 --> 00:57:36,800
That would find the last underscore there.

1002
00:57:38,900 --> 00:57:39,500
You know I'm saying?

1003
00:57:40,100 --> 00:57:41,700
So yeah.

1004
00:57:45,700 --> 00:57:46,100
Yeah.

1005
00:57:50,500 --> 00:57:52,700
Not 100% certain how I would want to do that.

1006
00:57:52,900 --> 00:58:03,200
I mean the most trivial way to do it, I suppose is to say, you know,

1007
00:58:07,100 --> 00:58:11,500
when we take the event name, there's a thing that's like

1008
00:58:12,500 --> 00:58:15,800
In our ridiculous set of flags that we have here.

1009
00:58:23,500 --> 00:58:25,600
we could do a thing which just goes ahead and

1010
00:58:26,800 --> 00:58:27,800
and truncates.

1011
00:58:29,800 --> 00:58:32,900
So in add name, which is this, for example,

1012
00:58:35,800 --> 00:58:38,900
We could just scan for the last underscore.

1013
00:58:39,100 --> 00:58:42,100
So, you know, we could we could totally cheese this if you wanted to

1014
00:58:42,300 --> 00:58:49,300
and say, Z budvar to text start at last underscore, or something like

1015
00:58:49,300 --> 00:58:53,400
that and then we could just say, oh, all right,

1016
00:58:56,600 --> 00:58:57,700
Batman value.

1017
00:59:00,000 --> 00:59:02,000
Is actually not we're going to use directly.

1018
00:59:03,500 --> 00:59:12,900
We're just going to say that while or four star scan equals use name.

1019
00:59:14,300 --> 00:59:15,400
Star scan.

1020
00:59:17,000 --> 00:59:17,700
Scan.

1021
00:59:19,900 --> 00:59:25,600
And then what we'll do is say that use name equal scan if it

1022
00:59:28,800 --> 00:59:29,700
Equals underscore.

1023
00:59:30,900 --> 00:59:33,400
And also I suppose and it's not a trailing underscore.

1024
00:59:33,700 --> 00:59:41,100
So if it equals underscore and you know the thing after it

1025
00:59:43,300 --> 00:59:44,000
Is.

1026
00:59:45,300 --> 00:59:46,400
Not equal to 0.

1027
00:59:46,400 --> 00:59:49,000
So it has to not be the last character in the string.

1028
00:59:49,500 --> 00:59:53,300
Then will allow it to use that as the name.

1029
00:59:54,400 --> 00:59:59,800
So in that event, it will update the name and then we should

1030
01:00:00,000 --> 01:00:03,500
Able to pass that and have that work?

1031
01:00:07,400 --> 01:00:08,200
Where are we?

1032
01:00:09,400 --> 01:00:10,400
Where are we people?

1033
01:00:15,200 --> 01:00:16,900
That was in debug draw bent.

1034
01:00:30,900 --> 01:00:31,100
There.

1035
01:00:31,100 --> 01:00:34,500
Yeah, so when I pass these things,

1036
01:00:36,500 --> 01:00:39,400
It's past that, I don't know why pretty bulls and stuff is in there

1037
01:00:39,400 --> 01:00:41,100
because obviously that doesn't need to happen.

1038
01:00:41,100 --> 01:00:44,000
We cut and pasted that but doesn't actually need to occur at all.

1039
01:00:46,900 --> 01:00:51,500
But that's all we really need and then we just have to add it to our

1040
01:00:51,500 --> 01:00:53,600
list of folks that you can do here.

1041
01:00:54,000 --> 01:00:58,800
So like start it lasts underscores now with thing and that I think

1042
01:00:58,800 --> 01:01:01,200
would make it so that we would actually have everything but the

1043
01:01:01,200 --> 01:01:01,900
interaction.

1044
01:01:04,900 --> 01:01:05,400
Yeah.

1045
01:01:07,100 --> 01:01:14,600
Well still prints that so that was right but it's actually got a value

1046
01:01:14,600 --> 01:01:15,100
on there.

1047
01:01:15,900 --> 01:01:18,600
I guess I'm telling it to print out a value and its value is just its

1048
01:01:18,600 --> 01:01:23,300
name so I'm not sure how to actually say don't print the value.

1049
01:01:24,800 --> 01:01:27,300
That looks like we didn't actually have one of those.

1050
01:01:29,100 --> 01:01:30,600
Which that would be nice as well.

1051
01:01:33,900 --> 01:01:38,600
so in here this part, this should be if flags and

1052
01:01:43,900 --> 01:01:45,200
Include her.

1053
01:01:47,600 --> 01:01:48,500
Add value.

1054
01:02:01,700 --> 01:02:02,400
Right?

1055
01:02:02,500 --> 01:02:03,400
Because they're should.

1056
01:02:03,400 --> 01:02:06,200
If you have ad name, you should also specify add value.

1057
01:02:06,200 --> 01:02:08,900
I feel like that's kind of how that should go.

1058
01:02:17,400 --> 01:02:21,400
I mean, I could preserve the current way of working by making it so

1059
01:02:21,400 --> 01:02:24,000
that it was don't add value and do a not.

1060
01:02:24,200 --> 01:02:25,800
But that doesn't seem like a very good idea.

1061
01:02:26,800 --> 01:02:28,200
So I'm going to just look for everywhere.

1062
01:02:28,200 --> 01:02:31,000
We use debug bar to text at the moment.

1063
01:02:34,000 --> 01:02:37,500
And I'm just going to add the value part to it.

1064
01:02:51,200 --> 01:02:53,400
That's the one where we don't actually want it.

1065
01:02:56,900 --> 01:02:57,500
And that's it.

1066
01:02:57,700 --> 01:02:58,200
All right.

1067
01:03:08,400 --> 01:03:08,900
All right.

1068
01:03:14,200 --> 01:03:15,400
So, that seems reasonable.

1069
01:03:16,800 --> 01:03:20,100
And that would allow us to Output all of our control variables now.

1070
01:03:20,100 --> 01:03:27,100
So, for example, inside handmade dot CPP, if we wanted to, you know,

1071
01:03:27,100 --> 01:03:32,100
at the top of this thing, we could just go ahead and put all that

1072
01:03:32,100 --> 01:03:32,800
stuff in there.

1073
01:03:33,200 --> 01:03:36,100
And so, you know, I don't know something like

1074
01:03:40,400 --> 01:03:43,100
where we do this, we can just put in

1075
01:03:45,700 --> 01:03:46,700
Everything from here.

1076
01:03:49,000 --> 01:03:50,600
Can just be added.

1077
01:04:10,000 --> 01:04:16,000
And so this would just be begin or debugging data block.

1078
01:04:17,600 --> 01:04:20,900
And then these would just be debug value.

1079
01:04:21,400 --> 01:04:21,800
Oops.

1080
01:04:29,100 --> 01:04:29,900
and,

1081
01:04:39,700 --> 01:04:42,000
And we can make these a little bit more.

1082
01:04:59,300 --> 01:05:01,900
We can make these a little bit more organized to if you want to but we

1083
01:05:01,900 --> 01:05:04,400
don't have to at the moment anyway.

1084
01:05:08,900 --> 01:05:13,800
So I think inside begin data block, I guess the ID here is going to be

1085
01:05:13,800 --> 01:05:16,700
exactly the same sort of trick that we did before.

1086
01:05:19,200 --> 01:05:23,100
But like I said, it's it's it's got the live coding stuff and we're

1087
01:05:23,100 --> 01:05:25,500
going to have to start thinking about that a little bit more carefully

1088
01:05:26,000 --> 01:05:31,500
when we actually do this, this is just going to be, I guess, like I do

1089
01:05:31,500 --> 01:05:32,400
just game for now.

1090
01:05:33,100 --> 01:05:35,800
Debug pointer ID as long as the points into something in our memory.

1091
01:05:35,800 --> 01:05:36,600
That's fine.

1092
01:05:37,100 --> 01:05:41,100
So, what we can do here, for example, is we could just use the root

1093
01:05:41,100 --> 01:05:44,700
pointer for the, for the memory, for our game memory would be fine.

1094
01:05:45,800 --> 01:05:46,400
Because we know that.

1095
01:05:46,400 --> 01:05:47,100
So we stable.

1096
01:05:48,100 --> 01:05:53,700
So if I come through here, now, I should see those values show up in

1097
01:05:53,700 --> 01:05:55,000
here, if that makes sense.

1098
01:05:55,600 --> 01:05:56,300
So, there you go.

1099
01:05:57,300 --> 01:05:57,700
Yeah.

1100
01:06:03,300 --> 01:06:07,800
So interesting, so it actually is still creating just like I remember

1101
01:06:07,800 --> 01:06:10,300
I was asking, does it still create that hierarchy?

1102
01:06:10,500 --> 01:06:14,200
And the answer is, yes, it totally does still create that hierarchy,

1103
01:06:14,800 --> 01:06:15,300
right?

1104
01:06:17,200 --> 01:06:18,500
So this will be good, this is what we'll do.

1105
01:06:18,500 --> 01:06:21,800
Tomorrow is kind of finish that unification so you can kind of see

1106
01:06:21,800 --> 01:06:23,700
what happens right where I was saying like, it's looks like it still

1107
01:06:23,700 --> 01:06:24,200
creates our key.

1108
01:06:24,200 --> 01:06:25,600
It does look great, the hierarchy.

1109
01:06:26,000 --> 01:06:27,500
When it parses these names,

1110
01:06:29,500 --> 01:06:32,000
And I don't think we want doing that for stuff that's inside a data

1111
01:06:32,000 --> 01:06:33,100
block, right?

1112
01:06:35,700 --> 01:06:39,600
So we'll see we'll think about that a little bit more but based on how

1113
01:06:39,600 --> 01:06:40,700
this works I'm not sure.

1114
01:06:40,700 --> 01:06:44,000
Maybe we want to just leave the data bus, maybe we don't want the

1115
01:06:44,000 --> 01:06:49,300
hierarchy parsing stuff to ever actually do any hierarchical parsing

1116
01:06:49,500 --> 01:06:53,100
unless it's actually parsing the name of a data block and then the

1117
01:06:53,100 --> 01:06:55,200
data blocks are hardcore and everything else isn't

1118
01:06:56,300 --> 01:06:57,100
Does that make sense?

1119
01:06:58,000 --> 01:07:01,700
So yeah, so now I think we're okay like, we're pretty, we're actually

1120
01:07:01,700 --> 01:07:04,100
closer than I thought we were in terms of stuff, we might want in

1121
01:07:04,100 --> 01:07:04,600
here.

1122
01:07:07,300 --> 01:07:08,400
So that's not so bad.

1123
01:07:08,500 --> 01:07:11,100
All right, I'm going to go ahead and go to the Q&A now, time

1124
01:07:11,100 --> 01:07:12,500
relatively satisfied with that.

1125
01:07:33,900 --> 01:07:36,400
Hots for the per frame Arena space remaining.

1126
01:07:36,400 --> 01:07:38,600
Debug counter is always going down, is this okay?

1127
01:07:38,800 --> 01:07:40,200
Yes, that is by Design.

1128
01:07:40,200 --> 01:07:43,900
So, basically, that's the like amount of memory that was reserved for

1129
01:07:43,900 --> 01:07:48,600
debugging and it will just count down to zero and then when it gets

1130
01:07:48,600 --> 01:07:52,300
down to zero it will just start recycling that memory.

1131
01:07:52,900 --> 01:07:56,600
So basically what you want to do is you want to see it go all the way

1132
01:07:56,600 --> 01:07:58,100
down to zero and then it will stop.

1133
01:08:08,900 --> 01:08:11,200
Carrie Johansen, you mentioned a book that introduces relational

1134
01:08:11,200 --> 01:08:16,000
databases I lost the link it's Jim Gray is the guy that I was talking

1135
01:08:16,000 --> 01:08:16,700
about.

1136
01:08:17,000 --> 01:08:19,600
In his book is I think transaction processing.

1137
01:08:24,300 --> 01:08:25,100
This is the one.

1138
01:08:34,700 --> 01:08:36,600
If you kindly remit, put the fire out.

1139
01:08:36,600 --> 01:08:38,399
I think the profiler is still there.

1140
01:08:38,600 --> 01:08:39,000
Really.

1141
01:08:39,000 --> 01:08:42,899
We just have to finish the navigation of it because I'm pretty sure

1142
01:08:42,899 --> 01:08:46,500
the profiler actually if you just inserted one would actually just

1143
01:08:46,500 --> 01:08:48,700
show up, maybe I shouldn't have closed the editor.

1144
01:08:48,700 --> 01:08:50,300
So prematurely

1145
01:08:58,100 --> 01:08:58,899
meaning, I

1146
01:09:00,800 --> 01:09:02,200
if you take a look at

1147
01:09:05,000 --> 01:09:05,800
Is it in here?

1148
01:09:07,399 --> 01:09:11,800
I think if you take a look at counter thread list,

1149
01:09:13,800 --> 01:09:18,399
And you go into handmade dot CPP.

1150
01:09:21,399 --> 01:09:25,800
I think if you were to somehow do this here,

1151
01:09:27,500 --> 01:09:28,600
And I'm not sure.

1152
01:09:39,100 --> 01:09:44,000
Well, I guess the answer is that something we should do tomorrow

1153
01:09:44,000 --> 01:09:47,399
because I really don't want to spend too much time doing that now, but

1154
01:09:47,399 --> 01:09:53,800
essentially all we have to do to get a profiler still is inside here.

1155
01:09:53,800 --> 01:10:00,500
We just need to actually insert one of those counter those counter

1156
01:10:00,500 --> 01:10:02,500
thread lists or counter function list things.

1157
01:10:02,500 --> 01:10:04,300
We just need to insert them.

1158
01:10:04,300 --> 01:10:08,900
And so what we should do is an

1159
01:10:09,100 --> 01:10:10,600
Fact, I'll just put that here.

1160
01:10:14,000 --> 01:10:14,600
For tomorrow.

1161
01:10:23,800 --> 01:10:24,800
We should do that.

1162
01:10:24,800 --> 01:10:25,800
Tomorrow's what we should do?

1163
01:10:31,100 --> 01:10:33,700
Because you had the first flower still in there and we just never

1164
01:10:33,700 --> 01:10:35,400
inserted in our hierarchy anywhere.

1165
01:10:47,300 --> 01:10:50,200
Casey how do you implement easily the standard output without using

1166
01:10:50,200 --> 01:10:51,500
the iostream library?

1167
01:10:52,800 --> 01:10:54,100
It depends what platform you're on.

1168
01:10:54,800 --> 01:10:57,500
If you're on windows, they're actually just file handle.

1169
01:10:58,000 --> 01:11:00,000
There's, there's just file handles.

1170
01:11:00,000 --> 01:11:01,700
You can get called, get standard handles.

1171
01:11:01,700 --> 01:11:05,700
Its, I mean, I'm not sure exactly what you're asking, but I think it's

1172
01:11:05,700 --> 01:11:06,600
get standard handles.

1173
01:11:07,200 --> 01:11:07,500
Yeah.

1174
01:11:08,900 --> 01:11:09,600
Or handle.

1175
01:11:09,600 --> 01:11:09,900
Sorry.

1176
01:11:11,900 --> 01:11:13,100
From the win32 platform layer.

1177
01:11:13,100 --> 01:11:14,400
You just call get started handle.

1178
01:11:14,600 --> 01:11:19,300
And if your process has been launched for the console, you'll get

1179
01:11:19,400 --> 01:11:24,800
these handles back and then you can just do file reads and writes

1180
01:11:24,800 --> 01:11:27,200
directly to them to Output stuff that you want.

1181
01:11:33,300 --> 01:11:36,700
Which you prefer and why pound if lb F deaf pound?

1182
01:11:36,700 --> 01:11:43,600
If defined I tend to prefer pound if to pound if death because I like

1183
01:11:43,600 --> 01:11:48,100
to be able to pound Define something, I like to be able to do a pound

1184
01:11:48,100 --> 01:11:53,600
if deaf to mean, did anyone know about this value and set it?

1185
01:11:55,500 --> 01:11:58,400
so the pound if death is really just to make sure that default values

1186
01:11:58,400 --> 01:11:59,900
are set for stuff at the top of

1187
01:12:00,000 --> 01:12:00,300
Thing.

1188
01:12:00,500 --> 01:12:02,300
And then everywhere else, it just use the pound.

1189
01:12:02,300 --> 01:12:05,700
If on the value and assumes that it will have been set to zero or one

1190
01:12:05,900 --> 01:12:08,100
based on which one it should be right.

1191
01:12:08,700 --> 01:12:10,000
That's how I tend to do it.

1192
01:12:11,200 --> 01:12:17,700
I never use pound if defined parentheses unless I have some more

1193
01:12:17,700 --> 01:12:18,700
complex.

1194
01:12:19,900 --> 01:12:21,100
Thing that has to happen.

1195
01:12:30,200 --> 01:12:33,000
Danna 27 1988, can you tell me the version?

1196
01:12:33,000 --> 01:12:38,100
You just said, but for Linux and now Windows, I'm on Arch, I'm pretty

1197
01:12:38,100 --> 01:12:44,400
sure that on Linux on Linux, you can't really not linked with Jewel

1198
01:12:44,400 --> 01:12:44,500
it.

1199
01:12:44,500 --> 01:12:46,100
Well, you can.

1200
01:12:46,400 --> 01:12:48,400
But then you have to use sis calls.

1201
01:12:55,100 --> 01:12:57,600
To be honest with you, I don't know how to get this directly out of

1202
01:12:57,600 --> 01:12:58,100
Linux.

1203
01:12:58,300 --> 01:13:00,400
I don't do much Linux programming.

1204
01:13:03,700 --> 01:13:04,600
so,

1205
01:13:06,900 --> 01:13:07,900
let's see.

1206
01:13:11,200 --> 01:13:13,800
I think you would need to know the syscall.

1207
01:13:15,400 --> 01:13:19,200
For the syscalls for reading and writing and then you would need.

1208
01:13:19,200 --> 01:13:20,400
Yeah, I don't

1209
01:13:21,700 --> 01:13:25,200
And I don't even know if anyone ever wants you to do this anymore, but

1210
01:13:25,200 --> 01:13:27,900
if you were do it, if you're trying to go around the C runtime

1211
01:13:27,900 --> 01:13:32,500
Library, you would need, you would need to implement it via syscalls

1212
01:13:32,800 --> 01:13:34,500
where the handles come from.

1213
01:13:34,900 --> 01:13:40,400
I'm not sure the handles that are that initialize the standard, the

1214
01:13:40,400 --> 01:13:42,000
standard I/O stuff.

1215
01:13:42,100 --> 01:13:46,700
Those handles have to come into your process somewhere, but I don't

1216
01:13:46,700 --> 01:13:47,800
know where they come in.

1217
01:13:48,200 --> 01:13:50,500
Maybe there's a syscall, that gets them for you that get

1218
01:13:50,700 --> 01:13:54,100
There might be a syscall way to get like your process startup stuff.

1219
01:14:22,600 --> 01:14:24,800
In terms of interaction with a debug settings, what do you have in

1220
01:14:24,800 --> 01:14:27,200
mind for modifying the value switches or sliders?

1221
01:14:27,400 --> 01:14:28,900
Yeah, probably just a switch.

1222
01:14:29,400 --> 01:14:32,900
I want to just at least be able to like click on the value for the

1223
01:14:33,400 --> 01:14:36,700
boolean's and then like drag a value to like change it if it's a

1224
01:14:36,700 --> 01:14:37,900
floating point or something.

1225
01:14:49,200 --> 01:14:49,800
True blue.

1226
01:14:49,800 --> 01:14:51,300
What does a for each Loop?

1227
01:14:51,300 --> 01:14:57,300
Do a for each Loop is not a see thing.

1228
01:14:57,600 --> 01:14:59,800
So there's no such thing as a for each Loop in C.

1229
01:15:00,000 --> 01:15:06,300
Basically because see only had regular for Loops, but in other

1230
01:15:06,300 --> 01:15:09,400
languages besides see what a for each Loop is is it's a shorthand

1231
01:15:09,400 --> 01:15:15,200
notation of saying that you want to do a loop as many times as there

1232
01:15:15,200 --> 01:15:18,100
are elements in something, you're going to pass it.

1233
01:15:18,100 --> 01:15:22,700
So for example if you pass it a linked list data structure or, you

1234
01:15:22,700 --> 01:15:25,700
know, a hash table data structure or some data structure, that

1235
01:15:25,700 --> 01:15:29,700
presumably the language understands and you do it for each, then what

1236
01:15:29,700 --> 01:15:30,000
it's going.

1237
01:15:30,000 --> 01:15:31,500
To do is it's going to go.

1238
01:15:34,600 --> 01:15:39,600
Figure out how many things there are in it and then do that many

1239
01:15:39,600 --> 01:15:40,300
iterations.

1240
01:15:40,400 --> 01:15:42,700
Giving you one element every time.

1241
01:15:43,300 --> 01:15:46,100
It's a handy thing because it's basically just it's a lot of times

1242
01:15:46,100 --> 01:15:48,700
when you do a for Loop you're just trying to iterate over all the

1243
01:15:48,700 --> 01:15:53,700
members in something and C++ I don't think ever actually added good

1244
01:15:53,700 --> 01:15:54,800
ways to do that.

1245
01:15:56,700 --> 01:15:57,600
For whatever reason.

1246
01:15:58,500 --> 01:16:03,800
So maybe there are as in like C++, you know, 20 25 or whatever.

1247
01:16:11,600 --> 01:16:12,500
Let's see.

1248
01:16:15,800 --> 01:16:17,500
This not really today's topic.

1249
01:16:17,500 --> 01:16:19,600
When do you think you'll be designing your game instead of writing the

1250
01:16:19,600 --> 01:16:20,100
engine?

1251
01:16:21,200 --> 01:16:25,500
Well honestly, never liked the whole point of this is that I'm not a

1252
01:16:25,500 --> 01:16:29,600
game designer so will you know will be implementing game features

1253
01:16:29,900 --> 01:16:30,800
fairly soon.

1254
01:16:30,800 --> 01:16:37,300
Like I said there's not that much stuff left to do but we won't be

1255
01:16:37,300 --> 01:16:38,300
doing any design.

1256
01:16:39,200 --> 01:16:42,300
Like we're just implementing a fixed thing that I have written down.

1257
01:16:42,300 --> 01:16:45,400
It's like this is what we're going to implement and so this is not

1258
01:16:45,500 --> 01:16:48,200
Design stream and never will be, there's not gonna be any discussion

1259
01:16:48,200 --> 01:16:48,700
of design.

1260
01:16:48,700 --> 01:16:51,300
There's not going to be talking about design is not going to be any

1261
01:16:51,300 --> 01:16:52,600
game design happening on stirring.

1262
01:16:52,600 --> 01:16:53,900
There's just going to be, here's the thing.

1263
01:16:53,900 --> 01:16:56,600
We need to like Implement specific game thing.

1264
01:16:57,000 --> 01:16:59,100
This guy has to hit this other thing and we'll do that.

1265
01:16:59,100 --> 01:17:02,300
So we will be doing a bunch of that code but there's no game design.

1266
01:17:02,800 --> 01:17:05,800
I'm not a game designer and I don't want to talk about game design

1267
01:17:06,600 --> 01:17:08,400
because I don't have anything to say.

1268
01:17:13,800 --> 01:17:16,000
What language do you think is best for programming games?

1269
01:17:17,700 --> 01:17:19,400
See at the moment.

1270
01:17:21,400 --> 01:17:25,500
I'm not happy to say that the best language of tournament games is a

1271
01:17:25,500 --> 01:17:25,800
language.

1272
01:17:25,800 --> 01:17:30,000
That's like 40 years old or 30 years old, 30 years old.

1273
01:17:31,000 --> 01:17:32,000
It's 30 or 40 years old.

1274
01:17:32,000 --> 01:17:33,300
I don't know how old it is.

1275
01:17:33,300 --> 01:17:35,800
Now, I don't want to do the math, but it's very, very old.

1276
01:17:37,000 --> 01:17:40,500
But most new languages are just really bad for games.

1277
01:17:40,500 --> 01:17:41,000
Anyway.

1278
01:17:42,300 --> 01:17:47,000
I think most languages are actually just really bad in general, so I

1279
01:17:47,000 --> 01:17:49,700
don't really know the better language than C4 program for programming

1280
01:17:49,700 --> 01:17:52,900
games, but I wish there was a better one.

1281
01:17:53,100 --> 01:17:58,600
And maybe if John's new language works out, maybe that'll be it.

1282
01:18:00,000 --> 01:18:05,100
Because it certainly focuses on focuses on.

1283
01:18:06,200 --> 01:18:12,000
making a language that's like see but has a bunch of more powerful

1284
01:18:12,000 --> 01:18:16,600
features on top of it, that can do all the things that that secant do

1285
01:18:16,600 --> 01:18:17,900
well, you know,

1286
01:18:22,100 --> 01:18:23,300
John McGrath, oh my God.

1287
01:18:23,300 --> 01:18:26,600
See is 44 years old God.

1288
01:18:27,400 --> 01:18:27,800
Yeah.

1289
01:18:29,800 --> 01:18:31,200
So, yeah, I don't know.

1290
01:18:31,200 --> 01:18:33,800
Maybe we'll get a new language for game sometime soon.

1291
01:18:34,800 --> 01:18:39,700
I bet I know it's been 44 years and we haven't gotten one, so I don't

1292
01:18:39,700 --> 01:18:40,000
know.

1293
01:18:44,900 --> 01:18:45,400
Easy side.

1294
01:18:45,400 --> 01:18:46,500
The handles are just inside.

1295
01:18:46,500 --> 01:18:49,200
He's never heard from zero which map to purposes at the table courses.

1296
01:18:49,500 --> 01:18:53,200
Okay, so you're saying that in Linux, when you start up the handle,

1297
01:18:53,200 --> 01:18:55,600
IDs are guaranteed to be numbered that way.

1298
01:18:55,600 --> 01:19:00,800
So that you know that you can just use the, you know, like one or

1299
01:19:00,800 --> 01:19:01,800
something always Maps.

1300
01:19:01,800 --> 01:19:03,200
The standard error or something like that.

1301
01:19:11,800 --> 01:19:12,600
Diana 27.

1302
01:19:12,600 --> 01:19:15,600
I cannot consider using John's language because he has not released it

1303
01:19:15,600 --> 01:19:16,000
yet.

1304
01:19:17,200 --> 01:19:18,100
As far as I know,

1305
01:19:19,700 --> 01:19:23,700
Until he actually puts it out as like, here is a thing to start using,

1306
01:19:23,700 --> 01:19:25,600
obviously, I can't really use it.

1307
01:19:35,700 --> 01:19:39,600
So I'm going to go ahead and close down because we're a little over

1308
01:19:39,600 --> 01:19:40,200
time here.

1309
01:19:42,200 --> 01:19:44,300
Thank you, everyone for joining me for another 72 handmade here.

1310
01:19:44,300 --> 01:19:45,300
It's been a pleasure coding with you.

1311
01:19:45,300 --> 01:19:49,100
As always, if you would like to follow along at home with the code,

1312
01:19:49,500 --> 01:19:53,800
you can always pre-order the game on handmade here at our org and it

1313
01:19:53,800 --> 01:19:54,500
comes to the source code.

1314
01:19:54,500 --> 01:19:57,900
So you can play around with it and learn from it and conduct your own

1315
01:19:57,900 --> 01:19:58,600
experiments.

1316
01:19:59,300 --> 01:20:02,200
We also have a forum site, you can go to ask questions a patreon page,

1317
01:20:02,200 --> 01:20:04,000
you can use to support this video series.

1318
01:20:04,700 --> 01:20:05,000
A pot.

1319
01:20:05,000 --> 01:20:09,200
You can use to find out the schedule and if you want to type for coder

1320
01:20:09,900 --> 01:20:13,800
into your search box, you can find the editor that we use on handmade

1321
01:20:13,800 --> 01:20:16,800
hero now which was written by someone on the stream, in fact, on

1322
01:20:16,800 --> 01:20:22,300
Webster and you can pledge to that and get your very own copy of for a

1323
01:20:22,300 --> 01:20:27,600
coder and the custom config that I wrote for for coder is also always

1324
01:20:27,600 --> 01:20:30,400
available now it's in the handmade Miss directory.

1325
01:20:30,400 --> 01:20:34,500
So if you pre-ordered

1326
01:20:34,600 --> 01:20:36,300
The game, you will get that.

1327
01:20:36,300 --> 01:20:37,600
That will just be in there for you.

1328
01:20:38,900 --> 01:20:39,800
That's about it.

1329
01:20:39,900 --> 01:20:40,800
I'll be back here tomorrow.

1330
01:20:40,800 --> 01:20:41,300
5:00 p.m.

1331
01:20:41,300 --> 01:20:42,800
Pacific Daylight time.

1332
01:20:43,000 --> 01:20:44,000
Hope to see you there.

1333
01:20:44,000 --> 01:20:49,300
And maybe we'll get some of our debug values will Implement some

1334
01:20:49,300 --> 01:20:50,200
editing for those.

1335
01:20:50,500 --> 01:20:52,100
And we already actually have anything in there.

1336
01:20:52,100 --> 01:20:52,600
So we're Leo.

1337
01:20:52,600 --> 01:20:55,400
I think we have to do is just enable editing for those and then we're

1338
01:20:55,400 --> 01:20:56,000
good to go.

1339
01:20:56,500 --> 01:20:57,600
So that's it for today.

1340
01:20:58,100 --> 01:20:59,400
Hope you.

1341
01:20:59,700 --> 01:21:02,000
I hope see you guys tomorrow until then take it easy.

1342
01:21:02,000 --> 01:21:03,100
I'll see you guys on the internet.

