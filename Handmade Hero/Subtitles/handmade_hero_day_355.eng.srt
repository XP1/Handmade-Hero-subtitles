1
00:00:00,000 --> 00:00:00,600
Start.

2
00:00:01,900 --> 00:00:05,000
Hello everyone and welcome to handmade hero.

3
00:00:05,000 --> 00:00:07,400
The show recoded complete game live on stream.

4
00:00:07,900 --> 00:00:11,400
We are well it's New Years.

5
00:00:11,800 --> 00:00:17,100
Actually it is New Year's Day, no New Year's Eve day the day before

6
00:00:17,100 --> 00:00:18,100
the year changes.

7
00:00:18,300 --> 00:00:20,100
However, you properly say that.

8
00:00:21,200 --> 00:00:26,300
And so I thought we would spend the day taking a look at some stuff

9
00:00:26,300 --> 00:00:29,900
here in the issues drawer because I feel like

10
00:00:30,000 --> 00:00:33,900
like for 2017, we'll start with 3D stuff, probably I'm guessing.

11
00:00:35,100 --> 00:00:36,100
So we have some stuff to do.

12
00:00:36,100 --> 00:00:41,700
I figured I'd try some of these and then we also have the, the the

13
00:00:41,700 --> 00:00:45,800
fact that our, our room detection stuff, wasn't quite done, yet, we

14
00:00:45,800 --> 00:00:46,600
had just implement it.

15
00:00:46,600 --> 00:00:48,200
We didn't have a chance to debug it last time.

16
00:00:49,900 --> 00:00:51,200
So that's something we got to do, too.

17
00:00:52,400 --> 00:00:56,000
So you have plenty of stuff to do here, to try and finish 2016.

18
00:00:56,200 --> 00:01:00,600
With, with everything tidied up, some of them are easier than others.

19
00:01:00,600 --> 00:01:03,600
For example, entering being misspelled in the timer app.

20
00:01:04,000 --> 00:01:07,800
Certainly seems like something that's easy to fix.

21
00:01:07,800 --> 00:01:10,500
So we might as well just go ahead and do it.

22
00:01:10,700 --> 00:01:13,600
So, let's jump in there today is day, 3 55.

23
00:01:15,200 --> 00:01:19,900
So please used a Thrifty Force source code.

24
00:01:20,200 --> 00:01:21,900
If you are trying to follow along,

25
00:01:22,300 --> 00:01:22,900
Home.

26
00:01:23,900 --> 00:01:27,200
So let's take a look here at the timer stuff.

27
00:01:27,300 --> 00:01:31,400
I think that that should be pretty straightforward to say the least.

28
00:01:31,600 --> 00:01:33,100
So entering.

29
00:01:33,800 --> 00:01:34,400
There it is.

30
00:01:34,400 --> 00:01:39,900
I think, I think all we need to do there is make sure that it only has

31
00:01:39,900 --> 00:01:40,700
that once

32
00:01:42,700 --> 00:01:46,000
Looks like that was the only place where it so hopefully that is

33
00:01:46,000 --> 00:01:49,400
sufficient for that and off we go.

34
00:01:49,400 --> 00:01:54,600
So if I come over here to the timer, well I'll have to recompile it

35
00:01:54,600 --> 00:01:56,000
when we're when we're done.

36
00:01:56,000 --> 00:01:57,000
So I'm going to leave that here.

37
00:01:57,000 --> 00:01:59,600
I'm going to say we fixed the string.

38
00:02:00,300 --> 00:02:05,000
I will have to recompile it once we stop the screen.

39
00:02:07,400 --> 00:02:10,400
Obviously, I can't recompile it now because we're in the middle of

40
00:02:10,400 --> 00:02:11,300
actually running it.

41
00:02:11,300 --> 00:02:13,700
I mean, I could recompile it, but I couldn't actually switch to it.

42
00:02:14,000 --> 00:02:16,900
So I'll need to switch to it at that point.

43
00:02:17,200 --> 00:02:19,600
All right, so let's take a look here.

44
00:02:19,800 --> 00:02:22,100
We've got a couple of different things.

45
00:02:23,100 --> 00:02:26,600
Let's take the easier when still first as Abner was pointing out and I

46
00:02:26,600 --> 00:02:28,800
think I fixed this basically everywhere else.

47
00:02:31,500 --> 00:02:35,800
Already, I went through all of the places on the website in the

48
00:02:35,800 --> 00:02:40,000
tweetbot and so on, that used to post old links to before handmade

49
00:02:40,000 --> 00:02:45,000
Network started up and provided a place for the forums and the episode

50
00:02:45,000 --> 00:02:46,000
guide and stuff like this.

51
00:02:47,000 --> 00:02:52,400
But inside handmade hero there was still like a readme.txt sort of a

52
00:02:52,400 --> 00:02:56,400
thing that's there for like people who are coming to it the first time

53
00:02:57,200 --> 00:02:58,500
which is this guy right here.

54
00:02:58,700 --> 00:02:59,800
And so these

55
00:03:00,000 --> 00:03:05,000
Still using that sort of old-style forms, handmade hero, dot-org bit.

56
00:03:05,500 --> 00:03:09,800
And so this day, one link, we want to switch that over to like the

57
00:03:09,900 --> 00:03:11,700
place where the episode guide is now.

58
00:03:11,700 --> 00:03:15,900
So I'm going to jump over there and see what those links are.

59
00:03:15,900 --> 00:03:19,600
So I believe it's just asking about setting up the windows build,

60
00:03:19,600 --> 00:03:19,700
right?

61
00:03:19,700 --> 00:03:20,400
It's that one.

62
00:03:21,100 --> 00:03:25,900
So I think we just want this is the correct one in terms of like how

63
00:03:25,900 --> 00:03:28,900
it worked to this day, 0, 0, 1, so that should be correct.

64
00:03:29,000 --> 00:03:29,900
So I believe that,

65
00:03:30,000 --> 00:03:32,000
That link should be this link, right?

66
00:03:34,100 --> 00:03:38,000
And then let's take a look here and see if we've got forums.

67
00:03:38,300 --> 00:03:41,100
Yeah, got the forums here, forums that handmade hero.

68
00:03:41,100 --> 00:03:44,100
Dot-org is no longer the correct place for the forum's either.

69
00:03:44,500 --> 00:03:46,600
So we've got to change that to be here.

70
00:03:46,600 --> 00:03:49,200
Oops, didn't mean to open that, that way.

71
00:03:49,200 --> 00:03:51,100
So that's the correct link for the forms.

72
00:03:51,100 --> 00:03:54,600
Now, which is nice, that's a better link than that one, ugly one.

73
00:03:55,500 --> 00:03:59,200
So that should be that I think so.

74
00:03:59,400 --> 00:03:59,800
Let's see.

75
00:04:00,000 --> 00:04:03,200
Here if there's any more links I don't think there are looks like that

76
00:04:03,200 --> 00:04:04,000
was all of them.

77
00:04:04,600 --> 00:04:08,100
So hopefully that updates those links properly and now everything

78
00:04:08,100 --> 00:04:11,000
should be up to Snuff.

79
00:04:11,200 --> 00:04:11,700
I think

80
00:04:14,500 --> 00:04:14,900
Okay.

81
00:04:17,800 --> 00:04:20,700
Looks good to me, so let's call that good.

82
00:04:22,700 --> 00:04:24,700
You should be fixed, ma'am.

83
00:04:27,900 --> 00:04:28,900
Close comment.

84
00:04:31,300 --> 00:04:31,800
All right.

85
00:04:32,600 --> 00:04:35,800
So let's take a look at some of these other ones here because we have

86
00:04:35,800 --> 00:04:36,400
a couple more.

87
00:04:37,600 --> 00:04:40,800
So, obviously like I said, this one we got to work on this one.

88
00:04:40,800 --> 00:04:42,800
Here is an interesting one.

89
00:04:43,400 --> 00:04:48,600
It started because Abner was talking about trying to get Visual Studio

90
00:04:48,600 --> 00:04:50,300
2015, to work out of the box.

91
00:04:50,300 --> 00:04:55,700
Which again, I have not installed Visual Studio 2015 because the the

92
00:04:55,700 --> 00:04:59,200
cardinal rule of game development, then unfortunately not many people

93
00:04:59,200 --> 00:05:00,900
follow, and sometimes they're forced to

94
00:05:01,100 --> 00:05:02,600
Follow it, which is unfortunate.

95
00:05:03,900 --> 00:05:09,400
But the best advice I could possibly give for game development.

96
00:05:10,300 --> 00:05:13,100
And I know that sounds weird and it's not something I probably would

97
00:05:13,100 --> 00:05:15,400
have said, 15 years ago.

98
00:05:16,500 --> 00:05:19,400
But based on the state of software today cardinal rule of game

99
00:05:19,400 --> 00:05:20,200
development.

100
00:05:20,200 --> 00:05:28,400
Is you never upgrade anything during the development of the game, you

101
00:05:28,400 --> 00:05:32,600
will want to because they'll be some feature that supposedly in the

102
00:05:32,600 --> 00:05:38,600
next version of this thing like Photoshop or Visual Studio, or 3D

103
00:05:38,600 --> 00:05:39,900
Studio, Max or Maya.

104
00:05:40,600 --> 00:05:42,600
Or Unity or whatever.

105
00:05:43,200 --> 00:05:47,500
You never ever, ever upgrade anything in the middle of development.

106
00:05:47,500 --> 00:05:48,100
Why?

107
00:05:50,100 --> 00:05:53,800
Because you can guarantee that in that update, they have introduced

108
00:05:53,800 --> 00:05:58,900
literally like thousands of new bugs that you will then have to work

109
00:05:58,900 --> 00:05:59,700
around.

110
00:06:00,200 --> 00:06:03,000
That break existing stuff you do or that make it.

111
00:06:03,000 --> 00:06:06,000
So you can't build your stuff anymore or that change how things are

112
00:06:06,000 --> 00:06:07,600
working and Bubba, Bubba blah.

113
00:06:08,700 --> 00:06:12,400
So generally speaking, once you start a project I usually say the

114
00:06:12,400 --> 00:06:16,000
tools are locked at that point they don't change and if for some

115
00:06:16,000 --> 00:06:19,800
reason you feel like you actually need to change Tools in my opinion,

116
00:06:19,800 --> 00:06:21,200
that's like a major decision.

117
00:06:21,300 --> 00:06:24,000
That's like a, should we sell our company level decision?

118
00:06:24,200 --> 00:06:27,400
Everyone should get together and like, hash it out for a day.

119
00:06:27,600 --> 00:06:29,900
And if everyone is not completely on board with

120
00:06:30,000 --> 00:06:33,300
with it at the end of that and like, quite certain that, it's an

121
00:06:33,300 --> 00:06:34,500
absolutely essential thing to do.

122
00:06:34,500 --> 00:06:40,800
You do not change tools, so, that is why I have not upgraded to visual

123
00:06:40,800 --> 00:06:45,800
studio 2015 and never will until this project is done.

124
00:06:46,200 --> 00:06:50,800
But that said, if people are coming to this project and they have

125
00:06:50,800 --> 00:06:53,200
Visual Studio 2015, the stalled, and they don't want to have to roll

126
00:06:53,200 --> 00:06:56,100
back to a previous version to get it to work.

127
00:06:56,100 --> 00:06:59,800
That doesn't mean we shouldn't go ahead and fix things in the

128
00:07:00,000 --> 00:07:05,200
Base that Visual Studio 2015 doesn't like to try and help those people

129
00:07:05,200 --> 00:07:05,400
out.

130
00:07:05,400 --> 00:07:06,700
So they have a smoother experience.

131
00:07:07,100 --> 00:07:07,700
So

132
00:07:10,400 --> 00:07:11,300
I was asking.

133
00:07:13,100 --> 00:07:18,500
These folks to tell me what the actual problems were and Martin's sent

134
00:07:18,500 --> 00:07:23,000
in a really nice in that Martin's way that he always does everything

135
00:07:23,400 --> 00:07:31,300
to the nth degree sent in like a complete listing of like, of all the

136
00:07:31,300 --> 00:07:32,300
things we need to do.

137
00:07:32,600 --> 00:07:35,500
So I felt like at that point, it behooves us to actually follow them

138
00:07:35,500 --> 00:07:36,100
because

139
00:07:37,700 --> 00:07:41,100
If someone going through that level of trouble to give us that

140
00:07:41,100 --> 00:07:44,500
specific level specificity, we should definitely go ahead and fix

141
00:07:44,500 --> 00:07:44,800
them.

142
00:07:45,400 --> 00:07:47,500
So, let's start at the top.

143
00:07:47,900 --> 00:07:49,900
The first one is that in simple preprocessor.

144
00:07:49,900 --> 00:07:53,100
Everywhere percent .s is used, the lengths are going to need to have a

145
00:07:53,100 --> 00:07:54,300
type into not size.

146
00:07:54,300 --> 00:07:57,700
T spec requires the type for length, this can be fixed either in code

147
00:07:57,700 --> 00:08:01,800
or disabled with the WD warning, that seems like something we could

148
00:08:01,800 --> 00:08:03,400
fix in the code relatively.

149
00:08:03,400 --> 00:08:07,000
Well, we could just cast those

150
00:08:07,200 --> 00:08:10,900
Ence if we wanted to among other things we could do.

151
00:08:11,200 --> 00:08:13,600
So let's just take a look at that and see.

152
00:08:13,900 --> 00:08:21,100
Inside simple, Professor percent .s start us so you can see us us

153
00:08:21,100 --> 00:08:22,500
looking at it here, right?

154
00:08:23,600 --> 00:08:25,500
So everywhere that we're doing that,

155
00:08:28,600 --> 00:08:30,700
I guess the problem is that text length.

156
00:08:30,700 --> 00:08:33,500
Here is defined as a size T.

157
00:08:34,100 --> 00:08:37,500
And so what we could do since we really don't ever need it to not be a

158
00:08:37,500 --> 00:08:39,700
size, T we could use

159
00:08:41,700 --> 00:08:46,200
We could probably make it so that that wasn't a size T because we're

160
00:08:46,200 --> 00:08:52,700
never going to be pressing 4 GB of text so and they're a single token

161
00:08:52,700 --> 00:08:57,000
would never occupy that much space either so we could if we wanted to

162
00:08:57,000 --> 00:08:59,800
just change that to be an integer for more.

163
00:09:00,000 --> 00:09:05,300
It's just printing, it feels a little wrong to take code that used to

164
00:09:05,300 --> 00:09:10,100
be capable of handling everything though, and change it just for the

165
00:09:10,100 --> 00:09:10,800
printf.

166
00:09:10,800 --> 00:09:17,100
So, so I'm not sure what the right thing to do is at the same time, it

167
00:09:17,100 --> 00:09:26,400
seems kind of a little bit wrong here to kind of go ahead and and and

168
00:09:26,400 --> 00:09:27,800
cast everywhere.

169
00:09:29,800 --> 00:09:33,000
Yeah, I don't know but I think that's probably honestly the right

170
00:09:33,000 --> 00:09:33,700
thing to do.

171
00:09:33,700 --> 00:09:35,900
I mean because I really don't think like, breaking the code

172
00:09:35,900 --> 00:09:37,700
functionality is the right thing to do.

173
00:09:38,300 --> 00:09:42,400
So I think this is probably what we would want to do, and let's see if

174
00:09:42,400 --> 00:09:43,400
that's all of them.

175
00:09:44,200 --> 00:09:47,000
One, two, three, four, five.

176
00:09:47,400 --> 00:09:51,100
So there's a 6 here, let's get that one.

177
00:09:55,000 --> 00:09:58,800
And that one will just do as a prophylaxis in case anyone wants to put

178
00:09:58,800 --> 00:09:59,300
it in there.

179
00:10:00,800 --> 00:10:03,300
So, all right, I think we've got that one.

180
00:10:04,700 --> 00:10:08,200
And handmade intrinsics, absolute value should use Fabs because

181
00:10:08,200 --> 00:10:08,800
Festival.

182
00:10:09,000 --> 00:10:10,100
That's true.

183
00:10:10,400 --> 00:10:12,300
I didn't know we were still calling that.

184
00:10:12,600 --> 00:10:15,100
Let's go take a look at that and I'll talk a little bit about that in

185
00:10:15,100 --> 00:10:15,800
a second here.

186
00:10:16,100 --> 00:10:17,300
I must have been a nap.

187
00:10:17,300 --> 00:10:17,700
Okay.

188
00:10:18,900 --> 00:10:23,700
So this is a sort of a mistake that I guess I just did inadvertently

189
00:10:23,700 --> 00:10:26,700
because I didn't do it here and just to give you a little bit of

190
00:10:26,700 --> 00:10:27,400
background here

191
00:10:30,000 --> 00:10:33,400
What's going on here is that in the C runtime Library, which we don't

192
00:10:33,400 --> 00:10:34,200
really use much of.

193
00:10:34,200 --> 00:10:37,400
So I haven't had any occasion to really talk about it.

194
00:10:37,700 --> 00:10:39,900
And I've often said multiple times at the end, we'll probably replace

195
00:10:39,900 --> 00:10:41,900
it with our own Library as well.

196
00:10:42,500 --> 00:10:44,800
So that's double reason I've talked about it but just so that you're

197
00:10:44,800 --> 00:10:47,300
aware of it because sometimes you will decide to program using the C

198
00:10:47,300 --> 00:10:50,800
runtime library in which case it's good to know, they're math routines

199
00:10:50,800 --> 00:10:54,100
oftentimes have two different versions, they have one version that

200
00:10:54,100 --> 00:10:57,400
takes a double and returns a double and that's the kind that doesn't

201
00:10:57,400 --> 00:10:57,900
have an F on the

202
00:10:58,100 --> 00:11:00,100
so, that would take a double and return a double

203
00:11:01,000 --> 00:11:04,600
And then a version that does have an F on the end and that takes a

204
00:11:04,600 --> 00:11:05,600
float and returns a float.

205
00:11:05,600 --> 00:11:11,000
And so if you take a look at what we were doing here with f ABS, we

206
00:11:11,000 --> 00:11:13,500
were going to be passing F ABS a double.

207
00:11:13,500 --> 00:11:14,400
Sorry.

208
00:11:14,400 --> 00:11:19,600
We were going to be passing, F, ABS a float and since F, AB, suspect

209
00:11:19,600 --> 00:11:22,200
is taking a double, it would have up converted that to a double no

210
00:11:22,200 --> 00:11:22,700
harm there.

211
00:11:22,700 --> 00:11:25,300
But then it would return us a double.

212
00:11:25,300 --> 00:11:29,700
And since we were stuffing that into a regular float, a 32-bit float

213
00:11:29,700 --> 00:11:30,900
that would trigger

214
00:11:31,100 --> 00:11:33,800
Compiler wearing it says, hey, I'm like down converting this value.

215
00:11:33,800 --> 00:11:35,500
Like I'm taking it by that with 64-bit string.

216
00:11:35,500 --> 00:11:36,300
21 32 bits.

217
00:11:36,700 --> 00:11:38,200
Are you sure you want to lose that precision?

218
00:11:40,200 --> 00:11:41,800
And so that's that's all that's happening there.

219
00:11:42,400 --> 00:11:45,700
So if we change that, that that's just a, that's just a typo.

220
00:11:45,900 --> 00:11:49,500
There's no reason we wanted to call the regular F ABS so that's just

221
00:11:50,400 --> 00:11:52,600
should be fixed regardless because there's no reason to call the

222
00:11:52,600 --> 00:11:53,600
double version of apps.

223
00:11:54,700 --> 00:11:57,100
It's not really going to matter because it's a single absolute value.

224
00:11:57,100 --> 00:11:59,800
But, you know, that in general, we don't

225
00:12:00,000 --> 00:12:02,600
Two calls 64-bit absolute value.

226
00:12:02,600 --> 00:12:05,400
Anyway, if we don't need to because, you know, maybe the compiler can

227
00:12:05,400 --> 00:12:07,400
do something Faster by doing four of them.

228
00:12:07,400 --> 00:12:08,300
A Time who knows what it could do.

229
00:12:08,300 --> 00:12:11,300
But point being letting it know that we're not trying to do that as

230
00:12:11,300 --> 00:12:12,000
important anyway.

231
00:12:13,400 --> 00:12:15,900
In the future will be trained to that to Intrinsic probably and so on

232
00:12:16,600 --> 00:12:20,600
anyway, aligned pao2 macro, complains about zero, extending a 32-bit

233
00:12:20,600 --> 00:12:22,900
value to memory index for the size.

234
00:12:22,900 --> 00:12:24,600
Changes it to this fixes the warning.

235
00:12:25,000 --> 00:12:26,000
Aligned pao2.

236
00:12:26,000 --> 00:12:30,000
Let's take a look at where that is C line.

237
00:12:30,000 --> 00:12:34,500
Pattu actually lined out to thank you Alan for the search.

238
00:12:35,200 --> 00:12:35,600
Okay.

239
00:12:36,900 --> 00:12:37,400
Here we go.

240
00:12:39,200 --> 00:12:40,600
And so let's see here.

241
00:12:40,600 --> 00:12:42,900
I'm just going to take a look at what he was saying and look at these

242
00:12:42,900 --> 00:12:46,000
two side-by-side and aah.

243
00:12:48,800 --> 00:12:49,300
I see.

244
00:12:51,900 --> 00:12:55,000
So I'm assuming that the problem here is just a deals with the, the

245
00:12:55,000 --> 00:12:58,600
size variance of these things basically.

246
00:12:59,400 --> 00:13:01,300
So when we do a line pao2,

247
00:13:02,700 --> 00:13:06,500
The problem here is that the alignment value could be anything, right?

248
00:13:06,800 --> 00:13:08,700
The value is the thing that we're trying to align.

249
00:13:09,200 --> 00:13:15,100
So, typically that's like a pointer or account, and if that count was

250
00:13:15,100 --> 00:13:18,200
32 bits, we probably wouldn't have a problem because the intron

251
00:13:18,200 --> 00:13:21,500
integral promotion and see the way it works, is things will generally

252
00:13:21,500 --> 00:13:23,000
end up as in says they go.

253
00:13:23,700 --> 00:13:25,700
And so this thing would just all work out to an end.

254
00:13:25,700 --> 00:13:28,200
It would do this some expression over here that would become an ant it

255
00:13:28,200 --> 00:13:30,400
would do this when this would become an ENT and you would and to

256
00:13:30,400 --> 00:13:32,200
instigator and everyone's happy, right?

257
00:13:32,400 --> 00:13:33,000
It's all good.

258
00:13:35,200 --> 00:13:38,700
But assuming that the thing we were trying to align was a pointer.

259
00:13:39,400 --> 00:13:42,700
Then what can often happen is the pointer is going to be 64 bits, but

260
00:13:42,700 --> 00:13:46,000
the alignment value will probably just be an end of some kind, right?

261
00:13:46,100 --> 00:13:51,800
Like for right, which by default on this compiler is, you know,

262
00:13:51,800 --> 00:13:54,700
because compilers are free to Define in to be whatever they want it to

263
00:13:54,700 --> 00:13:56,000
be in terms of size, right?

264
00:13:56,000 --> 00:13:59,800
And it could be 16 bits could be 32 bits on this platform and it is 32

265
00:13:59,800 --> 00:14:00,200
bits.

266
00:14:00,300 --> 00:14:03,800
Integral promotion means that this expression will stay in ENT, right?

267
00:14:03,800 --> 00:14:04,400
So not

268
00:14:04,600 --> 00:14:08,900
I'm at -1 will stay in ants and then over here, we'll get Value Plus

269
00:14:09,100 --> 00:14:16,000
alignment - one that will become a 64-bit value and it will do an and

270
00:14:16,000 --> 00:14:19,500
of the 64-bit value with the 32-bit value.

271
00:14:19,800 --> 00:14:23,200
And I don't really know what will happen in terms of the fact that

272
00:14:23,200 --> 00:14:27,900
this is now a pointer my guess is that since this is now a pointer and

273
00:14:27,900 --> 00:14:31,400
you're trying to end a pointer with a 32-bit non pointer, I don't

274
00:14:31,400 --> 00:14:34,400
know, I'm just assuming that something bad happens here in terms of

275
00:14:34,400 --> 00:14:34,400
the

276
00:14:34,500 --> 00:14:39,500
The compilers guesses, I'm not super good with with C++ has rules

277
00:14:39,500 --> 00:14:42,300
about what can and cannot be converted to what.

278
00:14:44,100 --> 00:14:47,400
So, I can't say specifically what triggers the problem.

279
00:14:47,600 --> 00:14:52,100
But as you can see what Martin said, fixed it on 2015 is just telling

280
00:14:52,100 --> 00:14:57,000
this expression to convert to 64 bits first before we did anything

281
00:14:57,000 --> 00:14:57,600
with it.

282
00:14:58,600 --> 00:14:59,800
And so I

283
00:15:00,000 --> 00:15:03,800
Take his word for that, that works and off we go, right?

284
00:15:04,300 --> 00:15:08,900
And again, this um, m is specified to be the sum integer the size of

285
00:15:08,900 --> 00:15:11,300
memory, an unsigned integer, the size of memory.

286
00:15:11,400 --> 00:15:14,000
And so even in 32-bit mode that would still be okay.

287
00:15:14,000 --> 00:15:16,600
It's not going to try and convert it to 64-bit and 32-bit mode.

288
00:15:16,600 --> 00:15:19,900
So this will just make sure it stays the size of a pointer which is

289
00:15:19,900 --> 00:15:21,200
probably what we want.

290
00:15:27,300 --> 00:15:30,100
Although that said I guess I don't really know if that's true.

291
00:15:30,100 --> 00:15:33,900
Either the reason that I don't know if that's true is because if you

292
00:15:33,900 --> 00:15:38,200
imagine what would happen if we were trying to align the 32-bit value,

293
00:15:38,200 --> 00:15:42,200
is this would automatically turn it into a 64-bit value on 64-bit

294
00:15:42,600 --> 00:15:43,800
architectures, right?

295
00:15:43,900 --> 00:15:46,400
Because what will happen here, is this will become 32-bit, and this

296
00:15:46,400 --> 00:15:47,700
will become 64-bit.

297
00:15:47,700 --> 00:15:51,300
And if this was still a 32-bit value, whatever it was the whole thing

298
00:15:51,300 --> 00:15:53,500
would get converted to 64 bits for no reason.

299
00:15:56,000 --> 00:15:57,300
So that's a little bit of a problem.

300
00:15:57,400 --> 00:15:58,500
I want to read this again.

301
00:15:58,500 --> 00:16:03,300
Align pao2 macro complaints about 0, extending a u-32 value for the

302
00:16:04,200 --> 00:16:06,500
tilde, operator to memory index of Greater sighs.

303
00:16:06,500 --> 00:16:11,800
Yeah, so that's that's exactly what that what that is right.

304
00:16:11,800 --> 00:16:13,500
It's trying to so I guess it's that.

305
00:16:13,500 --> 00:16:16,300
It's just because when it's going to do this, not

306
00:16:19,000 --> 00:16:22,600
It doesn't like the fact that it has to figure out how long it has to

307
00:16:22,600 --> 00:16:22,800
be.

308
00:16:22,800 --> 00:16:25,000
I guess, I'm not sure exactly what the problem is there.

309
00:16:35,200 --> 00:16:36,100
Hmm.

310
00:16:36,900 --> 00:16:39,400
So, I'm not sure how to write this in a way.

311
00:16:39,400 --> 00:16:42,000
I'm trying to think about how to write this in a way that it ends up

312
00:16:42,000 --> 00:16:43,200
being the correct.

313
00:16:43,900 --> 00:16:44,200
Ttttt.

314
00:16:46,300 --> 00:16:47,500
The correct size here.

315
00:16:54,400 --> 00:16:59,400
I mean one way to do it might be to just have a dummy thing in there

316
00:16:59,400 --> 00:17:01,600
that forces the size to be correct.

317
00:17:01,600 --> 00:17:04,900
I don't know, I'm trying to think like for example, could you do

318
00:17:04,900 --> 00:17:06,800
something ridiculous like

319
00:17:08,599 --> 00:17:09,200
That.

320
00:17:16,300 --> 00:17:22,099
Where you're basically taking something that's Anon Anon value like a

321
00:17:22,099 --> 00:17:28,000
0 and you're inserting it into the term so that it knows that this

322
00:17:28,400 --> 00:17:31,800
however big this was, it will have to up convert this to that same bit

323
00:17:31,800 --> 00:17:32,300
size.

324
00:17:53,400 --> 00:17:55,200
So, I don't know about that one Martins.

325
00:17:57,800 --> 00:17:59,800
I'm going to say let's, let's assume.

326
00:18:00,000 --> 00:18:02,700
That that's that, that's a good idea.

327
00:18:03,200 --> 00:18:05,300
When I say good idea, I don't really mean good.

328
00:18:05,300 --> 00:18:10,000
I mean in that way, that I hate the fact that that Inc have to even

329
00:18:10,000 --> 00:18:14,100
think about things like that because there should be ways of just

330
00:18:14,100 --> 00:18:16,700
telling the compiler, what you wanted to do, instead of having to come

331
00:18:16,700 --> 00:18:17,600
at it sideways.

332
00:18:19,900 --> 00:18:20,300
But yeah.

333
00:18:20,300 --> 00:18:24,200
So let's let's just let's just put that in there for now.

334
00:18:24,200 --> 00:18:26,700
And then I'll talk to Martin separately when he takes a look at this

335
00:18:26,700 --> 00:18:29,900
and it will let me know if that fixes the problem in a way.

336
00:18:30,000 --> 00:18:30,900
Way that's going to work.

337
00:18:31,000 --> 00:18:34,200
I'm just kind of like trying to figure out how to get the power to do

338
00:18:34,600 --> 00:18:36,800
something reasonable there, that will work in all cases.

339
00:18:38,000 --> 00:18:40,000
So, let's see, do a penalty function.

340
00:18:40,000 --> 00:18:42,900
It doesn't like this cast, it wants this way.

341
00:18:43,900 --> 00:18:46,500
Oh, cast to the um, first, okay, that's fine.

342
00:18:47,500 --> 00:18:49,300
So, let's take a look at debug pick entity.

343
00:19:07,300 --> 00:19:08,000
It's still a party.

344
00:19:08,000 --> 00:19:13,400
Sorry I was looking at the wrong thing so it is this debug pointer ID.

345
00:19:13,900 --> 00:19:18,000
So it is, this is just one of those pointer cast things where I'm up

346
00:19:18,000 --> 00:19:19,100
converting something to a pointer.

347
00:19:19,100 --> 00:19:21,800
And it wants me to First convert it to 64 bits, then converted to a

348
00:19:21,800 --> 00:19:23,600
pointer, it was on 64-bit architectures.

349
00:19:24,900 --> 00:19:26,400
It kind of a useless thing, but okay.

350
00:19:29,200 --> 00:19:32,500
In with your hair - EVP, this should be changed to this.

351
00:19:32,600 --> 00:19:35,200
Okay, so the global back, buffer, width and height just have to be

352
00:19:35,200 --> 00:19:37,000
cast into you 32s first.

353
00:19:37,800 --> 00:19:39,100
So let's take a look at that.

354
00:19:48,600 --> 00:19:50,400
That's an easy enough has to add.

355
00:19:51,300 --> 00:19:51,700
Yeah.

356
00:19:54,400 --> 00:19:58,300
And let's see a lot of warning Declaration of XYZ hides function

357
00:19:58,300 --> 00:20:00,800
parameter or declarations, you hides previous local decorative

358
00:20:01,300 --> 00:20:02,000
declaration.

359
00:20:02,100 --> 00:20:04,900
They could be potential bugs because if you try to use x, y, z, value

360
00:20:04,900 --> 00:20:07,800
variable somewhere below and will think that you're using one, but

361
00:20:07,800 --> 00:20:10,100
probably the second temporary fix would be blah.

362
00:20:10,100 --> 00:20:11,900
Here's a full list of locations where it happens.

363
00:20:12,100 --> 00:20:17,200
So since we have the full list of locations, we - Go - well go check

364
00:20:17,200 --> 00:20:18,300
them out and verify that

365
00:20:18,400 --> 00:20:19,900
They're okay.

366
00:20:22,300 --> 00:20:23,900
And that nothing weird has to happen there.

367
00:20:24,400 --> 00:20:25,900
I wish I could change.

368
00:20:25,900 --> 00:20:28,000
I don't know how to change make this buffer editable.

369
00:20:28,100 --> 00:20:31,000
It would be cool if I could make it editable, because if I could make

370
00:20:31,000 --> 00:20:33,400
it editable, then I could jump to these directly.

371
00:20:34,800 --> 00:20:39,500
But oh well although maybe not because they don't have the source

372
00:20:40,600 --> 00:20:41,500
location in them.

373
00:20:41,800 --> 00:20:45,500
But anyway, so I'm going to go ahead and go to the scratch buffer

374
00:20:45,500 --> 00:20:48,200
here, put this in here and then

375
00:20:48,300 --> 00:20:51,400
We can take a look at where these guys are.

376
00:20:52,400 --> 00:20:57,300
So, let's go to 194 and take a look at Declaration of count, hides,

377
00:20:57,300 --> 00:20:58,400
the function parameter.

378
00:21:00,300 --> 00:21:01,100
That's true.

379
00:21:03,500 --> 00:21:06,500
So we can just name this something else I suppose.

380
00:21:08,000 --> 00:21:10,200
Let's let's see where count is used here.

381
00:21:16,800 --> 00:21:22,400
So I think what I'd like to do here is maybe call this like the entry

382
00:21:22,400 --> 00:21:26,900
count, for example, just to make it clear.

383
00:21:26,900 --> 00:21:27,100
What?

384
00:21:27,100 --> 00:21:28,300
We're looking at here.

385
00:21:32,100 --> 00:21:33,600
I think that's just a better idea.

386
00:21:35,100 --> 00:21:39,100
And that way, you know, that local count can still just say count

387
00:21:39,100 --> 00:21:42,700
because otherwise you've inside here, you might accidentally refer to

388
00:21:42,700 --> 00:21:43,600
count differently.

389
00:21:45,100 --> 00:21:47,600
So I think that's, that's a better choice there.

390
00:21:48,000 --> 00:21:48,400
Oops.

391
00:21:49,700 --> 00:21:52,800
Let's see, definition P render group.

392
00:21:56,000 --> 00:21:57,000
Let's see.

393
00:21:58,300 --> 00:22:02,200
Yeah, we've got a, we've got the p-value here that's being passed to

394
00:22:02,200 --> 00:22:05,200
this and

395
00:22:10,000 --> 00:22:12,000
I don't know what we want to call this exactly.

396
00:22:12,600 --> 00:22:15,000
You can call this a modified P or something like that.

397
00:22:15,600 --> 00:22:15,900
Okay?

398
00:22:16,800 --> 00:22:19,700
And then here, the P value that we actually passed down, will be call

399
00:22:19,700 --> 00:22:20,000
that.

400
00:22:20,000 --> 00:22:22,600
So, that's a totally reasonable thing.

401
00:22:23,600 --> 00:22:26,000
Let's take a look at asset.

402
00:22:27,700 --> 00:22:34,000
So in 270 acid index hides a function parameter.

403
00:22:35,600 --> 00:22:36,500
Let's see.

404
00:22:36,500 --> 00:22:40,100
So asset index is getting passed down here, and then we've got another

405
00:22:40,100 --> 00:22:41,200
asset index in here.

406
00:22:41,200 --> 00:22:43,100
So that does also seem confusing.

407
00:22:44,500 --> 00:22:47,000
Let's take a look at where that's actually being used.

408
00:22:55,300 --> 00:22:58,500
So really the only place that that's getting used is down at the

409
00:22:58,500 --> 00:22:58,800
bottom.

410
00:22:58,800 --> 00:23:00,600
So I feel like what we want to do there,

411
00:23:02,600 --> 00:23:04,700
Is maybe call that the new asset index.

412
00:23:04,800 --> 00:23:06,500
So we do a choir asset memory.

413
00:23:06,800 --> 00:23:10,000
We just kind of do that on it, right?

414
00:23:10,400 --> 00:23:12,600
Let's just make sure that we're not violating anything there.

415
00:23:12,800 --> 00:23:13,200
Okay.

416
00:23:15,000 --> 00:23:18,800
All right, so I think we've done all of these might as well just get

417
00:23:18,800 --> 00:23:24,300
rid of them and now let's take a look at where we are on these asset

418
00:23:24,300 --> 00:23:24,700
ones.

419
00:23:24,700 --> 00:23:26,700
So we have asset it looks like asset.

420
00:23:26,700 --> 00:23:30,500
It's getting used more than once I guess but I'm not sure.

421
00:23:33,800 --> 00:23:36,500
Yes, you can see we're just kind of dereferencing asset here for

422
00:23:36,500 --> 00:23:37,300
convenience.

423
00:23:40,400 --> 00:23:41,800
And I'm not sure.

424
00:23:49,600 --> 00:23:51,300
I'm not sure that we really

425
00:23:53,400 --> 00:23:55,100
Need that second declaration.

426
00:23:55,500 --> 00:23:56,900
Seems like it's just that

427
00:23:58,000 --> 00:23:59,800
and since the header asset index,

428
00:24:02,000 --> 00:24:04,900
This is inside a lock.

429
00:24:06,300 --> 00:24:10,300
So I'm not really sure what this is doing because asset equals assets

430
00:24:10,500 --> 00:24:13,300
assets, plus header asset Index, right?

431
00:24:14,000 --> 00:24:18,600
And then we look to see if that's all good and you know we don't

432
00:24:18,600 --> 00:24:19,700
change anything here.

433
00:24:20,800 --> 00:24:24,800
And then we immediately go grab that asset index out of the header

434
00:24:24,800 --> 00:24:27,000
asset index and then do the offset again.

435
00:24:27,000 --> 00:24:28,700
But we've already got it up here.

436
00:24:29,200 --> 00:24:33,300
So it kind of seems like that's just unnecessary, right?

437
00:24:33,900 --> 00:24:36,300
It seems like that's just that's just that

438
00:24:40,100 --> 00:24:43,000
And I think that was probably just, you know, one of those like stream

439
00:24:43,000 --> 00:24:46,600
sort of nonsense typo situations, doesn't really make any sense.

440
00:24:47,000 --> 00:24:48,000
So, I'm just gonna go ahead and say that.

441
00:24:48,000 --> 00:24:50,300
Now, our line numbers will be off a little bit here because we just

442
00:24:50,300 --> 00:24:53,600
edited them a little bit, but I presume we will be able to figure it

443
00:24:53,600 --> 00:24:55,600
out, okay?

444
00:24:55,600 --> 00:24:56,500
So you can see again.

445
00:24:56,500 --> 00:25:01,700
So this is this is exactly the same situation here, right?

446
00:25:01,800 --> 00:25:05,500
We're changing the state on this asset and then for some reason we're

447
00:25:05,500 --> 00:25:08,700
grabbing it again like we've already got it and the ID

448
00:25:08,900 --> 00:25:10,900
You is not going to be changing here, right?

449
00:25:10,900 --> 00:25:13,500
Because the ID value is a local thing.

450
00:25:13,500 --> 00:25:15,800
So we don't need to re get this asset.

451
00:25:15,800 --> 00:25:20,900
It's just it's it's the same asset so it doesn't need to be access

452
00:25:20,900 --> 00:25:21,600
that way.

453
00:25:22,100 --> 00:25:25,000
As far as I know, and same again, is true cure.

454
00:25:26,200 --> 00:25:28,600
So I don't, I don't think those are actually irrelevant.

455
00:25:30,900 --> 00:25:35,000
So a lot of those are just, you know, redundant lookups, they were the

456
00:25:35,000 --> 00:25:39,900
exact same value, and just make sure that it's not the last one.

457
00:25:44,900 --> 00:25:45,300
Yeah.

458
00:25:46,900 --> 00:25:48,700
Far as I can tell those are all non.

459
00:25:48,800 --> 00:25:50,200
Those are all non things.

460
00:25:51,400 --> 00:25:52,500
All right, let's verify that.

461
00:25:52,500 --> 00:25:55,200
That's still working properly that I haven't broken.

462
00:25:55,200 --> 00:25:55,700
Anything.

463
00:25:55,900 --> 00:25:57,000
Looks like I haven't

464
00:26:02,500 --> 00:26:05,800
And now, let's take a look again at what's going on with some of these

465
00:26:05,800 --> 00:26:06,500
other ones.

466
00:26:07,200 --> 00:26:17,600
So, handmade dot CPP, if we go to 282, I data, block hides previous,

467
00:26:18,400 --> 00:26:20,900
local Declaration of data block.

468
00:26:30,400 --> 00:26:33,600
So that was kind of by Design is the only problem.

469
00:26:33,600 --> 00:26:35,100
That's a macro problem.

470
00:26:45,000 --> 00:26:47,200
So I'm not sure there's a whole lot, we're really going to be able to

471
00:26:47,200 --> 00:26:50,900
do about that for the time being.

472
00:26:50,900 --> 00:26:53,600
I guess what we can do is not Nest them.

473
00:27:00,300 --> 00:27:02,900
You know, the other thing we could do is just lean on the debug

474
00:27:02,900 --> 00:27:03,600
system, right?

475
00:27:03,600 --> 00:27:05,400
We could do this, we could do it this way.

476
00:27:08,800 --> 00:27:12,100
But the only other option would be to go change the macro to actually

477
00:27:12,100 --> 00:27:17,500
have like a an auto-generated name that uses counter or something to

478
00:27:17,500 --> 00:27:18,600
avoid conflicting.

479
00:27:21,600 --> 00:27:25,400
But for now I guess that's just the easiest way to do it to do.

480
00:27:25,400 --> 00:27:35,200
Casey had to move this out into its own block, to avoid an spcc 2015

481
00:27:35,500 --> 00:27:36,200
warning.

482
00:27:37,000 --> 00:27:43,500
Probably should eventually fixed the macros to generate unique names

483
00:27:44,700 --> 00:27:45,600
to avoid

484
00:27:48,800 --> 00:27:50,000
Clothes blocks.

485
00:27:50,000 --> 00:27:54,200
Complaining of reused block.

486
00:27:56,700 --> 00:27:57,300
All right.

487
00:28:01,400 --> 00:28:03,200
Oops, to go back there.

488
00:28:03,200 --> 00:28:04,500
I've got it in the scratch buffer.

489
00:28:05,100 --> 00:28:05,500
Okay?

490
00:28:06,900 --> 00:28:10,800
So hopefully, that'll fix that problem, but I don't know again.

491
00:28:11,000 --> 00:28:13,800
Someone with Ms, V CC 2015.

492
00:28:13,800 --> 00:28:14,600
We'll have to test it.

493
00:28:15,400 --> 00:28:20,500
If we jump over here, to debug you why, it says that info is re

494
00:28:20,500 --> 00:28:21,300
declared.

495
00:28:22,400 --> 00:28:25,000
So apparently, there's something else called info here.

496
00:28:26,200 --> 00:28:27,600
Yes, it's the font info.

497
00:28:28,900 --> 00:28:29,200
So,

498
00:28:29,400 --> 00:28:32,100
Let's take a look at where these things are used in general.

499
00:28:32,900 --> 00:28:36,600
And see, those infos being used in multiple places.

500
00:28:37,200 --> 00:28:39,500
So, I think I'll just call this bitmap info.

501
00:28:47,000 --> 00:28:48,100
And we'll leave it at that.

502
00:28:52,300 --> 00:29:01,500
Let's see, we've got people got CPP it 762 and let's see.

503
00:29:04,400 --> 00:29:06,200
Text buffer.

504
00:29:06,300 --> 00:29:08,900
So the text buffer, previously was this thing?

505
00:29:09,400 --> 00:29:13,200
And then we had the tooltip version, so maybe I'll just call this the

506
00:29:13,200 --> 00:29:14,100
tooltip buffer.

507
00:29:21,200 --> 00:29:22,600
Seems like a reasonable idea.

508
00:29:24,400 --> 00:29:26,300
And let's see.

509
00:29:27,100 --> 00:29:29,500
We have handmade sort.

510
00:29:33,200 --> 00:29:33,600
Deckard.

511
00:29:33,600 --> 00:29:34,900
Can't hide switching parameter.

512
00:29:34,900 --> 00:29:37,000
Oh, that was just because it got included again.

513
00:29:37,000 --> 00:29:37,900
So we've already fixed.

514
00:29:37,900 --> 00:29:38,400
That one.

515
00:29:40,400 --> 00:29:41,600
Opengl

516
00:29:44,200 --> 00:29:46,000
Decoration of a price previous.

517
00:29:46,900 --> 00:29:48,300
Oh, you're right, it does.

518
00:29:50,400 --> 00:29:51,400
So let's see.

519
00:29:51,400 --> 00:29:56,100
So I think probably all I would really want to do there is since at is

520
00:29:56,600 --> 00:29:57,500
not used again.

521
00:29:57,500 --> 00:29:59,800
I think I would probably just wrap this up.

522
00:30:00,500 --> 00:30:02,900
In fact, I think I could do this.

523
00:30:03,600 --> 00:30:05,000
If I was so inclined.

524
00:30:08,400 --> 00:30:08,900
Right.

525
00:30:11,200 --> 00:30:13,200
So basically just put that inside the loop.

526
00:30:13,200 --> 00:30:15,300
So that now it's got kind of a

527
00:30:17,600 --> 00:30:22,000
a natural enclosure since that is not used outside and that keeps it

528
00:30:22,000 --> 00:30:23,000
more symmetric with the way.

529
00:30:23,000 --> 00:30:24,100
These are written anyway.

530
00:30:25,000 --> 00:30:32,200
So that seems good and we got a lot of things called entry.

531
00:30:33,100 --> 00:30:35,700
So we must have used entry up here.

532
00:30:35,700 --> 00:30:36,300
I see.

533
00:30:36,300 --> 00:30:39,100
So that's probably the wrong thing.

534
00:30:39,100 --> 00:30:41,900
So this is actually like the offset

535
00:30:42,900 --> 00:30:43,400
Right.

536
00:30:44,800 --> 00:30:46,400
This is actually entry offset.

537
00:30:50,400 --> 00:30:51,300
So let's see.

538
00:30:51,300 --> 00:30:54,200
Is there anywhere else that that's used?

539
00:30:55,600 --> 00:30:56,400
I don't think so.

540
00:30:58,900 --> 00:30:59,400
Nope.

541
00:31:03,900 --> 00:31:04,900
So that's all good.

542
00:31:07,600 --> 00:31:09,400
So, all of those should be fine.

543
00:31:11,200 --> 00:31:14,000
And then we're kind of almost done here, which is nice.

544
00:31:15,800 --> 00:31:20,100
Let's see, we've got X and Y, but those are stepped over here.

545
00:31:21,600 --> 00:31:25,900
So let's see X and Y.

546
00:31:26,900 --> 00:31:30,700
Those x's and y's are used in a bunch of places, some kind of

547
00:31:30,700 --> 00:31:34,900
interested to know what would happen if I was to do like step backs.

548
00:31:37,400 --> 00:31:37,800
Step.

549
00:31:37,800 --> 00:31:38,300
Why?

550
00:31:40,200 --> 00:31:41,100
Or something like that.

551
00:31:49,300 --> 00:31:51,900
All right, so that's here here.

552
00:31:55,600 --> 00:31:56,500
And here.

553
00:31:57,800 --> 00:31:58,500
And here.

554
00:32:03,300 --> 00:32:03,800
Oops.

555
00:32:15,100 --> 00:32:16,900
Seems reasonable.

556
00:32:20,200 --> 00:32:23,100
And while I'm at it, just for completeness in here, I feel like since

557
00:32:23,100 --> 00:32:27,700
these are texture exes, you know, maybe I'd call this something like

558
00:32:27,700 --> 00:32:28,400
that.

559
00:32:31,500 --> 00:32:32,300
Just make it clear.

560
00:32:32,300 --> 00:32:33,400
What it actually was.

561
00:32:42,300 --> 00:32:44,700
That way we don't have x's and y's floating around.

562
00:32:44,700 --> 00:32:47,700
When really there's multiple x's and y's, in that sense.

563
00:32:52,000 --> 00:32:52,800
Seems reasonable.

564
00:32:54,200 --> 00:32:54,700
All right.

565
00:32:58,200 --> 00:32:59,700
So think.

566
00:33:00,000 --> 00:33:02,700
Would be okay, let's take a look at where is 42.

567
00:33:02,800 --> 00:33:03,300
Oops.

568
00:33:06,000 --> 00:33:07,800
So I think I fixed both of those.

569
00:33:07,800 --> 00:33:11,300
I'm not sure though we'll have to get a check again, from somebody

570
00:33:11,300 --> 00:33:11,600
else.

571
00:33:12,300 --> 00:33:15,500
So let's take a look at that one 1520.

572
00:33:17,700 --> 00:33:19,100
And this is the exact same thing.

573
00:33:19,100 --> 00:33:21,900
So this is just I'm going to switch it the same way.

574
00:33:21,900 --> 00:33:24,200
I switched the other one to be entry offset.

575
00:33:26,100 --> 00:33:29,300
It just is just the loop in the regular render instead of the opengl

576
00:33:29,300 --> 00:33:34,300
renderer and that should fix all of these and then we're down to our

577
00:33:34,300 --> 00:33:35,400
very last one.

578
00:33:37,600 --> 00:33:38,100
There we go.

579
00:33:38,100 --> 00:33:39,000
1209.

580
00:33:42,000 --> 00:33:45,400
So, by thread discuss declared again for no apparent reason other than

581
00:33:45,400 --> 00:33:46,200
probably cut and paste.

582
00:33:46,200 --> 00:33:48,100
We don't care about that, we're never using it anyway.

583
00:33:49,100 --> 00:33:49,900
So off we go.

584
00:33:50,700 --> 00:33:57,300
All right, so I think that's all of them that I can think of that were

585
00:33:57,300 --> 00:33:58,300
listed there anyway.

586
00:33:59,400 --> 00:34:01,300
So let's go ahead and take a look at this.

587
00:34:02,100 --> 00:34:03,700
I think we've got all of these.

588
00:34:04,700 --> 00:34:13,400
Let's say, Okay Martin's I think we've changed all these if you want

589
00:34:13,400 --> 00:34:18,400
to test it again and reopen this issue with

590
00:34:23,600 --> 00:34:25,000
New bugs.

591
00:34:26,199 --> 00:34:27,600
If there are any

592
00:34:29,400 --> 00:34:31,900
Guess I should say Ms.

593
00:34:31,900 --> 00:34:39,600
VC 2015, income to abilities about spelling please.

594
00:34:48,699 --> 00:34:50,100
That was some great spelling there.

595
00:34:51,699 --> 00:34:52,199
All right.

596
00:34:59,300 --> 00:35:03,300
So hopefully that will all be done.

597
00:35:03,300 --> 00:35:05,400
I guess I should say changed all these.

598
00:35:07,200 --> 00:35:09,100
In De 355.

599
00:35:12,600 --> 00:35:17,200
Yeah, so hopefully that's that's all good.

600
00:35:17,200 --> 00:35:21,500
I don't know if it is or not because someone with msec, 2015 will have

601
00:35:21,500 --> 00:35:24,300
the test that first and let us know if we actually fix them or if we

602
00:35:24,300 --> 00:35:24,900
broke them.

603
00:35:26,500 --> 00:35:30,300
So now we're down to just a few last things.

604
00:35:30,300 --> 00:35:33,600
Like I said, this one, we fixed but we just have to actually recompile

605
00:35:33,600 --> 00:35:34,300
and test it.

606
00:35:35,700 --> 00:35:36,200
The software.

607
00:35:36,200 --> 00:35:39,900
Renderer, the mouse move in the the GL scissors.

608
00:35:39,900 --> 00:35:41,200
Are the only ones we have left?

609
00:35:41,300 --> 00:35:42,400
Clang compatibility.

610
00:35:42,400 --> 00:35:48,700
If I am not mistaken, we're down to just this, this is the only thing

611
00:35:50,100 --> 00:35:55,200
that we that we have and let me just double-check

612
00:36:11,400 --> 00:36:14,100
Because I feel like no one's ever sent in how we would fix it for

613
00:36:14,100 --> 00:36:17,500
clang, and I don't build on Clan currently because we're only on

614
00:36:17,500 --> 00:36:18,700
windows at the moment.

615
00:36:20,000 --> 00:36:20,500
So,

616
00:36:21,800 --> 00:36:22,200
Yeah.

617
00:36:26,300 --> 00:36:26,800
Okay.

618
00:36:30,000 --> 00:36:32,200
So yeah, so taking a look at that.

619
00:36:32,200 --> 00:36:35,400
Yeah, I think we're, is there a way to mark this, as like waiting.

620
00:36:35,900 --> 00:36:37,300
Like how does this work here?

621
00:36:50,000 --> 00:36:50,600
There we go.

622
00:36:51,900 --> 00:36:55,200
So that way, we kind of know that this one is waiting for somebody to

623
00:36:55,200 --> 00:36:57,200
tell us what Hooves on clang.

624
00:36:57,200 --> 00:36:58,100
He wants figure it out.

625
00:36:58,100 --> 00:36:59,100
They can do that.

626
00:37:00,700 --> 00:37:01,700
These are enhancements.

627
00:37:01,700 --> 00:37:03,000
These are just feature requests.

628
00:37:03,000 --> 00:37:05,900
So now we're just down to these four in this one.

629
00:37:06,300 --> 00:37:10,100
We are waiting on, on finishing the stream.

630
00:37:10,200 --> 00:37:11,800
So we're really just down to these three.

631
00:37:13,100 --> 00:37:15,700
Okay, so let's start with this one because it's kind of interesting

632
00:37:15,700 --> 00:37:19,700
one that I hadn't really thought about since we don't do mouse moves.

633
00:37:21,100 --> 00:37:22,300
Processing in this game.

634
00:37:22,900 --> 00:37:27,100
But basically, what this what this is about is it's sort of a

635
00:37:27,100 --> 00:37:28,400
performance concern.

636
00:37:28,700 --> 00:37:32,200
I don't know that we can actually demonstrate the performance concern

637
00:37:32,200 --> 00:37:32,700
at all.

638
00:37:37,400 --> 00:37:40,100
It's not something that probably would ever cause a problem.

639
00:37:41,800 --> 00:37:44,400
But I felt like it was worth mentioning on the stream because it is

640
00:37:44,400 --> 00:37:48,900
kind of an interesting esoteric property of Windows.

641
00:37:49,400 --> 00:37:52,400
That it seems like we would want to to talk about.

642
00:37:52,400 --> 00:37:55,400
So people are at least aware of it so it seemed like a good

643
00:37:55,400 --> 00:37:56,500
opportunity to do so.

644
00:37:58,300 --> 00:38:06,000
So if we take a look in win32, handmade dot CPP, we can see inside.

645
00:38:06,000 --> 00:38:06,500
There's a

646
00:38:07,800 --> 00:38:09,400
Here it is.

647
00:38:13,500 --> 00:38:16,200
If you kind of cast your mind, back to when we originally doing the

648
00:38:16,200 --> 00:38:18,000
win32 code, you can remember that.

649
00:38:18,000 --> 00:38:23,700
We sort of had this notion that we need to occasionally, pull Windows

650
00:38:23,700 --> 00:38:26,300
to see what events had has put in our message queue.

651
00:38:26,300 --> 00:38:30,600
And of course, Windows is kind of a nightmare as far as message.

652
00:38:30,600 --> 00:38:31,500
Queues are concerned.

653
00:38:33,700 --> 00:38:34,600
It's real bad.

654
00:38:37,800 --> 00:38:38,500
Basically.

655
00:38:43,000 --> 00:38:44,400
if you think about,

656
00:38:45,600 --> 00:38:49,300
How one might want an operating system architected from the standpoint

657
00:38:49,300 --> 00:38:50,500
of a message Cube?

658
00:38:51,900 --> 00:38:53,800
It makes a fair bit of sense right.

659
00:38:54,700 --> 00:38:58,400
I have an application, the application needs to be able to process

660
00:38:58,400 --> 00:38:59,800
things that the operating system

661
00:39:00,700 --> 00:39:04,500
Is notified me about, but the operating system doesn't know how long

662
00:39:04,500 --> 00:39:05,900
it takes me to respond to them.

663
00:39:06,000 --> 00:39:08,800
When I want to respond to them, how to respond to them.

664
00:39:09,300 --> 00:39:11,800
So miss excuse, make a fair bit of sense.

665
00:39:12,300 --> 00:39:16,900
A message queue is basically a thing that substitutes effectively for

666
00:39:16,900 --> 00:39:20,300
something like a call back, or a function call that the operations

667
00:39:20,300 --> 00:39:21,200
might want to make.

668
00:39:21,300 --> 00:39:24,000
But instead of the operating system having to make it right away, it

669
00:39:24,000 --> 00:39:25,700
can instead just shove it into this q.

670
00:39:25,800 --> 00:39:30,300
And that way the application as it's running, could feel the thing.

671
00:39:30,500 --> 00:39:31,800
McHugh when it can.

672
00:39:32,000 --> 00:39:33,900
And if it gets something from the queue that it can't feels right

673
00:39:33,900 --> 00:39:36,300
away, you could always like prostate a little bit later or do

674
00:39:36,300 --> 00:39:36,800
whatever.

675
00:39:36,800 --> 00:39:38,100
It's very flexible and nice.

676
00:39:41,900 --> 00:39:43,900
So message queues are actually a pretty nice thing.

677
00:39:44,800 --> 00:39:50,000
They make a lot of sense in inter, inter code design right in?

678
00:39:50,000 --> 00:39:52,800
So you can again you can just think of it as any time you would have

679
00:39:52,800 --> 00:39:54,100
directly called a function or something.

680
00:39:54,100 --> 00:39:56,700
Instead, you just make messages that encapsulate what the function

681
00:39:56,700 --> 00:39:59,600
call was and then the other person on their side receives it.

682
00:39:59,900 --> 00:40:01,300
Why do you do this again?

683
00:40:01,500 --> 00:40:04,200
Because if you're trying to write two things that are completely

684
00:40:04,200 --> 00:40:07,800
separate and you don't know anything about either of them, it makes

685
00:40:07,800 --> 00:40:11,600
sense to allow them to be processed in a more asynchronous way.

686
00:40:11,800 --> 00:40:13,500
Having some kind of a direct binding.

687
00:40:13,800 --> 00:40:16,300
You could have done direct binding, like, with dll linkage and stuff,

688
00:40:16,300 --> 00:40:19,000
it could have been the operating system, just calls you directly, but,

689
00:40:19,300 --> 00:40:20,800
but cues are a lot more flexible.

690
00:40:20,800 --> 00:40:24,200
And so, you can see why you might want that sort of thing to be the

691
00:40:24,200 --> 00:40:26,700
way that inter-process communication is happening.

692
00:40:26,900 --> 00:40:29,000
Rather, again, the direct function calls all the direct function.

693
00:40:29,000 --> 00:40:30,300
Calls also happened as well, right?

694
00:40:31,600 --> 00:40:34,300
So, so that's the the nice part about it.

695
00:40:34,300 --> 00:40:36,900
The bad part about it is that the way that Windows ended up going

696
00:40:36,900 --> 00:40:39,600
about, this was in a very haphazard fashion, and this is probably

697
00:40:39,600 --> 00:40:42,300
because, you know, Windows is a, is a architecture.

698
00:40:42,300 --> 00:40:47,800
That's never really had sort of a high-level architect, you know,

699
00:40:47,800 --> 00:40:51,600
looking at it and trying to force it towards a well working system.

700
00:40:52,000 --> 00:40:56,400
There's definitely been times like, when the, when the the Cutler

701
00:40:56,400 --> 00:40:59,600
folks and stuff came and did the first version of Windows and T where

702
00:40:59,600 --> 00:41:01,300
there were people who kind of like try

703
00:41:01,500 --> 00:41:02,500
To do some good stuff with it.

704
00:41:02,500 --> 00:41:05,000
It's not that there haven't been people who knew what they were doing

705
00:41:05,400 --> 00:41:06,800
touched it at some point.

706
00:41:06,800 --> 00:41:09,900
But most of the people who have added stuff for made modifications,

707
00:41:09,900 --> 00:41:12,600
the win32 API weren't really system architecture.

708
00:41:12,600 --> 00:41:15,500
Kinds of people who really thought these kind of things through very

709
00:41:15,500 --> 00:41:18,400
much and mostly the way that things tend to get added as far as I

710
00:41:18,400 --> 00:41:23,100
could tell, it was in a very haphazard fashion with no real sort of

711
00:41:23,100 --> 00:41:27,400
overarching philosophy behind it and not a lot of testing and not a

712
00:41:27,400 --> 00:41:31,200
lot of end-user sort of clarity just

713
00:41:31,400 --> 00:41:33,600
It's just kind of like a big old mess in there.

714
00:41:34,200 --> 00:41:37,200
So as a result, the windows message queue doesn't really operate.

715
00:41:37,200 --> 00:41:38,900
Anything like an actual message queue.

716
00:41:38,900 --> 00:41:41,800
So, all of the good things that you might have wanted from the fact

717
00:41:41,800 --> 00:41:44,200
that there does appear to be this message queue and windows.

718
00:41:44,300 --> 00:41:46,400
They're actually all not there.

719
00:41:47,100 --> 00:41:49,100
So it just ends up being a pain in the butt.

720
00:41:50,700 --> 00:41:54,600
For example, not all messages in the message, queue will actually go

721
00:41:54,600 --> 00:41:55,400
through the message queue.

722
00:41:55,400 --> 00:41:58,200
Some of them short circuit and try to call their Handler directly.

723
00:41:58,300 --> 00:41:59,400
So right there,

724
00:42:00,000 --> 00:42:03,100
Whole point of the asynchronous cueing behavior is out the window,

725
00:42:03,100 --> 00:42:06,100
it's no longer, their Windows, actually just calls, you directly back

726
00:42:06,100 --> 00:42:08,300
at, like, your window process or things like that.

727
00:42:08,300 --> 00:42:11,200
I'm your window procedure and stuff instead of going through the

728
00:42:11,200 --> 00:42:12,300
queue, like, it's supposed to.

729
00:42:12,300 --> 00:42:15,300
So this nice concept of a queue out the window already.

730
00:42:15,700 --> 00:42:17,700
Second thing, it's threaded wrong.

731
00:42:18,400 --> 00:42:21,500
The message queue and windows can only be processed by the thread that

732
00:42:21,500 --> 00:42:23,300
created that message queue in the first place.

733
00:42:24,200 --> 00:42:28,800
And so, you end up not having one of the central reasons for having a

734
00:42:28,800 --> 00:42:29,900
queue in an operating system.

735
00:42:30,000 --> 00:42:34,500
Mm, which is to allow multiple threads to process things coming in on

736
00:42:34,500 --> 00:42:39,400
the queue in a sane way that is out the window as well, because only

737
00:42:39,400 --> 00:42:42,300
one thread can ever look at the messages in the queue.

738
00:42:46,600 --> 00:42:47,800
So that's out the window.

739
00:42:49,200 --> 00:42:52,900
And then finally, the thing that's also out the window like basically

740
00:42:52,900 --> 00:42:55,900
if you took everything that there was about a cue and you threw them

741
00:42:55,900 --> 00:42:58,100
out, one by one Windows actually has done that.

742
00:43:02,600 --> 00:43:07,400
So, the last thing that we have in a queue is the concept that things

743
00:43:07,400 --> 00:43:08,500
go into the queue.

744
00:43:09,700 --> 00:43:11,700
But that's not actually what happens in Windows.

745
00:43:12,000 --> 00:43:15,700
So what happens in Windows instead, is that sometimes things that go

746
00:43:15,700 --> 00:43:20,200
into the queue actually go into the queue, but other times

747
00:43:22,200 --> 00:43:24,700
Things that look like they should be going into the queue.

748
00:43:25,000 --> 00:43:27,400
Actually don't go into the queue instead.

749
00:43:27,400 --> 00:43:34,400
They get generated spontaneously by the act of looking at the Q sort

750
00:43:34,400 --> 00:43:35,600
of like a Quantum Q.

751
00:43:35,600 --> 00:43:36,200
If you will

752
00:43:38,200 --> 00:43:42,700
And so what happens here is when you call Peak message, right?

753
00:43:43,700 --> 00:43:51,000
Peak message as a call is saying hey go look at the queue and give me

754
00:43:51,000 --> 00:43:51,700
back a message.

755
00:43:51,700 --> 00:43:54,000
If there is one if there isn't one.

756
00:43:54,100 --> 00:43:55,400
Just give me back nothing.

757
00:43:55,400 --> 00:43:57,800
So that I know that there wasn't one right.

758
00:43:59,700 --> 00:44:01,000
This makes a lot of sense for games.

759
00:44:01,000 --> 00:44:04,900
Because in games, what we want to do is process all the messages that

760
00:44:04,900 --> 00:44:05,900
are in the windows q.

761
00:44:06,400 --> 00:44:08,900
But once we press on the message, we don't want to like sit there and

762
00:44:08,900 --> 00:44:11,500
wait for more messages, because we've got rendering to go.

763
00:44:11,500 --> 00:44:14,200
Do we've got sound to go, do we've got stuff to do.

764
00:44:14,700 --> 00:44:17,900
So we only want to get the messages that are actually in our queue.

765
00:44:19,200 --> 00:44:23,700
And it looks like from a far enough away perspective, that that's

766
00:44:23,700 --> 00:44:24,900
what's happening, right?

767
00:44:24,900 --> 00:44:28,800
We call this peak message function and, you know, we get back to

768
00:44:28,800 --> 00:44:31,000
things of the queue and then eventually we stopped getting things back

769
00:44:31,000 --> 00:44:33,700
and we figure, we've processed all the things from that.

770
00:44:33,700 --> 00:44:36,500
We knows how to give us but that's not what's actually going on under

771
00:44:36,500 --> 00:44:37,700
the hood, under the hood.

772
00:44:37,700 --> 00:44:38,500
What's going on?

773
00:44:39,000 --> 00:44:42,200
Is that Peak message will do that first?

774
00:44:42,200 --> 00:44:46,300
So, the first few things that we'll do when we call it is getting us

775
00:44:46,300 --> 00:44:48,900
the message from the windows message queue and

776
00:44:49,000 --> 00:44:50,200
Giving it back to us, right?

777
00:44:50,200 --> 00:44:52,800
So it's taking thing off of Q, giving it back to us taking it off a q,

778
00:44:52,800 --> 00:44:53,500
giving it back to us.

779
00:44:54,100 --> 00:44:56,400
But eventually it will run out of things to give it back to us.

780
00:44:56,400 --> 00:44:59,900
And at that point in our mental model, what we

781
00:45:00,000 --> 00:45:03,500
I think is happening, is that God message will return false.

782
00:45:03,500 --> 00:45:04,400
At that point, right?

783
00:45:04,400 --> 00:45:06,200
It will, it will, this will become false.

784
00:45:06,200 --> 00:45:09,300
So Peak message will, you know, our gottman's Peak message will return

785
00:45:09,300 --> 00:45:10,300
false and we'll go.

786
00:45:10,300 --> 00:45:13,300
Okay, it's out of messages but that's not what it actually does.

787
00:45:13,300 --> 00:45:15,900
Internally instead, what it does internally as goes, oh

788
00:45:17,100 --> 00:45:21,600
There's nothing left in the queue but I got a call to Peak message.

789
00:45:22,200 --> 00:45:28,800
So let me look and see if there are any messages of a type that I

790
00:45:28,800 --> 00:45:35,000
could generate right now to fill this queue so that it has something

791
00:45:35,000 --> 00:45:36,900
to get back, right?

792
00:45:38,800 --> 00:45:42,500
And those messages that fall into that category and I don't know what

793
00:45:42,500 --> 00:45:43,800
all of them are offhand.

794
00:45:43,800 --> 00:45:48,400
I want to see if there's a list but WM paint and WM mousemove are two

795
00:45:48,400 --> 00:45:48,900
of them.

796
00:45:49,500 --> 00:45:56,200
So if your window could be repainted or if the mouse had moved at all

797
00:45:57,500 --> 00:46:03,400
in between the time when you last got a mass move message and now Peak

798
00:46:03,400 --> 00:46:05,700
message will spontaneously generate.

799
00:46:05,700 --> 00:46:07,900
Those right now, right?

800
00:46:07,900 --> 00:46:08,700
At this point,

801
00:46:09,700 --> 00:46:10,400
Does that make sense?

802
00:46:16,200 --> 00:46:16,700
So,

803
00:46:17,800 --> 00:46:23,300
As you might imagine in a theoretical scenario and I don't know if

804
00:46:23,300 --> 00:46:26,800
this is actually fully theoretically possible because I've never

805
00:46:26,800 --> 00:46:30,900
actually tried to get it to actually happen and I'm not sure you would

806
00:46:30,900 --> 00:46:33,800
have to probably write your own Mouse driver to make it happen.

807
00:46:33,800 --> 00:46:35,800
I don't know and it might not really be possible.

808
00:46:36,600 --> 00:46:37,500
I couldn't tell you.

809
00:46:39,100 --> 00:46:43,800
But in theory, I believe you might be able to get yourself into a

810
00:46:43,800 --> 00:46:48,900
situation where mousemove and paint messages were coming in so quickly

811
00:46:49,300 --> 00:46:53,500
and you are processing them, slowly enough that you just stayed in

812
00:46:53,500 --> 00:46:55,200
this Loop forever, right?

813
00:46:55,900 --> 00:47:00,300
Like I don't really know if that's possible but just the vague kind of

814
00:47:00,300 --> 00:47:02,500
idea of it is sort of possible, Right?

815
00:47:02,500 --> 00:47:06,300
Like meaning because windows can generate WM paint and WM mousemove

816
00:47:06,300 --> 00:47:08,500
messages in response to the movement of the mouse.

817
00:47:09,300 --> 00:47:14,100
And the painting all the time, right?

818
00:47:14,200 --> 00:47:18,200
As often as it wants to, whenever there's no messages in the queue, in

819
00:47:18,200 --> 00:47:21,300
theory, every time we called Peak message, it could just return a

820
00:47:21,300 --> 00:47:23,500
mouse move forever, right?

821
00:47:25,800 --> 00:47:29,200
So the question becomes, is there some way that we can structure this

822
00:47:29,200 --> 00:47:31,800
a little more carefully so that we don't have that happen?

823
00:47:34,100 --> 00:47:34,600
Right.

824
00:47:37,000 --> 00:47:41,100
now, adding insult to injury is the fact that if you look

825
00:47:43,600 --> 00:47:45,500
We never used of your mouse move.

826
00:47:46,100 --> 00:47:46,900
See really?

827
00:47:46,900 --> 00:47:50,100
We never use WM paint right?

828
00:47:51,100 --> 00:47:54,100
Like all we have is like a dolt as like a dummy Handler for it.

829
00:47:55,600 --> 00:47:57,200
We don't care about those at all.

830
00:47:58,300 --> 00:47:59,800
We do our own Mouse polling.

831
00:48:00,200 --> 00:48:02,200
And we do our own paint.

832
00:48:03,700 --> 00:48:08,300
So really we just don't care about these, we literally do not care.

833
00:48:09,500 --> 00:48:10,900
That they're happening at all.

834
00:48:12,100 --> 00:48:14,200
And so one thing we could do

835
00:48:18,200 --> 00:48:19,600
Is in our Peak message.

836
00:48:20,600 --> 00:48:24,900
One of the things that Peak message allows us to do is pigeonhole what

837
00:48:24,900 --> 00:48:28,000
functions we actually care about getting.

838
00:48:28,500 --> 00:48:30,400
And so if you take a look at Peak message,

839
00:48:33,600 --> 00:48:34,300
Due to do.

840
00:48:34,300 --> 00:48:34,900
There we go.

841
00:48:36,500 --> 00:48:41,500
You can see that it allows us specify a range where we can say, what

842
00:48:41,500 --> 00:48:44,400
the like, minimum, and maximum messages that we might want to get,

843
00:48:44,700 --> 00:48:45,300
right?

844
00:48:46,500 --> 00:48:51,200
And so, what we could do here is like, we could just say, hey, let's

845
00:48:51,200 --> 00:48:54,600
skip the, the ones that we don't actually want, right?

846
00:48:56,800 --> 00:48:58,900
And so you could imagine something like this.

847
00:49:04,600 --> 00:49:05,800
We're in place of these.

848
00:49:05,800 --> 00:49:09,300
We said, okay, filter Min filter, Max, right?

849
00:49:11,100 --> 00:49:12,300
Which are these these two here.

850
00:49:12,300 --> 00:49:14,400
This is the window handle which we don't care about, because we're

851
00:49:14,400 --> 00:49:19,800
getting messages from any window we could say from zero to like, you

852
00:49:19,800 --> 00:49:23,200
know, WM whatever, minus 1.

853
00:49:23,400 --> 00:49:24,700
So, we whatever this one.

854
00:49:24,700 --> 00:49:27,500
This first one is whether it's paint or Mouse move, right?

855
00:49:29,000 --> 00:49:30,700
And then we could say from that one,

856
00:49:33,300 --> 00:49:35,500
To the last one, right?

857
00:49:35,600 --> 00:49:38,700
And I don't know, I don't know if we can pass a zero for that one.

858
00:49:39,600 --> 00:49:40,400
Let me see here.

859
00:49:45,800 --> 00:49:49,000
I don't know if we can pass a zero so we may have to do like the

860
00:49:49,000 --> 00:49:51,400
maximum possible message value.

861
00:49:51,900 --> 00:49:53,100
So we could just do

862
00:49:55,800 --> 00:49:57,200
Write something like that.

863
00:50:01,700 --> 00:50:02,200
And we'll see.

864
00:50:03,000 --> 00:50:05,500
So, what I want to do here is I just want to figure out and I don't

865
00:50:05,500 --> 00:50:09,000
know if you remember this trick that I did before, I have this dummy

866
00:50:09,000 --> 00:50:12,700
win32 project, we created that's a nice way to quickly search the

867
00:50:12,700 --> 00:50:13,500
documentation.

868
00:50:13,500 --> 00:50:19,300
So we don't have to do it ourselves if I want to, I could just say,

869
00:50:19,300 --> 00:50:23,400
oh, I know that WM mousemove and WM paint are the two things that I

870
00:50:23,400 --> 00:50:25,000
really don't want you to be doing.

871
00:50:25,000 --> 00:50:25,900
I don't care about them.

872
00:50:25,900 --> 00:50:27,200
So, stop it, right?

873
00:50:28,000 --> 00:50:30,000
What I can do is go and see what they are.

874
00:50:30,000 --> 00:50:31,300
So, WM mousemove is

875
00:50:31,400 --> 00:50:33,400
Oh X200, right?

876
00:50:34,700 --> 00:50:40,800
And then if I go back to here, WM paint is 0xf.

877
00:50:41,500 --> 00:50:43,300
So paint clearly comes first.

878
00:50:43,300 --> 00:50:46,200
So what I could do is say hey give me everything.

879
00:50:48,800 --> 00:50:50,200
Up to WM paint.

880
00:50:50,800 --> 00:50:59,400
And then here I want you to do just skip over it and go go to to the

881
00:50:59,400 --> 00:50:59,800
rest of them.

882
00:51:00,600 --> 00:51:02,100
That would skip over paint.

883
00:51:02,700 --> 00:51:05,800
And then again, I probably have to do one more here because then I

884
00:51:05,800 --> 00:51:07,300
want to skip over one more.

885
00:51:07,500 --> 00:51:07,900
I would say.

886
00:51:07,900 --> 00:51:10,100
All right, WM mousemove minus 1.

887
00:51:13,200 --> 00:51:16,200
WM mousemove plus 1.

888
00:51:17,200 --> 00:51:20,800
And now, we've basically notched out just those values, right?

889
00:51:21,000 --> 00:51:24,300
So, basically saying, like, Okay, we're skipping WM paint because

890
00:51:24,300 --> 00:51:28,900
we're going right up to it and then we're going skipping it and going,

891
00:51:28,900 --> 00:51:29,200
right?

892
00:51:29,200 --> 00:51:30,100
One after it.

893
00:51:30,100 --> 00:51:33,600
And then we're going right up to mousemove, skipping it and going one

894
00:51:33,600 --> 00:51:34,400
after it, right?

895
00:51:35,300 --> 00:51:36,900
And so this would be UPS.

896
00:51:37,900 --> 00:51:39,600
Switch back to my old project.

897
00:51:44,300 --> 00:51:46,100
So this would be what that looks like, right?

898
00:51:47,000 --> 00:51:49,400
And now we're not pressing those messages.

899
00:51:49,500 --> 00:51:52,400
So now you know, our game is running and we're never getting a mouse

900
00:51:52,400 --> 00:51:56,400
move or a WM paint, which is sort of just saying like, hey, I don't

901
00:51:56,400 --> 00:51:57,700
care to ever receive these.

902
00:51:57,700 --> 00:51:59,000
We don't need to process these.

903
00:51:59,000 --> 00:52:00,900
So I'm never going to actually look at them.

904
00:52:04,000 --> 00:52:05,700
And so that's an interesting idea.

905
00:52:05,700 --> 00:52:08,200
Like I said, I don't really know how necessary that is, because I

906
00:52:08,200 --> 00:52:10,600
don't know that we could ever really get in a situation where that was

907
00:52:10,600 --> 00:52:12,000
causing us any real problems.

908
00:52:13,800 --> 00:52:14,400
but,

909
00:52:17,600 --> 00:52:18,700
It's kind of worth noting.

910
00:52:23,600 --> 00:52:24,600
It's kind of worth noting.

911
00:52:48,200 --> 00:52:49,500
And today is day.

912
00:52:49,500 --> 00:52:50,300
355.

913
00:52:50,300 --> 00:52:50,600
Yeah.

914
00:52:54,900 --> 00:52:55,400
So yeah.

915
00:52:55,400 --> 00:53:00,900
So again not really sure that this matters particularly much but yeah.

916
00:53:26,900 --> 00:53:30,000
And we'll let people test out a little bit to see whether that causes

917
00:53:30,000 --> 00:53:32,600
any additional problems but hopefully, that should be right.

918
00:53:32,600 --> 00:53:34,000
So we're basically just looking said, okay?

919
00:53:34,000 --> 00:53:38,400
We're going to do got message going to look to see if anything up to W

920
00:53:38,400 --> 00:53:41,300
and paint comes in if nothing came in.

921
00:53:41,300 --> 00:53:44,900
Then we'll try again to get something from paint to Mouse move.

922
00:53:45,000 --> 00:53:49,200
If that didn't come in either then we'll we'll try one more time.

923
00:53:50,700 --> 00:53:51,100
Right.

924
00:53:52,500 --> 00:53:53,000
That's it.

925
00:53:54,500 --> 00:53:56,600
Okay, so we're getting down to it here.

926
00:53:57,500 --> 00:53:58,300
Let's see.

927
00:54:00,700 --> 00:54:02,000
We've got this done.

928
00:54:02,100 --> 00:54:04,500
So we've got these two left to do.

929
00:54:05,600 --> 00:54:08,400
Let's take a look at push, clip, rect and GL scissor.

930
00:54:09,800 --> 00:54:12,400
I think I know what's being talked about here, but I don't quite

931
00:54:12,400 --> 00:54:14,400
remember the exact thing.

932
00:54:14,400 --> 00:54:15,200
So let me just reread it.

933
00:54:15,200 --> 00:54:18,500
Again, the bounds for push, cliprect are in World coordinates, and

934
00:54:18,500 --> 00:54:20,300
these are passed directly to jail scissor.

935
00:54:20,300 --> 00:54:23,000
These should be converted to screen space first.

936
00:54:23,200 --> 00:54:25,800
The effect of this, but can be seen the debug profile if running the

937
00:54:25,800 --> 00:54:28,100
game at a lower resolution.

938
00:54:30,100 --> 00:54:34,500
Okay, so this is just a case of us not actually translating.

939
00:54:34,900 --> 00:54:42,700
Our push cliprect coordinates first to the screen resolution, so since

940
00:54:43,000 --> 00:54:48,600
Kim saying that we could reproduce this bug easily by switching to a

941
00:54:48,600 --> 00:54:49,400
lower resolution.

942
00:54:49,600 --> 00:54:52,300
Let's go ahead and head and switch your lower solution because the

943
00:54:52,300 --> 00:54:55,300
best way to fix something, as if you can see it break, right?

944
00:54:55,900 --> 00:54:58,800
And right now we can't see it break so we could try to fix this, but

945
00:54:58,800 --> 00:54:59,900
we wouldn't really know if we

946
00:55:00,000 --> 00:55:00,600
It properly.

947
00:55:01,100 --> 00:55:04,800
So I'm going to go ahead and comment that out and see if I can observe

948
00:55:04,800 --> 00:55:08,000
the bug at practice and that way we'll fix it.

949
00:55:08,000 --> 00:55:12,200
So that okay, so right off the bat, we're in bad shape, right?

950
00:55:13,800 --> 00:55:17,000
Because that that's clipped wrong to begin with.

951
00:55:17,400 --> 00:55:22,800
So let's see if that is in fact, clipping or related or not, because I

952
00:55:22,800 --> 00:55:25,600
guess we don't really technically know that it is.

953
00:55:31,000 --> 00:55:32,400
In fact, I'm kind of curious.

954
00:55:34,000 --> 00:55:35,400
That actually looks like.

955
00:55:36,800 --> 00:55:40,300
It's not scaling the screen in the first place.

956
00:55:47,000 --> 00:55:50,700
This looks like we might have bugs other than that in here, honestly.

957
00:55:56,600 --> 00:56:00,000
and also I don't know why we're still calling this win32, resize dib

958
00:56:00,000 --> 00:56:01,000
section since

959
00:56:15,400 --> 00:56:19,200
Yeah, since that's not exactly what it, what it does exclusively now.

960
00:56:19,400 --> 00:56:22,100
But anyway, point being

961
00:56:23,700 --> 00:56:25,100
Let's try and fix all that.

962
00:56:32,200 --> 00:56:32,600
All right.

963
00:56:36,600 --> 00:56:37,700
I don't really like this thing.

964
00:56:37,700 --> 00:56:39,100
I'm eating, I'll be honest with you.

965
00:56:41,100 --> 00:56:42,400
I really like pound cake.

966
00:56:45,800 --> 00:56:46,700
Like those dents.

967
00:56:48,500 --> 00:56:50,600
You know, butter cake sorts of things.

968
00:56:54,100 --> 00:56:55,100
But for some reason,

969
00:56:56,300 --> 00:56:57,800
They always put like lemon in them.

970
00:56:57,900 --> 00:56:59,100
They're always lemon pound cake.

971
00:57:00,000 --> 00:57:01,800
I don't like lemon flavor.

972
00:57:01,800 --> 00:57:02,300
Like that.

973
00:57:02,600 --> 00:57:02,800
All right.

974
00:57:02,800 --> 00:57:04,400
I like, lemons, just fine.

975
00:57:04,700 --> 00:57:05,900
I just don't like them in desert.

976
00:57:07,500 --> 00:57:10,300
So it's this weird thing of like you can't ever get a pound cake

977
00:57:10,300 --> 00:57:12,300
without the lemon in it anymore for some reason.

978
00:57:13,700 --> 00:57:14,500
And that's a lemon one.

979
00:57:17,200 --> 00:57:17,700
I don't know.

980
00:57:19,500 --> 00:57:21,000
Sometimes, I'm just happy to have food.

981
00:57:21,000 --> 00:57:23,600
That's probably how it should be, right?

982
00:57:24,400 --> 00:57:27,400
I mean, you know, if you can have food, you should be happy.

983
00:57:27,600 --> 00:57:31,000
And so I was kind of just happy to have a pound cake at all.

984
00:57:34,000 --> 00:57:34,600
And there you go.

985
00:57:34,900 --> 00:57:35,400
Anyway.

986
00:57:37,800 --> 00:57:42,800
Human beings especially in the developed World.

987
00:57:43,400 --> 00:57:47,800
Probably don't have very much real like depreciation for.

988
00:57:49,100 --> 00:57:53,200
The incredible scarcity that food used to come at.

989
00:57:53,500 --> 00:57:56,100
I mean, it used to pretty much dictate everything that Society did was

990
00:57:56,100 --> 00:57:59,200
like, how you were going to get food and nowadays, there's whole

991
00:57:59,200 --> 00:58:04,500
portions of the globe somehow, Seattle, obviously, being one of them

992
00:58:04,800 --> 00:58:06,600
where they just have food like everywhere.

993
00:58:08,900 --> 00:58:12,500
And you can still be in a situation that like, you know, capitalism

994
00:58:12,500 --> 00:58:16,000
dictates that you don't get to have the food, which is a questionable

995
00:58:16,000 --> 00:58:17,000
practice to begin with.

996
00:58:17,000 --> 00:58:21,800
But the bottom line is that there is plenty of food and that wasn't

997
00:58:21,800 --> 00:58:22,500
really the case.

998
00:58:22,500 --> 00:58:23,600
Even as as

999
00:58:26,200 --> 00:58:32,100
Even as recently as like a hundred years ago or so, you know, major

1000
00:58:32,100 --> 00:58:35,500
developed nations were still not sure how they were going to feed

1001
00:58:35,500 --> 00:58:38,800
their populace has, you know, it's like it wasn't just a question of

1002
00:58:38,800 --> 00:58:42,100
like you know, how do you feed everybody?

1003
00:58:42,100 --> 00:58:44,100
It was the question of, how do you feed people at all?

1004
00:58:45,900 --> 00:58:46,400
and so,

1005
00:58:48,100 --> 00:58:48,400
Yeah.

1006
00:58:48,500 --> 00:58:50,100
Just kind of an interesting perspective.

1007
00:58:50,800 --> 00:58:54,200
You know, we're living at the sort of point in history where like you

1008
00:58:54,200 --> 00:58:57,200
can think of it as there are places on the globe which have an

1009
00:58:57,200 --> 00:58:58,200
abundance of food.

1010
00:58:59,600 --> 00:59:03,500
And that was not, that was not true, really?

1011
00:59:03,800 --> 00:59:09,100
I mean, except in very small circumstances a long time ago, and so

1012
00:59:09,100 --> 00:59:10,000
it's pretty weird.

1013
00:59:10,000 --> 00:59:11,600
I don't know why I'm getting off on this tangent.

1014
00:59:11,600 --> 00:59:16,700
Unlike Food Supplies and feeling lucky that you have food even in a

1015
00:59:16,700 --> 00:59:19,800
developed Nation, because it seems like kind of ridiculous this point,

1016
00:59:19,800 --> 00:59:21,100
but it's true.

1017
00:59:21,200 --> 00:59:22,000
That's all I can say.

1018
00:59:22,000 --> 00:59:25,800
It's true even in a developed Nation, even for like, you know,

1019
00:59:28,100 --> 00:59:31,600
Places like you know, Seattle or something.

1020
00:59:31,600 --> 00:59:35,100
The concept that you could feed as many people as are in Seattle right

1021
00:59:35,100 --> 00:59:39,400
now who are getting fed every day with like all this food is totally

1022
00:59:39,400 --> 00:59:40,100
ridiculous.

1023
00:59:40,200 --> 00:59:46,000
Like that's you know that's a it's a very strange time that we live in

1024
00:59:46,000 --> 00:59:47,600
that that sort of thing can happen at all.

1025
00:59:48,400 --> 00:59:54,500
Anyway, moving on, we have to figure out how to deal with this scaling

1026
00:59:54,500 --> 00:59:55,900
stuff here at the moment.

1027
00:59:56,000 --> 00:59:57,800
And I just want to go into figuring

1028
00:59:57,900 --> 00:59:59,800
her out when we initialize opened.

1029
01:00:02,000 --> 01:00:06,800
One of the things that I don't really know at this point is how we're

1030
01:00:06,800 --> 01:00:07,400
setting that up.

1031
01:00:07,400 --> 01:00:08,000
Exactly.

1032
01:00:11,200 --> 01:00:17,800
So it looks like we're passing in when we do buying frame buffer, you

1033
01:00:17,800 --> 01:00:18,200
know what?

1034
01:00:18,300 --> 01:00:20,900
Let me check one thing real quick first as well.

1035
01:00:21,600 --> 01:00:24,800
I want to use the software render for a second here.

1036
01:00:25,600 --> 01:00:26,900
So let's see global suffering.

1037
01:00:26,900 --> 01:00:30,100
I want to, I want to see how much of this is an opengl problem and how

1038
01:00:30,100 --> 01:00:31,200
much of this isn't?

1039
01:00:31,700 --> 01:00:32,500
Let's take a look here.

1040
01:00:33,800 --> 01:00:37,000
So here's our software renderer and so you can see our software

1041
01:00:37,000 --> 01:00:38,800
renderer is still working correctly.

1042
01:00:40,300 --> 01:00:40,800
So

1043
01:00:41,100 --> 01:00:48,600
it's like this is largely a problem I guess with, with our Hardware

1044
01:00:48,600 --> 01:00:49,100
renderer

1045
01:00:50,600 --> 01:00:51,100
Yeah.

1046
01:00:52,800 --> 01:00:56,800
so it looks like we want to fix that so that our Hardware renderer

1047
01:00:58,400 --> 01:01:00,800
Is doing things correctly, because our software render, it does appear

1048
01:01:00,800 --> 01:01:01,200
to be.

1049
01:01:02,400 --> 01:01:04,600
So, let's take a look at that for a second here.

1050
01:01:05,700 --> 01:01:07,000
And see why that's happening.

1051
01:01:08,500 --> 01:01:13,600
So when we do cliprect pushing, we've got, that's let's see that's

1052
01:01:13,600 --> 01:01:16,200
down here in our render Loop.

1053
01:01:18,800 --> 01:01:22,100
Offset offset.

1054
01:01:23,700 --> 01:01:27,400
So when we're pulling stuff off of our render queue here, well, we're

1055
01:01:27,400 --> 01:01:29,900
not like pulling stuff off as we're walking our render queue.

1056
01:01:31,000 --> 01:01:33,700
We get into this circumstance where we take a look to see whether we

1057
01:01:33,700 --> 01:01:35,300
need to push a clip rect.

1058
01:01:35,500 --> 01:01:37,100
And if we do, we do push the clip.

1059
01:01:37,100 --> 01:01:37,800
Rect right.

1060
01:01:38,800 --> 01:01:42,800
And so you can see here like the code, on the GL, side is a little

1061
01:01:42,800 --> 01:01:44,900
more complicated and the reason it's a little more complicated because

1062
01:01:44,900 --> 01:01:46,700
it needs to use those Dynamic frame buffers.

1063
01:01:46,700 --> 01:01:47,400
Whereas of course,

1064
01:01:48,700 --> 01:01:49,200
In the software.

1065
01:01:49,200 --> 01:01:51,600
Renderer, we kind of have more control over that sort of stuff so we

1066
01:01:51,600 --> 01:01:52,800
don't have to worry about it as much.

1067
01:01:57,000 --> 01:02:01,700
We don't have to prepare resources and junk like that we just set a

1068
01:02:01,700 --> 01:02:02,500
pointer and go.

1069
01:02:02,500 --> 01:02:06,900
Wouldn't that be nice someday when we have programmable gpus someday?

1070
01:02:09,500 --> 01:02:10,400
Assuming that day ever comes.

1071
01:02:10,600 --> 01:02:11,100
Anyway.

1072
01:02:11,500 --> 01:02:15,700
So in here in when we're dealing with the opengl version you can kind

1073
01:02:15,700 --> 01:02:16,700
of see what's happening here.

1074
01:02:16,700 --> 01:02:19,500
We've got the opengl by and frame buffer stuff, which is going to go

1075
01:02:19,500 --> 01:02:21,600
ahead and do sort of the same thing we're doing here.

1076
01:02:22,400 --> 01:02:27,100
Presumably the intersect operation still occurs, does it still occur?

1077
01:02:28,600 --> 01:02:31,600
We don't have a base cliprect I guess so we don't have to do that now.

1078
01:02:31,600 --> 01:02:32,800
I think about because it's not trunk run.

1079
01:02:32,800 --> 01:02:35,800
Again, this is for the tile to rendering and we don't have to do that

1080
01:02:35,800 --> 01:02:36,100
here.

1081
01:02:36,500 --> 01:02:37,800
So we're just looking at the G else is

1082
01:02:38,000 --> 01:02:38,800
your call.

1083
01:02:40,300 --> 01:02:41,500
Which is this part right here.

1084
01:02:42,200 --> 01:02:47,400
Now, the GL scissor part I guess is essentially just happening with

1085
01:02:47,400 --> 01:02:50,900
the clip rect bit here.

1086
01:02:52,000 --> 01:02:54,400
So I'm curious.

1087
01:02:55,900 --> 01:02:58,000
I'm curious to know.

1088
01:03:03,300 --> 01:03:06,800
Why that one is working in this case.

1089
01:03:09,100 --> 01:03:10,100
The other one isn't this?

1090
01:03:10,100 --> 01:03:11,600
Must be a separate bug.

1091
01:03:11,600 --> 01:03:12,300
Let's see.

1092
01:03:12,300 --> 01:03:13,200
Hold on a second.

1093
01:03:14,000 --> 01:03:16,400
Let's see what happens with the debug system.

1094
01:03:18,700 --> 01:03:21,200
Profile code course.

1095
01:03:22,100 --> 01:03:24,300
Create something that's too big in the first place.

1096
01:03:24,300 --> 01:03:25,700
So it's hard to see.

1097
01:03:31,100 --> 01:03:32,100
Hold on one second.

1098
01:03:40,400 --> 01:03:52,000
So yeah, if I was to do one let's say that was like can I do one with

1099
01:03:52,000 --> 01:03:52,600
bigger?

1100
01:03:55,300 --> 01:03:56,300
I don't know if this will work.

1101
01:04:11,300 --> 01:04:13,300
So it sure looks like.

1102
01:04:15,400 --> 01:04:17,200
This works properly.

1103
01:04:22,900 --> 01:04:25,400
Is this the only place I know of that's using the clip region.

1104
01:04:28,300 --> 01:04:29,200
In that way, it sure.

1105
01:04:29,200 --> 01:04:33,200
Looks like that works properly at the moment.

1106
01:04:37,800 --> 01:04:43,200
so I'm not sure if that's really the bug, it looks like maybe the bug

1107
01:04:43,200 --> 01:04:45,500
is more, just the fact that the

1108
01:04:57,600 --> 01:05:01,000
Yeah it looks like the the bug must be something slightly said there

1109
01:05:01,000 --> 01:05:03,500
because in this case, we are still using the clip.

1110
01:05:03,500 --> 01:05:05,600
Rect coordinates directly for clipping.

1111
01:05:06,500 --> 01:05:08,700
In this case where we just used that that clip.

1112
01:05:08,700 --> 01:05:14,600
Rect and so presumably if that works in software renderer we should be

1113
01:05:14,600 --> 01:05:17,700
able to make it work in the GL render as well.

1114
01:05:21,000 --> 01:05:25,800
And so, I guess, part of that problem may be just gl's.

1115
01:05:25,800 --> 01:05:32,500
Interpretation of GL scissor is not in the same in screen space.

1116
01:05:32,500 --> 01:05:36,000
It's in viewport space potentially, so we should take a look at that.

1117
01:05:36,200 --> 01:05:39,400
I do remember there being something weird with GL scissor in that way.

1118
01:05:42,100 --> 01:05:44,900
So, I have to think about that in a second, but first, let's take a

1119
01:05:44,900 --> 01:05:45,300
look.

1120
01:05:45,400 --> 01:05:51,300
So when we do our cliprect ear, we do an offset of the cliprect when

1121
01:05:51,300 --> 01:05:53,800
we're not using render targets.

1122
01:05:55,300 --> 01:05:57,000
Were the target is zero.

1123
01:05:57,000 --> 01:05:58,900
We do an offset of the clip.

1124
01:05:58,900 --> 01:05:59,800
Rect

1125
01:06:00,500 --> 01:06:04,600
So this is just to make sure we line ourselves up when we're just

1126
01:06:04,600 --> 01:06:08,700
driving the screen to line ourselves up so that we're off setted a

1127
01:06:08,700 --> 01:06:13,000
little bit and we do like a black bars kind of a thing if we don't

1128
01:06:13,000 --> 01:06:16,700
occupy the entire screen size, I think that's all that's doing right?

1129
01:06:20,300 --> 01:06:23,700
And I think, did we have a windowed mode at some point?

1130
01:06:24,600 --> 01:06:25,300
I think we did.

1131
01:06:25,300 --> 01:06:26,900
Let's let's let's take a look at that.

1132
01:06:27,000 --> 01:06:28,500
If we have a way to do that here,

1133
01:06:39,800 --> 01:06:42,700
So, if I change the size of this, right?

1134
01:06:52,900 --> 01:06:56,900
You can see that that all still appears to work correctly.

1135
01:06:57,000 --> 01:06:58,100
As far as I can tell,

1136
01:07:02,300 --> 01:07:05,700
So now if I turn software rendering to false so we're doing Hardware

1137
01:07:05,700 --> 01:07:06,300
rendering.

1138
01:07:15,300 --> 01:07:16,500
Hardware, rendering can see.

1139
01:07:16,500 --> 01:07:19,000
Now does exhibit the bug

1140
01:07:25,800 --> 01:07:26,400
There you go.

1141
01:07:27,400 --> 01:07:30,200
Now, for some reason, Hardware rendering is not

1142
01:07:37,800 --> 01:07:42,000
Does not exhibit the problem of changing the screen resolution causing

1143
01:07:42,000 --> 01:07:42,200
a prop.

1144
01:07:42,200 --> 01:07:46,800
So so basically it's not for whatever reason doing our scaling.

1145
01:07:46,800 --> 01:07:48,700
This way does not pose a problem.

1146
01:07:51,300 --> 01:07:56,600
Get changing this from 1920 by 1080 does, so is that?

1147
01:07:56,600 --> 01:07:59,900
Because we hard-coded that somewhere when we were doing the opengl

1148
01:08:00,300 --> 01:08:02,000
stuff or something, I'm not sure.

1149
01:08:02,000 --> 01:08:06,900
Why, that would why that was happening?

1150
01:08:06,900 --> 01:08:09,300
So I think we've basically got two bugs here.

1151
01:08:09,500 --> 01:08:15,000
One is, we've got the the scissor is not properly aligned, right?

1152
01:08:15,000 --> 01:08:16,600
You can see that happening here.

1153
01:08:17,300 --> 01:08:19,399
Very clearly, right?

1154
01:08:22,300 --> 01:08:27,399
And then the other one is that if we don't start out at 1920 by 1080,

1155
01:08:27,399 --> 01:08:30,700
we're getting this sort of other problem in only the hardware

1156
01:08:30,700 --> 01:08:31,300
renderer.

1157
01:08:31,600 --> 01:08:34,200
Again, both of these cases, it's only the hardware renderer.

1158
01:08:34,399 --> 01:08:36,300
The software, renderer just seems to work.

1159
01:08:36,300 --> 01:08:37,100
Exactly.

1160
01:08:39,500 --> 01:08:42,600
And off you go, which by the way, tends to be the case with software

1161
01:08:42,600 --> 01:08:45,700
rendering software, rendering is so nice because you control

1162
01:08:45,700 --> 01:08:47,800
everything and it just tends to work anyway.

1163
01:08:48,800 --> 01:08:50,800
But anyway, so let's take a look at how that goes.

1164
01:08:50,800 --> 01:08:52,300
I think it's big like anything else.

1165
01:08:52,300 --> 01:08:54,200
If you wrote it, you understand how it all works.

1166
01:08:54,200 --> 01:08:57,500
You're less likely to have weird things where you're like, oh, do you

1167
01:08:57,500 --> 01:08:58,800
know this particular call?

1168
01:08:58,800 --> 01:08:59,800
I forgot that it doesn't

1169
01:09:00,000 --> 01:09:02,300
That thing or this that or the other thing.

1170
01:09:03,000 --> 01:09:05,500
So anyway, let's take a look at why that's happening.

1171
01:09:07,300 --> 01:09:11,899
So first things first, so the scissor being misaligned, I'm going to

1172
01:09:11,899 --> 01:09:14,100
take a quick look at the documentation for Jill, says they're just so

1173
01:09:14,100 --> 01:09:18,000
we are correctly interpreting what those parameters are supposed to

1174
01:09:18,000 --> 01:09:20,100
mean, like what space are supposed to be in?

1175
01:09:21,899 --> 01:09:22,399
Right.

1176
01:09:23,100 --> 01:09:26,100
So here's a GL scissor call and we've got the width and the height

1177
01:09:26,100 --> 01:09:29,200
presumably, and the X and the Y.

1178
01:09:29,600 --> 01:09:32,000
You know, we're Computing those correctly in some space, right?

1179
01:09:32,000 --> 01:09:33,399
Because we're doing Max minus Min.

1180
01:09:33,600 --> 01:09:36,200
So we are doing X, Y, width, and height, we're definitely sending that

1181
01:09:36,200 --> 01:09:36,399
down.

1182
01:09:36,399 --> 01:09:40,000
But the question is, what's the space and it says it defines a

1183
01:09:40,000 --> 01:09:42,100
rectangle in window coordinates.

1184
01:09:43,000 --> 01:09:43,399
Okay.

1185
01:09:46,300 --> 01:09:48,600
The first two arguments X & Y specify, the lower left corner of the

1186
01:09:48,600 --> 01:09:51,200
box with Isis, the width of the box to enable the civil service test,

1187
01:09:51,200 --> 01:09:52,899
blah, blah blah, right.

1188
01:09:54,100 --> 01:09:58,800
So it says that those are specified in window coordinates, right?

1189
01:09:59,400 --> 01:10:02,200
So now let's take a look at GL viewport, which is the other call that

1190
01:10:02,200 --> 01:10:04,900
we have that has to do with this situation.

1191
01:10:05,800 --> 01:10:09,700
Oh, did somebody say docks?

1192
01:10:10,900 --> 01:10:12,100
G l or something?

1193
01:10:12,700 --> 01:10:13,200
There it is.

1194
01:10:16,600 --> 01:10:18,600
So, let's take a look at Jill viewport.

1195
01:10:18,700 --> 01:10:19,100
Here's Jill.

1196
01:10:19,100 --> 01:10:19,900
Viewport.

1197
01:10:27,500 --> 01:10:32,300
So I assume that our problem here is that our GL viewport call, right?

1198
01:10:32,300 --> 01:10:37,100
So when we do, when we do open gel bind frame buffer, oops.

1199
01:10:44,700 --> 01:10:45,100
There we go.

1200
01:10:50,300 --> 01:10:50,900
so, I'm very

1201
01:10:52,500 --> 01:10:57,100
It's that season where I'm very stuffy opengl bind frame buffer.

1202
01:10:57,500 --> 01:11:01,400
In this case, you can see that what we do here is we say like, well

1203
01:11:01,400 --> 01:11:04,800
how big is this drawer region supposed to be, right?

1204
01:11:05,600 --> 01:11:09,200
And the draw region again, is something that we that sort of comes in

1205
01:11:09,300 --> 01:11:10,300
up here, I believe, right?

1206
01:11:10,300 --> 01:11:12,100
So here's the draw region.

1207
01:11:15,300 --> 01:11:17,300
And you can kind of see that we're doing a couple different things

1208
01:11:17,300 --> 01:11:20,000
here at the draw region is how big the entire thing is that we're

1209
01:11:20,000 --> 01:11:22,000
supposed to draw to, right?

1210
01:11:22,500 --> 01:11:26,600
And we're passing down to the in the drawer region, we're saying that

1211
01:11:26,600 --> 01:11:29,600
rgl viewport is going to be whatever that size is, right?

1212
01:11:33,200 --> 01:11:35,700
And you can see that we've got a couple different ways that we're

1213
01:11:35,700 --> 01:11:36,400
doing that.

1214
01:11:36,600 --> 01:11:40,400
So in the case where we're drawing to a frame buffer, we're just going

1215
01:11:40,400 --> 01:11:44,300
to use the we're just going to draw it aligned right?

1216
01:11:45,000 --> 01:11:47,500
But in the case, where we're drawing to the final screen, we're going

1217
01:11:47,500 --> 01:11:53,100
to use the the Min X and them in Y for the viewport when we pass it

1218
01:11:53,100 --> 01:11:56,800
down and again the reason that we're doing that is just because we're

1219
01:11:56,800 --> 01:11:59,600
trying to when we're trying to the screen, we're trying.

1220
01:12:00,300 --> 01:12:02,800
Put it in the right place for the viewer to see it.

1221
01:12:03,300 --> 01:12:05,900
Whereas when we're trying to a texture, we're just going to use that

1222
01:12:05,900 --> 01:12:06,900
texture and some other way.

1223
01:12:06,900 --> 01:12:08,900
So we don't need to have it be aligned in that way.

1224
01:12:12,600 --> 01:12:15,300
So here, when we call our GL viewport call, and we're passing the

1225
01:12:15,300 --> 01:12:20,000
window within the window height, I feel like that all, should that

1226
01:12:20,000 --> 01:12:24,200
looks roughly correct to me like I don't see any reason why that would

1227
01:12:24,200 --> 01:12:26,200
be unusual.

1228
01:12:26,700 --> 01:12:31,400
Now, when we come in here though, you can see what's happening that

1229
01:12:31,400 --> 01:12:33,400
the clip rect comes from a different place.

1230
01:12:33,700 --> 01:12:38,400
So the the window within the window height and then the clip rect the

1231
01:12:38,400 --> 01:12:42,000
cliprect itself has not actually been transformed in any way.

1232
01:12:42,200 --> 01:12:47,700
A, that is relative to the window width and window height, right?

1233
01:12:53,600 --> 01:12:56,800
So really I suppose that is where our problem lies.

1234
01:12:57,200 --> 01:12:59,200
And this is probably what Kim was talking about when he said World

1235
01:12:59,200 --> 01:13:00,100
coordinates, right?

1236
01:13:01,300 --> 01:13:05,100
So the clip rect in this case and the window within the window height

1237
01:13:05,100 --> 01:13:08,600
the clip rect is going to be something specified.

1238
01:13:11,600 --> 01:13:16,000
In terms of that viewport I suppose, but it's not going to be

1239
01:13:16,000 --> 01:13:18,400
interpreted in terms of the viewport.

1240
01:13:26,000 --> 01:13:29,500
Which, of course, means I'm not sure exactly how we want this to be

1241
01:13:29,500 --> 01:13:37,000
interpreted, but so when we actually set this GL scissor, and we've

1242
01:13:37,000 --> 01:13:41,300
got the min max and the Min, why here.

1243
01:13:55,900 --> 01:14:02,000
I think we would first need to know and let's take a, let's take a

1244
01:14:02,000 --> 01:14:02,800
quick look in here.

1245
01:14:17,500 --> 01:14:17,900
so,

1246
01:14:20,800 --> 01:14:24,500
You can see here that when we do our transform, we've got this screen

1247
01:14:24,500 --> 01:14:25,300
area a bit.

1248
01:14:26,200 --> 01:14:30,700
And when we're doing pixel widths and pixel, heights were doing

1249
01:14:30,700 --> 01:14:34,300
everything in terms of the screen area and the screen area.

1250
01:14:34,800 --> 01:14:37,200
When we set it, see if we can find it here,

1251
01:14:50,200 --> 01:14:53,600
Our game render commands, let's see where screen area actually is

1252
01:14:53,600 --> 01:14:58,300
because that comes from here, I would assume it just comes from within

1253
01:14:58,300 --> 01:14:59,800
height, right?

1254
01:15:00,000 --> 01:15:02,700
In-game render commands me just double check that all.

1255
01:15:02,700 --> 01:15:03,300
That's true.

1256
01:15:21,200 --> 01:15:24,600
So whenever we call begin render group, that's where we pass the pixel

1257
01:15:24,600 --> 01:15:26,100
within the pixel height in here.

1258
01:15:28,100 --> 01:15:28,600
Right.

1259
01:15:33,400 --> 01:15:37,700
And you can see that getting done right here, right?

1260
01:15:37,700 --> 01:15:40,200
And it passes in the width and the height that it got from it a

1261
01:15:40,200 --> 01:15:40,500
command.

1262
01:15:40,500 --> 01:15:41,900
So that is where that comes from.

1263
01:15:43,400 --> 01:15:44,900
We could we could make this a lot cleaner.

1264
01:15:44,900 --> 01:15:48,000
If we wanted to probably somebody we do want it.

1265
01:15:49,000 --> 01:15:51,700
So it's taking the global back buffer within the global back bumper

1266
01:15:51,700 --> 01:15:54,500
height and those are the things that are coming in as part of this

1267
01:15:55,200 --> 01:15:57,500
part of that screen area, right?

1268
01:16:02,200 --> 01:16:05,900
so when we do a push clip, rect like we have in here,

1269
01:16:07,400 --> 01:16:08,400
Let's see, we've got it.

1270
01:16:08,400 --> 01:16:10,700
Like, like, for example, one of these things,

1271
01:16:12,600 --> 01:16:16,100
When we do a push clip, rect for one of these things and we're setting

1272
01:16:16,100 --> 01:16:20,200
it up, you can see that we just scored a specify X Y, width and

1273
01:16:20,200 --> 01:16:20,700
height.

1274
01:16:21,700 --> 01:16:27,000
And we don't really in any way transform those like, if we were doing

1275
01:16:27,200 --> 01:16:31,600
any of these guys, let me, let me just double check here, which ones

1276
01:16:31,600 --> 01:16:32,100
we're doing.

1277
01:16:48,900 --> 01:16:53,300
So in these cases, let's see backing transform.

1278
01:16:58,500 --> 01:17:02,400
So it looks like we are going through the object transform, it looks

1279
01:17:02,400 --> 01:17:03,800
like we're going through

1280
01:17:07,300 --> 01:17:07,700
This call.

1281
01:17:07,700 --> 01:17:08,000
Yes.

1282
01:17:08,700 --> 01:17:12,800
So we do go through the full pipeline here, which means that when we

1283
01:17:13,100 --> 01:17:16,200
transform these guys, they are getting transformed by whatever the

1284
01:17:16,400 --> 01:17:22,300
basis is here and scaled out and all those other good sorts of things,

1285
01:17:22,700 --> 01:17:23,200
right?

1286
01:17:24,600 --> 01:17:28,700
And then they're just getting recorded after that is done and place in

1287
01:17:28,700 --> 01:17:29,000
here.

1288
01:17:29,800 --> 01:17:32,000
So, when it goes through this, this transform,

1289
01:17:34,300 --> 01:17:35,200
At that point.

1290
01:17:37,600 --> 01:17:42,300
We would expect it to have been transformed out by however, big the

1291
01:17:42,300 --> 01:17:43,500
screen was, right?

1292
01:17:43,500 --> 01:17:48,700
Because that piece of information gets taken into account during the

1293
01:17:49,000 --> 01:17:50,700
entity basis P, right?

1294
01:17:51,100 --> 01:17:54,200
You've got M to pixels that comes in here, you've got the screen

1295
01:17:54,200 --> 01:17:57,400
center and so on.

1296
01:17:57,500 --> 01:17:58,500
Now, I guess,

1297
01:18:00,100 --> 01:18:03,700
Though at that point it doesn't take into account.

1298
01:18:04,700 --> 01:18:07,100
Yeah, so it does therein.

1299
01:18:10,000 --> 01:18:14,200
They're in our concept of the screen coordinates at that point, but

1300
01:18:14,200 --> 01:18:19,000
they're not it's not in any way related to where the window actually

1301
01:18:19,000 --> 01:18:22,800
is because it's not being offset by anything in addition to that like

1302
01:18:22,800 --> 01:18:26,500
it's not being offset by anything which is why that additional offset

1303
01:18:26,500 --> 01:18:28,400
has to be there in the opengl path, right?

1304
01:18:28,400 --> 01:18:32,700
That's why this offset has to be there, right?

1305
01:19:01,300 --> 01:19:01,800
so,

1306
01:19:08,600 --> 01:19:12,400
Again, looking at this one though, there isn't anything special done

1307
01:19:12,600 --> 01:19:17,300
to handle it in the case of the software renderer which is weird,

1308
01:19:17,800 --> 01:19:18,300
right?

1309
01:19:18,600 --> 01:19:23,800
I, you would have expected it either to both, have to do it or

1310
01:19:23,800 --> 01:19:24,400
neither.

1311
01:19:24,900 --> 01:19:27,800
So the fact that we're able to just use all of these because it looks

1312
01:19:27,800 --> 01:19:29,800
like and it does look like the screen.

1313
01:19:32,900 --> 01:19:36,800
Information, like how big the screen is is sort of baked in to all the

1314
01:19:36,800 --> 01:19:38,100
transforms that happen there.

1315
01:19:39,100 --> 01:19:41,900
So when we take a look at the clip wreck stuff here, it's a little

1316
01:19:41,900 --> 01:19:47,400
confusing to me why we're sort of seeing that difference there where

1317
01:19:47,400 --> 01:19:49,000
we have to

1318
01:19:52,200 --> 01:19:53,600
account for that.

1319
01:20:08,500 --> 01:20:09,800
It's just a little puzzling.

1320
01:20:09,800 --> 01:20:10,400
Wouldn't you say?

1321
01:20:14,000 --> 01:20:15,100
because in theory,

1322
01:20:18,300 --> 01:20:20,900
yeah, I just don't understand why that's a problem because in theory

1323
01:20:20,900 --> 01:20:23,500
these should be in the same coordinate space if they are working

1324
01:20:23,500 --> 01:20:28,000
correctly inside the software renderer which is really the bizarre

1325
01:20:28,000 --> 01:20:28,900
part, right?

1326
01:20:34,700 --> 01:20:41,000
And it's not obvious to me, why you would have anything weird or

1327
01:20:41,000 --> 01:20:44,300
happen there, because it should happen exactly the same way.

1328
01:20:44,600 --> 01:20:48,500
And furthermore, I don't see why we're getting strange results when we

1329
01:20:48,500 --> 01:20:51,600
set the size of the buffer differently,

1330
01:20:54,400 --> 01:20:56,600
In that case either, right?

1331
01:21:02,000 --> 01:21:02,800
Hmm.

1332
01:21:23,100 --> 01:21:26,000
Yeah, I don't I don't I really just don't understand that.

1333
01:21:26,200 --> 01:21:31,800
I'm very confused by that to say the least because I can't figure out

1334
01:21:31,800 --> 01:21:34,300
why we would have a disparity between those two things.

1335
01:21:34,600 --> 01:21:38,900
And I feel like I should be able to figure that out because if one of

1336
01:21:38,900 --> 01:21:41,900
them has the problem in one of them doesn't right,

1337
01:21:45,300 --> 01:21:48,300
There should be a solid explanation, for why that's the case,

1338
01:21:48,300 --> 01:21:51,500
something that they're doing differently, that would explain.

1339
01:21:51,700 --> 01:21:53,400
That fact, right?

1340
01:21:54,600 --> 01:21:57,100
So, you know, there's the hardware renderer, there's the software

1341
01:21:57,100 --> 01:22:00,200
renderer and they both agree here.

1342
01:22:03,000 --> 01:22:06,900
But, but when I go to look at the profile, for example, they won't

1343
01:22:06,900 --> 01:22:07,300
agree.

1344
01:22:07,500 --> 01:22:09,200
Is that is the implication, right?

1345
01:22:10,400 --> 01:22:12,700
So there's right hardware and software,

1346
01:22:15,400 --> 01:22:18,400
You can see again, totally, totally incorrect there.

1347
01:22:27,100 --> 01:22:29,400
And so, you can see that the clip rect in this case,

1348
01:22:42,400 --> 01:22:46,900
Sort of converges to the correct answer as well as I guess you get

1349
01:22:46,900 --> 01:22:47,300
bigger.

1350
01:22:47,300 --> 01:22:50,700
Like, if I do that suddenly, it's right.

1351
01:22:52,500 --> 01:22:54,700
And again this seems to have to do.

1352
01:22:55,900 --> 01:22:57,500
It's just very, very strange.

1353
01:22:58,800 --> 01:23:02,500
It seems to have to do with the total, with the difference between the

1354
01:23:02,500 --> 01:23:05,600
size of the screen and

1355
01:23:13,900 --> 01:23:17,400
And the original size, the expected size, the 1920, by 1080.

1356
01:23:21,000 --> 01:23:22,900
Which again, makes it very, very little sense to me.

1357
01:23:25,200 --> 01:23:25,700
Right.

1358
01:23:35,900 --> 01:23:38,300
And you can see that it's scaled wrong as well.

1359
01:23:38,300 --> 01:23:40,800
So it definitely it, definitely the scaling problem because you can

1360
01:23:40,800 --> 01:23:44,100
see, I don't know if you can see this, but the motion of this line

1361
01:23:45,400 --> 01:23:48,100
Doesn't go linearly with emotion of this line.

1362
01:23:48,400 --> 01:23:54,900
So the size of the clip, rect is getting increased in a way that is is

1363
01:23:55,900 --> 01:23:57,400
not one to one.

1364
01:23:57,400 --> 01:23:59,800
It's like a, it's a factor of two or something, right?

1365
01:24:00,500 --> 01:24:03,500
Well, it's probably a factor of, however, Bix big, the screen sizes

1366
01:24:03,500 --> 01:24:04,900
versus the total screen size.

1367
01:24:08,900 --> 01:24:13,600
So again, I'm really not sure how that's why that's happening.

1368
01:24:24,300 --> 01:24:26,300
Yeah, that really doesn't make a lot of sense to me.

1369
01:24:26,400 --> 01:24:28,500
Okay, so I think I'm just missing.

1370
01:24:28,700 --> 01:24:30,800
Let's let's just dig in one more time here.

1371
01:24:35,500 --> 01:24:38,900
Because again, these are both supposed to be in window coordinates,

1372
01:24:39,000 --> 01:24:39,400
right?

1373
01:24:39,400 --> 01:24:42,800
Because it says deal viewport, specifies, the affine transformation of

1374
01:24:42,800 --> 01:24:46,900
X and Y from normalized device coordinates to window coordinates as

1375
01:24:46,900 --> 01:24:47,600
doing this.

1376
01:24:48,900 --> 01:24:50,400
So they're both in the same space.

1377
01:24:50,400 --> 01:24:54,400
So I guess what I would infer from this is that this transform the GL

1378
01:24:54,600 --> 01:24:59,500
viewport transform is going to happen on everything that we put in

1379
01:24:59,600 --> 01:25:01,000
except the GL scissor.

1380
01:25:01,800 --> 01:25:02,300
Right.

1381
01:25:05,900 --> 01:25:09,100
And so I'm guessing that it must just be thinking that through that,

1382
01:25:09,100 --> 01:25:12,100
that is the problem there GL viewport.

1383
01:25:13,400 --> 01:25:15,900
in this case, this transform,

1384
01:25:20,100 --> 01:25:23,800
Right here is going to happen to our positions, but it's not going to

1385
01:25:23,800 --> 01:25:27,800
happen to LG L 2 H, GL scissor positions.

1386
01:25:28,500 --> 01:25:29,000
Right.

1387
01:25:30,700 --> 01:25:31,700
And so,

1388
01:25:33,900 --> 01:25:37,900
I guess that is the primary problem that we're going to face.

1389
01:25:39,200 --> 01:25:43,700
So, let's take a look here with rgl scissor down here.

1390
01:25:50,700 --> 01:25:52,000
And we can see what we're doing here.

1391
01:25:52,000 --> 01:25:55,300
So we have, like, zero zero window with window height.

1392
01:25:55,800 --> 01:26:01,200
So all of our X and y's that come through here, are going to be

1393
01:26:04,000 --> 01:26:06,700
X half the width, right?

1394
01:26:06,700 --> 01:26:09,800
And then have the offset added to them.

1395
01:26:11,100 --> 01:26:12,700
Right, so that's what's going to happen.

1396
01:26:18,300 --> 01:26:22,900
And rgl scissor like our cliprect presumably is, I guess we're saying

1397
01:26:22,900 --> 01:26:24,800
is should be in that same space.

1398
01:26:33,200 --> 01:26:35,500
Right, because everyone else is going to have to be.

1399
01:26:38,200 --> 01:26:42,300
So that would imply that we would have to take normalized device

1400
01:26:42,300 --> 01:26:43,900
coordinates, right?

1401
01:26:43,900 --> 01:26:44,800
Which is the clip.

1402
01:26:44,800 --> 01:26:45,600
Rect

1403
01:26:48,000 --> 01:26:53,200
Value, divided by whatever the the window with actually is, right,

1404
01:26:53,200 --> 01:26:56,100
because we've got, we've got a normalize, the coordinates first and

1405
01:26:56,100 --> 01:26:57,300
normalized device coordinates.

1406
01:26:57,300 --> 01:26:59,800
Right, is saying that we've turned this.

1407
01:27:00,100 --> 01:27:04,300
You know, that entire area where drawing to, we've turned it into, you

1408
01:27:04,300 --> 01:27:06,700
know, 0 to 1 or negative 1 to 1.

1409
01:27:06,900 --> 01:27:09,100
I think GL uses negative 1 to 1

1410
01:27:10,900 --> 01:27:12,300
And then we're going to multiply it.

1411
01:27:12,300 --> 01:27:13,500
Well, you can tell right here in the equation.

1412
01:27:13,500 --> 01:27:17,200
That's negative 1 to 1 because you can see it's multiplying by the

1413
01:27:17,200 --> 01:27:20,200
with over to if it was 0 to 1, it would multiply the width.

1414
01:27:20,300 --> 01:27:23,500
If it's negative 1 to 1, it multiplies by the width / 2 and then the

1415
01:27:23,500 --> 01:27:24,300
offset.

1416
01:27:28,300 --> 01:27:28,800
Comes in there.

1417
01:27:28,800 --> 01:27:32,000
So let's take a look I guess in Milton at this for a second.

1418
01:27:32,000 --> 01:27:33,600
We should be able to work this out.

1419
01:27:40,500 --> 01:27:41,700
Let's see, Milton.

1420
01:27:43,900 --> 01:27:44,300
Where are you?

1421
01:27:44,300 --> 01:27:44,800
Milton?

1422
01:27:44,800 --> 01:27:45,400
There you are.

1423
01:28:02,100 --> 01:28:05,400
Okay, so what we know here is that the normalized device coordinates

1424
01:28:05,400 --> 01:28:06,200
for this thing.

1425
01:28:07,600 --> 01:28:10,700
So I'm just going to go ahead and copy this equation down.

1426
01:28:22,100 --> 01:28:25,200
So essentially what we're saying is that the actual coordinates we're

1427
01:28:25,200 --> 01:28:31,400
going to use is going to be the input coordinate, plus 1 over W over

1428
01:28:31,400 --> 01:28:32,300
2, right?

1429
01:28:32,300 --> 01:28:37,000
Half the width plus the center of the screen, right?

1430
01:28:45,500 --> 01:28:47,100
At least I assume it's a yeah, it's right.

1431
01:28:47,100 --> 01:28:49,800
This plus the 08 plus the lower left corner.

1432
01:28:57,600 --> 01:28:58,400
Call that left.

1433
01:29:02,000 --> 01:29:05,700
So yeah, so you can see what the plus 1 is here, right?

1434
01:29:05,700 --> 01:29:09,800
Because this x of n is going to go from negative 1 to 1, right?

1435
01:29:09,800 --> 01:29:12,800
And remember, let's just talk about what normalized device coordinates

1436
01:29:12,800 --> 01:29:13,300
are here.

1437
01:29:17,200 --> 01:29:21,300
We've talked about this before so an opengl, it assumes a system where

1438
01:29:21,300 --> 01:29:23,500
the center is 0 0, right?

1439
01:29:23,500 --> 01:29:27,800
In terms of normalized device coordinates negative 1 to 1, right goes

1440
01:29:27,800 --> 01:29:32,000
horizontally, right - 121 goes vertically like so on.

1441
01:29:33,000 --> 01:29:36,300
And so the center lines are always zero and the far ends are negative

1442
01:29:36,300 --> 01:29:37,700
one or one on either.

1443
01:29:37,700 --> 01:29:39,600
In either case, you know.

1444
01:29:41,200 --> 01:29:44,200
Now, another way to do normalized device coordinates would have been

1445
01:29:44,200 --> 01:29:44,800
like, you know,

1446
01:29:45,000 --> 01:29:49,900
Ro 0 is here and 11 is here, but that's not what we're doing in GL, GL

1447
01:29:49,900 --> 01:29:51,000
uses negative 1 to 1.

1448
01:29:51,000 --> 01:29:53,700
So each axis goes negative 1 to 1, right?

1449
01:29:53,700 --> 01:29:58,600
So this would be negative 1, negative 1 and this is 1 1, right?

1450
01:29:58,800 --> 01:29:59,800
This is 0 0.

1451
01:30:00,800 --> 01:30:05,000
This is one troops -1 and this is negative 11.

1452
01:30:07,600 --> 01:30:13,600
So the plus one is to just to turn this into a 0 to 2 because it's

1453
01:30:13,600 --> 01:30:17,700
coming in as negative 1 to 1 this value is and we're trying to turn in

1454
01:30:17,700 --> 01:30:22,300
2022, so that we can multiply by the width over to cancel the 2s and

1455
01:30:22,300 --> 01:30:25,700
actually just get, what would have essentially been zero to one

1456
01:30:25,700 --> 01:30:29,300
mapping goes to a 02 width mapping, right?

1457
01:30:29,300 --> 01:30:30,500
That's what we're trying to do.

1458
01:30:31,800 --> 01:30:32,500
and then,

1459
01:30:34,400 --> 01:30:39,900
When we do this plus X1 here, that's just to offset if the but if the

1460
01:30:39,900 --> 01:30:43,600
base corner of the window, is not supposed to be in the lower left

1461
01:30:43,600 --> 01:30:46,400
corner than this is our offset there.

1462
01:30:47,700 --> 01:30:48,200
Right?

1463
01:30:48,200 --> 01:30:51,500
So there's our equation that we're using to try and line this up.

1464
01:30:52,300 --> 01:30:56,700
And so, in this case, what we need to do is just figure out how to

1465
01:30:56,700 --> 01:31:01,400
take care of this transform part and then do this offset, right?

1466
01:31:02,700 --> 01:31:04,400
So let's take a look at how this is coming in.

1467
01:31:05,000 --> 01:31:07,700
What we need to figure out is what are are normalized device

1468
01:31:07,700 --> 01:31:09,100
coordinates for our clip.

1469
01:31:09,100 --> 01:31:09,900
Rect right.

1470
01:31:11,000 --> 01:31:15,200
Well our clip, rect in this case, go back here are cliprect in this

1471
01:31:15,200 --> 01:31:19,300
case is not based on the draw region, right?

1472
01:31:20,600 --> 01:31:26,600
It's based on whatever that that commands with and commands height

1473
01:31:26,600 --> 01:31:27,800
are, right?

1474
01:31:29,600 --> 01:31:33,600
So what we want to do is say our our clip value are clipped

1475
01:31:33,600 --> 01:31:39,000
coordinates that come in, we want to do is normalize them first by

1476
01:31:39,000 --> 01:31:47,200
making them be relative to that width, the width of of whatever, the

1477
01:31:47,200 --> 01:31:51,200
the basic render region is, right.

1478
01:31:51,600 --> 01:31:55,300
So, whatever that commands with is, we wanted to First normalize them

1479
01:31:55,300 --> 01:31:57,400
to that because we know they're in this space.

1480
01:31:57,800 --> 01:31:58,800
So we normalize them too.

1481
01:31:59,100 --> 01:31:59,700
First.

1482
01:32:02,700 --> 01:32:06,000
And then we would know that we would have them already ranging from 0

1483
01:32:06,000 --> 01:32:08,200
to 1 because we're not using negative 1 to 1 space.

1484
01:32:08,200 --> 01:32:11,900
Here, we know that we were ranging in the Christ's face there and then

1485
01:32:11,900 --> 01:32:16,600
we want to multiply them to get them back to this.

1486
01:32:16,600 --> 01:32:20,200
With this, here is the drawer region with this, is whatever we were

1487
01:32:20,200 --> 01:32:22,900
using for the viewport, right?

1488
01:32:23,800 --> 01:32:29,100
So that's that, that window with window, height situation here, right?

1489
01:32:32,200 --> 01:32:34,700
So then we would do with the window.

1490
01:32:35,500 --> 01:32:38,700
So what we really need here is we need this ratio.

1491
01:32:39,900 --> 01:32:42,400
The reason that are normalized device coordinates are wrong.

1492
01:32:42,400 --> 01:32:45,800
In this case is because we're not using this ratio, we need the window

1493
01:32:45,800 --> 01:32:47,300
width over the window.

1494
01:32:47,500 --> 01:32:50,200
We need the the window with over the command with, right?

1495
01:32:50,200 --> 01:32:51,200
We essentially need

1496
01:33:01,100 --> 01:33:01,500
Jimmy.

1497
01:33:03,800 --> 01:33:08,300
we need commands with over whatever the like draw a region with

1498
01:33:12,800 --> 01:33:17,100
We need to multiply by this to get that ratio to be correct, right?

1499
01:33:17,700 --> 01:33:19,300
In order to transform our GL scissor.

1500
01:33:19,300 --> 01:33:22,800
The way that we think we should transfer module Caesar and then we

1501
01:33:22,800 --> 01:33:24,800
also need to handle the offset at that point.

1502
01:33:24,800 --> 01:33:28,800
But we're already handling the offset in this Clause right here,

1503
01:33:29,600 --> 01:33:30,100
right?

1504
01:33:31,300 --> 01:33:35,400
So I think the only thing that we really have to do here is we have to

1505
01:33:35,400 --> 01:33:36,200
say, okay,

1506
01:33:38,600 --> 01:33:39,000
Our clip.

1507
01:33:39,000 --> 01:33:43,300
Rect first has to be scaled by that scale value.

1508
01:33:43,300 --> 01:33:47,200
So our cliprect Min x x equals scale X.

1509
01:33:59,600 --> 01:34:00,700
And we know what this has to.

1510
01:34:00,700 --> 01:34:07,200
Because again we have our drawer region within our drawer region

1511
01:34:07,200 --> 01:34:07,700
height.

1512
01:34:07,900 --> 01:34:11,800
So we know just make sure we've got that up here somewhere.

1513
01:34:17,500 --> 01:34:18,100
There we go.

1514
01:34:19,600 --> 01:34:22,100
So we've got our dry region with an, I draw region height here.

1515
01:34:28,300 --> 01:34:29,300
And we want to do that scale.

1516
01:34:33,800 --> 01:34:36,600
so, again, to do this commands with

1517
01:34:39,900 --> 01:34:42,300
To ensure that our commands with is actually going to be valid.

1518
01:34:42,300 --> 01:34:44,200
We need to make sure that it's nonzero because we're going to have to

1519
01:34:44,200 --> 01:34:45,100
divide by it.

1520
01:34:46,100 --> 01:34:48,400
So at some point here we really should be testing that.

1521
01:34:48,400 --> 01:34:52,900
I don't know if we test that anywhere else where we might need to do a

1522
01:34:52,900 --> 01:34:53,300
divide.

1523
01:34:53,300 --> 01:34:54,800
I don't know for actually doing any divides here.

1524
01:34:54,800 --> 01:34:59,400
It looks like we're actually not other than bitmap sizes which we know

1525
01:34:59,400 --> 01:35:00,300
to be correct.

1526
01:35:02,200 --> 01:35:05,700
So I think what I'll have to do here is create some kind of a ratio

1527
01:35:07,700 --> 01:35:09,000
A safe ratio system.

1528
01:35:09,500 --> 01:35:12,200
So what I'm going to do here is I'm going to say, all right, when this

1529
01:35:12,200 --> 01:35:16,500
thing comes in and we have the command, we have this, like command

1530
01:35:16,500 --> 01:35:20,900
with the command height, I'm going to do like in command with those

1531
01:35:20,900 --> 01:35:23,300
1.0 over to man's wit.

1532
01:35:23,700 --> 01:35:28,600
And in command height goes, one point over a man's height because I'm

1533
01:35:28,600 --> 01:35:29,800
going to have to divide by these.

1534
01:35:30,000 --> 01:35:32,900
And what I want to do is we have if you remember

1535
01:35:34,100 --> 01:35:39,600
We have our safe ratio, I want to be able to make it so that this will

1536
01:35:39,600 --> 01:35:40,800
work, no matter what.

1537
01:35:41,100 --> 01:35:43,200
So I'm going to actually call Safe ratio carrier.

1538
01:35:43,200 --> 01:35:45,600
So in case commands with happens, to be 0

1539
01:35:54,100 --> 01:35:55,200
I still want it to work.

1540
01:35:57,200 --> 01:35:59,800
So, my scale is going to be the width.

1541
01:36:00,400 --> 01:36:04,200
And the height of the draw region that were specifying here.

1542
01:36:07,400 --> 01:36:10,700
I want to use that scale.

1543
01:36:11,000 --> 01:36:15,700
And then I want to say the width and height of the drawer region.

1544
01:36:17,700 --> 01:36:18,100
Oops.

1545
01:36:19,600 --> 01:36:22,000
scaled by whatever that inverse

1546
01:36:25,200 --> 01:36:27,600
command with a height chart to get that ratio proper

1547
01:36:28,600 --> 01:36:29,100
Right.

1548
01:36:31,300 --> 01:36:33,600
So, I think that would give us the correct values.

1549
01:36:35,300 --> 01:36:38,200
Of course, that is, if I actually type that in right?

1550
01:36:45,600 --> 01:36:49,000
to adjust for that that transform, that you'll view ports, doing

1551
01:36:50,800 --> 01:36:52,400
I believe that would give us the correct values.

1552
01:36:53,500 --> 01:36:55,900
Now, the only thing that I'm not certain about here is when we're

1553
01:36:55,900 --> 01:36:59,400
calling this, the drawer region get with here.

1554
01:37:00,400 --> 01:37:05,300
If we weren't using render targets, then we will not have called glv

1555
01:37:05,300 --> 01:37:05,800
port.

1556
01:37:07,400 --> 01:37:14,500
And so, in that case, the draw region is just going to be the overall

1557
01:37:14,500 --> 01:37:20,400
draw region, but I guess does

1558
01:37:20,600 --> 01:37:21,700
Draw a region ever.

1559
01:37:21,700 --> 01:37:22,800
Actually change.

1560
01:37:35,100 --> 01:37:36,200
So that doesn't actually change.

1561
01:37:36,200 --> 01:37:40,500
So, it looks like these scale X scale, y values, actually would never

1562
01:37:40,500 --> 01:37:41,900
be different, right?

1563
01:37:42,500 --> 01:37:44,600
They could be computed at the beginning.

1564
01:37:50,600 --> 01:37:51,600
And just saved.

1565
01:37:53,500 --> 01:37:54,200
I think.

1566
01:37:57,100 --> 01:37:57,700
Right.

1567
01:37:58,600 --> 01:38:01,600
So, in theory, that's something that I could do.

1568
01:38:03,700 --> 01:38:04,300
Right here.

1569
01:38:04,300 --> 01:38:07,000
And then the safe ratio actually is just

1570
01:38:09,300 --> 01:38:12,100
is actually just of these values, right?

1571
01:38:13,600 --> 01:38:16,700
We can actually dispense with this whole thing and just say like okay

1572
01:38:17,700 --> 01:38:22,300
whatever the drawer region within the drawer region hide are you know

1573
01:38:22,300 --> 01:38:23,600
knock yourself out.

1574
01:38:24,900 --> 01:38:25,900
And those are just be.

1575
01:38:33,100 --> 01:38:33,400
Oops.

1576
01:38:33,700 --> 01:38:34,400
What we use?

1577
01:38:36,500 --> 01:38:37,300
Let's see.

1578
01:38:37,300 --> 01:38:39,200
This needs to be an F32 as well.

1579
01:38:46,800 --> 01:38:48,700
From F 3 to 2 in 3200.

1580
01:38:50,400 --> 01:38:50,900
Interesting.

1581
01:38:50,900 --> 01:38:55,100
So the clip rect here is a 2 I so when we do this scale we're going to

1582
01:38:55,100 --> 01:38:56,900
have to do another rounding of it.

1583
01:38:56,900 --> 01:38:58,200
I suppose unfortunately.

1584
01:38:59,000 --> 01:38:59,900
So we're actually going to have

1585
01:39:00,000 --> 01:39:01,200
Do a round real 3032.

1586
01:39:01,800 --> 01:39:03,100
232 here.

1587
01:39:14,600 --> 01:39:16,700
Because these have to be pixel values at the end.

1588
01:39:29,600 --> 01:39:30,000
Okay.

1589
01:39:35,600 --> 01:39:37,000
But that was not a good at a job.

1590
01:39:39,100 --> 01:39:41,100
Okay, Butterfinger e.

1591
01:39:45,300 --> 01:39:48,900
So yeah, so now we actually are doing that transform and now we have

1592
01:39:48,900 --> 01:39:49,200
to go.

1593
01:39:49,300 --> 01:39:51,100
Make sure that we've actually got a correct.

1594
01:39:52,100 --> 01:39:57,200
So that will transform the scale of those properly and I think also do

1595
01:39:57,200 --> 01:39:58,100
the offset properly.

1596
01:39:58,100 --> 01:40:00,500
Of course, we don't actually know if that's true.

1597
01:40:00,500 --> 01:40:02,400
So let's actually start to work this through now.

1598
01:40:05,000 --> 01:40:06,300
And see if we've gotten any better.

1599
01:40:07,300 --> 01:40:09,100
So again here's let's open up.

1600
01:40:09,100 --> 01:40:10,400
Something that actually is using the clip.

1601
01:40:10,400 --> 01:40:11,900
Rect so here are the clip.

1602
01:40:11,900 --> 01:40:16,300
Rex again let's switch between the two software, rendering Hardware

1603
01:40:16,300 --> 01:40:20,600
rendering and so it looks like now we've got those scaled properly, so

1604
01:40:20,600 --> 01:40:25,400
there we go and we can sort of double check that that's true.

1605
01:40:25,800 --> 01:40:27,000
Does appear to be true.

1606
01:40:27,400 --> 01:40:27,900
Good.

1607
01:40:28,300 --> 01:40:31,100
So now we've got that scale and again, that's just applying.

1608
01:40:31,100 --> 01:40:34,500
That's just remembering that the GL scissor is in

1609
01:40:34,700 --> 01:40:35,200
No space.

1610
01:40:35,200 --> 01:40:38,400
Just like Jill viewport is and so gr viewport was applying a scale

1611
01:40:38,400 --> 01:40:41,400
transform that we were not compensating for and now we are.

1612
01:40:42,300 --> 01:40:47,600
Now the thing that I don't know is did that fix our other problem can

1613
01:40:47,900 --> 01:40:52,100
go back to software rendering being off by default.

1614
01:40:53,700 --> 01:40:58,100
So, now we fixed that sort of window, oops, window version here.

1615
01:41:03,000 --> 01:41:03,400
Right.

1616
01:41:06,900 --> 01:41:08,000
So that all looks good.

1617
01:41:09,500 --> 01:41:12,700
But what happens with our switch?

1618
01:41:17,900 --> 01:41:21,100
Oh, I accidentally destroyed my little half version here.

1619
01:41:21,100 --> 01:41:22,000
Let's put that back.

1620
01:41:23,900 --> 01:41:27,500
What happens if we say that we want the back buffer to be 960 by 540?

1621
01:41:27,600 --> 01:41:28,600
How does that affect things?

1622
01:41:28,600 --> 01:41:29,300
Now, right?

1623
01:41:30,300 --> 01:41:33,400
So, it looks like thankfully, that was the same problem, just not

1624
01:41:33,400 --> 01:41:34,300
applying that.

1625
01:41:34,700 --> 01:41:38,900
So now we're in a situation where we can also count on on that to work

1626
01:41:38,900 --> 01:41:40,100
in the hardware render as well.

1627
01:41:41,700 --> 01:41:47,300
All right, so scale bug resolved as far as we can tell.

1628
01:42:02,700 --> 01:42:03,900
Today is day 3, ft 5, right?

1629
01:42:03,900 --> 01:42:04,200
Yeah.

1630
01:42:07,400 --> 01:42:10,600
So taking a look here, now, let's see.

1631
01:42:10,600 --> 01:42:13,500
We've still got some time left, and it looks like we only have one bug

1632
01:42:13,500 --> 01:42:14,400
left which is the software.

1633
01:42:14,400 --> 01:42:15,400
Renderer a drawer.

1634
01:42:15,400 --> 01:42:18,200
Tony's could bask in draw, a rectangle of the fill wrecked is less

1635
01:42:18,200 --> 01:42:18,900
than four blocks wide.

1636
01:42:19,000 --> 01:42:22,400
Only the start that mass will be used, ignoring the end of the best

1637
01:42:22,400 --> 01:42:24,600
thing to wide, rectangles if it's less than four weeks twice to our

1638
01:42:24,600 --> 01:42:29,200
capacity to B, anded the end clip, Mass pre pre Loop.

1639
01:42:29,200 --> 01:42:30,200
That makes some sense.

1640
01:42:30,900 --> 01:42:33,900
We don't use fill wrecked a whole heck of a lot.

1641
01:42:37,700 --> 01:42:38,800
We never really tested it.

1642
01:42:38,800 --> 01:42:43,800
We just kind of threw it in there and so I feel like that's very

1643
01:42:43,800 --> 01:42:44,700
likely to be wrong.

1644
01:42:44,800 --> 01:42:47,700
Indirect and quickly, there shouldn't be a need for the clip masks.

1645
01:42:47,700 --> 01:42:52,600
The Fill wrecked still needs to be rounded up down as the UV 0.

1646
01:42:52,600 --> 01:42:54,700
1 comparison should make it redundant.

1647
01:42:54,700 --> 01:42:57,300
I think that's a very good point.

1648
01:43:00,300 --> 01:43:01,700
That's a very, very good point.

1649
01:43:01,700 --> 01:43:03,900
So I think both of those things are probably true.

1650
01:43:07,700 --> 01:43:08,500
Let's take a look.

1651
01:43:17,700 --> 01:43:21,900
So here's draw a rectangle and we're in the fast case here, which is

1652
01:43:21,900 --> 01:43:22,500
this case.

1653
01:43:23,500 --> 01:43:25,600
So there is the start and end the Basques.

1654
01:43:25,600 --> 01:43:26,400
You can see them there.

1655
01:43:32,100 --> 01:43:33,900
And we're just looking up, which one of them are going to do.

1656
01:43:35,500 --> 01:43:38,800
Right, we say, okay.

1657
01:43:43,400 --> 01:43:46,500
Let's go ahead and and see whether we need to do either of them.

1658
01:43:46,800 --> 01:43:47,600
Take the star clip.

1659
01:43:47,600 --> 01:43:52,200
Mask will take the end clip mask and off we go and then we come in

1660
01:43:52,200 --> 01:43:56,700
here, we start with the start clipping mask and we always use it and

1661
01:43:56,700 --> 01:44:00,500
then we only switch to the end clip mask at the end here.

1662
01:44:00,800 --> 01:44:06,000
So yeah if we if we have a wider rectangle, if we have a narrow

1663
01:44:06,000 --> 01:44:07,300
rectangle that wouldn't work.

1664
01:44:08,400 --> 01:44:10,500
So yeah, I think what we want to do here is say

1665
01:44:13,700 --> 01:44:18,000
If we know that we're not going to fill enough pixels, we need to add

1666
01:44:18,000 --> 01:44:18,600
them together.

1667
01:44:21,000 --> 01:44:21,500
Nice.

1668
01:44:25,700 --> 01:44:27,600
And that's not particularly difficult, right?

1669
01:44:27,800 --> 01:44:31,600
All we're talking about here is like start clip mask.

1670
01:44:33,600 --> 01:44:35,000
And the end clip mask.

1671
01:44:43,400 --> 01:44:45,700
We're just talking about that, right?

1672
01:44:46,600 --> 01:44:47,900
Where we and these two together.

1673
01:44:47,900 --> 01:44:50,700
And so, the only question if because again, that'll make sure that it

1674
01:44:50,700 --> 01:44:54,700
will only use what's available in both the start and end clip Master,

1675
01:44:54,700 --> 01:44:56,100
they're actually work together.

1676
01:44:57,600 --> 01:44:59,800
but the problem here is, we need

1677
01:45:00,000 --> 01:45:04,000
Made to determine when that actually needs to happen, right?

1678
01:45:04,600 --> 01:45:09,400
And the case for that needs to happen is if the fill wrecked Max x

1679
01:45:09,400 --> 01:45:12,300
minus the full erect in X, right?

1680
01:45:13,100 --> 01:45:17,300
If that is going to be less than or equal to 4, I believe, right?

1681
01:45:17,300 --> 01:45:24,400
So if if the total total number of pixels that we're doing is, you

1682
01:45:24,400 --> 01:45:29,100
know, is 0 1, 2 or 3

1683
01:45:32,900 --> 01:45:35,700
And I guess for wouldn't matter because the start would be full.

1684
01:45:35,700 --> 01:45:40,400
So I guess it's really just three right at the total number of pixels

1685
01:45:40,600 --> 01:45:43,100
that we're going to be doing is less than or equal to 3.

1686
01:45:43,100 --> 01:45:47,500
Then we know that we're inside a single the entire rectangle fits

1687
01:45:47,500 --> 01:45:49,800
inside a single vertical column of four pixels.

1688
01:45:50,100 --> 01:45:53,100
We need to make sure that we use both the start and and clip masks in

1689
01:45:53,100 --> 01:45:55,400
that case, believe that's the case.

1690
01:46:05,100 --> 01:46:08,100
Now, I don't know that we're actually using any of those rectangles

1691
01:46:08,100 --> 01:46:11,400
that would actually fall into this category, unfortunately.

1692
01:46:12,700 --> 01:46:15,900
So yeah.

1693
01:46:24,700 --> 01:46:27,700
I'm not sure we can really test this in any useful way.

1694
01:46:42,700 --> 01:46:46,100
I suppose if I turned off some things, we could see what the sides of

1695
01:46:46,100 --> 01:46:50,100
that rectangle was when it was being drawn like right now, you can see

1696
01:46:50,100 --> 01:46:51,700
that there's kind of a little weirdness to it.

1697
01:46:51,700 --> 01:46:53,500
I think that must be incorrect.

1698
01:46:53,600 --> 01:46:55,600
Although I don't know if that's just because of Z fighting because we

1699
01:46:55,600 --> 01:46:59,000
can't actually tell when we're still drawing stuff here.

1700
01:46:59,400 --> 01:47:00,900
What if I turned off?

1701
01:47:05,700 --> 01:47:09,200
Anything that wasn't pushed wrecked there.

1702
01:47:09,700 --> 01:47:11,300
So we weren't getting any of those.

1703
01:47:11,300 --> 01:47:16,100
What I could do is just say like okay in render group push wrecked.

1704
01:47:23,200 --> 01:47:24,200
Let's see.

1705
01:47:28,300 --> 01:47:31,600
Well, the problem is that push for outline actually uses that I

1706
01:47:31,600 --> 01:47:31,800
suppose.

1707
01:47:31,800 --> 01:47:34,800
What I could do here is just do like this sort of thing.

1708
01:47:49,700 --> 01:47:51,000
This is, this is not going to be.

1709
01:47:55,400 --> 01:47:57,600
I will do it a slightly different way.

1710
01:48:02,800 --> 01:48:05,700
So I'm going to go into entity, I'm just going to turn off.

1711
01:48:08,700 --> 01:48:10,400
Places where I am drawing that.

1712
01:48:10,500 --> 01:48:12,100
So that's in traversable.

1713
01:48:13,900 --> 01:48:16,000
I'm just going to go ahead and say don't do that.

1714
01:48:18,200 --> 01:48:19,000
So, there we go.

1715
01:48:28,700 --> 01:48:31,000
And now we should be able to test these a little bit better.

1716
01:48:40,200 --> 01:48:42,800
so yeah, you can kind of see their like

1717
01:48:44,800 --> 01:48:46,700
Definitely not correct.

1718
01:48:48,900 --> 01:48:50,300
So, let's take a look at that.

1719
01:48:58,100 --> 01:49:00,800
so yeah, if the fill wrecked

1720
01:49:07,500 --> 01:49:11,100
One thing I do want to do is I want to see if zero here.

1721
01:49:11,200 --> 01:49:14,800
Let me take this out and let me take a look at config as well.

1722
01:49:16,900 --> 01:49:18,600
I'm going to set this true.

1723
01:49:18,600 --> 01:49:20,900
What was the 30-ish?

1724
01:49:24,100 --> 01:49:24,600
Here we go.

1725
01:49:30,300 --> 01:49:33,500
So that's just how that's working at the moment.

1726
01:49:36,400 --> 01:49:39,400
so, essentially what we need to do is make sure that we're actually

1727
01:49:39,400 --> 01:49:40,700
doing this test correctly

1728
01:49:44,200 --> 01:49:45,300
Because maybe we weren't.

1729
01:49:49,400 --> 01:49:51,000
So, let's see how that was working.

1730
01:49:51,600 --> 01:49:53,100
So the fill wrecked.

1731
01:49:57,600 --> 01:50:01,000
So the this fill wrecked is not the rounded version, right?

1732
01:50:04,700 --> 01:50:05,100
Somewhere.

1733
01:50:05,100 --> 01:50:10,900
We must round this up to 4 pixels at a time, although I don't know

1734
01:50:10,900 --> 01:50:12,100
where that actually is happening.

1735
01:50:12,100 --> 01:50:13,300
So let's take a look at that.

1736
01:50:15,300 --> 01:50:16,300
Let's see.

1737
01:50:26,900 --> 01:50:28,500
Min max and Min why?

1738
01:50:34,300 --> 01:50:35,900
And we do plus equals four.

1739
01:50:45,400 --> 01:50:48,800
So I'm not sure where that's actually happening.

1740
01:51:01,400 --> 01:51:02,100
Interesting.

1741
01:51:03,800 --> 01:51:07,800
So I guess we never actually bother rounding this.

1742
01:51:09,000 --> 01:51:09,700
At all.

1743
01:51:25,800 --> 01:51:26,500
Am I right?

1744
01:51:32,800 --> 01:51:33,100
Hmm.

1745
01:51:36,500 --> 01:51:38,100
Something is very confusing here.

1746
01:51:38,800 --> 01:51:40,100
I don't really understand.

1747
01:51:40,100 --> 01:51:42,400
I'm going to have to double-check this here because I'm missing

1748
01:51:42,400 --> 01:51:43,600
something crucial.

1749
01:51:44,000 --> 01:51:50,100
So when we start out and we just grab this here,

1750
01:51:54,200 --> 01:51:59,100
here's our row pointer, and here's our Min X Min y, right?

1751
01:52:00,200 --> 01:52:04,700
And what I don't super understand is I don't see where this is getting

1752
01:52:04,800 --> 01:52:10,600
aligned to, you know, where Min X is getting a line to 24.

1753
01:52:11,900 --> 01:52:12,500
Oh, there it is.

1754
01:52:12,600 --> 01:52:14,100
I see there.

1755
01:52:14,100 --> 01:52:14,700
It is, right there.

1756
01:52:16,000 --> 01:52:20,400
So this expands Min X Out 24 and this expands Max, except for okay,

1757
01:52:20,400 --> 01:52:21,000
good good, good.

1758
01:52:21,100 --> 01:52:25,000
I don't know why I was looking looked right past it, so this does the

1759
01:52:25,000 --> 01:52:28,100
rounding to like broaden the thing out so that were properly looking

1760
01:52:28,100 --> 01:52:29,700
at the right number of values.

1761
01:52:33,100 --> 01:52:37,800
And when we look at those two, I guess the problem here, right?

1762
01:52:37,800 --> 01:52:42,600
Is that since this is post expansion, it will always actually be

1763
01:52:42,600 --> 01:52:43,400
greater than that.

1764
01:52:43,400 --> 01:52:47,900
So because remember, if we expand once it's expanded it will always

1765
01:52:47,900 --> 01:52:51,300
occupy at least one row of pixels there, right?

1766
01:52:51,300 --> 01:52:52,800
If it's going to draw anything at all.

1767
01:52:53,400 --> 01:52:56,500
So we actually need to do here is we need to make sure that if we

1768
01:52:56,500 --> 01:52:57,100
ended up.

1769
01:52:57,300 --> 01:52:59,700
So when I did the less for that was incorrect.

1770
01:53:00,100 --> 01:53:02,600
It's really just if we end up with exactly four,

1771
01:53:02,800 --> 01:53:03,600
Exhales to fill.

1772
01:53:03,900 --> 01:53:07,700
So we're just doing one column, then they need to be added together

1773
01:53:08,300 --> 01:53:11,000
and I think that's the only thing, right?

1774
01:53:12,200 --> 01:53:13,500
That should have been the only thing anyway.

1775
01:53:16,800 --> 01:53:17,600
And yet.

1776
01:53:21,000 --> 01:53:22,500
Does not appear to be so.

1777
01:53:26,700 --> 01:53:27,500
Why not?

1778
01:53:34,300 --> 01:53:34,700
Well.

1779
01:53:36,100 --> 01:53:39,700
I want to step in been a long time since I wrote that code.

1780
01:53:54,900 --> 01:53:55,700
It's going on here.

1781
01:53:55,900 --> 01:53:56,400
Are we in?

1782
01:54:02,100 --> 01:54:05,100
Well, we're in a debug build, why?

1783
01:54:07,100 --> 01:54:10,300
Why do I not seem to have a compiled version?

1784
01:54:12,900 --> 01:54:13,700
Draw a rectangle.

1785
01:54:17,600 --> 01:54:20,400
Oh, duh, that's in the platform layer.

1786
01:54:20,500 --> 01:54:22,000
It doesn't get hot Reloaded.

1787
01:54:35,200 --> 01:54:36,200
There we go.

1788
01:54:37,600 --> 01:54:38,400
Much nicer.

1789
01:54:44,500 --> 01:54:45,100
All right.

1790
01:54:50,000 --> 01:54:50,400
Yes.

1791
01:54:50,500 --> 01:54:52,600
We have to fix that Jitter at some point.

1792
01:54:54,200 --> 01:54:55,000
Drives me nuts.

1793
01:54:55,300 --> 01:54:56,700
So that's much much nicer.

1794
01:54:56,700 --> 01:54:59,400
Now it draws the right size rectangle, so that's good.

1795
01:55:00,300 --> 01:55:01,300
Everyone's happy.

1796
01:55:04,000 --> 01:55:05,300
I think that's good to go.

1797
01:55:10,400 --> 01:55:14,900
And then the other one is a lot more subtle but I don't think it's but

1798
01:55:14,900 --> 01:55:16,500
it's pretty easy to do.

1799
01:55:17,600 --> 01:55:22,900
So if we go ahead and hear it, let's hear is our our draw a rectangle

1800
01:55:22,900 --> 01:55:26,600
quickly routine which, of course is not actually, it's actually draws

1801
01:55:26,600 --> 01:55:27,700
a textured rectangle.

1802
01:55:28,000 --> 01:55:32,400
The in aptly named the point that he was making about this, one is a

1803
01:55:32,400 --> 01:55:36,700
good point and that's essentially that hey, you know, we've got this

1804
01:55:37,000 --> 01:55:39,300
start and end clip masks here.

1805
01:55:40,000 --> 01:55:43,000
We're doing some work not much work but we're doing some work to set

1806
01:55:43,000 --> 01:55:48,100
up but if you look at what happens with them, the right mask should

1807
01:55:48,100 --> 01:55:49,800
always be taken care of them, right?

1808
01:55:50,200 --> 01:55:54,500
And the reason why I thought I needed these clip masks in here was

1809
01:55:54,500 --> 01:55:59,000
because hey, you know, we've got a clipping region that comes in from

1810
01:55:59,000 --> 01:56:02,900
the outer code that we need to obey, right?

1811
01:56:08,900 --> 01:56:09,600
but,

1812
01:56:11,300 --> 01:56:14,600
We always want that to be aligned anyway, right?

1813
01:56:14,700 --> 01:56:18,700
We never want to be drawing something when we do our like are tiled

1814
01:56:18,700 --> 01:56:23,600
rendering, we would never want those tiles not to be clipped properly

1815
01:56:24,500 --> 01:56:26,600
to a 4 byte boundary, right?

1816
01:56:27,500 --> 01:56:31,000
So I mean for my boundary, a for Pixel boundary which is 16 bytes

1817
01:56:31,000 --> 01:56:35,400
because that's how our that's our right granularity and so we kind of

1818
01:56:35,400 --> 01:56:37,200
need that to be happening anyway.

1819
01:56:39,300 --> 01:56:42,600
And so, in fact, we probably want them a cache line boundary aligned,

1820
01:56:42,600 --> 01:56:43,100
right?

1821
01:56:43,200 --> 01:56:48,100
We probably want them 64 byte aligned so that the different tiles

1822
01:56:48,100 --> 01:56:50,600
aren't sharing part of a cache line on the overlap as well.

1823
01:56:50,600 --> 01:56:52,800
So there's a lot of stuff that we probably want to do there.

1824
01:56:53,900 --> 01:56:57,200
So what that means is that we don't really need these start and unclip

1825
01:56:57,200 --> 01:56:59,800
mass because since we're never worried about,

1826
01:57:00,700 --> 01:57:04,100
Since we know that our clip region will always be aligned to those

1827
01:57:05,800 --> 01:57:07,400
those four by four is right?

1828
01:57:09,200 --> 01:57:09,600
Oh,

1829
01:57:12,300 --> 01:57:13,400
No but you know what?

1830
01:57:14,100 --> 01:57:16,300
There is one reason why we still have to do it.

1831
01:57:16,900 --> 01:57:21,100
Those start in and clip masks we do need because otherwise they

1832
01:57:21,100 --> 01:57:24,200
wouldn't work with stuff like this.

1833
01:57:27,400 --> 01:57:31,000
this guy, remember this, clipping that guy needs clipping to a

1834
01:57:31,000 --> 01:57:34,000
rectangle in addition, which is not going to be pixel aligned

1835
01:57:37,200 --> 01:57:37,700
All right.

1836
01:58:22,200 --> 01:58:26,000
So I think that's that's that and hey, guess what?

1837
01:58:26,100 --> 01:58:28,000
We are literally just in time.

1838
01:58:29,400 --> 01:58:30,400
For the Q&A.

1839
01:58:31,700 --> 01:58:37,000
So I think we have successfully done all of our issues and we can end

1840
01:58:37,000 --> 01:58:40,200
the new year with, with nothing on the actual issue list except this

1841
01:58:40,200 --> 01:58:41,400
one, which is done.

1842
01:58:41,400 --> 01:58:47,100
I just have to actually recompile and switch to it, but that's good.

1843
01:58:47,100 --> 01:58:52,300
Unfortunately, we still haven't done the fix the room testing thing.

1844
01:58:52,300 --> 01:58:54,400
But that wasn't on our issue is so that's okay.

1845
01:58:55,300 --> 01:58:58,800
I'm not gonna complain about that one, but I'll

1846
01:58:59,000 --> 01:59:03,000
The Q&A here a little a little bit early to minutes early, since

1847
01:59:03,000 --> 01:59:04,200
there's nothing else to do.

1848
01:59:11,300 --> 01:59:12,800
And happy New Year k'nuckles.

1849
01:59:13,800 --> 01:59:14,200
I guess.

1850
01:59:14,200 --> 01:59:15,300
Are you in?

1851
01:59:16,100 --> 01:59:17,100
Where are you in?

1852
01:59:17,700 --> 01:59:19,600
You're not in Moscow, are you?

1853
01:59:19,600 --> 01:59:20,700
I thought maybe you were.

1854
01:59:20,800 --> 01:59:21,600
I can't remember.

1855
01:59:35,800 --> 01:59:38,900
Jim says, in the compression code, there is an assert literal count

1856
01:59:38,900 --> 01:59:39,600
equals 0.

1857
01:59:39,600 --> 01:59:43,100
It seems to fire on some files, should the literal buffer be flushed

1858
01:59:43,100 --> 01:59:45,400
after the loop in case it didn't end.

1859
01:59:46,900 --> 01:59:48,400
On a run.

1860
02:00:02,400 --> 02:00:04,600
So, let's see.

1861
02:00:13,500 --> 02:00:14,000
Well.

1862
02:00:17,300 --> 02:00:21,700
So really there must be a bug in that case.

1863
02:00:24,500 --> 02:00:26,900
I mean, you can see how it's meant to work anyway, and you know, we

1864
02:00:26,900 --> 02:00:30,300
wrote this code kind of fast and whatever.

1865
02:00:30,300 --> 02:00:34,600
So, you know, I'm not going to pretend that there's not lots of

1866
02:00:34,600 --> 02:00:36,500
possibilities for four nuts stuff in here.

1867
02:00:36,500 --> 02:00:41,300
But so what's supposed to happen is in equals in, end is supposed to

1868
02:00:41,300 --> 02:00:46,200
mean, we got to the end of the buffer and so at that point, right?

1869
02:00:46,600 --> 02:00:49,400
At the at the end of the buffer, it's supposed to flush.

1870
02:00:50,000 --> 02:00:51,500
It supposed to go in here and flush.

1871
02:00:52,700 --> 02:00:58,500
Right, I guess the problem here is that in equals in and break will

1872
02:00:58,500 --> 02:01:00,500
trigger first.

1873
02:01:00,500 --> 02:01:04,600
So the problem, I think the whole problem is really just

1874
02:01:16,600 --> 02:01:18,400
This probably has to happen.

1875
02:01:22,400 --> 02:01:22,800
Here.

1876
02:01:42,900 --> 02:01:44,200
And yeah.

1877
02:01:46,200 --> 02:01:47,900
Let's just check that a little bit.

1878
02:02:12,300 --> 02:02:15,100
I think you can also do test now as well, right?

1879
02:02:16,900 --> 02:02:18,100
Matt succeeded or think.

1880
02:02:18,100 --> 02:02:18,700
Six is seated.

1881
02:02:18,700 --> 02:02:19,200
Anyway.

1882
02:02:23,300 --> 02:02:23,900
All right.

1883
02:02:26,500 --> 02:02:27,800
We should probably add that here.

1884
02:02:46,200 --> 02:02:48,100
Hopefully, that helps.

1885
02:03:05,800 --> 02:03:08,700
Yeah, the size that are you going to consider resize and debug display

1886
02:03:08,700 --> 02:03:09,800
for a lower display resolutions?

1887
02:03:09,800 --> 02:03:11,900
Or would that not really be worthwhile since it's not part of the

1888
02:03:11,900 --> 02:03:12,600
final game.

1889
02:03:13,000 --> 02:03:21,600
Yeah, the latter, I would say again stuff like that kind of depends in

1890
02:03:21,600 --> 02:03:26,400
terms of like a real project where, you know, you're not dealing with

1891
02:03:26,400 --> 02:03:29,600
constraints of like a, it's an educational stream and we have to, you

1892
02:03:29,600 --> 02:03:33,500
know, make certain concessions to how we do things and stuff like

1893
02:03:33,500 --> 02:03:33,900
that.

1894
02:03:37,100 --> 02:03:43,000
Basically, what happens is, you have to think about what your end goal

1895
02:03:43,000 --> 02:03:44,100
is for the code.

1896
02:03:44,400 --> 02:03:47,300
And so, in some circumstances I would say you should in some

1897
02:03:47,300 --> 02:03:47,800
circumstances.

1898
02:03:47,800 --> 02:03:50,600
I would say you shouldn't in the case of him a hero I think that would

1899
02:03:50,600 --> 02:03:52,200
probably just be a waste of time, right?

1900
02:03:52,200 --> 02:03:54,200
Because we've gone over how to do stuff like that.

1901
02:03:54,200 --> 02:04:02,600
But you know we we it's not a mystery like I hopefully anyone who's

1902
02:04:02,600 --> 02:04:05,400
followed the series can go go do that if that's what they want to do.

1903
02:04:07,800 --> 02:04:11,600
But in other circumstances, it might make sense to think of that as a

1904
02:04:11,600 --> 02:04:14,600
more higher priority item and the case that's more higher programs

1905
02:04:14,600 --> 02:04:17,500
like let if you were trying to build like an engine or something that

1906
02:04:17,500 --> 02:04:20,400
you're going to use on multiple projects and there's a long lifetime

1907
02:04:20,400 --> 02:04:25,000
for it and things like that, then it makes sense to pay attention to

1908
02:04:25,000 --> 02:04:26,700
human factors, sorts of things.

1909
02:04:27,400 --> 02:04:31,200
When you're, you know, when you're just talking about debug code or

1910
02:04:31,200 --> 02:04:32,000
utility code,

1911
02:04:33,800 --> 02:04:34,400
right?

1912
02:04:34,400 --> 02:04:40,700
So the way that I would think about that is just how often do you do

1913
02:04:40,700 --> 02:04:44,400
you envision this code being used, you know, try to spend the time

1914
02:04:44,400 --> 02:04:47,800
proportional to how much you think will actually be happening there.

1915
02:04:49,800 --> 02:04:50,700
So for example,

1916
02:04:52,900 --> 02:04:55,700
You know, let's say we're building a product like Unity or something

1917
02:04:55,700 --> 02:04:56,600
like this, right?

1918
02:04:56,700 --> 02:05:00,400
Where we're trying to ship like an engine that lots of people are

1919
02:05:00,400 --> 02:05:02,700
going to use, then it makes a lot of sense to go.

1920
02:05:02,700 --> 02:05:07,200
Oh, hey, we should make sure look, our debug code is aware of the

1921
02:05:07,200 --> 02:05:12,200
screen size and has multiple things like this and all that sorts of

1922
02:05:12,200 --> 02:05:13,000
stuff, right?

1923
02:05:14,300 --> 02:05:21,100
And so I think that's like the, their way to think about it is just is

1924
02:05:21,100 --> 02:05:22,700
this part of the end product or not.

1925
02:05:22,700 --> 02:05:26,200
And just saying part of the end product is, is like I said, it's kind

1926
02:05:26,200 --> 02:05:31,000
of a little bit of a deeper question because it doesn't just mean

1927
02:05:31,000 --> 02:05:34,700
like, oh, if no player is ever going to see this and don't do it, it

1928
02:05:34,700 --> 02:05:37,600
could be that if lots of developers are going to use it, you know,

1929
02:05:37,600 --> 02:05:40,500
more than just the one who's sitting here and knows what machine

1930
02:05:40,500 --> 02:05:41,100
they're working on.

1931
02:05:41,600 --> 02:05:44,000
So, if I was a team of like, you know, on team of

1932
02:05:44,100 --> 02:05:47,600
Any people I might take more time even if we're not show me as an

1933
02:05:47,600 --> 02:05:50,500
engine, I might take more time to worry about human factors stuff in

1934
02:05:50,500 --> 02:05:54,100
there because I know it's x 20, how many people are going to have to

1935
02:05:54,100 --> 02:05:54,900
deal with this?

1936
02:05:55,100 --> 02:05:57,200
Then it starts to make a little more sense, right?

1937
02:05:58,600 --> 02:05:59,800
and so, you always have to

1938
02:06:00,000 --> 02:06:00,500
Fry.

1939
02:06:00,500 --> 02:06:04,300
I mean, every exercise in programming is about trying to make sure

1940
02:06:04,300 --> 02:06:09,800
that you're spending your time in ways that are going to be useful on

1941
02:06:09,800 --> 02:06:10,800
handmade hero.

1942
02:06:10,800 --> 02:06:15,700
That tends to be an odd decision because what's useful tends to be, is

1943
02:06:15,700 --> 02:06:17,600
there something educational to be shown here?

1944
02:06:18,300 --> 02:06:21,600
But in a project that has nothing to do with that, the product that

1945
02:06:21,600 --> 02:06:24,500
just about shipping a game or shipping an engine or shipping whatever,

1946
02:06:25,000 --> 02:06:27,700
then the calculus is still the same, but the goal changes.

1947
02:06:27,700 --> 02:06:29,800
And so then it becomes about well or

1948
02:06:30,000 --> 02:06:30,600
Right.

1949
02:06:31,700 --> 02:06:35,200
I still want to be making the exact same kind of a mental trade-off

1950
02:06:35,200 --> 02:06:38,700
model where I'm saying, where is the most useful place for my time but

1951
02:06:39,000 --> 02:06:42,500
the metric is, how much time will this save other people?

1952
02:06:42,700 --> 02:06:46,500
How good will this make the end product for the people who eventually

1953
02:06:46,500 --> 02:06:47,400
buy this thing?

1954
02:06:48,400 --> 02:06:51,200
You know, is this something that's going to be used in the future?

1955
02:06:51,200 --> 02:06:51,900
How much time will?

1956
02:06:51,900 --> 02:06:53,800
I save my future self on future projects.

1957
02:06:54,100 --> 02:06:56,100
All of those things have to start to come into it.

1958
02:06:56,100 --> 02:06:59,800
Then at that point because now your metrics of what makes

1959
02:07:00,300 --> 02:07:02,400
In terms of where to spend your time change.

1960
02:07:04,000 --> 02:07:06,100
So on handmade hero, what I spend the time do I know?

1961
02:07:06,100 --> 02:07:08,500
There's no reason for it, I'm not teaching anything useful at that

1962
02:07:08,500 --> 02:07:11,600
point, obviously, we don't eat it because we're always on a 1920 by

1963
02:07:11,600 --> 02:07:12,600
1080 display.

1964
02:07:12,900 --> 02:07:21,500
So it would just be a waste of time but in another circumstance it may

1965
02:07:21,500 --> 02:07:22,900
very well not be worth the time.

1966
02:07:23,200 --> 02:07:26,200
And so it's important to distinguish between what's a waste of time to

1967
02:07:26,200 --> 02:07:28,600
us is not a waste of time to somebody else.

1968
02:07:29,300 --> 02:07:33,700
And all of that is just a part of being aware of the circumstances.

1969
02:07:33,900 --> 02:07:37,700
Programming who is being affected by it and whether or not those

1970
02:07:37,700 --> 02:07:40,100
decisions make sense in the greater context.

1971
02:07:50,500 --> 02:07:54,300
We bit off topic but have you ever considered setting up a green

1972
02:07:54,300 --> 02:07:56,300
screen chroma key for your stream?

1973
02:07:56,300 --> 02:08:02,300
No, I haven't again just because I don't really care much about

1974
02:08:02,300 --> 02:08:06,700
production values because I feel like that's just a rat hole that you

1975
02:08:06,700 --> 02:08:11,100
can go down and the stream is just here to provide programming

1976
02:08:11,100 --> 02:08:12,500
information for people who want it.

1977
02:08:12,500 --> 02:08:20,100
And you know, I intentionally never have gone out of my way to try and

1978
02:08:20,100 --> 02:08:20,500
encourage.

1979
02:08:20,600 --> 02:08:21,200
Rich people to come.

1980
02:08:21,200 --> 02:08:21,700
Watch it.

1981
02:08:21,900 --> 02:08:24,500
It's just here for people who want to come watch it.

1982
02:08:25,100 --> 02:08:26,400
We don't advertise.

1983
02:08:26,400 --> 02:08:28,200
We don't have high production values.

1984
02:08:28,200 --> 02:08:31,200
We don't we don't really do anything other than just coding.

1985
02:08:33,700 --> 02:08:37,900
And so you know, doing anything that fusses with trying to make the

1986
02:08:37,900 --> 02:08:40,800
camera better or something like that is is just in time.

1987
02:08:40,800 --> 02:08:44,500
Better spent making programming resources for the goals of this

1988
02:08:44,500 --> 02:08:45,000
stream.

1989
02:08:49,200 --> 02:08:53,200
What are your 2017 resolutions for handmade hero?

1990
02:08:54,100 --> 02:08:54,300
None?

1991
02:08:54,300 --> 02:08:57,400
Really like I said, just try to

1992
02:09:00,000 --> 02:09:00,300
Out.

1993
02:09:00,300 --> 02:09:01,400
Useful coding.

1994
02:09:05,500 --> 02:09:06,300
Stuff right.

1995
02:09:22,200 --> 02:09:23,300
MTS box.

1996
02:09:23,400 --> 02:09:24,200
Shouldn't the clip?

1997
02:09:24,200 --> 02:09:27,700
Rect only be rescaled at the same point that the offset is done.

1998
02:09:27,800 --> 02:09:29,800
Only the main buffer should have it.

1999
02:09:32,200 --> 02:09:36,200
Well no, I don't think so.

2000
02:09:36,300 --> 02:09:38,100
Let me just double-check

2001
02:09:44,400 --> 02:09:45,000
No.

2002
02:09:45,500 --> 02:09:48,600
So if you take a look at what happens here, opengl buying frame

2003
02:09:48,600 --> 02:09:53,100
buffer, always uses the window within the window height in all cases,

2004
02:09:53,300 --> 02:09:53,800
right?

2005
02:09:55,200 --> 02:10:00,800
So whenever it does bind frame buffer, it's going to it's going to set

2006
02:10:00,800 --> 02:10:00,900
up.

2007
02:10:00,900 --> 02:10:06,500
That scaling transform the only thing that changes between the two is

2008
02:10:08,700 --> 02:10:10,800
Is the offset.

2009
02:10:11,400 --> 02:10:18,600
So so I believe the answer to that is no the scaling always occurs.

2010
02:10:37,000 --> 02:10:41,000
I know high production value stream looks good and there's a frame

2011
02:10:41,000 --> 02:10:45,200
around the scare cam and a nice little fade in time or that seems like

2012
02:10:45,200 --> 02:10:46,900
more effort than a lot of what I see.

2013
02:10:48,000 --> 02:10:52,600
Well, yeah, I mean, I probably says more about the low production

2014
02:10:52,600 --> 02:10:58,800
values elsewhere, but that the timer is actually just adapted from an

2015
02:10:58,800 --> 02:11:00,100
MP3 player I wrote.

2016
02:11:00,900 --> 02:11:02,600
And so I didn't write any of that code new.

2017
02:11:02,600 --> 02:11:06,500
I just copied it and we needed a timer to make sure that we

2018
02:11:06,700 --> 02:11:07,300
Schedule.

2019
02:11:07,300 --> 02:11:10,200
So, the only thing I added there was the bare minimum necessary again,

2020
02:11:10,200 --> 02:11:11,100
for the stream.

2021
02:11:12,400 --> 02:11:17,600
And the reason that there's a window around me was because we found

2022
02:11:17,600 --> 02:11:21,300
when we were doing the streams that I wouldn't know when I was

2023
02:11:21,300 --> 02:11:24,500
programming that the that I was programming in the area where my head

2024
02:11:24,500 --> 02:11:25,900
was and people couldn't see it.

2025
02:11:26,300 --> 02:11:29,300
So again that was entirely based on necessity, not on production

2026
02:11:29,300 --> 02:11:29,700
values.

2027
02:11:29,700 --> 02:11:32,400
We weren't trying to make it look good when I first started doing the

2028
02:11:32,400 --> 02:11:34,900
stream, there wasn't one there, but we found it was a problem.

2029
02:11:35,700 --> 02:11:36,600
So again, any time

2030
02:11:36,700 --> 02:11:40,000
Time, the thing get, is it important for the educational purpose?

2031
02:11:40,900 --> 02:11:43,500
I do it, but if it's not, I tend not to do it.

2032
02:12:34,800 --> 02:12:38,700
Zack to said that black box is a window, not just an overlay in OBS.

2033
02:12:39,000 --> 02:12:39,400
Yes.

2034
02:12:39,400 --> 02:12:40,000
Correct.

2035
02:12:40,000 --> 02:12:46,200
So that is not an aspect of OBS.

2036
02:12:46,600 --> 02:12:51,600
That's a thing that's actually on my actual screen and it's there as a

2037
02:12:51,600 --> 02:12:57,000
blocker to prevent me from from basically.

2038
02:12:57,000 --> 02:12:59,600
It's there to make sure that anything you can't see.

2039
02:12:59,600 --> 02:13:04,400
I can't see so that I know, like when I come down here and I start

2040
02:13:04,600 --> 02:13:08,200
Thing on this line I know that when I get to where my head is I can

2041
02:13:08,200 --> 02:13:10,600
see exactly where it is and I won't do that, right?

2042
02:13:32,800 --> 02:13:37,600
And yeah, I don't really know I would you know, OBS is I mean it's

2043
02:13:37,600 --> 02:13:38,500
free software whatever.

2044
02:13:38,500 --> 02:13:49,900
So you know, I'm glad it's there at all but definitely the I don't

2045
02:13:49,900 --> 02:13:53,000
understand why streaming programs wouldn't have it built-in that those

2046
02:13:53,000 --> 02:13:55,600
things would be, you know, sort of

2047
02:13:57,300 --> 02:14:00,900
Blocked out so that the streamer knows that it's there.

2048
02:14:00,900 --> 02:14:02,800
It seems like that would be a pretty basic feature that you would

2049
02:14:02,800 --> 02:14:03,400
want.

2050
02:14:04,500 --> 02:14:07,600
Jesse are Meyer, please consider demonstrating videos, command list

2051
02:14:07,600 --> 02:14:10,600
extension as a way of thinking about modern Graphics Dev.

2052
02:14:15,800 --> 02:14:19,400
I guess what I would say is I feel like that's a little bit too far

2053
02:14:19,400 --> 02:14:23,700
down the 3D rendering specificity rabbit hole at the moment.

2054
02:14:24,700 --> 02:14:25,400
So I don't know that.

2055
02:14:25,400 --> 02:14:27,700
That's something that's really going to be within the scope of what we

2056
02:14:27,700 --> 02:14:28,700
do on the Stream.

2057
02:14:32,600 --> 02:14:38,500
So I don't know that that's ever going to actually happen in in the

2058
02:14:38,600 --> 02:14:40,200
sort of handmade hero.

2059
02:14:40,200 --> 02:14:46,600
That's kind of like advanced advanced 3D because in order to talk

2060
02:14:46,600 --> 02:14:50,700
about why you even want that or need that you have to get to a certain

2061
02:14:50,700 --> 02:14:53,300
point in terms of mead

2062
02:14:56,000 --> 02:14:58,000
That is that we're just not going to get to.

2063
02:15:03,700 --> 02:15:04,200
so,

2064
02:15:11,900 --> 02:15:12,300
Yeah.

2065
02:15:12,600 --> 02:15:16,000
So all right stretch

2066
02:15:19,000 --> 02:15:20,200
Let's close it down.

2067
02:15:26,000 --> 02:15:27,600
Alright everybody.

2068
02:15:27,600 --> 02:15:30,400
Thank you very much for joining me for another episode of handmade

2069
02:15:30,400 --> 02:15:30,600
here.

2070
02:15:30,600 --> 02:15:31,900
It's been a pleasure coding with you.

2071
02:15:31,900 --> 02:15:35,600
As always, if you want to follow along at home you can always pure to

2072
02:15:35,600 --> 02:15:38,800
the game on handmade hero dot-org and it comes to the source code.

2073
02:15:38,800 --> 02:15:42,800
If you want to play around with it, we also have a forum site.

2074
02:15:42,800 --> 02:15:43,500
You can go to.

2075
02:15:43,500 --> 02:15:48,500
If you want to discuss what you saw on the video or anything about

2076
02:15:48,500 --> 02:15:49,200
handmade hero.

2077
02:15:49,800 --> 02:15:52,500
We have a patreon page, you want to support the series, we have a

2078
02:15:52,500 --> 02:15:55,600
schedule, but if you want to know, when we're going to be live, and

2079
02:15:55,800 --> 02:15:57,500
I fixed it over Christmas break.

2080
02:15:58,000 --> 02:16:03,300
So the schedule about in theory, should be working and it does appear

2081
02:16:03,300 --> 02:16:05,000
to be working, at least I think.

2082
02:16:06,300 --> 02:16:09,300
Yeah, looks pretty good to me, I think that's right.

2083
02:16:12,100 --> 02:16:19,000
12 hours ago, four hours ago and one hour join us.

2084
02:16:19,000 --> 02:16:22,500
So one hour to three hours, that's correct, I guess roughly.

2085
02:16:23,500 --> 02:16:27,800
Yeah, and it was 7-Eleven so good news, the Tweet, but I believe has

2086
02:16:27,800 --> 02:16:29,800
been restored to proper functioning

2087
02:16:32,299 --> 02:16:34,700
I wish this said, I kind of want to check this.

2088
02:16:35,400 --> 02:16:36,700
When did it say it?

2089
02:16:36,799 --> 02:16:37,500
Yeah, 94.

2090
02:16:37,500 --> 02:16:38,200
So 10 a.m.

2091
02:16:38,200 --> 02:16:38,500
the stream.

2092
02:16:38,500 --> 02:16:39,500
Was started 11 a.m.

2093
02:16:39,500 --> 02:16:40,799
So that's about the right time.

2094
02:16:41,400 --> 02:16:42,100
That's all good.

2095
02:16:42,100 --> 02:16:42,600
Thank you.

2096
02:16:42,799 --> 02:16:44,400
Great, Amazon deal.

2097
02:16:44,400 --> 02:16:45,799
Yeah, fantastic.

2098
02:16:46,700 --> 02:16:51,200
So anyway, that's a, that's a all set up there as well.

2099
02:16:52,799 --> 02:16:54,799
And we also, of course, have an episode guide.

2100
02:16:54,799 --> 02:16:58,000
If you want to catch up with old episodes of the series, you can go

2101
02:16:58,000 --> 02:16:59,000
check that out as well.

2102
02:16:59,700 --> 02:17:00,799
That's about it for today.

2103
02:17:00,799 --> 02:17:02,000
And we

2104
02:17:02,200 --> 02:17:04,700
We'll be off tomorrow, on account of the fact that it's New Year's

2105
02:17:04,700 --> 02:17:04,900
Day.

2106
02:17:04,900 --> 02:17:10,700
So probably most people won't even be up in time to watch the stream,

2107
02:17:10,700 --> 02:17:14,900
but we'll be back to our regular regular schedule of Saturdays and

2108
02:17:14,900 --> 02:17:15,500
Sundays.

2109
02:17:15,900 --> 02:17:20,500
In January where we're going to do some upgrades for the renderer to

2110
02:17:20,500 --> 02:17:23,400
do a 3D and then we're going to start on the gameplay code.

2111
02:17:23,400 --> 02:17:29,299
So we've got to sort of fun things coming down the pipe and yeah, I

2112
02:17:29,299 --> 02:17:29,700
guess.

2113
02:17:29,900 --> 02:17:32,000
2017 will be the year of gameplay.

2114
02:17:32,000 --> 02:17:35,700
Coding, and handmade hero, which, of course, is not really something

2115
02:17:35,700 --> 02:17:39,400
that I'm super looking forward to because to be completely honest, I

2116
02:17:39,400 --> 02:17:43,700
don't really like gameplay coding, that's why I'm in engine program or

2117
02:17:43,700 --> 02:17:48,200
not a gameplay programmer, but what you going to do programming,

2118
02:17:48,299 --> 02:17:52,200
unfortunately is oftentimes about programming things.

2119
02:17:52,200 --> 02:17:54,299
You don't want to program as well as things you do want to burn

2120
02:17:54,299 --> 02:17:56,900
because not everything is going to be something you want to program.

2121
02:17:56,900 --> 02:17:59,900
And if you want to be able to Do complete projects by,

2122
02:18:00,000 --> 02:18:01,400
You're going to have to do that.

2123
02:18:01,799 --> 02:18:04,200
Maybe you can always get on a team where someone else does it for you.

2124
02:18:07,600 --> 02:18:11,200
But usually, you're not going to be that lucky.

2125
02:18:12,400 --> 02:18:15,600
Usually gonna have to do some programming things that are not your

2126
02:18:15,600 --> 02:18:16,299
favorite.

2127
02:18:16,900 --> 02:18:17,299
All right.

2128
02:18:17,299 --> 02:18:20,000
So anyway, that's that's it for today.

2129
02:18:20,600 --> 02:18:22,700
Thank you, everyone for joining me.

2130
02:18:22,700 --> 02:18:24,799
Let me just close this stuff down here.

2131
02:18:27,900 --> 02:18:28,299
There we go.

2132
02:18:29,299 --> 02:18:32,400
And I will see you all next week.

2133
02:18:32,400 --> 02:18:33,600
Take it easy, everybody.

