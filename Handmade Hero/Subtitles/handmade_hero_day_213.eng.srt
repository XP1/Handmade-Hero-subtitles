1
00:00:03,000 --> 00:00:05,200
Hello everyone, and welcome to handmade hero.

2
00:00:05,200 --> 00:00:08,200
The show we code a complete game live on stream.

3
00:00:09,300 --> 00:00:13,800
We are going to do some coding on our debug you.

4
00:00:13,800 --> 00:00:18,000
I today we've got a lot of it working and we did the integration with

5
00:00:18,000 --> 00:00:21,600
the game yesterday in terms of like unifying the UI between the two

6
00:00:21,600 --> 00:00:22,200
systems.

7
00:00:23,300 --> 00:00:26,300
And so now what I'd like to do today is just kind of like go in there

8
00:00:26,300 --> 00:00:29,500
and sort of play around with getting it all, you know, straightened

9
00:00:29,500 --> 00:00:33,400
out to the point where we can kind of navigate the debug info the way

10
00:00:33,400 --> 00:00:34,500
that we might want to.

11
00:00:34,900 --> 00:00:39,200
And it kind of looked like yesterday, just looking at it for a debug

12
00:00:39,200 --> 00:00:42,800
you I kind of felt like we might want to also pass some modifier Keys

13
00:00:42,800 --> 00:00:45,400
into the game for debugging purposes.

14
00:00:45,400 --> 00:00:48,200
Such as like whether the Ctrl alt or shift keys were down.

15
00:00:48,400 --> 00:00:51,700
That seemed like something that we might want to do again, not really

16
00:00:51,700 --> 00:00:52,600
for any kind of

17
00:00:53,100 --> 00:00:56,300
Gameplay purposes but actually just as part of the debug packet.

18
00:00:56,300 --> 00:00:59,600
So like when we pass it for example, the mass location and the mouse

19
00:00:59,600 --> 00:01:01,700
buttons which are only really used for debug,

20
00:01:04,000 --> 00:01:08,300
those would also include some modifier key information.

21
00:01:09,200 --> 00:01:10,400
So that's what I'm going to do today.

22
00:01:10,800 --> 00:01:12,500
It's Day 2 13 on him a hero.

23
00:01:12,500 --> 00:01:16,000
So if you preorder the game on handmade hero dot-org and you're trying

24
00:01:16,000 --> 00:01:18,200
to follow along with source code at home, you will want to take day

25
00:01:18,200 --> 00:01:22,300
212 source code and you'll want to unpack it into a directory so that

26
00:01:22,300 --> 00:01:26,700
you can you know match up with what I'm doing and do the changes

27
00:01:26,700 --> 00:01:28,500
yourself or play around with the changes yourself.

28
00:01:31,400 --> 00:01:33,700
So here we are at where we left things the other day.

29
00:01:34,300 --> 00:01:37,700
We did sort of have this this concept of being able to like hover over

30
00:01:37,700 --> 00:01:38,200
entities.

31
00:01:38,400 --> 00:01:41,000
We still haven't really figured out how we want to do sort of the hit

32
00:01:41,000 --> 00:01:42,500
detection when there's multiple entities.

33
00:01:42,500 --> 00:01:46,500
Like there's the space entity that kind of encompasses each individual

34
00:01:46,500 --> 00:01:50,100
room and, you know, depending on the random order in which the end of

35
00:01:50,100 --> 00:01:50,900
these get traversed.

36
00:01:50,900 --> 00:01:53,700
You know, sometimes I'll get pics of him but I can't pick a tree down

37
00:01:53,700 --> 00:01:55,400
here because it picks the space out of the first.

38
00:01:55,500 --> 00:01:58,600
Whereas I can, for example, pick one of these trees and so on.

39
00:01:58,800 --> 00:02:00,400
So, you know, at some point we probably

40
00:02:00,500 --> 00:02:03,100
Have to address how we want to do picking in order to make it more

41
00:02:03,100 --> 00:02:03,500
useful.

42
00:02:03,800 --> 00:02:07,100
We might just not allow space entities to be picked for now or, you

43
00:02:07,100 --> 00:02:08,199
know, something like that.

44
00:02:08,300 --> 00:02:11,100
So that you can only, you can pick the kind of entities that are more

45
00:02:11,100 --> 00:02:12,800
obvious, like these ones, which we can't pick.

46
00:02:12,800 --> 00:02:13,200
Right now.

47
00:02:13,800 --> 00:02:14,200
That's something.

48
00:02:14,200 --> 00:02:15,000
We should probably address.

49
00:02:15,300 --> 00:02:18,500
But then also what we kind of want to do is sort of, have a little

50
00:02:18,500 --> 00:02:20,300
more coherent idea what's going on over here.

51
00:02:20,400 --> 00:02:22,900
What I did yesterday was makeup so that I could kind of like highlight

52
00:02:22,900 --> 00:02:25,900
a bunch of edit of these guys and you can kind of see them displaying

53
00:02:25,900 --> 00:02:29,300
here, but there's a number of things that don't really quite work in

54
00:02:29,300 --> 00:02:30,300
this scenario.

55
00:02:30,400 --> 00:02:33,300
Do you know some of the interaction sort of work where I can look at

56
00:02:33,300 --> 00:02:34,100
some of these things?

57
00:02:34,300 --> 00:02:38,100
But it's not really entirely stable and it also we don't have things

58
00:02:38,100 --> 00:02:40,600
like the collapsible menus and all that stuff and we also don't have

59
00:02:40,600 --> 00:02:41,500
our old debug things.

60
00:02:41,500 --> 00:02:45,000
So again there's just a bunch of code in the debug system now that we

61
00:02:45,000 --> 00:02:48,900
figured out and it's going to be kind of this process of integrating

62
00:02:48,900 --> 00:02:51,400
it all together and making sure that it's all nice and stable and

63
00:02:51,400 --> 00:02:57,200
clean usable friendly, etc, etc.

64
00:02:58,600 --> 00:02:59,600
So, let's go ahead and

65
00:03:00,000 --> 00:03:02,700
Keep going down that that route.

66
00:03:02,700 --> 00:03:06,000
So the first thing that I'd like to do again is I think I'm just going

67
00:03:06,000 --> 00:03:08,500
to pass those modifier keys because right now what happens is like I

68
00:03:08,500 --> 00:03:12,000
just keep selecting entities and they keep getting added to the set of

69
00:03:12,000 --> 00:03:14,100
entities that are like selectable, right?

70
00:03:14,300 --> 00:03:15,900
And you can kind of see what's happening.

71
00:03:16,300 --> 00:03:19,400
Also our frame rate is awful at the moment because if you remember one

72
00:03:19,400 --> 00:03:21,200
of the things that we also have to do is make it.

73
00:03:21,200 --> 00:03:25,300
So our debug system only processes a frame at a time.

74
00:03:25,400 --> 00:03:27,000
We're not doing that currently either.

75
00:03:27,400 --> 00:03:29,800
So yeah, we just have a lot of stuff to do just in terms of

76
00:03:30,000 --> 00:03:31,400
Like basically code clean up.

77
00:03:31,400 --> 00:03:34,500
I think we have all of the pieces for the most part that we actually

78
00:03:34,500 --> 00:03:35,200
need.

79
00:03:35,300 --> 00:03:38,800
But it's just not all working in a nice smooth fashion because there's

80
00:03:38,800 --> 00:03:42,300
just too much Jank Enos in too many places, that's the nature of code.

81
00:03:42,300 --> 00:03:45,000
When you go exploring to see how you want to build something, it's

82
00:03:45,000 --> 00:03:48,800
nothing to be concerned about, unless you then don't actually go and

83
00:03:48,800 --> 00:03:51,000
clean it back up, in which case, it's something to be very concerned

84
00:03:51,000 --> 00:03:55,000
about, but as long as we are going to go do that, no need for concern.

85
00:03:55,500 --> 00:03:58,500
So first, I'm just going to fix that modifier key problem because the

86
00:03:58,500 --> 00:03:59,900
modifier key situation is definitely

87
00:04:00,000 --> 00:04:04,300
Only a little bit busted so I'm going to go ahead and make it so that

88
00:04:04,300 --> 00:04:06,600
we can do standard shift select and that sort of stuff.

89
00:04:06,800 --> 00:04:08,800
This again is going to be really straightforward.

90
00:04:08,900 --> 00:04:12,100
All we have to do is provide some way of sticking that information

91
00:04:12,100 --> 00:04:14,700
into the input system again with mouse.

92
00:04:14,900 --> 00:04:16,000
It was, it's just a side.

93
00:04:16,000 --> 00:04:17,100
Bend stuff sideband.

94
00:04:17,100 --> 00:04:18,399
Thing that comes in here, right?

95
00:04:18,600 --> 00:04:22,100
This is for debugging only, right?

96
00:04:22,100 --> 00:04:25,600
So you can kind of see, even we could stick it down here into say, oh

97
00:04:25,600 --> 00:04:26,200
hey, you know what?

98
00:04:26,200 --> 00:04:27,200
This is for debugging only.

99
00:04:27,800 --> 00:04:29,800
So you know, a platform layer for example,

100
00:04:29,900 --> 00:04:31,600
Didn't want to implement Mouse input?

101
00:04:33,500 --> 00:04:34,900
Or the platform doesn't have a mouse.

102
00:04:34,900 --> 00:04:36,700
It can just leave those things empty and it's fine.

103
00:04:36,700 --> 00:04:39,000
Just means you can't access the debug services with the mouse.

104
00:04:40,400 --> 00:04:41,000
And presumably.

105
00:04:41,000 --> 00:04:42,500
That's okay on those platforms.

106
00:04:43,000 --> 00:04:47,200
So what we want to do now is just have some things here where we have

107
00:04:47,200 --> 00:04:52,600
like shift down you know alt down Ctrl down, something like that.

108
00:04:52,800 --> 00:04:55,700
That would be a really simple way to just have those modifier Keys.

109
00:04:55,700 --> 00:04:57,600
Get passed through the system again.

110
00:04:57,600 --> 00:05:01,800
This is not for gameplay, this is strictly for use in our debug

111
00:05:01,800 --> 00:05:02,300
system.

112
00:05:02,600 --> 00:05:07,500
So in the code where we have, our Mouse x - Y and Z all, we really

113
00:05:07,500 --> 00:05:09,900
need to do to make sure that this stuff works.

114
00:05:10,000 --> 00:05:15,700
Relatively well is just kind of going here and and set these things to

115
00:05:15,700 --> 00:05:20,400
whatever the state was of those modifier keys at the time, in which we

116
00:05:20,400 --> 00:05:22,900
pass through this code and that will be plenty sufficient for our

117
00:05:22,900 --> 00:05:23,400
purposes.

118
00:05:23,700 --> 00:05:26,800
Nothing happens when you like tap the control shift or alt keys, so we

119
00:05:26,800 --> 00:05:29,400
don't need to worry about counting like ups and downs or anything like

120
00:05:29,400 --> 00:05:29,700
that.

121
00:05:29,900 --> 00:05:32,100
We just need to know if they're up or down at any given time so that

122
00:05:32,100 --> 00:05:35,700
we know how to interpret a mouse button, click that's on that frame.

123
00:05:36,200 --> 00:05:39,500
So, if we want to figure out whether shift alt and controller down, we

124
00:05:39,500 --> 00:05:39,900
can actually

125
00:05:40,000 --> 00:05:43,200
actually use the same sort of information that we have before.

126
00:05:43,800 --> 00:05:46,200
We, there's a thing called get key State and also a thing called, get

127
00:05:46,200 --> 00:05:47,300
a sink Key State.

128
00:05:47,500 --> 00:05:48,600
I'm not sure if we use any of these.

129
00:05:48,600 --> 00:05:49,300
Yeah, we do.

130
00:05:49,700 --> 00:05:50,900
So we can just come in here.

131
00:05:51,500 --> 00:05:55,500
and use this exact same stuff that we have been doing our get kise

132
00:05:55,500 --> 00:05:59,400
stuff, and the getkey state will tell us whether something is down or

133
00:05:59,400 --> 00:05:59,900
not, and you can

134
00:06:00,000 --> 00:06:01,900
See that we already sort of have that in here.

135
00:06:01,900 --> 00:06:05,400
We were already doing this information right on the get key state.

136
00:06:05,400 --> 00:06:08,300
So we can we can really literally just do the exact same thing here,

137
00:06:09,100 --> 00:06:12,100
where we just test to see if these keys are down at the time and if

138
00:06:12,100 --> 00:06:16,000
they are down, we set it if they aren't, they aren't now the VK codes

139
00:06:16,000 --> 00:06:20,300
in Windows for these keys are exactly what you'd expect so we can

140
00:06:20,300 --> 00:06:21,400
literally just type them in.

141
00:06:22,100 --> 00:06:25,400
Oops, I think it's actually menu, so I take it back.

142
00:06:25,800 --> 00:06:27,700
I think it's not all, they called it menu.

143
00:06:27,700 --> 00:06:28,400
For some reason.

144
00:06:28,700 --> 00:06:29,800
Don't ask me how I know that.

145
00:06:30,000 --> 00:06:32,500
At and don't ask me how you were supposed to know that.

146
00:06:32,600 --> 00:06:35,900
I think probably what I would recommend doing.

147
00:06:35,900 --> 00:06:40,100
If you don't know what the VK codes are, you could probably do.

148
00:06:40,100 --> 00:06:44,100
Well, there's two ways you could probably get that one is in developer

149
00:06:44,100 --> 00:06:44,500
Studio.

150
00:06:44,500 --> 00:06:47,900
Remember I showed how to make, you know, if you just use the project

151
00:06:47,900 --> 00:06:50,900
wizard to create a project, it'll create a product that has, like,

152
00:06:50,900 --> 00:06:52,400
browse info and stuff like this.

153
00:06:52,600 --> 00:06:54,400
You can do stuff like this where you just do.

154
00:06:54,400 --> 00:06:59,700
Okay, you know, I know one of the VK codes is well, if I just type VK,

155
00:06:59,700 --> 00:06:59,900
you

156
00:07:00,000 --> 00:07:00,800
See them all here.

157
00:07:01,100 --> 00:07:02,400
You know, the browser back button.

158
00:07:02,400 --> 00:07:03,900
Okay, whatever it is right.

159
00:07:04,000 --> 00:07:09,000
If I type one of those VK codes in I can usually hit the right Mouse

160
00:07:09,000 --> 00:07:12,400
button over and say go to definition and you can see that like we've

161
00:07:12,400 --> 00:07:16,600
got all of the VK codes that are not ASCII codes are actually listed

162
00:07:16,600 --> 00:07:17,900
in here, right?

163
00:07:18,300 --> 00:07:22,500
So you can actually see these VK codes, just kind of laid out for you

164
00:07:22,800 --> 00:07:27,100
and you you know could probably tell like you know even this Comet

165
00:07:27,100 --> 00:07:29,600
tells you V KL, V, KR left and right.

166
00:07:29,600 --> 00:07:29,800
All

167
00:07:29,900 --> 00:07:32,300
It's control and shift, virtual keys and you can see that it actually.

168
00:07:32,300 --> 00:07:34,200
Just says menu here, right?

169
00:07:34,800 --> 00:07:38,900
And again with left and right, control keys, and left, and right shift

170
00:07:38,900 --> 00:07:42,400
left and right menu, they have their own unique versions for left and

171
00:07:42,400 --> 00:07:42,800
right.

172
00:07:42,900 --> 00:07:47,300
But there's also a version that just encompasses the key in general.

173
00:07:47,600 --> 00:07:50,900
So you can see, I don't know where it is a pure here it is you can see

174
00:07:50,900 --> 00:07:54,300
that there's also one that's just was either of those down and I

175
00:07:54,300 --> 00:07:57,600
believe all it does is if either the left or right or down it will set

176
00:07:57,600 --> 00:07:59,800
this one to down and since we don't care about

177
00:07:59,900 --> 00:08:00,600
Have to write out.

178
00:08:00,600 --> 00:08:03,300
In this case, we're just going to use the unmodified ones, but if you

179
00:08:03,300 --> 00:08:07,000
cared about like which specific one you were talking about, in that

180
00:08:07,000 --> 00:08:10,600
circumstance, you would want to use the, the correct modifier.

181
00:08:11,000 --> 00:08:13,700
So now, what I'm going to do is just I'm going to assume that work

182
00:08:13,700 --> 00:08:14,600
because it was so simple.

183
00:08:14,600 --> 00:08:17,800
Now, maybe that's a foolish assumption in programming.

184
00:08:18,200 --> 00:08:20,100
Sometimes it's the simplest things that go wrong.

185
00:08:20,100 --> 00:08:20,700
It's true.

186
00:08:20,900 --> 00:08:24,700
But I'm going to assume that worked and I'm going to go to our add to

187
00:08:24,700 --> 00:08:26,000
selection function.

188
00:08:26,400 --> 00:08:28,400
And so in here, you can see we had it to do.

189
00:08:28,400 --> 00:08:29,800
That was like, you know, let's figure out.

190
00:08:29,900 --> 00:08:31,000
A way to do multi-select.

191
00:08:31,000 --> 00:08:34,100
So now I've got that and so I'd like to do is be able to do something

192
00:08:34,100 --> 00:08:38,299
like, say, okay, if the shift key is down, then I want this, this I'm

193
00:08:38,299 --> 00:08:40,600
sorry, if it's not down that, I want to clear the selection.

194
00:08:40,700 --> 00:08:42,900
If it is down, then I want to go ahead and add this election.

195
00:08:42,900 --> 00:08:46,100
Now, I don't know if we actually have that we do in here, okay, just

196
00:08:46,100 --> 00:08:48,300
want to make sure that we had access to the input data.

197
00:08:48,900 --> 00:08:50,700
So now, in theory, I should be able to.

198
00:08:50,700 --> 00:08:54,500
Oops, that's not the project we want to run in theory.

199
00:08:54,500 --> 00:08:56,200
I should be able to now

200
00:08:57,900 --> 00:08:59,800
Do multi select the way that you would normally see.

201
00:09:00,300 --> 00:09:01,900
In any normal application.

202
00:09:02,100 --> 00:09:04,400
If I click the mouse button you can see that I've sort of like

203
00:09:04,400 --> 00:09:06,600
permanently selected, that guy and I can do that.

204
00:09:06,700 --> 00:09:08,900
And you can see that it clears this election each time.

205
00:09:09,000 --> 00:09:11,100
But now, if I hold down the shift key, right?

206
00:09:11,100 --> 00:09:14,700
You can see that I can kind of Stack entities up there and it's all,

207
00:09:14,700 --> 00:09:16,600
that's all well and good, right?

208
00:09:16,800 --> 00:09:18,400
And so that's fine.

209
00:09:18,400 --> 00:09:22,400
Nothing again, particularly odd going there, I will say that one thing

210
00:09:22,400 --> 00:09:24,500
that, that looks pretty weird to me.

211
00:09:24,500 --> 00:09:29,500
And that that I feel like it's kind of cause for concern, I'm not sure

212
00:09:29,500 --> 00:09:29,900
why.

213
00:09:30,500 --> 00:09:35,800
There's such a dramatic speed decrease here when I am.

214
00:09:36,600 --> 00:09:41,600
When all I've done is just add more entities to that selected set and

215
00:09:41,600 --> 00:09:44,900
I wonder if that's just because we don't have anything that's

216
00:09:44,900 --> 00:09:48,300
optimized for font rendering and the font rendering is slow or exactly

217
00:09:48,300 --> 00:09:51,900
what's going on there because it looks like, you know, like that

218
00:09:51,900 --> 00:09:56,000
framerate is pretty slow and then if I switch back the frame rate,

219
00:09:56,000 --> 00:09:59,200
jumps up quite a bit when I reduce the number of them.

220
00:09:59,200 --> 00:09:59,900
They're right.

221
00:10:00,000 --> 00:10:00,300
Right?

222
00:10:01,200 --> 00:10:02,300
It just looks a little bit odd.

223
00:10:02,300 --> 00:10:04,400
You can even see, look at how much that went up.

224
00:10:05,200 --> 00:10:05,800
Ms.

225
00:10:05,800 --> 00:10:07,100
Wise is pretty dramatic.

226
00:10:07,200 --> 00:10:10,600
And so I also wonder there, if we've got a little bit of some bug

227
00:10:10,600 --> 00:10:14,400
stuff happening there and so if nothing else that kind of gives me

228
00:10:14,400 --> 00:10:19,100
motivation to finish the integration work here so that we can get our

229
00:10:19,100 --> 00:10:23,300
profiler niacin and easy to use as well so that we can investigate

230
00:10:23,300 --> 00:10:23,800
stuff like that.

231
00:10:23,800 --> 00:10:27,300
And see like who is actually taking more time when we see that those

232
00:10:27,600 --> 00:10:29,700
those times kind of jump up the way that they do.

233
00:10:30,900 --> 00:10:33,000
But anyway, that was it for adding the modifier keys.

234
00:10:33,000 --> 00:10:34,400
So that's pretty straightforward, nothing.

235
00:10:34,400 --> 00:10:36,100
Particularly unusual going on there.

236
00:10:38,700 --> 00:10:40,900
if you followed him here since the beginning, that was a

237
00:10:42,200 --> 00:10:43,300
Pretty trivial, add.

238
00:10:44,000 --> 00:10:44,300
Okay.

239
00:10:44,300 --> 00:10:48,700
And so now, what I'd like to do again is sort of try to start to

240
00:10:48,700 --> 00:10:50,400
consolidate these things a little bit.

241
00:10:50,700 --> 00:10:54,500
So, we've got the ability to display this data but now we, you know,

242
00:10:54,500 --> 00:10:58,100
we kind of don't really have a coherent story for how this kind of

243
00:10:58,100 --> 00:10:59,400
data and data.

244
00:10:59,400 --> 00:11:05,000
That's say, for example, coming from a different kinds of sources

245
00:11:05,000 --> 00:11:06,600
might interact with each other, right?

246
00:11:06,600 --> 00:11:09,500
It's because we have like stuff like the profile data and we don't

247
00:11:09,500 --> 00:11:11,300
really have any sort of

248
00:11:12,000 --> 00:11:15,900
We really don't have any way of talking about how these different

249
00:11:15,900 --> 00:11:18,700
things interact with each other or how they work for that matter,

250
00:11:18,900 --> 00:11:19,400
right?

251
00:11:19,800 --> 00:11:24,200
So what I'd like to do is again try to kind of make that sort of make

252
00:11:24,200 --> 00:11:25,200
that link be a little bit more.

253
00:11:25,200 --> 00:11:27,900
It's a difficult problem and so I'm just going to try to push through

254
00:11:27,900 --> 00:11:30,900
it you know, in a straightforward away as possible.

255
00:11:31,200 --> 00:11:33,100
So if we look at what happened before,

256
00:11:34,200 --> 00:11:38,000
We used to kind of have this notion that we would build some stuff at

257
00:11:38,000 --> 00:11:38,500
the beginning.

258
00:11:38,500 --> 00:11:42,100
And in fact, we have this kind of this, debug variable stuff here and

259
00:11:42,100 --> 00:11:45,600
you can see that the debug variable stuff is basically all gone.

260
00:11:45,600 --> 00:11:46,200
Now, right?

261
00:11:46,200 --> 00:11:48,900
We've sort of, we've eliminated all this debug variable stuff, we

262
00:11:48,900 --> 00:11:52,200
still like, to be able to have stuff like this, where we set these

263
00:11:52,200 --> 00:11:53,300
debug variables, right?

264
00:11:53,300 --> 00:11:55,400
I mean that's something that we would kind of want to do.

265
00:11:56,100 --> 00:11:59,500
And so we have a couple different ways that we might want to go about

266
00:11:59,500 --> 00:11:59,900
doing that.

267
00:12:01,100 --> 00:12:04,800
And and we can sort of think about this in a little bit more direct

268
00:12:04,800 --> 00:12:05,200
fashion.

269
00:12:08,200 --> 00:12:08,800
Right.

270
00:12:10,500 --> 00:12:13,100
So, what we would like to do is we'd like to be able to have these

271
00:12:14,000 --> 00:12:19,000
like, you know, before when we were doing this, I had to write this

272
00:12:19,000 --> 00:12:21,300
code kind of out of line, right?

273
00:12:21,400 --> 00:12:23,100
So, what we did is we went through.

274
00:12:23,100 --> 00:12:28,000
And in fact, I can do this pretty simply if I go to our debug config

275
00:12:28,000 --> 00:12:28,600
dot h, right?

276
00:12:28,600 --> 00:12:31,200
We have this config file, that was sort of written out by the debug

277
00:12:31,200 --> 00:12:35,400
system and you can see and hear all of the places that we actually had

278
00:12:36,200 --> 00:12:39,900
our our debug system lists, all of the you, I

279
00:12:40,000 --> 00:12:42,900
We're going to do so if I were to turn this off, if I were to say that

280
00:12:42,900 --> 00:12:45,100
we no longer get this, I would get UPS.

281
00:12:48,500 --> 00:12:55,200
I would get essentially compile errors, presumably or I thought that I

282
00:12:55,200 --> 00:12:58,800
would get compile errors.

283
00:13:00,000 --> 00:13:02,900
Or maybe I won't get compile errors.

284
00:13:03,700 --> 00:13:04,400
Okay.

285
00:13:04,900 --> 00:13:08,600
I was assuming I would get compile errors where I saw these debug you.

286
00:13:08,600 --> 00:13:10,900
I fo like all of this stuff I guess.

287
00:13:10,900 --> 00:13:12,200
That's not actually true.

288
00:13:12,300 --> 00:13:15,000
Because I guess they would be, I guess the way we were testing them,

289
00:13:15,000 --> 00:13:18,900
they would default to zero, I guess, I was surprised.

290
00:13:18,900 --> 00:13:21,900
I thought it actually might give me an error but I suppose, I could

291
00:13:21,900 --> 00:13:23,500
actually do something like this.

292
00:13:24,100 --> 00:13:26,700
Presumably, no, I guess not.

293
00:13:26,900 --> 00:13:28,800
So what exactly is going on there?

294
00:13:28,900 --> 00:13:29,600
Why are we getting?

295
00:13:29,900 --> 00:13:31,000
Why is that happening?

296
00:13:31,100 --> 00:13:32,100
I would like to know.

297
00:13:32,400 --> 00:13:34,500
I'm going to see exactly what we were doing.

298
00:13:34,600 --> 00:13:37,900
Maybe we just did, if defined is that what we did?

299
00:13:41,100 --> 00:13:44,200
So you'd think that this would have this would have caused some kind

300
00:13:44,200 --> 00:13:44,700
of a.

301
00:13:45,300 --> 00:13:45,700
Yeah.

302
00:13:45,700 --> 00:13:47,300
Would like I don't know.

303
00:13:47,300 --> 00:13:48,400
Let's see what happens here.

304
00:13:49,400 --> 00:13:49,900
So is there.

305
00:13:49,900 --> 00:13:54,400
Literally, no way that I can force this sort of thing to be erroneous?

306
00:13:54,400 --> 00:13:56,800
Maybe fove for is not a thing.

307
00:13:56,800 --> 00:13:57,700
Let's try this.

308
00:13:58,900 --> 00:13:59,800
There we go.

309
00:13:59,800 --> 00:14:01,400
All right, so that was just not used.

310
00:14:02,600 --> 00:14:03,300
Okay good.

311
00:14:04,000 --> 00:14:06,100
So this is what I can do then.

312
00:14:08,100 --> 00:14:12,300
Sort of give me a thing that would tell me everywhere that I was using

313
00:14:12,300 --> 00:14:14,400
one of these systems, right?

314
00:14:14,700 --> 00:14:17,800
And so here we can sort of see, like, okay, here is, you know, one of

315
00:14:17,800 --> 00:14:20,000
the, the debug variables and so on.

316
00:14:20,800 --> 00:14:25,200
So if I look at this and I go, well, what would I really have wanted

317
00:14:25,200 --> 00:14:25,900
to do here?

318
00:14:25,900 --> 00:14:28,800
Optimally, you know, is there something that's better than what's

319
00:14:28,800 --> 00:14:29,400
going on here?

320
00:14:29,400 --> 00:14:31,100
That I was going to do now?

321
00:14:33,600 --> 00:14:35,400
what we found when we did our testing,

322
00:14:36,400 --> 00:14:40,500
Was that having an if as long as the if was constant really didn't

323
00:14:40,500 --> 00:14:45,000
make a huge deal and so it's sort of like it's free as long as it's a

324
00:14:45,000 --> 00:14:48,100
perfectly predicted Branch to do this instead.

325
00:14:50,900 --> 00:14:52,800
Look like that was fine, right?

326
00:14:52,800 --> 00:14:56,500
It didn't look like that really cost us very much in any predictable

327
00:14:56,500 --> 00:14:59,900
in any real way and so one of the things that we saw

328
00:15:00,100 --> 00:15:03,200
When we were doing our debug system, was that having to wait for it to

329
00:15:03,200 --> 00:15:03,700
recompile?

330
00:15:03,700 --> 00:15:07,000
The game was just too long even though it only took like a second or

331
00:15:07,000 --> 00:15:10,700
two, it's like just not fast enough for what you want to be able to

332
00:15:10,700 --> 00:15:12,900
click the button and just be able to switch and it didn't feel good

333
00:15:12,900 --> 00:15:14,200
and it wasn't nice, right?

334
00:15:15,500 --> 00:15:18,000
So what I'd rather have in the system is something that we're looks

335
00:15:18,000 --> 00:15:19,700
like this, you know what I'm saying?

336
00:15:20,100 --> 00:15:24,100
That would be preferable to me, and the question here is just how

337
00:15:24,100 --> 00:15:28,700
exactly would I go about doing something like this in the most

338
00:15:28,700 --> 00:15:29,800
convenient way, possible.

339
00:15:30,000 --> 00:15:32,500
Cause before what you had to happen is we had to have all of this

340
00:15:32,500 --> 00:15:35,800
stuff in there and this system and was sort of a separate thing,

341
00:15:35,800 --> 00:15:36,300
right?

342
00:15:36,900 --> 00:15:41,600
And we had this this whole thing I had to write there was just a lot

343
00:15:41,600 --> 00:15:43,800
of business involved, right?

344
00:15:44,100 --> 00:15:48,000
And yeah the usage code, the code at the usage site, nice and simple.

345
00:15:48,200 --> 00:15:52,300
No complaints with that really, it was totally fine, but all of this

346
00:15:52,300 --> 00:15:55,300
nonsense garbage, that was happening out here, just a lot of extra

347
00:15:55,300 --> 00:15:57,000
work that I maybe didn't want.

348
00:15:57,800 --> 00:15:59,800
And so since it's clear,

349
00:16:00,000 --> 00:16:03,100
Me that we don't really need to go the compilation route.

350
00:16:03,100 --> 00:16:03,800
We tested it.

351
00:16:03,800 --> 00:16:05,600
It doesn't seem like it's that necessary.

352
00:16:06,700 --> 00:16:10,500
What we could do instead here is just do something like

353
00:16:15,100 --> 00:16:17,700
Like having this dribble all over ourselves.

354
00:16:20,600 --> 00:16:21,700
That's always a good thing.

355
00:16:24,300 --> 00:16:25,900
Just do something like, okay.

356
00:16:29,400 --> 00:16:32,700
If I've got something that I want to test, are you could imagine

357
00:16:32,700 --> 00:16:33,700
something like this?

358
00:16:35,400 --> 00:16:38,900
I don't know, something like this, or like, a debug switch, and then I

359
00:16:38,900 --> 00:16:39,600
just passed.

360
00:16:39,600 --> 00:16:41,000
Like, what the debug switch is that?

361
00:16:41,000 --> 00:16:42,900
I actually want, right?

362
00:16:43,000 --> 00:16:46,300
And then this would explicitly some macro that expands to whatever is

363
00:16:46,300 --> 00:16:49,800
necessary to make this be a switchable thing that I can switch at

364
00:16:49,800 --> 00:16:52,000
runtime and add it to whatever list actually.

365
00:16:52,000 --> 00:16:56,900
It needs to be added to or I can actually sort of say what that list

366
00:16:56,900 --> 00:16:58,900
might be that I might want to add it.

367
00:16:58,900 --> 00:17:02,400
So for example, in fear show letting samples was part of the renderer

368
00:17:02,400 --> 00:17:05,599
so I could do something like saying that it was part of the renderer

369
00:17:05,599 --> 00:17:10,500
like that so I can have sort of a hierarchical sort of a thing going

370
00:17:10,500 --> 00:17:11,000
on there.

371
00:17:11,200 --> 00:17:16,700
I could even do something a little more stringy and maybe do something

372
00:17:16,700 --> 00:17:20,900
that was like a path or even like a DOT sort of a thing or a colon:.

373
00:17:23,800 --> 00:17:24,000
Right?

374
00:17:24,000 --> 00:17:28,300
You can sort of Imagine Me constructing something here and that would

375
00:17:28,300 --> 00:17:31,300
be a lot kind of more interesting because if I had something that

376
00:17:31,300 --> 00:17:35,400
worked like that then it would be self-assembling which is a lot more

377
00:17:35,400 --> 00:17:37,900
like the way the rest of the debug system is going, right.

378
00:17:37,900 --> 00:17:41,000
The profiling stuff just kind of dumps to a buffer it would be kind of

379
00:17:41,000 --> 00:17:44,300
great if this stuff just dumped to a buffer as well, you know what I'm

380
00:17:44,300 --> 00:17:44,700
saying?

381
00:17:45,400 --> 00:17:49,500
So I would like to see if that is something that's that's on the

382
00:17:49,500 --> 00:17:50,000
table.

383
00:17:50,000 --> 00:17:51,000
I don't really know.

384
00:17:51,000 --> 00:17:53,000
Realistically how on the table it?

385
00:17:53,300 --> 00:17:59,000
Ali is, but I think it might be possible to do the only thing that I'm

386
00:17:59,000 --> 00:17:59,800
not certain about.

387
00:18:00,200 --> 00:18:04,100
Is the way that this, if works, I think might be a little bit too

388
00:18:04,100 --> 00:18:05,300
much, right?

389
00:18:09,100 --> 00:18:13,500
In other words this I think could probably work this.

390
00:18:13,500 --> 00:18:16,200
I think probably could not, right?

391
00:18:16,800 --> 00:18:20,300
So it would probably have to look something like that which isn't

392
00:18:20,300 --> 00:18:22,600
really that big of a deal at the end of the day.

393
00:18:22,800 --> 00:18:25,700
But the reason that I say that it would probably have to look like

394
00:18:25,700 --> 00:18:29,000
something like that is because if you look at what will have to

395
00:18:29,000 --> 00:18:29,600
happen,

396
00:18:31,300 --> 00:18:33,800
Oops, let's get interface there.

397
00:18:33,800 --> 00:18:36,800
If you look like what would have to happen in order for that to occur,

398
00:18:36,800 --> 00:18:41,700
we would need to do something where there would be a notion of some

399
00:18:41,700 --> 00:18:46,100
kind of a static variable, or some kind of something happening there,

400
00:18:46,100 --> 00:18:53,100
where we would have the debug system, be able to cash a look up, so

401
00:18:53,100 --> 00:18:56,300
that every time through the code, it would not have to do anything

402
00:18:56,300 --> 00:18:58,500
more than just the basic, if right.

403
00:18:58,500 --> 00:19:01,200
So, in theory, you know, I guess what I'm saying is,

404
00:19:01,600 --> 00:19:04,700
This can't really be if we want this to be a lightweight function that

405
00:19:04,700 --> 00:19:08,300
just kind of does a test and continues, it needs to be something where

406
00:19:08,300 --> 00:19:12,200
the debug system can always access the variable very easily.

407
00:19:12,300 --> 00:19:19,100
So it needs to be something like, you know, it needs to be something

408
00:19:19,100 --> 00:19:21,300
where there's a static, right?

409
00:19:21,300 --> 00:19:23,800
Would need to be something like this.

410
00:19:24,700 --> 00:19:28,800
So there's a, you know, a debug if that's some name and it would

411
00:19:28,800 --> 00:19:31,100
create some kind of a local glow.

412
00:19:31,400 --> 00:19:37,200
No, a variable that was locally declared to be persistent and I don't

413
00:19:37,200 --> 00:19:39,900
remember, I feel like we have.

414
00:19:41,100 --> 00:19:42,100
Yeah right here.

415
00:19:42,200 --> 00:19:44,100
So we have a way to do that.

416
00:19:44,200 --> 00:19:46,400
We'd say this is a locally persistent variable.

417
00:19:46,600 --> 00:19:50,100
It's like you know whatever the debug ID is of this thing or

418
00:19:50,100 --> 00:19:50,700
something.

419
00:19:50,700 --> 00:19:51,300
Right?

420
00:19:52,800 --> 00:19:55,400
I don't know exactly what we would want that to be but we declare it,

421
00:19:55,400 --> 00:20:00,400
some some local, persist debug ID for this thing and then we would do

422
00:20:00,400 --> 00:20:00,800
like

423
00:20:01,300 --> 00:20:02,700
Leon the initialization pass.

424
00:20:02,700 --> 00:20:08,700
Through the thing, we would do like, get debug ID for, you, know,

425
00:20:09,400 --> 00:20:14,000
parameter or something like this for, you know, I don't really know

426
00:20:14,300 --> 00:20:15,400
and we'd pass the name.

427
00:20:15,800 --> 00:20:18,200
That would be something that on the first pass through.

428
00:20:18,200 --> 00:20:20,600
It would call that thing and do the initialization.

429
00:20:20,600 --> 00:20:22,400
That's necessary, right?

430
00:20:22,900 --> 00:20:26,400
And then what we would do is we would switch on the value of that

431
00:20:26,400 --> 00:20:26,700
thing.

432
00:20:26,700 --> 00:20:29,200
And really this, I guess wouldn't be a debug idea, be more something

433
00:20:29,200 --> 00:20:30,400
like a debug.

434
00:20:31,400 --> 00:20:35,700
Value and we would just say like, okay, whatever this debug value is

435
00:20:35,900 --> 00:20:37,000
that we got back.

436
00:20:38,500 --> 00:20:41,900
In fact I might almost say it would look more like this where we would

437
00:20:41,900 --> 00:20:42,600
have liked.

438
00:20:43,800 --> 00:20:47,500
I think you'd want to 0 must pass the address of the debug value.

439
00:20:47,800 --> 00:20:53,500
So we'd say like okay initialise debug value, something like that,

440
00:20:53,700 --> 00:20:55,800
where we just go like, okay, whatever.

441
00:20:55,800 --> 00:20:59,300
The initial value of the thing is it will return it here but we'll

442
00:20:59,300 --> 00:20:59,900
also let

443
00:21:00,000 --> 00:21:01,100
Will the address of this thing?

444
00:21:01,100 --> 00:21:02,900
Because I think the debug system would probably want that.

445
00:21:02,900 --> 00:21:06,600
I think it would be allowed to do that because you can use the value

446
00:21:06,600 --> 00:21:09,600
inside the expression for the value.

447
00:21:13,500 --> 00:21:18,200
All right, so like we need to do something like this, right?

448
00:21:18,400 --> 00:21:23,500
Where if debug you know, if we do a debug, if you know Boolean or

449
00:21:23,500 --> 00:21:24,900
something like this, right?

450
00:21:26,900 --> 00:21:29,400
Where we could kind of switch on that sort of thing and this, you

451
00:21:29,400 --> 00:21:32,500
know, honestly would probably be something like a debug variable, it

452
00:21:32,500 --> 00:21:36,800
be like our debug event, like we kind of have because since we already

453
00:21:36,800 --> 00:21:39,800
have this concept that you can have all of these different sorts of

454
00:21:39,800 --> 00:21:40,500
variables.

455
00:21:40,900 --> 00:21:43,900
If we take a look in here, where we sort of have this debug event that

456
00:21:43,900 --> 00:21:46,400
has all these sort of sets in it, this would probably just be honestly

457
00:21:46,400 --> 00:21:47,500
a debug event.

458
00:21:48,200 --> 00:21:52,100
And yeah that's that's what I would assume would happen there.

459
00:21:52,500 --> 00:21:56,500
And so really all we need to do is have some way of

460
00:21:56,600 --> 00:22:00,300
Of making this the unique, right?

461
00:22:00,400 --> 00:22:03,100
We want to make sure that it's not going to be something that.

462
00:22:03,800 --> 00:22:04,800
Yeah, that that

463
00:22:06,900 --> 00:22:08,500
We want to make sure that that value.

464
00:22:08,500 --> 00:22:12,700
If we were to use multiple of them in the same function, wouldn't name

465
00:22:12,700 --> 00:22:16,000
conflict, and debug value by itself will definitely name conflict.

466
00:22:16,000 --> 00:22:19,000
So, you know, we want to do something like this where we would paste

467
00:22:19,000 --> 00:22:25,500
in to this, some kind of a extra value on their write, something that

468
00:22:25,500 --> 00:22:29,400
would give us sort of the additional, you know, uniqueness that we

469
00:22:29,400 --> 00:22:30,400
need like the counter.

470
00:22:30,400 --> 00:22:33,200
But unfortunately we can't really do it that way.

471
00:22:33,200 --> 00:22:36,600
Because as we've seen many times passing the counter value in,

472
00:22:37,000 --> 00:22:37,600
Directly.

473
00:22:37,800 --> 00:22:40,100
So you need to do this, absolute nonsense here.

474
00:22:40,100 --> 00:22:43,400
I, you know that you've seen me do a couple times where we if we

475
00:22:43,400 --> 00:22:46,100
wanted to do like a debug if or something like that we would have to

476
00:22:46,100 --> 00:22:48,500
be able to create that debug value.

477
00:22:48,500 --> 00:22:51,000
Using one of these things that you pass down multiple times.

478
00:22:51,000 --> 00:22:55,100
So I think it's something like this where you do name right counter

479
00:22:57,600 --> 00:23:00,500
And then in here you pass it, one more time.

480
00:23:04,700 --> 00:23:08,900
And then finally, you get to the actual one, ladies and gentlemen, the

481
00:23:08,900 --> 00:23:11,400
C plus plus preprocessor.

482
00:23:11,500 --> 00:23:15,300
Not not good, not good, right again.

483
00:23:15,300 --> 00:23:17,600
The C++ standards committee has had how many years

484
00:23:19,900 --> 00:23:24,800
To fix this stupid thing, but since through strip hated the

485
00:23:24,800 --> 00:23:29,000
preprocessor, it languished and never got made into something you

486
00:23:29,000 --> 00:23:29,900
could actually use.

487
00:23:31,400 --> 00:23:34,000
But don't worry because they also didn't add any language features

488
00:23:34,000 --> 00:23:36,400
that would make any of these things work so it's all worked out

489
00:23:36,700 --> 00:23:37,100
anyway.

490
00:23:37,300 --> 00:23:41,800
So if we do this stuff we should be in good shape if we wanted to make

491
00:23:41,800 --> 00:23:44,800
a thing where we could sort of replace our stuff with debug if that

492
00:23:44,800 --> 00:23:45,600
look this way.

493
00:23:46,500 --> 00:23:48,500
So I'm going to just see how that

494
00:23:48,600 --> 00:23:50,800
that ends up being at the end of the day.

495
00:23:52,200 --> 00:23:55,500
Let's find out how it goes look.

496
00:23:55,600 --> 00:23:57,000
I need to do that.

497
00:23:57,000 --> 00:23:59,800
Obviously, and this needs to be that I

498
00:24:00,000 --> 00:24:02,600
Leave but I think otherwise we're in good shape.

499
00:24:03,500 --> 00:24:09,300
And then just this guy right here, still needs to be like that, and

500
00:24:09,300 --> 00:24:10,900
that should be good.

501
00:24:12,000 --> 00:24:12,900
One more time.

502
00:24:14,000 --> 00:24:20,800
And to just lazy bug value not found you know, that's correct and

503
00:24:20,800 --> 00:24:25,300
you're also saying that there is an inn single pound, sign that you

504
00:24:25,300 --> 00:24:27,600
don't recognize possible to measures, okay?

505
00:24:27,600 --> 00:24:31,000
Well I'm not sure what the problem is there, but let's fix this part

506
00:24:31,000 --> 00:24:31,500
first.

507
00:24:31,700 --> 00:24:36,100
So this part right here, this would be some kind of an internal that

508
00:24:36,100 --> 00:24:37,700
returns a debug event.

509
00:24:37,900 --> 00:24:39,500
It's called initialize debug value.

510
00:24:39,500 --> 00:24:43,300
And what it's going to do is going to take, you know, a ladybug event

511
00:24:43,300 --> 00:24:43,600
here.

512
00:24:45,900 --> 00:24:49,500
It says this is the location of the thing we're trying to set and here

513
00:24:49,500 --> 00:24:51,500
is the name, you know I'm saying?

514
00:24:51,900 --> 00:24:52,900
So that's all good.

515
00:24:53,300 --> 00:24:55,600
And so now that should be defined this.

516
00:24:56,200 --> 00:24:57,400
Oh, so this is great.

517
00:24:57,500 --> 00:24:59,300
That's just complaining about future stuff.

518
00:24:59,900 --> 00:25:03,000
So now if we want to like with this debug you, I use debug camera

519
00:25:03,000 --> 00:25:04,000
thing and that sort of stuff.

520
00:25:04,000 --> 00:25:06,300
Now we can replace these if you want to, with debug.

521
00:25:06,300 --> 00:25:12,400
If so we could just say you know debug if you know renderer use debug

522
00:25:12,400 --> 00:25:13,000
camera

523
00:25:14,100 --> 00:25:18,300
And now we could do something like that and that would be fine.

524
00:25:18,700 --> 00:25:22,600
This would be something like I want a debug value here.

525
00:25:22,900 --> 00:25:27,300
And I would say that it's debug camera distance again, here it is.

526
00:25:27,400 --> 00:25:29,400
That's the debug value, right?

527
00:25:31,400 --> 00:25:35,900
The problem with this, again, same thing as before, you can't really

528
00:25:35,900 --> 00:25:37,800
cash a static here.

529
00:25:38,700 --> 00:25:40,600
So, you know, this is one.

530
00:25:40,600 --> 00:25:43,400
Where if we started having too many of these debug values, I'm

531
00:25:43,600 --> 00:25:47,800
Not sure there would really be a way to sort of get around this

532
00:25:47,800 --> 00:25:48,300
problem.

533
00:25:48,400 --> 00:25:51,100
Now it's worth noting that metaprogramming solves this program.

534
00:25:51,100 --> 00:25:52,900
This problem like trivially, right?

535
00:25:53,600 --> 00:25:56,200
And you know, a language that wasn't awful would solve this program.

536
00:25:56,200 --> 00:25:57,400
True problems with it as well.

537
00:26:00,000 --> 00:26:01,100
But we'll try to stick.

538
00:26:02,400 --> 00:26:05,800
I was doing it the hard way in something like this, where we have this

539
00:26:05,800 --> 00:26:06,600
debug value.

540
00:26:07,100 --> 00:26:10,200
The problem is just how do we cash the information, right?

541
00:26:10,300 --> 00:26:14,300
And so the, you know, that's, that's really the thing that's, that's,

542
00:26:14,500 --> 00:26:17,700
that's difficult for us to do is not to make this evaluate to the

543
00:26:17,700 --> 00:26:20,600
correct thing that we would want it to evaluate to write.

544
00:26:20,600 --> 00:26:24,800
It's pretty easy for us to do something like that, or something like

545
00:26:24,800 --> 00:26:25,300
this.

546
00:26:26,800 --> 00:26:28,200
Right, that's not hard.

547
00:26:28,600 --> 00:26:31,300
The problem is, just how do we make this?

548
00:26:31,800 --> 00:26:34,700
This debug system thing?

549
00:26:34,700 --> 00:26:40,300
Not cost us a lot of time and energy because inside an expression, we

550
00:26:40,300 --> 00:26:42,900
can't create a static variable, right?

551
00:26:43,000 --> 00:26:45,500
So inside this plus equals, we can't really well.

552
00:26:45,500 --> 00:26:48,800
We probably could nowadays using like crazy Lambda syntax or

553
00:26:48,800 --> 00:26:50,900
something, that's an absolute nightmare.

554
00:26:54,300 --> 00:26:58,800
So I guess with if you were targeting C++ 11, you probably could make

555
00:26:58,800 --> 00:26:59,800
something work.

556
00:27:01,100 --> 00:27:05,100
But in general, in at least a C++ as of that time.

557
00:27:06,400 --> 00:27:07,400
It's not really.

558
00:27:07,600 --> 00:27:10,000
I don't know there's really any way you could really get around that

559
00:27:10,000 --> 00:27:10,200
right.

560
00:27:10,200 --> 00:27:12,400
Because what you need to do is figure out a way to get a static

561
00:27:12,400 --> 00:27:15,700
variable in here of some kind and that seems really difficult to do.

562
00:27:15,700 --> 00:27:19,100
Now, what we could do it again, if we wanted to is, we could actually

563
00:27:19,100 --> 00:27:21,600
just have one more place that these were defined.

564
00:27:21,800 --> 00:27:26,100
And I don't know if it's worth kind of going through that or not, but

565
00:27:26,100 --> 00:27:28,300
that's like, kind of the, that's the trade-off, right?

566
00:27:28,400 --> 00:27:29,400
The trade-off is.

567
00:27:30,000 --> 00:27:32,800
How do we, you know, how do we actually manage this?

568
00:27:32,800 --> 00:27:33,300
This stuff.

569
00:27:33,300 --> 00:27:34,000
Exactly.

570
00:27:34,400 --> 00:27:35,900
How does it get looked up and so on?

571
00:27:36,200 --> 00:27:39,200
And it's pretty easy for our debug ifs to work.

572
00:27:39,400 --> 00:27:41,900
If we write them like that, the syntax is pretty clean and there's

573
00:27:41,900 --> 00:27:46,200
nothing all that unusual about it but on the other hand here, if we

574
00:27:46,200 --> 00:27:50,300
have debug real 32, something like that that we want to use inside of

575
00:27:50,300 --> 00:27:50,900
expression.

576
00:27:50,900 --> 00:27:52,800
It's much more difficult for us to do.

577
00:27:53,900 --> 00:27:57,600
So what we can do, if we want to is we can do something like this

578
00:27:57,600 --> 00:28:00,400
where we do one of those debug real 32s.

579
00:28:00,400 --> 00:28:03,600
And you know, I might even do it something more like that, where it's

580
00:28:03,600 --> 00:28:05,700
actually just the type is in there or something like that.

581
00:28:05,700 --> 00:28:09,500
We'll see if maybe that's a good idea in a little bit but we could do

582
00:28:09,500 --> 00:28:10,000
something like that.

583
00:28:10,000 --> 00:28:14,200
So this way we'd say there's a debug real 32 and we just say this is

584
00:28:14,200 --> 00:28:15,600
what the name of the thing was going to be.

585
00:28:15,600 --> 00:28:19,000
And then we just say what we want to actually declare the variable to

586
00:28:19,000 --> 00:28:22,100
be and that would work as well, right?

587
00:28:22,100 --> 00:28:23,000
So that would work, fine.

588
00:28:23,000 --> 00:28:23,800
It just means we

589
00:28:23,900 --> 00:28:25,400
Can't do it inside an expression.

590
00:28:25,600 --> 00:28:28,400
So then when we come up here, you know we can write it essentially the

591
00:28:28,400 --> 00:28:30,300
same way as this stuff is written.

592
00:28:31,000 --> 00:28:33,100
It's basically and it's actually a little simpler because we don't

593
00:28:33,100 --> 00:28:36,500
have to worry about cracking out into multiple macros in that

594
00:28:36,500 --> 00:28:37,800
ridiculous way, right?

595
00:28:38,000 --> 00:28:43,300
So here we had a real 32, we'd have sort of a name and then we'd have

596
00:28:43,300 --> 00:28:44,900
the the variable, right?

597
00:28:44,900 --> 00:28:46,800
Not the variable but a variable.

598
00:28:48,200 --> 00:28:52,900
And then all we have to do is again use this sort of same syntax here

599
00:28:53,000 --> 00:28:55,000
where we do a local.

600
00:28:55,000 --> 00:28:59,300
Persist this time we have the ability to sort of graft on I believe

601
00:28:59,300 --> 00:29:01,900
one of the parameters that actually gets passed in here.

602
00:29:01,900 --> 00:29:06,400
Although yeah, that I feel like maybe that is not entirely the case

603
00:29:06,400 --> 00:29:07,600
but we'll try it here.

604
00:29:08,100 --> 00:29:10,100
So if we do something like this, right?

605
00:29:11,100 --> 00:29:13,800
We can construct, what we actually want.

606
00:29:18,300 --> 00:29:20,100
And then I guess the only thing that would be a problem.

607
00:29:20,100 --> 00:29:23,700
There is the the real 32 of I mean we really want to do right as we

608
00:29:23,700 --> 00:29:24,800
want to do something like this.

609
00:29:25,400 --> 00:29:26,100
I guess it's weird.

610
00:29:26,100 --> 00:29:29,200
This would be an R32 in our current syntax.

611
00:29:30,400 --> 00:29:33,800
What we really want to do is say okay the variable equals whatever

612
00:29:33,800 --> 00:29:36,000
this thing is.

613
00:29:36,000 --> 00:29:37,600
R32, right.

614
00:29:38,600 --> 00:29:42,900
And you know, I could even imagine something more like this.

615
00:29:44,200 --> 00:29:46,200
We have a debug variable, we pass.

616
00:29:46,200 --> 00:29:50,200
What the type is, we pass the name, and then we pass a where it lives

617
00:29:50,200 --> 00:29:52,600
in the hierarchy, or something like that, right?

618
00:29:52,700 --> 00:29:53,300
Something like that.

619
00:29:53,300 --> 00:29:56,100
We could even do it more like this where those things get added on

620
00:29:56,800 --> 00:29:57,800
kind of like that.

621
00:29:58,100 --> 00:29:59,500
I like what that looks like here.

622
00:30:00,600 --> 00:30:02,900
I could even imagine it being something like this, so it's a little

623
00:30:02,900 --> 00:30:03,600
clearer to read.

624
00:30:03,600 --> 00:30:05,100
It's like, here's where here's the type.

625
00:30:05,100 --> 00:30:06,800
There's a thing that we want to go.

626
00:30:06,800 --> 00:30:09,200
Here's the type that it is or something like that.

627
00:30:09,700 --> 00:30:13,400
That looks pretty good to me but unfortunately again, thanks to the

628
00:30:13,400 --> 00:30:14,800
magic of C++.

629
00:30:14,800 --> 00:30:18,300
I think that does put us back into squarely into ridiculous.

630
00:30:18,300 --> 00:30:22,100
Pastor territory, you know, not the end of the world, but that's just

631
00:30:22,100 --> 00:30:23,500
the way it goes sometimes, right?

632
00:30:23,500 --> 00:30:25,700
It's just the way it goes.

633
00:30:26,000 --> 00:30:28,600
A lot of the time in C++.

634
00:30:29,300 --> 00:30:32,200
Please John, if you're listening, finish your language, sometime soon.

635
00:30:32,200 --> 00:30:34,200
For those of us who are dying out here.

636
00:30:36,800 --> 00:30:38,300
Using these horrible languages.

637
00:30:38,600 --> 00:30:41,700
Ok so inside here, we have debug variable

638
00:30:43,000 --> 00:30:44,600
Now all I'm going to do is exact same thing.

639
00:30:44,600 --> 00:30:49,400
I create a persistent variable of whatever the type is, and then all I

640
00:30:49,400 --> 00:30:52,700
need to do after it gets initialized with the name, the difference.

641
00:30:52,700 --> 00:30:56,700
Now, is that there's a type in here that's being passed.

642
00:30:56,700 --> 00:31:00,300
Then there's the name and then there's the variable that I actually

643
00:31:00,300 --> 00:31:01,300
want to sign to it.

644
00:31:01,300 --> 00:31:04,200
So now, when we talk about the name, it's not just the name.

645
00:31:04,300 --> 00:31:07,500
It's actually also the variable because in fact it's not named, I

646
00:31:07,500 --> 00:31:09,200
shouldn't say it's like path.

647
00:31:09,200 --> 00:31:12,400
Like it's the path to where that thing exists in the debug.

648
00:31:12,600 --> 00:31:16,700
So there's the path and then I've got, you know, this notion that I

649
00:31:16,700 --> 00:31:17,900
want to kind of cap these together.

650
00:31:17,900 --> 00:31:20,500
So I want the path that I want to slash, then I want whatever the

651
00:31:20,500 --> 00:31:24,100
variable name is, that seems totally reasonable for how that will get

652
00:31:24,100 --> 00:31:25,700
stored, this all works.

653
00:31:25,700 --> 00:31:28,900
Now, correctly, instead of an, if now, it's just the type.

654
00:31:28,900 --> 00:31:29,200
Whatever.

655
00:31:29,200 --> 00:31:31,500
The type is that you asked for, right?

656
00:31:31,600 --> 00:31:34,700
It's the type, then it's going to be whatever the variable is.

657
00:31:44,300 --> 00:31:47,300
And then that's going to be equal to whatever this debug value was

658
00:31:47,700 --> 00:31:48,500
dot, whatever.

659
00:31:48,500 --> 00:31:52,500
The accessor type is right, and that would it's something that we

660
00:31:52,500 --> 00:31:55,300
probably want to get used to, for this stuff to sort of start.

661
00:31:55,400 --> 00:31:58,700
This stuff could actually be cleaned up quite a bit if we just unified

662
00:31:58,700 --> 00:31:59,700
or naming scheme.

663
00:32:00,200 --> 00:32:03,400
And this is something that again, it's really worth doing.

664
00:32:03,400 --> 00:32:06,000
I know, it seems like you fought a lot with these sorts of things, but

665
00:32:06,000 --> 00:32:08,700
once you get them, right, it's kind of nice to have them, right?

666
00:32:09,000 --> 00:32:10,700
And so you can see what happened here.

667
00:32:10,800 --> 00:32:12,400
Like, you can see, the way that I was writing this.

668
00:32:12,400 --> 00:32:13,400
I just followed our

669
00:32:13,600 --> 00:32:16,000
Asian scheme, which is kind of nice and it makes things look good and

670
00:32:16,000 --> 00:32:16,600
all that other stuff.

671
00:32:16,600 --> 00:32:18,900
But what you'll notice is these are not programmatically generate

672
00:32:18,900 --> 00:32:22,000
abby'll unless you write a meta program, obviously, these are not

673
00:32:22,000 --> 00:32:25,800
program Matthew genital in the C, plus plus P processor, but these

674
00:32:26,100 --> 00:32:26,700
would be

675
00:32:31,200 --> 00:32:31,800
Right.

676
00:32:32,600 --> 00:32:36,900
As soon as I make the statement that the debug type itself is just the

677
00:32:36,900 --> 00:32:41,700
word debug type with something at the end of it, that is the actual

678
00:32:41,700 --> 00:32:42,200
type.

679
00:32:43,000 --> 00:32:46,400
And if I took it one step further and take these guys here and

680
00:32:46,400 --> 00:32:49,200
actually made, these guys, be something like value.

681
00:32:49,600 --> 00:32:54,300
And then that thing, all of a sudden this becomes a lot more powerful

682
00:32:54,900 --> 00:32:59,000
because now macros can just pick out the thing that they want.

683
00:33:00,300 --> 00:33:02,600
All with one go, right?

684
00:33:02,600 --> 00:33:05,000
They don't there's no name translation going on.

685
00:33:05,000 --> 00:33:09,400
It's always just whatever the thing is you know with with its type

686
00:33:09,400 --> 00:33:11,600
kind of stuck at the end and I guess rectangle two and three.

687
00:33:11,600 --> 00:33:12,700
Don't have that underscore their?

688
00:33:12,700 --> 00:33:16,400
That's My Imagination Running Wild not actually true.

689
00:33:17,300 --> 00:33:18,300
What can you do?

690
00:33:19,200 --> 00:33:20,000
So there you go.

691
00:33:23,000 --> 00:33:24,800
Again, that's just a nice little change there.

692
00:33:25,700 --> 00:33:31,400
And so that's all kind of nice stuff that again, kind of lines that up

693
00:33:31,400 --> 00:33:31,900
really nicely.

694
00:33:31,900 --> 00:33:34,800
And now, when we look at what actually happens in here, in fact, all

695
00:33:34,800 --> 00:33:37,000
of this value, set an event data stuff, right?

696
00:33:37,000 --> 00:33:40,100
Look at all of these things that we wrote all of those.

697
00:33:40,100 --> 00:33:44,000
I think we could probably do in a more concise way.

698
00:33:44,000 --> 00:33:47,700
Now, I mean, we, we probably still, I guess you still kind of have to

699
00:33:47,700 --> 00:33:49,500
have that Cracker in some sense.

700
00:33:49,500 --> 00:33:54,600
But we could, in fact generate all of these guys as macros themselves,

701
00:33:54,600 --> 00:33:55,600
if we really

702
00:33:55,800 --> 00:34:02,500
And to unfortunately again, it can't quite go away, unless maybe use

703
00:34:02,500 --> 00:34:07,600
the type of macro but that a I don't think that'll work anyway, point

704
00:34:07,600 --> 00:34:10,800
being that allows us to stop fussing with what we were fussing with

705
00:34:10,800 --> 00:34:11,300
before.

706
00:34:11,800 --> 00:34:16,000
And we should be able to now have debug variable work, exactly as we

707
00:34:16,000 --> 00:34:16,699
would want it to.

708
00:34:16,900 --> 00:34:21,199
So now, you know, got type path variable,

709
00:34:23,600 --> 00:34:24,699
Type path variable.

710
00:34:24,900 --> 00:34:27,800
I think now we can do is just say, okay we don't need a counter, we

711
00:34:27,800 --> 00:34:30,800
can just use variable as the thing that gets upended onto their,

712
00:34:30,900 --> 00:34:31,500
right?

713
00:34:31,699 --> 00:34:32,800
So that's pretty easy.

714
00:34:33,300 --> 00:34:37,600
And then here, like I said, when we want to access the value, we can

715
00:34:37,600 --> 00:34:41,699
just do value underscore, whatever that type is, and those can graph

716
00:34:41,699 --> 00:34:42,300
together.

717
00:34:42,600 --> 00:34:45,400
You know, I'm saying, here are the same thing, we sort of have, like,

718
00:34:45,400 --> 00:34:48,000
whatever the variable is that we wanted of that type.

719
00:34:48,300 --> 00:34:49,900
That is just going to be.

720
00:34:49,900 --> 00:34:52,000
Oops, I Did it here.

721
00:34:52,000 --> 00:34:52,699
Don't know why.

722
00:34:53,400 --> 00:34:54,000
There we go.

723
00:34:57,000 --> 00:34:57,700
That all works.

724
00:34:57,700 --> 00:35:01,400
And then when we do initialize debug value, we can also pass the type

725
00:35:01,400 --> 00:35:02,200
into that.

726
00:35:02,400 --> 00:35:05,200
So when we pass the type in initialize debug value again.

727
00:35:05,200 --> 00:35:08,800
Now it's easy for us to figure out what the type actually is, it's

728
00:35:08,800 --> 00:35:09,500
just whatever.

729
00:35:09,500 --> 00:35:12,700
The real type was what they said, they wanted an R32 and that's what

730
00:35:12,700 --> 00:35:13,200
they passed us.

731
00:35:13,500 --> 00:35:14,200
No problem.

732
00:35:14,200 --> 00:35:16,000
We just say, okay, we just append.

733
00:35:16,100 --> 00:35:17,600
Debug type to that thing.

734
00:35:17,600 --> 00:35:21,400
And now we have the type identifier that we actually wanted.

735
00:35:21,400 --> 00:35:22,000
Right?

736
00:35:22,200 --> 00:35:25,600
Again, all of this stuff is just nonsense because the C++

737
00:35:25,700 --> 00:35:28,200
Just don't know what they're doing and never really did.

738
00:35:28,600 --> 00:35:31,000
And so you kind of constantly run this situation of fighting

739
00:35:31,000 --> 00:35:33,000
everything all the time, these are just things that should have been

740
00:35:33,000 --> 00:35:35,300
really simple and never to fixed, but

741
00:35:39,100 --> 00:35:43,600
What you gonna do hilariously, they added runtime type information

742
00:35:43,600 --> 00:35:45,400
which doesn't actually work.

743
00:35:46,400 --> 00:35:49,000
So they kind of tried to solve the problem at some point or thought.

744
00:35:49,000 --> 00:35:51,000
Maybe they were going to solve the problem but then didn't solve the

745
00:35:51,000 --> 00:35:52,200
problem, which was pretty awesome.

746
00:35:52,500 --> 00:35:57,000
But anyway, after we have all that stuff set up, we're in a good

747
00:35:57,000 --> 00:35:57,400
position.

748
00:35:57,400 --> 00:35:59,900
Now, in fact, this the way we look at this, this one doesn't have

749
00:36:00,000 --> 00:36:00,900
To do it that way, right?

750
00:36:00,900 --> 00:36:04,500
It knows that what it's doing is doing a bull for to here, right?

751
00:36:04,800 --> 00:36:09,200
So that one's totally fine and this is going to be value, be 32.

752
00:36:10,100 --> 00:36:13,500
So now if we've got that, we can do this, like we did here and it

753
00:36:13,500 --> 00:36:16,800
should be fine, we just have to change it so that these things get

754
00:36:16,800 --> 00:36:22,600
passed through type path, variable type path variable.

755
00:36:24,300 --> 00:36:26,300
And that's really about it.

756
00:36:26,300 --> 00:36:29,000
Now, I've got a bunch of compile errors that I gotta clean up because

757
00:36:29,200 --> 00:36:33,000
we sort of change these names a little bit to be a, you know,

758
00:36:33,000 --> 00:36:34,600
programmatically determinable.

759
00:36:34,600 --> 00:36:35,500
So, they don't really well.

760
00:36:35,500 --> 00:36:38,300
There already were programmatically to terminal, but just terminal by

761
00:36:38,300 --> 00:36:42,700
the non programming language, that is the C++ macro system.

762
00:36:44,800 --> 00:36:47,100
All right, so there we go.

763
00:36:49,000 --> 00:36:51,900
That's those and I suspect I have a bunch more to do.

764
00:36:51,900 --> 00:36:56,800
So these are all going to be like value R32 value.

765
00:36:57,300 --> 00:37:00,600
You 32 value s 32

766
00:37:02,100 --> 00:37:09,500
And value V 2 value, V, 3 value, V 4.

767
00:37:12,300 --> 00:37:14,200
Value rectangle, too.

768
00:37:15,400 --> 00:37:17,100
Value rectangle, 3.

769
00:37:21,200 --> 00:37:24,600
And value map ID.

770
00:37:26,300 --> 00:37:29,900
Value sound ID value font I do.

771
00:37:30,900 --> 00:37:31,400
Okay.

772
00:37:33,600 --> 00:37:37,100
Yeah, function does not take three arguments.

773
00:37:37,300 --> 00:37:38,000
That's true.

774
00:37:38,100 --> 00:37:42,000
We decided it did never actually implemented it, right?

775
00:37:43,600 --> 00:37:46,300
So, let's go back here, and make sure that we actually have that

776
00:37:46,300 --> 00:37:47,800
defined to take the arguments.

777
00:37:47,800 --> 00:37:51,700
That it actually takes, so it's debug of insight or debug value type.

778
00:37:54,300 --> 00:37:55,200
Keyboard type.

779
00:37:56,600 --> 00:37:59,200
I don't even remember what's called that the top of this file.

780
00:38:00,500 --> 00:38:01,400
It's deep uptight.

781
00:38:01,500 --> 00:38:01,800
Yep.

782
00:38:04,100 --> 00:38:08,100
Okay, so now, what are you complaining about mr.

783
00:38:08,100 --> 00:38:09,700
Complaining thing.

784
00:38:10,300 --> 00:38:12,300
What is it that bothers you?

785
00:38:12,500 --> 00:38:16,100
You are complaining about.

786
00:38:17,300 --> 00:38:22,900
Well, actually that should be that, okay, Diva went, should not should

787
00:38:22,900 --> 00:38:25,200
be preceded by a bracket.

788
00:38:25,800 --> 00:38:29,700
Okay, I will take your word for that.

789
00:38:29,800 --> 00:38:33,100
Let's see why you are saying that.

790
00:38:34,600 --> 00:38:37,800
Why should it have been preceded by a bracket?

791
00:38:37,900 --> 00:38:40,200
I don't really follow you.

792
00:38:40,300 --> 00:38:45,400
Debug event should have been should be preceded by bracket.

793
00:38:47,000 --> 00:38:47,900
Mmm.

794
00:38:49,500 --> 00:38:54,000
Okay, let's see here.

795
00:39:03,500 --> 00:39:04,000
Hmm.

796
00:39:06,600 --> 00:39:08,500
It's only on the debug variable path.

797
00:39:10,500 --> 00:39:12,000
And I'm not sure.

798
00:39:13,600 --> 00:39:14,600
Is there any other?

799
00:39:14,600 --> 00:39:15,400
It's just that one.

800
00:39:15,400 --> 00:39:17,100
So local persist debug event.

801
00:39:17,100 --> 00:39:20,500
It already started complaining that it should have looked like that.

802
00:39:22,000 --> 00:39:22,900
Why pray?

803
00:39:22,900 --> 00:39:23,500
Tell.

804
00:39:25,200 --> 00:39:26,300
Write what?

805
00:39:26,400 --> 00:39:27,400
Oh, because I forgot.

806
00:39:27,400 --> 00:39:28,200
That's great.

807
00:39:29,600 --> 00:39:30,400
That's great.

808
00:39:32,300 --> 00:39:33,300
So, let's see.

809
00:39:33,300 --> 00:39:34,600
That's all correct now.

810
00:39:35,000 --> 00:39:35,400
Okay.

811
00:39:36,100 --> 00:39:41,300
But still the same debug event should be preceded by close bracket.

812
00:39:41,500 --> 00:39:42,500
Don't get it.

813
00:39:42,500 --> 00:39:44,400
Don't know why that would be the case.

814
00:39:45,700 --> 00:39:46,900
What am I seeing here?

815
00:39:46,900 --> 00:39:52,800
So, my variable is that a quoting problem is local?

816
00:39:52,800 --> 00:39:54,300
Persist is defined here?

817
00:39:54,300 --> 00:39:55,300
Or is it not?

818
00:39:55,800 --> 00:40:00,000
Is this is this a figment of my imagination that that's actually

819
00:40:00,000 --> 00:40:00,500
there.

820
00:40:01,400 --> 00:40:02,500
Nope, that's fine.

821
00:40:03,700 --> 00:40:04,500
So that's good.

822
00:40:05,100 --> 00:40:08,200
So I'm not sure why it's giving me that particular compile error.

823
00:40:08,700 --> 00:40:12,100
Again, the wonders of the, the macro preprocessor.

824
00:40:12,100 --> 00:40:13,400
So, let's just see what happens here.

825
00:40:13,400 --> 00:40:14,400
That's the row variable.

826
00:40:14,700 --> 00:40:16,000
Let's just see what happens here.

827
00:40:17,900 --> 00:40:24,900
If I expand this out, so if I've got type path and variable those so

828
00:40:24,900 --> 00:40:29,000
type right is going to be our 32 everywhere.

829
00:40:29,600 --> 00:40:33,200
So that's just our 32 that's

830
00:40:35,900 --> 00:40:37,400
Debug camera distance.

831
00:40:39,900 --> 00:40:43,100
That's debug camera distance.

832
00:40:43,500 --> 00:40:45,000
This is renderer.

833
00:40:49,600 --> 00:40:51,500
That's really about it.

834
00:40:52,000 --> 00:40:53,700
It's not a lot to this thing.

835
00:40:55,300 --> 00:40:57,400
Write debug value.

836
00:40:57,400 --> 00:40:59,300
Debug camera distance.

837
00:41:01,200 --> 00:41:03,900
Debug value, debug camera distance.

838
00:41:07,700 --> 00:41:10,800
Yeah, that's what it looks like, right?

839
00:41:12,400 --> 00:41:13,800
So, what's the problem?

840
00:41:14,700 --> 00:41:19,800
Debug event should be preceded by a close brace, so it doesn't think I

841
00:41:19,800 --> 00:41:20,800
can declare something.

842
00:41:20,800 --> 00:41:21,700
Static here?

843
00:41:22,100 --> 00:41:27,100
I guess or it doesn't know what a debug event is, but it couldn't that

844
00:41:27,100 --> 00:41:28,000
couldn't be true, right?

845
00:41:28,000 --> 00:41:29,200
Because here's the debug event.

846
00:41:29,200 --> 00:41:30,000
It's right here.

847
00:41:30,600 --> 00:41:31,500
So that's fine.

848
00:41:31,900 --> 00:41:35,000
So is the problem that the debug if is setting us up for failure.

849
00:41:35,200 --> 00:41:36,600
I don't think so.

850
00:41:37,100 --> 00:41:41,700
Because it looks like that should have been fine, ah, because I change

851
00:41:41,700 --> 00:41:42,000
the scene.

852
00:41:42,200 --> 00:41:42,800
Axe here.

853
00:41:45,300 --> 00:41:46,500
I don't know why I did that.

854
00:41:46,500 --> 00:41:50,000
In fact I think I can return it to what it was before that was just a

855
00:41:50,800 --> 00:41:52,400
slip slip of the fingers.

856
00:41:53,000 --> 00:41:53,500
Alright.

857
00:41:53,600 --> 00:41:54,900
So debug camera value.

858
00:41:54,900 --> 00:41:55,400
This is right.

859
00:41:55,400 --> 00:41:56,100
That's all good.

860
00:41:56,100 --> 00:41:59,800
Yeah so now we know that that's probably fine and now

861
00:42:00,000 --> 00:42:03,800
You have that working, we should be able to do this debug if

862
00:42:03,800 --> 00:42:04,500
everywhere.

863
00:42:04,900 --> 00:42:09,200
So curious, like, use room based camera, I don't actually remember for

864
00:42:09,200 --> 00:42:10,300
some of these guys.

865
00:42:10,600 --> 00:42:13,200
I don't remember where they were in the hierarchy, right?

866
00:42:13,700 --> 00:42:17,000
Use room based camera was under like renderer camera

867
00:42:18,000 --> 00:42:23,400
I guess so we can do a debug if here and have that.

868
00:42:25,800 --> 00:42:30,100
Yeah, the thing that looks like this, I guess.

869
00:42:32,400 --> 00:42:33,200
Something like that.

870
00:42:34,900 --> 00:42:35,300
Here we go.

871
00:42:35,300 --> 00:42:38,000
Ground chunk checkerboards again, same thing.

872
00:42:38,000 --> 00:42:39,900
Now we just do debug if

873
00:42:44,000 --> 00:42:46,500
And this is just a rare.

874
00:42:46,500 --> 00:42:47,300
Was that again?

875
00:42:47,300 --> 00:42:48,700
I don't remember where we put it.

876
00:42:49,500 --> 00:42:53,500
Use ground, chuck checkerboards, this was in.

877
00:42:54,200 --> 00:42:55,900
I don't know why it says group chunks.

878
00:42:55,900 --> 00:42:59,800
I guess that was just our little, our little exacts, a dental thing

879
00:42:59,800 --> 00:43:00,600
that we did there.

880
00:43:01,000 --> 00:43:02,800
So there is ground, chuck checkerboards.

881
00:43:02,800 --> 00:43:05,400
We could just do ground chunk checkerboards because we don't probably

882
00:43:05,400 --> 00:43:08,800
say ground chunks twice seems a little redundant.

883
00:43:09,400 --> 00:43:11,700
So let's just go ahead and say there's our if

884
00:43:12,700 --> 00:43:15,100
Else we will do the other way round.

885
00:43:16,000 --> 00:43:18,800
Like so, how are we doing here?

886
00:43:20,900 --> 00:43:24,800
So we need V4 color to be defined ahead of time looks like, so I'll

887
00:43:24,800 --> 00:43:25,900
just go ahead and do that.

888
00:43:27,600 --> 00:43:28,700
And there we go.

889
00:43:29,400 --> 00:43:30,800
So recompute ground.

890
00:43:30,800 --> 00:43:32,600
Chunks on XE change.

891
00:43:32,800 --> 00:43:35,500
Again, should just be a debug if here.

892
00:43:37,600 --> 00:43:43,400
We can just call that recompute on XE change and that's again going to

893
00:43:43,400 --> 00:43:45,400
just be ground chunks.

894
00:43:52,100 --> 00:43:53,100
Yeah.

895
00:43:54,100 --> 00:43:55,200
Yeah.

896
00:43:56,000 --> 00:43:58,700
So something like this.

897
00:44:02,700 --> 00:44:03,500
Same thing here.

898
00:44:03,500 --> 00:44:04,400
Debug if

899
00:44:06,000 --> 00:44:10,700
Renderer test very draw, buffer size, feel like that's in the

900
00:44:10,700 --> 00:44:11,600
renderer, right?

901
00:44:13,900 --> 00:44:14,400
Yep.

902
00:44:18,700 --> 00:44:23,400
What else we got grand trunk, outlines debug if ground chunks.

903
00:44:24,900 --> 00:44:25,600
Outlines.

904
00:44:33,300 --> 00:44:34,600
Familiar follows hero.

905
00:44:35,600 --> 00:44:36,000
Debug.

906
00:44:36,000 --> 00:44:40,100
If I think this is what simulation or end.

907
00:44:40,100 --> 00:44:42,000
He's, it's called a simulation.

908
00:44:43,600 --> 00:44:44,800
Familiar, follows hero.

909
00:44:46,300 --> 00:44:48,000
Probably simulation is actually stupid.

910
00:44:48,300 --> 00:44:49,500
Probably entities actually better.

911
00:44:53,100 --> 00:44:54,200
Could do something like that.

912
00:44:56,300 --> 00:44:56,800
Maybe.

913
00:44:58,800 --> 00:44:59,800
Even let Scott AI.

914
00:45:00,300 --> 00:45:03,600
It's artificially intelligent, guys, don't you know?

915
00:45:05,200 --> 00:45:07,000
It's just like follows a guy around, but it's artificially

916
00:45:07,000 --> 00:45:10,300
intelligent, I declare that it is the case.

917
00:45:10,900 --> 00:45:15,900
So this is going to be probably just like particles test or something

918
00:45:15,900 --> 00:45:16,500
like that.

919
00:45:20,400 --> 00:45:24,100
And at the particle test is on and does all this stuff.

920
00:45:25,700 --> 00:45:26,200
There we go.

921
00:45:29,100 --> 00:45:31,400
Can't can't let that stay.

922
00:45:31,500 --> 00:45:32,000
There we go.

923
00:45:35,000 --> 00:45:36,000
Almost done.

924
00:45:36,400 --> 00:45:42,000
So this is this is debug if particles.

925
00:45:43,200 --> 00:45:44,000
Show grid.

926
00:45:50,000 --> 00:45:50,800
What else?

927
00:45:51,800 --> 00:45:53,100
You space Out Lines.

928
00:45:55,800 --> 00:46:00,800
I don't know what this would be called, exactly.

929
00:46:14,400 --> 00:46:15,500
I guess this is entity.

930
00:46:15,500 --> 00:46:17,200
You say settling or simulation?

931
00:46:17,300 --> 00:46:17,600
I don't know.

932
00:46:17,600 --> 00:46:18,700
I don't know who that is.

933
00:46:18,700 --> 00:46:19,400
That's just kind of.

934
00:46:19,400 --> 00:46:22,400
Like, some guys are outlined, you know, they're being outlined, who

935
00:46:22,400 --> 00:46:23,400
knows why they're being outlined.

936
00:46:23,400 --> 00:46:24,400
Nobody knows, really.

937
00:46:24,700 --> 00:46:27,300
Could be any reason why does there have to be a reason?

938
00:46:27,700 --> 00:46:28,500
No one knows.

939
00:46:29,400 --> 00:46:31,700
All right, so let's see where we're at here.

940
00:46:31,700 --> 00:46:33,800
Debug type R32.

941
00:46:34,400 --> 00:46:36,600
This is in our interface code, right?

942
00:46:36,600 --> 00:46:37,900
When we do debug value,

943
00:46:40,200 --> 00:46:41,500
And we set this stuff up.

944
00:46:41,700 --> 00:46:44,800
You can kind of see here that we're doing well.

945
00:46:44,800 --> 00:46:47,500
In this case actually record debug event.

946
00:46:47,500 --> 00:46:48,400
We set.

947
00:46:48,400 --> 00:46:50,100
This is just a faux value.

948
00:46:50,300 --> 00:46:54,400
Really, this should just be something like, debug type unknown, right?

949
00:46:54,400 --> 00:47:00,100
It should be like debug type unknown because it gets set later, right?

950
00:47:00,200 --> 00:47:03,200
So at first, it really, like, when we do debug value, that should

951
00:47:03,200 --> 00:47:06,800
really just set it to whatever, it doesn't know what it is, right?

952
00:47:06,900 --> 00:47:08,600
And then it would go, it would it would move.

953
00:47:08,800 --> 00:47:09,300
From there.

954
00:47:09,900 --> 00:47:12,800
Okay, so now these are all like really just a wrote just a quick

955
00:47:12,800 --> 00:47:17,100
transform and all of, I guess, probably all of these things to have to

956
00:47:17,100 --> 00:47:17,600
be changed.

957
00:47:17,600 --> 00:47:17,700
Right?

958
00:47:17,700 --> 00:47:23,000
To value our 32, right value be 32

959
00:47:24,500 --> 00:47:25,800
Value be 32.

960
00:47:27,200 --> 00:47:28,600
Value s32.

961
00:47:30,500 --> 00:47:31,900
Value, you 32.

962
00:47:34,400 --> 00:47:36,300
And yeah, value V2.

963
00:47:38,400 --> 00:47:39,600
Value V2.

964
00:47:42,300 --> 00:47:47,900
Value B3, value, B, 3 value B 3.

965
00:47:48,800 --> 00:47:49,500
There we go.

966
00:47:49,500 --> 00:47:52,600
Got a permit to do these little guys and now these are all kind of

967
00:47:52,600 --> 00:47:55,300
nice and harmonized, right?

968
00:47:56,400 --> 00:47:57,400
Value before.

969
00:48:00,700 --> 00:48:03,100
Value before value before.

970
00:48:05,000 --> 00:48:06,000
Are these all?

971
00:48:08,000 --> 00:48:10,700
Are these all correct up here as well?

972
00:48:11,200 --> 00:48:15,100
Rectangle, to rectangle 3, that's not correct.

973
00:48:17,300 --> 00:48:25,800
It's good rectangle to rectangle, three rectangle to kind of busy work

974
00:48:25,800 --> 00:48:29,800
here, nothing particularly interesting but sometimes you got to do it

975
00:48:29,900 --> 00:48:32,000
until mr.

976
00:48:32,000 --> 00:48:35,700
Fourth dimension, finishes his code based editor,

977
00:48:38,500 --> 00:48:40,600
We'll just have to make do.

978
00:48:41,600 --> 00:48:49,100
Okay, so they're getting close here to being all good, but we still

979
00:48:49,100 --> 00:48:50,400
have a little bit more to go.

980
00:48:51,600 --> 00:48:55,800
Let's just go ahead and finish that out.

981
00:48:55,800 --> 00:48:58,800
So value underscore our bitmap ID,

982
00:49:00,300 --> 00:49:02,700
Is what that has to be again.

983
00:49:02,700 --> 00:49:05,700
Same thing here, value underscore bitmap, ID,

984
00:49:08,100 --> 00:49:13,900
And these are just quickly things we have to change slightly value, be

985
00:49:13,900 --> 00:49:16,600
32 value P 32.

986
00:49:18,200 --> 00:49:20,800
And again.

987
00:49:23,300 --> 00:49:24,200
I think.

988
00:49:25,300 --> 00:49:26,200
We're almost done.

989
00:49:29,000 --> 00:49:29,600
There we are.

990
00:49:32,000 --> 00:49:39,600
so oops, one more frame marker Frank, okay, so frame marker which is

991
00:49:39,600 --> 00:49:43,000
in the handmade interface stuff frame marker,

992
00:49:45,200 --> 00:49:49,000
Let's see what else we've got here.

993
00:49:50,300 --> 00:49:53,600
So free marker seconds, elapsed.

994
00:49:53,600 --> 00:49:57,400
Real 32 this just needs to be a value are 32 and then we're good.

995
00:49:58,100 --> 00:49:58,400
Okay.

996
00:50:00,200 --> 00:50:01,300
So I think that's everything.

997
00:50:02,100 --> 00:50:05,800
Now we have all of that stuff working, all that stuff has been sort of

998
00:50:05,800 --> 00:50:07,500
transmuted, right?

999
00:50:07,700 --> 00:50:11,300
So now all of this stuff can just disappear, right?

1000
00:50:11,300 --> 00:50:15,400
We don't need this file anymore, we can just straight-up delete it.

1001
00:50:15,600 --> 00:50:17,900
The only thing that we need at the moment is this.

1002
00:50:18,900 --> 00:50:21,800
And so we can just go ahead and cut and paste that into here.

1003
00:50:22,000 --> 00:50:24,100
And then let's just straight-up delete this file, right?

1004
00:50:24,100 --> 00:50:26,600
Handmade debug variables is going to go away.

1005
00:50:26,900 --> 00:50:29,400
Goodbye and now

1006
00:50:31,600 --> 00:50:35,200
Or again, simplifying things even further, you know, trying to get

1007
00:50:35,200 --> 00:50:39,400
them down to an even more straightforward version and just kind of

1008
00:50:39,400 --> 00:50:41,500
compact compact compact that code.

1009
00:50:41,700 --> 00:50:44,300
Now that we sort of see what we want, we tested things, we kind of

1010
00:50:44,300 --> 00:50:46,100
know what, you know, what things we want.

1011
00:50:46,100 --> 00:50:47,300
We things we don't want

1012
00:50:49,800 --> 00:50:51,900
So, we're getting closer, okay?

1013
00:50:54,100 --> 00:50:58,300
So initialise debug value is really the only function that we

1014
00:50:58,300 --> 00:50:59,900
introduced at all in all.

1015
00:51:00,000 --> 00:51:00,500
Of that.

1016
00:51:00,600 --> 00:51:00,900
Right?

1017
00:51:00,900 --> 00:51:04,400
So now that we have we sort of expect that complete system.

1018
00:51:04,400 --> 00:51:07,200
The only function that we actually need to implement is this thing

1019
00:51:07,200 --> 00:51:09,100
here right now?

1020
00:51:09,100 --> 00:51:10,200
What we do need to do

1021
00:51:11,800 --> 00:51:15,600
In this in this other case over here we need to sort of think about

1022
00:51:15,600 --> 00:51:16,700
this one more level.

1023
00:51:17,500 --> 00:51:20,900
Again before I go off implementing this we kind of need to think about

1024
00:51:20,900 --> 00:51:26,900
one more thing which is that how could we get it or could we get it to

1025
00:51:26,900 --> 00:51:27,900
compile out?

1026
00:51:28,300 --> 00:51:28,900
Right?

1027
00:51:29,000 --> 00:51:32,600
Is there a way we could get this thing to compile out entirely?

1028
00:51:33,000 --> 00:51:37,000
And so the way that I'm sort of thinking about that is like okay if I

1029
00:51:37,000 --> 00:51:40,200
wanted to make it so in fact I could even do this right now.

1030
00:51:40,800 --> 00:51:41,100
If I

1031
00:51:41,400 --> 00:51:41,800
Make this.

1032
00:51:41,800 --> 00:51:45,800
So it compiles out and all of the values that we have before would

1033
00:51:45,800 --> 00:51:48,500
just be, you know, any of the debug UPS or whatever any of the debug

1034
00:51:48,500 --> 00:51:52,500
variables, those would be set to permanent values.

1035
00:51:53,100 --> 00:51:54,800
How would we do that, right?

1036
00:51:55,800 --> 00:51:59,800
So if we take a look at the debug, if the big problem with the debug

1037
00:51:59,800 --> 00:52:05,000
is and actually all of these is that we don't necessarily always have

1038
00:52:05,000 --> 00:52:06,400
any way of really

1039
00:52:08,100 --> 00:52:11,600
A really defining exactly what the thing is that we're talking about

1040
00:52:11,600 --> 00:52:13,700
other than the string that was given to it.

1041
00:52:13,900 --> 00:52:16,900
So that makes it hard to actually compile that thing out.

1042
00:52:17,100 --> 00:52:19,300
And so that's why I'm thinking, you know, like a kind of before I go

1043
00:52:19,300 --> 00:52:21,400
and actually finish something this, I might want to make it a little,

1044
00:52:21,400 --> 00:52:21,900
right?

1045
00:52:22,300 --> 00:52:24,900
Because what I'd like to do is be able to do something like, okay.

1046
00:52:26,800 --> 00:52:30,600
If we have debug, if here and in fact, I guess, you know, one thing I

1047
00:52:30,600 --> 00:52:34,800
could say is also, I might want this to actually always happen this

1048
00:52:34,800 --> 00:52:35,200
way.

1049
00:52:40,500 --> 00:52:41,000
Right.

1050
00:52:41,200 --> 00:52:43,400
So we're just talking about redefining these things.

1051
00:52:43,800 --> 00:52:47,200
So in one case I have the one that we're actually going to use, it's

1052
00:52:47,200 --> 00:52:48,000
something like this.

1053
00:52:48,100 --> 00:52:51,300
In the other case, the one that we're going to use is going to look

1054
00:52:51,300 --> 00:52:52,200
like something else.

1055
00:52:52,500 --> 00:52:55,500
And what I'd like to be able to do here is instead of doing local

1056
00:52:55,500 --> 00:52:58,600
persist and all of this stuff here where we actually Define it or do

1057
00:52:58,600 --> 00:53:01,700
any of that stuff, what I'd rather do is have some way of going, okay?

1058
00:53:01,700 --> 00:53:05,900
What I really want to do is like debug constant or something, like

1059
00:53:05,900 --> 00:53:07,400
just it's a constant, right?

1060
00:53:08,300 --> 00:53:10,000
And then we have like a name.

1061
00:53:13,000 --> 00:53:13,600
Right?

1062
00:53:13,700 --> 00:53:16,700
So that we can just Define we can pound to find that thing and it

1063
00:53:16,700 --> 00:53:19,900
would just be whatever it actually was going to be right.

1064
00:53:19,900 --> 00:53:23,700
So we would still have, we would still have handmade config dot h.

1065
00:53:23,800 --> 00:53:27,500
It would just only ever get used if the debug system was turned off,

1066
00:53:27,700 --> 00:53:28,300
right?

1067
00:53:28,300 --> 00:53:32,000
So, it would basically be something that looked like, oh, if we are,

1068
00:53:32,000 --> 00:53:32,500
you know,

1069
00:53:34,800 --> 00:53:40,000
You know, if we are not handmade internal, then we use this

1070
00:53:40,000 --> 00:53:41,400
information that we have here.

1071
00:53:41,500 --> 00:53:42,800
Otherwise we don't

1072
00:53:44,100 --> 00:53:45,000
If that makes sense.

1073
00:53:45,200 --> 00:53:47,800
So in here it could do the if on the constant name and then when we

1074
00:53:47,800 --> 00:53:50,400
asked for like a debug variable, like in this case, what we would

1075
00:53:50,400 --> 00:53:52,300
actually get is this

1076
00:54:00,500 --> 00:54:02,400
Or I guess I should say this.

1077
00:54:09,900 --> 00:54:13,100
And what you can see if you look at this is we're going to have a

1078
00:54:13,100 --> 00:54:18,100
problem with that name with the naming scheme, eventually the reason

1079
00:54:18,100 --> 00:54:20,500
we're going to have a problem with the naming scheme eventually if I

1080
00:54:20,500 --> 00:54:22,200
literally just sort of did it this way?

1081
00:54:22,300 --> 00:54:26,300
Even if we made the ifs work somehow, is that if you look at what the

1082
00:54:26,300 --> 00:54:28,900
variable names actually are going to be, they're going to be stuff.

1083
00:54:29,200 --> 00:54:31,700
Well, I mean you can already see what they are, right, let's go ahead

1084
00:54:31,700 --> 00:54:32,600
and take a look here.

1085
00:54:34,900 --> 00:54:39,600
So the names of these debug values, okay, that's not going to work.

1086
00:54:39,600 --> 00:54:42,300
I wanted it to just jump me to some of them but I'll go ahead and grab

1087
00:54:43,300 --> 00:54:44,500
debug variable.

1088
00:54:50,500 --> 00:54:51,000
Okay.

1089
00:54:51,800 --> 00:54:54,000
So if you take a look at what happens here, you're going to have

1090
00:54:54,000 --> 00:54:56,800
something like ran render a /, you know?

1091
00:54:56,800 --> 00:54:59,300
And it would probably be like camera distance or something like that.

1092
00:54:59,300 --> 00:54:59,600
Right?

1093
00:54:59,600 --> 00:55:00,000
Or deep.

1094
00:55:00,000 --> 00:55:02,600
You know, it's debug camera distance, or who knows what it is, or

1095
00:55:02,600 --> 00:55:04,500
outlines use outlines, who knows?

1096
00:55:04,800 --> 00:55:09,900
Right whatever it is, this may occur in multiple places in our

1097
00:55:09,900 --> 00:55:11,900
hierarchy, potentially, right?

1098
00:55:12,100 --> 00:55:14,600
So you know, if we did something like this,

1099
00:55:16,400 --> 00:55:19,900
Who knows if someone else might want something called used you debug

1100
00:55:19,900 --> 00:55:21,200
camera, right?

1101
00:55:22,100 --> 00:55:26,000
Or something like that, or maybe we even have it like that, you know,

1102
00:55:26,000 --> 00:55:27,300
and it's like use debug.

1103
00:55:27,600 --> 00:55:31,200
Well, now this name used debug once we have to make it so that there's

1104
00:55:31,200 --> 00:55:33,100
a bunch of constants to find for that thing.

1105
00:55:33,300 --> 00:55:37,000
It's no longer going to be unique without these parts of it, right?

1106
00:55:37,100 --> 00:55:40,700
So I can't just expect somebody to somewhere to find something like

1107
00:55:40,700 --> 00:55:42,500
renderer I'm sorry.

1108
00:55:42,800 --> 00:55:43,800
Use the bug.

1109
00:55:46,200 --> 00:55:46,900
Zero.

1110
00:55:47,100 --> 00:55:49,700
Because it may be that there's someone else in some other part of the

1111
00:55:49,700 --> 00:55:51,800
code who's done something like this.

1112
00:55:53,100 --> 00:55:53,600
Right.

1113
00:55:55,100 --> 00:55:58,800
And that's not not going to fly, right?

1114
00:55:59,000 --> 00:56:02,500
So what I need to be able to do is I need to be able to include the

1115
00:56:02,500 --> 00:56:06,300
path information which means that things are a little more

1116
00:56:06,300 --> 00:56:07,500
complicated, right?

1117
00:56:07,800 --> 00:56:10,700
But what I can do is I can revert a little bit back to sort of the

1118
00:56:10,700 --> 00:56:13,400
thing that I was saying before where I could sort of go back to doing

1119
00:56:13,400 --> 00:56:17,600
something like this that I could probably make work and curious how I

1120
00:56:17,600 --> 00:56:22,100
would make that work, right, how I would make that work is when we are

1121
00:56:22,300 --> 00:56:23,300
Talking about these things.

1122
00:56:23,300 --> 00:56:29,200
Like so we could just string eyes this in debug mode and make it be an

1123
00:56:29,200 --> 00:56:32,600
actual struct layout in non debug mode, right?

1124
00:56:33,800 --> 00:56:37,600
So let's go ahead and take a look at what that would look like if we

1125
00:56:37,600 --> 00:56:39,200
were to do it that way, right?

1126
00:56:39,800 --> 00:56:43,700
So in fact, and I guess do, we actually yeah, we still need to do it

1127
00:56:43,700 --> 00:56:44,100
this way.

1128
00:56:44,300 --> 00:56:48,100
So all we would need to do for that is again, the debug s kind of have

1129
00:56:48,100 --> 00:56:48,800
to look the same way.

1130
00:56:48,800 --> 00:56:51,200
Unfortunately, it's a little bit annoying to actually do it that way

1131
00:56:51,200 --> 00:56:55,500
but again it's not the end of the world necessarily but anyway, that's

1132
00:56:55,500 --> 00:56:56,300
what would have to look like.

1133
00:56:56,300 --> 00:56:59,400
So debug ifs are going to have to have a path.

1134
00:57:00,100 --> 00:57:03,600
And a variable as well, which kind of tell us what it is.

1135
00:57:03,600 --> 00:57:07,000
That's the actual thing that's getting use there, but that at least

1136
00:57:07,000 --> 00:57:08,700
unifies these guys a little bit.

1137
00:57:08,900 --> 00:57:10,000
So that's kind of nice as well.

1138
00:57:10,000 --> 00:57:11,200
I suppose at the end of the day.

1139
00:57:11,800 --> 00:57:14,700
And so then what happened here is we just do something like this

1140
00:57:14,800 --> 00:57:16,100
constant dot path.

1141
00:57:16,100 --> 00:57:19,000
That variable, something like that will be fine.

1142
00:57:20,200 --> 00:57:20,700
Right?

1143
00:57:20,800 --> 00:57:25,500
Or, you know, debug or, you know, Constance Global constant.

1144
00:57:25,500 --> 00:57:28,500
Something like that, who knows something like this.

1145
00:57:29,100 --> 00:57:31,200
And again, the same would actually be true here.

1146
00:57:31,400 --> 00:57:31,900
Exactly.

1147
00:57:31,900 --> 00:57:33,900
The same thing would happen here like that.

1148
00:57:34,400 --> 00:57:40,200
And then whenever we were trying to access these guys up here, where

1149
00:57:40,200 --> 00:57:43,500
the way we were doing before, instead of that /, we would just add

1150
00:57:43,500 --> 00:57:46,900
another dot onto their or and that would be how we would pass that

1151
00:57:46,900 --> 00:57:48,200
information for words, right?

1152
00:57:48,300 --> 00:57:49,900
So here we've got path and variable again.

1153
00:57:50,100 --> 00:57:51,100
We don't need counter anymore.

1154
00:57:51,100 --> 00:57:54,700
We can just use it variable, like we were doing I suppose and then we

1155
00:57:54,700 --> 00:57:55,800
can.

1156
00:57:56,000 --> 00:57:59,400
There we go, then we can do the same sort of thing here where we do

1157
00:57:59,400 --> 00:58:00,300
the concatenation.

1158
00:58:00,400 --> 00:58:02,900
When we pass this stuff down, we're going to pass exactly the same

1159
00:58:02,900 --> 00:58:03,100
stuff.

1160
00:58:03,100 --> 00:58:04,400
So it's really exactly the same code.

1161
00:58:04,400 --> 00:58:07,200
The only difference is one is hard-coded to do that if statement

1162
00:58:07,200 --> 00:58:09,400
because there's really not a lot of other ways to do it.

1163
00:58:09,400 --> 00:58:13,000
We could actually also have it so it did that for us more directly

1164
00:58:16,200 --> 00:58:19,700
I don't know if you want to do that or not, right but you could

1165
00:58:19,700 --> 00:58:22,600
imagine doing that I think it's probably good to just let it do the

1166
00:58:22,600 --> 00:58:24,900
extra typing in this macro and let it go.

1167
00:58:25,800 --> 00:58:26,400
So anyway

1168
00:58:28,400 --> 00:58:29,700
That's what I'm talking about.

1169
00:58:29,800 --> 00:58:32,500
And so, if I make that work, then you can kind of see how we can start

1170
00:58:32,500 --> 00:58:34,500
to construct making these constants, right?

1171
00:58:34,600 --> 00:58:39,000
It could just be some giant construct, not nightmare scenario thing

1172
00:58:39,500 --> 00:58:43,000
that we create that allows us to sort of create these variables.

1173
00:58:43,000 --> 00:58:47,300
And we could even imagine if the path itself, perhaps we're done with

1174
00:58:47,300 --> 00:58:50,200
something else like underscores maybe or something else.

1175
00:58:50,200 --> 00:58:56,700
That was like a character that was, you know, we wouldn't even need to

1176
00:58:56,700 --> 00:58:56,900
create.

1177
00:58:57,200 --> 00:58:59,800
We could create them in some other way.

1178
00:58:59,800 --> 00:59:02,500
I'm trying to think if there's some, you know, if that's too much of a

1179
00:59:02,500 --> 00:59:05,200
limitation, but basically what I'm saying is like, imagine you did

1180
00:59:05,200 --> 00:59:09,400
something like this and we just said that, that's how the paths were

1181
00:59:09,400 --> 00:59:10,500
defined in our system.

1182
00:59:10,700 --> 00:59:14,200
You can imagine everything sort of working through that system, as

1183
00:59:14,200 --> 00:59:14,600
well.

1184
00:59:14,900 --> 00:59:18,100
Again, I just don't really know what the best way to do.

1185
00:59:18,100 --> 00:59:19,800
That is exactly.

1186
00:59:26,900 --> 00:59:29,100
I'm gonna go with the underscores for now because I think it'll make

1187
00:59:29,100 --> 00:59:31,300
the simplest thing because then these can all be pound to fines and

1188
00:59:31,300 --> 00:59:34,300
don't really have to worry about it, which is kind of nice.

1189
00:59:34,500 --> 00:59:37,400
So, I think what I'm going to do is let the paste operator work

1190
00:59:37,400 --> 00:59:42,300
overtime on this particular situation, and let it do something like

1191
00:59:42,300 --> 00:59:45,600
that, which is kind of ridiculous, but you can kind of see where I'm

1192
00:59:45,600 --> 00:59:48,400
going with that now, they'll all be variables that have a unique name,

1193
00:59:48,400 --> 00:59:52,100
no matter what the situation is, and that seems like potentially a

1194
00:59:52,100 --> 00:59:52,900
better idea.

1195
00:59:53,000 --> 00:59:53,900
It to me.

1196
00:59:54,100 --> 00:59:57,900
And so, then what we would do and I guess this also means that to some

1197
00:59:57,900 --> 00:59:59,600
degree, this would just work as well.

1198
00:59:59,600 --> 00:59:59,800
Now,

1199
01:00:00,000 --> 01:00:01,900
Don't we don't really need a path.

1200
01:00:01,900 --> 01:00:04,100
I guess, for those guys, we could just do something like that.

1201
01:00:04,100 --> 01:00:06,600
It's just called renderer show light samples and those underscores

1202
01:00:06,600 --> 01:00:08,700
would get translated into nests in the hierarchy.

1203
01:00:09,000 --> 01:00:10,700
I'm actually probably okay with that.

1204
01:00:10,700 --> 01:00:15,400
I feel like that's probably fine for the most part with the way these

1205
01:00:15,400 --> 01:00:16,500
are getting translated.

1206
01:00:16,500 --> 01:00:18,900
I don't know if feels like, it'll probably look at me.

1207
01:00:18,900 --> 01:00:21,700
So I'm just going to say, let's go with that and I'm running out of

1208
01:00:21,700 --> 01:00:22,300
time here.

1209
01:00:22,800 --> 01:00:25,300
I think I'm a little bit over already, so I'm just going to kind of

1210
01:00:25,300 --> 01:00:26,200
wrap this up quickly.

1211
01:00:26,900 --> 01:00:29,900
So yes, I think, I think I feel reasonably

1212
01:00:30,000 --> 01:00:30,600
Be okay with that.

1213
01:00:30,600 --> 01:00:33,300
And like I said, this one can actually be done without that.

1214
01:00:33,300 --> 01:00:36,600
We could just use just passed by itself and not actually have to

1215
01:00:36,600 --> 01:00:37,400
bother with anything else.

1216
01:00:37,400 --> 01:00:39,700
You just ring eyes that directly.

1217
01:00:39,700 --> 01:00:43,300
And, and again, let that kind of be its own thing.

1218
01:00:43,600 --> 01:00:46,000
And here that same same deal, right?

1219
01:00:46,000 --> 01:00:48,300
You could just eliminate a little bit of the complexity in the, if

1220
01:00:48,300 --> 01:00:53,900
Case, not a whole lot, but a little bit, right again.

1221
01:00:54,100 --> 01:00:59,100
So in this case, we've got the debug up just has a path, there's the

1222
01:00:59,100 --> 01:00:59,700
path.

1223
01:01:00,000 --> 01:01:01,900
Path is something now that you can use directly.

1224
01:01:01,900 --> 01:01:05,400
So it just has to sort of crack that out.

1225
01:01:05,500 --> 01:01:06,200
As it goes.

1226
01:01:06,300 --> 01:01:10,000
We may not need the second one here because now we're not translating

1227
01:01:10,000 --> 01:01:10,900
a variable that actually exists.

1228
01:01:10,900 --> 01:01:14,400
So we may actually be able to get away with only one level, but I'm

1229
01:01:14,400 --> 01:01:16,200
not going to deal with that right now because we're basically out of

1230
01:01:16,200 --> 01:01:17,600
time, okay?

1231
01:01:17,600 --> 01:01:19,500
So let's see here.

1232
01:01:19,500 --> 01:01:23,800
Debug if we're as our debug, if we can now say the name does not need

1233
01:01:23,800 --> 01:01:24,800
to be in there anymore.

1234
01:01:25,900 --> 01:01:26,800
Let's see here.

1235
01:01:27,300 --> 01:01:27,800
Undeclared.

1236
01:01:27,800 --> 01:01:29,600
Identifier that is true and that's fine.

1237
01:01:29,600 --> 01:01:29,800
That's what

1238
01:01:29,900 --> 01:01:32,700
We want but let's just go ahead and fix these up.

1239
01:01:33,000 --> 01:01:35,200
So that's renderer camera, use debug.

1240
01:01:35,200 --> 01:01:37,000
This is renderer.

1241
01:01:39,000 --> 01:01:42,500
I camera distance, right?

1242
01:01:42,500 --> 01:01:44,100
Our debug distance, something like that.

1243
01:01:44,100 --> 01:01:46,500
Probably that's all fine.

1244
01:01:46,800 --> 01:01:49,200
We then have debug camera distance.

1245
01:01:49,200 --> 01:01:51,300
That's it's just going to be debug distance there.

1246
01:01:51,900 --> 01:01:56,600
Okay, so this is if renderer camera, we didn't really name this.

1247
01:01:56,600 --> 01:02:00,200
It should have been room based camera, right?

1248
01:02:01,700 --> 01:02:02,600
Something like that.

1249
01:02:03,200 --> 01:02:06,600
I think that's what that was supposed to be so relieved, that their

1250
01:02:07,100 --> 01:02:11,300
Global constants, we've got ground chunks checkerboards so that's

1251
01:02:11,300 --> 01:02:13,500
pretty straightforward as well.

1252
01:02:14,200 --> 01:02:15,700
What else we got here?

1253
01:02:15,800 --> 01:02:22,100
Doot-doot doot-doot, doot-doot doot-doot, that's the Price Is Right

1254
01:02:22,100 --> 01:02:22,800
theme song.

1255
01:02:30,600 --> 01:02:31,400
I don't really remember.

1256
01:02:31,700 --> 01:02:33,000
It's something like that.

1257
01:02:33,200 --> 01:02:34,800
I'm just gonna go ahead and say it's something.

1258
01:02:36,000 --> 01:02:36,800
Like that.

1259
01:02:39,700 --> 01:02:40,800
So we're almost there.

1260
01:02:43,600 --> 01:02:44,300
There we go.

1261
01:02:46,900 --> 01:02:47,800
See here.

1262
01:02:55,800 --> 01:02:57,800
Probably could do this Faster by using grep.

1263
01:03:00,000 --> 01:03:00,300
Go.

1264
01:03:04,000 --> 01:03:07,100
And again, like I said, all of this is just because you're so limited

1265
01:03:07,200 --> 01:03:09,300
when you program in C++ due to the.

1266
01:03:09,900 --> 01:03:12,300
Again the fact that they just don't know anything about

1267
01:03:12,300 --> 01:03:12,800
metaprogramming.

1268
01:03:12,800 --> 01:03:16,300
So they miss all of the opportunities to save a lot of time and energy

1269
01:03:17,100 --> 01:03:20,500
because the people who design languages, don't think that way, and so,

1270
01:03:20,500 --> 01:03:21,500
they just don't know, right?

1271
01:03:21,500 --> 01:03:22,900
It's just like a fundamental.

1272
01:03:23,700 --> 01:03:26,800
We don't really know how to do this kind of programming, so we never

1273
01:03:26,800 --> 01:03:31,100
think to enable it or something like that C'est, La Vie anyway.

1274
01:03:31,100 --> 01:03:33,700
So if in here I go in and actually Define these

1275
01:03:33,900 --> 01:03:37,200
We're sort of at least get back to sort of parody with where we were

1276
01:03:37,500 --> 01:03:41,000
and then tomorrow we can make those all actually generate stuff in the

1277
01:03:41,000 --> 01:03:43,300
debug thing and it'll all be good, right?

1278
01:03:43,600 --> 01:03:45,500
So this is what we would generate right?

1279
01:03:45,500 --> 01:03:49,100
When we go to read our config file, we just write these out and they

1280
01:03:49,100 --> 01:03:53,600
wouldn't actually be used except in the case where we actually compile

1281
01:03:53,700 --> 01:03:56,600
the whole debug system out and that way we know that it will

1282
01:03:56,600 --> 01:04:02,500
completely clean out the code and there will be no actual cost to us

1283
01:04:02,700 --> 01:04:03,500
for turning the debug

1284
01:04:03,800 --> 01:04:06,400
Come off because they'll all be essentially.

1285
01:04:08,300 --> 01:04:11,700
They'll just be constant that the compiler can literally trivially

1286
01:04:11,700 --> 01:04:12,700
optimize out.

1287
01:04:12,800 --> 01:04:14,700
It doesn't need to do anything at all.

1288
01:04:14,700 --> 01:04:15,800
It can literally just go up.

1289
01:04:15,800 --> 01:04:16,900
That's a constant zero.

1290
01:04:17,200 --> 01:04:21,200
No need to do anything with it whatsoever, right?

1291
01:04:22,000 --> 01:04:22,400
Okay.

1292
01:04:22,500 --> 01:04:26,400
So let's see here, I'm almost done with these guys and then we can do

1293
01:04:26,400 --> 01:04:27,400
some Q&A.

1294
01:04:28,500 --> 01:04:31,800
Let's go ahead and just want to finish this up.

1295
01:04:31,800 --> 01:04:33,500
So we all compiled properly.

1296
01:04:34,200 --> 01:04:35,200
Let's see here.

1297
01:04:35,200 --> 01:04:37,000
Particles test.

1298
01:04:38,800 --> 01:04:42,700
Particles show grid and use space.

1299
01:04:42,700 --> 01:04:48,100
Outlines that we go, right?

1300
01:04:49,300 --> 01:04:53,700
So that should all be good, debug distance, Undeclared, identifier

1301
01:04:54,000 --> 01:04:55,700
camera, debug distance.

1302
01:04:55,700 --> 01:04:58,200
What render camera?

1303
01:04:58,200 --> 01:04:58,800
Yep.

1304
01:04:59,200 --> 01:04:59,900
That's tight though.

1305
01:05:03,900 --> 01:05:06,500
And so then we're all back to render it, you know, we're back to

1306
01:05:06,800 --> 01:05:08,300
working everything properly.

1307
01:05:08,600 --> 01:05:11,900
And so that sets us up tomorrow that will system is sort of been

1308
01:05:11,900 --> 01:05:15,300
exercised and sets us up to just put it through the standard debug

1309
01:05:15,300 --> 01:05:16,600
event path, right?

1310
01:05:16,700 --> 01:05:19,600
So tomorrow, we'll be able to kind of unify those two systems, which

1311
01:05:19,600 --> 01:05:23,300
collapses yet another level of complexity down, which is great.

1312
01:05:23,800 --> 01:05:26,200
So again, I really happy with the way this is turning out.

1313
01:05:26,200 --> 01:05:28,900
I think we're getting there, but it's time to stop.

1314
01:05:29,400 --> 01:05:30,000
So

1315
01:05:31,900 --> 01:05:34,400
I will go ahead and go to the Q&A.

1316
01:05:34,400 --> 01:05:39,000
If you have any questions about what we did today, please feel free to

1317
01:05:39,000 --> 01:05:45,900
go ahead and and I've just looking here, that's pretty great.

1318
01:05:46,500 --> 01:05:50,000
I didn't know that you could get the hmh bot to like, say something

1319
01:05:50,000 --> 01:05:51,700
flame Beatty, that's pretty great.

1320
01:05:53,200 --> 01:05:54,300
That is pretty awesome.

1321
01:05:56,300 --> 01:05:57,700
Let's see.

1322
01:05:58,200 --> 01:05:59,800
PSI 9 says why

1323
01:06:00,000 --> 01:06:03,400
Get key State instead of wmq down, WM key up.

1324
01:06:04,400 --> 01:06:06,700
So, the answer is because they are modifier keys.

1325
01:06:07,000 --> 01:06:11,700
So, WM key up wmq down is for letting is if you're trying, if it's a

1326
01:06:11,700 --> 01:06:15,800
fundamental thing that you're trying to do is detect when key is go up

1327
01:06:15,800 --> 01:06:20,200
and down, then WM key up and key down are nice because they let you

1328
01:06:20,200 --> 01:06:23,600
just get directly to the Keys as they change right there.

1329
01:06:23,600 --> 01:06:25,800
Like okay, you know.

1330
01:06:25,800 --> 01:06:29,400
I got a notification that this key change and so that was good and

1331
01:06:29,400 --> 01:06:29,800
it's all good.

1332
01:06:30,000 --> 01:06:30,100
Good.

1333
01:06:30,300 --> 01:06:30,900
Right.

1334
01:06:32,400 --> 01:06:35,800
But in this case, we don't actually care about that, right?

1335
01:06:35,900 --> 01:06:41,200
In this case, we don't care at all about knowing when the shift key

1336
01:06:41,200 --> 01:06:44,100
went up or down knowing when the control key went up or down, or

1337
01:06:44,100 --> 01:06:45,900
knowing when the ALT key went up or down.

1338
01:06:46,200 --> 01:06:48,500
All we actually care about is every frame.

1339
01:06:48,500 --> 01:06:51,500
When we send the mouse info down, we just want to know whether the

1340
01:06:51,500 --> 01:06:54,800
Ctrl alt or shift keys were up or down at that incident time.

1341
01:06:55,000 --> 01:06:57,800
And that's exactly what get key state is designed to do, is just

1342
01:06:57,800 --> 01:06:59,800
designed to tell us that right now.

1343
01:06:59,800 --> 01:07:01,800
There's two kinds, one is called get key state.

1344
01:07:01,900 --> 01:07:06,000
It's called get a sync, Key State and if you look at the way they're

1345
01:07:06,000 --> 01:07:07,800
defined get a sync.

1346
01:07:07,800 --> 01:07:11,900
Key State tells you the state as Windows knows it at the time of the

1347
01:07:11,900 --> 01:07:17,100
call, whereas get key State, not get a secure State tells you what

1348
01:07:17,100 --> 01:07:19,800
your program thinks it was.

1349
01:07:20,100 --> 01:07:24,100
If all you had been doing was looking at the key up key down messages.

1350
01:07:24,700 --> 01:07:29,300
So actually there's really no difference between you tracking key up,

1351
01:07:29,300 --> 01:07:31,500
key down yourself for shift Ctrl and ALT

1352
01:07:32,300 --> 01:07:34,800
Since you're not doing anything when they're pushed, they're not a

1353
01:07:34,800 --> 01:07:35,600
trigger key.

1354
01:07:35,900 --> 01:07:38,800
There's no difference between that and you just, like, manually

1355
01:07:38,800 --> 01:07:42,000
tracking the pool yourself and just calling it Key State.

1356
01:07:42,000 --> 01:07:44,600
So for our purposes, get key state is basically perfect.

1357
01:07:44,600 --> 01:07:47,200
That's exactly what we want to do, right?

1358
01:07:49,400 --> 01:07:50,000
So, there you go.

1359
01:07:51,300 --> 01:07:51,700
K.

1360
01:07:51,700 --> 01:07:54,400
I don't have much experience in it but you mentioned the rtt.

1361
01:07:54,400 --> 01:07:56,300
I in C++ is not as good.

1362
01:07:56,300 --> 01:07:57,700
Could you explain a bit why?

1363
01:07:57,900 --> 01:07:58,200
Yes.

1364
01:07:58,200 --> 01:07:59,200
There's a lot of reasons.

1365
01:07:59,200 --> 01:08:01,300
The rtt, I and C++ is not as good.

1366
01:08:01,500 --> 01:08:06,100
One reason is, there's no way to like macro between the rtt I and the

1367
01:08:06,100 --> 01:08:07,500
actual type itself.

1368
01:08:07,600 --> 01:08:10,600
So it you know, you can't like have you couldn't

1369
01:08:13,200 --> 01:08:17,600
I'll put this way it all stems from the concept that the are TTI is

1370
01:08:17,600 --> 01:08:21,800
opaque data that you are have no way of actually using or accessing.

1371
01:08:22,500 --> 01:08:27,600
So for example, if you wanted to write two programs one on clang and

1372
01:08:27,600 --> 01:08:33,500
like one on em SVC and you wanted them to like, save out the runtime

1373
01:08:33,500 --> 01:08:36,600
type information in a way that the other one could read.

1374
01:08:37,600 --> 01:08:42,399
I don't know if they ever fix this, probably not, but at least our TTI

1375
01:08:42,399 --> 01:08:42,800
as it

1376
01:08:43,000 --> 01:08:48,800
Defined was completely compiler in the Pacific so you have absolutely

1377
01:08:48,800 --> 01:08:54,600
actually no way of really getting a actual value can use to identify

1378
01:08:54,600 --> 01:08:58,600
this type in a way that your program can understand it's strictly like

1379
01:08:58,600 --> 01:08:59,899
specific to that particular.

1380
01:09:00,000 --> 01:09:04,100
Compilation on that particular compiler of that particular program.

1381
01:09:04,200 --> 01:09:09,000
Furthermore, even separate compiles of the same program are not

1382
01:09:09,000 --> 01:09:10,300
guaranteed to produce the same.

1383
01:09:10,300 --> 01:09:11,700
Rtt, I right?

1384
01:09:11,800 --> 01:09:13,600
So, like, it could just be, like, one way.

1385
01:09:13,600 --> 01:09:14,100
It could Implement.

1386
01:09:14,100 --> 01:09:17,600
Rtt is the pointer to your vtable could be the thing that says what

1387
01:09:17,600 --> 01:09:18,899
this type is right.

1388
01:09:19,300 --> 01:09:23,300
And so that's just not usable as a basic system for doing

1389
01:09:23,300 --> 01:09:25,300
metaprogramming on types because you want it.

1390
01:09:25,300 --> 01:09:27,100
One of the first things you're going to do with your types is like

1391
01:09:27,100 --> 01:09:28,700
people save them to disk, right?

1392
01:09:28,700 --> 01:09:29,800
And restore them or something.

1393
01:09:30,000 --> 01:09:31,399
NG across runs of your program.

1394
01:09:34,000 --> 01:09:36,399
And that's just not possible with the way they expect the rtt.

1395
01:09:36,399 --> 01:09:42,100
I now whether they fix that, and like C++ 2032 or whatever, I'm not

1396
01:09:42,100 --> 01:09:42,600
sure.

1397
01:09:43,600 --> 01:09:46,800
But at least up until like, you know, the turn of the Millennium,

1398
01:09:46,800 --> 01:09:47,300
right?

1399
01:09:47,700 --> 01:09:50,500
Or even the turn of this decade, it was not the case.

1400
01:09:50,800 --> 01:09:51,600
It just didn't work.

1401
01:09:54,700 --> 01:09:55,300
Culver fly.

1402
01:09:55,300 --> 01:09:57,200
I don't quite get what you need to Nest.

1403
01:09:57,300 --> 01:09:58,900
The do the Mac OS or debug s.

1404
01:09:58,900 --> 01:09:59,600
Can you explain it?

1405
01:09:59,700 --> 01:10:00,000
Yeah.

1406
01:10:00,000 --> 01:10:04,700
It's just because the paste operator, pastes the actual macro,

1407
01:10:04,700 --> 01:10:05,900
parameter directly,

1408
01:10:07,700 --> 01:10:13,400
So let me, let me see if I can and maybe make this a little more

1409
01:10:13,400 --> 01:10:18,000
clear, what would be the easiest way to do this?

1410
01:10:18,800 --> 01:10:19,900
Let's see.

1411
01:10:19,900 --> 01:10:31,300
So let's suppose we were to grab something the thing with the stuff.

1412
01:10:31,300 --> 01:10:34,900
Alright, so here is a way I could show you pretty cleanly what it is.

1413
01:10:36,800 --> 01:10:42,400
let's suppose we're in handmade dot CPP and we go through here and we

1414
01:10:42,400 --> 01:10:43,100
create

1415
01:10:45,300 --> 01:10:46,200
Some macros.

1416
01:10:47,000 --> 01:10:52,200
So I'm going to do like a macro called one time and here is the

1417
01:10:52,200 --> 01:10:53,700
parameter, right?

1418
01:10:53,900 --> 01:10:57,800
And I'm going to say that it is going to be equal to whatever the

1419
01:10:57,800 --> 01:10:59,100
parameter is, right?

1420
01:10:59,500 --> 01:11:02,500
So now I say, okay, I've got a care star.

1421
01:11:02,800 --> 01:11:07,700
One time, result equals one time poop, right?

1422
01:11:08,400 --> 01:11:13,000
I'm then going to make a thing called to time, right?

1423
01:11:22,600 --> 01:11:26,500
That basically does what we're sort of saying, but with a call

1424
01:11:26,500 --> 01:11:28,200
through, right?

1425
01:11:28,200 --> 01:11:29,500
So it doesn't call through there.

1426
01:11:30,300 --> 01:11:32,100
And then I'm going to make one called three time.

1427
01:11:42,900 --> 01:11:43,400
Hard.

1428
01:11:44,200 --> 01:11:48,900
I need to, I finally, on my emacs config at work, turned off insert as

1429
01:11:48,900 --> 01:11:50,700
a key and it was pretty great.

1430
01:11:50,800 --> 01:11:51,900
I will tell you that.

1431
01:11:52,700 --> 01:11:53,600
So anyway, okay.

1432
01:11:53,600 --> 01:11:54,800
So three time.

1433
01:11:56,200 --> 01:11:57,200
Three-time.

1434
01:11:58,500 --> 01:11:59,800
There we go, right?

1435
01:12:02,100 --> 01:12:04,000
And so, let's see what these actually do.

1436
01:12:10,300 --> 01:12:12,100
Each of them produces a string, right?

1437
01:12:12,100 --> 01:12:14,400
That's the string I using an operator, so it takes whatever the

1438
01:12:14,400 --> 01:12:15,600
parameter is that you pass.

1439
01:12:15,600 --> 01:12:17,400
In each case, we pass the same thing which is Foo.

1440
01:12:17,700 --> 01:12:19,200
The first one turns it into a string.

1441
01:12:19,400 --> 01:12:22,400
The second one calls a macro, which turns it into a string, the third

1442
01:12:22,400 --> 01:12:25,100
one calls a macro, which caused a macro, it's called student turns in

1443
01:12:25,100 --> 01:12:25,300
string.

1444
01:12:25,300 --> 01:12:28,800
And so let's just see what those three things actually turn out to be

1445
01:12:28,800 --> 01:12:32,300
equal to when we run this, right?

1446
01:12:32,600 --> 01:12:35,400
So, I'm going to set a breakpoint in game update and render their game

1447
01:12:35,400 --> 01:12:36,700
update and render.

1448
01:12:37,400 --> 01:12:39,900
Here we come through when we step through

1449
01:12:40,100 --> 01:12:41,600
Us, right?

1450
01:12:42,200 --> 01:12:44,000
We get one.

1451
01:12:45,200 --> 01:12:50,600
Time result oops one time result to time results.

1452
01:12:51,600 --> 01:12:53,800
Three-time result, right?

1453
01:12:55,200 --> 01:12:58,900
Okay, so as you can see in here, right?

1454
01:12:59,000 --> 01:13:02,200
No matter which one we did, they each give us the exact same

1455
01:13:02,200 --> 01:13:02,900
parameter, right?

1456
01:13:02,900 --> 01:13:05,400
It's all, it's all totally fine, right?

1457
01:13:05,900 --> 01:13:08,800
So no harm, no file, everyone's happy.

1458
01:13:09,800 --> 01:13:13,200
If we need to do something where we just take in a parameter and

1459
01:13:13,200 --> 01:13:15,500
string eyes, it it doesn't matter, right?

1460
01:13:15,800 --> 01:13:20,200
But now what happens if what we wanted to do, for example, was string.

1461
01:13:20,200 --> 01:13:24,100
Eyes say the file, like wreck whatever the we wanted to turn, like,

1462
01:13:24,100 --> 01:13:24,800
say or the

1463
01:13:25,000 --> 01:13:26,700
Number into a string, right?

1464
01:13:27,500 --> 01:13:31,200
So instead of doing pound per am here, right?

1465
01:13:31,300 --> 01:13:33,900
What we actually want to do is this, right?

1466
01:13:33,900 --> 01:13:35,500
So I want to turn that into it now.

1467
01:13:35,500 --> 01:13:37,500
If you see what happens when I compile here,

1468
01:13:39,000 --> 01:13:42,100
well, there's there's okay, so that's the first thing I guess I should

1469
01:13:42,100 --> 01:13:44,000
mention and I forget about this all the time.

1470
01:13:44,800 --> 01:13:48,000
So the first thing is you can't actually do that, right?

1471
01:13:48,300 --> 01:13:50,800
This, this pound operator here.

1472
01:13:51,000 --> 01:13:52,400
It's just a flat-out error.

1473
01:13:52,400 --> 01:13:55,900
If you use something, that's actually a macro thing in and of itself,

1474
01:13:56,400 --> 01:13:57,100
right?

1475
01:13:57,300 --> 01:14:03,000
So one reason to do just the two-time version is, if I needed to pass

1476
01:14:03,000 --> 01:14:05,200
in the file, right?

1477
01:14:05,300 --> 01:14:08,400
So if I needed to pass in the file, you can see that.

1478
01:14:08,600 --> 01:14:11,700
That would be actually required of me, right?

1479
01:14:11,700 --> 01:14:15,200
That's something that I'd actually have to do directly.

1480
01:14:17,100 --> 01:14:22,100
But now that I've got those two, you can see that in this case, there

1481
01:14:22,100 --> 01:14:28,300
there was going to say, oh I guess this even, this is even earlier

1482
01:14:28,300 --> 01:14:29,000
than I thought it was gonna be.

1483
01:14:29,000 --> 01:14:31,400
I didn't think we were going to quite need it yet but actually you can

1484
01:14:31,400 --> 01:14:32,400
already see it happening.

1485
01:14:32,700 --> 01:14:36,400
Okay, so if you look at what happened here, right?

1486
01:14:36,500 --> 01:14:37,800
This was actually surprised me.

1487
01:14:37,800 --> 01:14:39,600
I never remember exactly again.

1488
01:14:39,600 --> 01:14:42,000
That's why I say, it's always kind of an epic night near the C++

1489
01:14:42,000 --> 01:14:42,800
preprocessor stuff.

1490
01:14:42,800 --> 01:14:44,900
But so, what happened here?

1491
01:14:44,900 --> 01:14:46,600
Right is the thing that I was trying to avoid

1492
01:14:46,800 --> 01:14:48,000
Calling twice in the other ones.

1493
01:14:49,200 --> 01:14:51,300
Because we passed this in as a parameter.

1494
01:14:51,600 --> 01:14:55,900
The first attempt in the two-time version, tostring eyes.

1495
01:14:55,900 --> 01:14:58,400
It, it takes the actual thing.

1496
01:14:58,400 --> 01:14:59,800
You passed in and string.

1497
01:15:00,000 --> 01:15:01,500
Is that right?

1498
01:15:01,600 --> 01:15:06,800
So it's basically replacing / am with file, the word and string, izing

1499
01:15:06,800 --> 01:15:07,300
that.

1500
01:15:07,700 --> 01:15:11,000
So instead of getting a string version of the file, right?

1501
01:15:11,000 --> 01:15:12,800
And I guess saying the files already a string.

1502
01:15:12,800 --> 01:15:17,000
So what I should have done here as I should have done this, to make it

1503
01:15:17,000 --> 01:15:17,400
clearer.

1504
01:15:18,700 --> 01:15:19,000
Right.

1505
01:15:19,000 --> 01:15:20,300
I'm looking for a string.

1506
01:15:20,400 --> 01:15:21,700
That is the line number.

1507
01:15:22,800 --> 01:15:24,800
That's what I actually want, right?

1508
01:15:25,500 --> 01:15:28,100
And so, as you can see, like, the first time three, when you only call

1509
01:15:28,100 --> 01:15:32,600
through one parameter, you actually just all you get, is the line

1510
01:15:33,300 --> 01:15:38,500
directive turned into a string, whereas if you call through twice the

1511
01:15:38,500 --> 01:15:40,600
first time, it replaces, Paramus line.

1512
01:15:40,600 --> 01:15:43,900
The second time, it replaces line with the number and then String Line

1513
01:15:43,900 --> 01:15:45,000
certain guys is it, right?

1514
01:15:45,000 --> 01:15:48,800
So you get that sort of cascading down and so for every layer of

1515
01:15:48,800 --> 01:15:52,000
peeling that you need to do for a parameter, you have to do that.

1516
01:15:52,900 --> 01:15:54,800
I don't ever remember exactly how it works.

1517
01:15:54,800 --> 01:15:56,100
I should probably just go read.

1518
01:15:56,100 --> 01:16:00,700
Exactly the C++ Preposterous because probably like oh every expansion

1519
01:16:00,700 --> 01:16:02,700
it rewrites each lot.

1520
01:16:02,700 --> 01:16:05,400
You know, token one time and so blah blah right?

1521
01:16:05,400 --> 01:16:07,700
There's probably a really easy way to remember it.

1522
01:16:07,900 --> 01:16:10,400
If you actually go and learn, I never bothered to do so.

1523
01:16:10,700 --> 01:16:13,600
But that's the problem that you face, right?

1524
01:16:14,600 --> 01:16:18,800
And so sometimes you have to call it twice sometimes you don't and

1525
01:16:19,700 --> 01:16:22,300
like I said I don't know that we actually need all three that we had

1526
01:16:22,300 --> 01:16:22,400
in.

1527
01:16:22,400 --> 01:16:24,500
That's why I saying my type that you could probably get away with too.

1528
01:16:26,900 --> 01:16:30,100
For all the stuff we just did because we never had to pass anything

1529
01:16:30,100 --> 01:16:32,200
like the file directive or anything into there.

1530
01:16:38,700 --> 01:16:41,100
You mind going over your debug you, I plan for those who don't know

1531
01:16:41,100 --> 01:16:43,400
what the current plan is, I just want food.

1532
01:16:43,400 --> 01:16:47,200
I don't have a plan, I'm just making a debug system and seeing what

1533
01:16:47,200 --> 01:16:50,600
the stuff is that I actually want to to know if that makes sense.

1534
01:16:51,500 --> 01:16:52,100
So like

1535
01:16:54,600 --> 01:16:56,300
I know I want to be able to slay debug data.

1536
01:16:56,300 --> 01:16:59,300
I know, I want to be able to splay profiling data.

1537
01:16:59,300 --> 01:17:00,500
We now have both of those.

1538
01:17:01,200 --> 01:17:04,900
And so I'm just trying to unify them as cleanly as possible and then

1539
01:17:04,900 --> 01:17:09,500
make it so that on top of that, the interface is good enough that it's

1540
01:17:09,500 --> 01:17:11,800
like fast and fluid to get at the data we need.

1541
01:17:11,900 --> 01:17:13,000
So we're pretty close.

1542
01:17:13,400 --> 01:17:14,300
It's just the UI.

1543
01:17:14,300 --> 01:17:16,700
Now at this point is not as good as it needs to be.

1544
01:17:16,900 --> 01:17:20,700
So we just need to go refine that debug system to the point where it's

1545
01:17:21,000 --> 01:17:22,800
nice and fluid to kind of get around it.

1546
01:17:22,900 --> 01:17:23,600
And then I think we're

1547
01:17:23,700 --> 01:17:24,000
It.

1548
01:17:24,700 --> 01:17:26,000
But I don't have a plan for that.

1549
01:17:26,000 --> 01:17:30,100
I'm just writing the code as I as I kind of figure it out as I go.

1550
01:17:32,000 --> 01:17:35,200
Golden, wh isn't metaprogramming a security hole?

1551
01:17:36,300 --> 01:17:37,900
I don't even know what that means.

1552
01:17:40,700 --> 01:17:41,100
K.

1553
01:17:41,100 --> 01:17:43,900
I've been reading about the cost of virtual functions.

1554
01:17:44,100 --> 01:17:47,300
Normal non-virtual function is cost a call command, but with virtual,

1555
01:17:47,300 --> 01:17:48,600
we need to fetches and a call.

1556
01:17:48,600 --> 01:17:51,300
Is that very costly and performance critical areas?

1557
01:17:51,600 --> 01:17:54,100
Is that the reason to avoid virtuals for me, I don't like the fact

1558
01:17:54,100 --> 01:17:56,700
they introduced hidden costs makes it harder to reading about reason

1559
01:17:56,700 --> 01:17:57,400
about your code.

1560
01:17:59,400 --> 01:17:59,900
The reason is

1561
01:18:00,000 --> 01:18:03,300
Is virtuals is because I find switch statements to be more usable.

1562
01:18:04,600 --> 01:18:08,700
So it doesn't have that much to do with the cost of a virtual call,

1563
01:18:09,400 --> 01:18:10,500
but yes, it is true.

1564
01:18:10,500 --> 01:18:12,700
That virtual calls are much harder to optimize.

1565
01:18:15,300 --> 01:18:18,200
You know, if you, if you're in the position where you're using a

1566
01:18:18,200 --> 01:18:19,700
switch statement to determine things.

1567
01:18:21,100 --> 01:18:24,600
And you find that your code is going to slowly.

1568
01:18:26,100 --> 01:18:30,200
It's usually not that hard to make that into some kind of a more smart

1569
01:18:30,200 --> 01:18:30,900
dispatch.

1570
01:18:31,900 --> 01:18:34,700
And oftentimes the switch isn't expensive because it doesn't have to

1571
01:18:34,700 --> 01:18:36,400
fetch anything, right?

1572
01:18:36,500 --> 01:18:37,500
It's just the one fetch.

1573
01:18:37,500 --> 01:18:39,200
It doesn't have to go fetch and fetch.

1574
01:18:39,400 --> 01:18:40,600
It just does one Fetch.

1575
01:18:40,800 --> 01:18:44,000
And then at the jump can be discarded like the compiler can often

1576
01:18:44,000 --> 01:18:45,400
optimize the jump and so on.

1577
01:18:46,000 --> 01:18:47,700
So switch statements are usually a little bit easier.

1578
01:18:47,700 --> 01:18:51,400
So it's true that, you know, probably you get some wins with them but

1579
01:18:51,400 --> 01:18:55,700
that's not actually why do them because, you know, I just don't tend

1580
01:18:55,700 --> 01:18:55,700
to

1581
01:18:55,900 --> 01:18:59,600
Virtual functions as I don't like spreading out the code for a single

1582
01:18:59,600 --> 01:19:01,500
idea across many files like that.

1583
01:19:01,500 --> 01:19:03,400
It, I just don't find it to be that useful.

1584
01:19:04,800 --> 01:19:07,500
So I don't like virtual functions as an architectural thing.

1585
01:19:07,900 --> 01:19:10,700
It has nothing to do with the speed, but it is true that the speed can

1586
01:19:10,700 --> 01:19:11,400
be a problem.

1587
01:19:11,600 --> 01:19:14,900
I have never actually had that specific experience myself.

1588
01:19:14,900 --> 01:19:17,400
I've had people say that like virtual functions were really

1589
01:19:17,400 --> 01:19:22,300
problematic on consoles for them, especially like, older consoles,

1590
01:19:22,300 --> 01:19:24,800
like Xbox 360 or Playstation 3.

1591
01:19:25,900 --> 01:19:29,200
I've heard nightmares about that, I don't have the personal experience

1592
01:19:29,200 --> 01:19:32,100
to know how true they were how relevant that was or if it was for

1593
01:19:32,100 --> 01:19:34,200
other reasons and you know, I don't know.

1594
01:19:34,500 --> 01:19:39,700
So I don't, I don't pretend to to say that I have had like lots of

1595
01:19:39,700 --> 01:19:42,800
experiences optimizing code that had virtual functions in it and it

1596
01:19:42,800 --> 01:19:43,700
caused me a lot of problems.

1597
01:19:43,700 --> 01:19:44,300
That's not true.

1598
01:19:44,300 --> 01:19:45,600
I don't tend to write code that way.

1599
01:19:45,600 --> 01:19:47,300
I've not had that experience, I don't know.

1600
01:19:48,600 --> 01:19:51,800
So I think that's probably something that's better for someone else to

1601
01:19:51,800 --> 01:19:52,200
answer.

1602
01:19:52,200 --> 01:19:55,500
Probably someone who's done a supposed big steals project on a

1603
01:19:55,700 --> 01:19:59,000
Consul how much of a problem that is these days would be interesting

1604
01:19:59,000 --> 01:19:59,800
question for them.

1605
01:20:01,400 --> 01:20:04,000
And and obviously to hear the answer, I just don't use them.

1606
01:20:04,000 --> 01:20:04,800
So I don't care.

1607
01:20:05,400 --> 01:20:09,300
But it's definitely, it's definitely different than if statements.

1608
01:20:09,300 --> 01:20:12,000
You know, it's definitely it has a different performance profile

1609
01:20:12,000 --> 01:20:14,700
potentially relevant.

1610
01:20:14,700 --> 01:20:17,700
I can't figure out for the life of me, a way to draw an empty non

1611
01:20:17,700 --> 01:20:21,300
filled rectangle via the win32 API.

1612
01:20:22,700 --> 01:20:25,500
And empty non filled rectangle.

1613
01:20:25,500 --> 01:20:29,200
Oh you mean like you want to stroke the outline of a rectangle?

1614
01:20:31,800 --> 01:20:33,100
It's real, it's real easy.

1615
01:20:33,900 --> 01:20:38,700
If you do want to do that, filling a rectangle and win32 you just

1616
01:20:38,700 --> 01:20:41,700
don't draw a rectangle, use move to in line 2.

1617
01:20:44,200 --> 01:20:48,400
so like, for example, when we put, when we do our stretch lit here,

1618
01:20:49,500 --> 01:20:50,000
Right?

1619
01:20:50,100 --> 01:20:51,900
If you wanted to, you could pretty easily.

1620
01:20:51,900 --> 01:20:55,000
Do move to line two.

1621
01:20:56,300 --> 01:20:58,400
And if you look at how this works,

1622
01:21:00,100 --> 01:21:03,600
See, move 2X.

1623
01:21:05,700 --> 01:21:10,700
You can kind of see how this goes so you can see this here.

1624
01:21:10,800 --> 01:21:12,100
You basically pass whatever.

1625
01:21:12,100 --> 01:21:16,000
The DC is to try to draw two, which in our case, is this one, you pass

1626
01:21:16,000 --> 01:21:17,000
the two coordinates.

1627
01:21:17,000 --> 01:21:21,000
So, like, you know, 1010 or something like that, you can then just do

1628
01:21:21,000 --> 01:21:24,500
lines to each of the things that you wanted to do, right?

1629
01:21:24,900 --> 01:21:31,000
So typical rectangle going to look something like that, right?

1630
01:21:31,500 --> 01:21:31,900
Oops?

1631
01:21:32,400 --> 01:21:33,100
Leave those there.

1632
01:21:35,100 --> 01:21:39,100
And so that's, you know, how you would typically draw a rectangle, you

1633
01:21:39,100 --> 01:21:40,000
can see it right there.

1634
01:21:40,300 --> 01:21:40,800
There it is.

1635
01:21:41,300 --> 01:21:44,100
And that's going to, I believe draw in the current foreground color.

1636
01:21:44,100 --> 01:21:47,400
So you know if you if you need to change the color of thing, it's

1637
01:21:47,500 --> 01:21:48,800
pretty straightforward to do.

1638
01:21:49,400 --> 01:21:52,400
That's just going to be probably something you can.

1639
01:21:52,400 --> 01:21:55,600
You can look at in here that would tell you all about, it's going to

1640
01:21:55,600 --> 01:21:58,700
probably stroke it with the current pain, right?

1641
01:21:59,400 --> 01:22:02,700
And you can probably set the current pain cheaply.

1642
01:22:02,700 --> 01:22:04,400
They added some trivial functional.

1643
01:22:04,600 --> 01:22:11,800
Sure, that it's like set solid pin or something like this.

1644
01:22:12,400 --> 01:22:19,900
I don't quite remember set solid pens and pretty to wear.

1645
01:22:19,900 --> 01:22:26,300
As it's not, it's like get solid pain, get solid pain once we do.

1646
01:22:26,300 --> 01:22:28,600
I, it's been so long since I've done any of this stuff.

1647
01:22:29,300 --> 01:22:30,400
I don't really remember.

1648
01:22:30,400 --> 01:22:34,100
But you, you could do all these things.

1649
01:22:34,800 --> 01:22:37,200
Solid pen color, that's what it is.

1650
01:22:41,900 --> 01:22:45,400
Salt and color this thing, right?

1651
01:22:45,700 --> 01:22:47,200
So you can call like set d.c.

1652
01:22:47,200 --> 01:22:48,000
pen color.

1653
01:22:49,000 --> 01:22:51,900
And, and that allows you to kind of like mess with it.

1654
01:22:52,200 --> 01:22:57,400
So I could say, like set DC pen color, device concept RGB, you know,

1655
01:22:57,400 --> 01:22:58,800
here's that lovely yellow.

1656
01:22:58,800 --> 01:23:03,800
I'm so fond of and I believe I'm not, don't totally remember.

1657
01:23:03,800 --> 01:23:06,700
But I believe we then have to select the stock object of the default

1658
01:23:06,700 --> 01:23:07,200
pain.

1659
01:23:07,700 --> 01:23:09,200
You see it's still black right?

1660
01:23:09,400 --> 01:23:10,500
But you can just do a

1661
01:23:10,700 --> 01:23:13,700
Like the object at the beginning, before you do anything else, you can

1662
01:23:13,700 --> 01:23:18,600
do this nonsense to set, tell the DC that the pain that you're always

1663
01:23:18,600 --> 01:23:21,200
going to use is going to be that.

1664
01:23:21,500 --> 01:23:22,700
That one that I just looked up here.

1665
01:23:22,700 --> 01:23:23,400
So, d.c.

1666
01:23:23,400 --> 01:23:24,700
pain, that guy right there.

1667
01:23:25,700 --> 01:23:28,300
So you just want to do like like that.

1668
01:23:29,500 --> 01:23:30,000
Right.

1669
01:23:31,100 --> 01:23:33,000
And I think that's that's it, right?

1670
01:23:33,000 --> 01:23:36,700
And so there's that yellow rectangle and you can you can change that

1671
01:23:36,800 --> 01:23:39,800
as frequently as you want to and do any of the other stuff in there.

1672
01:23:39,800 --> 01:23:43,300
So, you know, once you have that set up that way, you know you can

1673
01:23:43,300 --> 01:23:46,500
even do, you can just change it per line Jeannie.

1674
01:23:46,500 --> 01:23:49,500
I was actually fine, you know, for its day it was a totally fine.

1675
01:23:49,500 --> 01:23:49,700
Right.

1676
01:23:49,700 --> 01:23:51,000
You know, is it great?

1677
01:23:51,000 --> 01:23:52,900
No, but it's totally usable.

1678
01:23:52,900 --> 01:23:55,100
It's not the world's worst graphics API.

1679
01:23:56,600 --> 01:23:59,200
So you know, if you, I don't know why.

1680
01:23:59,300 --> 01:23:59,900
You would be using.

1681
01:24:00,300 --> 01:24:02,200
Because it doesn't seem like these days.

1682
01:24:02,200 --> 01:24:05,100
You know, if you could use opengl, you would but but there you go.

1683
01:24:05,100 --> 01:24:07,400
You can, you know, change the pen per line or anything, you know,

1684
01:24:07,400 --> 01:24:08,300
whatever you want to do it.

1685
01:24:08,300 --> 01:24:08,900
That's fine.

1686
01:24:09,500 --> 01:24:12,100
So that's you know if that's what you're if that's you're trying to

1687
01:24:12,100 --> 01:24:12,300
do.

1688
01:24:12,300 --> 01:24:15,300
That's real easy, that's the easiest way to do it.

1689
01:24:27,500 --> 01:24:28,000
Too freaky.

1690
01:24:28,000 --> 01:24:32,200
What are your thoughts on Twitch starting to affect game design?

1691
01:24:34,700 --> 01:24:38,400
You know, I'm not really a game designer so I don't, you know, I'm a

1692
01:24:38,400 --> 01:24:39,700
programmer and

1693
01:24:41,700 --> 01:24:44,900
and you know, so I mean I like the fact that I can stream development

1694
01:24:44,900 --> 01:24:46,600
as a way of teaching, you know,

1695
01:24:49,700 --> 01:24:53,000
And I like that aspect to Twitch, I don't know much about how it,

1696
01:24:53,000 --> 01:24:54,200
which affects game design.

1697
01:24:54,200 --> 01:24:57,100
I mean, I understand the concept that if people are now saying that

1698
01:24:57,100 --> 01:25:01,200
liked, which is a big or any video streaming service, really is a big

1699
01:25:01,700 --> 01:25:04,400
way in which games get pressed.

1700
01:25:04,500 --> 01:25:07,600
I can understand that people might start designing their games to look

1701
01:25:07,600 --> 01:25:10,200
good on Twitch or play well on Twitch to an audience or whatever.

1702
01:25:12,500 --> 01:25:15,500
You know, do I think it's a bad thing that really because anyone who's

1703
01:25:15,500 --> 01:25:19,900
going to do that probably wasn't super filled with like, Artistic

1704
01:25:19,900 --> 01:25:20,900
integrity for their game.

1705
01:25:20,900 --> 01:25:23,400
Anyway, like that's probably talking about people like Call of Duty

1706
01:25:23,400 --> 01:25:23,600
her.

1707
01:25:23,600 --> 01:25:27,300
Just like, we're designing games to be like Mass market and super PR

1708
01:25:27,300 --> 01:25:28,900
bullet, super marketable, right?

1709
01:25:28,900 --> 01:25:32,700
And they were already compromising, all sorts of things that might

1710
01:25:32,700 --> 01:25:36,700
have been, you know, interesting about their games in order to sell

1711
01:25:36,700 --> 01:25:37,400
more copies.

1712
01:25:37,800 --> 01:25:41,100
The fact that they're going to Me, Maybe compromise those to play

1713
01:25:41,100 --> 01:25:41,400
better on.

1714
01:25:41,400 --> 01:25:42,100
Twitch is

1715
01:25:42,300 --> 01:25:45,700
Not, it's just six of one half dozen of the other, right?

1716
01:25:45,700 --> 01:25:47,600
They were already marketing different games to begin with.

1717
01:25:47,900 --> 01:25:53,400
So people who are really passionate about a particular game idea and

1718
01:25:53,400 --> 01:25:55,100
really want to make that game idea.

1719
01:25:55,100 --> 01:26:00,100
I don't think those people are going to be super affected by Twitch in

1720
01:26:00,100 --> 01:26:00,900
a negative way.

1721
01:26:01,200 --> 01:26:04,000
You know, they'll just make their game and if it plays well and which

1722
01:26:04,000 --> 01:26:07,600
it doesn't, and if it doesn't doesn't now there's a long-term effect

1723
01:26:07,600 --> 01:26:10,900
that could be deleterious which is that if it turns out that your game

1724
01:26:10,900 --> 01:26:12,100
has to play well on Twitter,

1725
01:26:12,200 --> 01:26:15,900
In order to get an audience, then you end up with those people who do

1726
01:26:15,900 --> 01:26:18,900
have an artistic idea and make games that maybe don't play well on

1727
01:26:18,900 --> 01:26:22,300
Twitch, if they can't survive, if they can't make a living because now

1728
01:26:22,300 --> 01:26:24,400
they can't their game will never sell those people.

1729
01:26:24,400 --> 01:26:25,100
Go away.

1730
01:26:25,200 --> 01:26:28,900
Now, you have lost something and that's like a systemic effect, like a

1731
01:26:28,900 --> 01:26:29,500
long-term effect.

1732
01:26:29,500 --> 01:26:31,400
That's a natural selection effect.

1733
01:26:32,500 --> 01:26:36,900
That could be bad, but we don't know that that's happening yet, right?

1734
01:26:36,900 --> 01:26:40,100
And we don't know if that will happen, so it's premature to suggest

1735
01:26:40,100 --> 01:26:41,100
that that's a problem.

1736
01:26:41,100 --> 01:26:43,900
So, I would say, the first order effect doesn't concern me much.

1737
01:26:43,900 --> 01:26:47,100
It's just people who are already pandering, may be doing more

1738
01:26:47,100 --> 01:26:48,200
pandering or something.

1739
01:26:48,800 --> 01:26:51,700
So, the only problem would be if it started to cause like a natural

1740
01:26:51,700 --> 01:26:54,300
selection effect, where games that couldn't play well on Twitch

1741
01:26:54,400 --> 01:26:57,700
disappear, that would be sad, but I don't know that that's going to

1742
01:26:57,700 --> 01:26:59,800
happen, you know.

1743
01:27:00,200 --> 01:27:03,200
So far, I would say if anything twitch has been having a positive

1744
01:27:03,200 --> 01:27:07,600
effect for obscure game sometimes because more people are watching

1745
01:27:07,600 --> 01:27:10,800
games which means that more people are seeing game streamed which

1746
01:27:10,800 --> 01:27:13,500
means that there's more possibilities for them to find out about games

1747
01:27:13,500 --> 01:27:14,800
that they weren't finding out about.

1748
01:27:14,900 --> 01:27:19,300
So, so far, I would say, I don't think twitch is affecting

1749
01:27:19,700 --> 01:27:22,600
systemically games on a bad way, it may actually be having a positive

1750
01:27:22,600 --> 01:27:25,900
effect, but again, a lot of that's too early to tell since I'm not a

1751
01:27:25,900 --> 01:27:28,400
game designer, don't have a strong opinion about it, that's just my

1752
01:27:28,400 --> 01:27:29,400
knee-jerk reaction.

1753
01:27:38,100 --> 01:27:39,200
Boondoggle for you too.

1754
01:27:39,200 --> 01:27:42,000
Could you list the important features a good graphical debugger should

1755
01:27:42,000 --> 01:27:42,500
have?

1756
01:27:44,600 --> 01:27:47,300
I mean what you see me using on handmade Heroes, the bare minimum,

1757
01:27:47,500 --> 01:27:49,900
like your things should be able to do everything that I'm doing in

1758
01:27:49,900 --> 01:27:52,500
Visual Studio should have the memory display window.

1759
01:27:52,500 --> 01:27:54,700
It should have a quick updating watch window, which Visual Studio

1760
01:27:54,700 --> 01:27:55,100
doesn't have.

1761
01:27:55,100 --> 01:27:58,000
Unfortunately should be fashion videos to do Visual Studio hopefully,

1762
01:27:58,500 --> 01:28:01,600
but you have watch window that's really easy to use, saves my state

1763
01:28:01,600 --> 01:28:03,100
from run to run, right?

1764
01:28:03,100 --> 01:28:06,000
So I shouldn't have to re add my variables, whatever it should be

1765
01:28:06,000 --> 01:28:07,000
trivial to close and

1766
01:28:07,200 --> 01:28:08,800
Start the program quickly.

1767
01:28:09,000 --> 01:28:10,300
It should never crash.

1768
01:28:10,700 --> 01:28:13,600
It should never like hang up the graphic system or anything like that.

1769
01:28:13,700 --> 01:28:15,400
Linux fails on both of those counts.

1770
01:28:17,400 --> 01:28:19,800
It should always be able to inspect all my debug variables.

1771
01:28:20,300 --> 01:28:22,100
That's a big problem, with a lot of graphical front ends.

1772
01:28:22,100 --> 01:28:25,700
On Linux, is they can't inspect unions and stuff like this, even

1773
01:28:25,700 --> 01:28:29,200
though GDB can it's weird, they have these weird, like, bugs, local

1774
01:28:29,200 --> 01:28:30,400
variables, cause problems.

1775
01:28:30,900 --> 01:28:33,800
So, yeah, just just a reasonable implementation of what Visual Studio

1776
01:28:33,800 --> 01:28:36,900
does is the bare minimum and that right now we don't really have

1777
01:28:37,100 --> 01:28:39,200
Anywhere other than Visual Studio, which is kind of sad.

1778
01:28:43,500 --> 01:28:46,400
Justified are you one of those that thinks that previously DirectX was

1779
01:28:46,400 --> 01:28:48,900
better than opengl but now is the opposite.

1780
01:28:49,500 --> 01:28:52,200
I don't think I've ever thought that DirectX was better than opengl.

1781
01:28:55,900 --> 01:28:57,200
Kemosabe 76.

1782
01:28:57,200 --> 01:29:00,400
Do you know how far has metaprogramming come along another Fields?

1783
01:29:00,400 --> 01:29:03,400
I can imagine research using genetic algorithms to self enhance code.

1784
01:29:04,100 --> 01:29:07,200
I do not know anything about that know.

1785
01:29:11,400 --> 01:29:13,000
All right.

1786
01:29:14,300 --> 01:29:19,900
Okay, let's go ahead and spin things down.

1787
01:29:22,700 --> 01:29:27,300
Okay, so thank you everyone for joining me for another episode of

1788
01:29:27,300 --> 01:29:27,900
handmade hero.

1789
01:29:27,900 --> 01:29:28,900
It's been a pleasure coding with you.

1790
01:29:28,900 --> 01:29:32,600
As always, if you would like to follow along at home, you can always

1791
01:29:32,600 --> 01:29:34,600
pre-order the game on him here at Oregon.

1792
01:29:34,600 --> 01:29:35,400
It comes to the source code.

1793
01:29:35,400 --> 01:29:39,200
So if you want to play around with it, follow along at home, that is

1794
01:29:39,200 --> 01:29:41,400
the place to do that.

1795
01:29:41,600 --> 01:29:43,500
So, yeah.

1796
01:29:43,500 --> 01:29:44,800
We also have a forum site.

1797
01:29:44,800 --> 01:29:47,200
You can go to ask questions and there's an antidepressant guide up

1798
01:29:47,200 --> 01:29:47,400
there.

1799
01:29:47,400 --> 01:29:49,200
We also have a patreon page, you can pledge to.

1800
01:29:49,200 --> 01:29:52,100
If you want to support the video series, we have a tweet but you can

1801
01:29:52,100 --> 01:29:52,400
go to

1802
01:29:52,600 --> 01:29:55,700
Want to check the schedule and we have a conference now.

1803
01:29:55,700 --> 01:29:59,700
So if you want to go to handmade con dot org, you can read about that.

1804
01:30:00,000 --> 01:30:02,000
Got a pretty awesome speaker list as well.

1805
01:30:02,800 --> 01:30:04,800
It's pretty much my dream list two speakers.

1806
01:30:05,200 --> 01:30:08,500
It's basically five people who are really want to talk about

1807
01:30:08,500 --> 01:30:11,200
programming who do exactly the kind of programming that we talked

1808
01:30:11,200 --> 01:30:15,300
about on handmade hero here and so definitely check that out if you

1809
01:30:15,300 --> 01:30:15,600
want to.

1810
01:30:15,600 --> 01:30:18,600
It's more informations on the Molly rocket.com webpage there.

1811
01:30:19,500 --> 01:30:21,200
So, yeah, check that out.

1812
01:30:21,200 --> 01:30:24,300
We still have some tickets left, they are selling off pretty fast, so

1813
01:30:24,300 --> 01:30:28,000
I don't know how much longer they will be tickets left, but check it

1814
01:30:28,000 --> 01:30:28,400
out.

1815
01:30:28,500 --> 01:30:29,500
They're not very expensive.

1816
01:30:30,000 --> 01:30:31,000
And we'd love to see you there.

1817
01:30:31,500 --> 01:30:33,200
That's about it for today.

1818
01:30:34,100 --> 01:30:36,500
I will see you guys back here tomorrow at 5 p.m.

1819
01:30:36,500 --> 01:30:40,500
Pacific Daylight time until then, thanks for joining me and I'll see

1820
01:30:40,500 --> 01:30:42,000
you guys on the internet.

1821
01:30:42,100 --> 01:30:42,600
Take it easy, everyone.

