1
00:00:00,200 --> 00:00:01,100
Start recording.

2
00:00:02,900 --> 00:00:05,000
Hello, everyone, and welcome to handmade hero.

3
00:00:05,000 --> 00:00:07,500
The sure we could complete game live on stream.

4
00:00:09,000 --> 00:00:15,500
We have taken the Bold sort of voluptuous step if you will into

5
00:00:15,500 --> 00:00:18,800
Hardware rendering here on handmade hero.

6
00:00:18,800 --> 00:00:22,000
So we now can actually switch our game between our own software

7
00:00:22,000 --> 00:00:25,200
rendering path, where we render all the pixels, by our very own hands,

8
00:00:25,400 --> 00:00:28,600
which of course is slower because we, you know, aren't taking

9
00:00:28,600 --> 00:00:31,200
advantage of the giant GPU, that's in most machines.

10
00:00:31,600 --> 00:00:35,000
But we now also have a path that does take advantage of that GPU.

11
00:00:35,300 --> 00:00:38,400
Not really, to the fullest extent possible in the sense that we are

12
00:00:38,400 --> 00:00:38,700
doing.

13
00:00:39,400 --> 00:00:43,100
You know things in not necessarily most efficient way in there yet.

14
00:00:43,100 --> 00:00:47,500
But even so it is a pretty dramatic increase in the frame time.

15
00:00:47,500 --> 00:00:51,100
It's something like 20 times faster on the GPU than it is on the CPU

16
00:00:51,100 --> 00:00:51,700
at the moment.

17
00:00:51,700 --> 00:00:54,600
For example, if I remember correctly, maybe, not that much.

18
00:00:54,600 --> 00:00:55,700
At least 10 times though.

19
00:00:57,600 --> 00:00:58,800
And so we made that change.

20
00:00:58,800 --> 00:01:01,700
But yesterday we sort of talked a little bit about the fact that there

21
00:01:01,700 --> 00:01:04,400
are these extensions in opengl and some of those extensions are

22
00:01:04,400 --> 00:01:04,900
extensions.

23
00:01:04,900 --> 00:01:08,000
We actually need even if we don't write any shaders.

24
00:01:08,000 --> 00:01:12,900
Even if we use what is essentially opengl one point x, which is what

25
00:01:12,900 --> 00:01:16,000
we're calling right now to render our game, old old old.

26
00:01:16,000 --> 00:01:21,600
You like, like our open GL code right now, would run this game on

27
00:01:21,600 --> 00:01:26,300
Windows NT, 351 the very first version of Windows that's on the

28
00:01:26,600 --> 00:01:29,000
Branch that we're even talking about would run.

29
00:01:29,500 --> 00:01:32,700
That's how old opengl we are at the moment.

30
00:01:32,700 --> 00:01:37,200
So we would went on literally anything like there is not a piece of

31
00:01:37,200 --> 00:01:41,500
Graphics Hardware or software because it was software rendered in NT

32
00:01:41,500 --> 00:01:44,500
351 in history that wouldn't render our game right now.

33
00:01:44,500 --> 00:01:45,300
As far as I know,

34
00:01:47,800 --> 00:01:50,200
but even with that,

35
00:01:52,000 --> 00:01:56,500
there is one extension that we needed or I should say pair of

36
00:01:56,500 --> 00:02:02,900
extensions and that is the fact that our Sprites all of our like our

37
00:02:02,900 --> 00:02:07,600
assets are set up specifically to be in srgb color space now if you

38
00:02:07,600 --> 00:02:09,500
don't know what that is go back and watch those episodes.

39
00:02:09,500 --> 00:02:13,000
It's important understand why that makes a difference.

40
00:02:13,700 --> 00:02:19,200
But point being we needed to use the extensions to opengl to tell it

41
00:02:19,200 --> 00:02:21,500
that those were srgb Sprites other herb.

42
00:02:21,800 --> 00:02:25,600
Textures, basically, when we use those textures because without that,

43
00:02:25,900 --> 00:02:29,700
we get the wrong results for a rendering because the color values that

44
00:02:29,700 --> 00:02:32,900
opengl is using are not, don't mean what it thinks they mean and then

45
00:02:32,900 --> 00:02:33,700
we have a problem.

46
00:02:34,800 --> 00:02:36,300
So we needed at least that extension.

47
00:02:36,300 --> 00:02:38,600
Now what we did yesterday is we just kind of threw it in there and use

48
00:02:38,600 --> 00:02:42,500
the extension but we never actually tested technically whether the

49
00:02:42,500 --> 00:02:43,400
extension exists.

50
00:02:43,400 --> 00:02:46,100
Now that's probably actually fine because I don't think there actually

51
00:02:46,100 --> 00:02:49,500
is any hardware that any gamer is going to be using today.

52
00:02:49,500 --> 00:02:51,500
That doesn't have the extensions that we chose to use.

53
00:02:51,600 --> 00:02:52,000
To use.

54
00:02:52,000 --> 00:02:58,900
But in order to make our code a little bit more correct and also

55
00:03:00,000 --> 00:03:05,800
Same time to try to set us up for if we do need to legitimately query

56
00:03:05,800 --> 00:03:09,700
some experts tensions, a little bit later on where we really don't

57
00:03:09,700 --> 00:03:13,600
know whether the hardware that the person is running on will support

58
00:03:13,600 --> 00:03:14,000
them.

59
00:03:15,200 --> 00:03:18,800
We want to write a little bit more code to do that check again.

60
00:03:18,800 --> 00:03:20,100
So that's what we're going to do today.

61
00:03:20,700 --> 00:03:24,700
And then after that, I don't know, I guess it depends on whether that

62
00:03:24,700 --> 00:03:27,700
how long that actually takes us after that, I'm not sure.

63
00:03:27,700 --> 00:03:29,800
There's very much left to do with

64
00:03:30,000 --> 00:03:31,000
are opengl stuff.

65
00:03:32,200 --> 00:03:34,400
So I think we might have to wait till next week because we got to

66
00:03:34,400 --> 00:03:40,000
start our next major task, which is getting our texture downloads to

67
00:03:40,000 --> 00:03:41,400
happen in the background.

68
00:03:41,700 --> 00:03:44,500
Because one of the things that you'll notice right now since we are

69
00:03:44,800 --> 00:03:49,600
just doing a totally hacked thing to test because remember, I said, we

70
00:03:49,600 --> 00:03:52,600
were just kind of put something in place when we run.

71
00:03:53,600 --> 00:03:54,500
Our game.

72
00:03:54,600 --> 00:03:57,300
You can kind of see that every time.

73
00:03:57,300 --> 00:03:58,600
Well I don't know if you can see, it's not a stream.

74
00:03:58,600 --> 00:04:01,300
Actually don't know how the video is, but point being at least when I

75
00:04:01,300 --> 00:04:05,200
run it or if you run the game at home you can kind of see that when we

76
00:04:05,200 --> 00:04:11,100
switch to from one game to sorry we switched from one cut scene to

77
00:04:11,100 --> 00:04:11,900
another cutscene.

78
00:04:12,200 --> 00:04:16,000
If that cutscene has like a lot of layers or whatever it may be, the

79
00:04:16,000 --> 00:04:18,899
case that we get kind of like a pause in there, right?

80
00:04:18,899 --> 00:04:22,900
Where the texture download, there's a little bit of a hiccup at least

81
00:04:22,900 --> 00:04:23,100
I think.

82
00:04:23,300 --> 00:04:24,100
Was it was happening.

83
00:04:24,400 --> 00:04:26,900
I can't quite remember if we actually saw that for reals.

84
00:04:26,900 --> 00:04:28,900
We'll see you in a second here if we, if we see it.

85
00:04:30,200 --> 00:04:35,600
Let's just wait a little bit, just to ensure, let's see here.

86
00:04:37,000 --> 00:04:39,700
It probably won't be 21 that like maybe that hat seen.

87
00:04:40,100 --> 00:04:41,300
There'd be quite a few of them.

88
00:04:45,700 --> 00:04:47,500
Well it's not just not too bad right now.

89
00:04:47,500 --> 00:04:50,900
Actually those download seem to be going actually really well which is

90
00:04:50,900 --> 00:04:51,300
nice.

91
00:04:53,200 --> 00:04:54,500
Let's see about the Hat scene though.

92
00:04:55,600 --> 00:04:57,100
Cuz that scene has several layers.

93
00:05:17,200 --> 00:05:19,000
I never noticed those little Tomatoes back there.

94
00:05:19,000 --> 00:05:20,400
I like that basket of tomatoes.

95
00:05:25,000 --> 00:05:25,400
Yeah.

96
00:05:25,400 --> 00:05:26,500
Okay, so you saw it.

97
00:05:26,500 --> 00:05:27,500
Hopefully, you actually saw it.

98
00:05:27,500 --> 00:05:29,800
There you have that really distinct jump.

99
00:05:29,800 --> 00:05:33,700
And that's basically like, hey had to download just a few too many few

100
00:05:33,700 --> 00:05:37,300
too much texture weight and their that one as well.

101
00:05:37,400 --> 00:05:41,400
So somewhere around, you know, four layers or something when you get

102
00:05:41,400 --> 00:05:45,800
to that, fourth layer, that's just too much and you notice that even

103
00:05:45,800 --> 00:05:46,700
just in the cutscene.

104
00:05:46,700 --> 00:05:50,000
So let alone in the game where we might be running around, and

105
00:05:50,000 --> 00:05:52,000
something big pages in or something like this.

106
00:05:53,700 --> 00:05:57,200
So, you know, we want to figure out how we're going to deal with that

107
00:05:57,200 --> 00:05:59,400
part, in some way that makes it.

108
00:05:59,400 --> 00:05:59,800
So that

109
00:06:00,000 --> 00:06:05,800
Don't have this risk constantly that that we're going to have a frame

110
00:06:05,800 --> 00:06:09,300
hiccup because the texture download had a problem.

111
00:06:09,300 --> 00:06:14,100
Because in our regular source code, right, we don't have that problem

112
00:06:14,100 --> 00:06:17,100
because we do everything on separate threads for asset loading.

113
00:06:17,100 --> 00:06:21,800
So, there's no, the renderer never has to be in this situation where

114
00:06:21,800 --> 00:06:24,300
it gets stalled, like that, we

115
00:06:25,100 --> 00:06:27,700
Sorry, I'm kind of enjoying running around here in our weird little

116
00:06:28,200 --> 00:06:29,100
groundless level.

117
00:06:31,700 --> 00:06:32,200
Yeah.

118
00:06:34,800 --> 00:06:38,400
Yeah, sorry, I should not be bothered that.

119
00:06:38,400 --> 00:06:39,400
Let's clear this out.

120
00:06:39,400 --> 00:06:39,800
There we go.

121
00:06:40,600 --> 00:06:43,300
So anyway, that's the only gonna get worse by the way, because we're

122
00:06:43,300 --> 00:06:43,700
pretty soon.

123
00:06:43,700 --> 00:06:45,400
We're going to be working on game code, and I'm going to be sitting

124
00:06:45,400 --> 00:06:47,100
there playing the game, and I'm going to forget that, I'm supposed to

125
00:06:47,100 --> 00:06:48,800
be developing it and gonna be like, oh, it's fun.

126
00:06:48,800 --> 00:06:50,300
And then it's like, all right.

127
00:06:50,900 --> 00:06:51,900
Sorry about that.

128
00:06:52,500 --> 00:06:54,500
So I was going to say is that's really the big thing.

129
00:06:54,500 --> 00:06:56,900
We have to do it next week, so I'm guessing the today will be a pretty

130
00:06:56,900 --> 00:06:57,600
light stream.

131
00:06:57,700 --> 00:07:01,200
Maybe there's something else that I should do that, that we can think

132
00:07:01,200 --> 00:07:03,500
of, at the, in the meantime, but I don't really know.

133
00:07:03,800 --> 00:07:04,400
So I'm just going to go

134
00:07:04,600 --> 00:07:05,500
Read and write that one piece.

135
00:07:05,500 --> 00:07:08,500
And if it doesn't happen to take all stream, then we'll just we'll

136
00:07:08,500 --> 00:07:09,400
figure it out, right?

137
00:07:09,400 --> 00:07:10,400
We'll figure it out.

138
00:07:10,700 --> 00:07:12,300
We'll figure out something else to do.

139
00:07:12,300 --> 00:07:14,600
I'm sure there's plenty of to do is right, that we could do.

140
00:07:14,600 --> 00:07:17,300
Maybe there's some simple in there.

141
00:07:18,400 --> 00:07:22,300
All right, so hey Hardware acceleration is in there now and let's

142
00:07:22,300 --> 00:07:24,000
leave improvements you probably don't care about.

143
00:07:24,000 --> 00:07:25,400
So I think we're going to pretty good shape.

144
00:07:25,400 --> 00:07:30,900
Now with that, that's kind of nice, this couple things in here.

145
00:07:30,900 --> 00:07:33,600
We probably do want to think about you with like some of these things

146
00:07:33,600 --> 00:07:36,700
are probably worth taking a look at anyway.

147
00:07:37,500 --> 00:07:38,100
So,

148
00:07:40,300 --> 00:07:42,600
What I was talking about before, right?

149
00:07:42,600 --> 00:07:48,500
We have this win32, you know, in an opengl call and what I was talking

150
00:07:48,500 --> 00:07:49,600
about with the extensions, right?

151
00:07:49,600 --> 00:07:53,800
Is this part right here where we sort of have these extensions that we

152
00:07:53,800 --> 00:07:54,500
want to use?

153
00:07:54,500 --> 00:07:57,600
We want to enable these but we don't know whether we can enable them

154
00:07:57,600 --> 00:07:58,000
or not.

155
00:07:58,000 --> 00:07:59,000
Now, wiggle, swap interval.

156
00:07:59,000 --> 00:08:02,200
We kind of don't really need to check for and the reason is because if

157
00:08:02,200 --> 00:08:04,700
we get this function back then we pretty much know that the only thing

158
00:08:04,700 --> 00:08:05,300
I could do.

159
00:08:05,600 --> 00:08:08,400
So technically to be correct opengl.

160
00:08:08,500 --> 00:08:09,800
I believe you're always supposed

161
00:08:09,900 --> 00:08:14,600
Check for the extension string but really in practice we wouldn't have

162
00:08:14,600 --> 00:08:19,500
to but with these we absolutely do have to because we have no idea if

163
00:08:19,500 --> 00:08:23,200
the implementation will have any idea what this means and so I don't

164
00:08:23,200 --> 00:08:27,100
even know what could happen, maybe it's fine to just pass a GL.

165
00:08:27,100 --> 00:08:30,000
Enable that it doesn't understand, maybe it'll just ignore it.

166
00:08:30,000 --> 00:08:32,500
And in that case, even in this case, we probably don't have to

167
00:08:32,500 --> 00:08:35,100
actually check the extensions, but I'm not sure.

168
00:08:37,299 --> 00:08:40,600
In general, probably does seem like if you wanted to rather be safe

169
00:08:40,600 --> 00:08:41,299
than sorry.

170
00:08:41,600 --> 00:08:44,700
Don't call a random driver with a random integer that it doesn't

171
00:08:44,700 --> 00:08:45,000
expect.

172
00:08:45,000 --> 00:08:45,500
Because who knows?

173
00:08:45,500 --> 00:08:48,100
Maybe the thing just like up and crashes on you because it looks into

174
00:08:48,100 --> 00:08:50,000
a table that's does not big enough.

175
00:08:50,000 --> 00:08:51,200
You know, who knows what could happen?

176
00:08:52,200 --> 00:08:53,400
So yeah, do you need to do it?

177
00:08:53,400 --> 00:08:54,800
Could you probably leave it like this?

178
00:08:54,800 --> 00:08:55,400
Yes.

179
00:08:55,700 --> 00:08:57,000
Will we leave it like this?

180
00:08:57,200 --> 00:08:58,900
I think it's probably best not to.

181
00:08:59,000 --> 00:08:59,800
So I'm going to go ahead

182
00:09:00,100 --> 00:09:05,900
And actually make these things work in some way, that's a little bit

183
00:09:06,000 --> 00:09:06,900
cleaner than that.

184
00:09:07,000 --> 00:09:09,400
So, first of all, I'm going to move these guys out of here.

185
00:09:09,400 --> 00:09:12,500
I'm going to put these into opengl, the opengl code because that seems

186
00:09:12,500 --> 00:09:13,900
like a better place for them, right?

187
00:09:14,400 --> 00:09:19,000
And then in here, what I'd like to do is say okay, I'd like to because

188
00:09:19,000 --> 00:09:21,600
these are the same on all platforms are not specific to Windows,

189
00:09:21,600 --> 00:09:21,800
right?

190
00:09:21,800 --> 00:09:25,700
So, I'm not gonna that's, that's why I'm not leaving them in the

191
00:09:25,700 --> 00:09:27,500
winds, win32 side of things.

192
00:09:28,500 --> 00:09:29,900
And so in here, what I want to do is

193
00:09:30,000 --> 00:09:32,800
Have something called Open Jug section is available but the problem is

194
00:09:32,800 --> 00:09:35,600
what I would like to do is I don't want to keep searching the entire

195
00:09:35,600 --> 00:09:38,000
extension string thing every time necessarily.

196
00:09:38,300 --> 00:09:40,900
So what I'll probably do is make a little thing here that just allows

197
00:09:40,900 --> 00:09:45,800
me to check to see which extensions are available in which ones aren't

198
00:09:45,800 --> 00:09:48,400
in just one sort of pass through right?

199
00:09:49,200 --> 00:09:55,100
And and yeah it won't necessarily be it won't be as efficient could be

200
00:09:55,100 --> 00:09:56,800
even more efficient if we use the hash table or something.

201
00:09:56,800 --> 00:09:58,100
This but it's only a start up.

202
00:09:58,100 --> 00:09:59,700
So it's not something that we really want to.

203
00:10:00,000 --> 00:10:00,500
Engineer.

204
00:10:01,700 --> 00:10:05,800
But what I would like to do is say opengl extensions like this and

205
00:10:05,800 --> 00:10:09,800
then I would like to be able to check for those extensions as we go.

206
00:10:10,800 --> 00:10:16,700
So I want to do something where it's like be 32 you know, for each of

207
00:10:16,700 --> 00:10:19,800
these guys and I guess we don't, I don't remember which extensions

208
00:10:19,800 --> 00:10:20,300
these are in.

209
00:10:20,300 --> 00:10:21,400
So let's take a look.

210
00:10:23,300 --> 00:10:25,500
Let's find out where that is.

211
00:10:26,300 --> 00:10:28,900
Oh sorry I mean that

212
00:10:35,400 --> 00:10:36,500
You know what I just realized.

213
00:10:41,200 --> 00:10:41,700
All right.

214
00:10:41,700 --> 00:10:42,300
Never mind.

215
00:10:42,300 --> 00:10:44,400
I was going to say something and that something was stupid.

216
00:10:44,500 --> 00:10:47,400
I was going to say, you know, I just realized how come it works when

217
00:10:47,400 --> 00:10:50,400
we're passing rgba RGB eight?

218
00:10:51,200 --> 00:10:54,800
When we're BGR and the answer is because this is opengl is internal

219
00:10:54,800 --> 00:10:57,800
requested format, what it's going to store the textures as not the

220
00:10:57,800 --> 00:11:00,900
submission format and we are correctly, passing be gra for the

221
00:11:00,900 --> 00:11:04,300
submission format so it knows we were passing be generated data.

222
00:11:04,300 --> 00:11:05,500
So that's, it's all.

223
00:11:05,600 --> 00:11:06,400
It's all good.

224
00:11:07,600 --> 00:11:08,100
So yeah.

225
00:11:08,100 --> 00:11:08,900
So let's see.

226
00:11:08,900 --> 00:11:10,800
Where is that specified?

227
00:11:11,100 --> 00:11:13,200
What is the extension for that?

228
00:11:13,200 --> 00:11:16,900
Is it this x texture srgb decode?

229
00:11:16,900 --> 00:11:17,500
I guess.

230
00:11:18,000 --> 00:11:19,000
I think that's the one.

231
00:11:19,000 --> 00:11:20,600
We would presumably want.

232
00:11:21,100 --> 00:11:22,400
Let's take a look here.

233
00:11:22,400 --> 00:11:29,800
Srgb, does it actually Define srgb 8 somewhere so it should be eight

234
00:11:31,300 --> 00:11:31,900
Senators.

235
00:11:31,900 --> 00:11:33,000
Apply to the textures of us.

236
00:11:33,000 --> 00:11:34,400
Want to have blah, blah, blah.

237
00:11:35,300 --> 00:11:36,800
So, is this the one?

238
00:11:37,600 --> 00:11:40,000
Is that the actual one that defines it, though?

239
00:11:40,700 --> 00:11:44,000
So it was just this means that the normal linear educated for the

240
00:11:44,000 --> 00:11:44,200
shine.

241
00:11:44,400 --> 00:11:47,300
You could have just extra texture so they can be used with Samplers.

242
00:11:48,200 --> 00:11:52,100
Yeah, yeah, I guess it's this one.

243
00:11:52,900 --> 00:11:54,000
I guess, it's this one.

244
00:11:55,100 --> 00:11:56,400
Add one new row.

245
00:11:58,400 --> 00:11:59,800
All right, so I guess it's this.

246
00:12:00,300 --> 00:12:04,400
I'm not 100% certain the extension stuff and opengl is not book keeped

247
00:12:04,400 --> 00:12:09,300
as well as I would like to say, the very least anyway we'll do a be 32

248
00:12:09,700 --> 00:12:14,000
of that that's whether or not that is their right and then we'll do

249
00:12:14,000 --> 00:12:20,600
another one for a frame buffer srgb and we'll see if that's there as

250
00:12:20,600 --> 00:12:20,900
well.

251
00:12:20,900 --> 00:12:27,100
So that one is some other extension, our frame buffer srgb, that's

252
00:12:27,100 --> 00:12:28,000
that extension.

253
00:12:28,400 --> 00:12:29,800
And I guess we want

254
00:12:30,000 --> 00:12:35,100
And I guess we want glr frame buffer srg because the wiggle one is a

255
00:12:35,100 --> 00:12:35,500
given.

256
00:12:35,500 --> 00:12:38,200
Since obviously, if this is there, then we can do the other one,

257
00:12:38,400 --> 00:12:38,800
right?

258
00:12:40,000 --> 00:12:41,300
So that should be fine.

259
00:12:46,900 --> 00:12:52,100
So what we want to do now is we want to have a thing here which can do

260
00:12:52,500 --> 00:12:56,600
check, you know, open gel check extensions.

261
00:12:58,800 --> 00:13:01,300
And that seems like a pretty straightforward, right?

262
00:13:01,700 --> 00:13:04,500
And what that's going to do is that's going to just assume that you're

263
00:13:04,500 --> 00:13:05,700
in a context right now.

264
00:13:05,700 --> 00:13:08,600
So you know, opengl Chuck extensions.

265
00:13:10,100 --> 00:13:14,200
so that this can just be called and then I guess probably what we do

266
00:13:14,200 --> 00:13:15,000
is, you know,

267
00:13:16,500 --> 00:13:16,900
Maybe what?

268
00:13:16,900 --> 00:13:21,700
Maybe we'll say opengl get extensions or something like this, it will

269
00:13:21,700 --> 00:13:22,500
do it that way.

270
00:13:22,900 --> 00:13:25,800
And then we'll just say like okay, you know, we'll call that and we

271
00:13:25,800 --> 00:13:29,300
could find out what the extensions are, right?

272
00:13:30,000 --> 00:13:32,800
And then we'll just say like okay whatever those extensions are

273
00:13:35,200 --> 00:13:37,000
Will tell us what we wanted to know here.

274
00:13:37,300 --> 00:13:42,800
So we'll just be able to say all right, this extra texture decode, if

275
00:13:42,800 --> 00:13:46,300
that's on, then we can set our default internal format.

276
00:13:46,800 --> 00:13:52,600
Similarly, we got the arm frame buffer one, so if that's on, we can

277
00:13:52,600 --> 00:13:53,200
check it.

278
00:13:56,700 --> 00:14:00,700
And then that is really, I think all we would need to do is take a

279
00:14:00,700 --> 00:14:01,200
look here.

280
00:14:03,300 --> 00:14:07,600
So then we set the Implement something that actually produces this.

281
00:14:07,600 --> 00:14:12,000
So we'll start by saying all of the extensions are not available,

282
00:14:12,000 --> 00:14:12,200
right?

283
00:14:12,200 --> 00:14:14,700
Because that's the default state, is that we don't have any of them.

284
00:14:15,200 --> 00:14:17,700
So then what we need to do is we need to ask opengl.

285
00:14:18,000 --> 00:14:19,200
What are the extensions?

286
00:14:19,700 --> 00:14:21,900
What extensions do you support?

287
00:14:22,400 --> 00:14:25,200
And the way we do that is there's a GL.

288
00:14:25,200 --> 00:14:27,800
Get string command in opengl.

289
00:14:27,900 --> 00:14:32,200
Oh wait, we've got that cool doc site that someone sent in GL get

290
00:14:32,200 --> 00:14:32,500
string.

291
00:14:33,900 --> 00:14:38,100
So basically in opengl right, we've got this GL, get string call.

292
00:14:38,400 --> 00:14:42,300
And what we can do is we can call this function, g, l, get string and

293
00:14:42,300 --> 00:14:47,800
it will return like basically a string to us like so,

294
00:14:53,000 --> 00:14:57,200
It will return a string to us and we can, we can sort of get all of

295
00:14:57,200 --> 00:14:58,600
this information that we might want.

296
00:14:58,600 --> 00:14:59,900
Now, as you can see,

297
00:15:00,100 --> 00:15:03,400
There's actually, the extensions part is only just one of the piece of

298
00:15:03,400 --> 00:15:05,000
information, you might want to get.

299
00:15:05,500 --> 00:15:08,400
And so, while we're at it, I think it might be nice.

300
00:15:08,400 --> 00:15:13,900
Since these are basically strings that stay around, there's things

301
00:15:13,900 --> 00:15:15,200
that we can use.

302
00:15:15,700 --> 00:15:19,600
We could do a thing where we just sort of say in here.

303
00:15:20,000 --> 00:15:21,200
What all the parts?

304
00:15:21,800 --> 00:15:23,200
What are all of the like

305
00:15:26,300 --> 00:15:27,700
Language version.

306
00:15:27,800 --> 00:15:32,700
Oops shading language version, we could just say what all those are so

307
00:15:32,700 --> 00:15:35,400
that we always have them around as well in case like we're just

308
00:15:35,400 --> 00:15:38,500
curious there we need to print them out or who knows what those may

309
00:15:38,500 --> 00:15:39,600
come in handy later.

310
00:15:40,300 --> 00:15:42,800
So, I think what I actually want to do is just save them all.

311
00:15:43,000 --> 00:15:49,200
So maybe we'll say opengl opengl info may be right.

312
00:15:52,600 --> 00:15:55,300
And so maybe this way we'll just say, oh it returns whether the

313
00:15:55,300 --> 00:15:57,200
specific extensions that we're looking for there.

314
00:15:57,200 --> 00:16:01,600
But it'll also include some other valuable information because we may

315
00:16:01,600 --> 00:16:03,300
want that information for other purposes.

316
00:16:03,300 --> 00:16:05,200
So we might as well just do that all in one place.

317
00:16:05,700 --> 00:16:08,700
Since we don't really know what we might need and we're already in a

318
00:16:08,700 --> 00:16:12,900
position where it's it makes sense to get it all at once because it's

319
00:16:12,900 --> 00:16:15,900
like that's all the code kind of is in one place and makes sense in a

320
00:16:15,900 --> 00:16:17,500
nice way, right?

321
00:16:17,500 --> 00:16:20,900
So we'll just go ahead and grab these guys out here and get all the

322
00:16:20,900 --> 00:16:22,000
strings and put them

323
00:16:24,200 --> 00:16:26,500
Back where they belong.

324
00:16:27,900 --> 00:16:28,400
There we go.

325
00:16:29,200 --> 00:16:32,800
Okay, so we've got all of our strings in there now and all of these

326
00:16:32,800 --> 00:16:35,200
are ones that we don't actually necessarily care about at the moment.

327
00:16:35,200 --> 00:16:40,900
In fact what I can do to though it's like an I can sort of show you

328
00:16:40,900 --> 00:16:46,000
guys that first, like we can actually go see what that actually is.

329
00:16:46,500 --> 00:16:50,700
What you'll notice here is this one right now, we can't actually get

330
00:16:50,700 --> 00:16:54,900
and the reason for that is that is in opengl 2.0 extension and we're

331
00:16:54,900 --> 00:16:56,200
still in opengl 1.0.

332
00:16:56,700 --> 00:16:57,600
So technically,

333
00:16:58,100 --> 00:17:01,800
This guy we can actually get because hey opengl doesn't have a shading

334
00:17:01,800 --> 00:17:06,300
language so it's not surprising that you can't ask what it actually

335
00:17:06,300 --> 00:17:07,599
is, right?

336
00:17:08,099 --> 00:17:11,099
So what I'm going to do here is I'm just going to put that in

337
00:17:12,200 --> 00:17:15,800
something where we're just like you know what, there isn't one and

338
00:17:15,800 --> 00:17:17,099
then we'll continue from there.

339
00:17:17,700 --> 00:17:18,300
Alright.

340
00:17:18,700 --> 00:17:23,400
So here is our our info now and our info, we can use it for these

341
00:17:23,400 --> 00:17:24,099
purposes.

342
00:17:24,200 --> 00:17:24,800
There we go.

343
00:17:26,200 --> 00:17:28,600
And that's info.

344
00:17:28,600 --> 00:17:30,500
Oops, info.

345
00:17:31,500 --> 00:17:35,400
And so now when we run this, we should be able to do opengl

346
00:17:36,900 --> 00:17:40,600
Info and take a look at what it actually says.

347
00:17:40,700 --> 00:17:42,200
And this is the first time we've ever done this.

348
00:17:42,200 --> 00:17:44,700
Like, I don't even know, I don't even remember what Hardware is on

349
00:17:44,700 --> 00:17:48,600
this machine if I ever even looked in the first place, probably just

350
00:17:48,600 --> 00:17:49,300
some point.

351
00:17:49,400 --> 00:17:50,200
But here it is.

352
00:17:50,400 --> 00:17:52,800
It's an ATI firepro V8.

353
00:17:52,800 --> 00:17:58,400
700, it's running in 3.3 compatibility profile.

354
00:17:58,700 --> 00:17:59,600
What that means is the

355
00:18:00,000 --> 00:18:02,400
Real version right is actually open.

356
00:18:02,400 --> 00:18:04,400
It's actually supports opengl 3.0 X.

357
00:18:04,500 --> 00:18:05,000
Right?

358
00:18:08,500 --> 00:18:12,300
So in fact, you can see, even if you come back here to talk about to

359
00:18:12,300 --> 00:18:15,500
yell, you can sort of see what that entails, right?

360
00:18:15,500 --> 00:18:20,300
So anything where there's a gl3 like active Shader program would not

361
00:18:20,300 --> 00:18:24,000
work because it requires for but active texter would because that's in

362
00:18:24,000 --> 00:18:25,600
three right or something right.

363
00:18:25,600 --> 00:18:29,600
And here's the begin query indexed only in for, but begin transferring

364
00:18:29,600 --> 00:18:30,800
for you back is in three.

365
00:18:31,200 --> 00:18:35,000
So anything that's in three would work on this card, right?

366
00:18:39,500 --> 00:18:43,300
Far as I know, there may be a couple things that have capability B to

367
00:18:43,300 --> 00:18:48,000
them, but I'm pretty sure that, if, if you're in opengl 3.0 core, you

368
00:18:48,000 --> 00:18:51,100
have to support them all, if you report that you're in, if you're

369
00:18:51,100 --> 00:18:53,300
three, I don't know though, don't quote me on that.

370
00:18:53,800 --> 00:18:55,900
So anyway, there we go.

371
00:18:55,900 --> 00:18:57,400
We've got our opengl info.

372
00:18:57,700 --> 00:19:00,100
We can see some information about the card and that's great.

373
00:19:00,200 --> 00:19:02,200
But now we need to actually figure out what's going on with these

374
00:19:02,200 --> 00:19:03,000
extensions.

375
00:19:03,600 --> 00:19:07,700
So what I'd like to do here is just say like, okay, let's let's

376
00:19:08,100 --> 00:19:10,400
Let's Loop through these and see what we've actually got.

377
00:19:10,900 --> 00:19:13,900
So, once we have the extension string, we should be able to do

378
00:19:13,900 --> 00:19:14,300
something.

379
00:19:14,300 --> 00:19:18,000
Like, if you remember, when we did the stream where I showed, how to

380
00:19:18,000 --> 00:19:21,200
make a parser, we should be able to do something that basically gives

381
00:19:21,200 --> 00:19:23,000
us back one at a time.

382
00:19:23,500 --> 00:19:27,500
These extensions and then we can compare them, right?

383
00:19:29,100 --> 00:19:30,700
And look to see if they're equal.

384
00:19:30,900 --> 00:19:34,400
So we want to do is do something that like goes through each extension

385
00:19:34,700 --> 00:19:40,300
and they'll do like, you know, if string equals something like this

386
00:19:41,100 --> 00:19:42,700
and I just can look for each of these

387
00:19:48,100 --> 00:19:50,800
And I can probably do something actually like this.

388
00:19:54,200 --> 00:19:56,200
if I want to be sort of Sly about it,

389
00:20:04,400 --> 00:20:05,000
Right.

390
00:20:06,500 --> 00:20:09,900
And, you know, we can make as many of those as we want.

391
00:20:20,500 --> 00:20:22,300
So that would be pretty straightforward.

392
00:20:24,400 --> 00:20:25,600
And you'll notice I just put it in 0 here.

393
00:20:25,600 --> 00:20:27,100
So that all these cases, look the same.

394
00:20:28,100 --> 00:20:29,000
Don't know why I did that.

395
00:20:29,100 --> 00:20:31,200
I just thought it was nice to have each one.

396
00:20:31,200 --> 00:20:32,400
Look exactly the same.

397
00:20:33,300 --> 00:20:36,400
So, all we need to do now is have some kind of way of doing string

398
00:20:36,400 --> 00:20:36,900
equals.

399
00:20:37,100 --> 00:20:40,800
And like I said, we already did this on our parser, right?

400
00:20:40,800 --> 00:20:45,000
So, when we did the simple preprocessor, for example, we have one

401
00:20:45,000 --> 00:20:45,400
here.

402
00:20:45,400 --> 00:20:48,700
That's like whether a token equals something right.

403
00:20:49,800 --> 00:20:51,900
It was

404
00:20:55,500 --> 00:20:56,000
In here sighs.

405
00:20:56,000 --> 00:20:56,900
I thought we did.

406
00:20:57,200 --> 00:20:58,100
Maybe I'm Wrong.

407
00:21:00,700 --> 00:21:01,200
There it is.

408
00:21:02,000 --> 00:21:04,400
So we're just talking about this code right here, right?

409
00:21:04,400 --> 00:21:06,900
This is the exact piece of code that we're talking about, nothing

410
00:21:06,900 --> 00:21:10,400
particularly fancy, but that's what it is.

411
00:21:10,400 --> 00:21:15,300
And in fact, this token code is almost exactly what we want right now.

412
00:21:15,300 --> 00:21:18,100
I don't know if we want to make this into a general-purpose thing.

413
00:21:18,100 --> 00:21:20,300
I don't even know we may already have something like this in handmade

414
00:21:20,300 --> 00:21:20,900
hero.

415
00:21:21,300 --> 00:21:23,500
One of the things that were not particularly good with on a hero and

416
00:21:23,500 --> 00:21:26,600
part of this is just the nature of the way that the stream is kind of

417
00:21:26,600 --> 00:21:27,800
a have to be an hour chunks.

418
00:21:28,100 --> 00:21:29,800
We don't have a lot of time for like Library,

419
00:21:30,000 --> 00:21:33,300
Building where we're like, let's make good sensible place for these

420
00:21:33,300 --> 00:21:34,600
things to live or whatever.

421
00:21:35,400 --> 00:21:40,000
So I don't even know if we've got a string equals kind of stuff.

422
00:21:41,500 --> 00:21:47,200
If I already have a function like that I might I might not and it

423
00:21:47,200 --> 00:21:50,900
looks like maybe I don't at the moment.

424
00:21:50,900 --> 00:21:52,400
That's what it kind of looks like to me.

425
00:21:52,900 --> 00:21:55,400
So I'm going to go ahead and grab this guy out and I'm going to I'm

426
00:21:55,400 --> 00:21:59,800
going to make him actually exist in somewhere.

427
00:22:00,800 --> 00:22:03,400
So I don't know where to put it like I said, maybe we've got a

428
00:22:03,400 --> 00:22:06,000
handmade string.h, maybe we're actually have that.

429
00:22:06,000 --> 00:22:08,900
I kind of don't want to because I hope we don't have much.

430
00:22:08,900 --> 00:22:10,500
Oh, there we go.

431
00:22:10,500 --> 00:22:11,500
Strings are equal.

432
00:22:11,900 --> 00:22:12,400
We do have.

433
00:22:12,400 --> 00:22:13,100
It's right there.

434
00:22:15,000 --> 00:22:15,500
Yep.

435
00:22:17,400 --> 00:22:18,400
No worries.

436
00:22:19,100 --> 00:22:19,800
No worries.

437
00:22:19,800 --> 00:22:20,200
At all.

438
00:22:20,700 --> 00:22:23,800
All right, so if I just go ahead and grab this guy,

439
00:22:32,700 --> 00:22:33,000
Yeah.

440
00:22:34,100 --> 00:22:37,600
Look if I just grab this guy's thing and I say strings are equal and

441
00:22:37,600 --> 00:22:44,800
then I have an a length and a and a b where the maybe the B is does

442
00:22:44,800 --> 00:22:47,600
not has an unknown length to it, right?

443
00:22:47,600 --> 00:22:50,000
Like we like that's an Ask easy string.

444
00:22:52,400 --> 00:22:55,100
Then we can go through here and just do it this way.

445
00:22:55,500 --> 00:23:04,100
So we say, at equals B, we have a length here.

446
00:23:04,600 --> 00:23:05,800
That's a you, mmm.

447
00:23:07,800 --> 00:23:11,200
Which by the way, was correctly, pointed out, that, that should be you

448
00:23:11,200 --> 00:23:12,000
and pointer.

449
00:23:18,000 --> 00:23:23,200
And then in here, we have pretty much the exact code we want.

450
00:23:23,300 --> 00:23:27,900
It's just that, and, and that's the function.

451
00:23:29,200 --> 00:23:29,800
Right.

452
00:23:31,300 --> 00:23:36,000
So this allows us to do a thing where we basically inside here, go

453
00:23:36,000 --> 00:23:37,200
strings are equal.

454
00:23:40,300 --> 00:23:42,900
And this is the thing we're checking for, which is a Nancy Z,

455
00:23:42,900 --> 00:23:43,700
terminated string.

456
00:23:43,700 --> 00:23:46,900
And then the other string that we want here is just the like extension

457
00:23:47,600 --> 00:23:51,600
count or like, you know what, maybe we'll just do, like count and

458
00:23:51,800 --> 00:23:53,200
start something like that.

459
00:23:54,100 --> 00:23:55,600
Counting at, I don't know.

460
00:23:57,000 --> 00:23:57,800
Something like this.

461
00:23:58,400 --> 00:23:59,800
And so here, what we can do is we

462
00:24:00,000 --> 00:24:06,000
Get each individual extension and we can process it accordingly.

463
00:24:06,000 --> 00:24:09,500
So, I'm going to start by saying at equals result extensions.

464
00:24:10,000 --> 00:24:11,400
We're going to do a while loop here.

465
00:24:11,400 --> 00:24:16,200
I guess, while at is actually pointing at something valid, then what

466
00:24:16,200 --> 00:24:20,000
I'll do is, I'll say, all right, I'll stay with the end, it starts it

467
00:24:20,000 --> 00:24:22,100
at and it goes until it hits.

468
00:24:23,000 --> 00:24:24,000
Some kind of white space.

469
00:24:24,000 --> 00:24:29,200
I guess in fact, when I probably should do, is something like while is

470
00:24:29,200 --> 00:24:29,800
white space?

471
00:24:30,000 --> 00:24:38,600
face start at Plus at so skip any white space that might be there then

472
00:24:38,600 --> 00:24:41,700
I'll say while you know

473
00:24:43,400 --> 00:24:48,500
Car car and he goes out there and I'll say while you know star end and

474
00:24:48,500 --> 00:24:49,900
it's not white space.

475
00:24:52,000 --> 00:24:55,100
You know, I'm saying, I'm going to advance end so there's this can to

476
00:24:55,100 --> 00:24:55,900
the end of it.

477
00:24:56,600 --> 00:25:01,000
So now I have like where it starts and where it ends and so then I can

478
00:25:01,000 --> 00:25:04,000
just say like okay the count for this guy.

479
00:25:05,700 --> 00:25:09,000
is just going to be whatever the end is minus, whatever the ad is,

480
00:25:12,400 --> 00:25:13,100
Makes sense.

481
00:25:14,300 --> 00:25:16,000
And so that's how long the thing is.

482
00:25:16,200 --> 00:25:20,200
And the at is is exactly what the app should be.

483
00:25:20,600 --> 00:25:24,000
So then we can do our comparisons and then at the end after we're all

484
00:25:24,000 --> 00:25:24,500
done.

485
00:25:25,200 --> 00:25:30,400
We can just say at that point, start at wherever we end it and keep

486
00:25:30,400 --> 00:25:31,200
going from there.

487
00:25:33,000 --> 00:25:33,600
Make sense.

488
00:25:33,900 --> 00:25:36,800
So I'm literally just like, picking out strings out of this extension

489
00:25:36,800 --> 00:25:40,300
thing, which by the way, I suppose, I never mentioned so you guys

490
00:25:40,300 --> 00:25:43,000
don't actually know why I'm parsing it.

491
00:25:43,000 --> 00:25:47,300
This way, the extensions that come back is just a giant long really

492
00:25:47,300 --> 00:25:53,200
long string and each each extension name is just stuffed into the

493
00:25:53,200 --> 00:25:54,900
string with, like, a space in between it.

494
00:25:55,500 --> 00:25:56,800
So you'll see in a second.

495
00:25:57,800 --> 00:26:02,300
So really all we need here is the white space part of it and I don't

496
00:26:02,300 --> 00:26:05,200
know if we've got a white space tester, we do.

497
00:26:05,400 --> 00:26:06,900
So we'll put that in there as well.

498
00:26:08,700 --> 00:26:11,800
In fact, I don't know, we might want more of these eventually, but

499
00:26:12,600 --> 00:26:12,900
okay.

500
00:26:12,900 --> 00:26:16,600
So, anyway in handmade that H, I don't think we have an is white

501
00:26:16,600 --> 00:26:17,100
space.

502
00:26:24,900 --> 00:26:26,000
Yeah, we don't.

503
00:26:26,400 --> 00:26:27,100
So we do now.

504
00:26:31,500 --> 00:26:35,400
And so end of the line, we also need because that those depend on each

505
00:26:35,400 --> 00:26:37,100
other looks like, there we go.

506
00:26:38,300 --> 00:26:39,500
And we can sort of

507
00:26:40,800 --> 00:26:41,300
D Bula.

508
00:26:41,300 --> 00:26:42,100
Fire those

509
00:26:44,100 --> 00:26:44,600
Like so.

510
00:26:47,800 --> 00:26:51,800
Alright so inside handmade opengl.

511
00:26:52,200 --> 00:26:55,900
That stuff is in what handmade dot h which I don't think it's actually

512
00:26:55,900 --> 00:26:56,400
installed here.

513
00:26:56,400 --> 00:26:59,000
So what I probably want to do is put these somewhere where they can

514
00:26:59,000 --> 00:26:59,500
be.

515
00:27:00,000 --> 00:27:04,900
Just as like a commonplace so maybe the platform where we have some of

516
00:27:04,900 --> 00:27:08,700
these like little handy functions here.

517
00:27:09,200 --> 00:27:10,800
Those can sort of get thrown in there.

518
00:27:10,800 --> 00:27:12,000
Maybe down in here.

519
00:27:25,000 --> 00:27:25,500
Okay.

520
00:27:29,300 --> 00:27:33,600
Oh, that's gets me every time I keep forgetting that, we decided to

521
00:27:33,600 --> 00:27:36,000
make this see linkable for people who are reporting to other

522
00:27:36,000 --> 00:27:36,800
platforms.

523
00:27:38,200 --> 00:27:39,600
Hmm.

524
00:27:41,000 --> 00:27:44,200
So I kind of need like a shared Library place.

525
00:27:44,700 --> 00:27:48,400
I need like a handmade shared dot h or something like this, right?

526
00:27:48,500 --> 00:27:51,500
Something that we know, gets included in everything.

527
00:27:53,800 --> 00:27:55,000
And I'm not sure.

528
00:27:56,600 --> 00:27:57,800
What just happened?

529
00:27:58,600 --> 00:27:59,700
Why are we not?

530
00:27:59,900 --> 00:28:01,700
Why is handmade shared .h?

531
00:28:01,700 --> 00:28:03,400
Not a C++ mode thing.

532
00:28:06,200 --> 00:28:07,000
I don't even want to know.

533
00:28:07,100 --> 00:28:09,900
No, I don't want to know handmade shared .h.

534
00:28:10,700 --> 00:28:11,200
There we go.

535
00:28:19,300 --> 00:28:22,100
So, I just kind of need some place to stick this stuff.

536
00:28:22,400 --> 00:28:27,800
I feel like that's going to be included in both places, right?

537
00:28:28,000 --> 00:28:30,300
So handmade .h, right?

538
00:28:30,300 --> 00:28:34,200
It can include, it could include this stuff and then we can start

539
00:28:34,200 --> 00:28:35,300
sticking things in there.

540
00:28:35,600 --> 00:28:41,300
That makes some sense, so it's like handmade shared .h, it's in there,

541
00:28:41,600 --> 00:28:44,300
but then it's also in like win32 handmade .h.

542
00:28:44,300 --> 00:28:45,700
It's also in here.

543
00:28:46,900 --> 00:28:49,500
That makes sense probably after intrinsics.

544
00:28:49,700 --> 00:28:54,200
In fact intrinsics and math could actually be included inside this so

545
00:28:54,200 --> 00:28:55,900
it could be something like this even

546
00:28:58,100 --> 00:28:58,700
Right.

547
00:28:59,200 --> 00:29:03,400
And that way in here, we just we just assume that those are going to

548
00:29:03,400 --> 00:29:05,100
work that way, right?

549
00:29:06,400 --> 00:29:09,400
Okay, let's see.

550
00:29:09,500 --> 00:29:11,900
Where are we here?

551
00:29:11,900 --> 00:29:15,300
Gotta put some parentheses in there.

552
00:29:17,700 --> 00:29:24,500
All right, so let's go ahead and go a little further with this and and

553
00:29:24,500 --> 00:29:25,400
try to get this working.

554
00:29:25,400 --> 00:29:28,700
So, let me just show you before I go any further with the programming,

555
00:29:28,900 --> 00:29:32,400
I just wanted to show you guys what I meant about that extension

556
00:29:32,400 --> 00:29:32,900
string.

557
00:29:34,200 --> 00:29:35,800
So here is the extension string.

558
00:29:37,600 --> 00:29:39,500
And as you can see, it's just a giant ol mess.

559
00:29:39,900 --> 00:29:44,000
But basically what it is, is the extensions are just every extension

560
00:29:44,000 --> 00:29:48,400
name that this particular graphics with this particular opengl.

561
00:29:48,400 --> 00:29:53,200
Implementation supports is stuffed in here somewhere, so you can even

562
00:29:53,200 --> 00:29:56,000
see, like here is the one that we wanted.

563
00:29:56,000 --> 00:29:59,000
GLX frame buffer srgb, right?

564
00:29:59,100 --> 00:29:59,800
That happens to be

565
00:30:00,000 --> 00:30:01,800
One that we're looking for glr.

566
00:30:02,300 --> 00:30:02,900
Oh sorry, I know.

567
00:30:02,900 --> 00:30:05,800
That's the EXT one we were looking for the ARB one.

568
00:30:06,000 --> 00:30:10,600
Maybe we should look for the extra one actually, but there's GL, ARB

569
00:30:10,600 --> 00:30:12,700
frame buffer srgb right there.

570
00:30:13,700 --> 00:30:18,600
So both of those are listed as being exported, maybe we should use the

571
00:30:18,600 --> 00:30:23,300
X to 1 because the X1 probably is even older, right?

572
00:30:23,300 --> 00:30:24,700
And it would support more cards.

573
00:30:24,700 --> 00:30:28,200
I don't know which one we want there, but then there's X texture srgb.

574
00:30:28,200 --> 00:30:29,000
Decode.

575
00:30:30,100 --> 00:30:34,400
And, and that should be in here as well.

576
00:30:34,400 --> 00:30:38,700
I would think srgb.

577
00:30:39,600 --> 00:30:43,900
So, it looks like that's actually called X texture srgb, not decode.

578
00:30:43,900 --> 00:30:46,400
So, the decode one is probably a different one.

579
00:30:46,400 --> 00:30:48,700
This is why I was saying, is having trouble figuring out which one was

580
00:30:48,700 --> 00:30:49,200
supposed to be.

581
00:30:49,300 --> 00:30:52,200
So I think we actually want it to be this.

582
00:30:54,200 --> 00:30:56,500
I think I just was asleep at the switch there.

583
00:30:56,500 --> 00:31:00,100
I think that's what we actually want and I just don't know.

584
00:31:00,100 --> 00:31:02,300
I suspect we probably want

585
00:31:04,100 --> 00:31:08,900
my guess is we probably want the extra RG because that's probably the

586
00:31:08,900 --> 00:31:09,400
one.

587
00:31:10,000 --> 00:31:12,800
That's that's further back if that makes sense.

588
00:31:14,000 --> 00:31:15,600
Let's just let's just find out.

589
00:31:15,600 --> 00:31:16,600
So let's see.

590
00:31:16,800 --> 00:31:20,000
Oops, I meant frame buffer.

591
00:31:23,000 --> 00:31:24,100
Where'd that guy go?

592
00:31:28,000 --> 00:31:32,900
GLX frame, buffer srgb.

593
00:31:36,900 --> 00:31:40,100
So yeah, so if we use this one, instead of the are blown, the extra

594
00:31:40,100 --> 00:31:42,600
ones come first before they get promoted to our extensions.

595
00:31:42,600 --> 00:31:45,700
Like I mentioned on the previous Stream So that one might actually

596
00:31:45,800 --> 00:31:50,600
have have more support for it further back now, probably it won't

597
00:31:50,600 --> 00:31:51,000
matter.

598
00:31:51,000 --> 00:31:53,300
Like I said, because these are extensions that almost every graphics

599
00:31:53,300 --> 00:31:58,300
card probably has now I suspect but point being, you know, if we're

600
00:31:58,600 --> 00:32:02,800
being proper about it which we're trying to be, then that is just the

601
00:32:02,800 --> 00:32:03,600
way that is.

602
00:32:04,200 --> 00:32:05,100
So let's go ahead and

603
00:32:05,200 --> 00:32:06,000
This in here.

604
00:32:07,700 --> 00:32:08,700
And then we'll take a look.

605
00:32:09,300 --> 00:32:12,600
So what I'd also like to do is verify that they are the same ID so I'd

606
00:32:12,600 --> 00:32:15,500
like to verify that they're the same here.

607
00:32:16,100 --> 00:32:20,300
So I'd like to figure out what g l frame Beaufort, srgb is defined to

608
00:32:20,300 --> 00:32:24,800
in this extension, if we can, which I don't know if we can or not.

609
00:32:25,200 --> 00:32:25,900
So let's see.

610
00:32:25,900 --> 00:32:26,200
It's it.

611
00:32:26,200 --> 00:32:26,800
Is it

612
00:32:28,200 --> 00:32:29,800
Eight DB9.

613
00:32:33,200 --> 00:32:33,700
Yes.

614
00:32:34,700 --> 00:32:36,400
So there it is, right?

615
00:32:36,400 --> 00:32:40,200
So that's what we want and it's frame buffer, srgb.

616
00:32:40,200 --> 00:32:44,200
EXT is the name of it, which I don't know if we actually need to

617
00:32:44,200 --> 00:32:45,500
change it, but that should be fine.

618
00:32:45,900 --> 00:32:48,400
All right, so that all looks reasonable now to me.

619
00:32:48,800 --> 00:32:51,600
But now we still have to actually implement this code for actually

620
00:32:51,600 --> 00:32:52,700
checking the extensions.

621
00:32:53,100 --> 00:32:55,400
So let's go ahead and recompile this guy here.

622
00:32:59,200 --> 00:32:59,600
Oops.

623
00:33:00,000 --> 00:33:01,200
Pretty 32 on there.

624
00:33:02,300 --> 00:33:03,800
And this is

625
00:33:07,200 --> 00:33:09,600
That one, this.

626
00:33:10,900 --> 00:33:11,500
Is that one?

627
00:33:14,700 --> 00:33:18,400
So anyway, if I run through here now and I get to my extensions.

628
00:33:18,600 --> 00:33:22,400
So now I'm just going to like get this parser working so let's see.

629
00:33:22,400 --> 00:33:25,600
So there's at we skip the white space which in this case there isn't

630
00:33:25,600 --> 00:33:31,100
any we take a look at where the end is and let's see if that should

631
00:33:31,200 --> 00:33:34,200
that should point to the space that next space there.

632
00:33:34,900 --> 00:33:36,900
And it does, which is exactly what we want.

633
00:33:36,900 --> 00:33:41,500
Let's look at the count, the count is 14, but that's 14 hex.

634
00:33:42,900 --> 00:33:45,900
The count is actually 20 so let's see.

635
00:33:45,900 --> 00:33:53,600
1 2 3 4 5 6 7 8 9 10 11 12, 13 14 15 16 17 18, 19, 20, exactly what we

636
00:33:53,600 --> 00:33:54,300
want.

637
00:33:54,700 --> 00:33:56,300
Let's see about strings are equal.

638
00:33:57,800 --> 00:34:01,600
We'll call those we then do adequate Zend and we start here.

639
00:34:01,600 --> 00:34:04,200
So, now we come through and we're at White space, so we skip the white

640
00:34:04,200 --> 00:34:06,300
space and we keep going.

641
00:34:06,400 --> 00:34:06,800
Okay.

642
00:34:07,400 --> 00:34:11,900
So that all seems pretty good and let's see if we actually correctly,

643
00:34:11,900 --> 00:34:13,100
identify these guys.

644
00:34:13,199 --> 00:34:14,900
It looks like we did in both cases.

645
00:34:15,500 --> 00:34:17,300
So I think we're all good.

646
00:34:17,300 --> 00:34:19,100
I think we've got a parser.

647
00:34:19,400 --> 00:34:21,900
Now that actually works.

648
00:34:23,600 --> 00:34:26,800
Okay, so that's the extension person in a nutshell.

649
00:34:30,500 --> 00:34:33,000
Yeah, we we got a ton of time left though.

650
00:34:33,800 --> 00:34:41,100
I mean honestly we've got like 20 or 25 minutes left so I guess.

651
00:34:42,900 --> 00:34:44,000
Yeah.

652
00:34:51,699 --> 00:34:52,600
I guess.

653
00:34:54,600 --> 00:34:57,400
We're going to have to do something else that will take about 20

654
00:34:57,400 --> 00:35:02,800
minutes, because there ain't much more to say about extensions that I

655
00:35:02,800 --> 00:35:08,100
didn't just do, so we can get rid of our to do.

656
00:35:08,200 --> 00:35:09,700
That's that's all good.

657
00:35:10,100 --> 00:35:13,800
And, you know, I guess, one of the things we could do here is inside

658
00:35:13,800 --> 00:35:14,800
handmade opengl.

659
00:35:14,800 --> 00:35:19,400
We could actually, we could actually make this be a more common thing

660
00:35:19,400 --> 00:35:23,600
because, you know, we could do something like opengl

661
00:35:23,800 --> 00:35:25,300
It up or something like this.

662
00:35:26,500 --> 00:35:32,800
You know, we're open Jill initialisation or whatever and this part is

663
00:35:32,800 --> 00:35:33,700
going to be common.

664
00:35:37,700 --> 00:35:41,200
Right across all of our platforms because we're going to want to check

665
00:35:41,200 --> 00:35:42,400
for these same extensions.

666
00:35:42,400 --> 00:35:43,800
We're going to want to use all this stuff.

667
00:35:43,900 --> 00:35:47,000
So what we could do is just say, hey everyone could call that.

668
00:35:47,400 --> 00:35:49,600
And the only thing that the platform used to do is anything that's

669
00:35:49,600 --> 00:35:53,500
specific to it like this wiggle, swap interval part of it, right?

670
00:35:54,900 --> 00:35:59,900
so that seems probably like more saying thing to do at that point,

671
00:36:02,600 --> 00:36:03,300
Yeah.

672
00:36:05,400 --> 00:36:09,200
That's what I think so yeah.

673
00:36:09,200 --> 00:36:14,700
That's it for that and I'm not sure what else we would do with opengl

674
00:36:14,700 --> 00:36:14,900
here.

675
00:36:14,900 --> 00:36:16,700
That would only take 20 minutes.

676
00:36:20,500 --> 00:36:23,800
That's kind of a tricky question.

677
00:36:24,200 --> 00:36:27,600
So well, we could try to put in buffers.

678
00:36:27,600 --> 00:36:29,600
I don't know that buffers will make any difference here because the

679
00:36:29,600 --> 00:36:33,300
texture changes are going to be the thing that's going to be

680
00:36:33,300 --> 00:36:34,700
problematic there.

681
00:36:35,400 --> 00:36:44,500
So yeah, maybe we could try baby while we're in the middle of

682
00:36:44,500 --> 00:36:47,400
implementing, you know?

683
00:36:49,200 --> 00:36:52,000
Maybe while we're implementing extensions.

684
00:36:52,000 --> 00:36:54,200
You know what we should do because this is probably going to be

685
00:36:54,200 --> 00:36:56,200
important for our texture downloads.

686
00:36:56,500 --> 00:37:00,500
What we should probably do is do show how to do context escalation.

687
00:37:00,700 --> 00:37:04,200
That's probably the, that's probably the most sensible thing to do.

688
00:37:05,700 --> 00:37:06,300
All right.

689
00:37:06,700 --> 00:37:09,500
So I talked about this a little bit before but I'll just say it again.

690
00:37:10,200 --> 00:37:13,500
So, opengl has gone through many revisions obviously in its history

691
00:37:13,500 --> 00:37:15,900
and you sort of a scene a little bit of a, how that works.

692
00:37:16,100 --> 00:37:19,000
And I explained it a little bit more detail, so go back and watch

693
00:37:19,000 --> 00:37:20,100
yesterday's episode.

694
00:37:20,100 --> 00:37:24,300
I think is where we talked about this, but I'll just say it again.

695
00:37:24,800 --> 00:37:27,400
What happens in opengl is the initial version that shipped with

696
00:37:27,400 --> 00:37:29,100
Windows was opengl one point x.

697
00:37:29,800 --> 00:37:32,800
I can't remember exactly which one it was like, 1.1 or something?

698
00:37:32,800 --> 00:37:33,100
Like this.

699
00:37:33,100 --> 00:37:34,300
Maybe it was one point two.

700
00:37:35,200 --> 00:37:35,400
And

701
00:37:35,500 --> 00:37:41,600
And, you know, as it went, it opens yells evolved away from there but

702
00:37:41,600 --> 00:37:44,700
Microsoft never bothered to update the bindings and windows at all and

703
00:37:44,700 --> 00:37:47,700
they never bothered to require a newer version of opengl.

704
00:37:47,900 --> 00:37:51,200
So, you know, you can still ship an opengl one point X driver if you

705
00:37:51,200 --> 00:37:51,400
want.

706
00:37:51,400 --> 00:37:53,500
And the reason for that, of course, is that they have skin in.

707
00:37:53,500 --> 00:37:57,400
They want DirectX to be the primary Graphics things so that any chance

708
00:37:57,400 --> 00:37:59,900
they get, they try to make opengl less attractive.

709
00:37:59,900 --> 00:38:02,100
That's just and again, that's not me being flippant.

710
00:38:02,100 --> 00:38:05,300
I actually I know lots of inside information about those.

711
00:38:05,400 --> 00:38:08,000
Things and and they really are exactly that awful there.

712
00:38:08,700 --> 00:38:13,200
So basically what happens is all of the opengl progress comes from the

713
00:38:13,200 --> 00:38:18,200
driver manufacturers for the most part and and Microsoft gets dragged

714
00:38:18,200 --> 00:38:19,700
along kicking and screaming with that.

715
00:38:20,200 --> 00:38:25,000
And so what happens is, the driver writers themselves are.

716
00:38:25,000 --> 00:38:28,000
The people who are updating opengl, right?

717
00:38:28,400 --> 00:38:34,600
So when you actually pounded kludgy L.H with, we did to access the

718
00:38:34,600 --> 00:38:35,200
windows.

719
00:38:35,500 --> 00:38:41,000
All findings you really including what amounts to a you know decade or

720
00:38:41,000 --> 00:38:47,100
two old set of bindings and everything else that has come since then

721
00:38:47,500 --> 00:38:51,000
you have to get by querying and using these extensions.

722
00:38:51,300 --> 00:38:54,400
Now extensions are an actual first class citizen in opengl.

723
00:38:54,400 --> 00:38:58,500
In the sense that it's meant to be extended and vendors are allowed to

724
00:38:58,500 --> 00:38:59,500
add their own extensions.

725
00:38:59,500 --> 00:38:59,800
So they

726
00:39:00,000 --> 00:39:00,900
These extensions.

727
00:39:01,100 --> 00:39:05,500
But over time, the extensions get cooked sort of agreed upon as

728
00:39:05,500 --> 00:39:08,400
generally useful things and when they agree that a bunch of these

729
00:39:08,400 --> 00:39:12,100
extensions is going to become sort of a new version of opengl.

730
00:39:12,200 --> 00:39:15,900
They update the core version number so it becomes opengl 2.1.

731
00:39:16,300 --> 00:39:21,400
Opengl 2.2 opengl 3.0 opengl 4.0 whatever right?

732
00:39:22,800 --> 00:39:25,200
and so what they did with opengl 4.0

733
00:39:30,200 --> 00:39:32,800
Actually be honest, maybe I've done this in 33 point.

734
00:39:32,800 --> 00:39:36,900
Now, I can't quite remember when they introduced this opengl to didn't

735
00:39:36,900 --> 00:39:40,200
have it but opengl 33, maybe had it.

736
00:39:42,800 --> 00:39:48,300
What they did is they said okay opengl 3 adds a ton of stuff,

737
00:39:48,300 --> 00:39:52,400
mandatorily like opengl 3 requires that you have a certain set of

738
00:39:52,400 --> 00:39:55,500
shading language is available in certain Shader stages and all this

739
00:39:55,500 --> 00:39:56,000
stuff.

740
00:39:56,300 --> 00:40:00,200
So opengl 3.0 requires a bunch of stuff, opengl 4.0 requires much

741
00:40:00,200 --> 00:40:02,100
stuff, which means that you don't have to query.

742
00:40:02,100 --> 00:40:04,800
Each extension piece mail to find out what you can use.

743
00:40:05,000 --> 00:40:07,300
You can just say are you opengl 3?

744
00:40:07,300 --> 00:40:10,200
If you are, I just assume that you have all this stuff and you better

745
00:40:10,200 --> 00:40:10,600
run.

746
00:40:11,200 --> 00:40:11,700
Right.

747
00:40:12,800 --> 00:40:14,200
So opengl 3

748
00:40:15,900 --> 00:40:21,200
There's a way we can query for an opengl three context and that opengl

749
00:40:21,200 --> 00:40:22,100
three context.

750
00:40:22,100 --> 00:40:24,800
If we get it, we know that we have everything that we might need and

751
00:40:24,800 --> 00:40:27,000
since almost everything that you're going to run on these days is an

752
00:40:27,000 --> 00:40:28,900
opengl three context or above.

753
00:40:30,100 --> 00:40:31,500
That's a pretty good idea.

754
00:40:32,900 --> 00:40:33,900
Do we need to do it?

755
00:40:33,900 --> 00:40:35,400
Not necessarily, but

756
00:40:36,400 --> 00:40:41,600
That same process that allows you to query for a more modern coal

757
00:40:41,600 --> 00:40:43,600
context, rather than querying extensions.

758
00:40:43,600 --> 00:40:49,200
Piece of mail that exact process actually allows you other options

759
00:40:49,200 --> 00:40:50,300
that you don't have.

760
00:40:50,300 --> 00:40:54,900
When you normally create a context, one of, which being the ability to

761
00:40:54,900 --> 00:40:58,600
create more than one context, so that you can use it on multiple

762
00:40:58,600 --> 00:41:00,500
threads and still have them.

763
00:41:00,500 --> 00:41:02,300
Share texture handles.

764
00:41:03,400 --> 00:41:07,300
And so, what you can do with that is you can actually use that to say,

765
00:41:07,300 --> 00:41:12,300
download textures on one thread while you run the game and render on

766
00:41:12,300 --> 00:41:14,500
another thread without those Khan.

767
00:41:14,500 --> 00:41:20,100
Those contexts fighting each other because I believe the actual

768
00:41:20,200 --> 00:41:24,300
requirement in opengl is that you are not allowed to use the same

769
00:41:24,400 --> 00:41:28,900
context on two threads at the same time, it's single-threaded that

770
00:41:28,900 --> 00:41:29,300
way.

771
00:41:29,600 --> 00:41:32,500
So if you want to use a context,

772
00:41:33,200 --> 00:41:35,900
In two different threads, you actually to make two different contexts.

773
00:41:37,800 --> 00:41:41,100
But if we make to context and we start sending textures down on one

774
00:41:41,100 --> 00:41:44,100
context and rendering on the other, if we have no way of telling

775
00:41:44,100 --> 00:41:47,700
opengl that they're sharing their texture handles, there's no way to

776
00:41:47,700 --> 00:41:49,000
actually benefit from that.

777
00:41:49,100 --> 00:41:51,600
Now, there are some ways you could do that in the old days but it was

778
00:41:51,600 --> 00:41:52,600
all kind of a hack.

779
00:41:52,800 --> 00:41:56,700
And so, what I'd like to do is go ahead and use the actual context,

780
00:41:56,700 --> 00:41:59,300
escalation stuff to sort of show.

781
00:41:59,300 --> 00:41:59,600
How

782
00:42:00,000 --> 00:42:04,100
Yet one of those open till three contexts and then we can use that

783
00:42:04,400 --> 00:42:08,200
when we need to next week finish off our base implementation of

784
00:42:08,200 --> 00:42:12,100
Hardware acceleration by downloading Textures in the background on a

785
00:42:12,100 --> 00:42:12,600
separate thread.

786
00:42:12,600 --> 00:42:15,500
That isn't the main thread just like we were loading our asset.

787
00:42:15,500 --> 00:42:18,500
So that's what we want to do, right?

788
00:42:20,000 --> 00:42:22,900
Okay, so let's let's do that.

789
00:42:23,300 --> 00:42:25,100
This is a win32 situation.

790
00:42:26,700 --> 00:42:30,800
Obviously because when we create the context, Truman 32, when we do,

791
00:42:30,800 --> 00:42:31,800
we will create context.

792
00:42:31,800 --> 00:42:34,300
Now, this is going to look like it's pure banana cakes.

793
00:42:34,300 --> 00:42:37,400
Again, like I said, this is because Hardware vendors don't have a lot

794
00:42:37,400 --> 00:42:37,900
of choices.

795
00:42:37,900 --> 00:42:41,100
Microsoft doesn't really help them out here.

796
00:42:41,100 --> 00:42:45,400
So I don't really know that you can blame and video or ATI for this

797
00:42:45,400 --> 00:42:46,000
sort of thing.

798
00:42:46,200 --> 00:42:51,100
I'm sorry, AMD, but when you call Regal create context, we will create

799
00:42:51,100 --> 00:42:51,700
context.

800
00:42:51,700 --> 00:42:54,600
As you can see, takes no, actual parameters.

801
00:42:55,300 --> 00:42:55,800
Right.

802
00:42:56,000 --> 00:42:57,700
It just creates a context.

803
00:42:57,700 --> 00:42:59,300
So by default, what it does.

804
00:42:59,300 --> 00:43:01,000
Is it creates a context?

805
00:43:01,000 --> 00:43:02,300
That's only requirement.

806
00:43:02,300 --> 00:43:07,200
Is that it at least support opengl like 1.1 or like I said, whatever

807
00:43:07,200 --> 00:43:09,200
that first version is that ships in here.

808
00:43:09,600 --> 00:43:10,000
Okay?

809
00:43:11,100 --> 00:43:14,900
So, opengl, like 1.1, or whatever is what it will give us back.

810
00:43:15,100 --> 00:43:19,100
If it has the capability of doing more, it will give us back more

811
00:43:19,100 --> 00:43:20,500
potentially, right?

812
00:43:20,700 --> 00:43:24,800
But we're not asking to require that so everything that we might want

813
00:43:24,800 --> 00:43:24,900
to.

814
00:43:25,100 --> 00:43:27,900
We have to query as extensions and that's just the name of the game,

815
00:43:28,000 --> 00:43:28,400
right?

816
00:43:29,800 --> 00:43:33,300
Okay, however, what you can do?

817
00:43:36,200 --> 00:43:40,400
Is use a extended opengl function again like I said everything's

818
00:43:40,400 --> 00:43:45,300
extensions because it has to be and it's called ARB create context.

819
00:43:45,700 --> 00:43:49,100
And what that extension does is it allows you to call a new thing

820
00:43:49,900 --> 00:43:53,700
where instead of just asking for a contact in general, that's

821
00:43:53,700 --> 00:43:54,400
arbitrary.

822
00:43:55,400 --> 00:43:59,800
What you can do instead is request a specific set of features for your

823
00:43:59,800 --> 00:44:03,400
context that it must have and those are set.

824
00:44:03,400 --> 00:44:05,100
I don't even know where they're listed here.

825
00:44:05,500 --> 00:44:05,900
Here they are.

826
00:44:06,600 --> 00:44:10,500
You can require a specific major version, a specific minor version,

827
00:44:11,400 --> 00:44:12,700
certain other aspects.

828
00:44:12,700 --> 00:44:17,400
Like for example I there's a bunch of flags we could set and those are

829
00:44:17,400 --> 00:44:20,700
like whether we want them to be debug compatible whether we want them

830
00:44:20,700 --> 00:44:22,300
before we're compatible right?

831
00:44:22,300 --> 00:44:25,700
Whether we want them to be core compatible things like this can be set

832
00:44:25,700 --> 00:44:28,300
in here and these are basically things.

833
00:44:28,300 --> 00:44:31,800
Which control what kind of context we expect to get back?

834
00:44:34,700 --> 00:44:39,900
So, if we want to do this, what we need to do is get a handle to this

835
00:44:39,900 --> 00:44:41,800
wiggle, create context that ribs function.

836
00:44:42,100 --> 00:44:44,300
And then we need to call it, okay?

837
00:44:44,800 --> 00:44:46,800
And we've already seen exactly how to do this.

838
00:44:46,800 --> 00:44:48,500
So, this should not be a mystery to you.

839
00:44:48,900 --> 00:44:50,400
We already know exactly how it works.

840
00:44:50,400 --> 00:44:53,000
Gets the same as what happens here, right?

841
00:44:53,000 --> 00:44:54,000
All we need to make.

842
00:44:54,000 --> 00:44:58,600
This happen is a typedef of what we expect, the functor should be

843
00:44:58,600 --> 00:44:59,800
since he knows how to call it.

844
00:45:00,500 --> 00:45:02,200
And then we need just somewhere to put it.

845
00:45:02,400 --> 00:45:04,700
We don't really need to keep it in a global variable because we're

846
00:45:04,700 --> 00:45:06,900
never going to call this function other than a start-up time.

847
00:45:07,200 --> 00:45:12,200
So we can just say this wiggle kind of at ribs are that we call once,

848
00:45:13,100 --> 00:45:13,300
right?

849
00:45:13,300 --> 00:45:17,300
So we can take this guy and we can we can call them just one time.

850
00:45:22,500 --> 00:45:22,900
All right.

851
00:45:23,900 --> 00:45:26,100
So let's go ahead and do that.

852
00:45:26,200 --> 00:45:30,200
Remember like I said, this is totally something is exactly just going

853
00:45:30,200 --> 00:45:30,800
to do.

854
00:45:33,000 --> 00:45:34,500
The same exact thing we already did.

855
00:45:34,500 --> 00:45:37,600
So there's absolutely nothing bizarre going on here.

856
00:45:37,900 --> 00:45:40,600
You can see how we did, this will get Brock address but we're going to

857
00:45:40,600 --> 00:45:41,700
do that exact same thing.

858
00:45:42,100 --> 00:45:43,000
So here we are.

859
00:45:43,400 --> 00:45:45,300
Only I'm going to put this above the in it actually.

860
00:45:46,100 --> 00:45:46,700
So we can do this.

861
00:45:46,700 --> 00:45:48,100
We will create context of trips are.

862
00:45:48,100 --> 00:45:51,800
We could say, hey, let's see whether or not this thing exists.

863
00:45:51,800 --> 00:45:55,000
So I'll say again exactly the same thing as here.

864
00:45:55,600 --> 00:45:56,600
No change.

865
00:45:56,700 --> 00:45:59,900
The only difference is now we're going to use will create, contexts

866
00:45:59,900 --> 00:46:01,100
are as the function.

867
00:46:05,100 --> 00:46:06,300
If that comes back.

868
00:46:07,800 --> 00:46:11,600
then we now know that we are in, you know, this is

869
00:46:16,200 --> 00:46:19,100
Or I should say a modern version of open of gel.

870
00:46:19,300 --> 00:46:20,400
Whereas here it would be

871
00:46:21,900 --> 00:46:23,500
This is an antiquated.

872
00:46:24,400 --> 00:46:25,400
Version of opengl.

873
00:46:26,900 --> 00:46:31,400
Okay, so in the modern version of opengl, what we can now do is we can

874
00:46:31,400 --> 00:46:32,200
call this

875
00:46:34,100 --> 00:46:37,500
Function to get what we actually want.

876
00:46:37,500 --> 00:46:39,300
And again, we pass Pace with the same things.

877
00:46:39,300 --> 00:46:43,600
We pass window DC, we do a share context, right?

878
00:46:43,600 --> 00:46:46,100
And a share contact is actually pretty important.

879
00:46:47,000 --> 00:46:50,500
We don't need to use it yet, if that makes sense.

880
00:46:50,900 --> 00:46:53,900
And the reason we don't need to use it yet is because like I said,

881
00:46:53,900 --> 00:46:57,200
we're not actually creating a second context for texture downloads but

882
00:46:57,200 --> 00:47:01,900
that's exactly what that's going to do like what we can do now, it's

883
00:47:01,900 --> 00:47:02,700
in a way that we

884
00:47:02,800 --> 00:47:05,000
Couldn't before we create a context is passed.

885
00:47:05,000 --> 00:47:08,900
Some other context that we want to be able to share all of our data

886
00:47:08,900 --> 00:47:11,200
with which is exactly what I said we wanted.

887
00:47:11,200 --> 00:47:14,600
And the whole reason why we probably really want to use the modern

888
00:47:14,600 --> 00:47:16,000
contexts, right?

889
00:47:16,800 --> 00:47:18,000
So we don't actually need to shortcuts.

890
00:47:18,000 --> 00:47:18,600
That's fine.

891
00:47:18,800 --> 00:47:22,300
But we do need to use those at ribs and those at ribs are basically

892
00:47:22,300 --> 00:47:25,400
just like a list of pointers to it's right?

893
00:47:25,400 --> 00:47:26,900
So it's basically this

894
00:47:29,600 --> 00:47:31,000
Just a big old list of events.

895
00:47:32,700 --> 00:47:35,100
And then the inst describe, what actually has to happen.

896
00:47:35,100 --> 00:47:37,600
Now, we need all of these guys, right?

897
00:47:37,600 --> 00:47:40,200
We need all of these guys to be defined and they're not defined right

898
00:47:40,200 --> 00:47:40,600
now.

899
00:47:41,600 --> 00:47:46,200
And so what we want to do is in opengl in our inner opengl thing, we

900
00:47:46,200 --> 00:47:48,900
want it sort of a window specific area.

901
00:47:52,100 --> 00:47:54,000
And it's, we don't have to isolate these.

902
00:47:54,000 --> 00:47:56,700
These don't have to be isolated because there's no harm in defining

903
00:47:56,900 --> 00:47:58,800
the windows things here, right?

904
00:47:59,200 --> 00:47:59,800
They can we

905
00:48:00,000 --> 00:48:01,500
To find the Windows 10, the Apple.

906
00:48:01,500 --> 00:48:03,900
Once your we can Define everything because they're just pound to fines

907
00:48:04,300 --> 00:48:08,100
that are just generally true and and we just would never touch that.

908
00:48:08,100 --> 00:48:14,900
We never actually use those right on the on other platforms.

909
00:48:15,400 --> 00:48:16,300
So that's totally fine.

910
00:48:17,400 --> 00:48:20,300
So then in this at ribs these come in pairs, right?

911
00:48:20,400 --> 00:48:23,200
So we can say is like oh we want to Major version we'd like our major

912
00:48:23,200 --> 00:48:24,900
inversion to be at least three.

913
00:48:25,300 --> 00:48:29,200
We want our my minor version to at least before I don't know what a

914
00:48:29,200 --> 00:48:33,700
layer plane ARB even is so I'm going to look that up because I don't

915
00:48:33,700 --> 00:48:35,100
think I've ever asked for that.

916
00:48:36,900 --> 00:48:39,300
The layer plane to the render cost is bound to the attribute.

917
00:48:39,300 --> 00:48:41,200
Value has the same meaning and allowed values.

918
00:48:41,200 --> 00:48:44,000
Is the layer playing parameter of will create content layer, conducts?

919
00:48:44,100 --> 00:48:44,900
What is this?

920
00:48:45,200 --> 00:48:46,400
I don't even know what that is.

921
00:48:53,700 --> 00:48:57,000
It's looks like it just if I want to if I have a display that supports

922
00:48:57,000 --> 00:49:00,700
multiple planes that are maybe we combined it Hardware time.

923
00:49:00,700 --> 00:49:03,800
Yes, this is just for overlays which we don't care about at all.

924
00:49:03,800 --> 00:49:05,400
So we don't even need to specify that.

925
00:49:05,400 --> 00:49:07,600
I don't think we can just skip that bit entirely.

926
00:49:08,100 --> 00:49:09,800
So, what we need our flags though.

927
00:49:11,500 --> 00:49:12,700
Let's put some Flags in there.

928
00:49:12,700 --> 00:49:16,600
Oops, put some Flags in there are flags are, whether we want

929
00:49:16,600 --> 00:49:20,000
debugging, and whether we want forward compatibility, I assume for

930
00:49:20,000 --> 00:49:23,100
compatibility means, should you give us access to more stuff?

931
00:49:23,100 --> 00:49:25,100
I think the answer there is probably always, yes.

932
00:49:25,300 --> 00:49:26,600
And do we want debug?

933
00:49:26,800 --> 00:49:31,700
Well, probably, if we're in debug mode, we would want debug, right?

934
00:49:32,000 --> 00:49:37,000
So probably we'd want something like will always take forward

935
00:49:37,000 --> 00:49:37,800
compatibility.

936
00:49:37,800 --> 00:49:41,000
If you've got it and then,

937
00:49:41,500 --> 00:49:45,700
Maybe we'll do this or maybe we won't, right?

938
00:49:45,800 --> 00:49:50,300
So we could do something like handmade internal will ask for a debug

939
00:49:50,700 --> 00:49:54,500
guy, otherwise not probably, right.

940
00:49:55,100 --> 00:49:59,500
And then we've got our profile mask and the profile.

941
00:49:59,500 --> 00:50:03,900
Mask is just specified as whether we want core or compatibility right

942
00:50:03,900 --> 00:50:07,100
now, we're going to want compatibility and the reason for that is

943
00:50:07,100 --> 00:50:11,100
because technically the functions that we used like if we

944
00:50:11,200 --> 00:50:17,600
Go over here to our handmade opengl that CP the fixed function

945
00:50:17,600 --> 00:50:18,100
pipeline.

946
00:50:18,100 --> 00:50:20,000
Remember, I said we're gonna start with a fixed function pipeline,

947
00:50:20,100 --> 00:50:21,000
which I showed you here.

948
00:50:21,800 --> 00:50:26,000
The fixed function pipeline doesn't exist in modern versions of

949
00:50:26,000 --> 00:50:26,800
opengl.

950
00:50:26,800 --> 00:50:28,800
They got rid of it, everything goes through shaders.

951
00:50:29,000 --> 00:50:31,000
So you have to just write dummy shaders.

952
00:50:31,000 --> 00:50:33,400
If all you wanted was the fixed function stuff, you still have to

953
00:50:33,400 --> 00:50:34,100
write little dummy.

954
00:50:34,100 --> 00:50:34,400
Shaders.

955
00:50:34,400 --> 00:50:38,100
That just don't do anything, but they still to be there, right?

956
00:50:38,900 --> 00:50:41,100
And so we want a compatibility profile because what

957
00:50:41,300 --> 00:50:45,600
It says is hey don't give me only the 3.0 stuff.

958
00:50:45,700 --> 00:50:48,400
Give me the old stuff as well so I can use it.

959
00:50:48,400 --> 00:50:50,500
Now, that's not guaranteed to succeed.

960
00:50:51,700 --> 00:50:54,500
A implementation doesn't have to support the all things, which is why

961
00:50:54,500 --> 00:50:58,300
I said, eventually we want to just move away from it and not call the

962
00:50:58,300 --> 00:50:59,400
fixed function anymore.

963
00:51:00,500 --> 00:51:02,300
I just wanted to show you how to do that, because that was the

964
00:51:02,300 --> 00:51:05,500
original opengl in the modern opengl.

965
00:51:05,500 --> 00:51:06,900
It's really not that much different.

966
00:51:06,900 --> 00:51:09,300
It's, you know, you can still understand it pretty easily if you see

967
00:51:09,300 --> 00:51:09,600
this stuff.

968
00:51:09,600 --> 00:51:13,700
But again, some of the stuff goes away, we'll want to remove that as

969
00:51:13,700 --> 00:51:16,400
we move to shaders, which we want to do anyway, because we're going to

970
00:51:16,400 --> 00:51:19,400
have a couple special effects and kind of things that probably want

971
00:51:19,700 --> 00:51:23,200
the ability to reach in there and muck with exactly what's happening

972
00:51:23,200 --> 00:51:23,800
in the shaders.

973
00:51:23,900 --> 00:51:27,200
We would probably not want the fixed function pipeline to be.

974
00:51:27,200 --> 00:51:29,700
The only thing we have access to, anyway, so that's

975
00:51:30,300 --> 00:51:31,500
A hassle in any way.

976
00:51:31,500 --> 00:51:35,500
We're, we would have had to do that work, regardless, if that makes

977
00:51:35,500 --> 00:51:35,900
sense.

978
00:51:36,100 --> 00:51:40,900
It's just, you know, once, you know, one step at a time, so I think

979
00:51:40,900 --> 00:51:41,800
this is everything.

980
00:51:41,800 --> 00:51:46,700
I believe the way you end, this is by terminating it with a zero, but

981
00:51:46,700 --> 00:51:47,600
let me see.

982
00:51:53,800 --> 00:51:56,200
The list consists of a sequence of name, value pairs terminated by the

983
00:51:56,200 --> 00:51:57,100
value 0.

984
00:51:57,700 --> 00:51:58,700
So that's what we want.

985
00:51:58,700 --> 00:52:01,400
So there's our at ribs, here's our context call.

986
00:52:03,400 --> 00:52:05,100
And here's our modern context.

987
00:52:05,600 --> 00:52:08,300
And then in here we can say, like, okay, if we were able to get a

988
00:52:08,300 --> 00:52:12,200
modern context, then let's go ahead and switch to the modern context.

989
00:52:14,200 --> 00:52:14,700
Right.

990
00:52:14,800 --> 00:52:18,800
And we can even delete our old context, right?

991
00:52:18,800 --> 00:52:23,100
We can get rid of our of our opengl RC

992
00:52:24,300 --> 00:52:24,700
Right.

993
00:52:33,900 --> 00:52:35,400
So we can just straight-up swap them.

994
00:52:35,800 --> 00:52:37,700
And so this is why I called it.

995
00:52:37,700 --> 00:52:41,900
You'll notice the thing that I said originally was like, hey it's it's

996
00:52:41,900 --> 00:52:45,200
like escalation the reason I called it context exhalation was

997
00:52:45,200 --> 00:52:49,500
specifically because in order to call wiggle get proc address, you had

998
00:52:49,500 --> 00:52:50,900
to have created a context.

999
00:52:50,900 --> 00:52:57,100
First, you can't actually call wiggle create context of trips are,

1000
00:52:57,100 --> 00:53:01,400
until you've made an existing opengl context of version 1.

1001
00:53:01,600 --> 00:53:03,200
So you basically have to like, say I'm

1002
00:53:03,500 --> 00:53:04,400
In my opinion, your stuff.

1003
00:53:04,400 --> 00:53:07,500
So the driver can get up and going, then you say, hey, by the way, are

1004
00:53:07,500 --> 00:53:08,400
you a new one?

1005
00:53:08,700 --> 00:53:12,000
I know like, Microsoft doesn't want opengl to succeed, so they didn't

1006
00:53:12,000 --> 00:53:14,400
actually bother to make a good way to do that, but hey, could you give

1007
00:53:14,400 --> 00:53:16,800
one to me and they're like, yes, right?

1008
00:53:17,100 --> 00:53:21,800
And so you do that and then you try to create one, if it succeeds.

1009
00:53:21,800 --> 00:53:24,500
Now you can switch up to the modern version.

1010
00:53:26,000 --> 00:53:26,600
Makes sense.

1011
00:53:27,900 --> 00:53:30,200
So that's how you do that.

1012
00:53:31,500 --> 00:53:34,700
Oops, that's an S60 for, that's how you do that.

1013
00:53:35,300 --> 00:53:37,700
And so let's see if it works, right?

1014
00:53:37,700 --> 00:53:40,000
Because again like I said, all this stuff is kind of a little touchy

1015
00:53:40,000 --> 00:53:41,900
so you know, maybe I forgot something.

1016
00:53:43,700 --> 00:53:47,900
You'll note, I do all this stuff kind of from memory and you know I'm

1017
00:53:47,900 --> 00:53:48,500
old.

1018
00:53:49,300 --> 00:53:54,500
So anyway where is my opengl went through to and it opengl here it is.

1019
00:53:55,100 --> 00:53:55,900
So here we go.

1020
00:53:55,900 --> 00:53:59,300
Let's step in here and we're going to ask to see if we can get our

1021
00:53:59,300 --> 00:53:59,800
contract.

1022
00:54:00,000 --> 00:54:00,900
Trip art function.

1023
00:54:00,900 --> 00:54:04,100
You can notice that we did get that, right?

1024
00:54:04,500 --> 00:54:08,000
And I point out something else interesting about this because this is

1025
00:54:08,000 --> 00:54:11,500
some stuff that people were sort of asking about the the drivers to.

1026
00:54:11,500 --> 00:54:12,500
Oops, that's not what I want.

1027
00:54:16,800 --> 00:54:18,200
So, you can see.

1028
00:54:19,900 --> 00:54:25,100
If we inspect this value note, where it's pointing its pointing into

1029
00:54:25,100 --> 00:54:29,200
the ATI driver, right?

1030
00:54:29,400 --> 00:54:35,100
So when we are making these function calls, we're not going into a

1031
00:54:35,100 --> 00:54:36,600
library, right?

1032
00:54:36,600 --> 00:54:39,800
This is what I was kind of try to explain before when you link with

1033
00:54:39,800 --> 00:54:42,300
the opengl library, you're not really linking with a library.

1034
00:54:42,400 --> 00:54:46,300
You're just connecting yourself with the actual driver.

1035
00:54:46,400 --> 00:54:48,500
That's doing the work, right?

1036
00:54:48,500 --> 00:54:49,400
That's actually what's

1037
00:54:50,800 --> 00:54:54,400
and so in this case, we've asked for a function and now we're, you

1038
00:54:54,400 --> 00:54:58,800
know, we're, we're basically calling directly into it because unlike

1039
00:54:58,800 --> 00:55:02,600
when we link with the library and it uses an actual import table,

1040
00:55:04,400 --> 00:55:06,600
we're actually getting the thing back directly ourselves.

1041
00:55:06,600 --> 00:55:10,200
And so now we call into it via pointer, instead of it, patching up our

1042
00:55:10,600 --> 00:55:11,600
code, right?

1043
00:55:12,900 --> 00:55:16,000
So we get that now we know we can call it.

1044
00:55:16,300 --> 00:55:19,600
So we create our list of attributes which you know, is everything that

1045
00:55:19,600 --> 00:55:21,900
we might want there.

1046
00:55:22,400 --> 00:55:25,500
And then we come through and we can call create context of trips Barb.

1047
00:55:25,700 --> 00:55:28,200
You can do it that took a while, that's because now, the HCI driver is

1048
00:55:28,200 --> 00:55:29,700
going off going, okay?

1049
00:55:29,700 --> 00:55:34,000
All right, let me get all that stuff set up for you and then we got

1050
00:55:34,000 --> 00:55:37,100
back a context so it worked so that's good.

1051
00:55:37,400 --> 00:55:41,400
Which means we can escalate we're now on opengl 3.0 which is fine.

1052
00:55:41,600 --> 00:55:42,300
We can delete our

1053
00:55:42,500 --> 00:55:44,100
Context and off we go.

1054
00:55:44,700 --> 00:55:47,000
So now we're actually running in opengl 3.0.

1055
00:55:47,600 --> 00:55:51,000
What that means is that these are actually Superfluous calls because I

1056
00:55:51,000 --> 00:55:54,000
believe all this stuff is required in opengl 3.0.

1057
00:55:54,200 --> 00:55:56,700
I don't think you can, I don't we don't really need to check this

1058
00:55:56,700 --> 00:56:00,000
actions but we might as well because this allows us to run on older

1059
00:56:00,000 --> 00:56:02,900
Hardware even than 3.0 if we wanted to so there's no real reason to

1060
00:56:02,900 --> 00:56:04,200
get rid of it, right?

1061
00:56:04,600 --> 00:56:07,000
It just gives us a little extra layer potentially a backwards

1062
00:56:07,000 --> 00:56:07,900
compatibility.

1063
00:56:10,000 --> 00:56:15,200
So yeah, unfortunately from what I can see here when we're on the

1064
00:56:15,200 --> 00:56:22,700
modern 3.0 it looks like it doesn't want to let us use the old

1065
00:56:22,700 --> 00:56:24,300
compatibility stuff, right?

1066
00:56:24,400 --> 00:56:26,800
It looks like we're not getting any rendering there and the only

1067
00:56:26,800 --> 00:56:31,300
difference was that we asked for a 3.0 context so I'm guessing that we

1068
00:56:31,300 --> 00:56:35,100
didn't actually get back a compatibility profile.

1069
00:56:35,600 --> 00:56:36,200
Maybe

1070
00:56:38,700 --> 00:56:45,700
We asked for one, we asked for one right here, but we didn't get one.

1071
00:56:45,900 --> 00:56:48,300
I'm curious to know I'm going to try.

1072
00:56:49,000 --> 00:56:51,200
I want to try without this guy.

1073
00:56:52,700 --> 00:56:56,300
But I'm curious to know why that didn't work, but we're doing

1074
00:56:56,300 --> 00:56:59,800
something that the 3.0 context like doesn't like, right.

1075
00:57:00,000 --> 00:57:01,600
So okay, so it's the for capital B.

1076
00:57:01,600 --> 00:57:02,500
Let me go read.

1077
00:57:02,500 --> 00:57:06,300
What that does I must have misunderstood what the forward compatible

1078
00:57:06,300 --> 00:57:06,700
bit?

1079
00:57:06,700 --> 00:57:10,100
Is it probably prevents you from doing anything that's going to get

1080
00:57:10,100 --> 00:57:11,600
removed or something like that.

1081
00:57:11,900 --> 00:57:12,800
Let's take a look.

1082
00:57:20,800 --> 00:57:21,800
So, there it is.

1083
00:57:25,600 --> 00:57:28,300
If the wiggle context for it can pedal a bit are beset in wiggle

1084
00:57:28,300 --> 00:57:31,200
context, flags are been a fork and pedal contacts will be created for

1085
00:57:31,200 --> 00:57:34,100
Cabella costs are defined only for opengl version 2.0 later, they must

1086
00:57:34,100 --> 00:57:36,900
not support functionality marked as deprecated.

1087
00:57:38,000 --> 00:57:41,900
okay, so basically what we want to do is we don't want to actually

1088
00:57:41,900 --> 00:57:43,000
specify this

1089
00:57:45,600 --> 00:57:48,400
Probably at all actually, but we might want to do it for testing,

1090
00:57:48,700 --> 00:57:49,200
right?

1091
00:57:53,900 --> 00:57:54,800
If that makes sense.

1092
00:57:56,500 --> 00:57:58,600
So I think that's everything we want to do.

1093
00:57:59,600 --> 00:58:05,200
So I'm going to go ahead and call that the end of the screen because

1094
00:58:05,200 --> 00:58:06,500
now we have that profile.

1095
00:58:06,500 --> 00:58:09,200
And so now once you have that, this means you can use shaders.

1096
00:58:09,500 --> 00:58:11,200
You don't have to query even and extensions for them.

1097
00:58:11,200 --> 00:58:14,900
You can just straight-up use shaders and and that will tell you what's

1098
00:58:14,900 --> 00:58:15,500
going on.

1099
00:58:15,700 --> 00:58:21,200
Now, what also will work there as well, is we could now if we wanted

1100
00:58:21,200 --> 00:58:23,500
to, we could query the shading language

1101
00:58:23,700 --> 00:58:24,900
Version as well.

1102
00:58:25,400 --> 00:58:28,900
The only problem is, we have to go to find that string.

1103
00:58:28,900 --> 00:58:35,300
We have to Define GL shading, language version and we could actually

1104
00:58:35,300 --> 00:58:36,900
do that now, right?

1105
00:58:36,900 --> 00:58:42,600
So we could say, let's see where that's actually to find somewhere.

1106
00:58:49,500 --> 00:58:50,100
I don't know where.

1107
00:58:51,200 --> 00:58:52,000
I've no idea where

1108
00:58:53,300 --> 00:58:54,900
tell me what the value is.

1109
00:59:00,800 --> 00:59:03,500
0x something fine.

1110
00:59:07,300 --> 00:59:10,100
I did this the other time do it again.

1111
00:59:19,500 --> 00:59:21,000
Where did I had it the other day?

1112
00:59:21,600 --> 00:59:23,500
Opengl extensions.

1113
00:59:23,500 --> 00:59:24,300
Header file.

1114
00:59:25,800 --> 00:59:26,600
Where did it go?

1115
00:59:28,600 --> 00:59:31,400
Because in one of the it was in one of these but I got guy jumped

1116
00:59:31,400 --> 00:59:34,900
right to it before and now it's like mr.

1117
00:59:34,900 --> 00:59:36,800
Doesn't want to do that for me.

1118
00:59:38,700 --> 00:59:39,800
There it is.

1119
00:59:40,200 --> 00:59:44,800
Core ARB shading language version.

1120
00:59:47,800 --> 00:59:51,500
And so the question that I have and I don't really know if it's true

1121
00:59:51,500 --> 00:59:53,600
or not but I guess.

1122
00:59:55,700 --> 00:59:58,500
I guess we don't want to do this unless we know for sure that we've

1123
00:59:58,500 --> 00:59:59,500
got a more

1124
01:00:00,000 --> 01:00:04,000
In context, right?

1125
01:00:04,600 --> 01:00:07,700
So what I might say is inside here, right?

1126
01:00:07,700 --> 01:00:09,000
Will Define the sky.

1127
01:00:10,100 --> 01:00:14,000
GL shading language version, so that we can call this, but maybe what

1128
01:00:14,000 --> 01:00:15,900
I'll do is something like this.

1129
01:00:25,600 --> 01:00:29,600
So that I know that I'm only asking because I don't know which

1130
01:00:29,600 --> 01:00:31,100
versions that would be allowed.

1131
01:00:31,100 --> 01:00:35,100
We could query an extension for it and then asked but I feel like this

1132
01:00:35,100 --> 01:00:36,900
is probably safer, right?

1133
01:00:39,600 --> 01:00:43,500
And maybe I'll do a thing where we just say modern context is actually

1134
01:00:43,500 --> 01:00:44,800
in here as well.

1135
01:00:48,400 --> 01:00:49,900
so that way, we'll say,

1136
01:00:57,400 --> 01:00:59,600
This will be something we actually pass through.

1137
01:01:04,300 --> 01:01:04,800
Right.

1138
01:01:05,300 --> 01:01:08,800
And we could add another layer of security here, potentially something

1139
01:01:08,800 --> 01:01:11,400
like this just in case that that fails

1140
01:01:12,700 --> 01:01:14,600
we could do it only if that actually worked

1141
01:01:16,100 --> 01:01:18,900
opengl get info.

1142
01:01:20,100 --> 01:01:23,400
Actually needs to pass this context.

1143
01:01:27,700 --> 01:01:30,700
And so now we should be able to see the shading language version as

1144
01:01:30,700 --> 01:01:31,100
well.

1145
01:01:31,700 --> 01:01:37,800
So when we jump in here, at least in theory, when we call that our

1146
01:01:37,800 --> 01:01:39,800
result is,

1147
01:01:41,700 --> 01:01:42,300
Is it tell us?

1148
01:01:42,300 --> 01:01:46,200
So opengl 3.3 is the latest I'm sorry.

1149
01:01:46,400 --> 01:01:50,800
Glsl 3.3 is the latest shading language.

1150
01:01:50,800 --> 01:01:52,800
We'd be allowed to use right?

1151
01:01:52,900 --> 01:01:54,300
There is later shading languages.

1152
01:01:54,300 --> 01:01:57,900
There's a, there's a shading language for and and we can't call it on

1153
01:01:57,900 --> 01:02:00,700
this graph screen because it grabs cards from like 2010 is pretty old

1154
01:02:00,900 --> 01:02:01,700
at this point.

1155
01:02:03,300 --> 01:02:03,900
So there you go.

1156
01:02:05,400 --> 01:02:06,100
That's it.

1157
01:02:06,600 --> 01:02:07,400
That's how you do that.

1158
01:02:07,400 --> 01:02:08,100
Start up.

1159
01:02:08,300 --> 01:02:10,800
So hopefully now everyone's got that under their belt.

1160
01:02:11,500 --> 01:02:17,100
This is happy and great and so we can go to the Q&A for a little

1161
01:02:17,100 --> 01:02:17,300
while.

1162
01:02:17,300 --> 01:02:20,800
We got about 11 minutes left.

1163
01:02:21,000 --> 01:02:24,200
So if you got questions, let me know what they are.

1164
01:02:47,000 --> 01:02:49,500
Icarus looking at win XP and cards.

1165
01:02:49,500 --> 01:02:51,300
Looks like they need GL 2.0.

1166
01:02:51,300 --> 01:02:55,700
As the max that can support more or less if you use Tiara cards.

1167
01:02:57,700 --> 01:02:59,200
Yeah, I would suspect.

1168
01:02:59,200 --> 01:02:59,700
I mean,

1169
01:03:00,100 --> 01:03:05,800
Going like I said, back all the way GL 1.0 I think or maybe 1.1

1170
01:03:06,000 --> 01:03:08,600
something like that was what was originally in Windows?

1171
01:03:10,700 --> 01:03:12,700
By the time when XP came around, I would.

1172
01:03:12,700 --> 01:03:13,000
Yeah.

1173
01:03:13,000 --> 01:03:16,600
I'd be pretty surprised if there was anyone who wasn't at least 2.0,

1174
01:03:17,400 --> 01:03:18,000
but I don't know.

1175
01:03:23,600 --> 01:03:25,000
In the function opens you'll get info.

1176
01:03:25,000 --> 01:03:30,400
Why do you do an if 0 else end if rather than just commenting it out?

1177
01:03:36,000 --> 01:03:37,100
I'm not sure what you're talking about.

1178
01:03:37,100 --> 01:03:38,000
Do you mean this thing?

1179
01:03:38,500 --> 01:03:41,300
It was because I wanted to keep both cases and for the very slick,

1180
01:03:41,300 --> 01:03:43,500
reason of, as you noticed, I eventually turned it into a real.

1181
01:03:43,500 --> 01:03:46,200
If is that what you're talking about?

1182
01:03:47,200 --> 01:03:47,800
Not sure.

1183
01:03:53,800 --> 01:03:54,200
Let's see.

1184
01:03:54,200 --> 01:03:55,600
It's a far as for srgb.

1185
01:03:55,600 --> 01:04:01,700
Do you have also have to set wiggle frame, buffer, srgb capable ARB

1186
01:04:01,700 --> 01:04:03,600
when you choose the pixel format?

1187
01:04:03,700 --> 01:04:05,600
Or is that something different?

1188
01:04:06,700 --> 01:04:12,000
You know, I have that exact same question and I do not remember

1189
01:04:14,800 --> 01:04:20,600
I really don't know and the documentation is so crappy like that

1190
01:04:20,600 --> 01:04:25,000
should be pretty much obvious whether you have to do that or not, but

1191
01:04:25,000 --> 01:04:32,000
unfortunately, it's like not that obvious so we could try to figure it

1192
01:04:32,000 --> 01:04:32,700
out.

1193
01:04:34,400 --> 01:04:38,600
obviously, it's pretty easy for us to set that, but

1194
01:04:43,300 --> 01:04:44,100
Capable car.

1195
01:04:44,300 --> 01:04:44,900
Let's see.

1196
01:04:58,000 --> 01:05:01,700
this, this guy is pretty uninspiring as a

1197
01:05:06,700 --> 01:05:08,100
Actually, it's not what I want.

1198
01:05:08,100 --> 01:05:11,000
Wiggle frame, buffer srgb.

1199
01:05:13,100 --> 01:05:16,200
Accepted by the pi r, choose parameter of Wiggle, get pixel format, a

1200
01:05:16,200 --> 01:05:21,500
trip, VX We Go, premium will choose wiggle, choose pixel format EXT,

1201
01:05:22,700 --> 01:05:24,800
accepted by the cap parameter.

1202
01:05:25,300 --> 01:05:29,600
So if we wanted to call wiggle, choose pixel format EXT.

1203
01:05:31,600 --> 01:05:34,400
Maybe that would be the place where we could do that.

1204
01:05:36,600 --> 01:05:38,200
So, here's wiggle, X pixel format.

1205
01:05:38,300 --> 01:05:41,500
This is that's functions to query pixel format attributes and to

1206
01:05:41,500 --> 01:05:43,900
choose from a list of pixel formats supported by a device.

1207
01:05:44,800 --> 01:05:48,600
So here's some extra ones that allow us to say other things.

1208
01:05:49,300 --> 01:05:53,200
So like yeah, you can see

1209
01:05:54,500 --> 01:05:55,600
There's a bunch of stuff.

1210
01:05:56,600 --> 01:05:59,400
Overlays underlays swap methods.

1211
01:06:00,100 --> 01:06:00,700
um,

1212
01:06:03,000 --> 01:06:05,500
so the question is, do we need it?

1213
01:06:07,000 --> 01:06:09,700
And I don't know.

1214
01:06:11,200 --> 01:06:12,500
I'm not sure.

1215
01:06:14,000 --> 01:06:15,000
Let's see.

1216
01:06:22,800 --> 01:06:23,900
Components.

1217
01:06:26,000 --> 01:06:26,800
Let's see.

1218
01:06:27,500 --> 01:06:28,200
This is working.

1219
01:06:28,200 --> 01:06:29,900
Boots are taken to be fixed Point values.

1220
01:06:29,900 --> 01:06:32,900
Yep, if framebuffer srgb is enabled and the value of Fame of

1221
01:06:32,900 --> 01:06:35,100
attachment color, encoding for the frame buffer Testament, correspond

1222
01:06:35,100 --> 01:06:35,700
to The Coasters.

1223
01:06:35,700 --> 01:06:36,600
Srgb.

1224
01:06:38,700 --> 01:06:40,500
so, I'm gonna have to say,

1225
01:06:45,000 --> 01:06:46,300
I'm gonna have to say possibly?

1226
01:06:46,300 --> 01:06:46,900
Yes.

1227
01:06:49,500 --> 01:06:50,600
Face on that sentence.

1228
01:07:05,900 --> 01:07:08,000
because the way I read that,

1229
01:07:09,100 --> 01:07:15,600
Is is saying that if frame before srgb, is on only if the actual frame

1230
01:07:15,600 --> 01:07:19,500
buffer that you're using is marked as srgb.

1231
01:07:20,900 --> 01:07:22,200
And ours won't be.

1232
01:07:22,200 --> 01:07:23,800
Unless we specify that

1233
01:07:25,000 --> 01:07:31,000
Which would mean I think in order to get it actually working, which we

1234
01:07:31,000 --> 01:07:34,000
think we do want to do, because our textures will be right, but our

1235
01:07:34,000 --> 01:07:37,400
frame, buffer would still be potentially wrong weight.

1236
01:07:38,400 --> 01:07:39,200
It

1237
01:07:42,500 --> 01:07:43,300
the thing is,

1238
01:07:47,300 --> 01:07:51,200
I guess well no we want it basically just gives us another level of

1239
01:07:51,200 --> 01:07:52,500
accuracy, right?

1240
01:07:52,500 --> 01:07:55,000
Instead of treating the frame buffer as linear all the time.

1241
01:07:55,200 --> 01:07:58,900
So around the outer edges, it's going to be really subtle but it would

1242
01:07:58,900 --> 01:07:59,300
matter.

1243
01:07:59,800 --> 01:08:01,300
It could, it could it would actually matter.

1244
01:08:01,800 --> 01:08:04,700
So, I think what we would want to do is, we'd have to do the wiggle,

1245
01:08:06,200 --> 01:08:08,700
the extended pixel format, right?

1246
01:08:08,700 --> 01:08:11,700
We want wiggle, choose pixel format.

1247
01:08:14,200 --> 01:08:16,000
Something like this, right?

1248
01:08:16,100 --> 01:08:18,800
I think we'd want to actually call whistle wiggle, choose pixel,

1249
01:08:18,800 --> 01:08:21,500
format arm, and I think we want to do it.

1250
01:08:21,500 --> 01:08:23,000
So we want to do that on Monday.

1251
01:08:26,300 --> 01:08:29,500
Because yeah, I think the only way we can actually ask for that is

1252
01:08:29,500 --> 01:08:32,100
through this, I don't think we could set it using the choose pixel

1253
01:08:32,100 --> 01:08:33,600
function that we're currently using.

1254
01:08:36,100 --> 01:08:41,899
Maybe I'll have to do because I do think we want that and it does

1255
01:08:41,899 --> 01:08:44,500
sound like from reading the extension that it won't work.

1256
01:08:46,800 --> 01:08:47,800
That's what it sounds like.

1257
01:09:11,100 --> 01:09:13,200
May I ask you a question mark because I guess we're not really so sure

1258
01:09:13,200 --> 01:09:13,899
about that.

1259
01:09:20,600 --> 01:09:24,200
Let's see, Colombian for Connor rents to just left.

1260
01:09:24,200 --> 01:09:25,899
What is, um, data type and what is it used for?

1261
01:09:25,899 --> 01:09:31,800
I will watch this recording that is just an unsigned memory sized

1262
01:09:32,800 --> 01:09:33,399
integer.

1263
01:09:33,899 --> 01:09:37,600
So, it's basically like 64-bit on a platform that 64-bit pointers

1264
01:09:38,100 --> 01:09:42,399
32-bit unsigned on a platform that's 32-bit pointers so it's um,

1265
01:09:42,399 --> 01:09:43,100
pointer tea.

1266
01:09:47,100 --> 01:09:48,600
Well yes that's what I'm talking about.

1267
01:09:48,600 --> 01:09:52,500
I didn't notice you did more of their okay sign ekron, what's the

1268
01:09:52,500 --> 01:09:57,300
difference between srgb and rgba that is covered in a lot of detail

1269
01:09:57,700 --> 01:09:59,000
back in the previous dream.

1270
01:09:59,000 --> 01:10:03,600
So I would go walk I'd watch the streams on srgb encoding.

1271
01:10:03,900 --> 01:10:07,100
Well to be honest I don't know that we really cover it all that

1272
01:10:07,100 --> 01:10:11,000
thoroughly we covered gamma correction and that's what it is.

1273
01:10:11,000 --> 01:10:13,700
But srgb is a particular color space.

1274
01:10:14,700 --> 01:10:15,300
Right.

1275
01:10:19,400 --> 01:10:21,100
So srgb.

1276
01:10:22,700 --> 01:10:24,100
Is a color space.

1277
01:10:27,000 --> 01:10:29,700
And it's a color space that has a particular gamma curve.

1278
01:10:30,000 --> 01:10:34,100
That's like it's like to point to its.

1279
01:10:34,100 --> 01:10:37,100
I think it's like to point to gamma curve.

1280
01:10:37,100 --> 01:10:40,800
So it's like it's, you know, it's it's whatever the color is, it's

1281
01:10:40,800 --> 01:10:44,700
raised to the 2 point, 2 power everywhere except down at the bottom

1282
01:10:45,200 --> 01:10:48,900
where it's not where it's linearized out.

1283
01:10:48,900 --> 01:10:52,700
And particular way, I don't remember the exact specifics, but it's,

1284
01:10:53,800 --> 01:10:56,700
it's the one that adobe proposed, and it's the kind of the prevalent.

1285
01:10:56,800 --> 01:11:01,000
That that gravis cars Implement and you can kind of see here.

1286
01:11:02,700 --> 01:11:05,700
Let's see where is

1287
01:11:06,900 --> 01:11:08,500
Where's the actual curve?

1288
01:11:09,700 --> 01:11:13,800
I don't actually want perceived intensity, is I just wanted just

1289
01:11:13,800 --> 01:11:15,400
wanted the actual curve.

1290
01:11:19,900 --> 01:11:21,600
I like, what is srgb?

1291
01:11:21,600 --> 01:11:24,000
And why is it so important for e-commerce?

1292
01:11:24,200 --> 01:11:26,300
I was like, okay, I don't know that I would have thought it was that

1293
01:11:26,300 --> 01:11:28,300
important for e-commerce but I guess it is.

1294
01:11:36,000 --> 01:11:38,300
I'm always bad finding graphs on the Stream.

1295
01:11:41,400 --> 01:11:44,900
I don't know, I don't know where it is, but point being

1296
01:11:48,100 --> 01:11:48,800
There it is.

1297
01:11:49,600 --> 01:11:50,300
This is the image.

1298
01:11:50,300 --> 01:11:51,200
I think I wanted.

1299
01:11:51,500 --> 01:11:52,000
There we go.

1300
01:11:52,600 --> 01:11:55,700
So point being, as you can see it's a pretty close.

1301
01:11:55,800 --> 01:11:59,300
It's pretty close to just 2.2 but it's not exactly the same.

1302
01:12:00,000 --> 01:12:04,400
And why it's not the same, I do not remember, it's some finicky

1303
01:12:04,400 --> 01:12:07,500
reason, like it wanted to be more well-behaved numerically at the

1304
01:12:07,500 --> 01:12:09,500
bottom or something like this.

1305
01:12:10,000 --> 01:12:16,800
So, it's basically the same gamma curve as a monitor was, with the 2.2

1306
01:12:16,800 --> 01:12:21,000
standard way that they used to be, but it's a little bit different and

1307
01:12:21,000 --> 01:12:26,300
now all monitors have a, an srgb mode that you should set your monitor

1308
01:12:26,300 --> 01:12:27,000
to, by the way.

1309
01:12:27,900 --> 01:12:29,200
That's, that's that curve.

1310
01:12:31,000 --> 01:12:36,000
So anyway, srgb is just that encoding and so it's a, it's a way of

1311
01:12:36,000 --> 01:12:42,000
encoding colors color values such that they more closely put the

1312
01:12:42,000 --> 01:12:45,400
detail like where they put the resolution of the color space, where

1313
01:12:45,400 --> 01:12:48,000
your I can see it rather than where it can't.

1314
01:12:48,000 --> 01:12:50,300
And so what happens with a gamma curve, right?

1315
01:12:50,300 --> 01:12:52,900
Is if you imagine a linear brightness response.

1316
01:12:52,900 --> 01:12:56,200
So here is like the input color value.

1317
01:12:56,300 --> 01:12:59,600
Here is like the color value from 0 to 255, that we might specify look

1318
01:12:59,600 --> 01:13:00,500
in the in the game.

1319
01:13:00,700 --> 01:13:04,100
Or 0 to 1 point 0 if you're in floating point, right?

1320
01:13:04,800 --> 01:13:07,400
And here is the brightness that the monitor outputs

1321
01:13:08,600 --> 01:13:09,300
that makes sense.

1322
01:13:09,600 --> 01:13:14,900
If you're linearly outputting brightness, then what happens is, you

1323
01:13:14,900 --> 01:13:22,200
end up with the resolution in in the wrong places because your eye up

1324
01:13:22,200 --> 01:13:25,100
here is really bad at perceiving.

1325
01:13:25,100 --> 01:13:28,200
The difference between brightnesses, so like bright.

1326
01:13:29,200 --> 01:13:30,700
Is hard to discern.

1327
01:13:32,600 --> 01:13:36,500
The difference between a point here and a point here for your eye, to

1328
01:13:36,500 --> 01:13:36,800
discern.

1329
01:13:36,800 --> 01:13:40,700
In terms of brightness, it's hard for it to tell, right?

1330
01:13:41,700 --> 01:13:48,100
However, down here in the dark areas, it's easy to discern.

1331
01:13:48,300 --> 01:13:51,800
So, if you have a point here and a point here, your I can very easily

1332
01:13:51,800 --> 01:13:52,700
tell them apart.

1333
01:13:53,200 --> 01:13:57,500
So what that means is, if you for any given encoding encoding them,

1334
01:13:57,500 --> 01:14:04,100
linearly means either, you'll have way more either, you'll have way

1335
01:14:04,100 --> 01:14:08,600
more sort of resolution in the brights than you want in order to get

1336
01:14:08,600 --> 01:14:11,200
the resolution of the dark that you need or

1337
01:14:11,500 --> 01:14:14,600
The brights are roughly how much you need.

1338
01:14:14,600 --> 01:14:17,600
The darks will be way underrepresented and you won't have enough

1339
01:14:17,600 --> 01:14:17,800
resolution.

1340
01:14:17,800 --> 01:14:21,200
So, the solution to that is to use a curve.

1341
01:14:21,200 --> 01:14:25,900
So that as you go from 0 to 255, or 0 to 1, depending on which one

1342
01:14:25,900 --> 01:14:30,700
you're doing, as you go through that curve, you have lots of values

1343
01:14:30,700 --> 01:14:32,500
down in the darks, right?

1344
01:14:32,500 --> 01:14:36,400
Because you notice the same number of dark values output to a very

1345
01:14:36,400 --> 01:14:37,900
small range of brightness has.

1346
01:14:37,900 --> 01:14:41,000
And then, you have very few values up in the brights,

1347
01:14:41,500 --> 01:14:44,700
So like, you know, five steps up in the brights, might account to like

1348
01:14:44,700 --> 01:14:48,400
some big area here, whereas five steps up in the darks, or counts for

1349
01:14:48,400 --> 01:14:52,200
only a very small area here, so that it's basically just bending that

1350
01:14:52,200 --> 01:14:56,000
curve to give you the output resolution where you actually want it so

1351
01:14:56,000 --> 01:14:59,800
that you don't have to to transfer 16 bit color.

1352
01:15:00,000 --> 01:15:04,400
Sample per Channel, 16 bits per channel, to get the resolution.

1353
01:15:04,400 --> 01:15:07,800
You can just use 8 bits per Channel, which is really actually kind of

1354
01:15:07,800 --> 01:15:08,100
important.

1355
01:15:08,100 --> 01:15:09,800
Because even today, right?

1356
01:15:10,900 --> 01:15:15,500
4K monitors, you have to go to HDMI 2.0, just to get 60 frames a

1357
01:15:15,500 --> 01:15:16,200
second on those.

1358
01:15:16,200 --> 01:15:16,700
Right?

1359
01:15:17,700 --> 01:15:18,200
I think it.

1360
01:15:18,200 --> 01:15:18,800
Can you even?

1361
01:15:18,800 --> 01:15:20,500
I don't even have, you can't, I think that can do it.

1362
01:15:21,300 --> 01:15:26,300
But point being all that stuff, like the cable quality and the HDMI

1363
01:15:26,300 --> 01:15:29,800
specs and all this stuff, those are all fighting to give you enough.

1364
01:15:30,000 --> 01:15:35,600
If bandwidth to the monitor right to actually be able to run games at

1365
01:15:35,600 --> 01:15:37,200
high res, at high frame rates.

1366
01:15:37,900 --> 01:15:41,700
And if you start throwing away that bandwidth there by saying, okay,

1367
01:15:41,700 --> 01:15:44,500
now we got to have 16 bits of color to represent.

1368
01:15:44,500 --> 01:15:46,500
What we need to represent or something, right?

1369
01:15:46,600 --> 01:15:50,100
You're totally through, you're totally ruining your ability to get

1370
01:15:50,100 --> 01:15:53,900
high res, High frame rate because you're wasting it all on these extra

1371
01:15:53,900 --> 01:15:56,700
bits that you didn't really need if you just had a smarter encoding.

1372
01:15:57,200 --> 01:15:59,800
So that's why you need these gamma aware and Coatings.

1373
01:15:59,900 --> 01:16:02,400
That's not to say that eight bits is really enough.

1374
01:16:02,400 --> 01:16:05,400
Even with a gamma encoding, you probably want more like 10 bits or

1375
01:16:05,400 --> 01:16:06,000
something.

1376
01:16:06,000 --> 01:16:10,600
I'm guessing, maybe even more as displays become more High dynamic

1377
01:16:10,600 --> 01:16:11,200
range.

1378
01:16:11,400 --> 01:16:14,400
You may be mean me even more like 12 bits or 14 bits.

1379
01:16:14,400 --> 01:16:15,700
Who knows, right?

1380
01:16:16,000 --> 01:16:18,900
But point being no matter how many bits you use, even if you use that

1381
01:16:18,900 --> 01:16:24,800
many bits you you want to maximize that value per bit by putting the

1382
01:16:24,800 --> 01:16:29,000
curve to align with your eyes, perceptual ability so that you're not

1383
01:16:29,000 --> 01:16:29,800
throwing away.

1384
01:16:29,900 --> 01:16:33,700
It's on the on the high end or having too few bits on the low end.

1385
01:16:38,000 --> 01:16:39,800
Let me just check to see if there's any other questions before.

1386
01:16:39,800 --> 01:16:41,100
I sign off.

1387
01:16:41,300 --> 01:16:43,500
Any other questions that like need to be answered?

1388
01:16:43,500 --> 01:16:44,500
That are pressing.

1389
01:16:52,400 --> 01:16:53,200
Pressing.

1390
01:16:58,000 --> 01:16:59,100
I just checked my Dell monitor.

1391
01:16:59,100 --> 01:17:03,600
It has Adobe RGB as a well as srgb modes and they look fairly

1392
01:17:03,600 --> 01:17:04,500
different.

1393
01:17:04,700 --> 01:17:06,000
So what's the better one?

1394
01:17:07,300 --> 01:17:09,700
Well, that just depends on what you're displaying.

1395
01:17:09,800 --> 01:17:13,200
Srgb is the best one for games because that's what games will use

1396
01:17:13,400 --> 01:17:15,000
Adobe RGB.

1397
01:17:16,100 --> 01:17:22,200
Might be the one that has the really weird crazy multi-part function.

1398
01:17:26,600 --> 01:17:27,500
I don't remember.

1399
01:17:28,900 --> 01:17:30,100
there's this one that's like,

1400
01:17:31,800 --> 01:17:33,600
Super weird, where's the equation?

1401
01:17:33,800 --> 01:17:34,700
Show me the equation.

1402
01:17:45,000 --> 01:17:46,700
Oh no, this is not.

1403
01:17:46,700 --> 01:17:47,600
So this is

1404
01:17:51,400 --> 01:17:52,800
This is not good at all.

1405
01:17:52,800 --> 01:17:54,100
You definitely don't want this.

1406
01:17:54,200 --> 01:17:54,900
Never mind.

1407
01:17:59,000 --> 01:17:59,800
He said, I don't think so.

1408
01:18:05,300 --> 01:18:08,400
You know, I'll be honest, I'm the wrong one to ask.

1409
01:18:08,600 --> 01:18:10,900
I'm so not a color space knowledgeable person.

1410
01:18:12,800 --> 01:18:14,000
So this is the 2 part 1.

1411
01:18:14,000 --> 01:18:16,200
This is when I think of I think this is the one you want.

1412
01:18:19,400 --> 01:18:22,100
That's certainly the one that I think the graphics cards Implement

1413
01:18:22,600 --> 01:18:23,900
that was my recollection.

1414
01:18:24,800 --> 01:18:25,700
So I think that's the one.

1415
01:18:25,700 --> 01:18:26,900
You typically want to set to

1416
01:18:34,000 --> 01:18:34,600
Orlando Bloom.

1417
01:18:34,600 --> 01:18:37,300
I've heard a lot of monitors, aren't even really 32-bit color

1418
01:18:37,300 --> 01:18:37,700
sometimes.

1419
01:18:37,700 --> 01:18:39,100
Less with differing in the monitor.

1420
01:18:39,400 --> 01:18:42,700
Yeah, I think that's actually possibly true because since it's never

1421
01:18:42,700 --> 01:18:46,400
been one of those specs, like basically, a lot of other things have

1422
01:18:46,400 --> 01:18:50,200
been specs that people have hiked on, like, TVs and stuff or whatever.

1423
01:18:50,200 --> 01:18:54,600
It's like 60 frames, a second, or 120 frames a second or whatever they

1424
01:18:54,600 --> 01:18:57,700
start helping them, and then TVs, like have them, whatever they are,

1425
01:18:58,400 --> 01:19:03,500
whereas bits of color people have not like pushed yet, as a thing.

1426
01:19:06,500 --> 01:19:07,100
So yeah.

1427
01:19:10,300 --> 01:19:12,300
You end up with people cutting Corners so they can sell it cheaper,

1428
01:19:12,300 --> 01:19:14,200
TV, that still looks like it has the same specs.

1429
01:19:18,400 --> 01:19:18,900
Anyway.

1430
01:19:20,600 --> 01:19:21,900
I'm a shut down now.

1431
01:19:26,000 --> 01:19:26,900
Yeah.

1432
01:19:42,800 --> 01:19:43,300
There we go.

1433
01:19:44,400 --> 01:19:46,700
Thank you everyone for joining me, for another episode of handmade

1434
01:19:46,700 --> 01:19:46,900
here.

1435
01:19:46,900 --> 01:19:49,300
It's been a pleasure coding with you as always.

1436
01:19:50,000 --> 01:19:53,800
And it's been a fun week, we added opengl rendering to our game, which

1437
01:19:53,800 --> 01:19:54,500
is kind of fun.

1438
01:19:54,900 --> 01:19:58,300
And now we have access to a heck of a lot of computing power in there

1439
01:19:58,500 --> 01:20:00,200
for doing our rendering, which is kind of nice.

1440
01:20:01,000 --> 01:20:03,800
The CPU was pretty good at rendering but of course the graphics card

1441
01:20:03,800 --> 01:20:06,900
which is totally made for it is better.

1442
01:20:07,800 --> 01:20:10,700
So that's it for today.

1443
01:20:11,500 --> 01:20:14,000
If you want to follow along at home, you can always pre-order.

1444
01:20:14,300 --> 01:20:17,200
My handmade here, a torque and it comes with the source code so you

1445
01:20:17,200 --> 01:20:19,400
can play around with it even as we speak.

1446
01:20:19,700 --> 01:20:21,200
I uploaded every night after we're done here.

1447
01:20:21,200 --> 01:20:23,700
So you can play around with it and experiment if you would like to do.

1448
01:20:23,700 --> 01:20:25,600
So we also have a forum site.

1449
01:20:25,600 --> 01:20:28,500
If you want to go ask questions, we have a patreon page where you can

1450
01:20:28,500 --> 01:20:30,800
support the video series if you are so inclined.

1451
01:20:30,800 --> 01:20:33,900
And we also have a tweet bot that tweets the schedule at you.

1452
01:20:34,200 --> 01:20:36,600
So if you want to catch the stream live, that's the place to do it.

1453
01:20:36,900 --> 01:20:40,700
We will be back here next week I suspect unless for some reason we're

1454
01:20:40,700 --> 01:20:44,000
off so definitely check the Tweet but for information about that

1455
01:20:44,800 --> 01:20:49,800
until then have fun programming, guys, and I will see you all on the

1456
01:20:49,800 --> 01:20:50,200
internet.

1457
01:20:50,200 --> 01:20:51,200
Take it easy, everyone.

