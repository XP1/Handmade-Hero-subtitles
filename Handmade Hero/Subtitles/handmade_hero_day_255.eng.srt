1
00:00:00,500 --> 00:00:01,200
Start recording.

2
00:00:02,700 --> 00:00:05,000
Hello everyone and welcome to handmade hero.

3
00:00:05,000 --> 00:00:07,900
The show we coded complete game live on stream.

4
00:00:08,200 --> 00:00:13,900
We are doing a profiling View today and really, I don't know that

5
00:00:13,900 --> 00:00:17,000
there's that much work to do to actually display the profile or

6
00:00:17,000 --> 00:00:20,600
Graphics, because I think that's pretty straightforward and mostly was

7
00:00:20,600 --> 00:00:21,600
implemented yesterday.

8
00:00:21,700 --> 00:00:27,200
The problem that we need to solve today is about querying, what the

9
00:00:27,200 --> 00:00:30,900
data is that we have, because we have two problems that we will need

10
00:00:30,900 --> 00:00:32,299
to address the

11
00:00:32,500 --> 00:00:38,700
First problem is that we don't have any fast way to get out the

12
00:00:38,700 --> 00:00:43,100
profiling information for the just the previous frame or a specific

13
00:00:43,100 --> 00:00:43,400
frame.

14
00:00:43,400 --> 00:00:46,400
We have to do like a search through like a linear linked list and

15
00:00:46,400 --> 00:00:50,500
that's just I mean that's not gonna hold up especially because we

16
00:00:50,500 --> 00:00:52,700
track a ton of profiling data right now.

17
00:00:53,100 --> 00:00:53,400
Right?

18
00:00:53,400 --> 00:00:56,400
So we just have a buffers that you can just stream out to forever and

19
00:00:56,400 --> 00:00:57,900
you keep piling up, more and more frames.

20
00:00:58,100 --> 00:01:00,900
So searching through them will get slower and slower and slower and

21
00:01:00,900 --> 00:01:02,300
the longer the program runs.

22
00:01:02,400 --> 00:01:02,800
The slower.

23
00:01:02,800 --> 00:01:03,600
It will run, right?

24
00:01:03,600 --> 00:01:05,000
And so that's not okay.

25
00:01:05,000 --> 00:01:09,300
Obviously and similarly we have another problem that we would like to

26
00:01:09,300 --> 00:01:13,200
address which is that in order to print out this profile view, we need

27
00:01:13,200 --> 00:01:17,700
to have some concept of the nesting of calls inside each other.

28
00:01:18,100 --> 00:01:21,500
And the reason that we need that is first of all for the drawing to

29
00:01:21,500 --> 00:01:25,400
work correctly because if we have calls, inside other calls, we need

30
00:01:25,400 --> 00:01:25,900
to know that.

31
00:01:25,900 --> 00:01:27,700
The, the calls that are inside.

32
00:01:27,700 --> 00:01:30,400
Another call has to be drawn on top of the previous call.

33
00:01:30,500 --> 00:01:32,200
Otherwise, the previous call, we'll

34
00:01:32,400 --> 00:01:34,000
Completely overlap it and we won't see any.

35
00:01:34,000 --> 00:01:37,200
So when we draw like a rectangle, we need to make sure that that

36
00:01:37,600 --> 00:01:40,500
rectangle is drawn on top if it's a sub call.

37
00:01:40,600 --> 00:01:44,100
If we're trying to do some kind of like a nice stack view their right

38
00:01:45,500 --> 00:01:48,600
and so that's like part of it.

39
00:01:48,600 --> 00:01:51,900
The other part of it is there could be hundreds of thousands of calls

40
00:01:51,900 --> 00:01:54,100
in a frame if we wanted to abuse the system.

41
00:01:54,200 --> 00:01:57,800
If we wanted to have a lot of timed blocks for some reason, or just

42
00:01:57,800 --> 00:01:59,400
who knows why we're doing it?

43
00:01:59,500 --> 00:02:02,000
Just if we did it, we would end up in a

44
00:02:02,400 --> 00:02:06,600
stance where it would be prohibitively expensive to sort of draw all

45
00:02:06,600 --> 00:02:07,400
that all the time.

46
00:02:07,600 --> 00:02:12,200
So it might also be nice to have some sort of a notion of only

47
00:02:12,200 --> 00:02:18,000
drawing, the immediate sort of top level or or one or two levels down

48
00:02:18,000 --> 00:02:19,100
or something like that, right?

49
00:02:19,100 --> 00:02:22,000
So that we could do something like saying, oh, okay, you know, we

50
00:02:22,100 --> 00:02:26,000
right now we only want to draw, you know, the top call level and one

51
00:02:26,000 --> 00:02:28,700
below that or two down or something, right?

52
00:02:29,000 --> 00:02:32,200
As opposed to drawing all the way down, every time which

53
00:02:32,400 --> 00:02:35,900
Might just be too messy, and everything's would be little tiny

54
00:02:35,900 --> 00:02:36,500
slivers.

55
00:02:39,200 --> 00:02:39,600
And who knows?

56
00:02:39,600 --> 00:02:40,200
What else?

57
00:02:41,700 --> 00:02:42,300
Right.

58
00:02:42,600 --> 00:02:47,100
So you know essentially what we want to do today is just put our data.

59
00:02:47,100 --> 00:02:50,600
When we're doing our collation pass figure out some way to put our

60
00:02:50,600 --> 00:02:55,200
data into a structure that would allow us to do a little bit more in

61
00:02:55,200 --> 00:02:56,300
terms of the profile view.

62
00:02:56,300 --> 00:02:59,800
And we could do this in one of any number of ways.

63
00:03:00,000 --> 00:03:03,200
We could try to just pre-baked down the data into like a view.

64
00:03:03,200 --> 00:03:05,700
Like we were sort of doing originally where we just produced these

65
00:03:05,700 --> 00:03:07,400
region Concepts.

66
00:03:08,900 --> 00:03:12,800
Originally we could instead just just expand the size of the things

67
00:03:12,800 --> 00:03:18,100
we're storing to be some kind of weird sort of thready like like tree

68
00:03:18,100 --> 00:03:21,300
structure that we could walk and I don't know which of these is the

69
00:03:21,300 --> 00:03:22,000
right thing to do.

70
00:03:22,200 --> 00:03:25,400
It seems like since we kind of went hog-wild in the debug system and

71
00:03:25,400 --> 00:03:25,700
its not.

72
00:03:25,700 --> 00:03:29,800
So in there already, maybe we just build the tree and like say hey we

73
00:03:30,000 --> 00:03:33,700
built the tree, happy birthday and and that's just how it goes

74
00:03:33,700 --> 00:03:36,900
because, you know, I don't know that there's a lot of reason not to do

75
00:03:36,900 --> 00:03:39,600
it and if we build the tree, then we just during the profile, we just

76
00:03:39,600 --> 00:03:43,100
walk that tree and it has literally everything in it.

77
00:03:43,600 --> 00:03:44,600
You know, who knows?

78
00:03:44,700 --> 00:03:46,300
I don't know, we could do that.

79
00:03:47,400 --> 00:03:52,600
So let's just talk about that really quickly on the Whiteboard so that

80
00:03:52,600 --> 00:03:55,400
there's some understanding of what supposed to go on here.

81
00:03:57,000 --> 00:03:59,000
Here's de 0xff.

82
00:04:01,400 --> 00:04:05,900
So, what we're talking about here is like profile queries.

83
00:04:10,100 --> 00:04:12,900
And so, what we want to do, right, is we want to be able to do

84
00:04:12,900 --> 00:04:14,800
something like have these Lanes, right?

85
00:04:14,800 --> 00:04:18,100
So we have a, first of all, we need to know threads and we need to

86
00:04:18,100 --> 00:04:20,800
know thread ordinals like the first thread, the second thread, the

87
00:04:20,800 --> 00:04:21,500
third thread.

88
00:04:21,600 --> 00:04:24,000
So we know what Lane to put something in, right?

89
00:04:24,000 --> 00:04:26,400
Because we want to be able to say, like, here's our threads, and here

90
00:04:26,400 --> 00:04:27,100
is each lane.

91
00:04:27,100 --> 00:04:28,100
Like, here's the zeroth.

92
00:04:28,100 --> 00:04:28,800
One second.

93
00:04:28,900 --> 00:04:31,200
Like, how many 012 lane or whatever?

94
00:04:32,300 --> 00:04:34,200
So, that's one thing I think we talked about that yesterday.

95
00:04:34,200 --> 00:04:36,000
We got to have some way of getting thread ordinals.

96
00:04:36,300 --> 00:04:37,600
So we need thread ordinals

97
00:04:43,700 --> 00:04:44,600
We know, that's true.

98
00:04:45,900 --> 00:04:47,400
And then we need some way of saying.

99
00:04:47,400 --> 00:04:53,100
Alright, so for a given frame, we want to or we want to be able to

100
00:04:53,100 --> 00:05:00,300
say, like, for a particular scope and a given frame, we need to know

101
00:05:00,300 --> 00:05:03,200
what all the times were that this thing was called.

102
00:05:05,100 --> 00:05:08,700
So we want something that's going to give us like, you know, this sort

103
00:05:08,700 --> 00:05:13,300
of a thing back and we don't care if we can't reverse it in

104
00:05:13,300 --> 00:05:14,300
bi-directionally.

105
00:05:14,500 --> 00:05:17,700
As long as we can get, just the part that happened in like a

106
00:05:17,700 --> 00:05:19,700
particular frame, right?

107
00:05:20,800 --> 00:05:23,200
So we need something that says, like, okay, there is from here to

108
00:05:23,200 --> 00:05:23,800
here.

109
00:05:23,800 --> 00:05:27,300
And then, from here to here is, when this particular thing was called,

110
00:05:27,300 --> 00:05:30,200
so if we have some function Foo, we want to know that like Oak, your

111
00:05:30,200 --> 00:05:34,000
was a call to Foo and here was also a call to Foo, you know.

112
00:05:35,300 --> 00:05:36,600
So that's fine.

113
00:05:37,800 --> 00:05:41,600
Then what we'd want to do is for any one of these Foods, we want to be

114
00:05:41,600 --> 00:05:45,400
able to say give me what the sub calls were, right.

115
00:05:45,500 --> 00:05:47,500
So we want to be able to say what the sub calls were.

116
00:05:47,900 --> 00:05:51,000
So really, it's just a complete hierarchy, right?

117
00:05:51,000 --> 00:05:52,200
That we could store.

118
00:05:53,100 --> 00:05:55,900
And so, my first thought is, let's just store it, right?

119
00:05:55,900 --> 00:05:59,800
Because who cares memory is cheap and this is the debug system.

120
00:06:00,500 --> 00:06:03,800
So we can have arbitrarily large amounts of memory in our debug

121
00:06:03,800 --> 00:06:04,200
machines.

122
00:06:04,200 --> 00:06:07,500
If we want to, we don't have to care about whether the user.

123
00:06:07,500 --> 00:06:11,700
The end user has extra memory for this sort of thing, because they are

124
00:06:11,700 --> 00:06:13,100
never going to run this code.

125
00:06:13,200 --> 00:06:14,100
And so

126
00:06:16,700 --> 00:06:20,800
If we just went ahead and during collation, actually created

127
00:06:21,100 --> 00:06:22,900
essentially that tree structure.

128
00:06:24,800 --> 00:06:27,200
That would be a way to do it.

129
00:06:27,200 --> 00:06:30,500
So let's just pretend that that's what we're going to do.

130
00:06:30,900 --> 00:06:33,800
And then let's see what happens if we do it.

131
00:06:33,800 --> 00:06:36,500
And then we can just walk it directly as we draw.

132
00:06:37,000 --> 00:06:40,100
So, if I came into the debug system,

133
00:06:41,000 --> 00:06:41,600
See here.

134
00:06:43,200 --> 00:06:45,300
I need to actually open up and editor.

135
00:06:45,500 --> 00:06:48,100
By the way, I don't know if you guys saw but there's a new version of

136
00:06:48,100 --> 00:06:49,500
for coder that's been posted.

137
00:06:49,500 --> 00:06:53,400
So tomorrow on stream will be able to use a new version of for coder.

138
00:06:53,400 --> 00:06:56,700
Which I'm pretty excited about because I think it's got a lot of

139
00:06:56,700 --> 00:06:58,700
things in it that I needed.

140
00:06:58,700 --> 00:07:01,100
So I think it's going to be pretty pretty darn good.

141
00:07:01,200 --> 00:07:03,600
I'm also thinking I might be able to switch to it, work as well,

142
00:07:03,600 --> 00:07:06,700
because I think the things there is a couple things that made it.

143
00:07:06,700 --> 00:07:11,600
So I couldn't use it at work and I think those things may be fixed.

144
00:07:11,600 --> 00:07:12,500
So this may be

145
00:07:12,700 --> 00:07:17,000
Good time for maybe a very good thing.

146
00:07:17,400 --> 00:07:19,600
Alright, so here is our build.

147
00:07:19,800 --> 00:07:25,300
And if I go to Ms, Dev and run the build, here we go.

148
00:07:27,800 --> 00:07:32,900
Here is here, is what we had, and what, hopefully you can see is over

149
00:07:32,900 --> 00:07:34,900
time, or did we?

150
00:07:34,900 --> 00:07:35,600
It's okay.

151
00:07:35,600 --> 00:07:37,000
We have sorted out, never mind.

152
00:07:39,700 --> 00:07:41,800
Let's go to forehead here.

153
00:07:44,300 --> 00:07:51,700
I want be debugged dot CPP and I want if 0.

154
00:07:53,000 --> 00:07:59,800
So if I was to let this thing run it would do bad things, right?

155
00:07:59,900 --> 00:08:05,500
So now it's drawing all the time and as this sort of continues to run,

156
00:08:05,600 --> 00:08:08,500
you can see that this is a linked list situation going on here.

157
00:08:09,300 --> 00:08:09,500
And

158
00:08:09,700 --> 00:08:12,000
You probably saw this as a sort of turns you into the stream

159
00:08:12,700 --> 00:08:17,400
essentially as we chew through enough memory because as we're chewing

160
00:08:17,400 --> 00:08:19,600
through that memory, we're building up bigger and bigger lists.

161
00:08:19,800 --> 00:08:23,800
This number is going to go down and you can see that if we go into the

162
00:08:23,800 --> 00:08:28,900
game which uses does a lot more, it ends up being a does.

163
00:08:28,900 --> 00:08:35,100
In fact, this was so there were so many things to draw in that when we

164
00:08:35,200 --> 00:08:39,400
walk through there, that we overflowed the push buffer

165
00:08:39,600 --> 00:08:42,900
For the renderer just drawing them right?

166
00:08:43,500 --> 00:08:47,200
So that can give you just that's like what that break point is there,

167
00:08:47,200 --> 00:08:47,700
right?

168
00:08:47,800 --> 00:08:51,200
So that just gives you an idea of exactly how bad the situation is.

169
00:08:51,500 --> 00:08:55,900
So we really don't want them to case now, granted probably what we

170
00:08:55,900 --> 00:08:59,900
should do as well is take out some of those

171
00:09:00,500 --> 00:09:04,000
Those time blocks because we're timing blocks at this point that are

172
00:09:04,000 --> 00:09:08,600
way too frequently called to make sense.

173
00:09:08,900 --> 00:09:15,100
So technically I mean, you know, let me see here, if I if I do like a

174
00:09:15,100 --> 00:09:18,300
grep, let's see here.

175
00:09:20,500 --> 00:09:22,900
I want to find like all the places that we do time, but I guess it

176
00:09:22,900 --> 00:09:24,100
would just be in the renderer

177
00:09:34,700 --> 00:09:35,900
where are those?

178
00:09:41,300 --> 00:09:42,700
I suppose one thing about it they'll be nice.

179
00:09:42,700 --> 00:09:46,000
McKenna profile working is I will now know what we're even profiling

180
00:09:46,200 --> 00:09:49,600
because I don't really remember what we're profiling at this point.

181
00:09:50,900 --> 00:09:52,400
Is there one in opengl?

182
00:09:52,400 --> 00:09:53,100
Where are they?

183
00:10:04,600 --> 00:10:06,100
I'm not sure where they all are.

184
00:10:06,800 --> 00:10:09,300
I don't have a good way to search at the moment.

185
00:10:09,300 --> 00:10:12,300
It's been on my list of things to do to add a search in all files to

186
00:10:12,300 --> 00:10:15,500
for a coder, which would be pretty simple to do, but I just haven't

187
00:10:16,000 --> 00:10:17,400
had time to actually do it.

188
00:10:17,500 --> 00:10:22,400
So let's take a, let's do it in Dev Studio here, find and replace find

189
00:10:22,400 --> 00:10:23,300
and files.

190
00:10:26,000 --> 00:10:30,600
I just well well I don't know what an okay, can we

191
00:10:31,700 --> 00:10:32,900
How is this even?

192
00:10:32,900 --> 00:10:34,800
I don't even know what this is.

193
00:10:34,800 --> 00:10:37,200
I don't know what any of this is.

194
00:10:37,200 --> 00:10:39,600
And I don't really want to know.

195
00:10:39,600 --> 00:10:48,200
I just want you to go to w: handmade code like so and I want to

196
00:10:51,000 --> 00:10:56,000
Add that here and I really want these to all go away.

197
00:10:57,000 --> 00:11:00,000
I like how this this is removed.

198
00:11:00,700 --> 00:11:04,000
That means move from here to there and this means remove

199
00:11:05,200 --> 00:11:05,900
Okay.

200
00:11:07,400 --> 00:11:08,200
Whatever man.

201
00:11:09,300 --> 00:11:16,500
So let's see if I go to timed and search, what are we actually timing?

202
00:11:17,800 --> 00:11:22,200
So we're timing calls to the main guy.

203
00:11:22,200 --> 00:11:27,100
We're timing loading, which should be fine, that shouldn't be too

204
00:11:27,100 --> 00:11:27,600
much.

205
00:11:28,300 --> 00:11:31,100
So we're timing get best matched ass.

206
00:11:31,100 --> 00:11:35,400
Like, we're calling that thousands of times a frame, possibly, because

207
00:11:35,400 --> 00:11:36,700
every time we use like

208
00:11:37,100 --> 00:11:38,000
Fonts and stuff.

209
00:11:38,000 --> 00:11:39,400
That's probably going to happen.

210
00:11:39,400 --> 00:11:41,800
Oh maybe not, that might not know.

211
00:11:41,800 --> 00:11:42,400
I think about it.

212
00:11:42,400 --> 00:11:43,200
That might be okay.

213
00:11:45,800 --> 00:11:48,600
Play sound is not a heavy path thing.

214
00:11:49,500 --> 00:11:51,400
Neither any of these, I don't think.

215
00:11:52,900 --> 00:11:53,700
Let's see.

216
00:11:55,000 --> 00:11:59,200
so, ignored time function is this

217
00:12:00,900 --> 00:12:03,800
This shouldn't be getting called the right because this were not

218
00:12:03,800 --> 00:12:04,500
running this path.

219
00:12:04,500 --> 00:12:06,100
We're running opengl at the moment.

220
00:12:06,200 --> 00:12:09,300
So in theory we shouldn't see any of these coming through.

221
00:12:10,200 --> 00:12:14,900
Let's see in seemed similarity, a Danity, raw begin soon and Sim

222
00:12:14,900 --> 00:12:16,500
speculative Collide.

223
00:12:16,500 --> 00:12:19,400
So probably calling a lot of that and these overlap or calling, a lot

224
00:12:19,400 --> 00:12:20,100
of that.

225
00:12:22,900 --> 00:12:24,200
I not too many move into these.

226
00:12:24,200 --> 00:12:25,200
Get World chunk.

227
00:12:25,600 --> 00:12:26,300
Change it look at.

228
00:12:26,300 --> 00:12:28,600
Yeah, so we're calling a ton of these things.

229
00:12:33,200 --> 00:12:34,100
I think that's it.

230
00:12:37,500 --> 00:12:38,800
Pre-process dot temp?

231
00:12:39,200 --> 00:12:41,600
Really does not need to be there to say the least.

232
00:12:47,300 --> 00:12:48,400
Let's go ahead and get rid of that.

233
00:12:48,900 --> 00:12:51,200
That was just something I was doing to check out in a macro.

234
00:12:52,900 --> 00:12:53,300
All right.

235
00:12:53,300 --> 00:12:57,000
So I think oh you know what?

236
00:13:00,100 --> 00:13:04,400
So when people ask me to do the clock count, we left stb true type in

237
00:13:04,400 --> 00:13:09,000
here even though we don't really use it, I feel like we should get rid

238
00:13:09,000 --> 00:13:15,500
of that because that's probably messing up our our clock count.

239
00:13:17,200 --> 00:13:18,900
the people sometimes ask me for this,

240
00:13:21,600 --> 00:13:22,800
So it's much lower.

241
00:13:23,600 --> 00:13:25,900
Well, I don't know if it's much lower but it's significantly lower.

242
00:13:26,600 --> 00:13:29,700
I mean, it's like 8,000 lines lower, which is a lot.

243
00:13:30,000 --> 00:13:34,000
So I think we're much better on the line count than it was making it

244
00:13:34,000 --> 00:13:36,800
seem because we forgot that SUV to prison because I showed you guys

245
00:13:36,800 --> 00:13:37,900
how to use it that time.

246
00:13:39,100 --> 00:13:41,600
And then it never got deleted that make sense.

247
00:13:42,800 --> 00:13:43,900
So, so yeah.

248
00:13:44,000 --> 00:13:44,600
So there you go.

249
00:13:45,300 --> 00:13:45,500
Alright.

250
00:13:45,500 --> 00:13:47,800
So we're lower on the clock, which is good.

251
00:13:47,800 --> 00:13:51,100
I don't really like to have a lot of lines of code like, having a lot

252
00:13:51,100 --> 00:13:51,300
of

253
00:13:51,500 --> 00:13:52,600
The code is not great.

254
00:13:54,000 --> 00:13:58,800
So you know I don't really want handmade hero to be like 100,000 line

255
00:13:58,800 --> 00:13:59,400
program.

256
00:13:59,400 --> 00:14:00,800
That's probably not great.

257
00:14:00,800 --> 00:14:05,600
I want it to be a 30,000 line program or something, you know, if we're

258
00:14:05,600 --> 00:14:08,800
lucky so that it's, you know, manageable

259
00:14:09,900 --> 00:14:11,300
all right, so anyway

260
00:14:15,300 --> 00:14:15,900
It was, I can say.

261
00:14:15,900 --> 00:14:16,200
Okay.

262
00:14:16,200 --> 00:14:19,900
So anyway, we don't really know yet how many things were calling or

263
00:14:19,900 --> 00:14:20,100
whatever.

264
00:14:20,100 --> 00:14:21,000
And these are some stats.

265
00:14:21,000 --> 00:14:24,500
These are the kinds of things that I would like to start printing out.

266
00:14:24,600 --> 00:14:28,900
So one example to that we could do is like we could print out some

267
00:14:28,900 --> 00:14:29,700
summaries.

268
00:14:29,700 --> 00:14:33,400
So we could see if these things make any sense and that I think would

269
00:14:33,400 --> 00:14:34,300
be nice as well.

270
00:14:34,300 --> 00:14:37,300
So I'm going to F0 this out so we're not trying to draw anything here

271
00:14:38,000 --> 00:14:39,500
until we get things sorted.

272
00:14:39,500 --> 00:14:43,900
And I'm going to go ahead and say that the frame itself.

273
00:14:43,900 --> 00:14:45,000
I want to just keep

274
00:14:45,100 --> 00:14:50,500
But summary on the frame that tells us some stuff like how many events

275
00:14:50,500 --> 00:14:52,100
were in it or things like that.

276
00:14:52,200 --> 00:14:56,500
So you know like how many stored events occurred in that frame and how

277
00:14:56,500 --> 00:14:59,800
many like blocks there were open and close.

278
00:15:00,300 --> 00:15:01,500
You know, that kind of stuff.

279
00:15:02,300 --> 00:15:06,400
So, inside the debug frame in here, if I had, if I wanted to, I could

280
00:15:06,400 --> 00:15:10,700
say, like, okay, here's the debug frame, this is the total stored

281
00:15:10,700 --> 00:15:15,000
event count or maybe I'll just call it sort event count.

282
00:15:15,100 --> 00:15:20,300
This is the open block count or or I should say the this is the

283
00:15:20,300 --> 00:15:23,100
profile block count and this is the data block out.

284
00:15:23,200 --> 00:15:28,700
And so each time that we collate, I'm going to say that we want to

285
00:15:30,800 --> 00:15:35,000
I'll see her quite a bit because I'm going to say that we want to have

286
00:15:35,000 --> 00:15:37,400
those updated.

287
00:15:37,400 --> 00:15:41,000
So when we set like the frame index, for example.

288
00:15:41,400 --> 00:15:46,100
So in, you know, in here where we do this stuff,

289
00:15:51,500 --> 00:15:53,200
Where do we set the frame index?

290
00:15:59,600 --> 00:16:01,100
There should be an ad frame.

291
00:16:02,400 --> 00:16:02,900
Right.

292
00:16:14,300 --> 00:16:15,100
No.

293
00:16:17,100 --> 00:16:17,900
Not that.

294
00:16:21,400 --> 00:16:21,900
New friend.

295
00:16:22,000 --> 00:16:22,400
There we go.

296
00:16:22,600 --> 00:16:24,600
That was on it before I wasn't paying attention I guess.

297
00:16:25,200 --> 00:16:27,000
So in here I want to do a thing.

298
00:16:27,000 --> 00:16:29,700
Well, it looks like we 0 the structure anyway, so I guess I didn't

299
00:16:29,700 --> 00:16:30,600
really have to initialize it.

300
00:16:30,600 --> 00:16:32,200
It's just going to get initialized to 0 anyway.

301
00:16:32,700 --> 00:16:37,300
So then anytime we store an event, whatever event frame, we store it

302
00:16:37,300 --> 00:16:38,400
on, right?

303
00:16:38,800 --> 00:16:40,000
I'm going to add to it.

304
00:16:40,000 --> 00:16:42,400
So I know that we're in this collation frame here.

305
00:16:42,500 --> 00:16:47,000
So I'm just going to go ahead and say that the collation frame, we add

306
00:16:49,100 --> 00:16:49,600
Two, it's stored.

307
00:16:49,600 --> 00:16:50,400
Event count.

308
00:16:51,600 --> 00:16:52,200
Like so.

309
00:16:52,900 --> 00:16:57,500
And similarly, I think we could also do a thing.

310
00:16:57,500 --> 00:16:59,600
We're inside the collation.

311
00:16:59,800 --> 00:17:01,400
So we're calling the debug records.

312
00:17:01,400 --> 00:17:06,400
When we see something like an open data block and we take a look at

313
00:17:06,400 --> 00:17:07,000
what frame.

314
00:17:07,000 --> 00:17:07,599
It's on.

315
00:17:07,900 --> 00:17:11,300
We could hear just say like Okay, so this open data blocks gonna get

316
00:17:11,300 --> 00:17:18,300
stored in this Frame so we'll just say that that's in the, the data

317
00:17:18,300 --> 00:17:19,200
block count.

318
00:17:20,800 --> 00:17:26,400
And we'll say that when we get a profile block that that's an up in

319
00:17:26,400 --> 00:17:26,800
here.

320
00:17:30,200 --> 00:17:32,200
So, let's go ahead and run this.

321
00:17:34,800 --> 00:17:35,500
Well you know what?

322
00:17:35,500 --> 00:17:39,600
I should print those out first and so when we print out like last

323
00:17:39,600 --> 00:17:45,800
frame time down here, I'm going to just add some stuff to this

324
00:17:45,900 --> 00:17:46,600
concept.

325
00:17:46,600 --> 00:17:49,800
Like, I'm just going to just keep this going here and say like, oh,

326
00:17:49,800 --> 00:17:57,400
okay, when we print out, the rest of this stuff we could say like, oh

327
00:17:57,400 --> 00:17:59,800
okay, fact, I guess I could put it

328
00:18:00,500 --> 00:18:01,400
Could just put it up here.

329
00:18:01,800 --> 00:18:03,200
So that's the frame time.

330
00:18:04,500 --> 00:18:06,200
Like, that's how many events there are.

331
00:18:06,300 --> 00:18:08,400
This is how many like profile blocks there are.

332
00:18:08,400 --> 00:18:09,700
This is how many data blocks.

333
00:18:09,700 --> 00:18:11,900
There are something like that, you know, I'm saying.

334
00:18:12,900 --> 00:18:16,500
So then I can just say like, okay, the debug state,

335
00:18:18,800 --> 00:18:23,200
Most recent frame store, an event count.

336
00:18:24,600 --> 00:18:28,000
And then I'll just duplicate that a couple times and say that I want

337
00:18:28,000 --> 00:18:29,100
to also print out.

338
00:18:31,600 --> 00:18:33,200
The profile block count.

339
00:18:34,700 --> 00:18:37,400
And the data block out.

340
00:18:38,200 --> 00:18:43,700
So that's all of the group's, that's all of the information.

341
00:18:43,700 --> 00:18:46,500
I was curious about there and I just want to see what those numbers

342
00:18:46,500 --> 00:18:50,000
look like, because I don't know if that makes sense.

343
00:18:51,100 --> 00:18:58,800
so that seems like okay so that seems busted to me if that's if it's

344
00:18:58,800 --> 00:19:04,200
actually that low like are there really only 55 events getting stored

345
00:19:04,200 --> 00:19:05,300
if so

346
00:19:08,100 --> 00:19:09,200
Something's amiss.

347
00:19:13,000 --> 00:19:15,000
23 profile blocks for frame.

348
00:19:15,100 --> 00:19:18,800
Also seems extremely low right.

349
00:19:19,300 --> 00:19:20,400
It just seems odd.

350
00:19:20,500 --> 00:19:23,700
Oh duh we're in the cutscene.

351
00:19:26,000 --> 00:19:27,100
That's more like it.

352
00:19:28,200 --> 00:19:31,300
So we've basically, we're basically starting for 1,000 events per

353
00:19:31,300 --> 00:19:38,200
frame and we're storing 9 data, blocks and 2000 profile blocks, right?

354
00:19:39,100 --> 00:19:44,500
And so yeah like you can see why obviously we don't really want to,

355
00:19:45,300 --> 00:19:49,400
you know, we would rather not have those be completely arbitrary and

356
00:19:49,400 --> 00:19:50,900
try to draw them in the profile view.

357
00:19:55,100 --> 00:20:01,700
We certainly could but if we were going to like if we were going to

358
00:20:01,700 --> 00:20:05,800
make an industrial strength profiling system here or I guess it's not

359
00:20:05,800 --> 00:20:11,300
the system, but the view, then what we would have to do is make a

360
00:20:11,300 --> 00:20:14,000
render path specifically for a profiling.

361
00:20:14,300 --> 00:20:17,800
Because like right now we're set up for just doing like little sprite

362
00:20:17,800 --> 00:20:18,900
Blitz, right?

363
00:20:18,900 --> 00:20:22,000
Which is about very little vertex, throughput.

364
00:20:22,100 --> 00:20:26,500
A lot of textures, but a profile views exact opposite.

365
00:20:26,600 --> 00:20:27,500
There's no textures.

366
00:20:27,700 --> 00:20:29,500
It's all about lots.

367
00:20:29,500 --> 00:20:32,900
And lots of vertex, throughput and so we just don't have any way of

368
00:20:32,900 --> 00:20:34,400
doing anything like that, right?

369
00:20:34,400 --> 00:20:36,700
That's just not something that we currently have.

370
00:20:36,800 --> 00:20:40,600
So we could totally solve this problem and it would not be a hard

371
00:20:40,600 --> 00:20:41,300
thing to do.

372
00:20:41,500 --> 00:20:44,700
It's just not something we're probably going to want to do because you

373
00:20:44,700 --> 00:20:47,800
know again it's just a bunch of time to make.

374
00:20:47,800 --> 00:20:51,400
If what we were shipping wasn't primarily a profiling app, we would

375
00:20:51,400 --> 00:20:52,000
definitely do that.

376
00:20:52,100 --> 00:20:55,900
That but we don't really need to do that for our own purposes.

377
00:20:56,600 --> 00:20:57,100
Okay?

378
00:20:59,500 --> 00:20:59,800
so,

379
00:21:01,300 --> 00:21:04,800
Also, by the way, it's nice that this is working relatively.

380
00:21:04,800 --> 00:21:10,100
Well with, you know, like right now, all of that stuff we're storing.

381
00:21:10,100 --> 00:21:14,200
We're processing 4,000 events per frame here and organizing it in all

382
00:21:14,200 --> 00:21:17,300
the others things that we need to do with it without ever using any

383
00:21:17,300 --> 00:21:18,700
more memory, right?

384
00:21:18,700 --> 00:21:23,400
We're now just at recycle, you know, we're just recycling old memory,

385
00:21:23,600 --> 00:21:25,000
and it'll just go on forever.

386
00:21:25,000 --> 00:21:29,300
And it's just always keeping as much debug backlog as it can in 256

387
00:21:29,300 --> 00:21:29,700
Meg's

388
00:21:30,000 --> 00:21:33,600
Which is kind of cool like, that's kind of neat, right?

389
00:21:33,900 --> 00:21:36,800
And we don't have to worry about like, oh, how long can we run before

390
00:21:36,800 --> 00:21:37,400
we run out of memory?

391
00:21:37,400 --> 00:21:39,900
It's just like, now it's never going to use more than that sign.

392
00:21:40,800 --> 00:21:46,000
So let's go ahead back here to where we were at, on the

393
00:21:47,600 --> 00:21:51,900
The event organizing and let's see if we can figure out some way of

394
00:21:53,200 --> 00:21:54,500
processing this data.

395
00:21:54,700 --> 00:21:55,900
Right now.

396
00:21:55,900 --> 00:21:57,300
There's two things we can do.

397
00:21:57,300 --> 00:22:02,200
One is the there's the tree and I think we want to do the tree and the

398
00:22:02,200 --> 00:22:06,900
other thing we can do is to try to attack situations where there's a

399
00:22:06,900 --> 00:22:11,100
lot of stored where there's a lot of calls to a function, right?

400
00:22:11,500 --> 00:22:14,600
And so because what I'm concerned about is when there's a lot of calls

401
00:22:14,600 --> 00:22:17,000
to a function, I don't know what we're going to

402
00:22:17,100 --> 00:22:20,500
To do to really display that because like I said, we don't have

403
00:22:21,100 --> 00:22:23,800
rendering capability for that now maybe we should add it, I don't

404
00:22:23,800 --> 00:22:24,000
know.

405
00:22:24,000 --> 00:22:26,700
But, you know, let's pretend that we won't.

406
00:22:26,700 --> 00:22:29,600
Let's pretend we can't add it, we don't have time to add it or we just

407
00:22:29,800 --> 00:22:32,800
there's billions of them so we couldn't possibly render it.

408
00:22:33,000 --> 00:22:35,100
We need some way of coalescing.

409
00:22:35,100 --> 00:22:37,500
Those into something that we can sort of show.

410
00:22:37,500 --> 00:22:41,400
Hey, this thing gets called too often so we're not going to show it in

411
00:22:41,400 --> 00:22:43,000
that way, right?

412
00:22:43,000 --> 00:22:46,900
So we need to detect that case happening when we're making art.

413
00:22:47,100 --> 00:22:47,500
Tree.

414
00:22:47,500 --> 00:22:49,000
Maybe we need to detect.

415
00:22:49,000 --> 00:22:51,700
This element has just has too many calls.

416
00:22:51,700 --> 00:22:53,500
We can't do anything about it, I don't know.

417
00:22:53,500 --> 00:22:54,800
So that's something to think about.

418
00:22:56,400 --> 00:22:58,000
All right, so let's take a look.

419
00:22:59,700 --> 00:23:01,000
Now, what we can do here.

420
00:23:01,200 --> 00:23:05,600
So I'm going to pop back to the stored event, right?

421
00:23:06,000 --> 00:23:10,400
And let's see how mad you were gonna face.

422
00:23:10,900 --> 00:23:16,000
So, in handmade debug interface, we have the internet sort of meant

423
00:23:16,000 --> 00:23:17,000
debug event.

424
00:23:17,100 --> 00:23:18,800
Debug event is essentially

425
00:23:22,200 --> 00:23:24,900
You know, the clock value, which is when it happened, which we need

426
00:23:24,900 --> 00:23:27,600
for the profiler and then a grid pointer, which lets us know what's

427
00:23:27,600 --> 00:23:27,900
going on.

428
00:23:27,900 --> 00:23:33,100
Now, the kwid pointer, we don't need right, we only need the clock

429
00:23:33,100 --> 00:23:37,500
value, the thread ID, the core index, probably, right?

430
00:23:38,200 --> 00:23:42,200
So we could, we could easily and we don't need any of this, right?

431
00:23:42,200 --> 00:23:44,200
None of this stuff is relevant for the profiler.

432
00:23:44,500 --> 00:23:49,000
So what we could probably do is change up how the stored element thing

433
00:23:49,000 --> 00:23:50,200
is working a little bit.

434
00:23:50,200 --> 00:23:51,900
So in here, where we have

435
00:23:52,200 --> 00:23:57,400
Those stored elements, I'm sorry, story events, write debug stored

436
00:23:57,400 --> 00:23:58,000
event.

437
00:24:01,900 --> 00:24:06,000
Could be quite a bit different than it is in terms of unions, right?

438
00:24:06,000 --> 00:24:09,900
So we could have a way that we store the event as one of the things

439
00:24:09,900 --> 00:24:10,600
that we store.

440
00:24:10,700 --> 00:24:14,300
But maybe a different thing that we store is like the the pointer

441
00:24:14,300 --> 00:24:14,900
struts.

442
00:24:15,000 --> 00:24:15,700
Right.

443
00:24:16,100 --> 00:24:20,000
Another thing we could even say is like, well okay inside here we're

444
00:24:20,000 --> 00:24:21,100
actually storing.

445
00:24:21,300 --> 00:24:24,200
You know, for floats, right?

446
00:24:24,300 --> 00:24:27,800
For floats is enough for two pointers, right?

447
00:24:28,400 --> 00:24:30,200
But I still think we want to go a little further and just say,

448
00:24:30,400 --> 00:24:31,000
That is not restore.

449
00:24:31,000 --> 00:24:34,200
So in here we could say, debug like,

450
00:24:36,600 --> 00:24:42,000
What we would call this debug profile node something like this.

451
00:24:42,600 --> 00:24:46,900
And in here we would just say like okay you know a debug profile node

452
00:24:47,500 --> 00:24:50,200
just has the the clock value.

453
00:24:53,300 --> 00:24:57,800
Of whatever it was here.

454
00:25:01,400 --> 00:25:03,800
Trying to think we want to basically make this that we don't add very

455
00:25:03,800 --> 00:25:08,900
much or if any storage to the debug event, we could have the, the

456
00:25:08,900 --> 00:25:10,000
profile node

457
00:25:11,900 --> 00:25:14,800
I don't know if we need to store the grid, we would have the thread

458
00:25:14,800 --> 00:25:17,400
ordinal instead of the thread ID, right?

459
00:25:17,700 --> 00:25:19,100
So here we would have like a

460
00:25:20,300 --> 00:25:21,200
Fred ordinal.

461
00:25:21,900 --> 00:25:25,300
I'm not sure what we would stick that in probably, you know, we can

462
00:25:25,300 --> 00:25:30,500
probably do thread, ordinal core index, kind of a thing like this and

463
00:25:30,500 --> 00:25:33,100
then we still have some more things here.

464
00:25:33,100 --> 00:25:37,800
I'm not sure what we would necessarily want and we could even have it

465
00:25:37,800 --> 00:25:40,600
so that maybe like we can aggregate calls.

466
00:25:40,600 --> 00:25:44,800
So maybe we've got like, you know, aggregate count.

467
00:25:45,400 --> 00:25:48,900
By the way, I started like a half hour late today so we're totally.

468
00:25:48,900 --> 00:25:50,000
We got a ways to go.

469
00:25:52,100 --> 00:25:55,000
So here I can store some things like this is maybe what I want to

470
00:25:55,000 --> 00:25:59,500
store as part of this and I don't know if I want the glitter not but

471
00:25:59,500 --> 00:26:01,000
either way, let's ignore that for now.

472
00:26:01,000 --> 00:26:03,400
Maybe I store a pointer back to the element, I'm not sure.

473
00:26:03,800 --> 00:26:06,800
But anyway, in the debug profile node then what we would have is just

474
00:26:06,800 --> 00:26:11,100
like underneath that we would have liked the first child.

475
00:26:11,100 --> 00:26:18,700
So the first thing that was called so child seems reasonable enough.

476
00:26:18,700 --> 00:26:20,200
Can't think of a better word.

477
00:26:20,600 --> 00:26:21,200
Inside a profile.

478
00:26:21,200 --> 00:26:22,700
No, we'd like here's the first child.

479
00:26:23,200 --> 00:26:25,500
And then we would have the, the next sibling.

480
00:26:26,000 --> 00:26:30,300
So we could just link these guys up and when we're in here, we've got

481
00:26:30,300 --> 00:26:31,400
the clock values.

482
00:26:31,700 --> 00:26:34,800
What we would want to do is say, well, we've got the begin clock in

483
00:26:34,800 --> 00:26:36,300
the end clock, right?

484
00:26:38,700 --> 00:26:41,900
So we can just record at the beginning, clock in the end clock as

485
00:26:45,600 --> 00:26:46,300
As the Span.

486
00:26:46,300 --> 00:26:47,900
In fact, we could even do one better.

487
00:26:48,100 --> 00:26:52,300
And in fact, we could say something more like duration so that we

488
00:26:52,300 --> 00:26:55,000
don't have to take as much time, right?

489
00:26:55,100 --> 00:26:57,800
We could even probably do since we know we wouldn't have four billion

490
00:26:57,800 --> 00:26:58,200
cycles.

491
00:26:58,200 --> 00:26:59,800
We could even probably do one better.

492
00:27:00,200 --> 00:27:01,600
And say, frame relative clock.

493
00:27:03,500 --> 00:27:06,600
So we take the frame relative clock, the duration, how many of them

494
00:27:06,600 --> 00:27:10,500
there were the ordinal and the core index in case we care and then the

495
00:27:10,500 --> 00:27:12,600
siblings and that should be.

496
00:27:12,600 --> 00:27:14,400
So mean, that's 16 bytes.

497
00:27:15,300 --> 00:27:22,200
And and well it's basically like a pair of pair of d words.

498
00:27:22,200 --> 00:27:25,000
Another parody words parody with parody words, right?

499
00:27:25,200 --> 00:27:26,800
So it's a cash, it's a cache line long.

500
00:27:26,800 --> 00:27:27,400
Is that right?

501
00:27:27,400 --> 00:27:33,100
So it's a it's, it's for things of, for know, it's going to be less

502
00:27:33,100 --> 00:27:33,200
than

503
00:27:33,600 --> 00:27:35,700
Never mind, it's only 16 bytes.

504
00:27:37,300 --> 00:27:44,800
So, yeah, so that seems reasonable to me right, 8 B, 8 B, no sorry, 32

505
00:27:44,800 --> 00:27:49,700
bytes half a cache line, so that seems reasonable to me and when you

506
00:27:49,700 --> 00:27:53,700
stick it in here, then you would be still like under a cache line long

507
00:27:53,700 --> 00:27:54,500
and that's all fine.

508
00:27:54,900 --> 00:27:57,200
So I think that probably what I'd say is.

509
00:27:57,600 --> 00:28:03,300
Let's just say that when we're in our storage, we can

510
00:28:03,400 --> 00:28:06,500
Can also have one of these.

511
00:28:08,500 --> 00:28:09,300
If we want to.

512
00:28:10,300 --> 00:28:15,100
And so now when we store events, we can choose to store profile nodes

513
00:28:15,100 --> 00:28:18,700
in addition to other information other event information.

514
00:28:18,700 --> 00:28:21,400
So sometimes we're just during the event information directly, which

515
00:28:21,400 --> 00:28:24,100
is what we store if we want to store data values and then we have the

516
00:28:24,100 --> 00:28:24,900
profile information.

517
00:28:24,900 --> 00:28:27,900
If we want to start profile values and then we just need to actually

518
00:28:27,900 --> 00:28:30,100
build these profile nodes as we go.

519
00:28:30,300 --> 00:28:33,600
And then once we actually do drawing of them, presumably, we can do a

520
00:28:33,600 --> 00:28:36,000
thing where we do this sensibly.

521
00:28:40,200 --> 00:28:43,000
So that we can walk those in a convenient way.

522
00:28:43,300 --> 00:28:50,700
And what we could do is try to think of like how we might want to do

523
00:28:50,700 --> 00:28:56,700
this aggregate, but what I'm thinking about is like, okay, so this is

524
00:28:56,700 --> 00:28:59,300
called attribution for the other calls that are in there.

525
00:28:59,400 --> 00:29:03,900
We could even be a little bit more feisty and say that, in addition,

526
00:29:03,900 --> 00:29:09,600
we also have the next of the same call, right?

527
00:29:09,800 --> 00:29:14,600
So we could have like, you know, sort of threading, two ways if we

528
00:29:14,600 --> 00:29:15,400
wanted to.

529
00:29:16,300 --> 00:29:18,000
So next for the same call.

530
00:29:18,000 --> 00:29:22,900
And next for the same parent, we could, if we wanted to build those up

531
00:29:22,900 --> 00:29:27,100
and those would be pretty easy things for us to to thread through,

532
00:29:27,700 --> 00:29:28,200
right?

533
00:29:30,200 --> 00:29:34,300
So yeah, I don't know if that's exactly what we want yet, but like,

534
00:29:34,300 --> 00:29:36,400
that's just an example of one thing we could do.

535
00:29:36,900 --> 00:29:40,100
And so let's say that we did that, let's take a look at what the

536
00:29:40,100 --> 00:29:43,200
render routine would be like if that was the day that we built,

537
00:29:43,200 --> 00:29:47,600
because that's something that we have now that we could actually use

538
00:29:47,800 --> 00:29:53,400
right and like that, that would use this structure, we could see if it

539
00:29:53,400 --> 00:29:54,300
makes any sense.

540
00:29:54,800 --> 00:29:59,800
So if I go to the profile drawing code which is in

541
00:30:01,100 --> 00:30:03,600
Let's take a look at what it would look like if I wanted to draw a

542
00:30:03,600 --> 00:30:04,600
profile view here.

543
00:30:05,000 --> 00:30:07,400
And so, if I want to draw a profile view, what I would do is say,

544
00:30:07,400 --> 00:30:09,800
okay, give me the profile node.

545
00:30:09,900 --> 00:30:13,200
So in here, we'd say, you know, what am I going to draw the profile

546
00:30:13,200 --> 00:30:13,700
of?

547
00:30:13,800 --> 00:30:16,700
Well, let's say that I passed that in.

548
00:30:16,800 --> 00:30:18,900
So I'd say here's a profile mode.

549
00:30:21,200 --> 00:30:22,900
And this is the root node.

550
00:30:23,000 --> 00:30:27,100
So it's this is the node that I'm going to start from when I'm

551
00:30:27,100 --> 00:30:27,600
drawing.

552
00:30:29,600 --> 00:30:33,300
So if that was the case, inside this profile node,

553
00:30:39,300 --> 00:30:41,900
I'm assuming these should be perform basically well.

554
00:30:43,300 --> 00:30:46,300
So let me think about that for a second.

555
00:31:02,000 --> 00:31:04,100
It seems to me that they should be per frame.

556
00:31:07,000 --> 00:31:12,400
So that I basically look into a particular frame and say, tell me what

557
00:31:12,400 --> 00:31:14,600
the profile node was for these.

558
00:31:14,600 --> 00:31:16,500
Tell me what the profile nodes were for this Frame.

559
00:31:17,100 --> 00:31:19,600
I think that's what I would want, right?

560
00:31:19,800 --> 00:31:26,600
So I think we could just say, okay you pass in the debug frame and you

561
00:31:26,600 --> 00:31:32,200
pass in that you're trying to look at and you pass in the route the

562
00:31:32,200 --> 00:31:36,600
the call node that you want and we go from there.

563
00:31:37,300 --> 00:31:40,500
I think least that seems relevant to me.

564
00:31:43,700 --> 00:31:44,000
Yeah.

565
00:31:45,400 --> 00:31:46,000
so,

566
00:31:47,900 --> 00:31:51,900
I guess the other thing too is do, we might not even need the frame

567
00:31:51,900 --> 00:31:52,300
for all.

568
00:31:52,300 --> 00:31:53,100
I really know.

569
00:31:53,800 --> 00:31:57,200
We'll see if we could even start to get away without the frame.

570
00:32:04,000 --> 00:32:05,500
In fact, we might not need the frame at all.

571
00:32:14,400 --> 00:32:17,100
So let's think about this.

572
00:32:17,900 --> 00:32:20,700
Suppose we decided started saying that the profile nodes were just

573
00:32:20,700 --> 00:32:23,800
kind of their own thing so in the profile node in addition to the

574
00:32:23,800 --> 00:32:27,300
duration and instead of saying the frame relative clock, maybe what we

575
00:32:27,300 --> 00:32:30,800
do is we say if the parents relative clock, right?

576
00:32:35,100 --> 00:32:37,200
So, it's inside the parent here.

577
00:32:37,200 --> 00:32:38,800
Is how many clocks in we were?

578
00:32:39,600 --> 00:32:42,300
And so then you would just say we wouldn't even talk about a frame.

579
00:32:42,800 --> 00:32:45,100
We're just saying you've got a profile note, I want to view the

580
00:32:45,100 --> 00:32:46,000
profile mode.

581
00:32:46,200 --> 00:32:50,500
The profile node is something that tells me this information here.

582
00:32:50,500 --> 00:32:54,700
So instead of the frame span being based on some kind of a begin end

583
00:32:54,700 --> 00:32:55,800
clock situation instead.

584
00:32:55,800 --> 00:32:59,100
I would just say well what is the duration of this thing?

585
00:32:59,200 --> 00:32:59,800
That's my

586
00:33:00,000 --> 00:33:02,000
An right.

587
00:33:03,500 --> 00:33:06,200
Then we come through and we draw these things, instead of debug

588
00:33:06,200 --> 00:33:08,400
variable link, I'm going to iterate over the profile nodes.

589
00:33:08,600 --> 00:33:10,700
So I'm going to say all right I've got profile nodes.

590
00:33:13,500 --> 00:33:17,500
So we come through here, and I say, whatever this thing is that, I'm

591
00:33:17,500 --> 00:33:20,300
looking at this debug profile node, right?

592
00:33:20,900 --> 00:33:23,400
And this is kind of nice too, because if the profile nodes are

593
00:33:23,400 --> 00:33:27,800
entirely on a frame, then when we free them, we can freed the whole

594
00:33:27,800 --> 00:33:29,800
set of profile nodes with the frame.

595
00:33:31,700 --> 00:33:34,200
Pretty easily, right?

596
00:33:36,900 --> 00:33:38,200
And that seems pretty good to me too.

597
00:33:38,200 --> 00:33:40,400
So we'll take a look at what happens with that in a minute.

598
00:33:40,400 --> 00:33:44,600
But anyway, so we'd come through here and we'd say, all right for this

599
00:33:44,800 --> 00:33:48,900
root node, I think is what we called it right for the root node.

600
00:33:51,800 --> 00:33:55,900
We just want to start by asking about the the children.

601
00:33:56,100 --> 00:33:57,900
So, we would go to the first child.

602
00:33:57,900 --> 00:34:00,400
We would run through all of the children that there are

603
00:34:09,300 --> 00:34:13,100
And since we're doing one by parent, here we would just step to the

604
00:34:13,100 --> 00:34:14,199
parent each time.

605
00:34:15,100 --> 00:34:18,100
Then in here, we don't really need this stuff.

606
00:34:18,100 --> 00:34:21,800
I don't think oh, well I guess yeah this is the last thing we would

607
00:34:21,800 --> 00:34:25,900
have to have we don't really have any way of getting back to

608
00:34:26,100 --> 00:34:30,100
information about what this was so we would finally I think need a

609
00:34:30,100 --> 00:34:32,800
debug element pointer right?

610
00:34:32,900 --> 00:34:35,500
So yeah it's a little bit bigger than I would like

611
00:34:36,500 --> 00:34:39,699
But not the end of the world, still not quite a cache line.

612
00:34:39,699 --> 00:34:45,600
Write cache line is like eight pointers and we're still too shy of

613
00:34:45,600 --> 00:34:46,000
that.

614
00:34:46,400 --> 00:34:51,100
So not too bad and when paired with this when paired with this guy it

615
00:34:51,100 --> 00:34:52,300
would basically be a cache line.

616
00:34:55,699 --> 00:35:00,700
Yeah and the debug profile node I guess it's got its inside a store at

617
00:35:00,700 --> 00:35:01,300
event.

618
00:35:02,600 --> 00:35:03,800
This Frame index.

619
00:35:04,700 --> 00:35:07,800
I guess we would possibly still want it's a little weird because the

620
00:35:07,800 --> 00:35:10,900
profile node probably should be the thing that stores, the frame and X

621
00:35:10,900 --> 00:35:11,200
in there.

622
00:35:11,400 --> 00:35:14,900
And this debug event should probably actually have been smuggled in.

623
00:35:15,000 --> 00:35:19,400
So at some level I that this it's probably the fact that this, debug

624
00:35:19,400 --> 00:35:23,900
stored event should itself just have been a union but we won't worry

625
00:35:23,900 --> 00:35:25,400
about that quite yet.

626
00:35:26,000 --> 00:35:26,500
Anyway.

627
00:35:26,800 --> 00:35:31,200
So in here we come through we say we've got the debug element, we can

628
00:35:31,200 --> 00:35:34,400
get that from asking what the nodes element is.

629
00:35:35,400 --> 00:35:38,600
We can then go through and do the drawing.

630
00:35:39,100 --> 00:35:42,200
We know that we're actually going to draw every element so that's not

631
00:35:42,200 --> 00:35:43,100
really a big deal.

632
00:35:43,400 --> 00:35:46,600
And for now I'll just draw the top level elements, but then in the

633
00:35:46,600 --> 00:35:53,900
future, we can draw Sub elements like of that top level element of

634
00:35:53,900 --> 00:35:54,500
each element.

635
00:35:54,500 --> 00:35:55,500
We could make it recursively.

636
00:35:55,700 --> 00:35:58,200
Or we could do, who knows what could do, all sorts of things?

637
00:35:58,900 --> 00:35:59,800
Anyway, so

638
00:36:00,000 --> 00:36:03,000
Here we've got open event and this oldest event thing.

639
00:36:03,000 --> 00:36:05,000
We don't care about that anymore, right?

640
00:36:05,000 --> 00:36:06,400
We don't care about any of this stuff.

641
00:36:07,300 --> 00:36:08,900
We don't care about the framing nice as we know.

642
00:36:08,900 --> 00:36:11,700
We're always in the same frame that we're asking about.

643
00:36:13,700 --> 00:36:16,200
And we don't care about Annie any of this at all.

644
00:36:16,500 --> 00:36:17,700
None of this matters.

645
00:36:17,900 --> 00:36:19,900
So we're just down to drawing the rectangle.

646
00:36:19,900 --> 00:36:21,300
That's all we need to do now.

647
00:36:26,000 --> 00:36:33,700
Okay, and what we want to say here is that the stuff that we were

648
00:36:33,700 --> 00:36:39,500
doing like with the grids and all that, we have the debug element now.

649
00:36:39,600 --> 00:36:44,100
So we can use that as any time we were actually looking for the grid

650
00:36:44,100 --> 00:36:45,100
that doesn't even matter.

651
00:36:45,100 --> 00:36:49,600
But point being so in here, we've got open Event, clock closed event

652
00:36:49,600 --> 00:36:50,100
clock.

653
00:36:50,300 --> 00:36:54,300
These are no longer what we actually need to worry about.

654
00:36:54,400 --> 00:37:00,700
Now we just need to know what the like, what the duration is and and

655
00:37:00,700 --> 00:37:05,400
start with the Minix and go, however, far, we need to go based on the

656
00:37:05,400 --> 00:37:06,800
duration, right?

657
00:37:06,800 --> 00:37:12,600
So, all we need to do is say whatever this node is, its duration is

658
00:37:12,600 --> 00:37:15,600
how far we would go from, its starting point and to find the starting

659
00:37:15,600 --> 00:37:19,500
point, we just need to know what its parent relative clock is because

660
00:37:19,500 --> 00:37:22,400
whatever its parent relative clock is, is where it would be in the

661
00:37:22,400 --> 00:37:22,800
graph.

662
00:37:22,800 --> 00:37:24,000
We don't longer need to

663
00:37:24,400 --> 00:37:26,500
act out the begin clock because that's already happened.

664
00:37:27,200 --> 00:37:31,000
So those are our begin and end our you know, right?

665
00:37:31,000 --> 00:37:31,900
Pretty straightforward.

666
00:37:33,400 --> 00:37:35,300
And I think that's all we would really need.

667
00:37:35,600 --> 00:37:38,900
So now if I were to compile this, I think we could get it compiling,

668
00:37:38,900 --> 00:37:40,500
even though we're not building any of this.

669
00:37:42,100 --> 00:37:42,600
Let's see here.

670
00:37:42,600 --> 00:37:43,300
This profile.

671
00:37:43,300 --> 00:37:44,400
Nude probably needs it.

672
00:37:45,700 --> 00:37:46,000
Yeah.

673
00:37:47,500 --> 00:37:54,100
So here in this course, if I type this correctly here, in this code,

674
00:37:54,100 --> 00:37:55,500
we don't actually have any of these.

675
00:37:55,500 --> 00:37:58,400
We haven't built any of them, but it's just a way what I'm basically

676
00:37:58,400 --> 00:38:01,700
doing right now is saying, I want to know

677
00:38:03,400 --> 00:38:06,500
The code that this is like me writing the use of code first, like, I

678
00:38:06,500 --> 00:38:07,200
always say to do.

679
00:38:07,400 --> 00:38:11,300
I want to know that the thing that I'm sort of envisioning here is

680
00:38:11,300 --> 00:38:13,700
actually going to work to do the thing that I want.

681
00:38:14,000 --> 00:38:18,000
And so while I sort of had an idea of how it probably should be

682
00:38:18,000 --> 00:38:20,300
stored, I didn't want to commit to Computing.

683
00:38:20,300 --> 00:38:22,900
Something that I don't even know if it's going to work with the code,

684
00:38:22,900 --> 00:38:24,200
the way that we want.

685
00:38:24,400 --> 00:38:27,100
And so I just wanted to verify that was the case and so that like

686
00:38:27,100 --> 00:38:29,000
convinces me, that that's relatively clean.

687
00:38:29,100 --> 00:38:32,800
And furthermore, now I know approach file node, I can go ahead and say

688
00:38:33,000 --> 00:38:36,700
This is like the particular node that we're looking for, I have an

689
00:38:36,700 --> 00:38:39,300
element pointer and I can say like we're looking for this particular

690
00:38:39,300 --> 00:38:40,900
element or whatever, right?

691
00:38:47,100 --> 00:38:47,500
Okay.

692
00:38:52,300 --> 00:38:52,800
See here.

693
00:39:01,200 --> 00:39:01,900
Still a little stuffy.

694
00:39:01,900 --> 00:39:03,200
I take allergy medication now.

695
00:39:05,300 --> 00:39:06,200
And it sort of works.

696
00:39:08,600 --> 00:39:12,100
I think it's better than without it but it's not still not perfect

697
00:39:13,500 --> 00:39:15,000
during allergy season, it's a bit rough.

698
00:39:15,900 --> 00:39:17,400
So if we were to do that,

699
00:39:19,000 --> 00:39:23,900
Then when I do draw a profile in here, what I could say is, all right,

700
00:39:23,900 --> 00:39:26,700
when we're going to draw the thread interval graph for now, let's just

701
00:39:26,700 --> 00:39:31,100
say that whatever the most recent frame is so the debug State most

702
00:39:31,100 --> 00:39:34,600
recent frame, whatever that is.

703
00:39:34,600 --> 00:39:38,200
And I guess I should probably verify here that I actually have one.

704
00:39:41,200 --> 00:39:44,300
Because if there's no frames yet, that wouldn't work.

705
00:39:45,500 --> 00:39:49,500
So assuming we've got a frame, then like the most recent frame I want

706
00:39:49,500 --> 00:39:51,800
to know what it's route profile node is.

707
00:39:52,100 --> 00:39:54,800
So that would be a thing that we would have on

708
00:39:57,000 --> 00:39:57,700
on each frame.

709
00:39:58,200 --> 00:39:59,400
So let's see.

710
00:39:59,400 --> 00:40:00,700
Here's a debug frame.

711
00:40:01,100 --> 00:40:04,800
So in here I would have a thing that was like Hey we're what's the

712
00:40:04,800 --> 00:40:06,200
debug profile node?

713
00:40:09,100 --> 00:40:11,100
That's like the whole time of this Frame.

714
00:40:12,800 --> 00:40:17,600
Okay, so in the thread interval graph it will just do that call and

715
00:40:17,600 --> 00:40:20,900
that's all I would need it to do now we're compiling but of course

716
00:40:20,900 --> 00:40:24,400
we're not actually generating any of those things so that wouldn't

717
00:40:24,400 --> 00:40:25,400
really help us at all.

718
00:40:25,800 --> 00:40:29,600
And I suppose I can also guarantee that we have a route profile mode.

719
00:40:29,700 --> 00:40:31,900
So here, if we ran, I don't even think we would crash.

720
00:40:31,900 --> 00:40:34,500
We just won't see anything, right?

721
00:40:35,200 --> 00:40:37,700
So our profile is garbage, right?

722
00:40:37,700 --> 00:40:39,800
There's no nothing in it.

723
00:40:43,400 --> 00:40:51,100
So yeah, so ignoring that part of it, what we now need to do is is

724
00:40:51,100 --> 00:40:53,300
figure out how we're going to sort of build those those things up.

725
00:40:53,300 --> 00:40:56,700
And the first thing I want to just look at is when we store an event,

726
00:40:57,900 --> 00:41:02,300
oops, store event, when we store an event, I want to see if there's

727
00:41:02,300 --> 00:41:06,600
something we can do to make sure that things get freed properly, right

728
00:41:07,500 --> 00:41:09,300
and you can see how we're doing that here.

729
00:41:09,400 --> 00:41:10,300
We call free.

730
00:41:10,300 --> 00:41:11,300
Oldest frame.

731
00:41:12,300 --> 00:41:18,500
And so if I go to free oldest frame and I look at what's happening in

732
00:41:18,500 --> 00:41:23,900
there, you can see that what happens is we doing?

733
00:41:25,600 --> 00:41:26,500
Well, we call free frame.

734
00:41:26,900 --> 00:41:31,400
We Loop through all of the elements and we look to see if they have

735
00:41:31,400 --> 00:41:35,100
events that are on that frame and we get rid of them.

736
00:41:36,600 --> 00:41:40,700
I believe that we'll just work with our profile nodes.

737
00:41:41,500 --> 00:41:45,700
Like, I think, at least I think it should.

738
00:41:46,000 --> 00:41:52,700
There is one caveat that I think we would have to worry about, and

739
00:41:52,800 --> 00:41:55,800
we'll see when we get there, and it has to do with when we actually do

740
00:41:55,800 --> 00:41:59,000
element attribution for these profile nodes.

741
00:41:59,600 --> 00:41:59,800
So,

742
00:42:00,800 --> 00:42:03,800
Yeah, we'll take a look at that a little bit later.

743
00:42:04,400 --> 00:42:09,300
Okay, so assuming that, that that would just work all we really need

744
00:42:09,300 --> 00:42:12,100
to do now is actually build these as we go.

745
00:42:12,300 --> 00:42:15,200
And so when we're coming through with our collate, debug oops, that's

746
00:42:15,200 --> 00:42:16,100
not going to help.

747
00:42:16,500 --> 00:42:19,900
As we're coming through, with our collate, debug records, we already

748
00:42:19,900 --> 00:42:20,600
know.

749
00:42:22,500 --> 00:42:28,000
We already know exactly what where we need to do this in begin block

750
00:42:28,000 --> 00:42:28,300
and end.

751
00:42:28,300 --> 00:42:34,300
Block is specifically where the information is is known and where we

752
00:42:34,300 --> 00:42:35,200
want to record this.

753
00:42:35,200 --> 00:42:40,700
And what we don't want to do at this point is actually like in fact we

754
00:42:40,700 --> 00:42:44,000
may not even want to do this, get element from event.

755
00:42:44,000 --> 00:42:48,300
We don't necessarily even want to store these in the profile group for

756
00:42:48,300 --> 00:42:48,500
now.

757
00:42:48,500 --> 00:42:51,800
I guess we can but we could even consider doing something where we

758
00:42:51,800 --> 00:42:52,300
don't even use

759
00:42:52,500 --> 00:42:54,500
Thursday by governments for it, but I'm not sure.

760
00:42:55,100 --> 00:42:56,600
So, we'll leave those for now.

761
00:42:57,900 --> 00:43:01,900
The point being what we want to do here is say, okay, any time there's

762
00:43:01,900 --> 00:43:05,800
one of these, these open debug blocks.

763
00:43:06,400 --> 00:43:10,700
What we want to do is we want to instead of calling store event, we

764
00:43:10,700 --> 00:43:17,200
want to call sort of a, we want to make a call that's going to add one

765
00:43:17,200 --> 00:43:20,400
of these profile nodes into the right place, right?

766
00:43:21,300 --> 00:43:25,000
That's what we're actually looking to do here and so

767
00:43:29,600 --> 00:43:31,200
I have to think for a second.

768
00:43:31,700 --> 00:43:32,800
Let me take a look here.

769
00:43:34,800 --> 00:43:35,400
so,

770
00:43:47,300 --> 00:43:51,100
are you all right, so if we have this

771
00:43:55,700 --> 00:44:00,000
If we have this, this concept of the debug profile nodes, it occurs to

772
00:44:00,000 --> 00:44:03,900
me that these next pointers actually would still work.

773
00:44:03,900 --> 00:44:08,400
So really stored event can still do almost exactly what it was going

774
00:44:08,400 --> 00:44:08,700
to do.

775
00:44:08,700 --> 00:44:14,200
And so probably what we would say is next for same call is the same

776
00:44:14,200 --> 00:44:16,000
information that next to a storing.

777
00:44:16,000 --> 00:44:18,800
So we don't actually need to store that instead.

778
00:44:18,800 --> 00:44:21,900
What we could say is instead of doing profile nodes here, let's just

779
00:44:21,900 --> 00:44:23,600
do debug stored event for all of these.

780
00:44:23,600 --> 00:44:25,600
So that we can always just

781
00:44:25,700 --> 00:44:27,700
Reverse the stored event itself.

782
00:44:28,100 --> 00:44:33,800
That reduces the size as well as essentially making all of this work

783
00:44:33,800 --> 00:44:38,200
properly with the next pointers, which is kind of great.

784
00:44:38,300 --> 00:44:42,400
Because that means, it will automatically clean itself up as we move

785
00:44:42,400 --> 00:44:43,600
through that part.

786
00:44:43,700 --> 00:44:47,500
So we know that first child and next same parent will automatically be

787
00:44:47,500 --> 00:44:50,100
irrelevant because the whole frame, it's flushed at the same time.

788
00:44:50,100 --> 00:44:53,200
So all those events will go away at the same time and then we also

789
00:44:53,200 --> 00:44:55,300
know that the debug stored event

790
00:44:55,600 --> 00:44:59,800
URS the next chain, which allows us to walk to

791
00:45:00,000 --> 00:45:04,300
People who are the same call site trivially as well so that's kind of

792
00:45:04,300 --> 00:45:04,700
nice.

793
00:45:10,600 --> 00:45:11,700
I really like this kind of thing.

794
00:45:12,700 --> 00:45:14,100
In case you couldn't tell anyway.

795
00:45:15,600 --> 00:45:15,900
Hmm.

796
00:45:17,600 --> 00:45:19,400
That's kind of how you know, if you're an engine program and if you

797
00:45:19,400 --> 00:45:21,200
like really weird, tricky stuff like this.

798
00:45:24,000 --> 00:45:25,800
Pretty much pretty much what that means.

799
00:45:26,300 --> 00:45:27,400
If you're sitting around.

800
00:45:27,400 --> 00:45:31,000
Like, if you're sitting around going, I really want to get to

801
00:45:31,000 --> 00:45:34,900
programming the actual game, you're probably are more of a game

802
00:45:35,300 --> 00:45:36,900
designer programmer, right?

803
00:45:37,000 --> 00:45:40,200
If you're sitting around going, like I much rather be figuring out how

804
00:45:40,200 --> 00:45:43,400
to do like the inline profiling and have that running at the same time

805
00:45:43,400 --> 00:45:46,200
and have it work across threads and bottle of, then you're probably an

806
00:45:46,200 --> 00:45:47,800
engine programmer, right?

807
00:45:47,800 --> 00:45:52,500
That's just that's just how that goes, neither good nor bad, it's just

808
00:45:53,200 --> 00:45:53,700
a litmus test.

809
00:45:53,900 --> 00:45:54,200
I guess.

810
00:45:55,100 --> 00:46:00,200
So anyway inside here, if I am going to start building these up, then

811
00:46:00,200 --> 00:46:04,300
what I need to know is when I do begin block, I need some way of

812
00:46:04,300 --> 00:46:07,800
adding these to whatever the open block is.

813
00:46:08,000 --> 00:46:13,000
And if there's no open block, then I'm going to need to essentially

814
00:46:13,000 --> 00:46:17,200
have that sort of Route group be the thing that we add to.

815
00:46:17,500 --> 00:46:20,800
And so, I don't actually know what we're doing right now for that.

816
00:46:20,900 --> 00:46:22,400
I think it means that

817
00:46:24,400 --> 00:46:26,400
This first open code block thing here.

818
00:46:26,400 --> 00:46:29,300
I'm assuming, when we do allocate open, debug block,

819
00:46:31,500 --> 00:46:34,700
I'm assuming when we do this here, it's entirely possible.

820
00:46:34,700 --> 00:46:37,600
That the open d block is not valid.

821
00:46:40,700 --> 00:46:43,500
I have no idea why this is passed as an address like that.

822
00:46:50,900 --> 00:46:53,400
Because it gets replaced with this one.

823
00:46:53,600 --> 00:46:54,700
It's just a shorthand.

824
00:46:56,900 --> 00:46:57,400
So yeah.

825
00:46:57,400 --> 00:47:03,800
So this might be zero right there might not be an open block and so

826
00:47:03,800 --> 00:47:06,200
when we're actually doing that operation

827
00:47:10,700 --> 00:47:13,700
When were actually doing that operation, if that thing was going to be

828
00:47:13,700 --> 00:47:17,100
0, then we would know that we would have to create essentially the

829
00:47:17,100 --> 00:47:18,500
root one of these.

830
00:47:19,000 --> 00:47:21,300
But either way we're going to create one right?

831
00:47:21,300 --> 00:47:23,600
Either way we're going to do a store event.

832
00:47:24,300 --> 00:47:25,100
You know I'm saying?

833
00:47:25,900 --> 00:47:29,600
And so what we could do and this is kind of being mr.

834
00:47:29,600 --> 00:47:30,800
Cheesy mr.

835
00:47:30,800 --> 00:47:31,100
Cheese?

836
00:47:31,100 --> 00:47:34,500
Pants cheese, man, but you know, I mean, sometimes, mr.

837
00:47:34,500 --> 00:47:38,200
Cheese mayonnaise, cheese, cheese, pants, E cheese, man is want is the

838
00:47:38,200 --> 00:47:39,000
person who

839
00:47:39,200 --> 00:47:50,600
Need to create the cheese plate that for the wine tasting of game

840
00:47:50,600 --> 00:47:51,400
development.

841
00:47:52,000 --> 00:47:53,300
It's a very good metaphor.

842
00:47:53,300 --> 00:47:56,500
Don't just just let it be, let it be what it is.

843
00:47:56,500 --> 00:47:59,800
Don't try to force it to conform to your, you know, stereotype.

844
00:48:00,000 --> 00:48:01,300
What a metaphor has to be.

845
00:48:02,600 --> 00:48:06,200
So when we do the store event, what we could do is just leave, our

846
00:48:06,200 --> 00:48:08,800
current store event code and just be cheese, man.

847
00:48:08,800 --> 00:48:12,400
And say yeah it stores the event happy birthday, I don't care.

848
00:48:12,500 --> 00:48:14,600
It's going to return one of these and I'm immediately going to

849
00:48:14,600 --> 00:48:18,300
overwrite it instead of the event code that's in there with the actual

850
00:48:18,300 --> 00:48:19,200
profile no code.

851
00:48:19,200 --> 00:48:22,100
Because that's just the kind of person that I am.

852
00:48:22,300 --> 00:48:24,100
So here is the bookstore at event.

853
00:48:24,400 --> 00:48:28,800
And here's the the the node this is actually now the profile node that

854
00:48:28,800 --> 00:48:29,600
I'm getting back.

855
00:48:30,000 --> 00:48:33,700
And now I'm just going to straight up like romp right over that and

856
00:48:33,700 --> 00:48:36,600
say like hey thanks for filling that part out that I cared about.

857
00:48:36,600 --> 00:48:40,200
I'm about to now go rewrite all of it.

858
00:48:40,200 --> 00:48:42,700
So the element I know that's the element.

859
00:48:44,200 --> 00:48:48,700
The first child I know is going to be 0, right?

860
00:48:49,100 --> 00:48:55,000
The next with same parent is also going to be 0, and because I'm the

861
00:48:55,000 --> 00:48:57,400
first one, I'm sorry.

862
00:48:57,400 --> 00:48:59,800
I'm the last one in that.

863
00:49:00,000 --> 00:49:00,900
Killer case.

864
00:49:01,500 --> 00:49:03,700
And I think we're probably going to need a first and last child would

865
00:49:03,700 --> 00:49:04,500
be my assumption.

866
00:49:04,500 --> 00:49:07,400
Oh no, we don't because we don't add after this.

867
00:49:07,700 --> 00:49:09,200
This is going to be, this is going to be good.

868
00:49:10,200 --> 00:49:10,900
This is going to be good.

869
00:49:11,000 --> 00:49:12,500
You ready for this anyway?

870
00:49:12,600 --> 00:49:16,600
So our parent relative clock, we have to compute our duration, we

871
00:49:16,600 --> 00:49:18,100
don't know yet, right?

872
00:49:18,200 --> 00:49:20,400
Our duration will get computed later.

873
00:49:23,400 --> 00:49:24,600
That's going to be an end, block.

874
00:49:26,500 --> 00:49:29,600
Our aggregate count is not something we're actually going to talk

875
00:49:29,600 --> 00:49:32,200
about today, probably our thread ordinal.

876
00:49:33,600 --> 00:49:37,200
We need to compute somehow, and I don't know if we're actually have

877
00:49:37,200 --> 00:49:37,300
this.

878
00:49:37,300 --> 00:49:39,700
Now, do we have this in the debug block?

879
00:49:39,900 --> 00:49:41,200
I suspect that we do.

880
00:49:48,600 --> 00:49:52,100
Open debug block, parent free opening events.

881
00:49:52,100 --> 00:49:55,300
Elements, starting from index.

882
00:49:55,500 --> 00:49:57,300
How do we not have

883
00:49:59,000 --> 00:50:00,700
Oh, we've got the thread.

884
00:50:01,400 --> 00:50:02,400
There's it is right there.

885
00:50:02,600 --> 00:50:05,000
There's Arlene index, that's what we wanted.

886
00:50:05,100 --> 00:50:05,800
Bam,

887
00:50:08,400 --> 00:50:12,900
See, I'm talking about man, it's right there, right there.

888
00:50:13,400 --> 00:50:19,800
Beautiful core index, we still don't know, we'll save it as if we got

889
00:50:19,800 --> 00:50:24,000
it because on other on some other hardware and print these not this

890
00:50:24,000 --> 00:50:29,300
one you would be able to call the arditi SCP and get the core index.

891
00:50:29,800 --> 00:50:33,800
Maybe I still not clear on whether it gives you back that or not, but

892
00:50:33,800 --> 00:50:35,000
that's beside the point.

893
00:50:36,000 --> 00:50:38,700
Anyway Palin railroad apparent relative.

894
00:50:38,700 --> 00:50:42,300
Clock is just going to be whatever our clock was.

895
00:50:44,000 --> 00:50:45,400
- whatever that.

896
00:50:45,400 --> 00:50:51,400
So, the in the, debug, the open debug block, the opening event, is all

897
00:50:51,400 --> 00:50:53,000
we need to know, right?

898
00:50:53,000 --> 00:50:56,600
Because whatever the opening event was in our parent block, that's

899
00:50:56,600 --> 00:50:59,700
going to be what our relative clock actually is.

900
00:51:00,400 --> 00:51:05,300
And so, there's two, there's two cases where this could be happening

901
00:51:05,600 --> 00:51:10,100
when we call this begin block, if well, I guess there's no, there's

902
00:51:10,100 --> 00:51:10,700
not two cases.

903
00:51:11,000 --> 00:51:17,600
We always need to have an open debug block, that's the root block for,

904
00:51:18,000 --> 00:51:22,100
you know, the the the frame, not an open debugging, shouldn't say that

905
00:51:22,200 --> 00:51:25,800
we always need to have a notion of that parent node.

906
00:51:25,900 --> 00:51:29,300
And so, whatever it is, we're going to have one of those but we just

907
00:51:29,300 --> 00:51:29,800
need to eat.

908
00:51:30,000 --> 00:51:33,300
Either get it out of the open debug block, or it's the one for the

909
00:51:33,300 --> 00:51:35,300
frame, one of the other, right?

910
00:51:35,700 --> 00:51:37,800
So when we go, look at the parent relative clock,

911
00:51:39,000 --> 00:51:42,600
What we're going to be doing, is taking whatever that parent was.

912
00:51:42,700 --> 00:51:46,400
So whatever, our parent profile node is, which will compute in a

913
00:51:46,400 --> 00:51:51,300
second, whatever, its clock was.

914
00:51:51,500 --> 00:51:53,600
We that's the one that we need.

915
00:51:54,200 --> 00:51:55,700
And I guess, like I said, we kind of need.

916
00:51:55,700 --> 00:51:57,500
We need an open, debug block for it.

917
00:51:57,500 --> 00:51:59,400
We need there to always be one of those.

918
00:51:59,600 --> 00:52:02,100
So I think what we need to do is just make sure that they're always

919
00:52:02,100 --> 00:52:03,500
isn't open debug block.

920
00:52:06,700 --> 00:52:07,100
Or.

921
00:52:08,700 --> 00:52:11,300
We always need to know what the frames clock is so.

922
00:52:11,300 --> 00:52:13,200
So I guess we just need a clock basis.

923
00:52:13,400 --> 00:52:16,400
We need to basically say, here's our clock, and we need our clock

924
00:52:16,400 --> 00:52:17,000
bases.

925
00:52:17,100 --> 00:52:20,600
And I guess the way that we do that is we say, well, did we have one

926
00:52:20,600 --> 00:52:22,900
of the open code blocks or not?

927
00:52:22,900 --> 00:52:23,300
Right?

928
00:52:23,400 --> 00:52:25,800
Because that's going to determine who our parent was.

929
00:52:28,100 --> 00:52:29,000
If that makes sense.

930
00:52:30,600 --> 00:52:31,600
You're organized this way.

931
00:52:32,800 --> 00:52:34,000
So mmm.

932
00:52:35,400 --> 00:52:39,100
What we need to know, here is whatever that clock basis is.

933
00:52:39,200 --> 00:52:42,200
So we have a clock basis value and that clock basis.

934
00:52:42,200 --> 00:52:44,300
We know what framework in, right?

935
00:52:44,300 --> 00:52:50,000
We have a collation frame, so our debug State collation frame.

936
00:52:51,100 --> 00:52:55,000
Whatever that begin clock was, that's our clock basis.

937
00:52:55,100 --> 00:52:58,500
If we don't have it open group because that's the beginning, right?

938
00:52:58,500 --> 00:53:02,600
But if we do have an open group, so if thread first, open code block,

939
00:53:06,000 --> 00:53:11,400
Is valid, then whatever that first open code block is stores the event

940
00:53:11,400 --> 00:53:15,000
that started the block, which is our apparent, right?

941
00:53:15,200 --> 00:53:20,000
So the first open code Block, it's got a shoot me.

942
00:53:21,100 --> 00:53:23,300
First open call block, has an opening event.

943
00:53:23,300 --> 00:53:24,200
That opening events.

944
00:53:24,200 --> 00:53:27,300
Clock is exactly the thing that we want for our clock basis because we

945
00:53:27,300 --> 00:53:28,700
want to base it off of that.

946
00:53:28,800 --> 00:53:33,100
So that gives us essentially this computation exactly what we wanted,

947
00:53:33,600 --> 00:53:34,200
right?

948
00:53:34,900 --> 00:53:36,900
So then in here, you know, do we have a child?

949
00:53:37,000 --> 00:53:39,400
Not at the outset we would add one later if we actually.

950
00:53:39,400 --> 00:53:42,300
We're going to have one, we need to store something else in the open,

951
00:53:42,300 --> 00:53:43,500
debug block for sure.

952
00:53:43,500 --> 00:53:49,000
And that is, of course, if there was going to be debug start event the

953
00:53:49,000 --> 00:53:49,600
the

954
00:53:51,200 --> 00:53:55,500
First child, last child that we're sort of building up here.

955
00:54:01,300 --> 00:54:03,300
I guess they're always going to be the case because for opened email

956
00:54:03,300 --> 00:54:04,200
box, you always have them.

957
00:54:05,300 --> 00:54:09,000
So we don't need to store anything here for this one and four.

958
00:54:09,000 --> 00:54:12,100
Next with same parent, we will need to store something.

959
00:54:16,900 --> 00:54:19,400
Once we actually added in, right?

960
00:54:19,400 --> 00:54:22,700
We're going to need, it's going to happen when we when we come through

961
00:54:22,700 --> 00:54:23,000
here.

962
00:54:24,000 --> 00:54:25,300
So I think this is all fine.

963
00:54:25,400 --> 00:54:29,100
The only thing that we don't have here is the duration so we'll set

964
00:54:29,100 --> 00:54:30,900
the duration 20 for now.

965
00:54:31,400 --> 00:54:34,200
And then what we do is in sight and block when we come through and

966
00:54:34,200 --> 00:54:40,000
we're going to end the block, then we can say ok now is the time when

967
00:54:40,000 --> 00:54:40,800
we will

968
00:54:42,700 --> 00:54:44,600
When will close it up, right?

969
00:54:44,900 --> 00:54:48,200
So in here, we'd say, with the matching block assuming that the events

970
00:54:48,200 --> 00:54:52,200
match, then we now know that we had this, we don't need to store

971
00:54:52,200 --> 00:54:53,500
another event for the end.

972
00:54:53,500 --> 00:54:54,500
That's not necessary.

973
00:54:55,000 --> 00:54:59,400
We only need to store an event for the, the initial one, right?

974
00:54:59,800 --> 00:55:02,800
So, then what we can do is say, well, okay, we've got the node.

975
00:55:06,900 --> 00:55:11,100
You know what, I just realized this is actually stored event, and this

976
00:55:11,100 --> 00:55:16,100
is debug profile node node equals stored event.

977
00:55:24,800 --> 00:55:25,200
What time?

978
00:55:25,200 --> 00:55:26,500
You got five minutes.

979
00:55:27,000 --> 00:55:28,000
Not quite there yet.

980
00:55:28,100 --> 00:55:33,500
That's too bad, but I'm pretty confident that this is all what we

981
00:55:33,500 --> 00:55:33,700
want.

982
00:55:33,700 --> 00:55:35,200
Anyway, so that's good.

983
00:55:36,000 --> 00:55:39,200
All right, so, all that stuff is good, I think we're all happy about

984
00:55:39,200 --> 00:55:44,100
this, but then when we get down here, what we do is, we need to again

985
00:55:44,300 --> 00:55:46,600
figure out where that note is, right?

986
00:55:47,600 --> 00:55:51,400
The one that we opened before, and then in the node duration, what we

987
00:55:51,400 --> 00:55:53,300
need to do is take whatever.

988
00:55:53,500 --> 00:55:59,600
This event is and this event this tells us the duration, right?

989
00:55:59,700 --> 00:56:03,900
Because whatever event we're on, that's the ending clock whatever

990
00:56:03,900 --> 00:56:04,100
event.

991
00:56:04,100 --> 00:56:07,600
We started on that was the starting clock, right?

992
00:56:09,900 --> 00:56:13,800
That tells us how long it is, which could have been longer than a

993
00:56:13,800 --> 00:56:14,700
frame by the way.

994
00:56:15,000 --> 00:56:19,700
This end block might happen in another frame, but that's okay, because

995
00:56:19,800 --> 00:56:22,700
as we're just classifying things by what frame they started in, and

996
00:56:22,700 --> 00:56:26,600
that's fine, you know, that's a totally reasonable thing for us to do.

997
00:56:26,600 --> 00:56:30,700
There's no reason we can't do it, so, you know, off we go.

998
00:56:31,600 --> 00:56:32,800
So I think that's all good.

999
00:56:32,800 --> 00:56:37,300
We've got the matching blocks, we've got the opening event, got the

1000
00:56:37,300 --> 00:56:37,800
events match.

1001
00:56:37,800 --> 00:56:38,500
That's all good.

1002
00:56:39,800 --> 00:56:43,200
So I think all of that looks reasonable to me.

1003
00:56:43,400 --> 00:56:46,600
So all we need to do now is have the debug profile node.

1004
00:56:46,700 --> 00:56:47,700
Come back to us here.

1005
00:56:47,700 --> 00:56:49,000
The one that we're going to edit.

1006
00:56:49,000 --> 00:56:50,100
I think that's pretty easy.

1007
00:56:50,100 --> 00:56:51,300
We just store that in here.

1008
00:56:51,300 --> 00:56:56,300
We'd say sort event in the open debug block, we'd say what it's a node

1009
00:56:56,300 --> 00:56:57,600
was, right?

1010
00:56:59,000 --> 00:56:59,900
and so, we

1011
00:57:00,000 --> 00:57:03,900
Just say, okay in the matching block that profile mode.

1012
00:57:05,400 --> 00:57:10,700
We just want to again access the profile node of it, just call this a

1013
00:57:10,700 --> 00:57:11,100
node.

1014
00:57:15,000 --> 00:57:19,400
So then here, when we actually do this, we call the allocate debug

1015
00:57:19,400 --> 00:57:25,600
lock function, when we get it back, we want to store into that, debug

1016
00:57:25,600 --> 00:57:29,600
block the profile know that we had, right?

1017
00:57:29,600 --> 00:57:30,500
So we want to do this.

1018
00:57:32,600 --> 00:57:33,000
Okay.

1019
00:57:34,400 --> 00:57:36,900
So I think that's all good, pretty sure.

1020
00:57:36,900 --> 00:57:37,400
Anyway.

1021
00:57:39,400 --> 00:57:42,000
Debug stored event is not there yet.

1022
00:57:42,000 --> 00:57:45,800
So this has to be a struct go.

1023
00:57:48,200 --> 00:57:50,100
And let's see.

1024
00:57:50,100 --> 00:57:52,100
What is this talking about?

1025
00:57:53,100 --> 00:57:54,400
Debug profile node root?

1026
00:57:54,400 --> 00:57:55,000
Ah yes.

1027
00:57:55,200 --> 00:57:57,900
So these are actually stored event, right?

1028
00:58:13,200 --> 00:58:18,200
and then in here we can just say, oh yeah, when we are in the you

1029
00:58:18,200 --> 00:58:20,000
know, the spirit event

1030
00:58:24,300 --> 00:58:27,500
We just grabbed just that part for basically convenience of typing

1031
00:58:27,700 --> 00:58:28,100
groups.

1032
00:58:33,500 --> 00:58:34,500
Yeah.

1033
00:58:40,600 --> 00:58:42,200
What are you complaining about?

1034
00:58:45,800 --> 00:58:46,200
Yeah.

1035
00:58:46,200 --> 00:58:46,600
Okay.

1036
00:58:47,200 --> 00:58:50,000
So again we know that this is probably going to be less than 4 billion

1037
00:58:50,200 --> 00:58:53,400
because that would be a whole second that this thing took.

1038
00:58:54,000 --> 00:58:56,200
So we're hoping that that is not

1039
00:59:00,300 --> 00:59:01,700
We hope we never have a frame time.

1040
00:59:01,700 --> 00:59:02,700
That's that long.

1041
00:59:02,900 --> 00:59:07,900
That would be bad and if you know if it overflows it overflows that's

1042
00:59:07,900 --> 00:59:08,900
not the end of the world.

1043
00:59:09,000 --> 00:59:09,500
That's good.

1044
00:59:09,500 --> 00:59:17,100
Keep going here, Thread Lane index, head and Loops, that's not good.

1045
00:59:17,200 --> 00:59:17,600
There we go.

1046
00:59:19,600 --> 00:59:21,400
And event.

1047
00:59:23,600 --> 00:59:28,700
And to the profanity bookstore at event.

1048
00:59:29,800 --> 00:59:30,700
Oh right.

1049
00:59:30,700 --> 00:59:32,000
So this is actually going store.

1050
00:59:32,000 --> 00:59:32,300
Do that.

1051
00:59:32,500 --> 00:59:33,000
There we go.

1052
00:59:42,200 --> 00:59:44,400
Which is there a new object file?

1053
00:59:44,400 --> 00:59:46,800
Generated cannot convert.

1054
00:59:47,100 --> 00:59:48,200
Yeah, well, you know what?

1055
00:59:48,200 --> 00:59:51,200
Yes, you can because I'm telling you to so convert.

1056
00:59:51,700 --> 00:59:52,100
There we go.

1057
00:59:52,100 --> 00:59:54,100
So now we're all stored in you 32s.

1058
00:59:55,200 --> 00:59:55,600
All right.

1059
00:59:55,600 --> 00:59:59,800
So technically, I think we should not

1060
01:00:00,000 --> 01:00:04,700
Of any bugs at the moment because we're never adding anything to that

1061
01:00:04,700 --> 01:00:06,200
group group, right?

1062
01:00:06,600 --> 01:00:11,900
So, we're still kind of like, you know, in a place where we haven't

1063
01:00:11,900 --> 01:00:16,000
quite hooked up the route, so nothing's going to versed.

1064
01:00:16,100 --> 01:00:18,500
So we may have any, we may have plenty of bugs in there but they're

1065
01:00:18,500 --> 01:00:20,800
just we're not going to have any when we run the program because it's

1066
01:00:20,800 --> 01:00:22,200
not visiting it.

1067
01:00:22,800 --> 01:00:26,100
So hey, let me take, I'm going to take an extra five minutes because

1068
01:00:26,100 --> 01:00:29,800
I'm kind of really into this right now and I just want to

1069
01:00:30,000 --> 01:00:33,100
See what happens if we do and then we'll leave it for tomorrow to

1070
01:00:33,100 --> 01:00:33,800
finish up.

1071
01:00:34,600 --> 01:00:37,400
So this could be, this is really a debug stored event.

1072
01:00:44,300 --> 01:00:44,800
and,

1073
01:00:51,100 --> 01:00:52,800
See, and this is.

1074
01:00:53,800 --> 01:00:54,700
Short event.

1075
01:01:04,900 --> 01:01:05,400
Okay.

1076
01:01:08,400 --> 01:01:13,500
So all I need now is I need to actually make it so that when you

1077
01:01:13,500 --> 01:01:18,000
create a frame there actually is somebody there to hold this

1078
01:01:18,000 --> 01:01:20,500
particular piece of information, right?

1079
01:01:20,900 --> 01:01:26,600
So when I do a new frame, what I want to do is I want to be able to

1080
01:01:27,100 --> 01:01:30,800
sort of create and I guess I don't even really need to do it then I

1081
01:01:30,800 --> 01:01:34,000
can just do it when we as necessary.

1082
01:01:34,100 --> 01:01:36,400
So basically when we do an open

1083
01:01:37,600 --> 01:01:41,000
Block call, or where are we?

1084
01:01:41,600 --> 01:01:42,200
There it is.

1085
01:01:42,600 --> 01:01:47,300
When we do a begin block, when we come through here, if there is no

1086
01:01:47,300 --> 01:01:51,300
open, if there if there is no open code block, then we would know that

1087
01:01:51,300 --> 01:01:53,700
that was the situation that we had, right?

1088
01:01:53,900 --> 01:01:57,100
So assuming there is like

1089
01:01:59,700 --> 01:02:04,000
You bugs stored event parent event.

1090
01:02:06,400 --> 01:02:11,800
Assuming that we had an open code block already, then we would know

1091
01:02:12,000 --> 01:02:13,800
who our parent was right.

1092
01:02:14,100 --> 01:02:18,400
Our parent event is just going to be whatever that codeblocks event

1093
01:02:18,400 --> 01:02:19,900
was, right?

1094
01:02:21,100 --> 01:02:24,900
So the open code blocks profile node is our parent event and we're

1095
01:02:24,900 --> 01:02:30,600
done, but if there is no open code block, then our parent event has to

1096
01:02:30,600 --> 01:02:34,000
be a separate event that we store, right?

1097
01:02:37,400 --> 01:02:39,400
And I don't know what we would pass here for event.

1098
01:02:39,400 --> 01:02:40,900
Probably just a null event.

1099
01:02:43,800 --> 01:02:44,400
Honestly.

1100
01:02:48,500 --> 01:02:51,200
I don't know if we should fill it with a name, a fake name or

1101
01:02:51,200 --> 01:02:55,000
something but, you know, probably just another man.

1102
01:02:55,600 --> 01:02:59,100
So we would store an event that was bogus and that would be what our

1103
01:02:59,100 --> 01:02:59,900
parent event actually.

1104
01:03:00,000 --> 01:03:06,500
He was and then we would make sure that that the well and I guess to

1105
01:03:06,500 --> 01:03:09,000
be fair, that's actually not even quite yet.

1106
01:03:09,400 --> 01:03:15,200
What we would do here is say if we have one in the frame,

1107
01:03:21,100 --> 01:03:21,400
right?

1108
01:03:21,400 --> 01:03:25,400
So if we have a root event, meaning there is already one of these, we

1109
01:03:25,400 --> 01:03:26,400
would just use it.

1110
01:03:26,400 --> 01:03:30,200
So we only actually need, it's not rude events called root profile

1111
01:03:30,200 --> 01:03:30,400
node.

1112
01:03:30,400 --> 01:03:31,800
Right profile node.

1113
01:03:32,600 --> 01:03:33,500
We would just use it.

1114
01:03:37,400 --> 01:03:38,300
In fact.

1115
01:03:39,400 --> 01:03:40,200
Could even do this.

1116
01:04:02,400 --> 01:04:02,900
Weird Echo.

1117
01:04:02,900 --> 01:04:05,500
Debug State, relation frame.

1118
01:04:07,000 --> 01:04:10,700
Profile node equals current event.

1119
01:04:12,600 --> 01:04:16,000
So now we know we have a parent event and the only thing left to do is

1120
01:04:16,000 --> 01:04:19,500
actually to thread these guys through, right?

1121
01:04:19,800 --> 01:04:22,100
So we need first child in the next with next.

1122
01:04:22,100 --> 01:04:25,500
Same parent to actually work, if that makes sense.

1123
01:04:26,700 --> 01:04:28,000
That's what we have to do here.

1124
01:04:28,600 --> 01:04:33,500
And so we need, we need two things for this and I don't know, I guess,

1125
01:04:33,500 --> 01:04:37,000
at this point I think we ended up with enough with

1126
01:04:39,400 --> 01:04:45,600
do you want to pointers in there that we don't actually care, but

1127
01:04:48,000 --> 01:04:52,600
When we have this route profile node, we would also need one other

1128
01:04:52,600 --> 01:04:59,100
piece of information here, which would be whatever the last thing was

1129
01:04:59,100 --> 01:05:02,000
that was stored under it so that we can chain them together in order,

1130
01:05:02,000 --> 01:05:02,700
if that makes sense.

1131
01:05:02,900 --> 01:05:03,600
Although I guess

1132
01:05:05,000 --> 01:05:06,300
we don't care if they're in order.

1133
01:05:10,400 --> 01:05:11,500
We don't care if they're in order.

1134
01:05:14,800 --> 01:05:15,400
At all.

1135
01:05:17,900 --> 01:05:18,800
Get rid of that.

1136
01:05:19,800 --> 01:05:24,200
So I think we're done, I think all we have to do is say that the first

1137
01:05:24,400 --> 01:05:27,600
in here, when we're actually threading through, we just say, all

1138
01:05:27,600 --> 01:05:33,300
right, the parent event, its first child is us, right?

1139
01:05:34,600 --> 01:05:42,700
And if there was and our next, the same parent is whatever was there.

1140
01:05:44,700 --> 01:05:47,500
So we can literally just thread them in reverse order because who

1141
01:05:47,500 --> 01:05:48,000
cares?

1142
01:05:49,300 --> 01:05:49,900
Right.

1143
01:05:50,800 --> 01:05:51,800
I think that just works.

1144
01:05:53,500 --> 01:05:54,700
I think that's all she wrote.

1145
01:05:55,800 --> 01:05:56,600
What are we complaining about?

1146
01:05:56,600 --> 01:05:58,800
Can I grieve 3 from diigo event start?

1147
01:05:58,900 --> 01:05:59,200
Right?

1148
01:05:59,200 --> 01:05:59,800
You are sir.

1149
01:06:00,700 --> 01:06:01,700
That's totally true.

1150
01:06:02,600 --> 01:06:06,300
None of our debug start event parent, event first child, what are we

1151
01:06:06,300 --> 01:06:07,000
talking about?

1152
01:06:11,200 --> 01:06:11,500
You know what?

1153
01:06:11,500 --> 01:06:12,200
That's true, too.

1154
01:06:14,400 --> 01:06:15,300
I agree with you.

1155
01:06:15,500 --> 01:06:16,200
I agree.

1156
01:06:17,500 --> 01:06:17,900
Oops.

1157
01:06:24,500 --> 01:06:28,500
How's that parent event profile node?

1158
01:06:28,500 --> 01:06:31,400
First child equals started it?

1159
01:06:35,400 --> 01:06:38,500
All right, so let's just see if we crash mightily here.

1160
01:06:41,400 --> 01:06:42,300
Or what happens.

1161
01:06:43,000 --> 01:06:43,400
All right.

1162
01:06:43,400 --> 01:06:47,900
So let's take a look and then I'll call it a call it a day.

1163
01:06:48,400 --> 01:06:49,900
I just want to see where we're at.

1164
01:06:50,600 --> 01:06:55,100
So we're we're that's this naughty.

1165
01:06:55,100 --> 01:06:56,100
We're not in the right file.

1166
01:06:56,300 --> 01:06:57,900
We're not even the right file people.

1167
01:06:58,300 --> 01:07:00,000
Like what's going on?

1168
01:07:00,400 --> 01:07:01,500
We got to be in the right file.

1169
01:07:01,800 --> 01:07:03,900
If you're not in the right file, you're not going to find the code.

1170
01:07:05,100 --> 01:07:05,900
So, here we go.

1171
01:07:07,300 --> 01:07:08,500
So, let's see what happens here.

1172
01:07:10,000 --> 01:07:11,300
We've got a root event.

1173
01:07:13,200 --> 01:07:14,200
And what's in it.

1174
01:07:14,600 --> 01:07:19,600
So inside the root event is a profile node and that profile node has a

1175
01:07:19,600 --> 01:07:20,300
child.

1176
01:07:20,800 --> 01:07:23,300
So, we actually did fill this out.

1177
01:07:23,800 --> 01:07:33,600
Here's the first child, we've got a profile note of it, which is what

1178
01:07:33,600 --> 01:07:34,600
it's Clocks Were.

1179
01:07:34,600 --> 01:07:36,000
That is apparent relative clock.

1180
01:07:36,000 --> 01:07:39,900
I don't know if it's accurate, that is pretty long, but for a top

1181
01:07:39,900 --> 01:07:40,700
level function,

1182
01:07:41,700 --> 01:07:43,300
It could be plausible.

1183
01:07:44,300 --> 01:07:48,400
Maybe we don't actually know which one was it.

1184
01:07:54,600 --> 01:07:55,600
Frame display.

1185
01:07:56,800 --> 01:07:57,400
Who knows?

1186
01:08:00,400 --> 01:08:01,300
Let's take a look here.

1187
01:08:03,400 --> 01:08:04,200
Duration.

1188
01:08:07,000 --> 01:08:12,100
Ah, our durations not going to have anything in it though because we

1189
01:08:12,100 --> 01:08:16,899
didn't update the, the frames information.

1190
01:08:17,100 --> 01:08:19,899
So we do have one more thing to do, which is here.

1191
01:08:19,899 --> 01:08:22,000
When we do our route profile node.

1192
01:08:22,100 --> 01:08:26,500
When we, when we detect that we need the one for the collation frame.

1193
01:08:26,899 --> 01:08:29,399
This one here needs to oops.

1194
01:08:29,600 --> 01:08:34,600
Needs to actually be filled out for reals, which I didn't do.

1195
01:08:35,100 --> 01:08:35,700
So this element,

1196
01:08:35,899 --> 01:08:37,200
Needs to be zero.

1197
01:08:41,399 --> 01:08:42,800
Actually, I guess I need to do this.

1198
01:08:46,100 --> 01:08:47,899
So this element needs to be zero.

1199
01:08:48,500 --> 01:08:53,600
This first child needs to be zero, the parent relative clock.

1200
01:08:55,700 --> 01:08:59,000
Probably should be zero because I'm not sure what else we would store

1201
01:08:59,000 --> 01:08:59,500
there.

1202
01:09:00,600 --> 01:09:03,600
The duration has to be what the duration actually is.

1203
01:09:03,899 --> 01:09:05,100
So, whatever.

1204
01:09:05,100 --> 01:09:06,800
The collation frame was.

1205
01:09:10,600 --> 01:09:13,800
It's an clock - it's it's begin.

1206
01:09:13,800 --> 01:09:16,200
Clock is what we actually need.

1207
01:09:17,500 --> 01:09:17,899
Oops.

1208
01:09:28,500 --> 01:09:29,600
So that's all good.

1209
01:09:30,399 --> 01:09:35,899
And then we need, we should might as well clear this stuff I guess.

1210
01:09:37,500 --> 01:09:38,600
Although, it doesn't matter.

1211
01:09:40,399 --> 01:09:43,000
In fact, it would already be cleared because everything in there is

1212
01:09:43,000 --> 01:09:46,899
already cleared so we don't need to clear anything because the event

1213
01:09:46,899 --> 01:09:49,100
the null event would clear would have cleared it all.

1214
01:09:50,500 --> 01:09:50,899
Right.

1215
01:09:50,899 --> 01:09:52,399
So actually, all of this doesn't matter.

1216
01:09:52,399 --> 01:09:55,500
We only need to set the part that we didn't want to clear because this

1217
01:09:55,500 --> 01:09:58,700
is a block of zeros that will clear this out, right?

1218
01:09:59,200 --> 01:09:59,700
Cheesy.

1219
01:09:59,700 --> 01:10:00,300
I know.

1220
01:10:01,400 --> 01:10:01,700
Yeah.

1221
01:10:01,700 --> 01:10:02,200
You know what?

1222
01:10:02,200 --> 01:10:04,300
And you probably don't want to rely on that because the size is good

1223
01:10:04,300 --> 01:10:04,900
change.

1224
01:10:04,900 --> 01:10:08,500
Look, we don't want to be we don't want to be lame about it so you

1225
01:10:08,500 --> 01:10:10,600
know, I'll do it for you.

1226
01:10:10,700 --> 01:10:11,400
I'll do it.

1227
01:10:14,600 --> 01:10:15,000
All right.

1228
01:10:15,000 --> 01:10:17,800
Are you happy now, fine?

1229
01:10:25,900 --> 01:10:30,000
All right, Stuart event, it's actually parent event.

1230
01:10:31,500 --> 01:10:34,800
And so now we've set the duration properly and that was probably

1231
01:10:34,800 --> 01:10:36,700
preventing us from getting anything useful.

1232
01:10:37,800 --> 01:10:40,700
We need to cast you 32, because that's by default going to be you 60

1233
01:10:40,700 --> 01:10:45,200
for computation, which obviously is not what we want, and then I think

1234
01:10:45,200 --> 01:10:45,700
we're good.

1235
01:10:47,000 --> 01:10:47,400
Okay.

1236
01:10:48,000 --> 01:10:50,300
Now whether we get anything useful out of this, I don't know.

1237
01:10:50,300 --> 01:10:52,800
But, you know off again.

1238
01:10:54,700 --> 01:10:55,300
Thank you.

1239
01:10:56,400 --> 01:10:58,000
Want to see the results first.

1240
01:10:59,600 --> 01:11:02,900
That is bizarre, never would have guessed that.

1241
01:11:04,100 --> 01:11:06,300
Have no idea what that is none at all.

1242
01:11:09,200 --> 01:11:09,700
But yeah.

1243
01:11:09,700 --> 01:11:11,000
Anyway, we're pretty close.

1244
01:11:11,400 --> 01:11:14,200
I'm going to call it there because I'm already over time, I'll take

1245
01:11:14,200 --> 01:11:17,400
the briefest, briefest of qas.

1246
01:11:18,200 --> 01:11:20,900
But really we should probably hold them tomorrow because we'll finish

1247
01:11:20,900 --> 01:11:21,700
this up tomorrow.

1248
01:11:21,700 --> 01:11:23,200
I think we've pretty much done.

1249
01:11:23,200 --> 01:11:24,700
Almost everything that I want to do there.

1250
01:11:51,100 --> 01:11:52,300
It's like in sohbat.

1251
01:11:54,200 --> 01:11:55,800
Is is getting it done.

1252
01:12:00,500 --> 01:12:03,100
Cream cheese is will the day counter overload tomorrow or will the

1253
01:12:03,100 --> 01:12:04,400
variable provide more bits for us?

1254
01:12:04,400 --> 01:12:07,700
Well since you're grumpy giant 256.

1255
01:12:08,500 --> 01:12:12,300
I think if you were expecting an overflow at the byte boundary

1256
01:12:14,200 --> 01:12:15,800
You would have been grumpy, giant zero.

1257
01:12:17,600 --> 01:12:18,500
Jesse used.

1258
01:12:18,500 --> 01:12:22,300
How are you going to celebrate handmade hip handmade here episode?

1259
01:12:22,300 --> 01:12:26,800
0xff programming is its own celebration.

1260
01:12:26,900 --> 01:12:31,900
Like, when I am able to actually program and make code without like,

1261
01:12:31,900 --> 01:12:36,300
Microsoft crapping up my stuff or, you know, having to install some

1262
01:12:36,300 --> 01:12:39,900
stupid update with something, you know, when I can just actually

1263
01:12:39,900 --> 01:12:40,600
program

1264
01:12:41,400 --> 01:12:42,100
I'm happy.

1265
01:12:42,400 --> 01:12:45,100
So just being able to program like we got to program all code today.

1266
01:12:45,100 --> 01:12:48,200
It was all our code and it was cool and I'm pretty happy about that.

1267
01:12:49,900 --> 01:12:55,400
So like, you know, I think that's as good as celebration as any

1268
01:13:24,100 --> 01:13:27,600
Soon enough, we will need 10 bits to store the day counter.

1269
01:13:28,200 --> 01:13:29,900
So we'll need

1270
01:13:32,800 --> 01:13:34,500
how many bits will the day counter need.

1271
01:13:34,800 --> 01:13:35,600
So,

1272
01:13:37,900 --> 01:13:40,000
We know we're going to need.

1273
01:13:44,000 --> 01:13:45,800
At least 10 bits.

1274
01:13:46,300 --> 01:13:51,500
Yeah, because an 8-bit day counter only gets us to 255.

1275
01:13:51,700 --> 01:13:53,900
So Burl be passed that tomorrow, right?

1276
01:13:53,900 --> 01:14:00,200
9 b day counter, gets us to 512 but I was saying that that we do at

1277
01:14:00,200 --> 01:14:03,900
least six hundred episodes, right?

1278
01:14:05,300 --> 01:14:11,000
So if we do six hundred episodes, we will need 10 bits because even if

1279
01:14:11,000 --> 01:14:13,700
somehow we finished everything before day of 5,

1280
01:14:13,800 --> 01:14:17,100
twelve, I would, you know,

1281
01:14:20,000 --> 01:14:24,000
I mean, I guess I would, I would just do extra strictly just go clean

1282
01:14:24,000 --> 01:14:24,500
up code me.

1283
01:14:24,500 --> 01:14:26,200
There's always plenty of code to clean up, right?

1284
01:14:26,300 --> 01:14:31,700
So since I already said, we're going past a 512, we will need 10 B.

1285
01:14:31,700 --> 01:14:34,400
We know, we will need 10 bits for sure.

1286
01:14:41,100 --> 01:14:42,700
I don't know that we'll need 11 B.

1287
01:14:42,800 --> 01:14:44,000
11 B, probably not.

1288
01:14:44,000 --> 01:14:49,100
I don't think I've got 2048 or well, or 1024 days.

1289
01:14:51,000 --> 01:14:51,600
So

1290
01:15:00,500 --> 01:15:04,800
How long will it take me to get your flow of coding, 40 years?

1291
01:15:05,200 --> 01:15:08,800
Well, definitely not 40 years because I haven't been programming for

1292
01:15:08,800 --> 01:15:09,500
40 years.

1293
01:15:11,500 --> 01:15:13,200
I haven't even been alive for 40 years.

1294
01:15:24,800 --> 01:15:25,800
For Tarson elk.

1295
01:15:25,800 --> 01:15:28,000
What kind of data is profile intend to display?

1296
01:15:28,200 --> 01:15:31,700
So I think based on the data structure just created will have a nice

1297
01:15:31,700 --> 01:15:34,100
will be able to do a nice thread overlap view, which is what we'll

1298
01:15:34,100 --> 01:15:36,300
have in a moment when we finish.

1299
01:15:36,400 --> 01:15:39,800
So tomorrow, we'll have that with drill down.

1300
01:15:41,000 --> 01:15:41,700
The drill down.

1301
01:15:41,700 --> 01:15:43,900
We'll take one more day to implement because there's another thing we

1302
01:15:43,900 --> 01:15:45,600
have to do, right?

1303
01:15:47,500 --> 01:15:52,200
And but the profile view will have a nice thread overlap with drill

1304
01:15:52,200 --> 01:15:53,300
down in Lanes.

1305
01:15:53,600 --> 01:15:54,800
So we can get all that info.

1306
01:15:55,000 --> 01:16:01,100
And we'll also I think be able to draw a nice we can sort functions by

1307
01:16:01,200 --> 01:16:02,300
how much they cost.

1308
01:16:02,300 --> 01:16:03,700
We should be able to do that as well.

1309
01:16:04,100 --> 01:16:06,600
So we can do a sorted list view so we should be able to have like the

1310
01:16:06,600 --> 01:16:07,700
best of both worlds.

1311
01:16:26,600 --> 01:16:30,900
Joe, the toe like I was yeah, it was like 12,000 or no 14,000.

1312
01:16:34,800 --> 01:16:35,600
All right.

1313
01:16:55,800 --> 01:16:56,100
Your help.

1314
01:16:56,100 --> 01:16:59,000
Will you be able to turn on and off profiling for certain functions

1315
01:16:59,000 --> 01:16:59,500
with the debug?

1316
01:16:59,500 --> 01:17:05,500
You, I well you could turn on and off recording the profile.

1317
01:17:07,000 --> 01:17:10,900
But the whether or not there's a profile point at a particular

1318
01:17:10,900 --> 01:17:14,300
function, what we're not going to write something that lets you type

1319
01:17:14,300 --> 01:17:17,500
in the name of a function and then turn like goes and like, obviously

1320
01:17:17,500 --> 01:17:18,500
we're not gonna do any of that.

1321
01:17:18,800 --> 01:17:21,600
So you have to have put them in ahead of you have to put in which

1322
01:17:21,800 --> 01:17:24,100
functions you want to profile ahead of time, right?

1323
01:17:36,500 --> 01:17:39,900
A big part of the slow startup for me is that the motor arena is clear

1324
01:17:39,900 --> 01:17:42,000
to default at the moment.

1325
01:17:44,400 --> 01:17:44,900
That's about two.

1326
01:17:44,900 --> 01:17:47,500
Nurses Meg's the motor remote Arena.

1327
01:17:52,600 --> 01:17:54,100
Oh, I know what you're talking about.

1328
01:18:09,100 --> 01:18:10,500
Handmade 3p.

1329
01:18:13,400 --> 01:18:13,800
Yeah.

1330
01:18:28,400 --> 01:18:31,500
So, you talking about which party you talking about?

1331
01:18:32,000 --> 01:18:37,500
Well anyway, you know what either way, so there's the startup right.

1332
01:18:39,600 --> 01:18:41,400
And so let's just do a simple test.

1333
01:18:41,400 --> 01:18:43,900
We don't really need any instrumentation or anything for this.

1334
01:18:44,800 --> 01:18:48,400
What we can do is just in win32, handmade.

1335
01:18:52,200 --> 01:18:58,000
We can just say, if we were not, if we were to not initialize opengl,

1336
01:18:58,300 --> 01:18:58,800
right?

1337
01:19:05,300 --> 01:19:10,600
so, in here, when we do win32 in it opengl

1338
01:19:12,100 --> 01:19:13,100
That's this code.

1339
01:19:14,700 --> 01:19:19,000
If we were to just not initialize opengl, right?

1340
01:19:19,000 --> 01:19:21,500
So that if that just wasn't going to happen,

1341
01:19:36,400 --> 01:19:39,900
And we were instead to tet to set the render mode.

1342
01:19:49,900 --> 01:19:50,500
Software.

1343
01:20:08,000 --> 01:20:09,000
Can see what the time.

1344
01:20:09,000 --> 01:20:09,400
What?

1345
01:20:09,900 --> 01:20:10,300
Well

1346
01:20:28,700 --> 01:20:31,700
So that is very slow fade.

1347
01:20:32,200 --> 01:20:33,400
I'm not really sure.

1348
01:20:33,400 --> 01:20:35,800
I guess it's still calling the game code there.

1349
01:20:38,300 --> 01:20:41,300
Not really sure when 32 in it with the gel.

1350
01:20:41,600 --> 01:20:46,300
So now in theory, if we don't call this, we should only be rendering

1351
01:20:46,300 --> 01:20:50,600
with, with no open gel, although I guess we're linking with it, still,

1352
01:20:53,600 --> 01:20:54,800
So, there is that.

1353
01:20:57,000 --> 01:20:57,400
I guess.

1354
01:20:57,400 --> 01:20:59,400
I don't itch that shouldn't matter.

1355
01:21:00,200 --> 01:21:01,700
I don't actually know if it does.

1356
01:21:02,700 --> 01:21:04,400
So let me take a quick look here.

1357
01:21:10,500 --> 01:21:15,100
all right, so in here, if we were to get rid of this,

1358
01:21:19,700 --> 01:21:22,700
Now, when we run, we should have no opengl at all.

1359
01:21:24,700 --> 01:21:30,400
So I think that does seem like there's still a bit of time that can be

1360
01:21:30,400 --> 01:21:32,100
saved there, right?

1361
01:21:32,400 --> 01:21:38,700
Just arbitrarily sort of judging how long it takes to start up.

1362
01:21:43,400 --> 01:21:44,100
I would say.

1363
01:21:57,400 --> 01:21:59,000
Find out hand.

1364
01:21:59,000 --> 01:22:00,700
May 22.

1365
01:22:02,600 --> 01:22:05,200
so, if I switch back to open gel,

1366
01:22:08,900 --> 01:22:11,000
now that it's, I mean,

1367
01:22:12,400 --> 01:22:16,800
I-it's that feels significantly longer to me when we initialize

1368
01:22:16,800 --> 01:22:17,700
opengl.

1369
01:22:18,400 --> 01:22:22,200
So I mean we probably should get rid of the other, you know, the clear

1370
01:22:22,200 --> 01:22:25,800
time we could get rid of all that time and maybe that's something we

1371
01:22:25,800 --> 01:22:27,600
should do sooner rather than later.

1372
01:22:27,600 --> 01:22:31,800
It's not particularly hard so we could do that.

1373
01:22:32,000 --> 01:22:35,500
But the opengl still still a problem.

1374
01:22:36,900 --> 01:22:37,700
As far as I can tell.

1375
01:22:37,700 --> 01:22:38,100
Anyway,

1376
01:22:48,600 --> 01:22:50,400
all right, I'm going to go.

1377
01:22:50,500 --> 01:22:51,900
I'm going to wind down.

1378
01:22:51,900 --> 01:22:53,000
I'm going to wrap it up.

1379
01:22:54,600 --> 01:22:56,400
Let's go ahead and close.

1380
01:23:03,700 --> 01:23:06,000
All right, thank you everyone for joining, for an episode of handmade

1381
01:23:06,000 --> 01:23:06,200
here.

1382
01:23:06,200 --> 01:23:07,300
It's been a pleasure coding with you.

1383
01:23:07,300 --> 01:23:11,400
As always, if you would like to follow along at home, you can always

1384
01:23:11,400 --> 01:23:14,100
pure to the game on handmade here at org and it comes with the source

1385
01:23:14,100 --> 01:23:14,600
code.

1386
01:23:14,800 --> 01:23:16,100
So you can play around at home.

1387
01:23:17,200 --> 01:23:18,000
We also form site.

1388
01:23:18,000 --> 01:23:19,700
If you want to ask questions, go there.

1389
01:23:20,300 --> 01:23:23,700
We have a patreon page, you can use to support the video series, and

1390
01:23:23,700 --> 01:23:25,500
we also have a tweet bot that tweets the schedule.

1391
01:23:25,500 --> 01:23:28,400
If you want to catch the stream live so you can subscribe to that and

1392
01:23:28,500 --> 01:23:29,900
find out when we're going to be on the air.

1393
01:23:31,100 --> 01:23:33,500
And speaking of that, will be back for the I think the tomorrow's

1394
01:23:33,500 --> 01:23:34,000
Friday, right?

1395
01:23:34,000 --> 01:23:36,100
So back for the last few of the week tomorrow, 5:00 p.m.

1396
01:23:36,100 --> 01:23:37,400
Pacific Daylight time.

1397
01:23:37,600 --> 01:23:41,800
Hope to see you here for that until then, well, there's the tweetbot

1398
01:23:41,800 --> 01:23:42,100
right there.

1399
01:23:42,100 --> 01:23:45,200
Until then have fun programming and I will see you guys on the

1400
01:23:45,200 --> 01:23:45,800
internet.

1401
01:23:45,900 --> 01:23:46,100
Take it.

1402
01:23:46,100 --> 01:23:46,800
Easy, everyone.

1403
01:23:47,000 --> 01:23:48,000
Oh, and by the way,

1404
01:23:50,300 --> 01:23:51,800
Tomorrow new for coder.

1405
01:23:52,100 --> 01:23:55,400
So I'm going to go download new for coder right now.

1406
01:23:55,400 --> 01:23:57,900
In fact, if you don't have four coder yet you should get it's what we

1407
01:23:57,900 --> 01:23:58,700
use on stream.

1408
01:23:58,900 --> 01:23:59,900
And there's a new version that just

1409
01:24:00,000 --> 01:24:02,200
Came out a new Alpha.

1410
01:24:02,700 --> 01:24:08,100
So if you want to go over here, if you if you pledge to this patreon,

1411
01:24:08,300 --> 01:24:12,100
you can download the editor that we use on the stream.

1412
01:24:12,600 --> 01:24:14,300
It's by someone who's actually on the stream.

1413
01:24:15,100 --> 01:24:15,400
Mr.

1414
01:24:15,400 --> 01:24:16,500
Fourth dimension on the stream.

1415
01:24:16,700 --> 01:24:18,900
So check that out tonight because that's gonna be exciting.

1416
01:24:18,900 --> 01:24:19,800
I'm pretty excited to go.

1417
01:24:19,800 --> 01:24:20,200
Look at it.

1418
01:24:20,200 --> 01:24:21,700
In fact that's what I'll be doing this evening.

1419
01:24:22,400 --> 01:24:27,100
So see you guys tomorrow and we'll chat about for coder on Twitter

1420
01:24:27,500 --> 01:24:27,900
before.

1421
01:24:27,900 --> 01:24:29,000
Then take it easy, everyone.

