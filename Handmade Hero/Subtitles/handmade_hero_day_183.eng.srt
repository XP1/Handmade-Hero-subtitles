1
00:00:00,300 --> 00:00:01,200
Start recording.

2
00:00:02,300 --> 00:00:04,800
Okay, hello everyone and welcome to handmade hero.

3
00:00:04,800 --> 00:00:07,900
The show we could complete game live on stream on Twitch.

4
00:00:08,900 --> 00:00:12,800
You know, I am pretty excited about what's about to happen here.

5
00:00:13,400 --> 00:00:13,800
I don't know.

6
00:00:13,800 --> 00:00:14,800
I mean I guess I don't know.

7
00:00:14,800 --> 00:00:19,700
We might hit some snags but yesterday we were just about finished

8
00:00:19,700 --> 00:00:23,000
moving everything over to the new logging system and we were sort of

9
00:00:23,000 --> 00:00:26,900
putting stuff in so that even the old platform layer stuff that used

10
00:00:26,900 --> 00:00:29,900
to kind of go through a different way of logging time, stamps could

11
00:00:29,900 --> 00:00:30,100
go.

12
00:00:30,200 --> 00:00:33,000
You are new debugging system and I'm kind of excited about that

13
00:00:33,000 --> 00:00:36,200
because once that's all working, will be able to make some pretty cool

14
00:00:36,200 --> 00:00:39,500
visualizations of like where the time is being spent in our program.

15
00:00:39,500 --> 00:00:43,000
And that's the thing that I'm relatively interested in seeing myself

16
00:00:43,300 --> 00:00:46,600
so I'd like to get into it right away because we were right in the

17
00:00:46,600 --> 00:00:48,000
middle of it yesterday.

18
00:00:48,000 --> 00:00:52,500
And so I'd like to go ahead and get it finished here today is day 183.

19
00:00:52,500 --> 00:00:56,100
So if you want to follow along at home, unpack day 182 source code

20
00:00:56,400 --> 00:00:59,800
into a directory and that is what we will be starting with

21
00:01:00,200 --> 00:01:00,600
today.

22
00:01:00,900 --> 00:01:01,900
So here we go.

23
00:01:02,900 --> 00:01:07,800
If you remember correctly, we had finished getting everything working

24
00:01:07,800 --> 00:01:11,400
and it actually was running just fine with the new system.

25
00:01:11,400 --> 00:01:15,200
However, we had not yet actually taken advantage of the porting work

26
00:01:15,200 --> 00:01:15,900
that we had done.

27
00:01:15,900 --> 00:01:21,000
So actually, if you look here, we're not we're not actually putting

28
00:01:21,000 --> 00:01:23,700
anything from the platform layer in this actual system.

29
00:01:23,700 --> 00:01:28,500
Yet, we only have stuff that's from the game itself and so what I'd

30
00:01:28,500 --> 00:01:31,800
like to do today is push that through so that we can get to the

31
00:01:31,800 --> 00:01:32,700
situation where we've got

32
00:01:34,100 --> 00:01:36,900
Everything including the platform layer part showing up.

33
00:01:37,000 --> 00:01:38,200
So let's go ahead and do that.

34
00:01:38,200 --> 00:01:42,900
If we go into win32 handmade right, what we need to do here is we

35
00:01:42,900 --> 00:01:46,800
moved the stuff into handmade platform if you remember we sort of put

36
00:01:46,800 --> 00:01:49,600
it down at the bottom here so that it could be accessed by both

37
00:01:49,600 --> 00:01:52,600
systems so we can actually start using it here.

38
00:01:53,100 --> 00:01:56,000
We can start using like time block and that sort of stuff in here.

39
00:01:56,200 --> 00:01:59,200
So what I'm going to do is I'm going to just go ahead and vaporize

40
00:01:59,600 --> 00:02:01,900
this thing.

41
00:02:03,600 --> 00:02:05,500
I'm going to vent vaporize this, debug frame.

42
00:02:05,500 --> 00:02:08,900
And info concept is thing where we have like debug frame, timestamp

43
00:02:08,900 --> 00:02:10,100
and, and that sort of stuff.

44
00:02:10,199 --> 00:02:11,800
I'm gonna get rid of that, right?

45
00:02:11,800 --> 00:02:12,800
So that's going to go away.

46
00:02:13,100 --> 00:02:16,700
And instead what I'm going to pass in place of that particular set of

47
00:02:16,700 --> 00:02:21,100
information is I'm going to pass in the sort of array of counters.

48
00:02:23,200 --> 00:02:25,300
For the platform layer translation unit.

49
00:02:25,900 --> 00:02:29,500
So, what it's going to pass here is it's going to pass essentially,

50
00:02:29,800 --> 00:02:32,300
you know, in this in this handmade debug thing here.

51
00:02:32,800 --> 00:02:34,600
When we get down to the bottom, right?

52
00:02:34,800 --> 00:02:39,500
We've got these sort of debug records that we.

53
00:02:39,700 --> 00:02:40,100
I'm sorry.

54
00:02:40,100 --> 00:02:41,600
That's not the one I'm looking for.

55
00:02:42,100 --> 00:02:46,000
You've got these debug records here, where we say, like, okay, we've

56
00:02:46,000 --> 00:02:47,500
got the debug records.

57
00:02:47,700 --> 00:02:48,500
Main count?

58
00:02:48,500 --> 00:02:50,900
Optimize count platform count, right?

59
00:02:51,400 --> 00:02:51,900
And then,

60
00:02:52,000 --> 00:02:53,600
Each one of those has a record array.

61
00:02:53,600 --> 00:02:56,700
Which store stuff like the filename and that sort of stuff, right.

62
00:02:56,700 --> 00:02:59,400
So we have this Global debug table dot records thing.

63
00:03:00,700 --> 00:03:04,400
That's the thing that I actually want sort of to be recorded their

64
00:03:04,600 --> 00:03:05,100
right?

65
00:03:05,400 --> 00:03:09,000
And I guess you know thinking about it a little bit further I guess I

66
00:03:09,000 --> 00:03:14,000
could since since the platform layer would actually have the ability

67
00:03:14,000 --> 00:03:18,600
to access that debug table, it would seem because you know, it's

68
00:03:18,600 --> 00:03:24,400
actually I think it should be able to access it because we can sort of

69
00:03:24,400 --> 00:03:25,800
load the address of it.

70
00:03:25,800 --> 00:03:30,100
There we can get that piece of information out of the of the

71
00:03:31,700 --> 00:03:34,500
Of the platform of the platform independent code.

72
00:03:34,900 --> 00:03:40,500
I feel like we might not even have to do anything specific because we

73
00:03:40,500 --> 00:03:43,200
wouldn't have to pass the records themselves.

74
00:03:43,300 --> 00:03:45,300
We can just write directly into them.

75
00:03:46,600 --> 00:03:50,000
So yeah, that actually seems like it should be, probably pretty easy.

76
00:03:53,300 --> 00:03:58,600
So maybe I can just vaporize that thing entirely, I guess it seems

77
00:03:58,600 --> 00:04:00,600
like I could I don't know.

78
00:04:00,600 --> 00:04:02,100
So I'm going to go ahead and try that.

79
00:04:02,400 --> 00:04:05,200
So if it was going to do that, if I was going to do that,

80
00:04:06,400 --> 00:04:07,300
How would I do that?

81
00:04:07,700 --> 00:04:10,600
If I want to vaporize that thing entirely I can just say, the debug

82
00:04:10,600 --> 00:04:14,300
frame and info is just going to go away like there goes and then we

83
00:04:14,300 --> 00:04:15,100
get rid of this.

84
00:04:15,100 --> 00:04:17,500
And that's all there is to that, right?

85
00:04:17,700 --> 00:04:21,500
And then I would come in here and say, all right, you know, we don't

86
00:04:21,500 --> 00:04:23,500
have any of that anymore, that's gone.

87
00:04:24,100 --> 00:04:26,000
We don't have any of this stuff anymore.

88
00:04:26,000 --> 00:04:28,500
Now I'm not going to delete it because we're going to want to convert

89
00:04:28,500 --> 00:04:31,300
that over because we want to use those bar charts again.

90
00:04:31,800 --> 00:04:35,300
So, at the moment, I'll just if zero it out, it's going to come back

91
00:04:35,300 --> 00:04:35,900
later and it

92
00:04:36,100 --> 00:04:37,200
Not going to be drawing.

93
00:04:37,500 --> 00:04:38,400
The frame infos anymore.

94
00:04:38,400 --> 00:04:41,500
It's going to be drawing something else but otherwise it'll still be

95
00:04:41,500 --> 00:04:42,100
pretty similar.

96
00:04:42,100 --> 00:04:46,400
So once we get into here when we do win32 record time stamp, that is

97
00:04:46,400 --> 00:04:49,400
no longer going to be a thing, we don't need to do that anymore.

98
00:04:49,400 --> 00:04:51,000
We can just use the time clocks.

99
00:04:51,600 --> 00:04:54,500
So what I'm going to do there is I'm going to say that we just have a

100
00:04:54,500 --> 00:04:58,100
Time block here and that time block is going to be our Global running

101
00:04:58,100 --> 00:04:58,600
block.

102
00:04:58,600 --> 00:05:01,200
This block, right, like there, and we're going to want a way.

103
00:05:01,200 --> 00:05:03,200
I think to start naming these things.

104
00:05:03,300 --> 00:05:05,500
We're going to want a different version of time block.

105
00:05:06,500 --> 00:05:09,600
That would allow us to name things more specifically for when we have

106
00:05:09,600 --> 00:05:10,000
these here.

107
00:05:10,000 --> 00:05:12,400
But I'm not going to worry about that at the moment because we don't

108
00:05:12,400 --> 00:05:13,800
care about that too much here.

109
00:05:14,400 --> 00:05:18,500
But what I want to do now is I want to be able to do sort of the

110
00:05:18,500 --> 00:05:22,500
traditional begin end block pair, if that makes sense.

111
00:05:22,800 --> 00:05:28,300
I want to be able to do that a little more manually, so that I can, so

112
00:05:28,300 --> 00:05:31,200
that I can do, like, little Snippets here, like, little little bits of

113
00:05:31,200 --> 00:05:31,600
this.

114
00:05:31,800 --> 00:05:33,800
So, if I take a look at handmade platform, right?

115
00:05:33,800 --> 00:05:35,900
A timed block is really just, you know,

116
00:05:36,100 --> 00:05:38,700
It's one of these and one of these, right?

117
00:05:38,700 --> 00:05:43,300
It's a debug, it's an end block event and a begin block event and a

118
00:05:43,300 --> 00:05:47,100
thing that like accesses the records, right, that's, that's all that

119
00:05:47,100 --> 00:05:47,500
is.

120
00:05:50,800 --> 00:05:55,400
So what I want to do here is just extend this up sort of One More

121
00:05:55,400 --> 00:05:55,900
Level.

122
00:05:56,100 --> 00:05:59,500
So that what's actually happening in here, right?

123
00:06:01,000 --> 00:06:03,000
is, is kind of going to be

124
00:06:05,700 --> 00:06:10,400
Well, I'm trying to think of maybe even an easier way to do.

125
00:06:10,400 --> 00:06:13,000
It would be just to have the exact same thing.

126
00:06:13,000 --> 00:06:16,700
But yeah, maybe have the exact same thing but instead of the time

127
00:06:16,700 --> 00:06:21,600
block, automatically doing it on close, the time block, just does it

128
00:06:22,000 --> 00:06:23,600
sort of at a different time.

129
00:06:23,700 --> 00:06:24,600
So I'm going to I'm going to stay.

130
00:06:24,600 --> 00:06:27,700
We've got another thing here, which is like, you know, a manual block

131
00:06:27,700 --> 00:06:29,400
or something like this, right.

132
00:06:30,600 --> 00:06:32,600
I don't know, Emanuel time block.

133
00:06:32,600 --> 00:06:35,300
And what that's going to do is that one, we'll just do it.

134
00:06:35,900 --> 00:06:38,700
It needs to remember the counter, right?

135
00:06:39,200 --> 00:06:42,500
That's the only reason I actually need an interesting thing here and

136
00:06:42,500 --> 00:06:46,200
what that will do is when you actually create this manual, time clock,

137
00:06:47,800 --> 00:06:49,900
you will essentially do this operation.

138
00:06:49,900 --> 00:06:56,800
So, we'll have something like this and Define begin block, right?

139
00:06:56,900 --> 00:06:58,700
And then, and then an end block,

140
00:06:59,900 --> 00:07:00,400
so,

141
00:07:02,300 --> 00:07:04,000
Let me take a look here and make sure.

142
00:07:04,000 --> 00:07:07,200
I know we had some stuff in.

143
00:07:07,600 --> 00:07:11,700
I think the intrinsics was it it's just want to make sure we got rid

144
00:07:11,700 --> 00:07:16,000
of those old begin block end block one's pretty sure we did right.

145
00:07:17,900 --> 00:07:18,800
They're this stuff.

146
00:07:19,100 --> 00:07:20,800
So we don't want any of this anymore.

147
00:07:20,800 --> 00:07:21,100
Right.

148
00:07:21,100 --> 00:07:23,600
This stuff is all gone basically, goodbye.

149
00:07:24,500 --> 00:07:24,900
Okay.

150
00:07:26,200 --> 00:07:29,200
And global global memory.

151
00:07:30,400 --> 00:07:32,400
I don't remember what we were doing with that.

152
00:07:32,600 --> 00:07:33,600
Debug Global memory.

153
00:07:33,600 --> 00:07:35,600
Was it, was there anything in particular?

154
00:07:35,600 --> 00:07:36,700
We were storing in there?

155
00:07:39,000 --> 00:07:40,600
Look what was that even being used for?

156
00:07:41,600 --> 00:07:43,100
I don't know what we were doing with that.

157
00:07:45,700 --> 00:07:50,200
Debug Global memory, debug Global memory, debug Global memory.

158
00:07:50,600 --> 00:07:54,500
But it never is actually getting used, which is a little bit weird,

159
00:07:54,600 --> 00:07:54,900
wasn't it?

160
00:07:54,900 --> 00:07:58,600
Supposed to be see you bug Global memory?

161
00:08:01,200 --> 00:08:01,600
It's weird.

162
00:08:01,600 --> 00:08:03,000
It never actually gets used.

163
00:08:03,500 --> 00:08:08,400
I guess we were planning to use that and just never did or something

164
00:08:08,700 --> 00:08:11,400
we'll have to, to do Casey.

165
00:08:12,100 --> 00:08:14,700
Actually start using this.

166
00:08:17,200 --> 00:08:17,900
All right.

167
00:08:22,000 --> 00:08:23,200
So that's that's a little weird.

168
00:08:23,500 --> 00:08:24,600
Not sure what's going on there.

169
00:08:24,700 --> 00:08:25,600
We'll take a look at that.

170
00:08:26,400 --> 00:08:27,700
Anyway, point being.

171
00:08:28,900 --> 00:08:33,000
So if I get one of these guys here with the, with the time block

172
00:08:33,000 --> 00:08:36,400
situation, and I guess I can kind of make these two things work in

173
00:08:36,400 --> 00:08:37,299
terms of each other.

174
00:08:37,500 --> 00:08:41,200
So when you do a begin block end block, pair, what that's going to do

175
00:08:41,200 --> 00:08:45,200
is it's literally just going to do exactly this, this thing exactly

176
00:08:45,200 --> 00:08:46,700
what you see here, right?

177
00:08:47,200 --> 00:08:51,700
So I what I probably do is I'd say, all right, whatever this.

178
00:08:51,900 --> 00:08:53,400
Set of events is going to be.

179
00:08:55,400 --> 00:08:58,900
Like that, I probably say.

180
00:09:00,000 --> 00:09:06,400
Thing like, okay, you know, I want to be able to do something of the

181
00:09:06,400 --> 00:09:07,700
form annual times.

182
00:09:07,700 --> 00:09:12,200
Block, block equals begin block, or something like that or something

183
00:09:12,200 --> 00:09:13,600
where I give it a name.

184
00:09:13,600 --> 00:09:16,900
I guess when I do begin block, I'm just trying to figure out like how

185
00:09:16,900 --> 00:09:22,100
I make sure that this counter variable can be stored somewhere so that

186
00:09:22,100 --> 00:09:23,500
it will get used again.

187
00:09:25,800 --> 00:09:31,000
by the end block automatically, of course, I mean,

188
00:09:35,400 --> 00:09:41,000
And I'm not sure, I'm not sure how I would do that.

189
00:09:46,700 --> 00:09:49,600
So, let me just show you what I'm trying to do.

190
00:09:51,800 --> 00:09:54,600
What I want to be able to do is in here.

191
00:09:54,600 --> 00:09:56,800
I want to not have to do this.

192
00:09:58,900 --> 00:09:59,500
Right?

193
00:09:59,800 --> 00:10:03,600
And the reason that I want to not have to do that is because when I

194
00:10:03,700 --> 00:10:07,900
Define variables and stuff, I don't want those variables variables to

195
00:10:07,900 --> 00:10:10,200
be scoped inside.

196
00:10:10,300 --> 00:10:10,600
Right?

197
00:10:10,600 --> 00:10:13,100
Inside this block, I want them to be accessed outside.

198
00:10:13,200 --> 00:10:16,600
So I want to be able to do something like this, right?

199
00:10:16,700 --> 00:10:20,400
I want to be able to do something where I do begin block, and then I

200
00:10:20,400 --> 00:10:26,700
do end block like so and I can just do, you know, okay, this is the

201
00:10:26,700 --> 00:10:28,400
executables ready section.

202
00:10:28,700 --> 00:10:35,400
And I can, you know, just make that be like a known block, a sort of a

203
00:10:35,400 --> 00:10:39,300
known section of this set of operations, right?

204
00:10:39,800 --> 00:10:43,700
And then I can go, you know, another step further write and say, okay,

205
00:10:43,700 --> 00:10:46,800
here's the input process so that's another envelope lock.

206
00:10:52,000 --> 00:10:52,600
Right.

207
00:10:53,300 --> 00:10:58,000
And so up here, when we do this, I would say begin block.

208
00:11:01,900 --> 00:11:02,700
And get that.

209
00:11:03,700 --> 00:11:08,000
And so you mean you can see it's pretty straightforward what I'm

210
00:11:08,000 --> 00:11:08,500
talking about.

211
00:11:08,500 --> 00:11:11,000
There's really nothing particularly fancy there.

212
00:11:11,300 --> 00:11:14,500
So we come through here, we do whatever the input processing is and

213
00:11:14,500 --> 00:11:15,300
that's fine.

214
00:11:15,600 --> 00:11:19,300
Then we would come in here and do the game updated, part of things.

215
00:11:19,400 --> 00:11:20,700
So here's another block.

216
00:11:32,700 --> 00:11:36,700
And then we've got whatever this section is.

217
00:11:38,600 --> 00:11:40,000
It's like the audio update.

218
00:11:41,200 --> 00:11:41,700
Yep.

219
00:11:43,300 --> 00:11:44,100
And block.

220
00:11:50,700 --> 00:11:54,100
And that's what I want.

221
00:11:55,100 --> 00:11:56,100
And I'm trying to figure out.

222
00:11:56,100 --> 00:11:59,700
What's the easiest way to actually make that happen in some kind of

223
00:12:00,200 --> 00:12:04,200
Non non like annoying for the programmer.

224
00:12:04,800 --> 00:12:08,200
Which is, in this case, me not annoying way.

225
00:12:08,800 --> 00:12:11,700
I want it to be able to be written roughly like this without a lot of

226
00:12:11,700 --> 00:12:13,900
interceding other nonsense, right?

227
00:12:14,700 --> 00:12:19,300
And furthermore, I would like it to be able to compile out, so I don't

228
00:12:19,300 --> 00:12:23,800
want there to be a lot of funny business going on, you know, in terms

229
00:12:23,800 --> 00:12:29,400
of stuff that has to be named.

230
00:12:31,300 --> 00:12:35,400
Outside of the macros themselves, I want the macros to pretty much be

231
00:12:35,700 --> 00:12:37,000
to pretty much be all of it.

232
00:12:37,900 --> 00:12:39,200
So, let's see here.

233
00:12:39,900 --> 00:12:44,300
Debug frame end gets called gets called there.

234
00:12:45,000 --> 00:12:49,800
So then I'll just say, I guess, I'll just say right about here.

235
00:12:49,800 --> 00:12:53,100
We'll do the end block and that that'll be the last block.

236
00:12:59,200 --> 00:12:59,500
Yeah.

237
00:13:02,100 --> 00:13:07,200
Okay, well, this will be, I guess frame display, something like that.

238
00:13:08,300 --> 00:13:09,600
So that's what I want.

239
00:13:10,300 --> 00:13:12,200
And then this can live outside it because it's still going to be

240
00:13:12,200 --> 00:13:13,600
included in the overall time.

241
00:13:13,600 --> 00:13:19,500
Block for this Loop right for the whole Loop, but that's about it.

242
00:13:19,800 --> 00:13:21,900
So I don't really know.

243
00:13:25,200 --> 00:13:28,000
I don't really know the best way to get it is, I guess what I would

244
00:13:28,000 --> 00:13:35,100
say, I guess, so, here's here's what I'm thinking, since those manual

245
00:13:35,100 --> 00:13:38,100
blocks probably want to be named anyway.

246
00:13:39,200 --> 00:13:45,200
What I'm thinking is, maybe I don't, maybe I don't do them quite like

247
00:13:45,200 --> 00:13:45,700
that.

248
00:13:45,800 --> 00:13:47,400
Maybe I do them like this.

249
00:13:49,500 --> 00:13:53,700
Something like that, you know, I don't really like the fact that I

250
00:13:53,700 --> 00:14:00,400
have to copy the name into places, but you know, if you had blocks

251
00:14:00,400 --> 00:14:03,100
that we're sort of in closing each other, I feel like you would have

252
00:14:03,100 --> 00:14:04,100
to do that anyway.

253
00:14:04,500 --> 00:14:09,500
So that's perhaps not such a big, big problem, but let's see here.

254
00:14:09,500 --> 00:14:11,400
So we've got audio updated.

255
00:14:12,600 --> 00:14:14,200
And audio updated.

256
00:14:15,700 --> 00:14:16,000
Frame.

257
00:14:16,000 --> 00:14:20,200
Wait, complete and see here.

258
00:14:20,400 --> 00:14:22,600
So this is not really framerate complete its frame.

259
00:14:22,600 --> 00:14:23,200
Wait.

260
00:14:24,300 --> 00:14:24,700
Right.

261
00:14:25,800 --> 00:14:28,300
These are kind of named differently now that their blocks.

262
00:14:29,200 --> 00:14:31,100
So this is the frame display.

263
00:14:32,600 --> 00:14:37,600
Frame display and audio update.

264
00:14:37,700 --> 00:14:40,600
It's probably without a d would make a little more sense.

265
00:14:40,600 --> 00:14:41,600
Now, I think.

266
00:14:42,700 --> 00:14:43,700
Game update.

267
00:14:44,000 --> 00:14:45,100
Audio update.

268
00:14:48,200 --> 00:14:49,200
Input processing.

269
00:14:52,900 --> 00:14:53,700
Like so.

270
00:14:55,100 --> 00:14:57,600
And executable refresh.

271
00:15:00,400 --> 00:15:04,200
Yeah, you know let's say we did something like that in that case we

272
00:15:04,200 --> 00:15:06,700
would have like a thin cut that comes in here that's name.

273
00:15:06,900 --> 00:15:09,500
And so what I was thinking we could do is we could just go like

274
00:15:11,600 --> 00:15:13,900
you know, whatever that name is.

275
00:15:19,100 --> 00:15:22,200
We could use as the timer and I'll just do another thing here that's

276
00:15:22,200 --> 00:15:23,400
like begin block.

277
00:15:24,000 --> 00:15:24,400
So,

278
00:15:27,900 --> 00:15:33,400
So what I'm thinking is essentially we do the exact same thing here.

279
00:15:33,400 --> 00:15:37,900
So this guy does like begin block and it just passes counter as the

280
00:15:37,900 --> 00:15:40,200
name of the counter variable, right?

281
00:15:41,400 --> 00:15:41,700
You know.

282
00:15:41,700 --> 00:15:45,100
And maybe we stick a underscore at the end of that there just to make

283
00:15:45,100 --> 00:15:48,300
sure that it's, you know, not going to be used by anyone or something

284
00:15:48,300 --> 00:15:48,800
like this.

285
00:15:48,900 --> 00:15:50,800
Although I guess we don't have to care about that here.

286
00:15:52,200 --> 00:15:54,700
Yeah, although that may be something that you'd want to do.

287
00:15:55,400 --> 00:15:55,700
I don't know.

288
00:15:55,700 --> 00:15:56,100
We'll see.

289
00:15:56,400 --> 00:15:57,000
So, anyway,

290
00:15:57,300 --> 00:16:00,200
When we start the time block, we do what you would expect.

291
00:16:00,200 --> 00:16:03,900
Here we go, ahead and pass us.

292
00:16:03,900 --> 00:16:12,400
I guess all the information through to this macro here, right?

293
00:16:13,600 --> 00:16:16,400
So this one's going to call it directly and then the external code can

294
00:16:16,400 --> 00:16:17,700
call this non directly.

295
00:16:17,900 --> 00:16:21,700
I think that'll work, we'll find out so this would do begin block

296
00:16:21,700 --> 00:16:24,900
underscore name like that.

297
00:16:25,200 --> 00:16:26,900
Although in this case it needs

298
00:16:27,100 --> 00:16:29,700
it's to do something where it's going to pass, like a bunch of these

299
00:16:29,700 --> 00:16:34,100
things through such as whatever the counter, the actual counter value

300
00:16:34,100 --> 00:16:36,100
is whatever.

301
00:16:36,100 --> 00:16:39,100
The, the file name is whatever the line number is, whatever the

302
00:16:39,100 --> 00:16:43,000
function name is, or I should say the block name in this case.

303
00:16:44,100 --> 00:16:46,600
And then I don't know about the hit count just yet.

304
00:16:46,600 --> 00:16:49,000
We'll see if that ends up being something that we still want.

305
00:16:49,100 --> 00:16:51,900
So, when I put the block name there, the line number, the file name

306
00:16:52,600 --> 00:16:54,200
will get the debug record the exact same way.

307
00:16:54,200 --> 00:16:56,800
We always get the debug record, we got the counter in it, so that's

308
00:16:56,800 --> 00:16:56,900
all.

309
00:16:57,100 --> 00:16:57,400
Fine.

310
00:16:57,900 --> 00:17:01,000
I've got the record debug event which is going to work off of the

311
00:17:01,000 --> 00:17:01,700
counter there.

312
00:17:01,900 --> 00:17:05,599
So I guess all we really need to do is pass the actual counter here.

313
00:17:05,599 --> 00:17:08,000
In fact, I've sort of starting to see how this this pulls together a

314
00:17:08,000 --> 00:17:08,599
little bit better.

315
00:17:08,800 --> 00:17:12,500
So we do the record debug vent, we've got the counter there, so there

316
00:17:12,500 --> 00:17:16,700
it is, we just pass it in and then the name the name bit doesn't have

317
00:17:16,700 --> 00:17:17,599
to flow through to here.

318
00:17:17,599 --> 00:17:19,599
So it's really just going to be the counter.

319
00:17:19,599 --> 00:17:22,400
The founding of the line number, the block name and that's all it

320
00:17:22,400 --> 00:17:24,099
should really need in order to work.

321
00:17:24,500 --> 00:17:26,900
Everything else looks like it should

322
00:17:27,000 --> 00:17:28,900
Be be pretty pretty much.

323
00:17:28,900 --> 00:17:29,500
Okay?

324
00:17:29,900 --> 00:17:35,100
So if that's the way we do, let's see if that's the way we do the

325
00:17:35,100 --> 00:17:39,200
block begin, then what we need to do now is go.

326
00:17:39,200 --> 00:17:43,300
Okay, if that's how we're doing baguette whenever we call begin block,

327
00:17:43,300 --> 00:17:45,300
we need to be able to generate these things from it.

328
00:17:45,800 --> 00:17:48,600
And so, what we want to do there is first of all, we have to, we have

329
00:17:48,600 --> 00:17:52,200
to make something that records with a counter is right.

330
00:17:52,200 --> 00:17:54,600
And so what I was thinking is we could do something like, say, oh,

331
00:17:54,600 --> 00:17:56,900
okay, it's going to be like counter

332
00:17:57,000 --> 00:17:59,800
Or underscore name, so whatever the name.

333
00:18:00,000 --> 00:18:04,800
That's where we'll store what the counter value actually is, does that

334
00:18:04,800 --> 00:18:05,300
make sense?

335
00:18:05,500 --> 00:18:08,800
And then what we can do is call begin block, because now we have this

336
00:18:08,800 --> 00:18:13,700
information, we can just say, Okay, begin block with the counter that

337
00:18:13,700 --> 00:18:16,500
we've stored so that the envelope can use it right?

338
00:18:16,500 --> 00:18:18,800
That this is the I'm worried about this guy being able to use it

339
00:18:18,800 --> 00:18:19,400
essentially.

340
00:18:21,600 --> 00:18:22,600
So we've got that.

341
00:18:22,600 --> 00:18:25,000
We know we can get the file name, just from the compiler, we can get

342
00:18:25,000 --> 00:18:28,800
the line number from the compiler, and then the block name is just

343
00:18:28,800 --> 00:18:32,000
going to be whatever name we actually got past and there's our begin

344
00:18:32,000 --> 00:18:34,300
block and that just should just work right.

345
00:18:34,800 --> 00:18:37,500
Then our and block will pick up the counter from here.

346
00:18:37,500 --> 00:18:41,700
So it will be able to do the record debug event that it actually needs

347
00:18:41,700 --> 00:18:43,500
to be able to do, right?

348
00:18:43,900 --> 00:18:47,300
And in order to do the end debug event, all it actually needs, is that

349
00:18:47,300 --> 00:18:50,500
counter value and so we know that that's it would be this cow.

350
00:18:50,700 --> 00:18:57,100
Our value here would be the name of it so you know again we just make

351
00:18:57,100 --> 00:18:59,600
a second one up here so that it can work in both cases.

352
00:19:01,500 --> 00:19:05,600
I suppose actually I don't really need both of them now that I think

353
00:19:05,600 --> 00:19:06,300
about it.

354
00:19:07,200 --> 00:19:08,300
Well, it doesn't matter.

355
00:19:08,400 --> 00:19:09,600
I'll make them both anyway.

356
00:19:10,000 --> 00:19:12,100
So we've got, you know, both ones here.

357
00:19:12,100 --> 00:19:14,500
And this is just going to pass in whatever the counter is actually

358
00:19:14,500 --> 00:19:15,400
supposed to be.

359
00:19:15,700 --> 00:19:20,100
And so, whatever the counter is in this case, it will go ahead and do

360
00:19:20,100 --> 00:19:20,500
the record.

361
00:19:20,600 --> 00:19:25,800
Debug event, like, so with whatever that counter is and the end block

362
00:19:26,000 --> 00:19:26,500
marker.

363
00:19:27,000 --> 00:19:31,200
So if you are to call it like this, then you get exactly what you

364
00:19:31,200 --> 00:19:31,900
would expect.

365
00:19:31,900 --> 00:19:34,800
If you are to call it down, here you pass sort of counter as like a

366
00:19:34,800 --> 00:19:39,400
special case to it and then it can pass through all the stuff that

367
00:19:39,400 --> 00:19:42,100
came from the other macro, right?

368
00:19:42,100 --> 00:19:44,700
So it's really just a, this is just a bunch of conduit in, right?

369
00:19:44,700 --> 00:19:46,000
It's just a bunch of condo inning,

370
00:19:47,600 --> 00:19:50,600
I really wish you'd probably call this time to function, but that's

371
00:19:50,600 --> 00:19:51,300
kind of another.

372
00:19:52,100 --> 00:19:54,000
Another situation we can talk about that.

373
00:19:54,000 --> 00:19:57,400
Second fact, I'll just go ahead and call this block name and I'll call

374
00:19:57,400 --> 00:20:03,900
this block name and I will say that we are calling this time to walk

375
00:20:03,900 --> 00:20:04,300
thing.

376
00:20:04,600 --> 00:20:08,700
This is going to be called time function so that way it can pass the

377
00:20:08,700 --> 00:20:12,700
function down through everything right.

378
00:20:18,800 --> 00:20:20,600
And then we can just change that so that it makes sense.

379
00:20:20,600 --> 00:20:21,800
And that way, it's not time Block.

380
00:20:21,800 --> 00:20:23,400
It's time for function, right?

381
00:20:24,700 --> 00:20:25,100
Okay.

382
00:20:25,100 --> 00:20:27,100
Because we could then we could have another one where we give it a

383
00:20:27,100 --> 00:20:30,500
specific name and that would be kind of nice as well, right?

384
00:20:31,000 --> 00:20:31,900
So, anyway,

385
00:20:33,000 --> 00:20:35,500
All right, so you can sort of see what's going on here.

386
00:20:35,900 --> 00:20:38,000
This will hopefully makes reasonable sense.

387
00:20:38,500 --> 00:20:41,600
So this is going to call Em block underscore with.

388
00:20:41,600 --> 00:20:44,600
Again, that counter, that got stored in the previous macro, this guy

389
00:20:44,600 --> 00:20:44,900
up here.

390
00:20:45,200 --> 00:20:48,200
And so I think that should basically do what we want.

391
00:20:48,200 --> 00:20:49,800
We don't need the manual time block thing anymore.

392
00:20:49,800 --> 00:20:52,600
That's actually just handled for us here by that sort of name

393
00:20:52,600 --> 00:20:53,400
concatenation.

394
00:20:53,400 --> 00:20:58,100
So, I think that whole thing, sort of roughly checks out, We've Got to

395
00:20:58,100 --> 00:20:59,900
Now handle all of

396
00:21:00,000 --> 00:21:03,700
The the chaos that I will have caused, by making these changes,

397
00:21:03,700 --> 00:21:07,100
certainly, the block name does not exist in debug events because I,

398
00:21:07,100 --> 00:21:08,400
you know, what you gonna do?

399
00:21:08,400 --> 00:21:09,000
I change that.

400
00:21:09,000 --> 00:21:11,100
So we need this to now be blocked name.

401
00:21:11,800 --> 00:21:12,400
There we go.

402
00:21:13,300 --> 00:21:16,300
And then, when we come through here times block, is always going to be

403
00:21:16,300 --> 00:21:18,700
timed function from now on.

404
00:21:19,400 --> 00:21:22,300
And so, this really this guy should be something else.

405
00:21:22,300 --> 00:21:24,500
In fact, this guy we should just call time block.

406
00:21:24,800 --> 00:21:28,400
And we can call this like, you know, pixel fill or something like

407
00:21:28,400 --> 00:21:29,500
that, right?

408
00:21:37,700 --> 00:21:38,600
Yeah.

409
00:21:41,200 --> 00:21:43,800
I'm just going to call it pixel fill for now.

410
00:21:46,900 --> 00:21:49,700
I can't think of a reason not to call it that.

411
00:21:50,600 --> 00:21:51,600
So we're just gonna call it that.

412
00:21:52,000 --> 00:21:52,500
All right.

413
00:21:53,600 --> 00:21:55,200
This should be a time function.

414
00:21:55,600 --> 00:21:57,200
This should also be a time function.

415
00:21:57,600 --> 00:21:59,300
This should be a time flock.

416
00:21:59,600 --> 00:22:01,400
I'll pixel fill again.

417
00:22:02,400 --> 00:22:04,000
This should be a time function.

418
00:22:04,600 --> 00:22:05,500
Time function.

419
00:22:06,400 --> 00:22:13,000
Time function, time function and function, still and function.

420
00:22:14,400 --> 00:22:17,600
These are basically all gonna be time function except the odd case

421
00:22:17,600 --> 00:22:20,300
where we got a second one in there, where we wanted to give it a name,

422
00:22:22,300 --> 00:22:22,900
right?

423
00:22:26,700 --> 00:22:27,200
Okay.

424
00:22:29,700 --> 00:22:30,700
There are a lot of these.

425
00:22:34,700 --> 00:22:35,100
Okay.

426
00:22:36,500 --> 00:22:37,500
Let's take a look.

427
00:22:40,900 --> 00:22:44,100
Timed block identifier, not found.

428
00:22:44,100 --> 00:22:45,300
That is true.

429
00:22:47,700 --> 00:22:53,100
Timed block should be time function and time function we go.

430
00:22:55,200 --> 00:22:57,600
Okay, pixel fill.

431
00:22:59,600 --> 00:23:01,800
Yeah, I should probably also Define times block.

432
00:23:01,800 --> 00:23:07,800
So if I do timed block like so basically, I'm just going to clone

433
00:23:07,800 --> 00:23:08,200
this.

434
00:23:08,200 --> 00:23:11,100
I could probably get away with actually making these macros call each

435
00:23:11,100 --> 00:23:12,600
other, but I don't really want to think about it.

436
00:23:14,000 --> 00:23:15,500
Too hard at the moment.

437
00:23:16,000 --> 00:23:20,100
So, all I want to do here is say that this function right here is like

438
00:23:20,100 --> 00:23:21,700
block name, right?

439
00:23:22,400 --> 00:23:24,800
And in fact, I guess well, you know, now that I think about it, I

440
00:23:24,800 --> 00:23:26,100
could probably do this pretty easily.

441
00:23:27,200 --> 00:23:27,600
But yeah.

442
00:23:27,600 --> 00:23:30,600
So you just pass in the block name, right?

443
00:23:31,400 --> 00:23:34,300
And so you still get the same exact Behavior, fact.

444
00:23:34,300 --> 00:23:36,400
I think I'm going to, I'm going to put this like this though.

445
00:23:37,800 --> 00:23:40,000
You still get the exact same behavior that macros.

446
00:23:40,000 --> 00:23:42,600
So I think I can just make it I can just consolidate these things

447
00:23:42,600 --> 00:23:43,900
trivially, right?

448
00:23:43,900 --> 00:23:48,500
So you pass a block name for time block, and that will always have

449
00:23:48,600 --> 00:23:50,700
that block named coming in first

450
00:23:52,000 --> 00:23:54,900
So that makes it really trivial to implement time function in terms of

451
00:23:54,900 --> 00:23:55,500
these guys.

452
00:23:55,700 --> 00:23:59,200
I think that means all I'd have to do is say, Okay, pass the function

453
00:23:59,200 --> 00:23:59,800
name first.

454
00:24:00,200 --> 00:24:03,500
And then I get the same thing and then I don't need the rest of those,

455
00:24:03,600 --> 00:24:03,800
right?

456
00:24:03,800 --> 00:24:06,300
So now you can write time function in time, Block, in terms of the

457
00:24:06,300 --> 00:24:09,200
same little weird Mac out, macro cracking thing that we had to do to

458
00:24:09,200 --> 00:24:11,200
get the correct concatenation there.

459
00:24:12,700 --> 00:24:15,900
Okay, so time function, now just calls time.

460
00:24:15,900 --> 00:24:19,700
Block in all cases, everybody always calls time to block underneath,

461
00:24:20,100 --> 00:24:22,700
and so that can go back to the way that it was.

462
00:24:24,300 --> 00:24:29,200
So in the case, where you pass this in here, the block name

463
00:24:30,000 --> 00:24:34,000
I guess I need to, I need to turn it into a string obviously, so we'll

464
00:24:34,000 --> 00:24:34,600
do that.

465
00:24:35,200 --> 00:24:39,400
And then these are going to be again time function, pretty much

466
00:24:39,400 --> 00:24:45,000
everywhere that we had time blocks before our time functions now.

467
00:24:45,500 --> 00:24:46,400
So there we go.

468
00:24:47,100 --> 00:24:55,600
And so on again, same thing, this is a Time block, this is a Time

469
00:24:55,600 --> 00:24:59,400
block for the debug render group, I guess we'll just call it that

470
00:25:02,000 --> 00:25:05,000
Okay, there's a Time function.

471
00:25:06,400 --> 00:25:08,800
And function name.

472
00:25:08,800 --> 00:25:09,400
That's true.

473
00:25:09,400 --> 00:25:10,700
Should be blocked name.

474
00:25:12,300 --> 00:25:15,900
And should be blocked name everywhere now so I never want it to be

475
00:25:16,200 --> 00:25:17,400
function name anymore.

476
00:25:18,000 --> 00:25:24,000
So let's see function function name, got rid of it there and here it

477
00:25:24,000 --> 00:25:25,200
should be block name again.

478
00:25:26,100 --> 00:25:32,400
So now we are in better shape, function name, block, name doot-doot

479
00:25:32,500 --> 00:25:33,000
doot-doot,

480
00:25:36,300 --> 00:25:41,500
Okay, so now we need to actually pass some stuff here for our time

481
00:25:41,500 --> 00:25:41,800
block.

482
00:25:41,800 --> 00:25:45,600
So this is the win32 loop.

483
00:25:46,000 --> 00:25:47,100
I guess we could call it.

484
00:25:47,500 --> 00:25:52,600
Maybe, I don't know, seems like a reasonable name and then we've got

485
00:25:52,600 --> 00:25:54,100
executable refresh for begin block.

486
00:25:54,100 --> 00:25:57,400
Okay, so now we got to go make those macros actually work properly.

487
00:25:57,400 --> 00:26:01,100
Hopefully, let's see here.

488
00:26:01,100 --> 00:26:05,100
So begin block.

489
00:26:06,000 --> 00:26:10,100
Name that all looks good.

490
00:26:10,100 --> 00:26:11,000
It was not expecting.

491
00:26:11,000 --> 00:26:12,500
A string as the final thing.

492
00:26:12,500 --> 00:26:17,400
Is that what I am to be told?

493
00:26:17,400 --> 00:26:20,100
What is the that actually looks like?

494
00:26:20,100 --> 00:26:21,300
What I would have expected.

495
00:26:22,100 --> 00:26:28,100
Let's see, block name is there lb name so I'm not sure exactly what

496
00:26:28,100 --> 00:26:32,800
that's complaining about counter underscore name is the counter and

497
00:26:32,800 --> 00:26:33,800
that's all good.

498
00:26:33,900 --> 00:26:35,600
It looks like record.

499
00:26:35,800 --> 00:26:38,300
Bug event, working out the counter.

500
00:26:38,300 --> 00:26:43,800
So what is it actually complaining about syntax error string and begin

501
00:26:43,800 --> 00:26:45,100
block executable refresh.

502
00:26:45,100 --> 00:26:48,100
So if we were to call begin block with executable refresh, we get

503
00:26:48,100 --> 00:26:51,400
counter underscore executable Reef s equals counter that seems fair.

504
00:26:51,500 --> 00:26:54,700
You have counter extra recess getting called packed into their the

505
00:26:54,700 --> 00:26:55,300
file.

506
00:26:55,500 --> 00:26:56,400
The wine number.

507
00:26:57,900 --> 00:26:59,800
And the and the name String eyes.

508
00:27:00,300 --> 00:27:02,300
So we come up to here to begin block.

509
00:27:02,600 --> 00:27:05,100
Again we've got counter underscore name there, which means it would be

510
00:27:05,100 --> 00:27:05,900
replaced here.

511
00:27:06,000 --> 00:27:09,100
Thanks, Visual Studio, by the way, for, not telling me any information

512
00:27:09,100 --> 00:27:10,100
about this whatsoever.

513
00:27:10,200 --> 00:27:11,900
That's that's always really helpful.

514
00:27:13,200 --> 00:27:14,000
So,

515
00:27:17,800 --> 00:27:19,800
Llvm gives you like the macro expansion stuff.

516
00:27:19,800 --> 00:27:21,400
It's really easy to debug stuff like this.

517
00:27:23,500 --> 00:27:26,000
For all the ways, the visual Studios debugger is way better than the

518
00:27:26,000 --> 00:27:26,700
ones on Linux.

519
00:27:26,700 --> 00:27:30,500
The compiler on Linux, is way better than what have Windows.

520
00:27:32,300 --> 00:27:35,600
So okay, we grab the record out by adding the counter.

521
00:27:35,600 --> 00:27:37,900
I guess what I'm going to do is just do, what I would, what I have to

522
00:27:37,900 --> 00:27:39,500
do here because compiler gives me no choice.

523
00:27:39,500 --> 00:27:43,200
I'm just going to start pulling apart parts of these to see, which

524
00:27:43,200 --> 00:27:45,600
one's it's complaining about, right?

525
00:27:49,300 --> 00:27:50,400
Okay, so that makes sense.

526
00:27:50,400 --> 00:27:53,100
So it looks like that there's nothing wrong with that it's doesn't it

527
00:27:53,100 --> 00:27:54,700
doesn't mind that at all.

528
00:27:55,200 --> 00:27:58,200
So I'll kind of come out a little bit more here.

529
00:27:58,200 --> 00:28:02,800
Move this down right to here.

530
00:28:03,900 --> 00:28:04,800
See how that goes.

531
00:28:07,100 --> 00:28:10,100
So Sinister string, oh it's just that.

532
00:28:11,500 --> 00:28:14,200
So okay, so file name line, different block name.

533
00:28:14,500 --> 00:28:17,700
So I just got a, you know, make some way of these things getting

534
00:28:17,800 --> 00:28:18,600
getting put in.

535
00:28:19,700 --> 00:28:22,100
So they don't name conflict with the members of the struct.

536
00:28:22,200 --> 00:28:26,500
That is me misremembering when it decides to expand and when it

537
00:28:26,500 --> 00:28:29,400
doesn't, so that's easy enough fixed.

538
00:28:30,300 --> 00:28:34,400
So I think that should be it.

539
00:28:34,400 --> 00:28:36,200
Now, of course these

540
00:28:37,800 --> 00:28:39,600
Use of a temporary here is going to be a problem.

541
00:28:39,600 --> 00:28:42,400
So what we really want is to just block these, right?

542
00:28:42,400 --> 00:28:43,400
Put those in a block.

543
00:28:43,700 --> 00:28:47,600
So that way, the, the record itself won't name conflict with anybody

544
00:28:47,900 --> 00:28:48,900
and that should be fine.

545
00:28:50,500 --> 00:28:53,900
All right, so we don't pass frame end in for anymore.

546
00:28:53,900 --> 00:28:56,300
And so now we're pretty much done with that stuff.

547
00:28:56,300 --> 00:28:59,600
There's just one problem and that problem is that we don't actually

548
00:28:59,600 --> 00:29:02,800
have the global debug table when we're in here, right?

549
00:29:02,800 --> 00:29:04,500
And you can see that unresolved external.

550
00:29:05,000 --> 00:29:08,600
So, all we really need to do to kind of finish up to get this.

551
00:29:08,600 --> 00:29:12,500
I think working is, we need some way of the debug table itself

552
00:29:12,700 --> 00:29:14,300
actually have, you know, sort of

553
00:29:19,000 --> 00:29:19,800
Being able.

554
00:29:21,300 --> 00:29:28,200
To write in when we, you know, when we load the dll, we need some way

555
00:29:28,300 --> 00:29:30,400
of grabbing the global debug table.

556
00:29:32,200 --> 00:29:33,100
From the system, right?

557
00:29:33,100 --> 00:29:36,900
We need to be able to say that that Global debug table points to

558
00:29:36,900 --> 00:29:38,200
something, right?

559
00:29:38,900 --> 00:29:42,500
And so I'm trying to think of what the best way to do that would be

560
00:29:43,400 --> 00:29:47,500
I'm thinking that probably what we would want to do is make sure that

561
00:29:49,900 --> 00:29:53,700
When we load it right, we need a pointer to the global debug table.

562
00:29:53,700 --> 00:29:58,800
So let's see here, the global debug table due to hanako platform.

563
00:30:00,000 --> 00:30:00,600
XO.

564
00:30:01,900 --> 00:30:04,700
So when we did this, we have the global debug table.

565
00:30:07,200 --> 00:30:10,400
And we need a way of pointing to that, right?

566
00:30:11,100 --> 00:30:15,200
We need a way of accessing that I guess the only thing that's kind of

567
00:30:15,200 --> 00:30:17,200
nasty about this is the way that I did it here.

568
00:30:17,200 --> 00:30:20,200
It's not actually a pointer that's kind of a problem because there's

569
00:30:20,200 --> 00:30:25,100
no real way for me to have that work that I can think of

570
00:30:28,300 --> 00:30:30,700
Yeah, I can't really think of any way to make that work.

571
00:30:31,600 --> 00:30:35,800
If it's, if it's not a, if it's not a pointer, if it's a pointer works

572
00:30:35,800 --> 00:30:38,300
fine because then I can just point that pointer in anything that I

573
00:30:38,300 --> 00:30:40,300
need to point to, right?

574
00:30:40,800 --> 00:30:42,000
And that's not really a problem.

575
00:30:42,300 --> 00:30:45,700
So I feel like this kind of needs to be that which is unfortunate

576
00:30:45,700 --> 00:30:48,100
because it means there's some indirection to the way that we're

577
00:30:48,100 --> 00:30:52,700
writing things instead of it just being a constant location but you

578
00:30:52,700 --> 00:30:54,700
know, we'll see how that goes.

579
00:30:56,000 --> 00:31:00,300
So if I was to do that, I'm wondering if I can, if I can get away with

580
00:31:00,300 --> 00:31:03,000
it, let's find out what will debug table dot?

581
00:31:03,200 --> 00:31:05,000
We will debug table Arrow.

582
00:31:05,600 --> 00:31:06,500
So, there we go.

583
00:31:07,100 --> 00:31:09,600
Let's go ahead and run that.

584
00:31:10,900 --> 00:31:14,000
So, the global debug table now is going to be, like, debug table

585
00:31:14,000 --> 00:31:15,800
Global debug table, right?

586
00:31:15,800 --> 00:31:18,200
And then we've got a pointer to the debug table, which is just this

587
00:31:20,900 --> 00:31:21,400
Right?

588
00:31:23,000 --> 00:31:24,800
And this guy is actually a static, right?

589
00:31:24,800 --> 00:31:30,400
This guy is actually a global variable and so he doesn't actually

590
00:31:30,400 --> 00:31:34,600
export, but this guy does actually export to the other to their stuff,

591
00:31:35,300 --> 00:31:35,700
okay?

592
00:31:35,700 --> 00:31:38,400
So I think that's pretty much all.

593
00:31:38,400 --> 00:31:40,600
We would need to do to get the main line code working.

594
00:31:42,300 --> 00:31:47,300
However, now we still need a way of getting the this to work, you

595
00:31:47,300 --> 00:31:47,600
know.

596
00:31:49,300 --> 00:31:52,400
So that the external code that the platform layer can get a hold of

597
00:31:52,400 --> 00:31:53,600
it, right?

598
00:31:54,300 --> 00:31:57,700
So let's go ahead and see if we can just finish.

599
00:31:57,700 --> 00:31:58,300
Porting this up.

600
00:31:58,300 --> 00:31:59,400
Here we go.

601
00:32:02,000 --> 00:32:02,900
Events.

602
00:32:06,800 --> 00:32:07,700
And done.

603
00:32:07,800 --> 00:32:13,600
Okay so obviously if I just didn't if I just want it to compile, right

604
00:32:13,600 --> 00:32:17,200
and I don't want it to actually work like I don't want it to to

605
00:32:17,200 --> 00:32:21,000
actually I don't care if I actually get the information, then it's not

606
00:32:21,000 --> 00:32:23,100
so hard because then I can just say we've got a debug table.

607
00:32:23,100 --> 00:32:29,800
This is a global debug table debug table and I've got a pointer to it

608
00:32:29,900 --> 00:32:31,800
Global debug table, right?

609
00:32:34,500 --> 00:32:37,700
And I just Define one in the platform layer.

610
00:32:37,700 --> 00:32:42,400
And now these two sections, the thing on either side of the dll are

611
00:32:42,400 --> 00:32:48,000
actually, you know, writing Loops are actually writing to two totally

612
00:32:48,000 --> 00:32:49,200
separate places in memory.

613
00:32:49,600 --> 00:32:54,900
So when I run this right, well when I run this apparently I will just

614
00:32:54,900 --> 00:32:58,600
crash which is also often, which is which is fabulous.

615
00:33:01,000 --> 00:33:02,600
What is the problem here?

616
00:33:05,200 --> 00:33:08,000
Why is my where's my pointer?

617
00:33:08,000 --> 00:33:10,500
Not initialized Global debug?

618
00:33:10,700 --> 00:33:11,200
All right?

619
00:33:13,600 --> 00:33:15,700
It is undefined.

620
00:33:18,100 --> 00:33:19,800
How is it undefined people?

621
00:33:21,200 --> 00:33:22,200
What's going on?

622
00:33:24,500 --> 00:33:25,900
What is going on?

623
00:33:27,100 --> 00:33:29,100
Let me make sure I didn't do something stupid.

624
00:33:29,500 --> 00:33:31,600
Well, I obviously did something stupid.

625
00:33:31,700 --> 00:33:36,000
So that's that's an incorrect statement.

626
00:33:36,000 --> 00:33:39,500
What I mean to say is, let me make sure I didn't do something

627
00:33:39,500 --> 00:33:41,200
obviously stupid.

628
00:33:43,400 --> 00:33:45,500
I feel like this should have been initialized.

629
00:33:45,700 --> 00:33:47,700
Is it not being initialized for some?

630
00:33:47,700 --> 00:33:48,100
Not sure.

631
00:33:48,100 --> 00:33:49,300
I feel like that should be

632
00:33:50,700 --> 00:33:51,400
Hmm.

633
00:33:52,300 --> 00:33:53,100
Hmm.

634
00:34:02,700 --> 00:34:06,200
I feel like once it gets loaded, that should be correct but it's

635
00:34:06,200 --> 00:34:06,900
obviously not.

636
00:34:06,900 --> 00:34:09,600
So I'm pretty interested to know why it's not.

637
00:34:09,699 --> 00:34:11,199
It's the very first time through.

638
00:34:11,400 --> 00:34:13,600
I don't understand why I can't access it.

639
00:34:15,000 --> 00:34:17,800
My typing it in wrong, Global debug table.

640
00:34:19,199 --> 00:34:20,800
Right, Global debug cable.

641
00:34:22,199 --> 00:34:23,699
I guess I was typing it incorrectly.

642
00:34:28,000 --> 00:34:30,699
So that's so that actually looks okay.

643
00:34:30,699 --> 00:34:32,300
So maybe okay.

644
00:34:32,300 --> 00:34:36,199
Yeah, sorry, don't want you to do that.

645
00:34:36,199 --> 00:34:41,000
I suppose so I guess maybe it's just actually a problem with the way I

646
00:34:41,000 --> 00:34:42,300
implemented time function.

647
00:34:42,400 --> 00:34:46,199
Maybe I'm just being, I was blaming the wrong thing.

648
00:34:46,400 --> 00:34:48,800
It could be that I just made a mistake and here somewhere.

649
00:34:49,400 --> 00:34:52,000
So it does time block and it actually starts us up.

650
00:34:52,100 --> 00:34:55,199
Maybe I was doing something stupid.

651
00:34:55,300 --> 00:34:57,400
Ah, that's the problem, I just didn't

652
00:34:57,600 --> 00:34:58,600
Initialize counter.

653
00:34:59,200 --> 00:35:01,000
That's what that's that, was it?

654
00:35:01,000 --> 00:35:02,300
So that's fine.

655
00:35:02,700 --> 00:35:06,400
Alright, so now we're back to what I was trying to talk about before.

656
00:35:06,600 --> 00:35:09,300
So if I run this it'll work just fine.

657
00:35:09,300 --> 00:35:12,500
But the problem is now, the platform layer is writing into a different

658
00:35:12,600 --> 00:35:14,300
debug memory, right?

659
00:35:14,300 --> 00:35:16,900
It's writing into a completely different.

660
00:35:18,000 --> 00:35:21,800
Area of memory, then where we actually wanted to write to because I

661
00:35:21,800 --> 00:35:24,700
just declared there's one on either side of that dll boundary.

662
00:35:24,700 --> 00:35:27,700
Now, so the ones that the win32 platform layer everything.

663
00:35:27,700 --> 00:35:31,000
It writes to isn't totally separate memory from the other one.

664
00:35:31,500 --> 00:35:34,700
So what I need to do now is I just need to hook them up, right?

665
00:35:34,800 --> 00:35:39,700
So what I need to do is say, okay, on the platform layer side, right,

666
00:35:39,700 --> 00:35:42,900
where We've Got This Global, debug table on that side.

667
00:35:43,000 --> 00:35:47,500
What I can do is if I can just get the debug table out of the

668
00:35:48,200 --> 00:35:53,100
Sort of the dll here, right?

669
00:35:53,100 --> 00:35:56,300
If I can when I actually do this, right?

670
00:35:56,300 --> 00:35:59,100
So when I load the dll, I do win through to load game code.

671
00:35:59,600 --> 00:35:59,800
When I

672
00:36:00,000 --> 00:36:03,100
On the game code, I can just switch, what debug table.

673
00:36:03,100 --> 00:36:05,600
I'm writing into that, would be fine.

674
00:36:06,600 --> 00:36:11,200
So, when I load the game code, what I can do is introduce a function

675
00:36:11,200 --> 00:36:14,900
there, which is like, hey, I need you to give me back that debug

676
00:36:14,900 --> 00:36:15,400
table.

677
00:36:15,700 --> 00:36:18,700
And so I think the way that I'm going to do that the way that I think

678
00:36:18,700 --> 00:36:22,400
that I would prefer is at the end after it does, it's like first

679
00:36:22,400 --> 00:36:24,000
collation pass or something.

680
00:36:24,400 --> 00:36:26,700
Then I will go ahead and get it from from here.

681
00:36:27,000 --> 00:36:29,200
So what I'll do is I'll say Global debug

682
00:36:31,300 --> 00:36:35,700
Debug table my pointer, my Global table.

683
00:36:36,300 --> 00:36:40,000
I'm just going to override it with whatever you tell me to do, write

684
00:36:40,300 --> 00:36:41,200
something like that.

685
00:36:48,400 --> 00:36:49,600
That makes sense what I just said.

686
00:36:52,600 --> 00:36:53,600
I feel like it does.

687
00:36:55,600 --> 00:36:56,900
Except I don't really know.

688
00:36:59,400 --> 00:37:03,000
To be completely honest with you, it would seem a lot more saying, if

689
00:37:03,000 --> 00:37:07,800
what actually happened was it lived in the platform layer side and

690
00:37:07,800 --> 00:37:10,100
then the executable rode into that.

691
00:37:12,200 --> 00:37:15,300
There's reasons why that's not so good because that does mean that

692
00:37:15,300 --> 00:37:19,400
also the strings in it don't map correctly because when the executed,

693
00:37:19,400 --> 00:37:24,100
when the dll gets unloaded, all of the strings that come that were in,

694
00:37:24,100 --> 00:37:27,600
there are going to be invalid, and that would be annoying, right?

695
00:37:28,400 --> 00:37:29,200
So, I don't know.

696
00:37:30,600 --> 00:37:32,100
I'm going to do this for now, we'll see.

697
00:37:33,000 --> 00:37:36,000
So what I'm going to do here is I'm just going to say okay whenever

698
00:37:36,000 --> 00:37:40,500
we're going to unload, this thing when we do win32 load game code or

699
00:37:40,500 --> 00:37:42,300
something, we're just going to turn it off.

700
00:37:42,300 --> 00:37:47,100
So when we do unload game code, we're going to turn off that that

701
00:37:47,100 --> 00:37:48,200
Global debug table.

702
00:37:48,500 --> 00:37:51,600
We're going to point it back at our Global debug table.

703
00:37:57,000 --> 00:37:57,500
Right.

704
00:37:59,700 --> 00:38:02,300
And then when we get it loaded, we'll just reset it.

705
00:38:03,400 --> 00:38:04,200
That seems fair.

706
00:38:10,500 --> 00:38:11,900
Yeah that seems fair.

707
00:38:12,300 --> 00:38:15,200
Now we have a problem which is that we need to reset this but that's

708
00:38:15,200 --> 00:38:15,800
okay.

709
00:38:16,100 --> 00:38:19,300
We can always reset it over and over it so it doesn't overflow is

710
00:38:19,300 --> 00:38:20,100
basically what I'm saying.

711
00:38:20,300 --> 00:38:24,400
So, what we can do here is anytime we get to the end of this Loops, we

712
00:38:24,400 --> 00:38:28,300
can always do our Global debug table, the actual vote, sort of the

713
00:38:28,300 --> 00:38:32,000
stub one that we have that we use anytime that we don't have anything

714
00:38:32,000 --> 00:38:32,900
that's loaded.

715
00:38:33,900 --> 00:38:37,000
We can just go ahead and say, okay, you know, whatever that whatever

716
00:38:37,000 --> 00:38:41,400
that one's event index array index thing is, we'll just, we'll just

717
00:38:41,400 --> 00:38:42,700
clear it back to zero that way.

718
00:38:42,700 --> 00:38:45,000
We know that it's never going to overflow because we clear it at the

719
00:38:45,000 --> 00:38:45,600
end of every frame.

720
00:38:45,600 --> 00:38:46,900
Anyway, right?

721
00:38:47,400 --> 00:38:50,500
So that seems pretty straightforward to me.

722
00:38:50,500 --> 00:38:55,300
I feel like that'll work, there's probably a better way to do that if

723
00:38:55,300 --> 00:38:58,500
I thought about it a little longer, but I'm not sure I super Care at

724
00:38:58,500 --> 00:38:59,800
the moment but that's

725
00:39:00,000 --> 00:39:03,200
That's probably worth kind of drilling down into a little bit more if

726
00:39:03,200 --> 00:39:06,300
you really wanted to make like a sweet system, you'd probably want to

727
00:39:06,300 --> 00:39:09,300
figure out a way to get that, that sharing to be better.

728
00:39:10,800 --> 00:39:13,000
Like, I'm 99% sure I could do it.

729
00:39:13,000 --> 00:39:17,100
I just don't want to spend, you know, 30 minutes or an hour just, you

730
00:39:17,100 --> 00:39:18,300
know, kind of playing with that and going.

731
00:39:18,300 --> 00:39:20,000
What's the exact right way to do that.

732
00:39:20,600 --> 00:39:21,800
So, yeah, oops.

733
00:39:22,600 --> 00:39:24,200
So yeah, I think that's should do it.

734
00:39:24,200 --> 00:39:27,200
And then we need to just when we have debug frame end here, I just

735
00:39:27,200 --> 00:39:29,800
need to return the global

736
00:39:30,000 --> 00:39:32,800
debug table from there and now they should be writing into the same.

737
00:39:32,800 --> 00:39:36,900
Place in theory at least in some kind of a theory, right?

738
00:39:37,700 --> 00:39:40,700
Why is it a void function still?

739
00:39:40,700 --> 00:39:43,000
Where is my definition?

740
00:39:43,200 --> 00:39:50,900
Define, define define, where is debug Frank and there it is.

741
00:39:51,900 --> 00:39:52,900
Debug

742
00:39:54,200 --> 00:39:54,900
Table.

743
00:39:58,300 --> 00:39:58,700
Okay.

744
00:40:02,500 --> 00:40:03,000
Table.

745
00:40:07,200 --> 00:40:13,800
And yeah, so I feel like now we're getting a little closer here to, to

746
00:40:13,800 --> 00:40:16,500
success, although we're not there yet.

747
00:40:16,800 --> 00:40:20,300
I don't see our platform stuff showing up in here yet, right?

748
00:40:20,300 --> 00:40:25,400
So it's not it's not we have not, we have not succeeded yet.

749
00:40:27,500 --> 00:40:30,000
So, let's go ahead and take a look at what's happening here.

750
00:40:30,500 --> 00:40:35,200
So, let's go here and let's take stop right there.

751
00:40:36,100 --> 00:40:41,000
So, the global debug table right is, is pointing at well, it looks

752
00:40:41,000 --> 00:40:42,500
like it's pointing at the right thing.

753
00:40:44,000 --> 00:40:45,600
Is it C?

754
00:40:46,900 --> 00:40:50,200
Yeah, it's definitely pointing at the right table, so we grabbed it,

755
00:40:50,400 --> 00:40:51,200
so that's good.

756
00:40:51,800 --> 00:40:53,800
And then we're clearing the one that we're not using.

757
00:40:53,800 --> 00:40:56,800
So, that's kind of unimportant, right?

758
00:40:56,800 --> 00:40:59,000
So, here's our win32 Loop.

759
00:40:59,700 --> 00:41:00,800
Oh, you know what?

760
00:41:00,900 --> 00:41:01,900
It's probably just fine.

761
00:41:01,900 --> 00:41:04,800
We just never actually are printing any of these guys out, right?

762
00:41:04,800 --> 00:41:08,300
So, we just need to finish what we were doing and handmade debug to

763
00:41:08,300 --> 00:41:10,700
actually print them out, right?

764
00:41:10,700 --> 00:41:16,300
Because if I'm not mistaken this part here, doesn't

765
00:41:16,700 --> 00:41:21,600
Actually, grab the the ones from the platform layer, right?

766
00:41:21,600 --> 00:41:26,300
The debug records platform count is always set to 0, which is not is

767
00:41:26,300 --> 00:41:27,200
not what we want.

768
00:41:31,000 --> 00:41:31,700
So, let's see.

769
00:41:33,700 --> 00:41:36,700
What would we have to do to make this happen?

770
00:41:36,700 --> 00:41:38,200
We come to the counter cats.

771
00:41:38,200 --> 00:41:39,100
We clear them.

772
00:41:39,100 --> 00:41:44,500
We do this stuff here, counter States and then we set the snapshots

773
00:41:44,500 --> 00:41:44,600
up.

774
00:41:44,600 --> 00:41:48,700
So I think all we really have to do is now finish the part where we

775
00:41:48,700 --> 00:41:51,400
figure out what the count actually is, right?

776
00:41:51,400 --> 00:41:57,000
And in order to do that, what I think we should do is in the debug

777
00:41:57,000 --> 00:41:57,700
table itself.

778
00:41:57,700 --> 00:41:59,700
I feel like the debug table,

779
00:42:00,000 --> 00:42:01,600
Have that information, right?

780
00:42:01,600 --> 00:42:06,200
Like you notice, we didn't actually, we don't actually have that.

781
00:42:06,200 --> 00:42:09,400
We never actually put that in there because they were constant since

782
00:42:09,400 --> 00:42:10,100
and such.

783
00:42:10,400 --> 00:42:14,000
So what I'd like to do is just say that the debug table itself

784
00:42:15,700 --> 00:42:20,500
This guy, I'd like this, like the fact that's not aligned going to

785
00:42:20,500 --> 00:42:21,800
move that forward.

786
00:42:23,000 --> 00:42:23,700
In here.

787
00:42:23,700 --> 00:42:26,100
I'd like to have the ability to get the counts out.

788
00:42:26,100 --> 00:42:31,100
Right, so something here, where we do this, I'd like to do like record

789
00:42:31,100 --> 00:42:35,900
count like this where we have the record count per translation unit

790
00:42:36,100 --> 00:42:36,800
and that way.

791
00:42:36,800 --> 00:42:42,400
That'll, oh, he's sort of be kept up-to-date by other people who are,

792
00:42:42,500 --> 00:42:44,500
you know, who right into it, or something like that.

793
00:42:44,800 --> 00:42:48,800
And so, the way that, that would happen is, we'd get rid of this debug

794
00:42:48,800 --> 00:42:50,100
platform count thing here.

795
00:42:50,300 --> 00:42:52,700
And instead, what we do is we just go, you know,

796
00:42:53,100 --> 00:42:58,300
The total count total record count is just going to be the sum of all

797
00:42:58,300 --> 00:43:04,000
of the translation units, translation unit index are always called

798
00:43:04,000 --> 00:43:05,400
this unit Index, right?

799
00:43:05,400 --> 00:43:10,400
So unit index is going to be looping over all of these.

800
00:43:10,400 --> 00:43:13,300
It's going to take that debug table.

801
00:43:13,700 --> 00:43:15,500
So Global debug table

802
00:43:17,700 --> 00:43:22,300
Record count for whatever unit we're talking about and it will some

803
00:43:22,300 --> 00:43:24,400
that like so.

804
00:43:25,300 --> 00:43:28,900
So then we just know that the debug State counter count is just equal

805
00:43:28,900 --> 00:43:32,100
to however many records we have total, we then come through and we

806
00:43:32,100 --> 00:43:36,300
clear them all which seems fine, we then come through and we

807
00:43:36,300 --> 00:43:40,300
initialize these and so that the way that we would initialize those

808
00:43:40,300 --> 00:43:44,200
actually, in fact we could, we could even do that up here, right?

809
00:43:44,200 --> 00:43:46,600
So what we could say is, all right, there's an array.

810
00:43:46,800 --> 00:43:47,500
Counters.

811
00:43:47,700 --> 00:43:50,400
The array of counters is however many translations units.

812
00:43:50,400 --> 00:43:51,400
There are like.

813
00:43:51,400 --> 00:43:51,800
So

814
00:43:54,600 --> 00:43:56,000
We won't initialize any of them.

815
00:43:56,600 --> 00:44:02,200
We start off with the pointer that we are talking about is going to be

816
00:44:02,300 --> 00:44:03,900
counter States, right?

817
00:44:03,900 --> 00:44:11,000
So that's basically, debug capture state state like current counter or

818
00:44:11,000 --> 00:44:13,500
something like that.

819
00:44:13,800 --> 00:44:15,000
So, we Define that.

820
00:44:15,300 --> 00:44:20,400
And then as we go through here, when we want to say, which one of

821
00:44:20,400 --> 00:44:21,500
these, you know,

822
00:44:22,400 --> 00:44:25,700
Where the counter start in this flat array, that we've created, we

823
00:44:25,700 --> 00:44:29,200
just say that whatever translation Unit were on that equals the the

824
00:44:29,200 --> 00:44:30,600
current counter beeps.

825
00:44:30,600 --> 00:44:37,500
All right counter and then we just add current counter, we add to it,

826
00:44:37,500 --> 00:44:39,700
we advance it by however many records there were.

827
00:44:39,700 --> 00:44:43,800
And now we just have that working and we don't have to worry anymore

828
00:44:43,800 --> 00:44:47,200
and to trans and now we're generic in the number of translation units

829
00:44:47,200 --> 00:44:49,800
as well, there's no hard coded stuff in there, so you can just kind of

830
00:44:49,800 --> 00:44:52,400
arbitrarily have however, many translations

831
00:44:52,400 --> 00:44:53,100
Yes, there are.

832
00:44:53,700 --> 00:44:56,000
So as we coming here, what I'd like to do

833
00:44:57,300 --> 00:44:59,800
is I'd like to go ahead as well and make sure that we write

834
00:45:00,000 --> 00:45:02,400
We just overwrite these every time just to make sure that their

835
00:45:02,400 --> 00:45:02,700
current.

836
00:45:02,700 --> 00:45:07,500
So we'll have the record count for the translation units that we

837
00:45:07,500 --> 00:45:08,000
actually know about.

838
00:45:08,000 --> 00:45:10,800
And I'm trying to think if there's some way to make this part

839
00:45:10,800 --> 00:45:13,500
automatic because we nice to have the whole thing so that we don't

840
00:45:13,500 --> 00:45:15,300
have to care about that.

841
00:45:15,300 --> 00:45:21,200
But don't know that, that's, you know, actually a realistic thing to

842
00:45:21,200 --> 00:45:22,100
think about, right?

843
00:45:22,100 --> 00:45:24,200
Because you can, so you can see right here.

844
00:45:24,200 --> 00:45:25,600
We've got, we've got these guys.

845
00:45:25,600 --> 00:45:30,000
Okay, so if I come in here and say,

846
00:45:30,000 --> 00:45:32,500
Say we've got the optimized ones.

847
00:45:32,500 --> 00:45:35,100
The optimized one is that is the zeroth translation unit.

848
00:45:35,100 --> 00:45:38,200
If I'm not correct, I'm not mistaken build up that.

849
00:45:40,000 --> 00:45:40,200
No.

850
00:45:40,200 --> 00:45:43,200
It's the first translation unit, right?

851
00:45:43,400 --> 00:45:43,800
Yeah.

852
00:45:44,300 --> 00:45:45,300
That's what I did.

853
00:45:45,400 --> 00:45:46,400
Said, the wrong thing.

854
00:45:47,400 --> 00:45:50,900
And then the the main count is this one.

855
00:45:51,700 --> 00:45:54,900
And so that gets written in there and then we just have to count on

856
00:45:54,900 --> 00:45:59,700
the platform layer to actually write in its actual correct.

857
00:46:00,100 --> 00:46:01,900
Piece of information, right?

858
00:46:02,900 --> 00:46:06,900
So, in order to do that in win32 handmade, what it would need to do,

859
00:46:06,900 --> 00:46:11,600
is before calling in, to hear it would need to say, or I should say,

860
00:46:11,600 --> 00:46:13,500
possibly after calling into their, it just goes.

861
00:46:13,500 --> 00:46:14,000
Okay.

862
00:46:14,400 --> 00:46:18,100
When we get back, the global debug table will set the record count for

863
00:46:18,100 --> 00:46:19,400
our translation unit.

864
00:46:22,700 --> 00:46:25,100
And and off we get, right?

865
00:46:25,300 --> 00:46:29,500
So the record count for our translation unit is going to be whatever

866
00:46:29,500 --> 00:46:32,700
our our total counter count is.

867
00:46:33,200 --> 00:46:35,600
So I guess it's that.

868
00:46:37,500 --> 00:46:39,700
Although it's kind of a little annoying because that means you can't

869
00:46:39,700 --> 00:46:40,200
do it.

870
00:46:40,700 --> 00:46:41,800
I should put it to do here.

871
00:46:42,900 --> 00:46:46,100
I have to say that that it seems like maybe the counter thing is a

872
00:46:46,100 --> 00:46:48,000
little more trouble than it's worth, right?

873
00:46:48,000 --> 00:46:51,600
Because because we do have more than one translation unit, it ends up

874
00:46:51,600 --> 00:46:52,800
not being as clean.

875
00:46:52,800 --> 00:46:55,000
As I would like, you have to do this extra stuff for the multi

876
00:46:55,000 --> 00:46:55,800
translation units.

877
00:46:56,100 --> 00:47:00,500
If we didn't do the dynamic code loading, it would have and could have

878
00:47:00,500 --> 00:47:03,000
the up the sort of, like, windowed optimization where we just

879
00:47:03,000 --> 00:47:05,500
literally only had one translation unit, would have been a lot nicer,

880
00:47:05,800 --> 00:47:07,800
but it's forcing us to do a bunch of things here and I don't super

881
00:47:07,800 --> 00:47:08,500
love that.

882
00:47:08,900 --> 00:47:09,400
It's okay.

883
00:47:09,400 --> 00:47:11,600
I mean every time you find a new technique, you don't really know how

884
00:47:11,600 --> 00:47:12,300
effective it's going to be.

885
00:47:12,300 --> 00:47:12,500
And

886
00:47:12,700 --> 00:47:15,900
There's a bunch of different things that, you know, maybe we need to

887
00:47:15,900 --> 00:47:19,200
think about more carefully about it, but it's worth noting that it's

888
00:47:19,400 --> 00:47:20,100
annoying me.

889
00:47:20,100 --> 00:47:21,200
How many little fiddly things?

890
00:47:21,200 --> 00:47:24,600
There are like that, which maybe suggest that we don't really want to

891
00:47:24,600 --> 00:47:27,100
do it that way, you know, at the end

892
00:47:39,600 --> 00:47:40,300
Something like that.

893
00:47:41,000 --> 00:47:44,400
But anyway I think that should work now.

894
00:47:44,900 --> 00:47:45,700
I believe.

895
00:47:47,800 --> 00:47:48,300
All right.

896
00:47:48,600 --> 00:47:54,700
So now if we take a look at what's going on here in theory, we should

897
00:47:54,700 --> 00:47:55,900
be able to find.

898
00:47:56,800 --> 00:47:59,800
We should be able to sort of see all of our win32 stuff.

899
00:48:00,000 --> 00:48:03,000
You can see now that we've got like, our went through to Loop is here

900
00:48:03,500 --> 00:48:04,100
or executable.

901
00:48:04,100 --> 00:48:06,200
Refresh is here in processing is here.

902
00:48:06,300 --> 00:48:10,000
Our game update is here, audio update and so on, right?

903
00:48:10,400 --> 00:48:11,200
So we've got these things.

904
00:48:11,200 --> 00:48:11,900
We don't really know.

905
00:48:11,900 --> 00:48:14,300
We haven't done much testing of this yet, so we don't know how well

906
00:48:14,300 --> 00:48:14,800
this is working.

907
00:48:14,800 --> 00:48:18,500
But we're basically, you know, we're in that we're sort of narrowing

908
00:48:18,500 --> 00:48:21,800
in on it actually a, you know, working particularly well, it would

909
00:48:21,800 --> 00:48:22,300
appear.

910
00:48:22,600 --> 00:48:25,300
Unfortunately, we're starting to get too many things in here but

911
00:48:25,300 --> 00:48:25,800
that's okay.

912
00:48:25,800 --> 00:48:29,400
That's exactly why I did this whole round of work, anyways, because

913
00:48:29,400 --> 00:48:29,900
now we can start

914
00:48:30,000 --> 00:48:33,500
art to make something that's going to let us see things in a more

915
00:48:33,500 --> 00:48:35,200
intelligent way, right?

916
00:48:36,200 --> 00:48:41,700
So this is, this is a weird number for the wind through two Loops.

917
00:48:41,800 --> 00:48:45,700
Oh, I suppose, that's because it's never going to be closed, right?

918
00:48:45,700 --> 00:48:47,800
It that Loop won't be closed.

919
00:48:48,400 --> 00:48:50,600
And so that's another thing that we're probably going to want to play

920
00:48:50,600 --> 00:48:51,000
around with.

921
00:48:55,100 --> 00:48:59,500
Basically, when we actually run those numbers, that Loop will not have

922
00:48:59,500 --> 00:49:01,800
closed because that Loop actually closes out here.

923
00:49:02,000 --> 00:49:05,800
So it will, it will not actually have closed in that in that time

924
00:49:05,800 --> 00:49:06,300
period.

925
00:49:06,300 --> 00:49:07,200
If that makes sense.

926
00:49:08,600 --> 00:49:14,800
All right, so the last thing I would like to do and that took longer

927
00:49:14,800 --> 00:49:15,900
than I was hoping, right?

928
00:49:15,900 --> 00:49:18,700
We had more work to do than I would have hoped so don't know that

929
00:49:18,700 --> 00:49:20,600
we're going to get to some of the things I would have liked to have

930
00:49:20,600 --> 00:49:24,900
done given the short amount of time that we have still left, but I can

931
00:49:24,900 --> 00:49:26,100
do a couple of things that I wanted.

932
00:49:26,100 --> 00:49:30,900
So the first one I want to do is have some kind of a notion of like a

933
00:49:30,900 --> 00:49:34,700
frame latch so that we can tell in the debug event stream so that we

934
00:49:34,700 --> 00:49:38,200
can kind of tell where the frame boundaries

935
00:49:38,400 --> 00:49:39,700
We occur, right?

936
00:49:39,800 --> 00:49:42,800
So just something that's like frame boundary, you know, it's like

937
00:49:42,800 --> 00:49:45,600
this, this was the end of it or something, right?

938
00:49:52,300 --> 00:49:55,400
Although I guess now I think about it, maybe we don't even need that

939
00:49:55,400 --> 00:49:58,500
because we kind of have that if we just make, sure everything is

940
00:49:58,500 --> 00:50:03,000
always inside one giant block, maybe we just kind of have that.

941
00:50:04,400 --> 00:50:04,900
I don't know.

942
00:50:06,400 --> 00:50:07,300
I guess I won't do that yet.

943
00:50:07,300 --> 00:50:10,600
Let's just let's just continue down the path and see where we go

944
00:50:10,600 --> 00:50:12,300
without actually doing that first.

945
00:50:14,000 --> 00:50:16,600
Yeah, let's just see, let's just see what happens, I suppose.

946
00:50:18,000 --> 00:50:18,500
Okay.

947
00:50:18,800 --> 00:50:19,500
So,

948
00:50:26,100 --> 00:50:29,000
I guess what I'll say is.

949
00:50:29,800 --> 00:50:31,400
Yeah, you know, the only thing is you'd want it.

950
00:50:31,400 --> 00:50:31,700
Well?

951
00:50:31,800 --> 00:50:32,100
Okay.

952
00:50:32,100 --> 00:50:32,500
Okay.

953
00:50:32,600 --> 00:50:36,200
I'm not sure I'm having like, an internal dialogue here and I feel

954
00:50:36,200 --> 00:50:43,200
like I'm gonna want a way right to Mark something as like the frame

955
00:50:43,200 --> 00:50:49,100
boundary and and because the reason I say that is because we have it

956
00:50:49,100 --> 00:50:50,500
sort of extra information.

957
00:50:50,600 --> 00:50:52,000
It's a thing that says

958
00:50:52,300 --> 00:50:56,200
This is the natural unit I want to like view things by, you know what

959
00:50:56,200 --> 00:50:56,700
I mean?

960
00:50:58,000 --> 00:50:59,800
so I feel like what we actually want

961
00:51:00,000 --> 00:51:02,000
Is a special marker, right?

962
00:51:02,000 --> 00:51:04,900
That says that this is how you should chop up time when you're

963
00:51:04,900 --> 00:51:06,000
visualizing it.

964
00:51:06,800 --> 00:51:09,600
Everything else is a block, but I am actually special.

965
00:51:09,600 --> 00:51:13,200
I'm the special point in time that says, this is a logical frame that

966
00:51:13,200 --> 00:51:16,400
like is what I want you to splay in terms of, you know, it has no

967
00:51:16,400 --> 00:51:19,700
other meaning besides that, but just it's what I want to see, you

968
00:51:19,700 --> 00:51:20,000
know.

969
00:51:20,800 --> 00:51:25,200
And so instead of having this be time flock 132 Loop, you know,

970
00:51:25,200 --> 00:51:29,800
instead it's something like this is the frame marker or something.

971
00:51:30,100 --> 00:51:30,600
Right.

972
00:51:32,000 --> 00:51:32,900
Something like that.

973
00:51:34,600 --> 00:51:38,500
And so what the frame marker is, it would be a very special thing a

974
00:51:38,500 --> 00:51:40,500
call to record debug event.

975
00:51:40,500 --> 00:51:44,100
That would be like, you know, particular very particular.

976
00:51:44,400 --> 00:51:49,900
So when you call this Frame marker function, what you actually would

977
00:51:49,900 --> 00:51:53,300
get is record debug in event.

978
00:51:54,500 --> 00:51:57,900
For like a special record index for something like this, you know?

979
00:52:00,300 --> 00:52:01,700
I guess it doesn't have to be special.

980
00:52:02,000 --> 00:52:03,300
It can still be counter.

981
00:52:03,800 --> 00:52:08,700
I suppose, but you caught you, you know, whatever that one is the

982
00:52:08,700 --> 00:52:09,200
event.

983
00:52:09,200 --> 00:52:13,100
Type of it is not the standard event type right?

984
00:52:13,200 --> 00:52:17,800
Instead of the normal event type, it's actually going to be some kind

985
00:52:17,800 --> 00:52:19,400
of a special marker that we have here.

986
00:52:19,400 --> 00:52:26,100
So it'll be like debug event, you know, frame marker like so and so

987
00:52:26,100 --> 00:52:29,600
that way we can just insert that in there specifically

988
00:52:30,100 --> 00:52:34,400
And when that happens, we could also, if we wanted to, we can fill out

989
00:52:34,400 --> 00:52:36,400
the rest of this stuff, right?

990
00:52:37,100 --> 00:52:39,800
You know, we can do something like this if we want to.

991
00:52:40,800 --> 00:52:42,100
So maybe I just will

992
00:52:45,500 --> 00:52:46,700
I'll say ENT.

993
00:52:48,600 --> 00:52:49,300
Counter.

994
00:52:50,900 --> 00:52:51,900
Equals counter.

995
00:52:54,100 --> 00:53:00,100
I'll say record debug event, you better than frame marker, so we got

996
00:53:00,100 --> 00:53:00,800
that.

997
00:53:01,000 --> 00:53:05,000
And then I'll do this part here as well.

998
00:53:06,100 --> 00:53:09,400
So I'll say OK, debug record.

999
00:53:10,000 --> 00:53:11,100
Oh and well.

1000
00:53:16,000 --> 00:53:16,400
Okay.

1001
00:53:16,500 --> 00:53:17,000
I'ma keep going.

1002
00:53:17,000 --> 00:53:18,900
This is another thing that I could do here that was kind of

1003
00:53:18,900 --> 00:53:19,200
interesting.

1004
00:53:19,200 --> 00:53:22,800
But anyway we'll get the debug your record out and then we'll just

1005
00:53:22,800 --> 00:53:23,800
right in here.

1006
00:53:24,000 --> 00:53:31,600
I guess the standard stuff like file lime and then the block name.

1007
00:53:33,700 --> 00:53:37,300
Yeah I guess the block name is just going to be frame marker or

1008
00:53:37,300 --> 00:53:39,800
something like that, right?

1009
00:53:40,400 --> 00:53:42,000
So that's what I want.

1010
00:53:42,300 --> 00:53:44,200
That's what I want to have happen.

1011
00:53:45,800 --> 00:53:48,600
I need to finish my back slashing there.

1012
00:53:49,900 --> 00:53:52,700
And so now I suspect.

1013
00:53:53,200 --> 00:53:55,900
Okay good guys going to say I suspect will have to change a couple

1014
00:53:55,900 --> 00:53:59,200
things in the printout routine, just to ignore those events for now

1015
00:53:59,600 --> 00:53:59,800
since

1016
00:54:00,000 --> 00:54:01,600
Actually using them for anything.

1017
00:54:02,300 --> 00:54:06,300
So that assertion for end block, that actually needs to be in here if

1018
00:54:06,300 --> 00:54:10,900
event type equals and block, and do this.

1019
00:54:10,900 --> 00:54:13,800
Otherwise don't do anything, and that's fine.

1020
00:54:14,400 --> 00:54:14,800
Okay,

1021
00:54:16,900 --> 00:54:20,400
So, now we're back to everything.

1022
00:54:20,400 --> 00:54:23,800
I think everything should be roughly correct now, as well.

1023
00:54:23,800 --> 00:54:26,000
Like, I don't think we should have any of those, like, forced open

1024
00:54:26,000 --> 00:54:31,600
block nonsense, things happening, so that's good and that all looks

1025
00:54:32,000 --> 00:54:34,300
that looks reasonable to me.

1026
00:54:35,900 --> 00:54:36,300
Okay.

1027
00:54:37,000 --> 00:54:43,400
So the next step in this process is, we need to start looking at the

1028
00:54:43,400 --> 00:54:43,900
frame.

1029
00:54:44,200 --> 00:54:46,400
We want to start being able to look at this debug

1030
00:54:46,500 --> 00:54:53,200
log potentially as just one giant log in some sense and

1031
00:54:58,000 --> 00:54:59,700
So I'm wondering right?

1032
00:55:00,600 --> 00:55:04,600
Like let me just give you a little drawing here of what I'm what I'm

1033
00:55:04,600 --> 00:55:05,100
thinking.

1034
00:55:08,400 --> 00:55:10,400
I'll go ahead and pop over to the Blackboard.

1035
00:55:11,600 --> 00:55:13,000
So, there's day 183.

1036
00:55:17,200 --> 00:55:17,800
so,

1037
00:55:18,900 --> 00:55:21,900
This is the this is the debug log.

1038
00:55:24,700 --> 00:55:28,100
So what I'm thinking right is what's this debug log going to look like

1039
00:55:28,100 --> 00:55:29,500
you know it's going to have a marker.

1040
00:55:29,500 --> 00:55:30,700
There's the frame marker.

1041
00:55:30,900 --> 00:55:33,600
It's going to have a bunch of like begin and pears.

1042
00:55:33,600 --> 00:55:36,800
You know that that look like whatever they look like mostly

1043
00:55:36,800 --> 00:55:42,300
hierarchical probably you know although they're not required to be

1044
00:55:42,600 --> 00:55:43,400
something like this.

1045
00:55:43,700 --> 00:55:45,900
Then there's going to be another frame marker and they're going to

1046
00:55:45,900 --> 00:55:46,500
keep going.

1047
00:55:48,500 --> 00:55:52,200
Now, some of them might span that frame boundary, right?

1048
00:55:52,200 --> 00:55:54,900
Because there's there's things that are happening like asynchronous

1049
00:55:54,900 --> 00:55:57,100
operations which might span the frame boundary.

1050
00:55:57,800 --> 00:56:01,300
So what we want to be able to do is get all the stuff into like a

1051
00:56:01,300 --> 00:56:08,100
rolling log and so that we can we can kind of view that even with

1052
00:56:08,100 --> 00:56:15,600
stuff that crosses the frame boundary but we also need to be able to

1053
00:56:15,600 --> 00:56:17,700
make it so that when we run out of room,

1054
00:56:18,300 --> 00:56:22,200
You know, we have a way of clearing it eventually because otherwise

1055
00:56:22,200 --> 00:56:24,100
we'll just keep writing log information.

1056
00:56:24,100 --> 00:56:26,600
If we just kept writing the same buffer so we have that like ping-pong

1057
00:56:26,600 --> 00:56:27,400
steam going now.

1058
00:56:27,800 --> 00:56:31,900
But I think what we probably want to do is we probably want to make it

1059
00:56:32,000 --> 00:56:35,700
so that we actually let it right for a lot more than a frame.

1060
00:56:36,400 --> 00:56:37,200
You know what I mean?

1061
00:56:37,400 --> 00:56:43,000
So that we get like many frames of data and then we just read we like

1062
00:56:43,000 --> 00:56:47,100
move the sort of the the place where it's safe to read and safe to

1063
00:56:47,100 --> 00:56:48,000
write almost more like a

1064
00:56:48,200 --> 00:56:54,800
Circular buffer, so that we can kind of like keep using data from, you

1065
00:56:54,800 --> 00:56:55,800
know, as it goes.

1066
00:56:56,300 --> 00:56:58,000
So I feel like

1067
00:57:03,000 --> 00:57:06,400
I feel like in order to do that, I mean, we just need a lot of memory

1068
00:57:06,400 --> 00:57:06,800
for it.

1069
00:57:06,800 --> 00:57:09,100
It's not like a huge deal, right?

1070
00:57:09,200 --> 00:57:12,400
We just need a lot of memory for, if we want to store all that

1071
00:57:12,400 --> 00:57:14,600
information which does sort of pose.

1072
00:57:14,600 --> 00:57:17,800
A problem for our the fact that those things are Statics, we would

1073
00:57:17,800 --> 00:57:20,600
rather be able to have that be Memory passed in that we virtual Alex

1074
00:57:20,600 --> 00:57:21,600
or something like that.

1075
00:57:21,600 --> 00:57:24,800
Which again does suggest that maybe the part that gets past sort of

1076
00:57:24,800 --> 00:57:29,300
forwards, instead of passing backwards like we're doing here, might

1077
00:57:29,300 --> 00:57:32,100
have been a better way to go just at least in terms of where the

1078
00:57:32,100 --> 00:57:32,700
memory comes.

1079
00:57:33,300 --> 00:57:34,900
It's hard to say, right?

1080
00:57:35,700 --> 00:57:39,500
But anyway, so when we, when we come through here and that's the, the

1081
00:57:39,500 --> 00:57:41,600
end, I guess, we're at where the cute we got.

1082
00:57:41,600 --> 00:57:43,100
Like, maybe a minute before Q&A.

1083
00:57:43,100 --> 00:57:45,700
So, after wrap up, but when we come in here,

1084
00:57:47,900 --> 00:57:51,500
We swap out which buffer that we're doing now, we could do something

1085
00:57:51,500 --> 00:57:56,900
like, taking the debug info and I guess we could just copy it out to

1086
00:57:57,000 --> 00:58:00,300
some memory and string them together as we go or something like this.

1087
00:58:01,500 --> 00:58:02,100
I don't know that.

1088
00:58:02,100 --> 00:58:04,500
That makes a sense because then we're wasting a bunch of time copying

1089
00:58:04,500 --> 00:58:06,900
when we could have just left in the place where it was

1090
00:58:10,300 --> 00:58:17,900
On the other hand, I fear, I do fear that if we, you know, Jack the

1091
00:58:18,000 --> 00:58:24,100
the size up too much of the actual debug table that we're going to end

1092
00:58:24,100 --> 00:58:27,100
up with some kind of a nasty situation because we're have too much of

1093
00:58:27,100 --> 00:58:28,300
the data in the static section.

1094
00:58:28,400 --> 00:58:31,300
I don't know if that's still a problem anymore but are too much not

1095
00:58:31,300 --> 00:58:32,300
dating the sax section.

1096
00:58:32,400 --> 00:58:35,700
But I mean to asking the operation to allocate too much for the

1097
00:58:35,700 --> 00:58:36,400
executable.

1098
00:58:37,000 --> 00:58:39,600
So like for example, if I was in here and we said events,

1099
00:58:39,900 --> 00:58:43,200
Instead of two, we were to say that we want, you know.

1100
00:58:44,800 --> 00:58:49,200
Look a ton of these, like, however, many frames we want for our for

1101
00:58:49,200 --> 00:58:50,800
our snapshots or something, right?

1102
00:58:50,800 --> 00:58:52,500
So this thing is like, huge.

1103
00:58:53,600 --> 00:58:54,900
Yeah, that's what I thought.

1104
00:58:55,000 --> 00:58:57,400
So you can't exceed your right.

1105
00:58:57,400 --> 00:59:01,400
You can't exceed a 4 gigabyte array or something like that, right?

1106
00:59:01,800 --> 00:59:06,800
So I don't know, I don't know if something like that is really pushing

1107
00:59:06,800 --> 00:59:07,400
the limit.

1108
00:59:08,200 --> 00:59:10,900
You know, how bad that's going to be, looks like it's okay.

1109
00:59:10,900 --> 00:59:13,500
I suppose for that many so maybe that's a reasonable thing to do.

1110
00:59:14,000 --> 00:59:14,400
And so then

1111
00:59:14,500 --> 00:59:18,400
Would have effectively 63 frames of look back.

1112
00:59:18,500 --> 00:59:20,100
So, it's writing into the 64th frame.

1113
00:59:20,100 --> 00:59:24,600
We have 63 frames where we could look at those events over time.

1114
00:59:25,400 --> 00:59:29,900
And, you know, be able to kind of kind of go through them like that.

1115
00:59:30,100 --> 00:59:33,500
I don't know how necessary that is, but we would at least have it.

1116
00:59:33,500 --> 00:59:35,400
And so if we wanted to do that, right?

1117
00:59:35,400 --> 00:59:36,800
It's not too tricky.

1118
00:59:37,800 --> 00:59:38,900
All that would be.

1119
00:59:38,900 --> 00:59:42,400
It's not really very different from what we're doing here, all that

1120
00:59:42,400 --> 00:59:43,400
would require

1121
00:59:44,500 --> 00:59:47,400
Is when we come through here and we do this, like current event or a

1122
00:59:47,400 --> 00:59:49,500
and x dot equal cut, we wouldn't do that.

1123
00:59:49,500 --> 00:59:51,900
We would just do current event array index.

1124
00:59:52,100 --> 00:59:54,800
We do like a plus plus of it, right?

1125
00:59:54,800 --> 00:59:57,500
So we'd say like, you know, go to the next one.

1126
00:59:59,700 --> 00:59:59,900
and,

1127
01:00:00,000 --> 01:00:03,200
We would just say, if oops.

1128
01:00:04,700 --> 01:00:10,400
If it is greater than or equal to the array count that's in the

1129
01:00:10,400 --> 01:00:15,800
debugger, a it gets reset to 0, right?

1130
01:00:16,600 --> 01:00:26,800
So that's the debug level debug table events.

1131
01:00:30,600 --> 01:00:34,600
And so now, I believe that is just keeping that ruling buffer.

1132
01:00:34,600 --> 01:00:38,400
So we can actually now look across frames because we just have the

1133
01:00:38,400 --> 01:00:42,700
events for everything and it also means we don't really need this

1134
01:00:42,700 --> 01:00:44,900
snapshot stuff anymore, right.

1135
01:00:45,200 --> 01:00:47,800
We don't really need to worry about that anymore because we could

1136
01:00:47,800 --> 01:00:50,000
actually recompute that on the fly if we wanted to.

1137
01:00:50,200 --> 01:00:54,600
So, the snapshots are really not necessary at all anymore.

1138
01:00:55,800 --> 01:00:56,300
So, yeah.

1139
01:00:56,400 --> 01:00:59,600
So I feel like that's probably the right way to go then.

1140
01:01:01,200 --> 01:01:03,000
To just take a huge amount of data.

1141
01:01:03,000 --> 01:01:06,300
Just take a huge footprint there because again, this is not something

1142
01:01:06,300 --> 01:01:08,600
we ever have to worry about running on an end users machine.

1143
01:01:08,700 --> 01:01:10,200
It's only for debugging purposes.

1144
01:01:10,400 --> 01:01:12,700
So if you want to, we can just say, all right, we'll take a bunch of

1145
01:01:12,800 --> 01:01:16,100
will take a huge amount of memory will just slap those things in

1146
01:01:16,100 --> 01:01:16,500
there.

1147
01:01:17,900 --> 01:01:24,200
As we write them and, you know, it's not as good as if we just did a

1148
01:01:24,200 --> 01:01:25,100
circular buffer.

1149
01:01:25,100 --> 01:01:28,700
So it kind of feels more like we probably want to write to a circular

1150
01:01:28,700 --> 01:01:31,400
buffer there but I don't really want people to have to do the circular

1151
01:01:31,400 --> 01:01:31,700
buffer.

1152
01:01:31,700 --> 01:01:35,800
Chuck is the problem, so I don't know.

1153
01:01:36,100 --> 01:01:39,200
We'll see, we'll leave it like that for now but we'll see because

1154
01:01:39,200 --> 01:01:41,800
there's no real downside to doing it this way.

1155
01:01:42,200 --> 01:01:44,700
You always want to have a ton of memory in your death machine anyway

1156
01:01:44,700 --> 01:01:45,900
for doing stuff like this.

1157
01:01:46,400 --> 01:01:47,600
So you can just do whatever.

1158
01:01:47,700 --> 01:01:51,700
The most, you know, expedient thing is that allows you to actually

1159
01:01:51,900 --> 01:01:53,200
capture the information that you want.

1160
01:01:53,200 --> 01:01:56,400
You don't want have to constantly be thinking about is it Frugal on

1161
01:01:56,400 --> 01:01:58,900
memory when you're talking about code that's meant for

1162
01:01:58,900 --> 01:01:59,800
instrumentation.

1163
01:02:00,700 --> 01:02:02,100
So that might be fine.

1164
01:02:02,300 --> 01:02:02,900
We'll see.

1165
01:02:03,200 --> 01:02:06,000
But now that we have that with that means is I can go ahead and say

1166
01:02:06,500 --> 01:02:07,100
ok.

1167
01:02:08,600 --> 01:02:13,100
Let me look back across the previous, however, May frames we want, and

1168
01:02:13,100 --> 01:02:16,800
I can find the frame boundaries and now it doesn't matter when in

1169
01:02:16,800 --> 01:02:21,500
particular you updated, the debug, there can be things that straddle

1170
01:02:21,600 --> 01:02:25,100
those markers, and we'll be able to look at all of that data correctly

1171
01:02:25,100 --> 01:02:28,800
and there won't be any edge cases where we can't see what happened

1172
01:02:28,800 --> 01:02:33,100
because it's like an event that spans two frames or more.

1173
01:02:33,300 --> 01:02:35,700
And that's the thing that I was really worried about because I want to

1174
01:02:35,700 --> 01:02:38,300
be able to see those those sort of events that

1175
01:02:38,400 --> 01:02:42,400
outside of a single frame in terms of encapsulating.

1176
01:02:43,500 --> 01:02:47,900
All right, so I think we're good, and I think we're done now with

1177
01:02:47,900 --> 01:02:48,300
that.

1178
01:02:48,300 --> 01:02:51,000
So we should be able to work on viewing tomorrow because there's

1179
01:02:51,000 --> 01:02:53,100
nothing that seems like it's all working.

1180
01:02:53,600 --> 01:02:57,800
Unless there's something that we're missing there, so we can do.

1181
01:02:57,800 --> 01:02:59,800
So we can do Q&A.

1182
01:03:11,800 --> 01:03:14,500
Hotspur, are you going to start the hardware under before starting the

1183
01:03:14,500 --> 01:03:15,000
game logic?

1184
01:03:15,000 --> 01:03:16,800
Or are you going to wait till the software doesn't cut it?

1185
01:03:16,800 --> 01:03:18,200
Or are you waiting for Vulcan?

1186
01:03:20,000 --> 01:03:24,200
Yeah, I don't know that I'll ever do the hardware renderer if we don't

1187
01:03:24,200 --> 01:03:25,200
need one, right?

1188
01:03:25,300 --> 01:03:29,200
So the hardware renderer will happen when we decide that we, you know,

1189
01:03:29,200 --> 01:03:33,000
want to do some too much stuff on the screen, right?

1190
01:03:34,800 --> 01:03:36,700
And so that we and so we need Hardware.

1191
01:03:37,600 --> 01:03:43,100
So I suspect I won't do it pause, I mean, I might not even, I might

1192
01:03:43,100 --> 01:03:47,200
have the game essentially essentially be done on the software renderer

1193
01:03:47,500 --> 01:03:51,100
and then only do the hardware render as like a thing that we do up as

1194
01:03:51,100 --> 01:03:53,500
a like it an additional thing.

1195
01:03:54,900 --> 01:03:59,000
But you know, we may be forced into doing the hardware vendor earlier.

1196
01:03:59,000 --> 01:04:02,500
If we want to do some things and find that we can't do it because the

1197
01:04:02,500 --> 01:04:04,000
software rendering is not fast enough, right?

1198
01:04:10,000 --> 01:04:12,200
Did you just use the Blue Line sector and green cursor to make it

1199
01:04:12,200 --> 01:04:13,200
easier to follow and stream?

1200
01:04:13,200 --> 01:04:13,900
Yes.

1201
01:04:14,400 --> 01:04:15,700
Or is that how you normally like it?

1202
01:04:15,700 --> 01:04:17,700
I feel like it would get fatiguing to the eyes.

1203
01:04:17,800 --> 01:04:19,800
Yeah, I don't normally do the Blue Line.

1204
01:04:21,800 --> 01:04:23,700
The cursor May normally be green though.

1205
01:04:23,900 --> 01:04:24,800
I don't remember it microscope.

1206
01:04:24,800 --> 01:04:28,500
I think my cursor May normally be green but the blue line is strictly

1207
01:04:28,500 --> 01:04:29,200
for the Stream.

1208
01:04:35,100 --> 01:04:38,200
Elven, when do you think it is a good idea to use somebody's else's

1209
01:04:38,200 --> 01:04:40,200
Library System instead of implementing your own?

1210
01:04:41,000 --> 01:04:43,200
Well, it's if you think that it's as good as what you would have

1211
01:04:43,200 --> 01:04:44,900
implemented, right?

1212
01:04:45,600 --> 01:04:48,200
Or similar quality, right?

1213
01:04:48,200 --> 01:04:53,200
I mean that's why I use the stb libraries is because, you know, across

1214
01:04:53,200 --> 01:04:58,100
all the axes Sean's code is going to be like my code right in my

1215
01:04:58,100 --> 01:04:58,500
opinion.

1216
01:04:58,600 --> 01:05:02,900
I don't I don't think of it as having to use this crappy thing that

1217
01:05:02,900 --> 01:05:04,300
people who I don't trust wrote.

1218
01:05:04,700 --> 01:05:06,100
Which is how I feel about most libraries.

1219
01:05:06,900 --> 01:05:09,000
I feel like it so it like Sean wrote it.

1220
01:05:09,100 --> 01:05:13,200
I know it's going to be good, I know that it's going to be like well

1221
01:05:13,300 --> 01:05:18,000
you know, it's integrate well that the API is saying right and so when

1222
01:05:18,000 --> 01:05:22,100
you have that kind of a high-quality Library like that it's a very

1223
01:05:22,100 --> 01:05:23,000
easy decision to go.

1224
01:05:23,000 --> 01:05:26,300
I can just use this and I'm not worried about what's going to happen,

1225
01:05:26,300 --> 01:05:26,900
right.

1226
01:05:27,400 --> 01:05:30,900
We're and I there's very few libraries that I would say that about but

1227
01:05:30,900 --> 01:05:32,000
that's that's the thing.

1228
01:05:33,100 --> 01:05:34,300
Another way might say you know

1229
01:05:34,500 --> 01:05:38,000
Know if that if the person who wrote the library with someone that

1230
01:05:38,000 --> 01:05:44,000
you'd want on your team, right, then that's a good sign that you

1231
01:05:44,000 --> 01:05:46,400
probably want, would be happy using their library.

1232
01:05:48,600 --> 01:05:52,000
And like, most of the people, most libraries out there are, you know,

1233
01:05:52,100 --> 01:05:54,700
written by people who I wouldn't want on my team and I don't want to

1234
01:05:54,700 --> 01:05:56,900
use their Library just like I don't want to hire them, right?

1235
01:05:58,200 --> 01:05:59,900
But a lot of that takes experience.

1236
01:06:00,000 --> 01:06:04,100
Takes experience to know before you actually use something whether

1237
01:06:04,100 --> 01:06:06,900
it's going to be worth, whether it's going to cause you some different

1238
01:06:06,900 --> 01:06:07,800
problems or not.

1239
01:06:08,700 --> 01:06:11,900
So I don't pretend that that's an easy judgment call to make it

1240
01:06:11,900 --> 01:06:14,900
something that I feel comfortable making at this point because I know

1241
01:06:14,900 --> 01:06:15,800
my development process.

1242
01:06:15,800 --> 01:06:19,000
I know what I am and am not okay.

1243
01:06:19,000 --> 01:06:23,100
With, in terms of using people's libraries because I've had a large

1244
01:06:23,100 --> 01:06:25,600
branch of that and I realize that's harder for people who have had

1245
01:06:25,600 --> 01:06:27,900
experience cuz they don't know what they like.

1246
01:06:28,000 --> 01:06:29,800
They don't know what will cost them stuffed.

1247
01:06:30,000 --> 01:06:32,500
On the line, you know, until you've built up experience.

1248
01:06:32,500 --> 01:06:36,800
You don't necessarily know what you do and do not consider appropriate

1249
01:06:36,800 --> 01:06:39,400
or what you do or do not think will cause you problems.

1250
01:06:47,000 --> 01:06:48,200
I gotta go early today.

1251
01:06:48,200 --> 01:06:49,300
I gotta go in like 5 minutes.

1252
01:06:49,300 --> 01:06:51,400
I'm just going to quickly, scan to see what we've got here.

1253
01:07:09,000 --> 01:07:09,200
Keeper.

1254
01:07:09,200 --> 01:07:10,500
Caleb missed the first half of the stream.

1255
01:07:10,500 --> 01:07:12,600
Are you saving the past 60 frames into a buffer?

1256
01:07:13,400 --> 01:07:15,800
Yeah, I'm saving like, all the debug events now.

1257
01:07:17,400 --> 01:07:20,700
And because I think I want to have, I'm just thinking of how we want

1258
01:07:20,700 --> 01:07:23,200
to view them and I'm pretty excited about that.

1259
01:07:23,300 --> 01:07:25,700
And so I've been trying to make sure that I've been trying to iron out

1260
01:07:25,700 --> 01:07:28,100
enough things in the system so that we can really get a view of

1261
01:07:28,100 --> 01:07:28,700
everything.

1262
01:07:28,700 --> 01:07:32,300
Instead of only like things that happen to like be nicely encapsulated

1263
01:07:32,300 --> 01:07:33,400
inside a frame and stuff.

1264
01:07:41,100 --> 01:07:41,800
K.

1265
01:07:42,600 --> 01:07:44,500
Let's see if a miracle happens.

1266
01:07:44,500 --> 01:07:45,900
People to start doing things, right?

1267
01:07:46,200 --> 01:07:48,200
And addresses, the issues, the inflation of most their features.

1268
01:07:48,200 --> 01:07:50,400
When you use their features like templates or shake to

1269
01:07:50,400 --> 01:07:51,100
metaprogramming.

1270
01:07:51,300 --> 01:07:53,800
I, I don't think it's probably useful question, answer.

1271
01:07:53,800 --> 01:07:55,900
I mean, I think see what's left is so bad at this point, I don't think

1272
01:07:55,900 --> 01:07:56,900
they're going to pull it out.

1273
01:08:03,300 --> 01:08:04,000
In the deepest way.

1274
01:08:04,000 --> 01:08:06,800
Are we going to see something like Brendan Greg's flame graphs?

1275
01:08:07,000 --> 01:08:07,700
I don't know.

1276
01:08:07,700 --> 01:08:09,700
I have not ever really looked at those.

1277
01:08:10,900 --> 01:08:15,500
Probably not what I want to do is more of a like hierarchical Zone,

1278
01:08:15,500 --> 01:08:17,600
drill down that make sense.

1279
01:08:21,200 --> 01:08:22,600
Although maybe that's what if landgraf is since.

1280
01:08:22,600 --> 01:08:24,200
I don't haven't seen my, I don't know.

1281
01:08:27,500 --> 01:08:29,800
Insofar, as I think, a lot of people would like to see how to write a

1282
01:08:29,800 --> 01:08:31,700
hardware, renderer, myself included.

1283
01:08:33,100 --> 01:08:34,100
Yeah, I mean,

1284
01:08:36,500 --> 01:08:39,899
A lot of people would like to see a lot of things, but I have to keep

1285
01:08:39,899 --> 01:08:43,700
the amount of stuff that we cover to us to certain thing.

1286
01:08:43,700 --> 01:08:43,899
Right.

1287
01:08:43,899 --> 01:08:46,899
A lot of people would probably like to see how to write a 3D engine as

1288
01:08:46,899 --> 01:08:51,800
well but I'm not going to do it right because I have to keep it scope

1289
01:08:51,800 --> 01:08:54,000
to something that I can reasonably accomplish in a reason amount of

1290
01:08:54,000 --> 01:08:54,300
time.

1291
01:08:54,300 --> 01:08:58,100
So in general, I will cover the things that I absolutely know that I

1292
01:08:58,100 --> 01:08:59,800
want to cover which is basically how to write

1293
01:09:00,000 --> 01:09:04,399
Fleet 2-D game from scratch but I'm not going to add anything on that.

1294
01:09:04,399 --> 01:09:09,200
I don't think is necessary for showing that complete process, right?

1295
01:09:10,600 --> 01:09:14,300
And so Hardware, rendering in particular, is not really that

1296
01:09:14,300 --> 01:09:17,899
interesting to me in a lot of ways because it's super transient.

1297
01:09:17,899 --> 01:09:20,800
I don't even think it will exist in 15 years.

1298
01:09:21,100 --> 01:09:24,700
I don't think there will be such a thing as a hardware renderer so

1299
01:09:24,700 --> 01:09:27,100
it's a very like temporary thing.

1300
01:09:27,399 --> 01:09:29,600
Whereas everything else that we've covered I think is

1301
01:09:30,300 --> 01:09:32,700
sort of knowledge that will be useful for a very long time.

1302
01:09:33,000 --> 01:09:35,500
The only problem with it is that, you know, it's tied to a particular

1303
01:09:35,500 --> 01:09:39,300
language, but if you can factor out a fair bit of that, I think it's

1304
01:09:39,500 --> 01:09:44,500
more generally applicable to just how to program and that's pretty

1305
01:09:44,500 --> 01:09:45,899
important to me.

1306
01:09:46,399 --> 01:09:50,700
And so the hardware vendor apart, I feel like is just kind of, you

1307
01:09:50,700 --> 01:09:54,200
know, if I didn't think that we might need it, just in terms of the

1308
01:09:54,200 --> 01:09:58,100
game, being able to run well, because modern machines have a lot of

1309
01:09:58,100 --> 01:09:59,800
their horsepower in the GPU,

1310
01:10:00,000 --> 01:10:00,600
Right?

1311
01:10:01,600 --> 01:10:03,400
If I didn't think we would need it because of that, I just would have.

1312
01:10:03,400 --> 01:10:05,500
Said, we were never going to do Harbor under right from beginning.

1313
01:10:05,900 --> 01:10:10,100
But, you know, I assume we will probably hit a wall at some point

1314
01:10:10,100 --> 01:10:12,800
where, you know, we just have too much stuff on the screen and

1315
01:10:12,800 --> 01:10:15,700
software rendering is not optimized enough or whatever.

1316
01:10:16,000 --> 01:10:17,100
And that will have to do one

1317
01:10:34,300 --> 01:10:36,800
Captain craft getting good at running game engines, right?

1318
01:10:36,800 --> 01:10:40,100
Lots of them or work on a few larger ones and continue improving them.

1319
01:10:41,100 --> 01:10:47,000
I would say you don't have to write lots of things in the whole scope.

1320
01:10:47,600 --> 01:10:50,900
What you want to do is just make sure that you iterate on the pieces

1321
01:10:50,900 --> 01:10:52,300
though or on the architecture.

1322
01:10:52,300 --> 01:10:52,700
Like

1323
01:10:55,500 --> 01:11:01,000
You want to always wreak reassess and question your initial designs as

1324
01:11:01,000 --> 01:11:03,800
you especially as you learn more as a programmer.

1325
01:11:04,000 --> 01:11:06,700
So you know you could work on one engine for 10 years.

1326
01:11:08,000 --> 01:11:12,700
For 20 years and you can learn a ton and and do a lot of really great

1327
01:11:12,700 --> 01:11:13,300
work there.

1328
01:11:13,400 --> 01:11:16,400
As long as what you're doing is constantly, like, changing the way

1329
01:11:16,400 --> 01:11:17,900
things are done and improving them.

1330
01:11:17,900 --> 01:11:21,800
And at, right if you always, if you just let it calcify after the

1331
01:11:21,800 --> 01:11:25,600
first year, and everything is just kind of endlessly adding junk on

1332
01:11:25,600 --> 01:11:30,200
top of it and ever, you never liked revisit Andre and refine, and

1333
01:11:30,200 --> 01:11:31,600
change and improve.

1334
01:11:31,700 --> 01:11:34,100
Then that wouldn't be so good and then I'd say, yeah, you probably

1335
01:11:34,100 --> 01:11:37,400
want to do multiple game engines because that's, you know, the way you

1336
01:11:37,400 --> 01:11:37,700
would learn

1337
01:11:37,900 --> 01:11:38,000
earn.

1338
01:11:38,000 --> 01:11:41,700
But as long as you're willing to never say something is set in stone,

1339
01:11:41,900 --> 01:11:44,200
you can just have one engine that you keep working on and it keeps

1340
01:11:44,200 --> 01:11:44,600
getting better.

1341
01:11:44,600 --> 01:11:48,000
And I think that's a good way to go to because that way, you know, you

1342
01:11:48,000 --> 01:11:49,800
don't feel like you're starting from square one all the time.

1343
01:11:49,800 --> 01:11:51,600
You could always feel like, what's the section.

1344
01:11:51,600 --> 01:11:54,800
I want to, like, rip up and replace of my engine today, and I'm going

1345
01:11:54,800 --> 01:11:58,200
to start working on that for a few weeks, few months, whatever it is.

1346
01:11:58,400 --> 01:11:59,800
And then when that's done, I'll say what's the other

1347
01:12:00,000 --> 01:12:00,500
Us cutting thing.

1348
01:12:00,500 --> 01:12:04,300
And, you know, you keep letting it be pliable and I think that would

1349
01:12:04,300 --> 01:12:05,400
be a totally fine way to go.

1350
01:12:07,700 --> 01:12:13,000
All right, I am going to close it down.

1351
01:12:14,100 --> 01:12:18,300
Early today because I got to go, I got to go.

1352
01:12:23,700 --> 01:12:26,100
Okay, thank you, everyone for joining me, for another episode of

1353
01:12:26,100 --> 01:12:26,600
handmade here.

1354
01:12:26,600 --> 01:12:27,900
It's been a pleasure coding with you.

1355
01:12:27,900 --> 01:12:31,900
As always, if you would like to follow along at home with the source

1356
01:12:31,900 --> 01:12:34,500
code, it comes with the pre-order of the game.

1357
01:12:34,500 --> 01:12:36,800
So if you want to, you can head over to handmade here at Oregon.

1358
01:12:36,800 --> 01:12:42,100
Pre-order the game and handmade hero, you can pre-order handmade hero

1359
01:12:42,600 --> 01:12:45,800
using little pre-order button, and then you can download the source

1360
01:12:45,800 --> 01:12:47,100
code every night after I'm done with it.

1361
01:12:47,100 --> 01:12:48,100
You can just go grab it.

1362
01:12:48,200 --> 01:12:49,200
There's also Forum site.

1363
01:12:49,200 --> 01:12:50,600
If you want to go, ask questions or take a.

1364
01:12:50,600 --> 01:12:51,800
Look at the antia depe sewed guide.

1365
01:12:51,800 --> 01:12:52,800
The community members have made.

1366
01:12:52,800 --> 01:12:53,300
It's pretty cool.

1367
01:12:53,600 --> 01:12:55,700
And and getting very complete as well.

1368
01:12:56,100 --> 01:12:58,400
Thanks to some dedicated folks.

1369
01:12:58,800 --> 01:13:01,400
And the patreon page we have is for supporting.

1370
01:13:01,400 --> 01:13:03,700
The video series is just want support the video series separate from

1371
01:13:03,700 --> 01:13:05,100
the game or separate from anything else.

1372
01:13:06,000 --> 01:13:08,500
That's a place to pledge to do it and it's always very much

1373
01:13:08,500 --> 01:13:11,000
appreciated and finally have a tweet pop that tweets the schedule you.

1374
01:13:11,200 --> 01:13:14,100
And so, if you want to stream live, that is the place to go for that.

1375
01:13:14,900 --> 01:13:16,000
It's speaking of Life.

1376
01:13:16,000 --> 01:13:19,000
I'll the last stream tomorrow, Friday, 5 p.m.

1377
01:13:19,000 --> 01:13:21,100
Pacific Daylight time before the weekend, break.

1378
01:13:21,800 --> 01:13:23,300
We'll see you all back here.

1379
01:13:23,400 --> 01:13:26,200
Ali and then I'll finally get to do some of my debug this stuff.

1380
01:13:26,200 --> 01:13:28,900
Since I think we've now finished everything took a little more time

1381
01:13:28,900 --> 01:13:29,500
today than I was hoping.

1382
01:13:29,500 --> 01:13:32,200
I was hoping to do some today but we didn't get a chance to do that.

1383
01:13:32,200 --> 01:13:36,200
So tomorrow, we'll start down that path and I think that will continue

1384
01:13:36,200 --> 01:13:39,100
for a few days because I think we want to basically spend a bunch of

1385
01:13:39,100 --> 01:13:41,800
time now making it so that we can kind of explore our debug

1386
01:13:41,800 --> 01:13:44,200
information in a nice kind of Handy way.

1387
01:13:44,800 --> 01:13:49,300
And then after that, we'll start looking at maybe how to augment what

1388
01:13:49,300 --> 01:13:52,300
we have right now, which is perf stuff with some more different kinds

1389
01:13:52,300 --> 01:13:53,000
of information.

1390
01:13:53,500 --> 01:13:55,800
Like it'd be nice to get some memory information in there.

1391
01:13:56,200 --> 01:13:59,200
It'd be nice to get some diagramming in there and so we'll see if out

1392
01:13:59,200 --> 01:14:01,600
like just kind of augmenting what we're already doing with a little

1393
01:14:01,600 --> 01:14:03,800
bit more so that's about it.

1394
01:14:04,000 --> 01:14:07,200
Hopefully, see you back here for that until then have fun program

1395
01:14:07,200 --> 01:14:07,500
everyone.

1396
01:14:07,500 --> 01:14:09,400
And I'll see you guys out on the internet.

1397
01:14:09,500 --> 01:14:10,000
Take it easy.

