1
00:00:00,000 --> 00:00:02,000
Up recording, start recording.

2
00:00:02,900 --> 00:00:05,000
Hello everyone and welcome to handmade hero show.

3
00:00:05,000 --> 00:00:07,400
Rico to complete game live on stream.

4
00:00:08,000 --> 00:00:13,200
We are sort of, well, we just finished a little bit of a diversion

5
00:00:13,200 --> 00:00:17,300
that I had promised to show people some metaprogramming.

6
00:00:17,300 --> 00:00:19,400
So, I showed some meta program the stream for two days.

7
00:00:21,700 --> 00:00:22,500
And I went pretty well.

8
00:00:22,500 --> 00:00:27,000
We've got a little parser, it's kind of just a toy, but it shows kind

9
00:00:27,000 --> 00:00:30,300
of how to do that little cycle where you can parse some code output,

10
00:00:30,300 --> 00:00:33,900
some code, compile it into your game and have it do stuff for you.

11
00:00:33,900 --> 00:00:35,300
That could be potentially useful.

12
00:00:35,800 --> 00:00:36,500
So that's in there.

13
00:00:36,500 --> 00:00:40,400
Now, we didn't really have specifically any particular like

14
00:00:40,400 --> 00:00:41,800
overbearing need for it.

15
00:00:42,000 --> 00:00:44,900
It's not a crucial part of the project, but it was a reasonable place

16
00:00:44,900 --> 00:00:48,900
to do it where you can kind of see how it was going to work and

17
00:00:49,000 --> 00:00:51,400
understand the relatively confined context like what it

18
00:00:51,600 --> 00:00:52,300
You and why?

19
00:00:52,700 --> 00:00:54,800
So, I thought it was a pretty useful thing.

20
00:00:54,800 --> 00:00:57,900
But today, I'd like to get back to finishing up sort of our debug

21
00:00:58,000 --> 00:01:01,100
output stuff because we still have several things we need to do there.

22
00:01:01,100 --> 00:01:04,300
And I'd like to kind of finish that up and get that into a situation

23
00:01:04,300 --> 00:01:07,700
where we can start using it more effectively for actually doing debug

24
00:01:07,700 --> 00:01:08,100
work.

25
00:01:09,700 --> 00:01:12,400
And right now we have some nice features in there but but a lot of

26
00:01:12,400 --> 00:01:14,400
stuff we just have not implemented, right.

27
00:01:14,400 --> 00:01:18,200
There's a lot of things that that need to kind of just actually make

28
00:01:18,200 --> 00:01:22,900
up, make a push for being complete and so what I'd like to do today is

29
00:01:23,100 --> 00:01:24,500
start contacting that.

30
00:01:24,500 --> 00:01:28,400
Now today is Day 2008, so if you want to follow along at home day,

31
00:01:28,400 --> 00:01:30,500
2007 is a source code that you're going to start with.

32
00:01:31,000 --> 00:01:34,000
So please make sure that you unpack that into a directory and that's

33
00:01:34,000 --> 00:01:34,900
what you're going to be working with.

34
00:01:34,900 --> 00:01:38,100
Now, if you want to follow along with me, okay?

35
00:01:38,200 --> 00:01:38,900
So here we go.

36
00:01:39,800 --> 00:01:41,400
Let's go back to where we were.

37
00:01:43,200 --> 00:01:47,400
Before we did our little metaprogramming Excursion so you can see like

38
00:01:47,400 --> 00:01:49,700
when we did them in a previous version we did some stuff where we were

39
00:01:49,700 --> 00:01:52,300
like doing some automated debug print out stuff.

40
00:01:52,300 --> 00:01:53,800
So there's all this kind of nonsense here.

41
00:01:54,400 --> 00:01:58,000
All of that stuff was just in a little like piece of test code that we

42
00:01:58,000 --> 00:01:59,600
did that.

43
00:01:59,600 --> 00:02:01,500
I can easily remove here, right?

44
00:02:01,700 --> 00:02:06,400
It's this thing here where we did like test entity, write this stuff

45
00:02:07,600 --> 00:02:09,400
and so I'm just going to get rid of that.

46
00:02:09,500 --> 00:02:12,600
And when I get rid of that, then when I compile

47
00:02:12,800 --> 00:02:14,300
All of that should go away, right?

48
00:02:14,300 --> 00:02:17,600
So now we're back to the standard thing that we were looking at before

49
00:02:19,600 --> 00:02:21,800
but now we can also start to use.

50
00:02:21,800 --> 00:02:23,000
We had finished this thing.

51
00:02:23,000 --> 00:02:25,100
We could pick entities with the mouse cursor as well.

52
00:02:25,600 --> 00:02:26,800
So we can also use that

53
00:02:28,000 --> 00:02:32,700
Alright, so basically we have the ability to sort of print things out

54
00:02:32,700 --> 00:02:33,200
here.

55
00:02:33,500 --> 00:02:37,000
We have the ability to pick things at the mouse and what we're going

56
00:02:37,000 --> 00:02:41,100
to try and do today is sort of consolidate things and work out exactly

57
00:02:41,100 --> 00:02:46,000
how we would do something where the printout comes from the app, not a

58
00:02:46,000 --> 00:02:47,200
standing structure.

59
00:02:53,300 --> 00:02:55,300
In the debug code, right?

60
00:02:56,000 --> 00:02:59,800
So what I want to do is I want to take sort of the the stuff

61
00:03:00,000 --> 00:03:02,700
Doing at the metaprogramming where we kind of just hack at least sort

62
00:03:02,700 --> 00:03:03,800
of printed it out there.

63
00:03:04,200 --> 00:03:07,100
What I'd like to do is integrate that into this tree view stuff in

64
00:03:07,100 --> 00:03:10,600
some way that we could sort of, you know, pick an entity here.

65
00:03:11,500 --> 00:03:17,100
Have that entity show up so that I can come in and you know, do sort

66
00:03:17,100 --> 00:03:19,500
of the standard like expand and collapse thing as well.

67
00:03:19,500 --> 00:03:20,100
Like all that stuff.

68
00:03:20,100 --> 00:03:25,600
I would like to be able to inspect things that way as we go, right?

69
00:03:25,600 --> 00:03:29,900
So let's figure out how we're going to do that, because that's a

70
00:03:29,900 --> 00:03:30,900
pretty big problem.

71
00:03:30,900 --> 00:03:34,400
It's a pretty difficult problem to solve actually, as you'll sort of

72
00:03:34,400 --> 00:03:35,500
see as we work through it.

73
00:03:35,500 --> 00:03:38,200
There's a lot of subtlety there and there's a lot of different

74
00:03:38,200 --> 00:03:41,300
decisions about how you want to

75
00:03:41,600 --> 00:03:42,600
To make that work.

76
00:03:43,500 --> 00:03:48,100
So if I go over to hand me dot CPP we sort of had the beginnings of it

77
00:03:48,100 --> 00:03:49,000
here, right?

78
00:03:49,000 --> 00:03:52,100
You as you can see we've got this like debug to get element thing.

79
00:03:52,300 --> 00:03:55,600
So I sort of said You know here is roughly what I would want to have

80
00:03:55,600 --> 00:03:56,500
happen, right.

81
00:03:56,500 --> 00:03:59,200
I'd want to have something like this happen and now that we have meta

82
00:03:59,200 --> 00:03:59,800
code

83
00:04:00,800 --> 00:04:03,600
we could even do something where this was generated for us

84
00:04:03,600 --> 00:04:06,600
automatically, and like I said, now that we have a medic, medic coding

85
00:04:07,600 --> 00:04:10,200
front end there, we could decide to do that but

86
00:04:12,200 --> 00:04:18,800
That part is not really is not really the part that's, that's, that's

87
00:04:18,800 --> 00:04:20,200
super relevant.

88
00:04:20,200 --> 00:04:23,700
Really more, the part that's relevant is the conduit between this

89
00:04:23,700 --> 00:04:27,000
piece of the code and the debug piece of the code, right?

90
00:04:27,100 --> 00:04:30,200
What I need to do here, is figure out how I'm supposed to ever

91
00:04:30,200 --> 00:04:32,500
actually get any of these entities.

92
00:04:33,100 --> 00:04:35,600
And, and so that's what we're trying to do here.

93
00:04:36,400 --> 00:04:37,500
So, let's say,

94
00:04:39,400 --> 00:04:45,300
That I was looking at this here now, what we do know is I could if we

95
00:04:45,300 --> 00:04:49,100
were to look at this thing here, I could sort of look at this and say,

96
00:04:49,100 --> 00:04:53,600
well there's this debug entity thing and there's all the stuff that

97
00:04:53,600 --> 00:04:55,100
you might want to look at on it, right?

98
00:04:55,100 --> 00:05:00,700
You can kind of see all of this stuff here and, you know, one way that

99
00:05:00,700 --> 00:05:05,400
we could deal with it, if all of these things were always in memory.

100
00:05:05,400 --> 00:05:08,700
All the time is I could just say something like, okay,

101
00:05:09,800 --> 00:05:10,700
Here is an entity.

102
00:05:10,700 --> 00:05:14,400
Here's a thing that I might want to view put it into the debug stream

103
00:05:14,400 --> 00:05:17,000
because, you know, we've got the ability right, like, in our

104
00:05:18,800 --> 00:05:22,000
In our profile sorts of stuff, you know, we've got this ability.

105
00:05:24,800 --> 00:05:29,700
Down on the here, we've got this ability to like, add these debug

106
00:05:29,700 --> 00:05:30,800
records, right?

107
00:05:30,800 --> 00:05:33,900
And whatever, the debug records are, we could, you know, we could

108
00:05:33,900 --> 00:05:36,900
augment that debug record structure to store stuff, like here is an

109
00:05:36,900 --> 00:05:39,400
entity that I wanted to display, right?

110
00:05:40,500 --> 00:05:43,800
And so the problem with just doing something like simply sticking

111
00:05:43,800 --> 00:05:45,300
maybe like a pointer in there.

112
00:05:45,300 --> 00:05:50,600
That's just a little piece of information like here is the, you know,

113
00:05:52,800 --> 00:05:57,400
here's here's the end of the base pointer is that something like for

114
00:05:57,400 --> 00:05:59,800
example, even this entity the same entity it all

115
00:06:00,000 --> 00:06:01,500
The exists transiently.

116
00:06:02,000 --> 00:06:04,300
Like right now, we unpack the similarity.

117
00:06:04,300 --> 00:06:07,300
We do the simulation, and then it goes away, right?

118
00:06:07,600 --> 00:06:11,300
And so, really anything that the that the user could inspect in the

119
00:06:11,300 --> 00:06:14,700
debug view, like like the programmer could inspect in the debug view,

120
00:06:14,700 --> 00:06:18,400
after the fact, anything that's going to fall into that category has

121
00:06:18,400 --> 00:06:22,700
to get captured at the time that we pass through this code, it can't

122
00:06:22,700 --> 00:06:27,700
be inspected later in the debug system as sort of a walk in memory,

123
00:06:27,700 --> 00:06:29,400
because the memory is actually gone.

124
00:06:32,600 --> 00:06:35,600
Or more specifically, the memory still there, but it, it ain't filled

125
00:06:35,600 --> 00:06:36,400
with this information.

126
00:06:36,400 --> 00:06:39,900
It's filled with something else or just garbage or who knows what.

127
00:06:40,800 --> 00:06:43,700
And so the question is, how are we going to actually deal with that

128
00:06:43,700 --> 00:06:44,300
problem?

129
00:06:44,700 --> 00:06:48,200
And I think, you know, as you can see, if we jump back to sort of our

130
00:06:48,200 --> 00:06:52,800
minds space, when we, when we wrote this code, what I think probably

131
00:06:52,800 --> 00:06:57,200
we were going to do here is say like okay instead of capturing all of

132
00:06:57,200 --> 00:06:59,600
the data that we could possibly ever want to inspect

133
00:07:00,000 --> 00:07:03,800
Which would be way too much data and very unwieldy and not probably a

134
00:07:03,800 --> 00:07:04,700
very good idea.

135
00:07:05,000 --> 00:07:08,400
Instead what we could do here is say, oh well maybe what we could do

136
00:07:08,400 --> 00:07:15,800
is just capture like one selected thing, whatever like a selected and

137
00:07:15,800 --> 00:07:19,700
the is like a hot entity or whatever, select one of those.

138
00:07:21,100 --> 00:07:24,300
And then capture all the information about it into the stream that

139
00:07:24,300 --> 00:07:24,900
would work.

140
00:07:26,500 --> 00:07:29,400
So that's one way we could do it and that appears to be sort of the

141
00:07:29,400 --> 00:07:31,800
way, like I said that we were going to we were kind of going down

142
00:07:31,800 --> 00:07:35,000
before it has some drawbacks, right?

143
00:07:35,300 --> 00:07:40,200
One of the drawbacks is that you know, if you were to pause a frame

144
00:07:40,200 --> 00:07:44,100
you know like capture just just a frame by itself without the

145
00:07:44,100 --> 00:07:47,200
knowledge of What entity you wanted to know about on that frame or

146
00:07:47,200 --> 00:07:48,000
entities.

147
00:07:48,900 --> 00:07:50,700
You cannot go back and change your

148
00:07:50,900 --> 00:07:52,300
After the fact, right?

149
00:07:52,400 --> 00:07:56,100
You cannot go back and recapture other entity data because it is

150
00:07:56,100 --> 00:07:57,000
already happened.

151
00:07:57,800 --> 00:08:01,700
The best that you could possibly do in that circumstance, is something

152
00:08:01,700 --> 00:08:05,900
like jump back to that, the memory State at the beginning of that

153
00:08:05,900 --> 00:08:08,300
frame, which, you know, we could save or something like this using the

154
00:08:08,300 --> 00:08:14,100
looped Live code editing, sort of system and change What entity were

155
00:08:14,100 --> 00:08:17,100
asking for at that time to get them different entity out, right?

156
00:08:17,200 --> 00:08:18,600
So, that's something we could do.

157
00:08:21,100 --> 00:08:25,300
But something we can't do is just crawl all the data as part of the

158
00:08:25,300 --> 00:08:27,000
debug system it's simply not possible.

159
00:08:27,200 --> 00:08:31,400
You have to continue to run sort of the game Loop in order to have

160
00:08:31,400 --> 00:08:32,100
that happen.

161
00:08:32,799 --> 00:08:38,400
So like I said, not sure what the best solution is to this problem in

162
00:08:38,400 --> 00:08:40,100
general, in terms of the inspection.

163
00:08:40,400 --> 00:08:43,900
It's you know it's six of one half-dozen of the other and certainly,

164
00:08:43,900 --> 00:08:46,900
you know, one thing we could do is say okay, let's you know, let's

165
00:08:46,900 --> 00:08:48,500
just go ahead and actually just dump them.

166
00:08:48,500 --> 00:08:50,500
All other thing we could say, is

167
00:08:51,000 --> 00:08:53,000
In debug mode, you know?

168
00:08:53,000 --> 00:08:57,700
When we do a Sim region thing, we use this memory and what we could do

169
00:08:57,700 --> 00:08:59,800
instead of having that be Transit,

170
00:09:00,200 --> 00:09:01,800
We could actually have that be permanent memory.

171
00:09:01,800 --> 00:09:06,400
Meaning when we use, when we do the same region and we put we unpack

172
00:09:06,400 --> 00:09:08,700
all of our entities into the same region that we're simulating,

173
00:09:09,100 --> 00:09:10,800
instead of going and throwing that away.

174
00:09:12,200 --> 00:09:15,600
We could instead save it to inspect it later.

175
00:09:16,700 --> 00:09:18,500
okay, but even on top of that,

176
00:09:20,000 --> 00:09:23,200
Again, getting back to some motivation of why we might want to keep.

177
00:09:23,200 --> 00:09:26,800
Doing it this way though, is that even on top of that we have a

178
00:09:26,800 --> 00:09:31,200
problem which is that there would only be one state of the entity.

179
00:09:31,500 --> 00:09:34,600
So for example if we wanted to know what the state of an entity was

180
00:09:34,600 --> 00:09:38,400
before it got stimulated and then after I got stimulated so we could

181
00:09:38,400 --> 00:09:44,600
see like how its position changed or what, you know, type it was

182
00:09:44,600 --> 00:09:47,200
changed or you know things like that that may have occurred that were

183
00:09:47,200 --> 00:09:49,100
changes in the entity from one point.

184
00:09:49,300 --> 00:09:53,000
In time to another again, we can't do that with a system where all

185
00:09:53,000 --> 00:09:55,900
it's doing is taking the memory and inspecting it after the fact.

186
00:09:57,500 --> 00:09:59,800
So, I think even though it has some drawbacks.

187
00:09:59,800 --> 00:10:03,200
I think, at least for our current system and, you know, with the

188
00:10:03,200 --> 00:10:06,700
understanding that, you know, on handmade hero, we're not building the

189
00:10:06,700 --> 00:10:09,200
absolute best debug system the universe.

190
00:10:09,200 --> 00:10:12,000
Because the thing, we're shipping here, is a game that a debug system.

191
00:10:12,200 --> 00:10:16,800
We have to be willing to accept a certain, you know, Line in the Sand

192
00:10:16,800 --> 00:10:17,000
of.

193
00:10:17,000 --> 00:10:19,100
Let's not try to solve every problem, right?

194
00:10:19,900 --> 00:10:23,000
Given that fact, I think the most reasonable thing to do is sort of

195
00:10:23,000 --> 00:10:26,500
stay with this kind of a system where what we're doing essentially is

196
00:10:26,500 --> 00:10:27,100
saying okay.

197
00:10:27,800 --> 00:10:31,800
We're going to decide a few things to look at beforehand.

198
00:10:32,200 --> 00:10:34,800
We're going to capture the information about those things that we

199
00:10:34,800 --> 00:10:38,700
think is going to be relevant as part of the code and in the event

200
00:10:38,700 --> 00:10:41,400
that that turns out to not be the data that we needed.

201
00:10:41,500 --> 00:10:44,700
Oh well we have to go change the code and rerun the test or whatever

202
00:10:44,700 --> 00:10:44,900
it is.

203
00:10:44,900 --> 00:10:48,000
We're trying to do that's just the reality of the situation.

204
00:10:48,100 --> 00:10:50,000
It's still a lot better than debugging blind.

205
00:10:50,000 --> 00:10:51,500
It would still be a very useful system.

206
00:10:51,700 --> 00:10:53,600
Does it allow us to curl the data arbitrarily?

207
00:10:53,600 --> 00:10:56,700
No, but then again, neither does anything else really until we

208
00:10:56,700 --> 00:10:57,100
finally,

209
00:10:57,200 --> 00:11:03,700
Get some real debuggers and I would not hold your breath for that.

210
00:11:03,700 --> 00:11:07,900
So that said, let's go ahead and push forward with this.

211
00:11:07,900 --> 00:11:11,100
And what I'd like to do is go ahead and say that, you know, maybe this

212
00:11:11,100 --> 00:11:14,400
thing right here is going to essentially just go through this system,

213
00:11:14,700 --> 00:11:15,200
right?

214
00:11:15,400 --> 00:11:19,200
We've got this concept of debug records here, debug records.

215
00:11:19,600 --> 00:11:24,300
I'm sorry debug events, rather and these debug events have actually, a

216
00:11:24,300 --> 00:11:26,100
type associated with them, right?

217
00:11:26,500 --> 00:11:27,100
And then they've got

218
00:11:27,300 --> 00:11:28,100
Information.

219
00:11:29,200 --> 00:11:33,800
So what we can probably do presumably is we should be able to sort of,

220
00:11:33,800 --> 00:11:39,200
you know, piggyback on top of that basically, in order to dump data

221
00:11:39,200 --> 00:11:40,700
that we think we might need.

222
00:11:41,000 --> 00:11:44,700
Okay, so I'm going to do that in sort of the simplest way possible at

223
00:11:44,700 --> 00:11:50,200
the moment and you know hopefully it will be something relatively you

224
00:11:50,200 --> 00:11:53,100
know, it won't be too problematic for us basically.

225
00:11:54,100 --> 00:11:56,500
Okay, so here we go.

226
00:11:56,600 --> 00:11:57,100
I have

227
00:11:57,200 --> 00:11:59,900
Have a debug event and I've got a type for the debug event.

228
00:12:00,600 --> 00:12:03,600
I can go in here and say that the debug event.

229
00:12:05,100 --> 00:12:08,000
Is now going to be able to Output some values, right?

230
00:12:08,200 --> 00:12:11,600
And if we take a look at the values that this is outputting, right?

231
00:12:11,800 --> 00:12:15,800
Maybe we've got some things like we've got a real 32s, right?

232
00:12:16,400 --> 00:12:19,400
Or you 32 science 32s, that sort of thing.

233
00:12:20,700 --> 00:12:24,900
And, yeah, you know, that's, that's really mostly the sorts of stuff

234
00:12:24,900 --> 00:12:26,900
that we would want to start with.

235
00:12:27,200 --> 00:12:30,800
We probably don't need to do anything else quite yet.

236
00:12:31,800 --> 00:12:34,500
Because, you know, I'm trying to think.

237
00:12:34,700 --> 00:12:35,900
We want to store anything.

238
00:12:35,900 --> 00:12:39,400
We don't really want to blow the debug instruct up too much, because a

239
00:12:39,400 --> 00:12:43,300
lot of people are using it, but there are a lot of ways that we could

240
00:12:43,300 --> 00:12:43,900
get around that.

241
00:12:43,900 --> 00:12:47,900
So you could imagine, for example, us writing a sort of system for

242
00:12:47,900 --> 00:12:51,900
this sort of thing where we actually did something, you know, more

243
00:12:51,900 --> 00:12:52,600
like this.

244
00:12:52,800 --> 00:12:58,800
So as we sort of do the we got a 64 and a 32 pack together there and

245
00:12:58,800 --> 00:13:03,400
then here in the union we could actually have longer things and we

246
00:13:03,400 --> 00:13:04,500
could start encoding.

247
00:13:04,600 --> 00:13:07,900
I'm these with variable sizes, so we could have the type.

248
00:13:07,900 --> 00:13:11,400
For example, has, you know, sort of an understanding of a size that

249
00:13:11,400 --> 00:13:14,400
goes with it, and then we could have things in here, that we're going

250
00:13:14,400 --> 00:13:15,800
to be different sizes.

251
00:13:18,000 --> 00:13:23,600
I kind of feel like that might be a good idea to some degree but I

252
00:13:23,600 --> 00:13:24,600
don't know, right?

253
00:13:24,600 --> 00:13:25,300
I'm not sure.

254
00:13:29,100 --> 00:13:32,600
Seems like it probably would be though and in that case, we would have

255
00:13:32,600 --> 00:13:33,700
things like this, you know?

256
00:13:35,400 --> 00:13:36,000
Right.

257
00:13:36,300 --> 00:13:41,000
So a bunch of our fundamental types would probably exists in here so

258
00:13:41,000 --> 00:13:43,400
that they could get captured as a whole.

259
00:13:43,400 --> 00:13:44,000
Right.

260
00:13:44,400 --> 00:13:47,500
And again that's not that's really mostly about efficiency.

261
00:13:47,600 --> 00:13:51,200
That's not really about any sort of ability to capture because we

262
00:13:51,200 --> 00:13:55,500
always could just pretend that everything is like R32 you through to a

263
00:13:55,500 --> 00:13:57,100
sturdy to that sort of thing, right.

264
00:13:57,700 --> 00:14:00,200
And then in here you know what we would do is we'd say OK.

265
00:14:00,200 --> 00:14:03,200
Well there's V2s and v3s

266
00:14:05,600 --> 00:14:08,800
What can't actually use be 3 because that's actually a function, we

267
00:14:08,800 --> 00:14:09,300
already have.

268
00:14:09,300 --> 00:14:11,400
So I got to have to kind of make up something for it there.

269
00:14:12,600 --> 00:14:15,200
But yeah, you can imagine something that looked like this.

270
00:14:21,400 --> 00:14:24,500
If we want to do something like this, right now, as you can see, when

271
00:14:24,500 --> 00:14:27,300
I create this Union, it's going to take up more space.

272
00:14:27,300 --> 00:14:29,700
It's going to take up as much space as a rectangle three, which is

273
00:14:29,700 --> 00:14:31,300
like six floats, right?

274
00:14:31,900 --> 00:14:35,700
Which means that it would massively bloat, the space required to store

275
00:14:35,700 --> 00:14:41,100
the basic debug events, which is just like only 128 bit wide, right?

276
00:14:41,100 --> 00:14:44,000
Normally like if you if you ignore this stuff here, normally it would

277
00:14:44,000 --> 00:14:48,700
just be 64 bits, 16, bits, 8, 8, and 32, right?

278
00:14:49,900 --> 00:14:52,600
So, that is not good.

279
00:14:52,600 --> 00:14:55,700
Given the amount of debug information that we're currently pushing

280
00:14:55,700 --> 00:14:57,800
through the system, we definitely wouldn't want to do that.

281
00:14:57,800 --> 00:14:59,800
And so, the way that I would handle that in the

282
00:15:00,000 --> 00:15:04,800
The event is instead of advancing by a whole debug event at a time, I

283
00:15:04,800 --> 00:15:08,100
would always Advanced by whatever the actual size is of the thing that

284
00:15:08,100 --> 00:15:09,300
we're talking about.

285
00:15:09,800 --> 00:15:13,400
And then I would go like from there.

286
00:15:13,700 --> 00:15:19,000
I would then you know, they're both a reader and the writer would go,

287
00:15:19,000 --> 00:15:20,200
which type am I?

288
00:15:20,300 --> 00:15:23,900
Am I actually working with your and whichever type that is I Advance

289
00:15:23,900 --> 00:15:24,800
by however, much.

290
00:15:25,100 --> 00:15:26,600
You know, I need to as a result.

291
00:15:27,300 --> 00:15:28,400
So that's up again.

292
00:15:28,400 --> 00:15:29,800
Pretty straightforward thing to do.

293
00:15:30,000 --> 00:15:30,700
We could totally do that.

294
00:15:30,700 --> 00:15:33,200
We don't have to do it quite yet because we could just let this thing

295
00:15:33,200 --> 00:15:36,800
get bigger, you know, I could do this and if I go ahead and do that,

296
00:15:39,700 --> 00:15:41,200
I guess that's not defined yet.

297
00:15:45,700 --> 00:15:47,100
I guess I could just do it like this.

298
00:15:52,400 --> 00:15:57,900
so we could just say, okay, you know, there's up to some large number

299
00:15:57,900 --> 00:15:58,500
of these

300
00:16:02,000 --> 00:16:02,600
Right?

301
00:16:02,600 --> 00:16:04,100
Since I was all take the same to a space.

302
00:16:04,100 --> 00:16:08,200
I think I said six so we could do something like that, right?

303
00:16:09,200 --> 00:16:10,700
And in theory,

304
00:16:15,400 --> 00:16:17,000
That's the works, right?

305
00:16:17,000 --> 00:16:19,200
So, our debug stuff is very bloated.

306
00:16:19,200 --> 00:16:22,100
Now, it's much larger than it needs to be, but it would still work

307
00:16:22,500 --> 00:16:23,000
just fine.

308
00:16:23,000 --> 00:16:26,000
And so, it's really just a memory compression thing is, all that I

309
00:16:26,000 --> 00:16:28,600
would be doing there is to make sure that we weren't using a bunch of

310
00:16:28,600 --> 00:16:32,800
memory bandwidth unnecessarily to sort of write these things out and

311
00:16:32,800 --> 00:16:33,400
work with them.

312
00:16:33,600 --> 00:16:34,100
Right?

313
00:16:35,200 --> 00:16:36,600
So that I could do as well.

314
00:16:36,600 --> 00:16:40,000
And I'm, you know, I don't really know if that's sort of a good idea

315
00:16:40,000 --> 00:16:40,900
or bad idea.

316
00:16:42,500 --> 00:16:44,800
I don't have a particularly

317
00:16:45,100 --> 00:16:48,500
Strong opinion about either way but let's just say that for the time

318
00:16:48,500 --> 00:16:52,700
being we just kind of leave it like that and we see how it goes.

319
00:16:52,800 --> 00:16:55,100
So let's see here, something like this.

320
00:16:57,300 --> 00:16:57,800
Maybe.

321
00:17:02,000 --> 00:17:03,600
Yeah, it seems reasonable.

322
00:17:04,800 --> 00:17:08,800
So if I've got something like this now, you know these things should

323
00:17:08,800 --> 00:17:09,099
be.

324
00:17:09,099 --> 00:17:12,099
It should be fairly obvious that this is not particularly difficult to

325
00:17:12,099 --> 00:17:12,700
do at this point.

326
00:17:12,700 --> 00:17:15,500
If I want to record some stuff to the debug stream, it's actually

327
00:17:15,500 --> 00:17:16,300
pretty easy.

328
00:17:16,500 --> 00:17:20,599
All I need to do is Define these debug value things to actually write

329
00:17:20,599 --> 00:17:22,800
to that debug stream, right?

330
00:17:23,400 --> 00:17:27,700
And so, in order to do that, I could come in here, I think I might

331
00:17:27,700 --> 00:17:30,300
want to do this explicitly for the moment.

332
00:17:30,800 --> 00:17:34,400
I've got some reasons why, I think I would like to do it that way.

333
00:17:35,200 --> 00:17:37,300
And since especially since we haven't met a generator.

334
00:17:37,300 --> 00:17:40,400
Now I think that might be a good idea to do.

335
00:17:40,500 --> 00:17:46,600
I'm not 100% certain of it necessarily but it just does it seems like

336
00:17:46,600 --> 00:17:49,600
maybe that's probably a good thing to do potentially, maybe.

337
00:17:50,600 --> 00:17:54,100
So let's say, I go here to the to the actual code that we were looking

338
00:17:54,100 --> 00:17:58,100
at before and I'm going to write it out manually for the time being if

339
00:17:58,100 --> 00:17:59,900
I come here and I look at

340
00:18:00,000 --> 00:18:02,800
We were writing out, you know, we've got a storage index.

341
00:18:02,800 --> 00:18:06,000
I'm going to go ahead and abbreviate these guys since this is the

342
00:18:06,000 --> 00:18:08,900
variable format that I want to kind of use going forwards.

343
00:18:09,400 --> 00:18:11,500
You know I kind of was experimenting with it a little bit.

344
00:18:11,500 --> 00:18:14,100
See what I liked the best and this one was the one I like the best.

345
00:18:16,200 --> 00:18:17,700
So if I take that,

346
00:18:19,400 --> 00:18:24,100
And I imagine just sort of like like sort of post pending the thing on

347
00:18:24,100 --> 00:18:25,100
there, right?

348
00:18:25,100 --> 00:18:27,100
Like whichever one we're going to actually do here.

349
00:18:27,400 --> 00:18:30,800
I don't know that we really need to do that because we could use type

350
00:18:30,800 --> 00:18:32,900
Discovery to kind of make that happen for us.

351
00:18:33,400 --> 00:18:36,100
But at the time you know, I don't know that we really want that to

352
00:18:36,100 --> 00:18:36,400
happen.

353
00:18:36,400 --> 00:18:39,400
I'm not sure we could do something like that, right?

354
00:18:41,300 --> 00:18:45,500
I don't know if we need it or not, I guess I can try without it first.

355
00:18:45,700 --> 00:18:49,000
If we were going to try without it first, the thing that we would have

356
00:18:49,000 --> 00:18:49,100
to

357
00:18:49,300 --> 00:18:53,600
You is inside our sort of our debug system where the stuff actually

358
00:18:53,800 --> 00:18:58,200
starts to happen if I wanted to do it inside handmade platform, right?

359
00:18:59,000 --> 00:19:03,200
Then, you know, we've got this extra and see sort of situation here.

360
00:19:08,300 --> 00:19:10,700
And that was something that we added for the benefit of people who are

361
00:19:10,700 --> 00:19:13,400
trying to call this code from other languages.

362
00:19:13,800 --> 00:19:17,900
And it would create a problem for us, basically, in terms of being

363
00:19:17,900 --> 00:19:22,500
able to use these debug value things in that way, because we could not

364
00:19:22,500 --> 00:19:26,400
use function overloading in order to determine what kind of variable

365
00:19:26,400 --> 00:19:27,300
was being dumped.

366
00:19:28,800 --> 00:19:32,700
Whereas if we did force you to sort of specify what it was, you were

367
00:19:32,700 --> 00:19:38,700
trying to dump like this then it would still work from C and again I

368
00:19:38,700 --> 00:19:41,500
don't know that I have a super strong opinion about that.

369
00:19:41,700 --> 00:19:44,800
I'm going to go ahead and say that I don't really care about see

370
00:19:44,800 --> 00:19:46,100
linkage, very much.

371
00:19:46,100 --> 00:19:49,500
I don't think it's a particularly valuable thing and I was only

372
00:19:49,500 --> 00:19:52,400
because I don't care if we link to see, you're not right at all.

373
00:19:53,100 --> 00:19:55,200
We're never going to compile in straight.

374
00:19:55,200 --> 00:19:57,900
See because we have operator overloading and stuff like that.

375
00:19:58,500 --> 00:20:01,700
So I would say I would pretty much ignore this and I might just say

376
00:20:01,700 --> 00:20:04,100
like okay that's a very end of all of this.

377
00:20:04,400 --> 00:20:06,800
We could even say if the C plus plus here.

378
00:20:08,300 --> 00:20:12,300
And basically say that like okay, inside our debug system, all of

379
00:20:12,300 --> 00:20:17,300
these things only get defined to be something else in the case where

380
00:20:17,300 --> 00:20:20,600
we actually are able to, you know, to do so.

381
00:20:20,900 --> 00:20:22,600
So I'm trying to think of the best way to do that.

382
00:20:22,600 --> 00:20:26,400
It might be something like this, it might be something like, okay, if

383
00:20:26,400 --> 00:20:29,500
C++ is defined, you know.

384
00:20:31,400 --> 00:20:35,800
It's fine, C++ and defined.

385
00:20:37,400 --> 00:20:39,100
What are we looking at here?

386
00:20:39,100 --> 00:20:43,600
Are if in our debug system is on, so it's like it's a I think it's

387
00:20:43,600 --> 00:20:45,200
handmade internal right?

388
00:20:46,700 --> 00:20:48,800
You know, I never did like

389
00:20:50,000 --> 00:20:54,200
The way they do, preprocessor stuff and see so bad that we have a week

390
00:20:54,200 --> 00:20:54,600
Professor.

391
00:20:54,600 --> 00:20:55,000
Anyway.

392
00:20:55,500 --> 00:20:59,800
So can meet internal assuming that we're in C++ and handmade internal.

393
00:21:00,000 --> 00:21:03,800
Find then you can get a bunch of these things, but if either of those

394
00:21:03,800 --> 00:21:06,100
is not true, then they just kind of disappear, right?

395
00:21:06,100 --> 00:21:11,600
But if they are true, then something like debug value becomes like,

396
00:21:11,600 --> 00:21:17,400
you know, push debug value, or something like this, you know, we're

397
00:21:17,400 --> 00:21:21,800
debug push value or debug, you know, record value.

398
00:21:21,800 --> 00:21:23,000
I don't know, whatever you want to call it.

399
00:21:23,000 --> 00:21:27,300
And essentially what we're going to do is exactly this stuff up here

400
00:21:27,300 --> 00:21:29,900
like exactly the same stuff that we were doing.

401
00:21:30,000 --> 00:21:33,100
Doing the only differences this stuff that's happening.

402
00:21:33,100 --> 00:21:36,900
Here is actually going to be super like we're going to store different

403
00:21:36,900 --> 00:21:40,500
data so you can see here like

404
00:21:42,200 --> 00:21:43,500
Inside this Frame marker stuff.

405
00:21:43,500 --> 00:21:47,400
For example, we could do exactly what the frame marker does.

406
00:21:47,900 --> 00:21:51,400
So if I come in here, and I say, like, all right, we're going to do

407
00:21:51,900 --> 00:21:53,200
the debug value call.

408
00:21:53,700 --> 00:21:55,200
There's the debug value call.

409
00:21:56,000 --> 00:21:58,300
It's going to look exactly like that for a marker stuff.

410
00:21:58,300 --> 00:22:02,100
Looks so we create a synthetic counter to say this is where it's

411
00:22:02,100 --> 00:22:05,900
coming from, we record a debug event here and we say that the debug

412
00:22:05,900 --> 00:22:11,700
event is going to be whatever the whatever the type was of that.

413
00:22:12,000 --> 00:22:15,800
Killer you know whatever this particular thing is in order to do that

414
00:22:16,300 --> 00:22:20,100
unfortunately we need some kind of like a cracking function like we

415
00:22:20,100 --> 00:22:21,100
need some way.

416
00:22:22,400 --> 00:22:24,100
This is why I was sort of saying, it's kind of annoying.

417
00:22:24,200 --> 00:22:31,000
We need some way to translate a type into a debug event, right?

418
00:22:31,600 --> 00:22:34,800
So we need something like this like where we'd say debug event from

419
00:22:35,700 --> 00:22:38,400
and then we would pass it the debug value.

420
00:22:38,900 --> 00:22:40,200
So it would be something like this.

421
00:22:40,200 --> 00:22:46,100
There's the value and I would say, get me the debug event from that

422
00:22:46,100 --> 00:22:50,200
value, we then have this stuff for like, okay, event seconds, elapsed

423
00:22:50,200 --> 00:22:51,300
seconds, elapsed in it.

424
00:22:52,200 --> 00:22:55,000
That is the thing that was being stored previously.

425
00:22:55,200 --> 00:22:57,300
We are not storing that in this case, right?

426
00:22:57,500 --> 00:23:01,800
We are actually storing one of those other members and we're storing

427
00:23:02,100 --> 00:23:07,100
the members based on sort of what we're actually getting past.

428
00:23:07,200 --> 00:23:09,100
And in fact, I guess now that I think about it.

429
00:23:11,200 --> 00:23:13,300
Record debug event common.

430
00:23:17,200 --> 00:23:19,800
Record debug event common.

431
00:23:23,000 --> 00:23:24,800
Where do we actually?

432
00:23:27,300 --> 00:23:30,000
Okay, so actually that's not even true.

433
00:23:30,000 --> 00:23:33,000
What I said, record, debug event, common, just need to do a romantic

434
00:23:33,000 --> 00:23:33,200
encounter.

435
00:23:33,200 --> 00:23:37,100
It doesn't even need to do any macro stuff at all.

436
00:23:37,500 --> 00:23:41,600
Actually, that's kind of nice.

437
00:23:41,900 --> 00:23:45,000
So actually, what happens there is that can actually be sort of a

438
00:23:45,000 --> 00:23:46,500
function call sort of thing.

439
00:23:46,600 --> 00:23:49,900
It's got the translation unit index problem here.

440
00:23:52,700 --> 00:23:59,100
I guess is one sort of nasty thing about it but but really this this

441
00:23:59,100 --> 00:23:59,800
is actually

442
00:24:00,100 --> 00:24:01,000
Really reasonable.

443
00:24:01,000 --> 00:24:05,500
I think so.

444
00:24:05,500 --> 00:24:06,500
I think what we would do,

445
00:24:07,900 --> 00:24:09,100
Is there something like this?

446
00:24:09,600 --> 00:24:14,700
We want to record a debug event and that debug event is, you know,

447
00:24:14,800 --> 00:24:18,900
let's just say that we lie and say that it's well, we could even just

448
00:24:18,900 --> 00:24:21,900
say that it's an R32 or something like this, right?

449
00:24:22,400 --> 00:24:25,800
So we tell it to do record, debug event common, you pass something

450
00:24:25,800 --> 00:24:31,300
like that and then in here where we're actually going to set the thing

451
00:24:31,300 --> 00:24:37,600
like set event data, you know, or something like this set like diva.

452
00:24:38,400 --> 00:24:42,000
value set event data or something like that, we would just pass,

453
00:24:42,000 --> 00:24:46,400
whatever the value is and whatever this record debug event common ends

454
00:24:46,400 --> 00:24:47,600
up giving us back

455
00:24:48,800 --> 00:24:52,500
In fact, how do we actually, I guess it just spontaneously defines

456
00:24:52,500 --> 00:24:53,900
that right on the stock for us.

457
00:24:53,900 --> 00:24:54,800
Yes, that's what it does.

458
00:24:55,500 --> 00:24:58,900
Whatever event we have, we just passed that in there along with the

459
00:24:58,900 --> 00:24:59,400
value.

460
00:24:59,800 --> 00:25:02,400
And now this thing, debug value set event data.

461
00:25:02,600 --> 00:25:06,100
That's the thing that will do all of that cracking for us, right?

462
00:25:06,500 --> 00:25:10,300
So what we would then say is like, okay, we just have, you know, an

463
00:25:10,300 --> 00:25:14,400
Infinity of these where Infinity is actually some very small number

464
00:25:14,400 --> 00:25:18,000
like 10, you know, it's not a particularly big Infinity.

465
00:25:18,600 --> 00:25:20,700
You know, not every Infinity has to be huge.

466
00:25:21,800 --> 00:25:24,300
We just have one of these guys where we've got

467
00:25:31,700 --> 00:25:35,400
one for every type of value that we're sort of putting out there,

468
00:25:35,500 --> 00:25:36,100
right?

469
00:25:36,400 --> 00:25:40,600
So, for oops, for every one of the, of the debug event types that

470
00:25:40,600 --> 00:25:43,200
we've got write all these sorts of things.

471
00:25:43,800 --> 00:25:46,000
That's what we would do now.

472
00:25:46,400 --> 00:25:50,300
I don't actually know, that's not what I'm talking about.

473
00:25:51,400 --> 00:25:56,300
I actually walked platform.sh, I want this one, right?

474
00:25:57,700 --> 00:25:58,800
So, I just want these guys.

475
00:26:00,200 --> 00:26:05,500
So, yeah, I need to fill out this event for each of these different

476
00:26:05,500 --> 00:26:06,900
types, right?

477
00:26:06,900 --> 00:26:09,600
So there's the R32, right?

478
00:26:11,200 --> 00:26:15,500
It would take an R32 and it would say that the event, you know, Wecker

479
00:26:15,500 --> 00:26:17,200
32 0 equals value.

480
00:26:18,300 --> 00:26:25,300
You know, and I feel like the rest of this is really pretty wrote, you

481
00:26:25,300 --> 00:26:26,000
know, I'm saying.

482
00:26:26,600 --> 00:26:31,000
So there's like the V2 and that would just be something like this.

483
00:26:36,400 --> 00:26:37,100
Right.

484
00:26:38,300 --> 00:26:41,500
And that just kind of goes on advaitha infinitum.

485
00:26:44,600 --> 00:26:45,100
Right.

486
00:26:45,200 --> 00:26:48,900
So that would record you know, all the different types of X we have

487
00:26:49,100 --> 00:26:51,600
and then similarly you know we could do something like all right.

488
00:26:51,600 --> 00:26:59,400
There's the here's the you and the S-Type and that's like s32 and you

489
00:26:59,400 --> 00:26:59,600
30

490
00:27:01,700 --> 00:27:05,400
You know, I'm saying and then, you know, if we want to rectangles,

491
00:27:05,400 --> 00:27:07,700
those are again, same same deal.

492
00:27:08,600 --> 00:27:15,100
I got some rectangle value here that I want to store, and it looks

493
00:27:15,100 --> 00:27:17,400
exactly the same only we do the Min and the max

494
00:27:21,400 --> 00:27:21,900
Right.

495
00:27:24,100 --> 00:27:28,200
And so that's that's really all I was talking about.

496
00:27:28,300 --> 00:27:31,000
We're now saving, you know, all of those values.

497
00:27:31,100 --> 00:27:32,000
Oops one.

498
00:27:35,300 --> 00:27:38,300
That would save all of those values to the debug stream.

499
00:27:41,000 --> 00:27:44,400
So that we would be able to, you know, sort of memento them, like

500
00:27:44,400 --> 00:27:47,700
capture them and be able to show them later.

501
00:27:49,600 --> 00:27:54,400
So that that's really all I'm talking about second see linkage.

502
00:27:54,500 --> 00:27:57,600
Oh, are we still we're still in the extra and see block, of course.

503
00:27:57,900 --> 00:27:59,400
So let me grab it.

504
00:27:59,400 --> 00:28:02,100
Grab this little guy here, there we go.

505
00:28:03,000 --> 00:28:04,600
So we need to put that out here.

506
00:28:08,100 --> 00:28:13,400
I don't remember what we've called these guys in the platform thing.

507
00:28:14,100 --> 00:28:20,100
I don't know, it was Veeck s32 and Becky 32.

508
00:28:21,400 --> 00:28:22,000
My bad.

509
00:28:22,000 --> 00:28:25,500
So it was that sort of a thing, right?

510
00:28:27,500 --> 00:28:28,000
Okay.

511
00:28:29,300 --> 00:28:30,100
So yeah, okay.

512
00:28:30,100 --> 00:28:33,600
So we also have a little bit of a problem there, whereas, if we want

513
00:28:33,600 --> 00:28:37,800
these sort of automatic cracking values to happen.

514
00:28:39,200 --> 00:28:42,900
Well, you know, now that I think about it, if we want these Auto ones

515
00:28:42,900 --> 00:28:45,500
to happen, we don't really have to have these in here, right?

516
00:28:45,500 --> 00:28:48,700
We don't we can just do it for the types that we actually do have

517
00:28:48,700 --> 00:28:53,800
defined in here if we want to and and then you know, we can sort of

518
00:28:53,800 --> 00:28:56,900
take those up now, there is a reason why we might want in the

519
00:28:57,100 --> 00:28:59,500
Form file to define those, right?

520
00:29:00,100 --> 00:29:03,600
Because they are kind of things that you could imagine the platform

521
00:29:03,600 --> 00:29:04,900
layers, wanting to use.

522
00:29:05,600 --> 00:29:09,200
So I don't know, you know, if that's the best thing to do or if that's

523
00:29:09,200 --> 00:29:10,200
not the best thing to do.

524
00:29:10,200 --> 00:29:12,700
It's really kind of touchy what goes in the platform layer and what

525
00:29:12,700 --> 00:29:14,000
doesn't go in the platform layer.

526
00:29:14,800 --> 00:29:18,100
So I'm not I'm not certain what the right answer is there.

527
00:29:18,100 --> 00:29:21,500
But you can imagine, for example, just taking these guys, the ones

528
00:29:21,500 --> 00:29:23,000
that rely on other types.

529
00:29:24,500 --> 00:29:26,800
Like that, they can be moved.

530
00:29:26,900 --> 00:29:30,800
So, if I were to take these out and go to handmade math.h, you could

531
00:29:30,800 --> 00:29:34,100
imagine us just sort of putting in here, like, okay, the debug

532
00:29:34,100 --> 00:29:35,800
cracking functions for these guys.

533
00:29:36,500 --> 00:29:40,800
Actually, could go, you know, right in the, you know, right with the

534
00:29:40,800 --> 00:29:42,300
code that defines them.

535
00:29:42,600 --> 00:29:46,100
So in the file that you define v 2 is V 3 S, you get the debug

536
00:29:46,200 --> 00:29:47,500
crackers for those as well.

537
00:29:48,100 --> 00:29:51,000
You know, me and that would work pretty well.

538
00:29:52,000 --> 00:29:54,000
So yeah, of course are handmaiden.

539
00:29:54,100 --> 00:29:55,500
Anna stuff again.

540
00:29:56,000 --> 00:29:59,800
Doesn't really have all the definitions that are probably wants week.

541
00:30:00,100 --> 00:30:02,800
Sort of have this thing where we're stable still using some of these

542
00:30:04,000 --> 00:30:05,400
older versions of stuff.

543
00:30:05,900 --> 00:30:08,100
I can go ahead and fix those just for fun.

544
00:30:09,000 --> 00:30:13,900
Yes, please read from disk, real 32 should be R32.

545
00:30:13,900 --> 00:30:15,700
So distance limit.

546
00:30:16,900 --> 00:30:17,600
There we go.

547
00:30:18,900 --> 00:30:20,000
That's what we're looking for.

548
00:30:21,500 --> 00:30:24,000
And where was our interests backed.

549
00:30:24,600 --> 00:30:25,400
What else do we have?

550
00:30:25,400 --> 00:30:30,300
There's one get rid of that guy, get rid of these guys, I should

551
00:30:30,300 --> 00:30:34,400
probably just do a day where we just get rid of all of those at some

552
00:30:34,400 --> 00:30:35,800
point, it should happen.

553
00:30:36,700 --> 00:30:38,900
And we also have one in handed world, right?

554
00:30:38,900 --> 00:30:40,000
We introspected that.

555
00:30:40,400 --> 00:30:42,900
So these are those, as well.

556
00:30:44,700 --> 00:30:47,700
Okay, so someone still using a Unit 32 here.

557
00:30:48,200 --> 00:30:51,200
I don't really remember her.

558
00:30:51,200 --> 00:30:51,800
There it is.

559
00:30:51,800 --> 00:30:52,500
There it is.

560
00:30:54,500 --> 00:30:55,000
There we go.

561
00:30:57,800 --> 00:31:01,400
Okay, so now we just got to actually get this stuff working, but

562
00:31:01,400 --> 00:31:02,700
that's basically.

563
00:31:03,200 --> 00:31:04,700
That's basically what I want to start with.

564
00:31:04,700 --> 00:31:08,300
Is that that concept right there, the way that we played it out.

565
00:31:09,200 --> 00:31:11,200
Okay, so now we got to make sure this stuff makes sense.

566
00:31:11,200 --> 00:31:15,000
We call record debug event, common, we do whatever this stuff is going

567
00:31:15,000 --> 00:31:15,300
to happen.

568
00:31:15,300 --> 00:31:20,800
There we called ebook set value data and that nonsense we have.

569
00:31:21,100 --> 00:31:25,500
So there's our missing semicolon I can fix that none of the seven

570
00:31:25,500 --> 00:31:25,800
overload.

571
00:31:26,000 --> 00:31:26,800
Can do the hip Point.

572
00:31:26,800 --> 00:31:27,800
That's correct.

573
00:31:28,000 --> 00:31:29,100
I'm going to start.

574
00:31:30,900 --> 00:31:34,800
This off, by not having a raise in there yet, so we could do with a

575
00:31:34,800 --> 00:31:39,400
little bit later, same with that, and let's see.

576
00:31:39,400 --> 00:31:42,500
Okay, so now, we just have to fix these little printout routines that

577
00:31:42,500 --> 00:31:45,100
were kind of old, print out routines were playing with, guess they

578
00:31:45,100 --> 00:31:46,600
might as well leave them in working order.

579
00:31:47,500 --> 00:31:52,400
Okay, so now in theory anyway, we are actually recording these, and it

580
00:31:52,400 --> 00:31:55,000
does look like that's true because you can see we hit an assertion in

581
00:31:55,000 --> 00:31:55,400
here.

582
00:31:56,000 --> 00:31:59,000
When we're doing our debug collation, you can actually see that we get

583
00:31:59,000 --> 00:32:00,500
to the point where

584
00:32:00,700 --> 00:32:03,300
We have collated the frame and we're like, oh, hey wait.

585
00:32:06,800 --> 00:32:08,200
you know, we actually got to a

586
00:32:09,900 --> 00:32:11,500
sort of a situation here, right?

587
00:32:11,800 --> 00:32:13,600
We got to a we got to a

588
00:32:15,600 --> 00:32:16,400
Type of event.

589
00:32:16,400 --> 00:32:18,800
We didn't recognize, we don't know what it is.

590
00:32:19,700 --> 00:32:26,800
So you know, looking at this, I feel like what we could do is much

591
00:32:26,800 --> 00:32:29,400
exactly like the way we collated are other debug records.

592
00:32:29,700 --> 00:32:34,000
We can now collate, these ones that are coming from the

593
00:32:35,800 --> 00:32:38,700
Like these debug records that are coming from the game.

594
00:32:39,100 --> 00:32:43,400
We could reassemble them back into a structured piece of data that

595
00:32:43,400 --> 00:32:47,100
could be walked by by the engine right?

596
00:32:48,100 --> 00:32:51,100
At least it seems like that would be a reasonable thing to do.

597
00:32:52,100 --> 00:32:57,300
So yeah again if we want to we should be able to build you know some

598
00:32:57,300 --> 00:32:59,800
kind of like a an introspective of

599
00:33:00,900 --> 00:33:06,400
Basically just build the actual struct set that we were doing before

600
00:33:06,600 --> 00:33:08,700
we should be able to build that from the Coalition data.

601
00:33:08,900 --> 00:33:13,500
So the way that we have these sort of debug variables and stuff the

602
00:33:13,500 --> 00:33:16,600
way that we were building them in here where we sort of have

603
00:33:19,200 --> 00:33:25,100
like, yeah, like if you just look at this sort of variables,

604
00:33:26,600 --> 00:33:29,600
the way that we were doing this stuff, we should be able to

605
00:33:29,600 --> 00:33:31,200
essentially build one of these.

606
00:33:31,200 --> 00:33:36,800
I would think up from the, you know, from from the sort of parse that

607
00:33:36,800 --> 00:33:37,400
we get.

608
00:33:38,000 --> 00:33:39,800
So as we're kind of coming through here

609
00:33:41,900 --> 00:33:45,400
When I see these various values, I'm going to go ahead and try just

610
00:33:45,700 --> 00:33:49,200
building one of these variable groups and seeing what happens.

611
00:33:49,600 --> 00:33:54,600
Now, there is a sort of caveat there, which is again, there's really

612
00:33:54,600 --> 00:33:59,400
not a lot of with one of the things that, that we sort of set

613
00:33:59,400 --> 00:34:00,500
ourselves up for success for our.

614
00:34:00,500 --> 00:34:04,700
But we haven't actually dealt with yet is, if you remember debug

615
00:34:04,700 --> 00:34:09,400
values and debug things, they have this concept of an ID, right?

616
00:34:09,400 --> 00:34:10,900
So we've got these like, debug variable

617
00:34:11,100 --> 00:34:14,900
Thanks and the debug variable links were things that had, like, sort

618
00:34:14,900 --> 00:34:17,400
of these, these IDs, you could build from them, right?

619
00:34:17,400 --> 00:34:20,500
So when you were iterating over something, there is this notion of

620
00:34:20,500 --> 00:34:21,400
like an ID there.

621
00:34:21,400 --> 00:34:24,100
And the ID was something you could use to tell like which one you were

622
00:34:24,100 --> 00:34:25,900
looking at and stuff like this, right?

623
00:34:27,000 --> 00:34:30,100
And this is sort of the part that like I said, is like kind of really

624
00:34:30,100 --> 00:34:32,100
subtle and going to be difficult.

625
00:34:32,199 --> 00:34:37,000
Because if we are taking data every frame from the app and sort of

626
00:34:37,199 --> 00:34:38,500
reprocessing it, right?

627
00:34:38,500 --> 00:34:40,699
Like it's getting captured as part of the run of the

628
00:34:41,000 --> 00:34:41,100
App.

629
00:34:41,100 --> 00:34:44,600
So it has no permanent address ability in that sense.

630
00:34:45,800 --> 00:34:49,199
We're going to need a way to know how to talk about that piece of

631
00:34:49,199 --> 00:34:52,900
information in order for it to work with the rest of our debug UI,

632
00:34:52,900 --> 00:34:56,600
because our debug UI needs a way to know that something exists from

633
00:34:56,600 --> 00:34:58,300
frame to frame, right?

634
00:34:59,100 --> 00:35:01,500
And since this is the thing that's going to tie early ethereal, we

635
00:35:01,500 --> 00:35:03,800
need to make up ways to have that happen.

636
00:35:07,100 --> 00:35:11,200
And, like I said, we sort of set ourselves up for success by starting

637
00:35:11,200 --> 00:35:13,500
down the road of having this debug ID concept.

638
00:35:14,100 --> 00:35:18,400
So, it will, I think be very plausible for us to figure out a good way

639
00:35:19,400 --> 00:35:23,300
that we can use that to enforce exactly.

640
00:35:23,300 --> 00:35:24,100
Something like that.

641
00:35:24,100 --> 00:35:24,900
Exactly.

642
00:35:24,900 --> 00:35:30,300
A sort of stationary ID system that will allow us to sort of fetch

643
00:35:30,300 --> 00:35:32,400
those things back, but it's going to again, be a little bit

644
00:35:32,400 --> 00:35:33,200
complicated.

645
00:35:34,300 --> 00:35:35,100
so anyway,

646
00:35:38,000 --> 00:35:40,100
let me see, where was I?

647
00:35:41,300 --> 00:35:44,600
So, what I want to do here is I want to start to build up a thing that

648
00:35:44,600 --> 00:35:49,000
can actually be output as necessary from these things, when we get,

649
00:35:49,000 --> 00:35:50,600
you know, basically that assertion that we got.

650
00:35:50,600 --> 00:35:54,800
So, when we hit the assertion, when we're inside collate, debug

651
00:35:54,800 --> 00:35:58,200
records, I want to be able to start collating data records.

652
00:35:58,200 --> 00:35:59,800
In addition to these other

653
00:36:00,000 --> 00:36:01,900
Lots of records that we have, right?

654
00:36:01,900 --> 00:36:05,400
You can see we've got like, collation frame, and collation and block

655
00:36:05,400 --> 00:36:07,300
and those sorts of things are happening.

656
00:36:08,200 --> 00:36:11,700
I would like to, I would like to have something that was going to

657
00:36:11,700 --> 00:36:15,300
capture the other kinds so we've got begin.

658
00:36:15,300 --> 00:36:16,600
Where do we have event?

659
00:36:16,600 --> 00:36:21,500
Type equals event frame marker, then we've got Collision frame

660
00:36:22,100 --> 00:36:24,900
assuming that we're on a frame we've got begin block and end block.

661
00:36:25,100 --> 00:36:29,000
And so I think what I'll probably do is sort of move that out into

662
00:36:29,600 --> 00:36:29,900
sort of

663
00:36:30,000 --> 00:36:33,500
A more complete concept and maybe, you know, I could leave even these

664
00:36:33,500 --> 00:36:36,900
the same as they are at the moment and then assume that like, this is

665
00:36:36,900 --> 00:36:41,200
the thing that handles, maybe all of the all of the other ones here,

666
00:36:41,200 --> 00:36:42,900
although like, you know, I could just do this.

667
00:36:43,200 --> 00:36:44,400
I could just do this right here.

668
00:36:44,400 --> 00:36:47,700
There really isn't much reason not to, I suppose, if I switch on the

669
00:36:47,700 --> 00:36:48,500
event type,

670
00:36:51,100 --> 00:36:53,700
I could just say that here is begin.

671
00:36:53,700 --> 00:36:54,200
Block.

672
00:36:55,300 --> 00:36:55,900
Like so.

673
00:36:58,500 --> 00:36:59,500
Here's end block.

674
00:37:12,100 --> 00:37:15,100
and that is,

675
00:37:16,600 --> 00:37:18,100
All we would need to do for that.

676
00:37:18,800 --> 00:37:20,900
Then we would have our default case here.

677
00:37:26,900 --> 00:37:29,500
And I think that should just do exactly the same thing of it as it

678
00:37:29,500 --> 00:37:29,900
did.

679
00:37:29,900 --> 00:37:30,100
Right.

680
00:37:30,100 --> 00:37:32,400
That should just immediately say, hey I got an event.

681
00:37:32,400 --> 00:37:33,600
We don't want don't understand.

682
00:37:33,800 --> 00:37:37,300
And so then from there, we can sort of put in all of those other cases

683
00:37:37,300 --> 00:37:41,500
where we were trying to Output some things like these guys, right?

684
00:37:42,200 --> 00:37:45,000
And so in here, I'm going to go ahead and say, all right, we've got,

685
00:37:45,000 --> 00:37:49,200
you know, all these different cases that we want to handle where we're

686
00:37:49,200 --> 00:37:49,400
going to.

687
00:37:49,400 --> 00:37:52,600
Basically just shuttle data back and forth, like so,

688
00:38:03,000 --> 00:38:07,600
And so now if I just go ahead and let this not do anything, then we

689
00:38:07,600 --> 00:38:11,300
should just consume the debug events Pharmacy, nothing will actually

690
00:38:11,300 --> 00:38:12,100
happen with them.

691
00:38:13,000 --> 00:38:14,400
But you know, everything still works.

692
00:38:14,400 --> 00:38:14,800
Okay?

693
00:38:15,000 --> 00:38:18,400
And presumably, we are still able to view like the the function

694
00:38:18,400 --> 00:38:19,800
profiles and things like this.

695
00:38:20,400 --> 00:38:22,800
So we know that all the rest of the debug events are still getting

696
00:38:22,800 --> 00:38:24,900
collated exactly as we would expect them to.

697
00:38:25,300 --> 00:38:26,700
So, that's all good news as well.

698
00:38:27,400 --> 00:38:30,000
But now, once we get to these, we can start to actually use them for

699
00:38:30,000 --> 00:38:32,200
something and of course, in our collation,

700
00:38:32,800 --> 00:38:35,700
Know that we, you know, as we were sort of doing that, that collation

701
00:38:35,700 --> 00:38:37,100
process as we sweep through it.

702
00:38:39,600 --> 00:38:43,500
We have this sort of notion of like open block and close block and

703
00:38:43,500 --> 00:38:44,600
that sort of stuff, right?

704
00:38:44,900 --> 00:38:48,900
We can kind of Leverage that because we have, like, all of these

705
00:38:48,900 --> 00:38:51,800
Notions of, like, what the threat is, and all that stuff, right?

706
00:38:52,400 --> 00:38:56,600
So when we're in here, we already know which thread we're talking

707
00:38:56,600 --> 00:38:57,100
about.

708
00:38:57,600 --> 00:38:59,800
So inside that debug thread that

709
00:39:00,000 --> 00:39:01,300
Debug thread information.

710
00:39:01,500 --> 00:39:05,600
We can have sort of this notion of things that are being built up,

711
00:39:05,600 --> 00:39:06,200
right?

712
00:39:09,200 --> 00:39:12,800
We can have a notion of data that is being captured.

713
00:39:13,900 --> 00:39:16,900
And so if we look at this, debug variable stuff, as that we have here,

714
00:39:17,400 --> 00:39:20,300
really what we could imagine, is saying that per thread, we could just

715
00:39:20,300 --> 00:39:24,200
have something like this, where all the stuff we were doing before to

716
00:39:24,200 --> 00:39:28,100
build up debug variables will actually could just do that exact

717
00:39:28,100 --> 00:39:33,500
process over time using our debug collation, right?

718
00:39:33,900 --> 00:39:37,500
And again, this because this would be sort of a rolling buffer sort of

719
00:39:37,500 --> 00:39:37,900
thing,

720
00:39:38,100 --> 00:39:42,200
Would mean also that in theory, you know, things could even cross a

721
00:39:42,200 --> 00:39:45,100
frame boundary and presumably they would they would still actually

722
00:39:45,100 --> 00:39:46,200
work, right?

723
00:39:49,900 --> 00:39:50,500
In theory.

724
00:39:53,200 --> 00:39:58,500
Okay, so if we take that and sort of move a little bit forward with

725
00:39:58,500 --> 00:40:01,600
it, so, Okay, so we've got one of these things and we want to start

726
00:40:01,600 --> 00:40:04,300
making like, you know, sort of a stack sort of a situation.

727
00:40:04,500 --> 00:40:07,500
In fact, you can almost imagine the open block thing is almost.

728
00:40:07,500 --> 00:40:10,100
We're almost doing exactly the same thing here, right?

729
00:40:10,200 --> 00:40:10,700
We're doing a thing.

730
00:40:10,700 --> 00:40:12,600
Where we kind of, we open something up.

731
00:40:12,700 --> 00:40:15,200
We put data into it, we close it, right.

732
00:40:15,200 --> 00:40:18,000
And that may open in a nested fashion, if we want to have like

733
00:40:18,000 --> 00:40:20,300
hierarchical data, that happens in there.

734
00:40:22,000 --> 00:40:23,800
That wouldn't Theory just kind of work, right?

735
00:40:23,800 --> 00:40:26,000
At least we hope it would, who knows?

736
00:40:26,900 --> 00:40:27,300
Okay.

737
00:40:28,000 --> 00:40:29,600
So if we want to do something like that,

738
00:40:31,900 --> 00:40:34,500
We're probably going to need at least a couple of the things here.

739
00:40:34,600 --> 00:40:36,500
We're going to need something like debug event.

740
00:40:37,200 --> 00:40:41,200
You know, open data block or something like this, right?

741
00:40:42,100 --> 00:40:45,500
And debug event, blows data block.

742
00:40:47,400 --> 00:40:51,100
Right, so we can Factor the same way that we've got these like begin

743
00:40:51,100 --> 00:40:52,600
block, end block things here.

744
00:40:53,000 --> 00:40:55,900
We would also have the ability to like open and close data blocks,

745
00:40:55,900 --> 00:40:57,900
which are not the same thing, right?

746
00:40:58,000 --> 00:41:02,000
They have nothing to do with performance or timing things.

747
00:41:02,000 --> 00:41:06,500
They're just like, sort of opening up data region, writing stuff to it

748
00:41:06,500 --> 00:41:09,700
and then, you know, closing it out again, right?

749
00:41:17,000 --> 00:41:18,000
And I'm trying to think.

750
00:41:21,400 --> 00:41:24,100
I guess this seems like the most reasonable way to do it.

751
00:41:26,300 --> 00:41:30,700
Yeah, so when we're doing this stuff when we have open data block and

752
00:41:30,700 --> 00:41:31,700
close data block,

753
00:41:33,000 --> 00:41:36,500
It's pretty much going to be something like, you know, open, debug

754
00:41:36,500 --> 00:41:38,000
data block is going to be the sort of thing.

755
00:41:38,300 --> 00:41:44,300
I don't know why we care about starting frame index necessarily, or if

756
00:41:44,300 --> 00:41:46,900
we care about sorting framing next, we probably don't because it

757
00:41:46,900 --> 00:41:51,100
doesn't really have anything to do with timing, but we may need that

758
00:41:51,100 --> 00:41:51,800
for other reasons.

759
00:41:51,800 --> 00:41:54,100
I guess it does come from a debug record.

760
00:41:54,100 --> 00:41:54,800
That's true.

761
00:41:55,000 --> 00:41:59,000
It does have an opening event, and presumably it would be change

762
00:41:59,000 --> 00:41:59,800
exactly as these

763
00:42:00,300 --> 00:42:03,700
So it would look probably exactly like one of these things.

764
00:42:03,700 --> 00:42:07,200
The only difference is that in addition to this, this stuff, it would

765
00:42:07,200 --> 00:42:10,100
have some kind of another pointer kind of on it, right?

766
00:42:10,600 --> 00:42:13,400
And so it makes me think that probably we would just want to reuse

767
00:42:13,400 --> 00:42:15,500
that code as necessary.

768
00:42:15,700 --> 00:42:18,900
So we would have something like, okay, we've got, you know, first

769
00:42:18,900 --> 00:42:22,100
open, you know, code block and first open data block or something like

770
00:42:22,100 --> 00:42:22,600
that.

771
00:42:24,100 --> 00:42:30,300
So you can imagine saying, like this sort of a thing perhaps, and then

772
00:42:30,300 --> 00:42:33,900
forcing this stuff to kind of understand both of them.

773
00:42:33,900 --> 00:42:38,800
So, if we have first open block here, I got first open code block.

774
00:42:38,800 --> 00:42:41,900
And first open data, block this stuff.

775
00:42:41,900 --> 00:42:43,900
Would all be first open code block.

776
00:42:45,300 --> 00:42:46,300
Keep on going.

777
00:42:46,700 --> 00:42:49,600
First Oak, been towed block?

778
00:42:52,500 --> 00:42:53,200
Yeah,

779
00:42:53,400 --> 00:42:55,000
See what else we got here.

780
00:42:55,500 --> 00:42:56,300
Where is my cursor?

781
00:42:56,300 --> 00:42:56,900
There it is.

782
00:42:58,000 --> 00:43:00,000
This would also be first at the code block.

783
00:43:02,200 --> 00:43:03,300
Let's see.

784
00:43:03,300 --> 00:43:06,600
First open code block.

785
00:43:08,200 --> 00:43:15,600
First urban code block, first open code, block first, open coat.

786
00:43:23,200 --> 00:43:24,300
That's actually it.

787
00:43:24,300 --> 00:43:25,900
So these just need to get put on there.

788
00:43:26,700 --> 00:43:31,300
So if I, if I take a look at him a platform that H, right?

789
00:43:31,300 --> 00:43:33,700
We just need these two different events.

790
00:43:36,100 --> 00:43:39,400
But we have now and we can also even write this in there because I

791
00:43:39,400 --> 00:43:40,800
believe we actually have.

792
00:43:41,400 --> 00:43:41,700
Yeah.

793
00:43:41,700 --> 00:43:45,800
So, you know, inside handmade debug I'm sorry inside.

794
00:43:45,800 --> 00:43:48,300
Handmade dot CPP where we're doing this.

795
00:43:48,400 --> 00:43:51,000
I'm going to change this just for a moment.

796
00:43:51,000 --> 00:43:53,800
I'm going to actually make it so it's more like this where it's like,

797
00:43:53,800 --> 00:43:54,500
handmade

798
00:43:56,200 --> 00:44:00,900
You know, it's like it's like debug data block or begin datablock,

799
00:44:01,300 --> 00:44:02,100
something like that.

800
00:44:02,900 --> 00:44:06,000
And then this will be like, debug and data block.

801
00:44:10,700 --> 00:44:16,200
And that's just sort of, you know, that's, that's something that we

802
00:44:16,200 --> 00:44:20,800
could rap in one of those like, little, like, utility classes

803
00:44:20,800 --> 00:44:21,900
eventually as well.

804
00:44:22,500 --> 00:44:23,100
And

805
00:44:24,800 --> 00:44:29,600
Yeah, so I think I think that should probably do it so if we did it,

806
00:44:29,600 --> 00:44:33,200
that way, if I go ahead and put these guys in there, if we do begin

807
00:44:33,200 --> 00:44:36,300
data, block this way again this would be just sort of a very

808
00:44:36,300 --> 00:44:37,800
straightforward thing.

809
00:44:37,800 --> 00:44:40,800
I'm going to eat the parameter for now, but it would do exactly the

810
00:44:40,800 --> 00:44:46,200
same thing as say this, this function does is as the values do.

811
00:44:46,500 --> 00:44:51,500
But instead of this stuff you know please don't really have any useful

812
00:44:51,500 --> 00:44:52,400
names I suppose.

813
00:44:56,800 --> 00:44:59,800
I guess we could give that a name of whatever the

814
00:45:00,000 --> 00:45:01,900
For amateur was here.

815
00:45:06,500 --> 00:45:12,100
Yeah, we could you know, we could say something like like

816
00:45:14,400 --> 00:45:15,200
Valley.

817
00:45:15,200 --> 00:45:18,900
I don't even know, but we could, for example, string eyes, whatever

818
00:45:18,900 --> 00:45:19,800
they point.

819
00:45:19,800 --> 00:45:21,900
So, you know, if this is entity then it's entity.

820
00:45:21,900 --> 00:45:25,300
We could also do something where we pass two things here.

821
00:45:25,500 --> 00:45:28,900
So you know we get a pointer that we might use for something but we

822
00:45:28,900 --> 00:45:32,500
also have a name which is like you know hot entity or something like

823
00:45:32,500 --> 00:45:33,000
that.

824
00:45:33,300 --> 00:45:36,900
So we actually have a name and a value to go with it and we store the

825
00:45:36,900 --> 00:45:39,000
name here and we do something with the value.

826
00:45:40,300 --> 00:45:41,300
A little later on.

827
00:45:41,800 --> 00:45:45,000
So instead of having to do a function to crack this, obviously we

828
00:45:45,000 --> 00:45:48,100
would not have to because we know exactly that it's always adjust a

829
00:45:48,100 --> 00:45:49,200
data block opener.

830
00:45:49,700 --> 00:45:52,300
And that's pretty straightforward thing that we would do.

831
00:45:58,900 --> 00:46:01,600
And so in here, when we're taking a look at this stuff, like with

832
00:46:01,600 --> 00:46:06,100
event type, we know that this is going to just be open data block.

833
00:46:08,100 --> 00:46:10,100
in fact, I guess I don't even have to set the type because I can now

834
00:46:10,100 --> 00:46:12,900
use that function properly, like so,

835
00:46:14,400 --> 00:46:17,500
And when were recording the value here, you know, probably what we

836
00:46:17,500 --> 00:46:22,800
would do is record like pointer, you know, rptr, 0 equals, whatever

837
00:46:22,800 --> 00:46:23,900
the that that is.

838
00:46:23,900 --> 00:46:26,500
So you know, it's a way of kind of getting that that piece of

839
00:46:26,500 --> 00:46:31,500
information there and maybe we would do something like porno 0.01 and

840
00:46:31,500 --> 00:46:34,600
those would be stored so that you kind of get like basically a debug

841
00:46:34,600 --> 00:46:36,400
ID out of it potentially, right.

842
00:46:36,600 --> 00:46:40,500
So you can imagine saying like oh yeah so what this thing is

843
00:46:42,800 --> 00:46:47,600
You know, we want some kind of a stable addressing thing for it that

844
00:46:47,600 --> 00:46:53,100
we could use a little more reliably and so you know maybe we we've got

845
00:46:53,100 --> 00:46:55,400
if we take a look inside handmade at H.

846
00:46:55,400 --> 00:47:00,500
I feel like we have ways of accessing a low entity, right?

847
00:47:00,500 --> 00:47:04,400
Low entities have an actual index, so we could pass something like,

848
00:47:04,400 --> 00:47:11,100
whatever that low entity index actually is, which we should be able to

849
00:47:11,100 --> 00:47:12,000
get from in here.

850
00:47:13,600 --> 00:47:14,600
Let's take a look.

851
00:47:14,800 --> 00:47:15,900
Let's take a look.

852
00:47:16,000 --> 00:47:16,900
So here we are.

853
00:47:16,900 --> 00:47:19,000
Looping over RC amenities, right?

854
00:47:19,600 --> 00:47:23,500
And if we look inside the same region thing, we've got same entity.

855
00:47:24,300 --> 00:47:27,500
And I assuming the storage index, there is the guy that we actually

856
00:47:27,500 --> 00:47:28,900
need to know, right?

857
00:47:30,600 --> 00:47:34,900
If we take a look at what storage and X actually does in Dubai storage

858
00:47:34,900 --> 00:47:35,500
index.

859
00:47:36,800 --> 00:47:41,700
Due to do get Hashem storage index, blah, blah, blah, blah.

860
00:47:42,900 --> 00:47:44,700
Yes, yes, whatever.

861
00:47:44,700 --> 00:47:45,600
They're there we go.

862
00:47:46,100 --> 00:47:46,600
Right.

863
00:47:47,400 --> 00:47:49,800
So no still not.

864
00:47:49,800 --> 00:47:53,200
There yet adding to be storage at a new raw.

865
00:47:53,900 --> 00:47:55,600
There it is, right?

866
00:47:56,000 --> 00:47:58,400
So you can kind of see that storage index is something that's going to

867
00:47:58,400 --> 00:47:59,400
be stable over time, right?

868
00:47:59,400 --> 00:47:59,900
It's an

869
00:48:00,000 --> 00:48:01,100
That I learned these array.

870
00:48:01,900 --> 00:48:03,900
So, in theory, right?

871
00:48:03,900 --> 00:48:08,900
We could do something like that where when we in handmade STP when we

872
00:48:08,900 --> 00:48:13,700
do begin data block, we could say that that we know is a stable thing

873
00:48:13,700 --> 00:48:14,500
for it.

874
00:48:15,000 --> 00:48:18,700
And so, then all we really need to do is stay say, and in fact, I

875
00:48:18,700 --> 00:48:23,200
guess we could even do go one further and say that's the stable index

876
00:48:23,200 --> 00:48:24,900
of this thing, right?

877
00:48:25,500 --> 00:48:27,100
That's, that's like a stable pointer.

878
00:48:27,900 --> 00:48:29,600
That will be the same over time.

879
00:48:30,300 --> 00:48:34,100
And then the other question is, well, there could be multiple things

880
00:48:34,100 --> 00:48:36,900
that are going to have that piece of information associated with them.

881
00:48:37,100 --> 00:48:39,900
And so we might want to say like this is the hot entity or something.

882
00:48:39,900 --> 00:48:41,300
This is a specific thing.

883
00:48:42,000 --> 00:48:45,500
So we could give a second guy here, that is something like the hot

884
00:48:45,500 --> 00:48:49,100
entity pointer, you know, like we could introduce some kind of setec.

885
00:48:49,100 --> 00:48:52,800
Synthetic, stable thing that sort of differentiates between these two,

886
00:48:54,400 --> 00:48:57,500
So you know something like hot.

887
00:48:58,500 --> 00:49:01,200
This would just be like hot entity nub or something.

888
00:49:02,400 --> 00:49:06,500
It's a funny phrase but something like this.

889
00:49:06,500 --> 00:49:06,900
Oops.

890
00:49:14,100 --> 00:49:15,600
And all I'm doing here right is.

891
00:49:15,600 --> 00:49:19,200
I'm just making a little trick which is to say that if I wanted to

892
00:49:19,200 --> 00:49:22,800
give the data since the debug system, something to like stabili

893
00:49:22,800 --> 00:49:27,200
identify the thing that I'm talking about across frames, then I know

894
00:49:27,200 --> 00:49:30,400
that I have a stable way of referring to, which entity it is because

895
00:49:30,400 --> 00:49:33,800
every entity has a low entity that index that stable over time, that's

896
00:49:33,800 --> 00:49:35,400
where it's like stored persistently, and whatever.

897
00:49:35,400 --> 00:49:40,500
So I could use that, but that doesn't necessarily tell me what part of

898
00:49:40,500 --> 00:49:42,100
data I'm using about the entity.

899
00:49:43,900 --> 00:49:44,500
so,

900
00:49:46,000 --> 00:49:52,200
What I'm doing here is, I'm just passing some value that says, hey,

901
00:49:52,200 --> 00:49:55,200
here's an arbitrary pointer that stable but just differentiates this

902
00:49:55,500 --> 00:49:59,200
from potentially some other call right now.

903
00:49:59,200 --> 00:50:01,700
We don't really need to do that because we have that whole counter

904
00:50:01,700 --> 00:50:05,800
system and stuff and then named Hot entity is probably sufficient as

905
00:50:05,800 --> 00:50:06,200
well.

906
00:50:07,000 --> 00:50:07,200
You know.

907
00:50:07,200 --> 00:50:10,000
So in theory, do you know, do we really need to do this?

908
00:50:10,300 --> 00:50:15,300
No but you know since we got two pointers maybe we use two pointers.

909
00:50:15,300 --> 00:50:15,600
I don't know.

910
00:50:16,800 --> 00:50:21,200
But yeah, so now so we could alternatively just do that because that

911
00:50:21,500 --> 00:50:24,600
you know is based saying we don't need the second pointer even though

912
00:50:24,600 --> 00:50:27,600
our debug system allows like two pointers for an ID or something like

913
00:50:27,600 --> 00:50:28,500
that, right?

914
00:50:29,500 --> 00:50:30,100
So anyway,

915
00:50:32,600 --> 00:50:34,600
Here's our debug begin data block.

916
00:50:34,600 --> 00:50:38,200
That is really all there is to it, nothing particularly fancy,

917
00:50:38,200 --> 00:50:42,300
obviously it just does its little thing here and then when we do debug

918
00:50:42,300 --> 00:50:43,200
and data block,

919
00:50:44,800 --> 00:50:47,900
I'm going to go ahead and essentially make the exact same thing.

920
00:50:47,900 --> 00:50:52,600
Here, debug and data block is going to be the exact same thing.

921
00:50:52,600 --> 00:50:54,500
Only this time you're not going to rest the pointers because you know

922
00:50:54,500 --> 00:50:56,600
that they the debug have to end in order.

923
00:50:56,600 --> 00:50:59,800
That's just the thing will say about our data blocks.

924
00:51:00,000 --> 00:51:00,700
It's fine.

925
00:51:01,700 --> 00:51:04,000
And so it doesn't actually have to have any data.

926
00:51:04,000 --> 00:51:06,600
It's just sort of saying the block is closed, right?

927
00:51:07,400 --> 00:51:11,100
And then I think we should be mostly set there, shouldn't really be

928
00:51:11,100 --> 00:51:13,700
anything else to to bizarre about that.

929
00:51:14,100 --> 00:51:15,400
So inside.

930
00:51:15,500 --> 00:51:19,300
So this is like a vector of pointers inside here in our handmade

931
00:51:19,300 --> 00:51:20,300
platform.sh.

932
00:51:20,800 --> 00:51:24,000
We would have to add that to this, right?

933
00:51:24,000 --> 00:51:27,800
So back pointer and maybe there's just two of those I guess

934
00:51:27,800 --> 00:51:29,300
technically there could be three of those.

935
00:51:29,300 --> 00:51:29,800
That's how many

936
00:51:30,000 --> 00:51:33,700
there is space for currently but anyway,

937
00:51:35,400 --> 00:51:37,600
Debugging data block.

938
00:51:42,500 --> 00:51:43,600
That is correct, right?

939
00:51:43,700 --> 00:51:47,600
Yeah, so inside you like, we don't really need a block name for the

940
00:51:47,600 --> 00:51:50,100
end, because again, that just kind of pairs up automatically.

941
00:51:50,500 --> 00:51:53,000
So I think that's totally fine without actually having one of those

942
00:51:53,400 --> 00:51:54,300
and off we go.

943
00:51:54,800 --> 00:51:56,600
So, we also have to deal with these guys here.

944
00:51:56,600 --> 00:52:00,400
Debug begin data, block and debug ended a block.

945
00:52:00,400 --> 00:52:03,000
Those are the ones that are just kind of when we compile out, I still

946
00:52:03,000 --> 00:52:04,900
want to be able to compile everything out if necessary.

947
00:52:05,800 --> 00:52:06,200
Okay.

948
00:52:06,400 --> 00:52:07,500
So I think we're in good shape.

949
00:52:07,500 --> 00:52:10,700
Now, these guys should be ready to go and so really all we need to do

950
00:52:10,700 --> 00:52:12,100
is inside our open data,

951
00:52:12,300 --> 00:52:14,300
Closer to block collation system.

952
00:52:14,900 --> 00:52:18,300
We need to have a way to actually start recording some of that data,

953
00:52:18,800 --> 00:52:22,700
but we're just about out of time, so I'll probably stop soon and go to

954
00:52:22,700 --> 00:52:23,300
Q and A.

955
00:52:23,300 --> 00:52:26,800
I don't know that we will have time to kind of get this stuff in here.

956
00:52:29,500 --> 00:52:34,100
But what I can do since we're going to be reusing this open data block

957
00:52:34,100 --> 00:52:39,200
concept, what I can do is just sort of pull out this code that I'm

958
00:52:39,200 --> 00:52:41,000
going to need to do that with.

959
00:52:41,400 --> 00:52:44,800
So I'd have a thing like this, which is like, debug open block or

960
00:52:44,800 --> 00:52:45,600
whatever it is.

961
00:52:46,300 --> 00:52:48,000
Let me just let me just grab it right here.

962
00:52:49,800 --> 00:52:50,400
This thing.

963
00:52:58,200 --> 00:53:00,200
So if I have an open debug block,

964
00:53:02,900 --> 00:53:05,600
This is the thing that would like get me the the next one.

965
00:53:05,600 --> 00:53:13,700
So like, you know, allocate open debug block, something like this.

966
00:53:14,500 --> 00:53:17,800
And what this would do is it would just say, okay, from the debug

967
00:53:17,800 --> 00:53:18,400
state

968
00:53:20,900 --> 00:53:24,100
If you need to go ahead and get a new debug block, you just pass the

969
00:53:24,100 --> 00:53:25,200
debug state in it.

970
00:53:25,200 --> 00:53:26,400
Will look for the first three block.

971
00:53:26,400 --> 00:53:29,200
It'll see if it can get it, if it can, it will use it.

972
00:53:29,200 --> 00:53:35,000
If it can't, then it will just go ahead and make a new one out of that

973
00:53:35,000 --> 00:53:37,200
collation space, right?

974
00:53:40,600 --> 00:53:41,800
So that's really it.

975
00:53:42,100 --> 00:53:45,100
Oops, that's debug State result.

976
00:53:45,100 --> 00:53:49,200
We go so something like that, right?

977
00:53:49,800 --> 00:53:54,700
And if I then go in here, and just replace that where we were doing

978
00:53:54,700 --> 00:53:58,800
that previously, like this stuff right here, I can just have this with

979
00:53:58,800 --> 00:53:59,800
allocate debug block.

980
00:54:00,600 --> 00:54:01,900
Rocket open Diva block.

981
00:54:06,200 --> 00:54:10,000
That get ripped gets rid of all of that code that will would have been

982
00:54:10,000 --> 00:54:10,800
duplicated.

983
00:54:10,800 --> 00:54:12,200
Because I'm about to have to do that.

984
00:54:12,200 --> 00:54:17,800
Exact same thing for my, you know, my other open and open and close

985
00:54:17,800 --> 00:54:18,300
block.

986
00:54:18,800 --> 00:54:24,700
So, in here, when we do the first first open code block debug State

987
00:54:24,700 --> 00:54:25,700
forestry block thing.

988
00:54:25,900 --> 00:54:28,200
So this right here, you can see the first free Block.

989
00:54:28,700 --> 00:54:32,000
First open code block, this is also that same for thing.

990
00:54:32,200 --> 00:54:35,700
This puts the thing back on the free list, right?

991
00:54:36,100 --> 00:54:37,700
so, this is essentially like a

992
00:54:46,000 --> 00:54:50,000
This part right here is essentially the deallocate one, right?

993
00:54:50,400 --> 00:54:54,300
So I could have the exact same thing deallocate open debug block,

994
00:54:54,900 --> 00:54:56,300
here's the debug state.

995
00:54:59,600 --> 00:55:03,600
And if you take a look at how this code works again really, really

996
00:55:03,600 --> 00:55:04,200
simple.

997
00:55:04,800 --> 00:55:08,100
We're just saying, whatever the the block is, that we're trying to

998
00:55:08,100 --> 00:55:10,600
free, it's going to be whatever.

999
00:55:10,600 --> 00:55:11,600
The first three block was.

1000
00:55:11,600 --> 00:55:14,300
And then the first few block itself is going to become the pointer to

1001
00:55:14,300 --> 00:55:15,600
that block right?

1002
00:55:21,000 --> 00:55:21,700
It's open.

1003
00:55:24,000 --> 00:55:24,600
Right?

1004
00:55:25,200 --> 00:55:30,100
So if I go ahead and do the deallocation here, I replace that piece of

1005
00:55:30,100 --> 00:55:30,700
code.

1006
00:55:32,100 --> 00:55:33,200
With a known thing.

1007
00:55:33,200 --> 00:55:35,900
And again, that's really just me being proactive because I know I need

1008
00:55:35,900 --> 00:55:36,500
to do it.

1009
00:55:36,800 --> 00:55:38,200
So I'm just going to do it.

1010
00:55:38,300 --> 00:55:41,100
I would have had to write the exact same code for these guys so I

1011
00:55:41,100 --> 00:55:42,600
don't want to write the same code twice.

1012
00:55:43,400 --> 00:55:43,900
There you go.

1013
00:55:45,100 --> 00:55:49,700
So all I would do is say, hey thread first open code block is the

1014
00:55:49,700 --> 00:55:52,900
block that needs to get freed and we're done, right?

1015
00:55:55,100 --> 00:55:56,700
That's a pointer.

1016
00:55:56,800 --> 00:55:57,400
There we go.

1017
00:55:59,000 --> 00:55:59,900
And off again.

1018
00:56:00,700 --> 00:56:03,200
So again, no change here.

1019
00:56:03,200 --> 00:56:07,700
Now, it should be exactly the same as it was previously, let's just

1020
00:56:07,700 --> 00:56:09,200
make sure of that, and there it is.

1021
00:56:09,200 --> 00:56:10,200
So that's all good.

1022
00:56:11,300 --> 00:56:12,500
So yeah.

1023
00:56:12,500 --> 00:56:15,400
So I think we're all fancy now.

1024
00:56:20,900 --> 00:56:26,800
Okay, so I'll go ahead and go to the Q&A here, case, anyone has any

1025
00:56:26,800 --> 00:56:28,000
questions about what we did again?

1026
00:56:28,000 --> 00:56:30,600
We're kind of just like getting prepared to capture all that data,

1027
00:56:30,600 --> 00:56:36,000
which will try to do tomorrow again from the debug log and then we'll

1028
00:56:36,000 --> 00:56:36,700
kind of go from there.

1029
00:56:37,600 --> 00:56:40,200
I'm going to take off the old wrist guards.

1030
00:56:58,500 --> 00:56:59,800
All right, let's see.

1031
00:57:00,600 --> 00:57:03,700
Could you explain how this code works?

1032
00:57:06,200 --> 00:57:08,300
It's fast inverse square, root.

1033
00:57:08,600 --> 00:57:11,100
I still have no clue how it works.

1034
00:57:14,800 --> 00:57:15,900
Let's see.

1035
00:57:24,400 --> 00:57:25,400
Float Q.

1036
00:57:25,400 --> 00:57:27,000
Reciprocal square root.

1037
00:57:28,600 --> 00:57:31,400
3/2 x 2.

1038
00:57:31,400 --> 00:57:34,600
Number equals 0.05, y equals number.

1039
00:57:34,700 --> 00:57:41,800
I EcoStar along evil floating-point bit level hacking Books.

1040
00:57:41,800 --> 00:57:42,800
Five, seven, three, seven.

1041
00:57:42,800 --> 00:57:44,500
Five nine TF minus.

1042
00:57:44,500 --> 00:57:46,600
I Square Root Down /.

1043
00:57:46,600 --> 00:57:48,800
That's okay.

1044
00:57:54,200 --> 00:57:59,000
Okay, I guess what I would say about that is no, I probably can't at

1045
00:57:59,000 --> 00:58:01,200
least not right off the top of my head.

1046
00:58:02,200 --> 00:58:05,100
I can sort of give you a clue as to what it's doing.

1047
00:58:07,800 --> 00:58:12,300
You know, there's some pretty standard techniques for this sort of

1048
00:58:12,300 --> 00:58:16,700
thing, and it looks like it's using at least two of them in here.

1049
00:58:17,600 --> 00:58:21,800
So, basically, when you compute things, and we'll see a little bit of

1050
00:58:21,800 --> 00:58:27,000
this later on handmade hero when you compute things, in a compute, in

1051
00:58:27,000 --> 00:58:32,300
a computer that are complicated, such as square, root, sine, cosine,

1052
00:58:32,300 --> 00:58:37,100
tangent, whatever, you know, transcendental functions, and things of

1053
00:58:37,100 --> 00:58:37,500
this nature.

1054
00:58:37,600 --> 00:58:43,500
Are typically what you do is the way you compute them is, you use,

1055
00:58:43,500 --> 00:58:47,000
like series expansions in one case, right?

1056
00:58:47,000 --> 00:58:49,700
So you have like things like Taylor series or you know, series

1057
00:58:49,700 --> 00:58:55,100
expansions that are series that will converge to the answer.

1058
00:58:55,200 --> 00:58:58,100
So you'd make like a series, you know, like the old-school kind that

1059
00:58:58,100 --> 00:59:01,200
you did in high school or whatever you'll do like a series expansion

1060
00:59:01,600 --> 00:59:05,900
where the series creates the mathematical function that you were

1061
00:59:05,900 --> 00:59:07,500
interested in to a certain level.

1062
00:59:07,600 --> 00:59:10,900
Level of precision based on how many terms of the series you some.

1063
00:59:11,800 --> 00:59:15,900
And then you actually just do some number of those in the series and

1064
00:59:15,900 --> 00:59:16,900
compute it, right?

1065
00:59:18,500 --> 00:59:22,600
Another thing you do is you do what's called route-finding by say

1066
00:59:22,600 --> 00:59:29,000
newton-raphson or things like this, which are techniques where if you

1067
00:59:29,000 --> 00:59:33,900
have a function and it's derivative or multiple derivatives depending

1068
00:59:33,900 --> 00:59:39,000
on the circumstance, you can start out with a guess that you think is

1069
00:59:39,000 --> 00:59:40,700
close to the answer you want.

1070
00:59:40,900 --> 00:59:45,300
And then you can run this to refine the answer to get it much closer

1071
00:59:45,300 --> 00:59:46,600
to what you wanted, right?

1072
00:59:47,700 --> 00:59:51,800
And so what I see happening at the end there and I have to go, like I

1073
00:59:51,800 --> 00:59:54,400
said, I'd have to work it all out myself to really know what it's

1074
00:59:54,400 --> 00:59:58,100
doing but what you see at the end there is just some kind of

1075
00:59:58,100 --> 00:59:59,800
refinement like a newton-raphson iteration.

1076
01:00:00,000 --> 01:00:01,300
InStep or something like this.

1077
01:00:02,000 --> 01:00:03,800
It's an iterative refinement.

1078
01:00:04,700 --> 01:00:07,800
Where you're taking a guess and you're moving it closer to the actual

1079
01:00:07,800 --> 01:00:09,300
solution, right?

1080
01:00:10,400 --> 01:00:11,500
And that's very, very common.

1081
01:00:11,500 --> 01:00:13,900
In floating Point function.

1082
01:00:13,900 --> 01:00:18,500
Computations if I've given, if you really care about this sort of

1083
01:00:18,500 --> 01:00:23,800
thing, I've said this many times on earlier parts of the stream, what

1084
01:00:23,800 --> 01:00:25,500
you want to do is read this guy's books.

1085
01:00:26,500 --> 01:00:32,600
They're extremely, extremely good and I don't know if maybe there's

1086
01:00:32,600 --> 01:00:34,300
like a good

1087
01:00:37,600 --> 01:00:38,300
Oh man.

1088
01:00:42,500 --> 01:00:45,700
I don't like being reminded that form enactment is dead from an actin

1089
01:00:45,700 --> 01:00:46,200
is dead.

1090
01:00:47,100 --> 01:00:47,400
All right?

1091
01:00:47,400 --> 01:00:47,900
Anyway,

1092
01:00:50,800 --> 01:00:51,600
We do it for now.

1093
01:00:52,000 --> 01:00:56,100
If you look up his books they are all about how to construct routines

1094
01:00:56,100 --> 01:00:59,500
that are doing these sorts of things using series is and refinements

1095
01:00:59,500 --> 01:01:02,800
and stuff and he kind of walks you through it.

1096
01:01:02,800 --> 01:01:08,500
In fact it's it's I don't want to call it the handmade hero of real

1097
01:01:08,800 --> 01:01:12,400
math Computing because I feel like his stuff is a lot stronger than

1098
01:01:13,100 --> 01:01:16,600
than mine certainly so that might be a bit of an insult to Foreman but

1099
01:01:16,600 --> 01:01:20,400
point being his mental state is very similar to ours.

1100
01:01:20,600 --> 01:01:24,900
Sense that people do all this kind of crazy math formalism and stuff

1101
01:01:24,900 --> 01:01:29,100
and it's a disaster and he goes and looks at the actual practical way

1102
01:01:29,100 --> 01:01:32,800
that the math works like really underneath and goes, this is how we

1103
01:01:32,800 --> 01:01:34,100
would actually compute this thing.

1104
01:01:36,300 --> 01:01:38,800
And so if you like handmade hero and you like math, you will love

1105
01:01:38,800 --> 01:01:39,400
these books.

1106
01:01:39,800 --> 01:01:42,700
They are very good and they talk about those sorts of things.

1107
01:01:42,700 --> 01:01:45,700
So if you really want to know more about that, kind of, that part,

1108
01:01:46,000 --> 01:01:47,400
that's what he would talk about in here.

1109
01:01:47,400 --> 01:01:50,400
Now, this the first part of this function is not really something.

1110
01:01:50,500 --> 01:01:53,700
Thing that firm and acting probably would talk about very much the

1111
01:01:53,700 --> 01:01:57,600
first part of this function where they're can wear their casting the

1112
01:01:57,600 --> 01:02:03,700
flute to a long and then using a magic value to deal with stuff,

1113
01:02:03,900 --> 01:02:04,700
right?

1114
01:02:05,100 --> 01:02:06,200
What's happening there?

1115
01:02:10,700 --> 01:02:14,000
Is floating Point numbers like any other number.

1116
01:02:16,500 --> 01:02:20,400
He's just a collection of bits and the bits are in a known layout,

1117
01:02:20,400 --> 01:02:20,600
right?

1118
01:02:20,600 --> 01:02:25,200
There's a sign bit at the top, there's a exponent, and there's a then,

1119
01:02:25,200 --> 01:02:26,900
there's a mantissa, right?

1120
01:02:28,000 --> 01:02:31,000
And the sign bit says, whether it's positive or negative, the exponent

1121
01:02:31,000 --> 01:02:33,900
says that the scale is in the mantissa, says, what the actual value

1122
01:02:33,900 --> 01:02:34,400
is.

1123
01:02:35,200 --> 01:02:37,900
You know, it can imagine like scientific notation, right?

1124
01:02:37,900 --> 01:02:42,300
It's the part where you've got like something, you know, 1.2 39,

1125
01:02:42,300 --> 01:02:43,200
whatever, blah, e.e.

1126
01:02:43,400 --> 01:02:47,600
something, you know, 20 is some scientific notation number just like

1127
01:02:47,600 --> 01:02:48,600
you learn to school.

1128
01:02:48,700 --> 01:02:53,300
Well the E, something that part is the exponent, the one point blah

1129
01:02:53,300 --> 01:02:54,900
blah blah, that's the mantissa.

1130
01:02:55,200 --> 01:02:57,500
The one is implicit in floating Point, Unit actually story,

1131
01:02:57,700 --> 01:02:59,600
But point being, that's the mantissa.

1132
01:03:00,000 --> 01:03:02,300
And then the positive or negative like if it's files were - that's the

1133
01:03:02,300 --> 01:03:02,900
sign bit, right?

1134
01:03:02,900 --> 01:03:05,000
And that's how floating-point numbers are stored.

1135
01:03:05,700 --> 01:03:08,000
And so what use typically will see?

1136
01:03:08,000 --> 01:03:11,700
When someone sits down to really over optimize a floating-point

1137
01:03:11,700 --> 01:03:12,300
routine?

1138
01:03:12,800 --> 01:03:16,400
Often times there are certain operations that they need to do which

1139
01:03:16,400 --> 01:03:19,500
can actually be done much more efficiently by actually just

1140
01:03:19,500 --> 01:03:21,200
manipulating the B directly.

1141
01:03:23,200 --> 01:03:29,600
And so the I shifted down by one, right, is what, whatever, they

1142
01:03:29,600 --> 01:03:33,800
figured out, shifting down the, I shifting down by one, which shifts,

1143
01:03:33,800 --> 01:03:39,400
like one bit of the exponent, like, into the, it's just one bit of the

1144
01:03:39,400 --> 01:03:42,700
exponent down into the mantissa, right?

1145
01:03:43,000 --> 01:03:46,600
It's just the exponent down by one it shifts a 0 into the sign bit.

1146
01:03:46,600 --> 01:03:48,800
But that's okay, because, you know, that the signed it was positive

1147
01:03:48,800 --> 01:03:51,300
because you can't take the square root of a negative number, right?

1148
01:03:51,300 --> 01:03:52,800
That's already off the

1149
01:03:53,000 --> 01:03:57,300
Bubble, so that operation.

1150
01:03:58,400 --> 01:04:01,800
Then using this magic constant, which they carefully constructed to

1151
01:04:01,800 --> 01:04:06,700
do, exactly a specific thing when you did the subtraction will put,

1152
01:04:06,700 --> 01:04:09,000
like the number into a state.

1153
01:04:09,200 --> 01:04:12,400
That would have taken them many floating Point operations to arrive at

1154
01:04:12,400 --> 01:04:13,100
potentially.

1155
01:04:13,600 --> 01:04:17,600
So it's just a way of going like, oh, okay, I figured out that the set

1156
01:04:17,600 --> 01:04:21,400
of operations I want to do like I want to like divide this number by,

1157
01:04:21,400 --> 01:04:23,400
you know, 12 or something.

1158
01:04:24,000 --> 01:04:27,400
And I figured out that I could do that by like actually like using a

1159
01:04:27,400 --> 01:04:29,600
magic constant and subtracting it and whatever, right?

1160
01:04:29,600 --> 01:04:35,700
So that's like the how the first part Works in like usually it's a lot

1161
01:04:35,700 --> 01:04:39,200
easier if the person who actually wrote the routine notated, how they

1162
01:04:39,200 --> 01:04:40,800
arrived at that constant.

1163
01:04:40,800 --> 01:04:43,800
But in the case, if you're trying to really reverse engineer,

1164
01:04:43,800 --> 01:04:45,800
something that you've literally never seen before and you're not

1165
01:04:45,800 --> 01:04:48,700
familiar with where that concept comes from, you're at you're going to

1166
01:04:48,700 --> 01:04:52,000
have to do some wackiness by watching.

1167
01:04:52,000 --> 01:04:53,400
What happens to a floating Point number.

1168
01:04:53,400 --> 01:04:53,900
When its

1169
01:04:54,100 --> 01:04:57,000
I could from that and that actually shouldn't be too hard for you to

1170
01:04:57,000 --> 01:04:57,400
do.

1171
01:04:57,500 --> 01:05:00,200
You should be able to plug some known floating Point numbers in there,

1172
01:05:00,200 --> 01:05:04,300
easy, 11.5, 1.25 things like this.

1173
01:05:04,700 --> 01:05:06,100
Look at what happens to them.

1174
01:05:06,800 --> 01:05:10,200
And you'll be able to see the operation that they're simulating by

1175
01:05:10,200 --> 01:05:13,100
cheating like that, if that makes sense.

1176
01:05:14,800 --> 01:05:18,300
So that's all, you know, hopefully that's enough of an explanation to

1177
01:05:18,300 --> 01:05:19,600
get you started on that.

1178
01:05:19,800 --> 01:05:23,000
Like I said, I'm not going to spend time trying to reverse engineer it

1179
01:05:23,000 --> 01:05:24,500
because that sounds like a lot of work.

1180
01:05:24,900 --> 01:05:27,300
And we're probably not going to build yellow stream, it's not the kind

1181
01:05:27,300 --> 01:05:28,900
of code that I work with very frequently.

1182
01:05:29,000 --> 01:05:32,900
It's possible that if you ask someone who often does floating-point

1183
01:05:32,900 --> 01:05:37,000
optimization stuff on this with bit twiddling, they would recognize

1184
01:05:37,000 --> 01:05:37,600
that constant.

1185
01:05:37,600 --> 01:05:39,700
It may be a common trick constant.

1186
01:05:40,300 --> 01:05:43,100
Some things are common to constant some things are uncommon, right?

1187
01:05:43,200 --> 01:05:44,200
Some things are trick.

1188
01:05:44,400 --> 01:05:46,400
Ants that are used in many places.

1189
01:05:46,500 --> 01:05:48,000
Some things are constant that you made up.

1190
01:05:48,000 --> 01:05:50,400
Just for this one algorithm that you want and you're unlikely to

1191
01:05:50,400 --> 01:05:51,100
appear anywhere else.

1192
01:05:51,100 --> 01:05:54,600
And so that's just again, something to be aware of, you know, you

1193
01:05:54,600 --> 01:05:56,400
could also search for it.

1194
01:05:57,900 --> 01:05:59,900
But I doubt, you know, that's probably

1195
01:06:00,000 --> 01:06:02,300
not the most useful thing to do, but just

1196
01:06:05,600 --> 01:06:06,500
Just for fun.

1197
01:06:07,400 --> 01:06:13,900
It does not look useful 5f 3759 tips.

1198
01:06:14,100 --> 01:06:15,100
I've 9df.

1199
01:06:19,300 --> 01:06:20,100
So there you go.

1200
01:06:21,700 --> 01:06:23,200
In fact, you can see right here.

1201
01:06:28,000 --> 01:06:29,700
Oh, did you actually get this from here?

1202
01:06:30,200 --> 01:06:31,100
We'll wait a minute.

1203
01:06:31,600 --> 01:06:33,500
They are explaining it right here.

1204
01:06:34,000 --> 01:06:37,600
Why are you asking me to do this when the explanation is right here?

1205
01:06:38,400 --> 01:06:41,500
Yeah, so you know, I guess this is good though, it's exactly what I

1206
01:06:41,500 --> 01:06:43,000
just said it was right.

1207
01:06:44,000 --> 01:06:49,300
So they're just trying to do a fast computation that they sort of

1208
01:06:49,300 --> 01:06:51,400
worked out that they could do that.

1209
01:06:51,500 --> 01:06:53,200
Really, you know, really quickly.

1210
01:06:53,400 --> 01:06:56,700
So they're producing 1, over the square root of x.

1211
01:06:56,700 --> 01:06:57,600
The log 2.

1212
01:06:57,900 --> 01:06:58,700
Right.

1213
01:06:59,200 --> 01:07:02,900
And they're doing that you because using this magic constant as a way

1214
01:07:02,900 --> 01:07:06,400
to do that much more efficiently right in their terms.

1215
01:07:06,400 --> 01:07:08,200
Now, of course it's

1216
01:07:09,600 --> 01:07:12,100
When I say much more efficiently, this is from the old old old days,

1217
01:07:12,100 --> 01:07:12,300
right?

1218
01:07:12,300 --> 01:07:15,400
Because as they're even telling you right here, you know, nowadays,

1219
01:07:15,400 --> 01:07:18,500
you can get the square root, the processor can do it basically for

1220
01:07:18,500 --> 01:07:18,800
you.

1221
01:07:19,300 --> 01:07:21,100
They've got square roots, kind of built-in.

1222
01:07:21,900 --> 01:07:24,500
So it'd be kind of stupid to actually ever be using this thing.

1223
01:07:24,500 --> 01:07:27,500
But, you know, it's a useful exercise.

1224
01:07:27,500 --> 01:07:30,500
So it's fun to still, you know, I would encourage you if you actually

1225
01:07:30,500 --> 01:07:33,800
are interested in for some reason to go through and actually watch it

1226
01:07:33,800 --> 01:07:34,700
work that way.

1227
01:07:35,000 --> 01:07:36,600
So you get some idea, right?

1228
01:07:49,700 --> 01:07:53,000
What would be a good project for a beginner game programmer?

1229
01:07:54,300 --> 01:07:59,500
Just a really simple game I would recommend asteroids or Space

1230
01:07:59,500 --> 01:08:00,100
Invaders.

1231
01:08:03,400 --> 01:08:06,600
Probably asteroids, is the very easiest, I would say that everyone

1232
01:08:06,600 --> 01:08:08,000
should probably make an Asteroids game.

1233
01:08:08,000 --> 01:08:09,000
I made an Asteroids game.

1234
01:08:09,000 --> 01:08:12,300
When I was little it's a very simple thing.

1235
01:08:12,300 --> 01:08:16,100
There's no contact, there's no support services, there's no obstacles.

1236
01:08:16,500 --> 01:08:21,300
It's like one of the purest games you can make, in terms of, you know,

1237
01:08:21,300 --> 01:08:23,200
the Simplicity and the directness of it.

1238
01:08:24,300 --> 01:08:27,899
So, you know, I would say, asteroids, make a good version of asteroids

1239
01:08:28,000 --> 01:08:28,899
get that going.

1240
01:08:30,100 --> 01:08:31,300
I understand it all.

1241
01:08:32,100 --> 01:08:34,899
That's a really solid place to start, right?

1242
01:08:43,600 --> 01:08:44,399
La 238.

1243
01:08:44,399 --> 01:08:47,100
I just read that natural selection 2 for which unknown Worlds made

1244
01:08:47,100 --> 01:08:47,700
their own game engine.

1245
01:08:47,700 --> 01:08:52,700
Say they no longer support Windows XP does handmade hero run on XP and

1246
01:08:52,700 --> 01:08:55,899
why wouldn't it so handmade hero?

1247
01:08:57,100 --> 01:08:59,100
I don't know whether we'll run on XP.

1248
01:09:00,899 --> 01:09:04,100
I don't know whether we'll bother running on XP when we ship or not,

1249
01:09:05,500 --> 01:09:11,000
we would run on XP, just fine, regardless, except for one, very

1250
01:09:11,000 --> 01:09:17,600
specific thing and that is whether we support 64-bit only or whether

1251
01:09:17,600 --> 01:09:19,300
we support 32-bit and 64-bit.

1252
01:09:23,200 --> 01:09:26,100
If we decide that handmade here or a 64-bit only that it will not

1253
01:09:26,100 --> 01:09:27,000
support Windows XP.

1254
01:09:28,100 --> 01:09:33,200
If we decide that we will be supporting 32-bit as well, then it will

1255
01:09:33,399 --> 01:09:34,500
support Windows XP.

1256
01:09:34,899 --> 01:09:38,899
And you can see that we already made sure that we do run on Windows

1257
01:09:38,899 --> 01:09:43,200
XP, way back, when, right?

1258
01:09:43,800 --> 01:09:51,700
So if you go to our whoops, that's not what we wanted and made org.

1259
01:09:54,100 --> 01:09:54,800
That is Hamid.

1260
01:09:54,800 --> 01:09:58,600
Khan handmade Heroes.

1261
01:09:58,800 --> 01:09:59,500
Dot org.

1262
01:10:01,600 --> 01:10:06,000
If you go to the the tweetbot, like, no, I'm totally confused right

1263
01:10:06,000 --> 01:10:07,100
now the Forum site.

1264
01:10:07,400 --> 01:10:12,300
If you go to the episode guide, you should be able to see in sort of

1265
01:10:12,300 --> 01:10:14,100
this, the platform stuff.

1266
01:10:14,500 --> 01:10:18,700
There's a thing where I actually test running on Windows and p x p.

1267
01:10:19,000 --> 01:10:21,700
I don't remember exactly where we did it.

1268
01:10:23,800 --> 01:10:25,400
Let's see here.

1269
01:10:27,200 --> 01:10:28,400
I don't actually know.

1270
01:10:28,400 --> 01:10:32,700
I'm not sure where we did it, but it was somewhere in here.

1271
01:10:33,600 --> 01:10:36,000
I suspect here it is.

1272
01:10:36,300 --> 01:10:37,800
So time is three Windows.

1273
01:10:37,800 --> 01:10:38,400
The custody

1274
01:10:39,600 --> 01:10:42,600
You can see as testing it on Windows XP and we go through and I

1275
01:10:42,600 --> 01:10:45,500
demonstrated like one of the main reasons that you might not run on

1276
01:10:45,500 --> 01:10:46,400
Windows XP.

1277
01:10:46,800 --> 01:10:50,100
I showed like what you would do with it, which is how to like set the

1278
01:10:50,100 --> 01:10:53,400
linking Flags correctly and stuff and then I showed us running on

1279
01:10:53,400 --> 01:10:56,900
Windows XP right now.

1280
01:10:57,200 --> 01:11:00,500
We would not run on Windows XP and the reason for that is we allocate

1281
01:11:00,500 --> 01:11:03,100
a big block of memory to store all our debug stuff and all this other

1282
01:11:03,100 --> 01:11:03,600
things.

1283
01:11:03,700 --> 01:11:06,800
So right now we are not 32-bit compatible.

1284
01:11:08,400 --> 01:11:08,800
So,

1285
01:11:08,900 --> 01:11:11,200
Right now, we would not want to say it but that's the only real

1286
01:11:11,200 --> 01:11:11,700
reason.

1287
01:11:11,800 --> 01:11:13,000
Everything else we do.

1288
01:11:13,000 --> 01:11:14,500
We could run on Windows XP, just fine.

1289
01:11:15,900 --> 01:11:18,600
Now as for the reason why natural selection 2 doesn't run on Windows

1290
01:11:18,600 --> 01:11:19,600
XP, I have no idea.

1291
01:11:22,700 --> 01:11:28,700
Could because they require DirectX 12 or 11, it could be your, you

1292
01:11:28,700 --> 01:11:31,400
know, because they require some audio system, that's not there.

1293
01:11:31,400 --> 01:11:34,700
It could because they require 64-bit, I really don't know.

1294
01:11:37,600 --> 01:11:38,400
I really don't know.

1295
01:12:01,000 --> 01:12:04,900
Set it for cues, like I missed any.

1296
01:12:07,900 --> 01:12:09,300
I think I got them all.

1297
01:12:26,500 --> 01:12:27,900
Have you used the new steam controller?

1298
01:12:27,900 --> 01:12:28,800
What do you think about it?

1299
01:12:29,100 --> 01:12:31,500
I have not used the new steam controller.

1300
01:12:31,500 --> 01:12:31,900
No.

1301
01:12:34,200 --> 01:12:38,800
I have played with the old steam controllers, meaning the ones that

1302
01:12:38,800 --> 01:12:45,600
were, you know, maybe maybe a year ago or so and they have changed it.

1303
01:12:45,600 --> 01:12:51,800
Since then, I did not super see the point of it, to be honest with

1304
01:12:51,800 --> 01:12:52,200
you.

1305
01:12:53,400 --> 01:12:54,800
I didn't really think

1306
01:12:56,100 --> 01:12:57,900
it was all that usable for playing.

1307
01:12:59,200 --> 01:13:00,400
Keyboard and mouse games.

1308
01:13:00,400 --> 01:13:02,300
So I wasn't really sure what the point was.

1309
01:13:02,300 --> 01:13:05,400
Like I was like, I can't see anyone actually using this for that.

1310
01:13:05,400 --> 01:13:09,000
So it just seemed like a really bad Gamepad, you know?

1311
01:13:09,000 --> 01:13:12,300
It was like this is going to be really bad for anything that you want

1312
01:13:12,300 --> 01:13:15,800
to use the GamePad for and it doesn't actually work for playing

1313
01:13:15,800 --> 01:13:16,400
anything else.

1314
01:13:16,400 --> 01:13:19,700
So I don't know why it exists but

1315
01:13:22,000 --> 01:13:25,000
You know, I haven't used the latest one, maybe it's like way better.

1316
01:13:28,700 --> 01:13:29,300
I don't know.

1317
01:13:42,500 --> 01:13:44,200
Let's see.

1318
01:14:04,300 --> 01:14:08,200
A piece of the tool chain, set of tools used for CMS to like Microsoft

1319
01:14:08,200 --> 01:14:09,100
Visual Studio have made it.

1320
01:14:09,100 --> 01:14:12,000
Effectively impossible to keep running in a stew on Windows XP.

1321
01:14:12,400 --> 01:14:15,100
A choice must be made between stopping the Love of the Game so that it

1322
01:14:15,100 --> 01:14:18,400
may run on Windows XP in perpetuity or maintained element in the game

1323
01:14:18,700 --> 01:14:20,400
because we don't speak compatibility with fail.

1324
01:14:22,300 --> 01:14:23,100
Interesting.

1325
01:14:24,900 --> 01:14:28,600
so yeah, I mean it sounds like again in typical Microsoft fashion you

1326
01:14:28,600 --> 01:14:29,300
know, they just

1327
01:14:31,800 --> 01:14:32,800
They just for some reason.

1328
01:14:32,800 --> 01:14:35,700
Keep doing all this ridiculous stuff that makes life harder for

1329
01:14:35,700 --> 01:14:36,200
everyone.

1330
01:14:36,300 --> 01:14:38,500
You know, you know you didn't get anything for that right.

1331
01:14:38,500 --> 01:14:42,000
You know they just broke it to break it because they, you know, do

1332
01:14:42,000 --> 01:14:42,800
that sort of thing.

1333
01:14:46,200 --> 01:14:48,200
Soy sauce, the kid numerical methods that work.

1334
01:14:48,400 --> 01:14:49,000
This is the book.

1335
01:14:49,000 --> 01:14:50,200
You're recommending, right?

1336
01:14:50,700 --> 01:14:54,900
Well actually, I recommend anything by from acting, I guess I haven't

1337
01:14:54,900 --> 01:14:55,300
read them all.

1338
01:14:55,300 --> 01:14:57,600
But I read real Computing Made Real and

1339
01:15:00,300 --> 01:15:04,500
Numerical methods that really work or that that usually work, American

1340
01:15:04,500 --> 01:15:07,600
Heroes is no hierarchical methods, that usually work and they were

1341
01:15:07,600 --> 01:15:08,600
both really great.

1342
01:15:09,900 --> 01:15:12,200
I could stand to read them again these days actually because a lot of

1343
01:15:12,200 --> 01:15:15,700
that information is gone out of my head because it's not the HIPAA

1344
01:15:15,700 --> 01:15:19,100
code that I write very often and there's probably a lot of things that

1345
01:15:19,100 --> 01:15:19,600
I do that.

1346
01:15:19,600 --> 01:15:22,300
Honestly would be better if I kind of knew what we were doing there.

1347
01:15:23,600 --> 01:15:29,300
But yeah, so either book, I think you would would be good to read.

1348
01:15:52,800 --> 01:15:55,700
Pseudonym 73, that is a great statement.

1349
01:15:55,700 --> 01:15:59,100
Everything that runs on Windows PE runs on Windows NP.

1350
01:16:03,500 --> 01:16:04,500
That is so true.

1351
01:16:06,300 --> 01:16:07,100
That is so true.

1352
01:16:10,900 --> 01:16:16,900
It's also true that you could probably verify that the you could

1353
01:16:16,900 --> 01:16:20,700
probably verify the output of any windows and P program on Windows

1354
01:16:20,700 --> 01:16:21,100
pee.

1355
01:16:22,200 --> 01:16:25,100
You just don't know whether you could produce the output or not.

1356
01:16:25,400 --> 01:16:26,200
Nobody does.

1357
01:16:28,100 --> 01:16:32,500
Elven, any tips on reading books, I find it really hard to read them.

1358
01:16:32,900 --> 01:16:37,900
I do enjoy their table of contents, gets me excited, but when I read

1359
01:16:37,900 --> 01:16:40,300
on, it gets quite boring.

1360
01:16:42,100 --> 01:16:44,500
I do not know how to answer that question.

1361
01:16:51,700 --> 01:16:52,800
I like Colonel dragons.

1362
01:16:52,800 --> 01:16:53,700
Answer actually.

1363
01:16:55,400 --> 01:17:02,600
so, my recommendation for reading books is that if you're talking

1364
01:17:02,600 --> 01:17:06,000
about reading programming or like, well, more importantly, math books,

1365
01:17:07,600 --> 01:17:09,300
I guess what I would say is,

1366
01:17:11,200 --> 01:17:14,600
Math books are often written by people who do not know how to

1367
01:17:14,600 --> 01:17:16,500
communicate anything to anyone.

1368
01:17:18,200 --> 01:17:20,700
Foreman Acton's books are unusual.

1369
01:17:20,700 --> 01:17:24,400
Actually in the fact that they are very well written, like he's

1370
01:17:24,400 --> 01:17:29,400
actually a decent writer but a lot of math books are written in a way

1371
01:17:29,400 --> 01:17:33,000
that it's pretty clear that nobody who actually doesn't already know,

1372
01:17:33,000 --> 01:17:33,900
math extremely.

1373
01:17:33,900 --> 01:17:38,200
Well will ever understand them and it's not necessarily there's no

1374
01:17:38,200 --> 01:17:39,200
reason for it.

1375
01:17:40,700 --> 01:17:41,600
It's just because math.

1376
01:17:41,600 --> 01:17:44,900
People just don't know how to communicate ideas very well.

1377
01:17:45,200 --> 01:17:47,600
I think it's because they're so used to thinking in terms of math they

1378
01:17:47,600 --> 01:17:51,000
think that just by listing a bunch of equations is like the most

1379
01:17:51,000 --> 01:17:52,500
efficient way to get a point across.

1380
01:17:52,500 --> 01:17:56,500
But it rarely actually is and I feel like a lot of times there's

1381
01:17:56,500 --> 01:17:59,800
people who know a lot of math but don't actually

1382
01:18:00,000 --> 01:18:03,500
Know how to use any of it because of that like it kind of exists in

1383
01:18:03,500 --> 01:18:04,800
this like vacuum.

1384
01:18:05,900 --> 01:18:10,600
And so, you know, usually the best thing to do when you're trying to

1385
01:18:11,100 --> 01:18:15,500
succeed at reading and math book is actually to go, try to find

1386
01:18:15,500 --> 01:18:18,200
someone who crosses that Barrett Bridge a little bit.

1387
01:18:18,200 --> 01:18:19,600
Because every so often

1388
01:18:21,300 --> 01:18:24,600
There are people who are both good at like math and good at

1389
01:18:24,600 --> 01:18:27,900
communicating and those people write books that are much easier to

1390
01:18:27,900 --> 01:18:29,100
like actually get into.

1391
01:18:29,700 --> 01:18:32,400
Now it's still a very active process reading.

1392
01:18:32,400 --> 01:18:33,800
Those books is still active.

1393
01:18:33,800 --> 01:18:37,100
You have to do the actual exercise in the book you have to like when

1394
01:18:37,100 --> 01:18:41,400
they show a derivation of something work, it out yourself on the side

1395
01:18:42,100 --> 01:18:44,500
because otherwise it'll just go like right through you.

1396
01:18:44,500 --> 01:18:47,400
You won't actually get any of the information, right?

1397
01:18:49,000 --> 01:18:49,600
But

1398
01:18:51,400 --> 01:18:55,800
it's really just like 99% of the success is finding the right book

1399
01:18:55,800 --> 01:18:58,700
first, because a lot of people

1400
01:19:01,000 --> 01:19:05,100
A lot of people write these books that are just waste of paper, like

1401
01:19:05,800 --> 01:19:08,500
they're just like big reams of like the math behind something and it's

1402
01:19:08,500 --> 01:19:09,600
like no debts.

1403
01:19:09,600 --> 01:19:12,500
No there's you don't need to write that like that's complete waste of

1404
01:19:12,500 --> 01:19:13,700
time, right?

1405
01:19:14,000 --> 01:19:16,400
You don't need to have a book that's like all of the math.

1406
01:19:17,200 --> 01:19:19,900
The important part about writing the book is like structuring that

1407
01:19:19,900 --> 01:19:24,000
math in with explanations that allow it to like Echo here, you know?

1408
01:19:27,400 --> 01:19:33,500
so, you got to seek those out and they're hard to find and so I guess

1409
01:19:33,500 --> 01:19:34,400
I would say

1410
01:19:37,400 --> 01:19:41,500
You know, it's not easy, but look for recommendations and a specific

1411
01:19:41,500 --> 01:19:42,400
about that part of it.

1412
01:19:42,400 --> 01:19:47,800
Like is this actually is this actually explained?

1413
01:19:47,800 --> 01:19:52,100
Well and does it sound like the person actually knows sort of the like

1414
01:19:52,100 --> 01:19:55,400
intuition behind this or do they are they just regurgitating a bunch

1415
01:19:55,400 --> 01:19:58,200
of math that they learn to do in college or whatever.

1416
01:19:58,200 --> 01:19:58,700
Right.

1417
01:19:59,300 --> 01:19:59,800
And

1418
01:20:04,700 --> 01:20:05,900
That's really all I can say.

1419
01:20:17,100 --> 01:20:24,400
And no, I actually have not read linear algebra Done Right by Sheldon

1420
01:20:24,400 --> 01:20:25,100
axler.

1421
01:20:30,300 --> 01:20:31,100
I think.

1422
01:20:41,700 --> 01:20:43,000
Let's find out.

1423
01:20:49,400 --> 01:20:51,600
So, when is the first edition?

1424
01:21:06,000 --> 01:21:08,600
You Gotta Wear its first edition.

1425
01:21:12,400 --> 01:21:14,600
Corrected printing, 97.

1426
01:21:14,600 --> 01:21:18,700
So ironically, it was published the year after I learn linear algebra.

1427
01:21:23,600 --> 01:21:26,300
So that would explain why I have not read it.

1428
01:21:27,200 --> 01:21:28,100
It was too late.

1429
01:21:29,400 --> 01:21:32,100
But you know, my linear algebra, so Rusty these days.

1430
01:21:32,100 --> 01:21:35,700
I could go read it and I would probably like relearn a lot of stuff

1431
01:21:35,700 --> 01:21:40,700
that I have forgotten so maybe someday I will read it.

1432
01:22:03,900 --> 01:22:08,500
How do you deal with some of the generally poor social skills in

1433
01:22:08,500 --> 01:22:13,100
programming math Fields, noticing this more and more lately,

1434
01:22:13,100 --> 01:22:14,200
unfortunately.

1435
01:22:17,200 --> 01:22:20,400
I don't know, I guess, I don't.

1436
01:22:20,400 --> 01:22:23,000
I mean I don't have to

1437
01:22:24,900 --> 01:22:34,100
I mean I program more or less by myself I work mostly with artists and

1438
01:22:34,400 --> 01:22:38,200
while it's true that some artists you know artists are also probably

1439
01:22:38,200 --> 01:22:41,800
not necessarily always the strongest class of people for social skills

1440
01:22:41,800 --> 01:22:49,200
necessarily but I mean like everything else, it's usually more about

1441
01:22:51,900 --> 01:22:54,700
About whether, you know, I get along with them or whether I work well

1442
01:22:54,700 --> 01:22:58,200
with them and less about whether they have some kind of, abstractly

1443
01:22:58,200 --> 01:22:59,600
good social skills, right?

1444
01:22:59,700 --> 01:23:03,600
And so you know, most the time I don't think of it as like does the

1445
01:23:03,600 --> 01:23:06,000
person I'm working with have good social skills or do I have good

1446
01:23:06,000 --> 01:23:06,500
social skills?

1447
01:23:06,500 --> 01:23:08,300
It's usually more like do we get along?

1448
01:23:08,300 --> 01:23:08,600
Okay.

1449
01:23:08,600 --> 01:23:13,300
And do we, are we able to like resolve conflict, productively?

1450
01:23:13,300 --> 01:23:16,200
And are we able to like be on good terms with each other all the time,

1451
01:23:16,200 --> 01:23:18,600
and not be resentful, or angry, or whatever, right?

1452
01:23:19,200 --> 01:23:20,200
And so,

1453
01:23:22,600 --> 01:23:27,000
At least in my experience, I typically have not had much trouble

1454
01:23:27,000 --> 01:23:28,400
getting along with.

1455
01:23:30,400 --> 01:23:33,200
With the people I need to get along with in order to do work at like

1456
01:23:33,200 --> 01:23:33,700
Molly.

1457
01:23:36,300 --> 01:23:42,200
But you know, your mileage may vary and I think I said it varies quite

1458
01:23:42,200 --> 01:23:43,200
a bit from person to person.

1459
01:23:43,800 --> 01:23:47,500
I have like there was one person that we worked with at one point I

1460
01:23:47,500 --> 01:23:51,900
was a contractor that I did not like working with and we just don't

1461
01:23:51,900 --> 01:23:57,100
work with them anymore for a number of reasons but by and large, like

1462
01:23:57,100 --> 01:23:59,800
almost everyone, I've worked with you Noah,

1463
01:24:00,000 --> 01:24:00,400
R.

1464
01:24:03,400 --> 01:24:07,100
You know, either I adapt well enough to how they need me to work with

1465
01:24:07,100 --> 01:24:12,000
them or they adapt to me and it's been okay.

1466
01:24:13,200 --> 01:24:15,600
And, and so, yeah, I don't know.

1467
01:24:15,900 --> 01:24:18,500
Programming wise, we I haven't had to cross that bridge.

1468
01:24:19,400 --> 01:24:23,000
We might at some point, if Molly is, you know, more successful in the

1469
01:24:23,000 --> 01:24:29,300
future in terms of what we end up doing in terms of, you know, if our

1470
01:24:29,300 --> 01:24:33,100
products do well enough for us to hire a programmer or two at some

1471
01:24:33,900 --> 01:24:36,800
Then I'll have to obviously, you know, take some of that more

1472
01:24:36,800 --> 01:24:40,400
seriously in terms of what I would need to do for hiring a programmer.

1473
01:24:42,200 --> 01:24:45,200
But at the moment we only really ever hire artists

1474
01:24:53,200 --> 01:24:53,600
so,

1475
01:24:58,900 --> 01:25:00,000
so yeah.

1476
01:25:20,200 --> 01:25:26,400
All right, folks, I think we can safely call it a day, I suspect.

1477
01:25:28,400 --> 01:25:30,800
So I'm going to go ahead and close down here.

1478
01:25:38,500 --> 01:25:40,200
All right, thank you, everyone for joining me, for another episode of

1479
01:25:40,200 --> 01:25:40,600
handmade here.

1480
01:25:40,600 --> 01:25:41,900
It's my pleasure coding with you.

1481
01:25:41,900 --> 01:25:45,800
As always, if you want to follow along at home, you can always

1482
01:25:45,800 --> 01:25:46,400
pre-order the game.

1483
01:25:46,400 --> 01:25:48,600
I hammer here at org and it comes to the source code.

1484
01:25:48,700 --> 01:25:52,100
If you want to play around with it, you could also support us on

1485
01:25:52,100 --> 01:25:52,800
patreon.

1486
01:25:53,400 --> 01:25:55,800
You can go to our Forum site, ask questions.

1487
01:25:56,100 --> 01:26:00,500
Look at the anti-deficit guide, you can go use the Tweet pot, which

1488
01:26:00,500 --> 01:26:02,200
lets you do when we're going to be live.

1489
01:26:03,000 --> 01:26:07,300
And I would also remind you that our time.

1490
01:26:07,400 --> 01:26:10,400
For tomorrow is little bit different than what I initially announced

1491
01:26:10,900 --> 01:26:11,600
due to.

1492
01:26:11,600 --> 01:26:15,700
I had to make some arrangements for something tomorrow evening.

1493
01:26:16,000 --> 01:26:17,100
So I had to move the screen back.

1494
01:26:17,100 --> 01:26:19,100
It was going to be the same time as it was today.

1495
01:26:19,100 --> 01:26:20,200
It's going to be 8 p.m.

1496
01:26:20,700 --> 01:26:21,200
instead.

1497
01:26:21,200 --> 01:26:24,600
It's going to be at I believe, 6 p.m.

1498
01:26:24,600 --> 01:26:25,100
tomorrow.

1499
01:26:26,000 --> 01:26:29,100
So you know, always check this guy if you want or the Tweet.

1500
01:26:29,100 --> 01:26:31,300
But actually I think the tweetbot has it as well.

1501
01:26:31,300 --> 01:26:31,600
Yeah.

1502
01:26:31,600 --> 01:26:32,200
So there it is.

1503
01:26:32,200 --> 01:26:33,300
The tweetbot says it.

1504
01:26:35,400 --> 01:26:37,800
So beware that also Thursday.

1505
01:26:37,800 --> 01:26:42,700
So two days from now I will be doing a live stream with Sean McGrath

1506
01:26:42,900 --> 01:26:50,000
or ssss ssss McGrath on the chat regarding free to play games.

1507
01:26:50,900 --> 01:26:55,200
I'm not really sure what it's going to be about exactly but he is

1508
01:26:55,200 --> 01:26:59,100
working on a free-to-play game and he I think he wants to have a

1509
01:26:59,100 --> 01:26:59,800
little bit of an

1510
01:27:00,000 --> 01:27:02,200
Devil on the shoulder conversation about it.

1511
01:27:02,900 --> 01:27:08,200
So so we will have that conversation so that will be immediately

1512
01:27:08,200 --> 01:27:09,500
following handmade here on Thursday.

1513
01:27:09,500 --> 01:27:12,400
So handmade here, all started seven, it'll go from 7 to 8:30 and then

1514
01:27:12,400 --> 01:27:18,800
at 8:30, Sean will I guess Skype in or however, he wants to get

1515
01:27:19,300 --> 01:27:22,500
himself into the stream and we'll go from there.

1516
01:27:23,800 --> 01:27:30,900
I also would say that finally was kept having to do just make sure

1517
01:27:30,900 --> 01:27:33,900
that everyone was nailed down for handmade con there is a few things

1518
01:27:33,900 --> 01:27:36,400
like last-minute things that weren't 100% settled.

1519
01:27:36,600 --> 01:27:40,000
So I couldn't announce the speaker list with 100% certainty on Monday

1520
01:27:40,700 --> 01:27:44,400
but we actually got it 100% certain today.

1521
01:27:45,600 --> 01:27:52,100
And so, next Monday, I will actually post the the entire handmade con

1522
01:27:52,100 --> 01:27:57,000
schedule with the times, that everything will be happening at handmade

1523
01:27:57,000 --> 01:27:57,400
concert.

1524
01:27:57,400 --> 01:27:59,600
For those of you who already have tickets, you'll know exactly what

1525
01:27:59,600 --> 01:28:00,100
you're doing.

1526
01:28:01,400 --> 01:28:08,100
If you would like a sort of teaser way to figure that out if you go to

1527
01:28:08,100 --> 01:28:09,200
handmade hero.

1528
01:28:10,000 --> 01:28:13,300
Oops, and made sure that work before Monday.

1529
01:28:13,400 --> 01:28:15,100
If you actually go to the tweetbot,

1530
01:28:15,500 --> 01:28:17,800
You should see there's a little Puzzler on here.

1531
01:28:18,300 --> 01:28:23,200
And what I did is I sort of picked intentionally fairly obscure.

1532
01:28:23,200 --> 01:28:26,000
I mean as obscure as you can really do with screenshots.

1533
01:28:26,300 --> 01:28:31,100
I tried to pick like from potentially less notable, or less easy to

1534
01:28:31,100 --> 01:28:34,400
recognize games from people potentially.

1535
01:28:34,400 --> 01:28:36,200
But you know, sometimes that's hard to do.

1536
01:28:37,200 --> 01:28:42,600
Basically what I did is I picked two screenshots from each of the five

1537
01:28:42,600 --> 01:28:45,100
speakers who will be participating in

1538
01:28:45,200 --> 01:28:47,400
In handmade Con 2015.

1539
01:28:48,000 --> 01:28:51,400
And so if you want to figure out who the speakers are beforehand, you

1540
01:28:51,400 --> 01:28:54,200
should be able to do it by scrutinizing.

1541
01:28:54,200 --> 01:28:56,200
This lovely little block.

1542
01:28:58,200 --> 01:29:01,600
I won't say anything else about it, but on Monday, you can see if

1543
01:29:01,600 --> 01:29:02,400
you're right.

1544
01:29:03,900 --> 01:29:08,100
It's some of, it's a little difficult, some of them are easier, but

1545
01:29:08,100 --> 01:29:08,600
there you go.

1546
01:29:09,400 --> 01:29:10,500
So there you have it.

1547
01:29:10,500 --> 01:29:13,000
That's all the news from, handmade he roll, and I'll be back here

1548
01:29:13,000 --> 01:29:13,300
tomorrow.

1549
01:29:13,300 --> 01:29:15,700
Again, it will be at 6 p.m.

1550
01:29:15,900 --> 01:29:17,000
not 8 p.m.

1551
01:29:17,100 --> 01:29:20,400
due to a schedule change, but I will be back here doing a little more

1552
01:29:20,400 --> 01:29:21,400
work on the debug system.

1553
01:29:21,400 --> 01:29:25,900
Until then, I hope you guys have fun programming on your own and I

1554
01:29:25,900 --> 01:29:27,100
will see you on the internet.

1555
01:29:27,200 --> 01:29:28,100
Take it easy, everyone.

