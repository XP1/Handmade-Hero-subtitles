1
00:00:01,700 --> 00:00:05,100
Hello, everybody, and welcome to handmade hero.

2
00:00:05,100 --> 00:00:08,000
The sure we could have complete game live on stream.

3
00:00:09,200 --> 00:00:12,700
I tell you what, there's not a lot of mystery as to what we're doing

4
00:00:12,700 --> 00:00:18,600
today because yesterday we did a spatial partition for our sorting and

5
00:00:18,600 --> 00:00:23,100
we didn't get a chance to use it for anything because we finished just

6
00:00:23,100 --> 00:00:24,700
just when the bell rang.

7
00:00:25,600 --> 00:00:30,300
So today on day, 3, 10, we are just going to go use it and so if you

8
00:00:30,300 --> 00:00:33,100
want to follow along at home day, 309 is a source code to start with

9
00:00:33,100 --> 00:00:37,000
that is the source code that I am starting with right now.

10
00:00:37,000 --> 00:00:38,600
So if you would like to be

11
00:00:39,100 --> 00:00:45,800
You know, if you would like to be in sync and I don't mean the bad boy

12
00:00:45,800 --> 00:00:46,400
band.

13
00:00:47,400 --> 00:00:51,100
You know, that was clearly, just a ripoff of the Backstreet Boys.

14
00:00:51,700 --> 00:00:54,300
A fine group of upstanding gentlemen.

15
00:00:56,600 --> 00:01:01,700
I mean in sync, as in synchronization anyway, point being here, we are

16
00:01:01,700 --> 00:01:05,000
in the render code ladies and gentlemen, I don't mind telling you

17
00:01:06,400 --> 00:01:09,500
The down at the very bottom hiding.

18
00:01:09,900 --> 00:01:14,700
In plain sight, there is a sort entries call and right now we are

19
00:01:14,700 --> 00:01:21,700
doing a build Sprite graph operation up here and you can see it and it

20
00:01:21,700 --> 00:01:28,500
is doing the work of putting grids together for sorting purposes.

21
00:01:28,500 --> 00:01:31,300
Its spatially partitioning all of the Sprites on the screen into a

22
00:01:31,300 --> 00:01:35,100
grid but it doesn't actually do anything with it.

23
00:01:35,700 --> 00:01:38,800
Then goes ahead and runs the old code because we didn't get a chance

24
00:01:38,800 --> 00:01:42,200
yesterday to go and actually make this code use it.

25
00:01:42,200 --> 00:01:46,000
So what we'd like to do today is make that code actually use it.

26
00:01:46,000 --> 00:01:49,900
Unfortunately before we do that, there's probably one or two things we

27
00:01:49,900 --> 00:01:55,900
should do as well, which is turning on viewing of the sort graphs, for

28
00:01:55,900 --> 00:02:00,300
example, because right now, we would not really be able to see the

29
00:02:00,300 --> 00:02:01,000
fruits.

30
00:02:01,000 --> 00:02:02,700
The sweet, sweet fruits.

31
00:02:02,700 --> 00:02:05,600
The sweet blossoming virginal, fruits of our

32
00:02:05,700 --> 00:02:06,300
Our labor.

33
00:02:07,300 --> 00:02:11,200
So if we just kind of pretend that this isn't happening for a minute

34
00:02:11,400 --> 00:02:19,300
and go back to the win32 code, we should be able to turn on global

35
00:02:19,300 --> 00:02:20,500
sort groups here.

36
00:02:21,000 --> 00:02:25,600
I guess I could have used the UI for that, but anyway, turn it on

37
00:02:25,600 --> 00:02:26,200
permanently.

38
00:02:26,200 --> 00:02:30,300
So we can kind of see them all and we can kind of get an idea of

39
00:02:30,300 --> 00:02:31,400
what's going on with them.

40
00:02:31,700 --> 00:02:32,800
It's kind of hilarious.

41
00:02:32,800 --> 00:02:35,600
How just not clipped, our Sprites are, it's going to be nice to

42
00:02:35,700 --> 00:02:39,800
Which to enter asset pack and have properly clipped Sprites at some

43
00:02:39,800 --> 00:02:43,300
point here because especially with the software under man, look at all

44
00:02:43,300 --> 00:02:46,600
that overdraw that we were doing for no real reason.

45
00:02:47,200 --> 00:02:49,700
Anyway, you can kind of see what's going on here.

46
00:02:49,700 --> 00:02:57,200
You can see the sort of various lines indicating who is overlapping

47
00:02:57,200 --> 00:02:58,300
who and all that sort of stuff.

48
00:02:58,300 --> 00:02:59,800
And you can see that we're actually getting pretty

49
00:03:00,000 --> 00:03:04,600
It's sorting with most of the stuff that we were expecting to and we

50
00:03:04,600 --> 00:03:08,700
still have a few things that we haven't actually implemented yet in

51
00:03:08,700 --> 00:03:11,700
terms of passing data, down to this in a reasonable way.

52
00:03:12,100 --> 00:03:16,300
But for the most part it's pretty swell, you know, I could even rely

53
00:03:16,300 --> 00:03:19,000
on this order to sort of handle these.

54
00:03:19,700 --> 00:03:22,600
A little bit nasty things where I'm going in front of other Sprites,

55
00:03:22,600 --> 00:03:25,200
and that sort of thing in addition to the ground tiles and all that

56
00:03:25,200 --> 00:03:25,400
stuff.

57
00:03:25,400 --> 00:03:27,000
So, it's kind of doing what we want.

58
00:03:27,200 --> 00:03:29,800
I'm pretty happy with that because it's a bit of an

59
00:03:30,000 --> 00:03:34,400
Charlie underspecified problem, the 2D sorting it out of it all.

60
00:03:35,100 --> 00:03:37,900
Anyway, so now that we've got something that looks right.

61
00:03:38,000 --> 00:03:38,400
Meaning.

62
00:03:38,400 --> 00:03:42,700
Okay, we know, we can see what we are supposed to be getting when we

63
00:03:42,700 --> 00:03:45,700
switch to the optimized version, we at least have some way before we

64
00:03:45,700 --> 00:03:48,700
do any sort of visualization of the optimized version we will at least

65
00:03:48,700 --> 00:03:49,500
have some way of seeing.

66
00:03:49,500 --> 00:03:50,800
Is it doing anything at all?

67
00:03:50,800 --> 00:03:54,000
Like is it is it even remotely close to what we had before?

68
00:03:54,800 --> 00:03:57,900
Because we could have all sorts of bugs in our optimization pass

69
00:03:57,900 --> 00:03:58,600
obviously.

70
00:03:59,300 --> 00:04:01,900
So you can see here when we do build Sprite graph, we've got the

71
00:04:01,900 --> 00:04:06,700
situation where we're going through each of these grids and We're

72
00:04:06,700 --> 00:04:10,400
looping through all of the places that we need to insert now rather

73
00:04:10,400 --> 00:04:11,800
than do this in a second pass.

74
00:04:11,800 --> 00:04:15,100
I don't know that there's really any reason to do it in a second pass.

75
00:04:15,100 --> 00:04:18,800
It seems to me like the easiest thing to do would be to actually just

76
00:04:18,800 --> 00:04:22,700
Loop through all of the things in each grid when we do an insertion

77
00:04:23,000 --> 00:04:24,500
and do the check then

78
00:04:24,700 --> 00:04:25,100
As why?

79
00:04:25,100 --> 00:04:28,200
Wait till later, we're already right there.

80
00:04:28,200 --> 00:04:31,700
It just seems like the obvious time, right?

81
00:04:33,900 --> 00:04:36,600
So yeah, so let's go ahead and try that.

82
00:04:37,100 --> 00:04:41,000
Let's go ahead and say that here we are with our you know, we've got

83
00:04:41,000 --> 00:04:41,700
our note index.

84
00:04:41,700 --> 00:04:45,800
A that can stay exactly as it is but then in here instead of just

85
00:04:45,800 --> 00:04:51,900
doing the simple sort of chained to the front operation which you know

86
00:04:51,900 --> 00:04:56,500
obviously we know we're going to do maybe we can just before we do

87
00:04:56,500 --> 00:04:59,400
that we can just or act, guess actually doesn't really matter.

88
00:04:59,700 --> 00:05:02,900
But before we actually insert and before we actually do this insert

89
00:05:02,900 --> 00:05:02,900
here,

90
00:05:03,100 --> 00:05:08,100
Here, we'll just Loop through all of the sort grid entries in this

91
00:05:08,100 --> 00:05:09,100
particular grid.

92
00:05:10,600 --> 00:05:15,500
so this is going to be entry be and it's going to start out at the

93
00:05:15,500 --> 00:05:17,500
grid location that were on

94
00:05:20,000 --> 00:05:23,800
And then we're just going to Loop through each of the elements in

95
00:05:23,800 --> 00:05:24,100
here.

96
00:05:24,400 --> 00:05:28,700
Now, at this point we then have exactly what we need to do our

97
00:05:29,000 --> 00:05:33,500
operation that we were doing before so we can just go in here and say

98
00:05:33,500 --> 00:05:37,300
you know and in fact I can do a little thing that's like pound.

99
00:05:37,300 --> 00:05:43,000
Define accelerated, Sprite, sort, one or whatever.

100
00:05:44,400 --> 00:05:46,900
And then I could come in here and say, all right, you know, this

101
00:05:46,900 --> 00:05:48,900
operation is the operation, we want to do.

102
00:05:48,900 --> 00:05:52,100
If we're going to do accelerated, Sprite sort and then this operation

103
00:05:52,100 --> 00:05:56,600
is the operation we're going to do if we aren't accelerated.

104
00:05:56,700 --> 00:05:59,600
So here I can just say like if we're not trying to get, you know, for

105
00:05:59,600 --> 00:05:59,800
for now

106
00:06:00,000 --> 00:06:05,500
An accelerated sort, then do sort of this slow and squared version.

107
00:06:05,500 --> 00:06:08,600
That doesn't try to do any sort of restriction.

108
00:06:09,900 --> 00:06:10,400
So yeah.

109
00:06:10,400 --> 00:06:13,400
So if we do accelerated Sprite sort, then we're going to come through

110
00:06:13,400 --> 00:06:17,600
here and we're going to check each of these entries.

111
00:06:18,700 --> 00:06:22,800
And in order to do that, I've already got sort Sprite bound a but I'm

112
00:06:22,800 --> 00:06:27,300
going to have to get sort Sprite bound be from the entry itself.

113
00:06:29,100 --> 00:06:34,500
And that should be pretty easy because I'm pretty sure what we did for

114
00:06:34,500 --> 00:06:35,500
node index.

115
00:06:35,500 --> 00:06:37,900
Be, I don't know why I left the entry point, run there.

116
00:06:38,700 --> 00:06:39,200
There we go.

117
00:06:40,300 --> 00:06:44,000
So node index be just comes out of whatever the entry is in the Grid.

118
00:06:44,000 --> 00:06:48,100
At that point, I don't actually remember what we decided to store in

119
00:06:48,100 --> 00:06:48,800
this grid.

120
00:06:50,100 --> 00:06:52,600
And I also don't know why I didn't put it in the H file.

121
00:06:55,000 --> 00:06:58,600
Whole reason I have an h-file, there's to put stuff like this in it.

122
00:06:59,900 --> 00:07:00,700
All right, there we go.

123
00:07:01,400 --> 00:07:03,000
Get rid of that, get rid of that.

124
00:07:03,000 --> 00:07:04,600
Are it bracket?

125
00:07:04,600 --> 00:07:08,700
All right, so, occupant index is all we need from there.

126
00:07:10,900 --> 00:07:14,100
And then we can do exactly what we were doing before we can test for

127
00:07:14,100 --> 00:07:17,500
the to in the two intersections of A and B.

128
00:07:17,500 --> 00:07:21,100
We can then do the front back and we can, I don't know why I have

129
00:07:21,100 --> 00:07:24,400
re-enable, the push still in here because the push has been re-enabled

130
00:07:24,400 --> 00:07:25,300
for some time.

131
00:07:25,600 --> 00:07:26,200
Ladies and gentleman.

132
00:07:26,200 --> 00:07:28,800
This is why you never common code because those goes out of date.

133
00:07:28,800 --> 00:07:34,200
Anyway, so now in theory, accelerated Sprites or can be set to 0 or 1.

134
00:07:34,800 --> 00:07:39,500
It's now set to 1 and well, that's not a very good sign.

135
00:07:39,500 --> 00:07:40,200
Now, is it

136
00:07:41,500 --> 00:07:42,900
Not off to a good start.

137
00:07:43,000 --> 00:07:44,200
Not off to a good start.

138
00:07:44,700 --> 00:07:46,600
So here we are in our

139
00:07:50,500 --> 00:07:51,900
In our Loop.

140
00:08:00,100 --> 00:08:02,400
That seems like we've got.

141
00:08:05,000 --> 00:08:06,600
An odd sort of issue here.

142
00:08:06,600 --> 00:08:11,600
It looks like we've created a linked list that just kind of Loops in

143
00:08:11,600 --> 00:08:13,200
on itself on my right.

144
00:08:15,000 --> 00:08:15,900
Let's take a look here.

145
00:08:26,200 --> 00:08:30,300
Well, why do my eyes deceive me here?

146
00:08:30,300 --> 00:08:35,799
This says that there's a there's a good one for you.

147
00:08:36,000 --> 00:08:38,000
I hope it's not going to be that kind of night.

148
00:08:38,400 --> 00:08:39,600
Ya gotta love it.

149
00:08:39,600 --> 00:08:41,299
When you when you miss type that one.

150
00:08:41,400 --> 00:08:41,600
All right.

151
00:08:41,600 --> 00:08:42,100
Anyway,

152
00:08:43,200 --> 00:08:44,600
Let's try that one more time.

153
00:08:45,700 --> 00:08:45,900
Yeah.

154
00:08:45,900 --> 00:08:51,400
If you never actually update the iterator unsurprisingly, you don't,

155
00:08:51,400 --> 00:08:52,900
you don't get very good results.

156
00:08:53,800 --> 00:08:57,200
All right, so you know what I'm seeing here.

157
00:08:57,200 --> 00:08:59,600
Is it looks like we didn't make any obvious mistakes with the

158
00:09:00,000 --> 00:09:05,100
Diversion, you know, it's, it's certainly not obviously wrong.

159
00:09:05,100 --> 00:09:08,000
It doesn't mean it's right either.

160
00:09:08,700 --> 00:09:10,800
Let's take a look here though at the profile.

161
00:09:11,800 --> 00:09:14,400
So one of the things you'll notice about the profile, of course

162
00:09:14,400 --> 00:09:17,800
there's a tremendous amount of opengl nonsense in the way but we're

163
00:09:17,800 --> 00:09:19,700
already much faster than we were.

164
00:09:19,900 --> 00:09:21,900
Right, so that's a good, a good start.

165
00:09:21,900 --> 00:09:26,800
So let's go ahead and turn off the sort drawing and just take a look

166
00:09:26,800 --> 00:09:29,800
at what we've got because it'd be nice to know how

167
00:09:30,000 --> 00:09:33,100
How close we are to good or at this point.

168
00:09:35,200 --> 00:09:39,500
All right, so there's the profile and so you can kind of see that

169
00:09:39,500 --> 00:09:42,000
build spray graph is still a little bit.

170
00:09:42,000 --> 00:09:45,300
Probably more, you know, expensive than we would like it still taking,

171
00:09:45,700 --> 00:09:49,100
you know, fifty percent of the time, which is probably too much of the

172
00:09:49,100 --> 00:09:51,500
time to say the least.

173
00:09:51,500 --> 00:09:55,900
So it's not like, that's a great routine at this point, but it's

174
00:09:55,900 --> 00:09:57,600
certainly getting better, right?

175
00:09:57,600 --> 00:09:59,700
It's certainly better than it was.

176
00:10:00,500 --> 00:10:02,100
And you know who knows?

177
00:10:02,100 --> 00:10:03,400
We've got some things.

178
00:10:03,400 --> 00:10:03,500
We

179
00:10:03,700 --> 00:10:07,800
Play with as well to see what, what we want to do.

180
00:10:08,000 --> 00:10:15,200
So you know, I don't want to belabor the issue certainly because like

181
00:10:15,200 --> 00:10:18,700
I said, we don't have to worry about how long it takes to draw the

182
00:10:18,700 --> 00:10:19,700
debug information.

183
00:10:20,000 --> 00:10:23,800
But I do want to just just for like, you know, fun.

184
00:10:24,400 --> 00:10:26,200
I do want to look at one more thing.

185
00:10:26,600 --> 00:10:30,400
I would like to just go like okay, while we're in here and playing

186
00:10:30,400 --> 00:10:33,200
around with it, let's go ahead and do

187
00:10:33,600 --> 00:10:36,100
A test of, which part of this.

188
00:10:38,500 --> 00:10:44,900
Or rather, let's do a quick test to see what the accelerated Sprite

189
00:10:44,900 --> 00:10:45,600
sort does.

190
00:10:45,800 --> 00:10:48,300
If we give it a bigger grid to work with.

191
00:10:48,300 --> 00:10:51,500
So a grid with more cells, if that makes sense.

192
00:10:51,800 --> 00:10:56,900
So if we were going to do that, we would say okay you know maybe maybe

193
00:10:56,900 --> 00:11:00,600
instead of Sixteen by nine, let's double the count there and just do

194
00:11:01,200 --> 00:11:07,400
32 by 18 at so that now there's more buckets to sort inside and so you

195
00:11:07,400 --> 00:11:08,100
know, maybe that

196
00:11:08,300 --> 00:11:09,300
Oops, maybe it doesn't help.

197
00:11:09,300 --> 00:11:14,000
It's hard to say, it's certainly decreased the time, right?

198
00:11:14,700 --> 00:11:18,100
So it looks like we were still having sort of a little bit of the N

199
00:11:18,100 --> 00:11:19,000
squared Miss there.

200
00:11:20,000 --> 00:11:21,900
And you know, who knows?

201
00:11:21,900 --> 00:11:23,800
We could take that up even further.

202
00:11:23,800 --> 00:11:27,500
If we wanted to, there should be a Breaking Point somewhere here and

203
00:11:27,500 --> 00:11:30,300
the reason there's going to be or I shouldn't say is going to be the

204
00:11:30,300 --> 00:11:33,500
reason I would anticipate a Breaking Point is because the act of

205
00:11:33,500 --> 00:11:37,600
inserting things into cells, gets lower, the more that there are

206
00:11:37,700 --> 00:11:38,100
right.

207
00:11:38,200 --> 00:11:38,500
Right.

208
00:11:39,200 --> 00:11:42,800
And so you can see that, you know, again that that maybe did get us a

209
00:11:42,800 --> 00:11:48,000
little bit more there but it's not necessarily as drastic certainly,

210
00:11:48,000 --> 00:11:48,900
as the initial one.

211
00:11:49,500 --> 00:11:55,500
So, that's a lot better and it's enough better to that, you know, I

212
00:11:55,500 --> 00:11:56,000
don't know that.

213
00:11:56,000 --> 00:11:58,100
I would care too much about doing anything further.

214
00:11:58,300 --> 00:11:59,500
This is not an optimized.

215
00:12:00,700 --> 00:12:06,800
So we can also, you know, sort of count on the fact that when we're

216
00:12:06,800 --> 00:12:15,500
talking about actually doing this hardcore, yo will get a lot better

217
00:12:15,500 --> 00:12:16,100
performance.

218
00:12:16,100 --> 00:12:19,900
So, you know, this is still compiling, all the debug stuff in.

219
00:12:19,900 --> 00:12:24,700
And, you know, now you can see that our build Sprite graph is down way

220
00:12:24,700 --> 00:12:29,900
below, even the time, it takes to wait for stuff to happen, right?

221
00:12:30,800 --> 00:12:34,600
So I do Wonder to there if the case is well, you know, this is sort of

222
00:12:34,600 --> 00:12:39,000
a little bit perf critical I want and, you know, a lot of the times

223
00:12:39,000 --> 00:12:43,400
that clearing stuff, I think part of we pay a high cost in debug mode

224
00:12:43,400 --> 00:12:44,100
for the clears.

225
00:12:44,100 --> 00:12:46,000
It seems I don't really know.

226
00:12:46,400 --> 00:12:47,400
It's a little weird.

227
00:12:53,000 --> 00:12:53,600
but,

228
00:12:55,200 --> 00:12:56,300
Since we do know.

229
00:12:59,000 --> 00:13:02,700
Like sort of we've got these, these operations here, like that, we're

230
00:13:02,700 --> 00:13:05,500
doing, that could be potentially a little bit costly.

231
00:13:06,400 --> 00:13:12,800
I do wonder if we come in here and sort of clean this up a little,

232
00:13:12,800 --> 00:13:16,400
like those push trucks are probably kind of much more expensive than

233
00:13:16,400 --> 00:13:19,500
they should be in debug because a lot of stuff probably gets compiled

234
00:13:19,500 --> 00:13:20,300
out in there.

235
00:13:20,900 --> 00:13:22,000
I'm not sure exactly.

236
00:13:22,000 --> 00:13:24,200
But yeah, you can, you can kind of see

237
00:13:26,200 --> 00:13:28,500
It does get a little better, but I don't know.

238
00:13:28,500 --> 00:13:31,400
Like, in general, there's a lot of business in here.

239
00:13:31,800 --> 00:13:34,800
I'm a little bit tempted to push it a little bit further, you know,

240
00:13:34,900 --> 00:13:39,000
I'm a little bit tempted to say, Hey, you know, maybe we should go

241
00:13:39,000 --> 00:13:43,800
even further with that and, you know, try to make it a little bit

242
00:13:43,800 --> 00:13:44,400
less.

243
00:13:50,900 --> 00:13:53,300
Try to maybe reduce the number of things that are in here.

244
00:14:06,000 --> 00:14:09,900
I mean, I'm looking at it and I'm like, no, not really sure.

245
00:14:11,600 --> 00:14:14,600
I don't feel, you know, like the nice thing would be if we could sort

246
00:14:14,600 --> 00:14:19,700
of build the topological sort as we go, but I don't really know how.

247
00:14:21,700 --> 00:14:24,400
How plausible that is like.

248
00:14:24,400 --> 00:14:27,400
In other words, there's a question of whether or not we really need

249
00:14:27,400 --> 00:14:31,500
all of the chaining and or whether we need the second pass, you know.

250
00:14:38,100 --> 00:14:41,600
But I'm not thinking of anything obvious, so I feel like maybe that's

251
00:14:41,600 --> 00:14:42,500
enough for now.

252
00:14:50,400 --> 00:14:51,700
I feel like, maybe that's enough.

253
00:14:56,200 --> 00:14:57,100
So I'm going to leave that.

254
00:14:58,900 --> 00:14:59,800
And we probably can.

255
00:15:00,200 --> 00:15:04,800
A well, you know what, let's let's we can get rid of the the old

256
00:15:04,800 --> 00:15:05,600
version here.

257
00:15:05,700 --> 00:15:08,700
I'm just say, that's what we're going with for now.

258
00:15:09,800 --> 00:15:10,500
And off we go.

259
00:15:14,800 --> 00:15:19,800
Now, like I said before, we obviously have sort of a problem here that

260
00:15:20,600 --> 00:15:23,200
we could choose to address or Not address.

261
00:15:23,200 --> 00:15:28,600
I don't know whether we should or not and I alluded to it yesterday

262
00:15:28,600 --> 00:15:29,400
and

263
00:15:31,800 --> 00:15:36,600
You know, it's not going to cause us any practical problems unless we

264
00:15:36,600 --> 00:15:40,400
need to actually break Cycles more logically than we're doing right

265
00:15:40,400 --> 00:15:40,700
now.

266
00:15:40,700 --> 00:15:45,200
You know, if we keep ignoring the fact that Cycles could be problems

267
00:15:45,200 --> 00:15:48,200
in legitimate, things that we hand our sorting algorithm.

268
00:15:48,400 --> 00:15:49,100
Right?

269
00:15:50,300 --> 00:15:53,800
If we ignore that part, we don't then we don't have to worry but if

270
00:15:53,800 --> 00:15:56,900
we're worried about having to detect cycles for something other than

271
00:15:56,900 --> 00:15:58,300
just some debug checking.

272
00:15:59,500 --> 00:16:00,800
Where we don't really care.

273
00:16:00,900 --> 00:16:04,800
Then, we do have a problem of Cycles getting created by the fact that

274
00:16:04,800 --> 00:16:08,500
we're adding things multiple times potentially, because since you

275
00:16:08,500 --> 00:16:13,000
could place yourself in multiple grids, we sort of have this problem

276
00:16:13,100 --> 00:16:14,600
where we don't necessarily know.

277
00:16:14,600 --> 00:16:22,700
Whether we've already visited somebody on this run or if we've, you

278
00:16:22,700 --> 00:16:23,100
know,

279
00:16:24,900 --> 00:16:26,600
Well, let's put it this way.

280
00:16:27,600 --> 00:16:29,400
I feel like it's probably Worth showing.

281
00:16:29,400 --> 00:16:32,600
I don't know that if this were the real world, I would care about

282
00:16:32,600 --> 00:16:32,900
this.

283
00:16:33,200 --> 00:16:37,800
But since I can think of some fairly trivial ways that I would fix

284
00:16:37,800 --> 00:16:41,400
this, maybe I should just go ahead and fix this so that you can see

285
00:16:42,100 --> 00:16:46,200
what happens with the cycle determination.

286
00:16:46,700 --> 00:16:48,600
So let's go ahead and turn this on.

287
00:16:52,100 --> 00:16:54,200
And if you remember that, what we did is we made it.

288
00:16:54,200 --> 00:17:00,700
So that Cycles, when Cycles happen, we change them to be bright, you

289
00:17:00,700 --> 00:17:04,900
know, the sort groups get bright and I believe that previously, you

290
00:17:04,900 --> 00:17:06,800
know, there were not so many cycles.

291
00:17:06,800 --> 00:17:09,599
You can see there's like tons of Cycles all the time, that's almost

292
00:17:09,599 --> 00:17:13,800
everything's bright and I think that basically what we're seeing there

293
00:17:13,800 --> 00:17:15,400
is exactly what I just said.

294
00:17:15,599 --> 00:17:19,400
It's the fact that since we now have multiple grids and I'll draw this

295
00:17:19,400 --> 00:17:20,099
out for you.

296
00:17:29,700 --> 00:17:32,200
Since we now have things in multiple grids.

297
00:17:34,200 --> 00:17:34,700
Right?

298
00:17:34,800 --> 00:17:39,300
If this is a, then a exists in each of these

299
00:17:41,400 --> 00:17:43,200
That's just what's going to happen.

300
00:17:43,900 --> 00:17:48,700
And so when B comes along and you know B is maybe this rectangle, then

301
00:17:48,700 --> 00:17:52,800
what's going to happen to be is its first going to check for overlaps

302
00:17:52,800 --> 00:17:55,600
in this cell and then it's going to check in overlaps in this cell.

303
00:17:55,600 --> 00:17:57,900
And the reason that it's going to do that is because it spans both

304
00:17:57,900 --> 00:17:58,200
cells.

305
00:17:58,200 --> 00:17:59,900
And so in order to find all the people it might be

306
00:18:00,000 --> 00:18:00,400
Lapping.

307
00:18:00,600 --> 00:18:04,900
It has to check both otherwise, it might miss somebody who was only in

308
00:18:04,900 --> 00:18:07,100
this cell, let's say, see right?

309
00:18:07,400 --> 00:18:09,500
If it only checked in this cell, it wouldn't CC.

310
00:18:09,500 --> 00:18:12,500
And then we wouldn't have the correct sort, we'd be missing some of

311
00:18:12,500 --> 00:18:13,300
the overlaps.

312
00:18:14,000 --> 00:18:16,100
So given that's the case.

313
00:18:17,100 --> 00:18:21,800
The question is, what happens when we then go to link these up using

314
00:18:21,800 --> 00:18:22,600
the comparisons?

315
00:18:22,700 --> 00:18:26,700
Well, when be checks, and it sees a, in the list of cells, in the list

316
00:18:26,700 --> 00:18:29,900
of Sprites in this cell and then later it, checks it and

317
00:18:30,000 --> 00:18:33,900
sees it again in this, it doesn't know that it's a different a

318
00:18:35,200 --> 00:18:37,400
It doesn't know that right it?

319
00:18:37,500 --> 00:18:40,100
I'm sorry, it doesn't know that it's the same a, if as far as it

320
00:18:40,100 --> 00:18:42,700
knows, it could be a different rectangle because it has no markings.

321
00:18:42,700 --> 00:18:44,700
It doesn't keep track of what it visited.

322
00:18:44,900 --> 00:18:46,100
And how would we even do that, right?

323
00:18:46,100 --> 00:18:48,700
We have to like a hash table or something, where we put the index in

324
00:18:48,700 --> 00:18:51,400
that we visited or something like this, it would be expensive just to

325
00:18:51,400 --> 00:18:51,900
do.

326
00:18:53,200 --> 00:18:58,800
And so the question is how can we avoid adding a second Edge in that

327
00:18:58,800 --> 00:18:59,200
case?

328
00:18:59,200 --> 00:19:02,200
Because the first time we're going to add the edge once we already add

329
00:19:02,200 --> 00:19:04,600
an edge, we don't want to add an edge a second time just the same.

330
00:19:04,800 --> 00:19:05,200
Hair.

331
00:19:05,500 --> 00:19:06,200
Right.

332
00:19:15,400 --> 00:19:17,800
So what are we going to do, right?

333
00:19:19,900 --> 00:19:23,600
Well, what we need and we can go two ways with this, right?

334
00:19:24,700 --> 00:19:29,100
There's a more theoretical way and that way is usually not so good in

335
00:19:29,100 --> 00:19:30,800
practice if you're trying to do things quickly.

336
00:19:31,200 --> 00:19:34,300
And that's just like, well, you know, we could have done our Edge

337
00:19:34,300 --> 00:19:38,300
stuff as a tree or a hash table or something, right?

338
00:19:38,400 --> 00:19:42,600
Where we just put edges into this storage structure and then we pull

339
00:19:42,600 --> 00:19:46,900
them out later and it's not designed for quick to wrestle like a

340
00:19:46,900 --> 00:19:49,500
little like linked list, right off the thing or array, or whatever.

341
00:19:50,700 --> 00:19:53,600
And if that was the case, then when you said, hey, there's an edge

342
00:19:53,600 --> 00:19:56,900
from B to a would go into that, you know, structure and it would

343
00:19:56,900 --> 00:19:59,600
Collide, and go, I don't need to add that because I've already got it

344
00:19:59,600 --> 00:20:00,500
or something, right?

345
00:20:00,700 --> 00:20:04,800
So you could imagine doing a more versatile, more theoretical graph

346
00:20:04,800 --> 00:20:08,700
structure but, you know, we're not really looking at that kind of a

347
00:20:08,700 --> 00:20:09,200
thing here.

348
00:20:09,200 --> 00:20:11,000
We're trying to make a little Tweaky fast.

349
00:20:11,000 --> 00:20:13,400
A little thing that just runs in the back end of the renderer and we

350
00:20:13,400 --> 00:20:15,700
don't necessarily want to go down that route because it doesn't seem

351
00:20:15,700 --> 00:20:16,500
very fruitful.

352
00:20:17,200 --> 00:20:19,400
So what we would like is some hacker thing.

353
00:20:19,600 --> 00:20:23,400
That's just it right there in the data structures themselves in a very

354
00:20:23,400 --> 00:20:25,000
like easy to poke at Fashion.

355
00:20:25,100 --> 00:20:30,200
We would like some way of saying, hey let's not add another edge here

356
00:20:30,200 --> 00:20:33,000
because we already added an edge right.

357
00:20:34,500 --> 00:20:34,900
Okay.

358
00:20:36,500 --> 00:20:42,000
So I think or at least I would suspect that this is not going to be

359
00:20:42,000 --> 00:20:44,500
particularly difficult to solve.

360
00:20:44,800 --> 00:20:48,400
And the reason that I say that is, if we take a look at what's going

361
00:20:48,400 --> 00:20:54,900
on in in these data structures, here we have two passes, right?

362
00:20:55,200 --> 00:20:57,600
We've got to pass that a Giselle ads.

363
00:20:57,600 --> 00:20:59,800
Edges and then a pass that walk.

364
00:21:00,000 --> 00:21:05,800
Those edges and so, you know, we've got recursive front to back here

365
00:21:06,300 --> 00:21:07,900
and that's going to walk these things.

366
00:21:08,200 --> 00:21:11,800
And then, you know, we've got this thing that actually adds them in.

367
00:21:12,400 --> 00:21:17,200
And so when we're adding them in, we've got, you know, we've got node

368
00:21:17,200 --> 00:21:22,100
index, a and we've got entry be here, and we're about to do a test to

369
00:21:22,100 --> 00:21:24,400
say, do these two rectangles intersect.

370
00:21:25,500 --> 00:21:29,900
Well, what we'd like to say is something more, like, if I have

371
00:21:30,000 --> 00:21:37,900
Haven't already checked this rectangle and the rectangles intersect

372
00:21:37,900 --> 00:21:41,400
then I will add that struct, right?

373
00:21:41,400 --> 00:21:44,400
That's what we actually wanted to say button by the way.

374
00:21:44,400 --> 00:21:45,700
Did I just remembered?

375
00:21:45,900 --> 00:21:46,100
Yeah.

376
00:21:46,100 --> 00:21:47,700
I just want to make sure I change back debug mode.

377
00:21:49,900 --> 00:21:53,900
So we need some way of computing that if I haven't already checked

378
00:21:53,900 --> 00:21:54,700
this rectangle.

379
00:21:55,100 --> 00:21:59,000
Well what do I know about these rectangles right?

380
00:21:59,600 --> 00:22:04,300
When I am doing insertions for node index a I know that the entire

381
00:22:04,300 --> 00:22:09,300
time I'm doing insertions for a I'm going to be looking at people who

382
00:22:09,300 --> 00:22:10,700
aren't a right.

383
00:22:10,700 --> 00:22:13,800
I'm never going to look at myself because I haven't added myself to

384
00:22:13,800 --> 00:22:16,100
the grid Square yet, right?

385
00:22:16,900 --> 00:22:19,600
So all of these people are people that I haven't visited

386
00:22:19,800 --> 00:22:22,000
It on the Node index a trip yet.

387
00:22:23,800 --> 00:22:28,300
And so I just need a way of marking them to say, I have visited them

388
00:22:28,300 --> 00:22:29,900
on the Note index a trip.

389
00:22:31,100 --> 00:22:32,600
Right, that's all I really need.

390
00:22:38,600 --> 00:22:43,500
When I then move to the next node index a, you know, the next setting

391
00:22:43,500 --> 00:22:49,000
for note index a, I then need a way to say, okay, check, you know, I

392
00:22:49,000 --> 00:22:49,400
want to know.

393
00:22:49,400 --> 00:22:52,700
Now, if this pass-through has ever touched during these people,

394
00:22:53,900 --> 00:22:59,000
So we have, you know, a pretty easy way, I think to, to make this

395
00:22:59,000 --> 00:23:00,000
work, right?

396
00:23:00,100 --> 00:23:04,400
We've got the Sprite Flags, we've got visited drawn debug box and

397
00:23:04,400 --> 00:23:05,600
cycle, right?

398
00:23:05,800 --> 00:23:09,300
Well, it wouldn't be particularly difficult for us to just move those

399
00:23:09,300 --> 00:23:10,700
up, right?

400
00:23:10,700 --> 00:23:14,800
We wouldn't even necessarily need any additional space, right?

401
00:23:14,800 --> 00:23:19,700
I could just say, okay, you know, pretend that these are up in the, in

402
00:23:19,700 --> 00:23:20,900
the high area.

403
00:23:20,900 --> 00:23:23,000
So let's put them, you know, let's put them here or

404
00:23:40,300 --> 00:23:40,800
Right.

405
00:23:44,600 --> 00:23:50,700
So now with that leaves me with is the entire bottom part is free for

406
00:23:50,700 --> 00:23:51,800
me to store stuff, right?

407
00:23:51,800 --> 00:23:54,600
I've got 24 million or some odd.

408
00:23:54,600 --> 00:23:55,300
I mean I don't even know.

409
00:23:55,300 --> 00:23:58,400
So I've got I've got what is it 24 bits there.

410
00:23:58,400 --> 00:23:59,700
I've got 24.

411
00:24:00,300 --> 00:24:03,500
So I got 24 million Sprites worth of indices, I could shove into the

412
00:24:03,500 --> 00:24:06,700
bottom B and if I needed more than that, well really I could go up

413
00:24:06,700 --> 00:24:08,600
even another bit if I wanted to.

414
00:24:08,600 --> 00:24:10,700
In fact, I don't even know why this is looks like this.

415
00:24:10,700 --> 00:24:12,600
We could just do that, right?

416
00:24:13,500 --> 00:24:14,500
If that makes sense.

417
00:24:17,000 --> 00:24:20,600
And I don't know if enums technically can't be you 32s, I don't really

418
00:24:20,600 --> 00:24:21,100
care.

419
00:24:21,100 --> 00:24:22,400
We'll see if the compiler complains.

420
00:24:24,500 --> 00:24:29,300
Oh C++ but point being so, you know, there's a massive amount of

421
00:24:29,300 --> 00:24:29,600
space.

422
00:24:29,600 --> 00:24:31,100
We've got there that were not using.

423
00:24:31,400 --> 00:24:35,000
So what I could do is just say, okay, there's an index mask

424
00:24:42,200 --> 00:24:47,900
And I could use that index mask, to mask off the bottom B and use them

425
00:24:48,000 --> 00:24:52,000
as a generation count, where the generation count is just whatever the

426
00:24:52,000 --> 00:24:53,000
note is that I'm on.

427
00:24:53,400 --> 00:24:56,000
And so then when I go to check someone, I can easily tell what I've

428
00:24:56,000 --> 00:24:57,400
checked in this round or not.

429
00:24:57,400 --> 00:25:00,000
Because if the bottom of their Flags,

430
00:25:01,200 --> 00:25:01,900
Right?

431
00:25:02,000 --> 00:25:04,800
If the bottom of their Flags doesn't have.

432
00:25:05,200 --> 00:25:06,800
My number, my note, index a.

433
00:25:06,800 --> 00:25:09,700
And there, then, that means I have not checked this person yet.

434
00:25:11,000 --> 00:25:18,500
so, what I can do here is say, like, okay, if I were to take the, the

435
00:25:19,800 --> 00:25:24,700
entry, or sorts, right, bound be and if I were to take the flags in

436
00:25:24,700 --> 00:25:29,600
that one and say and them with the Sprite index mask,

437
00:25:32,700 --> 00:25:38,300
If that's not equal to my index, then I haven't touched it yet.

438
00:25:40,000 --> 00:25:41,000
Right, anything else?

439
00:25:41,100 --> 00:25:42,100
And it's not correct.

440
00:25:44,200 --> 00:25:49,200
If I get in here and I find that I haven't touched it, then I could

441
00:25:49,200 --> 00:25:54,500
just say well let's just go ahead and set the be Flags equal to it.

442
00:25:55,400 --> 00:25:59,700
And by the way I don't really have to you know, I could assert just to

443
00:25:59,700 --> 00:26:00,500
make sure

444
00:26:03,000 --> 00:26:03,900
That it'll fit.

445
00:26:10,000 --> 00:26:14,200
And that's just a little surfing to say, oh, you know, if the part

446
00:26:14,200 --> 00:26:17,000
that I, you know, the mass that I'm using a story, this would actually

447
00:26:17,000 --> 00:26:19,400
get rid of some any data in the node, indices.

448
00:26:19,400 --> 00:26:21,300
Then that's obviously a bad thing.

449
00:26:21,500 --> 00:26:24,800
In order to get there, we have to be way up in the, you know, in the

450
00:26:25,500 --> 00:26:29,500
almost to the billions of Sprites and that would make this algorithm

451
00:26:29,500 --> 00:26:32,200
runs so slowly that it wouldn't be 60 frames a second.

452
00:26:32,200 --> 00:26:33,400
I can guarantee you that.

453
00:26:33,900 --> 00:26:37,100
So now typically big deal there but we can also

454
00:26:37,200 --> 00:26:43,500
We want to even though we did an assertion here, you know, we can, we

455
00:26:43,500 --> 00:26:46,700
can also, I guess, assert that no one has tried to use any of those

456
00:26:46,700 --> 00:26:49,000
flags since then, just in case this algorithm changes.

457
00:26:49,000 --> 00:26:55,000
But we could say like oh assert that if I end, you know, it with the,

458
00:26:55,000 --> 00:26:56,800
the not of it.

459
00:26:56,800 --> 00:26:59,600
So I look at the parts that aren't indicated by the

460
00:27:00,800 --> 00:27:02,200
Make sure that there's nothing in there.

461
00:27:04,000 --> 00:27:07,200
So that would give me that sort of marker that I need.

462
00:27:07,200 --> 00:27:10,000
And hopefully you guys kind of sauce.

463
00:27:10,000 --> 00:27:11,400
Mm, love that texture download.

464
00:27:13,500 --> 00:27:15,100
Hopefully that would give me all.

465
00:27:15,100 --> 00:27:17,600
I really need to make my cycle detection.

466
00:27:18,500 --> 00:27:21,700
Correct now because now we've done it and you can see it spazzing out,

467
00:27:21,700 --> 00:27:22,000
right?

468
00:27:22,000 --> 00:27:24,700
Exactly the same place as it used to when there actually is a cycle

469
00:27:24,700 --> 00:27:26,000
when the guy goes through the thing.

470
00:27:27,600 --> 00:27:31,100
So, hey, good job us, right?

471
00:27:34,100 --> 00:27:37,400
So, I hope that made some reasonable sense.

472
00:27:40,400 --> 00:27:43,300
I don't know, I guess I usually don't check the stream for questions

473
00:27:43,300 --> 00:27:47,000
at the time so I guess if you have questions about what I just did

474
00:27:47,000 --> 00:27:51,400
there, ask him at the end but hopefully it made reasonable sense.

475
00:27:51,400 --> 00:27:56,400
Essentially what we're doing is we're just every pass through when

476
00:27:56,400 --> 00:28:00,600
we're checking for, you know, a particular rectangle, particular

477
00:28:00,600 --> 00:28:04,000
Sprite rectangle, against all the other rectangles in its areas.

478
00:28:05,200 --> 00:28:06,300
We're just going, hey.

479
00:28:07,300 --> 00:28:12,400
Every time we check someone tag them with our index, and if we see

480
00:28:12,400 --> 00:28:14,400
that that index is there already.

481
00:28:15,200 --> 00:28:18,800
Well, then we know we must have already processed it and if not, then

482
00:28:18,800 --> 00:28:19,500
put the tag on.

483
00:28:19,500 --> 00:28:21,000
So we'll know that we did.

484
00:28:21,500 --> 00:28:26,800
And, you know, if the algorithm was completely unstructured and we

485
00:28:26,800 --> 00:28:30,600
were testing anybody against anybody, randomly this sort of trick

486
00:28:30,600 --> 00:28:34,800
wouldn't necessarily work because you would need to store for every

487
00:28:34,800 --> 00:28:37,000
node which nodes had

488
00:28:37,200 --> 00:28:38,200
I stood against it right.

489
00:28:38,200 --> 00:28:40,500
It would it would have to actually store everyone who had tested

490
00:28:40,500 --> 00:28:44,300
against it and check to see when we come through but because we know

491
00:28:44,300 --> 00:28:48,900
we check one Sprite rectangle against everything in its area and then

492
00:28:48,900 --> 00:28:51,000
move on to the next one and check everything in this area.

493
00:28:51,300 --> 00:28:55,100
Then we only need one tag because all we need to know is did we do it

494
00:28:55,100 --> 00:28:58,400
on this pass through because we're never going to come back and check

495
00:28:58,400 --> 00:29:01,200
this rectangle as the primary rectangle.

496
00:29:01,200 --> 00:29:01,700
Again.

497
00:29:02,800 --> 00:29:03,200
Right.

498
00:29:12,700 --> 00:29:15,100
So now we're in real good shape, I think.

499
00:29:16,600 --> 00:29:20,600
And I'll go ahead and turn off the sort drawing one last time.

500
00:29:21,500 --> 00:29:25,700
But, you know, I don't think there's really a whole lot else to do

501
00:29:25,700 --> 00:29:30,000
with the sort at the moment, it seems like that's pretty stable and,

502
00:29:30,000 --> 00:29:32,100
you know, Works real nice.

503
00:29:32,500 --> 00:29:36,800
And you can even see that, you know, looking at the profile.

504
00:29:36,800 --> 00:29:39,900
Just this is not scientific obviously but eyeballing it.

505
00:29:40,600 --> 00:29:45,300
I think we were up around 20 to 22 24 milliseconds before not adding

506
00:29:45,300 --> 00:29:46,000
those extra.

507
00:29:46,200 --> 00:29:46,700
Edge's.

508
00:29:47,000 --> 00:29:51,000
Right saved us some time in debug mode as well, because it's not

509
00:29:51,000 --> 00:29:53,000
pushing on extra edges that doesn't have to do.

510
00:29:53,200 --> 00:29:56,800
And in release mode, a lot of I think those Edge push has become

511
00:29:56,900 --> 00:29:59,200
fairly cheap, right?

512
00:29:59,300 --> 00:29:59,900
So,

513
00:30:00,000 --> 00:30:02,900
Not like a real savings in the sense of the shipping version of the

514
00:30:02,900 --> 00:30:03,300
game.

515
00:30:03,400 --> 00:30:06,400
But, you know, I like to keep the debug version relatively fast

516
00:30:06,400 --> 00:30:09,000
especially on handmade hero because we like to step through the debug

517
00:30:09,000 --> 00:30:11,900
version so I can show you things into bugger and as you've seen the

518
00:30:11,900 --> 00:30:16,200
debugger can't handle debugging release code hardly at all and so it's

519
00:30:16,200 --> 00:30:20,000
very hard for me to do anything instructional, you know, if I don't

520
00:30:20,000 --> 00:30:22,500
have the debug version running relatively fast.

521
00:30:23,300 --> 00:30:28,000
So you know that was kind of a nice bonus, right?

522
00:30:28,100 --> 00:30:29,800
That we got as

523
00:30:30,000 --> 00:30:33,500
As part of making those, you know, not pushing on redundant edges that

524
00:30:33,500 --> 00:30:34,500
we don't need we.

525
00:30:34,500 --> 00:30:37,900
Now get this sort of bonus of, hey, even when we stress the system,

526
00:30:38,400 --> 00:30:39,000
we, yeah.

527
00:30:39,000 --> 00:30:43,800
We drop off a 60 hertz, but we don't not not very far right.

528
00:30:43,800 --> 00:30:47,600
We still got of a pretty darn good speed profile.

529
00:30:47,600 --> 00:30:50,400
Even Even in our in our janky assist State.

530
00:30:52,500 --> 00:30:53,000
All right.

531
00:30:55,600 --> 00:30:56,100
so,

532
00:30:59,000 --> 00:31:00,900
I'm not sure what we should start on here.

533
00:31:00,900 --> 00:31:05,300
I should probably save starting on anything to Major till the

534
00:31:05,300 --> 00:31:07,900
beginning of the stream next time around.

535
00:31:09,000 --> 00:31:16,900
So yeah I think maybe you know one thing that we do kind of need to do

536
00:31:16,900 --> 00:31:18,700
maybe I can get this done in 30 minutes.

537
00:31:18,700 --> 00:31:25,700
I'm not 110% positive but I've got 30 minutes.

538
00:31:26,100 --> 00:31:28,200
One thing that we haven't really looked at yet.

539
00:31:29,300 --> 00:31:35,100
Is we have not really looked at how we would go about making

540
00:31:35,300 --> 00:31:38,300
suggestions to the Sorting algorithm if we wanted to.

541
00:31:38,400 --> 00:31:43,100
And I'm not sure, I'll be honest.

542
00:31:43,100 --> 00:31:45,000
I don't really know.

543
00:31:49,500 --> 00:31:52,900
What the way is that we most want to do this.

544
00:31:56,300 --> 00:31:58,100
Because there's a couple different things we could do.

545
00:31:58,100 --> 00:32:01,100
So let me just give you a little bit of an example.

546
00:32:01,100 --> 00:32:02,200
So let me label this here.

547
00:32:02,200 --> 00:32:05,400
This was grid sorting

548
00:32:07,900 --> 00:32:13,600
But anyway, let's move down here to manual.

549
00:32:15,800 --> 00:32:16,800
Sort.

550
00:32:17,800 --> 00:32:19,000
Override.

551
00:32:21,300 --> 00:32:27,000
Now it may become clear to us after we do some work with the actual

552
00:32:27,000 --> 00:32:30,200
game assets, a little further down the road that we don't really need

553
00:32:30,200 --> 00:32:31,200
anything like this.

554
00:32:31,300 --> 00:32:35,300
I don't really necessarily know, but I do certainly know that the

555
00:32:35,300 --> 00:32:39,200
possibility exists that we will need to do some sort of manual,

556
00:32:39,200 --> 00:32:40,100
sorting override.

557
00:32:40,100 --> 00:32:43,700
And the example that I've already sort of used for this in a couple of

558
00:32:43,700 --> 00:32:44,800
cases, right?

559
00:32:44,800 --> 00:32:46,500
Is the hero Sprite.

560
00:32:48,900 --> 00:32:52,200
So, you know, we've got this hero Sprite and in the future it

561
00:32:52,200 --> 00:32:53,700
definitely looks a little more.

562
00:32:53,700 --> 00:32:58,700
I mean you saw right what they looked like on the Molly rocket blog,

563
00:32:59,000 --> 00:32:59,500
you know?

564
00:33:00,000 --> 00:33:01,700
Definitely more top-down.

565
00:33:02,500 --> 00:33:07,100
You can see here on this post as well, you can see what the hero kind

566
00:33:07,100 --> 00:33:07,700
of looks like.

567
00:33:07,900 --> 00:33:13,300
So Anna has definitely gone ahead and really solved a lot of our

568
00:33:13,300 --> 00:33:14,800
perspective problems for us.

569
00:33:14,800 --> 00:33:20,000
So that was kind of nice and it's going to be a lot easier to keep

570
00:33:20,000 --> 00:33:24,800
that the art looking consistent with the new art than it was with this

571
00:33:24,800 --> 00:33:26,600
art, which is really kind of not.

572
00:33:27,400 --> 00:33:29,900
It doesn't it doesn't really work with the way we were doing.

573
00:33:30,000 --> 00:33:30,300
The Sorting.

574
00:33:30,300 --> 00:33:31,700
So it was very fake.

575
00:33:32,100 --> 00:33:35,300
Whereas this is a lot more consistent and it has a lot more of a

576
00:33:35,300 --> 00:33:38,900
consistent perspective, feel to it across the assets.

577
00:33:39,300 --> 00:33:41,700
So given that, that's true.

578
00:33:41,700 --> 00:33:46,100
You know, we may get out of jail, free a little bit more than we would

579
00:33:46,100 --> 00:33:51,200
otherwise, because there's such a strong perspective to it now, but

580
00:33:52,700 --> 00:33:55,400
In the case where we have something like that, you know.

581
00:33:55,400 --> 00:33:55,600
Okay.

582
00:33:55,600 --> 00:33:59,400
We've got the glove here or whatever the punching glove.

583
00:34:01,100 --> 00:34:04,000
Well actually people's thumbs are on the inside, just in case you were

584
00:34:04,000 --> 00:34:04,500
wondering.

585
00:34:06,500 --> 00:34:07,400
It's not like that.

586
00:34:07,400 --> 00:34:10,699
Maybe, I don't know and we've got the glove and then we've got the

587
00:34:10,699 --> 00:34:12,400
head here, right?

588
00:34:13,800 --> 00:34:16,100
Here's the nose, very important.

589
00:34:16,800 --> 00:34:19,600
And maybe there's a hat because it was there was a steam sale.

590
00:34:23,699 --> 00:34:26,300
So we've got this situation and we know, we've got hat, we've got

591
00:34:26,300 --> 00:34:31,000
head, we've got body, and we've got glove, and we maybe know that.

592
00:34:31,000 --> 00:34:31,500
Okay?

593
00:34:31,600 --> 00:34:35,900
The glove is going to move all around the body and punch and stuff and

594
00:34:35,900 --> 00:34:40,800
so that probably wants to be sorted normally and go behind things and

595
00:34:40,800 --> 00:34:41,300
whatever.

596
00:34:41,600 --> 00:34:46,199
But this pretty much always looks like this it pretty much always goes

597
00:34:46,300 --> 00:34:50,000
had on top right then head and then body.

598
00:34:51,400 --> 00:34:52,900
And is never going to go any other way.

599
00:34:53,000 --> 00:34:57,700
Like you really can't ever do anything else until the head

600
00:34:57,700 --> 00:34:58,900
disaggregates from the body.

601
00:34:58,900 --> 00:35:01,500
Like if you get some magic spell, where you float away and they were

602
00:35:01,500 --> 00:35:05,400
separate entities, maybe but while we're talking about one coherent

603
00:35:05,400 --> 00:35:11,800
entity where the head and the body are together, I shouldn't say when

604
00:35:11,800 --> 00:35:16,400
queer entity one coherent system when they're together and they're,

605
00:35:16,400 --> 00:35:19,800
you know, in the brain it's working on head and body together.

606
00:35:21,200 --> 00:35:24,700
It's not clear to me that we will always get reasonable results.

607
00:35:24,700 --> 00:35:30,200
If we just let the Sorting do its thing now, maybe it would but maybe

608
00:35:30,300 --> 00:35:34,200
I won't because if you think about what would happen here if these are

609
00:35:34,200 --> 00:35:39,200
wise, frites then as one of as the head moves like back, it's going to

610
00:35:39,200 --> 00:35:42,600
go behind the body and as the head moves forward, it's going to go in

611
00:35:42,600 --> 00:35:44,300
front of the body, right?

612
00:35:44,900 --> 00:35:49,000
And that's not really what we want to have happen.

613
00:35:49,300 --> 00:35:51,000
So I don't know to what extent

614
00:35:51,100 --> 00:35:57,200
and we're going to need to go in there and say, you know, this is

615
00:35:57,200 --> 00:35:59,600
stacked in Z, these are actually

616
00:36:00,000 --> 00:36:02,600
In Z, even though their wife's rights, right.

617
00:36:02,800 --> 00:36:06,300
And we don't want them to necessarily not be why Sprites because we do

618
00:36:06,300 --> 00:36:09,800
want that crazy, two and a half D nonsense, where the glove can go

619
00:36:09,800 --> 00:36:12,600
behind it and in front of it, right?

620
00:36:15,100 --> 00:36:16,800
So it's kind of a difficult problem.

621
00:36:17,400 --> 00:36:20,800
And so the question here is, how do we want to deal with that sort of

622
00:36:20,800 --> 00:36:22,900
manual sort override thing where we're saying?

623
00:36:22,900 --> 00:36:28,700
Well, alright, you know, we don't really want these to be sorted using

624
00:36:28,700 --> 00:36:31,800
our sort rule because we know our sort rule is a hack and any sort

625
00:36:31,800 --> 00:36:35,300
rule that we come up with is going to be a hack and so we're going to

626
00:36:35,300 --> 00:36:39,000
need some ways to work with that hack and make sure that it can

627
00:36:39,000 --> 00:36:42,500
doesn't cause critical problems like we would have in this case, I

628
00:36:42,500 --> 00:36:43,000
think,

629
00:36:44,900 --> 00:36:48,400
Now one thing we could do is add more hacking this to the sort rule

630
00:36:48,400 --> 00:36:51,300
meaning we could say, well, you know, we want a sort rule, that's a

631
00:36:51,300 --> 00:36:52,100
little more generic.

632
00:36:52,100 --> 00:36:55,900
So maybe we have this idea that there's Z planes of the, why Sprites

633
00:36:55,900 --> 00:36:56,400
of a stagnant?

634
00:36:56,700 --> 00:37:01,500
Yeah, I don't know that was a really nasty gray area and I'm not sure

635
00:37:01,500 --> 00:37:05,600
that there's really all that much to be mined out of that.

636
00:37:06,700 --> 00:37:10,200
You know, sorting these two and a half D things is a real pain in the

637
00:37:10,200 --> 00:37:10,600
butt.

638
00:37:10,600 --> 00:37:12,900
I guess is what it boils down to, and I don't know.

639
00:37:13,700 --> 00:37:15,400
There are all that many good Solutions there.

640
00:37:15,700 --> 00:37:20,200
So I would be more inclined to look for a way of saying when we know

641
00:37:20,200 --> 00:37:22,700
how something has to be sorted for artistic purposes.

642
00:37:23,000 --> 00:37:26,400
Can then we just specify that directly so that will always happen

643
00:37:26,400 --> 00:37:27,600
properly, right?

644
00:37:28,500 --> 00:37:30,300
So there's two ways we could do this.

645
00:37:31,700 --> 00:37:35,400
And here are the two ways that I think we could do it one way.

646
00:37:35,400 --> 00:37:39,600
Is we could say there are there are rule.

647
00:37:39,600 --> 00:37:41,100
There are edges, right?

648
00:37:41,100 --> 00:37:43,500
Edges, added

649
00:37:45,000 --> 00:37:45,700
Manually.

650
00:37:46,600 --> 00:37:50,700
So there's some way to like, shove down the render, you know, as the

651
00:37:50,700 --> 00:37:56,000
render is going, the render queue is getting filled in addition to

652
00:37:56,000 --> 00:37:58,500
putting sort Sprite bounds in there, which is what we're putting in

653
00:37:58,500 --> 00:37:58,600
there.

654
00:37:58,600 --> 00:38:01,200
Right now, we could also put in there.

655
00:38:05,300 --> 00:38:10,000
Edges that we want to be mandatory like they don't have to overlap

656
00:38:10,300 --> 00:38:10,600
there.

657
00:38:10,600 --> 00:38:13,800
Just edges that already exists there, right?

658
00:38:21,400 --> 00:38:26,200
So when we go to process, something and we're going to do an is in

659
00:38:26,200 --> 00:38:28,800
front of operation on it or whatever.

660
00:38:30,400 --> 00:38:33,700
There's another way that we could come to that conclusion rather than

661
00:38:33,700 --> 00:38:35,000
having to test it.

662
00:38:35,000 --> 00:38:37,600
We could just add an edge automatically.

663
00:38:37,600 --> 00:38:41,700
Good says this is in front of this and don't process intersection

664
00:38:41,700 --> 00:38:42,900
between these two things.

665
00:38:44,000 --> 00:38:44,500
Right.

666
00:38:52,100 --> 00:38:54,300
There's some difficulties with that.

667
00:38:54,600 --> 00:38:59,100
Certainly one of them is easier said than done, right?

668
00:38:59,100 --> 00:38:59,800
We want the book.

669
00:39:00,100 --> 00:39:01,500
On that sort of thing to be fast.

670
00:39:01,500 --> 00:39:05,600
And it's not clear exactly how adding the edges wouldn't be hard

671
00:39:05,700 --> 00:39:10,600
avoiding, having the sort come through and re add more edges.

672
00:39:10,600 --> 00:39:14,800
You didn't want is the hard part, so it's the, the suppression is the

673
00:39:14,800 --> 00:39:16,900
harder part there, right?

674
00:39:19,400 --> 00:39:22,100
But you know, are there ways around that probably?

675
00:39:23,100 --> 00:39:23,700
Probably.

676
00:39:25,700 --> 00:39:28,500
And it would also depend on how much of this you needed to do.

677
00:39:28,800 --> 00:39:32,800
You know, if you only needed one Edge, one manually specified Edge per

678
00:39:32,800 --> 00:39:33,400
Sprite.

679
00:39:35,300 --> 00:39:39,400
One is in front of if you will / Sprite or something like that, it's a

680
00:39:39,400 --> 00:39:42,900
lot easier than if it's many, you know, if it's like oh no we've got

681
00:39:42,900 --> 00:39:45,100
to have 10 for some of them or something like this.

682
00:39:47,700 --> 00:39:48,400
So, I don't know.

683
00:39:48,400 --> 00:39:50,100
So, you know, that's

684
00:39:52,800 --> 00:39:57,700
That's one way, another way of doing it is basically, having a way of

685
00:39:57,700 --> 00:40:02,800
saying these Sprites get drawn as a group and don't sort them, right?

686
00:40:03,700 --> 00:40:06,800
And that has some attractiveness to it.

687
00:40:07,100 --> 00:40:09,900
The reason that's a little bit attractive is because we sort of know,

688
00:40:09,900 --> 00:40:15,600
we probably want that anyway, and, you know, we could even you could,

689
00:40:15,600 --> 00:40:19,100
you could imagine making this a fairly flexible system without too

690
00:40:19,100 --> 00:40:22,400
much work where we could even keep sorting within the

691
00:40:22,700 --> 00:40:24,400
Themselves if we wanted to.

692
00:40:25,600 --> 00:40:29,400
So, you know, you could imagine, you've got a sort Sprite bound and it

693
00:40:29,400 --> 00:40:30,600
says, this is a why bound.

694
00:40:30,600 --> 00:40:35,600
And in it, you could stack some Z Sprites and say sort this first

695
00:40:35,600 --> 00:40:38,200
then, you know, wherever it's going to get drawn, you draw, whatever

696
00:40:38,200 --> 00:40:41,200
is inside it sorted by some other criteria

697
00:40:42,200 --> 00:40:42,700
right?

698
00:40:44,100 --> 00:40:46,700
And it's not out of the question that we could do that.

699
00:40:46,800 --> 00:40:49,800
I don't know because we're using a grid acceleration scheme.

700
00:40:49,900 --> 00:40:51,800
I don't know that there's really all that.

701
00:40:55,600 --> 00:40:56,800
Apparently, I'm very tired.

702
00:40:58,900 --> 00:41:01,200
Because we're using great acceleration scheme, it makes a little bit

703
00:41:01,200 --> 00:41:03,200
trickier and the reason it makes little bit trickier as because we

704
00:41:03,200 --> 00:41:06,700
kind of have this one acceleration structure, we kind of want to pass

705
00:41:06,700 --> 00:41:10,200
everything through and we don't really want to have to deal with a lot

706
00:41:10,200 --> 00:41:11,700
of fussing there, right?

707
00:41:11,700 --> 00:41:15,400
So if we have to do sort of sub-regions of sorting, well, it wouldn't

708
00:41:15,400 --> 00:41:18,400
be too bad if there's only a couple things in it, but you know what?

709
00:41:18,400 --> 00:41:22,100
If we wanted to do it for like, say the debug thing where we're just

710
00:41:22,100 --> 00:41:25,700
saying this is one layer that gets sorted separately, and then drawn

711
00:41:25,700 --> 00:41:27,500
on top, or whatever else, right?

712
00:41:30,500 --> 00:41:35,900
And the same thing is going to be true for, you know, for room layers.

713
00:41:36,300 --> 00:41:39,100
And so to a certain extent, you know,

714
00:41:41,700 --> 00:41:45,700
We're going to have to kind of deal with that that sort of coarse

715
00:41:45,700 --> 00:41:47,100
grain multiple sorts.

716
00:41:49,000 --> 00:41:52,000
And I just don't know if we want to start having lots of little sorts

717
00:41:52,000 --> 00:41:53,000
happening in their ribs.

718
00:41:55,200 --> 00:41:55,900
Oops.

719
00:41:56,500 --> 00:41:59,800
Apparently, I can draw with the Eraser didn't know that.

720
00:42:02,900 --> 00:42:03,600
So yeah.

721
00:42:19,100 --> 00:42:21,000
Really, why you do is go take a nap?

722
00:42:21,200 --> 00:42:22,700
Well, probably go to bed.

723
00:42:32,900 --> 00:42:35,300
I don't know, I don't have a real strong opinion on this.

724
00:42:41,100 --> 00:42:43,300
I think the thing we probably would want to do.

725
00:42:44,800 --> 00:42:47,200
Is, you know?

726
00:42:49,600 --> 00:42:53,600
Because I think it would be relatively simple if we just have the sort

727
00:42:53,600 --> 00:42:58,100
Sprite bounds potentially have, you know, runs in them essentially

728
00:42:58,100 --> 00:43:08,100
like, you know, if I pop over here to the sort Sprite band stuff, you

729
00:43:08,100 --> 00:43:10,800
know, we've got this structure, it's a little fatty right now.

730
00:43:10,800 --> 00:43:13,300
It's got a little bit too much in it, right?

731
00:43:13,900 --> 00:43:17,800
There's no question about that but, you know, maybe someday we need to

732
00:43:17,800 --> 00:43:19,000
kind of go in there and

733
00:43:20,400 --> 00:43:22,500
And clean that up, make it a little smaller.

734
00:43:23,100 --> 00:43:26,300
It's true that probably, you know, the Sprite Edge, this could have

735
00:43:26,300 --> 00:43:29,300
been this could, instead of being pointers, these could be could be

736
00:43:29,300 --> 00:43:33,200
indices, that would crunch things down a little bit, the rectangle to,

737
00:43:33,200 --> 00:43:35,600
for screen areas, taking up a lot of space.

738
00:43:38,100 --> 00:43:41,600
And, you know, some of that could possibly be harmonized with the with

739
00:43:41,600 --> 00:43:42,400
the sort key.

740
00:43:42,400 --> 00:43:42,900
I don't know.

741
00:43:42,900 --> 00:43:46,100
There's just It's Tricky, right?

742
00:43:47,500 --> 00:43:48,100
So I don't know.

743
00:43:48,300 --> 00:43:52,900
So right now, it's a bit overweight, it's true but certainly with

744
00:43:52,900 --> 00:43:57,000
respect to that part of it it wouldn't be a big deal.

745
00:43:57,000 --> 00:44:02,400
Probably to say hey why don't we just add account

746
00:44:03,200 --> 00:44:04,800
In addition to the offset.

747
00:44:06,300 --> 00:44:09,600
Right, why don't we say?

748
00:44:09,700 --> 00:44:12,300
Hey, we've got these offsets in there.

749
00:44:13,000 --> 00:44:17,000
Maybe there's, you know, there's an additional piece of information

750
00:44:17,000 --> 00:44:20,200
that's like a chain there or at the other thing, I guess that we could

751
00:44:20,200 --> 00:44:20,600
do.

752
00:44:20,900 --> 00:44:24,000
Right is, is actually chain things together.

753
00:44:24,200 --> 00:44:29,300
So, you know, if you take a look at the render group entries

754
00:44:29,300 --> 00:44:30,100
themselves,

755
00:44:32,800 --> 00:44:34,900
You know, it's a union, right?

756
00:44:37,800 --> 00:44:39,900
It was a union.

757
00:44:41,900 --> 00:44:43,900
Where is Union?

758
00:44:47,000 --> 00:44:47,900
Thought it was Union.

759
00:44:48,100 --> 00:44:49,800
I guess everyone just puts the header in there.

760
00:44:58,900 --> 00:44:59,400
I guess.

761
00:45:00,000 --> 00:45:00,400
Interesting.

762
00:45:00,400 --> 00:45:02,100
So I guess we didn't actually implement it that way.

763
00:45:04,100 --> 00:45:06,200
Oh right, because I don't actually use it as a union.

764
00:45:06,200 --> 00:45:07,500
I actually pack the things.

765
00:45:08,200 --> 00:45:09,600
Wow, that's dedication.

766
00:45:10,000 --> 00:45:14,200
Anyway, so point being, we've got these render group entries, right?

767
00:45:14,800 --> 00:45:19,300
And it would be pretty easy for us to say, well either all of them if

768
00:45:19,300 --> 00:45:23,500
we put in the header or some of them in the case of like, maybe we

769
00:45:23,500 --> 00:45:26,400
only care about doing this with bitmaps because that's really the only

770
00:45:26,400 --> 00:45:29,400
thing we tend to draw that we care about or whatever.

771
00:45:29,400 --> 00:45:32,500
I'm not sure probably wouldn't matter because if we're going to put it

772
00:45:33,000 --> 00:45:33,800
we might as well put it

773
00:45:33,900 --> 00:45:36,600
Since most of our things are bitmaps, we might as well put it up in

774
00:45:36,600 --> 00:45:40,800
the header because it's pretty much always going to be there any way

775
00:45:42,000 --> 00:45:45,400
we could just say, here's another offset to go read after this offset.

776
00:45:45,400 --> 00:45:48,800
And if that offset zero, then you're done but otherwise they're sort

777
00:45:48,800 --> 00:45:53,500
of a chain of these things that you can follow to like draw more.

778
00:45:54,000 --> 00:45:56,800
And so most of the time that wouldn't happen, but anytime that we did

779
00:45:56,800 --> 00:46:00,300
have something where that thing was nonzero, you could draw a bunch of

780
00:46:00,300 --> 00:46:01,700
things at the same sort level.

781
00:46:03,500 --> 00:46:03,700
Right.

782
00:46:03,700 --> 00:46:07,500
It seems like a pretty easy solution to do something like that.

783
00:46:07,500 --> 00:46:12,400
So you just say like oh yeah there's you know next offset on here, you

784
00:46:12,400 --> 00:46:19,600
know, and we could say, you know, if nonzero then jump here and render

785
00:46:19,600 --> 00:46:20,400
and continue,

786
00:46:22,300 --> 00:46:27,600
Rendering entries, so we could kind of just chain things through there

787
00:46:27,600 --> 00:46:32,100
on the cases where we want things stacked in a particular way that

788
00:46:32,100 --> 00:46:35,000
doesn't involve any kind of sorting, right?

789
00:46:35,300 --> 00:46:37,700
So if we wanted to do that, let's see what would happen.

790
00:46:39,300 --> 00:46:42,000
First of all, we would have to actually obey it.

791
00:46:42,100 --> 00:46:45,300
So inside the renderer you can kind of see the way this works, right?

792
00:46:45,300 --> 00:46:48,500
We have this sort of Entry thing happening here where we Loop through

793
00:46:49,100 --> 00:46:51,200
the various entries that we have.

794
00:46:51,500 --> 00:46:55,100
And the way we do that is we've got the sort entries and we pull them

795
00:46:55,100 --> 00:46:55,600
out.

796
00:46:55,700 --> 00:46:56,800
We index

797
00:46:58,900 --> 00:47:03,500
We get the indices and once we pull out an index, we do the processing

798
00:47:03,500 --> 00:47:06,400
on the header like this, right?

799
00:47:07,100 --> 00:47:10,800
And so, we could say that we got the offset, you know, this way,

800
00:47:13,700 --> 00:47:14,100
right?

801
00:47:15,100 --> 00:47:21,600
So what we could do here is say, you know, let's go ahead and and try

802
00:47:22,000 --> 00:47:25,600
see what it would be like to add chaining into this and it seems like

803
00:47:25,600 --> 00:47:27,200
it wouldn't be particularly hard.

804
00:47:27,200 --> 00:47:28,200
We could say, you know,

805
00:47:28,400 --> 00:47:29,900
Let's call this header offset.

806
00:47:29,900 --> 00:47:31,800
Let's say that we got it this way.

807
00:47:34,100 --> 00:47:39,200
Right, I could then just say do what's in here, you know this whole

808
00:47:39,200 --> 00:47:43,600
nice fancy schmancy nonsense that you're doing.

809
00:47:43,700 --> 00:47:48,700
Go ahead and do that and do it well, header offset is not equal to 0.

810
00:47:48,800 --> 00:47:51,700
Now, obviously, the first time through maybe head or offset can be

811
00:47:51,700 --> 00:47:54,600
equal to 0 because the first one, but if we start chaining, we know

812
00:47:54,600 --> 00:47:56,700
you can never chain back to the 0th one.

813
00:47:56,700 --> 00:47:59,800
Let's say that's just not allowed for whatever reason.

814
00:48:00,100 --> 00:48:03,600
I guess that would mean, we'd have to reserve the zero with element in

815
00:48:03,600 --> 00:48:06,200
that case I suppose we don't even really need the do Loop.

816
00:48:06,200 --> 00:48:07,600
We could just do it like this.

817
00:48:08,000 --> 00:48:11,000
And let's take a look actually to make sure that that's the case.

818
00:48:11,200 --> 00:48:13,800
Let me see what actually happens there with the offsets.

819
00:48:13,800 --> 00:48:16,900
But I'm going to go ahead and add a thing that just a search that zero

820
00:48:16,900 --> 00:48:19,600
because that way the loop looks a little cleaner to and we should

821
00:48:19,600 --> 00:48:20,500
Reserve 0.

822
00:48:20,500 --> 00:48:23,200
I like to reserve 0 most of the time just to make things cleaner

823
00:48:23,600 --> 00:48:24,500
almost always.

824
00:48:24,700 --> 00:48:28,100
So I'm going to add in a certain cure that the offset is never zero.

825
00:48:37,900 --> 00:48:38,600
and,

826
00:48:41,500 --> 00:48:43,600
Yeah, let's do a little bit more work here.

827
00:48:43,600 --> 00:48:46,500
But anyway, inside the header will do next offset.

828
00:48:46,500 --> 00:48:48,900
That's always equal to 0 as well.

829
00:48:49,700 --> 00:48:52,700
So blah, blah, blah, such and so forth.

830
00:48:52,700 --> 00:48:58,000
Everyone as happy and whatever people do things, and it's great.

831
00:48:59,400 --> 00:49:02,400
So and I guess, you know, to be honest, we probably don't want to use

832
00:49:02,400 --> 00:49:05,700
a for Loop here because we're going to pull out of the header after we

833
00:49:05,700 --> 00:49:06,500
dereference it.

834
00:49:06,500 --> 00:49:08,600
So I can't really be quite that slick.

835
00:49:08,700 --> 00:49:11,100
So I have to do while the header offset is, you know,

836
00:49:11,700 --> 00:49:12,500
Valid.

837
00:49:15,900 --> 00:49:19,200
But once I know that the header offset is valid, at the end of it, I

838
00:49:19,200 --> 00:49:21,300
could say, you know, after I get it.

839
00:49:23,300 --> 00:49:29,500
Out, I can say header offset, people's header, next offset and then

840
00:49:29,600 --> 00:49:34,700
I've got my daisy-chaining, so it's a pretty easy thing to do.

841
00:49:35,100 --> 00:49:40,100
It's easy to add to both of our render dispatches because, you know,

842
00:49:40,100 --> 00:49:43,100
they both basically work, you know, more or less the same way.

843
00:49:44,000 --> 00:49:46,100
So if I want to, I can just have my daisy.

844
00:49:46,100 --> 00:49:48,100
Chaining and I think eat it too.

845
00:49:56,100 --> 00:49:59,700
So yeah, so now when I run in theory since everyone's going to push

846
00:49:59,700 --> 00:50:02,400
down with the next offset of zero and Theory, there's no problem and

847
00:50:02,400 --> 00:50:04,100
everything is good and it's all fine.

848
00:50:05,000 --> 00:50:08,600
But as you can see, like we get situations here where, you know, we're

849
00:50:08,600 --> 00:50:12,200
already like I was saying we have sort of artistic rules about the

850
00:50:12,200 --> 00:50:15,800
sort that we want in forest and you can see we get situations like

851
00:50:15,800 --> 00:50:18,200
that even though that's not ever really, probably going to happen the

852
00:50:18,200 --> 00:50:18,700
actual game.

853
00:50:18,700 --> 00:50:20,900
But you know, in the current state of the field, it can happen.

854
00:50:22,100 --> 00:50:22,900
So you take

855
00:50:23,000 --> 00:50:25,000
That in the sort order is messed up on the hero.

856
00:50:25,000 --> 00:50:27,100
We know, the sort of our should never be that, and we want to kind of

857
00:50:27,100 --> 00:50:28,000
just have a few regular.

858
00:50:28,100 --> 00:50:30,900
We don't want to have to start fussing with Z values, and hacks, and

859
00:50:30,900 --> 00:50:32,800
that sort of stuff if we can avoid it.

860
00:50:32,800 --> 00:50:36,700
And so, let's see if we can make that work by using the offsets that

861
00:50:36,700 --> 00:50:37,800
we just created.

862
00:50:38,000 --> 00:50:40,800
All we need to do is make a way to actually access them now, because

863
00:50:40,800 --> 00:50:44,600
now we're set up for day, two days of training through the system.

864
00:50:44,600 --> 00:50:45,700
And I think we'll be good.

865
00:50:48,900 --> 00:50:56,200
Okay, so inside render group, we have a way to push a render element

866
00:50:56,200 --> 00:50:57,900
and a sort key at the same time.

867
00:50:58,100 --> 00:50:59,800
But at the moment we don't have a way of pushing

868
00:51:00,100 --> 00:51:02,400
Under element without pushing a sort key.

869
00:51:04,300 --> 00:51:04,900
Right?

870
00:51:05,200 --> 00:51:09,400
And we need some way of being able to push a render element without

871
00:51:09,400 --> 00:51:12,900
pushing a sort key, if we don't, then there's no way to do that

872
00:51:12,900 --> 00:51:13,700
daisy-chaining.

873
00:51:14,800 --> 00:51:17,400
So if we take a look at what happened, right?

874
00:51:17,400 --> 00:51:19,700
When we do our push render element here,

875
00:51:29,000 --> 00:51:29,800
Where we at?

876
00:51:30,400 --> 00:51:32,000
Well, I guess it's neither here, nor there.

877
00:51:34,200 --> 00:51:37,500
I think, what I would say is probably when we're doing the push,

878
00:51:37,500 --> 00:51:39,900
there's a couple different ways we could do this, but I think the way

879
00:51:39,900 --> 00:51:44,500
that I would probably do it is, I would just say like, hey, you know,

880
00:51:44,500 --> 00:51:48,700
we've kind of got this way of writing things in here for object,

881
00:51:48,700 --> 00:51:49,700
Transformer, whatever.

882
00:51:49,900 --> 00:51:50,700
Let's just say that.

883
00:51:50,700 --> 00:51:55,700
In addition, that object transform that we're using also, maybe maybe

884
00:51:55,700 --> 00:51:57,900
that would have the ability.

885
00:51:58,400 --> 00:52:01,400
To record the last thing it pushed.

886
00:52:01,400 --> 00:52:04,300
So if you wanted to push on to end of it you just could, I don't know.

887
00:52:04,300 --> 00:52:05,100
We'll see, I guess.

888
00:52:05,100 --> 00:52:06,300
I don't want to be premature at that.

889
00:52:06,500 --> 00:52:07,600
Let's just see what happens.

890
00:52:08,600 --> 00:52:13,600
So anyway inside push render element that pushes this this stuff on

891
00:52:13,600 --> 00:52:14,000
here.

892
00:52:14,500 --> 00:52:18,300
We also might want to have a version and I guess I could keep it in

893
00:52:18,300 --> 00:52:21,800
line in the same sense but you know it doesn't have a screen area in a

894
00:52:21,800 --> 00:52:23,200
sort key potentially

895
00:52:34,400 --> 00:52:35,200
Hmm.

896
00:52:39,200 --> 00:52:39,900
That.

897
00:52:44,400 --> 00:52:45,800
Makes things a little trickier.

898
00:52:51,300 --> 00:52:53,400
This means we do have a choice here.

899
00:52:54,300 --> 00:52:55,900
I'm probably going to leave it at this for today.

900
00:52:55,900 --> 00:52:58,100
And we'll tackle this tomorrow because this is kind of interesting.

901
00:53:03,300 --> 00:53:05,400
We have a choice here and I'm not sure.

902
00:53:06,700 --> 00:53:10,800
That we don't want to maybe say let's actually put that daisy-chaining

903
00:53:10,800 --> 00:53:12,300
into the actual sort system.

904
00:53:13,200 --> 00:53:18,400
And the reason I say that is well let's suppose that the hero looks

905
00:53:18,400 --> 00:53:19,200
like this

906
00:53:22,900 --> 00:53:27,500
If we only have one sort entry for him, then the hero ends up looking

907
00:53:27,500 --> 00:53:31,500
like this even though these are the actual Sprite areas that are, that

908
00:53:31,500 --> 00:53:36,300
are being used this area, which is not being occupied by the Sprite at

909
00:53:36,300 --> 00:53:36,900
all.

910
00:53:38,400 --> 00:53:39,800
And there could be quite a lot of that.

911
00:53:39,800 --> 00:53:43,600
Potentially, depending on what the, what the layer Sprites look like,

912
00:53:43,700 --> 00:53:46,700
you know, imagine I had some big fat thing, right?

913
00:53:47,800 --> 00:53:49,400
With a teeny tiny head on it.

914
00:53:51,200 --> 00:53:55,200
Something like you might see in Binding of Isaac, right?

915
00:53:57,000 --> 00:53:59,800
Well, if we only have one sort key for it's going to have to be

916
00:54:00,000 --> 00:54:01,500
Union of the rectangles.

917
00:54:02,900 --> 00:54:07,300
Which means that all of this area is considered overlapping and will

918
00:54:07,300 --> 00:54:11,100
get sorted by the sort system, it will it will take anything that was

919
00:54:11,100 --> 00:54:13,000
under here and think it has to do sorting.

920
00:54:16,300 --> 00:54:17,900
I don't know if that's a good idea or not.

921
00:54:23,300 --> 00:54:24,000
I'm not sure.

922
00:54:31,400 --> 00:54:31,600
Hm.

923
00:54:35,100 --> 00:54:39,400
So yeah, so either, we Union them together or we store them separately

924
00:54:39,400 --> 00:54:44,100
and thus the when it does the the checking inside the sort routines,

925
00:54:44,300 --> 00:54:49,400
it will go and check all the rectangles sort of separately for these

926
00:54:49,400 --> 00:54:57,400
Composites and it'll use the same sort key for them potentially, but

927
00:54:57,400 --> 00:54:59,700
it wouldn't use the same screen area.

928
00:55:03,800 --> 00:55:05,400
That's a tough one.

929
00:55:06,800 --> 00:55:08,900
That is a tough one, my friends.

930
00:55:21,400 --> 00:55:23,200
So, I don't know.

931
00:55:23,200 --> 00:55:23,900
I got five minutes.

932
00:55:23,900 --> 00:55:25,100
I'm going to play with this for a second.

933
00:55:25,400 --> 00:55:27,300
So when we do a push render element on here,

934
00:55:30,900 --> 00:55:34,700
you know, we've got the opportunity to do the command sort entry stuff

935
00:55:34,800 --> 00:55:36,200
or not, right?

936
00:55:36,300 --> 00:55:38,600
So we can decide not to do that.

937
00:55:39,300 --> 00:55:39,700
I don't know.

938
00:55:39,700 --> 00:55:43,900
If I want the debug tag thing to be there, I think it should probably

939
00:55:43,900 --> 00:55:44,700
be here.

940
00:55:50,700 --> 00:55:54,200
And that way, I'll put juice.

941
00:56:03,500 --> 00:56:06,500
so, if you take a look at what, What's Happening Here we have the

942
00:56:06,500 --> 00:56:07,800
opportunity to sort of

943
00:56:13,100 --> 00:56:16,900
We have the opportunity to say, okay, you know, maybe we don't do

944
00:56:16,900 --> 00:56:17,400
this.

945
00:56:25,400 --> 00:56:28,400
And I don't know whether it would be a party Foul to sort of not

946
00:56:28,400 --> 00:56:28,900
increment.

947
00:56:28,900 --> 00:56:30,400
The push buffer element count.

948
00:56:32,500 --> 00:56:36,500
I'm not really sure if anyone cares about the push but push buffer

949
00:56:36,500 --> 00:56:37,300
element count.

950
00:56:46,700 --> 00:56:50,900
Because really, at this point, the push buffer, element count.

951
00:56:50,900 --> 00:56:57,100
I think is, is really only used for knowing how many things to sort,

952
00:56:57,100 --> 00:56:59,800
and how many rectangles there might be.

953
00:57:01,500 --> 00:57:02,400
In Toto.

954
00:57:08,500 --> 00:57:09,400
In fact.

955
00:57:12,500 --> 00:57:14,800
Why are we using the push by Four Element count?

956
00:57:16,000 --> 00:57:16,500
Further.

957
00:57:17,200 --> 00:57:18,900
Flip is that just a typo?

958
00:57:23,100 --> 00:57:25,500
That feels a little typo to me.

959
00:57:25,500 --> 00:57:31,100
Would you not say because cliprect count?

960
00:57:32,100 --> 00:57:33,100
Is right there.

961
00:57:41,100 --> 00:57:41,400
Yes.

962
00:57:58,300 --> 00:58:00,400
it just feels like, you know,

963
00:58:01,900 --> 00:58:04,300
It feels like the cliprect count is the thing you want to use.

964
00:58:04,300 --> 00:58:06,600
If you want to know how many clip Rex there are, not the total number

965
00:58:06,600 --> 00:58:08,400
of elements that just seems stupid.

966
00:58:08,500 --> 00:58:09,500
I think that was a typo.

967
00:58:11,300 --> 00:58:16,900
Anyway, so I think the only person who uses this is the sorting and so

968
00:58:16,900 --> 00:58:19,500
maybe that should be renamed eventually as well.

969
00:58:19,500 --> 00:58:21,200
Let's I'm going to mark that.

970
00:58:22,400 --> 00:58:25,800
No Casey should push buffer, element cat.

971
00:58:27,300 --> 00:58:30,700
Be renamed behind my head.

972
00:58:32,300 --> 00:58:33,100
But yeah.

973
00:58:33,100 --> 00:58:37,000
So I think what we could do here is say, you know, if we are planning

974
00:58:37,000 --> 00:58:42,800
to you know, if it's a new element, we do this, otherwise we would

975
00:58:42,800 --> 00:58:49,200
just need to merge the sort keys and the screen area with an existing

976
00:58:49,200 --> 00:58:50,400
one, right?

977
00:58:50,600 --> 00:58:52,900
So, you know, we've got

978
00:58:55,500 --> 00:58:57,000
We've got all this stuff here.

979
00:58:57,600 --> 00:58:58,900
Got a Sprite bound.

980
00:59:02,000 --> 00:59:07,300
And rectangle to, for the screen area.

981
00:59:10,900 --> 00:59:13,700
And so for the screen area, it's pretty trivial, you know, it's just

982
00:59:13,700 --> 00:59:17,200
going to be like, screen area equals Union, screen area, screen area.

983
00:59:20,600 --> 00:59:26,200
So there's going to be just some like, you know, existing like this.

984
00:59:28,800 --> 00:59:29,300
Right?

985
00:59:30,700 --> 00:59:34,100
And for the Sprite bound, since they happen to be min max has and

986
00:59:34,100 --> 00:59:36,100
stuff, I think it's similar.

987
00:59:36,700 --> 00:59:42,000
So I think existing, you know, bound and there's my my time.

988
00:59:42,100 --> 00:59:49,200
My time is up, y, Min equals minimum, you know, existing Wyman.

989
00:59:58,000 --> 00:59:58,700
Or something.

990
00:59:59,600 --> 00:59:59,800
Yeah.

991
01:00:00,000 --> 01:00:02,400
Again, I don't really know how we're going to store this.

992
01:00:02,400 --> 01:00:03,200
Exactly.

993
01:00:03,500 --> 01:00:07,900
But, you know, we take the minimum of that with the sort key one, I

994
01:00:07,900 --> 01:00:11,500
would really wish that my little, let's move that up above my utility

995
01:00:11,500 --> 01:00:12,500
so I can actually read it.

996
01:00:15,900 --> 01:00:17,800
You know, it's really just going to be something like this.

997
01:00:34,100 --> 01:00:35,900
So that would really be it I think.

998
01:00:36,400 --> 01:00:39,400
And when we do that daisy-chaining on there, then you know, header,

999
01:00:39,400 --> 01:00:45,400
next offset we have to have a way of doing like, you know, the

1000
01:00:45,400 --> 01:00:50,600
existing next offset equals whatever our offset was going to be.

1001
01:00:51,200 --> 01:00:54,600
So it's, you know, this the commands push buffer size.

1002
01:00:55,400 --> 01:00:57,600
And then, you know, we would need to

1003
01:01:00,400 --> 01:01:04,000
at the end of it here, make ourselves existing

1004
01:01:07,400 --> 01:01:08,000
That's it.

1005
01:01:10,600 --> 01:01:11,100
So yeah.

1006
01:01:12,500 --> 01:01:15,500
So know exactly how we want to do that but that's what we would do.

1007
01:01:23,400 --> 01:01:27,900
And I think that leaves us compiling and running properly for tomorrow

1008
01:01:28,000 --> 01:01:30,800
or overnight rather, so that's all good.

1009
01:01:34,900 --> 01:01:39,000
Alright people, let's go to the Q&A.

1010
01:01:41,000 --> 01:01:42,300
There's a queue a for you.

1011
01:02:02,700 --> 01:02:03,600
Let's take.

1012
01:02:03,600 --> 01:02:05,200
So we got two questions here.

1013
01:02:05,200 --> 01:02:09,000
Let me take them in order, thanks to the grid partitioning, do we now

1014
01:02:09,000 --> 01:02:12,600
have a convenient way of doing the graph sort in Cindy possibly

1015
01:02:12,600 --> 01:02:18,000
processing for grid squares for for Sprites within a square at once?

1016
01:02:18,300 --> 01:02:20,200
Or is it not quite that simple.

1017
01:02:22,900 --> 01:02:28,300
Well, you know what, I would say about that is your intuition is

1018
01:02:28,300 --> 01:02:32,800
correct that you could do things of this nature.

1019
01:02:35,000 --> 01:02:37,400
But we probably could have done that before, right?

1020
01:02:37,500 --> 01:02:41,000
We probably could have processed for rectangle checks at a time.

1021
01:02:42,200 --> 01:02:47,100
The reason that we won't probably do that is because like everything

1022
01:02:47,100 --> 01:02:51,700
else Cindy optimization ends up making code super brittle and strange,

1023
01:02:51,900 --> 01:02:52,500
right?

1024
01:02:53,300 --> 01:02:57,800
It's it's really not great like it's one of those things where see

1025
01:02:59,200 --> 01:02:59,800
certainly not

1026
01:03:00,000 --> 01:03:05,000
Your C++ and not really Assembly Language, either they just don't make

1027
01:03:05,000 --> 01:03:07,100
it convenient to code.

1028
01:03:07,100 --> 01:03:10,400
It's it's not a the languages aren't right for it.

1029
01:03:13,600 --> 01:03:16,700
And, you know, people have made sort of attempts to make sort of Auto

1030
01:03:16,700 --> 01:03:19,200
vectorizing stuff, but it's not really where it needs to be.

1031
01:03:19,200 --> 01:03:24,700
Because usually the problem with with vectorizing code is not the

1032
01:03:24,700 --> 01:03:27,700
code, it's the data, right?

1033
01:03:27,900 --> 01:03:32,200
And you need good ways of making the data look, correct.

1034
01:03:33,800 --> 01:03:37,000
And so, to give an example, in your what you're asking sort of is

1035
01:03:37,000 --> 01:03:38,500
like, can we leverage the grid for this?

1036
01:03:38,500 --> 01:03:39,800
Well, well, forget the grid.

1037
01:03:40,200 --> 01:03:42,500
Let's just say, we wanted to accelerate the one we were doing.

1038
01:03:42,600 --> 01:03:44,600
For we did the N squared test, right?

1039
01:03:44,700 --> 01:03:45,900
Will we have a giant array?

1040
01:03:45,900 --> 01:03:47,600
And we're going through the whole array testing.

1041
01:03:47,800 --> 01:03:52,200
If we bulk, bucketed those up into groups of four and stored for

1042
01:03:52,200 --> 01:03:54,400
rectangles as 4 x is 4 W.

1043
01:03:54,400 --> 01:03:58,800
4X minus 4X, Max's for Wyman's for why Max's, whatever right.

1044
01:03:59,100 --> 01:04:01,100
Then you could do bulk testing.

1045
01:04:01,800 --> 01:04:04,400
So in some sense it would actually be easier to do it there because in

1046
01:04:04,400 --> 01:04:09,000
the grid, now we have to as we as we're filling it in, we have to fill

1047
01:04:09,000 --> 01:04:12,400
in the grid, you know, in that way as well, which again, makes that

1048
01:04:12,600 --> 01:04:15,300
The grid, partition part, more expensive and the Grid's are less

1049
01:04:15,300 --> 01:04:17,800
likely to be full, right?

1050
01:04:17,800 --> 01:04:22,100
You know, a grid bucket might only have eight Sprites in it which is

1051
01:04:22,100 --> 01:04:22,900
too full buckets.

1052
01:04:23,400 --> 01:04:26,300
Oftentimes would have six and missed two, you know, or whatever.

1053
01:04:26,300 --> 01:04:28,800
That means that a huge amount of your processing is going to waste

1054
01:04:28,800 --> 01:04:30,200
their in the old way.

1055
01:04:30,300 --> 01:04:32,300
We had, you know, 2000 Sprites.

1056
01:04:32,400 --> 01:04:35,000
Well most of all of the buckets of, for our fill only.

1057
01:04:35,000 --> 01:04:38,400
It's like, it's like point 0, 1 percent, that's not full, right?

1058
01:04:39,800 --> 01:04:40,800
And so yeah.

1059
01:04:40,900 --> 01:04:44,900
So you know you could you send you guys it sure do we need to know

1060
01:04:44,900 --> 01:04:49,100
because it's way faster than we knew to be at the moment because when

1061
01:04:49,100 --> 01:04:51,400
we compile and release mode, we're at 60 frames a second.

1062
01:04:51,400 --> 01:04:54,700
So, you know, we certainly want to wait until we actually had a

1063
01:04:54,700 --> 01:04:58,100
problem before, we would go a cimetiere out.

1064
01:04:59,100 --> 01:05:01,900
And so I would say, you know, yes, you could do it.

1065
01:05:02,700 --> 01:05:05,100
No, I don't think it would be simple.

1066
01:05:05,800 --> 01:05:08,400
Not because there's anything complicated about the

1067
01:05:09,000 --> 01:05:11,700
Eating it but because it will make the code in the storage stuff, a

1068
01:05:11,700 --> 01:05:13,700
little twisted and easier to put bugs in.

1069
01:05:13,900 --> 01:05:17,100
And so that is unfortunately why it's usually not a good idea to

1070
01:05:17,100 --> 01:05:19,600
optimize Cindy all the time even though it'd be nice because it would

1071
01:05:19,600 --> 01:05:21,600
always be faster someday.

1072
01:05:21,600 --> 01:05:24,200
I hope we will have languages that make it easy to write the Sim

1073
01:05:24,200 --> 01:05:27,900
decode correctly and we might we're not there yet.

1074
01:05:32,000 --> 01:05:32,600
Okay.

1075
01:05:38,700 --> 01:05:42,000
The Mike DX with regards to the flags and the Order.

1076
01:05:42,000 --> 01:05:45,800
Checking, if you are anding the flags the ID to test.

1077
01:05:45,800 --> 01:05:49,100
If you have seen it before, what happens when another item does the

1078
01:05:49,100 --> 01:05:52,600
same check and Anne's it with the same changed unit.

1079
01:05:52,600 --> 01:05:56,900
Doesn't that make the result different to the check flags and masks

1080
01:05:56,900 --> 01:05:58,500
equal ID for the new item.

1081
01:05:59,000 --> 01:05:59,800
Did I miss something?

1082
01:06:00,000 --> 01:06:04,200
Or did you and the flags of the mass before you set the idea to clear

1083
01:06:04,200 --> 01:06:06,200
it first?

1084
01:06:07,800 --> 01:06:11,200
So I'm not sure I'm 100% clear on what you're asking.

1085
01:06:11,300 --> 01:06:14,000
I think I might know, but I might also not know.

1086
01:06:14,900 --> 01:06:17,200
Let me explain it.

1087
01:06:19,400 --> 01:06:21,900
Let me just walk through it once and then you can tell me whether this

1088
01:06:21,900 --> 01:06:23,300
answer the question or not.

1089
01:06:26,100 --> 01:06:28,300
Okay, so the code in question is right here.

1090
01:06:29,400 --> 01:06:33,100
The coding question is be flags and Sprite index mask, not equal to

1091
01:06:33,100 --> 01:06:33,200
know.

1092
01:06:33,200 --> 01:06:36,800
Did Nick say assert, nude index a, you know, and sporting spectacles,

1093
01:06:36,800 --> 01:06:37,100
no day.

1094
01:06:37,100 --> 01:06:41,400
A syrupy flags and nice x equals 0, B Flags, including site, that's

1095
01:06:41,400 --> 01:06:43,600
the entirety of what we can or the rectangle intersection because

1096
01:06:43,600 --> 01:06:46,000
obviously that's, you know, that's the check for the rectangles

1097
01:06:46,000 --> 01:06:48,800
overlapping, that's not relevant to the prevention code that we're

1098
01:06:48,800 --> 01:06:50,500
talking about here, okay?

1099
01:06:51,000 --> 01:06:53,200
So let's take these one by one.

1100
01:06:53,400 --> 01:06:55,300
Be flags and Sprite index Mass not

1101
01:06:55,500 --> 01:06:56,300
Go to node index.

1102
01:06:56,300 --> 01:06:58,000
A what is that actually doing?

1103
01:06:58,600 --> 01:06:59,000
Okay.

1104
01:06:59,900 --> 01:07:01,200
So let's pop back here.

1105
01:07:03,500 --> 01:07:04,000
Right?

1106
01:07:04,000 --> 01:07:05,600
So we have the flags.

1107
01:07:09,900 --> 01:07:10,800
I'm going to close that down.

1108
01:07:12,200 --> 01:07:12,600
There we go.

1109
01:07:13,800 --> 01:07:16,500
So we have the flags, we're and it with the mask.

1110
01:07:20,200 --> 01:07:22,700
And then we're doing not equal to note at, you know, not equal to a

1111
01:07:23,200 --> 01:07:25,300
that's what we're doing, right?

1112
01:07:25,400 --> 01:07:26,500
So what does this do?

1113
01:07:27,100 --> 01:07:31,000
Well what this does is, it gets rid of anything that might have been

1114
01:07:31,000 --> 01:07:32,200
in the flags field.

1115
01:07:32,200 --> 01:07:36,700
Now mind you, it's not strictly necessary and the reason that it's not

1116
01:07:36,700 --> 01:07:39,200
strictly necessary and you know, I can even put a note here.

1117
01:07:54,800 --> 01:07:59,500
It's not strictly necessary because really, we're never setting those

1118
01:07:59,500 --> 01:08:01,300
flags up above here.

1119
01:08:01,600 --> 01:08:05,500
So I was just being a little overly tidy and because an and is

1120
01:08:05,500 --> 01:08:08,500
extraordinarily cheap like extraordinarily.

1121
01:08:08,500 --> 01:08:13,500
So in the context of what we're doing here, I just did it for safety

1122
01:08:13,500 --> 01:08:14,900
sake, right?

1123
01:08:15,000 --> 01:08:16,200
But it's not strictly necessary.

1124
01:08:16,200 --> 01:08:18,899
We could have just said, be Flags, not equal to note in XA because

1125
01:08:18,899 --> 01:08:23,800
there's nothing in the upper two, two bits, four bits, the upper four

1126
01:08:23,800 --> 01:08:24,000
bits.

1127
01:08:24,200 --> 01:08:26,800
We reserved for Flags, they're all zero anyway.

1128
01:08:27,100 --> 01:08:29,100
So the and is Superfluous, right?

1129
01:08:29,100 --> 01:08:31,600
Because what this and does is it says well, alright.

1130
01:08:31,600 --> 01:08:34,300
What I had was a thing that was partitioned like this.

1131
01:08:34,500 --> 01:08:38,000
Here are the flags, the actual Flags, right?

1132
01:08:38,000 --> 01:08:39,300
And here's the index.

1133
01:08:40,399 --> 01:08:42,700
And so what I want to do is I just wanted the index.

1134
01:08:42,700 --> 01:08:47,100
This mask is one's all here and zeros all here.

1135
01:08:47,100 --> 01:08:50,500
So the and leaves me with just the index.

1136
01:08:50,800 --> 01:08:53,600
If there was anything in the flags, they are now gone.

1137
01:08:54,100 --> 01:08:57,600
so the flags field and The Mask basically, that's just getting rid of

1138
01:08:57,600 --> 01:08:59,800
the actual flags and leaving us with just

1139
01:09:00,000 --> 01:09:00,899
Index part.

1140
01:09:01,100 --> 01:09:04,100
And then we compare it against a to see if that's what it is, right?

1141
01:09:04,100 --> 01:09:08,200
So hopefully that's clear that all that and mask is doing is getting

1142
01:09:08,200 --> 01:09:11,300
rid of any flags on the upper part, which we know there aren't any at

1143
01:09:11,300 --> 01:09:12,000
the moment.

1144
01:09:12,000 --> 01:09:13,700
So, we don't even really need to do it.

1145
01:09:15,100 --> 01:09:20,000
Okay, so, next part and these assertions are just checking, we'll put

1146
01:09:20,000 --> 01:09:20,600
the assertion side.

1147
01:09:20,600 --> 01:09:22,399
These are just checking some assumptions, right?

1148
01:09:22,399 --> 01:09:26,800
So then we just do be Flags equals node index a right?

1149
01:09:28,300 --> 01:09:31,399
And you know what, I guess in this particular case, since I preserved

1150
01:09:31,399 --> 01:09:32,899
it here, you'd think I would have.

1151
01:09:32,899 --> 01:09:35,700
I think I even said I was going to and I didn't

1152
01:09:38,000 --> 01:09:39,600
Oh, and you know what?

1153
01:09:39,800 --> 01:09:41,100
Know, now that I think about it.

1154
01:09:41,399 --> 01:09:42,899
These assertions that we're doing.

1155
01:09:43,399 --> 01:09:46,000
I actually just asserted that they actually do equal zero.

1156
01:09:46,000 --> 01:09:47,399
So this is not necessary.

1157
01:09:48,500 --> 01:09:49,100
Never mind.

1158
01:09:53,000 --> 01:09:54,900
We don't even need the and right.

1159
01:09:55,200 --> 01:09:58,200
It's Superfluous because I asserted that we didn't do it yet.

1160
01:09:58,200 --> 01:10:01,900
So, rather than putting the and in and this is probably smarter, I'm

1161
01:10:01,900 --> 01:10:02,900
not sure why I didn't do it.

1162
01:10:03,100 --> 01:10:06,900
Why didn't just leave it out in the first place is just say that the

1163
01:10:06,900 --> 01:10:10,200
flags have to not be there because then that way we didn't write the

1164
01:10:10,200 --> 01:10:13,700
routine in a slower way because we might do something later we put in

1165
01:10:13,700 --> 01:10:14,800
a certain year that would catch it.

1166
01:10:14,800 --> 01:10:17,000
So someone up above a starts to try to use the flags.

1167
01:10:17,200 --> 01:10:18,600
It'll assert in here instead of that.

1168
01:10:18,600 --> 01:10:20,500
Just going wrong in them going.

1169
01:10:20,500 --> 01:10:22,100
I don't know why, right?

1170
01:10:23,800 --> 01:10:24,600
That makes sense.

1171
01:10:25,100 --> 01:10:28,400
Okay, so now hopefully this makes a little more sense to you since the

1172
01:10:28,400 --> 01:10:29,700
mask is even now gone.

1173
01:10:30,000 --> 01:10:32,800
Although I just explained what it was doing, you can ignore that

1174
01:10:32,800 --> 01:10:33,900
because we don't have to do it.

1175
01:10:34,700 --> 01:10:38,300
So we say be Flags is not equal to noting sex, a, so that means the

1176
01:10:38,300 --> 01:10:42,400
field inside the rectangle we're checking against is not set to our

1177
01:10:42,400 --> 01:10:43,600
field, right?

1178
01:10:44,100 --> 01:10:48,100
If we assume that it, it fails that check, right?

1179
01:10:48,500 --> 01:10:51,800
So you know, that we feels like it.

1180
01:10:51,900 --> 01:10:52,500
It's

1181
01:10:52,700 --> 01:10:54,000
Eve's in not finding it, right?

1182
01:10:54,000 --> 01:10:55,000
So it's the not equals.

1183
01:10:55,000 --> 01:11:00,200
It's saying the the node were checking that were on the pass through

1184
01:11:00,600 --> 01:11:03,500
when we go to check, should say it's more clearly.

1185
01:11:04,500 --> 01:11:06,000
Hey, who is the rectangle?

1186
01:11:06,000 --> 01:11:06,900
We are checking.

1187
01:11:07,800 --> 01:11:12,500
And B is the rectangle checking against if B does not have our index

1188
01:11:12,500 --> 01:11:17,500
in its flag field, then we will we will proceed right?

1189
01:11:17,500 --> 01:11:18,000
If it's it.

1190
01:11:18,000 --> 01:11:19,100
Has anyone else has that?

1191
01:11:19,100 --> 01:11:20,500
Means was from a previous iteration.

1192
01:11:21,100 --> 01:11:22,500
When we get in here, we say,

1193
01:11:22,600 --> 01:11:22,700
Okay.

1194
01:11:22,700 --> 01:11:25,900
Now we're going to set the facts field equal to note index a, right?

1195
01:11:25,900 --> 01:11:29,100
So now we have marked it that we're, it's we're visiting it on this

1196
01:11:29,100 --> 01:11:29,600
pass.

1197
01:11:31,000 --> 01:11:34,600
Now remember, all of our checks for index, a will happen in one Loop

1198
01:11:35,900 --> 01:11:37,800
So we will never check index again.

1199
01:11:39,100 --> 01:11:43,400
So, every other rectangle that we happen to touch, we will leave our

1200
01:11:43,400 --> 01:11:46,000
marker in them and we will not touch them again.

1201
01:11:46,000 --> 01:11:50,900
If we see that marker, when we move to the next index.

1202
01:11:52,000 --> 01:11:55,900
Well, now remember, we're checking for a quality with the index that

1203
01:11:55,900 --> 01:11:57,000
were on, right?

1204
01:11:57,000 --> 01:11:59,100
We're saying it has to be, not equal to that one.

1205
01:12:00,300 --> 01:12:04,000
Well, just because now there's a bunch of cruft in all of those flags

1206
01:12:04,000 --> 01:12:07,400
fields that are previous indices that we checked, right?

1207
01:12:13,800 --> 01:12:14,200
Yeah.

1208
01:12:16,900 --> 01:12:19,100
It doesn't matter because we're checking that something say, I did

1209
01:12:19,100 --> 01:12:19,500
just think.

1210
01:12:19,500 --> 01:12:20,100
However,

1211
01:12:23,200 --> 01:12:25,300
There is one problem with this.

1212
01:12:28,000 --> 01:12:29,500
That's kind of hilarious.

1213
01:12:31,300 --> 01:12:32,100
it's like,

1214
01:12:34,300 --> 01:12:41,300
I don't have a bug, I don't think, but it's only because it just so

1215
01:12:41,300 --> 01:12:44,900
happens to not be a bug, like, I wasn't smart enough to not have the

1216
01:12:44,900 --> 01:12:45,400
bug.

1217
01:12:45,500 --> 01:12:48,800
I wish I was smart enough to have thought of the fact that this isn't

1218
01:12:48,800 --> 01:12:50,700
a bug but I didn't actually.

1219
01:12:50,900 --> 01:12:54,400
And what that is is you'll notice this fails in one case and that is

1220
01:12:54,400 --> 01:12:58,300
the case when you're on the first index because all of the flags

1221
01:12:58,300 --> 01:12:59,800
Fields will be set to 0.

1222
01:12:59,900 --> 01:13:03,600
And so everyone that you check, you'll go oh I already checked it.

1223
01:13:04,600 --> 01:13:06,700
You know, I shouldn't check it again.

1224
01:13:07,000 --> 01:13:12,100
Hilariously there will never be anyone in the Grid on past zero

1225
01:13:12,100 --> 01:13:16,000
because you haven't added anybody yet, right?

1226
01:13:16,500 --> 01:13:20,900
So, it just so happens that the field that we picked the value that we

1227
01:13:20,900 --> 01:13:27,100
picked to represent the initial State and the time when that initial

1228
01:13:27,100 --> 01:13:30,900
state would have caused a bug, they perfectly line up.

1229
01:13:30,900 --> 01:13:32,600
And so there is no actual bugs.

1230
01:13:32,600 --> 01:13:33,800
That make sense sense.

1231
01:13:34,000 --> 01:13:34,600
A separate thing.

1232
01:13:39,900 --> 01:13:42,900
Good pass 6 will be ever Doing Network programming on hand?

1233
01:13:42,900 --> 01:13:44,200
We have on handmade hero.

1234
01:13:44,400 --> 01:13:47,300
No, I will not anyway.

1235
01:14:08,600 --> 01:14:10,300
Brian wag, I love how you said.

1236
01:14:10,300 --> 01:14:13,800
We don't want to solve this with hacks, for a particular sorting

1237
01:14:13,800 --> 01:14:14,400
condition.

1238
01:14:14,600 --> 01:14:17,500
Do you think the engine should cover most all boundary conditions or

1239
01:14:17,500 --> 01:14:20,900
is there room for boundary hacks in certain extreme circumstances?

1240
01:14:22,300 --> 01:14:26,000
Did I say that that may have been a misstatement or rather?

1241
01:14:26,000 --> 01:14:27,600
I may have not been trying to convey that.

1242
01:14:27,600 --> 01:14:30,700
I think what I was probably trying to say is a particular thing.

1243
01:14:30,700 --> 01:14:35,700
We Nest may not have wanted to hack for particular reason and I don't

1244
01:14:35,700 --> 01:14:38,300
know what kind of said that in but the

1245
01:14:38,400 --> 01:14:42,400
the concept of fake 2D sorting is all a hack, right?

1246
01:14:42,400 --> 01:14:47,400
Like really you need full 3D objects, you can't have Sprites and ever

1247
01:14:47,400 --> 01:14:49,500
produce real sorting.

1248
01:14:49,800 --> 01:14:54,200
And the reason for that is that like they just, you don't have the

1249
01:14:54,200 --> 01:14:54,700
information.

1250
01:14:54,700 --> 01:14:57,600
You actually need to do a correct sort, right?

1251
01:14:57,600 --> 01:14:59,500
I mean, take a very simple example.

1252
01:15:00,500 --> 01:15:03,500
You know, a Sprite that's supposed to represent a pyramid.

1253
01:15:06,000 --> 01:15:06,600
Right.

1254
01:15:07,100 --> 01:15:10,800
Well, if there's somebody standing right here, are they in front of or

1255
01:15:10,800 --> 01:15:12,700
behind the pyramid, right?

1256
01:15:12,900 --> 01:15:16,000
The answer is the only way you could have known that they're supposed

1257
01:15:16,000 --> 01:15:18,300
to be in front of the period pyramid there.

1258
01:15:20,500 --> 01:15:25,300
Is, if you had actual 3D depth information for this pyramid and depth

1259
01:15:25,300 --> 01:15:28,600
information for this and knew that it happened to be the case because

1260
01:15:28,800 --> 01:15:32,400
otherwise it should be behind, certainly, it should be behind if he

1261
01:15:32,400 --> 01:15:34,300
was here, right?

1262
01:15:34,400 --> 01:15:37,200
If you just slid him over, he's behind.

1263
01:15:37,500 --> 01:15:41,400
So the same two Sprites with the same rectangles overlapping in

1264
01:15:41,400 --> 01:15:45,500
basically the same way you wouldn't ever know how to sort them unless

1265
01:15:45,500 --> 01:15:47,500
you had actual 3D data.

1266
01:15:50,000 --> 01:15:53,800
And so the whole concept of Two and a Half, D sorting, in this case is

1267
01:15:53,800 --> 01:15:54,700
a complete hack.

1268
01:15:55,700 --> 01:15:59,800
And so we just have to do something that is reasonable and we sort of,

1269
01:15:59,800 --> 01:16:01,300
I guess gotten to that point now.

1270
01:16:01,600 --> 01:16:07,600
But by no means, would I ever say that it was some kind of a, you

1271
01:16:07,600 --> 01:16:15,100
know, beautiful pristine engine concept here II, don't think there is

1272
01:16:15,100 --> 01:16:16,000
one for to d.c.

1273
01:16:16,100 --> 01:16:16,900
two and a half D sorting.

1274
01:16:17,100 --> 01:16:18,300
I think there's just

1275
01:16:18,900 --> 01:16:23,000
Up with hacked rules that work for your particular circumstance and

1276
01:16:23,000 --> 01:16:26,300
then maybe doing a good job on the algorithm that implements those

1277
01:16:26,300 --> 01:16:26,700
rules.

1278
01:16:26,700 --> 01:16:29,100
Like I think we did, you know, we did a reasonable interpretation

1279
01:16:29,100 --> 01:16:30,400
there, it's not the best.

1280
01:16:30,400 --> 01:16:33,900
You know, we could spend weeks making way better ones, but it's

1281
01:16:33,900 --> 01:16:34,900
totally fine.

1282
01:16:35,400 --> 01:16:40,200
It doesn't run and squared because we partitioned it it's, you know,

1283
01:16:40,500 --> 01:16:44,400
only does the graph traversal, once it detects Cycles properly, it's,

1284
01:16:44,400 --> 01:16:46,700
you know, it's not a piece of crap, right?

1285
01:16:48,500 --> 01:16:51,400
And so I think you know that's maybe more what I was saying is there

1286
01:16:51,400 --> 01:16:54,400
some you know, we don't want to hack stuff, we don't have to hack.

1287
01:16:54,400 --> 01:16:57,900
If there is a good solution, maybe we should do it but the thing in

1288
01:16:57,900 --> 01:16:58,800
general is a hack.

1289
01:16:58,800 --> 01:17:01,700
And so your fault question do you think the engine should cover most

1290
01:17:01,700 --> 01:17:04,000
all boundary conditions or is there room for boundary hacks in certain

1291
01:17:04,000 --> 01:17:05,000
extreme circumstances?

1292
01:17:06,000 --> 01:17:08,100
The whole sort rule is a hack.

1293
01:17:08,100 --> 01:17:14,000
So you know that that is just I think unavoidable unfortunately

1294
01:17:34,600 --> 01:17:35,400
All right.

1295
01:17:45,300 --> 01:17:51,000
All right, so let's let's go ahead and close down.

1296
01:17:54,800 --> 01:17:55,300
Oh dear.

1297
01:18:01,200 --> 01:18:02,400
Cuz I didn't say something.

1298
01:18:05,100 --> 01:18:07,700
Thank you everyone for joining me, for another episode of handmade

1299
01:18:07,700 --> 01:18:08,000
hero.

1300
01:18:08,000 --> 01:18:09,300
It's been a pleasure coding with you.

1301
01:18:09,300 --> 01:18:14,600
As always, if you would like to follow along at home with the source,

1302
01:18:14,600 --> 01:18:17,900
you can always pre-order the game on handmade hero dot-org and it

1303
01:18:17,900 --> 01:18:21,400
comes, it comes with the source code.

1304
01:18:21,400 --> 01:18:24,600
So you can play around with it, even as it is still in development.

1305
01:18:25,400 --> 01:18:29,600
You can and you know, do your own little tinkering, we also have a

1306
01:18:29,600 --> 01:18:30,600
forum site, you can go to.

1307
01:18:30,600 --> 01:18:32,900
If you want to ask questions a patreon page, want support the video

1308
01:18:32,900 --> 01:18:34,800
series, a schedule bot.

1309
01:18:35,000 --> 01:18:37,600
Sweets the schedule at you, if you want to catch us live and an

1310
01:18:37,600 --> 01:18:43,200
episode guide, if you need to go find that very special old episode

1311
01:18:43,200 --> 01:18:43,800
you missed.

1312
01:18:44,500 --> 01:18:46,700
It's all there and thanks to me.

1313
01:18:46,700 --> 01:18:51,600
Blow the magical, God of annotation, it's even marked up with time

1314
01:18:51,600 --> 01:18:53,200
code, if you can believe that.

1315
01:18:54,600 --> 01:18:55,600
So that's about it.

1316
01:18:56,200 --> 01:18:58,800
I-i'll be back here tomorrow.

1317
01:18:58,800 --> 01:18:59,500
At 5 p.m.

1318
01:18:59,500 --> 01:19:00,700
Pacific Daylight time.

1319
01:19:01,800 --> 01:19:04,600
When I think we'll have to make that decision about what we want to

1320
01:19:04,600 --> 01:19:04,800
do.

1321
01:19:04,900 --> 01:19:07,600
Do with the sort of chain daisy chain sorting.

1322
01:19:07,600 --> 01:19:09,200
I don't know what the right answer is to that.

1323
01:19:09,200 --> 01:19:12,300
We don't have a lot of information, maybe we'll leave it like it is

1324
01:19:12,300 --> 01:19:15,700
right now and just implement the merging and we'll see if that causes

1325
01:19:15,700 --> 01:19:18,100
problems and if it is then we'll sort of moved out because it

1326
01:19:18,100 --> 01:19:21,100
obviously makes a sort cheaper to have less things in it so if you can

1327
01:19:21,100 --> 01:19:23,700
get away without it maybe the answer is get away without it.

1328
01:19:24,600 --> 01:19:27,500
But on the other hand when the hero stretches around it's going to be

1329
01:19:27,500 --> 01:19:28,800
bigger, I don't know.

1330
01:19:29,800 --> 01:19:32,100
The more I think about it, the more I'm thinking talking myself out of

1331
01:19:32,100 --> 01:19:32,700
it maybe we do.

1332
01:19:32,700 --> 01:19:34,400
We probably should actually put them on there.

1333
01:19:34,900 --> 01:19:39,300
Anyway, that's about it for today until tomorrow have fun programming

1334
01:19:39,300 --> 01:19:40,900
and I'll see you guys on the internet.

1335
01:19:40,900 --> 01:19:41,600
Take it easy, everybody.

