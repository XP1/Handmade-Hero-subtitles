1
00:00:00,300 --> 00:00:00,800
There we go.

2
00:00:03,100 --> 00:00:05,500
Hello everyone, and welcome to handmade hero.

3
00:00:05,500 --> 00:00:09,500
The show we code a complete game live on stream.

4
00:00:09,900 --> 00:00:12,000
We are at an exciting.

5
00:00:12,000 --> 00:00:12,800
Eh

6
00:00:14,100 --> 00:00:15,600
what can I say, right?

7
00:00:15,600 --> 00:00:18,000
It's just, it's bristling with excitement.

8
00:00:18,000 --> 00:00:23,500
We're at a bristling point in the code where we finally get to dive

9
00:00:23,500 --> 00:00:26,900
into our debug data that we've spent a bunch of time figuring out how

10
00:00:26,900 --> 00:00:29,800
to collect reasonably well and yesterday.

11
00:00:29,800 --> 00:00:34,100
We added just a little bit of interface code to our debug overlay, to

12
00:00:34,100 --> 00:00:37,800
allow us to kind of hover over things and get some info on that.

13
00:00:38,200 --> 00:00:42,000
So today, we're going to get to play around a bit and do some fun

14
00:00:42,000 --> 00:00:42,800
things I think.

15
00:00:43,900 --> 00:00:47,200
What I'd like to do is I'd like to make it so that we can kind of

16
00:00:47,200 --> 00:00:47,900
interact with that.

17
00:00:47,900 --> 00:00:51,700
Debug data do something kind of fancy where we can, you know, like

18
00:00:51,700 --> 00:00:55,600
drill down into it and like, look at individual sections of it more,

19
00:00:55,800 --> 00:00:56,600
that sort of thing.

20
00:01:01,900 --> 00:01:03,900
So, I don't know exactly what we're going to do there.

21
00:01:03,900 --> 00:01:05,500
I don't have a concrete plan.

22
00:01:05,700 --> 00:01:08,200
Not really in terms of what we're going to do in the code, but more.

23
00:01:08,200 --> 00:01:11,200
So I don't necessarily know the best way to visualize some of this

24
00:01:11,200 --> 00:01:11,600
stuff.

25
00:01:12,200 --> 00:01:14,600
So that's a little bit of a, of a thing that's up in the air.

26
00:01:14,600 --> 00:01:20,400
But we will start playing around with it and see what shakes out.

27
00:01:20,400 --> 00:01:23,500
Basically, our goal is just to make something that'll be kind of easy

28
00:01:23,500 --> 00:01:27,800
for us to use and allow us to do something, you know, to quickly kind

29
00:01:27,800 --> 00:01:28,700
of inspect our data.

30
00:01:28,900 --> 00:01:31,500
So I'd like to kind of jump right into that it's day 18.

31
00:01:31,700 --> 00:01:32,200
Nine here.

32
00:01:32,200 --> 00:01:35,300
Which means that if you preorder the game on handmade here a torque

33
00:01:35,300 --> 00:01:37,400
and you would like to follow along with a coating that I'm doing.

34
00:01:38,000 --> 00:01:40,800
What you want to do is take day 188 source code, unpack that

35
00:01:40,800 --> 00:01:43,900
introductory and then you will be at the same place that I am today

36
00:01:44,500 --> 00:01:49,400
and so if you are interested in following along, that is the thing to

37
00:01:49,500 --> 00:01:50,100
do.

38
00:01:50,500 --> 00:01:53,400
Alright, here we go, let's get started here.

39
00:01:54,000 --> 00:02:01,200
Where we left off, if you recall is we had sort of the ability to now

40
00:02:01,200 --> 00:02:01,500
like

41
00:02:01,600 --> 00:02:02,700
Pause the game.

42
00:02:02,700 --> 00:02:05,800
Well we don't really pause the game like the game still runs but we

43
00:02:05,800 --> 00:02:08,800
pause the debug processing, right?

44
00:02:08,800 --> 00:02:11,700
So as the game is running you know as we're coming along we can at any

45
00:02:11,700 --> 00:02:15,500
time pause and then we have this sort of information over here and we

46
00:02:15,500 --> 00:02:16,800
can go through and look at what it is.

47
00:02:16,800 --> 00:02:18,600
So if we want to know what that was, we can see that.

48
00:02:18,600 --> 00:02:20,700
That's like something called do tiled render work.

49
00:02:20,700 --> 00:02:23,600
Which of course, we know is in our render, we know how many cycles it

50
00:02:23,600 --> 00:02:25,200
took that sort of thing, right?

51
00:02:26,100 --> 00:02:28,400
And furthermore, we can kind of see just by looking at this.

52
00:02:28,400 --> 00:02:31,000
Now what takes the most of the time, you can see that game update, is

53
00:02:31,000 --> 00:02:32,200
this giant thing here, right?

54
00:02:32,300 --> 00:02:34,000
So we kind of have a good idea of what's going on.

55
00:02:34,000 --> 00:02:37,500
Like, here is frame frame rate, wait here's frame display.

56
00:02:37,500 --> 00:02:39,100
Here is our debug collation, right?

57
00:02:39,100 --> 00:02:41,200
So you can kind of see you like pretty quickly, right?

58
00:02:41,400 --> 00:02:42,100
What's going on?

59
00:02:42,100 --> 00:02:43,400
And it's kind of nice, right?

60
00:02:43,400 --> 00:02:44,500
It's pretty, it's pretty handy.

61
00:02:44,800 --> 00:02:45,400
However

62
00:02:49,400 --> 00:02:50,800
Handy, as it may be.

63
00:02:50,800 --> 00:02:55,000
What the problem that we have is we have a lot of more debug events.

64
00:02:55,000 --> 00:02:57,400
We can't, we're only as playing the top level ones.

65
00:02:57,400 --> 00:02:59,500
Here, we don't have a way of like getting

66
00:03:00,000 --> 00:03:03,600
And finding out like all right, you know, I see that game update is

67
00:03:03,600 --> 00:03:05,000
taking this big chunk of time.

68
00:03:05,100 --> 00:03:09,000
I would like to now expand that and say, what, you know what's

69
00:03:09,000 --> 00:03:12,900
actually in there like what's actually underneath that it taking its

70
00:03:12,900 --> 00:03:13,800
time, you know?

71
00:03:15,300 --> 00:03:16,600
So that's what I'd like to do.

72
00:03:16,800 --> 00:03:20,100
And I was thinking, you know, these framerate bars maybe they'd be

73
00:03:20,100 --> 00:03:22,500
better off going horizontal in the reason I was thinking that is

74
00:03:22,500 --> 00:03:25,100
because, you know, if they were horizontal, we could probably put the

75
00:03:25,100 --> 00:03:28,800
name of the thing, inside their potentially, even or if there's stuff

76
00:03:28,800 --> 00:03:29,800
that we could probably do,

77
00:03:30,000 --> 00:03:32,400
Do that would make it a lot easier for us to use.

78
00:03:32,500 --> 00:03:34,700
And so what I'd like to do is just kind of start working with that.

79
00:03:34,700 --> 00:03:38,000
Like I said, get get this, get this into some state where we could

80
00:03:38,000 --> 00:03:38,900
kind of expect it.

81
00:03:38,900 --> 00:03:41,500
Maybe put it, maybe put it here, so we can kind of interact with that

82
00:03:41,500 --> 00:03:41,700
way.

83
00:03:41,700 --> 00:03:43,800
I don't know, but that's what I'm going to start playing with.

84
00:03:44,300 --> 00:03:47,400
So again, we have most of the stuff we need we just have to now do

85
00:03:47,400 --> 00:03:50,400
some work to kind of pull it together and make it into something.

86
00:03:50,400 --> 00:03:52,200
That's kind of usable, right?

87
00:03:52,800 --> 00:03:57,300
So I'm going to try, I'm going to start to try a few things in that

88
00:03:57,300 --> 00:03:59,800
area and see what we can do.

89
00:04:00,400 --> 00:04:04,200
So here we go into handmade debug dot CPP.

90
00:04:04,800 --> 00:04:10,500
So if I wanted to do something like that, where I was going to turn it

91
00:04:10,500 --> 00:04:11,100
sideways.

92
00:04:11,900 --> 00:04:14,600
If I wanted to turn it sideways, that's actually not too difficult to

93
00:04:14,600 --> 00:04:15,100
do, right?

94
00:04:15,100 --> 00:04:18,200
Because this is the this is the only code that really has anything to

95
00:04:18,200 --> 00:04:19,200
do with the chart, right?

96
00:04:19,200 --> 00:04:20,500
This is the thing that draws it.

97
00:04:20,800 --> 00:04:23,700
So all I really have to do the turn it on its side is changed sort of

98
00:04:23,700 --> 00:04:27,500
the way that I'm interpreting these variables instead of saying that

99
00:04:27,500 --> 00:04:30,000
you know I've got the chart height and width and they mean us

100
00:04:30,200 --> 00:04:32,400
Thing I can just sort of rotate it on its side.

101
00:04:32,600 --> 00:04:37,200
So if I want to I can say alright you know the chart with is going to

102
00:04:37,200 --> 00:04:40,500
be instead the chart height and that's going to be like how many we

103
00:04:40,500 --> 00:04:42,700
have vertically and the chart with is going to be the thing that's

104
00:04:42,700 --> 00:04:46,000
fixed, it's going to be, you know, a certain amount however, much that

105
00:04:46,000 --> 00:04:46,300
is.

106
00:04:47,400 --> 00:04:50,100
And, you know, since it's going to be running from left to, right, we

107
00:04:50,100 --> 00:04:51,800
can also make it a little bit bigger.

108
00:04:51,800 --> 00:04:54,400
We know we could make it, 1000 could be the entire width of the chart,

109
00:04:54,400 --> 00:04:56,300
so that things could be able to bigger.

110
00:04:56,300 --> 00:04:57,600
So that's also kind of cool.

111
00:04:58,200 --> 00:04:59,800
And then for our lanes, right?

112
00:04:59,800 --> 00:05:00,000
We're going

113
00:05:00,100 --> 00:05:03,100
To have laid Heights, not laid widths so that's good too.

114
00:05:03,300 --> 00:05:06,000
Same thing with bars we got bar Heights that's going to be the lane

115
00:05:06,000 --> 00:05:09,500
with or sorry the length height right times the lane count and I'm

116
00:05:09,500 --> 00:05:10,500
going to make those Lanes.

117
00:05:10,500 --> 00:05:12,600
I'd like to make those a little bit bigger so I'm going to make them

118
00:05:12,600 --> 00:05:14,600
20 pixels High.

119
00:05:14,600 --> 00:05:17,800
I don't know if we've got enough room for that will see, you know, I

120
00:05:17,800 --> 00:05:21,100
hope we do, but I don't actually know if we do and so the spacing

121
00:05:21,100 --> 00:05:25,100
there again, bar height, the spacing on.

122
00:05:25,100 --> 00:05:28,000
It's going to be oops, spacing whatever.

123
00:05:28,000 --> 00:05:29,900
The bar height is plus some little spacing.

124
00:05:29,900 --> 00:05:30,000
So,

125
00:05:30,200 --> 00:05:33,200
Can leave some Space Between the Bars, right?

126
00:05:34,000 --> 00:05:37,800
Okay, so there is Arthur's are kind of chart height.

127
00:05:38,100 --> 00:05:42,200
That's the total height of you know, of the chart there is our chart

128
00:05:42,200 --> 00:05:44,500
left is still going to be the same right?

129
00:05:44,500 --> 00:05:50,500
Our chart Min Y at now we don't really have a Min y so much we kind of

130
00:05:50,500 --> 00:05:54,000
have like a starting point and we're going to go down the screen on

131
00:05:54,000 --> 00:05:58,000
that so we're just going to call this Chart top for now and I think

132
00:05:58,000 --> 00:05:59,800
that that is what that would be, right?

133
00:06:00,000 --> 00:06:02,700
At the very top of the screen and going down for now, right?

134
00:06:02,700 --> 00:06:05,900
And we'll sort of, think about maybe doing some fancy stuff, as we as

135
00:06:05,900 --> 00:06:08,900
we pull up right now, we just want to kind of get it, you know,

136
00:06:08,900 --> 00:06:09,900
drawing reasonably.

137
00:06:10,800 --> 00:06:14,500
So the scale is again, going to be the same sort of stuff, but now

138
00:06:14,500 --> 00:06:16,700
we're going to we're going to be scaling based on the width.

139
00:06:17,000 --> 00:06:19,100
So, that's, that's really all we need to do there.

140
00:06:19,400 --> 00:06:23,000
So, as we come through here, now we just have to kind of re rework the

141
00:06:23,000 --> 00:06:25,700
way that we're making these rectangles, that's really the only thing

142
00:06:26,000 --> 00:06:27,200
that we're going to have to do.

143
00:06:27,300 --> 00:06:29,800
And so now what we have is we've got these

144
00:06:30,000 --> 00:06:32,800
Guys, the sense of these guys is kind of going to be a little bit

145
00:06:32,900 --> 00:06:33,900
reversed, right.

146
00:06:34,000 --> 00:06:36,200
Instead we've got the stack X.

147
00:06:37,500 --> 00:06:40,400
Is going to start with the chart left, right?

148
00:06:40,500 --> 00:06:43,500
And the stack, why is going to start with the Chart top?

149
00:06:43,900 --> 00:06:47,000
And then it's going to go down based on how many bars we have, right?

150
00:06:47,000 --> 00:06:51,500
So we'll kind of come down, down down down, you know, so then we've

151
00:06:51,500 --> 00:06:53,000
got our Region's here.

152
00:06:53,000 --> 00:06:56,200
We're going to make our, you know, same same stuff as we were doing

153
00:06:56,200 --> 00:06:56,500
before.

154
00:06:56,500 --> 00:06:59,200
We've got our colors and the Min and the max.

155
00:06:59,200 --> 00:07:01,300
Why are actually now going to be Min and Max X?

156
00:07:01,300 --> 00:07:01,400
Right?

157
00:07:01,400 --> 00:07:02,600
So we're gonna start at that X.

158
00:07:02,600 --> 00:07:04,500
That's not guess that's kind of advancing forwards.

159
00:07:04,700 --> 00:07:07,100
We're going to add the scale just like we're doing the for and get'em

160
00:07:07,300 --> 00:07:10,900
And Mac, Mac sex, and then we've got to sort of put those in here.

161
00:07:10,900 --> 00:07:15,600
So now we have to do is say, all right, we've got to this Min X and

162
00:07:15,600 --> 00:07:17,700
this Max X, we know those.

163
00:07:17,700 --> 00:07:21,400
But now we have to sort of do the equivalent that we were doing before

164
00:07:21,400 --> 00:07:24,700
for the Min and Max wise, right?

165
00:07:24,800 --> 00:07:27,800
So the min max wise are going to be a little bit different.

166
00:07:27,800 --> 00:07:31,500
We have the stock why that we're starting with but the max is actually

167
00:07:31,500 --> 00:07:34,200
since it's coming from the top down and again why gets decreased

168
00:07:34,200 --> 00:07:36,900
decreases as it goes down the screen that's stacked.

169
00:07:36,900 --> 00:07:37,000
Why

170
00:07:37,200 --> 00:07:40,000
Why is going to actually be the maximum value, right?

171
00:07:40,000 --> 00:07:41,900
That's the actual maximum value.

172
00:07:42,600 --> 00:07:45,800
It's up at the top and the minimum value is actually going to be

173
00:07:45,800 --> 00:07:50,500
taking that that Top Value and subtracting away how big Elaine height

174
00:07:50,500 --> 00:07:52,300
actually is, right.

175
00:07:52,700 --> 00:07:55,200
So that's that's how that's going to work there, right?

176
00:07:55,600 --> 00:08:00,100
And so this is actually the value that we would be using and you know,

177
00:08:00,100 --> 00:08:03,500
to place the actual lane and then for the one that's that's lower

178
00:08:03,500 --> 00:08:04,500
down, right?

179
00:08:04,500 --> 00:08:07,100
The one that's lower down is actually going to just be the

180
00:08:07,200 --> 00:08:08,800
Lane height plus one.

181
00:08:09,900 --> 00:08:10,400
Right.

182
00:08:13,100 --> 00:08:13,500
Okay.

183
00:08:15,600 --> 00:08:18,100
So once we get that rectangle, we can push it on there, there's not a

184
00:08:18,100 --> 00:08:21,800
lot more that we would have to do, that's pretty much it, but now we

185
00:08:21,800 --> 00:08:25,400
have to make sure that we actually Advance our stack properly.

186
00:08:25,400 --> 00:08:27,800
In fact, where is that code?

187
00:08:27,800 --> 00:08:30,000
I guess we don't have to do that anymore because I guess now I think

188
00:08:30,000 --> 00:08:32,299
about it that stuff's all handled in the collation code.

189
00:08:32,299 --> 00:08:34,299
So we don't even have to worry about stacking things on top of each

190
00:08:34,299 --> 00:08:34,600
other.

191
00:08:35,299 --> 00:08:36,700
We're kind of just done at that point.

192
00:08:36,700 --> 00:08:37,900
That's really all there is to it.

193
00:08:37,900 --> 00:08:43,200
So yeah, that's that's kind of nice and there we go.

194
00:08:43,700 --> 00:08:44,600
So never mind.

195
00:08:44,700 --> 00:08:45,300
I guess that's

196
00:08:45,400 --> 00:08:50,400
Much it and so then what we would need to do here is this this guy

197
00:08:50,400 --> 00:08:54,700
where we kind of Mark off the the territory that's going to be an you

198
00:08:54,700 --> 00:08:56,200
know an up-down kind of a line.

199
00:08:56,200 --> 00:08:59,400
I'm going to turn that off for a minute because I think we should

200
00:08:59,400 --> 00:08:59,900
probably think about

201
00:09:00,100 --> 00:09:01,500
What we actually want to do there.

202
00:09:01,900 --> 00:09:04,600
Think about that, a little bit harder for drawing in like marker

203
00:09:04,600 --> 00:09:05,000
lines.

204
00:09:05,000 --> 00:09:05,900
You can tell a fascinating.

205
00:09:05,900 --> 00:09:09,700
So I'm just going to see if we got our chart turned around reasonably

206
00:09:09,800 --> 00:09:10,300
here.

207
00:09:10,600 --> 00:09:11,600
So there we go.

208
00:09:12,300 --> 00:09:16,300
Okay so it looks like we're almost there but it looks like I messed up

209
00:09:16,300 --> 00:09:21,100
a little bit on the you can see like these guys are really thin for,

210
00:09:21,100 --> 00:09:22,100
you know, they're getting wider.

211
00:09:22,100 --> 00:09:27,400
So it looks like I didn't quite do the the width, I'm sorry, the chart

212
00:09:27,400 --> 00:09:29,900
highlights properly, so let's make sure we've got that.

213
00:09:30,000 --> 00:09:31,500
That set up properly.

214
00:09:31,500 --> 00:09:33,300
So we've got, oh, yeah, right.

215
00:09:33,300 --> 00:09:35,800
That was just, that's just a stupid mistake.

216
00:09:35,800 --> 00:09:37,100
I incremented the wrong value.

217
00:09:37,100 --> 00:09:39,100
I wanted to go to the next Lane index.

218
00:09:39,200 --> 00:09:42,100
I didn't want to change the lane height, so yeah.

219
00:09:42,900 --> 00:09:46,000
Okay, so now we've got a more sane looking thing.

220
00:09:46,000 --> 00:09:48,300
This is roughly, what I was expecting to see, right?

221
00:09:48,300 --> 00:09:49,300
So that's all good.

222
00:09:49,900 --> 00:09:52,800
And now we've kind of got a thing that we could work with little bit

223
00:09:52,800 --> 00:09:53,100
more.

224
00:09:53,100 --> 00:09:57,400
It is still a little too long but then again, like I was saying that's

225
00:09:57,400 --> 00:09:59,800
just because our frame rate is really bad at the moment.

226
00:10:00,000 --> 00:10:03,600
If we were to actually do this at a reasonable frame, right?

227
00:10:03,900 --> 00:10:05,400
Which we could do pretty easily,

228
00:10:07,000 --> 00:10:10,100
We could probably do it just by having this be optimized for starters,

229
00:10:10,800 --> 00:10:14,200
then I think it would fit on the screen relatively well, right?

230
00:10:14,800 --> 00:10:16,900
Or maybe not, I take it back.

231
00:10:17,700 --> 00:10:21,300
So, you know the other thing that's kind of interesting is I don't

232
00:10:21,300 --> 00:10:24,400
know why our frame rate weight is is so crazy.

233
00:10:25,500 --> 00:10:28,500
You know why the framerate weight is taking such a huge amount of

234
00:10:28,500 --> 00:10:29,000
time?

235
00:10:29,300 --> 00:10:33,500
It's kind of interesting, right, because it doesn't really make any

236
00:10:33,500 --> 00:10:34,000
sense.

237
00:10:34,200 --> 00:10:36,200
And if we look at that code,

238
00:10:37,800 --> 00:10:39,200
Do we have a bug in there?

239
00:10:40,200 --> 00:10:40,700
That made us?

240
00:10:40,700 --> 00:10:43,100
Because that's our code, that's doing the sleeping.

241
00:10:43,800 --> 00:10:47,000
I'm not entirely sure, but we could see here.

242
00:10:47,300 --> 00:10:51,200
So, here's our, here's our code for framerate, wait, right?

243
00:10:51,400 --> 00:10:54,600
You can see that really all it does, is it just, you know, tries to

244
00:10:54,600 --> 00:10:59,100
figure out how long we do say that it's probably buggy so that's fair

245
00:10:59,900 --> 00:11:02,400
being fair to us but let's take a look.

246
00:11:02,800 --> 00:11:05,600
So what happens here is we have a work counter

247
00:11:06,300 --> 00:11:07,600
We see what time the work counters.

248
00:11:07,600 --> 00:11:11,500
That we see how long it's been since the last time we marked the

249
00:11:11,500 --> 00:11:12,200
counter

250
00:11:16,700 --> 00:11:19,500
And that's the last thing we do, right?

251
00:11:19,800 --> 00:11:24,300
So that's how long it's been since the last one of those, we then say

252
00:11:24,300 --> 00:11:30,100
that we would like that, I guess to be seconds left.

253
00:11:30,100 --> 00:11:32,200
We would like that to be however, many seconds.

254
00:11:32,200 --> 00:11:37,300
We expect her to be prefer Aim, so if it's less than that, right?

255
00:11:37,900 --> 00:11:39,300
Then we kind of need to do.

256
00:11:39,300 --> 00:11:40,400
We need to do the sleeping.

257
00:11:41,200 --> 00:11:46,200
So, you know, now that we're doing a bunch of stuff, kind of, after

258
00:11:46,200 --> 00:11:49,500
that, that does create a bit of a problem.

259
00:11:49,800 --> 00:11:55,500
Like, what we really probably want to do there is we want to just see.

260
00:11:55,900 --> 00:11:58,700
We want to see how much time has elapsed since the last time we

261
00:11:59,000 --> 00:11:59,800
displayed this.

262
00:12:00,400 --> 00:12:01,300
You know what I mean?

263
00:12:01,600 --> 00:12:04,500
So because really, that's, that's what we're trying to trigger the

264
00:12:04,500 --> 00:12:04,900
time to.

265
00:12:04,900 --> 00:12:07,400
And if too much time has elapsed.

266
00:12:07,400 --> 00:12:11,900
Since the last time we actually displayed something we would want, you

267
00:12:11,900 --> 00:12:15,500
know, we would want to not, wait at all, we'd want to just keep going,

268
00:12:16,600 --> 00:12:19,900
at least that's, you know, my understanding of, that's, that's what I

269
00:12:19,900 --> 00:12:21,200
feel like should happen, right?

270
00:12:22,200 --> 00:12:26,200
And so, then as we go here, we do like some spinlock stuff to try and

271
00:12:26,200 --> 00:12:30,000
get us right up to the time and that's

272
00:12:30,200 --> 00:12:31,000
About it.

273
00:12:31,100 --> 00:12:31,600
Nothing.

274
00:12:31,600 --> 00:12:34,100
Nothing to nothing too.

275
00:12:34,100 --> 00:12:35,100
Weird going on.

276
00:12:35,600 --> 00:12:37,900
So yeah, I mean, again, it's kind of a problem.

277
00:12:38,100 --> 00:12:41,100
One of the downsides of putting my windows is, there's no hard Real

278
00:12:41,100 --> 00:12:43,400
Time stuff happening there.

279
00:12:43,600 --> 00:12:47,200
So it's pretty hard for us to actually say, hey, operating system, you

280
00:12:47,200 --> 00:12:49,400
can give some time to somebody else, but you need to come back to us

281
00:12:49,400 --> 00:12:52,600
in time for thing X, whatever thing X is, right?

282
00:12:54,100 --> 00:12:57,200
So yeah, it's one of the reasons why you tend to try to use V blank

283
00:12:57,600 --> 00:13:00,100
when you're presenting through something that actually has the

284
00:13:00,200 --> 00:13:03,600
Support because it's more reliable than trying to do this.

285
00:13:03,800 --> 00:13:04,400
So yeah.

286
00:13:04,700 --> 00:13:06,000
So this is a little janky.

287
00:13:06,200 --> 00:13:09,200
So, you know, one thing we could do for now is just just turn it off,

288
00:13:09,600 --> 00:13:10,100
right?

289
00:13:10,100 --> 00:13:14,800
We could we could just say let you know this guy goes away and we

290
00:13:14,800 --> 00:13:15,500
don't

291
00:13:16,400 --> 00:13:19,400
We don't try to give any anything back to the OS.

292
00:13:21,400 --> 00:13:21,900
Right.

293
00:13:22,300 --> 00:13:23,700
But that also means that our

294
00:13:27,000 --> 00:13:27,800
What happened there?

295
00:13:30,100 --> 00:13:32,200
Don't know what we're gonna have to look at why our region counts,

296
00:13:32,200 --> 00:13:32,700
sometimes.

297
00:13:32,700 --> 00:13:34,800
Overflow probably.

298
00:13:34,800 --> 00:13:37,300
It probably has something to do with our threading stuff, right?

299
00:13:38,000 --> 00:13:39,200
But so let's take a look at this.

300
00:13:40,100 --> 00:13:43,600
So now we have our frame display and we have our debug collation, but

301
00:13:43,600 --> 00:13:46,200
we don't have any more of the frame wait in there.

302
00:13:46,500 --> 00:13:48,300
And so, that's a good thing, right?

303
00:13:48,300 --> 00:13:50,600
Debug collation is still quite a bit of our time.

304
00:13:50,600 --> 00:13:53,000
In fact, it's taking up a tremendous amount of time, right.

305
00:13:53,300 --> 00:13:56,000
You can see all that that extra time in their being taken up by the

306
00:13:56,000 --> 00:13:56,900
debug collation.

307
00:13:58,300 --> 00:13:58,800
So, yeah.

308
00:13:59,000 --> 00:13:59,400
But at least.

309
00:13:59,500 --> 00:14:01,700
Now, we don't have that particular thing in there, so we don't have to

310
00:14:01,700 --> 00:14:02,600
worry about it.

311
00:14:02,600 --> 00:14:04,700
Kind of ruining our lives, right?

312
00:14:04,700 --> 00:14:06,700
So that's good.

313
00:14:06,900 --> 00:14:10,200
All right, so, you know, definitely better, right?

314
00:14:10,200 --> 00:14:13,400
Definitely better but still, not still, not perfect.

315
00:14:13,400 --> 00:14:16,400
So let's go ahead and take a look, too.

316
00:14:16,700 --> 00:14:19,800
I mean, the other thing, I guess we could do today if we wanted to

317
00:14:19,800 --> 00:14:25,300
start doing if we wanted to, to end out the week and start next week,

318
00:14:25,300 --> 00:14:28,000
focusing on the user UI stuff rather than doing some of you.

319
00:14:28,000 --> 00:14:29,500
I now the other thing I could do is

320
00:14:29,500 --> 00:14:32,700
Is try to start keeping frames incrementally so that we can cut down

321
00:14:32,700 --> 00:14:34,100
on that debug collation time.

322
00:14:34,300 --> 00:14:35,700
That's another thing that we could do.

323
00:14:35,800 --> 00:14:38,300
I don't know what the, what the right solution is there.

324
00:14:38,800 --> 00:14:41,700
But yeah, getting rid of the frame rate, seems like a pretty important

325
00:14:41,700 --> 00:14:44,900
thing to do because obviously this code is just causing a little bit

326
00:14:44,900 --> 00:14:46,000
too much of a pain.

327
00:14:47,200 --> 00:14:49,900
You kind of want to be able to sleep to give some time back to the OS.

328
00:14:49,900 --> 00:14:53,100
But in this case, I'm not really sure how useful that would

329
00:14:53,100 --> 00:14:57,100
necessarily be how reliable we could actually get that to be.

330
00:14:57,200 --> 00:14:59,600
So we may want to just wait until we have

331
00:15:00,000 --> 00:15:02,300
Be blank support there to actually do it.

332
00:15:02,300 --> 00:15:10,200
So to do Casey, leave this off until we have actual be blank.

333
00:15:12,800 --> 00:15:14,800
Support question, mark.

334
00:15:15,900 --> 00:15:16,800
Or something like that.

335
00:15:19,500 --> 00:15:23,000
Okay, so moving back here.

336
00:15:24,000 --> 00:15:27,500
So what I would like to do and again, you know, like I was saying if

337
00:15:27,500 --> 00:15:30,800
we if we take a look at what's happening, now you can sort of Envision

338
00:15:30,800 --> 00:15:31,300
how?

339
00:15:31,800 --> 00:15:35,000
Yeah, we should probably take care of that as well.

340
00:15:36,100 --> 00:15:39,100
In fact that hits enough, I think I'm just going to make that decision

341
00:15:39,200 --> 00:15:43,200
since since it's the end of the week we get this problem a bunch and

342
00:15:43,300 --> 00:15:46,400
we have the the speed problem as well, right.

343
00:15:47,100 --> 00:15:48,800
Where we have this problem where

344
00:15:50,000 --> 00:15:53,000
Typically she just taking a ton of time so I feel like we should just

345
00:15:53,000 --> 00:15:55,900
go ahead and kill to try to kill two birds with one stone and say.

346
00:15:55,900 --> 00:15:59,600
Let's go ahead and try to make debug collation, be incremental right?

347
00:16:00,100 --> 00:16:05,500
Instead of debug collation being this thing that you know, that we

348
00:16:05,500 --> 00:16:08,100
have to have all these like constants for and just nasty stuff like

349
00:16:08,100 --> 00:16:08,600
that.

350
00:16:08,900 --> 00:16:11,300
So if we wanted to do something like that, right?

351
00:16:11,300 --> 00:16:13,100
Here's the way that I would suggest.

352
00:16:13,100 --> 00:16:16,000
We do it, we have debug frames.

353
00:16:16,200 --> 00:16:18,700
And what I'm going to do is I'm just going to have a debug frame.

354
00:16:18,900 --> 00:16:21,100
Thing where we just do like, I don't know.

355
00:16:21,500 --> 00:16:24,500
Well, you know, we can still actually probably do debug frames in just

356
00:16:26,000 --> 00:16:29,400
in just an array and we could just say, all right, we're going to keep

357
00:16:29,400 --> 00:16:33,200
some number of Prior debug frames, I don't know how many of those we

358
00:16:33,200 --> 00:16:38,400
should actually keep but we will, you know, will keep however many I

359
00:16:38,400 --> 00:16:41,900
guess however many the the data supports or something.

360
00:16:43,700 --> 00:16:47,900
And then what we can do is we can have our collation be more of a

361
00:16:47,900 --> 00:16:51,000
permanent thing that runs for words, right?

362
00:16:51,200 --> 00:16:56,600
So the way we would do that is we would say something like these guys

363
00:16:56,600 --> 00:17:00,200
are these guys are not removed.

364
00:17:00,200 --> 00:17:05,099
Like every frame like this stuff doesn't re re do every frame, instead

365
00:17:05,099 --> 00:17:07,599
what it does is it restarts itself.

366
00:17:07,599 --> 00:17:10,200
Every time we ask it to, right?

367
00:17:10,300 --> 00:17:12,599
Because right now what's happening is we have a memory Arena and we

368
00:17:12,599 --> 00:17:13,200
start

369
00:17:13,300 --> 00:17:14,000
Things.

370
00:17:14,400 --> 00:17:17,400
And then every frame we restart and start coding again.

371
00:17:17,800 --> 00:17:21,599
But what we could do instead is just say, oh keep collating.

372
00:17:22,300 --> 00:17:26,400
And then, the only time we're going to actually restart is when we

373
00:17:26,400 --> 00:17:31,500
actually decide that it's time, you know what I mean for a restart,

374
00:17:31,600 --> 00:17:32,100
right?

375
00:17:32,800 --> 00:17:36,000
So let's do the simplest possible version of that first and then we'll

376
00:17:36,000 --> 00:17:40,200
try a slightly more advanced version of that, right?

377
00:17:41,500 --> 00:17:42,200
So, here we go.

378
00:17:43,800 --> 00:17:49,500
What I want to do is to see if this works is assuming that we are not

379
00:17:49,500 --> 00:17:50,200
paused.

380
00:17:50,700 --> 00:17:55,200
What we're going to do is we're going to allow the collator to run

381
00:17:55,200 --> 00:17:58,800
forwards and and we're not going to do this.

382
00:17:58,800 --> 00:17:59,800
Begin temporary memory.

383
00:18:00,400 --> 00:18:01,000
Right.

384
00:18:01,100 --> 00:18:04,300
So instead we'll let begin temporary memory happened here.

385
00:18:04,900 --> 00:18:10,000
And then what we will do is we will only restart well, we'll call

386
00:18:10,000 --> 00:18:11,300
Kool-Aid, debug records.

387
00:18:11,400 --> 00:18:19,000
Like so we will only restart when we actually run out of frame

388
00:18:19,000 --> 00:18:20,800
storage, right?

389
00:18:21,600 --> 00:18:22,400
Does that make sense?

390
00:18:23,100 --> 00:18:27,400
So this is going to be something and in fact I guess we can test it

391
00:18:27,400 --> 00:18:28,400
like this as well.

392
00:18:28,500 --> 00:18:30,100
We could do it in two steps.

393
00:18:30,700 --> 00:18:38,900
Here we go with, internal void, restart relation, like so.

394
00:18:40,200 --> 00:18:44,800
And the way that would work is we would say this thing here.

395
00:18:49,100 --> 00:18:51,000
Yeah, this thing here.

396
00:18:53,100 --> 00:18:54,600
Can happen whenever we want.

397
00:18:55,000 --> 00:18:55,900
So we'll go ahead and do that.

398
00:18:55,900 --> 00:19:00,800
The books date, you hug States, and we just call restart collation

399
00:19:00,800 --> 00:19:03,400
with debug state is ME.

400
00:19:06,700 --> 00:19:10,100
So, yeah, assuming that we don't, you know, want to do anything else,

401
00:19:10,100 --> 00:19:13,200
we just restart and this is the same way that we were doing it before.

402
00:19:14,000 --> 00:19:17,600
Oh, and I guess I have to still have this defined until we finish that

403
00:19:17,600 --> 00:19:18,900
part off, right?

404
00:19:18,900 --> 00:19:20,800
So pound to find my freezer per frame.

405
00:19:21,100 --> 00:19:23,600
I don't know how many, but there's a bunch.

406
00:19:26,200 --> 00:19:27,900
So, there we go, right?

407
00:19:29,200 --> 00:19:32,500
and that's just working the same way as before and we still have a ton

408
00:19:32,500 --> 00:19:36,400
of debug collation time on the, on the wall there on the wall clock,

409
00:19:36,400 --> 00:19:36,900
as you saw,

410
00:19:38,200 --> 00:19:41,400
So now the question is, what if we just, you know, kind of did it in

411
00:19:41,400 --> 00:19:41,900
sweeps.

412
00:19:41,900 --> 00:19:46,200
So now we just left debug, you know, we look at Co ladybug records and

413
00:19:46,200 --> 00:19:48,800
if we take a look at this, you know, click debug records, kind of does

414
00:19:48,800 --> 00:19:51,300
this sort of initialization thing, right?

415
00:19:52,600 --> 00:19:54,200
What if I move that out?

416
00:19:54,300 --> 00:19:56,900
In fact, we could even imagine moving this out and still running it

417
00:19:56,900 --> 00:19:57,500
this way.

418
00:19:57,700 --> 00:20:00,900
So inside restart collation, we actually do that.

419
00:20:01,500 --> 00:20:03,900
So the whole thing gets done, right?

420
00:20:03,900 --> 00:20:07,100
Like at that at that restart point, right?

421
00:20:07,200 --> 00:20:07,800
Again, should

422
00:20:08,000 --> 00:20:09,400
Work, and it does.

423
00:20:09,400 --> 00:20:10,300
So that's all good.

424
00:20:12,600 --> 00:20:15,700
So now in Psycho, ladybug records, when this thing's going through,

425
00:20:16,200 --> 00:20:20,700
what we can do, is, we can sort of move through those event array

426
00:20:20,700 --> 00:20:21,100
index.

427
00:20:21,100 --> 00:20:25,400
He's, we can just remember the last one we processed and start there.

428
00:20:25,700 --> 00:20:29,700
So, instead of starting at the invalid array index, plus 1, we can

429
00:20:29,700 --> 00:20:32,800
just start at the last array index that we used.

430
00:20:33,200 --> 00:20:34,100
Does that make sense?

431
00:20:35,300 --> 00:20:38,100
So when we do a restart,

432
00:20:39,800 --> 00:20:41,200
We do we start collation.

433
00:20:41,900 --> 00:20:47,900
We do something like debug State you know event or collation array

434
00:20:47,900 --> 00:20:49,600
index, something like that.

435
00:20:50,600 --> 00:20:55,100
We can just say OK there's the invalid event array when we do the

436
00:20:55,100 --> 00:20:56,000
restart.

437
00:20:56,000 --> 00:20:58,900
We remember which one that is and we start at the one immediately

438
00:20:58,900 --> 00:20:59,800
after that.

439
00:21:00,000 --> 00:21:03,800
In here, instead of passing that in, we just always start from

440
00:21:03,800 --> 00:21:06,200
whatever the collation array index is.

441
00:21:06,900 --> 00:21:09,200
And in fact, we could even do this as a while loop.

442
00:21:09,200 --> 00:21:10,300
We could just say

443
00:21:15,000 --> 00:21:17,100
Well, actually, you know what?

444
00:21:19,700 --> 00:21:19,900
Yeah.

445
00:21:22,400 --> 00:21:25,400
I guess it's literally this now, which I realize is not particularly

446
00:21:25,400 --> 00:21:30,500
exciting, but then the event array index is now actually debug State

447
00:21:30,700 --> 00:21:31,500
collation R and X.

448
00:21:31,500 --> 00:21:33,800
So we're just going to we're just going to kind of move that guy

449
00:21:33,800 --> 00:21:35,700
through right?

450
00:21:35,900 --> 00:21:42,100
Like so and he is now a stored value, you know what I mean?

451
00:21:42,200 --> 00:21:44,400
And we could actually we could just avoid doing that for the rest of

452
00:21:44,400 --> 00:21:46,600
this by just sort of grabbing it out as well.

453
00:21:57,800 --> 00:21:58,600
Something like this.

454
00:22:00,600 --> 00:22:04,700
Okay, so we've got collation array index now but we need to store that

455
00:22:04,700 --> 00:22:11,000
up here so that would be something like you know, you 32 relation

456
00:22:11,200 --> 00:22:12,100
re-index.

457
00:22:13,000 --> 00:22:13,900
There we go.

458
00:22:16,300 --> 00:22:21,100
Invalid event array index is an Undeclared.

459
00:22:21,400 --> 00:22:25,300
Oh right still have to pass it in.

460
00:22:25,600 --> 00:22:28,600
I take it back so then we start collation.

461
00:22:28,600 --> 00:22:30,200
We have to pass the the invalid.

462
00:22:30,200 --> 00:22:31,700
One and the invalid.

463
00:22:31,700 --> 00:22:32,900
One of course is this one.

464
00:22:35,000 --> 00:22:37,200
Okay, so there we go.

465
00:22:37,700 --> 00:22:42,900
So now as we do this, well, assuming that we can get past that sort of

466
00:22:42,900 --> 00:22:46,800
annoying roadblock here, which we're sort of working towards removing

467
00:22:46,800 --> 00:22:47,400
permanently,

468
00:22:49,300 --> 00:22:52,600
So, now, when I do this, everything is still working the same way.

469
00:22:52,600 --> 00:22:55,000
But now we're using a permanent variable for the collation.

470
00:22:55,000 --> 00:22:58,400
So, now we should be able to do is actually just do this

471
00:22:58,400 --> 00:22:59,000
incrementally.

472
00:22:59,000 --> 00:23:05,500
So, we only, we only actually process one, the new information.

473
00:23:05,500 --> 00:23:10,000
Every time we only we just process, we don't restart every time we

474
00:23:10,000 --> 00:23:11,800
just keep going incrementally through.

475
00:23:11,800 --> 00:23:13,800
So we don't have to reprocess all the debug events.

476
00:23:13,800 --> 00:23:17,100
We only process the ones that came in since the last time we were

477
00:23:17,100 --> 00:23:17,600
called.

478
00:23:17,800 --> 00:23:18,800
And then in terms of

479
00:23:19,000 --> 00:23:19,900
Starting the collation.

480
00:23:20,000 --> 00:23:24,800
What we will do is we'll only restart the collation when we hit an

481
00:23:24,800 --> 00:23:27,500
actual limit of the frames that we can store.

482
00:23:27,700 --> 00:23:30,300
So, you know, whatever that frame count is whatever.

483
00:23:30,300 --> 00:23:32,900
Our Max frame count is, so in here, right?

484
00:23:32,900 --> 00:23:38,000
When we did our frames, you can see that we only have room for Max,

485
00:23:38,000 --> 00:23:40,300
debug event or a count times 4.

486
00:23:40,300 --> 00:23:44,700
That's how many we've got what we can do, is as the frame cap gets up

487
00:23:45,000 --> 00:23:48,800
when it goes, you know, I'll just for now, say, it'll be this or

488
00:23:48,900 --> 00:23:49,700
Something like that.

489
00:23:50,900 --> 00:23:55,600
Just for the sake of argument, I'll do if the frame count has gotten

490
00:23:55,600 --> 00:23:57,000
up above that.

491
00:24:01,700 --> 00:24:02,300
Max.

492
00:24:02,600 --> 00:24:03,400
What was it?

493
00:24:03,400 --> 00:24:04,300
Do you like Adventure account?

494
00:24:04,300 --> 00:24:04,800
There we go.

495
00:24:05,500 --> 00:24:09,400
If the frame count gets up above that, then we'll restart again just

496
00:24:09,400 --> 00:24:09,800
for now.

497
00:24:10,200 --> 00:24:15,000
So debug State frame count, if it's, oops, if it's greater or equal to

498
00:24:15,200 --> 00:24:16,200
the max debug event.

499
00:24:16,200 --> 00:24:17,000
Array, count.

500
00:24:17,000 --> 00:24:17,900
Then we restart.

501
00:24:18,300 --> 00:24:21,900
So let's see what that does besides just instantly crashing.

502
00:24:24,400 --> 00:24:28,900
Oh, and we'll probably have to store a current frame as well, if that

503
00:24:28,900 --> 00:24:29,500
makes sense.

504
00:24:29,700 --> 00:24:33,800
So yes, obviously one thing that's probably a thing thing that we need

505
00:24:33,800 --> 00:24:36,500
to do is actually call this once, right?

506
00:24:38,000 --> 00:24:42,400
That's pretty obvious because we have to start somewhere but then we

507
00:24:42,400 --> 00:24:43,600
would restart every time here.

508
00:24:44,100 --> 00:24:46,000
But yeah, good point, current frame.

509
00:24:46,000 --> 00:24:49,700
There is going to have to be tracked as well, because that's actually

510
00:24:49,700 --> 00:24:51,400
a global variable outside that Loop.

511
00:24:51,400 --> 00:24:53,400
So it's got a persist, right?

512
00:24:53,500 --> 00:24:53,700
So,

513
00:24:54,100 --> 00:24:57,800
Same goes away and it comes into here, right?

514
00:24:57,900 --> 00:25:00,300
So this is like, you know, collation frame.

515
00:25:01,400 --> 00:25:07,700
And so when we do that restart, debug State collation frame,

516
00:25:09,300 --> 00:25:10,000
We set that to no.

517
00:25:10,000 --> 00:25:12,400
And again, all I'm doing here is I'm making this Loop be something

518
00:25:12,400 --> 00:25:15,600
that runs incrementally, instead of just, you know, one time through

519
00:25:15,600 --> 00:25:16,100
the loop.

520
00:25:16,500 --> 00:25:19,500
So now we just replace everywhere that was using current frame.

521
00:25:19,600 --> 00:25:23,100
We use debug State collation frame, that's it.

522
00:25:23,100 --> 00:25:25,100
Oops, current frame.

523
00:25:25,500 --> 00:25:27,400
Debug steak relation frame.

524
00:25:35,900 --> 00:25:36,800
And that should be it.

525
00:25:38,100 --> 00:25:39,100
And so now we'll see.

526
00:25:39,100 --> 00:25:41,200
I don't know how this will end up working.

527
00:25:41,800 --> 00:25:46,000
Looks pretty good so far, let's go ahead and break out here.

528
00:25:46,200 --> 00:25:50,600
Okay, so unfortunately now I it still looks like there's a fair bit of

529
00:25:50,600 --> 00:25:51,600
time being spent there.

530
00:25:51,600 --> 00:25:54,400
I'm not actually sure why.

531
00:25:54,700 --> 00:25:57,500
I feel like that should have dramatically decreased the amount of time

532
00:25:57,500 --> 00:25:58,500
involved.

533
00:25:59,700 --> 00:26:03,700
And to be fair it did decrease the time, just not as dramatically as I

534
00:26:03,700 --> 00:26:05,100
would have expected, right?

535
00:26:05,100 --> 00:26:07,500
The time appears to have gone down, but it

536
00:26:07,900 --> 00:26:11,000
Not go down to the extent that I would have expected.

537
00:26:11,300 --> 00:26:14,500
So I'm a little confused about why that would be.

538
00:26:15,500 --> 00:26:21,100
Let's figure that out right now.

539
00:26:22,400 --> 00:26:25,700
So okay, what actually has to happen in here?

540
00:26:26,000 --> 00:26:30,100
Collate, debug records, we don't do anything else, right?

541
00:26:30,500 --> 00:26:33,800
Yeah, we don't do anything else so collating, the debug records is the

542
00:26:33,800 --> 00:26:35,900
only thing that we're talking about there, right?

543
00:26:35,900 --> 00:26:37,500
That's the only thing that's actually,

544
00:26:37,800 --> 00:26:41,400
time spent, as far as we know, anyway, so if I go up to collate, debug

545
00:26:41,400 --> 00:26:42,100
records,

546
00:26:44,100 --> 00:26:46,800
I take a look through here, we're going to come in.

547
00:26:46,800 --> 00:26:48,900
We've got a particular invalid, array index.

548
00:26:49,300 --> 00:26:52,000
What we know is that as we go,

549
00:26:54,100 --> 00:26:57,100
We yeah, we start on whatever that that indexes.

550
00:26:57,100 --> 00:26:59,400
Whatever the last one was that we were using.

551
00:26:59,700 --> 00:26:59,800
And

552
00:27:00,000 --> 00:27:02,000
Go till we hit the invalid one.

553
00:27:02,800 --> 00:27:08,300
And that should, I feel like that should have worked and we should

554
00:27:08,300 --> 00:27:11,300
only process like one of these, right?

555
00:27:11,400 --> 00:27:14,400
We then go through all of the events which is what we would expect to

556
00:27:14,400 --> 00:27:16,100
do and that's all totally fine.

557
00:27:18,000 --> 00:27:20,400
Nothing particularly weird there, right?

558
00:27:20,400 --> 00:27:23,800
I also think we don't need this code is never going to get used

559
00:27:23,800 --> 00:27:24,200
anymore.

560
00:27:24,200 --> 00:27:25,900
We sold could get rid of it.

561
00:27:27,300 --> 00:27:28,800
Let me go ahead and move this up as well.

562
00:27:31,300 --> 00:27:34,400
Yeah, so I'm not really sure.

563
00:27:37,700 --> 00:27:38,400
ah,

564
00:27:40,000 --> 00:27:40,800
you know what, though?

565
00:27:43,400 --> 00:27:45,400
I do think, I know what this is.

566
00:27:45,800 --> 00:27:47,900
We need to be able to store more frames.

567
00:27:47,900 --> 00:27:51,700
Otherwise, we're always going to be at that Max debug event count,

568
00:27:51,900 --> 00:27:52,500
right?

569
00:27:54,200 --> 00:27:58,500
So as we run through, if we don't check for that or something

570
00:27:58,500 --> 00:28:03,900
high-hazard reset condition, the sort of fake, you know, fo reset

571
00:28:03,900 --> 00:28:04,200
condition.

572
00:28:04,200 --> 00:28:05,900
I set up temporarily here.

573
00:28:06,100 --> 00:28:10,500
If we don't check for that, then we actually would restart every time

574
00:28:10,500 --> 00:28:13,000
because there's always going to be that many frames in the buffer.

575
00:28:13,900 --> 00:28:16,100
So that was kind of dumb to be fair.

576
00:28:16,500 --> 00:28:17,800
Let's see how this does this.

577
00:28:17,800 --> 00:28:18,600
Does any better?

578
00:28:19,700 --> 00:28:20,300
No, no.

579
00:28:24,000 --> 00:28:27,100
Yeah, a little bit better, still not as better enough as I would have

580
00:28:27,100 --> 00:28:28,200
hoped, but you can actually see.

581
00:28:28,200 --> 00:28:30,200
Now the bars don't even extend to the end.

582
00:28:30,600 --> 00:28:33,100
So it still takes a lot of time to do that operation.

583
00:28:33,100 --> 00:28:38,800
It would look like right for a lot of these guys and so I don't know.

584
00:28:38,800 --> 00:28:41,900
It seems like a little unrealistic but maybe there's just that much

585
00:28:41,900 --> 00:28:45,300
data and maybe the stuff that we're doing is, you know, maybe the way

586
00:28:45,300 --> 00:28:46,800
that I'm doing it is janky enough.

587
00:28:46,800 --> 00:28:48,900
That it takes so much time, I don't know it warrants a little bit

588
00:28:48,900 --> 00:28:53,000
further, a little more attention, I would say.

589
00:28:54,000 --> 00:28:58,900
Because it feels like it feels like there shouldn't probably be that

590
00:28:58,900 --> 00:29:03,500
much stuff necessary, you know, it's it doesn't seem like it should be

591
00:29:03,500 --> 00:29:04,500
quite so.

592
00:29:05,900 --> 00:29:09,500
So time-intensive I'll double-check and just see what happens if we

593
00:29:09,500 --> 00:29:14,000
compile, the collation code with optimizations on just so I can get a

594
00:29:14,000 --> 00:29:17,400
feel for where it's at there but we'll see.

595
00:29:18,400 --> 00:29:22,800
All right, so with optimizations on it's not so bad.

596
00:29:22,800 --> 00:29:27,300
It looks like when we actually so you get you get obviously spikes in

597
00:29:27,300 --> 00:29:31,900
terms of how long it takes to collate when we when we hit things like

598
00:29:31,900 --> 00:29:35,600
the ground chunk filling and that makes sense because

599
00:29:35,800 --> 00:29:39,600
Those things really pound on to the renderer and stuff and I think and

600
00:29:39,600 --> 00:29:43,400
other things that we have instrumented so that's not surprising.

601
00:29:44,100 --> 00:29:44,700
But yeah.

602
00:29:45,300 --> 00:29:50,300
So at least in, if we, if we go optimized we can actually sort of have

603
00:29:50,300 --> 00:29:52,100
these guys running in the collation running.

604
00:29:53,900 --> 00:29:57,000
Totally in line with everything else and it's not a problem at all.

605
00:29:57,200 --> 00:29:57,700
Apparently.

606
00:29:57,800 --> 00:29:59,800
So that's pretty good too, right?

607
00:30:01,700 --> 00:30:02,000
Yeah.

608
00:30:04,300 --> 00:30:09,400
Now, I'm not sure why right-clicking turned off everything.

609
00:30:09,900 --> 00:30:14,000
So if the debug state is not paused,

610
00:30:16,700 --> 00:30:19,400
What is the problem?

611
00:30:22,300 --> 00:30:29,600
Why when I right click and we go to be paused, why am I why is it

612
00:30:29,600 --> 00:30:32,700
erasing all of my all of my data?

613
00:30:33,700 --> 00:30:34,200
You know.

614
00:30:37,500 --> 00:30:39,500
That's a little strange.

615
00:30:39,900 --> 00:30:41,900
I'm a little uncomfortable with that.

616
00:30:42,100 --> 00:30:47,100
That should not be happening and so I feel like I messed up one other

617
00:30:47,100 --> 00:30:47,300
thing.

618
00:30:47,300 --> 00:30:47,700
They're right.

619
00:30:47,700 --> 00:30:49,600
Because I don't know if you guys saw that.

620
00:30:49,700 --> 00:30:50,400
We're going through here.

621
00:30:50,400 --> 00:30:51,700
I right clicked.

622
00:30:51,700 --> 00:30:53,100
And now we're gone.

623
00:30:53,200 --> 00:30:56,000
I right-click again and we're back and I don't know.

624
00:30:58,200 --> 00:30:58,400
Right?

625
00:30:58,400 --> 00:30:59,200
I don't know why.

626
00:30:59,200 --> 00:31:02,400
That would be happening so that's that's off-putting.

627
00:31:02,800 --> 00:31:05,100
It leaves a bad taste in one's mouth.

628
00:31:07,200 --> 00:31:09,500
And so I feel like we should try to figure out why that is.

629
00:31:09,800 --> 00:31:13,400
So that's just all that is, is setting paused, right?

630
00:31:13,400 --> 00:31:14,200
I mean, all that happens.

631
00:31:14,200 --> 00:31:16,300
When you right-click is you set to pause.

632
00:31:16,500 --> 00:31:19,700
And so, the only thing that pause does is actually called these guys,

633
00:31:19,900 --> 00:31:23,500
so it means that collate, debug records would not be getting called

634
00:31:23,500 --> 00:31:25,400
but I don't see why.

635
00:31:25,400 --> 00:31:28,300
Kool-Aid debug records getting called would have anything to do with

636
00:31:28,300 --> 00:31:28,600
it.

637
00:31:28,800 --> 00:31:31,900
Like it doesn't seem like that would really cause all that much of a

638
00:31:31,900 --> 00:31:32,600
problem.

639
00:31:33,200 --> 00:31:35,400
So I'm going to have to I think step in there.

640
00:31:35,400 --> 00:31:36,900
Also, the thing I guess, the other thing I do is

641
00:31:37,500 --> 00:31:38,800
Is that some kind of weird bug?

642
00:31:38,800 --> 00:31:42,500
We have that only happens in optimized mode, I assume not but since we

643
00:31:42,500 --> 00:31:45,700
were in debug mode I'll go ahead and just double check since I don't

644
00:31:45,700 --> 00:31:46,000
know.

645
00:31:47,300 --> 00:31:47,900
Okay good.

646
00:31:47,900 --> 00:31:49,000
It happens in debug mode.

647
00:31:49,400 --> 00:31:50,800
That's, that's always nice.

648
00:31:51,000 --> 00:31:52,000
You never want to have a bug.

649
00:31:52,000 --> 00:31:55,600
That only happens in optimized mode because that's a lot harder to

650
00:31:55,600 --> 00:31:56,500
inspect the code.

651
00:31:56,700 --> 00:31:58,400
But, you know, sometimes you get unlucky.

652
00:31:59,100 --> 00:32:02,500
So, when we do hit that right Mouse button, I'm going to go ahead and

653
00:32:02,500 --> 00:32:04,000
see what happens here.

654
00:32:04,100 --> 00:32:08,300
Why we end up in a circumstance like we did.

655
00:32:08,600 --> 00:32:10,100
So, I'm going to set the break point.

656
00:32:10,200 --> 00:32:11,300
I'm at the break point, right?

657
00:32:11,300 --> 00:32:13,700
At when I hit that right Mouse button, you know what I mean?

658
00:32:14,100 --> 00:32:15,100
So we can take a look.

659
00:32:15,700 --> 00:32:17,000
Let's see.

660
00:32:17,200 --> 00:32:21,600
Is that right there, I guess?

661
00:32:21,900 --> 00:32:27,500
Okay, so there I hit the right Mouse button, we set the state to be

662
00:32:27,700 --> 00:32:29,300
not paused anymore.

663
00:32:30,100 --> 00:32:33,900
So, here we come, we've got the frame Count Their weirdy but we're

664
00:32:33,900 --> 00:32:34,600
setting it.

665
00:32:34,800 --> 00:32:35,900
So that's all good.

666
00:32:36,400 --> 00:32:40,700
And this stuff is just doing its little frame drawing thing.

667
00:32:42,000 --> 00:32:44,500
And so I'm going to go ahead and just set a break point for the next

668
00:32:44,500 --> 00:32:45,800
time we come in through.

669
00:32:47,100 --> 00:32:50,400
Frame n since I'm assuming, that's the place where things would go

670
00:32:50,400 --> 00:32:50,900
wrong.

671
00:32:51,300 --> 00:32:54,900
Let's take a look at our our debug state.

672
00:33:00,300 --> 00:33:02,200
so, if we take a look at this, oh,

673
00:33:03,500 --> 00:33:04,300
Okay.

674
00:33:04,300 --> 00:33:08,700
Paused is set to 0 is that?

675
00:33:08,700 --> 00:33:09,700
Because we have not grab it.

676
00:33:09,700 --> 00:33:11,700
Yeah, that's because we have not grab the debug state yet.

677
00:33:11,700 --> 00:33:12,700
So that's understandable.

678
00:33:13,200 --> 00:33:13,700
There we go.

679
00:33:14,200 --> 00:33:15,100
It's set to 1.

680
00:33:16,600 --> 00:33:21,600
We are set to uninitialized.

681
00:33:27,900 --> 00:33:28,700
Okay.

682
00:33:32,400 --> 00:33:34,600
I'm very interested to know.

683
00:33:37,500 --> 00:33:38,800
How that happened?

684
00:33:45,300 --> 00:33:49,300
You have to admit, that's a little bit odd.

685
00:33:52,400 --> 00:33:54,100
And it gets reset every time.

686
00:33:57,900 --> 00:33:58,900
I'm going to switch back.

687
00:34:02,200 --> 00:34:02,700
Here we go.

688
00:34:04,000 --> 00:34:06,100
And what I'm going to do here is I'm going to set a breakpoint now to

689
00:34:06,100 --> 00:34:07,600
see does that happen every time?

690
00:34:12,500 --> 00:34:14,699
Oh man, you're kidding me.

691
00:34:15,000 --> 00:34:19,000
So this whole time we never actually set initialized equal to true.

692
00:34:19,500 --> 00:34:20,699
That's pretty good.

693
00:34:20,800 --> 00:34:23,000
I feel like that deserves a little out of Shame.

694
00:34:23,400 --> 00:34:26,300
It's like we have a thing that says whether we're initialized or not

695
00:34:26,300 --> 00:34:29,500
specifically for this purpose, we never actually check it.

696
00:34:29,699 --> 00:34:31,500
That might have something to do with it.

697
00:34:31,500 --> 00:34:34,500
Do you think shocking?

698
00:34:35,699 --> 00:34:36,800
Shocking, I say.

699
00:34:43,800 --> 00:34:45,199
Let's try that again.

700
00:34:50,800 --> 00:34:51,199
Oh, hey.

701
00:34:51,199 --> 00:34:51,900
Guess what?

702
00:34:52,500 --> 00:34:55,900
It turns out that now we don't take very much time to do the collation

703
00:34:55,900 --> 00:34:56,400
either.

704
00:34:58,300 --> 00:34:59,300
How surprising.

705
00:35:00,100 --> 00:35:00,600
Yeah.

706
00:35:00,800 --> 00:35:02,400
So now it makes a lot more sense.

707
00:35:02,400 --> 00:35:03,200
Why we were seeing that?

708
00:35:03,200 --> 00:35:05,100
Because it was redoing the whole thing every time.

709
00:35:05,800 --> 00:35:08,900
So now our collation is not too bad and that's pretty great and you

710
00:35:08,900 --> 00:35:10,800
can see the spike, right?

711
00:35:12,800 --> 00:35:13,800
That happens in there.

712
00:35:14,200 --> 00:35:16,300
Occasionally there it is.

713
00:35:17,100 --> 00:35:21,700
You can see the spike that's when we get that reset event because like

714
00:35:21,700 --> 00:35:25,100
right now, we still do a clean reset every so often because we don't

715
00:35:25,100 --> 00:35:27,300
have it set up to, to do like,

716
00:35:27,500 --> 00:35:29,100
Lot of movement in there.

717
00:35:29,800 --> 00:35:32,100
So yeah, so that's that's totally fine.

718
00:35:33,100 --> 00:35:35,600
But now we should we should go ahead and address that as well.

719
00:35:36,000 --> 00:35:37,800
However, you know, there's one, I don't know.

720
00:35:38,600 --> 00:35:38,900
Yeah.

721
00:35:38,900 --> 00:35:41,200
So there's so many things I want to go do now because now that we're

722
00:35:41,200 --> 00:35:43,900
starting to get like kind of interesting little setup here I'm kind of

723
00:35:43,900 --> 00:35:44,500
it's going to.

724
00:35:44,500 --> 00:35:45,600
I think that's going to be a lot of fun.

725
00:35:46,300 --> 00:35:49,700
But anyway, so I think what I'd probably like to do now is make it so

726
00:35:49,700 --> 00:35:54,700
that these frames get stored kind of permanently in a more sort of

727
00:35:54,700 --> 00:35:55,600
concise way.

728
00:35:56,900 --> 00:35:58,400
Something like that.

729
00:35:58,400 --> 00:35:59,900
And so that when we do,

730
00:36:00,000 --> 00:36:03,300
The frame analysis, like the kind of get get put out there.

731
00:36:04,000 --> 00:36:07,500
And so I think what I'm going to do though, honestly cuz I'm trying to

732
00:36:07,500 --> 00:36:11,200
juggle these things in my head, I think I might do the expansion thing

733
00:36:11,200 --> 00:36:14,900
here because we've got, you know, we've got 20 minutes, 25 minutes, I

734
00:36:14,900 --> 00:36:18,500
might go ahead and do the expansion because if I do the expansion then

735
00:36:18,500 --> 00:36:20,600
that's going to tell me a little bit more information about what sort

736
00:36:20,600 --> 00:36:22,900
of stuff going to have to do in terms of reprocessing things.

737
00:36:23,500 --> 00:36:26,200
And so I'd like to kind of see I want to see that in action first

738
00:36:27,600 --> 00:36:29,100
before I go any further, I think.

739
00:36:30,000 --> 00:36:32,900
So I'm going to go ahead and try adding the ability to like expand

740
00:36:32,900 --> 00:36:36,800
stuff out here and I'm not sure exactly how to do that yet.

741
00:36:41,300 --> 00:36:44,300
I'm not sure exactly how to visualize that as I guess what I'm saying?

742
00:36:51,000 --> 00:36:55,500
Guess we just like blowout that bar to be that size.

743
00:36:56,800 --> 00:36:57,700
Or something.

744
00:37:00,300 --> 00:37:00,800
I don't know.

745
00:37:01,200 --> 00:37:02,200
Let's figure it out.

746
00:37:03,600 --> 00:37:05,900
So right.

747
00:37:06,900 --> 00:37:08,000
At the moment.

748
00:37:10,200 --> 00:37:15,300
You can kind of see in here that the way we're doing things is we do

749
00:37:15,300 --> 00:37:17,500
this first open, block parent equals zero thing.

750
00:37:18,500 --> 00:37:24,000
So what that does is it says we're just throwing away, any timing

751
00:37:24,000 --> 00:37:29,100
blocks that happen underneath some other timing block.

752
00:37:29,300 --> 00:37:33,600
So the top-level timing blocks show up, but the timing blocks below it

753
00:37:33,600 --> 00:37:34,100
don't.

754
00:37:35,300 --> 00:37:39,600
So all I would have to do to modify this to show me things.

755
00:37:39,800 --> 00:37:42,800
Low a certain timing block, right?

756
00:37:43,600 --> 00:37:46,200
Because I just need a way of making this.

757
00:37:49,300 --> 00:37:54,700
Detect some other case like things that are below something besides

758
00:37:54,700 --> 00:37:55,400
just zero.

759
00:37:56,500 --> 00:37:57,200
You know what I mean?

760
00:37:58,300 --> 00:38:02,800
So if you look at our, handmade platform stuff here,

761
00:38:04,800 --> 00:38:10,700
Our debug record structure definitively, identifies a particular place

762
00:38:11,400 --> 00:38:15,300
where a like a particular timing block.

763
00:38:16,100 --> 00:38:21,000
So what I could do is instead of looking at the parent thing here,

764
00:38:21,000 --> 00:38:24,300
where I do like first open block parent or whatever, instead of

765
00:38:24,300 --> 00:38:25,900
looking at just that parent pointer.

766
00:38:26,100 --> 00:38:29,700
Which again if we look at what that is that parent pointer is actually

767
00:38:29,700 --> 00:38:31,900
pointing to one of these things, right?

768
00:38:32,400 --> 00:38:33,700
Instead of looking at that

769
00:38:34,000 --> 00:38:38,300
I could do is look at the debug record to which that thing corresponds

770
00:38:38,700 --> 00:38:39,900
and check against that.

771
00:38:40,000 --> 00:38:43,800
So for example, in one of these open debug block things,

772
00:38:45,600 --> 00:38:46,300
Right?

773
00:38:46,400 --> 00:38:52,800
I could say this is like the source and so, then when I create one of

774
00:38:52,800 --> 00:38:59,300
these open D, Bud blocks, you know what I could do is when I create

775
00:38:59,300 --> 00:38:59,800
one

776
00:39:00,000 --> 00:39:03,900
And I write down the stuff I could just write down its source as well.

777
00:39:04,300 --> 00:39:08,100
So now I know for whatever, you know, block that is, I know which

778
00:39:08,100 --> 00:39:11,600
source it is in that in that little list so that when I can say is I

779
00:39:11,600 --> 00:39:18,000
can I can do something like you know make a thing that's like if is is

780
00:39:18,100 --> 00:39:21,100
direct child of or something.

781
00:39:22,000 --> 00:39:24,200
And I can say you know is

782
00:39:25,600 --> 00:39:28,600
Is this event that I'm talking about here?

783
00:39:33,800 --> 00:39:36,200
The thread first open block.

784
00:39:42,300 --> 00:39:45,200
So the matching block, right, this was this was this.

785
00:39:46,100 --> 00:39:50,200
So it's that, it's that original guy, the guy who was open when we're

786
00:39:50,200 --> 00:39:54,300
about to close, whichever block that we're looking at when we're about

787
00:39:54,300 --> 00:39:55,100
to close it.

788
00:39:55,900 --> 00:39:59,200
What we want to say is is that guy's parent

789
00:40:00,900 --> 00:40:03,200
This, some debug record.

790
00:40:03,400 --> 00:40:06,600
Does that parent come from a particular, debug record?

791
00:40:07,600 --> 00:40:08,200
Right?

792
00:40:08,400 --> 00:40:15,000
So we can ask or we could even say is from debug record.

793
00:40:15,100 --> 00:40:18,500
So we could say, matching block, parents, whatever that is is that

794
00:40:18,500 --> 00:40:23,900
from our, you know, scope to record whatever that is

795
00:40:24,900 --> 00:40:25,500
Right.

796
00:40:26,300 --> 00:40:32,000
And so what I'll do is I'll say, well, you know what, I could even do

797
00:40:32,000 --> 00:40:35,400
this slightly differently, I could do record from

798
00:40:39,500 --> 00:40:41,200
Equals get record from.

799
00:40:42,800 --> 00:40:44,200
For or just script record.

800
00:40:46,200 --> 00:40:49,100
So that would just say for this guy, give me the record to which it

801
00:40:49,100 --> 00:40:52,200
corresponds to, I don't want to access it directly and the reason for

802
00:40:52,200 --> 00:40:54,000
that is because it may be no.

803
00:40:54,400 --> 00:40:54,900
Right?

804
00:40:54,900 --> 00:40:57,900
So I'm just doing a thing here where we say, okay there's an inline it

805
00:40:57,900 --> 00:41:03,400
returns a debug record, it's called get record from like so it takes a

806
00:41:03,400 --> 00:41:05,800
debug or open debug block.

807
00:41:09,500 --> 00:41:15,300
And all it does is it goes like okay the result is what if there was a

808
00:41:15,300 --> 00:41:16,000
block.

809
00:41:16,200 --> 00:41:18,300
Then it's the block record, otherwise 0.

810
00:41:18,300 --> 00:41:21,300
So it's just like passes a null through essentially.

811
00:41:23,400 --> 00:41:27,700
Then we can implement the exact same functionality we had before by

812
00:41:27,700 --> 00:41:31,500
setting our debug state to just have a permanent record you know

813
00:41:31,500 --> 00:41:37,000
that's like debug record scope to record like that and then when we

814
00:41:37,000 --> 00:41:38,600
initialize things in here,

815
00:41:39,100 --> 00:41:42,100
When we do our initialization, we could say stuff like.

816
00:41:42,100 --> 00:41:46,400
Oh, okay, you know, right, pause the equals false.

817
00:41:46,900 --> 00:41:48,800
Let's go to record equals 0.

818
00:41:48,800 --> 00:41:50,000
Something like that.

819
00:41:50,500 --> 00:41:55,800
And and you know, off we go from there and we could also do right?

820
00:41:56,000 --> 00:41:57,100
Didn't we set?

821
00:41:58,100 --> 00:41:59,100
Where do we set?

822
00:41:59,400 --> 00:41:59,800
So I guess we

823
00:42:00,000 --> 00:42:01,600
Because we call restart collation.

824
00:42:01,600 --> 00:42:04,100
I guess that initializes the rest of that stuff.

825
00:42:05,800 --> 00:42:09,600
So scope to record is now this thing that we can set permanently it's

826
00:42:09,600 --> 00:42:10,700
set to zero at the beginning.

827
00:42:10,700 --> 00:42:14,900
So this should do exactly the same thing that we were just doing you

828
00:42:14,900 --> 00:42:17,200
know, sorry source.

829
00:42:20,700 --> 00:42:24,900
And so, you know, this is just gonna produce the exact same output, so

830
00:42:24,900 --> 00:42:26,200
we don't get anything from that.

831
00:42:26,300 --> 00:42:29,200
But now what we could do is when we left click on this, we could just

832
00:42:29,200 --> 00:42:32,100
say, Okay, show us, whatever is underneath that, right?

833
00:42:32,100 --> 00:42:35,400
Show us like show us the things that are underneath that particular

834
00:42:35,400 --> 00:42:37,400
block that I just clicked on, you know.

835
00:42:38,600 --> 00:42:42,300
And so to do that, all we have to do is say well, we know what

836
00:42:42,300 --> 00:42:45,600
happens, we know we gotta was pressed, right?

837
00:42:45,700 --> 00:42:49,400
We have that and we know it and is inside rectangle.

838
00:42:49,600 --> 00:42:49,800
So

839
00:42:50,000 --> 00:42:52,700
We have to do is when we know we're inside the rectangle of a

840
00:42:52,700 --> 00:42:53,500
particular region.

841
00:42:53,500 --> 00:42:56,900
We could just say like, oh well, you know, was the left Mouse button

842
00:42:56,900 --> 00:43:01,600
pressed, if the left Mouse button was pressed, then let's set the

843
00:43:01,600 --> 00:43:02,600
debug state.

844
00:43:04,500 --> 00:43:09,500
Scope to region, just go up to record, you know, to be equal to

845
00:43:09,500 --> 00:43:11,100
whatever the record is that we're on.

846
00:43:12,700 --> 00:43:13,500
Does that make sense?

847
00:43:15,100 --> 00:43:19,900
So here we are in here and now we can go like right click then

848
00:43:19,900 --> 00:43:23,200
presumably we can go over this guy and we can like click on him and

849
00:43:23,200 --> 00:43:30,100
well or are totally not do that and that was a little anticlimactic.

850
00:43:30,100 --> 00:43:33,800
I was I was so ready for that to actually do something and then it

851
00:43:34,400 --> 00:43:41,200
totally didn't do it at all whatever programming.

852
00:43:41,200 --> 00:43:42,500
Like sometimes I just

853
00:43:42,600 --> 00:43:43,400
Don't even know.

854
00:43:43,900 --> 00:43:49,700
All right, so let's go ahead and let's go ahead and find out what kind

855
00:43:49,700 --> 00:43:51,400
of stupidity is happening there.

856
00:43:52,200 --> 00:43:53,000
I'm clicking on this.

857
00:43:53,000 --> 00:43:54,100
I'm not getting anything.

858
00:43:54,200 --> 00:43:57,700
I should go do the was pressed thing and see what happens.

859
00:43:58,300 --> 00:44:03,100
We click record is actually something scope to record is actually

860
00:44:03,100 --> 00:44:03,600
something.

861
00:44:03,700 --> 00:44:10,900
So we're actually setting rui is working fine, but apparently right.

862
00:44:11,300 --> 00:44:12,400
Good that never gets called against.

863
00:44:12,500 --> 00:44:13,000
That's working.

864
00:44:13,000 --> 00:44:13,700
Just right?

865
00:44:13,800 --> 00:44:19,800
But apparently, this little guy here is is not working correctly.

866
00:44:20,400 --> 00:44:23,600
So, let's take a little Gander, what happens?

867
00:44:23,600 --> 00:44:26,000
There, F5?

868
00:44:32,100 --> 00:44:32,500
Hmm.

869
00:44:34,600 --> 00:44:35,500
Oh duh.

870
00:44:36,200 --> 00:44:37,700
We have to write.

871
00:44:38,800 --> 00:44:39,700
Got about that.

872
00:44:40,500 --> 00:44:44,600
So it was working fine, as it turns out my bad.

873
00:44:45,700 --> 00:44:47,100
It's a little mistake there.

874
00:44:47,500 --> 00:44:50,200
I admit that, I apologize.

875
00:44:50,700 --> 00:44:56,700
We don't actually Rico late, anything, unless we're running, that's

876
00:44:56,700 --> 00:44:58,600
kind of how that was supposed to work.

877
00:44:58,600 --> 00:44:59,800
So, that's unsurprising.

878
00:45:00,100 --> 00:45:05,600
But what that means is that we have to do a collation restart, right?

879
00:45:06,700 --> 00:45:11,700
Andre collate the records when we actually click something because

880
00:45:11,700 --> 00:45:15,600
we're you know, we only kind of inspect that one, we only kind of

881
00:45:15,600 --> 00:45:18,300
produce the output for that one area, right?

882
00:45:18,900 --> 00:45:21,400
So what we need to do here is we would need to do something like when

883
00:45:21,400 --> 00:45:23,400
we have recirculation and it does that.

884
00:45:23,700 --> 00:45:26,800
And then we also have like the collate, the collation routine, where

885
00:45:26,800 --> 00:45:28,700
we do Co ladybug records.

886
00:45:29,100 --> 00:45:35,700
Like so what we want to do there is we want to actually have a way to

887
00:45:35,700 --> 00:45:36,400
kind of do that.

888
00:45:36,700 --> 00:45:38,600
Whole step.

889
00:45:39,000 --> 00:45:43,400
So we'd want to do something where like restart so like, you know,

890
00:45:43,400 --> 00:45:48,000
refresh coercion or something that where we can do that and that would

891
00:45:48,000 --> 00:45:55,100
literally just do this thing the whole the whole the whole bit, right?

892
00:45:55,600 --> 00:45:57,600
And so then up at the top here, I don't know.

893
00:45:58,400 --> 00:45:58,500
Yeah.

894
00:45:58,500 --> 00:46:01,600
I guess we'd have to have it somewhere above debug overlay although I

895
00:46:01,600 --> 00:46:03,900
guess I could just leave it down here.

896
00:46:06,700 --> 00:46:07,400
Like this.

897
00:46:09,500 --> 00:46:13,200
So internal void, refresh relation.

898
00:46:17,000 --> 00:46:18,500
And that just does the restart.

899
00:46:19,500 --> 00:46:24,400
You big state, Steven State, we go and I'll just go ahead and make

900
00:46:24,400 --> 00:46:27,300
that be something that we Define out here.

901
00:46:30,800 --> 00:46:33,300
Okay so yeah.

902
00:46:33,400 --> 00:46:40,500
Yeah now in theory we can drill down in theory although that does not

903
00:46:40,500 --> 00:46:46,100
seem to have been happy about that at all oh right.

904
00:46:46,500 --> 00:46:46,800
Yeah.

905
00:46:48,300 --> 00:46:52,500
I tell you doing these kind of, like, Little Billy debug things is

906
00:46:52,500 --> 00:46:53,300
fraught with Peril.

907
00:46:53,300 --> 00:46:56,100
It's fraught with Peril, I tell you, but it's fine.

908
00:46:56,400 --> 00:46:59,500
So obviously, we can't refresh the collation in the middle of that

909
00:46:59,800 --> 00:47:01,400
because we're in the middle of doing something.

910
00:47:01,400 --> 00:47:05,200
So we would have to sort of delay that until the end because we're in

911
00:47:05,200 --> 00:47:07,500
the middle of looping over these regions that were drawing.

912
00:47:07,900 --> 00:47:10,900
So we don't want to like, invalidate them all in the middle of that,

913
00:47:10,900 --> 00:47:15,300
that would be rude to say the least, but very unseemly.

914
00:47:16,600 --> 00:47:17,700
So we just do this.

915
00:47:18,100 --> 00:47:19,100
Again, pretty easy.

916
00:47:19,100 --> 00:47:20,100
The script record

917
00:47:21,800 --> 00:47:22,300
There we go.

918
00:47:23,800 --> 00:47:29,300
And then at the end here we do something like this if you know, debug

919
00:47:29,300 --> 00:47:30,300
scope to record.

920
00:47:31,000 --> 00:47:34,400
In fact, it could even do something a little bit more like this.

921
00:47:38,200 --> 00:47:40,100
So we could do hot record.

922
00:47:42,200 --> 00:47:42,900
Like that.

923
00:47:43,100 --> 00:47:48,100
So when we come through this this this Beast right here and we go

924
00:47:48,100 --> 00:47:50,900
ahead and take that record information.

925
00:47:51,500 --> 00:47:57,900
So out here we do like you know, that record, hot record 10

926
00:48:00,300 --> 00:48:07,100
Then we could just do something like when that's pressed.

927
00:48:08,500 --> 00:48:10,500
I don't know why that's still here, we'll get rid of that.

928
00:48:11,100 --> 00:48:15,600
If the mouse button goes down, then we'll do something like if Hot

929
00:48:15,600 --> 00:48:16,200
record

930
00:48:20,700 --> 00:48:26,700
Then we will take the the debug State scope to record.

931
00:48:27,100 --> 00:48:28,200
We'll just set that.

932
00:48:28,200 --> 00:48:29,800
So we'll say okay that's the new script record.

933
00:48:30,000 --> 00:48:35,300
If there wasn't a hot record, will just say, okay if the debug State

934
00:48:35,300 --> 00:48:41,000
scope to record is actually valid, then we'll make, we'll make

935
00:48:41,000 --> 00:48:45,200
whatever is like, go up up a block.

936
00:48:45,200 --> 00:48:48,400
Well, I guess we would need to know the open block for that, though.

937
00:48:48,500 --> 00:48:50,200
So, we need to trace

938
00:48:50,600 --> 00:48:52,900
One more thing, right?

939
00:48:52,900 --> 00:48:57,500
Which would be the actual like we need to know who the caller was.

940
00:48:57,600 --> 00:48:59,200
So I guess that's a little premature.

941
00:49:00,200 --> 00:49:03,600
So I guess for now I'll just do, I will just clear it but we should

942
00:49:03,600 --> 00:49:07,700
probably think about how we want to handle that eventually.

943
00:49:08,500 --> 00:49:08,900
But yeah.

944
00:49:10,500 --> 00:49:12,200
So now we're in their right?

945
00:49:12,900 --> 00:49:14,900
And we can we can pause and Theory.

946
00:49:14,900 --> 00:49:18,500
Now we can actually look underneath these things and see what's

947
00:49:18,500 --> 00:49:20,200
actually going on here, right?

948
00:49:20,600 --> 00:49:24,000
There's a render group called, there's the same region stuff.

949
00:49:24,300 --> 00:49:28,600
There's some, some debug render group things.

950
00:49:28,900 --> 00:49:30,400
There's a little guys in there.

951
00:49:30,700 --> 00:49:33,500
Move entity, begin Sim, right?

952
00:49:33,800 --> 00:49:36,100
And so I guess, what's that tiled render group output?

953
00:49:36,100 --> 00:49:36,900
What's under that?

954
00:49:36,900 --> 00:49:41,200
Okay, here's some stuff tiled render work, Todd vanderwerff, Todd

955
00:49:41,200 --> 00:49:42,400
render work, right?

956
00:49:44,800 --> 00:49:45,600
See what's under there.

957
00:49:45,600 --> 00:49:47,900
Okay, here's so we can now drill down.

958
00:49:48,300 --> 00:49:49,800
Pretty good, I guess.

959
00:49:50,500 --> 00:49:52,700
Unfortunately, we eventually get to a part where there's too many

960
00:49:52,700 --> 00:49:54,000
regions and we can't show them.

961
00:49:54,700 --> 00:49:58,900
So that's a bit of an issue but we're getting there, right?

962
00:49:59,100 --> 00:50:01,700
You can sort of see how it's starting to take shape, right?

963
00:50:01,700 --> 00:50:02,800
We've got a ways to go.

964
00:50:03,900 --> 00:50:06,000
And again, we're not trying to make some kind of professional

965
00:50:06,700 --> 00:50:10,300
profiling tool here, but we're getting there, so, I don't know.

966
00:50:10,300 --> 00:50:14,300
Like, I want to go in here and see, like, something's happening.

967
00:50:14,600 --> 00:50:15,600
Cloud vendor work.

968
00:50:16,100 --> 00:50:17,200
I'll see what's in game update.

969
00:50:17,200 --> 00:50:19,700
What's this input processing, don't think there's anything else

970
00:50:19,700 --> 00:50:21,500
happening there, executable refresh.

971
00:50:21,700 --> 00:50:22,800
So they go into game update.

972
00:50:22,800 --> 00:50:24,600
What's this game update and render?

973
00:50:24,600 --> 00:50:27,100
That's unsurprising inside game update and render.

974
00:50:27,100 --> 00:50:28,700
Okay, so let's see what's in begin Sim.

975
00:50:28,900 --> 00:50:29,800
So there's begin Sam.

976
00:50:29,800 --> 00:50:32,400
There's these little tiny piece of times, get World chunk.

977
00:50:32,400 --> 00:50:34,700
All these get World chunk calls, right?

978
00:50:36,400 --> 00:50:39,500
So, yeah, you know, it's starting to be kind of cool.

979
00:50:39,600 --> 00:50:43,600
And we can always restart it running and see the actual like, you

980
00:50:43,600 --> 00:50:44,000
know,

981
00:50:44,500 --> 00:50:45,600
Stuff happening in there.

982
00:50:45,700 --> 00:50:48,300
And then we can also pop back out if we want to.

983
00:50:49,500 --> 00:50:53,400
And so we still have we still have a ways to go before?

984
00:50:53,400 --> 00:50:55,100
This is actually like anything.

985
00:50:55,100 --> 00:50:58,200
That's that's not super terrible everything.

986
00:50:59,000 --> 00:50:59,900
But we're kind of getting

987
00:51:00,000 --> 00:51:04,300
You can also see, we've got problems in terms of like these things are

988
00:51:04,300 --> 00:51:06,900
really slippery and we'd want to be able to like zoom in there or get

989
00:51:06,900 --> 00:51:10,800
some other stuff and, you know, we we got a ways to go, we have a ways

990
00:51:10,800 --> 00:51:11,100
to go.

991
00:51:11,100 --> 00:51:13,900
There's no question about that, but at least we're starting to get

992
00:51:13,900 --> 00:51:14,300
there.

993
00:51:14,400 --> 00:51:16,900
We're starting to get towards a little bit of a better thing.

994
00:51:17,800 --> 00:51:24,000
So, yeah, I would say, if I want to start something new.

995
00:51:24,000 --> 00:51:25,600
Yeah, right yet.

996
00:51:25,700 --> 00:51:28,000
So I think what I'll do because I've got a few minutes left.

997
00:51:28,100 --> 00:51:29,200
I think what I'm going to do

998
00:51:30,900 --> 00:51:34,900
Is I want this debug text line thing to become a more General thing.

999
00:51:35,200 --> 00:51:41,800
So what I want to do is I want to do something like internal void D or

1000
00:51:41,800 --> 00:51:46,000
a text out at or something like that, right?

1001
00:51:46,200 --> 00:51:47,900
And I'm going to grab this guy.

1002
00:51:50,000 --> 00:51:51,100
Grab him right up.

1003
00:51:52,500 --> 00:51:56,900
And what I want to do is kind of trim this down to something that

1004
00:51:56,900 --> 00:52:01,500
takes that doesn't use any Global's there, right?

1005
00:52:01,500 --> 00:52:05,200
Well, not any Global's, but it doesn't, its positioning is said

1006
00:52:05,200 --> 00:52:06,000
specifically.

1007
00:52:06,300 --> 00:52:11,100
So if you pass into it, the string that you want printed, right?

1008
00:52:11,100 --> 00:52:15,400
So you do you pass in that, but then you also pass in, you know, like

1009
00:52:15,400 --> 00:52:17,500
a V2, like a point like a p.

1010
00:52:18,100 --> 00:52:21,900
So at X and at why are actual things that kind of get get

1011
00:52:22,000 --> 00:52:29,700
I survived here, you know, at X becomes like, you know, p.x something

1012
00:52:29,700 --> 00:52:30,300
like this.

1013
00:52:32,900 --> 00:52:39,200
and groups and at y equals, you know, p.y

1014
00:52:41,300 --> 00:52:42,000
that sort of thing.

1015
00:52:43,400 --> 00:52:51,100
And so then this code right here can actually do will actually take

1016
00:52:51,100 --> 00:52:54,700
out that get lined advance for so that get light advance for goes

1017
00:52:54,700 --> 00:52:55,100
away.

1018
00:52:55,200 --> 00:52:58,900
The rest of this stuff basically stays the same, right?

1019
00:52:59,500 --> 00:53:02,900
And so, then this code can just use that code, right?

1020
00:53:03,000 --> 00:53:08,900
So what it would do is it would do the exact same thing and then I

1021
00:53:08,900 --> 00:53:10,800
don't know these are not

1022
00:53:11,100 --> 00:53:13,300
Really expensive things.

1023
00:53:14,700 --> 00:53:15,600
For the most part.

1024
00:53:18,100 --> 00:53:20,900
So, I don't know if I really want to deal with that, but what this

1025
00:53:20,900 --> 00:53:26,600
would do is it would just call that with ADD X at y, like so.

1026
00:53:27,800 --> 00:53:29,700
so this is like text out at

1027
00:53:31,800 --> 00:53:33,000
and it's just,

1028
00:53:35,600 --> 00:53:37,100
Yeah, this would probably be.

1029
00:53:38,400 --> 00:53:39,600
Debug text that out.

1030
00:53:46,200 --> 00:53:48,000
This was like left Edge, right?

1031
00:53:48,100 --> 00:53:49,000
Something like that.

1032
00:53:51,400 --> 00:53:51,800
Yeah.

1033
00:53:53,700 --> 00:53:57,700
So now if we take a look at that, it's the same thing, right?

1034
00:53:57,700 --> 00:53:59,800
But now we can sort of draw text anywhere we want.

1035
00:54:00,000 --> 00:54:02,800
So instead of this kind of nonsense here, where the render group

1036
00:54:02,800 --> 00:54:05,600
output is kind of annoying and doesn't really look right, you know

1037
00:54:05,600 --> 00:54:06,100
what I mean?

1038
00:54:08,000 --> 00:54:11,500
I can I can maybe fix that to be something a little more usable and

1039
00:54:11,500 --> 00:54:15,400
say, okay, instead of debug text line,

1040
00:54:17,000 --> 00:54:21,300
Oops, text line that's getting called there.

1041
00:54:22,100 --> 00:54:26,100
What I'll actually do is I'll just call debug text out at right.

1042
00:54:27,700 --> 00:54:29,300
Oops, not there.

1043
00:54:30,400 --> 00:54:31,100
There

1044
00:54:34,200 --> 00:54:34,800
Right there.

1045
00:54:36,000 --> 00:54:39,400
So what I'll do here is say, okay, give up text out at, what I'll do

1046
00:54:39,400 --> 00:54:44,200
is I'll just use the mouse pointer, the mouse where the mouse is and

1047
00:54:44,200 --> 00:54:45,700
I'll print out the text buffer there.

1048
00:54:46,600 --> 00:54:49,100
And the reason that's a little bit nicer, at least for the moment,

1049
00:54:49,100 --> 00:54:49,800
right?

1050
00:54:50,700 --> 00:54:55,300
Is because that allows me to actually do something where it just it

1051
00:54:55,300 --> 00:54:57,300
kind of hovers with me, right?

1052
00:54:58,000 --> 00:54:58,800
If that makes sense.

1053
00:54:59,200 --> 00:55:03,200
Now we should also probably get rid of that that string nonsense.

1054
00:55:03,300 --> 00:55:03,900
So there's this giant

1055
00:55:05,300 --> 00:55:07,600
Gapping there for no apparent reason.

1056
00:55:08,100 --> 00:55:09,400
So we should get rid of that as well.

1057
00:55:10,200 --> 00:55:13,200
And then we also have a sorting problem where, you know this thing is

1058
00:55:13,200 --> 00:55:15,900
going to show up behind the bar that it's ostensibly supposed to show

1059
00:55:15,900 --> 00:55:17,300
up towards.

1060
00:55:17,500 --> 00:55:19,800
And so the thing that we can do there is we can also just kind of

1061
00:55:19,800 --> 00:55:22,800
offset it a little bit just for now, there's probably better ways of

1062
00:55:22,800 --> 00:55:26,200
us doing that but we can make a little offset now where we do

1063
00:55:26,200 --> 00:55:30,000
something like, okay, you know, will offset it by 10 pixels up or

1064
00:55:30,000 --> 00:55:30,900
something like that.

1065
00:55:32,200 --> 00:55:32,900
So now

1066
00:55:35,500 --> 00:55:39,500
When we pause, we can just see, you know, exactly what's going on

1067
00:55:39,500 --> 00:55:39,900
there.

1068
00:55:41,100 --> 00:55:42,300
Right next to where we are.

1069
00:55:42,300 --> 00:55:45,300
So we have to look up the top of the screen and you can kind of see,

1070
00:55:45,300 --> 00:55:47,900
like, Okay so we've got we definitely have sorting problems there.

1071
00:55:47,900 --> 00:55:50,700
So we want to, you know, once we actually sort of upgrade the rendered

1072
00:55:50,700 --> 00:55:53,400
do like a little more sorting stuff, we probably want to have a way of

1073
00:55:53,400 --> 00:55:56,500
saying draw that on top, you know, of whatever it is that you're

1074
00:55:56,500 --> 00:55:56,800
drawing.

1075
00:55:56,800 --> 00:56:00,800
So you don't get this that kind of like hard to see thing but yeah, so

1076
00:56:00,800 --> 00:56:03,600
it's getting a little bit better and that's it that's a pretty easy

1077
00:56:03,600 --> 00:56:05,200
way for us to be able.

1078
00:56:05,300 --> 00:56:08,500
To inspect what's going on and see pretty quickly.

1079
00:56:08,600 --> 00:56:09,700
So we can click on game update.

1080
00:56:09,700 --> 00:56:12,500
Say, okay, there's what's happening game update, there's Taliban group

1081
00:56:12,500 --> 00:56:15,000
output, there's Ence, and there's the right.

1082
00:56:15,900 --> 00:56:18,600
You know, all these little guys in here we don't care about because

1083
00:56:18,600 --> 00:56:19,300
they're don't take a Time.

1084
00:56:19,300 --> 00:56:21,600
Apparently begins in ETC.

1085
00:56:22,100 --> 00:56:23,200
Push Bender element.

1086
00:56:23,700 --> 00:56:27,200
So yeah looking pretty good.

1087
00:56:27,600 --> 00:56:30,800
You know it's not it's not great yet but it's getting there.

1088
00:56:31,000 --> 00:56:31,600
Right?

1089
00:56:32,400 --> 00:56:33,400
One hour at a time.

1090
00:56:34,300 --> 00:56:35,700
Eventually end up with something pretty cool.

1091
00:56:37,300 --> 00:56:38,500
All right, so let's go.

1092
00:56:40,200 --> 00:56:41,000
To the Q&A.

1093
00:56:41,000 --> 00:56:43,100
If anyone has any questions about what we're doing here?

1094
00:56:44,200 --> 00:56:49,500
If anyone has any questions now would be a good time to ask those

1095
00:56:49,500 --> 00:56:50,000
questions.

1096
00:56:50,000 --> 00:56:51,800
Put a q KO in front of it so I can see it.

1097
00:56:54,100 --> 00:56:54,900
Let's go.

1098
00:57:00,600 --> 00:57:01,700
Insofar as are the events.

1099
00:57:01,700 --> 00:57:04,000
Keeping the same colors across frames the long one.

1100
00:57:04,000 --> 00:57:05,400
Looks like it keeps changing.

1101
00:57:05,600 --> 00:57:08,400
No, the events are not keeping the same clothes craft frames.

1102
00:57:09,500 --> 00:57:12,800
I'm not sure how we want to deal with that, but the events are

1103
00:57:12,800 --> 00:57:17,600
actually just purely randomly plucked by order into this color array,

1104
00:57:18,800 --> 00:57:22,400
what we might want to do is try to make it so that there's a more

1105
00:57:22,400 --> 00:57:24,100
clear way of drawing.

1106
00:57:26,900 --> 00:57:28,400
What is going where?

1107
00:57:29,400 --> 00:57:31,100
But I just haven't given any thought yet.

1108
00:57:32,600 --> 00:57:35,600
It would be nice to maybe track the colors across frames and there's

1109
00:57:35,600 --> 00:57:38,000
actually pretty easy ways to do that.

1110
00:57:39,100 --> 00:57:43,600
It's just they you may have two things that stack up next to each

1111
00:57:43,600 --> 00:57:45,600
other that get the same color, right?

1112
00:57:45,600 --> 00:57:48,400
Because we could trivially make it like we know what the debug record

1113
00:57:48,400 --> 00:57:48,800
is.

1114
00:57:49,000 --> 00:57:49,800
You know what I mean?

1115
00:57:50,000 --> 00:57:53,400
So we could do something like oh yeah you know whatever.

1116
00:57:55,900 --> 00:58:00,400
You know, we use that instead of, instead of this, you know, we just

1117
00:58:00,400 --> 00:58:00,900
do.

1118
00:58:01,000 --> 00:58:02,400
Okay, we've got the record.

1119
00:58:04,000 --> 00:58:05,300
That's a pointer, right?

1120
00:58:05,600 --> 00:58:10,300
So we just cast that to a u-32, we shift it down by 4, right?

1121
00:58:11,000 --> 00:58:14,500
And then we mod, you know, the

1122
00:58:16,400 --> 00:58:19,900
or something, maybe maybe too, right.

1123
00:58:23,600 --> 00:58:24,600
What's the record?

1124
00:58:24,600 --> 00:58:25,700
What's the what?

1125
00:58:25,700 --> 00:58:27,400
What is the record?

1126
00:58:30,400 --> 00:58:31,400
It's called region.

1127
00:58:36,400 --> 00:58:37,400
So, you know,

1128
00:58:41,900 --> 00:58:46,700
That obviously would always keep the same ones, but we'd have to have

1129
00:58:46,700 --> 00:58:50,300
a better way of making it so that they were, you know, it picked more

1130
00:58:50,300 --> 00:58:53,900
distinct ones or, you know, so these are all do tiled render work.

1131
00:58:53,900 --> 00:58:58,100
So they are all the same color but then we have these guys, I guess

1132
00:58:58,100 --> 00:59:04,600
part of it is I don't know what the I don't know, the best way to kind

1133
00:59:04,600 --> 00:59:08,700
of re randomize that since they're going to go on even amount.

1134
00:59:08,700 --> 00:59:11,400
So you know like we can multiply by a prime number here or

1135
00:59:11,600 --> 00:59:12,200
Bang.

1136
00:59:12,200 --> 00:59:15,500
And I mean, you know, like I'm just this is just pure lunacy at this

1137
00:59:15,500 --> 00:59:16,300
point, but

1138
00:59:20,200 --> 00:59:22,900
You know, let's see here.

1139
00:59:23,800 --> 00:59:26,700
So, if we go into game update, there you go.

1140
00:59:26,700 --> 00:59:27,300
Begin soon.

1141
00:59:27,300 --> 00:59:28,000
Render.

1142
00:59:28,500 --> 00:59:29,800
That's that's no better.

1143
00:59:32,600 --> 00:59:33,200
Is that right?

1144
00:59:35,600 --> 00:59:36,000
Yeah.

1145
00:59:37,800 --> 00:59:38,400
So I don't know.

1146
00:59:38,400 --> 00:59:42,900
I mean the other thing we could do is try to actually assign the

1147
00:59:42,900 --> 00:59:45,900
colors based on the universal index.

1148
00:59:47,800 --> 00:59:52,600
We know we don't have enough for however many there are but like, you

1149
00:59:52,600 --> 00:59:58,000
know, in that debug region thing where we're actually recording that.

1150
00:59:58,500 --> 00:59:58,900
Let's see.

1151
00:59:58,900 --> 00:59:59,800
Where is that?

1152
01:00:00,000 --> 01:00:02,100
Bug thread, debug frame.

1153
01:00:02,100 --> 01:00:04,200
Debug frame region, right?

1154
01:00:05,100 --> 01:00:08,300
What we could do, there is also store like a color index.

1155
01:00:11,100 --> 01:00:16,900
You know, and I don't know if that's going to be particularly useful

1156
01:00:16,900 --> 01:00:19,600
or anything like that, but we could, you know, we could even do it

1157
01:00:19,700 --> 01:00:22,900
relatively for basically for free, right?

1158
01:00:23,900 --> 01:00:27,500
And so if we wanted to do that, then we just do, okay?

1159
01:00:27,500 --> 01:00:29,000
Whatever the color index is.

1160
01:00:31,700 --> 01:00:37,900
We looked at up, you know, and the color index for the region could

1161
01:00:37,900 --> 01:00:41,000
just be based on the counter or something.

1162
01:00:41,400 --> 01:00:48,400
So you know, inside inside where we actually record stuff for Regions

1163
01:00:48,600 --> 01:00:51,700
down in here, we do region color index.

1164
01:00:52,000 --> 01:00:56,800
And we'd use the debug the debug record index.

1165
01:00:58,300 --> 01:01:01,600
You know, to do that.

1166
01:01:02,400 --> 01:01:03,300
Something like that.

1167
01:01:14,500 --> 01:01:18,000
And so then they be stable across frames, but again, yeah.

1168
01:01:18,000 --> 01:01:20,300
So we just need, we need to draw lines because like, these are like

1169
01:01:20,300 --> 01:01:23,400
back-to-back all the same function, but they're different invocations

1170
01:01:23,400 --> 01:01:23,900
of the function.

1171
01:01:23,900 --> 01:01:26,900
And that might be nice to see, you know.

1172
01:01:29,000 --> 01:01:29,400
But yeah.

1173
01:01:29,400 --> 01:01:33,300
Now, everything stable across across frames, which is obviously kind

1174
01:01:33,300 --> 01:01:34,700
of nice, you know, certainly

1175
01:01:37,300 --> 01:01:37,600
so,

1176
01:01:41,100 --> 01:01:41,400
Yeah.

1177
01:01:49,300 --> 01:01:52,200
K just 0.5 Pixar, initially stream matter a lot.

1178
01:01:52,200 --> 01:01:54,700
I mean, it seemed pretty a pretty easy thing to overlook.

1179
01:01:54,800 --> 01:01:59,100
Would it make some calculations erroneous typically off by a half

1180
01:01:59,100 --> 01:02:00,200
pixel errors?

1181
01:02:01,700 --> 01:02:06,100
Just result in slightly worse visuals except once in a while where

1182
01:02:06,100 --> 01:02:08,800
they really cause you problems like with seems or with something that

1183
01:02:08,800 --> 01:02:09,900
shakes a little bit.

1184
01:02:11,200 --> 01:02:13,500
So yeah, I mean what I would say is your mileage may vary.

1185
01:02:13,500 --> 01:02:18,300
It depends a lot on the situation how much that affects what you're

1186
01:02:18,300 --> 01:02:18,700
doing.

1187
01:02:19,100 --> 01:02:22,800
Or not, most Persnickety, Graphics, things like that.

1188
01:02:23,400 --> 01:02:29,000
It's it's, you know, it's really about the specifics of what you're

1189
01:02:29,000 --> 01:02:32,100
doing, whether it ends up biting you that you didn't do it, right?

1190
01:02:32,300 --> 01:02:32,800
You know,

1191
01:02:42,100 --> 01:02:46,200
Soy sauce, the kid why are there blank apps on some of the bars and

1192
01:02:46,200 --> 01:02:48,300
why are the collated frames?

1193
01:02:49,000 --> 01:02:52,300
Not flush with the other lines.

1194
01:02:54,100 --> 01:02:56,300
Why are the collated frames?

1195
01:02:56,600 --> 01:02:59,000
Not flush with the other lines?

1196
01:03:02,100 --> 01:03:04,900
I think I might understand the first part of the question but I

1197
01:03:04,900 --> 01:03:05,700
definitely don't understand.

1198
01:03:05,700 --> 01:03:07,700
The second part of the question, can you elaborate more on your

1199
01:03:07,700 --> 01:03:08,400
questions?

1200
01:03:11,400 --> 01:03:13,800
So I can answer them K.

1201
01:03:13,800 --> 01:03:16,500
Is there a reason why we have many different starting points for

1202
01:03:16,500 --> 01:03:19,500
coordinate systems center versus top left versus top right Corners.

1203
01:03:19,600 --> 01:03:22,900
Windows, direct3d, verse opengl wouldn't are lions, be easier if there

1204
01:03:22,900 --> 01:03:23,800
is a standard for them.

1205
01:03:25,100 --> 01:03:26,000
Yes that's true.

1206
01:03:26,000 --> 01:03:27,100
It would be easier.

1207
01:03:30,800 --> 01:03:35,200
I mean the problem is the problem is it's not like there's some right

1208
01:03:35,200 --> 01:03:37,900
answer and so the reason I think that we have multiple coordinate

1209
01:03:37,900 --> 01:03:41,000
systems just because like I guess we've seen on handmade hero, there

1210
01:03:41,000 --> 01:03:44,200
isn't like some specific overwhelmingly, right?

1211
01:03:44,200 --> 01:03:45,500
Place to Center the coordinate system.

1212
01:03:45,500 --> 01:03:50,000
You could just you know whatever and so it's hard you know as

1213
01:03:50,000 --> 01:03:52,700
different systems evolve they just have different coordinate systems

1214
01:03:52,700 --> 01:03:56,300
that's just natural and absent.

1215
01:03:56,300 --> 01:03:58,300
Some driving force that like goes.

1216
01:03:58,300 --> 01:04:00,500
Okay we're going to have this big event where we all can

1217
01:04:00,600 --> 01:04:02,200
Her coordinate systems, right?

1218
01:04:03,000 --> 01:04:04,500
It's just not going to happen.

1219
01:04:09,800 --> 01:04:12,600
Chronodragon with handling sorting here will be finally handle sorting

1220
01:04:12,600 --> 01:04:13,600
of the other Sprites in the game.

1221
01:04:13,600 --> 01:04:15,200
Or will we just push that off further?

1222
01:04:15,800 --> 01:04:19,200
I think probably we should just do all the Sorting in one go like

1223
01:04:19,200 --> 01:04:22,700
because the renderer just should have a Sorter and then we'd use it

1224
01:04:22,700 --> 01:04:23,200
for everything.

1225
01:04:26,400 --> 01:04:28,100
Elven, why do we have both bull 32?

1226
01:04:28,100 --> 01:04:30,600
And in 32, that's answered back when we introduce them.

1227
01:04:30,600 --> 01:04:33,700
So, check out the archive and I talked about that.

1228
01:04:42,300 --> 01:04:43,600
James Whitman, pretty cool.

1229
01:04:43,600 --> 01:04:47,300
It does seem like a lot of calls take very different amounts of time,

1230
01:04:47,300 --> 01:04:49,200
even though they're probably not doing anything different.

1231
01:04:49,200 --> 01:04:51,800
Is that due to other active processes?

1232
01:04:53,400 --> 01:04:55,300
Probably not.

1233
01:04:58,400 --> 01:04:59,900
Probably not all that much.

1234
01:04:59,900 --> 01:05:01,000
I mean, maybe a little.

1235
01:05:01,400 --> 01:05:03,400
Are you talking about any particular one?

1236
01:05:05,900 --> 01:05:10,300
Elvin, how much valued and valuable do you think seedless, operator

1237
01:05:10,300 --> 01:05:11,700
overloading actually is?

1238
01:05:12,100 --> 01:05:13,700
I'm thinking a feeling moving to just purpura?

1239
01:05:13,700 --> 01:05:17,900
See, do you think it would be inconvenient to program without them?

1240
01:05:22,100 --> 01:05:26,200
Operator overloading for math is pretty important.

1241
01:05:26,700 --> 01:05:28,600
I probably would not want to use it.

1242
01:05:28,600 --> 01:05:32,300
I in granny, I did not use it and I miss it.

1243
01:05:33,000 --> 01:05:36,700
So, operator overloading for math is pretty important.

1244
01:05:39,000 --> 01:05:39,900
That's what I would say.

1245
01:05:41,000 --> 01:05:44,800
Cuba Caleb, will you show us how to do hit detection for obscure

1246
01:05:44,800 --> 01:05:48,700
shapes that may or may not exist in the debug you?

1247
01:05:48,700 --> 01:05:50,900
I know.

1248
01:05:53,300 --> 01:05:57,600
Because I don't even know which shapes you would be talking about.

1249
01:05:59,000 --> 01:05:59,800
I only really

1250
01:06:00,100 --> 01:06:02,200
How to do stuff that we have.

1251
01:06:02,200 --> 01:06:05,400
Some plausible reason why we might do

1252
01:06:07,600 --> 01:06:08,700
racer in a.

1253
01:06:09,000 --> 01:06:13,300
Have you seen the ue4 GDC trailer and what are your opinions on it?

1254
01:06:13,900 --> 01:06:17,600
I understand we are all Indies but just in general from a player

1255
01:06:17,600 --> 01:06:18,600
standpoint

1256
01:06:21,200 --> 01:06:23,500
I have not seen the ue4 GTC trailer.

1257
01:06:23,500 --> 01:06:24,400
I don't think.

1258
01:06:27,800 --> 01:06:30,900
Are you asking, just for my opinion of how the engine looks like, does

1259
01:06:30,900 --> 01:06:31,600
it look good?

1260
01:06:31,600 --> 01:06:33,200
Or I'm not sure what you mean.

1261
01:06:34,900 --> 01:06:38,100
First off, the kid, the longer bars, which I assume was when the

1262
01:06:38,100 --> 01:06:43,000
Collision have was happening, are farther left on the screen than the

1263
01:06:43,000 --> 01:06:44,400
shorter bars.

1264
01:06:47,100 --> 01:06:50,200
So let me see, I'm not sure I understand.

1265
01:06:51,900 --> 01:06:53,000
What you're talking about.

1266
01:06:54,900 --> 01:06:57,200
So what are we talking about?

1267
01:06:57,300 --> 01:06:58,300
Are we talking about?

1268
01:06:58,300 --> 01:07:02,200
Are you talking about why these bars don't line up with this bar?

1269
01:07:03,700 --> 01:07:06,000
Is that is that what you're asking about?

1270
01:07:10,900 --> 01:07:11,700
Kb3.

1271
01:07:11,700 --> 01:07:12,400
Obscure shapes.

1272
01:07:12,400 --> 01:07:14,700
I mean, a slice in a pie chart

1273
01:07:16,400 --> 01:07:19,800
Well, there's there's two different ways that you can check for shapes

1274
01:07:20,000 --> 01:07:24,200
slice in a pie chart happens to be convex, which means you have a

1275
01:07:24,200 --> 01:07:26,800
get-out-of-jail-free card, you could just check, check the winding

1276
01:07:27,200 --> 01:07:27,700
order.

1277
01:07:28,900 --> 01:07:31,300
And it works if you're talking about obscure shapes, that can be

1278
01:07:31,300 --> 01:07:35,400
concave like a butterfly shape, or something.

1279
01:07:37,100 --> 01:07:39,900
Then you need to do an edge Crossing test again.

1280
01:07:40,300 --> 01:07:40,900
Really simple.

1281
01:07:40,900 --> 01:07:43,000
It's like 20 lines of code.

1282
01:07:45,300 --> 01:07:50,000
You can look it up point point in polygon is like real, pretty pretty

1283
01:07:50,000 --> 01:07:50,400
simple.

1284
01:07:50,400 --> 01:07:50,700
Right?

1285
01:07:50,700 --> 01:07:53,700
Like point and polygon.

1286
01:07:57,500 --> 01:08:01,600
I don't know if any of these is good, that's why we don't use.

1287
01:08:01,700 --> 01:08:04,500
We still don't actually check the active thing.

1288
01:08:05,800 --> 01:08:06,500
It's pretty funny.

1289
01:08:16,300 --> 01:08:17,800
So, this looks reasonable.

1290
01:08:21,800 --> 01:08:24,399
And so like the the this looks like a pretty reasonable traction.

1291
01:08:24,500 --> 01:08:27,100
I mean the idea is just that when you have a point, you know that

1292
01:08:27,100 --> 01:08:31,100
there's going to be an odd number of edge Crossings if you if you're

1293
01:08:31,100 --> 01:08:35,500
inside it and an even number of edge Crossings if you're outside it so

1294
01:08:35,500 --> 01:08:38,899
you can just start looking at the edges of the polygon and see how

1295
01:08:38,899 --> 01:08:41,000
many of them a single line.

1296
01:08:41,700 --> 01:08:44,600
And this case they pick horizontal because it's the easiest one to do

1297
01:08:44,600 --> 01:08:46,899
like a horizontal or vertical line is going to be the easiest thing to

1298
01:08:46,899 --> 01:08:48,899
test because it's aligned with one accident.

1299
01:08:49,000 --> 01:08:49,399
Axis.

1300
01:08:50,200 --> 01:08:54,500
So you know, you can see 1 2 3 4 5 that's odd, I must be inside.

1301
01:08:54,700 --> 01:08:57,300
If I were to move out here I would have one two, three, four.

1302
01:08:57,300 --> 01:08:59,800
And now I'm I would know that I'm outside because

1303
01:09:00,000 --> 01:09:01,600
You know, you got the idea.

1304
01:09:01,899 --> 01:09:02,700
It's really simple.

1305
01:09:10,399 --> 01:09:11,200
Okay, sorry sauce.

1306
01:09:11,200 --> 01:09:14,800
The kids says, yes, to my question about his question.

1307
01:09:16,399 --> 01:09:19,899
So what's happening here right?

1308
01:09:19,899 --> 01:09:21,600
Is that this is one frame.

1309
01:09:22,899 --> 01:09:25,100
This is one thread.

1310
01:09:25,899 --> 01:09:29,399
So This Thread goes, excuse me, refresh input processing.

1311
01:09:29,399 --> 01:09:32,100
Game update, you know blah blah blah.

1312
01:09:33,399 --> 01:09:36,600
This point right here is where the renderer kicks off.

1313
01:09:37,200 --> 01:09:41,200
And so the renderer actually invokes, you know, pushes those jobs on

1314
01:09:41,200 --> 01:09:44,399
the job queue and you can see that we get all of this renderers.

1315
01:09:44,399 --> 01:09:51,000
So the other are other threads 1 2 3 4 5 6, right?

1316
01:09:51,300 --> 01:09:54,200
The other 6 threads all kickoff render work.

1317
01:09:54,300 --> 01:09:57,600
So while this thread is rendering, all these stones are rendering when

1318
01:09:57,600 --> 01:09:58,700
they are done.

1319
01:09:59,600 --> 01:10:05,700
They all stopped, we do a little bit more work and then we kick off a

1320
01:10:05,700 --> 01:10:09,600
second render, which is right here, which is the debug stuff.

1321
01:10:09,700 --> 01:10:12,900
So this is actually where our frame would be over normally, but

1322
01:10:12,900 --> 01:10:16,600
because we have debugging happening, we see these and this is just,

1323
01:10:16,600 --> 01:10:17,400
again, the same thing.

1324
01:10:17,400 --> 01:10:20,000
It kicks off a render, This Thread is rendering, but it but all the

1325
01:10:20,000 --> 01:10:22,100
there's plenty of work in that work queue.

1326
01:10:22,100 --> 01:10:26,100
So the tiled the other tiles get picked up by the other threads and

1327
01:10:26,100 --> 01:10:26,600
worked on.

1328
01:10:27,700 --> 01:10:28,600
So that's what these are.

1329
01:10:28,800 --> 01:10:32,100
So the reason that nothing's happening in here is because we haven't

1330
01:10:32,100 --> 01:10:34,900
multi-threaded anything else yet.

1331
01:10:34,900 --> 01:10:36,900
So there's nothing else for them to do.

1332
01:10:37,300 --> 01:10:41,200
These threads don't have any work to do, so they just sleep, waiting

1333
01:10:41,200 --> 01:10:44,400
for someone to stuff something on their cue, when we get to the

1334
01:10:44,400 --> 01:10:45,400
renderer, they can.

1335
01:10:45,900 --> 01:10:49,100
So in the future, you know, we might try to do is fill those holes

1336
01:10:50,200 --> 01:10:53,000
with like, simulation work or something, you know?

1337
01:11:04,800 --> 01:11:08,500
Racer in a yes the graphics check it out whenever okay so I don't

1338
01:11:08,500 --> 01:11:11,000
really need to check out a video for the unreal Graphics engine.

1339
01:11:11,000 --> 01:11:12,700
It's a totally fine Graphics engine.

1340
01:11:15,500 --> 01:11:20,600
It always it always has been and you know, if you want a 3D, you know,

1341
01:11:20,600 --> 01:11:24,600
first person shooter e Graphics engine and you don't know how to build

1342
01:11:24,600 --> 01:11:26,500
one yourself or don't want to build one yourself.

1343
01:11:28,200 --> 01:11:30,000
It's quite good quality.

1344
01:11:30,000 --> 01:11:31,200
It's a good quality renderer.

1345
01:11:33,700 --> 01:11:35,100
I can't speak for the engine.

1346
01:11:35,600 --> 01:11:37,000
I have never used it myself.

1347
01:11:37,400 --> 01:11:39,600
There may be a lot of really bad problems with it or something for

1348
01:11:39,600 --> 01:11:39,700
all.

1349
01:11:39,700 --> 01:11:42,400
I know that would make it very unpleasant to develop with I don't have

1350
01:11:42,400 --> 01:11:46,500
any idea that's not really my sphere of knowledge.

1351
01:11:46,500 --> 01:11:51,900
I've never used Unreal Engine or the unity engine myself so you know

1352
01:11:52,300 --> 01:11:56,300
your mileage may vary in terms of whether you enjoy working with them.

1353
01:11:57,200 --> 01:11:59,800
But you know, my experience.

1354
01:12:00,000 --> 01:12:02,300
General has been that unities rendering engine does not look

1355
01:12:02,300 --> 01:12:03,200
particularly good.

1356
01:12:03,800 --> 01:12:05,000
It looks pretty amateur to me.

1357
01:12:05,900 --> 01:12:11,200
Whereas on reels rendering engine, looks does look really good and you

1358
01:12:11,200 --> 01:12:15,100
know, I don't know to what extent, that's a fair assessment.

1359
01:12:15,800 --> 01:12:20,400
I'm just going by what I see them demo and what I see games ship with

1360
01:12:20,400 --> 01:12:21,400
with the two engines.

1361
01:12:22,000 --> 01:12:24,300
You know, if you're someone who really cared about visual quality,

1362
01:12:24,300 --> 01:12:27,500
you're you're pretty much going to go with the Unreal Engine as far as

1363
01:12:27,500 --> 01:12:28,100
I can tell.

1364
01:12:29,600 --> 01:12:29,800
But

1365
01:12:30,000 --> 01:12:30,100
What?

1366
01:12:33,500 --> 01:12:34,600
Between between the two.

1367
01:12:38,400 --> 01:12:40,300
Because, like I said, you know, and he's don't have access to

1368
01:12:40,300 --> 01:12:43,100
frostbite, for example, which also looked quite good to me.

1369
01:12:45,300 --> 01:12:49,000
Let's see, James, I've been in re function taking different types of

1370
01:12:49,000 --> 01:12:49,400
time.

1371
01:12:49,400 --> 01:12:51,800
I mean, if we don't send any input and essentially the same image

1372
01:12:51,800 --> 01:12:54,600
keeps getting ready to repeatedly, we still see a lot of fluctuation

1373
01:12:54,600 --> 01:12:56,600
in the amount of time being consumed per frame.

1374
01:12:56,900 --> 01:12:59,600
We have a lot of chop where I would have expected relatively calm

1375
01:12:59,600 --> 01:13:02,500
Waters unless we're losing time to other processes on the machine.

1376
01:13:03,700 --> 01:13:06,200
So yeah, I mean if you want to take a look at this,

1377
01:13:08,600 --> 01:13:14,500
As it is and you're saying that you see a lot of chop their to me.

1378
01:13:14,500 --> 01:13:17,000
If I look at this, I actually don't see that much chop.

1379
01:13:17,500 --> 01:13:21,900
I mean remember this is something like, you know, 16 milliseconds of

1380
01:13:21,900 --> 01:13:22,500
time.

1381
01:13:22,900 --> 01:13:26,200
And it's coming in pretty darn close every time, right?

1382
01:13:27,100 --> 01:13:29,200
And so yeah, you know, is there a shop there?

1383
01:13:29,200 --> 01:13:31,700
Yes, but not really that much.

1384
01:13:31,700 --> 01:13:35,800
I mean, we probably are losing some time to the system, especially

1385
01:13:35,800 --> 01:13:38,100
since OBS is running stuff, but

1386
01:13:38,500 --> 01:13:40,900
It's really this is actually pretty consistent timings.

1387
01:13:40,900 --> 01:13:46,300
I would say, because remember memory effects being what they are and

1388
01:13:46,300 --> 01:13:51,100
you know, there's so much unpredictability in modern execution, even

1389
01:13:51,100 --> 01:13:55,900
if nobody stealing any time from you just the fact that every frame is

1390
01:13:55,900 --> 01:13:59,500
a different processor State as it goes through is enough to make your

1391
01:13:59,500 --> 01:14:00,900
timings different, you know.

1392
01:14:02,400 --> 01:14:03,000
So yeah.

1393
01:14:03,100 --> 01:14:05,600
But yes I mean almost certainly

1394
01:14:06,500 --> 01:14:10,400
We are seeing swap out time in there.

1395
01:14:11,100 --> 01:14:11,700
I would assume.

1396
01:14:15,500 --> 01:14:18,900
And and, you know what, more so than swap we might not even be seeing

1397
01:14:18,900 --> 01:14:19,900
swap out time, right?

1398
01:14:19,900 --> 01:14:23,300
What we might be seeing more of is like the operating system taking a

1399
01:14:23,300 --> 01:14:25,000
longer time to do something.

1400
01:14:25,000 --> 01:14:28,100
We asked it to do or stuff like that to write.

1401
01:14:29,700 --> 01:14:30,900
Like, you can look at frame display.

1402
01:14:30,900 --> 01:14:35,200
Look at how long it took their right versus how long it took here and

1403
01:14:35,200 --> 01:14:37,100
that's an operating system call.

1404
01:14:37,100 --> 01:14:40,000
So it's not really about swapping us like, went it decided to do that.

1405
01:14:40,100 --> 01:14:42,200
And if you look at the primary difference between these two guys, that

1406
01:14:42,200 --> 01:14:43,700
was mostly in there, right?

1407
01:14:46,700 --> 01:14:49,500
So yeah and so there's some other differences you know like input

1408
01:14:49,500 --> 01:14:52,200
processing again, that's calling the operating system and that's what

1409
01:14:52,200 --> 01:14:53,800
accounted for this shift here.

1410
01:14:54,700 --> 01:14:59,900
So swap out is not necessarily the same as operation taking.

1411
01:15:00,000 --> 01:15:02,500
Longer to do something for you or stuff like that.

1412
01:15:12,400 --> 01:15:13,500
Character, Hanson curious.

1413
01:15:13,500 --> 01:15:17,200
What point represents the amount of time it takes the operating system

1414
01:15:17,200 --> 01:15:19,200
to set up the parallelism.

1415
01:15:19,700 --> 01:15:22,700
If parallelism is the right word.

1416
01:15:27,500 --> 01:15:30,300
Right now we don't have a very good way of viewing that unfortunately.

1417
01:15:30,800 --> 01:15:33,800
And the reason for that is we haven't really finished doing the sort

1418
01:15:33,800 --> 01:15:34,600
of drill down thing.

1419
01:15:34,600 --> 01:15:37,100
So what happens is, you know, we drill down on something like game

1420
01:15:37,100 --> 01:15:37,700
update and render.

1421
01:15:37,700 --> 01:15:40,900
We lose these other guys because they are not Underneath Him.

1422
01:15:42,100 --> 01:15:42,800
You know, I'm saying.

1423
01:15:44,200 --> 01:15:47,500
So what we want to do is get down to here, where we can see tiled

1424
01:15:47,500 --> 01:15:52,900
render group to Output getting invoked and then, look at how long it

1425
01:15:52,900 --> 01:15:54,900
takes for the other threads to kick back up.

1426
01:15:55,400 --> 01:16:00,700
And you can kind of see, well unfortunately, we're going to get a

1427
01:16:00,700 --> 01:16:03,000
different set of frames so there's really no way to even look at it

1428
01:16:03,000 --> 01:16:03,300
there.

1429
01:16:04,900 --> 01:16:07,700
Yeah, we just were a little bit before we could really do that.

1430
01:16:07,900 --> 01:16:09,700
We could really see what you're asking for.

1431
01:16:11,500 --> 01:16:11,700
So

1432
01:16:11,900 --> 01:16:14,400
sorry about that, but

1433
01:16:27,300 --> 01:16:28,200
Kubrick Caleb.

1434
01:16:28,200 --> 01:16:31,500
Do you know why one of the Rooker threads started after the others?

1435
01:16:31,900 --> 01:16:32,300
Know.

1436
01:16:32,300 --> 01:16:33,000
I don't.

1437
01:16:34,800 --> 01:16:40,100
You know, in general, I don't know why you sometimes get, you know,

1438
01:16:40,100 --> 01:16:43,700
Windows might decide to do something kind of a little wonky, with

1439
01:16:43,700 --> 01:16:45,200
what, it's, what it's kicking people off.

1440
01:16:45,200 --> 01:16:46,800
I have no idea, right?

1441
01:16:46,900 --> 01:16:49,200
You can definitely see some anomalies there and I don't know what they

1442
01:16:49,200 --> 01:16:49,600
are.

1443
01:16:49,700 --> 01:16:51,900
That's just Windows is doing what Windows is doing.

1444
01:16:52,700 --> 01:16:54,000
We might have a bug.

1445
01:16:54,200 --> 01:16:58,100
So when we get into when we swim, we try to start to like nail things

1446
01:16:58,100 --> 01:17:01,600
down harder, you know, many months from now, when we're like trying to

1447
01:17:01,600 --> 01:17:04,500
drill down on like performance issues and things, you know, you know,

1448
01:17:04,700 --> 01:17:05,500
Shipping work.

1449
01:17:06,900 --> 01:17:08,500
That might be something we have to look at.

1450
01:17:09,000 --> 01:17:11,000
It's always very hard to say, right?

1451
01:17:13,600 --> 01:17:14,000
So yeah.

1452
01:17:17,100 --> 01:17:19,900
Elephant every once in a while it seems like a frame gets missed.

1453
01:17:20,100 --> 01:17:21,800
I've noticed that happens and things I do as well.

1454
01:17:21,800 --> 01:17:24,800
Is there a way to get around that are reliably not on Windows?

1455
01:17:24,900 --> 01:17:28,300
No, there's definitely things that we will be doing in the future,

1456
01:17:28,300 --> 01:17:29,400
which will minimize it more.

1457
01:17:29,400 --> 01:17:32,600
Like, for example, not going through, stretch to stretch bullet.

1458
01:17:32,900 --> 01:17:36,300
So when we're going through like opengl as the way to display frames,

1459
01:17:38,000 --> 01:17:41,000
that will help us not miss frames, because that's going through a pipe

1460
01:17:41,000 --> 01:17:43,100
that's supposed to be for on-time delivery.

1461
01:17:43,800 --> 01:17:46,000
Unfortunately, even that doesn't help you.

1462
01:17:46,200 --> 01:17:49,300
Windows is not even a soft real-time operating system.

1463
01:17:49,600 --> 01:17:51,300
Let alone a hard real-time operating system.

1464
01:17:51,900 --> 01:17:53,200
Windows is just bad at that.

1465
01:17:53,200 --> 01:17:57,900
It's bad enough that I wish they would put more effort into making

1466
01:17:57,900 --> 01:17:58,300
that work.

1467
01:17:58,300 --> 01:17:59,100
They don't.

1468
01:17:59,200 --> 01:17:59,900
And so as a result,

1469
01:18:00,000 --> 01:18:02,600
V, you're going to miss frames on Windows.

1470
01:18:03,800 --> 01:18:07,000
Even people who spend like all their time, trying to not miss frames

1471
01:18:07,000 --> 01:18:09,700
on Windows, like the VR guys.

1472
01:18:09,800 --> 01:18:12,300
Still have problems where every so often every couple of minutes they

1473
01:18:12,300 --> 01:18:17,100
miss a frame and the reason is because Windows just decides to swap

1474
01:18:17,100 --> 01:18:20,300
them out and redraw, you know, the title bar on Visual Studio or

1475
01:18:20,300 --> 01:18:21,200
something and you mr.

1476
01:18:21,200 --> 01:18:21,500
Fraim

1477
01:18:24,400 --> 01:18:27,200
I said wish they would wish Microsoft, a thing, I thinking more,

1478
01:18:27,200 --> 01:18:29,100
seriously, they never have and they probably never will.

1479
01:18:36,900 --> 01:18:39,800
What do you think is the theory that says we already know everything.

1480
01:18:40,300 --> 01:18:43,100
All the knowledge there is but we just don't remember it.

1481
01:18:43,100 --> 01:18:46,100
So when we study we start remembering things.

1482
01:18:48,100 --> 01:18:51,600
I think that is a

1483
01:18:53,600 --> 01:18:57,200
I think while there are well, there exists constructions of the

1484
01:18:57,200 --> 01:18:58,900
universe, for which that could be true.

1485
01:18:58,900 --> 01:19:02,400
I think, even in those constructions, that is a very poor way of

1486
01:19:02,400 --> 01:19:06,800
stating it because the what people, the term that people use when they

1487
01:19:06,800 --> 01:19:09,000
say, remember or know,

1488
01:19:10,500 --> 01:19:13,300
It's that is obviously not true, right?

1489
01:19:13,300 --> 01:19:18,800
Because we know we've seen how neurons get built and stuff and so you

1490
01:19:18,800 --> 01:19:22,400
know what people think of as knowing and remembering it's obviously

1491
01:19:22,400 --> 01:19:26,000
not true that we already know things we just don't remember them.

1492
01:19:26,800 --> 01:19:31,000
But an alternate way you could think of how neurons worked was.

1493
01:19:31,000 --> 01:19:37,600
If there was some, you know, global system in which knowledge there's

1494
01:19:37,600 --> 01:19:40,200
a specific configuration for every

1495
01:19:40,300 --> 01:19:43,400
Drill piece of knowledge as as the brain conceptualize it.

1496
01:19:43,400 --> 01:19:49,000
So every configuration and all that's happening, is your brain is

1497
01:19:49,000 --> 01:19:54,700
actually sort of placing one of those into itself as it becomes

1498
01:19:54,700 --> 01:19:56,100
something that enters your brain.

1499
01:19:57,800 --> 01:20:00,200
You know you could argue that there was something like that.

1500
01:20:00,200 --> 01:20:02,900
We're all every configuration of knowledge is already exists and it's

1501
01:20:02,900 --> 01:20:05,800
just your brain is like placing new ones in or something like that I

1502
01:20:05,800 --> 01:20:09,600
suppose in general it sounds like a pretty stupid statement of me I

1503
01:20:09,600 --> 01:20:10,200
guess the

1504
01:20:10,300 --> 01:20:12,400
Closet, that the capsule review.

1505
01:20:18,100 --> 01:20:20,200
All right, looks like we've come to the end of the questions.

1506
01:20:22,700 --> 01:20:26,800
And I'm going to have a little mini announcement after the stream is

1507
01:20:26,800 --> 01:20:27,300
over.

1508
01:20:28,000 --> 01:20:33,100
So if you would like to stick around, after the fact for handmade hero

1509
01:20:33,100 --> 01:20:35,700
friends, I will have a little brief announcement.

1510
01:20:38,800 --> 01:20:41,700
Yes, thank you everyone for joining me for another episode of handmade

1511
01:20:41,700 --> 01:20:41,900
here.

1512
01:20:41,900 --> 01:20:43,000
It's been a pleasure coding with you.

1513
01:20:43,000 --> 01:20:46,000
As always, I'm excited to see our debug system, slowly start to come

1514
01:20:46,000 --> 01:20:49,000
together because I like being able to inspect my programs doing.

1515
01:20:49,300 --> 01:20:51,900
And we've been Flying Blind for a while because we just been working

1516
01:20:51,900 --> 01:20:52,400
on other things.

1517
01:20:52,400 --> 01:20:54,100
And it was important to kind of get everything up and running.

1518
01:20:54,100 --> 01:20:57,600
But now that we have a relatively good foundation, it's kind of nice

1519
01:20:57,600 --> 01:20:59,800
to start to be able to see what things are actually doing.

1520
01:21:00,100 --> 01:21:02,700
So that we can figure out what's, what's not working.

1521
01:21:02,700 --> 01:21:05,900
Well, and also be able to troubleshoot problems and get all sorts of

1522
01:21:05,900 --> 01:21:09,100
kind of like, nice higher level, sort of feel for what the code is

1523
01:21:09,100 --> 01:21:09,400
doing.

1524
01:21:09,400 --> 01:21:09,900
It's pretty cool.

1525
01:21:09,900 --> 01:21:11,900
And I'm very glad that that we're getting that now.

1526
01:21:11,900 --> 01:21:13,700
So that's what we'll be doing next week.

1527
01:21:13,700 --> 01:21:16,000
Now that we've got the ball rolling, I think we should just keep on

1528
01:21:16,000 --> 01:21:19,300
rolling it and put in some pretty cool stuff kind of get that you I

1529
01:21:19,300 --> 01:21:19,600
working.

1530
01:21:19,600 --> 01:21:22,000
So it's pretty easy for us to kind of go and inspect things.

1531
01:21:23,200 --> 01:21:24,000
And so that's what we doing.

1532
01:21:24,000 --> 01:21:26,800
Hopefully, you'll come back next week for that.

1533
01:21:27,000 --> 01:21:29,300
And if you want to know the schedule for that, always check the

1534
01:21:29,300 --> 01:21:29,800
tweetbot.

1535
01:21:30,000 --> 01:21:33,600
But this guy right here from Hammer here at or you can go to the

1536
01:21:33,600 --> 01:21:34,900
tweetbot, it tweets, the schedule.

1537
01:21:34,900 --> 01:21:37,500
So you can always tell when we're going to be live.

1538
01:21:39,700 --> 01:21:43,700
In the meantime, if you would like to follow along with the source

1539
01:21:43,700 --> 01:21:47,400
code, you can always pre-order the game on handmade hero to org and it

1540
01:21:47,400 --> 01:21:48,300
comes to the source code.

1541
01:21:48,300 --> 01:21:50,900
Even as we are developing the game right now, every night after we're

1542
01:21:50,900 --> 01:21:52,600
done coding here, I upload it.

1543
01:21:52,600 --> 01:21:54,900
So if you want to play around with that, this is the place to do it.

1544
01:21:55,200 --> 01:21:58,000
And you can use it, you can get it by downloading a zip.

1545
01:21:58,000 --> 01:22:02,600
There's also a sort of unsupported GitHub that you can use that it

1546
01:22:02,600 --> 01:22:04,600
comes with if you're a get kind of person.

1547
01:22:05,000 --> 01:22:08,000
So you got options there, we also have a form so you can go to ask

1548
01:22:08,000 --> 01:22:09,200
questions and a patreon page.

1549
01:22:09,300 --> 01:22:11,700
Age, you can pledge, support the video series, check those out.

1550
01:22:11,800 --> 01:22:15,600
If you like the series are good places to go that's about it for

1551
01:22:15,600 --> 01:22:16,100
today.

1552
01:22:16,800 --> 01:22:23,600
Until next time, I will be back here on Monday until then have fun

1553
01:22:23,600 --> 01:22:27,500
coating over the weekend and I will see you guys on the internet.

1554
01:22:27,600 --> 01:22:28,400
Take it easy, everyone.

