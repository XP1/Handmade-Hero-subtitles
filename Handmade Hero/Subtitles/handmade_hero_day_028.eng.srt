1
00:00:00,100 --> 00:00:01,300
Reset, there we go.

2
00:00:01,600 --> 00:00:02,700
Sorry, cycle of recording.

3
00:00:02,700 --> 00:00:03,600
I got cycle the timer.

4
00:00:03,900 --> 00:00:08,600
All right, welcome to handmade hero here on day 28.

5
00:00:09,000 --> 00:00:14,300
We are in the middle of our sort of architecture stuff, our game

6
00:00:14,300 --> 00:00:17,400
architecture stuff, where we are starting to think about how we want

7
00:00:17,600 --> 00:00:20,100
this game's code to be structured and how we want to work yesterday.

8
00:00:20,100 --> 00:00:23,300
We wrote a little function so we could draw a rectangle on the screen

9
00:00:23,300 --> 00:00:24,000
safely.

10
00:00:24,200 --> 00:00:27,000
So that would basically allow us to start doing some debug stuff.

11
00:00:27,800 --> 00:00:29,900
I wanted to talk a little bit about how to

12
00:00:30,000 --> 00:00:31,400
To make the rectangle colored.

13
00:00:31,400 --> 00:00:34,100
Today, we're going to think about like basically colors and how those

14
00:00:34,100 --> 00:00:35,700
work just really briefly at the beginning of the stream.

15
00:00:35,700 --> 00:00:37,900
Again, we're saving any of the hardcore rendering stuff when we

16
00:00:37,900 --> 00:00:39,900
activate the renderer, but there's a couple things I have to do just

17
00:00:39,900 --> 00:00:40,900
to get stuff up on the screen.

18
00:00:40,900 --> 00:00:44,400
So I'm kind of explaining them lightly and then we're going to start

19
00:00:44,400 --> 00:00:47,200
generating tile maps and doing some things with like trying to move

20
00:00:47,200 --> 00:00:48,600
characters around that sort of stuff.

21
00:00:49,100 --> 00:00:52,900
So basically what we're trying to do is we're trying to make sort of

22
00:00:52,900 --> 00:00:58,000
the initial game code, just a first pass, whatever comes to mind so we

23
00:00:58,000 --> 00:00:59,800
can start to look at how it looks and think,

24
00:01:00,100 --> 00:01:03,400
How we might want it to be structured because one of the big things

25
00:01:03,400 --> 00:01:06,100
that I was trying to emphasize on the previous two days when we were

26
00:01:06,100 --> 00:01:07,900
basically just talking about architecture and how you should think

27
00:01:07,900 --> 00:01:11,200
about it is you don't want to do a lot of pre-planning because

28
00:01:11,200 --> 00:01:14,100
pre-planning, you usually just don't have the information you need to

29
00:01:14,100 --> 00:01:16,900
make those good decisions and you're just going to make mistakes that

30
00:01:16,900 --> 00:01:18,100
will cost you a lot of time.

31
00:01:18,300 --> 00:01:23,400
And so usually, what's better to do is explore first learn and then go

32
00:01:23,400 --> 00:01:27,100
back and say, okay, now that I've learned what this code should look

33
00:01:27,100 --> 00:01:27,900
like structurally.

34
00:01:27,900 --> 00:01:29,200
Now I can say definitively.

35
00:01:29,200 --> 00:01:29,600
This is the

36
00:01:29,900 --> 00:01:34,000
Texture and move forward, so that exactly what we're doing and we are

37
00:01:34,000 --> 00:01:35,800
going to continue with that today.

38
00:01:35,800 --> 00:01:40,300
So what if you have pre-ordered the game here on handmade hero

39
00:01:40,300 --> 00:01:43,600
dot-org, you should have gotten a link in your email that allows you

40
00:01:43,600 --> 00:01:44,500
to download the source code.

41
00:01:44,500 --> 00:01:47,400
In that source, code is a ZIP file with each day's Source.

42
00:01:47,800 --> 00:01:49,700
Basically open it up and there's a zip for every day.

43
00:01:49,700 --> 00:01:50,700
We're on day 28.

44
00:01:50,700 --> 00:01:51,700
So you zip the unzip.

45
00:01:51,700 --> 00:01:55,300
The day before day, 27 start with day, 27 source, and you'll be

46
00:01:55,300 --> 00:01:57,300
exactly where I am right now.

47
00:01:57,700 --> 00:01:59,100
With that said, let's get started.

48
00:01:59,100 --> 00:01:59,800
We've got a lot to

49
00:02:00,000 --> 00:02:02,300
You because we're right here at the beginning of the game.

50
00:02:02,300 --> 00:02:05,600
There is so it's a giant open field in front of us basically.

51
00:02:06,400 --> 00:02:10,100
So I am going to go ahead and get everything loaded so we can get

52
00:02:10,100 --> 00:02:10,800
started.

53
00:02:11,000 --> 00:02:17,200
All right, so if I remember correctly, we were at the point where

54
00:02:17,200 --> 00:02:19,000
basically we can size the window.

55
00:02:19,000 --> 00:02:21,000
However, we want, but we don't do anything with the exercise right

56
00:02:21,000 --> 00:02:21,100
now.

57
00:02:21,100 --> 00:02:23,000
We're only drawing it up into this upper corner.

58
00:02:23,000 --> 00:02:25,400
That's, that's basically the entirety of our game.

59
00:02:25,400 --> 00:02:28,300
There's some things that I want to do with that as well, in the future

60
00:02:28,300 --> 00:02:29,600
a little bit, but we'll talk about that.

61
00:02:30,100 --> 00:02:30,700
Later on.

62
00:02:31,000 --> 00:02:35,300
So this is our game and we also have our handy-dandy editor here.

63
00:02:35,900 --> 00:02:39,800
So, let me go ahead and open up our handmade dot CPP, which is here.

64
00:02:40,700 --> 00:02:44,800
So, at first, first things first, we should probably clear the screen.

65
00:02:45,300 --> 00:02:47,200
Well, you know what, let's talk about this again.

66
00:02:47,500 --> 00:02:50,500
I actually do like clearing the screen to purple because you know,

67
00:02:50,500 --> 00:02:52,800
what we should probably do if we clear the screen to this hideous

68
00:02:52,800 --> 00:02:56,000
purple, which is not something we're probably going to use in our

69
00:02:56,000 --> 00:02:57,200
debug output at all.

70
00:02:57,300 --> 00:02:59,800
If I clear the screen to this hideous purple and then we go ahead.

71
00:03:00,000 --> 00:03:03,200
Make a little tilemap thing that has little squares, you know, and we

72
00:03:03,200 --> 00:03:06,700
color the squares in at least then we'll be able to see anywhere that

73
00:03:06,700 --> 00:03:09,200
we are not actually filling because we'll see this hideous purple show

74
00:03:09,200 --> 00:03:09,400
through.

75
00:03:09,400 --> 00:03:11,300
So maybe it's a good idea to leave the hoodies purple in there.

76
00:03:11,300 --> 00:03:12,800
I'm not so against Hades purple.

77
00:03:12,800 --> 00:03:13,500
So that's good.

78
00:03:13,900 --> 00:03:14,200
All right.

79
00:03:14,200 --> 00:03:17,000
So what I want to do before we got started today, in terms of the

80
00:03:17,000 --> 00:03:19,900
color I have this to do in here that says floating-point color

81
00:03:19,900 --> 00:03:20,400
tomorrow.

82
00:03:21,100 --> 00:03:24,000
What I wanted to do is just talk a little bit about that and and get

83
00:03:24,000 --> 00:03:26,800
you a little bit more familiar with that so that we can make the

84
00:03:26,800 --> 00:03:29,800
colors, make a little more sense than because you know, right now,

85
00:03:30,000 --> 00:03:32,700
We're basically doing what amounts to sort of web colors, right?

86
00:03:32,800 --> 00:03:37,800
I know you've seen it like pound AA BB CC, that sort of thing or, you

87
00:03:37,800 --> 00:03:40,200
know, a, a 00 FF or something.

88
00:03:40,400 --> 00:03:43,100
You've seen this in the if you've ever done any web programming,

89
00:03:43,100 --> 00:03:46,100
that's how web colors work, but basically, right that is the

90
00:03:46,100 --> 00:03:49,800
hexadecimal encoding of the color and there's a lot of reasons not to

91
00:03:49,800 --> 00:03:50,500
like this.

92
00:03:50,500 --> 00:03:54,100
It's I mean, it's basically packing the red, the green and the blue

93
00:03:54,500 --> 00:03:58,500
into the bottom, 24 bits and I guess Alpha if you've got it.

94
00:03:58,600 --> 00:03:59,900
But into the bottom 24, a

95
00:04:00,900 --> 00:04:03,400
Of a 32-bit integer and there's not a lot.

96
00:04:03,500 --> 00:04:04,400
You can really do with that.

97
00:04:04,400 --> 00:04:08,300
It's not an efficient way to work with it because the most efficient

98
00:04:08,300 --> 00:04:11,600
way to do math in the CPU is using the floating Point Unit and this is

99
00:04:11,600 --> 00:04:13,300
not floating point at all.

100
00:04:13,300 --> 00:04:13,800
Right.

101
00:04:17,100 --> 00:04:19,399
So if you think about a lot of things that you might want to do with

102
00:04:19,399 --> 00:04:22,600
color, like, one thing that we might want to do with color, is blend

103
00:04:22,600 --> 00:04:25,200
two colors together, for example, other than we might wanna do with

104
00:04:25,200 --> 00:04:28,500
colors, make it darker or lighter, like blend it towards black, right?

105
00:04:29,300 --> 00:04:33,300
These sorts of things, the math for doing that is really easy to do in

106
00:04:33,300 --> 00:04:33,900
floating point.

107
00:04:33,900 --> 00:04:36,600
But if it's in this crazy packed format, it would be a lot more

108
00:04:36,600 --> 00:04:37,300
difficult to do.

109
00:04:37,300 --> 00:04:39,800
And we have to work out a cons of fiddly, bit things to do it.

110
00:04:40,300 --> 00:04:42,900
And so usually what you would do is you wouldn't ever do that.

111
00:04:42,900 --> 00:04:46,500
You would up, you would load it into, you know, an S SE register or

112
00:04:46,500 --> 00:04:48,700
something like this and up convert it to floating Point.

113
00:04:48,800 --> 00:04:49,300
Anyway.

114
00:04:49,300 --> 00:04:51,300
So basically, what I want to do is get used to get.

115
00:04:51,300 --> 00:04:56,000
You used to working with some floating-point colors to begin with

116
00:04:56,000 --> 00:04:58,300
because that is going to be the most efficient way always to think

117
00:04:58,300 --> 00:04:58,900
about them.

118
00:04:59,100 --> 00:05:03,300
And if we do pack them back into this crazy format, for space reasons

119
00:05:03,300 --> 00:05:04,800
at certain points in time.

120
00:05:04,800 --> 00:05:06,700
Like, when we want to store them, we may decide that it's more

121
00:05:06,700 --> 00:05:10,100
efficient to store them, this way, for example, then that's fine.

122
00:05:10,100 --> 00:05:13,300
But that should be something that we do explicitly to save space and

123
00:05:13,400 --> 00:05:16,300
explicitly for that reason, not as a general way.

124
00:05:16,300 --> 00:05:17,300
We think about colors.

125
00:05:17,400 --> 00:05:21,900
So what I want to do is pass three floating Point values here, red

126
00:05:21,900 --> 00:05:23,700
green and blue for our color.

127
00:05:23,900 --> 00:05:28,100
Now, I guess again, I'll save a lot of this, talk about it, more on

128
00:05:28,100 --> 00:05:28,900
the rendering side of things, but

129
00:05:29,000 --> 00:05:33,000
I guess I'll point out the reason that we do red green and blue.

130
00:05:33,000 --> 00:05:36,300
Obviously, you may wonder why we have that as our as our basis for

131
00:05:36,300 --> 00:05:38,100
colors, essentially.

132
00:05:38,100 --> 00:05:40,500
The reason that red green blue or what's used is because that's the

133
00:05:40,500 --> 00:05:43,200
cleanest sort of orthogonal basis.

134
00:05:43,200 --> 00:05:45,800
You can use for the human visual system.

135
00:05:45,900 --> 00:05:49,300
The human visual system is sensitive to red green and blue light.

136
00:05:49,600 --> 00:05:54,000
It doesn't really have a way of sensing other color wavelengths

137
00:05:54,000 --> 00:05:58,400
because white, like, light is basically a continuous wave length

138
00:05:58,400 --> 00:05:58,900
thing.

139
00:06:00,200 --> 00:06:02,700
You know, oscillates like light waves, right?

140
00:06:02,700 --> 00:06:04,000
We, well, you know what?

141
00:06:04,000 --> 00:06:06,000
We know about life, wait, light waves and physics?

142
00:06:06,000 --> 00:06:08,900
Anyway, light is kind of this mysterious thing that we're always kind

143
00:06:08,900 --> 00:06:13,000
of learning more about, but light essentially has a property.

144
00:06:13,000 --> 00:06:17,000
When it, you know, any given sort of photon, any given piece of light

145
00:06:17,100 --> 00:06:21,000
has a property that is its color and that is its oscillation sort of

146
00:06:21,000 --> 00:06:26,400
its frequency of oscillation that it has is actually a specific color.

147
00:06:26,400 --> 00:06:29,800
So, you know, you can have light that is actually a you

148
00:06:30,100 --> 00:06:31,700
Certain Shade of yellow, right?

149
00:06:31,800 --> 00:06:36,100
It's not a combination of red and green which is how we think about

150
00:06:36,100 --> 00:06:38,700
yellow and programming or, you know, or artists even think about

151
00:06:38,700 --> 00:06:42,000
yellow when they open up gimp, you know, I mean, we think about it, we

152
00:06:42,000 --> 00:06:44,500
go in here when we actually think about color.

153
00:06:44,800 --> 00:06:47,100
I don't even know how to use this little tool, but I assume there's

154
00:06:47,100 --> 00:06:52,700
some way for me to get a if there's like those little, you know, I'm

155
00:06:52,700 --> 00:06:56,100
talking about those little sliders that are that are around.

156
00:06:56,100 --> 00:06:58,300
Let me, let me let me use color cop because that's got them.

157
00:06:59,100 --> 00:06:59,900
So we tend to think

158
00:07:00,000 --> 00:07:03,300
About it as like this sort of thing where we've got like a red, a

159
00:07:03,300 --> 00:07:06,700
green in the blue, and the red, and the green, and the blue could

160
00:07:06,700 --> 00:07:08,300
contribute, a certain amount, right?

161
00:07:08,300 --> 00:07:09,200
That sort of thing.

162
00:07:09,800 --> 00:07:12,700
Or, you know, there's other color spaces, Hue, saturation, value, all

163
00:07:12,700 --> 00:07:13,400
this sort of stuff.

164
00:07:13,500 --> 00:07:16,600
We think about it that way, but really light isn't that way.

165
00:07:16,600 --> 00:07:20,800
Light is not a mixture of red green and blue necessarily light can

166
00:07:20,800 --> 00:07:22,900
actually be a specific color.

167
00:07:22,900 --> 00:07:27,200
If it wants to be, it can be exactly yellow or some specific yellow.

168
00:07:27,200 --> 00:07:29,600
Some Pacific Wave specific, wavelength of yellow.

169
00:07:30,200 --> 00:07:35,000
And so it's just that our eyes because they only sense have like red

170
00:07:35,000 --> 00:07:38,200
green and blue receptors that have these kind of filter patterns that

171
00:07:38,200 --> 00:07:38,800
we use.

172
00:07:39,700 --> 00:07:45,100
Because we only see, in terms of those RI is can't actually tell the

173
00:07:45,100 --> 00:07:48,600
difference between a single piece.

174
00:07:48,600 --> 00:07:51,400
A single set of light, you know, single set of photons coming in that

175
00:07:51,400 --> 00:07:56,800
all, are you actually yellow and oscillating photons that are coming

176
00:07:56,800 --> 00:07:57,800
in that are like ones.

177
00:07:57,800 --> 00:07:59,000
Red ones, green ones.

178
00:07:59,000 --> 00:07:59,900
Red ones, green ones.

179
00:08:00,000 --> 00:08:00,800
Red ones green, right?

180
00:08:00,800 --> 00:08:04,500
So we just kind of see this like integration of the light that hits

181
00:08:04,500 --> 00:08:05,200
our eyes.

182
00:08:05,500 --> 00:08:09,600
We don't we can't tell that what we're seeing is a specific wavelength

183
00:08:09,600 --> 00:08:10,100
or not.

184
00:08:10,100 --> 00:08:12,000
We wouldn't know is my point.

185
00:08:12,600 --> 00:08:15,900
So we've basically built and again, I'm not a physicist.

186
00:08:15,900 --> 00:08:17,700
So take all this explanation with a grain of salt.

187
00:08:17,700 --> 00:08:20,900
This is like the explanation for computer programmers, right?

188
00:08:20,900 --> 00:08:21,900
It's not the explanation.

189
00:08:21,900 --> 00:08:24,600
For people who study a light people who study light probably would be

190
00:08:24,600 --> 00:08:25,600
like, oh don't explain it.

191
00:08:25,600 --> 00:08:29,500
That way, you're totally wrong but for programming purposes, what's

192
00:08:29,500 --> 00:08:29,900
important?

193
00:08:30,000 --> 00:08:34,799
Stand is, we don't need at the moment or have not found any need to in

194
00:08:34,799 --> 00:08:35,500
practice.

195
00:08:36,000 --> 00:08:39,500
Actually represent light in any better way than that.

196
00:08:39,500 --> 00:08:42,799
Because since the human visual system seems to only be able to really

197
00:08:42,799 --> 00:08:48,200
distinguish red, green blue, and it sees other colors by looking at

198
00:08:48,200 --> 00:08:52,400
the combinations of the red and green receptor responses or green and

199
00:08:52,400 --> 00:08:54,200
blue, or red green and blue responses.

200
00:08:55,000 --> 00:08:59,400
We don't really have to worry too much about the fact that we don't

201
00:08:59,400 --> 00:08:59,900
actually

202
00:09:00,000 --> 00:09:04,700
Capture, you know our monitors don't actually ever produce yellow

203
00:09:04,700 --> 00:09:05,200
light.

204
00:09:05,200 --> 00:09:08,500
They just produce red and green light very close together and when

205
00:09:08,500 --> 00:09:12,100
they hit RI RI goes, oh, it was yellow right now.

206
00:09:12,100 --> 00:09:15,500
It's worth noting that if we're simulating light inside the computer,

207
00:09:15,700 --> 00:09:17,500
all of this becomes not true.

208
00:09:17,800 --> 00:09:20,800
If you are doing a photo realistic renderer, for example, and I'm not

209
00:09:20,800 --> 00:09:24,400
talking about photorealistic rendering like the kind that you do in

210
00:09:24,400 --> 00:09:25,200
real-time Graphics.

211
00:09:25,200 --> 00:09:28,800
I'm talking about like offline like the kind you might do for an

212
00:09:28,800 --> 00:09:29,800
architectural viz.

213
00:09:30,000 --> 00:09:32,400
Is like Maxwell render or something like that?

214
00:09:32,400 --> 00:09:35,000
One of those renderers that does takes a long time to generate an

215
00:09:35,000 --> 00:09:37,800
image, but does it supposed to be very accurate as to what light would

216
00:09:37,800 --> 00:09:39,300
do at that point.

217
00:09:39,300 --> 00:09:40,400
It's not true anymore.

218
00:09:40,600 --> 00:09:41,500
At that point.

219
00:09:41,700 --> 00:09:44,200
You do have to worry about the wavelength of light.

220
00:09:44,900 --> 00:09:48,000
The actual wavelength that the light should have been because there

221
00:09:48,000 --> 00:09:51,600
are Optical phenomena that depend on those wavelengths like prisms and

222
00:09:51,600 --> 00:09:53,100
stuff that split light into pieces.

223
00:09:53,100 --> 00:09:55,100
I mean, I don't really know what they all are to be honest with you,

224
00:09:55,100 --> 00:09:59,300
but when things when you have materials that you want to simulate,

225
00:10:00,200 --> 00:10:04,100
Certain materials actually respond differently in terms of the light

226
00:10:04,100 --> 00:10:07,000
that they reflect based on the wavelength of the light that's coming

227
00:10:07,000 --> 00:10:07,400
in.

228
00:10:07,600 --> 00:10:10,500
And so if all you know is that you have a certain amount of red at a

229
00:10:10,500 --> 00:10:13,400
certain amount of green coming in and you don't know whether that

230
00:10:13,400 --> 00:10:18,600
actually came from a yellow or came from, you know, a separate red and

231
00:10:18,600 --> 00:10:20,100
agreeing that we're coming in together.

232
00:10:20,500 --> 00:10:23,800
You won't be able to compute the actual color that got reflected off

233
00:10:23,800 --> 00:10:27,200
of this surface properly because you won't know which they are.

234
00:10:27,700 --> 00:10:29,700
So it's not true that in.

235
00:10:30,300 --> 00:10:30,800
Graphics.

236
00:10:30,800 --> 00:10:33,700
We can always not care about this because it depends on the level of

237
00:10:33,700 --> 00:10:36,000
realism you're trying to achieve and the circumstances.

238
00:10:36,400 --> 00:10:39,800
But it is true that when we finally get to the output layer of things

239
00:10:39,800 --> 00:10:42,700
when we're just trying to draw an image on the screen after, it's

240
00:10:42,700 --> 00:10:45,100
already been computed at that point.

241
00:10:45,100 --> 00:10:48,000
It is true that we have never really found a reason why we would have

242
00:10:48,000 --> 00:10:49,400
to produce other colors.

243
00:10:49,500 --> 00:10:51,000
Red green and blue is sufficient.

244
00:10:51,000 --> 00:10:54,400
As long as we can control the amounts of them, the I can't really tell

245
00:10:54,400 --> 00:10:58,400
the difference between this as being yellow, actual yellow and this is

246
00:10:58,400 --> 00:10:59,700
being a combination of red and green.

247
00:10:59,800 --> 00:11:01,600
Green pixels that get lit up, right?

248
00:11:02,500 --> 00:11:03,100
All right.

249
00:11:03,400 --> 00:11:07,000
So since we know that that's true, and since we know that our monitor

250
00:11:07,000 --> 00:11:11,600
has a particular brightness at maximum, that it can output what we can

251
00:11:11,600 --> 00:11:14,900
sort of think about is, you know, we can think about saying, we just

252
00:11:14,900 --> 00:11:20,400
want a range of values between the darkest red, which is like no red

253
00:11:20,400 --> 00:11:23,600
being output and the brightest red, which is the maximum read that the

254
00:11:23,600 --> 00:11:24,800
monitor can output.

255
00:11:24,800 --> 00:11:29,700
We've got a range between those and we typically pick 0 as the no red

256
00:11:29,700 --> 00:11:32,100
value and one as the red value and zero.

257
00:11:32,300 --> 00:11:33,000
No green.

258
00:11:33,000 --> 00:11:37,400
One is the Grateful green 0 is the blue one is the zero is no blue.

259
00:11:38,000 --> 00:11:41,100
One is known as like full blue, right?

260
00:11:41,600 --> 00:11:45,800
And the reason that we do that is because it makes our math with them

261
00:11:45,800 --> 00:11:47,500
be a lot easier, right?

262
00:11:47,800 --> 00:11:51,000
If we set 0 equal to none right?

263
00:11:51,000 --> 00:11:53,900
Of something and 1 equal to full

264
00:11:54,900 --> 00:11:59,000
Then the nice part about that is that if we want to get something.

265
00:12:00,500 --> 00:12:05,400
If we then want to know, sort of any kind of trafficking, what?

266
00:12:05,400 --> 00:12:09,100
The easiest way to sort of show, how this happens is basically all of

267
00:12:09,100 --> 00:12:10,200
your blending operations.

268
00:12:10,200 --> 00:12:14,700
Everything that you might want to do with numbers is easier when you

269
00:12:14,700 --> 00:12:16,700
normalize them to the range 0 to 1.

270
00:12:17,000 --> 00:12:21,800
Specifically because you can always count on them being sort of in

271
00:12:21,800 --> 00:12:24,000
that same scale range, right?

272
00:12:25,600 --> 00:12:26,400
What's a good way to?

273
00:12:26,400 --> 00:12:27,500
What's a good way to show this?

274
00:12:27,700 --> 00:12:29,900
This is ample colors is not the best way to do.

275
00:12:30,000 --> 00:12:33,400
Do it because really, I think a lot of times with colors because

276
00:12:33,400 --> 00:12:34,900
they're separating, two channels.

277
00:12:35,400 --> 00:12:39,900
It's it's not really going to be quite the same, but I'll kind of show

278
00:12:39,900 --> 00:12:42,400
you an example in an other space.

279
00:12:42,600 --> 00:12:48,600
So let's say I want to know how much of something I have a like sort

280
00:12:48,600 --> 00:12:50,300
of a percentage, right?

281
00:12:50,300 --> 00:12:55,500
So I want to, I want to know, like I've got sort of, I want to

282
00:12:55,500 --> 00:12:59,800
represent in floating Point some amount of some arbitrary thing.

283
00:13:00,000 --> 00:13:03,900
That thing has a range like we said before where, you know, there's a,

284
00:13:04,100 --> 00:13:07,400
there's a none of it and there's an all of it and then we want to

285
00:13:07,400 --> 00:13:09,200
represent everything in between, right?

286
00:13:09,200 --> 00:13:10,500
And let's say it could be anything.

287
00:13:10,500 --> 00:13:13,500
It's like it's like we've got, you know, we want to say that we've got

288
00:13:13,500 --> 00:13:16,800
a pound of almonds, right, one pound of almonds for something like

289
00:13:16,800 --> 00:13:21,200
this and we want to represent how much of that we have.

290
00:13:21,900 --> 00:13:27,100
So one interesting thing about normalizing things from 0 to 1 is that

291
00:13:27,100 --> 00:13:29,100
it can always be multiplied.

292
00:13:29,200 --> 00:13:29,800
Convenient.

293
00:13:29,900 --> 00:13:34,200
Ali into whatever the thing actually is, so if I then have basically a

294
00:13:34,200 --> 00:13:35,300
percentage, right?

295
00:13:35,300 --> 00:13:41,800
If I have a zero to one, you know, 1.0.0 to, to 1.0 of something.

296
00:13:42,100 --> 00:13:47,600
If I ever have a ratio like this, I can trivially multiply whatever

297
00:13:47,600 --> 00:13:53,200
the value is into any concept of what the maximum amount is 1 pound of

298
00:13:53,200 --> 00:13:58,600
almonds 100, you know, and one Dalmatians.

299
00:13:58,700 --> 00:13:59,800
However, many anything

300
00:14:00,000 --> 00:14:04,400
Have I can always take one of these normalized values and multiply it

301
00:14:04,400 --> 00:14:05,000
by whatever.

302
00:14:05,000 --> 00:14:07,800
The thing is and get out how many I would have.

303
00:14:07,800 --> 00:14:10,700
So for example, if I have a hundred and one Dalmatians, right?

304
00:14:11,800 --> 00:14:17,800
If I have 101, Dalmatians, and you told me that I had 0.75 was, my was

305
00:14:17,800 --> 00:14:22,300
my ratio number, right, which equivalent equivalent of 75%, right?

306
00:14:23,000 --> 00:14:27,400
If I had, if I want to know how many Dalmatians 75% of the Dalmatians

307
00:14:27,400 --> 00:14:28,300
is, right?

308
00:14:28,400 --> 00:14:30,600
I can just multiply directly by that value.

309
00:14:30,600 --> 00:14:33,500
I can say times 0.75 and there.

310
00:14:33,500 --> 00:14:38,600
I know I have 75 and three-quarter Dalmatians, right?

311
00:14:38,700 --> 00:14:40,100
Similarly, for my pound of almonds.

312
00:14:40,100 --> 00:14:41,500
If I know I have one pound of almonds.

313
00:14:41,600 --> 00:14:43,200
I can do it times 0.75.

314
00:14:43,200 --> 00:14:47,400
And now I have three quarters of you know of a pound of almonds if I

315
00:14:47,400 --> 00:14:52,300
have something like 735 viewers on Twitch, right?

316
00:14:52,300 --> 00:14:54,000
I don't know how many beers are on to it right now.

317
00:14:54,000 --> 00:14:55,600
But let's say we've got some viewers on Twitch.

318
00:14:55,600 --> 00:14:57,100
That's probably a lot for a morning stream.

319
00:14:57,300 --> 00:14:58,400
So, so maybe not that many.

320
00:14:58,400 --> 00:14:59,800
But let's say it was an evening.

321
00:15:00,000 --> 00:15:04,500
You get that many and so then we go ahead and we say, how many viewers

322
00:15:04,500 --> 00:15:05,500
are 75% of them.

323
00:15:05,500 --> 00:15:09,100
Well, it's 55 one and a quarter of fortunately, one of our viewers

324
00:15:09,100 --> 00:15:12,500
gets gets drawn and quartered apparently and we only have a quarter of

325
00:15:12,500 --> 00:15:12,700
them.

326
00:15:12,700 --> 00:15:14,400
But who does our maybe that's the split attention.

327
00:15:15,400 --> 00:15:18,900
So, basically, what what I wanted to kind of impress here, is that

328
00:15:18,900 --> 00:15:22,500
doing things as a number between zero and one, kind of has this Fringe

329
00:15:22,500 --> 00:15:24,900
benefit of, you can always do math.

330
00:15:24,900 --> 00:15:29,400
You could always up convert from zero from a 0 to 1 range into any

331
00:15:29,400 --> 00:15:29,900
other Ranger.

332
00:15:30,000 --> 00:15:34,500
That you want, but the same is not true for if you store the values in

333
00:15:34,500 --> 00:15:35,600
their actual space.

334
00:15:35,700 --> 00:15:39,500
So let's say we have 101 Dalmatians, and then I said, well, now we

335
00:15:39,500 --> 00:15:42,500
have seventy five point seven five Dalmatians, right?

336
00:15:43,200 --> 00:15:44,800
That was the number we had before.

337
00:15:45,300 --> 00:15:49,200
And now we want to know how much is that same percentage in twitch

338
00:15:49,200 --> 00:15:49,700
viewers?

339
00:15:49,900 --> 00:15:50,600
Right?

340
00:15:50,600 --> 00:15:53,900
Well, I can't just multiply seventy five point seven, five times seven

341
00:15:53,900 --> 00:15:56,500
thirty-five and get the same percentage of twitch viewers.

342
00:15:56,800 --> 00:15:57,300
First.

343
00:15:57,300 --> 00:15:58,900
I would have to do the Divide.

344
00:15:59,000 --> 00:15:59,800
I'd have to do the

345
00:16:00,000 --> 00:16:00,800
Slide back out.

346
00:16:00,800 --> 00:16:04,100
I'd have to say seventy five point seven, five divided by 101 to get

347
00:16:04,100 --> 00:16:09,400
me my 75% again and then I could multiply it by the 735 viewers on

348
00:16:09,400 --> 00:16:12,000
Twitch and then I would get back the actual number.

349
00:16:12,400 --> 00:16:13,100
Does that make sense?

350
00:16:13,300 --> 00:16:18,400
So percentage or which is 0 to 1 in representing floating point is

351
00:16:18,400 --> 00:16:23,300
kind of the universal storage for the amount of something that you

352
00:16:23,300 --> 00:16:23,700
have.

353
00:16:23,700 --> 00:16:27,900
It's a dimension free way of storing an amount.

354
00:16:28,000 --> 00:16:29,800
And so we typically use it for things like this.

355
00:16:29,900 --> 00:16:32,100
We're just saying how much of something do we have?

356
00:16:32,100 --> 00:16:35,500
Where we don't really want to talk about any actual output units.

357
00:16:38,800 --> 00:16:40,600
It's usually just the most convenient space.

358
00:16:41,400 --> 00:16:42,900
So you'll see it happening a lot.

359
00:16:43,500 --> 00:16:45,200
And so it's a good thing to be comfortable with.

360
00:16:45,400 --> 00:16:47,600
So what I want to do is I want to do exactly that.

361
00:16:47,600 --> 00:16:49,500
I want to say that we pass in an r g and B.

362
00:16:50,300 --> 00:16:53,100
And then what I want to do is reproduce this color value that we used

363
00:16:53,100 --> 00:16:54,100
to be making here.

364
00:16:54,200 --> 00:16:54,800
Right?

365
00:16:54,900 --> 00:17:00,200
I want to reproduce this color value by integrate, like sort of

366
00:17:00,500 --> 00:17:03,200
pulling out what the values of the color value should be.

367
00:17:03,200 --> 00:17:05,700
If we have this 0 this 0 to

368
00:17:06,099 --> 00:17:06,800
10 to 1.

369
00:17:07,300 --> 00:17:12,000
Now, this is again, a color value that's made to right into one of

370
00:17:12,000 --> 00:17:14,700
these abgar buffers.

371
00:17:14,700 --> 00:17:17,700
Remember we talked about ABG our way back to being the screen, right?

372
00:17:17,800 --> 00:17:22,300
So we know that our bit pattern right is going to be, you know,

373
00:17:22,300 --> 00:17:26,200
something like a a RR GG BB, right?

374
00:17:26,400 --> 00:17:29,300
So what I need to do and again, this is each one of these 8 Bits.

375
00:17:29,300 --> 00:17:31,500
That's 8, Bits to nibbles, 8 Bits, right?

376
00:17:32,400 --> 00:17:35,300
8, B, 8 B, 8, B, 8 B makes a 32-bit number.

377
00:17:36,600 --> 00:17:39,200
So, to produce one of those eight values, right?

378
00:17:39,300 --> 00:17:43,100
I know I have a number between 0 and 1 and I know the maximum that an

379
00:17:43,100 --> 00:17:46,100
8-bit value can be is 255, right?

380
00:17:46,400 --> 00:17:52,000
So if I wanted to produce an 8-bit integer value from a floating Point

381
00:17:52,000 --> 00:17:55,400
number that's between zero and one, I need to first take that and

382
00:17:55,400 --> 00:17:59,800
multiply it out so that I get 255 at maximum and 08.

383
00:18:00,000 --> 00:18:00,900
Them, right?

384
00:18:01,900 --> 00:18:03,300
So that's one way to do it.

385
00:18:03,300 --> 00:18:03,600
Right?

386
00:18:03,600 --> 00:18:06,500
I could say that I'm going to have our and I'm going to make it be

387
00:18:06,500 --> 00:18:10,300
equal to 2, you know, I'm going to multiply by 255 which means that I

388
00:18:10,300 --> 00:18:14,700
will get and, you know, and then I can can truncate that to, you know,

389
00:18:14,700 --> 00:18:15,900
change that to an integer value.

390
00:18:16,200 --> 00:18:19,000
So one way I could do it is that but if you think about it, there's

391
00:18:19,100 --> 00:18:22,700
it's a little there's a little bit of trickiness involved here.

392
00:18:22,700 --> 00:18:28,100
There's a little bit of sort of subtlety involved.

393
00:18:28,200 --> 00:18:29,900
And the reason for that is because

394
00:18:30,000 --> 00:18:33,200
Does well when we multiply by, by when we do this and multiply it, by

395
00:18:33,200 --> 00:18:33,800
that value.

396
00:18:33,900 --> 00:18:37,900
Do you remember what I said about the rounding yesterday, you know,

397
00:18:37,900 --> 00:18:40,300
when we round we talked about how the rounding Works.

398
00:18:40,400 --> 00:18:40,800
Oops.

399
00:18:40,800 --> 00:18:42,000
Got oh, Don black color.

400
00:18:42,000 --> 00:18:43,500
There you remember.

401
00:18:43,500 --> 00:18:45,600
I was talking about the number line and I was saying, all right, we've

402
00:18:45,600 --> 00:18:47,600
got this number line and it kind of goes on, right?

403
00:18:47,600 --> 00:18:51,200
And it's like 0 1, 2 3 4, and so on.

404
00:18:51,500 --> 00:18:55,700
And I was saying in, see this, this in 32, when I, when I do the cast,

405
00:18:55,700 --> 00:18:57,700
from a floating point value down to ensure value, it's going to

406
00:18:57,700 --> 00:18:58,900
truncate, right?

407
00:18:59,200 --> 00:18:59,600
So what that

408
00:19:00,000 --> 00:19:03,500
Is if the color value was like here, right?

409
00:19:04,200 --> 00:19:07,200
So let's say, I multiply this out and let's say that the value comes

410
00:19:07,200 --> 00:19:12,000
out to be, you know, 0.9 0.9, which is almost one.

411
00:19:12,000 --> 00:19:16,300
So, you know, so this value is something really low and multiplies by

412
00:19:16,300 --> 00:19:18,300
255, and, and the value.

413
00:19:18,300 --> 00:19:20,800
So, you know, our x 2 +.

414
00:19:20,800 --> 00:19:23,900
55 becomes 0.9, right?

415
00:19:23,900 --> 00:19:25,100
That's just what the result is.

416
00:19:25,600 --> 00:19:26,100
It's right.

417
00:19:26,100 --> 00:19:29,800
Like up here, but the truncation is going to move that back down to

418
00:19:29,900 --> 00:19:31,400
Zero, right.

419
00:19:32,000 --> 00:19:35,400
So what we might want to do is do the same rounding thing that we did

420
00:19:35,400 --> 00:19:39,500
before right now you could argue about what is the more accurate thing

421
00:19:39,500 --> 00:19:41,800
to do here, because it would depend on how you were producing.

422
00:19:41,800 --> 00:19:44,000
These are values to begin with what you actually wanted to have

423
00:19:44,000 --> 00:19:44,500
happen.

424
00:19:44,700 --> 00:19:47,600
But it seems like, you know, a totally reasonable thing to want to

425
00:19:47,600 --> 00:19:48,600
Round, right?

426
00:19:48,600 --> 00:19:53,500
Because we know that will never produce anything higher than 255.

427
00:19:53,700 --> 00:19:57,200
So because the are, if it was 1.0, which is the maximum value, we know

428
00:19:57,200 --> 00:19:58,700
that we would that we're going to allow.

429
00:19:58,800 --> 00:19:59,800
We know that we would never

430
00:20:00,000 --> 00:20:01,100
Anything higher than 55.

431
00:20:01,100 --> 00:20:03,800
So we don't have to worry about it wrapping up to 256 because you can

432
00:20:03,800 --> 00:20:06,100
never produce 55.5 or higher.

433
00:20:07,100 --> 00:20:10,400
So what I might do is say let's go ahead and do that same rounding

434
00:20:10,400 --> 00:20:13,700
operation because that might give us a little bit of a more accurate

435
00:20:14,100 --> 00:20:17,800
conversion, but rather than doing the truncation, right?

436
00:20:17,800 --> 00:20:18,600
Does that make sense?

437
00:20:18,600 --> 00:20:20,200
So I'm just going to do that for now.

438
00:20:20,200 --> 00:20:22,600
We again, when we get to the render, we can talk a little more about

439
00:20:22,600 --> 00:20:25,700
those values and really think about what the most accurate ways to

440
00:20:25,700 --> 00:20:26,600
deal with everything.

441
00:20:26,600 --> 00:20:28,400
I'm kind of getting close to close to my head there.

442
00:20:30,000 --> 00:20:32,300
So, what I want to do, right?

443
00:20:32,500 --> 00:20:35,900
Is I want to be able to produce one of these for each of my color

444
00:20:35,900 --> 00:20:36,500
values.

445
00:20:36,500 --> 00:20:36,800
Right?

446
00:20:36,800 --> 00:20:38,600
I want the are the G and the B.

447
00:20:38,700 --> 00:20:40,800
I want those all in here, right?

448
00:20:41,400 --> 00:20:41,900
And oops.

449
00:20:45,100 --> 00:20:48,100
And I want, when I have the are the G in the be in there, I'm going to

450
00:20:48,100 --> 00:20:51,600
multiply them each app to basically get a number between 55 and 00:25.

451
00:20:52,700 --> 00:20:54,400
And that's going to now be an integer value.

452
00:20:54,800 --> 00:20:57,100
And so now, all I have to do is, do the bit packing again, to make

453
00:20:57,100 --> 00:20:59,900
sure that they each end up in the right place in.

454
00:21:00,000 --> 00:21:03,400
Now, we know that our was 24 bits up right on the bit pattern.

455
00:21:03,500 --> 00:21:04,800
So, we know that that is, oops.

456
00:21:04,800 --> 00:21:05,100
Sorry.

457
00:21:05,400 --> 00:21:08,100
We know that it's from bit 2024, down to 16.

458
00:21:08,100 --> 00:21:11,600
So we've got to shift it up 16 so that it starts a bit, 16, 17, 18,

459
00:21:11,600 --> 00:21:15,600
19, 20, 21, 22, 23 24, write the 8 Bits starts there.

460
00:21:16,200 --> 00:21:19,900
The green value was right below that, so that's eight bits up.

461
00:21:20,100 --> 00:21:23,000
And the blue value was at the bottom, right?

462
00:21:23,000 --> 00:21:24,100
So that's 0 B up.

463
00:21:24,100 --> 00:21:26,100
Now, we don't actually have to shift by zero, but sometimes it's kind

464
00:21:26,100 --> 00:21:27,400
of nice to show that.

465
00:21:27,400 --> 00:21:29,600
So you can kind of just see it cleanly where each thing is going to

466
00:21:29,600 --> 00:21:29,800
go.

467
00:21:30,000 --> 00:21:30,100
Right.

468
00:21:30,100 --> 00:21:31,200
It's kind of a nice thing to line up.

469
00:21:31,200 --> 00:21:34,900
And then if we or those together using our bitwise or write, that will

470
00:21:34,900 --> 00:21:36,900
basically combine each set of bits.

471
00:21:36,900 --> 00:21:37,400
Right?

472
00:21:37,400 --> 00:21:38,400
So, we've got a set of bits here.

473
00:21:38,400 --> 00:21:39,000
The set of bits here.

474
00:21:39,000 --> 00:21:41,300
That said, if it's here at, they'll each going to get up.

475
00:21:41,300 --> 00:21:43,800
Now, of course, I lost my little cast in there.

476
00:21:43,800 --> 00:21:45,300
My cast actually needs to be.

477
00:21:45,500 --> 00:21:46,000
Oops.

478
00:21:46,100 --> 00:21:47,200
Oh, I don't need the cast anymore.

479
00:21:47,300 --> 00:21:51,500
Duh, the cast actually taken care of for of it right here, right?

480
00:21:52,100 --> 00:21:53,300
So, that's actually totally fine.

481
00:21:53,400 --> 00:21:53,600
Now.

482
00:21:53,600 --> 00:21:57,600
I didn't want a signed value here, but I think that's actually fine

483
00:21:57,600 --> 00:21:58,600
for it to be signed.

484
00:21:58,900 --> 00:21:59,800
So, but you know what?

485
00:21:59,800 --> 00:21:59,900
I

486
00:22:00,000 --> 00:22:00,800
Actually do this.

487
00:22:00,900 --> 00:22:04,200
I could I could actually make one for signed in one for unsigned for

488
00:22:04,200 --> 00:22:07,400
the moment just to be explicit because sometimes, you know, later on,

489
00:22:07,400 --> 00:22:08,100
maybe we care.

490
00:22:08,100 --> 00:22:08,600
Who knows.

491
00:22:08,900 --> 00:22:09,500
So, there we go.

492
00:22:11,400 --> 00:22:11,900
See here.

493
00:22:12,200 --> 00:22:14,900
And so now we should be able to specify our color values in a way.

494
00:22:14,900 --> 00:22:16,600
That's a little more sort of.

495
00:22:16,900 --> 00:22:19,400
It doesn't have that weird 0 to 255 thing in it.

496
00:22:19,900 --> 00:22:24,100
So now, instead of that lets actually pass it, red green blue.

497
00:22:24,100 --> 00:22:27,700
That's just a little more convenient and easier to understand and

498
00:22:27,700 --> 00:22:28,900
let's see to reproduce this.

499
00:22:29,900 --> 00:22:32,200
We have, let's see.

500
00:22:32,700 --> 00:22:33,800
Green blue.

501
00:22:33,900 --> 00:22:34,500
There we go.

502
00:22:34,900 --> 00:22:38,500
Okay, rectangle and let me see.

503
00:22:38,500 --> 00:22:41,200
There's our rectangle up in the corner as we expected in the colors

504
00:22:41,200 --> 00:22:41,900
are correct.

505
00:22:41,900 --> 00:22:45,300
And so now, it's kind of nice too because I can sort of

506
00:22:47,000 --> 00:22:51,200
I can sort of see as we go, you know, it's much.

507
00:22:52,900 --> 00:22:53,200
We go.

508
00:22:53,200 --> 00:22:54,000
Does that work now?

509
00:22:54,500 --> 00:22:56,000
Yeah, that way I can flip back and forth.

510
00:22:56,500 --> 00:22:59,600
So basically, if we go in here, now, you can see as I go if I want it

511
00:22:59,600 --> 00:23:03,200
half-bright there, I can do that and

512
00:23:04,900 --> 00:23:05,600
What happened?

513
00:23:05,900 --> 00:23:07,700
Oh, I didn't recompile ice creaking pal.

514
00:23:07,900 --> 00:23:08,800
If I want half right there.

515
00:23:08,800 --> 00:23:09,400
I can do that.

516
00:23:09,400 --> 00:23:09,700
Right?

517
00:23:09,700 --> 00:23:11,800
I can change it back up to full bright.

518
00:23:12,000 --> 00:23:13,800
Oops, change back up to full bright.

519
00:23:14,000 --> 00:23:17,300
Let's say, I want to make this more of a yellow color, right?

520
00:23:17,300 --> 00:23:21,300
I can do that if I want to make it pure red, right?

521
00:23:21,300 --> 00:23:24,100
And so it's pretty easy to see like how these color values mix

522
00:23:24,100 --> 00:23:26,100
together and they're just between 0 and 1.

523
00:23:26,100 --> 00:23:29,500
So you don't have the 255, the word 255 nonsense anymore going on.

524
00:23:30,000 --> 00:23:30,800
So that's it.

525
00:23:30,900 --> 00:23:32,900
That's just all I wanted to do there, right?

526
00:23:33,900 --> 00:23:38,800
So already you can kind of see and I don't know if now is necessarily

527
00:23:38,800 --> 00:23:39,700
the right time to do it.

528
00:23:39,700 --> 00:23:43,100
But already, you can start to see to there's some there's some

529
00:23:43,100 --> 00:23:44,500
structures that are starting to emerge.

530
00:23:44,500 --> 00:23:48,800
Here like chances are, we're probably not often going to pass a red

531
00:23:48,800 --> 00:23:49,900
value by itself.

532
00:23:49,900 --> 00:23:52,600
It's probably going to come with a green in the blue, right?

533
00:23:52,800 --> 00:23:55,100
And so, you can start to see already game art.

534
00:23:55,100 --> 00:23:55,400
Again.

535
00:23:55,400 --> 00:23:57,800
Game architecture wise, just low level stuff.

536
00:23:58,300 --> 00:23:59,900
You can sort of start to see what we're

537
00:24:00,000 --> 00:24:01,800
Probably want to do here, right?

538
00:24:01,800 --> 00:24:06,200
We're probably going to want to make a struct that will capture the

539
00:24:06,300 --> 00:24:09,400
the concept of a color so that we don't have to keep passing.

540
00:24:09,400 --> 00:24:10,500
Our are jeez and bees around.

541
00:24:10,500 --> 00:24:11,700
I'm not going to quite do it yet.

542
00:24:11,700 --> 00:24:14,100
But you can because you know, we only have even one function that uses

543
00:24:14,100 --> 00:24:14,600
it.

544
00:24:14,600 --> 00:24:16,700
But think about that, just keep that in the back of your mind.

545
00:24:16,700 --> 00:24:19,100
These are the sorts of things that you should start to be paying

546
00:24:19,100 --> 00:24:20,500
attention to, right?

547
00:24:20,800 --> 00:24:23,700
You should start kind of having this inkling in the back of your head,

548
00:24:23,700 --> 00:24:26,200
when you see that you're like, okay, there's these operations that are

549
00:24:26,200 --> 00:24:27,400
happening on a color.

550
00:24:27,700 --> 00:24:29,800
There's a way that represents the minuend 32

551
00:24:30,000 --> 00:24:33,100
To and then there's this real to this realtor to version.

552
00:24:33,800 --> 00:24:35,500
I'm passing a bunch of things together.

553
00:24:35,500 --> 00:24:37,900
There's just a lot of things you can start to see if you're paying

554
00:24:37,900 --> 00:24:39,100
attention that.

555
00:24:39,100 --> 00:24:41,400
Maybe that way a rectangle might be another one.

556
00:24:41,400 --> 00:24:43,500
You can see that we're doing operations on rectangles here.

557
00:24:43,500 --> 00:24:47,100
So there's just there's things that you can start to think about in

558
00:24:47,100 --> 00:24:49,300
terms of what might be useful for.

559
00:24:49,300 --> 00:24:51,800
The low level architecture stuff that we might want to start doing

560
00:24:51,800 --> 00:24:54,300
their starting to emerge already and we haven't even really done

561
00:24:54,300 --> 00:24:55,400
anything yet, right.

562
00:24:56,700 --> 00:24:57,300
All right.

563
00:24:57,800 --> 00:25:04,300
So again, let's make the most stupid basic tilemap, that we might want

564
00:25:04,300 --> 00:25:04,900
to make.

565
00:25:05,000 --> 00:25:08,700
Let's just make something extremely simple for a tile map that we can

566
00:25:08,700 --> 00:25:09,600
draw on the screen.

567
00:25:10,100 --> 00:25:14,100
So what I'm going to do here is really the most basic simple thing

568
00:25:14,400 --> 00:25:15,600
that you could possibly imagine.

569
00:25:15,800 --> 00:25:18,400
I'm just going to say alright, I'm just going to have some 32-bit

570
00:25:18,400 --> 00:25:22,600
value and I'm going to make you know, a tile map of them and I'm going

571
00:25:22,600 --> 00:25:26,300
to say how big do we want our town map to be across and down?

572
00:25:26,600 --> 00:25:31,600
You know, and I don't know, I think I thought about this a bunch, if I

573
00:25:31,600 --> 00:25:38,000
remember correctly earlier on and I'm not sure, I'm not sure what the

574
00:25:38,000 --> 00:25:38,900
value was.

575
00:25:39,100 --> 00:25:43,300
I'll look it up because I thought about this, I think 16 across was

576
00:25:43,300 --> 00:25:48,100
was what I thought that the the right value was for the number of

577
00:25:48,500 --> 00:25:49,700
tiles going this way.

578
00:25:49,800 --> 00:25:52,000
And I think it might have been nine down.

579
00:25:52,200 --> 00:25:55,500
It was, I think it was 16 by 9, but look roughly the same as an HD

580
00:25:55,900 --> 00:25:56,300
aspect.

581
00:25:56,400 --> 00:25:59,600
Splay ratio 16 tiles across by nine up and down.

582
00:25:59,700 --> 00:26:01,200
And I don't know that may be a little too big.

583
00:26:01,200 --> 00:26:02,500
I I work this out.

584
00:26:02,500 --> 00:26:05,200
I was kind of looking at past games and what their town map sizes was

585
00:26:05,400 --> 00:26:07,500
but we can adjust this in the future, but I'm just going to say all

586
00:26:07,500 --> 00:26:07,700
right.

587
00:26:07,700 --> 00:26:08,800
I'm going to make a tile map.

588
00:26:08,900 --> 00:26:10,500
So basically all I'm doing is making an array.

589
00:26:10,900 --> 00:26:11,900
That's 16 by 9.

590
00:26:11,900 --> 00:26:15,600
I'm going to I'm going to reverse them here because this is the if you

591
00:26:15,600 --> 00:26:17,200
look at the way, see does it syntax.

592
00:26:17,500 --> 00:26:20,500
This is actually the one that gets packed together.

593
00:26:20,500 --> 00:26:23,800
So these go sequentially, the 16 go sequentially and the 9.

594
00:26:23,800 --> 00:26:26,200
So it's like rose and so I wanted the the

595
00:26:26,500 --> 00:26:27,700
Just kind of go sequentially there.

596
00:26:28,500 --> 00:26:31,800
So, what I'm going to do is, I'm actually going to Define my tile map,

597
00:26:31,800 --> 00:26:38,600
right here as like, a little, you know, as like a little, I guess hand

598
00:26:38,600 --> 00:26:39,400
inputted thing.

599
00:26:39,400 --> 00:26:39,900
Right?

600
00:26:40,600 --> 00:26:42,300
One, two, three, four.

601
00:26:42,600 --> 00:26:43,400
Why would I do that?

602
00:26:44,600 --> 00:26:49,900
Three, four, five, six, seven, eight, nine, ten, eleven, twelve see do

603
00:26:49,900 --> 00:26:50,600
it this way.

604
00:26:50,700 --> 00:26:51,400
Make it look clear.

605
00:26:52,500 --> 00:26:54,100
Twelve, thirteen.

606
00:26:54,100 --> 00:26:56,200
Fourteen, fifteen sixteen, right?

607
00:26:56,300 --> 00:26:58,200
So, here is a tile map.

608
00:27:00,000 --> 00:27:05,800
A one, two, three, four, five, six, seven, eight, nine, we go.

609
00:27:06,200 --> 00:27:06,600
So

610
00:27:08,700 --> 00:27:09,300
there we go.

611
00:27:09,600 --> 00:27:12,500
So this is our little tile map here, which I'm just going to hand

612
00:27:12,500 --> 00:27:12,800
input.

613
00:27:12,800 --> 00:27:13,300
Right?

614
00:27:13,400 --> 00:27:16,700
And I'm going to go ahead and make something incredibly simple in the

615
00:27:16,700 --> 00:27:17,200
tile map.

616
00:27:17,200 --> 00:27:17,700
I don't know.

617
00:27:17,700 --> 00:27:22,300
I'm just going to do something that we would be able to see if it was

618
00:27:22,300 --> 00:27:23,400
working properly.

619
00:27:23,400 --> 00:27:24,200
Kind of a thing.

620
00:27:25,300 --> 00:27:25,900
There we go.

621
00:27:26,300 --> 00:27:29,700
Something like this where I'm just going to hand in put some numbers

622
00:27:30,200 --> 00:27:33,800
that we should be able to then verify are sort of coming out.

623
00:27:33,800 --> 00:27:38,200
Correct when we look at the tile map at the end of the day, okay.

624
00:27:39,100 --> 00:27:40,200
Right, very, very simple.

625
00:27:40,300 --> 00:27:41,500
So you can kind of see what I did there.

626
00:27:41,500 --> 00:27:43,800
I basically just spammed in someone's into our town map.

627
00:27:43,900 --> 00:27:46,800
And now what I'd like to do is I'd like to draw the tile map to the

628
00:27:46,800 --> 00:27:48,200
screen as the background.

629
00:27:48,200 --> 00:27:49,500
I'm going to clear it first.

630
00:27:49,500 --> 00:27:53,400
I'm going to clear the screen just to that purple as a purely, debug

631
00:27:53,500 --> 00:27:56,200
operation so that I can verify right.

632
00:28:01,600 --> 00:28:03,900
I can verify what's being written and I can see if there's purple

633
00:28:03,900 --> 00:28:04,600
showing through.

634
00:28:05,400 --> 00:28:08,200
I'm then going to iterate over my entire town map.

635
00:28:08,200 --> 00:28:11,700
So I'm going to do the row of the tile map, right?

636
00:28:11,800 --> 00:28:16,300
I'm going to do the row and I've got nine of those and then I'm going

637
00:28:16,300 --> 00:28:20,400
to do the columns and I've got 16 of those, right?

638
00:28:20,400 --> 00:28:23,100
And again, this is not, this is just purely.

639
00:28:23,100 --> 00:28:25,300
Like I said before, just exploratory code.

640
00:28:25,300 --> 00:28:29,500
I'm typing whatever I want in here and when you are in this mode, and

641
00:28:29,500 --> 00:28:31,200
this is just really important.

642
00:28:31,400 --> 00:28:35,400
And remember when you're in this mode, anything goes, do not think

643
00:28:35,400 --> 00:28:36,400
about code quality.

644
00:28:36,400 --> 00:28:39,900
Do not, think about errors, do not, think about performance, don't

645
00:28:39,900 --> 00:28:44,600
think about anything because the point of this code is to see what you

646
00:28:44,600 --> 00:28:45,500
would type in.

647
00:28:45,500 --> 00:28:49,100
If you literally just had to do the thing fast.

648
00:28:49,100 --> 00:28:53,500
You just want to draw tile map on the screen, so don't think about

649
00:28:53,500 --> 00:28:58,600
anything other than what is the easiest way you can think of to put

650
00:28:58,600 --> 00:29:01,200
that tile map up on the screen in a way that you can.

651
00:29:01,300 --> 00:29:02,400
An view, right?

652
00:29:02,500 --> 00:29:04,600
That is the only thing that you should be thinking about.

653
00:29:05,600 --> 00:29:11,600
You should never, ever, ever give even a moment's thought to any of

654
00:29:11,600 --> 00:29:14,500
the things that you see, in those books that are like writing clean

655
00:29:14,500 --> 00:29:16,500
code and like how effective C++.

656
00:29:16,500 --> 00:29:20,300
Also, all that stuff should be completely shut off in your brain

657
00:29:20,900 --> 00:29:26,500
because what this code is for is for us to see what the CPU has to do,

658
00:29:26,700 --> 00:29:28,700
in order to do the thing that we want.

659
00:29:28,700 --> 00:29:31,200
It's just to get it some notion of

660
00:29:31,400 --> 00:29:32,500
What the code has to do?

661
00:29:32,900 --> 00:29:36,300
And then we're just going to look at that after and figure out what

662
00:29:36,300 --> 00:29:38,400
the clean way to make it is, right?

663
00:29:38,600 --> 00:29:41,400
So you should be thinking about absolutely nothing at this point.

664
00:29:41,500 --> 00:29:42,700
Other than exactly that.

665
00:29:42,700 --> 00:29:45,600
Exactly, the how to get the thing up on the screen.

666
00:29:45,600 --> 00:29:46,200
That's it.

667
00:29:46,300 --> 00:29:49,500
So brain should be exclusively one track in that mode.

668
00:29:49,600 --> 00:29:50,300
That's all.

669
00:29:50,900 --> 00:29:51,300
Okay.

670
00:29:52,300 --> 00:29:54,600
So we have our draw rectangle function.

671
00:29:54,600 --> 00:29:58,600
So what we need to know now and this is like our this is our tile

672
00:29:58,600 --> 00:29:59,800
value our tile idea.

673
00:30:00,000 --> 00:30:01,100
If you want to call it, I don't know.

674
00:30:01,100 --> 00:30:01,600
We're going to call it.

675
00:30:01,600 --> 00:30:02,700
But there we go.

676
00:30:03,800 --> 00:30:05,000
So we have a tile ID.

677
00:30:05,400 --> 00:30:08,600
And what I'd like to do is say, well, alright, we essentially want the

678
00:30:08,600 --> 00:30:11,300
color to be based on this tile idea because we only have the, we don't

679
00:30:11,300 --> 00:30:13,100
have an ability to draw any Sprites or anything yet.

680
00:30:13,100 --> 00:30:14,200
We haven't written the renderer.

681
00:30:14,500 --> 00:30:16,600
So basically we only have the ability to draw color.

682
00:30:16,600 --> 00:30:19,200
So what I'll do is I'll draw a great gray scale colors and I'll have

683
00:30:19,200 --> 00:30:20,100
two of them, right?

684
00:30:20,100 --> 00:30:23,500
So what we'll assume is will assume that if the value is 0 in the tile

685
00:30:23,500 --> 00:30:24,400
map, right?

686
00:30:24,500 --> 00:30:25,900
We'll have a gray value of.

687
00:30:25,900 --> 00:30:31,500
Let's say .5 and if the tile ID actually is equal to 1, let's say then

688
00:30:31,500 --> 00:30:33,100
I'm going to make it be white.

689
00:30:33,200 --> 00:30:33,500
So we'll have

690
00:30:33,600 --> 00:30:37,300
Gray, and white things in our town map makes sense seems reasonable.

691
00:30:37,500 --> 00:30:38,000
All right.

692
00:30:38,000 --> 00:30:40,500
So then, when I draw the rectangle, I'm going to need some things.

693
00:30:40,500 --> 00:30:42,300
I'm going to need them in X, right.

694
00:30:42,400 --> 00:30:43,800
I'm going to need them in, why?

695
00:30:43,800 --> 00:30:47,300
I'm going to need the, the max X and the max y.

696
00:30:47,500 --> 00:30:48,800
So, basically, I know whatever.

697
00:30:48,800 --> 00:30:52,800
My Min is the tile width and the tile height, whatever.

698
00:30:52,800 --> 00:30:54,500
We decide that those are right.

699
00:30:54,500 --> 00:30:55,600
However, big those are

700
00:30:56,800 --> 00:31:00,200
I know that basically whatever the max extra my rectangle is is just

701
00:31:00,300 --> 00:31:01,900
the Min plus the tile.

702
00:31:01,900 --> 00:31:06,800
However, big the tile should be across and the same is true of the of

703
00:31:06,800 --> 00:31:10,100
the, of the vertical extent of the of the height, right?

704
00:31:10,600 --> 00:31:15,500
So main X and Y, Max x max, why red green blue?

705
00:31:15,500 --> 00:31:17,900
And of course, we're only doing gray so I can just pass the same value

706
00:31:17,900 --> 00:31:18,600
for each of them.

707
00:31:18,700 --> 00:31:19,200
There we go.

708
00:31:19,700 --> 00:31:21,200
So, the only question is, what's our main X.

709
00:31:21,600 --> 00:31:25,300
Well, we know, we've got a row value and a column value, right?

710
00:31:25,600 --> 00:31:26,400
And so for every,

711
00:31:26,600 --> 00:31:27,200
Row.

712
00:31:27,200 --> 00:31:30,300
We want to go like each time that row increments.

713
00:31:30,300 --> 00:31:32,400
We're going to go down by 1 tile height.

714
00:31:32,400 --> 00:31:32,600
Right.

715
00:31:32,600 --> 00:31:34,300
Which we already know is going to be a value.

716
00:31:34,600 --> 00:31:37,000
So we've got the row times the tile height, right?

717
00:31:37,000 --> 00:31:38,100
And row is going to an integer.

718
00:31:38,100 --> 00:31:39,800
Whereas all the rest of the stuff is float.

719
00:31:39,800 --> 00:31:43,400
So we need to convert that up to a floating point value again.

720
00:31:43,600 --> 00:31:44,200
See what I think.

721
00:31:44,200 --> 00:31:46,400
We'll just do that for you, but I like to make it explicit.

722
00:31:46,400 --> 00:31:48,600
So you everyone can see that it's happening in the code.

723
00:31:49,100 --> 00:31:49,600
So I do that.

724
00:31:49,600 --> 00:31:50,000
Usually,

725
00:31:51,400 --> 00:31:52,600
And so also, so the I know.

726
00:31:52,600 --> 00:31:53,900
So there's not weird mistakes.

727
00:31:53,900 --> 00:31:56,300
I find that if I ever do everything explicitly, I don't get caught by

728
00:31:56,300 --> 00:31:59,700
some weird see thing where it's like decided because of some rule in

729
00:31:59,700 --> 00:32:02,200
the spec not to do something that I would have thought that it should

730
00:32:02,200 --> 00:32:02,500
do.

731
00:32:03,300 --> 00:32:06,600
So basically, this is every column we're going to go up by a certain

732
00:32:06,600 --> 00:32:08,900
amount and every row we know where I'm sorry, every row and we're

733
00:32:08,900 --> 00:32:09,900
going to go down by certain Mountain.

734
00:32:09,900 --> 00:32:10,300
Every column.

735
00:32:10,300 --> 00:32:12,100
We're going to go over by a certain amount and that's fine.

736
00:32:12,900 --> 00:32:15,300
And so what we might want to do, though is to start an offset.

737
00:32:15,300 --> 00:32:17,800
So we might want to make these start a little bit further in.

738
00:32:18,200 --> 00:32:20,800
So let's say we can say upper

739
00:32:21,000 --> 00:32:26,600
Left X and upper left.

740
00:32:26,600 --> 00:32:27,100
Why?

741
00:32:28,500 --> 00:32:30,600
Alright, so there we go.

742
00:32:30,800 --> 00:32:33,200
So now what we need to do is actually find those values.

743
00:32:33,800 --> 00:32:36,100
Those are just constant values upper left X.

744
00:32:36,100 --> 00:32:37,700
Let's say it starts at 10, right?

745
00:32:37,700 --> 00:32:41,300
So they'll be a little border around the thing and 10 and then the

746
00:32:41,300 --> 00:32:43,100
tile with, I don't know what the tile with should be.

747
00:32:43,100 --> 00:32:44,100
We can certainly adjust it.

748
00:32:44,100 --> 00:32:50,100
Let's say it's 100 by 100 tile height that and we can recompile.

749
00:32:50,700 --> 00:32:52,300
And hey, there's our tile map on the screen.

750
00:32:52,300 --> 00:32:55,400
So that's pretty good though, and I still got that other rectangle,

751
00:32:55,400 --> 00:32:57,100
which I don't need any more that can go away.

752
00:32:57,700 --> 00:32:58,200
So now we've

753
00:32:58,300 --> 00:32:59,900
got our town map on the screen and of

754
00:33:00,000 --> 00:33:03,200
We don't even have to do any math because that's the Miracle again of

755
00:33:03,200 --> 00:33:03,900
hot loading.

756
00:33:04,700 --> 00:33:05,500
The dll.

757
00:33:05,500 --> 00:33:07,000
Everything gets trivial.

758
00:33:07,100 --> 00:33:09,800
We can just do this and there's our tile map is smaller.

759
00:33:10,000 --> 00:33:12,300
All right, let's let's make it a little larger.

760
00:33:12,300 --> 00:33:13,700
Okay, that's good.

761
00:33:13,800 --> 00:33:16,100
Maybe they're, that's good.

762
00:33:16,100 --> 00:33:20,100
Let's say it should be 55 wide, something like that.

763
00:33:22,300 --> 00:33:24,100
Just a little bigger 60.

764
00:33:25,700 --> 00:33:26,200
60.

765
00:33:27,200 --> 00:33:28,300
That's a little too big.

766
00:33:28,900 --> 00:33:31,800
So anyway, although you know, what, if I actually just started it in

767
00:33:31,800 --> 00:33:34,000
the corner and didn't have that offset, right?

768
00:33:34,100 --> 00:33:35,900
You know, that's what you were thinking, right?

769
00:33:36,300 --> 00:33:36,900
I think that's.

770
00:33:36,900 --> 00:33:37,900
I think that's our winner.

771
00:33:38,800 --> 00:33:39,700
Yeah.

772
00:33:40,100 --> 00:33:40,700
Alright.

773
00:33:41,400 --> 00:33:42,100
So there you go.

774
00:33:43,200 --> 00:33:44,000
There's our tile map.

775
00:33:44,000 --> 00:33:44,700
It's on the screen.

776
00:33:44,700 --> 00:33:46,100
And of course, now we can create.

777
00:33:46,100 --> 00:33:48,500
I mean, you can create a level if you wanted to, right?

778
00:33:48,600 --> 00:33:53,200
I could say that this is a standard dungeon map, which would look

779
00:33:53,200 --> 00:33:54,500
something like this.

780
00:33:54,900 --> 00:33:55,400
Let's go.

781
00:33:55,900 --> 00:33:57,000
Insert mode there.

782
00:33:57,400 --> 00:33:58,600
If I want to make a dungeon map.

783
00:33:58,600 --> 00:33:59,800
Now I'm making a dungeon map.

784
00:33:59,800 --> 00:34:00,700
That's always fun.

785
00:34:01,300 --> 00:34:02,600
We all know, right?

786
00:34:02,600 --> 00:34:05,700
Because Legend of Zelda, set the set the bar and now you see it all

787
00:34:05,700 --> 00:34:06,100
the time.

788
00:34:06,100 --> 00:34:08,600
Like Binding of Isaac, right, looks exactly like this as well.

789
00:34:08,900 --> 00:34:12,000
Basically, you've got a thing around, you got walls around the edge,

790
00:34:12,000 --> 00:34:14,900
but then you have like a door right in the middle.

791
00:34:16,600 --> 00:34:20,300
And that might be a reason not to use 16, because we can't we don't

792
00:34:20,300 --> 00:34:21,000
have a middle value.

793
00:34:21,000 --> 00:34:23,400
So we may want to use 17, you know what I'm saying?

794
00:34:24,400 --> 00:34:25,300
So there's our doors.

795
00:34:25,500 --> 00:34:27,600
We should probably make sure the doors aren't blocked.

796
00:34:27,800 --> 00:34:28,300
Right.

797
00:34:28,300 --> 00:34:29,800
Let's make sure those doors aren't blocked.

798
00:34:29,800 --> 00:34:31,000
Don't block the doors people to player.

799
00:34:31,000 --> 00:34:33,000
Can't get in or out that point.

800
00:34:33,100 --> 00:34:33,400
There you go.

801
00:34:33,400 --> 00:34:35,900
So now our player, you know, could walk in here, you could walk

802
00:34:35,900 --> 00:34:38,600
around, you could walk out that way, whatever you want to do, but

803
00:34:38,600 --> 00:34:39,199
that's not centered.

804
00:34:39,199 --> 00:34:41,500
So that seems like a pretty obvious reason not to use that.

805
00:34:41,500 --> 00:34:44,500
So I'm going to go ahead and say that 17 is the magic value, right?

806
00:34:45,199 --> 00:34:46,400
I don't see why not.

807
00:34:46,699 --> 00:34:49,600
So basically there's there's this extra row over here, right?

808
00:34:49,600 --> 00:34:50,400
If that makes sense.

809
00:34:50,900 --> 00:34:52,199
That we're going to push out there.

810
00:34:52,500 --> 00:34:53,800
Let's go ahead and do that.

811
00:34:53,900 --> 00:34:55,300
Oops, too much space.

812
00:34:56,300 --> 00:34:56,800
White space.

813
00:34:56,800 --> 00:34:58,300
So let's go ahead and push that out.

814
00:34:58,300 --> 00:35:01,200
Doodoo pushing it out.

815
00:35:03,400 --> 00:35:07,600
And then we can just say all right, that's that's going to be that so

816
00:35:07,700 --> 00:35:12,800
if that's the case then we also have to do we have to figure out our

817
00:35:12,800 --> 00:35:14,300
offsets are going to be a little different here.

818
00:35:14,400 --> 00:35:19,100
So that means that you know, the the upper left is going to have to be

819
00:35:19,100 --> 00:35:23,100
offset by a little bit right like that so that essentially you don't

820
00:35:23,100 --> 00:35:25,500
quite see the whole tile because wouldn't fit.

821
00:35:25,700 --> 00:35:26,000
Only.

822
00:35:26,400 --> 00:35:30,700
And the same is probably, you know, you probably want to do something

823
00:35:30,700 --> 00:35:31,200
similar.

824
00:35:31,200 --> 00:35:33,800
I don't know if we could, so let's say we did that.

825
00:35:33,800 --> 00:35:36,800
So you kind of only see half of that border tile.

826
00:35:37,200 --> 00:35:40,800
Then what we would want to do is we want to make it 10 wide, but that

827
00:35:40,800 --> 00:35:44,800
would make it so that we couldn't Center our other guy.

828
00:35:45,200 --> 00:35:46,300
Mmm-hmm.

829
00:35:48,100 --> 00:35:49,300
You see my dilemma.

830
00:35:49,700 --> 00:35:50,000
I don't know.

831
00:35:50,000 --> 00:35:51,300
Do you see my dilemma?

832
00:35:51,700 --> 00:35:53,700
I'm not sure if you see my dilemma or not.

833
00:35:54,100 --> 00:35:55,500
I feel like we want the thing.

834
00:35:55,600 --> 00:35:59,700
the things to be square, but I'm not sure how I'm not sure how I

835
00:36:00,000 --> 00:36:01,600
About, I mean, do I just do this?

836
00:36:02,000 --> 00:36:06,200
So that that basically this style is always shown as a half tile.

837
00:36:07,700 --> 00:36:10,100
I don't know something to think about, right?

838
00:36:10,100 --> 00:36:11,700
I'm already thinking about that.

839
00:36:11,900 --> 00:36:15,000
And again, like I said, this is why we do all this exploration because

840
00:36:15,000 --> 00:36:17,300
I want to think about all these things up front, before I make

841
00:36:17,300 --> 00:36:20,000
decisions about, like what our town map sizes and all that sort of

842
00:36:20,000 --> 00:36:21,200
thing, right?

843
00:36:25,300 --> 00:36:25,700
Okay.

844
00:36:26,900 --> 00:36:28,700
So that's our tile map.

845
00:36:29,300 --> 00:36:32,100
I'm not going to think too hard about it at the moment.

846
00:36:32,100 --> 00:36:34,100
But like I said, it's already putting thoughts in my head.

847
00:36:34,100 --> 00:36:36,100
Like, I got to start thinking about how I want to deal with that

848
00:36:36,100 --> 00:36:36,300
stuff.

849
00:36:36,300 --> 00:36:40,800
So I might go study old games, that sort of thing to think about what

850
00:36:40,800 --> 00:36:43,900
the the dimensions of this tile map should be.

851
00:36:44,000 --> 00:36:47,000
Now, one of the things that's interesting is it didn't used to be 16

852
00:36:47,000 --> 00:36:51,100
by 9, like Zelda, for example, was four by three aspect ratio, right?

853
00:36:51,600 --> 00:36:54,800
Who's on the old TVs before HD went wide screen.

854
00:36:54,900 --> 00:36:55,700
And so I don't know.

855
00:36:55,700 --> 00:36:56,600
That may be a

856
00:36:56,700 --> 00:37:00,200
So the fact that we're 16 by 9 now that things get a little bit

857
00:37:00,200 --> 00:37:03,400
different and we have to think about how we want to handle that.

858
00:37:03,400 --> 00:37:04,000
Exactly.

859
00:37:04,400 --> 00:37:05,200
It's something to think about.

860
00:37:05,200 --> 00:37:07,600
And so I would encourage everyone to put their thinking caps on there.

861
00:37:07,600 --> 00:37:07,700
Now.

862
00:37:07,700 --> 00:37:13,300
The other thing that we could do, right is we could say that we have

863
00:37:13,300 --> 00:37:15,200
some kind of a gutter on the screen.

864
00:37:15,200 --> 00:37:15,800
I don't know.

865
00:37:15,800 --> 00:37:17,500
There's a lot of things we could think about there.

866
00:37:17,600 --> 00:37:20,600
And so, I would encourage you all to think about them, maybe post your

867
00:37:20,600 --> 00:37:25,500
opinions because this is essentially designed question some level and

868
00:37:25,500 --> 00:37:26,500
maybe think about those.

869
00:37:26,700 --> 00:37:30,000
And what you what you think about them, essentially, because I'll be

870
00:37:30,000 --> 00:37:33,000
thinking about them as well, and maybe that's a good exercise to do.

871
00:37:34,200 --> 00:37:34,700
All right.

872
00:37:34,900 --> 00:37:40,500
So given that I've got this situation where I actually have a Time app

873
00:37:40,500 --> 00:37:40,800
on the screen.

874
00:37:40,800 --> 00:37:43,800
It seems like the next logical thing to do is to make a little player

875
00:37:43,800 --> 00:37:47,700
that can move around on them at a very minimum, right?

876
00:37:47,800 --> 00:37:49,200
Because we know we're going to need that.

877
00:37:49,300 --> 00:37:54,600
And so if I go ahead and here and I, you know, I want to essentially

878
00:37:55,100 --> 00:37:59,200
add some storage for for my player, just a really basic stuff inside

879
00:37:59,200 --> 00:38:00,300
the game State structure.

880
00:38:01,200 --> 00:38:01,300
Now.

881
00:38:01,300 --> 00:38:03,600
Normally, we shouldn't be able to really do much to

882
00:38:04,000 --> 00:38:06,000
Sure is without while we're hot loading.

883
00:38:06,300 --> 00:38:08,400
But in this particular case, I think it'll actually work.

884
00:38:08,700 --> 00:38:12,200
And the reason for that is because

885
00:38:14,700 --> 00:38:17,100
There is no actual stuff in the game State structure.

886
00:38:17,100 --> 00:38:19,800
It's just the beginning of our memory block and nothing else is stored

887
00:38:19,800 --> 00:38:20,900
in the memory block either.

888
00:38:21,100 --> 00:38:24,300
So if we just go ahead and start writing to those values, it just

889
00:38:24,300 --> 00:38:25,200
works, right?

890
00:38:25,300 --> 00:38:27,800
So I can do that, and nothing will break because there's nothing

891
00:38:27,800 --> 00:38:29,100
actually getting rearranged.

892
00:38:29,100 --> 00:38:30,900
It's just adding some stuff to the end.

893
00:38:30,900 --> 00:38:33,200
And so the hot loading I think will actually still work.

894
00:38:33,400 --> 00:38:36,100
So, what I'm gonna do now is I'm going to draw a player in here,

895
00:38:36,300 --> 00:38:36,700
right?

896
00:38:36,700 --> 00:38:42,600
And the player is probably going to be out of no, let's let's say that

897
00:38:42,900 --> 00:38:44,300
that the player X and Y.

898
00:38:44,500 --> 00:38:51,000
Y values should probably be, I would suspect the player X and Y should

899
00:38:51,000 --> 00:38:53,600
probably represent some value.

900
00:38:53,600 --> 00:38:57,400
That's at the base of the character, trying to think of how to explain

901
00:38:57,400 --> 00:38:57,500
this.

902
00:38:57,500 --> 00:38:59,800
I might need a diagram for it, just

903
00:39:00,100 --> 00:39:01,900
Just trying to tell you what I'm thinking here.

904
00:39:02,600 --> 00:39:09,400
So if I have a tile map on the screen, right, and I'm looking at this

905
00:39:09,400 --> 00:39:11,600
tile map, sort of.

906
00:39:13,100 --> 00:39:18,400
As as a as grids and you know, I've got some notion of things like

907
00:39:18,700 --> 00:39:20,600
like this is a wall, right?

908
00:39:20,600 --> 00:39:22,800
And these are filled in and I can't walk there.

909
00:39:23,300 --> 00:39:28,700
Well, normally what happens is the player actually the players Sprite,

910
00:39:28,800 --> 00:39:29,400
right?

911
00:39:29,600 --> 00:39:33,300
Doesn't stop when the top of the Sprite hits that wall.

912
00:39:33,400 --> 00:39:36,500
Usually what happens is they kind of eclipse the wall a bit.

913
00:39:36,900 --> 00:39:42,000
So they're actual location is typically more about where their center

914
00:39:42,000 --> 00:39:42,700
of gravity.

915
00:39:42,900 --> 00:39:48,100
Projected on the floor if you will write like like usually the the

916
00:39:48,100 --> 00:39:51,700
player Sprite kind of eclipses the wall like this.

917
00:39:51,900 --> 00:39:56,300
It comes in front of the wall, you know, and so the position if I was

918
00:39:56,300 --> 00:40:00,800
checking the position against the tile map in some way, I'm not

919
00:40:00,800 --> 00:40:02,300
checking the center of it.

920
00:40:02,500 --> 00:40:03,000
Right.

921
00:40:03,000 --> 00:40:06,700
And I'm not checking the upper left corner or the lower right corner.

922
00:40:06,900 --> 00:40:11,500
I'm checking this sort of center of the bottom of the Sprite in some

923
00:40:11,500 --> 00:40:11,900
sense.

924
00:40:12,300 --> 00:40:12,700
Now.

925
00:40:12,900 --> 00:40:14,600
I will probably do something a little more.

926
00:40:14,600 --> 00:40:17,200
You can, we probably make maybe like a little bit of a circle there

927
00:40:17,200 --> 00:40:19,200
for Clues injection, eventually, who knows what we'll do.

928
00:40:19,200 --> 00:40:22,100
We might we're not going to probably literally just check a point when

929
00:40:22,100 --> 00:40:25,800
removing the guy around, but for starters, we'll probably just do

930
00:40:25,800 --> 00:40:26,200
that.

931
00:40:26,200 --> 00:40:30,500
And I want to do something relatively close to I might actually want

932
00:40:30,700 --> 00:40:31,800
so we can see how it feels.

933
00:40:31,800 --> 00:40:32,600
We move them around.

934
00:40:33,200 --> 00:40:36,400
So basically right here is mostly what I want.

935
00:40:36,400 --> 00:40:38,900
So when I draw this guy, I'm thinking that.

936
00:40:38,900 --> 00:40:42,700
What I want to do is say all right, where I draw the rectangle.

937
00:40:42,900 --> 00:40:47,300
The X and Y, for the player comes in, you know, I don't actually know

938
00:40:47,300 --> 00:40:48,400
exactly what I want here.

939
00:40:48,400 --> 00:40:52,300
But I want something like the upper corner of the rectangle.

940
00:40:53,000 --> 00:40:56,100
We want to subtract the height of the player, right?

941
00:40:56,200 --> 00:41:00,200
So we want to subtract the height and then we want to subtract half

942
00:41:00,200 --> 00:41:01,300
the width right?

943
00:41:01,300 --> 00:41:02,000
Because this is half.

944
00:41:02,000 --> 00:41:07,600
This is the half line and then we draw the player between there and

945
00:41:07,600 --> 00:41:09,100
the width height, right?

946
00:41:09,300 --> 00:41:12,500
So we kind of want to this is our this is our kind of diagram for how

947
00:41:12,500 --> 00:41:12,700
we want to.

948
00:41:12,800 --> 00:41:17,700
To draw that if this is the player ex-player ex-player, why right?

949
00:41:17,700 --> 00:41:20,800
So really straightforward stuff here, but again, since this is the

950
00:41:20,800 --> 00:41:24,500
very beginning of our work with this sort of thing.

951
00:41:24,500 --> 00:41:27,200
I just kind of want to explain these things in a little more detail

952
00:41:27,200 --> 00:41:29,400
for people who've never done stuff like this before.

953
00:41:29,900 --> 00:41:31,000
When I do is this stuff.

954
00:41:31,000 --> 00:41:31,900
It's like second nature.

955
00:41:31,900 --> 00:41:32,700
It's like, oh, yeah.

956
00:41:32,700 --> 00:41:35,500
I just got that would just type and like come out of my fingers if I

957
00:41:35,500 --> 00:41:39,300
start typing, right, but that's only because I mean, like, when I was

958
00:41:39,300 --> 00:41:42,700
little, I mean, I was, when I was like eight years old, right?

959
00:41:43,000 --> 00:41:46,100
I used to draw things on graph paper and input them into the computer

960
00:41:46,100 --> 00:41:48,400
for graphics because we didn't even have like paint programs or

961
00:41:48,400 --> 00:41:49,600
anything like this, right?

962
00:41:51,000 --> 00:41:56,500
And so a lifetime of doing stuff like this means, you can just do it

963
00:41:56,500 --> 00:41:59,700
in your head, but if you've never done,

964
00:42:00,000 --> 00:42:03,400
With Graphics before you have to, actually think it through, right?

965
00:42:03,500 --> 00:42:06,200
And it's only, after you've thought it through a bunch of times that

966
00:42:06,200 --> 00:42:07,600
you're just its second nature to you.

967
00:42:07,600 --> 00:42:09,000
It's like anything else, right?

968
00:42:09,800 --> 00:42:13,700
And so, yeah, if you've done this before, then, you know what I'm

969
00:42:13,700 --> 00:42:15,500
talking about because you've got so many, but if you've never done

970
00:42:15,500 --> 00:42:18,200
this before and you're like, whoa, you know, what's going on?

971
00:42:18,700 --> 00:42:21,600
As you do this more you it will become second nature to you.

972
00:42:21,600 --> 00:42:23,200
You won't have to sit and think about these things.

973
00:42:23,200 --> 00:42:24,200
You'll just be like, boom.

974
00:42:24,200 --> 00:42:27,700
And you've got it, but it does take a while to get to that point.

975
00:42:27,700 --> 00:42:27,900
Right?

976
00:42:27,900 --> 00:42:29,700
Like it's like having done it all the

977
00:42:30,000 --> 00:42:30,200
Time.

978
00:42:30,200 --> 00:42:31,100
It's like riding a bike.

979
00:42:31,100 --> 00:42:31,200
Right?

980
00:42:31,200 --> 00:42:32,200
You're just kind of like, all right.

981
00:42:32,200 --> 00:42:35,500
Yeah, I know how to do rectangle Scouts and similarly, you know how to

982
00:42:35,500 --> 00:42:36,200
debug them.

983
00:42:36,300 --> 00:42:37,900
So you'll do the rectangle calc in your head.

984
00:42:37,900 --> 00:42:40,400
You'll type it out and sometimes you're wrong and you see the wrong

985
00:42:40,400 --> 00:42:40,500
thing.

986
00:42:40,500 --> 00:42:41,000
I'm your like up.

987
00:42:41,000 --> 00:42:41,200
Yep.

988
00:42:41,200 --> 00:42:42,800
I forgot the blah and you do it, right?

989
00:42:42,800 --> 00:42:46,400
So you're not, you remember some combination of how to always do it

990
00:42:46,400 --> 00:42:49,500
right in your head and how to correct the things you often do wrong in

991
00:42:49,500 --> 00:42:49,800
your head.

992
00:42:49,800 --> 00:42:50,700
It's real funny.

993
00:42:50,800 --> 00:42:52,100
You'll see it happen on the stream.

994
00:42:52,100 --> 00:42:52,600
I'm sure.

995
00:42:53,700 --> 00:42:55,300
I don't know if it'll happen right now, but it'll happen.

996
00:42:56,300 --> 00:42:59,000
So anyway, we want to draw the player and I'm just going to do a

997
00:42:59,000 --> 00:43:05,500
player, our player G, right?

998
00:43:06,100 --> 00:43:12,200
Player be kind of a thing that and so I want to draw a rectangle of

999
00:43:12,200 --> 00:43:13,000
the player.

1000
00:43:13,500 --> 00:43:18,400
I want a player width, right player with and player height.

1001
00:43:18,600 --> 00:43:20,200
And I'm not sure what those should be.

1002
00:43:20,400 --> 00:43:20,700
Right?

1003
00:43:20,700 --> 00:43:21,600
I don't really know.

1004
00:43:22,400 --> 00:43:23,300
I have no idea.

1005
00:43:23,300 --> 00:43:25,700
I'm going to make him the tile within the tile height at the

1006
00:43:25,900 --> 00:43:26,500
Moment.

1007
00:43:26,900 --> 00:43:30,200
But that's probably a little too wide because if he has to move

1008
00:43:30,200 --> 00:43:33,500
through you probably want them to have a little bit of slop when he

1009
00:43:33,500 --> 00:43:34,500
moves through things.

1010
00:43:34,900 --> 00:43:39,100
So, you know, we could even say that it's going to be 75 percent of

1011
00:43:39,100 --> 00:43:41,200
the width or something like that.

1012
00:43:41,300 --> 00:43:41,800
I don't know.

1013
00:43:42,000 --> 00:43:42,400
I'm not sure.

1014
00:43:42,400 --> 00:43:43,600
Like I said, really don't know.

1015
00:43:44,500 --> 00:43:49,000
So then what we're going to do is say, alright when we actually go to

1016
00:43:49,000 --> 00:43:50,700
draw this guy, right?

1017
00:43:51,700 --> 00:43:55,600
I want to do player, our player Jeep.

1018
00:43:55,800 --> 00:43:56,900
Player B.

1019
00:43:57,200 --> 00:44:03,100
And I want to do them in X Min Y is going to be our game state, which

1020
00:44:03,100 --> 00:44:05,000
remember I did get up here.

1021
00:44:05,000 --> 00:44:05,700
It's right here.

1022
00:44:05,900 --> 00:44:08,400
So we pulled that that's the base of our memory block.

1023
00:44:09,000 --> 00:44:11,800
So it's going to be the game State player X.

1024
00:44:11,900 --> 00:44:20,500
In fact, I probably should do this top player top and player left

1025
00:44:20,500 --> 00:44:21,100
that.

1026
00:44:21,600 --> 00:44:22,900
So I'm going to take that player X.

1027
00:44:22,900 --> 00:44:25,700
And like I said, I want to make

1028
00:44:25,800 --> 00:44:29,300
A left of the player b, - whatever half is with is, right.

1029
00:44:29,400 --> 00:44:33,000
So I'm going to do half, right, multiplying by Point, 5 is half.

1030
00:44:33,200 --> 00:44:35,000
You do half the width, move it back.

1031
00:44:35,000 --> 00:44:38,100
And again, that corresponds to this error, right here, right?

1032
00:44:38,100 --> 00:44:41,800
So, I'm taking the x of the player and I'm moving it back by half the

1033
00:44:41,800 --> 00:44:42,200
width.

1034
00:44:43,100 --> 00:44:47,100
And then I want to take the whole player height here, and I want to go

1035
00:44:47,300 --> 00:44:49,600
back by the entire player, height like that.

1036
00:44:50,900 --> 00:44:56,500
Right, and so I'm going to go ahead and say player left plus player

1037
00:44:56,800 --> 00:44:57,400
width.

1038
00:45:00,000 --> 00:45:09,300
Are top Loops that Claire left plus player wit?

1039
00:45:11,000 --> 00:45:12,100
Don't know how that got in there.

1040
00:45:13,100 --> 00:45:16,200
We're top post player height this.

1041
00:45:16,600 --> 00:45:18,600
And so now, I've sort of got basically.

1042
00:45:19,400 --> 00:45:21,500
I'm passing the left in the top as the place to start.

1043
00:45:21,500 --> 00:45:25,200
And then I'm passing for the mat Thumb in X-Men, why the max x max Y

1044
00:45:25,200 --> 00:45:27,300
is going to be plus the width and the height, right?

1045
00:45:27,900 --> 00:45:31,700
And that's the entirety of my player drawing code at the moment.

1046
00:45:31,700 --> 00:45:34,100
Now, we don't actually know where the player is.

1047
00:45:34,200 --> 00:45:34,500
Of course.

1048
00:45:34,500 --> 00:45:35,600
It's also a problem.

1049
00:45:36,100 --> 00:45:39,500
So, the values that are in there or whatever the values were.

1050
00:45:39,900 --> 00:45:40,700
So that's

1051
00:45:41,100 --> 00:45:44,800
Certainly a bit of a problem like the play, the actual game State

1052
00:45:44,800 --> 00:45:45,500
player ex-player.

1053
00:45:45,500 --> 00:45:46,000
Why?

1054
00:45:46,700 --> 00:45:50,400
And well, I guess I could do this game State player x equals 1000

1055
00:45:51,800 --> 00:45:52,600
something like this.

1056
00:45:52,600 --> 00:45:53,200
Let's say,

1057
00:45:56,300 --> 00:45:56,700
There we go.

1058
00:45:57,300 --> 00:46:00,800
And then you can see him up there, right there he is, and now we're

1059
00:46:00,800 --> 00:46:04,300
probably going to need some way to move him around, so we can go up to

1060
00:46:04,300 --> 00:46:06,400
our controller code again.

1061
00:46:06,700 --> 00:46:07,600
Make this a little bit bigger.

1062
00:46:07,600 --> 00:46:10,000
So we don't have to program in a little tiny window.

1063
00:46:10,300 --> 00:46:14,200
We can go up to our controller code, which we had here and I'm going

1064
00:46:14,200 --> 00:46:15,400
to use the digital movement.

1065
00:46:15,400 --> 00:46:17,600
I'm going to use the keyboard for now because I don't want to deal

1066
00:46:17,600 --> 00:46:19,500
with the analog movement at the moment.

1067
00:46:19,900 --> 00:46:23,400
So basically what we want to do is say, all right, we have these these

1068
00:46:23,400 --> 00:46:24,700
buttons, right?

1069
00:46:24,900 --> 00:46:25,900
And I'm going to say

1070
00:46:28,400 --> 00:46:34,500
That I have a Slayer X Delta and a player, y, Delta.

1071
00:46:34,600 --> 00:46:35,500
And at the end.

1072
00:46:35,500 --> 00:46:39,300
I'm going to take the player X and the player Y, and I'm going to add

1073
00:46:39,300 --> 00:46:41,200
those right this.

1074
00:46:45,300 --> 00:46:52,500
Okay, so if my controller input move up and down, right?

1075
00:46:53,700 --> 00:46:57,000
And I'm just going to kind of do this sort of thing, right?

1076
00:46:57,400 --> 00:46:59,100
So move, move down.

1077
00:46:59,600 --> 00:47:02,800
Move left move, right?

1078
00:47:02,800 --> 00:47:03,700
I'm going to say that.

1079
00:47:03,700 --> 00:47:08,900
If move up and down, then the the player X is going to be, I'm sorry,

1080
00:47:08,900 --> 00:47:13,600
the player why is is going to be one and if it moved up, right if he's

1081
00:47:13,600 --> 00:47:14,000
moving up.

1082
00:47:14,000 --> 00:47:14,900
Its - if there

1083
00:47:15,100 --> 00:47:16,400
Down it's positive.

1084
00:47:16,600 --> 00:47:19,200
Deep layer x equals negative 1.

1085
00:47:19,200 --> 00:47:21,900
If he's moving to the left because he's moving getting lower in Acts

1086
00:47:22,400 --> 00:47:24,700
and and hire an X.

1087
00:47:24,700 --> 00:47:25,200
Right.

1088
00:47:25,500 --> 00:47:27,200
So I'm just going to do that for now.

1089
00:47:27,500 --> 00:47:28,600
Should be pretty basic.

1090
00:47:29,100 --> 00:47:30,300
That's game State.

1091
00:47:31,200 --> 00:47:35,700
Yeah, and so, now I should be able to move my guy around.

1092
00:47:35,700 --> 00:47:35,900
Yeah.

1093
00:47:35,900 --> 00:47:36,300
There we go.

1094
00:47:36,300 --> 00:47:38,200
So, there's the dude, right?

1095
00:47:38,200 --> 00:47:39,300
And he's moving around now.

1096
00:47:39,300 --> 00:47:41,600
He moves around pretty slowly and that's fine.

1097
00:47:42,300 --> 00:47:44,900
Not a particularly Speedy fellow at the moment.

1098
00:47:45,000 --> 00:47:45,300
Point.

1099
00:47:45,600 --> 00:47:46,000
Of course.

1100
00:47:46,000 --> 00:47:49,200
I also don't actually know what our frame rate is right now because

1101
00:47:49,200 --> 00:47:50,500
we're not even printing it out.

1102
00:47:50,600 --> 00:47:54,900
And so we are going to have to do some stuff here in a second.

1103
00:47:55,100 --> 00:47:56,400
To think about how that should go.

1104
00:47:56,400 --> 00:47:59,800
So in fact, let's just do that, right?

1105
00:48:00,100 --> 00:48:02,200
Because hey, we've got a, we've got a player Sprite moving around the

1106
00:48:02,200 --> 00:48:02,500
screen.

1107
00:48:02,500 --> 00:48:03,400
Let's think about that.

1108
00:48:03,900 --> 00:48:06,000
So, what would happen here?

1109
00:48:06,000 --> 00:48:06,900
If I did this?

1110
00:48:07,000 --> 00:48:08,100
What does that actually mean?

1111
00:48:08,300 --> 00:48:09,800
What did I actually just right?

1112
00:48:10,000 --> 00:48:14,800
Well, what I wrote is, I said that the players Exposition is going to

1113
00:48:14,800 --> 00:48:19,900
be updated by one every time, a frame goes by.

1114
00:48:20,400 --> 00:48:22,900
And the, like the D key is down.

1115
00:48:22,900 --> 00:48:26,700
Basically what that boils down to, right there, moving to the right.

1116
00:48:27,200 --> 00:48:29,800
So, because this is in pixels, essentially.

1117
00:48:30,000 --> 00:48:31,500
Write all of this is in pixels.

1118
00:48:31,700 --> 00:48:35,400
That just means he's going to move one pixel to the, right?

1119
00:48:35,500 --> 00:48:36,300
Every frame.

1120
00:48:36,900 --> 00:48:37,200
Now.

1121
00:48:37,200 --> 00:48:40,300
There's a couple reasons why we have.

1122
00:48:40,300 --> 00:48:42,300
That's not such a great way to do things.

1123
00:48:42,300 --> 00:48:45,900
One is because our frame rate now, determines the speed that the

1124
00:48:45,900 --> 00:48:46,800
person moves at.

1125
00:48:46,900 --> 00:48:50,300
If our frame rate is 30 frames a second, right?

1126
00:48:51,800 --> 00:48:55,100
If our frame rate of 30 frames a second, then he is going to be moving

1127
00:48:56,100 --> 00:48:58,000
at 30 pixels a second.

1128
00:48:58,200 --> 00:49:01,200
But if our frame rate were to jump up to 60 frames a second because

1129
00:49:01,200 --> 00:49:04,100
the platform layer decided to run at a faster frame rate, then he

1130
00:49:04,100 --> 00:49:06,800
would move twice as fast and the game would play twice as fast, which

1131
00:49:06,800 --> 00:49:07,900
is not what we want.

1132
00:49:08,200 --> 00:49:12,100
So, what we want to do is we want to take the actual value that we're

1133
00:49:12,100 --> 00:49:16,500
getting in here for the amount that we're supposed to move by right

1134
00:49:18,100 --> 00:49:20,500
seconds to advance over update, right?

1135
00:49:21,400 --> 00:49:22,800
Of that name s.

1136
00:49:22,800 --> 00:49:25,000
I I couldn't decide what I wanted that be.

1137
00:49:25,400 --> 00:49:26,000
Let's see.

1138
00:49:27,800 --> 00:49:29,500
I'm going to call it DT, right?

1139
00:49:29,500 --> 00:49:33,600
4D time DT for frame.

1140
00:49:33,600 --> 00:49:36,300
So the amount of time that elapses over the frame is what we're going

1141
00:49:36,300 --> 00:49:36,700
to do.

1142
00:49:38,500 --> 00:49:38,900
Excuse me.

1143
00:49:41,300 --> 00:49:43,600
And so, what I'm going to do there is I'm going to go ahead and

1144
00:49:43,600 --> 00:49:48,200
multiply however, much the value should be however, much the motion

1145
00:49:48,200 --> 00:49:48,800
should be.

1146
00:49:50,100 --> 00:49:54,100
I'm going to multiply whatever the the movement direction is.

1147
00:49:54,100 --> 00:49:54,800
Essentially.

1148
00:49:54,900 --> 00:49:59,800
I'm going to multiply that by whatever, that whatever that DT value

1149
00:49:59,800 --> 00:50:00,800
is, right?

1150
00:50:01,000 --> 00:50:03,600
So, that way, I'm going to get a constant amount.

1151
00:50:03,600 --> 00:50:08,200
So, if this, if the amount of time that has passed goes down,

1152
00:50:09,000 --> 00:50:10,500
Then the amount of movement will go down.

1153
00:50:10,500 --> 00:50:12,600
If the amount of time goes up, then the amount of movement will go up,

1154
00:50:12,600 --> 00:50:13,700
which is what I want.

1155
00:50:16,200 --> 00:50:17,500
The pillow to do in here.

1156
00:50:23,900 --> 00:50:25,600
There's stuff that I haven't talked about yet.

1157
00:50:25,600 --> 00:50:28,100
And so I can't do some things that I would normally do here.

1158
00:50:28,100 --> 00:50:30,200
But I'm going to tell don't mention what they are briefly and they

1159
00:50:30,200 --> 00:50:30,600
will move on.

1160
00:50:30,700 --> 00:50:31,000
Okay.

1161
00:50:31,300 --> 00:50:36,400
So what I want to do is I want to take this DT and I want to, I want

1162
00:50:36,400 --> 00:50:38,700
to that's in the input structure, right?

1163
00:50:39,100 --> 00:50:40,800
I want to go ahead and multiply that out.

1164
00:50:40,900 --> 00:50:44,500
So now we have a fixed amount per per frame basically.

1165
00:50:44,900 --> 00:50:46,900
And of course, the problem with it is, this is now going to be

1166
00:50:46,900 --> 00:50:51,000
incredibly slow because that means he now moves one pixel a second.

1167
00:50:51,000 --> 00:50:53,500
These values are now in seconds because we're multiplying.

1168
00:50:53,600 --> 00:50:54,600
Lying by that DT.

1169
00:50:54,600 --> 00:50:56,600
And again, this is the dimensional analysis again, that I've talked

1170
00:50:56,600 --> 00:50:59,800
about many times, essentially, what we have is we have a dt4 frame.

1171
00:51:00,000 --> 00:51:00,500
Right.

1172
00:51:00,500 --> 00:51:05,000
So for the frame we have, this is this is essentially the number of

1173
00:51:05,000 --> 00:51:07,500
seconds that we're going to have.

1174
00:51:07,500 --> 00:51:08,400
So this is in seconds.

1175
00:51:08,400 --> 00:51:10,100
This is some number of seconds.

1176
00:51:10,100 --> 00:51:14,000
It's DT, s that we're getting passed in.

1177
00:51:14,000 --> 00:51:17,100
So we're going to multiply we're multiplying that by something.

1178
00:51:17,100 --> 00:51:18,600
We're multiplying that by a value.

1179
00:51:18,600 --> 00:51:21,500
And we're getting pixels out, right?

1180
00:51:21,500 --> 00:51:24,200
We're going to we're taking the result and we're using it as pixels.

1181
00:51:24,200 --> 00:51:26,700
So, dimensional analysis Works in Reverse as well.

1182
00:51:26,700 --> 00:51:29,600
We know that, if we ended up with pixels and we started with

1183
00:51:30,000 --> 00:51:32,500
Kids, we know that the thing that we're multiplying by we can fill in

1184
00:51:32,500 --> 00:51:33,800
the unit's, right?

1185
00:51:34,200 --> 00:51:37,800
Pixels is on the top because that's what we ended up with and second

1186
00:51:37,800 --> 00:51:39,600
says, on the bottom, right?

1187
00:51:39,800 --> 00:51:43,700
So, we now know that the value is in pixels per second.

1188
00:51:43,700 --> 00:51:48,200
This is pixels per second, right?

1189
00:51:48,900 --> 00:51:49,900
That's what we did.

1190
00:51:50,800 --> 00:51:54,700
So if we're doing one pixels per second, that's just not very many.

1191
00:51:54,700 --> 00:51:55,400
So let's get.

1192
00:51:55,400 --> 00:51:57,300
Let the guy move 32 pixels for a second.

1193
00:51:57,300 --> 00:51:58,000
Let's say, or you know what?

1194
00:51:58,000 --> 00:51:59,300
We can do that in an easier way.

1195
00:52:00,000 --> 00:52:04,300
Can basically say at the bottom right?

1196
00:52:04,300 --> 00:52:05,100
Let's just give them.

1197
00:52:05,500 --> 00:52:07,500
Give them some speed there.

1198
00:52:07,500 --> 00:52:08,100
Right?

1199
00:52:08,700 --> 00:52:09,900
And off we go.

1200
00:52:11,400 --> 00:52:12,400
Oops, where's my game?

1201
00:52:12,500 --> 00:52:13,800
There's one game, right?

1202
00:52:13,800 --> 00:52:15,200
So now he's moving a little faster.

1203
00:52:15,300 --> 00:52:17,400
It's not great, but it's faster, right?

1204
00:52:17,400 --> 00:52:18,500
Why is my move up button?

1205
00:52:18,500 --> 00:52:19,200
Not working.

1206
00:52:19,400 --> 00:52:20,500
Do we have a bug somewhere?

1207
00:52:21,100 --> 00:52:21,600
Nice.

1208
00:52:21,900 --> 00:52:22,300
Oops?

1209
00:52:22,300 --> 00:52:23,100
Sorry about that.

1210
00:52:26,000 --> 00:52:27,400
Too many windows open.

1211
00:52:27,600 --> 00:52:28,500
Where's my damn game?

1212
00:52:28,500 --> 00:52:29,000
There it is.

1213
00:52:29,400 --> 00:52:29,700
All right.

1214
00:52:29,700 --> 00:52:33,100
So then the guys moving around still pretty still pretty slow.

1215
00:52:33,100 --> 00:52:35,500
30 pixels of second is not very many as you can see.

1216
00:52:35,600 --> 00:52:38,200
Let's get them up a little bit higher speed of the game.

1217
00:52:38,200 --> 00:52:41,600
Maybe, maybe let's say that he should be at 128 pixels per second,

1218
00:52:41,600 --> 00:52:42,500
something like that.

1219
00:52:42,700 --> 00:52:43,500
See how that is.

1220
00:52:43,900 --> 00:52:44,000
There.

1221
00:52:44,000 --> 00:52:44,600
He goes.

1222
00:52:44,700 --> 00:52:45,100
Moving along.

1223
00:52:45,100 --> 00:52:49,200
Well, although you know what, I think our frame rate is pretty darn

1224
00:52:49,200 --> 00:52:50,700
low here, right?

1225
00:52:50,700 --> 00:52:53,500
Because look at how slow look at how jerk talk chunky.

1226
00:52:53,500 --> 00:52:53,700
That is.

1227
00:52:53,700 --> 00:52:54,300
So maybe.

1228
00:52:54,800 --> 00:52:57,100
We might not actually be if we're not hitting our frame rate.

1229
00:52:57,100 --> 00:52:58,600
Then this isn't in s anymore.

1230
00:52:58,800 --> 00:53:04,100
We could change to passing the actual time that has elapsed, but

1231
00:53:04,300 --> 00:53:05,400
that's, that's unfortunate.

1232
00:53:05,400 --> 00:53:08,400
So, I wonder, I wonder how slow we're actually going.

1233
00:53:08,400 --> 00:53:09,300
So let's take a look.

1234
00:53:10,100 --> 00:53:11,700
Let me go ahead and close this out.

1235
00:53:13,200 --> 00:53:17,100
Let's take a look because we have to hit our frame rate.

1236
00:53:17,100 --> 00:53:18,900
Otherwise, our timing values will be wrong.

1237
00:53:18,900 --> 00:53:19,000
Now.

1238
00:53:19,000 --> 00:53:22,600
The other thing we can do here is past the actual time value that's

1239
00:53:22,600 --> 00:53:23,300
going through.

1240
00:53:23,700 --> 00:53:26,400
Maybe this is something we'll have to do in the win32 platform layer

1241
00:53:26,400 --> 00:53:27,200
relatively soon.

1242
00:53:27,200 --> 00:53:30,600
Actually, if you think about it, I got to fix the bug now in the

1243
00:53:30,600 --> 00:53:31,300
platform there as well.

1244
00:53:31,300 --> 00:53:34,300
We change this name to dt4 frame, right?

1245
00:53:34,500 --> 00:53:39,200
So, there we go, but I guess our frame frame rate is pretty darn low,

1246
00:53:39,200 --> 00:53:40,000
which is unfortunate.

1247
00:53:40,000 --> 00:53:42,200
Let's take a look at what it actually is.

1248
00:53:43,700 --> 00:53:44,500
So we can see.

1249
00:53:47,000 --> 00:53:47,500
Hmm.

1250
00:53:53,100 --> 00:53:55,600
Are we are we not actually measuring the value though.

1251
00:53:57,300 --> 00:53:58,400
Am I doing something wrong here?

1252
00:53:58,600 --> 00:53:59,700
What are we printing out?

1253
00:54:00,100 --> 00:54:01,200
Milliseconds per frame.

1254
00:54:04,700 --> 00:54:06,700
Now we're looking at, get seconds elapsed.

1255
00:54:06,700 --> 00:54:07,100
So what?

1256
00:54:07,100 --> 00:54:08,200
So I think I've done something.

1257
00:54:08,200 --> 00:54:09,100
So we got a bug here.

1258
00:54:09,100 --> 00:54:11,300
I feel like is that actually

1259
00:54:12,700 --> 00:54:13,900
Milliseconds per frame.

1260
00:54:15,000 --> 00:54:15,500
Right.

1261
00:54:16,500 --> 00:54:20,800
And that is actually being measured by the win32 get seconds elapsed.

1262
00:54:20,900 --> 00:54:24,200
So for taking 33 milliseconds per frame, we should be animating very

1263
00:54:24,200 --> 00:54:24,900
smoothly.

1264
00:54:25,300 --> 00:54:25,800
Right?

1265
00:54:25,800 --> 00:54:29,400
We should see something very smooth happening on here.

1266
00:54:29,600 --> 00:54:31,700
And yet, do you see how jerky that is?

1267
00:54:33,000 --> 00:54:34,300
Why is that so jerky.

1268
00:54:34,300 --> 00:54:36,300
What's the bug, does anyone know what the bug is?

1269
00:54:36,600 --> 00:54:37,600
I'm not sure if they do.

1270
00:54:40,400 --> 00:54:41,400
I certainly don't.

1271
00:54:41,700 --> 00:54:45,600
So why is that so jerky if we're getting a totally smooth frame rate

1272
00:54:46,000 --> 00:54:47,000
that seems wrong.

1273
00:54:47,100 --> 00:54:50,900
So what's like I said, I don't know what the actual problem is there.

1274
00:54:50,900 --> 00:54:54,800
I would like to know I suppose it could be, this could be the the

1275
00:54:54,800 --> 00:54:56,500
streaming thing again, but I don't know.

1276
00:54:56,500 --> 00:54:59,500
I don't want to assume that, it's just OBS doing that.

1277
00:54:59,700 --> 00:55:03,000
And I guess I don't have a real way to test that unfortunately, but I

1278
00:55:03,000 --> 00:55:04,800
don't want to assume that that's true.

1279
00:55:05,100 --> 00:55:08,600
If it's not actually true, but it seems like we should be getting 30

1280
00:55:08,600 --> 00:55:09,200
frames a second.

1281
00:55:09,900 --> 00:55:11,800
And yet we're not what would happen.

1282
00:55:11,900 --> 00:55:16,900
Let's say if I changed it to 60 frames a second as our Target.

1283
00:55:17,200 --> 00:55:17,900
I'm just curious.

1284
00:55:18,900 --> 00:55:19,300
Let's see.

1285
00:55:19,300 --> 00:55:23,800
So game update Hertz is Monitor, refresh rate divided by 2.

1286
00:55:23,800 --> 00:55:24,800
Well, let's just say that.

1287
00:55:24,800 --> 00:55:25,800
It's not that anymore.

1288
00:55:26,100 --> 00:55:26,900
It's just buy one.

1289
00:55:32,200 --> 00:55:38,500
Well, so that does seem awfully smooth smoother.

1290
00:55:38,500 --> 00:55:41,300
So I wonder if this is OBS is just messing with us.

1291
00:55:42,100 --> 00:55:43,100
That's kind of unfortunate.

1292
00:55:43,100 --> 00:55:46,600
I'll have to test that separately on the stream because we are hitting

1293
00:55:46,600 --> 00:55:47,100
our frame rate.

1294
00:55:47,100 --> 00:55:48,200
As far as I can tell.

1295
00:55:48,800 --> 00:55:52,800
It's actually working properly and it does get smoother when we output

1296
00:55:52,800 --> 00:55:55,200
faster, which means that that could be because we're getting like a

1297
00:55:55,200 --> 00:55:56,100
beat frequency.

1298
00:55:56,600 --> 00:55:57,700
Mmm-hmm.

1299
00:55:58,900 --> 00:55:59,600
That's unfortunate.

1300
00:55:59,600 --> 00:56:01,800
Yeah, you know, I guess maybe I've been

1301
00:56:02,000 --> 00:56:03,900
So I will have to go to using a capture card.

1302
00:56:03,900 --> 00:56:06,400
I was hoping not to have to go to using a capture card for this sort

1303
00:56:06,400 --> 00:56:09,300
of stuff because I was because they seem kind of unreliable

1304
00:56:09,300 --> 00:56:12,300
potentially, but it looks like I may have to, I kind of need to get

1305
00:56:14,200 --> 00:56:17,500
Things out of the out of the equation here, if that's the case.

1306
00:56:18,200 --> 00:56:20,300
Yeah, you can see how jerky that is.

1307
00:56:20,300 --> 00:56:21,400
And that's really annoying to me.

1308
00:56:21,400 --> 00:56:21,500
Now.

1309
00:56:21,500 --> 00:56:22,900
Maybe it looks smooth to you for all.

1310
00:56:22,900 --> 00:56:26,200
I know it looks smooth on the stream, but it looks very jerky to me.

1311
00:56:26,200 --> 00:56:29,300
It's I guess all I can say, so yeah.

1312
00:56:30,600 --> 00:56:33,800
So, let's see if this holds water as well.

1313
00:56:35,300 --> 00:56:36,800
We know how many pixels up and down, we are.

1314
00:56:36,800 --> 00:56:38,700
So I'm going to time how long it takes to get there.

1315
00:56:39,700 --> 00:56:48,100
One, two, three, four, five, six, seven, eight.

1316
00:56:48,300 --> 00:56:52,800
So, take some eight seconds to get like, by my crappy just me counting

1317
00:56:52,800 --> 00:56:54,700
right, which is not a particularly good way to do it.

1318
00:56:54,700 --> 00:56:58,900
But if it takes him eight seconds to get to the bottom and our

1319
00:57:00,000 --> 00:57:03,000
He was going to move 128 pixels per second.

1320
00:57:03,200 --> 00:57:05,400
Then we should expect right?

1321
00:57:05,700 --> 00:57:09,100
That it should be somewhere around there, you know is the height of

1322
00:57:09,100 --> 00:57:10,800
the window and I was just counting randomly.

1323
00:57:10,800 --> 00:57:13,500
So it could be more like 800 or something like that.

1324
00:57:14,000 --> 00:57:16,500
But let's take a look at what it actually is because I'm just trying

1325
00:57:16,500 --> 00:57:17,600
to determine what.

1326
00:57:18,300 --> 00:57:23,600
Yeah, I feel like that's I feel like that's way too long to get from

1327
00:57:23,600 --> 00:57:25,000
the top to the bottom, if that makes sense.

1328
00:57:25,000 --> 00:57:27,500
So, I feel like I've still got, I feel like there's there's a bug in

1329
00:57:27,500 --> 00:57:28,700
here as I guess all I can say.

1330
00:57:29,000 --> 00:57:29,900
So, I believe we said

1331
00:57:30,000 --> 00:57:31,000
It was 540.

1332
00:57:31,000 --> 00:57:31,500
Right?

1333
00:57:31,500 --> 00:57:36,300
So if feels it, feels like, maybe that's twice as fast as it should be

1334
00:57:36,300 --> 00:57:37,200
or somewhere on there.

1335
00:57:37,200 --> 00:57:40,200
Now, maybe again, like I said, maybe I was counting a little bit too

1336
00:57:40,200 --> 00:57:43,000
fast, but it just feels it just feels off.

1337
00:57:43,300 --> 00:57:43,400
It.

1338
00:57:43,400 --> 00:57:46,900
Just feels off to me and I feel like we've got a bug somewhere, but,

1339
00:57:46,900 --> 00:57:48,000
of course, it is.

1340
00:57:48,000 --> 00:57:49,000
The end of the Stream.

1341
00:57:49,700 --> 00:57:57,100
So, I guess basically note Casey, we are sorry, I should say to do

1342
00:57:57,400 --> 00:57:58,000
Casey.

1343
00:57:59,400 --> 00:57:59,800
Let's

1344
00:58:00,200 --> 00:58:06,200
Take a close look at timing tomorrow and try to verify that it is

1345
00:58:06,300 --> 00:58:13,200
working properly, because it appears that things are moving half as

1346
00:58:13,200 --> 00:58:18,200
fast as I would have expected, right?

1347
00:58:18,400 --> 00:58:19,700
So, I think that's our to do for tomorrow.

1348
00:58:20,300 --> 00:58:21,000
All right.

1349
00:58:22,600 --> 00:58:23,200
Excuse me.

1350
00:58:23,300 --> 00:58:24,500
All right.

1351
00:58:24,500 --> 00:58:28,800
So now it is time to go to the Q&A.

1352
00:58:28,800 --> 00:58:34,600
And yes, please make sure that you prefix or questions with Q: so I

1353
00:58:34,600 --> 00:58:35,100
can see them.

1354
00:58:35,100 --> 00:58:39,500
And also, please keep the questions to what we've done today stream or

1355
00:58:39,500 --> 00:58:39,600
stuff.

1356
00:58:39,600 --> 00:58:44,400
We did on previous streams so that we essentially don't don't get too

1357
00:58:44,400 --> 00:58:46,300
far off base with what we're talking about.

1358
00:58:47,500 --> 00:58:48,500
So, let's take a look here.

1359
00:58:49,300 --> 00:58:51,800
Let us take a look at the questions.

1360
00:59:02,700 --> 00:59:03,300
Asleep.

1361
00:59:03,300 --> 00:59:07,100
Still oversleeping and throwing off the FPS asked enemy Mouse.

1362
00:59:07,700 --> 00:59:08,900
Well, we can certainly find out.

1363
00:59:08,900 --> 00:59:14,300
And one thing that we can do is we can adjust our sleep or we can get

1364
00:59:14,300 --> 00:59:16,200
rid of our sleep entirely for now, right?

1365
00:59:16,200 --> 00:59:19,100
We could in our sleep code.

1366
00:59:19,400 --> 00:59:22,300
I think we have a sleep as granular thing that we set.

1367
00:59:22,300 --> 00:59:23,900
We could decide to just

1368
00:59:30,500 --> 00:59:33,600
We could decide to just be a CPU melter and say sleep is granular

1369
00:59:33,600 --> 00:59:35,500
equals false, right?

1370
00:59:41,300 --> 00:59:44,700
And at least for me, it doesn't get any better.

1371
00:59:45,000 --> 00:59:47,200
Unfortunately, that's without sleep.

1372
00:59:47,200 --> 00:59:47,300
Right?

1373
00:59:47,300 --> 00:59:48,100
Because I believe.

1374
00:59:48,100 --> 00:59:51,300
Now we can, we can verify that that sleep is is not actually

1375
00:59:51,300 --> 00:59:51,800
happening.

1376
00:59:52,600 --> 00:59:55,300
If I go down here and set a breakpoint in the Sleep code.

1377
00:59:55,700 --> 00:59:57,000
It should never happen, right?

1378
00:59:58,200 --> 00:59:58,600
Yeah.

1379
01:00:00,000 --> 01:00:01,800
Basically, it's not, it's not sleep.

1380
01:00:03,500 --> 01:00:08,800
And I think we kind of knew that it wasn't sleep because because if it

1381
01:00:08,800 --> 01:00:12,300
was sleep, we would have seen that our millisecond timer is actually

1382
01:00:12,300 --> 01:00:12,700
timing.

1383
01:00:12,700 --> 01:00:15,200
What happens in that case, right?

1384
01:00:15,800 --> 01:00:20,600
You can see down here, where we print out this this FPS buffer thing

1385
01:00:20,900 --> 01:00:24,700
milliseconds, per frame was actually computed up here from the actual

1386
01:00:24,700 --> 01:00:26,700
count that happens after the sleep.

1387
01:00:26,700 --> 01:00:29,300
So we would have seen our frame rate be wrong.

1388
01:00:30,300 --> 01:00:33,600
If that were the case, our frame rate number, so we are we are at

1389
01:00:33,600 --> 01:00:37,400
least getting through the loop in 33 milliseconds.

1390
01:00:37,400 --> 01:00:38,000
Right?

1391
01:00:38,200 --> 01:00:41,500
But we're hitting some kind of a beat frequency with either with OBS

1392
01:00:41,500 --> 01:00:45,200
or just the window compositor where we're not actually able to update

1393
01:00:46,100 --> 01:00:48,600
at that rate or something or something else is wrong.

1394
01:00:49,000 --> 01:00:51,400
So we definitely have some kind of a problem there, but I'm just not

1395
01:00:51,400 --> 01:00:52,100
sure what it is.

1396
01:00:52,200 --> 01:00:54,000
So we're going to have to take a look and see.

1397
01:00:55,800 --> 01:00:56,400
You know, what?

1398
01:00:56,400 --> 01:01:00,100
What is what are, what are bug is or what Windows is doing?

1399
01:01:00,100 --> 01:01:01,800
That's supporting us, one of the other.

1400
01:01:09,400 --> 01:01:13,100
It's bugged because you only set DT frame on one of the two input.

1401
01:01:13,100 --> 01:01:15,200
So did I put that in the wrong place?

1402
01:01:15,800 --> 01:01:16,300
Haha.

1403
01:01:18,400 --> 01:01:18,900
Awesome.

1404
01:01:19,200 --> 01:01:19,800
Thank you for that.

1405
01:01:19,800 --> 01:01:20,300
Catch.

1406
01:01:20,300 --> 01:01:21,200
Oh, you're right.

1407
01:01:21,300 --> 01:01:22,200
Oh, that's awful.

1408
01:01:23,100 --> 01:01:23,800
That's not what I want.

1409
01:01:23,800 --> 01:01:26,600
That's that's not where I wanted to put that at all.

1410
01:01:27,700 --> 01:01:29,600
Yeah, this is again, the problem of thank you.

1411
01:01:29,600 --> 01:01:30,800
That is definitely our bug.

1412
01:01:31,900 --> 01:01:33,900
I wanted to put that where we first do our input.

1413
01:01:33,900 --> 01:01:36,000
It might be time to start cleaning this code up a little bit.

1414
01:01:36,000 --> 01:01:37,300
I didn't really want to spend any time on it.

1415
01:01:37,300 --> 01:01:43,400
But yeah, what we wanted to do is do it in the actual Loop itself.

1416
01:01:43,400 --> 01:01:44,200
That was a mistake.

1417
01:01:44,200 --> 01:01:45,800
So I didn't mean to do it here.

1418
01:01:45,800 --> 01:01:46,500
That was dumb.

1419
01:01:46,700 --> 01:01:47,700
What I wanted to do.

1420
01:01:47,900 --> 01:01:49,600
Is do it here, right?

1421
01:01:49,600 --> 01:01:53,200
I wanted to do it at the beginning of every frame and so that's the

1422
01:01:53,200 --> 01:01:53,500
reason.

1423
01:01:53,500 --> 01:01:54,800
Yeah, thanks for that catch.

1424
01:01:54,800 --> 01:01:59,000
The problem is that I thought I was setting it every frame, but I

1425
01:01:59,000 --> 01:02:02,200
actually set it just at the before we even entered the loop, right?

1426
01:02:02,300 --> 01:02:04,000
And so one of our inputs was 0.

1427
01:02:04,000 --> 01:02:07,500
So every other frame, it wasn't updating, which is exactly what I

1428
01:02:07,500 --> 01:02:08,600
thought, that's weird.

1429
01:02:08,700 --> 01:02:10,400
You can sense when these things are wrong.

1430
01:02:10,400 --> 01:02:11,500
So it was moving.

1431
01:02:11,500 --> 01:02:15,400
Exactly half as fast with is exactly what I felt like was happening

1432
01:02:15,600 --> 01:02:16,500
and my timing.

1433
01:02:16,600 --> 01:02:17,600
Yeah, so there we go.

1434
01:02:17,800 --> 01:02:19,600
That's what I would have expected.

1435
01:02:19,600 --> 01:02:23,500
It's still not the smoothest thing in the world, which I think is just

1436
01:02:23,500 --> 01:02:25,800
a no BS problem, but, you know, that's, that's much better.

1437
01:02:26,100 --> 01:02:28,900
Thank you play triangles for Christ.

1438
01:02:30,100 --> 01:02:32,900
I love that name to play triangles where Christ is.

1439
01:02:33,300 --> 01:02:35,100
I mean who wouldn't do that for Christ?

1440
01:02:35,300 --> 01:02:35,800
All right.

1441
01:02:36,500 --> 01:02:37,300
So, let's see here.

1442
01:02:37,300 --> 01:02:38,600
Let's go ahead and put that on there.

1443
01:02:40,400 --> 01:02:42,200
So now that's more what we would expect.

1444
01:02:42,300 --> 01:02:43,400
Okay, so that's good.

1445
01:02:43,400 --> 01:02:44,500
Now, we're good.

1446
01:02:44,500 --> 01:02:45,500
Everything's better.

1447
01:02:45,600 --> 01:02:46,600
I knew there was a bug.

1448
01:02:46,600 --> 01:02:47,300
I'm like something.

1449
01:02:47,300 --> 01:02:48,400
Something's, busted.

1450
01:02:48,700 --> 01:02:49,300
Thank you very much.

1451
01:02:49,300 --> 01:02:50,500
This is the magic of the street.

1452
01:02:50,600 --> 01:02:53,000
Basically, the fact that there are so many people watching the stream.

1453
01:02:53,100 --> 01:02:56,100
Totally compensates for my lack of ability to concentrate.

1454
01:02:56,500 --> 01:02:57,800
It's like, perfect.

1455
01:02:57,900 --> 01:02:58,500
So that's good.

1456
01:02:58,500 --> 01:02:59,800
So now we don't have that anymore.

1457
01:03:00,300 --> 01:03:01,300
We can get rid of that to do.

1458
01:03:01,600 --> 01:03:02,600
Thank you.

1459
01:03:08,000 --> 01:03:11,000
Garland abloom, possibly, we need to sink our refresh rate with the

1460
01:03:11,000 --> 01:03:11,800
windows vsync.

1461
01:03:11,800 --> 01:03:14,200
Otherwise windows will just be tossing out some of our frames and

1462
01:03:14,200 --> 01:03:14,900
causing jerky movement.

1463
01:03:14,900 --> 01:03:16,700
Yes, that is absolutely happening.

1464
01:03:17,100 --> 01:03:17,700
Unfortunately.

1465
01:03:17,700 --> 01:03:20,600
I don't know of a good way to do that until we move to opengl and

1466
01:03:20,600 --> 01:03:21,300
direct3d.

1467
01:03:21,700 --> 01:03:25,600
I wish I did but I'm not sure really how to do that.

1468
01:03:26,100 --> 01:03:33,400
There is a direct direct draw call that you can use but I don't really

1469
01:03:33,400 --> 01:03:34,200
know.

1470
01:03:35,200 --> 01:03:37,100
I don't know how supported that is anymore.

1471
01:03:37,400 --> 01:03:38,800
Well seem to opengl and direct3d.

1472
01:03:38,800 --> 01:03:41,000
This will be solved for us because they allow us to do that

1473
01:03:41,000 --> 01:03:43,300
automatically, but I don't know how to do it until then.

1474
01:03:50,500 --> 01:03:51,800
On the topic of the town map size.

1475
01:03:51,800 --> 01:03:53,700
Maybe you could go for smaller sized tiles.

1476
01:03:53,700 --> 01:03:56,900
Keep an even number of them on both sides and use the two middle for

1477
01:03:56,900 --> 01:03:57,500
the doors.

1478
01:03:57,500 --> 01:03:58,000
Yes, we could.

1479
01:03:58,000 --> 01:03:59,100
That's a good point.

1480
01:03:59,800 --> 01:04:04,900
We could do that, but then are the doors, but that is really helpful,

1481
01:04:04,900 --> 01:04:08,200
because there aren't the top doors wider than the side doors.

1482
01:04:08,700 --> 01:04:09,200
The problem.

1483
01:04:09,200 --> 01:04:10,100
Is it 16?

1484
01:04:10,100 --> 01:04:11,500
By 9 is the display?

1485
01:04:11,900 --> 01:04:14,200
So, the problem is not how many tiles there are.

1486
01:04:14,400 --> 01:04:17,300
The problem is that we have an odd number of tiles in One Direction,

1487
01:04:17,300 --> 01:04:19,100
in an, even number of tiles in the other direction.

1488
01:04:19,100 --> 01:04:20,100
If we want the towels to be,

1489
01:04:20,300 --> 01:04:22,100
We're right.

1490
01:04:22,600 --> 01:04:24,000
So I don't think that actually helps.

1491
01:04:27,200 --> 01:04:31,400
Why you don't use any created before engines like opengl es F ml,

1492
01:04:31,400 --> 01:04:33,300
Allegro XD, SD L.

1493
01:04:33,600 --> 01:04:34,700
I feel like that's been answered.

1494
01:04:34,700 --> 01:04:35,900
So many times.

1495
01:04:36,500 --> 01:04:38,400
It's because the whole point of this series is to build a game from

1496
01:04:38,400 --> 01:04:38,900
scratch.

1497
01:04:39,800 --> 01:04:42,500
I think you can get two turtles anywhere about how to load up the, you

1498
01:04:42,500 --> 01:04:44,400
know, unity and drop some stuff into it.

1499
01:04:44,400 --> 01:04:46,600
And that's not very interesting because if you ever wanted to build

1500
01:04:46,600 --> 01:04:50,300
anything that wasn't Unity, you can't and you also have no idea what

1501
01:04:50,300 --> 01:04:50,900
Unity is doing.

1502
01:04:50,900 --> 01:04:53,200
So when you have problems, you don't necessarily know how to fix them,

1503
01:04:53,200 --> 01:04:53,700
right?

1504
01:04:54,500 --> 01:04:56,800
And all sorts of stuff like this and you also don't have

1505
01:04:57,000 --> 01:04:59,000
Much of a handle on what things you do in.

1506
01:04:59,000 --> 01:05:02,400
Unity might do in terms of infecting, affecting your performance, all

1507
01:05:02,400 --> 01:05:03,100
that sort of stuff.

1508
01:05:03,500 --> 01:05:05,800
And so really the whole point of this dream is to show you all the

1509
01:05:05,800 --> 01:05:07,800
things you don't see everywhere else.

1510
01:05:08,100 --> 01:05:11,100
It's to do the opposite of what everyone else does, which is just grab

1511
01:05:11,100 --> 01:05:13,800
as much off-the-shelf stuff as they can and just kind of Cobble it

1512
01:05:13,800 --> 01:05:15,100
together to make a game.

1513
01:05:15,700 --> 01:05:16,600
This is the opposite of that.

1514
01:05:16,600 --> 01:05:18,100
This is to make every last thing ourselves.

1515
01:05:18,100 --> 01:05:21,600
So we learn how everything works and then you can decide what to use

1516
01:05:21,600 --> 01:05:23,300
and what not to use out of other people's stuff.

1517
01:05:23,300 --> 01:05:25,800
And when you do use them a, you'll be able to fix bugs in them if you

1518
01:05:25,800 --> 01:05:26,800
want, which is pretty awesome or

1519
01:05:26,900 --> 01:05:30,200
Improve their performance, which is also awesome, or you can just not

1520
01:05:30,200 --> 01:05:30,900
use some of them at all.

1521
01:05:30,900 --> 01:05:33,300
If you decide that something is crappy and you could do a better job,

1522
01:05:33,300 --> 01:05:34,000
you can do it.

1523
01:05:34,300 --> 01:05:36,500
And that's pretty important because I don't think we're at the point

1524
01:05:36,500 --> 01:05:39,200
yet these days where game development tools are perfect.

1525
01:05:41,300 --> 01:05:44,700
Are you speaking of with Floats?

1526
01:05:44,700 --> 01:05:46,700
Or we be changing over to fix Point floats.

1527
01:05:46,700 --> 01:05:48,500
Fixed point is a bad idea.

1528
01:05:48,500 --> 01:05:52,200
These days, Hardware likes floating point and we'll also do things

1529
01:05:52,200 --> 01:05:52,600
with floating Point.

1530
01:05:52,600 --> 01:05:55,600
Fixed Point ends up costing, you a lot of operations.

1531
01:05:55,600 --> 01:05:59,900
You can do things twice as wide, if you do them in in fixed.

1532
01:06:00,000 --> 01:06:03,700
Potentially, if you really worked it out, but I don't even think you

1533
01:06:03,700 --> 01:06:04,000
can.

1534
01:06:04,000 --> 01:06:06,000
I think you still need 32-bit because the shift it.

1535
01:06:06,000 --> 01:06:07,800
Yeah, so I think you can't even do twice as wide.

1536
01:06:07,800 --> 01:06:09,600
So I think you're basically always at a loser.

1537
01:06:09,600 --> 01:06:11,600
You're going to lose performance by going to fixed point.

1538
01:06:11,600 --> 01:06:13,000
So we're definitely not going to be fixed blank.

1539
01:06:13,000 --> 01:06:16,000
It's a real bad idea on Modern Hardware, I think.

1540
01:06:22,400 --> 01:06:25,400
Wouldn't one expect for pixels per frame at 30fps to look a little

1541
01:06:25,400 --> 01:06:25,900
jerky.

1542
01:06:25,900 --> 01:06:31,100
Not really not really and it looks it does look pretty smooth.

1543
01:06:31,100 --> 01:06:33,100
Now that we fixed the bug, right?

1544
01:06:36,500 --> 01:06:37,900
Yeah, it looks pretty smooth.

1545
01:06:37,900 --> 01:06:40,100
You can see a little beat frequency, which I think is because we're

1546
01:06:40,100 --> 01:06:41,400
not on the again.

1547
01:06:42,000 --> 01:06:46,300
You can, well, and you can also see the rounding, so you can see that

1548
01:06:46,300 --> 01:06:47,000
when it rounds over.

1549
01:06:47,000 --> 01:06:50,800
So when we get sub pixel Precision in for our drawing, that'll fix

1550
01:06:50,800 --> 01:06:51,400
that as well.

1551
01:06:51,400 --> 01:06:52,400
So that'll be a good thing.

1552
01:06:52,600 --> 01:06:53,100
But yeah.

1553
01:06:58,700 --> 01:06:59,900
Have you heard anything about hacks?

1554
01:06:59,900 --> 01:07:00,900
What's your opinion on it?

1555
01:07:00,900 --> 01:07:02,200
I don't have an opinion on it.

1556
01:07:02,800 --> 01:07:07,300
I know Daniel Ben, macdui uses it to make Ernesto, which is a game

1557
01:07:07,300 --> 01:07:08,100
that I like a lot.

1558
01:07:08,100 --> 01:07:12,000
So obviously, you can make a game in it that I like to tell you that,

1559
01:07:12,000 --> 01:07:13,000
that's all I know about it.

1560
01:07:14,300 --> 01:07:18,200
Shouldn't hero move, one pixel per frame to stop jerkiness.

1561
01:07:18,600 --> 01:07:20,000
No, okay, so I think we covered that.

1562
01:07:22,800 --> 01:07:24,100
Let's see.

1563
01:07:28,500 --> 01:07:30,300
Yesterday, you discussed explorative programming.

1564
01:07:30,300 --> 01:07:32,500
How do you compare that with the Agile development process?

1565
01:07:32,500 --> 01:07:33,800
That's prevalent in software development.

1566
01:07:33,800 --> 01:07:35,600
Are there major differences between the two?

1567
01:07:38,500 --> 01:07:41,400
So agile software development is.

1568
01:07:42,900 --> 01:07:46,900
Yes, I guess what I would say about that is I don't know what people

1569
01:07:46,900 --> 01:07:49,600
always mean when they say that because I feel like there's different

1570
01:07:49,600 --> 01:07:51,700
schools of thought on agile like

1571
01:07:53,600 --> 01:07:55,300
I mean, I don't know.

1572
01:07:55,400 --> 01:07:56,900
I guess I would have to go read.

1573
01:07:56,900 --> 01:07:58,500
What the latest definition of agile.

1574
01:07:58,500 --> 01:08:00,600
Programming is or what you think it means.

1575
01:08:00,600 --> 01:08:04,300
When you say that before, I can really give a complete answer.

1576
01:08:04,600 --> 01:08:08,800
But I guess what I would say is the problem or the reason why I think

1577
01:08:08,800 --> 01:08:11,400
it's important to say things, the way I said them versus Agile

1578
01:08:11,400 --> 01:08:13,900
development is a Giles development.

1579
01:08:14,000 --> 01:08:19,700
Is more about not trying to weigh yourself down with other things

1580
01:08:19,700 --> 01:08:20,300
you're doing.

1581
01:08:21,100 --> 01:08:23,200
As a productivity measure, right?

1582
01:08:23,200 --> 01:08:24,800
I think that's typically how they frame it.

1583
01:08:25,399 --> 01:08:26,399
But I've never seen them.

1584
01:08:26,399 --> 01:08:32,200
Talk about what I talked about, which is why you care about not doing

1585
01:08:32,200 --> 01:08:33,000
software planning.

1586
01:08:33,500 --> 01:08:36,000
Because a lot of people think, you know, talking about agile software

1587
01:08:36,000 --> 01:08:36,300
development.

1588
01:08:36,300 --> 01:08:39,700
They just talk about the not doing something, but they don't talk

1589
01:08:39,700 --> 01:08:43,700
about the why you don't do it in a way that I find compelling.

1590
01:08:44,100 --> 01:08:46,899
And so, the reason that I talked about it, the way I did is because

1591
01:08:46,899 --> 01:08:50,700
hopefully like drawing that map that I drew of like the projects.

1592
01:08:50,899 --> 01:08:52,399
Space and the state that it's in.

1593
01:08:52,899 --> 01:08:56,000
I feel like that crystallizes a lot clearer for people.

1594
01:08:56,300 --> 01:08:59,700
Why you care about not doing a lot of upfront design.

1595
01:09:00,000 --> 01:09:05,200
It's it's not because you know, it's more fun or these other sorts of

1596
01:09:05,200 --> 01:09:08,000
things which you might say about Agile development or because you

1597
01:09:08,000 --> 01:09:11,700
know, it allows you to respond to things more quickly or that sort of

1598
01:09:11,700 --> 01:09:12,200
stuff.

1599
01:09:12,500 --> 01:09:16,500
It's more because there is no way to set the way points correctly for

1600
01:09:16,500 --> 01:09:17,200
your map.

1601
01:09:17,200 --> 01:09:21,500
If you could then software planning would actually be very useful,

1602
01:09:21,700 --> 01:09:22,300
right?

1603
01:09:23,300 --> 01:09:26,300
And it's the fact that you can't set the waypoints, is why it's not.

1604
01:09:26,300 --> 01:09:26,800
So I don't know.

1605
01:09:26,800 --> 01:09:29,800
So so I don't necessarily know if I disagree with thing.

1606
01:09:30,000 --> 01:09:31,200
Things in Agile development or not.

1607
01:09:31,200 --> 01:09:33,300
Because I haven't read much about the latest discussion.

1608
01:09:33,300 --> 01:09:35,399
I had last time I read about agile software development was probably

1609
01:09:35,399 --> 01:09:38,399
like 2001 or something like this.

1610
01:09:38,700 --> 01:09:39,700
It was probably quite some time.

1611
01:09:39,700 --> 01:09:42,600
Might even actually might have been longer than that, but

1612
01:09:44,600 --> 01:09:46,500
I read about adalind about it when it first came out.

1613
01:09:46,500 --> 01:09:48,800
We put you that way which is a long, long time ago.

1614
01:09:49,899 --> 01:09:52,600
And so, so I'm not really prepared to talk about the composite

1615
01:09:52,600 --> 01:09:53,300
comparison to much.

1616
01:09:53,300 --> 01:09:58,100
They're all I would say is I agree with it to the extent, with which

1617
01:09:58,100 --> 01:10:00,100
lines up with what I said yesterday.

1618
01:10:00,400 --> 01:10:02,900
And if it doesn't line up with that than I don't,

1619
01:10:05,700 --> 01:10:08,100
What's procrastination a problem for you?

1620
01:10:08,100 --> 01:10:08,900
Yes, it is.

1621
01:10:08,900 --> 01:10:10,200
Absolutely a problem for me.

1622
01:10:10,700 --> 01:10:12,100
I think it's a problem for everyone.

1623
01:10:12,200 --> 01:10:13,700
When you hit a hard problem.

1624
01:10:16,600 --> 01:10:19,200
The tendency is to try to go do something else.

1625
01:10:19,200 --> 01:10:19,800
It's easier.

1626
01:10:19,900 --> 01:10:20,500
Right?

1627
01:10:21,500 --> 01:10:23,600
And so procrastination is a problem.

1628
01:10:23,600 --> 01:10:24,800
And I talked about this a little bit.

1629
01:10:24,900 --> 01:10:28,000
I think the key to solving procrastination is to force yourself to do,

1630
01:10:28,000 --> 01:10:31,700
a little bit of programming on the problem every day because you may

1631
01:10:31,700 --> 01:10:35,100
get to a point where you literally can't do eight hours of programming

1632
01:10:35,100 --> 01:10:38,300
on the problem and you can try to force yourself to do it, but you

1633
01:10:38,300 --> 01:10:39,700
won't, right.

1634
01:10:42,200 --> 01:10:45,000
And so the key is to never let it drop to zero.

1635
01:10:45,500 --> 01:10:48,200
The key is you got to get through those points by forcing yourself to

1636
01:10:48,200 --> 01:10:49,800
do an hour or two hours a day.

1637
01:10:50,100 --> 01:10:53,700
Do whatever you have to do to force yourself to do, two hours of

1638
01:10:53,700 --> 01:10:55,600
programming on a hard problem every day.

1639
01:10:56,500 --> 01:11:00,200
Even if the programming is useless and sucks just type in 2 hours of

1640
01:11:00,200 --> 01:11:03,200
code a day and that will get you through a lot of those

1641
01:11:03,200 --> 01:11:05,800
procrastination points because they do happen.

1642
01:11:05,800 --> 01:11:07,500
And the key is to not stop.

1643
01:11:07,500 --> 01:11:11,200
If you stop programming, you will you could procrastinate forever, but

1644
01:11:11,200 --> 01:11:11,700
if you

1645
01:11:11,800 --> 01:11:12,400
Two hours a day.

1646
01:11:12,400 --> 01:11:15,000
Eventually, you will randomly hit on the thing that gets you to move

1647
01:11:15,000 --> 01:11:15,600
forwards.

1648
01:11:20,700 --> 01:11:23,800
Do you think C++ is easier than C sharp because I took C sharp?

1649
01:11:23,800 --> 01:11:24,400
This semester.

1650
01:11:24,400 --> 01:11:25,200
It was a pain in the butt.

1651
01:11:25,200 --> 01:11:26,200
That's more of a pre stream.

1652
01:11:26,200 --> 01:11:26,600
Question.

1653
01:11:26,600 --> 01:11:28,900
So come at the beginning of the stream, and I answer questions like

1654
01:11:28,900 --> 01:11:29,400
that.

1655
01:11:30,300 --> 01:11:33,400
Try to keep the questions too about what we're doing for now.

1656
01:11:33,500 --> 01:11:36,500
Could all the print outputs have impact on the frame rate, and be the

1657
01:11:36,500 --> 01:11:38,000
cause of the ruffed input.

1658
01:11:38,200 --> 01:11:40,700
No, not really, although, I should get rid of those.

1659
01:11:42,500 --> 01:11:44,600
This machine has plenty of CPUs in it.

1660
01:11:45,100 --> 01:11:46,300
It's definitely not a plenty.

1661
01:11:46,300 --> 01:11:46,700
Of course.

1662
01:11:46,700 --> 01:11:50,200
It's definitely not going to be a problem to have Windows print out.

1663
01:11:50,900 --> 01:11:54,000
There's a little bit of a sync Point thing that happens there, but no,

1664
01:11:54,000 --> 01:11:57,200
it's not, it's not and we've solved the jerkiness so we know what it

1665
01:11:57,200 --> 01:11:57,400
was.

1666
01:11:57,400 --> 01:11:59,500
It was the fact that we didn't set the

1667
01:12:00,000 --> 01:12:00,800
In the right place.

1668
01:12:08,100 --> 01:12:10,500
Use some space on the top or bottom of the screen for statistics.

1669
01:12:10,500 --> 01:12:14,500
And you, I, well, we'll talk about a little bit.

1670
01:12:14,500 --> 01:12:16,900
That's a design concern, but we can talk about that a little later,

1671
01:12:17,200 --> 01:12:19,800
the desktop Visa issue will only be a problem on Windows Vista plus,

1672
01:12:19,800 --> 01:12:22,600
which means we can use the command to get it from the dwm there, and

1673
01:12:22,600 --> 01:12:24,700
use the direct draw one on Windows XP.

1674
01:12:27,800 --> 01:12:28,900
The vsync timing.

1675
01:12:28,900 --> 01:12:30,500
Does there a dwm?

1676
01:12:30,500 --> 01:12:32,800
Vsync timing though, or just refresh rate?

1677
01:12:34,100 --> 01:12:35,900
Can we pack the colors in a struct?

1678
01:12:36,000 --> 01:12:39,300
Yes, I think I talked about that in, on the Stream.

1679
01:12:40,700 --> 01:12:43,400
Is there a reason for choosing the tiles to be square except for ease

1680
01:12:43,400 --> 01:12:43,900
of use?

1681
01:12:44,800 --> 01:12:48,800
There's no in particular, the particular reason in terms of code, we

1682
01:12:48,800 --> 01:12:52,000
could make the tiles any size we want but I feel like making them

1683
01:12:52,000 --> 01:12:52,400
Square.

1684
01:12:52,400 --> 01:12:56,200
Makes it easy for the player to reason about them because they know

1685
01:12:56,200 --> 01:13:00,200
roughly that, like if they are moving up, they will cross the same

1686
01:13:00,200 --> 01:13:04,000
amount of tiles as if they're moving left in a certain amount of time.

1687
01:13:04,200 --> 01:13:06,500
So I feel like that's a little easier for them.

1688
01:13:06,500 --> 01:13:07,100
I don't know.

1689
01:13:07,200 --> 01:13:09,400
That could be just me but I feel like design-wise.

1690
01:13:09,400 --> 01:13:10,300
It's probably a good idea to

1691
01:13:10,500 --> 01:13:12,700
Sigma square tiles, but I don't know.

1692
01:13:14,200 --> 01:13:15,800
Just just something to think about.

1693
01:13:21,000 --> 01:13:22,200
Do you have anything to your almond milk?

1694
01:13:22,200 --> 01:13:24,000
Other than soaked, almonds and water know?

1695
01:13:25,600 --> 01:13:26,400
From yesterday's dream.

1696
01:13:26,400 --> 01:13:28,400
How can you tell the difference between needing to correct?

1697
01:13:28,400 --> 01:13:28,800
The direction?

1698
01:13:28,800 --> 01:13:32,400
You're taking your design, an actual fundamentally hard problem is it

1699
01:13:32,400 --> 01:13:34,100
usually just obvious at the time?

1700
01:13:34,500 --> 01:13:36,300
No, you should.

1701
01:13:36,300 --> 01:13:37,700
It has nothing to do with obviousness.

1702
01:13:37,700 --> 01:13:39,500
It's actually they're two different things.

1703
01:13:40,800 --> 01:13:42,700
So what you have to understand

1704
01:13:44,600 --> 01:13:49,400
Is you should always problems in programming are.

1705
01:13:49,400 --> 01:13:53,200
Never really about design or architecture of the code.

1706
01:13:53,900 --> 01:13:58,500
Basically solving a problem in programming is about whether the code

1707
01:13:58,500 --> 01:14:00,000
works, right?

1708
01:14:00,000 --> 01:14:02,400
So, you know, whether you've solved the hard problem as to whether the

1709
01:14:02,400 --> 01:14:06,200
code works and executes in the amount of time that it needs to execute

1710
01:14:06,200 --> 01:14:08,100
in that is solving the problem.

1711
01:14:09,100 --> 01:14:12,000
So you need to do that first and then has nothing to do with your

1712
01:14:12,000 --> 01:14:12,800
design walk.

1713
01:14:12,800 --> 01:14:16,400
That is just, did you write a piece of code that works at all.

1714
01:14:16,700 --> 01:14:18,900
Once you have the piece of code that works and meets the

1715
01:14:18,900 --> 01:14:20,500
specifications that you have for it.

1716
01:14:20,500 --> 01:14:20,600
Right?

1717
01:14:20,600 --> 01:14:22,100
So it's like I want to do this renderer.

1718
01:14:22,200 --> 01:14:23,700
It needs to run in this amount of time.

1719
01:14:23,900 --> 01:14:27,300
So I'm like, getting some code that can actually do the blind, or do

1720
01:14:27,300 --> 01:14:30,300
the whatever, draw the rectangle, whatever, in the amount of

1721
01:14:30,400 --> 01:14:32,000
milliseconds that I said it had to do.

1722
01:14:32,400 --> 01:14:36,000
So you do that first and that is the part that is up these the hard or

1723
01:14:36,000 --> 01:14:36,700
easy problem.

1724
01:14:36,700 --> 01:14:38,800
It may be really hard to do that and you got to spend

1725
01:14:39,000 --> 01:14:42,000
Three months doing, all kinds of crazy, assembly optimizations to

1726
01:14:42,000 --> 01:14:43,000
figure out how to get that to work.

1727
01:14:43,000 --> 01:14:46,100
But you do that and that has nothing to do with the design that is

1728
01:14:46,100 --> 01:14:49,700
strictly about getting a isolated piece of code, where you can do

1729
01:14:49,700 --> 01:14:52,600
anything you want, anything at all, and getting it to work.

1730
01:14:53,300 --> 01:14:54,700
Then, there's the problem of.

1731
01:14:54,700 --> 01:14:57,300
How do you integrate that into the design of the code?

1732
01:14:57,600 --> 01:14:59,400
And that is just a fundamentally?

1733
01:14:59,500 --> 01:14:59,800
Yes.

1734
01:15:00,000 --> 01:15:03,100
I think it's like, here are the constraints on this piece.

1735
01:15:03,100 --> 01:15:04,400
It has to do these things.

1736
01:15:04,900 --> 01:15:07,300
So how do we make it do those things within the context of our

1737
01:15:07,300 --> 01:15:07,900
program?

1738
01:15:08,000 --> 01:15:11,400
We make the changes necessary to do that and we move forwards, right?

1739
01:15:11,700 --> 01:15:15,800
So what you're doing that at that point is you're always sort of just

1740
01:15:15,800 --> 01:15:20,300
doing a check on how clean is this at this point when I integrate it

1741
01:15:20,300 --> 01:15:20,600
in?

1742
01:15:20,800 --> 01:15:23,800
If my answer is things are getting very hairy now and I can't manage

1743
01:15:23,800 --> 01:15:24,200
them.

1744
01:15:24,400 --> 01:15:26,400
Then you know, that you shouldn't move forward yet.

1745
01:15:26,400 --> 01:15:29,000
You know, that you kind of have to go through rework, some things,

1746
01:15:29,000 --> 01:15:29,800
pull some things out.

1747
01:15:30,000 --> 01:15:32,200
Out but that's not about solving a problem.

1748
01:15:32,200 --> 01:15:35,700
That's just about structuring the code, you know, look at it.

1749
01:15:35,700 --> 01:15:38,300
What are the reasons why it's getting hard for you to manage.

1750
01:15:38,300 --> 01:15:42,300
What are the reasons why it's Harry decide how to fix those and move

1751
01:15:42,300 --> 01:15:42,700
forwards.

1752
01:15:42,900 --> 01:15:46,400
So, separate the two, you got to separate the two there really aren't

1753
01:15:46,400 --> 01:15:48,000
hard code structure problems.

1754
01:15:48,000 --> 01:15:50,100
They usually just emerge about themselves.

1755
01:15:50,100 --> 01:15:54,600
But sometimes guess the one caveat I would say that sometimes you hit

1756
01:15:54,600 --> 01:15:57,500
the limitations of the language and that's usually when I go to

1757
01:15:57,500 --> 01:15:58,200
metaprogramming,

1758
01:15:59,400 --> 01:16:02,700
But, you know, if you hit the limitation of the language, you may be

1759
01:16:03,200 --> 01:16:05,700
stuck in a place where you're just like, okay, we got except some

1760
01:16:05,700 --> 01:16:06,300
Badness.

1761
01:16:06,700 --> 01:16:10,400
So things are not going to be ideal and that's just the way it goes or

1762
01:16:10,400 --> 01:16:13,100
you like like I say you go you go metaprogramming and you solve it

1763
01:16:13,100 --> 01:16:13,500
that way.

1764
01:16:17,800 --> 01:16:20,200
Would it be so bad at the tiles were rectangular if you Ortho

1765
01:16:20,200 --> 01:16:22,600
projector Square from three-quarter, overhead view, get a rectangle.

1766
01:16:22,600 --> 01:16:24,200
Anyway, it's not that it's bad.

1767
01:16:24,200 --> 01:16:27,200
It's that it's harder for the player to reason about this is like a

1768
01:16:27,200 --> 01:16:29,200
big thing that people don't I think appreciate.

1769
01:16:29,300 --> 01:16:33,000
But, you know, in the old days, anyone could pick up a Nez controller

1770
01:16:33,000 --> 01:16:36,000
and play in as game Nintendo Entertainment System, right?

1771
01:16:36,000 --> 01:16:39,200
And part of the reason is because it was 2D things move the consistent

1772
01:16:39,200 --> 01:16:42,400
rate on the screen and most people can into it.

1773
01:16:42,500 --> 01:16:45,200
Three, two, dimensional motion, like that very easily.

1774
01:16:45,900 --> 01:16:49,300
Started moving to like 3D games and a lot of this other stuff you

1775
01:16:49,300 --> 01:16:53,100
fundamentally lose a bunch of players in my opinion, who just they

1776
01:16:53,100 --> 01:16:54,900
don't have that 3D intuition.

1777
01:16:55,000 --> 01:16:59,300
They don't know how to project distances in a rectangular fashion like

1778
01:16:59,300 --> 01:17:03,200
the way you're talking about and so modern Gamers who play a lot of

1779
01:17:03,200 --> 01:17:04,200
games nowadays can do it.

1780
01:17:04,200 --> 01:17:07,700
Trivially, they totally get perspective, projection or orthographic

1781
01:17:07,700 --> 01:17:11,600
projection of vectors and they know how to Ballpark those figures, but

1782
01:17:11,600 --> 01:17:15,400
it just makes it a lot harder and like even a modern game that I like

1783
01:17:15,400 --> 01:17:15,700
a lot.

1784
01:17:15,800 --> 01:17:18,400
Not because I mentioned Binding of Isaac earlier, even a modern game

1785
01:17:18,400 --> 01:17:21,900
that like a lot can really make it hard for the player like Binding of

1786
01:17:21,900 --> 01:17:22,400
Isaac.

1787
01:17:22,500 --> 01:17:24,500
It's impossible to tell whether your shots are going to hit something

1788
01:17:24,500 --> 01:17:25,000
or not.

1789
01:17:25,100 --> 01:17:27,700
Like it takes a long time to learn that because it's this weird

1790
01:17:28,000 --> 01:17:30,300
pseudo-3d height based thing.

1791
01:17:30,300 --> 01:17:34,100
And like, in the old days, if a bullet hit your Sprite and they

1792
01:17:34,100 --> 01:17:36,200
collided, then your they collided, right?

1793
01:17:36,200 --> 01:17:38,400
And that's really easy for people to understand.

1794
01:17:38,500 --> 01:17:41,200
And so a lot of the things that I'm doing with the design of this game

1795
01:17:41,200 --> 01:17:45,700
is trying to make it easy for people to understand the rules, and

1796
01:17:45,800 --> 01:17:47,600
And how the game works in that way, right?

1797
01:17:47,600 --> 01:17:49,500
So they can just see if a thing hits.

1798
01:17:49,500 --> 01:17:51,000
My guy, then it hit the guy.

1799
01:17:51,000 --> 01:17:54,000
And it's not about whether that was accurate in 3D, or whatever.

1800
01:17:54,100 --> 01:17:56,800
It's just easy for people to see and understand.

1801
01:17:56,800 --> 01:17:59,800
So, I want to avoid rectangles, because that forces the player.

1802
01:18:00,000 --> 01:18:04,200
To do this kind of projection understanding in their head of how that

1803
01:18:04,200 --> 01:18:04,600
works.

1804
01:18:07,900 --> 01:18:08,500
What do bugger do?

1805
01:18:08,500 --> 01:18:09,300
Use on Linux?

1806
01:18:09,600 --> 01:18:10,800
I hate Linux developers.

1807
01:18:11,000 --> 01:18:11,900
They are awful.

1808
01:18:12,200 --> 01:18:12,900
I've never found one.

1809
01:18:12,900 --> 01:18:13,700
That's any good.

1810
01:18:14,800 --> 01:18:16,200
I would say best of luck to you.

1811
01:18:16,700 --> 01:18:19,800
I'm really hoping someone someday makes a good Linux to bugger.

1812
01:18:20,300 --> 01:18:23,000
We don't have one yet and that's too bad.

1813
01:18:23,600 --> 01:18:28,300
But I've never found it about her on the next that was that was even

1814
01:18:28,500 --> 01:18:34,400
remotely usable and I wish I had a Linux VM on this machine right now.

1815
01:18:34,400 --> 01:18:37,600
I would boot it up for you and show you just why.

1816
01:18:37,700 --> 01:18:40,300
Think they're so bad because people sometimes were like, oh, it's

1817
01:18:40,300 --> 01:18:44,700
fine, use blah blah, use code blocks or use QT, Creator, whatever it.

1818
01:18:45,000 --> 01:18:46,800
No, they're all awful.

1819
01:18:47,000 --> 01:18:50,300
They just don't work at all and a lot of times, you got to go back to

1820
01:18:50,300 --> 01:18:52,200
command line GDB to even get stuff.

1821
01:18:53,400 --> 01:18:54,100
It's awful.

1822
01:18:54,200 --> 01:18:55,300
It's real, real awful.

1823
01:18:57,100 --> 01:18:59,800
Yeah, that makes two buggers are absolutely terrible.

1824
01:18:59,800 --> 01:19:03,100
And so that's actually what makes developing on, Linux bad right now.

1825
01:19:03,200 --> 01:19:06,800
I actually like, developing on Linux right up to that point

1826
01:19:07,100 --> 01:19:07,600
everything.

1827
01:19:07,700 --> 01:19:08,500
This is okay for me.

1828
01:19:08,500 --> 01:19:08,900
Now.

1829
01:19:09,000 --> 01:19:10,700
I can use emacs and it works the same.

1830
01:19:10,700 --> 01:19:13,800
Obviously, as I'm windows and all that stuff and just, yeah, it's real

1831
01:19:13,800 --> 01:19:15,000
bad, real bad.

1832
01:19:15,200 --> 01:19:18,200
I really want to get salt because I prefer, I would prefer to use

1833
01:19:18,200 --> 01:19:19,700
Linux most of the time.

1834
01:19:21,000 --> 01:19:23,500
And and really, that's the thing that really makes it hard for me.

1835
01:19:31,200 --> 01:19:32,200
Let's see.

1836
01:19:35,500 --> 01:19:38,500
Why do we see nine threads exiting at the end of the program in debug

1837
01:19:38,500 --> 01:19:39,000
output.

1838
01:19:39,000 --> 01:19:40,000
Where are they coming from?

1839
01:19:40,100 --> 01:19:43,300
So unfortunately, you will see this sort of thing a lot.

1840
01:19:44,200 --> 01:19:45,700
So he's the, the question.

1841
01:19:45,700 --> 01:19:47,700
The person was asked, the question is asking about this stuff.

1842
01:19:48,400 --> 01:19:51,400
So, actually, what you'll notice, you can actually see these little

1843
01:19:51,400 --> 01:19:52,000
more explicitly.

1844
01:19:52,000 --> 01:19:55,700
If you'd like, if we set a breakpoint in our program, you can actually

1845
01:19:55,700 --> 01:19:58,800
click on this threads window thing here and see them.

1846
01:19:58,800 --> 01:20:04,400
All right, and if you look, if you don't have that window, it's in

1847
01:20:04,400 --> 01:20:05,000
debug.

1848
01:20:05,200 --> 01:20:07,400
Windows, where is it?

1849
01:20:07,400 --> 01:20:07,800
Threads?

1850
01:20:07,800 --> 01:20:08,600
It's down here.

1851
01:20:09,200 --> 01:20:12,500
This is the thing that you want it want to pick and what you can see

1852
01:20:12,500 --> 01:20:16,500
is you can actually see by looking at where those threads are and who

1853
01:20:16,500 --> 01:20:17,000
created them.

1854
01:20:17,000 --> 01:20:19,400
You can see what's going on a little bit more clearer.

1855
01:20:20,300 --> 01:20:23,600
So you've got basically Windows creating all of these threads.

1856
01:20:23,600 --> 01:20:26,000
Some of them are system threads in ntdll.

1857
01:20:26,000 --> 01:20:28,300
So we can't really tell who is behind them.

1858
01:20:28,600 --> 01:20:29,000
Other ones.

1859
01:20:29,000 --> 01:20:29,900
We can sell very clearly.

1860
01:20:29,900 --> 01:20:31,100
These are direct sound threads.

1861
01:20:31,100 --> 01:20:31,900
There's three of them.

1862
01:20:31,900 --> 01:20:34,100
Because how could you possibly make sound output with less than three

1863
01:20:34,100 --> 01:20:34,900
at three threads?

1864
01:20:36,600 --> 01:20:38,400
So they're there and then, mmm.

1865
01:20:38,400 --> 01:20:39,000
Dev AP.

1866
01:20:39,000 --> 01:20:39,900
I'm not sure what that is.

1867
01:20:39,900 --> 01:20:43,200
I don't know if that's the multimedia service or they're not sure what

1868
01:20:43,200 --> 01:20:44,400
that is Colonel bi.

1869
01:20:44,400 --> 01:20:44,800
Yeah.

1870
01:20:44,800 --> 01:20:45,300
I don't know.

1871
01:20:45,600 --> 01:20:48,200
I'm not sure if you go here, you can see the stack a little more

1872
01:20:48,200 --> 01:20:50,600
explicitly, but usually, it doesn't tell you anything again, they're

1873
01:20:50,600 --> 01:20:51,900
all like kind of nameless places.

1874
01:20:52,200 --> 01:20:54,800
It may be that if you install there, you can install Mt.

1875
01:20:54,800 --> 01:20:55,500
Symbols.

1876
01:20:55,600 --> 01:20:57,700
There's a, there's a thing you can install that's like

1877
01:21:00,000 --> 01:21:00,800
If I can find it.

1878
01:21:03,200 --> 01:21:04,900
Windows, debug symbols.

1879
01:21:07,400 --> 01:21:08,000
so,

1880
01:21:09,700 --> 01:21:12,100
Okay, so this thing, right?

1881
01:21:13,200 --> 01:21:16,500
If you, if you follow the instructions on here, or if you install

1882
01:21:16,500 --> 01:21:20,900
Windows symbol server, these sorts of things, you can actually get

1883
01:21:21,700 --> 01:21:24,200
symbols for some of this, some stuff, sometimes where it will tell you

1884
01:21:24,200 --> 01:21:26,100
what functions these threads are in.

1885
01:21:26,500 --> 01:21:28,700
I don't know if that makes sense, but it would basically tell you what

1886
01:21:28,700 --> 01:21:29,900
the function names were here.

1887
01:21:30,500 --> 01:21:33,700
And so, if you're really curious about what each side is doing, if saw

1888
01:21:33,700 --> 01:21:36,200
that symbol server and take a look at this window and you may get a

1889
01:21:36,200 --> 01:21:37,400
little more insight into it.

1890
01:21:37,800 --> 01:21:38,900
So hope that helps

1891
01:21:39,500 --> 01:21:40,700
Those are the threads that are exiting.

1892
01:21:44,700 --> 01:21:47,300
How many more hours required to get the win32 layer to shippable

1893
01:21:47,300 --> 01:21:47,900
Quality?

1894
01:21:48,000 --> 01:21:48,800
Oh.

1895
01:21:50,300 --> 01:21:57,800
Well, so I guess what I would say is, if I was programming on my own,

1896
01:21:59,700 --> 01:22:01,400
I would say it would probably take.

1897
01:22:03,500 --> 01:22:06,500
Two weeks of time, maybe.

1898
01:22:09,500 --> 01:22:13,600
If I was really programming seriously for two weeks straight, so I

1899
01:22:13,600 --> 01:22:15,500
suspect it's going to take up a huge chunk.

1900
01:22:15,500 --> 01:22:18,900
It'll probably take up 50 days on the stream to do a ship of a win32

1901
01:22:19,000 --> 01:22:19,400
layer.

1902
01:22:21,200 --> 01:22:21,400
Now.

1903
01:22:21,400 --> 01:22:25,700
That's that's my idea of a ship of a winter to Quality a shippable

1904
01:22:25,700 --> 01:22:26,500
win32 layer.

1905
01:22:27,000 --> 01:22:30,800
Other people certainly ship things that are not perhaps as complete as

1906
01:22:30,800 --> 01:22:31,800
what I would imagine.

1907
01:22:31,900 --> 01:22:32,900
Should it should be

1908
01:22:34,500 --> 01:22:38,100
So you could argue that it, we could do it shorter, but when we

1909
01:22:38,100 --> 01:22:41,600
actually go to do that ship of a layer, it's a pretty big undertaking.

1910
01:22:42,100 --> 01:22:43,200
That's why I didn't do it.

1911
01:22:43,200 --> 01:22:47,700
That's why I didn't do it now is because I felt like we would be

1912
01:22:47,700 --> 01:22:51,300
sitting here for 100 days, you know, doing nothing but win32 and I

1913
01:22:51,300 --> 01:22:52,200
didn't think that was productive.

1914
01:22:52,200 --> 01:22:54,600
So I just did the minimum necessary to kind of get something up and

1915
01:22:54,600 --> 01:22:55,000
running.

1916
01:22:55,800 --> 01:22:57,900
So not the absolute minimum, but you know,

1917
01:22:58,700 --> 01:22:59,900
Not much more than that.

1918
01:23:03,500 --> 01:23:04,800
Are we locked into a tile size?

1919
01:23:04,800 --> 01:23:08,100
Once we get going, or can we make that Dynamic per level or per room

1920
01:23:08,100 --> 01:23:09,300
later in the project?

1921
01:23:10,100 --> 01:23:14,400
We, we certainly could make it Dynamic.

1922
01:23:14,400 --> 01:23:16,900
I don't think I will make it dynamic because I want it to be

1923
01:23:16,900 --> 01:23:18,000
consistent for the player.

1924
01:23:18,000 --> 01:23:20,700
Like I want the player to always see the same tile size everywhere.

1925
01:23:20,800 --> 01:23:24,400
So I probably won't make a dynamic but it's not a big deal to write

1926
01:23:24,400 --> 01:23:26,200
the code to be dynamic.

1927
01:23:26,600 --> 01:23:29,500
And we probably will sort of write the code to be a little bit dynamic

1928
01:23:29,500 --> 01:23:32,400
in the sense that we will.

1929
01:23:32,700 --> 01:23:35,500
Be able to change the pixel size of the tiles at any time when we

1930
01:23:35,500 --> 01:23:38,800
actually get there to that point without.

1931
01:23:38,800 --> 01:23:43,300
So without having really had to change any code and so we will be

1932
01:23:43,300 --> 01:23:45,200
doing a little bit of that but I don't think I'm going to actually

1933
01:23:45,200 --> 01:23:47,300
ever make the tiles change depending on where you are.

1934
01:23:47,400 --> 01:23:48,400
I don't think I'll probably do that.

1935
01:23:56,100 --> 01:23:57,100
Do you have timing info?

1936
01:23:57,100 --> 01:23:58,200
.Q p CV.

1937
01:23:58,200 --> 01:23:59,700
Blank is the qpc value before.

1938
01:23:59,700 --> 01:23:59,800
The

1939
01:24:00,000 --> 01:24:01,500
blank, okay, so that's

1940
01:24:03,900 --> 01:24:06,200
That would be what we need, if that makes sense.

1941
01:24:06,200 --> 01:24:08,300
But again, I'm not sure that we really need to do that.

1942
01:24:08,300 --> 01:24:08,800
I don't know.

1943
01:24:08,800 --> 01:24:12,300
It seems like kind of a waste of time to go chasing vertical, retrace

1944
01:24:12,300 --> 01:24:13,700
sink on our prototype player.

1945
01:24:14,100 --> 01:24:17,500
But you know, if you guys want to do it you could always do it to in

1946
01:24:17,500 --> 01:24:18,500
your copy of the platform layer.

1947
01:24:18,500 --> 01:24:19,100
If you'd like.

1948
01:24:22,600 --> 01:24:23,100
Let's see.

1949
01:24:23,100 --> 01:24:24,500
Why do you not clean up your code?

1950
01:24:24,500 --> 01:24:25,800
It will be harder to find bugs.

1951
01:24:25,800 --> 01:24:28,600
If you do not, which code are you talking about that?

1952
01:24:28,600 --> 01:24:29,900
You would like to see cleaned up?

1953
01:24:32,500 --> 01:24:33,400
Let's see.

1954
01:24:37,700 --> 01:24:40,400
What do you think if you sell a t-shirt from handmade hero and write

1955
01:24:40,400 --> 01:24:40,700
on them?

1956
01:24:40,700 --> 01:24:42,500
I learned how to make a game from scratch.

1957
01:24:42,600 --> 01:24:45,000
I will buy it, good to know.

1958
01:24:45,800 --> 01:24:47,400
I don't know, go post on the forums.

1959
01:24:47,400 --> 01:24:50,900
If you want a nice to do t-shirts, we could think about it.

1960
01:24:50,900 --> 01:24:51,400
I don't know.

1961
01:24:51,600 --> 01:24:53,600
I haven't given any thought to it yet.

1962
01:24:53,600 --> 01:24:54,000
Sorry.

1963
01:24:58,600 --> 01:24:59,700
With your compression based approach.

1964
01:24:59,700 --> 01:25:02,100
Do you find yourself writing facades for everything?

1965
01:25:02,100 --> 01:25:03,800
So that both you and others are working with?

1966
01:25:03,800 --> 01:25:06,200
Can access your individual modules, regardless of how you've

1967
01:25:06,200 --> 01:25:07,100
implemented it.

1968
01:25:10,700 --> 01:25:13,400
So I don't know what you mean by facades.

1969
01:25:13,700 --> 01:25:16,800
Typically, what I will do is I do expose interfaces that are

1970
01:25:16,800 --> 01:25:17,700
relatively clean.

1971
01:25:17,700 --> 01:25:19,400
If I'm exporting it to someone else.

1972
01:25:21,300 --> 01:25:25,100
I will, I will typically expose interfaces that I think are clean and

1973
01:25:25,900 --> 01:25:30,400
insulate me from having to worry about them doing anything too

1974
01:25:30,400 --> 01:25:34,000
specific with with my code, that I know that I might want to change.

1975
01:25:35,800 --> 01:25:38,900
If that's the question you're asking but facade is kind of a loaded

1976
01:25:38,900 --> 01:25:40,700
word because that's not very specific.

1977
01:25:42,500 --> 01:25:43,500
So, yeah.

1978
01:25:46,700 --> 01:25:48,900
What's wrong with GDB basic?

1979
01:25:48,900 --> 01:25:49,200
What's wrong?

1980
01:25:49,200 --> 01:25:51,800
Sweetie be, is it does not display data in a convenient way.

1981
01:25:52,100 --> 01:25:55,700
It does not provide you a quick visual good.

1982
01:25:55,700 --> 01:25:59,000
Visualization of your source, code your source, code your assembly,

1983
01:25:59,000 --> 01:26:03,100
your registers, your watch, your debug output.

1984
01:26:05,700 --> 01:26:09,400
Visual Studio does a very good job of that relative to other de

1985
01:26:09,400 --> 01:26:11,100
buggers and GDB does not.

1986
01:26:11,500 --> 01:26:12,900
It's really bad at that.

1987
01:26:15,100 --> 01:26:16,000
Why not use clang?

1988
01:26:16,000 --> 01:26:16,400
I do use.

1989
01:26:16,400 --> 01:26:17,500
Clang on Linux.

1990
01:26:17,600 --> 01:26:18,300
I always use clang.

1991
01:26:21,200 --> 01:26:22,400
Let's see.

1992
01:26:27,700 --> 01:26:30,000
I'm a young adult who would like to get into coding but everywhere I

1993
01:26:30,000 --> 01:26:33,200
go lands up with the same stuff which leads to be boring and not

1994
01:26:33,200 --> 01:26:33,800
interactive.

1995
01:26:33,800 --> 01:26:35,200
How does one learn code?

1996
01:26:35,400 --> 01:26:36,900
That is a good question for the priest.

1997
01:26:36,900 --> 01:26:39,400
Ream come come to a stream early sometime.

1998
01:26:39,500 --> 01:26:42,100
Usually like 15 minutes before the handmade here.

1999
01:26:42,100 --> 01:26:43,000
Broadcast starts.

2000
01:26:43,500 --> 01:26:44,000
Come there.

2001
01:26:44,000 --> 01:26:46,300
And ask we talk about that sort of stuff in the free stream of time.

2002
01:26:50,800 --> 01:26:53,200
Since how you arrange the elements in your struck can influence a

2003
01:26:53,200 --> 01:26:53,500
size.

2004
01:26:53,500 --> 01:26:54,700
Is there a rule to follow on?

2005
01:26:54,700 --> 01:26:56,100
How to organize your structure?

2006
01:26:56,400 --> 01:26:56,900
Yes.

2007
01:26:56,900 --> 01:26:57,900
I think we talked about this.

2008
01:26:58,200 --> 01:26:59,600
Basically, it's about padding.

2009
01:27:01,300 --> 01:27:03,600
You might want to post on the forums about that, actually, because

2010
01:27:03,600 --> 01:27:06,300
the, I've talked about this extensively on previous episodes and maybe

2011
01:27:06,300 --> 01:27:08,500
they could link you to where it was.

2012
01:27:12,500 --> 01:27:13,500
Let's see.

2013
01:27:19,800 --> 01:27:22,600
A Melcher says you just have to right-click the stack frame in the

2014
01:27:22,600 --> 01:27:25,500
call stack View and download from Ms.

2015
01:27:25,500 --> 01:27:26,500
Symbol servers.

2016
01:27:27,500 --> 01:27:27,900
Really.

2017
01:27:28,200 --> 01:27:29,400
Is it just do that automatically?

2018
01:27:31,800 --> 01:27:33,900
Where are you guys talking about this?

2019
01:27:34,300 --> 01:27:34,900
Or

2020
01:27:37,500 --> 01:27:38,000
Let's try it.

2021
01:27:38,000 --> 01:27:38,700
Load symbols.

2022
01:27:41,200 --> 01:27:41,900
Did that work?

2023
01:27:42,300 --> 01:27:44,400
Whoa, holy cow.

2024
01:27:45,500 --> 01:27:48,100
That's a lot easier than it used to be.

2025
01:27:49,200 --> 01:27:50,100
Wow.

2026
01:27:50,100 --> 01:27:51,300
Can I do that here, too?

2027
01:27:54,100 --> 01:27:57,000
Oh man, that is a lot easier than it used to be guys.

2028
01:27:57,300 --> 01:27:58,300
That is pretty cool.

2029
01:27:59,400 --> 01:28:00,100
That is pretty cool.

2030
01:28:00,100 --> 01:28:04,000
Alright, so if that's true that we could do that for everything.

2031
01:28:04,000 --> 01:28:04,700
That's pretty handy.

2032
01:28:04,700 --> 01:28:07,100
So let's say we take one of these threads that we don't know what it

2033
01:28:07,100 --> 01:28:07,300
is.

2034
01:28:07,600 --> 01:28:11,000
We could go to, I think we can just double click on it or something to

2035
01:28:11,000 --> 01:28:11,500
switch to it.

2036
01:28:11,500 --> 01:28:11,900
Right?

2037
01:28:12,100 --> 01:28:13,100
How do I switch to it?

2038
01:28:14,100 --> 01:28:14,800
Switch to thread?

2039
01:28:14,800 --> 01:28:18,300
So, if I right, click on it hits, which to thread, right now, I should

2040
01:28:18,300 --> 01:28:21,200
be looking at this threads.

2041
01:28:21,600 --> 01:28:22,200
Yeah.

2042
01:28:22,400 --> 01:28:23,200
There we go.

2043
01:28:25,600 --> 01:28:26,300
Look at that.

2044
01:28:27,300 --> 01:28:29,800
Empty weight for work via worker Factory.

2045
01:28:29,900 --> 01:28:32,400
Oh, God, maybe I didn't want to see this.

2046
01:28:32,700 --> 01:28:33,500
Look at all this.

2047
01:28:36,900 --> 01:28:37,300
All right.

2048
01:28:37,300 --> 01:28:37,700
Well,

2049
01:28:39,000 --> 01:28:40,600
Now you can see what they actually are.

2050
01:28:40,800 --> 01:28:43,300
You can see D sound waiting in here.

2051
01:28:43,700 --> 01:28:45,200
Let's see wait for multiple objects.

2052
01:28:45,200 --> 01:28:47,000
These guys are just all waiting on, handles base.

2053
01:28:47,000 --> 01:28:47,900
They're waiting for a trigger.

2054
01:28:47,900 --> 01:28:48,800
Something to trigger them.

2055
01:28:49,000 --> 01:28:50,700
ZW Trace control.

2056
01:28:50,900 --> 01:28:51,600
Oh, it's event.

2057
01:28:51,600 --> 01:28:53,100
Tracing for Windows.

2058
01:28:53,700 --> 01:28:55,000
Oh God eventually.

2059
01:28:55,000 --> 01:28:56,300
See for Windows is

2060
01:28:58,000 --> 01:28:59,600
I hate event Tracy for Windows.

2061
01:28:59,700 --> 01:29:02,500
That's who that is TPP.

2062
01:29:02,500 --> 01:29:04,500
Waiter pthread.

2063
01:29:04,600 --> 01:29:06,100
I don't know what TPP is.

2064
01:29:06,100 --> 01:29:07,300
That's probably thread pool.

2065
01:29:07,500 --> 01:29:10,100
Maybe so we can't really tell if these guys are doing because they're

2066
01:29:10,100 --> 01:29:12,000
really just sitting around waiting to do work.

2067
01:29:12,900 --> 01:29:15,100
And so we don't actually know what it is that they're doing it.

2068
01:29:15,200 --> 01:29:17,100
What they would be doing when the work comes.

2069
01:29:17,200 --> 01:29:21,000
So they could be doing any sort of any number of things, essentially.

2070
01:29:21,500 --> 01:29:24,800
Yeah, so not very lightning there, but that's a pretty cool trick,

2071
01:29:24,800 --> 01:29:25,100
right?

2072
01:29:25,100 --> 01:29:27,000
Clicking on this call stack and doing

2073
01:29:27,800 --> 01:29:30,000
That that load symbols thing was pretty cool.

2074
01:29:30,000 --> 01:29:32,600
It's gone now because it's already been loaded but right-clicking on

2075
01:29:32,600 --> 01:29:35,400
the call stack on somewhere that you don't know like ntdll, hang load

2076
01:29:35,400 --> 01:29:35,800
symbols.

2077
01:29:35,800 --> 01:29:36,700
It totally worked.

2078
01:29:36,800 --> 01:29:37,500
That's great.

2079
01:29:37,600 --> 01:29:38,400
Thanks for the tip.

2080
01:29:42,300 --> 01:29:45,200
Is there any thought to using gi+ to help from a bridge between GDI

2081
01:29:45,200 --> 01:29:46,000
and DX?

2082
01:29:46,100 --> 01:29:48,500
Not really because we're just prototyping so we don't care about this

2083
01:29:48,500 --> 01:29:48,700
at all.

2084
01:29:48,700 --> 01:29:52,000
We're gonna switch to opengl and direct3d for the typical version.

2085
01:29:52,700 --> 01:29:55,400
I think the were where the end of the stream here.

2086
01:29:55,400 --> 01:29:58,100
So I'm just going to double click through the questions real quickly.

2087
01:29:58,100 --> 01:29:59,600
See if there's anything else that I need to do.

2088
01:30:00,500 --> 01:30:01,700
That should be addressed.

2089
01:30:03,000 --> 01:30:04,300
Let's see.

2090
01:30:06,600 --> 01:30:08,300
What if we don't use rooms at all?

2091
01:30:08,300 --> 01:30:09,600
Just have levels that scroll.

2092
01:30:09,600 --> 01:30:15,800
So I don't want to do scrolling because I want the rooms to be able to

2093
01:30:15,800 --> 01:30:20,300
do the self-contained sort of puzzle /, encounter thing where, like,

2094
01:30:20,300 --> 01:30:23,300
you walk in and the, like, again, like the original ends Legend of

2095
01:30:23,300 --> 01:30:27,000
Zelda did, where you lock the doors and the player has to deal with

2096
01:30:27,000 --> 01:30:29,300
what's in there first before they can move on.

2097
01:30:29,300 --> 01:30:32,000
So, I don't really want scrolling.

2098
01:30:32,000 --> 01:30:36,000
I want the player to think about the screens as

2099
01:30:36,700 --> 01:30:39,500
All screens that are self-contained for the most part.

2100
01:30:40,300 --> 01:30:43,200
I want that feel of the game.

2101
01:30:43,200 --> 01:30:44,800
So I don't really want to have to do scrolling.

2102
01:30:44,800 --> 01:30:50,400
I want to be able to have it look nice when it's just one screen and

2103
01:30:50,400 --> 01:30:51,800
not rely on scrolling for that.

2104
01:30:53,400 --> 01:30:55,800
Let's see, okay.

2105
01:31:00,200 --> 01:31:03,500
Someone says in assert assumptions and draw a rectangle.

2106
01:31:06,100 --> 01:31:11,200
Well, we could I don't know if I really want to do that though.

2107
01:31:12,200 --> 01:31:15,100
So basically what the person is suggesting is this.

2108
01:31:18,100 --> 01:31:24,200
They're want to do something along the lines of make sure that each of

2109
01:31:24,200 --> 01:31:30,500
the color values is where we think it should be right, because we said

2110
01:31:30,500 --> 01:31:32,400
that these have to be in that range, right?

2111
01:31:33,700 --> 01:31:37,300
The reason I'm not super concerned about that.

2112
01:31:38,400 --> 01:31:38,600
I mean.

2113
01:31:38,600 --> 01:31:42,700
Oops, that's supposed to be the reason.

2114
01:31:42,700 --> 01:31:43,900
I don't love that idea.

2115
01:31:44,400 --> 01:31:48,600
Is because in practice, I don't think we're actually going to care.

2116
01:31:49,100 --> 01:31:51,200
I think we'll be able to the way that we do.

2117
01:31:51,200 --> 01:31:55,400
It will probably do something that does saturation, so that you can

2118
01:31:55,400 --> 01:31:58,200
actually pass 1.5 and it'll be fine.

2119
01:31:58,700 --> 01:32:02,100
And we also may decide to do something with high dynamic range where

2120
01:32:02,100 --> 01:32:03,400
we actually need to.

2121
01:32:04,000 --> 01:32:06,000
Allow twos and threes and fours or something.

2122
01:32:06,000 --> 01:32:06,600
Who knows.

2123
01:32:06,800 --> 01:32:12,800
So I don't want to do that, but I wouldn't say if you were certain

2124
01:32:12,800 --> 01:32:16,000
that you always wanted exactly this in the future and you never want

2125
01:32:16,000 --> 01:32:18,400
to deal with clarabelle's any other way than those assertions are

2126
01:32:18,800 --> 01:32:19,200
probably.

2127
01:32:19,200 --> 01:32:23,900
Ok, but for right now, I don't know that, I want to go that route.

2128
01:32:23,900 --> 01:32:26,500
If anything, what I would probably do is clamp them.

2129
01:32:28,200 --> 01:32:30,800
Like I actually go ahead and clamp the RGB values, but I don't think

2130
01:32:30,800 --> 01:32:32,600
that's necessary there at the moment.

2131
01:32:34,100 --> 01:32:37,800
So, all right, I think.

2132
01:32:37,900 --> 01:32:39,700
Oh, why do you hate event Trace?

2133
01:32:40,000 --> 01:32:42,900
I will answer that one question, just because I really hate event

2134
01:32:42,900 --> 01:32:48,800
trace, and I'll show you why go to my rocket.com Casey.

2135
01:32:48,900 --> 01:32:49,600
That is me.

2136
01:32:51,000 --> 01:32:56,400
post 29, the worst API ever made this blog post should answer your

2137
01:32:56,400 --> 01:32:59,800
question as to why I hate event tracing for windows with a

2138
01:33:00,000 --> 01:33:00,500
Passion.

2139
01:33:02,000 --> 01:33:03,700
So yeah, please check that out.

2140
01:33:03,700 --> 01:33:05,400
If you want to know why I hate event tracing.

2141
01:33:06,100 --> 01:33:06,400
All right.

2142
01:33:06,400 --> 01:33:06,800
Everyone.

2143
01:33:06,800 --> 01:33:08,100
Thank you very much for joining me.

2144
01:33:09,200 --> 01:33:10,000
I hate to say it.

2145
01:33:10,000 --> 01:33:15,600
But we've got a tile map and a player on the screen who can stop us

2146
01:33:15,600 --> 01:33:16,000
now.

2147
01:33:16,000 --> 01:33:19,200
Write this is going to get fun real real soon here.

2148
01:33:19,200 --> 01:33:20,900
I'm kind of happy with the way.

2149
01:33:20,900 --> 01:33:21,600
This is going.

2150
01:33:22,400 --> 01:33:25,000
We're going to we're going to start to have an actual game happening

2151
01:33:25,000 --> 01:33:25,300
here.

2152
01:33:25,500 --> 01:33:26,900
We have so much stuff to talk about.

2153
01:33:26,900 --> 01:33:28,100
We've got the renderer to do.

2154
01:33:28,100 --> 01:33:29,400
We've got a we got soon.

2155
01:33:29,400 --> 01:33:29,800
Talk about

2156
01:33:30,000 --> 01:33:32,200
Coordinate systems because we don't want to be in pixels going

2157
01:33:32,200 --> 01:33:33,200
forwards and stuff.

2158
01:33:33,200 --> 01:33:35,200
You gotta you gotta you got tons of stuff to do.

2159
01:33:35,200 --> 01:33:37,900
We got tons of stuff to explain and investigate in detail.

2160
01:33:37,900 --> 01:33:42,000
So I don't want to say that we're going to be in like, oh the game is

2161
01:33:42,000 --> 01:33:44,200
totally up and running any time soon or anything like that, but I'm

2162
01:33:44,200 --> 01:33:46,400
just saying it's kind of fun to have like a little thing moving around

2163
01:33:46,400 --> 01:33:48,100
on tile map and pretty soon.

2164
01:33:48,100 --> 01:33:50,300
We're going to have something that's actually kind of playable.

2165
01:33:50,300 --> 01:33:50,600
Right?

2166
01:33:50,600 --> 01:33:53,000
Like we're going to have a little rectangle running around going

2167
01:33:53,000 --> 01:33:56,400
between tile maps and fighting a little rectangle Lobster.

2168
01:33:56,400 --> 01:33:59,400
And I don't know if you're like me, you kind of get excited about

2169
01:33:59,400 --> 01:34:00,000
these sorts of things.

2170
01:34:00,000 --> 01:34:02,000
And I think one of the things that says that you're going to be a

2171
01:34:02,000 --> 01:34:05,200
programmer in your life is when you get excited about the simple

2172
01:34:05,200 --> 01:34:06,500
things, right?

2173
01:34:06,500 --> 01:34:09,400
Because anyone gets excited about a bunch of really cool Sprites

2174
01:34:09,700 --> 01:34:11,900
flying around on the screen and doing stuff, that's not hard to get

2175
01:34:11,900 --> 01:34:12,400
excited about.

2176
01:34:12,400 --> 01:34:15,500
But when you're excited about the little things, it says something

2177
01:34:15,500 --> 01:34:15,700
about.

2178
01:34:15,700 --> 01:34:17,500
Probably where your inclinations lie.

2179
01:34:17,700 --> 01:34:19,600
So thank you so much for joining me.

2180
01:34:20,100 --> 01:34:22,800
If you would like to have a copy of the source code to work on

2181
01:34:22,800 --> 01:34:23,600
yourself at home.

2182
01:34:23,700 --> 01:34:26,100
You can pre-order the game here on handmade hero, dot-org.

2183
01:34:26,100 --> 01:34:27,300
Just took on the pre-order button.

2184
01:34:27,500 --> 01:34:29,700
You will get an email with a link that allows you to download the

2185
01:34:29,700 --> 01:34:29,800
source.

2186
01:34:29,900 --> 01:34:31,300
Code every day after I finish it.

2187
01:34:31,300 --> 01:34:34,900
I uploaded and you will be right in the same place that I am and if

2188
01:34:34,900 --> 01:34:37,200
you just want to kind of play around with things, that's a good way to

2189
01:34:37,200 --> 01:34:37,700
do it.

2190
01:34:37,900 --> 01:34:40,300
If you just want to kind of drop it and play with things a little bit

2191
01:34:40,300 --> 01:34:40,900
yourself.

2192
01:34:41,900 --> 01:34:44,100
If you would like to support the series, we do have a patreon.

2193
01:34:44,100 --> 01:34:46,900
You can subscribe to just go ahead and click on that patreon.

2194
01:34:47,700 --> 01:34:51,800
And also we have a great forums community that people have been really

2195
01:34:51,800 --> 01:34:54,800
doing, just some amazing work on and it's just a great site.

2196
01:34:54,800 --> 01:34:58,200
So if you click on here and go news and forums, the main page has the

2197
01:34:58,200 --> 01:34:59,800
schedule that I post every

2198
01:35:00,000 --> 01:35:01,900
Day, so you can see when all the times are going to be.

2199
01:35:02,200 --> 01:35:05,200
There's an episode guide that some volunteers do that's just awesome.

2200
01:35:05,200 --> 01:35:08,000
You can go on here and look at past episodes and they're all kind of

2201
01:35:08,000 --> 01:35:11,600
linked with with like kind of time values and everything.

2202
01:35:11,600 --> 01:35:13,700
It's just fantastic, the work they've been doing on, that's just

2203
01:35:13,700 --> 01:35:14,200
great.

2204
01:35:15,000 --> 01:35:17,400
And then there's a coding resources page, which has ports.

2205
01:35:17,900 --> 01:35:21,400
It's got ports to Mac OS, X, that ports, to Linux other things about

2206
01:35:21,400 --> 01:35:22,600
little Windows as well.

2207
01:35:22,800 --> 01:35:25,500
Someone even is working on a port to Swift if you're interested in

2208
01:35:25,500 --> 01:35:25,800
that.

2209
01:35:25,800 --> 01:35:26,400
It's crazy.

2210
01:35:26,400 --> 01:35:27,700
How much porting is going on?

2211
01:35:27,700 --> 01:35:28,300
It's great.

2212
01:35:28,800 --> 01:35:29,600
And then there's also other

2213
01:35:29,900 --> 01:35:31,700
Ariel's on there for like editors and stuff.

2214
01:35:31,700 --> 01:35:33,400
And then the code discussion forums are on here.

2215
01:35:33,400 --> 01:35:36,000
There's a bunch of stuff where people talk about things where they're

2216
01:35:36,000 --> 01:35:37,800
having trouble working on stuff, all sorts of things.

2217
01:35:37,800 --> 01:35:39,600
So again, check all that out.

2218
01:35:39,600 --> 01:35:42,200
It's a great site and the people on it have been really great.

2219
01:35:42,200 --> 01:35:43,500
So I highly encourage it.

2220
01:35:43,900 --> 01:35:46,100
Alright, we will be back here again, 10 a.m.

2221
01:35:46,100 --> 01:35:46,700
Every day.

2222
01:35:46,800 --> 01:35:47,400
So 10 a.m.

2223
01:35:47,400 --> 01:35:48,300
Tomorrow as well.

2224
01:35:49,000 --> 01:35:53,500
I will be back here and we will get our guy may be colliding with the

2225
01:35:53,500 --> 01:35:55,700
tile map and maybe walking to Newtown maps.

2226
01:35:55,700 --> 01:35:56,600
I don't know what we'll do.

2227
01:35:56,600 --> 01:35:59,200
We'll do whatever comes to mind again to try and get ourselves in a

2228
01:35:59,200 --> 01:35:59,800
position where we have

2229
01:36:00,000 --> 01:36:01,400
Little zygote game running.

2230
01:36:01,800 --> 01:36:03,900
So we can start to sort of think about what we want the architecture

2231
01:36:03,900 --> 01:36:06,800
to be and we can start building it up into some proper pieces.

2232
01:36:06,800 --> 01:36:10,800
What we're trying to get to really is having the renderer set up the

2233
01:36:10,800 --> 01:36:13,500
way we want so that we can sort of say what the renderer needs to do.

2234
01:36:13,800 --> 01:36:17,300
So we're kind of keep pushing towards that and I hope you will join me

2235
01:36:17,300 --> 01:36:18,600
for that because it's gonna be a lot of fun.

2236
01:36:18,700 --> 01:36:22,200
So, thank you for joining me and and Merry Christmas Eve.

2237
01:36:22,200 --> 01:36:24,000
For those of you who celebrate Christmas.

2238
01:36:24,400 --> 01:36:24,900
All right.

2239
01:36:25,200 --> 01:36:27,400
Thanks everyone, and I will see you tomorrow.

