1
00:00:01,700 --> 00:00:03,900
Hello, everyone and welcome to handmade hero.

2
00:00:03,900 --> 00:00:07,600
The show Rico to complete game live on stream.

3
00:00:10,400 --> 00:00:15,700
You know, I was just kind of ranting about how awful dust keyboard is

4
00:00:16,100 --> 00:00:17,500
at the beginning of the stream.

5
00:00:17,500 --> 00:00:19,800
So I'm kind of a little bit worked up now, so we need to kind of

6
00:00:19,800 --> 00:00:23,500
mentally Focus regain, our Focus pretend that we're typing on a good

7
00:00:23,500 --> 00:00:30,700
keyboard, and just kind of rezone into a happy place in order to do an

8
00:00:30,700 --> 00:00:32,500
episode of handmade hero.

9
00:00:33,600 --> 00:00:37,800
Let me this be a lesson to everyone out there, picking a good keyboard

10
00:00:37,800 --> 00:00:39,600
company is very important.

11
00:00:42,000 --> 00:00:49,000
And I am certainly taking suggestions at this point that said we are

12
00:00:49,000 --> 00:00:52,100
in the middle of doing some optimization work on handmade hero.

13
00:00:52,900 --> 00:00:56,600
We yesterday finished doing most of the work of converting, all the

14
00:00:56,600 --> 00:01:00,600
math operations, to Cindy in our texturing routine.

15
00:01:01,300 --> 00:01:03,800
And we have a little bit more work to do on that.

16
00:01:03,800 --> 00:01:06,200
But we're getting kind of close to the end and it's sort of time to

17
00:01:06,200 --> 00:01:08,800
start looking at how many apps we have and how fast we think we can

18
00:01:08,800 --> 00:01:10,600
make it go and other things like this.

19
00:01:11,000 --> 00:01:12,000
I like to get right into that.

20
00:01:12,000 --> 00:01:16,100
But before I do, if you'd like to follow along and you have a working

21
00:01:16,100 --> 00:01:22,100
keyboard where you live, you can go ahead and unpack day 118 source

22
00:01:22,100 --> 00:01:25,500
code because that's what we're going to be working with here on day

23
00:01:25,700 --> 00:01:27,800
one, 19 now.

24
00:01:29,700 --> 00:01:33,800
Let's go ahead and open up the editor.

25
00:01:36,800 --> 00:01:41,900
So, if you remember where we were at yesterday, we had just completed

26
00:01:42,300 --> 00:01:47,300
in our sort of, hopefully quickly routine, which I think at this

27
00:01:47,300 --> 00:01:50,100
point, we could actually say quickly, I think we could drop the,

28
00:01:50,100 --> 00:01:54,500
hopefully at this point because honestly, I feel like we have gotten

29
00:01:54,500 --> 00:01:55,900
it to go rather quickly.

30
00:01:55,900 --> 00:01:58,900
Now it's probably not as quickly as it could go, but we definitely

31
00:01:58,900 --> 00:02:02,400
accomplished our goal of making it go quickly.

32
00:02:02,600 --> 00:02:06,000
But at this point we really just don't know how quickly how

33
00:02:06,400 --> 00:02:08,900
It is compared to what it could be and that's sort of what we're going

34
00:02:08,900 --> 00:02:11,800
to be talking about today so I'm going to drop the hopefully and say

35
00:02:11,800 --> 00:02:14,800
that we just have a routine that draws rectangles quickly.

36
00:02:16,300 --> 00:02:17,500
And we're going to move on from there.

37
00:02:18,100 --> 00:02:18,800
So, there we go.

38
00:02:18,800 --> 00:02:21,500
Here is our routine working in all of its glory.

39
00:02:21,800 --> 00:02:26,800
And as you can see, it is quite a bit faster than when we started.

40
00:02:27,000 --> 00:02:29,900
When we started, it was taking some where in the neighborhood, I don't

41
00:02:29,900 --> 00:02:30,500
even know what it was.

42
00:02:30,500 --> 00:02:30,900
Two hundred.

43
00:02:30,900 --> 00:02:31,600
80 Cycles.

44
00:02:31,600 --> 00:02:32,400
Something like this.

45
00:02:33,600 --> 00:02:34,200
Well, you know what?

46
00:02:34,200 --> 00:02:38,500
We don't really have to guess because we could if we wanted to switch

47
00:02:38,500 --> 00:02:41,600
to draw a rectangle slowly, and see.

48
00:02:41,700 --> 00:02:45,700
So, if we actually go in here to render bitmap and switch it, this

49
00:02:45,900 --> 00:02:51,200
All right, let's see here he is Undeclared.

50
00:02:51,700 --> 00:02:52,700
PX py.

51
00:02:52,700 --> 00:02:53,300
Oh right.

52
00:02:53,400 --> 00:02:57,700
Sorry this is supposed to be draw a rectangle slowly here.

53
00:03:03,100 --> 00:03:03,500
Go.

54
00:03:07,200 --> 00:03:10,800
And if I remember correctly draw, a rectangle slowly, has some extra

55
00:03:10,800 --> 00:03:12,700
stuff that it needs to take.

56
00:03:12,700 --> 00:03:20,000
We pass it the X and y-axis the color and then we also pass it, sort

57
00:03:20,000 --> 00:03:24,100
of the texture, the normal map and then the three bitmaps there.

58
00:03:24,400 --> 00:03:27,400
So I think that is everything that that needs to get past so if we

59
00:03:27,400 --> 00:03:33,100
wanted to we could sort of call draw rectangle slowly here if that

60
00:03:33,100 --> 00:03:33,600
makes sense.

61
00:03:34,000 --> 00:03:36,800
Let's go ahead and do that and we would need some time.

62
00:03:37,000 --> 00:03:38,900
Ming on draw a rectangle slowly as well.

63
00:03:38,900 --> 00:03:41,200
Which I don't know that we actually have.

64
00:03:41,300 --> 00:03:42,400
It looks like we do have.

65
00:03:44,600 --> 00:03:46,900
So you can kind of see draw a rectangle, slowly running here.

66
00:03:47,900 --> 00:03:49,000
We can take a look at the time.

67
00:03:49,000 --> 00:03:53,000
We don't actually have this one doing any sort of counting on it.

68
00:03:53,100 --> 00:03:55,200
So we can't see what the cycles per pixel is.

69
00:03:55,200 --> 00:03:59,800
So we should probably do is go ahead and and get get that the pixel

70
00:03:59,800 --> 00:04:01,600
fill call and put that in.

71
00:04:01,700 --> 00:04:05,800
So we can actually see how many cycles per pixel is and then we could

72
00:04:05,800 --> 00:04:06,400
actually do

73
00:04:06,900 --> 00:04:07,500
comparison.

74
00:04:08,100 --> 00:04:09,400
So draw a rectangle.

75
00:04:10,700 --> 00:04:11,300
Quickly.

76
00:04:13,700 --> 00:04:14,800
See what we got here.

77
00:04:16,300 --> 00:04:18,800
We have begin time, block process pixel.

78
00:04:19,000 --> 00:04:20,899
So I want to do that in draw.

79
00:04:20,899 --> 00:04:22,200
A rectangle slowly as well.

80
00:04:23,900 --> 00:04:27,300
So that's going to be right here.

81
00:04:27,700 --> 00:04:30,100
And then we're going to do the same thing that we did here where we

82
00:04:30,100 --> 00:04:31,500
end time block counted.

83
00:04:32,000 --> 00:04:35,600
And we go ahead and and count how many pixels we're actually trying to

84
00:04:35,600 --> 00:04:37,000
fill and there we go.

85
00:04:37,700 --> 00:04:40,900
So let's see if that gives us account.

86
00:04:41,700 --> 00:04:42,300
There we go.

87
00:04:42,800 --> 00:04:44,500
So calling draw a rectangle slowly.

88
00:04:44,500 --> 00:04:49,500
As you can see, is five 353 cycles per pixel there.

89
00:04:50,000 --> 00:04:53,400
And when we switch it, we are actually going

90
00:04:53,800 --> 00:04:56,200
That's quite a bit faster than we were going before.

91
00:04:56,200 --> 00:05:01,000
I guess it's like seven times slower or roughly something like this,

92
00:05:01,700 --> 00:05:02,600
something like that.

93
00:05:03,300 --> 00:05:08,100
So anyway, point being, we have done a pretty good job of getting it

94
00:05:08,100 --> 00:05:11,500
down to something that is nice and fast and usable.

95
00:05:11,800 --> 00:05:15,200
But we don't actually know at this point and this is thing I mentioned

96
00:05:15,200 --> 00:05:15,600
way back.

97
00:05:15,600 --> 00:05:22,400
When we started a week ago, we don't actually know how long it should

98
00:05:22,400 --> 00:05:23,400
take us to.

99
00:05:23,500 --> 00:05:24,500
Will any of this stuff?

100
00:05:24,500 --> 00:05:27,600
So we know that we're running a lot faster than when we started.

101
00:05:27,600 --> 00:05:32,200
We know that we're down in the 50s and we were in the 350s and so

102
00:05:32,200 --> 00:05:33,200
that's all great.

103
00:05:33,600 --> 00:05:39,200
But what we don't know is how long should it be taking us to fill each

104
00:05:39,200 --> 00:05:40,300
individual pixel?

105
00:05:40,400 --> 00:05:44,500
We don't really have any estimate so it's pretty hard for us to know

106
00:05:44,500 --> 00:05:47,400
whether we're done optimizing this routine or not.

107
00:05:47,400 --> 00:05:52,100
Now we could just ignore that fact and we could just say well we got

108
00:05:52,100 --> 00:05:53,400
it fast enough for our purposes.

109
00:05:53,500 --> 00:05:54,400
At the moment.

110
00:05:56,200 --> 00:05:59,900
we don't really need to do anything else to it, and that's certainly

111
00:06:00,400 --> 00:06:05,300
A totally fine tack to take if you just want to, you know, have a

112
00:06:05,300 --> 00:06:07,000
crack at optimizing a routine.

113
00:06:07,500 --> 00:06:10,300
And then, you know, if it pans out at pans out, if it doesn't, it

114
00:06:10,300 --> 00:06:13,600
doesn't, you know, you don't really want to be super precise about it,

115
00:06:13,700 --> 00:06:14,700
that's totally fine.

116
00:06:14,900 --> 00:06:20,900
But what I kind of want to show here is some stuff we could do to try

117
00:06:20,900 --> 00:06:25,700
to figure out roughly how long these things should be taking or if we

118
00:06:25,700 --> 00:06:29,800
were you know, had Max everything out completely perfectly, how long?

119
00:06:30,000 --> 00:06:32,100
Do we think these things should take?

120
00:06:32,100 --> 00:06:37,500
And then we can sort of have, you know, an estimate as to, you know,

121
00:06:38,000 --> 00:06:41,700
how close we are to, you know, to good, if that makes sense.

122
00:06:42,900 --> 00:06:45,300
So let's suppose temporarily that.

123
00:06:45,300 --> 00:06:49,000
We always had all the memory that we actually wanted was ready when we

124
00:06:49,000 --> 00:06:49,600
needed it.

125
00:06:49,600 --> 00:06:52,900
So we were not dealing with any sorts of memory latency or anything

126
00:06:52,900 --> 00:06:53,500
like that.

127
00:06:53,600 --> 00:06:56,500
And we're just going to talk about how many cycles do we think it

128
00:06:56,500 --> 00:07:00,500
would take for all of these guys to complete, right?

129
00:07:00,500 --> 00:07:05,400
So, for everything in here, that actually has to be executed, how long

130
00:07:05,400 --> 00:07:05,700
will it?

131
00:07:05,700 --> 00:07:09,400
Would it actually take us to to execute them, right?

132
00:07:10,600 --> 00:07:13,800
And so, what I want to do is I want to try and figure out a way that I

133
00:07:13,800 --> 00:07:18,300
can easily count the operations that were actually going to do now,

134
00:07:18,700 --> 00:07:20,200
it's a little bit tricky, right?

135
00:07:20,200 --> 00:07:28,000
Because each one of these guys is, you know, is every single one of

136
00:07:28,000 --> 00:07:30,000
these guys has a different latency, right?

137
00:07:30,000 --> 00:07:32,200
Every single one of these guys has a different latency in the, in the

138
00:07:32,200 --> 00:07:35,200
thing, and it's hard for me to look at the code and count them.

139
00:07:35,500 --> 00:07:40,100
So, what I'd like to do is make some kind of, you know, some kind of

140
00:07:40,400 --> 00:07:43,900
Made a process if you will, that will take a look at how many of these

141
00:07:43,900 --> 00:07:49,100
were doing and give us some kind of an estimate as to what the total

142
00:07:49,100 --> 00:07:52,600
throughput for all of these operations should be right.

143
00:07:53,500 --> 00:07:55,900
And again, this is best case assuming everything was pipelined

144
00:07:55,900 --> 00:07:56,500
properly.

145
00:07:57,200 --> 00:07:59,200
And so what I'd like to do is go.

146
00:07:59,200 --> 00:08:03,200
All right, let's just take a look at all of these functions here.

147
00:08:03,300 --> 00:08:08,100
What if I were to just Define all of these guys to do something else

148
00:08:08,100 --> 00:08:10,200
entirely from what they actually

149
00:08:10,300 --> 00:08:11,800
actually do, right?

150
00:08:12,100 --> 00:08:18,800
And so, what I want to do is I want to go ahead and take this routine

151
00:08:18,800 --> 00:08:20,000
here, right?

152
00:08:20,200 --> 00:08:24,400
I want to go ahead and take this out, and I want to see about all of

153
00:08:24,400 --> 00:08:27,000
the functions, the underscore, mmm functions that we have.

154
00:08:27,100 --> 00:08:31,000
I'm going to pound to find them to do something else.

155
00:08:31,500 --> 00:08:34,799
Okay, so what I'm going to do is I'm going to go ahead and say, all

156
00:08:34,799 --> 00:08:36,500
right, let's take all these guys.

157
00:08:36,500 --> 00:08:37,100
Let's do.

158
00:08:37,600 --> 00:08:40,100
Mmm, set PS, right?

159
00:08:42,100 --> 00:08:42,400
What do you want?

160
00:08:42,400 --> 00:08:43,100
Ma'am, set, 1.

161
00:08:43,100 --> 00:08:46,200
PS and is I guess it's worth noting that this stuff here.

162
00:08:48,000 --> 00:08:48,500
All right.

163
00:08:48,500 --> 00:08:49,000
You know what?

164
00:08:49,100 --> 00:08:52,400
Before I start that I'm looking at this here and I'm noticing that we

165
00:08:52,400 --> 00:08:54,400
haven't actually finished Cindy, icing it.

166
00:08:54,400 --> 00:08:56,100
We've still got some stuff here.

167
00:08:56,100 --> 00:08:57,000
That scalar.

168
00:08:57,200 --> 00:08:59,800
I doubt that this has very much to do with anything.

169
00:09:00,100 --> 00:09:06,300
There were doing, but I'm going to, let's just say this to do Casey

170
00:09:06,500 --> 00:09:07,700
remove this.

171
00:09:08,600 --> 00:09:12,000
Because we can get rid of those, at the very least, you can see the

172
00:09:12,000 --> 00:09:13,700
pixel p y is the same everywhere.

173
00:09:13,700 --> 00:09:16,600
So that's not really part of this Loop, right?

174
00:09:16,700 --> 00:09:19,600
But pixel p x is also a kind of a known value.

175
00:09:19,600 --> 00:09:22,700
So we could actually just be incrementing it every time instead of

176
00:09:22,700 --> 00:09:28,200
calling set where it has to hoist this x, i value out into the the

177
00:09:28,200 --> 00:09:29,100
same deregister.

178
00:09:29,300 --> 00:09:30,100
Does that make sense?

179
00:09:30,400 --> 00:09:34,100
In fact, I guess it's so simple, we might as well just do it, right?

180
00:09:34,100 --> 00:09:37,600
If I set this guy here, pixel PS.

181
00:09:39,000 --> 00:09:42,800
If I set him to just be X-Men, the place that we're starting right.

182
00:09:45,000 --> 00:09:46,300
If I set him to be X-Men.

183
00:09:46,300 --> 00:09:51,900
Like so then every time through this loop, I could if I want to just

184
00:09:51,900 --> 00:09:55,500
do an M&M add PS, right?

185
00:09:55,600 --> 00:10:00,300
And add to him a value that steps by 4, right?

186
00:10:00,900 --> 00:10:04,500
Because all of these guys, if I just add 4 to them, every time I get

187
00:10:04,500 --> 00:10:08,400
the next Bank of four pixels, what the x coordinates are for the next

188
00:10:08,400 --> 00:10:09,900
Bank of four pixels, right?

189
00:10:10,200 --> 00:10:11,800
So if I do pixel PX,

190
00:10:13,900 --> 00:10:16,400
Pixel p x plus the constant for.

191
00:10:16,400 --> 00:10:20,200
And I just go ahead and do that at the end of the loop, right?

192
00:10:20,800 --> 00:10:24,800
That is sufficient for computing, the new X values, right?

193
00:10:25,300 --> 00:10:27,900
So I don't actually know if that's better or not like I said but we

194
00:10:27,900 --> 00:10:32,800
can get rid again of some more of that scalar, right.

195
00:10:32,800 --> 00:10:35,000
The more of that scalar operation that's happening there.

196
00:10:35,500 --> 00:10:39,700
So if I want to do that I can just do this here and we can probably

197
00:10:39,700 --> 00:10:42,400
remove those four X's now because remember I said, we don't really

198
00:10:42,400 --> 00:10:43,600
need the scalar versions of

199
00:10:43,700 --> 00:10:44,100
Anymore.

200
00:10:46,600 --> 00:10:50,700
And hey, it actually does look like that helped, you know, every

201
00:10:50,700 --> 00:10:52,200
little bit, it's weird, right?

202
00:10:52,400 --> 00:10:55,800
But if you take a look, now we're actually below 50 sometimes.

203
00:10:55,800 --> 00:11:00,300
Now, we're dipping into the 49 cycle, so yeah, making that wide was

204
00:11:00,300 --> 00:11:03,000
also the compiler like that as well.

205
00:11:05,100 --> 00:11:10,900
Now, one thing that's interesting here I guess also now that I see now

206
00:11:10,900 --> 00:11:13,800
that I'm just looking at the stuff that we're doing here, we also have

207
00:11:14,000 --> 00:11:16,000
this pixel py, right?

208
00:11:16,000 --> 00:11:16,300
And

209
00:11:16,500 --> 00:11:20,000
Origin y4x this stuff.

210
00:11:20,000 --> 00:11:24,900
Gear really could have just been done once ahead of time.

211
00:11:24,900 --> 00:11:26,000
Couldn't it have?

212
00:11:26,400 --> 00:11:29,300
I mean, why are we subtracting?

213
00:11:29,300 --> 00:11:35,600
You know, do we ever even use pixel p, y, and pixel PX other than in

214
00:11:35,600 --> 00:11:38,000
that one instance, right?

215
00:11:38,800 --> 00:11:40,400
And we don't right?

216
00:11:40,500 --> 00:11:43,900
So these Subs subtractions are constant.

217
00:11:47,900 --> 00:11:49,400
yeah, I mean

218
00:11:51,400 --> 00:11:54,200
This this stuff is all actually not very good.

219
00:11:54,200 --> 00:11:55,500
Now that I look at it, right?

220
00:11:55,600 --> 00:11:58,100
We don't really need to be doing these where we're doing these.

221
00:11:58,100 --> 00:11:59,200
So for example,

222
00:12:00,300 --> 00:12:02,100
If you take a look at this, right?

223
00:12:03,400 --> 00:12:09,500
The subtraction to get DX is actually something that we could have

224
00:12:09,500 --> 00:12:12,400
just baked into pixel PX to begin with.

225
00:12:12,600 --> 00:12:13,200
Right?

226
00:12:13,600 --> 00:12:18,100
So we could have just said that this is pixel p x here right?

227
00:12:18,500 --> 00:12:22,500
And we could have just done this n m sub PS just at the at the

228
00:12:22,500 --> 00:12:24,000
beginning right?

229
00:12:24,000 --> 00:12:27,800
We could have just done this right off the bat and said that's that's

230
00:12:27,800 --> 00:12:30,200
the value of pixel PX.

231
00:12:30,500 --> 00:12:33,000
And furthermore, pixel py will pixel peep

232
00:12:33,200 --> 00:12:36,900
Why doesn't change pixel p y is constant across the road, right?

233
00:12:36,900 --> 00:12:39,800
So pixel p y could be doing that, just the same.

234
00:12:39,800 --> 00:12:44,800
So that was just us, you know, we hadn't really started looking at

235
00:12:44,800 --> 00:12:46,300
optimizing the code yet.

236
00:12:46,300 --> 00:12:49,600
So I guess, you know, again we sort of get

237
00:12:51,600 --> 00:12:53,700
What we deserve their, which is fine.

238
00:12:54,500 --> 00:12:56,100
But anyway, so there we go.

239
00:12:56,100 --> 00:12:58,900
And hey, we were actually two cycles faster.

240
00:12:58,900 --> 00:13:03,000
Now, it looks like roughly thereabouts, so that's good too.

241
00:13:04,000 --> 00:13:06,600
When I look at some of these other things here, you can sort of see

242
00:13:07,400 --> 00:13:08,400
oddly enough.

243
00:13:08,800 --> 00:13:13,600
Like I don't even know, maybe the U and the V even want to be done

244
00:13:13,600 --> 00:13:13,900
that way.

245
00:13:13,900 --> 00:13:17,600
Because if you look at what's happening with the U and the V, those

246
00:13:17,600 --> 00:13:21,200
are also going to be sort of baked in, right?

247
00:13:21,400 --> 00:13:22,200
We're doing this.

248
00:13:22,300 --> 00:13:23,700
Mmm mole PS.

249
00:13:24,800 --> 00:13:30,300
This MLPs or pixel wide here is never going to change across the row,

250
00:13:30,500 --> 00:13:31,100
right?

251
00:13:31,100 --> 00:13:34,500
So these two values, these two values here, are not going to change

252
00:13:34,500 --> 00:13:40,400
across the row, and if you take a look at these two values, they're

253
00:13:40,400 --> 00:13:45,600
multiplying pixel PX, by whatever these two axes are.

254
00:13:46,500 --> 00:13:47,700
We could do that.

255
00:13:47,700 --> 00:13:52,000
We could actually have two variables that we incremented and, and sort

256
00:13:52,000 --> 00:13:53,000
of pull those out as well.

257
00:13:53,000 --> 00:13:54,300
But I don't really need to.

258
00:13:54,300 --> 00:13:58,000
I don't think we actually necessarily need to do that just yet, but

259
00:13:58,000 --> 00:13:59,700
what we can do is say, all right.

260
00:13:59,700 --> 00:14:01,200
Let's actually just store.

261
00:14:01,200 --> 00:14:05,300
May be the result of these two multiplications up and then do the ad

262
00:14:05,300 --> 00:14:05,700
in there.

263
00:14:05,900 --> 00:14:07,400
That seems pretty reasonable.

264
00:14:09,400 --> 00:14:11,200
It does create two variables.

265
00:14:11,200 --> 00:14:12,600
We have to store though.

266
00:14:13,400 --> 00:14:15,800
Mmm.

267
00:14:16,400 --> 00:14:17,200
Hmm.

268
00:14:18,900 --> 00:14:20,900
That one's that when I'm less sure about.

269
00:14:21,600 --> 00:14:22,700
Yeah, well, let's try it.

270
00:14:23,300 --> 00:14:26,600
I'm kind of, I don't know, I kind of got into it now and since I'm

271
00:14:26,600 --> 00:14:31,700
into it, I just want to see it's not not necessarily the fairest test

272
00:14:32,800 --> 00:14:35,300
of them all, but let's just, let's just see.

273
00:14:36,100 --> 00:14:42,800
So we'll just call this like, temp, 0 and temp1 just to test and see

274
00:14:42,900 --> 00:14:43,700
what happens.

275
00:14:43,800 --> 00:14:46,500
So, if I were to do that, if I'm going to get this out of here, temp,

276
00:14:46,500 --> 00:14:47,100
0

277
00:14:48,000 --> 00:14:48,300
Right.

278
00:14:48,300 --> 00:14:49,000
Like so.

279
00:14:50,300 --> 00:14:51,400
And get this out of here.

280
00:14:51,400 --> 00:14:52,500
So this is kind of one.

281
00:14:53,400 --> 00:14:55,900
And it's clear that those are constant across the road.

282
00:14:55,900 --> 00:14:57,200
Does that help the compiler at all?

283
00:14:57,200 --> 00:14:59,700
Does the compiler, do anything Smarter with

284
00:15:00,700 --> 00:15:03,700
And I don't know, it actually looks like that's a little bit worse so

285
00:15:03,700 --> 00:15:06,400
it would rather generate those values from the mall, that's totally

286
00:15:06,400 --> 00:15:09,100
fair so we'll leave that as it is for now.

287
00:15:10,300 --> 00:15:13,000
All right, so let me just do another since since that kind of

288
00:15:13,000 --> 00:15:16,200
happened, let me do a quick pass over this and see if there's anything

289
00:15:16,200 --> 00:15:17,300
else before we get down.

290
00:15:17,300 --> 00:15:20,100
To actually looking at how long things take, let's make sure that our

291
00:15:20,100 --> 00:15:24,900
Loop actually isn't doing anything to incredibly stupid so that we

292
00:15:24,900 --> 00:15:28,200
aren't like wasting our time counting things that actually should

293
00:15:28,200 --> 00:15:29,600
never happen to begin with.

294
00:15:30,600 --> 00:15:36,400
So we're doing our clamping here of the U and the V, which all seems

295
00:15:36,400 --> 00:15:37,300
totally fair.

296
00:15:39,000 --> 00:15:45,600
We are doing our subs to get our fractional coordinates, and that also

297
00:15:45,600 --> 00:15:46,500
seems fair.

298
00:15:47,200 --> 00:15:51,400
We then have to do our texture fetching, which, at the moment.

299
00:15:53,600 --> 00:15:57,600
Obviously is having to be done in scalar but there's not a lot that we

300
00:15:57,600 --> 00:16:02,500
can really do about that being in scalar because that is just kind of

301
00:16:02,500 --> 00:16:03,500
the nature of the Beast.

302
00:16:03,500 --> 00:16:06,400
We don't have the ability to fetch wide, so that's just kind of,

303
00:16:06,700 --> 00:16:08,000
that's just going to be that way.

304
00:16:09,800 --> 00:16:12,900
When we do our unpacking cure, it doesn't look like there's anything

305
00:16:12,900 --> 00:16:15,000
weird that we're doing with the unpack.

306
00:16:15,000 --> 00:16:19,300
It looks pretty reasonable to me, right?

307
00:16:20,800 --> 00:16:23,200
It's just it doing the standard stuff.

308
00:16:23,500 --> 00:16:26,700
Need to do, obviously, the, and then we need to do the convert and so

309
00:16:26,700 --> 00:16:29,000
on, let's see.

310
00:16:29,000 --> 00:16:34,600
We've got loading the destination, we've got converting to brightness,

311
00:16:35,100 --> 00:16:38,600
all of this stuff seemed pretty reasonable.

312
00:16:38,600 --> 00:16:45,400
So I thought I don't think that we really had a lot of kind of pure

313
00:16:45,400 --> 00:16:46,800
stupidity in there.

314
00:16:46,800 --> 00:16:49,300
Like we did kind of the top of the loop where it looks like we really

315
00:16:49,300 --> 00:16:51,700
hadn't played with anything.

316
00:16:52,000 --> 00:16:52,600
So yeah.

317
00:16:52,900 --> 00:16:53,200
Oh,

318
00:16:53,400 --> 00:16:57,200
oh and incidentally for those of you who missed it, on Twitter, Bobby

319
00:16:57,200 --> 00:17:03,700
and wrote in and said why the mask move you, si128 was not helping and

320
00:17:03,700 --> 00:17:05,400
he said it was because

321
00:17:07,300 --> 00:17:10,599
Actually it is an instruction that that should never be used for any

322
00:17:10,599 --> 00:17:13,900
reason because I guess it is completely useless.

323
00:17:14,400 --> 00:17:20,099
It bypasses the cash it's a non-temporal store which means it writes

324
00:17:20,400 --> 00:17:21,300
past the cash.

325
00:17:21,300 --> 00:17:24,500
It does not actually right into the cache.

326
00:17:25,300 --> 00:17:30,600
So it's it's not just as simple as a mass move.

327
00:17:30,600 --> 00:17:32,800
It's a separate type of thing.

328
00:17:32,800 --> 00:17:35,000
We haven't really talked about that stuff yet so I don't want to go

329
00:17:35,000 --> 00:17:35,900
into too much detail.

330
00:17:35,900 --> 00:17:37,000
But he basically said,

331
00:17:37,100 --> 00:17:38,400
Never ever ever call this.

332
00:17:38,400 --> 00:17:42,600
Someone asked about it on the stream and so I wanted to show it there

333
00:17:42,800 --> 00:17:45,900
and we checked it out and it was three times slower and Fabian was

334
00:17:45,900 --> 00:17:49,100
saying, yeah, there's pretty much never a time when you can use that

335
00:17:49,100 --> 00:17:51,500
function well, that instruction.

336
00:17:51,500 --> 00:17:53,600
He said it's basically always bad.

337
00:17:54,400 --> 00:17:58,700
So yeah, I guess that's just something to be aware of.

338
00:18:00,100 --> 00:18:04,800
All right, we're down to 48 cycles per pixel.

339
00:18:05,000 --> 00:18:06,000
So that's a good thing.

340
00:18:06,600 --> 00:18:10,500
What we want to do now is we want to go ahead and start doing that

341
00:18:10,500 --> 00:18:13,700
counting, cuz I think we got rid of any anything that was like,

342
00:18:13,700 --> 00:18:14,800
obviously stupid in here.

343
00:18:15,600 --> 00:18:20,000
So what I want to do is I want to go through all of the actual M&M's

344
00:18:20,000 --> 00:18:26,300
things that we call and I want to just basically record the fact that

345
00:18:26,300 --> 00:18:28,200
we're calling them so that I don't have to count these things

346
00:18:28,200 --> 00:18:29,400
manually, right?

347
00:18:29,700 --> 00:18:29,800
So,

348
00:18:30,000 --> 00:18:34,900
So what I want to do here is basically say okay you know every single

349
00:18:34,900 --> 00:18:39,800
one of these that we have and then add PS and then mul PS.

350
00:18:40,900 --> 00:18:41,800
Let's see.

351
00:18:43,000 --> 00:18:44,700
Em em cast PS.

352
00:18:45,400 --> 00:18:48,600
We've got em em and

353
00:18:50,200 --> 00:18:51,800
and I more,

354
00:18:55,100 --> 00:18:56,600
Well, we don't have any more there.

355
00:18:56,600 --> 00:18:57,000
I guess.

356
00:18:57,100 --> 00:18:57,700
Never mind.

357
00:18:58,200 --> 00:18:59,800
We've got cop Vee.

358
00:19:03,600 --> 00:19:06,600
We've got cop Ellie.

359
00:19:11,100 --> 00:19:12,700
And let's see.

360
00:19:13,100 --> 00:19:15,500
So then we've got our load you

361
00:19:16,800 --> 00:19:18,600
Which is loading in that pixel value.

362
00:19:19,200 --> 00:19:21,600
We've got arm in PS and Max BS.

363
00:19:27,600 --> 00:19:29,400
Then we have our conversions.

364
00:19:32,400 --> 00:19:35,500
And we've got conversions in both directions.

365
00:19:37,700 --> 00:19:40,400
Should probably go ahead and do this.

366
00:19:42,400 --> 00:19:42,900
Here we go.

367
00:19:44,200 --> 00:19:46,000
This will be much more efficient.

368
00:19:51,300 --> 00:19:53,500
So we've got the Epi PS there.

369
00:19:53,500 --> 00:19:54,200
There we go.

370
00:19:55,400 --> 00:19:58,600
So that's all good and

371
00:20:04,200 --> 00:20:06,500
I don't see anything in there.

372
00:20:06,800 --> 00:20:08,900
We have the extraction to do that.

373
00:20:08,900 --> 00:20:11,300
We're going to probably have to think about that, a little bit small,

374
00:20:12,700 --> 00:20:14,400
you know, basically a little separately.

375
00:20:14,800 --> 00:20:15,600
So, here's our.

376
00:20:16,500 --> 00:20:19,800
And here is our shift.

377
00:20:23,600 --> 00:20:25,000
and,

378
00:20:28,600 --> 00:20:30,500
Looks like all of that is covered.

379
00:20:32,800 --> 00:20:34,300
You got are squaring instruction.

380
00:20:38,500 --> 00:20:42,200
We have a bunch of moles which we've already counted.

381
00:20:42,200 --> 00:20:44,300
We've got our sub, which we did.

382
00:20:44,300 --> 00:20:45,500
We already do now.

383
00:20:45,500 --> 00:20:46,600
We did not do the sub.

384
00:20:47,100 --> 00:20:48,300
Let's get the sub in the ad in.

385
00:20:48,300 --> 00:20:50,000
There are sub.

386
00:20:51,200 --> 00:20:58,400
We've got our moles moles subs and moles convert PS epi32.

387
00:20:59,300 --> 00:20:59,800
Freddy got

388
00:21:00,000 --> 00:21:04,700
Those and we got our shift left those.

389
00:21:04,700 --> 00:21:07,200
We do not have yet so those got to go in there.

390
00:21:10,800 --> 00:21:12,800
And there's our or finally.

391
00:21:13,800 --> 00:21:15,000
So there's our four.

392
00:21:17,600 --> 00:21:18,100
There we go.

393
00:21:19,000 --> 00:21:22,200
And also an and not

394
00:21:26,200 --> 00:21:29,900
So, this looks like basically all the stuff we do.

395
00:21:31,900 --> 00:21:35,100
and I'm going to actually say that the load and the

396
00:21:36,900 --> 00:21:38,100
load in the store.

397
00:21:38,100 --> 00:21:42,200
I'm not going to look at right now but this looks like basically what

398
00:21:42,200 --> 00:21:45,200
we do for all intents and purposes.

399
00:21:45,900 --> 00:21:47,900
So what I would like to do

400
00:21:50,000 --> 00:21:52,700
Is actually, this is very strange.

401
00:21:52,800 --> 00:21:57,800
I know this is a bizarre thing to be doing but it is what we are going

402
00:21:57,800 --> 00:21:58,300
to do.

403
00:21:59,300 --> 00:22:03,300
I'm just going to Define these guys to be something that counts for

404
00:22:03,300 --> 00:22:04,700
us, right?

405
00:22:05,100 --> 00:22:07,500
So I just want this to basically count.

406
00:22:07,600 --> 00:22:09,000
How many of each thing?

407
00:22:09,200 --> 00:22:10,900
There are right.

408
00:22:11,000 --> 00:22:12,000
Pretty straightforward.

409
00:22:12,500 --> 00:22:16,900
So what I want to do is basically do something like you know that

410
00:22:18,500 --> 00:22:19,200
Count off.

411
00:22:21,300 --> 00:22:21,900
Like so.

412
00:22:27,800 --> 00:22:29,300
And this count up will.

413
00:22:32,300 --> 00:22:38,400
I guess probably what I want to do here is something like I want to be

414
00:22:38,400 --> 00:22:39,500
able to print these out.

415
00:22:39,500 --> 00:22:40,000
Right.

416
00:22:40,100 --> 00:22:41,500
Well not really print them out.

417
00:22:41,600 --> 00:22:46,400
I want to be able to do something with them such that they can sort of

418
00:22:46,400 --> 00:22:47,300
be appended.

419
00:22:47,400 --> 00:22:51,200
So what I can probably do is actually I guess I don't even really need

420
00:22:51,200 --> 00:22:53,200
to do a count up on them per se.

421
00:22:53,600 --> 00:22:56,800
What I could do instead is I could do something where we're just going

422
00:22:56,800 --> 00:23:01,600
to go like counts you know plus plus something like this.

423
00:23:01,900 --> 00:23:02,400
Right.

424
00:23:04,000 --> 00:23:07,000
I think that should work fairly well.

425
00:23:07,200 --> 00:23:07,800
Right.

426
00:23:07,900 --> 00:23:08,300
Okay.

427
00:23:08,500 --> 00:23:13,800
So just do something that looks like this and really I suppose this is

428
00:23:13,800 --> 00:23:18,500
a good place for a macro I can just do something that's like okay you

429
00:23:18,500 --> 00:23:22,900
know go ahead and search for that go to the end to a plus plus counts,

430
00:23:22,900 --> 00:23:26,200
paste it in there, I guess.

431
00:23:28,400 --> 00:23:32,700
delete that off the end and then at the end of it,

432
00:23:34,800 --> 00:23:35,400
Crap.

433
00:23:36,200 --> 00:23:40,500
So now I've got something that's going to count all those as they are

434
00:23:40,500 --> 00:23:42,500
actually being executed, right?

435
00:23:44,000 --> 00:23:51,200
And I'm going to need some way of actually making sure that these

436
00:23:51,200 --> 00:23:54,300
Expressions all work right?

437
00:23:54,300 --> 00:23:57,600
I need some way of these actually producing something.

438
00:23:57,600 --> 00:23:59,700
So I think I probably also need to

439
00:24:00,700 --> 00:24:03,900
These guys in something, right?

440
00:24:04,300 --> 00:24:09,100
So I need to do sort of like a dummy, some kind of a dummy rapper that

441
00:24:09,100 --> 00:24:13,000
will make sure because in this expression like a mole PS, it's going

442
00:24:13,000 --> 00:24:14,200
to come out em.

443
00:24:14,200 --> 00:24:14,500
You know.

444
00:24:14,500 --> 00:24:17,500
It's going to need to be able to put something in there.

445
00:24:18,900 --> 00:24:19,800
Although, you know what?

446
00:24:19,800 --> 00:24:23,100
Now that I think about it, I suppose that's not actually true.

447
00:24:24,000 --> 00:24:28,300
Because as long as these things are, all just stuff that takes

448
00:24:28,300 --> 00:24:29,400
parameters,

449
00:24:30,600 --> 00:24:35,600
I suppose it would just kind of work in a weird way.

450
00:24:36,100 --> 00:24:38,700
I don't know if that's actually true, I'm not sure.

451
00:24:41,200 --> 00:24:43,000
I'm not sure if that's actually true.

452
00:24:44,000 --> 00:24:45,400
But I think it might be.

453
00:24:45,600 --> 00:24:51,000
So yeah, that's weird II never thought of that before, but I guess if

454
00:24:51,000 --> 00:24:54,000
I just actually put these in here, we should actually be able to get

455
00:24:54,000 --> 00:24:58,500
the C compiler to just also do all the operations for us.

456
00:24:58,500 --> 00:24:59,700
It's that's just that

457
00:25:03,400 --> 00:25:03,600
Yeah.

458
00:25:03,600 --> 00:25:04,700
That engine just count.

459
00:25:04,700 --> 00:25:05,400
The other one, sir.

460
00:25:06,000 --> 00:25:07,800
That's kind of strange.

461
00:25:08,400 --> 00:25:11,300
I never really thought about that before, but I think that actually

462
00:25:11,300 --> 00:25:15,800
might just work, we'll find out in a second, certainly, but yeah.

463
00:25:16,000 --> 00:25:18,100
Alright, so that way it'll count.

464
00:25:18,100 --> 00:25:21,000
As you can see, I'm making the macro so that it will basically count

465
00:25:23,500 --> 00:25:28,400
its own up and then insert whatever was supposed to happen from the

466
00:25:28,400 --> 00:25:30,900
previous Ops, which will be, you know,

467
00:25:32,500 --> 00:25:37,300
Which will be some kind of a another count, right?

468
00:25:38,000 --> 00:25:38,500
All right.

469
00:25:39,600 --> 00:25:42,300
So we go.

470
00:25:46,100 --> 00:25:47,400
and,

471
00:25:49,800 --> 00:25:50,900
Almost done.

472
00:25:51,800 --> 00:25:56,800
I guess shift by an immediate wouldn't need to count the immediate.

473
00:25:58,000 --> 00:25:58,800
So, there we go.

474
00:26:00,600 --> 00:26:04,600
Yeah, I don't know if that actually works or not it's pretty strange

475
00:26:05,100 --> 00:26:06,300
but we're going to try it.

476
00:26:06,300 --> 00:26:07,300
We'll see how it goes.

477
00:26:07,700 --> 00:26:08,000
All right.

478
00:26:08,000 --> 00:26:10,900
So then I'm just going to make a going to go ahead and make here a

479
00:26:10,900 --> 00:26:13,200
little struct for our accounts.

480
00:26:15,000 --> 00:26:16,900
And again, I'm going to go ahead and macro that.

481
00:26:17,100 --> 00:26:20,600
I'm just going to go to the plus, plus I'm going to delete it off.

482
00:26:21,000 --> 00:26:25,300
I'm gonna make an inch here, search for that and kill it.

483
00:26:25,700 --> 00:26:28,500
And then that way I can just kind of run through these and turn them

484
00:26:28,500 --> 00:26:30,200
all into something reasonable.

485
00:26:30,500 --> 00:26:30,800
Yeah.

486
00:26:32,700 --> 00:26:35,600
And what we want to do, 4M, M square.

487
00:26:35,900 --> 00:26:38,800
Right is, MM, square is just a mole, right?

488
00:26:38,800 --> 00:26:46,500
So we want to increase the mole PS count, when we do RM, M square, and

489
00:26:46,500 --> 00:26:48,300
that takes one of these.

490
00:26:48,500 --> 00:26:52,200
So, now, let's see if this ridiculous stunt actually works.

491
00:26:53,000 --> 00:26:57,700
I, you know, when I say ridiculous stunt, I mean, it it's pretty

492
00:26:57,700 --> 00:26:58,400
ridiculous.

493
00:26:58,900 --> 00:26:59,900
So let's go ahead and

494
00:27:00,000 --> 00:27:05,000
To make counts thing that we can clear cannot convert from intz.

495
00:27:06,400 --> 00:27:07,200
Oh, that's true.

496
00:27:07,200 --> 00:27:09,100
These Guys, these M 128.

497
00:27:09,100 --> 00:27:09,800
That's okay.

498
00:27:10,600 --> 00:27:16,100
We'll just pretend the number 128 is an intent for now, and that is

499
00:27:16,700 --> 00:27:18,200
probably going to be that.

500
00:27:18,500 --> 00:27:23,500
All right, initialising cannot convert from into mm1 to me, I that's

501
00:27:23,500 --> 00:27:24,400
also true.

502
00:27:24,800 --> 00:27:26,800
Gotta make sure that goes there.

503
00:27:28,000 --> 00:27:29,600
And then, what's going on here?

504
00:27:29,600 --> 00:27:30,400
Are load.

505
00:27:30,400 --> 00:27:34,900
You si128 cannot convert in Star.

506
00:27:35,500 --> 00:27:40,400
So our load you, we have to at least Define these to go away to

507
00:27:40,400 --> 00:27:40,900
nothing.

508
00:27:43,600 --> 00:27:44,800
Mmm score.

509
00:27:44,800 --> 00:27:46,900
You 728 be?

510
00:27:50,500 --> 00:27:51,000
All right.

511
00:27:53,100 --> 00:27:54,300
See how that goes.

512
00:27:55,300 --> 00:28:02,500
We still have a few problems syntax error on the semicolon so load you

513
00:28:02,600 --> 00:28:07,300
si128 that's going to be in its original dust equals up.

514
00:28:07,300 --> 00:28:10,000
You have to actually make it be something though.

515
00:28:12,800 --> 00:28:19,200
Oh we forgot squirt PS and we forgot looks like we look what did one

516
00:28:19,200 --> 00:28:20,500
other one in properly as well?

517
00:28:21,000 --> 00:28:21,700
So let's make sure that

518
00:28:21,800 --> 00:28:27,400
Got everybody here, fine, mmm, squirt PS, a-plus-plus counts.

519
00:28:27,800 --> 00:28:29,100
Mmm, squirt.

520
00:28:29,100 --> 00:28:29,800
PS

521
00:28:33,400 --> 00:28:38,300
And we got to add that to our guy here, squirt.

522
00:28:38,300 --> 00:28:39,000
PS.

523
00:28:40,000 --> 00:28:42,100
And by the way, everything that I'm doing here is something the

524
00:28:42,100 --> 00:28:43,400
compiler should output for you.

525
00:28:43,900 --> 00:28:46,200
It's absolutely absurd, that it doesn't.

526
00:28:47,800 --> 00:28:51,500
But that's just what you get when your development environment doesn't

527
00:28:51,500 --> 00:28:53,400
care about low-level programmers, right?

528
00:28:53,400 --> 00:28:55,800
I mean, use this should just be a thing that you just get

529
00:28:55,800 --> 00:29:00,300
automatically from the compiler and it's kind of ridiculous that you

530
00:29:00,300 --> 00:29:00,900
don't.

531
00:29:01,600 --> 00:29:04,100
So, let's see here.

532
00:29:04,100 --> 00:29:05,200
Convert p.s.

533
00:29:05,200 --> 00:29:07,900
I guess I didn't have this one convert.

534
00:29:07,900 --> 00:29:08,600
PS.

535
00:29:09,800 --> 00:29:11,800
Did I did convert teeth?

536
00:29:11,800 --> 00:29:15,500
Yes, but I didn't do convert PS, so there we go.

537
00:29:15,700 --> 00:29:18,700
And that looks like the last one.

538
00:29:19,400 --> 00:29:20,200
So, there we go.

539
00:29:22,900 --> 00:29:23,600
Everything looks good.

540
00:29:23,600 --> 00:29:29,900
There are mmm, add PS, binary equals 0, that's outside.

541
00:29:29,900 --> 00:29:31,700
So we need to do an undef of mmm.

542
00:29:31,700 --> 00:29:36,000
Add PS here although that add PS actually does happen.

543
00:29:36,500 --> 00:29:40,600
So I guess technically we should really sort of be counting it.

544
00:29:41,000 --> 00:29:45,500
So we're going to be one ad off because of this guy, that makes sense.

545
00:29:46,000 --> 00:29:47,100
But let's go ahead and see here.

546
00:29:48,700 --> 00:29:51,600
Undef mmm, add PS.

547
00:29:56,400 --> 00:29:58,500
okay, so now

548
00:30:00,100 --> 00:30:05,600
We do not need to be compiling in release mode anymore, right?

549
00:30:05,600 --> 00:30:07,000
You can go ahead and do that.

550
00:30:08,100 --> 00:30:11,400
And we can take a look at how much many things we actually asked for

551
00:30:11,400 --> 00:30:14,200
now that's not the same as how many things happened, right?

552
00:30:14,200 --> 00:30:16,300
Because the compiler is going to do a bunch of stuff to it but it's

553
00:30:16,300 --> 00:30:21,900
just a way for us to count all of the actual, excuse me.

554
00:30:28,200 --> 00:30:29,500
All of the actual instructions.

555
00:30:30,400 --> 00:30:37,300
There were actually asking the compiler to generate on our behalf, so

556
00:30:37,900 --> 00:30:42,000
when we get down to the end of this here so we're going to go counts

557
00:30:42,000 --> 00:30:42,800
here, right?

558
00:30:42,900 --> 00:30:45,900
We're going to go ahead through here and down to here.

559
00:30:52,200 --> 00:30:55,500
I guess we will have to also get rid of our texture, fetch Loop,

560
00:30:55,500 --> 00:30:57,600
because this is all going to be complete garbage data.

561
00:30:58,800 --> 00:30:59,900
Let's go ahead and do that.

562
00:31:09,400 --> 00:31:09,700
Okay.

563
00:31:20,200 --> 00:31:22,700
Just got to clear these out because otherwise, compiler will complain.

564
00:31:24,300 --> 00:31:31,200
And cannot convert to 2nt.

565
00:31:35,000 --> 00:31:35,700
Oh right.

566
00:31:35,700 --> 00:31:36,400
I didn't have to do that.

567
00:31:36,400 --> 00:31:37,300
Those were integers.

568
00:31:37,500 --> 00:31:38,100
So that's fine.

569
00:31:38,800 --> 00:31:39,600
You can just do this.

570
00:31:41,700 --> 00:31:42,300
All right.

571
00:31:43,900 --> 00:31:45,300
so, if we do this count,

572
00:31:47,400 --> 00:31:50,200
I shouldn't there a be able to run this and actually see what the

573
00:31:50,200 --> 00:31:53,400
counts all end up being, right?

574
00:31:54,300 --> 00:31:57,400
So, if we take a look at it here, here we go.

575
00:31:58,700 --> 00:32:04,400
And you can see that we've got, I mean assuming that I didn't mess

576
00:32:04,400 --> 00:32:05,700
something up, right?

577
00:32:05,900 --> 00:32:08,600
We've got how many of each of these things.

578
00:32:08,700 --> 00:32:12,300
We are actually calling every time through the loop.

579
00:32:12,300 --> 00:32:16,800
Now I want to actually check to see if this looks like it makes any

580
00:32:16,800 --> 00:32:17,100
sense.

581
00:32:17,600 --> 00:32:20,900
I don't want to just assume that that's actually correct.

582
00:32:21,100 --> 00:32:22,400
So let's go ahead and pick one of them.

583
00:32:22,400 --> 00:32:25,200
Let's do Min, PS and see if it actually.

584
00:32:25,200 --> 00:32:31,200
Looks like it's getting called the right number of times, right?

585
00:32:32,100 --> 00:32:32,900
So that's 1.

586
00:32:33,000 --> 00:32:35,400
2 3 4 5.

587
00:32:35,900 --> 00:32:37,400
That's that's just right.

588
00:32:39,100 --> 00:32:43,500
And then Max PS, similarly, 1 2 3 4 5.

589
00:32:43,500 --> 00:32:50,100
Yeah, so that all looks pretty good and then Square looks good at PS.

590
00:32:50,700 --> 00:32:52,200
So let's check one more of them.

591
00:32:52,200 --> 00:32:53,100
Let's do a big one.

592
00:32:53,100 --> 00:32:53,400
Now.

593
00:32:53,400 --> 00:32:55,800
MLPs, well, that's 73.

594
00:32:55,800 --> 00:32:56,300
Let's do em.

595
00:32:56,300 --> 00:32:57,100
Add PS.

596
00:32:57,600 --> 00:32:59,700
So, mmm, add PS.

597
00:33:00,400 --> 00:33:08,600
we've got 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18

598
00:33:10,000 --> 00:33:11,600
So, that should be 18 and it is.

599
00:33:12,000 --> 00:33:12,500
All right.

600
00:33:12,700 --> 00:33:18,100
So this basically tells us, right, what our total operation count is

601
00:33:18,900 --> 00:33:19,100
right.

602
00:33:19,100 --> 00:33:20,600
That's the whole thing right there.

603
00:33:20,600 --> 00:33:24,300
That's how many operations we actually needed to do.

604
00:33:24,800 --> 00:33:31,000
And we could if we wanted to also, go ahead and start to actually look

605
00:33:31,000 --> 00:33:35,200
at these and multiply them by their actual latencies.

606
00:33:35,700 --> 00:33:36,200
Right?

607
00:33:37,100 --> 00:33:39,700
Like, for example, I could go ahead and

608
00:33:39,900 --> 00:33:43,300
That counts tracked down here when it gets to the end.

609
00:33:43,800 --> 00:33:45,900
I could produce another count struct.

610
00:33:46,100 --> 00:33:48,700
That's actually the latency for these guys, right?

611
00:33:48,800 --> 00:33:53,000
So if I took this count struct and I just come down here and I say,

612
00:33:53,000 --> 00:33:57,400
all right, you know, right after we finish we're in here, I want to

613
00:33:57,400 --> 00:34:01,600
take this count struct, I don't want to say latency counts, right?

614
00:34:01,600 --> 00:34:02,400
Something like this.

615
00:34:03,500 --> 00:34:06,900
I want to go in and do well, I guess I don't even need to make it

616
00:34:06,900 --> 00:34:07,800
struct for it.

617
00:34:08,100 --> 00:34:09,699
I could just make these

618
00:34:09,800 --> 00:34:14,100
he's in be floats to.

619
00:34:14,600 --> 00:34:15,100
Here we go.

620
00:34:17,100 --> 00:34:22,300
And each of these can just be whatever the count was for this guy,

621
00:34:23,000 --> 00:34:23,500
right?

622
00:34:25,500 --> 00:34:26,400
Times whatever.

623
00:34:26,400 --> 00:34:27,600
The throughput value is.

624
00:34:28,000 --> 00:34:29,900
So we can go over to the intrinsics guide.

625
00:34:35,000 --> 00:34:36,100
Doodoo.

626
00:34:36,800 --> 00:34:40,600
And we can take a look at what these actually are right, and then add

627
00:34:40,600 --> 00:34:42,500
PS and so on.

628
00:34:42,800 --> 00:34:46,500
Now, of course, the throughput value differs sometimes, but thankfully

629
00:34:46,500 --> 00:34:48,100
for some of these, it's going to be the same.

630
00:34:48,100 --> 00:34:52,400
So the throughput on the ad is, is one, right?

631
00:34:53,199 --> 00:34:55,199
The throughput on the sub is probably the same.

632
00:34:56,600 --> 00:34:59,000
you would imagine and it is

633
00:35:02,300 --> 00:35:03,700
throughput on the mall.

634
00:35:05,900 --> 00:35:07,500
Oops, that's not what I want to do.

635
00:35:14,100 --> 00:35:16,500
Is one on this one.

636
00:35:16,500 --> 00:35:18,000
We are not a Haswell processor.

637
00:35:22,200 --> 00:35:27,600
The through put on the cast, PS is really difficult to estimate

638
00:35:27,600 --> 00:35:34,800
because I suppose the cast PS is is not really late, unless it has the

639
00:35:34,800 --> 00:35:36,500
situation Fabien was alluding to.

640
00:35:37,200 --> 00:35:41,100
So I guess we don't actually know what that one is, will assume that

641
00:35:41,100 --> 00:35:46,800
we can do it for free somehow and and not counted for now.

642
00:35:48,900 --> 00:35:52,600
All right, throughput here I guess.

643
00:35:52,800 --> 00:35:58,900
So I don't actually know what processors family were running on right

644
00:35:58,900 --> 00:35:59,300
now.

645
00:36:00,000 --> 00:36:04,600
What I might do is just take a quick second to figure out, let's see.

646
00:36:05,500 --> 00:36:09,100
I want to be able to right click on my computer and hit properties.

647
00:36:10,100 --> 00:36:14,700
So this is a z on 5580, right?

648
00:36:15,200 --> 00:36:18,800
So what is a z on 5580?

649
00:36:24,300 --> 00:36:25,500
What is the family?

650
00:36:27,000 --> 00:36:28,500
Or the core type.

651
00:36:28,700 --> 00:36:33,400
I guess is what what I want to know, okay, it's launched.

652
00:36:33,500 --> 00:36:34,800
Thank you very much for that.

653
00:36:35,500 --> 00:36:38,400
Can you tell me that the core type?

654
00:36:39,400 --> 00:36:41,400
I don't care about any of these things.

655
00:36:43,200 --> 00:36:44,400
Give me some more.

656
00:36:44,400 --> 00:36:46,500
Give me something better, nail, mmm.

657
00:36:47,100 --> 00:36:48,000
So that's what it is.

658
00:36:49,200 --> 00:36:56,900
So on an inhale emits 0.33, that's kind of crazy, if that's what it

659
00:36:56,900 --> 00:36:57,600
says.

660
00:36:58,200 --> 00:37:00,600
Let's hope that's accurate, right?

661
00:37:00,600 --> 00:37:05,000
Mmm and PS is actually says that.

662
00:37:05,000 --> 00:37:05,900
That's what that is.

663
00:37:05,900 --> 00:37:07,800
So we'll trust him for now.

664
00:37:09,000 --> 00:37:13,200
We should probably be looking at agner fog because that's probably a

665
00:37:13,200 --> 00:37:18,500
more trustworthy Source, but at the moment that would take a lot.

666
00:37:18,600 --> 00:37:23,300
Longer and time is of the essence on the stream, huh?

667
00:37:23,400 --> 00:37:25,500
GE TS.

668
00:37:27,400 --> 00:37:29,700
Again with looks like we don't have a throughput on here.

669
00:37:30,000 --> 00:37:32,700
I believe the throughput on this is one, but we should probably double

670
00:37:32,700 --> 00:37:33,300
check it.

671
00:37:35,100 --> 00:37:40,100
Anyone who wants to go ahead and double check that on a on a on agner

672
00:37:40,400 --> 00:37:41,600
that would be good cop.

673
00:37:41,600 --> 00:37:42,200
Ellie

674
00:37:46,400 --> 00:37:50,700
I think that's also one can't belly.

675
00:37:53,900 --> 00:37:55,500
And then we've got Min and Max.

676
00:37:58,400 --> 00:37:59,600
So, Min PS.

677
00:38:01,000 --> 00:38:03,300
And Max PS.

678
00:38:04,400 --> 00:38:05,100
Both one.

679
00:38:12,300 --> 00:38:16,500
And then we've got convert TPS epi32 and convert.

680
00:38:17,000 --> 00:38:19,100
So what are those convert?

681
00:38:19,200 --> 00:38:20,800
PS epi32?

682
00:38:22,400 --> 00:38:23,600
That is one

683
00:38:25,100 --> 00:38:29,200
And this one is also won a lot of these guys are just one.

684
00:38:31,300 --> 00:38:35,900
And if you're at wondering why I'm putting in x one, just mental note.

685
00:38:35,900 --> 00:38:38,300
So it's like, okay, we got it.

686
00:38:40,500 --> 00:38:42,900
Convert epi32, PS.

687
00:38:45,500 --> 00:38:45,800
It's going.

688
00:38:45,800 --> 00:38:48,100
The other direction also won.

689
00:38:51,100 --> 00:38:52,500
Then we've got our and

690
00:38:54,400 --> 00:38:54,800
zoom Italy.

691
00:38:54,800 --> 00:38:56,200
This is the same speed.

692
00:38:56,400 --> 00:38:57,000
It is.

693
00:38:58,900 --> 00:38:59,700
Looks like the bitwise.

694
00:39:00,000 --> 00:39:01,600
Are all a third of a cycle.

695
00:39:04,500 --> 00:39:07,300
Presumably, I'm just going to go ahead and guess that the and not is

696
00:39:07,300 --> 00:39:07,900
the same.

697
00:39:10,400 --> 00:39:10,700
Yeah.

698
00:39:15,600 --> 00:39:17,600
You know what should probably do.

699
00:39:18,600 --> 00:39:25,600
1.0 F, over 3.0 F and do like third or something like this.

700
00:39:28,800 --> 00:39:31,700
And and have these guys actually just used that so that it's a little

701
00:39:31,700 --> 00:39:39,100
more precise than the ridiculous version that they were using on the,

702
00:39:39,100 --> 00:39:39,800
on the form there.

703
00:39:39,900 --> 00:39:41,500
All right, so there's the nth not.

704
00:39:42,600 --> 00:39:44,400
So, let's take a look at the shift, right?

705
00:39:44,400 --> 00:39:48,400
SL R II, slrs are iupi 32?

706
00:39:49,100 --> 00:39:50,400
That's a throughput one as well.

707
00:39:55,300 --> 00:39:57,900
And so, presumably the left shift will also.

708
00:39:59,600 --> 00:40:00,400
Be that way.

709
00:40:01,400 --> 00:40:04,300
So SLL.

710
00:40:04,300 --> 00:40:06,300
I epi32.

711
00:40:06,700 --> 00:40:07,200
Yep.

712
00:40:07,700 --> 00:40:08,600
And the squirt.

713
00:40:08,600 --> 00:40:11,600
Now, squirt, if I remember correctly, was a pretty brutal one.

714
00:40:13,600 --> 00:40:19,100
So, on a Halo, that's a 16 cycle, all right.

715
00:40:21,000 --> 00:40:27,500
So we now have all of these guys put together here, right?

716
00:40:27,900 --> 00:40:31,700
So I'm going to go ahead and do a little more Ridiculousness.

717
00:40:31,900 --> 00:40:34,100
I'm just going to put all these guys inside.

718
00:40:34,100 --> 00:40:36,500
A some like so

719
00:40:41,800 --> 00:40:42,500
These guys are.

720
00:40:42,500 --> 00:40:44,000
I guess, just zero,

721
00:40:46,800 --> 00:40:48,900
We'll go ahead and use our power of macro again.

722
00:40:54,200 --> 00:40:55,400
So search for that.

723
00:40:55,800 --> 00:40:58,700
So I guess I should do it this way search for that.

724
00:41:06,100 --> 00:41:06,500
Okay.

725
00:41:08,900 --> 00:41:14,500
And to continue the absurdity, we'll just do some of a equals.

726
00:41:16,800 --> 00:41:24,400
A oops, sorry a and then total plus equals a right.

727
00:41:29,400 --> 00:41:33,400
So yeah, that way we can do a total equals zero and then at the end,

728
00:41:33,400 --> 00:41:35,400
we'll get an actual total right?

729
00:41:35,700 --> 00:41:36,600
Seems reasonable.

730
00:41:38,100 --> 00:41:40,200
What is the problem here?

731
00:41:41,100 --> 00:41:44,700
You're sizing for into real 32?

732
00:41:45,700 --> 00:41:47,100
Oh well, you know what?

733
00:41:47,200 --> 00:41:52,000
That's pretty easy for us to to fix.

734
00:41:52,700 --> 00:41:55,000
We can just go ahead and

735
00:41:56,200 --> 00:41:58,300
and change all of the stars.

736
00:42:00,400 --> 00:42:02,900
Man, today is some good hackery.

737
00:42:03,000 --> 00:42:06,800
This is just some some good hackery we just change all the stars two

738
00:42:06,800 --> 00:42:08,800
commas, right?

739
00:42:09,400 --> 00:42:13,100
Then we can do like latency and the thing, right?

740
00:42:13,300 --> 00:42:18,800
So then we can just do real 32 a wait-and-see times that thing like so

741
00:42:19,900 --> 00:42:21,100
and we can make that

742
00:42:23,000 --> 00:42:24,400
Be what we add to the total as well.

743
00:42:25,100 --> 00:42:26,000
Totally crazy.

744
00:42:26,300 --> 00:42:27,400
Don't try this at home.

745
00:42:29,100 --> 00:42:32,300
So yeah, there we go.

746
00:42:33,800 --> 00:42:41,900
And in theory I can now go get some sort of a throughput total for

747
00:42:41,900 --> 00:42:42,600
myself.

748
00:42:44,000 --> 00:42:50,200
And this is only in theory, so where we at, here's our counts.

749
00:42:51,800 --> 00:42:53,500
And here is our total.

750
00:42:56,800 --> 00:42:57,300
Well.

751
00:42:58,500 --> 00:43:01,100
Isn't that fancy?

752
00:43:01,700 --> 00:43:02,700
Ladies and gentlemen?

753
00:43:03,400 --> 00:43:05,300
Isn't that fancy?

754
00:43:06,600 --> 00:43:11,100
How does that number Look to You 218?

755
00:43:11,100 --> 00:43:15,300
Total cycles of throughput that is if we were to do everything.

756
00:43:15,600 --> 00:43:17,000
Exactly perfectly.

757
00:43:18,200 --> 00:43:21,100
So that all the instructions, just slammed to the processor.

758
00:43:21,300 --> 00:43:22,400
That's what we would get.

759
00:43:23,300 --> 00:43:26,700
Well, we are filling for pixels at a time.

760
00:43:29,900 --> 00:43:32,900
That means somehow.

761
00:43:33,800 --> 00:43:42,000
Right, our actual measured, throughput is slightly lower than what the

762
00:43:42,000 --> 00:43:43,600
theoretical maximum would be.

763
00:43:43,600 --> 00:43:48,200
If all of those things were just issued back-to-back, okay?

764
00:43:48,900 --> 00:43:51,300
So that's a good sign for starters.

765
00:43:51,900 --> 00:43:54,200
And I assume that just means that a lot of these things are getting

766
00:43:54,200 --> 00:43:56,200
issued in parallel.

767
00:43:56,700 --> 00:44:01,000
That's, that's basically, the only thing I can assume in order for us

768
00:44:01,000 --> 00:44:03,500
to have to be that low with, that essentially means,

769
00:44:04,300 --> 00:44:09,600
Is that we're, issuing, multiple instructions per cycle, so that we're

770
00:44:09,600 --> 00:44:15,700
not actually ever having to even weight, the throughput total we're

771
00:44:15,700 --> 00:44:19,200
sort of overlapping things as we go.

772
00:44:19,700 --> 00:44:22,600
So, in order to calculate a total for this,

773
00:44:23,400 --> 00:44:26,400
The next like lowest total that we could get to.

774
00:44:26,400 --> 00:44:31,400
This is just to say I was kind of hoping we would be above this total

775
00:44:31,400 --> 00:44:32,900
already but we're not.

776
00:44:32,900 --> 00:44:36,700
So this total is basically what the total would be if there was only

777
00:44:36,700 --> 00:44:42,900
one unit executing all of the instructions, but they were all

778
00:44:42,900 --> 00:44:43,800
perfectly overlap.

779
00:44:43,800 --> 00:44:47,500
So you just stream them seriously through the processor maximum,

780
00:44:47,500 --> 00:44:47,600
throughput.

781
00:44:47,600 --> 00:44:51,200
Now, what we saw is we actually got that, right?

782
00:44:51,200 --> 00:44:53,100
We're actually getting slightly below that.

783
00:44:53,400 --> 00:44:57,500
It says that that that would give us about 50 for Cycles.

784
00:44:57,500 --> 00:44:59,800
Total 55 Cycles, we're actually getting like 48.

785
00:45:00,000 --> 00:45:00,900
Cycles right now.

786
00:45:01,500 --> 00:45:05,100
So we're actually better than what that suggests right.

787
00:45:06,000 --> 00:45:08,200
And I think we didn't count this ad, right?

788
00:45:08,200 --> 00:45:10,400
So this ad, it should actually be a little bit higher.

789
00:45:11,500 --> 00:45:14,200
So what that means is we're actually getting a lot of pairing in here

790
00:45:15,200 --> 00:45:18,500
and in order to count the pairing, we would need to know essentially

791
00:45:18,600 --> 00:45:23,600
how many is of these instructions we could issue at any given time,

792
00:45:23,900 --> 00:45:24,500
right?

793
00:45:25,800 --> 00:45:29,900
Now, I have no idea how many units this guy has.

794
00:45:30,700 --> 00:45:32,800
I don't even know where I can get that data.

795
00:45:33,200 --> 00:45:34,500
So, this ought to be interesting.

796
00:45:35,300 --> 00:45:38,300
Let's go ahead and look at the W.

797
00:45:38,300 --> 00:45:43,500
5580 again, I don't know where to find out.

798
00:45:43,500 --> 00:45:46,100
How many units the thing has.

799
00:45:46,100 --> 00:45:48,100
I don't think they tell you on here.

800
00:45:49,600 --> 00:45:54,000
In fact, I'm pretty sure they don't tell you but we do know it's an

801
00:45:54,000 --> 00:45:54,300
inhale.

802
00:45:54,300 --> 00:45:55,100
Mm core.

803
00:45:55,700 --> 00:45:58,700
So maybe we can take a wild leap.

804
00:46:00,400 --> 00:46:01,000
And see.

805
00:46:04,200 --> 00:46:06,700
Okay, so let's see.

806
00:46:07,800 --> 00:46:09,200
What is it have?

807
00:46:09,300 --> 00:46:11,100
Okay, we don't care about Cassius right now.

808
00:46:11,100 --> 00:46:12,400
We don't care about any of these things.

809
00:46:12,400 --> 00:46:18,800
Right now, we just want to know what kind of units it has in it and

810
00:46:18,800 --> 00:46:22,900
this does not tell us that so maybe I can search.

811
00:46:22,900 --> 00:46:23,400
Wow.

812
00:46:24,700 --> 00:46:25,700
Look at this stuff.

813
00:46:28,000 --> 00:46:29,900
Price for 1K unit.

814
00:46:33,100 --> 00:46:33,900
Those are expensive.

815
00:46:33,900 --> 00:46:41,400
All right, anyway, so I wonder if I can say like alus or something.

816
00:46:41,400 --> 00:46:45,600
Just, I don't know if there's something in here that would tell us how

817
00:46:45,600 --> 00:46:49,700
many ports it has, how many, you know things that can issue at once

818
00:46:49,900 --> 00:46:50,800
because that's really

819
00:46:52,300 --> 00:46:53,600
That's really all we want to know.

820
00:46:54,500 --> 00:47:00,300
Let's see, technology scaling up issues rapid execution, engine, blah,

821
00:47:00,300 --> 00:47:01,300
blah, blah.

822
00:47:04,200 --> 00:47:05,800
now, if this actually helps

823
00:47:08,500 --> 00:47:10,600
This may be one of those things where we just have to put it on, hold

824
00:47:10,600 --> 00:47:15,000
for a minute and actually ask someone who knows better than we do.

825
00:47:16,500 --> 00:47:20,200
Which would be nice to have here but unfortunately we don't, let's

826
00:47:20,200 --> 00:47:21,000
see.

827
00:47:22,200 --> 00:47:24,400
Yeah, I know this is, this is not what we want.

828
00:47:24,400 --> 00:47:27,700
I just want to know how many instructions are can issue at a time?

829
00:47:27,700 --> 00:47:29,700
Well, let's take a look and the hail, mmm.

830
00:47:34,100 --> 00:47:36,900
How many l use?

831
00:47:39,600 --> 00:47:40,900
Texas A&M.

832
00:47:44,500 --> 00:47:47,100
Okay let's see here.

833
00:47:48,100 --> 00:47:52,800
Cache hierarchy main memory virtual memory hey Lem data pipeline out

834
00:47:52,800 --> 00:47:56,100
of order execution execution pipelines, load and store assembly

835
00:47:56,100 --> 00:47:57,400
operations.

836
00:47:57,700 --> 00:47:59,300
Well, this might

837
00:48:01,600 --> 00:48:03,200
Have some of that for us but I don't know.

838
00:48:03,800 --> 00:48:05,100
Let's see it.

839
00:48:05,100 --> 00:48:09,400
Registers in helium core contains the authority to carry out to double

840
00:48:09,400 --> 00:48:13,700
Precision or for single Precision positioning in each of the one of

841
00:48:13,700 --> 00:48:16,900
the 2fp units assessable through Port 0 and 1.

842
00:48:17,200 --> 00:48:23,200
Okay so we have 2 FP units that we can issue to so On Any Given cycle

843
00:48:23,200 --> 00:48:26,000
that would assume assuming that I'm reading this correctly that would

844
00:48:26,000 --> 00:48:30,000
mean that we could issue for example to multiplies or ads or things

845
00:48:30,000 --> 00:48:30,400
like that.

846
00:48:30,400 --> 00:48:31,200
Assuming that they're same.

847
00:48:32,900 --> 00:48:36,500
Steady state conditions, each core can retire for double Precision or

848
00:48:36,500 --> 00:48:39,100
eight single Precision, floating Point operations, each cycle.

849
00:48:39,300 --> 00:48:42,600
So that, yeah, that would make sense the time idea, throughput in core

850
00:48:42,600 --> 00:48:43,900
quad core Cycles.

851
00:48:44,000 --> 00:48:45,200
So that, that is

852
00:48:46,600 --> 00:48:47,500
That is reasonable.

853
00:48:49,300 --> 00:48:50,500
See if there's anything else.

854
00:48:52,600 --> 00:48:54,000
We can learn from this here.

855
00:48:58,800 --> 00:49:02,300
So assuming that there were two of those and if we look at the kinds

856
00:49:02,300 --> 00:49:06,000
of stuff we have here and separate these out, right?

857
00:49:07,400 --> 00:49:10,600
So, these are all the guys that go through.

858
00:49:10,600 --> 00:49:13,600
We don't, let's see if we can get.

859
00:49:13,600 --> 00:49:15,900
Does this actually have the port listing on it?

860
00:49:16,200 --> 00:49:21,200
So, unfortunately, what we don't get from this piece of information

861
00:49:21,200 --> 00:49:22,100
here, right?

862
00:49:23,100 --> 00:49:27,300
From this intrinsics guide, it doesn't tell us what instructions can

863
00:49:27,300 --> 00:49:27,800
be issued.

864
00:49:27,900 --> 00:49:30,800
What other instructions if you remember back to, when we talked about

865
00:49:30,800 --> 00:49:36,000
CPU architectures and optimization, I was saying that, you know, I

866
00:49:36,000 --> 00:49:39,500
believe in x64 oppressor can issue up to four instructions at once,

867
00:49:39,500 --> 00:49:39,900
right?

868
00:49:39,900 --> 00:49:45,900
But you know which, which instructions they are matters.

869
00:49:45,900 --> 00:49:48,200
It can't just issue any for instructions at once.

870
00:49:48,200 --> 00:49:51,100
Because as we talked about again, that same time when I was talking

871
00:49:51,100 --> 00:49:54,800
about this, I was saying there has to be a unit free, that can

872
00:49:54,800 --> 00:49:56,300
actually accept that instruction.

873
00:49:56,300 --> 00:49:57,900
So if there is only two months,

874
00:49:57,900 --> 00:50:00,600
Multipliers total on the chip right?

875
00:50:00,600 --> 00:50:01,400
That it doesn't matter.

876
00:50:01,400 --> 00:50:05,600
If can in theory issue for instructions, it can only issue to multiply

877
00:50:05,600 --> 00:50:09,300
instructions because there's only two possible places to shove those

878
00:50:09,300 --> 00:50:10,100
multiplies.

879
00:50:10,200 --> 00:50:12,100
There are another two units to kick off.

880
00:50:12,100 --> 00:50:15,900
Even though the front end of the processor would be totally capable of

881
00:50:15,900 --> 00:50:19,000
doing so if those units do exist but they don't write.

882
00:50:20,400 --> 00:50:23,100
So what we want to see here if we were going to try and get this

883
00:50:23,300 --> 00:50:27,100
calculation down to something more accurate, what we want to see is we

884
00:50:27,100 --> 00:50:27,800
want to know

885
00:50:28,000 --> 00:50:29,100
To these instructions.

886
00:50:30,900 --> 00:50:31,100
You know?

887
00:50:31,100 --> 00:50:33,700
How many of them we can issue per cycle, basically?

888
00:50:33,800 --> 00:50:34,500
Right.

889
00:50:35,000 --> 00:50:38,100
And so, that would give us an idea of what these multipliers would

890
00:50:38,100 --> 00:50:38,600
actually be.

891
00:50:38,600 --> 00:50:42,200
Now, if everything could be issued to per cycle, if two per cycle was

892
00:50:42,200 --> 00:50:45,200
this, the average that we could issue, let's say then we would know

893
00:50:45,200 --> 00:50:48,600
that we just take the total and we divide it by 2, right?

894
00:50:48,600 --> 00:50:51,600
So we take that total and instead of dividing by 4, we'd actually

895
00:50:51,600 --> 00:50:55,800
divide it by 8 and that would give us twenty seven Cycles would be

896
00:50:55,800 --> 00:50:57,600
sort of the maximum throughput that we could ever.

897
00:50:57,900 --> 00:50:59,900
Hope to possibly achieve you.

898
00:51:00,100 --> 00:51:02,900
This set of things that we're doing, right?

899
00:51:04,300 --> 00:51:07,000
So I don't know, right?

900
00:51:07,500 --> 00:51:09,300
I think we're at a little bit of an impasse here.

901
00:51:09,300 --> 00:51:11,800
We're going to need more information about the particular process that

902
00:51:11,800 --> 00:51:13,700
we're on in order to get a better estimate.

903
00:51:13,700 --> 00:51:17,900
But I'm actually relatively happy even though I don't think we can do

904
00:51:17,900 --> 00:51:20,400
that without a little bit more information and something they probably

905
00:51:20,400 --> 00:51:21,100
don't want to do on stream.

906
00:51:21,100 --> 00:51:22,700
Like we could go hunt through under fog tables.

907
00:51:22,700 --> 00:51:24,000
The ports are probably listed on there.

908
00:51:26,200 --> 00:51:29,000
We've actually gotten a piece of information that's actually pretty

909
00:51:29,000 --> 00:51:29,500
valuable.

910
00:51:29,800 --> 00:51:33,900
Which is that even just right now knowing that we're at about,

911
00:51:34,100 --> 00:51:36,300
48 Cycles or something like that per pixel.

912
00:51:36,700 --> 00:51:41,200
We're actually very, very close to the threshold.

913
00:51:41,200 --> 00:51:46,700
We're optimizing it further just in terms of the actual mathematical

914
00:51:46,700 --> 00:51:47,200
operations.

915
00:51:47,200 --> 00:51:49,700
If we were going to keep doing them wouldn't actually get us very much

916
00:51:49,700 --> 00:51:50,300
faster.

917
00:51:50,500 --> 00:51:51,100
Right.

918
00:51:51,300 --> 00:51:55,100
Because if it really is true that there's only like two multipliers or

919
00:51:55,100 --> 00:51:56,000
two floating Point.

920
00:51:56,000 --> 00:51:59,400
Things can be issued every cycle you know looking down here at twenty

921
00:51:59,400 --> 00:52:03,900
seven Cycles it's like okay we're not running very far behind that.

922
00:52:04,000 --> 00:52:07,700
Actual theoretical throughput right now we could we get a little

923
00:52:07,700 --> 00:52:08,500
closer probably.

924
00:52:08,500 --> 00:52:09,000
Yes.

925
00:52:09,500 --> 00:52:12,100
But it's kind of a point of diminishing returns there right?

926
00:52:12,100 --> 00:52:15,600
It's like we don't have that much Headroom to go so it sort of looks

927
00:52:15,600 --> 00:52:18,500
like I actually got what I wanted from this even though it's not

928
00:52:18,500 --> 00:52:23,800
particularly accurate yet which is I have an idea now of whether or

929
00:52:23,800 --> 00:52:27,900
not something like say memory latency was hurting us and it looks like

930
00:52:27,900 --> 00:52:29,300
it really wasn't, right?

931
00:52:29,400 --> 00:52:32,400
Because look at how you know with with how close it appears that we

932
00:52:32,400 --> 00:52:32,800
are there.

933
00:52:32,800 --> 00:52:33,800
It looks like

934
00:52:34,100 --> 00:52:36,700
The cash was operating quite well for us.

935
00:52:36,700 --> 00:52:37,600
Very friendly.

936
00:52:38,300 --> 00:52:41,700
It doesn't look like we're having a lot of problems with stalls or

937
00:52:41,700 --> 00:52:42,900
anything like this, right?

938
00:52:43,300 --> 00:52:44,500
So that's a pretty interesting thing.

939
00:52:44,500 --> 00:52:47,400
That's a pretty good thing for us to know.

940
00:52:47,400 --> 00:52:51,500
Now what I'd like to do as well is take a quick look at what happens

941
00:52:51,500 --> 00:52:53,400
under a couple of different conditions here.

942
00:52:53,600 --> 00:52:56,400
So what I want to do is make some way that we can, if that this out

943
00:52:56,400 --> 00:52:56,900
easily.

944
00:52:57,200 --> 00:53:00,900
So I want to basically make a thing that's like Define count Cycles or

945
00:53:00,900 --> 00:53:02,200
something like this, right?

946
00:53:04,300 --> 00:53:07,200
And what I'm going to do is I'm going to do an if on that, right?

947
00:53:07,200 --> 00:53:12,100
So that if that is not defined, right then, it doesn't.

948
00:53:12,100 --> 00:53:14,300
It lets things operate properly.

949
00:53:14,500 --> 00:53:14,800
Right?

950
00:53:14,800 --> 00:53:18,500
So we do it, if count cycles, and then down here we do.

951
00:53:18,600 --> 00:53:21,400
And if count Cycles again, right?

952
00:53:21,900 --> 00:53:26,300
Like so cycles and that way we can just turn it on and off.

953
00:53:26,300 --> 00:53:30,100
Anytime we want to cycle count and it doesn't actually do anything

954
00:53:30,300 --> 00:53:31,600
weird for us, right?

955
00:53:31,800 --> 00:53:32,600
So, here we go.

956
00:53:34,800 --> 00:53:37,200
Change this around though, okay.

957
00:53:38,900 --> 00:53:39,400
so,

958
00:53:42,000 --> 00:53:43,700
let's take a look at something here.

959
00:53:46,800 --> 00:53:48,600
Oh, right, we're in debug mode, still.

960
00:53:49,400 --> 00:53:51,100
Debug mode is quite a bit slower.

961
00:53:54,100 --> 00:53:54,600
Okay.

962
00:53:57,600 --> 00:53:59,900
Alright, so here we are.

963
00:54:00,400 --> 00:54:03,500
At our forty eight ish cycles per pixel.

964
00:54:03,900 --> 00:54:10,400
What I wanted to do is take a look at how bad One screwed us here.

965
00:54:10,600 --> 00:54:12,500
Let's just, let's just get it out in the open.

966
00:54:13,100 --> 00:54:18,500
Let's look at how badly Juan Chun one Chun screwed us.

967
00:54:18,900 --> 00:54:20,400
That's, that's where we're at.

968
00:54:20,800 --> 00:54:23,800
He is the person who demanded that we put in gamma correction.

969
00:54:24,400 --> 00:54:26,800
Honestly, I don't think it made very much of a difference but he's

970
00:54:26,800 --> 00:54:27,200
correct.

971
00:54:27,200 --> 00:54:28,500
It was a good thing to talk about.

972
00:54:28,500 --> 00:54:29,900
Either way it was, it was

973
00:54:30,000 --> 00:54:34,300
Isn't that we looked at it even if we choose to get rid of it and

974
00:54:34,400 --> 00:54:39,000
basically having the squirt in here is really bad, okay?

975
00:54:39,400 --> 00:54:42,800
So what I'd like to do is see what happens if we get rid of the

976
00:54:42,800 --> 00:54:43,500
squirt.

977
00:54:46,500 --> 00:54:49,300
What will our performance look like then.

978
00:54:49,300 --> 00:54:52,400
So, we've got two cases where this gets used.

979
00:54:52,600 --> 00:54:56,900
We have a mole PS here, so we're doing our Square.

980
00:54:57,000 --> 00:55:00,100
So what I'm going to do is I'm going to come down here and instead of

981
00:55:00,100 --> 00:55:03,600
em em squirt PS, what I'm going to do is we're going to remove that,

982
00:55:03,700 --> 00:55:04,100
right?

983
00:55:04,700 --> 00:55:09,100
So I'm going to say all right I want to Define m m Square.

984
00:55:09,200 --> 00:55:11,600
We're going to undef that and I'm Square.

985
00:55:11,800 --> 00:55:14,000
I wanted to find in the Square a as just a

986
00:55:14,700 --> 00:55:17,200
So M squared is does not do anything.

987
00:55:18,100 --> 00:55:21,000
And then I'm going to Define, mmm, squirt PS2.

988
00:55:22,000 --> 00:55:23,200
Also not do anything.

989
00:55:23,300 --> 00:55:26,400
So I'm just undoing the gamma correction so that it's just gone,

990
00:55:27,100 --> 00:55:27,500
right?

991
00:55:27,500 --> 00:55:28,100
It's gone.

992
00:55:30,500 --> 00:55:31,700
and so, if I run that,

993
00:55:34,600 --> 00:55:35,800
Let's see where we're at.

994
00:55:36,000 --> 00:55:38,700
Oh well, it doesn't look right though.

995
00:55:39,200 --> 00:55:41,800
So we've got some kind of weird fringing going on.

996
00:55:42,200 --> 00:55:44,800
So what did I do there?

997
00:55:45,700 --> 00:55:46,500
That should work.

998
00:55:46,500 --> 00:55:49,000
Should it not to do the squaring?

999
00:55:49,500 --> 00:55:54,600
I wonder do we have something gamma corrected that I'm not thinking of

1000
00:55:54,600 --> 00:55:55,100
here.

1001
00:55:56,000 --> 00:55:57,800
Let's see here Square.

1002
00:55:57,800 --> 00:56:00,800
We've got the mul PS but so that's just going to leave things.

1003
00:56:00,800 --> 00:56:03,000
The same after doing the inverse.

1004
00:56:04,700 --> 00:56:06,800
So that's all should be fine.

1005
00:56:08,300 --> 00:56:09,800
Let's see what happens here.

1006
00:56:10,200 --> 00:56:14,700
The desk gets raised to that power, so that's fine.

1007
00:56:16,000 --> 00:56:24,600
And then we do the square root after we're done to put things back.

1008
00:56:25,700 --> 00:56:28,400
So why are we getting that?

1009
00:56:32,000 --> 00:56:35,400
That's a little troubling to me.

1010
00:56:36,900 --> 00:56:41,800
What's going on there because that should not be the case, right?

1011
00:56:41,800 --> 00:56:44,300
That is not what we wanted to see.

1012
00:56:46,500 --> 00:56:51,700
Something is amiss, something is awry and I'm not sure what it is.

1013
00:56:52,900 --> 00:56:53,700
so,

1014
00:57:02,300 --> 00:57:06,900
It's like the clamping isn't actually working.

1015
00:57:06,900 --> 00:57:08,000
Where is our clamping.

1016
00:57:09,200 --> 00:57:18,300
So we do our sub PS here Texel, LPS dust our.

1017
00:57:18,300 --> 00:57:19,700
And those are squares as well.

1018
00:57:20,200 --> 00:57:20,900
Yeah, I'm not.

1019
00:57:24,700 --> 00:57:27,800
I don't know what the problem is.

1020
00:57:27,800 --> 00:57:29,700
Does anyone see what the problem is there?

1021
00:57:30,400 --> 00:57:33,600
Well, I got three minutes left but I'd like to know what what's going

1022
00:57:33,600 --> 00:57:34,200
on there.

1023
00:57:35,400 --> 00:57:35,700
Right.

1024
00:57:35,700 --> 00:57:40,300
You can very clearly see that around the edges, right?

1025
00:57:40,900 --> 00:57:42,100
We've got that problem.

1026
00:57:46,300 --> 00:57:49,200
Oh, I know what we probably have to do.

1027
00:57:51,700 --> 00:57:56,900
Yes, when we load the bitmap, I always forget exactly where we are

1028
00:57:56,900 --> 00:57:59,000
with things when we load the bitmap.

1029
00:58:00,800 --> 00:58:03,000
We actually converted the bitmap.

1030
00:58:06,000 --> 00:58:07,900
We converted the bitmap that way as well.

1031
00:58:08,900 --> 00:58:14,100
So what we would need to do here is we would need to not do this this

1032
00:58:14,100 --> 00:58:15,500
in and out, right?

1033
00:58:17,500 --> 00:58:20,200
That's all we would need to do, I believe oops.

1034
00:58:21,400 --> 00:58:26,400
That was not right srgb to linear one.

1035
00:58:26,900 --> 00:58:29,400
Linear one to srgb.

1036
00:58:35,600 --> 00:58:36,600
I take that back.

1037
00:58:36,800 --> 00:58:39,100
We would need to move this below.

1038
00:58:41,300 --> 00:58:42,700
That's what we actually need to do.

1039
00:58:44,200 --> 00:58:48,600
Of course that does not look good at all, but that's what should be

1040
00:58:48,600 --> 00:58:49,100
right.

1041
00:58:49,200 --> 00:58:51,700
Because if we post, if we pre-multiply the alpha

1042
00:58:54,100 --> 00:58:57,800
That's what actually should be working, right?

1043
00:58:58,500 --> 00:59:01,900
Because we can't leave it with the conversion.

1044
00:59:06,900 --> 00:59:07,900
Leaving it with the conversion.

1045
00:59:07,900 --> 00:59:11,600
Like that means that the alpha won't be the correct value for

1046
00:59:11,700 --> 00:59:14,000
compositing with premultiplied Alpha, right?

1047
00:59:14,000 --> 00:59:17,000
Because it's doing the premultiplied alpha as if we were going to do

1048
00:59:17,200 --> 00:59:18,600
an srgb conversion.

1049
00:59:19,000 --> 00:59:22,500
So it but we should be able to just leave it without doing the pre

1050
00:59:22,500 --> 00:59:25,700
multiplication and then pre-multiply after, right?

1051
00:59:27,400 --> 00:59:32,900
And for some reason that gives us completely garbage values,

1052
00:59:34,400 --> 00:59:40,400
Which I oh duh, because Texel a gets converted.

1053
00:59:41,100 --> 00:59:41,400
Yeah.

1054
00:59:46,100 --> 00:59:47,500
Try that one more time.

1055
00:59:54,900 --> 00:59:58,100
Oh, and see, everything's going to be 255 there.

1056
01:00:04,700 --> 01:00:06,700
Oh, wait, no, no, that's fine, that's still fine.

1057
01:00:07,300 --> 01:00:09,200
I just didn't use the variable actually, set up.

1058
01:00:09,600 --> 01:00:10,600
Slow down the street.

1059
01:00:11,000 --> 01:00:12,000
All right, so that's fine.

1060
01:00:12,100 --> 01:00:13,700
So we don't actually need to do any of that.

1061
01:00:13,700 --> 01:00:16,100
I just wanted to verify that we didn't have some other bug.

1062
01:00:17,000 --> 01:00:18,100
Obviously, we don't care.

1063
01:00:18,100 --> 01:00:20,300
I'm just doing a speed test, so that's all fine.

1064
01:00:20,600 --> 01:00:21,600
So that's all good.

1065
01:00:22,600 --> 01:00:23,700
Nothing to worry about there.

1066
01:00:25,500 --> 01:00:31,500
So doing this speed test, it looks like one has not heard us too

1067
01:00:31,500 --> 01:00:33,200
badly, right?

1068
01:00:34,800 --> 01:00:35,000
You know.

1069
01:00:35,000 --> 01:00:35,900
It's not great.

1070
01:00:37,800 --> 01:00:41,500
You know we've got we've got like six Cycles or something that we

1071
01:00:41,500 --> 01:00:45,300
saved from from not doing the gamma correction but it's not awful,

1072
01:00:45,500 --> 01:00:45,800
right?

1073
01:00:45,800 --> 01:00:48,600
It's not like it's twice as fast or something like that.

1074
01:00:48,900 --> 01:00:54,800
So at the moment without doing any more work to optimize this one

1075
01:00:55,200 --> 01:00:56,500
Could rest easy knowing that?

1076
01:00:56,500 --> 01:01:00,200
He is not ruined all of handmade hero with his gamma correction,

1077
01:01:00,400 --> 01:01:00,900
right?

1078
01:01:03,100 --> 01:01:03,800
So okay.

1079
01:01:04,900 --> 01:01:10,400
So, at this point, I am fairly satisfied to say that this is a pretty

1080
01:01:10,400 --> 01:01:17,000
reasonably optimized pixel Loop All Things Considered, especially when

1081
01:01:17,000 --> 01:01:19,700
you consider the fact that we've got this ridiculous and snapping in

1082
01:01:19,700 --> 01:01:24,300
here, that has to go fetch, all these pixel values, which is kind of

1083
01:01:24,300 --> 01:01:25,700
ridiculous, right?

1084
01:01:26,300 --> 01:01:27,600
So it looks pretty good to me.

1085
01:01:27,600 --> 01:01:29,300
Actually, it's not that slow.

1086
01:01:29,300 --> 01:01:30,300
Could it get faster?

1087
01:01:30,300 --> 01:01:30,600
Yes.

1088
01:01:30,600 --> 01:01:32,100
Could it get more than twice as fast?

1089
01:01:32,100 --> 01:01:33,100
Probably not.

1090
01:01:34,200 --> 01:01:34,600
And so,

1091
01:01:34,800 --> 01:01:37,900
I think it may be a good time after having done that count.

1092
01:01:38,000 --> 01:01:39,900
I'm pretty happy with where that is.

1093
01:01:40,600 --> 01:01:47,300
I think it may be time to move out one level and start to look at how

1094
01:01:47,300 --> 01:01:51,800
to optimize the things that are around this pixel Loop.

1095
01:01:51,900 --> 01:01:56,200
Because I think the pixel Loop itself is actually not so bad, so

1096
01:01:56,200 --> 01:01:57,800
that's probably what we'll start doing tomorrow.

1097
01:01:58,300 --> 01:02:04,600
And at the moment we will go do some Q&A so we can

1098
01:02:04,700 --> 01:02:06,300
Answer any questions that people might have.

1099
01:02:09,500 --> 01:02:12,700
Seller 7 asks, is this what you were looking for?

1100
01:02:17,500 --> 01:02:19,800
Oh yeah, this is what I was looking for.

1101
01:02:23,700 --> 01:02:24,700
That's pretty cool.

1102
01:02:26,800 --> 01:02:28,200
So there's loads and storage units.

1103
01:02:28,200 --> 01:02:29,700
We don't care about those right now.

1104
01:02:30,200 --> 01:02:33,600
We've got integer, m, x ALU branch in room associated, with an FP, a

1105
01:02:33,600 --> 01:02:39,700
deaf, be mole, SSE mole, integer m, x, ALU

1106
01:02:41,000 --> 01:02:41,600
oh,

1107
01:02:42,700 --> 01:02:44,200
Wait, but this looks weird donut.

1108
01:02:46,300 --> 01:02:47,900
looking at this diagram,

1109
01:02:51,700 --> 01:02:55,200
I should probably try to bring this this dial diagram up on the main

1110
01:02:55,200 --> 01:02:57,300
screen because because it's a little confusing.

1111
01:02:57,300 --> 01:02:58,400
Honestly Stellar 7

1112
01:03:01,500 --> 01:03:06,200
so, so let's see here, that is

1113
01:03:07,900 --> 01:03:14,300
Wikimedia Nehalem diagram, see if we can get that up on the screen.

1114
01:03:14,300 --> 01:03:14,700
So this guy.

1115
01:03:14,700 --> 01:03:15,700
Oops, not that guy.

1116
01:03:15,700 --> 01:03:16,300
This guy.

1117
01:03:20,300 --> 01:03:24,100
So it's a little confusing looking at this because if you look at

1118
01:03:24,100 --> 01:03:32,300
this, I'm just looking at where the multiplier unit seems to be and

1119
01:03:33,400 --> 01:03:37,800
and like, it looks like it's single ported, doesn't it?

1120
01:03:42,500 --> 01:03:42,900
Yes.

1121
01:03:42,900 --> 01:03:46,000
I mean I mean they said that it could do that.

1122
01:03:46,000 --> 01:03:49,400
It had two units capable of doing a floating Point multiplied but this

1123
01:03:49,400 --> 01:03:51,400
diagram would make it look like there's only one.

1124
01:03:51,800 --> 01:03:52,500
Wouldn't you say?

1125
01:03:52,700 --> 01:03:55,300
Because here's FP mole, it's on Port 80.

1126
01:03:55,800 --> 01:03:57,500
I don't see any other FP.

1127
01:03:57,500 --> 01:04:00,600
Moles there's an FB ad, right?

1128
01:04:02,300 --> 01:04:07,800
But but I don't see another mul so I could be misinterpreting what

1129
01:04:07,800 --> 01:04:10,100
this diagram trying to say, but that's a little odd.

1130
01:04:14,700 --> 01:04:20,300
but that's a little odd if the port if the 0, if you could only issue

1131
01:04:20,300 --> 01:04:22,500
1 x per cycle,

1132
01:04:24,400 --> 01:04:30,300
Then that would mean that we are basically at our, I mean, we're like

1133
01:04:30,300 --> 01:04:33,100
right at the limit of what we could possibly do if we have to do this

1134
01:04:33,100 --> 01:04:34,800
many multiplies, right?

1135
01:04:35,100 --> 01:04:40,600
Because if I turn on count Cycles again, most of what we were doing

1136
01:04:41,100 --> 01:04:42,900
was multiplies, right?

1137
01:04:43,600 --> 01:04:45,700
And so if we take a look in here,

1138
01:04:50,200 --> 01:04:52,100
Let's go ahead and stop in here.

1139
01:04:53,800 --> 01:04:55,400
So, if we take a look in here, right?

1140
01:04:55,400 --> 01:04:57,600
We had to do 73 multiplies.

1141
01:04:58,000 --> 01:05:04,100
So, if you could only do, if you could only issue 1, multiply if you

1142
01:05:04,100 --> 01:05:07,600
could only issue 1 x per cycle, that means that essentially we know

1143
01:05:07,600 --> 01:05:11,400
that, even if everything else was perfectly pipelined with it, we

1144
01:05:11,400 --> 01:05:15,800
would take seventy three Cycles just to do the multiplies, right?

1145
01:05:15,800 --> 01:05:20,400
Because they can only be issued once every clock at a maximum, right?

1146
01:05:21,800 --> 01:05:22,600
So

1147
01:05:25,400 --> 01:05:29,000
Assuming that we did that.

1148
01:05:29,100 --> 01:05:30,900
Let's see what that value comes out to be.

1149
01:05:32,300 --> 01:05:36,700
So that means just the multiplies our would take 18 Cycles by

1150
01:05:36,700 --> 01:05:37,400
themselves.

1151
01:05:39,200 --> 01:05:42,000
So that's that's kind of crazy, right?

1152
01:05:44,000 --> 01:05:46,500
But yeah, 18 cycles per pixel.

1153
01:05:53,000 --> 01:05:54,200
Would it be worth timing?

1154
01:05:54,200 --> 01:05:57,900
Just the load stores with no ALU Ops present to see how much is Just

1155
01:05:57,900 --> 01:05:58,800
memory bound.

1156
01:05:59,200 --> 01:05:59,800
Yes.

1157
01:06:00,400 --> 01:06:01,400
But you're getting a little ahead of us.

1158
01:06:01,400 --> 01:06:02,800
They're grumpy giant.

1159
01:06:04,700 --> 01:06:08,300
We haven't actually aligned our loads and stores yet and we haven't

1160
01:06:08,300 --> 01:06:13,200
actually talked much about the loads and stores at all.

1161
01:06:13,800 --> 01:06:18,800
And so, what I kind of wanted to do was do that in a separate pass.

1162
01:06:19,400 --> 01:06:25,100
So tomorrow when we kind of step out, one level will time it and we'll

1163
01:06:27,100 --> 01:06:30,000
we'll time it without the Ops and we'll see how it goes.

1164
01:06:30,700 --> 01:06:34,300
But if you want to try it right now, we can, we can jump the gun since

1165
01:06:34,300 --> 01:06:35,000
you brought it up.

1166
01:06:36,100 --> 01:06:37,800
I'm totally happy to just type it in.

1167
01:06:38,900 --> 01:06:41,200
So let's see here, you have an O2.

1168
01:06:41,800 --> 01:06:43,200
We turn off the count Cycles.

1169
01:06:54,500 --> 01:06:56,800
So here we are and we're running it.

1170
01:06:56,800 --> 01:06:58,400
Forty eight ish, right?

1171
01:06:58,900 --> 01:07:03,100
If we wanted to turn off all of the fancy operations that were

1172
01:07:03,100 --> 01:07:04,800
actually doing, right?

1173
01:07:06,200 --> 01:07:10,400
And we were just instead did some some loads and stores here.

1174
01:07:12,300 --> 01:07:14,400
Unfortunately, it's a little tricky.

1175
01:07:14,600 --> 01:07:17,700
Because in order to know where we're fetching from, we have to, at

1176
01:07:17,700 --> 01:07:25,100
least do this, many, but we can go ahead and get rid of most of this

1177
01:07:25,100 --> 01:07:26,200
stuff, right?

1178
01:07:26,400 --> 01:07:32,500
So once we have all of our samples, trying to think of, we have to

1179
01:07:32,500 --> 01:07:35,600
have a way of doing this so that the compiler won't optimize these

1180
01:07:35,600 --> 01:07:35,800
guys.

1181
01:07:36,000 --> 01:07:37,100
Out right?

1182
01:07:37,200 --> 01:07:39,900
We have to have it so that they won't optimize out.

1183
01:07:39,900 --> 01:07:47,900
So what I could do is do an if 0 here I suppose and we just go through

1184
01:07:48,200 --> 01:07:56,200
and before we write we just do something like this.

1185
01:07:57,600 --> 01:07:58,200
I guess.

1186
01:08:04,400 --> 01:08:11,200
I mean, 128, I out equals mmm or si128 sample?

1187
01:08:11,200 --> 01:08:13,800
A sample B.

1188
01:08:15,600 --> 01:08:19,899
So basically you know compositing all of the samples together into

1189
01:08:19,899 --> 01:08:24,700
some garbage pattern just to make sure the compiler has to actually

1190
01:08:24,899 --> 01:08:29,899
load them that make sense and then it'll go ahead and do that, right?

1191
01:08:31,800 --> 01:08:35,899
Right, another fantastic wild pattern here.

1192
01:08:37,600 --> 01:08:39,200
So looking at that.

1193
01:08:39,500 --> 01:08:43,399
That's 16 Cycles looks like right.

1194
01:08:45,600 --> 01:08:50,100
And I don't know if I can trim it down anymore to be any closer to

1195
01:08:50,100 --> 01:08:56,200
just memory Ops because we have to know where to fetch from.

1196
01:08:57,600 --> 01:08:59,899
in order to be like, if we don't face

1197
01:09:00,000 --> 01:09:04,800
From the actual locations, then it would change the cache behavior and

1198
01:09:04,800 --> 01:09:08,399
it wouldn't necessarily be the right kind of test at that point.

1199
01:09:08,899 --> 01:09:14,800
So I don't know that I can actually get rid of very much more.

1200
01:09:14,800 --> 01:09:18,899
The compiler will get rid of FX for us, presumably, because it is

1201
01:09:18,899 --> 01:09:25,200
never used, but it looks like that's like the minimum, right?

1202
01:09:26,899 --> 01:09:31,600
So 16 Cycles, just to put that into some perspective there, you know,

1203
01:09:31,600 --> 01:09:32,600
it's got to do.

1204
01:09:32,600 --> 01:09:39,200
One, two, three, four, five, six, seven, eight, nine, ten.

1205
01:09:43,399 --> 01:09:45,899
You know, yeah.

1206
01:09:47,300 --> 01:09:51,500
I mean, I guess I would say, I guess what I would say about that,

1207
01:09:53,200 --> 01:09:58,400
Is it's possible that we're stalling on the memory here a bit because

1208
01:09:58,400 --> 01:10:00,900
16 Cycles is probably a little bit High.

1209
01:10:02,500 --> 01:10:08,400
What we could do is we could try blasting out as another test, right?

1210
01:10:08,500 --> 01:10:14,300
We could try blasting out without reading in these guys, right?

1211
01:10:14,400 --> 01:10:17,600
So, you know, what we could do is say this stuff.

1212
01:10:19,600 --> 01:10:23,100
We're actually going to F0 around the whole thing, right?

1213
01:10:23,500 --> 01:10:27,200
And what we'll do is we'll take sample, ABC and d and will actually

1214
01:10:27,200 --> 01:10:33,400
just derive those from values, we already had, right?

1215
01:10:33,500 --> 01:10:37,200
So, what we'll do is we'll say, you know, we'll make this be an M&M

1216
01:10:37,200 --> 01:10:40,600
cast PS, right?

1217
01:10:41,600 --> 01:10:42,500
Of

1218
01:10:43,200 --> 01:10:46,100
You know, the x value or something like this, right?

1219
01:10:46,100 --> 01:10:49,900
The, the fetch X, right?

1220
01:10:51,100 --> 01:10:51,700
And

1221
01:10:54,400 --> 01:10:54,800
Oops.

1222
01:10:59,200 --> 01:11:02,400
I guess I just need to be a cast that can just be fetch X so we can

1223
01:11:02,400 --> 01:11:03,700
just do something like this.

1224
01:11:04,500 --> 01:11:06,000
In fact, I could just do it this way.

1225
01:11:06,400 --> 01:11:07,900
Out is fat checks.

1226
01:11:11,100 --> 01:11:14,300
Or checks, that's why.

1227
01:11:18,600 --> 01:11:21,900
It's not fetch, its fetch Forex course.

1228
01:11:23,700 --> 01:11:24,500
Xxxx.

1229
01:11:26,100 --> 01:11:26,800
Xxxx.

1230
01:11:31,400 --> 01:11:32,900
and,

1231
01:11:37,800 --> 01:11:43,700
So that'll just write out complete nonsense and so, yeah.

1232
01:11:43,700 --> 01:11:49,700
So you can see that is three cycles per pixel which is quite a bit

1233
01:11:49,700 --> 01:11:50,200
better.

1234
01:11:50,500 --> 01:11:58,200
So a lot of that time there was spent, I guess doing sort of well, we

1235
01:11:58,200 --> 01:11:59,000
don't really know.

1236
01:11:59,000 --> 01:11:59,800
We know that

1237
01:12:00,100 --> 01:12:01,400
Had to compute fat checks.

1238
01:12:04,700 --> 01:12:09,200
So I mean technically like right we don't know how much the time was

1239
01:12:09,200 --> 01:12:12,600
just spent getting the crap out of the SS.

1240
01:12:12,800 --> 01:12:14,500
The mm 128 register.

1241
01:12:14,700 --> 01:12:15,300
Right?

1242
01:12:15,600 --> 01:12:18,500
So we don't really know what was waiting on the textures.

1243
01:12:22,300 --> 01:12:26,000
You know, we don't really know that it was the fetch, it could have

1244
01:12:26,000 --> 01:12:31,200
been other stuff technically, but it does seem like maybe this is a

1245
01:12:31,200 --> 01:12:32,400
fair chunk of the time, right?

1246
01:12:32,400 --> 01:12:34,000
Which is what we would have expected.

1247
01:12:34,100 --> 01:12:34,600
It's fetching.

1248
01:12:34,600 --> 01:12:39,000
Those textiles is is very expensive, right?

1249
01:12:46,600 --> 01:12:48,800
You counted, mmm, and PS wrong.

1250
01:12:49,300 --> 01:12:54,300
I'm surprised I didn't count more than just mnps, but let's go ahead

1251
01:12:54,300 --> 01:12:59,300
and take a look and then and PS.

1252
01:13:00,300 --> 01:13:04,300
So it looks like it's getting counted properly there, right?

1253
01:13:04,400 --> 01:13:05,000
Pound to find.

1254
01:13:05,000 --> 01:13:08,200
Mnps counts, right?

1255
01:13:08,200 --> 01:13:10,800
That that looks correct to me.

1256
01:13:11,500 --> 01:13:13,200
So let's take a look at the bottom one.

1257
01:13:15,700 --> 01:13:16,300
There we go.

1258
01:13:20,500 --> 01:13:21,000
Okay.

1259
01:13:22,500 --> 01:13:23,600
Thank you for catching that.

1260
01:13:36,800 --> 01:13:38,100
Are you doing premultiplied Alpha?

1261
01:13:38,100 --> 01:13:38,700
Yes.

1262
01:13:40,000 --> 01:13:40,800
Out of Interest.

1263
01:13:40,800 --> 01:13:42,900
Could you run the game with task manager?

1264
01:13:42,900 --> 01:13:47,800
Open I'm interested to see what the ram CPU are doing well.

1265
01:13:47,800 --> 01:13:50,800
The ram isn't doing anything because we just allocated all the memory

1266
01:13:50,800 --> 01:13:53,300
in the machine when we started up and then never actually touch it

1267
01:13:53,400 --> 01:13:55,400
after that, right?

1268
01:13:58,200 --> 01:14:00,600
And the CPU won't do anything either.

1269
01:14:00,600 --> 01:14:03,100
The CPU will be like, hardly anything.

1270
01:14:04,000 --> 01:14:04,800
What is take?

1271
01:14:04,800 --> 01:14:05,300
What?

1272
01:14:07,300 --> 01:14:09,700
Who is 0, right?

1273
01:14:09,700 --> 01:14:10,300
OBS.

1274
01:14:10,700 --> 01:14:12,100
I'm like, what's taking all the time?

1275
01:14:12,300 --> 01:14:12,600
Right?

1276
01:14:12,600 --> 01:14:16,700
The thing, that streaming, of course, makes perfect sense.

1277
01:14:17,800 --> 01:14:18,600
So yeah.

1278
01:14:18,800 --> 01:14:19,600
Task manager.

1279
01:14:19,600 --> 01:14:22,500
We're hardly using any of the CPU, right now, right?

1280
01:14:23,600 --> 01:14:24,700
I don't think anyway.

1281
01:14:31,200 --> 01:14:31,900
So, there you go.

1282
01:14:34,300 --> 01:14:35,300
This, what you want to see?

1283
01:14:41,400 --> 01:14:43,200
and like I said, you know, we're not,

1284
01:14:45,100 --> 01:14:48,900
We're on a miss this machine old.

1285
01:14:48,900 --> 01:14:53,800
As it may be, is a beast in terms of core count so you can see how

1286
01:14:53,800 --> 01:14:54,800
many cores we've got here.

1287
01:14:54,800 --> 01:14:58,500
We're only using one and these are not actual chords.

1288
01:14:58,500 --> 01:14:59,300
Their logical course.

1289
01:14:59,300 --> 01:14:59,900
So it's

1290
01:15:00,000 --> 01:15:06,600
Probably I don't know this machine probably has say 1 2 3 4 5 6 7 8 9

1291
01:15:06,600 --> 01:15:08,900
10 11 12 13 14 15 16.

1292
01:15:09,200 --> 01:15:13,300
So this is probably a dual proc Each of which has 4 cores would be my

1293
01:15:13,300 --> 01:15:13,700
guess.

1294
01:15:15,900 --> 01:15:18,800
And and then each one of those course, has to hyper threads.

1295
01:15:19,900 --> 01:15:20,800
That's my assumption.

1296
01:15:21,800 --> 01:15:26,800
So eventually and hopefully not too long from now.

1297
01:15:26,800 --> 01:15:30,700
We will actually use all of these cores and will get quite a bit of

1298
01:15:30,700 --> 01:15:34,100
speed up but right now we're not we're not even close to maxing out

1299
01:15:34,100 --> 01:15:39,600
the performance of the CPU right now, not even close.

1300
01:15:39,800 --> 01:15:44,300
All we did was look at one core throughput on

1301
01:15:45,400 --> 01:15:46,600
On our pixel fill routine.

1302
01:15:46,900 --> 01:15:47,200
Right?

1303
01:15:47,200 --> 01:15:47,700
That's all.

1304
01:15:47,700 --> 01:15:48,400
We've done so far.

1305
01:15:48,400 --> 01:15:52,000
In terms of optimization, we're not even close to using all the power

1306
01:15:52,000 --> 01:15:52,600
of the CPU.

1307
01:16:18,000 --> 01:16:20,900
Will this game only work for your specific processor?

1308
01:16:21,500 --> 01:16:26,300
Know this game will work on any sse2 capable processor which is

1309
01:16:26,300 --> 01:16:32,100
basically any PC processor on a Mac or or on a on a Windows machine.

1310
01:16:44,300 --> 01:16:46,000
Are you going to update these textures?

1311
01:16:46,100 --> 01:16:48,200
E-x the yellow background.

1312
01:16:49,000 --> 01:16:52,000
Well the yellow background is actually there because we turned off

1313
01:16:52,000 --> 01:16:59,400
ground chunk updating right because we haven't gone in and redone it

1314
01:16:59,500 --> 01:17:03,300
with the new rendering system and we had a bunch of stuff we need to

1315
01:17:03,300 --> 01:17:05,600
do with that anyway, right.

1316
01:17:05,800 --> 01:17:07,100
So if we turned it on,

1317
01:17:08,400 --> 01:17:14,000
We could see the ground tiles right there in there, but we aren't

1318
01:17:14,000 --> 01:17:17,100
working on that right now, so that's why they're they're not there,

1319
01:17:17,400 --> 01:17:17,800
right?

1320
01:17:33,300 --> 01:17:33,800
The texture.

1321
01:17:33,800 --> 01:17:36,200
Fetch should be L1 cache, fetch.

1322
01:17:37,100 --> 01:17:40,800
Well, we don't know that right, you know, we would hope that that's

1323
01:17:40,800 --> 01:17:45,100
true in certain circumstances but we don't really know if that's

1324
01:17:45,100 --> 01:17:48,000
always true because it could be that the processor can't see it in

1325
01:17:48,000 --> 01:17:49,700
time or other sorts of things like this.

1326
01:17:49,700 --> 01:17:50,800
So we don't really know.

1327
01:17:51,800 --> 01:17:54,500
And so I feel like it's too early to say something like that.

1328
01:18:10,900 --> 01:18:17,000
In an alternate universe where Everyone likes games, but no one cares

1329
01:18:17,000 --> 01:18:18,000
for art.

1330
01:18:18,400 --> 01:18:22,100
So game developers don't need or use our assets.

1331
01:18:22,500 --> 01:18:27,300
Do you think those developers would spend as much time carefully

1332
01:18:27,300 --> 01:18:28,800
optimizing things?

1333
01:18:35,200 --> 01:18:38,700
I don't know what that means.

1334
01:18:41,000 --> 01:18:42,300
Probably, yes.

1335
01:18:42,300 --> 01:18:45,400
Because the reason you optimized stuff is usually, so you can do more

1336
01:18:45,400 --> 01:18:48,400
things not so that you can use art assets.

1337
01:18:48,600 --> 01:18:52,100
Like, you got if you want to have 100,000 guys, in a battle, it don't

1338
01:18:52,100 --> 01:18:56,700
matter if they're all red rectangles, or, you know, bitmaps of the

1339
01:18:56,700 --> 01:18:58,000
guy, right?

1340
01:18:59,500 --> 01:19:02,000
Or, you know, in 3D, it doesn't matter if they're little artist

1341
01:19:02,000 --> 01:19:09,800
mannequins or, you know, or you know, fully modelled dudes.

1342
01:19:09,800 --> 01:19:10,100
Now,

1343
01:19:10,300 --> 01:19:13,600
Maybe you could argue that, if you're doing art, that's going to look

1344
01:19:13,600 --> 01:19:15,500
bad, anyway, then it can be lower.

1345
01:19:15,500 --> 01:19:18,500
Polygon count, less textures, all that sort of stuff, which does help

1346
01:19:18,500 --> 01:19:18,700
you.

1347
01:19:18,700 --> 01:19:19,700
And yeah, that's true.

1348
01:19:21,300 --> 01:19:23,400
But you'd still have other things to optimize, right?

1349
01:19:23,400 --> 01:19:27,700
It's not just being able to Art assets, aren't the only thing that

1350
01:19:28,200 --> 01:19:30,100
that require you to do optimization.

1351
01:19:36,100 --> 01:19:37,100
Any ideas, why?

1352
01:19:37,100 --> 01:19:41,200
One of my core is get maxed out running handmade hero with the xeb

1353
01:19:41,200 --> 01:19:42,100
platform layer.

1354
01:19:42,300 --> 01:19:43,400
Yeah that's what should happen.

1355
01:19:43,400 --> 01:19:44,100
Basically.

1356
01:19:45,700 --> 01:19:49,000
One Core is getting maxed out when you run handmade hero,

1357
01:19:51,200 --> 01:19:54,200
Because we are running basically full speed right now.

1358
01:19:54,600 --> 01:19:56,300
Well, that's probably not entirely true.

1359
01:19:56,900 --> 01:20:00,700
Now we're probably running faster than 30 frames a second, but that's

1360
01:20:00,700 --> 01:20:01,400
separate issue.

1361
01:20:02,000 --> 01:20:08,500
But one core should at least be pretty heavy usage, but Windows is

1362
01:20:08,500 --> 01:20:10,400
free to move that around.

1363
01:20:10,700 --> 01:20:13,900
So it's not necessarily the case that it will show up on exactly when

1364
01:20:13,900 --> 01:20:14,700
processor graph.

1365
01:20:15,200 --> 01:20:17,700
So what you'll typically, see when you run handmade Heroes, you should

1366
01:20:17,700 --> 01:20:19,700
see basically a

1367
01:20:20,100 --> 01:20:24,600
Little percentage usage of the total CPU power which is 1 over the

1368
01:20:24,600 --> 01:20:26,000
number of course in your machine.

1369
01:20:26,100 --> 01:20:29,200
Right 1 over the number of hyper cours saleya.

1370
01:20:34,800 --> 01:20:37,400
How did taking out the gamma correction three square roots with a

1371
01:20:37,400 --> 01:20:39,500
throughput of 16 cycles and 3 multiplies.

1372
01:20:39,500 --> 01:20:41,700
Only speed the loop up by six Cycles?

1373
01:20:42,500 --> 01:20:48,100
Well the answer is that these things are overlapped, right?

1374
01:20:52,000 --> 01:20:57,000
Once the processor kicks off a square root, it's free to do other

1375
01:20:57,000 --> 01:20:58,400
stuff, right?

1376
01:20:58,400 --> 01:20:59,800
It's not sitting around.

1377
01:21:00,100 --> 01:21:02,200
Waiting for that square root to come back.

1378
01:21:03,200 --> 01:21:07,400
So the fact that we're getting rid of these things that are worth 16

1379
01:21:07,400 --> 01:21:14,000
Cycles well it's 16 Cycles end to end but it the you know, inside that

1380
01:21:14,000 --> 01:21:19,200
16 Cycles, the processor can grab all sorts of other work to do right

1381
01:21:19,900 --> 01:21:23,300
and especially with these sort of out-of-work, whores processors, even

1382
01:21:23,300 --> 01:21:27,200
if the compiler did a lousy job of putting of scheduling the

1383
01:21:27,200 --> 01:21:29,600
instructions, the processor is still

1384
01:21:30,000 --> 01:21:33,000
Bring all sorts of future work to do while we're sitting around,

1385
01:21:33,000 --> 01:21:34,500
waiting for those square, roots to finish.

1386
01:21:35,200 --> 01:21:37,000
So that is the key.

1387
01:21:37,100 --> 01:21:39,700
You know, that's the thing we talked about way back, when I talk about

1388
01:21:39,700 --> 01:21:42,300
pipeline processors, if you don't remember that, go back to the

1389
01:21:42,300 --> 01:21:44,300
original episode a week ago.

1390
01:21:44,300 --> 01:21:48,300
I think it was last Monday, or whenever it was last Monday or Tuesday.

1391
01:21:49,900 --> 01:21:52,000
Where I talked about how pipelining Works.

1392
01:21:52,500 --> 01:21:58,200
Basically processors have, you know, every cycle, they've got a lot of

1393
01:21:58,200 --> 01:21:59,300
things in flight.

1394
01:22:00,100 --> 01:22:01,300
The issue new instructions.

1395
01:22:01,300 --> 01:22:04,000
They pick up old instructions that got completed and there's this

1396
01:22:04,000 --> 01:22:05,700
pipeline of stuff, that's moving through.

1397
01:22:06,000 --> 01:22:09,100
So, getting rid of something that takes 16 Cycles, these things are

1398
01:22:09,100 --> 01:22:11,500
not put into end, so it's not like you saved.

1399
01:22:11,500 --> 01:22:12,400
16 Cycles.

1400
01:22:12,600 --> 01:22:18,400
All you did is get rid of 116 cycle thing that had to get overlapped

1401
01:22:18,400 --> 01:22:19,300
in there somewhere.

1402
01:22:20,700 --> 01:22:24,700
And so, usually what you end up talking about is more about when units

1403
01:22:24,700 --> 01:22:29,500
are free to execute stuff and how many total units you had and how

1404
01:22:29,500 --> 01:22:31,000
busy they all were right.

1405
01:22:31,100 --> 01:22:33,300
And so that's why I was trying to get a little bit more information

1406
01:22:33,300 --> 01:22:36,000
about that, but we don't quite have what we need to really compute it

1407
01:22:36,000 --> 01:22:36,500
all out.

1408
01:22:36,500 --> 01:22:36,900
But

1409
01:22:43,000 --> 01:22:45,600
If you were to use more cores for drawing, how would you split up the

1410
01:22:45,600 --> 01:22:46,100
work?

1411
01:22:46,500 --> 01:22:47,800
Well, we're actually going to do this.

1412
01:22:48,100 --> 01:22:49,600
That's what we're going to do next.

1413
01:22:49,800 --> 01:22:52,100
So stay tuned.

1414
01:22:52,800 --> 01:22:56,100
Next week will probably be all about splitting up the course for

1415
01:22:56,100 --> 01:22:56,600
drawing.

1416
01:22:57,800 --> 01:22:59,200
What's the floating head?

1417
01:22:59,700 --> 01:23:00,800
It's our little familiar.

1418
01:23:14,700 --> 01:23:20,100
I didn't see the definition of m m square but if it's a macro you're

1419
01:23:20,100 --> 01:23:22,100
calling it with an intrinsic.

1420
01:23:22,800 --> 01:23:27,800
So either a compiler isn't eliminating common sub expression and

1421
01:23:27,800 --> 01:23:30,100
you're losing perf or B.

1422
01:23:30,100 --> 01:23:34,200
It is doing common sub-expression elimination in your miscounting.

1423
01:23:35,900 --> 01:23:39,700
Instructions, nothing's, I believe neither of those.

1424
01:23:39,700 --> 01:23:41,000
Two things is true.

1425
01:23:41,700 --> 01:23:45,200
It is doing common sub expression elimination because we check that

1426
01:23:45,900 --> 01:23:49,500
the other day because someone asked about that and it did actually

1427
01:23:49,500 --> 01:23:50,400
correctly, do it?

1428
01:23:52,300 --> 01:23:56,100
But I'm pretty sure that we don't because you can see when we did the

1429
01:23:56,100 --> 01:23:56,900
count.

1430
01:23:57,100 --> 01:23:59,700
We just did we just count it as one multiply

1431
01:24:02,000 --> 01:24:02,600
Right.

1432
01:24:04,300 --> 01:24:08,600
So, I'm pretty sure the answer is actually C.

1433
01:24:08,600 --> 01:24:09,500
None of the above

1434
01:24:10,700 --> 01:24:12,700
But I don't know if that answered the question.

1435
01:24:14,600 --> 01:24:16,500
What's that drum, like background noise?

1436
01:24:16,500 --> 01:24:17,000
Yeah.

1437
01:24:17,200 --> 01:24:20,800
The drum, like, background noise is amazon.com.

1438
01:24:21,700 --> 01:24:24,400
They've been building buildings next to our apartment for a very,

1439
01:24:24,400 --> 01:24:26,300
very, very, very, very long time.

1440
01:24:38,600 --> 01:24:41,000
Do you see all the questions and select from them or should I write

1441
01:24:41,000 --> 01:24:42,100
again if you miss my question?

1442
01:24:42,100 --> 01:24:45,000
Yes I do read all the questions and select for them but I only answer

1443
01:24:45,000 --> 01:24:47,800
questions that are on the topic that we're working on.

1444
01:24:47,800 --> 01:24:52,100
Generally, I answer off-topic questions before the stream starts.

1445
01:24:52,500 --> 01:24:55,600
So if you have a question that's not about programming this thing that

1446
01:24:55,600 --> 01:24:59,500
we're programming right now that then it's usually you have to come

1447
01:24:59,500 --> 01:25:01,400
during the pre stream if you want me to answer it.

1448
01:25:08,700 --> 01:25:11,800
In case your processor supports concentrate, TSC could the

1449
01:25:11,800 --> 01:25:15,300
significantly just sitting really distort the reported cycle count in

1450
01:25:15,300 --> 01:25:17,900
a way that matters or such possible in accuracy in significant for

1451
01:25:17,900 --> 01:25:18,900
what we were doing here.

1452
01:25:19,800 --> 01:25:20,700
No, it can't.

1453
01:25:20,700 --> 01:25:24,400
So the answer there is it did very much depends on the operating

1454
01:25:24,400 --> 01:25:27,900
system and the processor whether or not things like this are

1455
01:25:27,900 --> 01:25:28,900
important, right?

1456
01:25:29,000 --> 01:25:32,800
This particular machine, I believe, is not in a state that that will

1457
01:25:32,800 --> 01:25:37,700
ever be a problem, but it's entirely possible to have

1458
01:25:38,100 --> 01:25:41,100
Remember this happening to me in the past it's entirely possible to

1459
01:25:41,100 --> 01:25:46,200
have a processor especially if it's on a laptop that likes to very

1460
01:25:46,200 --> 01:25:49,900
it's it's a cycle rate right in the middle of when you're trying to

1461
01:25:49,900 --> 01:25:51,900
time things and it creates a lot of problems.

1462
01:25:52,400 --> 01:25:55,800
So I have seen stuff like that happened before, it can happen.

1463
01:25:56,800 --> 01:25:59,900
What you want to try and do as much as possible is put your machine

1464
01:25:59,900 --> 01:26:00,300
into.

1465
01:26:00,300 --> 01:26:04,400
It's like, no power saving State, and all this sort of stuff.

1466
01:26:04,400 --> 01:26:07,600
But fortunately, I Believe on

1467
01:26:08,000 --> 01:26:09,300
Most modern processors.

1468
01:26:09,300 --> 01:26:13,500
Now, if your if your machine is relatively new, they don't have that

1469
01:26:13,500 --> 01:26:14,400
problem anymore.

1470
01:26:14,900 --> 01:26:18,400
I think they actually try to report back stable are dtsc's to you.

1471
01:26:18,800 --> 01:26:20,000
I could be wrong about that though.

1472
01:26:24,300 --> 01:26:26,100
How does the CPU do things ahead of time?

1473
01:26:26,100 --> 01:26:28,000
If the code is supposed to be executed in order?

1474
01:26:28,200 --> 01:26:31,900
Well, it just looks to see whether there's something further along in

1475
01:26:31,900 --> 01:26:32,500
the instruction stream.

1476
01:26:32,500 --> 01:26:33,800
That doesn't depend on anything.

1477
01:26:33,800 --> 01:26:38,900
That's still being done because technically when you write code it

1478
01:26:38,900 --> 01:26:40,400
doesn't have to be done in order.

1479
01:26:40,500 --> 01:26:44,200
It just has to be done in order for any things that depend on each

1480
01:26:44,200 --> 01:26:44,500
other.

1481
01:26:45,200 --> 01:26:48,100
So as an example, as a really simple example, right?

1482
01:26:48,400 --> 01:26:49,700
Take a look at all these guys.

1483
01:26:50,500 --> 01:26:54,000
None of these textile values depend on any of the other textile

1484
01:26:54,000 --> 01:26:55,200
values, right?

1485
01:26:55,400 --> 01:26:57,400
So if it issued this textile value,

1486
01:26:58,600 --> 01:26:59,800
And did these instructions.

1487
01:27:00,000 --> 01:27:02,100
It was, it was it was issuing these instructions.

1488
01:27:02,800 --> 01:27:06,000
It could easily go grab some of these other instructions and execute

1489
01:27:06,000 --> 01:27:07,900
them without having to wait for to come back.

1490
01:27:07,900 --> 01:27:10,800
So, for example, it's got a square that's going to be a mullet Sam.

1491
01:27:10,800 --> 01:27:11,500
All followed by am.

1492
01:27:11,500 --> 01:27:15,800
All right, so it can't issue the second multiplied until the first,

1493
01:27:15,800 --> 01:27:18,000
multiply is done because that uses the results from it.

1494
01:27:18,000 --> 01:27:18,500
Right.

1495
01:27:19,000 --> 01:27:22,300
But if it wanted to, it could just go grab another multiply, that was

1496
01:27:22,300 --> 01:27:25,500
totally unrelated like this one or this one, right?

1497
01:27:25,500 --> 01:27:27,700
These are multiplies that don't have anything to do with each other.

1498
01:27:28,100 --> 01:27:29,800
So that's how the processor picks.

1499
01:27:30,000 --> 01:27:31,900
Them out, it just goes and grab stuff from further down.

1500
01:27:31,900 --> 01:27:33,700
That's like these things don't depend on each other.

1501
01:27:34,700 --> 01:27:38,000
So the things that control, how many things you can issue are those

1502
01:27:38,000 --> 01:27:38,700
two things?

1503
01:27:38,700 --> 01:27:40,600
Well, they're really three things right there.

1504
01:27:41,800 --> 01:27:42,400
How many psych?

1505
01:27:42,400 --> 01:27:44,200
How many instructions per cycle?

1506
01:27:44,200 --> 01:27:46,400
Can the processor just decode at all?

1507
01:27:46,900 --> 01:27:49,300
Which again, I think actually for, is like for, but I'm not sure.

1508
01:27:50,600 --> 01:27:51,700
It might vary per processor.

1509
01:27:52,300 --> 01:27:54,700
So, it's how many kids to code then?

1510
01:27:54,700 --> 01:28:02,500
There's how many of them that it decoded like those go into like a

1511
01:28:02,500 --> 01:28:03,700
window, right?

1512
01:28:03,800 --> 01:28:05,700
And you're going to actually be executing from there.

1513
01:28:06,400 --> 01:28:10,900
So in that window how many things are independent right?

1514
01:28:10,900 --> 01:28:11,200
How many

1515
01:28:11,400 --> 01:28:12,600
Could it actually pick from?

1516
01:28:13,400 --> 01:28:17,100
And of those is can pick from how many units are available to do them,

1517
01:28:17,800 --> 01:28:18,300
right?

1518
01:28:18,700 --> 01:28:22,000
So there's a ton of things in that in that state, right?

1519
01:28:22,100 --> 01:28:25,900
There's a ton of things that depend that determine.

1520
01:28:26,300 --> 01:28:29,500
How many of the total number of instructions?

1521
01:28:29,500 --> 01:28:33,200
That a processor could actually push through the pipeline, you know,

1522
01:28:33,200 --> 01:28:34,600
will it actually push the pipeline?

1523
01:28:35,400 --> 01:28:38,200
And those are exactly the kind of things that, again, if you study

1524
01:28:38,200 --> 01:28:41,200
this stuff, if you're, if you're a serious Optimizer, I am not like,

1525
01:28:41,300 --> 01:28:44,100
I'm not an optimization guy, but if you're an optimization guy, that's

1526
01:28:44,100 --> 01:28:44,600
the kind of thing.

1527
01:28:44,600 --> 01:28:46,000
You tend to know for the processors.

1528
01:28:46,000 --> 01:28:48,200
You work on, especially if you work on like a console or you're

1529
01:28:48,200 --> 01:28:50,800
targeting a specific a very specific processor, right?

1530
01:28:50,800 --> 01:28:55,400
You're going to know that and that's the kind of thing that like for

1531
01:28:55,400 --> 01:28:58,800
example in tell people can help you with if you're working on a game

1532
01:28:59,600 --> 01:29:02,400
you know and they have devrel guys you can be like can you run this on

1533
01:29:02,400 --> 01:29:06,400
the Sim or something and tell me why it's not getting done it right.

1534
01:29:06,500 --> 01:29:10,100
And so you know there's I'm just showing very basic optimization

1535
01:29:10,100 --> 01:29:11,200
techniques on the stream here.

1536
01:29:11,300 --> 01:29:14,800
Because I'm not a hardcore optimization guy, and I can't tell you how

1537
01:29:14,800 --> 01:29:15,400
to do.

1538
01:29:15,400 --> 01:29:18,200
You know, super crazy optimization, not on this processor.

1539
01:29:18,200 --> 01:29:23,000
Anyway, I could probably do that on the 360 because I knew that thing

1540
01:29:23,000 --> 01:29:29,100
really well, but I couldn't tell you how to do that here and so, you

1541
01:29:29,100 --> 01:29:31,600
know, like just giving you the basics.

1542
01:29:34,700 --> 01:29:40,100
Do you expect a 16 x speed up from multi-threading probably not a 16 x

1543
01:29:40,100 --> 01:29:40,400
speed up?

1544
01:29:40,400 --> 01:29:43,800
No, we haven't actually done the calculations to know roughly what the

1545
01:29:43,800 --> 01:29:44,400
speed up would be.

1546
01:29:44,400 --> 01:29:48,900
So I'm not sure, but but it's pretty rare that you get a perfect and

1547
01:29:48,900 --> 01:29:49,700
way speed up.

1548
01:29:59,500 --> 01:29:59,900
How do you?

1549
01:30:00,000 --> 01:30:02,000
Select the instruction set for optimizing.

1550
01:30:02,700 --> 01:30:05,300
So we show this on a previous stream.

1551
01:30:06,000 --> 01:30:09,600
Basically, you know the answer is, it's not an exact science.

1552
01:30:12,100 --> 01:30:17,500
And I just use, I just use the steam Hardware survey, it's not perfect

1553
01:30:17,600 --> 01:30:22,500
by any means but it's, you know, it's what we've got and they're nice

1554
01:30:22,500 --> 01:30:26,000
enough to make it available and it's better than not having anything.

1555
01:30:26,400 --> 01:30:27,200
So, there you go.

1556
01:30:28,300 --> 01:30:30,600
So, you know, if you take a look on here, right?

1557
01:30:30,600 --> 01:30:35,200
You can kind of drop down this other settings thing and you can see

1558
01:30:36,200 --> 01:30:38,000
you know, by looking at this here.

1559
01:30:38,800 --> 01:30:42,300
Assuming that the stats were gathered correctly, sometimes they break.

1560
01:30:42,300 --> 01:30:46,900
There's, you know, caveat caveat caveat but you can look at this and

1561
01:30:46,900 --> 01:30:47,300
kind of go.

1562
01:30:47,300 --> 01:30:51,200
All right, you know am I gonna Target sse4a?

1563
01:30:51,200 --> 01:30:55,500
Well only if my game is targeted at the highest of high-end Gamers,

1564
01:30:55,500 --> 01:30:55,800
right?

1565
01:30:55,800 --> 01:31:01,700
Because a full 3/4 of the people almost four-fifths of the people on

1566
01:31:01,700 --> 01:31:05,200
Steam, you know, don't have it, right?

1567
01:31:05,600 --> 01:31:08,400
So I'm just limiting my potential Market there.

1568
01:31:09,500 --> 01:31:11,800
Bye-bye a fair bit, right?

1569
01:31:12,000 --> 01:31:15,200
Similarly like, you know am I gonna Target sse2?

1570
01:31:15,200 --> 01:31:15,700
Well.

1571
01:31:15,700 --> 01:31:17,900
Okay, nobody on Steam this month.

1572
01:31:17,900 --> 01:31:23,100
Apparently who played actually didn't have sse2?

1573
01:31:23,100 --> 01:31:24,300
So that's what we're using.

1574
01:31:24,300 --> 01:31:27,600
It's like it seems like kind of a no-brainer like you're probably if

1575
01:31:27,600 --> 01:31:30,700
it's a person who's going to ever buy this game, they're going to have

1576
01:31:30,700 --> 01:31:35,300
sse2 because you know pretty much any gamer who's even ever going to

1577
01:31:35,300 --> 01:31:37,900
hear about handmade hero will?

1578
01:31:38,700 --> 01:31:40,300
Played a game on Steam at some point.

1579
01:31:40,300 --> 01:31:40,800
Probably.

1580
01:31:40,800 --> 01:31:41,400
Right.

1581
01:31:41,800 --> 01:31:47,800
And so, so, you know, you're pretty but it's a fun sse2, sse3 looks

1582
01:31:47,800 --> 01:31:48,800
pretty good, right?

1583
01:31:48,800 --> 01:31:51,000
I mean that that's a very fractional amount.

1584
01:31:51,100 --> 01:31:56,300
So if you wanted to Target sse3 it looks like you're totally could and

1585
01:31:56,300 --> 01:32:00,600
even sse4 might be something you could think about 4.1 and 4.2 are

1586
01:32:00,600 --> 01:32:02,000
pretty well covered.

1587
01:32:02,000 --> 01:32:06,900
It's really just that a, that's new enough that it's not on there so

1588
01:32:06,900 --> 01:32:08,000
that's one way to do it.

1589
01:32:08,000 --> 01:32:08,500
I'm going

1590
01:32:08,600 --> 01:32:10,800
For the 99% case basically, right?

1591
01:32:10,800 --> 01:32:13,800
I'm saying sse2 if we wanted to use sse3, I'd be fine with that.

1592
01:32:14,100 --> 01:32:17,400
I rather not cut out a fifth of the market.

1593
01:32:17,400 --> 01:32:21,100
But you know, I mean, if there was something that we really wanted to

1594
01:32:21,100 --> 01:32:22,900
use in SC for maybe we'd use it.

1595
01:32:22,900 --> 01:32:24,800
I don't know, but that was fine.

1596
01:32:25,000 --> 01:32:27,200
And again, the suffer renderer is something that we're kind of just

1597
01:32:27,200 --> 01:32:28,800
doing as an optimization case.

1598
01:32:28,800 --> 01:32:32,000
So, you know, in the software renderer if we wanted to use something

1599
01:32:32,000 --> 01:32:33,700
in sse4a, that'd be fine.

1600
01:32:33,900 --> 01:32:34,900
It's really more.

1601
01:32:35,300 --> 01:32:38,600
When we're doing any Cindy in the main line of the game, that will be

1602
01:32:38,700 --> 01:32:40,000
running on all the end-users machines.

1603
01:32:40,000 --> 01:32:44,400
We don't really want that to be using something that the end-user

1604
01:32:44,400 --> 01:32:45,400
probably doesn't have.

1605
01:32:56,200 --> 01:32:58,100
Is it the unity survey results?

1606
01:32:58,100 --> 01:32:59,800
Pretty different from Steam Hardware, its harbor.

1607
01:33:00,000 --> 01:33:00,700
Results.

1608
01:33:01,200 --> 01:33:03,800
I don't actually know anything about the unity Hardware server.

1609
01:33:03,800 --> 01:33:04,400
Survey.

1610
01:33:05,400 --> 01:33:09,800
I've never looked at it before but I guess we can take a look at it

1611
01:33:09,800 --> 01:33:16,800
now so it's that Standalone stats probably CPU.

1612
01:33:17,600 --> 01:33:19,100
It doesn't say.

1613
01:33:19,100 --> 01:33:20,300
Let's see if it's in here.

1614
01:33:22,600 --> 01:33:24,400
CPU models.

1615
01:33:24,400 --> 01:33:30,300
Well I mean I guess we could try to back figure it out but they don't

1616
01:33:30,300 --> 01:33:35,500
seem to actually tell us unfortunately unless it's somewhere else.

1617
01:33:39,200 --> 01:33:43,000
Doesn't look like they say about the SSE capabilities.

1618
01:33:43,700 --> 01:33:44,200
I don't know.

1619
01:33:44,900 --> 01:33:47,200
Yeah, if they have that, then sure.

1620
01:33:47,200 --> 01:33:51,600
Let it be cool to check it out but I don't know.

1621
01:33:52,300 --> 01:33:53,400
You have to send me a link.

1622
01:34:02,200 --> 01:34:04,600
What are the gains you get from reading your own software renderer as

1623
01:34:04,600 --> 01:34:06,300
opposed to using something like sdl?

1624
01:34:06,300 --> 01:34:07,500
But does Hardware software rendering?

1625
01:34:08,200 --> 01:34:11,400
Okay, justjust to be clear, I'm assuming that's coming from somebody

1626
01:34:11,400 --> 01:34:16,800
who doesn't watch the stream much, you do not want to write your own

1627
01:34:16,800 --> 01:34:17,100
software.

1628
01:34:17,100 --> 01:34:20,500
Renderer we are not writing the software renderer because we want to

1629
01:34:20,500 --> 01:34:21,300
do something.

1630
01:34:21,700 --> 01:34:24,900
We're writing the software renderer because we wanted to show the

1631
01:34:24,900 --> 01:34:28,200
entire code that gets executed to run a game.

1632
01:34:28,700 --> 01:34:31,800
So, what we've actually done is we wrote

1633
01:34:32,000 --> 01:34:36,200
Essentially what the GPU does but we wrote it on the CPU so that we

1634
01:34:36,200 --> 01:34:39,300
could so I could show like how it works, right?

1635
01:34:39,500 --> 01:34:42,200
And so that's why we're doing the software rendering it so that we

1636
01:34:42,200 --> 01:34:46,100
can, we could have the whole code everything right?

1637
01:34:46,100 --> 01:34:47,300
And see how it worked.

1638
01:34:47,300 --> 01:34:50,700
We will actually be calling the hardware.

1639
01:34:51,000 --> 01:34:54,700
We won't be using sdl because we don't need it for anything, but we

1640
01:34:54,700 --> 01:34:57,000
will be calling opengl or something.

1641
01:34:57,100 --> 01:34:57,900
Possibly Vulcan.

1642
01:34:57,900 --> 01:35:01,600
If it's out in time, we will be calling the hardware to do the

1643
01:35:01,800 --> 01:35:03,700
final rendering for the game.

1644
01:35:24,900 --> 01:35:28,000
Can a processor work through different calculations add, multiply a

1645
01:35:28,000 --> 01:35:29,200
square root in each cycle.

1646
01:35:29,200 --> 01:35:31,600
Or are they do, they each need their own cycle.

1647
01:35:32,000 --> 01:35:36,100
So, basically, that's something again, go back and watch the things

1648
01:35:36,100 --> 01:35:36,700
from last Monday.

1649
01:35:36,700 --> 01:35:41,700
And Tuesday, I explained that basically the answer is a CPU, is kind

1650
01:35:41,700 --> 01:35:44,200
of made up of multiple pieces, right?

1651
01:35:45,500 --> 01:35:46,500
There's multiple units.

1652
01:35:46,500 --> 01:35:49,600
And those units can do various things like, multiplying adding,

1653
01:35:49,600 --> 01:35:50,200
whatever.

1654
01:35:50,600 --> 01:35:54,600
And so, it depends on the architecture of the CPU, some CPUs can do,

1655
01:35:54,700 --> 01:35:55,700
Do multiple things?

1656
01:35:55,700 --> 01:35:59,100
Some can't some can do things out of order, some can't, and so on.

1657
01:35:59,400 --> 01:35:59,800
And so,

1658
01:36:00,100 --> 01:36:01,600
The answer to question is like, on the processor.

1659
01:36:01,600 --> 01:36:02,200
We're working on?

1660
01:36:02,200 --> 01:36:05,600
Yes, the processor could do something like issue and add.

1661
01:36:06,900 --> 01:36:13,100
And I multiply that are separate on the same clock cycle and then get

1662
01:36:13,100 --> 01:36:16,200
them back later on the same clock cycle, for example, or things like

1663
01:36:16,200 --> 01:36:16,800
this, right?

1664
01:36:16,800 --> 01:36:21,100
It can have multiple overlapping things going because the it can have

1665
01:36:21,100 --> 01:36:25,200
multiple units and adding Unit A multiplying unit and so on it can

1666
01:36:25,200 --> 01:36:27,500
have these multiple units there to do these things.

1667
01:36:28,500 --> 01:36:32,000
As long as the unit of the processor is free that it needs to do the

1668
01:36:32,000 --> 01:36:32,500
operation.

1669
01:36:32,500 --> 01:36:33,500
It can issue it.

1670
01:36:33,600 --> 01:36:36,500
It doesn't matter if some other unit is still working.

1671
01:36:36,700 --> 01:36:37,200
Something.

1672
01:36:37,400 --> 01:36:38,800
And that's the square root example.

1673
01:36:38,800 --> 01:36:41,500
Write the square root takes 16 Cycles or whatever it is.

1674
01:36:43,000 --> 01:36:47,300
You know, while those 16 Cycles are happening, other things that can

1675
01:36:47,300 --> 01:36:52,100
use other parts of the CPU can still occur, it doesn't, you know,

1676
01:36:52,100 --> 01:36:52,900
block it out.

1677
01:36:52,900 --> 01:36:55,700
Now, that wasn't true of the original microprocessors like way, way,

1678
01:36:55,700 --> 01:36:59,900
way back when they just happened in order, and it was true that you

1679
01:36:59,900 --> 01:37:01,300
just waited, however many cycles.

1680
01:37:01,300 --> 01:37:03,100
It took to do something, that's what you did.

1681
01:37:03,300 --> 01:37:06,300
But modern microprocessors are much more complicated than they do a

1682
01:37:06,300 --> 01:37:06,500
lot.

1683
01:37:06,600 --> 01:37:08,800
Lot more every cycle so it's not.

1684
01:37:08,800 --> 01:37:10,800
It doesn't work end-to-end like that anymore.

1685
01:37:12,500 --> 01:37:13,800
All right, last question.

1686
01:37:16,800 --> 01:37:20,300
Sorry, for my total ignorance regarding the stream.

1687
01:37:21,400 --> 01:37:25,100
But what of things can be delegated to GPU instead of CPU.

1688
01:37:26,300 --> 01:37:30,300
So the answer there is really pretty much anything can be delegated

1689
01:37:30,300 --> 01:37:32,000
from the CPU to the GPU.

1690
01:37:32,000 --> 01:37:36,800
But you have to keep some pretty basic things in mind, which is that a

1691
01:37:36,800 --> 01:37:42,600
gpus hardware architecture is optimized for doing lots of the exact

1692
01:37:42,600 --> 01:37:44,600
same operation wide, right?

1693
01:37:44,600 --> 01:37:46,800
So the things that we're doing on the stream where we converted

1694
01:37:46,800 --> 01:37:50,000
everything 24 wide arithmetic gpus or like, much wider than that.

1695
01:37:50,100 --> 01:37:51,100
They're like 16 wide width.

1696
01:37:51,300 --> 01:37:53,100
To wired or 64 wide or stuff like this.

1697
01:37:53,100 --> 01:37:59,000
So, they're way wider and they really, really want to be able to do

1698
01:37:59,000 --> 01:38:07,000
things in ways that exploit large sets of wide operations on small

1699
01:38:07,000 --> 01:38:09,800
chunks of memory at a time, right.

1700
01:38:09,800 --> 01:38:13,900
Like they kind of want to maximize these sorts of streaming things or

1701
01:38:13,900 --> 01:38:17,800
they can like get some you know get a bunch of texture streaming in.

1702
01:38:17,900 --> 01:38:21,100
Do a ton of work on them stream it out to the to

1703
01:38:21,200 --> 01:38:23,900
To, you know, a chunk of the frame buffer after, you know, doing a

1704
01:38:23,900 --> 01:38:28,400
bunch of Ops locally on it or whatever they really want that look of

1705
01:38:28,400 --> 01:38:29,500
the workload, right?

1706
01:38:30,400 --> 01:38:34,300
So you have to have code that looks like that.

1707
01:38:34,400 --> 01:38:37,100
You can delegate pretty much anything to the GPU that you want.

1708
01:38:37,200 --> 01:38:38,900
You know, you could put anything you want on there.

1709
01:38:38,900 --> 01:38:39,100
Really?

1710
01:38:39,100 --> 01:38:40,600
They're pretty general purpose now.

1711
01:38:42,000 --> 01:38:47,500
But if the workload doesn't look like that, the GPU is actually much

1712
01:38:47,500 --> 01:38:51,700
lower than the CPU at everything else, right?

1713
01:38:51,700 --> 01:38:57,300
So Random Access single-wide stuff, the CPU is way faster than the

1714
01:38:57,300 --> 01:38:59,800
GPU, a lot of times because gpus are like,

1715
01:39:00,000 --> 01:39:04,600
Often time clock slower or they've got less, you know, cash stuff, or

1716
01:39:04,600 --> 01:39:07,100
they've got less whatever that, you know, that's necessary to make

1717
01:39:07,100 --> 01:39:09,000
these things go quickly.

1718
01:39:09,300 --> 01:39:13,100
So, you know, an Intel processor, is really good at doing

1719
01:39:14,700 --> 01:39:20,000
single-threaded single-wide code, you know, it's good at that and so

1720
01:39:20,000 --> 01:39:22,700
typically, you can't just offload, your whole game to the GPU and

1721
01:39:22,700 --> 01:39:24,000
expect anything good to happen.

1722
01:39:24,200 --> 01:39:26,000
It's going to be awful, right?

1723
01:39:26,700 --> 01:39:29,900
And so typically, when you look at CPU GPU break down, what

1724
01:39:30,000 --> 01:39:33,400
Are talking about is when you have these things that really do look

1725
01:39:33,400 --> 01:39:35,700
like graphical or number crunching workloads.

1726
01:39:35,700 --> 01:39:38,700
Those are the things you can really move over there, but stuff like

1727
01:39:38,700 --> 01:39:41,800
game, logic, and moving things around and executing scripting

1728
01:39:41,800 --> 01:39:44,800
languages and stuff are harder to make work on the GPU.

1729
01:39:44,800 --> 01:39:47,000
So typically you don't get a win there and you're better off just

1730
01:39:47,000 --> 01:39:51,300
using the CPU cores for that because, you know, you've got four CPU

1731
01:39:51,300 --> 01:39:54,000
cores usually, with two hyper threads of core or something.

1732
01:39:54,000 --> 01:39:58,000
In modern day, for example, you've got that to work with and so, you

1733
01:39:58,000 --> 01:39:59,900
know, that's really the better place for those things to happen.

1734
01:40:00,000 --> 01:40:00,200
and,

1735
01:40:06,300 --> 01:40:06,700
All right.

1736
01:40:06,900 --> 01:40:09,400
I think I'm going to go ahead and call it because we are over time.

1737
01:40:11,100 --> 01:40:14,500
So let's go ahead and close things down here.

1738
01:40:15,000 --> 01:40:15,900
Where do we leave it?

1739
01:40:15,900 --> 01:40:17,100
Here we left our things.

1740
01:40:17,100 --> 01:40:18,200
Running fairly pleasantly.

1741
01:40:18,200 --> 01:40:18,900
Yes, yes.

1742
01:40:19,900 --> 01:40:21,000
So cute.

1743
01:40:22,100 --> 01:40:22,600
Yeah.

1744
01:40:24,700 --> 01:40:29,300
Well anyway it's pretty fun to walk around here.

1745
01:40:29,300 --> 01:40:33,400
Now, it's going to be fun to Ping back to the game and and start

1746
01:40:33,400 --> 01:40:36,300
playing around with stuff now that we have something that can render

1747
01:40:36,600 --> 01:40:41,600
very quickly and it's just it's awesome, right?

1748
01:40:41,600 --> 01:40:45,400
It's like it's so nice to take something that was slow and make it

1749
01:40:45,400 --> 01:40:45,800
fast.

1750
01:40:45,800 --> 01:40:47,500
It just feels good, you know?

1751
01:40:48,400 --> 01:40:51,300
And like you know this is just kind of zipping along and like like

1752
01:40:51,300 --> 01:40:54,100
it's nobody's business and remember we could barely even move it

1753
01:40:54,100 --> 01:40:54,300
before.

1754
01:40:54,500 --> 01:40:55,700
So, that's pretty great.

1755
01:40:56,900 --> 01:40:58,200
And I'm pretty happy with that.

1756
01:40:58,600 --> 01:41:02,400
So we've got a little bit more, I wanted to kind of cover here when we

1757
01:41:02,800 --> 01:41:04,100
on the rendering side of things.

1758
01:41:04,600 --> 01:41:08,800
So tomorrow, we'll start maybe taking a look at the memory stuff and

1759
01:41:08,800 --> 01:41:12,200
then next week, we'll take a look at threading and so I think we've

1760
01:41:12,200 --> 01:41:14,400
got a little bit more to do here, but as far as rendering is

1761
01:41:14,400 --> 01:41:16,600
concerned, this has gone blazingly fast.

1762
01:41:18,100 --> 01:41:20,500
You know, I didn't expect it to necessarily be such a cakewalk but it

1763
01:41:20,500 --> 01:41:23,300
turns out the processors are so darn fast that we didn't really have

1764
01:41:23,300 --> 01:41:24,200
to bust out.

1765
01:41:24,400 --> 01:41:29,600
Any kind of craziness, just kind of converting our stuff.

1766
01:41:29,600 --> 01:41:31,300
24 wide actually ran.

1767
01:41:31,300 --> 01:41:36,900
Great until way to go guys, like seriously, good job.

1768
01:41:37,600 --> 01:41:38,200
So anyway,

1769
01:41:39,800 --> 01:41:42,800
Hopefully, I will see you guys back here tomorrow.

1770
01:41:43,400 --> 01:41:45,100
Again, I believe tomorrow's Thursday, right?

1771
01:41:45,100 --> 01:41:46,800
So it's 5 again, 5 p.m.

1772
01:41:46,800 --> 01:41:49,000
Pacific Daylight time tomorrow.

1773
01:41:49,900 --> 01:41:53,600
Hope, see you all back here for take a look at the memory stuff and

1774
01:41:53,900 --> 01:41:56,300
just kind of finishing up some of this, some of this optimization

1775
01:41:56,300 --> 01:41:59,600
stuff that we're doing on the pixel Loop before we move on to the

1776
01:41:59,600 --> 01:41:59,800
multi,

1777
01:42:00,700 --> 01:42:02,400
So, I'll see you back here for that.

1778
01:42:02,400 --> 01:42:06,800
In the meantime, if you would like your own copy of the source code to

1779
01:42:06,800 --> 01:42:09,300
play around with it home, you can go ahead and get that out.

1780
01:42:09,300 --> 01:42:12,100
Handmade Hero 2 or R by pre-ordering the game, it comes to the source

1781
01:42:12,100 --> 01:42:12,300
code.

1782
01:42:12,300 --> 01:42:16,200
You can download it every night after I'm done working, I upload it.

1783
01:42:16,900 --> 01:42:19,500
If you want to support the video series, we also have a patronage,

1784
01:42:19,500 --> 01:42:20,200
subscribe to.

1785
01:42:20,300 --> 01:42:24,000
We also have a forum site which you can go to to ask questions and

1786
01:42:24,000 --> 01:42:25,100
there's anti Depakote guy.

1787
01:42:25,100 --> 01:42:27,600
There's also ports to Mac and Linux if you're trying to follow along

1788
01:42:27,600 --> 01:42:29,900
on another platform, community members.

1789
01:42:30,000 --> 01:42:33,600
His have contributed ports and finally there's a tweetbot which treats

1790
01:42:33,600 --> 01:42:34,000
the schedule.

1791
01:42:34,000 --> 01:42:35,300
So if you're trying to catch it live,

1792
01:42:36,900 --> 01:42:38,400
That's the place to go for that.

1793
01:42:38,500 --> 01:42:41,200
It's always got the latest schedule up there.

1794
01:42:41,700 --> 01:42:42,600
So thanks everyone.

1795
01:42:42,900 --> 01:42:45,300
I hope to see you guys again tomorrow.

1796
01:42:45,400 --> 01:42:47,400
Until then have fun programming.

1797
01:42:47,600 --> 01:42:48,300
Take it easy, everyone.

