1
00:00:02,300 --> 00:00:04,300
Hello everyone and welcome to handmade hero.

2
00:00:04,300 --> 00:00:08,300
The sure we could complete game live on stream today.

3
00:00:08,300 --> 00:00:11,300
We are having sort of a special event on the stream.

4
00:00:11,700 --> 00:00:15,500
First, I will be doing the regular episode of handmade hero where we

5
00:00:15,500 --> 00:00:17,700
will be doing some coding in.

6
00:00:17,700 --> 00:00:19,400
This is actually going to be some pretty.

7
00:00:20,400 --> 00:00:23,000
I feel like this is going to be some fairly instructive coding for

8
00:00:23,000 --> 00:00:25,200
people who are interested in code architecture.

9
00:00:25,600 --> 00:00:27,500
I think we're going to be doing some interesting things today.

10
00:00:28,600 --> 00:00:31,900
Just in terms of, like, sort of showing how some code Transformations

11
00:00:31,900 --> 00:00:34,300
work and stuff like that, so I hope you'll enjoy that.

12
00:00:34,300 --> 00:00:38,400
And then after the stream at about 8:30, basically, whenever the

13
00:00:38,400 --> 00:00:39,200
stream is over.

14
00:00:39,200 --> 00:00:44,600
So after the Q&A, we will be going to a special like a mock debate

15
00:00:44,600 --> 00:00:49,300
between myself and Sean McGrath, you probably have seen some of his

16
00:00:49,600 --> 00:00:49,900
work.

17
00:00:49,900 --> 00:00:55,400
He actually just recently was one of the main guys, on N plus plus the

18
00:00:55,400 --> 00:00:58,100
PS4 and he is,

19
00:00:58,200 --> 00:01:03,500
During doing a free-to-play game as his next game, and he is a little

20
00:01:03,500 --> 00:01:06,200
apprehensive about free to play as I guess.

21
00:01:06,400 --> 00:01:09,200
He is, he is not completely sold on the concept.

22
00:01:09,200 --> 00:01:12,100
Perhaps I should say our baby, he feels a little uneasy about it and

23
00:01:12,100 --> 00:01:16,500
he wanted to try to have a public discussion in the form of a debate

24
00:01:16,500 --> 00:01:20,500
where I'm sort of taking the The Devil's Advocate position to all of

25
00:01:20,500 --> 00:01:24,200
the reasons why he is thinking that this might be a good idea for him.

26
00:01:24,200 --> 00:01:28,000
So I tried to prepare some some interesting points for him.

27
00:01:28,200 --> 00:01:29,900
To think about and we'll see how that goes.

28
00:01:29,900 --> 00:01:31,000
But I'm relatively excited for.

29
00:01:31,000 --> 00:01:33,800
I think it would be pretty interesting and I'm also kind of interested

30
00:01:33,800 --> 00:01:38,700
to hear his perspective on it because I honestly don't know that many

31
00:01:38,700 --> 00:01:42,000
people who think free-to-play is a good idea.

32
00:01:42,000 --> 00:01:46,600
But also our apprehensive at like it's he sort of he's obviously very

33
00:01:46,600 --> 00:01:49,900
aware of the problems of f2p but still thinks that maybe it's the

34
00:01:49,900 --> 00:01:53,600
right decision and so that sounds to me like a more interesting

35
00:01:53,800 --> 00:01:57,600
position for me to hear about and explore than the standard people are

36
00:01:57,600 --> 00:01:58,000
just like

37
00:01:58,200 --> 00:02:00,200
Capitalism itself, whatever it doesn't matter.

38
00:02:00,200 --> 00:02:01,800
As long as people buy it, it's fine, right?

39
00:02:01,800 --> 00:02:07,500
Or whatever, like sort of the the more traditional f2p Zing geryon

40
00:02:07,500 --> 00:02:08,800
position on these sorts of things.

41
00:02:10,900 --> 00:02:12,700
So, I hope you'll join us for that again.

42
00:02:12,700 --> 00:02:14,500
You shouldn't really have to do anything assuming that we don't have

43
00:02:14,500 --> 00:02:15,800
too many technical difficulties.

44
00:02:16,000 --> 00:02:19,600
You can just keep on watching handmade hero but I believe Shawn will

45
00:02:19,600 --> 00:02:21,800
also be trying to stream it on his channel as well.

46
00:02:22,400 --> 00:02:27,300
So if you do subscribe to, or watch his streaming channel on Twitch,

47
00:02:27,500 --> 00:02:28,500
you should be able to catch it there.

48
00:02:28,500 --> 00:02:29,800
So either place will work.

49
00:02:30,300 --> 00:02:31,000
All right?

50
00:02:31,200 --> 00:02:34,900
That's said today, we are on Day 2, 10 of handmade hero.

51
00:02:34,900 --> 00:02:38,100
And so if you would like to follow along with the code that I am doing

52
00:02:38,100 --> 00:02:39,600
here, you

53
00:02:40,600 --> 00:02:44,000
Do that by unpacking the previous day.

54
00:02:44,000 --> 00:02:47,500
So, I'm packed Day, 2009, source code and then you'll be exactly where

55
00:02:47,500 --> 00:02:49,900
I am at the moment.

56
00:02:50,000 --> 00:02:53,200
So, yeah, where were we right?

57
00:02:53,400 --> 00:02:54,900
Do you guys remember where we were?

58
00:02:54,900 --> 00:02:55,700
I hope you do.

59
00:02:56,500 --> 00:02:59,900
We ended the last stream at a place that I was actually pretty.

60
00:03:00,000 --> 00:03:03,900
Happy with us, pretty excited about where we ended up getting.

61
00:03:03,900 --> 00:03:07,500
And the reason for that was because we had finally gotten to the point

62
00:03:07,500 --> 00:03:13,300
where our debug system now supports both profiling and data written

63
00:03:13,300 --> 00:03:16,900
through the same stream and it all kind of gets collated.

64
00:03:16,900 --> 00:03:19,400
After the fact, which means that if you kind of turn it off, it's just

65
00:03:19,400 --> 00:03:22,600
not there doesn't really cost you anything, you can also compile it

66
00:03:22,600 --> 00:03:24,000
out and do all those sorts of things.

67
00:03:24,500 --> 00:03:26,600
And it also means you can kind of look back over time.

68
00:03:26,600 --> 00:03:29,400
So it means that when we're displaying data, we're not just dumping it

69
00:03:29,400 --> 00:03:29,800
to the screen.

70
00:03:30,000 --> 00:03:30,200
Dean.

71
00:03:30,200 --> 00:03:32,700
We actually have 32 frames worth of back data.

72
00:03:32,700 --> 00:03:36,000
We can even go look at in other sorts of kind of neat, stuff like

73
00:03:36,000 --> 00:03:36,500
that.

74
00:03:36,500 --> 00:03:39,000
So, I'm pretty, I'm pretty interested in this.

75
00:03:39,000 --> 00:03:42,800
It's kind of neat, it's just a kind of a neat thing.

76
00:03:43,000 --> 00:03:47,600
And so what I want to start doing today is getting us sort of more

77
00:03:47,600 --> 00:03:52,300
towards a well working code base because basically what we did is we

78
00:03:52,300 --> 00:03:54,700
did all the stuff necessary to make all these things work, and it's

79
00:03:54,700 --> 00:03:55,500
very exploratory.

80
00:03:55,500 --> 00:03:58,600
I've never written debug system that really works like this one does.

81
00:03:58,800 --> 00:03:59,900
And so I was just

82
00:04:00,000 --> 00:04:03,100
Trying to figure out sort of how do we structure the code to allow

83
00:04:03,100 --> 00:04:04,900
these things to work in a nice way?

84
00:04:05,200 --> 00:04:08,400
And so now I kind of want to start taking what we have there.

85
00:04:08,400 --> 00:04:12,200
Now that we see it working and it's all fine and start to sort of

86
00:04:12,200 --> 00:04:17,200
piece it apart into something that I'm were confident about Its

87
00:04:17,200 --> 00:04:20,000
Behavior, how it's structured and its ability to kind of add things

88
00:04:20,000 --> 00:04:20,500
and so on.

89
00:04:24,000 --> 00:04:28,200
So for those of you out there who are novice programmers, who are a

90
00:04:28,200 --> 00:04:31,000
little unsure about how to make architecture decisions and stuff like

91
00:04:31,000 --> 00:04:31,500
that.

92
00:04:32,000 --> 00:04:35,500
This dream is sort of going to be largely about that sort of thing.

93
00:04:36,400 --> 00:04:39,900
So the first thing that I would like to point out here, kind of want

94
00:04:39,900 --> 00:04:43,100
to show you a fairly obvious thing that I think we should start with.

95
00:04:44,200 --> 00:04:49,300
And this is like, I always say, I'm a big fan of compression oriented

96
00:04:49,300 --> 00:04:50,400
programming, right?

97
00:04:50,500 --> 00:04:52,700
Which is sort of a made-up term that I use.

98
00:04:53,300 --> 00:04:53,600
I don't

99
00:04:53,800 --> 00:04:56,300
Do you know if anyone else uses it but basically what it means is

100
00:04:56,600 --> 00:05:00,900
trying to allow code to be exploratory, be free, be fast and loose.

101
00:05:01,100 --> 00:05:04,400
And then the way that you sort of start getting architecture out of a

102
00:05:04,400 --> 00:05:07,500
place that you don't really know what the architecture should be is to

103
00:05:07,500 --> 00:05:12,200
start looking for how things tend to work, and then taking common

104
00:05:12,200 --> 00:05:16,600
pieces, and collapsing, them into things that can be used in more than

105
00:05:16,600 --> 00:05:17,200
one place, right?

106
00:05:17,200 --> 00:05:22,000
So it's this, it's this concept of taking sort of a big repetitive

107
00:05:22,000 --> 00:05:23,600
mess of code and going on.

108
00:05:23,700 --> 00:05:24,500
Oh, I see that.

109
00:05:24,500 --> 00:05:25,900
This is doing some things in common.

110
00:05:26,000 --> 00:05:27,100
I can compress that out.

111
00:05:27,100 --> 00:05:30,000
I can press this out until you kind of get it down to something that's

112
00:05:30,000 --> 00:05:33,000
nice and concise and where things are only done in one place and so

113
00:05:33,000 --> 00:05:33,800
on, right?

114
00:05:35,500 --> 00:05:37,300
And so that's what I'd like to point out here.

115
00:05:37,800 --> 00:05:40,700
So if I just start thinking about it, you know, we've got there's just

116
00:05:40,700 --> 00:05:42,000
a lot of code, right?

117
00:05:42,100 --> 00:05:45,800
The debug system took several days, I think it was like 10 or 20 days

118
00:05:46,100 --> 00:05:47,500
which is, I mean, 10, 20 hours.

119
00:05:47,500 --> 00:05:48,500
So I don't know half a week.

120
00:05:48,500 --> 00:05:51,300
Something like this of us typing and code, trying things, and

121
00:05:51,300 --> 00:05:51,700
whatever.

122
00:05:51,900 --> 00:05:53,600
And so there's there's a lot of code

123
00:05:53,700 --> 00:05:54,200
I'd there, right?

124
00:05:54,200 --> 00:05:57,300
There's a lot of stuff, we wrote not all of it was necessarily

125
00:05:57,300 --> 00:05:58,300
considered holistically.

126
00:05:58,300 --> 00:05:59,500
It was just us trying to sort of

127
00:06:00,000 --> 00:06:02,900
To the point where we felt that it was doing the sorts of things we

128
00:06:02,900 --> 00:06:04,200
wanted to do, right?

129
00:06:04,500 --> 00:06:07,200
And so, one of the things that you'll notice is we have a lot of

130
00:06:07,200 --> 00:06:10,600
things that sort of do similar operations, right?

131
00:06:10,600 --> 00:06:12,000
And have things that look kind of similar.

132
00:06:12,000 --> 00:06:17,900
So if you look, for example, in our handmade debug dot h, and you look

133
00:06:17,900 --> 00:06:19,500
inside our handmade platform date.

134
00:06:19,500 --> 00:06:23,500
So, in hammy, platform H is just the debug usage code is the code that

135
00:06:23,500 --> 00:06:27,400
people use to access the debug Services when they need to access those

136
00:06:27,400 --> 00:06:29,800
services and what you will see there, right?

137
00:06:30,000 --> 00:06:32,000
It is, you've kind of got this structure in there.

138
00:06:32,000 --> 00:06:33,700
That's like okay, here is a debug event.

139
00:06:33,700 --> 00:06:37,500
It's something that goes into the debug lock, you can see in there

140
00:06:37,500 --> 00:06:41,100
that it's kind of got a type, which has some sort of different data

141
00:06:41,200 --> 00:06:44,500
members that it might be or like, R32 you 32 X 32, those sorts of

142
00:06:44,500 --> 00:06:44,900
things.

143
00:06:45,700 --> 00:06:48,700
And we have some things in here, like, a union, that stores different

144
00:06:48,700 --> 00:06:50,900
types, like this look seconds, elapsed, or whatever.

145
00:06:50,900 --> 00:06:56,000
And then some pointers to things and some instant on-site into

146
00:06:56,000 --> 00:06:59,800
whatever, right now, if we go back over here to our ham,

147
00:07:00,000 --> 00:07:01,700
Debug .h, you can see that.

148
00:07:01,700 --> 00:07:06,100
What we have here is almost the exact same thing, right?

149
00:07:07,000 --> 00:07:10,600
You can see that we have this notion of a debug variable type right

150
00:07:11,100 --> 00:07:13,000
and it's got a lot of similar things in it.

151
00:07:13,000 --> 00:07:15,500
Now there are some things that are not like we've got these counter

152
00:07:15,500 --> 00:07:18,100
thread lists, and the bitmap display, and those sorts of things.

153
00:07:19,100 --> 00:07:22,600
But we've got this whole set here are like the same sorts of things,

154
00:07:22,900 --> 00:07:23,400
right?

155
00:07:23,600 --> 00:07:27,300
And then, if we come down to look at an actual debug variable itself,

156
00:07:27,400 --> 00:07:29,800
you can see that we have almost the exact same things.

157
00:07:29,900 --> 00:07:32,600
Could these two sets of places as well, right?

158
00:07:32,900 --> 00:07:37,500
So there's just there's just a very, very significant amount of

159
00:07:37,500 --> 00:07:39,000
overlapping what's happening there.

160
00:07:39,000 --> 00:07:40,800
And there's a reason for that.

161
00:07:40,800 --> 00:07:44,500
It's because this is actually a conduit essentially now to this

162
00:07:44,500 --> 00:07:45,100
system.

163
00:07:45,200 --> 00:07:47,800
Now, we didn't know that when we design it, but that's just how it

164
00:07:47,800 --> 00:07:48,700
started to shake out.

165
00:07:48,700 --> 00:07:53,400
It means that basically people who want to put data out to the debug

166
00:07:53,400 --> 00:07:53,900
system

167
00:07:56,000 --> 00:08:01,100
They shove the data in here, whether it be a profile, a profile

168
00:08:01,100 --> 00:08:04,500
counter, or a piece of data, from a struct that they would like to

169
00:08:04,500 --> 00:08:05,100
inspect.

170
00:08:05,200 --> 00:08:09,700
It's all going into this stream and then later on that something, get

171
00:08:09,700 --> 00:08:13,400
sort of constructed into a hierarchy here for the debug variable

172
00:08:13,400 --> 00:08:17,800
system so that it can be displayed or stored later or done things can

173
00:08:17,800 --> 00:08:20,500
happen to it, whatever we might want to do, right?

174
00:08:20,900 --> 00:08:23,300
And so the part about that, that's significant.

175
00:08:23,300 --> 00:08:24,200
And the reason that I think

176
00:08:24,300 --> 00:08:28,700
that's worth noting is because every time we want to add a new type to

177
00:08:28,700 --> 00:08:31,800
our debug variable system, it would mean we'd have to add it in two

178
00:08:31,800 --> 00:08:32,400
places.

179
00:08:32,600 --> 00:08:36,299
So although it's not maybe the biggest deal that it's duplicated.

180
00:08:36,299 --> 00:08:40,400
This one time what it really means is that going forwards, all changes

181
00:08:40,400 --> 00:08:44,000
that we will ever make and all editions, we will ever make to the

182
00:08:44,000 --> 00:08:46,800
types of values that we can display at a base level that are

183
00:08:46,800 --> 00:08:48,800
considered sort of atomic types.

184
00:08:48,800 --> 00:08:52,700
That are tracked in the debug system, will incur a cost where it is

185
00:08:52,700 --> 00:08:54,200
created on both sides.

186
00:08:54,400 --> 00:08:59,200
And it's just a lot of busy work for not a lot of payoff, okay.

187
00:09:00,200 --> 00:09:03,800
So what I'd like to do first is take a very simple code,

188
00:09:03,800 --> 00:09:09,400
simplification step there and try to make these two things do use

189
00:09:09,400 --> 00:09:13,900
exactly the same code in all cases, so that there's no longer this

190
00:09:13,900 --> 00:09:16,400
concept of carrying things around and translating from one to the

191
00:09:16,400 --> 00:09:19,200
other and switch statements that have to crack out 12 to put it into

192
00:09:19,200 --> 00:09:19,700
the other one.

193
00:09:20,200 --> 00:09:24,200
All of that is just busy work and we would like to basically eliminate

194
00:09:24,200 --> 00:09:26,100
it entirely if we can write.

195
00:09:29,400 --> 00:09:29,800
Okay.

196
00:09:31,800 --> 00:09:34,600
so, the first thing that I'm going to do to me,

197
00:09:36,200 --> 00:09:40,400
The first thing I'm going to do is I'm just going to go ahead and do

198
00:09:40,400 --> 00:09:43,700
the simplest possible thing in terms of collapsing.

199
00:09:43,700 --> 00:09:48,500
These guys, which is to say that I am just going to full-on say that

200
00:09:48,500 --> 00:09:52,700
debug variables can just contain a debug event, right?

201
00:09:52,700 --> 00:09:56,600
So I'm going to say instead of storing any of this stuff, the way that

202
00:09:56,600 --> 00:09:57,100
it's being stored.

203
00:09:57,100 --> 00:10:00,200
Now I'm just going to allow it to be stored the way that it is stored

204
00:10:00,200 --> 00:10:01,900
here, right?

205
00:10:01,900 --> 00:10:06,000
And so I'm going to go ahead and take that and say that's what I would

206
00:10:06,000 --> 00:10:06,200
like to.

207
00:10:06,200 --> 00:10:06,500
Do.

208
00:10:06,500 --> 00:10:09,600
Now, there is something that's a little bit annoying about that, and

209
00:10:09,600 --> 00:10:11,300
this is sort of the thing that we're talking about before which is

210
00:10:11,300 --> 00:10:14,600
that some of our base types here, like V2, V3, V4 and rectangle to.

211
00:10:14,600 --> 00:10:19,300
So, on, those are not actually defined anywhere in these sort of

212
00:10:19,300 --> 00:10:26,100
platform code because they exist only in the actual handmade hero

213
00:10:26,100 --> 00:10:26,400
code.

214
00:10:26,400 --> 00:10:29,300
And so, I really don't know whether we want to move those internet,

215
00:10:29,300 --> 00:10:32,100
but I kind of think that it might be nice if we did, right.

216
00:10:32,100 --> 00:10:35,100
Because I like these, this method of accessing things here, a little

217
00:10:35,100 --> 00:10:35,800
bit better than this.

218
00:10:36,200 --> 00:10:39,300
And of accessing things here because it better represents us after

219
00:10:39,300 --> 00:10:41,000
what's going on, right?

220
00:10:41,400 --> 00:10:45,300
So I think, like I said, this is the step that I want to take.

221
00:10:45,400 --> 00:10:48,700
So the first thing that I'm going to do is I'm going to actually have

222
00:10:48,700 --> 00:10:52,600
this thing work effectively like this, right?

223
00:10:52,600 --> 00:10:56,000
So I'm going to sort of move the the data block stuff from this over

224
00:10:56,000 --> 00:11:00,200
into here I'm going to make it a mirror at first and then I'm going to

225
00:11:00,200 --> 00:11:03,200
fix anything that that in you any problem that that caused.

226
00:11:03,200 --> 00:11:06,100
So I'm just going to say because I like it better I would

227
00:11:06,300 --> 00:11:09,800
All of our sort of our stuff here, are v4s V2s, all that kind of

228
00:11:09,800 --> 00:11:10,500
nonsense.

229
00:11:11,600 --> 00:11:15,600
I'd like all of that stuff to now be sort of considered base types.

230
00:11:15,700 --> 00:11:17,900
So they're just going to be in here because I think they're important

231
00:11:17,900 --> 00:11:21,500
enough and we use them enough that I would like them to sort of be

232
00:11:22,000 --> 00:11:26,400
accessible to the platform layer as something it can use and and

233
00:11:26,400 --> 00:11:29,200
something that we can use in the interface boundaries and so on.

234
00:11:29,200 --> 00:11:31,500
I think that's just a reasonable thing to do.

235
00:11:32,000 --> 00:11:33,400
So I'm going to go ahead and put that in there.

236
00:11:33,400 --> 00:11:37,800
So now we've got V2s v3's and before is in there and I'm going to do

237
00:11:37,800 --> 00:11:39,300
the same thing with rectangles.

238
00:11:39,600 --> 00:11:41,200
So inside the math Library.

239
00:11:41,600 --> 00:11:44,500
We've got rectangles as well and I'm going to go ahead and add those.

240
00:11:44,500 --> 00:11:46,200
So here is them, right?

241
00:11:46,500 --> 00:11:48,700
And I'll grab them out and I'll just put them in here.

242
00:11:49,600 --> 00:11:53,400
Okay, so that's all I really wanted to do there just to start with

243
00:11:53,400 --> 00:11:57,000
that and that means that I can also add now the rectangles directly

244
00:11:57,000 --> 00:11:58,900
into the API themselves.

245
00:11:58,900 --> 00:11:59,800
So inside debugger

246
00:12:00,000 --> 00:12:02,800
Here, I can say we also have rectangle to right?

247
00:12:05,100 --> 00:12:06,000
And rectangle, 3.

248
00:12:09,200 --> 00:12:11,300
All right, and now I'm going to deal with the Fallout of that cost.

249
00:12:11,300 --> 00:12:13,800
Also note that the simple preprocessor at the moment.

250
00:12:13,800 --> 00:12:16,100
I don't think it's pre-processing handmade platform that 8.

251
00:12:16,100 --> 00:12:18,800
So I'm going to go ahead and let it do that as well since now, we got

252
00:12:18,800 --> 00:12:21,900
introspection in there and so let's continue on.

253
00:12:22,400 --> 00:12:26,300
Alright, so in order to port to that, what we have to do now is take

254
00:12:26,300 --> 00:12:29,400
him a platform.sh and all the places where this stuff was happening

255
00:12:29,400 --> 00:12:34,000
before, where we sort of have these, these debug values stuff that's

256
00:12:34,000 --> 00:12:34,500
happening.

257
00:12:34,700 --> 00:12:38,900
All of that stuff needs to now, be handled properly for the

258
00:12:39,000 --> 00:12:40,500
Types that are there, right?

259
00:12:40,600 --> 00:12:43,500
So when we have an F32, I'm going to take that as to be too.

260
00:12:43,500 --> 00:12:46,400
When we have a you through to Matt take that you 32 and so on it and

261
00:12:46,400 --> 00:12:48,400
assign it directly to the right place.

262
00:12:48,800 --> 00:12:51,200
And I course I have to actually also figure out what I just call this

263
00:12:51,200 --> 00:12:55,800
because I don't remember because I am old and forgetful.

264
00:12:56,200 --> 00:12:57,000
So, here we go.

265
00:12:58,600 --> 00:12:59,500
Let's go ahead and get those.

266
00:12:59,500 --> 00:13:02,400
There's a real 32 is the UN 32?

267
00:13:03,200 --> 00:13:04,400
There's an in 32.

268
00:13:05,200 --> 00:13:05,600
Okay.

269
00:13:06,500 --> 00:13:09,000
So then these guys are even more straightforward.

270
00:13:09,300 --> 00:13:12,200
These guys have a vector2 or whatever it's called.

271
00:13:12,200 --> 00:13:13,800
Let's see what that is actually called.

272
00:13:14,100 --> 00:13:18,700
This is Where I wish emacs had the concept of storing back state for

273
00:13:18,700 --> 00:13:19,700
different views.

274
00:13:21,500 --> 00:13:21,900
Mr.

275
00:13:21,900 --> 00:13:22,400
Fourth dimension.

276
00:13:22,400 --> 00:13:26,700
If you're out there, I can explain that in more detail, some time if

277
00:13:26,700 --> 00:13:29,400
you're interested in adding it to the awesome editor that you are

278
00:13:29,400 --> 00:13:29,900
constructing.

279
00:13:29,900 --> 00:13:30,400
Okay.

280
00:13:31,000 --> 00:13:31,700
So

281
00:13:33,400 --> 00:13:34,600
We've got Vector to.

282
00:13:34,900 --> 00:13:37,000
We can now just assign that directly, which is nice.

283
00:13:37,500 --> 00:13:40,500
We've got Vector 3, which we can also sign.

284
00:13:40,500 --> 00:13:45,600
And that's also nice and we've got Vector for or sorry rectangle, too.

285
00:13:47,700 --> 00:13:48,300
There we go.

286
00:13:50,400 --> 00:13:51,400
And rectangle, 3.

287
00:13:56,000 --> 00:13:58,400
And that also cuts down on some potential typos that could have been

288
00:13:58,400 --> 00:14:01,300
happening in here like for all we know, we don't really know what's

289
00:14:01,300 --> 00:14:01,900
going on there.

290
00:14:02,200 --> 00:14:05,400
Furthermore, now that those things are defined, this stuff can kind of

291
00:14:05,400 --> 00:14:07,700
come out of here, so it doesn't have to be in there anymore.

292
00:14:07,900 --> 00:14:10,900
It doesn't have to be in the math one, it can actually be in here.

293
00:14:11,100 --> 00:14:14,300
So this is kind of consolidate a little bit, which is actually a nice

294
00:14:14,300 --> 00:14:15,500
thing in my opinion.

295
00:14:15,500 --> 00:14:17,900
So there's all that and that's good.

296
00:14:18,100 --> 00:14:21,800
Okay, so I'm going to go ahead and compile that see where we're at?

297
00:14:28,700 --> 00:14:32,400
Okay, so now we've got to fix the vector pointer one.

298
00:14:33,100 --> 00:14:35,100
We don't have that one at the moment.

299
00:14:35,500 --> 00:14:38,700
So that's actually being used sort of in here for our open data block

300
00:14:38,700 --> 00:14:41,000
stuff that we can still I guess for now.

301
00:14:41,000 --> 00:14:44,100
Since we don't really have any particular opinion about how that such

302
00:14:44,100 --> 00:14:47,600
at work or any real reason why that stuff has to change.

303
00:14:47,600 --> 00:14:50,700
We can leave just that one alone for now.

304
00:14:50,700 --> 00:14:53,100
And you know, later on, we'll think about what we want to do with

305
00:14:53,100 --> 00:14:54,100
that, right?

306
00:14:55,700 --> 00:14:58,600
Okay, so this is going to be an R32, this seconds.

307
00:14:58,600 --> 00:14:59,900
Elapsed value is just going.

308
00:15:00,000 --> 00:15:02,800
Artists in our 32 obviously, so that's all good.

309
00:15:02,800 --> 00:15:05,700
And then in here, where we've got sort of the debug event translation,

310
00:15:05,700 --> 00:15:10,200
all this really quickly, go ahead and translate it over directly.

311
00:15:10,200 --> 00:15:15,100
And again our goal is to get rid of this whole switch statement to you

312
00:15:15,100 --> 00:15:16,500
know just entirely.

313
00:15:16,500 --> 00:15:19,600
We don't actually want it to be there at all but I'm just kind of

314
00:15:19,600 --> 00:15:22,400
doing this mechanically so you can see each individual step.

315
00:15:22,400 --> 00:15:25,700
I might take a larger step in this normally, if it were just me.

316
00:15:25,700 --> 00:15:28,200
But I'm going to kind of do it a little bit more slowly.

317
00:15:28,200 --> 00:15:30,000
Just for anyone again, this is kind of

318
00:15:30,000 --> 00:15:32,400
Of more of a stream for people who have are sort of new to

319
00:15:32,400 --> 00:15:32,900
architecture.

320
00:15:32,900 --> 00:15:35,700
I want them to be able to see what's going on here.

321
00:15:36,000 --> 00:15:41,600
Okay, okay, so, in handmade platform.sh, now that we've got the

322
00:15:41,600 --> 00:15:44,200
introspection stuff kind of hanging out in there and which is

323
00:15:44,200 --> 00:15:46,700
something that we probably would even continue to do for doing

324
00:15:46,700 --> 00:15:47,300
introspection.

325
00:15:47,300 --> 00:15:50,200
It means that these guys should really exist up here in the

326
00:15:50,200 --> 00:15:52,200
introspection code, something like this.

327
00:15:52,400 --> 00:15:53,400
So I'm going to leave that there.

328
00:15:54,100 --> 00:15:57,800
And now we've gotten to the point where we're pretty much done.

329
00:15:57,800 --> 00:15:59,600
I have to change the second to last thing again.

330
00:15:59,600 --> 00:15:59,800
That's

331
00:16:00,100 --> 00:16:01,800
Actually store that way.

332
00:16:01,800 --> 00:16:04,600
Now, stored in the real 32 because we kind of got rid of that, special

333
00:16:04,600 --> 00:16:05,200
purpose code.

334
00:16:05,200 --> 00:16:07,600
But now we're back to the point where we should be working.

335
00:16:07,900 --> 00:16:11,400
And you can see that we're sort of passing the same values and seeing

336
00:16:11,400 --> 00:16:12,500
the same things that we were before.

337
00:16:12,500 --> 00:16:14,000
So, that's exactly where I wanted to be.

338
00:16:14,300 --> 00:16:16,600
All right, so now let's get rid of some code.

339
00:16:19,000 --> 00:16:20,100
Friend of mine from a long time ago.

340
00:16:20,100 --> 00:16:22,200
Something I was more of an acquaintance someone I work with that

341
00:16:22,200 --> 00:16:27,400
Microsoft, very briefly, we were interns are together once said a very

342
00:16:27,600 --> 00:16:29,600
I think, why statement?

343
00:16:29,800 --> 00:16:34,200
He said some of the most productive work you will ever do will be with

344
00:16:34,200 --> 00:16:35,400
the delete key.

345
00:16:35,500 --> 00:16:38,700
This is this was his statement and you know it's true.

346
00:16:43,300 --> 00:16:48,000
So, basically, what I want to do here is start to delete some code.

347
00:16:48,000 --> 00:16:49,500
So, here I am in debug variable.

348
00:16:49,500 --> 00:16:53,000
And what I would like to do is start by saying, well, I should be able

349
00:16:53,000 --> 00:16:57,200
to just use the debug event structure directly in here as one of my

350
00:16:57,200 --> 00:16:57,700
types.

351
00:16:57,700 --> 00:17:02,100
And then debug variable type should not actually need to sort of have

352
00:17:02,100 --> 00:17:05,200
any additional type information in it.

353
00:17:05,200 --> 00:17:05,700
Right.

354
00:17:05,700 --> 00:17:09,099
That debug variable type can just be like that, it was an event,

355
00:17:09,099 --> 00:17:09,800
right?

356
00:17:09,800 --> 00:17:11,400
And that should be sufficient.

357
00:17:11,400 --> 00:17:13,200
So I should be able to get

358
00:17:13,500 --> 00:17:16,300
With doing something like this, right?

359
00:17:16,900 --> 00:17:20,500
And what I can do now is when I add a variable, instead of having to

360
00:17:20,500 --> 00:17:23,300
have all these different kinds of variables that were adding here,

361
00:17:23,900 --> 00:17:27,200
which are not particularly useful to us, where we have to kind of have

362
00:17:27,200 --> 00:17:28,900
all of these different cracking functions.

363
00:17:29,100 --> 00:17:32,400
What I can do instead is say, well, if I want to add a variable, maybe

364
00:17:32,400 --> 00:17:36,700
one of the variable types that I add is just going to be straight up

365
00:17:36,800 --> 00:17:40,700
and event right now, again, this code actually is all code that we can

366
00:17:40,700 --> 00:17:42,900
probably get rid of as well, all of this stuff.

367
00:17:43,300 --> 00:17:47,500
And the sort of those those toggles and stuff.

368
00:17:47,700 --> 00:17:49,800
I feel like probably eventually we're going to want to do in a

369
00:17:49,800 --> 00:17:50,400
slightly different way.

370
00:17:50,400 --> 00:17:53,500
In fact, what I may do for now since we're not really working on this

371
00:17:53,500 --> 00:17:57,100
part of the system, I may just kind of get rid of this code in its

372
00:17:57,100 --> 00:17:58,400
entirety for a moment.

373
00:17:58,400 --> 00:17:59,800
I may say let's just kind of

374
00:18:00,300 --> 00:18:04,700
Let this this this code sort of sleep for a second where I'm going to

375
00:18:04,700 --> 00:18:08,800
kind of like just say yeah the debug variable stuff let's just kind of

376
00:18:09,100 --> 00:18:10,800
let's kind of let that be.

377
00:18:10,800 --> 00:18:11,800
Let's let us do its thing.

378
00:18:11,800 --> 00:18:14,100
In fact, how much of this could I actually remove?

379
00:18:14,200 --> 00:18:16,700
Can I get rid of most of it for the time being?

380
00:18:16,900 --> 00:18:20,200
I don't actually know, but we'll see if we can or not.

381
00:18:20,600 --> 00:18:21,900
Let's see here.

382
00:18:23,000 --> 00:18:28,900
That's going to be in handmade debug dot CPP, route group.

383
00:18:29,700 --> 00:18:30,600
Route.

384
00:18:32,800 --> 00:18:33,300
There it is.

385
00:18:33,700 --> 00:18:36,900
Alright, so I'm just going to say that this stuff doesn't ever blink

386
00:18:36,900 --> 00:18:37,600
or happen.

387
00:18:37,600 --> 00:18:38,700
It's just not going to happen.

388
00:18:38,900 --> 00:18:40,500
It's just not going to happen.

389
00:18:40,900 --> 00:18:41,400
Okay?

390
00:18:41,500 --> 00:18:44,600
Not going to happen, never going to happen, didn't happen, not going

391
00:18:44,600 --> 00:18:45,000
to happen.

392
00:18:45,500 --> 00:18:50,300
So in here where we do all of this stuff, I'm just going to get rid of

393
00:18:50,300 --> 00:18:51,100
all of that.

394
00:18:52,000 --> 00:18:53,700
I just concentrate on the other part of it.

395
00:18:54,100 --> 00:18:57,400
So when we have a debug variable event, write something like that.

396
00:18:57,500 --> 00:19:00,300
What we're going to do now is say that, okay, all of this stuff that

397
00:19:00,300 --> 00:19:03,800
we were doing before where we were printing out all of these

398
00:19:04,000 --> 00:19:05,100
additional items.

399
00:19:05,100 --> 00:19:05,600
Right.

400
00:19:06,000 --> 00:19:09,900
What I want those to be is that sort of a separate thing now, right?

401
00:19:10,000 --> 00:19:11,500
That's going to be a separate thing.

402
00:19:11,600 --> 00:19:15,300
So this is all going to be under debug variable type event.

403
00:19:15,600 --> 00:19:18,900
Where if we see an event, we know that now we're actually going to

404
00:19:18,900 --> 00:19:21,700
look at a secondary value to determine this

405
00:19:21,900 --> 00:19:26,500
Is this is like a whole shared system that doesn't have to go with any

406
00:19:26,500 --> 00:19:30,400
of the other stuff that were, you know, with that we might put in

407
00:19:30,400 --> 00:19:31,400
here, right?

408
00:19:31,500 --> 00:19:33,700
And we may be able to collapse it down even further than that.

409
00:19:33,700 --> 00:19:37,500
But at the moment that's really all I want to focus on for now.

410
00:19:38,700 --> 00:19:39,000
Okay.

411
00:19:39,000 --> 00:19:42,300
So what that means is that all of these types that we were previously

412
00:19:42,300 --> 00:19:46,700
using again have gone away, and we can just use the types that we were

413
00:19:46,700 --> 00:19:50,000
using inside the debug system directly.

414
00:19:50,000 --> 00:19:53,800
So now, they are not duplicated anywhere, they're just going to be

415
00:19:54,400 --> 00:19:57,800
sort of, let's see, here we go.

416
00:19:58,200 --> 00:20:01,300
They're just going to be shared so we can when we change one we

417
00:20:01,300 --> 00:20:05,000
automatically get that change in the other one and there's no need for

418
00:20:05,000 --> 00:20:08,200
you know all we have to do is add the minimum amount of code

419
00:20:08,200 --> 00:20:08,400
necessary.

420
00:20:08,600 --> 00:20:10,200
Ready to support it in the other system.

421
00:20:10,300 --> 00:20:15,200
There's no busy work anymore because I hate doing busy work, right.

422
00:20:15,300 --> 00:20:18,700
I wouldn't be so into Metal Coating if I didn't hate busy work.

423
00:20:18,700 --> 00:20:19,200
Right?

424
00:20:20,000 --> 00:20:23,500
So in the debug event system looks like right now, there's no bull 32

425
00:20:23,600 --> 00:20:24,100
at the moment.

426
00:20:24,100 --> 00:20:27,300
So I'm going to go ahead and add one temporarily even though that it

427
00:20:27,300 --> 00:20:31,100
doesn't actually get used here yet, I assume that it will at some

428
00:20:31,100 --> 00:20:31,800
point.

429
00:20:33,300 --> 00:20:37,800
Okay, so there's our debug event be to, there's our debug event to be

430
00:20:37,800 --> 00:20:38,400
three.

431
00:20:38,600 --> 00:20:40,300
There's our debug event to be 4.

432
00:20:42,900 --> 00:20:46,700
Okay, and then we also probably want to do something we're in here.

433
00:20:46,700 --> 00:20:50,000
We can support the other types that we had.

434
00:20:50,000 --> 00:20:52,500
We have rectangle to, and so rectangle.

435
00:20:52,500 --> 00:20:57,600
2 is just going to be like something like wrecked to, and it's going

436
00:20:57,600 --> 00:20:59,800
to be like that sort of a thing, you know.

437
00:21:00,000 --> 00:21:00,800
Same to you.

438
00:21:01,300 --> 00:21:03,200
So we've got a rectangle, too.

439
00:21:05,300 --> 00:21:08,100
rectangle, 2 Min EX

440
00:21:09,900 --> 00:21:20,000
Rectangle, 2, Min y rectangle, to Max X and rectangle, to Max y.

441
00:21:21,300 --> 00:21:23,000
So that's a rectangle 2.

442
00:21:23,000 --> 00:21:26,800
And the rectangle 3 is going to be the same code, right?

443
00:21:31,600 --> 00:21:32,500
Exactly the same thing.

444
00:21:32,500 --> 00:21:34,400
It just now Prince that one additional element.

445
00:21:37,300 --> 00:21:42,700
Alright, so now we handle all of those and that's nice, but we need to

446
00:21:42,700 --> 00:21:44,200
also get them out of a different place.

447
00:21:44,200 --> 00:21:48,300
So now it's going to get just out of our event, dot, whatever the

448
00:21:48,300 --> 00:21:49,500
thing is, right?

449
00:21:49,900 --> 00:21:55,100
And so, you can kind of see me taking a look here at what's happening.

450
00:21:56,500 --> 00:21:57,100
There we go.

451
00:21:57,100 --> 00:21:58,800
Event event.

452
00:22:00,500 --> 00:22:09,300
Event Event, Event, and Event, Event Event Event.

453
00:22:18,600 --> 00:22:19,200
so,

454
00:22:22,900 --> 00:22:27,700
but I do not know whether that is because this was something that I

455
00:22:27,700 --> 00:22:28,800
was trying to turn off.

456
00:22:31,000 --> 00:22:31,400
All right.

457
00:22:39,600 --> 00:22:40,800
What is happening here?

458
00:22:40,800 --> 00:22:44,100
Introspection is only supported Force trucks right now.

459
00:22:46,800 --> 00:22:47,700
Oh no.

460
00:22:47,700 --> 00:22:48,400
Nice.

461
00:22:48,800 --> 00:22:50,900
Yeah, this is something that we never actually did.

462
00:22:50,900 --> 00:22:54,600
It doesn't actually affect us at all, but this is kind of funny.

463
00:22:54,800 --> 00:22:59,200
We didn't actually write any code to ignore the fact that if we try to

464
00:22:59,200 --> 00:23:05,000
do a file in which the introspect itself occurs, that's probably it's

465
00:23:05,000 --> 00:23:14,400
due to do have the meta parser ignore pound Define, its pound of fine.

466
00:23:16,200 --> 00:23:16,800
so anyway,

467
00:23:19,200 --> 00:23:24,200
At this point, I don't really know what that debug Max variable stock

468
00:23:24,200 --> 00:23:24,600
stuff.

469
00:23:24,600 --> 00:23:28,800
Why that really has to be there anymore, but it does at least for our

470
00:23:28,800 --> 00:23:31,600
traversal, I guess, that's, that's kind of the case.

471
00:23:31,800 --> 00:23:35,600
So, inside the debug variables, I'll just lift that guy continue to be

472
00:23:36,000 --> 00:23:37,300
outside and that'll be fine.

473
00:23:38,100 --> 00:23:42,700
Alright, so in here, when we're doing hot interaction types and we're

474
00:23:42,700 --> 00:23:47,100
working with variables and stuff like that, this stuff is all going to

475
00:23:47,100 --> 00:23:48,000
want to use.

476
00:23:48,300 --> 00:23:49,500
Sort of the other.

477
00:23:56,100 --> 00:23:58,900
Is going to want to use the other information as well, right?

478
00:23:59,400 --> 00:23:59,800
So now,

479
00:24:00,000 --> 00:24:03,000
Theory, what we should be able to do, is some sort of a situation

480
00:24:03,000 --> 00:24:06,500
where we look at, whether we're doing events or what?

481
00:24:06,500 --> 00:24:08,000
Exactly, we're working with.

482
00:24:08,400 --> 00:24:11,200
So, again, this is going to have to be something where we just kind

483
00:24:11,200 --> 00:24:13,700
of, we kind of do a two-tiered look, right?

484
00:24:14,100 --> 00:24:16,300
So if we want to do something like debug variable type,

485
00:24:18,700 --> 00:24:23,100
Event then we can do things where we just take a look at what are the

486
00:24:23,100 --> 00:24:29,300
different things we might, you know, want to look at in that system.

487
00:24:29,500 --> 00:24:31,700
And again, this is just the exact same thing as we're doing before.

488
00:24:31,700 --> 00:24:36,500
It's just allowing us to use that, that guy sort of indirectly, right?

489
00:24:36,600 --> 00:24:40,000
It's allowing us to use a different system for storage.

490
00:24:40,300 --> 00:24:42,800
And again, I'm not saying this is the last one I want to do, I just

491
00:24:42,800 --> 00:24:45,800
want to get it working in a way that it's just kind of included now.

492
00:24:47,100 --> 00:24:52,300
So yeah, so debug event be 32 and debug event are 32 or the to that

493
00:24:52,300 --> 00:24:53,300
existed in here.

494
00:24:53,700 --> 00:24:57,900
Oops, and so that's all we should need.

495
00:24:57,900 --> 00:25:02,200
So if we take a look at this guy here, we should be able to look at

496
00:25:02,200 --> 00:25:05,900
that event type and do the comparison, everything else should stay the

497
00:25:05,900 --> 00:25:06,300
same.

498
00:25:06,300 --> 00:25:08,000
Nothing really interesting happening there.

499
00:25:08,600 --> 00:25:13,200
So in here, this stuff again, we don't have at the moment and the

500
00:25:13,200 --> 00:25:15,300
reason that we don't have that the moment is just because we're sort

501
00:25:15,300 --> 00:25:16,100
of changing up how we're

502
00:25:16,300 --> 00:25:18,400
In those trees and stuff like that.

503
00:25:18,400 --> 00:25:21,000
So we'll get to those again as we continue to clean stuff up.

504
00:25:21,000 --> 00:25:22,000
What kind of move those in?

505
00:25:23,000 --> 00:25:26,900
And so here again with debug and interact, this is the case that

506
00:25:26,900 --> 00:25:31,100
again, we've got sort of a two-tiered thing if we are working with an

507
00:25:31,100 --> 00:25:34,800
event, then maybe we've got something that we want to do in this case.

508
00:25:36,300 --> 00:25:40,500
There we go of our event type, we just want to do something with that

509
00:25:40,500 --> 00:25:40,900
pool.

510
00:25:42,600 --> 00:25:45,500
Okay, so that's fine.

511
00:25:46,300 --> 00:25:48,700
Nothing, particularly odd going on there.

512
00:25:49,200 --> 00:25:53,800
That's just again, this debug event, B, 32 thing and then let's keep

513
00:25:53,800 --> 00:25:54,500
moving down.

514
00:25:54,800 --> 00:25:56,600
So, oops, that's that's not an arrow.

515
00:25:56,600 --> 00:25:57,400
That's a DOT.

516
00:25:59,800 --> 00:26:03,900
Okay, so in this case, we're just going to set the pool.

517
00:26:04,000 --> 00:26:07,400
This is actually editing that pool and again, we're just using the

518
00:26:07,400 --> 00:26:08,300
exact same logic.

519
00:26:08,300 --> 00:26:09,700
Everything is exactly the same.

520
00:26:11,400 --> 00:26:13,000
I don't know why I decided to name those.

521
00:26:13,200 --> 00:26:14,300
I named this kind of weirdly.

522
00:26:14,300 --> 00:26:15,100
I don't love it.

523
00:26:15,400 --> 00:26:17,500
I should probably change the way that I'm doing that.

524
00:26:17,500 --> 00:26:20,400
That's my suspicions, but what you going to do

525
00:26:22,500 --> 00:26:29,700
Anyway, so yeah, again, like just doing the bare minimum cure to

526
00:26:29,700 --> 00:26:33,400
translate this code so that things are starting to line up a little

527
00:26:33,400 --> 00:26:34,700
bit better, right?

528
00:26:43,800 --> 00:26:44,600
so,

529
00:26:48,300 --> 00:26:49,800
let's see where we're at.

530
00:26:50,900 --> 00:26:54,600
So, in this case, now, all of this stuff, all of this code here, that

531
00:26:54,600 --> 00:26:58,100
was doing this translation before, all of this code should actually,

532
00:26:58,100 --> 00:26:59,800
now not have to do anything.

533
00:27:00,000 --> 00:27:01,500
All in theory, right?

534
00:27:02,000 --> 00:27:06,800
So all of this code is if if anything came through, if any kind of

535
00:27:06,800 --> 00:27:11,000
debug event comes through it, all right, if any, if we see any kind of

536
00:27:11,000 --> 00:27:15,400
debug event, then, all we really need to do is just capture it, right?

537
00:27:15,400 --> 00:27:17,800
We just need to capture this data block, right?

538
00:27:17,800 --> 00:27:20,900
And in fact, I think what we probably want to do is say, you know what

539
00:27:20,900 --> 00:27:23,700
just it doesn't matter what since we don't have to do any different

540
00:27:23,700 --> 00:27:24,100
code.

541
00:27:24,100 --> 00:27:28,200
Now it actually doesn't matter any event that we don't understand, we

542
00:27:28,200 --> 00:27:29,900
just save as data and assume that

543
00:27:30,000 --> 00:27:32,400
Someone will try to print it out later and if they can't print it out

544
00:27:32,400 --> 00:27:34,400
then we'll just come as a little just come through as like I don't

545
00:27:34,400 --> 00:27:35,200
understand this thing.

546
00:27:37,800 --> 00:27:40,900
so, now, all we have to do is say, okay, we're going to make an event

547
00:27:42,300 --> 00:27:45,300
And the event equals event, we got so all that code is gone now and

548
00:27:45,300 --> 00:27:47,400
it's just a straight-up pass through right.

549
00:27:47,400 --> 00:27:51,700
It just comes straight on through except I need to dereference it.

550
00:27:51,700 --> 00:27:52,200
There we go.

551
00:27:53,600 --> 00:27:57,100
So all that code and all of that nonsense went away and so that's

552
00:27:57,100 --> 00:27:57,900
pretty handy.

553
00:27:59,100 --> 00:28:02,200
I don't know what happened here.

554
00:28:02,400 --> 00:28:07,700
Did we this probably never initialized our tree stuff when I came out

555
00:28:07,700 --> 00:28:09,200
to.

556
00:28:11,100 --> 00:28:12,800
Where are you?

557
00:28:12,800 --> 00:28:15,400
Because there is no debug tree here anymore.

558
00:28:15,400 --> 00:28:20,100
I got rid of all of our stuff, which admittedly is not something you

559
00:28:20,100 --> 00:28:22,600
can necessarily do directly, although I

560
00:28:23,200 --> 00:28:26,800
I want to be able to make sure that is allowed for now, so I'll make

561
00:28:26,800 --> 00:28:28,000
sure that, that's okay.

562
00:28:28,800 --> 00:28:32,800
Yes, you can see that in this case, group can't really be 0 here.

563
00:28:32,800 --> 00:28:35,500
So I'll just go ahead and make sure that that's allowed.

564
00:28:36,700 --> 00:28:43,200
We'll just say, if group, and we will go ahead and push that out.

565
00:28:44,400 --> 00:28:44,700
Yeah.

566
00:28:46,200 --> 00:28:48,900
Yep, all right.

567
00:28:53,100 --> 00:28:55,700
Oops, don't want to break point.

568
00:28:57,100 --> 00:29:01,300
So now we're again running everything through just one type of struck.

569
00:29:01,300 --> 00:29:05,600
Now to encapsulate debug data which again is a nice little collapse.

570
00:29:05,800 --> 00:29:09,300
I'm that I'm very happy about I like the fact that we did that.

571
00:29:14,100 --> 00:29:16,200
And that's all well and good.

572
00:29:16,300 --> 00:29:20,400
So let's continue onward from there and see what we can do, right?

573
00:29:20,700 --> 00:29:25,800
So now inside handmade debug our sorry, handmade platform.sh, right?

574
00:29:26,000 --> 00:29:29,500
This is now the canonical way that things are actually stored inside

575
00:29:29,500 --> 00:29:31,100
the debug system in general.

576
00:29:31,100 --> 00:29:31,500
Right?

577
00:29:31,500 --> 00:29:34,500
Meaning we're actually just this is the place that that we would add

578
00:29:34,500 --> 00:29:37,400
new values if you want to do values and these are the values that it

579
00:29:37,400 --> 00:29:38,800
stores inside itself.

580
00:29:40,000 --> 00:29:41,600
How's it goes, right?

581
00:29:42,100 --> 00:29:44,200
And that, that all just feels much better to me.

582
00:29:44,800 --> 00:29:45,800
So, that's a good thing.

583
00:29:46,900 --> 00:29:50,200
And so the question now though is, we kind of have this two-tiered

584
00:29:50,200 --> 00:29:55,000
thing happening inside this where we've got, you know, this sort of

585
00:29:55,000 --> 00:29:57,400
debug variable type thing happening.

586
00:29:58,100 --> 00:29:59,800
And we've got, you know, one,

587
00:30:00,100 --> 00:30:03,800
That it breaks out in here and then we've got these other ones in it.

588
00:30:04,000 --> 00:30:07,100
And so the next question that I would have that's kind of a relatively

589
00:30:07,100 --> 00:30:11,500
obvious question is since these are just debug since since there's no

590
00:30:11,500 --> 00:30:17,600
like I mean there there's really no reason for us to have a two-tiered

591
00:30:17,800 --> 00:30:21,500
test thing there where we're actually sort of swapping those out.

592
00:30:21,500 --> 00:30:26,600
We could choose to simplify things even further just by merging these

593
00:30:26,600 --> 00:30:29,500
two enumerated types together, right?

594
00:30:30,000 --> 00:30:32,400
That's something we certainly could do if we want to.

595
00:30:32,600 --> 00:30:35,500
Because remember, this one is only an 8-bit thing.

596
00:30:35,900 --> 00:30:41,200
So we could just Jam this all of these guys into this type itself and

597
00:30:41,200 --> 00:30:43,600
just have them all just work that way, right?

598
00:30:47,400 --> 00:30:51,400
So we could do something like the lower 255.

599
00:30:51,400 --> 00:30:54,700
Entries are reserved for the ones that actually go in here.

600
00:30:56,700 --> 00:31:00,500
And then all of the other things that happen like this counter thread

601
00:31:00,500 --> 00:31:04,600
list and all that stuff just exist higher, right?

602
00:31:04,600 --> 00:31:09,200
So they would be something like this debug event, you know, first

603
00:31:10,400 --> 00:31:14,400
first, you I type or something like that.

604
00:31:15,500 --> 00:31:18,700
And we could even call this just debug type instead of event type to

605
00:31:18,700 --> 00:31:19,700
signify that.

606
00:31:19,700 --> 00:31:23,300
But we could do something here, we just say, okay, we started to 56

607
00:31:23,300 --> 00:31:24,500
and we go up from there.

608
00:31:25,100 --> 00:31:25,700
And then these guys,

609
00:31:25,900 --> 00:31:28,000
We're just going to live in here, right?

610
00:31:28,000 --> 00:31:29,700
As part of this, right?

611
00:31:30,000 --> 00:31:31,200
That's something we could do.

612
00:31:31,200 --> 00:31:34,400
And that would get us out of the business of having sort of this

613
00:31:34,400 --> 00:31:42,200
other, you know, this other sort of, you know, pre-existing value.

614
00:31:47,300 --> 00:31:47,800
All right.

615
00:31:50,000 --> 00:31:54,000
So I don't really know whether I care about that too much or not, but

616
00:31:54,000 --> 00:31:57,000
it just seems to me like overly complicated to have two types there

617
00:31:57,000 --> 00:31:57,800
for no reason.

618
00:31:58,000 --> 00:32:00,500
So it seems like maybe I want to collapse that down a little further.

619
00:32:00,500 --> 00:32:02,900
So I'm going to try doing that and I'm going to see what happens.

620
00:32:03,300 --> 00:32:06,800
And what I'll do here is I'll just say like I'll have a single debug

621
00:32:06,800 --> 00:32:12,400
type kind of a concept and I'm going to just, you know, do it like

622
00:32:12,400 --> 00:32:12,900
this.

623
00:32:14,100 --> 00:32:16,400
okay, so the first thing I'm going to do

624
00:32:18,300 --> 00:32:21,600
Is I'm going to call these debug types and then I'm going to change

625
00:32:21,600 --> 00:32:26,700
anywhere that was using them before to use something else, right?

626
00:32:26,900 --> 00:32:28,700
So we've got this set up the way it is.

627
00:32:29,700 --> 00:32:30,700
Do it like this?

628
00:32:31,500 --> 00:32:35,800
Yeah, so I'm going to go through and say, okay, debug event type

629
00:32:35,800 --> 00:32:39,900
equals debug type and I'm just going to see where those sorts of

630
00:32:39,900 --> 00:32:40,700
things occur.

631
00:32:40,800 --> 00:32:41,500
So let's see.

632
00:32:41,500 --> 00:32:44,200
Frame marker was it's debug event, okay?

633
00:32:44,200 --> 00:32:47,900
So debug event underscore equals debug type underscore

634
00:32:48,500 --> 00:32:50,700
And then I'm just going to go ahead and get rid of all these things so

635
00:32:50,700 --> 00:32:55,300
that they're all just talking about debug type and then I'll recompile

636
00:32:55,500 --> 00:32:58,600
then in here I'll just do the exact same thing.

637
00:32:59,000 --> 00:32:59,800
So B's all

638
00:33:00,000 --> 00:33:02,000
Debug types as well, right?

639
00:33:03,400 --> 00:33:04,000
There we go.

640
00:33:06,700 --> 00:33:11,800
Okay, and then inside handmade debug, if we go down and look at debug

641
00:33:11,800 --> 00:33:12,600
variables,

642
00:33:14,500 --> 00:33:15,100
Right?

643
00:33:15,800 --> 00:33:19,500
So if we look at how this works now and we put an event in there, we

644
00:33:19,500 --> 00:33:22,600
have a debug variable type of the top.

645
00:33:22,700 --> 00:33:26,000
I could just change that to being a debug type itself.

646
00:33:26,000 --> 00:33:30,900
And now that would just be, you know, would be used directly.

647
00:33:31,200 --> 00:33:34,400
And so, what that would mean is that when we add one of these things,

648
00:33:34,700 --> 00:33:38,600
when we add the type here, we would just add whatever the events type

649
00:33:38,600 --> 00:33:39,700
is like so.

650
00:33:40,100 --> 00:33:43,500
And now we wouldn't really have to use that secondary switch method.

651
00:33:43,700 --> 00:33:47,300
Anymore, we could just switch directly on the type and know that

652
00:33:47,300 --> 00:33:51,700
they're all kind of stuffed up in there specifically, right?

653
00:33:52,000 --> 00:33:55,700
So I'm going to go ahead and do that as well just to see what sort of

654
00:33:55,900 --> 00:33:57,700
What Becomes of it.

655
00:33:58,400 --> 00:33:59,400
So here we go.

656
00:34:02,400 --> 00:34:06,300
This is going to be a, oops.

657
00:34:09,600 --> 00:34:13,400
Not that not that I say.

658
00:34:17,800 --> 00:34:23,300
And not that either we go into handmade 20th and also get rid of debug

659
00:34:23,300 --> 00:34:30,100
variable type because this should go away and this is one of those

660
00:34:30,100 --> 00:34:30,600
now.

661
00:34:33,300 --> 00:34:33,800
There we go.

662
00:34:36,400 --> 00:34:40,800
Okay, so now when we're doing these sort of these switch statements

663
00:34:40,800 --> 00:34:44,800
here, these can just now be promoted back up to the top.

664
00:34:45,100 --> 00:34:47,500
Like I said, which is kind of what I want to do so you can kind of see

665
00:34:47,500 --> 00:34:50,300
them all happening together and that's all very well and good.

666
00:34:51,300 --> 00:34:54,800
And you don't have to actually sort of do step Downs to sort of crack

667
00:34:54,800 --> 00:34:58,000
those types out as a separate thing, right?

668
00:34:58,800 --> 00:35:02,500
And similarly it, through all of this debug variable type underscores

669
00:35:02,500 --> 00:35:03,700
is going to be debug type.

670
00:35:03,800 --> 00:35:04,300
Oops,

671
00:35:05,300 --> 00:35:07,800
You got variable, type underscore.

672
00:35:07,800 --> 00:35:09,600
R equals debug type underscore.

673
00:35:09,600 --> 00:35:12,200
There we go, just replace those

674
00:35:14,800 --> 00:35:19,400
Okay, and now debug type event anywhere that we saw that, we can just

675
00:35:19,400 --> 00:35:23,200
re promote these guys up to the top level where they were before, and

676
00:35:23,200 --> 00:35:26,600
we know that that will be fine now, right?

677
00:35:32,400 --> 00:35:35,100
And so that gets us out of the business of having to do double switch

678
00:35:35,100 --> 00:35:35,600
statement.

679
00:35:35,600 --> 00:35:38,700
The the sort of cracking of the double switch stations there.

680
00:35:39,700 --> 00:35:41,600
This is a debug type now.

681
00:35:42,300 --> 00:35:47,600
Okay, and that should take care of that, right?

682
00:35:48,000 --> 00:35:49,300
So now I think we're all good.

683
00:35:49,300 --> 00:35:54,700
Everything should still be working as we expect it to and that's good.

684
00:35:55,200 --> 00:35:57,800
So we're getting, you know, we're sort of making slow, but sure

685
00:35:57,800 --> 00:35:59,800
progress towards something that's a little bit.

686
00:36:00,000 --> 00:36:03,300
Or, you know, coherent and a little bit more thought through.

687
00:36:05,800 --> 00:36:06,400
All right.

688
00:36:08,700 --> 00:36:09,700
So that's all nice.

689
00:36:10,200 --> 00:36:12,800
And I think this is starting to look a lot nicer now, because now we

690
00:36:12,800 --> 00:36:15,700
just have that in our handmade debug is starting to simplify right.

691
00:36:16,000 --> 00:36:18,800
We don't have sort of this this whole other situation here with all

692
00:36:18,800 --> 00:36:20,300
these different sorts of things.

693
00:36:21,700 --> 00:36:24,200
But we still got a lot of business in here.

694
00:36:24,400 --> 00:36:26,900
There's a lot of things going on, a lot of moving parts and it's not

695
00:36:26,900 --> 00:36:29,600
necessarily clear that all of them are doing what they should be doing

696
00:36:29,600 --> 00:36:30,900
or that they're actually necessary.

697
00:36:31,900 --> 00:36:35,500
So now let's take a look at something a little bit more direct.

698
00:36:35,500 --> 00:36:36,200
So, okay.

699
00:36:37,400 --> 00:36:40,700
Now if we start to take a look at what is an actual debug variable, or

700
00:36:40,700 --> 00:36:44,200
debug variable, is the thing with a type, it's just, it's got a name,

701
00:36:44,500 --> 00:36:45,000
right?

702
00:36:45,300 --> 00:36:48,400
So it's a type in a name and then we know that it could be a debug

703
00:36:48,400 --> 00:36:48,900
event.

704
00:36:49,700 --> 00:36:52,800
So that could be there or it could be one of these things.

705
00:36:52,800 --> 00:36:54,700
So what is a debug profile settings will debunk?

706
00:36:54,700 --> 00:36:56,300
Profile settings is actually meaningless.

707
00:36:56,500 --> 00:36:58,600
You have a profile settings actually doesn't exist anymore, and the

708
00:36:58,600 --> 00:37:01,100
reason don't exist anymore is because we moved the concept of things

709
00:37:01,100 --> 00:37:04,600
like, settings out to stuff like the debug view, right?

710
00:37:04,800 --> 00:37:05,600
So that's gone.

711
00:37:05,600 --> 00:37:08,500
Now, that doesn't actually need to be there the code compiles fine.

712
00:37:08,500 --> 00:37:11,800
Without it, a debug bitmap display is just a bitmap ID.

713
00:37:12,200 --> 00:37:15,500
Now, if we wanted to display a bitmap ID, now what we can do is we can

714
00:37:15,500 --> 00:37:19,300
just go ahead and move that bitmap ID directly out of

715
00:37:19,500 --> 00:37:20,700
This right.

716
00:37:25,500 --> 00:37:27,500
And into the debug system, right?

717
00:37:27,700 --> 00:37:30,200
So the debug you know, the bitmap IDS.

718
00:37:30,200 --> 00:37:33,500
Those can now come directly through here.

719
00:37:33,500 --> 00:37:36,200
So you know something like a bitmap ID can be in here.

720
00:37:37,300 --> 00:37:38,900
Or a sound ID could be in here.

721
00:37:39,400 --> 00:37:42,400
So we could see those when we're in the code, we could just output

722
00:37:42,400 --> 00:37:46,100
something like a bitmap ID and then we would just know that we have

723
00:37:46,100 --> 00:37:48,700
one of those things that we want to display, right?

724
00:37:48,900 --> 00:37:53,600
So instead of needing to have this, this could be in the event itself,

725
00:37:53,900 --> 00:37:54,600
right?

726
00:37:54,800 --> 00:37:58,600
So I again, I'm going to go ahead and and try to make that change as

727
00:37:58,600 --> 00:37:59,000
well.

728
00:37:59,200 --> 00:38:02,500
Okay, so I'm going to get rid of debug bitmaps play like so.

729
00:38:04,600 --> 00:38:05,800
And then I'm going to compile this.

730
00:38:06,500 --> 00:38:09,800
All right, so first thing we need to do is actually get those type

731
00:38:09,800 --> 00:38:14,300
definitions in here, which again, is requires this kind of to move

732
00:38:14,300 --> 00:38:15,100
things in a little bit.

733
00:38:15,100 --> 00:38:17,300
But, you know, like I said, I'm okay with that.

734
00:38:17,300 --> 00:38:18,200
It's fine with me.

735
00:38:18,200 --> 00:38:20,900
I don't care that those get moved out to the platform layer because it

736
00:38:20,900 --> 00:38:23,900
doesn't really harm the platform layer to have those in there.

737
00:38:24,300 --> 00:38:26,000
So I think that's in the file formats thing.

738
00:38:26,000 --> 00:38:27,000
I don't actually remember.

739
00:38:27,500 --> 00:38:28,200
Yes it is.

740
00:38:28,600 --> 00:38:32,300
So there is our different IDs bitmap sound that sort of stuff, right?

741
00:38:32,900 --> 00:38:33,600
All of those things.

742
00:38:33,700 --> 00:38:34,800
Those are now going to come in here.

743
00:38:34,800 --> 00:38:39,700
So those are just little based rapper types and the pragma push on

744
00:38:39,700 --> 00:38:43,300
these guys kind of needs to be respected, right?

745
00:38:43,700 --> 00:38:48,100
So I would like to keep my pragma push, I'd like to continue pragma

746
00:38:48,100 --> 00:38:49,500
push in that.

747
00:38:50,200 --> 00:38:52,300
So I will do pragma push here.

748
00:38:53,800 --> 00:38:55,100
And pragma.

749
00:38:55,100 --> 00:38:55,900
So, there we go.

750
00:38:56,300 --> 00:38:59,300
That's again, just the packing that we want those things pack now,

751
00:38:59,300 --> 00:38:59,800
granted.

752
00:39:00,000 --> 00:39:03,000
We don't really need to do pragma pack on those because I think they

753
00:39:03,000 --> 00:39:04,500
only have one variable, so I don't know.

754
00:39:04,500 --> 00:39:08,000
That that actually makes any sense, it's probably worthless, but it's

755
00:39:08,000 --> 00:39:09,500
interesting to just leave it there.

756
00:39:09,500 --> 00:39:12,400
So people know, those are things that have to be remain the same

757
00:39:12,700 --> 00:39:15,200
because they go in and out of files, but you know, whatever.

758
00:39:15,800 --> 00:39:16,400
So anyway,

759
00:39:18,700 --> 00:39:23,300
Here we are with our get bitmap code so now this stuff doesn't exist

760
00:39:23,300 --> 00:39:23,800
anymore.

761
00:39:24,000 --> 00:39:27,100
So we would have to do something like this, right?

762
00:39:27,800 --> 00:39:30,900
And we probably also want to change this to a bitmap ID as the

763
00:39:30,900 --> 00:39:33,300
fundamental type of the thing as well.

764
00:39:33,500 --> 00:39:36,900
Now if I recompile it we should be at a place where that actually just

765
00:39:36,900 --> 00:39:39,900
works relatively straight through, right?

766
00:39:39,900 --> 00:39:47,100
And so if I go through here now and do bitmap, display bitmap display

767
00:39:47,100 --> 00:39:47,600
is now

768
00:39:48,100 --> 00:39:49,300
I d, right?

769
00:39:49,300 --> 00:39:51,700
Like so and then I've got stuff like okay?

770
00:39:51,700 --> 00:39:53,800
There's a sound ID and a font ID as well.

771
00:39:53,800 --> 00:39:54,300
Right.

772
00:39:54,300 --> 00:39:57,300
And then down here where we push those things on like through this

773
00:39:57,300 --> 00:39:58,100
sort of system.

774
00:39:58,600 --> 00:40:03,200
What I can do is I can add those here where I've got bitmap ID is one

775
00:40:03,200 --> 00:40:07,500
of the things I can do and I've got bitmap ID is one of the things I

776
00:40:07,500 --> 00:40:12,700
can set, hopefully this is really obvious the way that I'm doing this

777
00:40:13,200 --> 00:40:17,100
and it all makes good sense to you but if not well, that's what the

778
00:40:17,100 --> 00:40:17,800
Q&A is.

779
00:40:17,900 --> 00:40:23,100
For, Okay, so we've got all of that set squared away and now I just

780
00:40:23,100 --> 00:40:29,300
need to add that in here since I didn't actually put it in there and

781
00:40:29,300 --> 00:40:30,300
now I just have to take a look.

782
00:40:30,300 --> 00:40:30,700
Okay?

783
00:40:30,900 --> 00:40:32,700
So whether things should be written this.

784
00:40:32,700 --> 00:40:34,600
Debug should be written thing is going to go away.

785
00:40:34,600 --> 00:40:36,900
That's I mean I can tell you right now that stuff's going away.

786
00:40:38,000 --> 00:40:39,000
So let's take a look here.

787
00:40:39,000 --> 00:40:39,900
What we've got?

788
00:40:40,700 --> 00:40:44,900
Let's go there, bitmap display.

789
00:40:45,600 --> 00:40:46,300
What is this?

790
00:40:46,300 --> 00:40:47,800
This is from our printing this out.

791
00:40:48,300 --> 00:40:51,100
So the bitmap display that idea stuff is really just going to be event

792
00:40:51,200 --> 00:40:52,900
bitmap ID, right?

793
00:40:54,300 --> 00:40:54,900
And there we go.

794
00:40:54,900 --> 00:40:58,500
So now when we actually run this stuff although we can't really

795
00:40:58,500 --> 00:41:01,100
interact with these it because we haven't solved a few of the problems

796
00:41:01,100 --> 00:41:05,800
in terms of permanence what I'd like to do is now actually just output

797
00:41:06,200 --> 00:41:06,900
the debug.

798
00:41:06,900 --> 00:41:10,700
I doubt like the output a bitmap to our debug ID to our debugging

799
00:41:10,700 --> 00:41:11,500
system, right?

800
00:41:11,600 --> 00:41:14,200
So the same way that we were outputting things like energy storage

801
00:41:14,200 --> 00:41:15,400
index and stuff like that here.

802
00:41:15,500 --> 00:41:19,300
I just going to find like I've got these like you know, bitmaps here

803
00:41:19,300 --> 00:41:23,700
and stuff like that, that I could choose to Output so somewhere.

804
00:41:23,900 --> 00:41:27,400
Where I've got a bitmap ID, what would be a bitmap idea that we could

805
00:41:27,400 --> 00:41:27,900
output?

806
00:41:28,100 --> 00:41:32,800
For example, we've got a bunch of them here, I think let's see, we

807
00:41:32,800 --> 00:41:39,800
have loaded bitmap test if you slowed it bitmap but I'll loaded bit

808
00:41:39,900 --> 00:41:40,700
map.

809
00:41:42,600 --> 00:41:43,800
Bitmap.

810
00:41:43,800 --> 00:41:45,700
Yeah, do we have anymore?

811
00:41:45,800 --> 00:41:46,300
Well you know what?

812
00:41:46,300 --> 00:41:48,400
I'll just do something like this.

813
00:41:48,800 --> 00:41:52,500
Where I've got sort of the hero this hero stuff here.

814
00:41:52,500 --> 00:41:54,500
Do we still have the hero bitmaps thing?

815
00:41:56,100 --> 00:41:58,200
By the time we're actually outputting this guy.

816
00:41:58,500 --> 00:41:59,600
I don't know that we do.

817
00:42:00,100 --> 00:42:01,700
So we've got the hot anything.

818
00:42:01,900 --> 00:42:02,000
Yeah.

819
00:42:02,000 --> 00:42:03,800
We don't we don't really have.

820
00:42:03,800 --> 00:42:07,900
I don't think any bitmaps for this guy, but I'll see you just in case

821
00:42:07,900 --> 00:42:08,600
maybe we do.

822
00:42:09,200 --> 00:42:12,200
So if we do, I could do something like this where I say, like just

823
00:42:12,200 --> 00:42:15,100
output here a bit Maps like that torso or something.

824
00:42:15,100 --> 00:42:16,100
Oops, that torso.

825
00:42:18,900 --> 00:42:19,800
Okay, so we can.

826
00:42:20,400 --> 00:42:24,200
So now there should be a thing where we're like outputting the and you

827
00:42:24,200 --> 00:42:25,100
can see it right here.

828
00:42:25,100 --> 00:42:27,400
Like there it is we just can't interact with them yet.

829
00:42:27,500 --> 00:42:28,200
Oh, I guess we can.

830
00:42:28,200 --> 00:42:29,100
It's just until it go it.

831
00:42:29,100 --> 00:42:31,200
Till it gets deleted is the problem right?

832
00:42:31,400 --> 00:42:32,200
But there it is.

833
00:42:32,300 --> 00:42:32,700
Right.

834
00:42:32,700 --> 00:42:35,100
So now we're actually outputting bitmap display is directly.

835
00:42:35,300 --> 00:42:37,600
Unfortunately I said we have some interaction stuff we selling to do

836
00:42:37,600 --> 00:42:42,900
and that's just that just has to do with properly storing information

837
00:42:42,900 --> 00:42:44,700
about about who, exactly?

838
00:42:45,200 --> 00:42:48,200
We're interacting with again pushing that on the stack, I kind of

839
00:42:48,200 --> 00:42:48,500
know.

840
00:42:49,200 --> 00:42:52,600
I saw as we went through all this code, it all started assembling

841
00:42:52,600 --> 00:42:53,400
itself in my head.

842
00:42:53,400 --> 00:42:56,200
So I kind of know everything should work now and I'm just trying to

843
00:42:56,200 --> 00:42:59,100
kind of go through them and explain each individual step as we go.

844
00:42:59,800 --> 00:43:01,700
Alright, so now we've got in a row.

845
00:43:02,400 --> 00:43:07,700
We have gotten rid of a whole bunch of stuff there.

846
00:43:08,600 --> 00:43:12,800
Because now if you look at what we're actually doing, you can see that

847
00:43:12,800 --> 00:43:16,700
that debug variable class is basically going away, right?

848
00:43:16,700 --> 00:43:17,300
You can see that.

849
00:43:17,300 --> 00:43:18,800
It's winnowing itself down.

850
00:43:19,000 --> 00:43:23,500
It's like smaller and smaller and smaller, and remember name is now

851
00:43:23,500 --> 00:43:25,600
almost entirely like this.

852
00:43:25,600 --> 00:43:28,800
These two things, both exist in the event itself.

853
00:43:28,800 --> 00:43:32,700
So the only difference between a debug variable now, right?

854
00:43:32,700 --> 00:43:34,800
The only difference between a debug variable

855
00:43:40,000 --> 00:43:44,900
and a debug event is the fact that a debug variable can store sort of

856
00:43:44,900 --> 00:43:46,400
like a group inside it.

857
00:43:46,800 --> 00:43:47,300
Right.

858
00:43:47,300 --> 00:43:50,700
It can say that well in a, you know, here are some data that I'm

859
00:43:50,700 --> 00:43:51,300
displaying.

860
00:43:51,300 --> 00:43:55,200
That's one thing I could say, or I could say here is like a group, but

861
00:43:55,500 --> 00:43:59,000
remember we've got these debugged variable links, right?

862
00:43:59,500 --> 00:44:05,000
So, what we could do is instead of doing the debug variable thing, as

863
00:44:05,700 --> 00:44:08,600
something where you points to a variable, in the variable, has the

864
00:44:08,600 --> 00:44:09,100
group in it,

865
00:44:09,900 --> 00:44:15,400
We could choose to elevate that concept up one level, right where, the

866
00:44:15,400 --> 00:44:19,200
debug variable link itself is actually the thing that stores the

867
00:44:19,200 --> 00:44:22,300
grouping on top of it, right?

868
00:44:22,700 --> 00:44:25,300
That's, that's where I think this is going.

869
00:44:27,500 --> 00:44:31,200
Then the concept of a debug variable goes away entirely, it doesn't

870
00:44:31,200 --> 00:44:32,000
exist anymore.

871
00:44:33,000 --> 00:44:34,100
So I want to look at that.

872
00:44:34,100 --> 00:44:35,700
I want to look at that as a possibility.

873
00:44:35,700 --> 00:44:39,400
And the thing that I want to look at for that possibility, is just to

874
00:44:39,400 --> 00:44:43,200
think about, is there anything that that does that, we are worried

875
00:44:43,200 --> 00:44:47,300
about it doing specifically, like when we want to maybe do, like, drag

876
00:44:47,300 --> 00:44:48,200
off cloning of stuff.

877
00:44:48,200 --> 00:44:49,300
And I don't think so.

878
00:44:49,300 --> 00:44:53,600
Because I tend to not really want to drag off clones in ways that

879
00:44:53,600 --> 00:44:58,100
aren't going to be at least somewhat more flexible there.

880
00:44:58,100 --> 00:44:59,800
So I feel like deep copying is

881
00:45:00,000 --> 00:45:03,300
Okay, on the other hand I just don't know.

882
00:45:03,300 --> 00:45:09,800
I mean I it's always hard to tell whether you're going to be up

883
00:45:10,100 --> 00:45:12,200
whether that's going to be a bad thing.

884
00:45:12,200 --> 00:45:14,900
At the end of the day, I'm not sure right.

885
00:45:15,600 --> 00:45:19,800
But what we can do at the very least even if we can't do that.

886
00:45:19,800 --> 00:45:23,100
And I guess I like I said I'm just not sure, I'm not 100% sure which

887
00:45:23,100 --> 00:45:24,000
way I want that to go.

888
00:45:25,800 --> 00:45:29,500
Even if we couldn't do that, we could decide to just put the debug

889
00:45:29,500 --> 00:45:33,000
variable link directly into our debug event and collapse them.

890
00:45:33,000 --> 00:45:33,500
Right?

891
00:45:33,500 --> 00:45:38,100
Because this thing already is like for 32-bit values long it could

892
00:45:38,100 --> 00:45:40,900
trivially support one of these things.

893
00:45:42,400 --> 00:45:45,600
Right in line with itself, right?

894
00:45:45,800 --> 00:45:51,000
So of our group could literally just be this thing right here, right?

895
00:45:53,900 --> 00:45:54,900
Hopefully, that makes sense.

896
00:45:55,700 --> 00:45:57,100
Hopefully that makes some sense.

897
00:45:57,400 --> 00:45:58,400
Maybe it does.

898
00:45:58,500 --> 00:46:04,000
Maybe, it doesn't, you know, who's to say at the end of the day, but

899
00:46:04,000 --> 00:46:04,600
there you go.

900
00:46:05,000 --> 00:46:08,400
All right, so if we wanted to collapse this, just a little bit

901
00:46:08,400 --> 00:46:10,200
further, that's the thing that we're looking at.

902
00:46:10,200 --> 00:46:11,500
How do we actually get there?

903
00:46:12,000 --> 00:46:13,600
And the other question, too, is

904
00:46:18,000 --> 00:46:22,600
Does it pose too much of a problem that something like the name is?

905
00:46:22,600 --> 00:46:25,400
Now something that has to get kind of looked up dynamically, right?

906
00:46:25,400 --> 00:46:27,000
Because remember, this doesn't have the name in it.

907
00:46:27,000 --> 00:46:29,700
It just has a debug record index that you can use to get the name,

908
00:46:29,900 --> 00:46:30,500
right?

909
00:46:30,800 --> 00:46:33,500
So it has the way of going out to figure out what the name for the

910
00:46:33,500 --> 00:46:36,400
thing actually was but doesn't actually have a name as a direct

911
00:46:36,400 --> 00:46:36,900
pointer.

912
00:46:37,300 --> 00:46:39,500
So there is a little bit of that, although I don't know how

913
00:46:39,500 --> 00:46:42,400
realistically how much of a problem that would ever posed to us?

914
00:46:42,900 --> 00:46:44,900
It's just something that's worth noting, right?

915
00:46:46,700 --> 00:46:47,100
Okay.

916
00:46:47,600 --> 00:46:54,000
So let's do let's do traffic of which Step I want to take next and I'm

917
00:46:54,000 --> 00:46:57,900
not 100% certain, which one I want it to be.

918
00:46:58,200 --> 00:47:02,100
I think what I would like to do is I think I would like to maybe just

919
00:47:02,100 --> 00:47:05,100
try to do that last compression on this guy and then tomorrow because

920
00:47:05,100 --> 00:47:08,500
we got about 13 minutes left on the stream tomorrow.

921
00:47:08,500 --> 00:47:12,200
I'll go through and maybe take a look at some more.

922
00:47:15,100 --> 00:47:17,000
Some more, like some different parts of that.

923
00:47:17,500 --> 00:47:21,000
All right, so being here, the way that we're dealing with debug

924
00:47:21,000 --> 00:47:23,300
variable links, I guess really.

925
00:47:24,700 --> 00:47:26,800
Let's see how we're doing our.

926
00:47:26,900 --> 00:47:30,500
Let's just take a quick look at how we're doing our like, our draw,

927
00:47:30,500 --> 00:47:33,600
like our, you know, our iteration, where we Loop over things here.

928
00:47:33,600 --> 00:47:38,400
Is that sort of Step where if we get to have our group, which is like

929
00:47:38,400 --> 00:47:38,900
here,

930
00:47:41,500 --> 00:47:44,000
Then we kind of do a little depth push.

931
00:47:44,000 --> 00:47:48,900
So we push the depth there so I'm assuming that if we wanted to we

932
00:47:48,900 --> 00:47:54,900
could pretty trivially have the variable have the variable link

933
00:47:54,900 --> 00:47:55,500
itself.

934
00:47:55,500 --> 00:47:59,400
Be the thing that gets us to that because here is the link, right?

935
00:47:59,600 --> 00:47:59,800
So

936
00:48:00,000 --> 00:48:03,100
Could do something like, okay, there's debug variable VAR and it's

937
00:48:03,100 --> 00:48:09,000
also got like, debug variable link like children or something like

938
00:48:09,000 --> 00:48:09,900
that, right?

939
00:48:09,900 --> 00:48:12,900
So it could have sort of that notion that there's some stuff

940
00:48:12,900 --> 00:48:17,500
underneath, this particular, dude, whoever he is, right.

941
00:48:17,800 --> 00:48:19,700
And then that information is just

942
00:48:20,700 --> 00:48:21,900
Is just purely.

943
00:48:22,800 --> 00:48:26,800
It's just a purely thing that exists in the linking layer, right?

944
00:48:26,800 --> 00:48:27,700
In the linkage layer.

945
00:48:28,400 --> 00:48:31,400
So if I wanted to do that, if I wanted to get rid of our group here,

946
00:48:31,400 --> 00:48:34,900
so that it basically becomes this now, right?

947
00:48:35,000 --> 00:48:36,800
That's the step we would take next.

948
00:48:39,100 --> 00:48:40,600
Can we do that, right?

949
00:48:41,600 --> 00:48:46,700
And and I guess that debug variable-length the only.

950
00:48:46,900 --> 00:48:49,600
Well, the only problem is that we were treating that Loops that's no

951
00:48:49,600 --> 00:48:50,000
good.

952
00:48:50,100 --> 00:48:52,300
We were treating that as a doubly linked list thing.

953
00:48:52,600 --> 00:48:57,000
So there is a little bit of a problem there which is that if we point

954
00:48:57,000 --> 00:48:59,900
into one of the people of the linked list,

955
00:49:01,300 --> 00:49:05,400
there's really no way to deal with the Sentinel part.

956
00:49:05,400 --> 00:49:10,600
Like where does that Sentinel actually go and I'm not 100% sure.

957
00:49:10,800 --> 00:49:13,300
So it's more like you would need to do something.

958
00:49:14,100 --> 00:49:16,900
It's a little janky, right?

959
00:49:18,700 --> 00:49:19,800
it's like,

960
00:49:21,900 --> 00:49:22,600
That.

961
00:49:24,100 --> 00:49:24,700
Right.

962
00:49:24,900 --> 00:49:29,000
It's like you have to sort of have an on demand created Sentinel now

963
00:49:29,000 --> 00:49:31,900
at the linking layer, which is kind of ugly.

964
00:49:31,900 --> 00:49:36,500
I mean, it's not the greatest thing in the world, I don't know if I

965
00:49:36,500 --> 00:49:37,300
love it or not.

966
00:49:39,000 --> 00:49:44,300
And it creates a little bit more weight at the link layer instead of

967
00:49:44,300 --> 00:49:48,500
it being in the variable are where it could easily be, right?

968
00:50:00,500 --> 00:50:01,700
So you know what I think.

969
00:50:10,700 --> 00:50:15,600
I think if you look at him a platform that age, you can see inside

970
00:50:15,600 --> 00:50:18,300
debug event, there's going to be debug events, like open data block

971
00:50:18,300 --> 00:50:21,200
and close data block and opened a tin box and close data.

972
00:50:21,200 --> 00:50:25,400
Block are actually the things which sort of say that they are sort of

973
00:50:25,400 --> 00:50:27,600
the construction of the Sentinel.

974
00:50:28,000 --> 00:50:32,200
And those things, you know, would have potentially they have plenty of

975
00:50:32,200 --> 00:50:33,700
space to store that ring.

976
00:50:34,600 --> 00:50:35,000
So,

977
00:50:36,600 --> 00:50:38,800
It's kind of a little wonky.

978
00:50:39,800 --> 00:50:41,400
And I'm just not sure.

979
00:50:46,800 --> 00:50:48,800
I'm just not sure what I think of it.

980
00:50:56,600 --> 00:50:59,900
Well, I feel like because I'm so torn on it, I think.

981
00:51:00,000 --> 00:51:03,700
What I'll do is I'll just go ahead and sort of push through it.

982
00:51:03,900 --> 00:51:07,100
Go a little bit further down and just see what happens because I find

983
00:51:07,100 --> 00:51:11,200
like that's usually the only real way to go when you just don't really

984
00:51:11,200 --> 00:51:14,700
know right where you just like I'm just not sure, I'm not sure what

985
00:51:14,700 --> 00:51:15,700
should be happening here.

986
00:51:16,300 --> 00:51:18,800
So if that was the case, then what's going to happen when we come

987
00:51:18,800 --> 00:51:19,400
through here?

988
00:51:21,700 --> 00:51:25,900
Is when we grab out like a group like this, we don't really need to do

989
00:51:26,200 --> 00:51:27,300
any of this stuff I guess.

990
00:51:27,300 --> 00:51:30,100
So we've got group group is coming in here.

991
00:51:30,100 --> 00:51:32,200
It's a debug variable at the moment.

992
00:51:32,200 --> 00:51:35,900
So what it would be actually is it would be a debug variable link,

993
00:51:36,000 --> 00:51:36,600
always.

994
00:51:36,800 --> 00:51:39,300
That would actually be the thing that you start with.

995
00:51:39,300 --> 00:51:41,100
And so, you're basing, your passing the Sentinel.

996
00:51:46,200 --> 00:51:52,000
And I suppose you could do something where those things were actually,

997
00:51:52,100 --> 00:51:52,500
you know?

998
00:51:52,600 --> 00:51:57,600
So here's the thing to do debug variable group, you could do something

999
00:51:57,600 --> 00:51:58,200
like this.

1000
00:52:05,800 --> 00:52:09,900
Right, you could do something like that.

1001
00:52:09,900 --> 00:52:12,700
And then each one of this, this just has like children.

1002
00:52:16,300 --> 00:52:20,200
Which is very close to a way that we did have it before, right?

1003
00:52:22,700 --> 00:52:25,800
Could do something like that and that maybe seems a little bit more

1004
00:52:25,800 --> 00:52:26,600
sensible to me.

1005
00:52:27,100 --> 00:52:27,500
Okay.

1006
00:52:28,000 --> 00:52:31,100
So in this case you would say okay, we've got a group group equals,

1007
00:52:31,100 --> 00:52:33,700
whatever the tree group is and that again, would sort of be something

1008
00:52:33,700 --> 00:52:36,000
that just implies that these things that have groups on them.

1009
00:52:36,000 --> 00:52:39,200
Now, right wherever we have like route group and those sorts of

1010
00:52:39,200 --> 00:52:39,700
things.

1011
00:52:41,100 --> 00:52:43,800
Those are all going to be talking about a debug variable group

1012
00:52:43,800 --> 00:52:44,300
pointer.

1013
00:52:45,700 --> 00:52:49,600
You know, and yeah.

1014
00:52:51,500 --> 00:52:54,500
And then all of this stuff, I'll just do the surgery necessary to make

1015
00:52:54,500 --> 00:52:55,100
that happen.

1016
00:52:55,100 --> 00:52:57,500
So that comes like so

1017
00:53:00,200 --> 00:53:06,200
and then these guys have to be like just worked through again.

1018
00:53:06,200 --> 00:53:09,200
Nothing particularly unusual Happening Here.

1019
00:53:10,900 --> 00:53:12,000
Yeah, it's all good.

1020
00:53:13,000 --> 00:53:16,500
All right, so this will take me a little bit, just to kind of work

1021
00:53:16,500 --> 00:53:19,700
through the changes necessary here, but again, nothing particularly

1022
00:53:19,700 --> 00:53:20,700
unusual happening.

1023
00:53:21,400 --> 00:53:27,100
This is just the, if I have a group we've got sort of that Sentinel

1024
00:53:27,100 --> 00:53:27,500
there.

1025
00:53:27,800 --> 00:53:29,000
So this is all going to look.

1026
00:53:29,000 --> 00:53:30,800
I think just like that, right?

1027
00:53:31,200 --> 00:53:31,600
Yeah.

1028
00:53:34,600 --> 00:53:39,100
So again, it's almost exactly the same, there's really not much to it.

1029
00:53:39,500 --> 00:53:43,600
So in this case if we have it's not going to look at the VAR type

1030
00:53:43,600 --> 00:53:44,600
anymore for that.

1031
00:53:44,700 --> 00:53:48,300
What's actually going to do is say that in this case we're just going

1032
00:53:48,300 --> 00:53:50,100
to look to see if there's a children pointer.

1033
00:53:50,300 --> 00:53:53,900
So if whatever the link is that we're on if that has a children

1034
00:53:53,900 --> 00:53:58,800
pointer at all, then we just assume that now is the time for us to do

1035
00:53:58,800 --> 00:53:59,400
that.

1036
00:54:00,100 --> 00:54:01,500
Reversal down to it.

1037
00:54:01,600 --> 00:54:03,500
So we would do link children.

1038
00:54:04,100 --> 00:54:04,800
Sentinel

1039
00:54:08,400 --> 00:54:08,800
Oops.

1040
00:54:10,500 --> 00:54:11,500
And off it would go.

1041
00:54:13,600 --> 00:54:16,300
We can also simplify this iteration it was not a very well-written

1042
00:54:16,300 --> 00:54:18,500
iteration but that's a separate issue.

1043
00:54:18,700 --> 00:54:20,800
Again, everything gets cleaned up in time.

1044
00:54:22,000 --> 00:54:22,500
There we go.

1045
00:54:25,900 --> 00:54:27,900
That's an at sign.

1046
00:54:30,100 --> 00:54:35,500
Do you list link insert so it debug variable group is now a thing.

1047
00:54:35,800 --> 00:54:38,700
So now groups, I guess we would do that to it.

1048
00:54:38,700 --> 00:54:39,800
I suppose.

1049
00:54:40,900 --> 00:54:41,700
I think so.

1050
00:54:42,100 --> 00:54:42,500
Yes.

1051
00:54:45,900 --> 00:54:48,500
Keep On Truckin through that.

1052
00:54:50,500 --> 00:54:54,300
And This Crew Cooley create variable group.

1053
00:54:55,100 --> 00:54:56,200
Now needs to

1054
00:54:58,000 --> 00:55:00,500
needs to return a variable group, right?

1055
00:55:02,300 --> 00:55:07,500
And so when we do create variable, it's should not actually be doing

1056
00:55:08,100 --> 00:55:09,900
this stuff anymore, right?

1057
00:55:10,000 --> 00:55:13,100
I mean, it should meaning, this is the, this is the VAR, so it should

1058
00:55:13,100 --> 00:55:21,100
actually do that and it just needs to also do debug variable group.

1059
00:55:30,200 --> 00:55:30,700
Okay.

1060
00:55:32,700 --> 00:55:34,000
Oops, that's not what I want.

1061
00:55:42,700 --> 00:55:46,200
And then the group itself, right?

1062
00:55:46,200 --> 00:55:47,100
Which is this guy.

1063
00:55:49,100 --> 00:55:53,300
So the link that got created, the link that gets created for this guy

1064
00:55:53,300 --> 00:55:58,500
where we do when we create a variable group, the link that gets

1065
00:55:58,500 --> 00:56:02,900
created for the group is just going to be and I guess we don't even do

1066
00:56:02,900 --> 00:56:03,400
a VAR.

1067
00:56:03,400 --> 00:56:05,700
So it's just, it's really only.

1068
00:56:05,700 --> 00:56:08,800
If you actually add this group to another group, right?

1069
00:56:08,800 --> 00:56:12,600
It's only if this group appears underneath some other group that you

1070
00:56:12,600 --> 00:56:15,500
actually need a variable for it, which is actually, I guess a little

1071
00:56:15,500 --> 00:56:18,200
bit of an improvement over the way that we were doing it before.

1072
00:56:19,000 --> 00:56:19,600
But yeah.

1073
00:56:19,800 --> 00:56:20,300
So

1074
00:56:22,700 --> 00:56:24,800
When we do collate create variable group.

1075
00:56:25,000 --> 00:56:27,800
It's just creating just a variable group initializing it and that's

1076
00:56:27,800 --> 00:56:29,300
all it does, right?

1077
00:56:30,100 --> 00:56:32,100
So anyway, let's take a look.

1078
00:56:32,100 --> 00:56:33,600
Here you go.

1079
00:56:33,600 --> 00:56:35,700
State colita de Rana.

1080
00:56:36,100 --> 00:56:37,200
Let's see what else we got.

1081
00:56:37,300 --> 00:56:38,300
So this is just cold.

1082
00:56:38,300 --> 00:56:41,300
A crude variable group and just takes the debug State.

1083
00:56:42,100 --> 00:56:43,500
This is one, okay?

1084
00:56:43,500 --> 00:56:46,700
So in this case, when it does collate add variable to group, that's

1085
00:56:46,700 --> 00:56:51,200
the point where it would actually, that's that's the point where it

1086
00:56:51,200 --> 00:56:52,200
actually does.

1087
00:56:52,400 --> 00:56:53,300
Something with the naming.

1088
00:56:57,800 --> 00:56:59,800
So when it creates the actual debug group,

1089
00:57:03,700 --> 00:57:06,400
It would then also create a variable for that guy.

1090
00:57:06,400 --> 00:57:07,400
So here's the variable.

1091
00:57:14,400 --> 00:57:19,300
And I guess really, what we need to have is we need to get the link

1092
00:57:19,300 --> 00:57:20,700
back, right?

1093
00:57:21,200 --> 00:57:25,600
So the key part here is we since we're operating at that link layer,

1094
00:57:28,200 --> 00:57:31,800
we want to be able to do a thing where when we do collate create

1095
00:57:31,800 --> 00:57:32,400
variable

1096
00:57:34,000 --> 00:57:38,200
We want to be able to see what the link was that got added, right?

1097
00:57:38,600 --> 00:57:42,800
And so this part right here where we do co-ed variable to group, we

1098
00:57:42,800 --> 00:57:46,000
want to be able to do essentially this, right?

1099
00:57:46,700 --> 00:57:50,600
Or when we do collate create create grouped variable, right?

1100
00:57:52,100 --> 00:57:55,100
That's again it's doing that link and we don't have any way of getting

1101
00:57:55,100 --> 00:57:56,400
the link back, right?

1102
00:57:57,000 --> 00:57:59,500
So what we want to do here is we want to be able to get that link

1103
00:57:59,500 --> 00:57:59,900
back.

1104
00:58:00,400 --> 00:58:02,400
So when we do click create variable

1105
00:58:02,700 --> 00:58:09,000
and we pass it, the name, we need to pass the debug State as well and

1106
00:58:09,000 --> 00:58:09,700
the type

1107
00:58:12,900 --> 00:58:13,300
Oops.

1108
00:58:22,700 --> 00:58:26,800
Okay, so when we go ahead and create that variable, then we add it to

1109
00:58:26,800 --> 00:58:27,400
the group.

1110
00:58:27,700 --> 00:58:32,000
We want to have that debug link come back to us so that we can set the

1111
00:58:32,000 --> 00:58:32,800
pointer to it, right?

1112
00:58:32,800 --> 00:58:38,100
So we want debug variable link.

1113
00:58:41,100 --> 00:58:42,900
That's us creating that link there.

1114
00:58:43,300 --> 00:58:46,900
And when we add, oops,

1115
00:58:48,400 --> 00:58:53,500
We are adding the VAR and then when we take that link, we just want

1116
00:58:53,500 --> 00:58:59,400
the children pointer the child pointer to be that debug block group.

1117
00:59:01,400 --> 00:59:03,600
Again a little bit, janky, and messed up.

1118
00:59:03,600 --> 00:59:06,100
And that's just because we kind of have to take this one step at a

1119
00:59:06,100 --> 00:59:06,600
time.

1120
00:59:07,100 --> 00:59:10,700
And we're we still have a few more steps to go, right?

1121
00:59:10,900 --> 00:59:13,300
That's probably going to be that way.

1122
00:59:13,300 --> 00:59:16,500
Yeah, let's return that link.

1123
00:59:16,600 --> 00:59:17,200
There we go.

1124
00:59:18,300 --> 00:59:22,600
So I think I got everything there and but I'm not entirely sure.

1125
00:59:22,700 --> 00:59:24,800
Oh, we didn't.

1126
00:59:27,100 --> 00:59:28,600
What's happened there?

1127
00:59:30,300 --> 00:59:33,900
Let's see it early link.

1128
00:59:35,600 --> 00:59:36,600
Varr.

1129
00:59:39,600 --> 00:59:42,600
Okay, so that is a very bad.

1130
00:59:45,000 --> 00:59:49,400
Say the least that is a very bad pointer.

1131
00:59:50,100 --> 00:59:53,700
So what we want to do here is we're going to want to fix this guy,

1132
00:59:55,100 --> 00:59:58,200
I'm going to go like just a little bit into the Q&A because I'd like

1133
00:59:58,200 --> 00:59:59,800
to fix that first since we're right in the middle of

1134
01:00:00,000 --> 01:00:02,300
Injera don't really want to leave it till tomorrow and try to remember

1135
01:00:02,300 --> 01:00:06,100
exactly what I was doing, because this is kind of again, a series of

1136
01:00:06,100 --> 01:00:09,800
Fairly subtle steps necessary to make things end up in a good place.

1137
01:00:09,800 --> 01:00:13,100
And that can be kind of difficult especially on stream when I will

1138
01:00:13,100 --> 01:00:15,800
talk the whole time and it's kind of hard to keep it all in my head

1139
01:00:15,800 --> 01:00:16,200
properly.

1140
01:00:16,200 --> 01:00:19,900
So what's actually happening here, right?

1141
01:00:19,900 --> 01:00:22,600
Is, we move that stuff up to the link layer so that we can collapse

1142
01:00:22,600 --> 01:00:25,800
down debug variable even further from where we had it.

1143
01:00:25,800 --> 01:00:29,700
And so now, I have to make sure is that when we actually

1144
01:00:30,000 --> 01:00:36,200
We do add cult, you know, when we add things to the tree, I just need

1145
01:00:36,200 --> 01:00:40,100
to make sure that they're actually relatively correct when they get

1146
01:00:40,100 --> 01:00:40,600
out of here.

1147
01:00:40,600 --> 01:00:43,800
So we're adding to the debug block.

1148
01:00:43,800 --> 01:00:46,900
We create a variable group that we're going to put our variables in.

1149
01:00:47,400 --> 01:00:51,800
We create a variable for that one, which we do here, right?

1150
01:00:51,900 --> 01:00:56,600
We create, you know, we put them in whatever the correct group

1151
01:00:56,600 --> 01:00:59,800
actually was we add the variable there and then

1152
01:01:00,000 --> 01:01:03,100
Make sure that the chill that, you know, whoever the children were.

1153
01:01:04,800 --> 01:01:10,300
For this, for this particular entry is going to be the group that

1154
01:01:10,300 --> 01:01:15,300
seems correct to me, that looks like what I would expect.

1155
01:01:15,300 --> 01:01:19,400
I should jungle check, what happens with debug block group, but I

1156
01:01:19,400 --> 01:01:22,300
don't think really anything else in particular happens with it yet,

1157
01:01:22,300 --> 01:01:22,900
doesn't.

1158
01:01:23,200 --> 01:01:28,700
So when you close the data block, or all it does is pop up to the next

1159
01:01:28,800 --> 01:01:29,000
round.

1160
01:01:29,000 --> 01:01:30,500
Doesn't touch those groups at all.

1161
01:01:30,800 --> 01:01:34,200
So I feel like I don't know, maybe that's an iteration bug of some

1162
01:01:34,400 --> 01:01:39,200
Kind where this is actually not quite proper.

1163
01:01:39,200 --> 01:01:43,700
So if link children, when I create these debug links, I don't set the

1164
01:01:43,700 --> 01:01:44,400
child pointer.

1165
01:01:44,400 --> 01:01:47,500
That's that's probably the entirety of it.

1166
01:01:47,600 --> 01:01:49,100
So debug variable link.

1167
01:01:50,200 --> 01:01:54,600
When I create one in here, I initialize everything.

1168
01:01:55,100 --> 01:01:56,900
But I don't initialize the child.

1169
01:01:57,100 --> 01:02:00,400
So that's almost certainly the problem there.

1170
01:02:01,600 --> 01:02:01,900
Yeah.

1171
01:02:02,000 --> 01:02:03,400
And that is what the problem is.

1172
01:02:04,000 --> 01:02:04,700
Okay, good.

1173
01:02:05,600 --> 01:02:07,800
So now again, we're getting a little bit closer.

1174
01:02:07,800 --> 01:02:13,100
We're simplifying this a little bit further down, we've kind of got

1175
01:02:14,400 --> 01:02:18,400
Relatively good State now, so that debug variable could now

1176
01:02:18,400 --> 01:02:20,400
effectively just go away, right?

1177
01:02:20,400 --> 01:02:24,100
If we wanted to debug variable actually doesn't have to even be

1178
01:02:24,100 --> 01:02:26,700
called, debug variable, it can just be called debug event, and the

1179
01:02:26,700 --> 01:02:28,100
debug event could be used directly.

1180
01:02:28,400 --> 01:02:31,600
And that's where look at tomorrow and as well, as well as solidifying

1181
01:02:31,600 --> 01:02:34,900
up our interaction stuff, which I think we could do now very cleanly

1182
01:02:35,400 --> 01:02:37,300
and making it so that that'll work as well.

1183
01:02:37,800 --> 01:02:39,600
So that will be something that will tackle tomorrow.

1184
01:02:39,900 --> 01:02:43,500
For now, I'm going to go ahead and go to the Q&A in advance of doing

1185
01:02:43,500 --> 01:02:43,700
the

1186
01:02:43,800 --> 01:02:46,500
The the live stream with Sean McGrath.

1187
01:02:46,800 --> 01:02:50,600
So if you have any questions about what we're doing, please go ahead

1188
01:02:50,600 --> 01:02:52,200
and ask them now.

1189
01:02:57,200 --> 01:02:59,800
and if you could put Q colon in front of it, so,

1190
01:03:00,000 --> 01:03:00,400
See it.

1191
01:03:00,400 --> 01:03:01,300
That would be great.

1192
01:03:23,200 --> 01:03:26,100
I see in sohbat is continuing to,

1193
01:03:28,200 --> 01:03:31,500
To demonstrate its Mastery of the English language on the Stream.

1194
01:04:06,300 --> 01:04:11,400
why call it Sentinel, instead of head even though it is a sentinel,

1195
01:04:18,700 --> 01:04:22,600
I'm not sure what you're asking, why call it Sentinel, instead of

1196
01:04:22,600 --> 01:04:25,600
head, even though it is essential, well, I call it a sentinel because

1197
01:04:25,600 --> 01:04:28,500
it's the Sentinel, which is sort of what you're saying, it is as well.

1198
01:04:29,500 --> 01:04:31,400
You don't think it should be called The Sentinel.

1199
01:04:41,500 --> 01:04:43,200
What's your favorite data structure?

1200
01:04:45,200 --> 01:04:45,600
oh,

1201
01:04:56,000 --> 01:04:58,300
what's my favorite data structure?

1202
01:05:16,100 --> 01:05:16,800
I don't know.

1203
01:05:20,000 --> 01:05:24,000
I guess I would say that I really do like doubly linked lists a lot

1204
01:05:24,000 --> 01:05:27,100
because they're like very easy and they can do a lot of stuff.

1205
01:05:28,100 --> 01:05:29,400
Unfortunately.

1206
01:05:29,800 --> 01:05:35,600
I feel like you know, these days with cache coherency being what it

1207
01:05:35,600 --> 01:05:38,300
is, they're not really that efficient.

1208
01:05:38,300 --> 01:05:41,700
So, you know, it's hard to make them your favorite data structure,

1209
01:05:41,700 --> 01:05:43,700
these days because of performance concerns.

1210
01:05:43,700 --> 01:05:49,300
So it's like, you know, but I feel like in terms of the stuff you

1211
01:05:49,400 --> 01:05:51,100
can do with a doubly linked list.

1212
01:05:52,500 --> 01:05:54,200
And how easy it is to program.

1213
01:05:54,600 --> 01:05:56,700
It's kind of awesome singly linked list.

1214
01:05:57,900 --> 01:05:59,800
I would say that singly linked list, hold kind of, is

1215
01:06:00,000 --> 01:06:04,000
Place in my heart as well because singly linked lists can can actually

1216
01:06:04,000 --> 01:06:04,700
be done.

1217
01:06:04,700 --> 01:06:07,100
A lot of stuff can be done with no actual

1218
01:06:11,100 --> 01:06:12,800
No real atomics that could look like.

1219
01:06:12,800 --> 01:06:16,900
I mean, with with only very basic swap atomics like you know you can

1220
01:06:18,700 --> 01:06:21,900
add something to a free list a singly linked free list with just one

1221
01:06:21,900 --> 01:06:26,700
exchange and you don't they don't have to be checked or anything that

1222
01:06:26,700 --> 01:06:29,300
can just as long as you can see realized exchanges you're good, you

1223
01:06:29,300 --> 01:06:29,600
know.

1224
01:06:32,000 --> 01:06:33,000
So I don't know.

1225
01:06:34,200 --> 01:06:34,600
I don't know.

1226
01:06:34,600 --> 01:06:35,500
It's hard to say

1227
01:06:37,700 --> 01:06:38,600
It's pretty hard to say.

1228
01:06:40,600 --> 01:06:41,500
Hash tables are also.

1229
01:06:41,500 --> 01:06:44,900
Also Obviously good, very easy to implement and do a lot of stuff.

1230
01:06:46,700 --> 01:06:51,300
But like everything else you know, it's really hard to pick.

1231
01:06:57,900 --> 01:06:58,700
See you Soros?

1232
01:06:59,000 --> 01:07:01,500
Not sure if you specified this in a previous post but do you plan to

1233
01:07:01,500 --> 01:07:05,700
implement side-scrolling or any kind of platforming alongside the top

1234
01:07:05,700 --> 01:07:06,300
down view?

1235
01:07:06,700 --> 01:07:10,300
No, it is not a side-scrolling kind of game.

1236
01:07:16,300 --> 01:07:18,200
It does not really do that.

1237
01:07:20,300 --> 01:07:24,000
I have no game design stuff in there about that, side-scrolling

1238
01:07:55,500 --> 01:07:57,000
So does the in sohbat?

1239
01:07:59,600 --> 01:08:01,200
Answer you of.

1240
01:08:05,000 --> 01:08:08,200
Does the in sohbat, answer you, if you ask it a question, does it try

1241
01:08:08,200 --> 01:08:09,500
to like respond?

1242
01:08:12,700 --> 01:08:14,700
So, it does sort of.

1243
01:08:20,300 --> 01:08:22,399
Legend of Zelda has some fo side-scrolling rooms.

1244
01:08:22,700 --> 01:08:22,899
Yeah.

1245
01:08:22,899 --> 01:08:28,399
The original Legend of Zelda had like like when you get like an item

1246
01:08:29,300 --> 01:08:30,899
but they were really stupid rooms.

1247
01:08:30,899 --> 01:08:32,600
Like I don't know why they did that.

1248
01:08:32,600 --> 01:08:34,399
It's not like, they weren't good.

1249
01:08:34,399 --> 01:08:36,200
So I didn't really want any of that.

1250
01:08:36,200 --> 01:08:37,600
It didn't seem like a good idea.

1251
01:08:43,600 --> 01:08:44,399
Stegosaurus.

1252
01:08:44,399 --> 01:08:47,899
What has been your favorite thing so far writing this engine probably

1253
01:08:47,899 --> 01:08:51,100
was the fact that the software renderer Ran So Fast, even though we

1254
01:08:51,700 --> 01:08:56,200
only did the most basic optimization on it, it was kind of fun to see

1255
01:08:56,200 --> 01:08:58,899
just how fast it the software renderer runs.

1256
01:09:00,000 --> 01:09:00,800
Kind of crazy.

1257
01:09:09,200 --> 01:09:09,800
Terror.

1258
01:09:09,800 --> 01:09:15,500
OE asks, I had an idea that's probably stupid, but I was wondering if

1259
01:09:15,500 --> 01:09:18,800
a vector that when deleting an element just left an empty spot that

1260
01:09:18,800 --> 01:09:22,700
skipped over when iterating would still be cash friendly and still

1261
01:09:22,700 --> 01:09:25,399
efficient when deleting and inserting, this is slightly over my head

1262
01:09:25,399 --> 01:09:25,800
though.

1263
01:09:26,800 --> 01:09:30,000
So the problem with that approach

1264
01:09:36,800 --> 01:09:39,899
Is is that, you know, there's nothing fundamentally wrong with that.

1265
01:09:39,899 --> 01:09:43,200
If if what it turned out that you did is you do a lot of deletion, you

1266
01:09:43,200 --> 01:09:45,500
need your things to be stable and you don't want to do mem copying

1267
01:09:45,500 --> 01:09:47,500
then maybe that's you know, interesting, right.

1268
01:09:48,200 --> 01:09:51,200
But you have to understand that there's a lot of overhead that you're

1269
01:09:51,200 --> 01:09:54,500
going to incur to support this operation, right?

1270
01:09:54,700 --> 01:09:58,400
Because first of all, you need a way of marking, the fact that you've

1271
01:09:58,400 --> 01:10:00,100
deleted an entry into the vector.

1272
01:10:00,500 --> 01:10:02,500
So, where does that need to get stored?

1273
01:10:02,700 --> 01:10:03,200
Right?

1274
01:10:04,200 --> 01:10:05,900
Do you now have another Vector?

1275
01:10:05,900 --> 01:10:06,500
That's neck.

1276
01:10:06,500 --> 01:10:08,800
That's like a alongside that Vector.

1277
01:10:09,000 --> 01:10:13,800
Do you expand each slot in the vector to include a Mark that says,

1278
01:10:13,800 --> 01:10:15,800
whether it's filled or not, right?

1279
01:10:16,100 --> 01:10:19,600
And now during iteration, which is the thing that you want to be as

1280
01:10:19,600 --> 01:10:20,700
fast as possible.

1281
01:10:21,200 --> 01:10:25,400
Usually, you're checking every time you increment by one, you got to

1282
01:10:25,400 --> 01:10:26,000
check to see.

1283
01:10:26,000 --> 01:10:30,700
Not only am I at the end but also am.

1284
01:10:30,700 --> 01:10:33,800
I do I got a skip this guy or skip some

1285
01:10:34,000 --> 01:10:36,200
Number of guys and so on.

1286
01:10:36,500 --> 01:10:37,000
Right?

1287
01:10:38,400 --> 01:10:42,700
So you know it sounds a little iffy to me, you know, it doesn't sound

1288
01:10:42,700 --> 01:10:43,300
great.

1289
01:10:45,900 --> 01:10:48,300
But like anything else, it's not a stupid idea.

1290
01:10:48,600 --> 01:10:52,500
It's an idea that may have a time when it's valid and really what it

1291
01:10:52,500 --> 01:10:54,800
depends on is, how are you using this Vector?

1292
01:10:55,100 --> 01:10:57,500
What are the best like, what?

1293
01:10:59,000 --> 01:11:01,100
What is the core benefit?

1294
01:11:01,100 --> 01:11:03,100
You're providing there, right?

1295
01:11:05,500 --> 01:11:08,400
And and, you know, there could be cases where something that did

1296
01:11:08,400 --> 01:11:10,600
something like that was actually useful.

1297
01:11:10,800 --> 01:11:14,000
I don't think it would probably be a great General replacement for

1298
01:11:14,000 --> 01:11:19,200
Vector know, but, you know, that doesn't mean it.

1299
01:11:19,200 --> 01:11:21,500
Couldn't that concept couldn't have its place.

1300
01:11:27,600 --> 01:11:29,600
How about your favorite equation?

1301
01:11:31,700 --> 01:11:33,600
My favorite equation.

1302
01:11:35,100 --> 01:11:37,700
Is well, I think I answered this before is linear blend.

1303
01:11:39,800 --> 01:11:41,600
My favorite equation is.

1304
01:11:43,400 --> 01:11:44,800
We've definitely said this before.

1305
01:11:53,200 --> 01:11:56,000
How do I get back to a, some kind of drawing mode here.

1306
01:11:56,800 --> 01:11:59,300
Hello, Mischief, I would like to draw an A please.

1307
01:12:01,100 --> 01:12:01,600
There we go.

1308
01:12:03,500 --> 01:12:10,700
So my my favorite equation is is definitely like f of a t.

1309
01:12:10,800 --> 01:12:18,100
B equals 1, minus t, A+ T, be

1310
01:12:19,300 --> 01:12:21,000
that is definitely my favorite equation.

1311
01:12:23,300 --> 01:12:24,500
By far.

1312
01:12:26,700 --> 01:12:28,300
Do you use DirectX?

1313
01:12:28,600 --> 01:12:31,800
No, I do not use DirectX.

1314
01:12:57,100 --> 01:13:00,700
What do you think of clang cc-1?

1315
01:13:02,400 --> 01:13:04,100
Is that C1 or CL?

1316
01:13:05,100 --> 01:13:10,200
C1, clang c14 Visual Studio, I do not know what clang.

1317
01:13:10,200 --> 01:13:11,500
See one for visual studio.

1318
01:13:11,500 --> 01:13:13,200
Actually is to be honest with you,

1319
01:13:44,600 --> 01:13:45,500
Any other questions?

1320
01:14:04,400 --> 01:14:04,800
Muju.

1321
01:14:04,800 --> 01:14:05,800
1, 2, 3 x.

1322
01:14:05,800 --> 01:14:08,400
If you were doing these compressions, the ones you did today at work,

1323
01:14:08,400 --> 01:14:10,000
how different would your process be?

1324
01:14:11,500 --> 01:14:16,700
Well, you know, it's the process would be basically the same.

1325
01:14:17,100 --> 01:14:19,200
I would just be skipping a lot of steps.

1326
01:14:21,600 --> 01:14:25,600
So, you know, I could probably make a much larger jump in a lot of

1327
01:14:25,600 --> 01:14:26,100
places.

1328
01:14:26,100 --> 01:14:32,200
So basically the places where you see me go, hmm, well I'm not that

1329
01:14:32,200 --> 01:14:34,400
place where I'm scratching my my chin.

1330
01:14:34,600 --> 01:14:38,100
Those are actually the places I would be stepping to and all the

1331
01:14:38,100 --> 01:14:40,900
places where I'm like, I'm just going to go ahead and move this thing

1332
01:14:40,900 --> 01:14:42,000
into blah and I do it.

1333
01:14:42,000 --> 01:14:43,300
I'm gonna do it moves about.

1334
01:14:43,300 --> 01:14:46,000
Usually, all of those would probably be just be done in one step

1335
01:14:46,100 --> 01:14:46,900
Roberts, like, okay.

1336
01:14:46,900 --> 01:14:47,900
I know I'm gonna move this thing here.

1337
01:14:47,900 --> 01:14:49,700
I'm going to put that over there and we take this drug on my side,

1338
01:14:49,800 --> 01:14:50,200
okay.

1339
01:14:50,200 --> 01:14:51,200
It's that

1340
01:14:51,400 --> 01:14:54,600
And then I just like do that change, right?

1341
01:14:56,800 --> 01:14:59,800
But that's not really very useful on stream because a it's really

1342
01:15:00,000 --> 01:15:03,200
Be really hard for me to do that stream effectively.

1343
01:15:07,000 --> 01:15:11,500
It would be hard for me to mentally do that while talking all the time

1344
01:15:11,800 --> 01:15:15,700
and not mess something up but and also it would be extremely difficult

1345
01:15:15,700 --> 01:15:17,600
for anyone to have any idea what I did.

1346
01:15:17,600 --> 01:15:20,200
It's hard enough when I'm doing big changes like this for people to

1347
01:15:20,200 --> 01:15:20,600
follow.

1348
01:15:20,600 --> 01:15:22,000
But at that point, a b, forget it.

1349
01:15:22,000 --> 01:15:23,900
They have no idea what I did, right?

1350
01:15:24,500 --> 01:15:27,100
Because it just be like, oh it was this thing and then it's magically

1351
01:15:27,100 --> 01:15:29,800
this other thing and we have no idea like how it got there or why he

1352
01:15:29,800 --> 01:15:30,700
got there, right?

1353
01:15:52,000 --> 01:15:57,500
Microsoft is making clang for parsing intermediate, a first-class

1354
01:15:57,500 --> 01:15:58,200
fully support system.

1355
01:15:58,200 --> 01:16:01,600
Fragile suiciding, November intermediate and to machine is still

1356
01:16:02,400 --> 01:16:03,600
Microsoft C2.

1357
01:16:08,400 --> 01:16:10,700
I mean, like I said that seems like a reasonable idea.

1358
01:16:10,700 --> 01:16:12,100
I guess, I don't know.

1359
01:16:16,700 --> 01:16:20,000
You know, I would prefer that Microsoft's did a good compiler.

1360
01:16:20,400 --> 01:16:23,600
At the end of the day, I don't care about C++ so I actually be fine if

1361
01:16:23,600 --> 01:16:27,900
they just did a good C compiler and so maybe this is that sort of what

1362
01:16:27,900 --> 01:16:28,900
they're kind of doing, right?

1363
01:16:28,900 --> 01:16:32,500
Is like they're saying, let's leave the parsing to clang because we

1364
01:16:32,500 --> 01:16:35,800
don't care and we'll just work on the code gen and that seems fine to

1365
01:16:35,800 --> 01:16:36,100
me.

1366
01:16:36,800 --> 01:16:37,900
That's totally reasonable.

1367
01:16:37,900 --> 01:16:40,400
Clang is a good front end for C++.

1368
01:16:40,800 --> 01:16:43,700
It seems like it handles, just about anything that people throw at it.

1369
01:16:43,700 --> 01:16:46,100
Even crazy C++ people, I don't know.

1370
01:16:46,300 --> 01:16:50,800
No, because I'm not a crazy C++ person anymore, but you know, that's

1371
01:16:50,800 --> 01:16:52,000
just it sort of seems that way.

1372
01:16:52,800 --> 01:16:55,800
But like, anything else, I don't, I won't really have an opinion till

1373
01:16:55,800 --> 01:16:57,800
I actually use it in practice and see how it goes.

1374
01:17:00,100 --> 01:17:03,600
But let's be honest, if I'm real lucky that day will never come

1375
01:17:03,600 --> 01:17:05,800
because I'll just be programmed in ji or something like that.

1376
01:17:05,800 --> 01:17:08,400
And I won't have to deal with Microsoft scrap the compiler anymore.

1377
01:17:14,200 --> 01:17:16,000
How long do you think it will take before?

1378
01:17:16,000 --> 01:17:18,800
Someone makes a Linux to bugger that can rival visual Studios?

1379
01:17:20,800 --> 01:17:23,000
I mean, Infinity long.

1380
01:17:23,000 --> 01:17:24,000
As far as I mean,

1381
01:17:25,400 --> 01:17:29,300
There's hundreds of Linux to buggers out there and they're all lousy.

1382
01:17:29,300 --> 01:17:35,600
So, you know, I don't know, probably people have to start putting some

1383
01:17:35,600 --> 01:17:36,300
money behind.

1384
01:17:36,300 --> 01:17:37,400
It would be my guess.

1385
01:17:38,700 --> 01:17:41,400
People who actually do low-level programming have to start putting

1386
01:17:41,400 --> 01:17:42,500
some money behind it.

1387
01:17:43,700 --> 01:17:46,200
You know, because it's pretty clear that whatever is happening.

1388
01:17:46,200 --> 01:17:50,000
Now just has not led to a good day butter because if there's been tons

1389
01:17:50,000 --> 01:17:51,800
of them made and they're all lousy

1390
01:17:55,000 --> 01:17:55,600
her Domina.

1391
01:17:55,600 --> 01:17:56,900
What do you think of Purdue and competitions?

1392
01:17:56,900 --> 01:17:57,900
Have you participate in the?

1393
01:17:57,900 --> 01:17:58,800
I have not

1394
01:18:00,700 --> 01:18:03,400
I don't have a particular opinion about them one way or the other.

1395
01:18:08,900 --> 01:18:09,300
Mr.

1396
01:18:09,300 --> 01:18:10,500
Bass 21.

1397
01:18:10,500 --> 01:18:13,000
What role do you think seven security has in modern gaming?

1398
01:18:13,400 --> 01:18:16,600
Is it not worth wasting CPU Cycles to guard against different

1399
01:18:16,600 --> 01:18:17,200
exploits?

1400
01:18:17,400 --> 01:18:20,300
How good of a job is the game which we doing to to implementing it and

1401
01:18:20,300 --> 01:18:21,500
should they be doing more or less?

1402
01:18:22,100 --> 01:18:26,800
In my opinion, it breaks into two categories roughly.

1403
01:18:28,200 --> 01:18:32,800
So there's Competitive Gaming and non competitive gaming, so

1404
01:18:32,800 --> 01:18:35,300
Competitive Gaming would be something where you're talking like

1405
01:18:35,300 --> 01:18:38,000
Esports and that sort of thing where there's like, you know, you might

1406
01:18:38,000 --> 01:18:38,600
win a million dollars.

1407
01:18:38,700 --> 01:18:40,100
If you win this tournament or something.

1408
01:18:41,400 --> 01:18:45,900
So let's assume that that would not talking about that.

1409
01:18:46,000 --> 01:18:47,800
And we're just talking about all the rest of the games.

1410
01:18:48,000 --> 01:18:51,700
So just games that I play on my computer by myself, in my opinion,

1411
01:18:51,700 --> 01:18:56,400
security has zero place in that sphere at all game.

1412
01:18:56,400 --> 01:18:58,500
Developers should literally, never think about security.

1413
01:18:58,500 --> 01:19:00,400
There should be absolutely.

1414
01:19:00,800 --> 01:19:07,000
It should be assumed that every game will ship with the most possibly

1415
01:19:07,000 --> 01:19:08,600
severe exploits that

1416
01:19:08,700 --> 01:19:10,300
that could possibly occur.

1417
01:19:10,300 --> 01:19:11,300
That's just be assumed.

1418
01:19:11,900 --> 01:19:17,200
And then the responsibility for running those things securely should

1419
01:19:17,200 --> 01:19:18,900
fall squarely on the operating system.

1420
01:19:18,900 --> 01:19:23,800
There is no question in my mind that that is absolutely the only

1421
01:19:23,800 --> 01:19:24,600
correct route.

1422
01:19:24,600 --> 01:19:28,900
And the reason for that is because there are literally thousands of

1423
01:19:28,900 --> 01:19:30,400
games developed every year.

1424
01:19:30,400 --> 01:19:34,300
There is no way that each of those people is going to be a security

1425
01:19:34,300 --> 01:19:37,000
expert nor do we want them to spend their time doing that.

1426
01:19:37,000 --> 01:19:40,800
And furthermore, there is no way that each of those games will get the

1427
01:19:40,800 --> 01:19:41,600
kind of testing and

1428
01:19:42,000 --> 01:19:44,800
Is necessary to make sure that they don't have exploits in them.

1429
01:19:45,300 --> 01:19:50,700
So it is imperative that operating system treat games in a sandbox.

1430
01:19:50,900 --> 01:19:53,600
They should have done this from day one.

1431
01:19:53,800 --> 01:19:59,400
There is absolutely no excuse for the reason that they don't and it is

1432
01:19:59,600 --> 01:20:02,300
completely ridiculous.

1433
01:20:02,800 --> 01:20:08,300
That Microsoft has still not done this after 7 Operating System

1434
01:20:08,700 --> 01:20:10,700
iteration since they started supporting gaming.

1435
01:20:10,700 --> 01:20:11,600
It's like

1436
01:20:11,900 --> 01:20:18,400
Absurd a person should be able to run a game written by a hacker,

1437
01:20:18,600 --> 01:20:22,800
trying to infect their machine on Windows, and it should not be able

1438
01:20:22,800 --> 01:20:23,500
to do anything.

1439
01:20:23,600 --> 01:20:27,200
Because that is the that is like one of the most primary things in

1440
01:20:27,200 --> 01:20:31,400
operations me supposed to do process, isolation games, do not have to

1441
01:20:31,400 --> 01:20:34,200
access anything on your machine.

1442
01:20:34,500 --> 01:20:36,400
They don't have to work with documents.

1443
01:20:36,400 --> 01:20:39,800
They don't have to save any data that gets used outside of the game.

1444
01:20:39,900 --> 01:20:41,800
They also they're entirely sandboxes.

1445
01:20:41,900 --> 01:20:45,000
Well, and there is absolutely no excuse for the fact that this has not

1446
01:20:45,000 --> 01:20:45,500
been done.

1447
01:20:46,400 --> 01:20:48,900
It is absolutely pathetic.

1448
01:20:51,200 --> 01:20:53,200
So that's my opinion on that.

1449
01:20:54,100 --> 01:20:57,700
And to me, that's like, very clearly the right way to go Competitive

1450
01:20:57,700 --> 01:20:59,100
Gaming is a different thing.

1451
01:21:00,000 --> 01:21:05,100
Gaming that is where the game itself is a security problem.

1452
01:21:05,300 --> 01:21:09,900
Meaning that even if I run the game in a sandbox that doesn't actually

1453
01:21:10,400 --> 01:21:13,800
help me because it may be the game itself whose Integrity I need to

1454
01:21:13,800 --> 01:21:15,700
verify, right?

1455
01:21:16,900 --> 01:21:21,900
Because if I'm trying to prevent someone from cheating in a game, then

1456
01:21:21,900 --> 01:21:24,800
I need to know that they're running and version of the game that

1457
01:21:24,800 --> 01:21:26,100
hasn't been modified.

1458
01:21:27,000 --> 01:21:31,600
That to me is a very interesting security problem, and I don't know

1459
01:21:31,600 --> 01:21:33,200
how you solve that security problem.

1460
01:21:33,200 --> 01:21:36,100
Write to me, that starts to suggest that you need Hardware

1461
01:21:36,100 --> 01:21:39,700
verification if things, and it kind of gets into a nasty, like who

1462
01:21:39,700 --> 01:21:43,100
owns this machine, the person who bought the machine, or the person

1463
01:21:43,100 --> 01:21:48,700
who the software vendor can verify that the software is, is proper and

1464
01:21:48,700 --> 01:21:49,800
all that stuff, right?

1465
01:21:50,900 --> 01:21:54,400
And so, I almost think that like, you know, in the future, I would

1466
01:21:54,400 --> 01:21:56,500
actually be okay with the concept.

1467
01:21:57,600 --> 01:22:02,300
That people who are engaged in serious Esports, use different Hardware

1468
01:22:02,300 --> 01:22:06,100
from other people or something like this, or that's a separate section

1469
01:22:06,100 --> 01:22:10,700
of the, if there are two separate things because I don't know how you

1470
01:22:10,700 --> 01:22:13,400
solve those problems, I don't happen to care about those problems.

1471
01:22:13,400 --> 01:22:16,600
So in my world did was ruining have them like we just wouldn't have

1472
01:22:16,600 --> 01:22:17,000
Esports now.

1473
01:22:17,000 --> 01:22:20,200
I don't care about it at all, like I kind of nothing about it.

1474
01:22:20,500 --> 01:22:22,500
I don't care about cheating in online games.

1475
01:22:22,500 --> 01:22:25,300
I don't care about Esports, it's irrelevant to me.

1476
01:22:26,800 --> 01:22:27,100
But

1477
01:22:27,500 --> 01:22:30,900
I realize that that they are relevant for a lot of people and I

1478
01:22:30,900 --> 01:22:32,900
understand why they want those

1479
01:22:35,600 --> 01:22:39,400
Why they want to be able to have a cheap free experience or a hack for

1480
01:22:39,400 --> 01:22:40,700
experience in those cases.

1481
01:22:41,200 --> 01:22:44,000
And so I would say that if that really is saying that needs to get

1482
01:22:44,000 --> 01:22:46,300
solved, then that itself is a separate security problem.

1483
01:22:46,300 --> 01:22:51,500
It's a very hard one and I feel like it probably requires Hardware

1484
01:22:51,500 --> 01:22:54,800
authentication and digital signing, which gets you into a huge

1485
01:22:54,800 --> 01:22:58,900
nightmare world of like who owns this machine and who trusts who, and

1486
01:22:59,100 --> 01:23:02,100
is Microsoft like being now telling you what you can and can't run

1487
01:23:02,100 --> 01:23:04,200
your machine and all these sorts of things, right?

1488
01:23:05,400 --> 01:23:08,700
I just that world scares me and I don't like it and Esports is

1489
01:23:08,700 --> 01:23:09,300
irrelevant to me.

1490
01:23:09,300 --> 01:23:12,000
So I just give it up and not have to go that route.

1491
01:23:12,400 --> 01:23:15,700
But if you actually care about those things, if you're like DOTA is my

1492
01:23:15,700 --> 01:23:19,400
life or whatever like or League of Legends is all I care about.

1493
01:23:19,800 --> 01:23:24,000
Then you have some kind of hard problems to face, you know, which are

1494
01:23:24,000 --> 01:23:27,800
about like do you want to have a machine where you don't actually

1495
01:23:27,800 --> 01:23:32,100
control the software, that's on it, you know, and I don't know, maybe

1496
01:23:32,100 --> 01:23:32,500
you do.

1497
01:23:36,500 --> 01:23:39,200
All right, I'm going to go ahead and close down the Q&A.

1498
01:23:41,000 --> 01:23:47,000
And I'm going to see if we can get the chat link setup for for Mr.

1499
01:23:47,000 --> 01:23:47,900
McGrath.

1500
01:23:49,800 --> 01:23:53,600
So I'm going to start doing that here, so we can be ready.

1501
01:23:53,700 --> 01:23:55,400
So I'm going to go ahead and close this down.

1502
01:23:57,100 --> 01:23:58,500
Let's go ahead and do this.

1503
01:24:00,900 --> 01:24:04,800
Okay, thank you everyone for joining me, for another episode of

1504
01:24:04,800 --> 01:24:06,400
handmade here at some pleasure coding with you.

1505
01:24:06,400 --> 01:24:10,100
As always, if you would like to follow along with me at home, you can

1506
01:24:10,100 --> 01:24:12,500
always pre-order the game on handmade here at org and it comes with a

1507
01:24:12,500 --> 01:24:13,200
source code.

1508
01:24:13,700 --> 01:24:16,200
So if you'd like to sort of experiment and play around with it, you

1509
01:24:16,200 --> 01:24:17,000
can do that.

1510
01:24:18,000 --> 01:24:19,100
I also have patreon page.

1511
01:24:19,100 --> 01:24:21,600
If you want to support the video series, that's always very much

1512
01:24:21,600 --> 01:24:22,100
appreciated.

1513
01:24:22,100 --> 01:24:23,100
We also have a forum site.

1514
01:24:23,100 --> 01:24:27,700
We can ask questions or viewed episode backlog stuff like that.

1515
01:24:27,900 --> 01:24:30,300
We also have a tweetbot the tweets this

1516
01:24:30,500 --> 01:24:31,200
Schedule it you.

1517
01:24:31,900 --> 01:24:33,900
So if you want to know when things are gonna be live, that's the thing

1518
01:24:33,900 --> 01:24:36,700
to tune into, or when you want to know about special events or to

1519
01:24:36,700 --> 01:24:37,000
happen.

1520
01:24:37,000 --> 01:24:40,300
Like the one that's going to happen right now where we're doing a live

1521
01:24:40,300 --> 01:24:44,100
mock debate with shama graph about free to play games which is what

1522
01:24:44,100 --> 01:24:44,900
I'm going to go set up now.

1523
01:24:44,900 --> 01:24:47,400
So if you're interested in that, please stay tuned.

1524
01:24:47,400 --> 01:24:50,400
I'm just going to go ahead and cycle the recording and then we'll get

1525
01:24:50,400 --> 01:24:50,900
right to that.

1526
01:24:50,900 --> 01:24:51,100
So,

