1
00:00:00,000 --> 00:00:02,000
Fresh one is a freshman right there.

2
00:00:03,300 --> 00:00:08,000
Hello everyone and welcome to handmade hero day 37.

3
00:00:08,800 --> 00:00:12,500
This of course is the show where we write a complete game from

4
00:00:12,500 --> 00:00:12,900
scratch.

5
00:00:12,900 --> 00:00:13,700
No libraries.

6
00:00:13,700 --> 00:00:17,900
No engine, so that we can see absolutely everything that happens when

7
00:00:17,900 --> 00:00:19,100
you make a game.

8
00:00:19,300 --> 00:00:23,100
And it's sort of like the complete soup-to-nuts process it so that you

9
00:00:23,100 --> 00:00:26,500
can kind of learn about every last little thing that goes into

10
00:00:26,500 --> 00:00:27,100
executing a game.

11
00:00:27,100 --> 00:00:28,100
So there's no more Mysteries.

12
00:00:28,100 --> 00:00:28,700
There's no more.

13
00:00:28,700 --> 00:00:30,700
I don't really know what it does down there, kind of stuff.

14
00:00:31,000 --> 00:00:33,000
We're going in cleaning out all the cobwebs.

15
00:00:33,200 --> 00:00:34,300
To the basement.

16
00:00:34,300 --> 00:00:39,200
If you will finding out what your creepy grandfather put down there,

17
00:00:39,200 --> 00:00:41,400
you know, stash in the basement or what?

18
00:00:41,800 --> 00:00:43,700
What weird sort of pickling experiment.

19
00:00:43,700 --> 00:00:46,600
Someone did and you really don't want to necessarily eat it, you know,

20
00:00:46,600 --> 00:00:48,200
so sometimes it's gross is true.

21
00:00:49,000 --> 00:00:52,300
But there's also kind of this nice sense of knowing what the hell is

22
00:00:52,300 --> 00:00:52,900
in your basement.

23
00:00:53,000 --> 00:00:58,000
So, without further Ado, let's pick up where we left off because we

24
00:00:58,000 --> 00:01:01,500
have some, I actually thought overnight of something very important

25
00:01:01,500 --> 00:01:02,900
that I should tell you guys about.

26
00:01:03,100 --> 00:01:06,300
Out for people who don't already know about this and I realize it's

27
00:01:06,300 --> 00:01:07,400
the perfect time to do it.

28
00:01:07,500 --> 00:01:09,000
So I'm kind of excited about that.

29
00:01:09,600 --> 00:01:15,000
But first, I will mention if you have pre-ordered the game and you

30
00:01:15,000 --> 00:01:18,200
would like to follow along at home on hammy here dot org.

31
00:01:18,200 --> 00:01:19,000
There's this fear R2 button.

32
00:01:19,000 --> 00:01:21,800
If you click that you should have got a link in your email that link

33
00:01:21,800 --> 00:01:23,500
should have given you a download.

34
00:01:24,100 --> 00:01:26,500
Basically a page you can go to and there's to downloads there.

35
00:01:26,500 --> 00:01:29,300
There's one that's a source zip that's updated every night and you

36
00:01:29,300 --> 00:01:32,900
want to extract basically out of that zip file, the source code for

37
00:01:33,100 --> 00:01:35,800
36 because we're on day 37.

38
00:01:36,000 --> 00:01:40,000
And then you want to if you haven't already you're going to want to

39
00:01:40,000 --> 00:01:41,500
extract the.

40
00:01:42,100 --> 00:01:44,800
There's a there's basically an asset zip as well that we're working

41
00:01:44,800 --> 00:01:44,900
with.

42
00:01:44,900 --> 00:01:49,100
Now you want to extract that asset zip out into the data directory.

43
00:01:49,200 --> 00:01:51,300
So I'll show you where that stuff is in a second.

44
00:01:54,400 --> 00:01:56,400
So that is for folks.

45
00:01:56,400 --> 00:01:57,400
Following along at home.

46
00:01:57,700 --> 00:02:00,200
I am going to go ahead and Jump Right In Here.

47
00:02:01,600 --> 00:02:04,300
And talk about the thing that I want to talk about.

48
00:02:04,300 --> 00:02:05,700
So I'll say where we left off.

49
00:02:05,700 --> 00:02:06,400
And why?

50
00:02:06,400 --> 00:02:08,900
I think it's important to talk about thing that I want to talk about.

51
00:02:09,699 --> 00:02:10,500
All right.

52
00:02:10,600 --> 00:02:17,900
So if we go ahead in here, I made this little debug BMP loader, right?

53
00:02:18,200 --> 00:02:22,300
Where basically, we were trying to load in a bitmap file that we

54
00:02:22,300 --> 00:02:23,200
stored on the drive.

55
00:02:23,200 --> 00:02:26,900
Now, like I said, basically, what we have here is in our directory, is

56
00:02:26,900 --> 00:02:29,600
we have code and misc, which is what we've been working with before.

57
00:02:29,600 --> 00:02:30,400
All the code goes in here.

58
00:02:30,400 --> 00:02:30,700
Mrs.

59
00:02:30,700 --> 00:02:31,200
Just kind of a

60
00:02:31,400 --> 00:02:34,500
A place where miscellaneous stuff ends up stuff like the emac that

61
00:02:34,500 --> 00:02:35,000
fig.

62
00:02:35,100 --> 00:02:36,700
But now we've got a data directory.

63
00:02:37,000 --> 00:02:38,300
And inside that data directory.

64
00:02:38,700 --> 00:02:41,300
I gave you that asset zip that you can download.

65
00:02:41,300 --> 00:02:43,700
And it's got this sort of test thing in here, which has a bunch of

66
00:02:43,700 --> 00:02:44,000
stuff.

67
00:02:44,000 --> 00:02:45,800
And we want to load this file, right?

68
00:02:46,000 --> 00:02:47,300
Which is a background.

69
00:02:48,400 --> 00:02:48,700
A.

70
00:02:48,900 --> 00:02:50,800
It's basically like an image right?

71
00:02:51,200 --> 00:02:52,400
That we need to load.

72
00:02:52,500 --> 00:02:58,200
And so what I did was I loaded this file in write test background dot

73
00:02:58,200 --> 00:02:59,800
BMP and

74
00:03:00,000 --> 00:03:03,400
What I did is I said, well, okay, you know, we wrote the code to just

75
00:03:03,400 --> 00:03:03,800
load it in.

76
00:03:03,800 --> 00:03:04,500
It's pretty simple.

77
00:03:04,500 --> 00:03:07,000
We you know, we read the file in, we look at the header, the header

78
00:03:07,000 --> 00:03:07,800
was correct.

79
00:03:08,000 --> 00:03:10,800
And then we used the offset those in the header to get at the pixels,

80
00:03:11,100 --> 00:03:13,000
but we really didn't do anything more than that.

81
00:03:13,000 --> 00:03:14,600
And it's a very end of the stream.

82
00:03:15,100 --> 00:03:18,000
I kind of said, well we could we could just dump the pixel straight

83
00:03:18,000 --> 00:03:20,400
out to memory and see what they look like.

84
00:03:20,600 --> 00:03:24,700
And I did that and, of course, it looked like this, which is partially

85
00:03:24,800 --> 00:03:27,200
not surprising because there's a bunch of things that I didn't

86
00:03:27,200 --> 00:03:28,400
actually do in the thing that dumps.

87
00:03:28,400 --> 00:03:29,600
It's literally just dumping them out.

88
00:03:29,600 --> 00:03:29,800
So you

89
00:03:30,000 --> 00:03:30,900
Wouldn't expect them to look right.

90
00:03:30,900 --> 00:03:34,700
Even if they weren't busted, but what I realized is rather than

91
00:03:34,700 --> 00:03:38,700
debugging this, what I should show you because I think I could

92
00:03:38,700 --> 00:03:40,100
probably debug this straight away.

93
00:03:40,100 --> 00:03:44,100
I've done enough loading of art files and stuff in the past that it's

94
00:03:44,100 --> 00:03:47,200
probably would be pretty easy for me to go ahead and debug this by

95
00:03:47,200 --> 00:03:47,900
intuition.

96
00:03:48,400 --> 00:03:53,400
What I'd rather do is show you sort of the proper low level, basic way

97
00:03:53,800 --> 00:03:57,500
to debug something like this starting from scratch.

98
00:03:58,400 --> 00:04:02,900
And actually it involves another step that you are going to have to

99
00:04:02,900 --> 00:04:03,300
do.

100
00:04:03,500 --> 00:04:07,500
And I need everyone who or doesn't already know how to do this sort of

101
00:04:07,500 --> 00:04:10,200
stuff to actually, trust me and believe that this is something you

102
00:04:10,200 --> 00:04:11,500
want to be able to do.

103
00:04:12,000 --> 00:04:15,000
So what I want you to do is you want you to find a paint practice that

104
00:04:15,000 --> 00:04:17,000
you're comfortable with, if you don't already have one.

105
00:04:17,300 --> 00:04:19,200
So for example, I usually use gimp.

106
00:04:19,500 --> 00:04:21,100
We've been trying out Kita on the stream.

107
00:04:21,100 --> 00:04:22,500
That one seems pretty good as well.

108
00:04:22,900 --> 00:04:25,700
But usually I use gimp and you can get that for any platform.

109
00:04:26,300 --> 00:04:27,900
And so, what I want you to do is I want you to

110
00:04:28,200 --> 00:04:31,700
The pit program that you're comfortable with that is reasonably, you

111
00:04:31,700 --> 00:04:34,400
know that works reasonably can save, you know, a variety of file

112
00:04:34,400 --> 00:04:35,400
formats and whatever.

113
00:04:36,100 --> 00:04:39,600
And what we are going to do is we are going to make a piece of what's

114
00:04:39,600 --> 00:04:41,400
called structured art.

115
00:04:41,600 --> 00:04:46,400
It's basically a art file that is designed to make it easy for us to

116
00:04:46,400 --> 00:04:47,400
debug it.

117
00:04:47,700 --> 00:04:48,300
Right?

118
00:04:48,800 --> 00:04:51,200
So what I'm going to do is I'm going to make a file.

119
00:04:51,200 --> 00:04:54,500
I'm going to make one that's pretty tiny for starters, right?

120
00:04:54,600 --> 00:04:55,300
I'm going to make one.

121
00:04:55,300 --> 00:04:58,000
Let's say I'm just picking these numbers totally.

122
00:04:58,100 --> 00:05:01,700
Randomly, I'm going to make one that 60 pixels by 40 pixels.

123
00:05:01,900 --> 00:05:04,500
Okay, that seems totally reasonable to me.

124
00:05:04,600 --> 00:05:08,800
So here is my 60 pixel by 40 pixel bitmap, right?

125
00:05:09,000 --> 00:05:09,200
Then.

126
00:05:09,200 --> 00:05:12,700
What I want to do is I want to kind of come in here and I want to make

127
00:05:12,700 --> 00:05:13,500
this guy.

128
00:05:14,700 --> 00:05:18,600
I want to make something where I'm going to be able to put a pattern

129
00:05:18,600 --> 00:05:23,600
into it, such that when I load it in to our program.

130
00:05:23,900 --> 00:05:26,700
I know what I should be seeing everywhere.

131
00:05:26,700 --> 00:05:28,000
I know what the values.

132
00:05:28,200 --> 00:05:29,600
Should be right.

133
00:05:29,900 --> 00:05:32,600
So, what you have to do in Gimp, you need to add an alpha Channel.

134
00:05:32,600 --> 00:05:35,700
If you just have one by default, in order to get something that

135
00:05:35,700 --> 00:05:39,100
actually has Alpha like this, right, which is what I actually wanted.

136
00:05:39,100 --> 00:05:42,100
So this is actually, this is this has a zero in the alpha channel

137
00:05:42,100 --> 00:05:43,200
everywhere, right?

138
00:05:43,500 --> 00:05:46,500
And so now, what I want to do is I want to kind of go in there and I

139
00:05:46,500 --> 00:05:50,100
want to put in something that I can easily understand.

140
00:05:50,100 --> 00:05:52,900
So I'm going to use the pencil tool and I'm going to go ahead and set

141
00:05:52,900 --> 00:05:54,700
that size down to like one pixel.

142
00:05:55,200 --> 00:05:58,000
It's kind of awful gimp is at editing pixels.

143
00:05:58,100 --> 00:05:59,800
So like, you know, for stuff like this.

144
00:06:00,000 --> 00:06:03,000
Could arguably you'd actually be better served with a with with

145
00:06:03,000 --> 00:06:03,600
something else.

146
00:06:03,600 --> 00:06:04,500
But you know, it's something.

147
00:06:04,500 --> 00:06:05,100
I know how to use.

148
00:06:05,100 --> 00:06:05,900
I'm going to use it.

149
00:06:06,400 --> 00:06:09,600
So what I'm going to do just as a very simple example of what I'm

150
00:06:09,600 --> 00:06:15,100
talking about is I'm going to go ahead and make one red pixel right at

151
00:06:15,100 --> 00:06:15,800
the beginning.

152
00:06:16,500 --> 00:06:16,900
Okay.

153
00:06:17,200 --> 00:06:21,600
I'm going to go down here to the last row and I'm going to make a blue

154
00:06:21,600 --> 00:06:22,500
pixel, right?

155
00:06:22,500 --> 00:06:25,800
And I again, I'm actually making something that's literally 250 500.

156
00:06:25,800 --> 00:06:29,800
So I'm going to go in here and make something that's like the

157
00:06:30,000 --> 00:06:34,200
Now, the other thing to 5500 255, I'm going to put that right there,

158
00:06:34,400 --> 00:06:34,900
right?

159
00:06:36,100 --> 00:06:39,200
And then I'm going to go ahead and say, all right, at the very end of

160
00:06:39,200 --> 00:06:39,800
the row.

161
00:06:40,000 --> 00:06:43,900
I'm going to, I'm going to put a green in both cases, right?

162
00:06:43,900 --> 00:06:45,400
So I'm going to go ahead and say, all right.

163
00:06:46,100 --> 00:06:51,100
Let's go 02:55 0, right.

164
00:06:51,300 --> 00:06:52,400
So I'm going to put that green.

165
00:06:52,400 --> 00:06:53,600
I'm going to put a green right there.

166
00:06:54,600 --> 00:06:56,800
And I'm going to put a green right here.

167
00:06:57,100 --> 00:06:57,700
There we go.

168
00:06:58,500 --> 00:06:59,900
So there there, I've got my

169
00:07:00,200 --> 00:07:03,800
Sort of pixels in known locations and then I'm going to also

170
00:07:03,800 --> 00:07:08,500
furthermore do something where I get that second row the second row.

171
00:07:08,500 --> 00:07:10,500
I'm going to set to be yellow.

172
00:07:11,300 --> 00:07:11,700
Okay.

173
00:07:12,000 --> 00:07:12,600
Right there.

174
00:07:14,000 --> 00:07:16,100
And I think that's about it for now.

175
00:07:16,600 --> 00:07:19,200
So this is my bitmap right now.

176
00:07:19,200 --> 00:07:22,900
You may ask why on Earth I'm doing this but their answer is because

177
00:07:22,900 --> 00:07:26,700
well the things that are going to go wrong when I actually do this.

178
00:07:26,700 --> 00:07:27,500
So, you know what I should do.

179
00:07:27,500 --> 00:07:29,800
One more thing, I think actually I should do one more.

180
00:07:29,900 --> 00:07:30,400
Nothing.

181
00:07:30,500 --> 00:07:32,600
I'm going to set the next pixel.

182
00:07:33,400 --> 00:07:36,700
Basically to be lets say, maybe white.

183
00:07:37,000 --> 00:07:38,300
I'll set the next pixel to be white.

184
00:07:38,300 --> 00:07:39,500
So everything set.

185
00:07:39,800 --> 00:07:43,200
So the next pixel will be white on that one.

186
00:07:43,200 --> 00:07:44,100
And on this one.

187
00:07:46,200 --> 00:07:50,800
So basically what I've done here is I've put colors in very specific

188
00:07:50,800 --> 00:07:54,200
strategic locations so that I could see.

189
00:07:55,600 --> 00:07:58,600
So that I would know when we look at the actual binary that we load

190
00:07:58,600 --> 00:07:58,900
in.

191
00:07:59,200 --> 00:08:01,000
I would be able to see where things are.

192
00:08:01,100 --> 00:08:03,900
I think I'm also going to cap with black potentially just as one

193
00:08:03,900 --> 00:08:08,300
further thing, just so I can kind of make sure that there's zeros next

194
00:08:08,300 --> 00:08:09,000
to these guys.

195
00:08:09,000 --> 00:08:10,900
If that makes sense, something like that.

196
00:08:11,200 --> 00:08:12,500
Yeah, looks a little better.

197
00:08:13,500 --> 00:08:16,500
And so now what I'm going to do is I'm going to export this, I'm going

198
00:08:16,500 --> 00:08:23,400
to export this as a special test bitmap that we can use to essentially

199
00:08:24,700 --> 00:08:27,100
calibrate, our loading code, that makes sense.

200
00:08:27,500 --> 00:08:30,100
So this is structured art dot BMP.

201
00:08:30,100 --> 00:08:34,200
Let's say, and when it comes up with all of these options, what I want

202
00:08:34,200 --> 00:08:39,299
to do is say, all right, I want it to be in the 32-bit a RGB format,

203
00:08:40,000 --> 00:08:42,200
which is what I tried to save the other guys in.

204
00:08:42,500 --> 00:08:42,900
And, of course.

205
00:08:43,799 --> 00:08:46,000
You know, maybe I didn't quite do it right but that's the format that

206
00:08:46,000 --> 00:08:46,600
I want to save in.

207
00:08:46,600 --> 00:08:49,700
So 32-bit a RGB which is what I thought we were using.

208
00:08:49,800 --> 00:08:54,600
I'm going to go ahead and Export that like so and now we have a bitmap

209
00:08:54,600 --> 00:08:55,300
whose structure.

210
00:08:55,300 --> 00:08:56,800
I know exactly.

211
00:08:57,400 --> 00:08:57,900
Right.

212
00:08:58,400 --> 00:08:59,800
So I'm going to come in here now.

213
00:09:00,400 --> 00:09:04,900
And I'm going to go ahead and I'm going to look at that bitmap in the

214
00:09:04,900 --> 00:09:08,700
loader and see if I can verify that we are loading things properly.

215
00:09:08,800 --> 00:09:09,400
Right?

216
00:09:09,600 --> 00:09:11,100
So, it's that structured art.

217
00:09:11,100 --> 00:09:11,900
Instead of going in there.

218
00:09:11,900 --> 00:09:12,900
It's structured.

219
00:09:13,400 --> 00:09:15,200
All right, bitmap, right?

220
00:09:15,600 --> 00:09:16,700
That's what it's going to be.

221
00:09:16,700 --> 00:09:18,700
And I am going to step in here.

222
00:09:20,500 --> 00:09:24,100
Like so, and now after we read the entire file again, we're reading

223
00:09:24,100 --> 00:09:25,500
structured art dot BMP.

224
00:09:26,000 --> 00:09:29,100
We look at the header, and the header should tell us the things that

225
00:09:29,100 --> 00:09:31,600
we thought it should be such as the width and the height, and it does

226
00:09:31,600 --> 00:09:33,200
look like, that's actually the case.

227
00:09:33,600 --> 00:09:34,800
So that's all good.

228
00:09:34,900 --> 00:09:38,500
And then, we have sort of this bitmap offset that supposed to be where

229
00:09:38,500 --> 00:09:39,600
the actual pixel start.

230
00:09:39,600 --> 00:09:43,300
And so we're using that here to offset ourselves to that location.

231
00:09:43,500 --> 00:09:46,400
And so, now, what I should be able to do is look at the actual pixels

232
00:09:46,400 --> 00:09:49,900
themselves, and I should actually, now be able to see

233
00:09:51,000 --> 00:09:55,200
Structured values that tell me what I am actually looking at, right.

234
00:09:55,400 --> 00:09:57,800
So if I look at these pixels, and I'm going to go ahead and say, let's

235
00:09:57,800 --> 00:10:01,100
look at the first row that comes in, right.

236
00:10:01,200 --> 00:10:03,800
And I'm going to go ahead and say that I knew that thing was supposed

237
00:10:03,800 --> 00:10:05,200
to be 60 wide.

238
00:10:05,200 --> 00:10:08,600
In fact, you know what, I'll look a little bit further than 60.

239
00:10:08,600 --> 00:10:12,900
Let's let's look at like 64 so we can see a little bit over the edge

240
00:10:13,000 --> 00:10:14,000
of that first row.

241
00:10:14,500 --> 00:10:17,800
And so now, if I look at this, what do I see right?

242
00:10:18,500 --> 00:10:19,300
Well, I see that.

243
00:10:19,300 --> 00:10:19,800
There's that

244
00:10:20,300 --> 00:10:25,700
FF, there's that that FF on the low that's filled three pixels in,

245
00:10:25,700 --> 00:10:26,300
right.

246
00:10:26,300 --> 00:10:29,600
And then I see a bunch of stuff that looks kind of.

247
00:10:29,600 --> 00:10:33,400
I don't know, that looks sort of like, it's almost as if we were to

248
00:10:33,400 --> 00:10:39,800
read this in in little endian format, basically, this would actually

249
00:10:39,800 --> 00:10:43,300
be, we would expect that to be the red that to be the green that to be

250
00:10:43,300 --> 00:10:45,700
the blue and this to be the alpha, right.

251
00:10:45,700 --> 00:10:49,300
But if this were in big-endian format again, we would expect it to be

252
00:10:49,300 --> 00:10:50,000
the opposite, right?

253
00:10:50,000 --> 00:10:50,100
So,

254
00:10:50,300 --> 00:10:51,000
Expected to go.

255
00:10:51,000 --> 00:10:57,700
Okay, the top part would be the alpha and then sorry the bottom part

256
00:10:57,700 --> 00:10:58,400
would be the alpha.

257
00:10:58,500 --> 00:11:00,700
So be rgba, right?

258
00:11:00,700 --> 00:11:01,600
Looking like that.

259
00:11:03,000 --> 00:11:06,800
So looking at all of these zeros here, it pretty much tells me that

260
00:11:06,800 --> 00:11:11,300
either we're off by a little bit or these are getting red in, not the

261
00:11:11,300 --> 00:11:13,800
same color order as we think of them, right?

262
00:11:13,800 --> 00:11:18,000
Because when we were thinking of them, this was a this was our this

263
00:11:18,000 --> 00:11:18,500
was ji.

264
00:11:18,500 --> 00:11:20,100
This was be and it's pretty.

265
00:11:20,300 --> 00:11:23,800
Clear that our bitmap when we made, it was not at all.

266
00:11:24,200 --> 00:11:27,500
Like most of the values in it should have a zero Alpha.

267
00:11:27,500 --> 00:11:29,600
And so that zero is clearly our Alpha.

268
00:11:29,700 --> 00:11:33,700
And so why the alpha is ending up there is a very good question,

269
00:11:33,700 --> 00:11:34,000
right?

270
00:11:34,000 --> 00:11:35,500
And something that we need to think about.

271
00:11:36,000 --> 00:11:41,100
So let's think about this a little bit more if I go in here, and I

272
00:11:41,100 --> 00:11:42,900
look at my two rows that I've got.

273
00:11:43,000 --> 00:11:50,200
I've got blue white, and a, and a, and a black, and I've got a red, a

274
00:11:50,300 --> 00:11:51,000
it in a black.

275
00:11:51,000 --> 00:11:55,300
Now, it occurs to me after I'm looking at it here since we don't know

276
00:11:55,300 --> 00:11:57,700
which order red and blue go in.

277
00:11:57,700 --> 00:11:59,800
I probably should have swapped these right.

278
00:12:00,000 --> 00:12:02,900
When I probably should have done and I guess I could do that right now

279
00:12:03,300 --> 00:12:06,400
is use something unambiguous like green which will show up in the

280
00:12:06,400 --> 00:12:08,000
middle channel, right?

281
00:12:08,000 --> 00:12:10,500
That'd be an easier way for me, to sort of Bullseye.

282
00:12:10,500 --> 00:12:13,500
Exactly what order my stuff is coming in at because I don't know

283
00:12:13,500 --> 00:12:16,600
whether the bottom row stored first or whether the top row stored

284
00:12:16,600 --> 00:12:17,100
first.

285
00:12:18,000 --> 00:12:21,000
I mean, I kind of probably do because I think I remember stuff about

286
00:12:21,000 --> 00:12:21,600
the bitmap format.

287
00:12:21,600 --> 00:12:23,800
But again, if you're coming at this completely fresh, you wouldn't

288
00:12:23,800 --> 00:12:26,600
know it could be stored from the bottom up could be start from the top

289
00:12:26,600 --> 00:12:29,700
down, heck it couldn't, you could even be stored like columnar for

290
00:12:29,700 --> 00:12:29,800
all.

291
00:12:30,000 --> 00:12:33,500
We know, so we want our structured art to have enough information in

292
00:12:33,500 --> 00:12:36,900
it that we can literally figure out basically anything that we might

293
00:12:36,900 --> 00:12:37,900
need to know.

294
00:12:38,000 --> 00:12:41,600
Just by looking at what comes out in the structured art, if that makes

295
00:12:41,600 --> 00:12:42,000
sense.

296
00:12:42,600 --> 00:12:43,800
So I'm going to change.

297
00:12:44,200 --> 00:12:45,700
I'm going to change around what we did.

298
00:12:46,400 --> 00:12:47,500
There we go.

299
00:12:47,700 --> 00:12:53,000
Okay, blue blue, and then I'm going to go ahead and Export that.

300
00:12:53,600 --> 00:12:58,100
So now I expect to see red is at the top, green is at the bottom.

301
00:12:58,200 --> 00:12:59,700
So whether I see,

302
00:13:00,000 --> 00:13:01,900
Thing that looks like a blue or whether I see something that's like a

303
00:13:01,900 --> 00:13:02,200
red.

304
00:13:02,200 --> 00:13:04,800
I know that I'm looking at that unless they started this way and went

305
00:13:04,800 --> 00:13:07,000
that way, which I've never seen before an entire thing.

306
00:13:07,000 --> 00:13:09,600
But even if that happened, I would know because there wouldn't be a

307
00:13:09,600 --> 00:13:10,700
white in between.

308
00:13:10,900 --> 00:13:13,200
So I would see that the black came immediately afterwards.

309
00:13:13,900 --> 00:13:15,500
All right, so I'm going to step back in here.

310
00:13:15,500 --> 00:13:16,600
Going to go down here again.

311
00:13:16,600 --> 00:13:17,900
Take a look at that pixel pointer.

312
00:13:18,700 --> 00:13:20,500
So there's our green, right?

313
00:13:20,500 --> 00:13:23,800
We know that's pretty much unambiguously going to be green because

314
00:13:23,800 --> 00:13:27,800
there's no way pretty much that if this is, we know, this is the alpha

315
00:13:27,800 --> 00:13:28,600
at this point.

316
00:13:28,600 --> 00:13:29,800
So be kind of now know that that's the

317
00:13:29,900 --> 00:13:32,500
The green Channel because it's, there's no nobody's in the history of

318
00:13:32,500 --> 00:13:32,800
time.

319
00:13:32,800 --> 00:13:36,400
As far as I know ever, stored, green, red or blue.

320
00:13:36,400 --> 00:13:36,900
In the middle.

321
00:13:36,900 --> 00:13:38,600
It's always green and ends up in the middle.

322
00:13:39,000 --> 00:13:40,300
So that means we're looking at this row.

323
00:13:40,400 --> 00:13:42,400
So, basically, we're a bottom up.

324
00:13:42,600 --> 00:13:47,500
We're storing the bottom row first, and we're going upwards, right?

325
00:13:48,100 --> 00:13:53,200
And we now know the format, the format is that the first thing is the

326
00:13:53,200 --> 00:13:56,700
alpha channel, the first bite, because you remember, we could also

327
00:13:56,700 --> 00:13:59,200
look at this invite order if you wanted to.

328
00:13:59,200 --> 00:13:59,800
So we can

329
00:14:00,000 --> 00:14:03,500
And ignore endianness for a moment and just look at it and B order,

330
00:14:03,900 --> 00:14:04,400
right?

331
00:14:04,400 --> 00:14:06,100
Here's that first pixel.

332
00:14:06,900 --> 00:14:10,100
So we now know that like, the first bite is an alpha value.

333
00:14:10,200 --> 00:14:13,400
The second byte is, you know, either red or blue.

334
00:14:13,400 --> 00:14:14,200
We don't know.

335
00:14:14,400 --> 00:14:15,600
The next one is green.

336
00:14:16,000 --> 00:14:18,900
And then the next one is whatever this one wasn't, right.

337
00:14:19,000 --> 00:14:20,600
So it's a something G.

338
00:14:20,600 --> 00:14:22,500
Something is the byte order, right?

339
00:14:22,500 --> 00:14:26,200
So, I can basically say right now that I've determined, that rather

340
00:14:26,200 --> 00:14:27,600
unequivocally, right?

341
00:14:28,300 --> 00:14:29,800
Note, KC B.

342
00:14:29,900 --> 00:14:36,900
Order in memory, is it's a, a something, something, Gigi something

343
00:14:36,900 --> 00:14:37,300
something.

344
00:14:37,300 --> 00:14:40,400
So all I need to know now is which one of these is green?

345
00:14:40,400 --> 00:14:41,600
And which one of these is blue?

346
00:14:41,700 --> 00:14:42,800
Well, that shouldn't be too hard.

347
00:14:42,800 --> 00:14:43,700
Because here's my white.

348
00:14:43,700 --> 00:14:44,600
Here's my black.

349
00:14:44,800 --> 00:14:48,600
Here's my, my sort of Alfred pixels, right?

350
00:14:48,700 --> 00:14:54,400
But when I get to the end of the row, if I go 64 of these out, right?

351
00:14:55,200 --> 00:14:56,900
So, I get 64 of these out.

352
00:14:57,000 --> 00:14:59,500
I will see right here when I get there.

353
00:15:00,300 --> 00:15:03,000
Sorry, this and more human readable form in terms of it.

354
00:15:03,000 --> 00:15:03,500
Right?

355
00:15:03,600 --> 00:15:05,000
So, I get 60 out.

356
00:15:05,000 --> 00:15:05,800
Is the end.

357
00:15:05,800 --> 00:15:06,000
Right?

358
00:15:06,000 --> 00:15:10,100
So, this was the last pixel in the row was number 59, and I don't know

359
00:15:10,100 --> 00:15:11,500
if this will, this reset it.

360
00:15:11,700 --> 00:15:12,500
Of course, it does.

361
00:15:12,500 --> 00:15:12,900
Thanks.

362
00:15:13,100 --> 00:15:14,300
That's so helpful.

363
00:15:14,400 --> 00:15:17,800
Thank you visual studio for you, unbelievable.

364
00:15:17,900 --> 00:15:22,400
Anyway, so, basically, you know, here is my Alpha pixels that have

365
00:15:22,400 --> 00:15:23,100
nothing in them.

366
00:15:23,200 --> 00:15:27,000
And then I see the black value, which is what I expect to see.

367
00:15:27,100 --> 00:15:27,400
Right.

368
00:15:27,400 --> 00:15:29,400
And again, I guess, I know now that I'm on this row, so I'm not

369
00:15:29,400 --> 00:15:29,800
wondering what

370
00:15:30,000 --> 00:15:30,900
Jerome on this row.

371
00:15:31,000 --> 00:15:34,200
And so now I expect to see a blue and that's blue.

372
00:15:34,500 --> 00:15:38,700
So now what I know is the order is goes Alpha first, right?

373
00:15:39,200 --> 00:15:44,700
Then blue, then green, then red is I guess what we're basically saying

374
00:15:45,100 --> 00:15:47,100
is happening here, right?

375
00:15:47,500 --> 00:15:50,300
So again, if we look at that, we've got to multiply this out a little

376
00:15:50,300 --> 00:15:50,700
bit more.

377
00:15:50,700 --> 00:15:52,200
If I want to look at it and fight order.

378
00:15:52,600 --> 00:15:58,100
But invite order in memory, it looks rather unequivocally like we are

379
00:15:58,100 --> 00:15:59,700
seeing again Alpha values.

380
00:16:00,000 --> 00:16:00,700
First.

381
00:16:01,300 --> 00:16:04,000
And then, like I said, when we kind of come down here and take a look

382
00:16:04,000 --> 00:16:08,500
at it again, so I can be sure of what we are looking at.

383
00:16:08,700 --> 00:16:11,100
It's always hard when you are off at off pixels.

384
00:16:11,500 --> 00:16:14,400
So there's the alpha, something, something, something, Alpha,

385
00:16:14,400 --> 00:16:17,100
something, something something Alpha, something, something something.

386
00:16:17,100 --> 00:16:22,200
Now, we have Alpha the color, something something, right?

387
00:16:22,800 --> 00:16:26,200
And so, since we expect that to be blue, that means that blue comes

388
00:16:26,200 --> 00:16:28,000
first, right?

389
00:16:28,200 --> 00:16:29,500
So I believe,

390
00:16:30,100 --> 00:16:34,600
That this is our order in memory and again, pretty much determine that

391
00:16:34,600 --> 00:16:36,400
strictly from the structured art, right?

392
00:16:36,800 --> 00:16:40,900
I determine both in and let's see bottom up.

393
00:16:42,800 --> 00:16:45,300
So basically, we also know that we start with that bottom row first.

394
00:16:45,600 --> 00:16:48,700
So again, that is Without Really knowing anything about the.

395
00:16:48,700 --> 00:16:50,100
The bitmap file format.

396
00:16:51,000 --> 00:16:54,000
That was basically a way that I could reverse-engineer how the data is

397
00:16:54,000 --> 00:16:56,700
stored using this, this sort of trick.

398
00:16:56,700 --> 00:16:59,100
Now in the case of bitmap, we can just go have.

399
00:16:59,100 --> 00:17:01,900
We could just have read on the internet, what the format was.

400
00:17:02,100 --> 00:17:07,000
So it's not so important to be able to do this perhaps, but two things

401
00:17:07,000 --> 00:17:10,200
are kind of nice about this one, it definitely AIDS in debugging,

402
00:17:10,200 --> 00:17:12,000
because if your bitmap loader is broken, even,

403
00:17:12,099 --> 00:17:13,599
Do you know the format?

404
00:17:13,900 --> 00:17:16,200
You may still have written buggy code, right?

405
00:17:16,200 --> 00:17:19,599
And finding that buggy code is way easier when you know what you're

406
00:17:19,599 --> 00:17:24,200
looking at in in sort of the, the variables and in the memory, when

407
00:17:24,200 --> 00:17:26,599
you know that the first pixel should be green or the first we should

408
00:17:26,599 --> 00:17:27,300
be read.

409
00:17:27,300 --> 00:17:30,100
It's much easier to verify that it actually was, whereas, if you're

410
00:17:30,100 --> 00:17:33,300
just loading some bitmap that an artist made, who knows what the first

411
00:17:33,300 --> 00:17:34,000
pixel should be.

412
00:17:34,000 --> 00:17:36,400
It's really hard to tell and you have to keep like looking back and

413
00:17:36,400 --> 00:17:39,400
using like the eyedropper and you hope that that pixel doesn't exist

414
00:17:39,400 --> 00:17:39,900
somewhere else.

415
00:17:39,900 --> 00:17:41,500
That could be duplicated, you know, whatever.

416
00:17:44,900 --> 00:17:47,800
So there's that there's also the case that when you are a game

417
00:17:47,800 --> 00:17:52,100
developer, you will also find yourself often times dealing with file

418
00:17:52,100 --> 00:17:55,800
formats that are just plain not documented or not documented very well

419
00:17:56,000 --> 00:17:58,100
and being able to do these kind of structured art techniques.

420
00:17:58,200 --> 00:17:59,900
If you do have access to the art tool that creates

421
00:18:00,000 --> 00:18:02,900
The art can be really handy because you can push structured stuff

422
00:18:02,900 --> 00:18:03,300
through.

423
00:18:03,400 --> 00:18:04,600
See what comes out on the other end.

424
00:18:04,600 --> 00:18:07,300
And that's basically a little bit of Black Box engineering, you can do

425
00:18:07,700 --> 00:18:10,100
to figure out the stuff that wasn't documented.

426
00:18:10,100 --> 00:18:11,600
So there you go.

427
00:18:12,000 --> 00:18:13,600
So now we kind of know what we're dealing with here.

428
00:18:13,600 --> 00:18:14,900
We know, we're dealing with a byte order.

429
00:18:14,900 --> 00:18:16,600
That's a b gr.

430
00:18:16,800 --> 00:18:20,500
And so what we want to do is that's actually not very good for our

431
00:18:20,500 --> 00:18:23,400
purposes, because remember, when that actually gets loaded in?

432
00:18:23,800 --> 00:18:25,600
So in little-endian right?

433
00:18:25,600 --> 00:18:29,800
When that gets loaded in, we basically have a thing that's going to

434
00:18:30,100 --> 00:18:32,600
Put, you know, it's going to essentially reverse this if you actually

435
00:18:32,600 --> 00:18:35,600
go about it, the a comes first, then the B, then the then the G, then

436
00:18:35,600 --> 00:18:39,300
the are then what we're going to have is that AA is going to get

437
00:18:39,300 --> 00:18:40,400
loaded in first.

438
00:18:40,400 --> 00:18:45,300
Then the BP right, then the GG then the are are right.

439
00:18:45,300 --> 00:18:45,400
Now.

440
00:18:45,400 --> 00:18:49,600
What's kind of weird about that is that that's almost what we want.

441
00:18:51,000 --> 00:18:52,700
That's almost what we wanted.

442
00:18:52,700 --> 00:18:56,100
But we have our a stored at the top instead of the bottom, right?

443
00:18:56,200 --> 00:18:56,900
You know what I'm saying?

444
00:18:56,900 --> 00:18:58,200
It's just a little bit weird.

445
00:18:58,400 --> 00:18:59,800
It's like it's closed.

446
00:19:00,500 --> 00:19:01,800
It's just no cigar.

447
00:19:01,800 --> 00:19:06,600
Like if we are expecting it to look like that, but it sure looks like

448
00:19:06,600 --> 00:19:08,400
from the data that it actually.

449
00:19:08,400 --> 00:19:10,200
It's shifted like that.

450
00:19:10,200 --> 00:19:12,900
So what we need to do is kind of shift it down and move the alpha back

451
00:19:12,900 --> 00:19:14,000
to the top, right?

452
00:19:14,000 --> 00:19:16,800
That's what we would need to do to make this thing correct.

453
00:19:17,300 --> 00:19:19,400
And so I can actually write a loop to do that.

454
00:19:19,500 --> 00:19:21,900
And then it would be in the same format that are pixels were actually

455
00:19:21,900 --> 00:19:22,300
in, right?

456
00:19:22,300 --> 00:19:25,200
Like I could do something where I just do this, right?

457
00:19:25,200 --> 00:19:29,400
I could do something where I do Loop through all of these sorts of

458
00:19:29,400 --> 00:19:30,100
things here, so,

459
00:19:30,200 --> 00:19:37,800
Go, you know, header width or whatever, plus plus Y and then I do, you

460
00:19:37,800 --> 00:19:39,300
know, for you.

461
00:19:39,300 --> 00:19:46,100
Aunt, 32 x equals 0 x is less than header height plus plus X.

462
00:19:46,100 --> 00:19:47,400
And then inside here.

463
00:19:47,900 --> 00:19:50,100
I basically take the pixel.

464
00:19:50,100 --> 00:19:50,900
So I have a

465
00:19:54,900 --> 00:19:58,700
Porter to the pixel and each time through, I'm going to basically say

466
00:19:58,700 --> 00:20:02,700
that Source desk equals Source desk and I'm going to just kind of

467
00:20:02,700 --> 00:20:04,900
Shuffle it around a little bit and then I'm going to move sourced as

468
00:20:04,900 --> 00:20:05,400
forward.

469
00:20:05,500 --> 00:20:09,900
So basically Source test is going to equal to equal to base of the

470
00:20:09,900 --> 00:20:10,600
shuffle here.

471
00:20:10,800 --> 00:20:14,400
I need to shift it down by 8, so that I line up the are G and the B

472
00:20:14,400 --> 00:20:16,700
where they're normally supposed to be, but then I need to or it with

473
00:20:16,700 --> 00:20:21,400
itself, shift it up 24 to, basically get that Alpha up in the top,

474
00:20:21,500 --> 00:20:21,700
right?

475
00:20:21,700 --> 00:20:24,300
So I just got a I just going to basically rotate that around.

476
00:20:24,500 --> 00:20:27,900
I believe that will give me something that's a little bit closer to

477
00:20:27,900 --> 00:20:29,500
what I would have been expecting, right?

478
00:20:29,500 --> 00:20:33,200
That's that's kind of, yeah, that's a that's going to be laid out in

479
00:20:33,200 --> 00:20:35,400
byte order a little bit better than what I thought.

480
00:20:35,400 --> 00:20:37,800
Now, of course, I don't actually remember what these were called, the

481
00:20:37,800 --> 00:20:38,300
header.

482
00:20:38,500 --> 00:20:39,400
Let's see.

483
00:20:39,400 --> 00:20:39,800
Assignments.

484
00:20:39,800 --> 00:20:40,300
I do write.

485
00:20:40,300 --> 00:20:43,500
These are, these are signed in the header, and I'm going to put a

486
00:20:43,500 --> 00:20:46,300
little to do in here because I happen to know this, but I'm going to

487
00:20:46,300 --> 00:20:49,200
say or I'll just put a note note Casey.

488
00:20:50,400 --> 00:20:55,700
If you are using this generically for some reason.

489
00:20:57,900 --> 00:20:59,800
Please remember that.

490
00:21:00,000 --> 00:21:07,500
BMP, files can go in either direction and the height will be negative

491
00:21:07,700 --> 00:21:10,000
for top down.

492
00:21:10,300 --> 00:21:13,300
So, basically, after something, I know about the bitmap file format.

493
00:21:14,900 --> 00:21:17,400
Also, there can be compression.

494
00:21:17,400 --> 00:21:18,600
Etcetera, Etc.

495
00:21:19,400 --> 00:21:27,700
Don't think this is complete BMP, loading code because it isn't

496
00:21:28,800 --> 00:21:29,700
Something like that.

497
00:21:29,900 --> 00:21:31,900
Just in case anyone thinks this is a BMP loader.

498
00:21:31,900 --> 00:21:34,900
It's really not it's just going to load our assets temporarily.

499
00:21:35,600 --> 00:21:39,900
So but ignoring that I basically done the the little Shuffle that I

500
00:21:39,900 --> 00:21:40,700
think is necessary.

501
00:21:40,700 --> 00:21:44,900
So I'm going to go ahead and take a look and see if basically that

502
00:21:45,100 --> 00:21:48,500
that produces color values that are more in line with what I expected

503
00:21:48,500 --> 00:21:51,800
to see instead of instead of what we were actually getting.

504
00:21:52,100 --> 00:21:56,600
And so here is our source vest pointer basically, which we are kind of

505
00:21:56,700 --> 00:21:58,500
modifying and place again.

506
00:21:58,700 --> 00:22:01,800
Believe this, this pixel right here.

507
00:22:01,800 --> 00:22:03,200
Is this one down at the bottom?

508
00:22:03,200 --> 00:22:03,800
Right?

509
00:22:03,900 --> 00:22:09,500
And so what I want that thing to do is I want to have r g and B.

510
00:22:09,500 --> 00:22:12,300
I want to actually move the Alpha from the bottom to the top.

511
00:22:12,300 --> 00:22:12,900
Right?

512
00:22:13,200 --> 00:22:16,200
So what I should see afterwards is basically that yes, which is, which

513
00:22:16,200 --> 00:22:20,100
is what I got so that will, that will do the shuffle for us there, but

514
00:22:20,100 --> 00:22:21,500
we still have another problem.

515
00:22:22,000 --> 00:22:24,300
Our other problem is basically,

516
00:22:25,200 --> 00:22:29,400
That are we're basically bottom up instead of top-down.

517
00:22:30,000 --> 00:22:33,400
And so I guess I don't really know what I want to do about that one by

518
00:22:33,400 --> 00:22:33,600
the other.

519
00:22:33,600 --> 00:22:36,400
We could just say that our art works that way because there really

520
00:22:36,400 --> 00:22:39,200
isn't any reason not to have it happen like that.

521
00:22:39,500 --> 00:22:41,100
So I don't know what I want to say about that.

522
00:22:41,100 --> 00:22:44,000
Maybe we'll just go ahead and leave that, but we could also invert it

523
00:22:44,000 --> 00:22:46,400
here if we wanted to go the other direction, right?

524
00:22:46,500 --> 00:22:49,200
That's something we could decide to do.

525
00:22:49,500 --> 00:22:51,400
But for now, we're just going to leave that.

526
00:22:52,100 --> 00:22:54,800
All right, and so now, if I actually run this, I don't remember.

527
00:22:55,000 --> 00:22:57,300
Or what's our, what's our code down here that we were just using to

528
00:22:57,300 --> 00:22:58,600
test to put things on the screen.

529
00:22:59,100 --> 00:22:59,700
I don't remember.

530
00:22:59,700 --> 00:23:00,100
Okay.

531
00:23:00,200 --> 00:23:05,500
So basically what this is now this code actually needs to kind of know

532
00:23:05,600 --> 00:23:09,800
the size of the thing that it's actually going to be copying if we

533
00:23:09,800 --> 00:23:12,300
actually want to start trying to copy things correctly.

534
00:23:12,400 --> 00:23:15,200
So one thing that we are going to have to do is we're going to have to

535
00:23:15,200 --> 00:23:19,300
store some information about this pixel pointer that we have here.

536
00:23:19,300 --> 00:23:21,600
So we're going to have to make, you know, pixel width and a pixel

537
00:23:21,600 --> 00:23:22,000
height.

538
00:23:22,000 --> 00:23:24,700
And when we load the thing, we're essentially going to

539
00:23:24,900 --> 00:23:26,600
Have to fill out all those values.

540
00:23:26,600 --> 00:23:29,900
Now one thing that you'll notice is that base.

541
00:23:29,900 --> 00:23:31,300
Well, I guess you know, what I could do though.

542
00:23:31,700 --> 00:23:35,000
I guess I could I could hold off on that as I can just say that since

543
00:23:35,000 --> 00:23:38,300
we know what those are I'll just go ahead and and hard-code them in

544
00:23:38,300 --> 00:23:38,600
for now.

545
00:23:38,600 --> 00:23:41,700
But you know, obviously in a couple seconds here, we're going to have

546
00:23:41,700 --> 00:23:44,200
to make that real because we're going to be loading arbitrary bitmaps

547
00:23:44,200 --> 00:23:45,300
and we can't hard-code things.

548
00:23:45,800 --> 00:23:47,000
So 60 by 40.

549
00:23:47,100 --> 00:23:47,500
So base.

550
00:23:47,500 --> 00:23:51,400
So we know we have to copy 40 rows and we know we have to copy 60.

551
00:23:52,600 --> 00:23:53,100
Columns.

552
00:23:53,300 --> 00:23:54,000
So there we go.

553
00:23:54,300 --> 00:23:57,100
And when we copy this out, what we need to do now is we need to make

554
00:23:57,100 --> 00:23:59,800
sure that when we're copying the source of the desk here.

555
00:24:00,000 --> 00:24:03,100
Actually copying from the right places, right?

556
00:24:03,600 --> 00:24:05,800
And so, I guess I should I could also do it this way.

557
00:24:05,800 --> 00:24:09,600
I could say, I could put the pixel with that were copying in here.

558
00:24:10,000 --> 00:24:12,900
We're copying it that like that and the, let's see.

559
00:24:13,300 --> 00:24:13,800
There we go.

560
00:24:14,000 --> 00:24:15,500
I might make those sign for now.

561
00:24:16,100 --> 00:24:16,700
There we go.

562
00:24:17,200 --> 00:24:22,300
And so this is pixel height and this is pixel width like that.

563
00:24:22,900 --> 00:24:26,400
And then what I'm going to do here is the destination, right?

564
00:24:26,500 --> 00:24:29,800
I need to advance that every time I'm not going by

565
00:24:30,400 --> 00:24:32,800
The this is not going to fill the screen, right?

566
00:24:32,800 --> 00:24:34,000
This bitmap is too small.

567
00:24:34,700 --> 00:24:38,300
So what I need to do here is I need to actually go ahead and in the

568
00:24:38,300 --> 00:24:39,000
dest.

569
00:24:39,100 --> 00:24:42,700
I need to sort of turn this into the format, we were using before

570
00:24:42,700 --> 00:24:44,500
where we basically have a Destro, right?

571
00:24:44,500 --> 00:24:48,400
And if I remember correctly inside our buffer, we actually sort of

572
00:24:49,900 --> 00:24:51,100
inside our buffer code.

573
00:24:51,200 --> 00:24:55,100
We actually had the stride that we actually wanted to use, right?

574
00:24:55,200 --> 00:24:58,500
If you remember, we had this our pixel pitch, so really, I'm going to

575
00:24:58,500 --> 00:24:59,300
go ahead and say,

576
00:25:00,000 --> 00:25:03,000
That we've got sort of a Destro pointer, and at the end here every

577
00:25:03,000 --> 00:25:07,000
time we do Destro plus equals that buffer pitch, right?

578
00:25:07,000 --> 00:25:07,600
Like this.

579
00:25:07,700 --> 00:25:08,300
So we advance.

580
00:25:08,300 --> 00:25:13,300
And then here is where we actually do our desk by taking where the

581
00:25:13,300 --> 00:25:13,800
actual row is.

582
00:25:13,800 --> 00:25:16,700
And again, that's because we're not actually filling a whole row here.

583
00:25:16,700 --> 00:25:20,400
So we need to actually use that pitch to advance to the next row.

584
00:25:20,400 --> 00:25:23,200
And we don't want to use, we don't want to have the offset that we

585
00:25:23,500 --> 00:25:24,700
happen to get whatever.

586
00:25:24,700 --> 00:25:26,200
We don't want to use this like pixel pitch.

587
00:25:26,200 --> 00:25:29,500
We've moved pixel pitch forward and we don't want to start from there

588
00:25:29,500 --> 00:25:29,800
on the next.

589
00:25:29,900 --> 00:25:31,200
Do you want to start back at the beginning?

590
00:25:32,000 --> 00:25:32,300
All right.

591
00:25:32,300 --> 00:25:33,800
So basically we're going to do that.

592
00:25:33,900 --> 00:25:36,700
We're going to copy out of the source, and this should be, I guess,

593
00:25:36,900 --> 00:25:39,700
basically upside down now because we haven't done anything about that.

594
00:25:39,700 --> 00:25:42,400
We're copying into the the other buffer, all right, side up.

595
00:25:42,400 --> 00:25:44,800
And there, you can kind of see that we're sort of starting to get that

596
00:25:44,800 --> 00:25:45,400
bitmap there.

597
00:25:45,400 --> 00:25:47,100
That looks a little bit more correct.

598
00:25:47,100 --> 00:25:49,100
It looks a little bit more like what we would expect to see.

599
00:25:50,000 --> 00:25:55,800
I'm going to go ahead and choose me, do a little one more thing here,

600
00:25:55,900 --> 00:25:58,500
which is that the amount that we're going to copy this row thing.

601
00:25:58,500 --> 00:25:59,800
We kind of want to be able to do this on

602
00:25:59,900 --> 00:26:00,800
Both sides, right?

603
00:26:00,800 --> 00:26:04,500
We kind of want to be able to copy regardless of which ones bigger.

604
00:26:04,500 --> 00:26:10,800
So if the source right, if the source row was if the if the thing

605
00:26:10,800 --> 00:26:15,800
we're copying from happens to itself be larger than the screen, we

606
00:26:15,800 --> 00:26:17,100
want to be able to handle that as well.

607
00:26:17,100 --> 00:26:19,600
Whereas right now, we wouldn't because we just keep on copying right

608
00:26:19,600 --> 00:26:21,700
off and wrap around to the other side of the screen, right?

609
00:26:21,700 --> 00:26:25,700
So what we want to do here is basically say, okay we're going to use

610
00:26:25,700 --> 00:26:26,900
that.

611
00:26:26,900 --> 00:26:29,800
We have the pixel within the pixel height, but we need one more thing.

612
00:26:29,900 --> 00:26:34,200
Thing basically, which we'll call like the blind with and the blitz

613
00:26:34,200 --> 00:26:34,900
height, right?

614
00:26:34,900 --> 00:26:37,600
We need how much we're actually in a copy and we're going to assume

615
00:26:37,600 --> 00:26:41,100
that those are the pixel width and the pixel height for now, right?

616
00:26:41,200 --> 00:26:46,600
But in the case, where that the blind height is actually bigger than

617
00:26:47,300 --> 00:26:49,300
the bigger than the screen.

618
00:26:49,300 --> 00:26:52,100
If the width or height or bigger than the screen, then we're going to

619
00:26:52,100 --> 00:26:53,100
use the screen size.

620
00:26:53,100 --> 00:26:57,100
So we're basically clipping the amount that we're copying to the size

621
00:26:57,100 --> 00:26:59,800
of the screen so that we never overflow the screen size, right?

622
00:27:00,100 --> 00:27:00,700
Circus weed.

623
00:27:00,700 --> 00:27:03,300
That would be bad weed, overwrite memory, or other bad things.

624
00:27:07,100 --> 00:27:07,600
Okay.

625
00:27:08,600 --> 00:27:09,300
So, there we go.

626
00:27:09,600 --> 00:27:11,700
So that's just a simple thing to guard against that.

627
00:27:12,300 --> 00:27:13,900
I've got my pixel width and pixel height here.

628
00:27:13,900 --> 00:27:15,100
We're going to have to load those from a file.

629
00:27:15,100 --> 00:27:17,500
But first I wanted to do this part.

630
00:27:17,500 --> 00:27:20,000
We're basically we go ahead and we get the source row.

631
00:27:21,100 --> 00:27:24,000
And we have the Destro each time.

632
00:27:24,000 --> 00:27:27,100
We go through Source, row is also has to be updated.

633
00:27:27,100 --> 00:27:29,400
So that's going to update by that pixel width.

634
00:27:29,400 --> 00:27:31,700
Again, that moves us from one row to the next row.

635
00:27:31,700 --> 00:27:32,300
Right?

636
00:27:32,800 --> 00:27:35,200
And the other thing we need to do is since we're copying top down at

637
00:27:35,200 --> 00:27:35,900
this point.

638
00:27:36,000 --> 00:27:37,800
Remember our information.

639
00:27:37,800 --> 00:27:42,500
Our our bitmap is actually stored.

640
00:27:44,200 --> 00:27:46,800
Excuse me is actually stored upside down.

641
00:27:46,800 --> 00:27:49,800
So we want to do is we actually want to copy from the top of the

642
00:27:49,800 --> 00:27:53,700
bitmap, which is actually the last row and we actually want to move up

643
00:27:53,700 --> 00:27:54,300
each time.

644
00:27:54,500 --> 00:27:57,400
So instead of adding pixel width, what we're really doing is time to

645
00:27:57,400 --> 00:27:58,700
subtracting pixel width, right?

646
00:27:58,700 --> 00:28:00,800
We want to start at the very last row and then move up.

647
00:28:01,100 --> 00:28:05,600
So really what we want to do is pre Advanced pixel pointer right by

648
00:28:05,600 --> 00:28:07,900
the pixel width times.

649
00:28:07,900 --> 00:28:09,800
The pixel height minus 1, right?

650
00:28:09,800 --> 00:28:13,800
We want to basically go all the way down to the last row and start.

651
00:28:14,000 --> 00:28:14,500
There.

652
00:28:14,800 --> 00:28:17,500
And that way, we'll copy the thing right side up.

653
00:28:17,500 --> 00:28:18,400
If that makes sense.

654
00:28:18,900 --> 00:28:20,300
Then we basically go through here.

655
00:28:20,500 --> 00:28:24,100
We're going to use that blit height and that put with all right, just

656
00:28:24,100 --> 00:28:25,600
to go ahead and copy things out.

657
00:28:25,700 --> 00:28:30,700
We do the pixel copy like like so as they say oh and I got to actually

658
00:28:30,700 --> 00:28:34,500
make a source pointer here, right Source row like that.

659
00:28:35,700 --> 00:28:38,500
Okay, so let's see what we get there.

660
00:28:39,000 --> 00:28:40,500
So hopefully that would be right side up.

661
00:28:40,500 --> 00:28:40,900
Now.

662
00:28:40,900 --> 00:28:46,800
I wish that I had zoom in but I don't think I do at the moment.

663
00:28:47,800 --> 00:28:48,900
That's unfortunate.

664
00:28:49,100 --> 00:28:52,300
But what I can of course, do is I can select this window hit alt

665
00:28:52,300 --> 00:28:54,700
printscreen and then go over into Camp.

666
00:28:55,300 --> 00:28:58,500
I can then do paste as new image.

667
00:28:58,900 --> 00:29:02,000
And now I can go ahead and zoom in there and see what it is that I'm

668
00:29:02,000 --> 00:29:04,100
looking at and let's take a look.

669
00:29:04,100 --> 00:29:05,400
So there's our image.

670
00:29:06,100 --> 00:29:07,500
This is what we expect.

671
00:29:07,500 --> 00:29:09,700
This is what we got, and, hey, it's exactly right.

672
00:29:09,700 --> 00:29:13,600
So, everyone's happy there is joy in Mudville and structured art has

673
00:29:13,600 --> 00:29:20,500
saved the day now, if we go ahead and flip back here and say, well,

674
00:29:20,500 --> 00:29:20,800
okay.

675
00:29:20,800 --> 00:29:24,200
Let's try loading, something a little fancier here.

676
00:29:24,500 --> 00:29:27,900
Let's go back to our other bitmap and see if we fare as well, because

677
00:29:27,900 --> 00:29:29,100
maybe we won't.

678
00:29:29,200 --> 00:29:32,500
So, let's take a look at, I forget what that was called in the

679
00:29:32,500 --> 00:29:35,500
handmade hoopster, handmade test.

680
00:29:37,100 --> 00:29:37,800
Test.

681
00:29:38,100 --> 00:29:40,200
It's called test background dot BMP.

682
00:29:41,000 --> 00:29:44,800
So basically, mmm-hmm.

683
00:29:50,600 --> 00:29:51,400
Now, I guess that's fine.

684
00:29:51,700 --> 00:29:54,600
Alright, anyway, so we're the day address tree and we have test

685
00:29:54,700 --> 00:29:55,900
background dot BMP.

686
00:29:56,600 --> 00:29:59,000
So now let's see if that works.

687
00:29:59,000 --> 00:29:59,800
Now, we need to know again.

688
00:30:00,000 --> 00:30:01,500
You're not actually saving the size.

689
00:30:01,800 --> 00:30:05,700
So let's go ahead and set that pixel width to what we know that thing

690
00:30:05,700 --> 00:30:06,500
actually is.

691
00:30:06,500 --> 00:30:09,700
I forget, we're actually had that, I think was in the properties

692
00:30:09,700 --> 00:30:11,900
dialog due to do there.

693
00:30:11,900 --> 00:30:15,200
It is 1024 by 576, right?

694
00:30:15,600 --> 00:30:19,900
So, it's 1024 by 576, and of course, we don't know if we did our clip

695
00:30:19,900 --> 00:30:21,600
incorrectly because our previous statement when you used it.

696
00:30:21,600 --> 00:30:24,300
So this may just flat on crap flat out crash because we didn't really

697
00:30:24,300 --> 00:30:26,300
even look at to see if that code was correct.

698
00:30:26,300 --> 00:30:27,700
But, let's take a look.

699
00:30:27,900 --> 00:30:28,900
Hey, guess what it worked.

700
00:30:29,300 --> 00:30:29,800
So there we go.

701
00:30:30,000 --> 00:30:31,400
Oh, there's our bitmap loaded off.

702
00:30:31,400 --> 00:30:31,900
Disk.

703
00:30:32,000 --> 00:30:32,500
Exactly.

704
00:30:32,500 --> 00:30:36,200
Like we wanted of course, now we've essentially overwritten the whole

705
00:30:36,200 --> 00:30:39,100
thing with our Graphics, which is maybe with this as basically

706
00:30:39,100 --> 00:30:42,600
overwritten our entire tilemap Graphics, which is probably not the

707
00:30:42,600 --> 00:30:43,300
best thing to do.

708
00:30:43,300 --> 00:30:46,500
So maybe let's go ahead and move this up to the top.

709
00:30:46,500 --> 00:30:50,500
That might be a little bit senior of a thing to do so that our Tom app

710
00:30:50,500 --> 00:30:52,200
draws on top of it or something like that.

711
00:30:52,200 --> 00:30:52,500
I don't know.

712
00:30:52,500 --> 00:30:55,200
Just something just randomly thinking out loud here.

713
00:30:55,200 --> 00:30:57,500
Not sure if that's the best thing to do or not, but we could go ahead

714
00:30:57,500 --> 00:30:58,100
and do that, right?

715
00:30:58,100 --> 00:30:59,400
We could go ahead and draw that here.

716
00:31:00,000 --> 00:31:04,300
And then we could do something like only actually draw the rectangle

717
00:31:05,200 --> 00:31:09,400
in the case where it was actually also not empty.

718
00:31:09,400 --> 00:31:09,700
Right?

719
00:31:09,700 --> 00:31:10,900
We could do something like this.

720
00:31:11,100 --> 00:31:12,000
I think this would work.

721
00:31:12,600 --> 00:31:15,200
For example, I don't actually know if it will or not.

722
00:31:17,500 --> 00:31:19,600
What did I do wrong there?

723
00:31:19,600 --> 00:31:24,100
If tile ID is greater than 10 because we still got this thing in here,

724
00:31:24,600 --> 00:31:24,900
right?

725
00:31:24,900 --> 00:31:26,200
So we still got our clear.

726
00:31:26,200 --> 00:31:27,400
Let's get rid of our clear.

727
00:31:27,400 --> 00:31:28,100
There we go.

728
00:31:28,600 --> 00:31:29,200
Much better.

729
00:31:30,000 --> 00:31:31,900
And so now we've got our backdrop.

730
00:31:31,900 --> 00:31:32,100
There.

731
00:31:32,100 --> 00:31:32,700
It is.

732
00:31:33,200 --> 00:31:33,800
Very nice.

733
00:31:34,000 --> 00:31:36,000
So, we now have a backdrop, that's just kind of sitting there.

734
00:31:36,100 --> 00:31:37,100
Doesn't really do much for us.

735
00:31:37,100 --> 00:31:40,900
But we now know that we can load our deficits in and that is pretty

736
00:31:40,900 --> 00:31:41,400
handy.

737
00:31:41,400 --> 00:31:42,100
Right?

738
00:31:42,600 --> 00:31:44,300
That is always a good thing to have.

739
00:31:45,000 --> 00:31:47,400
And like I said, we're going to need it for almost everything else

740
00:31:47,400 --> 00:31:48,600
that we do in the future.

741
00:31:49,100 --> 00:31:49,800
We're going to need that.

742
00:31:49,800 --> 00:31:52,200
We're also going to need to load some sound in here eventually, but

743
00:31:52,200 --> 00:31:53,600
you know, what you gonna do?

744
00:31:54,200 --> 00:31:54,700
All right.

745
00:31:54,800 --> 00:31:56,800
So we've got some graphics in there.

746
00:31:56,800 --> 00:31:57,700
That's a happy day.

747
00:31:57,700 --> 00:31:59,800
Everyone loves it when Graphics are in there, but

748
00:32:00,000 --> 00:32:02,900
We kind of only have part of the story there because our loader

749
00:32:02,900 --> 00:32:04,700
doesn't actually return the information we need.

750
00:32:04,700 --> 00:32:07,300
We had to hard-code the pixel width and the pixel height.

751
00:32:07,400 --> 00:32:10,500
So I think what we want to do now, of course, is we want to go ahead

752
00:32:10,500 --> 00:32:14,900
and actually have some way that that can be returned directly like,

753
00:32:14,900 --> 00:32:20,100
you know, something like this like a loaded bitmap, write something

754
00:32:20,100 --> 00:32:20,500
like this.

755
00:32:20,500 --> 00:32:21,900
I don't know what we're going to call this eventually.

756
00:32:21,900 --> 00:32:23,500
Like I said, don't think about it too hard.

757
00:32:23,900 --> 00:32:27,400
Just start, you know, basically you're typing in what Chris comes to

758
00:32:27,400 --> 00:32:29,000
mind so that we can actually return it.

759
00:32:29,400 --> 00:32:29,800
So we know

760
00:32:29,900 --> 00:32:31,600
We need that width and the height.

761
00:32:31,600 --> 00:32:34,300
And then we also know that we need the pixels.

762
00:32:34,300 --> 00:32:37,100
Those are the things that we had for our loaded bitmap.

763
00:32:37,200 --> 00:32:39,400
And so now what I'm going to do is I'm going to try and just change

764
00:32:39,400 --> 00:32:40,600
this code over just in place.

765
00:32:40,600 --> 00:32:45,600
Like I said to use one of these so I know if I had one, it would work.

766
00:32:45,700 --> 00:32:48,300
So let's go ahead and say that we have a loaded bitmap here.

767
00:32:48,600 --> 00:32:50,900
And this is going to be that backdrop that we had.

768
00:32:50,900 --> 00:32:52,300
So we have that somehow.

769
00:32:52,300 --> 00:32:53,700
We don't know where we got it from.

770
00:32:53,800 --> 00:32:54,400
That's fine.

771
00:32:55,000 --> 00:32:58,200
And then, we basically replace these pixel width, and pixel Heights

772
00:32:58,600 --> 00:32:59,800
with basically just the back.

773
00:33:00,000 --> 00:33:02,300
Up with and the backdrop height, right?

774
00:33:02,300 --> 00:33:05,600
Like this backdrop with backdrop, height like that.

775
00:33:06,300 --> 00:33:10,200
And similarly when we come down here, that pixel pointer is not going

776
00:33:10,200 --> 00:33:12,100
to be the game special pointer anymore.

777
00:33:12,200 --> 00:33:15,700
It's just going to be backed up, Arrow pixels, and the same things

778
00:33:15,700 --> 00:33:19,100
going to happen here with backdrop with, and then backed up height

779
00:33:19,100 --> 00:33:19,700
like that.

780
00:33:20,000 --> 00:33:20,400
Right?

781
00:33:20,400 --> 00:33:21,800
So, that's all we need to do there.

782
00:33:22,000 --> 00:33:24,200
I think the best of it pretty much takes care of itself.

783
00:33:24,200 --> 00:33:28,400
Again, this one just replacing that pixel width there and let's go

784
00:33:28,400 --> 00:33:29,800
ahead and compile that and then, yes.

785
00:33:30,000 --> 00:33:31,600
This is the only thing where we get it from.

786
00:33:31,600 --> 00:33:32,200
We don't know.

787
00:33:32,600 --> 00:33:34,500
Well, we know we want to keep this around.

788
00:33:34,500 --> 00:33:36,000
So we'll go ahead and put it in there.

789
00:33:36,400 --> 00:33:36,900
There we go.

790
00:33:36,900 --> 00:33:38,000
That's our backdrop.

791
00:33:38,200 --> 00:33:39,800
And so here we go.

792
00:33:39,800 --> 00:33:44,400
Loaded bitmap, backdrop equals game backdrop.

793
00:33:44,500 --> 00:33:45,000
There we go.

794
00:33:45,000 --> 00:33:46,500
And so now, we've actually got it.

795
00:33:46,500 --> 00:33:49,600
Of course, if I run this, we will just go ahead and crash because we

796
00:33:49,600 --> 00:33:51,200
haven't actually initialize that at all.

797
00:33:53,000 --> 00:33:56,900
So basically what we want to do is we want to have our load bitmap

798
00:33:56,900 --> 00:34:01,200
return, something that we can stuff in there which implies again that

799
00:34:01,200 --> 00:34:05,500
are load bitmap structure returns a loaded bitmap, which makes pretty

800
00:34:05,500 --> 00:34:06,100
good sense.

801
00:34:06,200 --> 00:34:09,199
I would say so we have loaded bitmap.

802
00:34:09,400 --> 00:34:10,199
Oh and you know what?

803
00:34:10,199 --> 00:34:11,199
That's not really a pointer.

804
00:34:11,800 --> 00:34:12,400
Is it?

805
00:34:13,100 --> 00:34:13,600
There we go.

806
00:34:14,600 --> 00:34:18,900
So that's going to return to load a bitmap that loaded bitmap is going

807
00:34:18,900 --> 00:34:19,699
to be the result.

808
00:34:19,699 --> 00:34:21,900
There we go, and then when we come down,

809
00:34:22,100 --> 00:34:25,600
You're when we load up the pixels are result, pixels will equal.

810
00:34:25,600 --> 00:34:30,500
Pixels are result with will equal the header width and our results.

811
00:34:30,500 --> 00:34:34,199
Dot height will equal the header height like so.

812
00:34:34,500 --> 00:34:39,199
And then we just have to kind of whoops typo there, gotta fix this guy

813
00:34:39,199 --> 00:34:40,400
to take the address.

814
00:34:40,800 --> 00:34:43,199
So now we are loading in the bitmap in theory.

815
00:34:44,400 --> 00:34:45,000
What is the problem?

816
00:34:45,000 --> 00:34:46,400
That's game State we go.

817
00:34:47,300 --> 00:34:48,699
And so now we should be able to load it.

818
00:34:48,800 --> 00:34:50,100
And hey, does that the same thing?

819
00:34:50,100 --> 00:34:51,900
It did before but now we can load any bitmap.

820
00:34:52,000 --> 00:34:54,500
If we want now that we can load any bitmap.

821
00:34:54,500 --> 00:34:57,800
We want things, get pretty easy.

822
00:34:57,900 --> 00:34:59,800
If we want to load lots of bitmaps, right?

823
00:35:00,000 --> 00:35:02,100
We could just load anything that we wanted to write.

824
00:35:02,100 --> 00:35:07,400
We could go ahead and load just about anything we could load in here.

825
00:35:07,400 --> 00:35:12,400
Let's say we load player, of course our player.

826
00:35:12,500 --> 00:35:15,800
I don't know if you noticed this or I should say our hero is broken up

827
00:35:15,800 --> 00:35:20,500
into pieces that have to get assembled right like that the bottom the

828
00:35:20,500 --> 00:35:21,200
middle and the top.

829
00:35:21,200 --> 00:35:21,900
If that makes sense.

830
00:35:22,400 --> 00:35:24,800
So we kind of need three pieces for our hero.

831
00:35:24,800 --> 00:35:25,500
That's true.

832
00:35:26,200 --> 00:35:28,200
So I guess what we probably want to do.

833
00:35:28,200 --> 00:35:31,700
There is go ahead and load three pieces of our hero so that we can

834
00:35:31,700 --> 00:35:33,000
reassemble him, right?

835
00:35:33,200 --> 00:35:36,000
That seems like a pretty same thing to want to do.

836
00:35:36,000 --> 00:35:37,500
So, let's go ahead and do that.

837
00:35:37,500 --> 00:35:43,300
Will load player head will load player cape and we'll load player

838
00:35:43,300 --> 00:35:46,400
torso and we'll just pick one of them.

839
00:35:46,400 --> 00:35:48,500
Let's say move it will, you know, the forward one.

840
00:35:49,000 --> 00:35:50,500
We can go ahead and load that in there.

841
00:35:51,000 --> 00:35:51,900
So let's put that up.

842
00:35:52,000 --> 00:35:54,700
At the top where we actually did our loading right here.

843
00:35:55,400 --> 00:35:57,500
So we're going to go ahead and do player head.

844
00:35:58,400 --> 00:35:59,000
That.

845
00:36:00,000 --> 00:36:03,300
This will be I guess it's not the player really.

846
00:36:03,700 --> 00:36:07,700
It's really the hero, you know, I mean, it's a hero after all look at

847
00:36:07,700 --> 00:36:08,000
him.

848
00:36:08,200 --> 00:36:09,600
You can tell he's got bravado.

849
00:36:10,100 --> 00:36:11,300
So test hero.

850
00:36:12,700 --> 00:36:15,000
There we go test hero, and I'll load the front one.

851
00:36:15,000 --> 00:36:18,300
So test hero front underscore.

852
00:36:18,900 --> 00:36:21,500
So, basically, we need to do three of these.

853
00:36:21,600 --> 00:36:29,900
So we have test hero, head, test hero, Cape test hero torso, and the

854
00:36:30,000 --> 00:36:33,000
Responding bitmap files.

855
00:36:33,500 --> 00:36:34,200
So there we go.

856
00:36:34,200 --> 00:36:37,500
We've loaded all those in and hopefully

857
00:36:38,500 --> 00:36:39,600
That will just work.

858
00:36:40,200 --> 00:36:42,700
Let's take a look and see if it does.

859
00:36:44,800 --> 00:36:48,400
Doot-doot-doot and game state.

860
00:36:49,500 --> 00:36:50,700
Let's see what we got here.

861
00:36:50,700 --> 00:36:53,600
People do do.

862
00:36:54,800 --> 00:36:55,600
Look at that.

863
00:36:56,000 --> 00:37:00,600
We've got some very nice hero Graphics all loaded in everything's

864
00:37:00,600 --> 00:37:05,800
kosher and so if we want to display these on the screen, obviously we

865
00:37:05,800 --> 00:37:08,100
could just cut and paste this code that displays the other thing.

866
00:37:08,100 --> 00:37:10,500
But really, what we'd rather do is just obviously have a utility

867
00:37:10,500 --> 00:37:13,900
function that draws a rectangle on the screen, but instead of drawing

868
00:37:13,900 --> 00:37:15,000
it, the old school way.

869
00:37:16,200 --> 00:37:20,000
This time it will actually just go ahead and blit Graphics are the

870
00:37:20,000 --> 00:37:20,400
screen.

871
00:37:20,800 --> 00:37:23,300
So what I want to do is I basically want to copy this stuff out,

872
00:37:23,300 --> 00:37:23,900
right?

873
00:37:24,100 --> 00:37:24,800
Entirely.

874
00:37:25,200 --> 00:37:28,100
Just go ahead and eliminate that and replace that with something

875
00:37:28,100 --> 00:37:32,900
that's basically like, you know, blit bitmap or drawbitmap, something

876
00:37:32,900 --> 00:37:33,500
like this.

877
00:37:34,000 --> 00:37:38,200
And then we pass the game backdrop here and some more information.

878
00:37:38,200 --> 00:37:39,300
I don't actually know what it is.

879
00:37:39,400 --> 00:37:42,100
And so I basically want this to be bundled up so I can call it

880
00:37:42,100 --> 00:37:44,500
multiple times and draw the hero as well.

881
00:37:44,700 --> 00:37:45,600
So here we go.

882
00:37:46,000 --> 00:37:47,100
Go ahead and get that in there.

883
00:37:48,000 --> 00:37:52,800
We have drawbitmap and it is going to take some stuff.

884
00:37:53,000 --> 00:37:55,300
You don't actually know what it's going to take yet.

885
00:37:55,300 --> 00:37:57,400
We'll find out when we actually go to type it.

886
00:37:57,400 --> 00:38:00,400
So here's our draw, a rectangle call in our draw rectangle.

887
00:38:00,400 --> 00:38:00,900
Call in.

888
00:38:00,900 --> 00:38:03,000
Our drawbitmap call are actually quite similar.

889
00:38:03,200 --> 00:38:08,400
They both have sort of a similar sort of thing going on here, right to

890
00:38:08,400 --> 00:38:08,700
me.

891
00:38:15,200 --> 00:38:19,100
But now we have to do is we actually have to work on this bill it to

892
00:38:19,100 --> 00:38:22,700
the point where we can actually wear it.

893
00:38:22,700 --> 00:38:25,300
You can actually do something of similar quality to our draw.

894
00:38:25,300 --> 00:38:25,800
Rectangles.

895
00:38:25,800 --> 00:38:28,300
Remember when we did our draw a rectangle call our direct and call

896
00:38:28,300 --> 00:38:31,300
handled passing coordinates off the screen and all sorts of other

897
00:38:31,300 --> 00:38:31,800
stuff.

898
00:38:32,100 --> 00:38:34,900
So we kind of need something a little more industrial strength that

899
00:38:34,900 --> 00:38:35,500
when we had here.

900
00:38:35,500 --> 00:38:37,400
Although at first we could just use exactly.

901
00:38:37,400 --> 00:38:41,200
We have here and assume that we always pass correct coordinates that

902
00:38:41,200 --> 00:38:41,300
are

903
00:38:41,400 --> 00:38:46,900
Never actually going to be off the off the left or top part of the

904
00:38:46,900 --> 00:38:47,400
screen.

905
00:38:48,600 --> 00:38:51,000
So yeah, so let's let's start off.

906
00:38:51,600 --> 00:38:52,000
I guess.

907
00:38:52,000 --> 00:38:52,600
Let's start off.

908
00:38:52,600 --> 00:38:54,500
Simple and just do that.

909
00:38:54,500 --> 00:38:57,600
So let's start off by saying we have a drawbitmap call.

910
00:38:58,300 --> 00:38:59,600
We're going to pass an ex.

911
00:39:00,100 --> 00:39:03,100
And a, why to it that we want to actually use?

912
00:39:03,100 --> 00:39:03,900
That's what we're passing.

913
00:39:03,900 --> 00:39:05,200
We're all we were using reels.

914
00:39:05,300 --> 00:39:06,800
So let's go ahead and use reels.

915
00:39:06,800 --> 00:39:09,400
We're going to pass floating Point values for their X and the Y.

916
00:39:10,300 --> 00:39:13,200
And then we're going to pass a loaded bitmap and we want to be able to

917
00:39:13,200 --> 00:39:18,100
basically, you know, have it show this loaded bitmap at that location.

918
00:39:18,300 --> 00:39:19,600
So it's going to take this little bit map.

919
00:39:19,600 --> 00:39:21,500
It's going to show it at that location.

920
00:39:21,700 --> 00:39:24,500
We're going to need that buffer, obviously, because we need to

921
00:39:24,500 --> 00:39:28,400
actually draw that in there and then we'll just assume that that the

922
00:39:28,400 --> 00:39:29,900
that X and Y now have to be

923
00:39:30,000 --> 00:39:33,300
Valid at the moment and will crash if they aren't and then we can go

924
00:39:33,300 --> 00:39:38,300
ahead and modify our routine to be more robust in a second after we

925
00:39:38,300 --> 00:39:38,900
get everything working.

926
00:39:38,900 --> 00:39:45,400
So we have our bitmap now and so we don't need backdrop anymore and

927
00:39:45,400 --> 00:39:47,200
backdrop here, becomes bitmap.

928
00:39:47,200 --> 00:39:51,100
Basically, right, bitmap bitmap, it map, bitmap like that.

929
00:39:51,100 --> 00:39:58,200
And I guess most of this code just kind of works, except we now have a

930
00:39:58,200 --> 00:39:59,700
starting X and a starting y.

931
00:40:00,000 --> 00:40:03,300
Basically, we need to do this sort of code that we did before where we

932
00:40:03,300 --> 00:40:09,200
do a rounding operation to figure out what the actual X and Y are for

933
00:40:09,200 --> 00:40:09,700
the blind.

934
00:40:09,700 --> 00:40:12,500
So we're basically going to have the same sort of thing that we had

935
00:40:12,500 --> 00:40:15,700
before where we pass and real values, but now we have to sort of round

936
00:40:15,700 --> 00:40:21,500
them to be, you know, more specific to be integers that we can

937
00:40:21,500 --> 00:40:25,400
actually use to specify a particular pixel, not something in between

938
00:40:25,400 --> 00:40:25,900
pixels.

939
00:40:27,100 --> 00:40:27,400
All right.

940
00:40:27,400 --> 00:40:28,900
So then we can go ahead and do this.

941
00:40:28,900 --> 00:40:31,300
This check is kind of meaningless now, because since we're allowing

942
00:40:31,300 --> 00:40:33,600
you to move around, that's not going to actually work.

943
00:40:33,600 --> 00:40:36,000
In fact, I guess what we could, we could actually account for just

944
00:40:36,000 --> 00:40:40,700
that movement here by saying that the blind with it starts up, being

945
00:40:40,700 --> 00:40:45,100
the bitmap width and height, but if the blind with is greater, if

946
00:40:45,100 --> 00:40:48,700
basically the amount that we're bleeding is greater than the screen

947
00:40:48,700 --> 00:40:49,800
with, right?

948
00:40:50,000 --> 00:40:53,200
What we actually want to do is say that the X plus the blind with is

949
00:40:53,200 --> 00:40:56,300
greater than the screen with, then we need to

950
00:40:56,600 --> 00:41:00,300
Go ahead and adjust that split with to be.

951
00:41:01,800 --> 00:41:04,000
Excuse me, to sort of end there.

952
00:41:04,200 --> 00:41:05,900
It's sort of a min/max x if you will.

953
00:41:05,900 --> 00:41:07,600
In fact, I guess we could, you know, what?

954
00:41:07,600 --> 00:41:09,500
We could do this very similar to how we did.

955
00:41:09,500 --> 00:41:12,200
Now, I think about it, we could just use the same basic code as we

956
00:41:12,200 --> 00:41:14,500
used for our rectangle, right?

957
00:41:14,900 --> 00:41:16,400
There's really no reason we couldn't.

958
00:41:16,900 --> 00:41:18,700
So let's actually just start with this code.

959
00:41:18,700 --> 00:41:20,900
In fact, now that I think about it, right?

960
00:41:20,900 --> 00:41:27,000
Because we know that we have an x y, and we have a Min, and Max X for

961
00:41:27,000 --> 00:41:29,300
X and Y, because the Min and the max are determined by whatever this

962
00:41:29,300 --> 00:41:30,700
bitmap is, right.

963
00:41:31,200 --> 00:41:35,100
So we could really just use this code, almost exactly as it is right

964
00:41:35,100 --> 00:41:35,700
in here.

965
00:41:36,100 --> 00:41:37,300
I could just start with this.

966
00:41:37,300 --> 00:41:40,300
So push that down a little bit and say, all right, we start with this

967
00:41:40,300 --> 00:41:44,100
code, we go ahead and say we have them in Acts, the Min Y and those

968
00:41:44,100 --> 00:41:49,000
are equal to the rounded versions of of that, sort of re-election,

969
00:41:49,000 --> 00:41:49,200
real?

970
00:41:49,200 --> 00:41:50,400
Why that we start at?

971
00:41:50,500 --> 00:41:55,300
And then the max X is basically just that real X plus whatever the

972
00:41:55,300 --> 00:41:56,600
bitmap with is, right?

973
00:41:56,600 --> 00:41:58,700
That's going to be the other end of our rectangle, right?

974
00:41:58,700 --> 00:41:59,800
Because we know that we are rare.

975
00:42:00,000 --> 00:42:01,300
Feeling a rectangle on the screen.

976
00:42:01,300 --> 00:42:04,500
We're just filling it with specific color values instead of one color

977
00:42:04,500 --> 00:42:05,600
value, right?

978
00:42:05,600 --> 00:42:08,700
And so we can basically construct the same rectangle, do the same

979
00:42:08,700 --> 00:42:11,300
clipping that we were doing and then fill it.

980
00:42:11,300 --> 00:42:13,500
Now we have to pay some more attention to the code that happens in

981
00:42:13,500 --> 00:42:15,900
here, but for the most part that'll work.

982
00:42:16,100 --> 00:42:18,700
So if I, then go ahead and say, all right.

983
00:42:20,000 --> 00:42:22,000
This code is exactly the same, right?

984
00:42:22,000 --> 00:42:25,800
This is exactly the same Loop so we can still use, you know, we can

985
00:42:25,800 --> 00:42:30,100
still use our our drawing Loop that we had before.

986
00:42:30,100 --> 00:42:32,800
We just have to make sure we do the adjustments that we were doing

987
00:42:32,800 --> 00:42:36,800
before in order to get the X and Y in there, all right.

988
00:42:41,400 --> 00:42:46,700
So our Destro calculation is exactly as it was basically, Destro is

989
00:42:46,700 --> 00:42:47,700
this right?

990
00:42:48,600 --> 00:42:51,500
Because we're still the actual part that fills the rectangle is

991
00:42:51,500 --> 00:42:54,500
operating exactly as it used to no changes.

992
00:42:55,000 --> 00:42:58,100
And so you get that that buffer pitch Edition get everything works.

993
00:42:58,100 --> 00:42:59,200
Basically exactly the same.

994
00:42:59,600 --> 00:43:03,000
So the only thing that has to be modified now is that we actually have

995
00:43:03,000 --> 00:43:05,800
to change where we're pulling our source Row from.

996
00:43:05,900 --> 00:43:07,100
That's the only thing that actually has

997
00:43:07,200 --> 00:43:07,500
Change.

998
00:43:07,500 --> 00:43:10,400
We can leave it so that we're not actually doing that yet, but it's

999
00:43:10,400 --> 00:43:13,100
definitely a to-do item because, basically, once you start clipping,

1000
00:43:13,100 --> 00:43:14,900
it'll be wrong and you'll see that in a second.

1001
00:43:15,300 --> 00:43:20,900
So let's go ahead and say Source row needs to be changed based on

1002
00:43:20,900 --> 00:43:21,500
clipping.

1003
00:43:21,800 --> 00:43:25,300
All right, so I think we can sort of we just leverage that code there

1004
00:43:25,300 --> 00:43:27,400
because we know that that actually did the clipping properly and it

1005
00:43:27,400 --> 00:43:30,000
looks like this will actually be more proper.

1006
00:43:30,300 --> 00:43:31,800
So I think that's correct.

1007
00:43:32,100 --> 00:43:36,100
Oh wait, but I need to actually change it so that our X and y's Loop

1008
00:43:36,100 --> 00:43:36,600
the way.

1009
00:43:37,100 --> 00:43:37,900
That they should.

1010
00:43:37,900 --> 00:43:42,100
So this is actually supposed to be Loop this Loop, and this is

1011
00:43:42,100 --> 00:43:43,600
supposed to be that Loop.

1012
00:43:43,600 --> 00:43:44,000
There.

1013
00:43:44,300 --> 00:43:46,900
We don't have the blind with we're doing the between the Min and the

1014
00:43:46,900 --> 00:43:48,900
max now, so there we go.

1015
00:43:49,500 --> 00:43:52,600
And now, when we do our drawbitmap call, we should be able to already

1016
00:43:52,600 --> 00:43:57,800
call this for drawing that game us, the backdrop there.

1017
00:43:58,500 --> 00:44:01,700
So what I should be able to do is I should be able to essentially make

1018
00:44:01,700 --> 00:44:05,200
now what is what amounts to a drawbitmap.

1019
00:44:05,300 --> 00:44:07,000
The drop the draw a rectangle call, but

1020
00:44:07,100 --> 00:44:09,600
I said now I can pass a bitmap so I can cost the backdrop.

1021
00:44:09,700 --> 00:44:11,800
We're drawing the backdrop at 0 0, for now.

1022
00:44:12,100 --> 00:44:13,700
Just to see if that works at all.

1023
00:44:13,700 --> 00:44:17,400
Basically, if it can do the exact same thing that we were doing last

1024
00:44:17,400 --> 00:44:21,500
time and so got a present address in.

1025
00:44:21,500 --> 00:44:22,600
There we go.

1026
00:44:23,200 --> 00:44:26,000
So, let's go ahead and run that and that looks about right.

1027
00:44:26,000 --> 00:44:26,900
Nobody is crashing.

1028
00:44:26,900 --> 00:44:28,400
No one's unhappy at the moment.

1029
00:44:28,500 --> 00:44:29,600
So that's all good.

1030
00:44:30,000 --> 00:44:35,700
And if I go ahead in here and go up to that drawbitmap call again.

1031
00:44:35,900 --> 00:44:37,000
Well, actually, what I could do here.

1032
00:44:37,100 --> 00:44:39,200
Is just then draw, the player immediately thereafter, right?

1033
00:44:39,200 --> 00:44:39,700
I could say.

1034
00:44:39,700 --> 00:44:41,500
All right, let's draw the player as well.

1035
00:44:41,800 --> 00:44:45,900
We now we know we have the hero head and we can draw it.

1036
00:44:45,900 --> 00:44:46,700
We can even draw it.

1037
00:44:46,700 --> 00:44:50,900
In fact at the location of the hero, if we wanted to when we draw the

1038
00:44:50,900 --> 00:44:54,400
players location here, instead of drawing that rectangle, we could

1039
00:44:54,400 --> 00:44:55,400
draw this bitmap.

1040
00:44:55,700 --> 00:44:59,800
So what I could do is say the player left player top, we'll just

1041
00:45:00,000 --> 00:45:04,400
I'm past that player top Loops player, left player top.

1042
00:45:07,100 --> 00:45:10,700
We could just go ahead and pass that and there's our little dude.

1043
00:45:10,800 --> 00:45:12,300
He doesn't look particularly.

1044
00:45:12,300 --> 00:45:13,200
Correct, though.

1045
00:45:13,500 --> 00:45:14,500
What's wrong with them?

1046
00:45:15,700 --> 00:45:17,700
Do you know what happened to the to the poor little fellow?

1047
00:45:18,100 --> 00:45:18,900
Look at what happened?

1048
00:45:18,900 --> 00:45:20,000
He's all messed up.

1049
00:45:22,100 --> 00:45:23,000
I feel bad for him.

1050
00:45:23,400 --> 00:45:28,900
I feel like he's he has been, he has been by traversed.

1051
00:45:29,100 --> 00:45:35,100
Looks like, is there somehow is there some way that this actually

1052
00:45:35,100 --> 00:45:37,500
stored to opposite?

1053
00:45:37,500 --> 00:45:38,600
What what what happened?

1054
00:45:38,600 --> 00:45:39,500
What's going on here?

1055
00:45:39,500 --> 00:45:40,200
How did we get?

1056
00:45:40,200 --> 00:45:41,600
How did how did that happen?

1057
00:45:42,000 --> 00:45:43,800
Someone has to explain that to me.

1058
00:45:44,000 --> 00:45:45,300
That does not make a lot of sense.

1059
00:45:46,100 --> 00:45:47,600
So, how did this guy?

1060
00:45:48,100 --> 00:45:53,900
How did he end up drawing differently than test background fellow over

1061
00:45:53,900 --> 00:45:55,000
here, right?

1062
00:45:55,000 --> 00:45:56,900
What what, what's going on there?

1063
00:45:57,400 --> 00:45:58,400
I have no idea.

1064
00:45:58,700 --> 00:46:00,100
That's a very, very strange.

1065
00:46:00,300 --> 00:46:02,100
I wonder if this is I guess it could be.

1066
00:46:02,100 --> 00:46:03,700
No, I don't think could be an alpha thing.

1067
00:46:04,400 --> 00:46:07,600
I think that's just literally a bit busted.

1068
00:46:08,600 --> 00:46:09,200
Well anyway,

1069
00:46:10,400 --> 00:46:13,200
What I want to do then because I feel like that should have looked the

1070
00:46:13,200 --> 00:46:13,600
same.

1071
00:46:13,600 --> 00:46:16,200
So I feel like there's some kind of a format issue going on here.

1072
00:46:16,500 --> 00:46:20,100
I wonder what I'm wondering is if there's something that I'm missing

1073
00:46:20,100 --> 00:46:23,100
about how like, is there an actual flag or something?

1074
00:46:23,100 --> 00:46:27,400
That said because he looks like he looks almost like he's been by

1075
00:46:27,400 --> 00:46:27,900
Traverse.

1076
00:46:27,900 --> 00:46:32,800
So basically as if his red and blue channels have been flipped right

1077
00:46:34,400 --> 00:46:39,200
to just to give you some some indication of what I'm talking about if

1078
00:46:39,200 --> 00:46:40,100
we went into our

1079
00:46:40,200 --> 00:46:42,400
Arlo bitmap command here.

1080
00:46:44,100 --> 00:46:47,200
When we did this flip you can sort of Imagine.

1081
00:46:47,200 --> 00:46:49,700
Like let me let me actually in fact, let me do it explicitly.

1082
00:46:49,900 --> 00:46:53,300
Let me pull out the components.

1083
00:46:53,300 --> 00:46:55,400
So here is channel 0, right?

1084
00:46:56,400 --> 00:46:59,900
Here's Channel 0 which is basically just

1085
00:47:01,000 --> 00:47:02,400
The very first thing.

1086
00:47:02,800 --> 00:47:04,800
Well, I guess I could just do this by.

1087
00:47:05,000 --> 00:47:05,700
I don't even have to do it.

1088
00:47:05,700 --> 00:47:06,000
That way.

1089
00:47:06,000 --> 00:47:06,900
I could do it this way.

1090
00:47:07,400 --> 00:47:08,100
I could do it this way.

1091
00:47:08,100 --> 00:47:12,600
Source, dest equals U and H star pixels, and I could just do it this

1092
00:47:12,600 --> 00:47:12,700
way.

1093
00:47:12,700 --> 00:47:15,400
Just, you can see it a little more clearly, right since we don't care

1094
00:47:15,400 --> 00:47:16,000
about this code.

1095
00:47:16,000 --> 00:47:18,300
This is, this is just random code that were writing.

1096
00:47:18,300 --> 00:47:19,800
We don't care if it's fast or anything.

1097
00:47:20,100 --> 00:47:21,800
Here are the here are the the channel.

1098
00:47:21,800 --> 00:47:23,800
So, the first, this is the first bite.

1099
00:47:23,900 --> 00:47:26,300
Second bite, third bite for bite, right?

1100
00:47:26,600 --> 00:47:30,000
And what we were doing is we were basically constructing these by

1101
00:47:30,000 --> 00:47:30,600
putting

1102
00:47:30,900 --> 00:47:34,700
The very first bite in the top, so we were putting the first bite up

1103
00:47:34,700 --> 00:47:37,600
at the top assuming that it was the alpha, right.

1104
00:47:38,000 --> 00:47:42,900
We were then ordering in after that.

1105
00:47:43,300 --> 00:47:44,600
We were saying what did we say?

1106
00:47:44,600 --> 00:47:48,200
It was it's it's a BGR.

1107
00:47:48,200 --> 00:47:49,300
So we were starting with that.

1108
00:47:49,300 --> 00:47:51,300
We then we wanted the are so that's actually

1109
00:48:00,100 --> 00:48:01,400
Sorry, I was thinking about what we did there.

1110
00:48:01,400 --> 00:48:01,800
For a second.

1111
00:48:01,800 --> 00:48:02,800
I was like, wait a minute.

1112
00:48:03,000 --> 00:48:03,700
That's very odd.

1113
00:48:03,800 --> 00:48:07,000
But yeah, so the a the first thing our Channel 0, we're basically

1114
00:48:07,000 --> 00:48:09,500
saying our assumption is, this was the alpha.

1115
00:48:09,600 --> 00:48:10,600
This was the red.

1116
00:48:10,900 --> 00:48:11,900
This was the green.

1117
00:48:12,100 --> 00:48:12,800
This was the blue.

1118
00:48:12,800 --> 00:48:13,500
That's what we said.

1119
00:48:13,500 --> 00:48:14,500
Right a oh sorry.

1120
00:48:14,500 --> 00:48:17,100
No blue red.

1121
00:48:17,100 --> 00:48:19,700
We said alpha blue, green red.

1122
00:48:19,900 --> 00:48:23,100
So I want to pack them with the alpha on the top.

1123
00:48:23,100 --> 00:48:26,000
And then the next thing, has to be the red and so the red is C3.

1124
00:48:26,000 --> 00:48:29,800
So c 3 is actually shifted up 16 then is the green which is c 2.

1125
00:48:30,000 --> 00:48:32,100
To write and that shift it up eight.

1126
00:48:32,100 --> 00:48:37,100
And then we have finally, the blue, which is shifted up.

1127
00:48:37,100 --> 00:48:38,300
Not right?

1128
00:48:38,500 --> 00:48:40,400
And that's what we were doing.

1129
00:48:40,900 --> 00:48:44,800
Sorry Source, guest Source, desk Source desk.

1130
00:48:45,100 --> 00:48:45,600
Let's test.

1131
00:48:45,600 --> 00:48:46,200
There we go.

1132
00:48:47,200 --> 00:48:48,100
That's what we were doing.

1133
00:48:48,100 --> 00:48:48,700
Right?

1134
00:48:48,900 --> 00:48:51,300
And oh well, hmm.

1135
00:48:55,400 --> 00:48:56,700
Try that one more time.

1136
00:49:03,300 --> 00:49:05,700
Yeah, I probably should have only cast that one and then wrote this

1137
00:49:05,700 --> 00:49:05,900
one.

1138
00:49:05,900 --> 00:49:06,400
I don't know.

1139
00:49:06,600 --> 00:49:08,100
What can, what can you do, right?

1140
00:49:08,500 --> 00:49:08,900
You went 3.

1141
00:49:08,900 --> 00:49:12,900
D 2 Star Source test and then Source distance equals 4.

1142
00:49:16,400 --> 00:49:18,400
Are you okay?

1143
00:49:19,200 --> 00:49:23,900
So that should be correct now, so this is what we were doing and I

1144
00:49:23,900 --> 00:49:25,900
just made that a little bit more explicit so we could play with the

1145
00:49:25,900 --> 00:49:26,400
channels.

1146
00:49:26,700 --> 00:49:29,600
And I guess what I was saying is the guy to me now looks like he

1147
00:49:29,600 --> 00:49:33,800
somehow is stored in a different order than his friend like it kind of

1148
00:49:33,800 --> 00:49:38,600
looked to me like if we swapped the red and the blue channels that he

1149
00:49:38,600 --> 00:49:39,900
would look correct or something.

1150
00:49:40,300 --> 00:49:41,100
No, I guess not.

1151
00:49:41,100 --> 00:49:42,200
So I don't really know.

1152
00:49:42,400 --> 00:49:44,100
I don't know what his deal is.

1153
00:49:44,100 --> 00:49:46,000
I don't know why he looks so.

1154
00:49:46,400 --> 00:49:47,200
I'd like that.

1155
00:49:47,400 --> 00:49:51,700
I'm not sure what exactly is going on such that he looks that way.

1156
00:49:51,700 --> 00:49:58,100
I don't understand how his his his data is encoded, right?

1157
00:49:58,100 --> 00:50:01,100
Such that he has that sort of weird Look to Him.

1158
00:50:01,400 --> 00:50:01,900
Now.

1159
00:50:03,000 --> 00:50:05,600
My first thought was that this was like a premultiplied alpha

1160
00:50:05,600 --> 00:50:09,300
situation where the alpha needed to be multiplied to guess the guy but

1161
00:50:09,900 --> 00:50:11,700
that wouldn't make any sense.

1162
00:50:11,800 --> 00:50:15,300
I don't even want to explain what that is at the moment because his

1163
00:50:15,300 --> 00:50:15,900
the solid

1164
00:50:16,100 --> 00:50:16,600
Out of him.

1165
00:50:16,700 --> 00:50:19,200
Should look correct, even if that was the case.

1166
00:50:19,500 --> 00:50:20,300
So I'm not sure.

1167
00:50:20,300 --> 00:50:25,100
I don't understand why he looks the way that he does, and I don't know

1168
00:50:25,100 --> 00:50:27,800
if there's something that I'm not understanding about the way that the

1169
00:50:27,800 --> 00:50:33,000
file is saved, that is causing him to to look that way, if that makes

1170
00:50:33,000 --> 00:50:33,400
sense.

1171
00:50:33,700 --> 00:50:38,200
Now, there is one option and that is that maybe that are offset is

1172
00:50:38,200 --> 00:50:40,900
busted like the fact that we're painting him.

1173
00:50:40,900 --> 00:50:41,800
Not at zero zero.

1174
00:50:41,800 --> 00:50:43,900
Like our rectangle blood is is wrong.

1175
00:50:44,000 --> 00:50:46,000
So just before I do any deeper,

1176
00:50:46,100 --> 00:50:46,900
Investigation.

1177
00:50:46,900 --> 00:50:51,000
I'm going to go ahead and and and you know, it all back out this

1178
00:50:51,000 --> 00:50:53,700
change that I was doing since we now verify that it had nothing to do

1179
00:50:53,700 --> 00:50:54,500
with the pixel swap.

1180
00:50:54,500 --> 00:50:58,700
I'll leave it back at the more efficient, sort of the, the simpler

1181
00:50:58,700 --> 00:50:59,900
encoding of the

1182
00:51:00,000 --> 00:51:00,300
Guy.

1183
00:51:02,300 --> 00:51:04,000
Do, do, do, undo.

1184
00:51:04,000 --> 00:51:04,300
Undo.

1185
00:51:04,300 --> 00:51:05,200
Undo, undo.

1186
00:51:05,200 --> 00:51:05,700
There we go.

1187
00:51:06,400 --> 00:51:10,300
So what I do I do here is just see if I instead of instead of player

1188
00:51:10,300 --> 00:51:11,600
left instead of drawing there.

1189
00:51:11,700 --> 00:51:15,500
If I just draw him, you know, at 0 0 what happens like if there's no

1190
00:51:15,500 --> 00:51:17,900
offset, does that change anything, you know, and I don't know.

1191
00:51:18,700 --> 00:51:20,100
So it doesn't change anything.

1192
00:51:20,100 --> 00:51:22,900
So there's nothing weird going on in the blit per se.

1193
00:51:24,400 --> 00:51:25,400
Yeah, so I don't know.

1194
00:51:25,500 --> 00:51:26,800
That's very, very strange.

1195
00:51:26,900 --> 00:51:30,900
I guess what we should probably do is take a look and see if there's

1196
00:51:30,900 --> 00:51:31,800
any particular.

1197
00:51:32,000 --> 00:51:32,600
It's in the file.

1198
00:51:32,600 --> 00:51:38,100
And then also take a look at what's going on in the actual, you know,

1199
00:51:38,100 --> 00:51:39,000
in the actual binary.

1200
00:51:39,400 --> 00:51:41,900
So if we took a look at this, is this is the one that we're actually

1201
00:51:42,200 --> 00:51:42,900
loading here.

1202
00:51:43,100 --> 00:51:47,200
So if I go in here and I take a look at this guy, let's see.

1203
00:51:48,200 --> 00:51:50,100
So, how big should he be?

1204
00:51:50,300 --> 00:51:52,900
He's 144 by 217.

1205
00:51:53,100 --> 00:51:53,600
Right?

1206
00:51:53,700 --> 00:51:56,800
So if I were to do the calculation of how much memory, how big should

1207
00:51:56,800 --> 00:52:01,800
that be right 144 times to 17, I would expect

1208
00:52:01,900 --> 00:52:09,100
Act, if I exported this guy to see him, take up 125k, basically

1209
00:52:09,100 --> 00:52:10,000
something like that.

1210
00:52:10,500 --> 00:52:11,500
And let's take a look.

1211
00:52:11,600 --> 00:52:13,400
That's exactly what we're seeing roughly.

1212
00:52:14,000 --> 00:52:17,900
So if I, you know, if I divide that by 1024 120 2.0, see ya.

1213
00:52:18,000 --> 00:52:21,800
So basically he does look like he's being stored in raw format, which

1214
00:52:21,800 --> 00:52:22,600
is all good.

1215
00:52:23,500 --> 00:52:29,500
And I just so I don't really know why he has that reddish tint to him.

1216
00:52:30,200 --> 00:52:30,800
Does anyone?

1217
00:52:30,900 --> 00:52:33,000
I wonder if the people on the stream already know?

1218
00:52:33,100 --> 00:52:35,900
This is one that I wouldn't have guessed like, it's not immediately

1219
00:52:35,900 --> 00:52:38,400
saying anything to me, but I'm wondering if I'm just forgetting

1220
00:52:38,400 --> 00:52:42,800
something obvious because we are already loading, one image properly

1221
00:52:43,900 --> 00:52:45,700
that you know, that is coming in.

1222
00:52:45,700 --> 00:52:46,400
Correct.

1223
00:52:46,500 --> 00:52:48,100
So another thing that I guess I would try is.

1224
00:52:48,100 --> 00:52:48,500
Let's see.

1225
00:52:48,500 --> 00:52:50,900
Let's verify that it happens with everything.

1226
00:52:50,900 --> 00:52:54,100
Oh and I could also check to see if I blip the other image again as

1227
00:52:54,100 --> 00:52:54,600
well.

1228
00:52:54,900 --> 00:52:57,700
If it comes out weird too, I guess.

1229
00:52:57,700 --> 00:52:59,600
Well, you know, it could also be a thing with

1230
00:53:00,200 --> 00:53:02,800
This is the first time you put something that's smaller than the

1231
00:53:02,800 --> 00:53:03,300
screen.

1232
00:53:03,500 --> 00:53:05,500
So I guess there's there's a number of things we haven't actually

1233
00:53:05,500 --> 00:53:06,100
tested.

1234
00:53:06,400 --> 00:53:08,300
But anyway, I keep forgetting that.

1235
00:53:08,300 --> 00:53:12,200
I don't have to actually that I can just leave the game running so I

1236
00:53:12,200 --> 00:53:13,200
could just do this.

1237
00:53:13,300 --> 00:53:18,200
And then I can come in to the actual thing here and say, okay, hero

1238
00:53:18,300 --> 00:53:23,100
torso, and recompile and then we, you know, get the Torso so they're

1239
00:53:23,100 --> 00:53:23,800
all red.

1240
00:53:23,900 --> 00:53:25,100
I mean, all of them are red.

1241
00:53:25,100 --> 00:53:29,000
Tinged basically is what it boils down to, right?

1242
00:53:29,000 --> 00:53:29,900
That's red tinge.

1243
00:53:30,400 --> 00:53:33,900
I'm guessing that that also Cape is as well.

1244
00:53:34,500 --> 00:53:35,300
Yes it is.

1245
00:53:35,900 --> 00:53:37,800
So, and they're super red tinged.

1246
00:53:38,200 --> 00:53:38,900
So,

1247
00:53:39,900 --> 00:53:41,900
I'm not sure what to make of that.

1248
00:53:41,900 --> 00:53:42,600
Exactly.

1249
00:53:42,600 --> 00:53:47,700
I really am not sure what to think about what's going on there because

1250
00:53:47,700 --> 00:53:49,900
it's obviously a line still correctly.

1251
00:53:51,900 --> 00:53:52,600
I don't know.

1252
00:53:52,600 --> 00:53:54,700
I do not know why that would be happening.

1253
00:53:54,700 --> 00:53:56,700
It's almost like the alpha.

1254
00:53:56,700 --> 00:53:59,700
The fact that has an alpha channel is changing the red somehow.

1255
00:54:03,400 --> 00:54:04,300
Very curious.

1256
00:54:04,600 --> 00:54:05,700
Let's try one more file.

1257
00:54:06,400 --> 00:54:07,500
I'm just interested to see.

1258
00:54:08,400 --> 00:54:11,400
So I'm going to go back to bleeding hero, head here.

1259
00:54:12,100 --> 00:54:13,600
And instead of letting hero head.

1260
00:54:13,600 --> 00:54:16,500
I'm going to change here ahead to actually be some other file that has

1261
00:54:16,500 --> 00:54:16,800
Alpha.

1262
00:54:16,800 --> 00:54:21,800
So testing layer 04, for example, so let's try another one.

1263
00:54:22,300 --> 00:54:26,300
Basically, that doesn't have any Alpha in it because that one doesn't

1264
00:54:26,300 --> 00:54:27,200
if I remember correctly.

1265
00:54:29,300 --> 00:54:29,900
So there we go.

1266
00:54:29,900 --> 00:54:31,400
And so that one's correct.

1267
00:54:31,400 --> 00:54:31,700
Right?

1268
00:54:31,700 --> 00:54:37,000
That actually looks exactly like I expected to look, let's try one

1269
00:54:37,000 --> 00:54:38,400
that does have Alpha in it.

1270
00:54:41,400 --> 00:54:45,200
And so that actually also does look correct to me.

1271
00:54:45,300 --> 00:54:45,800
I think.

1272
00:54:45,800 --> 00:54:47,000
Let's let's double-check.

1273
00:54:47,800 --> 00:54:51,200
Let's load up three there that does look proper.

1274
00:54:51,600 --> 00:54:52,600
That's what it looks like.

1275
00:54:53,200 --> 00:54:58,600
Yeah, so I don't know, everything works, except our little hero.

1276
00:54:58,600 --> 00:55:00,200
What's wrong with our little fellow?

1277
00:55:00,600 --> 00:55:01,300
You know what I'm saying?

1278
00:55:01,300 --> 00:55:02,700
What's the problem?

1279
00:55:02,800 --> 00:55:04,700
Of course, that doesn't have any red in it.

1280
00:55:05,400 --> 00:55:09,100
There's that so I guess I should probably also go ahead and try.

1281
00:55:09,900 --> 00:55:12,500
Go ahead and put one in there that has red in it.

1282
00:55:12,500 --> 00:55:16,400
So I think 00 would be the right one for that.

1283
00:55:16,400 --> 00:55:17,100
Probably.

1284
00:55:19,200 --> 00:55:20,800
What is, what is 0?

1285
00:55:20,800 --> 00:55:22,400
0 0.

1286
00:55:22,400 --> 00:55:24,000
That one won't actually show from where we are.

1287
00:55:24,000 --> 00:55:24,600
Oh, well, you know what?

1288
00:55:24,600 --> 00:55:25,200
I could just draw it.

1289
00:55:25,200 --> 00:55:29,000
I'll just I'll just go back and keep drawing it at 0 0 again.

1290
00:55:29,400 --> 00:55:32,400
So we'll go ahead and do that and look at 0 0.

1291
00:55:32,400 --> 00:55:38,700
So now we should see that that sign post on there or not opes.

1292
00:55:39,900 --> 00:55:42,000
Yeah, there we go.

1293
00:55:42,400 --> 00:55:45,700
So that looks correct as well.

1294
00:55:45,700 --> 00:55:48,700
Everything basically looks right.

1295
00:55:48,700 --> 00:55:51,000
Except our little dude.

1296
00:55:51,300 --> 00:55:55,400
I don't know what is going on with our little dude, but he appears to

1297
00:55:55,400 --> 00:55:56,400
be incorrect.

1298
00:55:56,400 --> 00:56:01,500
So, let's see if I, if I go ahead and

1299
00:56:03,300 --> 00:56:04,100
We're on the sky.

1300
00:56:05,000 --> 00:56:06,400
Yeah, everybody looks right.

1301
00:56:07,000 --> 00:56:08,500
These are all expected.

1302
00:56:08,500 --> 00:56:10,300
I know it's kind of weird that they're there but basically they would

1303
00:56:10,300 --> 00:56:11,600
get Alpha doubt.

1304
00:56:12,200 --> 00:56:15,000
Once we actually do our Alpha blending to actually show the things

1305
00:56:15,000 --> 00:56:15,700
that are underneath it.

1306
00:56:15,700 --> 00:56:20,600
So what I'm focusing on is in here and basically our hero dude, for

1307
00:56:20,600 --> 00:56:26,800
whatever reason seems to have this problem where he's redshifted and I

1308
00:56:26,800 --> 00:56:30,200
have no idea why that actually is true.

1309
00:56:30,700 --> 00:56:32,400
I'm wondering if the test something

1310
00:56:32,600 --> 00:56:34,600
With when it wraps around, I don't know.

1311
00:56:34,600 --> 00:56:39,200
Don't see why that would be or the pre stepping doesn't seem to make a

1312
00:56:39,200 --> 00:56:40,200
lot of sense to me.

1313
00:56:40,300 --> 00:56:48,600
Either trying to think if there's any reason why that would be I'm not

1314
00:56:48,600 --> 00:56:50,400
I'm not getting any ideas here guys.

1315
00:56:50,400 --> 00:56:51,100
I'm really not.

1316
00:56:51,100 --> 00:56:53,600
So this might be something we have to sleep on it.

1317
00:56:53,600 --> 00:56:57,800
Be nice to get it, catch the bug in the next two minutes, but without

1318
00:56:57,800 --> 00:56:59,800
doing a little bit of digging and actually,

1319
00:57:00,800 --> 00:57:04,600
I'm not sure that we're likely to at least than I'm likely to.

1320
00:57:05,200 --> 00:57:08,200
Yeah, so all of those guys are redshifted basically.

1321
00:57:08,400 --> 00:57:12,300
Every last, every last one of those guys is red shifted, even though

1322
00:57:12,300 --> 00:57:14,500
pretty obviously other people can read it.

1323
00:57:14,500 --> 00:57:17,500
So I guess for the last two minutes, I might, as well just do a quick

1324
00:57:17,500 --> 00:57:22,300
little exploration and take a look at what he has.

1325
00:57:22,300 --> 00:57:27,500
For example, I guess I'll go ahead and restore this guy to front head,

1326
00:57:28,000 --> 00:57:29,900
and I'm just going to go ahead and look and see if

1327
00:57:30,000 --> 00:57:34,200
If that header of his has anything unusual in it that I am not

1328
00:57:34,200 --> 00:57:35,200
expecting to see.

1329
00:57:36,000 --> 00:57:37,100
So, let's go ahead and step in.

1330
00:57:37,100 --> 00:57:38,500
Here we go.

1331
00:57:38,500 --> 00:57:39,700
Ahead and load this guy.

1332
00:57:40,200 --> 00:57:43,500
And of course, unfortunately, I guess we are not really looking at

1333
00:57:43,500 --> 00:57:46,100
everything that we might want to look at at the moment because there's

1334
00:57:46,100 --> 00:57:46,800
actually more.

1335
00:57:46,800 --> 00:57:50,900
I don't know if you guys remember when we looked at the that the BMP

1336
00:57:50,900 --> 00:57:54,300
file format thing online.

1337
00:57:54,900 --> 00:57:58,200
If you remember there was extended headers, there was stuff that came

1338
00:57:58,200 --> 00:57:59,800
after the header that was

1339
00:58:00,000 --> 00:58:02,100
Just the stuff that we were looking at.

1340
00:58:02,400 --> 00:58:04,900
So for example, in version 3 header, right?

1341
00:58:04,900 --> 00:58:07,500
You had compression which is a compression.

1342
00:58:07,500 --> 00:58:09,200
What compression method was used?

1343
00:58:09,300 --> 00:58:12,600
You had size of bitmap Horrors, resolution colors, use this sort of

1344
00:58:12,600 --> 00:58:13,100
stuff.

1345
00:58:13,400 --> 00:58:17,800
So what we could do is also kind of look a little bit after this, we

1346
00:58:17,800 --> 00:58:22,800
could say, all right, you know, let's go ahead and take a quick look

1347
00:58:23,300 --> 00:58:26,200
at what we have after the header.

1348
00:58:26,200 --> 00:58:29,300
So read result, contents.

1349
00:58:29,900 --> 00:58:31,700
That will just take a look here.

1350
00:58:31,700 --> 00:58:32,900
And I think, what is it?

1351
00:58:33,100 --> 00:58:34,000
D word, compression.

1352
00:58:34,000 --> 00:58:37,000
So basically, we can take a look at what's in there.

1353
00:58:37,400 --> 00:58:39,700
I guess it's time for the Q&A, so we won't get very far.

1354
00:58:40,500 --> 00:58:43,000
But let's take a look at what we've got here.

1355
00:58:43,000 --> 00:58:47,900
So I guess which oops, that's no.

1356
00:58:47,900 --> 00:58:48,400
Good.

1357
00:58:48,800 --> 00:58:49,300
There we go.

1358
00:58:50,100 --> 00:58:50,900
So I guess we're.

1359
00:58:50,900 --> 00:58:52,000
Where are we on here?

1360
00:58:52,000 --> 00:58:54,800
There's the, there's the BM part.

1361
00:58:55,300 --> 00:58:59,500
There's the file size, which is, I guess a d word, right?

1362
00:59:00,000 --> 00:59:00,700
So there we go.

1363
00:59:01,700 --> 00:59:02,600
Oh, I've got it right here.

1364
00:59:02,700 --> 00:59:03,100
Duh.

1365
00:59:03,500 --> 00:59:08,900
So we got the file type, got the file size, which is that we've got to

1366
00:59:08,900 --> 00:59:13,400
reserves, which we have, we have the offset, which was that, we have

1367
00:59:13,400 --> 00:59:15,200
the size, which was that

1368
00:59:20,600 --> 00:59:21,400
That's a little weird.

1369
00:59:24,300 --> 00:59:25,000
Wait a minute.

1370
00:59:27,400 --> 00:59:28,300
Why is that?

1371
00:59:30,500 --> 00:59:32,300
Why is the size 124?

1372
00:59:34,500 --> 00:59:35,900
That doesn't make very good sense.

1373
00:59:35,900 --> 00:59:37,900
Does it if you think about it?

1374
00:59:40,600 --> 00:59:41,800
Hmm.

1375
00:59:43,200 --> 00:59:44,800
All right, let's keep going with that.

1376
00:59:44,800 --> 00:59:47,000
So if 144 says the size.

1377
00:59:47,900 --> 00:59:49,300
What is the size supposed to be?

1378
00:59:50,100 --> 00:59:51,400
Oh, it's just the size of the header.

1379
00:59:51,500 --> 00:59:52,000
So that's fine.

1380
00:59:52,000 --> 00:59:52,400
Okay.

1381
00:59:52,400 --> 00:59:52,800
Okay.

1382
00:59:53,100 --> 00:59:54,200
I'm more relaxed.

1383
00:59:54,200 --> 00:59:55,600
Now that's totally fine.

1384
00:59:55,900 --> 00:59:57,700
If the size is just supposed to be the size of the header.

1385
00:59:57,700 --> 00:59:58,800
That's totally fine.

1386
00:59:59,200 --> 00:59:59,800
So, no.

1387
01:00:00,100 --> 01:00:02,300
Okay, no, no need to no need for alarm.

1388
01:00:02,600 --> 01:00:03,100
You got thing.

1389
01:00:03,100 --> 01:00:03,700
Got the planes.

1390
01:00:03,700 --> 01:00:06,800
We got the bits per pixel, which is 32, which is what we wanted.

1391
01:00:07,900 --> 01:00:13,100
And so if we go ahead and look at what happens after the 32, well,

1392
01:00:14,500 --> 01:00:16,000
Let's see, 7132.

1393
01:00:17,200 --> 01:00:18,800
We're going to need a little bit more.

1394
01:00:18,800 --> 01:00:20,900
Just give me a little bit more visibility there, please.

1395
01:00:21,100 --> 01:00:23,900
So if we see what happens after the 32, which is what I was interested

1396
01:00:23,900 --> 01:00:31,300
in after that 32, which is a un 16, so there it is.

1397
01:00:32,300 --> 01:00:34,100
Basically, we've got a 3.

1398
01:00:34,800 --> 01:00:37,100
So that's that's what the compression value is.

1399
01:00:37,300 --> 01:00:40,700
So what is a three in this file format?

1400
01:00:40,900 --> 01:00:41,700
0 indicates?

1401
01:00:41,700 --> 01:00:44,100
The data is a compressed, one indicates 8,

1402
01:00:44,300 --> 01:00:47,900
Orally to indicates for a bit early algorithm.

1403
01:00:48,200 --> 01:00:49,500
But what is 3?

1404
01:00:50,700 --> 01:00:54,600
Nobody tells us what three is apparently but that is what it is.

1405
01:00:54,600 --> 01:00:55,100
Is it not?

1406
01:00:55,100 --> 01:00:55,700
There it is.

1407
01:00:55,700 --> 01:00:56,300
It's three.

1408
01:00:57,000 --> 01:01:01,200
I'm pretty sure right people.

1409
01:01:01,400 --> 01:01:04,900
So we've got some kind of a weird compression thing going on is what

1410
01:01:04,900 --> 01:01:05,800
it looks like.

1411
01:01:05,900 --> 01:01:12,200
So if I have this guy here, what happens if I export him a new and I

1412
01:01:12,200 --> 01:01:15,200
go ahead and Export him to test here, a front head bitmaps.

1413
01:01:15,200 --> 01:01:17,500
I try to override him basically, right.

1414
01:01:17,900 --> 01:01:19,500
And I go ahead and hit replace.

1415
01:01:20,500 --> 01:01:22,500
What what sort of options do I have?

1416
01:01:22,500 --> 01:01:25,200
I can't turn off compression on here.

1417
01:01:25,800 --> 01:01:28,600
So somehow we got a compression format.

1418
01:01:29,300 --> 01:01:32,100
That isn't uncompressed, I guess.

1419
01:01:32,700 --> 01:01:35,800
Apparently, so, what was that compression format?

1420
01:01:36,900 --> 01:01:38,200
I'm very interested to know.

1421
01:01:39,500 --> 01:01:40,700
Let's take a look here.

1422
01:01:42,100 --> 01:01:44,600
3 indicates that bit Fields.

1423
01:01:44,600 --> 01:01:47,000
Encoding was used, what?

1424
01:01:47,000 --> 01:01:49,500
Pray tell is bit Fields, encoding.

1425
01:01:50,600 --> 01:01:52,800
Let's see if the bitmap of abla.

1426
01:01:52,800 --> 01:01:55,500
Do we have a documentation of bit fields and coding?

1427
01:01:56,000 --> 01:01:59,600
Or are you just going to state that it is bit Fields encoding and

1428
01:01:59,600 --> 01:02:02,100
you're not going to tell me anything else.

1429
01:02:02,600 --> 01:02:04,200
So as the value has to be 0 in the fit.

1430
01:02:04,200 --> 01:02:06,100
My data is uncompressed include biblical but right.

1431
01:02:06,100 --> 01:02:11,600
But what is a bit Fields contain bit Fields 16 and 32 B 6?

1432
01:02:11,800 --> 01:02:13,000
32-bit BMP.

1433
01:02:13,000 --> 01:02:16,800
Files contain bit Fields masks values in place of the color palette,

1434
01:02:17,200 --> 01:02:17,900
but I don't know that.

1435
01:02:17,900 --> 01:02:21,700
That actually the compression field must always be value of 3.

1436
01:02:21,800 --> 01:02:26,700
When a file stores, 16-bit data, 16-bit pixels in the Windows.

1437
01:02:26,700 --> 01:02:27,000
NT.

1438
01:02:27,000 --> 01:02:30,000
Format are two bytes in size and are stored in big endian order.

1439
01:02:30,300 --> 01:02:30,500
Okay.

1440
01:02:30,500 --> 01:02:32,400
So this is I guess, what we actually do know, sorry.

1441
01:02:32,400 --> 01:02:35,300
I'm blowing through the Q&A here, guys, but I thought this was kind of

1442
01:02:35,300 --> 01:02:38,600
an interesting because we basically see what the problem is that the

1443
01:02:38,600 --> 01:02:40,300
data actually has some compression in it.

1444
01:02:40,900 --> 01:02:41,600
So, yeah, so I

1445
01:02:41,700 --> 01:02:45,700
assume that what we should probably do is actually let's just take a

1446
01:02:45,700 --> 01:02:46,800
couple seconds here and do this.

1447
01:02:46,800 --> 01:02:50,400
And I guess tomorrow, I said, I probably knew tomorrow, we can go

1448
01:02:50,400 --> 01:02:53,800
ahead and and a bug that I thought I tried to save these guys

1449
01:02:53,800 --> 01:02:56,100
uncompressed, but I think I know what actually happened now that I

1450
01:02:56,100 --> 01:02:59,400
think about it, but that's okay.

1451
01:03:00,400 --> 01:03:01,900
We're supposed to be learning about file formats.

1452
01:03:01,900 --> 01:03:02,900
So let's just go ahead.

1453
01:03:02,900 --> 01:03:05,900
We'll just go ahead and read whatever that data for write is as an

1454
01:03:05,900 --> 01:03:07,400
exercise tomorrow.

1455
01:03:07,800 --> 01:03:08,100
All right.

1456
01:03:08,100 --> 01:03:11,700
So what I did want to do though, just before ending their is, in

1457
01:03:11,700 --> 01:03:15,000
addition, our header now that we kind of know what's actually in

1458
01:03:15,000 --> 01:03:15,200
there.

1459
01:03:15,200 --> 01:03:18,800
Now, let's go ahead and say that we must have these extra Fields as

1460
01:03:18,800 --> 01:03:19,200
well.

1461
01:03:19,600 --> 01:03:21,900
So let's, let's go ahead and put those in there, right?

1462
01:03:22,000 --> 01:03:25,500
So we have a d word for compression that we actually want to look at.

1463
01:03:25,500 --> 01:03:27,000
Now this compression.

1464
01:03:27,700 --> 01:03:29,800
We've got a size of bitmap.

1465
01:03:30,000 --> 01:03:31,400
Field in there.

1466
01:03:31,400 --> 01:03:36,500
We've got Horrors resolution, which I guess is some kind of a thing

1467
01:03:36,500 --> 01:03:39,000
that talks about the DPI of the image.

1468
01:03:39,000 --> 01:03:41,600
I guess, you know, trying to say something like that.

1469
01:03:41,600 --> 01:03:42,600
I suppose not that.

1470
01:03:42,600 --> 01:03:48,300
We care about that at all, but colors, used and colors importance.

1471
01:03:48,300 --> 01:03:48,700
There we go.

1472
01:03:48,700 --> 01:03:49,200
Colors.

1473
01:03:49,200 --> 01:03:49,900
Important.

1474
01:03:50,600 --> 01:03:52,300
And so now we can take a look.

1475
01:03:54,400 --> 01:03:57,900
I suppose that that compression value and actually think about what

1476
01:03:57,900 --> 01:03:58,500
that's going to be.

1477
01:03:58,500 --> 01:03:59,700
So if we go in here,

1478
01:04:00,600 --> 01:04:03,400
And I set a breakpoint, we should be able to see that.

1479
01:04:03,400 --> 01:04:07,200
The compression value is not set on these guys and see.

1480
01:04:07,200 --> 01:04:09,400
It is later, but maybe not, maybe that won't be it.

1481
01:04:10,200 --> 01:04:12,500
So, this is 3 here, right?

1482
01:04:12,500 --> 01:04:20,500
So it also it says, 34 compression on the first guy, we load right for

1483
01:04:20,500 --> 01:04:21,600
game update and render.

1484
01:04:21,600 --> 01:04:25,200
Which is this dude right here and that guy renders properly.

1485
01:04:25,600 --> 01:04:27,800
So that doesn't make a whole lot of sense.

1486
01:04:27,900 --> 01:04:29,800
But again, we'll have to go see what that maybe the

1487
01:04:29,900 --> 01:04:32,900
Fielding coding, we need to know, maybe it can sort of shift them

1488
01:04:32,900 --> 01:04:33,700
around or whatever.

1489
01:04:33,700 --> 01:04:34,100
Right?

1490
01:04:35,100 --> 01:04:40,000
And then if I kind of go in here and load the hero head instead, oops,

1491
01:04:40,100 --> 01:04:40,900
let's go ahead in there.

1492
01:04:41,200 --> 01:04:44,600
I load the hero head that also has compression three.

1493
01:04:44,600 --> 01:04:47,800
So they all have compression set to 3, which is this bit field

1494
01:04:47,800 --> 01:04:48,400
encoding.

1495
01:04:48,600 --> 01:04:52,600
So, I guess we just lucked out that we loaded it properly properly.

1496
01:04:52,600 --> 01:04:57,600
The first time we must have, I'm guessing because that's the only way

1497
01:04:57,600 --> 01:04:59,800
that that probably could have worked the first.

1498
01:05:00,000 --> 01:05:00,300
Time.

1499
01:05:01,100 --> 01:05:03,600
So, basically, what we need to do is we need to know exactly what this

1500
01:05:03,600 --> 01:05:04,000
is.

1501
01:05:04,200 --> 01:05:08,100
We need to find out what the bit field encoding was and so, oh, I

1502
01:05:08,100 --> 01:05:09,700
guess it tells us right here, bit fields.

1503
01:05:09,700 --> 01:05:12,200
And so, if the bit map contains six times three bits per pixel, then

1504
01:05:12,200 --> 01:05:15,900
only a compression by 3 is reported and the red green and blue mask

1505
01:05:15,900 --> 01:05:18,600
Fields will be president following the header in place of a color

1506
01:05:18,600 --> 01:05:20,500
mask, Taste of the color palette.

1507
01:05:20,600 --> 01:05:21,500
So that's producing.

1508
01:05:21,500 --> 01:05:24,000
So maybe this is actually saying oh, hey guess what guys?

1509
01:05:24,200 --> 01:05:26,800
We can move the red green and blue around anywhere.

1510
01:05:26,800 --> 01:05:28,200
We actually want to.

1511
01:05:29,000 --> 01:05:30,300
So it's not really compression.

1512
01:05:30,300 --> 01:05:31,900
I don't know why you would call that compression.

1513
01:05:32,400 --> 01:05:33,800
But apparently they decided to.

1514
01:05:34,200 --> 01:05:35,900
So, let's take a look at what those are.

1515
01:05:36,000 --> 01:05:39,300
They're saying that they come directly after the header.

1516
01:05:39,400 --> 01:05:42,800
So we're basically saying that these would come sort of right here,

1517
01:05:42,900 --> 01:05:43,200
right?

1518
01:05:43,200 --> 01:05:44,500
So they would actually come

1519
01:05:46,200 --> 01:05:46,800
Let's see here.

1520
01:05:47,300 --> 01:05:48,700
They would actually come.

1521
01:05:51,100 --> 01:05:52,300
Right here, right?

1522
01:05:52,400 --> 01:05:56,100
In the case, where you actually had that you'd have red mask, right?

1523
01:05:58,400 --> 01:05:59,600
Green mask.

1524
01:06:00,000 --> 01:06:04,900
And blue mask that and those are all d words apparently.

1525
01:06:04,900 --> 01:06:08,300
So let's go ahead and take a look now and see if those actually differ

1526
01:06:08,800 --> 01:06:10,300
and maybe that's our thing here.

1527
01:06:10,400 --> 01:06:11,600
So let's go and hexadecimal.

1528
01:06:12,200 --> 01:06:12,800
So, there we go.

1529
01:06:12,800 --> 01:06:14,100
There's the red, there's the green.

1530
01:06:14,100 --> 01:06:16,000
There's the blue and the alphas where we thought it was.

1531
01:06:16,000 --> 01:06:17,100
So that is what we thought.

1532
01:06:17,200 --> 01:06:19,200
So the next one, and hey, guess what?

1533
01:06:19,800 --> 01:06:21,400
It's in a totally different position.

1534
01:06:22,200 --> 01:06:24,700
Now, I have no idea why they would do that.

1535
01:06:24,900 --> 01:06:26,600
But that is what they did.

1536
01:06:26,900 --> 01:06:27,800
So there you have it.

1537
01:06:27,800 --> 01:06:29,900
So basically all we really need to do to fix.

1538
01:06:30,000 --> 01:06:30,400
This.

1539
01:06:30,400 --> 01:06:31,200
I was correct.

1540
01:06:31,200 --> 01:06:36,000
I guess in my initial assumption that they were moved around and so I

1541
01:06:36,000 --> 01:06:38,700
guess all we have to do and we'll do this tomorrow because I don't

1542
01:06:38,700 --> 01:06:40,100
want to go any further into the Q&A.

1543
01:06:40,100 --> 01:06:43,800
But all we really have to do is make this little guy here that loads.

1544
01:06:43,800 --> 01:06:44,400
The thing.

1545
01:06:44,500 --> 01:06:48,600
It's going to have to obey these masks parameters so that we can

1546
01:06:48,600 --> 01:06:49,400
actually get

1547
01:06:52,800 --> 01:06:54,500
Our values into the correct place.

1548
01:06:55,300 --> 01:06:56,000
Alright.

1549
01:06:56,900 --> 01:07:00,000
Well, that was all I really wanted to get done today.

1550
01:07:00,000 --> 01:07:03,900
Anyway, tomorrow, we can fix that bug and then we can go ahead.

1551
01:07:03,900 --> 01:07:06,200
And of course, we have something else that will be fun to do.

1552
01:07:06,200 --> 01:07:10,100
And talk about, which is basically that, after we fix his color

1553
01:07:10,100 --> 01:07:10,700
problem.

1554
01:07:10,900 --> 01:07:15,000
We will also want to start going in and doing obeying the alpha

1555
01:07:15,000 --> 01:07:17,500
channel on him when we actually do our blitt.

1556
01:07:17,600 --> 01:07:20,300
And so that's going to be something that we will also do.

1557
01:07:21,300 --> 01:07:24,100
And yeah, and so I think that'll be a lot of fun to talk about just

1558
01:07:24,100 --> 01:07:24,700
how that works.

1559
01:07:24,700 --> 01:07:26,500
It's not particularly complicated but

1560
01:07:27,300 --> 01:07:28,000
It'll be interesting.

1561
01:07:28,300 --> 01:07:31,600
All right, so I'm going to go ahead and close that down and call that

1562
01:07:31,600 --> 01:07:33,200
the end of things for today.

1563
01:07:33,200 --> 01:07:38,500
And then I'm going to say it's time for Q&A.

1564
01:07:38,500 --> 01:07:41,700
Please prefix, your questions with q: and try to keep them to stuff

1565
01:07:41,700 --> 01:07:43,900
that we've done today or stuff that we've done in the previous stream

1566
01:07:43,900 --> 01:07:45,200
so that we can stay on topic.

1567
01:07:45,200 --> 01:07:46,400
If you want to ask off-topic questions.

1568
01:07:46,400 --> 01:07:48,600
You can do that in the pre stream.

1569
01:07:48,600 --> 01:07:53,100
Come about 15 minutes before we start handmade hero and you can ask

1570
01:07:53,100 --> 01:07:57,100
anything you want because we always do kind of random discussion at

1571
01:07:57,100 --> 01:07:57,200
that.

1572
01:07:57,900 --> 01:07:59,200
Alright, let's see what we got here.

1573
01:07:59,200 --> 01:08:01,200
Let's see if we have any questions.

1574
01:08:02,600 --> 01:08:03,400
Does that make sense?

1575
01:08:10,900 --> 01:08:12,700
Somebody says that we have a typo.

1576
01:08:13,200 --> 01:08:14,500
What type of do we have here?

1577
01:08:14,500 --> 01:08:15,400
Colors user?

1578
01:08:15,400 --> 01:08:16,200
That's not right.

1579
01:08:16,200 --> 01:08:16,600
There we go.

1580
01:08:16,600 --> 01:08:17,399
Colors used.

1581
01:08:18,700 --> 01:08:19,100
Okay.

1582
01:08:31,200 --> 01:08:32,500
No questions.

1583
01:08:32,600 --> 01:08:34,700
It is a question free day.

1584
01:08:41,300 --> 01:08:44,300
Probably does not matter but you have why associated with with oh,

1585
01:08:45,200 --> 01:08:45,500
you're right.

1586
01:08:45,500 --> 01:08:48,700
It doesn't matter, but we should fix that because if we ever, if we

1587
01:08:48,700 --> 01:08:52,500
ever actually did something serious in there, it would break.

1588
01:08:52,500 --> 01:08:55,500
Like, if we tried to do the up down flip that, that would break.

1589
01:08:55,500 --> 01:08:58,800
So, yeah, that's, that's a good typos to fix even though it doesn't

1590
01:08:58,800 --> 01:08:59,800
actually have any effect.

1591
01:09:00,000 --> 01:09:04,100
This, this particular loop the loop could change later, and then we

1592
01:09:04,100 --> 01:09:05,399
would be like, what's going on?

1593
01:09:10,100 --> 01:09:13,500
When we stick to using bitmaps the duration of handmade hero or delve

1594
01:09:13,500 --> 01:09:15,200
into the lands of PNG.

1595
01:09:15,800 --> 01:09:18,399
I don't know that we'll ever use PNG.

1596
01:09:18,500 --> 01:09:23,700
We might compress these when we get to when we want to start shipping

1597
01:09:23,700 --> 01:09:27,300
things, but we won't necessarily use PNG for that.

1598
01:09:28,200 --> 01:09:31,300
We might you know, when we're going to compress, things will think

1599
01:09:31,300 --> 01:09:32,300
about how we want them.

1600
01:09:32,300 --> 01:09:33,000
Compressed.

1601
01:09:33,800 --> 01:09:38,200
We probably won't just you know use PNG because it happens to be a

1602
01:09:38,200 --> 01:09:39,700
slightly compressed format or whatever.

1603
01:09:40,300 --> 01:09:42,800
PNG probably wouldn't compress our stuff that well either.

1604
01:09:43,600 --> 01:09:45,399
I mean, it might compress things like the Sprites.

1605
01:09:45,399 --> 01:09:48,200
Okay, because of, you can do that, you know, can do rle compression on

1606
01:09:48,200 --> 01:09:49,100
the rows or whatever.

1607
01:09:51,200 --> 01:09:56,800
But you know a lot of the graphics are very painterly and so PNG.

1608
01:09:56,800 --> 01:10:00,500
By itself might not help, you know, you'd probably have to do like

1609
01:10:00,500 --> 01:10:03,100
quantization of it to palletized or something and then it would help

1610
01:10:03,100 --> 01:10:03,300
more.

1611
01:10:03,300 --> 01:10:06,300
I don't know it is but I'm not sure about that yet.

1612
01:10:06,300 --> 01:10:08,800
We'll have to see what we want to do when we get to when it gets to

1613
01:10:08,800 --> 01:10:11,500
the time to think about compression, but we don't even think about

1614
01:10:11,500 --> 01:10:12,400
that for a long time.

1615
01:10:21,000 --> 01:10:23,600
What's the advantage in defining the bitmap header yourself as opposed

1616
01:10:23,600 --> 01:10:25,000
to using the windows supplied bitmap.

1617
01:10:25,000 --> 01:10:25,500
Info header?

1618
01:10:25,500 --> 01:10:27,300
Because this is platform independent code.

1619
01:10:28,100 --> 01:10:31,600
If you were to use the bitmap info header struct, then everyone who's

1620
01:10:31,700 --> 01:10:35,100
compiles, handmade Hero on, other platforms would immediately break.

1621
01:10:35,900 --> 01:10:38,000
So can't really do that.

1622
01:10:39,900 --> 01:10:41,400
How about fixing PB file loading?

1623
01:10:41,400 --> 01:10:43,100
One dlls Reloaded?

1624
01:10:46,200 --> 01:10:47,900
I would like to, but we're already cut.

1625
01:10:47,900 --> 01:10:49,800
Let me see if there's questions.

1626
01:10:50,700 --> 01:10:52,400
Let me see what we have for questions.

1627
01:10:54,200 --> 01:10:55,200
Here's my Q cone working.

1628
01:10:55,200 --> 01:10:58,000
Yes, but I only start filtering when I say it's Q&A.

1629
01:10:58,000 --> 01:11:01,700
So if you put Q colons before the Q&A, they don't get looked at.

1630
01:11:01,700 --> 01:11:03,900
So it's only cues that happen after the Q&A.

1631
01:11:06,000 --> 01:11:09,500
Are we converting are loaded images to a runtime texture format?

1632
01:11:10,400 --> 01:11:17,400
Well, I mean, we will eventually be having to put them up to GPU.

1633
01:11:17,500 --> 01:11:21,500
So at that point we I mean, I don't know that we'll ever bother

1634
01:11:21,500 --> 01:11:22,200
compressing them.

1635
01:11:22,200 --> 01:11:24,900
We might it depends whether we're bandwidth starved or not and really

1636
01:11:24,900 --> 01:11:27,900
care about that because obviously compressing things has a cost, but

1637
01:11:27,900 --> 01:11:30,600
in terms of image quality, but that's, that's way down the road.

1638
01:11:30,600 --> 01:11:32,400
That's not something we need to think about the moment.

1639
01:11:41,400 --> 01:11:43,400
Why not use a simple custom format for assets?

1640
01:11:43,400 --> 01:11:50,000
We might we very male we very well may use a simple custom format p7.

1641
01:11:50,000 --> 01:11:50,300
Samurai.

1642
01:11:50,300 --> 01:11:51,600
PNG is lossless.

1643
01:11:51,700 --> 01:11:52,500
Yes.

1644
01:11:52,500 --> 01:11:56,100
It is lost this with somebody suggesting that it was not lossless.

1645
01:12:00,300 --> 01:12:02,900
If somebody was suggesting that, PNG was lossy.

1646
01:12:02,900 --> 01:12:04,000
That's that's not really true.

1647
01:12:04,000 --> 01:12:06,700
However, I would point out that we could use it loss of weight.

1648
01:12:07,400 --> 01:12:11,100
Because what you can do is you can quantize the image in a way that

1649
01:12:11,100 --> 01:12:15,200
makes it compress well with PNG, which does make the process law.

1650
01:12:15,200 --> 01:12:17,200
See, even though ping itself is not lossy.

1651
01:12:17,500 --> 01:12:21,300
So saying ping is lossless is a little misleading because it's really

1652
01:12:22,500 --> 01:12:25,700
About how you're using it that determines whether it ends up being a

1653
01:12:25,700 --> 01:12:26,200
lossy.

1654
01:12:26,200 --> 01:12:29,500
Because like, for example, if you want to actually get good

1655
01:12:29,500 --> 01:12:32,200
compression out of ping, you actually have to make it law, see,

1656
01:12:32,500 --> 01:12:35,100
instead of lossless because losses just doesn't get you very good

1657
01:12:35,100 --> 01:12:35,600
impression.

1658
01:12:38,700 --> 01:12:40,300
Are you going to do different blending modes?

1659
01:12:40,300 --> 01:12:41,700
Other than Alpha blending?

1660
01:12:43,000 --> 01:12:45,900
Well, it depends what you mean by Alpha blending.

1661
01:12:46,300 --> 01:12:47,100
Obviously Alpha.

1662
01:12:47,100 --> 01:12:50,400
Blending just means blending that involves an alpha Channel and pretty

1663
01:12:50,400 --> 01:12:51,300
much probably are.

1664
01:12:51,300 --> 01:12:56,100
We will always be using an alpha Channel, but we may use different

1665
01:12:56,100 --> 01:12:57,000
blend modes as in.

1666
01:12:57,000 --> 01:13:01,200
We may use additive right, which is still using an alpha Channel.

1667
01:13:01,700 --> 01:13:04,600
This is technically not Alpha blending, what we're doing right now.

1668
01:13:05,400 --> 01:13:07,600
In terms of like if you wanted to name it.

1669
01:13:07,900 --> 01:13:13,500
It would actually be called like you know mod or I guess, this is

1670
01:13:13,500 --> 01:13:17,000
probably still be additive with premultiplied Alpha it be inversed.

1671
01:13:17,000 --> 01:13:19,400
Inverted destination is what we'll probably be doing first.

1672
01:13:20,800 --> 01:13:23,600
So, yeah, so Alpha blending is misleading because Alpha blending just

1673
01:13:23,600 --> 01:13:26,000
means blending that uses the alpha Channel and there's lots of

1674
01:13:26,000 --> 01:13:27,800
different blends that can all use the alpha channel.

1675
01:13:27,800 --> 01:13:28,500
That makes sense.

1676
01:13:43,900 --> 01:13:46,300
You start filtering before an okay, number of questions happen before.

1677
01:13:46,300 --> 01:13:49,800
And well, I can't because people who post Q Colin's, during the stream

1678
01:13:49,800 --> 01:13:52,900
may have had their cue Cullen's answered by stuff.

1679
01:13:52,900 --> 01:13:55,600
I did in the Stream, So Q Colin's have to start.

1680
01:13:55,600 --> 01:13:57,100
Once I'm done explaining everything.

1681
01:13:57,100 --> 01:13:59,000
So everyone has to hold their cue Colin's.

1682
01:13:59,000 --> 01:14:02,300
If they actually want me to answer them till the point where I say,

1683
01:14:02,300 --> 01:14:04,600
I'm done, so that we know that I haven't answered any and I don't have

1684
01:14:04,600 --> 01:14:07,200
to kind of like wheel backwards and scroll through a tons of questions

1685
01:14:07,200 --> 01:14:09,900
to see which ones were not answered yet, if that makes sense.

1686
01:14:11,400 --> 01:14:14,000
Should asset loading, Kobe platform independent or platform-specific

1687
01:14:14,000 --> 01:14:14,500
in this case.

1688
01:14:14,500 --> 01:14:17,300
Would you put the load bitmap into the game, dll?

1689
01:14:18,300 --> 01:14:21,600
Well, the little bit map right now is in the game, dll, so that is

1690
01:14:21,600 --> 01:14:24,300
where I did put it and that is where it belongs at the moment.

1691
01:14:24,400 --> 01:14:26,500
Now, it's possible that on some platforms.

1692
01:14:26,500 --> 01:14:29,000
You do need to have some part of the loading.

1693
01:14:29,000 --> 01:14:33,700
Kobe platform acidic, but it's highly unlikely that the part that

1694
01:14:33,700 --> 01:14:34,700
actually processes.

1695
01:14:34,700 --> 01:14:37,900
The file format needs to be platform-specific.

1696
01:14:38,000 --> 01:14:41,000
It may use some platform slightly specific things.

1697
01:14:41,100 --> 01:14:44,300
Like intrinsics that are different that are like pound defined

1698
01:14:44,300 --> 01:14:47,400
differently across platforms or stuff like that, but it's often times.

1699
01:14:47,700 --> 01:14:48,900
It's not platform.

1700
01:14:48,900 --> 01:14:52,100
Civic enough to put it into like the win32 section.

1701
01:14:52,100 --> 01:14:52,700
For example.

1702
01:15:05,200 --> 01:15:07,100
I think the alpha blending question.

1703
01:15:07,100 --> 01:15:13,200
Meant, will you move one pixel at a time or blend movement between

1704
01:15:13,200 --> 01:15:13,900
pixels?

1705
01:15:14,800 --> 01:15:15,700
Oh, are you?

1706
01:15:16,600 --> 01:15:18,000
Oh, okay.

1707
01:15:18,000 --> 01:15:20,300
So you guys aren't talking about Alpha blending at all.

1708
01:15:20,900 --> 01:15:24,800
You're talking about sub-pixel rendering, right?

1709
01:15:25,200 --> 01:15:27,500
Is that if I'm getting you correctly?

1710
01:15:27,500 --> 01:15:29,900
If you're talking about, will be doing sub-pixel rendering, the answer

1711
01:15:29,900 --> 01:15:30,600
is yes.

1712
01:15:32,300 --> 01:15:32,800
Well,

1713
01:15:34,800 --> 01:15:35,200
Okay.

1714
01:15:37,000 --> 01:15:39,000
It's very complicated in this is really not.

1715
01:15:39,000 --> 01:15:42,600
This is really premature to explain this at this point, but I'll give

1716
01:15:42,600 --> 01:15:44,200
you I'll give you the capsule overview.

1717
01:15:45,000 --> 01:15:45,400
Okay?

1718
01:15:45,700 --> 01:15:49,400
So basically there's two things, there's two things to talk about.

1719
01:15:49,400 --> 01:15:50,000
Right?

1720
01:15:50,100 --> 01:15:51,500
Let's say these are two pixels.

1721
01:15:51,600 --> 01:15:51,800
Okay.

1722
01:15:51,800 --> 01:15:54,700
Well actually, I'll do for so that we can see both X and Y.

1723
01:15:54,800 --> 01:15:55,000
Okay.

1724
01:15:55,000 --> 01:15:56,600
So these are four pixels, right?

1725
01:15:57,100 --> 01:16:00,000
So there's two different things here that are involved.

1726
01:16:00,900 --> 01:16:05,500
There's sub-pixel rendering, which literally means that you can have

1727
01:16:05,500 --> 01:16:06,600
shapes that you are.

1728
01:16:06,800 --> 01:16:13,300
During rendering that pass through pixels and you are actually trying

1729
01:16:13,300 --> 01:16:15,000
to account for this slight.

1730
01:16:15,000 --> 01:16:21,000
Like, how much of the actual pixel is being sort of touched, by that

1731
01:16:21,000 --> 01:16:23,100
shape and you're rendering it out accordingly.

1732
01:16:23,100 --> 01:16:26,400
So you that's like, anti-icing it's like, multi, sampling, that sort

1733
01:16:26,400 --> 01:16:30,700
of stuff is for this sword technique, but there's a different thing

1734
01:16:30,700 --> 01:16:35,400
that happens when you're doing transparent bitmaps, and it's actually

1735
01:16:35,400 --> 01:16:36,500
ends up being texture.

1736
01:16:36,700 --> 01:16:37,300
Filtering.

1737
01:16:37,300 --> 01:16:41,100
Technically that gets you, the subpixel movement that you would

1738
01:16:41,100 --> 01:16:43,200
normally associate with multi sampling.

1739
01:16:43,500 --> 01:16:50,200
So, what actually happens when you're doing Blitz, is you have to

1740
01:16:50,200 --> 01:16:53,400
imagine the fact that the bitmap itself, right?

1741
01:16:53,400 --> 01:16:56,200
So here's the bit map of the guy right here.

1742
01:16:56,200 --> 01:16:56,700
He is.

1743
01:16:56,700 --> 01:16:57,200
Mr.

1744
01:16:57,300 --> 01:17:03,300
Mister dude, right the bitmap of the guy actually always has an apron

1745
01:17:03,300 --> 01:17:06,600
essentially of non rendering pixels.

1746
01:17:06,700 --> 01:17:07,000
Right.

1747
01:17:07,000 --> 01:17:09,700
He is in the middle of it and all around him.

1748
01:17:09,700 --> 01:17:13,700
There's at least a one pixel wide border of nothing, right in his

1749
01:17:13,700 --> 01:17:14,200
bitmap.

1750
01:17:14,200 --> 01:17:20,900
So what actually happens is that each individual pixel is not actually

1751
01:17:20,900 --> 01:17:22,700
rendered sub-pixel e.

1752
01:17:22,700 --> 01:17:28,900
It's actually rendered on a full pixel boundary, but it pulls from a

1753
01:17:28,900 --> 01:17:33,400
portion of the guy that can straddle multiple pixels, right?

1754
01:17:33,400 --> 01:17:36,500
So what happens is, when you actually get to the

1755
01:17:36,700 --> 01:17:41,300
Part where the guy is defined like right here, when you actually go to

1756
01:17:41,300 --> 01:17:42,000
draw that.

1757
01:17:42,000 --> 01:17:43,400
Let's say that you're drawing Hoops.

1758
01:17:43,400 --> 01:17:44,800
Like I got rid of his leg.

1759
01:17:44,800 --> 01:17:48,100
Sorry, dude, when you actually go to draw that, lets say you're

1760
01:17:48,100 --> 01:17:51,600
drawing these two pixels here and you're drawing them out of right

1761
01:17:51,600 --> 01:17:52,100
here.

1762
01:17:52,200 --> 01:17:52,800
Like this.

1763
01:17:54,100 --> 01:17:59,100
Then what happens is, depending on the shift, the subpixel in this

1764
01:17:59,100 --> 01:17:59,800
actually happens.

1765
01:18:00,000 --> 01:18:05,300
Fetch of the of the guys bitmap and you're actually fetching Blended

1766
01:18:05,300 --> 01:18:09,500
texels out of the guys, bitmap drawing solid, but the textile that you

1767
01:18:09,500 --> 01:18:15,400
fetched is actually at some has its Alpha Blended here, right?

1768
01:18:15,400 --> 01:18:20,600
So the alpha blending, when in terms of that the Restorations

1769
01:18:20,600 --> 01:18:26,400
rasterization Target, we may actually always be non sub-pixel, but we

1770
01:18:26,400 --> 01:18:29,900
will actually get partial Alpha movement from the guy because he

1771
01:18:30,000 --> 01:18:30,900
We'll be moving.

1772
01:18:31,000 --> 01:18:36,700
The fetch will be fetching out of his pixels on a line if that makes

1773
01:18:36,700 --> 01:18:37,000
sense.

1774
01:18:37,200 --> 01:18:39,600
So this is really I you don't have to understand this.

1775
01:18:39,600 --> 01:18:40,200
Now.

1776
01:18:40,700 --> 01:18:43,000
I didn't do a very good job explaining that because we're so we don't

1777
01:18:43,000 --> 01:18:45,200
we haven't talked about any of the things that are involved here.

1778
01:18:45,800 --> 01:18:49,500
But basically we probably won't ever need to do this because we're a

1779
01:18:49,500 --> 01:18:50,500
bit mapped game.

1780
01:18:50,600 --> 01:18:51,200
This is more.

1781
01:18:51,200 --> 01:18:54,400
If you have this is if you have a lot of stuff that's not coming from

1782
01:18:54,400 --> 01:18:54,800
bitmaps.

1783
01:18:54,800 --> 01:18:59,800
Like if you have actual polygons that are actually have edges is

1784
01:19:00,000 --> 01:19:00,500
This happen.

1785
01:19:00,500 --> 01:19:04,200
So like when you're trying to do 3D and you know, the silhouette edge

1786
01:19:04,200 --> 01:19:08,200
of a guy is defined by the actual polygons, right?

1787
01:19:08,200 --> 01:19:10,100
The interior is texture so you'd have to worry about it.

1788
01:19:10,100 --> 01:19:13,900
But the exterior is like the, you know, is defined the polygons that

1789
01:19:13,900 --> 01:19:17,300
exterior is where you start to have to deal with the actual multi

1790
01:19:17,300 --> 01:19:19,300
samples and sub-pixel rendering stuff like that.

1791
01:19:19,800 --> 01:19:22,200
I hope that answered the question and I was probably pretty bad

1792
01:19:22,200 --> 01:19:25,300
answer, but I guess another way to answer that question would be like

1793
01:19:25,300 --> 01:19:28,200
we'll get there and we'll talk about all that stuff in detail.

1794
01:19:33,600 --> 01:19:36,200
When we get Alpha blending working, we need to care about monitor,

1795
01:19:36,200 --> 01:19:40,200
monitor gamma due to color B values, not linearly mapping to monitor

1796
01:19:40,200 --> 01:19:40,700
brightness.

1797
01:19:40,900 --> 01:19:41,500
Yes.

1798
01:19:41,600 --> 01:19:42,100
Well,

1799
01:19:43,500 --> 01:19:44,400
I shouldn't say, yes.

1800
01:19:46,600 --> 01:19:48,000
I'll say at least technically.

1801
01:19:48,000 --> 01:19:51,800
Yes, you can often get away with not actually doing that and almost

1802
01:19:51,800 --> 01:19:52,900
nobody can tell the difference.

1803
01:19:53,500 --> 01:19:58,900
But, you know, it's at least something we should mention when we get

1804
01:19:58,900 --> 01:19:59,300
there.

1805
01:20:08,800 --> 01:20:11,800
I saw a game that has quarter pixel scrolling.

1806
01:20:12,300 --> 01:20:13,300
What is that?

1807
01:20:14,200 --> 01:20:15,500
I have no idea.

1808
01:20:16,000 --> 01:20:20,200
I assume that it's just a really bad version of General sub-pixel

1809
01:20:20,200 --> 01:20:24,500
scrolling where you only can scroll by fourths of a pixel.

1810
01:20:26,100 --> 01:20:28,300
I don't know why in this day and age.

1811
01:20:28,300 --> 01:20:28,900
I have no idea.

1812
01:20:28,900 --> 01:20:31,600
Why you couldn't always have completely smooth, sub-pixel scrolling,

1813
01:20:31,600 --> 01:20:32,800
but who knows?

1814
01:20:37,200 --> 01:20:38,400
Let's see.

1815
01:20:38,600 --> 01:20:39,400
Will we be doing?

1816
01:20:39,400 --> 01:20:41,500
Resampling to get bitmaps on the screen at arbitrary?

1817
01:20:41,500 --> 01:20:43,400
Size, is yes, we will be doing that.

1818
01:20:43,400 --> 01:20:45,400
We will actually be doing generic.

1819
01:20:45,400 --> 01:20:48,000
We will be doing full transforms, just not perspective.

1820
01:20:48,600 --> 01:20:50,700
So basically we'll be doing rotation as well.

1821
01:20:59,600 --> 01:20:59,800
we'll,

1822
01:21:00,000 --> 01:21:00,400
Made here.

1823
01:21:00,400 --> 01:21:02,900
I have Morton kinds faithful Hound.

1824
01:21:03,000 --> 01:21:08,100
Well, it'll have more than kinds faithful Watchdog because I already

1825
01:21:08,100 --> 01:21:08,900
cast that.

1826
01:21:09,200 --> 01:21:11,900
If you remember at the beginning, when I said, I needed material

1827
01:21:11,900 --> 01:21:13,600
elements for all of my spells.

1828
01:21:14,000 --> 01:21:16,600
I cast Morton kinds faithful Watchdog.

1829
01:21:16,900 --> 01:21:20,900
That's how I guarantee that we can't be surrounded by ogres.

1830
01:21:21,200 --> 01:21:23,800
And as you'll notice we have not been surrounded by ogres this entire

1831
01:21:23,800 --> 01:21:24,200
time.

1832
01:21:26,400 --> 01:21:30,600
If you want to see something else too ready, this is me attacking the

1833
01:21:30,600 --> 01:21:31,200
darkness.

1834
01:21:33,600 --> 01:21:34,700
I cast magic Missile.

1835
01:21:35,800 --> 01:21:38,200
What program did you make the cool command text on your trailer?

1836
01:21:38,200 --> 01:21:39,700
With it's homemade?

1837
01:21:44,000 --> 01:21:47,300
Our bitmask going to be in an atlas file sometime in the future.

1838
01:21:47,900 --> 01:21:52,000
So, I don't know again, like a lot of these questions are about what

1839
01:21:52,000 --> 01:21:53,600
we're going to do, but I think,

1840
01:21:54,700 --> 01:21:58,000
I mean, I've tried to kind of hammer this home, but maybe I'm not

1841
01:21:58,000 --> 01:21:59,700
doing good enough job of saying it.

1842
01:22:01,100 --> 01:22:05,500
Don't try to have too much of an idea about what we are going to do

1843
01:22:05,700 --> 01:22:09,700
because we don't know what we're going to do and it's way too.

1844
01:22:09,700 --> 01:22:11,500
We haven't written enough code and done enough.

1845
01:22:11,500 --> 01:22:14,400
Exploration to know whether an atlas file would be useful at all.

1846
01:22:14,400 --> 01:22:15,000
Right?

1847
01:22:15,500 --> 01:22:19,200
And so I really want to make sure everyone understands the fact that

1848
01:22:19,600 --> 01:22:21,100
in terms of Technology.

1849
01:22:22,800 --> 01:22:27,100
You always want to let yourself do the exploration to see what you

1850
01:22:27,100 --> 01:22:28,500
need to do and then do it.

1851
01:22:28,500 --> 01:22:30,700
So sometimes the questions makes sense when

1852
01:22:30,900 --> 01:22:33,000
Like, are we going to be doing sub-pixel rendering?

1853
01:22:33,400 --> 01:22:34,900
Like that's like a sort of thing to do.

1854
01:22:34,900 --> 01:22:36,300
We want to have that feature?

1855
01:22:36,300 --> 01:22:37,100
And that makes sense.

1856
01:22:37,500 --> 01:22:39,400
But an atlas is not a feature.

1857
01:22:39,400 --> 01:22:43,400
It's an implementation that gets you, you know, basically how you're

1858
01:22:43,400 --> 01:22:44,700
loading your bitmaps out.

1859
01:22:44,900 --> 01:22:47,500
We don't want to make those kind of decisions upfront.

1860
01:22:47,500 --> 01:22:51,500
Like, what we need to do is see what we're doing in terms of pulling

1861
01:22:51,500 --> 01:22:54,700
bitmaps off of disk and how we're using them and then make a decision

1862
01:22:54,700 --> 01:22:55,800
at that point.

1863
01:22:56,500 --> 01:22:58,200
Does it make sense to have something?

1864
01:22:58,800 --> 01:23:02,200
Like an atlas where things are packed in or not and so on.

1865
01:23:02,400 --> 01:23:05,500
And so we really have to think about what's makes sense for a

1866
01:23:05,500 --> 01:23:07,200
particular times.

1867
01:23:07,200 --> 01:23:08,800
And you always want to make those decisions.

1868
01:23:08,800 --> 01:23:09,900
Once you have the information.

1869
01:23:09,900 --> 01:23:13,900
You don't want to pre say, we're just going to do an atlas file if

1870
01:23:13,900 --> 01:23:14,400
that makes sense.

1871
01:23:14,400 --> 01:23:17,300
Because it maybe that's a really bad idea for the throughput, for our

1872
01:23:17,300 --> 01:23:19,200
game, in this case, right?

1873
01:23:30,100 --> 01:23:32,200
I saw a height times width.

1874
01:23:32,200 --> 01:23:36,100
Minus 1 in the reversing code, should that have been height times

1875
01:23:36,100 --> 01:23:39,500
width minus one without the parentheses or am I missing something?

1876
01:23:39,700 --> 01:23:43,300
So I know the code you're talking about and I'm sorry I kind of I

1877
01:23:43,300 --> 01:23:44,300
probably should have stopped it.

1878
01:23:44,300 --> 01:23:46,300
Explain that a little more directly.

1879
01:23:46,300 --> 01:23:50,000
I try not to explain this stuff too much, because we're going to be

1880
01:23:50,000 --> 01:23:52,500
writing a whole renderer where we're going to be spending like, you

1881
01:23:52,500 --> 01:23:55,200
know, weeks talking about nothing but pixels and alignment and all

1882
01:23:55,200 --> 01:23:55,900
these sorts of things.

1883
01:23:55,900 --> 01:23:58,000
So I didn't want to belabor the point, you know, twice.

1884
01:23:58,700 --> 01:23:59,900
So I do apologize for that.

1885
01:24:00,100 --> 01:24:03,400
And it's good, you know, please do ask questions when you see

1886
01:24:03,400 --> 01:24:04,000
something.

1887
01:24:06,100 --> 01:24:09,600
When you see something that doesn't make sense because I am kind of

1888
01:24:09,600 --> 01:24:11,700
glossing over some of the stuff since I know we'll talk about it

1889
01:24:11,700 --> 01:24:15,300
later, but it's good for you to understand it now as well, to a

1890
01:24:15,300 --> 01:24:16,100
certain extent.

1891
01:24:17,000 --> 01:24:19,400
So basically what you're talking about, I believe is this code right

1892
01:24:19,400 --> 01:24:19,800
here.

1893
01:24:20,700 --> 01:24:21,900
So, what's happening here?

1894
01:24:21,900 --> 01:24:26,700
If you remember, we've, we've got ourselves into a situation where we

1895
01:24:26,700 --> 01:24:30,200
loaded something where we're thinking about it this way, meaning we're

1896
01:24:30,200 --> 01:24:34,900
thinking about it in terms of this being the top.

1897
01:24:35,300 --> 01:24:35,800
And this being

1898
01:24:36,000 --> 01:24:39,300
The first in memory, right?

1899
01:24:39,500 --> 01:24:44,100
But we actually had is that what we think of as the bottom is actually

1900
01:24:44,100 --> 01:24:46,000
the first, right?

1901
01:24:47,500 --> 01:24:51,800
So, what I wanted to do since our screen like this is the bitmap in

1902
01:24:51,800 --> 01:24:52,400
memory.

1903
01:24:53,900 --> 01:24:57,000
Since our screen is not, that is not the case.

1904
01:24:57,000 --> 01:24:59,500
Our screen has it stopped here.

1905
01:25:00,400 --> 01:25:01,000
Right?

1906
01:25:02,500 --> 01:25:06,700
What I wanted to do, was copy it out, starting with the screens top,

1907
01:25:06,900 --> 01:25:12,200
which means that in, we're kind of we're going downward in memory this

1908
01:25:12,200 --> 01:25:12,600
way.

1909
01:25:12,700 --> 01:25:16,200
We're getting higher higher addresses this way, right?

1910
01:25:16,300 --> 01:25:18,300
But this has higher addresses going that way.

1911
01:25:18,700 --> 01:25:22,800
So what I wanted to do was basically move the pointer to the pixels in

1912
01:25:22,800 --> 01:25:23,400
the bitmap.

1913
01:25:23,500 --> 01:25:28,000
I wanted to point to the actual top, and then just go subtract from

1914
01:25:28,000 --> 01:25:30,700
the pointer to move it down as we go, right.

1915
01:25:31,000 --> 01:25:34,100
So while this was getting well, this was getting added to, to move its

1916
01:25:34,100 --> 01:25:35,200
pointer down every row.

1917
01:25:35,400 --> 01:25:38,100
This one's getting subtracted from right.

1918
01:25:39,500 --> 01:25:43,900
So what that means is I first have to advance it forwards by the

1919
01:25:43,900 --> 01:25:45,800
entire size of the bitmap.

1920
01:25:46,300 --> 01:25:49,900
But not quite because if I will answer it forwards by the entire size

1921
01:25:49,900 --> 01:25:53,400
of the bitmap, I'd be pointing to there, which is not what I

1922
01:25:53,500 --> 01:25:57,300
I want because the rows are still stored as they normally would be

1923
01:25:57,300 --> 01:25:57,500
there.

1924
01:25:57,500 --> 01:25:59,600
Just stored in inverse order.

1925
01:26:00,200 --> 01:26:04,500
So what I need to do is I need to basically go to the end of the

1926
01:26:04,500 --> 01:26:07,200
bitmap - one row, right?

1927
01:26:07,200 --> 01:26:10,500
You could think about it as if I added the if I if I added the whole

1928
01:26:10,500 --> 01:26:12,900
size of the bitmap, I wouldn't actually pointing to this pixel what

1929
01:26:12,900 --> 01:26:15,100
I'd really do pointing at would be like the Phantom pixel that we

1930
01:26:15,100 --> 01:26:15,600
right here.

1931
01:26:15,600 --> 01:26:16,100
Right?

1932
01:26:16,200 --> 01:26:18,800
I'd be pointing one past the ant the last pixel.

1933
01:26:19,300 --> 01:26:22,600
And so what I need to do is I need to go that far, but I need to go

1934
01:26:22,600 --> 01:26:23,400
that far -

1935
01:26:23,500 --> 01:26:24,000
One row.

1936
01:26:24,000 --> 01:26:27,800
So I'm actually on the last row instead of one past the last row, so

1937
01:26:27,800 --> 01:26:29,200
that's what this function is doing.

1938
01:26:29,300 --> 01:26:32,400
Its saying, this is the stride, basically that's the pitch, right?

1939
01:26:32,400 --> 01:26:34,100
That's, that's the amount to go pro.

1940
01:26:34,100 --> 01:26:39,800
I'm saying, go as many rows down, as there are in the bitmap -1, so

1941
01:26:39,800 --> 01:26:43,300
don't go past the last row, go, right to the last row.

1942
01:26:43,500 --> 01:26:44,300
And then each time.

1943
01:26:44,300 --> 01:26:45,400
I'm going to subtract 1 from it.

1944
01:26:45,400 --> 01:26:46,500
So hopefully that makes sense.

1945
01:26:57,500 --> 01:26:59,500
in tiles code, will the

1946
01:27:00,000 --> 01:27:04,900
where it's possible to move, be imported in bitmaps to

1947
01:27:09,800 --> 01:27:10,800
I'm not sure what that means.

1948
01:27:10,800 --> 01:27:11,400
Exactly.

1949
01:27:12,600 --> 01:27:14,900
Basically, if you're asking about what's going on here, like this,

1950
01:27:14,900 --> 01:27:16,500
nonsense with this background check, dude.

1951
01:27:16,500 --> 01:27:18,200
That was just me screwing around.

1952
01:27:19,400 --> 01:27:20,700
We're not going to do anything like that.

1953
01:27:20,700 --> 01:27:23,900
In actuality all of this, all of the tile map will actually be

1954
01:27:23,900 --> 01:27:25,600
rendered with graphics on top of it.

1955
01:27:25,800 --> 01:27:29,200
So that was just me, you know, I was just playing around because I

1956
01:27:29,200 --> 01:27:30,000
thought it was funny.

1957
01:27:30,500 --> 01:27:32,700
There's really no, that's there's no Rhyme or Reason to that.

1958
01:27:32,700 --> 01:27:34,200
It's not a useful thing at all.

1959
01:27:34,200 --> 01:27:35,500
I was just I was just playing around.

1960
01:27:50,300 --> 01:27:52,000
Let's see.

1961
01:27:57,200 --> 01:28:00,900
You can simplify drawbitmap a bit by changing Max x-intercept ization

1962
01:28:00,900 --> 01:28:04,100
to Min X, plus b map with same for height.

1963
01:28:08,100 --> 01:28:10,200
Sorry, what were you talking about here?

1964
01:28:13,800 --> 01:28:17,400
Oh, you're just talking about not by basically not having to do the

1965
01:28:17,400 --> 01:28:18,400
rounding twice.

1966
01:28:18,600 --> 01:28:20,600
I'm guessing is what you're talking about.

1967
01:28:25,400 --> 01:28:26,900
At least I think that's what you're talking about.

1968
01:28:27,100 --> 01:28:29,300
So, yes, and no.

1969
01:28:29,500 --> 01:28:32,800
So basically, the reason that I haven't done that yet is because

1970
01:28:32,800 --> 01:28:37,300
eventually we're going to extend this to be able to blit part of a

1971
01:28:37,300 --> 01:28:38,000
bitmap.

1972
01:28:38,300 --> 01:28:41,300
So eventually these will actually get passed in as a real.

1973
01:28:41,300 --> 01:28:44,300
So I didn't actually want to do that at this time.

1974
01:28:44,400 --> 01:28:47,100
Those will actually get this will actually be replaced soon.

1975
01:28:48,000 --> 01:28:52,100
But, yes, if you wanted to, you could just make Max X have this.

1976
01:28:52,100 --> 01:28:53,200
This be added to it.

1977
01:28:53,200 --> 01:28:54,000
And that would be fine.

1978
01:29:00,800 --> 01:29:03,300
Why not embrace the inverted bitmap format as the new screen format?

1979
01:29:03,300 --> 01:29:06,600
Since we're also using, why up for player to a as well because that's

1980
01:29:06,600 --> 01:29:08,700
just kind of arbitrary if that makes sense.

1981
01:29:09,900 --> 01:29:16,000
Because and in some sense, we will like basically the what actually

1982
01:29:16,000 --> 01:29:20,100
the underlying bitmap coordinate system is is going to be determined

1983
01:29:20,100 --> 01:29:21,800
by the operating system for the most part.

1984
01:29:21,800 --> 01:29:24,100
So we don't actually want to pick one or the other.

1985
01:29:24,300 --> 01:29:27,200
What we want to do is make sure that our layer of that draws things

1986
01:29:27,900 --> 01:29:29,600
takes in a uniform coordinate system.

1987
01:29:29,600 --> 01:29:30,500
That is the one that we

1988
01:29:30,600 --> 01:29:33,900
We like and then, you know, actually does the drawing off of that and

1989
01:29:33,900 --> 01:29:36,300
we don't really care what happens outside of that.

1990
01:29:36,400 --> 01:29:37,000
Right?

1991
01:29:38,800 --> 01:29:40,000
So we could do that.

1992
01:29:40,000 --> 01:29:41,100
That would be totally fine.

1993
01:29:41,400 --> 01:29:44,100
I don't know whether it's worth bothering to do it.

1994
01:29:45,000 --> 01:29:46,100
But, yeah, we could do that.

1995
01:29:46,600 --> 01:29:48,000
Mostly, what will end up happening?

1996
01:29:48,000 --> 01:29:51,200
Is eventually, we probably will be in a why up cord system, one way or

1997
01:29:51,200 --> 01:29:51,500
the other?

1998
01:29:51,500 --> 01:29:54,400
Because I believe if we, you know, if we switch to opengl for doing

1999
01:29:54,400 --> 01:29:59,000
rendering later on, it's going to be y up, usually, depending on how

2000
01:29:59,000 --> 01:29:59,800
you set.

2001
01:30:00,000 --> 01:30:00,400
Things up.

2002
01:30:00,400 --> 01:30:00,900
But yeah.

2003
01:30:07,700 --> 01:30:10,600
All right, we have reached the end of the screen.

2004
01:30:10,900 --> 01:30:12,100
The screen that's good.

2005
01:30:12,100 --> 01:30:17,200
The end of the Stream So I think it is time to call it a day.

2006
01:30:18,100 --> 01:30:21,400
Go forth and play around or do whatever it is that you're going to do

2007
01:30:21,400 --> 01:30:23,000
on this on this Tuesday evening.

2008
01:30:24,700 --> 01:30:26,700
So, yes, thank you everyone for joining me.

2009
01:30:26,700 --> 01:30:29,200
It was kind of fun to get bitmaps up on the screen today.

2010
01:30:29,200 --> 01:30:32,200
That's a pretty big step forward for us.

2011
01:30:32,200 --> 01:30:35,600
I would say because it kind of means that now we can start thinking

2012
01:30:35,600 --> 01:30:37,400
about what our game is going to look like.

2013
01:30:37,400 --> 01:30:39,000
Like whereas before we really couldn't.

2014
01:30:39,000 --> 01:30:42,800
So basically all we have to do tomorrow to kind of round things.

2015
01:30:42,800 --> 01:30:47,100
Out is allow ourselves to actually use.

2016
01:30:47,100 --> 01:30:49,900
Basically do something intelligent with the red green blue mask so

2017
01:30:49,900 --> 01:30:50,900
that we can load all the images.

2018
01:30:50,900 --> 01:31:02,100
And then I also have to go in and do alpha blending on the Sprites.

2019
01:31:02,100 --> 01:31:03,600
And like I said, we're probably going to do that.

2020
01:31:03,600 --> 01:31:05,700
We probably will do premultiplied inverse.

2021
01:31:05,700 --> 01:31:06,800
This is the inverse

2022
01:31:07,400 --> 01:31:08,400
ocean color kind of stuff.

2023
01:31:09,800 --> 01:31:12,400
In inverse multiplied, color of the destination.

2024
01:31:12,400 --> 01:31:16,200
I don't know what you call that modulated blending, maybe but it's

2025
01:31:16,200 --> 01:31:18,700
premultiplied destination Alpha modulator.

2026
01:31:18,700 --> 01:31:19,400
I don't even know.

2027
01:31:20,100 --> 01:31:22,600
This is the case where I feel like Sean barie could help me out here

2028
01:31:23,500 --> 01:31:26,300
and tell me what the correct name is for when you have premultiplied

2029
01:31:26,300 --> 01:31:29,000
Alpha and a Sprite, Which we're going to have to do and then you're

2030
01:31:29,000 --> 01:31:34,800
going to do alpha blending where you basically do 1 minus the alpha in

2031
01:31:34,800 --> 01:31:38,400
the source, fright times the destination color so that you end up with

2032
01:31:38,400 --> 01:31:39,200
Alpha blending.

2033
01:31:40,800 --> 01:31:44,600
As if you had done source and death separately.

2034
01:31:44,600 --> 01:31:45,200
I don't even know.

2035
01:31:45,500 --> 01:31:46,700
I have no idea what you call that.

2036
01:31:46,700 --> 01:31:51,500
I don't know if it has a standard name, but basically like I trust

2037
01:31:51,500 --> 01:31:54,800
that if it did, he would be able to tell me, so maybe he could tell me

2038
01:31:55,200 --> 01:31:58,500
before next week when I'll be able to name what the actual technique

2039
01:31:58,500 --> 01:31:59,800
that we're doing properly.

2040
01:31:59,800 --> 01:32:02,600
But even if he doesn't, we will be writing it tomorrow.

2041
01:32:02,600 --> 01:32:05,200
So, please join me tomorrow at same time.

2042
01:32:05,200 --> 01:32:06,500
Same place 8:00 p.m.

2043
01:32:06,600 --> 01:32:09,300
Pacific Standard time, on Twitch, where I will be

2044
01:32:09,400 --> 01:32:11,600
Be going ahead and fixing that red green blue, Mass thing.

2045
01:32:11,600 --> 01:32:14,400
I'll be writing the code to make it so that we can see through.

2046
01:32:14,400 --> 01:32:17,200
So we may say I've layered Sprites on top of each other and that is

2047
01:32:17,200 --> 01:32:20,800
pretty much the end of what we will need to sort of move forwards with

2048
01:32:20,800 --> 01:32:21,700
our engine architecture.

2049
01:32:21,700 --> 01:32:26,000
So we can kind of just bake those off into a corner and, and carry on

2050
01:32:26,000 --> 01:32:26,500
with things.

2051
01:32:26,500 --> 01:32:28,300
But now we will be able to use Graphics anywhere.

2052
01:32:28,300 --> 01:32:30,000
We want to, which is pretty great.

2053
01:32:30,400 --> 01:32:34,700
So that said, if you would like to follow along at home and want to

2054
01:32:34,700 --> 01:32:37,900
get access to the source code or art assets to play around with

2055
01:32:37,900 --> 01:32:39,300
yourself, you can go

2056
01:32:39,400 --> 01:32:41,900
Go ahead and go to handmade here at org where you can pre-order the

2057
01:32:41,900 --> 01:32:45,300
game and you will get a link in your email that can download all of

2058
01:32:45,300 --> 01:32:46,000
those things.

2059
01:32:46,300 --> 01:32:49,500
It also has all the previous day's source code so you can go catch up

2060
01:32:49,500 --> 01:32:50,200
on old videos.

2061
01:32:50,200 --> 01:32:52,700
If you want to code along with me from a previous day.

2062
01:32:52,700 --> 01:32:53,700
You can do that as well.

2063
01:32:54,100 --> 01:32:55,200
There is also a patreon.

2064
01:32:55,200 --> 01:32:58,500
If you want to support the video series, you can subscribe there, and

2065
01:32:58,600 --> 01:32:59,800
there's a news and Forum site.

2066
01:33:00,000 --> 01:33:02,000
You can go to, which is pretty cool.

2067
01:33:02,000 --> 01:33:02,800
It's got all sorts of fun.

2068
01:33:02,800 --> 01:33:03,600
It's got the schedule.

2069
01:33:03,600 --> 01:33:06,100
It's got an episode guide with annotations that you can use.

2070
01:33:06,100 --> 01:33:06,700
It's really great.

2071
01:33:06,700 --> 01:33:07,800
It's better than watching them on YouTube.

2072
01:33:07,800 --> 01:33:08,300
For sure.

2073
01:33:09,400 --> 01:33:11,900
You can go to the coding resources page for those ports to Mac and

2074
01:33:11,900 --> 01:33:14,600
Linux and all sorts of goodies there and a code discussion forum that

2075
01:33:14,600 --> 01:33:17,600
you can post in if you would like to ask questions, so please go there

2076
01:33:17,600 --> 01:33:18,600
if you're trying to learn from the series.

2077
01:33:18,600 --> 01:33:20,900
It's a great place filled with good resources for you.

2078
01:33:21,500 --> 01:33:22,500
Thank you very much for joining me.

2079
01:33:22,500 --> 01:33:26,400
It has been a pleasure as always and I will see you guys tomorrow.

