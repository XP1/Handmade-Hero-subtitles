1
00:00:02,900 --> 00:00:05,800
Hello everyone and welcome to handmade Heroes.

2
00:00:05,800 --> 00:00:07,800
Sure, we could a complete game live on stream.

3
00:00:07,800 --> 00:00:14,600
We our I think we finished pretty much all of our bug stuff in here.

4
00:00:14,600 --> 00:00:17,800
I don't think there's anything else left that we wanted to pay

5
00:00:17,800 --> 00:00:18,900
attention to budweis.

6
00:00:18,900 --> 00:00:25,800
So we reorganized our to-do list yesterday and today I think we should

7
00:00:25,800 --> 00:00:28,600
just take one more look at it because we kind of stopped in the middle

8
00:00:28,600 --> 00:00:29,100
of it.

9
00:00:29,100 --> 00:00:32,600
But I think we pretty much did most of what I

10
00:00:32,900 --> 00:00:33,600
To do there.

11
00:00:34,100 --> 00:00:38,200
Here is our to-do list and you can kind of see what's going on there.

12
00:00:38,500 --> 00:00:43,300
So it looked to me like the most sensible thing probably to do, was to

13
00:00:43,300 --> 00:00:47,000
go ahead and just take care of that sorting stuff.

14
00:00:47,000 --> 00:00:50,100
So that we have a way to disable sorting when we're in the debug

15
00:00:50,100 --> 00:00:51,700
system because we don't really need it.

16
00:00:56,600 --> 00:00:58,700
We don't really need it there and it slows things down tremendously

17
00:00:58,700 --> 00:01:02,300
because there's so many little rectangles for the for the fonts and

18
00:01:02,300 --> 00:01:05,800
stuff and there's really a couple different ways we could do that.

19
00:01:06,100 --> 00:01:08,500
There's two ways we could approach that problem one.

20
00:01:08,500 --> 00:01:12,900
Way to approach that problem is to be could just say, look, we're not

21
00:01:12,900 --> 00:01:14,900
going to sort it all in the debug system.

22
00:01:15,300 --> 00:01:19,500
The other way we could do, it is try to package those elements up into

23
00:01:19,500 --> 00:01:24,600
something that is sorted as a unit.

24
00:01:24,800 --> 00:01:26,300
So, you know,

25
00:01:26,400 --> 00:01:31,500
We could do rectangle lists and stuff like that that we kind of build

26
00:01:31,500 --> 00:01:34,500
this this whole thing and they don't need to have individual entries,

27
00:01:34,500 --> 00:01:35,000
right?

28
00:01:35,100 --> 00:01:38,300
Because in the game it kind of makes more sense to have individual

29
00:01:38,300 --> 00:01:41,400
entries for every Sprite because they tend to do get sorted around or

30
00:01:41,400 --> 00:01:44,600
that sort of stuff, but if you think about the use case for the debug

31
00:01:44,600 --> 00:01:45,800
system, you can sort of see that.

32
00:01:45,800 --> 00:01:47,200
It's much more like well.

33
00:01:47,200 --> 00:01:51,200
Okay, this this whole line of text is pretty much known that it

34
00:01:51,200 --> 00:01:54,300
doesn't need to get sorted other than as a big block, right?

35
00:01:55,000 --> 00:01:57,600
If you were going to sort it because it's not, like, I'm going to let

36
00:01:57,600 --> 00:02:01,200
the, you know, the first letter B in front of something and the second

37
00:02:01,200 --> 00:02:04,700
letter B behind it, they're all going to be sorted as a unit.

38
00:02:04,700 --> 00:02:07,600
And so, you can understand how another approach to it would be if we

39
00:02:07,600 --> 00:02:10,300
did want to enable sorting in the debug system, which maybe we do,

40
00:02:10,699 --> 00:02:13,100
then what we would want to do is just say, hey, there's got to be some

41
00:02:13,100 --> 00:02:14,500
way to do something.

42
00:02:14,500 --> 00:02:16,700
A little more elaborate here, right?

43
00:02:19,000 --> 00:02:22,600
Where we can cut a bunch of these things up and have them go through

44
00:02:22,600 --> 00:02:26,600
the sorting system in a more sensible fashion, right?

45
00:02:27,800 --> 00:02:30,200
And so, I don't know which one of those I want to do, I guess.

46
00:02:30,200 --> 00:02:35,100
One thing I could look at just kind of briefly and maybe we'll, you

47
00:02:35,100 --> 00:02:36,300
know, we'll just do that today.

48
00:02:36,500 --> 00:02:39,000
One thing I kind of wanted to look at is, you know, when we actually

49
00:02:39,000 --> 00:02:39,900
print these things out.

50
00:02:39,900 --> 00:02:42,900
So we have I believe in the debug UI stuff.

51
00:02:43,200 --> 00:02:45,200
I think we've got some stuff in here like text.

52
00:02:45,200 --> 00:02:48,200
Yeah, I think techstop is where all this this action happens.

53
00:02:48,300 --> 00:02:53,600
And so you cut a scene here, one of the things about tech stop, when

54
00:02:53,600 --> 00:02:58,200
we get past it is we do you know, we do get the string here and you

55
00:02:58,200 --> 00:02:59,900
can kind of see that when

56
00:03:00,100 --> 00:03:04,900
When we have the string, we do know ahead of time, probably the

57
00:03:04,900 --> 00:03:09,500
maximum number of bitmaps that we would push on there, right?

58
00:03:10,400 --> 00:03:15,400
So if we wanted to, we could probably do something where we do a more

59
00:03:15,400 --> 00:03:17,200
elaborate piece of work here.

60
00:03:17,200 --> 00:03:21,500
So, for example, you know, let's, let's just take a look real quick

61
00:03:21,500 --> 00:03:24,000
over here, just to kind of underscore what I'm talking about.

62
00:03:24,100 --> 00:03:26,100
Give you a little idea of what I mean.

63
00:03:26,800 --> 00:03:28,800
So if we run the game here, right?

64
00:03:29,000 --> 00:03:29,800
We can go in here.

65
00:03:30,000 --> 00:03:32,800
And we can turn on that show sort groups thing.

66
00:03:33,200 --> 00:03:35,800
And you can see that like all of these things are are sorted.

67
00:03:35,800 --> 00:03:37,900
And you know, when I open one of these you can just see there's just

68
00:03:37,900 --> 00:03:38,800
crazy.

69
00:03:38,900 --> 00:03:43,000
Just absolutely crazy numbers of these sort groups here because every

70
00:03:43,000 --> 00:03:47,200
last little one of these rectangles is thrown into the sorting system.

71
00:03:47,400 --> 00:03:52,600
So every last little character is thrown into the sorting system and

72
00:03:52,900 --> 00:03:54,400
and again, there's really no reason for that.

73
00:03:54,400 --> 00:03:57,300
Now, another thing that I point out here is not only is there really

74
00:03:57,300 --> 00:03:59,900
no reason for that, but if you think about it, there's

75
00:04:00,000 --> 00:04:02,700
Really no reason for the renderer to have to think about all of those

76
00:04:02,700 --> 00:04:04,700
things as being separate anyway, either.

77
00:04:04,900 --> 00:04:08,300
Because as far as its concerned, it would like, to know something

78
00:04:08,300 --> 00:04:11,500
probably like, oh, I just got a hole like group of things, I can just

79
00:04:11,500 --> 00:04:12,000
render here.

80
00:04:12,000 --> 00:04:15,300
I don't have to, like, step through them and think about different

81
00:04:15,300 --> 00:04:17,500
clipping rectangles for them and stuff like that, right?

82
00:04:19,700 --> 00:04:21,600
So let's take a look at this, just real quickly.

83
00:04:22,000 --> 00:04:26,200
If we look at builds Sprite graph here, you can see that it's taking.

84
00:04:26,900 --> 00:04:27,600
You know what?

85
00:04:27,600 --> 00:04:29,800
36 percent of the time, they're right in debug mode.

86
00:04:29,900 --> 00:04:32,400
And and obviously, if we compile and release mode, you know, we'd get

87
00:04:32,400 --> 00:04:36,300
a lot more out of that we can sort of see, just do a quick test to see

88
00:04:36,300 --> 00:04:37,000
what that would be.

89
00:04:37,000 --> 00:04:41,900
Like, because I would like to know I care about its performance in

90
00:04:41,900 --> 00:04:45,500
debug mode as well, unlike other pieces of code, potentially because

91
00:04:46,000 --> 00:04:49,200
in this case, I want to go to use the debug system and not have it

92
00:04:49,200 --> 00:04:52,800
slow things down, but I do kind of also just want to know about

93
00:04:52,800 --> 00:04:53,600
roughly speaking.

94
00:04:53,600 --> 00:04:54,600
What am I going to get there?

95
00:04:54,600 --> 00:04:58,900
So if I, if I go over here and look at the profile, let's take a look.

96
00:04:59,000 --> 00:04:59,800
So we can see builds.

97
00:05:00,000 --> 00:05:00,900
Graph here.

98
00:05:00,900 --> 00:05:02,400
It, what is it at 10:00 there?

99
00:05:02,400 --> 00:05:06,700
10% and I don't know if it ever gets particularly slow.

100
00:05:07,500 --> 00:05:11,300
It's still not too bad but it's, you know, it's like it's quite a bit

101
00:05:11,300 --> 00:05:12,700
slower, but you can kind of see.

102
00:05:13,300 --> 00:05:16,500
And that looks like all rectangles that looks like all these

103
00:05:16,500 --> 00:05:19,100
rectangles are problematic.

104
00:05:19,100 --> 00:05:19,500
I'm

105
00:05:21,000 --> 00:05:23,500
And I'm guessing you can kind of see how the sort stuff goes there.

106
00:05:23,500 --> 00:05:24,100
You can see it go.

107
00:05:24,100 --> 00:05:26,500
So so we could try, right?

108
00:05:26,500 --> 00:05:32,300
We could try to eliminate some of this sorting by just having all

109
00:05:32,300 --> 00:05:33,200
these things grouped together.

110
00:05:33,200 --> 00:05:37,200
And like I said, I don't know how how plausible that is.

111
00:05:37,200 --> 00:05:38,500
But I just want a quick take a look.

112
00:05:38,700 --> 00:05:42,200
So let's say, for example, that we wanted to make that be something

113
00:05:42,200 --> 00:05:46,700
that, that, that would, that would, that would aggravate.

114
00:05:46,700 --> 00:05:50,200
Let's just, let's just see quickly, what that would be.

115
00:05:50,800 --> 00:05:53,400
So I think that's what's that of the frame view.

116
00:05:53,400 --> 00:05:55,100
There's a profile bars.

117
00:05:55,100 --> 00:05:55,800
Is that what it is?

118
00:05:55,800 --> 00:05:57,000
Now, it's not profile bars.

119
00:05:57,900 --> 00:05:59,400
Its frame bars, right?

120
00:05:59,600 --> 00:05:59,700
So

121
00:06:00,000 --> 00:06:04,600
I believe it's this guy right here and in the frame bars thing, it

122
00:06:04,600 --> 00:06:07,800
looks like what we do is we go through the stored events here and then

123
00:06:07,800 --> 00:06:10,400
we, yeah, we do the rectangles.

124
00:06:11,700 --> 00:06:13,000
And what are we doing here?

125
00:06:13,000 --> 00:06:15,900
We're just going the region wrecked is.

126
00:06:16,200 --> 00:06:16,600
Yeah.

127
00:06:16,600 --> 00:06:18,300
The the Min Y and the max.

128
00:06:18,300 --> 00:06:18,500
Why?

129
00:06:18,500 --> 00:06:19,100
Like that?

130
00:06:19,500 --> 00:06:21,200
So the problem here

131
00:06:23,800 --> 00:06:25,000
To a certain extent.

132
00:06:26,900 --> 00:06:31,900
Is that we don't necessarily know how many rectangles we need a

133
00:06:31,900 --> 00:06:33,000
priority, right?

134
00:06:33,000 --> 00:06:37,600
We don't really necessarily know how many of those rectangles we're

135
00:06:37,600 --> 00:06:38,400
going to have.

136
00:06:38,600 --> 00:06:42,900
We know that we're going to have frame count numbers of rectangle

137
00:06:42,900 --> 00:06:49,300
slots but we don't know how many stored events there are per per slot

138
00:06:50,100 --> 00:06:53,400
but we could certainly do something a little bit more intelligent

139
00:06:53,400 --> 00:06:53,600
here.

140
00:06:53,600 --> 00:06:56,200
If we wanted to something that was more of

141
00:06:56,300 --> 00:07:00,700
Like hey do these rectangles in blocks, you know you can imagine doing

142
00:07:00,700 --> 00:07:03,800
them in blocks of 256 at a time or something like that where we just

143
00:07:03,800 --> 00:07:07,100
kind of slot them in two like a series.

144
00:07:07,200 --> 00:07:09,700
And and so just to give you a little bit idea of what I'm talking

145
00:07:09,700 --> 00:07:10,300
about.

146
00:07:10,800 --> 00:07:13,500
So let's say we go over to and would render group

147
00:07:14,900 --> 00:07:15,900
You can see on here.

148
00:07:18,800 --> 00:07:20,200
Whereas our entry, there it is.

149
00:07:20,900 --> 00:07:24,300
You can see when we have something like render render entry rectangle,

150
00:07:24,500 --> 00:07:25,900
you can see what we've got.

151
00:07:25,900 --> 00:07:30,200
We've got the pre multiply color at the p and the dim what we could do

152
00:07:30,200 --> 00:07:34,000
instead is we could do something like this.

153
00:07:48,200 --> 00:07:49,800
And I guess I could even do it this way.

154
00:07:52,500 --> 00:07:53,000
Right?

155
00:07:54,500 --> 00:07:58,500
Where when we push one of these render entry rectangle patches on, we

156
00:07:58,500 --> 00:07:59,800
could set a count field.

157
00:07:59,800 --> 00:08:01,800
That was like, how many of these are there going to be?

158
00:08:02,300 --> 00:08:05,900
And then instead of just sending down a single render entry rectangle

159
00:08:06,100 --> 00:08:07,600
as part of this process?

160
00:08:09,800 --> 00:08:12,800
We would send down a whole group of them, write a whole cluster.

161
00:08:14,000 --> 00:08:19,200
And since the batches gets sorted as a group that would take pressure

162
00:08:19,200 --> 00:08:23,700
off the sorting system as well as pressure off the rendering iteration

163
00:08:23,700 --> 00:08:26,000
Loop because it doesn't have to do things like look up the clip

164
00:08:26,000 --> 00:08:28,600
rectangle for every single rectangle.

165
00:08:28,600 --> 00:08:32,299
If it knows that all of the rectangles in the batch are the same,

166
00:08:32,600 --> 00:08:33,200
right?

167
00:08:33,400 --> 00:08:35,299
So that's pretty straightforward.

168
00:08:35,400 --> 00:08:37,400
You can see how that would work right?

169
00:08:38,100 --> 00:08:42,100
And what I did here was I just kind of left ourselves an array of one.

170
00:08:42,100 --> 00:08:43,600
But really, we would make this video

171
00:08:43,700 --> 00:08:45,300
An array of however, many we wanted.

172
00:08:45,300 --> 00:08:49,400
Like, when we actually push this on the render stack, when we set the

173
00:08:49,400 --> 00:08:52,500
count, we would just make it so that it's, you know, however, big

174
00:08:52,600 --> 00:08:55,500
however, many we feel like storing in that batch.

175
00:08:58,000 --> 00:08:58,400
Right.

176
00:08:58,400 --> 00:08:59,600
And the

177
00:09:00,000 --> 00:09:03,500
Same thing would be true in the case of the render engine pit map.

178
00:09:03,500 --> 00:09:04,900
You can see here how we've got it.

179
00:09:04,900 --> 00:09:07,800
Like, okay, we've got these pieces of information.

180
00:09:08,500 --> 00:09:12,400
We could do the exact same thing with the render into bitmap, right?

181
00:09:12,400 --> 00:09:15,800
We could do something like, say okay, there's a render entry bitmap

182
00:09:15,800 --> 00:09:22,000
batch, and that is just some number of these

183
00:09:26,800 --> 00:09:27,300
Right.

184
00:09:28,900 --> 00:09:31,800
So that hopefully is pretty clear how we would do that.

185
00:09:31,800 --> 00:09:35,400
And since those things in theory should just flow through the system,

186
00:09:35,800 --> 00:09:38,200
we wouldn't have to do anything special to support them.

187
00:09:38,300 --> 00:09:41,300
The only thing we have to do is make sure that our to renderer back

188
00:09:41,300 --> 00:09:45,800
ends understand when they encounter them that they just need to

189
00:09:45,800 --> 00:09:46,500
iterate over.

190
00:09:46,500 --> 00:09:47,500
However many of them.

191
00:09:47,700 --> 00:09:53,000
The count field says that there are right and that would be all there

192
00:09:53,000 --> 00:09:53,700
was to it.

193
00:09:53,800 --> 00:09:57,200
Furthermore we could if we wanted to then just get rid of the concept

194
00:09:57,200 --> 00:09:58,000
that you can ever put a

195
00:09:58,200 --> 00:10:02,900
Under entry rectangle on at all and just make it so that you're always

196
00:10:02,900 --> 00:10:05,200
putting on a batch, right?

197
00:10:05,200 --> 00:10:08,100
And it's just a question of if you only wanted one, then there's a

198
00:10:08,100 --> 00:10:08,700
batch of one

199
00:10:14,900 --> 00:10:16,700
So that seems pretty straightforward.

200
00:10:17,600 --> 00:10:19,800
Yeah, and I don't know that there's anything

201
00:10:23,000 --> 00:10:25,500
Yeah, I don't know that there's anything particularly weird about

202
00:10:25,500 --> 00:10:26,000
that.

203
00:10:26,600 --> 00:10:27,600
Think that would just work.

204
00:10:28,200 --> 00:10:31,100
So you know, if we want to do something like that I'm just thinking

205
00:10:32,100 --> 00:10:35,700
how we would probably do it when we go to do something like draw frame

206
00:10:35,700 --> 00:10:40,500
bars here we would have to do something like that where we would open

207
00:10:40,500 --> 00:10:43,100
a batch so we'd probably do something like

208
00:10:46,000 --> 00:10:49,600
You know, rectangle batch begin batch.

209
00:10:56,700 --> 00:11:01,500
and we would pass, I guess the render what would be past their we

210
00:11:01,500 --> 00:11:03,700
would pass the

211
00:11:07,200 --> 00:11:08,900
Probably we would pass.

212
00:11:09,300 --> 00:11:10,700
I'm guessing the render group.

213
00:11:11,800 --> 00:11:14,300
And probably, that's it.

214
00:11:16,800 --> 00:11:19,500
Maybe we would need the you, I transform.

215
00:11:23,100 --> 00:11:26,500
I'm not sure that we would though because the transform can actually

216
00:11:26,500 --> 00:11:29,000
vary per rectangle.

217
00:11:29,200 --> 00:11:32,800
So I think it's actually just that, right?

218
00:11:36,800 --> 00:11:38,700
although, since the clipping rectangle point,

219
00:11:40,600 --> 00:11:42,300
I guess you have to pass.

220
00:11:44,300 --> 00:11:47,300
At least which cliprect you're going to be using but again, I don't

221
00:11:47,300 --> 00:11:50,000
know that that was stored in there anyway.

222
00:11:50,100 --> 00:11:50,900
Where is the clip?

223
00:11:50,900 --> 00:11:51,700
Rect stored.

224
00:11:52,600 --> 00:11:54,200
Is that in the render group.

225
00:11:56,100 --> 00:11:58,900
It is in the render group so I guess we don't really even need that.

226
00:12:00,000 --> 00:12:00,900
Just pass.

227
00:12:02,700 --> 00:12:06,300
Something like, hey, we want to send down rectangles 256 at a time.

228
00:12:06,300 --> 00:12:10,100
Most, and we want to do it on this render group.

229
00:12:10,100 --> 00:12:13,900
We'd have this wrecked batch thing here and then we would just have a

230
00:12:13,900 --> 00:12:15,500
thing where it was like, oh yeah.

231
00:12:15,500 --> 00:12:21,800
You know, when we call Push wrecked or whatever instead of passing the

232
00:12:21,800 --> 00:12:24,700
render group, we would pass like the wrecked batch, right?

233
00:12:24,700 --> 00:12:27,600
So we'd say, like out here is a wrecked patch, you know,

234
00:12:30,300 --> 00:12:36,900
here's a wrecked batch like so and that would be it.

235
00:12:37,600 --> 00:12:40,300
I think that would basically be it and then we'll all we would have to

236
00:12:40,300 --> 00:12:43,900
do is when we were done at the end of this.

237
00:12:43,900 --> 00:12:45,700
We would again just close out.

238
00:12:45,800 --> 00:12:48,300
We'd close out that batch right.

239
00:12:48,900 --> 00:12:49,200
Oops.

240
00:12:49,200 --> 00:12:49,500
Um,

241
00:12:51,000 --> 00:12:51,900
When outside there?

242
00:12:54,000 --> 00:12:55,400
so, I think

243
00:13:07,200 --> 00:13:08,600
We just be something like that.

244
00:13:11,400 --> 00:13:13,600
We probably have to say that this is a rectangle batch.

245
00:13:15,100 --> 00:13:17,600
So I think we just have something like that and then all we have to do

246
00:13:17,600 --> 00:13:21,400
is actually put something on the other end of it that allows that to

247
00:13:21,400 --> 00:13:22,500
work, right?

248
00:13:23,700 --> 00:13:30,800
And so if we were to, let's see here, if we were to go to the render

249
00:13:30,800 --> 00:13:31,800
group itself,

250
00:13:34,100 --> 00:13:35,800
And in here, I would actually implement.

251
00:13:35,800 --> 00:13:37,700
This would look something like

252
00:13:40,700 --> 00:13:41,600
and batch in here.

253
00:13:49,300 --> 00:13:53,200
I don't really know that there's all that much that I would need to do

254
00:13:53,200 --> 00:13:53,700
here.

255
00:13:53,700 --> 00:13:55,200
It's mostly just bookkeeping.

256
00:13:56,500 --> 00:14:03,900
So this is here it's going to be minimum or I should say Max

257
00:14:04,600 --> 00:14:06,400
rectangles per batch.

258
00:14:08,800 --> 00:14:10,000
So, pretty much.

259
00:14:15,000 --> 00:14:19,900
What we would do is this rectangle batch thing, would just store the

260
00:14:19,900 --> 00:14:23,000
current like basically I need to do is create sort of, you know,

261
00:14:23,000 --> 00:14:23,900
almost a bin.

262
00:14:24,400 --> 00:14:27,100
That's going to hold these rectangles as they come in.

263
00:14:27,900 --> 00:14:34,300
And all I'm going to do after, you know, I after they come in is issue

264
00:14:34,300 --> 00:14:35,400
them as the batch.

265
00:14:35,400 --> 00:14:38,600
If I get to the max number, that can be held in that bin, I will

266
00:14:38,600 --> 00:14:41,600
simply make a new bin and start putting more in it, right?

267
00:14:42,600 --> 00:14:43,400
And that's it.

268
00:14:44,100 --> 00:14:45,200
That's all I'm going to do.

269
00:14:45,700 --> 00:14:50,400
Now there is a little bit of a catch here and in fact, so in order to

270
00:14:50,400 --> 00:14:56,800
support this, I think, you know, I'm not there's there's two ways I

271
00:14:56,800 --> 00:14:59,900
could do this and I'm going to do it the way that makes things kind.

272
00:15:00,400 --> 00:15:05,600
Easier on the using Code as opposed to being space minimal because I

273
00:15:05,600 --> 00:15:07,700
think that's probably the right decision here, you know, we're

274
00:15:07,700 --> 00:15:10,200
probably not going to be super memory, constrained, a lot and handmade

275
00:15:10,200 --> 00:15:10,600
hero.

276
00:15:11,700 --> 00:15:17,100
When we go to ship, I think we want something here, like total count

277
00:15:17,200 --> 00:15:18,300
and used count.

278
00:15:20,100 --> 00:15:20,600
Right.

279
00:15:20,900 --> 00:15:23,800
Because what's going to happen is we're going to have to reserve space

280
00:15:23,800 --> 00:15:27,400
on the render stack for however many the total number we might push is

281
00:15:28,000 --> 00:15:31,000
but then we're only going to use some subset of those, right?

282
00:15:31,000 --> 00:15:32,600
We're probably not going to use them all.

283
00:15:32,600 --> 00:15:36,100
And so we need to know when we encounter this guy.

284
00:15:36,100 --> 00:15:38,600
How many of them we need to render but you also need to know how many

285
00:15:38,600 --> 00:15:41,000
of them there were to begin with these so that we can skip over them,

286
00:15:41,600 --> 00:15:42,000
right?

287
00:15:47,300 --> 00:15:47,800
That's all.

288
00:15:53,400 --> 00:15:53,900
Oops.

289
00:15:58,400 --> 00:15:58,800
Okay.

290
00:15:59,100 --> 00:16:01,200
And I think this actually wants to be a pointer.

291
00:16:01,200 --> 00:16:04,300
I don't know why I didn't do it as a pointer probably because I don't

292
00:16:04,300 --> 00:16:05,100
know what I'm doing.

293
00:16:06,600 --> 00:16:07,400
That's okay.

294
00:16:15,800 --> 00:16:17,600
Okay, so yeah.

295
00:16:17,600 --> 00:16:19,900
All of these guys, I think they really want to be pointers.

296
00:16:19,900 --> 00:16:22,400
The reason is because they're going to update state in that guy.

297
00:16:23,100 --> 00:16:25,000
So that's probably needs to happen.

298
00:16:31,100 --> 00:16:33,700
So then we've got these wrecked patches.

299
00:16:33,800 --> 00:16:36,200
They are whatever they are.

300
00:16:36,700 --> 00:16:40,300
And I think that all would be fine.

301
00:16:40,400 --> 00:16:43,700
Okay, so what do we store inside this rectangle, batch?

302
00:16:43,700 --> 00:16:49,300
Well, let's just see what we actually find that we need in here.

303
00:16:50,300 --> 00:16:52,000
So, when we begin one of these, right?

304
00:16:52,000 --> 00:16:55,300
We're going to do is we're going to push one of these render entry

305
00:16:55,300 --> 00:16:56,400
rectangle batches.

306
00:16:56,400 --> 00:16:57,700
We're going to push that on there.

307
00:16:58,100 --> 00:16:59,900
So we need to

308
00:17:00,400 --> 00:17:01,600
Have the entry for it.

309
00:17:02,100 --> 00:17:05,200
And furthermore, the entry itself is going to have these guys.

310
00:17:05,200 --> 00:17:08,099
So I don't know that we need, we probably really don't need anything

311
00:17:08,099 --> 00:17:12,599
else like we can probably almost just return the pointer sort of.

312
00:17:12,700 --> 00:17:15,800
The only reason that we can't is because we need to potentially

313
00:17:15,800 --> 00:17:18,700
sometimes update the pointer, but I think we may be able to get away

314
00:17:18,700 --> 00:17:23,099
with only ever using the pointer that might actually just work.

315
00:17:24,300 --> 00:17:26,400
So, yeah, I'm going to switch over to this window.

316
00:17:26,400 --> 00:17:27,300
So I don't

317
00:17:28,600 --> 00:17:29,500
Run the risk of.

318
00:17:31,100 --> 00:17:32,400
Running behind my head.

319
00:17:33,900 --> 00:17:36,300
okay, so if we have this rectangle batch,

320
00:17:40,100 --> 00:17:44,400
I'm going to go ahead and say that the entry equals with the entry

321
00:17:44,400 --> 00:17:45,900
that we're going to push, right?

322
00:17:46,200 --> 00:17:51,700
And then the entry will have the total count set to Max, rectangles

323
00:17:51,700 --> 00:17:53,400
per batch and

324
00:17:55,700 --> 00:17:57,700
The used count will be equal to 0.

325
00:17:58,600 --> 00:17:59,800
Then when we end the

326
00:18:00,100 --> 00:18:03,100
Ouch, I guess there's really nothing that we have to do when we end

327
00:18:03,100 --> 00:18:03,700
the batch.

328
00:18:03,800 --> 00:18:05,900
So really, you know,

329
00:18:11,700 --> 00:18:16,400
Really, we could consider getting rid of the end of H entirely because

330
00:18:16,400 --> 00:18:19,300
I guess there really isn't anything to do and in fact I guess until I

331
00:18:19,300 --> 00:18:20,500
know that I need it for something.

332
00:18:20,500 --> 00:18:23,000
I suppose I just shouldn't have it there right?

333
00:18:24,100 --> 00:18:27,500
Because that's just wasteful at that point and you know we wouldn't

334
00:18:27,500 --> 00:18:28,500
really know if it was working.

335
00:18:28,500 --> 00:18:31,600
Anyway like if I messed it up and there was a bug we would never know.

336
00:18:31,600 --> 00:18:34,000
And then we'd think that we'd done it right or whatever so might as

337
00:18:34,000 --> 00:18:35,000
well just leave it out of there.

338
00:18:37,500 --> 00:18:42,900
And just say okay new rectangle batch and we'll change it to begin in

339
00:18:42,900 --> 00:18:43,800
pair of later we find out.

340
00:18:43,800 --> 00:18:44,600
We need that.

341
00:18:46,300 --> 00:18:48,000
But the moment, I don't know what I would do with that.

342
00:18:49,300 --> 00:18:53,300
So really all we have to do now is sort of re rejigger these routines

343
00:18:53,300 --> 00:18:57,900
a little bit so that they work properly with the batch concept when I

344
00:18:57,900 --> 00:19:00,900
push one of these guys on here, right?

345
00:19:01,100 --> 00:19:06,300
I'm going to be calling one of these push render element things and so

346
00:19:06,300 --> 00:19:09,700
in order to do that, I've got to sort of look at what's going on with

347
00:19:09,700 --> 00:19:12,000
say, push wreck that I want to kind of

348
00:19:14,400 --> 00:19:15,400
I want to kind of copy.

349
00:19:15,400 --> 00:19:17,100
What's going on here, right?

350
00:19:17,900 --> 00:19:22,600
So I am going to need a sort key for the for this stuff.

351
00:19:23,000 --> 00:19:26,500
So when we do the new rectangle batch, I think that kind of educates

352
00:19:26,500 --> 00:19:29,200
me a little bit as to what I'd have to pass her because we essentially

353
00:19:29,200 --> 00:19:32,000
need to do this same stuff, right?

354
00:19:32,300 --> 00:19:34,800
Because we need the sort key to come through correctly.

355
00:19:34,900 --> 00:19:37,500
So we essentially need some kind of Exemplar.

356
00:19:37,500 --> 00:19:43,500
Like, we need to pass, we need to receive some kind of a point that we

357
00:19:43,500 --> 00:19:44,000
could use.

358
00:19:44,500 --> 00:19:48,700
In order to get the render entity basis, right?

359
00:19:48,700 --> 00:19:49,600
We need that.

360
00:19:50,700 --> 00:19:54,800
So that is really the important part of that process.

361
00:19:55,500 --> 00:19:59,900
Yeah, I'm not sure, we don't care about any of this though.

362
00:19:59,900 --> 00:20:00,600
I don't think.

363
00:20:01,000 --> 00:20:01,400
But yeah.

364
00:20:01,400 --> 00:20:02,100
So we're going to do.

365
00:20:02,100 --> 00:20:02,900
We do that?

366
00:20:03,000 --> 00:20:06,700
We're going to have to say, like sort P, okay?

367
00:20:08,200 --> 00:20:14,200
So we come in in the batch, what we want to do is say, and I guess if

368
00:20:14,200 --> 00:20:18,200
the sort if the sort is called we don't need to really record any of

369
00:20:18,200 --> 00:20:22,600
these guys, which is kind of, interesting, I guess if it's behind us.

370
00:20:22,600 --> 00:20:23,100
Right.

371
00:20:23,500 --> 00:20:25,200
So it's even a little weirder than that.

372
00:20:25,200 --> 00:20:26,500
I guess we could just do.

373
00:20:26,500 --> 00:20:26,800
Yeah.

374
00:20:26,800 --> 00:20:28,900
And I guess we can just literally do that.

375
00:20:29,100 --> 00:20:31,000
So you could say, if the basis is valid,

376
00:20:33,300 --> 00:20:36,600
You know then we'll do it otherwise we won't which is kind of

377
00:20:36,600 --> 00:20:37,200
interesting.

378
00:20:38,300 --> 00:20:38,800
Okay.

379
00:20:40,000 --> 00:20:40,300
Okay.

380
00:20:40,400 --> 00:20:42,500
Yeah, that's all right.

381
00:20:42,700 --> 00:20:43,300
Well anyway,

382
00:20:47,500 --> 00:20:48,800
So what's going to happen here?

383
00:20:53,700 --> 00:20:55,300
is, we're going to

384
00:20:56,600 --> 00:20:57,400
I guess we can.

385
00:21:00,200 --> 00:21:03,300
If this little more explicit is we're going to say, alright, let's say

386
00:21:03,300 --> 00:21:07,200
there's no pointer will make it so that if the pointer is null, then

387
00:21:07,200 --> 00:21:08,300
it doesn't record anything.

388
00:21:09,300 --> 00:21:12,400
And we'll just say when we do this.

389
00:21:16,100 --> 00:21:18,100
We're going to pass, whatever that sort p is.

390
00:21:19,900 --> 00:21:22,000
And we're going to need an object transform for it.

391
00:21:22,500 --> 00:21:23,400
So we need to pass.

392
00:21:23,400 --> 00:21:25,900
So I was correct in thinking before that, we need the object

393
00:21:25,900 --> 00:21:29,400
transform, we need whatever the transform is that you want for

394
00:21:29,400 --> 00:21:30,100
sorting.

395
00:21:30,100 --> 00:21:36,200
So you say this batch, you know, it's using this transform and we can

396
00:21:36,200 --> 00:21:39,000
take a look at what we're going to use Four Points here.

397
00:21:39,000 --> 00:21:44,300
But you can kind of see that it's really not all that big of a deal

398
00:21:44,300 --> 00:21:48,100
because for sorting there actually isn't any Z component here.

399
00:21:48,300 --> 00:21:49,200
So we can actually if we

400
00:21:49,500 --> 00:21:51,300
To just pass, you know?

401
00:21:54,100 --> 00:21:56,300
Essentially nothing that makes sense.

402
00:21:57,800 --> 00:21:59,800
And that should be fine, right?

403
00:22:01,700 --> 00:22:04,000
Yeah, I think that's fine now.

404
00:22:04,300 --> 00:22:06,900
I guess I do have one question here.

405
00:22:10,600 --> 00:22:11,800
Which I guess now I think about it.

406
00:22:11,800 --> 00:22:14,300
This is starting to look a little bit more complicated, right?

407
00:22:14,300 --> 00:22:17,200
And the reason for that is if we actually wanted to have it still sort

408
00:22:17,200 --> 00:22:21,400
correctly, in addition to just the Z we would need sort of the

409
00:22:21,400 --> 00:22:24,400
boundary that we would need the shape that it ends up taking the

410
00:22:24,400 --> 00:22:27,800
maximum area and we kind of already wrote the code for that.

411
00:22:27,900 --> 00:22:32,200
But when we did sort of that other style sorting that other style

412
00:22:32,300 --> 00:22:35,300
thing where we did, what was it called?

413
00:22:37,000 --> 00:22:39,200
We had like this way of grouping things together.

414
00:22:40,200 --> 00:22:41,800
Begin aggregate sort key.

415
00:22:43,000 --> 00:22:43,600
Right?

416
00:22:44,400 --> 00:22:46,100
We had that Aggregates or key thing.

417
00:22:52,800 --> 00:22:55,300
So, what happens when we did the aggregate sort key as we would sort

418
00:22:55,300 --> 00:22:58,100
of, you know, we would accrue those bounds.

419
00:22:59,300 --> 00:23:04,500
And I guess I don't really remember what we did with that piece of

420
00:23:04,500 --> 00:23:05,400
information.

421
00:23:10,200 --> 00:23:13,500
I don't really remember how the aggregation actually worked in terms

422
00:23:13,500 --> 00:23:15,200
of buffering these things up.

423
00:23:16,000 --> 00:23:16,800
You know I'm saying.

424
00:23:17,600 --> 00:23:19,600
Like, I know we did the sort of

425
00:23:24,600 --> 00:23:26,100
I know we did the sort of stuff with

426
00:23:28,600 --> 00:23:29,800
First aggregate.

427
00:23:30,400 --> 00:23:33,500
So we would put our aggregate bands in here and then we would say

428
00:23:36,700 --> 00:23:38,700
But they still have their own entries.

429
00:23:39,700 --> 00:23:41,000
That's the weird part, right?

430
00:23:41,100 --> 00:23:45,100
It's still pushing a sword entry on for these guys,

431
00:23:47,200 --> 00:23:48,500
Which is weird.

432
00:23:51,700 --> 00:23:53,200
So, I don't really remember.

433
00:23:56,100 --> 00:23:58,200
Why that would work, right?

434
00:23:58,200 --> 00:23:59,800
I don't really remember what ends up happening.

435
00:24:00,400 --> 00:24:03,300
I guess it's just they all get assort key that's equal.

436
00:24:03,800 --> 00:24:07,900
They all get sort keys that are equal to each other and I guess we

437
00:24:07,900 --> 00:24:11,800
just sort of made it so that that would just work somehow

438
00:24:13,000 --> 00:24:13,200
Right?

439
00:24:13,200 --> 00:24:14,100
You can see us doing that.

440
00:24:14,100 --> 00:24:18,300
Here we go through them and we said all their bounds equal to the same

441
00:24:19,200 --> 00:24:20,700
value, you know?

442
00:24:23,900 --> 00:24:25,000
And I guess that works.

443
00:24:26,000 --> 00:24:27,600
I'm not sure how we handle that in the backend.

444
00:24:27,600 --> 00:24:29,300
I honestly just don't remember, it's been too long.

445
00:24:31,100 --> 00:24:32,300
But that's all we were doing.

446
00:24:33,100 --> 00:24:35,900
So that doesn't really help us, but you can kind of see what was going

447
00:24:35,900 --> 00:24:36,600
on here, right?

448
00:24:36,600 --> 00:24:40,800
When we push, those guys on we were sort of taking all of the, the Min

449
00:24:40,800 --> 00:24:41,800
and Max and stuff like that.

450
00:24:41,800 --> 00:24:44,500
And we would sort of switch those together for a sort.

451
00:24:44,500 --> 00:24:47,700
And we, if we wanted to do this correctly, we would actually have to

452
00:24:47,700 --> 00:24:51,500
do is essentially the same thing and so we wouldn't really be able to

453
00:24:51,500 --> 00:24:52,500
do a sort P.

454
00:24:52,500 --> 00:24:55,700
It's some sense, we have to do a sort Z here, right?

455
00:24:56,400 --> 00:24:59,200
We'd have to do something like this and where we just passed, whatever

456
00:24:59,200 --> 00:25:00,200
the sort Z was.

457
00:25:00,700 --> 00:25:06,800
And we would have to use the X & Y, would have to kind of be grown

458
00:25:06,800 --> 00:25:11,200
organically from the things that were pushed down the batch.

459
00:25:11,400 --> 00:25:12,000
Right?

460
00:25:12,000 --> 00:25:17,300
So as things get pushed down, the batch we would expand with each

461
00:25:17,300 --> 00:25:20,900
individual one what the rectangle was that enclose them, if that makes

462
00:25:20,900 --> 00:25:21,300
sense.

463
00:25:25,100 --> 00:25:29,400
So yeah, but if we did want to do that, I guess at the end of the day

464
00:25:29,400 --> 00:25:33,100
it's actually not really that hard to do that.

465
00:25:34,500 --> 00:25:39,300
It just means we would have to to modify the third key after the fact

466
00:25:39,300 --> 00:25:43,400
which actually doesn't seem particularly hard so maybe we just do it,

467
00:25:43,500 --> 00:25:44,700
maybe we just do that.

468
00:25:45,000 --> 00:25:47,400
But yeah it here we just basically have a sort Z.

469
00:25:47,800 --> 00:25:50,200
So we say we have the batch, we want this batch, sort of the sea,

470
00:25:50,200 --> 00:25:52,900
we're going to feed you a bunch of stuff and so you can just take

471
00:25:52,900 --> 00:25:53,400
whatever.

472
00:25:53,700 --> 00:25:56,800
bounds are I suppose we could also say that

473
00:25:58,800 --> 00:26:03,000
I suppose, we could also use the for lack of better term.

474
00:26:03,300 --> 00:26:04,800
We could use the

475
00:26:06,900 --> 00:26:11,200
Aggregate Z the like when when the things come down we could use what

476
00:26:11,200 --> 00:26:15,800
their Z averaged out to be as the Sorting Z would be another way to do

477
00:26:15,800 --> 00:26:20,700
it because you're assuming that says he's always going to be the same

478
00:26:20,700 --> 00:26:24,500
for everybody and so I suppose you could do that.

479
00:26:24,700 --> 00:26:28,200
I don't really know how I feel about that one way or the other, but it

480
00:26:28,200 --> 00:26:29,600
seems plausible.

481
00:26:35,700 --> 00:26:36,900
Well let's let's see.

482
00:26:37,500 --> 00:26:41,700
So if I took a look here I'm just going to push this a little further

483
00:26:41,700 --> 00:26:45,300
because I like I said I don't really know, but in here if I just said

484
00:26:45,300 --> 00:26:47,500
okay you know, here's push wrecked.

485
00:26:48,000 --> 00:26:53,700
Here's how push wrecked is working if I wanted, push rekt here 2 to

486
00:26:53,800 --> 00:26:59,800
begin to push onto one of those one of those batches then

487
00:27:00,300 --> 00:27:02,500
What would that look like, right.

488
00:27:03,500 --> 00:27:07,200
It's still going to do pretty much everything else the same.

489
00:27:08,100 --> 00:27:11,200
But here it's going to have its going to get one of those rectangle

490
00:27:11,200 --> 00:27:11,900
batches.

491
00:27:13,900 --> 00:27:18,600
And when we do all of this extra stuff, instead of pushing your render

492
00:27:18,600 --> 00:27:26,000
element, we're just going to, I guess you could say, we're just going

493
00:27:26,000 --> 00:27:29,900
to add it on to that list and we need

494
00:27:30,100 --> 00:27:30,300
Check.

495
00:27:30,300 --> 00:27:32,900
First to see whether that list has space for it.

496
00:27:33,100 --> 00:27:37,200
And if it doesn't have space, we need to sort of extend it, right?

497
00:27:37,700 --> 00:27:38,900
So, there's a couple things we could do here.

498
00:27:38,900 --> 00:27:44,000
First, of all, we could say, well, you know, if the batch

499
00:27:46,000 --> 00:27:51,200
entry is valid because it was not, we don't want to bother, we would

500
00:27:51,200 --> 00:27:56,200
also want to say, if the batch entry

501
00:27:58,800 --> 00:28:03,400
used count is less than batch entry total count.

502
00:28:03,500 --> 00:28:04,100
Right?

503
00:28:05,600 --> 00:28:09,400
And I guess actually I think about it, we probably need to do

504
00:28:11,100 --> 00:28:12,000
This is capture.

505
00:28:17,100 --> 00:28:18,200
Too many if statements.

506
00:28:18,800 --> 00:28:22,700
So if the use count is greater than or equal to the total count, then

507
00:28:22,700 --> 00:28:24,700
we just need to do a new rectangle batch.

508
00:28:31,400 --> 00:28:32,700
and,

509
00:28:35,400 --> 00:28:36,300
That's about it.

510
00:28:38,500 --> 00:28:39,000
Right.

511
00:28:44,600 --> 00:28:45,600
Yeah.

512
00:28:50,500 --> 00:28:51,000
Here we go.

513
00:28:51,700 --> 00:28:53,700
So I need some way of getting the render group.

514
00:28:53,700 --> 00:28:55,400
I'll just store that in the batch I think.

515
00:29:00,900 --> 00:29:02,200
But you can kind of see what's going on here.

516
00:29:02,200 --> 00:29:06,600
So, all I need to do is say, okay, if there is no room, then just

517
00:29:06,600 --> 00:29:07,900
start another batch.

518
00:29:08,000 --> 00:29:11,100
I don't know what to pass as the sort see here, but that's okay

519
00:29:11,800 --> 00:29:13,400
because I could store that in the batch.

520
00:29:13,400 --> 00:29:16,800
If I wanted to, if I want to just call it directly with the Z.

521
00:29:16,800 --> 00:29:17,100
I guess.

522
00:29:17,100 --> 00:29:19,400
I'm just like, I said, I'm still not quite sure about that.

523
00:29:19,800 --> 00:29:21,100
How I want that to work.

524
00:29:21,500 --> 00:29:26,600
But anyway, then we say if we can do one of them we can you know, go

525
00:29:26,600 --> 00:29:28,000
ahead and do push render element.

526
00:29:28,700 --> 00:29:30,100
So really I just need to do a check here.

527
00:29:30,300 --> 00:29:35,500
say if we were able to get one and it can fit

528
00:29:38,600 --> 00:29:42,100
Then we just say the batch entry used count.

529
00:29:45,300 --> 00:29:47,100
Is where we are going to put this guy.

530
00:29:53,400 --> 00:29:56,600
And that is a render entry rectangle.

531
00:30:01,800 --> 00:30:03,700
So we've got our place to put it now.

532
00:30:04,300 --> 00:30:07,400
We know that the wrecked is valid because we're just accessing off of

533
00:30:07,400 --> 00:30:07,700
that guy.

534
00:30:07,700 --> 00:30:10,700
Can't be no anymore because we checked up here to see if it would have

535
00:30:10,700 --> 00:30:11,700
food fit or not.

536
00:30:12,700 --> 00:30:15,700
And so, everything else is just exactly the way that it was before,

537
00:30:16,000 --> 00:30:16,600
right?

538
00:30:16,700 --> 00:30:19,200
So when we do a push truck, this is this is what it would look like

539
00:30:19,200 --> 00:30:19,600
now.

540
00:30:20,400 --> 00:30:23,200
And I don't love how much duplicated code there is there really, you

541
00:30:23,200 --> 00:30:23,500
know,

542
00:30:28,800 --> 00:30:30,400
Compared to the non batch case.

543
00:30:31,400 --> 00:30:34,900
So I don't know how I feel about that but, you know, I guess we'll

544
00:30:34,900 --> 00:30:35,600
just see.

545
00:30:35,700 --> 00:30:37,300
We could try to condense it a little bit more.

546
00:30:38,500 --> 00:30:39,200
In the future.

547
00:30:40,500 --> 00:30:44,900
So yeah, looking at this code, I think that's all pretty reasonable

548
00:30:44,900 --> 00:30:45,400
right there.

549
00:30:45,400 --> 00:30:47,900
Isn't anything particularly unusual going on there?

550
00:30:49,400 --> 00:30:53,200
So the question is just for these rectangle patches what are we going

551
00:30:53,200 --> 00:30:56,000
to do about how to get that Z in there, right?

552
00:30:56,000 --> 00:30:58,600
Because we do have stuff like this.

553
00:30:58,700 --> 00:31:02,700
The spray pattern of the screen area so we can do whatever we want to

554
00:31:02,700 --> 00:31:08,200
do in terms of creating the sort bound from that as we go, right?

555
00:31:08,200 --> 00:31:10,100
That's not particularly difficult.

556
00:31:10,200 --> 00:31:10,700
I do.

557
00:31:13,400 --> 00:31:15,200
So yeah.

558
00:31:26,000 --> 00:31:26,500
Hmm.

559
00:31:37,700 --> 00:31:40,400
So I guess what we would want to do here is say we have the screen

560
00:31:40,400 --> 00:31:41,000
area.

561
00:31:41,600 --> 00:31:45,700
So what actually has to be stored in the actual sort key itself.

562
00:31:47,100 --> 00:31:50,100
Okay, let's take a look.

563
00:31:50,700 --> 00:31:56,300
So we've got the type, we've got the clip brecht and we have to push

564
00:31:56,300 --> 00:32:00,700
the sort key to this guy separately, but we're going to have him.

565
00:32:00,900 --> 00:32:06,900
We could recall we could presumably record where it was and then we

566
00:32:06,900 --> 00:32:08,500
end up with, what's it?

567
00:32:08,500 --> 00:32:08,900
Whoops.

568
00:32:12,700 --> 00:32:14,000
Is it sorts right bound?

569
00:32:14,000 --> 00:32:14,800
I guess yet?

570
00:32:17,600 --> 00:32:19,200
What are we actually pass through here?

571
00:32:24,000 --> 00:32:29,600
So we have sorts right bound, so we need to have the sort key, which

572
00:32:29,600 --> 00:32:30,700
is this stuff here.

573
00:32:32,500 --> 00:32:36,400
And then we need to have the offset, the flags and whatever the debug

574
00:32:36,400 --> 00:32:38,100
tag is, right.

575
00:32:38,600 --> 00:32:43,100
And the flags, the offset, we know what it is.

576
00:32:43,100 --> 00:32:44,200
It's well, the office.

577
00:32:44,200 --> 00:32:46,300
All that stuff is going to be set for us directly.

578
00:32:46,900 --> 00:32:50,100
So really all we have to do is that the sort key in the screen area,

579
00:32:50,500 --> 00:32:53,100
those are the two things that need to kind of be.

580
00:32:56,000 --> 00:32:57,700
You know, more specified.

581
00:32:58,100 --> 00:32:59,800
Now, I suppose.

582
00:33:01,700 --> 00:33:03,600
Since we kind of know.

583
00:33:05,200 --> 00:33:07,300
Roughly that these guys have to be.

584
00:33:07,700 --> 00:33:09,800
These are always kind of these flat aggregate.

585
00:33:09,800 --> 00:33:12,900
Guys, we don't have to worry too much about like we know we're not

586
00:33:12,900 --> 00:33:15,500
going to have a manual sort key in there or any of that other kind of

587
00:33:15,500 --> 00:33:16,000
stuff.

588
00:33:17,100 --> 00:33:25,700
So I don't really know that we need anything, particularly fancy

589
00:33:25,700 --> 00:33:25,900
there.

590
00:33:25,900 --> 00:33:27,700
If we wanted to aggregate out the size,

591
00:33:30,900 --> 00:33:34,900
So I think we could just basically do what we were doing for the

592
00:33:34,900 --> 00:33:40,100
Aggregates in here, where we essentially just do one of them.

593
00:33:40,100 --> 00:33:46,500
Now I would just say we could just do it as if it's a z Sprite and

594
00:33:46,500 --> 00:33:49,700
that seems reasonable

595
00:33:51,100 --> 00:33:53,100
In this case, we just actually disease.

596
00:33:53,100 --> 00:33:57,500
In this case, we agree that those two bounds and the screen bound.

597
00:33:57,500 --> 00:34:00,800
I don't know what we do, it doesn't look like we really touch, the

598
00:34:00,800 --> 00:34:03,000
screen bound here, which doesn't make a whole lot of sense to me.

599
00:34:03,300 --> 00:34:06,300
It seems like when you aggregate these guys together, it would seem

600
00:34:06,300 --> 00:34:09,600
like you would want to aggravate the screen bound as well and it's

601
00:34:09,600 --> 00:34:13,000
weird a little bit that that's not happening, right?

602
00:34:17,900 --> 00:34:20,600
Like, that's really weird and I do wonder if that's a bug.

603
00:34:20,800 --> 00:34:22,300
It kind of feels like a bug here.

604
00:34:22,500 --> 00:34:25,000
It feels to me like there would presumably be

605
00:34:29,000 --> 00:34:30,100
Right in here.

606
00:34:30,100 --> 00:34:34,300
You would want to Union the screen areas together, right?

607
00:34:38,000 --> 00:34:42,100
Oh I guess the reason that we're not doing that is just because the

608
00:34:42,100 --> 00:34:45,100
screen areas are actually used separately when it comes down, I guess

609
00:34:45,100 --> 00:34:46,600
that does make some sense.

610
00:34:46,900 --> 00:34:47,300
Okay.

611
00:34:47,600 --> 00:34:48,400
I could see that.

612
00:34:49,199 --> 00:34:53,100
But yeah, so what we would need here is we would need to have this

613
00:34:55,400 --> 00:34:59,800
who need to get this and we would need to expand the screen area as

614
00:34:59,800 --> 00:35:00,900
the guys get pushed down.

615
00:35:03,200 --> 00:35:04,000
So it does seem.

616
00:35:04,000 --> 00:35:06,200
I mean just looking at this you can see how much sort of stuff there

617
00:35:06,200 --> 00:35:09,600
is here and so I'm wondering just kind of like how much complexity

618
00:35:09,600 --> 00:35:13,100
there is if it's just like it starts to seem like, maybe it's just a

619
00:35:13,100 --> 00:35:15,900
better idea to just turn off the Sorting, right?

620
00:35:16,000 --> 00:35:18,800
Because this is kind of what I wanted to see like, how much stuff

621
00:35:18,800 --> 00:35:19,400
would it take.

622
00:35:19,400 --> 00:35:21,700
It's like, okay, to actually feed it to the sorting system in a

623
00:35:21,700 --> 00:35:24,800
reasonable way, it seemed like it starts to get to be a lot of stuff.

624
00:35:25,100 --> 00:35:27,500
Would it not be better to just have a thing that just like turns off

625
00:35:27,500 --> 00:35:28,800
the Sorting, right?

626
00:35:32,100 --> 00:35:34,500
And that kind of just seems like a better idea, I don't know.

627
00:35:35,300 --> 00:35:38,100
So I think I may just go ahead and call that and say that that was

628
00:35:38,100 --> 00:35:39,400
enough for me to go.

629
00:35:39,400 --> 00:35:40,000
Yeah.

630
00:35:40,000 --> 00:35:41,800
I don't know about this, right?

631
00:35:42,900 --> 00:35:46,200
Like it just it's starting to seem like just that's too much stuff.

632
00:35:46,300 --> 00:35:49,900
I don't want to have to up to continue with those code path.

633
00:35:50,200 --> 00:35:53,600
And yeah, so just like forget it, you know, not going to happen.

634
00:36:06,000 --> 00:36:06,400
Oops.

635
00:36:11,900 --> 00:36:14,100
How do I get the render group here?

636
00:36:29,900 --> 00:36:30,400
Okay.

637
00:36:33,000 --> 00:36:33,800
so,

638
00:36:34,900 --> 00:36:38,500
If that's the case, then what's the easiest way for me to turn off?

639
00:36:41,000 --> 00:36:44,300
You know, just turn off the Sorting, if I remember correctly, we

640
00:36:44,300 --> 00:36:48,500
already had the concept of multiple passes through the sort, right?

641
00:36:49,000 --> 00:36:55,800
And so if I remember correctly, how this worked is, when we did the

642
00:36:55,800 --> 00:36:58,900
sort entries, we would kind of go through things and we would hit

643
00:36:59,100 --> 00:37:03,100
individual like sort points where we would stop, right?

644
00:37:03,500 --> 00:37:07,600
And you can kind of see I guess that happening here where we do build

645
00:37:07,600 --> 00:37:10,600
Sprite graph, it passes back like a sub count.

646
00:37:10,800 --> 00:37:14,700
Right, so when's Bill's Freight crew, wouldn't build Sprite graph goes

647
00:37:14,700 --> 00:37:15,200
through?

648
00:37:16,000 --> 00:37:19,900
You can see it sort of doing its thing here where it keeps going.

649
00:37:19,900 --> 00:37:27,200
But sometimes if it hits a stopper, which is Sprite barrier, offset

650
00:37:27,200 --> 00:37:32,500
value, then it knows that that's going to be the end of it, right?

651
00:37:33,700 --> 00:37:39,100
And so, what I'm wondering is, could we also do, you know, I don't

652
00:37:39,100 --> 00:37:40,500
know what exactly gets pushed on there.

653
00:37:40,500 --> 00:37:42,900
I'm going to take a look at how we were pushing that on.

654
00:37:43,600 --> 00:37:45,600
See what I've also got to work with Sprite.

655
00:37:46,800 --> 00:37:48,200
Barrier offset value.

656
00:37:50,100 --> 00:37:53,400
So when we push the start bar on there, we've got the sword entry

657
00:37:53,400 --> 00:37:55,700
offset, spread barrier, offset value.

658
00:37:57,400 --> 00:38:00,800
I'm assuming we could also push other stuff on there because that guy

659
00:38:01,200 --> 00:38:03,200
presumably gets ignored, right.

660
00:38:20,800 --> 00:38:25,700
Yeah, so that guy doesn't actually ever get used when the indices come

661
00:38:25,700 --> 00:38:26,200
through.

662
00:38:26,800 --> 00:38:32,100
And so what I'm assuming here is if we wanted to we could also have a

663
00:38:32,100 --> 00:38:35,500
way of specifying in addition to that sort barrier.

664
00:38:35,500 --> 00:38:41,200
We could we could have something where it also, there is also a way to

665
00:38:41,200 --> 00:38:45,900
indicate that everything after that sort barrier until the next sort,

666
00:38:45,900 --> 00:38:48,700
like everything in between those two sort barriers should not be

667
00:38:48,700 --> 00:38:49,600
sorted, right?

668
00:38:50,600 --> 00:38:55,000
So you'd get sub count here, right, like this, and you would do

669
00:38:55,000 --> 00:38:57,300
recursive front to back or whatever.

670
00:38:58,400 --> 00:38:59,700
In the case, where you got one,

671
00:39:00,000 --> 00:39:01,000
Actually cared.

672
00:39:01,100 --> 00:39:05,300
But what we could do instead is when you do build Sprite graph here

673
00:39:05,300 --> 00:39:08,900
and you would get back some kind of information that that you know

674
00:39:09,100 --> 00:39:10,200
after you did this sort.

675
00:39:10,200 --> 00:39:14,300
The next set would not actually be sorted, right?

676
00:39:14,300 --> 00:39:15,100
It would not.

677
00:39:15,400 --> 00:39:17,200
It would just get output directly.

678
00:39:18,600 --> 00:39:22,100
So I think the easiest way to do that if we look at recursive front to

679
00:39:22,100 --> 00:39:25,700
back you can see what it's kind of doing it does.

680
00:39:25,700 --> 00:39:30,600
It's a little out index plus plus sort of thing right here and all we

681
00:39:30,600 --> 00:39:32,100
would have to do is just output.

682
00:39:32,100 --> 00:39:37,200
Those offsets for everyone in the list without ever actually.

683
00:39:38,200 --> 00:39:39,100
Doing any sorting.

684
00:39:40,100 --> 00:39:43,700
So the problem is build Sprite graph as it goes through.

685
00:39:43,700 --> 00:39:46,100
These guys kind of needs to

686
00:39:47,300 --> 00:39:51,100
Give us a little bit more information back so it's going to need like

687
00:39:51,100 --> 00:39:57,800
something like Sprite graph results or something like this.

688
00:39:58,100 --> 00:40:02,600
And we would need the count, which is how many nodes are in it and

689
00:40:02,600 --> 00:40:06,500
then we would also need like what we were supposed to do with those

690
00:40:06,500 --> 00:40:06,800
guys.

691
00:40:06,800 --> 00:40:10,900
Now, note, we build the graph as we go here.

692
00:40:11,400 --> 00:40:16,200
So what that means is that we need sort of the initial barrier to be

693
00:40:16,200 --> 00:40:16,900
the thing.

694
00:40:17,200 --> 00:40:19,100
That tells us what's supposed to happen.

695
00:40:19,800 --> 00:40:27,000
So we need like sort, you know, sort next or something to come back as

696
00:40:27,000 --> 00:40:27,300
the thing.

697
00:40:27,300 --> 00:40:32,900
That tells us what we need to know, right now, it's possible that we

698
00:40:32,900 --> 00:40:35,200
don't actually have to return that because it's possible.

699
00:40:35,200 --> 00:40:37,000
We could check it on the outside as well.

700
00:40:37,800 --> 00:40:39,000
And I have to think about that.

701
00:40:39,100 --> 00:40:42,500
So, when we do that, we do SUB entries, and then we do first sub,

702
00:40:42,500 --> 00:40:43,100
count plus 1.

703
00:40:43,200 --> 00:40:44,800
There's the skip right there.

704
00:40:44,900 --> 00:40:46,900
So if we wanted to, we could actually, I guess

705
00:40:47,100 --> 00:40:50,100
We could actually just just pull it out ourselves so the way we would

706
00:40:50,100 --> 00:40:50,800
do that.

707
00:40:53,000 --> 00:40:53,400
Oops.

708
00:40:56,500 --> 00:41:01,300
I believe is just by saying like, Okay, so

709
00:41:02,900 --> 00:41:06,100
We would grab out sub entries.

710
00:41:08,700 --> 00:41:14,000
And we would take whatever the sub count, the came back, would go that

711
00:41:14,000 --> 00:41:14,700
far into it.

712
00:41:14,800 --> 00:41:19,200
We now know that this is like the Terminator, right?

713
00:41:19,900 --> 00:41:21,300
Whatever that Terminator was.

714
00:41:22,300 --> 00:41:28,500
And the only thing is we don't actually know whether the whether the

715
00:41:28,500 --> 00:41:30,200
Terminator actually existed or not.

716
00:41:30,200 --> 00:41:35,400
So we do have to probably check here something like, if you know,

717
00:41:35,400 --> 00:41:37,200
first index is less than count.

718
00:41:37,200 --> 00:41:38,400
We know we're going to do more of them.

719
00:41:38,700 --> 00:41:39,300
Right.

720
00:41:39,300 --> 00:41:45,100
And so assuming that, that was the case, then we could do something

721
00:41:45,100 --> 00:41:47,900
with the Terminator here to let us know whether we should sort.

722
00:41:47,900 --> 00:41:50,200
So we, you know, we have should sort.

723
00:41:50,200 --> 00:41:54,700
We assume that that is true and then we sort of when we come through

724
00:41:54,700 --> 00:41:59,500
here, we know what we want to do is if something like, if we should

725
00:41:59,500 --> 00:41:59,800
sort.

726
00:42:00,300 --> 00:42:02,800
We do the standard pass like so.

727
00:42:06,800 --> 00:42:09,100
And otherwise that we do the other one.

728
00:42:17,200 --> 00:42:18,400
Hopefully, that makes some sense.

729
00:42:19,300 --> 00:42:20,800
So really we would just say

730
00:42:28,200 --> 00:42:29,500
The exact same thing.

731
00:42:34,300 --> 00:42:38,900
Only in this case, we wouldn't probably need any of this stuff.

732
00:42:38,900 --> 00:42:42,000
I don't know that we need the width and the height, even

733
00:42:45,500 --> 00:42:47,800
so, I think we're really just talking about

734
00:42:49,900 --> 00:42:50,700
About that.

735
00:42:55,300 --> 00:42:57,700
So when we do that, we're going to need for.

736
00:42:57,700 --> 00:43:01,500
When we do that, that output, their we're going to need the the walk.

737
00:43:04,100 --> 00:43:06,000
Because it's got to do its output.

738
00:43:06,400 --> 00:43:08,200
So it's going to have to take this as well.

739
00:43:09,200 --> 00:43:11,300
And I think

740
00:43:12,800 --> 00:43:14,100
Think that should do it.

741
00:43:14,700 --> 00:43:16,800
So I think we just need something like that.

742
00:43:17,700 --> 00:43:23,000
It's like, hey, go through this mini and we'll go through starting

743
00:43:23,000 --> 00:43:29,800
here, you know, keep going till you hit the end or a terminator and

744
00:43:30,000 --> 00:43:32,400
when you go through them, just do the output directly.

745
00:43:32,900 --> 00:43:35,300
So then it would be essentially this

746
00:43:39,000 --> 00:43:41,500
It'd be this routine, drastically simplified.

747
00:43:42,100 --> 00:43:47,000
So it would be, you know, don't need any of this stuff.

748
00:43:47,000 --> 00:43:49,200
We don't need any of that.

749
00:43:52,600 --> 00:43:54,300
None of this stuff at all.

750
00:43:58,900 --> 00:44:00,000
Pretty much any of it.

751
00:44:05,400 --> 00:44:07,800
Yeah, so we need literally none of that.

752
00:44:07,900 --> 00:44:10,600
All you would do is just output.

753
00:44:16,200 --> 00:44:21,400
Exactly what the offset is of everyone in this list until we hit the

754
00:44:21,400 --> 00:44:22,300
next barrier.

755
00:44:24,200 --> 00:44:25,100
And that'd be it.

756
00:44:26,100 --> 00:44:26,600
Right.

757
00:44:32,100 --> 00:44:37,200
So again, we still need to return however many we processed because

758
00:44:37,200 --> 00:44:40,100
that's important since it needs to know.

759
00:44:43,500 --> 00:44:44,800
we've got the,

760
00:44:46,700 --> 00:44:48,800
Total number that we want to do here, right?

761
00:44:48,800 --> 00:44:52,300
The input node count and then we've got the input nodes.

762
00:44:54,100 --> 00:44:56,600
These are just the exact same things that are here.

763
00:45:00,900 --> 00:45:02,700
And I think that's it.

764
00:45:06,400 --> 00:45:07,400
You know, I don't really know.

765
00:45:09,200 --> 00:45:10,800
I don't really know what we're going to find out.

766
00:45:11,800 --> 00:45:17,000
So the only thing I think that we need there is we just need a way of

767
00:45:17,000 --> 00:45:20,200
figuring out whether a Terminator indicates that we should turn

768
00:45:20,200 --> 00:45:23,200
sorting off for the next group that comes through.

769
00:45:26,400 --> 00:45:28,100
I think that's really all we need.

770
00:45:28,900 --> 00:45:33,800
So if the sort entries have an offset that specifies this piece of

771
00:45:33,800 --> 00:45:38,800
information that it's a Terminator, then I would suspect and I don't

772
00:45:38,800 --> 00:45:44,500
really know, but I would suspect that we could then say well anything

773
00:45:44,500 --> 00:45:49,000
that we have in here like these flags, for example, we could use for

774
00:45:49,000 --> 00:45:50,200
that, right?

775
00:45:51,200 --> 00:45:54,600
So we could say because I don't really know.

776
00:45:58,800 --> 00:46:02,000
I guess that that stores the index in there so we fly to want to use

777
00:46:02,000 --> 00:46:07,100
that but, you know, really any of these things, they're not getting

778
00:46:07,100 --> 00:46:07,800
used.

779
00:46:07,800 --> 00:46:12,300
So any of these things we could use to indicate what was supposed to

780
00:46:12,300 --> 00:46:19,100
happen there, or we could even have like a different value for the

781
00:46:19,100 --> 00:46:21,000
Sprite barrier offset, right?

782
00:46:21,000 --> 00:46:21,800
If we wanted to

783
00:46:23,600 --> 00:46:27,200
so I'm not sure what I want to do for that since these will not be set

784
00:46:27,200 --> 00:46:32,000
by anybody, I think I'm just going to use the flags fields and I think

785
00:46:32,000 --> 00:46:33,800
so I'm intercepting like Sprite

786
00:46:37,800 --> 00:46:39,200
Barrier.

787
00:46:41,400 --> 00:46:45,800
Turns off, sorting something like that.

788
00:46:46,600 --> 00:46:50,200
And, you know, maybe that's just some weird value like this, it

789
00:46:50,200 --> 00:46:50,700
doesn't matter.

790
00:46:50,700 --> 00:46:53,400
It can be any can be anything at all.

791
00:46:53,400 --> 00:46:54,600
It's not really a flag.

792
00:46:55,600 --> 00:47:00,100
So what I could say is like okay, you know, if the Terminator flags

793
00:47:00,800 --> 00:47:01,900
have this in it.

794
00:47:05,900 --> 00:47:08,300
Then it's going to Peach return true there.

795
00:47:09,100 --> 00:47:10,400
I guess that's a pool, so it doesn't matter.

796
00:47:10,600 --> 00:47:13,400
So you just say hey, if the barrier turns off sorting then you

797
00:47:13,400 --> 00:47:15,400
shouldn't sort anymore, right?

798
00:47:16,300 --> 00:47:19,100
And is that the there's the build

799
00:47:22,600 --> 00:47:24,900
And so, I don't know.

800
00:47:26,100 --> 00:47:29,300
But I'm assuming that that will not do anything yet because we have

801
00:47:29,300 --> 00:47:33,100
not, you know, unless we messed something up and you can see how slow

802
00:47:33,100 --> 00:47:33,900
we are here.

803
00:47:33,900 --> 00:47:37,400
When all of these things are doing their little sort, right?

804
00:47:38,800 --> 00:47:42,100
So now let's go ahead and see if we can actually insert that

805
00:47:42,200 --> 00:47:47,300
Terminator in there insert an actual Terminator that does.

806
00:47:48,800 --> 00:47:51,700
Turn off the Sorting for the debug group.

807
00:47:53,300 --> 00:47:55,100
And we're still going to have some problems with that.

808
00:47:55,100 --> 00:47:58,900
If it's not we're not home free because we are still sort of using

809
00:48:01,300 --> 00:48:02,400
The Sorting in the debug group.

810
00:48:02,400 --> 00:48:05,000
So this is still not going to quite solve the problem, but at least we

811
00:48:05,000 --> 00:48:07,300
have a waitress sorting, that's a start.

812
00:48:08,200 --> 00:48:14,000
So we'll do a push sort barrier in here and we'll have a be 32 that

813
00:48:14,000 --> 00:48:18,400
you can pass, which is like, let me go over here, so I'm not behind my

814
00:48:18,400 --> 00:48:20,800
head which is like turn off sorting

815
00:48:24,900 --> 00:48:30,000
And when I can do, is say, well, you know, the sword entry Flags will

816
00:48:30,000 --> 00:48:30,400
equal.

817
00:48:30,400 --> 00:48:39,500
If turn off sorting, then they will equal that crazy value that I

818
00:48:39,500 --> 00:48:40,300
suggested there.

819
00:48:40,300 --> 00:48:41,000
Where is that?

820
00:48:41,000 --> 00:48:41,500
At,

821
00:48:42,700 --> 00:48:43,700
He'll be this guy.

822
00:48:54,600 --> 00:48:55,600
Otherwise, we'll be nothing.

823
00:48:57,600 --> 00:49:02,800
So on these guys, we don't want to turn off sorting so you know these

824
00:49:02,800 --> 00:49:04,000
guys want to keep it on.

825
00:49:09,800 --> 00:49:12,700
And so then what we need to do is go into the debug group and when

826
00:49:12,700 --> 00:49:15,400
we're about to do the debug rendering, then we can push start barrier

827
00:49:15,400 --> 00:49:16,500
that does turn it off.

828
00:49:19,400 --> 00:49:20,200
And that seems fair.

829
00:49:20,600 --> 00:49:27,600
So in here, when we actually do our, I guess when we do our debug end,

830
00:49:29,600 --> 00:49:31,300
and actually know where we

831
00:49:33,000 --> 00:49:33,700
here it is.

832
00:49:36,200 --> 00:49:38,300
I think this is probably where we would do it.

833
00:49:38,900 --> 00:49:41,700
So I think we would just say right here push this Arc barrier the

834
00:49:41,700 --> 00:49:45,900
turns off the Sorting right and see how it goes.

835
00:49:47,100 --> 00:49:51,100
That does not look particularly good to me.

836
00:49:52,500 --> 00:49:53,500
To say the least.

837
00:49:54,100 --> 00:49:57,300
Let's go ahead and verify that that's actually working, but that is

838
00:49:57,300 --> 00:50:00,000
not helpful that did not change at all.

839
00:50:04,000 --> 00:50:04,800
Wait, what?

840
00:50:09,900 --> 00:50:10,900
What just happened?

841
00:50:16,500 --> 00:50:17,500
What am I missing here?

842
00:50:17,500 --> 00:50:18,200
People

843
00:50:20,600 --> 00:50:22,500
Did I flip the sense of it?

844
00:50:24,600 --> 00:50:26,700
Somehow I did.

845
00:50:27,100 --> 00:50:33,100
I flip the sense of it because I'm not thinking straight, okay?

846
00:50:33,100 --> 00:50:38,400
So what I did because that's just how it is.

847
00:50:38,400 --> 00:50:41,600
I guess is when we actually, where is our sort?

848
00:50:41,600 --> 00:50:42,400
Here we go.

849
00:50:43,200 --> 00:50:47,000
So in our actual sort I said should sort is equal to whether it should

850
00:50:47,000 --> 00:50:49,500
turn off sweaty, but really, I want to say if it's not going to turn

851
00:50:49,500 --> 00:50:50,900
off sorting, right?

852
00:50:51,100 --> 00:50:52,100
So that was just dumb.

853
00:50:53,300 --> 00:50:56,000
So that's, that's better now, okay?

854
00:50:56,600 --> 00:50:57,700
So in theory,

855
00:51:00,200 --> 00:51:04,400
oops, in theory, we are now

856
00:51:06,200 --> 00:51:09,700
Able to get our sorting turned off, I think, right?

857
00:51:09,800 --> 00:51:10,700
Don't quote me on that.

858
00:51:11,600 --> 00:51:12,400
So, there we go.

859
00:51:13,700 --> 00:51:14,100
Yeah.

860
00:51:18,100 --> 00:51:22,400
Yeah, so now we're all good and even in debug mode, we're not too

861
00:51:22,400 --> 00:51:23,000
slow, right?

862
00:51:23,000 --> 00:51:24,900
We're not fast, but we're not too slow.

863
00:51:25,200 --> 00:51:28,900
But now, of course, like I said, we have the problem that if we don't

864
00:51:28,900 --> 00:51:32,500
use any sorting here, we're going to have to be more careful about

865
00:51:32,500 --> 00:51:36,600
when we draw things, because if we don't use any sorting then like all

866
00:51:36,600 --> 00:51:39,700
the UI transform stuff and things like that isn't going to help us.

867
00:51:40,200 --> 00:51:43,100
We're going to have to just draw in the correct order but that's not

868
00:51:43,100 --> 00:51:44,400
really particularly difficult.

869
00:51:44,500 --> 00:51:46,200
I don't really think that's a big deal.

870
00:51:46,300 --> 00:51:47,300
So we can just

871
00:51:48,000 --> 00:51:51,400
These things I think and it's not really the end of the world, right?

872
00:51:51,700 --> 00:51:56,600
Like for example, if we wanted to, we could just in our Tech Stop for

873
00:51:56,600 --> 00:51:57,200
example.

874
00:51:58,200 --> 00:52:00,500
I think we just oops.

875
00:52:06,200 --> 00:52:07,500
Where is techstop sudden you?

876
00:52:07,500 --> 00:52:07,800
I

877
00:52:09,300 --> 00:52:09,600
yeah.

878
00:52:11,500 --> 00:52:14,100
So in these, we could just revert to kind of the way we're doing it

879
00:52:14,100 --> 00:52:18,900
before, where we have the shadow one, and the text one, we just flip

880
00:52:18,900 --> 00:52:20,600
the order in which these happen.

881
00:52:21,100 --> 00:52:24,300
And then I think we restore our text formatting, right?

882
00:52:25,400 --> 00:52:29,300
And similarly, like if we take a look at that, when we draw the button

883
00:52:30,300 --> 00:52:32,600
code, whereas basic text element,

884
00:52:33,600 --> 00:52:39,200
So here we would just say, okay, just, you know, reverse the order of

885
00:52:39,200 --> 00:52:39,700
those guys.

886
00:52:39,700 --> 00:52:41,000
And then we're good, right?

887
00:52:41,400 --> 00:52:48,300
So I think most of the things that we do would not be a problem in

888
00:52:48,300 --> 00:52:49,000
that respect.

889
00:52:49,000 --> 00:52:50,900
The tooltip, we will have to fix.

890
00:52:51,100 --> 00:52:55,300
I think the tooltip is the only thing that really requires it, but as

891
00:52:55,300 --> 00:52:59,400
you can kind of see that's all all well and good, right?

892
00:52:59,700 --> 00:53:03,600
So, yeah, so that's all fine and dandy.

893
00:53:03,600 --> 00:53:04,600
We take a look at this.

894
00:53:04,600 --> 00:53:07,300
Now in most circumstances, it's not a big deal.

895
00:53:07,300 --> 00:53:08,200
You can even see here.

896
00:53:08,200 --> 00:53:10,400
Build Sprite graph has dropped dramatically.

897
00:53:10,900 --> 00:53:12,900
It's almost negligible now, right?

898
00:53:12,900 --> 00:53:15,900
And in that in, even then, you know, it was way up at the top.

899
00:53:17,000 --> 00:53:19,700
And so, just looking at what's going on here, that's that's, you know,

900
00:53:19,700 --> 00:53:23,000
I think that solves the problem because this is all we really needed

901
00:53:23,000 --> 00:53:23,200
for.

902
00:53:23,200 --> 00:53:26,900
We don't really need this to be a solid feature of any particular

903
00:53:26,900 --> 00:53:27,700
kind, right?

904
00:53:28,400 --> 00:53:29,300
So it's all good.

905
00:53:33,400 --> 00:53:33,800
So yeah.

906
00:53:33,800 --> 00:53:35,200
So our tooltips are a little bit broken.

907
00:53:35,200 --> 00:53:37,200
I think that's the only thing that we have to fix.

908
00:53:40,500 --> 00:53:43,300
But that's not, I don't think that's super difficult.

909
00:53:46,400 --> 00:53:47,700
Because they're just going to sort wrong.

910
00:53:47,700 --> 00:53:50,800
So, all we have to do is just fix our tooltips there and I think we're

911
00:53:50,800 --> 00:53:51,200
good.

912
00:53:54,400 --> 00:53:56,300
All right, so that seems fine.

913
00:53:56,300 --> 00:53:57,900
Looks like we're just about out of time.

914
00:53:58,500 --> 00:53:59,200
Let me just quickly.

915
00:53:59,200 --> 00:53:59,800
Take a look at those two.

916
00:54:00,000 --> 00:54:00,500
Chips.

917
00:54:01,400 --> 00:54:02,800
And then assuming that, that's okay.

918
00:54:02,800 --> 00:54:04,700
I think that's a reasonable solution to the problem.

919
00:54:05,400 --> 00:54:07,500
Like I said, I didn't like the batch stuff because I feel like that's

920
00:54:07,500 --> 00:54:10,300
adding a lot of complexity and it's only for the debug stuff.

921
00:54:10,300 --> 00:54:14,900
So it didn't really seem like a particularly productive use of time

922
00:54:14,900 --> 00:54:16,000
complexity in the renderer.

923
00:54:16,700 --> 00:54:18,100
So I think that's going to get rid of it.

924
00:54:18,500 --> 00:54:21,200
So yeah, the tooltips.

925
00:54:21,200 --> 00:54:25,900
If we do add tooltip, those just get called kind of out-of-band there.

926
00:54:26,400 --> 00:54:29,800
So what I want to do is I want to say when we had tooltip

927
00:54:30,100 --> 00:54:36,900
We'd have to sort of defer this until later, and so you can kind of

928
00:54:36,900 --> 00:54:37,700
see how it's working.

929
00:54:37,700 --> 00:54:45,400
Here, we would need some sort of a delay, where we wouldn't render it

930
00:54:45,400 --> 00:54:47,100
until after the fact.

931
00:54:47,100 --> 00:54:50,700
Now, if we are not going to render it till after the fact, we would

932
00:54:50,700 --> 00:54:52,400
need some place to put it.

933
00:54:54,600 --> 00:54:58,200
And so we would kind of need like a little buffer or something.

934
00:54:58,800 --> 00:54:59,800
Just just that

935
00:55:00,000 --> 00:55:02,400
That holds the text, right?

936
00:55:04,800 --> 00:55:06,500
That we wanted to print.

937
00:55:06,600 --> 00:55:10,000
And so there's the caressed that there's the actual text.

938
00:55:10,200 --> 00:55:14,500
So we just need somewhere to put that text and, you know, we could

939
00:55:14,500 --> 00:55:15,900
just make a little buffer here.

940
00:55:17,200 --> 00:55:18,000
I don't.

941
00:55:20,000 --> 00:55:24,700
really remember how we did stuff in here because it's been so long

942
00:55:36,300 --> 00:55:40,400
so I think probably and also, all of these things can go away now if

943
00:55:40,400 --> 00:55:41,000
we want to

944
00:55:52,100 --> 00:55:56,800
So yeah, I don't know exactly how I want to do this but I feel like

945
00:55:56,800 --> 00:56:00,400
probably the easiest way is to just have it be a static thing down

946
00:56:00,400 --> 00:56:01,700
here, right?

947
00:56:05,000 --> 00:56:06,300
I mean, we can just do

948
00:56:10,300 --> 00:56:11,900
That right.

949
00:56:19,500 --> 00:56:20,600
I think that would be it.

950
00:56:26,500 --> 00:56:29,500
Yeah, I think that's it because if we just do something like this,

951
00:56:30,100 --> 00:56:33,300
then we can sort of say we can turn to do two things.

952
00:56:33,700 --> 00:56:37,900
We could just say, like first of all we'd have internal void, draw

953
00:56:37,900 --> 00:56:43,300
tool tips and that would just take the debug State and it would just

954
00:56:43,300 --> 00:56:45,500
Loop through all the tooltips that there were right.

955
00:56:45,500 --> 00:56:49,200
So it just say like, you know, for tooltip index,

956
00:56:51,100 --> 00:56:55,400
Is there a index is less than your dog State?

957
00:56:56,100 --> 00:56:59,000
Tort account depend X.

958
00:57:00,200 --> 00:57:07,300
and then we would just say, like, this whole thing here, I don't know

959
00:57:07,300 --> 00:57:08,800
that we need

960
00:57:17,200 --> 00:57:20,300
Any of that to happen more than once, I think that's sufficient.

961
00:57:20,300 --> 00:57:21,700
I think it's just this

962
00:57:27,500 --> 00:57:28,000
Right.

963
00:57:32,600 --> 00:57:33,400
Something like this.

964
00:57:33,600 --> 00:57:36,100
So we essentially say like okay let's Loop through these tooltips and

965
00:57:36,100 --> 00:57:37,500
then we just need to get the text out.

966
00:57:37,500 --> 00:57:41,000
So you know the text is whatever the tooltip text was.

967
00:57:43,600 --> 00:57:46,400
At that point and then all the rest of this stuff, you know, would

968
00:57:46,400 --> 00:57:47,500
just do its thing.

969
00:57:47,700 --> 00:57:52,100
When we do add tooltip, what we would do there is to say like okay

970
00:57:52,400 --> 00:57:55,100
when you actually do have tooltip you get back, the caressed are that

971
00:57:55,100 --> 00:57:57,200
you're going to fill out the result.

972
00:57:57,200 --> 00:58:01,900
There is just the debug State tooltip text.

973
00:58:04,200 --> 00:58:06,500
It's just whichever one of those you're on.

974
00:58:10,200 --> 00:58:10,700
Right?

975
00:58:11,800 --> 00:58:14,300
And then we would just say, like, well, okay?

976
00:58:20,700 --> 00:58:22,600
We sort of got two cases.

977
00:58:26,600 --> 00:58:27,700
I think I want to do this.

978
00:58:28,200 --> 00:58:33,100
So I guess what I want to do is say okay, got the result if the debug

979
00:58:33,100 --> 00:58:33,800
state

980
00:58:35,000 --> 00:58:40,500
Tooltip count is less than the array count of how many we could fit.

981
00:58:45,400 --> 00:58:48,400
Then we're in good shape because then we just say like okay increment

982
00:58:48,400 --> 00:58:49,100
it and do it.

983
00:58:50,700 --> 00:58:51,200
Right?

984
00:58:52,100 --> 00:58:56,400
However, if we can't, then I think we just want to keep filling the

985
00:58:56,400 --> 00:58:58,300
old one, right?

986
00:58:58,300 --> 00:59:02,300
We just want to overwrite the old one, whatever that was, so because

987
00:59:02,300 --> 00:59:04,500
we've run out of space and that's fine.

988
00:59:08,600 --> 00:59:10,400
Or maybe we don't wanna do anything but I don't know.

989
00:59:10,500 --> 00:59:11,400
That seems fine to me.

990
00:59:12,700 --> 00:59:14,600
So I think that's roughly what we want.

991
00:59:14,700 --> 00:59:17,500
And then when we do this situation,

992
00:59:20,200 --> 00:59:25,100
When we do add tooltip really what we want to do is say that the text

993
00:59:25,100 --> 00:59:30,600
buffer that were passing here, in this case is going to be the tooltip

994
00:59:30,800 --> 00:59:31,800
buffer itself.

995
00:59:32,200 --> 00:59:36,500
Now, since we have actually gone ahead and tried to prevent buffer

996
00:59:36,500 --> 00:59:37,500
overruns here, why?

997
00:59:37,500 --> 00:59:39,300
I don't know because it's just some random game code.

998
00:59:39,300 --> 00:59:44,200
But you know, whatever what we probably want to do is when we do add

999
00:59:44,200 --> 00:59:48,300
tooltip, we would need something like tooltip text or something like

1000
00:59:48,300 --> 00:59:49,400
this or tooltip.

1001
00:59:50,400 --> 00:59:50,900
Buffer.

1002
00:59:51,600 --> 00:59:52,700
We just need two things.

1003
00:59:52,700 --> 00:59:59,200
We need the size and we need the, you know, the data.

1004
01:00:01,800 --> 01:00:05,200
And so, when we do this, we actually want tooltip buffer results.

1005
01:00:06,500 --> 01:00:14,300
We want to say that the result size equals like the size of the debug

1006
01:00:14,300 --> 01:00:17,000
State Should I guess.

1007
01:00:17,000 --> 01:00:21,600
I'll just say size of Debo State, tooltip text zero.

1008
01:00:22,700 --> 01:00:25,200
And then here we'll set the result Theta.

1009
01:00:25,200 --> 01:00:30,300
So now when people go to print these out and they get back a tool tip

1010
01:00:30,300 --> 01:00:30,800
buffer

1011
01:00:40,700 --> 01:00:45,700
Then what they can do is just say like okay text buffer, got size and

1012
01:00:45,700 --> 01:00:50,800
then text before data is all we need to do and that I'll just print it

1013
01:00:50,800 --> 01:00:54,200
directly out into there and everyone's happy in theory.

1014
01:00:54,900 --> 01:00:58,000
I don't actually know if everyone is actually happy but let's say that

1015
01:00:58,000 --> 01:00:59,000
they were going to be happy.

1016
01:01:02,200 --> 01:01:05,500
And I suppose, I should also say that I'm actually going to put that

1017
01:01:05,500 --> 01:01:05,700
up.

1018
01:01:07,800 --> 01:01:09,800
So I think that's it.

1019
01:01:10,000 --> 01:01:12,300
We just have to actually make this do its thing.

1020
01:01:29,500 --> 01:01:30,100
Same here.

1021
01:01:37,100 --> 01:01:37,900
and,

1022
01:01:42,400 --> 01:01:43,100
Password.

1023
01:01:47,600 --> 01:01:52,600
Now recall that we're not actually ever printing this out, right?

1024
01:01:53,400 --> 01:01:58,300
So, now, what should happen is in theory, will still have the tooltips

1025
01:01:58,300 --> 01:02:00,200
getting generated but we're never going to see them, right?

1026
01:02:00,200 --> 01:02:03,400
So we just move around here because they're just getting buffered up

1027
01:02:03,400 --> 01:02:05,000
in that array and we never actually do it.

1028
01:02:05,000 --> 01:02:07,900
But what we can do now that we have them buffered and we have our

1029
01:02:07,900 --> 01:02:08,700
routine to draw them.

1030
01:02:08,700 --> 01:02:12,800
Is all we have to do is actually just called raw tooltips at the time

1031
01:02:13,000 --> 01:02:16,600
when they would be on top of everything else, and then they should

1032
01:02:16,600 --> 01:02:17,100
appear.

1033
01:02:17,600 --> 01:02:20,200
On top of everything else in theory.

1034
01:02:21,100 --> 01:02:26,200
So right before the end render group, I'll just say, Okay, draw the

1035
01:02:26,200 --> 01:02:27,000
tooltips then

1036
01:02:32,000 --> 01:02:34,300
and now if we didn't mess it up, which who knows?

1037
01:02:34,300 --> 01:02:36,000
If we did will get them.

1038
01:02:37,600 --> 01:02:41,100
Oh and of course we have to reset them as well.

1039
01:02:41,400 --> 01:02:43,500
So once we draw tool tips when we do

1040
01:02:44,900 --> 01:02:46,000
Draw tool tips.

1041
01:02:46,000 --> 01:02:46,800
I guess we could do that, right?

1042
01:02:46,800 --> 01:02:49,100
When we draw them, we can reset them.

1043
01:02:49,100 --> 01:02:49,400
I don't know.

1044
01:02:49,400 --> 01:02:50,500
That doesn't make much sense to me.

1045
01:02:50,700 --> 01:02:54,200
I think I'll probably do it in here like something more like this.

1046
01:02:54,200 --> 01:02:59,900
Like, you know, tooltip count 10, you know, when we sort of

1047
01:03:00,000 --> 01:03:02,400
Initialize everything that seems a little bit better to me.

1048
01:03:03,700 --> 01:03:05,900
Anyway, so here's the profile.

1049
01:03:05,900 --> 01:03:09,600
There's the tooltip and it is correctly.

1050
01:03:09,600 --> 01:03:13,300
Sort of hovering over it.

1051
01:03:13,500 --> 01:03:15,600
I like that cumulative to point thing.

1052
01:03:15,600 --> 01:03:19,400
That's a nice feature and there's our frame, indices.

1053
01:03:19,700 --> 01:03:22,000
I don't really know where those are getting printed out, but you know,

1054
01:03:22,200 --> 01:03:27,700
they are here is another example of that, let's go to the thread view,

1055
01:03:28,600 --> 01:03:29,800
there's an example of them getting stuck.

1056
01:03:30,000 --> 01:03:31,200
Act on top of each other.

1057
01:03:31,600 --> 01:03:35,800
So that's pretty nice and all that and great.

1058
01:03:35,800 --> 01:03:38,200
So wonderful fabulous.

1059
01:03:38,200 --> 01:03:41,300
So nice whatever doesn't matter close the program.

1060
01:03:41,700 --> 01:03:45,200
Okay, so that is that

1061
01:03:47,100 --> 01:03:48,600
And it's time for the Q&A.

1062
01:03:48,600 --> 01:03:50,900
We don't have very much time left but I kind of ate into it.

1063
01:03:50,900 --> 01:03:51,600
But what you gonna do

1064
01:04:10,700 --> 01:04:14,400
also, if you wanted to see it running with the without all the debug

1065
01:04:14,500 --> 01:04:15,200
Miss in it,

1066
01:04:19,900 --> 01:04:22,000
Looks like we're 60 frames a second.

1067
01:04:24,300 --> 01:04:27,800
Now, and we're 60 frames a second everywhere now, so that's nice.

1068
01:04:33,000 --> 01:04:34,000
I don't know what we're like in.

1069
01:04:35,700 --> 01:04:38,000
Software still pretty good.

1070
01:04:38,000 --> 01:04:38,900
We're almost 30.

1071
01:04:40,700 --> 01:04:42,500
We're not quite holding 30, but we're

1072
01:04:43,600 --> 01:04:44,200
pretty good.

1073
01:04:45,500 --> 01:04:46,200
So, that's cool.

1074
01:04:55,900 --> 01:04:59,600
Got to go put some art in here and get and like get the actual

1075
01:04:59,600 --> 01:05:03,100
z-transform stuff happening because we're almost there and it's going

1076
01:05:03,100 --> 01:05:04,900
to be fun to start having world to move around.

1077
01:05:04,900 --> 01:05:05,500
And I think

1078
01:05:31,700 --> 01:05:32,700
Is internal app out.

1079
01:05:32,700 --> 01:05:36,300
If I said, I can turn all other way around, but yes, it's pound to

1080
01:05:36,300 --> 01:05:37,500
find internal static.

1081
01:05:39,800 --> 01:05:42,800
Could you talk a bit more about the meta programming stuff use at

1082
01:05:42,800 --> 01:05:43,200
work?

1083
01:05:43,200 --> 01:05:46,000
I'm kind of annoyed at the limitations of C C++.

1084
01:05:46,000 --> 01:05:48,600
It looks like the ji compiler won't be released any time soon.

1085
01:05:49,000 --> 01:05:52,400
Do actually parse the code and construct an AST or is it simpler than

1086
01:05:52,400 --> 01:05:52,800
that?

1087
01:05:53,100 --> 01:05:55,400
Yes, I actually parse the coding construct, an AST

1088
01:05:57,400 --> 01:05:59,800
Are you a fan of templates or do you use void star instead?

1089
01:06:00,300 --> 01:06:01,300
I use metaprogramming.

1090
01:06:01,300 --> 01:06:04,800
I don't like templates because I just don't feel they were designed

1091
01:06:04,800 --> 01:06:05,200
very well.

1092
01:06:05,200 --> 01:06:07,400
So it's always just kind of frustrating to program with them.

1093
01:06:10,300 --> 01:06:12,700
Why was the grouping approach for speeding up the debug sorting the

1094
01:06:12,700 --> 01:06:13,600
first one you tried?

1095
01:06:13,600 --> 01:06:15,500
Would it have been better in some way?

1096
01:06:17,500 --> 01:06:19,000
Yeah, so

1097
01:06:21,400 --> 01:06:24,000
the reason that I sort of want to do that was because I was like,

1098
01:06:24,000 --> 01:06:24,500
well,

1099
01:06:27,000 --> 01:06:31,300
it might be nice to have some sorting to have the ability to still run

1100
01:06:31,300 --> 01:06:33,700
sorting in the debug system, right?

1101
01:06:36,400 --> 01:06:38,200
And now we don't have that.

1102
01:06:38,400 --> 01:06:41,400
Now it turns out that we really just didn't need it anywhere and so,

1103
01:06:41,400 --> 01:06:45,700
we probably just won't ever needed anywhere, but if we had done the

1104
01:06:45,700 --> 01:06:49,500
aggregation system, it means that we can choose to still use sorting

1105
01:06:49,500 --> 01:06:51,200
values in the debug system, right?

1106
01:06:51,200 --> 01:06:52,300
And that would have been nice.

1107
01:06:53,100 --> 01:06:55,800
Would have been potentially nice, but since we don't really have a use

1108
01:06:55,800 --> 01:06:59,200
case for it, I'm not sad about it at the moment.

1109
01:08:31,200 --> 01:08:35,300
Would you recommend using a DOT bat file or bash script over a cmake

1110
01:08:35,300 --> 01:08:36,399
file for instance?

1111
01:08:36,399 --> 01:08:37,000
Yes,

1112
01:08:38,300 --> 01:08:40,899
That is all I use nowadays.

1113
01:08:41,000 --> 01:08:46,000
I find that make files are just a waste of everyone's time.

1114
01:08:48,000 --> 01:08:51,899
You end up with slower builds and another whole thing to maintain.

1115
01:08:51,899 --> 01:08:52,800
So I just

1116
01:08:54,000 --> 01:08:56,100
I don't see anything really good.

1117
01:08:57,600 --> 01:08:59,800
Any good reason to ever use and make file in?

1118
01:09:00,000 --> 01:09:01,300
You have, you know?

1119
01:09:04,300 --> 01:09:07,200
Let's say 500 files, Maybe.

1120
01:09:09,200 --> 01:09:10,100
Maybe.

1121
01:09:11,800 --> 01:09:16,800
I don't know like at work, I think I can regularly compiled about 150

1122
01:09:16,800 --> 01:09:20,700
thousand lines of code with a bat file.

1123
01:09:23,700 --> 01:09:26,600
So you can go to a pretty large product size, but, you know, if you've

1124
01:09:26,600 --> 01:09:32,899
got 10 million lines of code, well you probably not gonna be able to

1125
01:09:32,899 --> 01:09:33,399
write.

1126
01:09:41,600 --> 01:09:45,500
And your work are there any people the programming Loop or are they?

1127
01:09:45,500 --> 01:09:47,000
Shunned and thrown out.

1128
01:09:48,399 --> 01:09:52,500
Obviously I wouldn't hire anyone for my team who programmed in

1129
01:09:52,500 --> 01:09:55,000
object-oriented programming, just because I don't want to deal with

1130
01:09:55,000 --> 01:09:55,300
it.

1131
01:09:57,900 --> 01:10:01,200
But, you know, that doesn't mean that there aren't plenty of

1132
01:10:01,200 --> 01:10:04,100
programmers out there who programming training program, writing, who

1133
01:10:04,100 --> 01:10:05,700
aren't good, right?

1134
01:10:08,700 --> 01:10:10,500
so, you know,

1135
01:10:12,900 --> 01:10:16,300
I don't like object-oriented programming, so I don't want to work with

1136
01:10:16,300 --> 01:10:16,600
anyone.

1137
01:10:16,600 --> 01:10:19,300
Who's going to make me use object-oriented programming to interface

1138
01:10:19,300 --> 01:10:20,000
with their code.

1139
01:10:20,000 --> 01:10:25,600
Like that's just not something I would be okay with because I don't

1140
01:10:25,600 --> 01:10:26,400
want to do that.

1141
01:10:27,000 --> 01:10:29,500
So part of being in control of your own programming,

1142
01:10:31,200 --> 01:10:36,200
Environment is deciding what you are and are okay with, right?

1143
01:10:36,900 --> 01:10:43,600
But it doesn't really make a that doesn't mean that they're that

1144
01:10:44,100 --> 01:10:47,300
object-oriented programming is something that, you know, no good

1145
01:10:47,300 --> 01:10:49,000
programmer has ever done or something.

1146
01:10:49,900 --> 01:10:50,400
So

1147
01:11:04,500 --> 01:11:07,600
Doctor sat related to yesterday's, same region issue.

1148
01:11:07,600 --> 01:11:10,800
Would it be feasible to merge overlapping regions and then make a pass

1149
01:11:10,800 --> 01:11:13,400
to slice it back up into non-overlapping regions?

1150
01:11:13,400 --> 01:11:17,000
Unfortunately, no, the reason for that is because some reasons require

1151
01:11:17,000 --> 01:11:19,600
an apron and I don't really know what to do.

1152
01:11:20,200 --> 01:11:21,600
That is the, that is the problem.

1153
01:11:21,600 --> 01:11:24,700
If some regions didn't need an apron, there was a lot of things that

1154
01:11:24,700 --> 01:11:26,500
we could probably do, but they do.

1155
01:11:26,500 --> 01:11:28,200
And so I don't know about that.

1156
01:11:30,600 --> 01:11:33,400
Can you imagine a scenarios where batch rendering might be useful in

1157
01:11:33,400 --> 01:11:34,400
handmade hero?

1158
01:11:34,600 --> 01:11:34,900
Yes.

1159
01:11:34,900 --> 01:11:38,300
So we're definitely going to have one place that we're going to add a

1160
01:11:38,300 --> 01:11:42,200
batch type command and that's for particle systems.

1161
01:11:43,600 --> 01:11:46,200
I think because in order to get enough particles in there, you can't

1162
01:11:46,200 --> 01:11:48,000
be pushing A render element per particle.

1163
01:11:48,000 --> 01:11:48,900
That's ridiculous.

1164
01:11:49,700 --> 01:11:52,100
We did that for our simple particle system when we were just playing

1165
01:11:52,100 --> 01:11:52,700
around with it.

1166
01:11:52,700 --> 01:11:55,600
But that's not really a sustainable way to make a part of a system.

1167
01:11:56,400 --> 01:11:59,500
So we will probably have a sort of batchi thing for that.

1168
01:11:59,600 --> 01:11:59,800
But

1169
01:12:00,000 --> 01:12:01,600
Only thing we probably would need it for.

1170
01:12:06,900 --> 01:12:09,000
I've only recently started to think about metaprogramming, not

1171
01:12:09,000 --> 01:12:11,500
expecting you to go in death, but could you briefly list some of the

1172
01:12:11,500 --> 01:12:13,200
features you implanted know?

1173
01:12:14,100 --> 01:12:16,800
All the Molly rocket stuff is not stuff.

1174
01:12:16,800 --> 01:12:18,100
I really want to go into

1175
01:12:24,400 --> 01:12:27,700
We've been composing the music sfx for handmade hero.

1176
01:12:27,700 --> 01:12:30,100
If any or do you have some else when that we licensed music for

1177
01:12:30,100 --> 01:12:30,900
handmade hero.

1178
01:12:32,300 --> 01:12:35,200
So we already have that sound effects wise.

1179
01:12:35,200 --> 01:12:36,700
I don't really know what we're going to do.

1180
01:12:37,600 --> 01:12:39,700
We'll probably deal with that way.

1181
01:12:39,700 --> 01:12:43,300
Further down the line though because, you know, I'll just be using

1182
01:12:43,300 --> 01:12:46,800
placeholder side effects that I probably record myself or something up

1183
01:12:46,800 --> 01:12:49,000
until the point where the game is like mostly done.

1184
01:12:49,200 --> 01:12:51,700
And then we'll probably like because, you know,

1185
01:12:52,700 --> 01:12:56,600
We're so slow because we only get to program an hour a night that you

1186
01:12:56,600 --> 01:12:59,400
know by the time the game is mostly done.

1187
01:12:59,700 --> 01:13:03,100
They're still probably several months of programming to do to like

1188
01:13:03,100 --> 01:13:04,400
finalize everything.

1189
01:13:05,100 --> 01:13:07,900
And during that time a sound designer would have plenty of time to

1190
01:13:07,900 --> 01:13:08,300
replace.

1191
01:13:08,300 --> 01:13:11,500
You know are 50 or 100 sound effects with something reasonable, right?

1192
01:13:12,300 --> 01:13:14,900
So it's not like a normal product, we're like, well we can't really

1193
01:13:14,900 --> 01:13:17,500
wait till the last week of development when the games all done, you

1194
01:13:17,500 --> 01:13:21,400
know, but but here like the last week would stretch out into 40 days,

1195
01:13:21,400 --> 01:13:21,900
right?

1196
01:13:22,500 --> 01:13:25,700
So we can have someone come on relatively late in the project to just

1197
01:13:25,700 --> 01:13:28,000
do some sound effects for us, which is probably what we'll do.

1198
01:13:28,500 --> 01:13:30,600
But I want to wait till then because that way, we'll know what side

1199
01:13:30,600 --> 01:13:31,400
effects we actually need.

1200
01:13:31,400 --> 01:13:34,000
Whereas right now, I don't know all the sound effects that actually

1201
01:13:34,000 --> 01:13:37,400
need because until the game is, you know, pretty playable.

1202
01:13:37,400 --> 01:13:41,000
And you know, you've kind of built most of what you think you're going

1203
01:13:41,000 --> 01:13:41,600
to want.

1204
01:13:41,700 --> 01:13:43,900
You don't really know what your sound effects list is.

1205
01:13:44,500 --> 01:13:46,900
And if you want it, if you try to build it, you're going to do one of

1206
01:13:46,900 --> 01:13:49,500
these like design document kind of weird things, we try to plan

1207
01:13:49,500 --> 01:13:52,200
everything out in advance and that, you know, that goes about as well

1208
01:13:52,200 --> 01:13:52,300
as

1209
01:13:52,400 --> 01:13:55,600
Trying to plan out all the code in advance, right?

1210
01:13:56,400 --> 01:14:01,300
It helps to have a bunch of ideas about where you're going, but at the

1211
01:14:01,300 --> 01:14:03,900
end of the day, if you want to make a meticulous list, like here's all

1212
01:14:03,900 --> 01:14:08,200
the Sprites we will need or here's all the sound effects will need.

1213
01:14:08,200 --> 01:14:09,700
It's really not super possible.

1214
01:14:09,700 --> 01:14:16,300
I think to do that upfront entirely, unless you're doing a very

1215
01:14:16,300 --> 01:14:18,900
antiseptic and non-creative development process, you know,

1216
01:14:34,700 --> 01:14:35,700
All right.

1217
01:14:44,900 --> 01:14:46,400
Looks like a bat, it.

1218
01:14:52,300 --> 01:14:52,900
All right.

1219
01:14:52,900 --> 01:14:53,900
Thank you, everyone for joining me.

1220
01:14:53,900 --> 01:14:55,200
For the estate of handmade here.

1221
01:14:55,200 --> 01:14:56,300
It's been a pleasure coding with you.

1222
01:14:56,300 --> 01:14:59,500
As always, if you want to follow along at home, you can always

1223
01:14:59,500 --> 01:14:59,800
pre-order the game.

1224
01:15:00,000 --> 01:15:01,100
My handmade hero dot-org.

1225
01:15:01,100 --> 01:15:05,000
It comes with source code so you can follow along with it.

1226
01:15:07,100 --> 01:15:07,900
An experiment.

1227
01:15:09,900 --> 01:15:10,400
Yeah.

1228
01:15:10,500 --> 01:15:12,400
We've got a form so that you can go to if you want to ask questions

1229
01:15:12,400 --> 01:15:13,000
about the series.

1230
01:15:13,000 --> 01:15:16,800
We've got a patreon page and go to if you want to support the video

1231
01:15:16,800 --> 01:15:17,500
series.

1232
01:15:17,500 --> 01:15:19,500
We also have a schedule about the tells you when we're going to be

1233
01:15:19,500 --> 01:15:22,200
live, if you want to catch an episode live and we have an episode

1234
01:15:22,200 --> 01:15:22,800
guide, you can go to.

1235
01:15:22,800 --> 01:15:27,100
If I catch up on old stuff, that is about it for today.

1236
01:15:27,600 --> 01:15:30,700
I will be back next week, check the schedule, but for the schedule.

1237
01:15:30,700 --> 01:15:32,100
But I think it's going to be 8 p.m.

1238
01:15:33,300 --> 01:15:34,400
Just like it was this week.

1239
01:15:34,400 --> 01:15:35,700
That'll probably be the time from now on.

1240
01:15:35,700 --> 01:15:40,000
Just like it says in the trailer just like it says right there until

1241
01:15:40,000 --> 01:15:42,700
then have fun programming this weekend.

1242
01:15:43,100 --> 01:15:47,000
Maybe play some games, have some fun and I will see you guys on the

1243
01:15:47,000 --> 01:15:47,600
internet.

1244
01:15:48,200 --> 01:15:49,200
Take it easy everybody.

