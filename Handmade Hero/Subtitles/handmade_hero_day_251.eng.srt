1
00:00:01,800 --> 00:00:04,000
Hello everyone and welcome to handmade hero.

2
00:00:04,000 --> 00:00:08,000
The show we could complete game live on stream and we are doing a

3
00:00:08,000 --> 00:00:11,400
little bit of debug code clean up at the moment.

4
00:00:12,300 --> 00:00:15,000
I'm going to go ahead and jump right into it because I don't actually

5
00:00:15,000 --> 00:00:19,700
know precisely what we want to clip that.

6
00:00:19,700 --> 00:00:23,900
I mean for sure I think we want to try and finish up some of the way

7
00:00:23,900 --> 00:00:26,700
we were getting the debug Harkin place but I think we also want to

8
00:00:26,700 --> 00:00:29,200
start in on getting our profile view working cleanly.

9
00:00:30,000 --> 00:00:30,600
So we got a bunch of stuff

10
00:00:30,800 --> 00:00:31,000
To do.

11
00:00:31,000 --> 00:00:34,400
So I'm going to go ahead and hop in on that if you are one of the

12
00:00:34,400 --> 00:00:35,500
people who's flying along at home.

13
00:00:35,500 --> 00:00:38,000
But the source code today is day 251.

14
00:00:38,000 --> 00:00:41,800
So do today to 50s source code and start with that.

15
00:00:42,300 --> 00:00:45,100
That is where I am starting with today.

16
00:00:45,900 --> 00:00:52,300
So, let's go ahead and open open things up here and see where we're

17
00:00:52,300 --> 00:00:53,100
at.

18
00:00:53,200 --> 00:01:00,600
So, let's see here is our handmade prj, and we have built it.

19
00:01:01,100 --> 00:01:04,300
Load the debugger and run it.

20
00:01:04,400 --> 00:01:05,099
And

21
00:01:07,400 --> 00:01:10,200
At some point, I think we should probably pop back over the opengl

22
00:01:10,200 --> 00:01:12,500
thing, and remove some of that context face and stuff, because man,

23
00:01:12,500 --> 00:01:13,500
it's so long.

24
00:01:13,500 --> 00:01:16,200
It takes so long to start up now, it's just really frustrating.

25
00:01:17,000 --> 00:01:21,700
But anyway, I think we were sort of almost finished with the debug

26
00:01:21,700 --> 00:01:25,400
hierarchy stuff here and you can kind of see that we have a space for

27
00:01:25,400 --> 00:01:27,200
our debug profile here as well.

28
00:01:27,400 --> 00:01:28,400
But there's nothing in it.

29
00:01:28,500 --> 00:01:33,000
So obviously, you know, that's something we would want to deal with as

30
00:01:33,000 --> 00:01:36,500
well, but none of

31
00:01:36,700 --> 00:01:38,800
Is that is neither here nor there is this.

32
00:01:38,800 --> 00:01:41,500
This actually it's like a solid shaded window.

33
00:01:41,500 --> 00:01:44,000
It looks like it's like a has a darkening behind it.

34
00:01:44,000 --> 00:01:44,600
That's interesting.

35
00:01:45,200 --> 00:01:49,400
Anyway, but first we got to finish sort of this stuff up where we want

36
00:01:49,400 --> 00:01:51,900
to be able to edit these things and have these things come out in the

37
00:01:51,900 --> 00:01:56,100
right places and we're mostly there but not quite.

38
00:01:56,200 --> 00:01:59,500
So you can kind of see that like we started down here and we're not

39
00:01:59,500 --> 00:02:00,300
quite there yet.

40
00:02:00,400 --> 00:02:04,700
You can see that the path gets read properly but then the name of the

41
00:02:04,700 --> 00:02:06,500
actual item is not correct.

42
00:02:06,600 --> 00:02:11,200
at the moment and also we have not yet enabled, the ability to edit

43
00:02:11,200 --> 00:02:13,000
these which we would also like to do

44
00:02:14,000 --> 00:02:18,200
So, I don't know if we'll get to doing the profile today so but I

45
00:02:18,200 --> 00:02:20,700
definitely would like to try and get it to the point where we can edit

46
00:02:20,700 --> 00:02:21,000
these things.

47
00:02:21,000 --> 00:02:23,300
So I think there's probably a little coded involved in there, that

48
00:02:23,300 --> 00:02:24,100
might take a little while.

49
00:02:24,500 --> 00:02:27,600
So that's what I'd like to try and get done today and then next week,

50
00:02:27,600 --> 00:02:28,700
we can just finish up.

51
00:02:28,700 --> 00:02:32,600
I think that that gives us most of what we want for our debug output.

52
00:02:33,100 --> 00:02:36,200
Next week, we can try doing a couple things like putting some

53
00:02:36,200 --> 00:02:37,300
profiling stuff in there.

54
00:02:37,800 --> 00:02:40,100
Unless we happen, this happens here really quickly right now.

55
00:02:40,100 --> 00:02:43,400
And then we can start on the profile today either way.

56
00:02:44,200 --> 00:02:45,100
But that's where we're at.

57
00:02:45,100 --> 00:02:47,600
So, let's take a look here at

58
00:02:49,800 --> 00:02:51,300
What we need to do to make that happen.

59
00:02:51,900 --> 00:02:54,700
Let's pop over to for coder here.

60
00:02:55,200 --> 00:02:59,600
So right now it looks like our main problem is that when we're out

61
00:02:59,600 --> 00:02:59,800
putting

62
00:03:00,000 --> 00:03:04,200
These debug events we're obviously printing a name, that isn't what we

63
00:03:04,200 --> 00:03:05,300
want the name to be.

64
00:03:05,300 --> 00:03:09,500
And so we can see here that we've got this event quid is what we're

65
00:03:09,500 --> 00:03:12,500
starting with for the name and there's the start at lash lash thing

66
00:03:12,500 --> 00:03:16,300
which says, like go to, you find the last lash and you know maybe

67
00:03:16,300 --> 00:03:17,900
we're sending that, maybe we're not.

68
00:03:17,900 --> 00:03:22,000
But the point is in order to actually figure out how to display all

69
00:03:22,000 --> 00:03:23,000
the stuff we need to sort of.

70
00:03:23,000 --> 00:03:24,300
Now have some idea.

71
00:03:26,200 --> 00:03:28,600
Of how this hierarchy is being built, exactly.

72
00:03:28,700 --> 00:03:31,500
We sort of work through some of that, but we got to make it actually

73
00:03:31,500 --> 00:03:32,500
be totally correct.

74
00:03:32,500 --> 00:03:37,500
Now in order to have to have the display that we want, so looking

75
00:03:37,500 --> 00:03:40,000
through how it's currently getting built.

76
00:03:40,300 --> 00:03:43,800
Oops, I got to get my area looking through.

77
00:03:43,800 --> 00:03:45,300
How it's currently being built.

78
00:03:45,400 --> 00:03:49,500
If you remember correctly, the way that it sort of happens, at the

79
00:03:49,500 --> 00:03:53,200
moment is debug blocks themselves.

80
00:03:53,200 --> 00:03:55,700
Sort of get get

81
00:03:55,900 --> 00:04:00,800
Moved into the hierarchy as actual unit as actual elements and then,

82
00:04:00,800 --> 00:04:07,100
whenever the debug those debug blocks get output, they output the

83
00:04:07,100 --> 00:04:08,300
events inside them.

84
00:04:08,700 --> 00:04:10,600
In fact, this is the actual routine right here.

85
00:04:10,600 --> 00:04:14,900
You can see when we come to a data block gets printed out right here.

86
00:04:16,200 --> 00:04:20,500
Like so now it seems to me like this is the thing that I don't really

87
00:04:20,500 --> 00:04:23,000
know and just kind of thinking it through.

88
00:04:23,300 --> 00:04:25,700
The only reason we wouldn't do it is

89
00:04:25,800 --> 00:04:29,500
Is because we want to display multiple data blocks that are all the

90
00:04:29,500 --> 00:04:33,100
same kind of data block, but it doesn't make a whole lot of sense to

91
00:04:33,100 --> 00:04:38,100
me, why we actually even need to have data blocks stored in the

92
00:04:38,100 --> 00:04:40,700
hierarchy as separate printable things like this.

93
00:04:41,600 --> 00:04:45,900
Other than the one reason that when we go to draw events like this

94
00:04:45,900 --> 00:04:50,600
here, you can kind of see that if we were, to have multiple data

95
00:04:50,600 --> 00:04:54,000
blocks of the same kind, that would actually work.

96
00:04:54,000 --> 00:04:55,300
Okay, at the moment.

97
00:04:55,300 --> 00:04:55,700
Whereas, if

98
00:04:55,900 --> 00:05:00,800
We made them all in the hierarchy wouldn't necessarily work correctly

99
00:05:02,100 --> 00:05:04,700
so it depends on how we want to approach that.

100
00:05:04,700 --> 00:05:07,100
I don't know necessarily how we want to approach that but we could

101
00:05:07,100 --> 00:05:10,700
sort of simplify this down by saying that data blocks always kind of

102
00:05:10,700 --> 00:05:14,300
get expanded into the hierarchy at the time when we see them, they get

103
00:05:14,300 --> 00:05:18,100
slots in the hierarchy directly rather than just having the data block

104
00:05:18,100 --> 00:05:21,200
itself, have a slot in hierarchy and then the thing get printed out on

105
00:05:21,200 --> 00:05:24,600
demand which is what's actually happening right now, right?

106
00:05:25,900 --> 00:05:29,800
So thinking that through is mainly the part that I was talking about.

107
00:05:29,800 --> 00:05:32,900
Now you can see that when we're printing out these names, you can see

108
00:05:32,900 --> 00:05:36,700
us doing the debug draw event business happening here.

109
00:05:37,000 --> 00:05:39,300
And when we call debug draw event for each of those things, for some

110
00:05:39,300 --> 00:05:43,400
reason, we're getting a weird name for each of them, and that's the

111
00:05:43,400 --> 00:05:47,200
part that I kind of wanted to look at a little bit, and I know we've

112
00:05:47,200 --> 00:05:52,800
got the store event here, and I want to take a look at that.

113
00:05:52,800 --> 00:05:55,700
So, inside store event when we produce the actual

114
00:05:55,800 --> 00:05:59,800
I will name you can kind of see here, we push the we

115
00:06:00,000 --> 00:06:03,500
Take the name that we want to call the element and we put that into

116
00:06:03,500 --> 00:06:04,200
the grid.

117
00:06:04,300 --> 00:06:08,900
Now the thing about this get name that happens here is that that's

118
00:06:08,900 --> 00:06:12,300
going to give us the whole name including the slashes, right?

119
00:06:13,100 --> 00:06:17,600
And so that's actually, you know, when we look back here, it actually

120
00:06:17,600 --> 00:06:23,100
makes some sense to me why we're seeing if opengl over starts up, why

121
00:06:23,100 --> 00:06:28,500
we're seeing, you know, render a / camera as a name of the element,

122
00:06:28,600 --> 00:06:29,600
that makes some sense.

123
00:06:30,000 --> 00:06:33,000
It doesn't make a whole lot of sense, is why the final thing after the

124
00:06:33,000 --> 00:06:35,500
slash does not appear to be there, right?

125
00:06:35,800 --> 00:06:41,800
That part much more confusing because if we take a look and I guess,

126
00:06:41,800 --> 00:06:43,600
maybe we'll go back here and let me just make sure.

127
00:06:43,600 --> 00:06:46,000
I understand what we were trying back.

128
00:06:46,000 --> 00:06:51,000
When we originally created the debug value stack that we were printing

129
00:06:51,000 --> 00:06:51,900
in the first place.

130
00:06:52,100 --> 00:06:53,400
You can kind of see here.

131
00:06:53,500 --> 00:06:56,800
We've got the data block render camera and then inside here we've got

132
00:06:56,800 --> 00:06:58,100
each of these debug values.

133
00:06:58,200 --> 00:06:59,700
Those debug values should have been

134
00:07:00,100 --> 00:07:01,200
Like ridiculous stuff.

135
00:07:01,200 --> 00:07:04,200
Like we should have seen Global renderer camera use debug should

136
00:07:04,200 --> 00:07:07,600
actually have been what showed up under under there.

137
00:07:07,600 --> 00:07:12,200
So, you know, that's what I'm expecting to see under there and that's

138
00:07:12,200 --> 00:07:15,100
not even remotely what we actually are seeing under there.

139
00:07:15,300 --> 00:07:19,900
It looks instead, you know what it, what it actually looks like.

140
00:07:19,900 --> 00:07:25,200
In this case is it looks like the debug values themselves are

141
00:07:25,200 --> 00:07:29,500
inheriting, just the debug blocks actual name, right?

142
00:07:29,600 --> 00:07:29,800
So

143
00:07:29,900 --> 00:07:33,400
So, this is the name of the debug block that's getting inserted there,

144
00:07:33,700 --> 00:07:37,300
but we don't actually want that at all, like, we don't want the name

145
00:07:37,300 --> 00:07:38,200
of the debug block.

146
00:07:38,200 --> 00:07:38,400
There.

147
00:07:38,400 --> 00:07:42,600
We want this name there and I'll quickly verify that we're actually

148
00:07:42,600 --> 00:07:43,700
passing the right thing down.

149
00:07:43,700 --> 00:07:47,800
Because, obviously, if we're passing the wrong thing, that would be y.

150
00:07:48,300 --> 00:07:51,400
But presumably, we're passing the right thing in just parsing it wrong

151
00:07:51,700 --> 00:07:54,300
because that's, it would seem to be the most consistent with the

152
00:07:54,300 --> 00:07:55,100
behavior of seeing.

153
00:07:55,200 --> 00:07:56,300
So you can see here,

154
00:07:57,400 --> 00:08:01,000
Here's debug value and you can see record, debug event.

155
00:08:01,200 --> 00:08:05,200
And we get the debug name here and then we do the set event, right?

156
00:08:05,300 --> 00:08:09,900
This, debug name with the, with the pound value, that should give us a

157
00:08:09,900 --> 00:08:10,600
debug value.

158
00:08:10,600 --> 00:08:14,200
That actually has the name, Global renderer camera, use debug, that's

159
00:08:14,200 --> 00:08:15,300
getting passed down there.

160
00:08:16,000 --> 00:08:21,900
And so now I want to go back and look at handmade debug to see why

161
00:08:21,900 --> 00:08:26,500
we're not getting that as the actual name.

162
00:08:26,600 --> 00:08:26,800
Like,

163
00:08:27,000 --> 00:08:28,300
Why are we not seeing that name?

164
00:08:28,300 --> 00:08:30,600
Because we shouldn't even be able to get the other name.

165
00:08:30,700 --> 00:08:33,000
So, it's a little confusing to me, right?

166
00:08:35,100 --> 00:08:36,200
So that's what I'm doing right now.

167
00:08:36,600 --> 00:08:39,900
So anyway, so here we are in draw me menu, right?

168
00:08:40,000 --> 00:08:41,900
This is how we're normally drawing stuff.

169
00:08:41,900 --> 00:08:44,100
And when we drove one of these elements, we come through here and

170
00:08:44,100 --> 00:08:47,100
we're calling debug drug event, which I should go verify that.

171
00:08:47,100 --> 00:08:49,500
That's actually what we're calling each time like that.

172
00:08:49,500 --> 00:08:52,400
We're actually going through this path that I think we are.

173
00:08:52,400 --> 00:08:55,600
And it's not something else that's happening, but if that if we assume

174
00:08:55,600 --> 00:08:56,800
that that's the case, then what we're going to

175
00:08:56,900 --> 00:08:58,200
End up here is in debug draw event.

176
00:08:58,200 --> 00:08:59,700
We're going to have the story.

177
00:09:00,000 --> 00:09:01,500
That we saved.

178
00:09:01,700 --> 00:09:04,500
And that's the thing that we're going to come through here to actually

179
00:09:04,500 --> 00:09:05,300
write out.

180
00:09:05,300 --> 00:09:06,200
So you can see here.

181
00:09:06,200 --> 00:09:11,600
Here's debug event to text, we're passing this event here right there

182
00:09:11,900 --> 00:09:14,000
and you can see that that's stored event.

183
00:09:14,700 --> 00:09:19,100
We're getting just whatever the event was off of it, which is, you

184
00:09:19,100 --> 00:09:22,400
know, just the the most recent one for it, presumably.

185
00:09:23,800 --> 00:09:25,900
That's sort of ends the most recent one and we're just getting the

186
00:09:25,900 --> 00:09:30,000
event of that to print it out and so when we go to print out that

187
00:09:30,000 --> 00:09:34,200
event, I feel like what we should be getting is we should be getting

188
00:09:34,500 --> 00:09:35,800
that name, right?

189
00:09:35,800 --> 00:09:39,000
We should be getting the name there so you know, that's what I'm

190
00:09:39,000 --> 00:09:39,600
assuming.

191
00:09:39,700 --> 00:09:43,900
So there is AD name and when we do add a name that just we grab the

192
00:09:43,900 --> 00:09:44,800
grid out, right?

193
00:09:44,800 --> 00:09:46,300
That's what we looked at before.

194
00:09:46,400 --> 00:09:51,400
We grab the quit out of the event and we stick that onto the end,

195
00:09:51,400 --> 00:09:51,700
right?

196
00:09:51,700 --> 00:09:53,200
I mean, there's the username.

197
00:09:53,400 --> 00:09:56,300
And we stick that on there and then we may or may not add a colon

198
00:09:56,300 --> 00:09:58,600
depending on which one we're printing out, right?

199
00:09:58,900 --> 00:09:59,700
And that's it.

200
00:10:00,300 --> 00:10:04,500
So I'm not sure as I think I'm going to step through in the debugger,

201
00:10:04,500 --> 00:10:10,800
I'm not sure why we're getting such a strange result from from these

202
00:10:10,800 --> 00:10:15,100
guys and I don't know if there's something else weird happening.

203
00:10:15,100 --> 00:10:18,300
That's like, that's not the code path or following or if there's some

204
00:10:18,300 --> 00:10:21,700
other thing that I'm missing, that's, you know, that's going to

205
00:10:21,700 --> 00:10:22,400
elucidate it.

206
00:10:22,400 --> 00:10:23,200
But point being at the

207
00:10:23,300 --> 00:10:25,000
Moment, that's why I'm a little confused.

208
00:10:25,200 --> 00:10:27,200
So let's go ahead and take a look.

209
00:10:28,600 --> 00:10:31,400
At what happens when we actually go to Loop through this?

210
00:10:31,400 --> 00:10:33,000
This expect this data block.

211
00:10:33,600 --> 00:10:37,400
So I'm just going to take a look at what these events actually look

212
00:10:37,400 --> 00:10:39,100
like so I can see.

213
00:10:39,800 --> 00:10:45,300
And so here is the the grid so that's actually I mean basically the

214
00:10:45,300 --> 00:10:46,600
problem is Upstream, right?

215
00:10:46,600 --> 00:10:49,700
Because we're already getting render / camera here and we should never

216
00:10:49,700 --> 00:10:52,400
see that like that should just never be seen ever.

217
00:10:52,800 --> 00:10:54,700
So, at this stage.

218
00:10:54,900 --> 00:10:58,100
So somebody when they're actually storing the events,

219
00:10:58,400 --> 00:11:01,700
Is doing something dumb and that's somebody's obviously me because I'm

220
00:11:01,700 --> 00:11:04,500
the only person who touched this code to the best of my knowledge but

221
00:11:04,500 --> 00:11:07,800
point being one part of the code is doing something dumb.

222
00:11:07,800 --> 00:11:11,000
So I want to take a look at what's actually happening here.

223
00:11:11,600 --> 00:11:15,400
When we store those events to see if I can ascertain, what the actual

224
00:11:15,400 --> 00:11:16,000
problem is

225
00:11:17,400 --> 00:11:20,600
So, first, I'm going to look at Sea, try to pick a vent that's

226
00:11:20,600 --> 00:11:21,300
reasonable.

227
00:11:21,800 --> 00:11:22,800
So, let's take a look.

228
00:11:23,200 --> 00:11:25,200
So that's this is totally fine.

229
00:11:25,200 --> 00:11:27,300
Global render, a test weird buffer size.

230
00:11:28,100 --> 00:11:29,100
That's totally fine.

231
00:11:29,100 --> 00:11:34,500
I think, because that's, you know, if we go back over to handmade dot

232
00:11:34,500 --> 00:11:36,200
CPP, you can see that.

233
00:11:36,200 --> 00:11:37,500
That's this one right here.

234
00:11:37,800 --> 00:11:41,700
So, we should be able to see why that one isn't getting labeled with

235
00:11:41,700 --> 00:11:42,500
its own name.

236
00:11:43,000 --> 00:11:44,300
So, let's take a look.

237
00:11:44,400 --> 00:11:46,700
If you step into store event, here we are.

238
00:11:48,700 --> 00:11:50,600
and I guess,

239
00:11:53,400 --> 00:11:56,100
I guess actually we can't step in now.

240
00:11:56,100 --> 00:11:59,900
Now that I think about it, because what actually happens is,

241
00:12:00,800 --> 00:12:02,500
That's already been parsed.

242
00:12:02,900 --> 00:12:05,900
It's been parsed up here with get element from event.

243
00:12:07,100 --> 00:12:10,600
Right, that's actually what's happening, is it gets called up through

244
00:12:10,600 --> 00:12:11,000
here.

245
00:12:12,100 --> 00:12:15,400
And so that's probably the actual problem.

246
00:12:17,000 --> 00:12:18,000
Right.

247
00:12:18,500 --> 00:12:22,800
Yeah, so in get element from event it's going to pass that event down,

248
00:12:23,500 --> 00:12:24,100
right?

249
00:12:24,900 --> 00:12:28,500
And then that's going to do this funny business here.

250
00:12:28,900 --> 00:12:30,200
It's going to take a look.

251
00:12:32,100 --> 00:12:36,200
At this squid, it's going to use the current event grid whatever it

252
00:12:36,200 --> 00:12:36,700
is.

253
00:12:37,600 --> 00:12:40,400
It's going to store that, then it's going to use whatever it parses

254
00:12:40,400 --> 00:12:42,100
out, right?

255
00:12:43,300 --> 00:12:44,300
If that makes sense.

256
00:12:45,100 --> 00:12:47,400
So it's going to do all that and it's going to do the add element to

257
00:12:47,400 --> 00:12:51,000
group which we don't really want it to do, right?

258
00:12:51,000 --> 00:12:53,300
And so this gets back to the thing about these.

259
00:12:53,300 --> 00:12:56,400
These events are not actually stored in there but they still go

260
00:12:56,400 --> 00:12:58,100
through this path for no real reason.

261
00:12:59,300 --> 00:13:02,900
So this is why I say, I wonder if these things need to actually be

262
00:13:04,200 --> 00:13:07,600
parsed more properly because if they're going through one of these

263
00:13:07,600 --> 00:13:11,100
open to one of these open data blocks, we actually.

264
00:13:11,100 --> 00:13:11,400
Yeah.

265
00:13:11,400 --> 00:13:14,000
This this just actually needs to be probably a little more clean.

266
00:13:14,100 --> 00:13:15,900
Let's let's actually pull that out.

267
00:13:15,900 --> 00:13:19,000
So it's easier to debug as well because we're going to have to deal

268
00:13:19,000 --> 00:13:23,100
with it anyway eventually.

269
00:13:23,200 --> 00:13:27,600
So I'm going to go ahead and do get element from event.

270
00:13:27,600 --> 00:13:28,800
I'm going to actually just go ahead and

271
00:13:29,100 --> 00:13:33,400
That out of here entirely and then I'm going to compile and then I'm

272
00:13:33,400 --> 00:13:37,200
going to go see where that's actually used and I'm going to make that

273
00:13:37,200 --> 00:13:40,200
happen on demand a little more, right?

274
00:13:40,500 --> 00:13:41,600
So like this

275
00:13:44,300 --> 00:13:47,600
And that way, when we come down here and we're going to do the storage

276
00:13:47,600 --> 00:13:51,200
element thing at least at this point, now I can have it.

277
00:13:51,500 --> 00:13:55,300
Do the parsing in a place where we can watch, which is, which is

278
00:13:55,300 --> 00:13:56,500
better, right?

279
00:13:58,100 --> 00:13:59,100
And

280
00:14:03,300 --> 00:14:07,400
And I guess what we want to do here is actually say like okay if we

281
00:14:07,400 --> 00:14:09,100
were going to store it in some place.

282
00:14:09,900 --> 00:14:10,400
Yeah.

283
00:14:10,500 --> 00:14:15,800
If we were going to store it somewhere, we should just use that which

284
00:14:15,800 --> 00:14:18,700
normally we would otherwise, you know, fall through to this.

285
00:14:19,000 --> 00:14:20,600
So that's a little bit more.

286
00:14:21,100 --> 00:14:26,500
That's a little bit more saying, I think whoops, that's not right.

287
00:14:33,700 --> 00:14:36,900
All right, and that kind of elucidates why we were having the problem.

288
00:14:37,100 --> 00:14:40,400
So what will happen here is we'll just use this element to store it.

289
00:14:40,400 --> 00:14:41,500
It'll get this.

290
00:14:41,500 --> 00:14:45,700
These events will get stored under that storage element and it will

291
00:14:45,700 --> 00:14:48,900
never actually get its name parsed, right?

292
00:14:48,900 --> 00:14:51,200
That's the actual problem that's happening there.

293
00:14:51,400 --> 00:14:56,100
This event, never actually gets processed in the appropriate way.

294
00:14:58,700 --> 00:14:59,800
So that's actually, I think.

295
00:15:00,000 --> 00:15:01,300
Why we're having this problem?

296
00:15:01,500 --> 00:15:04,300
Or at least it's a big portion of it.

297
00:15:04,300 --> 00:15:04,800
Right?

298
00:15:05,100 --> 00:15:10,700
So when we actually do that parsing and we come through here to look

299
00:15:10,700 --> 00:15:15,800
at this particular element, we still need to be able to do, you know

300
00:15:15,800 --> 00:15:24,000
this operation, we still want to be able to strip out that, that whole

301
00:15:24,000 --> 00:15:26,100
sort of rest of the part of the name.

302
00:15:26,700 --> 00:15:29,700
And so we, you know, we would want to search for, we would want to do

303
00:15:29,700 --> 00:15:29,800
this.

304
00:15:30,000 --> 00:15:32,900
Find last pipe kind of a thing.

305
00:15:33,600 --> 00:15:35,300
And we would want to start the name there.

306
00:15:35,800 --> 00:15:37,900
So I'm going to hack that in for the moment.

307
00:15:37,900 --> 00:15:41,900
But then I think, what this what I kind of think I want to do again to

308
00:15:41,900 --> 00:15:44,300
sort of start simplifying things to continue simplifying.

309
00:15:44,300 --> 00:15:48,300
Things more is, I feel like we just want everything to go into that

310
00:15:48,300 --> 00:15:54,000
hierarchy, so that we don't have this constant problem of, you know,

311
00:15:56,300 --> 00:15:57,600
These things go into Data blocks.

312
00:15:57,600 --> 00:15:59,400
These things don't I'd rather just have it.

313
00:15:59,400 --> 00:16:02,100
So that the data block is just a way of grouping things together.

314
00:16:05,500 --> 00:16:10,300
If that makes sense because I feel like again this is a case of like

315
00:16:10,500 --> 00:16:14,600
yeah there is some reason why we might want to do it this way but are

316
00:16:14,600 --> 00:16:17,700
we really ever going to use that functionality and if we're never

317
00:16:17,700 --> 00:16:21,400
going to use that functionality, then are we just making lives harder

318
00:16:21,400 --> 00:16:21,800
for ourselves?

319
00:16:21,800 --> 00:16:26,500
Every time you want to debug stuff by having it so crazy, right?

320
00:16:28,700 --> 00:16:31,400
Because the debug system, we might want to pop in periodically to add

321
00:16:31,400 --> 00:16:31,700
something.

322
00:16:31,700 --> 00:16:33,900
If you're trying to bug a problem and we want to add something, we

323
00:16:33,900 --> 00:16:36,700
don't want it to be like a huge disaster in here all the time.

324
00:16:37,200 --> 00:16:38,500
I mean, yes, it's only debug code.

325
00:16:38,500 --> 00:16:41,000
We don't have to worry if it's shippable or not because it's not going

326
00:16:41,000 --> 00:16:42,200
to run on end users machines.

327
00:16:42,200 --> 00:16:47,700
But we don't want to leave a huge liability for our own selves in case

328
00:16:47,700 --> 00:16:48,400
we need to use it.

329
00:16:48,400 --> 00:16:48,800
Right?

330
00:16:49,300 --> 00:16:52,800
So that's that's kind of where I'm you know why I'm thinking about

331
00:16:52,800 --> 00:16:53,300
that way.

332
00:16:54,200 --> 00:16:56,900
So yeah, so if we were going to do this then what we would want

333
00:16:57,100 --> 00:16:58,400
Say it's like, oh, okay.

334
00:16:58,600 --> 00:17:00,500
So the event right?

335
00:17:00,500 --> 00:17:02,500
That we actually go to store.

336
00:17:04,099 --> 00:17:07,800
We need that event to actually skip the pipe part.

337
00:17:07,900 --> 00:17:14,900
So we would want to hear do something kind of like let's see for you

338
00:17:14,900 --> 00:17:18,300
know, I don't know.

339
00:17:18,300 --> 00:17:20,200
Event would

340
00:17:22,200 --> 00:17:26,700
and if star Skin equals pipe,

341
00:17:28,600 --> 00:17:32,200
Event grid equals scandals one, something like that.

342
00:17:35,000 --> 00:17:38,000
So I don't actually think that's quite the entirety of it there yet,

343
00:17:38,000 --> 00:17:42,500
but at least now, the event itself is actually moving past the grid

344
00:17:42,500 --> 00:17:46,000
that it was on, so that will actually have it be stored correctly.

345
00:17:46,200 --> 00:17:50,000
So for example, when we come down here to the storage event,

346
00:17:51,500 --> 00:17:52,600
There's that event.

347
00:17:53,000 --> 00:17:56,000
And now it should just be the name, which it is.

348
00:17:56,000 --> 00:17:58,600
So that's at least a good start.

349
00:17:58,700 --> 00:17:59,200
Okay.

350
00:18:00,800 --> 00:18:05,400
So that's thing one and now thing too is when we're grabbing these out

351
00:18:06,200 --> 00:18:11,500
we must not be grabbing the event out of the right place, somehow we

352
00:18:11,500 --> 00:18:17,600
must be grabbing the wrong, actual the wrong, actual piece of

353
00:18:17,600 --> 00:18:21,500
information, when we Loop over the, the open data block.

354
00:18:22,000 --> 00:18:27,000
So here, where we do, our open data block, where we do start with the

355
00:18:27,000 --> 00:18:29,800
the last open data, block and scan across

356
00:18:30,000 --> 00:18:34,200
It we must for whatever reason.

357
00:18:34,500 --> 00:18:36,700
Never not be getting the right.

358
00:18:38,600 --> 00:18:42,000
Events out of here, let me see store.

359
00:18:42,000 --> 00:18:44,900
In fact, you know what happens it's actually store event, that's

360
00:18:44,900 --> 00:18:46,900
causing our problem and right, isn't it?

361
00:18:47,300 --> 00:18:51,900
Because if we take a look at that event, it's probably over writing

362
00:18:51,900 --> 00:18:52,400
the grid.

363
00:18:52,900 --> 00:18:55,000
Yeah, you can see it happening right there.

364
00:18:56,000 --> 00:18:56,300
Right?

365
00:18:56,300 --> 00:18:58,500
So that's the problem, that's the actual problem.

366
00:18:58,800 --> 00:19:02,100
It's taking that element name and we're storing it under this other

367
00:19:02,100 --> 00:19:03,000
element, right?

368
00:19:03,100 --> 00:19:05,900
And it's it's sort of forcing it in there which is not what we

369
00:19:05,900 --> 00:19:06,900
actually wanted.

370
00:19:07,300 --> 00:19:08,000
You know I'm saying.

371
00:19:09,000 --> 00:19:11,700
So that's that's pretty much it right there.

372
00:19:13,500 --> 00:19:14,500
Yeah.

373
00:19:14,500 --> 00:19:16,500
So in fact,

374
00:19:24,300 --> 00:19:26,700
This doesn't quite fix the problem because then we still have the

375
00:19:26,800 --> 00:19:31,000
problem with the other with the the tree elements being wrong.

376
00:19:31,500 --> 00:19:35,300
But that's actually that's actually what was happening, right?

377
00:19:39,300 --> 00:19:44,800
So okay so yeah so basically like you know I just think that that's

378
00:19:44,800 --> 00:19:50,600
still a little bit too janky in my opinion, so I'm I don't know that.

379
00:19:50,600 --> 00:19:53,100
I don't think we want to keep those open data blocks in there.

380
00:19:53,300 --> 00:19:56,100
I think we want to just get rid of the open data blocks and just use

381
00:19:56,100 --> 00:19:57,200
the open data blocks.

382
00:19:57,200 --> 00:20:00,600
I mean still put them in the Stream but we just don't need to store

383
00:20:00,600 --> 00:20:01,900
them, right?

384
00:20:02,500 --> 00:20:06,200
And so I think what we would want to do is leave the store event

385
00:20:06,200 --> 00:20:08,000
happening the way that it's happening.

386
00:20:08,600 --> 00:20:11,300
Now we're always storing under an element and then we can sort of

387
00:20:11,300 --> 00:20:14,800
restore the way that this process worked to something a little more

388
00:20:14,800 --> 00:20:16,100
sane as necessary.

389
00:20:16,600 --> 00:20:20,800
And so for example the way we would do that right as we would say

390
00:20:20,800 --> 00:20:24,700
everybody gets an element so this nonsense never happens anymore.

391
00:20:25,200 --> 00:20:32,000
We always allow the the element to go into its actual place in the

392
00:20:32,000 --> 00:20:32,600
hierarchy.

393
00:20:32,600 --> 00:20:34,400
Like so, right.

394
00:20:34,700 --> 00:20:38,200
But what we need to do is have a way of well I probably shouldn't I

395
00:20:38,200 --> 00:20:38,400
guess.

396
00:20:38,500 --> 00:20:38,700
S.

397
00:20:40,800 --> 00:20:41,600
Where's my?

398
00:20:43,500 --> 00:20:44,000
There we go.

399
00:20:46,100 --> 00:20:50,100
So I still want this code.

400
00:20:52,900 --> 00:20:56,900
in the sense that I still want to know that I'm in an open data block

401
00:20:56,900 --> 00:20:59,700
because I want that data blocks element to be

402
00:21:00,000 --> 00:21:02,300
Parent, right?

403
00:21:03,200 --> 00:21:05,900
But I don't want to do anything else.

404
00:21:08,400 --> 00:21:12,100
I just want to basically use whatever it was as my initial parent,

405
00:21:13,000 --> 00:21:13,700
that's it.

406
00:21:14,800 --> 00:21:19,600
So it's going to be more like debug element initial parents or like

407
00:21:19,600 --> 00:21:21,200
parents like that.

408
00:21:21,900 --> 00:21:24,700
And then we're going to say like okay if it's the first open data

409
00:21:24,700 --> 00:21:29,600
block, then the parent is whatever that data blocks element was in the

410
00:21:29,600 --> 00:21:30,100
tree.

411
00:21:31,100 --> 00:21:34,300
And otherwise it's going to remain zero.

412
00:21:36,600 --> 00:21:37,600
then when we do,

413
00:21:41,700 --> 00:21:47,300
Well, I guess I got a copy that here site, deleted it for no reason.

414
00:21:47,900 --> 00:21:51,900
Then when we actually store the sky, what we need to do is call get

415
00:21:51,900 --> 00:21:55,600
element from event and now we want to be able to pass that parent in

416
00:21:56,000 --> 00:22:00,000
and so you can kind of see up here in get element from event, right?

417
00:22:00,900 --> 00:22:02,200
Where we call down through here.

418
00:22:02,700 --> 00:22:05,800
And we say, oh, you know, if we didn't find one, we've got to make

419
00:22:05,800 --> 00:22:07,500
this this element, right?

420
00:22:07,500 --> 00:22:11,100
And then we do add element to group and we, you know, we do that get

421
00:22:11,100 --> 00:22:11,300
high.

422
00:22:11,400 --> 00:22:14,500
Group from name and we're passing the route group here.

423
00:22:14,700 --> 00:22:20,100
What we want to do instead is we want to be able to actually use the

424
00:22:20,100 --> 00:22:25,100
group of that previous debug element that previous parent, right?

425
00:22:26,700 --> 00:22:30,000
And so, it'd be like this, right?

426
00:22:30,100 --> 00:22:34,100
We'd say get element from from event and we would have liked you bud

427
00:22:34,100 --> 00:22:37,900
variable group here and this is the parent group.

428
00:22:42,000 --> 00:22:46,500
like so and so when we're actually inserting this, this thing in here

429
00:22:46,800 --> 00:22:50,800
we would just say like oh this is the parent and

430
00:22:52,900 --> 00:22:56,300
I guess we would probably also say like okay if you don't specify one

431
00:22:56,600 --> 00:23:02,000
you know if there's no parent then we'll just default to inserting it

432
00:23:02,200 --> 00:23:03,300
into that route group.

433
00:23:07,400 --> 00:23:11,600
Like so now the problem with that is just that I don't actually know

434
00:23:11,600 --> 00:23:13,700
where to get that route group out of here, right?

435
00:23:14,600 --> 00:23:20,600
Because gross, I do remember, but if we take a look at the, this thing

436
00:23:20,600 --> 00:23:24,500
here, where we get this first open data, block, I'm assuming that we

437
00:23:24,500 --> 00:23:25,600
have a way.

438
00:23:26,500 --> 00:23:32,000
If I go to debug, uh, I'm assuming that there's some way their of

439
00:23:34,700 --> 00:23:35,900
Let's see where the open data by.

440
00:23:37,200 --> 00:23:39,600
I'm assuming that there's some information about what the group

441
00:23:39,600 --> 00:23:40,400
actually is.

442
00:23:40,800 --> 00:23:45,500
So yeah, like right here that group right there, that's what I

443
00:23:45,500 --> 00:23:46,500
actually want.

444
00:23:46,700 --> 00:23:49,500
So, rather than storing the element, I don't care about the element.

445
00:23:49,500 --> 00:23:54,500
I actually just want that and this is actually going to be a debug.

446
00:23:55,100 --> 00:23:57,900
Oops, debug variable group.

447
00:23:59,000 --> 00:23:59,500
Like so.

448
00:24:01,900 --> 00:24:05,300
So that seems like probably more what we want to do.

449
00:24:06,400 --> 00:24:06,800
Okay.

450
00:24:08,700 --> 00:24:14,200
Alright, so of course Apparently that is not

451
00:24:15,500 --> 00:24:16,900
Working at all.

452
00:24:18,100 --> 00:24:21,500
Probably because if we look here, we don't actually ever update that

453
00:24:21,700 --> 00:24:22,300
right

454
00:24:24,900 --> 00:24:28,500
So, we probably just need that to be updated here and that's probably

455
00:24:28,500 --> 00:24:34,100
it, I would assume, right?

456
00:24:34,100 --> 00:24:35,200
Let's take a look.

457
00:24:39,400 --> 00:24:41,300
So inside.

458
00:24:43,300 --> 00:24:44,200
Dubai government.

459
00:24:45,500 --> 00:24:46,600
Here's debug element.

460
00:24:48,100 --> 00:24:52,200
So we've got our debug element, which we are and we got our open.

461
00:24:52,200 --> 00:24:55,400
What happens during allocate debug block

462
00:25:04,500 --> 00:25:04,800
Yes.

463
00:25:04,800 --> 00:25:07,300
So we never set that group at all, right?

464
00:25:07,700 --> 00:25:12,100
And we would want to set that group when we do get element from event

465
00:25:12,100 --> 00:25:16,900
and we get this back, we need to record what that group actually was,

466
00:25:17,000 --> 00:25:17,900
is the problem.

467
00:25:17,900 --> 00:25:20,700
And at the moment, we're not doing that, right?

468
00:25:21,600 --> 00:25:24,200
And we would, we need to find that out.

469
00:25:24,200 --> 00:25:27,200
So when we do get element from event,

470
00:25:28,600 --> 00:25:32,000
Our problem is that we're losing that piece of state.

471
00:25:32,000 --> 00:25:38,100
So we come down here and when we actually do this, get group for

472
00:25:38,100 --> 00:25:41,200
hierarchical name and then we do add element to group.

473
00:25:43,000 --> 00:25:47,500
When we're adding the, when we're adding that debug Block, it's

474
00:25:47,500 --> 00:25:51,300
getting added as a regular element, which is, you know, not what we

475
00:25:51,300 --> 00:25:52,100
actually want.

476
00:25:52,100 --> 00:25:55,600
And in fact now that I think about it, I suppose we don't really ever

477
00:25:55,600 --> 00:25:57,500
want to add the debug block as a first.

478
00:25:57,600 --> 00:25:58,700
Class citizen anyway.

479
00:25:59,000 --> 00:26:04,300
So I suppose it's really just going to be this when we when we do

480
00:26:04,300 --> 00:26:04,800
that.

481
00:26:04,900 --> 00:26:10,400
So for open debug block, I almost think I guess we don't ever actually

482
00:26:10,400 --> 00:26:12,900
do any of this right?

483
00:26:14,200 --> 00:26:21,500
We don't insert it at all we strictly do that right?

484
00:26:21,600 --> 00:26:27,300
And so when we call you know, when we like I guess we just don't even

485
00:26:27,300 --> 00:26:27,500
do.

486
00:26:27,700 --> 00:26:28,900
This right?

487
00:26:29,200 --> 00:26:35,500
We literally just do the part where we get the name out of the sky,

488
00:26:36,100 --> 00:26:38,900
right, which would require us to have that parsing.

489
00:26:38,900 --> 00:26:41,200
Pulled out a little bit but that's really not a problem.

490
00:26:42,400 --> 00:26:45,600
So when we call, when we do open data block, we would get whatever

491
00:26:45,600 --> 00:26:46,300
that harco.

492
00:26:46,300 --> 00:26:53,900
Go, that hierarchical group name was and then we would call open it.

493
00:26:53,900 --> 00:26:57,700
Open the debug block, and I guess that open debug block.

494
00:26:57,700 --> 00:26:59,900
It never would actually have an element

495
00:27:00,000 --> 00:27:00,200
Here.

496
00:27:00,200 --> 00:27:03,200
Right there would actually be no element because we wouldn't ever add

497
00:27:03,200 --> 00:27:04,300
the element to the tree.

498
00:27:06,200 --> 00:27:07,600
Because there's nothing to add.

499
00:27:09,000 --> 00:27:11,900
And so it would just be 0, right?

500
00:27:12,200 --> 00:27:16,700
Then inside the open debug block, when we could create an element.

501
00:27:16,700 --> 00:27:19,100
If we wanted to, we just don't really have any need to.

502
00:27:20,800 --> 00:27:26,000
So, inside the the debug block there, we would just say, like, oh,

503
00:27:26,000 --> 00:27:30,500
okay, the group for this, debug block is whatever that group was that

504
00:27:30,500 --> 00:27:35,200
we that we insert in here, which I guess we have to actually do, like,

505
00:27:35,200 --> 00:27:35,800
an ad,

506
00:27:36,100 --> 00:27:36,900
Ad group.

507
00:27:38,400 --> 00:27:40,600
Let's see, get her goal.

508
00:27:45,000 --> 00:27:46,200
Is it get group?

509
00:27:47,600 --> 00:27:48,800
For, there it is.

510
00:27:50,700 --> 00:27:53,500
So we're just going to do, get a create group with name.

511
00:27:55,300 --> 00:27:55,800
Right.

512
00:28:06,200 --> 00:28:07,200
Don't know what's going on there.

513
00:28:07,300 --> 00:28:11,800
All right, so that's we know what the parent is.

514
00:28:13,200 --> 00:28:16,700
This is the actual name that we're going to use and that we know as

515
00:28:16,700 --> 00:28:17,200
well.

516
00:28:18,100 --> 00:28:21,100
So that's pretty easy, as I guess.

517
00:28:21,400 --> 00:28:27,400
This is the size of the name so it's more like that, right?

518
00:28:27,600 --> 00:28:30,500
And so all we need to do here is when we actually parse we actually

519
00:28:30,500 --> 00:28:34,300
need that bit of name, parsing that pulls out the information.

520
00:28:34,300 --> 00:28:35,500
We need that sort of to be

521
00:28:35,700 --> 00:28:40,000
A standalone unit which is pretty trivial, right?

522
00:28:42,200 --> 00:28:44,000
It's just going to be something like that.

523
00:28:45,000 --> 00:28:49,400
So okay so here is named length here is name or whatever.

524
00:28:49,700 --> 00:28:55,500
Well actually I'll just go ahead and pull that stuff out so that is

525
00:28:55,500 --> 00:28:56,300
right here.

526
00:29:01,800 --> 00:29:05,400
And what we need is all of this, right?

527
00:29:06,600 --> 00:29:08,800
And in fact, we could even keep the hash value in there as well.

528
00:29:08,800 --> 00:29:10,300
Because why not, right?

529
00:29:11,500 --> 00:29:13,300
So we need something like this.

530
00:29:13,300 --> 00:29:17,700
Debug parse name parce que bed parse name.

531
00:29:19,100 --> 00:29:25,100
And in here we would just pass whatever the the name was

532
00:29:27,600 --> 00:29:29,300
And then we would run this thing on it.

533
00:29:33,300 --> 00:29:33,700
Like so.

534
00:29:35,500 --> 00:29:37,100
So pretty, pretty straightforward.

535
00:29:40,500 --> 00:29:40,800
Yeah.

536
00:29:45,600 --> 00:29:46,800
So we just say, all right.

537
00:29:47,900 --> 00:29:48,800
There's the results.

538
00:29:53,900 --> 00:29:57,100
And now, when we do the scan,

539
00:29:58,800 --> 00:29:59,800
instead, we're always going to

540
00:30:00,000 --> 00:30:02,700
Right into the result pipe count.

541
00:30:02,800 --> 00:30:06,800
We don't need to store because that's only used in here so that can

542
00:30:06,800 --> 00:30:10,800
stay everything else can happen in here.

543
00:30:12,200 --> 00:30:12,800
Like so.

544
00:30:17,100 --> 00:30:21,400
So now when we do this little, this little doodad, we can just say

545
00:30:21,400 --> 00:30:27,500
like okay we've got a debug parse name and that's going to be equal to

546
00:30:27,500 --> 00:30:31,800
debug parse name of the event grid.

547
00:30:31,800 --> 00:30:34,600
Now we've got that person a man anywhere in here that used to need to

548
00:30:34,600 --> 00:30:35,100
use that.

549
00:30:35,100 --> 00:30:38,900
It can just use parse name, dot whatever the thing was and that's all

550
00:30:38,900 --> 00:30:40,000
good, right.

551
00:30:41,600 --> 00:30:45,700
And I think that's all we really need for that.

552
00:30:47,100 --> 00:30:54,400
Let's see, that's got to be great again and again, there we go.

553
00:30:56,400 --> 00:30:57,100
Hash value.

554
00:30:57,100 --> 00:30:59,900
Of course, is now in parsed name.

555
00:31:02,300 --> 00:31:03,900
And okay, so now we're down here.

556
00:31:04,400 --> 00:31:05,700
So now we can do the same thing.

557
00:31:10,700 --> 00:31:11,700
And so the event.

558
00:31:11,700 --> 00:31:12,900
Glad that we get here.

559
00:31:12,900 --> 00:31:16,800
We can parse and now we know everything that we needed to know about

560
00:31:16,800 --> 00:31:16,900
it.

561
00:31:16,900 --> 00:31:20,600
We could also pull this out which we might want to do but that's

562
00:31:20,600 --> 00:31:21,300
separate issue.

563
00:31:21,600 --> 00:31:26,600
And so here we can just say, you know, whatever the name was we can.

564
00:31:26,700 --> 00:31:28,700
And in fact we could actually just include

565
00:31:31,200 --> 00:31:32,100
It right in there.

566
00:31:34,300 --> 00:31:35,100
So let's do that.

567
00:31:41,100 --> 00:31:41,600
Right.

568
00:31:42,800 --> 00:31:43,900
So here we've got

569
00:31:45,200 --> 00:31:49,600
name length and name and people can just ignore them if they don't

570
00:31:49,600 --> 00:31:53,100
want them and then we can just say like at the end of this.

571
00:31:53,100 --> 00:31:56,500
Okay so you know the result that name length

572
00:31:57,800 --> 00:32:01,700
And the result that name, the result that name is obviously just

573
00:32:01,700 --> 00:32:03,200
wherever the grid started.

574
00:32:05,100 --> 00:32:06,500
plus name starts at

575
00:32:12,800 --> 00:32:16,200
And then the name length is just going to be whatever the total length

576
00:32:16,200 --> 00:32:17,500
of the string was right?

577
00:32:17,500 --> 00:32:20,000
So scan, obviously ends the string.

578
00:32:20,000 --> 00:32:20,300
In fact.

579
00:32:20,300 --> 00:32:21,900
I guess I got to pull that out here, right?

580
00:32:24,800 --> 00:32:28,800
Scan ends the string at this point, it's sitting at the end.

581
00:32:29,800 --> 00:32:34,500
So if we were to take scan - quid

582
00:32:36,200 --> 00:32:37,400
That's the total length.

583
00:32:38,700 --> 00:32:45,200
So that subtracted away and we subtract away where the name starts at

584
00:32:45,200 --> 00:32:49,900
gives us however long the name was so that's, you know, that's that.

585
00:32:52,300 --> 00:32:55,400
Obviously, we got to tell it that we're never going to have strings

586
00:32:55,400 --> 00:32:59,400
that are over 4 billion characters, long, always good to double check.

587
00:33:00,100 --> 00:33:02,900
And then we just have to finish up this thing.

588
00:33:02,900 --> 00:33:05,000
So all right, get group, the parent here.

589
00:33:05,000 --> 00:33:07,200
It's going to be the debug State Route group

590
00:33:08,800 --> 00:33:09,900
Actually, that's not true.

591
00:33:10,800 --> 00:33:11,800
Now that I think about it.

592
00:33:16,100 --> 00:33:18,100
Because aren't these things supposed to Nest?

593
00:33:18,900 --> 00:33:21,800
So technically, it's actually this

594
00:33:23,300 --> 00:33:23,900
Right.

595
00:33:27,000 --> 00:33:29,500
So I think we actually want to do something more like this.

596
00:33:32,800 --> 00:33:38,000
You know I'm saying because that way we'd say oh debug State Route

597
00:33:38,000 --> 00:33:40,900
group, that's the default parent group.

598
00:33:46,900 --> 00:33:50,300
And I think we want them both to go in there, right?

599
00:33:50,400 --> 00:33:55,500
So we would want this to go into default parent group and we would

600
00:33:55,500 --> 00:33:57,900
want this to do the same, right?

601
00:34:00,700 --> 00:34:01,500
I mean, that's

602
00:34:04,500 --> 00:34:05,000
right.

603
00:34:09,000 --> 00:34:09,900
Let's see here.

604
00:34:11,699 --> 00:34:12,300
Fault.

605
00:34:17,500 --> 00:34:20,199
Element store event, Element.

606
00:34:20,199 --> 00:34:21,400
No, no, no.

607
00:34:21,400 --> 00:34:22,600
I don't want to store anything there.

608
00:34:22,600 --> 00:34:24,400
Don't store do not store.

609
00:34:24,500 --> 00:34:25,300
Does not store.

610
00:34:25,300 --> 00:34:26,199
Do not store.

611
00:34:30,600 --> 00:34:31,300
All right.

612
00:34:32,900 --> 00:34:36,100
So now everything should be getting stored in the hierarchy.

613
00:34:36,100 --> 00:34:39,600
Of course, I may have messed something up and in fact, I specifically,

614
00:34:39,600 --> 00:34:44,800
did I mess something up as it turns out, we're just getting called

615
00:34:44,800 --> 00:34:45,199
from

616
00:34:47,199 --> 00:34:48,699
Wait, what are you doing?

617
00:34:48,699 --> 00:34:49,699
Calling call from here?

618
00:34:50,199 --> 00:34:52,300
Okay, that's storing the clothes data block.

619
00:34:52,900 --> 00:34:54,500
Why are you starting the closed beta block?

620
00:34:54,800 --> 00:34:56,300
Nobody asked you to do that either.

621
00:34:56,699 --> 00:35:00,700
Of course, I want to know why it doesn't work, but I don't actually

622
00:35:00,700 --> 00:35:02,600
want you to do that for the record.

623
00:35:05,600 --> 00:35:16,400
You take a look at the elements elements is null which would be why so

624
00:35:16,400 --> 00:35:20,300
I don't know what's wrong with that first open data block is here.

625
00:35:27,000 --> 00:35:28,100
Oh, because we don't store that.

626
00:35:28,100 --> 00:35:28,900
Yeah, right.

627
00:35:29,200 --> 00:35:30,200
We actually remove that.

628
00:35:30,200 --> 00:35:31,200
That's totally valid.

629
00:35:31,200 --> 00:35:33,100
It's gone now so that can't happen.

630
00:35:33,700 --> 00:35:34,900
So that's fine, don't care.

631
00:35:35,900 --> 00:35:36,500
That goes away.

632
00:35:44,000 --> 00:35:44,900
Opengl.

633
00:35:48,400 --> 00:35:50,700
All right, so getting there.

634
00:35:52,600 --> 00:35:53,600
Almost there.

635
00:35:53,800 --> 00:35:59,100
But you notice we have a weirdness here with this whole situation and

636
00:35:59,100 --> 00:35:59,600
I actually

637
00:36:00,000 --> 00:36:03,100
Thank God that made that may actually be a data bug.

638
00:36:04,500 --> 00:36:05,900
Now that I think about it, actually.

639
00:36:09,900 --> 00:36:12,500
That may actually be us being stupid.

640
00:36:12,700 --> 00:36:17,200
So in here, this is not right.

641
00:36:17,200 --> 00:36:19,400
I mean that's that's why that happened.

642
00:36:21,400 --> 00:36:21,900
And

643
00:36:24,700 --> 00:36:25,600
Yeah.

644
00:36:25,600 --> 00:36:28,100
Where's the other ones platform?

645
00:36:28,300 --> 00:36:36,100
So that's in win32 and made us weak a platform controls or forms /

646
00:36:36,100 --> 00:36:36,800
controls.

647
00:36:37,800 --> 00:36:38,800
So that's

648
00:36:42,200 --> 00:36:43,600
Well, that should work.

649
00:36:44,000 --> 00:36:45,600
So that's a, that's a screw up.

650
00:36:45,800 --> 00:36:47,600
So we should go fix that.

651
00:36:48,800 --> 00:36:52,700
But render cameras is right now.

652
00:36:52,700 --> 00:36:56,600
Okay, so let's go ahead and flip back here.

653
00:37:02,000 --> 00:37:05,700
And we should now be at the point where we only have the ones that

654
00:37:05,700 --> 00:37:08,900
don't expand out like they should, right?

655
00:37:12,400 --> 00:37:15,700
And let's go ahead and double check here to this part works.

656
00:37:17,600 --> 00:37:21,800
where we can actually look at the simulation entity and we can

657
00:37:28,300 --> 00:37:29,900
Although why we can't view bitmaps in here?

658
00:37:29,900 --> 00:37:30,400
I don't know.

659
00:37:30,900 --> 00:37:32,000
So take a look at that too.

660
00:37:35,600 --> 00:37:39,400
It's kind of nice to be able to view debug stuff, right?

661
00:37:39,400 --> 00:37:42,500
Like there's our, there's our velocity.

662
00:37:43,700 --> 00:37:45,700
Right X.

663
00:37:45,900 --> 00:37:47,100
There's the last reason why.

664
00:37:48,500 --> 00:37:49,100
All right.

665
00:37:50,800 --> 00:37:51,700
Facing Direction.

666
00:37:56,500 --> 00:37:57,500
There's me, jumping.

667
00:37:59,700 --> 00:38:01,600
Don't know why jump is still enabled this game.

668
00:38:01,900 --> 00:38:03,200
It's not supposed to let you jump.

669
00:38:04,800 --> 00:38:05,900
Probably should remove that.

670
00:38:06,400 --> 00:38:07,300
We'll get to that soon.

671
00:38:07,300 --> 00:38:10,700
I guess we'll start to engage play coding pretty soon, so I'll get to

672
00:38:11,100 --> 00:38:13,000
go through and clean all that code at.

673
00:38:13,800 --> 00:38:13,900
All?

674
00:38:13,900 --> 00:38:15,400
Right, so that's good.

675
00:38:17,100 --> 00:38:19,600
But again, not pleased with this.

676
00:38:19,600 --> 00:38:21,400
This is not working properly.

677
00:38:21,600 --> 00:38:26,700
So when we do our name parsing here and we do get group for

678
00:38:26,700 --> 00:38:27,700
hierarchical name.

679
00:38:27,900 --> 00:38:31,000
I don't understand why it's not creating two links down, Whites

680
00:38:31,000 --> 00:38:31,700
Whites, not W.

681
00:38:31,700 --> 00:38:32,500
Expanding

682
00:38:34,500 --> 00:38:35,500
so, that's

683
00:38:37,800 --> 00:38:39,200
That's a little weird.

684
00:38:43,700 --> 00:38:46,900
I guess the reason is because, when we do that, get group for our code

685
00:38:46,900 --> 00:38:51,400
name, we don't then remove the slashes, right?

686
00:38:51,400 --> 00:38:52,400
From this thing.

687
00:38:54,100 --> 00:38:58,700
So, that actually is probably why now that I think about it.

688
00:39:00,800 --> 00:39:06,700
we would need to go find the last / in the name at that point, and

689
00:39:06,700 --> 00:39:12,300
move the pointer forward to it, but just to double-check

690
00:39:16,400 --> 00:39:21,800
That's not quite correct right now.

691
00:39:21,800 --> 00:39:22,600
It is correct.

692
00:39:23,000 --> 00:39:23,900
That's correct.

693
00:39:24,800 --> 00:39:29,800
All right so when we do get group for hierarchical name, what I think

694
00:39:29,800 --> 00:39:34,600
I actually want to do here is is just make a slight modification to

695
00:39:34,600 --> 00:39:35,400
that function.

696
00:39:35,800 --> 00:39:42,400
So if I go up to get group for hierarchical name and we look at how

697
00:39:42,400 --> 00:39:44,200
that's working, where is that?

698
00:39:45,800 --> 00:39:46,700
Group 4.

699
00:39:50,800 --> 00:39:54,100
so if I mean, get group for hierarchical name, what I want to do here

700
00:39:54,100 --> 00:39:57,700
is say like, okay, instead of saying, if for a separator, I want to

701
00:39:57,700 --> 00:39:59,900
kind of always do this, actually,

702
00:40:02,800 --> 00:40:03,600
If that makes sense.

703
00:40:04,200 --> 00:40:06,800
So I want to do something where I say like oh okay,

704
00:40:10,100 --> 00:40:11,900
It's really that.

705
00:40:12,200 --> 00:40:16,000
I want to always create that all the way down the tree.

706
00:40:18,000 --> 00:40:20,400
I just don't want to continue going hierarchically if there were no

707
00:40:20,400 --> 00:40:21,400
more separators.

708
00:40:22,100 --> 00:40:27,700
And so this can be if for a separator or create entire tree or

709
00:40:27,700 --> 00:40:31,600
something or create terminal, right?

710
00:40:31,700 --> 00:40:35,300
And then so when we call this, we can just say, oh, create terminal.

711
00:40:37,900 --> 00:40:39,100
And then, that way.

712
00:40:40,800 --> 00:40:43,000
It's easier for us to do.

713
00:40:46,100 --> 00:40:52,200
So yeah, so when we do this and we're creating an element, normally we

714
00:40:52,200 --> 00:40:55,900
don't want to do that but when we're creating one of these guys, we do

715
00:40:55,900 --> 00:40:56,900
want to do that.

716
00:40:58,400 --> 00:41:03,700
And then we don't really do a parent group anymore, it's not a parent

717
00:41:03,700 --> 00:41:05,500
group, it's actually the group.

718
00:41:07,000 --> 00:41:11,200
I believe and so then when we set the group, we don't actually do

719
00:41:11,200 --> 00:41:11,800
that.

720
00:41:12,800 --> 00:41:13,000
Right.

721
00:41:13,000 --> 00:41:17,000
So then we just let that function do what it's doing and then it'll

722
00:41:17,000 --> 00:41:21,900
automatically strip off that / for us, I believe, or we could crash

723
00:41:21,900 --> 00:41:25,000
the program because well it's not, I guess we're not Crossing room.

724
00:41:25,000 --> 00:41:28,300
We could get an assertion, which would be always fine.

725
00:41:29,100 --> 00:41:30,600
Everyone loves an assertion.

726
00:41:31,300 --> 00:41:33,700
So what happened there?

727
00:41:34,300 --> 00:41:34,700
Oops.

728
00:41:35,800 --> 00:41:36,300
Go back.

729
00:41:37,300 --> 00:41:40,900
So, yeah, when we create the debug block here,

730
00:41:43,900 --> 00:41:46,900
Going to rearrange this code a little bit when I create the debug

731
00:41:46,900 --> 00:41:47,500
block.

732
00:41:48,900 --> 00:41:49,600
That poops.

733
00:41:57,300 --> 00:41:59,700
That presumably should.

734
00:42:00,000 --> 00:42:01,100
I've changed anything.

735
00:42:01,300 --> 00:42:06,500
So I believe the only thing that we're looking at here is really going

736
00:42:06,500 --> 00:42:08,200
to be that change.

737
00:42:08,200 --> 00:42:10,000
I made to get group for hierarchical name.

738
00:42:12,700 --> 00:42:14,700
And so for that,

739
00:42:17,700 --> 00:42:18,700
why?

740
00:42:22,700 --> 00:42:26,800
wonder what's happening there when we get a create the first separator

741
00:42:26,800 --> 00:42:27,700
- name,

742
00:42:30,100 --> 00:42:31,500
so that's the problem right there.

743
00:42:32,700 --> 00:42:33,300
Right?

744
00:42:33,800 --> 00:42:35,900
The length computation is going to be wrong.

745
00:42:36,900 --> 00:42:41,700
So what we want to do there is essentially say Okay, first operator is

746
00:42:41,700 --> 00:42:44,100
0 when we come out of here.

747
00:42:44,100 --> 00:42:50,500
So really what we want to do is say when we come in here, if we don't

748
00:42:50,500 --> 00:42:54,700
have, if the first separator was not set, it's just going to point to

749
00:42:54,700 --> 00:42:55,700
the beginning of the string.

750
00:42:57,100 --> 00:42:57,700
Right.

751
00:42:58,200 --> 00:43:02,800
Because that way, we would create the full name at that point, or I

752
00:43:02,800 --> 00:43:05,000
should say the end of the string, right?

753
00:43:05,100 --> 00:43:10,600
So it's basically like scan is going to be for a separator and if that

754
00:43:10,600 --> 00:43:12,200
makes any sense like this,

755
00:43:19,200 --> 00:43:19,700
There we go.

756
00:43:29,400 --> 00:43:30,100
What?

757
00:43:35,300 --> 00:43:39,600
All right, so I admit that, that was not that was not brilliant.

758
00:43:40,000 --> 00:43:41,000
That was not great.

759
00:43:41,000 --> 00:43:46,000
Because of course since we also use that to do the recursive, check

760
00:43:46,700 --> 00:43:47,300
you know.

761
00:43:48,100 --> 00:43:50,500
Yeah that's going to go on forever, right?

762
00:43:50,500 --> 00:43:51,900
Just straight on forever.

763
00:43:54,100 --> 00:43:55,500
So I think we actually want this.

764
00:44:04,200 --> 00:44:05,500
Probably makes more sense.

765
00:44:10,900 --> 00:44:15,500
So in the case, where we do have a first separator, then we can just

766
00:44:15,500 --> 00:44:18,200
use the name length that we were using before.

767
00:44:21,500 --> 00:44:22,900
But in the case, where we don't,

768
00:44:24,500 --> 00:44:29,300
then we can use the name length that we were Computing, the other way.

769
00:44:29,800 --> 00:44:31,600
So that's just the same exact thing.

770
00:44:34,700 --> 00:44:35,700
But it's the whole screen.

771
00:44:52,000 --> 00:44:53,000
Not quite.

772
00:44:57,400 --> 00:44:59,800
Subgroup is still getting wickets returned here.

773
00:45:01,800 --> 00:45:02,800
Results.

774
00:45:07,500 --> 00:45:08,400
Let's get.

775
00:45:13,200 --> 00:45:16,100
This should actually be result here as well.

776
00:45:18,600 --> 00:45:22,800
We want to take whichever result like if we created a group, we want

777
00:45:23,000 --> 00:45:25,300
that to be the result.

778
00:45:25,300 --> 00:45:25,800
Right?

779
00:45:33,700 --> 00:45:37,200
That's what we actually wanted because we always need to return

780
00:45:37,200 --> 00:45:37,600
something.

781
00:45:37,600 --> 00:45:39,600
Otherwise the group won't have anything in it.

782
00:45:41,300 --> 00:45:42,800
So, I think we're good.

783
00:45:43,800 --> 00:45:45,900
That looks like everything that I wanted.

784
00:45:46,800 --> 00:45:47,600
Right.

785
00:45:48,700 --> 00:45:49,700
Everybody's there.

786
00:45:51,500 --> 00:45:54,200
And so now I don't really remember.

787
00:45:54,700 --> 00:45:59,000
I mean, that's obviously all working properly, but I don't really

788
00:45:59,000 --> 00:46:04,100
remember why we don't have editing for these guys because I thought we

789
00:46:04,100 --> 00:46:07,100
did have anything for those guys at least at one point.

790
00:46:07,300 --> 00:46:14,100
So I'm not sure why those debug values aren't getting edited in are

791
00:46:14,100 --> 00:46:16,600
not able to be edited, if that makes sense.

792
00:46:17,200 --> 00:46:20,900
I also think that now are open debug block stuff can get ganked.

793
00:46:21,100 --> 00:46:22,800
Here, so let's just get rid of that.

794
00:46:28,700 --> 00:46:29,600
Where's that at?

795
00:46:32,700 --> 00:46:35,900
No, no, don't do it.

796
00:46:36,200 --> 00:46:36,800
No.

797
00:46:37,900 --> 00:46:41,000
I can't, I didn't want to stop programming right now.

798
00:46:44,600 --> 00:46:46,600
Can't you see mr.

799
00:46:46,600 --> 00:46:49,800
Five-minute warning that I'm right in the middle of something.

800
00:46:50,700 --> 00:46:52,000
What is wrong with you?

801
00:46:53,000 --> 00:46:58,400
So yes, so this stuff can go away and here in

802
00:47:00,400 --> 00:47:04,100
This code I think can just get get Vaped right back and just go away.

803
00:47:04,100 --> 00:47:04,700
Goodbye.

804
00:47:09,100 --> 00:47:10,600
I think that's all there is to it.

805
00:47:20,400 --> 00:47:21,300
So that's good.

806
00:47:21,700 --> 00:47:25,400
So now it's also take a look, why can we not edit these things?

807
00:47:25,400 --> 00:47:31,700
So when we come through here and we create one of these guys, right?

808
00:47:33,400 --> 00:47:35,200
We say, default interaction

809
00:47:36,300 --> 00:47:38,800
for this thing, but

810
00:47:40,000 --> 00:47:44,600
We're not actually getting any interaction and so I don't know why

811
00:47:44,700 --> 00:47:49,000
like, is there a reason why Otto modify variable is not actually doing

812
00:47:49,000 --> 00:47:50,200
anything for this type?

813
00:47:50,900 --> 00:47:53,200
I mean it should be a be 32, right?

814
00:47:53,200 --> 00:47:55,300
So it should be setting it to toggle value.

815
00:47:55,400 --> 00:47:56,200
I would think

816
00:47:59,600 --> 00:47:59,800
but,

817
00:48:00,000 --> 00:48:01,500
Is apparently not the case.

818
00:48:02,900 --> 00:48:03,600
You know, I'm saying.

819
00:48:04,000 --> 00:48:05,700
So for some reason,

820
00:48:07,600 --> 00:48:11,800
Auto modify variable is refusing to modify these variables.

821
00:48:12,300 --> 00:48:13,100
Is that?

822
00:48:15,100 --> 00:48:17,300
Why is that I asked you?

823
00:48:18,100 --> 00:48:21,300
What is the problem here is ab32.

824
00:48:21,900 --> 00:48:24,000
I believe these things are be 32s.

825
00:48:28,800 --> 00:48:29,700
But maybe they're not.

826
00:48:31,100 --> 00:48:31,500
Right?

827
00:48:31,600 --> 00:48:34,800
It could just be coming through as a youth s32 because that's what it

828
00:48:34,800 --> 00:48:35,100
be.

829
00:48:35,100 --> 00:48:37,400
That's what it would crack, the type to

830
00:48:41,400 --> 00:48:42,600
Let me take a quick look.

831
00:48:43,500 --> 00:48:44,800
Oh wait, I'm in the right file already.

832
00:48:47,000 --> 00:48:53,000
So when we do debug set event value, you can see here, yeah, it's

833
00:48:53,000 --> 00:48:56,600
never going to set it because it doesn't know that it's a Boolean,

834
00:48:57,400 --> 00:48:58,000
right?

835
00:48:58,400 --> 00:48:59,800
It doesn't know that it's a Boolean.

836
00:49:00,200 --> 00:49:03,500
So what we really need here is a way to clue it in because it's not a

837
00:49:03,500 --> 00:49:05,200
real type, right?

838
00:49:05,400 --> 00:49:08,500
Because C++ is awesome and always does everything wrong.

839
00:49:08,600 --> 00:49:16,500
So what we have to do is we have to tell it manually that we wanted

840
00:49:16,500 --> 00:49:16,600
this.

841
00:49:16,800 --> 00:49:18,600
Thing to be.

842
00:49:21,100 --> 00:49:23,100
A Boolean, right?

843
00:49:23,500 --> 00:49:25,100
That's what we actually needed to do.

844
00:49:25,800 --> 00:49:31,700
So if we do it, if we do it like this, where we say, like okay,

845
00:49:38,500 --> 00:49:43,000
Set the value to be the value and set the debug type to be ab32.

846
00:49:43,300 --> 00:49:47,600
Then I think we would actually get it set to the proper value.

847
00:49:49,400 --> 00:49:49,900
Right?

848
00:49:50,000 --> 00:49:50,600
I think.

849
00:49:51,300 --> 00:49:55,700
And so now if I went in here to handmade dot CPP and said, oh, like

850
00:49:55,700 --> 00:49:58,300
this is a Bool, right?

851
00:49:58,300 --> 00:50:01,300
I could, I could just say, debug pool or debug be 32.

852
00:50:05,400 --> 00:50:06,000
Undies.

853
00:50:07,600 --> 00:50:09,900
And I would be debug.

854
00:50:18,300 --> 00:50:19,600
What is the problem?

855
00:50:22,200 --> 00:50:24,800
Oh, because this is actually value be through to.

856
00:50:25,000 --> 00:50:25,700
That's the problem.

857
00:50:30,300 --> 00:50:34,400
And that's not what that is not to be 32.

858
00:50:35,100 --> 00:50:40,400
All right, so that presumably would do something resembling anything.

859
00:50:40,900 --> 00:50:44,100
So let's see if that made those values editable already.

860
00:50:44,300 --> 00:50:47,700
That's like use debug camera, was one of them.

861
00:50:47,700 --> 00:50:51,600
For example, let's see, camera.

862
00:50:51,600 --> 00:50:56,400
No, no, that is one.

863
00:50:57,400 --> 00:50:59,800
so it's showing up as ab32 now, but

864
00:51:00,000 --> 00:51:01,600
Can't click on it so.

865
00:51:01,900 --> 00:51:02,800
So what's the deal?

866
00:51:02,800 --> 00:51:04,500
They're like, what's going on?

867
00:51:05,400 --> 00:51:06,900
I want to, I want to know.

868
00:51:10,700 --> 00:51:11,000
Mr.

869
00:51:11,000 --> 00:51:18,200
Debugger, I want to know why we can't do that because that's like, I

870
00:51:18,200 --> 00:51:21,800
guess our next thing is to go through that system and start cleaning

871
00:51:21,800 --> 00:51:27,500
that up a little bit as well, but I feel like that should have gone to

872
00:51:27,500 --> 00:51:28,300
a toggle value.

873
00:51:28,300 --> 00:51:32,000
Maybe we disabled toggle values but like

874
00:51:34,300 --> 00:51:35,700
Interaction toggle value.

875
00:51:36,100 --> 00:51:36,800
There it is.

876
00:51:42,400 --> 00:51:46,400
That set the hot interaction to a toggle value so I just watched it

877
00:51:46,400 --> 00:51:47,000
happen.

878
00:51:48,100 --> 00:51:48,700
Right.

879
00:51:50,800 --> 00:51:51,800
So what's the deal?

880
00:51:54,700 --> 00:51:56,300
Hmm, not really sure.

881
00:51:56,600 --> 00:51:58,400
So I'm assuming

882
00:52:01,100 --> 00:52:03,600
Well, I guess I know why it wouldn't actually toggle.

883
00:52:03,600 --> 00:52:05,900
I just don't know why it wouldn't highlight.

884
00:52:05,900 --> 00:52:08,900
The reason it wouldn't actually toggle is because we don't have any

885
00:52:08,900 --> 00:52:10,500
way to re pick up those changes.

886
00:52:10,800 --> 00:52:15,700
So for example, if we go back in here,

887
00:52:18,700 --> 00:52:21,600
In to debug be 32 or into Book value.

888
00:52:21,600 --> 00:52:21,800
Either.

889
00:52:21,800 --> 00:52:28,700
Or when we go set this stuff up, we don't actually try at this point

890
00:52:28,700 --> 00:52:33,600
to go get any new, any changes to that particular value, right?

891
00:52:33,700 --> 00:52:35,000
So we don't try.

892
00:52:35,100 --> 00:52:39,900
We have, we make no attempt at picking up a change.

893
00:52:39,900 --> 00:52:41,700
That might have occurred with that value.

894
00:52:42,300 --> 00:52:47,600
So, what we would need to do here in this particular case, is we

895
00:52:47,800 --> 00:52:52,300
need to say like, oh, okay, if there is a changed value, like we need

896
00:52:52,300 --> 00:52:55,200
to do something here where we do like if you know,

897
00:52:59,500 --> 00:53:01,000
Well, I guess just be like this.

898
00:53:04,100 --> 00:53:07,600
maybe something like this where we'd say, like, okay this thing

899
00:53:14,500 --> 00:53:19,800
If you wanted to overwrite it go ahead and overwrite it now, right?

900
00:53:20,100 --> 00:53:25,400
And it would go pick up that change as necessary and and right over

901
00:53:25,400 --> 00:53:26,700
the value with a new value.

902
00:53:26,700 --> 00:53:28,700
If there was an edit that had been pending.

903
00:53:29,300 --> 00:53:34,300
So you know when we do that edit it has to edit the value in the

904
00:53:34,300 --> 00:53:37,900
element and then it has to sort of store that value back.

905
00:53:38,300 --> 00:53:41,300
I don't want to try and do that right now because I don't think that's

906
00:53:41,600 --> 00:53:42,800
well that's not going to be very helpful.

907
00:53:43,400 --> 00:53:45,000
In like five minutes or whatever.

908
00:53:45,000 --> 00:53:45,500
I got left.

909
00:53:45,500 --> 00:53:48,700
So we'll do that next week, but that's

910
00:53:49,900 --> 00:53:53,500
That's why we don't get edits but I feel like we still, there's also a

911
00:53:53,500 --> 00:53:55,700
problem because it should be highlighting that line.

912
00:53:55,900 --> 00:53:58,700
And since it's not highlighting that line, I think we may be also our

913
00:53:58,700 --> 00:53:59,500
IDs are.

914
00:53:59,500 --> 00:53:59,900
It's because

915
00:54:00,000 --> 00:54:03,600
Maybe are we haven't done the debug ID stuff properly for these things

916
00:54:03,600 --> 00:54:04,300
yet either.

917
00:54:04,400 --> 00:54:06,800
So I guess we still have a fair ways to go on like cleaning this up

918
00:54:06,800 --> 00:54:11,500
entirely, because we have to clean all of that stuff up because none

919
00:54:11,500 --> 00:54:13,500
of its really correct at this point.

920
00:54:14,100 --> 00:54:16,900
And so we're only just getting the hierarchy and shape, but we don't

921
00:54:16,900 --> 00:54:18,600
actually have the other part in shape yet.

922
00:54:18,900 --> 00:54:22,100
So, yeah, but I think that's what we actually would want to do.

923
00:54:22,300 --> 00:54:25,900
So I'm going to save that for next week and that'll be, that'll be

924
00:54:25,900 --> 00:54:26,400
that.

925
00:54:26,800 --> 00:54:27,800
Oops, what did I do?

926
00:54:32,600 --> 00:54:34,200
I don't know what's going on here.

927
00:54:55,900 --> 00:54:56,400
So yeah.

928
00:54:58,400 --> 00:54:59,700
But I think that's mostly all.

929
00:54:59,700 --> 00:55:05,000
We actually need to do is just do that and then we would be good to

930
00:55:05,000 --> 00:55:05,400
go.

931
00:55:07,000 --> 00:55:07,900
That's my suspicion.

932
00:55:07,900 --> 00:55:11,300
And this of course, has to pass the event as well.

933
00:55:11,500 --> 00:55:16,200
So it basically just looked like that and same would be true up here.

934
00:55:24,400 --> 00:55:27,300
But I guess I probably should insert those in the middle of the macro.

935
00:55:30,000 --> 00:55:31,000
Unadvisable.

936
00:55:32,700 --> 00:55:33,400
That would be good.

937
00:55:34,600 --> 00:55:35,100
All right.

938
00:55:37,800 --> 00:55:39,600
Let's let's go to Pune.

939
00:56:12,300 --> 00:56:15,800
Do you know 27 1988 Wednesday, you talked about Microsoft's Xbox

940
00:56:15,800 --> 00:56:20,700
process to detect, which vertex was close to another to form quads

941
00:56:20,700 --> 00:56:21,900
tries faces.

942
00:56:24,700 --> 00:56:29,000
I definitely didn't say that you have the math behind that, or maybe a

943
00:56:29,000 --> 00:56:29,900
link about it.

944
00:56:29,900 --> 00:56:33,200
I tried looking for it since then without any success.

945
00:56:36,100 --> 00:56:36,800
So,

946
00:56:41,200 --> 00:56:43,900
You try to say this may be a little clearer.

947
00:56:47,900 --> 00:56:52,400
So what I was talking about is the fact that when you pass down

948
00:56:53,100 --> 00:56:54,800
meshes, right?

949
00:56:55,300 --> 00:56:55,700
This is

950
00:56:57,000 --> 00:56:59,100
Imagine like a patch.

951
00:57:00,000 --> 00:57:00,900
Looks like this.

952
00:57:01,600 --> 00:57:03,000
So these are all triangles.

953
00:57:10,900 --> 00:57:15,400
Okay, so nobody is the Xbox.

954
00:57:15,400 --> 00:57:18,400
Originally I said, there's nothing about detecting vertices or

955
00:57:18,400 --> 00:57:19,300
anything like that.

956
00:57:19,700 --> 00:57:23,800
What I was saying is that when I say, when I'm saying locality, what

957
00:57:23,800 --> 00:57:28,900
I'm talking about is actually, like, in a cash like like meaning the

958
00:57:28,900 --> 00:57:32,600
actual memory, the actual Slots of something, it has nothing to do

959
00:57:32,600 --> 00:57:34,700
with where the vertices are in space, right?

960
00:57:34,700 --> 00:57:36,100
So just so we're clear on that.

961
00:57:37,200 --> 00:57:40,600
So if we have a mesh here are the vertices and here are the triangles

962
00:57:40,600 --> 00:57:41,600
of my mesh.

963
00:57:41,800 --> 00:57:42,300
Okay?

964
00:57:43,200 --> 00:57:46,800
Now I need to send this down to the graphics card, right?

965
00:57:47,800 --> 00:57:53,300
If I were to send this down as simply a list of actual vertex data,

966
00:57:53,700 --> 00:57:54,000
right?

967
00:57:54,000 --> 00:57:56,600
So the positions of the vertex data, right?

968
00:57:56,600 --> 00:57:59,400
Then I'm going to send if even if I try stripped it.

969
00:57:59,400 --> 00:58:03,600
So try strip is when you just stand like this, this this this, this,

970
00:58:03,600 --> 00:58:05,400
this, this, this, this, this this this, right?

971
00:58:05,400 --> 00:58:06,300
And it draws it.

972
00:58:06,600 --> 00:58:08,900
Draws the quads automatically so you don't even have to specify the

973
00:58:08,900 --> 00:58:09,400
triangles.

974
00:58:09,400 --> 00:58:12,700
It just kind of constructs them as a strip if I was going to send that

975
00:58:12,700 --> 00:58:13,200
right?

976
00:58:13,700 --> 00:58:22,900
And I sent P0 P1 P2 P3 P4 P5 if I send that down as a list I'm going

977
00:58:22,900 --> 00:58:24,300
to send this right.

978
00:58:27,600 --> 00:58:31,200
And these are actual vertex data, so this is actually going to be, you

979
00:58:31,200 --> 00:58:36,000
know, 24 bytes, right, or 32 bytes or something, right?

980
00:58:36,000 --> 00:58:37,000
These are Big.

981
00:58:37,200 --> 00:58:39,600
It's not one integer or 116 B.

982
00:58:39,600 --> 00:58:40,700
Not one 16-bit value.

983
00:58:40,700 --> 00:58:42,100
That's an index into something.

984
00:58:42,200 --> 00:58:45,200
It's actually all the data, but that's fine.

985
00:58:45,200 --> 00:58:49,300
It can still share because since we told it it's a triangle strip, it

986
00:58:49,300 --> 00:58:52,100
knows that the pattern we're sending, is this, then this, then this,

987
00:58:52,100 --> 00:58:57,200
then this, then this, then this so it knows it can reuse the vertices.

988
00:58:58,200 --> 00:59:01,400
To draw two triangles that share two vertices each.

989
00:59:01,500 --> 00:59:04,700
And every time we add a new vertex, we draw a triangle.

990
00:59:05,000 --> 00:59:07,700
So we're essentially, every time we write one Wright, we start out

991
00:59:07,700 --> 00:59:10,100
with two, we don't draw anything yet, we started to.

992
00:59:10,200 --> 00:59:13,200
But then every time after the first two were drawing a new triangle

993
00:59:13,200 --> 00:59:17,100
every time because it always knows how to use two previous vertices

994
00:59:17,100 --> 00:59:18,900
from this stream to draw the new triangle.

995
00:59:18,900 --> 00:59:22,500
So we do p 2 and an immediately knows that it can draw this triangle

996
00:59:22,500 --> 00:59:24,000
because it knows P0 and P1.

997
00:59:24,200 --> 00:59:25,100
We draw P3.

998
00:59:25,100 --> 00:59:27,200
And now it knows, it can draw this triangle because no stories.

999
00:59:27,500 --> 00:59:27,800
Use p.

1000
00:59:27,800 --> 00:59:28,700
0 p 2.

1001
00:59:28,900 --> 00:59:29,500
Right.

1002
00:59:29,700 --> 00:59:35,300
Then we draw this guy P4 up here and it knows it can redraw this we

1003
00:59:35,300 --> 00:59:38,300
drop P5 down here and we know it can draw this, right.

1004
00:59:42,200 --> 00:59:45,200
Of course, now that I realize, the way I wrote this P0 P1 P2.

1005
00:59:45,200 --> 00:59:46,500
It's actually going to be this way.

1006
00:59:48,800 --> 00:59:49,800
Sorry about that.

1007
00:59:49,800 --> 00:59:51,200
I drew that upside down.

1008
00:59:52,900 --> 00:59:56,400
Yeah, if you're try strip was in this order, then you would not that

1009
00:59:56,400 --> 00:59:57,400
would not be correct.

1010
00:59:57,400 --> 00:59:59,000
So pay no attention to that.

1011
00:59:59,000 --> 00:59:59,800
Pretend that didn't happen.

1012
01:00:00,400 --> 01:00:03,300
Let's try that one more time, paying attention.

1013
01:00:08,000 --> 01:00:12,200
So, if you are specifying them in this order, P0 P1, right?

1014
01:00:12,500 --> 01:00:14,000
Then p 2 would be here.

1015
01:00:14,000 --> 01:00:15,100
P 3 would be here.

1016
01:00:15,200 --> 01:00:19,100
It would draw that triangle first, right?

1017
01:00:19,300 --> 01:00:22,800
And then it would draw this triangle, but it always reuse has two

1018
01:00:22,800 --> 01:00:24,000
triangles from the previous one.

1019
01:00:24,600 --> 01:00:29,100
So then here again, when I'm to draw P4 here, it still now, again,

1020
01:00:29,100 --> 01:00:31,700
knows how to draw a whole triangle with only one vertex.

1021
01:00:32,600 --> 01:00:35,700
so, the way to think about this, to way to think about Trey strips,

1022
01:00:37,100 --> 01:00:40,600
Is that every new vertex draws a triangle.

1023
01:00:40,700 --> 01:00:44,600
So you are pretty much except for those first two, if you can just

1024
01:00:44,600 --> 01:00:49,100
keep the stream going, you have maximal amounts of triangles two

1025
01:00:49,100 --> 01:00:51,200
vertices if that makes sense, right?

1026
01:00:51,300 --> 01:00:54,900
Because every time you specify a Vertex, you draw a new triangle.

1027
01:00:55,700 --> 01:00:57,600
Hopefully that makes some sense, but

1028
01:01:00,900 --> 01:01:01,700
There's a catch.

1029
01:01:03,900 --> 01:01:08,400
and the catch is that if you were going to start touching previous

1030
01:01:08,400 --> 01:01:13,400
vertices that are not the last two that you looked at

1031
01:01:15,400 --> 01:01:18,300
If you're only sending down vertex data, there is no way to share

1032
01:01:18,300 --> 01:01:19,000
these anymore.

1033
01:01:19,000 --> 01:01:23,600
So for example, suppose I were to draw my trash trip like this.

1034
01:01:25,300 --> 01:01:27,200
Right, here's my try strip.

1035
01:01:28,100 --> 01:01:34,800
So I come in here, I draw this, this, this that right?

1036
01:01:34,800 --> 01:01:39,100
So I did like, okay draw this, then this, then this then that so it's

1037
01:01:39,100 --> 01:01:42,900
going to draw that triangle first then this triangle, right?

1038
01:01:43,300 --> 01:01:43,800
So make sense.

1039
01:01:43,800 --> 01:01:47,300
So this this this this right?

1040
01:01:47,900 --> 01:01:51,500
And now I try to turn this corner, right?

1041
01:01:51,900 --> 01:01:55,000
So I've drawn, you know this I draw this

1042
01:01:55,200 --> 01:01:56,600
It's now or something.

1043
01:01:56,600 --> 01:01:59,700
So, I draw their write, something like this.

1044
01:02:00,500 --> 01:02:01,500
I guess I can't quite draw.

1045
01:02:01,500 --> 01:02:02,900
Their I got to draw here.

1046
01:02:03,900 --> 01:02:10,900
Write something like this and then I try to draw like out here to

1047
01:02:10,900 --> 01:02:12,700
start going this way, right?

1048
01:02:12,700 --> 01:02:16,000
If I want to sorry I'm not driving.

1049
01:02:16,000 --> 01:02:17,300
Very good pattern to show this.

1050
01:02:18,000 --> 01:02:21,400
There's a pattern I figured out a long time ago that actually does

1051
01:02:21,400 --> 01:02:23,600
this and I want to see if I can free figured out again.

1052
01:02:24,800 --> 01:02:27,800
I've never actually seen anyone talk about this pattern before so I

1053
01:02:27,800 --> 01:02:29,200
might as well try to figure it out again.

1054
01:02:37,900 --> 01:02:39,100
I think it's like this.

1055
01:02:39,600 --> 01:02:40,900
So it's here to here.

1056
01:02:43,100 --> 01:02:44,000
Here to here.

1057
01:02:48,300 --> 01:02:50,500
Right here to here.

1058
01:02:51,700 --> 01:02:56,700
So, now, the next thing that gets drawn, it's got to turn the corner

1059
01:02:56,700 --> 01:02:58,000
and I don't remember how you do it.

1060
01:02:58,400 --> 01:02:59,400
It's this way.

1061
01:03:03,200 --> 01:03:04,700
The next one that you draw.

1062
01:03:09,400 --> 01:03:11,900
Is going to draw across the diagonal.

1063
01:03:12,900 --> 01:03:13,500
So,

1064
01:03:18,700 --> 01:03:20,700
Maybe you go out further that way.

1065
01:03:20,700 --> 01:03:22,900
So you go like this, don't really remember.

1066
01:03:29,400 --> 01:03:29,900
Right.

1067
01:03:30,300 --> 01:03:33,100
Then you're gonna hear hear that won't help you.

1068
01:03:33,100 --> 01:03:34,600
So it's got to be the other way around.

1069
01:03:34,700 --> 01:03:36,200
Sorry, just give me a second.

1070
01:03:36,400 --> 01:03:37,100
Just give me a second.

1071
01:03:38,300 --> 01:03:41,400
So you draw here to here, right?

1072
01:03:42,600 --> 01:03:44,600
And so, that's that way.

1073
01:03:45,200 --> 01:03:47,800
Then you draw here to here.

1074
01:03:50,100 --> 01:03:51,200
So that's that way.

1075
01:03:52,500 --> 01:03:54,500
and so, then you would draw

1076
01:04:09,500 --> 01:04:11,400
I cannot figure out what this actually was.

1077
01:04:11,800 --> 01:04:13,800
Maybe you do it throughout the other direction.

1078
01:04:16,100 --> 01:04:20,300
so, if I go down, if I'm there to there, and I do here to here,

1079
01:04:22,400 --> 01:04:22,600
Right.

1080
01:04:22,600 --> 01:04:24,100
So it's there, there there.

1081
01:04:24,100 --> 01:04:24,900
So it's that way.

1082
01:04:26,700 --> 01:04:27,100
Right.

1083
01:04:27,700 --> 01:04:30,100
And then I do these two again.

1084
01:04:30,100 --> 01:04:33,300
So would be that way, I guess actually want to put this guy a little

1085
01:04:33,300 --> 01:04:33,900
bit for the ring.

1086
01:04:34,300 --> 01:04:36,300
So it's that way.

1087
01:04:39,000 --> 01:04:41,700
and then the last guy,

1088
01:04:43,600 --> 01:04:47,100
maybe it's like that, is this correct, right.

1089
01:04:47,300 --> 01:04:52,100
And so this guy would be here here, here and there.

1090
01:04:53,600 --> 01:04:55,200
That is going to connect to this one.

1091
01:04:57,900 --> 01:05:02,300
So you need that one to be on the interior somehow.

1092
01:05:03,000 --> 01:05:04,100
I don't know how I did this.

1093
01:05:04,600 --> 01:05:08,600
It was the weirdest pattern ever and it was super hard to remember as

1094
01:05:08,600 --> 01:05:09,300
you can see.

1095
01:05:11,900 --> 01:05:13,400
So here here,

1096
01:05:15,500 --> 01:05:16,500
what's the next one?

1097
01:05:17,600 --> 01:05:18,200
Is it?

1098
01:05:22,900 --> 01:05:25,000
This is going to drive me insane if I can't remember it.

1099
01:05:49,400 --> 01:05:51,800
And the insofar as the interesting thing about this one is there were

1100
01:05:51,800 --> 01:05:53,100
no degenerate triangles.

1101
01:05:53,300 --> 01:05:55,300
It's a way to draw a patch.

1102
01:05:57,400 --> 01:05:59,800
That looks roughly like this.

1103
01:06:04,600 --> 01:06:05,200
End.

1104
01:06:06,900 --> 01:06:12,300
It looks roughly like that and that doesn't actually ever require a

1105
01:06:12,300 --> 01:06:13,100
restart.

1106
01:06:13,300 --> 01:06:17,500
It's just a full, try strip and it touches itself, maximal maximally

1107
01:06:18,700 --> 01:06:19,500
so to speak.

1108
01:06:25,600 --> 01:06:28,500
I think I used the default ordering of a try strip.

1109
01:06:29,400 --> 01:06:33,800
So I know that it would have been the way that they normally would

1110
01:06:33,800 --> 01:06:37,100
have encoded it and so ABCDEF.

1111
01:06:37,100 --> 01:06:40,400
So it was going upward for starters.

1112
01:06:43,600 --> 01:06:50,600
So it's doing like a b c d.

1113
01:06:51,900 --> 01:06:52,500
E.

1114
01:06:53,900 --> 01:06:54,600
F.

1115
01:06:57,300 --> 01:06:57,800
F.

1116
01:06:59,800 --> 01:07:00,800
G.

1117
01:07:08,100 --> 01:07:08,800
H.

1118
01:07:13,100 --> 01:07:14,100
Yeah, that's it.

1119
01:07:14,400 --> 01:07:15,200
That's it right there.

1120
01:07:16,400 --> 01:07:19,700
I J K L, that's it.

1121
01:07:20,100 --> 01:07:21,100
So, you see how that works?

1122
01:07:21,700 --> 01:07:25,900
So, you do ABC that draws this.

1123
01:07:26,100 --> 01:07:31,200
Then you do D, which draws that the new Dewey, which draws this.

1124
01:07:31,300 --> 01:07:35,000
Then you draw F, which draws that right?

1125
01:07:35,800 --> 01:07:42,800
Then you draw G, which draws this, then you do H, which draws that,

1126
01:07:43,300 --> 01:07:46,000
then you drew, I, which draws this

1127
01:07:46,200 --> 01:07:50,000
Then you draw J which draws that K, which draws this L.

1128
01:07:50,000 --> 01:07:50,900
Which draws that

1129
01:07:55,500 --> 01:07:59,000
Yeah, again, never seen anyone mention this before on the Xbox.

1130
01:07:59,000 --> 01:08:04,200
I worked it out on the original Xbox because it was the way you could

1131
01:08:04,200 --> 01:08:07,600
make a perfect patch that would get maximum throughput through the

1132
01:08:07,600 --> 01:08:11,700
vertex cash without ever having to restart the try strip.

1133
01:08:11,700 --> 01:08:13,100
So you never lost an index.

1134
01:08:14,700 --> 01:08:15,600
If that makes sense.

1135
01:08:16,200 --> 01:08:17,700
All right point.

1136
01:08:17,700 --> 01:08:23,600
Being that was an extremely lengthy way to get to this part right

1137
01:08:23,600 --> 01:08:25,200
here, which is what I was trying to say.

1138
01:08:25,800 --> 01:08:30,300
So if you look at the series of vertices that come down here, it's you

1139
01:08:30,300 --> 01:08:35,500
know, a b, c, d, e, f g, h.

1140
01:08:35,700 --> 01:08:41,000
I now I as you can see is an exact same place a z.

1141
01:08:41,899 --> 01:08:44,100
So if I was sending these as vertex data,

1142
01:08:45,200 --> 01:08:49,500
I'm going to have to go through Andre shade to do the whole transfer

1143
01:08:49,500 --> 01:08:54,800
and pipeline everything on two identical vertices V and I right.

1144
01:08:55,300 --> 01:08:58,600
And that's stupid because they're in the exact same place their

1145
01:08:58,600 --> 01:08:59,399
coincident.

1146
01:08:59,700 --> 01:08:59,800
So

1147
01:09:00,000 --> 01:09:02,399
I really wanted to do is tell the graphics card.

1148
01:09:02,399 --> 01:09:05,399
Hey, all you need to do is use where you previously computer that

1149
01:09:05,399 --> 01:09:06,399
vertex to be.

1150
01:09:07,100 --> 01:09:10,200
So the reason that you send down index buffers, what I was trying to

1151
01:09:10,200 --> 01:09:13,200
talk about the other day is because if you're actually sending these

1152
01:09:13,200 --> 01:09:16,800
down as indices instead of the actual vertex data, then this stream

1153
01:09:16,800 --> 01:09:25,000
looks like zero, one, two, three, four, five, six, seven, four, and

1154
01:09:25,100 --> 01:09:28,700
the card can see that the indices are both for it can have a little

1155
01:09:28,700 --> 01:09:29,800
cash that it looks into when

1156
01:09:30,000 --> 01:09:32,899
It's he's for, do I have vertex for already transformed?

1157
01:09:33,000 --> 01:09:38,899
Yes, use it right now, the size, this is called the Primitive

1158
01:09:38,899 --> 01:09:39,600
assembly.

1159
01:09:43,000 --> 01:09:43,600
Cash.

1160
01:09:43,700 --> 01:09:48,300
This is the one that that does the try strip part.

1161
01:09:48,399 --> 01:09:52,399
So the fact that I do 012 and that does a triangle, then three also

1162
01:09:52,399 --> 01:09:53,200
does a triangle.

1163
01:09:53,399 --> 01:09:56,400
That's called hitting the Primitive assembly cache and that's the

1164
01:09:56,400 --> 01:09:56,700
thing.

1165
01:09:56,700 --> 01:10:01,300
That's does the like store the last two vertices that I used and it

1166
01:10:01,300 --> 01:10:04,400
moves things around in that in that little tiny cache of just like

1167
01:10:04,400 --> 01:10:05,600
three vertices or whatever?

1168
01:10:06,900 --> 01:10:08,900
That's the oh, so this is like three vertices long.

1169
01:10:08,900 --> 01:10:09,800
It's super tiny.

1170
01:10:09,800 --> 01:10:12,400
It's only for assembling the actual Primitives, right.

1171
01:10:12,600 --> 01:10:13,200
Triceps.

1172
01:10:13,600 --> 01:10:17,000
This part is the vertex transform cash.

1173
01:10:19,100 --> 01:10:19,400
Oops.

1174
01:10:24,400 --> 01:10:27,600
And this is the thing which basically says, oh, I'm going to store.

1175
01:10:27,600 --> 01:10:30,700
I'm going to remember some number of vertices tagged with whatever

1176
01:10:30,700 --> 01:10:35,100
their index was so like, oh, I know that vertex 16 or whatever, right?

1177
01:10:35,100 --> 01:10:38,500
I have that, you know, I have what it was transformed as so if I see

1178
01:10:38,500 --> 01:10:41,500
index 16, I'm just going to pull it out of the cash, right?

1179
01:10:42,900 --> 01:10:46,900
So that is how like the Xbox Hardware used to work.

1180
01:10:47,200 --> 01:10:48,100
Does that make sense?

1181
01:10:49,900 --> 01:10:53,000
And so, the reason I was mentioning that was I was saying like,

1182
01:10:54,200 --> 01:10:59,900
I was using the excellent example of how indices versus vertex data

1183
01:11:00,100 --> 01:11:04,300
will affect how the hardware actually performs on your stream.

1184
01:11:04,300 --> 01:11:09,700
It's not equivalent, even if you take bandwidth out of the equation,

1185
01:11:09,800 --> 01:11:13,000
if you, if you're not even talking about the fact that the indices end

1186
01:11:13,000 --> 01:11:17,300
up being a smaller way, indices plus only unique vertices like unique

1187
01:11:17,300 --> 01:11:20,400
vertices plus indices as opposed to just duplicating the vertices

1188
01:11:20,400 --> 01:11:21,600
anytime you use them again.

1189
01:11:22,500 --> 01:11:25,500
It actually turns out to be more efficient in a number of ways,

1190
01:11:25,500 --> 01:11:27,700
potentially depending on how the hardware works.

1191
01:11:28,000 --> 01:11:30,700
And so, just what I wanted to kind of get across with that is that,

1192
01:11:30,700 --> 01:11:35,600
like, hey, if you actually care about maximum throughput on some of

1193
01:11:35,600 --> 01:11:39,500
these things, you have to actually know what the GPU is going to do.

1194
01:11:39,600 --> 01:11:43,200
You can't just, you know, assume something about it, because there may

1195
01:11:43,200 --> 01:11:46,500
be all sorts of caches in there or optimizations that are happening

1196
01:11:46,700 --> 01:11:49,500
and if you don't understand that, you're not going to pick the right

1197
01:11:49,500 --> 01:11:51,400
format for your data, right?

1198
01:11:52,100 --> 01:11:54,500
If you don't care about Max's you but you don't care about any of

1199
01:11:54,500 --> 01:11:55,300
this, right?

1200
01:11:55,600 --> 01:11:59,800
And so like with something like handmade hero we just don't have

1201
01:12:00,000 --> 01:12:04,700
The any Vertex throughput or transform needs at all?

1202
01:12:04,900 --> 01:12:05,200
Right.

1203
01:12:05,200 --> 01:12:07,200
That's just not an issue at all.

1204
01:12:08,200 --> 01:12:11,000
We don't even have anything wherever probably going to do with vertex.

1205
01:12:11,000 --> 01:12:13,500
Shaders will probably do some things, the fragment shaders, but we

1206
01:12:13,500 --> 01:12:17,100
have no need for for any heavyweight verdicts operations, right now,

1207
01:12:17,500 --> 01:12:20,900
and possibly ever, so this sort of stuff doesn't matter at all for

1208
01:12:20,900 --> 01:12:21,700
handmade hero.

1209
01:12:22,100 --> 01:12:24,800
But somebody in the Q&A, ask the question about this.

1210
01:12:24,800 --> 01:12:27,000
And so I was trying to be clear in the answer.

1211
01:12:27,700 --> 01:12:29,700
So hopefully that makes some sense.

1212
01:12:40,900 --> 01:12:41,600
And so Diner.

1213
01:12:42,200 --> 01:12:46,300
27 1988 had a follow-up question there which is how does it know which

1214
01:12:46,300 --> 01:12:47,300
triangles to draw?

1215
01:12:48,300 --> 01:12:51,400
So this is a part that we didn't talk about in handmade here because

1216
01:12:51,400 --> 01:12:55,900
again it's not relevant but basically what happens is there's this

1217
01:12:55,900 --> 01:12:59,100
notion of like I said, primitive assembly.

1218
01:13:04,300 --> 01:13:05,800
Primitive obviously, meaning.

1219
01:13:07,200 --> 01:13:11,300
The individual Primitives like the triangle or quad or point or

1220
01:13:11,300 --> 01:13:14,700
whatever is the unit that's actually been rasterize assembly.

1221
01:13:14,700 --> 01:13:19,200
Meaning how do I pull together the vertex data that I need to actually

1222
01:13:19,200 --> 01:13:19,900
do that?

1223
01:13:22,400 --> 01:13:26,100
So in this primitive assembly what happens is when you go to draw your

1224
01:13:26,100 --> 01:13:29,400
mesh you tell it what kind you're drawing and we actually did this in

1225
01:13:29,400 --> 01:13:29,900
handmade hero.

1226
01:13:29,900 --> 01:13:32,500
It's just we didn't really talk about it much because it's not

1227
01:13:32,500 --> 01:13:33,800
relevant in handmade hero.

1228
01:13:34,400 --> 01:13:36,400
So what happened in handmade hero?

1229
01:13:39,100 --> 01:13:46,500
It's not here GL in hand weight hero.

1230
01:13:50,800 --> 01:13:52,700
There we go, in handmade hero.

1231
01:13:52,700 --> 01:13:58,000
We said Jill, begin GL triangles, right, that is an example of

1232
01:13:58,000 --> 01:13:58,500
setting.

1233
01:13:58,500 --> 01:14:02,800
What type of primitive assembly you are trying to do, okay?

1234
01:14:02,800 --> 01:14:04,300
And I'll talk about that in one second.

1235
01:14:05,400 --> 01:14:11,400
So primitive assembly is like how does the vertex stream sort of

1236
01:14:11,700 --> 01:14:15,900
indicate what try what Primitives should actually occur, right?

1237
01:14:17,100 --> 01:14:19,100
And there's a couple different kinds for triangles.

1238
01:14:19,500 --> 01:14:20,900
One is actually just triangles.

1239
01:14:20,900 --> 01:14:22,500
That's the kind we use on handmade hero.

1240
01:14:23,800 --> 01:14:25,600
One is try strips.

1241
01:14:26,800 --> 01:14:28,200
And one is try fans.

1242
01:14:29,400 --> 01:14:29,800
Okay.

1243
01:14:30,300 --> 01:14:33,900
And what these are is these are rules for interpreting the vertices

1244
01:14:33,900 --> 01:14:38,300
that come in as to how they will appear in the output.

1245
01:14:38,500 --> 01:14:43,100
So with triangles, the rule is that vertices are taken three at a time

1246
01:14:43,100 --> 01:14:45,400
to for try to form triangles period.

1247
01:14:45,500 --> 01:14:48,600
So if I send down vertex and in fact, let me just make an example of

1248
01:14:48,600 --> 01:14:50,600
this so that you can actually see it.

1249
01:14:53,700 --> 01:14:57,300
Okay, so let's say that, I'm going to send down the following

1250
01:14:57,300 --> 01:14:57,900
vertices.

1251
01:15:03,100 --> 01:15:07,200
One, two, three, four, five, six.

1252
01:15:07,500 --> 01:15:09,000
Okay, that's what we're sending down.

1253
01:15:10,100 --> 01:15:13,900
If I was to say triangles, if that's what I set, the Primitive

1254
01:15:13,900 --> 01:15:16,700
assembly to, it's going to take these three at a time.

1255
01:15:16,800 --> 01:15:18,400
So this list,

1256
01:15:19,900 --> 01:15:23,300
it's going to take these three and form a triangle and these three and

1257
01:15:23,300 --> 01:15:24,000
form a triangle.

1258
01:15:24,100 --> 01:15:26,800
So what I will get in the output is I will get this.

1259
01:15:28,500 --> 01:15:29,000
Right.

1260
01:15:29,400 --> 01:15:30,400
And I will get this.

1261
01:15:31,500 --> 01:15:32,500
That is what I will see.

1262
01:15:33,600 --> 01:15:34,500
So there's no mystery.

1263
01:15:34,500 --> 01:15:36,900
There's no knowing magically how it's going to do.

1264
01:15:36,900 --> 01:15:40,300
It literally is just looking at the indices in the way that you told

1265
01:15:40,300 --> 01:15:40,500
it.

1266
01:15:40,500 --> 01:15:41,500
You said triangles.

1267
01:15:41,500 --> 01:15:43,200
That means vertices taken three, two time.

1268
01:15:44,300 --> 01:15:44,800
Okay.

1269
01:15:45,100 --> 01:15:45,900
That's triangles.

1270
01:15:46,400 --> 01:15:47,600
Try strips.

1271
01:15:51,300 --> 01:15:52,100
Has a different rule.

1272
01:15:52,400 --> 01:15:56,800
Try strips is start with the first to write.

1273
01:15:57,400 --> 01:16:01,300
And then the third one, implies the first triangle almost exactly the

1274
01:16:01,300 --> 01:16:02,400
way that you would imagine.

1275
01:16:02,400 --> 01:16:04,000
It would, if you're just drawing triangles.

1276
01:16:04,000 --> 01:16:04,500
Right?

1277
01:16:04,500 --> 01:16:08,100
So I draw one, two, three, then the rule is for every vertex

1278
01:16:08,100 --> 01:16:09,100
thereafter, right?

1279
01:16:09,100 --> 01:16:10,300
We're actually including this one.

1280
01:16:10,400 --> 01:16:14,500
When I draw this vertex, what I want you to do is I want you to

1281
01:16:14,500 --> 01:16:17,100
permute the previous vertices.

1282
01:16:17,100 --> 01:16:20,900
You were using such that you throw away what the oldest one.

1283
01:16:21,100 --> 01:16:21,400
Right?

1284
01:16:21,400 --> 01:16:22,900
So I get rid of one.

1285
01:16:24,300 --> 01:16:25,900
That's gone now so it's like a sliding.

1286
01:16:25,900 --> 01:16:27,900
Imagine a sliding window, it started here.

1287
01:16:28,000 --> 01:16:30,600
So I'm going to move the sliding window down, right?

1288
01:16:31,700 --> 01:16:35,300
I've two and three and then I'm going to add the next new vertex in.

1289
01:16:35,800 --> 01:16:36,200
Okay?

1290
01:16:36,500 --> 01:16:40,200
So now I'm going to draw one that's between two, three and four,

1291
01:16:40,600 --> 01:16:41,100
right?

1292
01:16:42,300 --> 01:16:43,600
Then the next one I do.

1293
01:16:43,600 --> 01:16:46,000
I slide the window down again and now I'm going to do one that's

1294
01:16:46,000 --> 01:16:48,400
three, four, and five, right?

1295
01:16:48,600 --> 01:16:52,800
So instead of just taking a three at a time, I'm now just using every

1296
01:16:52,800 --> 01:16:56,700
possible set of three I'm just moving down by one each time.

1297
01:16:56,900 --> 01:17:00,200
So instead of only using three unique vertices three more unique

1298
01:17:00,200 --> 01:17:01,300
vertices three more unique,

1299
01:17:01,500 --> 01:17:07,800
Is I'm reusing every vertex in every, you know, three times, right?

1300
01:17:09,300 --> 01:17:13,300
The next one is try fan or I should say, the last one is try fan.

1301
01:17:14,100 --> 01:17:18,200
And what that is is almost the same only that uses a sliding window of

1302
01:17:18,200 --> 01:17:20,200
to, and never gets rid of the original.

1303
01:17:20,400 --> 01:17:23,100
So what that does is it starts with one and it says I'm going to just

1304
01:17:23,100 --> 01:17:24,700
keep one in the entire time.

1305
01:17:24,800 --> 01:17:28,000
And then I'm using a sliding window of to that slides downward, right?

1306
01:17:28,100 --> 01:17:28,900
One at a time.

1307
01:17:29,100 --> 01:17:31,800
So I'm going to draw a triangle that's one, two and three.

1308
01:17:31,900 --> 01:17:33,200
So it draws this triangle.

1309
01:17:33,400 --> 01:17:35,900
Then I'm use a triangle that's 1, 3 & 4.

1310
01:17:36,000 --> 01:17:38,200
So it draws this triangle right?

1311
01:17:38,200 --> 01:17:38,700
One that we've

1312
01:17:38,800 --> 01:17:39,600
never drawn before.

1313
01:17:39,700 --> 01:17:42,500
Then I'm going to use one that draws, one, four and five, right?

1314
01:17:42,600 --> 01:17:44,900
And that's going to be this triangle.

1315
01:17:44,900 --> 01:17:49,900
This giant triangle here then I'm going to use 156 right which is this

1316
01:17:49,900 --> 01:17:52,300
long triangle here and you might ask what on Earth?

1317
01:17:52,300 --> 01:17:54,000
Is that mess good for well?

1318
01:17:54,000 --> 01:17:57,100
Exactly what it sounds like if I wanted to draw something that looks

1319
01:17:57,100 --> 01:17:58,000
like a circle.

1320
01:17:58,000 --> 01:17:58,600
Let's say,

1321
01:18:02,300 --> 01:18:03,000
I could send down.

1322
01:18:03,000 --> 01:18:08,800
One, two, three, four, five, six, seven, eight, nine, ten, eleven,

1323
01:18:08,800 --> 01:18:11,400
twelve, thirteen fourteen, right?

1324
01:18:12,000 --> 01:18:12,800
Then it would just go.

1325
01:18:12,800 --> 01:18:18,900
Oh one, two, three, one three four one four, five, one five, six one

1326
01:18:18,900 --> 01:18:26,200
six, seven, one seven groups, 1781 eight, nine one, nine, 10 11, 10 11

1327
01:18:26,300 --> 01:18:31,500
10, 11 12, 13 21, 12 13, 13 14

1328
01:18:31,700 --> 01:18:33,600
114 to write.

1329
01:18:33,600 --> 01:18:36,200
Well, I'd have to send two again so I'd have to send this one one more

1330
01:18:36,200 --> 01:18:37,300
time if I want to close it.

1331
01:18:39,200 --> 01:18:39,700
Right.

1332
01:18:41,200 --> 01:18:44,600
So that's what triangle fans are 4 and you can see why it's called

1333
01:18:44,600 --> 01:18:47,700
triangle things like a fan of triangles a fan out around a point.

1334
01:18:48,000 --> 01:18:53,400
Not particularly commonly used, try strips are very commonly used so

1335
01:18:53,400 --> 01:18:57,400
that's that's what that is if that makes any sense.

1336
01:19:04,900 --> 01:19:06,900
All right, so I lost the Q Collins here.

1337
01:19:06,900 --> 01:19:07,800
I don't know where we are.

1338
01:19:07,800 --> 01:19:08,700
I don't know where we're at.

1339
01:19:09,300 --> 01:19:10,500
I don't know where we're at.

1340
01:19:15,700 --> 01:19:17,400
I should have paused my scroll.

1341
01:19:17,400 --> 01:19:18,100
I don't know.

1342
01:19:18,300 --> 01:19:19,800
I don't remember where I was in school.

1343
01:19:23,300 --> 01:19:26,100
Let's see if there's any more questions here.

1344
01:19:33,800 --> 01:19:36,500
You mention shortly to make a handmade sort of quicker which is slow

1345
01:19:36,500 --> 01:19:40,600
now because of what it would cost to do, how would I would think we

1346
01:19:40,600 --> 01:19:42,500
need to load textures first before showing here.

1347
01:19:42,900 --> 01:19:46,600
No, so texture load is not what slowing us down because our textures

1348
01:19:46,600 --> 01:19:47,600
are loaded on demand.

1349
01:19:48,100 --> 01:19:48,800
So it's actually showing us.

1350
01:19:48,800 --> 01:19:50,500
That is just creating the opengl context.

1351
01:19:50,500 --> 01:19:52,300
It's just amd's initialization routine.

1352
01:19:52,300 --> 01:19:52,900
It's that slow.

1353
01:19:53,300 --> 01:19:55,500
But we're creating to context right now.

1354
01:19:55,500 --> 01:19:58,600
14 texture download in one knot and one were actually three to four,

1355
01:19:58,600 --> 01:20:00,200
texture downloading and one regular.

1356
01:20:00,800 --> 01:20:03,200
And since I think we've basically determined that the

1357
01:20:03,800 --> 01:20:08,700
Context doesn't help you because the it doesn't actually help on

1358
01:20:08,700 --> 01:20:10,500
Nvidia cards as they had suggested.

1359
01:20:10,500 --> 01:20:13,400
It would we can get rid of those and just create one context, which

1360
01:20:13,400 --> 01:20:15,100
should make us roughly three times faster.

1361
01:20:15,700 --> 01:20:16,400
So that's all.

1362
01:20:17,200 --> 01:20:18,300
I was just saying, like, we go back there.

1363
01:20:18,300 --> 01:20:20,600
Get rid of those contexts and then we'd be three times faster.

1364
01:20:21,300 --> 01:20:23,500
Will still be a little slow because they just take a really long time

1365
01:20:23,500 --> 01:20:24,800
to create that context.

1366
01:20:25,600 --> 01:20:27,500
I wish they didn't NVIDIA drivers, don't have that problem.

1367
01:20:27,500 --> 01:20:30,900
A video drivers, start immediately but Andy's take forever for

1368
01:20:30,900 --> 01:20:31,500
whatever reason.

1369
01:20:38,000 --> 01:20:41,200
For people who do 3D meshes, it seems there's a rule or at least for

1370
01:20:41,200 --> 01:20:45,100
blender that, using anything else than quads, for topology produces

1371
01:20:45,100 --> 01:20:45,800
rendering artifacts.

1372
01:20:45,800 --> 01:20:48,800
So it has to be avoided is this because when rendering and game

1373
01:20:48,800 --> 01:20:50,600
everything gets split again into triangles.

1374
01:20:50,700 --> 01:20:52,700
Ignore the question of what I'm asking is to make sense.

1375
01:20:53,600 --> 01:20:54,200
Yeah.

1376
01:20:54,200 --> 01:20:58,000
So what what you're asking is a little bit of a it's a very deep

1377
01:20:58,000 --> 01:20:59,800
question that actually

1378
01:21:00,000 --> 01:21:02,200
Has absolutely nothing to do with rendering at all.

1379
01:21:02,900 --> 01:21:10,600
It has to do with what it has to do with topology, and the way in

1380
01:21:10,600 --> 01:21:14,900
which I'm not even sure how to begin answering this question.

1381
01:21:16,200 --> 01:21:17,700
It has to do with topology.

1382
01:21:17,700 --> 01:21:26,200
And the way in which essentially like two dimensional, manifolds wrap

1383
01:21:26,200 --> 01:21:30,700
around three to three dimensional objects and if you want to do stuff

1384
01:21:30,800 --> 01:21:35,000
that has to do with like Smooth curves, like subdivision surfaces or

1385
01:21:35,000 --> 01:21:37,700
smooth, mappings like texture mappings.

1386
01:21:38,400 --> 01:21:42,000
Then what happens if you don't have quads

1387
01:21:43,300 --> 01:21:48,300
Is you end up with unavoidable singularities are unavoidable artifacts

1388
01:21:48,900 --> 01:21:51,200
that are like, mathematically unavoidable, like, there's nothing you

1389
01:21:51,200 --> 01:21:55,700
can really do about them, and it really has nothing to do with

1390
01:21:55,700 --> 01:21:57,300
rendering the card.

1391
01:21:57,300 --> 01:22:00,800
Can that like the graphics card just needs things.

1392
01:22:00,800 --> 01:22:07,100
Broken up into triangles with, with, with information at the edges at

1393
01:22:07,100 --> 01:22:09,900
the vertices of the triangles and it can render anything that's of

1394
01:22:09,900 --> 01:22:10,600
that form.

1395
01:22:11,200 --> 01:22:12,700
But when you start to want to do

1396
01:22:12,900 --> 01:22:14,100
More advanced things with them.

1397
01:22:15,300 --> 01:22:18,800
The need to have things be locally planar.

1398
01:22:19,000 --> 01:22:23,200
And non collapsing is actually very important for a number of other

1399
01:22:23,200 --> 01:22:28,100
mathematical reasons and so you know,

1400
01:22:30,200 --> 01:22:33,400
That's something we'd go into probably in a lot of depth at this were

1401
01:22:33,400 --> 01:22:36,900
about 3D printing, but we're not going to get anywhere close to that

1402
01:22:36,900 --> 01:22:45,000
on hammy here because it's so not even remotely relevant to to what

1403
01:22:45,000 --> 01:22:46,200
we're doing that.

1404
01:22:46,200 --> 01:22:46,300
Make sense.

1405
01:23:03,300 --> 01:23:06,400
Ginger bill with opengl context creation, which B is the slow B.

1406
01:23:06,400 --> 01:23:07,600
Is it set pixel format?

1407
01:23:07,600 --> 01:23:10,100
As it may be visual studio 2013?

1408
01:23:10,100 --> 01:23:12,700
That is the problem in Visual Studio 2015.

1409
01:23:12,700 --> 01:23:16,400
This is not 2015 is not a slow, it could.

1410
01:23:16,400 --> 01:23:16,900
So

1411
01:23:18,800 --> 01:23:23,300
It could be that weird thing that they do where Visual Studio tracks,

1412
01:23:23,300 --> 01:23:24,300
the memory allocations.

1413
01:23:24,300 --> 01:23:25,100
And that's a good point.

1414
01:23:25,100 --> 01:23:28,200
Ginger Bill, actually, because we have not disabled that and we

1415
01:23:28,200 --> 01:23:32,500
haven't disabled that because we don't go through any of that stuff.

1416
01:23:33,500 --> 01:23:37,800
So if we disabled that Heap thing, it might make a difference.

1417
01:23:37,800 --> 01:23:38,600
Let's find out.

1418
01:23:38,600 --> 01:23:42,300
So if we run, you can see us taking a huge amount of time in here,

1419
01:23:42,300 --> 01:23:42,800
right?

1420
01:23:42,800 --> 01:23:44,500
And all of that's in the context creation.

1421
01:23:44,500 --> 01:23:47,300
It's in wiggle, create context, not in set pixel format.

1422
01:23:48,000 --> 01:23:48,500
um,

1423
01:23:50,000 --> 01:23:54,500
So, if we were to disable the debug Heap and I don't know if you can

1424
01:23:54,500 --> 01:23:59,700
do that in here, but we can do it external to here anyway, let's find

1425
01:23:59,700 --> 01:23:59,800
out.

1426
01:24:00,500 --> 01:24:01,800
How do I disable the debug game?

1427
01:24:02,000 --> 01:24:03,000
That may be the problem.

1428
01:24:03,000 --> 01:24:06,200
It may be that their drivers just doing hundreds of thousands of

1429
01:24:06,200 --> 01:24:06,900
allocations.

1430
01:24:06,900 --> 01:24:10,100
Wouldn't surprise me and that those are all getting slowed down

1431
01:24:10,100 --> 01:24:11,600
because they're going to the debug keep.

1432
01:24:11,900 --> 01:24:15,200
So, let's find out Visual Studio.

1433
01:24:15,200 --> 01:24:16,300
Thank you for mentioning that you do.

1434
01:24:16,300 --> 01:24:18,400
I never would have thought of that, but I just realized.

1435
01:24:18,400 --> 01:24:19,900
Yeah, we've never disabled the debug.

1436
01:24:19,900 --> 01:24:22,400
Keep on this machine, I normally do disable the debug keep.

1437
01:24:22,400 --> 01:24:25,300
I don't think I ever did hear disabled debug keep.

1438
01:24:26,000 --> 01:24:28,400
And if that was the case, then that would help a lot.

1439
01:24:30,900 --> 01:24:32,400
Where is, where is it?

1440
01:24:36,200 --> 01:24:37,000
No, no.

1441
01:24:37,000 --> 01:24:37,600
Here we go.

1442
01:24:39,600 --> 01:24:40,800
Let's see.

1443
01:24:41,400 --> 01:24:47,500
It is in advanced system settings, environment, variables, and then we

1444
01:24:47,500 --> 01:24:49,500
can set underscore.

1445
01:24:49,500 --> 01:24:51,800
No debug, keep equals 1.

1446
01:24:51,900 --> 01:24:53,700
Okay, let's give that a shot.

1447
01:24:54,300 --> 01:24:58,400
So actually let's let's give it a shot for for realsies.

1448
01:24:58,900 --> 01:25:05,100
Go ahead and put it in here into misc shelled up at.

1449
01:25:06,000 --> 01:25:08,700
And let's go ahead and spray it upset that

1450
01:25:13,100 --> 01:25:14,700
so set.

1451
01:25:18,100 --> 01:25:24,300
No, debug keep people's one and save that.

1452
01:25:26,200 --> 01:25:29,500
So there we go, close that out.

1453
01:25:30,300 --> 01:25:38,000
Close this out, close that out and see what happens if we go back in.

1454
01:25:38,800 --> 01:25:43,000
So, all right, so no, debug keep equals 1, which is what we want.

1455
01:25:43,000 --> 01:25:46,700
We launched, Ms, Dev which will inherit our environment variables here

1456
01:25:47,000 --> 01:25:47,700
and we run

1457
01:25:49,900 --> 01:25:53,600
Well, it's probably a little faster.

1458
01:25:53,900 --> 01:25:57,800
It's definitely faster but it's not as fast as I might have liked.

1459
01:26:00,900 --> 01:26:04,400
Let's try, let's see what happens if we start without debugging.

1460
01:26:05,000 --> 01:26:07,900
So that's going to be in.

1461
01:26:08,400 --> 01:26:10,500
Where is that was run?

1462
01:26:10,600 --> 01:26:11,500
I just want run.

1463
01:26:14,600 --> 01:26:15,800
Do we have a run here somewhere?

1464
01:26:15,800 --> 01:26:18,800
People project just run?

1465
01:26:18,900 --> 01:26:19,400
Hello.

1466
01:26:21,200 --> 01:26:22,500
Is it like shifter 5?

1467
01:26:25,400 --> 01:26:27,600
Used to be this is not anymore.

1468
01:26:28,500 --> 01:26:30,500
There must be some way to start without debugging there.

1469
01:26:30,500 --> 01:26:34,100
Always was in the past I guess I never really do that anymore but

1470
01:26:34,100 --> 01:26:35,000
there it is right there.

1471
01:26:35,000 --> 01:26:36,100
Control F5.

1472
01:26:36,100 --> 01:26:37,300
Alright let's try control F5.

1473
01:26:40,000 --> 01:26:43,000
I think that's as fast as it's going to get, unfortunately.

1474
01:26:44,600 --> 01:26:47,800
That's still kind of slow but like I said, we can get real, we can get

1475
01:26:47,800 --> 01:26:48,400
rid of that.

1476
01:26:50,600 --> 01:26:53,800
We can get rid of the extra context, frisson that may help, right?

1477
01:26:57,000 --> 01:26:59,800
but I think that may have helped a little because it

1478
01:27:00,000 --> 01:27:00,500
Much.

1479
01:27:01,000 --> 01:27:01,800
I feel like it was.

1480
01:27:02,200 --> 01:27:04,100
I feel like it was much lower than that before.

1481
01:27:04,100 --> 01:27:06,200
I feel like that did give us a little bit of a boost.

1482
01:27:12,600 --> 01:27:13,200
Soy sauce.

1483
01:27:13,200 --> 01:27:15,700
The kid is the fixed function g l stuff, still viable.

1484
01:27:15,700 --> 01:27:19,000
I want to do a grid Shader but the examples I'm finding are for Jill.

1485
01:27:19,000 --> 01:27:22,700
Sl3, I'm using glsl one on a Raspberry Pi.

1486
01:27:25,500 --> 01:27:27,500
Yeah, glsl one's pretty old.

1487
01:27:29,200 --> 01:27:30,600
And the fixed function g l stuff.

1488
01:27:30,600 --> 01:27:34,500
Is you really wouldn't like even we probably won't end up using that

1489
01:27:34,500 --> 01:27:35,700
in handmade hero.

1490
01:27:35,800 --> 01:27:39,800
I mean, we might still use GL vertex because we don't really probably

1491
01:27:39,800 --> 01:27:42,700
need anything there but yeah.

1492
01:27:44,000 --> 01:27:45,100
Oh, that wasn't a question.

1493
01:27:45,100 --> 01:27:47,400
Okay, nevermind, I'm sorry, right.

1494
01:27:53,400 --> 01:27:56,500
So yeah, just in case it was wondering what that was Visual Studio.

1495
01:27:56,500 --> 01:28:00,500
Has this debug Heap stuff that it enables and what happens is, if the

1496
01:28:00,900 --> 01:28:05,300
code that's running under the under the original Studio, has a bunch

1497
01:28:05,300 --> 01:28:05,500
of

1498
01:28:07,800 --> 01:28:10,200
Has a lots and lots and lots and lots and lots and lots of calls and

1499
01:28:10,200 --> 01:28:13,800
Malik which you know C++ happy code tends to do.

1500
01:28:16,200 --> 01:28:16,800
Yeah.

1501
01:28:16,800 --> 01:28:18,500
It's it ends up.

1502
01:28:18,500 --> 01:28:22,700
Slowing it down tremendously so I tried turning that off but it looks

1503
01:28:22,700 --> 01:28:25,600
like the am decode still pretty slow either way.

1504
01:28:25,900 --> 01:28:28,700
Now like I said, I think we'll still be able to do something about

1505
01:28:28,700 --> 01:28:34,700
that by not creating those extra debug contexts, so we can try that

1506
01:28:34,800 --> 01:28:37,400
and see but you just

1507
01:28:37,600 --> 01:28:42,100
No, like our startup time was, they'll a lot faster before, so before

1508
01:28:42,100 --> 01:28:44,800
we switch to the opengl context creation, so I'd like to get some of

1509
01:28:44,800 --> 01:28:45,400
that back.

1510
01:28:47,400 --> 01:28:50,700
Alright, that's about it.

1511
01:28:52,600 --> 01:28:54,900
Pretty day going to close down.

1512
01:28:59,000 --> 01:29:02,900
All right, thank you, everyone for joining me for another episode of

1513
01:29:02,900 --> 01:29:03,400
handmade here.

1514
01:29:03,400 --> 01:29:04,700
It's been a pleasure coding with you.

1515
01:29:04,700 --> 01:29:07,200
As always, if you would like to follow along the series at home, you

1516
01:29:07,200 --> 01:29:10,900
can always pure to the game on handmade here at a torque and it comes

1517
01:29:10,900 --> 01:29:11,500
to the source code.

1518
01:29:11,500 --> 01:29:13,100
So you can follow along at home.

1519
01:29:13,500 --> 01:29:16,200
We also have a forum site, you can go to to ask questions, we have a

1520
01:29:16,200 --> 01:29:19,000
patreon page, you can go to if you'd like to put the video series and

1521
01:29:19,000 --> 01:29:21,800
we have a tweet but you can look at if you would like to know what the

1522
01:29:21,800 --> 01:29:22,400
schedule is.

1523
01:29:22,400 --> 01:29:27,600
And speaking of the schedule, we are going to be back here next week.

1524
01:29:27,600 --> 01:29:28,500
I don't know what the

1525
01:29:28,700 --> 01:29:32,100
Jewel for the week will be but that tweet but is the right place to go

1526
01:29:32,100 --> 01:29:35,000
to find out until then.

1527
01:29:37,000 --> 01:29:40,400
I guess what I would say is if you're looking for more handmade hero,

1528
01:29:41,000 --> 01:29:46,200
handmade handmade after dark, which is f Yukon on the tweet on the

1529
01:29:46,200 --> 01:29:51,700
streams, sort of Chat Show, which has people from handmade hero will

1530
01:29:51,700 --> 01:29:55,700
be live tomorrow at 5 p.m.

1531
01:29:55,700 --> 01:29:58,800
eastern time, which is going to be 2 p.m.

1532
01:29:58,800 --> 01:29:59,800
Pacific Daylight Time.

1533
01:30:01,900 --> 01:30:07,200
Tomorrow and I will be on the show as well as he and coronal Dragon,

1534
01:30:07,200 --> 01:30:12,800
and also stream Zack who I don't know, it was on the stream today but

1535
01:30:12,800 --> 01:30:13,600
sometimes he is.

1536
01:30:14,100 --> 01:30:18,400
So if you would like to see that you can check out handmade after

1537
01:30:18,400 --> 01:30:23,100
dark, it looks like in sohbat is tweeting that link for you as well?

1538
01:30:23,700 --> 01:30:26,000
And so I'll be there tomorrow.

1539
01:30:26,000 --> 01:30:27,100
Hope to see you guys there.

1540
01:30:27,700 --> 01:30:28,800
Until then take it.

1541
01:30:28,800 --> 01:30:29,200
Easy.

1542
01:30:29,200 --> 01:30:30,200
Have fun programming and

1543
01:30:30,300 --> 01:30:31,900
I will see you guys on the internet.

