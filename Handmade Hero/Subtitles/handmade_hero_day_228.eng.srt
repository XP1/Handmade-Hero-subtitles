1
00:00:02,700 --> 00:00:04,100
Already.

2
00:00:07,300 --> 00:00:10,500
Welcome, everyone, to another episode of handmade hero.

3
00:00:10,700 --> 00:00:11,000
The show.

4
00:00:11,000 --> 00:00:12,700
We code complete game live on stream.

5
00:00:12,700 --> 00:00:17,500
Now, I don't know if I'm supposed to say who it is.

6
00:00:18,500 --> 00:00:24,700
So I'm not going to until I get official permission, but I do want to

7
00:00:24,700 --> 00:00:25,700
share with you something.

8
00:00:25,700 --> 00:00:30,100
I received in the mail today which is that, you all, of course, know

9
00:00:30,100 --> 00:00:31,500
the owl of shame.

10
00:00:32,299 --> 00:00:34,700
But I received in the mail

11
00:00:35,500 --> 00:00:39,400
The owl, shame baby, which is kind of amazing.

12
00:00:39,700 --> 00:00:40,000
Right.

13
00:00:40,000 --> 00:00:44,400
It's exactly like the Alice shame, but smaller and cuter.

14
00:00:45,200 --> 00:00:49,700
Now the note that came with it suggested that it should be the outlet

15
00:00:49,700 --> 00:00:52,800
of guilt, but I don't really know.

16
00:00:53,700 --> 00:00:58,800
I think it may just be a lechaim baby in my mind and like when you

17
00:00:58,800 --> 00:01:01,700
have something that's only a little bit shameful and it's not as

18
00:01:01,700 --> 00:01:04,500
shameful, then out the baby comes out.

19
00:01:04,500 --> 00:01:05,200
But when you have

20
00:01:05,300 --> 00:01:10,100
Really shameful, then the big, you know, Big Mama comes out, and so

21
00:01:10,100 --> 00:01:14,400
I'm going to keep both owls available so that depending on the size of

22
00:01:14,400 --> 00:01:20,700
the screw up, I can be shamed to the to the you know, extent that is

23
00:01:21,300 --> 00:01:24,100
commensurate with the mistake.

24
00:01:24,800 --> 00:01:28,100
So anyway, thank you very much for the baby L and like I said we'll

25
00:01:28,100 --> 00:01:32,400
have to we'll post an official, thank you to the Twitter if it's okay.

26
00:01:32,400 --> 00:01:34,700
I like I said, I don't want to say anyone's name on stream who doesn't

27
00:01:34,700 --> 00:01:35,100
want to be?

28
00:01:35,300 --> 00:01:38,800
Be named on stream but but thank you very much for sending, that's

29
00:01:38,800 --> 00:01:42,400
pretty awesome and I have a feeling it will show up on the stream the

30
00:01:42,400 --> 00:01:45,200
next time I make a baby mistake which let's face it.

31
00:01:45,700 --> 00:01:46,700
I make a lot of.

32
00:01:47,400 --> 00:01:47,900
All right.

33
00:01:48,100 --> 00:01:51,400
Today, we're doing just a little bit more work on our mode, switching

34
00:01:51,400 --> 00:01:51,700
stuff.

35
00:01:51,700 --> 00:01:52,800
Today is day 2, 28.

36
00:01:52,800 --> 00:01:55,100
So if you'd like to follow along at home and you have pre-ordered, the

37
00:01:55,100 --> 00:02:00,000
code on handmade here at org that's you want to start with de 227.

38
00:02:01,300 --> 00:02:05,100
And so, that is what I am starting with.

39
00:02:05,100 --> 00:02:05,700
Right now.

40
00:02:06,100 --> 00:02:10,400
I believe we essentially had everything done, except I told you there

41
00:02:10,400 --> 00:02:12,400
is a bug but was a bug.

42
00:02:12,400 --> 00:02:15,000
We can't really hit right now.

43
00:02:15,800 --> 00:02:20,700
It's a bug in the fact that we would have some threads accessing a

44
00:02:20,700 --> 00:02:24,600
mode after it was already gone but otherwise things are pretty much

45
00:02:24,600 --> 00:02:24,900
right?

46
00:02:25,000 --> 00:02:27,200
We have this like sort of placeholder for our title screen.

47
00:02:27,200 --> 00:02:30,700
This this red sort of clear here.

48
00:02:30,900 --> 00:02:33,700
Got to get some art for a title screen and then we go into our

49
00:02:33,700 --> 00:02:37,000
cutscene and we have our cutscene kind of going, right?

50
00:02:40,700 --> 00:02:44,400
And that's all good and we can enter the game and now we can sort of

51
00:02:44,400 --> 00:02:47,400
walk around and do our thing that we want to do.

52
00:02:47,900 --> 00:02:52,400
We can exit the game now and it will go back to the cutscene and it

53
00:02:52,400 --> 00:02:54,400
restarts properly now which is what it should.

54
00:02:54,600 --> 00:02:57,500
I think we should probably change it to go back to the title screen

55
00:02:57,900 --> 00:02:59,800
but you know either way it's trivial

56
00:03:00,000 --> 00:03:01,400
Online change depending on which one we want.

57
00:03:01,900 --> 00:03:04,400
And then, of course, we can go back into the game again, right?

58
00:03:04,600 --> 00:03:06,700
And so, all that feels pretty good.

59
00:03:06,700 --> 00:03:09,800
But like I said, there's some stuff that I think we want to address

60
00:03:09,800 --> 00:03:12,800
their in terms of making this a little bit more solid.

61
00:03:12,800 --> 00:03:16,500
One of them of course is the thread bug that I was talking about where

62
00:03:16,500 --> 00:03:19,800
like we want to make sure that if a particular mode spawns, a bunch of

63
00:03:19,800 --> 00:03:20,200
threads.

64
00:03:20,200 --> 00:03:23,100
We need a way for it to clean up those threads when it when it ends.

65
00:03:23,100 --> 00:03:27,200
So that it knows when it can actually shut down the mode for reals.

66
00:03:27,300 --> 00:03:30,000
And the other thing that we need to do is we need to

67
00:03:30,000 --> 00:03:35,400
To make sure that we can create separate standing modes for doing

68
00:03:35,400 --> 00:03:39,600
stuff like maybe pre like, I don't know what you want to call it but

69
00:03:39,600 --> 00:03:44,600
like pre ceding like like the way that we were prefetching.

70
00:03:45,300 --> 00:03:46,400
The cutscene stuff.

71
00:03:46,700 --> 00:03:49,100
It would be nice if we could do something like that as well.

72
00:03:49,100 --> 00:03:54,000
Probably because we want to be able to do stuff like when we go to

73
00:03:54,000 --> 00:03:58,800
start the cutscene we may want to be able to to prefetch into it or I

74
00:03:58,800 --> 00:03:59,400
don't even know.

75
00:03:59,400 --> 00:03:59,800
I don't

76
00:04:00,000 --> 00:04:03,600
No, but point being, I could see there being away at a time when we

77
00:04:03,600 --> 00:04:04,200
would want to do that.

78
00:04:04,200 --> 00:04:06,800
So I'm that might be also something to look into eye.

79
00:04:07,100 --> 00:04:09,100
It might be something also to put off, I don't know.

80
00:04:09,100 --> 00:04:11,700
But at the very least, I feel like we got to take care of that thread

81
00:04:11,700 --> 00:04:15,400
bug situation, even though, I don't know that we're going to use the

82
00:04:15,400 --> 00:04:18,500
ground chunk, compositing stuff in the end.

83
00:04:20,000 --> 00:04:23,900
I guess what I would say is just because the ground chunk stuff might

84
00:04:23,900 --> 00:04:28,300
not be used, doesn't mean we won't want to have there be some thread

85
00:04:28,300 --> 00:04:30,600
stuff that does happen, right?

86
00:04:30,900 --> 00:04:33,200
So that's where we're at at the moment.

87
00:04:33,500 --> 00:04:37,200
And then I feel like after that gets taken care of, I feel like I want

88
00:04:37,200 --> 00:04:38,100
to maybe.

89
00:04:38,600 --> 00:04:42,000
I feel like after we come back from break, I feel like I want to maybe

90
00:04:42,000 --> 00:04:45,800
go back to the debug code a little bit and finish up the stuff that we

91
00:04:45,800 --> 00:04:46,200
did there.

92
00:04:46,200 --> 00:04:49,600
Just so we can have that in place because I think we're mostly there.

93
00:04:49,800 --> 00:04:51,800
In terms of stuff for gameplay code.

94
00:04:51,800 --> 00:04:55,900
And I kind of want to start that and, you know, have the New Year

95
00:04:55,900 --> 00:04:58,700
bhosle be spent doing new gameplay stuff.

96
00:04:58,900 --> 00:05:01,900
And so, you know, we just got a few things left to take care of, get

97
00:05:01,900 --> 00:05:05,500
the debug code in good shape, get the renderer like, we got to put a

98
00:05:05,500 --> 00:05:09,300
sort in the renderer and do a little bit of lighting work and then I

99
00:05:09,300 --> 00:05:10,800
think we're mostly good.

100
00:05:11,000 --> 00:05:13,700
So I want to just take care of that stuff so we can get get on with

101
00:05:13,700 --> 00:05:14,200
things.

102
00:05:15,100 --> 00:05:18,900
So, yeah, let me just quickly sketch out what I think that particular

103
00:05:18,900 --> 00:05:19,600
problem is

104
00:05:19,800 --> 00:05:23,700
So we have this concept now of this game mode, right?

105
00:05:23,700 --> 00:05:27,500
And so, we've got this this notion here that says like, okay, you

106
00:05:27,500 --> 00:05:30,400
remember this game State used to be this huge thing and now it's

107
00:05:30,400 --> 00:05:32,100
broken up into two different parts.

108
00:05:32,100 --> 00:05:34,400
So there's stuff for the title screen stuff for the cuts and stuff for

109
00:05:34,400 --> 00:05:35,100
the world mode.

110
00:05:36,300 --> 00:05:39,600
When you're actually playing and then it has some stuff that persists,

111
00:05:39,600 --> 00:05:39,800
right?

112
00:05:39,800 --> 00:05:41,200
So all that stuff is the way it is.

113
00:05:45,200 --> 00:05:49,600
But if you take a look at how this works, you can kind of see that.

114
00:05:49,600 --> 00:05:52,700
Well, there's this notion that we, you know, have this sort of game

115
00:05:52,700 --> 00:05:53,400
mode or whatever.

116
00:05:53,400 --> 00:05:57,300
And then we also have this this notion of tasks with memory like down

117
00:05:57,300 --> 00:05:59,400
here, this tasks that are that are running.

118
00:06:00,000 --> 00:06:06,800
Maybe working on something specific in the, you know, in that

119
00:06:06,800 --> 00:06:07,800
particular game mode.

120
00:06:07,900 --> 00:06:10,700
And when we close the game mode, we would like that to go away.

121
00:06:11,000 --> 00:06:14,200
Now, we have two choices of what how we can approach this problem?

122
00:06:15,200 --> 00:06:19,800
Choice, number one is to say that actually we don't ever associate

123
00:06:20,200 --> 00:06:22,200
things in this way, right?

124
00:06:22,300 --> 00:06:28,000
Like for example just to just to maybe give you a little bit of a

125
00:06:28,000 --> 00:06:29,400
perspective on what's Happening.

126
00:06:30,000 --> 00:06:34,500
For example, in the asset system right now we have a bunch of tasks

127
00:06:34,500 --> 00:06:38,100
that are running to load assets off of disk dynamically.

128
00:06:38,100 --> 00:06:39,500
That's our streaming system, right?

129
00:06:39,500 --> 00:06:42,000
It's to make it so that we don't have loading screens and don't have

130
00:06:42,000 --> 00:06:44,700
pauses and stuff in the gameplay.

131
00:06:46,100 --> 00:06:48,800
But you may ask.

132
00:06:48,800 --> 00:06:51,200
Why did those why are those tasks?

133
00:06:51,300 --> 00:06:55,100
Not a problem whereas the ground chunk tasks are right?

134
00:06:55,100 --> 00:06:57,900
Why don't why am I not worried about this asset loading things?

135
00:06:58,400 --> 00:07:01,300
Well that's because the asset system is totally decoupled from the

136
00:07:01,300 --> 00:07:02,000
game mode.

137
00:07:02,000 --> 00:07:05,300
The asset system just knows it has to load assets and it manages the

138
00:07:05,300 --> 00:07:08,400
asset store and that stuff doesn't have anything to do with what mode

139
00:07:08,400 --> 00:07:08,800
you're in.

140
00:07:09,000 --> 00:07:11,800
So it doesn't matter whether it's loading assets for the title screen,

141
00:07:11,800 --> 00:07:15,000
or for the world mode, or for the cutscenes or whatever those tasks

142
00:07:15,000 --> 00:07:15,600
are just doing their

143
00:07:15,700 --> 00:07:19,700
Thing and they never depend on any of the data that's in here.

144
00:07:19,700 --> 00:07:20,800
They're completely decoupled.

145
00:07:21,500 --> 00:07:24,200
So the only kind of thing that we're talking about here is we're

146
00:07:24,200 --> 00:07:27,800
talking about tasks that work directly on data, that's in one of the

147
00:07:27,800 --> 00:07:28,500
game modes.

148
00:07:29,200 --> 00:07:32,100
And furthermore, we're talking about task because we have another set

149
00:07:32,100 --> 00:07:33,500
of tasks, right?

150
00:07:33,700 --> 00:07:35,100
Which is the renderer tasks.

151
00:07:35,800 --> 00:07:37,000
Why don't we care about those?

152
00:07:37,000 --> 00:07:40,400
Well, those tasks, all get spawned and stopped.

153
00:07:41,400 --> 00:07:45,600
In the middle of one frame, they never hang around outside the frame.

154
00:07:45,900 --> 00:07:48,800
So when you change game modes, you don't care about those tests

155
00:07:48,800 --> 00:07:50,600
because, you know, none of them are running.

156
00:07:50,700 --> 00:07:53,100
They don't span a frame boundary like that.

157
00:07:53,700 --> 00:07:57,200
So, the only task we actually care about our task switch access.

158
00:07:57,200 --> 00:07:59,200
The game's mode state.

159
00:07:59,900 --> 00:08:01,600
So something in one of these guys,

160
00:08:03,000 --> 00:08:09,100
And which persist so they, you know, they'll happen over multiple

161
00:08:09,100 --> 00:08:10,300
frames right now.

162
00:08:10,300 --> 00:08:12,400
Ground chunks are the only things we have that do that.

163
00:08:12,600 --> 00:08:14,100
So we have two choices.

164
00:08:14,600 --> 00:08:18,200
Choice number one is say we're not going to have any tasks like that,

165
00:08:18,300 --> 00:08:18,600
right?

166
00:08:18,600 --> 00:08:20,000
We could just say we don't want to do that.

167
00:08:24,400 --> 00:08:27,900
That's an option and choice.

168
00:08:27,900 --> 00:08:31,600
Number two, is that we track them in a way that allows us to shut them

169
00:08:31,600 --> 00:08:33,299
down when the mode is changed.

170
00:08:33,799 --> 00:08:34,700
That's what we can do.

171
00:08:35,500 --> 00:08:39,100
So I don't know which is the better answer there and the reason that I

172
00:08:39,100 --> 00:08:41,299
don't know, which is the better answers because I don't know what we

173
00:08:41,299 --> 00:08:43,900
will actually need in the finished game.

174
00:08:44,600 --> 00:08:49,500
So my gut instinct normally would be to just probably get rid of them

175
00:08:49,800 --> 00:08:52,500
because I feel like after having done some of the design stuff, it

176
00:08:52,500 --> 00:08:54,000
seemed to me like probably

177
00:08:54,400 --> 00:08:57,800
I wouldn't really be able to use the ground chunk stuff much because

178
00:08:57,800 --> 00:08:59,700
the way the design was going dynamically

179
00:09:00,100 --> 00:09:03,000
Eating ground things like that wouldn't probably actually work very

180
00:09:03,000 --> 00:09:06,200
well or would be what I should say.

181
00:09:06,200 --> 00:09:09,400
Is it said of not work very well, it's something that is probably not

182
00:09:09,400 --> 00:09:10,100
necessary.

183
00:09:11,700 --> 00:09:12,600
For the most part.

184
00:09:13,900 --> 00:09:17,600
So yeah, it just seemed like something that probably at the end of the

185
00:09:17,600 --> 00:09:20,800
day is not really all that necessary to do.

186
00:09:21,600 --> 00:09:23,900
So my gut instinct would be to remove them.

187
00:09:24,300 --> 00:09:27,600
The only problem is, I don't know if maybe there's something else

188
00:09:27,600 --> 00:09:29,300
besides making ground chunks.

189
00:09:29,600 --> 00:09:33,800
That would, you know, that would span that, that space, right?

190
00:09:33,800 --> 00:09:39,000
Something that would take up, you know, sort of a bigger chunk of that

191
00:09:39,000 --> 00:09:39,400
time.

192
00:09:40,000 --> 00:09:41,300
And so, what I think I would

193
00:09:41,600 --> 00:09:45,800
A is the only thing I can think of that really falls into that

194
00:09:45,800 --> 00:09:51,000
category, might be World Generation and the reason I say that is

195
00:09:51,000 --> 00:09:55,300
because let's suppose that the game starts and the players trying to

196
00:09:55,300 --> 00:09:57,100
play the game since.

197
00:09:57,100 --> 00:10:02,500
I don't really want there to be much in the way of loading screens.

198
00:10:02,500 --> 00:10:04,600
Like, it don't want to stop the players experience ever.

199
00:10:05,500 --> 00:10:10,000
If generating the world takes 1020 seconds, 30 seconds depending on

200
00:10:10,000 --> 00:10:11,300
how complicated and how large

201
00:10:11,400 --> 00:10:14,100
World, it is if there's a lot of stuff that's going to create that

202
00:10:14,100 --> 00:10:18,600
world that's going to be a 30 second loading screen, right?

203
00:10:19,200 --> 00:10:21,600
And you've seen this in games before, like for example, when you try

204
00:10:21,600 --> 00:10:23,800
to start a game of Don't Starve, for example.

205
00:10:25,100 --> 00:10:28,100
You sit there watching it, say that it's generating the world or

206
00:10:28,100 --> 00:10:32,000
whatever and so if we don't want that we would have to do is just

207
00:10:32,000 --> 00:10:35,400
start the player so they can start playing in the first little area of

208
00:10:35,400 --> 00:10:36,100
the world.

209
00:10:36,200 --> 00:10:40,000
While in the background, we're going through, like, generating the

210
00:10:40,000 --> 00:10:41,400
rest of it, right?

211
00:10:42,200 --> 00:10:46,900
And so, I feel like that is something we probably would want.

212
00:10:47,300 --> 00:10:51,100
It seems very logical that we would want that and that will clearly

213
00:10:51,100 --> 00:10:52,800
have to happen over multiple frames.

214
00:10:53,500 --> 00:10:58,200
So I feel like that argues strongly enough to me that these tests have

215
00:10:58,200 --> 00:10:59,300
to be treated that way.

216
00:10:59,700 --> 00:11:03,700
So I think I will probably say let's go ahead and support it because

217
00:11:03,700 --> 00:11:06,900
even if I go ahead and pull the ground chunks out, so the ground

218
00:11:06,900 --> 00:11:10,400
chunks are no longer involved and we don't need this for them.

219
00:11:11,500 --> 00:11:16,200
I would still I would still need it for avoiding the loading screen in

220
00:11:16,200 --> 00:11:17,100
that situation.

221
00:11:17,600 --> 00:11:18,500
That's what I think.

222
00:11:19,100 --> 00:11:20,000
It's just what I think.

223
00:11:23,600 --> 00:11:25,300
All right, so how we gonna do this?

224
00:11:27,100 --> 00:11:30,100
Well, we have this concert of tasks with memory and that goes in the

225
00:11:30,100 --> 00:11:31,400
transient state right now.

226
00:11:32,100 --> 00:11:32,400
Right.

227
00:11:32,400 --> 00:11:35,000
We've got four different tasks with memory that are that are happening

228
00:11:35,000 --> 00:11:35,300
there.

229
00:11:35,800 --> 00:11:40,100
And I suppose really all I need to do is tag these things with whether

230
00:11:40,100 --> 00:11:44,800
or not they're going to have to be flushed out in the case where the

231
00:11:44,800 --> 00:11:46,100
game mode changes, right?

232
00:11:46,100 --> 00:11:49,200
So it's kind of like a, my dependent on a particular game mode would

233
00:11:49,200 --> 00:11:50,800
probably be all.

234
00:11:50,800 --> 00:11:53,900
I would really need to know for that to happen, right?

235
00:11:53,900 --> 00:11:54,100
At least.

236
00:11:54,100 --> 00:11:55,100
That's what I think.

237
00:11:55,100 --> 00:11:55,400
I'm not.

238
00:11:55,400 --> 00:11:56,100
100% sure.

239
00:11:56,100 --> 00:11:56,700
That's just what I think.

240
00:11:56,800 --> 00:11:57,100
Think.

241
00:11:58,300 --> 00:11:59,800
So let's go ahead and say that.

242
00:12:00,000 --> 00:12:00,500
Have that.

243
00:12:00,600 --> 00:12:03,500
Let's do a very simple version of this first one that's synchronous

244
00:12:03,500 --> 00:12:07,000
and that causes maybe a stall and then we can look at doing one that's

245
00:12:07,000 --> 00:12:10,000
better and that may get into the memory stuff that I kind of wanted to

246
00:12:10,000 --> 00:12:11,600
do anyway.

247
00:12:12,000 --> 00:12:13,300
So let's take a look.

248
00:12:14,700 --> 00:12:19,200
Let's say we have something that's like task with memory and maybe I

249
00:12:19,200 --> 00:12:24,600
want to do something where I say like okay in addition to tracking

250
00:12:24,600 --> 00:12:28,100
whether it's being used here, I'm also going to track something like,

251
00:12:28,100 --> 00:12:28,600
you know,

252
00:12:30,000 --> 00:12:33,000
Ends on game mode, you know what I'm saying?

253
00:12:33,700 --> 00:12:37,600
And so, then when we do our little tasks with memory thing where we

254
00:12:37,600 --> 00:12:40,400
have, like a task with memory begin, right?

255
00:12:40,400 --> 00:12:44,900
This thing here begin to ask with memory when we call that begin task

256
00:12:44,900 --> 00:12:45,600
with memory.

257
00:12:46,100 --> 00:12:49,800
I'm going to say, you know, does it depend on the game mode?

258
00:12:50,800 --> 00:12:55,000
And then when I create the actual task, I'm going to set depends on

259
00:12:55,000 --> 00:12:56,500
game mode to the correct value.

260
00:12:57,500 --> 00:12:58,200
That's all I'm doing good.

261
00:12:58,200 --> 00:13:03,000
I'm doing the very simplest thing that will solve the problem and of

262
00:13:03,000 --> 00:13:05,200
course I should probably also change the definition here.

263
00:13:05,600 --> 00:13:09,800
32 depends on game mode and so now I can just look and see who uses

264
00:13:09,800 --> 00:13:10,300
that.

265
00:13:10,300 --> 00:13:18,300
Well obviously load bitmap doesn't right, sound is not good.

266
00:13:18,300 --> 00:13:19,300
Font is not.

267
00:13:20,400 --> 00:13:24,000
And so then we just got begin task with memory in for the ground

268
00:13:24,000 --> 00:13:24,300
chunk.

269
00:13:24,300 --> 00:13:25,500
And this is the one that does.

270
00:13:25,700 --> 00:13:27,200
So now I know which ones do

271
00:13:27,900 --> 00:13:29,800
And we're good to go, right?

272
00:13:30,300 --> 00:13:34,400
So now what I can do is say when we are going to clear the game mode I

273
00:13:34,400 --> 00:13:37,800
can do the simplest possible thing, like I said that maybe isn't the

274
00:13:37,800 --> 00:13:42,200
most performant and I can just ensure that all of those tasks closed

275
00:13:42,200 --> 00:13:42,700
down.

276
00:13:43,500 --> 00:13:46,100
And so, the way I can do that is when we go to set game mode and I

277
00:13:46,100 --> 00:13:48,800
clear out the motor, me know what I can do is write before that.

278
00:13:48,800 --> 00:13:55,500
You remember, we have the ability to wait on tasks to finish, and I

279
00:13:55,500 --> 00:13:57,200
don't remember exactly.

280
00:13:57,300 --> 00:13:57,600
Actly.

281
00:13:57,600 --> 00:13:58,800
How we do that?

282
00:13:59,200 --> 00:14:03,900
It's something like you tiled render work.

283
00:14:03,900 --> 00:14:05,300
Oh, it's in the optimized version.

284
00:14:05,800 --> 00:14:10,900
Let's see here, render tiled render here, it is.

285
00:14:11,800 --> 00:14:16,600
So you can see it happening here where we do this, this output stuff.

286
00:14:16,800 --> 00:14:19,300
We have platform complete, all work render queue.

287
00:14:20,100 --> 00:14:23,900
So, what I can do there is, I can easily sort of wait for all of that

288
00:14:23,900 --> 00:14:26,900
to happen and then and then

289
00:14:27,300 --> 00:14:28,900
Only at that point, right?

290
00:14:29,000 --> 00:14:33,000
So I could say something like, oh okay, complete everything that was

291
00:14:33,000 --> 00:14:33,900
going to happen.

292
00:14:34,700 --> 00:14:39,100
As far as the, the game state is concerned, right?

293
00:14:39,100 --> 00:14:40,700
So the I forget what this would be this.

294
00:14:40,700 --> 00:14:42,500
We'd actually need the transient State here.

295
00:14:42,500 --> 00:14:43,900
I believe because we need that Q.

296
00:14:43,900 --> 00:14:46,000
Although I guess that's in the game memory.

297
00:14:48,500 --> 00:14:50,100
Kind of remember exactly how we did this.

298
00:14:50,300 --> 00:14:52,700
But that's the low priority queue here, right?

299
00:14:53,000 --> 00:14:56,400
And so what we could do is say like okay, you know, wait for

300
00:14:56,400 --> 00:14:58,500
everything in the low priority queue to finish.

301
00:14:59,100 --> 00:14:59,900
And then off, we

302
00:15:00,500 --> 00:15:03,200
All right, so we would need the transient State here.

303
00:15:06,400 --> 00:15:08,900
And we would need to wait for that to finish.

304
00:15:12,200 --> 00:15:16,000
Now, we actually only need to wait for it to finish, if there's

305
00:15:16,000 --> 00:15:18,800
anything that's actually depends on the game state, but, you know,

306
00:15:19,500 --> 00:15:20,600
presumably that's fine.

307
00:15:21,200 --> 00:15:21,900
That makes sense.

308
00:15:22,600 --> 00:15:26,000
So we can do that and we can also do something that's like need to

309
00:15:26,000 --> 00:15:27,000
wait, right?

310
00:15:27,200 --> 00:15:30,500
And you could then go like, okay, take a look and see if anybody in

311
00:15:30,500 --> 00:15:33,500
there is actually doing anything that we care about.

312
00:15:33,800 --> 00:15:41,000
So, we basically say, okay, you know, task and x equals 0 task and X

313
00:15:41,000 --> 00:15:41,800
is less than

314
00:15:42,300 --> 00:15:47,600
Translate it count and state tasks.

315
00:15:50,000 --> 00:15:52,000
Task Index, right?

316
00:15:52,200 --> 00:15:55,700
So I can do something like that and say you need to wait, equals need

317
00:15:55,700 --> 00:15:59,400
to wait or tasks.

318
00:16:01,700 --> 00:16:02,900
Whatever this task is.

319
00:16:04,600 --> 00:16:06,100
Depends on game mode.

320
00:16:06,500 --> 00:16:10,500
So if any of these depend on the game mode then I will force them to

321
00:16:10,500 --> 00:16:11,800
complete all work.

322
00:16:13,300 --> 00:16:14,800
Otherwise, I won't.

323
00:16:15,700 --> 00:16:17,100
So, let's take a look at that.

324
00:16:19,200 --> 00:16:21,400
Task memory does not have never would operator.

325
00:16:22,600 --> 00:16:24,300
That is true.

326
00:16:25,100 --> 00:16:30,000
Yeah, and now we would just need set game mode to actually get that

327
00:16:30,000 --> 00:16:31,400
thing that it needs.

328
00:16:31,400 --> 00:16:33,500
Get the, the additional state that it needs.

329
00:16:33,800 --> 00:16:35,800
So it would need the transient state

330
00:16:38,100 --> 00:16:39,300
In order to wait on that cue.

331
00:16:41,000 --> 00:16:41,800
And that's it.

332
00:16:42,300 --> 00:16:47,000
Now it does strike me as slightly odd.

333
00:16:47,800 --> 00:16:51,400
Well, like, I feel like almost that should have been in the game State

334
00:16:51,400 --> 00:16:55,300
struct because it's not really all that transient if it's something

335
00:16:55,300 --> 00:16:57,000
that depends on the game mode, I guess.

336
00:16:57,000 --> 00:16:58,700
But it's hard to say.

337
00:16:59,100 --> 00:17:04,800
Anyway, point being, when we do set game mode again that needs to kind

338
00:17:04,800 --> 00:17:08,599
of have the transient State come through, and it's kind of annoying to

339
00:17:08,599 --> 00:17:09,400
have to pass these.

340
00:17:09,400 --> 00:17:10,300
So I do wonder if

341
00:17:10,500 --> 00:17:14,800
Actually, just collapse them and do some, some fancier footwork there.

342
00:17:14,800 --> 00:17:18,500
But either way, I'm just going to do the mechanical process for now

343
00:17:18,500 --> 00:17:22,900
and that's something we can obviously fix or futz with a little bit

344
00:17:22,900 --> 00:17:23,300
later.

345
00:17:24,599 --> 00:17:27,500
So let's go ahead and that in there.

346
00:17:30,400 --> 00:17:34,500
And now we got to push that out one more because those are going to be

347
00:17:35,400 --> 00:17:41,500
in here, those aremy lofted up here and so they need transient state.

348
00:17:44,800 --> 00:17:45,400
What's that?

349
00:17:48,200 --> 00:17:49,600
Okay.

350
00:17:52,100 --> 00:17:53,400
Play into a cutscene.

351
00:17:53,900 --> 00:17:55,100
He's trance state.

352
00:17:56,700 --> 00:17:59,400
And may or may not have it play title screen.

353
00:17:59,400 --> 00:17:59,600
These

354
00:18:02,600 --> 00:18:03,800
That one doesn't have it.

355
00:18:06,000 --> 00:18:09,000
So that would just be transient state.

356
00:18:11,400 --> 00:18:14,200
And if it getting past the translate then I can just get the assets

357
00:18:14,200 --> 00:18:17,700
from there because that's already in there right?

358
00:18:18,400 --> 00:18:18,900
Playing intro.

359
00:18:18,900 --> 00:18:20,200
Cutscene same thing.

360
00:18:30,100 --> 00:18:35,300
So there we go and think that's probably most of what we would have to

361
00:18:35,300 --> 00:18:35,700
do.

362
00:18:36,000 --> 00:18:39,700
Transient state has not been initialized yet at that point.

363
00:18:41,500 --> 00:18:45,800
And so that would need to that would need to happen a little bit

364
00:18:45,800 --> 00:18:46,300
lower.

365
00:18:47,800 --> 00:18:52,500
And so that would be something where that looks like something where

366
00:18:52,500 --> 00:18:54,600
we would probably want to introduce the thing I was talking about

367
00:18:54,600 --> 00:18:57,100
before, so I feel like we would want something we're in here.

368
00:18:57,100 --> 00:19:00,600
We say game mode, none, right.

369
00:19:00,700 --> 00:19:04,800
And then, what I would do is say okay, on Startup, you know, when we

370
00:19:04,800 --> 00:19:09,600
actually start up after initialization, like these two guys,

371
00:19:10,200 --> 00:19:12,400
Miss going to say, all right.

372
00:19:13,100 --> 00:19:19,200
Play the intro cutscene, if the game State game mode equals game mode

373
00:19:19,200 --> 00:19:19,500
men,

374
00:19:21,500 --> 00:19:26,500
And that way, I know that each of these guys are initialized, that's

375
00:19:26,500 --> 00:19:27,200
about it.

376
00:19:27,200 --> 00:19:27,800
I think.

377
00:19:29,000 --> 00:19:29,400
Oops.

378
00:19:35,800 --> 00:19:38,100
And play worlds.

379
00:19:39,500 --> 00:19:40,800
Also needs to get that.

380
00:19:40,800 --> 00:19:44,900
So let's take a look at play World world Road.

381
00:19:46,700 --> 00:19:47,900
Guess the transit state.

382
00:19:52,100 --> 00:19:54,300
Okay, so I think that's it.

383
00:19:55,700 --> 00:19:56,500
Hopefully, anyway.

384
00:19:57,200 --> 00:19:57,500
Oops.

385
00:19:57,500 --> 00:19:58,100
No one more.

386
00:20:04,800 --> 00:20:05,500
and,

387
00:20:09,000 --> 00:20:09,400
Done.

388
00:20:11,300 --> 00:20:15,300
So, in theory now we are good to go.

389
00:20:17,000 --> 00:20:21,200
At least, I think but we do have one of the things that I want to look

390
00:20:21,200 --> 00:20:21,600
at.

391
00:20:22,300 --> 00:20:24,000
But let's go ahead and see if this works, right?

392
00:20:24,200 --> 00:20:27,400
Okay so there we go, here's this coming into the game here.

393
00:20:27,400 --> 00:20:31,100
Is this exiting out of the game right now here's this coming back into

394
00:20:31,100 --> 00:20:32,900
the game so that's all good.

395
00:20:32,900 --> 00:20:35,600
I may also want to make it so that when you exit out of the game

396
00:20:35,800 --> 00:20:39,000
instead of playing the intro cutscene to plays the title screen if

397
00:20:39,000 --> 00:20:39,800
that makes sense.

398
00:20:40,600 --> 00:20:41,400
Oops, not there.

399
00:20:43,100 --> 00:20:43,600
But here.

400
00:20:47,500 --> 00:20:50,100
So, in where is it?

401
00:20:50,200 --> 00:20:51,700
It's actually enrolled mode I guess.

402
00:20:54,200 --> 00:20:57,600
When we do this, when there's no more Heroes left, I would like at

403
00:20:57,600 --> 00:20:59,700
that point to go back to the title screen.

404
00:21:00,000 --> 00:21:02,500
Because you know, that just makes a little more sense.

405
00:21:02,900 --> 00:21:03,400
Right.

406
00:21:03,800 --> 00:21:07,400
So there's one more thing that I want to look at which we did sort of

407
00:21:07,400 --> 00:21:11,600
silently before and I kind of want to make sure that we actually go

408
00:21:11,600 --> 00:21:15,400
look at it now and I'm going to show you kind of a little trick.

409
00:21:15,400 --> 00:21:15,800
So, here we go.

410
00:21:15,800 --> 00:21:16,900
Back to the title screen, right?

411
00:21:16,900 --> 00:21:19,100
And then we can jump into the game title screen.

412
00:21:19,100 --> 00:21:20,800
If you let the telescreen schedule, go to the cutscene.

413
00:21:26,200 --> 00:21:27,600
And there we go, right?

414
00:21:28,300 --> 00:21:29,400
That's all there is to that.

415
00:21:30,400 --> 00:21:32,400
So anyway, point being

416
00:21:35,800 --> 00:21:38,200
If you'll notice we hit F5.

417
00:21:38,200 --> 00:21:41,300
It takes a while before that Fade Out starts and that's new.

418
00:21:41,500 --> 00:21:47,600
If you remember when then actually happened that happened when we

419
00:21:47,600 --> 00:21:55,900
first added clear 20 on push and what I suspect is happening is since

420
00:21:55,900 --> 00:21:59,200
we are clearing all of our memory, 20, probably a very large

421
00:21:59,200 --> 00:22:02,800
allocation, that happens gets cleared to zero due to our automatic

422
00:22:02,800 --> 00:22:05,000
clearing now that we probably don't want to do.

423
00:22:05,700 --> 00:22:09,900
I suspect that I can cheat without actually using any profiling by

424
00:22:09,900 --> 00:22:12,200
using debug break all.

425
00:22:12,400 --> 00:22:16,500
So, if I just run the game and do break all, I should say, hey, look,

426
00:22:17,000 --> 00:22:20,500
I should be able to break in the that giant clear of the chunk.

427
00:22:21,800 --> 00:22:26,700
And hey, you can see exactly what's going on here, right?

428
00:22:28,800 --> 00:22:33,100
You can actually see that it's asking not to clear 20 and and this is

429
00:22:33,100 --> 00:22:35,000
still going to clear it to 0, right?

430
00:22:35,100 --> 00:22:38,000
So in this thing that's making the empty bitmap that's going through

431
00:22:38,000 --> 00:22:40,300
all the ground buffers, its clearing them all for no reason

432
00:22:40,300 --> 00:22:41,000
whatsoever.

433
00:22:42,000 --> 00:22:43,700
So that's just kind of.

434
00:22:44,200 --> 00:22:44,600
Yeah.

435
00:22:44,800 --> 00:22:46,600
I mean, you see what I'm saying?

436
00:22:46,600 --> 00:22:47,200
Right?

437
00:22:48,100 --> 00:22:52,500
And so, I feel like that's something we probably want to address and I

438
00:22:52,500 --> 00:22:57,000
would like to address it now before it gets any more out of hand and I

439
00:22:57,000 --> 00:22:58,200
think you can also see.

440
00:22:59,900 --> 00:23:02,300
Like this right here, would clear a giant block.

441
00:23:03,000 --> 00:23:06,200
So, I want to to address that.

442
00:23:06,300 --> 00:23:08,700
And here's how I'm going to dress that since we've got time on today's

443
00:23:08,700 --> 00:23:11,400
string before we head out for Christmas break.

444
00:23:11,400 --> 00:23:14,900
I want to address that and the way that I want a dress that is I'm

445
00:23:14,900 --> 00:23:17,800
going to change the way that push works.

446
00:23:18,600 --> 00:23:22,800
So the way that I want Push to work now is I want Push to take two

447
00:23:22,800 --> 00:23:23,400
things.

448
00:23:23,400 --> 00:23:26,600
I wanted to take the alignment and whether we cleared a 0 because we

449
00:23:26,600 --> 00:23:28,200
just straight up made clear, 20, be a

450
00:23:28,300 --> 00:23:28,700
a thing.

451
00:23:28,800 --> 00:23:35,100
But now I want to make some notion of how this stuff should work,

452
00:23:35,500 --> 00:23:36,000
right?

453
00:23:37,000 --> 00:23:40,200
So what I'd like to do is say, okay, there's going to be a new thing

454
00:23:40,400 --> 00:23:43,400
which is like push params or something like that.

455
00:23:44,100 --> 00:23:47,900
Look Arena push / amps and what that's going to do is the arena, push,

456
00:23:47,900 --> 00:23:54,100
params will say something like oh okay, you know, what's the what's

457
00:23:54,100 --> 00:23:57,700
the flags Arena push flag?

458
00:23:58,300 --> 00:23:58,900
Like that.

459
00:24:00,100 --> 00:24:01,000
Arena flag.

460
00:24:01,000 --> 00:24:02,000
Clear 20.

461
00:24:03,400 --> 00:24:06,300
You know I'm saying and then it will also have a thing like the

462
00:24:06,300 --> 00:24:07,000
alignment.

463
00:24:07,000 --> 00:24:10,800
So the alignment will also be you know, kind of baked in there, you

464
00:24:10,800 --> 00:24:16,800
know, I'm saying, so that way when you do whatever it is, that you're

465
00:24:16,800 --> 00:24:21,800
going to do, there's this concept of the the the sort of alignment is

466
00:24:21,800 --> 00:24:24,600
going to be baked in there in some way, that makes sense.

467
00:24:25,300 --> 00:24:30,100
And so, and the flags will be bundled with it as well, okay?

468
00:24:30,800 --> 00:24:33,100
And so then what I'm going to do is say, alright, let's say,

469
00:24:33,200 --> 00:24:41,500
Something like inline, Arena, push params, default Arena Rams for

470
00:24:41,500 --> 00:24:42,400
something like this.

471
00:24:45,200 --> 00:24:47,900
And all that does is say params.

472
00:24:49,200 --> 00:24:55,600
Flags equals Arena flag, clear 20 alignment equals, whatever that

473
00:24:55,600 --> 00:24:57,800
default memory alignment is right.

474
00:24:59,400 --> 00:25:02,200
I'm going to get rid of that Turn 4 amps.

475
00:25:03,000 --> 00:25:07,100
And now instead of memory index alignment, these are all going to take

476
00:25:07,100 --> 00:25:10,300
Arena push the Rams and

477
00:25:11,800 --> 00:25:15,400
As their parameter and they'll default to default Arena params.

478
00:25:16,600 --> 00:25:17,400
Does that make sense?

479
00:25:18,500 --> 00:25:20,800
Hopefully that makes some sense, right?

480
00:25:21,600 --> 00:25:24,600
So then in here, when we use alignment this is just going to be params

481
00:25:24,600 --> 00:25:25,600
alignment now.

482
00:25:26,000 --> 00:25:31,500
Otherwise it's exactly the same and now everybody will do who was

483
00:25:31,500 --> 00:25:36,900
doing the alignment stuff before will do exactly what what that guy

484
00:25:36,900 --> 00:25:37,400
did.

485
00:25:37,500 --> 00:25:42,800
They'll all take this and so that stuff can be bundled when you do the

486
00:25:42,800 --> 00:25:46,500
push and I'll show you why I wanted in a bundle like that instead of

487
00:25:46,500 --> 00:25:47,900
adding additional parameter.

488
00:25:48,400 --> 00:25:51,500
Other than the fact that you can see it's kind of convenient here the

489
00:25:51,500 --> 00:25:56,900
way that I'm doing this you know, for initializing the defaults.

490
00:25:57,600 --> 00:26:01,200
But that's a look at that second and so then what we can do is we can

491
00:26:01,200 --> 00:26:04,400
say if params the flags and

492
00:26:07,000 --> 00:26:07,300
Oops.

493
00:26:08,800 --> 00:26:09,800
And

494
00:26:12,100 --> 00:26:17,300
Arena flag, clear to 0, then we clear 20 but otherwise, we will not

495
00:26:17,300 --> 00:26:25,000
clear to zero so that now gives us an ability to clear things for not

496
00:26:25,000 --> 00:26:27,800
depending on how we want to do it, right?

497
00:26:29,000 --> 00:26:29,400
Okay.

498
00:26:29,600 --> 00:26:33,500
So now actually this effective size for, I actually can just go ahead

499
00:26:33,500 --> 00:26:38,200
and pass that through directly, which is kind of nice and let's see.

500
00:26:38,200 --> 00:26:41,800
Sub arena is also going to take the

501
00:26:42,000 --> 00:26:42,400
M&M's.

502
00:26:42,600 --> 00:26:50,600
So this will be Arena push params g equals default in the params and

503
00:26:50,600 --> 00:26:53,300
there are the programs we go.

504
00:26:54,900 --> 00:26:57,400
And so now, I think we're in pretty good shape.

505
00:27:00,700 --> 00:27:01,100
Okay.

506
00:27:05,000 --> 00:27:09,900
And so we can now do something like a line.

507
00:27:10,300 --> 00:27:10,900
No.

508
00:27:10,900 --> 00:27:11,700
Clear.

509
00:27:13,300 --> 00:27:13,900
Right.

510
00:27:14,600 --> 00:27:20,700
We can now create sort of this custom set of very convenient phrases

511
00:27:22,200 --> 00:27:26,000
that look very readable and tell you exactly what your push is going

512
00:27:26,000 --> 00:27:29,000
to do and it all kind of flow through properly.

513
00:27:29,200 --> 00:27:29,700
Right?

514
00:27:29,900 --> 00:27:31,900
So now we've got our default Arena push for.

515
00:27:31,900 --> 00:27:32,300
Is it now?

516
00:27:32,300 --> 00:27:33,700
We can also do like that.

517
00:27:33,700 --> 00:27:36,100
What I just said, where I've got.

518
00:27:36,100 --> 00:27:38,600
Okay, I'm going to make one called a line.

519
00:27:38,600 --> 00:27:39,400
No clear.

520
00:27:40,000 --> 00:27:40,900
And align no.

521
00:27:40,900 --> 00:27:41,500
Clear.

522
00:27:41,800 --> 00:27:42,600
Will take the

523
00:27:43,900 --> 00:27:45,700
It will produce one of these.

524
00:27:47,800 --> 00:27:51,100
Which will be set up to do, whatever it is that does.

525
00:27:51,100 --> 00:27:53,600
And then we just make sure we set all these the way we want them.

526
00:27:54,000 --> 00:27:56,400
And everyone says, which one of them they want to use.

527
00:27:56,500 --> 00:28:00,500
So there is a line, no clear, that won't align it when it does, what

528
00:28:00,500 --> 00:28:01,200
it's going to do.

529
00:28:02,000 --> 00:28:04,000
And it's all good right now.

530
00:28:04,000 --> 00:28:08,400
The hilarious thing is, I believe we actually would probably want them

531
00:28:08,400 --> 00:28:10,800
be cleared because they call clear out the mixer channel.

532
00:28:11,400 --> 00:28:15,400
So I should probably do a thing that you're like, are we sure?

533
00:28:15,400 --> 00:28:16,900
We don't want to

534
00:28:17,100 --> 00:28:19,600
Let this do the clear.

535
00:28:21,300 --> 00:28:24,200
Because that might be faster than this, but I don't know.

536
00:28:24,600 --> 00:28:28,100
So anyway, point being, that's what I'm talking about.

537
00:28:29,200 --> 00:28:29,800
All right.

538
00:28:30,100 --> 00:28:33,000
Similarly here when we do make empty bitmap, here's a push sizes,

539
00:28:33,000 --> 00:28:33,900
trying to do it again.

540
00:28:34,800 --> 00:28:38,200
Since we have this clear 20 thing and we've got clear bitmap clear

541
00:28:38,200 --> 00:28:40,100
bitmap just call zero size.

542
00:28:40,200 --> 00:28:42,500
So really what we could do is get rid of clear bitmap.

543
00:28:42,500 --> 00:28:43,700
I think we don't need that anymore.

544
00:28:43,700 --> 00:28:46,800
My guess would be we don't and I think we can get rid of it.

545
00:28:47,200 --> 00:28:49,900
So now all we would have to do is say well okay.

546
00:28:50,600 --> 00:28:54,100
We know we may or may not want to clear this so we can just say clear

547
00:28:54,100 --> 00:28:58,800
20 if we're going to if we're going to clear it will

548
00:28:59,000 --> 00:29:05,500
One way and if we're not, we're not so we can do a line clear and

549
00:29:05,500 --> 00:29:06,600
align no clear.

550
00:29:07,300 --> 00:29:10,000
And both of them can be aligned to 16 if that's what we want.

551
00:29:10,900 --> 00:29:11,500
Makes sense.

552
00:29:13,300 --> 00:29:15,800
So yeah, something like that.

553
00:29:20,100 --> 00:29:23,200
We could also do something with a Boolean, you do.

554
00:29:23,200 --> 00:29:24,800
You could imagine something like this.

555
00:29:26,300 --> 00:29:32,600
if we wanted to and that might be fun because then we can say, Oh

556
00:29:32,600 --> 00:29:35,700
either we're going to do a clear or we're not

557
00:29:37,500 --> 00:29:42,100
and then that would just be like, oh okay, so a line, 16, clear 20

558
00:29:44,000 --> 00:29:44,500
No, I'm saying.

559
00:29:45,800 --> 00:29:47,100
So that's kind of Handy, too.

560
00:29:48,400 --> 00:29:51,200
All right, so let's keep going with that.

561
00:29:51,400 --> 00:29:55,100
What I want to do now is I want to just go find everywhere that we did

562
00:29:55,100 --> 00:29:56,800
a push, right?

563
00:29:58,600 --> 00:29:59,900
which is quite a few places, but

564
00:30:00,200 --> 00:30:01,300
An intractable number.

565
00:30:01,900 --> 00:30:04,200
And I just want to take a look at how we were passing them, and make

566
00:30:04,200 --> 00:30:06,100
sure that we're using.

567
00:30:06,100 --> 00:30:08,500
Now that we've got new features that were actually using them.

568
00:30:09,500 --> 00:30:13,200
So here is, for example, a thing where we do a clear 20 that's

569
00:30:13,200 --> 00:30:15,500
probably fine because that's just an array of ground buffers.

570
00:30:15,500 --> 00:30:16,900
Those ground buffers aren't that big?

571
00:30:16,900 --> 00:30:18,800
I do not think so.

572
00:30:18,800 --> 00:30:19,700
That's all fine.

573
00:30:21,000 --> 00:30:22,700
That's has nothing to do with it.

574
00:30:24,000 --> 00:30:25,800
And neither does any of this.

575
00:30:25,800 --> 00:30:30,000
These are just the actual code blah blah blah blah blah, blah, don't

576
00:30:30,000 --> 00:30:32,000
care, don't care.

577
00:30:32,600 --> 00:30:35,800
So there's a push size and we're this is a push size where we do a

578
00:30:35,800 --> 00:30:38,800
push and then we write we immediately

579
00:30:41,500 --> 00:30:43,400
We immediately right to it.

580
00:30:44,000 --> 00:30:46,500
So that is presumably something where we want to do.

581
00:30:46,600 --> 00:30:47,800
No clearing right?

582
00:30:47,800 --> 00:30:49,500
We don't want to do any clearing in that.

583
00:30:49,700 --> 00:30:53,900
So that does the push size that it would do, don't clear and it writes

584
00:30:53,900 --> 00:30:57,700
to the, the entirety of the thing that it allocated, right?

585
00:30:59,200 --> 00:31:01,100
So let's see about this.

586
00:31:01,400 --> 00:31:03,600
Oops, that was actually something I want to look at.

587
00:31:04,400 --> 00:31:05,000
So that's fine.

588
00:31:05,000 --> 00:31:07,600
Because whoever does the sub Arena can say whether they want it

589
00:31:07,600 --> 00:31:09,200
cleared and what the alignment is.

590
00:31:09,500 --> 00:31:10,500
So that's all good.

591
00:31:13,500 --> 00:31:18,100
So let's step back through there, push truck for task work, that is

592
00:31:18,100 --> 00:31:21,100
literally just getting over written completely, so that does not need

593
00:31:21,100 --> 00:31:23,400
to be cleared either because it does.

594
00:31:23,400 --> 00:31:26,200
It's a load asset work that gets overwritten completely.

595
00:31:27,600 --> 00:31:31,000
This one looks like probably might as well clear, that one, because it

596
00:31:31,000 --> 00:31:33,700
looks like it's actually setting it up here, so that's fine.

597
00:31:33,800 --> 00:31:34,100
Again.

598
00:31:34,100 --> 00:31:38,900
Same with this guy, probably doesn't need clear creating the game

599
00:31:38,900 --> 00:31:40,800
assets, that should be cleared in.

600
00:31:41,000 --> 00:31:44,100
Good luck with a push size here where it's taking over the sizes that

601
00:31:44,100 --> 00:31:44,900
definitely doesn't want.

602
00:31:44,900 --> 00:31:47,200
If I bet that was what was taking most of our time, because that's the

603
00:31:47,200 --> 00:31:50,500
whole asset store getting zeroed out for no reason whatsoever.

604
00:31:51,200 --> 00:31:53,500
Here's our push array with the asset file.

605
00:31:54,000 --> 00:31:55,900
That's something I think we might as well clear.

606
00:31:55,900 --> 00:31:57,700
That seems pretty straightforward to me.

607
00:31:58,200 --> 00:32:01,900
Asset type array is getting read from the file immediately afterwards.

608
00:32:02,400 --> 00:32:04,400
I don't know whether we want to clear that or not.

609
00:32:04,800 --> 00:32:06,000
That's a really good question.

610
00:32:06,200 --> 00:32:10,800
If the read file failed, then I suppose we would file error.

611
00:32:10,900 --> 00:32:15,600
Out so I suppose that means we don't really have to clear it so I'll

612
00:32:15,600 --> 00:32:20,600
go no clear for that guy as well and let's take a look at these guys

613
00:32:20,600 --> 00:32:26,100
so we've got asset counts tag counts and yeah I don't know if we want

614
00:32:26,100 --> 00:32:28,500
to clear these or not you know what I'm going to do I'm going to leave

615
00:32:28,500 --> 00:32:30,300
them as getting cleared to be honest.

616
00:32:31,000 --> 00:32:33,800
Sometimes I find it's just better to clear better to be safe than

617
00:32:33,800 --> 00:32:34,300
sorry.

618
00:32:36,200 --> 00:32:39,100
So we'll see if it creates any problems doing it that way but if it

619
00:32:39,100 --> 00:32:40,600
doesn't I'm going to let those guys clear.

620
00:32:41,500 --> 00:32:43,000
So those are no clear already.

621
00:32:43,700 --> 00:32:47,700
Here is a bitmap push call that doesn't relate to the memory system.

622
00:32:47,700 --> 00:32:49,700
That's just it happened at push in the name.

623
00:32:51,000 --> 00:32:53,000
This stuff for the cutscenes against.

624
00:32:53,000 --> 00:32:54,200
Those can get cleaned out.

625
00:32:54,300 --> 00:32:55,700
Don't care about those at all.

626
00:32:57,100 --> 00:32:59,300
These are welcome to clear themselves.

627
00:32:59,300 --> 00:32:59,800
That's a push.

628
00:33:00,000 --> 00:33:00,700
Up call.

629
00:33:01,200 --> 00:33:03,900
Here's push font again, that's unrelated.

630
00:33:03,900 --> 00:33:04,400
Push wrecked.

631
00:33:04,400 --> 00:33:07,100
Unrelated all of these guys are other stuff.

632
00:33:07,100 --> 00:33:08,300
There's push struct.

633
00:33:08,400 --> 00:33:08,700
Get a clue.

634
00:33:08,700 --> 00:33:10,900
But again, that's debug view that can get cleared.

635
00:33:12,900 --> 00:33:17,200
Yeah, so here again, those are, these are all find clear, because

636
00:33:17,200 --> 00:33:18,800
those are not performance sensitive anyway.

637
00:33:18,800 --> 00:33:21,300
So it's always, like I said, better safe than sorry.

638
00:33:21,500 --> 00:33:23,200
I'd rather clear them out.

639
00:33:23,300 --> 00:33:27,300
And yeah, all the debug stuff, I'd rather just have it.

640
00:33:27,300 --> 00:33:27,600
Clear.

641
00:33:27,600 --> 00:33:29,800
That seems like

642
00:33:30,000 --> 00:33:31,900
Like fine fine idea.

643
00:33:32,500 --> 00:33:32,900
Okay.

644
00:33:32,900 --> 00:33:37,900
And so, let's see in the render group, we have a push truck for the

645
00:33:37,900 --> 00:33:38,700
renter group, that's fine.

646
00:33:38,700 --> 00:33:40,900
That should be cleared, that's all good.

647
00:33:41,200 --> 00:33:44,000
We've got to push size here for the max put buffer size that should

648
00:33:44,000 --> 00:33:47,100
definitely knock it cleared because that's a push buffer and the push

649
00:33:47,100 --> 00:33:48,500
buffer is getting overwritten all the time.

650
00:33:48,500 --> 00:33:51,900
Anyway, that should not be cleared, I don't think that's a good idea.

651
00:33:53,200 --> 00:33:56,600
So, let's see here, push render elements, that should take care of it

652
00:33:57,300 --> 00:33:58,000
itself.

653
00:33:58,700 --> 00:33:59,800
So let's keep going.

654
00:34:00,900 --> 00:34:03,300
That is just talking about the push buffer.

655
00:34:05,200 --> 00:34:09,500
And let's see push bitmap push render element push bitmap.

656
00:34:09,500 --> 00:34:11,199
If it map on track blah blah.

657
00:34:11,199 --> 00:34:16,000
These are not actually things that push memory which render elements

658
00:34:16,000 --> 00:34:19,900
push struct Sim region when we do begin Sim.

659
00:34:20,199 --> 00:34:24,600
So there's the zero struct SIM region hash which is the majority of

660
00:34:24,600 --> 00:34:25,000
it.

661
00:34:25,400 --> 00:34:27,400
So I think what we want to do is just let it clear.

662
00:34:27,400 --> 00:34:30,000
The whole thing that seems like a better call to me.

663
00:34:31,699 --> 00:34:34,900
Then we got next in hash that can clear out, that seems reasonable

664
00:34:34,900 --> 00:34:35,199
again.

665
00:34:35,199 --> 00:34:37,699
I like having those cleared, I like the extra safety in case.

666
00:34:37,699 --> 00:34:39,300
There's some forgotten variable.

667
00:34:40,100 --> 00:34:41,000
That's always good.

668
00:34:41,900 --> 00:34:43,100
Can create world that can clear.

669
00:34:43,100 --> 00:34:43,600
Just fine.

670
00:34:43,600 --> 00:34:45,500
And dandy block also fine.

671
00:34:46,900 --> 00:34:50,300
Pair wise, Collision rules also fine, push struct.

672
00:34:52,600 --> 00:34:53,800
Yeah.

673
00:34:54,300 --> 00:34:57,500
What is the saying, not World Arena change using the fundamental types

674
00:34:57,500 --> 00:34:58,100
Arena?

675
00:35:00,200 --> 00:35:04,600
I am going to let that to do stand for.

676
00:35:04,600 --> 00:35:07,000
We look at it before but yeah that can easily be cleared.

677
00:35:07,000 --> 00:35:07,700
No question.

678
00:35:08,800 --> 00:35:13,900
So can that for that matter, simcha entity Collision, volume group,

679
00:35:13,900 --> 00:35:18,500
push struct that seems fine to all of.

680
00:35:18,500 --> 00:35:20,600
That seems pretty good to me.

681
00:35:21,100 --> 00:35:22,600
All right, those are some other bitmaps.

682
00:35:22,800 --> 00:35:27,000
Feel ground chunk back in, definitely clear mode Arena.

683
00:35:27,300 --> 00:35:28,000
That's fine.

684
00:35:30,500 --> 00:35:32,600
See, bitmap wrecked outline again.

685
00:35:32,600 --> 00:35:33,800
Nothing really in there.

686
00:35:34,100 --> 00:35:37,400
That's all just graphic stuff and down.

687
00:35:37,600 --> 00:35:41,100
All right, so now we've kind of told what, to clear and whatnot to

688
00:35:41,100 --> 00:35:41,500
clear.

689
00:35:42,100 --> 00:35:46,000
You can kind of see that we've got this one that I didn't Define yet.

690
00:35:46,000 --> 00:35:47,100
That's just don't clear.

691
00:35:47,300 --> 00:35:49,600
So we now need to make sure that we actually have that one.

692
00:35:50,300 --> 00:35:51,700
So we've got no clear.

693
00:35:53,300 --> 00:35:54,400
That doesn't take anything.

694
00:35:55,100 --> 00:35:55,700
All it is.

695
00:35:55,700 --> 00:35:59,000
Is the default with nothing.

696
00:36:01,300 --> 00:36:02,900
All right, so now these guys.

697
00:36:02,900 --> 00:36:04,800
What do they actually do will sew a line.

698
00:36:04,800 --> 00:36:05,000
No.

699
00:36:05,000 --> 00:36:05,200
Clear.

700
00:36:05,200 --> 00:36:06,800
Should take the alignment and do it.

701
00:36:06,900 --> 00:36:08,800
This guy should take the alignment and do it.

702
00:36:09,000 --> 00:36:11,500
This guy should, presumably use the default, so we could actually even

703
00:36:11,500 --> 00:36:17,100
just do default Arena params and then just set the flags to basically

704
00:36:17,400 --> 00:36:21,600
just not have Arena flag, clear, 20?

705
00:36:22,000 --> 00:36:25,300
So really, we just say, whatever the default was, you know, we let

706
00:36:25,300 --> 00:36:30,200
that do its thing and that seems pretty fair to me.

707
00:36:30,800 --> 00:36:31,200
Yeah.

708
00:36:31,800 --> 00:36:35,500
In fact, we could do that on all of these, we could just have it be

709
00:36:35,500 --> 00:36:37,200
that we clear that flag.

710
00:36:38,400 --> 00:36:39,200
You know what I'm saying?

711
00:36:40,000 --> 00:36:43,400
So that flag gets cleared and then we overwrite the alignment.

712
00:36:46,000 --> 00:36:47,100
I guess is what I would say.

713
00:36:47,400 --> 00:36:51,000
This guy kind of needs to rewrite it but it could do something.

714
00:36:51,400 --> 00:36:52,700
It could actually just do this.

715
00:36:55,600 --> 00:36:56,100
Right.

716
00:36:56,100 --> 00:36:57,100
So if you clear

717
00:36:58,900 --> 00:36:59,500
Else.

718
00:37:03,100 --> 00:37:03,600
You don't.

719
00:37:05,600 --> 00:37:09,500
So that way, every time we do it, we actually start with whatever the

720
00:37:09,500 --> 00:37:10,100
default is.

721
00:37:10,100 --> 00:37:12,900
So if we added more Flags to the default, these guys would just

722
00:37:12,900 --> 00:37:15,200
inherit those flags, which maybe is a better idea.

723
00:37:15,400 --> 00:37:18,300
I don't know that it is or not, but I'm just going to say that for

724
00:37:18,300 --> 00:37:19,500
now, we'll do it that way.

725
00:37:20,100 --> 00:37:23,900
Okay, insert block that's wrong.

726
00:37:23,900 --> 00:37:26,000
That's gotta get a parentheses around.

727
00:37:26,000 --> 00:37:31,200
It obviously six that and now I think we're in better shape.

728
00:37:31,700 --> 00:37:34,600
So hopefully and I don't know if this is true.

729
00:37:34,700 --> 00:37:38,200
Hopefully we'll get closer to running faster.

730
00:37:38,200 --> 00:37:39,700
Okay, we do which is good.

731
00:37:45,600 --> 00:37:48,400
Again, that's something I've been wanting to do for a while and

732
00:37:48,400 --> 00:37:50,200
hopefully that's something that.

733
00:37:50,400 --> 00:37:50,800
Yeah.

734
00:37:50,800 --> 00:37:55,000
Now, you can see it runs much more snappily, so that's all good.

735
00:37:55,300 --> 00:37:56,400
So, we're in good shape there.

736
00:37:57,900 --> 00:37:59,200
Yeah, right.

737
00:37:59,600 --> 00:38:00,200
Good deal.

738
00:38:01,100 --> 00:38:02,400
So where are we on time?

739
00:38:03,500 --> 00:38:05,600
We gotta we had about 15 minutes of the class.

740
00:38:05,600 --> 00:38:06,800
We've got about 20 minutes.

741
00:38:06,800 --> 00:38:10,100
Left is what I believe that we have.

742
00:38:11,000 --> 00:38:14,700
And so, one other thing that we could do, now, I'm trying to think

743
00:38:14,700 --> 00:38:15,100
about whether

744
00:38:15,400 --> 00:38:17,100
It's is enough time to really do it.

745
00:38:17,900 --> 00:38:22,900
I wanted to go ahead and start making the the concept of the memory

746
00:38:22,900 --> 00:38:25,700
Arenas flow all the way down to the operating system level.

747
00:38:26,500 --> 00:38:29,500
Because I really wanted to do some stuff where for example we could

748
00:38:29,500 --> 00:38:33,700
have a Rena's that can grow where the operating system just gives us

749
00:38:33,700 --> 00:38:34,900
more memory as we grow them.

750
00:38:35,800 --> 00:38:37,900
And the reason I want to do that is for example.

751
00:38:39,300 --> 00:38:42,700
First of all, we may want to just run on the PC that way for example

752
00:38:43,300 --> 00:38:45,600
because it's the PC as virtual memory and people may want to run

753
00:38:45,600 --> 00:38:49,100
really huge worlds or something, we might want to just let them use

754
00:38:49,200 --> 00:38:51,800
all the memory in their machine if they want.

755
00:38:51,800 --> 00:38:52,300
Right?

756
00:38:53,300 --> 00:38:56,700
Whereas on something like Raspberry Pi maybe where we've got a

757
00:38:56,700 --> 00:38:59,700
specific amount of memory we got to fit into, we wouldn't do that.

758
00:39:00,800 --> 00:39:05,900
But more importantly, even if we always make sure the game only runs

759
00:39:05,900 --> 00:39:09,300
within a certain fixed, allocation that starts the beginning, because

760
00:39:09,300 --> 00:39:10,500
we just want to do it that way.

761
00:39:11,000 --> 00:39:16,500
Even on the PC, our debug system should never have to run through

762
00:39:16,500 --> 00:39:17,200
that, right?

763
00:39:17,200 --> 00:39:20,100
The debug system is a separate set of memory and that should be able

764
00:39:20,100 --> 00:39:21,500
to run through some grobel thing.

765
00:39:21,500 --> 00:39:24,400
But just ask the operating system for more memory and who cares,

766
00:39:24,400 --> 00:39:24,600
right?

767
00:39:24,600 --> 00:39:25,400
It's the debug system.

768
00:39:25,500 --> 00:39:27,100
Never ships on the user's machine.

769
00:39:28,600 --> 00:39:32,100
So, I did want to add that, but in 20 minutes, I think that might be a

770
00:39:32,100 --> 00:39:34,400
little bit, it might be a little bit tight.

771
00:39:35,000 --> 00:39:36,500
I think it's my guess.

772
00:39:41,900 --> 00:39:45,100
So yeah, so I'm not sure exactly what we want to do there but that

773
00:39:45,100 --> 00:39:49,100
definitely does seem like something that I want to do eventually.

774
00:39:49,200 --> 00:39:51,400
So the question is, what do I want to do now?

775
00:39:52,100 --> 00:39:53,300
And I don't really know.

776
00:39:53,700 --> 00:39:54,800
That's a really good question.

777
00:39:55,800 --> 00:40:00,200
One thing that we could do, you know what might be fun, what might be

778
00:40:00,200 --> 00:40:03,900
fun as to start fixing the render or sorting, that seems like

779
00:40:03,900 --> 00:40:05,000
something that might be fun.

780
00:40:05,400 --> 00:40:07,200
And there's a couple of things in the render that I wanted to fix.

781
00:40:07,200 --> 00:40:07,900
That was ready to that.

782
00:40:07,900 --> 00:40:09,800
So what we could do is Implement a really, really

783
00:40:10,100 --> 00:40:14,100
That sort like a bubble sort or something in the renderer.

784
00:40:14,600 --> 00:40:19,400
So that when we come back from break, we can replace it with a good

785
00:40:19,400 --> 00:40:21,000
sort or something like that.

786
00:40:22,000 --> 00:40:23,300
That might be fun, right?

787
00:40:23,300 --> 00:40:27,100
That's that, that I could see that being at the thing, right?

788
00:40:29,200 --> 00:40:31,400
And I don't even know that we would get to that if we just started

789
00:40:31,400 --> 00:40:32,900
that that's the other thing.

790
00:40:33,000 --> 00:40:35,900
So maybe that's a bad idea to because if I started it, you probably

791
00:40:35,900 --> 00:40:36,400
wouldn't get a chance.

792
00:40:36,400 --> 00:40:39,600
Pension, because really the hard part about the Sorting is going to be

793
00:40:39,600 --> 00:40:43,500
figuring out how to structure the stuff in the push buffer in such a

794
00:40:43,500 --> 00:40:45,400
way that it can be sorted conveniently.

795
00:40:47,100 --> 00:40:50,700
So there's there's that which is also kind of weird.

796
00:40:51,000 --> 00:40:52,600
I don't know, maybe it's not that hard.

797
00:40:53,200 --> 00:40:54,200
I'd have to think about it.

798
00:41:00,000 --> 00:41:02,800
All right, let's just take a look II.

799
00:41:02,800 --> 00:41:05,200
Don't have any better idea of what to do.

800
00:41:05,500 --> 00:41:06,900
So we might as well look, right?

801
00:41:06,900 --> 00:41:13,300
I mean if I don't have a better idea let's just take a look so what

802
00:41:13,300 --> 00:41:14,800
happens at the moment, right?

803
00:41:16,100 --> 00:41:19,200
You know, we've got this sort of this concept of

804
00:41:20,900 --> 00:41:22,100
Rendering all our stuff.

805
00:41:22,400 --> 00:41:23,800
And we kind of do a thing where we go.

806
00:41:23,800 --> 00:41:28,300
Like, okay, you know, when we do our tiled render, we call tiled

807
00:41:28,300 --> 00:41:32,200
render group to Output, so sorry.

808
00:41:32,200 --> 00:41:33,200
No, that's not what we call.

809
00:41:33,500 --> 00:41:35,600
We call something a little lower level than that.

810
00:41:35,700 --> 00:41:37,200
I mean, are a little higher level in that first.

811
00:41:37,200 --> 00:41:37,600
Right?

812
00:41:38,000 --> 00:41:39,200
We call.

813
00:41:40,400 --> 00:41:43,700
Yeah, child artist.

814
00:41:44,800 --> 00:41:48,300
So we call tiled render grouped output times where I've seen the wrong

815
00:41:48,300 --> 00:41:48,600
function.

816
00:41:48,600 --> 00:41:52,300
That is what we call and whatever that does, is it sets up a bunch of

817
00:41:52,800 --> 00:41:55,600
thread work, where the render can run a multiple threads and it lets

818
00:41:55,600 --> 00:41:58,300
the platform layer go, you know spawn.

819
00:41:58,300 --> 00:41:59,800
Make sure all those guys can do the work.

820
00:42:00,700 --> 00:42:02,500
And sort of Spawn it off, right?

821
00:42:02,900 --> 00:42:06,500
And so each one of those is going to call the function that that's

822
00:42:06,500 --> 00:42:10,000
going to call is is this thing right here?

823
00:42:10,000 --> 00:42:13,900
Do tiled render work and that do tiled render work function.

824
00:42:14,900 --> 00:42:16,800
I suppose that's probably in are optimized.

825
00:42:16,900 --> 00:42:18,000
Do tiled render work?

826
00:42:18,000 --> 00:42:18,800
Or is it not?

827
00:42:19,400 --> 00:42:20,000
Where is it?

828
00:42:21,200 --> 00:42:23,800
Here it is so that do table render work.

829
00:42:25,300 --> 00:42:29,900
That's going to go ahead and do, you know what's kind of funny, too?

830
00:42:30,100 --> 00:42:33,400
We still do our alternating even odd lines thing.

831
00:42:33,600 --> 00:42:37,300
Even though we were going to do something where that would be hyper

832
00:42:37,300 --> 00:42:37,800
threaded base.

833
00:42:37,800 --> 00:42:39,300
But we never actually did that.

834
00:42:39,600 --> 00:42:41,700
I don't know if you guys remember that because we never really went

835
00:42:41,700 --> 00:42:45,400
and did any super serious optimizations on the renderer because

836
00:42:45,700 --> 00:42:50,200
somehow the simple optimizations we did and it up making it run at 60

837
00:42:50,200 --> 00:42:52,300
frames a second 1080p which is crazy.

838
00:42:54,800 --> 00:42:56,500
These machines are so darn, fast these days.

839
00:42:57,900 --> 00:43:00,800
So anyway, yeah, that's kind of hilarious.

840
00:43:00,800 --> 00:43:04,000
We should probably just stop doing that scan line alternating.

841
00:43:04,000 --> 00:43:06,300
It probably just slowing us down at this point.

842
00:43:07,000 --> 00:43:11,700
In fact, I wonder if we should just try it and see if it is like

843
00:43:12,100 --> 00:43:15,800
whether it gets faster to not do that, right?

844
00:43:18,000 --> 00:43:19,900
I feel like I feel like it just would.

845
00:43:20,700 --> 00:43:21,100
Yeah.

846
00:43:22,100 --> 00:43:25,000
I'm-i'm-i'm so tour and I know there's so many things we could be

847
00:43:25,000 --> 00:43:27,400
doing and so little time you only got

848
00:43:27,500 --> 00:43:30,800
You know 15 minutes left on the clock here.

849
00:43:30,800 --> 00:43:34,600
It's ridiculous anyway but yeah that's kind of funny like we do render

850
00:43:34,600 --> 00:43:37,500
group to output and we've got this concept of the even odd things and

851
00:43:37,500 --> 00:43:41,100
we don't even use them and I don't know that we ever will because I

852
00:43:41,100 --> 00:43:44,900
couldn't think of a good way to actually launch the hyper threads to

853
00:43:44,900 --> 00:43:49,200
like interleave together like that because you can't really

854
00:43:49,200 --> 00:43:50,100
synchronize.

855
00:43:50,200 --> 00:43:53,700
You don't even necessarily know when to hyper threads are going to go

856
00:43:53,700 --> 00:43:55,300
pick up something from the job queue.

857
00:43:55,600 --> 00:43:57,400
So yeah, let's just pull

858
00:43:57,500 --> 00:43:58,000
that join us.

859
00:43:58,000 --> 00:43:59,000
Pull that out.

860
00:43:59,100 --> 00:44:00,100
It just seems dumb.

861
00:44:00,700 --> 00:44:01,300
You know what I mean?

862
00:44:01,300 --> 00:44:02,400
Just seems kind of dumb.

863
00:44:02,800 --> 00:44:03,500
Let's pull it out.

864
00:44:03,600 --> 00:44:04,400
Let's just do it.

865
00:44:09,800 --> 00:44:10,400
Let's just say.

866
00:44:11,100 --> 00:44:11,500
So yeah.

867
00:44:11,500 --> 00:44:13,900
Like let's let's figure out what our frame rate actually is at this

868
00:44:13,900 --> 00:44:19,700
point let me go ahead and to handmade handmade the build I guess is

869
00:44:19,700 --> 00:44:20,200
what it is.

870
00:44:20,200 --> 00:44:24,900
Build that bat, let's go into build up at and turn on him internal

871
00:44:24,900 --> 00:44:27,300
because if I remember correctly all this stuff was still working.

872
00:44:29,200 --> 00:44:30,300
It's just a question of

873
00:44:31,900 --> 00:44:34,600
of not supporting the hot code reloading because we had finished some

874
00:44:34,600 --> 00:44:35,600
of the toughest rings.

875
00:44:36,300 --> 00:44:37,300
So what's the problem here?

876
00:44:37,300 --> 00:44:37,400
No.

877
00:44:37,400 --> 00:44:39,200
Constructor can get Arena.

878
00:44:39,200 --> 00:44:45,500
Sighs remaining Katarina size remaining is taking the alignment value

879
00:44:45,500 --> 00:44:46,700
of 1, I guess.

880
00:44:47,400 --> 00:44:48,600
So I guess I would just do no.

881
00:44:48,600 --> 00:44:51,900
Clear one or something or align.

882
00:44:51,900 --> 00:44:52,500
No clear.

883
00:44:54,800 --> 00:44:55,600
Something like that.

884
00:45:00,300 --> 00:45:01,400
Alright, so there we go.

885
00:45:01,900 --> 00:45:06,300
There is our rendering there and you can kind of see that we're a bit

886
00:45:06,300 --> 00:45:09,400
slow on the cutscenes, which is what we would expect because we're

887
00:45:09,400 --> 00:45:10,700
doing all the over drawing.

888
00:45:11,100 --> 00:45:11,600
Right.

889
00:45:13,000 --> 00:45:16,900
And I suppose, the other thing we should do is take out our lock loop

890
00:45:17,600 --> 00:45:18,100
for now.

891
00:45:18,600 --> 00:45:23,900
So if I go into win32 handmade, we had a thing where we were, you

892
00:45:23,900 --> 00:45:25,600
know, basically time here.

893
00:45:26,500 --> 00:45:28,300
So, we have real V bank support.

894
00:45:29,600 --> 00:45:32,200
I said I was turning that off, so let's take a look.

895
00:45:32,600 --> 00:45:34,500
So that's what our current timing is, right?

896
00:45:34,500 --> 00:45:37,700
It's like 3633, right?

897
00:45:38,400 --> 00:45:41,600
So again, I'm not actually going to try to optimize this.

898
00:45:41,600 --> 00:45:44,500
If once we actually want to do optimization, we need to do something.

899
00:45:44,500 --> 00:45:49,000
We're actually taking really consistent, timings not just kind of

900
00:45:49,000 --> 00:45:51,600
like, messing around and seeing it, but I just wanted to make sure

901
00:45:51,600 --> 00:45:54,400
that the frame counter was up there to make sure that I didn't do

902
00:45:54,400 --> 00:45:57,200
something really stupid like change for the even and odd thing and end

903
00:45:57,200 --> 00:45:59,000
up like super tanking, our frame rate.

904
00:45:59,300 --> 00:46:01,100
First want to make sure we kind of knew roughly.

905
00:46:01,100 --> 00:46:05,100
What it was so that when I do this because I wanted to pull this out

906
00:46:05,100 --> 00:46:07,600
because we're not really going to use it and it could only be wasting

907
00:46:07,600 --> 00:46:08,100
time.

908
00:46:09,300 --> 00:46:12,900
That I'm not doing something that I don't actually just not understand

909
00:46:12,900 --> 00:46:15,600
and to turn out to make things much worse, right?

910
00:46:16,600 --> 00:46:21,600
So I'm going to take that get even thing that that even odds in this

911
00:46:21,600 --> 00:46:25,900
thing and I'm just going to get rid of that entirely.

912
00:46:30,400 --> 00:46:33,100
Okay, so we got draw a rectangle and draw a rectangle quickly.

913
00:46:33,100 --> 00:46:34,600
Draw a rectangle takes even.

914
00:46:34,900 --> 00:46:37,000
I'm going to take a look at what even is actually doing.

915
00:46:39,400 --> 00:46:42,200
So all it does is offset.

916
00:46:44,100 --> 00:46:44,200
Yeah.

917
00:46:44,200 --> 00:46:48,000
So all it does is say oh if we were only since we're doing even and

918
00:46:48,000 --> 00:46:51,800
the Min was at one, I'm going to advance but I'm pretty sure we can

919
00:46:51,800 --> 00:46:53,400
just get rid of that, right?

920
00:46:53,600 --> 00:46:59,900
And now, we would just do plus plus on these guys directly and we

921
00:46:59,900 --> 00:47:01,400
should be good to go, right?

922
00:47:01,900 --> 00:47:04,500
And then draw a rectangle quickly is, are optimized one.

923
00:47:04,900 --> 00:47:08,900
There's our even if I look at for even it looks like it's still just

924
00:47:08,900 --> 00:47:13,700
basically doing that and then when we again when we advance

925
00:47:14,600 --> 00:47:15,600
Row to row.

926
00:47:16,300 --> 00:47:20,200
We would have to do something to make sure that we weren't going by

927
00:47:20,200 --> 00:47:20,900
twice.

928
00:47:21,200 --> 00:47:22,500
So there's row advance.

929
00:47:24,400 --> 00:47:25,900
Two times, buffer pitch.

930
00:47:26,200 --> 00:47:28,400
So I think, again, all I would really have to do.

931
00:47:28,400 --> 00:47:32,300
There is say just regular buffer pitch, and then the row Advance

932
00:47:32,300 --> 00:47:34,100
should be correct, right?

933
00:47:35,000 --> 00:47:39,200
I think function is not take arguments.

934
00:47:41,300 --> 00:47:42,000
Is that true?

935
00:47:43,900 --> 00:47:45,200
Draw a rectangle quickly.

936
00:47:45,500 --> 00:47:49,100
Do we predefined that we do get rid of that.

937
00:47:50,800 --> 00:47:52,900
So there we go, and let's see if that works.

938
00:47:52,900 --> 00:47:53,500
Any better.

939
00:47:55,500 --> 00:47:56,300
Fanta.

940
00:47:56,300 --> 00:47:57,000
It's beautiful.

941
00:47:57,000 --> 00:47:57,600
Isn't it?

942
00:47:58,100 --> 00:47:59,600
Look at how beautiful that is?

943
00:48:00,300 --> 00:48:02,000
Well, we totally nailed it guys.

944
00:48:02,000 --> 00:48:04,900
Good job looks really good.

945
00:48:05,800 --> 00:48:08,400
I think it'd be hard to argue that.

946
00:48:08,400 --> 00:48:10,700
That we totally did that seamlessly.

947
00:48:12,900 --> 00:48:16,400
All right, not not a great showing, not not fabulous.

948
00:48:16,600 --> 00:48:18,300
That was not really very good job.

949
00:48:18,400 --> 00:48:19,000
It's true.

950
00:48:20,100 --> 00:48:22,600
But don't worry about it, you know, just this, let's not worry about

951
00:48:22,600 --> 00:48:23,100
that.

952
00:48:24,100 --> 00:48:29,100
So okay, let's let's take it a little bit slower here and and see if

953
00:48:29,100 --> 00:48:30,700
we can figure out what I messed up.

954
00:48:31,600 --> 00:48:35,700
So the clip rect is is properly set here because we were doing evens

955
00:48:35,700 --> 00:48:36,800
and odds separate of that.

956
00:48:36,800 --> 00:48:40,700
So we know we're still doing our region stuff, and that should be

957
00:48:40,700 --> 00:48:41,200
correct.

958
00:48:41,300 --> 00:48:43,600
These guys don't care about even odds at all.

959
00:48:43,600 --> 00:48:46,300
So we only have the two functions draw, a rectangle, and draw a

960
00:48:46,300 --> 00:48:49,000
rectangle quickly, right?

961
00:48:49,800 --> 00:48:52,800
So what we should be able to do is we should be able to just like,

962
00:48:52,800 --> 00:48:53,600
look, I

963
00:48:53,900 --> 00:48:56,700
The final inspection for doing all hopping the bugger, this guy

964
00:48:56,700 --> 00:48:58,700
shouldn't have done anything differently, right?

965
00:48:58,900 --> 00:48:59,400
You can see that.

966
00:48:59,400 --> 00:49:00,700
It's pretty much straight forward.

967
00:49:00,700 --> 00:49:02,400
It was, it's just incrementing.

968
00:49:02,700 --> 00:49:05,400
Oh, we didn't change the counter.

969
00:49:05,700 --> 00:49:07,900
That's the problem on this guy.

970
00:49:08,100 --> 00:49:10,900
We're still in incrementing y by 2 each time.

971
00:49:11,500 --> 00:49:13,000
So that would that would do it.

972
00:49:14,100 --> 00:49:14,400
Yeah.

973
00:49:14,900 --> 00:49:15,600
So there we go.

974
00:49:16,900 --> 00:49:19,300
And if anything that definitely did get a little faster, but again,

975
00:49:19,300 --> 00:49:22,300
like I said, we're not really timing it so I feel like but it's the

976
00:49:22,300 --> 00:49:23,700
same basic values as it was before.

977
00:49:23,800 --> 00:49:25,800
Or so, I feel like that's a safe thing to remove.

978
00:49:25,800 --> 00:49:27,400
We don't have to care about that.

979
00:49:27,400 --> 00:49:30,800
We're even odd thing anymore, so that's good.

980
00:49:31,500 --> 00:49:32,000
All right.

981
00:49:35,100 --> 00:49:36,100
See what's going on here.

982
00:49:36,300 --> 00:49:38,300
Yeah, so that doesn't look any different to me.

983
00:49:38,300 --> 00:49:40,200
I don't know if looks like different to you, but like I said, we'd

984
00:49:40,200 --> 00:49:42,000
have to really tie it to be sure.

985
00:49:42,000 --> 00:49:45,000
But I don't think we want to proceed with that interleave thing.

986
00:49:45,000 --> 00:49:46,500
Because it just seemed like a dumb idea.

987
00:49:48,400 --> 00:49:51,400
Maybe not who knows just want to double check.

988
00:49:52,100 --> 00:49:56,900
So okay, inside the render group then all I want to point out is in

989
00:49:56,900 --> 00:49:59,100
order to put ourselves in a position where we're going to be able to

990
00:49:59,100 --> 00:50:03,500
sort these things, we need some way of knowing like what we're even

991
00:50:03,500 --> 00:50:04,000
sorting.

992
00:50:04,500 --> 00:50:10,100
So when we do that that that do tiled that sort of do tiled concept,

993
00:50:10,100 --> 00:50:10,500
right?

994
00:50:11,000 --> 00:50:13,900
So in here we're we're like tiled render group, what's it called?

995
00:50:13,900 --> 00:50:17,200
Do do tile, better work.

996
00:50:17,200 --> 00:50:17,700
That guy.

997
00:50:18,300 --> 00:50:22,000
So when we do our render group to Output that's going to Loop through

998
00:50:22,000 --> 00:50:27,100
all of these guys, as we go, and it's sort of going to it's going to

999
00:50:27,100 --> 00:50:30,300
do it's going to do the rendering operation immediately whenever it

1000
00:50:30,300 --> 00:50:31,100
sees the guy.

1001
00:50:31,900 --> 00:50:34,600
And so right now what happens is our stuff, just gets drawn in

1002
00:50:34,600 --> 00:50:36,200
whatever order, it's shown there.

1003
00:50:36,700 --> 00:50:40,100
And so we would have to do instead is figure out a way to like draw

1004
00:50:40,100 --> 00:50:42,300
these in a different order, right?

1005
00:50:42,300 --> 00:50:43,200
In some other order.

1006
00:50:46,100 --> 00:50:48,400
That's that's really the long and short of it.

1007
00:50:49,200 --> 00:50:53,300
And so in order to do that we need some way to to sort them in order

1008
00:50:53,300 --> 00:50:54,200
to sort them.

1009
00:50:56,100 --> 00:50:59,800
We need some way of of.

1010
00:51:00,000 --> 00:51:05,200
Looking at them as a, you know, as a whole we need some way of being

1011
00:51:05,200 --> 00:51:09,200
able to compare, you know, one to the other and swap their locations.

1012
00:51:09,700 --> 00:51:13,200
And typically we usually want to do that in a way that's fairly random

1013
00:51:13,200 --> 00:51:13,800
access.

1014
00:51:14,000 --> 00:51:16,500
And as you can see from the way we did it, here are pushed buffers are

1015
00:51:16,500 --> 00:51:17,400
packed.

1016
00:51:17,600 --> 00:51:21,600
So we have we Advanced by a base address each time as we go.

1017
00:51:22,600 --> 00:51:25,800
And if you look at what we actually have four things that are in here,

1018
00:51:27,300 --> 00:51:29,900
one question might be whether that was actually a good.

1019
00:51:30,000 --> 00:51:33,100
Good idea if that's even necessary or if these things can be the same

1020
00:51:33,700 --> 00:51:35,100
size, right?

1021
00:51:35,200 --> 00:51:39,800
Because essentially, all we've got and, you know, possibly all we're

1022
00:51:39,800 --> 00:51:44,600
going to have is just fixed some things that could have been fixed

1023
00:51:44,600 --> 00:51:46,100
size, right?

1024
00:51:46,200 --> 00:51:49,800
Like, all of these things could probably be the same rough size, and

1025
00:51:49,800 --> 00:51:55,300
then we wouldn't, then we would just have our our actual push buffer

1026
00:51:55,400 --> 00:51:56,000
would be something.

1027
00:51:56,000 --> 00:51:58,400
We could just sort in place, you know, what I mean.

1028
00:51:59,000 --> 00:51:59,900
And that seems like,

1029
00:52:00,000 --> 00:52:00,700
Good idea.

1030
00:52:05,400 --> 00:52:06,600
however, that said

1031
00:52:08,500 --> 00:52:11,500
It may also be the case that we don't super care because it may be the

1032
00:52:11,500 --> 00:52:16,100
case that what we actually want to do is just first fix pre-call

1033
00:52:16,100 --> 00:52:21,800
everything to see what falls inside each tile and then only sort have

1034
00:52:21,900 --> 00:52:26,400
each thread sort only the contents of its bucket, right?

1035
00:52:26,900 --> 00:52:29,400
Because remember the way I render work is we break the scene into

1036
00:52:29,400 --> 00:52:33,000
tiles and each thread renders the different tile of the screen.

1037
00:52:34,200 --> 00:52:37,700
And so, what we could do is just say like, oh, we'll do a first pass

1038
00:52:38,300 --> 00:52:42,400
and that first past builds like a little array of the things that

1039
00:52:42,400 --> 00:52:43,900
actually need to get output.

1040
00:52:45,100 --> 00:52:48,500
And then from there, we sort those, right?

1041
00:52:49,800 --> 00:52:51,300
That seems kind of compelling to me.

1042
00:52:53,000 --> 00:52:57,000
I feel like that's probably the way we should do it so I feel like we

1043
00:52:57,000 --> 00:52:59,200
might want to start with something like that.

1044
00:52:59,200 --> 00:53:03,800
I feel like that might be the best idea.

1045
00:53:09,300 --> 00:53:09,700
Yeah.

1046
00:53:11,500 --> 00:53:15,500
All right, so let's let's see what we would have to do for that.

1047
00:53:15,600 --> 00:53:20,100
So when we do our do tiled render work, when we actually do that, we

1048
00:53:20,100 --> 00:53:25,700
would need some weight place to store that that information, right?

1049
00:53:25,700 --> 00:53:29,100
We need a way to store that and lucky for us.

1050
00:53:29,100 --> 00:53:32,300
We actually know the maximum number of things that we could possibly

1051
00:53:32,300 --> 00:53:32,900
have.

1052
00:53:33,500 --> 00:53:39,100
And so I feel like we could easily do something where when we do our

1053
00:53:39,300 --> 00:53:41,200
push buffer like in here,

1054
00:53:42,700 --> 00:53:45,300
When we do this stuff, where we say, like okay, you know, here's our

1055
00:53:45,300 --> 00:53:46,000
push buffer.

1056
00:53:46,100 --> 00:53:50,700
We could also do a thing where we just count as we go through, we

1057
00:53:50,700 --> 00:53:54,500
could do like push buffer element count or something like that, you

1058
00:53:54,500 --> 00:53:55,200
know what I mean?

1059
00:53:56,000 --> 00:53:57,900
So, however, much stuff is in there.

1060
00:53:57,900 --> 00:53:59,800
We can just track it and so,

1061
00:54:00,000 --> 00:54:04,600
We do push buffer size, like, when we do allocate render group and we

1062
00:54:04,600 --> 00:54:05,800
set the push for, besides the zero.

1063
00:54:05,800 --> 00:54:08,600
We can also set the push, buffer, element count, 20,

1064
00:54:10,100 --> 00:54:15,600
and then every time something gets pushed, you know, every time a

1065
00:54:15,600 --> 00:54:20,200
render element gets pushed, then when we do that render, when we do

1066
00:54:20,200 --> 00:54:23,200
that that push we increment

1067
00:54:25,300 --> 00:54:26,300
The element count.

1068
00:54:28,000 --> 00:54:30,900
So that way, we would know exactly how many elements there actually

1069
00:54:30,900 --> 00:54:31,300
were.

1070
00:54:32,800 --> 00:54:34,100
And does that ever get reset?

1071
00:54:37,600 --> 00:54:38,300
Just curious.

1072
00:54:38,500 --> 00:54:38,800
Oops.

1073
00:54:48,900 --> 00:54:49,500
It does.

1074
00:54:49,900 --> 00:54:53,300
So we could also say that, right?

1075
00:54:53,300 --> 00:54:57,400
So it gets cleared on on and render as well seems fair.

1076
00:54:58,600 --> 00:55:04,900
So that is a pretty reasonable thing to do, I suspect and that way

1077
00:55:04,900 --> 00:55:09,300
when we go and we're actually going to start the do child render work.

1078
00:55:10,700 --> 00:55:16,300
We would know when we prepare our work struct, like this thing.

1079
00:55:17,000 --> 00:55:22,500
We could give it a space for its temporary storage, so that sorting

1080
00:55:22,500 --> 00:55:25,800
that it needs to do, we could just say, all right, you'll get a place

1081
00:55:25,800 --> 00:55:29,700
for your sorting and I don't know what that D, but it be, you know,

1082
00:55:29,700 --> 00:55:33,400
whatever the tile sort entry or something like this, right?

1083
00:55:33,700 --> 00:55:38,500
And it'd be like an Offset, you know, push buffer offset.

1084
00:55:39,500 --> 00:55:40,300
And like this,

1085
00:55:40,400 --> 00:55:42,700
Key something like this.

1086
00:55:42,700 --> 00:55:49,000
And we would just say, okay, you know, when you are, when you are

1087
00:55:49,000 --> 00:55:56,200
called, you have your sort sort space, you know, you just get some

1088
00:55:56,200 --> 00:56:00,700
space that you can use for sorting and that'd be pretty

1089
00:56:00,700 --> 00:56:01,500
straightforward, right?

1090
00:56:01,500 --> 00:56:08,000
So when we call render group child render group to Output, or I guess

1091
00:56:08,000 --> 00:56:10,400
really, in either case, we create that

1092
00:56:10,400 --> 00:56:11,800
That sort space.

1093
00:56:12,000 --> 00:56:15,900
So that would just be like, all right, the work sort space is

1094
00:56:15,900 --> 00:56:16,800
temporary memory.

1095
00:56:23,900 --> 00:56:28,300
So we're going to need a way to get temporary memory and I forget how

1096
00:56:28,300 --> 00:56:32,900
we did our begin temporary memory, forgetting stuff.

1097
00:56:32,900 --> 00:56:36,200
We just do it off of the memory Arena and so I assume that's going to

1098
00:56:36,200 --> 00:56:41,400
go on the transient arena there and so we want some place to do that

1099
00:56:41,400 --> 00:56:42,000
work.

1100
00:56:42,700 --> 00:56:43,700
Yeah.

1101
00:56:44,700 --> 00:56:45,200
Well.

1102
00:56:46,800 --> 00:56:49,000
Just trying to think of exactly how we want to do this.

1103
00:56:50,300 --> 00:56:54,200
Cuz the sort space has to happen in both cases and I just want a nice

1104
00:56:54,200 --> 00:56:55,300
clean way to do that.

1105
00:56:55,400 --> 00:56:58,300
You know, essentially what I'm thinking is something like okay,

1106
00:57:00,600 --> 00:57:01,500
This guy.

1107
00:57:01,500 --> 00:57:03,800
Well, you know, honestly I think it's just this.

1108
00:57:04,000 --> 00:57:08,000
I think it's just that these guys have to be given the temporary Arena

1109
00:57:08,000 --> 00:57:12,400
that they're going to use and I don't actually see any or this guy

1110
00:57:12,400 --> 00:57:15,200
doesn't actually do anything with an arena usually.

1111
00:57:15,500 --> 00:57:18,600
So I think that's going to have to be something that you just pass in

1112
00:57:18,600 --> 00:57:20,400
the temporary memory, right?

1113
00:57:22,500 --> 00:57:25,100
So the arena where you want to get the temporary memory from.

1114
00:57:25,800 --> 00:57:29,900
And so then all it would do is it would say like okay you know, at the

1115
00:57:29,900 --> 00:57:32,600
start of this, I'm going to do begin temporary memory on the temporary

1116
00:57:32,600 --> 00:57:32,900
NE.

1117
00:57:37,300 --> 00:57:38,500
And then I'm going to end it.

1118
00:57:46,300 --> 00:57:46,900
Here.

1119
00:57:50,000 --> 00:57:50,500
Right.

1120
00:57:51,500 --> 00:57:54,300
And that's really it, I think.

1121
00:57:55,100 --> 00:57:59,300
So, here is the sword entry.

1122
00:58:02,700 --> 00:58:06,500
And I need however, many of those as we have render elements, right?

1123
00:58:06,600 --> 00:58:13,100
So I need to say that the render group push push element count or

1124
00:58:13,100 --> 00:58:15,000
whatever pushed buffer element cap.

1125
00:58:16,600 --> 00:58:21,900
I need to get space for as many entries as there are elements because

1126
00:58:21,900 --> 00:58:24,200
that that may be there may be that many of them.

1127
00:58:25,800 --> 00:58:30,800
So yeah so we could do that and that's good.

1128
00:58:31,000 --> 00:58:33,500
Push a ray needs to take the tempering as well I think.

1129
00:58:33,800 --> 00:58:40,400
Yeah and so that's same thing needs to happen in our tiled one and I

1130
00:58:40,400 --> 00:58:41,500
don't actually know

1131
00:58:43,800 --> 00:58:45,100
Yeah, that anything weird has to happen.

1132
00:58:45,100 --> 00:58:46,600
It's basically exactly the same.

1133
00:58:47,200 --> 00:58:49,200
So this is going to just be oops.

1134
00:58:50,400 --> 00:58:55,000
this is just going to take the same stuff and do exactly the same

1135
00:58:55,000 --> 00:58:57,500
thing only instead of allocating, one of those going to allocate one

1136
00:58:57,500 --> 00:58:58,100
per

1137
00:59:00,300 --> 00:59:00,900
right.

1138
00:59:02,200 --> 00:59:05,700
So that's just going to say, all right, for each of these guys, the

1139
00:59:05,700 --> 00:59:06,900
work sort space.

1140
00:59:09,000 --> 00:59:09,900
Is going to be that.

1141
00:59:12,500 --> 00:59:13,200
And we're good.

1142
00:59:15,000 --> 00:59:19,000
Okay, so these guys just have to take the translate Tran Arena.

1143
00:59:19,200 --> 00:59:23,500
I believe is really all that has to happen so that they can allocate

1144
00:59:23,700 --> 00:59:28,100
their sort of their temporary memory from it.

1145
00:59:28,300 --> 00:59:31,700
Oh, although this guy since he's in a task

1146
00:59:32,800 --> 00:59:35,200
He would have to get it from his own memory.

1147
00:59:37,100 --> 00:59:37,700
This right here.

1148
00:59:42,700 --> 00:59:45,100
Okay, so that's fine.

1149
00:59:47,300 --> 00:59:49,100
And tiled render group to Output.

1150
00:59:49,100 --> 00:59:53,200
This guy gets it presumably from the Tran, the actual Tran Arena.

1151
00:59:54,600 --> 00:59:55,800
Not that.

1152
00:59:57,100 --> 00:59:57,400
Yeah.

1153
01:00:00,200 --> 01:00:01,500
Wait a second.

1154
01:00:04,600 --> 01:00:06,400
Where was that?

1155
01:00:06,400 --> 01:00:09,300
Why do we have two calls to tiled render group to Output?

1156
01:00:10,800 --> 01:00:11,900
Do you understand that?

1157
01:00:19,600 --> 01:00:21,400
All right, the debugger calls it.

1158
01:00:22,200 --> 01:00:26,400
Okay, that's totally fine and I don't really know.

1159
01:00:26,400 --> 01:00:30,400
So in the debugger also again like I don't really know very much about

1160
01:00:30,400 --> 01:00:33,900
how we want that guy to manage its memory.

1161
01:00:33,900 --> 01:00:36,500
But presumably, since it's just using the temporary memory right

1162
01:00:36,500 --> 01:00:39,100
inside that window, it doesn't really matter.

1163
01:00:39,100 --> 01:00:43,700
And it can always use like, the debug arena for that or it could use

1164
01:00:43,700 --> 01:00:44,200
either of these.

1165
01:00:44,200 --> 01:00:48,300
Actually, I don't think it matters at all because it's only within

1166
01:00:48,300 --> 01:00:48,900
that tile.

1167
01:00:49,800 --> 01:00:51,200
State that it would ever care.

1168
01:00:52,600 --> 01:00:53,800
So I think that should be fine.

1169
01:00:56,700 --> 01:00:58,000
And and off it goes.

1170
01:00:58,800 --> 01:01:01,900
All right, so I'm going to end it there and that's actually perfect

1171
01:01:01,900 --> 01:01:03,900
because then we're not really getting into sorting at all.

1172
01:01:03,900 --> 01:01:07,400
So it's not like a cliffhanger anything, but now it's good.

1173
01:01:07,400 --> 01:01:10,700
Because now we have a situation where these guys in their Tubman to

1174
01:01:10,700 --> 01:01:10,900
work.

1175
01:01:10,900 --> 01:01:12,300
They have space for sorting.

1176
01:01:12,400 --> 01:01:15,900
And so, really, what I can do when we start off is we can take this

1177
01:01:15,900 --> 01:01:17,400
render group to Output stuff.

1178
01:01:17,400 --> 01:01:22,100
We can go ahead and make that right into those entries and off you go.

1179
01:01:24,600 --> 01:01:29,300
Off you go from there, and it will take a little more time to do, but

1180
01:01:30,300 --> 01:01:31,000
should be okay.

1181
01:01:31,900 --> 01:01:33,600
So I'm going to go ahead and go to the Q&A.

1182
01:01:33,600 --> 01:01:38,000
We could take a couple minutes of Q&A here and then that'll be it for

1183
01:01:38,000 --> 01:01:38,500
a while.

1184
01:01:38,500 --> 01:01:41,900
And we come back, we'll get our render ass properly sorting, which I

1185
01:01:41,900 --> 01:01:43,100
think would be a good idea.

1186
01:02:06,300 --> 01:02:07,600
Sergey RGV.

1187
01:02:07,600 --> 01:02:10,000
Could you tell us roughly how the expanding Arena would be

1188
01:02:10,000 --> 01:02:10,500
implemented?

1189
01:02:10,600 --> 01:02:12,600
Yeah, it's totally trivial.

1190
01:02:12,600 --> 01:02:13,000
Right?

1191
01:02:14,100 --> 01:02:17,900
So like I mean, it's super, super trivial.

1192
01:02:18,300 --> 01:02:26,400
The only thing you do is right here instead of this assertion you

1193
01:02:26,400 --> 01:02:28,800
replace this assertion and instead you just do it.

1194
01:02:28,800 --> 01:02:33,200
If if you can't satisfy it you just call the operating system from our

1195
01:02:33,200 --> 01:02:33,600
memory.

1196
01:02:34,500 --> 01:02:35,100
That's it.

1197
01:02:36,000 --> 01:02:40,000
So the only complexity comes in in implementing the temporary memory

1198
01:02:40,000 --> 01:02:42,800
thing because that has to rewind.

1199
01:02:42,900 --> 01:02:44,700
So there's a little bit more there.

1200
01:02:44,900 --> 01:02:45,800
You what you'll see.

1201
01:02:46,100 --> 01:02:49,800
But it's it's like stupid simple, right?

1202
01:02:57,500 --> 01:02:59,900
Insofar as it's, the lower level memory, nothing you mentioned.

1203
01:03:00,000 --> 01:03:04,600
PC basically just what Malik virtual act does not really because

1204
01:03:04,600 --> 01:03:07,700
virtual lock and Malik actually do memory coalescing and stuff.

1205
01:03:07,700 --> 01:03:10,100
They're a little more complicated than memory Arenas are like the

1206
01:03:10,100 --> 01:03:14,600
simplest form for the most part of allocator and Malik actually tries

1207
01:03:14,600 --> 01:03:17,700
to like reuse blocks and it allows you to free and allocate in any

1208
01:03:17,700 --> 01:03:18,700
order and all that stuff.

1209
01:03:18,700 --> 01:03:21,500
So that's a worse problem, right?

1210
01:03:23,100 --> 01:03:24,900
That's a little more of a serious thing.

1211
01:03:25,700 --> 01:03:27,400
Simon Denton, I got the cane our book to learn.

1212
01:03:27,400 --> 01:03:28,900
See any other useful resources.

1213
01:03:28,900 --> 01:03:31,000
I take online stuff with a grain of salt.

1214
01:03:31,800 --> 01:03:33,300
I don't know the wrong one to ask you.

1215
01:03:33,300 --> 01:03:34,000
Probably the stream.

1216
01:03:34,000 --> 01:03:36,600
Is the better people to ask cast?

1217
01:03:36,600 --> 01:03:40,000
05 is interlaced the same as interleaved.

1218
01:03:43,700 --> 01:03:46,200
You know, yes or no.

1219
01:03:46,400 --> 01:03:48,000
Interleaved is just a general term.

1220
01:03:48,000 --> 01:03:50,800
That means that you're doing two things.

1221
01:03:50,800 --> 01:03:55,600
Alternating interlaced is a very specific term that refers to a way

1222
01:03:55,600 --> 01:04:00,700
that displays work and it refers to the display methodology of first

1223
01:04:00,700 --> 01:04:04,400
displaying all of the even rows or odd rows, depending on, which

1224
01:04:04,400 --> 01:04:09,400
parodies start with first displaying every other row, then jumping

1225
01:04:09,400 --> 01:04:11,100
back to the top and doing every other

1226
01:04:11,300 --> 01:04:13,200
Row that you didn't do, right?

1227
01:04:13,900 --> 01:04:15,800
That's very specifically interlaced.

1228
01:04:16,000 --> 01:04:19,300
So interlace is a very specific term interleaved, could mean anything.

1229
01:04:19,600 --> 01:04:23,200
Interleave can basically mean anything that alternates between two

1230
01:04:23,200 --> 01:04:27,400
things is an interleave, so, interlaced, very specific talking about

1231
01:04:27,400 --> 01:04:30,700
displays interleaved could be talking about anything.

1232
01:04:33,500 --> 01:04:34,100
Connor rents.

1233
01:04:34,100 --> 01:04:37,000
What should I do with my life while handmade hero is on break?

1234
01:04:37,700 --> 01:04:42,200
Well, I set you up to implement a sort, implement the sort.

1235
01:04:43,500 --> 01:04:44,300
Beat me to it.

1236
01:04:44,300 --> 01:04:47,600
Everything is there you should in two weeks or however, long.

1237
01:04:47,600 --> 01:04:49,300
It's going to take it.

1238
01:04:49,300 --> 01:04:51,300
Should be a little less than two weeks, probably or something like,

1239
01:04:51,300 --> 01:04:56,400
two weeks before I will be back here in able to program on this

1240
01:04:56,400 --> 01:04:57,100
machine again.

1241
01:04:59,000 --> 01:05:00,600
You should be able to get all that working.

1242
01:05:06,700 --> 01:05:08,900
Super Cub, which algorithm do you plan on using for sorting?

1243
01:05:09,300 --> 01:05:10,100
I don't know.

1244
01:05:10,500 --> 01:05:12,300
We'll start with a bubble sort.

1245
01:05:12,300 --> 01:05:15,900
Which is the stupidest kind, like the most basic kind and then we'll

1246
01:05:15,900 --> 01:05:20,700
try implementing one of the more complex sword, sorts like a merge

1247
01:05:20,700 --> 01:05:23,900
sort and we'll actually see what the performance is.

1248
01:05:25,400 --> 01:05:26,800
Because sorting is weird.

1249
01:05:26,800 --> 01:05:30,900
Like, sometimes, stupid sorts are better than smart sorts, depending

1250
01:05:30,900 --> 01:05:31,700
on the circumstances.

1251
01:05:31,700 --> 01:05:32,600
So it's kind of hard.

1252
01:05:43,700 --> 01:05:44,100
K.

1253
01:05:44,100 --> 01:05:47,200
Why are we running in a Windows application using wind main instead of

1254
01:05:47,200 --> 01:05:48,100
a console one?

1255
01:05:48,700 --> 01:05:52,200
So the reason is because if you build your app, if you build your

1256
01:05:52,200 --> 01:05:56,000
Windows, executable as a console, then when people launched it, it

1257
01:05:56,000 --> 01:05:57,600
spawns a little console window.

1258
01:05:57,800 --> 01:05:59,800
Always, it's no way to get rid of it.

1259
01:06:00,900 --> 01:06:05,300
And so, it's just really unprofessional to have a game that starts up

1260
01:06:05,300 --> 01:06:05,800
and it has this.

1261
01:06:05,800 --> 01:06:06,700
It's, it's window.

1262
01:06:06,700 --> 01:06:08,600
And the stupid console window there, right?

1263
01:06:09,400 --> 01:06:13,600
So, if you really want that you can't, there are some ways of getting

1264
01:06:13,600 --> 01:06:14,500
around it.

1265
01:06:14,800 --> 01:06:18,800
And what you do there is you actually look to find your console window

1266
01:06:18,800 --> 01:06:19,800
and then you hide it.

1267
01:06:20,200 --> 01:06:21,300
So no one can see it.

1268
01:06:22,700 --> 01:06:26,000
But again, since we don't need that, I don't understand why you would

1269
01:06:26,000 --> 01:06:26,600
ever do that.

1270
01:06:26,600 --> 01:06:28,000
Like I'm not sure why.

1271
01:06:28,700 --> 01:06:31,900
You wouldn't just build it as a Windows or regular Windows application

1272
01:06:31,900 --> 01:06:33,300
instead of a consultation, right?

1273
01:06:35,400 --> 01:06:35,900
K3.

1274
01:06:35,900 --> 01:06:37,900
Why was the interlacing leaving at in the first place?

1275
01:06:37,900 --> 01:06:39,100
It was added because

1276
01:06:40,500 --> 01:06:43,500
I was thinking it might be a good idea to have hyper threads where

1277
01:06:43,500 --> 01:06:47,600
each hyper thread was rendering, an alternating lines, because then

1278
01:06:47,600 --> 01:06:49,800
they would hit the cash optimally on that core.

1279
01:06:50,100 --> 01:06:54,400
But I never could really think of a way to make, to force the threads

1280
01:06:54,400 --> 01:06:55,900
to actually run in that way.

1281
01:06:56,500 --> 01:06:58,400
So I think it was just kind of a waste of time.

1282
01:07:01,800 --> 01:07:04,100
Insofar as how many to do is, are there in the code now?

1283
01:07:04,500 --> 01:07:05,400
I have no idea.

1284
01:07:12,700 --> 01:07:16,100
Not that many, I guess, let's see.

1285
01:07:26,300 --> 01:07:27,200
227.

1286
01:07:29,300 --> 01:07:31,600
Is there much overhead this morning to render threads every frame

1287
01:07:31,600 --> 01:07:32,800
instead of keeping them around?

1288
01:07:33,400 --> 01:07:36,800
We do not spawn render threads every frame, we keep them around.

1289
01:07:38,300 --> 01:07:42,100
And yes there would be quite a bit of overhead spawning.

1290
01:07:42,100 --> 01:07:44,600
The memory frame, which is why we don't do it.

1291
01:07:45,300 --> 01:07:46,000
Culver fly.

1292
01:07:46,000 --> 01:07:48,500
Do you always start with software rendering when working on games?

1293
01:07:48,800 --> 01:07:53,000
No, I don't ever start with software rendering.

1294
01:07:53,800 --> 01:07:58,800
I did that strictly so that people on the stream could learn how a

1295
01:07:58,800 --> 01:07:59,600
graphics card works.

1296
01:08:02,300 --> 01:08:04,600
Because if you just call a graphics card and say, draw my Graphics,

1297
01:08:04,600 --> 01:08:06,500
you never have any idea how they actually work.

1298
01:08:07,300 --> 01:08:11,200
And so only people who used to have to write renderers from before the

1299
01:08:11,200 --> 01:08:17,700
GPU days, like, in, you know, 9594 they all know how they work, and it

1300
01:08:17,700 --> 01:08:22,200
gives them a lot of insight into Graphics, you know, stuff.

1301
01:08:22,300 --> 01:08:24,399
And so I wanted to make sure everyone had that experience.

1302
01:08:24,700 --> 01:08:25,300
At least once,

1303
01:08:27,500 --> 01:08:28,000
For New Years.

1304
01:08:28,000 --> 01:08:29,100
Can we get a marathon?

1305
01:08:30,600 --> 01:08:31,800
Maybe I'll think about it.

1306
01:08:33,600 --> 01:08:37,399
Ryan Reed is, can you do really smooth animation GTI, without vsync?

1307
01:08:38,500 --> 01:08:40,600
I don't know these days.

1308
01:08:40,899 --> 01:08:43,300
Windows is very different nowadays than it was when I started

1309
01:08:43,300 --> 01:08:45,899
programming on it and I haven't played much with the arrow compositor.

1310
01:08:45,899 --> 01:08:46,899
So I don't really know.

1311
01:08:48,399 --> 01:08:49,399
I really have no idea.

1312
01:08:50,899 --> 01:08:53,500
It's not that relevant for games because you have to go through the

1313
01:08:53,500 --> 01:08:56,500
GPU eventually for games, more directly.

1314
01:08:56,500 --> 01:08:59,899
Anyway, like even if we kept our software rendering,

1315
01:09:00,000 --> 01:09:01,200
Never did a hardware renderer.

1316
01:09:01,200 --> 01:09:04,500
I'd still want to do the small bit of code to get us running through

1317
01:09:04,500 --> 01:09:07,500
opengl so that we can get vsync, right?

1318
01:09:08,100 --> 01:09:12,899
So I really just don't know much about about what would happen if you

1319
01:09:12,899 --> 01:09:14,300
decided not to do that.

1320
01:09:16,200 --> 01:09:16,700
Simple question.

1321
01:09:16,700 --> 01:09:18,399
But how do you forward declare a struct in Pura?

1322
01:09:18,399 --> 01:09:21,600
See, I have type def struct Fufu.

1323
01:09:21,899 --> 01:09:23,399
How do I forward declare this?

1324
01:09:23,800 --> 01:09:27,000
I tried typedef struct Fufu, but didn't work, I don't know that you

1325
01:09:27,000 --> 01:09:27,500
can

1326
01:09:29,200 --> 01:09:29,899
Do that.

1327
01:09:31,700 --> 01:09:32,600
I'm sorry.

1328
01:09:32,600 --> 01:09:33,600
I don't know.

1329
01:09:44,200 --> 01:09:46,200
I probably didn't know one point and I probably forgot.

1330
01:09:49,800 --> 01:09:51,300
M, 1, E LL.

1331
01:09:51,300 --> 01:09:53,899
Do you have any opposition for not putting transparent pixels?

1332
01:09:54,300 --> 01:09:55,100
No, we just.

1333
01:09:55,100 --> 01:09:59,300
So right now, this is like, again, this is one of those things where

1334
01:09:59,300 --> 01:10:01,200
like it's just crazy, how fast computers are.

1335
01:10:01,500 --> 01:10:05,800
So it's sick that this thing runs at 30 frames a second basically

1336
01:10:07,300 --> 01:10:10,700
because this is like, I don't even remember how many 10 levels of

1337
01:10:10,700 --> 01:10:12,800
overdraw, it's a strong everything.

1338
01:10:12,900 --> 01:10:17,000
So like everything behind the house is getting drawn like ten times on

1339
01:10:17,000 --> 01:10:18,300
top of each other, right?

1340
01:10:18,500 --> 01:10:19,200
And there's no optimization

1341
01:10:19,400 --> 01:10:20,600
He's in there for that right now.

1342
01:10:21,100 --> 01:10:24,000
So if we wanted to, we could speed these things up dramatically,

1343
01:10:24,000 --> 01:10:24,500
right?

1344
01:10:24,500 --> 01:10:27,400
We could probably make these things render at four or five times the

1345
01:10:27,400 --> 01:10:28,600
speed they're running at now.

1346
01:10:30,500 --> 01:10:35,000
But it's just crazy how they're the CPUs are just so fast that if we

1347
01:10:35,000 --> 01:10:38,900
want our, if we wanted our cutscenes to run at 30 frames a second we

1348
01:10:38,900 --> 01:10:41,500
don't even have to do that work, which is crazy.

1349
01:10:43,000 --> 01:10:44,500
That's just it's just sick.

1350
01:10:47,700 --> 01:10:50,000
Yeah, it's just it's so bizarre.

1351
01:11:12,900 --> 01:11:14,300
Let's see here.

1352
01:11:18,200 --> 01:11:18,700
Hubert Keller.

1353
01:11:18,700 --> 01:11:20,900
Once you have sorting implanted, do you think you will change the

1354
01:11:20,900 --> 01:11:22,700
render to draw front to back?

1355
01:11:24,500 --> 01:11:26,400
We could, we might

1356
01:11:28,900 --> 01:11:32,500
It's not a bad idea, like I said, when we talked about it before and

1357
01:11:32,500 --> 01:11:36,800
we could do some optimizations there, but yeah, I don't know, it's a

1358
01:11:36,800 --> 01:11:37,400
good question.

1359
01:11:40,600 --> 01:11:41,600
Elvin.

1360
01:11:43,200 --> 01:11:48,300
Is there any way to use a console instead and hide that talking about

1361
01:11:48,300 --> 01:11:52,200
Windows applications from task manager, Etc?

1362
01:11:55,700 --> 01:11:59,800
I'm not sure what you're asking is there any way to use a console

1363
01:12:00,000 --> 01:12:01,300
Stead and hide.

1364
01:12:01,300 --> 01:12:02,600
That hide?

1365
01:12:02,600 --> 01:12:03,100
What?

1366
01:12:08,800 --> 01:12:09,300
Act binary.

1367
01:12:09,300 --> 01:12:10,800
Can you give a quick overview of the way?

1368
01:12:10,800 --> 01:12:12,800
Memory is managed at the moment push Arena.

1369
01:12:12,800 --> 01:12:14,400
Begin temp, Arena Etc.

1370
01:12:16,400 --> 01:12:19,400
Well yeah, I mean there's really very little to it.

1371
01:12:19,500 --> 01:12:24,200
The way that we manage memory is extraordinarily simple and like I

1372
01:12:24,200 --> 01:12:29,100
said, it's, that's kind of why I always say that it's not that big of

1373
01:12:29,100 --> 01:12:29,700
a deal.

1374
01:12:29,900 --> 01:12:32,200
Like it takes a little bit of work on handmade hero because we don't

1375
01:12:32,200 --> 01:12:36,100
really have that much code for it and I have to write it all on the

1376
01:12:36,100 --> 01:12:36,500
stream.

1377
01:12:36,500 --> 01:12:38,200
But once you've written some

1378
01:12:38,500 --> 01:12:41,600
Usually pretty easy to just ignore memory management almost entirely

1379
01:12:41,800 --> 01:12:44,500
and there's just a few places in your software, you care about it.

1380
01:12:46,100 --> 01:12:46,700
So,

1381
01:12:48,200 --> 01:12:52,000
But in terms of memory management, right now, all we do is we just

1382
01:12:52,000 --> 01:12:55,300
say, we have a block of memory and it's however much you want to use

1383
01:12:55,300 --> 01:12:55,800
for the game.

1384
01:12:55,800 --> 01:12:57,800
So, let's say you want to use a gigabyte of memory for the game or

1385
01:12:57,800 --> 01:13:00,400
something, and then we just partition it into slices.

1386
01:13:00,400 --> 01:13:03,300
So we say like, oh this part will be used for the assets or something.

1387
01:13:04,300 --> 01:13:08,200
This part will be used for the game or whatever and technically we do

1388
01:13:08,200 --> 01:13:09,500
this a little bit early.

1389
01:13:09,800 --> 01:13:13,400
So really instead of giving the game, the whole one gigabyte, what we

1390
01:13:13,400 --> 01:13:17,800
do at startup, as we actually say, this part of it is one chunk.

1391
01:13:18,100 --> 01:13:18,400
Right.

1392
01:13:18,400 --> 01:13:22,000
This is a chunk and this is a chunk at the operating system level.

1393
01:13:22,600 --> 01:13:26,700
So we have this thing called like the permanent Arena and the

1394
01:13:26,700 --> 01:13:27,700
transient Arena.

1395
01:13:30,500 --> 01:13:33,100
But then all that happens is once we have that we just start stacking

1396
01:13:33,100 --> 01:13:34,500
things up on it, that's it.

1397
01:13:34,600 --> 01:13:35,500
That's all we do.

1398
01:13:35,700 --> 01:13:38,800
So a given arena is just a big buffer of memory.

1399
01:13:38,900 --> 01:13:42,400
We start here with nothing in it and as we put things on it we just

1400
01:13:42,400 --> 01:13:44,000
push them down, right?

1401
01:13:44,000 --> 01:13:45,100
So we just keep pushing it down.

1402
01:13:45,100 --> 01:13:47,300
So, here's the thing, there's a new thing, there's a new thing, it's

1403
01:13:47,300 --> 01:13:51,700
just a stack and the way we handle temporary memory is we just say,

1404
01:13:51,700 --> 01:13:54,900
remember where the stack pointer was use, all this stuff, however, you

1405
01:13:54,900 --> 01:13:56,500
want, and then jump back.

1406
01:13:56,800 --> 01:13:59,000
So when you're done with it, we just pretend it never happened.

1407
01:13:59,000 --> 01:14:00,200
And then the new stuff that gets out.

1408
01:14:00,300 --> 01:14:01,400
Edible right over it.

1409
01:14:01,900 --> 01:14:02,600
That's it.

1410
01:14:03,000 --> 01:14:04,200
There's nothing else there.

1411
01:14:05,000 --> 01:14:06,600
It's the simplest darn thing.

1412
01:14:18,400 --> 01:14:19,200
All right.

1413
01:14:21,300 --> 01:14:21,700
I'll switch.

1414
01:14:21,700 --> 01:14:23,600
Are you still using top bat file compilations?

1415
01:14:23,600 --> 01:14:27,500
Yes, this is our heroes are our build.

1416
01:14:27,600 --> 01:14:28,700
Here's our build system.

1417
01:14:30,400 --> 01:14:31,400
That's the build system.

1418
01:14:46,200 --> 01:14:47,300
All right.

1419
01:14:53,000 --> 01:14:56,400
All right, I think that's just about it.

1420
01:14:57,500 --> 01:14:58,700
So I'm going to wrap it up.

1421
01:15:01,200 --> 01:15:04,800
Let's go ahead and save all this up and close it on down.

1422
01:15:10,100 --> 01:15:12,000
All right, thank you, everyone for joining me for another episode of

1423
01:15:12,000 --> 01:15:12,400
handmade here.

1424
01:15:12,400 --> 01:15:13,800
It's been a pleasure clothing with you.

1425
01:15:13,800 --> 01:15:17,000
As always, if you would like to follow along the series at home, you

1426
01:15:17,000 --> 01:15:21,200
can always go to handmade hero dot org and pre-order the game in which

1427
01:15:21,200 --> 01:15:23,200
comes with the source code even as we speak.

1428
01:15:23,200 --> 01:15:26,400
So, every night I upload the latest changes and you can play around

1429
01:15:26,400 --> 01:15:26,700
with them.

1430
01:15:27,600 --> 01:15:30,100
There's also a forum site, you can go to where you can ask questions

1431
01:15:30,100 --> 01:15:32,400
or if you are anti-deficit guy, there's a patreon page.

1432
01:15:32,400 --> 01:15:33,000
You can subscribe to.

1433
01:15:33,000 --> 01:15:34,200
If you want to support the video series.

1434
01:15:34,200 --> 01:15:36,700
And there is a tweet bot which treats the schedule.

1435
01:15:36,700 --> 01:15:39,800
If you want to catch a series Live and the next time we will be live.

1436
01:15:39,900 --> 01:15:42,000
Be after Christmas break, I will not be here.

1437
01:15:42,000 --> 01:15:45,800
So I cannot keep streaming, unfortunately, I would if I could, but I

1438
01:15:45,800 --> 01:15:45,900
can't.

1439
01:15:45,900 --> 01:15:50,900
So keep an eye on the tree pod, find out when that is, I suspect, it

1440
01:15:50,900 --> 01:15:51,900
will be sometime around New Year's.

1441
01:15:51,900 --> 01:15:55,900
So check back around then or just make sure you scrub feet Bott.

1442
01:15:55,900 --> 01:15:58,700
And it will tell you that's about it.

1443
01:15:58,900 --> 01:16:04,700
Hope you guys have a good holiday season and doing whatever you're

1444
01:16:04,700 --> 01:16:04,800
doing.

1445
01:16:04,800 --> 01:16:09,100
And I will see you guys on the internet in the meantime.

1446
01:16:09,100 --> 01:16:09,900
So take it easy.

1447
01:16:09,900 --> 01:16:13,100
Easy everyone and I'll see you in 2016.

