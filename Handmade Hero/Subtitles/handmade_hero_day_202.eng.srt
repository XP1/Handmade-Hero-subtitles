1
00:00:00,300 --> 00:00:01,200
Start recording.

2
00:00:01,900 --> 00:00:04,000
Hello everyone and welcome to handmade here.

3
00:00:04,000 --> 00:00:08,600
Other show Rico to complete game live on stream in the pre stream.

4
00:00:08,600 --> 00:00:11,100
Actually wanted to kind of carry something forward.

5
00:00:11,100 --> 00:00:14,100
Someone was asking about, and it's kind of a good just thing to show.

6
00:00:14,100 --> 00:00:15,200
So I think I'm gonna show it.

7
00:00:16,000 --> 00:00:19,200
I'll just remind everyone weird a 2002 today I'm going to jump right

8
00:00:19,200 --> 00:00:21,600
into it, so if you want to follow along at home, but the source code

9
00:00:21,600 --> 00:00:24,900
and you pre-ordered the game unpack Day 2, 01 source, code and

10
00:00:24,900 --> 00:00:25,200
directory.

11
00:00:25,200 --> 00:00:27,600
And you'll be right where I am right now.

12
00:00:27,600 --> 00:00:29,800
But what I want to talk about just real

13
00:00:30,100 --> 00:00:35,600
before we get back to what we were doing is if you take a look here at

14
00:00:37,900 --> 00:00:41,600
Visual Studio when we build our game, you know, if we right click on

15
00:00:41,600 --> 00:00:44,000
something you'll notice that there's these go to definition go to

16
00:00:44,000 --> 00:00:46,900
declaration things and they're they're always great out.

17
00:00:46,900 --> 00:00:50,600
So we don't actually have the benefit of using those features at all,

18
00:00:51,600 --> 00:00:54,600
you know, in this, in this in this project, right.

19
00:00:54,800 --> 00:00:58,400
But normally, if you build a project and it has, what's called browse

20
00:00:58,400 --> 00:00:59,900
info, you can actually use those.

21
00:00:59,900 --> 00:01:05,400
And so what you can do as I have a I have another project here that we

22
00:01:05,400 --> 00:01:07,500
can look at, right if you're just using this

23
00:01:07,700 --> 00:01:10,900
And heard if you just you know used Visual Studio to create a project

24
00:01:10,900 --> 00:01:13,600
using their project Wizard and that stuff it'll automatically be set

25
00:01:13,600 --> 00:01:15,500
up for brows in phone all that stuff.

26
00:01:16,000 --> 00:01:19,900
So if you're in a project that normally has all that stuff you can go

27
00:01:19,900 --> 00:01:22,100
ahead and like right click on something and you can see that those

28
00:01:22,100 --> 00:01:24,700
like go to definition go to declaration things are there because

29
00:01:24,700 --> 00:01:28,400
eyebrows info has been built and it can load it and so what that

30
00:01:28,400 --> 00:01:32,000
allows you to do and you know it's not I don't find it particularly

31
00:01:32,000 --> 00:01:35,800
useful in my code but I do find it useful in the windows source code.

32
00:01:36,000 --> 00:01:37,500
So for example like you know you

33
00:01:37,600 --> 00:01:40,800
You want to know something you're in this like load accelerators or

34
00:01:40,800 --> 00:01:41,100
whatever.

35
00:01:41,100 --> 00:01:42,200
You're like programming with that.

36
00:01:42,200 --> 00:01:43,700
And you're like, where is that?

37
00:01:44,000 --> 00:01:47,200
You can go, you can right-click on it and go to go to definition and

38
00:01:47,200 --> 00:01:49,900
it'll come back and say, like, oh, that was a pound of find in the

39
00:01:49,900 --> 00:01:52,500
windows headers that like, was mapped to load accelerators.

40
00:01:52,500 --> 00:01:55,300
Wo where's that, you know, go to definition.

41
00:01:55,300 --> 00:01:56,500
Of course, that would be right above it.

42
00:01:56,500 --> 00:01:59,000
But, you know, you can imagine somewhere else and there's the actual

43
00:01:59,000 --> 00:02:01,000
function that's getting called, right?

44
00:02:01,400 --> 00:02:04,000
And that's just a handy way if you're trying to explore around,

45
00:02:04,000 --> 00:02:06,000
someone's code base, just have no idea what's going on.

46
00:02:09,100 --> 00:02:13,500
It's kind of nice because Windows headers are just this huge nasty

47
00:02:13,500 --> 00:02:14,000
mess.

48
00:02:14,500 --> 00:02:17,700
And so being able to just kind of have the compiler automatically

49
00:02:17,700 --> 00:02:21,100
output the data so that you can just browse right to the right place.

50
00:02:21,300 --> 00:02:22,200
It's kind of nice.

51
00:02:22,600 --> 00:02:24,100
Now, you can turn that on yourself.

52
00:02:24,100 --> 00:02:26,600
I just don't know if Visual Studio will load it without a project

53
00:02:26,600 --> 00:02:29,800
file, but you can turn turn that on yourself.

54
00:02:30,200 --> 00:02:34,400
In fact, let me see if I can find it here.

55
00:02:34,600 --> 00:02:37,300
So, in the compiler, I guess there's a

56
00:02:38,400 --> 00:02:39,100
Switch for it.

57
00:02:39,100 --> 00:02:39,400
I have.

58
00:02:39,400 --> 00:02:40,500
Don't usually do it.

59
00:02:41,200 --> 00:02:42,300
So I don't really remember.

60
00:02:42,300 --> 00:02:44,300
But let's see browse info.

61
00:02:44,400 --> 00:02:50,700
Anyone anyone for brows info browse info?

62
00:02:51,500 --> 00:02:52,800
Can you build the browse info?

63
00:02:52,800 --> 00:02:53,400
I don't know.

64
00:02:54,200 --> 00:02:59,800
Let's see browse info brows and foe browser info.

65
00:03:01,300 --> 00:03:04,900
Visual Studio command-line switch.

66
00:03:05,000 --> 00:03:07,300
Build brows info.

67
00:03:08,000 --> 00:03:09,200
Pretty clear right?

68
00:03:10,800 --> 00:03:14,300
Let's see, let's see.

69
00:03:15,900 --> 00:03:19,600
Create browser for Matrix of a browsing compiler creates an SBR file,

70
00:03:19,900 --> 00:03:20,400
I know.

71
00:03:20,400 --> 00:03:21,100
But how to do that.

72
00:03:21,100 --> 00:03:26,900
Ok FR or FR which one of these is the one that we actually want here,

73
00:03:27,300 --> 00:03:27,900
right?

74
00:03:28,200 --> 00:03:31,700
I don't actually know if our creates an svr without information on

75
00:03:31,700 --> 00:03:32,600
local variables.

76
00:03:32,800 --> 00:03:35,600
FR, create such are with complete symbolic information.

77
00:03:35,800 --> 00:03:38,800
So /fr is like the full monty, right?

78
00:03:38,800 --> 00:03:42,700
That's like everything, so /fr and then the path name.

79
00:03:42,900 --> 00:03:45,400
So if we wanted to write, we could try that and just

80
00:03:45,600 --> 00:03:50,000
The if we can get it and I won't spend much time on it because like I

81
00:03:50,000 --> 00:03:51,100
said, it don't really care.

82
00:03:51,100 --> 00:03:53,600
But I just wanted to point out the fact for people who might be

83
00:03:53,600 --> 00:03:58,200
interested in this, it's something that's probably worth knowing can

84
00:03:58,700 --> 00:04:00,100
can happen.

85
00:04:00,900 --> 00:04:06,600
So yeah, if if we just put a minus FR just in their General Flags, is

86
00:04:06,600 --> 00:04:07,400
that going to be sufficient?

87
00:04:07,400 --> 00:04:10,200
Probably like if I just do this, right?

88
00:04:12,700 --> 00:04:13,700
Let's find out.

89
00:04:17,300 --> 00:04:22,500
So yeah, I see them there.

90
00:04:22,500 --> 00:04:25,700
They are SBR SBR, right?

91
00:04:25,700 --> 00:04:29,000
So that looks like it did a reasonable job of outputting that.

92
00:04:30,900 --> 00:04:33,800
And so, I think all we would then have to do is build that into browse

93
00:04:33,800 --> 00:04:36,900
info, which is says, we need to do to run BSC.

94
00:04:36,900 --> 00:04:40,600
Make to create the PSC file, which is used to sway, the browse

95
00:04:40,600 --> 00:04:41,700
information, right?

96
00:04:42,400 --> 00:04:50,100
So again I don't actually know how we would actually put the browser

97
00:04:50,100 --> 00:04:52,300
for modify the browser version file or enable so.

98
00:04:52,300 --> 00:04:54,700
Okay, so we can probably just point it to it directly.

99
00:04:55,000 --> 00:04:59,300
All right, so what we need to do is we need to call BSC make and it

100
00:04:59,300 --> 00:05:00,000
looks like I

101
00:05:00,100 --> 00:05:05,100
Yes we would just pass all those files in so something like you know

102
00:05:05,100 --> 00:05:06,400
the build directory called BSC.

103
00:05:06,400 --> 00:05:08,400
Make start out SBR.

104
00:05:08,400 --> 00:05:09,800
I'm hoping you can handle star.

105
00:05:09,900 --> 00:05:14,700
I don't actually know if it can but we do like start at svr and see

106
00:05:14,700 --> 00:05:15,400
what it makes.

107
00:05:18,300 --> 00:05:19,200
Let's take a look.

108
00:05:20,800 --> 00:05:22,300
So did we get one of these guys?

109
00:05:22,300 --> 00:05:23,600
Did we get anything here?

110
00:05:24,100 --> 00:05:28,400
I don't actually know if we did, yeah.

111
00:05:28,600 --> 00:05:30,700
Yeah, no.

112
00:05:34,700 --> 00:05:38,000
Doesn't look good to me.

113
00:05:38,600 --> 00:05:42,700
I'm not seeing much in the way of stuff here.

114
00:05:42,700 --> 00:05:43,400
People.

115
00:05:44,700 --> 00:05:46,200
And why did all our svr files?

116
00:05:46,200 --> 00:05:47,100
Turn 200.

117
00:05:47,100 --> 00:05:47,600
There it is.

118
00:05:47,600 --> 00:05:49,200
So it just deleted them all.

119
00:05:49,700 --> 00:05:50,200
So, there it is.

120
00:05:50,200 --> 00:05:51,000
Handmade fpse.

121
00:05:51,000 --> 00:05:53,000
I guess I should start at the top instead of the bottom.

122
00:05:53,500 --> 00:05:56,900
So handmade that BSE is now some brows info.

123
00:05:56,900 --> 00:05:59,700
So, in theory and again, like I said, I don't know if this actually

124
00:05:59,700 --> 00:05:59,900
will

125
00:06:00,000 --> 00:06:05,300
Work because I don't really ever do it but in theory inside our

126
00:06:05,300 --> 00:06:09,400
properties for our win32 handmade, maybe there's a way to get browse

127
00:06:09,400 --> 00:06:11,400
information set up in here.

128
00:06:11,400 --> 00:06:16,400
I don't actually see if though, Legacy SQL machine environment to Bear

129
00:06:16,400 --> 00:06:18,100
connection touch argument executable.

130
00:06:18,500 --> 00:06:20,000
I do not see it.

131
00:06:21,400 --> 00:06:23,400
See if the solution has properties.

132
00:06:23,400 --> 00:06:28,200
Start a project dependencies code analysis to look source files

133
00:06:28,200 --> 00:06:28,900
configuration.

134
00:06:28,900 --> 00:06:30,300
Yes, I don't actually see it in here.

135
00:06:30,300 --> 00:06:36,400
So again maybe I'm missing it but my suspicion like I said at the

136
00:06:36,400 --> 00:06:39,100
beginning, is that in order to actually have it?

137
00:06:39,100 --> 00:06:40,100
Do the Brows?

138
00:06:40,100 --> 00:06:44,200
I feel like you have to have an actual project here, right?

139
00:06:44,200 --> 00:06:47,900
And you can be like I think I'd probably a dummy project or something,

140
00:06:47,900 --> 00:06:50,800
but I think you have you can't just have a bear.

141
00:06:51,400 --> 00:06:52,600
If that's what it looks like.

142
00:06:52,900 --> 00:06:57,600
Because let's see what it says here in these docks property Pages.

143
00:06:58,500 --> 00:07:00,200
Let's see, click the C++ folder?

144
00:07:00,200 --> 00:07:00,500
Yeah.

145
00:07:00,700 --> 00:07:04,100
So like that's not going to exist, right?

146
00:07:04,200 --> 00:07:08,500
We we don't build anything in here so we don't have a C++ folder.

147
00:07:08,700 --> 00:07:12,900
Now, we could, you know, probably cheese out and add just some dummy

148
00:07:12,900 --> 00:07:14,100
thing in here to do it.

149
00:07:14,900 --> 00:07:17,100
But yeah, that's that's what you'd have to do.

150
00:07:17,400 --> 00:07:21,000
So, so yeah, so like I said, just something that's good to know if you

151
00:07:21,000 --> 00:07:21,200
find

152
00:07:21,300 --> 00:07:21,900
That you need it.

153
00:07:21,900 --> 00:07:26,300
I never use that but I do keep actually literally just one thing

154
00:07:26,300 --> 00:07:29,800
exactly like this around at all times, which is a win32 project that I

155
00:07:29,800 --> 00:07:32,700
load up, just for looking stuff up in Windows.

156
00:07:32,800 --> 00:07:36,500
Like, I will often do it just so I can do that and go right to the

157
00:07:36,500 --> 00:07:38,100
actual definition for that thing.

158
00:07:38,300 --> 00:07:38,900
Right.

159
00:07:39,300 --> 00:07:42,300
Kind of weird but that's just, you know, that's just what I do.

160
00:07:43,300 --> 00:07:44,400
So that's good.

161
00:07:46,300 --> 00:07:53,600
And now I will go ahead back to what I was going to do just a regular

162
00:07:53,600 --> 00:07:53,900
stuff.

163
00:07:53,900 --> 00:07:57,800
So I'm going to take that out because like I said, I don't need it and

164
00:07:57,800 --> 00:08:00,600
I don't really want the compiler to be doing any extra stuff.

165
00:08:00,600 --> 00:08:04,000
I like to keep the compile times as fast as possible, so, I'm going to

166
00:08:04,000 --> 00:08:08,600
delete the BSC and the svr there, and just go back to where we were

167
00:08:08,600 --> 00:08:13,100
before and let that just lifts that just percolate.

168
00:08:13,400 --> 00:08:15,300
Okay, so where we were at?

169
00:08:15,300 --> 00:08:15,500
Yes,

170
00:08:15,900 --> 00:08:19,100
Is we left everything in a running state, but only because we turned

171
00:08:19,100 --> 00:08:20,700
off the debug code, right?

172
00:08:20,900 --> 00:08:25,400
We the debug code is not actually there, it's just hanging out in a

173
00:08:25,400 --> 00:08:28,900
bunch of ifdef, so if I was to go in here and turn handmade internal

174
00:08:28,900 --> 00:08:33,100
back on so that we are actually compiling all the code, you can see

175
00:08:33,400 --> 00:08:33,600
that.

176
00:08:33,600 --> 00:08:37,200
I just got a ton of Errors to deal with right, and we were right in

177
00:08:37,200 --> 00:08:37,900
the middle.

178
00:08:38,500 --> 00:08:41,500
In fact I think I even left Jimmy

179
00:08:42,900 --> 00:08:44,300
I think I even left.

180
00:08:44,300 --> 00:08:47,000
Yeah, and XXX you are here, right?

181
00:08:47,500 --> 00:08:48,700
What we're in the middle of doing

182
00:08:51,500 --> 00:08:56,800
It's just trying a few different approaches to how we want to

183
00:08:56,800 --> 00:08:59,000
structure our debug variable set up.

184
00:09:00,200 --> 00:09:04,300
I feel like again, you know, I feel like people don't really like

185
00:09:04,300 --> 00:09:06,000
spending time on doing the debug code.

186
00:09:06,000 --> 00:09:08,300
They want to do other things and that's fine.

187
00:09:08,700 --> 00:09:10,300
But that's not really my jam.

188
00:09:10,300 --> 00:09:13,500
Like, I like to make sure that if there's something that I feel like

189
00:09:13,500 --> 00:09:17,500
there's a productive thing that, you know, to look at code wise, I

190
00:09:17,500 --> 00:09:19,900
feel like it's important to look at it, right?

191
00:09:20,900 --> 00:09:24,100
And you have to remember that in general, patients is definitely a

192
00:09:24,100 --> 00:09:29,300
virtue in programming and you know, we're only on day, what 202 here.

193
00:09:29,300 --> 00:09:29,800
So that's like

194
00:09:30,000 --> 00:09:32,200
Like an extraordinarily small number of hours.

195
00:09:32,800 --> 00:09:36,800
That's that's like, literally like, what, 205 hours, something like

196
00:09:36,800 --> 00:09:36,900
that?

197
00:09:36,900 --> 00:09:40,200
I think we estimated is the total number of hours of programming, 205,

198
00:09:40,200 --> 00:09:42,400
hours of programming is like, almost no programming at.

199
00:09:42,400 --> 00:09:43,200
All right, 200?

200
00:09:43,200 --> 00:09:46,800
Five hours of programming is less than 10 weeks of programming.

201
00:09:47,400 --> 00:09:53,100
And so, you know, you, I've often spent ten weeks on a single problem.

202
00:09:54,200 --> 00:09:57,300
So, no amount of fussing with these debug variables that we're going

203
00:09:57,300 --> 00:09:59,500
to do on this stream, should even come close.

204
00:10:00,000 --> 00:10:04,400
Tapping out any serious programmers patience level with it.

205
00:10:04,600 --> 00:10:06,100
And it's really important thing to understand.

206
00:10:06,100 --> 00:10:10,900
Like it's very important that you have to be like one of I guess we

207
00:10:10,900 --> 00:10:16,700
had say it is a crucial quality of a good programmer is that they are

208
00:10:16,700 --> 00:10:19,500
willing to spend time solving a problem.

209
00:10:20,000 --> 00:10:24,700
And you know that often is going to take many many hours, right?

210
00:10:24,700 --> 00:10:29,000
And so, if you're not going to spend time solving a problem, the only

211
00:10:29,000 --> 00:10:29,800
reason for that is because

212
00:10:29,900 --> 00:10:33,900
Cuz you had something else that was more pressing and you had to make

213
00:10:34,200 --> 00:10:36,100
a hard decision, right?

214
00:10:36,100 --> 00:10:39,100
So like you know, if you are forced with some kind of deadline that

215
00:10:39,100 --> 00:10:42,100
you have to hit, then you are forced to make decisions about what to

216
00:10:42,100 --> 00:10:45,700
spend time on and what to not write but we are not in that scenario,

217
00:10:45,700 --> 00:10:45,900
right?

218
00:10:45,900 --> 00:10:49,000
Like we do not have deadlines, this is an educational stream and so

219
00:10:49,000 --> 00:10:51,800
it's very important to make sure that, you know, you spend time on

220
00:10:51,800 --> 00:10:55,700
things enough time on things to see how they should work.

221
00:10:56,100 --> 00:10:59,000
And to go through enough iterations, of how the code is structured, to

222
00:10:59,000 --> 00:10:59,800
make sure that you end up.

223
00:11:00,000 --> 00:11:04,500
On a good one and not just on whichever one you happen to do first or

224
00:11:04,500 --> 00:11:05,400
something like that.

225
00:11:07,700 --> 00:11:11,600
So yeah, it's really hard to overemphasize.

226
00:11:11,600 --> 00:11:13,100
That basically nothing.

227
00:11:13,100 --> 00:11:16,300
We do on handmade hero will ever be done to the point.

228
00:11:16,400 --> 00:11:19,800
That would even be what I would consider a reasonable amount of time

229
00:11:19,800 --> 00:11:24,000
to spend on it actually, just because we, you know, are constrained to

230
00:11:24,000 --> 00:11:26,200
one our night and have a fairly Limited schedule.

231
00:11:27,000 --> 00:11:31,400
So it's like, you know, anything that seems like maybe it's taking too

232
00:11:31,400 --> 00:11:31,600
long.

233
00:11:31,600 --> 00:11:32,200
In your opinion.

234
00:11:32,200 --> 00:11:33,500
That's probably a bad sign.

235
00:11:33,500 --> 00:11:37,400
Like you really want to make sure that you have a very, very

236
00:11:37,500 --> 00:11:44,000
Very large amount of patience for restructuring code experimenting

237
00:11:44,000 --> 00:11:45,700
with code and seeing how it goes.

238
00:11:45,700 --> 00:11:51,100
Because if you don't then you know, you probably honestly, this is

239
00:11:51,100 --> 00:11:52,600
probably not the kind of code for you, right?

240
00:11:52,600 --> 00:11:56,300
Like you probably don't want to be doing low-level programming or

241
00:11:56,300 --> 00:11:56,700
something.

242
00:11:56,700 --> 00:11:59,500
If that's something that that you don't like to do, like

243
00:12:00,000 --> 00:12:04,900
You probably want to be in a sort of a different field or something,

244
00:12:05,500 --> 00:12:08,700
because most of what you do when you low-level programming is working

245
00:12:08,700 --> 00:12:11,400
out things very much like this, right?

246
00:12:12,100 --> 00:12:14,400
So, let's take a look at where we were at.

247
00:12:14,500 --> 00:12:18,200
I was sort of looking at this debug stuff and I'm not exactly sure how

248
00:12:18,200 --> 00:12:19,500
I want it to be structured.

249
00:12:19,900 --> 00:12:24,000
But I know that I want to it to be able to support a few very specific

250
00:12:24,000 --> 00:12:24,600
operations.

251
00:12:24,600 --> 00:12:27,800
And so we were doing is we're kind of going through and doing a bit of

252
00:12:27,800 --> 00:12:29,600
a transform here and you know,

253
00:12:30,300 --> 00:12:32,300
Again, we kind of want to play around with this.

254
00:12:34,800 --> 00:12:37,600
And see what sticks like, see what makes it easy to add debug

255
00:12:37,600 --> 00:12:38,800
variables and that sort of stuff.

256
00:12:39,800 --> 00:12:44,400
So I'd like to go ahead and finish this transformation of the code

257
00:12:44,400 --> 00:12:45,300
kind of get it working.

258
00:12:45,400 --> 00:12:49,800
And then I'd like to do some usage case stuff so that we can see like

259
00:12:49,800 --> 00:12:53,800
exactly how we might want to use this in a few scenarios in the actual

260
00:12:53,800 --> 00:12:54,500
code.

261
00:12:55,000 --> 00:12:57,400
Because again, we haven't really spent much time, defining.

262
00:12:57,400 --> 00:13:00,100
What we might do with the debug variables, we did some simple test

263
00:13:00,100 --> 00:13:03,300
cases, which is, we basically took the debug stuff that we already.

264
00:13:03,400 --> 00:13:05,200
She had in the code and made sure.

265
00:13:05,200 --> 00:13:07,600
We could change all that to Paris, but they were very simplistic,

266
00:13:07,600 --> 00:13:08,200
right?

267
00:13:08,300 --> 00:13:11,200
Like they were just things that were like, Boolean toggles, because

268
00:13:11,200 --> 00:13:13,600
that's really all we had had for debugging stuff so far.

269
00:13:14,200 --> 00:13:17,000
So, what I'd like to do is then, you know, once I kind of get one of

270
00:13:17,000 --> 00:13:18,900
this, this this one version working here.

271
00:13:19,000 --> 00:13:22,700
If you go back to the actual code, maybe make something like an entity

272
00:13:22,700 --> 00:13:27,200
viewer or something like this, like maybe make a debug thing that we

273
00:13:27,200 --> 00:13:29,300
can use to view something non-trivial.

274
00:13:30,700 --> 00:13:37,200
That plus the profile view I think would give us enough of a core like

275
00:13:37,200 --> 00:13:41,100
sort of example that we would know that our debug system was was good

276
00:13:41,100 --> 00:13:42,400
enough at that point, right?

277
00:13:42,400 --> 00:13:46,000
If those things felt like they were being handled in a reasonable way,

278
00:13:46,300 --> 00:13:47,500
that's my feeling I.

279
00:13:48,100 --> 00:13:49,800
So let's go ahead and move forwards.

280
00:13:50,700 --> 00:13:51,700
Oops, let's see here.

281
00:13:52,400 --> 00:13:54,100
Let's go ahead and move forwards on that.

282
00:13:55,700 --> 00:13:57,400
I'm just going to go ahead and let the compile errors.

283
00:13:57,400 --> 00:13:59,200
Drive this situation again.

284
00:13:59,800 --> 00:14:03,400
So again that one of the things that I don't love so far, here is

285
00:14:03,400 --> 00:14:03,800
these

286
00:14:06,800 --> 00:14:10,600
This sort of like VAR, I just haven't decided what the best way to

287
00:14:10,600 --> 00:14:12,700
store these things are and I wanted them to be very flexible.

288
00:14:12,700 --> 00:14:15,900
I wasn't sure about this with a debug variable-rate thing and I'm

289
00:14:15,900 --> 00:14:18,100
still not really sure about it, right?

290
00:14:19,100 --> 00:14:23,800
But I just don't know what the best thing to do there is and it could

291
00:14:23,800 --> 00:14:26,700
be something like this, it could be and maybe this is something we

292
00:14:26,700 --> 00:14:30,200
should do because all of our stuff is like sort of push-based for now.

293
00:14:30,300 --> 00:14:34,600
Maybe we'll just do something like a debug variable link like this.

294
00:14:35,000 --> 00:14:37,700
And we could do something like, you know, next.

295
00:14:37,800 --> 00:14:39,500
So this is a doubly linked list as well.

296
00:14:41,100 --> 00:14:41,800
In here.

297
00:14:43,100 --> 00:14:43,800
Like that.

298
00:14:43,800 --> 00:14:47,300
And then the debug variable arrays would just be sort of a sentinel

299
00:14:47,300 --> 00:14:48,400
based thing, right?

300
00:14:48,400 --> 00:14:49,000
Like this sort of thing.

301
00:14:49,000 --> 00:14:52,700
So this would be like, you know, of our group or whatever that sort of

302
00:14:52,700 --> 00:14:53,000
stuff.

303
00:14:53,000 --> 00:14:55,400
And that just might be a little bit better than sort of thing I was

304
00:14:55,400 --> 00:14:55,700
doing before.

305
00:14:55,700 --> 00:14:58,400
Because again, this is all kind of like pointers Rat's Nest kind of

306
00:14:58,400 --> 00:14:59,700
stuff anyway, that we're sort of doing.

307
00:15:00,000 --> 00:15:03,000
Can add and remove things at any time and other stuff like that.

308
00:15:03,000 --> 00:15:05,900
And so that might just be the easiest way to make sure that everything

309
00:15:06,100 --> 00:15:07,800
stays pretty reasonable in there.

310
00:15:08,400 --> 00:15:10,100
So I'll just leave it like that for now.

311
00:15:10,700 --> 00:15:14,900
Okay, so we've got pretty much everything we want to find here.

312
00:15:15,400 --> 00:15:17,900
So I'm just going to go ahead and make sure all that's implemented.

313
00:15:18,400 --> 00:15:18,800
Let's see.

314
00:15:18,800 --> 00:15:21,600
So if we are doing it the same way, we were doing it before,

315
00:15:24,700 --> 00:15:26,200
when we do debug, add variable,

316
00:15:27,300 --> 00:15:30,800
It just makes the variable when we do debug add variable the context.

317
00:15:30,900 --> 00:15:34,800
What we want to do is say okay we add the variable using the you know,

318
00:15:34,800 --> 00:15:35,700
debug at variable.

319
00:15:36,000 --> 00:15:41,700
But then what we do is we also want to add if there is, you know, a

320
00:15:42,900 --> 00:15:44,400
group active.

321
00:15:44,400 --> 00:15:47,300
We want to add it to the group that was kind of our definition of how

322
00:15:47,300 --> 00:15:48,500
this thing works, right?

323
00:15:49,600 --> 00:15:51,300
And I think we probably also want to.

324
00:15:51,800 --> 00:15:55,400
I'm feeling like we probably want this to be one more layer deep as

325
00:15:55,400 --> 00:15:55,900
well.

326
00:15:56,000 --> 00:16:00,500
So we probably actually want it to look like this, where we have debug

327
00:16:00,500 --> 00:16:01,200
add variable.

328
00:16:01,500 --> 00:16:06,000
And it's got the debug variable like group associated with it there,

329
00:16:06,300 --> 00:16:11,400
you know, although even that I guess, you know, since we had a thing

330
00:16:11,400 --> 00:16:14,300
before it we could just have debug add variable to group and then it

331
00:16:14,300 --> 00:16:16,500
calls that one that seems fair as well.

332
00:16:16,600 --> 00:16:18,500
So that would just be debug, add variable.

333
00:16:19,500 --> 00:16:22,500
And that's just like, okay, we've got the debug State.

334
00:16:23,800 --> 00:16:28,600
We've got the debug variable to add and we've got the debug variable

335
00:16:28,600 --> 00:16:29,100
group.

336
00:16:32,200 --> 00:16:34,100
And that would just be the thing that

337
00:16:35,500 --> 00:16:37,400
That puts it on there, right?

338
00:16:37,600 --> 00:16:39,300
So we've got debug variable link.

339
00:16:42,000 --> 00:16:43,000
We're going to get one of those.

340
00:16:45,000 --> 00:16:48,100
and then, we're just going to go ahead and say that the the

341
00:16:50,100 --> 00:16:53,600
Link preview know like next same same old.

342
00:16:54,000 --> 00:16:56,400
Same old stuff exactly the same way.

343
00:16:56,700 --> 00:17:00,000
And in fact, you know, this sort of thing you can even macro eyes if

344
00:17:00,000 --> 00:17:02,600
you want to go one step further, like I said before, you know, you

345
00:17:02,600 --> 00:17:07,300
can't empathize it, if you want to, you can even make a macro of it if

346
00:17:07,300 --> 00:17:11,400
you really want to like for example, you can see in here, we've got

347
00:17:11,400 --> 00:17:12,400
sort of the previous.

348
00:17:12,900 --> 00:17:13,700
Next thing happening.

349
00:17:13,800 --> 00:17:15,200
Oops, I wanted him a debug

350
00:17:19,500 --> 00:17:23,599
Linked lists are so trivial, you know, you can basically just say, all

351
00:17:23,599 --> 00:17:24,200
right?

352
00:17:24,400 --> 00:17:27,900
When you add something to it, this is exactly what happens, right?

353
00:17:27,900 --> 00:17:29,900
We always know that that's what's going to happen.

354
00:17:30,100 --> 00:17:33,600
So you can imagine saying oh we just want a macro for the way that you

355
00:17:33,600 --> 00:17:35,500
do a linked list or something like that.

356
00:17:35,500 --> 00:17:36,900
So we don't have to type of every time.

357
00:17:37,200 --> 00:17:38,900
It's just going to look like that.

358
00:17:39,400 --> 00:17:40,700
That's what it's going to look like.

359
00:17:42,700 --> 00:17:45,800
So, if you always have next and pretty, if you can do something where

360
00:17:45,800 --> 00:17:49,700
you just say like, oh, all right, whatever the Sentinel is.

361
00:17:54,900 --> 00:17:57,400
Best right, whatever the element is.

362
00:17:59,600 --> 00:17:59,800
You know.

363
00:18:00,600 --> 00:18:04,100
And then this code is literally just always going to be exactly the

364
00:18:04,100 --> 00:18:04,500
same.

365
00:18:05,500 --> 00:18:09,800
There's there's not going to be any, you know, any particularly

366
00:18:11,100 --> 00:18:13,700
nuanced difference at all to it, right?

367
00:18:13,800 --> 00:18:18,800
And so you can pretty much just treat it like a wrote thing.

368
00:18:21,800 --> 00:18:22,600
Something like that.

369
00:18:23,000 --> 00:18:25,900
And so you can do a thing where you like, you know, in, you know,

370
00:18:26,700 --> 00:18:31,100
doubly d-list insert or something like this and you can just say the

371
00:18:31,100 --> 00:18:36,200
Sentinel and the element like that and then this would this would do

372
00:18:36,200 --> 00:18:36,500
it.

373
00:18:39,600 --> 00:18:40,200
Yeah, I'm saying.

374
00:18:40,700 --> 00:18:44,700
So again pretty pretty straightforward, but if you want to just save a

375
00:18:44,700 --> 00:18:46,700
little bit of thinking you can always just do that.

376
00:18:46,700 --> 00:18:49,600
You can say like okay I you know I want to insert.

377
00:18:50,500 --> 00:18:53,400
There's the link that I'm trying to insert, here's the group and I

378
00:18:53,400 --> 00:18:58,500
know that that thing has a has that sort of our group thing in it off,

379
00:18:58,500 --> 00:18:58,800
you go.

380
00:19:00,700 --> 00:19:01,200
Yeah, I'm saying.

381
00:19:02,000 --> 00:19:07,200
And so again that that is also something that we could use in place of

382
00:19:07,200 --> 00:19:10,100
the, you know, of the other guy, this one right here.

383
00:19:10,600 --> 00:19:13,300
So you can take a look at since we know exactly what this is doing.

384
00:19:13,300 --> 00:19:16,000
If we wanted to call dealers insert, you could say like oh well the

385
00:19:16,000 --> 00:19:18,100
Sentinel is this thing, right?

386
00:19:19,400 --> 00:19:21,900
There's the Sentinel and the element is this thing.

387
00:19:22,300 --> 00:19:23,200
So there you go.

388
00:19:23,300 --> 00:19:26,000
Dealers insert inserted right done?

389
00:19:30,500 --> 00:19:33,300
So again, if you hate templates and they always ruin your life or

390
00:19:33,300 --> 00:19:36,900
anything like that and you don't have metaprogramming either and

391
00:19:36,900 --> 00:19:38,800
you're in whatever situation you're like, but I don't want to type it

392
00:19:38,800 --> 00:19:39,400
doubly linked list.

393
00:19:39,400 --> 00:19:44,700
Every time you do have a third option and that's just one macro and

394
00:19:44,700 --> 00:19:45,600
it'll just do it for you.

395
00:19:46,400 --> 00:19:47,700
So that's always good.

396
00:19:48,800 --> 00:19:52,300
If you if you're in the mood again just giving you just give me your

397
00:19:52,300 --> 00:19:52,800
tricks.

398
00:19:52,800 --> 00:19:55,000
Just giving you some things in case you haven't thought of them

399
00:19:55,000 --> 00:19:57,300
already or use them already.

400
00:19:57,900 --> 00:19:58,900
That's one way to do it.

401
00:19:59,600 --> 00:20:02,000
All right, so there is our add variable to group.

402
00:20:02,000 --> 00:20:03,100
It adds it to the group.

403
00:20:04,300 --> 00:20:08,700
That's going to be an address because that's that's actually the

404
00:20:08,700 --> 00:20:09,100
thing.

405
00:20:09,400 --> 00:20:12,300
So then we've got debug add variable, in this case it's just going to

406
00:20:12,300 --> 00:20:16,300
call the debug add variable to group thing in addition to adding the

407
00:20:16,300 --> 00:20:16,900
variable, right?

408
00:20:16,900 --> 00:20:20,100
So it's just going to be like context group and that's going to be VAR

409
00:20:20,400 --> 00:20:21,100
like so on.

410
00:20:21,400 --> 00:20:24,100
And we'll only do that you know, assuming that there actually was a

411
00:20:24,100 --> 00:20:25,800
group for us to do it and then it's done.

412
00:20:26,400 --> 00:20:28,200
Yeah, yeah.

413
00:20:28,900 --> 00:20:31,400
We then have begin variable Group.

414
00:20:31,500 --> 00:20:33,700
Which again is just going to add a variable that's of the

415
00:20:34,900 --> 00:20:36,800
Of that group type, what did we call it?

416
00:20:36,800 --> 00:20:40,400
VAR group, short-term memory of our group?

417
00:20:41,500 --> 00:20:43,300
And I don't know what we call this one too because some of our group

418
00:20:43,300 --> 00:20:43,600
as well.

419
00:20:43,600 --> 00:20:43,800
Yeah.

420
00:20:43,800 --> 00:20:44,400
But our group,

421
00:20:46,600 --> 00:20:47,000
Oops.

422
00:20:49,900 --> 00:20:50,300
Are ya?

423
00:20:52,500 --> 00:20:56,200
Not too much to say about that, other than it is just exactly what it

424
00:20:56,200 --> 00:20:56,800
needs to be.

425
00:20:57,000 --> 00:20:59,800
So then we can do begin variable group that's going to add the

426
00:21:00,000 --> 00:21:04,000
Cable that's going to initialize the group itself.

427
00:21:04,000 --> 00:21:08,000
So we've got this VAR group and again you could do this this way if

428
00:21:08,000 --> 00:21:08,700
you want it to.

429
00:21:09,200 --> 00:21:11,900
Because again, this is exactly wrote and will always be the same for

430
00:21:11,900 --> 00:21:15,700
pretty much any linked list, doubly linked list that you have, right?

431
00:21:15,900 --> 00:21:19,300
The initialization for the Sentinel is going to be the exactly the

432
00:21:19,300 --> 00:21:19,800
same.

433
00:21:19,900 --> 00:21:21,200
It's just going to be that.

434
00:21:21,200 --> 00:21:24,200
Ooh, that's don't want that.

435
00:21:24,400 --> 00:21:24,800
There we go.

436
00:21:25,900 --> 00:21:27,200
That's just going to be the Sentinel.

437
00:21:29,000 --> 00:21:31,600
It's next pointer, has to equal the essential itself.

438
00:21:32,100 --> 00:21:37,900
And similarly, that previous guy has to equal to sine plot itself as

439
00:21:37,900 --> 00:21:38,100
well.

440
00:21:39,300 --> 00:21:39,800
Right?

441
00:21:40,400 --> 00:21:43,100
And you know, we could we can put remove in here as well.

442
00:21:43,100 --> 00:21:45,500
We just haven't gotten there yet but we can put remove in there as

443
00:21:45,500 --> 00:21:45,800
well.

444
00:21:46,400 --> 00:21:47,100
And so, there you go.

445
00:21:47,100 --> 00:21:48,600
That's that's the, the link list.

446
00:21:48,600 --> 00:21:49,500
That's all good.

447
00:21:49,900 --> 00:21:53,100
And so if we initialize the linked list, We Begin the variable group.

448
00:21:53,100 --> 00:21:55,300
The only other thing we have to do after that is make sure we set that

449
00:21:55,300 --> 00:21:57,400
as the active group, right?

450
00:21:58,700 --> 00:21:59,500
So now we know.

451
00:22:05,300 --> 00:22:08,800
And I guess like one of the kind of things that's a little bit

452
00:22:08,800 --> 00:22:09,200
annoying.

453
00:22:09,200 --> 00:22:11,600
Is, we don't really have at this point.

454
00:22:13,200 --> 00:22:19,400
We don't really have a lot of visibility into whether we will still

455
00:22:19,400 --> 00:22:23,800
want the whole like parent notion thing happening here, right?

456
00:22:24,400 --> 00:22:27,300
So we have like debug views which would store at the information that

457
00:22:27,300 --> 00:22:30,800
we need to store and then we have debug variables, which would have

458
00:22:30,800 --> 00:22:33,500
the tree sort of stuff baked in them as well.

459
00:22:34,600 --> 00:22:38,900
And the question here is, do we still want to store parent pointers

460
00:22:38,900 --> 00:22:39,800
for variables?

461
00:22:39,800 --> 00:22:44,100
And the answer of course here is that well groups are things, we make

462
00:22:44,400 --> 00:22:49,300
you know, but they you know groups are things we make but inside a

463
00:22:49,300 --> 00:22:53,100
group we could be pointing to Any Given variable, right?

464
00:22:53,100 --> 00:22:56,400
And getting back to the previous one is largely because that variable

465
00:22:56,400 --> 00:22:57,900
may be cloned in many views.

466
00:22:58,100 --> 00:23:00,500
Getting back to the previous one is not a given.

467
00:23:00,800 --> 00:23:04,100
So I think we want to mostly do stacks here.

468
00:23:04,400 --> 00:23:09,200
When we're doing traversal because you know, or you know if you don't

469
00:23:09,200 --> 00:23:11,100
want to do stacks and you can do a recursive function.

470
00:23:13,100 --> 00:23:14,700
And let the compiler stack.

471
00:23:15,200 --> 00:23:15,800
Do it for you.

472
00:23:15,900 --> 00:23:16,900
Well, the program stack.

473
00:23:18,800 --> 00:23:21,200
But in this case, I feel like we kind of want to do something where

474
00:23:21,200 --> 00:23:24,300
we're going to do, you know, that kind of, that kind of push and pop

475
00:23:24,300 --> 00:23:25,000
sort of thing.

476
00:23:25,800 --> 00:23:27,700
So when we do the this,

477
00:23:30,600 --> 00:23:33,300
When we do the debug begin variable group thing, we now have a problem

478
00:23:33,300 --> 00:23:36,900
which is that when we do end variable group, we will not be able to do

479
00:23:36,900 --> 00:23:38,900
this operation right.

480
00:23:39,000 --> 00:23:41,300
But that's a really simple thing for us to fix because we can we can

481
00:23:41,300 --> 00:23:43,000
just Leverage The compiler stack here.

482
00:23:43,100 --> 00:23:44,900
All we really need in this case, right?

483
00:23:44,900 --> 00:23:48,900
If you think it through is we just need when you end a variable group

484
00:23:48,900 --> 00:23:51,300
to give back something that says what the parent was.

485
00:23:51,400 --> 00:23:55,300
So if we bundle those together right you know this is just sort of

486
00:23:55,300 --> 00:23:57,900
like a you know variable group Builder.

487
00:23:59,600 --> 00:23:59,700
Or.

488
00:24:02,000 --> 00:24:05,900
If you give back something that has the group itself but also its

489
00:24:05,900 --> 00:24:08,200
parent group, right?

490
00:24:09,800 --> 00:24:12,700
When it's being built, then we get around that problem.

491
00:24:13,200 --> 00:24:16,500
Because now we say oh debug variable group Builder, right?

492
00:24:17,800 --> 00:24:18,900
That result.

493
00:24:20,600 --> 00:24:24,100
We're going to store whatever the context group was and I guess I let

494
00:24:24,100 --> 00:24:25,000
you know how to do that.

495
00:24:25,000 --> 00:24:29,400
That obviously first and then we can just say well and then the group

496
00:24:33,000 --> 00:24:35,900
Is captured that way, you know I'm saying?

497
00:24:39,300 --> 00:24:45,400
So now when we do begin variable group like these guys do here, we

498
00:24:45,500 --> 00:24:50,700
just have to actually have it's a little bit more ownerís, right?

499
00:24:52,800 --> 00:24:53,600
It's this kind of thing.

500
00:24:55,900 --> 00:24:58,200
So that's one way we can do it, right?

501
00:24:58,600 --> 00:25:01,500
And it's really six of one half-dozen of the other.

502
00:25:01,500 --> 00:25:04,200
It depends in this circumstance like what you're trying to optimize

503
00:25:04,200 --> 00:25:08,600
for, which one you would want to do in this particular case.

504
00:25:08,600 --> 00:25:10,400
Since I was just trying to show how that works.

505
00:25:10,400 --> 00:25:13,900
I can show you also the other way to do it, which, you know, might be

506
00:25:13,900 --> 00:25:16,800
useful and that's to have some kind of a stack, right?

507
00:25:16,900 --> 00:25:21,600
So you just have a group depth here and you'd have like a group stack

508
00:25:22,400 --> 00:25:25,600
and the groups that would just be like, however, many deep you might.

509
00:25:25,700 --> 00:25:26,400
Ago.

510
00:25:28,500 --> 00:25:30,400
There's no way you're ever going to 64 deep.

511
00:25:31,500 --> 00:25:32,800
When you're constructing these things.

512
00:25:33,500 --> 00:25:36,600
So you know, whatever doesn't really matter there anything you want.

513
00:25:36,700 --> 00:25:39,100
But point being, you've got the Group stock here and then what would

514
00:25:39,100 --> 00:25:41,000
happen is all this time.

515
00:25:41,700 --> 00:25:47,900
When you're doing these operations, you would look at whatever the the

516
00:25:47,900 --> 00:25:49,000
group dip is.

517
00:25:49,600 --> 00:25:52,100
You'd look at into the group stack for that, right?

518
00:25:52,200 --> 00:25:56,000
So, I basically say something like normally, you know, we say contacts

519
00:25:56,000 --> 00:25:56,600
for you instead.

520
00:25:56,600 --> 00:26:00,700
Now, we'd say if the context group depth is greater than zero, meaning

521
00:26:00,700 --> 00:26:01,200
there is

522
00:26:01,300 --> 00:26:03,600
Something on that stack, right?

523
00:26:03,800 --> 00:26:06,700
And you can actually even get rid of that by pushing it synthetic.

524
00:26:06,700 --> 00:26:09,600
0 on, I'll show you that too, why not right?

525
00:26:11,200 --> 00:26:15,800
That would look like this, you just be debugged variable, you know,

526
00:26:15,800 --> 00:26:16,800
parent or something.

527
00:26:17,100 --> 00:26:23,700
And you do context group, stack, context, group depth like this.

528
00:26:24,400 --> 00:26:28,100
So you do something like this and when you have that, that gripped up

529
00:26:29,600 --> 00:26:31,000
we'd just take whatever the

530
00:26:31,200 --> 00:26:32,800
Previous one was, right?

531
00:26:32,800 --> 00:26:36,800
So the group depth well, I guess now you know what you just take take

532
00:26:36,800 --> 00:26:37,300
which one it is.

533
00:26:37,500 --> 00:26:40,500
So if the group that is 0, we take the 0th entry if it's one so and so

534
00:26:40,500 --> 00:26:42,100
on so forth and so on, right?

535
00:26:42,200 --> 00:26:44,000
Then we would just do exactly what we're doing before.

536
00:26:44,000 --> 00:26:47,800
We just say, you know, added to the parent like that.

537
00:26:48,100 --> 00:26:49,600
It's just past the state there as well.

538
00:26:51,100 --> 00:26:54,400
And that's all you have to do and that gets rid of this stuff if you

539
00:26:54,400 --> 00:26:54,600
want.

540
00:26:54,600 --> 00:26:56,700
So again, if you don't like that and you want to make it again

541
00:26:56,700 --> 00:26:59,500
simpler, you can totally do it that way instead.

542
00:27:00,000 --> 00:27:00,800
It's no big deal.

543
00:27:01,400 --> 00:27:03,900
Okay, so then we inside something.

544
00:27:03,900 --> 00:27:04,900
Like, we can variable group.

545
00:27:04,900 --> 00:27:08,600
What we have to do there is say, okay, we're going to add a variable,

546
00:27:09,400 --> 00:27:11,500
that's going to give us back the variable that we wanted.

547
00:27:13,300 --> 00:27:17,400
And now we want that to be the new, you know, for most group, right?

548
00:27:17,400 --> 00:27:21,200
That's that's the one we actually want everyone else to be added in

549
00:27:21,200 --> 00:27:21,900
from now on.

550
00:27:22,800 --> 00:27:25,800
And so what we do there is we say, okay, whatever the group Death is.

551
00:27:25,800 --> 00:27:30,000
Well, first of all, I've searched that the group right is less than

552
00:27:30,000 --> 00:27:31,200
the max size.

553
00:27:34,200 --> 00:27:37,500
right to make sure we don't overflow but then what we do is we say,

554
00:27:37,500 --> 00:27:38,900
alright, the group depth

555
00:27:42,900 --> 00:27:48,000
Is going to go up by one and then we're going to write into whatever

556
00:27:48,300 --> 00:27:50,200
that group area is.

557
00:27:54,500 --> 00:27:59,500
What, you know us we are now the people on the top of the stack right

558
00:27:59,900 --> 00:28:04,700
now there's a little bit of a nastiness here which is that we can't

559
00:28:04,700 --> 00:28:08,900
because we're actually writing into whatever the next location

560
00:28:08,900 --> 00:28:12,900
actually is this check is a little bit under, right?

561
00:28:12,900 --> 00:28:16,300
It's Miss, it's off by one because it's checking to see whether group

562
00:28:16,300 --> 00:28:19,200
Death is less than a recount but when we increment it cure it might

563
00:28:19,200 --> 00:28:20,100
then be equal to a.r.

564
00:28:20,100 --> 00:28:22,200
a count which is one past the end of the array.

565
00:28:22,600 --> 00:28:23,300
So what we want to do,

566
00:28:23,500 --> 00:28:25,800
Here is we want to back up by one, right?

567
00:28:25,800 --> 00:28:29,000
And say, okay, we have to make sure that's where we were now, again,

568
00:28:29,000 --> 00:28:30,900
that's just debug code, it's never going to get there.

569
00:28:31,400 --> 00:28:33,700
But again, I always like to have a thing that just left me know, in

570
00:28:33,700 --> 00:28:36,600
case I forget, and use this code somewhere else and it's like, oh,

571
00:28:36,600 --> 00:28:38,600
oops my bad, right?

572
00:28:38,600 --> 00:28:39,800
I don't want that to happen.

573
00:28:41,000 --> 00:28:42,100
I want to be notified.

574
00:28:43,300 --> 00:28:46,900
So anyway, the rest of this stuff can pretty much just work the way it

575
00:28:46,900 --> 00:28:47,200
was.

576
00:28:47,200 --> 00:28:49,700
We don't really have anything else, we would need to do to these guys,

577
00:28:49,700 --> 00:28:52,800
but when we get to, the end variable group, what this needs to do, is,

578
00:28:52,800 --> 00:28:56,700
first of all, it wants to assert that the group depth is greater than

579
00:28:56,700 --> 00:28:58,100
0, right?

580
00:28:58,800 --> 00:29:02,800
Oops, because if the group Death wasn't greater than 0, that means we

581
00:29:02,800 --> 00:29:05,400
weren't inside a begin group, so that would be a bug.

582
00:29:05,700 --> 00:29:08,600
But then once we know that we are, we just back the grouped up by one

583
00:29:08,600 --> 00:29:09,200
and we're done.

584
00:29:10,600 --> 00:29:11,100
Right?

585
00:29:12,000 --> 00:29:13,100
So that's all we need to do.

586
00:29:13,500 --> 00:29:18,400
But when we initialize that context, now we do need to make sure when

587
00:29:18,400 --> 00:29:20,800
we use that, debug variable definition context,

588
00:29:27,000 --> 00:29:31,100
This one, we do need to initialize that stack, right?

589
00:29:31,100 --> 00:29:35,600
So instead of this thing happening here, what we actually need to do.

590
00:29:40,400 --> 00:29:44,400
Is initialize it with no group and then we would probably do this

591
00:29:45,200 --> 00:29:45,900
right at least.

592
00:29:45,900 --> 00:29:46,700
I think that's what I do.

593
00:29:46,700 --> 00:29:47,600
In fact, that's kind of odd.

594
00:29:47,600 --> 00:29:52,800
I wasn't expecting that to be what I would see there but okay, so we

595
00:29:52,800 --> 00:29:56,000
have group depth equal to 0 and I guess we tightly don't need to do

596
00:29:56,000 --> 00:29:56,900
that because that's there.

597
00:29:57,500 --> 00:29:59,800
But we would have the group stack first thing

598
00:30:00,000 --> 00:30:01,500
Go to the null pointer, right?

599
00:30:01,500 --> 00:30:05,700
So the base of the stack is nothing so you can always reference it and

600
00:30:05,700 --> 00:30:09,500
you'll find that then we would begin that variable group of the root

601
00:30:09,500 --> 00:30:13,300
and we would keep going from there again like I said I don't really

602
00:30:13,300 --> 00:30:15,300
know why we have that Route 1 in there.

603
00:30:17,100 --> 00:30:23,800
Can't say I get it I'm sure we had a reason.

604
00:30:25,200 --> 00:30:26,500
For it.

605
00:30:28,300 --> 00:30:34,500
So yeah, and the other thing I might do just so we can debug a little

606
00:30:34,500 --> 00:30:36,200
bit of that is say that.

607
00:30:36,200 --> 00:30:40,500
Well, after we add all these things and we do and variable group at

608
00:30:40,500 --> 00:30:46,700
the end, I'm going to assert of the context Group stock depth, right?

609
00:30:46,700 --> 00:30:47,600
Or group depth.

610
00:30:49,900 --> 00:30:55,400
Is Britt is equal to 0 so we didn't leave a group open because I kind

611
00:30:55,400 --> 00:30:58,700
of feel like maybe we did based on what I just saw there and there's

612
00:30:58,700 --> 00:31:01,300
nothing wrong with doing that in our code, it would still work.

613
00:31:01,300 --> 00:31:03,600
But I just feel like that's sloppy and I don't really want that to

614
00:31:03,600 --> 00:31:04,000
happen.

615
00:31:04,000 --> 00:31:06,600
So I'm going to go ahead and prevent it.

616
00:31:07,300 --> 00:31:11,900
All right, so moving along, let's see where we're at now.

617
00:31:11,900 --> 00:31:14,400
So use debug camera.

618
00:31:15,300 --> 00:31:18,000
I don't even know what that's doing anymore.

619
00:31:18,100 --> 00:31:23,600
Debug camera that I don't think it's doing anything.

620
00:31:23,600 --> 00:31:25,200
So let's get rid of that.

621
00:31:25,900 --> 00:31:29,300
Like so, and let's see here.

622
00:31:29,300 --> 00:31:31,400
We've got debug variable tree a tree.

623
00:31:31,400 --> 00:31:33,700
Okay, so now we're into the debug code side of things.

624
00:31:33,900 --> 00:31:38,700
So I think our variable stuff is now relatively correct for the most

625
00:31:38,700 --> 00:31:40,100
part and it's sort of doing.

626
00:31:40,100 --> 00:31:43,300
It's a little it's doing its little thing that it does and that's all

627
00:31:43,300 --> 00:31:43,700
fine.

628
00:31:48,100 --> 00:31:48,300
Right.

629
00:31:50,500 --> 00:31:52,600
And there's some cool things that we can start doing now as well that

630
00:31:52,600 --> 00:31:56,500
I have thought of as we were typing that in, but we'll get to that in

631
00:31:56,500 --> 00:31:57,100
a second.

632
00:31:57,300 --> 00:32:01,000
So okay, let's go ahead and clean this stuff up.

633
00:32:01,200 --> 00:32:06,500
If we're going to do an ad tree, then we would need to actually just

634
00:32:06,500 --> 00:32:09,600
call this debug tree because that's what those are called now and so

635
00:32:09,600 --> 00:32:13,300
if we allocate one of those that's all good and we set the parameters,

636
00:32:13,700 --> 00:32:16,200
they are all basically the same so there's not really that much that

637
00:32:16,200 --> 00:32:17,200
has to happen to that.

638
00:32:17,200 --> 00:32:19,900
That's basically the same as it was for the most

639
00:32:20,000 --> 00:32:20,600
Part.

640
00:32:20,700 --> 00:32:23,600
So all we really need to know is we just need to know what the group

641
00:32:23,600 --> 00:32:24,100
is that.

642
00:32:24,100 --> 00:32:27,100
We're going to be doing it, that's a variable now, not this other

643
00:32:27,100 --> 00:32:29,200
special type so that's all fine.

644
00:32:30,800 --> 00:32:36,500
So then we have VAR groups here, which I guess are just you know, kind

645
00:32:36,500 --> 00:32:39,600
of putting in some placeholder stuff there, bitmap display and of our

646
00:32:39,600 --> 00:32:40,100
group.

647
00:32:40,400 --> 00:32:42,200
This is debug variable to text.

648
00:32:42,200 --> 00:32:45,700
So it's basically just a way of making sure that that we have shown

649
00:32:45,700 --> 00:32:45,900
that.

650
00:32:45,900 --> 00:32:50,800
We know that these things, you know, are not necessary to convert to

651
00:32:50,800 --> 00:32:55,100
text is mostly what I guess, I would say about it.

652
00:32:55,900 --> 00:32:57,600
We don't really there's some things.

653
00:32:57,600 --> 00:32:59,500
I was thinking that we probably want to do here.

654
00:33:00,200 --> 00:33:03,500
But we'll talk about those a little bit later anyway.

655
00:33:03,900 --> 00:33:05,000
So that's all good.

656
00:33:05,100 --> 00:33:06,400
Let's see what else we got.

657
00:33:06,600 --> 00:33:08,800
So when we do right, handmade config.

658
00:33:09,200 --> 00:33:13,000
Now when we do our walking, this means are walking would need Stacks,

659
00:33:13,300 --> 00:33:13,800
right?

660
00:33:14,200 --> 00:33:18,300
Because we no longer have parent pointers anymore.

661
00:33:19,000 --> 00:33:24,700
And, like I said, this was a handy trick, but and it's good to know

662
00:33:24,700 --> 00:33:26,800
how to do a traversal of a tree obviously.

663
00:33:26,800 --> 00:33:29,800
So I'm glad we did it but because now a variable,

664
00:33:30,000 --> 00:33:32,300
Can exist in multiple trees at the same time.

665
00:33:35,700 --> 00:33:39,000
This no longer works because when the thing descends and then comes

666
00:33:39,000 --> 00:33:42,900
back up, it doesn't know which which up to do.

667
00:33:43,100 --> 00:33:46,000
Because there's many people who may have been its parent because it

668
00:33:46,000 --> 00:33:47,400
exists in multiple trees.

669
00:33:48,300 --> 00:33:52,700
So the only way to know is to remember how we got there, and that

670
00:33:52,700 --> 00:33:54,400
implies a stack, right?

671
00:33:55,300 --> 00:33:59,100
And again, just to sort of give you a very concrete idea of what I

672
00:33:59,100 --> 00:34:00,000
mean by that.

673
00:34:01,000 --> 00:34:02,800
So here's right.

674
00:34:03,400 --> 00:34:11,199
Day 20 to Wawa, you know, if I've got something that looks like this.

675
00:34:14,400 --> 00:34:18,500
And I'm trying to diverse it, you know, I go down here and I come back

676
00:34:18,600 --> 00:34:19,900
up using this link.

677
00:34:20,000 --> 00:34:24,300
I go down here, I come back up and I come down here, right?

678
00:34:24,600 --> 00:34:28,400
The reason that works is because this tree

679
00:34:30,800 --> 00:34:35,199
the reason that works with no stack is because this tree has pointers

680
00:34:35,199 --> 00:34:38,000
going in both directions or it did, right?

681
00:34:38,000 --> 00:34:41,300
It has the pointer down but as the pointer back up, right?

682
00:34:41,400 --> 00:34:44,699
And when you have a pointer back up, that means that you can always

683
00:34:44,699 --> 00:34:47,500
just climb up and do that, diversity, can always go up.

684
00:34:47,500 --> 00:34:48,400
I'm done down here.

685
00:34:48,400 --> 00:34:49,400
There's nothing left.

686
00:34:49,400 --> 00:34:50,199
I'll come back up.

687
00:34:50,199 --> 00:34:53,100
Will come down again up, I can come back up because I can always ride

688
00:34:53,100 --> 00:34:54,000
that pointer back.

689
00:34:54,000 --> 00:34:58,900
But if those pointers go away, right, then you can't do that anymore.

690
00:34:59,200 --> 00:35:00,200
And so then you need to have

691
00:35:00,300 --> 00:35:02,900
Stack so that it's kind of like, you know, when you're rappelling down

692
00:35:02,900 --> 00:35:05,700
the side of a cliff you've got the Rope there, right?

693
00:35:05,700 --> 00:35:08,900
So you can always return to higher places on that Cliff, right?

694
00:35:09,200 --> 00:35:10,400
And the same thing is true here.

695
00:35:10,400 --> 00:35:11,700
It's like threading, a rope through it.

696
00:35:11,700 --> 00:35:15,500
So as we descend down right, we can always use the rope to kind of

697
00:35:15,500 --> 00:35:16,300
come back up.

698
00:35:16,400 --> 00:35:20,000
So we want to do is any path when we're on an element, we want to have

699
00:35:20,000 --> 00:35:22,200
a stack that tells us what all the previous ones are.

700
00:35:22,400 --> 00:35:25,100
And that's exactly what we did when we built it right.

701
00:35:27,000 --> 00:35:28,200
That's exactly what this is.

702
00:35:29,000 --> 00:35:33,100
And that's exactly what we're going to want to do Jimmy.

703
00:35:35,200 --> 00:35:37,000
That's exactly what we're running going to want to do.

704
00:35:39,600 --> 00:35:41,400
For iteration, right?

705
00:35:43,300 --> 00:35:43,700
Okay.

706
00:35:44,500 --> 00:35:47,700
So assuming that we're going to have a way of iterating through these

707
00:35:47,700 --> 00:35:48,000
guys.

708
00:35:48,000 --> 00:35:52,300
I don't really remember I know I had some reason I feel like I had

709
00:35:52,300 --> 00:35:56,400
some reason that I've now long since forgotten of why I didn't make an

710
00:35:56,400 --> 00:35:58,000
iterator for iterating over these guys.

711
00:35:58,000 --> 00:35:59,800
And I think it was because there were some like different

712
00:36:00,000 --> 00:36:03,100
Things that happen depending on the expansion like whether you went

713
00:36:03,100 --> 00:36:08,000
down them or not and other things like this and so you know we didn't

714
00:36:08,000 --> 00:36:10,000
really make an iterator type thing for it.

715
00:36:10,200 --> 00:36:13,700
But at this point I know I'm going to at least want the stack part to

716
00:36:13,700 --> 00:36:15,800
be kind of reusable in that sense.

717
00:36:17,000 --> 00:36:20,600
And so I feel like you know, at the very least I will want something

718
00:36:20,600 --> 00:36:21,300
like this.

719
00:36:21,500 --> 00:36:23,400
So this would be like, debug variable

720
00:36:27,900 --> 00:36:30,500
I don't really know debug very well stack, something like that and

721
00:36:30,500 --> 00:36:32,300
there's just the depth and the debug variable.

722
00:36:37,600 --> 00:36:38,600
Something like that.

723
00:36:39,100 --> 00:36:42,000
And so when I come through here and do this stuff and again, like I

724
00:36:42,000 --> 00:36:44,300
said, you know, if you want to you can do this with a recursive

725
00:36:44,300 --> 00:36:45,200
function as well.

726
00:36:45,800 --> 00:36:48,900
In fact, you know if you want I could show you that since you've seen

727
00:36:48,900 --> 00:36:52,500
me do the stack think here we could also do this with the recursive

728
00:36:52,500 --> 00:36:53,000
function.

729
00:36:53,300 --> 00:36:54,900
It's pretty straightforward, right?

730
00:36:54,900 --> 00:36:58,000
When you have something like right handmade config.

731
00:36:58,300 --> 00:37:02,000
You just need to wrap these guys up like this, this stuff needs to be

732
00:37:02,000 --> 00:37:05,500
wrapped up in some state that you pass down and then you just call a

733
00:37:05,500 --> 00:37:07,200
function every time you want to do.

734
00:37:07,300 --> 00:37:08,600
Send right.

735
00:37:09,100 --> 00:37:12,900
So, so basically you know, the recursive function version of it.

736
00:37:16,100 --> 00:37:22,700
just wraps these guys up this like struct right and made fig

737
00:37:24,900 --> 00:37:26,400
and do I really have to do this?

738
00:37:26,600 --> 00:37:27,000
I don't know.

739
00:37:27,000 --> 00:37:29,500
I never like I don't love recursive functions.

740
00:37:30,000 --> 00:37:31,400
You guys know what I would do here, right?

741
00:37:31,400 --> 00:37:34,500
You put this in here you call right hand made config.

742
00:37:34,500 --> 00:37:38,400
It just calls itself every time it wants to descend, and then when

743
00:37:38,400 --> 00:37:40,600
it's done it returns, right and Pops back up.

744
00:37:40,700 --> 00:37:43,900
So I'm I don't really, I never liked doing this.

745
00:37:43,900 --> 00:37:45,200
So I'm not going to do this.

746
00:37:45,800 --> 00:37:47,100
They stress me out sometimes.

747
00:37:47,700 --> 00:37:48,000
All right?

748
00:37:48,000 --> 00:37:52,400
So if you want to write the stock version, like I said, debug variable

749
00:37:52,400 --> 00:37:53,000
stock.

750
00:37:53,900 --> 00:37:55,000
We just have a thing here.

751
00:37:55,800 --> 00:37:56,800
It's got the count.

752
00:37:57,700 --> 00:38:02,000
It's got the stock and really, I suppose, in some sense, you could

753
00:38:02,000 --> 00:38:03,000
even just write it in line.

754
00:38:03,000 --> 00:38:06,700
First, I'm trying to think if I really would say that much from not

755
00:38:06,700 --> 00:38:10,900
doing it but we've already got like the depth you know, so all we'd

756
00:38:10,900 --> 00:38:15,400
have is something like this which is like what was the stack, right?

757
00:38:22,700 --> 00:38:23,500
Something like this.

758
00:38:31,000 --> 00:38:31,400
Okay.

759
00:38:32,300 --> 00:38:33,400
And that's 64 levels.

760
00:38:33,400 --> 00:38:36,700
Deep of a tree which I really don't think we want to be getting into

761
00:38:36,700 --> 00:38:39,600
so it's not something I probably have to think about too hard.

762
00:38:40,200 --> 00:38:45,500
So in here you know you've got this the stock situation I can just

763
00:38:45,500 --> 00:38:48,400
initialize the depth of zero or something like that.

764
00:38:49,000 --> 00:38:52,600
I mean initialise the first one is zero well I don't know if we really

765
00:38:52,600 --> 00:38:54,400
need to do that probably not.

766
00:38:56,000 --> 00:38:58,600
Probably all I really want to do is increment.

767
00:38:58,600 --> 00:38:59,800
The stack death by one

768
00:39:00,400 --> 00:39:04,400
And push on whoever the root of the tree is, right?

769
00:39:04,700 --> 00:39:09,300
So that's going to be the route group and that route group, I guess

770
00:39:09,300 --> 00:39:10,500
it's just a regular thing now.

771
00:39:10,500 --> 00:39:15,200
So that's just going to be probably the route group itself if you

772
00:39:15,200 --> 00:39:18,600
think about it is probably the thing that we would actually just push

773
00:39:18,600 --> 00:39:21,200
on there because that's the variable that we want to actually process,

774
00:39:21,500 --> 00:39:22,000
right?

775
00:39:24,000 --> 00:39:28,100
I think I mean that seems right to me anyway.

776
00:39:28,900 --> 00:39:29,500
So yeah.

777
00:39:29,700 --> 00:39:29,900
So we

778
00:39:30,100 --> 00:39:32,900
Start, you know, we would start with the root group.

779
00:39:40,700 --> 00:39:43,800
Once you've got the root group on there, shooting,

780
00:39:46,300 --> 00:39:51,400
We would just start with a while loop while the depth is greater than

781
00:39:51,400 --> 00:39:51,800
zero.

782
00:39:51,800 --> 00:39:55,000
So like while there's something on the stack we kind of do debug

783
00:39:55,000 --> 00:39:58,200
variable VAR equals

784
00:39:59,700 --> 00:40:00,800
Whatever the stack is.

785
00:40:03,600 --> 00:40:04,100
Like this.

786
00:40:04,500 --> 00:40:09,300
So basically take one thing off the stack and then we go ahead and use

787
00:40:09,300 --> 00:40:09,700
it, right?

788
00:40:09,700 --> 00:40:11,700
We do the should you know, should right thing.

789
00:40:11,700 --> 00:40:12,700
All that sort of stuff.

790
00:40:13,300 --> 00:40:16,600
We then go ahead and say like okay if it was a group this stuff we

791
00:40:16,600 --> 00:40:17,500
don't need to do anymore.

792
00:40:17,500 --> 00:40:19,800
That just goes away, right?

793
00:40:20,900 --> 00:40:24,900
And this stuff is just okay if this was a group that we were

794
00:40:24,900 --> 00:40:26,600
processing, you know?

795
00:40:27,900 --> 00:40:30,100
Then we would want to

796
00:40:35,300 --> 00:40:39,000
Take whatever it's children were.

797
00:40:40,200 --> 00:40:42,200
And push them on, right?

798
00:40:42,500 --> 00:40:46,200
We also want to do a for I Loop in some sense, right?

799
00:40:46,200 --> 00:40:50,900
We want to we want to be able to do a walk of siblings as well.

800
00:40:51,700 --> 00:40:54,600
So we've got those, we got those debug variable links.

801
00:40:54,600 --> 00:40:58,300
So technically in cure while we're on the stack this would really

802
00:40:58,300 --> 00:40:59,700
probably look like this.

803
00:40:59,700 --> 00:41:03,600
So this would be this is really like the VAR group that we're talking

804
00:41:03,600 --> 00:41:08,000
about here and then the for Loop is going to be over.

805
00:41:08,000 --> 00:41:09,600
It's it's a lynx.

806
00:41:09,800 --> 00:41:12,600
Be like, you know, whatever the link is.

807
00:41:21,000 --> 00:41:21,500
Right.

808
00:41:21,500 --> 00:41:28,500
So we've got the VAR group Next wall.

809
00:41:28,500 --> 00:41:30,600
It's not equal to the our group, our group,

810
00:41:32,400 --> 00:41:35,900
Sets it all, we just ride that list or wrong, right?

811
00:41:35,900 --> 00:41:37,600
So just keep going, going going gone.

812
00:41:38,600 --> 00:41:41,300
And then for each one of these, we now have a debug variable.

813
00:41:44,500 --> 00:41:45,200
Which way?

814
00:41:46,500 --> 00:41:47,600
Get out.

815
00:41:49,000 --> 00:41:50,500
And that's the one that we process.

816
00:41:50,500 --> 00:41:56,200
Now, here is the part that's a little tricky, right?

817
00:41:56,200 --> 00:41:59,700
Is if we want to the

818
00:42:00,000 --> 00:42:05,200
Natural order that the stock will give us these things is not a tree.

819
00:42:05,200 --> 00:42:06,800
It's like it's like

820
00:42:11,600 --> 00:42:14,300
And maybe we don't, I don't know, depends on how we want to do this,

821
00:42:14,300 --> 00:42:14,900
right?

822
00:42:15,900 --> 00:42:19,100
But the natural order of the stack is not going to be a tree if it's a

823
00:42:19,100 --> 00:42:20,300
recursive function.

824
00:42:21,200 --> 00:42:25,900
Then usually what happens is, it actually does view them in sort of a

825
00:42:25,900 --> 00:42:26,900
depth first order.

826
00:42:27,000 --> 00:42:29,600
So what will happen is, we started a node, right?

827
00:42:29,800 --> 00:42:32,600
And that node has a sub tree, right?

828
00:42:32,600 --> 00:42:35,500
It's got some people in it, so it's got doodoo or whatever.

829
00:42:35,600 --> 00:42:36,200
Right.

830
00:42:36,200 --> 00:42:37,600
So, it's got a pointer to here.

831
00:42:38,200 --> 00:42:41,900
It's got a pointer to here and these guys have pointers, right?

832
00:42:43,600 --> 00:42:44,800
Is actually essential in here.

833
00:42:44,800 --> 00:42:48,300
So there's, you know, it's really that sort of thing more like you

834
00:42:48,300 --> 00:42:50,000
might say, it looks like this.

835
00:42:56,900 --> 00:42:57,500
You know I'm saying?

836
00:42:59,900 --> 00:43:05,100
So as we're cruising along, here we go through these guys, the natural

837
00:43:05,100 --> 00:43:07,900
order for a stack is to process all of these guys.

838
00:43:07,900 --> 00:43:10,700
So it'll process a,b,c whatever.

839
00:43:11,100 --> 00:43:13,100
And it'll push onto the stack.

840
00:43:13,500 --> 00:43:15,100
Any of these guys who were groups.

841
00:43:15,500 --> 00:43:18,400
So on the on the side, we've got our stack here, right?

842
00:43:18,400 --> 00:43:20,300
And it goes like a oh is he is fact?

843
00:43:20,300 --> 00:43:21,000
No he's not.

844
00:43:21,100 --> 00:43:21,900
I mean see a group noise.

845
00:43:21,900 --> 00:43:22,800
Not be.

846
00:43:22,800 --> 00:43:23,500
Is he a group?

847
00:43:23,500 --> 00:43:26,600
Oh yeah he is put them on the stack cuc group.

848
00:43:26,600 --> 00:43:29,000
Oh yeah he has put them on the stack then go pop.

849
00:43:29,000 --> 00:43:29,100
The

850
00:43:29,300 --> 00:43:32,700
Back and get the next guy, which means that we've processed everyone

851
00:43:32,700 --> 00:43:34,100
at this level of the tree.

852
00:43:34,500 --> 00:43:41,000
Before we process, anyone who be down here, so it processes the tree,

853
00:43:41,000 --> 00:43:41,500
right?

854
00:43:41,600 --> 00:43:46,500
It processes the tree in breadth, first order, it does, it does whole

855
00:43:46,500 --> 00:43:50,600
rows of the tree before it does anything on the lower level.

856
00:43:51,000 --> 00:43:55,000
Now a recursive function would do the opposite way, it would do a

857
00:43:55,000 --> 00:43:59,000
depth first because of recursive function goes oh start iterating is a

858
00:43:59,200 --> 00:43:59,900
A group.

859
00:43:59,900 --> 00:44:00,400
No.

860
00:44:00,500 --> 00:44:00,700
Okay.

861
00:44:00,700 --> 00:44:02,500
It's be a group if so iterate.

862
00:44:02,500 --> 00:44:05,400
Be and it calls the function right there, right?

863
00:44:05,700 --> 00:44:10,900
And that's because what's on the stack in the explicit stack version

864
00:44:11,200 --> 00:44:12,300
is just the data.

865
00:44:12,800 --> 00:44:20,100
But what's on the stack in the code version is code and data, right?

866
00:44:20,200 --> 00:44:24,100
It's got the instruction pointer because it's the whole program stack.

867
00:44:24,300 --> 00:44:28,900
So it pushes the whole eater that whole traversal State onto the

868
00:44:28,900 --> 00:44:29,100
stack.

869
00:44:29,300 --> 00:44:31,600
Essentially, you don't see it, but that's what's doing when you do a

870
00:44:31,600 --> 00:44:32,800
recursive function, right?

871
00:44:33,200 --> 00:44:37,300
It captures the whole state there then, does this iteration pops back

872
00:44:37,300 --> 00:44:39,600
to finish this one, right?

873
00:44:40,800 --> 00:44:41,600
Does that make sense?

874
00:44:43,500 --> 00:44:50,800
So yeah, that's I mean, that's just, that's one sort of, kind of kind

875
00:44:50,800 --> 00:44:51,700
of benefit.

876
00:44:55,700 --> 00:44:59,800
to using the recursive function is that if we want to keep it,

877
00:45:00,000 --> 00:45:04,400
Back based explicit step base for a rewrite, the stack, then you have

878
00:45:04,400 --> 00:45:09,400
this kind of nasty thing where you you have to do the walk in breadth,

879
00:45:09,400 --> 00:45:14,700
first order or you need to do something, that makes it sort of less

880
00:45:14,900 --> 00:45:15,800
efficient if you will.

881
00:45:15,800 --> 00:45:18,900
Like we'd have to think about how we were going to actually reverse

882
00:45:18,900 --> 00:45:21,200
these guys in some way that makes it.

883
00:45:21,200 --> 00:45:26,600
So they will automatically do like you know next we put them on the

884
00:45:26,600 --> 00:45:29,900
stack when we need to remember to let come back to them and so that

885
00:45:30,000 --> 00:45:32,900
They'll go in the right order or whatever else, right?

886
00:45:33,200 --> 00:45:36,800
So having that, you know, thing in the stack is is actually kind of

887
00:45:36,800 --> 00:45:37,300
nice.

888
00:45:40,200 --> 00:45:44,600
Yeah, so if we still want to do it with our own stack and that's

889
00:45:44,600 --> 00:45:45,500
something I didn't think about.

890
00:45:45,500 --> 00:45:47,100
When I was doing it, I was like I'd rather do.

891
00:45:47,100 --> 00:45:50,200
I tend to rather do stocks when I can but in this case it's not just a

892
00:45:50,200 --> 00:45:50,900
question of visiting.

893
00:45:50,900 --> 00:45:53,700
All the elements we actually do care, what order we visit them in

894
00:45:54,600 --> 00:45:57,700
recursive function, kind of hasn't the nice side effect there.

895
00:45:58,000 --> 00:46:05,200
Now it's possible that we could just actually do the stack version in

896
00:46:05,700 --> 00:46:06,600
by augmenting it.

897
00:46:06,600 --> 00:46:07,100
Right?

898
00:46:07,100 --> 00:46:09,100
So if you imagine what that looks like that would

899
00:46:09,300 --> 00:46:16,100
Be like debug variable debug variable iterator or something like this,

900
00:46:16,100 --> 00:46:16,600
right?

901
00:46:16,900 --> 00:46:20,200
And that would be, you know, there'd be a debug variable on here

902
00:46:20,800 --> 00:46:23,200
that's like, whoever is the guy

903
00:46:28,600 --> 00:46:33,800
We need to store what we would be doing, you know, with this Loop,

904
00:46:33,900 --> 00:46:34,500
right?

905
00:46:34,800 --> 00:46:37,600
So we need to store the Terminator condition which is like, you know,

906
00:46:37,600 --> 00:46:40,900
whatever the Sentinel is, which is like the stop, you know, whatever.

907
00:46:41,000 --> 00:46:44,200
Whichever the senseless to stop at I could just call it Sentinel.

908
00:46:45,700 --> 00:46:46,700
We need to call.

909
00:46:46,700 --> 00:46:53,500
We need to do like where we were variable, like, right link that we

910
00:46:53,500 --> 00:46:54,000
were at.

911
00:46:55,500 --> 00:47:01,900
And now, if I augment the stack, this is sort of like, storing that

912
00:47:01,900 --> 00:47:02,600
instruction pointer.

913
00:47:02,600 --> 00:47:05,400
It's like storing the state of the code right?

914
00:47:06,100 --> 00:47:08,400
At that point and destruction point is wrong way to say it.

915
00:47:08,400 --> 00:47:10,800
It's like storing the local variables of the function.

916
00:47:10,900 --> 00:47:11,400
Right?

917
00:47:12,200 --> 00:47:14,700
Is the better way to say it because that is the piece of

918
00:47:14,800 --> 00:47:17,600
Information that we actually needed, you know what I'm saying.

919
00:47:18,200 --> 00:47:19,800
So if we want to we can say like, all right.

920
00:47:19,800 --> 00:47:23,000
So now what we've got is essentially a stack of these iterators

921
00:47:23,000 --> 00:47:23,700
instead

922
00:47:25,700 --> 00:47:27,800
When we push something onto that stack.

923
00:47:29,500 --> 00:47:31,100
Right, it would look like this.

924
00:47:32,500 --> 00:47:37,600
We'd say, okay, the link is going to be the root groups of our group.

925
00:47:37,600 --> 00:47:40,900
Next, that's the first one we want to process, right?

926
00:47:41,000 --> 00:47:44,900
And the thing to stop at there is going to be the route group of our

927
00:47:44,900 --> 00:47:45,400
group.

928
00:47:47,100 --> 00:47:49,800
So now we've got the full state that we needed.

929
00:47:49,800 --> 00:47:53,900
So now when we do this, we just say oh, okay, go ahead and get me, you

930
00:47:53,900 --> 00:47:55,500
know, that variable iterator

931
00:47:57,000 --> 00:47:57,700
Whatever it is.

932
00:47:58,000 --> 00:47:59,800
I pull that off of the stack.

933
00:48:06,600 --> 00:48:08,000
I come in here and I say, all right.

934
00:48:09,100 --> 00:48:10,200
Let's go through and see.

935
00:48:10,900 --> 00:48:14,600
We got to start iterating over and I guess I'll just call that

936
00:48:14,600 --> 00:48:16,300
iterator, right?

937
00:48:16,600 --> 00:48:19,500
We say, like the iterator link, is where we're starting from.

938
00:48:19,800 --> 00:48:23,100
We want to make sure that it does not equal, The Sentinel.

939
00:48:23,700 --> 00:48:25,900
And then, we just kind of chain through there, right?

940
00:48:26,100 --> 00:48:26,800
All of this stuff.

941
00:48:26,800 --> 00:48:28,200
Stays exactly the same.

942
00:48:28,300 --> 00:48:32,400
The only change now is if we get down to here and we see that it's a

943
00:48:32,400 --> 00:48:38,200
group and we want to descend, then we need to store where we were,

944
00:48:38,400 --> 00:48:38,800
right?

945
00:48:39,000 --> 00:48:42,700
That when we pop back we will get to it, right?

946
00:48:43,100 --> 00:48:46,600
So, if you think about it, what that means is that this guy right

947
00:48:46,600 --> 00:48:48,700
here, this iterator.

948
00:48:49,400 --> 00:48:52,400
We almost want to, like, always keep using him.

949
00:48:52,800 --> 00:48:57,500
So instead of popping the stack like this, we actually just look at

950
00:48:57,500 --> 00:48:59,200
what's on the stack, right?

951
00:48:59,200 --> 00:49:07,000
And we actually keep whatever the guy was that's their right and we

952
00:49:07,000 --> 00:49:08,000
use them directly.

953
00:49:08,600 --> 00:49:08,800
So

954
00:49:08,900 --> 00:49:13,500
we'd say something like okay, we want to make sure that the iterator

955
00:49:13,500 --> 00:49:17,500
link is not equal to the iterator Sentinel, we want to advance the

956
00:49:17,500 --> 00:49:19,300
iterator linked as we go.

957
00:49:19,700 --> 00:49:20,200
Right?

958
00:49:21,000 --> 00:49:23,700
Like so and then

959
00:49:26,000 --> 00:49:28,400
We do that, right?

960
00:49:29,100 --> 00:49:31,200
And so this is just saying like, Okay, you know, we've got these

961
00:49:31,200 --> 00:49:34,900
iterators were advancing this iterator as far as we can go when we get

962
00:49:34,900 --> 00:49:40,000
out of that of that advancement then we just say like, all right,

963
00:49:40,600 --> 00:49:41,300
we're done.

964
00:49:41,400 --> 00:49:45,300
So now we can finally pop that guy off the stack right but we leave

965
00:49:45,300 --> 00:49:49,600
him on the stack as an iterator until he finishes iterating that row

966
00:49:49,600 --> 00:49:50,300
of the tree.

967
00:49:51,100 --> 00:49:53,600
Then what we do here is say, like, oh, okay,

968
00:49:55,800 --> 00:49:58,200
And I get we're going to have to do this slightly a little bit, a

969
00:49:58,200 --> 00:50:00,300
little bit differently because we need to be able to break out of this

970
00:50:00,300 --> 00:50:02,800
lit, this particular list in two different places.

971
00:50:02,800 --> 00:50:06,700
So really this this won't exactly be able to go there, right?

972
00:50:07,000 --> 00:50:08,500
And you'll see why in a second.

973
00:50:08,800 --> 00:50:11,700
But so assuming that it's a group that means we want to iterate that

974
00:50:11,700 --> 00:50:12,800
group right now.

975
00:50:13,600 --> 00:50:14,200
Right.

976
00:50:14,300 --> 00:50:17,100
So we want to increase the depth, we want to advance the depth

977
00:50:17,100 --> 00:50:19,800
pointer, you know by one.

978
00:50:20,200 --> 00:50:24,200
So in here we would say like okay we've got sort of a new iterator

979
00:50:24,200 --> 00:50:25,000
that we're going to push on.

980
00:50:25,200 --> 00:50:25,500
Here.

981
00:50:25,800 --> 00:50:28,500
That's going to be whatever the current one is.

982
00:50:28,600 --> 00:50:29,800
We're going to fill it out.

983
00:50:29,800 --> 00:50:32,300
Just like we did before, right?

984
00:50:35,600 --> 00:50:41,100
And that's just going to be whatever this variable of our group.

985
00:50:41,400 --> 00:50:45,900
Next and this variables are grouped was right?

986
00:50:45,900 --> 00:50:50,400
Whatever that is we're going to push that guy on the stock so then we

987
00:50:50,400 --> 00:50:54,300
just plus plus the depth and then the problem.

988
00:50:54,800 --> 00:50:59,900
As you can see, here is now we're like well, okay, if

989
00:51:00,000 --> 00:51:01,500
Iterating over that thing.

990
00:51:01,700 --> 00:51:03,500
We would want to now restart this.

991
00:51:03,500 --> 00:51:04,300
This iteration.

992
00:51:07,700 --> 00:51:08,300
Right.

993
00:51:10,400 --> 00:51:12,800
And so you naturally think like, okay we break out of here but then

994
00:51:12,800 --> 00:51:14,500
it's like, okay, I've got this this.

995
00:51:14,500 --> 00:51:16,600
Now I'm going to decrement my death.

996
00:51:16,600 --> 00:51:18,200
It's like everything's messed up.

997
00:51:18,500 --> 00:51:22,400
Well, the nice part is since we're still in here since we're still in

998
00:51:22,400 --> 00:51:26,800
this Loop, what we can do and say said, is just say like, oh, well,

999
00:51:27,400 --> 00:51:31,000
what we could do is just say whichever one were this, this pointer is

1000
00:51:31,000 --> 00:51:31,500
sort of pointed.

1001
00:51:31,500 --> 00:51:36,000
Some places stack, we could just move to the next one and use that

1002
00:51:36,000 --> 00:51:39,000
next one and have it to start going from wherever it is.

1003
00:51:39,100 --> 00:51:39,600
Right?

1004
00:51:39,600 --> 00:51:39,700
So,

1005
00:51:39,900 --> 00:51:45,400
We could do is just say, like, oh, just use it, ER, itself, right set,

1006
00:51:45,400 --> 00:51:48,500
bitter up to be the next one that we need, right?

1007
00:51:49,700 --> 00:51:54,900
And so we've moved at one down the stack and now off we go, right?

1008
00:51:55,000 --> 00:51:56,400
We don't have to do anything else.

1009
00:51:56,500 --> 00:51:59,800
This Loop just keeps going and then when we break out of here, you

1010
00:51:59,800 --> 00:52:04,100
know, will break one down and keep going with the with the iteration.

1011
00:52:05,000 --> 00:52:07,000
With the pop, the stack popping iteration.

1012
00:52:08,400 --> 00:52:09,000
Does that make sense?

1013
00:52:09,400 --> 00:52:10,800
Hopefully that makes some sense.

1014
00:52:11,300 --> 00:52:14,300
I think we might be able to unwind this one more, right?

1015
00:52:14,300 --> 00:52:16,400
We might be able to do this with only a single Loop because we

1016
00:52:16,400 --> 00:52:18,700
probably don't actually need these guys.

1017
00:52:19,000 --> 00:52:22,900
We just would need something that was like if it hits the Sentinel pop

1018
00:52:22,900 --> 00:52:23,500
up the depth.

1019
00:52:23,500 --> 00:52:26,100
But anyway, hopefully you get the idea.

1020
00:52:26,600 --> 00:52:31,500
So that's like I said, that's if you want to do manually instead of

1021
00:52:31,500 --> 00:52:34,700
using a recursive function etc, etc.

1022
00:52:34,700 --> 00:52:37,000
But you do you want to control that iteration order.

1023
00:52:37,000 --> 00:52:38,400
That's how you would do that.

1024
00:52:39,700 --> 00:52:40,000
All right.

1025
00:52:40,000 --> 00:52:48,800
So what was I about to do here, convert debug variable link to debug

1026
00:52:48,800 --> 00:52:49,600
variable star?

1027
00:52:49,600 --> 00:52:50,700
That's a good point.

1028
00:52:50,800 --> 00:52:52,000
These are supposed to be links.

1029
00:52:57,000 --> 00:52:59,100
And debug variable type group.

1030
00:52:59,200 --> 00:53:00,500
Let's just called of our group now.

1031
00:53:01,800 --> 00:53:02,500
That's fine.

1032
00:53:03,800 --> 00:53:05,400
And what else we got?

1033
00:53:05,400 --> 00:53:09,800
Debug drop menu to put variable tree, so this guy.

1034
00:53:09,800 --> 00:53:10,300
Yeah.

1035
00:53:10,300 --> 00:53:12,500
Is just draw main menu.

1036
00:53:12,500 --> 00:53:17,900
I think this guy is just going to be yet another iteration style.

1037
00:53:18,100 --> 00:53:21,700
So that's why I was saying like, it'd be nice to kind of pull this out

1038
00:53:22,600 --> 00:53:26,400
and have it so that you can iterate over it trivial, you know easily,

1039
00:53:26,700 --> 00:53:28,600
because you can see that we could.

1040
00:53:28,600 --> 00:53:33,400
Presumably just wrap this guy up into an iterator that does just this

1041
00:53:34,100 --> 00:53:34,800
Right?

1042
00:53:35,700 --> 00:53:39,900
And I just don't know whether because there's kind of the part about

1043
00:53:40,000 --> 00:53:43,800
every time you descend and stuff like that, the drawing code needs to

1044
00:53:43,800 --> 00:53:45,400
know that you did that.

1045
00:53:46,000 --> 00:53:48,300
So I'm not sure exactly how I want to abstract that out.

1046
00:53:48,300 --> 00:53:51,900
That's kind of an interesting question, I'm not sure but since we're

1047
00:53:51,900 --> 00:53:54,900
going to do this in two different places at the very least that does

1048
00:53:54,900 --> 00:53:58,100
motivate me to maybe do that kind of fight that collapse to see if I

1049
00:53:58,100 --> 00:53:59,200
can get it out to just be

1050
00:54:00,100 --> 00:54:00,500
Up there.

1051
00:54:02,000 --> 00:54:04,700
Which should be eminently doable, right?

1052
00:54:05,000 --> 00:54:07,300
So if we were to enter,

1053
00:54:09,800 --> 00:54:10,600
let's see here.

1054
00:54:16,000 --> 00:54:17,200
if we were to enter this,

1055
00:54:19,100 --> 00:54:25,600
With this, just set to being that initial guy, right?

1056
00:54:26,400 --> 00:54:27,100
Then,

1057
00:54:30,600 --> 00:54:31,800
Or I guess we could say.

1058
00:54:37,000 --> 00:54:40,700
I guess we could say, when we pull this thing off the stack,

1059
00:54:41,800 --> 00:54:45,400
we could simply check at that point.

1060
00:54:46,300 --> 00:54:49,400
We could say, is it equal to the Sentinel?

1061
00:54:51,600 --> 00:54:57,100
If it is, we want to subtract one from the depth, right?

1062
00:54:58,700 --> 00:54:59,700
If it is not

1063
00:55:02,400 --> 00:55:06,900
then what we would want to do is process it, which is what we're doing

1064
00:55:06,900 --> 00:55:07,400
here.

1065
00:55:08,700 --> 00:55:17,000
Yes, and then say once we've processed it, move it to its next one.

1066
00:55:21,100 --> 00:55:21,900
Does that make sense?

1067
00:55:22,700 --> 00:55:26,300
So basically while there is something on the stack, we will grab

1068
00:55:26,300 --> 00:55:27,200
whatever that is.

1069
00:55:27,700 --> 00:55:31,900
If it is something that we want that, if we're basing, this iterator

1070
00:55:31,900 --> 00:55:34,200
has reached the end of its iteration.

1071
00:55:34,700 --> 00:55:36,700
Then we will pop the stack.

1072
00:55:37,700 --> 00:55:41,100
If it has not, we will get whatever the next one was an advanced.

1073
00:55:41,100 --> 00:55:41,800
IT one?

1074
00:55:41,800 --> 00:55:43,100
Oops, that's supposed to be next.

1075
00:55:43,800 --> 00:55:45,500
That would've been a fun, infinite Loop right there.

1076
00:55:46,500 --> 00:55:49,800
We processed the variable, whatever the variable is

1077
00:55:51,500 --> 00:55:57,000
And then we check to see whether we should push a new guy on right.

1078
00:55:57,900 --> 00:56:02,400
And that seems pretty straightforward to me.

1079
00:56:02,800 --> 00:56:05,600
And we can sort of wrap this up pretty nicely.

1080
00:56:05,600 --> 00:56:12,500
I feel like if we want to write just by sort of doing like a

1081
00:56:13,500 --> 00:56:18,600
Bit, just a, just the Bears, just a little touched up, just a smidge,

1082
00:56:18,600 --> 00:56:23,200
just a smidge, the barest, smidge of wrapping, but maybe, I'll, maybe

1083
00:56:23,200 --> 00:56:24,300
I'll say that for Monday.

1084
00:56:25,600 --> 00:56:31,500
So, all right, so if I come down here and go ahead and, and jump to

1085
00:56:31,500 --> 00:56:33,700
the right place there, so, there we are.

1086
00:56:36,600 --> 00:56:41,500
And I am going to take this guy and use him as he is.

1087
00:56:43,100 --> 00:56:49,200
Right, so if we do this, this bit here, again, this variable Jimmy.

1088
00:56:51,000 --> 00:56:55,600
This variable tree stuff is just changing the name down to very just

1089
00:56:55,600 --> 00:56:56,700
just a regular tree.

1090
00:56:56,800 --> 00:56:59,200
Everything else I think is probably exactly the same.

1091
00:57:00,000 --> 00:57:03,400
So in here, then we're going to go ahead and do that reversal stuff.

1092
00:57:03,800 --> 00:57:08,100
So that kind of comes out here like this.

1093
00:57:08,900 --> 00:57:09,800
We then do.

1094
00:57:09,900 --> 00:57:12,500
I guess all of this stuff is is all the same.

1095
00:57:13,500 --> 00:57:14,700
That doesn't change at all.

1096
00:57:14,900 --> 00:57:16,600
And then at the end right?

1097
00:57:16,600 --> 00:57:18,400
We do this iteration.

1098
00:57:20,000 --> 00:57:20,600
There we go.

1099
00:57:21,800 --> 00:57:23,400
And yeah.

1100
00:57:23,400 --> 00:57:24,900
That's basically it.

1101
00:57:25,500 --> 00:57:29,400
Now we of course, have the problem of our look up stuff.

1102
00:57:29,400 --> 00:57:31,400
We haven't implemented yet either.

1103
00:57:32,100 --> 00:57:34,100
So we have to now start doing that.

1104
00:57:34,200 --> 00:57:37,000
We want to for any given variable.

1105
00:57:37,200 --> 00:57:42,100
We want to do something where when we're displaying it, we like I

1106
00:57:42,100 --> 00:57:46,300
said, how we have this concept of the debug view for it so anytime we

1107
00:57:46,300 --> 00:57:48,900
display a variable we want to get its debug View.

1108
00:57:50,900 --> 00:57:54,600
Which will have this sort of stuff, like, what the dimension is and

1109
00:57:54,600 --> 00:57:58,000
stuff, like we have this inline block and that sort of thing.

1110
00:57:58,700 --> 00:58:03,100
So any given variable has to have that information, so we're pretend

1111
00:58:03,100 --> 00:58:06,100
temporarily that we have that, right?

1112
00:58:06,600 --> 00:58:10,000
And in fact, I could do it this way where we just go like, oh, we've

1113
00:58:10,000 --> 00:58:16,200
got a view and it's set to nothing do.

1114
00:58:17,600 --> 00:58:18,500
You cash?

1115
00:58:22,600 --> 00:58:26,300
And I guess now I think about too I feel like we would have it so that

1116
00:58:26,300 --> 00:58:29,900
when it gets the view for this guy, it's going to need to know what

1117
00:58:29,900 --> 00:58:31,900
kind of view it actually has.

1118
00:58:32,500 --> 00:58:36,500
And I do think that since the debug view, well, we might even want

1119
00:58:36,500 --> 00:58:38,600
different debug view types for different things.

1120
00:58:39,600 --> 00:58:42,900
So I feel like it's actually might even be the kind of thing where we

1121
00:58:42,900 --> 00:58:43,700
want to do it.

1122
00:58:46,100 --> 00:58:52,600
/ one of these, where we say like you know, get debug view for and we

1123
00:58:52,600 --> 00:58:54,700
then pass that variable, right?

1124
00:58:56,600 --> 00:59:00,900
and in fact, I guess we could do it, you know for everybody and say it

1125
00:59:00,900 --> 00:59:04,600
got the debug view for this variable and it will get, you know,

1126
00:59:04,600 --> 00:59:08,100
whatever the appropriate debug view is for that variable, then it here

1127
00:59:08,100 --> 00:59:11,300
we always use whatever that that thing actually was

1128
00:59:12,300 --> 00:59:12,600
Yeah.

1129
00:59:13,200 --> 00:59:14,000
Something like that.

1130
00:59:15,800 --> 00:59:17,600
So yeah, I feel like that.

1131
00:59:17,800 --> 00:59:18,400
That makes sense.

1132
00:59:18,400 --> 00:59:20,800
There's something some cool things we could probably even do.

1133
00:59:21,100 --> 00:59:22,700
There's just so many possibilities in here.

1134
00:59:22,700 --> 00:59:23,700
It's kind of crazy.

1135
00:59:24,200 --> 00:59:24,600
Anyway.

1136
00:59:24,900 --> 00:59:26,900
So when we do this, this stuff,

1137
00:59:28,300 --> 00:59:30,700
I don't think there's really anything else in here that has to be

1138
00:59:30,700 --> 00:59:31,300
modified.

1139
00:59:31,300 --> 00:59:33,800
It's all pretty straightforward so far.

1140
00:59:34,600 --> 00:59:38,900
And so really in here, again, that's just going to be changing the

1141
00:59:38,900 --> 00:59:43,000
this to be a view thing because would be view, inline-block dimension.

1142
00:59:45,300 --> 00:59:45,900
Like so.

1143
00:59:47,700 --> 00:59:48,000
Oops.

1144
00:59:48,000 --> 00:59:48,900
But which one is it that?

1145
00:59:48,900 --> 00:59:49,300
Why?

1146
00:59:49,400 --> 00:59:49,700
Yeah.

1147
00:59:50,900 --> 00:59:57,000
Inline-block mention not the .y and let me just let the compile

1148
00:59:57,000 --> 00:59:57,400
errors.

1149
00:59:57,600 --> 00:59:59,300
Sort of tell us where to go from there.

1150
01:00:01,000 --> 01:00:05,500
It's not a member of debug view inline-block, probably just dim, huh?

1151
01:00:06,200 --> 01:00:06,600
Yeah.

1152
01:00:08,700 --> 01:00:14,400
So a few more here and then we'll wrap up for the day bitmap scale tip

1153
01:00:14,400 --> 01:00:17,000
of you and like back does not have an overloaded member operator

1154
01:00:17,100 --> 01:00:20,500
Arrow, you are correct, it doesn't.

1155
01:00:22,200 --> 01:00:25,400
Bitmap display, dim dot size.

1156
01:00:25,400 --> 01:00:28,600
So that's just again, correcting this in mind block.

1157
01:00:30,000 --> 01:00:30,500
Dim.

1158
01:00:31,800 --> 01:00:32,300
X.

1159
01:00:33,300 --> 01:00:34,200
What else we got?

1160
01:00:35,800 --> 01:00:36,600
This is just again.

1161
01:00:36,600 --> 01:00:39,200
That same thing you inline-block dim.

1162
01:00:41,600 --> 01:00:43,700
And let's see what we got for our group here.

1163
01:00:47,600 --> 01:00:48,100
Make a dummy.

1164
01:00:48,100 --> 01:00:48,900
One of these.

1165
01:00:52,000 --> 01:00:54,000
And this will crash us nicely.

1166
01:00:55,900 --> 01:00:56,300
Colonel.

1167
01:01:00,300 --> 01:01:06,000
There we go, variables are not implemented.

1168
01:01:15,000 --> 01:01:15,300
Yeah.

1169
01:01:18,500 --> 01:01:19,900
That is not how you spell variable.

1170
01:01:21,000 --> 01:01:23,500
The variable B employee would be displeased.

1171
01:01:23,600 --> 01:01:25,800
Alright, that'll crash anyway so don't really need a macro there for

1172
01:01:25,800 --> 01:01:26,000
that.

1173
01:01:26,000 --> 01:01:26,600
So that's fine.

1174
01:01:27,100 --> 01:01:29,200
Debug variable reference Undeclared.

1175
01:01:29,200 --> 01:01:30,500
That is quite true.

1176
01:01:30,900 --> 01:01:33,900
It quite certainly is and I think I'll just comment this guy out for

1177
01:01:33,900 --> 01:01:36,600
now because this is the guy who were going to change primarily this

1178
01:01:36,600 --> 01:01:38,600
was the this is the tearing off value stuff.

1179
01:01:39,200 --> 01:01:40,800
So that's the guy that we're actually going to.

1180
01:01:40,800 --> 01:01:44,600
Then once all this stuff is working go in and change to support kinds

1181
01:01:44,600 --> 01:01:46,100
of more expressive job.

1182
01:01:46,100 --> 01:01:47,400
Drag-and-drop, sorts of things

1183
01:01:48,300 --> 01:01:49,900
Barbie implement

1184
01:01:51,000 --> 01:01:51,900
with new system.

1185
01:01:54,000 --> 01:01:57,400
So then let's see what else we got for our group.

1186
01:01:58,400 --> 01:02:08,100
This again is going to have to get that debug view, debug view, view

1187
01:02:08,100 --> 01:02:11,700
equals get to bug view for this variable.

1188
01:02:14,000 --> 01:02:17,700
And we're just going to go ahead and assume that we get one of those

1189
01:02:17,700 --> 01:02:18,300
back.

1190
01:02:19,300 --> 01:02:20,200
Whatever.

1191
01:02:20,200 --> 01:02:28,200
This guy actually is, there we go, collapsible, that's what it is.

1192
01:02:28,700 --> 01:02:31,900
So we would say that the view collapsible

1193
01:02:36,400 --> 01:02:38,000
A collapsible.

1194
01:02:38,000 --> 01:02:38,500
There we go.

1195
01:02:39,500 --> 01:02:41,300
Equals not view collapsible.

1196
01:02:46,300 --> 01:02:53,900
That's is also wrong expanded always for now.

1197
01:02:54,200 --> 01:02:57,300
Okay, almost done actually.

1198
01:02:57,700 --> 01:02:59,800
So I might as well just finish up the last of these

1199
01:03:01,000 --> 01:03:02,300
Before we call it a day.

1200
01:03:03,400 --> 01:03:06,200
So this stuff profile Dimension.

1201
01:03:06,300 --> 01:03:08,700
I'm not going to bother with those for now.

1202
01:03:08,700 --> 01:03:11,000
So we'll just go ahead and get rid of that.

1203
01:03:11,700 --> 01:03:13,900
Will leave that doing its thing.

1204
01:03:15,100 --> 01:03:15,900
What else we got?

1205
01:03:15,900 --> 01:03:18,800
Assert context, group, Death, does, not have.

1206
01:03:18,800 --> 01:03:20,500
No, remember for you are correct.

1207
01:03:20,600 --> 01:03:21,500
That is a DOT.

1208
01:03:22,600 --> 01:03:24,400
And group context group.

1209
01:03:26,700 --> 01:03:29,400
It's not a member of debug variable definition context.

1210
01:03:29,900 --> 01:03:33,900
You are quite right about that as well.

1211
01:03:34,600 --> 01:03:37,000
I agree wholeheartedly.

1212
01:03:39,600 --> 01:03:45,200
But I feel like this should actually look like that.

1213
01:03:48,100 --> 01:03:51,600
Alright, and that's the end.

1214
01:03:53,500 --> 01:03:54,200
Of that.

1215
01:03:55,100 --> 01:03:57,100
Alright, so that was pretty good.

1216
01:03:57,500 --> 01:03:59,400
Again, we're working it into more shape.

1217
01:03:59,500 --> 01:04:03,300
Like I said, this is, this is something that takes a while because

1218
01:04:03,300 --> 01:04:05,800
these sorts of things want to go through a few different iterations

1219
01:04:05,800 --> 01:04:07,600
till you get them just.

1220
01:04:07,600 --> 01:04:11,300
So and so I want to keep polishing that down.

1221
01:04:12,200 --> 01:04:15,100
We got to kind of take a look again at the the structure.

1222
01:04:15,500 --> 01:04:17,800
There may be one more structural change that I want to make, we'll

1223
01:04:17,800 --> 01:04:18,300
see.

1224
01:04:19,800 --> 01:04:22,200
And that has to do with how we iterate over.

1225
01:04:23,200 --> 01:04:24,000
About variables.

1226
01:04:24,400 --> 01:04:28,700
And what I'm going to do is again like I said Monday will debunk this

1227
01:04:28,700 --> 01:04:30,000
get and get it working.

1228
01:04:31,400 --> 01:04:37,600
And then Tuesday, what I'll do is I want to try some test cases in

1229
01:04:37,600 --> 01:04:41,000
terms of how we expose debug variables because I have a feeling

1230
01:04:41,000 --> 01:04:43,600
there's some different things we want to do there and they will inform

1231
01:04:43,600 --> 01:04:47,200
the last change to the structural elements of it and then I think

1232
01:04:47,200 --> 01:04:50,900
we'll be in good shape to say like okay this is this is right now.

1233
01:04:52,000 --> 01:04:53,300
All right, so I'll go to the Q&A.

1234
01:04:57,400 --> 01:04:58,000
Mabel do that.

1235
01:04:58,100 --> 01:04:58,800
Awesome.

1236
01:04:59,800 --> 01:05:01,100
Sweet.

1237
01:05:02,600 --> 01:05:06,200
Yeah, if you have any questions about where we're at so far,

1238
01:05:07,500 --> 01:05:12,200
Go ahead and put Q colon front of them and I will try to answer those

1239
01:05:12,200 --> 01:05:13,000
questions.

1240
01:05:19,300 --> 01:05:19,700
The size.

1241
01:05:19,700 --> 01:05:20,600
It doesn't work.

1242
01:05:21,000 --> 01:05:21,400
We'll know.

1243
01:05:21,400 --> 01:05:22,600
It definitely doesn't work.

1244
01:05:23,600 --> 01:05:24,200
Right.

1245
01:05:27,000 --> 01:05:29,500
So this is going to return 0.

1246
01:05:30,600 --> 01:05:31,500
And this.

1247
01:05:32,600 --> 01:05:34,900
We'll get used right.

1248
01:05:36,200 --> 01:05:38,700
So until we Implement that it's definitely not going to work.

1249
01:05:38,700 --> 01:05:42,700
Now, if you want to just kind of see, like, okay, what happens if we

1250
01:05:42,700 --> 01:05:44,000
do something here?

1251
01:05:44,900 --> 01:05:51,400
You could try to make a one of these if you want to debug it without

1252
01:05:51,400 --> 01:05:53,300
implementing this thing, right?

1253
01:05:53,300 --> 01:05:54,700
You can do that.

1254
01:05:56,700 --> 01:05:57,600
and, and

1255
01:06:03,600 --> 01:06:06,400
But I assumed like I said there's going to be more problems, okay.

1256
01:06:06,400 --> 01:06:10,300
So first off I don't really want to do all this because like I wanted

1257
01:06:10,300 --> 01:06:11,700
to bug this on Monday stream.

1258
01:06:12,300 --> 01:06:17,100
I was correct in that, we didn't close the final variable group,

1259
01:06:17,400 --> 01:06:17,800
right?

1260
01:06:17,800 --> 01:06:19,400
And you see how that caught that.

1261
01:06:19,900 --> 01:06:21,900
Because remember I was like the route group gets open and then the

1262
01:06:21,900 --> 01:06:25,000
debugging group has opened that's to opens but then we only do one

1263
01:06:25,000 --> 01:06:26,300
close at the end.

1264
01:06:26,400 --> 01:06:27,100
Right?

1265
01:06:27,400 --> 01:06:28,900
And so I just wanted to

1266
01:06:30,200 --> 01:06:32,900
I knew that was not happening and I wanted it to stop Bobby.

1267
01:06:32,900 --> 01:06:38,800
Now, like I said, it doesn't actually matter because you know, there's

1268
01:06:38,800 --> 01:06:42,600
actually no nothing happens when you close a group in our system.

1269
01:06:42,600 --> 01:06:45,200
So you can leave as many of them dangling as you want, but I just feel

1270
01:06:45,200 --> 01:06:46,000
like hygienically.

1271
01:06:46,000 --> 01:06:47,700
It's good to know that in case you accidentally left.

1272
01:06:47,700 --> 01:06:50,500
One of these other ones open, it would warn you at compile time and

1273
01:06:51,600 --> 01:06:55,000
I mean again I don't have a I don't have a concrete reason for why.

1274
01:06:55,000 --> 01:06:56,600
There's really no real reason.

1275
01:06:56,600 --> 01:07:00,000
I just, you know, programmer meticulousness.

1276
01:07:00,000 --> 01:07:02,600
I guess something like that.

1277
01:07:02,600 --> 01:07:03,200
I'm not sure.

1278
01:07:05,500 --> 01:07:06,600
So yeah.

1279
01:07:07,200 --> 01:07:07,900
So anyway,

1280
01:07:11,300 --> 01:07:12,600
Putting that in will make it not crash.

1281
01:07:12,600 --> 01:07:16,100
But yeah, like I said, we got to debug the iteration and the adding

1282
01:07:16,100 --> 01:07:16,400
and stuff.

1283
01:07:16,400 --> 01:07:20,800
So we, you know, we just we're not really at a point yet where like I

1284
01:07:20,800 --> 01:07:24,500
want to do that Monday and see what's going on because I don't, you

1285
01:07:24,500 --> 01:07:27,300
know, we wrote a ton of code there and we haven't looked at it at all.

1286
01:07:32,400 --> 01:07:33,400
Dear boys.

1287
01:07:33,400 --> 01:07:34,900
17 earlier in the Stream.

1288
01:07:34,900 --> 01:07:38,300
You said, you once spent 10 weeks on a problem, what was that problem?

1289
01:07:38,300 --> 01:07:40,600
Well, I've spent more than 10 weeks on a single problem.

1290
01:07:42,900 --> 01:07:46,400
I don't know if I spent 10 weeks on the witnesses Collision detector,

1291
01:07:46,400 --> 01:07:47,600
but I probably did.

1292
01:07:50,400 --> 01:07:52,700
I'd have to like add it up because I did a lot of different things on

1293
01:07:52,700 --> 01:07:55,200
the witness and like only some of it was the Collision detector.

1294
01:07:55,200 --> 01:07:57,800
So I don't know if it's 10 weeks but it could easily have been 10

1295
01:07:57,800 --> 01:07:58,200
weeks.

1296
01:07:59,500 --> 01:08:02,700
And I strongly suspect that it was more than 10 weeks.

1297
01:08:02,700 --> 01:08:04,100
I'm just a collision detector.

1298
01:08:07,700 --> 01:08:11,600
I spent more than 10 weeks on Granny's curve, solver.

1299
01:08:14,900 --> 01:08:15,400
and,

1300
01:08:18,600 --> 01:08:22,200
Because, I mean, that was a totally new thing in those days, right?

1301
01:08:22,200 --> 01:08:27,700
Like nobody had really been doing any of that and in fact, the the,

1302
01:08:28,100 --> 01:08:28,800
you know, the

1303
01:08:30,000 --> 01:08:33,399
The Source material added drawn from the literature, nobody was doing

1304
01:08:33,399 --> 01:08:34,000
that thing.

1305
01:08:34,000 --> 01:08:38,200
I had to draw on the people who were had been doing curve solving for

1306
01:08:38,200 --> 01:08:42,399
2D shapes and use that for like sort of the basis of how to start

1307
01:08:42,399 --> 01:08:44,100
thinking about it and took for animation.

1308
01:08:44,600 --> 01:08:46,399
So that first curve solve, it took a while.

1309
01:08:50,500 --> 01:08:52,000
I've spent 10 weeks on.

1310
01:08:52,000 --> 01:08:54,500
Yeah I'm absent 10 weeks on tons of problems as I guess the way I

1311
01:08:54,500 --> 01:08:55,200
would say it.

1312
01:09:03,500 --> 01:09:07,200
Insofar as have you considered using intrusive linked lists like those

1313
01:09:07,200 --> 01:09:11,200
in Linux kernel use offset of so I almost always use intrusive Luke

1314
01:09:11,200 --> 01:09:13,600
linked lists if you can.

1315
01:09:14,200 --> 01:09:17,100
But you'll note in this case we can't.

1316
01:09:17,600 --> 01:09:23,700
Because in this case we have things appear in more than one list.

1317
01:09:24,399 --> 01:09:26,800
That's why I had to do this, right?

1318
01:09:26,899 --> 01:09:29,399
If things didn't have to appear in more than one list, we'd be back to

1319
01:09:29,399 --> 01:09:31,100
where we started, right.

1320
01:09:31,100 --> 01:09:32,200
That's the way we had it.

1321
01:09:32,300 --> 01:09:33,100
That was an intrusive.

1322
01:09:33,300 --> 01:09:35,000
Blessed, right?

1323
01:09:35,399 --> 01:09:39,000
But in this case, they have to be external because we have things are

1324
01:09:39,000 --> 01:09:40,200
going to show up in more than one list.

1325
01:09:40,200 --> 01:09:43,100
And that's when you can no longer use it, intrusive linked list.

1326
01:09:43,300 --> 01:09:45,899
Now, we have an intrusive linked list, right?

1327
01:09:47,800 --> 01:09:48,899
Which is the tree.

1328
01:09:49,500 --> 01:09:51,700
So we do have one that's an intrusive like this, right?

1329
01:10:03,400 --> 01:10:05,700
I just want food, how portable with a game engine be?

1330
01:10:05,700 --> 01:10:07,100
Could it be used to make other games?

1331
01:10:07,100 --> 01:10:10,200
Well, portability wise, it'll be very portable in the sense that we're

1332
01:10:10,200 --> 01:10:11,600
going to make sure it runs on multiple Platforms.

1333
01:10:11,600 --> 01:10:16,400
In fact, it already is like, people have already ported it to svl and

1334
01:10:16,400 --> 01:10:21,400
stuff like that but in terms of what you can use to make other games,

1335
01:10:21,400 --> 01:10:24,300
I mean, I guess what I'd say is, I don't care.

1336
01:10:24,500 --> 01:10:28,400
Meaning, it's not designed, it's not designed to be an engine that

1337
01:10:28,400 --> 01:10:29,400
supports lots of games.

1338
01:10:29,400 --> 01:10:32,300
It's just designed to be one game so I don't know.

1339
01:10:33,000 --> 01:10:38,300
I neither know, nor care, whether it would be usable in that sense

1340
01:10:39,000 --> 01:10:41,800
because that's outside sort of the goal of the project that makes

1341
01:10:41,800 --> 01:10:42,100
sense.

1342
01:10:42,900 --> 01:10:43,800
Cuba, Caleb curve.

1343
01:10:43,800 --> 01:10:45,800
Solver a curve, solver something.

1344
01:10:46,200 --> 01:10:48,600
Well, I mean, it's just a term that I use

1345
01:10:51,200 --> 01:10:52,500
It's curve fitting, really?

1346
01:10:52,500 --> 01:10:57,500
It's like a solver that takes a bunch of data that is not curves and

1347
01:10:57,500 --> 01:10:59,200
turns them into curves, right?

1348
01:10:59,200 --> 01:11:02,000
So, like takes a bunch of points and runs a curve through them or

1349
01:11:02,000 --> 01:11:03,100
something like that, right?

1350
01:11:05,300 --> 01:11:07,100
And so far as will we ever see the memory chunk?

1351
01:11:07,100 --> 01:11:08,100
Debug visualization.

1352
01:11:08,400 --> 01:11:10,200
Yeah we'll do that eventually for sure.

1353
01:11:12,000 --> 01:11:14,600
I don't really know how we will visualize it.

1354
01:11:16,500 --> 01:11:19,200
I can't promise the visualization be very good because memory is kind

1355
01:11:19,200 --> 01:11:20,400
of hard to visualize.

1356
01:11:20,400 --> 01:11:23,900
Unfortunately since there's lots of little things that so I might just

1357
01:11:23,900 --> 01:11:27,200
be like a line with little chunks on it, but, you know, we'll do that.

1358
01:12:07,200 --> 01:12:08,400
So looks like we're done.

1359
01:12:19,100 --> 01:12:21,800
Alrighty, it's closed down.

1360
01:12:33,200 --> 01:12:34,700
And IMAP u.s.

1361
01:12:34,700 --> 01:12:36,100
hover currently.

1362
01:12:36,100 --> 01:12:37,000
It's on mint.

1363
01:12:37,800 --> 01:12:40,400
Actually, I don't have time to install a new thing so I just don't put

1364
01:12:40,400 --> 01:12:41,000
it to sleep.

1365
01:12:41,000 --> 01:12:43,600
It's been running continuously since the last time we stream,

1366
01:12:46,300 --> 01:12:52,800
And so unfortunately, yeah, I will try to make another installation

1367
01:12:52,800 --> 01:12:55,600
sometime soon, but yeah.

1368
01:13:02,900 --> 01:13:04,000
Insofar as, by the way.

1369
01:13:04,000 --> 01:13:06,600
Like I mean, I don't I'm not familiar with the Linux kernel

1370
01:13:06,600 --> 01:13:11,200
implementation but intrusive linked lists cannot have items in more

1371
01:13:11,200 --> 01:13:11,800
than one list.

1372
01:13:11,800 --> 01:13:14,000
At the same time.

1373
01:13:14,600 --> 01:13:20,700
You can have more than one threading through that link like you can

1374
01:13:20,700 --> 01:13:21,700
have meaning

1375
01:13:25,000 --> 01:13:29,400
Right, so you can have a thing that's like, you know, here's my

1376
01:13:29,400 --> 01:13:30,200
element.

1377
01:13:31,100 --> 01:13:33,100
And here's the next and previous.

1378
01:13:34,400 --> 01:13:37,600
If this is what you're talking in terms of intrusive linked list,

1379
01:13:37,600 --> 01:13:38,200
right?

1380
01:13:38,200 --> 01:13:41,300
That can only be on one list list at a time period.

1381
01:13:41,900 --> 01:13:44,000
However, you can always add another one.

1382
01:13:47,800 --> 01:13:48,400
Right?

1383
01:13:48,400 --> 01:13:52,500
So if you added another set of variables then you can have it on two

1384
01:13:52,500 --> 01:13:58,400
different types of lists but not on two of the same type of list.

1385
01:13:58,700 --> 01:14:03,600
So whatever this list was if this is like you know the food list you

1386
01:14:03,600 --> 01:14:07,200
can only be ever be on one food list but there can be a bar list that

1387
01:14:07,200 --> 01:14:10,200
uses a different set of variables and it can be it could be on two of

1388
01:14:10,200 --> 01:14:11,400
those, right?

1389
01:14:11,600 --> 01:14:16,000
But once you fix this offset whatever that is you can only ever be on

1390
01:14:16,000 --> 01:14:17,300
one of that kind of

1391
01:14:17,700 --> 01:14:18,800
Whatever that kind was.

1392
01:14:19,800 --> 01:14:20,400
Right?

1393
01:14:20,700 --> 01:14:22,400
And that's that has nothing to do with your implementation.

1394
01:14:22,400 --> 01:14:26,800
That's just fact, that's just like category Theory or whatever, right?

1395
01:14:26,800 --> 01:14:28,500
You just, that's just the end of the story.

1396
01:14:35,300 --> 01:14:37,400
Can you give me a quick rundown again of how you're substituting the

1397
01:14:37,400 --> 01:14:42,300
stack for instances of the debug View?

1398
01:14:44,000 --> 01:14:49,100
How you're substituting the stack for instances of the debug view.

1399
01:14:50,400 --> 01:14:52,000
Can you ask that question on Monday?

1400
01:14:52,000 --> 01:14:54,900
Because I don't think I understand it to be

1401
01:14:56,800 --> 01:14:57,800
Honest.

1402
01:15:01,600 --> 01:15:02,500
And Martin Cohen.

1403
01:15:02,800 --> 01:15:04,400
So what do you use as a formatting language?

1404
01:15:04,400 --> 01:15:09,400
Usually, I typically don't do those sorts of things.

1405
01:15:11,500 --> 01:15:12,800
Just not something I normally do.

1406
01:15:18,500 --> 01:15:23,000
Yeah, I mean, usually I markup things semantically, so I might like

1407
01:15:23,000 --> 01:15:26,600
have markup in things that says, oh, this piece is like a, you know, a

1408
01:15:26,600 --> 01:15:27,200
proper noun.

1409
01:15:27,200 --> 01:15:30,100
You should, you know, map it that way or look up a link for something

1410
01:15:30,100 --> 01:15:31,600
that I do stuff like that.

1411
01:15:31,800 --> 01:15:38,100
But I rarely If Ever, I just haven't written programs that want to say

1412
01:15:38,100 --> 01:15:42,600
like make this next piece italic and it's not I don't, you know, I'm

1413
01:15:42,600 --> 01:15:44,500
not disparaging that or anything.

1414
01:15:44,500 --> 01:15:45,700
That's totally fine thing to do.

1415
01:15:45,700 --> 01:15:47,800
I just, I just don't

1416
01:15:50,900 --> 01:15:52,600
I just don't have occasion for it.

1417
01:15:53,100 --> 01:15:54,700
I have not had occasion for it.

1418
01:15:55,800 --> 01:15:56,300
Keep your cab.

1419
01:15:56,300 --> 01:15:58,300
Is this how you DUI and your other programs?

1420
01:15:59,900 --> 01:16:06,000
So yeah, I mean some of it is some of it isn't like I said I'm kind of

1421
01:16:06,000 --> 01:16:08,400
working out a specific way of doing UI.

1422
01:16:08,600 --> 01:16:11,900
I want to show how you arrived at a good UI structure.

1423
01:16:12,200 --> 01:16:15,800
So I'm doing something that's intentionally slightly different than,

1424
01:16:16,500 --> 01:16:17,000
you know.

1425
01:16:18,200 --> 01:16:19,800
The exact way I may have done it before.

1426
01:16:21,500 --> 01:16:24,900
I usually try to do that even when I'm doing it myself so I can see if

1427
01:16:24,900 --> 01:16:30,100
maybe there's some productive new things that you know I'll learn or

1428
01:16:30,300 --> 01:16:32,900
arrived at by try something different than what I've already done.

1429
01:16:44,700 --> 01:16:46,900
All right, I'ma call it.

1430
01:16:47,800 --> 01:16:48,800
I call it down.

1431
01:16:50,400 --> 01:16:55,100
By the way, thank you to everyone for helping me the other day, get my

1432
01:16:55,100 --> 01:16:57,500
hex chat to show the list of people.

1433
01:16:57,800 --> 01:16:58,500
It's pretty nice.

1434
01:16:58,600 --> 01:17:04,000
Now to have it say like 159 or whatever, instead of 0, which is what

1435
01:17:04,000 --> 01:17:07,500
it was saying, all the time before, it's nice to be able to see

1436
01:17:07,500 --> 01:17:08,000
everyone.

1437
01:17:08,000 --> 01:17:11,900
Again, even if it is kind of just a little list of names, it's nice to

1438
01:17:11,900 --> 01:17:16,600
see that there's other people instead of the weird thing where twitch

1439
01:17:16,600 --> 01:17:20,000
was not telling me anyone was here.

1440
01:17:20,700 --> 01:17:21,400
So, that's cool.

1441
01:17:22,300 --> 01:17:26,200
All right, thank you, everyone for joining me for another episode of

1442
01:17:26,200 --> 01:17:27,800
handmade hero to pause recording with you.

1443
01:17:27,800 --> 01:17:30,900
As always, if you would like to follow along at home, with the source

1444
01:17:30,900 --> 01:17:33,600
code, you can always pre-order the game on handmade hero dot org, it

1445
01:17:33,600 --> 01:17:36,700
comes to the source code and you can play around with it yourself and

1446
01:17:36,800 --> 01:17:38,000
experiment with it and learn from it.

1447
01:17:38,000 --> 01:17:40,300
And do, you know, other sorts of fun things?

1448
01:17:40,900 --> 01:17:43,300
We also have patreon page, you want to split the video series?

1449
01:17:43,400 --> 01:17:44,800
It's always much appreciated.

1450
01:17:44,900 --> 01:17:48,000
We also have a forum site where you can go to ask questions or view it

1451
01:17:48,000 --> 01:17:49,300
anti-deficit guide.

1452
01:17:49,400 --> 01:17:50,000
And finally, we have

1453
01:17:50,100 --> 01:17:50,700
A tweetbot.

1454
01:17:50,700 --> 01:17:54,500
The tweetbot will tweet the schedule at you, and it will tell you when

1455
01:17:54,500 --> 01:17:55,500
the life is going to happen.

1456
01:17:55,700 --> 01:17:59,900
So you gave when the lashes gonna happen, not tomorrow, I will not be

1457
01:17:59,900 --> 01:18:02,900
around during the stream time tomorrow, so I cannot stream but we'll

1458
01:18:02,900 --> 01:18:04,100
be back on Monday.

1459
01:18:04,200 --> 01:18:05,900
So check the treat pot for that schedule.

1460
01:18:05,900 --> 01:18:07,200
I'll try to update this weekend.

1461
01:18:07,600 --> 01:18:10,800
Thanks everyone for joining me, and I will see you guys on the

1462
01:18:10,800 --> 01:18:12,700
internet until then have fun programming.

