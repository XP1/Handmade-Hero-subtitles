1
00:00:02,100 --> 00:00:05,400
Okay, hello everyone and welcome to handmade hero.

2
00:00:05,400 --> 00:00:08,100
The show Rico to complete game live on stream.

3
00:00:08,100 --> 00:00:16,500
I am going to do depth peeling this weekend and yeah there's not a

4
00:00:16,500 --> 00:00:23,600
whole lot to it but because it's one of those things that is GPU

5
00:00:23,600 --> 00:00:27,900
oriented and we don't have any way to debug GPU on this machine at

6
00:00:27,900 --> 00:00:28,500
all.

7
00:00:29,000 --> 00:00:30,100
I just have to wing it.

8
00:00:31,400 --> 00:00:31,500
It

9
00:00:31,700 --> 00:00:36,500
Can be an adventure, you know, it could definitely be a pretty nasty

10
00:00:36,500 --> 00:00:37,100
Adventure.

11
00:00:37,400 --> 00:00:45,000
So let me just explain what we're going to be doing and yeah that that

12
00:00:45,000 --> 00:00:46,900
does not look like Milton is happy.

13
00:00:48,000 --> 00:00:49,200
I really need to.

14
00:00:50,400 --> 00:00:52,800
There's only a couple things in Milton that I need to fix.

15
00:00:53,300 --> 00:00:57,700
I should just like we should do a weekend streamer we just go fix them

16
00:00:58,400 --> 00:01:01,500
because it's almost perfect for me now but it

17
00:01:01,600 --> 00:01:05,200
It has some weird like things where it loses sync with the pain all

18
00:01:05,200 --> 00:01:05,800
the time.

19
00:01:07,300 --> 00:01:11,200
And it also has this weird pause, like, every time you lift up the

20
00:01:11,200 --> 00:01:13,400
pen, it stutters like that.

21
00:01:13,900 --> 00:01:17,100
And I'm pretty sure I could fix both of those but I just, I've never

22
00:01:17,800 --> 00:01:19,100
and the source code is available.

23
00:01:19,300 --> 00:01:25,200
So I've just I've never spent the time to actually go in and and and

24
00:01:25,200 --> 00:01:26,100
figure it out.

25
00:01:27,100 --> 00:01:30,900
But I should, I mean something I use every day, well every weekend.

26
00:01:32,300 --> 00:01:34,700
All right, so let's talk about death peeling.

27
00:01:42,500 --> 00:01:48,800
So, deaf peeling is essentially the idea that if you want to, right?

28
00:01:49,700 --> 00:01:59,000
You can sort of get multiple slices through your scene, to capture the

29
00:01:59,000 --> 00:02:04,300
information that's at more than one layer through the scene, you know,

30
00:02:04,300 --> 00:02:05,900
like kind of like a cutaway view.

31
00:02:06,600 --> 00:02:11,200
And I talked a long time ago when we were sort of talking about.

32
00:02:11,400 --> 00:02:16,900
Stuff I talked about atomics and what atomics are is their ways of

33
00:02:16,900 --> 00:02:23,200
using the frame buffer in a way that allows you to write more than one

34
00:02:23,200 --> 00:02:26,500
piece of information to it, kind of like a linked list or whatever.

35
00:02:27,000 --> 00:02:30,200
And as you know, if, you know, if you, if you're going to write to a

36
00:02:30,200 --> 00:02:33,800
location and you need to do something coherent like a linked list, you

37
00:02:33,800 --> 00:02:38,600
have to have the ability to access that atomically because if you, you

38
00:02:38,600 --> 00:02:41,200
know, imagine a GPU is not single-threaded a Jeep.

39
00:02:41,300 --> 00:02:44,000
EU has many, many threads, doing rendering just like our software

40
00:02:44,000 --> 00:02:44,800
renderer did.

41
00:02:45,800 --> 00:02:50,300
And so, you know, if you wanted to say, do all the rendering to the to

42
00:02:50,300 --> 00:02:53,500
the screen, and instead of like blending all the pixels together that

43
00:02:53,500 --> 00:02:56,200
stacked, we know when you had two things stacked on top of each other,

44
00:02:56,500 --> 00:02:59,800
you just wanted to keep a list of all of them, you could use atomics.

45
00:03:01,900 --> 00:03:03,500
And what the atomics allow you to do.

46
00:03:04,600 --> 00:03:05,600
Is they allow you to say?

47
00:03:05,600 --> 00:03:08,800
All right, I want to atomically update this location in the frame

48
00:03:08,800 --> 00:03:12,700
buffer such that I can basically keep a little link list.

49
00:03:12,700 --> 00:03:15,600
It says, here's the color I rasterize than the depth a rasterized it

50
00:03:15,600 --> 00:03:19,200
at and then here is like essentially an index to the next one.

51
00:03:19,400 --> 00:03:22,800
That's also existing at this pixel location and you just stream those

52
00:03:22,800 --> 00:03:26,600
out into memory and you have some maximum amount that you're willing

53
00:03:26,600 --> 00:03:27,900
to tolerate per pixel.

54
00:03:28,900 --> 00:03:32,100
And off you go right now.

55
00:03:32,100 --> 00:03:34,200
I know it sounds a little wonky because that's not the kind of thing.

56
00:03:34,200 --> 00:03:36,900
You're used to seeing on gpus, but you have to remember, gpus are

57
00:03:36,900 --> 00:03:38,700
basically just cpuc stays.

58
00:03:38,700 --> 00:03:42,500
They have different performance profiles in a number of ways, but they

59
00:03:42,500 --> 00:03:47,200
are incredibly powerful, especially desktop ones and they can do just

60
00:03:47,400 --> 00:03:48,300
crazy stuff.

61
00:03:48,300 --> 00:03:52,900
So building a linked list per pixel is a absolutely ludicrous thing

62
00:03:53,300 --> 00:03:58,500
to, to have said in the year, like, say 2000 but here 17 years later

63
00:03:59,300 --> 00:04:01,700
That is not a ludicrous thing to say at all and you could do it.

64
00:04:02,000 --> 00:04:06,500
Now, the downside of that is again their performance implications for

65
00:04:06,500 --> 00:04:10,800
using atomics and that way, the same kinds of parenting's occasions,

66
00:04:10,800 --> 00:04:14,700
that you have four CPUs and perhaps ones that you are quite worried

67
00:04:14,700 --> 00:04:17,899
about in the case of GPU rendering because you do have so many threads

68
00:04:17,899 --> 00:04:19,000
for writing so many pixels.

69
00:04:19,399 --> 00:04:23,000
You really don't want people locking up cache lines, probably all the

70
00:04:23,000 --> 00:04:23,400
time.

71
00:04:24,700 --> 00:04:27,600
And trying to get them for exclusive use in that way.

72
00:04:27,600 --> 00:04:31,200
You'd rather probably let it, you know, do whatever order it's going

73
00:04:31,200 --> 00:04:33,800
to do and allow things to overwrite each other as necessary.

74
00:04:34,400 --> 00:04:39,000
But at the end of the day, you know, it has to ensure certain amounts

75
00:04:39,000 --> 00:04:42,200
of information like depth ordering and stuff like that.

76
00:04:42,500 --> 00:04:46,700
So you know, it's not necessarily the end of the world but it does

77
00:04:46,700 --> 00:04:48,400
introduce a bunch of stuff like, okay.

78
00:04:48,400 --> 00:04:52,700
You're doing a lot more memory Ops now and you're storing a lot more

79
00:04:52,700 --> 00:04:54,000
stuff because you're

80
00:04:54,200 --> 00:04:58,200
I think every single thing that happened to this pixel and that could

81
00:04:58,200 --> 00:04:59,800
be, you know, hundreds of things.

82
00:05:00,000 --> 00:05:02,600
So again, you know, you end up in the situation where you have to

83
00:05:02,600 --> 00:05:05,200
start a to think about how many things for Pixel, we're going to store

84
00:05:05,200 --> 00:05:06,000
and all this other stuff.

85
00:05:06,700 --> 00:05:09,800
So atomics are kind of the general purpose way of getting more

86
00:05:09,800 --> 00:05:11,600
information there, but depth peeling.

87
00:05:13,200 --> 00:05:17,900
Is sort of a lighter version of that depth and it has the advantage of

88
00:05:17,900 --> 00:05:19,000
it works everywhere.

89
00:05:19,200 --> 00:05:21,200
It doesn't require atomics at all.

90
00:05:21,400 --> 00:05:24,300
So you don't have to worry about whether you're running on something

91
00:05:24,300 --> 00:05:26,000
that it supports atomics or not.

92
00:05:26,700 --> 00:05:29,500
And you don't have to worry about the performance implications, that

93
00:05:29,500 --> 00:05:33,800
atomics might have on any particular GPU that you're using.

94
00:05:34,500 --> 00:05:37,000
So what does depth feeling do well?

95
00:05:37,000 --> 00:05:41,700
What deaf peeling does is it says, I know that when I render, whatever

96
00:05:41,700 --> 00:05:42,700
I'm going to render

97
00:05:43,000 --> 00:05:46,900
I'm going to end up because in a z-buffer world, I'm going to end up

98
00:05:46,900 --> 00:05:48,200
with two things, right?

99
00:05:48,200 --> 00:05:51,400
I've got the the Z, or in this case, I'm going to call it depth

100
00:05:51,400 --> 00:05:53,500
because, you know, it could be whatever you want.

101
00:05:53,500 --> 00:05:57,300
Doesn't have to actually be a z-value, it's whatever you fed down the

102
00:05:57,300 --> 00:05:59,900
Z Channel, you got the

103
00:06:00,000 --> 00:06:03,800
Depth buffer and the color buffer being produced here in the case of

104
00:06:03,800 --> 00:06:04,500
our renderer.

105
00:06:04,700 --> 00:06:09,200
And so when you draw something into it like the hero you end up with a

106
00:06:09,600 --> 00:06:12,800
depth buffer that says we're, that was right.

107
00:06:12,800 --> 00:06:17,100
So all of the values in here on the depth buffer are however, far away

108
00:06:17,100 --> 00:06:19,900
from the camera, the hero was is recorded.

109
00:06:19,900 --> 00:06:24,000
And if there's something, you know, behind it that's a deeper depth

110
00:06:24,000 --> 00:06:24,900
value and so on,

111
00:06:26,000 --> 00:06:30,000
And we know that that works because we see that the result is correct,

112
00:06:30,000 --> 00:06:30,500
right?

113
00:06:30,600 --> 00:06:35,300
We see that things have gotten sorted properly, so we know that that

114
00:06:35,300 --> 00:06:38,300
depth, buffer is getting filled out properly and exist but we never

115
00:06:38,300 --> 00:06:40,000
actually use it for anything else.

116
00:06:40,200 --> 00:06:43,800
It's just there to do that sorting of the fact that you know, I drew

117
00:06:43,800 --> 00:06:47,400
these two things and I want the closer one to overwrite the further

118
00:06:47,400 --> 00:06:49,000
one you know

119
00:06:50,400 --> 00:06:54,400
But what you can also, Imagine is since you are producing a depth

120
00:06:54,400 --> 00:06:58,500
buffer, you then have the option of a using that depth buffer for

121
00:06:58,500 --> 00:07:04,900
something meaning after you produce a you know a depth buffer, during

122
00:07:04,900 --> 00:07:10,000
a render pass you could choose to do another render pass that actually

123
00:07:10,000 --> 00:07:13,500
reads that depth buffer and does something different with it, right.

124
00:07:13,500 --> 00:07:16,800
You don't have to make the depth buffer just to be something that's

125
00:07:16,800 --> 00:07:17,800
used for z-buffering.

126
00:07:17,800 --> 00:07:19,200
It can also be considered an

127
00:07:19,400 --> 00:07:23,600
But surface that gets it fed into future rendering stages because at

128
00:07:23,600 --> 00:07:28,200
the end of the day, just like you can render to multiple textures and

129
00:07:28,200 --> 00:07:32,300
then use those later and composite those onto the screen, you can have

130
00:07:32,300 --> 00:07:35,600
the depth buffer exist in multiple textures where you render one pass

131
00:07:35,600 --> 00:07:38,500
to one texture and one pass a depth electric and so you can end up

132
00:07:38,500 --> 00:07:45,400
with depth sources as well as depth you know, just used in inside a

133
00:07:45,400 --> 00:07:46,200
single pass.

134
00:07:48,500 --> 00:07:49,000
So

135
00:07:50,500 --> 00:07:53,700
What death feeling does is it says, well, let's take the depth buffer

136
00:07:55,200 --> 00:08:00,700
and let's feed it into another render pass as a maximum depth

137
00:08:00,700 --> 00:08:01,500
essentially.

138
00:08:01,500 --> 00:08:04,800
Or in this case, maybe you might say a minimum depth.

139
00:08:06,700 --> 00:08:12,100
What we're going to do is say, okay, what if we rendered these two

140
00:08:12,100 --> 00:08:15,100
things, you know, like, like you see, I've got the hero in the square.

141
00:08:15,900 --> 00:08:20,200
What if I wanted to have the information about both the hero,

142
00:08:20,300 --> 00:08:25,100
and the square behind the hero, you know, I want to have sort of two

143
00:08:28,100 --> 00:08:29,200
For lack of a better term.

144
00:08:29,500 --> 00:08:34,900
I wanted to have two slices of the world so that I can know what's

145
00:08:34,900 --> 00:08:40,500
immediately behind the hero in addition to just the hero and, you

146
00:08:40,500 --> 00:08:42,200
know, it wouldn't go any further than that.

147
00:08:42,200 --> 00:08:44,200
It just go one step back.

148
00:08:44,800 --> 00:08:47,600
But, you know, I just want those two pieces of information.

149
00:08:48,300 --> 00:08:51,700
Well, what I could do is I could render the scene again, right?

150
00:08:51,700 --> 00:08:53,600
Exactly the same scene, just render.

151
00:08:53,600 --> 00:08:55,600
It feed it to the GPU a second time.

152
00:08:56,700 --> 00:08:59,800
and the second time when I could do is I could

153
00:09:00,000 --> 00:09:02,200
Take this depth buffer, as input.

154
00:09:02,200 --> 00:09:06,700
So instead of being just the depth buffer, now it's the input and I

155
00:09:06,700 --> 00:09:08,800
use a separate depth buffer, right?

156
00:09:08,800 --> 00:09:12,800
So I have essentially two deaf buffers, I have depth buffer, 1 and

157
00:09:12,800 --> 00:09:18,800
depth, buffer to depth, buffer, one still looks like this but depth

158
00:09:18,800 --> 00:09:23,300
buffer to is going to only be used in this next pass here.

159
00:09:23,300 --> 00:09:27,100
And for this past, what I'm going to do is I'm going to set the Z

160
00:09:27,100 --> 00:09:29,800
function such that in addition to having

161
00:09:30,000 --> 00:09:32,300
having to be the closest Value so far.

162
00:09:32,500 --> 00:09:38,000
It also cannot be greater or cannot be closer to the viewer.

163
00:09:38,200 --> 00:09:40,400
Then whatever is in depth, buffer 1.

164
00:09:40,600 --> 00:09:43,900
Which means that all of these things that are here right now that we

165
00:09:43,900 --> 00:09:46,300
see in the front will go away.

166
00:09:46,300 --> 00:09:48,600
They'll get clipped out by this requirement.

167
00:09:49,100 --> 00:09:53,200
So what I'll end up with is just behind the hero, right?

168
00:09:53,200 --> 00:09:57,800
So if you imagine the hero was, you know, was kind of here behind the

169
00:09:57,800 --> 00:09:58,600
hero.

170
00:09:58,800 --> 00:09:59,900
I will have.

171
00:10:00,100 --> 00:10:05,800
That information about the rest of the square and behind the square.

172
00:10:05,800 --> 00:10:08,000
I will have whatever would have been buying the square, which maybe is

173
00:10:08,000 --> 00:10:09,500
nothing in this case, right?

174
00:10:09,700 --> 00:10:15,600
And so what I will draw on the screen is just this part here, right?

175
00:10:15,600 --> 00:10:18,100
It's just the part of the square that was behind the hero.

176
00:10:18,900 --> 00:10:21,200
And so, you can see why it's called death-dealing because I'm

177
00:10:21,200 --> 00:10:23,700
essentially peeling off the top layer.

178
00:10:24,600 --> 00:10:28,500
And going to the part just below it, right?

179
00:10:28,500 --> 00:10:29,400
One below it.

180
00:10:40,600 --> 00:10:47,100
And so, the reason that I'm interested in this is twofold.

181
00:10:47,900 --> 00:10:52,100
So the first reason that I'm interested in this is I'm just curious to

182
00:10:52,100 --> 00:10:52,700
know.

183
00:10:53,600 --> 00:10:59,100
Could we get rid of multi, sampling all together, meaning using

184
00:10:59,700 --> 00:11:03,400
turning on actually the the multi sample buffer, which is what we were

185
00:11:03,400 --> 00:11:03,900
using?

186
00:11:04,400 --> 00:11:06,900
Could we get rid of multi sample all together?

187
00:11:08,700 --> 00:11:10,000
By using deff peeling.

188
00:11:10,500 --> 00:11:13,400
I never thought of this before for some reason probably because I

189
00:11:13,400 --> 00:11:18,000
don't work on 2D stuff very much and maybe there's some papers out

190
00:11:18,000 --> 00:11:20,000
there that talk about doing exactly this.

191
00:11:21,100 --> 00:11:24,200
But basically what we were doing before is we were saying when we

192
00:11:24,200 --> 00:11:27,400
wanted to composite Sprites together, we just used multi sampling to

193
00:11:27,400 --> 00:11:31,200
do that for us and that handles edges pretty well, but it doesn't

194
00:11:31,200 --> 00:11:34,600
handle Alpha blending very well because again you only get as many

195
00:11:34,600 --> 00:11:37,300
Alpha steps as Jimmy,

196
00:11:38,200 --> 00:11:43,800
You only get as many Alpha steps as you have multi samples and you

197
00:11:43,800 --> 00:11:46,600
never have 256 over sampling.

198
00:11:46,600 --> 00:11:48,900
Which is how many bits per gun.

199
00:11:48,900 --> 00:11:51,800
You've got, at least in UHD.

200
00:11:51,800 --> 00:11:53,100
You're going to have more like 10.

201
00:11:54,400 --> 00:11:58,300
So it doesn't produce a very accurate blend when you do alpha blending

202
00:11:58,300 --> 00:11:58,900
in any way,

203
00:12:00,000 --> 00:12:02,000
If we did Death feeling instead.

204
00:12:02,000 --> 00:12:06,500
So instead of keeping eight jittered samples per pixel that are

205
00:12:06,500 --> 00:12:09,500
jittered spatially, we're going to Jitter them in-depth, essentially

206
00:12:09,500 --> 00:12:12,300
not Jitter, but keep them into to death slices.

207
00:12:12,800 --> 00:12:16,400
If we have two depth slices then I can just blend the front and back

208
00:12:16,400 --> 00:12:20,700
one together using the actual Alpha and it should be perfect, right?

209
00:12:25,700 --> 00:12:31,100
So this seems to handle both, the a the case of edges and the case of

210
00:12:31,400 --> 00:12:35,800
alpha things that Alpha out, very gracefully and armas.

211
00:12:35,800 --> 00:12:39,400
Assuming I'll find out some snafu as I get a little further in, as to

212
00:12:39,400 --> 00:12:40,300
why I'm wrong.

213
00:12:41,800 --> 00:12:47,300
Because it sure does seem like a little bit too easy to be true

214
00:12:47,300 --> 00:12:49,500
because why doesn't everyone just do this?

215
00:12:50,100 --> 00:12:55,100
And I don't know that everyone does because it doesn't sound like

216
00:12:55,100 --> 00:12:55,400
something.

217
00:12:55,400 --> 00:13:00,100
I've heard people do but, you know, I'm sure someone somewhere is done

218
00:13:00,100 --> 00:13:02,500
it but I just don't know why not everyone has done it.

219
00:13:02,500 --> 00:13:06,000
So there must be some reason why it doesn't work and we'll find out

220
00:13:06,000 --> 00:13:06,600
that reason.

221
00:13:07,000 --> 00:13:10,800
The other thing, if I go ahead and run the game here for you and of

222
00:13:10,800 --> 00:13:11,200
course, you'll have

223
00:13:11,400 --> 00:13:13,600
To excuse the fact that oh wait, no.

224
00:13:13,600 --> 00:13:20,700
I at the last minute last time I turned multi-sample back on so this

225
00:13:20,700 --> 00:13:24,700
is still with multi sampling on the other reason is because I noticed

226
00:13:25,900 --> 00:13:28,500
before, let me go ahead and hop down here.

227
00:13:29,200 --> 00:13:30,200
Nope, a little further.

228
00:13:32,600 --> 00:13:33,200
Let's see.

229
00:13:33,400 --> 00:13:34,300
Okay, there you go.

230
00:13:34,900 --> 00:13:37,900
There is this weird effect that I would playing with.

231
00:13:38,500 --> 00:13:41,000
It was it was sort of an accident, you know.

232
00:13:41,000 --> 00:13:43,800
I was just sort of showing some stuff about the near clipping plane

233
00:13:44,300 --> 00:13:48,900
and I kind of like this weird effect that was happening.

234
00:13:49,100 --> 00:13:57,000
Where if you kind of like if you progressively clip out the Z buffer,

235
00:13:58,000 --> 00:14:01,200
if you just set the near clipping plane to something that's pretty far

236
00:14:01,200 --> 00:14:02,000
out, actually

237
00:14:02,400 --> 00:14:07,200
Let it clip, it does this weird thing and I was kind of interested in

238
00:14:07,200 --> 00:14:10,800
exploring that affect a little bit and actually maybe making it into a

239
00:14:10,800 --> 00:14:12,300
real effect that we do.

240
00:14:12,500 --> 00:14:17,100
So as you kind of go down a stairwell and you hop to the lower level,

241
00:14:17,200 --> 00:14:21,100
it does something like that, just for fun, right?

242
00:14:21,100 --> 00:14:24,400
Like a cleaner version of that effect, that doesn't have so many

243
00:14:24,400 --> 00:14:26,000
artifacts, right?

244
00:14:26,000 --> 00:14:27,100
As it flutters in.

245
00:14:28,600 --> 00:14:31,200
And there's a number of ways that I think we could do that.

246
00:14:31,500 --> 00:14:32,900
I'm just interested to see.

247
00:14:33,500 --> 00:14:38,200
So I felt like at that point that was another really good argument for

248
00:14:38,200 --> 00:14:41,400
having deaf peeling because if I have deaf peeling, then I can make

249
00:14:41,400 --> 00:14:43,700
that Fade Out happen properly, right.

250
00:14:44,900 --> 00:14:48,500
And you know, there's a little bit of an issue with the deaf peeling

251
00:14:48,500 --> 00:14:50,700
that I can imagine Jimmy.

252
00:14:53,800 --> 00:14:54,500
In this case.

253
00:14:54,500 --> 00:14:59,900
So I don't really know how good that's really going to be.

254
00:15:00,600 --> 00:15:04,300
And the reason for that is, I'm just not sure if I need more than one

255
00:15:04,300 --> 00:15:06,900
depth peel to really make that work.

256
00:15:07,900 --> 00:15:10,900
And at that point, you know, if you're going to do two, three, four

257
00:15:10,900 --> 00:15:14,200
depth, feels at that point, it kind of sounds more like you just want

258
00:15:14,200 --> 00:15:19,100
atomics, you know, but I'm really curious to see what we could get

259
00:15:19,100 --> 00:15:25,400
away with with only one depth peel and just to sort of also motivate

260
00:15:25,400 --> 00:15:28,600
this a little bit if I go over to

261
00:15:30,000 --> 00:15:32,600
My, what was it?

262
00:15:32,600 --> 00:15:37,200
The opengl layer here and I turn off the multi sampling.

263
00:15:42,100 --> 00:15:42,900
Let's go ahead here.

264
00:15:44,700 --> 00:15:48,300
So here is what it looks like currently in a without the multi

265
00:15:48,300 --> 00:15:48,900
sampling.

266
00:15:49,500 --> 00:15:53,400
As you can see with the with the multi sampling off and I also

267
00:15:53,400 --> 00:15:56,400
probably guess I should take Alpha to coverage off.

268
00:16:08,400 --> 00:16:12,100
If I have all of this stuff turned off, you can actually see.

269
00:16:12,500 --> 00:16:14,400
This is what you know the game looks like.

270
00:16:14,400 --> 00:16:18,400
Without multi sampling on, you can see that, you know, we were

271
00:16:18,400 --> 00:16:23,300
definitely relying on the multi sampling tremendously because once you

272
00:16:23,300 --> 00:16:27,500
start sorting everything with the z-buffer rather than your own sort

273
00:16:27,500 --> 00:16:31,000
of manual versions of sorting, right?

274
00:16:31,000 --> 00:16:32,900
You end up in a situation where

275
00:16:33,100 --> 00:16:38,500
You no longer have the ability to just use Alpha as this thing that

276
00:16:38,500 --> 00:16:43,200
magically works because the drawing order is now arbitrary, right?

277
00:16:43,200 --> 00:16:46,800
Because you're letting the z-buffer, sort it and so everything like

278
00:16:47,100 --> 00:16:52,400
you know, shadows and and out, you know, the edges of things if you

279
00:16:52,400 --> 00:16:56,800
just throw things down in arbitrary order which we are, you then can't

280
00:16:57,200 --> 00:16:59,300
use any of those effects properly anymore, right?

281
00:16:59,300 --> 00:17:02,900
So you need some scheme to handle this and there's, you know,

282
00:17:03,000 --> 00:17:06,000
No various ones you could do the multi sample, buffer is one of them,

283
00:17:06,000 --> 00:17:10,500
but it has that really big drawback that I just pointed out, which is

284
00:17:10,500 --> 00:17:13,400
that the alpha is only as many steps as multi sample buffer on this

285
00:17:13,400 --> 00:17:13,700
card.

286
00:17:13,700 --> 00:17:15,200
It was eight another cards.

287
00:17:15,200 --> 00:17:17,099
It might be 16 but that's the mat.

288
00:17:17,099 --> 00:17:22,099
That's as much as you're going to get in terms of alpha steps and of

289
00:17:22,099 --> 00:17:24,700
course it costs that many to do.

290
00:17:24,700 --> 00:17:29,900
So if you it costs you know, 16 samples you're actually shading those

291
00:17:29,900 --> 00:17:30,600
samples.

292
00:17:30,800 --> 00:17:32,900
So you know unless you switch to deferred rendering

293
00:17:33,000 --> 00:17:35,400
Or something like this, you have to pay for those two.

294
00:17:35,400 --> 00:17:39,700
So again it's you know, kind of pushes you towards having to deal with

295
00:17:39,900 --> 00:17:42,000
more substantial stuff there.

296
00:17:42,600 --> 00:17:47,100
So again like looking at this with the mother sample, buffer off, you

297
00:17:47,100 --> 00:17:51,200
can see why it's like, okay, if depth peeling were to just work, we

298
00:17:51,200 --> 00:17:56,000
could avoid the multi sample situation altogether and it would be

299
00:17:56,000 --> 00:17:59,800
roughly 2x cost as opposed to.

300
00:18:00,000 --> 00:18:03,500
So you need X cos now, that's not really a completely fair comparison

301
00:18:04,400 --> 00:18:07,000
but it's sort of a fair comparison, right?

302
00:18:12,000 --> 00:18:12,600
So yeah.

303
00:18:13,400 --> 00:18:17,400
All right so let's take a look at how we're going to do that, right?

304
00:18:17,700 --> 00:18:23,200
How would we do that if we turn all of this stuff off so we turn off.

305
00:18:23,200 --> 00:18:26,300
Multi sampling, we turn off Alpha 2 coverage.

306
00:18:26,600 --> 00:18:32,500
We turn off the switching of the Alpha 2 1 as it goes and we're just

307
00:18:32,500 --> 00:18:36,400
like, all right, our only goal here, we're going to ignore the weird

308
00:18:36,400 --> 00:18:38,600
flattery effect thing that I want to play with later.

309
00:18:38,800 --> 00:18:41,500
And we're just saying, look, we really

310
00:18:41,700 --> 00:18:46,300
Have some way of just fixing just the alpha compositing part of this.

311
00:18:46,600 --> 00:18:47,800
How are we going to do it?

312
00:18:48,800 --> 00:18:51,100
Well I threw in some stuff at the end of last stream.

313
00:18:52,500 --> 00:18:53,500
But, I'll go over it again here.

314
00:18:53,500 --> 00:18:56,800
It's just really, it's really basic but basically, you know, but what

315
00:18:56,800 --> 00:19:01,900
I did is I said, well, okay, let's just make a version of our existing

316
00:19:01,900 --> 00:19:05,200
Shader program that we had

317
00:19:06,500 --> 00:19:09,500
And let's allow ourselves to pass in a Boolean that just says whether

318
00:19:09,500 --> 00:19:12,400
we want deaf peeling on or not, right?

319
00:19:12,500 --> 00:19:18,100
Because what what's going to happen here is we don't really need to be

320
00:19:18,100 --> 00:19:20,300
comparing against the depth buffer.

321
00:19:20,300 --> 00:19:22,700
The first time through, right?

322
00:19:23,400 --> 00:19:26,500
Because the first time through, we're just going to draw the scene as

323
00:19:26,500 --> 00:19:27,100
normal.

324
00:19:27,600 --> 00:19:31,000
The only time we need to start looking at a secondary depth buffer and

325
00:19:31,000 --> 00:19:34,400
incurring that extra cost of reading from a second death, bummer.

326
00:19:36,900 --> 00:19:40,100
Is going to be the second time through when we need to peel away that

327
00:19:40,100 --> 00:19:42,100
top bit.

328
00:19:42,400 --> 00:19:46,100
So we have the ability to compile this two times now and we do compile

329
00:19:46,100 --> 00:19:50,300
to X and the second time we compile it, we don't change anything about

330
00:19:50,300 --> 00:19:51,200
the vertex Shader, right.

331
00:19:51,200 --> 00:19:54,800
You can see the vertex Shader pretty much stays the same the entire

332
00:19:54,800 --> 00:19:55,300
time.

333
00:19:55,500 --> 00:19:58,900
But what you see here in the fragment code is that we've got a depth

334
00:19:58,900 --> 00:19:59,700
peel section.

335
00:19:59,700 --> 00:20:03,700
And what that death peel section does is says okay, why don't you do a

336
00:20:03,700 --> 00:20:04,800
textile fetch?

337
00:20:05,000 --> 00:20:09,900
Out of the depths texture that we're passing in here.

338
00:20:09,900 --> 00:20:11,600
This new option for Deaf peeling.

339
00:20:11,600 --> 00:20:17,100
And what I want you to do is I want you to check the fragment Z to

340
00:20:17,100 --> 00:20:22,900
make sure that the fragment Z is actually going to be different than

341
00:20:22,900 --> 00:20:26,300
the one that you recorded for that front pass.

342
00:20:26,300 --> 00:20:27,000
Right?

343
00:20:27,000 --> 00:20:30,600
And since we're only doing one depth feel here, we actually could make

344
00:20:30,600 --> 00:20:34,000
that be not equal to but in order to set it up.

345
00:20:34,000 --> 00:20:34,900
So you know if we

346
00:20:35,000 --> 00:20:38,500
Decide to do three depth peels, for some reason we could use this

347
00:20:38,500 --> 00:20:44,800
Shader, we want to basically keep being behind the one that we use the

348
00:20:44,800 --> 00:20:46,200
previous time, right?

349
00:20:46,900 --> 00:20:50,300
So what we're saying is any time the fragment Z that we were going to

350
00:20:50,300 --> 00:20:55,400
use is closer to the viewer or at the same depth of the viewer of what

351
00:20:55,400 --> 00:20:56,800
was already in our buffer.

352
00:20:56,800 --> 00:20:59,600
We want to discard this, don't do any further work.

353
00:21:00,100 --> 00:21:07,000
Sample from the fragment Shader texture that we were using before,

354
00:21:07,000 --> 00:21:07,900
like the actual image.

355
00:21:07,900 --> 00:21:12,700
Don't don't do any of that don't do the blend or do anything end right

356
00:21:12,700 --> 00:21:13,100
now.

357
00:21:14,200 --> 00:21:14,500
Yeah.

358
00:21:16,200 --> 00:21:18,100
So that's it.

359
00:21:18,100 --> 00:21:21,300
And that's all that we really did.

360
00:21:21,600 --> 00:21:26,300
So now we have to do the rest of the work that's involved here and

361
00:21:26,300 --> 00:21:28,200
it's a little bit more complicated, right?

362
00:21:28,300 --> 00:21:30,900
Because now would we have to do is here's our render Loop, right?

363
00:21:30,900 --> 00:21:35,500
This is the thing that actually pushes everything to opengl ugly as it

364
00:21:35,500 --> 00:21:39,800
is because we don't have any texture packing here.

365
00:21:39,800 --> 00:21:41,800
So, it's a pretty gross, right?

366
00:21:41,800 --> 00:21:45,800
You can see that we've got this, these bitmap changes are just absurd.

367
00:21:46,000 --> 00:21:52,200
A many and yeah, that is something that we probably will have to start

368
00:21:52,200 --> 00:21:54,100
addressing especially with the step feeling.

369
00:21:54,300 --> 00:21:55,800
We may be forced into addressing it.

370
00:21:55,800 --> 00:21:58,900
We haven't had to address it because our frame rate still 60 frames a

371
00:21:58,900 --> 00:21:59,300
second.

372
00:21:59,300 --> 00:22:04,300
Even with doing these this may texture changes on a card that really

373
00:22:04,300 --> 00:22:06,000
isn't capable of doing texture changes.

374
00:22:06,000 --> 00:22:11,900
Very efficiently but yeah we'll see.

375
00:22:11,900 --> 00:22:15,000
As we do the death peel that's going to double the cost of that,

376
00:22:15,000 --> 00:22:15,300
right?

377
00:22:15,300 --> 00:22:15,700
Which is

378
00:22:15,900 --> 00:22:17,400
Is going to be expensive.

379
00:22:19,100 --> 00:22:22,400
All right, so this is going to get more complicated now because what's

380
00:22:22,400 --> 00:22:24,000
going to happen is this render Loop.

381
00:22:24,000 --> 00:22:31,500
Now effectively has to operate in such a way as to sort of properly

382
00:22:31,500 --> 00:22:35,900
prepare and Target these render buffers, right?

383
00:22:36,100 --> 00:22:41,800
It has to be able to do, you know, multiple passes and those passes

384
00:22:41,800 --> 00:22:48,700
have to work properly with the, you know, the the saving the original

385
00:22:48,900 --> 00:22:49,500
Buffer.

386
00:22:49,600 --> 00:22:53,100
And then setting up that debt by threats input for the next pass.

387
00:22:55,000 --> 00:22:58,300
So we can kind of cheese this a little bit for now, like, there's ways

388
00:22:58,300 --> 00:23:03,600
we could make this sort of a more virtuous if you will render system,

389
00:23:03,600 --> 00:23:08,700
which actually encodes more logic into it, you know, more fanciness

390
00:23:08,700 --> 00:23:09,400
into it.

391
00:23:09,700 --> 00:23:15,900
But you know what, we can do for a Cheesy version of it is just have

392
00:23:15,900 --> 00:23:21,200
some way of encoding essentially like a cheat, right?

393
00:23:22,200 --> 00:23:24,600
Like something where we basically say, oh,

394
00:23:24,800 --> 00:23:28,800
You know, here's the place in the render buffer that we're going to

395
00:23:28,800 --> 00:23:33,200
start a group of things that gets rendered twice in this way and would

396
00:23:33,200 --> 00:23:34,800
just put a marker and then another marker.

397
00:23:34,800 --> 00:23:36,900
And that's like all you get, right?

398
00:23:38,200 --> 00:23:40,100
So we're not going to try to do something fancy.

399
00:23:40,100 --> 00:23:43,500
Like create, you know, some kind of a dependency graph where we're

400
00:23:43,500 --> 00:23:48,300
like, okay, you know, here's all the stuff that needs to happen and

401
00:23:48,300 --> 00:23:51,000
you can sort it out and figure out how you have to do it and we can do

402
00:23:51,000 --> 00:23:54,200
kind of fancy stuff or we have many different passes and all that

403
00:23:54,200 --> 00:23:54,600
stuff.

404
00:23:54,700 --> 00:23:57,200
since we're just trying to figure out, if this effect is even worth

405
00:23:57,200 --> 00:23:59,900
it, I'm going to do something more basic than

406
00:24:00,200 --> 00:24:00,800
Right.

407
00:24:02,400 --> 00:24:06,100
All right, so what I'm going to do here is I'm going to have something

408
00:24:06,800 --> 00:24:10,600
and in fact, you know what, I could look at what I could do as well as

409
00:24:10,600 --> 00:24:15,000
sort of like make something like this render group entry type

410
00:24:15,000 --> 00:24:16,200
rendering tree depth, clear.

411
00:24:16,700 --> 00:24:21,500
I can just make a couple of these right and maybe I'll sort of put

412
00:24:21,500 --> 00:24:25,200
these up at the top because they're sort of a little Saucy ER in that

413
00:24:25,200 --> 00:24:25,600
sense.

414
00:24:26,900 --> 00:24:29,800
And I'm going to go ahead and change these.

415
00:24:30,000 --> 00:24:35,400
To like render entry like begin, you know, peels or something like

416
00:24:35,400 --> 00:24:40,400
this and end peels.

417
00:24:44,700 --> 00:24:46,800
And so, one of the interesting things about this, right?

418
00:24:46,800 --> 00:24:51,600
As you can see, we have the header and that's what we're iterating

419
00:24:51,600 --> 00:24:52,200
over.

420
00:24:52,800 --> 00:24:57,900
And so what we could do is just set a Boolean here and say, you know,

421
00:24:58,400 --> 00:25:01,500
peel count or actually help, you know, just do a peel, count equals

422
00:25:01,500 --> 00:25:02,200
zero.

423
00:25:03,400 --> 00:25:06,200
And what I could do is say like okay when we're going to begin the

424
00:25:06,200 --> 00:25:10,700
depth, feels what I need to do is save the like Pele header or, you

425
00:25:10,700 --> 00:25:13,300
know, peel header restore.

426
00:25:14,600 --> 00:25:15,100
Right?

427
00:25:15,600 --> 00:25:19,300
And what I can do is when we get to render entry, begin peels, I can

428
00:25:19,300 --> 00:25:19,800
just say well.

429
00:25:19,800 --> 00:25:24,900
OK, let's save where we were in the command stream at that point.

430
00:25:26,100 --> 00:25:33,500
Okay, then when I get to the end marker, what I can do is go, oh, all

431
00:25:33,500 --> 00:25:34,100
right.

432
00:25:34,200 --> 00:25:38,000
Well, if the peel count is zero,

433
00:25:41,300 --> 00:25:44,000
Then that means I haven't done the depth of field yet.

434
00:25:44,100 --> 00:25:48,300
So in here, I could do all of the state set up that I need for

435
00:25:48,300 --> 00:25:50,200
restarting, right?

436
00:25:51,700 --> 00:25:54,800
But if I have done the death peel yet then I don't really have to do

437
00:25:54,800 --> 00:25:55,400
anything.

438
00:25:55,600 --> 00:25:57,300
I can just let it fall through.

439
00:25:57,400 --> 00:26:02,800
So when I come through or I'll add to the pill count and then let it

440
00:26:02,800 --> 00:26:08,500
you know the next time it hits and peels it'll just fall through.

441
00:26:08,700 --> 00:26:10,900
So basically what I'm doing is I'm creating a little jump.

442
00:26:11,100 --> 00:26:13,200
Struction essentially, in our render buffer.

443
00:26:13,600 --> 00:26:15,600
So I'm going through all the things to render.

444
00:26:16,300 --> 00:26:19,400
When I hit the begin peel, I say, okay, this is the, this is like the

445
00:26:19,400 --> 00:26:21,900
while loop location start, right?

446
00:26:22,300 --> 00:26:23,200
I get to the end Peels.

447
00:26:23,200 --> 00:26:26,500
And I'm like, Okay, jump back to where that was, do it again.

448
00:26:26,500 --> 00:26:27,300
Do everything again.

449
00:26:27,600 --> 00:26:30,300
And when I get to the end the next time I've looked at the increment

450
00:26:30,300 --> 00:26:31,200
and go okay.

451
00:26:31,400 --> 00:26:34,200
The incrementer now says that I've done as many deaf people's as I

452
00:26:34,200 --> 00:26:38,400
want in this case, only one fall through and continue doing the rest

453
00:26:38,400 --> 00:26:40,900
of the rendering like the debug HUD and stuff which isn't going to get

454
00:26:41,000 --> 00:26:42,700
It depth peeled, right?

455
00:26:44,100 --> 00:26:48,500
So when I hit the render entry and peels, what I want to do is say,

456
00:26:48,500 --> 00:26:51,700
okay when I see that, I've I'm on that first peel.

457
00:26:51,700 --> 00:26:53,100
So I have to re jump.

458
00:26:53,100 --> 00:26:58,000
I'm going to set the header at to peel how to restore and that will

459
00:26:58,000 --> 00:26:59,200
restart the loop, right?

460
00:26:59,200 --> 00:26:59,800
That'll jump me.

461
00:27:00,000 --> 00:27:00,700
To where I am.

462
00:27:02,100 --> 00:27:04,000
And that should just work, right?

463
00:27:05,600 --> 00:27:08,500
So looking at that.

464
00:27:13,200 --> 00:27:16,900
We now kind of have to think about the other side of this, which is

465
00:27:16,900 --> 00:27:20,900
what do we want to do in these two different death?

466
00:27:20,900 --> 00:27:24,400
Peels because now we've got sort of two separate things that we want

467
00:27:24,400 --> 00:27:24,800
to have happen.

468
00:27:24,800 --> 00:27:30,100
And so what we're going to do here is we're going to say, well, you

469
00:27:30,100 --> 00:27:37,200
know, substantively speaking really all we're trying to do is we're

470
00:27:37,200 --> 00:27:39,700
just trying to produce a front buffer.

471
00:27:39,700 --> 00:27:43,000
That's exactly the same as everything else that we've ever done.

472
00:27:43,200 --> 00:27:47,400
Before just it's just a single rendered image that we're going to say

473
00:27:47,400 --> 00:27:48,200
to the screen.

474
00:27:49,000 --> 00:27:53,400
The only difference is we're going to track the alpha of that, right?

475
00:27:54,600 --> 00:27:59,600
And since we've got that Z buffer on the alpha of that we're not you

476
00:27:59,600 --> 00:27:59,800
know what?

477
00:27:59,800 --> 00:28:00,600
I need diagram.

478
00:28:03,500 --> 00:28:03,700
Right?

479
00:28:03,700 --> 00:28:06,600
So all we're trying to do here is produce to pictures

480
00:28:07,700 --> 00:28:11,000
Right, the front and the back picture.

481
00:28:12,600 --> 00:28:16,000
Now the front picture is basically the same as what we've always been

482
00:28:16,000 --> 00:28:16,600
drawing, right?

483
00:28:16,600 --> 00:28:18,100
It's basically this.

484
00:28:20,100 --> 00:28:23,800
The only difference between this and what we want to produce is we're

485
00:28:23,800 --> 00:28:27,800
going to turn off the blending and in fact, you know what, let me just

486
00:28:27,800 --> 00:28:29,800
do that so you can see what I'm talking about.

487
00:28:34,600 --> 00:28:39,800
So here's our GL and able GL blend and here's our blend Funk where

488
00:28:39,800 --> 00:28:42,700
we're saying, here's what we want, you put in, that's just going to go

489
00:28:42,700 --> 00:28:43,800
away, right?

490
00:28:43,800 --> 00:28:46,900
What we're going to say instead is no, you're not going to get to

491
00:28:46,900 --> 00:28:47,500
blend.

492
00:28:48,200 --> 00:28:50,400
There is no blending allowed.

493
00:28:51,400 --> 00:28:52,000
Let me see here.

494
00:28:52,000 --> 00:28:54,200
Jill blend.

495
00:28:58,900 --> 00:29:00,700
Yeah, there's no blending allowed.

496
00:29:00,700 --> 00:29:05,800
You don't get to blend, sorry for you and you're just going to write

497
00:29:05,800 --> 00:29:07,100
the actual stuff.

498
00:29:07,300 --> 00:29:11,500
The actual values that you have directly into the frame buffer and

499
00:29:11,500 --> 00:29:13,400
store them, right?

500
00:29:14,100 --> 00:29:16,000
If that out, will I do this?

501
00:29:18,500 --> 00:29:24,600
Okay, so now what we can see is this is the actual front picture and

502
00:29:24,600 --> 00:29:27,200
you can even see where there's like Alpha bugs in the source art,

503
00:29:27,200 --> 00:29:27,400
right?

504
00:29:27,400 --> 00:29:31,400
There's a pixel that's Alpha is is set to like, you know, 254 or

505
00:29:31,400 --> 00:29:32,600
something like that, right?

506
00:29:33,400 --> 00:29:36,800
But what you can see here is anywhere that the alpha isn't perfectly

507
00:29:36,800 --> 00:29:37,400
zero.

508
00:29:38,300 --> 00:29:39,600
We actually store the value.

509
00:29:39,600 --> 00:29:43,900
And that includes things like, you know, the Shadow and the, the, you

510
00:29:43,900 --> 00:29:47,400
know, the sort of alpha doubt softer pixels around.

511
00:29:47,900 --> 00:29:50,500
The edge of the hero and blah, blah, blah blah, right?

512
00:29:50,600 --> 00:29:52,000
But this is the front picture.

513
00:29:52,000 --> 00:29:56,800
These are the front, most Sprite pieces that we can see.

514
00:29:57,200 --> 00:29:59,900
And I've just turned off the alpha blending, so you can never

515
00:30:00,000 --> 00:30:05,100
See anything behind the the front most color before we were seeing

516
00:30:05,100 --> 00:30:06,600
Behind These colors, right?

517
00:30:06,600 --> 00:30:08,800
Especially when the multi sample was on and proper.

518
00:30:09,600 --> 00:30:10,900
We were seeing what was behind it.

519
00:30:10,900 --> 00:30:14,000
Sort of alpha faded in, but here, we're just seeing that actual front

520
00:30:14,000 --> 00:30:14,900
picture, right?

521
00:30:16,200 --> 00:30:18,400
So, what we want to do is we just want to produce that, which

522
00:30:18,400 --> 00:30:20,500
obviously we can't cuz I just showed it to you, right?

523
00:30:20,500 --> 00:30:23,500
So that's just if we didn't change anything, that's what we're going

524
00:30:23,500 --> 00:30:25,800
to get and that front picture, right?

525
00:30:25,900 --> 00:30:29,900
Has, what is in the front and it actually has the color.

526
00:30:30,000 --> 00:30:32,600
And the alpha value of what should be in the front and that Alpha

527
00:30:32,600 --> 00:30:33,700
value may be very low.

528
00:30:33,700 --> 00:30:36,100
It may be like one two, three four, right?

529
00:30:36,200 --> 00:30:37,500
Other places is 255.

530
00:30:37,500 --> 00:30:40,600
It's full, on other places, it's quite low and that's the front

531
00:30:40,600 --> 00:30:44,100
bumper, but we no longer draw anything behind the front buffer in that

532
00:30:44,100 --> 00:30:49,000
first pass, then in the back, we draw what's just behind it, right?

533
00:30:49,000 --> 00:30:53,100
So again you know that Fringe that was right here for example, right?

534
00:30:53,700 --> 00:30:57,100
You know that back buffer is going to have whatever was there in that

535
00:30:57,100 --> 00:30:57,800
Fringe.

536
00:30:59,200 --> 00:31:00,200
One step back.

537
00:31:01,600 --> 00:31:01,900
Right.

538
00:31:01,900 --> 00:31:04,500
And it's also going to have the alpha value, but in this case, we

539
00:31:04,500 --> 00:31:07,800
can't do anything with that Alpha value because we can't draw anything

540
00:31:07,800 --> 00:31:08,700
behind the back buffer.

541
00:31:08,700 --> 00:31:10,900
If we did another depth Bill, we could write.

542
00:31:11,700 --> 00:31:15,500
And so all we're going to do at the end right after we produce these

543
00:31:15,500 --> 00:31:19,700
two images is we're just going to combine them together in a single

544
00:31:19,700 --> 00:31:22,700
pass that just Alpha Composites them, it's going to read.

545
00:31:22,700 --> 00:31:26,200
One thing from this image and one thing from this image and then blend

546
00:31:26,200 --> 00:31:27,600
them together, right?

547
00:31:28,000 --> 00:31:31,000
Just 100% straight forward.

548
00:31:32,000 --> 00:31:33,800
Alpha blend of the two.

549
00:31:34,000 --> 00:31:38,100
It's going to take the RGB from this and the Alpha from this and use

550
00:31:38,100 --> 00:31:39,600
it to blend with the RGB of this.

551
00:31:39,600 --> 00:31:41,800
And the alpha of this will get thrown away.

552
00:31:42,700 --> 00:31:46,100
Now we could use the Alpha from that for something else and maybe we

553
00:31:46,100 --> 00:31:50,500
will if we have some kind of effects, we can do that require some

554
00:31:50,500 --> 00:31:51,200
forth.

555
00:31:52,200 --> 00:32:00,400
Well, some fifth component right rgba and blah but we would only get

556
00:32:00,400 --> 00:32:01,100
it on the back.

557
00:32:01,400 --> 00:32:01,600
Buffer.

558
00:32:01,600 --> 00:32:05,500
So unclear that that is really all that compelling.

559
00:32:06,100 --> 00:32:10,500
Probably it's just a waste and we probably could even set that buffer

560
00:32:10,500 --> 00:32:13,400
to just be RGB and not have it RNA.

561
00:32:14,100 --> 00:32:18,100
If it turned out to somehow be faster on in different situations, all

562
00:32:18,100 --> 00:32:18,500
right.

563
00:32:20,000 --> 00:32:20,700
So, there you go.

564
00:32:21,600 --> 00:32:22,900
That is what we are doing.

565
00:32:23,900 --> 00:32:28,400
And so, let me go ahead and re-enable those and what we want to do

566
00:32:28,400 --> 00:32:36,000
here, let me first go to the render group and I'll just sort of get

567
00:32:36,000 --> 00:32:40,000
these, these sausage gentleman right here, didn't have a didn't have a

568
00:32:40,000 --> 00:32:41,000
enums for them.

569
00:32:45,400 --> 00:32:45,900
Here we go.

570
00:32:47,400 --> 00:32:50,500
And so you know we're not using this at all yet, but this is just sort

571
00:32:50,500 --> 00:32:52,300
of sketching it into place.

572
00:32:52,700 --> 00:32:56,400
So what we can do here is the first time through, we should be pretty

573
00:32:56,400 --> 00:32:58,000
much good to go, right?

574
00:32:58,000 --> 00:32:59,800
So the first time we hit begin.

575
00:33:00,000 --> 00:33:00,900
Pain pills.

576
00:33:01,300 --> 00:33:05,000
Probably we can just leave all the state, the same because what we

577
00:33:05,000 --> 00:33:08,500
want to do is exactly what's already getting done render to a frame

578
00:33:08,500 --> 00:33:11,200
buffer and a depth, buffer ready to a frame buffer.

579
00:33:11,200 --> 00:33:12,700
That's a color buffer and of depth buffer.

580
00:33:12,800 --> 00:33:15,100
That's just the front most stuff.

581
00:33:15,100 --> 00:33:18,200
And that is what should happen right here.

582
00:33:18,800 --> 00:33:23,700
So, all we need to do now is swap that around, right?

583
00:33:23,900 --> 00:33:27,100
When we hit the peel count and you know, we're going to need to do a

584
00:33:27,100 --> 00:33:28,000
restore here.

585
00:33:28,000 --> 00:33:29,800
So just insert

586
00:33:30,000 --> 00:33:31,900
And he'll count equals 1.

587
00:33:35,700 --> 00:33:39,300
We're going to have to now swap around when we jump back and render

588
00:33:39,300 --> 00:33:39,500
everything.

589
00:33:39,500 --> 00:33:43,900
A second time, we're going to have to fuss with the frame buffer,

590
00:33:44,200 --> 00:33:44,800
right?

591
00:33:44,900 --> 00:33:48,000
We're going to have to fuss with the frame buffer, and do a different,

592
00:33:49,400 --> 00:33:51,100
a different operation here, right?

593
00:33:51,400 --> 00:33:55,300
And so what we can probably say is, all right, there's the max render

594
00:33:55,300 --> 00:34:00,400
Target index thing, and there's this sort of render group render entry

595
00:34:00,400 --> 00:34:01,900
blend Target stuff.

596
00:34:02,500 --> 00:34:03,500
We don't

597
00:34:03,600 --> 00:34:07,800
We probably want to do that at the moment, right?

598
00:34:08,500 --> 00:34:11,199
Because that was allowing us to program.

599
00:34:11,199 --> 00:34:13,500
How this worked on the back end.

600
00:34:15,600 --> 00:34:19,000
From the render group and what I want to do right now is just sort of

601
00:34:19,400 --> 00:34:21,600
do it myself in here specifically.

602
00:34:21,600 --> 00:34:23,100
So it's only doing one thing.

603
00:34:24,199 --> 00:34:26,699
So I'm going to stub this out for now, right?

604
00:34:26,900 --> 00:34:29,100
I'm going to say that we get to render targets.

605
00:34:29,900 --> 00:34:32,800
They're going to be rendered, Target zero and rendered Target one.

606
00:34:35,000 --> 00:34:36,600
And oh, sorry.

607
00:34:38,699 --> 00:34:38,900
Ready.

608
00:34:38,900 --> 00:34:39,800
Targets during intertwine.

609
00:34:39,800 --> 00:34:41,199
That's a Mack sennett Target index.

610
00:34:41,199 --> 00:34:42,199
Not account.

611
00:34:42,400 --> 00:34:43,500
So 0 and 1.

612
00:34:44,600 --> 00:34:48,500
It will create these for me, right?

613
00:34:49,699 --> 00:34:50,400
And

614
00:34:52,000 --> 00:34:54,800
I don't know if Global frame buffer count.

615
00:34:58,600 --> 00:35:01,600
Excuse me, I'm pretty sure it creates one for each.

616
00:35:01,600 --> 00:35:02,600
Yeah, it does.

617
00:35:03,600 --> 00:35:08,500
So it's just going to create two frame buffers now and they won't be

618
00:35:08,500 --> 00:35:11,500
multi sampled anymore and hopefully we can ditch multi sampling all

619
00:35:11,500 --> 00:35:12,800
together, right?

620
00:35:13,600 --> 00:35:17,900
So they won't be multi sampling anymore and then they'll get set up

621
00:35:18,400 --> 00:35:20,800
and we'll be ready to go, right?

622
00:35:21,300 --> 00:35:25,000
So now what I need to do is when I come through here, I need to switch

623
00:35:25,300 --> 00:35:27,700
which frame buffer, I'm targeting

624
00:35:28,600 --> 00:35:32,200
I need to bind a different frame buffer, right?

625
00:35:32,500 --> 00:35:34,200
Then I would have otherwise

626
00:35:35,800 --> 00:35:37,100
So let's jump through here.

627
00:35:38,700 --> 00:35:40,900
You can see we never bind a framework because there's only one frame

628
00:35:40,900 --> 00:35:42,500
buffer to bind at this point.

629
00:35:43,100 --> 00:35:47,800
So, what I want to do is I want to essentially control that here.

630
00:35:49,600 --> 00:35:50,200
So you can see.

631
00:35:50,200 --> 00:35:51,200
All right, I'm going to do it.

632
00:35:51,200 --> 00:35:52,600
Opengl buying frame buffer.

633
00:35:52,700 --> 00:35:54,200
When I hit peel count equals 0.

634
00:35:54,200 --> 00:35:57,200
That means I finished drawing the front frame buffer and now I want to

635
00:35:57,200 --> 00:35:59,700
draw the back frame buffer.

636
00:36:00,000 --> 00:36:03,600
I'm going to switch which frame buffer I'm looking at like so.

637
00:36:04,800 --> 00:36:09,800
And then going to take a look at opengl bind frame, buffer here and

638
00:36:10,000 --> 00:36:14,100
and say okay when you're done with that depth deal, I want you to go

639
00:36:14,100 --> 00:36:19,100
back and do the previous, you know, draw on the front buffer again.

640
00:36:19,200 --> 00:36:20,900
Now why do we have to draw the front buffer again?

641
00:36:20,900 --> 00:36:25,800
Well, because the debug HUD and stuff like that, right wants to be

642
00:36:25,800 --> 00:36:27,600
drawn only once.

643
00:36:28,300 --> 00:36:33,600
Now I could draw it twice right but it's just a waste of our rendering

644
00:36:33,600 --> 00:36:34,100
time.

645
00:36:34,300 --> 00:36:38,600
So it doesn't seem like a particularly good idea to bother with that

646
00:36:39,000 --> 00:36:43,200
we could and then we don't have to switch back to framers, but it's so

647
00:36:43,200 --> 00:36:44,700
little cost for us to switch back.

648
00:36:44,700 --> 00:36:47,000
It just doesn't seem like it's worth it, right?

649
00:36:49,400 --> 00:36:52,000
So, I feel like we might as well to support that switching back.

650
00:36:53,000 --> 00:36:57,600
Okay, and so the other thing I want to do is set a little thing that's

651
00:36:57,600 --> 00:37:00,400
like peeling, equals true, or false and all that's going to be.

652
00:37:00,400 --> 00:37:05,400
Here is the thing that says, oh okay, if we're peeling, you know, let

653
00:37:05,400 --> 00:37:08,800
the rest of the code, no, because it's going to have to do potentially

654
00:37:08,800 --> 00:37:10,000
some slightly different things.

655
00:37:10,600 --> 00:37:13,900
Alright, so here we're targeting the two different frame buffers.

656
00:37:14,600 --> 00:37:20,100
Like so, and what I want to do is I want to go down here to where we

657
00:37:20,100 --> 00:37:22,200
actually do the rendering of quads.

658
00:37:22,900 --> 00:37:27,500
And what we want to do here is say, okay, we used to be doing this,

659
00:37:27,500 --> 00:37:32,400
this stuff here, where we allow the render Target to be picked per

660
00:37:33,200 --> 00:37:35,200
quod, batch by the outer code.

661
00:37:35,200 --> 00:37:37,400
So we can Target to render buffer server wants to.

662
00:37:37,700 --> 00:37:39,600
And right now we're saying not anymore.

663
00:37:40,000 --> 00:37:41,400
That's, that's not true.

664
00:37:42,900 --> 00:37:43,500
Right.

665
00:37:43,700 --> 00:37:45,900
So that code kind of goes by the wayside.

666
00:37:45,900 --> 00:37:48,700
And instead, what's going to happen here is we're going to say, okay,

667
00:37:49,500 --> 00:37:52,100
we know that the frame buffer will be bound properly.

668
00:37:52,600 --> 00:37:55,600
We're not going to, we're not going to allow this code to do that.

669
00:37:55,600 --> 00:37:59,700
We know that the frame buffer will be bound properly by the depth of

670
00:37:59,700 --> 00:38:02,200
feeling code itself, right?

671
00:38:02,900 --> 00:38:06,100
And similarly, what we probably want to do at the outset here, is just

672
00:38:06,100 --> 00:38:10,000
make sure that we bind a frame buffer zero at the start because since

673
00:38:10,000 --> 00:38:11,800
we're no longer doing that bind,

674
00:38:12,700 --> 00:38:13,200
Elsewhere.

675
00:38:13,200 --> 00:38:15,300
I want to make sure that we do it at least once.

676
00:38:15,900 --> 00:38:20,000
Now if I do this in theory, I should still just get the same thing

677
00:38:20,000 --> 00:38:22,600
because we don't, we're not using those depth peels anywhere.

678
00:38:22,800 --> 00:38:25,600
So I should still see that front buffer and that's what I'm seeing.

679
00:38:25,700 --> 00:38:27,500
So that's, you know, that's fine.

680
00:38:30,100 --> 00:38:34,400
So now I come through here and I've got this render entry textured

681
00:38:34,400 --> 00:38:36,100
quads situation going on.

682
00:38:36,700 --> 00:38:42,600
And you can see how I'm loading the Z bias note that feel program.

683
00:38:43,300 --> 00:38:48,300
And so, what I want to do here is I want to be able to switch which

684
00:38:48,300 --> 00:38:51,600
program I'm using based on whether I'm definitely or not.

685
00:38:51,700 --> 00:38:57,800
And furthermore if I am death peeling, I need to set that texture into

686
00:38:57,800 --> 00:38:59,700
the second texture slot because

687
00:39:00,000 --> 00:39:02,700
Now we doing that, right?

688
00:39:03,200 --> 00:39:06,900
So if you take a look up here, where we have used program begin and

689
00:39:06,900 --> 00:39:12,700
use program and you can see here that I've got sort of a texture,

690
00:39:12,700 --> 00:39:15,700
sampler ID set to 0 here.

691
00:39:16,100 --> 00:39:19,000
What I'd like to do is set this uniform

692
00:39:20,700 --> 00:39:23,100
You can see here, we've got the depth, a sampler ID.

693
00:39:23,400 --> 00:39:28,600
I want to be able to have a second texture that gets set in here and

694
00:39:28,600 --> 00:39:30,100
I'm going to have to do that as well.

695
00:39:30,200 --> 00:39:34,400
So I'm going to set the tip sampler to the second texture slot so that

696
00:39:34,400 --> 00:39:39,000
we can set a the the depth buffer into that slot and read from it,

697
00:39:39,200 --> 00:39:39,600
right?

698
00:39:40,400 --> 00:39:44,900
So I'm going to go ahead and compile gear and run this and I just this

699
00:39:44,900 --> 00:39:45,900
is exactly why I want to run it.

700
00:39:45,900 --> 00:39:49,700
I want to see if it would give me an error so you can see here is

701
00:39:51,600 --> 00:39:56,100
I believe in this what this complaining about at least, what I assumed

702
00:39:56,100 --> 00:39:59,900
it would complain about and I want to check is that if there is no

703
00:39:59,900 --> 00:40:05,400
depth sampler then you can't set it, right?

704
00:40:05,700 --> 00:40:12,900
So in the case of when we compile this program and we look here, oh

705
00:40:12,900 --> 00:40:13,800
well actually, you know what?

706
00:40:13,800 --> 00:40:15,600
We never got that.

707
00:40:17,900 --> 00:40:18,800
Let's try it this way.

708
00:40:20,200 --> 00:40:24,000
We want to make sure that if we don't have depth sampling, we don't

709
00:40:24,000 --> 00:40:24,400
get that are.

710
00:40:24,400 --> 00:40:24,700
Okay?

711
00:40:24,700 --> 00:40:27,500
So it looks like it's fine because it returned to sort of like a know,

712
00:40:27,500 --> 00:40:29,200
like this is not a thing.

713
00:40:29,400 --> 00:40:32,300
Okay, never mind that was just big slip.

714
00:40:32,300 --> 00:40:34,900
I just want to make sure that that could get bound silently like that.

715
00:40:35,600 --> 00:40:38,900
Okay, so we now have the ability, right?

716
00:40:39,100 --> 00:40:43,100
Because we do bind the second texture unit and you know, you can kind

717
00:40:43,100 --> 00:40:47,300
of see this GL, bind texture is not going to cut it anymore, right?

718
00:40:47,300 --> 00:40:47,700
It's only

719
00:40:47,800 --> 00:40:48,800
Finding one texture.

720
00:40:52,600 --> 00:40:54,900
We're gonna have to buy into textures, but other than that, we're

721
00:40:54,900 --> 00:40:55,800
pretty Home Free, right?

722
00:40:55,800 --> 00:40:57,700
All we have to do is just switch this use program.

723
00:40:57,700 --> 00:41:00,800
Begin end to go to the whichever one we're using.

724
00:41:00,800 --> 00:41:03,100
Whether it's the no deaf peeled of the that feel.

725
00:41:03,800 --> 00:41:06,500
And then we just have to bind to different textures.

726
00:41:06,800 --> 00:41:11,500
One texture will be this one that actually does vary per quod that

727
00:41:11,500 --> 00:41:12,100
picks the Sprite.

728
00:41:12,100 --> 00:41:16,900
We want again in a very inefficient way that we're probably going to

729
00:41:16,900 --> 00:41:19,600
have to address, which I really don't want to who but we probably will

730
00:41:19,600 --> 00:41:20,100
have to

731
00:41:28,300 --> 00:41:31,400
But the only other thing we're going to have to do is bind it, a

732
00:41:31,400 --> 00:41:33,500
texture at the outset.

733
00:41:34,400 --> 00:41:37,700
That's, that's going to be that, that, that depth texture, right?

734
00:41:38,900 --> 00:41:40,500
So again, this should be pretty simple.

735
00:41:40,600 --> 00:41:43,000
Let's go ahead and and grab that program.

736
00:41:43,000 --> 00:41:44,500
So, here's opengl program.

737
00:41:46,400 --> 00:41:49,400
And I'm just going to grab it like this.

738
00:41:50,900 --> 00:41:52,900
And use it thusly.

739
00:41:54,100 --> 00:41:55,000
I am that way.

740
00:41:55,000 --> 00:41:57,400
In here I can just say, oh, okay.

741
00:41:57,500 --> 00:41:59,900
Now I could just say, well, if we are peeling

742
00:42:01,300 --> 00:42:06,900
Use the Z bias depth peel, otherwise use the no depth of field, right?

743
00:42:06,900 --> 00:42:11,200
So now we know which one of these were using and we can switch

744
00:42:11,200 --> 00:42:11,900
accordingly.

745
00:42:12,200 --> 00:42:15,400
So the only other thing we need to do now is have the ability to read

746
00:42:15,400 --> 00:42:17,000
from more than one texture.

747
00:42:18,800 --> 00:42:26,000
And in order to do the do that, we need our multitexture, we need the

748
00:42:26,000 --> 00:42:28,200
ability to.

749
00:42:28,200 --> 00:42:31,300
I wanted the actual spec, though.

750
00:42:31,500 --> 00:42:32,800
Well, you know, it's probably fine.

751
00:42:34,000 --> 00:42:34,900
Famous Last Words.

752
00:42:34,900 --> 00:42:41,800
The okay no it's not just need to show you the well, you know what?

753
00:42:41,900 --> 00:42:45,800
It's it's so mainstream at this point it's going to be in here.

754
00:42:47,800 --> 00:42:51,500
So let's let's, you know, let's yeah.

755
00:42:52,200 --> 00:42:53,000
Let's take a look.

756
00:42:53,600 --> 00:42:54,100
Is this?

757
00:42:56,800 --> 00:42:57,100
Yeah.

758
00:42:59,100 --> 00:43:06,800
Okay, so what I need to do now is well, I need to specify the texture.

759
00:43:11,600 --> 00:43:14,400
And I need to be able to specify a texture for more than just the

760
00:43:14,400 --> 00:43:14,800
texture.

761
00:43:14,800 --> 00:43:20,700
2D I need to be able to specify it for multiple textures, and I don't

762
00:43:20,700 --> 00:43:22,700
know if this actually covers it.

763
00:43:24,100 --> 00:43:26,500
Let's see here.

764
00:43:29,800 --> 00:43:33,600
I just want multitexture, please.

765
00:43:40,900 --> 00:43:41,500
There it is.

766
00:43:45,000 --> 00:43:45,900
That's what I wanted.

767
00:43:47,200 --> 00:43:52,500
All right, so I believe if I'm not remembering incorrectly that the

768
00:43:52,500 --> 00:43:57,300
way I have to do this in opengl is because you can't quite well maybe

769
00:43:57,300 --> 00:43:58,900
buying texture unit would do it.

770
00:43:58,900 --> 00:43:59,200
Yeah.

771
00:43:59,200 --> 00:44:01,000
Okay, so buying texturing would do it.

772
00:44:01,000 --> 00:44:04,100
I don't know what that's an opengl for though, so, I don't know that

773
00:44:04,100 --> 00:44:05,300
we really want that.

774
00:44:07,900 --> 00:44:12,000
Yeah, as usual, if you use the latest opengl, it has sensible API,

775
00:44:12,000 --> 00:44:12,300
things.

776
00:44:12,300 --> 00:44:16,600
Often times, but not so much in the past, so, okay, in order to be

777
00:44:16,600 --> 00:44:18,800
relatively compatible, we got to do it this way.

778
00:44:18,800 --> 00:44:24,800
So GL active texture is sort of a predicate that will allow us to sort

779
00:44:24,800 --> 00:44:28,800
of briefly switch to using a different texture unit.

780
00:44:28,800 --> 00:44:33,500
So we can say oh at the moment I want to be talking about texture unit

781
00:44:33,500 --> 00:44:35,200
1, instead of texture units, 0

782
00:44:36,100 --> 00:44:40,800
I will then do a buying texture on that, that will change, what's in

783
00:44:40,800 --> 00:44:42,300
that unit, right?

784
00:44:43,800 --> 00:44:45,800
And I guess in this case, I already know what it is.

785
00:44:45,800 --> 00:44:48,500
So we can do that when easier and then a Switchback, right?

786
00:44:48,800 --> 00:44:50,900
And I only need to do this if we're peeling.

787
00:44:52,900 --> 00:44:55,800
So what I could even do here is sort of make this a coherent.

788
00:44:55,800 --> 00:44:59,000
Like what do I do when I'm peeling kind of a loop loop

789
00:45:00,100 --> 00:45:02,400
And that would be something that looks like this.

790
00:45:06,700 --> 00:45:08,300
So we just assume we're doing no death beam that in.

791
00:45:08,300 --> 00:45:11,700
If we are doing peeling, then we have to come through your use a

792
00:45:11,700 --> 00:45:15,100
different program and bind a texture in here.

793
00:45:15,800 --> 00:45:20,500
And then what I can also do is, if we are peeling, then I can go ahead

794
00:45:20,500 --> 00:45:23,100
and on the way out.

795
00:45:27,700 --> 00:45:28,400
Get rid of it.

796
00:45:31,300 --> 00:45:33,900
And I probably should do that here just to make sure it's not left in

797
00:45:33,900 --> 00:45:34,600
a slot.

798
00:45:35,100 --> 00:45:38,300
There's not really a huge drawback to that but probably a good idea

799
00:45:38,300 --> 00:45:40,300
not to write.

800
00:45:40,300 --> 00:45:43,800
So we can we can really do this with only one additional call which is

801
00:45:43,800 --> 00:45:44,300
this GL.

802
00:45:44,300 --> 00:45:47,800
Active texture call which says, hey I'm targeting the second texture

803
00:45:47,800 --> 00:45:48,400
set up.

804
00:45:48,900 --> 00:45:51,900
Not the first one because I know the shooters going to read from slot

805
00:45:51,900 --> 00:45:55,500
0 and Slot, 1 and off, you go.

806
00:45:55,800 --> 00:45:57,000
So, GL bind texture.

807
00:45:57,000 --> 00:46:00,100
In this case is just has to get that depth buffer.

808
00:46:00,300 --> 00:46:01,000
And again, we know

809
00:46:01,200 --> 00:46:05,600
The depth buffer is, it's whatever the whatever peeling were on and in

810
00:46:05,600 --> 00:46:08,800
fact we could support multiple feel peeling pretty easily here if we

811
00:46:08,800 --> 00:46:09,300
wanted to.

812
00:46:09,800 --> 00:46:13,300
So here's our Global frame, buffer textures, right?

813
00:46:13,900 --> 00:46:17,300
And for Global frame, buffer textures, we are.

814
00:46:18,100 --> 00:46:20,400
Let's go through here.

815
00:46:20,400 --> 00:46:21,500
Boo doo, doo doo.

816
00:46:22,300 --> 00:46:27,800
We are storing the texture handle zero in there but we're not storing.

817
00:46:30,500 --> 00:46:32,600
The Depths which we need.

818
00:46:32,700 --> 00:46:33,200
Right?

819
00:46:33,300 --> 00:46:36,700
So we need to keep that that depth handle because now that's a thing.

820
00:46:36,700 --> 00:46:40,400
We actually want to pull from in addition to potentially the color

821
00:46:41,400 --> 00:46:43,100
buffer as well, right?

822
00:46:50,300 --> 00:46:54,900
So, now we have those two available and I can go ahead and grab it.

823
00:46:54,900 --> 00:46:57,800
And, I know again that I'm grabbing from the zero with one.

824
00:46:57,800 --> 00:47:00,900
Now, we could support sort of arbitrary peeling in this case, if we

825
00:47:00,900 --> 00:47:04,300
wanted to, which maybe we do, because we don't really know yet.

826
00:47:04,600 --> 00:47:07,300
But if we wanted to support more appealing, what we could also do here

827
00:47:07,300 --> 00:47:10,900
is say, well, you know what, what we could really do is say whatever

828
00:47:10,900 --> 00:47:12,100
the peel count is.

829
00:47:12,300 --> 00:47:14,100
It's whatever that is minus 1, right?

830
00:47:14,100 --> 00:47:16,200
Because we're on the peel, count one.

831
00:47:17,500 --> 00:47:19,800
Then I kind of want to you

832
00:47:20,000 --> 00:47:24,700
I want to get the the the depth of her from the previous, you know,

833
00:47:24,800 --> 00:47:27,700
run through and we would keep going in that way.

834
00:47:27,900 --> 00:47:30,600
So we can, you know, we could do it that way and that seems pretty

835
00:47:30,600 --> 00:47:31,200
reasonable.

836
00:47:33,300 --> 00:47:35,700
So this should bind the texture.

837
00:47:35,800 --> 00:47:39,600
Use the different program produced that separate output, and in

838
00:47:39,600 --> 00:47:42,300
theory, that's pretty much it.

839
00:47:44,100 --> 00:47:45,100
That's an S.

840
00:47:45,100 --> 00:47:45,600
There we go.

841
00:47:46,400 --> 00:47:49,300
And all we need, is that GL, active texture call.

842
00:47:53,100 --> 00:47:58,800
And so, what I want to do here is just grab that out into our set of

843
00:47:58,800 --> 00:47:59,800
API things.

844
00:48:01,500 --> 00:48:02,300
You've got.

845
00:48:06,700 --> 00:48:07,200
In here.

846
00:48:08,900 --> 00:48:13,600
So yeah, that's just this.

847
00:48:19,800 --> 00:48:21,400
And I will go ahead.

848
00:48:25,600 --> 00:48:26,200
Put it in there.

849
00:48:27,400 --> 00:48:29,900
Let me also load it.

850
00:48:33,100 --> 00:48:34,100
And that should be it.

851
00:48:34,800 --> 00:48:35,400
Hopefully,

852
00:48:39,200 --> 00:48:40,800
Did I not specify that correctly?

853
00:48:42,900 --> 00:48:43,700
Oh, oops.

854
00:48:46,700 --> 00:48:49,900
And so now, if I run it in theory again, nothing should change.

855
00:48:49,900 --> 00:48:53,600
Unless we actually broke something, everything should be working fine

856
00:48:53,700 --> 00:48:59,000
as the previous version was, because there is no actual

857
00:49:04,000 --> 00:49:07,500
Nobody's inserting those markers into the stream so we're not ever

858
00:49:07,500 --> 00:49:10,800
even calling the depth of feel at this point.

859
00:49:11,400 --> 00:49:11,900
Okay?

860
00:49:12,200 --> 00:49:16,600
Now we have one final thing that we're going to have to do in order to

861
00:49:17,000 --> 00:49:18,000
see this at all.

862
00:49:18,300 --> 00:49:25,000
But what I can do, right, is I can just to get an initial sense of

863
00:49:25,000 --> 00:49:26,000
what's Happening Here.

864
00:49:26,600 --> 00:49:30,300
What I can do is say, well, instead of going from Global frame buffer,

865
00:49:30,300 --> 00:49:33,700
one in displaying that, let's go from Global frame buffer.

866
00:49:34,400 --> 00:49:35,500
Or rather from zero.

867
00:49:35,500 --> 00:49:37,100
Let's go from frame, buffer 1.

868
00:49:37,500 --> 00:49:41,000
And if I go from Global frame, buffer one, you know, now we can see

869
00:49:41,000 --> 00:49:42,300
what's in that back buffer.

870
00:49:45,600 --> 00:49:46,600
Which is nothing.

871
00:49:47,300 --> 00:49:47,800
Right?

872
00:49:49,000 --> 00:49:54,300
So now, if I go ahead and add the depth peeling markers in, we should

873
00:49:54,300 --> 00:49:58,600
now be able to look at our front buffer and back buffer and verify

874
00:49:58,600 --> 00:50:02,100
that they're both getting drawn to roughly, what we would expect.

875
00:50:02,900 --> 00:50:06,700
Then we can go ahead and do the final part that we need to.

876
00:50:07,100 --> 00:50:10,000
Finally, see if this debt ceiling is worth worth anything or not,

877
00:50:10,900 --> 00:50:14,500
which is right a Shader that just draws the screen.

878
00:50:15,700 --> 00:50:22,200
One time as a giant quad, and when it does that, it will combine the

879
00:50:22,200 --> 00:50:28,000
two Source frame buffers and you know, smoosh them together, right?

880
00:50:28,200 --> 00:50:29,500
So it'll just smoosh.

881
00:50:31,500 --> 00:50:36,000
And that would be it and then we'll be like, I don't know.

882
00:50:36,000 --> 00:50:37,000
Was that worth it?

883
00:50:37,200 --> 00:50:38,100
How did it go?

884
00:50:38,400 --> 00:50:39,400
Did anyone care?

885
00:50:39,500 --> 00:50:40,400
Nobody cared.

886
00:50:40,900 --> 00:50:44,500
All right, so let's go ahead and go into the

887
00:50:47,500 --> 00:50:49,100
World mode rendering here.

888
00:50:50,000 --> 00:50:55,500
And what I want to do is when we actually do our entity rendering, I

889
00:50:55,500 --> 00:50:59,800
want to bracket that in 2D rendering, you can see here it is.

890
00:51:00,000 --> 00:51:03,800
We got update and render particle systems and simulate and and all

891
00:51:03,800 --> 00:51:04,800
this stuff in here.

892
00:51:05,100 --> 00:51:10,300
What I want to do is I just want to bracket this with with that render

893
00:51:11,200 --> 00:51:13,800
and I don't know if we ever actually clear here.

894
00:51:13,800 --> 00:51:16,100
I don't know who clears our who's supposed to clear.

895
00:51:16,700 --> 00:51:18,400
It's one of those things where just like, I don't know.

896
00:51:18,400 --> 00:51:18,700
Clears.

897
00:51:18,700 --> 00:51:19,300
Yeah, you Claire.

898
00:51:19,900 --> 00:51:24,700
So I want the clear to happen in both cases to the background color, I

899
00:51:24,700 --> 00:51:25,200
think,

900
00:51:33,000 --> 00:51:36,500
because if the background happened to show through it, you'd still

901
00:51:36,500 --> 00:51:38,100
want the depth going to work properly.

902
00:51:38,800 --> 00:51:45,200
So what I want to do is I probably want to do begin depth peel on the

903
00:51:45,200 --> 00:51:46,100
render group here.

904
00:51:48,200 --> 00:51:50,300
And then end up field down at the bottom.

905
00:51:52,500 --> 00:51:53,200
What am I looking at?

906
00:51:53,200 --> 00:51:53,700
Here we go.

907
00:52:01,700 --> 00:52:05,400
And then in the render group itself, I just need the ability to do

908
00:52:05,400 --> 00:52:06,200
these two things.

909
00:52:06,200 --> 00:52:07,400
So you know,

910
00:52:08,900 --> 00:52:10,200
real boring stuff.

911
00:52:19,200 --> 00:52:20,900
I'm literally just putting these in there.

912
00:52:28,100 --> 00:52:28,900
And that's it.

913
00:52:30,200 --> 00:52:35,200
So now if we did anything correctly, we should well we definitely at

914
00:52:35,200 --> 00:52:39,700
least bracket it properly because okay Jill active texture as Jerry an

915
00:52:39,700 --> 00:52:41,000
error invalid enum.

916
00:52:41,000 --> 00:52:46,500
Oh yeah, so that active texture is probably needs its own G.

917
00:52:46,500 --> 00:52:47,100
Lem.

918
00:52:47,100 --> 00:52:48,600
I don't know, I just kind of threw that in there.

919
00:52:48,600 --> 00:52:51,000
Didn't even think about it but that's probably not the case.

920
00:52:55,000 --> 00:52:56,100
Hold on a second.

921
00:52:57,400 --> 00:53:05,100
Yeah, we have to use these special fancy texture enums here, right?

922
00:53:05,400 --> 00:53:07,500
So I actually need to do it this.

923
00:53:07,900 --> 00:53:10,000
I was being a little Cavalier there.

924
00:53:10,300 --> 00:53:14,500
I actually need to do it like this because these are actually specific

925
00:53:14,500 --> 00:53:17,900
enums that Target which texture you're talking about here.

926
00:53:18,700 --> 00:53:21,900
So I need to cut and paste those from core are as well.

927
00:53:24,700 --> 00:53:27,200
And those are just enums that apis, right?

928
00:53:27,200 --> 00:53:27,600
Wow.

929
00:53:27,600 --> 00:53:28,600
Have some texture units.

930
00:53:29,100 --> 00:53:31,400
I don't think we're ever going to be pulling for more than four

931
00:53:31,400 --> 00:53:32,000
textures.

932
00:53:32,200 --> 00:53:33,400
I'm going to be conservative.

933
00:53:33,500 --> 00:53:37,100
You can always cut and paste them more, I suppose, but I think that

934
00:53:37,100 --> 00:53:38,400
will be quite enough for me.

935
00:53:40,600 --> 00:53:43,000
Thank you very much for the for the option.

936
00:53:44,000 --> 00:53:44,500
Okay?

937
00:53:44,900 --> 00:53:49,000
So here we are looking at the depth peel.

938
00:53:49,400 --> 00:53:54,300
And what it looks like to me, is it's sort.

939
00:53:54,400 --> 00:53:58,000
Of working in once in some places, but it doesn't look like it's

940
00:53:58,000 --> 00:53:58,600
working.

941
00:54:00,100 --> 00:54:00,700
Others.

942
00:54:00,700 --> 00:54:06,300
So if I look here, you can see that like the tops of the cubes are

943
00:54:06,300 --> 00:54:09,800
properly cut off, which is what I would expect.

944
00:54:10,400 --> 00:54:18,400
But like the hero for example, is not cut off, he should be right, I

945
00:54:18,400 --> 00:54:21,800
should be seeing what's behind the hero, and I'm not seeing what's

946
00:54:21,800 --> 00:54:23,600
behind the hero at the moment.

947
00:54:23,900 --> 00:54:29,800
So it seems to me, like, maybe there's some kind of problem with

948
00:54:30,000 --> 00:54:35,300
With this in terms of the depth comparison where I'm not getting it

949
00:54:35,300 --> 00:54:38,800
reliably but I'm not 100% sure why.

950
00:54:39,600 --> 00:54:43,300
Since we're should be sending down the exact same things, right?

951
00:54:44,600 --> 00:54:47,000
And yeah, I don't know.

952
00:54:55,600 --> 00:54:56,400
Hmm.

953
00:55:00,100 --> 00:55:01,900
So that is a bit of a Puzzler.

954
00:55:02,100 --> 00:55:03,500
How is it?

955
00:55:05,000 --> 00:55:12,500
that in one case I'm properly comparing the depth, but in the other

956
00:55:12,500 --> 00:55:15,600
case, I'm not

957
00:55:18,100 --> 00:55:18,300
Right.

958
00:55:18,300 --> 00:55:20,100
Because even if we had that

959
00:55:21,600 --> 00:55:26,100
If we were doing some other things wrong, I'm not sure why we would be

960
00:55:26,100 --> 00:55:32,100
able to see the hero because that should be the highest Z value.

961
00:55:32,100 --> 00:55:33,700
It should not allow it to draw.

962
00:55:34,000 --> 00:55:38,700
So, you know, we would expect to see like nothing there, something if

963
00:55:38,700 --> 00:55:41,400
we like weren't drawing the other parts properly.

964
00:55:41,400 --> 00:55:41,800
But

965
00:55:43,200 --> 00:55:44,800
We actually are seeing something there.

966
00:55:45,700 --> 00:55:50,100
So let's take a look and see if we can debug that.

967
00:55:51,400 --> 00:55:52,200
I don't really know.

968
00:55:53,300 --> 00:55:56,200
I don't have a good guess for what's going wrong there.

969
00:55:57,600 --> 00:56:00,400
So, you can see that text will fetch from the depth sampler here.

970
00:56:04,200 --> 00:56:06,400
The frogs eat, you know, what else I might want to do.

971
00:56:06,400 --> 00:56:07,300
That's kind of fun.

972
00:56:08,300 --> 00:56:12,300
Is we could draw the frag Z as well, which is kind of fun.

973
00:56:13,000 --> 00:56:14,200
Let me, let me do this.

974
00:56:14,400 --> 00:56:14,800
Oops,

975
00:56:17,500 --> 00:56:18,300
what just happened?

976
00:56:19,600 --> 00:56:20,000
All right.

977
00:56:21,400 --> 00:56:23,200
Oh, that just re comments everything.

978
00:56:23,200 --> 00:56:32,600
Okay, well anyway, so if I did text sample rgba equals

979
00:56:38,300 --> 00:56:39,300
Frag Z.

980
00:56:43,600 --> 00:56:44,200
And you know what?

981
00:56:44,200 --> 00:56:46,000
I think it might be from negative 1 to 1.

982
00:56:46,000 --> 00:56:46,800
I don't know.

983
00:56:47,200 --> 00:56:50,600
So I'm just gonna just in, give myself a little.

984
00:56:50,600 --> 00:56:50,900
Oops,

985
00:56:52,800 --> 00:56:54,100
A little Insurance there.

986
00:57:13,500 --> 00:57:21,200
I want this to replicate out to everybody but I'm not sure hoops.

987
00:57:23,400 --> 00:57:25,900
How I would do that float champ.

988
00:57:30,600 --> 00:57:32,300
Man, I wish you wouldn't do that.

989
00:57:36,500 --> 00:57:38,700
Let's see, temp equals 0.5 up.

990
00:57:38,900 --> 00:57:42,000
I don't know why it's commenting inside the string like that.

991
00:57:42,200 --> 00:57:44,400
Why it's indenting things inside the string.

992
00:57:46,700 --> 00:57:49,700
Because it should preserve strings but for some reason it isn't

993
00:57:50,100 --> 00:57:50,600
anyway.

994
00:58:12,200 --> 00:58:15,300
Undeclared identifier frag Z.

995
00:58:15,800 --> 00:58:16,900
Ah, right.

996
00:58:16,900 --> 00:58:19,600
And only if depth feeling is on sorry.

997
00:58:22,100 --> 00:58:22,600
Here we go.

998
00:58:23,500 --> 00:58:23,900
I feel it.

999
00:58:23,900 --> 00:58:26,500
So maybe what I did before would have worked, I just wasn't paying

1000
00:58:26,500 --> 00:58:27,000
attention.

1001
00:58:36,900 --> 00:58:39,000
Wow, that is really interesting.

1002
00:58:41,200 --> 00:58:45,100
So what I'm doing now is I'm drawing the Z value right?

1003
00:58:45,200 --> 00:58:46,400
Of each of these things.

1004
00:58:48,100 --> 00:58:50,800
And I'm drawing the Z value course.

1005
00:58:50,800 --> 00:58:57,000
It's getting modulated by the by the alpha function.

1006
00:58:59,800 --> 00:59:03,200
So it gets darker as things Fade Out, which, you know, we wouldn't

1007
00:59:03,200 --> 00:59:04,300
want to do normally.

1008
00:59:05,900 --> 00:59:13,400
But what's interesting about this is, I don't understand why the why

1009
00:59:13,400 --> 00:59:16,500
the cubes still have color

1010
00:59:22,100 --> 00:59:23,500
Like how is that happening?

1011
00:59:27,700 --> 00:59:30,900
I guess it's because they actually have a color value that we modulate

1012
00:59:30,900 --> 00:59:32,200
on, that's why.

1013
00:59:32,900 --> 00:59:36,000
So, they have a color value that we actually modulate on here.

1014
00:59:42,400 --> 00:59:43,500
Hmm.

1015
00:59:54,000 --> 00:59:57,500
Alright, well let's play around a little bit here.

1016
01:00:00,000 --> 01:00:05,700
Go ahead and say, you know, let's we're looking at the back that peel

1017
01:00:05,700 --> 01:00:06,500
here, right?

1018
01:00:06,800 --> 01:00:10,300
And let me also just really quickly, oops.

1019
01:00:13,400 --> 01:00:19,700
Let me also just really quickly go here and take a look at the front

1020
01:00:19,700 --> 01:00:20,200
buffer.

1021
01:00:28,700 --> 01:00:31,400
So, the front buffer still looks correct to me.

1022
01:00:33,200 --> 01:00:33,500
Right.

1023
01:00:33,500 --> 01:00:37,100
And it still draws this stuff in there, right?

1024
01:00:49,900 --> 01:00:51,500
No, it doesn't have blending on.

1025
01:00:55,800 --> 01:00:58,600
so there's that, but

1026
01:01:01,600 --> 01:01:03,000
This still all looks correct.

1027
01:01:04,100 --> 01:01:07,300
So it's only our depth peel, that isn't quite right.

1028
01:01:07,300 --> 01:01:10,500
And what's weird about it is rather than being completely wrong.

1029
01:01:11,400 --> 01:01:12,900
It's sort of, right?

1030
01:01:15,100 --> 01:01:18,400
And it's sort of right in a truly puzzling way.

1031
01:01:20,200 --> 01:01:22,900
It seems like everything with a texture.

1032
01:01:24,900 --> 01:01:25,800
Is wrong.

1033
01:01:26,900 --> 01:01:29,200
And everything with the white texture.

1034
01:01:32,300 --> 01:01:33,500
Which is still a texture.

1035
01:01:33,500 --> 01:01:37,000
It's just the white texture is correct.

1036
01:01:38,100 --> 01:01:43,800
like if you look and you if you look in there, you can see

1037
01:01:46,000 --> 01:01:51,100
That, for example, even the hitboxes are correct.

1038
01:01:51,200 --> 01:01:52,800
Like, the hitboxes are drawing.

1039
01:01:52,800 --> 01:01:54,600
What's underneath the hitboxes?

1040
01:01:54,900 --> 01:01:56,200
Not the hitboxes.

1041
01:01:57,500 --> 01:02:02,100
And I don't know what's going on here, like that tree just just

1042
01:02:02,100 --> 01:02:04,800
flicked from being correct, to being incorrect.

1043
01:02:07,100 --> 01:02:10,900
did you see that if it is if it wasn't weird enough,

1044
01:02:13,300 --> 01:02:16,200
So I really have no idea what's going on there.

1045
01:02:16,200 --> 01:02:19,500
That is just pure mystery to me.

1046
01:02:26,700 --> 01:02:30,800
I mean, I guess one question would be, are we accidentally drawing all

1047
01:02:30,800 --> 01:02:32,400
of our Sprites twice?

1048
01:02:36,400 --> 01:02:40,300
Which doesn't seem likely.

1049
01:02:41,300 --> 01:02:44,800
And I guess by twice, I mean, more than twice like four times, right?

1050
01:02:44,900 --> 01:02:46,500
/, / twice per peel.

1051
01:02:52,500 --> 01:02:53,000
Give me.

1052
01:02:55,700 --> 01:02:59,900
Cuz that would explain it, but I don't think we are.

1053
01:03:00,000 --> 01:03:04,300
Are you never do know.

1054
01:03:05,900 --> 01:03:07,800
So let's think about this.

1055
01:03:07,800 --> 01:03:10,100
How can I go about constructively to bugging this?

1056
01:03:19,300 --> 01:03:21,100
so, I guess one thing I can do here,

1057
01:03:22,800 --> 01:03:24,200
is say that well,

1058
01:03:46,300 --> 01:03:50,000
Well, you know a my properly.

1059
01:03:56,200 --> 01:03:59,500
Am I properly setting which texture unit to go?

1060
01:03:59,500 --> 01:04:03,100
To would be one thing.

1061
01:04:03,100 --> 01:04:07,000
Because let's say so here's an example that I could test.

1062
01:04:07,500 --> 01:04:12,100
So here, you know what, if this had to be the GL texture, enum and not

1063
01:04:12,100 --> 01:04:13,100
the integer, right?

1064
01:04:13,100 --> 01:04:15,400
And I'm just grasping at straws here because I don't have any way to

1065
01:04:15,400 --> 01:04:16,200
debug it, really.

1066
01:04:19,500 --> 01:04:21,500
This is where you would definitely want to be using.

1067
01:04:23,400 --> 01:04:25,000
A graphics card that had a debugger.

1068
01:04:30,300 --> 01:04:34,500
Let's just see because changing that the depth sampler idea to be

1069
01:04:34,500 --> 01:04:42,400
sampling from the color buffer instead should have a potential effect

1070
01:04:42,400 --> 01:04:43,900
here, right?

1071
01:04:46,100 --> 01:04:50,000
Let me just make sure I'm still drawn from the right place.

1072
01:04:51,200 --> 01:04:56,000
Yeah, so I just want to make sure that we get a different result in

1073
01:04:56,000 --> 01:05:01,500
those two cases where, you know, if I if I go from the color buffer,

1074
01:05:01,900 --> 01:05:06,200
if I sample, The Depths and the depth samples from the color buffer, I

1075
01:05:06,200 --> 01:05:09,100
should get a different result and I do.

1076
01:05:10,000 --> 01:05:10,700
So that's at least.

1077
01:05:10,700 --> 01:05:13,800
Reassuring it suggests, at least a little bit.

1078
01:05:17,000 --> 01:05:20,900
That were probably changing what we're sampling from although I guess

1079
01:05:20,900 --> 01:05:22,000
I don't know that for sure.

1080
01:05:22,100 --> 01:05:24,800
It could be that we change from sampling from something to sampling

1081
01:05:24,800 --> 01:05:25,500
from nothing.

1082
01:05:25,800 --> 01:05:28,800
Not from the correct buffer so I guess I don't really know that that's

1083
01:05:28,800 --> 01:05:35,300
the case but I at least suspect now that that is the case, right?

1084
01:05:41,000 --> 01:05:44,800
All right, so the next question would be well.

1085
01:05:44,800 --> 01:05:49,800
Okay, so we don't know anything about how this depth buffer is stored

1086
01:05:49,900 --> 01:05:52,300
though, right?

1087
01:05:52,300 --> 01:05:59,000
Because, you know, I'm just I'm sampling from the depth buffer but

1088
01:06:04,400 --> 01:06:12,700
Do I know that the GL frag chords e value in this case is actually

1089
01:06:13,000 --> 01:06:16,600
stored in the same fashion as Texel.

1090
01:06:16,600 --> 01:06:21,400
Fetch from a depth buffer will return because it may well not be

1091
01:06:21,800 --> 01:06:22,400
right.

1092
01:06:23,400 --> 01:06:29,300
So I kind of need some information about what will happen with Texel,

1093
01:06:29,300 --> 01:06:31,400
fetch on a depth buffer.

1094
01:06:33,400 --> 01:06:35,200
What values do I get back?

1095
01:06:39,400 --> 01:06:40,500
And I don't know.

1096
01:06:52,500 --> 01:06:54,700
This seems like it could be a reasonable source.

1097
01:07:02,800 --> 01:07:05,600
So that's updated that's looking at the frag depth.

1098
01:07:07,100 --> 01:07:09,000
Which maybe I should be looking at.

1099
01:07:09,700 --> 01:07:11,700
Let's take a look at how it's documented.

1100
01:07:23,900 --> 01:07:26,200
The averroes you steps to death value for the current fragment.

1101
01:07:26,200 --> 01:07:28,800
If death organ is enabled and no shit eraser gel fact that the fixed

1102
01:07:28,800 --> 01:07:29,800
function value for definitely.

1103
01:07:29,800 --> 01:07:32,200
Use the values contained in the Z component of jail free card.

1104
01:07:32,200 --> 01:07:35,800
So that is what we're using the value written to Jeff artists is used

1105
01:07:35,800 --> 01:07:39,800
if a Shader, should set a CLIA signs 2gl frag depth than the value of

1106
01:07:39,800 --> 01:07:40,700
the fragment?

1107
01:07:42,900 --> 01:07:46,000
Then the value of the fragments depth may be undefined for executions

1108
01:07:46,000 --> 01:07:47,800
of the Shader that take that path.

1109
01:07:47,800 --> 01:07:50,100
That is, if the set of like Furniture start.

1110
01:07:50,100 --> 01:07:50,900
Yeah, okay.

1111
01:07:52,100 --> 01:07:57,500
But what, yeah, can you GL

1112
01:08:00,300 --> 01:08:02,800
Depth or maybe GL.

1113
01:08:03,000 --> 01:08:06,100
Depth texture value.

1114
01:08:07,100 --> 01:08:08,500
I just need something.

1115
01:08:12,300 --> 01:08:13,500
The talks about it.

1116
01:08:42,700 --> 01:08:43,300
Yeah.

1117
01:08:43,300 --> 01:08:47,100
So I mean, here is just what I'm thinking, and I would like some

1118
01:08:47,100 --> 01:08:51,000
documentation on this, just so I know what to expect, but my thinking

1119
01:08:51,000 --> 01:08:56,300
was just that, well, if the frag cord, .z was between negative 1 and

1120
01:08:56,300 --> 01:08:59,700
1, but the depth that we fetch from textile,

1121
01:09:00,200 --> 01:09:01,200
Between zero and one.

1122
01:09:07,300 --> 01:09:09,800
I don't know that that would really produce the artifacts were seeing

1123
01:09:12,600 --> 01:09:13,700
but, you know,

1124
01:09:18,899 --> 01:09:20,200
It would be wrong.

1125
01:09:20,200 --> 01:09:22,899
Anyway, in order to look at that.

1126
01:09:22,899 --> 01:09:23,200
Right?

1127
01:09:23,200 --> 01:09:25,800
What we would want to do here is say oh yeah.

1128
01:09:25,800 --> 01:09:33,000
You know, when we when we fetch a Texel or maybe when we use the frag

1129
01:09:33,000 --> 01:09:36,899
Z what we want to do for the frags you say well okay, you know,

1130
01:09:40,899 --> 01:09:45,300
Add 1 to it, to bring it to 0 to 2 and then divide it by half to bring

1131
01:09:45,300 --> 01:09:49,899
it to zero to one and then maybe now that's in the correct space,

1132
01:09:50,500 --> 01:09:51,100
right?

1133
01:09:51,399 --> 01:09:58,300
Because again what I don't know is Texel fetch knows about the

1134
01:09:58,300 --> 01:10:00,300
underlying format of the texture.

1135
01:10:00,500 --> 01:10:02,100
It knows it's a depth texture.

1136
01:10:02,700 --> 01:10:07,800
So what comes back from the depth texture could be different depending

1137
01:10:07,800 --> 01:10:08,900
on the circumstances?

1138
01:10:09,700 --> 01:10:10,500
I don't know what

1139
01:10:10,700 --> 01:10:12,100
Specifying right now.

1140
01:10:13,800 --> 01:10:16,300
As far as the format for that.

1141
01:10:17,200 --> 01:10:19,600
But it's not a floating-point format.

1142
01:10:20,800 --> 01:10:25,000
And so you know, it could be that that's just it's getting packed into

1143
01:10:25,000 --> 01:10:27,900
the zero to one range and then when you text will fetch, it's not

1144
01:10:27,900 --> 01:10:29,100
going to do that.

1145
01:10:30,400 --> 01:10:31,900
I don't know, right?

1146
01:10:31,900 --> 01:10:33,700
I really don't know what's going to go on there.

1147
01:10:33,700 --> 01:10:37,500
What I could do to is, I could maybe say that I want this to be a

1148
01:10:37,500 --> 01:10:39,100
floating-point depth, buffer.

1149
01:10:41,600 --> 01:10:43,300
You know, maybe I could say that.

1150
01:10:51,200 --> 01:10:52,300
And then in theory,

1151
01:10:57,500 --> 01:10:57,800
Right.

1152
01:10:57,800 --> 01:11:01,100
It should give me back the actual same floating point value that got

1153
01:11:01,100 --> 01:11:05,900
stored to it, which should have just been the frag Z, I believe, don't

1154
01:11:05,900 --> 01:11:06,800
quote me on this.

1155
01:11:10,900 --> 01:11:12,400
But yeah, no, still nothing.

1156
01:11:12,700 --> 01:11:13,900
So that's really strange.

1157
01:11:13,900 --> 01:11:19,800
I'm not sure it's very weird and it seems to be oddly very accurate.

1158
01:11:23,000 --> 01:11:24,200
For those cubes.

1159
01:11:24,600 --> 01:11:32,400
So it is just something with the Sprites and I just have no idea why

1160
01:11:32,400 --> 01:11:33,500
that would be the case.

1161
01:11:33,500 --> 01:11:38,900
I'm literally stumped as to a plausible explanation, which is tough

1162
01:11:38,900 --> 01:11:41,200
because it means I don't know where to investigate,

1163
01:11:43,600 --> 01:11:47,800
I suppose on handmade hero since the the main character has no arms or

1164
01:11:47,800 --> 01:11:51,000
legs saying stumped, is kind of weird.

1165
01:11:51,300 --> 01:11:56,500
But anyway, so yeah, I really just don't know.

1166
01:12:14,500 --> 01:12:21,100
I do not know what the most likely culprit would be there.

1167
01:12:27,200 --> 01:12:32,400
What I think I'll probably do is go make the compositing Shader

1168
01:12:32,600 --> 01:12:34,100
because we know we have to do that.

1169
01:12:35,200 --> 01:12:38,400
And then tomorrow, I guess we'll be the day where we try to figure out

1170
01:12:38,400 --> 01:12:41,700
what's going wrong with that deaf people because it's so close to

1171
01:12:41,700 --> 01:12:42,300
working.

1172
01:12:43,300 --> 01:12:48,300
The other thing I would like to do is I'd like to turn on culling

1173
01:12:55,000 --> 01:12:56,300
Think it's or is it?

1174
01:13:04,900 --> 01:13:11,300
Yeah, because what you'll notice is, if we temporarily, let me just go

1175
01:13:11,300 --> 01:13:13,500
ahead and draw the main front buffer.

1176
01:13:16,900 --> 01:13:18,500
if I go ahead and

1177
01:13:21,600 --> 01:13:22,900
Draw the main buffer.

1178
01:13:23,400 --> 01:13:28,100
One thing you can see is that when we when we look, when we clip away

1179
01:13:29,300 --> 01:13:35,000
parts of the cubes, we see the back faces of parts of the cubes, which

1180
01:13:35,000 --> 01:13:37,700
we don't really want to do in this case, right?

1181
01:13:39,200 --> 01:13:42,900
And so if I instead turn on back face culling, but back face culling

1182
01:13:42,900 --> 01:13:46,700
does, is it just says, hey, if a face is pointing away from the

1183
01:13:46,700 --> 01:13:47,300
camera.

1184
01:13:48,900 --> 01:13:52,200
We don't want to draw it and so I could do that for my cubes.

1185
01:13:52,200 --> 01:13:54,900
And then we wouldn't draw those faces right?

1186
01:13:56,300 --> 01:13:57,700
And that would be handy.

1187
01:13:57,700 --> 01:14:02,200
Now, it looks like me GL.

1188
01:14:02,800 --> 01:14:03,600
It looks like it did.

1189
01:14:03,600 --> 01:14:05,400
I wind my faces backwards.

1190
01:14:07,800 --> 01:14:11,400
Jill, coal face.

1191
01:14:16,000 --> 01:14:18,800
And so, we want to do is we want to call back faces.

1192
01:14:23,300 --> 01:14:27,700
And then we need to do front face to specify which ones they are and

1193
01:14:27,700 --> 01:14:30,100
counterclockwise, but that should have been the default.

1194
01:14:38,300 --> 01:14:38,600
Oops.

1195
01:14:41,300 --> 01:14:42,000
That's right.

1196
01:14:43,500 --> 01:14:44,000
There we go.

1197
01:14:55,900 --> 01:14:56,600
so,

1198
01:14:58,400 --> 01:14:59,800
That is relatively.

1199
01:15:00,000 --> 01:15:01,000
Disturbing.

1200
01:15:03,600 --> 01:15:09,000
Because if you think about what that means, it means that everything

1201
01:15:09,000 --> 01:15:11,300
in the game is wounded backwards.

1202
01:15:14,800 --> 01:15:15,300
Right.

1203
01:15:17,300 --> 01:15:19,500
Like everything.

1204
01:15:23,100 --> 01:15:26,600
Because I wanted all of the outward faces of the cubes to be

1205
01:15:27,000 --> 01:15:28,600
counterclockwise wound.

1206
01:15:29,900 --> 01:15:33,000
So I guess that means that the way that weird.

1207
01:15:33,000 --> 01:15:39,200
Oh, and I know why it's because we're doing try strips.

1208
01:15:40,200 --> 01:15:41,000
Right now.

1209
01:15:42,700 --> 01:15:47,500
And the try strips are going to change the winding.

1210
01:15:52,300 --> 01:15:53,900
Of the quads, I suppose.

1211
01:15:54,400 --> 01:15:55,800
So how did we

1212
01:16:09,700 --> 01:16:10,900
Here's our push quad.

1213
01:16:18,300 --> 01:16:22,700
And I feel like in general if we had wound these properly we should

1214
01:16:22,700 --> 01:16:24,900
have gotten clockwise wounding on them, right?

1215
01:16:24,900 --> 01:16:27,100
Because I believe

1216
01:16:33,500 --> 01:16:44,700
So if we had done P0, P1 P2 P3, then in theory, doing a try strip of p

1217
01:16:44,700 --> 01:16:47,300
0 p, 3, p, 1.

1218
01:16:47,300 --> 01:16:50,100
P 2 should have been front-facing

1219
01:16:55,900 --> 01:16:57,300
That would have been my assumption.

1220
01:16:59,100 --> 01:16:59,800
However,

1221
01:17:03,500 --> 01:17:04,900
that is not what I'm seeing.

1222
01:17:06,300 --> 01:17:08,700
Now, if we wanted to do a push quad,

1223
01:17:16,300 --> 01:17:18,400
so like, for example, here in push bitmap,

1224
01:17:20,000 --> 01:17:21,300
Here is the push quad.

1225
01:17:21,800 --> 01:17:30,500
You can see me doing Min Min, Max min max max min, max.

1226
01:17:30,900 --> 01:17:38,200
So that's the exact same sort of quad order.

1227
01:17:39,200 --> 01:17:41,300
So that should be wound properly.

1228
01:17:41,300 --> 01:17:45,600
I would think but that's definitely not.

1229
01:17:45,600 --> 01:17:46,000
We're seeing.

1230
01:17:46,000 --> 01:17:48,300
So we have actually two nasty problems here.

1231
01:17:48,600 --> 01:17:51,000
One is, we don't know why the peelings working and the other is that

1232
01:17:51,000 --> 01:17:55,100
that we don't know why our faces are wound in properly.

1233
01:17:55,800 --> 01:17:56,400
Right?

1234
01:17:57,600 --> 01:17:59,600
But that's really bad.

1235
01:18:00,300 --> 01:18:07,400
That's like right cuz there's there's no question that that should be

1236
01:18:07,400 --> 01:18:08,500
wound properly.

1237
01:18:09,100 --> 01:18:15,200
So I'm very nervous now because I have no idea why it wouldn't be

1238
01:18:15,200 --> 01:18:21,100
around the correct way and I can't you know that's like it's getting

1239
01:18:21,100 --> 01:18:22,500
mirrored or something in there.

1240
01:18:23,100 --> 01:18:28,100
So I'm just going to test a couple things here, but yeah, that's

1241
01:18:29,600 --> 01:18:30,600
That's really bad.

1242
01:18:31,200 --> 01:18:35,600
So here the GL drawer raised call with GL triangle strip.

1243
01:18:37,700 --> 01:18:41,100
That's drawing these vertices as they are.

1244
01:18:42,400 --> 01:18:47,200
I would be interested to know if I switch to GL quads just quickly and

1245
01:18:47,200 --> 01:18:48,300
I can do that.

1246
01:18:48,300 --> 01:18:53,100
If I'm incompatibility context, not core context, but I have to switch

1247
01:18:53,100 --> 01:18:54,600
that because we'll get an error here.

1248
01:18:54,600 --> 01:19:00,100
If I don't since since that's not allowed, that makes sense.

1249
01:19:01,600 --> 01:19:04,900
So let me go back to the win32 mode.

1250
01:19:06,900 --> 01:19:08,200
And let me switch it.

1251
01:19:26,500 --> 01:19:27,300
What did you just do?

1252
01:19:27,300 --> 01:19:28,400
Did I not just?

1253
01:19:29,800 --> 01:19:31,600
I said, compatibility did I not?

1254
01:19:42,000 --> 01:19:43,000
What am I missing here?

1255
01:19:44,700 --> 01:19:50,200
If one profile Mass carb is contact, compatibility profile, bit are

1256
01:19:50,200 --> 01:19:51,100
not core.

1257
01:19:53,700 --> 01:19:54,200
Right.

1258
01:20:05,200 --> 01:20:14,100
I'm definitely specifying compatibility profile bit in the win32

1259
01:20:14,200 --> 01:20:15,900
opengl at ribs.

1260
01:20:18,500 --> 01:20:22,100
So does someone want to tell me why?

1261
01:20:22,100 --> 01:20:23,800
It thinks it's a core context.

1262
01:20:33,700 --> 01:20:35,500
It's not a core context.

1263
01:20:48,200 --> 01:20:49,800
What's going on here, folks?

1264
01:20:50,000 --> 01:20:53,200
Things are getting Stranger by the second here on handmade hero.

1265
01:20:54,000 --> 01:20:59,000
I'm specifically asking for a compatibility profile and yet it claims

1266
01:20:59,000 --> 01:20:59,800
its opening quarter.

1267
01:21:00,000 --> 01:21:03,000
Context, I guess, it has no obligation to do so.

1268
01:21:05,800 --> 01:21:06,300
Right.

1269
01:21:09,900 --> 01:21:15,300
But still, like I would be surprised if it couldn't.

1270
01:21:22,700 --> 01:21:24,800
I mean, we're not in this Branch, are we?

1271
01:21:26,200 --> 01:21:26,500
Right.

1272
01:21:26,500 --> 01:21:28,600
So it's it is using the other branch.

1273
01:21:32,800 --> 01:21:37,000
And so somehow, even though we're asking for one, we can't get one.

1274
01:21:38,600 --> 01:21:41,400
Well, I guess so much for that test.

1275
01:21:45,100 --> 01:21:48,700
We really need to get him new machine something with their graphics

1276
01:21:48,700 --> 01:21:50,000
card we can actually test on.

1277
01:21:51,600 --> 01:21:54,100
All right, so that's not going to be particularly helpful.

1278
01:21:55,600 --> 01:21:58,800
So let's go ahead and try GL triangles because then at least I can

1279
01:21:58,800 --> 01:22:00,200
specify the order directly.

1280
01:22:00,400 --> 01:22:05,600
So here in render group, what I'd have to do is I'm going to have to

1281
01:22:05,600 --> 01:22:09,100
draw only just one triangle from each set that I would have drawn

1282
01:22:09,100 --> 01:22:09,800
before.

1283
01:22:12,800 --> 01:22:14,800
But what are you going to do, right?

1284
01:22:15,500 --> 01:22:20,700
So what I'll do here is just say like okay let's go ahead and draw.

1285
01:22:23,700 --> 01:22:29,400
P0 P1 P2 as a triangle.

1286
01:22:33,400 --> 01:22:36,400
And ignore this, this Final in here, right?

1287
01:22:37,900 --> 01:22:38,400
Like so.

1288
01:22:45,000 --> 01:22:45,600
Yeah, okay.

1289
01:22:45,600 --> 01:22:48,700
So I have at least confirmed that we are winding our triangles

1290
01:22:48,700 --> 01:22:49,200
correctly.

1291
01:22:49,200 --> 01:22:51,100
It's just the triangle strips.

1292
01:22:51,900 --> 01:22:56,100
I was out, putting the triangle strips must be backwards.

1293
01:22:59,100 --> 01:23:00,200
That's not so bad.

1294
01:23:02,800 --> 01:23:07,400
Let's go ahead and fix that and they probably there's just some weird

1295
01:23:07,400 --> 01:23:09,900
requirement about how the triangle strips have to go.

1296
01:23:09,900 --> 01:23:10,800
So let's take a look.

1297
01:23:13,800 --> 01:23:17,100
Show me the documentation, okay so it's the problem is it starts at

1298
01:23:17,100 --> 01:23:18,700
the top and goes down.

1299
01:23:19,600 --> 01:23:22,600
Looks like it's v-0, V1 V2, right?

1300
01:23:22,900 --> 01:23:23,500
Then be 3.

1301
01:23:23,500 --> 01:23:24,900
So it's dude to dude.

1302
01:23:25,800 --> 01:23:29,000
So in order to do that we have to start it at 3 because that was our

1303
01:23:29,000 --> 01:23:31,400
top one, then go down to zero.

1304
01:23:32,600 --> 01:23:35,200
Then go up to two and then come down to one.

1305
01:23:37,800 --> 01:23:41,700
So now we should actually get that coloring to work properly.

1306
01:23:46,200 --> 01:23:49,900
And it looks like it actually now is so that's good, right?

1307
01:23:50,700 --> 01:23:52,500
So now we're seeing our only front faces.

1308
01:23:52,500 --> 01:23:58,100
And so now when we click through like so you can see that we don't get

1309
01:23:58,100 --> 01:23:59,500
those back faces.

1310
01:24:00,000 --> 01:24:01,200
Which is good.

1311
01:24:01,200 --> 01:24:03,100
That's what I wanted, right?

1312
01:24:03,600 --> 01:24:04,800
I wanted those to be

1313
01:24:07,600 --> 01:24:08,800
those to be invisible.

1314
01:24:09,900 --> 01:24:12,400
Okay, so you know, that's all fine.

1315
01:24:12,400 --> 01:24:15,600
It doesn't really help us with our main problem, but I just wanted to

1316
01:24:15,600 --> 01:24:20,200
get that out of the way and so we're still at this point, where we

1317
01:24:20,200 --> 01:24:21,000
have

1318
01:24:23,700 --> 01:24:28,200
Sort of this this weird issue where, okay, yeah, you know, there's

1319
01:24:28,700 --> 01:24:32,300
there's drawing exactly what I think should be drawing everywhere

1320
01:24:32,300 --> 01:24:35,000
where we're using a white texture and everywhere we're using a

1321
01:24:35,000 --> 01:24:36,500
texture, that's not white.

1322
01:24:40,400 --> 01:24:43,900
Somehow somehow it does the wrong thing.

1323
01:24:44,500 --> 01:24:47,400
So I guess you know, let's

1324
01:24:50,800 --> 01:24:52,900
Let's take a look at the Shader and see.

1325
01:24:54,100 --> 01:24:57,200
So if I look at the Shader, you know,

1326
01:25:01,700 --> 01:25:05,500
I guess if you take the texture sample,

1327
01:25:08,200 --> 01:25:09,500
And the texture sample.

1328
01:25:09,500 --> 01:25:15,100
Actually like, how could that possibly be affecting it?

1329
01:25:24,200 --> 01:25:25,800
I really just do not know.

1330
01:25:30,300 --> 01:25:33,100
I also wonder if I can get for a coder to indent this for me.

1331
01:25:35,800 --> 01:25:36,700
In some way.

1332
01:25:43,400 --> 01:25:44,100
I guess not.

1333
01:25:50,500 --> 01:25:51,600
Hmm.

1334
01:25:54,600 --> 01:25:55,800
Yeah, I don't know.

1335
01:25:55,800 --> 01:25:57,900
I'm going to probably have to ruminate on that one.

1336
01:25:59,000 --> 01:26:03,200
So I'm going to go ahead and do the work that I can do now and then

1337
01:26:03,200 --> 01:26:06,200
we'll have to come back to that and figure out why that's not working

1338
01:26:06,800 --> 01:26:08,600
using something clever.

1339
01:26:09,300 --> 01:26:10,500
I'm just not sure what.

1340
01:26:11,900 --> 01:26:14,600
So what I need to do now is just have another one of these little

1341
01:26:14,600 --> 01:26:16,900
compiled dudes, right?

1342
01:26:18,000 --> 01:26:19,400
This one's going to be a lot simpler.

1343
01:26:21,700 --> 01:26:22,300
Here we go.

1344
01:26:28,800 --> 01:26:36,600
So in this case, I don't really have the deaf peel bit anymore.

1345
01:26:40,900 --> 01:26:44,600
Look, so although I could actually just keep this symmetric because I

1346
01:26:44,600 --> 01:26:45,500
guess it doesn't matter.

1347
01:26:45,700 --> 01:26:49,200
So maybe that's a better idea because maybe we can sort of make that

1348
01:26:49,200 --> 01:26:50,000
more generic.

1349
01:26:51,500 --> 01:26:54,900
In fact, what we could do is just put this format string on the

1350
01:26:54,900 --> 01:26:59,400
outside which is kind of interesting as well.

1351
01:27:00,300 --> 01:27:02,900
Or something like that but you know, for now we'll leave it.

1352
01:27:04,500 --> 01:27:08,000
So the header code since its standard for everybody, I want to kind of

1353
01:27:08,000 --> 01:27:09,000
Loft that out.

1354
01:27:09,500 --> 01:27:13,900
So I want to say like, okay, this is the global Shader header code.

1355
01:27:20,500 --> 01:27:22,000
And that's never going to change.

1356
01:27:23,500 --> 01:27:27,500
So instead of, you know, passing header code here,

1357
01:27:28,900 --> 01:27:30,600
we'll pass Global Shader header code.

1358
01:27:35,500 --> 01:27:36,500
Double Shader header code.

1359
01:27:44,800 --> 01:27:48,200
so we have the ability to do the Z bios program compile and now we

1360
01:27:48,200 --> 01:27:48,800
need

1361
01:27:52,500 --> 01:27:55,900
the heel composite.

1362
01:27:57,200 --> 01:27:58,600
Compile feel composite.

1363
01:28:02,000 --> 01:28:05,400
And yeah, so this is going to be much simpler.

1364
01:28:06,600 --> 01:28:11,700
The vertex code in this case is pretty much going to do nothing

1365
01:28:12,200 --> 01:28:14,200
because we don't actually need to transform it.

1366
01:28:15,800 --> 01:28:19,100
We have like essentially no inputs other than just a straightforward

1367
01:28:19,100 --> 01:28:23,900
vertex position, which we will then use directly.

1368
01:28:24,700 --> 01:28:29,700
And so the UV is the only other thing we need.

1369
01:28:31,100 --> 01:28:34,400
So I think we're literally talking about this, right?

1370
01:28:36,700 --> 01:28:38,100
So z l position.

1371
01:28:39,300 --> 01:28:39,700
Oops.

1372
01:28:39,700 --> 01:28:42,300
I deleted one too many things there.

1373
01:28:51,100 --> 01:28:51,500
We go.

1374
01:28:56,600 --> 01:28:57,300
Oh no I didn't.

1375
01:28:57,400 --> 01:28:58,800
It's still got the photography at, never mind.

1376
01:28:59,300 --> 01:29:02,900
So we're going to take in a Vertex position and we're just going to

1377
01:29:02,900 --> 01:29:05,400
write it directly to the output.

1378
01:29:05,500 --> 01:29:06,500
We're not gonna do anything to it.

1379
01:29:06,500 --> 01:29:09,300
So we're going to assume that we just get handed the correct things.

1380
01:29:09,300 --> 01:29:09,600
Why?

1381
01:29:09,600 --> 01:29:12,200
Because we're just going to draw a single full screen quad.

1382
01:29:12,200 --> 01:29:13,500
It doesn't get transfer by anything.

1383
01:29:13,600 --> 01:29:17,000
We just need to composite are to peel layers together, right?

1384
01:29:18,100 --> 01:29:18,600
So

1385
01:29:19,700 --> 01:29:21,100
Same is true for the frag movie.

1386
01:29:21,100 --> 01:29:22,800
We're just going to pass it directly through.

1387
01:29:25,600 --> 01:29:28,000
Nothing else to do, right?

1388
01:29:31,100 --> 01:29:32,400
Did I delete the very v as well?

1389
01:29:32,400 --> 01:29:33,000
Yeah, I did.

1390
01:29:40,800 --> 01:29:42,500
So, I did delete one too many things.

1391
01:29:43,400 --> 01:29:43,900
Here we go.

1392
01:29:45,500 --> 01:29:49,100
So we're literally just to pass through all the rest of this stuff

1393
01:29:49,100 --> 01:29:51,100
doesn't happen in this mode.

1394
01:29:52,400 --> 01:29:55,600
So it's literally just like taken the inputs and assign them to the

1395
01:29:55,600 --> 01:29:58,500
outputs that the only thing that's going to do, then we have the

1396
01:29:58,500 --> 01:29:59,500
fragment code.

1397
01:30:00,200 --> 01:30:04,500
And the fragment code only has to do a very simple thing, which is

1398
01:30:04,500 --> 01:30:09,100
pulled the two textures and blend them together so it doesn't need any

1399
01:30:09,100 --> 01:30:10,700
additional information, right?

1400
01:30:10,700 --> 01:30:12,300
It doesn't need anything else.

1401
01:30:12,300 --> 01:30:16,200
Other than just the thing that it's drawing,

1402
01:30:19,400 --> 01:30:23,500
And and that UV coordinates to pull from right?

1403
01:30:24,200 --> 01:30:26,300
And even the UV coordinates actually.

1404
01:30:26,300 --> 01:30:29,000
Now I think about it, we don't really need UV coordinates because

1405
01:30:29,100 --> 01:30:30,100
they're going to be

1406
01:30:32,300 --> 01:30:36,200
Well, okay, so I'm going to leave the UV coordinates in there.

1407
01:30:36,200 --> 01:30:38,900
And the reason that I'm going to leave the UV coordinates in there is

1408
01:30:38,900 --> 01:30:42,000
because if I don't leave the UV coordinates in there, like let's say,

1409
01:30:42,000 --> 01:30:47,300
I just drew a full screen quad and I made that the fragment code

1410
01:30:47,300 --> 01:30:50,500
generate the UV to look up or even, don't even use it.

1411
01:30:50,700 --> 01:30:55,000
You vlookup, it did a textile Fetch and just use the fragment

1412
01:30:55,000 --> 01:30:58,700
coordinate in screen space to fetch into the textures.

1413
01:30:59,100 --> 01:31:00,500
That would work just fine.

1414
01:31:00,600 --> 01:31:02,000
If I never wanted to scale,

1415
01:31:02,200 --> 01:31:08,100
All right, but maybe I want to use this Shader as the final scaling.

1416
01:31:08,100 --> 01:31:13,400
Shader to likes musher stretch the image to better fit the screen or

1417
01:31:13,400 --> 01:31:14,300
something, right?

1418
01:31:16,600 --> 01:31:18,800
Or to do letterboxing, or who knows what?

1419
01:31:19,700 --> 01:31:25,500
So, I'm going to leave the frag UV in there and I'm going to actually

1420
01:31:25,500 --> 01:31:27,400
do the textile fetch.

1421
01:31:29,800 --> 01:31:31,500
Using actual UVS.

1422
01:31:31,800 --> 01:31:34,200
I don't have to do that, but I'm going to do that.

1423
01:31:34,500 --> 01:31:37,600
So that I could get by linear upsampling, if I wanted to.

1424
01:31:38,800 --> 01:31:42,700
So, actually, this is just like he'll 0.

1425
01:31:44,300 --> 01:31:45,400
And peel one.

1426
01:31:50,900 --> 01:31:52,200
And yeah.

1427
01:31:52,200 --> 01:31:56,300
So in this case I've got pl0 pill 0 and peel one.

1428
01:32:06,700 --> 01:32:08,900
I'm going to sample them both from the same UV because again, I'm just

1429
01:32:08,900 --> 01:32:10,500
compositing them together.

1430
01:32:11,100 --> 01:32:14,300
And then, what I want to do is I want to Output a shaded color.

1431
01:32:14,800 --> 01:32:19,800
So in this case, if we don't have srgb, I have to again.

1432
01:32:19,800 --> 01:32:21,200
Emulate it, right?

1433
01:32:24,000 --> 01:32:29,000
So let's go ahead here and see if I've got Shader semtex read.

1434
01:32:38,100 --> 01:32:41,700
So, a couple of other things I'm thinking about will get those second.

1435
01:32:42,200 --> 01:32:44,300
So I do want to still simulate this, right?

1436
01:32:44,300 --> 01:32:51,200
So I want to square on the way in, if I don't have that normally

1437
01:32:56,500 --> 01:32:58,100
And screw it on the way out.

1438
01:33:01,800 --> 01:33:02,900
Because I only need to do one.

1439
01:33:07,300 --> 01:33:08,600
I don't need discarding.

1440
01:33:14,000 --> 01:33:15,000
At least, not yet.

1441
01:33:22,600 --> 01:33:28,300
And so now all I should have to do is say well, the first peel and the

1442
01:33:28,300 --> 01:33:29,100
second po.

1443
01:33:32,400 --> 01:33:36,500
So in this case I've got a kind of a choice about which PL.

1444
01:33:36,500 --> 01:33:38,200
Let's number them the way we would number them.

1445
01:33:38,200 --> 01:33:41,300
So appeal 0 is the first is the frontmost thing.

1446
01:33:41,500 --> 01:33:46,900
So we want to do is take the alpha of Peel 0 and use that to blend

1447
01:33:46,900 --> 01:33:51,600
with the the thing that's behind it.

1448
01:33:51,900 --> 01:34:00,700
Now we might as well just use the actual premultiplied Alpha properly

1449
01:34:00,700 --> 01:34:01,100
here.

1450
01:34:01,100 --> 01:34:02,400
So we might as well.

1451
01:34:02,500 --> 01:34:05,300
Pre multiply the alpha of this thing we're blending.

1452
01:34:06,300 --> 01:34:10,200
So what I want to do is say well okay I don't really need to lerp in

1453
01:34:10,200 --> 01:34:11,000
that case.

1454
01:34:11,200 --> 01:34:14,400
I'm going to add peels peel zero directly.

1455
01:34:14,600 --> 01:34:19,400
So the only thing I really need to do is just take one - its Alpha

1456
01:34:19,400 --> 01:34:20,000
value.

1457
01:34:22,500 --> 01:34:25,300
And multiply that by peel one, right?

1458
01:34:25,300 --> 01:34:27,900
So all I'm going to do is I know I'm going to use the full

1459
01:34:27,900 --> 01:34:31,400
contribution from peel 0 because I know that it's already been

1460
01:34:31,400 --> 01:34:34,200
modulated by its own Alpha, right?

1461
01:34:35,400 --> 01:34:37,100
Because that's how we had it set up.

1462
01:34:37,800 --> 01:34:39,100
That's all we have everything set up.

1463
01:34:40,400 --> 01:34:44,900
So, what I want to do is now take the background peel and I want to

1464
01:34:44,900 --> 01:34:51,700
turn off that Alpha darkening for it and then just I'm just going to

1465
01:34:51,700 --> 01:34:56,600
use a final composite that just one - that that Alpha four of the

1466
01:34:56,600 --> 01:35:01,000
front peel to pull in as much of that background color as I should

1467
01:35:01,000 --> 01:35:02,900
based on how far I can see through it.

1468
01:35:03,100 --> 01:35:03,600
Right?

1469
01:35:05,500 --> 01:35:07,300
And that's all I should really need to do.

1470
01:35:08,200 --> 01:35:11,500
I think for the compact for the peel composite,

1471
01:35:13,900 --> 01:35:17,900
Now, the peel composite doesn't have most of these things, right?

1472
01:35:18,700 --> 01:35:23,300
It's got peel, sampler, one or sorry, peel.

1473
01:35:23,300 --> 01:35:23,700
Zero.

1474
01:35:23,700 --> 01:35:24,200
Sampler.

1475
01:35:26,200 --> 01:35:31,700
And peel one sampler, like so and it's got the view the UV P.

1476
01:35:33,300 --> 01:35:34,100
It's got well,

1477
01:35:37,600 --> 01:35:40,500
I can still query these but they'll just get bound to nothing's, which

1478
01:35:40,500 --> 01:35:41,400
is probably fine.

1479
01:35:42,900 --> 01:35:44,100
So, all of, that's fine.

1480
01:35:46,600 --> 01:35:50,300
And now I will have a program that actually does this.

1481
01:35:51,000 --> 01:35:55,000
This composite for me and which I can call it the end to bring the two

1482
01:35:55,000 --> 01:35:58,900
shaders together to bring the two depth peels together.

1483
01:36:00,000 --> 01:36:04,000
And so what I can do is I can call that and basically make a thing

1484
01:36:04,000 --> 01:36:04,300
here.

1485
01:36:28,500 --> 01:36:32,100
And now I've got a third Shader, that's does nothing other than that

1486
01:36:32,100 --> 01:36:32,700
one.

1487
01:36:36,400 --> 01:36:37,600
That one operation.

1488
01:36:44,200 --> 01:36:45,300
Global Shader.

1489
01:36:45,300 --> 01:36:46,100
Heather copes.

1490
01:36:46,100 --> 01:36:48,300
I got a capital l there.

1491
01:36:53,800 --> 01:36:56,400
And this should be compiled, he'll composite.

1492
01:36:57,800 --> 01:37:01,800
And so now I've got that one in and if there's any errors here, it'll

1493
01:37:01,800 --> 01:37:05,800
tell me Undeclared, identifier GL position.

1494
01:37:09,200 --> 01:37:10,300
That's not good.

1495
01:37:25,700 --> 01:37:26,300
There we go.

1496
01:37:36,500 --> 01:37:37,800
Okay.

1497
01:37:43,300 --> 01:37:44,200
Let's try that more time.

1498
01:37:45,000 --> 01:37:45,500
There we go.

1499
01:37:49,600 --> 01:37:49,900
On it.

1500
01:37:49,900 --> 01:37:54,000
If I'd identifier Undeclared identifier result color.

1501
01:37:56,700 --> 01:37:57,600
I agree with you.

1502
01:38:00,600 --> 01:38:03,800
We did not declare that and we should have, let's grab that again.

1503
01:38:06,000 --> 01:38:06,400
Yeah.

1504
01:38:17,200 --> 01:38:22,000
Alright, so now we have the ability to composite the to depth Peels

1505
01:38:24,000 --> 01:38:26,900
and so what we want to do is have a place where that actually gets

1506
01:38:26,900 --> 01:38:31,400
done and that is, you know, going to be right here at the end.

1507
01:38:31,600 --> 01:38:34,200
So previously what we were doing is binding, frame buffers and

1508
01:38:34,200 --> 01:38:39,100
bleeding from the flamebook frame buffer using the split.

1509
01:38:39,200 --> 01:38:45,000
The reason we were doing it that way was just because we already had

1510
01:38:45,000 --> 01:38:46,000
to do.

1511
01:38:47,000 --> 01:38:50,000
We knew we had to do a blind in order to resolve our multi samples.

1512
01:38:50,000 --> 01:38:53,400
And since we're not multi sampling anymore, we can sort of say, okay?

1513
01:38:53,400 --> 01:38:58,600
This is no longer the way that we do, our final draw to the screen, so

1514
01:38:58,600 --> 01:38:59,900
we still do want to set.

1515
01:39:00,000 --> 01:39:04,900
Drawing frame buffer to the screen but now what we want to do is more

1516
01:39:04,900 --> 01:39:08,700
of a used program sort of a situation, right?

1517
01:39:10,100 --> 01:39:15,900
So what we want to do here is say okay, let's go ahead and use that

1518
01:39:15,900 --> 01:39:17,500
program Open Jill.

1519
01:39:19,500 --> 01:39:20,700
Peel composite.

1520
01:39:23,300 --> 01:39:26,100
So now we'll like have a use program.

1521
01:39:26,100 --> 01:39:32,000
Begin and end as before and we need to do the active texture stuff as

1522
01:39:32,000 --> 01:39:32,400
well.

1523
01:39:32,600 --> 01:39:33,200
Same way.

1524
01:39:33,700 --> 01:39:36,100
Oops, what happened there?

1525
01:39:47,900 --> 01:39:52,000
And so, what I want to do here is I want to be able to bind these two

1526
01:39:52,000 --> 01:39:52,800
textures.

1527
01:39:56,600 --> 01:39:57,200
I want to.

1528
01:39:59,100 --> 01:40:01,600
Instead of pulling from the depths, like I was doing for, I want to

1529
01:40:01,600 --> 01:40:06,800
basically pull from the to peels the actual color values.

1530
01:40:06,800 --> 01:40:08,200
I don't care about the depths anymore.

1531
01:40:09,800 --> 01:40:12,800
And then I want to you know I probably still want to do this deal

1532
01:40:12,800 --> 01:40:17,600
viewport call to get the draw regions set properly.

1533
01:40:18,400 --> 01:40:22,100
And then what I want to do is I want to just output a single triangle

1534
01:40:22,100 --> 01:40:25,600
strip that occupies the entire screen, right?

1535
01:40:26,900 --> 01:40:29,300
So what I'm going to do is I'm going to do the exact same thing I was

1536
01:40:29,300 --> 01:40:30,200
doing here.

1537
01:40:31,600 --> 01:40:37,900
In terms of like the buffer data and vertex, dreaming, and all that

1538
01:40:37,900 --> 01:40:41,100
stuff, except what I'm going to do is we're going to point it out of

1539
01:40:41,100 --> 01:40:46,200
buffer that is just a hard-coded buffer of four vertices that are

1540
01:40:46,200 --> 01:40:51,000
exactly the screen size big, right?

1541
01:40:58,200 --> 01:41:00,300
So, this textured vertex thing we've got here.

1542
01:41:03,600 --> 01:41:05,000
With puv color.

1543
01:41:07,300 --> 01:41:14,100
So I know that it's p UV color, the color in this case is irrelevant,

1544
01:41:14,100 --> 01:41:15,200
it doesn't get used.

1545
01:41:21,700 --> 01:41:24,200
And here I need to Output that try strip.

1546
01:41:24,900 --> 01:41:29,800
And so what I need to do to Output the try strip is I need to since

1547
01:41:29,800 --> 01:41:35,700
I'm not doing any kind of a mapping from from anything to anything

1548
01:41:35,700 --> 01:41:39,300
here, I'm literally just passing raw values down.

1549
01:41:39,600 --> 01:41:43,100
I know that it's going to want clip space as the output, right?

1550
01:41:43,100 --> 01:41:44,500
And I'm not doing a transform.

1551
01:41:45,000 --> 01:41:49,400
So I know that I'm going to start at negative 1 on my far side, right?

1552
01:41:49,400 --> 01:41:51,000
And I know I want to be at the top,

1553
01:41:51,400 --> 01:41:52,500
We're doing a try strip.

1554
01:41:53,100 --> 01:41:57,800
So I know that I'm going to do - 110 I didn't get to go to the bottom

1555
01:41:58,000 --> 01:41:58,700
of the screen.

1556
01:42:01,600 --> 01:42:02,100
Right.

1557
01:42:03,800 --> 01:42:06,500
See what I'm getting at here, I then got to go over.

1558
01:42:08,300 --> 01:42:09,000
And again.

1559
01:42:11,900 --> 01:42:15,600
Similarly, now I've got the UVS so I now know that, you know, I'm at

1560
01:42:15,600 --> 01:42:18,000
the left side top, right?

1561
01:42:18,000 --> 01:42:20,200
That's going to be 0 1 for the UVs.

1562
01:42:22,300 --> 01:42:23,900
Then I'm in the left side, bottom.

1563
01:42:27,400 --> 01:42:29,300
And then do the same thing, but over one.

1564
01:42:31,900 --> 01:42:39,700
So basically I can just pass this directly down to the buffer data

1565
01:42:40,700 --> 01:42:41,400
like so.

1566
01:42:44,700 --> 01:42:48,100
Any Theory, everything else here should work, right?

1567
01:42:48,800 --> 01:42:51,500
And let me go ahead and put that up before I use the program, there we

1568
01:42:51,500 --> 01:42:51,800
go.

1569
01:43:02,000 --> 01:43:05,100
We'd be saying here too few Arguments for call.

1570
01:43:07,700 --> 01:43:09,600
How many arguments did you want for the call?

1571
01:43:16,300 --> 01:43:16,600
Haha.

1572
01:43:18,300 --> 01:43:21,300
Miss my stream, embrace my hint, my usage hint.

1573
01:43:24,700 --> 01:43:25,200
There we go.

1574
01:43:32,700 --> 01:43:37,300
So now in use program, begin that takes that setup thing.

1575
01:43:39,000 --> 01:43:40,300
And I don't really have one of those.

1576
01:43:40,300 --> 01:43:43,000
So I want to see what that's actually used for.

1577
01:43:43,500 --> 01:43:44,100
So you can see it.

1578
01:43:44,100 --> 01:43:47,200
Sues for setting like a bunch of parameters, we don't care about in

1579
01:43:47,200 --> 01:43:47,900
the Shader.

1580
01:43:48,400 --> 01:43:51,200
So in theory, I should be able to just say hey, there's a render

1581
01:43:51,200 --> 01:43:51,800
setup.

1582
01:43:55,900 --> 01:43:58,800
It's not going to do anything by the way.

1583
01:44:00,400 --> 01:44:06,400
And in this case, we're just drawing the first four things, so that

1584
01:44:06,400 --> 01:44:07,800
should be it.

1585
01:44:08,100 --> 01:44:13,700
Alright, so, in theory, now, if we debug this, we should be able to do

1586
01:44:13,700 --> 01:44:15,000
our final composite

1587
01:44:17,700 --> 01:44:18,300
Invalid by.

1588
01:44:18,300 --> 01:44:22,100
Okay, so it looks like what happens here is when we don't have a

1589
01:44:22,100 --> 01:44:27,000
Vertex array of a particular type, we are not allowed to specify that

1590
01:44:27,300 --> 01:44:29,600
right because what it's complaining about here is, you know, we don't

1591
01:44:29,600 --> 01:44:31,700
have a color array on this one.

1592
01:44:33,000 --> 01:44:35,500
And so, it's complaining about the fact that we don't have a color

1593
01:44:35,500 --> 01:44:39,000
array, and it can't set that vertex to trim pointer.

1594
01:44:39,600 --> 01:44:42,500
What I might do here, just to make it a little easier on ourselves

1595
01:44:42,500 --> 01:44:43,200
since we don't care.

1596
01:44:43,200 --> 01:44:45,800
If they all right, fine, you do get a color.

1597
01:44:46,000 --> 01:44:52,200
If you really wanted a color so badly, you can have one and you know

1598
01:44:52,200 --> 01:44:55,300
maybe we use it to tent the screen or something, we could come up with

1599
01:44:55,300 --> 01:44:57,700
an excuse for why that might be the case.

1600
01:44:57,700 --> 01:44:59,800
Just so we have less variability in here.

1601
01:45:00,000 --> 01:45:02,400
Is literally the only reason I'm doing this because I could go check

1602
01:45:02,400 --> 01:45:03,600
the value as well.

1603
01:45:04,400 --> 01:45:04,800
Etc.

1604
01:45:04,800 --> 01:45:05,400
Etc.

1605
01:45:06,700 --> 01:45:09,400
So all I'm going to do in here is when the frag color comes in.

1606
01:45:11,600 --> 01:45:17,300
All I'm going to do is say well, alright, let's do frag color times.

1607
01:45:21,200 --> 01:45:25,200
So it's a modulation if you want additional modulation on there, you

1608
01:45:25,200 --> 01:45:31,200
got one so then I'll say oh okay, you know, you've got an inn before

1609
01:45:31,200 --> 01:45:32,200
Frog color.

1610
01:45:33,900 --> 01:45:34,900
I just burped color.

1611
01:45:36,500 --> 01:45:39,500
Smooth out before.

1612
01:45:43,100 --> 01:45:43,800
Red color.

1613
01:45:44,600 --> 01:45:49,000
And in this case, I'm just going to pass it directly through.

1614
01:45:50,900 --> 01:45:54,800
So then what I need to do is just make these so they actually do have

1615
01:46:01,600 --> 01:46:04,400
all white because at the moment, I don't actually want to change the

1616
01:46:04,400 --> 01:46:08,400
color and then we'll see if that takes care of that.

1617
01:46:11,800 --> 01:46:15,100
Are 132 parse error on in.

1618
01:46:16,600 --> 01:46:19,300
I must have been sloppy with that there.

1619
01:46:19,300 --> 01:46:20,300
Let's take a look.

1620
01:46:22,200 --> 01:46:24,200
Yep, just forgot a semicolon.

1621
01:46:31,900 --> 01:46:34,700
Philip, I'll just a fragment Shader field compared with the following

1622
01:46:34,700 --> 01:46:37,000
are wrong, operand types, no operation Stars.

1623
01:46:37,000 --> 01:46:40,200
This takes a left hand type of smooth and quote, Vector for, and okay.

1624
01:46:40,200 --> 01:46:45,200
So that's a 3 & A 4 problem, fair enough?

1625
01:46:50,800 --> 01:46:51,400
All right.

1626
01:46:53,500 --> 01:46:57,300
So now what we're actually seeing

1627
01:47:00,200 --> 01:47:04,800
I guess in reality even is, we are now actually seeing the real

1628
01:47:11,400 --> 01:47:13,200
The real result of the composite even.

1629
01:47:16,500 --> 01:47:18,800
It's not correct.

1630
01:47:20,600 --> 01:47:23,400
But we are actually seeing it draw, right?

1631
01:47:23,400 --> 01:47:26,600
Because we don't have a frame buffer blind anymore.

1632
01:47:27,100 --> 01:47:30,600
So we are actually doing this this draw and we are actually seeing it

1633
01:47:30,600 --> 01:47:31,900
come out, which is nice.

1634
01:47:32,400 --> 01:47:35,800
We're binding, texture, 0 and texture one here.

1635
01:47:36,200 --> 01:47:37,700
Oh, I've got these backwards.

1636
01:47:40,300 --> 01:47:45,300
This is texture one that's texture 0 and we've got a little bit more

1637
01:47:45,300 --> 01:47:48,500
work to do here but we'll take a look at that in a second.

1638
01:47:49,300 --> 01:47:50,500
So we have to go fix that.

1639
01:47:50,500 --> 01:47:52,700
I don't know why, that, that should have changed.

1640
01:47:52,700 --> 01:47:56,000
The fact that the switching, these didn't make any difference as a

1641
01:47:56,000 --> 01:47:59,900
little disturbing to me in a day, full of disturbing things.

1642
01:48:01,400 --> 01:48:04,200
so, let me just go do one thing though that I wanted to do before I

1643
01:48:04,200 --> 01:48:04,900
forget,

1644
01:48:06,900 --> 01:48:09,600
Which is if you look what's happening here, you can see, we've got

1645
01:48:09,600 --> 01:48:13,700
this disabled GL blend happening here.

1646
01:48:13,900 --> 01:48:21,100
And, you know, the, the, the blend Funk is assuming that that everyone

1647
01:48:21,100 --> 01:48:27,100
already has been pre multiplied by whatever their Alpha value is,

1648
01:48:27,600 --> 01:48:28,200
right?

1649
01:48:28,800 --> 01:48:32,200
And so, I just want to make sure that that's actually going to work

1650
01:48:32,200 --> 01:48:32,900
properly.

1651
01:48:33,000 --> 01:48:35,700
So when people actually draw with

1652
01:48:36,500 --> 01:48:37,700
With the depth of feeling stuff.

1653
01:48:37,700 --> 01:48:40,200
I want to make sure that they're actually going to produce the correct

1654
01:48:40,200 --> 01:48:40,600
color.

1655
01:48:41,500 --> 01:48:43,900
So if I take a look here at

1656
01:48:47,200 --> 01:48:52,000
like, if you look at the fragment code here for when we're drawing you

1657
01:48:52,000 --> 01:48:55,300
can see that we pass through the the alpha but the RGB

1658
01:48:57,500 --> 01:48:58,000
Value.

1659
01:48:58,000 --> 01:49:00,600
Let's just make sure by frag color.

1660
01:49:00,600 --> 01:49:05,100
So you can see that we are properly modulating all of the colors by

1661
01:49:05,100 --> 01:49:09,800
the frag color but not necessarily by the alpha, right?

1662
01:49:10,100 --> 01:49:10,700
So,

1663
01:49:16,100 --> 01:49:17,700
Just looking at that.

1664
01:49:21,400 --> 01:49:24,500
That seems to be incorrect, right?

1665
01:49:24,500 --> 01:49:29,100
Like the texture sample that's being written out here, Alpha value

1666
01:49:29,100 --> 01:49:35,200
wise, when I, when I pull in a texture sample, the alpha value, the

1667
01:49:35,200 --> 01:49:38,500
RGB of the texture sample is going to be properly, modulated.

1668
01:49:38,800 --> 01:49:40,900
But the fragment colors Alpha,

1669
01:49:42,500 --> 01:49:47,300
I, I don't know if it actually is right.

1670
01:49:47,900 --> 01:49:50,300
I assume it is if it is then it's okay.

1671
01:49:50,300 --> 01:49:52,000
As long as this frag color is properly.

1672
01:49:52,000 --> 01:49:55,500
Modulated, then we're okay if it's not, then we're not.

1673
01:49:56,100 --> 01:49:59,700
Now the problem that we then face is if we are depth peeling.

1674
01:50:00,200 --> 01:50:04,700
We want the back most depth that's, you know, it's not going to get

1675
01:50:04,900 --> 01:50:05,600
pulled in.

1676
01:50:07,000 --> 01:50:08,400
Nothing behind is going to get pulled in.

1677
01:50:08,800 --> 01:50:11,300
We don't want it to be darkened, by its Alpha value.

1678
01:50:11,300 --> 01:50:13,600
We want it to still be Fulbright because we're never going to draw

1679
01:50:13,600 --> 01:50:14,300
anything behind it.

1680
01:50:14,300 --> 01:50:19,300
So even if it was Alpha, we don't want it to be any more Alpha than

1681
01:50:19,300 --> 01:50:20,300
that, right?

1682
01:50:22,500 --> 01:50:26,700
So I don't know what the best way to do that is probably the best way

1683
01:50:26,700 --> 01:50:29,100
to do that, I guess is to just handle it here.

1684
01:50:31,100 --> 01:50:35,700
So basically what we do is when we pull in the peel, one that were

1685
01:50:35,800 --> 01:50:36,300
sort of

1686
01:50:36,800 --> 01:50:43,800
Going behind, we want to undo the alpha fade on that right.

1687
01:50:44,400 --> 01:50:48,800
We want to basically say hey Pele 1s, Alpha value.

1688
01:50:54,000 --> 01:50:59,100
We want to undo, you know, previously we had done this to it.

1689
01:51:01,500 --> 01:51:03,900
We done like the red channel, right?

1690
01:51:03,900 --> 01:51:06,100
Like if we imagine what the red channel is,

1691
01:51:07,800 --> 01:51:13,400
We wrote out the red Channel times the alpha value, but we just want

1692
01:51:13,400 --> 01:51:18,500
to actually use the unadulterated red, but we only have this.

1693
01:51:18,900 --> 01:51:21,300
So, if we want to solve for this, in terms of this, right?

1694
01:51:21,300 --> 01:51:23,200
We just divide both sides by a.

1695
01:51:23,200 --> 01:51:26,800
So we have our Prime over a equals R, right?

1696
01:51:29,000 --> 01:51:34,500
So given that we want to do is do something like, oh, okay, we've got

1697
01:51:36,600 --> 01:51:38,900
An inverse, a equals 1 over a.

1698
01:51:39,300 --> 01:51:45,800
Now, a might be 0 is the only tricky part and if a is zero then

1699
01:51:45,800 --> 01:51:49,100
there's really nothing we can do because there's no way to get the

1700
01:51:49,100 --> 01:51:55,000
value back at all and yeah you know it shouldn't have drawn.

1701
01:51:55,500 --> 01:51:59,100
So in theory we shouldn't ever really see that except in the pretty

1702
01:51:59,100 --> 01:52:04,300
pretty much ever but we can if we want to try to work around that as

1703
01:52:04,300 --> 01:52:05,700
well, and just say

1704
01:52:05,900 --> 01:52:14,300
Inverse a equals, you know, 0 and if he'll one a is greater than zero.

1705
01:52:15,600 --> 01:52:22,500
Then in verse a equals 1 over, I basically just the safe divide right.

1706
01:52:23,400 --> 01:52:26,500
Then what we want to do is say all right, the peel one color that was

1707
01:52:26,500 --> 01:52:29,600
in coming for us, right that RGB.

1708
01:52:30,700 --> 01:52:35,200
I just want to multiply it by its inverse Alpha so that will undo that

1709
01:52:35,300 --> 01:52:38,900
that fade that would have been on it and that's the end of it.

1710
01:52:42,100 --> 01:52:42,600
All right.

1711
01:52:46,100 --> 01:52:47,300
So that's it.

1712
01:52:47,800 --> 01:52:49,400
That's where we're pretty much out of time.

1713
01:52:49,400 --> 01:52:51,700
So we have a lot of divulging to do because there's some strange stuff

1714
01:52:51,700 --> 01:52:53,600
going on and really wish I had a GPU debugger.

1715
01:52:53,600 --> 01:52:55,400
I don't on this card.

1716
01:52:55,400 --> 01:52:56,100
Can't do it.

1717
01:52:56,200 --> 01:52:57,000
It's too old.

1718
01:52:58,400 --> 01:53:00,100
But you know, that's just where we're at.

1719
01:53:00,100 --> 01:53:03,800
I do want to do a quick check here for result color.

1720
01:53:04,000 --> 01:53:08,000
I want to set the red Channel, 21, always just to make sure we're

1721
01:53:08,000 --> 01:53:09,500
actually seeing what we think we're seeing.

1722
01:53:10,700 --> 01:53:16,800
It doesn't look like we are so it looks like we're still kind of for

1723
01:53:17,000 --> 01:53:18,100
whatever reason here.

1724
01:53:29,800 --> 01:53:31,700
So something's up, right?

1725
01:53:31,700 --> 01:53:34,700
Because we should be seeing a red screen at this point.

1726
01:53:35,400 --> 01:53:39,000
If we were actually using this this peel composite Shader.

1727
01:53:39,700 --> 01:53:43,800
So when we're getting to the end here, it's unclear to me how we're

1728
01:53:43,800 --> 01:53:47,100
seeing this Frame.

1729
01:53:47,100 --> 01:53:48,300
Buffer zero here.

1730
01:53:50,800 --> 01:53:55,500
So something's very strange and maybe this has to do with what we're

1731
01:53:55,500 --> 01:53:56,400
seeing as well.

1732
01:53:56,400 --> 01:53:56,900
I don't know.

1733
01:53:58,300 --> 01:53:59,800
So, let's see what's going on here.

1734
01:54:00,900 --> 01:54:04,000
Are we not creating our frame buffers consistently?

1735
01:54:05,200 --> 01:54:05,900
Let's see.

1736
01:54:06,800 --> 01:54:10,200
So if we do an opengl bind frame buffer,

1737
01:54:13,200 --> 01:54:21,400
And we get out the global frame buffer handles can see in theory.

1738
01:54:24,500 --> 01:54:27,200
We should always be drawing to one of those and never drawing to the

1739
01:54:27,200 --> 01:54:27,800
screen.

1740
01:54:29,100 --> 01:54:29,700
Right?

1741
01:54:30,400 --> 01:54:34,300
So if I come in here and say Max render, Target index is 1.

1742
01:54:34,600 --> 01:54:38,400
And I've going to do these two, I'm going to go through and the global

1743
01:54:38,400 --> 01:54:38,600
frame.

1744
01:54:38,600 --> 01:54:41,200
Buffer count is should start out at zero, right?

1745
01:54:41,700 --> 01:54:46,900
And in fact, let's just make sure that this is actually the case by

1746
01:54:46,900 --> 01:54:50,500
stepping into it, because I guess there's no sense in just assuming,

1747
01:55:01,000 --> 01:55:03,900
So now we're going to generate two frame buffers, right?

1748
01:55:03,900 --> 01:55:05,500
So here is the first frame buffer.

1749
01:55:16,200 --> 01:55:17,900
Sector seven and texture eight.

1750
01:55:26,000 --> 01:55:29,100
Did we already do the global frame buffer handles Parts?

1751
01:55:29,100 --> 01:55:30,900
Where did we generate Jill?

1752
01:55:30,900 --> 01:55:32,100
Jen Frame buffers.

1753
01:55:32,100 --> 01:55:34,700
New count is one.

1754
01:55:35,200 --> 01:55:38,200
That is incorrect.

1755
01:55:39,300 --> 01:55:45,200
That is totally, totally wrong in all possible ways.

1756
01:55:52,900 --> 01:56:00,300
Totally wrong in all possible, ways, ladies and gentlemen, that is so

1757
01:56:00,300 --> 01:56:01,100
wrong.

1758
01:56:07,100 --> 01:56:08,700
Totally wrong.

1759
01:56:09,200 --> 01:56:13,100
And that is probably part of the reason.

1760
01:56:15,000 --> 01:56:19,400
There are other thing wasn't working either.

1761
01:56:24,100 --> 01:56:25,500
Much better.

1762
01:56:25,600 --> 01:56:28,500
Now, we're getting actual problems that we should have seen.

1763
01:56:28,500 --> 01:56:33,000
Okay, good, let's quickly go back to what I was doing before where we

1764
01:56:33,000 --> 01:56:33,500
were bleeding.

1765
01:56:33,500 --> 01:56:34,100
These two,

1766
01:56:36,800 --> 01:56:39,000
And now, let's see what we actually see.

1767
01:56:39,000 --> 01:56:41,500
So, here's what's in frame buffer 0?

1768
01:56:43,700 --> 01:56:47,900
And that does look like what I want to be in frame by 40 and now let's

1769
01:56:47,900 --> 01:56:48,900
look at what's in frame buffer.

1770
01:56:48,900 --> 01:56:49,600
One

1771
01:56:54,800 --> 01:56:56,600
And that is lovely.

1772
01:56:56,600 --> 01:56:59,700
That is exactly what I wanted to see in frame by 41.

1773
01:57:00,700 --> 01:57:02,300
Happy day.

1774
01:57:02,300 --> 01:57:07,700
Happiness is of special deliciousness, right?

1775
01:57:10,100 --> 01:57:11,400
You know what I'm saying to you?

1776
01:57:12,500 --> 01:57:13,500
Look at that.

1777
01:57:13,600 --> 01:57:14,700
That's gorgeous.

1778
01:57:14,800 --> 01:57:16,200
Perfect, wonderful.

1779
01:57:16,800 --> 01:57:22,700
So now, all we actually have to do tomorrow is do this Shader

1780
01:57:22,700 --> 01:57:28,000
properly, which probably won't take too long, because it's very simple

1781
01:57:28,900 --> 01:57:32,300
and then we will have finished our deaf feeling for now, I will go to

1782
01:57:32,300 --> 01:57:33,700
the question and answer.

1783
01:57:40,800 --> 01:57:42,800
A brief question-and-answer.

1784
01:58:19,300 --> 01:58:20,200
Sasa superb.

1785
01:58:20,200 --> 01:58:21,700
I tend to see a lot of apis.

1786
01:58:21,700 --> 01:58:25,300
For example, sdl things like destroy window calls, if this is the last

1787
01:58:25,300 --> 01:58:28,000
thing you do before, exiting the app, doesn't the operating system.

1788
01:58:28,000 --> 01:58:29,300
Take care of this for you.

1789
01:58:30,100 --> 01:58:31,100
Yes, it does.

1790
01:58:31,400 --> 01:58:33,600
But of course, you know, you need

1791
01:58:37,000 --> 01:58:41,500
Sometimes the ability to when you're not exiting the app close and

1792
01:58:41,500 --> 01:58:45,300
reopen window or open two windows and then close one of them later or

1793
01:58:45,300 --> 01:58:45,800
stuff like this.

1794
01:58:45,800 --> 01:58:51,900
So you know you don't need if you're actually exiting then no, you

1795
01:58:51,900 --> 01:58:53,600
don't need to close your window.

1796
01:58:54,300 --> 01:58:58,100
But if you're not as exiting and you need to close the window for

1797
01:58:58,100 --> 01:59:01,200
another reason, that's why those apis exist, I don't know which part

1798
01:59:01,200 --> 01:59:03,300
of sdl you're talking about there or whatever.

1799
01:59:05,000 --> 01:59:06,600
But like for example, if you're just

1800
01:59:06,700 --> 01:59:09,400
Can white sdl has the ability to shut down the window.

1801
01:59:09,400 --> 01:59:14,200
Well, you know, maybe your game created a window on one Monitor and

1802
01:59:14,200 --> 01:59:16,800
was like drawing some stuff, but then wanted to close it down and open

1803
01:59:16,800 --> 01:59:18,500
it on a different monitor or something.

1804
01:59:18,500 --> 01:59:23,100
Or, you know, it detected that the user asked it to switch from full

1805
01:59:23,100 --> 01:59:26,100
screen to windowed and wanted to close the window and open a new

1806
01:59:26,100 --> 01:59:27,300
window to do that.

1807
01:59:27,400 --> 01:59:27,900
Who knows?

1808
01:59:27,900 --> 01:59:28,100
Right.

1809
01:59:28,100 --> 01:59:31,500
There's lots of reasons you could have.

1810
01:59:33,600 --> 01:59:34,100
Right.

1811
01:59:45,000 --> 01:59:47,400
Del Conte, have you considered keeping the Shader code as separate

1812
01:59:47,400 --> 01:59:50,700
files so you can do automatic reload on Save and the editor, for

1813
01:59:50,700 --> 01:59:54,700
example, or do you think there won't be enough Shader code to motivate

1814
01:59:54,700 --> 01:59:55,100
the work?

1815
01:59:55,100 --> 01:59:59,700
Yeah, I don't know.

1816
01:59:59,700 --> 01:59:59,900
Like

1817
02:00:01,000 --> 02:00:04,300
I don't didn't anticipate doing much Shader code, so I don't really

1818
02:00:04,300 --> 02:00:09,500
know how much will do, but at the moment we haven't had too much

1819
02:00:09,500 --> 02:00:10,100
trouble with that.

1820
02:00:10,100 --> 02:00:11,600
So it's not super worth it.

1821
02:00:12,500 --> 02:00:14,800
Keeping them in separate files.

1822
02:00:14,800 --> 02:00:16,100
I don't think I would do that.

1823
02:00:16,100 --> 02:00:18,800
Anyway, since we already have like full Kobe loading, I'd probably

1824
02:00:18,800 --> 02:00:21,400
just move the shaders into something that just happened.

1825
02:00:21,400 --> 02:00:26,600
When we recompile that way, you get a recompile and your Shader code

1826
02:00:26,600 --> 02:00:29,500
and your stuff around the Shader code.

1827
02:00:30,200 --> 02:00:32,900
Both happens like keeping shaders in separate.

1828
02:00:32,900 --> 02:00:34,200
Files is kind of weak sauce, right?

1829
02:00:34,200 --> 02:00:37,700
Because that only reloads the shaders, whereas I would rather have the

1830
02:00:37,700 --> 02:00:41,700
whole thing work since we already have that for the other part of it.

1831
02:00:53,300 --> 02:00:56,500
But yes, so why were we not seeing anything?

1832
02:00:56,500 --> 02:00:59,200
With this guy, here's the vertices.

1833
02:01:16,500 --> 02:01:17,600
Is the depth.

1834
02:01:18,400 --> 02:01:24,300
We want to get Jill to save all the depth test here though, right?

1835
02:01:31,800 --> 02:01:33,700
Not that there should have been any depth testing.

1836
02:01:34,900 --> 02:01:36,700
It's weird that we don't see anything at all.

1837
02:02:07,600 --> 02:02:10,900
all right, so we know that we're at least seeing

1838
02:02:15,600 --> 02:02:18,500
that the viewport is act is actually set correctly.

1839
02:02:19,100 --> 02:02:21,900
So what we're not sure about is ygl.

1840
02:02:21,900 --> 02:02:24,400
Draw arrays is busted.

1841
02:02:40,900 --> 02:02:43,300
Probably should set the scissors as well.

1842
02:02:51,100 --> 02:02:52,800
But I can't say, I know why.

1843
02:02:52,800 --> 02:02:55,000
Anything else would be wrong.

1844
02:03:14,900 --> 02:03:16,800
I said, why don't I just disable scissor?

1845
02:03:28,400 --> 02:03:29,600
Then I set it at all.

1846
02:03:40,100 --> 02:03:40,700
It from bit.

1847
02:03:40,700 --> 02:03:43,000
I think your last heart could have giant triangle ship UV mapping

1848
02:03:43,000 --> 02:03:47,100
credit has a cut-and-paste bug that may well be true.

1849
02:03:48,700 --> 02:03:51,100
Yes, it does.

1850
02:03:53,400 --> 02:03:53,900
Thank you.

1851
02:03:55,600 --> 02:03:57,900
Unfortunately, I don't think that is enough to save us.

1852
02:03:58,700 --> 02:04:00,600
Hope it was but it's not.

1853
02:04:00,700 --> 02:04:01,000
Yeah.

1854
02:04:10,600 --> 02:04:13,100
By the way, it was pointed out that the compatibility B only works in

1855
02:04:13,100 --> 02:04:15,900
3.2 and I think it says 53.0, okay?

1856
02:04:15,900 --> 02:04:17,000
So that's why it wasn't there.

1857
02:04:19,700 --> 02:04:21,100
But off topic, but why?

1858
02:04:22,800 --> 02:04:26,500
Is not the Jeff and Casey show season 5 on my rocket website.

1859
02:04:29,300 --> 02:04:31,600
I haven't had time to really clean that stuff up.

1860
02:04:43,300 --> 02:04:45,400
So yeah.

1861
02:04:47,800 --> 02:04:48,400
We're correctly.

1862
02:04:48,400 --> 02:04:50,700
Drawing to the front frame buffer.

1863
02:04:54,000 --> 02:04:57,000
We're reading from those two textures.

1864
02:05:05,200 --> 02:05:06,900
But I ain't seen anything.

1865
02:05:20,700 --> 02:05:22,800
And I don't know why.

1866
02:05:24,800 --> 02:05:28,700
But I'm definitely not case anyone was wondering.

1867
02:05:36,200 --> 02:05:39,200
Because we should just see bright red, right?

1868
02:05:39,200 --> 02:05:41,900
Anywhere that this thing is drawing anything.

1869
02:05:52,000 --> 02:05:55,100
I don't know if it's possible that it's getting cold if I wound it

1870
02:05:55,100 --> 02:05:55,500
wrong.

1871
02:05:56,800 --> 02:05:57,600
Still no.

1872
02:06:02,600 --> 02:06:04,700
If it couldn't get front clipped.

1873
02:06:10,500 --> 02:06:13,600
I don't see how because it's going to pass this Z value directly

1874
02:06:13,600 --> 02:06:14,100
through.

1875
02:06:19,200 --> 02:06:21,500
It really shouldn't be in pixels.

1876
02:06:22,700 --> 02:06:24,800
Because it's not going through any kind of transform.

1877
02:06:25,700 --> 02:06:29,800
Yeah, I do not know why we see nothing.

1878
02:06:32,500 --> 02:06:34,000
It's bizarre.

1879
02:06:35,600 --> 02:06:37,100
What if I use a different program?

1880
02:06:40,200 --> 02:06:42,700
One of our programs busted or maybe.

1881
02:06:42,700 --> 02:06:44,700
I'm misremembering.

1882
02:06:44,700 --> 02:06:47,700
What I would need to do to do a pass-through program.

1883
02:07:04,700 --> 02:07:06,100
what happens if we just like,

1884
02:07:08,900 --> 02:07:10,500
Donuts, you know I'm saying?

1885
02:07:13,200 --> 02:07:14,100
Presumably nothing.

1886
02:07:16,500 --> 02:07:18,200
We're just not getting anything out of that Shader.

1887
02:07:18,300 --> 02:07:21,300
All right, well at least we got our death pills working.

1888
02:07:32,600 --> 02:07:36,100
Daniel Colin I was told that you had some issues with rendered talk

1889
02:07:36,100 --> 02:07:39,100
to, you know, if it was related to you having an old GPU, or was it a

1890
02:07:39,100 --> 02:07:40,500
real bug and render doc?

1891
02:07:41,700 --> 02:07:44,500
Well, I guess I don't know what you're referring to exactly the bug.

1892
02:07:44,500 --> 02:07:49,700
We had on stream, trying to use render doc, I think was just because

1893
02:07:49,700 --> 02:07:51,900
it's too old because the graphs cars too old.

1894
02:07:51,900 --> 02:07:53,200
I assume I don't really know.

1895
02:07:53,200 --> 02:07:55,600
I mean, I have no idea when render dark doesn't work.

1896
02:07:55,600 --> 02:07:56,800
I don't know.

1897
02:07:58,300 --> 02:07:59,700
Why it doesn't work, right?

1898
02:07:59,700 --> 02:08:01,100
I just know that it doesn't work.

1899
02:08:02,700 --> 02:08:09,900
So so I'm not 100% certain I assume that it's just too old but it

1900
02:08:09,900 --> 02:08:14,600
might be something else as well for all I know, I do know that I've

1901
02:08:14,600 --> 02:08:17,800
never really successfully gotten rid of dark to work except on one

1902
02:08:17,800 --> 02:08:19,900
machine like a, my laptop.

1903
02:08:19,900 --> 02:08:26,000
It doesn't work to you to use the Intel.

1904
02:08:33,700 --> 02:08:36,200
Yeah, like I can't use the the Intel chip.

1905
02:08:36,300 --> 02:08:37,700
I can't use it with the Intel chip.

1906
02:08:37,700 --> 02:08:40,200
Don't think I've ever been able to use it with is the one Nvidia card.

1907
02:08:40,200 --> 02:08:42,900
So my main demoscene, I've never been able to get using anything else

1908
02:08:42,900 --> 02:08:44,600
and that doesn't mean it doesn't work on other things.

1909
02:08:44,600 --> 02:08:46,000
Just I haven't been able to

1910
02:08:52,200 --> 02:08:55,400
Could you view in the debugger and see if the Shader output sensible

1911
02:08:55,400 --> 02:08:56,200
values?

1912
02:08:56,500 --> 02:08:59,200
No, because we don't have the ability to step through Shader.

1913
02:09:01,800 --> 02:09:05,300
That's would be nice if we had an Insight, you know, if you're running

1914
02:09:05,300 --> 02:09:07,700
inside or something, we could but we can't.

1915
02:09:07,700 --> 02:09:11,900
So the moment we're flying a little bit blind, such a superb in the

1916
02:09:11,900 --> 02:09:12,300
future.

1917
02:09:12,300 --> 02:09:15,700
When John was language is released for public in case, it will be for

1918
02:09:15,700 --> 02:09:16,800
handmade hero, completion.

1919
02:09:16,800 --> 02:09:19,500
Will you switch to use for finishing unfinished parts of the game?

1920
02:09:19,500 --> 02:09:21,300
Or would you stay with C++ to The Bitter End?

1921
02:09:22,300 --> 02:09:25,800
Well yeah, I mean I'm not going to switch languages mid-project that's

1922
02:09:25,800 --> 02:09:26,300
nuts.

1923
02:10:18,500 --> 02:10:19,400
All right.

1924
02:10:19,700 --> 02:10:21,500
Think that is it?

1925
02:10:28,500 --> 02:10:29,700
Let's go ahead and close it down.

1926
02:10:32,600 --> 02:10:34,400
Thank you everyone for joining me for handmade here.

1927
02:10:34,400 --> 02:10:35,500
It's been a pleasure coding with you.

1928
02:10:35,500 --> 02:10:38,900
As always, if you would like to follow along at home, you can always

1929
02:10:38,900 --> 02:10:41,800
pair to the game on handmade hero dot org and it comes to the source

1930
02:10:41,800 --> 02:10:43,100
code so you can play around with it.

1931
02:10:43,300 --> 02:10:45,700
We also have a forum site, you can go to if you want to ask questions

1932
02:10:45,700 --> 02:10:48,500
a patreon page, if you want to support the video series and a schedule

1933
02:10:48,500 --> 02:10:51,300
about the Tells going to be live and an episode guide for catching up

1934
02:10:51,300 --> 02:10:55,400
on old episodes in the series, that's it for today.

1935
02:10:55,400 --> 02:10:58,600
We'll be back tomorrow and an unusual time.

1936
02:10:59,000 --> 02:11:00,200
I can't remember exactly what time.

1937
02:11:00,200 --> 02:11:00,600
In fact.

1938
02:11:00,600 --> 02:11:02,200
That's one of the good reasons for checking.

1939
02:11:02,300 --> 02:11:03,300
The schedule bot.

1940
02:11:04,400 --> 02:11:05,700
Let's see what it says.

1941
02:11:06,000 --> 02:11:06,600
3:00 p.m.

1942
02:11:06,600 --> 02:11:10,600
Pacific Daylight time tomorrow, which point we can debug the deaf

1943
02:11:10,600 --> 02:11:11,500
peeling composite.

1944
02:11:11,500 --> 02:11:15,000
Which I think is the only problem now because the depth peels, when I

1945
02:11:15,000 --> 02:11:17,400
looked at them individually looked about, right?

1946
02:11:18,400 --> 02:11:19,300
So that's about it.

1947
02:11:19,800 --> 02:11:22,000
Thanks for joining me and hope to see you back here tomorrow, till

1948
02:11:22,000 --> 02:11:24,300
then have fun programming and I'll see everyone on the internet.

1949
02:11:24,300 --> 02:11:25,000
Take is everybody.

