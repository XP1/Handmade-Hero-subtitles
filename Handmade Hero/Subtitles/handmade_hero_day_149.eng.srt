1
00:00:02,700 --> 00:00:04,800
Hello, everyone, and welcome to handmade hero.

2
00:00:04,800 --> 00:00:08,200
The show, we go to complete game live on stream on Twitch.

3
00:00:08,200 --> 00:00:12,700
No engines, no, libraries, just us, and our typing fingers, right now,

4
00:00:12,700 --> 00:00:17,500
we are in the middle of converting our game from using just loading

5
00:00:17,500 --> 00:00:22,400
bitmap and wav files off disk to using a asset file like a pack file

6
00:00:22,400 --> 00:00:23,600
of our own creation.

7
00:00:23,600 --> 00:00:28,300
And we are about halfway through writing a test version of that.

8
00:00:28,300 --> 00:00:32,299
And so today, what we're going to do is finish the piece of test

9
00:00:32,500 --> 00:00:36,700
It writes out an asset file that we can then start loading in to the

10
00:00:36,700 --> 00:00:37,100
game.

11
00:00:37,500 --> 00:00:41,100
So yeah, not a lot to talk about because we've already talked about

12
00:00:41,100 --> 00:00:42,100
all the concept involves.

13
00:00:42,100 --> 00:00:43,300
So really we just need to finish coding.

14
00:00:43,300 --> 00:00:44,800
It it's day 149.

15
00:00:44,800 --> 00:00:48,000
So if you would like to follow along at home, you are going to want to

16
00:00:48,000 --> 00:00:51,600
follow along with day 148 source code, unpacked into directory and

17
00:00:51,600 --> 00:00:54,800
you'll be exactly where I am at right now.

18
00:00:55,600 --> 00:01:01,500
So if I go ahead and pull back up the code here that we were using

19
00:01:01,500 --> 00:01:02,300
test asset.

20
00:01:02,400 --> 00:01:06,200
Elder we step through it yesterday and got it to the point where it

21
00:01:06,200 --> 00:01:11,800
was essentially writing out most of the asset file header, except for

22
00:01:11,800 --> 00:01:13,400
the asset array itself.

23
00:01:13,400 --> 00:01:17,100
And what we wanted to do now was actually write out the asset array.

24
00:01:17,500 --> 00:01:20,400
And in addition to the asset array, we also want to basically, you

25
00:01:20,400 --> 00:01:25,400
know, include the assets themselves in here to write, obviously that,

26
00:01:25,400 --> 00:01:27,300
you know, make some reasonable sense, right?

27
00:01:29,700 --> 00:01:30,300
so,

28
00:01:32,200 --> 00:01:35,500
What we would like to do here is we would like to have something that

29
00:01:35,500 --> 00:01:36,700
spins through the assets.

30
00:01:38,000 --> 00:01:42,000
And writes them out and actually puts in the asset array that also

31
00:01:42,000 --> 00:01:44,600
tells where they are and if you remember the way we did this asset

32
00:01:44,600 --> 00:01:49,100
array in the file, this is not what I wanted at all.

33
00:01:49,100 --> 00:01:54,100
I want this asset file formats, right?

34
00:01:55,800 --> 00:02:00,800
The way that we decided to do that is we have this hhas hhas at here

35
00:02:01,100 --> 00:02:06,200
and that ha asset is going to be written to the file in a way that

36
00:02:06,200 --> 00:02:09,900
tells us where the data for the thing is where the tags for it are and

37
00:02:09,900 --> 00:02:11,600
how many that there are right.

38
00:02:12,500 --> 00:02:16,000
And inside there is either going to be the definition of the bitmap

39
00:02:16,000 --> 00:02:18,700
that we need, which would be the dimension and the alignment.

40
00:02:19,300 --> 00:02:21,200
Or if it's a sound, it's going to tell us

41
00:02:23,300 --> 00:02:25,600
Well, you know what, we really don't need first, sample index.

42
00:02:25,600 --> 00:02:26,500
I don't know what that's doing there.

43
00:02:26,500 --> 00:02:28,000
There's just a number of samples.

44
00:02:28,300 --> 00:02:32,300
And whether this is changed with another, you know, some other sound

45
00:02:32,300 --> 00:02:33,600
in the system, right?

46
00:02:34,600 --> 00:02:41,200
So that's really all we actually need, it's really pretty

47
00:02:41,200 --> 00:02:41,900
straightforward.

48
00:02:42,200 --> 00:02:45,200
And so what we need to do now is just actually write this stuff out,

49
00:02:45,200 --> 00:02:49,200
we're essentially writing out all the other things, we're just not

50
00:02:49,200 --> 00:02:52,700
reading out this and so what I'd like to do is actually

51
00:02:52,900 --> 00:02:53,500
You write it out.

52
00:02:53,500 --> 00:02:56,900
Now, if you look at the way that we wrote out the other arrays, what

53
00:02:56,900 --> 00:02:59,200
we did is we had them in memory exactly.

54
00:02:59,200 --> 00:02:59,900
As they would be in

55
00:03:00,000 --> 00:03:03,000
I'll and remember files and memory are like the same thing, right?

56
00:03:03,000 --> 00:03:06,000
A file is just a permanently stored version of memory there.

57
00:03:06,000 --> 00:03:06,800
They're just B.

58
00:03:07,000 --> 00:03:09,200
There's nothing magical going on there, right?

59
00:03:09,400 --> 00:03:12,500
There's just a bunch of cruft involved in actually like getting them

60
00:03:12,500 --> 00:03:15,200
out to a solid state drive, or hard drive or whatever.

61
00:03:15,200 --> 00:03:19,000
But in the end we're just talking about storing binary data, just like

62
00:03:19,000 --> 00:03:20,100
the kind that we've been deploying memory.

63
00:03:20,100 --> 00:03:21,400
There's no magic to it.

64
00:03:21,900 --> 00:03:24,000
So, when we do a write like this, right?

65
00:03:24,000 --> 00:03:26,900
We're just saying, take this block of memory, put it to the drive and

66
00:03:26,900 --> 00:03:29,200
later on, you know, in the game.

67
00:03:29,200 --> 00:03:29,900
I'm going to want to put

68
00:03:30,000 --> 00:03:32,400
Get back in as it is right?

69
00:03:33,100 --> 00:03:38,600
And so the thing is, these were just written out as big fat blocks

70
00:03:39,000 --> 00:03:41,600
because we happen to have the race exactly as we want them to be in

71
00:03:41,600 --> 00:03:46,000
this case as I go through the assets, I haven't actually prepared an

72
00:03:46,000 --> 00:03:50,000
asset array yet because I haven't gone through all the assets and

73
00:03:50,000 --> 00:03:51,600
figured out where they will be stored.

74
00:03:51,600 --> 00:03:54,800
Because remember when we when we're looking at where each asset will

75
00:03:54,800 --> 00:03:59,300
go in the file, you know, it's this big long linear series of bytes.

76
00:03:59,500 --> 00:03:59,900
I have

77
00:04:00,000 --> 00:04:02,100
Put each asset like after one another.

78
00:04:02,100 --> 00:04:04,600
So if I write out the first bitmap and the second pick up the third

79
00:04:04,600 --> 00:04:08,900
bitmap, the third bit maps, location is going to be dependent on how

80
00:04:08,900 --> 00:04:11,700
big the first and second bitmap in the file were right.

81
00:04:12,300 --> 00:04:16,000
And so, I don't really know what the data offsets are till after I

82
00:04:16,000 --> 00:04:16,600
write the other thing.

83
00:04:16,600 --> 00:04:18,700
So, there's two ways we could choose to handle this and I think I'm

84
00:04:18,700 --> 00:04:20,100
going to handle it in a simpler way.

85
00:04:21,100 --> 00:04:23,200
There's two ways you can choose to handle it one way we could choose

86
00:04:23,200 --> 00:04:23,500
to handle.

87
00:04:23,500 --> 00:04:25,800
It is write all the assets out.

88
00:04:26,500 --> 00:04:30,600
But leave space in the file for the asset header.

89
00:04:30,900 --> 00:04:35,000
Sorry, the asset array and then go back and write the asset array out

90
00:04:35,000 --> 00:04:35,700
as a chunk.

91
00:04:35,900 --> 00:04:37,400
I don't think I'm gonna bother doing that.

92
00:04:37,900 --> 00:04:41,900
What I might do is just do the simple thing of writing out the asset

93
00:04:41,900 --> 00:04:47,900
array as individual pieces as we go and write the actual Assets in

94
00:04:47,900 --> 00:04:50,200
because we know where the assets will start, right.

95
00:04:50,200 --> 00:04:52,300
We already figured out where the assets will start, because it's

96
00:04:52,300 --> 00:04:56,000
whatever this location is, plus the size of the asset array is the

97
00:04:56,200 --> 00:04:58,600
Free available B in the file.

98
00:04:58,600 --> 00:04:59,000
Right?

99
00:04:59,000 --> 00:05:02,300
So what I'm going to do is I think I'm just going to go ahead and loop

100
00:05:02,300 --> 00:05:05,700
manually over the asset set, right?

101
00:05:05,700 --> 00:05:07,900
So I'm going to start with asset index 0.

102
00:05:07,900 --> 00:05:13,100
I'm going to go through the number of assets that we have, and I'm

103
00:05:13,100 --> 00:05:17,800
going to do using a Sikh and this is very this is you know kind of

104
00:05:17,800 --> 00:05:21,500
inefficient way to do this, but again, we don't, this is not code that

105
00:05:21,500 --> 00:05:22,100
we care at all about.

106
00:05:22,100 --> 00:05:24,000
It's never going to run on the end users machine.

107
00:05:24,000 --> 00:05:25,900
This is just well, first of all, it's test code.

108
00:05:25,900 --> 00:05:26,100
Even

109
00:05:26,300 --> 00:05:30,700
For us but it's our asset file creation stuff which only happens on

110
00:05:30,700 --> 00:05:33,700
our machine and we don't care at all unless it becomes some kind of a

111
00:05:33,700 --> 00:05:35,700
production problem how slow it is, right?

112
00:05:36,000 --> 00:05:38,500
So we don't really have to care about how efficient or inefficient

113
00:05:38,500 --> 00:05:38,600
this.

114
00:05:38,600 --> 00:05:40,100
Maybe we don't care at all.

115
00:05:41,500 --> 00:05:45,000
So what we need to do here is we basically need to do our own kind of

116
00:05:45,000 --> 00:05:45,900
streaming, right?

117
00:05:45,900 --> 00:05:48,100
We need to do our own location tracking.

118
00:05:48,300 --> 00:05:51,300
Because what we want to do here is we want to jump to the part of the

119
00:05:51,300 --> 00:05:54,100
file where this particular asset goes.

120
00:05:54,300 --> 00:05:55,300
Whichever one it is.

121
00:05:55,500 --> 00:05:58,900
We want to write out the data there for the actual asset.

122
00:05:58,900 --> 00:05:59,800
So the bitmap

123
00:06:00,300 --> 00:06:04,300
Pixels, if it's a bitmap or the sound samples at the sound and then we

124
00:06:04,300 --> 00:06:08,000
want to like jump back right to the asset array and put it in there.

125
00:06:08,100 --> 00:06:08,800
You know what?

126
00:06:10,000 --> 00:06:13,400
Now that I think about it, it's not actually any easier doing it that

127
00:06:13,400 --> 00:06:13,800
way.

128
00:06:14,500 --> 00:06:14,700
Really?

129
00:06:14,700 --> 00:06:18,200
If we just do one F seek to put ourselves past where the acid areas, I

130
00:06:18,200 --> 00:06:20,800
think the thing I said first is actually better, right?

131
00:06:20,800 --> 00:06:23,500
Because then what we would do is we just fseek stream out all the

132
00:06:23,500 --> 00:06:25,800
Assets in in order, right?

133
00:06:25,800 --> 00:06:29,300
And then jump back to where the asset array is and write it out there.

134
00:06:30,500 --> 00:06:31,900
That seems actually totally fine.

135
00:06:32,500 --> 00:06:33,100
So there we go.

136
00:06:33,200 --> 00:06:36,200
All right, I changed my mind in the middle of describing.

137
00:06:36,200 --> 00:06:37,300
Even what I was going to do.

138
00:06:38,100 --> 00:06:38,700
So there you go.

139
00:06:42,200 --> 00:06:42,800
All right.

140
00:06:44,000 --> 00:06:46,500
So, what we want to do here is we've done enough, right?

141
00:06:46,600 --> 00:06:49,900
And we could almost even, you can see what we're essentially doing is

142
00:06:50,100 --> 00:06:52,500
instead of f writing out the asset array here.

143
00:06:52,500 --> 00:06:55,900
We just because, like I said, these, we can't give it the position to

144
00:06:55,900 --> 00:06:59,800
write at it's going to write wherever at the end of wherever the last

145
00:06:59,800 --> 00:07:00,400
right was?

146
00:07:00,400 --> 00:07:02,100
That's just how the C API works.

147
00:07:02,400 --> 00:07:05,900
Even though that has nothing to do with how hard drives work at all,

148
00:07:07,500 --> 00:07:10,600
that is how they chose to implement it, probably, because they were

149
00:07:10,600 --> 00:07:13,500
thinking of tape, drives or terminal streaming or something.

150
00:07:13,500 --> 00:07:13,600
Like

151
00:07:13,800 --> 00:07:18,400
Back in 1970 or whatever, but point being that is not.

152
00:07:18,400 --> 00:07:22,100
We wanted also what we wanted to be able to do is say let's just skip

153
00:07:22,100 --> 00:07:25,900
the place for the asset or a is we could just write out what garbage

154
00:07:25,900 --> 00:07:27,200
there and then come back and write it later.

155
00:07:27,200 --> 00:07:29,300
But we might as well not tell the operating system to do work.

156
00:07:29,300 --> 00:07:30,100
It doesn't have to do.

157
00:07:30,300 --> 00:07:33,200
So we want to do is be able to do this thing fseek, right?

158
00:07:33,200 --> 00:07:37,900
And what fseek does is fseek allows you to move the file position that

159
00:07:37,900 --> 00:07:39,500
c is thinking about

160
00:07:40,300 --> 00:07:43,600
In its standard library to a different location without actually

161
00:07:43,600 --> 00:07:44,400
writing anything.

162
00:07:44,400 --> 00:07:49,200
And you can see it allows you to specify sort of the way in which you

163
00:07:49,200 --> 00:07:50,100
want it to move.

164
00:07:50,100 --> 00:07:52,100
And you can see it's definition here, right?

165
00:07:52,100 --> 00:07:55,400
So you pass that file handle that we're talking about.

166
00:07:55,400 --> 00:08:00,300
So, knows, which stream it's talking about, you pass a value that sort

167
00:08:00,300 --> 00:08:04,900
of the, the amount you want to move, but that amount doesn't actually

168
00:08:04,900 --> 00:08:05,500
mean anything.

169
00:08:05,500 --> 00:08:09,600
Until you look at the third parameter, which says how you want that to

170
00:08:09,600 --> 00:08:09,700
be?

171
00:08:10,100 --> 00:08:12,100
It, and there's three ways you can do it.

172
00:08:12,200 --> 00:08:13,600
You can say, Seek set.

173
00:08:13,600 --> 00:08:18,600
And if you say Seek set, it will seek to that absolute B in the file.

174
00:08:18,700 --> 00:08:21,800
So, if you say 5, you're talking about the 5th, B, in the file total,

175
00:08:22,200 --> 00:08:26,500
you can say Seeker which is like saying, oh, let's go ahead and say

176
00:08:26,600 --> 00:08:30,900
wherever I am right now, add this many bytes to it or subtract in the

177
00:08:30,900 --> 00:08:32,400
case of a negative number, right?

178
00:08:33,400 --> 00:08:36,600
And then finally see Ken says, start at the end of the file wherever

179
00:08:36,600 --> 00:08:40,100
the last bite was written to the file in its history.

180
00:08:40,299 --> 00:08:42,900
I want to start there and move from there.

181
00:08:42,900 --> 00:08:46,100
So if I want to like back up a bit from the end of the file, I can do

182
00:08:46,100 --> 00:08:46,400
that.

183
00:08:46,400 --> 00:08:46,900
Right?

184
00:08:48,000 --> 00:08:51,900
And so what I'm going to do is I'm going to basically just say I know

185
00:08:51,900 --> 00:08:53,700
the asset array size.

186
00:08:54,100 --> 00:08:55,900
Is this big, right?

187
00:08:56,000 --> 00:08:58,000
I know that's how big the asset array size is.

188
00:08:58,200 --> 00:08:59,800
So I'm just going to say from the current

189
00:09:00,000 --> 00:09:00,600
Mission.

190
00:09:00,700 --> 00:09:01,300
Right?

191
00:09:01,300 --> 00:09:07,400
I would like you to skip however many that was and get to the next

192
00:09:07,400 --> 00:09:09,000
location in the location.

193
00:09:09,000 --> 00:09:11,400
The file that would start immediately after that, right?

194
00:09:11,600 --> 00:09:13,500
Then I'm going to spin through the asset arrays.

195
00:09:13,500 --> 00:09:16,700
I'm going to write out each individual asset, right?

196
00:09:16,800 --> 00:09:20,400
And then when I get to the end, I want to seek back to this location,

197
00:09:20,600 --> 00:09:21,100
right?

198
00:09:21,100 --> 00:09:23,800
So now I want to be able to say you know what?

199
00:09:24,300 --> 00:09:29,800
Go go seek back to asset array location.

200
00:09:30,000 --> 00:09:33,100
And it just so happens that I already know that as well, because we

201
00:09:33,100 --> 00:09:34,400
store that in the header, right?

202
00:09:34,400 --> 00:09:38,800
The place where the asset array was, we already sort of Saved because

203
00:09:38,800 --> 00:09:41,800
we had computed where we wanted everything to be laid out, right?

204
00:09:43,000 --> 00:09:43,800
So, that's all good.

205
00:09:44,600 --> 00:09:46,000
So this is going to be pretty straightforward.

206
00:09:46,000 --> 00:09:47,000
There's not a whole lot to it.

207
00:09:47,000 --> 00:09:47,800
It's all good.

208
00:09:47,900 --> 00:09:49,200
There's only one caveat.

209
00:09:51,600 --> 00:09:53,100
And you the compiler will complain about it.

210
00:09:53,100 --> 00:09:58,800
Presumably actually for us and that is that we are using 64-bit file

211
00:09:58,800 --> 00:10:00,500
offsets and a fortune.

212
00:10:00,500 --> 00:10:04,500
Unfortunately, the C API doesn't actually support 64-bit file sets.

213
00:10:04,800 --> 00:10:06,800
So in this case, we don't care.

214
00:10:07,300 --> 00:10:11,300
Because in this case, we happen to know that this is not going to be

215
00:10:11,300 --> 00:10:13,700
outside, the 4 GB range that the beginning of the file.

216
00:10:13,700 --> 00:10:16,900
So in this case, we can just do that if we want to write.

217
00:10:17,200 --> 00:10:21,200
But if you wanted to be able to handle seeking,

218
00:10:21,400 --> 00:10:25,400
Very large files, you have to kind of go off book a little bit and

219
00:10:25,400 --> 00:10:31,200
there are various things like L seek and sort of these other things

220
00:10:31,200 --> 00:10:35,000
that take larger offsets for 64-bit files.

221
00:10:35,400 --> 00:10:37,900
I'm going to leave that as an exercise to the reader because like I

222
00:10:37,900 --> 00:10:41,200
said this is only test code and when we're actually, when we are

223
00:10:41,200 --> 00:10:44,800
actually doing our reads from this file, we will not be using the C

224
00:10:44,800 --> 00:10:49,000
runtime Library will be going straight through windows and doing IO

225
00:10:49,000 --> 00:10:49,400
completion.

226
00:10:49,400 --> 00:10:51,100
Port overlapped i0 which

227
00:10:51,300 --> 00:10:53,800
Has no bearing whatsoever on any of this stuff.

228
00:10:54,300 --> 00:10:57,300
So in this case, this is totally fine but just so you know, there are

229
00:10:57,300 --> 00:11:02,100
actually sort of newer more recently introduced things that are I

230
00:11:02,100 --> 00:11:05,300
don't even know if they ever actually became see standards but they

231
00:11:05,300 --> 00:11:06,800
are kind of de facto standards.

232
00:11:06,800 --> 00:11:11,000
Like you, there are ways that you can use the C runtime library to

233
00:11:11,000 --> 00:11:14,200
handle 64-bit offsets if you really care to do.

234
00:11:14,200 --> 00:11:16,900
So we will not be doing that on him made here.

235
00:11:18,300 --> 00:11:20,100
So all right.

236
00:11:20,100 --> 00:11:23,100
Now we've got this this, this asset array, right?

237
00:11:24,100 --> 00:11:28,100
We've kind of got a problem here, which is that this asset array, that

238
00:11:28,100 --> 00:11:32,900
we're writing out the asset array is a different array than this one.

239
00:11:32,900 --> 00:11:37,500
Because this this asset set we made here is actually just a record of

240
00:11:37,500 --> 00:11:38,100
like the files.

241
00:11:38,100 --> 00:11:39,400
We wanted to read from.

242
00:11:39,600 --> 00:11:43,900
Right but it's not it's not actually the asset array that we really in

243
00:11:43,900 --> 00:11:45,100
fact actually want it.

244
00:11:45,400 --> 00:11:47,400
And so what I might do just to make it a little bit more

245
00:11:47,600 --> 00:11:50,200
straightforward is I think I'm going to go ahead and bifurcate this

246
00:11:50,300 --> 00:11:55,000
and say that we have the at the hhaa asset set, right?

247
00:11:55,200 --> 00:11:59,100
And these are the assets that are in the file and this is like the so

248
00:11:59,100 --> 00:11:59,800
we have like assets.

249
00:12:00,000 --> 00:12:02,700
This is an asset data or something like that, right?

250
00:12:04,500 --> 00:12:09,700
And so our actual asset that we store in here is just probably, you

251
00:12:09,700 --> 00:12:14,600
know, we don't all of this stuff will actually be well, I guess it's

252
00:12:14,600 --> 00:12:15,700
these right.

253
00:12:15,800 --> 00:12:18,200
The only things that we might have right.

254
00:12:18,300 --> 00:12:20,600
Is, is this right?

255
00:12:20,600 --> 00:12:22,100
We have something like this.

256
00:12:23,300 --> 00:12:25,800
These are the pieces of information that we might need.

257
00:12:25,800 --> 00:12:27,100
In addition to what we had.

258
00:12:27,100 --> 00:12:30,900
And you know the other thing we might need is asset type and it would

259
00:12:30,900 --> 00:12:34,000
be like oh you know this and I guess we could even just do well I'll

260
00:12:34,000 --> 00:12:39,700
do it this way you know asset type sound and asset type bitmap because

261
00:12:39,700 --> 00:12:42,300
since the game already knows what they are but we don't actually know

262
00:12:42,300 --> 00:12:45,500
in this asset processor except when we actually announced them we

263
00:12:45,500 --> 00:12:48,700
might need something like this so that's all the additional data that

264
00:12:48,700 --> 00:12:50,000
we need right.

265
00:12:51,100 --> 00:12:52,900
That's only used for processing and is not

266
00:12:53,100 --> 00:12:54,100
Saved in the file.

267
00:12:54,400 --> 00:12:57,400
So that way we can just fill out our asset sources, right?

268
00:12:57,400 --> 00:12:59,800
We could say assets or something like that.

269
00:13:01,600 --> 00:13:05,300
We can just fill out our asset sources and our asset data together.

270
00:13:05,300 --> 00:13:10,400
We write out the asset data and we never bother writing out the asset

271
00:13:10,400 --> 00:13:12,500
sources because that's just markup, right?

272
00:13:13,300 --> 00:13:15,500
And so that's that's what we're talking about, right?

273
00:13:15,500 --> 00:13:18,900
So we would say, here asset data, right?

274
00:13:19,800 --> 00:13:21,300
And we would write that out.

275
00:13:21,500 --> 00:13:29,100
And then in here, we would go ahead and grab these things hhas set.

276
00:13:31,100 --> 00:13:33,600
Let's see HHA, right?

277
00:13:33,600 --> 00:13:37,200
This will be like Source dust maybe even you could say.

278
00:13:39,000 --> 00:13:42,300
So we've got these guys and I'm just going to grab out the pointers

279
00:13:42,300 --> 00:13:47,000
from from the actual assets that just so we can talk about them a

280
00:13:47,000 --> 00:13:50,200
little bit more easily in this code, right?

281
00:13:52,400 --> 00:13:55,500
Alright, so here we go, you've got these guys ready.

282
00:13:55,500 --> 00:13:58,100
And what I'm going to do now before I actually implement this, as I'm

283
00:13:58,100 --> 00:14:02,700
going to fix the compile errors, that will be generated from from this

284
00:14:02,700 --> 00:14:03,900
change that I made where I say that.

285
00:14:03,900 --> 00:14:06,200
I want these two things to be split.

286
00:14:06,900 --> 00:14:13,100
And so what I'm going to do is I'm going to I think I want to kind of

287
00:14:13,600 --> 00:14:15,500
make this a little bit less.

288
00:14:19,100 --> 00:14:22,600
A little bit less pointer oriented if you will.

289
00:14:23,000 --> 00:14:25,500
So I want to kind of see how these guys are getting used.

290
00:14:25,600 --> 00:14:29,200
I want to say that this debug asset also, I guess we don't really need

291
00:14:29,200 --> 00:14:32,700
to do that, but this is going to be essentially a asset index.

292
00:14:32,700 --> 00:14:36,400
Now, write something like this, and I'm going to go ahead and clean up

293
00:14:36,400 --> 00:14:39,100
these compile errors so that that all works.

294
00:14:39,400 --> 00:14:40,000
All right?

295
00:14:40,400 --> 00:14:45,100
So what we want to do here is say that our what did we actually call

296
00:14:45,100 --> 00:14:46,100
these our asset data?

297
00:14:46,100 --> 00:14:46,700
Maybe I'll leave

298
00:14:46,800 --> 00:14:49,500
leave that as asset so it can still be used in most places.

299
00:14:50,200 --> 00:14:54,600
So what I want to do here is I want to change these routines to work

300
00:14:54,600 --> 00:14:56,100
in sort of the split format.

301
00:14:56,700 --> 00:14:59,900
So I've got, you know, my assets source and I've got my

302
00:15:00,100 --> 00:15:00,700
Asset.

303
00:15:00,700 --> 00:15:03,600
And those two things are different, right?

304
00:15:04,400 --> 00:15:08,700
And these things here, I guess all can stay roughly the same.

305
00:15:08,700 --> 00:15:09,900
That's all similar.

306
00:15:09,900 --> 00:15:13,700
Don't think there's anything there groups.

307
00:15:13,800 --> 00:15:16,200
And I got to have a differentiating name for these guys.

308
00:15:16,700 --> 00:15:19,300
So, I'm going to call these source and desk for the moment as well.

309
00:15:19,300 --> 00:15:21,400
Because I just don't know if that's the way I'm thinking of them.

310
00:15:22,200 --> 00:15:27,900
All right, so well, maybe we'll do it this way.

311
00:15:28,600 --> 00:15:29,300
Maybe I'll do it that way.

312
00:15:29,300 --> 00:15:29,900
I think that's a little

313
00:15:30,000 --> 00:15:30,400
it clear.

314
00:15:31,400 --> 00:15:36,600
All right, so in the HSN, the AHA, we've got it looking like this,

315
00:15:36,800 --> 00:15:37,400
right?

316
00:15:39,200 --> 00:15:44,400
I think all of that stuff is, is correct, and when we do the sounds,

317
00:15:44,400 --> 00:15:47,100
The Sounds would be similar, right?

318
00:15:47,400 --> 00:15:54,100
We come through here and we've got the HH, a version set up this way

319
00:15:54,900 --> 00:15:59,900
and we're going to go ahead and pull out the parts now that

320
00:16:00,000 --> 00:16:01,600
Our that are in only the source.

321
00:16:01,600 --> 00:16:04,300
So there is the source for a bitmap is just the file name.

322
00:16:04,300 --> 00:16:05,700
That's all there actually is.

323
00:16:06,200 --> 00:16:07,900
And then we've got the type, right?

324
00:16:07,900 --> 00:16:11,700
I said we were going to have the type is asset type bitmap.

325
00:16:12,600 --> 00:16:16,200
And then down here, we've got that file name.

326
00:16:16,200 --> 00:16:18,100
And for a sample Index, right?

327
00:16:18,400 --> 00:16:19,300
Those are both.

328
00:16:19,600 --> 00:16:23,400
Those are both part of just the source like so.

329
00:16:24,200 --> 00:16:26,100
And then we again we want to set that type.

330
00:16:28,300 --> 00:16:30,800
Two asset type sound.

331
00:16:31,700 --> 00:16:32,300
Okay?

332
00:16:32,900 --> 00:16:39,400
And this is Jay's well this should be debug asset.

333
00:16:39,400 --> 00:16:47,300
So this right here is just a assets asset index equals results dot

334
00:16:47,300 --> 00:16:48,800
value, right?

335
00:16:49,100 --> 00:16:51,800
And we're going to track that.

336
00:16:51,800 --> 00:16:54,500
So in both cases so

337
00:16:56,400 --> 00:17:00,000
and guys up,

338
00:17:01,500 --> 00:17:08,500
Left of value and sound next ID to play is just that now.

339
00:17:09,400 --> 00:17:09,800
Alright?

340
00:17:09,900 --> 00:17:12,800
So we want to assert that debug.

341
00:17:12,800 --> 00:17:16,700
That the asset Index right is not equal to 0.

342
00:17:17,300 --> 00:17:20,200
So we do we do actually still want to do this assertion because that's

343
00:17:20,200 --> 00:17:22,200
the null asset.

344
00:17:22,200 --> 00:17:23,599
So we want to still check that.

345
00:17:25,099 --> 00:17:29,000
And then here, what we would need to do is the asset itself would have

346
00:17:29,000 --> 00:17:31,100
to be sort of grabbed out of that.

347
00:17:32,300 --> 00:17:35,800
In order to do the increment, here, we have to actually have the

348
00:17:35,800 --> 00:17:36,500
assets or so.

349
00:17:36,500 --> 00:17:40,700
This would be h a asset asset guess we'll call it h.

350
00:17:40,700 --> 00:17:44,900
A to be a little more consistent HHA equals assets.

351
00:17:46,500 --> 00:17:50,600
Asset sources plus asset index.

352
00:17:54,000 --> 00:17:57,400
Yeah, and the oops not assets horses, just assets.

353
00:17:59,100 --> 00:17:59,800
yeah, and so

354
00:18:00,000 --> 00:18:01,000
That's all good.

355
00:18:01,000 --> 00:18:05,200
And just gotta clean up couple other things here.

356
00:18:05,200 --> 00:18:09,300
Nothing particularly unusual going on.

357
00:18:11,600 --> 00:18:13,200
All pretty.

358
00:18:13,200 --> 00:18:17,600
Basic this is actually dot value.

359
00:18:19,200 --> 00:18:20,400
And there we go.

360
00:18:20,400 --> 00:18:22,200
Asset source.

361
00:18:23,200 --> 00:18:26,700
And I think that's it.

362
00:18:27,300 --> 00:18:28,400
Thank, that's it.

363
00:18:29,700 --> 00:18:34,100
So yeah, that is pretty much it I think and that will in theory write

364
00:18:34,100 --> 00:18:34,900
out everything correctly.

365
00:18:34,900 --> 00:18:39,200
If in here we actually did asset processing which we're not doing yet

366
00:18:39,600 --> 00:18:40,900
but that's what we're about to do.

367
00:18:41,400 --> 00:18:45,000
So I'm going to go and run that and see make sure there's no

368
00:18:45,000 --> 00:18:46,900
particularly odd things going on there.

369
00:18:47,600 --> 00:18:52,400
And then I'm also going to Der are handmade data directory to kind of

370
00:18:52,400 --> 00:18:54,300
see what is happening there.

371
00:18:55,700 --> 00:18:57,400
There is our test dot h.

372
00:18:57,400 --> 00:19:00,400
A, i don't know if that's the right size or not.

373
00:19:03,200 --> 00:19:09,700
I would have to think about whether it is or not, we don't have that

374
00:19:09,700 --> 00:19:12,900
many things in it, so it seems semi plausible will have to check to

375
00:19:12,900 --> 00:19:14,600
see if that all makes sense.

376
00:19:15,200 --> 00:19:18,200
So anyway, let's go ahead and finish implementing this stuff and so

377
00:19:18,200 --> 00:19:24,500
inside our handmade asset now is the time when we would be moving out

378
00:19:24,500 --> 00:19:24,800
like that.

379
00:19:24,900 --> 00:19:26,500
Bitmap code, right?

380
00:19:26,800 --> 00:19:31,500
So we have handmade asset dot CPP and you can see we've got like the

381
00:19:31,500 --> 00:19:34,000
bitmap header and the wave header, and all this stuff, right?

382
00:19:34,000 --> 00:19:38,700
So I'm not going to delete it from the game yet, but it's going to get

383
00:19:38,700 --> 00:19:40,300
deleted from the game, right?

384
00:19:40,300 --> 00:19:42,100
Like that's eventually going to go away.

385
00:19:42,900 --> 00:19:46,800
So for now, what we're going to do is we're going to do is top down

386
00:19:46,800 --> 00:19:47,200
the line.

387
00:19:47,200 --> 00:19:50,700
We're is that actually it's not even used anymore, right?

388
00:19:50,700 --> 00:19:52,300
We could we could just delete that and we.

389
00:19:52,600 --> 00:19:52,900
Yeah.

390
00:19:53,700 --> 00:19:54,800
So what I'm going to do is just copy

391
00:19:54,900 --> 00:19:59,300
Be in this code that we had that we were using and then it once I am

392
00:19:59,500 --> 00:20:02,700
confident, that everything is all set up properly.

393
00:20:03,000 --> 00:20:08,100
I am going to delete it from the handmade asset because we're not

394
00:20:08,100 --> 00:20:11,400
going to load things from BMP files anymore after that.

395
00:20:11,800 --> 00:20:12,200
Okay.

396
00:20:13,100 --> 00:20:14,100
So here's that code.

397
00:20:15,800 --> 00:20:17,900
And you know what?

398
00:20:17,900 --> 00:20:20,600
This could even go down in here.

399
00:20:20,600 --> 00:20:22,100
Now, there we are.

400
00:20:24,500 --> 00:20:27,900
So, yeah, I'm going to compile that and see what we're missing in

401
00:20:27,900 --> 00:20:30,800
terms of, you know, whatever we have we might be missing.

402
00:20:32,100 --> 00:20:36,700
So we've got our line percentage and is that just simply getting

403
00:20:36,700 --> 00:20:38,000
stored in here.

404
00:20:38,100 --> 00:20:39,900
It never actually gets used.

405
00:20:40,200 --> 00:20:43,400
So I'm that's not necessary.

406
00:20:44,200 --> 00:20:49,800
And I'm just going to go ahead and get rid of that anyway, and let's

407
00:20:49,800 --> 00:20:51,800
see and loaded bitmap like

408
00:20:52,800 --> 00:20:57,600
Stuff, I guess we could just, we could still use, we could still be

409
00:20:57,600 --> 00:20:58,800
used loaded bitmap.

410
00:20:58,900 --> 00:20:59,800
I think that's in the

411
00:21:00,100 --> 00:21:00,700
Right.

412
00:21:01,800 --> 00:21:02,800
Lodi bitmap.

413
00:21:05,600 --> 00:21:06,700
So I can put that in here.

414
00:21:06,900 --> 00:21:12,700
Now, we don't actually want the aligned percentage with over-height.

415
00:21:12,700 --> 00:21:18,200
We do need, but we can reverse calculate that when we load it in, that

416
00:21:18,200 --> 00:21:18,900
should be fine.

417
00:21:19,500 --> 00:21:23,200
So, we're actually totally fine with with just this, I think in terms

418
00:21:23,200 --> 00:21:24,800
of what's getting loaded, right?

419
00:21:26,000 --> 00:21:29,400
So we need debug platform, read entire file, we need to implement

420
00:21:29,400 --> 00:21:34,900
that, we don't have that yet and we need that to return some kind of a

421
00:21:34,900 --> 00:21:35,300
thing that

422
00:21:35,500 --> 00:21:38,700
It will just put one of those in here will assume that we have that

423
00:21:39,100 --> 00:21:42,600
and that'll be fine and that it has it returns exactly the same stuff.

424
00:21:42,600 --> 00:21:45,600
A contents in a condom size in a contents, right?

425
00:21:45,800 --> 00:21:49,800
So will basically have a read file result or I guess we could just say

426
00:21:49,900 --> 00:21:53,700
you can just call the entire file, write an entire file would have a

427
00:21:53,700 --> 00:21:57,400
size and it would have a contents, right?

428
00:21:59,400 --> 00:22:02,800
so yeah, we'd call read entire file read entire file would return an

429
00:22:02,800 --> 00:22:03,700
entire file

430
00:22:05,300 --> 00:22:08,200
And it would just take whatever the file name is, it's going to be

431
00:22:09,300 --> 00:22:12,400
loaded and it would return one of these guys, right?

432
00:22:12,400 --> 00:22:16,800
So it's going to do something here results.

433
00:22:19,800 --> 00:22:23,600
So when it goes ahead and loads that in, it's going to look at this

434
00:22:23,600 --> 00:22:29,000
and see I guess content size is what gets used their content size and

435
00:22:29,000 --> 00:22:30,600
this is going to be entire file.

436
00:22:31,300 --> 00:22:34,300
So we're going to load that in oops, tar file.

437
00:22:35,600 --> 00:22:37,200
And then, we're going to go ahead and do this stuff.

438
00:22:37,200 --> 00:22:41,700
Now, we've got these bits cans here which I guess means, we're going

439
00:22:41,700 --> 00:22:43,100
to need those intrinsic switch.

440
00:22:43,100 --> 00:22:43,700
We could.

441
00:22:43,700 --> 00:22:46,100
I suppose also just cold, use.

442
00:22:46,200 --> 00:22:47,300
I don't think there's any reason.

443
00:22:48,100 --> 00:22:49,900
Not too right?

444
00:22:50,800 --> 00:22:51,400
Does it?

445
00:22:52,000 --> 00:22:54,200
Or yeah.

446
00:22:54,300 --> 00:22:55,400
So that's totally fine.

447
00:22:56,800 --> 00:23:02,800
We do have a V4 that we're using here and we need our srgb mapping

448
00:23:02,800 --> 00:23:03,700
stuff.

449
00:23:03,700 --> 00:23:05,900
So we are going to kind of need a little bit more, that's kind of

450
00:23:05,900 --> 00:23:06,500
making me think.

451
00:23:06,500 --> 00:23:10,900
Like, it was maybe a mistake to say no math, because it looks like

452
00:23:10,900 --> 00:23:12,500
we're going to need the math, right?

453
00:23:13,700 --> 00:23:14,600
If that makes sense.

454
00:23:15,400 --> 00:23:17,300
So, we're going to want these guys.

455
00:23:17,600 --> 00:23:22,900
RGB 255 to linear 1 and S and linear 12s RGB 255, right?

456
00:23:23,200 --> 00:23:28,200
And those I think we had in here, I feel like what we're probably

457
00:23:28,200 --> 00:23:32,100
going to want to do, there is just make these lofty, these up into the

458
00:23:32,100 --> 00:23:35,300
mass of that they can be used by everyone, right?

459
00:23:37,300 --> 00:23:38,100
So that should be fine.

460
00:23:39,000 --> 00:23:40,500
So that's everything for that.

461
00:23:40,700 --> 00:23:43,600
And now I feel kind of stupid for not just including the math thing

462
00:23:43,600 --> 00:23:44,300
originally.

463
00:23:44,400 --> 00:23:44,900
Right?

464
00:23:45,300 --> 00:23:49,200
Because now we could just have the things feed V2s but whatever, you

465
00:23:49,200 --> 00:23:53,300
know, live and learn, it's probably not worth changing it back now.

466
00:23:54,200 --> 00:23:57,600
And so, what I want to do is I want to go to the sounds and do the

467
00:23:57,600 --> 00:23:58,700
same thing, right?

468
00:23:58,700 --> 00:23:59,600
I want to have loaded.

469
00:24:00,900 --> 00:24:05,800
Be able to operate in here and I want it to, you know, do whatever it

470
00:24:05,800 --> 00:24:08,700
is that it was going to do same way, right?

471
00:24:09,000 --> 00:24:15,300
So we have entire file and we do read entire file, same thing and now

472
00:24:15,300 --> 00:24:16,200
we are compiling.

473
00:24:16,200 --> 00:24:21,800
So now we can do the same loading that we were doing in the game and

474
00:24:23,300 --> 00:24:27,700
and you know, know that we're loading stuff exactly the same and

475
00:24:27,700 --> 00:24:29,900
prepping it in exactly the same way that we had wanted.

476
00:24:30,000 --> 00:24:32,600
It to be prepped if that makes sense.

477
00:24:33,500 --> 00:24:35,200
So, if we do that,

478
00:24:36,800 --> 00:24:42,700
What I can now do down here is I can just say well what you know, I

479
00:24:42,700 --> 00:24:43,700
guess I don't even use switch.

480
00:24:43,700 --> 00:24:46,400
There's only two things I can just say, okay.

481
00:24:46,400 --> 00:24:50,100
Well, what type of asset actually is this thing that I'm pressing

482
00:24:50,100 --> 00:24:54,100
right now, if it's a sound will load it, otherwise it will process the

483
00:24:54,100 --> 00:24:58,400
bitmap, I'll assert that it is a bitmap and that it's not some other

484
00:24:58,400 --> 00:24:59,900
magical type right.

485
00:25:01,700 --> 00:25:06,300
But yeah so in in here what I would do is I guess I don't need these

486
00:25:06,300 --> 00:25:06,400
things.

487
00:25:06,600 --> 00:25:07,500
To be debug anymore.

488
00:25:07,500 --> 00:25:11,800
It's just load wave and load bitmap so I can go ahead and do my load

489
00:25:11,800 --> 00:25:12,600
wave there.

490
00:25:13,400 --> 00:25:15,300
Let me or waves.

491
00:25:15,300 --> 00:25:17,700
I like to call it drives Jeff nuts when I say that.

492
00:25:19,000 --> 00:25:20,300
So here we go.

493
00:25:20,900 --> 00:25:22,600
Here is our loaded sound.

494
00:25:22,600 --> 00:25:25,300
I'm going to load it in, right?

495
00:25:25,700 --> 00:25:26,400
And

496
00:25:28,600 --> 00:25:29,600
Let's see.

497
00:25:33,700 --> 00:25:34,200
Jimmy.

498
00:25:36,000 --> 00:25:40,300
So I'm going to go this way file in, so I need the file name which I

499
00:25:40,300 --> 00:25:41,400
have right?

500
00:25:41,500 --> 00:25:45,800
I need the first sample index, which I also have and I need the

501
00:25:45,800 --> 00:25:47,900
section sample count, which I guess.

502
00:25:50,100 --> 00:25:52,900
I guess what exactly were we doing with that?

503
00:25:52,900 --> 00:25:54,000
If this was going to be 0.

504
00:25:54,000 --> 00:25:57,800
So this what I actually need to do is set use the desks one there

505
00:25:57,800 --> 00:26:00,900
because that's where that actually exists, right?

506
00:26:00,900 --> 00:26:05,100
That's actually in the hahhaa because it actually gets stored out,

507
00:26:05,200 --> 00:26:05,400
right?

508
00:26:05,400 --> 00:26:08,400
So we're talking about this value right here.

509
00:26:09,100 --> 00:26:13,000
But the first sample index is the one that's that's pulled, right?

510
00:26:13,600 --> 00:26:19,700
So, this would load our wave wave in, and then we could choose to

511
00:26:19,900 --> 00:26:21,300
With it what we wanted.

512
00:26:21,400 --> 00:26:23,600
And the same could be true for our bitmap, right?

513
00:26:23,600 --> 00:26:27,400
If we do load bitmap we would pass the source file name and we would

514
00:26:27,400 --> 00:26:35,700
get back the bitmap right and that seemed it is not 0 it's not quite

515
00:26:35,700 --> 00:26:36,000
correct.

516
00:26:36,000 --> 00:26:39,800
There we go, load bitmap.

517
00:26:39,800 --> 00:26:40,900
Is it lubed BMP?

518
00:26:40,900 --> 00:26:42,800
What did I call that?

519
00:26:43,100 --> 00:26:45,200
It, slowed BMP.

520
00:26:47,300 --> 00:26:48,300
Let the MP.

521
00:26:49,400 --> 00:26:52,600
So, now, we'd be loading all of the Assets in, right?

522
00:26:52,600 --> 00:26:55,100
But of course, the problem is, if we had a lot of assets, this would

523
00:26:55,100 --> 00:26:58,400
get ugly quickly because they never actually free the memory that they

524
00:26:58,400 --> 00:26:59,700
would be using here.

525
00:27:00,700 --> 00:27:04,000
So what I want to do is something like this, right?

526
00:27:04,200 --> 00:27:07,500
What I want to do is something where I just go like, okay, you know,

527
00:27:07,700 --> 00:27:11,800
when I'm done with these guys, maybe I do something like this, right?

528
00:27:12,400 --> 00:27:13,700
So I can load it in.

529
00:27:13,700 --> 00:27:16,300
I can write it out and then I can free it, right?

530
00:27:16,500 --> 00:27:19,600
Something something very straightforward like that would be nice.

531
00:27:21,000 --> 00:27:25,900
So once we load this stuff in then we have to actually go ahead and

532
00:27:26,300 --> 00:27:31,400
and feel in any data that we were getting from the file itself.

533
00:27:31,400 --> 00:27:35,400
So from the wave file, like for example, the sample count may not have

534
00:27:35,400 --> 00:27:38,400
been specified, like sometimes we just 50 is a sample count and we

535
00:27:38,500 --> 00:27:39,500
then would get it from the file.

536
00:27:39,500 --> 00:27:42,600
I don't know if you remember, when we wrote that code, right?

537
00:27:42,700 --> 00:27:46,700
If you look at the original code, when we were doing debug load wave /

538
00:27:46,700 --> 00:27:50,800
wave, when we were loading this, you can see that.

539
00:27:50,900 --> 00:27:54,600
We did some stuff down here where we're like, oh okay, you know, the

540
00:27:54,600 --> 00:27:56,300
sample count, right?

541
00:27:56,300 --> 00:28:02,200
When the section sample count, we would actually do stuff with the

542
00:28:02,200 --> 00:28:06,000
section sample count, if it was non zero, right?

543
00:28:06,700 --> 00:28:11,900
But in the cases where it it was 0, we wouldn't change it.

544
00:28:11,900 --> 00:28:15,000
So the sample count that we end up using would be dependent on whether

545
00:28:15,000 --> 00:28:18,500
we'd specified one, and we might just use the sample count from the

546
00:28:18,500 --> 00:28:18,900
file.

547
00:28:18,900 --> 00:28:20,700
If we had specified, a section sample, count,

548
00:28:20,800 --> 00:28:21,400
M0.

549
00:28:21,500 --> 00:28:23,100
So we want to preserve that behavior.

550
00:28:23,100 --> 00:28:24,900
That was important to how our loading code work.

551
00:28:24,900 --> 00:28:27,500
Because that was, what was, you know, kind of getting chunks of things

552
00:28:27,500 --> 00:28:28,100
out.

553
00:28:29,400 --> 00:28:33,200
So what we want to do is go back through the file format and make sure

554
00:28:33,400 --> 00:28:36,400
that we're writing out all the stuff that we might need, right?

555
00:28:36,500 --> 00:28:39,700
So next ID to play would already be set so we don't need to set that.

556
00:28:39,700 --> 00:28:42,000
But sample count would not necessarily be set.

557
00:28:42,100 --> 00:28:45,300
So what we want to do is is grab that out, right?

558
00:28:45,300 --> 00:28:46,700
That's something we want to grab out.

559
00:28:48,200 --> 00:28:48,500
Yeah.

560
00:28:52,300 --> 00:28:55,800
Now something that it strikes me as not also, as also not being here

561
00:28:55,800 --> 00:28:58,400
though, is channel count?

562
00:28:58,900 --> 00:29:02,500
Because technically we were supporting multiple channels so I'd also

563
00:29:02,500 --> 00:29:07,400
like to put that in there and that would be something that would come

564
00:29:07,800 --> 00:29:10,400
from the handmade asset loader, right?

565
00:29:10,400 --> 00:29:14,000
It's this channel count value right here, right?

566
00:29:14,200 --> 00:29:17,600
So I also think, I want to go ahead and copy that into the file.

567
00:29:17,600 --> 00:29:18,500
That's going to be written.

568
00:29:20,300 --> 00:29:24,000
So once I've copied those two things into the array that we will

569
00:29:24,000 --> 00:29:26,200
eventually right out over here, right?

570
00:29:26,400 --> 00:29:31,400
I then want to be able to, you know, just go ahead and take all the

571
00:29:31,400 --> 00:29:33,800
sample data and block write that out, right?

572
00:29:33,800 --> 00:29:36,800
So that's the actual data that's going to get written to the file,

573
00:29:37,000 --> 00:29:37,500
right?

574
00:29:37,600 --> 00:29:44,600
I'm going to write out, you know, very specifically the entire the

575
00:29:44,600 --> 00:29:46,600
entire wave, right?

576
00:29:46,600 --> 00:29:48,400
I'm going to say the samples.

577
00:29:49,400 --> 00:29:49,900
Zero.

578
00:29:49,900 --> 00:29:52,400
Which is that first channel I guess what I'm going to do here is this

579
00:29:52,400 --> 00:29:53,100
is actually what I'm gonna do.

580
00:29:53,100 --> 00:29:55,100
I'm gonna put this in a for a loop so they can support as many

581
00:29:55,100 --> 00:29:57,700
channels as if we ever added more channels, right?

582
00:29:58,700 --> 00:29:59,500
I'm going to say,

583
00:30:00,000 --> 00:30:02,900
The wave we look at what the channel count is.

584
00:30:03,100 --> 00:30:08,500
And we write out each individual Channel and we know how big that's

585
00:30:08,500 --> 00:30:09,200
going to be.

586
00:30:10,800 --> 00:30:15,100
We know how big that's going to be, because we know the sample count,

587
00:30:15,300 --> 00:30:17,100
right times.

588
00:30:17,100 --> 00:30:21,800
The size of an individual sample is going to give us that, right?

589
00:30:22,100 --> 00:30:23,500
So we know that that's how big that is.

590
00:30:23,600 --> 00:30:28,100
So we write out the one or two channels of sound data and that's the

591
00:30:28,100 --> 00:30:29,800
entire data for this thing.

592
00:30:30,000 --> 00:30:32,800
And now we need to tell it where that is, right?

593
00:30:32,800 --> 00:30:34,900
We until we're in the file, we actually are

594
00:30:36,300 --> 00:30:41,200
And as far as I know, there's no I don't know if there's a portable

595
00:30:41,200 --> 00:30:43,400
way to do an F, tell that 64-bit.

596
00:30:43,400 --> 00:30:46,200
So the same caveat applies here.

597
00:30:47,300 --> 00:30:51,300
When we do an F tell it's not necessarily going to be 64-bit

598
00:30:51,300 --> 00:30:52,100
compliant.

599
00:30:53,400 --> 00:30:57,100
So, you know, caveat to anyone who actually is going to write these.

600
00:30:57,100 --> 00:31:01,800
You would need to potentially worry about actually being able to get

601
00:31:01,800 --> 00:31:05,800
past the 4 gigabyte boundary by using an F tell that was actually

602
00:31:06,000 --> 00:31:08,100
64-bit, and you can see, like,

603
00:31:11,600 --> 00:31:14,600
You can see that they've got these sort of Visual Studio ones and

604
00:31:14,600 --> 00:31:18,000
whatever and I don't even know which ones you know you would use.

605
00:31:18,000 --> 00:31:19,400
Like I said, I never use these.

606
00:31:19,400 --> 00:31:24,600
I always go through windows or Linux directly but yeah, so you can

607
00:31:24,600 --> 00:31:29,700
kind of see like there's these other options available for 64-bit

608
00:31:29,700 --> 00:31:34,000
style offsets and that sort of stuff and your mileage may vary in

609
00:31:34,000 --> 00:31:38,200
terms of which one the platform that your programming on actually has.

610
00:31:38,300 --> 00:31:39,000
But here's the like,

611
00:31:39,200 --> 00:31:43,900
Tell one that returns a 64-bit integer, for example, right?

612
00:31:45,000 --> 00:31:46,300
So I'm just pointing that out.

613
00:31:47,400 --> 00:31:50,300
Just just let you know, giving you what the idea is there?

614
00:31:51,000 --> 00:31:53,900
So we have the F right to me.

615
00:31:55,200 --> 00:31:59,900
But we want to do is make sure that before we start doing these

616
00:31:59,900 --> 00:32:03,900
rights, we figure out where in the file we are so that the

617
00:32:03,900 --> 00:32:06,400
destinations offset data, right?

618
00:32:06,400 --> 00:32:11,700
I guess this is actually that the data offset that we store it in the

619
00:32:11,700 --> 00:32:12,200
file.

620
00:32:12,200 --> 00:32:15,400
Needs to know that you know, needs to point to where we actually start

621
00:32:15,400 --> 00:32:15,800
writing.

622
00:32:16,300 --> 00:32:19,400
So what I want to do is use the F, tell there again, I'm just going to

623
00:32:19,400 --> 00:32:20,900
use the regular one, right?

624
00:32:21,700 --> 00:32:24,700
Because we know that we're not writing out for GB for this test case,

625
00:32:25,400 --> 00:32:28,000
I'm going to go ahead and say, all right, the data-offset let's do the

626
00:32:28,000 --> 00:32:28,200
F.

627
00:32:28,200 --> 00:32:32,800
Tell to get the 64, the 32-bit value back, and we'll just treat that

628
00:32:32,800 --> 00:32:33,500
as good for now.

629
00:32:34,000 --> 00:32:36,500
So, when we do the F tell of out, it'll tell us where we are.

630
00:32:37,100 --> 00:32:40,600
We will then write the stuff out and then we will free the memory that

631
00:32:40,700 --> 00:32:45,800
we used to hold the the contents temporarily while we wrote it right.

632
00:32:46,300 --> 00:32:46,600
Exact.

633
00:32:46,600 --> 00:32:48,900
Same thing happens with the bitmap, right?

634
00:32:48,900 --> 00:32:51,700
If we look at what the bitmap actually has in, it is just got the

635
00:32:51,700 --> 00:32:53,400
dimensions in the aligned percentage.

636
00:32:53,500 --> 00:32:54,900
This we know this,

637
00:32:55,000 --> 00:32:56,000
Comes from the file.

638
00:32:56,000 --> 00:32:58,400
So we're going to do essentially the exact same thing.

639
00:32:59,600 --> 00:32:59,800
In.

640
00:33:00,000 --> 00:33:04,400
Are we are going to say, like dest bitmapped dim, 0, equals.

641
00:33:04,400 --> 00:33:04,900
Whatever.

642
00:33:04,900 --> 00:33:10,400
The file said, the dimension of the bitmap was same with this one, and

643
00:33:10,500 --> 00:33:11,500
I don't know.

644
00:33:17,400 --> 00:33:20,700
I don't we have to think for a second about how we want to handle

645
00:33:21,000 --> 00:33:21,700
pitch.

646
00:33:24,600 --> 00:33:28,400
So let's let's just do this part first and then we'll can talk a

647
00:33:28,400 --> 00:33:32,200
little bit more about that so I don't remember what loaded bitmap had

648
00:33:32,200 --> 00:33:32,700
in it.

649
00:33:33,600 --> 00:33:34,900
Where's the renderer code?

650
00:33:34,900 --> 00:33:38,900
They're loaded bitmap had just width and height and that's what we

651
00:33:38,900 --> 00:33:39,600
actually want.

652
00:33:39,600 --> 00:33:46,700
So we want with we want height like so and then what we want to do is

653
00:33:46,700 --> 00:33:47,900
do the exact same thing.

654
00:33:47,900 --> 00:33:49,800
We did here to write out the data, right?

655
00:33:49,800 --> 00:33:50,900
We just want to do an F.

656
00:33:50,900 --> 00:33:53,400
Tell to say, this is where the data is actually.

657
00:33:53,600 --> 00:33:53,800
B.

658
00:33:53,800 --> 00:33:55,900
And in some sense, I guess we could have just done that.

659
00:33:56,000 --> 00:33:56,700
We can just share that.

660
00:33:56,700 --> 00:33:59,800
That's going to be the same right between each piece of code.

661
00:33:59,800 --> 00:34:02,800
It's just wherever we are in the file at this point, that's where this

662
00:34:02,800 --> 00:34:04,100
thing is, right?

663
00:34:04,100 --> 00:34:06,700
So we don't have to do that in both branches, we only have to do the

664
00:34:06,700 --> 00:34:10,300
part that's specific to either Branch, right?

665
00:34:11,600 --> 00:34:12,199
So that's fine.

666
00:34:13,000 --> 00:34:15,100
So if we do that, excuse me.

667
00:34:16,900 --> 00:34:19,000
In fact, we could even be a little bit more snarky here.

668
00:34:19,000 --> 00:34:22,400
If we wanted to, I'm not going to be, I'm not going to be so.

669
00:34:22,400 --> 00:34:27,500
Anyway, we go ahead here and we pull out that data for the dimension

670
00:34:27,500 --> 00:34:27,900
in there.

671
00:34:28,199 --> 00:34:29,900
And then what we want to do is we want to do the same thing with your,

672
00:34:29,900 --> 00:34:30,400
for the sound.

673
00:34:30,400 --> 00:34:32,100
But instead of writing out, like, the samples, right?

674
00:34:32,100 --> 00:34:34,900
We have to write out the bitmap, b b.

675
00:34:35,500 --> 00:34:40,500
So, if I go ahead and oops, do memory, what we need to know is how big

676
00:34:40,500 --> 00:34:43,900
this is, and we know this going to be right, the width times the

677
00:34:43,900 --> 00:34:46,600
height times for, Right?

678
00:34:46,699 --> 00:34:47,900
Four bytes per pixel.

679
00:34:47,900 --> 00:34:51,600
That's that's what we are always going to keep our bitmaps to be

680
00:34:51,600 --> 00:34:53,800
formatted as at the moment, anyway, right?

681
00:34:54,300 --> 00:34:57,600
So the problem here is that if the sot, we could actually just assert

682
00:34:57,600 --> 00:35:02,700
it, I suppose that the stride in the width are equal, right?

683
00:35:02,700 --> 00:35:09,700
That the bitmap right, the bitmap pitch is going to be equal to the

684
00:35:09,700 --> 00:35:10,700
width, x 4.

685
00:35:11,600 --> 00:35:13,200
So that everything is nicely packed.

686
00:35:13,400 --> 00:35:16,500
And so, what we would want to do is you know, if we have bitmaps that

687
00:35:16,600 --> 00:35:19,600
Don't conform to this format where there's no extra, you know, there's

688
00:35:19,600 --> 00:35:21,100
no padding basically on the rose.

689
00:35:21,300 --> 00:35:23,600
If we have ones that had padding on the roads, we would want to write

690
00:35:23,600 --> 00:35:26,500
a little code here, just rip that out because we don't want the load

691
00:35:26,500 --> 00:35:26,800
time.

692
00:35:26,800 --> 00:35:28,600
Code of the game to have to deal with multiple pitches.

693
00:35:28,600 --> 00:35:29,900
We want them all to be fixed.

694
00:35:30,100 --> 00:35:34,600
I think, or if we always wanted the padded to a particular thing, we

695
00:35:34,600 --> 00:35:37,100
would want to use the code here, that does that particular Paddock,

696
00:35:37,600 --> 00:35:38,200
right?

697
00:35:38,900 --> 00:35:40,500
So that's, that's that.

698
00:35:41,600 --> 00:35:42,300
So,

699
00:35:47,200 --> 00:35:48,100
That is that.

700
00:35:48,100 --> 00:35:54,900
But now we have to go actually Implement these these guys, from to

701
00:35:54,900 --> 00:35:57,000
load, actual pointers, to froebel memory.

702
00:35:57,000 --> 00:35:58,300
So let's take a look.

703
00:35:58,300 --> 00:35:59,300
Here we have

704
00:36:00,000 --> 00:36:03,500
The sample count, the loaded web of apparently doesn't have the sample

705
00:36:03,500 --> 00:36:04,100
County in it.

706
00:36:04,900 --> 00:36:05,800
Why is that

707
00:36:07,400 --> 00:36:08,100
What did I do?

708
00:36:08,100 --> 00:36:17,400
Wrong there groups voted sound so it is okay.

709
00:36:17,400 --> 00:36:19,700
Oh, is it this one that we're actually complaining about?

710
00:36:20,600 --> 00:36:24,900
Let me double-check at what the file format says, it has in its HHA.

711
00:36:24,900 --> 00:36:28,700
Sound, its sound, dot sample.

712
00:36:28,700 --> 00:36:29,500
Count.

713
00:36:29,800 --> 00:36:32,700
What is it complaining about cannot convert from loaded sound too.

714
00:36:32,700 --> 00:36:33,700
Loaded sound star.

715
00:36:33,700 --> 00:36:34,300
That's fine.

716
00:36:34,300 --> 00:36:34,700
We're going to fix.

717
00:36:34,700 --> 00:36:37,000
That s is not a member of hhas.

718
00:36:37,200 --> 00:36:37,700
Set.

719
00:36:38,000 --> 00:36:40,000
Oh it's the one down here.

720
00:36:40,100 --> 00:36:40,300
Oops.

721
00:36:40,300 --> 00:36:42,900
My bad jump to a conclusion there.

722
00:36:44,100 --> 00:36:45,300
Let's see.

723
00:36:45,400 --> 00:36:47,700
Cannot convert argument for to file star.

724
00:36:47,700 --> 00:36:51,000
Oh, of course, I mixed up the order as I often do with f.

725
00:36:51,000 --> 00:36:51,500
Right.

726
00:36:52,300 --> 00:36:53,000
There we go.

727
00:36:53,800 --> 00:36:56,300
So, here we are, load, BMP.

728
00:36:56,300 --> 00:36:57,600
Can't that's fine too.

729
00:36:57,600 --> 00:37:00,500
And this guy office is going to be the wrong order as well.

730
00:37:00,500 --> 00:37:02,900
So it is flipped Loops put that around

731
00:37:05,400 --> 00:37:12,400
Okay, so now and memory as we missed the accidentally, got it dash out

732
00:37:12,400 --> 00:37:12,800
there.

733
00:37:13,600 --> 00:37:16,200
So now we've got all that stuff set up.

734
00:37:16,200 --> 00:37:20,200
We just need to actually make these guys return a chunk, that can be

735
00:37:20,200 --> 00:37:21,600
freed if that makes sense.

736
00:37:22,700 --> 00:37:26,300
And we need to implement this, this read entire file thing to

737
00:37:26,300 --> 00:37:29,800
actually, you know, to actually read an entire file if that makes

738
00:37:29,800 --> 00:37:30,200
sense.

739
00:37:32,400 --> 00:37:34,600
I'm trying to think if I don't know if I actually you know what, I

740
00:37:34,600 --> 00:37:36,000
don't really even need to do it that way.

741
00:37:36,000 --> 00:37:38,500
I'm just I'm just going to do this, right?

742
00:37:40,800 --> 00:37:43,100
Something like this, let's see.

743
00:37:43,200 --> 00:37:46,800
Avoid memory or void star, free must and do it that way.

744
00:37:47,400 --> 00:37:51,500
That's a little bit easier than than doing anything more complicated

745
00:37:51,500 --> 00:37:51,900
with it.

746
00:37:52,300 --> 00:37:58,800
So, that point these can actually just look like this free web 33

747
00:37:59,700 --> 00:38:00,900
bitmap got three.

748
00:38:02,000 --> 00:38:04,800
all right, so

749
00:38:08,000 --> 00:38:13,200
Think that's all good and I just have to make sure that these pointers

750
00:38:13,200 --> 00:38:13,800
here.

751
00:38:13,800 --> 00:38:15,300
Change two dots.

752
00:38:15,800 --> 00:38:18,300
The curse of see no one knows why they did.

753
00:38:18,300 --> 00:38:23,000
That makes no sense but that's just the way I did.

754
00:38:23,700 --> 00:38:24,400
What are you gonna do?

755
00:38:29,400 --> 00:38:31,000
These are also wrong.

756
00:38:31,400 --> 00:38:32,400
So, we're these

757
00:38:33,600 --> 00:38:35,700
So is that Loops that?

758
00:38:36,800 --> 00:38:42,700
Okay, so now what I have to do is actually implement this loaded web

759
00:38:42,700 --> 00:38:44,700
this this bit here, right?

760
00:38:46,200 --> 00:38:49,100
And so, I have to do the load by having a little bit map, I have to

761
00:38:49,100 --> 00:38:51,400
implement the read entire file function, right?

762
00:38:51,400 --> 00:38:54,900
Because it's not actually doing anything right now and once it reads

763
00:38:54,900 --> 00:38:58,200
it, when it does the result thing here, I'm just going to say oh by

764
00:38:58,200 --> 00:38:59,900
the way, you know, if you could just

765
00:39:00,000 --> 00:39:07,100
Free that memory, you know, from the contents and the same is true for

766
00:39:07,100 --> 00:39:09,000
for the load web, right?

767
00:39:10,000 --> 00:39:11,000
So read result.

768
00:39:11,400 --> 00:39:15,600
Oops, result that 3, it's going to read results, contents.

769
00:39:16,700 --> 00:39:19,600
And so that just freeze the memory, we don't not like we care.

770
00:39:19,600 --> 00:39:21,800
I mean, it's just a suppressor, but if you imagine a huge number of

771
00:39:21,800 --> 00:39:23,900
assets, you might blow out memory.

772
00:39:23,900 --> 00:39:26,500
If you were never freeing it or something like this, so just seems

773
00:39:26,500 --> 00:39:27,500
like a reasonable thing to do.

774
00:39:28,800 --> 00:39:29,300
So anyway,

775
00:39:30,500 --> 00:39:31,800
In read entire file.

776
00:39:32,000 --> 00:39:35,500
What I want to do is Malik, you know, the file size, right?

777
00:39:35,600 --> 00:39:38,400
I want to F read which is the opposite of the about F, right?

778
00:39:38,400 --> 00:39:38,900
Right.

779
00:39:38,900 --> 00:39:47,600
I want to F read the file size in as like, one big chunk, and into

780
00:39:47,600 --> 00:39:51,300
like, basically the the result that contents, right?

781
00:39:51,300 --> 00:39:54,400
In fact, I guess you could say, you want to do this, right?

782
00:39:54,700 --> 00:39:57,400
We want to, we want to do content size.

783
00:39:57,400 --> 00:39:59,900
So we want to read in the whole thing after

784
00:40:00,300 --> 00:40:02,400
Take a chunk that fits it, right?

785
00:40:03,100 --> 00:40:06,400
So that's really the entirety of what we're talking about here.

786
00:40:06,400 --> 00:40:07,300
It's not out.

787
00:40:07,300 --> 00:40:09,600
I guess it's in at this point, right?

788
00:40:10,000 --> 00:40:12,300
So what this is going to look like is really very simple.

789
00:40:12,600 --> 00:40:14,500
We're just going to define a new file handle.

790
00:40:14,600 --> 00:40:17,300
We're going to say that the input file right?

791
00:40:17,400 --> 00:40:20,800
Is going to be read as a binary file off to ask again.

792
00:40:20,800 --> 00:40:22,400
It's the same F open, we're using before.

793
00:40:23,700 --> 00:40:24,400
It doesn't really matter.

794
00:40:24,400 --> 00:40:27,000
If you know these things, these are just the C runtime, libraries ways

795
00:40:27,000 --> 00:40:27,800
of loading files.

796
00:40:27,900 --> 00:40:30,300
Like I said, not going to be used in handmade here at all.

797
00:40:31,300 --> 00:40:34,900
It's only in this asset processor so assuming that we got, it will do

798
00:40:34,900 --> 00:40:35,100
that.

799
00:40:35,100 --> 00:40:38,400
Otherwise we'll we'll just print a little lame little error message

800
00:40:38,400 --> 00:40:47,900
here, printf, right error cannot open file, whatever the file name is,

801
00:40:48,600 --> 00:40:49,000
right?

802
00:40:50,000 --> 00:40:53,200
And so then what we would do,

803
00:40:58,100 --> 00:40:58,600
Here.

804
00:41:00,100 --> 00:41:05,500
Is we just need to know how big the how big this thing is once we know

805
00:41:05,500 --> 00:41:06,900
how big the file is.

806
00:41:07,100 --> 00:41:08,200
We can read the whole thing.

807
00:41:08,200 --> 00:41:13,800
We can allocate space for it, read the whole thing in, right, and then

808
00:41:13,900 --> 00:41:17,700
then close it and that's all we would need to do.

809
00:41:17,700 --> 00:41:21,700
So we just need to know how big the file actually is and what we can

810
00:41:21,700 --> 00:41:22,600
do for that.

811
00:41:22,600 --> 00:41:25,500
Right, is you've already seen this FC?

812
00:41:25,700 --> 00:41:29,800
Remember when I said, well, F CK allows you to do seek end.

813
00:41:30,100 --> 00:41:32,600
And specify a number of bytes, from the end to seek.

814
00:41:32,600 --> 00:41:36,300
So what I can do is just seek to the end of the file seek back to the

815
00:41:36,300 --> 00:41:38,000
beginning of the file like this, right?

816
00:41:38,000 --> 00:41:42,700
So seek to the end seek to the getting when I seek to the end, the F,

817
00:41:42,700 --> 00:41:46,200
tell result the file position that it would report to me is going to

818
00:41:46,200 --> 00:41:47,400
be the size of the file, right?

819
00:41:47,400 --> 00:41:49,700
Because I've gone all the way to the end, so, it's just a little

820
00:41:49,700 --> 00:41:52,600
hacky, but I don't know if there's a cleaner way to do it in the C

821
00:41:52,600 --> 00:41:53,500
runtime Library.

822
00:41:55,200 --> 00:41:58,000
So, yeah, that works in a pinch.

823
00:42:00,000 --> 00:42:00,500
Excuse me.

824
00:42:01,200 --> 00:42:04,100
So content size, misspelled.

825
00:42:04,100 --> 00:42:06,900
There, it's actually contents size.

826
00:42:08,800 --> 00:42:10,000
So that's basically it.

827
00:42:11,000 --> 00:42:14,300
And if I'm not mistaken, we've more or less finished the code, we

828
00:42:14,300 --> 00:42:15,400
actually want.

829
00:42:16,100 --> 00:42:18,500
Let's take a look though at what it's doing because I kind of just

830
00:42:18,500 --> 00:42:21,100
slammed that in there somewhat willy-nilly.

831
00:42:22,200 --> 00:42:25,800
So you know, we F tell the data-offset that's where it thinks we're

832
00:42:25,800 --> 00:42:26,800
going to write to.

833
00:42:26,800 --> 00:42:28,900
We're going to load a WAV file in here.

834
00:42:29,000 --> 00:42:31,200
Oops, looks like we

835
00:42:32,300 --> 00:42:36,000
Looks like we did not load the file.

836
00:42:38,100 --> 00:42:39,500
Oh, the fucked up.

837
00:42:40,500 --> 00:42:44,900
Well, there is one thing that we will have to do which I didn't think

838
00:42:44,900 --> 00:42:49,000
of the first asset in all of our stuff is intentionally left blank,

839
00:42:49,100 --> 00:42:49,600
right?

840
00:42:50,000 --> 00:42:55,600
So in this file we can't just assume that we can actually load the

841
00:42:55,600 --> 00:42:56,000
file name.

842
00:42:56,000 --> 00:43:01,100
The file name May intentionally have been low, no on that first value.

843
00:43:01,400 --> 00:43:01,900
So what I could

844
00:43:02,000 --> 00:43:07,000
Do I guess is just start after the first index, because all the rest

845
00:43:07,000 --> 00:43:09,700
of the ones should be non-null, right?

846
00:43:10,200 --> 00:43:11,100
And that should be fine.

847
00:43:11,200 --> 00:43:13,400
I would think, let's find out.

848
00:43:14,900 --> 00:43:18,200
So if I come in here and load a BMP,

849
00:43:19,800 --> 00:43:20,700
What happens?

850
00:43:21,800 --> 00:43:22,400
Oh, dear.

851
00:43:23,500 --> 00:43:24,700
That doesn't look good at all.

852
00:43:25,700 --> 00:43:30,400
I wonder if this if this code is not let's let's step in here and see

853
00:43:31,200 --> 00:43:35,000
if I'm doing this correctly at all step in there.

854
00:43:35,600 --> 00:43:39,000
I want to open, what am I opening test hero, Shadow?

855
00:43:40,200 --> 00:43:41,600
So we're able to do that.

856
00:43:41,600 --> 00:43:44,800
Let's see how big it thinks it is 125 130.

857
00:43:45,400 --> 00:43:49,400
Let's see if that's commensurate with the actual data just you know

858
00:43:49,400 --> 00:43:51,500
because we're trying to make sure we did this, right.

859
00:43:52,100 --> 00:43:52,600
Let's

860
00:43:54,300 --> 00:43:55,600
I went.

861
00:43:55,600 --> 00:43:58,100
Yeah, that's looks correct.

862
00:43:58,500 --> 00:44:00,100
We seek back to the beginning.

863
00:44:00,500 --> 00:44:02,700
Oh, nah typo.

864
00:44:03,300 --> 00:44:04,600
We did not seek back to the beginning.

865
00:44:04,600 --> 00:44:05,400
We select know.

866
00:44:05,400 --> 00:44:08,400
Where do you see that supposed to be seek set?

867
00:44:08,500 --> 00:44:11,300
I want to set it back to the 20 to the beginning.

868
00:44:11,500 --> 00:44:13,100
Seeks out his relatives beginning of the file.

869
00:44:13,700 --> 00:44:15,300
Well, that would that would do it.

870
00:44:16,100 --> 00:44:18,900
Let's try that one more time so I want to come in here.

871
00:44:19,500 --> 00:44:22,200
Do the read entire file is this now a little more.

872
00:44:22,400 --> 00:44:22,600
Yeah.

873
00:44:22,600 --> 00:44:23,300
So now we've

874
00:44:23,400 --> 00:44:26,500
The values that look more correct.

875
00:44:26,600 --> 00:44:28,000
We come through here.

876
00:44:28,300 --> 00:44:30,600
We do our bit scans and all our other good stuff.

877
00:44:30,800 --> 00:44:32,200
Let's step out.

878
00:44:34,200 --> 00:44:35,300
See what we get here.

879
00:44:36,100 --> 00:44:38,400
What's our desk to look like dest?

880
00:44:39,600 --> 00:44:42,100
So at the data offsets their, its first tag is one.

881
00:44:42,100 --> 00:44:46,900
It didn't have any tags because it's one pass last is also one.

882
00:44:47,200 --> 00:44:48,800
We have the pit map itself.

883
00:44:49,500 --> 00:44:51,800
It's dimensions are 144 about 217.

884
00:44:51,800 --> 00:44:52,300
Looks right.

885
00:44:52,500 --> 00:44:57,700
It's a line percentage is 5 and point one five, six, six, eight, two,

886
00:44:57,700 --> 00:44:59,100
zero to nine.

887
00:45:02,100 --> 00:45:08,800
Well, maybe that's correct but maybe it's not.

888
00:45:09,500 --> 00:45:10,300
Nope, that's fine.

889
00:45:11,300 --> 00:45:12,100
What do you know?

890
00:45:12,600 --> 00:45:14,000
That's what we wanted.

891
00:45:15,100 --> 00:45:17,700
So, okay, we're going to assert that.

892
00:45:17,700 --> 00:45:20,700
It's aligned properly for our purposes, and then we're going to go

893
00:45:20,700 --> 00:45:23,600
ahead and free it and then we're going to come back through.

894
00:45:23,600 --> 00:45:26,300
So that's going to write a bunch of bitmaps out.

895
00:45:27,100 --> 00:45:30,800
And so, you know, we can come back in here and do our load wave.

896
00:45:32,000 --> 00:45:35,100
See if the load wave also works, right?

897
00:45:35,100 --> 00:45:36,900
Those guys out free it.

898
00:45:37,400 --> 00:45:40,000
So yeah, off we go.

899
00:45:40,600 --> 00:45:45,200
There's their asset processor, quote, unquote, and you can see that we

900
00:45:45,200 --> 00:45:50,700
now have a 17 megabyte file.

901
00:45:51,400 --> 00:45:56,700
That is are bundled asset file now, I don't know if that's actually

902
00:45:56,700 --> 00:46:00,300
the size that it should be because we haven't really done any

903
00:46:00,300 --> 00:46:01,600
validation of anything yet.

904
00:46:02,600 --> 00:46:07,100
But I suspect that that is probably correct.

905
00:46:07,100 --> 00:46:13,000
Maybe because half of this guy, right?

906
00:46:13,000 --> 00:46:18,500
We're 11 Channel of the music test, which I think is all we keep now,

907
00:46:18,700 --> 00:46:19,000
right?

908
00:46:19,000 --> 00:46:21,400
I think we're only doing one channel, right?

909
00:46:22,800 --> 00:46:27,600
Is going to be like 15 megabytes and then all of these guys are very

910
00:46:27,600 --> 00:46:28,000
tiny.

911
00:46:28,000 --> 00:46:31,900
So they could easily only add up to 2 MB, that seems plausible.

912
00:46:32,800 --> 00:46:37,300
So we don't know that our code is working at all yet.

913
00:46:37,500 --> 00:46:42,600
It would be very premature to suggest any such thing but what we do

914
00:46:42,600 --> 00:46:47,100
know is that we are not totally implausible and so if that worked

915
00:46:47,100 --> 00:46:48,600
properly, what we have done is replaced.

916
00:46:48,600 --> 00:46:53,100
All of these tests files in here with one file that's just test that

917
00:46:53,100 --> 00:46:56,500
ha which includes all of the data for the game, right?

918
00:47:00,300 --> 00:47:01,400
so now,

919
00:47:02,900 --> 00:47:04,100
That we've done that.

920
00:47:05,500 --> 00:47:12,200
The next question is could we use that for our actual game and have it

921
00:47:12,200 --> 00:47:12,600
run at all?

922
00:47:12,600 --> 00:47:16,500
We've only got 10 minutes so that might be a little bit too much to

923
00:47:16,500 --> 00:47:19,800
bite off at the moment but we can certainly start.

924
00:47:19,800 --> 00:47:22,300
And we're going to need to start validating the file anyway.

925
00:47:22,300 --> 00:47:25,900
So you know, we might as well go ahead and do that.

926
00:47:25,900 --> 00:47:29,000
Now, if we take a look at what's happening in here,

927
00:47:30,400 --> 00:47:34,700
Where I set the structure up, what I can do I'm going to verify that

928
00:47:34,700 --> 00:47:36,000
we're running the way that we thought.

929
00:47:36,000 --> 00:47:36,500
You know what?

930
00:47:36,500 --> 00:47:38,000
Oops that's the asset Builder.

931
00:47:38,100 --> 00:47:39,100
Don't need to run that again.

932
00:47:39,900 --> 00:47:45,300
Let's go back to win32 handmade dot s Ln and run it.

933
00:47:47,300 --> 00:47:51,300
So we're running that we should probably also just for good measure

934
00:47:51,400 --> 00:47:55,200
because, you know, it's a little odd should probably take out that

935
00:47:55,200 --> 00:47:57,400
piece of test code, that's in the audio.

936
00:47:57,400 --> 00:47:59,800
Mixer, that forces all sounds to play.

937
00:48:00,000 --> 00:48:01,200
Be fast, right?

938
00:48:01,200 --> 00:48:08,000
Like that is, you know, I don't believe that, that is what we wanted.

939
00:48:08,000 --> 00:48:11,300
So 1.9, get rid of that 1.9.

940
00:48:15,200 --> 00:48:17,800
So now we're playing properly, right?

941
00:48:19,400 --> 00:48:21,900
And you can see all the Assets in the game are working properly and

942
00:48:21,900 --> 00:48:22,600
all that sort of stuff.

943
00:48:22,600 --> 00:48:26,100
So, what we want to do now is see if we can just switch over

944
00:48:27,200 --> 00:48:28,400
To using that pack file.

945
00:48:30,000 --> 00:48:31,100
So let's start.

946
00:48:31,300 --> 00:48:35,400
So the first thing that we're going to do to do this is figure out

947
00:48:35,400 --> 00:48:38,900
what the stuff is that we actually wanted to initialize correctly,

948
00:48:38,900 --> 00:48:39,200
right?

949
00:48:39,200 --> 00:48:41,300
That that is, that is actually being initialized here.

950
00:48:41,500 --> 00:48:42,100
And what stuff?

951
00:48:42,100 --> 00:48:43,900
We just don't care about, right?

952
00:48:44,200 --> 00:48:48,200
So, the debug stuff can all go away for the most part, right?

953
00:48:48,200 --> 00:48:53,400
Like, the debug stuff here, can all get removed like so.

954
00:48:54,800 --> 00:48:56,900
And so we would really only have

955
00:48:57,000 --> 00:49:03,400
These left over, right, we would then get rid of like, almost all of

956
00:49:03,400 --> 00:49:05,300
this stuff, right?

957
00:49:05,800 --> 00:49:07,600
Almost all of this would go away.

958
00:49:07,800 --> 00:49:09,600
So we dif zero this out.

959
00:49:11,100 --> 00:49:18,100
And yeah, it looks like all of that is all going to go away, right?

960
00:49:18,400 --> 00:49:26,700
So all that would go away as well as would pretty much all of

961
00:49:26,900 --> 00:49:31,300
This stuff right would go away as well.

962
00:49:33,500 --> 00:49:35,600
So, all of that stuff would go away.

963
00:49:37,500 --> 00:49:43,100
And what we would have to do now is we would have to sort of we're

964
00:49:43,100 --> 00:49:47,200
going to have to kind of do this into two tranches because first I

965
00:49:47,200 --> 00:49:51,900
want to use our existing debug file load routine, to load the whole

966
00:49:51,900 --> 00:49:54,400
file into memory and just use it that way.

967
00:49:55,300 --> 00:50:01,800
And then, after that, we will go and you add a path to our Windows

968
00:50:02,000 --> 00:50:06,800
platform layer that will actually do proper overlap Tayo for us.

969
00:50:07,400 --> 00:50:11,500
so let's go ahead and if zero out the rest of this,

970
00:50:15,900 --> 00:50:22,000
Like so and so really what we've got is now these these sort of load

971
00:50:22,400 --> 00:50:24,800
these guys here, right is what's actually happening.

972
00:50:25,700 --> 00:50:28,800
So what I'd like to do I think what I'd like to do, there's a there's

973
00:50:28,800 --> 00:50:29,900
a pretty good way.

974
00:50:29,900 --> 00:50:33,100
I think that we could stub these out.

975
00:50:33,200 --> 00:50:34,700
I think there's a pretty good way that I can.

976
00:50:34,700 --> 00:50:38,500
I can I should just say first of all, when you're doing a big

977
00:50:38,500 --> 00:50:40,400
co-chairs like this you've seen me do it many times.

978
00:50:40,400 --> 00:50:41,900
I don't know if I've ever explicitly set it.

979
00:50:42,200 --> 00:50:45,600
I like to schedule the work out in my brain in

980
00:50:45,700 --> 00:50:46,800
Branches, right?

981
00:50:46,800 --> 00:50:51,900
I like to be able to go, let's make one change and validate that it's

982
00:50:51,900 --> 00:50:52,200
working.

983
00:50:52,200 --> 00:50:53,700
Make another change of attitude.

984
00:50:53,900 --> 00:50:56,000
I don't just try to do the whole thing at once.

985
00:50:56,200 --> 00:50:59,400
Unless I figured in my head that really that would be very efficient

986
00:50:59,400 --> 00:50:59,800
to do.

987
00:51:00,200 --> 00:51:04,000
I like to kind of do it in steps, so that I'm not taking too big of a

988
00:51:04,000 --> 00:51:07,000
leap of faith, so I can see how it's working out and potentially save

989
00:51:07,000 --> 00:51:07,400
myself.

990
00:51:07,400 --> 00:51:11,800
Some trouble if I go, no, not quite so and similarly with debugging.

991
00:51:11,800 --> 00:51:15,200
If I, if I replace only one thing at a time, it's easier to debug

992
00:51:15,200 --> 00:51:17,500
because I know where the bug might be, whereas, if I replace

993
00:51:17,500 --> 00:51:20,800
everything, I have no idea where the bug is, right?

994
00:51:20,800 --> 00:51:22,400
It could be in any of it and it's harder.

995
00:51:22,400 --> 00:51:24,400
It takes longer to kind of isolate it down.

996
00:51:25,700 --> 00:51:29,500
So that's you know, just to be a little bit more explicit, sort of

997
00:51:29,500 --> 00:51:30,200
philosophically.

998
00:51:30,200 --> 00:51:32,700
Conceptually about what's going on there.

999
00:51:32,700 --> 00:51:34,300
That's that's sort of where I'm at.

1000
00:51:34,700 --> 00:51:38,500
So what I'm going to do is I'm going to take the debug load bitmap,

1001
00:51:38,500 --> 00:51:40,000
the to debug ones, right?

1002
00:51:40,000 --> 00:51:41,100
The load wave.

1003
00:51:42,600 --> 00:51:43,700
Debug load.

1004
00:51:43,900 --> 00:51:46,900
Wave, I'm going to stub those out.

1005
00:51:48,500 --> 00:51:50,500
Like this and just do like a cert.

1006
00:51:51,100 --> 00:51:54,400
No no no no right.

1007
00:51:55,300 --> 00:51:59,800
And then I'm going to do result equals some other thing and return,

1008
00:52:00,100 --> 00:52:00,600
right?

1009
00:52:01,300 --> 00:52:09,800
And similarly for debug load BMP, I'm going to do groups have it.

1010
00:52:10,700 --> 00:52:12,900
I am going to do debug

1011
00:52:15,200 --> 00:52:16,100
Wow.

1012
00:52:19,400 --> 00:52:22,800
I'm going to do the exact same thing for it.

1013
00:52:23,200 --> 00:52:25,400
Start SS.

1014
00:52:26,100 --> 00:52:34,400
Mmm, no loaded bitmap result, equals blah return results, right?

1015
00:52:35,800 --> 00:52:42,100
So now we compile, first, I have to actually put these in the correct

1016
00:52:42,100 --> 00:52:44,200
order shift those up here.

1017
00:52:44,800 --> 00:52:47,800
So now, you know, we just wouldn't run because immediately when an

1018
00:52:47,800 --> 00:52:51,400
asset was needed, it would assert and it would just say, no, you know,

1019
00:52:51,400 --> 00:52:57,300
you don't have that that asset, although for some or it wouldn't,

1020
00:52:58,700 --> 00:53:01,600
that's a bit odd, oh, right?

1021
00:53:01,600 --> 00:53:03,000
Because this is the good as any assets.

1022
00:53:04,700 --> 00:53:05,900
That's a kind of cool.

1023
00:53:06,000 --> 00:53:08,900
It's kind of cool how that works right when your whole asset system is

1024
00:53:08,900 --> 00:53:09,700
based on queries.

1025
00:53:09,700 --> 00:53:12,300
Like this you can just remove all the Assets in the game doesn't like

1026
00:53:12,300 --> 00:53:13,000
crash or anything.

1027
00:53:13,000 --> 00:53:16,100
It just it tries to build bitmaps and it says though there weren't any

1028
00:53:16,100 --> 00:53:18,000
in it, just keeps on going about it today.

1029
00:53:18,700 --> 00:53:20,500
That's kind of cool.

1030
00:53:21,300 --> 00:53:21,900
All right.

1031
00:53:21,900 --> 00:53:22,900
Well anyway.

1032
00:53:23,400 --> 00:53:26,900
So now what I'd like to do is try to restore those assets by using

1033
00:53:26,900 --> 00:53:32,900
debug read entire file to read in the entire that entire HHA, that we

1034
00:53:32,900 --> 00:53:33,400
wrote out

1035
00:53:33,500 --> 00:53:34,000
Right?

1036
00:53:34,200 --> 00:53:39,600
So what I want to do here is I want to say okay read this thing, read

1037
00:53:39,600 --> 00:53:44,300
this whole thing in and we're going to read in that what was the name

1038
00:53:44,300 --> 00:53:44,800
of that guy?

1039
00:53:44,800 --> 00:53:47,500
Test dot h, AI guess whatever it was right.

1040
00:53:47,600 --> 00:53:49,600
When I read the whole that whole test dot h.

1041
00:53:49,600 --> 00:53:56,100
A thing in, we're going to then go through all the Assets in it and

1042
00:53:56,100 --> 00:53:58,700
basically we're just going to let kind of plug our stuff to sort of

1043
00:53:58,900 --> 00:53:59,800
reference into the

1044
00:54:00,000 --> 00:54:00,500
Memory.

1045
00:54:00,700 --> 00:54:04,700
So we loaded the whole file into memory and I'm just going to flat out

1046
00:54:04,700 --> 00:54:09,000
romp straight over the other stuff in here with pointers directly into

1047
00:54:09,000 --> 00:54:09,700
that file.

1048
00:54:09,800 --> 00:54:10,400
Right?

1049
00:54:11,100 --> 00:54:16,400
So so I'm going to say that we overwrite all of these guys, the asset

1050
00:54:16,400 --> 00:54:18,200
count, right?

1051
00:54:18,200 --> 00:54:20,000
The assets themselves.

1052
00:54:21,200 --> 00:54:25,200
All of that stuff is going to get overwritten by the stuff that's in

1053
00:54:25,200 --> 00:54:26,100
there, right?

1054
00:54:27,500 --> 00:54:32,300
Okay, so the tag array is pretty darn.

1055
00:54:32,300 --> 00:54:32,600
I guess.

1056
00:54:32,600 --> 00:54:33,400
I kind of

1057
00:54:34,700 --> 00:54:37,500
I kind of do have to now that I think about it, do it a little bit

1058
00:54:37,500 --> 00:54:38,100
more.

1059
00:54:38,500 --> 00:54:41,000
I want to actually do the changeover processing.

1060
00:54:41,000 --> 00:54:42,300
So I dig it back.

1061
00:54:42,300 --> 00:54:44,500
I'm not going to quite do it directly that way.

1062
00:54:44,500 --> 00:54:45,100
Perhaps.

1063
00:54:45,300 --> 00:54:48,100
So what I'll I will actually do this, right?

1064
00:54:48,100 --> 00:54:52,700
I'll actually do the asset count equals, like, you know, whatever the

1065
00:54:52,700 --> 00:54:57,700
hhhh, a headers asset count was, right.

1066
00:54:57,900 --> 00:54:59,200
Because we'll know what that is now.

1067
00:54:59,800 --> 00:55:03,800
And then I'll push the right number on there and the same will be true

1068
00:55:04,100 --> 00:55:04,300
for

1069
00:55:04,400 --> 00:55:05,800
Tag count, right?

1070
00:55:07,700 --> 00:55:11,800
Like so and so then we'll have the arrays and then I'll just Loop over

1071
00:55:11,800 --> 00:55:12,500
them all.

1072
00:55:13,000 --> 00:55:15,600
And an actually set them up, right?

1073
00:55:16,500 --> 00:55:19,200
And we've got three things to Loop over the tag array.

1074
00:55:23,000 --> 00:55:26,600
At the asset type array and then the asset array itself.

1075
00:55:27,500 --> 00:55:29,000
So here is the tags.

1076
00:55:29,600 --> 00:55:32,200
And right now we're not actually doing today so we may just flat load

1077
00:55:32,200 --> 00:55:34,800
the tags, the tags could just be pointed to directly.

1078
00:55:36,200 --> 00:55:38,900
In fact, we could yeah, I don't know how we want.

1079
00:55:38,900 --> 00:55:41,000
We'll want to do is I'm going to Loop through them for now but we

1080
00:55:41,000 --> 00:55:42,800
could just turn them into flat loading.

1081
00:55:42,800 --> 00:55:46,200
And I'm going to say this is a to do for next time, right?

1082
00:55:47,000 --> 00:55:50,500
Decide what will be flat loaded?

1083
00:55:51,300 --> 00:55:52,200
What won't be?

1084
00:55:55,000 --> 00:55:55,500
Right.

1085
00:55:55,700 --> 00:55:58,900
But for now I'm just going to actually interpret all the data which is

1086
00:55:58,900 --> 00:56:00,900
just, it's not going to be.

1087
00:56:00,900 --> 00:56:02,100
There's no reason for us to do that.

1088
00:56:02,100 --> 00:56:06,800
So we'll eliminate some of this in the next pass, I think so.

1089
00:56:06,900 --> 00:56:10,600
You know what we would do here is say that we have again a source on a

1090
00:56:10,600 --> 00:56:11,500
desk to centrally.

1091
00:56:11,700 --> 00:56:15,600
We have an h.h., a tag, which is the source this time because that's

1092
00:56:15,600 --> 00:56:17,100
where we're pulling from in the file.

1093
00:56:17,500 --> 00:56:21,100
So we would have basically the HHA tags.

1094
00:56:22,900 --> 00:56:23,400
That one.

1095
00:56:25,500 --> 00:56:31,100
And then he's off for now and then we have our asset tag.

1096
00:56:31,100 --> 00:56:34,000
That's the things we actually use and that's the best and that's going

1097
00:56:34,000 --> 00:56:36,400
to be the assets tags array.

1098
00:56:36,900 --> 00:56:40,000
And for each of those, we're literally just going to copy the two

1099
00:56:40,000 --> 00:56:41,300
values that are in there, right?

1100
00:56:41,300 --> 00:56:42,500
It's just ID and value.

1101
00:56:42,500 --> 00:56:49,200
So it's like dest ideal Source, ID desk, value, equals Source value.

1102
00:56:50,400 --> 00:56:51,000
Right?

1103
00:56:52,100 --> 00:56:55,700
So really all we need to do here is now actually get at that data.

1104
00:56:55,800 --> 00:56:59,800
Now what we know is, what we loaded is an aha

1105
00:57:00,100 --> 00:57:00,500
Header.

1106
00:57:00,800 --> 00:57:01,300
Right?

1107
00:57:01,400 --> 00:57:04,000
We know if we look at the file format, that's what we wrote out as the

1108
00:57:04,000 --> 00:57:04,900
first thing in the file.

1109
00:57:05,100 --> 00:57:10,200
So if we literally just straight up, cast the read result, contents

1110
00:57:10,200 --> 00:57:14,800
like the file data, if we Straight Up cast on the Y tilde, K HH, a

1111
00:57:14,800 --> 00:57:16,400
header and it could just be header.

1112
00:57:16,700 --> 00:57:21,400
It's not like as another header, the HHA header is just the first

1113
00:57:21,400 --> 00:57:23,600
passage to the first byte of the file, right?

1114
00:57:23,600 --> 00:57:26,000
And we can assert that the header

1115
00:57:28,000 --> 00:57:30,900
that we wrote out has the magic value that we expect.

1116
00:57:30,900 --> 00:57:36,000
So we know that we actually, you know, are reading one of our files at

1117
00:57:36,000 --> 00:57:36,600
the moment, you know.

1118
00:57:36,600 --> 00:57:40,400
So while we're devoting it here we know that we're not crazy and we

1119
00:57:40,400 --> 00:57:44,500
can do this H A version as well to double-check those.

1120
00:57:45,000 --> 00:57:47,900
And then from there we can just use the asset count in the the tag

1121
00:57:47,900 --> 00:57:48,500
count and so on.

1122
00:57:48,700 --> 00:57:53,100
But then we also need to figure out like where like the hahha tags are

1123
00:57:53,100 --> 00:57:54,000
and stuff like that, right?

1124
00:57:54,000 --> 00:57:57,600
So we have h a tag like that, that's just going to be

1125
00:57:57,800 --> 00:58:00,600
Again, casting to an ha tag.

1126
00:58:00,800 --> 00:58:02,400
The read result, contents.

1127
00:58:03,900 --> 00:58:07,400
But this time we need to move forward a bit, right?

1128
00:58:07,400 --> 00:58:09,700
We're going to start at where the kind of started, but we're going to

1129
00:58:09,700 --> 00:58:15,100
move to the location the file that we wrote out to tell ourselves

1130
00:58:15,100 --> 00:58:16,600
where it would be, right?

1131
00:58:16,700 --> 00:58:19,300
So we know that this is where the tags are, right?

1132
00:58:19,400 --> 00:58:21,600
So we're just going to go ahead and say all right, you know wherever

1133
00:58:21,600 --> 00:58:24,600
the header says the tags are that's for the tags are right?

1134
00:58:26,600 --> 00:58:32,200
So it looks like I didn't include this stuff in our handmade .h, so

1135
00:58:32,200 --> 00:58:33,100
I'm going to now

1136
00:58:33,900 --> 00:58:36,500
We did not include the file formats in our list of stuff.

1137
00:58:36,500 --> 00:58:41,300
So I'm going to go ahead and do include and made file formats .h.

1138
00:58:42,700 --> 00:58:49,000
So, I'm going to go and put that in there and then, oh, right.

1139
00:58:49,000 --> 00:58:52,200
And I forgot to add this guy, I meant to add this guy.

1140
00:58:52,200 --> 00:58:54,700
I like I said, I've been playing around with what I like those types

1141
00:58:54,700 --> 00:59:00,200
to be named and I've been debating on whether I like the 08 or the

1142
00:59:00,200 --> 00:59:04,500
regular 8, and some people online were saying, it shouldn't use 08 and

1143
00:59:04,500 --> 00:59:05,400
I tend to agree with them.

1144
00:59:05,400 --> 00:59:05,700
I don't know.

1145
00:59:05,700 --> 00:59:08,500
I've been, I like it to line up, but then sometimes I don't.

1146
00:59:08,500 --> 00:59:09,900
It's just, you know, you know, it is.

1147
00:59:11,400 --> 00:59:15,200
So anyway, let's take a look and see how that actually goes.

1148
00:59:15,300 --> 00:59:18,700
But we're a little bit over time, but you know, that's how it goes

1149
00:59:18,700 --> 00:59:19,200
sometimes.

1150
00:59:19,900 --> 00:59:21,100
So, let's go through here.

1151
00:59:21,300 --> 00:59:24,800
If we load this thing out, let's see, let's see, first of all, if we

1152
00:59:24,800 --> 00:59:28,200
step in here, here's the header that the magic value is what we

1153
00:59:28,200 --> 00:59:28,700
expected to be.

1154
00:59:28,700 --> 00:59:31,000
The version is to the tag count looks right, right?

1155
00:59:31,000 --> 00:59:33,000
We got the 17 different asset types.

1156
00:59:33,000 --> 00:59:34,500
We have 51 assets in there.

1157
00:59:34,600 --> 00:59:36,600
We've got 44 tags, right?

1158
00:59:36,700 --> 00:59:38,800
And RHA tags are a

1159
00:59:41,500 --> 00:59:45,000
Right, let's just look at a few of them.

1160
00:59:46,700 --> 00:59:48,500
Looks exactly right.

1161
00:59:48,500 --> 00:59:48,800
Right.

1162
00:59:48,800 --> 00:59:50,400
So we've loaded the data in.

1163
00:59:50,500 --> 00:59:53,300
It looks like we've loaded in the data properly for the most part,

1164
00:59:53,500 --> 00:59:54,000
right?

1165
00:59:56,000 --> 00:59:58,000
So I would say that's that's pretty good.

1166
00:59:58,200 --> 00:59:59,900
So I think we stopped there for

1167
01:00:02,500 --> 01:00:08,600
And what we will do tomorrow is will just finish lining and stuff up

1168
01:00:08,600 --> 01:00:11,700
in the file, like, pulling that stuff out of the file and verify that

1169
01:00:11,700 --> 01:00:12,700
everything works properly.

1170
01:00:13,200 --> 01:00:16,500
And then from there, we can just move on to loading it out piecemeal,

1171
01:00:16,800 --> 01:00:17,300
right?

1172
01:00:17,900 --> 01:00:19,700
So yeah, so that's all good.

1173
01:00:20,100 --> 01:00:24,300
Let's go ahead and go to the Q&A for people who have questions on what

1174
01:00:24,300 --> 01:00:25,300
we did today.

1175
01:00:26,000 --> 01:00:29,100
Hopefully that was all pretty clear we basically just wrote that stuff

1176
01:00:29,100 --> 01:00:29,800
out to the file

1177
01:00:30,000 --> 01:00:33,000
And now we're just loading in the stuff from the file and picking out

1178
01:00:33,000 --> 01:00:36,000
the pieces of it that we know, are the data that we actually want if

1179
01:00:36,000 --> 01:00:36,700
that makes sense.

1180
01:00:42,400 --> 01:00:43,200
All right.

1181
01:00:43,200 --> 01:00:49,900
So go and head and if you have questions on what we were doing, go

1182
01:00:49,900 --> 01:00:53,600
ahead and please preface them with Q: so I can see them and I will go

1183
01:00:53,600 --> 01:00:54,700
ahead and answer them.

1184
01:00:57,000 --> 01:00:59,300
And I see people talking about how long it's been going for.

1185
01:00:59,800 --> 01:01:03,900
Yes, it has been going for 149 days but we only code one hour a day so

1186
01:01:03,900 --> 01:01:06,300
it's basically like a hundred forty nine hours.

1187
01:01:06,600 --> 01:01:09,600
But once in a while, we've done a long stream so it's you know it's

1188
01:01:09,600 --> 01:01:13,300
probably more like figure 160 hours or something like that.

1189
01:01:13,500 --> 01:01:17,300
So if you divide that by 40 hour work week, you're talking for weeks.

1190
01:01:21,300 --> 01:01:25,600
Gaston 5 asks, what does flat loaded mean?

1191
01:01:27,800 --> 01:01:33,500
I guess I don't know why that term is what it is but I can tell you

1192
01:01:34,000 --> 01:01:35,000
what I mean by it.

1193
01:01:35,000 --> 01:01:37,800
And what I tend to hear people mean by it, right?

1194
01:01:38,400 --> 01:01:41,200
So flat loaded.

1195
01:01:43,300 --> 01:01:45,000
Continuously mean one of two things.

1196
01:01:45,400 --> 01:01:48,100
The first thing is here is the file

1197
01:01:49,400 --> 01:01:51,100
Right here is some data.

1198
01:01:52,700 --> 01:01:57,300
And here is the memory in use in the game.

1199
01:01:57,300 --> 01:02:00,100
The actual memory is going to be used by the game flat.

1200
01:02:00,100 --> 01:02:05,100
Loaded means you literally just load the thing straight away as a

1201
01:02:05,100 --> 01:02:09,600
block into memory and the game just runs straight off it.

1202
01:02:10,800 --> 01:02:14,300
I believe it's flat loaded because you know, you're not relocating it

1203
01:02:14,300 --> 01:02:16,500
or you're not allocating pieces, right?

1204
01:02:16,800 --> 01:02:20,100
So by comparison, a parsed

1205
01:02:20,900 --> 01:02:26,000
Way or a piecemeal right way of loading.

1206
01:02:26,000 --> 01:02:29,600
A file is sort of what I kind of implemented there, where it's like,

1207
01:02:30,000 --> 01:02:32,900
okay, whether or not I load the thing in as a chunk, is not really

1208
01:02:32,900 --> 01:02:34,700
that relevant to this part of this question.

1209
01:02:34,700 --> 01:02:37,800
But it's, it's whether I run out of it directly, right?

1210
01:02:37,800 --> 01:02:39,900
So, if I load this thing in, and then I start looking at it and go,

1211
01:02:39,900 --> 01:02:42,200
oh, here's a thing that says, there were five tags.

1212
01:02:42,200 --> 01:02:46,200
So, I allocate some tags here, and then here's one of the tags.

1213
01:02:46,200 --> 01:02:48,100
So, I put that in here, right?

1214
01:02:48,200 --> 01:02:50,500
That is the up like that.

1215
01:02:50,600 --> 01:02:51,500
That's the nut.

1216
01:02:51,500 --> 01:02:52,900
That's not this, right?

1217
01:02:52,900 --> 01:02:58,100
That's the other way of doing it and it's kind of the more it's clunky

1218
01:02:58,100 --> 01:02:59,900
and cumbersome and you don't want to do this, right?

1219
01:03:00,900 --> 01:03:04,300
You're wasting a bunch of time in your load, if you can figure out a

1220
01:03:04,300 --> 01:03:06,300
way to not do it, right?

1221
01:03:06,700 --> 01:03:08,900
So typically that is what flat loading means.

1222
01:03:09,600 --> 01:03:13,800
Usually and probably even in handmade hero will want to be doing

1223
01:03:13,800 --> 01:03:15,700
basically that but there's usually another step.

1224
01:03:15,700 --> 01:03:20,200
So usually what happens is, we decompress, right.

1225
01:03:20,500 --> 01:03:24,800
So we want to do something where yeah, we load in a block, we

1226
01:03:24,800 --> 01:03:28,300
decompress it and then we slam it into the data and use it directly is

1227
01:03:28,300 --> 01:03:30,100
basically what we're going to want which

1228
01:03:30,200 --> 01:03:32,600
Pretty close to Flat loaded but not exactly.

1229
01:03:32,600 --> 01:03:35,900
Because there is this step of blowing out the data, right?

1230
01:03:50,500 --> 01:03:53,500
Someone during the stream asked about the benefit of keeping all

1231
01:03:53,500 --> 01:03:56,300
assets in one file as opposed to making different asset files,

1232
01:03:56,300 --> 01:03:58,300
dedicated to each type of asset.

1233
01:04:00,200 --> 01:04:00,900
Hmm.

1234
01:04:06,500 --> 01:04:13,300
I want to make sure I want to make sure that I actually understand.

1235
01:04:13,300 --> 01:04:18,100
The question that you're asking is I'm not sure if I do

1236
01:04:20,100 --> 01:04:25,000
Are you asking why I have one big file as opposed to one file per

1237
01:04:25,000 --> 01:04:25,500
asset?

1238
01:04:25,500 --> 01:04:27,500
Like one file per bitmap or something?

1239
01:04:28,300 --> 01:04:34,100
Or are you asking why have one file instead of two files, one for

1240
01:04:34,100 --> 01:04:37,400
sounds and all the sounds are in it and one for bitmaps and all the

1241
01:04:37,400 --> 01:04:40,100
bitmaps are in it because those are two different questions and I want

1242
01:04:40,100 --> 01:04:43,000
to make sure I'm answering the proper thing if that makes sense.

1243
01:04:46,900 --> 01:04:47,800
Tt, b GM.

1244
01:04:47,800 --> 01:04:51,300
Should there be are asserts if there are no assets that match a query?

1245
01:04:57,800 --> 01:04:58,500
I don't know.

1246
01:05:05,100 --> 01:05:07,000
Maybe maybe not.

1247
01:05:07,600 --> 01:05:10,800
I don't think so probably not in assert.

1248
01:05:10,900 --> 01:05:14,000
What we might want to do is have a way that it gets logged or

1249
01:05:14,000 --> 01:05:14,300
something.

1250
01:05:14,300 --> 01:05:17,700
Eventually I'd say, take a wait-and-see approach and see if we

1251
01:05:17,700 --> 01:05:20,100
actually ever run into cases where we need that.

1252
01:05:21,900 --> 01:05:24,200
Could you ever make games to make profit off?

1253
01:05:24,600 --> 01:05:25,500
Yes, I bet.

1254
01:05:25,500 --> 01:05:26,500
It's what I do.

1255
01:05:26,500 --> 01:05:27,900
Normally, in my day job.

1256
01:05:32,600 --> 01:05:33,900
Let's see.

1257
01:05:42,700 --> 01:05:44,000
The ladder about the assets.

1258
01:05:44,000 --> 01:05:44,300
Okay?

1259
01:05:44,300 --> 01:05:46,200
So I'm going to try and answer this question then.

1260
01:05:48,800 --> 01:05:53,500
So the person who was asking that question was asking the question

1261
01:05:54,700 --> 01:05:59,500
right now, this is what we have our file look like basically, right?

1262
01:06:10,300 --> 01:06:10,900
Right.

1263
01:06:11,000 --> 01:06:14,200
This is what it looks like and if we wanted to be more explicit,

1264
01:06:14,300 --> 01:06:14,900
right?

1265
01:06:15,000 --> 01:06:20,900
It kind of looks, you know, in more detail like this, there's the

1266
01:06:20,900 --> 01:06:22,200
header portion here.

1267
01:06:23,400 --> 01:06:27,000
Right is actually broken up into like a preamble, right?

1268
01:06:27,000 --> 01:06:28,400
That really doesn't have anything in it.

1269
01:06:28,700 --> 01:06:29,400
Magic value.

1270
01:06:29,400 --> 01:06:31,100
That's right, stuff in some counts, right?

1271
01:06:31,800 --> 01:06:35,100
And then some addresses of things, and then it's got some arrays,

1272
01:06:35,200 --> 01:06:35,700
right?

1273
01:06:35,800 --> 01:06:41,200
It's got tags, you know, asset types and assets, or something like

1274
01:06:41,200 --> 01:06:41,300
this.

1275
01:06:41,300 --> 01:06:41,700
I don't remember.

1276
01:06:41,700 --> 01:06:43,100
The order could be the other way around.

1277
01:06:44,500 --> 01:06:49,800
And these things point, this this array points into here, right?

1278
01:06:50,200 --> 01:06:53,500
And it says where the various each element of this array points into

1279
01:06:53,500 --> 01:06:56,600
where the various things are and we've got, you know, right now they

1280
01:06:56,600 --> 01:06:59,100
would pretty much be in order because we Define them in order.

1281
01:06:59,400 --> 01:07:02,600
So be like bitmaps would be coming first and then eventually it

1282
01:07:02,600 --> 01:07:05,200
switches to sounds, right?

1283
01:07:05,200 --> 01:07:06,600
But we could interleave them.

1284
01:07:06,600 --> 01:07:09,500
There's no, they just happen to be written out in the order in which

1285
01:07:09,500 --> 01:07:10,300
the assets are defined.

1286
01:07:10,300 --> 01:07:11,500
And we happen to the final AR B.

1287
01:07:11,500 --> 01:07:14,100
Massive Arsenal are sound s, but we could Define them in terms.

1288
01:07:14,300 --> 01:07:15,400
Even they would still work.

1289
01:07:15,400 --> 01:07:18,600
So this is not really part of the fact that they happen to be built up

1290
01:07:18,600 --> 01:07:21,700
this way is not really part of file format.

1291
01:07:22,300 --> 01:07:27,600
So what they what the person was asking was well why not do it so that

1292
01:07:27,600 --> 01:07:32,600
you have this essentially a file, one file that is this, right?

1293
01:07:32,900 --> 01:07:37,200
And then another file that is this part with another one of these on

1294
01:07:37,200 --> 01:07:38,400
top, right?

1295
01:07:38,400 --> 01:07:43,700
So basically have you know, two files where we have header data.

1296
01:07:46,900 --> 01:07:48,800
And then one is just bitmaps.

1297
01:07:49,900 --> 01:07:52,300
And one is just sounds, right?

1298
01:07:52,300 --> 01:07:56,900
And these are the two files so it'd be like the BMP resource and the

1299
01:07:57,600 --> 01:07:59,200
wave resource whatever.

1300
01:08:00,800 --> 01:08:04,200
And not to ask not to answer a question with a question or anything.

1301
01:08:04,200 --> 01:08:06,200
But my first

1302
01:08:07,400 --> 01:08:11,000
Thing that comes to mind as to why not to do this would be, why would

1303
01:08:11,000 --> 01:08:12,500
you do this right?

1304
01:08:12,600 --> 01:08:17,300
Like what's the reason why you would want to have more files on the

1305
01:08:17,300 --> 01:08:18,800
drive than necessary, right?

1306
01:08:18,800 --> 01:08:19,200
Like,

1307
01:08:20,700 --> 01:08:22,899
It's just one more thing to worry about, right?

1308
01:08:22,899 --> 01:08:26,200
If I only have one file and that file has all the data in it, that I

1309
01:08:26,200 --> 01:08:29,000
know that when I opened that file that's the only error I had check.

1310
01:08:29,000 --> 01:08:29,500
It's like I go.

1311
01:08:29,500 --> 01:08:31,000
Okay, can I open my resource file?

1312
01:08:31,000 --> 01:08:33,600
Yes, then I know I can get all my resources and the only thing I ever

1313
01:08:33,600 --> 01:08:37,399
have to worry about is if one time I go read from this file handle and

1314
01:08:37,399 --> 01:08:40,700
the OS says it's gone or something.

1315
01:08:41,100 --> 01:08:41,800
I have to go.

1316
01:08:41,800 --> 01:08:46,200
Hey, mister user just so, you know, your machine is broken basically,

1317
01:08:46,200 --> 01:08:46,700
right?

1318
01:08:47,800 --> 01:08:48,700
Or something like this.

1319
01:08:50,100 --> 01:08:53,000
If I have to, then that just doubles the amount of work I have to do

1320
01:08:53,000 --> 01:08:54,200
when I start up, right, I've got a.

1321
01:08:54,200 --> 01:08:57,300
Now I have to have one path for parsing.

1322
01:08:57,300 --> 01:08:59,800
The bitmaps one, Parish 1:04 path for pressing the waist.

1323
01:09:00,000 --> 01:09:03,100
Just adds more stuff that can go wrong and more code, right?

1324
01:09:04,500 --> 01:09:08,800
So the main reason just why bother right like, why not?

1325
01:09:08,800 --> 01:09:14,100
Just collapse it down into something simpler when they're what, what

1326
01:09:14,100 --> 01:09:16,100
would be the actual benefit?

1327
01:09:16,500 --> 01:09:20,000
And since I can't think of a benefit to having them separate.

1328
01:09:20,300 --> 01:09:23,100
That is why I say let's keep them in one, right?

1329
01:09:33,300 --> 01:09:36,700
So it doesn't look like we have many on-topic questions.

1330
01:09:37,100 --> 01:09:41,399
So, I guess I'll take a couple off-topic ones before winding winding

1331
01:09:41,399 --> 01:09:41,899
down.

1332
01:09:44,000 --> 01:09:45,200
Where did I learn to code?

1333
01:09:45,200 --> 01:09:50,000
I learned to code when I was little, my dad taught me to program when

1334
01:09:50,000 --> 01:09:53,800
I was seven and since then I, you know, I'm self-taught.

1335
01:09:56,000 --> 01:09:58,400
How long have you been coding for 30 years?

1336
01:10:00,400 --> 01:10:01,500
Is this what you do full time?

1337
01:10:01,500 --> 01:10:02,300
Do you work for company?

1338
01:10:02,300 --> 01:10:05,900
Yes, I run my own game.

1339
01:10:06,200 --> 01:10:09,200
Research company here in Seattle.

1340
01:10:10,300 --> 01:10:11,800
And that is what I that is.

1341
01:10:11,800 --> 01:10:13,900
What I do full time, not this.

1342
01:10:13,900 --> 01:10:17,400
This is a sort of pseudo.

1343
01:10:17,400 --> 01:10:21,700
Spare time to some degree activity, but I make, you know, two hours

1344
01:10:21,700 --> 01:10:24,000
for it every day to make sure that we do it.

1345
01:10:24,300 --> 01:10:26,700
And it's basically I'm trying to kind of do it.

1346
01:10:27,500 --> 01:10:30,400
Programming education project, if that makes sense.

1347
01:10:34,800 --> 01:10:36,800
Will the game be multiplayer or single-player?

1348
01:10:36,800 --> 01:10:41,200
And will you be able to code your character kind of like code spells

1349
01:10:41,200 --> 01:10:42,400
like the name handmade here?

1350
01:10:42,400 --> 01:10:43,000
Which suggests?

1351
01:10:43,000 --> 01:10:46,700
No, it is not like code spells and it is single player.

1352
01:10:47,400 --> 01:10:48,200
Although

1353
01:10:49,500 --> 01:10:52,400
The game as it ships will be single player.

1354
01:10:52,400 --> 01:10:57,200
Unless we see some way to make the design, not be a problem that way.

1355
01:10:57,200 --> 01:11:02,600
But so the game has it ships with a but we support multiplayer for for

1356
01:11:02,600 --> 01:11:03,500
the purposes of me.

1357
01:11:03,500 --> 01:11:05,000
Showing how to program it, right?

1358
01:11:05,200 --> 01:11:10,800
So even right now in the game when you when you hit the spacebar, you

1359
01:11:10,900 --> 01:11:14,200
you add your hero and you can walk around or whatever even right now

1360
01:11:14,200 --> 01:11:18,000
in the engine test code, if you were to plug in a Xbox controller and

1361
01:11:18,000 --> 01:11:19,100
push a button on it,

1362
01:11:19,300 --> 01:11:20,300
As hero.

1363
01:11:20,600 --> 01:11:23,800
So we're pretty much making sure the code always, the code allows

1364
01:11:23,800 --> 01:11:27,000
multiplayer but the design is not supposed to be multiplayer.

1365
01:11:27,000 --> 01:11:31,600
So the game will not really be multiplayer, but the code is throughout

1366
01:11:31,600 --> 01:11:34,300
the entire development process, we will leave the code in a state that

1367
01:11:34,300 --> 01:11:38,300
allows multiple people to play the same time even though I don't think

1368
01:11:38,300 --> 01:11:40,300
we want to ship it that way, because it won't be a fun.

1369
01:11:40,300 --> 01:11:42,400
It's not designed to be a fun multiplayer game.

1370
01:11:42,400 --> 01:11:43,900
It's gonna be a fun single player game.

1371
01:11:44,100 --> 01:11:45,600
So there's that.

1372
01:11:47,600 --> 01:11:48,200
Off-topic.

1373
01:11:48,200 --> 01:11:49,300
Why is your bio webpage?

1374
01:11:49,300 --> 01:11:52,200
Not for you but without JavaScript, that's because my webpage.

1375
01:11:52,200 --> 01:11:57,600
I don't I hate the web just pretty much period and everything about

1376
01:11:57,600 --> 01:11:57,800
it.

1377
01:11:57,800 --> 01:11:59,800
I hate HTML and CSS.

1378
01:12:00,000 --> 01:12:00,500
JavaScript.

1379
01:12:00,500 --> 01:12:01,700
I think they're all awful.

1380
01:12:02,800 --> 01:12:05,900
So I've done some experiments in my web page, was one of them with

1381
01:12:05,900 --> 01:12:10,700
ways of making websites that don't involve them in the source.

1382
01:12:10,700 --> 01:12:15,300
So the way my webpage works is actually that it's C program that does

1383
01:12:15,300 --> 01:12:19,100
lay out and it just spits out JavaScript as like a back-end like a

1384
01:12:19,100 --> 01:12:23,600
compiler sort of thing that produces the layout that I made in see.

1385
01:12:26,200 --> 01:12:30,600
you know it was a fair time thing I did it's not particularly good but

1386
01:12:30,600 --> 01:12:33,600
it's just kind of what I was interested in trying and I learned some

1387
01:12:33,600 --> 01:12:39,000
things from it and actually I went back and forth with the dude from

1388
01:12:39,000 --> 01:12:43,200
Firefox figuring out how to make it really fast because there's

1389
01:12:43,200 --> 01:12:45,900
actually a bunch of things that that won't work because JavaScript is

1390
01:12:45,900 --> 01:12:53,800
so slow and JavaScript and HTML are so incredibly slow that even doing

1391
01:12:53,800 --> 01:12:55,900
really basic layout is almost impossible if you

1392
01:12:56,000 --> 01:13:00,300
If you don't know, some very specific tricks, if that makes sense.

1393
01:13:04,600 --> 01:13:05,700
What is a bitmap?

1394
01:13:06,400 --> 01:13:10,600
A bitmap is just a it's it's really a misnomer.

1395
01:13:10,600 --> 01:13:14,200
So, in the earlier days, it was a little bit more accurate.

1396
01:13:14,500 --> 01:13:23,000
So the phrase bit map used to sort of mean, if you imagine in binary,

1397
01:13:23,000 --> 01:13:23,200
right?

1398
01:13:23,200 --> 01:13:25,700
You've got ones and zeros, right?

1399
01:13:26,000 --> 01:13:28,200
That's what a computer thinks in terms of, right?

1400
01:13:28,400 --> 01:13:32,700
And so in the old days, a bitmap was literally a real thing.

1401
01:13:32,700 --> 01:13:34,200
It really was a map.

1402
01:13:34,400 --> 01:13:39,200
B it was like oh I want to draw something, right.

1403
01:13:39,200 --> 01:13:42,800
So I've got these zeros and ones, right?

1404
01:13:43,000 --> 01:13:49,200
That oops, the actually represent where the data where, you know, what

1405
01:13:49,200 --> 01:13:53,700
you should color in and what you should not color in.

1406
01:13:53,900 --> 01:13:56,500
So if I wanted to make an H, right?

1407
01:13:58,400 --> 01:14:04,600
Oops, this is how I might store the graphics for an H, in a

1408
01:14:04,600 --> 01:14:08,200
quote-unquote bitmap, in the real sense of the term.

1409
01:14:11,300 --> 01:14:12,000
Right?

1410
01:14:12,200 --> 01:14:15,600
So you can see that it makes an H with the ones and the zeros are

1411
01:14:15,600 --> 01:14:17,200
where the H is not right?

1412
01:14:17,200 --> 01:14:22,400
And that would be a traditional bitmap, it is B that form a map a

1413
01:14:22,400 --> 01:14:25,000
two-dimensional image, right?

1414
01:14:25,500 --> 01:14:29,500
But over time obviously displays, you know, when displays were

1415
01:14:29,500 --> 01:14:32,400
monochrome a0 and A1 would tell you all you need to know if it's just

1416
01:14:32,400 --> 01:14:33,100
black and white.

1417
01:14:33,100 --> 01:14:36,200
That's all you would need to know to make an image but over time as

1418
01:14:36,200 --> 01:14:38,200
we've added color, it's not sufficient.

1419
01:14:38,200 --> 01:14:41,000
So what we've done instead is replace this concept

1420
01:14:42,200 --> 01:14:51,400
with sort of what you might call more appropriately, like a b map or a

1421
01:14:51,500 --> 01:14:52,900
multibyte map,

1422
01:14:55,800 --> 01:14:59,800
because what we actually store at each location in the H is a full

1423
01:15:00,000 --> 01:15:05,600
Rgba color set where there's 8 Bits used to represent each of these.

1424
01:15:05,600 --> 01:15:11,400
So you can have between 0 and 255 levels of alpha blue, green and red,

1425
01:15:11,400 --> 01:15:12,000
right?

1426
01:15:12,300 --> 01:15:16,900
So the term bitmap is now used to mean.

1427
01:15:16,900 --> 01:15:18,700
I mean it's still all stored as B, right?

1428
01:15:18,700 --> 01:15:21,800
I mean everything in the computer is in terms of bit so it's not a

1429
01:15:21,800 --> 01:15:26,600
complete misnomer, anything but where the term originally arose, I

1430
01:15:26,600 --> 01:15:29,800
think probably if you went Doug back into history they were probably

1431
01:15:30,000 --> 01:15:33,600
Talking about actual bits per pixel, like every pixel on the screen

1432
01:15:33,600 --> 01:15:35,100
was one bit on or off.

1433
01:15:35,300 --> 01:15:37,800
That was probably what a bitmap more traditionally meant.

1434
01:15:37,800 --> 01:15:42,300
Now, that's not true anymore because we've got color and it can even

1435
01:15:42,300 --> 01:15:43,500
be, you know, full of color in.

1436
01:15:43,500 --> 01:15:46,300
This could be 16 bits per gun and all, you know, and so on.

1437
01:15:46,300 --> 01:15:46,600
So,

1438
01:15:50,200 --> 01:15:51,700
Have you been doing this all your life?

1439
01:15:51,700 --> 01:15:52,300
Yes.

1440
01:15:53,200 --> 01:15:53,900
What is the Windows 10?

1441
01:15:53,900 --> 01:15:54,600
Release date?

1442
01:15:54,700 --> 01:15:55,600
I don't know.

1443
01:15:56,700 --> 01:15:57,600
Sometime this month.

1444
01:15:57,600 --> 01:15:58,400
I think, right?

1445
01:16:00,000 --> 01:16:01,400
What is your day job and do enjoy it?

1446
01:16:01,400 --> 01:16:04,300
My day job is making games and the, yes I do enjoy it.

1447
01:16:05,300 --> 01:16:07,400
How many years of experience do you have?

1448
01:16:07,500 --> 01:16:08,600
I already answered that one.

1449
01:16:12,300 --> 01:16:13,800
Okay, let's see what we got here.

1450
01:16:14,200 --> 01:16:15,100
What is overlapped?

1451
01:16:15,100 --> 01:16:19,300
I overlapped IO is just the name of the system in Windows.

1452
01:16:19,300 --> 01:16:23,200
That allows you to issue a synchronous reads to the hard drive.

1453
01:16:23,700 --> 01:16:27,300
I will be covering it in great detail in the next couple days as I

1454
01:16:27,300 --> 01:16:29,600
show how to use it to do asset loading.

1455
01:16:33,800 --> 01:16:35,500
Siesta 32:14.

1456
01:16:35,500 --> 01:16:36,100
In that case.

1457
01:16:36,100 --> 01:16:39,000
Why do other developers break up their Assets in separate files?

1458
01:16:39,700 --> 01:16:40,600
Do again.

1459
01:16:40,600 --> 01:16:41,400
Uh, same question.

1460
01:16:41,600 --> 01:16:44,400
Do you mean why you developers break up their assets into one file for

1461
01:16:44,400 --> 01:16:47,500
sound and one file for bitmap or into individual files?

1462
01:16:48,100 --> 01:16:49,800
One for each asset?

1463
01:16:50,100 --> 01:16:54,900
And if the, if it's the former, I actually don't know any developers

1464
01:16:54,900 --> 01:16:57,900
who break up their assets into all the bitmaps, go one place and all

1465
01:16:57,900 --> 01:16:58,700
the sounds going to another.

1466
01:16:58,700 --> 01:17:01,800
I don't actually know if people who do that doesn't mean they don't I

1467
01:17:01,800 --> 01:17:03,100
just personally don't know.

1468
01:17:03,800 --> 01:17:06,300
I couldn't say why they do because I've never actually seen anyone do

1469
01:17:06,300 --> 01:17:09,900
that, if you're asking, why a lot of developers just leave it as a

1470
01:17:09,900 --> 01:17:12,600
bunch of files on the drive where there's one file per asset?

1471
01:17:14,000 --> 01:17:14,600
I don't know.

1472
01:17:15,700 --> 01:17:20,000
I have I probably cuz it just never have written pack files before and

1473
01:17:20,000 --> 01:17:22,300
don't know how or don't want to be bothered with them.

1474
01:17:24,000 --> 01:17:24,500
I don't know.

1475
01:17:28,300 --> 01:17:31,200
Would having separate files assist with modding or patching?

1476
01:17:32,500 --> 01:17:35,300
Not really, because the way we expect our asset files as you can have

1477
01:17:35,300 --> 01:17:36,600
as many of them as you want still.

1478
01:17:36,600 --> 01:17:37,900
So you can always add more.

1479
01:17:38,500 --> 01:17:40,200
So, I would say that actually

1480
01:17:42,200 --> 01:17:46,700
It probably doesn't matter patching maybe because patching, you know,

1481
01:17:46,700 --> 01:17:49,400
we'd have to think a little bit about how we might want to do patching

1482
01:17:49,700 --> 01:17:53,000
if we wanted to do patching in it in a way that knocks out existing

1483
01:17:53,000 --> 01:17:54,500
assets, right?

1484
01:18:00,000 --> 01:18:03,200
although, I think we will actually just get that for free, but

1485
01:18:05,100 --> 01:18:07,700
So yeah, I don't even know that to be honest.

1486
01:18:11,300 --> 01:18:12,800
I think all that might just work.

1487
01:18:16,800 --> 01:18:19,600
It's my Cactus data or to design a different than compression oriented

1488
01:18:19,600 --> 01:18:20,100
programming.

1489
01:18:20,300 --> 01:18:20,700
Yeah.

1490
01:18:20,700 --> 01:18:25,100
So, Mike Acton's data oriented design stuff is sort of talking about

1491
01:18:25,100 --> 01:18:25,600
it.

1492
01:18:25,600 --> 01:18:29,800
They're, they're sort of different parts of the procedure really

1493
01:18:29,800 --> 01:18:32,200
compression or your partner is kind of how you do architecture, right?

1494
01:18:32,200 --> 01:18:37,100
It's about taking code that you've written and sort of pulling it out

1495
01:18:37,100 --> 01:18:40,100
into things that are reusable or that you know, have more leverage or

1496
01:18:40,100 --> 01:18:40,400
whatever.

1497
01:18:40,400 --> 01:18:40,900
Right?

1498
01:18:42,000 --> 01:18:44,300
What Mike actions use talk about with the data oriented design is

1499
01:18:44,300 --> 01:18:46,000
talking about the first step like a

1500
01:18:46,200 --> 01:18:46,500
Very pretty.

1501
01:18:46,500 --> 01:18:49,100
It's kind of like the Second Step he's talked about the first step.

1502
01:18:49,200 --> 01:18:51,500
He's saying the first thing that you should do.

1503
01:18:51,600 --> 01:18:54,900
When you write the actual code, is you write the thing that actually

1504
01:18:54,900 --> 01:18:57,700
transforms the data in the way that it's supposed to work, right?

1505
01:18:57,700 --> 01:19:00,500
You have data, and you're trying to move it from one place to another

1506
01:19:00,500 --> 01:19:01,100
and change it.

1507
01:19:01,100 --> 01:19:04,900
Like, that's what cook, that's just what code does, right or leave it

1508
01:19:04,900 --> 01:19:05,800
in place and change it.

1509
01:19:05,800 --> 01:19:08,800
But that's that's all CPUs could do period.

1510
01:19:09,000 --> 01:19:11,600
So we know that that's the entirety of the problem that you're solving

1511
01:19:11,600 --> 01:19:16,000
is a way of mutating data either in place or in route to some place.

1512
01:19:16,800 --> 01:19:20,800
So he's saying Orient the code around that and that is totally

1513
01:19:20,800 --> 01:19:21,200
correct.

1514
01:19:21,200 --> 01:19:22,200
And that's basically what we do.

1515
01:19:22,200 --> 01:19:23,800
Unhand me here all the time, right?

1516
01:19:24,500 --> 01:19:26,700
That is exactly how you want to do that.

1517
01:19:26,700 --> 01:19:28,000
But data aren't you die?

1518
01:19:28,000 --> 01:19:32,600
Doesn't really speak to what happens when you want to try to start

1519
01:19:32,600 --> 01:19:36,900
leveraging, some kind of high level structure and that's what

1520
01:19:36,900 --> 01:19:39,600
compression or any program is, it's about saying taking things, you

1521
01:19:39,600 --> 01:19:43,300
see that are similar pulling them out and making sure that they still

1522
01:19:43,300 --> 01:19:46,000
stay true to the data oriented design that you have.

1523
01:19:46,400 --> 01:19:48,900
So, you don't want to modify what it's doing.

1524
01:19:48,900 --> 01:19:50,000
You want to let it do you want?

1525
01:19:50,000 --> 01:19:51,500
Make sure the thing that does is the same

1526
01:19:52,600 --> 01:19:57,100
But you're trying to get it into a place where you can reuse it in

1527
01:19:57,100 --> 01:19:57,900
more than one way.

1528
01:20:07,400 --> 01:20:11,500
One reason to split files is to get around the FAT32.

1529
01:20:11,500 --> 01:20:13,400
4 gigabyte limit.

1530
01:20:13,700 --> 01:20:17,200
Another reason might be if your pipeline allows audio days to upload

1531
01:20:17,200 --> 01:20:20,600
to update their pack file for the game without needing or messing with

1532
01:20:20,600 --> 01:20:21,700
other parts of the game.

1533
01:20:22,200 --> 01:20:25,700
Well, that's a separate thing though because that's during Dev, right?

1534
01:20:26,700 --> 01:20:29,100
There's a difference between during Dev and how you shift the game.

1535
01:20:31,800 --> 01:20:35,300
So yeah, that's that's sort of a separate thing.

1536
01:20:35,800 --> 01:20:40,400
I would say in some sense, the FAT32 part, I don't know.

1537
01:20:40,400 --> 01:20:45,500
Like, do is there really a lot of FAT32 going on?

1538
01:20:45,500 --> 01:20:47,600
Still like, do you really have?

1539
01:20:47,800 --> 01:20:50,700
I guess if you're trying to transfer things on a thumb drive, maybe

1540
01:20:50,700 --> 01:20:53,500
you would see the old 4 GB FAT32.

1541
01:20:53,500 --> 01:20:54,000
I don't know.

1542
01:20:56,500 --> 01:20:57,200
It's hard to say.

1543
01:21:00,700 --> 01:21:03,200
Where can we read about the actual plan for the game?

1544
01:21:04,400 --> 01:21:05,700
That is not released yet?

1545
01:21:07,000 --> 01:21:09,100
Are using any C++ plug-ins for Emax?

1546
01:21:09,300 --> 01:21:11,100
No, it's just the standard vanilla.

1547
01:21:11,100 --> 01:21:14,100
The standard C++ mode that ships with the max by default.

1548
01:21:20,100 --> 01:21:22,900
Well, the game have to wait until all the assets have been to compress

1549
01:21:22,900 --> 01:21:24,200
before the game can start.

1550
01:21:24,400 --> 01:21:25,000
No.

1551
01:21:25,100 --> 01:21:30,000
So the way that we would do that, right is in here.

1552
01:21:30,000 --> 01:21:31,800
Where we have these bitmaps, right?

1553
01:21:32,300 --> 01:21:34,700
We would just compress each one individually.

1554
01:21:34,900 --> 01:21:37,900
So when we go to fetch a particular bitmap, we only decompress like

1555
01:21:37,900 --> 01:21:41,900
the bitmap that we want, we wouldn't, like, compress this whole block

1556
01:21:41,900 --> 01:21:45,300
as a single block and so that we'd have to, like decompress all the

1557
01:21:45,300 --> 01:21:46,600
bitmaps access one of them.

1558
01:21:47,100 --> 01:21:49,100
So we would set up the compression.

1559
01:21:49,700 --> 01:21:54,400
That we would do to allow that random access, right?

1560
01:22:08,200 --> 01:22:09,400
Why are using Windows?

1561
01:22:09,400 --> 01:22:12,600
Instead of Linux, that is answered on the page.

1562
01:22:12,600 --> 01:22:14,100
You are looking at right now.

1563
01:22:14,100 --> 01:22:17,600
In fact, that's answered on the twitch page, but the answer is just

1564
01:22:17,600 --> 01:22:23,200
that because nobody buys any games on Linux, you know, you can sort of

1565
01:22:23,200 --> 01:22:24,300
see this answer for yourself.

1566
01:22:24,300 --> 01:22:29,300
Actually if, if you go to the steam Hardware survey.

1567
01:22:31,400 --> 01:22:34,400
So you know, you're a game developer, you have to make money to stay

1568
01:22:34,400 --> 01:22:36,600
in business, that's just the rules of the game.

1569
01:22:36,600 --> 01:22:37,400
So you have to sell

1570
01:22:37,500 --> 01:22:38,600
Copies of your game.

1571
01:22:39,600 --> 01:22:45,100
And so, if you take a look and you go to the OS version, right?

1572
01:22:45,100 --> 01:22:48,200
And you take a look at where you going to sell those games on Steam,

1573
01:22:48,200 --> 01:22:50,700
95.7, seven percent of the people.

1574
01:22:50,700 --> 01:22:53,000
You can sell your game to are running Windows.

1575
01:22:53,500 --> 01:22:58,100
3.22 percent of them are running OS, X and Linux is essentially

1576
01:22:58,100 --> 01:22:58,600
nobody.

1577
01:22:59,400 --> 01:23:06,100
So while it's, you know, it's nice to support OS X and Linux for a

1578
01:23:06,100 --> 01:23:07,300
couple reasons which I'll talk about it.

1579
01:23:07,500 --> 01:23:08,000
Second.

1580
01:23:09,400 --> 01:23:12,800
If you are a game programmer, Windows must be your primary platform of

1581
01:23:12,800 --> 01:23:17,700
knowledge because the vast majority, the vast majority of people who

1582
01:23:17,700 --> 01:23:19,900
will play your game as an indie game developer.

1583
01:23:20,700 --> 01:23:22,800
If it's on PC is Windows.

1584
01:23:23,100 --> 01:23:26,500
Nobody believed thing on OS X and nobody believed thing on Linux in

1585
01:23:26,500 --> 01:23:32,000
terms of the numbers that actually, the actual fan base that you will

1586
01:23:32,000 --> 01:23:32,600
be reaching

1587
01:23:34,400 --> 01:23:34,900
so,

1588
01:23:36,200 --> 01:23:38,600
that is why I made hero is on Windows first.

1589
01:23:38,900 --> 01:23:40,400
It's because that is the platform.

1590
01:23:40,400 --> 01:23:41,000
You must know.

1591
01:23:41,000 --> 01:23:42,900
And is the platform you must get?

1592
01:23:42,900 --> 01:23:43,300
Right.

1593
01:23:43,700 --> 01:23:45,100
If you do not get Windows, right?

1594
01:23:45,200 --> 01:23:48,100
Your game will be a massive disaster when you release it, because

1595
01:23:48,100 --> 01:23:51,800
everyone will complain on your forums that it's not working on their

1596
01:23:51,800 --> 01:23:52,900
machine and blah, blah blah.

1597
01:23:52,900 --> 01:23:53,200
All right.

1598
01:23:53,200 --> 01:23:57,300
And you'll just have a disaster hands because 95% basically every

1599
01:23:57,300 --> 01:23:59,800
single person who bought your game was running it on Windows

1600
01:24:00,300 --> 01:24:00,900
Right.

1601
01:24:01,300 --> 01:24:07,000
You know, out of every hundred people that bought your game, only four

1602
01:24:07,000 --> 01:24:11,800
of them were running it on something other than Windows ninety, six of

1603
01:24:11,800 --> 01:24:14,300
them ran it on Windows, right?

1604
01:24:15,200 --> 01:24:20,400
So at that point, you may ask well, why bother porting to OS X and

1605
01:24:20,400 --> 01:24:20,800
Linux at.

1606
01:24:20,800 --> 01:24:23,200
All right, because and on handmade hero.

1607
01:24:23,200 --> 01:24:26,400
Once we finish the windows version, I will be showing how to Port it

1608
01:24:26,400 --> 01:24:29,900
to us, X and Linux, and there's two separate.

1609
01:24:30,100 --> 01:24:36,900
It's for that one reason for that is simply to make sure writing

1610
01:24:36,900 --> 01:24:40,500
portable code is a good skill to have and it's good to learn because

1611
01:24:40,500 --> 01:24:44,400
you don't know that windows will be the 96% case forever and you also

1612
01:24:44,400 --> 01:24:46,900
don't know if you might want to run on a console maybe you want to

1613
01:24:46,900 --> 01:24:49,300
ship on PS4, maybe you got a deal with Sony to ship it out, your game

1614
01:24:49,300 --> 01:24:50,000
on ps4.

1615
01:24:50,600 --> 01:24:54,800
You need to have the experience of how to write code properly to ship

1616
01:24:54,800 --> 01:24:58,000
on more than one platform because in game development, you will often

1617
01:24:58,000 --> 01:25:00,000
be expected to ship on at least two.

1618
01:25:00,100 --> 01:25:04,300
Two platforms that have to work well and so that's, you know, one

1619
01:25:04,300 --> 01:25:04,800
reason.

1620
01:25:05,000 --> 01:25:08,400
So porting a game to other platforms, you just a good experience and I

1621
01:25:08,400 --> 01:25:09,200
want to show how to do it.

1622
01:25:09,200 --> 01:25:12,500
So there's that and it will be something you'll actually have to do.

1623
01:25:12,500 --> 01:25:15,800
It may not be OS X and Linux that you will be pressed into shipping

1624
01:25:15,800 --> 01:25:17,400
because of actual Market concerns.

1625
01:25:17,600 --> 01:25:20,700
But it might be like widows in PS4 let's say, right?

1626
01:25:21,200 --> 01:25:24,300
So is that but the other reason is just that.

1627
01:25:24,400 --> 01:25:29,100
Well, I mean, let's be honest, Microsoft is really antagonistic to

1628
01:25:29,100 --> 01:25:29,900
game developers.

1629
01:25:30,100 --> 01:25:30,600
Right?

1630
01:25:30,900 --> 01:25:33,200
They are absolutely awful to us.

1631
01:25:33,800 --> 01:25:37,400
They basically do everything they can to make our lives miserable.

1632
01:25:38,300 --> 01:25:40,700
And this is like across the board, right?

1633
01:25:40,700 --> 01:25:43,400
They won't backport their Graphics Library.

1634
01:25:43,400 --> 01:25:48,200
So if you want to Target, d3d, 12, you can't run on Windows 8 or

1635
01:25:48,200 --> 01:25:50,000
Windows 7, you have to Target Windows 10.

1636
01:25:50,000 --> 01:25:53,800
Which means if you're going to Target multiple things, if you use D12,

1637
01:25:53,800 --> 01:25:57,200
you have to write a d3d, 11 back-end to run on the older platform,

1638
01:25:57,200 --> 01:25:57,600
right?

1639
01:25:57,600 --> 01:25:59,900
So, and they don't care because what they want to do is

1640
01:26:00,100 --> 01:26:03,000
They want to make sure people buy new windows versions of Windows,

1641
01:26:03,000 --> 01:26:03,400
right?

1642
01:26:03,400 --> 01:26:05,800
And they don't want to do the extra engineering work or whatever to

1643
01:26:05,800 --> 01:26:07,600
support the mobile platforms, or who knows what?

1644
01:26:07,600 --> 01:26:08,100
Right?

1645
01:26:08,100 --> 01:26:10,100
So they don't have your best interest in mind.

1646
01:26:10,100 --> 01:26:11,400
They have their best answer mind.

1647
01:26:11,500 --> 01:26:13,100
They want to promote the Windows store.

1648
01:26:13,100 --> 01:26:16,000
So they don't allow you to write in the desktop stuff anymore.

1649
01:26:16,000 --> 01:26:18,500
You've got to go right in in the Windows RT layer.

1650
01:26:18,500 --> 01:26:21,500
If you want to do stuff like show a lock screen notification, right?

1651
01:26:21,600 --> 01:26:24,300
Because they have an agenda, they want to push their Windows store,

1652
01:26:24,300 --> 01:26:27,100
they want to take 20% of your money or I guess 30% your money now or

1653
01:26:27,100 --> 01:26:29,900
whatever it is they have all these agendas right.

1654
01:26:30,100 --> 01:26:30,200
Right?

1655
01:26:30,600 --> 01:26:33,200
They don't care about you at all.

1656
01:26:33,400 --> 01:26:37,300
Unless you have some kind of monetary thing or cloud or maybe you'll

1657
01:26:37,300 --> 01:26:38,200
complain to a lot of it.

1658
01:26:38,200 --> 01:26:40,200
Like they don't care about you, right?

1659
01:26:40,200 --> 01:26:44,000
They care about them and making money and they have never historically

1660
01:26:44,000 --> 01:26:48,400
been nice to game developers all the way back to like stay when they

1661
01:26:48,400 --> 01:26:51,100
introduce games for Windows Live and wanted to charge players an

1662
01:26:51,100 --> 01:26:54,000
online subscription fee and like try to get people to go through this

1663
01:26:54,400 --> 01:26:57,800
like archaic weird, bad service that was lousy and then they

1664
01:26:57,800 --> 01:26:58,600
discontinued it.

1665
01:26:58,600 --> 01:26:59,600
So all the games are on it.

1666
01:26:59,600 --> 01:26:59,800
Sorry.

1667
01:27:00,400 --> 01:27:05,700
They just their pattern of behavior is extraordinarily antagonistic to

1668
01:27:05,700 --> 01:27:10,200
game developers and especially to indie game developers because indie

1669
01:27:10,200 --> 01:27:12,600
game developers, don't have any muscle, right?

1670
01:27:12,600 --> 01:27:16,100
If you're, you know, let's say you're the people who make Call of

1671
01:27:16,100 --> 01:27:16,500
Duty, right?

1672
01:27:16,500 --> 01:27:19,700
Your Activision, you have a lot of muscle and you could throw some

1673
01:27:19,700 --> 01:27:22,200
weight around and get what you want, probably right?

1674
01:27:22,500 --> 01:27:25,200
You know, we don't have that as an example a, there's nothing I'm

1675
01:27:25,200 --> 01:27:27,200
going to ever say to Microsoft that's ever going to make them.

1676
01:27:27,200 --> 01:27:29,700
Do anything for me or help out.

1677
01:27:30,100 --> 01:27:33,100
In some, you know, thing like that that's antagonistic to handmade

1678
01:27:33,100 --> 01:27:33,300
hero.

1679
01:27:33,300 --> 01:27:35,300
That's just not going to happen because it doesn't have any clout,

1680
01:27:35,300 --> 01:27:35,800
right?

1681
01:27:37,100 --> 01:27:44,500
And so in my mind they are a very dangerous thing that we are reliant

1682
01:27:44,500 --> 01:27:45,700
on in a very heavy way.

1683
01:27:45,700 --> 01:27:47,900
This, that's this number right here, right?

1684
01:27:48,600 --> 01:27:53,000
They are very dangerous and very troubling to me, it bothers me a lot.

1685
01:27:53,100 --> 01:27:59,500
That the ninety-six percent ownership of games on Windows is a company

1686
01:27:59,500 --> 01:28:02,300
that is openly hostile to us in many ways.

1687
01:28:02,300 --> 01:28:05,900
And has often proven, that they are totally happy taking that stance.

1688
01:28:06,700 --> 01:28:09,600
So why Porter game to Linux at all?

1689
01:28:09,700 --> 01:28:13,000
Because I'll be honest at some point, we have to figure out a way to

1690
01:28:13,000 --> 01:28:16,900
solve the situation and keeping all of our games portable and shipping

1691
01:28:16,900 --> 01:28:17,600
games on Linux.

1692
01:28:17,600 --> 01:28:20,900
Even though, you know, you will not even make back the money, it cost

1693
01:28:20,900 --> 01:28:21,300
you to Port.

1694
01:28:21,300 --> 01:28:25,400
It is still something that maybe makes sense to do because who knows

1695
01:28:25,400 --> 01:28:26,200
what could happen?

1696
01:28:26,300 --> 01:28:28,400
Maybe steam Linux, start succeeding.

1697
01:28:28,800 --> 01:28:31,300
And the only way steam Linux is going to start succeeding is if there

1698
01:28:31,300 --> 01:28:34,800
are games there to be played on it, we can help make that be true by

1699
01:28:34,800 --> 01:28:36,300
stripping his legs once that starts

1700
01:28:36,500 --> 01:28:36,900
Succeeding.

1701
01:28:36,900 --> 01:28:41,000
Now you have two competitors in that sort of PC gaming landscape,

1702
01:28:41,100 --> 01:28:42,100
steam, Linux and windows.

1703
01:28:42,100 --> 01:28:44,200
And it seemed like starts gaining traction.

1704
01:28:44,200 --> 01:28:45,900
And this number goes up,

1705
01:28:46,800 --> 01:28:50,900
Now, Microsoft can't be so antagonistic because there's this other

1706
01:28:50,900 --> 01:28:52,400
place we can go right.

1707
01:28:53,600 --> 01:28:56,300
And so you know if there's one thing we've learned from history is

1708
01:28:56,300 --> 01:28:59,400
that Microsoft is openly antagonistic to game developers at every

1709
01:28:59,400 --> 01:29:03,800
possible opportunity and there is no way that just counting on them to

1710
01:29:03,800 --> 01:29:05,300
do the right thing for us will happen.

1711
01:29:05,700 --> 01:29:09,900
But if we have Alternatives and we have competitors that are

1712
01:29:09,900 --> 01:29:13,700
essentially going to force them to do the right thing and force them

1713
01:29:13,700 --> 01:29:14,500
to be nicer.

1714
01:29:14,500 --> 01:29:18,100
They will write because they have to or they just go away and we don't

1715
01:29:18,100 --> 01:29:19,000
care, they're either right?

1716
01:29:19,000 --> 01:29:21,200
Because Linux is open and always will be so we don't have to worry

1717
01:29:21,200 --> 01:29:22,300
about that part, right?

1718
01:29:22,900 --> 01:29:27,300
So in some sense, the reason that I would say even though it, you know

1719
01:29:27,300 --> 01:29:30,300
how many Heroes on Windows first and if you are game developer, you

1720
01:29:30,300 --> 01:29:31,400
kind of have to be Windows first.

1721
01:29:31,400 --> 01:29:32,500
At this point, it's true.

1722
01:29:33,200 --> 01:29:37,400
It doesn't mean don't ship on Linux because there are very important,

1723
01:29:37,400 --> 01:29:43,200
very real reasons why you might why it's important for our industry,

1724
01:29:43,800 --> 01:29:46,100
to have some back up there, right?

1725
01:29:46,400 --> 01:29:51,500
And and actually, if you look to on handmade hero,

1726
01:29:53,100 --> 01:29:57,200
I gave a lecture recently, that's about this, if you're concerned

1727
01:29:57,200 --> 01:29:59,500
about that, kind of stuff and the

1728
01:30:00,000 --> 01:30:04,700
Fact that there's a lot of indications that that the platforms that

1729
01:30:04,700 --> 01:30:08,600
Indies rely on are kind of in a little bit of overhanging Jeopardy.

1730
01:30:09,300 --> 01:30:13,300
The Terminator Gene, which is the lecture I did, it's on the handmade

1731
01:30:13,300 --> 01:30:14,800
hero videos a stream.

1732
01:30:15,700 --> 01:30:18,400
You can watch it, it's 30 minutes, it's kind of entertaining.

1733
01:30:18,400 --> 01:30:22,800
It's something that kind of talks about the real risks involved in and

1734
01:30:22,800 --> 01:30:27,700
the ways that we as an industry, need to kind of think about starting,

1735
01:30:27,700 --> 01:30:29,800
starting to sort of a Shore up our

1736
01:30:30,000 --> 01:30:31,800
Our, our platform.

1737
01:30:31,800 --> 01:30:37,400
So that we aren't so beholden to an openly hostile single platform,

1738
01:30:37,500 --> 01:30:37,900
right?

1739
01:30:46,400 --> 01:30:46,800
so,

1740
01:30:53,200 --> 01:30:54,000
We're about over time.

1741
01:30:54,000 --> 01:30:55,500
So I'll kind of end it now.

1742
01:30:58,200 --> 01:31:00,300
Can you say something on stream to get Reddit angry?

1743
01:31:00,300 --> 01:31:02,400
They're already complaining about your Loop statement.

1744
01:31:03,100 --> 01:31:07,100
I kind of feel like Reddit is always angry so I feel like we don't

1745
01:31:07,100 --> 01:31:08,500
really need to say anything to make them angry.

1746
01:31:08,500 --> 01:31:09,600
They just will be angry.

1747
01:31:14,400 --> 01:31:14,800
so,

1748
01:31:19,200 --> 01:31:21,000
all right, looks like that's it.

1749
01:31:24,300 --> 01:31:29,500
Simple in pleat says, but you can code on Linux or Windows very easy,

1750
01:31:29,500 --> 01:31:30,100
right?

1751
01:31:31,400 --> 01:31:32,900
Not really, no.

1752
01:31:33,100 --> 01:31:35,800
I mean, you can run through wine, right?

1753
01:31:36,100 --> 01:31:39,900
And do your development emulated there, but that's not a very reliable

1754
01:31:39,900 --> 01:31:41,200
way to test, right?

1755
01:31:41,300 --> 01:31:44,900
Because you need to test actual Windows because wine is completely

1756
01:31:44,900 --> 01:31:48,400
different from actual windows and so you don't really want to be

1757
01:31:48,400 --> 01:31:51,200
testing your primary platform through emulation.

1758
01:31:51,200 --> 01:31:52,500
That's not a good way to go.

1759
01:31:52,600 --> 01:31:53,900
You want to test your primary platform.

1760
01:31:54,100 --> 01:31:55,500
With the actual platform.

1761
01:31:57,400 --> 01:31:58,900
So, yeah, I wouldn't recommend that.

1762
01:32:00,800 --> 01:32:04,700
You could try it and maybe then, just when you go to do your testing

1763
01:32:04,700 --> 01:32:07,300
test on actual windows in a number of skus but you're gonna have to do

1764
01:32:07,300 --> 01:32:07,600
anyway.

1765
01:32:07,600 --> 01:32:08,800
So you could do it that way.

1766
01:32:09,400 --> 01:32:12,000
It's not how I would choose to do it and I also don't like developing

1767
01:32:12,000 --> 01:32:16,000
on Linux because the their debunkers are really bad by comparison to

1768
01:32:16,000 --> 01:32:16,600
visual studio.

1769
01:32:16,600 --> 01:32:19,500
Which I know it's scary because it's not like Visual Studio is amazing

1770
01:32:19,500 --> 01:32:21,800
at the bugging your anything but but the Linux 2, burgers are pretty

1771
01:32:21,800 --> 01:32:23,900
bad so and

1772
01:32:24,000 --> 01:32:24,600
That's been shredded.

1773
01:32:24,600 --> 01:32:27,700
We've talked about that in the forum's many times and so I've kind of

1774
01:32:27,700 --> 01:32:30,400
pointed out the reasons for that if you're want to know what they are.

1775
01:32:30,400 --> 01:32:34,700
But you know, that's why I tend to stay away from using Linux as my

1776
01:32:34,700 --> 01:32:36,600
primary Dev platform at the moment.

1777
01:32:39,600 --> 01:32:39,900
so,

1778
01:32:42,000 --> 01:32:44,400
all right, I think we are about done for the day.

1779
01:32:53,700 --> 01:32:55,200
Let me go ahead and close these up.

1780
01:32:58,400 --> 01:32:59,100
All right.

1781
01:32:59,600 --> 01:32:59,800
Thank you.

1782
01:33:00,000 --> 01:33:01,700
And for joining me for another episode of handmade hero.

1783
01:33:01,700 --> 01:33:02,800
It's been a pleasure coding with you.

1784
01:33:02,800 --> 01:33:07,500
As always, if you want to follow along at home, you can always

1785
01:33:07,500 --> 01:33:11,200
pre-order the game on Hammer here a.org and it comes with a source

1786
01:33:11,200 --> 01:33:11,600
code.

1787
01:33:11,700 --> 01:33:14,400
So if you want to play around with the sort of stuff we're doing, you

1788
01:33:14,400 --> 01:33:17,600
can download the source code every night and, you know, sort of Tinker

1789
01:33:17,600 --> 01:33:18,700
with it experiment with it.

1790
01:33:18,700 --> 01:33:20,900
And it's a good way to learn if you're trying to follow the series as

1791
01:33:20,900 --> 01:33:23,800
an educational thing, that's pretty handy.

1792
01:33:24,500 --> 01:33:27,900
If you want to ask questions or take a look at past episodes on

1793
01:33:27,900 --> 01:33:29,800
anti-deficit guide that the community members,

1794
01:33:30,000 --> 01:33:33,700
I've done or look at ports to Mac or Linux that community members have

1795
01:33:33,700 --> 01:33:35,800
done in advance of us doing them.

1796
01:33:36,300 --> 01:33:38,500
We have a forum site, you can go to for that.

1797
01:33:38,500 --> 01:33:40,700
We also have a patreon page, you can subscribe to, if you just want to

1798
01:33:40,700 --> 01:33:43,800
support the video series and we have a tweetbot, you subscribe to.

1799
01:33:43,800 --> 01:33:47,500
If you want to know when the stream will be live, it shows you when

1800
01:33:47,500 --> 01:33:50,000
it's gonna be live for the week and then gives you a little reminders

1801
01:33:50,400 --> 01:33:50,800
every day.

1802
01:33:50,800 --> 01:33:52,200
What the stream will be that day.

1803
01:33:52,200 --> 01:33:53,900
So you if you want, try and catch it.

1804
01:33:53,900 --> 01:33:55,000
You've got plenty of notice.

1805
01:33:56,000 --> 01:33:57,700
That's about it tomorrow.

1806
01:33:57,700 --> 01:33:59,900
We will I guess check to see if

1807
01:34:00,000 --> 01:34:04,400
Our asset writing worked, we know that it sort of did because we

1808
01:34:04,400 --> 01:34:05,300
loaded a little bit of it.

1809
01:34:05,300 --> 01:34:08,300
So tomorrow we'll just load the rest of it in and we'll see how it

1810
01:34:08,300 --> 01:34:10,300
goes and from there.

1811
01:34:10,300 --> 01:34:13,300
Hopefully that will be relatively easy to verify the best working and

1812
01:34:13,300 --> 01:34:16,200
so from there we'll just switch from doing that single block load to

1813
01:34:16,200 --> 01:34:21,100
actually just reading piece mail out of the asset file and then that's

1814
01:34:21,100 --> 01:34:22,600
it for our asset file stuff.

1815
01:34:22,600 --> 01:34:26,300
From there we are just left with the memory management part of our

1816
01:34:26,300 --> 01:34:29,800
asset scheme and we will be pretty much done.

1817
01:34:29,900 --> 01:34:34,400
With our entire asset pipeline start to finish, which is great.

1818
01:34:34,900 --> 01:34:36,000
So it's pretty cool.

1819
01:34:36,000 --> 01:34:40,000
That'll be a pretty big to-do item checked off our list and one step

1820
01:34:40,000 --> 01:34:42,000
closer to having our engine pretty much ready to go.

1821
01:34:42,400 --> 01:34:43,600
So, thank you everyone for joining me.

1822
01:34:43,600 --> 01:34:46,300
I will see you tomorrow for that same time, same place, 5 p.m.

1823
01:34:46,300 --> 01:34:49,300
Pacific Daylight day, like time here on Twitch.

1824
01:34:49,300 --> 01:34:52,100
So I hope to see you all then, until then have fun coding and I'll see

1825
01:34:52,100 --> 01:34:53,000
you on the internet.

