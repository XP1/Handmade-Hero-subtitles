1
00:00:00,500 --> 00:00:02,600
And stop and go hanger that.

2
00:00:02,900 --> 00:00:06,900
Hello everyone and welcome to handmade hero Morning Edition.

3
00:00:07,600 --> 00:00:10,000
It is very good to see all of you bright and early here.

4
00:00:10,000 --> 00:00:11,000
10 a.m.

5
00:00:11,200 --> 00:00:12,000
Saturday.

6
00:00:12,100 --> 00:00:15,300
Sorry Friday morning here in sunny, Seattle, Washington.

7
00:00:17,500 --> 00:00:22,900
I guess what I should say today is we are kind of wrapping up a little

8
00:00:22,900 --> 00:00:24,000
bit of what we were doing.

9
00:00:24,200 --> 00:00:25,500
Obviously, handmade hero.

10
00:00:25,500 --> 00:00:28,900
For those of you just joining us is a show where we create an entire

11
00:00:28,900 --> 00:00:32,000
game from scratch using nothing, but our bear little typing fingers.

12
00:00:32,000 --> 00:00:35,600
No engine, no libraries so that we can kind of see everything that's

13
00:00:35,600 --> 00:00:38,400
involved in the full stack of game development, see how it works, out

14
00:00:38,400 --> 00:00:41,800
of really low level, and basically gain a good understanding, and have

15
00:00:41,800 --> 00:00:42,700
a lot of fun in the process.

16
00:00:42,700 --> 00:00:45,500
To, it's just fun to kind of be able to do everything yourself and see

17
00:00:45,500 --> 00:00:45,900
how it works.

18
00:00:45,900 --> 00:00:46,600
It's just kind of got

19
00:00:46,700 --> 00:00:47,800
Really nice feel to it.

20
00:00:48,800 --> 00:00:49,100
Right?

21
00:00:49,100 --> 00:00:51,800
It's like it's like doing that woodworking project or whatever that

22
00:00:51,800 --> 00:00:52,800
you always wanted to do.

23
00:00:52,900 --> 00:00:56,200
It just has this kind of great feel to make something directly where,

24
00:00:56,200 --> 00:00:58,600
you know, that you were kind of making it all.

25
00:00:58,700 --> 00:00:59,800
All from scratch yourself.

26
00:01:00,400 --> 00:01:04,400
If you are following along with the series at home, and you have

27
00:01:04,400 --> 00:01:06,300
pre-ordered the game on handmade here a torque.

28
00:01:06,300 --> 00:01:07,700
You should have gotten a link in your email.

29
00:01:07,700 --> 00:01:10,900
That link has a zip file with every day of source code.

30
00:01:11,000 --> 00:01:12,100
Today's date 35.

31
00:01:12,100 --> 00:01:15,600
So if you want to follow along unzip, day 34 into directory and you'll

32
00:01:15,600 --> 00:01:16,500
be exactly where I

33
00:01:16,600 --> 00:01:21,300
I am today and where I am today is we were just finishing up sort of

34
00:01:21,300 --> 00:01:23,300
making our virtualized.

35
00:01:23,300 --> 00:01:26,300
Tilemap system sort of work for reals.

36
00:01:26,300 --> 00:01:30,000
In a sense that you can actually have sort of a large world with

37
00:01:30,200 --> 00:01:32,300
little sections that are stored by the town map.

38
00:01:32,900 --> 00:01:34,000
That is what we were doing.

39
00:01:34,200 --> 00:01:36,000
And we were almost there yesterday.

40
00:01:36,000 --> 00:01:39,700
We introduced the concept of a memory Arena where we sort of basically

41
00:01:39,700 --> 00:01:42,200
put stuff into our permanent store.

42
00:01:42,300 --> 00:01:45,600
And I'd like to go ahead and sort of dive back into that today and

43
00:01:45,600 --> 00:01:46,500
kind of talked about it a little bit.

44
00:01:46,700 --> 00:01:50,900
And sort of talk about how it's working and where it's going.

45
00:01:51,200 --> 00:01:51,800
All right.

46
00:01:52,000 --> 00:01:54,000
So let's go ahead and see where we were at.

47
00:01:55,200 --> 00:01:59,800
I'll just load up the code here and run the old game.

48
00:01:59,800 --> 00:02:03,200
So we basically didn't have a chance to actually make a world at all.

49
00:02:03,200 --> 00:02:05,400
We only had a chance to kind of slap down some stuff.

50
00:02:05,600 --> 00:02:09,199
So maybe what we should do before we do anything else is just kind of

51
00:02:09,199 --> 00:02:11,800
make it so that we're actually making some rooms for a little guy to

52
00:02:11,800 --> 00:02:12,300
be in.

53
00:02:12,300 --> 00:02:15,400
That's something that seems like a pretty reasonable thing to do.

54
00:02:15,400 --> 00:02:16,000
I would say.

55
00:02:16,600 --> 00:02:17,900
So let's go ahead and try that.

56
00:02:17,900 --> 00:02:23,000
So on Startup, basically, what happens is we have this thing that was

57
00:02:23,000 --> 00:02:24,500
looping over 32.

58
00:02:24,900 --> 00:02:26,000
By 32 screens.

59
00:02:26,000 --> 00:02:27,600
And then it was just kind of setting towels.

60
00:02:27,600 --> 00:02:29,100
It was setting them totally randomly.

61
00:02:29,400 --> 00:02:32,000
So what I might like to do is just set some walls in here.

62
00:02:32,400 --> 00:02:35,000
And so maybe I'm going to go ahead and say that whatever the tile

63
00:02:35,000 --> 00:02:38,400
value is that tile value, will default to be nothing.

64
00:02:39,000 --> 00:02:49,900
But if the tile x equals 0, let's say or the tile x equals tiles per

65
00:02:49,900 --> 00:02:54,700
width minus 1, so if it's on either edge of the screen, we

66
00:02:54,800 --> 00:02:59,200
We are going to say that the tile value should be one, so they'll be a

67
00:02:59,200 --> 00:02:59,700
blocker there.

68
00:02:59,700 --> 00:02:59,800
So.

69
00:03:00,000 --> 00:03:05,000
Basically, making our horizontal walls and then we can also make our

70
00:03:05,000 --> 00:03:09,200
vertical walls, the same way essentially, and this should make rooms.

71
00:03:09,600 --> 00:03:12,200
I think, oops Got actually use that towel value.

72
00:03:12,300 --> 00:03:13,200
This should make rooms.

73
00:03:13,200 --> 00:03:15,600
I think that are sealed, right?

74
00:03:15,600 --> 00:03:18,800
It should make rooms that we cannot get out of that.

75
00:03:18,800 --> 00:03:20,000
We are kind of just stuck in.

76
00:03:20,000 --> 00:03:20,600
And there you go.

77
00:03:20,600 --> 00:03:21,800
We can't actually get out of them.

78
00:03:21,900 --> 00:03:25,500
And you can see that this is kind of like a room like we used to have,

79
00:03:25,500 --> 00:03:25,800
right?

80
00:03:25,800 --> 00:03:28,700
This sort of thing, but we don't have any doors yet.

81
00:03:28,700 --> 00:03:29,800
So, all we kind of really have to

82
00:03:30,000 --> 00:03:32,000
Do here is make some doors.

83
00:03:32,500 --> 00:03:34,700
So let's go ahead and make some doors real quick.

84
00:03:35,400 --> 00:03:36,600
How do we want to make doors?

85
00:03:36,600 --> 00:03:41,800
Well, I guess in here will say that if the tile y equals tiles for

86
00:03:41,800 --> 00:03:48,100
height over 2, then we don't want to make the door, you know, I

87
00:03:48,100 --> 00:03:49,600
started then we do want to make the door.

88
00:03:51,100 --> 00:03:56,000
And if not, then we don't and the same will be true for our tile X,

89
00:03:56,700 --> 00:03:57,000
right?

90
00:03:57,000 --> 00:03:59,800
If it's going to be tell spur width over.

91
00:04:00,000 --> 00:04:02,100
To then it's right in the middle.

92
00:04:02,100 --> 00:04:05,700
So we'll make that door and I think that should basically make doors

93
00:04:05,700 --> 00:04:07,000
for us everywhere, so that we can.

94
00:04:07,000 --> 00:04:09,100
If you want to walk through things.

95
00:04:09,100 --> 00:04:13,600
Now, we should basically have sort of this really really large world.

96
00:04:13,700 --> 00:04:15,600
And of course I can speed sort of through it.

97
00:04:15,700 --> 00:04:19,899
We now just have room upon room upon room stuff in there with nothing

98
00:04:19,899 --> 00:04:23,700
in particular going on or happening in any of these rooms.

99
00:04:23,700 --> 00:04:24,900
We should be able to get to the end of it.

100
00:04:24,900 --> 00:04:28,200
We only made the, what 32 of these.

101
00:04:28,200 --> 00:04:29,100
How many do we make?

102
00:04:29,700 --> 00:04:29,800
And

103
00:04:29,900 --> 00:04:35,000
Or actually, remember how many of these we made 32.

104
00:04:35,100 --> 00:04:38,800
So if we walk 32, if you walk 32 of these four words, which is a lot

105
00:04:38,800 --> 00:04:41,900
of them, we would eventually get to the end but I don't think I'm

106
00:04:41,900 --> 00:04:43,100
going to sit here and do that.

107
00:04:43,600 --> 00:04:47,100
So anyway, that makes rooms and rooms and rooms and rooms for us to go

108
00:04:47,100 --> 00:04:49,300
through which is all well and good.

109
00:04:50,900 --> 00:04:51,400
Excuse me.

110
00:04:52,400 --> 00:04:56,700
But now, what we want to do is we want to make it so that maybe we

111
00:04:56,700 --> 00:05:00,400
basically have only rooms, we don't have just a full grid.

112
00:05:00,400 --> 00:05:02,000
We want to start testing our sparseness.

113
00:05:02,500 --> 00:05:04,900
You know, what I'd like to do to actually, let's let's do this as

114
00:05:04,900 --> 00:05:05,200
well.

115
00:05:06,200 --> 00:05:07,800
Let's actually try something here.

116
00:05:07,800 --> 00:05:09,900
Just to see what would happen.

117
00:05:10,100 --> 00:05:13,900
Let's actually try doing something that will totally tanked our frame

118
00:05:13,900 --> 00:05:16,700
rate, probably because of the slow way that we've done things here,

119
00:05:17,100 --> 00:05:18,900
because we're just kind of looping over everything.

120
00:05:19,700 --> 00:05:20,500
What if we

121
00:05:20,700 --> 00:05:25,800
To go ahead and actually make the tile size much straw smaller and

122
00:05:25,800 --> 00:05:27,500
draw a lot more of them.

123
00:05:27,900 --> 00:05:29,400
So for example, up here.

124
00:05:29,400 --> 00:05:33,700
Remember the thing that determines how big our world is we have our

125
00:05:34,700 --> 00:05:36,900
our tile side in pixels, right?

126
00:05:36,900 --> 00:05:41,400
We have our tile side in pixels here and our m 2 pixels.

127
00:05:41,800 --> 00:05:45,500
If we were to make the pixels extremely small, let's say we were to be

128
00:05:45,500 --> 00:05:47,700
able to fit 10 times more of them in there.

129
00:05:47,700 --> 00:05:49,300
So we made our tell side and pixels.

130
00:05:49,300 --> 00:05:50,200
Be only six.

131
00:05:50,600 --> 00:05:54,600
Right, we could go in here and we could query a lot more pixels.

132
00:05:55,400 --> 00:05:57,900
In fact, you can kind of see what happens if I just do that.

133
00:05:58,100 --> 00:05:59,800
You notice we're just drawing a very small.

134
00:06:00,400 --> 00:06:03,800
Version of our tile map, excuse me.

135
00:06:04,700 --> 00:06:06,900
And so now, the question is, what could I do?

136
00:06:07,100 --> 00:06:10,400
You know, could I go in there and basically just draw a much larger

137
00:06:10,400 --> 00:06:11,800
version of the map.

138
00:06:11,900 --> 00:06:15,100
So, to do that, I just have to actually pull more and we'll want to be

139
00:06:15,100 --> 00:06:17,000
doing a lot more stuff than we're doing here.

140
00:06:17,000 --> 00:06:18,800
Also, these are just debug drawing routines.

141
00:06:19,300 --> 00:06:22,600
But anyway, if I go ahead here, now again, this is really inefficient

142
00:06:22,600 --> 00:06:23,200
what we're doing.

143
00:06:23,600 --> 00:06:27,300
But you can see that we basically have our entire mapping drawn now,

144
00:06:27,500 --> 00:06:29,800
well, not our entire map but a much larger version of it.

145
00:06:30,000 --> 00:06:32,200
So, we can kind of see what's going on.

146
00:06:32,200 --> 00:06:32,400
Now.

147
00:06:32,400 --> 00:06:36,900
What I would like to do, I guess at this point is say, if up section

148
00:06:36,900 --> 00:06:39,400
of the tile, map was not initialized.

149
00:06:39,400 --> 00:06:40,800
So there isn't anything in it.

150
00:06:40,800 --> 00:06:44,400
I'd like to draw that in something other than gray, just so we can see

151
00:06:44,400 --> 00:06:48,200
it or rather, you know, have some way of knowing what it is.

152
00:06:48,200 --> 00:06:51,600
Because right now, when there's nothing in the tile map, we just

153
00:06:51,600 --> 00:06:56,600
return 0 and so you can kind of see for example that I'm like kind of

154
00:06:56,600 --> 00:06:57,600
off in space there.

155
00:06:57,900 --> 00:06:58,800
So maybe I don't know.

156
00:06:58,800 --> 00:06:59,900
One thing that we might want to do.

157
00:07:01,300 --> 00:07:05,700
You start to talk about what a, you know, like is there a concept of

158
00:07:05,700 --> 00:07:06,700
an invalid tile?

159
00:07:06,700 --> 00:07:11,000
So we can kind of see where our tile map just doesn't have anything.

160
00:07:11,100 --> 00:07:13,900
Because out here there was nothing we did initialize it, but we're

161
00:07:13,900 --> 00:07:17,200
just returning zero whenever we look for a tile chunk and don't find

162
00:07:17,200 --> 00:07:17,700
one there.

163
00:07:18,000 --> 00:07:18,600
Right?

164
00:07:19,400 --> 00:07:21,400
So what I wanted to do is kind of say, all right.

165
00:07:21,400 --> 00:07:27,400
Well, maybe you know, if the tile map comes back 0, right, let's say

166
00:07:27,400 --> 00:07:29,600
that that we basically have something where

167
00:07:30,000 --> 00:07:35,300
We get the tile value and if the tile ID is going to be greater than

168
00:07:35,300 --> 00:07:35,700
0.

169
00:07:35,700 --> 00:07:37,300
So 0 will actually mean.

170
00:07:37,400 --> 00:07:38,900
There's nothing there at all.

171
00:07:39,200 --> 00:07:42,000
And we just won't draw anything right now.

172
00:07:42,000 --> 00:07:46,700
Unfortunately, so far we've had zero in our tile map 0 has meant

173
00:07:46,900 --> 00:07:47,500
nothing.

174
00:07:47,900 --> 00:07:50,300
Excuse Me, 0 has meant that it was walkable.

175
00:07:50,400 --> 00:07:54,500
So I'm just going to go ahead and arbitrarily because I can and we

176
00:07:54,500 --> 00:07:55,600
haven't thought about this at all.

177
00:07:55,600 --> 00:07:59,400
Obviously, I'm going to go ahead and set these to basically be one and

178
00:07:59,400 --> 00:07:59,800
two.

179
00:08:00,000 --> 00:08:02,000
Eventually, we're going to have to think about what we actually want

180
00:08:02,000 --> 00:08:02,700
to start on our tiles.

181
00:08:02,700 --> 00:08:05,200
And right now, I'm just randomly slapping number codes in there.

182
00:08:06,300 --> 00:08:07,400
Completely willy-nilly.

183
00:08:08,300 --> 00:08:11,300
So I'm just going to go ahead and do that.

184
00:08:11,300 --> 00:08:13,700
So now we have zero means there's nothing there.

185
00:08:13,800 --> 00:08:19,500
One means it was walkable to means that it was a wall and so I'll go

186
00:08:19,500 --> 00:08:22,700
into the tile map now and all I really have to do is that is tile

187
00:08:22,700 --> 00:08:25,200
empty thing and this is a good example of why we'd want to start

188
00:08:25,200 --> 00:08:26,000
having enums for these.

189
00:08:26,000 --> 00:08:28,100
But this codes I'm sorry.

190
00:08:28,100 --> 00:08:30,900
These tile storage is not really going to be how we're ever going to

191
00:08:30,900 --> 00:08:31,400
store tiles.

192
00:08:31,400 --> 00:08:31,500
Really.

193
00:08:31,500 --> 00:08:33,900
We're going to have a lot more data than and you went 3-2 probably.

194
00:08:34,299 --> 00:08:35,900
So it's not that interesting to

195
00:08:36,000 --> 00:08:39,200
Start defining e times the stuff but I suspect now.

196
00:08:39,500 --> 00:08:40,100
Yeah, they're.

197
00:08:40,100 --> 00:08:42,799
So now we can kind of see what's going on.

198
00:08:43,100 --> 00:08:43,400
Right?

199
00:08:43,400 --> 00:08:44,400
We can see that.

200
00:08:44,400 --> 00:08:46,300
There's nothing in the world out there.

201
00:08:46,300 --> 00:08:49,600
We haven't actually defined tile chunk for those locations.

202
00:08:49,600 --> 00:08:53,500
Because remember, this down here is 00, actually, we started the guy

203
00:08:53,500 --> 00:08:54,600
out pretty close to it.

204
00:08:54,700 --> 00:08:56,700
So back here is like, some really high number.

205
00:08:56,700 --> 00:08:59,700
This is like four billion that tile is 4 billion for billion.

206
00:09:00,000 --> 00:09:00,300
Right?

207
00:09:01,000 --> 00:09:02,300
Because the world is toroidal.

208
00:09:02,300 --> 00:09:06,700
Like I said, it wraps around, and so now you can kind of, see roughly

209
00:09:06,700 --> 00:09:09,700
where we have defined the world and where we haven't.

210
00:09:10,000 --> 00:09:14,300
And so, that's kind of just a nice sort of thing to kind of understand

211
00:09:14,300 --> 00:09:15,000
if that makes sense.

212
00:09:15,500 --> 00:09:22,400
So, going through here, what I am now thinking we should do is we

213
00:09:22,400 --> 00:09:25,500
should actually only make rooms in some places.

214
00:09:26,000 --> 00:09:26,200
Now.

215
00:09:26,200 --> 00:09:29,700
What I'd like to do is start talking about random numbers, but it

216
00:09:29,700 --> 00:09:29,900
might

217
00:09:30,000 --> 00:09:31,200
be a little premature again.

218
00:09:31,200 --> 00:09:34,200
This is the place where we could lean on the C runtime Library so that

219
00:09:34,200 --> 00:09:38,400
I don't have to teach random numbers just yet and we can still have

220
00:09:38,400 --> 00:09:41,900
them but we would like to have some way of making.

221
00:09:41,900 --> 00:09:42,700
Oh, you know what?

222
00:09:43,100 --> 00:09:45,000
No, there's an easier way to do random numbers.

223
00:09:45,000 --> 00:09:48,500
That doesn't involve me leaning on the C, runtime library that we can

224
00:09:48,500 --> 00:09:49,000
do.

225
00:09:49,400 --> 00:09:49,600
Okay.

226
00:09:49,600 --> 00:09:50,200
So there you can see.

227
00:09:50,200 --> 00:09:51,200
I walk to the end of it.

228
00:09:51,200 --> 00:09:53,300
We've walked 32 up.

229
00:09:53,300 --> 00:09:53,800
So there you go.

230
00:09:53,800 --> 00:09:57,700
So what I'd like to do now is maybe do something where we kind of have

231
00:09:58,300 --> 00:09:59,000
a random

232
00:10:00,400 --> 00:10:02,000
A random number sort of thing that happens.

233
00:10:02,400 --> 00:10:06,800
What I'd like to do is basically say, okay, before what we were doing

234
00:10:07,200 --> 00:10:11,800
is we were doing something where we're was, I hand me that CBP we were

235
00:10:11,800 --> 00:10:16,300
basically just looping over the screens, 32 by 32, and we were just

236
00:10:16,300 --> 00:10:17,200
making a new screen.

237
00:10:17,400 --> 00:10:18,100
What I'd like to do.

238
00:10:18,100 --> 00:10:20,200
Now is just say, instead.

239
00:10:20,300 --> 00:10:23,100
I'm going to do a number of screens, right?

240
00:10:23,100 --> 00:10:24,700
I'm going to do screening and x equals 0.

241
00:10:24,700 --> 00:10:27,000
I'm going to stream just less than 100.

242
00:10:27,000 --> 00:10:30,000
So I'm going to make 100 screens, but I'm not

243
00:10:30,100 --> 00:10:31,000
Going to stay where they are.

244
00:10:31,000 --> 00:10:35,300
So we'll start out by saying that our screen X in our screen, why are

245
00:10:35,300 --> 00:10:36,000
at 0 0?

246
00:10:36,000 --> 00:10:37,200
But instead of looping over it.

247
00:10:37,200 --> 00:10:38,900
I'm just not going to say where the screens are.

248
00:10:39,100 --> 00:10:42,300
So we're going to make a screen at the location that we're at, but

249
00:10:42,300 --> 00:10:45,500
then we're going to choose to move to a different screen based on some

250
00:10:45,500 --> 00:10:46,600
kind of random number.

251
00:10:46,800 --> 00:10:47,200
Okay.

252
00:10:53,400 --> 00:11:02,600
Okay, so I just took a look at the at the screen and I noticed people

253
00:11:02,600 --> 00:11:05,900
talking about the art and yes, I'm excited to get to the art, that'll

254
00:11:05,900 --> 00:11:07,100
probably be happening very soon.

255
00:11:07,100 --> 00:11:07,200
Now.

256
00:11:07,200 --> 00:11:08,000
I just had a bunch of stuff.

257
00:11:08,000 --> 00:11:09,900
I kind of want to go through with you before we start dealing with the

258
00:11:09,900 --> 00:11:10,500
renderer.

259
00:11:12,000 --> 00:11:13,800
But yeah, the artist for the game.

260
00:11:13,900 --> 00:11:15,600
Yeah, action Lee is awesome.

261
00:11:16,200 --> 00:11:19,200
I'm really, really glad that she was interested in working on the

262
00:11:19,200 --> 00:11:23,000
project because her artistic is fantastic and

263
00:11:23,400 --> 00:11:26,400
Yeah, the stuff the stuff for the game is just looked absolutely

264
00:11:26,400 --> 00:11:26,800
gorgeous.

265
00:11:26,800 --> 00:11:29,100
So I think the game will look absolutely beautiful.

266
00:11:30,400 --> 00:11:35,100
But yeah, I'm glad you guys think so as well because I thought her

267
00:11:35,100 --> 00:11:38,600
stuff was really really quite fantastic anyway.

268
00:11:39,000 --> 00:11:39,600
Moving on.

269
00:11:40,200 --> 00:11:41,100
So here we are.

270
00:11:41,400 --> 00:11:43,300
We're going to do this number screen.

271
00:11:43,300 --> 00:11:46,200
So what we'll do is we'll lay out a, you know, the same thing, we did

272
00:11:46,200 --> 00:11:47,700
just a room with some doors in it.

273
00:11:48,300 --> 00:11:51,600
And then what we're going to do is say okay from there.

274
00:11:51,800 --> 00:11:52,800
I'll just going to randomly.

275
00:11:53,100 --> 00:11:56,400
Move one of the two, I'll either increment screen X or I'll increment

276
00:11:56,400 --> 00:11:58,700
screen y, but not both of them.

277
00:11:58,900 --> 00:11:59,800
So I basically do.

278
00:12:00,000 --> 00:12:04,100
If random number something like this equals zero.

279
00:12:06,200 --> 00:12:13,400
That or I should say if random Choice equals 0 else do this.

280
00:12:13,400 --> 00:12:18,600
It will do screen X Plus Z equals 1 or screen y plus Z equals 1.

281
00:12:19,000 --> 00:12:22,600
So we'll just kind of go in whatever direction that is it.

282
00:12:22,600 --> 00:12:25,300
So now we just need a way of making a random choice, right?

283
00:12:25,300 --> 00:12:30,900
We need to be able to make a random Choice somehow so that we can get,

284
00:12:31,100 --> 00:12:35,000
you know, something that allows us to pick randomly whether we want to

285
00:12:35,000 --> 00:12:35,400
go.

286
00:12:36,800 --> 00:12:40,100
To the right one or up one, right with our room.

287
00:12:40,100 --> 00:12:41,000
So we're going to start out.

288
00:12:41,000 --> 00:12:41,700
We're going to make a room.

289
00:12:41,700 --> 00:12:44,000
Then we're going to choose to either make a room to the right of it or

290
00:12:44,000 --> 00:12:45,100
the room above it.

291
00:12:45,200 --> 00:12:46,000
That's all we're doing here.

292
00:12:46,000 --> 00:12:46,300
Right?

293
00:12:46,300 --> 00:12:47,100
Very, very simple.

294
00:12:47,800 --> 00:12:50,700
So we'd like to do is figure out how to make a random choice.

295
00:12:50,900 --> 00:12:52,600
Now normally, the way random numbers work.

296
00:12:52,600 --> 00:12:54,800
And like I said, we won't really get into random numbers just yet.

297
00:12:54,800 --> 00:12:56,800
We'll be making our own random number generator.

298
00:12:57,100 --> 00:13:00,300
Once we actually start doing the World Generation stuff for real, but

299
00:13:00,300 --> 00:13:01,500
at the moment I just need something.

300
00:13:01,500 --> 00:13:04,700
So we can kind of split down rooms in a random pattern and start see

301
00:13:04,700 --> 00:13:06,100
how our sparseness thing is working.

302
00:13:07,100 --> 00:13:10,100
So, what I want to do here is just sort of point out the fact that,

303
00:13:10,100 --> 00:13:11,400
okay, random Choice.

304
00:13:12,100 --> 00:13:14,400
What I need to do is I need to take a random number, and I need to

305
00:13:14,400 --> 00:13:15,900
produce one of two options.

306
00:13:16,200 --> 00:13:19,500
And so, the way that that's typically done is using the mod operator.

307
00:13:19,500 --> 00:13:22,800
Now the mod operator, as we talked about before on the stream is

308
00:13:22,800 --> 00:13:26,400
basically something that doesn't divide and just talks about the

309
00:13:26,400 --> 00:13:28,800
remainder of that divided in integer space.

310
00:13:29,400 --> 00:13:33,600
So if I divide something by 2, I know I will either get a 0 or a 1

311
00:13:33,600 --> 00:13:36,500
because the only remainder you can get when you divide something by 2.

312
00:13:36,700 --> 00:13:38,200
Is 0 or 1, right?

313
00:13:38,200 --> 00:13:39,600
That's all that's going to be left.

314
00:13:39,700 --> 00:13:41,300
Assuming we're talking about positive numbers here.

315
00:13:41,900 --> 00:13:45,900
So, if I take a random positive number, I divide it by 2.

316
00:13:46,200 --> 00:13:48,500
The remainder will either be 1 or 0.

317
00:13:48,500 --> 00:13:51,200
It can never be too because then we would have had one higher when we

318
00:13:51,200 --> 00:13:52,400
did The Divided, right?

319
00:13:52,900 --> 00:13:57,600
So the mod operator is something that takes some random number and

320
00:13:57,600 --> 00:13:59,900
turns it into a number of choices for us.

321
00:13:59,900 --> 00:14:01,400
And that's exactly what we wanted.

322
00:14:01,400 --> 00:14:02,000
Right.

323
00:14:02,100 --> 00:14:05,700
So, all we need to do now is do some random number.

324
00:14:05,700 --> 00:14:06,500
Here, we need

325
00:14:06,600 --> 00:14:08,600
To have a way of doing a random number.

326
00:14:08,600 --> 00:14:13,100
And what I'm going to do is just avoid the issue altogether for the

327
00:14:13,100 --> 00:14:13,500
moment.

328
00:14:13,500 --> 00:14:15,600
So we don't have to start talking about random numbers today because

329
00:14:15,600 --> 00:14:17,000
it's not really a good time for it.

330
00:14:17,000 --> 00:14:20,500
We want to spend kind of a week, talking about them or something at

331
00:14:20,500 --> 00:14:21,100
some time in the future.

332
00:14:21,100 --> 00:14:22,700
Maybe not a week, but at least a couple days.

333
00:14:22,700 --> 00:14:27,800
So I'm just going to have our table of random numbers for now and then

334
00:14:27,800 --> 00:14:28,800
I will just put in to do.

335
00:14:28,800 --> 00:14:32,600
Here are random number generator will be something that will want to

336
00:14:32,600 --> 00:14:35,100
actually do a good job on since this games procedural generated.

337
00:14:35,100 --> 00:14:36,300
We really want a good random number.

338
00:14:36,700 --> 00:14:40,300
Obviously, so what we're going to do is just do this and I'm going to

339
00:14:40,300 --> 00:14:42,900
say that we essentially have a random number table.

340
00:14:44,400 --> 00:14:48,700
Hear that, we can initialize with a bunch of random numbers and then

341
00:14:48,700 --> 00:14:50,200
we'll have a random number index.

342
00:14:51,300 --> 00:14:54,300
And that random number index will start off at zero.

343
00:14:54,400 --> 00:14:58,500
And I will also cert here that the random number index is less than

344
00:14:58,500 --> 00:14:59,900
the array count of the

345
00:15:00,000 --> 00:15:02,400
Number table, and we'll just make sure that we make a big enough

346
00:15:02,400 --> 00:15:05,700
random table to have all the randomness that we need for now.

347
00:15:06,200 --> 00:15:10,800
Again, not a particularly glorious or beautiful solution, but that is

348
00:15:10,800 --> 00:15:13,100
just what we have to do to get things started.

349
00:15:13,100 --> 00:15:16,500
So there's our random number index and now we will go make our random

350
00:15:16,500 --> 00:15:22,600
number table out here and that can be a internal Global.

351
00:15:22,600 --> 00:15:26,400
There is our random number table and our random number table.

352
00:15:26,400 --> 00:15:30,000
We can now just go grab a ton of

353
00:15:30,000 --> 00:15:35,100
Of random numbers, I guess there's a easy way to do this on

354
00:15:35,200 --> 00:15:36,000
random.org.

355
00:15:36,000 --> 00:15:41,600
Usually I feel like we can typically get them in different formats as

356
00:15:41,600 --> 00:15:42,100
well.

357
00:15:43,400 --> 00:15:44,100
Where is it?

358
00:15:44,100 --> 00:15:45,100
Listen more?

359
00:15:45,900 --> 00:15:47,200
No numbers.

360
00:15:47,200 --> 00:15:48,800
Integers integers sets.

361
00:15:50,200 --> 00:15:50,900
Here we go.

362
00:15:51,100 --> 00:15:52,500
Switch to advanced mode.

363
00:15:53,200 --> 00:15:55,000
We want hexadecimal.

364
00:15:56,300 --> 00:15:59,800
We want values between

365
00:16:00,300 --> 00:16:02,000
One, and four billion.

366
00:16:02,000 --> 00:16:05,100
Ideally actually, guess I could even be 0.

367
00:16:06,200 --> 00:16:07,400
We would like to generate.

368
00:16:07,400 --> 00:16:08,200
I don't know.

369
00:16:08,400 --> 00:16:12,700
Let's get at least one full 4096 load of those.

370
00:16:12,700 --> 00:16:14,900
Maybe we could even get more than that.

371
00:16:14,900 --> 00:16:21,500
If you wanted to I'd like for a billion in here to be the largest.

372
00:16:21,500 --> 00:16:28,100
So let's go ahead and actually get the exact 4 GB number 4, x, 1024 by

373
00:16:28,200 --> 00:16:29,700
1024 x 10.

374
00:16:30,100 --> 00:16:30,500
For.

375
00:16:31,400 --> 00:16:33,500
So I'd like that to be the largest.

376
00:16:34,100 --> 00:16:38,700
There we go, and we can go ahead and format those in eight columns.

377
00:16:38,700 --> 00:16:40,100
So, let's see.

378
00:16:40,900 --> 00:16:42,700
Bare-bones text document.

379
00:16:44,500 --> 00:16:47,200
Lets see get numbers.

380
00:16:49,200 --> 00:16:52,900
Oh, seriously guys, seriously.

381
00:16:53,500 --> 00:16:54,500
All right, fine.

382
00:16:55,700 --> 00:16:56,300
Yeah, that's right.

383
00:16:56,300 --> 00:16:56,700
One minute.

384
00:16:56,800 --> 00:16:58,500
All right, why is that?

385
00:16:58,600 --> 00:17:03,000
I have no idea why that would be, but let's go ahead and just accept

386
00:17:03,100 --> 00:17:04,200
our limitations.

387
00:17:05,099 --> 00:17:07,000
Because again, this is only a temporary solution.

388
00:17:07,200 --> 00:17:08,800
So I guess that'll be fine.

389
00:17:09,500 --> 00:17:11,500
We've got all our stuff in here, get numbers.

390
00:17:11,800 --> 00:17:12,500
There we go.

391
00:17:12,500 --> 00:17:14,599
So there's our random numbers, right?

392
00:17:14,599 --> 00:17:15,400
They're lovely.

393
00:17:15,500 --> 00:17:19,099
They're a little smaller than I would have liked, but I can go ahead

394
00:17:19,200 --> 00:17:20,800
and cut and paste those in here.

395
00:17:21,099 --> 00:17:22,300
And now, I've got

396
00:17:23,099 --> 00:17:26,599
Some entropy and entropy is always kind of good.

397
00:17:26,800 --> 00:17:31,300
So now I will go through and just format this in a way that actually

398
00:17:31,700 --> 00:17:33,100
would allow us to compile it.

399
00:17:33,700 --> 00:17:37,100
This is a good case for again the C macros.

400
00:17:37,100 --> 00:17:39,700
So let's say that we have something that looks like this.

401
00:17:39,900 --> 00:17:41,900
I will go ahead and start my macro recording.

402
00:17:42,300 --> 00:17:43,300
I will come out here.

403
00:17:43,300 --> 00:17:45,100
Delete that put a comma in.

404
00:17:45,100 --> 00:17:48,400
They're gonna hear delete that put a comma in there.

405
00:17:48,400 --> 00:17:49,000
Come out here.

406
00:17:49,000 --> 00:17:50,800
Delete that comment in there.

407
00:17:50,900 --> 00:17:51,400
Oops.

408
00:17:51,900 --> 00:17:52,600
That's no good.

409
00:17:55,900 --> 00:17:57,100
Let's try this one more time.

410
00:17:59,400 --> 00:17:59,700
I'm not.

411
00:18:00,100 --> 00:18:02,500
Well today not a good editing day people.

412
00:18:03,700 --> 00:18:06,400
Not a good editing day at all for Casey.

413
00:18:08,500 --> 00:18:09,100
All right.

414
00:18:09,800 --> 00:18:10,800
This might still work though.

415
00:18:11,800 --> 00:18:12,500
It doesn't.

416
00:18:14,100 --> 00:18:15,300
Let's try that one more time.

417
00:18:16,100 --> 00:18:18,800
You know, it's a good day if the macro if the keyboard macro goes

418
00:18:18,800 --> 00:18:22,000
right the first time and you know, it's a bad day if it don't right.

419
00:18:22,300 --> 00:18:24,100
Alright, so let's try that again.

420
00:18:24,400 --> 00:18:27,600
Do this for Words, Oops.

421
00:18:28,300 --> 00:18:28,700
Wow.

422
00:18:28,700 --> 00:18:30,500
I just it's like I can't even type.

423
00:18:30,800 --> 00:18:31,600
I don't know what's going on.

424
00:18:31,600 --> 00:18:32,100
People.

425
00:18:32,300 --> 00:18:33,300
I do not know.

426
00:18:34,000 --> 00:18:34,400
All right.

427
00:18:34,400 --> 00:18:35,700
Let's try that one more time.

428
00:18:36,300 --> 00:18:37,400
How hard could it be?

429
00:18:37,900 --> 00:18:39,200
You know, really?

430
00:18:40,700 --> 00:18:41,800
Shouldn't be that hard.

431
00:18:48,300 --> 00:18:50,500
Being completely silent here, so I don't mess it up.

432
00:18:58,400 --> 00:18:59,000
All right.

433
00:18:59,800 --> 00:19:00,300
Okay.

434
00:19:01,200 --> 00:19:01,900
There we go.

435
00:19:02,400 --> 00:19:02,900
Well, you know what?

436
00:19:02,900 --> 00:19:05,400
I forgot and I forgot to put the 0 x in there.

437
00:19:05,400 --> 00:19:06,500
So I'm gonna have to do this again.

438
00:19:06,800 --> 00:19:09,200
So, you'll get to see me make another keyboard macro.

439
00:19:09,300 --> 00:19:10,800
We're, I'll probably mess it up.

440
00:19:11,600 --> 00:19:13,800
So, you know, yeah, not a good editing day.

441
00:19:13,800 --> 00:19:15,000
Maybe it's cuz it's Friday.

442
00:19:15,800 --> 00:19:17,300
Maybe it's because it's early in the morning.

443
00:19:17,300 --> 00:19:17,500
Maybe.

444
00:19:17,500 --> 00:19:19,700
It's because the coffee has not kicked in yet.

445
00:19:19,900 --> 00:19:21,200
I'm drinking coffee, almond milk.

446
00:19:21,200 --> 00:19:23,200
This morning, homemade.

447
00:19:24,200 --> 00:19:25,000
Quite tasty.

448
00:19:26,100 --> 00:19:26,500
Yeah.

449
00:19:27,000 --> 00:19:27,800
What can I say?

450
00:19:28,300 --> 00:19:28,900
I like me.

451
00:19:28,900 --> 00:19:29,700
Some almond milk.

452
00:19:29,900 --> 00:19:33,100
Alright, so, let's go ahead and you notice how slowly Max is doing?

453
00:19:33,100 --> 00:19:34,300
This is kind of crazy.

454
00:19:34,800 --> 00:19:41,200
You know, Call of Duty can render 3460 nowadays, photo-realistic

455
00:19:41,200 --> 00:19:45,500
frames per second, emacs can apply a keyboard macro in less than a

456
00:19:45,500 --> 00:19:46,900
second kind of amazing.

457
00:19:47,500 --> 00:19:49,600
Ladies and gentlemen, kind of amazing.

458
00:19:51,000 --> 00:19:51,800
What are you going to do?

459
00:19:52,400 --> 00:19:53,500
What are you going to do?

460
00:19:54,700 --> 00:19:58,200
Add new Editor, to the list of things I got to do in my life.

461
00:19:59,200 --> 00:20:02,700
Alright, still going still going here.

462
00:20:06,800 --> 00:20:10,000
God look at how it's so slow and it just gets slower and slower and

463
00:20:10,000 --> 00:20:10,500
slower.

464
00:20:11,100 --> 00:20:12,200
Absolutely awful.

465
00:20:12,500 --> 00:20:16,300
I do not know how they ended up in such a place.

466
00:20:16,600 --> 00:20:18,000
Look at how slow that is.

467
00:20:19,000 --> 00:20:20,800
How much more of these do I have to do?

468
00:20:21,000 --> 00:20:22,400
This is going to take forever.

469
00:20:22,600 --> 00:20:23,900
It's never going to finish.

470
00:20:25,300 --> 00:20:25,900
Ugh.

471
00:20:27,000 --> 00:20:27,800
All right.

472
00:20:29,100 --> 00:20:30,300
Let's see what I can do here.

473
00:20:30,300 --> 00:20:32,600
And what if there's something I can do here that, would speed things

474
00:20:32,600 --> 00:20:32,900
up.

475
00:20:33,000 --> 00:20:37,300
Maybe it's because I hit the, will the Kama automatically tab it yet.

476
00:20:37,300 --> 00:20:38,300
Will I suspect?

477
00:20:38,300 --> 00:20:39,400
It's probably the tab.

478
00:20:39,400 --> 00:20:40,700
It's super slow to.

479
00:20:42,100 --> 00:20:43,900
Yeah, that's really unfortunate.

480
00:20:46,400 --> 00:20:49,100
So what happens here, when I do that, it doesn't actually do the, you

481
00:20:49,100 --> 00:20:49,700
know, K.

482
00:20:49,800 --> 00:20:52,000
So, let's try this one more time without me doing tab at the

483
00:20:52,000 --> 00:20:52,500
beginning.

484
00:20:53,000 --> 00:20:54,900
So we'll do Define keyboard macro.

485
00:20:55,300 --> 00:20:56,700
I'll just do 0x.

486
00:20:56,800 --> 00:20:59,800
Let's go, Delete space.

487
00:21:00,700 --> 00:21:07,700
Oops, oh, X comma, delete space, 0 x comma, delete space 0x.

488
00:21:07,800 --> 00:21:10,300
I probably could have told you how to make a random number generator

489
00:21:10,300 --> 00:21:11,000
in the amount of time.

490
00:21:11,000 --> 00:21:15,000
This took 0x, right?

491
00:21:15,000 --> 00:21:20,400
You know, it's like welcome to absolutely horrible editor for once you

492
00:21:20,400 --> 00:21:23,700
wonder why I say, you know, a lot of people ask me why I use emacs

493
00:21:23,700 --> 00:21:24,700
with, don't recommend it.

494
00:21:24,800 --> 00:21:27,600
It's because well, I'm used to it and it's hard to find.

495
00:21:28,300 --> 00:21:30,100
It's hard to take the time to switch to a new editor.

496
00:21:30,300 --> 00:21:31,100
Stuff like this.

497
00:21:31,100 --> 00:21:32,700
That's just absurd, right.

498
00:21:32,700 --> 00:21:34,900
It's like this should be instantaneous.

499
00:21:35,000 --> 00:21:36,600
There's absolutely no excuse for this.

500
00:21:36,600 --> 00:21:38,700
Not being 100% instantaneous.

501
00:21:40,400 --> 00:21:41,300
But of course, it's not.

502
00:21:41,300 --> 00:21:41,600
You know, what?

503
00:21:41,600 --> 00:21:44,100
I could probably do too, if I switch to text mode.

504
00:21:44,500 --> 00:21:45,600
I bet that a bit yet.

505
00:21:45,600 --> 00:21:47,600
It's the C++ indentation feature.

506
00:21:47,600 --> 00:21:48,300
There you go.

507
00:21:48,600 --> 00:21:53,700
C++ indentation, apparently is way too much four for emacs to handle.

508
00:21:54,000 --> 00:21:54,600
So there you go.

509
00:21:54,600 --> 00:21:56,400
That's the that's the money right there.

510
00:21:56,700 --> 00:21:56,900
Now.

511
00:21:56,900 --> 00:21:58,700
It's like totally instant, right?

512
00:22:00,000 --> 00:22:01,500
That's that's so sad.

513
00:22:01,700 --> 00:22:03,400
But yeah, what you going to do?

514
00:22:05,800 --> 00:22:06,800
What are you going to do?

515
00:22:06,800 --> 00:22:09,600
Emacs lisp, not the most performant thing in the world?

516
00:22:09,600 --> 00:22:12,300
People let that be a lesson to you.

517
00:22:12,300 --> 00:22:12,900
All right.

518
00:22:13,500 --> 00:22:16,900
So there we go, and I'll turn back on C++ mode eventually, but now we

519
00:22:16,900 --> 00:22:20,100
can actually do things at least that are somewhat fast.

520
00:22:20,100 --> 00:22:24,300
So I can go ahead and finish this guy Define the keyboard Macro for

521
00:22:24,300 --> 00:22:27,000
this just like this.

522
00:22:30,500 --> 00:22:32,200
Man, that was ridiculously bad.

523
00:22:32,700 --> 00:22:33,600
Just so awful.

524
00:22:35,400 --> 00:22:37,400
All right, there we go.

525
00:22:38,000 --> 00:22:40,800
And now I can go ahead and just kind of finish those up.

526
00:22:42,800 --> 00:22:43,900
Like so.

527
00:22:45,300 --> 00:22:46,700
Like so.

528
00:22:49,400 --> 00:22:50,900
Okay, there we go.

529
00:22:51,300 --> 00:22:54,900
Now we have a random number tip generator and I can actually turn C++

530
00:22:54,900 --> 00:22:57,900
mode back on, so we get our proper indentation and I don't obviously

531
00:22:57,900 --> 00:23:00,100
want that polluting up our source file.

532
00:23:00,100 --> 00:23:03,700
So I'm just going to make a handmade random dot h for now.

533
00:23:03,700 --> 00:23:06,600
And we'll just stuff that in there and forget about it.

534
00:23:06,800 --> 00:23:07,200
Right?

535
00:23:07,300 --> 00:23:11,500
And so now we've got our random number table sitting there doing its

536
00:23:11,500 --> 00:23:15,400
thing and I'll just go ahead and have Emax take the incredibly long

537
00:23:15,400 --> 00:23:15,700
time.

538
00:23:15,700 --> 00:23:16,500
It takes it to in depth.

539
00:23:16,500 --> 00:23:18,100
Look at how long it takes to indent that.

540
00:23:18,400 --> 00:23:19,000
Look at that.

541
00:23:19,900 --> 00:23:20,800
It's just crazy.

542
00:23:20,800 --> 00:23:24,600
Thirty-four percent complete this to be a percent done indicator to

543
00:23:24,600 --> 00:23:29,600
end up five hundred lines of code, uh, the pain and suffering.

544
00:23:30,000 --> 00:23:30,900
How is it possible?

545
00:23:30,900 --> 00:23:31,400
People?

546
00:23:31,500 --> 00:23:32,200
Look at this.

547
00:23:32,800 --> 00:23:33,800
So embarrassing.

548
00:23:34,200 --> 00:23:36,100
Right to so embarrassing.

549
00:23:36,500 --> 00:23:39,400
I reported this, by the way, will actually a viewer, actually was

550
00:23:39,400 --> 00:23:42,900
reporting this, a handmade here, a person when I was complaining about

551
00:23:42,900 --> 00:23:45,600
how slow emacs's, I sent them a file where this kind of thing happens,

552
00:23:45,800 --> 00:23:49,200
and the maintainer said it's unreasonable to expect it to go any

553
00:23:49,200 --> 00:23:49,500
faster.

554
00:23:49,600 --> 00:23:49,800
Der.

555
00:23:49,800 --> 00:23:51,700
That's what the Emax people wrote back.

556
00:23:51,900 --> 00:23:52,700
I'm not kidding.

557
00:23:54,200 --> 00:23:56,500
I guess they just don't understand how computers work or something.

558
00:23:56,500 --> 00:23:56,700
I don't know.

559
00:23:56,700 --> 00:23:57,200
It's awful.

560
00:23:57,300 --> 00:23:59,800
Anyway, so here we are at our

561
00:24:00,000 --> 00:24:02,000
The number table situation.

562
00:24:02,000 --> 00:24:05,700
We got to include it obviously, so we have to go in here and do

563
00:24:05,700 --> 00:24:07,700
handmade random dot h.

564
00:24:08,100 --> 00:24:09,100
Kind of put that in there.

565
00:24:10,100 --> 00:24:11,100
We'll deal with that later.

566
00:24:12,100 --> 00:24:13,100
Let's see.

567
00:24:13,100 --> 00:24:14,700
What is our problem here.

568
00:24:14,700 --> 00:24:16,900
Oh, I think what did I actually call this?

569
00:24:16,900 --> 00:24:19,300
I think I just called it Global variable or something like that.

570
00:24:21,100 --> 00:24:24,100
Yeah, so now we have something random we can look at.

571
00:24:24,300 --> 00:24:25,700
So what we're going to do here.

572
00:24:26,200 --> 00:24:29,700
Like I said is our routine now is going to do its little.

573
00:24:29,700 --> 00:24:31,200
It's going to basically do the same thing.

574
00:24:31,200 --> 00:24:35,100
It was doing with to make a screen but instead you can see when it

575
00:24:35,100 --> 00:24:36,200
comes in here, right?

576
00:24:36,300 --> 00:24:40,300
It's going to actually after it's done right here.

577
00:24:40,300 --> 00:24:41,600
Is it making the screen right saying?

578
00:24:41,600 --> 00:24:44,300
The towels for one screen after it's done making the tile for one

579
00:24:44,300 --> 00:24:44,800
screen?

580
00:24:44,800 --> 00:24:45,900
It's going to go here.

581
00:24:46,200 --> 00:24:47,700
It's going to get a random Choice.

582
00:24:48,000 --> 00:24:50,700
It's going to use that to decide which one of these it does and

583
00:24:50,900 --> 00:24:53,700
Really, you know, it makes a different one every so often.

584
00:24:53,800 --> 00:24:55,600
Let's see if that's actually true one.

585
00:24:57,100 --> 00:24:58,900
See here, random choices 0.

586
00:24:58,900 --> 00:25:00,600
Yes, it's doing what it's supposed to do.

587
00:25:00,700 --> 00:25:02,800
And then we're just going to increment, one of the two values

588
00:25:02,800 --> 00:25:04,600
differently depending on it.

589
00:25:04,800 --> 00:25:05,400
And so, there you go.

590
00:25:05,400 --> 00:25:09,200
We've now made exactly what I kind of wanted to make their we've made

591
00:25:09,300 --> 00:25:15,800
sort of a random, a random thing where we have all of our, all of our

592
00:25:15,800 --> 00:25:18,100
rooms kind of laid out in a random fashion, right?

593
00:25:18,400 --> 00:25:21,800
They kind of just kind of go up now, you know, this is not a good

594
00:25:21,800 --> 00:25:24,000
random algorithm for laying out rooms because it can't even double

595
00:25:24,000 --> 00:25:24,600
back on itself.

596
00:25:24,600 --> 00:25:26,800
I just wanted something that would create a shape that

597
00:25:27,000 --> 00:25:28,500
And a block, right?

598
00:25:28,500 --> 00:25:31,900
That wasn't just a solid block, and you can kind of see how that's

599
00:25:31,900 --> 00:25:32,500
working here.

600
00:25:32,500 --> 00:25:38,400
But now, what we need to do is I also want to draw where there are and

601
00:25:38,400 --> 00:25:40,800
aren't tile maps for the world.

602
00:25:40,800 --> 00:25:41,100
Right?

603
00:25:41,100 --> 00:25:45,700
I want to be able to draw locations where there are an aren't store

604
00:25:45,700 --> 00:25:47,300
where there is, an isn't storage.

605
00:25:47,300 --> 00:25:52,000
So, in addition to uninitialized, I also want to draw, you know, sort

606
00:25:52,000 --> 00:25:54,000
of see where the storage is, if that makes sense.

607
00:25:55,000 --> 00:25:58,700
And so what I'm going to do for that is I'm going to say that whenever

608
00:25:58,700 --> 00:26:04,000
we make a tile map for now, right here, where we actually create all

609
00:26:04,000 --> 00:26:05,100
of our tile chunks.

610
00:26:05,200 --> 00:26:05,900
Right here.

611
00:26:06,200 --> 00:26:08,700
I'm actually going to also go ahead and just initialize them.

612
00:26:08,700 --> 00:26:11,500
All right, so I'm going to say that.

613
00:26:11,500 --> 00:26:15,000
We basically have our tile count in our tile.

614
00:26:15,000 --> 00:26:16,800
Count is this thing, right?

615
00:26:16,800 --> 00:26:19,900
This is how many tiles there are per Chunk in our town map.

616
00:26:20,700 --> 00:26:24,700
What I'm going to do is I'm going to spin over that that whole

617
00:26:24,800 --> 00:26:26,700
Tiles, right?

618
00:26:26,800 --> 00:26:27,900
So here's the towel count.

619
00:26:27,900 --> 00:26:29,200
I'm going to spin over the whole set of tiles.

620
00:26:29,200 --> 00:26:33,300
I'm going to initialize them all to zero, so that we can see where our

621
00:26:33,300 --> 00:26:34,700
tiles are and aren't.

622
00:26:34,700 --> 00:26:35,600
If that makes sense.

623
00:26:36,000 --> 00:26:41,800
So, our tile chunks, Italian, the x equals 0, right?

624
00:26:41,800 --> 00:26:42,400
Like that.

625
00:26:43,100 --> 00:26:43,500
Excuse me.

626
00:26:46,200 --> 00:26:46,700
Oh, sorry.

627
00:26:47,000 --> 00:26:48,100
1, not 0.

628
00:26:48,700 --> 00:26:49,400
No operator fan.

629
00:26:49,400 --> 00:26:50,000
Which takes, what?

630
00:26:50,000 --> 00:26:51,000
What are you what?

631
00:26:51,600 --> 00:26:52,900
What is the problem here?

632
00:26:55,300 --> 00:26:55,800
What did I do?

633
00:26:55,800 --> 00:26:58,800
What did I do tile chunks that?

634
00:26:58,900 --> 00:26:59,800
Oh, right tile.

635
00:27:00,600 --> 00:27:05,800
It's actually this, so this is tile chunk index.

636
00:27:08,500 --> 00:27:12,400
There we go, index, like that.

637
00:27:12,700 --> 00:27:14,600
So I'm pulling out each individual tile chunk.

638
00:27:14,600 --> 00:27:15,400
When I allocate it.

639
00:27:15,400 --> 00:27:16,700
I'm going to set it all to one.

640
00:27:16,900 --> 00:27:20,700
And so then when you run it what you can see is, we're not storing

641
00:27:20,700 --> 00:27:22,800
anything sparse at the moment, right?

642
00:27:22,800 --> 00:27:28,200
We've still we actually did create storage for this whole area.

643
00:27:28,300 --> 00:27:32,100
We're just not actually ever writing any walls into it, but we did

644
00:27:32,100 --> 00:27:33,200
actually store the whole area.

645
00:27:33,200 --> 00:27:36,900
So what we'd like to do is just nominally make this a little sparse or

646
00:27:36,900 --> 00:27:38,200
now just using the

647
00:27:38,300 --> 00:27:39,400
Stupid as possible thing.

648
00:27:39,900 --> 00:27:43,100
So that we can, at least verify that we are sort of doing things in as

649
00:27:43,100 --> 00:27:44,000
far as method.

650
00:27:44,000 --> 00:27:47,800
And then, we can sort of leave it from then on as a to do, when we for

651
00:27:47,800 --> 00:27:50,900
when we're doing the engine, proper to actually have a smart smart

652
00:27:50,900 --> 00:27:52,900
storage for things but you can kind of see what I mean.

653
00:27:52,900 --> 00:27:54,000
They're right.

654
00:27:54,100 --> 00:27:57,200
So what I want to do now is I want to make it so that we only actually

655
00:27:57,200 --> 00:28:01,900
start to to allocate space for the tiles when we actually need to

656
00:28:01,900 --> 00:28:02,900
store tiles there.

657
00:28:02,900 --> 00:28:03,500
That makes sense.

658
00:28:03,500 --> 00:28:06,400
Instead of, you know, right now I've got this thing, which basically

659
00:28:06,400 --> 00:28:08,100
preallocate sits basically as if we,

660
00:28:08,200 --> 00:28:09,600
Just did a one giant array.

661
00:28:09,600 --> 00:28:10,700
It's not sparse at all.

662
00:28:10,700 --> 00:28:12,500
So now it's time we've done all the work.

663
00:28:12,500 --> 00:28:12,700
Now.

664
00:28:12,700 --> 00:28:16,100
It's time to actually make our tilemap sparse.

665
00:28:16,100 --> 00:28:16,600
Right?

666
00:28:16,700 --> 00:28:19,200
And so I'm just going to quickly because I know this is a lot of stuff

667
00:28:19,200 --> 00:28:20,400
for people who've never done this before.

668
00:28:21,000 --> 00:28:23,000
So, what we were doing right?

669
00:28:23,000 --> 00:28:24,800
Is we store these tile chunks of tile?

670
00:28:24,800 --> 00:28:25,500
Chunk, right now.

671
00:28:25,500 --> 00:28:29,300
I think we set it so that it was basically 16 on a side is what I

672
00:28:29,300 --> 00:28:30,000
believe we set it to.

673
00:28:30,000 --> 00:28:32,400
Yeah, that's what we said it to here.

674
00:28:32,400 --> 00:28:36,400
And so basically what we were doing is we're creating 16 by 16 chunks.

675
00:28:36,400 --> 00:28:40,200
We created, however, 128 by 128 of them.

676
00:28:40,200 --> 00:28:43,800
So, we basically made a big block of these chunks, and each one of

677
00:28:43,800 --> 00:28:46,000
them basically gets filled in, so it's the same.

678
00:28:46,000 --> 00:28:47,400
It's exactly the same.

679
00:28:47,400 --> 00:28:51,000
As if we had, just right off the bat made a giant

680
00:28:51,100 --> 00:28:52,000
Tile map.

681
00:28:52,500 --> 00:28:53,600
That was oops.

682
00:28:53,600 --> 00:28:54,900
128 times 16.

683
00:28:55,200 --> 00:28:57,700
That was 2048 by 2048, right?

684
00:28:57,700 --> 00:29:01,200
That's basically all we did is we made a 2048 by 2048 tilemap.

685
00:29:01,200 --> 00:29:03,900
So what you want to do now is start to store that sparsely so that the

686
00:29:03,900 --> 00:29:05,200
simplest thing we can possibly do.

687
00:29:05,200 --> 00:29:09,500
Here is say that instead of having child chunks, always have their

688
00:29:09,500 --> 00:29:10,300
tiles in them.

689
00:29:10,500 --> 00:29:13,000
The tile chunks just won't have the tiles yet.

690
00:29:13,200 --> 00:29:16,500
So instead of doing this spin over the array, where we actually sort

691
00:29:16,500 --> 00:29:20,600
of this right here that does the this allocation to actually put

692
00:29:20,600 --> 00:29:20,900
tiles.

693
00:29:21,000 --> 00:29:21,700
To the Tau chunks.

694
00:29:21,700 --> 00:29:23,100
We're just not going to allocate them.

695
00:29:23,100 --> 00:29:26,200
We're just not going to do that that step right, instead.

696
00:29:26,200 --> 00:29:29,900
What we're going to do is when we actually need to set a tile value

697
00:29:29,900 --> 00:29:33,700
when the tile chunk comes back, if there wasn't a tile chunk, if that

698
00:29:33,700 --> 00:29:37,700
Talent didn't have any tiles in it, then what we'll do, you know, this

699
00:29:37,700 --> 00:29:42,800
is a if tile chunk tiles is not initialized, will initialize it right

700
00:29:42,800 --> 00:29:43,200
there.

701
00:29:43,500 --> 00:29:49,000
So right there at the time when we go to do it, we will that that is

702
00:29:49,000 --> 00:29:50,900
when right on when we actually

703
00:29:51,000 --> 00:29:56,800
When we actually find that we're trying to set the value of a tile

704
00:29:56,800 --> 00:29:58,900
chunk, that doesn't have any tiles in it.

705
00:29:58,900 --> 00:29:59,900
That's when we'll

706
00:30:00,000 --> 00:30:00,300
It.

707
00:30:00,600 --> 00:30:01,500
And similarly.

708
00:30:01,500 --> 00:30:06,400
I think what we want to do is when we do a get tile value, we

709
00:30:06,400 --> 00:30:12,600
similarly want to say if the tile chunk tiles are there because we

710
00:30:12,600 --> 00:30:15,600
want to always do that as well.

711
00:30:15,600 --> 00:30:18,800
There we go, set tell value, we'll check that as well.

712
00:30:18,900 --> 00:30:22,400
Now, Sceptile value really probably doesn't need to call this this

713
00:30:22,400 --> 00:30:24,200
checked one here, but, I don't know.

714
00:30:24,300 --> 00:30:27,200
Well, we'll leave it there for now just in case.

715
00:30:27,600 --> 00:30:29,800
And this doesn't need to be there either.

716
00:30:30,000 --> 00:30:33,200
ER that's just some copypasta as people on the stream like to say

717
00:30:34,000 --> 00:30:37,300
anyway, so what we're going to do is if we find that there's no tiles,

718
00:30:37,300 --> 00:30:38,900
we're going to initialize them right here.

719
00:30:39,300 --> 00:30:40,600
We're just going to basically do.

720
00:30:40,600 --> 00:30:41,200
Okay.

721
00:30:43,300 --> 00:30:45,300
We have this tile chunk, right?

722
00:30:45,300 --> 00:30:47,700
We're going to do the same thing we were doing before, but now the

723
00:30:47,700 --> 00:30:50,300
tile chunk will be allocated just in time.

724
00:30:50,400 --> 00:30:52,700
So soon as we try to write into a towel chunk, that hasn't had any

725
00:30:52,700 --> 00:30:54,200
tiles allocated for it yet.

726
00:30:54,300 --> 00:30:57,500
We're going to go ahead and say make those tiles right now.

727
00:30:57,500 --> 00:30:59,900
Push them onto that Arena that we've been passed, which is

728
00:31:00,000 --> 00:31:01,400
Supposed to store them, right?

729
00:31:02,000 --> 00:31:03,800
We need to know what the tile count is.

730
00:31:03,800 --> 00:31:04,000
Again.

731
00:31:04,000 --> 00:31:08,200
That tile count value is defined by our chunk, Tim.

732
00:31:08,400 --> 00:31:09,600
Right that chunk.

733
00:31:09,600 --> 00:31:09,900
Tim.

734
00:31:09,900 --> 00:31:12,700
It's just the chunked in squared, right?

735
00:31:12,700 --> 00:31:16,000
It's just a, it's because we're everything square at the moment.

736
00:31:16,200 --> 00:31:18,800
So our child count is just that chunk.

737
00:31:18,800 --> 00:31:19,600
Tim squared.

738
00:31:19,900 --> 00:31:22,400
We're going to allocate that we're going to go over the tiles, and we

739
00:31:22,400 --> 00:31:28,300
are going to go ahead and fill them all in with one, right?

740
00:31:28,400 --> 00:31:29,000
Make sense.

741
00:31:29,300 --> 00:31:29,800
So that's all.

742
00:31:29,900 --> 00:31:31,000
I'm going to do, that's it.

743
00:31:31,300 --> 00:31:33,700
Nothing particularly chunk.

744
00:31:33,700 --> 00:31:34,200
There we go.

745
00:31:36,800 --> 00:31:38,500
What's the problem push array, right?

746
00:31:38,500 --> 00:31:41,500
So now we actually have to Loft that Arena stuff up a little bit

747
00:31:41,500 --> 00:31:44,000
because I had just kind of declared it right where it needed to be.

748
00:31:44,000 --> 00:31:45,800
But actual people are starting to use it now.

749
00:31:46,300 --> 00:31:51,500
So this stuff I'm just going to go ahead and pop that up into here so

750
00:31:51,500 --> 00:31:53,000
that everyone can use it.

751
00:31:53,000 --> 00:31:58,700
Who wants to use it like that to me for now we'll have to this will

752
00:31:58,700 --> 00:32:01,200
probably become its own file because we'll have our memory stuff in

753
00:32:01,200 --> 00:32:01,300
there.

754
00:32:01,300 --> 00:32:05,100
But for now you need to worry about that and now we can actually see

755
00:32:05,100 --> 00:32:05,200
our

756
00:32:05,400 --> 00:32:07,900
Of storing stuff sparsely.

757
00:32:08,200 --> 00:32:12,000
So now you can see that basically we're not storing the tilemap

758
00:32:12,000 --> 00:32:13,400
everywhere in a giant rectangle.

759
00:32:13,500 --> 00:32:17,500
We're only storing the tile map around the places where we actually

760
00:32:17,500 --> 00:32:19,000
have rooms, right?

761
00:32:19,700 --> 00:32:22,900
And so that is much nicer and uses a lot less memory.

762
00:32:22,900 --> 00:32:27,500
So now we can have much larger worlds in terms of span and we will, we

763
00:32:27,500 --> 00:32:32,100
won't pay for a bunch of space that forces the storage for them to be

764
00:32:32,100 --> 00:32:33,400
rectangular, right?

765
00:32:33,900 --> 00:32:35,100
To be a giant rectangle.

766
00:32:35,300 --> 00:32:36,100
Does that make sense?

767
00:32:36,100 --> 00:32:37,600
Hopefully you can see what I did there.

768
00:32:37,700 --> 00:32:41,800
So now we're only storing the places around, you know, we're using 16

769
00:32:41,800 --> 00:32:42,500
by 16 block.

770
00:32:42,500 --> 00:32:45,700
So there's still some wastage as you can see because it has to be

771
00:32:45,700 --> 00:32:46,700
aligned on the 16s.

772
00:32:46,700 --> 00:32:51,100
I 16 blocks, but we now have a nicely sparsely stored world.

773
00:32:51,200 --> 00:32:55,400
That's only exist, sort of in the places where we actually needed to

774
00:32:55,400 --> 00:32:56,200
write data, right?

775
00:32:56,200 --> 00:32:57,300
So that's pretty cool.

776
00:32:58,100 --> 00:32:58,800
That's that's good.

777
00:32:58,800 --> 00:32:59,900
So we've gotten to the

778
00:33:00,100 --> 00:33:02,500
Least that I want us to be for our tile map storage.

779
00:33:02,700 --> 00:33:06,600
We are now starting at sparsely and we can store very large things if

780
00:33:06,600 --> 00:33:07,500
you can imagine.

781
00:33:07,700 --> 00:33:09,200
Like, yeah, basically

782
00:33:10,600 --> 00:33:11,500
We can you know what?

783
00:33:11,500 --> 00:33:17,300
We can even go ahead and say now if I go back in here handmade that

784
00:33:17,300 --> 00:33:19,700
CPP, you can see how this kind of feels.

785
00:33:19,800 --> 00:33:22,100
You would never actually know that.

786
00:33:22,100 --> 00:33:22,800
This was the case.

787
00:33:22,800 --> 00:33:26,500
If we did a couple of the player will never have to know that the

788
00:33:26,500 --> 00:33:28,900
world doesn't exist outside the part that they can see.

789
00:33:29,200 --> 00:33:33,500
So what we could do, for example is when we make our doors, let's go

790
00:33:33,500 --> 00:33:36,900
ahead and make our random Choice sort of at the head end.

791
00:33:36,900 --> 00:33:39,400
Let's let's just move this up here.

792
00:33:39,600 --> 00:33:39,800
So,

793
00:33:40,000 --> 00:33:42,800
sleep, when we come into the screen, you make the random choice about

794
00:33:42,800 --> 00:33:47,000
which is going to be and then we basically say okay if we were going

795
00:33:47,000 --> 00:33:50,300
to go one screen over in X because we're now we're making

796
00:33:51,800 --> 00:33:53,200
We're making doors on either side.

797
00:33:53,200 --> 00:33:53,600
Right?

798
00:33:53,700 --> 00:33:56,900
So basically, what we need to do is we need to basically say where the

799
00:33:56,900 --> 00:33:57,700
door should be.

800
00:33:58,100 --> 00:34:01,200
And so we can, we can sort of do something where we basically say.

801
00:34:03,600 --> 00:34:04,800
You know, is there a door?

802
00:34:05,000 --> 00:34:06,500
Is there a door on the left?

803
00:34:06,500 --> 00:34:07,600
Is there a door on the right?

804
00:34:07,600 --> 00:34:12,000
So on, so will they say like this drawer, right?

805
00:34:12,000 --> 00:34:14,800
Or top down or bottom, something like this?

806
00:34:15,400 --> 00:34:18,400
And so what I'll do is I'll set those out here so that there's no

807
00:34:18,400 --> 00:34:21,699
doors to start with when we make the random choice.

808
00:34:21,800 --> 00:34:25,800
We will be determining whether there's a door in one of those places.

809
00:34:25,800 --> 00:34:31,500
So we'll say, you know, if the random Choice equals 0 else, right?

810
00:34:31,500 --> 00:34:32,300
And so, what did we say?

811
00:34:32,300 --> 00:34:33,199
We said that we go

812
00:34:33,500 --> 00:34:35,000
One to the right.

813
00:34:35,100 --> 00:34:38,600
So there's a door on the right in the case of this, right?

814
00:34:38,800 --> 00:34:44,300
There's a door to the top, in the case of this, right?

815
00:34:45,100 --> 00:34:48,400
Then we've yet to the bottom will clear those out, right?

816
00:34:48,400 --> 00:34:52,100
Will clear all of these back after we're out of here.

817
00:34:52,199 --> 00:34:55,300
So after we finish making our doors will clear all these out right

818
00:34:55,300 --> 00:35:00,200
like that, but instead of clearing them to 0 what will do is will say

819
00:35:00,200 --> 00:35:03,200
welded the door to the left is where the door.

820
00:35:03,300 --> 00:35:06,000
To the right was on this screen and we want it to carry over to the

821
00:35:06,000 --> 00:35:06,500
next screen.

822
00:35:06,500 --> 00:35:08,300
If there's door to the right here, they'll be a door to the left on

823
00:35:08,300 --> 00:35:08,900
the other one.

824
00:35:09,200 --> 00:35:12,400
So we're just going to say that basically door to the right.

825
00:35:12,400 --> 00:35:17,100
I'm sorry door to the left is whether there was a door to the right on

826
00:35:17,100 --> 00:35:17,600
this one.

827
00:35:17,800 --> 00:35:18,400
Right?

828
00:35:18,400 --> 00:35:21,300
And we're going to say that the door to the top is whether, or not,

829
00:35:22,100 --> 00:35:24,000
I'm sorry, sort of the bottom is whether or not there was a door to

830
00:35:24,000 --> 00:35:25,600
the top on the other one, right?

831
00:35:25,800 --> 00:35:28,700
So, because those are the two doors that would be determined by the

832
00:35:28,700 --> 00:35:29,300
previous thing.

833
00:35:29,500 --> 00:35:33,200
And then we're going to say, you know, that the right in the top door.

834
00:35:33,400 --> 00:35:36,300
Are cleared out because those are going to get set up here.

835
00:35:36,700 --> 00:35:39,600
Okay, so just do it that way.

836
00:35:39,600 --> 00:35:41,500
It's, I know it's super janky and weird again.

837
00:35:41,500 --> 00:35:43,200
I'm just trying to make something real quick.

838
00:35:43,500 --> 00:35:44,600
This is not again.

839
00:35:44,900 --> 00:35:47,100
Please do not make worlds this way that I'm doing them.

840
00:35:47,100 --> 00:35:49,300
We will be doing a lot more interesting stuff later with that.

841
00:35:49,400 --> 00:35:50,800
This is just something to kind of guess going.

842
00:35:54,300 --> 00:35:54,800
so,

843
00:35:56,400 --> 00:35:58,700
Here we are in our tile stuff.

844
00:35:59,000 --> 00:35:59,800
What we want to do here.

845
00:36:00,000 --> 00:36:04,500
Say basically, we've got each of these is going to be a separate case

846
00:36:04,500 --> 00:36:05,600
now, right?

847
00:36:05,800 --> 00:36:08,800
And again, this is a little bit piggy code, but that's okay.

848
00:36:10,200 --> 00:36:11,500
This is only happening on Startup.

849
00:36:11,500 --> 00:36:14,700
There's nothing particular to worry about here.

850
00:36:15,400 --> 00:36:16,000
There we go.

851
00:36:17,500 --> 00:36:20,900
But basically, this is just the same code.

852
00:36:21,100 --> 00:36:21,800
Here we go.

853
00:36:21,900 --> 00:36:26,200
Just doing a cut-and-paste reuse as it is called quote unquote.

854
00:36:26,600 --> 00:36:29,800
And so now, basically, if the tile x is 0 on the tile, why?

855
00:36:30,200 --> 00:36:33,700
Is half that is going to be in effect.

856
00:36:33,700 --> 00:36:34,900
We can kind of make this.

857
00:36:38,400 --> 00:36:40,800
I guess we can basically just make this a much more concise case.

858
00:36:40,900 --> 00:36:41,100
We can.

859
00:36:41,100 --> 00:36:47,200
Basically just say if the tiled x is 0 and the tile Y is not equal to

860
00:36:47,200 --> 00:36:48,700
the middle right?

861
00:36:48,800 --> 00:36:53,600
Then we're going to make there be a wall there, right?

862
00:36:54,200 --> 00:36:55,100
All right, that makes sense.

863
00:36:55,400 --> 00:36:56,400
And this tile X.

864
00:36:56,400 --> 00:36:58,900
The only thing we need to do now is say well if they're also was

865
00:36:58,900 --> 00:37:00,400
supposed to be a door to the left.

866
00:37:00,500 --> 00:37:05,900
Otherwise, we're going to leave it as a wall, I guess.

867
00:37:05,900 --> 00:37:06,600
So.

868
00:37:07,300 --> 00:37:07,700
And

869
00:37:08,500 --> 00:37:10,100
Its title x equals 0.

870
00:37:10,300 --> 00:37:15,500
It's going to end and there isn't supposed to be a door to the left.

871
00:37:16,100 --> 00:37:16,600
Right.

872
00:37:16,600 --> 00:37:18,600
And that I think, am I correct there.

873
00:37:19,300 --> 00:37:20,300
Is it my correct there.

874
00:37:21,400 --> 00:37:26,300
So if there's a tie left in, oh, and no, no, it's not door left or

875
00:37:26,300 --> 00:37:27,300
this is very complicated.

876
00:37:27,300 --> 00:37:27,700
I'm not sure.

877
00:37:27,700 --> 00:37:28,700
I'm going to get this right?

878
00:37:28,800 --> 00:37:29,700
Let me think about this.

879
00:37:30,200 --> 00:37:33,300
So if we were going to draw a wall,

880
00:37:34,500 --> 00:37:37,000
We draw a wall if tile x equals zero.

881
00:37:38,600 --> 00:37:44,100
And it's not, we're in the middle because if it was in the middle, you

882
00:37:44,100 --> 00:37:44,700
wouldn't draw it.

883
00:37:44,700 --> 00:37:47,900
But if it's not in the middle, we'd also still draw.

884
00:37:47,900 --> 00:37:50,100
If there wasn't supposed to be a drawer to the left.

885
00:37:50,100 --> 00:37:52,100
Because if there's not supposed to be a draw, to the left, we need to

886
00:37:52,100 --> 00:37:52,600
fill it in.

887
00:37:52,800 --> 00:37:53,700
That's right.

888
00:37:53,900 --> 00:37:55,000
Oh man, that's crazy.

889
00:37:55,600 --> 00:37:58,200
That is just some crazy, some crazy iffing.

890
00:37:59,300 --> 00:38:00,800
But I think it's actually correct.

891
00:38:01,100 --> 00:38:01,600
I don't know.

892
00:38:02,600 --> 00:38:04,000
Don't take my word for it.

893
00:38:05,700 --> 00:38:09,100
Okay, so yeah, we'll see if that will see if it actually works.

894
00:38:09,600 --> 00:38:10,700
That's that's what we'll do.

895
00:38:11,400 --> 00:38:13,800
So yeah, so there's the test for the other one.

896
00:38:14,200 --> 00:38:16,300
Basically, this is for the door on the right.

897
00:38:16,500 --> 00:38:19,600
If there's not supposed to be a door on the right, or if it's in the

898
00:38:19,600 --> 00:38:20,100
middle.

899
00:38:21,900 --> 00:38:26,500
Then then we would then we would put the put the Blocker in there,

900
00:38:27,000 --> 00:38:27,600
right?

901
00:38:29,400 --> 00:38:30,000
Is that right?

902
00:38:30,000 --> 00:38:32,200
So tile X, and

903
00:38:34,700 --> 00:38:35,900
I got to think this through one more time.

904
00:38:36,500 --> 00:38:38,600
In fact, I kind of almost have to make the larger tail for it.

905
00:38:38,900 --> 00:38:40,500
The tile x equals 0.

906
00:38:41,100 --> 00:38:42,100
We're going to make a wall.

907
00:38:43,600 --> 00:38:50,400
But it also has to be the case, vet there, that we're not on that

908
00:38:50,500 --> 00:38:51,200
part.

909
00:38:52,300 --> 00:38:54,900
Then we'll make the wall, or if we're.

910
00:38:54,900 --> 00:38:56,000
Yeah, I don't know.

911
00:38:56,000 --> 00:38:57,500
I'm thinking that's based roughly.

912
00:38:57,500 --> 00:38:57,800
Correct.

913
00:38:57,800 --> 00:38:59,000
Let's just assume that it is.

914
00:38:59,000 --> 00:38:59,800
We'll do it in testing me.

915
00:39:00,000 --> 00:39:02,800
Honestly, that's that's that's hurting my brain to even think about

916
00:39:02,800 --> 00:39:03,000
that.

917
00:39:03,000 --> 00:39:06,500
And to the degree that I have to think about it right now.

918
00:39:06,600 --> 00:39:08,100
So if there's a door to the top,

919
00:39:09,500 --> 00:39:09,900
Oops.

920
00:39:10,500 --> 00:39:10,700
Wait.

921
00:39:10,700 --> 00:39:10,800
No.

922
00:39:10,800 --> 00:39:11,500
This is how I 0.

923
00:39:11,500 --> 00:39:12,800
So, this is door to the bottom.

924
00:39:13,400 --> 00:39:19,000
There's not a door to the bottom, or this is not equal to Middle.

925
00:39:19,900 --> 00:39:20,600
There we go.

926
00:39:21,400 --> 00:39:22,900
So, that's that one.

927
00:39:23,300 --> 00:39:28,000
There's are incredibly stylish door, bottom code, and then, similarly,

928
00:39:29,300 --> 00:39:30,200
the tile, why?

929
00:39:32,200 --> 00:39:39,600
This is our door top coming out the top and that is this and there we

930
00:39:39,600 --> 00:39:40,100
go.

931
00:39:42,100 --> 00:39:44,800
Oops, man.

932
00:39:44,800 --> 00:39:46,600
That is some ugly-looking stuff right there.

933
00:39:47,400 --> 00:39:48,700
That is some ugly-looking stuff.

934
00:39:49,000 --> 00:39:50,300
Let's see if it works at all.

935
00:39:50,300 --> 00:39:51,200
Probably not.

936
00:39:53,500 --> 00:39:55,200
Yeah, probably not.

937
00:39:55,200 --> 00:39:55,400
Of course.

938
00:39:55,400 --> 00:39:55,700
It works.

939
00:39:55,700 --> 00:39:57,200
A little almost worked.

940
00:39:57,600 --> 00:40:00,900
It almost worked, but we've got one our door to the top.

941
00:40:01,100 --> 00:40:02,600
Code is busted somehow.

942
00:40:03,300 --> 00:40:04,500
What did I do here?

943
00:40:06,000 --> 00:40:09,100
Let's see door top.

944
00:40:09,300 --> 00:40:11,000
If tile y equals tiles, right?

945
00:40:11,000 --> 00:40:11,700
- 1.

946
00:40:12,900 --> 00:40:17,200
And it's not the door top.

947
00:40:18,700 --> 00:40:22,600
Or tile X is not equal to.

948
00:40:22,600 --> 00:40:23,200
There we go.

949
00:40:23,500 --> 00:40:24,900
I forgot my not equal to there.

950
00:40:26,600 --> 00:40:29,000
Hey, so there we go.

951
00:40:29,300 --> 00:40:30,700
It's really surprised that worked.

952
00:40:31,100 --> 00:40:31,700
But there you go.

953
00:40:31,700 --> 00:40:36,100
So now we've actually got doors that only lead to where the rooms we

954
00:40:36,100 --> 00:40:38,300
actually made were, which is kind of a nice thing.

955
00:40:39,900 --> 00:40:41,000
So that's all good.

956
00:40:41,400 --> 00:40:45,200
But basically, what we want to do now is we want to say, okay since

957
00:40:45,200 --> 00:40:48,400
we've got since we've got that let's see what happens if we drop the

958
00:40:48,400 --> 00:40:53,400
player actually into sort of the location more for real.

959
00:40:53,600 --> 00:40:56,100
So if we actually go here now and cut this back,

960
00:40:56,200 --> 00:40:58,900
Down to doing what it was doing before.

961
00:40:58,900 --> 00:41:03,700
So we're only kind of drawing right around the player and I change

962
00:41:03,700 --> 00:41:08,800
back to doing sort of that closing view.

963
00:41:08,800 --> 00:41:12,700
So now you can imagine if the camera was locked in here, right at the

964
00:41:12,700 --> 00:41:16,300
camera is like that then really the player would never actually know

965
00:41:16,300 --> 00:41:18,900
that we're not storing the world outside it, right?

966
00:41:18,900 --> 00:41:20,600
Because it's never there.

967
00:41:20,600 --> 00:41:23,300
Never actually going to see anything other than this.

968
00:41:23,300 --> 00:41:25,900
So they're just going to think that the world exists everywhere

969
00:41:25,900 --> 00:41:26,200
because

970
00:41:26,200 --> 00:41:26,800
Coz everywhere.

971
00:41:26,800 --> 00:41:29,300
They see, it does exist but it really doesn't secretly.

972
00:41:29,300 --> 00:41:34,300
Does it basically outside of that sort of area.

973
00:41:34,400 --> 00:41:37,400
Now, of course, you can still see it now because we allow the camera

974
00:41:37,800 --> 00:41:41,900
to kind of roam over there, but we can even fix that if we want to

975
00:41:41,900 --> 00:41:44,400
know, if we were, if we were doing smooth scrolling and wanted to

976
00:41:44,400 --> 00:41:46,000
allow the camera to move all the way over here.

977
00:41:46,200 --> 00:41:49,800
All we would have to do is make sure that we made an apron around all

978
00:41:49,800 --> 00:41:53,700
the rooms when we are basically setting the tiles so that we make sure

979
00:41:53,700 --> 00:41:56,100
we actually fill out to however, far.

980
00:41:56,200 --> 00:41:57,900
Or they could get to a wall.

981
00:41:57,900 --> 00:41:59,800
Make sure we always have some stuff out there for.

982
00:42:00,000 --> 00:42:01,700
Look at and then even that would work.

983
00:42:01,800 --> 00:42:04,400
So basically there's no real downsides to storing its parsley.

984
00:42:04,400 --> 00:42:07,000
You can always make sure that every where the player could have seen,

985
00:42:07,100 --> 00:42:10,100
you actually set some tile data and then you're good to go.

986
00:42:10,200 --> 00:42:11,400
The other thing we could do.

987
00:42:11,900 --> 00:42:14,700
If you didn't even want to do that, although I think you would want to

988
00:42:14,700 --> 00:42:14,900
do that.

989
00:42:14,900 --> 00:42:17,900
So you could control, what was out there and make it look reasonable

990
00:42:18,100 --> 00:42:21,400
is, you could also make it so that when you get, when you find that

991
00:42:21,400 --> 00:42:24,300
there's nothing there, when you get to a place where there isn't

992
00:42:24,300 --> 00:42:27,400
anything instead of just drawing nothing, you just draw some random

993
00:42:27,400 --> 00:42:29,800
stuff that would fill it in, right, you draw in

994
00:42:30,000 --> 00:42:30,700
Um, fill in stuff.

995
00:42:30,700 --> 00:42:32,100
There you could do that as well.

996
00:42:32,700 --> 00:42:36,400
So yeah, so now we're at the point where we've kind of got, you know,

997
00:42:36,500 --> 00:42:37,300
our tile map stuff.

998
00:42:37,300 --> 00:42:38,600
Seems to be working properly.

999
00:42:39,900 --> 00:42:42,300
Yeah, everything seems to be going relatively smoothly.

1000
00:42:42,800 --> 00:42:44,700
No, real, no real issues so far.

1001
00:42:44,900 --> 00:42:49,400
And this is already kind of a fairly large map to walk through by my

1002
00:42:49,400 --> 00:42:49,900
goodness.

1003
00:42:50,400 --> 00:42:53,100
It takes a long time to get through 100 screens.

1004
00:42:54,900 --> 00:42:55,300
Oh,

1005
00:42:57,100 --> 00:42:57,900
My goodness.

1006
00:42:59,500 --> 00:43:02,600
Yeah, that is taking that is taking a while.

1007
00:43:03,800 --> 00:43:05,200
Oh, all right.

1008
00:43:05,300 --> 00:43:06,500
I'll stop walking through the world.

1009
00:43:06,500 --> 00:43:06,900
Now.

1010
00:43:08,500 --> 00:43:10,100
I will stop walking through the world.

1011
00:43:10,100 --> 00:43:14,500
Now this, you know, it kind of reminds me that our test code here.

1012
00:43:14,500 --> 00:43:16,400
Kind of reminds me of the old Adventure.

1013
00:43:16,400 --> 00:43:17,900
I don't know if you've ever seen that.

1014
00:43:19,000 --> 00:43:23,000
There's like, this old Atari 2600 game called adventure and if you've

1015
00:43:23,000 --> 00:43:26,400
ever seen it, but it reminds me of that because basically, like this

1016
00:43:26,400 --> 00:43:26,700
test,

1017
00:43:26,900 --> 00:43:27,700
Fix that we're doing here.

1018
00:43:27,700 --> 00:43:30,600
We're we're just trying to show that our tiles are working and looking

1019
00:43:30,600 --> 00:43:35,100
at things is what the actual shipping graphics on the old Atari 2600

1020
00:43:35,100 --> 00:43:36,100
games looked like?

1021
00:43:36,500 --> 00:43:40,000
So if you actually go look back at Adventure, it looks a lot like this

1022
00:43:40,000 --> 00:43:41,500
only it didn't have smooth scrolling.

1023
00:43:41,500 --> 00:43:42,300
It, couldn't scroll.

1024
00:43:43,800 --> 00:43:47,100
So it once we actually lock the camera, then it would literally look

1025
00:43:47,300 --> 00:43:48,200
just like this.

1026
00:43:48,200 --> 00:43:51,400
It was kind of crazy, but that's what games looked like back then.

1027
00:43:51,400 --> 00:43:52,400
And that was a very popular.

1028
00:43:52,400 --> 00:43:56,400
That was a famous game Adventure on the target 2600 ship with Graphics

1029
00:43:56,400 --> 00:43:56,700
that look

1030
00:43:56,800 --> 00:44:00,100
Like this, if you can imagine that for those of you who weren't there

1031
00:44:00,100 --> 00:44:02,900
at the time, I suppose, that's probably pretty surprising, but that

1032
00:44:02,900 --> 00:44:04,700
was the truth and we loved it.

1033
00:44:04,800 --> 00:44:06,300
I mean I played the heck out of that game.

1034
00:44:07,100 --> 00:44:08,100
I killed all the dragons.

1035
00:44:08,100 --> 00:44:09,400
I found the black dot.

1036
00:44:10,200 --> 00:44:10,600
Yeah.

1037
00:44:10,900 --> 00:44:11,900
What can you what can you do?

1038
00:44:12,600 --> 00:44:13,300
So anyway?

1039
00:44:14,600 --> 00:44:18,500
We're pretty much done with our tile map stuff now, so if we kind of

1040
00:44:18,500 --> 00:44:20,400
go back here and take a look at how that's working.

1041
00:44:20,600 --> 00:44:22,500
Hopefully everyone understands roughly.

1042
00:44:22,500 --> 00:44:23,000
What we did.

1043
00:44:23,000 --> 00:44:26,800
We just have a very simple thing here called tile map.

1044
00:44:27,000 --> 00:44:29,500
You can Define it to be sort of however, size.

1045
00:44:29,500 --> 00:44:30,200
However you want.

1046
00:44:30,200 --> 00:44:33,400
Now, one thing I will point out is that this is actually a little bit

1047
00:44:33,600 --> 00:44:37,600
inappropriate this tile size in pixels, and M, 2 pixels thing.

1048
00:44:37,800 --> 00:44:40,400
I'm pretty sure we don't want that anymore because the tile map knows

1049
00:44:40,400 --> 00:44:42,700
nothing about pixels and probably just doesn't want to.

1050
00:44:43,000 --> 00:44:44,300
So we probably want to do is get rid.

1051
00:44:44,400 --> 00:44:49,300
That and push that over here for now, basically into something that

1052
00:44:49,300 --> 00:44:53,600
sort of gets initialized as a separate piece, you know, like this

1053
00:44:53,600 --> 00:44:55,800
because that's that's just not part of the tile map.

1054
00:44:55,800 --> 00:44:56,600
That's not a relevant thing.

1055
00:44:56,600 --> 00:44:59,700
And so what I was thinking is maybe we just go ahead.

1056
00:45:00,000 --> 00:45:04,600
They that the the tile side and pixels is something that sort of

1057
00:45:04,600 --> 00:45:05,600
exists in the renderer.

1058
00:45:05,600 --> 00:45:06,900
It's a renderer concept.

1059
00:45:07,000 --> 00:45:08,500
It's not something that exists in the tilemap.

1060
00:45:08,500 --> 00:45:11,300
Just so everyone knows that using the tile map.

1061
00:45:11,300 --> 00:45:13,700
That that's not a thing in there.

1062
00:45:13,700 --> 00:45:14,400
That makes sense.

1063
00:45:14,600 --> 00:45:16,500
All of these are sort of things that are

1064
00:45:18,200 --> 00:45:18,700
Excuse me.

1065
00:45:20,000 --> 00:45:20,800
See here.

1066
00:45:24,000 --> 00:45:35,600
Tilemap Undeclared that we go and then this is actually the tile map,

1067
00:45:36,000 --> 00:45:41,200
so that's just so basically I've just pulled those out.

1068
00:45:42,600 --> 00:45:46,500
Right, and I'm going to make tile side and pixels, be something.

1069
00:45:46,500 --> 00:45:47,800
That's just an ocean in the renderer.

1070
00:45:47,800 --> 00:45:51,600
So once there's a renderer will think about where that needs to live.

1071
00:45:51,700 --> 00:45:56,900
But for now, I just kind of want to get rid of that idea entirely from

1072
00:45:56,900 --> 00:45:59,600
the tile map because it's really just not aspect of the tile map.

1073
00:45:59,600 --> 00:46:01,500
Our tile map doesn't care about pixels.

1074
00:46:01,600 --> 00:46:04,200
We just did all the work to make sure that it doesn't care about

1075
00:46:04,200 --> 00:46:04,600
pixels.

1076
00:46:04,800 --> 00:46:08,600
And so there's no point in its storing that as if it did care, it

1077
00:46:08,600 --> 00:46:10,300
should just not be an aspect of that.

1078
00:46:10,300 --> 00:46:11,400
So we'll pull that out and that

1079
00:46:11,600 --> 00:46:13,500
We're back to where we were.

1080
00:46:13,700 --> 00:46:17,800
Okay, so hopefully that's clear to everyone what we did.

1081
00:46:17,800 --> 00:46:18,000
Now.

1082
00:46:18,000 --> 00:46:19,600
We have a virtualized tile store.

1083
00:46:20,200 --> 00:46:23,800
It's the thing that we haven't done yet so I can get rid of this now

1084
00:46:23,800 --> 00:46:25,500
because we have done beginner sparseness.

1085
00:46:26,000 --> 00:46:29,200
But basically we want to sort of have another to do in here which is

1086
00:46:29,400 --> 00:46:34,500
real sparseness, which is basically to say that we still are storing

1087
00:46:34,500 --> 00:46:35,400
an array.

1088
00:46:35,600 --> 00:46:37,500
We're storing array of pointers to tiles.

1089
00:46:37,700 --> 00:46:41,100
So however, big our world is exit with them.

1090
00:46:41,500 --> 00:46:42,800
Height-wise, right?

1091
00:46:43,500 --> 00:46:44,900
You can kind of think of it.

1092
00:46:44,900 --> 00:46:45,900
Where's my drawing?

1093
00:46:46,100 --> 00:46:47,300
Where's the awesome drawings?

1094
00:46:47,300 --> 00:46:47,500
I do.

1095
00:46:47,500 --> 00:46:47,700
Okay.

1096
00:46:47,700 --> 00:46:48,200
There we go.

1097
00:46:49,400 --> 00:46:51,100
So we have our world, right?

1098
00:46:51,100 --> 00:46:53,500
It's 4 billion tiles by four billion tiles.

1099
00:46:53,800 --> 00:46:57,000
And we know that right now, essentially just randomly.

1100
00:46:57,000 --> 00:47:00,100
I set it to 16 by 16 chunks, right?

1101
00:47:00,300 --> 00:47:04,200
So they're we're doing these, so one little section of the world when

1102
00:47:04,200 --> 00:47:10,100
we store it Maps out to a 16 by 16, but basically what we've done is

1103
00:47:10,100 --> 00:47:13,000
we've said that however much part of the world, but right now we're

1104
00:47:13,000 --> 00:47:15,200
just talking about this part of the world is all we made.

1105
00:47:15,500 --> 00:47:19,000
We're doing 128 of these two of these

1106
00:47:19,200 --> 00:47:24,700
Chunks, right, by 128 of them, is all we could possibly store because

1107
00:47:24,700 --> 00:47:28,800
right off the bat, we are saying that this array.

1108
00:47:28,800 --> 00:47:34,500
The tile chunks array were only allocating that to be 128 by 128.

1109
00:47:34,500 --> 00:47:35,100
Right?

1110
00:47:35,200 --> 00:47:38,700
So it's an array of 128 by 128 pointers.

1111
00:47:38,900 --> 00:47:43,700
So we essentially have still a rectangular array, but we've just saved

1112
00:47:43,700 --> 00:47:46,800
a lot of space because we don't store, we just store a zero in there,

1113
00:47:46,800 --> 00:47:49,000
if there's nothing and then we store the pointer.

1114
00:47:49,100 --> 00:47:51,100
Or if there actually is something.

1115
00:47:51,400 --> 00:47:55,000
And, of course, that's a pretty big savings in terms of the sparseness

1116
00:47:55,300 --> 00:47:59,700
because, if you remember, if a tile is 4, bytes currently.

1117
00:48:00,000 --> 00:48:03,200
And a 16 by 16 of those is going to be 1 K.

1118
00:48:03,400 --> 00:48:05,800
So storing just eight bytes of a pointer.

1119
00:48:05,800 --> 00:48:08,400
Instead of 1 K is obviously a big savings.

1120
00:48:10,200 --> 00:48:12,800
Well, you know, it's a x divided by 1024.

1121
00:48:13,500 --> 00:48:15,800
It's it's less than 1% size.

1122
00:48:16,000 --> 00:48:17,200
So that's pretty great.

1123
00:48:17,300 --> 00:48:21,700
But we'd want to be even more sparse than that if we can because even

1124
00:48:21,700 --> 00:48:24,300
if we were going if you're going to try and store a whole world's

1125
00:48:24,300 --> 00:48:27,100
worth of that that just would be still pretty onerous.

1126
00:48:27,100 --> 00:48:29,100
So we're going to want to probably do.

1127
00:48:30,000 --> 00:48:30,900
Real sparseness.

1128
00:48:31,000 --> 00:48:37,700
So anywhere in the world can be represented without the giant pointer

1129
00:48:37,700 --> 00:48:38,200
array.

1130
00:48:40,900 --> 00:48:42,800
That's something that we're probably going to want to do just as an

1131
00:48:42,800 --> 00:48:45,700
exercise because there are sparse lookups that we can do that.

1132
00:48:45,700 --> 00:48:47,900
Will not be doing it that way.

1133
00:48:48,400 --> 00:48:50,200
So let's do one more thing to our town map.

1134
00:48:50,200 --> 00:48:52,200
Now, I think we could probably handle it.

1135
00:48:52,500 --> 00:48:54,000
Not particularly difficult.

1136
00:48:54,000 --> 00:48:56,400
I suspect, which is that we'd like to get Z in there.

1137
00:48:56,500 --> 00:49:00,500
So maybe we'll add the ability to kind of go up and down, if that

1138
00:49:00,500 --> 00:49:01,100
makes sense.

1139
00:49:01,600 --> 00:49:05,000
So, maybe we'll go ahead and say that we're going to have two levels

1140
00:49:05,000 --> 00:49:06,600
of up and down for the moment.

1141
00:49:06,900 --> 00:49:07,100
Right?

1142
00:49:07,100 --> 00:49:09,600
If that makes sense, will have a tile champ count.

1143
00:49:10,600 --> 00:49:12,300
So we'll just have like an up and a down.

1144
00:49:13,600 --> 00:49:14,700
I don't know why I'm doing this.

1145
00:49:14,700 --> 00:49:18,200
But I feel like we kind of need to have an up and down at least in

1146
00:49:18,200 --> 00:49:19,000
there to begin with.

1147
00:49:19,000 --> 00:49:20,600
Once we have a better sparseness.

1148
00:49:20,800 --> 00:49:22,200
This will become kind of a non-issue.

1149
00:49:22,200 --> 00:49:24,600
But for now, we'll have to do the array that way.

1150
00:49:25,400 --> 00:49:28,500
So we'll have a tile chunk count Z as well.

1151
00:49:28,500 --> 00:49:32,400
And then when we have our absolute tile indexes will have an absolute

1152
00:49:32,400 --> 00:49:32,800
tiles.

1153
00:49:32,800 --> 00:49:34,700
E also, right?

1154
00:49:37,900 --> 00:49:39,600
Now Z is a little bit different.

1155
00:49:40,700 --> 00:49:43,100
It's a little bit different from RX and Ry.

1156
00:49:43,100 --> 00:49:46,400
Because you can't see more than one of it at a time, really.

1157
00:49:47,600 --> 00:49:49,100
Maybe you could see two levels of it.

1158
00:49:49,100 --> 00:49:51,500
Sometimes, depending on how you want to do things.

1159
00:49:52,000 --> 00:49:57,200
But in general, you know, Z is not the same X and Y, you see big

1160
00:49:57,200 --> 00:50:01,100
chunks of it but Z is usually like these whole planes of play that you

1161
00:50:01,100 --> 00:50:04,700
go up to or down to and you're on a totally separate kind of level.

1162
00:50:04,700 --> 00:50:07,400
And that's the traditional way, that games work for whatever reason.

1163
00:50:08,600 --> 00:50:12,000
So it's kind of handled slightly, you know, just just a little bit

1164
00:50:12,300 --> 00:50:13,600
anyway differently.

1165
00:50:13,600 --> 00:50:17,200
And so, for example, in the tile chunk position, you wouldn't have a z

1166
00:50:17,200 --> 00:50:18,100
at all really.

1167
00:50:19,200 --> 00:50:20,400
Well, I guess you'd have a towel chunk.

1168
00:50:20,400 --> 00:50:24,600
See you would have that, but you wouldn't have a tile Z because there

1169
00:50:24,600 --> 00:50:28,200
is there's inside a chunk there just be one slice, right?

1170
00:50:28,400 --> 00:50:30,900
You'd never actually store a voxel.

1171
00:50:30,900 --> 00:50:33,300
You wouldn't store like a volume for it or anything, right?

1172
00:50:34,500 --> 00:50:37,400
So what I want to do is go ahead and add that extra layer in.

1173
00:50:37,800 --> 00:50:41,900
So cure when it does this, we're actually going to going to store one

1174
00:50:41,900 --> 00:50:48,100
more layer tile chunk count Z that will basically just have, you know,

1175
00:50:48,900 --> 00:50:53,100
sort of that secondary plane if you will, so then in here when we were

1176
00:50:53,100 --> 00:50:55,400
actually doing our lookup, so we have to kind of start to think about

1177
00:50:55,400 --> 00:50:55,900
that.

1178
00:50:56,400 --> 00:50:59,000
So when we set our tile values, we're going to do these get chunk

1179
00:50:59,000 --> 00:50:59,800
position for us.

1180
00:51:00,400 --> 00:51:02,200
And that get chunk position for us.

1181
00:51:02,500 --> 00:51:04,700
When we do our tile value stuff.

1182
00:51:04,700 --> 00:51:08,300
We're now going to always be taking one more value, which is the app

1183
00:51:08,300 --> 00:51:09,800
tiles e, right?

1184
00:51:10,000 --> 00:51:12,900
And and that's going to come in here and that's going to get passed

1185
00:51:12,900 --> 00:51:14,500
through to everything.

1186
00:51:14,500 --> 00:51:15,700
So we're going to do that.

1187
00:51:16,800 --> 00:51:21,700
That's really all we need to do here.

1188
00:51:21,700 --> 00:51:25,100
I believe we just do these sort of things where we do.

1189
00:51:25,100 --> 00:51:29,600
Our get tell chunk, get tile, chunk takes the extra Z.

1190
00:51:29,600 --> 00:51:31,600
Nothing particularly odd.

1191
00:51:31,600 --> 00:51:31,800
There.

1192
00:51:31,800 --> 00:51:35,100
We leave everything else, the same?

1193
00:51:35,100 --> 00:51:36,300
Again.

1194
00:51:36,300 --> 00:51:42,000
This tab style Z gets passed in here and can pose ABS taozi those get

1195
00:51:42,000 --> 00:51:45,100
passed through, then we're doing our get chunk position.

1196
00:51:45,100 --> 00:51:46,500
It basically just gets

1197
00:51:46,900 --> 00:51:47,500
Right through.

1198
00:51:47,600 --> 00:51:50,500
It doesn't actually it's not a virtual address, like the other things

1199
00:51:50,500 --> 00:51:50,800
are.

1200
00:51:50,800 --> 00:51:52,300
It's just the Z plane.

1201
00:51:52,500 --> 00:51:53,500
It's just where we are.

1202
00:51:53,500 --> 00:51:56,300
Accessing in the Z plane, right?

1203
00:51:56,600 --> 00:51:57,500
So, ABS tile.

1204
00:51:57,500 --> 00:51:58,300
Z, is there.

1205
00:51:58,600 --> 00:51:59,300
There we go.

1206
00:52:00,200 --> 00:52:04,900
And when we're setting the tile values, again, same thing when we set

1207
00:52:05,300 --> 00:52:11,800
the tile X know that, we're going to pass those through test tiles e.

1208
00:52:12,500 --> 00:52:15,300
And when we get the tile values again, going to pass them through.

1209
00:52:16,800 --> 00:52:18,800
Exactly the same way that's taozi.

1210
00:52:19,200 --> 00:52:20,000
Nothing again.

1211
00:52:20,200 --> 00:52:23,900
Just really just adding this extra coordinate on, it doesn't really

1212
00:52:24,300 --> 00:52:26,100
require almost any work on our part.

1213
00:52:27,000 --> 00:52:28,800
So tile X and tile.

1214
00:52:28,800 --> 00:52:31,600
Why for setting tile values on checked again, we don't actually need

1215
00:52:31,600 --> 00:52:33,500
them here because we're only inside the tile map.

1216
00:52:33,500 --> 00:52:34,900
Once we get down to this point.

1217
00:52:36,800 --> 00:52:39,100
Same thing here, get tile value and checked.

1218
00:52:39,400 --> 00:52:42,000
We're don't need Z's once we're at that point.

1219
00:52:42,000 --> 00:52:46,700
So really the only time we actually need the Z is, is

1220
00:52:46,900 --> 00:52:49,900
We are actually dealing with stuff.

1221
00:52:50,200 --> 00:52:52,700
That is actually getting a tile chunk itself.

1222
00:52:52,700 --> 00:52:57,200
So getting the tile chunks that actually requires a z now, and that's

1223
00:52:57,200 --> 00:53:00,600
also going to have to be bounced check, because if you try to get

1224
00:53:00,600 --> 00:53:06,500
something outside of the legal range map, chunk count Z, then we're

1225
00:53:06,500 --> 00:53:08,000
going to prevent you from doing that.

1226
00:53:08,100 --> 00:53:11,900
And now we just need one more access or which basically allows us to

1227
00:53:11,900 --> 00:53:13,200
pack those guys in there.

1228
00:53:13,300 --> 00:53:16,700
So again, just like we did before you can kind of see

1229
00:53:16,800 --> 00:53:18,300
See, the universal access pattern.

1230
00:53:18,300 --> 00:53:20,400
I talked about this on a previous stream.

1231
00:53:20,800 --> 00:53:24,700
Basically, you have the X, which is the, the one that adds just one as

1232
00:53:24,700 --> 00:53:26,100
you go inside our memory.

1233
00:53:26,800 --> 00:53:29,600
Because again, I don't know, if you remember the diagram, I drew a

1234
00:53:29,600 --> 00:53:32,700
sort of that universal access pattern memory is One D.

1235
00:53:32,700 --> 00:53:34,800
So, we just have a big old line, right?

1236
00:53:34,800 --> 00:53:36,000
Oh my God, that's the worst lie.

1237
00:53:36,000 --> 00:53:36,300
Never.

1238
00:53:36,300 --> 00:53:37,500
Let's try something slightly.

1239
00:53:37,800 --> 00:53:38,700
Oh my God.

1240
00:53:38,800 --> 00:53:40,000
I don't even know what that's supposed to be.

1241
00:53:40,100 --> 00:53:41,200
So this is memory.

1242
00:53:41,200 --> 00:53:42,600
It's one-dimensional, right?

1243
00:53:42,600 --> 00:53:44,400
It just has one index into it.

1244
00:53:44,600 --> 00:53:46,000
But now, we've got something that is

1245
00:53:46,800 --> 00:53:51,200
All right, we've got essentially a cube that restoring here, right?

1246
00:53:51,300 --> 00:53:53,800
We've got a cube and so we've got an X.

1247
00:53:54,200 --> 00:53:58,100
We've got a y, and we've got a z, and we're trying to store this cube

1248
00:53:58,100 --> 00:53:58,700
in here.

1249
00:53:58,800 --> 00:53:59,800
So, the way we're doing it is

1250
00:54:00,000 --> 00:54:01,100
Slicing it like this.

1251
00:54:01,400 --> 00:54:03,000
First, we go along X.

1252
00:54:03,200 --> 00:54:05,400
So, this is X, right?

1253
00:54:05,400 --> 00:54:08,200
We pack X, we pack that line of X into their.

1254
00:54:08,700 --> 00:54:13,200
Then we go up 1 in y, and we pack the next row of X in there.

1255
00:54:13,200 --> 00:54:17,400
So, now here's another X, but it's the X that's one up in y, right?

1256
00:54:17,600 --> 00:54:24,200
Xxxxx when we get to, the end of all of these, X's we go up one in Z

1257
00:54:24,300 --> 00:54:29,100
and then we pack another row of x's by Y and then by Z again, right?

1258
00:54:29,200 --> 00:54:29,900
So what that means?

1259
00:54:30,000 --> 00:54:33,600
Is is every time we go up 1 and X, we are only moving one forward in

1260
00:54:33,600 --> 00:54:34,000
memory.

1261
00:54:34,100 --> 00:54:38,900
But if we go up 1 and Z, we're moving one whole X count, one whole

1262
00:54:38,900 --> 00:54:40,600
length of X upwards.

1263
00:54:40,800 --> 00:54:45,300
And if we go up in Z, removing one whole giant planes were so removing

1264
00:54:45,500 --> 00:54:48,900
wise number of x's forwards, right?

1265
00:54:49,600 --> 00:54:51,800
So, that's exactly what this math is here.

1266
00:54:51,800 --> 00:54:57,900
It's saying that the Z is going to be the chunk count.

1267
00:54:57,900 --> 00:54:59,400
Y times a chunk context.

1268
00:54:59,400 --> 00:54:59,800
That's how far.

1269
00:55:00,000 --> 00:55:03,100
Even Z how far you move in, why is just a chunk context?

1270
00:55:03,100 --> 00:55:05,500
And how much fire moving X is just the X, right?

1271
00:55:05,500 --> 00:55:07,500
And that's that packing that packs.

1272
00:55:07,600 --> 00:55:11,500
A three-dimensional thing into a two-dimensional thing and that is

1273
00:55:11,500 --> 00:55:13,500
exactly what we are doing there.

1274
00:55:13,700 --> 00:55:15,700
Okay, so,

1275
00:55:17,200 --> 00:55:20,600
Let's take a look here, get tile value unchecked.

1276
00:55:20,800 --> 00:55:22,000
Once we already have a touch hunk.

1277
00:55:22,000 --> 00:55:23,000
I don't know why I did that.

1278
00:55:23,000 --> 00:55:24,100
That was not necessary.

1279
00:55:24,500 --> 00:55:27,500
Sceptile chunk, those don't eat it because they've already got the

1280
00:55:27,500 --> 00:55:28,100
chunk.

1281
00:55:28,100 --> 00:55:29,100
Once you've got the chunk.

1282
00:55:29,100 --> 00:55:30,200
You don't need Z.

1283
00:55:30,800 --> 00:55:31,700
So, there we go.

1284
00:55:32,000 --> 00:55:35,400
And now we have we're at our five minute warning, of course, so it's

1285
00:55:35,400 --> 00:55:38,500
good that we're kind of wrapping this up here, our ABS tile Z.

1286
00:55:39,200 --> 00:55:43,200
So we'll get our tell value got a real ex Rel.

1287
00:55:43,200 --> 00:55:46,100
Why, what is the problem?

1288
00:55:46,700 --> 00:55:46,900
Get?

1289
00:55:47,100 --> 00:55:48,100
Tyler value.

1290
00:55:50,200 --> 00:55:53,400
That's supposed to be not too.

1291
00:55:53,400 --> 00:55:53,700
Yeah.

1292
00:55:53,700 --> 00:55:55,100
Why does that take a test LZ?

1293
00:55:55,100 --> 00:55:55,800
I have no idea.

1294
00:55:55,800 --> 00:55:58,700
This was just that was just me being super sloppy, when it's anything

1295
00:55:58,700 --> 00:56:00,900
that already has the chunk, doesn't need the Z.

1296
00:56:00,900 --> 00:56:02,500
So I have no idea why I was adding those.

1297
00:56:02,500 --> 00:56:03,300
That was just dumb.

1298
00:56:04,100 --> 00:56:08,500
And so now, we're always gonna set, basically, our ABS tiles E20 at

1299
00:56:08,500 --> 00:56:08,900
the moment.

1300
00:56:08,900 --> 00:56:13,300
So that we can reproduce what we had before that makes sense and then

1301
00:56:13,300 --> 00:56:14,400
get tell value.

1302
00:56:15,600 --> 00:56:18,200
Get tell Val, you know, overloaded function.

1303
00:56:18,200 --> 00:56:19,000
Yeah, that's right.

1304
00:56:19,100 --> 00:56:23,300
So, we need to draw whatever our players Z is at the moment.

1305
00:56:23,800 --> 00:56:24,800
So there we go.

1306
00:56:24,800 --> 00:56:29,600
ABS to XY and z and now we should hopefully, unless I made a mistake,

1307
00:56:29,900 --> 00:56:32,900
be exactly where we were before, but now we have the ability to go up

1308
00:56:32,900 --> 00:56:35,100
and down if we would like to.

1309
00:56:35,500 --> 00:56:36,900
So we can go ahead and do that.

1310
00:56:36,900 --> 00:56:42,500
If we want, we can create essentially something if we want to, that

1311
00:56:42,500 --> 00:56:44,700
would be a stairwell, right?

1312
00:56:45,400 --> 00:56:49,700
And so I'm going to again go ahead and just continue the madness here.

1313
00:56:49,900 --> 00:56:53,100
I don't know if a lot of time to quite finish this, but what I will do

1314
00:56:53,100 --> 00:56:59,800
is I will say that if we decide on this stuff here when we

1315
00:57:00,000 --> 00:57:00,800
A random Choice.

1316
00:57:00,800 --> 00:57:02,600
Let's do a random Choice out of three.

1317
00:57:03,100 --> 00:57:10,700
If the random Choice equals 2, then if the random Choice equals 1,

1318
00:57:10,900 --> 00:57:11,900
we'll do it like this.

1319
00:57:12,500 --> 00:57:13,700
And then down here.

1320
00:57:13,800 --> 00:57:19,300
I'll do the same thing if they're in Choice equals to or if if the

1321
00:57:19,300 --> 00:57:21,700
random Choice equals 1.

1322
00:57:23,300 --> 00:57:24,000
Like that.

1323
00:57:24,100 --> 00:57:30,000
And so what I'm going to do is say that if the random Choice equals to

1324
00:57:30,000 --> 00:57:31,400
the ab style Z.

1325
00:57:32,500 --> 00:57:36,600
Basically if AB style Z equals 0, then I'm going to set ABS, tau is

1326
00:57:36,600 --> 00:57:40,000
equal to 1 so this will be a little go up from there.

1327
00:57:41,100 --> 00:57:46,000
And otherwise if AB style Z was already equal to 1, then it will equal

1328
00:57:46,000 --> 00:57:46,400
to 0.

1329
00:57:46,400 --> 00:57:48,400
So I'll just toggle whichever one.

1330
00:57:48,400 --> 00:57:50,900
It is on that random choice to write.

1331
00:57:51,500 --> 00:57:52,500
And so up here.

1332
00:57:52,500 --> 00:57:53,000
I will do the same.

1333
00:57:53,100 --> 00:57:53,400
Thing.

1334
00:57:53,400 --> 00:57:57,700
I'll say if random choice is to, then we'll sort of take a look.

1335
00:57:58,100 --> 00:57:59,100
This will be going up.

1336
00:57:59,100 --> 00:58:03,400
This is this is going to have a door up sort of thing.

1337
00:58:03,800 --> 00:58:07,500
And this is going to have a door down if that makes sense.

1338
00:58:08,100 --> 00:58:08,500
Yeah.

1339
00:58:08,600 --> 00:58:14,200
So whichever one it was that would be lets see, your up this false and

1340
00:58:14,200 --> 00:58:17,300
door down equals false.

1341
00:58:17,600 --> 00:58:21,700
And so then the same thing happens, here that happened before door.

1342
00:58:23,000 --> 00:58:26,800
Up equals door down, or I should actually say that.

1343
00:58:26,800 --> 00:58:31,200
What happens here is is, we don't actually know which order these kind

1344
00:58:31,200 --> 00:58:31,900
of have to go in.

1345
00:58:31,900 --> 00:58:34,600
It was that I'd make some kind of error with my indentation.

1346
00:58:34,900 --> 00:58:35,700
I feel like I did.

1347
00:58:35,700 --> 00:58:36,500
It's telling me that I did.

1348
00:58:36,500 --> 00:58:37,200
Yeah, there it is.

1349
00:58:40,000 --> 00:58:43,300
And I need to kind of remember what the ABS tells you is for the

1350
00:58:43,300 --> 00:58:46,100
player Hazard for that thing as we go through.

1351
00:58:46,900 --> 00:58:50,600
So, what I need to do here is say, basically if there was a door up,

1352
00:58:51,700 --> 00:58:55,000
Right else not.

1353
00:58:55,000 --> 00:58:57,900
So what I need to do here is say if there was a door up, then there's

1354
00:58:57,900 --> 00:59:00,800
going to be a door down next time and not a door up.

1355
00:59:01,400 --> 00:59:08,200
And if there was a door down right then there's going to be a door up

1356
00:59:08,200 --> 00:59:08,900
next time.

1357
00:59:09,700 --> 00:59:12,200
This that.

1358
00:59:12,700 --> 00:59:17,400
And finally, if there was neither been, there's neither, right?

1359
00:59:18,700 --> 00:59:20,200
So I believe that would work.

1360
00:59:20,500 --> 00:59:21,200
I'm not sure.

1361
00:59:21,900 --> 00:59:25,100
But now what we should see is I should be able to get somewhere and

1362
00:59:25,100 --> 00:59:26,800
there shouldn't be an exit to the room.

1363
00:59:26,900 --> 00:59:27,400
Yeah.

1364
00:59:27,700 --> 00:59:29,600
Well, actually, I don't know why that's there.

1365
00:59:29,900 --> 00:59:32,600
That's a bit odd what's going on there?

1366
00:59:34,000 --> 00:59:35,200
What did I, what did I make?

1367
00:59:35,200 --> 00:59:39,800
I made, I've made an error in the code.

1368
00:59:39,800 --> 00:59:40,800
We're basically at the Q and A.

1369
00:59:40,800 --> 00:59:43,500
So I'm going to stop playing with this for a minute, but I want to see

1370
00:59:43,500 --> 00:59:44,700
what my error is.

1371
00:59:45,200 --> 00:59:53,000
Random Choice equals one screen, X screen why random Choice equals one

1372
00:59:53,000 --> 00:59:59,400
screen, X screen, y AB, Stiles, equals 0 your

1373
01:00:00,000 --> 01:00:02,200
In that case, door up door down.

1374
01:00:03,500 --> 01:00:07,000
So why did we actually get a different thing there?

1375
01:00:07,800 --> 01:00:08,900
I don't actually know.

1376
01:00:08,900 --> 01:00:13,500
Oh, well, it could be, no, we should never have that case happen.

1377
01:00:13,500 --> 01:00:17,100
We should never have a case where there's a door, right?

1378
01:00:17,100 --> 01:00:20,300
And then we don't go right.

1379
01:00:20,400 --> 01:00:20,900
Am I?

1380
01:00:20,900 --> 01:00:23,000
You know what I'm saying about that.

1381
01:00:23,000 --> 01:00:24,600
So that's just kind of busted.

1382
01:00:24,700 --> 01:00:25,800
Why did that happen?

1383
01:00:26,400 --> 01:00:27,700
Let's, let's look at that again, which.

1384
01:00:27,700 --> 01:00:29,800
Which, which I want to take a sorry about that.

1385
01:00:30,000 --> 01:00:31,900
That I want to actually see why that's wrong.

1386
01:00:33,200 --> 01:00:36,400
Like why we can't get there if that makes sense.

1387
01:00:38,600 --> 01:00:39,400
You know, I'm saying to you.

1388
01:00:40,000 --> 01:00:42,600
So that was just the second room, right?

1389
01:00:42,600 --> 01:00:43,700
That was the second room.

1390
01:00:44,100 --> 01:00:47,100
So let's take a look at what happens in the debugger.

1391
01:00:47,400 --> 01:00:48,000
There we go.

1392
01:00:49,400 --> 01:00:51,700
Probably just something that I spam down because I was going too

1393
01:00:51,700 --> 01:00:52,100
quickly.

1394
01:00:52,100 --> 01:00:53,900
But so here we are.

1395
01:00:54,600 --> 01:00:57,300
We're going to come in on our second room.

1396
01:00:57,700 --> 01:00:58,300
Right?

1397
01:00:58,500 --> 01:01:00,900
Our screen index is 1 on the second room.

1398
01:01:00,900 --> 01:01:02,900
We'd pick the random Choice, the random choice is to.

1399
01:01:02,900 --> 01:01:07,800
So we're going to have our door down equal to true and our other

1400
01:01:07,800 --> 01:01:08,200
doors.

1401
01:01:08,400 --> 01:01:10,200
Should not have any other doors, correct?

1402
01:01:10,300 --> 01:01:12,000
What's our door left door?

1403
01:01:12,000 --> 01:01:12,500
Right?

1404
01:01:13,300 --> 01:01:15,700
Door, top door, bottom.

1405
01:01:16,900 --> 01:01:19,900
Drawer down up or down.

1406
01:01:20,200 --> 01:01:20,700
Okay.

1407
01:01:21,100 --> 01:01:23,700
So basically there shouldn't have been a door, right?

1408
01:01:24,000 --> 01:01:28,800
So what happened is our door, write code, broken or something.

1409
01:01:29,300 --> 01:01:30,000
Do you know what I'm saying?

1410
01:01:30,000 --> 01:01:31,400
Like, why did we ever?

1411
01:01:31,700 --> 01:01:36,700
Why did we have that happen on the thing?

1412
01:01:37,300 --> 01:01:38,100
We should always.

1413
01:01:38,300 --> 01:01:42,000
Be having walls basically everywhere.

1414
01:01:42,500 --> 01:01:49,600
So when we get there, let's I guess go ahead and and see if we can get

1415
01:01:49,600 --> 01:01:54,800
to basically the middle of things so tile.

1416
01:01:54,800 --> 01:01:56,500
Why what is tiles for height?

1417
01:01:56,500 --> 01:02:01,300
Divided by 2 tiles for height over 2 is 4.

1418
01:02:01,700 --> 01:02:05,200
So, let's go to 4 and see why we get that door there.

1419
01:02:05,600 --> 01:02:06,100
Okay.

1420
01:02:06,400 --> 01:02:07,500
Now we're at four.

1421
01:02:07,700 --> 01:02:08,200
So we come through.

1422
01:02:08,400 --> 01:02:11,100
Here, let's take a look at what happens.

1423
01:02:11,700 --> 01:02:21,400
We say the tile value should be too because the tile x is 0 and we

1424
01:02:21,400 --> 01:02:23,400
don't have a door left.

1425
01:02:28,100 --> 01:02:29,200
You know, I just realized.

1426
01:02:34,000 --> 01:02:39,100
Why didn't we have a door left set?

1427
01:02:40,100 --> 01:02:40,900
For this guy.

1428
01:02:41,900 --> 01:02:42,700
Do you know what I'm saying?

1429
01:02:44,000 --> 01:02:47,600
Because it should have set door left equal to door, right?

1430
01:02:47,600 --> 01:02:50,100
And the previous room had a door, right?

1431
01:02:50,600 --> 01:02:52,000
Something's busted.

1432
01:02:52,100 --> 01:02:55,400
Oh, that's my awesome.

1433
01:02:55,900 --> 01:02:56,500
Super type.

1434
01:02:56,500 --> 01:02:58,100
Oh, yeah.

1435
01:02:58,100 --> 01:02:59,800
I was trying to set door up.

1436
01:03:00,000 --> 01:03:02,300
Door down equal to false.

1437
01:03:03,200 --> 01:03:04,200
I believe here.

1438
01:03:04,200 --> 01:03:04,400
Oh wait.

1439
01:03:04,400 --> 01:03:04,600
No.

1440
01:03:04,600 --> 01:03:07,600
No, that's, that's the right door, right?

1441
01:03:07,600 --> 01:03:09,100
And or top or supposed to be false.

1442
01:03:09,200 --> 01:03:09,300
Yeah.

1443
01:03:09,300 --> 01:03:10,200
No, that's correct.

1444
01:03:10,500 --> 01:03:11,400
That wasn't a typo.

1445
01:03:11,700 --> 01:03:13,000
So I want to see what happened there.

1446
01:03:13,000 --> 01:03:14,600
Why didn't our door carryover?

1447
01:03:15,000 --> 01:03:18,500
I'm obviously just being dumb today and I apologize for that.

1448
01:03:18,500 --> 01:03:21,200
So we'll use up a little bit of Q&A, but I often go a little bit over

1449
01:03:21,200 --> 01:03:24,700
just because if there's a bug at the end, I don't like to leave a bug

1450
01:03:24,700 --> 01:03:25,000
in there.

1451
01:03:25,000 --> 01:03:26,500
So I'd like to go ahead and find it.

1452
01:03:27,000 --> 01:03:27,900
So, let's see here.

1453
01:03:28,600 --> 01:03:29,600
Random choice.

1454
01:03:30,000 --> 01:03:35,700
Our random choice on screen, index 0, huh are random choice on screen,

1455
01:03:35,700 --> 01:03:40,000
index 0 was actually to have a door up.

1456
01:03:40,100 --> 01:03:42,400
So that means that there should be no doors.

1457
01:03:45,000 --> 01:03:48,000
Oh my God, I know what happened.

1458
01:03:48,500 --> 01:03:52,200
It basically went up and down and over Road itself.

1459
01:03:52,800 --> 01:03:53,500
Oh, man.

1460
01:03:53,700 --> 01:03:54,400
Yeah, that's right.

1461
01:03:54,400 --> 01:03:55,300
I forgot to do.

1462
01:03:55,300 --> 01:03:58,400
If you already went up you can't go down again.

1463
01:03:58,900 --> 01:03:59,700
Ha ha.

1464
01:04:01,000 --> 01:04:04,000
So it basically just went up and down and overwrote the room that was

1465
01:04:04,000 --> 01:04:05,300
previously there before.

1466
01:04:05,600 --> 01:04:06,500
Oh, that's funny.

1467
01:04:07,100 --> 01:04:10,100
That's funny makes perfect sense, but that's funny.

1468
01:04:10,200 --> 01:04:10,400
Okay.

1469
01:04:10,400 --> 01:04:13,000
So basically yeah, what we want to do here is say

1470
01:04:15,900 --> 01:04:23,200
That our random choice is going to basically be yet slightly

1471
01:04:23,200 --> 01:04:23,700
different.

1472
01:04:23,900 --> 01:04:26,800
We're going to say is if door up or door down.

1473
01:04:26,800 --> 01:04:30,900
So if we were previously, if we had previously gone up or down right,

1474
01:04:32,200 --> 01:04:34,600
then we are not going to allow the next move.

1475
01:04:34,700 --> 01:04:36,300
The next move has to be lateral.

1476
01:04:36,700 --> 01:04:40,500
So we're going to eliminate the option for it to ever do.

1477
01:04:40,500 --> 01:04:42,700
What it just did, which is go up and down again.

1478
01:04:42,700 --> 01:04:43,900
Let me see if that makes a little more sense.

1479
01:04:44,400 --> 01:04:46,000
Yeah, okay, so that's much better.

1480
01:04:46,000 --> 01:04:48,000
So now we're locked in a room, right?

1481
01:04:48,000 --> 01:04:49,900
And we need to be able to go up or down.

1482
01:04:50,000 --> 01:04:53,900
And so, really, all I wanted to do, there was just say, like, okay,

1483
01:04:53,900 --> 01:04:56,200
you know, you know, I don't know.

1484
01:04:56,200 --> 01:04:57,500
There's some fixed location.

1485
01:04:57,800 --> 01:05:06,100
So if tile x equals, you know, 6 and tile, y equals 6 or something

1486
01:05:06,100 --> 01:05:09,000
like this, or maybe this is 10 or something like that, right?

1487
01:05:09,400 --> 01:05:11,700
If if we're at that tile or something.

1488
01:05:13,000 --> 01:05:17,600
Then, you know, tile value equals.

1489
01:05:18,100 --> 01:05:18,700
I guess.

1490
01:05:19,700 --> 01:05:22,400
Three, you know, if you're up.

1491
01:05:25,500 --> 01:05:26,900
This is not a particularly good way to do this.

1492
01:05:26,900 --> 01:05:30,100
But if door up is, you know, is set.

1493
01:05:30,100 --> 01:05:31,200
Then it'll be 3.

1494
01:05:31,700 --> 01:05:35,800
And if door down is set then it will be four.

1495
01:05:36,100 --> 01:05:41,800
And then all I was really going to do is say, okay, if you know, if at

1496
01:05:41,800 --> 01:05:45,700
the time that the player moves on to something like this sort of

1497
01:05:45,700 --> 01:05:52,800
thing, if, you know, when the player moves on to it, well, you know, I

1498
01:05:52,800 --> 01:05:54,000
don't really want to do that quite yet.

1499
01:05:54,000 --> 01:05:55,200
So we'll just draw them and we

1500
01:05:55,300 --> 01:05:59,400
Actually, we'll handle will actually handle ladders starting next

1501
01:05:59,400 --> 01:05:59,700
week.

1502
01:06:00,000 --> 01:06:01,600
That'll be, that'll be a good thing to do.

1503
01:06:02,100 --> 01:06:04,400
So, all I want to do now is just make sure we draw them.

1504
01:06:05,400 --> 01:06:12,200
Basically will do if tile ID.

1505
01:06:17,100 --> 01:06:19,100
Use greater than 2.

1506
01:06:19,100 --> 01:06:22,200
We will set that gray level to be that.

1507
01:06:22,500 --> 01:06:25,800
So now we should at least see our our doorway, there.

1508
01:06:25,800 --> 01:06:28,200
It is very exciting.

1509
01:06:28,600 --> 01:06:31,800
But of course, when we step on it, we can't actually go into it

1510
01:06:31,800 --> 01:06:35,200
because it's not a legal place to stand at the moment, but there we

1511
01:06:35,200 --> 01:06:35,500
go.

1512
01:06:35,600 --> 01:06:36,800
So, I'm going to end it there.

1513
01:06:37,400 --> 01:06:41,700
And then tomorrow, well, I guess it'll be Monday will actually

1514
01:06:41,700 --> 01:06:43,500
Implement going up and down just we can do that.

1515
01:06:43,500 --> 01:06:47,000
And then maybe we'll look at storing things sparsely in a slightly

1516
01:06:47,000 --> 01:06:47,100
different.

1517
01:06:47,100 --> 01:06:50,500
Way, I'm not sure so that we can have kind of arbitrary ups and downs

1518
01:06:50,500 --> 01:06:53,100
in our world without having to only have two planes.

1519
01:06:53,100 --> 01:06:54,000
Which is what we have currently.

1520
01:06:54,000 --> 01:06:56,800
All right, now it's time for Q&A.

1521
01:06:56,800 --> 01:07:00,400
So I'm going to go ahead and start the Q&A filter.

1522
01:07:00,400 --> 01:07:07,400
So, please go ahead and preface your questions with q: and I will take

1523
01:07:07,400 --> 01:07:07,900
a look at them.

1524
01:07:07,900 --> 01:07:10,400
Please try to keep them to things that we've programmed so far.

1525
01:07:10,600 --> 01:07:13,600
Let's not talk about stuff that we're going to do in the future or

1526
01:07:13,600 --> 01:07:15,800
other things unrelated to what we're doing with.

1527
01:07:15,800 --> 01:07:17,000
Try to keep it on the code because

1528
01:07:17,100 --> 01:07:18,300
this is the on-topic Q&A.

1529
01:07:18,300 --> 01:07:22,600
If you want to ask questions random, like what do you think about such

1530
01:07:22,600 --> 01:07:24,500
and such a language or those sorts of questions?

1531
01:07:24,700 --> 01:07:27,800
Do those come early to a stream, some time and we do all sorts of

1532
01:07:27,800 --> 01:07:29,800
questions before the stream.

1533
01:07:30,100 --> 01:07:32,900
So that's, you know, come a little bit before the scheduled time 15

1534
01:07:32,900 --> 01:07:33,300
minutes or so.

1535
01:07:33,300 --> 01:07:35,900
If you want to ask those kind of questions, and we will handle those

1536
01:07:35,900 --> 01:07:37,300
questions then.

1537
01:07:43,400 --> 01:07:46,700
Do you want to go over demorgan's laws or k-maps to simplify those

1538
01:07:46,700 --> 01:07:51,700
Boolean Expressions, you know, we can sort of point to them.

1539
01:07:51,700 --> 01:07:54,100
But to be honest, I never do that sort of stuff.

1540
01:07:54,600 --> 01:07:57,800
It's very rare that I actually do that so you can see

1541
01:07:59,900 --> 01:08:02,800
The thing that he's talking about here, if you want to go to

1542
01:08:03,000 --> 01:08:08,600
Wikipedia, basically, there's a set of things that say that a certain

1543
01:08:08,600 --> 01:08:11,500
binary expression is equal to another binary expression.

1544
01:08:11,500 --> 01:08:16,000
So for example, like this is a, you know, not A and B is the same as

1545
01:08:16,000 --> 01:08:17,899
not, a or not B, right.

1546
01:08:17,899 --> 01:08:20,899
They equal the same, they evaluate to the same thing.

1547
01:08:21,700 --> 01:08:27,000
And so, you know, if you have kind of hairy Expressions, such as the

1548
01:08:27,000 --> 01:08:29,100
ones that I was writing, which are kind of crazy.

1549
01:08:29,700 --> 01:08:33,399
Which are these sorts of things here and you want to start trying to

1550
01:08:33,399 --> 01:08:35,100
make these a little more simplistic.

1551
01:08:35,100 --> 01:08:35,700
You can do that.

1552
01:08:35,800 --> 01:08:39,700
I tend rarely to actually do that in practice.

1553
01:08:39,800 --> 01:08:40,800
I almost never do.

1554
01:08:40,800 --> 01:08:44,399
Usually, what I end up doing is pulling things out into simpler.

1555
01:08:44,500 --> 01:08:48,100
I usually let the compiler, do that work for the most part and I pull

1556
01:08:48,100 --> 01:08:50,899
things out into names, like I pull things out.

1557
01:08:50,899 --> 01:08:53,100
What if we were actually writing, if this code was code, we were going

1558
01:08:53,100 --> 01:08:56,000
to keep and not just Tesco where I was kind of just like doing things

1559
01:08:56,000 --> 01:08:56,500
out.

1560
01:08:56,500 --> 01:08:59,300
Typically, what I do is I actually just make boolean's up here.

1561
01:08:59,600 --> 01:08:59,899
A things.

1562
01:09:00,000 --> 01:09:03,899
I am on left side or am on right side and then I go from there because

1563
01:09:03,899 --> 01:09:06,500
typically the compiler will do these sorts of things for you.

1564
01:09:06,700 --> 01:09:09,200
And I don't find that there's a whole lot of reason to actually do

1565
01:09:09,200 --> 01:09:10,100
them myself.

1566
01:09:10,200 --> 01:09:13,899
I tend to try to prefer to make the Expressions as clear as possible

1567
01:09:13,899 --> 01:09:14,899
linguistically.

1568
01:09:15,300 --> 01:09:17,500
And so when I go through and look at something like this and go I want

1569
01:09:17,500 --> 01:09:18,200
to simplify it.

1570
01:09:18,200 --> 01:09:22,000
I tend to focus on the linguistic simplification and not on trying to

1571
01:09:22,000 --> 01:09:25,399
simplify the number of Boolean operations that actually occur.

1572
01:09:25,500 --> 01:09:26,200
That makes sense.

1573
01:09:26,800 --> 01:09:28,899
But if you were interested in that kind of thing, it is a good thing

1574
01:09:28,899 --> 01:09:29,300
to mention.

1575
01:09:29,300 --> 01:09:29,800
It's a good thing too.

1576
01:09:30,000 --> 01:09:30,700
Read about.

1577
01:09:31,000 --> 01:09:34,100
So I would say yes as they basically said, you might want to take a

1578
01:09:34,100 --> 01:09:34,700
look at this.

1579
01:09:35,300 --> 01:09:38,100
Or I don't know if truth tables, has a good documentation.

1580
01:09:39,800 --> 01:09:40,100
Yeah.

1581
01:09:40,100 --> 01:09:43,500
So a truth table is basically something you do where you basically

1582
01:09:43,500 --> 01:09:51,800
make you sort of make a like a almost, like you would a spreadsheet

1583
01:09:51,899 --> 01:09:55,000
where you have all your conditions and you start to say, whether, you

1584
01:09:55,000 --> 01:09:56,900
know, if this condition is true in this condition is true.

1585
01:09:56,900 --> 01:09:59,800
What's the end result of my expression, right?

1586
01:10:00,000 --> 01:10:01,800
That's another thing that you can look at as well.

1587
01:10:01,800 --> 01:10:04,200
But again, I don't really tend to use those things in practice all

1588
01:10:04,200 --> 01:10:04,900
that much.

1589
01:10:19,300 --> 01:10:23,100
Do you have emacs commands with Visual Studio?

1590
01:10:25,000 --> 01:10:27,400
I have trouble trying to get this to work with Visual Studio, newer

1591
01:10:27,400 --> 01:10:27,900
versions.

1592
01:10:28,100 --> 01:10:31,000
No, I don't have any max commands with Visual Studio.

1593
01:10:31,300 --> 01:10:34,600
My visual studio is just using the stock installation.

1594
01:10:34,600 --> 01:10:36,600
I don't, I don't actually have it bound to anything.

1595
01:10:46,500 --> 01:10:47,500
Have you already decided?

1596
01:10:47,500 --> 01:10:49,900
What prng algorithm you're going to use?

1597
01:10:50,100 --> 01:10:54,400
I think so, but I'm not 100% positive, but I think so.

1598
01:10:55,400 --> 01:10:56,400
We'll see you when we get there.

1599
01:11:03,700 --> 01:11:06,600
As you put the time UPS in three dimensions, could this be related to

1600
01:11:06,600 --> 01:11:08,200
a voxel octree algorithm?

1601
01:11:08,400 --> 01:11:09,300
Probably not.

1602
01:11:09,300 --> 01:11:13,100
And the reason for that is that voxel octrees are optimized for when

1603
01:11:13,100 --> 01:11:16,400
you want to look at all three dimensions in the same way.

1604
01:11:16,800 --> 01:11:18,800
So an octree is very unbiased.

1605
01:11:18,800 --> 01:11:23,400
It's basically, if you're storing things in an octree, basically, what

1606
01:11:23,400 --> 01:11:25,300
an octree is for those of you who don't know.

1607
01:11:27,900 --> 01:11:30,700
An octree is something, which basically says I have a

1608
01:11:30,700 --> 01:11:31,900
three-dimensional volume.

1609
01:11:32,100 --> 01:11:35,600
And what I'm going to do is I'm going to start dividing that volume

1610
01:11:36,300 --> 01:11:38,600
into eight sections, right?

1611
01:11:38,900 --> 01:11:43,100
So you can imagine basically planes cutting my volume.

1612
01:11:43,200 --> 01:11:46,400
I don't know if you can understand this this diagram kind of like into

1613
01:11:46,400 --> 01:11:48,600
a Rubik's Cube, you know, kind of way.

1614
01:11:49,000 --> 01:11:52,500
So that now I you know, every time I want to I take that volume.

1615
01:11:52,500 --> 01:11:57,200
I divide it and I end up with eight cubes that are all 18.

1616
01:11:57,300 --> 01:11:59,500
With the size of the original Cube.

1617
01:11:59,500 --> 01:11:59,800
And if I

1618
01:12:00,000 --> 01:12:04,100
To I can then make that, you know, again another division for any one

1619
01:12:04,100 --> 01:12:06,200
of those cubes that I want to make higher resolution.

1620
01:12:06,600 --> 01:12:08,300
I do it again and so on.

1621
01:12:09,000 --> 01:12:12,800
Now, those are interesting algorithms, when, you know, that you're

1622
01:12:12,800 --> 01:12:19,400
filling the space relatively uniformly in all three dimensions.

1623
01:12:19,400 --> 01:12:22,700
Meaning there isn't a bias in one of the dimensions that isn't getting

1624
01:12:22,700 --> 01:12:24,200
filled as much or something like that.

1625
01:12:25,000 --> 01:12:27,700
It makes sense to have something like an actuary and similarly, it

1626
01:12:27,700 --> 01:12:30,400
makes that sound actually when you're viewing things fully in three

1627
01:12:30,400 --> 01:12:30,900
dimensions.

1628
01:12:30,900 --> 01:12:34,000
So you're as likely to be looking at things in Z, as you are as an

1629
01:12:34,000 --> 01:12:38,600
extra and why, and so on, we don't really have that circumstance for

1630
01:12:38,600 --> 01:12:39,100
our game.

1631
01:12:39,100 --> 01:12:42,500
We're looking at a game World typically and we may, depending on how

1632
01:12:42,500 --> 01:12:43,600
we decide to do it.

1633
01:12:43,600 --> 01:12:45,500
I don't know how our game will shake out.

1634
01:12:45,600 --> 01:12:49,500
But at best, you know, will only be looking at probably one or two

1635
01:12:49,500 --> 01:12:50,400
slices of the world.

1636
01:12:50,400 --> 01:12:54,000
Like maybe if we have the, you know, the guys here and there are sort

1637
01:12:54,000 --> 01:12:54,700
of like a cutaway

1638
01:12:54,800 --> 01:12:57,800
And you can sort of see what's maybe below you a little bit or

1639
01:12:57,800 --> 01:13:00,500
something that you're looking down into a lower part of the dungeon or

1640
01:13:00,500 --> 01:13:03,600
something like that, you know, maybe we're looking at two or three

1641
01:13:03,600 --> 01:13:05,200
slices tops.

1642
01:13:06,000 --> 01:13:08,900
So that's, you know, three levels of Z or something like that.

1643
01:13:08,900 --> 01:13:10,300
That might be getting viewed.

1644
01:13:10,400 --> 01:13:15,800
Whereas we're always looking at, at least 17 wide by 9 wide in the

1645
01:13:15,800 --> 01:13:20,400
other two dimensions and there's a lot more fill in those Dimensions.

1646
01:13:20,400 --> 01:13:24,700
Like, we typically won't have a 17, High stack in.

1647
01:13:24,800 --> 01:13:28,400
Z, you know, we'll probably have a 10 high stack and see where

1648
01:13:28,400 --> 01:13:32,200
dungeons are something at most, whereas we're going to have thousands

1649
01:13:32,200 --> 01:13:35,500
wide Stacks potentially in X & Y, depending on how big the Overworld

1650
01:13:35,500 --> 01:13:36,700
map isn't that sort of stuff.

1651
01:13:37,100 --> 01:13:41,100
And so an octree is not a very good choice, as a way to partition our

1652
01:13:41,100 --> 01:13:41,400
world.

1653
01:13:41,400 --> 01:13:46,700
I don't think because it's sort of doing a lot more work to get you

1654
01:13:46,700 --> 01:13:50,500
benefits that we will never realize, you know, an octree is more like

1655
01:13:50,500 --> 01:13:53,900
if you're making Minecraft or something where you're looking and

1656
01:13:53,900 --> 01:13:54,600
you're your

1657
01:13:54,800 --> 01:13:58,300
Trying to build the world that you can that you're doing a lot of up

1658
01:13:58,300 --> 01:13:59,300
and down to reversals on.

1659
01:13:59,300 --> 01:14:01,400
You're looking at big mountains and stuff like this where you're

1660
01:14:01,400 --> 01:14:04,800
trying to have kind of that fully 3D thing.

1661
01:14:04,800 --> 01:14:07,200
But for a 2-D game, they just don't make a whole lot of sense.

1662
01:14:07,500 --> 01:14:11,400
So we will probably not be looking at a voxel octree type structure

1663
01:14:11,400 --> 01:14:13,100
because it wouldn't really do much for us.

1664
01:14:13,200 --> 01:14:16,500
It basically be giving us a lot of power that we would never use and

1665
01:14:16,500 --> 01:14:17,700
there's always a cost of that.

1666
01:14:20,000 --> 01:14:22,800
Is there a reason of Chunk size to be a power of 2 there is and that

1667
01:14:22,800 --> 01:14:26,000
is because the thing that we were doing the trick that we were doing

1668
01:14:26,000 --> 01:14:30,400
for the lookup is doesn't work if it's not a power of 2, so if you

1669
01:14:30,400 --> 01:14:32,800
look at the way we're doing the lookup, it's here.

1670
01:14:32,800 --> 01:14:33,400
Right?

1671
01:14:34,300 --> 01:14:37,700
What we're doing is we're using a shift in mask to separate to split

1672
01:14:37,700 --> 01:14:42,000
out the values and so we can't do that.

1673
01:14:42,000 --> 01:14:43,700
If the chunk size isn't a power of 2.

1674
01:14:43,900 --> 01:14:46,700
Now, that doesn't mean that the chunk size should stay a power of two

1675
01:14:46,900 --> 01:14:49,200
because it may be that this operation just isn't that.

1676
01:14:49,300 --> 01:14:52,000
Sting and we can do it with a regular divided.

1677
01:14:52,100 --> 01:14:54,400
Because if you think about it, if we wanted to do this, all we're

1678
01:14:54,400 --> 01:14:56,700
doing is essentially doing a divide and remainder.

1679
01:14:56,800 --> 01:14:58,800
This is a divide and remainder operation.

1680
01:14:59,300 --> 01:14:59,800
And so

1681
01:15:00,000 --> 01:15:01,200
Divide and remainder.

1682
01:15:01,900 --> 01:15:03,200
If you think about it, right?

1683
01:15:04,500 --> 01:15:09,100
Right now we have a 428 is our is our number, right?

1684
01:15:09,100 --> 01:15:12,500
We set it so that the 16 by 16 so that the bottom part is for the top

1685
01:15:12,500 --> 01:15:16,400
Parts, 28, what we're doing when we do, the shift is, we're taking the

1686
01:15:16,400 --> 01:15:18,100
whole number part, which is the 28th.

1687
01:15:18,100 --> 01:15:19,700
And that's our chunk, right?

1688
01:15:20,000 --> 01:15:20,600
Index.

1689
01:15:20,600 --> 01:15:25,300
And we're taking the remainder, which is the bottom part and that for

1690
01:15:25,300 --> 01:15:28,000
is becoming the tile inside that chunk.

1691
01:15:28,100 --> 01:15:28,700
Right?

1692
01:15:29,000 --> 01:15:29,900
What we could do, if we

1693
01:15:30,000 --> 01:15:33,200
We wanted to have an arbitrary one is we could just do a divide and

1694
01:15:33,200 --> 01:15:34,300
remainder, right?

1695
01:15:34,300 --> 01:15:39,300
So, instead of doing shift to get this guy and mask to get this guy.

1696
01:15:39,600 --> 01:15:43,700
What we could actually do is to get this guy, we could do divide, we

1697
01:15:43,700 --> 01:15:47,100
do / the dim, right?

1698
01:15:47,100 --> 01:15:51,000
And that would get us the top part and it could be any size we wanted.

1699
01:15:51,000 --> 01:15:53,500
So we could, if we wanted to have it be aligned to our screen size, we

1700
01:15:53,500 --> 01:15:57,000
could do, you know, / 17, let's say,

1701
01:15:57,800 --> 01:16:03,200
And then we could do mod by 17 and that would get us our our tile

1702
01:16:03,200 --> 01:16:03,700
index.

1703
01:16:03,900 --> 01:16:07,600
So we could if we if it turns out that storage is the most important

1704
01:16:07,600 --> 01:16:11,200
thing and then this operation doesn't actually have to be that fast.

1705
01:16:12,000 --> 01:16:14,000
We could very well go with a scheme like that.

1706
01:16:14,000 --> 01:16:17,200
And that's something that ends up being a determination to be made

1707
01:16:17,200 --> 01:16:19,700
when we're actually implementing the engine and performance tuning, it

1708
01:16:19,700 --> 01:16:20,600
and stuff like that.

1709
01:16:21,100 --> 01:16:24,300
The important thing is at this stage of the game is to try and not do

1710
01:16:24,300 --> 01:16:27,100
things that would preclude us from making those choices.

1711
01:16:27,600 --> 01:16:29,600
And I don't think we have really done anything like that yet.

1712
01:16:35,100 --> 01:16:39,100
When do you use Define a set of global variables entirely up to you?

1713
01:16:39,100 --> 01:16:39,600
Really?

1714
01:16:40,700 --> 01:16:45,500
There is no particular, like, right or wrong answer to that question.

1715
01:16:45,700 --> 01:16:48,900
But there are actual differences between them and it's important to be

1716
01:16:48,900 --> 01:16:49,900
aware of those differences.

1717
01:16:49,900 --> 01:16:51,600
So, that you make the choice that you want.

1718
01:16:51,800 --> 01:16:56,400
Obviously, any time that you have something that has to be to take

1719
01:16:56,400 --> 01:16:56,900
parameters.

1720
01:16:56,900 --> 01:16:59,600
It has to be a pound of fine, certainly, but if you're talking about

1721
01:16:59,600 --> 01:17:04,100
something like this, like, pi32, that could be either, write it.

1722
01:17:04,400 --> 01:17:05,000
That.

1723
01:17:05,200 --> 01:17:08,900
Or it could be defined like this, right?

1724
01:17:09,100 --> 01:17:09,500
Hmm.

1725
01:17:11,900 --> 01:17:13,200
You could do either those two things.

1726
01:17:16,300 --> 01:17:16,700
I

1727
01:17:22,900 --> 01:17:26,900
I personally pretty much always use pound of fines because I don't

1728
01:17:26,900 --> 01:17:29,900
really see any reason, not to, but you do lose one thing.

1729
01:17:29,900 --> 01:17:33,300
There you gain, one thing which is that it doesn't have a type.

1730
01:17:34,300 --> 01:17:37,600
Meaning you could for certain circumstances.

1731
01:17:37,600 --> 01:17:41,100
Like, let's say to give a very straightforward example.

1732
01:17:41,700 --> 01:17:44,100
Let's say you have something like that.

1733
01:17:45,400 --> 01:17:48,500
Before can be used in pretty much any circumstance.

1734
01:17:48,500 --> 01:17:50,400
Now, it doesn't matter.

1735
01:17:51,000 --> 01:17:52,700
It's not signed or unsigned.

1736
01:17:52,700 --> 01:17:59,300
For example, it's just for whereas if I did something like this, now,

1737
01:17:59,300 --> 01:17:59,800
it really does.

1738
01:18:00,000 --> 01:18:04,800
Of type, which means that the UN if it's used in a circumstance where

1739
01:18:04,800 --> 01:18:07,400
a un 32 causes something bad to happen.

1740
01:18:07,400 --> 01:18:08,900
I can't use this anymore.

1741
01:18:08,900 --> 01:18:10,600
I have to cast it or something like that.

1742
01:18:10,600 --> 01:18:11,100
Right?

1743
01:18:11,500 --> 01:18:13,500
So the downside, I'm sorry.

1744
01:18:13,500 --> 01:18:17,800
The upside of using a defiant kind of funny is that there is no type

1745
01:18:17,800 --> 01:18:19,100
to the thing that you're doing.

1746
01:18:19,100 --> 01:18:21,800
It's just the expression and it gets inserted in there directly.

1747
01:18:21,800 --> 01:18:22,300
Right?

1748
01:18:22,900 --> 01:18:27,500
However, that could also be a downside if you want it to have a type

1749
01:18:27,500 --> 01:18:29,800
meaning if you want it to only be used in a circle.

1750
01:18:30,000 --> 01:18:32,900
Stance where you have a un 32, sometimes you can do that.

1751
01:18:32,900 --> 01:18:37,000
Like in this case where we've got a floating-point suffix.

1752
01:18:37,100 --> 01:18:39,700
It kind of gives it a type so you can do it that way.

1753
01:18:39,700 --> 01:18:40,800
But sometimes you can't do that.

1754
01:18:40,800 --> 01:18:44,700
Like, if you wanted the thing for to have a particular type, it's hard

1755
01:18:44,700 --> 01:18:45,400
to make that happen.

1756
01:18:45,400 --> 01:18:48,800
If you want it to only be an 8-bit type for some unknown reason,

1757
01:18:49,300 --> 01:18:52,300
that's a place where the doing Global variable of can help you because

1758
01:18:52,300 --> 01:18:54,100
it means that it does have a specific type.

1759
01:18:54,100 --> 01:18:56,800
So if you wanted that, that's the reason why you might do it that way,

1760
01:18:56,900 --> 01:18:57,400
right?

1761
01:18:58,400 --> 01:19:02,500
There aren't a whole lot of other reasons, but you know your mileage

1762
01:19:02,500 --> 01:19:03,000
may vary.

1763
01:19:12,800 --> 01:19:17,500
Why are you using inline in variables?

1764
01:19:19,500 --> 01:19:21,000
I have no idea what that means.

1765
01:19:21,000 --> 01:19:22,600
I'm sorry sub lose.

1766
01:19:23,300 --> 01:19:25,100
We are not using inline and variables.

1767
01:19:25,100 --> 01:19:27,400
There are no variables declared within line.

1768
01:19:29,100 --> 01:19:30,600
So I'm not sure what you mean by that.

1769
01:19:32,100 --> 01:19:34,200
Why don't you spit flags for doors and such.

1770
01:19:34,500 --> 01:19:37,100
Well, the reason is because we haven't gotten the town map storage

1771
01:19:37,100 --> 01:19:37,500
yet.

1772
01:19:37,800 --> 01:19:40,900
We're just using that number just to be totally clear.

1773
01:19:41,900 --> 01:19:44,400
This number is, is just a total.

1774
01:19:45,000 --> 01:19:46,300
So this this will be, you know,

1775
01:19:48,500 --> 01:19:51,500
Real structure for a tile right now.

1776
01:19:51,500 --> 01:19:54,600
We're not, we're just using that number to test the tile map stuff,

1777
01:19:54,800 --> 01:19:56,800
but we have no idea how we want to start tiles yet.

1778
01:19:56,800 --> 01:20:00,100
That's going to be completely determined on dependent on what we want

1779
01:20:00,200 --> 01:20:00,900
in our game.

1780
01:20:01,200 --> 01:20:05,800
So so it's not going to be a bit flag or you went 3-2 or anything like

1781
01:20:05,800 --> 01:20:05,900
that.

1782
01:20:05,900 --> 01:20:07,400
It's gonna be something more complicated.

1783
01:20:15,900 --> 01:20:19,600
Why would you prefer an array of tile chunks instead of a door entity

1784
01:20:19,600 --> 01:20:21,000
which links to a tile map?

1785
01:20:21,500 --> 01:20:24,000
So the reason is because we may want to view them.

1786
01:20:24,500 --> 01:20:27,700
So, like I said, I wanted our world to be consistent and to feel

1787
01:20:27,700 --> 01:20:28,500
consistent.

1788
01:20:28,500 --> 01:20:31,200
So I'll show you the difference between the two cases.

1789
01:20:31,700 --> 01:20:36,500
So what the person was suggesting is when we have a door, right?

1790
01:20:36,600 --> 01:20:40,400
Why don't we just make that door point to some other location that you

1791
01:20:40,400 --> 01:20:42,800
go to when you enter the door, right?

1792
01:20:42,900 --> 01:20:44,500
Instead of making their be a

1793
01:20:44,900 --> 01:20:47,800
Metal tile map where you go up or down, based on that, right?

1794
01:20:47,800 --> 01:20:55,800
And the example is or and then another one would be, you know, why do

1795
01:20:55,800 --> 01:20:59,700
I have a door with tile chunks on either side, where we basically?

1796
01:21:00,000 --> 01:21:01,200
Can walk through it?

1797
01:21:01,400 --> 01:21:01,900
Why don't?

1798
01:21:01,900 --> 01:21:05,800
I just have it so that the tile map basic just has a thing there and

1799
01:21:05,800 --> 01:21:08,700
then the other one has a matching thing, right?

1800
01:21:08,700 --> 01:21:11,700
And they just teleport between each other, right?

1801
01:21:12,500 --> 01:21:13,200
Why not do that.

1802
01:21:13,200 --> 01:21:16,800
So why not just use teleporting when you walk onto something?

1803
01:21:17,000 --> 01:21:18,500
Instead of actually make it continuous?

1804
01:21:18,500 --> 01:21:19,400
Tell chunk world.

1805
01:21:19,900 --> 01:21:21,300
The answer is for two reasons.

1806
01:21:22,200 --> 01:21:27,200
The simplest one is that I want to be able to do things anytime.

1807
01:21:27,200 --> 01:21:29,800
I want that involve a more complex display.

1808
01:21:30,000 --> 01:21:30,800
Of the world.

1809
01:21:30,800 --> 01:21:34,400
So for example, if we wanted to zoom out on the world for some reason

1810
01:21:34,400 --> 01:21:38,500
in the game and show a higher, a larger window on the world.

1811
01:21:39,000 --> 01:21:42,400
This scheme doesn't work right, because as soon as you try to show

1812
01:21:42,400 --> 01:21:46,500
more than one room at a time, now, you actually need to know where

1813
01:21:46,500 --> 01:21:48,200
they are spatially related to each other.

1814
01:21:48,200 --> 01:21:51,600
You can't just have teleporters that teleport between them as if they

1815
01:21:51,600 --> 01:21:53,900
were doors and the player doesn't know the difference, right?

1816
01:21:54,100 --> 01:21:55,000
So there's that.

1817
01:21:55,200 --> 01:21:58,500
The same is true, the exact for the exact same reason.

1818
01:21:58,700 --> 01:21:59,700
It's true for

1819
01:22:00,000 --> 01:22:03,700
Down as well because like I said, we may want to have a circumstance

1820
01:22:03,700 --> 01:22:06,200
where like you're walking up here on something, right?

1821
01:22:06,200 --> 01:22:10,200
And there's a hole in the floor and you can see down below you to the

1822
01:22:10,200 --> 01:22:10,700
lower level.

1823
01:22:10,700 --> 01:22:13,800
Tilemap again, having a teleporter is not going to help here because

1824
01:22:13,800 --> 01:22:15,800
in fact there isn't actually a connection between those you can't

1825
01:22:15,800 --> 01:22:17,900
actually get there like you may not be able to walk down there.

1826
01:22:18,500 --> 01:22:20,900
You may just see it and then the the actual way you get down.

1827
01:22:20,900 --> 01:22:22,400
There is like somewhere else, right?

1828
01:22:22,500 --> 01:22:26,100
So we always want to be able to query the whole world consistently, so

1829
01:22:26,100 --> 01:22:27,000
we can show things.

1830
01:22:27,400 --> 01:22:28,000
Similarly.

1831
01:22:28,000 --> 01:22:28,900
We want to know.

1832
01:22:30,400 --> 01:22:34,400
Some stuff, for example, we may want to do things that involve the

1833
01:22:34,400 --> 01:22:35,300
geometry of the world.

1834
01:22:35,300 --> 01:22:38,400
Like let's say just for give you a very simple example.

1835
01:22:38,600 --> 01:22:43,100
Let's say that we wanted to have something that breaks through walls.

1836
01:22:43,300 --> 01:22:47,000
So for example, let's say we want to implement a boss monster who can

1837
01:22:47,000 --> 01:22:49,900
shoot through walls and they'd make it, they bore a hole in the wall.

1838
01:22:50,100 --> 01:22:52,600
Well, that's incredibly difficult to do here because when they bore

1839
01:22:52,600 --> 01:22:55,900
our world, a thing in this wall, you have no idea where that was

1840
01:22:55,900 --> 01:22:56,600
supposed to go.

1841
01:22:56,800 --> 01:22:59,100
You would have to annotate it or something and say, what was supposed

1842
01:22:59,100 --> 01:23:00,000
to go or you'd have to

1843
01:23:00,200 --> 01:23:03,100
Search for the nearest portal, figure out where that portal goes and

1844
01:23:03,100 --> 01:23:06,100
assume that the things next to it are that, right?

1845
01:23:06,100 --> 01:23:08,400
So it's really limiting to do this.

1846
01:23:08,500 --> 01:23:09,800
You never really want to do this.

1847
01:23:09,800 --> 01:23:13,900
If you can avoid it teleporting, as a means of moving somewhere in

1848
01:23:13,900 --> 01:23:14,500
Geometry.

1849
01:23:14,500 --> 01:23:17,000
That isn't really, a Teleport is usually bad.

1850
01:23:17,000 --> 01:23:19,000
The only time you want to do teleporting as if it's actually

1851
01:23:19,000 --> 01:23:19,600
teleporting.

1852
01:23:19,700 --> 01:23:22,900
If there's a portal here that's supposed to go to some totally random

1853
01:23:22,900 --> 01:23:23,600
portion of the world.

1854
01:23:23,600 --> 01:23:26,200
That's a perfectly good case for teleporting and we may well have

1855
01:23:26,200 --> 01:23:30,000
those but you never want to teleport for something that's actually

1856
01:23:30,100 --> 01:23:33,100
geometric movement because then it constrains your game design and all

1857
01:23:33,100 --> 01:23:36,300
these ways that are kind of not that good, right?

1858
01:23:37,600 --> 01:23:40,300
The another example would be sound, let's say I'm in this room and I

1859
01:23:40,300 --> 01:23:42,900
want to hear the fact that there's a boss monster in this other room.

1860
01:23:43,100 --> 01:23:45,700
Well, it's pretty easy to propagate sound, right?

1861
01:23:46,300 --> 01:23:49,000
And so like if the monster was walking here and I was standing right

1862
01:23:49,000 --> 01:23:51,200
here and I'm listing through this wall, right?

1863
01:23:51,200 --> 01:23:53,100
Let's say, in fact, there's no door in the wall.

1864
01:23:53,100 --> 01:23:56,200
Maybe it's maybe it's like a solid thing and there's the boss monster

1865
01:23:56,200 --> 01:23:57,200
here and I'm here.

1866
01:23:57,300 --> 01:23:59,800
Well, I want to be able to propagate that sound through the wall.

1867
01:24:00,000 --> 01:24:00,700
Can't do it.

1868
01:24:00,700 --> 01:24:04,700
If my whole system is based on Magic portals because I have no idea

1869
01:24:04,700 --> 01:24:06,000
how these rooms are connected.

1870
01:24:06,200 --> 01:24:10,000
So hopefully that gives you some set a good set of reasons of why you

1871
01:24:10,000 --> 01:24:13,200
typically want things to be geometric and be able to query them.

1872
01:24:13,200 --> 01:24:17,000
I very geometric way and so our tile chunks are a way of virtualizing

1873
01:24:17,000 --> 01:24:19,400
the world so that we can still always query it geometrically if we

1874
01:24:19,400 --> 01:24:22,600
want to, but we can also make it be very huge and sprawling and not

1875
01:24:22,600 --> 01:24:24,500
have to worry about making it be one giant array.

1876
01:24:30,700 --> 01:24:32,100
Are you following Robert C?

1877
01:24:32,100 --> 01:24:33,300
Martin rules?

1878
01:24:33,400 --> 01:24:33,700
Sorry.

1879
01:24:33,700 --> 01:24:36,400
I have no idea who Robert C Martin is or what his rules are.

1880
01:24:36,400 --> 01:24:40,000
So I suspect we probably are not, but I do not know what those are.

1881
01:24:41,800 --> 01:24:44,800
Are we planning to load/unload the tile chunks on demand or will the

1882
01:24:44,800 --> 01:24:46,200
entire world map stay in memory.

1883
01:24:46,700 --> 01:24:51,300
I'm thinking, it'll probably stay in memory, but we could unload and

1884
01:24:51,300 --> 01:24:51,700
load them.

1885
01:24:51,700 --> 01:24:55,300
I don't know what you'll notice is, it would be trivial for us, to do

1886
01:24:55,300 --> 01:24:58,400
load and unload, because really all we have to do here.

1887
01:24:58,400 --> 01:25:00,100
We've basically set ourselves up for Success.

1888
01:25:00,100 --> 01:25:01,600
They're right here.

1889
01:25:02,000 --> 01:25:05,600
If the tile chunk were not found, we could page it in right here, if

1890
01:25:05,600 --> 01:25:06,300
we wanted to.

1891
01:25:06,300 --> 01:25:09,300
Now, that's there are reasons why you don't quite want to do that,

1892
01:25:09,400 --> 01:25:10,200
exactly that way.

1893
01:25:10,200 --> 01:25:11,400
But because of stall,

1894
01:25:11,600 --> 01:25:11,900
And stuff.

1895
01:25:11,900 --> 01:25:14,300
So we do something a little more complicated if we were going to page

1896
01:25:14,300 --> 01:25:16,700
and page out, but you can basically see that paging Paige in and out

1897
01:25:16,700 --> 01:25:19,500
would be pretty much free and when you did the page in here, you could

1898
01:25:19,500 --> 01:25:22,800
just go find the least, recently used tile chunk and page that out.

1899
01:25:22,800 --> 01:25:24,000
So you could change.

1900
01:25:24,000 --> 01:25:27,200
It would literally take like 30 minutes to change what we've got here

1901
01:25:27,200 --> 01:25:30,400
into a demand paging scheme, but I don't know if we'll ever actually

1902
01:25:30,400 --> 01:25:31,200
need to do that.

1903
01:25:41,100 --> 01:25:43,000
How much of this code will get used in the final procedural?

1904
01:25:43,000 --> 01:25:43,700
Code of the game?

1905
01:25:43,700 --> 01:25:46,300
It looks very complicated to make any changes here at linguistically.

1906
01:25:46,500 --> 01:25:48,000
Are you talking about?

1907
01:25:48,800 --> 01:25:50,300
Are you talking about this?

1908
01:25:50,300 --> 01:25:51,200
This code here?

1909
01:25:51,200 --> 01:25:52,800
That just does are like none of this.

1910
01:25:52,800 --> 01:25:55,600
This is getting deleted as soon as we actually start doing World

1911
01:25:55,600 --> 01:25:58,900
Generation, but I just needed something to spam stuff out into the

1912
01:25:58,900 --> 01:26:01,500
world so we could test our tile map code.

1913
01:26:01,800 --> 01:26:03,200
So this is just garbage.

1914
01:26:03,200 --> 01:26:04,400
It's complete garbage.

1915
01:26:04,700 --> 01:26:08,400
If it helps, I can put it to do there for you.

1916
01:26:14,300 --> 01:26:16,100
Because this is, this is total garbage.

1917
01:26:16,200 --> 01:26:18,000
We're we won't be using any of it.

1918
01:26:27,200 --> 01:26:28,300
Are we planning on making the time?

1919
01:26:28,300 --> 01:26:29,900
I've layered Graphics.

1920
01:26:29,900 --> 01:26:31,200
Physics logic, Etc.

1921
01:26:31,900 --> 01:26:33,500
Well, I don't know if it'll be layered.

1922
01:26:33,500 --> 01:26:40,900
Perhaps in the way that you might be implying that in terms of like

1923
01:26:41,800 --> 01:26:45,000
like we won't be starting to separate tilemap chunks or anything for

1924
01:26:45,000 --> 01:26:49,100
the different systems, but we will be having data in the tilemap

1925
01:26:49,100 --> 01:26:51,100
that's designed for use by different systems.

1926
01:26:51,500 --> 01:26:53,500
Like the graphics part will be different from the physics part.

1927
01:26:53,500 --> 01:26:53,900
Probably.

1928
01:26:53,900 --> 01:26:55,600
I just, don't think they will necessarily be separate.

1929
01:26:55,600 --> 01:26:55,800
They'll probably

1930
01:26:55,900 --> 01:26:57,200
we be kind of merged together.

1931
01:27:03,500 --> 01:27:05,200
Am I listening to something or is it just to hang them?

1932
01:27:05,200 --> 01:27:06,700
Like it's just to hang the microphone.

1933
01:27:07,000 --> 01:27:09,600
Well, it also so that I can hear our game sound once we actually start

1934
01:27:09,600 --> 01:27:10,900
playing more sounds in the game.

1935
01:27:16,300 --> 01:27:19,400
Why are primitive declared like bull 42 and in unit 3 2 instead of

1936
01:27:19,400 --> 01:27:24,200
just Bool indent the reason is because basically I like to insulate

1937
01:27:24,200 --> 01:27:29,100
myself a little bit from the platform in the sense that I like to

1938
01:27:29,100 --> 01:27:33,400
basically Define my own types so that I can switch to switch them.

1939
01:27:33,400 --> 01:27:34,400
Whenever I want to.

1940
01:27:36,300 --> 01:27:38,300
That is sort of a holdover from the old days.

1941
01:27:38,300 --> 01:27:41,400
When these didn't used to be defined in, see, you didn't used to be

1942
01:27:41,400 --> 01:27:43,700
able to have types and see that where a particular size.

1943
01:27:43,900 --> 01:27:45,100
So you always had to do it.

1944
01:27:45,800 --> 01:27:48,000
And that's where I got in that habit, and I don't really like, putting

1945
01:27:48,000 --> 01:27:49,100
the underscore key on there.

1946
01:27:49,100 --> 01:27:50,900
So, at this point, it's just basically the save me from typing

1947
01:27:50,900 --> 01:27:52,700
underscore T, but

1948
01:27:54,500 --> 01:27:57,600
For bools, the reason I don't use the actual dual type is the actual

1949
01:27:57,600 --> 01:27:59,200
Bull type has semantics.

1950
01:27:59,200 --> 01:28:03,000
I don't like, I actually want my Bool to just be an integer so that it

1951
01:28:03,000 --> 01:28:06,300
doesn't have to convert to true or false all the time, which can have

1952
01:28:06,300 --> 01:28:07,400
performance implications.

1953
01:28:07,600 --> 01:28:10,300
So that's why I don't use the pool type, but the other types of just

1954
01:28:10,800 --> 01:28:11,900
force of habit, really?

1955
01:28:12,000 --> 01:28:15,700
Because nowadays you could just use these and be okay.

1956
01:28:26,200 --> 01:28:28,100
Let's see.

1957
01:28:28,800 --> 01:28:31,500
A lot of questions that are not related to the programming.

1958
01:28:31,500 --> 01:28:32,700
So I am skipping them.

1959
01:28:36,800 --> 01:28:39,300
If we're using sparseness because we're worried about the size of the

1960
01:28:39,300 --> 01:28:39,900
tile map.

1961
01:28:39,900 --> 01:28:42,000
Would it make sense to go further and think about compression?

1962
01:28:42,000 --> 01:28:46,100
It might, again, that's something we'll have to determine I suspect.

1963
01:28:46,100 --> 01:28:49,800
It probably won't because I suspect that the sizes of our world will

1964
01:28:49,800 --> 01:28:53,000
not be that big compared to the sizes of the art assets.

1965
01:28:53,400 --> 01:28:56,500
And so it compressing the tilemap probably wouldn't really get us very

1966
01:28:56,500 --> 01:29:00,600
far because basically our assets are probably going to be huge because

1967
01:29:00,600 --> 01:29:01,900
we have so many bitmaps and stuff.

1968
01:29:02,800 --> 01:29:04,300
So I suspect it wouldn't make sense.

1969
01:29:04,500 --> 01:29:07,400
But if it turned out that the tile map was creating memory pressure

1970
01:29:07,400 --> 01:29:09,000
that we were worried about then.

1971
01:29:09,000 --> 01:29:09,400
Yes.

1972
01:29:18,700 --> 01:29:21,200
How computational intensive is as far as storage and does it become

1973
01:29:21,200 --> 01:29:23,000
more intensive as you get more sparse.

1974
01:29:23,600 --> 01:29:24,700
So yeah, the problem.

1975
01:29:24,700 --> 01:29:28,900
Basically, the trade-off with the sparse storage is specifically that

1976
01:29:28,900 --> 01:29:33,200
there is a computational complexity there that you are paying.

1977
01:29:33,500 --> 01:29:36,800
Because if you think about what happens and this is a very good

1978
01:29:36,800 --> 01:29:37,100
question.

1979
01:29:37,100 --> 01:29:38,700
I'm really glad that you asked that question.

1980
01:29:39,600 --> 01:29:44,100
Thank you ride car to basically what happens with Spar storage is.

1981
01:29:44,100 --> 01:29:47,500
If you think about it, if we have a, if we want to do a 4 billion by 4

1982
01:29:47,500 --> 01:29:48,100
billion,

1983
01:29:48,100 --> 01:29:48,200
Old.

1984
01:29:48,200 --> 01:29:50,900
And we were able to just flat-out store it, right?

1985
01:29:50,900 --> 01:29:56,900
And one of the kind of one of the sad things is if you actually think

1986
01:29:56,900 --> 01:29:58,100
about this a little more carefully.

1987
01:29:58,100 --> 01:29:59,900
You realize that

1988
01:30:00,000 --> 01:30:04,400
I could actually just store it if we had more control over the memory

1989
01:30:04,400 --> 01:30:05,400
management unit.

1990
01:30:05,400 --> 01:30:09,400
We could actually just map a range of memory that was reserved, but

1991
01:30:09,400 --> 01:30:11,400
not committed and then only commit it.

1992
01:30:11,400 --> 01:30:14,700
Once we actually go to use it but it is a lot of reasons why that's

1993
01:30:14,700 --> 01:30:16,500
very hard to do and it's not very portable.

1994
01:30:16,500 --> 01:30:24,600
So really OS is our lousy is really the reason why we can't just

1995
01:30:24,600 --> 01:30:27,800
flat-out use a regular accessing team.

1996
01:30:28,800 --> 01:30:29,500
It's

1997
01:30:30,100 --> 01:30:32,000
It's really lame and I hate it.

1998
01:30:32,200 --> 01:30:33,100
But this is the truth.

1999
01:30:33,300 --> 01:30:36,500
And so maybe, like on the Raspberry Pi, we literally will just be able

2000
01:30:36,500 --> 01:30:38,300
to do a straight mapping.

2001
01:30:38,500 --> 01:30:40,500
It wouldn't be 4 billion by for building because I don't think that's

2002
01:30:40,500 --> 01:30:41,400
64 a bit.

2003
01:30:41,600 --> 01:30:44,400
But if we ever do a home brew, that's actually a 64-bit.

2004
01:30:44,400 --> 01:30:47,500
We could do a straight mapping of 4 billion by 4 billion and then only

2005
01:30:47,500 --> 01:30:48,400
fill in the parts we want.

2006
01:30:48,400 --> 01:30:51,200
And then we would pay almost no computational cost for it.

2007
01:30:51,500 --> 01:30:59,600
So OS is our lousy Windows kernel doesn't care about, you doesn't

2008
01:30:59,600 --> 01:30:59,800
care.

2009
01:31:01,200 --> 01:31:02,100
About you.

2010
01:31:04,200 --> 01:31:08,500
Is one reason for this for this whole thing, but basically, what we

2011
01:31:08,500 --> 01:31:10,300
have to do is we have to implement that virtualization.

2012
01:31:10,300 --> 01:31:13,000
Ourself and so, to implement that virtualization instead of just

2013
01:31:13,000 --> 01:31:17,700
letting the mmu, do it, what we have this 4 billion by 4 billion

2014
01:31:17,700 --> 01:31:18,000
thing.

2015
01:31:18,000 --> 01:31:20,400
We would like to be able to just do that direct access and the direct

2016
01:31:20,400 --> 01:31:24,900
access would just be, you know, basically a multiply and add and a

2017
01:31:24,900 --> 01:31:26,000
memory look up, right.

2018
01:31:26,100 --> 01:31:31,300
It would be y times with plus X or if it's a little more complicated

2019
01:31:31,300 --> 01:31:32,800
now, it's Z times.

2020
01:31:32,800 --> 01:31:33,900
W Times h.

2021
01:31:34,300 --> 01:31:35,900
Plus X, this is a constant.

2022
01:31:35,900 --> 01:31:38,800
So you're basically talking about to multiplies to ads and a memory.

2023
01:31:38,800 --> 01:31:40,600
Look up, extremely efficient.

2024
01:31:40,700 --> 01:31:42,400
You're never going to notice it, right?

2025
01:31:42,700 --> 01:31:44,900
That's how you would get the tile instead.

2026
01:31:44,900 --> 01:31:48,400
What we have to do now is we have to do that shift, and masking to

2027
01:31:48,400 --> 01:31:49,600
figure out where we're getting it.

2028
01:31:49,600 --> 01:31:53,000
We got to go pull that tile out, see if it's there and if it is there,

2029
01:31:53,000 --> 01:31:55,400
then we do the access and that's a lot more expensive.

2030
01:31:55,500 --> 01:31:55,800
Right?

2031
01:31:55,800 --> 01:31:59,900
I mean, you're probably talking about literally 10x the work because

2032
01:31:59,900 --> 01:32:02,100
this is just so simple to do that.

2033
01:32:02,100 --> 01:32:03,900
Even though there's not a whole lot to do in the

2034
01:32:04,000 --> 01:32:06,500
As far as storage, it's still going to be no matter what we Implement.

2035
01:32:06,500 --> 01:32:09,100
It's still going to be a bit of nastiness.

2036
01:32:10,000 --> 01:32:13,600
So yes, the reason that we do it is because we want to have large

2037
01:32:13,600 --> 01:32:17,200
worlds that don't have restrictions on their dimensions in sort of,

2038
01:32:17,200 --> 01:32:19,700
like, they can be kind of long and skinny, if they want to be in that

2039
01:32:19,700 --> 01:32:20,400
sort of thing.

2040
01:32:22,200 --> 01:32:28,000
And so we are paying a real cost there and the better we do at

2041
01:32:28,000 --> 01:32:33,200
sparsity the the more closely we mapped the sparseness to of the world

2042
01:32:33,200 --> 01:32:36,600
to the storage, the more expensive that sparseness does become.

2043
01:32:36,800 --> 01:32:39,700
And so, it is a real cost and it is something worth thinking about.

2044
01:32:39,700 --> 01:32:42,300
I'm hoping it's not going to hurt us too bad on this particular game,

2045
01:32:43,000 --> 01:32:44,100
but it's definitely the case.

2046
01:32:44,300 --> 01:32:47,200
And so yeah, it would be way better if you didn't have to do it.

2047
01:32:52,000 --> 01:32:53,100
Let's see.

2048
01:32:53,100 --> 01:32:54,300
Let me I'm just going to Quick.

2049
01:32:54,300 --> 01:32:55,300
There's a lot of questions.

2050
01:32:55,300 --> 01:32:55,900
I'm going to see.

2051
01:32:56,000 --> 01:32:58,400
Maybe take five more minutes just to see if there's any other

2052
01:32:58,400 --> 01:32:59,000
questions.

2053
01:33:01,100 --> 01:33:03,600
That are about what we were working on the tile map.

2054
01:33:06,500 --> 01:33:07,800
Let's see.

2055
01:33:13,800 --> 01:33:17,700
So, we say the tile sparsely, but every room is saved, should rooms be

2056
01:33:17,700 --> 01:33:19,900
created, only when the player comes closer to them.

2057
01:33:20,600 --> 01:33:22,900
So I kind of answered this on a previous stream, but I'll mention it

2058
01:33:22,900 --> 01:33:25,900
again because there's something that you should understand.

2059
01:33:25,900 --> 01:33:29,900
This is a very fundamental Concept in programming actually to

2060
01:33:29,900 --> 01:33:35,800
understand, and that is the concept of best case, worst case.

2061
01:33:36,000 --> 01:33:38,900
So, let me just take a minute because it's exactly what you're asking

2062
01:33:38,900 --> 01:33:39,600
about.

2063
01:33:40,000 --> 01:33:42,300
I want to take a minute to describe best.

2064
01:33:42,500 --> 01:33:45,200
First as worst case, and why you have to care about the difference

2065
01:33:45,200 --> 01:33:46,000
between those two?

2066
01:33:47,300 --> 01:33:47,700
so,

2067
01:33:49,400 --> 01:33:53,800
A lot of times people make the mistake of trying to optimize for their

2068
01:33:53,800 --> 01:33:57,900
best case, but really, what you mostly want to do for game development

2069
01:33:57,900 --> 01:34:00,000
is you want to optimize for your worst case.

2070
01:34:01,000 --> 01:34:01,800
What does that mean?

2071
01:34:02,700 --> 01:34:05,800
Well, I'll give you a simple example from first person shooters

2072
01:34:05,800 --> 01:34:11,300
because these make this is sort of a good example of when you care

2073
01:34:11,300 --> 01:34:12,000
about it.

2074
01:34:12,300 --> 01:34:15,400
Let's say, I am making a game.

2075
01:34:15,500 --> 01:34:16,800
That's a first person shooter.

2076
01:34:17,100 --> 01:34:19,100
And I'm talking about a time.

2077
01:34:19,600 --> 01:34:22,200
When the player is here and they're pointing this direction.

2078
01:34:22,200 --> 01:34:24,700
This is a top-down View, and there's a wall there, looking right at

2079
01:34:24,700 --> 01:34:25,300
the wall.

2080
01:34:25,500 --> 01:34:27,600
So the thing that they're going to view, right?

2081
01:34:27,700 --> 01:34:29,900
Is this the in their first person view?

2082
01:34:30,100 --> 01:34:30,700
This is looking straight.

2083
01:34:30,900 --> 01:34:32,200
Ahead, here's the little gun.

2084
01:34:33,200 --> 01:34:35,800
The thing that they're going to view is a wall, right?

2085
01:34:36,700 --> 01:34:39,900
And somebody looks at this and goes there's all this stuff back here

2086
01:34:39,900 --> 01:34:42,500
in this other room that's behind the wall.

2087
01:34:42,900 --> 01:34:43,400
Whatever.

2088
01:34:43,400 --> 01:34:45,700
And there's you know, there's all this stuff.

2089
01:34:45,700 --> 01:34:49,400
There's people walking around and I'm like, wow, we're spending a lot

2090
01:34:49,400 --> 01:34:52,700
of time because we rendered all the stuff that was behind the guy only

2091
01:34:52,700 --> 01:34:56,400
to then draw a wall that was behind, you know, other stuff is behind

2092
01:34:56,400 --> 01:34:56,600
the wall.

2093
01:34:56,600 --> 01:34:59,000
The only to draw this wall that you can't see any of it.

2094
01:34:59,100 --> 01:34:59,800
Right?

2095
01:35:00,100 --> 01:35:00,700
Wouldn't it be nice?

2096
01:35:00,800 --> 01:35:04,000
Nice to write some inclusion code that says, oh, I'm looking at this

2097
01:35:04,000 --> 01:35:04,700
wall.

2098
01:35:05,100 --> 01:35:07,700
So I shouldn't draw any of this stuff.

2099
01:35:07,700 --> 01:35:11,100
I should just skip it and draw the wall, right?

2100
01:35:12,100 --> 01:35:14,100
Well, that's a perfectly reasonable thing to do.

2101
01:35:14,900 --> 01:35:18,000
But what you have to think about is the fact that a couple seconds

2102
01:35:18,000 --> 01:35:19,400
later, right?

2103
01:35:19,800 --> 01:35:23,000
The player moves over and they're looking through a doorway into that

2104
01:35:23,000 --> 01:35:23,500
same room.

2105
01:35:23,500 --> 01:35:24,400
Like here's the doorway.

2106
01:35:24,400 --> 01:35:26,600
So they move over this way and they're looking into the doorway,

2107
01:35:26,800 --> 01:35:27,300
right?

2108
01:35:27,400 --> 01:35:30,300
And now they're seeing everything that's in that room.

2109
01:35:30,500 --> 01:35:31,100
Right?

2110
01:35:31,600 --> 01:35:36,200
So basically, all you've done is save a little bit of overdrawn.

2111
01:35:36,200 --> 01:35:39,900
This case, if you spent a lot of time doing that optimization, right?

2112
01:35:40,200 --> 01:35:41,800
And you have to be aware that

2113
01:35:41,900 --> 01:35:45,200
You're essentially doing here is, you are optimizing for your best

2114
01:35:45,200 --> 01:35:45,500
case.

2115
01:35:45,500 --> 01:35:48,000
Your best case is staring at a wall where you can call out the rest of

2116
01:35:48,000 --> 01:35:48,500
the room.

2117
01:35:48,800 --> 01:35:51,600
Your worst case is going to be something like the guy is standing on a

2118
01:35:51,600 --> 01:35:56,000
veranda and looking out over an entire like planet and there's like

2119
01:35:56,000 --> 01:35:59,300
mountains in the background and a giant Sun that speaking out and

2120
01:35:59,300 --> 01:35:59,800
trees.

2121
01:36:00,000 --> 01:36:02,700
All this stuff and tons of people walking around in here.

2122
01:36:02,700 --> 01:36:06,100
That's that's your worst case because there's nothing including

2123
01:36:06,100 --> 01:36:07,900
anything in here, right?

2124
01:36:09,400 --> 01:36:13,800
And so you kind of need to focus on this which is this thing here when

2125
01:36:13,800 --> 01:36:15,600
you're talking about, how you're going to optimize, you have to talk

2126
01:36:15,600 --> 01:36:17,800
about like lots of level of detail and things that you're going to

2127
01:36:17,800 --> 01:36:18,700
have to do that.

2128
01:36:18,700 --> 01:36:21,400
Can't just be about looking for the one time that you were staring at

2129
01:36:21,400 --> 01:36:22,000
a wall and going.

2130
01:36:22,000 --> 01:36:24,800
Oh, I can really optimize that case and get the frame rate up because

2131
01:36:24,800 --> 01:36:28,000
it never matters what your best case framerate is the player doesn't

2132
01:36:28,000 --> 01:36:28,200
care.

2133
01:36:28,200 --> 01:36:28,700
What your best.

2134
01:36:28,700 --> 01:36:31,700
Freight case frame rate is they care what your worst case framerate is

2135
01:36:31,700 --> 01:36:32,000
they care?

2136
01:36:32,000 --> 01:36:35,800
When you come out here and you look at this and everything falls

2137
01:36:35,800 --> 01:36:36,200
apart.

2138
01:36:36,200 --> 01:36:38,400
It all goes pear-shaped and you're super slow.

2139
01:36:38,800 --> 01:36:39,300
Right.

2140
01:36:40,700 --> 01:36:42,000
So, how does that apply here?

2141
01:36:42,400 --> 01:36:44,800
Well, basically, what's happening is let's say in our game.

2142
01:36:44,800 --> 01:36:47,200
We want to have destructible environments or whatever.

2143
01:36:47,200 --> 01:36:47,800
Right?

2144
01:36:47,800 --> 01:36:50,600
So I've got this room, the thing that I was just talking about.

2145
01:36:50,600 --> 01:36:53,200
Let's say, we want to have a boss monster that breaks through walls,

2146
01:36:53,300 --> 01:36:53,800
right?

2147
01:36:54,500 --> 01:36:56,700
So, I've got this room and I've created it, right?

2148
01:36:56,700 --> 01:36:57,700
And I've done this thing.

2149
01:36:57,800 --> 01:37:00,500
And now we know that sometimes there's monsters, the maybe writing

2150
01:37:00,500 --> 01:37:03,300
boss - there's just monsters that can shoot through a wall.

2151
01:37:03,300 --> 01:37:05,500
And now the wall is destroyed, right?

2152
01:37:06,000 --> 01:37:09,000
Well, if you base your entire scheme, the way that you're getting your

2153
01:37:09,000 --> 01:37:10,300
storage efficiency or

2154
01:37:10,500 --> 01:37:12,700
Ever is that rooms only exist?

2155
01:37:12,800 --> 01:37:16,400
When the player walks into them, then what do you do?

2156
01:37:16,400 --> 01:37:19,100
When you start modifying the rooms, you've got to store that data

2157
01:37:19,100 --> 01:37:19,700
somewhere.

2158
01:37:20,200 --> 01:37:23,300
So now you've got a case where every time there is one of those

2159
01:37:23,300 --> 01:37:25,200
monsters than it does the break through the wall thing.

2160
01:37:25,200 --> 01:37:27,600
Now, you've got a store those rooms and you're not storing the other

2161
01:37:27,600 --> 01:37:27,900
rooms.

2162
01:37:28,200 --> 01:37:31,100
What that means is in the worst case where you have a world filled

2163
01:37:31,100 --> 01:37:32,800
with those monsters that are destroying things.

2164
01:37:33,100 --> 01:37:36,700
You've now gone from having to store, no rooms have to restore almost

2165
01:37:36,700 --> 01:37:39,000
all the rooms because you got to store all of that damage that

2166
01:37:39,000 --> 01:37:40,200
occurred there and think about it.

2167
01:37:40,700 --> 01:37:43,000
Adding thing on top of that you will say you want to write in

2168
01:37:43,000 --> 01:37:43,700
footsteps.

2169
01:37:43,800 --> 01:37:46,400
Say you want to have people be able to burn things, say you want them

2170
01:37:46,400 --> 01:37:48,000
to be able to push things around.

2171
01:37:48,300 --> 01:37:50,800
Say, you want to be able to have them to create new trees with a

2172
01:37:50,800 --> 01:37:54,700
spell, whatever, you've gone from again.

2173
01:37:55,200 --> 01:37:58,500
You're focusing on the best case, which is the case where rooms don't

2174
01:37:58,500 --> 01:37:59,400
get modified.

2175
01:38:00,600 --> 01:38:02,400
And that's not the case I care about.

2176
01:38:02,400 --> 01:38:03,800
I care about our worst case.

2177
01:38:03,800 --> 01:38:07,300
I want to make sure this game works well for games for what, when in

2178
01:38:07,300 --> 01:38:09,200
the game design, we're going to allow the player to have a lot of

2179
01:38:09,200 --> 01:38:10,300
mutability to have rooms.

2180
01:38:10,500 --> 01:38:13,400
A lot of effects on them to a lot of things that happen in them.

2181
01:38:13,900 --> 01:38:15,400
That's really more what I'm concerned about.

2182
01:38:15,400 --> 01:38:18,400
So I want to start by saying, let's focus on that.

2183
01:38:18,400 --> 01:38:21,100
Now, if we get to the end of the game and we find that there's just

2184
01:38:21,100 --> 01:38:24,100
that could never happen, like you just don't ever change the geometry

2185
01:38:24,100 --> 01:38:27,800
room hardly ever then, then maybe it would be a good case to start

2186
01:38:27,800 --> 01:38:28,500
thinking about that.

2187
01:38:28,500 --> 01:38:32,000
But I don't want to design the engine up front around the best case

2188
01:38:32,300 --> 01:38:34,000
because then it will all fall apart.

2189
01:38:34,000 --> 01:38:36,900
If we decide that the design actually needs that worst case, so, I'm

2190
01:38:36,900 --> 01:38:39,800
focusing on this for now and we can always optimize later.

2191
01:38:40,400 --> 01:38:43,500
If we find that actually our game is mostly in the best case scenario.

2192
01:38:50,900 --> 01:38:52,000
Let's see.

2193
01:38:52,000 --> 01:38:53,100
Let's see.

2194
01:39:02,100 --> 01:39:06,300
Are you worried about memory leaks yet, or do you think we answered

2195
01:39:06,300 --> 01:39:07,100
this question yesterday?

2196
01:39:07,100 --> 01:39:07,600
See?

2197
01:39:07,700 --> 01:39:08,900
How could we have a memory leak?

2198
01:39:08,900 --> 01:39:10,400
We haven't allocated any memory.

2199
01:39:10,700 --> 01:39:11,400
We can't have a memory.

2200
01:39:11,400 --> 01:39:12,100
Like, right.

2201
01:39:12,800 --> 01:39:14,400
So I'm not sure what that actually means.

2202
01:39:14,500 --> 01:39:15,700
We're putting all of our stuff.

2203
01:39:15,700 --> 01:39:17,500
Our world map is in permanent storage.

2204
01:39:17,500 --> 01:39:19,100
We will flush that permanent storage overdone.

2205
01:39:19,100 --> 01:39:21,300
So we can't, we literally can't have a memory leak yet.

2206
01:39:21,600 --> 01:39:23,800
So it would be kind of crazy to worry about it.

2207
01:39:23,800 --> 01:39:26,200
Something that literally cannot happen yet.

2208
01:39:27,400 --> 01:39:29,700
So, no, I'm definitely not worried about memory leaks.

2209
01:39:32,200 --> 01:39:33,200
Arteries, bad.

2210
01:39:33,200 --> 01:39:35,200
I see places where you could use them, but don't know.

2211
01:39:35,200 --> 01:39:35,900
I use Turner's.

2212
01:39:36,800 --> 01:39:37,700
They're totally fine.

2213
01:39:37,900 --> 01:39:40,100
Sometimes I just think they're a little harder to read.

2214
01:39:40,100 --> 01:39:42,900
But but no, I in fact, we've already used turn reason the code in

2215
01:39:42,900 --> 01:39:43,400
certain places.

2216
01:39:43,400 --> 01:39:43,800
I believe.

2217
01:39:43,800 --> 01:39:45,200
So attorneys are totally fine.

2218
01:39:45,200 --> 01:39:46,800
If you want to use them, go for it.

2219
01:39:46,800 --> 01:39:48,500
I do use them fairly frequently.

2220
01:39:52,300 --> 01:39:54,000
Let's see.

2221
01:39:54,400 --> 01:39:56,300
Okay, getting to the end here.

2222
01:39:58,500 --> 01:40:00,000
Let's see.

2223
01:40:01,900 --> 01:40:04,300
Why is it not possible to save the full map?

2224
01:40:04,300 --> 01:40:06,000
But I think this will be the last question.

2225
01:40:06,300 --> 01:40:08,800
Why is it not possible to save the full map megatexture did this to

2226
01:40:08,800 --> 01:40:09,500
you didn't it?

2227
01:40:10,000 --> 01:40:14,100
So the answer is, we could save the full map, but we couldn't keep it

2228
01:40:14,100 --> 01:40:14,700
in memory.

2229
01:40:15,000 --> 01:40:17,500
So for example, Mega texture is a good example.

2230
01:40:18,100 --> 01:40:21,800
Mega texture would not fit in memory most of the time like the whole

2231
01:40:21,800 --> 01:40:24,900
point in mega texture is your paging it in and out from disk, right?

2232
01:40:25,400 --> 01:40:29,400
So basically, assuming that we want our map to fit in a reasonable

2233
01:40:29,400 --> 01:40:31,500
amount of memory, we

2234
01:40:31,700 --> 01:40:38,800
Can't we have to store its parsley and and also just we just don't

2235
01:40:38,800 --> 01:40:41,800
want to waste all that space for the most part, saving things where

2236
01:40:41,800 --> 01:40:43,800
there isn't anything just seems kind of wasteful in general.

2237
01:40:43,800 --> 01:40:46,600
But yeah, if you want to do megatexture, you're talking about an off

2238
01:40:46,600 --> 01:40:47,300
disk scheme.

2239
01:40:47,500 --> 01:40:48,700
So that's kind of saying like, okay.

2240
01:40:48,700 --> 01:40:51,800
We've got a 4 billion by four billion thing, right?

2241
01:40:52,200 --> 01:40:55,300
And so if you wanted to save that, let's see how big that would be.

2242
01:40:55,300 --> 01:40:57,700
I mean, you even that you wouldn't be able to really save the whole

2243
01:40:57,700 --> 01:40:58,500
thing, right?

2244
01:41:00,100 --> 01:41:00,800
So that's

2245
01:41:01,700 --> 01:41:02,700
Four times ten.

2246
01:41:02,700 --> 01:41:09,200
Oops, for x 1024 x 1024 times 24 equals this.

2247
01:41:09,200 --> 01:41:10,800
And that's a squared.

2248
01:41:11,500 --> 01:41:14,300
So that's that big, that's how big that is.

2249
01:41:14,900 --> 01:41:19,800
And now if you want to know that in say terabytes, we can divided by

2250
01:41:19,800 --> 01:41:20,900
1024.

2251
01:41:21,400 --> 01:41:21,900
Oops.

2252
01:41:22,800 --> 01:41:23,500
That's no good.

2253
01:41:23,800 --> 01:41:26,300
So well actually just going to do this in gigabytes.

2254
01:41:26,400 --> 01:41:29,100
So that's 4 GB by 4 GB, right?

2255
01:41:29,600 --> 01:41:31,500
Would that would that be an accurate statement?

2256
01:41:32,100 --> 01:41:34,500
So I think is that correct?

2257
01:41:35,000 --> 01:41:37,700
Yeah, so it's basically 16 times 4.

2258
01:41:37,700 --> 01:41:39,600
So this would be 64 GB.

2259
01:41:40,400 --> 01:41:44,200
I believe to store 1 d word per tile which are probably going to want

2260
01:41:44,200 --> 01:41:45,300
to store a lot more than that.

2261
01:41:46,200 --> 01:41:50,400
But even if you just started one, d word for tile, that would be 64

2262
01:41:50,400 --> 01:41:50,900
GB.

2263
01:41:50,900 --> 01:41:52,500
I believe I'm doing that math correctly.

2264
01:41:54,800 --> 01:41:56,300
So basically 64 GB.

2265
01:41:56,300 --> 01:41:58,700
Nobody has that much memory in their machine these days, eventually,

2266
01:41:58,700 --> 01:41:59,900
then maybe they will, but not right.

2267
01:42:00,000 --> 01:42:04,700
Now, so you'd basically be talking about storing 64 gigabytes of data

2268
01:42:04,700 --> 01:42:07,500
on disk, and then paging it in and out.

2269
01:42:07,500 --> 01:42:08,500
You'd probably try to compress it.

2270
01:42:08,500 --> 01:42:09,400
May be on disc as well.

2271
01:42:09,400 --> 01:42:10,000
I'm not sure.

2272
01:42:10,200 --> 01:42:11,500
You'd have to store 64 GB.

2273
01:42:11,500 --> 01:42:14,000
You got the page it in, since it's procedurally, generated.

2274
01:42:14,000 --> 01:42:18,500
That means you would be writing 64 gigabytes of data, at startup of

2275
01:42:18,500 --> 01:42:19,900
procedurally generated stuff.

2276
01:42:19,900 --> 01:42:22,500
How long does it take to to write 64 GB?

2277
01:42:22,500 --> 01:42:25,100
Well, I think hard drives right at something like 500 megabytes a

2278
01:42:25,100 --> 01:42:25,800
second.

2279
01:42:25,900 --> 01:42:27,400
That's two seconds per gigabyte.

2280
01:42:27,800 --> 01:42:29,500
So you're talking about

2281
01:42:30,000 --> 01:42:31,300
Two minutes of startup time.

2282
01:42:31,300 --> 01:42:34,500
Just to write your game world to disk, just not looking promising,

2283
01:42:34,500 --> 01:42:34,800
right?

2284
01:42:34,800 --> 01:42:36,400
So so I think it's pretty much safe to say.

2285
01:42:36,400 --> 01:42:38,300
You're never going to want to do this in a procedurally generated

2286
01:42:38,300 --> 01:42:38,700
game.

2287
01:42:39,100 --> 01:42:41,500
You really do not want to store the full map.

2288
01:42:41,700 --> 01:42:45,200
If it's going to be something large, you want the sparseness because

2289
01:42:45,200 --> 01:42:47,800
we're not going to actually have a 4 billion by four billion world

2290
01:42:47,800 --> 01:42:49,700
because the the player could never walk through it.

2291
01:42:49,700 --> 01:42:51,100
It's going to be something much smaller.

2292
01:42:51,300 --> 01:42:54,400
So basically, you want to just focus on storing what we actually use

2293
01:42:54,500 --> 01:42:55,700
and not storing all the rest of it.

2294
01:42:55,700 --> 01:42:58,500
So we don't have this huge data management problem that we don't

2295
01:42:58,500 --> 01:42:59,800
really need to solve that makes sense.

2296
01:43:00,500 --> 01:43:02,200
All right, so I think that's it for today.

2297
01:43:05,500 --> 01:43:07,200
I think that is about it.

2298
01:43:08,400 --> 01:43:10,000
Am I wearing my earphones backwards today?

2299
01:43:10,000 --> 01:43:10,800
Yes, I am.

2300
01:43:11,900 --> 01:43:14,800
I actually am doing that.

2301
01:43:16,300 --> 01:43:17,400
Oh, and that's right.

2302
01:43:17,500 --> 01:43:18,400
I forgot.

2303
01:43:18,400 --> 01:43:20,700
Someone was just mentioned on stream when I did that math.

2304
01:43:20,700 --> 01:43:26,300
I actually totally forgot that we have multiple planes to, right?

2305
01:43:26,500 --> 01:43:29,200
So it wouldn't be just, it's not just for building my farm.

2306
01:43:29,200 --> 01:43:30,700
It's 4 billion by forbidding Muhammad.

2307
01:43:30,700 --> 01:43:31,400
Easy slices.

2308
01:43:31,400 --> 01:43:33,300
We wanted as well, right?

2309
01:43:33,300 --> 01:43:34,600
If we weren't storing its parsley.

2310
01:43:36,100 --> 01:43:40,600
Right, so it's going to be, it's going to be 4 GB.

2311
01:43:42,100 --> 01:43:42,600
It's going to be.

2312
01:43:42,600 --> 01:43:43,900
Yeah, it's going to be way bigger than that.

2313
01:43:43,900 --> 01:43:50,900
In fact, it's going to be 4, x, 1024 x, 1024 1024 and yeah, I

2314
01:43:50,900 --> 01:43:53,000
couldn't, I forgot to do the gigabyte squared.

2315
01:43:53,000 --> 01:43:54,500
So that's even the wrong calculation.

2316
01:43:54,600 --> 01:43:55,900
I did that calculation wrong.

2317
01:43:56,400 --> 01:44:00,600
So this is how many tiles there are across we square that to get the

2318
01:44:00,600 --> 01:44:02,600
total number of tiles, right?

2319
01:44:03,300 --> 01:44:04,700
Where's this, the square button Square it?

2320
01:44:04,700 --> 01:44:05,100
That's it.

2321
01:44:05,200 --> 01:44:05,900
Total number of tiles.

2322
01:44:06,100 --> 01:44:07,500
Now, how many slices we want?

2323
01:44:07,500 --> 01:44:10,900
Let's say we want, you know, 16z slices at least right?

2324
01:44:10,900 --> 01:44:12,300
So 16z slices.

2325
01:44:12,500 --> 01:44:15,000
That's how many tiles we have total, right?

2326
01:44:15,400 --> 01:44:17,700
So now if we copy that number

2327
01:44:19,700 --> 01:44:20,200
Right.

2328
01:44:20,800 --> 01:44:25,600
We're going to divide that number by, let's say a gigabyte, right?

2329
01:44:26,300 --> 01:44:27,500
So that's a gigabyte.

2330
01:44:28,000 --> 01:44:30,300
So this is actually the number I was way off.

2331
01:44:30,300 --> 01:44:31,600
I forgot to gb2.

2332
01:44:31,600 --> 01:44:33,900
I did four times for, but I forgot to squirt.

2333
01:44:33,900 --> 01:44:40,600
You know, I did, I did for GB x 4 GB.

2334
01:44:41,000 --> 01:44:43,600
I did 4 times 4, right?

2335
01:44:43,600 --> 01:44:46,500
Which is 16, but I forgot to gb2.

2336
01:44:46,500 --> 01:44:49,100
So that's GB squared, right?

2337
01:44:49,500 --> 01:44:50,000
That makes sense.

2338
01:44:50,000 --> 01:44:50,800
So I forgot to record it.

2339
01:44:50,800 --> 01:44:54,200
So now I've squared the GB looking at its way worse, right?

2340
01:44:54,500 --> 01:44:56,600
In fact, let's go ahead and change that to terabytes.

2341
01:44:57,900 --> 01:44:59,600
Now, we're talking about.

2342
01:45:00,000 --> 01:45:06,700
In 68 million terabytes, so you couldn't even store that on a drive.

2343
01:45:07,000 --> 01:45:10,200
There's no such thing as a 268 terabyte drive.

2344
01:45:10,500 --> 01:45:14,200
So, yeah, so forget about it, like like whole world storage for that,

2345
01:45:14,200 --> 01:45:15,800
those dimensions of isn't going to happen.

2346
01:45:18,900 --> 01:45:19,300
All right.

2347
01:45:19,300 --> 01:45:20,900
I think we've come to the end of the questions.

2348
01:45:22,500 --> 01:45:26,200
So, thank you, everyone for joining me, handmade hero day.

2349
01:45:26,200 --> 01:45:26,800
35.

2350
01:45:26,800 --> 01:45:28,300
It has been a pleasure coding with you.

2351
01:45:28,300 --> 01:45:32,600
As always we are basically finished up our tile map stuff, our Tom app

2352
01:45:32,600 --> 01:45:33,400
storage stuff.

2353
01:45:34,300 --> 01:45:38,600
So we kind of know now at the end of day 35 year, we kind of know.

2354
01:45:40,600 --> 01:45:42,900
What we want our engine to do for tilemap storage.

2355
01:45:42,900 --> 01:45:44,900
It's kind of pretty, I think it's laid out reasonably.

2356
01:45:44,900 --> 01:45:46,800
Well, so we'll be able to write this pretty clearly.

2357
01:45:46,800 --> 01:45:49,500
We know the sort of stuff we need so we can start moving on.

2358
01:45:49,500 --> 01:45:50,200
I think next week.

2359
01:45:50,200 --> 01:45:52,800
We'll add our little up and downs just so we can have them in there.

2360
01:45:53,300 --> 01:45:56,000
But I think next week we'll be ready to move on to some something

2361
01:45:56,000 --> 01:45:56,300
else.

2362
01:45:56,300 --> 01:45:57,200
So that'll be good.

2363
01:45:58,200 --> 01:46:00,500
Maybe we'll start to think about how we're going to render the tilemap

2364
01:46:00,500 --> 01:46:01,100
graphics.

2365
01:46:01,700 --> 01:46:03,400
So the stuff on top of their, maybe that's what we'll do next week.

2366
01:46:03,400 --> 01:46:03,800
I'm not sure.

2367
01:46:03,800 --> 01:46:05,500
I have to think about what I want to do next week.

2368
01:46:05,600 --> 01:46:06,600
What's the most important thing to do?

2369
01:46:06,600 --> 01:46:07,600
We've also got player motion.

2370
01:46:07,600 --> 01:46:08,000
Think about.

2371
01:46:08,000 --> 01:46:09,200
We've got monsters thing about

2372
01:46:09,900 --> 01:46:11,500
So we've got a bunch of things that we need to do.

2373
01:46:11,500 --> 01:46:15,500
But yeah, so some let's think about not sure what we'll do next week,

2374
01:46:15,500 --> 01:46:20,300
but please, if you enjoyed the series, please think about joining us

2375
01:46:20,700 --> 01:46:22,500
for whatever we do decide to do next week.

2376
01:46:22,500 --> 01:46:23,600
I promise, it'll be interesting.

2377
01:46:24,100 --> 01:46:26,200
We'll be doing it Monday at 8 p.m.

2378
01:46:26,800 --> 01:46:28,200
Our standard slot Monday, 8:00 p.m.

2379
01:46:28,200 --> 01:46:29,300
Pacific Standard time.

2380
01:46:30,000 --> 01:46:32,000
So please come back for more game programming.

2381
01:46:32,200 --> 01:46:33,300
We would love to see you here.

2382
01:46:34,000 --> 01:46:37,400
If you would like to follow along at home with the source code.

2383
01:46:37,700 --> 01:46:38,600
It is available.

2384
01:46:38,700 --> 01:46:39,100
Anyone who?

2385
01:46:39,400 --> 01:46:40,100
Where's the game?

2386
01:46:40,400 --> 01:46:41,500
Go ahead and close this down here?

2387
01:46:42,100 --> 01:46:44,400
Anyone who pre-orders the game on handmade hero dot?

2388
01:46:44,400 --> 01:46:46,200
Org, gets instant access to the source code.

2389
01:46:46,200 --> 01:46:46,700
You can go on.

2390
01:46:46,700 --> 01:46:48,200
Download everything.

2391
01:46:48,200 --> 01:46:52,000
I update it every time immediately after we finished work for the day.

2392
01:46:52,000 --> 01:46:52,500
I upload it.

2393
01:46:52,500 --> 01:46:56,500
So you can play around with it yourself, learn from it and do whatever

2394
01:46:56,500 --> 01:47:00,000
sorts of things you want to do to sort of learn game, programming

2395
01:47:00,400 --> 01:47:03,000
inside the context of the handmade hero.

2396
01:47:03,000 --> 01:47:03,500
Sourcetree.

2397
01:47:03,500 --> 01:47:05,300
So if you want to preorder that you can download that.

2398
01:47:05,300 --> 01:47:08,000
And again it's updated every day so you can download it a fresh and

2399
01:47:08,000 --> 01:47:09,200
keep track of where we are.

2400
01:47:09,300 --> 01:47:10,000
Are on the series.

2401
01:47:10,300 --> 01:47:12,600
If you just want to support the video series, we do have a patreon.

2402
01:47:12,600 --> 01:47:14,600
You can subscribe to so you can head on over there.

2403
01:47:14,800 --> 01:47:17,000
And if you're trying to learn from the series, there are a lot of

2404
01:47:17,000 --> 01:47:20,500
additional resources, you can use at the news and Forum site.

2405
01:47:20,500 --> 01:47:22,800
If you click through there, there's all kind of stuff episode guide a

2406
01:47:22,800 --> 01:47:23,600
discussion forum.

2407
01:47:23,600 --> 01:47:24,500
The schedule is posted.

2408
01:47:24,500 --> 01:47:25,900
They're usually on Mondays.

2409
01:47:27,000 --> 01:47:29,500
There's ports to Mac and Linux if you're interested in those.

2410
01:47:29,800 --> 01:47:31,000
So there's all kinds of good stuff there.

2411
01:47:31,000 --> 01:47:31,900
So please check it out.

2412
01:47:31,900 --> 01:47:33,600
If you're trying to learn from series is a great place to go.

2413
01:47:34,100 --> 01:47:35,700
Thank you everyone for joining us.

2414
01:47:36,100 --> 01:47:37,700
We will be back here, Monday, 8:00 p.m.

2415
01:47:37,700 --> 01:47:38,400
PST.

2416
01:47:38,500 --> 01:47:39,200
It's been a pleasure.

2417
01:47:39,400 --> 01:47:42,200
Always and I hope to see you there.

2418
01:47:42,400 --> 01:47:44,400
Thanks everyone and have a good weekend.

