1
00:00:01,400 --> 00:00:04,100
Okay, hello everyone, and welcome to handmade hero.

2
00:00:04,100 --> 00:00:07,300
The show where we code complete game live on Twitch.

3
00:00:07,700 --> 00:00:09,200
No engine, no, libraries.

4
00:00:09,200 --> 00:00:13,800
It's just our code here and this is an educational stream.

5
00:00:13,800 --> 00:00:17,000
Obviously, it's a way for us to take a look at absolutely everything

6
00:00:17,000 --> 00:00:20,200
that goes on when a game is actually running.

7
00:00:20,200 --> 00:00:22,900
So including the engine including what the graphics card does

8
00:00:22,900 --> 00:00:23,900
basically everything.

9
00:00:24,000 --> 00:00:29,000
So we look at everything in full detail and, you know, basic try to

10
00:00:29,000 --> 00:00:30,300
get get sort of a holistic.

11
00:00:30,500 --> 00:00:33,600
You of how game programming actually works.

12
00:00:33,600 --> 00:00:36,000
Not just a pigeon, whole thing of like, how to do this one little

13
00:00:36,000 --> 00:00:38,300
thing and it's been going pretty well.

14
00:00:38,300 --> 00:00:40,200
So far, we're right in the middle of a topic.

15
00:00:40,200 --> 00:00:43,200
That's very important for any kind of game development, which is

16
00:00:43,200 --> 00:00:47,100
optimization what to do when your code is too slow and you're not

17
00:00:47,100 --> 00:00:48,600
getting the performance that you need.

18
00:00:49,000 --> 00:00:50,600
And so we're taking a look at that stuff.

19
00:00:50,600 --> 00:00:53,500
Right now, what we did yesterday was we kind of verified some

20
00:00:53,500 --> 00:00:58,000
performance analysis stuff by putting some performance counters in our

21
00:00:58,000 --> 00:00:58,200
code.

22
00:00:58,200 --> 00:00:59,800
That tell us how long things take

23
00:01:00,400 --> 00:01:03,300
And today what we'd like to do is start looking at what we can

24
00:01:03,300 --> 00:01:10,300
actually do about that in order to start acting on the information

25
00:01:10,300 --> 00:01:14,700
that we have based on the performance information that we've gathered.

26
00:01:14,700 --> 00:01:15,900
So I'd like to go ahead and jump into that.

27
00:01:15,900 --> 00:01:18,500
If you want to follow along at home today is day 114.

28
00:01:18,500 --> 00:01:21,400
So if you have pre-ordered, the game on handmade hero dot-org, you

29
00:01:21,400 --> 00:01:25,400
want to download day 113 source code because that is the source code

30
00:01:26,000 --> 00:01:27,100
that I am starting with today.

31
00:01:27,100 --> 00:01:30,200
So if you want to follow along at home, please make sure you start

32
00:01:30,200 --> 00:01:30,300
with

33
00:01:30,500 --> 00:01:30,900
That.

34
00:01:31,700 --> 00:01:34,000
So let's go ahead and open things up.

35
00:01:34,500 --> 00:01:35,400
Open them up.

36
00:01:37,800 --> 00:01:41,500
And if you remember where we left off before, we were taking a look at

37
00:01:41,500 --> 00:01:43,900
draw rectangle slowly, right?

38
00:01:44,700 --> 00:01:48,800
And what we had is, we were dumping to the, the debug Port.

39
00:01:49,100 --> 00:01:53,000
You can see that we would, we would every frame dump out some psycho.

40
00:01:53,000 --> 00:01:56,900
Counters that tell us some interesting information about our code such

41
00:01:56,900 --> 00:02:00,300
as the fact that we are currently spending about three hundred eighty

42
00:02:00,300 --> 00:02:03,900
four cycles per pixel doing things, right?

43
00:02:06,500 --> 00:02:11,000
And we were at the point yesterday where we want to start thinking

44
00:02:11,000 --> 00:02:14,600
about what is a reasonable number of cycles per pixel that we actually

45
00:02:14,600 --> 00:02:17,600
think we could get this routine down to.

46
00:02:18,100 --> 00:02:21,000
And so, one of the things that we kind of need to do at this point in

47
00:02:21,000 --> 00:02:24,200
order to start forming, that kind of an estimate, is we need to start

48
00:02:24,200 --> 00:02:27,700
thinking about draw rectangle, slowly, a little more carefully because

49
00:02:27,800 --> 00:02:29,800
we really were, just trying to get it working.

50
00:02:29,800 --> 00:02:33,300
When we wrote it the first time we were just basically trying to learn

51
00:02:34,900 --> 00:02:39,400
How to draw texture map triangles, we didn't actually try to organize

52
00:02:39,400 --> 00:02:42,700
this code to be particularly optimal or to do anything.

53
00:02:42,700 --> 00:02:43,800
Particularly interesting.

54
00:02:44,100 --> 00:02:48,100
In terms of performance, all we did was do what worked right.

55
00:02:48,500 --> 00:02:51,800
And so what we need to start looking at now is, can we do some

56
00:02:51,800 --> 00:02:55,400
Transformations on this code to put it into what we think is a

57
00:02:55,400 --> 00:02:59,800
relatively clean minimal set of calculations

58
00:03:00,000 --> 00:03:01,400
Instead, it's actually doing.

59
00:03:03,000 --> 00:03:07,600
And then we can look at that and go with this algorithm that we have

60
00:03:07,600 --> 00:03:13,500
here, what how, how much, how many operations do we actually have to

61
00:03:13,500 --> 00:03:14,000
do?

62
00:03:14,200 --> 00:03:18,400
And that will kind of give us a little bit of guidance as to what we

63
00:03:18,400 --> 00:03:22,400
actually, you know, what, we can actually expect to see in terms of

64
00:03:22,400 --> 00:03:25,900
Peak Performance, which kind of gives us a goal to work towards,

65
00:03:25,900 --> 00:03:26,500
right?

66
00:03:26,900 --> 00:03:30,300
So what I actually want to do here with draw a rectangle slowly is I

67
00:03:30,300 --> 00:03:32,600
would like to Jimmy

68
00:03:34,500 --> 00:03:37,000
I would like to sort of Spawn this routine out.

69
00:03:37,000 --> 00:03:41,700
Basically, I'd like to take draw a rectangle slowly and I'd like to

70
00:03:42,200 --> 00:03:47,200
sort of pull it out into its own into into basically a new version,

71
00:03:47,400 --> 00:03:48,000
right?

72
00:03:48,300 --> 00:03:54,500
And we'll call that draw rectangle quickly, maybe we'll call it draw a

73
00:03:54,500 --> 00:03:57,600
rectangle, hopefully quickly, right?

74
00:03:59,400 --> 00:04:03,100
And we can, we can go ahead and have that and we're going to take

75
00:04:03,100 --> 00:04:03,600
that.

76
00:04:04,100 --> 00:04:07,400
Normal mapping out for the moment because we're not, you know, we're

77
00:04:07,400 --> 00:04:10,800
not going to focus on that just yet but we're going to leave

78
00:04:10,800 --> 00:04:11,800
everything else in place.

79
00:04:11,800 --> 00:04:14,100
So we're going to do everything else in here and we're going to have

80
00:04:14,100 --> 00:04:15,700
draw rectangle hopefully quickly.

81
00:04:18,399 --> 00:04:19,600
Single hopefully quickly in here.

82
00:04:20,300 --> 00:04:24,600
I go to add a performance camper for that, and we're going to make a

83
00:04:24,600 --> 00:04:25,300
version of this.

84
00:04:25,300 --> 00:04:29,500
That's just a little more cleaned up in terms of what operations it

85
00:04:29,500 --> 00:04:30,600
actually has to do.

86
00:04:31,300 --> 00:04:33,800
Let's see here, hopefully quickly.

87
00:04:34,900 --> 00:04:39,900
So we now, we know that really, this, this Preamble here is not

88
00:04:39,900 --> 00:04:43,100
something that we super need to focus on at the moment.

89
00:04:43,100 --> 00:04:46,900
And the reason for that, of course, is that if we were to

90
00:04:47,100 --> 00:04:51,400
Actually, if we were to actually optimize this part that's not getting

91
00:04:51,400 --> 00:04:54,800
called per pixel, it would have very little effect on the performance

92
00:04:54,800 --> 00:04:56,400
as it is at the moment, right?

93
00:04:56,600 --> 00:05:00,200
Most of our time, we know is spent actually inside because the

94
00:05:00,200 --> 00:05:04,200
performance counters are spent inside this, these pixel loops and that

95
00:05:04,200 --> 00:05:07,500
makes perfect sense because there's just a lot more pixels than there

96
00:05:07,500 --> 00:05:09,900
are rectangles, right?

97
00:05:10,000 --> 00:05:12,300
And so you're spending a lot of time in here because hey there's just

98
00:05:12,300 --> 00:05:13,300
a lot more pixels the rectangle.

99
00:05:13,300 --> 00:05:16,600
So it doesn't matter what you do / rectangle, / pixels where the time

100
00:05:16,600 --> 00:05:16,900
is spent.

101
00:05:17,000 --> 00:05:17,200
No.

102
00:05:20,400 --> 00:05:20,500
Right.

103
00:05:23,400 --> 00:05:28,100
Okay, so what we'd like to do now is we'd like to and I'm going to

104
00:05:28,100 --> 00:05:31,900
leave these time blocks for the moment to just be test pixel.

105
00:05:32,300 --> 00:05:35,600
Actually, I'm not, I'm because we're not going to call these and if we

106
00:05:35,600 --> 00:05:38,900
start calling them together, we can play with that but I'm gonna

107
00:05:39,000 --> 00:05:41,300
switch between these two routine so I don't really care.

108
00:05:42,600 --> 00:05:43,900
So, let's take a look at this first.

109
00:05:43,900 --> 00:05:47,200
I'm going to go ahead and remove everything that we don't actually

110
00:05:47,200 --> 00:05:48,800
need in here, right?

111
00:05:48,800 --> 00:05:52,200
So I'm going to take out this this normal mapping code, right?

112
00:05:52,200 --> 00:05:53,000
That we had in here.

113
00:05:54,800 --> 00:05:55,500
Like so.

114
00:05:57,500 --> 00:05:58,600
Believe that's everything.

115
00:06:00,100 --> 00:06:03,100
And I am going to.

116
00:06:05,400 --> 00:06:08,400
Make sure I don't delete anything that we need.

117
00:06:09,300 --> 00:06:12,000
So let's go ahead and that in there.

118
00:06:13,600 --> 00:06:15,800
Okay, did I get everything correctly there?

119
00:06:16,700 --> 00:06:17,600
Okay, there we go.

120
00:06:18,100 --> 00:06:18,300
Draw.

121
00:06:18,300 --> 00:06:24,100
A rectangle slowly will be replaced with draw a rectangle, hopefully

122
00:06:24,100 --> 00:06:24,700
quickly.

123
00:06:26,400 --> 00:06:29,400
And of course, this never passed any normal mapping to it anyway when

124
00:06:29,400 --> 00:06:32,000
we actually just drew bitmap that was not, so I did that.

125
00:06:32,000 --> 00:06:35,100
So now I want to make sure that that's the running properly, it is.

126
00:06:35,100 --> 00:06:39,800
So that's all good and we can see that the timing is the same, which

127
00:06:39,800 --> 00:06:41,900
is what we would have expected, right?

128
00:06:43,400 --> 00:06:43,800
Okay.

129
00:06:45,200 --> 00:06:49,100
So up and draw a rectangle hopefully quickly, I'm going to go through

130
00:06:49,100 --> 00:06:51,800
this Loop now and start to take a look at what it is that we're

131
00:06:51,800 --> 00:06:53,600
actually doing here, right?

132
00:06:53,700 --> 00:06:57,100
And maybe get rid of some of the vector operations as well, just so we

133
00:06:57,100 --> 00:07:02,100
can really be much clearer as to what's actually happening inside the

134
00:07:02,100 --> 00:07:03,500
routine, right?

135
00:07:04,400 --> 00:07:07,400
And you can kind of see well you know we've got some stuff here,

136
00:07:07,400 --> 00:07:11,700
that's that's relatively straightforward, you know, we're advancing by

137
00:07:11,700 --> 00:07:13,600
pixels that seems all totally fine.

138
00:07:13,600 --> 00:07:14,800
But inside here.

139
00:07:14,900 --> 00:07:18,800
We do this stuff and we're doing our DOT products in that, that sort

140
00:07:18,800 --> 00:07:19,300
of thing.

141
00:07:20,400 --> 00:07:24,600
I just want to make sure that this stuff looks relatively kosher you

142
00:07:24,600 --> 00:07:29,300
can kind of see in here already that there's some stuff that probably

143
00:07:29,300 --> 00:07:31,200
doesn't make a whole lot of sense.

144
00:07:31,200 --> 00:07:38,600
Because, you know, x axis, minus y axis and this like - perp y-axis,

145
00:07:38,600 --> 00:07:42,700
all this sort of stuff, actually boils down to some pretty basic

146
00:07:42,700 --> 00:07:44,600
things that are going to be happening in.

147
00:07:44,900 --> 00:07:48,100
Taylor Forum that we could optimize out in also even in Vector form.

148
00:07:48,100 --> 00:07:52,600
You can see we, you know, x-axis and y-axis are constant.

149
00:07:52,600 --> 00:07:56,200
So, you know, even if we had to do it this way, you wouldn't probably

150
00:07:56,400 --> 00:07:59,900
inside in the middle of your Loop, constantly be doing repeated

151
00:07:59,900 --> 00:08:01,300
subtractions, and stuff like that.

152
00:08:01,600 --> 00:08:05,400
So I want to take a look at this Edge testing code, and maybe make it

153
00:08:05,400 --> 00:08:08,400
a little bit more explicit, right?

154
00:08:09,600 --> 00:08:13,500
So if we take a look here, we've got the inner product of D with -

155
00:08:13,500 --> 00:08:15,800
perp x-axis, right?

156
00:08:16,600 --> 00:08:20,100
And we kind of know exactly what perk does right?

157
00:08:20,100 --> 00:08:27,900
If we go in here to math.h, here is perp, right?

158
00:08:27,900 --> 00:08:32,100
It just swaps the two things and it swaps.

159
00:08:32,100 --> 00:08:34,700
The two things in the gates, the the Y, right?

160
00:08:35,100 --> 00:08:38,600
So we actually know that the inner

161
00:08:38,799 --> 00:08:45,200
a product of D with perp is just the same as if we had written out

162
00:08:45,300 --> 00:08:48,100
that inner product like this, right?

163
00:08:48,200 --> 00:08:54,700
So we could say at zero equals the inner product and we know that a is

164
00:08:54,700 --> 00:08:56,100
d, right?

165
00:08:56,500 --> 00:08:59,500
And we know that b is just the perp of x-axis.

166
00:09:00,300 --> 00:09:02,300
So, we know that this term will become negative.

167
00:09:02,600 --> 00:09:04,800
Here is x axis X, right?

168
00:09:04,900 --> 00:09:06,300
And here is x axis y.

169
00:09:08,800 --> 00:09:15,500
Sorry X swap them like so right, so we know that that's actually all

170
00:09:15,500 --> 00:09:16,800
that that was Computing.

171
00:09:17,200 --> 00:09:19,800
And so we can kind of cut down the complexity there by just looking at

172
00:09:19,800 --> 00:09:23,400
that and going, okay, that's just, you know, a very straightforward

173
00:09:23,400 --> 00:09:24,100
computation.

174
00:09:33,400 --> 00:09:34,300
Get rid of that.

175
00:09:36,000 --> 00:09:40,400
We go for Edge one, we have basically the same thing, right?

176
00:09:41,000 --> 00:09:42,800
We've got, you know what?

177
00:09:42,800 --> 00:09:45,300
And what's kind of interesting about these two here is you can also

178
00:09:45,300 --> 00:09:49,900
see there be there is additional kind of there's additional kind of

179
00:09:49,900 --> 00:09:53,500
stuff we could take advantage of in certain circumstances, but I'll

180
00:09:53,500 --> 00:09:56,600
kind of leave that for later because you can kind of see if you know

181
00:09:56,600 --> 00:10:00,700
that the y axis is the x axis.

182
00:10:00,700 --> 00:10:04,000
But perpendicular, then when you perpendicular again, you just get the

183
00:10:04,000 --> 00:10:05,600
x axis back pointing in the negative.

184
00:10:05,800 --> 00:10:06,900
Action, right?

185
00:10:07,500 --> 00:10:10,700
So you kind of have this interesting thing where you're like okay you

186
00:10:10,700 --> 00:10:15,600
know, looking at this actual value you can kind of

187
00:10:17,200 --> 00:10:19,700
You can kind of see where you would get some additional stuff.

188
00:10:19,700 --> 00:10:22,800
In fact, I'm going to, I'm going to take a quick detour over here to

189
00:10:22,800 --> 00:10:23,300
the Blackboard.

190
00:10:23,300 --> 00:10:30,400
I just want to kind of look and see if we really actually need to do

191
00:10:31,000 --> 00:10:33,700
what we're doing here with all of these inner products actually now

192
00:10:33,700 --> 00:10:36,500
that I think about it because if you take a look at what's actually

193
00:10:36,500 --> 00:10:41,400
happening here, right, we've got a vector to the pixel, right?

194
00:10:41,400 --> 00:10:45,700
DD is a vector to the pixel, that's what it actually is, right?

195
00:10:45,700 --> 00:10:46,900
So that's, that's

196
00:10:47,100 --> 00:10:52,800
What, like d is, you know, and then we have, this is our x-axis, and

197
00:10:52,800 --> 00:10:54,500
this is our y-axis, right?

198
00:10:55,700 --> 00:11:02,700
and so, if we were to take D and do the inner product of D onto that,

199
00:11:02,700 --> 00:11:08,600
x-axis, I feel like we really shouldn't have to

200
00:11:11,000 --> 00:11:15,100
Like, I feel like we really shouldn't have to check all of those

201
00:11:15,100 --> 00:11:16,300
parameters, right?

202
00:11:16,300 --> 00:11:19,300
Because if we take that, that inner product,

203
00:11:20,400 --> 00:11:24,200
We could actually pre, we could do something like pre normalize that

204
00:11:24,200 --> 00:11:29,200
x-axis at the top of the routine and just look to see whether you know

205
00:11:29,200 --> 00:11:32,100
how far it had gone along it, right?

206
00:11:32,100 --> 00:11:36,500
So we could do one dot product and then just test the bounds you know

207
00:11:36,500 --> 00:11:38,400
on either side right?

208
00:11:38,600 --> 00:11:39,800
So I feel like we're all.

209
00:11:39,800 --> 00:11:44,900
So this is probably actually not the most efficient way we could

210
00:11:44,900 --> 00:11:49,400
actually iterate over this, you know, in terms of

211
00:11:50,200 --> 00:11:51,000
Our equations here.

212
00:11:51,000 --> 00:11:55,100
And similarly you can see right here, where Computing the U and the V

213
00:11:56,200 --> 00:11:59,800
to do our texture mapping and the you

214
00:12:00,000 --> 00:12:03,900
The V would also tell us whether we were inside the bitmap, right?

215
00:12:05,000 --> 00:12:08,200
I mean, if we just ignore this Edge stuff entirely, right?

216
00:12:08,200 --> 00:12:12,000
And didn't ever test the edges, what if we just tested, you know,

217
00:12:12,500 --> 00:12:14,300
tested these two, right?

218
00:12:16,100 --> 00:12:19,200
So yeah, I mean, suppose we were to compute the u and v coordinates

219
00:12:19,700 --> 00:12:22,900
and just look to see whether the u and v coordinates were actually

220
00:12:22,900 --> 00:12:24,300
inside the square.

221
00:12:24,600 --> 00:12:28,800
That seems like a pretty easy way to go and that gets rid of all this

222
00:12:28,800 --> 00:12:29,800
work, right?

223
00:12:30,000 --> 00:12:30,300
Right.

224
00:12:31,700 --> 00:12:32,700
That seemed reasonable.

225
00:12:33,200 --> 00:12:38,700
So I'm just saying maybe we just do this as a test.

226
00:12:40,000 --> 00:12:40,600
Right.

227
00:12:51,000 --> 00:12:51,900
Something like that.

228
00:12:53,100 --> 00:12:55,900
And I guess I don't know how we want to do inside outside.

229
00:12:55,900 --> 00:12:58,600
We'll have to think about that a little bit like which, which of these

230
00:12:59,200 --> 00:13:00,300
it actually goes to.

231
00:13:00,800 --> 00:13:03,100
I'm suspecting we probably need to do it like that.

232
00:13:04,000 --> 00:13:04,500
But yeah.

233
00:13:04,800 --> 00:13:08,100
So if we were to actually do that, do we actually even need any of

234
00:13:08,100 --> 00:13:08,900
this, right?

235
00:13:08,900 --> 00:13:11,200
Can we just get rid of that entirely for starters?

236
00:13:12,200 --> 00:13:18,300
So, let's take a look and hey unsurprisingly we did not actually need

237
00:13:18,300 --> 00:13:20,600
that and our game actually got a little

238
00:13:20,800 --> 00:13:23,200
Master just doing that, which is kind of funny.

239
00:13:23,600 --> 00:13:24,200
Right.

240
00:13:24,300 --> 00:13:26,000
You can see that it actually got.

241
00:13:26,300 --> 00:13:27,800
We were up at like 380.

242
00:13:27,800 --> 00:13:31,200
Something an hour it's we have three you got a little faster just

243
00:13:31,200 --> 00:13:32,100
getting rid of that.

244
00:13:32,300 --> 00:13:32,700
Okay.

245
00:13:33,700 --> 00:13:34,400
So anyway

246
00:13:35,500 --> 00:13:38,900
That seems much smarter anyway, because now we just have that inner

247
00:13:38,900 --> 00:13:39,600
product here.

248
00:13:42,200 --> 00:13:43,600
Time's the end of axis length.

249
00:13:43,800 --> 00:13:44,100
Right?

250
00:13:44,100 --> 00:13:45,100
Which seems pretty good.

251
00:13:45,500 --> 00:13:48,400
But if you look at that, now that I think about it, that's actually

252
00:13:48,400 --> 00:13:51,700
already doing too much work too because we could have just pre

253
00:13:51,700 --> 00:13:56,200
multiply the x axis by the invitation box of length squared to begin

254
00:13:56,200 --> 00:13:57,400
with, right?

255
00:13:58,400 --> 00:14:01,500
And if we were to, if we were to do that then we wouldn't have to

256
00:14:01,500 --> 00:14:02,800
multiply it every time.

257
00:14:03,100 --> 00:14:07,700
So that seems like a pretty reasonable thing to do as well, right?

258
00:14:07,800 --> 00:14:11,900
I mean, you can imagine if we did like some kind of like

259
00:14:12,200 --> 00:14:17,200
you know, and x-axis or something like this, which is just

260
00:14:18,800 --> 00:14:19,500
This.

261
00:14:20,900 --> 00:14:22,300
X, the x axis.

262
00:14:23,500 --> 00:14:27,300
We should be able to replace this with n x axis and then be done,

263
00:14:27,500 --> 00:14:28,100
right?

264
00:14:28,300 --> 00:14:37,400
P 2 and y axis equals that X, Y axis, so and y axis and off we go.

265
00:14:41,400 --> 00:14:41,900
I don't know.

266
00:14:43,700 --> 00:14:46,300
Just seems pretty basic right, pretty straightforward.

267
00:14:47,300 --> 00:14:49,300
And again, everything still Blitz.

268
00:14:49,300 --> 00:14:49,900
Fine.

269
00:14:50,300 --> 00:14:55,300
No issues there and just to make sure that I didn't mess anything up.

270
00:14:55,400 --> 00:14:59,000
We can also verify that we are actually calling that through a

271
00:14:59,000 --> 00:14:59,800
rectangle.

272
00:15:01,000 --> 00:15:02,200
But we quickly.

273
00:15:04,000 --> 00:15:04,500
Right.

274
00:15:07,200 --> 00:15:07,900
So, there we go.

275
00:15:11,500 --> 00:15:12,000
Right.

276
00:15:13,000 --> 00:15:15,300
And of course, it's hopping all around because it's in debug mode, but

277
00:15:15,300 --> 00:15:15,800
that's fine.

278
00:15:16,300 --> 00:15:20,000
All right, so again, I'm just going through here.

279
00:15:20,000 --> 00:15:20,800
It's very simple.

280
00:15:20,800 --> 00:15:24,000
Just pruning out stuff and getting us down to what would be a

281
00:15:24,000 --> 00:15:25,600
reasonable thing to even analyze.

282
00:15:25,600 --> 00:15:28,100
Because we just have a ton of stuff in here that just doesn't need to

283
00:15:28,100 --> 00:15:30,300
happen as we are finding out.

284
00:15:30,300 --> 00:15:34,300
So the screen space UV is not actually used unless we're normal

285
00:15:34,300 --> 00:15:38,500
mapping, so that goes away, Z diff same thing, right?

286
00:15:40,800 --> 00:15:41,600
I believe.

287
00:15:45,400 --> 00:15:45,800
Yep.

288
00:15:46,700 --> 00:15:47,900
So that all goes away.

289
00:15:48,400 --> 00:15:51,100
We now no longer have to worry about the clamping because we're

290
00:15:51,100 --> 00:15:53,200
actually checking to get into the into the loop.

291
00:15:53,200 --> 00:15:57,500
So that'll go away and then we have our texture, boundary

292
00:15:57,500 --> 00:15:58,300
multiplication.

293
00:15:59,000 --> 00:16:02,700
So we've got our texture width and height, minus 2.

294
00:16:02,800 --> 00:16:05,900
We need to think about this a little bit, I'm going to leave that for

295
00:16:05,900 --> 00:16:08,700
one second, we've got our clamping care.

296
00:16:08,700 --> 00:16:11,900
We assert just to make sure that we're within range.

297
00:16:14,600 --> 00:16:17,000
Which is fine that I'll compile out earlier in release mode.

298
00:16:18,200 --> 00:16:20,800
We have our textile sampling code, which I imagine.

299
00:16:20,800 --> 00:16:24,100
We're going to have to get a little harder Quran, we coming here and

300
00:16:24,100 --> 00:16:32,800
we've got our clamping, then we do our pixel packing and we we go into

301
00:16:36,100 --> 00:16:37,200
into linear space.

302
00:16:37,500 --> 00:16:40,500
Do the blend come out of linear space and repack.

303
00:16:41,400 --> 00:16:43,400
So, all in all, there's not a whole lot of code here.

304
00:16:43,400 --> 00:16:47,100
You can see it's already starting to clamp to clamp down a little bit.

305
00:16:48,500 --> 00:16:58,900
so in order to produce this X and Y, yeah, looks like

306
00:17:00,500 --> 00:17:01,600
It looks like.

307
00:17:05,000 --> 00:17:05,800
Textiles.

308
00:17:06,099 --> 00:17:10,099
Okay, so it looks like basically, What's Happening Here is we're

309
00:17:10,099 --> 00:17:13,300
clamping the r g and B between 0 & 1.

310
00:17:13,700 --> 00:17:17,900
But unless we were going to pass in color values that were greater

311
00:17:17,900 --> 00:17:18,700
than 1.

312
00:17:18,900 --> 00:17:21,000
We wouldn't really need to clamp them here.

313
00:17:21,000 --> 00:17:28,099
Anyway, that's that was really for the other routine which was which

314
00:17:28,099 --> 00:17:31,000
was potentially producing color values that are greater, we could

315
00:17:31,000 --> 00:17:32,100
still put a clamp in here.

316
00:17:32,100 --> 00:17:34,600
It's not particularly expensive, do the clamp but what we

317
00:17:34,800 --> 00:17:37,500
To do instead, you know that.

318
00:17:39,200 --> 00:17:43,100
I'm not sure if we actually care about that clamp very much I guess we

319
00:17:43,100 --> 00:17:46,200
can leave it in there and because in Cindy it's going to be extremely

320
00:17:46,200 --> 00:17:47,700
cheap to clamp that.

321
00:17:47,800 --> 00:17:51,100
So maybe we'll leave that in just, just in case we want to set these

322
00:17:51,100 --> 00:17:54,800
color values to be able to blow things out, like set color, set the

323
00:17:54,900 --> 00:17:59,400
color to be you know, x 2 or something like this instead of things

324
00:17:59,400 --> 00:17:59,800
that always

325
00:18:00,000 --> 00:18:01,500
Keep it normalized, right?

326
00:18:02,700 --> 00:18:02,900
All right.

327
00:18:02,900 --> 00:18:05,800
So I'm going to go up and grab the rest of this stuff and injected

328
00:18:05,800 --> 00:18:08,000
into this routine just so we can look at it right?

329
00:18:08,000 --> 00:18:09,600
I want to see what it's actually doing.

330
00:18:10,300 --> 00:18:14,100
So here is our srgb to linear code, right?

331
00:18:15,300 --> 00:18:19,500
And what that's doing is it's taking dest and it's doing that to desk

332
00:18:19,500 --> 00:18:20,600
directly, right?

333
00:18:20,600 --> 00:18:28,300
So it's basically converting desk into, you know, that space by

334
00:18:28,300 --> 00:18:29,200
squaring it.

335
00:18:29,700 --> 00:18:32,400
So we would need that imp 255 to be up here.

336
00:18:34,000 --> 00:18:39,500
There we go, and squaring it.

337
00:18:39,500 --> 00:18:42,700
After we do this in verse squaring is obviously just multiplying this

338
00:18:42,700 --> 00:18:45,500
thing by itself again, so that's pretty straightforward up, just one

339
00:18:45,500 --> 00:18:46,300
more multiply.

340
00:18:47,400 --> 00:18:50,300
And then, of course, this one doesn't get squared because that's stays

341
00:18:50,300 --> 00:18:51,100
in that space.

342
00:18:51,800 --> 00:18:54,200
So there we go, going to linear brightness, space.

343
00:18:54,700 --> 00:19:01,300
And then linear 12, rg2 srgb, same thing again, just going to cut that

344
00:19:01,300 --> 00:19:01,500
out.

345
00:19:01,500 --> 00:19:03,000
Put that in here and again,

346
00:19:03,200 --> 00:19:07,000
I'm really doing here is I'm just flattening this routine out so I can

347
00:19:07,000 --> 00:19:08,500
see everything it does.

348
00:19:09,000 --> 00:19:12,100
And think about it in one place, which is just a lot easier for me

349
00:19:12,700 --> 00:19:17,100
than trying, to go chase down a bunch of separate routines, right?

350
00:19:20,000 --> 00:19:23,300
So really, we've got Blended here although technically I don't know

351
00:19:23,300 --> 00:19:24,300
why we even need to do that.

352
00:19:24,300 --> 00:19:26,900
We could just compute that right in place.

353
00:19:26,900 --> 00:19:28,700
I'm not sure why we bother doing it that way.

354
00:19:29,300 --> 00:19:31,500
But let's go ahead and finish doing it this way.

355
00:19:31,500 --> 00:19:39,600
Anyway, when did when did Blended we go and get rid of that.

356
00:19:46,900 --> 00:19:51,200
Let's take a look, just make sure that runs everything looks good

357
00:19:51,200 --> 00:19:53,900
there all good.

358
00:19:55,600 --> 00:19:57,500
And so if we take a look in here,

359
00:19:59,100 --> 00:20:07,400
this is a wide operation as well as is this one, and this one, we've

360
00:20:07,400 --> 00:20:09,200
got several wide operations here.

361
00:20:09,400 --> 00:20:11,800
Meaning they're operating on a vector once, right?

362
00:20:11,800 --> 00:20:14,300
I shouldn't say wide because we're not talking about Cindy wide.

363
00:20:17,200 --> 00:20:18,800
Basically, what I mean is not scalar.

364
00:20:20,200 --> 00:20:22,400
So I want to do is take a look at these here.

365
00:20:23,500 --> 00:20:30,100
One - Texel a times dest plus Texel, right?

366
00:20:30,300 --> 00:20:35,800
So that's what's happening to dest immediately after I work with it,

367
00:20:35,800 --> 00:20:36,000
right?

368
00:20:36,000 --> 00:20:36,500
Immediately.

369
00:20:36,500 --> 00:20:42,400
After I put it into this space, I'm essentially doing not blow this

370
00:20:42,400 --> 00:20:44,200
out here into

371
00:20:47,000 --> 00:20:50,700
scalar form RGB a

372
00:20:52,300 --> 00:20:52,800
Here we go.

373
00:20:56,300 --> 00:20:56,700
Okay.

374
00:21:00,100 --> 00:21:04,800
All of these have the same operation there.

375
00:21:07,600 --> 00:21:09,100
Oops, and I do.

376
00:21:15,100 --> 00:21:15,500
Okay.

377
00:21:19,000 --> 00:21:21,800
So let's take a look here.

378
00:21:25,800 --> 00:21:32,700
I don't see a whole lot of of cruft in What's Happening Here.

379
00:21:37,100 --> 00:21:39,000
It looks fairly straightforward, right?

380
00:21:39,000 --> 00:21:39,800
We're squaring.

381
00:21:39,800 --> 00:21:43,900
These values to bring them into the into the linear brightness space.

382
00:21:45,700 --> 00:21:47,500
Which makes perfect sense.

383
00:21:48,400 --> 00:21:53,800
We have to compute the textile a, which we use.

384
00:21:54,200 --> 00:21:57,600
So, you know, we've got, we've basically got an mtech Salette here,

385
00:21:58,100 --> 00:21:58,500
right?

386
00:21:58,500 --> 00:21:59,400
Which is this value?

387
00:22:05,200 --> 00:22:07,300
1 - the textile, a

388
00:22:08,800 --> 00:22:10,800
Basic got an income tax Olay here.

389
00:22:14,400 --> 00:22:15,900
That we're doing to each of these.

390
00:22:16,800 --> 00:22:21,000
And if we were to put, if we were to smush these guys together I don't

391
00:22:21,000 --> 00:22:25,800
see there's really no way to get any benefit out of these.

392
00:22:25,800 --> 00:22:28,500
Like I'm not seeing any way to collapse any terms here.

393
00:22:29,100 --> 00:22:33,100
It's all just pretty much multiplies that have to happen, right?

394
00:22:35,700 --> 00:22:37,700
I mean I don't, I don't know.

395
00:22:37,700 --> 00:22:38,800
I really don't.

396
00:22:39,800 --> 00:22:42,800
I do not see anything there.

397
00:22:42,800 --> 00:22:43,400
What is that?

398
00:22:43,400 --> 00:22:53,700
1255 bit, that's just 255, okay, so how do we know why this one was

399
00:22:53,700 --> 00:22:56,400
not using that value is there?

400
00:22:56,400 --> 00:22:58,200
Is there some explanation for that?

401
00:22:59,200 --> 00:23:03,000
Like why did these guys all do 125?

402
00:23:03,100 --> 00:23:07,000
And this one doesn't know why that was seems a bit odd.

403
00:23:07,700 --> 00:23:09,900
Alright, so those guys almost fly.

404
00:23:12,200 --> 00:23:13,200
alright, so again

405
00:23:15,200 --> 00:23:17,000
No change, everything is good.

406
00:23:18,200 --> 00:23:19,900
And so, let's take a look up at.

407
00:23:19,900 --> 00:23:23,000
Yeah, we probably need to start taking a look at the, the bilinear

408
00:23:23,000 --> 00:23:25,500
blend and stuff here, because it doesn't look like there's a whole lot

409
00:23:25,500 --> 00:23:28,900
else that we can actually do.

410
00:23:28,900 --> 00:23:30,100
We can actually focus on.

411
00:23:30,100 --> 00:23:34,000
So, we're starting to see this code blown out to everything that it

412
00:23:34,000 --> 00:23:35,100
actually needs to do.

413
00:23:35,500 --> 00:23:39,300
I'm going to I'm going to go ahead and make this guy be more explicit

414
00:23:39,300 --> 00:23:40,100
as well.

415
00:23:40,900 --> 00:23:44,800
I'm just going to have desk be actually written out in scalar.

416
00:23:45,000 --> 00:23:45,400
As well.

417
00:23:45,400 --> 00:23:48,800
And again this is just so I can kind of see what it actually looks

418
00:23:48,800 --> 00:23:53,900
like when you're not hiding operations behind a bunch of utility

419
00:23:53,900 --> 00:23:55,200
functions, right?

420
00:23:56,400 --> 00:23:58,700
So let's go ahead and and make that happen.

421
00:23:58,900 --> 00:23:59,700
So this is

422
00:24:00,100 --> 00:24:03,800
Us producing the, you know, this is basically us doing the unpack,

423
00:24:04,100 --> 00:24:04,600
right?

424
00:24:05,600 --> 00:24:07,100
Dest be

425
00:24:09,100 --> 00:24:16,100
dest a like, so there's the unpack and then we do the operations on

426
00:24:16,100 --> 00:24:16,900
the unpack.

427
00:24:17,500 --> 00:24:25,000
Now, this guy also works the same way, it's assuming that we leave the

428
00:24:25,000 --> 00:24:25,900
clamp in there.

429
00:24:26,100 --> 00:24:28,300
So I could turn that guy into scalar as well.

430
00:24:28,300 --> 00:24:32,100
And we basically just have these operations here where we've got

431
00:24:32,100 --> 00:24:32,600
Texel.

432
00:24:34,000 --> 00:24:35,200
So something like this,

433
00:24:39,000 --> 00:24:43,100
Bert's Texel equals Texel are

434
00:24:48,700 --> 00:24:49,100
sorry.

435
00:24:49,500 --> 00:24:50,800
But textile R equals textile.

436
00:24:50,800 --> 00:24:51,300
.R.

437
00:24:51,300 --> 00:24:52,200
X colored out our

438
00:24:56,200 --> 00:24:56,600
A.

439
00:25:02,600 --> 00:25:06,900
All right, so that's entirely blown out into scalar now.

440
00:25:08,400 --> 00:25:14,000
And really the only part that we're not dealing with explicitly, is

441
00:25:14,000 --> 00:25:15,100
this part right here, right.

442
00:25:15,100 --> 00:25:19,000
So you can kind of see, absolutely everything that we actually need to

443
00:25:19,000 --> 00:25:23,600
do here in explicit form, so that's pretty good.

444
00:25:25,900 --> 00:25:27,700
Again, everything looks fine.

445
00:25:28,300 --> 00:25:29,000
No worries.

446
00:25:30,400 --> 00:25:35,400
So if I'm actually doing all of this stuff in scalar, what do I get?

447
00:25:35,400 --> 00:25:39,300
When I, when I take a look at my srgb by linear blend.

448
00:25:39,700 --> 00:25:43,300
All right, my srgb.

449
00:25:43,300 --> 00:25:48,000
Bio layer blend, it has to do a bunch of unpacks so you can see that

450
00:25:48,000 --> 00:25:51,200
this is really nasty, like, look at this guy.

451
00:25:51,500 --> 00:25:55,000
This is just, this is just a beast, all of this stuff.

452
00:25:55,300 --> 00:25:57,900
Is really pretty mundane.

453
00:25:57,900 --> 00:26:00,400
Like, you can see there's just not that many operations here.

454
00:26:00,400 --> 00:26:04,400
We've got them all written out, it's not that bad to deal with.

455
00:26:04,400 --> 00:26:07,000
But this the bilinear blend with.

456
00:26:07,000 --> 00:26:10,400
The sampling is just just nasty, right?

457
00:26:11,000 --> 00:26:14,700
The actual loads are not that many operations, of course, you know,

458
00:26:15,000 --> 00:26:17,900
they're probably slow because their loads, but

459
00:26:20,500 --> 00:26:23,000
Can see how many operations happened here, you got to do that

460
00:26:23,000 --> 00:26:23,800
unpacking.

461
00:26:25,400 --> 00:26:26,400
You've got to do that.

462
00:26:28,500 --> 00:26:33,400
That srgb to linear on all of them and then you got to do the double

463
00:26:33,400 --> 00:26:33,900
Earp's.

464
00:26:34,300 --> 00:26:39,400
It's just nasty, nasty, nasty, nasty, but that's what we're doing.

465
00:26:39,800 --> 00:26:45,900
So nasty, it may be, but we're going to have to actually make it

466
00:26:45,900 --> 00:26:46,300
happen.

467
00:26:47,200 --> 00:26:47,600
Alright?

468
00:26:47,600 --> 00:26:51,500
So let's go ahead and, and actually paste these guys in there, so we

469
00:26:51,500 --> 00:26:52,700
can start to look at them.

470
00:26:56,200 --> 00:26:59,900
let's see here by winning your sample by other your sample like

471
00:27:00,000 --> 00:27:02,600
That is not that bad, right?

472
00:27:02,600 --> 00:27:06,700
Taking the textile sample, it's actually not that bad.

473
00:27:06,900 --> 00:27:08,200
So we'll do those a sample.

474
00:27:09,700 --> 00:27:14,400
A b c and d like so which is not too bad.

475
00:27:15,900 --> 00:27:17,000
And that's going to take.

476
00:27:17,000 --> 00:27:20,100
Those are actually packed pixels that come in here, right?

477
00:27:21,700 --> 00:27:25,500
And then when we actually grab these out, let's see.

478
00:27:25,500 --> 00:27:26,800
Textile pointer.

479
00:27:27,800 --> 00:27:29,700
We have texture X and Y.

480
00:27:29,700 --> 00:27:32,200
So the actually hurt were already using the variables that we wanted

481
00:27:32,200 --> 00:27:33,900
to use, so that's totally fine.

482
00:27:34,500 --> 00:27:38,700
So and then srgb by linear blend.

483
00:27:40,100 --> 00:27:45,600
But that guy in there, and that will just take Texel sample.

484
00:27:45,600 --> 00:27:47,200
So, this is just going to do sample.

485
00:27:47,200 --> 00:27:51,100
A sample, B, sample, C and Sample, D.

486
00:27:54,100 --> 00:27:59,000
And I think that's about it, and then that just produces that final

487
00:27:59,000 --> 00:27:59,900
Texel value.

488
00:28:01,000 --> 00:28:01,600
There we go.

489
00:28:02,300 --> 00:28:06,100
So now we have the routine semi flattened but we still have to look at

490
00:28:06,100 --> 00:28:07,600
these guys, right?

491
00:28:10,000 --> 00:28:12,000
And so this this is pretty straightforward.

492
00:28:12,000 --> 00:28:14,400
There's not a whole lot that's going on here.

493
00:28:14,400 --> 00:28:18,100
The only thing we could do is we could you know pre we could know

494
00:28:18,100 --> 00:28:20,300
these offsets ahead of time potentially, right?

495
00:28:20,300 --> 00:28:23,200
So that we don't have to do additional ads here but the compiler is

496
00:28:23,200 --> 00:28:24,800
going to probably fold most of that stuff out.

497
00:28:24,800 --> 00:28:27,300
And so just looking at this way is totally fine for now.

498
00:28:28,800 --> 00:28:32,000
We have those unpacks and the srgb to linear is in here that we need

499
00:28:32,000 --> 00:28:37,700
to do and then we have to unpack these lips so I'm going to start with

500
00:28:37,700 --> 00:28:38,500
the lips.

501
00:28:41,000 --> 00:28:42,400
Since those are pretty basic.

502
00:28:42,700 --> 00:28:44,200
So the lerp

503
00:28:48,100 --> 00:28:48,600
Let's see.

504
00:28:48,600 --> 00:28:53,300
We've got to do tulips and then we have to let the result of the

505
00:28:53,300 --> 00:28:54,700
loops, right?

506
00:28:55,100 --> 00:28:55,800
Again pretty.

507
00:28:55,800 --> 00:28:57,000
This is pretty beastly.

508
00:29:01,300 --> 00:29:03,600
But I want to go through this, at least once this way, so you can see

509
00:29:03,600 --> 00:29:03,900
it.

510
00:29:05,100 --> 00:29:09,700
All right, so to do this, we've got to actually produce an

511
00:29:09,700 --> 00:29:11,800
intermediate value here, right?

512
00:29:12,900 --> 00:29:17,600
This is sort of, like a, I don't know what we'll call this, you know,

513
00:29:17,900 --> 00:29:20,600
I guess, you know, we could even think about what that actually means

514
00:29:21,000 --> 00:29:22,900
multiply it out though.

515
00:29:24,100 --> 00:29:28,200
So, if you think about this in floating point, I mean it started in on

516
00:29:28,200 --> 00:29:30,000
vector format scalar, right?

517
00:29:30,300 --> 00:29:33,400
If you think about that actually, looks like we're doing this

518
00:29:33,400 --> 00:29:34,800
operation on each one.

519
00:29:35,500 --> 00:29:37,500
Right, that makes sense.

520
00:29:38,100 --> 00:29:40,600
So it's basically, you know it's this

521
00:29:42,600 --> 00:29:45,200
Operation on each one.

522
00:29:46,000 --> 00:29:52,900
And, you know, we know that the the lerp operation is going to be 1

523
00:29:52,900 --> 00:29:56,300
minus FY times the first part, right?

524
00:29:57,000 --> 00:29:59,000
And then f y times, the second part,

525
00:30:02,900 --> 00:30:03,400
Like so.

526
00:30:05,300 --> 00:30:06,700
Make this a little easier to read here.

527
00:30:09,100 --> 00:30:09,300
Right?

528
00:30:09,300 --> 00:30:12,200
So we know we're doing that that operation and then each of these

529
00:30:12,200 --> 00:30:14,900
larps, we are.

530
00:30:14,900 --> 00:30:16,800
We know that that's the exact same lerp.

531
00:30:16,800 --> 00:30:17,400
Right?

532
00:30:17,600 --> 00:30:22,100
So I can replace this lerp with the same thing.

533
00:30:22,100 --> 00:30:22,800
1.0

534
00:30:24,600 --> 00:30:27,100
- FX X Texel.

535
00:30:27,100 --> 00:30:29,000
A plus FX.

536
00:30:29,800 --> 00:30:30,900
X text will be

537
00:30:32,700 --> 00:30:33,300
Like so.

538
00:30:34,800 --> 00:30:35,200
Right.

539
00:30:37,600 --> 00:30:40,700
So yeah, I'm going to introduce just to make this a little easier to

540
00:30:41,300 --> 00:30:45,900
I'm going to make an eye FX, which is basically the just 1.0 - that

541
00:30:45,900 --> 00:30:46,500
effects.

542
00:30:47,400 --> 00:30:49,900
And an ify is 1 point.

543
00:30:49,900 --> 00:30:54,500
0 minus FY, which are the pre subtracted versions of these just so we

544
00:30:54,500 --> 00:30:56,300
can look at them a little easier, right?

545
00:30:56,800 --> 00:31:01,500
So it's just I FY times this expression, right?

546
00:31:03,300 --> 00:31:05,200
In fact, I guess I don't actually need another

547
00:31:06,100 --> 00:31:10,600
Thing, their FY times this expression.

548
00:31:12,600 --> 00:31:14,400
FX just xld.

549
00:31:15,500 --> 00:31:16,000
Right?

550
00:31:17,000 --> 00:31:20,900
And at the end, it turns out to not be quite so nasty when we actually

551
00:31:20,900 --> 00:31:22,000
multiply it out.

552
00:31:22,600 --> 00:31:26,200
And furthermore if we wanted to, we could actually pre compute these

553
00:31:26,200 --> 00:31:28,100
blend terms more explicitly.

554
00:31:28,400 --> 00:31:28,900
Right?

555
00:31:29,000 --> 00:31:30,700
Because using distributive property, right?

556
00:31:30,700 --> 00:31:34,400
I can just go ahead and multiply I FY times both of these guys

557
00:31:35,600 --> 00:31:36,100
Right.

558
00:31:37,500 --> 00:31:42,900
Make sense and get rid of the parentheses and then I can do the same

559
00:31:42,900 --> 00:31:43,600
thing here.

560
00:31:44,100 --> 00:31:47,800
If I want to write again distribute FY out there.

561
00:31:48,300 --> 00:31:52,900
And now if you actually look at these, we actually just have sort of

562
00:31:53,000 --> 00:31:55,200
three blend coefficients that.

563
00:31:55,200 --> 00:32:00,200
Do that whole ER process already pre multiply that out, right?

564
00:32:00,500 --> 00:32:04,000
We've basically got like, you know, l0

565
00:32:05,600 --> 00:32:09,300
L1, L2, L3, which are just these coefficients, right there is all

566
00:32:09,300 --> 00:32:09,900
zero.

567
00:32:11,900 --> 00:32:12,800
There's a one.

568
00:32:16,000 --> 00:32:16,900
There's all too.

569
00:32:19,100 --> 00:32:19,900
And there's all three.

570
00:32:21,900 --> 00:32:22,400
Right.

571
00:32:23,000 --> 00:32:24,400
Oops, Got actually right in there.

572
00:32:26,100 --> 00:32:29,000
And so what you can see is this this whole by linear blend just kind

573
00:32:29,000 --> 00:32:32,900
of folds down after you actually look at what it's doing that whole

574
00:32:32,900 --> 00:32:33,200
blend.

575
00:32:33,200 --> 00:32:37,400
Just fold folds down into four multiplies and for ads, right?

576
00:32:38,100 --> 00:32:41,400
Because if I pre compute the terms, I can then use those for

577
00:32:41,400 --> 00:32:44,900
everything that I actually need to do each one of the scalars can just

578
00:32:44,900 --> 00:32:48,500
actually have that happen to it directly, right?

579
00:32:48,500 --> 00:32:55,800
I can compute RGB and a all exactly the same way without

580
00:32:55,900 --> 00:32:59,800
out actually having to do that sort of lerp, nesting ridiculousness.

581
00:33:00,500 --> 00:33:01,200
And off you go.

582
00:33:06,700 --> 00:33:07,300
So yeah.

583
00:33:10,200 --> 00:33:10,900
Pretty straightforward.

584
00:33:10,900 --> 00:33:11,400
Right?

585
00:33:12,400 --> 00:33:15,100
Seems seems pretty simple.

586
00:33:16,200 --> 00:33:18,900
You could even save a little bit more here by actually pre multiplying

587
00:33:18,900 --> 00:33:19,300
the color.

588
00:33:19,300 --> 00:33:22,800
And I suppose to these actual blend coefficients and if we actually

589
00:33:22,800 --> 00:33:25,400
want to go that far but you can see that we're about to take this

590
00:33:25,400 --> 00:33:27,900
entire expression and multiply it by these.

591
00:33:28,100 --> 00:33:32,100
So we could instead multiply the 4 coefficients by these, right?

592
00:33:32,100 --> 00:33:33,100
And eliminate this.

593
00:33:34,700 --> 00:33:38,000
Which would actually but well it doesn't really help because it still

594
00:33:38,000 --> 00:33:42,200
for multiplies, I guess so yeah, I guess Loop that just moves it

595
00:33:42,200 --> 00:33:42,500
around.

596
00:33:42,500 --> 00:33:43,800
Doesn't actually do anything for us.

597
00:33:44,000 --> 00:33:46,600
If we were going to use these more often I suppose it would but it

598
00:33:46,600 --> 00:33:48,000
looks like that's redundant.

599
00:33:48,000 --> 00:33:49,100
So we'll leave it the way it is.

600
00:33:50,100 --> 00:33:55,400
Okay, there we go, let's make sure that our lerp is still working at

601
00:33:55,400 --> 00:33:55,800
all.

602
00:33:57,700 --> 00:33:58,400
There we go.

603
00:34:00,100 --> 00:34:01,300
All looks pretty good.

604
00:34:04,700 --> 00:34:06,400
It's kind of hard to see.

605
00:34:06,400 --> 00:34:08,000
I wonder if we maybe should.

606
00:34:09,199 --> 00:34:13,199
Yeah, get some stuff that's a little closer but that's looking pretty

607
00:34:13,199 --> 00:34:13,699
good.

608
00:34:13,900 --> 00:34:14,900
Everything looks good.

609
00:34:15,900 --> 00:34:16,500
So there we go.

610
00:34:17,300 --> 00:34:17,600
Alright.

611
00:34:17,600 --> 00:34:19,600
So we've got our bread linear blend.

612
00:34:19,600 --> 00:34:22,500
I might start putting some notes in here, which is like, this is the

613
00:34:22,500 --> 00:34:26,300
bilayer texture blend, just so we can see what's actually happening

614
00:34:26,699 --> 00:34:27,000
there.

615
00:34:27,699 --> 00:34:28,300
Like, so,

616
00:34:30,900 --> 00:34:35,600
Huh, and so then we still have that srgb to linear and the unpacks and

617
00:34:35,600 --> 00:34:36,400
then, let's see.

618
00:34:36,400 --> 00:34:39,300
This is modulated by color module 8.

619
00:34:41,000 --> 00:34:42,000
Incoming color.

620
00:34:43,900 --> 00:34:47,800
This is plant colors, valid range.

621
00:34:50,400 --> 00:34:53,300
This is load destination.

622
00:34:55,800 --> 00:34:57,300
And yeah.

623
00:34:59,300 --> 00:35:05,500
Everything else looks that good, this is destination, Blends and

624
00:35:06,000 --> 00:35:06,700
repack.

625
00:35:08,800 --> 00:35:10,800
All right, so you can kind of start to see the stages in here.

626
00:35:10,800 --> 00:35:16,000
Now, we have to do this srgb to linear in this unpack still, but then,

627
00:35:16,000 --> 00:35:20,400
we are after that, we have completely flattened this routine out to

628
00:35:20,400 --> 00:35:22,600
look at exactly what it actually does.

629
00:35:23,300 --> 00:35:26,200
So that there's no kind of mystery in there anymore, we flatten it

630
00:35:26,200 --> 00:35:29,500
down and we can kind of look for any additional things in there that

631
00:35:29,500 --> 00:35:32,500
are maybe not necessarily needing to happen.

632
00:35:33,100 --> 00:35:37,200
But let's go ahead and just finish that off so srgb to linear, right?

633
00:35:37,200 --> 00:35:37,500
This has

634
00:35:37,600 --> 00:35:41,200
To unpack each of these textiles, I don't think there's very much we

635
00:35:41,200 --> 00:35:45,900
can actually do to make this work any better than it actually does,

636
00:35:46,400 --> 00:35:47,200
unfortunately.

637
00:35:48,000 --> 00:35:52,400
But basically, if we are to take each of these guys here, just Texel

638
00:35:52,400 --> 00:35:56,900
a, a pixel, a a, like so.

639
00:35:58,000 --> 00:35:59,500
And then we

640
00:36:01,600 --> 00:36:06,500
Just modify it in place that I think that's basically what we're

641
00:36:06,500 --> 00:36:07,200
looking at.

642
00:36:08,900 --> 00:36:09,500
Yeah.

643
00:36:12,900 --> 00:36:14,500
So, we got to do that four times.

644
00:36:26,600 --> 00:36:27,600
and,

645
00:36:34,300 --> 00:36:36,000
Oops, it's no good.

646
00:36:37,700 --> 00:36:42,800
All right, so now last thing is the unpack.

647
00:36:44,900 --> 00:36:46,300
Everything still looks good.

648
00:36:46,600 --> 00:36:49,800
Last thing is our unpack, our unpack.

649
00:36:55,400 --> 00:36:56,700
It looks like this.

650
00:36:57,500 --> 00:36:58,400
So there it is.

651
00:36:58,900 --> 00:36:59,400
All right.

652
00:36:59,600 --> 00:37:04,100
Again, this guy's going to be float, will convert that over to float

653
00:37:04,800 --> 00:37:08,000
and that'll just look like this, right?

654
00:37:08,500 --> 00:37:15,100
So that's actually doing Texel a just unpack sample, a right to

655
00:37:15,100 --> 00:37:20,100
sample, a group's sample, a sample.

656
00:37:20,100 --> 00:37:20,400
A

657
00:37:23,100 --> 00:37:23,600
Sir.

658
00:37:25,600 --> 00:37:28,300
And Texel PR.

659
00:37:31,500 --> 00:37:35,900
Texel CR and Texel.

660
00:37:35,900 --> 00:37:37,100
Oh wait, that's not what I wanted.

661
00:37:37,600 --> 00:37:40,900
Big g b a a

662
00:37:42,000 --> 00:37:46,700
Okay, so that unpack sample a and we need to do that for each of our

663
00:37:47,000 --> 00:37:47,500
things.

664
00:37:47,500 --> 00:37:51,500
Like I said, unfortunately got to do a bunch of unpacks here.

665
00:37:58,800 --> 00:37:59,600
See.

666
00:38:02,900 --> 00:38:03,600
Candid.

667
00:38:10,900 --> 00:38:11,800
And I think,

668
00:38:13,200 --> 00:38:17,500
That concludes our flattening.

669
00:38:18,800 --> 00:38:20,800
And you can see there's quite a lot of coding here that has to

670
00:38:20,800 --> 00:38:25,400
actually run, which is a bummer, but it's why things are slow, right?

671
00:38:25,400 --> 00:38:26,500
You got a lot of code.

672
00:38:27,300 --> 00:38:30,600
That's, that's a lot of code operating on.

673
00:38:30,600 --> 00:38:34,300
A lot of things equals a slow program.

674
00:38:35,900 --> 00:38:37,000
To say the very least.

675
00:38:38,100 --> 00:38:39,900
Oops, typo.

676
00:38:39,900 --> 00:38:41,700
There we go.

677
00:38:42,900 --> 00:38:46,900
And okay.

678
00:38:46,900 --> 00:38:49,100
So these are actually the guys doing the blank.

679
00:38:49,100 --> 00:38:49,800
There we go.

680
00:38:52,500 --> 00:38:52,900
Okay.

681
00:38:55,100 --> 00:38:58,000
Now, all right.

682
00:38:58,000 --> 00:38:59,600
So that's

683
00:39:00,000 --> 00:39:05,200
Aang, I'm not sure if there's anything that we want to try to squeeze

684
00:39:05,200 --> 00:39:05,800
out of here.

685
00:39:05,800 --> 00:39:07,200
That's actually happening before we go.

686
00:39:07,200 --> 00:39:08,700
But you can see, you know.

687
00:39:08,700 --> 00:39:11,600
Yeah, it's big but it's not that big.

688
00:39:12,800 --> 00:39:15,500
So at the end of the day, this isn't too awful, right?

689
00:39:15,500 --> 00:39:19,800
This isn't the this isn't the worst that you learn that you're likely

690
00:39:19,800 --> 00:39:26,700
to see in your programming and what's kind of funny, you know.

691
00:39:28,800 --> 00:39:32,100
I don't know what to say about this sort of stuff other than just.

692
00:39:32,300 --> 00:39:33,900
Yeah, this is how it goes.

693
00:39:35,100 --> 00:39:38,500
You'll notice we're compiling with optimizations on, right?

694
00:39:38,500 --> 00:39:40,800
So if I go in, if I go into the build,

695
00:39:42,100 --> 00:39:42,700
Right.

696
00:39:42,800 --> 00:39:45,300
We've got - 02, which says Microsoft C compiler.

697
00:39:45,300 --> 00:39:47,800
Please can optimize this as much as you want.

698
00:39:48,400 --> 00:39:52,200
So basically none of that stuff that I did should have actually sped

699
00:39:52,200 --> 00:39:53,500
up the program at all.

700
00:39:55,600 --> 00:39:58,700
The only thing that would have set it up was eliminating that code,

701
00:39:58,700 --> 00:40:00,500
that was the normal map code.

702
00:40:00,500 --> 00:40:03,900
But as we saw, like each time, as I've been going here, we've been

703
00:40:03,900 --> 00:40:04,900
getting faster and faster.

704
00:40:04,900 --> 00:40:10,500
All of those changes that I did actually sped the code up not nearly

705
00:40:10,500 --> 00:40:14,100
as much as we wanted to speed the code up, but it's just kind of

706
00:40:14,100 --> 00:40:18,800
silly, you know, these sort of, you know, just rigid Transformations,

707
00:40:18,800 --> 00:40:24,900
compilers just have a hard go of it, you know, it's a hard problem

708
00:40:24,900 --> 00:40:25,600
compiling.

709
00:40:26,000 --> 00:40:27,400
Optimized code it is.

710
00:40:27,700 --> 00:40:31,200
And so it turns out that if you structure things a little clearer and

711
00:40:31,200 --> 00:40:35,300
you remove terms that maybe you think the compiler should have it ends

712
00:40:35,300 --> 00:40:39,300
up being beneficial even before you actually optimize anything because

713
00:40:39,300 --> 00:40:42,700
we really haven't done much that the compiler couldn't have done

714
00:40:43,000 --> 00:40:43,600
itself.

715
00:40:43,600 --> 00:40:47,800
We did the UV trance transformation and the remove the neural net code

716
00:40:47,800 --> 00:40:50,900
about the only two things that the compiler couldn't have done itself

717
00:40:50,900 --> 00:40:51,400
probably.

718
00:40:51,400 --> 00:40:52,900
But you know what do you do?

719
00:40:56,300 --> 00:41:00,700
All right, so we don't have a lot of time left.

720
00:41:00,900 --> 00:41:03,300
We got, you know, 15 minutes left or something like that.

721
00:41:04,800 --> 00:41:10,900
But what I'd like you to take a look at now is again, like I said, we

722
00:41:10,900 --> 00:41:14,600
want to sort of form, you know, have some kind of an opinion try to

723
00:41:14,600 --> 00:41:19,900
get to a place where we have an idea of how much time this code is

724
00:41:19,900 --> 00:41:21,700
going to take to run, right?

725
00:41:23,700 --> 00:41:27,500
And a little bit, a little bit of its kind of hard for us to estimate

726
00:41:27,500 --> 00:41:33,500
because packing and unpacking doesn't look like it looks in when we

727
00:41:33,500 --> 00:41:35,600
when we actually go to do the Cindy version of it.

728
00:41:35,600 --> 00:41:39,200
Some things look exactly the same like multiplies look like multiplies

729
00:41:39,200 --> 00:41:39,700
and 70.

730
00:41:39,700 --> 00:41:42,600
So you know we can just look at the code and say do we need to do a

731
00:41:42,600 --> 00:41:45,100
multiply if the answer is yes then that would have turned into a

732
00:41:45,100 --> 00:41:48,200
simply multiply when we go to optimize it but some of the other things

733
00:41:48,200 --> 00:41:53,200
like pack and unpack actually look quite different depending on

734
00:41:53,700 --> 00:41:57,800
whether you're doing them in Cindy or not and so stuff like this is a

735
00:41:57,800 --> 00:41:59,800
little bit harder but

736
00:42:02,100 --> 00:42:05,600
That kind of gets to one of the things that I want to talk about which

737
00:42:05,600 --> 00:42:07,000
is a little more complicated.

738
00:42:11,100 --> 00:42:12,000
and that is,

739
00:42:13,900 --> 00:42:17,400
Really at the end of the day, if you take a look at how this code

740
00:42:17,400 --> 00:42:21,200
works and think about how we're going to symbolize it, right?

741
00:42:21,400 --> 00:42:23,400
If you think about how we're going to start operating on this thing

742
00:42:23,400 --> 00:42:30,300
wide, we actually have kind of a really nasty problem with these

743
00:42:30,300 --> 00:42:32,900
unpacking 's that we do, right?

744
00:42:33,100 --> 00:42:36,000
And the reason that we have a kind of nasty problem with the unpacking

745
00:42:36,000 --> 00:42:40,200
is because if you look at everything else we do everything we do in

746
00:42:40,200 --> 00:42:42,900
scalar form could easily be blown out to do.

747
00:42:43,100 --> 00:42:44,900
Four pixels at a time, right?

748
00:42:45,900 --> 00:42:49,000
You know anything that we do that's just a regular operation like this

749
00:42:50,000 --> 00:42:52,200
could just be done on four pixels.

750
00:42:52,200 --> 00:42:56,200
At the same time it doesn't have any particular, you no need to do

751
00:42:56,200 --> 00:42:57,400
anything else, right?

752
00:42:58,400 --> 00:43:01,400
But our unpack operations are actually not that way.

753
00:43:01,600 --> 00:43:05,100
Because if you look at what our unpacked operations are are unpacked

754
00:43:05,100 --> 00:43:08,700
operations, load a single value, right?

755
00:43:08,700 --> 00:43:12,700
They load like this, one 32-bit integer and then it has to convert

756
00:43:12,700 --> 00:43:12,900
that

757
00:43:13,000 --> 00:43:18,700
32-bit integer out into separate channels, right?

758
00:43:18,700 --> 00:43:19,800
So you can see here.

759
00:43:19,800 --> 00:43:24,200
It's we're reading from the same value in a bunch of places and doing

760
00:43:24,200 --> 00:43:28,100
this sort of conversion out which sort of it's a little bit nasty,

761
00:43:28,100 --> 00:43:28,600
right?

762
00:43:28,600 --> 00:43:33,100
And you can see us again doing it here like this, combines a bunch of

763
00:43:33,100 --> 00:43:37,100
these things together to write a single thing out, right?

764
00:43:37,900 --> 00:43:42,900
And so we kind of have a choice that we have to make at some point and

765
00:43:43,100 --> 00:43:46,200
I think maybe now would probably be a good time to start talking about

766
00:43:46,200 --> 00:43:46,400
it.

767
00:43:46,400 --> 00:43:51,100
I don't know if we want to I want to kind of set the stage maybe for

768
00:43:51,100 --> 00:43:53,700
tomorrow where we maybe talk about it, a little more detail.

769
00:43:56,000 --> 00:43:58,400
But basically, the problem looks like this, right?

770
00:44:01,900 --> 00:44:02,500
What?

771
00:44:04,300 --> 00:44:08,500
Is our wide strategy.

772
00:44:10,900 --> 00:44:11,500
Right.

773
00:44:12,100 --> 00:44:15,900
So what I talked about on the episode, when I sort of introducing

774
00:44:15,900 --> 00:44:19,600
optimization contents as I talked a lot about this thing called Cindy,

775
00:44:20,200 --> 00:44:21,800
which is single instruction,

776
00:44:25,400 --> 00:44:26,300
Multiple data.

777
00:44:28,000 --> 00:44:28,500
Right.

778
00:44:30,000 --> 00:44:32,500
And what that meant is, I said, we're essentially going to have to

779
00:44:32,500 --> 00:44:34,800
start thinking about operating on four things once.

780
00:44:35,400 --> 00:44:35,900
Okay?

781
00:44:36,500 --> 00:44:39,100
Now for things at once, could mean multiple things, right?

782
00:44:39,100 --> 00:44:42,000
If I know that I'm going to operate on for floating Point values,

783
00:44:42,300 --> 00:44:42,900
right?

784
00:44:43,200 --> 00:44:44,600
0 1, 2, 3.

785
00:44:45,600 --> 00:44:47,400
Well, what do those values mean?

786
00:44:48,700 --> 00:44:54,700
I could be talking about pixel 1 pixel to pixel 3, pixel for whatever,

787
00:44:54,800 --> 00:44:55,300
right?

788
00:44:55,300 --> 00:44:57,000
I could be talking about multiple pixels.

789
00:44:57,200 --> 00:44:59,900
So each one of my Lanes each one of my symptoms

790
00:45:00,000 --> 00:45:02,300
Lanes could be a separate pixel.

791
00:45:02,500 --> 00:45:05,200
So I try to operate on four pixels at a time.

792
00:45:05,300 --> 00:45:06,700
Let's say that's one way.

793
00:45:08,000 --> 00:45:12,800
Another way to do it would be to map those to RGB in a, right?

794
00:45:12,800 --> 00:45:16,600
So I basically have each of those, you know, map that way.

795
00:45:17,500 --> 00:45:19,700
And so, when you think about how you want to operate on these, you

796
00:45:19,700 --> 00:45:23,200
have to kind of consider when you're operating on four things at once.

797
00:45:23,400 --> 00:45:25,400
What are the four things, right?

798
00:45:25,400 --> 00:45:26,400
What, what are they?

799
00:45:27,600 --> 00:45:31,200
And if you take a look at how things are working in here, you can see

800
00:45:31,400 --> 00:45:37,500
why one thing that we probably don't want to do is to use this to use

801
00:45:37,500 --> 00:45:37,700
the

802
00:45:37,900 --> 00:45:40,500
The format where it's rgba, right?

803
00:45:41,500 --> 00:45:45,300
So if we were to talk about a Sim D architecture that was RGB and a

804
00:45:45,300 --> 00:45:47,800
packed into our Cindy registers, right?

805
00:45:48,300 --> 00:45:51,100
You can see already that that would be kind of bad because just

806
00:45:51,100 --> 00:45:56,800
looking at the operations we do, they don't chain that way, very well.

807
00:45:57,000 --> 00:46:00,800
Most operations treat the alpha differently than they treat, the r, g

808
00:46:00,800 --> 00:46:02,300
and B, right?

809
00:46:03,400 --> 00:46:09,400
And so, we constantly be fighting this situation where, you know, we

810
00:46:09,400 --> 00:46:13,100
got to we got to deal with the alpha and in a different way and we

811
00:46:13,100 --> 00:46:16,800
constantly be losing like a quarter of our performance by downshifting

812
00:46:16,800 --> 00:46:18,700
all the time to deal with it that way.

813
00:46:19,500 --> 00:46:22,900
So what we'd rather do is always be able to do it in something where

814
00:46:22,900 --> 00:46:25,400
the, the stuff happens exactly the same every time and that's why

815
00:46:25,400 --> 00:46:30,000
pixels is a much more compelling thing is because all of these things,

816
00:46:30,000 --> 00:46:32,000
if we were to do for a pixel at a time, obviously all of these

817
00:46:32,000 --> 00:46:33,000
operations just work with

818
00:46:33,200 --> 00:46:33,500
Everyday.

819
00:46:33,500 --> 00:46:35,600
Are you know, if you're doing this operation?

820
00:46:35,800 --> 00:46:38,900
Well you're doing it on the a Channel of four pixels at once and

821
00:46:38,900 --> 00:46:41,400
you're just doing the same operation on all four, right?

822
00:46:41,400 --> 00:46:43,500
Which is fine, but

823
00:46:44,900 --> 00:46:48,100
The same thing I just said about RGB turns out to be true.

824
00:46:48,600 --> 00:46:54,300
When you look at unpacking right, unpacking is a problem because

825
00:46:54,300 --> 00:46:58,800
unpacking means that I can't just take some input values and then

826
00:46:58,800 --> 00:46:59,800
start working with them, right?

827
00:46:59,800 --> 00:47:05,200
I mean the the classic example for would be the r g and B here, right?

828
00:47:05,200 --> 00:47:12,000
I load in, you know, let's say I load in for Pixel values, right?

829
00:47:12,800 --> 00:47:14,300
And they're 32-bit packed

830
00:47:14,800 --> 00:47:23,900
So you know, this is rgba here, rgba here, rgba here RG, oops GBA here

831
00:47:24,000 --> 00:47:27,300
because remember each one of these things is 32 bits, right?

832
00:47:27,300 --> 00:47:33,400
And this is just me, 128 bits long, right?

833
00:47:33,500 --> 00:47:36,400
It's one of these wide things and normally we've got floats in there,

834
00:47:36,400 --> 00:47:39,400
but if we were to talk about looking at like the frame buffer or

835
00:47:39,400 --> 00:47:43,100
something like that or the texture there, these packed rgba things,

836
00:47:43,400 --> 00:47:44,000
right?

837
00:47:44,400 --> 00:47:44,600
So

838
00:47:44,700 --> 00:47:48,900
When we load those in, we then have this nasty problem of we have to

839
00:47:48,900 --> 00:47:54,600
get from this right into something where we actually group all of the

840
00:47:54,600 --> 00:47:56,700
ours together, right?

841
00:47:57,600 --> 00:47:59,800
So we have to grab all the ours out and

842
00:48:00,100 --> 00:48:04,200
And then we have to grab all the geez out, right to produce rrr grr,

843
00:48:04,200 --> 00:48:09,300
be an RA so that we can start working on things in that, pixel, in

844
00:48:09,300 --> 00:48:10,800
that pixel way, right?

845
00:48:11,800 --> 00:48:15,300
So, you know, one thing that often happens.

846
00:48:16,900 --> 00:48:20,200
When you're talking about really optimizing for stuff like this is you

847
00:48:20,200 --> 00:48:22,500
might convert your frame buffer format.

848
00:48:23,400 --> 00:48:27,800
So that your frame buffer format is actually instead of storing things

849
00:48:27,800 --> 00:48:28,500
this way.

850
00:48:28,600 --> 00:48:33,200
It actually just stores, ours together, you know, geez together B's

851
00:48:33,200 --> 00:48:33,700
together.

852
00:48:33,700 --> 00:48:38,200
And so on to save this annoying process that I'm that I'm showing you

853
00:48:38,200 --> 00:48:38,400
here.

854
00:48:38,400 --> 00:48:42,400
Have to grab out certain things from every value.

855
00:48:43,600 --> 00:48:47,400
So, I guess what I would say is about that.

856
00:48:52,100 --> 00:48:56,700
We're going to talk a bunch tomorrow about Cindy because tomorrow is

857
00:48:56,700 --> 00:48:59,100
sort of the day that, you know, we got our stuff flattened out here in

858
00:48:59,100 --> 00:49:02,500
before we talk about how much each of these operations costs.

859
00:49:02,500 --> 00:49:05,400
I want to talk about Cindy little so that everyone kind of understands

860
00:49:05,400 --> 00:49:07,900
what it is and we've mentioned it much much time.

861
00:49:07,900 --> 00:49:10,700
But I wanted to spend a good Blackboard session just talking about

862
00:49:10,700 --> 00:49:14,600
Cindy, how it works, what it means and that sort of stuff and so that

863
00:49:14,600 --> 00:49:16,300
we can go through an estimate, the costs here.

864
00:49:17,300 --> 00:49:21,600
What I wanted to say about that is because the goal for this is not to

865
00:49:21,600 --> 00:49:25,700
ship us off our rasterizer, but rather to write a software, rasterizer

866
00:49:25,700 --> 00:49:30,300
that works the same way gpus generally work because I think that's

867
00:49:30,300 --> 00:49:32,900
where educational and more interesting since there's no point in

868
00:49:32,900 --> 00:49:35,900
shipping a software, rasterizer in today's day and age, you're going

869
00:49:35,900 --> 00:49:38,000
to use the GPU if you want performance, right?

870
00:49:38,700 --> 00:49:42,800
I think we're not going to take that step of reorganizing our textures

871
00:49:42,800 --> 00:49:46,800
and our frame buffers to be packed our pack g-pack.

872
00:49:47,000 --> 00:49:47,800
B and so on.

873
00:49:48,600 --> 00:49:53,400
Because I'd rather do closer to what the GPU does and the GPU does do

874
00:49:53,400 --> 00:49:55,100
that does does pack them.

875
00:49:55,200 --> 00:49:57,100
They the GPU doesn't reorganize them.

876
00:50:00,800 --> 00:50:02,000
And the reason for that,

877
00:50:03,400 --> 00:50:06,800
Is that the GPU has much more powerful unpacking stuff that it can do

878
00:50:07,900 --> 00:50:11,700
and it would rather have the cash locality of making sure it because

879
00:50:11,700 --> 00:50:16,400
it knows it's always going to use RGB and a is together so it would

880
00:50:16,400 --> 00:50:17,700
rather have that cache locality.

881
00:50:17,700 --> 00:50:19,400
So instead it just has Hardware.

882
00:50:19,400 --> 00:50:21,300
That does that unpacking very efficiently, right?

883
00:50:21,300 --> 00:50:22,500
And doesn't have to worry about it.

884
00:50:23,900 --> 00:50:27,000
We don't have that special purpose Hardware on a CPU because they

885
00:50:27,000 --> 00:50:29,600
didn't, you know, they didn't put in instructions for doing that sort

886
00:50:29,600 --> 00:50:32,200
of thing, but the impact is not that bad.

887
00:50:32,500 --> 00:50:35,200
And so, we'll see when we talk about somebody tomorrow, they'll be

888
00:50:35,200 --> 00:50:38,300
ways that we can do the unpacking, probably relatively quickly.

889
00:50:39,000 --> 00:50:41,800
And so, but it might be a little less efficient than it would have

890
00:50:41,800 --> 00:50:44,900
been if we had reorganized our frame buffer.

891
00:50:45,500 --> 00:50:48,900
All right, so anyway, we've got ourselves reorganized here, and we're

892
00:50:48,900 --> 00:50:50,800
about done with today's episode.

893
00:50:50,800 --> 00:50:51,600
So that's good.

894
00:50:52,300 --> 00:50:52,700
What I would.

895
00:50:52,800 --> 00:50:53,600
Like to do.

896
00:50:55,100 --> 00:50:57,700
potentially, here is

897
00:51:00,000 --> 00:51:01,000
No, we haven't.

898
00:51:01,000 --> 00:51:02,500
One thing that we might want to empty shell.

899
00:51:02,500 --> 00:51:04,300
Look and see if there's anything we need to kind of solidify.

900
00:51:04,300 --> 00:51:05,100
I don't think so.

901
00:51:05,200 --> 00:51:07,100
Basically, like pixel centers up here.

902
00:51:07,100 --> 00:51:09,800
The thing that determines whether or not, you're touching a pixel

903
00:51:09,800 --> 00:51:10,800
explicitly, or not.

904
00:51:11,300 --> 00:51:13,600
And how you convert from that to a texture.

905
00:51:13,600 --> 00:51:18,300
Coordinate, might be something we want to make a little more solid and

906
00:51:18,300 --> 00:51:22,600
a little more specified but everything else pretty much is the same

907
00:51:22,700 --> 00:51:23,600
after that.

908
00:51:23,600 --> 00:51:26,800
And all of this code we've already vetted like this already is pretty

909
00:51:26,800 --> 00:51:28,300
much what we want to do.

910
00:51:28,500 --> 00:51:29,900
It does the operation

911
00:51:30,000 --> 00:51:31,000
Is that the right space?

912
00:51:31,500 --> 00:51:36,000
It produces the the proper results that we want to produce already and

913
00:51:36,000 --> 00:51:37,300
so given that that's the case.

914
00:51:37,300 --> 00:51:40,400
I think we can go ahead and optimize just you know, this whole part

915
00:51:40,500 --> 00:51:43,500
and if later on when we go in, maybe we'll do a little passive.

916
00:51:43,500 --> 00:51:44,400
Do some correctness stuff.

917
00:51:44,400 --> 00:51:47,800
If we have to change, just the Preamble part to pick the pixels in a

918
00:51:47,800 --> 00:51:48,700
slightly different way.

919
00:51:49,000 --> 00:51:50,500
That doesn't really bother me at all.

920
00:51:51,900 --> 00:51:52,700
So I think we're good.

921
00:51:53,200 --> 00:51:55,100
So I think that's a good place to leave it for today.

922
00:51:55,100 --> 00:51:59,400
Tomorrow, we'll talk about what, what is exactly all the sympathy

923
00:51:59,400 --> 00:52:02,100
stuff is that we've been referring to and what instructions we have to

924
00:52:02,100 --> 00:52:05,000
work with there so that we can go through and make an estimate of how

925
00:52:05,000 --> 00:52:07,700
we're going to do all these things and how fast it should run.

926
00:52:09,000 --> 00:52:12,800
And then we just go ahead and convert it really it's not that much

927
00:52:12,800 --> 00:52:14,500
more complicated than that, to be honest with you.

928
00:52:19,600 --> 00:52:22,300
That's honestly, that's it.

929
00:52:23,800 --> 00:52:24,500
It's pretty simple.

930
00:52:25,400 --> 00:52:25,900
So yeah.

931
00:52:25,900 --> 00:52:28,700
So if we take a look at all this stuff again, I hope that hasn't

932
00:52:28,700 --> 00:52:31,100
frightened you away too much, because really just the flattening down

933
00:52:31,100 --> 00:52:33,600
was just so we could make sure we see everything that has to happen.

934
00:52:33,600 --> 00:52:37,900
And we know that we can do the steps in Cindy and the reason I didn't

935
00:52:37,900 --> 00:52:43,700
blow out this clamp function also was because clamp is really a very

936
00:52:43,700 --> 00:52:44,500
specific thing.

937
00:52:44,500 --> 00:52:46,500
That's very easy to do in Cindy.

938
00:52:46,900 --> 00:52:48,500
It doesn't require branching.

939
00:52:49,800 --> 00:52:53,200
So it would be very misleading if I blew out the scale.

940
00:52:53,400 --> 00:52:55,600
Version of these with the ifs and stuff like that.

941
00:52:56,400 --> 00:52:59,200
Basically that's that's that's why that is the way that is.

942
00:52:59,500 --> 00:53:02,700
So clamp will really just translate to to instructions and Sunday, so

943
00:53:02,700 --> 00:53:06,000
I didn't feel like it was necessary to extract that out because we'll

944
00:53:06,000 --> 00:53:07,300
be very, very straightforward.

945
00:53:08,300 --> 00:53:08,800
But yeah.

946
00:53:09,100 --> 00:53:14,200
So let's go ahead and go to the Q&A.

947
00:53:15,500 --> 00:53:19,300
And if anyone has any questions, I will take them now.

948
00:53:28,300 --> 00:53:30,500
Braden Cruiser, the way the code is written.

949
00:53:30,500 --> 00:53:32,600
Now, you have a very long dependency chain.

950
00:53:32,600 --> 00:53:36,400
Between instructions, will you break down the code to remove it?

951
00:53:37,500 --> 00:53:43,500
So, not there really isn't a dependency chain here for, for an Intel

952
00:53:43,500 --> 00:53:44,200
processor.

953
00:53:45,000 --> 00:53:46,900
So, if you take a look at this, right,

954
00:53:48,500 --> 00:53:51,000
We've got unpacking issues aside, right?

955
00:53:51,200 --> 00:53:56,900
If you take a look at these, any given window, here of instructions,

956
00:53:57,200 --> 00:53:59,800
there's tons of things that are not dependent, right?

957
00:54:01,000 --> 00:54:02,800
so, you know, for example,

958
00:54:04,200 --> 00:54:08,000
It can issue all four of these totally separately right?

959
00:54:08,100 --> 00:54:12,000
This does not depend on this does not depend on this does not depend

960
00:54:12,000 --> 00:54:13,400
on this, right?

961
00:54:14,600 --> 00:54:21,200
And so as long as you have enough instructions to mask, whatever the

962
00:54:21,200 --> 00:54:24,800
latency is of a particular unit or the throughput is a particular

963
00:54:25,000 --> 00:54:27,600
whatever, the latency is of the particular unit, you're targeting,

964
00:54:27,700 --> 00:54:28,200
right?

965
00:54:28,600 --> 00:54:30,700
So let's say you're doing multiplies or whatever.

966
00:54:32,900 --> 00:54:38,200
As long as you have enough, so that you can that it will retire in

967
00:54:38,200 --> 00:54:38,700
time.

968
00:54:39,400 --> 00:54:41,200
You're told, you're totally fine, right?

969
00:54:41,300 --> 00:54:47,800
So it can issue for example, these two multiplies together and then

970
00:54:47,800 --> 00:54:50,700
this one, and this one, it can issue all of those together.

971
00:54:50,800 --> 00:54:56,000
And, you know, by the time it's issued four of those and comes back to

972
00:54:56,000 --> 00:54:59,400
issue the next ones you're probably okay, right?

973
00:54:59,800 --> 00:55:02,500
And similarly, even if it can't like, let's say it is,

974
00:55:02,700 --> 00:55:07,200
Use these all and then it can't do the square yet because it's waiting

975
00:55:07,200 --> 00:55:10,500
for this, it can issue all of these because these are all independent.

976
00:55:10,500 --> 00:55:13,700
It can issue all of these because these are all independent, right?

977
00:55:14,000 --> 00:55:15,700
And the windows pretty large.

978
00:55:15,700 --> 00:55:21,600
So, you know, again, rearranging these is not necessarily all that

979
00:55:21,800 --> 00:55:24,700
valuable for you to do, that makes sense.

980
00:55:25,200 --> 00:55:28,400
But if it's something that you're worried about, you can certainly do

981
00:55:28,400 --> 00:55:28,900
this.

982
00:55:29,900 --> 00:55:30,400
Right.

983
00:55:31,800 --> 00:55:38,000
You can certainly start pushing things up more together or you can you

984
00:55:38,000 --> 00:55:41,800
can pull the, you know, you can pull the multiplies out so that you

985
00:55:41,800 --> 00:55:46,200
square, you do the square, you know, down here as a separate thing.

986
00:55:46,600 --> 00:55:50,500
I'm just I'm not sure that there's really any point in doing any of

987
00:55:50,500 --> 00:55:53,900
that because there's there's really just not that much cereal

988
00:55:53,900 --> 00:55:56,900
dependency here in terms of the actual window that the process going

989
00:55:56,900 --> 00:55:58,400
to look at that make sense.

990
00:56:00,000 --> 00:56:03,400
But yeah, the other problem that we do have though a little bit is

991
00:56:03,400 --> 00:56:06,700
that there's nothing you can do about the fact that things are a

992
00:56:06,700 --> 00:56:07,000
little.

993
00:56:07,000 --> 00:56:10,400
See really dependent, you know, it's pixel processing.

994
00:56:10,400 --> 00:56:14,000
So you got to you know, you have some sort of dependencies there but I

995
00:56:14,000 --> 00:56:18,000
don't think basically the processors are very fast with how fast

996
00:56:18,200 --> 00:56:21,900
multiplies move through the pipeline your the latency isn't 300

997
00:56:21,900 --> 00:56:22,300
Cycles.

998
00:56:22,300 --> 00:56:25,300
You know it's like eight Cycles or six Cycles or whatever right?

999
00:56:26,100 --> 00:56:28,900
And so you really don't have to have that many

1000
00:56:29,000 --> 00:56:32,200
Instructions in the window for that to work.

1001
00:56:43,000 --> 00:56:43,800
Stellar 7.

1002
00:56:44,100 --> 00:56:45,600
Why did I write float?

1003
00:56:45,600 --> 00:56:48,400
Instead of real attorney to thank you for catching that.

1004
00:56:48,800 --> 00:56:52,900
There's a very specific reason why I wrote that something that annoys

1005
00:56:53,300 --> 00:56:57,600
me to no end, but I'm almost coming to the end of it now.

1006
00:56:57,600 --> 00:56:58,200
So it's fine.

1007
00:57:00,000 --> 00:57:02,800
Do a bunch of optimization work on the witness, for the past three

1008
00:57:02,800 --> 00:57:06,200
days, and in there, it's called float, right?

1009
00:57:07,000 --> 00:57:09,300
So I had to get you some typing float for three days.

1010
00:57:15,100 --> 00:57:18,100
Why do you do to instead of O 3 or 0 fast?

1011
00:57:18,400 --> 00:57:21,900
I think just because I don't really know the compiler switches these

1012
00:57:21,900 --> 00:57:27,700
days that well is 0-3 faster than 0 to buy any.

1013
00:57:27,700 --> 00:57:28,800
Let's find out.

1014
00:57:30,900 --> 00:57:31,800
So let's see here.

1015
00:57:31,800 --> 00:57:33,900
Here is our game running.

1016
00:57:34,700 --> 00:57:38,300
You know, we've got two hundred and forty some odd Cycles happening

1017
00:57:38,300 --> 00:57:39,200
per pixel there.

1018
00:57:39,500 --> 00:57:40,500
Here's our three.

1019
00:57:43,200 --> 00:57:46,100
Says, ignoring unknown option so fast.

1020
00:57:48,800 --> 00:57:51,000
Are you sure these are actual switches?

1021
00:57:53,300 --> 00:57:54,200
Stellar 7.

1022
00:58:06,800 --> 00:58:10,800
Do you ever use exclusive or operations to avoid pipeline stalls?

1023
00:58:10,900 --> 00:58:12,900
If not what do you use?

1024
00:58:13,700 --> 00:58:18,000
No, I generally don't because I don't tend to do that level of

1025
00:58:18,000 --> 00:58:21,600
optimization like generally.

1026
00:58:23,100 --> 00:58:26,100
Well I shouldn't say that sometimes I do use exclusive or but I don't

1027
00:58:26,100 --> 00:58:28,200
use them because I'm trying to avoid pipeline stalls.

1028
00:58:28,200 --> 00:58:30,300
I use them because I'm programming and Cindy, and you have to do a

1029
00:58:30,300 --> 00:58:34,100
bunch of manipulation with tests and stuff like that.

1030
00:58:34,800 --> 00:58:35,600
But basically, like

1031
00:58:35,800 --> 00:58:39,000
My optimization tends to just be, I write stuff in Cindy.

1032
00:58:39,500 --> 00:58:42,700
I lay it out and I write it in Cindy and then I'm done, right?

1033
00:58:42,700 --> 00:58:46,400
I don't, I usually do not go beyond that.

1034
00:58:46,600 --> 00:58:49,600
Like I said on the Xbox 360, I did a bunch of work where I did go

1035
00:58:49,600 --> 00:58:52,800
beyond that because it was a very special circumstance but that's not

1036
00:58:52,800 --> 00:58:54,100
my normal modus operandi.

1037
00:58:54,100 --> 00:58:59,200
Like I am not the guy who who uses exclusive or to avoid a pipeline

1038
00:58:59,200 --> 00:58:59,600
stall.

1039
00:58:59,600 --> 00:59:02,600
Like that's that's not the kind of optimization.

1040
00:59:02,600 --> 00:59:03,300
I tend to do.

1041
00:59:05,100 --> 00:59:06,500
Aren't those square roots?

1042
00:59:06,500 --> 00:59:07,800
Pretty expensive.

1043
00:59:08,400 --> 00:59:12,000
So actually they're not and that's pretty interesting, you know, you

1044
00:59:12,000 --> 00:59:12,400
can

1045
00:59:15,300 --> 00:59:16,700
I don't know if there's a good.

1046
00:59:18,900 --> 00:59:19,900
Thing on here for that.

1047
00:59:19,900 --> 00:59:23,600
But if you take a look in sse2, right?

1048
00:59:23,900 --> 00:59:28,000
You've got the, I just don't know if this guide has the

1049
00:59:29,300 --> 00:59:33,000
Some of the stuff in here, if you take a look in it and actually want,

1050
00:59:33,100 --> 00:59:35,200
I just want to see the square root eans.

1051
00:59:35,200 --> 00:59:35,700
There it is.

1052
00:59:37,800 --> 00:59:42,800
So, if you take a look at the in square root PS routine here, right?

1053
00:59:44,800 --> 00:59:47,900
This routine actually completes in a reasonable amount of time.

1054
00:59:48,000 --> 00:59:48,300
I'm sorry.

1055
00:59:48,300 --> 00:59:48,600
Sweetie.

1056
00:59:48,600 --> 00:59:52,900
This instruction actually competes in a reasonable amount of time.

1057
00:59:53,000 --> 00:59:56,500
It is not slow instruction and what's what is it on?

1058
00:59:56,500 --> 00:59:58,400
I don't actually know what is that blue?

1059
01:00:01,400 --> 01:00:05,100
I don't know what the blue is supposed to be representing.

1060
01:00:05,100 --> 01:00:08,400
Their this is the one I actually wanted.

1061
01:00:08,400 --> 01:00:09,000
Here it is.

1062
01:00:09,200 --> 01:00:10,300
Reciprocal square root.

1063
01:00:10,400 --> 01:00:10,800
That's the one.

1064
01:00:10,800 --> 01:00:11,500
I actually wanted.

1065
01:00:12,700 --> 01:00:15,300
So, getting one over the square root, right?

1066
01:00:16,700 --> 01:00:17,900
Which is pretty crazy, right?

1067
01:00:17,900 --> 01:00:19,200
One over the square root,

1068
01:00:20,900 --> 01:00:22,300
Is actually crazy fast.

1069
01:00:22,300 --> 01:00:26,100
You can actually do one over the square root in in hardly any time at

1070
01:00:26,100 --> 01:00:27,300
all like take a look at this.

1071
01:00:27,300 --> 01:00:29,000
Latency 53.

1072
01:00:29,000 --> 01:00:34,100
Put one and it goes down all the way down to two latency 23 if you're

1073
01:00:34,100 --> 01:00:34,800
on the other one, right?

1074
01:00:34,800 --> 01:00:38,900
But on any of the modern cores, it's a bit of latency.

1075
01:00:38,900 --> 01:00:41,100
But you can, you can issue a ton of them, right?

1076
01:00:41,100 --> 01:00:43,400
So you can actually, if you're issuing, several of them, you can

1077
01:00:43,400 --> 01:00:47,800
actually get them going through at one cycle per inverse square root.

1078
01:00:47,800 --> 01:00:50,800
And so, since we don't

1079
01:00:51,100 --> 01:00:56,300
Actually care that much about how accurate the square roots are I

1080
01:00:56,300 --> 01:00:59,500
would suppose that we're going to be able to do those pretty quickly.

1081
01:01:03,100 --> 01:01:05,400
You know it's a it's an inverse square root.

1082
01:01:05,400 --> 01:01:08,800
So we'll have to do I don't think we have access to the regular square

1083
01:01:08,800 --> 01:01:09,400
root.

1084
01:01:09,500 --> 01:01:12,400
I don't actually remember if that was what the regular, whether the

1085
01:01:12,400 --> 01:01:16,500
regular square root is actually in there or not, let's let's see here.

1086
01:01:17,900 --> 01:01:20,000
I think they added that later.

1087
01:01:21,500 --> 01:01:22,900
I'm sorry, I've never used this fact.

1088
01:01:22,900 --> 01:01:24,800
This was something that someone on the stream point out to me.

1089
01:01:24,800 --> 01:01:25,700
It's pretty cool.

1090
01:01:25,700 --> 01:01:27,100
I but I've never used it before.

1091
01:01:27,100 --> 01:01:31,600
Some kind of, I'm kind of lame and actually finding it.

1092
01:01:32,200 --> 01:01:39,900
So I feel like there should be a square root that was actually on

1093
01:01:39,900 --> 01:01:40,400
here.

1094
01:01:41,100 --> 01:01:42,900
I feel like they added square root.

1095
01:01:44,300 --> 01:01:46,500
Some point, right?

1096
01:01:47,600 --> 01:01:48,400
I mean,

1097
01:01:50,300 --> 01:01:51,200
Pretty sure.

1098
01:01:51,200 --> 01:01:51,600
Mmm.

1099
01:01:51,600 --> 01:01:53,100
Squirt PD.

1100
01:01:54,500 --> 01:01:55,700
But where is Squirt?

1101
01:01:55,700 --> 01:01:56,900
PS?

1102
01:01:57,800 --> 01:01:59,500
Well, tell you what?

1103
01:02:03,100 --> 01:02:04,400
And I'm squirt PS.

1104
01:02:04,600 --> 01:02:05,200
There it is.

1105
01:02:08,500 --> 01:02:09,000
Yeah.

1106
01:02:10,700 --> 01:02:14,400
So here, if we actually just want to do the regular square root

1107
01:02:14,500 --> 01:02:18,300
instead of doing like a thing in an inversion, even then it's not that

1108
01:02:18,300 --> 01:02:19,900
bad, right?

1109
01:02:20,500 --> 01:02:24,200
It gets worse if we go down but that's not that bad and that's

1110
01:02:24,200 --> 01:02:25,900
actually available on regular SSE, I guess.

1111
01:02:25,900 --> 01:02:27,200
So that's been in there forever.

1112
01:02:28,100 --> 01:02:29,200
So doing the square root.

1113
01:02:29,200 --> 01:02:29,400
Yeah.

1114
01:02:29,400 --> 01:02:33,700
I mean, do we want to have to spend 14 Cycles or seven Cycles

1115
01:02:33,800 --> 01:02:35,100
depending on the processor?

1116
01:02:35,500 --> 01:02:39,900
You know, know, but at the same time it's like well,

1117
01:02:40,300 --> 01:02:42,900
You know, it's not too bad and we can do the accurate rendering.

1118
01:02:42,900 --> 01:02:46,000
Now, if we want to, we can always just get rid of these because all

1119
01:02:46,000 --> 01:02:48,800
they were as to do light linear computations, right?

1120
01:02:49,000 --> 01:02:50,100
So if we find, they're too slow.

1121
01:02:50,100 --> 01:02:52,500
We really want to get rid of me can but that's just that's not too

1122
01:02:52,500 --> 01:02:53,100
bad.

1123
01:02:56,000 --> 01:02:57,500
So I think we could probably do it.

1124
01:02:57,600 --> 01:02:59,800
For example, you know, one way we could

1125
01:03:00,000 --> 01:03:05,100
Do it is, you know, we have some we have some overhead for doing this.

1126
01:03:05,100 --> 01:03:09,900
Throughput we could probably do that and try to like mask out some,

1127
01:03:09,900 --> 01:03:13,200
you know, try to basically like have some other stuff going on while

1128
01:03:13,200 --> 01:03:13,700
that's happening.

1129
01:03:13,700 --> 01:03:15,400
So maybe we maybe it overlapped physically.

1130
01:03:15,400 --> 01:03:18,500
I say I'm not sure, but I think it should be pretty good.

1131
01:03:18,500 --> 01:03:19,600
I think it's not too bad.

1132
01:03:20,800 --> 01:03:24,000
It will definitely be one of the more expensive instructions that we

1133
01:03:24,000 --> 01:03:24,800
ever call, though.

1134
01:03:25,100 --> 01:03:26,000
That's definitely true.

1135
01:03:31,700 --> 01:03:35,500
Will you make multiple CMD back ends know, we're only going to do one

1136
01:03:35,500 --> 01:03:40,100
Cindy back end because really the other 70 back ends would just be

1137
01:03:40,100 --> 01:03:44,000
kind of their nest.

1138
01:03:44,000 --> 01:03:45,800
Not that interesting.

1139
01:03:45,900 --> 01:03:47,600
They just be whiter, right?

1140
01:03:48,500 --> 01:03:51,600
Because we're not using that many fancy instructions so it's not, I

1141
01:03:51,600 --> 01:03:54,500
guess maybe with the unpacking there's some things we might could do

1142
01:03:54,500 --> 01:03:56,600
differently but I don't think it's worth it since.

1143
01:03:56,600 --> 01:03:59,900
We're not trying to ship the renderer as a thing that people actually

1144
01:03:59,900 --> 01:04:00,800
use, I don't know that there's much.

1145
01:04:00,900 --> 01:04:02,900
Point in doing multiple sanity back ends.

1146
01:04:04,800 --> 01:04:07,100
You could lost some of those variables at one more Loop.

1147
01:04:09,600 --> 01:04:10,800
Yes, that's probably true.

1148
01:04:10,800 --> 01:04:17,200
We could I haven't looked too much at which ones we would Loft out

1149
01:04:17,200 --> 01:04:17,700
though.

1150
01:04:18,400 --> 01:04:21,900
I don't think there's that many, you know, like some of these can be

1151
01:04:21,900 --> 01:04:22,800
moved.

1152
01:04:25,000 --> 01:04:29,900
But the compiler will almost definitely do those but we yeah, you

1153
01:04:29,900 --> 01:04:31,600
know, we can take a look, I didn't want to do.

1154
01:04:31,600 --> 01:04:35,300
The reason I didn't do these two was because we want to talk about

1155
01:04:35,300 --> 01:04:38,100
this a little bit because we still haven't sort of decided exactly how

1156
01:04:38,100 --> 01:04:40,500
that multiplication happens.

1157
01:04:41,100 --> 01:04:41,700
But yeah,

1158
01:04:45,700 --> 01:04:47,200
I think this is actually wrong.

1159
01:04:48,200 --> 01:04:49,500
If this should be minus one.

1160
01:04:52,900 --> 01:04:53,200
Yeah.

1161
01:04:58,400 --> 01:05:00,400
How expensive is the float to in conversion?

1162
01:05:00,400 --> 01:05:01,800
Compared to the rest of the workload?

1163
01:05:02,000 --> 01:05:04,100
I think it typically takes about one cycle.

1164
01:05:04,100 --> 01:05:06,000
I mean, one cycle, two cycles.

1165
01:05:06,600 --> 01:05:11,300
It's an SSE instruction, it's called convert.

1166
01:05:12,300 --> 01:05:13,600
You can take a look at it here.

1167
01:05:16,800 --> 01:05:20,200
So basically, like, you know, here's here's what you're looking at.

1168
01:05:20,400 --> 01:05:23,100
So I guess I guess you can actually it only takes one cycle to do that

1169
01:05:23,100 --> 01:05:23,800
conversion.

1170
01:05:24,400 --> 01:05:26,800
So it's pretty, it's pretty painless.

1171
01:05:28,500 --> 01:05:32,700
It used to be the case that it was nasty, but it's pretty painless

1172
01:05:32,700 --> 01:05:33,100
now.

1173
01:05:41,200 --> 01:05:44,100
Since x-axis and y-axis are usually perpendicular should be special

1174
01:05:44,100 --> 01:05:47,200
case for that, in the same vein should be special case for axis

1175
01:05:47,200 --> 01:05:47,900
aligned.

1176
01:05:49,600 --> 01:05:53,800
So I don't know that there's really all that much we have to do to

1177
01:05:53,800 --> 01:05:55,900
special case because if you look at this,

1178
01:05:57,700 --> 01:05:59,200
I mean, just just look at this.

1179
01:06:00,000 --> 01:06:02,100
All of this work is what we have to do per pixel.

1180
01:06:02,300 --> 01:06:06,500
So, saving the special case for the axis of line, this is just not

1181
01:06:06,500 --> 01:06:07,200
that interesting.

1182
01:06:08,300 --> 01:06:12,900
The way that it might be the place that it would be beneficial would

1183
01:06:12,900 --> 01:06:16,200
be the texture, lookups, because you could reuse some of them.

1184
01:06:17,000 --> 01:06:20,400
But again, I want to keep this relatively close to how the GPU work.

1185
01:06:20,400 --> 01:06:24,500
So I don't really know if I want to go down that road too much and

1186
01:06:24,500 --> 01:06:27,300
plus since it's going to be in the cache, when you do those multiple

1187
01:06:27,300 --> 01:06:29,800
fetches, I don't know that you would save that much anyway.

1188
01:06:30,000 --> 01:06:33,700
But yeah, if you wanted to go as fast as possible, you would probably

1189
01:06:33,700 --> 01:06:40,100
special case basically axis aligned so that you could optimize your

1190
01:06:40,100 --> 01:06:44,500
texture fetches to reuse textiles, you've already had and you probably

1191
01:06:44,500 --> 01:06:47,500
do both, you do a shrinking one, and a growing one separately.

1192
01:06:57,000 --> 01:07:00,300
Does the compiler do any automatic SSE optimization?

1193
01:07:02,400 --> 01:07:04,400
I think so.

1194
01:07:06,200 --> 01:07:13,100
I don't think it probably did it for us, but I think it does on Gees

1195
01:07:13,100 --> 01:07:14,500
on llvm.

1196
01:07:14,500 --> 01:07:19,800
Definitely has a vectorizer you can invoke but I don't really know

1197
01:07:19,800 --> 01:07:21,100
about visual Studios.

1198
01:07:21,100 --> 01:07:26,400
I pretty much always write it myself, so I don't really know.

1199
01:07:26,800 --> 01:07:28,900
Let me let me, let me see if I can

1200
01:07:31,100 --> 01:07:32,400
Get this to happen here.

1201
01:07:34,400 --> 01:07:37,200
so, if we take a look at what it's doing,

1202
01:07:41,300 --> 01:07:42,200
Go to.

1203
01:07:43,800 --> 01:07:44,700
Disassembly.

1204
01:07:45,600 --> 01:07:48,800
We can kind of look to see if it looks like it's doing anything

1205
01:07:49,400 --> 01:07:51,600
particularly intelligent with that.

1206
01:07:53,100 --> 01:07:57,800
I don't actually know if it is or not, but let's see.

1207
01:07:58,700 --> 01:08:01,600
Next sort we go.

1208
01:08:04,500 --> 01:08:06,500
Where is my right there is the registers.

1209
01:08:07,300 --> 01:08:10,800
Let's take a look at the SSE registers.

1210
01:08:12,300 --> 01:08:12,800
There we go.

1211
01:08:14,000 --> 01:08:17,100
So you can kind of see, unfortunately.

1212
01:08:17,100 --> 01:08:20,100
The answer is, no, it really hasn't done anything.

1213
01:08:20,100 --> 01:08:24,899
It's pretty much working exclusively in in just the lower part of the

1214
01:08:24,899 --> 01:08:26,700
register, right, because this is the register.

1215
01:08:28,500 --> 01:08:31,800
And, you know, if it was, if it was operating on a bunch of things at

1216
01:08:31,800 --> 01:08:34,100
once, you would see it spread out in here.

1217
01:08:35,100 --> 01:08:36,200
And so you can kind of see that.

1218
01:08:36,200 --> 01:08:40,600
It's just doing everything in scalar and keeping it in the lower part

1219
01:08:40,600 --> 01:08:41,700
of the SSC registers.

1220
01:08:41,700 --> 01:08:41,899
So, it's

1221
01:08:42,100 --> 01:08:44,800
Never actually doing anything out out here.

1222
01:08:47,000 --> 01:08:52,899
So so it didn't it didn't happen to, in this case, there might be some

1223
01:08:52,899 --> 01:08:54,899
feature you can turn on but I'm not sure.

1224
01:09:01,700 --> 01:09:03,300
Squirt SS versus squirt.

1225
01:09:03,300 --> 01:09:05,200
PS versus squirt PD.

1226
01:09:05,500 --> 01:09:05,800
Okay.

1227
01:09:05,800 --> 01:09:07,100
So, this is just the ridiculous.

1228
01:09:07,100 --> 01:09:11,800
We'll talk a little bit about this tomorrow and it always confuses me

1229
01:09:11,800 --> 01:09:12,700
to no end anyway.

1230
01:09:12,700 --> 01:09:17,500
But for whatever reason, when they introduced these engines X, you

1231
01:09:17,500 --> 01:09:18,800
know, they're underscore.

1232
01:09:18,800 --> 01:09:19,500
Mmm.

1233
01:09:19,899 --> 01:09:22,600
I think that b stood for a multimedia or something.

1234
01:09:22,800 --> 01:09:28,500
I don't even know, don't ask me, but anyway, the way that they chose

1235
01:09:28,500 --> 01:09:30,100
to name them is like, you know, it's mmm.

1236
01:09:30,300 --> 01:09:31,100
Underscore mmm.

1237
01:09:31,100 --> 01:09:33,399
And then it's underscore whatever the thing is that you're trying to

1238
01:09:33,399 --> 01:09:34,300
do, right?

1239
01:09:34,300 --> 01:09:36,200
So like you know, if you're trying to do square roots going to be

1240
01:09:36,200 --> 01:09:39,200
squirt in the middle, so the operation goes in the middle and then the

1241
01:09:39,200 --> 01:09:42,200
suffix is, like, what kind of thing?

1242
01:09:42,300 --> 01:09:46,899
It's actually like, what, what, how it's treating, the stuff in the

1243
01:09:46,899 --> 01:09:47,500
register.

1244
01:09:47,899 --> 01:09:50,399
So PD means pack doubles.

1245
01:09:50,899 --> 01:09:53,000
So basically that's going to operate on two.

1246
01:09:53,000 --> 01:09:54,900
Doubles, you can kind of see it here, right?

1247
01:09:54,900 --> 01:10:00,000
It's going to do to 64-bit square roots, whereas PS is

1248
01:10:00,200 --> 01:10:02,000
act singles, right?

1249
01:10:02,000 --> 01:10:06,000
So that's going to be for 32-bit floating Point values and you can see

1250
01:10:06,000 --> 01:10:07,200
that happening in here.

1251
01:10:07,700 --> 01:10:09,200
And then SS means.

1252
01:10:09,200 --> 01:10:13,100
I only actually needed to do one of them, right?

1253
01:10:15,100 --> 01:10:18,900
And so it's actually doing it on the lower.

1254
01:10:19,100 --> 01:10:20,000
Just the 32-bit.

1255
01:10:20,000 --> 01:10:22,700
The low 32-bit won't, I don't know?

1256
01:10:23,400 --> 01:10:24,300
Yes, it looks like this.

1257
01:10:24,300 --> 01:10:27,000
Also does a broadcast, right?

1258
01:10:29,600 --> 01:10:32,600
Pivot elements from a, oh no, doesn't it also?

1259
01:10:32,600 --> 01:10:37,100
So this does, it does the square root in the bottom and then it leaves

1260
01:10:37,500 --> 01:10:42,000
the, the upper three it like, passes the upper three through for you,

1261
01:10:43,200 --> 01:10:44,000
for whatever reason.

1262
01:10:44,100 --> 01:10:47,000
So this only does one of them, right?

1263
01:10:47,600 --> 01:10:51,000
And so that's why there's a PSP D in an SS.

1264
01:10:51,600 --> 01:10:52,700
It gets even worse.

1265
01:10:52,900 --> 01:10:56,100
You didn't see these, but if you have other operations like add that

1266
01:10:56,100 --> 01:10:57,000
apply to everything.

1267
01:10:57,100 --> 01:10:59,200
You also have all of these epi.

1268
01:11:00,600 --> 01:11:02,500
16, 32, 64, and ate.

1269
01:11:02,800 --> 01:11:09,900
Those are basically talking about doing an add-on on eight 16-bit

1270
01:11:09,900 --> 01:11:11,200
values in integer.

1271
01:11:11,400 --> 01:11:13,200
So Epi is like the integer.

1272
01:11:13,300 --> 01:11:19,400
It's an integer 16 wide and of course you can fit eight of those in

1273
01:11:19,400 --> 01:11:20,400
128 bits.

1274
01:11:20,400 --> 01:11:21,000
There you go.

1275
01:11:21,000 --> 01:11:23,000
This is for packed 32-bit integers.

1276
01:11:23,100 --> 01:11:25,200
This is too packed 64-bit integers.

1277
01:11:25,400 --> 01:11:29,200
This is 16 packed 8-bit integer.

1278
01:11:29,300 --> 01:11:31,300
Ders and so on, right?

1279
01:11:34,500 --> 01:11:40,500
So yeah I think the E versus the p is just to distinguish it between

1280
01:11:40,500 --> 01:11:43,900
when they when they had just MX that was only 64 bits wide instead of

1281
01:11:43,900 --> 01:11:45,000
128 bits wide.

1282
01:11:45,000 --> 01:11:49,200
But yeah, it's an I mean it's a mess, you know, it's he's actually a

1283
01:11:49,200 --> 01:11:51,100
fairly consistent naming scene but it's a mess.

1284
01:11:56,600 --> 01:11:59,900
Would SSE allow doing srgb using exponent?

1285
01:12:00,000 --> 01:12:05,600
Point to instead of approximating using one, I said of approximately

1286
01:12:05,600 --> 01:12:07,900
using to without huge performance.

1287
01:12:07,900 --> 01:12:08,900
It no.

1288
01:12:08,900 --> 01:12:09,500
Actually.

1289
01:12:09,500 --> 01:12:11,800
I mean it's not a huge performance hit but it is definitely

1290
01:12:11,800 --> 01:12:12,200
performance.

1291
01:12:12,200 --> 01:12:13,500
It requires a table.

1292
01:12:14,200 --> 01:12:15,600
It's nasty do it.

1293
01:12:15,600 --> 01:12:19,900
Raising something to the 2.2 power is really hard and so the

1294
01:12:19,900 --> 01:12:23,100
difference between squaring Square rooting versus doing the Race.

1295
01:12:23,100 --> 01:12:26,700
The 2.2 and raising to the 1.0 to point to is a pretty massive

1296
01:12:26,700 --> 01:12:27,600
difference actually.

1297
01:12:28,600 --> 01:12:31,900
It doesn't matter whether you're in SSI or not, it doesn't get easier.

1298
01:12:40,800 --> 01:12:43,800
The main reason why you don't get automatic Cindy is precise

1299
01:12:43,800 --> 01:12:44,400
exceptions.

1300
01:12:44,400 --> 01:12:47,900
You probably need to tell the compiler that you don't need them yet.

1301
01:12:47,900 --> 01:12:51,900
So what's your name 73 is talking about is the fact that and there's

1302
01:12:51,900 --> 01:12:56,800
actually a couple things like this which is that this see

1303
01:12:56,800 --> 01:13:01,400
specification and the IEEE specification, there's a bunch of things

1304
01:13:01,400 --> 01:13:05,700
that generally have to happen that the compiler has to obey when it's

1305
01:13:05,700 --> 01:13:07,700
doing floating Point operations.

1306
01:13:07,700 --> 01:13:10,700
And if you don't allow it some latitude,

1307
01:13:10,900 --> 01:13:16,200
Dude, it might not be able to do basically all of the optimizations it

1308
01:13:16,200 --> 01:13:17,900
could do, right?

1309
01:13:19,000 --> 01:13:22,600
And so there's flags that maybe turn those off and power like I said,

1310
01:13:22,600 --> 01:13:25,100
I'm not super familiar with them so I'm not sure exactly what they

1311
01:13:25,100 --> 01:13:26,700
would be sued him.

1312
01:13:26,700 --> 01:13:28,300
73 was talking about precise exceptions.

1313
01:13:28,300 --> 01:13:30,600
There's another one called floating-point consistency which has to do

1314
01:13:30,600 --> 01:13:33,000
with the order of operations that restrictions compiler can do.

1315
01:13:33,300 --> 01:13:37,400
So there are ways you can try to tell the compiler be lenient and then

1316
01:13:37,400 --> 01:13:40,300
it will you know maybe do those for you.

1317
01:13:40,400 --> 01:13:40,700
Now, we

1318
01:13:40,800 --> 01:13:45,100
Are saying - FP fast already but I'm not sure if there's additional

1319
01:13:45,100 --> 01:13:50,700
ones that try to tell it, you know, that you don't need like things,

1320
01:13:50,700 --> 01:13:52,000
like precise exceptions.

1321
01:13:52,400 --> 01:13:53,100
Let me see.

1322
01:13:55,100 --> 01:13:57,800
If there's any documentation for that.

1323
01:14:01,300 --> 01:14:04,500
So except - might be useful.

1324
01:14:05,000 --> 01:14:05,700
Let's see.

1325
01:14:08,600 --> 01:14:09,800
So let's let's try it.

1326
01:14:09,800 --> 01:14:14,800
We can try adding there but I don't actually know if that's going to

1327
01:14:14,800 --> 01:14:16,700
help us too much, but we can certainly try it.

1328
01:14:19,800 --> 01:14:25,500
All right, so if I go ahead and set a breakpoint in here and take a

1329
01:14:25,500 --> 01:14:33,800
look still, no right, still definitely not using any more of the

1330
01:14:33,800 --> 01:14:36,600
width, but honestly blame it.

1331
01:14:36,600 --> 01:14:38,900
I mean, you know, I don't expect it to Auto vectorize my code.

1332
01:14:38,900 --> 01:14:40,000
I can vectorize my code.

1333
01:14:45,100 --> 01:14:48,300
What happens if Arch, avx2 switches enabled?

1334
01:14:48,400 --> 01:14:49,400
I don't know.

1335
01:14:50,900 --> 01:14:54,600
First of all, this machine would crash because it doesn't have any x

1336
01:14:54,600 --> 01:14:55,000
2.

1337
01:14:55,500 --> 01:14:57,500
In fact, this machine doesn't even have a vx1.

1338
01:14:58,100 --> 01:14:59,800
This machine only has SSE

1339
01:15:00,000 --> 01:15:01,100
Three or something.

1340
01:15:02,900 --> 01:15:06,100
Maybe I see for, I'm not sure, but I'm pretty sure it doesn't have

1341
01:15:06,100 --> 01:15:06,800
avx2.

1342
01:15:09,500 --> 01:15:10,300
In fact.

1343
01:15:12,000 --> 01:15:15,200
No, she's I guess avx-512 that machines don't have right now.

1344
01:15:26,400 --> 01:15:30,800
And by the way, I looked at this the other day, this is crazy.

1345
01:15:32,100 --> 01:15:34,700
Has anyone done this?

1346
01:15:35,600 --> 01:15:36,100
Like look at it.

1347
01:15:36,100 --> 01:15:38,600
Look at this, I don't even know.

1348
01:15:38,600 --> 01:15:39,800
I got to learn this stuff.

1349
01:15:39,800 --> 01:15:41,900
Eventually I don't even know.

1350
01:15:42,000 --> 01:15:44,200
Look what is avx-512?

1351
01:15:44,200 --> 01:15:45,300
I FM a

1352
01:15:47,500 --> 01:15:49,900
I don't even I literally don't even know what that means.

1353
01:15:50,100 --> 01:15:52,800
Like I have no idea what these subcategories are because normally when

1354
01:15:52,800 --> 01:15:54,600
you go in here, right?

1355
01:15:54,800 --> 01:15:59,100
And you look at these, there's just you know there's there's just the

1356
01:15:59,100 --> 01:16:00,700
instructions for that grouping.

1357
01:16:01,100 --> 01:16:04,000
So you could say I'm SSE 4.2 it's like these are the things that are

1358
01:16:04,000 --> 01:16:07,500
necessary for by 2 but avx-512, what is this?

1359
01:16:07,800 --> 01:16:09,000
I've never seen this before.

1360
01:16:11,000 --> 01:16:14,700
So they have like broken down the instructions, into some other bunch

1361
01:16:14,700 --> 01:16:18,700
of these actually different caps bits that the processor would have.

1362
01:16:18,700 --> 01:16:22,800
And if so, who is in charge, that's ridiculous.

1363
01:16:22,800 --> 01:16:23,200
I sure.

1364
01:16:23,200 --> 01:16:26,700
Hope that's not true because who is going to actually check to see

1365
01:16:26,700 --> 01:16:29,600
which of this combinations you would have and whether to run them.

1366
01:16:29,600 --> 01:16:30,700
So I don't even know.

1367
01:16:31,000 --> 01:16:35,000
I hope that's not what that is because that would be crazy if that

1368
01:16:35,000 --> 01:16:35,600
were the case.

1369
01:16:37,800 --> 01:16:38,300
But yeah.

1370
01:16:46,500 --> 01:16:47,000
So yeah.

1371
01:16:51,700 --> 01:16:54,500
F ma is fused multiply add well sure.

1372
01:16:54,500 --> 01:16:58,900
I mean, yes, FMA is to use multi, but FMA is not the weird one, right?

1373
01:16:58,900 --> 01:17:03,200
FMA is is a separate thing that you can select on and off here, right?

1374
01:17:03,400 --> 01:17:07,500
It's avx-512 that drops down all of this stuff and I have no idea what

1375
01:17:07,500 --> 01:17:08,100
all that is.

1376
01:17:08,300 --> 01:17:12,600
So sure there's like an ifm a 52 and probably that has something to do

1377
01:17:12,600 --> 01:17:15,600
with fuse multiply add, but what does the rest of it mean and is it a

1378
01:17:15,600 --> 01:17:16,300
caps bit?

1379
01:17:16,300 --> 01:17:17,600
I don't know, right?

1380
01:17:17,900 --> 01:17:19,100
So that is the thing.

1381
01:17:19,100 --> 01:17:19,600
That's weird.

1382
01:17:19,600 --> 01:17:20,500
Not like what?

1383
01:17:20,600 --> 01:17:22,700
F ma or whatever, you know.

1384
01:17:25,400 --> 01:17:27,800
All of that said, a lot of these I don't even know what they might

1385
01:17:27,800 --> 01:17:27,900
mean.

1386
01:17:27,900 --> 01:17:32,800
Like, I don't know what a DQ would stand for either and so on, but

1387
01:17:32,800 --> 01:17:34,100
point being so I don't know.

1388
01:17:34,100 --> 01:17:38,300
Like, I don't know what any of this stuff actually means.

1389
01:17:38,500 --> 01:17:43,000
I don't know if like, you know, I don't know.

1390
01:17:43,000 --> 01:17:45,800
For example, if this is a caps but you would have to check on the

1391
01:17:45,800 --> 01:17:51,000
processor and then you know, if it had it then you could issue mad 52

1392
01:17:51,000 --> 01:17:52,000
high, right?

1393
01:17:52,100 --> 01:17:55,000
And if it didn't you couldn't or something because that's just crazy.

1394
01:17:55,200 --> 01:17:56,000
If that's true.

1395
01:17:56,200 --> 01:17:57,400
So I don't know what that means.

1396
01:17:57,700 --> 01:17:59,100
I hope that's not what that means.

1397
01:17:59,300 --> 01:17:59,800
That's what the

1398
01:18:00,000 --> 01:18:01,200
Studies mean, right?

1399
01:18:01,200 --> 01:18:04,200
Like, normally, if I click on sse3, this shows me the stuff that the

1400
01:18:04,200 --> 01:18:09,300
ss3 sse3 Caps bit would tell me if it had right and caps, that's not

1401
01:18:09,300 --> 01:18:12,500
really the right turn, but if I check the cpuid and I know it as a C3,

1402
01:18:12,600 --> 01:18:13,600
I can call these.

1403
01:18:13,700 --> 01:18:15,200
That's how that works, right?

1404
01:18:15,700 --> 01:18:18,500
But I just don't understand what this means because I don't know what

1405
01:18:18,500 --> 01:18:19,100
it means.

1406
01:18:19,200 --> 01:18:22,200
I so I gotta go read like the architecture reference man on find out

1407
01:18:22,200 --> 01:18:26,300
what all of this was meant since avx-512 isn't out yet.

1408
01:18:26,300 --> 01:18:28,300
I haven't bothered to research how that works.

1409
01:18:28,300 --> 01:18:29,900
But yeah it's just kind of

1410
01:18:30,000 --> 01:18:30,700
crazy is all.

1411
01:18:48,700 --> 01:18:52,800
Oh man and ESV says yeah, it looks like different caps B.

1412
01:18:53,700 --> 01:18:54,500
Oh,

1413
01:18:55,500 --> 01:18:58,300
I mean, just think it just just that's horrible.

1414
01:18:58,300 --> 01:18:59,500
Like why would you do that?

1415
01:18:59,500 --> 01:19:03,100
I mean basically at that point you're basically just saying I'm

1416
01:19:03,100 --> 01:19:06,000
targeting scientific Computing, right?

1417
01:19:06,100 --> 01:19:09,500
Because no one's going to ship a commercial product that actually uses

1418
01:19:09,500 --> 01:19:12,100
random combinations of these things and falls back to different paths

1419
01:19:12,100 --> 01:19:12,400
or something.

1420
01:19:12,400 --> 01:19:14,000
That'd be insane, right?

1421
01:19:14,100 --> 01:19:15,100
It's just too much.

1422
01:19:16,300 --> 01:19:17,500
So, that's just crazy.

1423
01:19:17,500 --> 01:19:18,500
I wish they wouldn't do that.

1424
01:19:18,500 --> 01:19:20,300
That's just not cool.

1425
01:19:21,100 --> 01:19:21,500
Oh, well,

1426
01:19:23,300 --> 01:19:23,900
Anyway.

1427
01:19:25,900 --> 01:19:26,600
All right.

1428
01:19:27,500 --> 01:19:29,000
Let's go ahead and wrap things up.

1429
01:19:30,100 --> 01:19:31,900
Casey is hungry and wants to eat dinner.

1430
01:19:33,300 --> 01:19:35,000
So let's go ahead and close this stuff down.

1431
01:19:36,200 --> 01:19:36,800
There we go.

1432
01:19:39,900 --> 01:19:40,900
Minimize you?

1433
01:19:42,000 --> 01:19:45,100
All right, thanks for joining me for another episode of handmade hero.

1434
01:19:46,200 --> 01:19:51,400
I hope you'll come back again tomorrow and I think I'm just going to

1435
01:19:51,400 --> 01:19:52,200
give you fair warning.

1436
01:19:52,200 --> 01:19:55,600
I think tomorrow may end up getting moved to 9:00 a.m.

1437
01:19:55,900 --> 01:19:58,800
I'm going to go look at it now and I may have to do that because

1438
01:20:00,600 --> 01:20:09,400
basically a, for those of you who know Jeff he is.

1439
01:20:12,100 --> 01:20:13,300
He is having two.

1440
01:20:14,700 --> 01:20:16,700
Well, I won't go into too much detail, but anyway,

1441
01:20:19,000 --> 01:20:24,200
For those of you know Jeff he is going to have to go have some some

1442
01:20:24,800 --> 01:20:30,700
surgery tomorrow and I wanted to go visit him tomorrow evening and the

1443
01:20:30,700 --> 01:20:34,400
stream would have overlapped when when that would have happened.

1444
01:20:34,400 --> 01:20:38,500
So I think I'm going to try and move the stream so that I can go.

1445
01:20:40,000 --> 01:20:40,800
Go to that.

1446
01:20:40,800 --> 01:20:45,400
And for those of you who know, Jeff please, please wish him well and

1447
01:20:45,400 --> 01:20:46,800
wish him a speedy recovery.

1448
01:20:48,300 --> 01:20:50,800
Not that you can't anymore because he's basically removed himself from

1449
01:20:50,800 --> 01:20:51,300
the internet.

1450
01:20:51,300 --> 01:20:53,300
But yeah.

1451
01:20:53,400 --> 01:20:55,600
Suffice to say, I'm going to move.

1452
01:20:55,600 --> 01:20:56,900
Probably move the stream for that.

1453
01:20:56,900 --> 01:20:59,200
So I apologize for the last-minute notice but it was kind of a

1454
01:20:59,200 --> 01:20:59,800
last-minute thing.

1455
01:21:00,600 --> 01:21:04,700
And so I will probably update the handmade hero schedule to, to move

1456
01:21:04,700 --> 01:21:06,700
it to 9 a.m.

1457
01:21:06,700 --> 01:21:07,000
tomorrow.

1458
01:21:07,000 --> 01:21:07,900
So we'll do 9 a.m.

1459
01:21:07,900 --> 01:21:10,700
both days, both Thursday and Friday.

1460
01:21:11,200 --> 01:21:13,600
So thanks everyone for joining me for handmade hero.

1461
01:21:13,600 --> 01:21:14,900
Hopefully, come back tomorrow.

1462
01:21:14,900 --> 01:21:16,300
Like I said, probably will be 9:00 a.m.

1463
01:21:16,300 --> 01:21:18,000
tomorrow even though originally, I said it was five.

1464
01:21:18,000 --> 01:21:19,400
I'm probably gonna have to move it.

1465
01:21:20,100 --> 01:21:21,300
So we'll do that.

1466
01:21:21,300 --> 01:21:21,900
And tomorrow.

1467
01:21:21,900 --> 01:21:25,500
What we'll do is we'll talk about Cindy, basically, how Cindy

1468
01:21:25,500 --> 01:21:29,600
instructions, work, how we write them, how we like that, the compiler

1469
01:21:29,600 --> 01:21:29,900
to like,

1470
01:21:30,100 --> 01:21:31,700
Pile them and do them, right?

1471
01:21:32,500 --> 01:21:35,200
We'll talk about how to how to make that happen and hopefully we'll

1472
01:21:35,200 --> 01:21:37,300
have some time tomorrow to actually start writing some of that we

1473
01:21:37,300 --> 01:21:39,400
probably won't finish Because by the time I explain how everything

1474
01:21:39,400 --> 01:21:42,500
works, we probably won't have enough time but between tomorrow and

1475
01:21:42,500 --> 01:21:47,200
Friday we probably should, I think be able to get a fairly reasonable

1476
01:21:47,500 --> 01:21:50,700
Cindy version of our thing in place so that we can take a look at

1477
01:21:50,700 --> 01:21:51,100
that?

1478
01:21:52,500 --> 01:21:55,900
And figure out how much how fast we think we should be able to get it

1479
01:21:55,900 --> 01:22:00,100
to run when we you know, at the limit, right?

1480
01:22:00,100 --> 01:22:02,500
And again I like I said that's a pretty important thing to want to do

1481
01:22:02,500 --> 01:22:05,900
because one of the problems with optimizing stuff is you kind of have

1482
01:22:05,900 --> 01:22:06,600
to go.

1483
01:22:06,600 --> 01:22:09,400
If you don't go through and count how many cycles you think something

1484
01:22:09,400 --> 01:22:10,700
going to run at Peak.

1485
01:22:11,700 --> 01:22:14,800
There's not a lot of ways to know how much performance you're losing

1486
01:22:14,800 --> 01:22:15,500
from other things.

1487
01:22:15,500 --> 01:22:19,500
That are that are that are interfering like cash dolls, you know, this

1488
01:22:19,500 --> 01:22:20,100
sort of thing.

1489
01:22:21,100 --> 01:22:21,900
And so that's

1490
01:22:22,100 --> 01:22:22,900
So what we're going to be doing.

1491
01:22:23,300 --> 01:22:24,500
So hopefully come back tomorrow.

1492
01:22:24,500 --> 01:22:24,800
9 a.m.

1493
01:22:24,800 --> 01:22:28,700
to join me for that until then if you do want to follow along at home

1494
01:22:28,900 --> 01:22:31,400
and you want to preorder the game on handmade hirota or you can do.

1495
01:22:31,400 --> 01:22:34,200
So, just go ahead and do that, you'll get a link that allows you to

1496
01:22:34,200 --> 01:22:36,000
download the source code so you can follow along.

1497
01:22:36,400 --> 01:22:37,800
We also have a forum site.

1498
01:22:37,900 --> 01:22:40,400
You can go to post questions and that sort of stuff.

1499
01:22:41,200 --> 01:22:44,300
It's also got ports to Mac and Linux if you're interested in that and

1500
01:22:44,300 --> 01:22:48,200
there's also anti depe sewed guide and other kinds of good resources.

1501
01:22:48,200 --> 01:22:51,600
There we have a patreon page rossport the video series if you'd like

1502
01:22:51,600 --> 01:22:51,900
to subscribe.

1503
01:22:52,000 --> 01:22:52,400
To that.

1504
01:22:52,400 --> 01:22:56,100
That's always very much appreciated and we also have a tweetbot the

1505
01:22:56,100 --> 01:22:58,800
Tweet the schedule you for exactly the kind of situation.

1506
01:22:58,800 --> 01:23:01,000
I was just talking about where if there's something like a medical

1507
01:23:01,000 --> 01:23:04,900
emergency or things like this and I have to move the stream and you

1508
01:23:04,900 --> 01:23:08,600
don't want to be sitting around going, where is handmade hero that is

1509
01:23:08,600 --> 01:23:10,900
the best place to get those updates because I try to keep the Twitter

1510
01:23:10,900 --> 01:23:12,700
stream Pretty up-to-date it as much as I can.

1511
01:23:13,100 --> 01:23:15,500
So that you always know what's going on with the stream and don't have

1512
01:23:15,500 --> 01:23:17,700
to wait for twitch to tell you that it's on or not.

1513
01:23:18,100 --> 01:23:21,100
So, check that out until tomorrow.

1514
01:23:21,500 --> 01:23:21,900
Everyone.

1515
01:23:22,200 --> 01:23:26,100
Please have a fabulous coding day and hopefully I'll see you back here

1516
01:23:26,100 --> 01:23:26,400
again.

1517
01:23:26,400 --> 01:23:30,000
Like I said probably 9 a.m., but check the Twitter I will post if

1518
01:23:30,000 --> 01:23:31,000
initally tonight.

1519
01:23:31,000 --> 01:23:31,800
Take it easy everyone.

