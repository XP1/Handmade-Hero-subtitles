1
00:00:02,300 --> 00:00:04,200
Hello everyone and welcome to handmade hero.

2
00:00:04,200 --> 00:00:10,300
The show we could complete game live on stream and you know we have a

3
00:00:10,300 --> 00:00:11,400
bit of a treat today.

4
00:00:11,400 --> 00:00:17,600
I don't mind telling you yesterday Alan updated for coder with a ton

5
00:00:17,600 --> 00:00:23,700
of really good stuff and so we're like we're in it's pretty awesome.

6
00:00:23,700 --> 00:00:28,800
I actually switched to it at work and I programmed all day today with

7
00:00:28,800 --> 00:00:31,400
it and it's like totally great.

8
00:00:31,700 --> 00:00:35,200
I'm pretty excited about this new build, it's like way way better than

9
00:00:35,200 --> 00:00:38,700
the previous bill that has all sorts of things in it that, that I

10
00:00:38,700 --> 00:00:39,300
needed.

11
00:00:39,400 --> 00:00:39,900
So

12
00:00:42,100 --> 00:00:44,700
I copied it during the pre stream.

13
00:00:45,700 --> 00:00:48,500
I copied the new for a coder into our directory.

14
00:00:48,500 --> 00:00:53,900
So today's programming will be taking place courtesy of and I don't

15
00:00:53,900 --> 00:00:57,800
ever remember the version number so I'm just going to look what we

16
00:00:57,800 --> 00:01:04,099
taking place courtesy of for coder version.

17
00:01:05,200 --> 00:01:07,800
Vert I don't know.

18
00:01:07,800 --> 00:01:09,300
How do you tell the version?

19
00:01:11,400 --> 00:01:13,100
I love patreon dearly.

20
00:01:13,100 --> 00:01:17,400
I think they're a great service, but I never know how to use the site.

21
00:01:17,400 --> 00:01:18,600
I never know.

22
00:01:18,800 --> 00:01:20,100
I have no idea.

23
00:01:21,000 --> 00:01:25,600
It's always that like they change the layout and I'm and I get totally

24
00:01:25,600 --> 00:01:26,200
lost.

25
00:01:26,400 --> 00:01:29,000
Maybe if I just go to the regular for a coder side it'll tell me the

26
00:01:29,000 --> 00:01:29,600
version.

27
00:01:30,100 --> 00:01:32,300
I don't even know maybe if I just launched for a coder.

28
00:01:32,300 --> 00:01:33,300
That'll tell me the version.

29
00:01:33,500 --> 00:01:34,400
I have no idea.

30
00:01:37,400 --> 00:01:38,200
It's a good question.

31
00:01:38,200 --> 00:01:39,100
Let's try that.

32
00:01:39,600 --> 00:01:40,500
Let's try that.

33
00:01:44,200 --> 00:01:45,600
Hyah, so there you go.

34
00:01:45,700 --> 00:01:46,500
That's the easy way.

35
00:01:46,700 --> 00:01:51,400
So this programming today is brought to you by for coder Alpha, 4.0

36
00:01:51,400 --> 00:01:55,200
poor, 4.0.2 super.

37
00:01:55,400 --> 00:01:59,000
And I'm assuming that the for is because it's for a coder, which is

38
00:01:59,000 --> 00:02:00,200
hilarious, by the way.

39
00:02:01,800 --> 00:02:05,100
That's so, so funny since it's an alpha, you know, there has not been

40
00:02:05,100 --> 00:02:07,900
a major release yet so that's pretty great.

41
00:02:08,600 --> 00:02:13,500
Anyway, that is is, is pretty great news because

42
00:02:14,000 --> 00:02:16,400
Like I said, there's a lot of changes in there that I was looking

43
00:02:16,400 --> 00:02:16,900
forward to.

44
00:02:17,100 --> 00:02:19,300
So anyway, that's what.

45
00:02:19,500 --> 00:02:20,200
What's going on today.

46
00:02:20,200 --> 00:02:21,500
Today is day two, fifty six.

47
00:02:21,500 --> 00:02:28,800
So we now need exactly 9 bits to store the day number of handmade here

48
00:02:28,800 --> 00:02:30,500
which is certainly women to some good.

49
00:02:31,200 --> 00:02:35,200
If you are trying to follow them home, you want to use the day 255

50
00:02:35,200 --> 00:02:35,900
source code.

51
00:02:36,200 --> 00:02:39,600
I am today just going to get our profile view working because we did

52
00:02:39,600 --> 00:02:41,000
the structural work yesterday.

53
00:02:41,600 --> 00:02:43,800
And now I think, probably mostly, we just have to do

54
00:02:43,900 --> 00:02:47,800
Debugging and then some beautification and it should be somewhat

55
00:02:47,800 --> 00:02:48,800
usable already.

56
00:02:49,800 --> 00:02:52,000
We made a lot of progress yesterday on it.

57
00:02:52,200 --> 00:02:57,200
So I'm going to go ahead and get started on that and I'll show you

58
00:02:57,200 --> 00:02:58,100
where we ended up.

59
00:02:58,100 --> 00:02:59,400
Let me go ahead and

60
00:03:00,000 --> 00:03:01,700
Handmade hero here.

61
00:03:02,300 --> 00:03:03,000
Codebase.

62
00:03:03,000 --> 00:03:04,300
Oops, not poor.

63
00:03:04,700 --> 00:03:08,000
And made that prj and let's build.

64
00:03:08,600 --> 00:03:13,500
Okay, so here we are in handmade hero.

65
00:03:13,500 --> 00:03:17,900
The current state of affairs, you can see in here, the profile view,

66
00:03:18,300 --> 00:03:21,500
we can drag out the block, but this is just complete nonsense here.

67
00:03:22,000 --> 00:03:25,800
And so something about the way that we are recording.

68
00:03:25,800 --> 00:03:27,900
Our values is obviously busted.

69
00:03:27,900 --> 00:03:29,900
And what's interesting about it, it's kind of a neat.

70
00:03:30,000 --> 00:03:31,300
Eat bug, you can see that.

71
00:03:31,300 --> 00:03:33,100
It's sort of periodic in nature.

72
00:03:33,100 --> 00:03:37,700
So the way that we're recording the, the way that we're collating, the

73
00:03:37,700 --> 00:03:43,400
this information per frame is somehow busted in a way that our use of

74
00:03:43,400 --> 00:03:47,100
the absolute clocks must be broken.

75
00:03:47,200 --> 00:03:50,500
Such that we're like, you know, when we do, there are 64 bits of

76
00:03:50,500 --> 00:03:53,500
tracks and move them down to 32 is or whatever we're doing something

77
00:03:53,500 --> 00:03:54,200
stupid.

78
00:03:54,200 --> 00:03:57,800
So, we end up with a value that actually, you know, it matters where

79
00:03:57,800 --> 00:03:59,400
you are, an absolute time.

80
00:03:59,700 --> 00:03:59,800
What?

81
00:04:00,100 --> 00:04:04,100
The bar graph looks like so I imagine this will be a kind of fun bug

82
00:04:04,100 --> 00:04:05,400
when we actually go see what it is.

83
00:04:05,600 --> 00:04:10,100
I'm going to go ahead and see if I can figure it out right now.

84
00:04:10,100 --> 00:04:13,800
In fact, so, the first thing I'd like to do actually, before we go any

85
00:04:13,800 --> 00:04:16,899
further, I just want to review the code that we wrote, because we

86
00:04:16,899 --> 00:04:18,399
haven't had a chance to really look at it.

87
00:04:18,399 --> 00:04:21,200
We sort of just wrote it all yesterday and then ran it once.

88
00:04:21,399 --> 00:04:22,300
That's all we did.

89
00:04:22,400 --> 00:04:24,600
And so I'd like to go ahead and

90
00:04:26,500 --> 00:04:28,300
And sort of analyze that a little bit.

91
00:04:28,600 --> 00:04:29,700
And let's.

92
00:04:29,700 --> 00:04:34,500
So let's go ahead and search down to where we were recording this

93
00:04:34,500 --> 00:04:35,200
information.

94
00:04:35,400 --> 00:04:40,400
So we had this this concept of this profile node that we were building

95
00:04:40,600 --> 00:04:43,300
and this is the code actually here, up that draws it.

96
00:04:43,300 --> 00:04:45,100
I'm not going to look at that code, quite yet.

97
00:04:45,100 --> 00:04:48,700
I want to look first at, just the code that records it and see what I

98
00:04:48,700 --> 00:04:51,500
think about the recording process as we go.

99
00:04:52,000 --> 00:04:55,800
So, the time when something gets recorded as a profile block is

100
00:04:55,900 --> 00:04:58,700
When it encounters the, like, the opening statement.

101
00:04:58,800 --> 00:05:02,800
So, for example in, you know, inside handmade hero, right?

102
00:05:02,800 --> 00:05:07,200
If we were in timed block, for example, you can see right here, this

103
00:05:07,200 --> 00:05:09,600
time function, call that opens a Time block.

104
00:05:09,600 --> 00:05:13,900
So that right when we get to this line, basically, is when we're going

105
00:05:13,900 --> 00:05:16,800
to record one of these begin blocks.

106
00:05:16,900 --> 00:05:19,400
So later when we're collating, that's what we're seeing there.

107
00:05:19,700 --> 00:05:22,600
And then when this goes out of scope, it's a little utility that's got

108
00:05:22,600 --> 00:05:23,600
a Constructor Destructor.

109
00:05:23,600 --> 00:05:25,800
So that when it goes out of scope down,

110
00:05:25,900 --> 00:05:29,300
Down here, we will get the en Bloc and that's the paired version that

111
00:05:29,300 --> 00:05:29,900
comes out right here.

112
00:05:29,900 --> 00:05:36,700
So when we see this begin block, what we do when we come through here

113
00:05:36,700 --> 00:05:44,100
is, we will look to see whether or not we have a out like a basically

114
00:05:44,100 --> 00:05:45,000
a parent scope.

115
00:05:45,000 --> 00:05:50,400
So was there something that was already open as a profile block on

116
00:05:50,400 --> 00:05:52,100
this thread, right?

117
00:05:52,100 --> 00:05:55,000
And it's very important that we do it per thread because we may have

118
00:05:55,000 --> 00:05:55,800
many threads

119
00:05:55,900 --> 00:05:59,600
executing at once and if we do any kind of profiling in those

120
00:05:59,600 --> 00:05:59,900
different things,

121
00:06:00,000 --> 00:06:03,600
Heads, we can't just look at a single like Global variable or a single

122
00:06:03,600 --> 00:06:07,000
piece of state that says, what's the open block because each thread

123
00:06:07,000 --> 00:06:10,800
has its own open profile block, potentially possibly many of them as

124
00:06:10,800 --> 00:06:11,400
it goes down.

125
00:06:11,600 --> 00:06:13,900
So we kind of have to, you know, respect that.

126
00:06:13,900 --> 00:06:17,100
So that's why during collation, we look to see what thread are we

127
00:06:17,100 --> 00:06:20,300
talking about right now and does that have a block that's already

128
00:06:20,300 --> 00:06:20,800
open?

129
00:06:21,100 --> 00:06:24,400
So if it does have a block that's already open, we pick as the parent

130
00:06:24,400 --> 00:06:29,000
event, whatever the profiling node was that, we made for that block

131
00:06:29,200 --> 00:06:29,900
and we take

132
00:06:30,000 --> 00:06:31,300
Okay, as its clock basis.

133
00:06:31,300 --> 00:06:35,200
Meaning the the beginning thing that everything else will be relative

134
00:06:35,200 --> 00:06:39,700
to we take as that clock basis, whatever its opening events clock was

135
00:06:39,700 --> 00:06:45,900
because it just it's a, it's a requirement obviously that any clock

136
00:06:45,900 --> 00:06:51,100
that happens out, you know, when I open a block the our dtsc counter

137
00:06:51,100 --> 00:06:54,300
that we're using for profiling has to continuously go up.

138
00:06:54,300 --> 00:06:58,400
So once we pass a particular block, any block that opens after that

139
00:06:58,400 --> 00:06:59,300
block had better.

140
00:06:59,300 --> 00:06:59,800
Have a late

141
00:07:00,000 --> 00:07:00,700
Clock value.

142
00:07:00,700 --> 00:07:02,600
If it doesn't, something's gone horribly wrong.

143
00:07:02,700 --> 00:07:05,600
And in fact, we could assert that maybe we should in here just to make

144
00:07:05,600 --> 00:07:08,700
sure that we like not doing something weird and we haven't messed up

145
00:07:08,700 --> 00:07:09,300
our recording.

146
00:07:09,400 --> 00:07:11,700
Because if we ever saw clock value, that went backwards.

147
00:07:11,700 --> 00:07:15,000
That would be really bad and weird, right?

148
00:07:20,900 --> 00:07:23,100
And our dtsc is going up.

149
00:07:23,100 --> 00:07:27,100
Probably buy something like 4 billion a second, which means it would

150
00:07:27,100 --> 00:07:29,200
take four billion seconds to wrap.

151
00:07:30,600 --> 00:07:32,500
So, that means we'd have to leave the machine running for a really

152
00:07:32,500 --> 00:07:33,600
long time to ever see a rep.

153
00:07:33,600 --> 00:07:36,300
So we're probably not going to ever deal with that in any meaningful

154
00:07:36,300 --> 00:07:38,600
way that we care about.

155
00:07:38,900 --> 00:07:43,700
And so we just should not see clocks, go backwards.

156
00:07:43,700 --> 00:07:44,100
You know?

157
00:07:44,500 --> 00:07:46,000
No no standard run.

158
00:07:46,000 --> 00:07:47,800
Should ever see a clock, go backwards.

159
00:07:48,500 --> 00:07:50,500
So assuming that we

160
00:07:51,500 --> 00:07:52,700
We did that correctly.

161
00:07:52,800 --> 00:07:56,400
That would be a clock basis here on the other hand, if it turns out

162
00:07:56,400 --> 00:07:59,000
that there is no parent event.

163
00:08:00,200 --> 00:08:03,700
That means that there wasn't a root profiling node and that's just at

164
00:08:03,700 --> 00:08:06,500
the profiling node for the whole frame, the one that everything kind

165
00:08:06,500 --> 00:08:08,900
of goes inside of, right?

166
00:08:09,300 --> 00:08:14,700
And what that what that means for us is that we need to create the

167
00:08:14,700 --> 00:08:21,300
route profiling event for our for this Frame so that we can store

168
00:08:21,300 --> 00:08:23,700
things at that top level, right?

169
00:08:23,900 --> 00:08:27,000
So what we do there is we store a synthetic event that we just don't

170
00:08:27,000 --> 00:08:29,800
have any information in it and then we initialize

171
00:08:30,000 --> 00:08:36,799
That profile node to basically be nothing other than a like a duration

172
00:08:37,000 --> 00:08:39,200
which is however, long, the frame act.

173
00:08:39,200 --> 00:08:41,000
Okay, well there's the bug right there.

174
00:08:42,299 --> 00:08:43,299
You guys see the bug?

175
00:08:46,400 --> 00:08:47,000
You see it.

176
00:08:47,800 --> 00:08:50,200
Does anybody see the bug besides me?

177
00:08:51,300 --> 00:08:52,000
I don't know.

178
00:08:52,300 --> 00:08:54,400
There's too much lag in so I can't even really look at the track.

179
00:08:54,400 --> 00:08:57,100
Because, you know, there's tons of lock on there.

180
00:08:57,800 --> 00:08:59,900
So I already see the bug or

181
00:09:00,000 --> 00:09:00,700
One of the bugs.

182
00:09:00,700 --> 00:09:03,100
Anyway, the bug is pretty simple.

183
00:09:03,100 --> 00:09:06,900
The bug is that we are using the end clock value before it's ever been

184
00:09:06,900 --> 00:09:08,000
written, right?

185
00:09:08,000 --> 00:09:11,100
Because the collation frame is the frame that we're currently using.

186
00:09:11,800 --> 00:09:19,600
And so, obviously, there would be no way for us to ever actually do

187
00:09:19,600 --> 00:09:20,300
anything.

188
00:09:22,400 --> 00:09:27,100
Right there be no way for us to ever actually compute a duration

189
00:09:27,300 --> 00:09:30,100
because no one's ever written the end clock value in here.

190
00:09:30,300 --> 00:09:34,700
So that's just a bug that we're going to have to fix and it seems to

191
00:09:34,700 --> 00:09:39,600
me like probably what we need to do is just set this duration at some

192
00:09:39,600 --> 00:09:40,300
other time.

193
00:09:40,500 --> 00:09:43,300
So assume that this duration is 0 for now.

194
00:09:43,800 --> 00:09:46,300
And there might be another bug in here to which we'll talk about in a

195
00:09:46,300 --> 00:09:46,900
second here.

196
00:09:47,400 --> 00:09:51,200
But essentially, what we need to do is when the, the collage

197
00:09:51,400 --> 00:09:55,700
And frame is finalized and it's actually added as a frame.

198
00:09:56,200 --> 00:09:59,100
That's probably the time when we need to do it.

199
00:09:59,100 --> 00:10:02,900
So here we are at a frame marker boundary and we're recording the end

200
00:10:02,900 --> 00:10:03,400
clock.

201
00:10:03,600 --> 00:10:07,800
That is a time when we could do this, that is the time.

202
00:10:07,800 --> 00:10:10,500
But we can say, if this collation frame,

203
00:10:13,200 --> 00:10:19,700
if this collation frame has a root node or root profile node,

204
00:10:22,100 --> 00:10:27,900
Then at that point we can actually do this particular operation.

205
00:10:29,300 --> 00:10:29,700
Right.

206
00:10:32,500 --> 00:10:33,800
Go ahead and put that in here.

207
00:10:35,200 --> 00:10:41,200
So yeah route profile node that's going to be whatever the duration

208
00:10:41,200 --> 00:10:41,900
was here.

209
00:10:42,100 --> 00:10:46,400
That's going to equal this sort of change.

210
00:10:46,400 --> 00:10:48,800
And yeah that's all there is to that.

211
00:10:51,100 --> 00:10:56,300
Let's see, left of profile node must have class struct Union, debug

212
00:10:56,300 --> 00:11:00,800
stored events star user instead.

213
00:11:00,900 --> 00:11:02,200
Agree with that.

214
00:11:03,600 --> 00:11:04,200
There we go.

215
00:11:04,800 --> 00:11:08,600
So that is the the appropriate fix for that because we were trying to

216
00:11:08,600 --> 00:11:10,600
compute the duration before we ever could.

217
00:11:10,800 --> 00:11:14,800
Now there's one other thing, which is that the clock basis we never

218
00:11:14,800 --> 00:11:15,400
set.

219
00:11:15,500 --> 00:11:16,900
And so that's a bug as well.

220
00:11:17,500 --> 00:11:22,700
The clock basis here, we have to set so, you know, it's set to the

221
00:11:22,700 --> 00:11:24,200
open Event in this case.

222
00:11:24,200 --> 00:11:27,100
But in the case, where we don't have an open event, we would want to

223
00:11:27,100 --> 00:11:30,600
set it to the, the initial clock for the frame, which we do know,

224
00:11:31,000 --> 00:11:31,600
right?

225
00:11:31,800 --> 00:11:33,200
So those, it just those

226
00:11:33,400 --> 00:11:34,500
You were wrong.

227
00:11:34,500 --> 00:11:36,800
Like we just didn't do it right.

228
00:11:36,800 --> 00:11:39,300
There's nothing else to say about that.

229
00:11:39,300 --> 00:11:43,200
It was not a subtle bug, it was just an obvious bug which is fine.

230
00:11:43,900 --> 00:11:46,400
And hey, now that we've done that we're getting what probably what

231
00:11:46,400 --> 00:11:49,600
looks to be like a much more plausible profile result here.

232
00:11:51,600 --> 00:11:55,300
And in fact, if we go ahead and re-enable, our ability to sort of Step

233
00:11:55,300 --> 00:11:57,100
through here, we can actually also pause.

234
00:11:57,100 --> 00:11:57,700
I suppose.

235
00:11:57,900 --> 00:11:59,800
Although, you know what, I don't know if our

236
00:12:00,200 --> 00:12:03,300
I don't know if we have the ability to pause our profile data so we're

237
00:12:03,300 --> 00:12:05,500
probably going to need to do that at some point.

238
00:12:05,500 --> 00:12:08,700
So we can sort of pause stop collecting profile data that makes sense.

239
00:12:10,200 --> 00:12:13,300
So in here, we added it, we have the ability that I just don't think

240
00:12:13,300 --> 00:12:15,100
we have any control over at the moment.

241
00:12:15,400 --> 00:12:19,600
What we want to do here is be able to hover over this thing and and be

242
00:12:19,600 --> 00:12:22,800
able to see what these blocks actually are.

243
00:12:23,000 --> 00:12:27,300
And we sort of have that functionality already but I if zeroed it out

244
00:12:27,800 --> 00:12:29,900
because we don't actually know at the moment.

245
00:12:30,000 --> 00:12:33,300
Anyway, how to print out stuff like that.

246
00:12:33,600 --> 00:12:39,000
So I'm just going to go grab that code that we had before and, and try

247
00:12:39,000 --> 00:12:42,300
to turn it back on like this is it right?

248
00:12:42,600 --> 00:12:43,500
This is it right here.

249
00:12:44,100 --> 00:12:47,800
So I'm going to turn this back on and you can see that our current

250
00:12:47,800 --> 00:12:51,500
problem is is just that we don't have this information.

251
00:12:51,500 --> 00:12:52,900
The way that it was before.

252
00:12:53,100 --> 00:12:58,200
Now what I can do however is since we know some information about this

253
00:12:58,200 --> 00:12:59,900
region, we know the cycle count

254
00:13:00,000 --> 00:13:00,400
Out.

255
00:13:02,800 --> 00:13:05,400
And all the rest of the information like the grid information, all

256
00:13:05,400 --> 00:13:07,400
that stuff, we actually know all that.

257
00:13:07,400 --> 00:13:11,100
So I think probably all we'd have to do to have a semi usable print

258
00:13:11,300 --> 00:13:14,900
and we probably don't we probably wanna do something a little fancier

259
00:13:14,900 --> 00:13:19,500
in the future but just as beginning we can just say here's the you

260
00:13:19,500 --> 00:13:24,800
know cures the quid that it came from and then we've got obviously the

261
00:13:24,800 --> 00:13:29,600
profile node has the duration and that's all we would need to print

262
00:13:29,600 --> 00:13:30,900
out for the Cycles.

263
00:13:31,000 --> 00:13:32,500
So you know that's

264
00:13:33,000 --> 00:13:36,100
That's really all that is right.

265
00:13:38,200 --> 00:13:42,900
So now I think if we go in here and open this back up again I should

266
00:13:42,900 --> 00:13:45,300
be able to ask what one of these things is.

267
00:13:45,900 --> 00:13:47,700
So that's the frame display time.

268
00:13:47,700 --> 00:13:50,400
And, you know, back here in the in the corner of this little tiny one

269
00:13:50,400 --> 00:13:52,200
is executable refresh time.

270
00:13:52,800 --> 00:13:53,600
Whatever that guy's.

271
00:13:53,600 --> 00:13:56,600
That's debug collation in there, I guess.

272
00:13:58,000 --> 00:14:04,600
Yeah, so the other thing that I going to have to do is I'm going to

273
00:14:04,600 --> 00:14:07,300
have to make it so that we can see, like we don't have a way of

274
00:14:07,300 --> 00:14:10,500
consistently coloring, these things such that we would know that they

275
00:14:10,500 --> 00:14:12,600
wouldn't all amount to the same colors.

276
00:14:12,900 --> 00:14:15,500
And in fact, the thing that I'm doing right now is really stupid

277
00:14:16,000 --> 00:14:20,100
because I'm using a pointer and then I'm nodding by the array count.

278
00:14:20,100 --> 00:14:23,100
But you know, that pointers are never going to have any information in

279
00:14:23,100 --> 00:14:23,800
their bottom bit.

280
00:14:23,800 --> 00:14:27,600
So that's just, you know, arbitrarily stupid for people who don't

281
00:14:28,000 --> 00:14:30,400
You just might not be something you would ordinarily, think of if

282
00:14:30,400 --> 00:14:33,500
you're new to to low-level programming.

283
00:14:33,500 --> 00:14:37,200
So I'll just I'll just point out what I'm saying because it's probably

284
00:14:37,600 --> 00:14:38,900
slightly interesting at least.

285
00:14:39,200 --> 00:14:42,400
So you know, what did I do here?

286
00:14:42,400 --> 00:14:44,000
You know, what did I sort of scoot in here?

287
00:14:44,200 --> 00:14:47,200
Well, I just wanted some way to randomly pick a color that might be

288
00:14:47,200 --> 00:14:48,900
different for each one of these things.

289
00:14:49,100 --> 00:14:51,800
Now obviously we're going to have a lot more things in here than we

290
00:14:51,800 --> 00:14:53,800
can assign unique colors to anyway.

291
00:14:53,900 --> 00:14:57,200
So we're going to want to draw a border around the box that allows us

292
00:14:57,200 --> 00:14:57,600
to sort of

293
00:14:57,700 --> 00:14:58,700
see where the regions are.

294
00:14:58,700 --> 00:14:59,900
So that's like a separate thing.

295
00:15:00,000 --> 00:15:02,700
Going to have to do one way or the other but it would still be nice to

296
00:15:02,700 --> 00:15:03,600
sort of randomize the color.

297
00:15:03,600 --> 00:15:06,600
So what I did is, I said, well, whatever the pointer to the quit is we

298
00:15:06,600 --> 00:15:09,300
know that no two people can point to the same grid, because if they

299
00:15:09,300 --> 00:15:11,700
both point the same grid, that means they both have the same grid

300
00:15:11,700 --> 00:15:14,600
string and that means it's not a very good good string now is it?

301
00:15:14,800 --> 00:15:17,700
So we obviously know that that's not the case, but what I did is I

302
00:15:17,700 --> 00:15:21,000
just took the value that the pointer is the actual numerical value of

303
00:15:21,000 --> 00:15:21,700
the pointer right?

304
00:15:21,700 --> 00:15:22,100
Whatever.

305
00:15:22,100 --> 00:15:25,100
Bite it was pointing to and I modded it by the array count, which is

306
00:15:25,100 --> 00:15:26,400
how many colors we had.

307
00:15:26,400 --> 00:15:28,000
And I just said, well, whatever that is, you know.

308
00:15:28,000 --> 00:15:29,800
So it's just basically like wrapping through this

309
00:15:30,000 --> 00:15:34,100
Right 0 1 2 3 4 5 6 7 8 9 10, 11 12, whatever and then back to the

310
00:15:34,100 --> 00:15:36,200
beginning and keep at it through again, right.

311
00:15:37,200 --> 00:15:40,300
So the problem with that is that if you take a look at what the

312
00:15:40,300 --> 00:15:45,600
distribution of these values actually, is you're not going to get any

313
00:15:45,600 --> 00:15:50,000
information in the low bits because a pointer is usually going to be

314
00:15:50,000 --> 00:15:53,400
aligned to a 4, byte boundary, right?

315
00:15:54,900 --> 00:15:58,900
Because as you know we typically for whatever you know alignment you

316
00:15:58,900 --> 00:15:59,800
reasons in the past.

317
00:16:00,100 --> 00:16:03,800
We typically have pointers that are aligned, not to a bite, right?

318
00:16:03,800 --> 00:16:06,600
They typically don't go up by one, two, three, four, five.

319
00:16:06,700 --> 00:16:10,100
They're typically aligned to a d word, which is a 4, byte boundary or

320
00:16:10,100 --> 00:16:17,700
perhaps even to acquire like one of the SSE size things, depending on

321
00:16:17,700 --> 00:16:18,900
how the allocator is going.

322
00:16:19,000 --> 00:16:21,800
In our case, they're mostly going to be 4 bytes because our allocator

323
00:16:21,800 --> 00:16:23,200
we defaulted to 4 B alignment.

324
00:16:23,200 --> 00:16:25,700
So that would be d word aligned, right?

325
00:16:26,400 --> 00:16:29,800
And so, you know, 0 1 2

326
00:16:29,900 --> 00:16:32,300
Two, three, four, five, six, seven, whatever.

327
00:16:32,400 --> 00:16:33,200
You never see.

328
00:16:33,200 --> 00:16:37,000
One two or three you only see 0 and for University 56.

329
00:16:37,000 --> 00:16:40,600
We only you know these are the only values we actually see coming in

330
00:16:40,600 --> 00:16:41,500
through these pointers.

331
00:16:41,700 --> 00:16:48,800
So the color array count is 1 2 3 4 5 6 7 8 9 10 11 12.

332
00:16:49,100 --> 00:16:52,800
It happens to be a perfect multiple of 4, right?

333
00:16:53,000 --> 00:16:55,600
So what that means is, we're only going to ever use three colors out

334
00:16:55,600 --> 00:16:57,800
of this thing, because we're never going to have a point of this, not

335
00:16:57,800 --> 00:16:58,800
on a 4, byte boundary.

336
00:16:58,800 --> 00:16:59,800
And we're never gonna

337
00:17:00,000 --> 00:17:03,100
And this isn't the, you know, this isn't a prime.

338
00:17:03,200 --> 00:17:05,700
This is why you might want a prime number of colors in here, right?

339
00:17:07,200 --> 00:17:11,200
So what I'm going to do because I'm super cheesy and weird is I'm

340
00:17:11,200 --> 00:17:16,099
going to go ahead and say, let's make this, a non multiple of 4 so

341
00:17:16,099 --> 00:17:18,599
that it will have more of a beat frequency to it.

342
00:17:18,800 --> 00:17:22,000
In fact, if we could make it Prime that would be great right now.

343
00:17:22,000 --> 00:17:31,700
It's 0 1 2 3 4 5 6 7 8 9 10 11 and so really there's 12 entries in it

344
00:17:32,000 --> 00:17:36,600
if we wanted to 11 would be prime so I could just make it so that

345
00:17:37,100 --> 00:17:40,300
We don't use this last value, right?

346
00:17:48,100 --> 00:17:51,800
And hey look all of a sudden now we can actually see the different

347
00:17:51,800 --> 00:17:56,200
zones because we're actually taking a look at we're actually using

348
00:17:56,200 --> 00:17:58,900
more than three values of the colors, right?

349
00:18:00,900 --> 00:18:05,100
So now we're getting a much more stable view of our profile and this

350
00:18:05,100 --> 00:18:06,800
is already super informative, right?

351
00:18:07,800 --> 00:18:08,500
Just looking at this.

352
00:18:08,500 --> 00:18:11,300
You can kind of see how our frame time breaks down.

353
00:18:11,600 --> 00:18:16,100
You'll notice that this giant sort of fluorescent bar here is our

354
00:18:16,100 --> 00:18:21,800
frame display time, and that is US waiting for the vertical.

355
00:18:21,800 --> 00:18:23,300
Refresh, right?

356
00:18:23,400 --> 00:18:27,000
So, what's happening right now in our code is, we are doing a bunch of

357
00:18:27,000 --> 00:18:27,400
work.

358
00:18:27,400 --> 00:18:29,700
This is the work in here, right?

359
00:18:30,500 --> 00:18:33,600
And I'll guess I'll we learn even more actually from this right here

360
00:18:33,600 --> 00:18:36,800
is our input processing code, right?

361
00:18:37,100 --> 00:18:38,600
If that makes sense right through there.

362
00:18:38,600 --> 00:18:39,600
I don't know why that's so long.

363
00:18:39,600 --> 00:18:40,400
It's kind of interesting.

364
00:18:40,400 --> 00:18:40,900
That is long.

365
00:18:40,900 --> 00:18:44,100
I wonder if that's if that's actually correct.

366
00:18:44,700 --> 00:18:47,600
Oh, you know what, that might be correct.

367
00:18:49,000 --> 00:18:50,000
Hold that thought.

368
00:18:50,100 --> 00:18:53,500
Anyway, let's move on, hold that thought because that's an interesting

369
00:18:53,500 --> 00:18:53,900
thought.

370
00:18:54,600 --> 00:18:56,300
So this is our input processing.

371
00:18:56,300 --> 00:18:59,600
Here is the actual game code all sitting right in there.

372
00:18:59,800 --> 00:19:02,600
Right here is the debug collation, which I said is very expensive

373
00:19:02,600 --> 00:19:05,100
because we're turning through, you know, a lot of stuff in there

374
00:19:05,100 --> 00:19:05,600
typically.

375
00:19:06,100 --> 00:19:07,900
So like, let's let's actually look in the more.

376
00:19:08,100 --> 00:19:09,600
This this will look even worse, right?

377
00:19:09,600 --> 00:19:11,400
This is the, the worst case for it.

378
00:19:13,500 --> 00:19:15,100
Oh, but it's not on top.

379
00:19:16,900 --> 00:19:20,900
Before I go any further than that, let's actually go ahead and use our

380
00:19:20,900 --> 00:19:24,300
Z biasing here because we need our profile to be on top.

381
00:19:24,300 --> 00:19:28,200
Remember we had to do the thing where they sort the rectangles we

382
00:19:28,200 --> 00:19:31,300
sorted, like our Sprites of they would be on top for the debug code.

383
00:19:31,300 --> 00:19:35,600
We need to do that same thing for our display here.

384
00:19:35,600 --> 00:19:37,200
Otherwise we're never going to see it.

385
00:19:37,300 --> 00:19:41,000
So I don't know if you remember this but basically like our renderer

386
00:19:41,000 --> 00:19:43,700
sorts everything from front to back, if we don't make sure that the

387
00:19:43,700 --> 00:19:45,800
debug stuff is sorted all the way to the front.

388
00:19:46,000 --> 00:19:46,500
Then we

389
00:19:46,600 --> 00:19:48,000
This problem, right?

390
00:19:48,000 --> 00:19:50,600
So let's go ahead and switch over to.

391
00:19:52,100 --> 00:19:54,400
Handmade ready group.

392
00:19:57,300 --> 00:19:59,400
And inside handmade render group.

393
00:19:59,500 --> 00:20:01,800
We have that Z bias concept there.

394
00:20:04,500 --> 00:20:04,800
Oops.

395
00:20:06,100 --> 00:20:06,600
Somewhere.

396
00:20:07,300 --> 00:20:08,800
Don't we do we

397
00:20:10,900 --> 00:20:11,900
Sort bias.

398
00:20:11,900 --> 00:20:12,800
That's what I meant.

399
00:20:13,700 --> 00:20:15,500
So we have that sort by this concept.

400
00:20:15,600 --> 00:20:19,700
And what I think I'd like to do is I'd like the sort bias I think to

401
00:20:19,700 --> 00:20:23,700
be part of the transform, right?

402
00:20:23,700 --> 00:20:27,100
Because we've got this concept of an object transform and the object

403
00:20:27,100 --> 00:20:30,000
transform gets passed through, and I think that's a more appropriate

404
00:20:30,000 --> 00:20:32,500
place to do it so that you don't have to pass with every call.

405
00:20:32,500 --> 00:20:35,400
You could just whatever that object transform was, it's in there.

406
00:20:35,700 --> 00:20:39,600
So like right here, for example, I'm going to go ahead and say that

407
00:20:39,600 --> 00:20:40,600
inside this object.

408
00:20:40,700 --> 00:20:41,200
For him.

409
00:20:41,200 --> 00:20:42,400
I don't know why we have.

410
00:20:42,500 --> 00:20:45,100
It would be nice if I'd said why we want to move this out to its own

411
00:20:45,100 --> 00:20:47,600
thing, ladies and gentlemen, when you write it to do, maybe you should

412
00:20:47,600 --> 00:20:48,900
actually give yourself enough information.

413
00:20:48,900 --> 00:20:49,700
Actually do it later.

414
00:20:50,000 --> 00:20:50,900
No worries.

415
00:20:51,600 --> 00:20:54,300
Anyway in here, I'm going to go ahead and say that there's a sort

416
00:20:54,300 --> 00:20:54,900
bias.

417
00:20:56,100 --> 00:20:58,700
and that way, inside the object transform,

418
00:21:01,400 --> 00:21:06,500
We can pass in when we set that up, what we want that sort bias to be

419
00:21:06,700 --> 00:21:10,100
and then instead of dealing with it here, the sort key when it's

420
00:21:10,100 --> 00:21:15,200
computed will automatically take that into account and that way we can

421
00:21:15,200 --> 00:21:18,500
sort of get rid of this, this weird, like, pass through Behavior

422
00:21:18,500 --> 00:21:19,400
that's happening there.

423
00:21:20,800 --> 00:21:25,400
And so, when we do that, get render entity basis P.

424
00:21:25,600 --> 00:21:28,500
You can see it's Computing, the sort key down at the bottom.

425
00:21:28,700 --> 00:21:30,400
What we can do is we can

426
00:21:31,200 --> 00:21:33,000
Adjust that sort key right here.

427
00:21:33,300 --> 00:21:35,100
So you can see the way we're doing it.

428
00:21:35,100 --> 00:21:40,600
We're basically taking the the Z and sort of sorting Things based on

429
00:21:40,600 --> 00:21:42,600
some sort of like, hacking us that made it.

430
00:21:42,600 --> 00:21:45,900
So that upright things sorted one, way, and flat things, sort of the

431
00:21:45,900 --> 00:21:47,900
other way because we're in two and a half d, right?

432
00:21:48,700 --> 00:21:49,700
And we subtract y.

433
00:21:50,300 --> 00:21:53,600
So what we can do with our sort bias here is we can just say like,

434
00:21:53,600 --> 00:21:58,100
okay we're just going to start off with the sort bias, so whatever the

435
00:21:58,100 --> 00:22:00,300
object, transform sort biases.

436
00:22:01,900 --> 00:22:06,900
That's going to be our initial, our initial bit and then the sort key

437
00:22:06,900 --> 00:22:09,200
gets computed based on the rest of it.

438
00:22:09,800 --> 00:22:11,800
So yeah.

439
00:22:11,800 --> 00:22:12,500
So there you go.

440
00:22:13,200 --> 00:22:14,100
Hopefully that makes sense.

441
00:22:15,200 --> 00:22:19,000
So then down here, where we've got this sort of weird nonsense that

442
00:22:19,000 --> 00:22:22,400
we're doing right, where we have this sort by a stuff happening.

443
00:22:24,000 --> 00:22:27,200
We want to go ahead and

444
00:22:27,900 --> 00:22:30,300
Make this part of the troops.

445
00:22:31,400 --> 00:22:32,900
Make this part of the transform.

446
00:22:35,900 --> 00:22:39,800
And I don't know whether I want to do a front and a black backplane

447
00:22:39,800 --> 00:22:42,000
transform, but I easily could.

448
00:22:42,300 --> 00:22:45,800
So up here, for example, I can just say, you've got, like, there's

449
00:22:45,800 --> 00:22:46,100
this

450
00:22:48,100 --> 00:22:50,200
Default flat transform, right.

451
00:22:51,900 --> 00:22:53,100
I'm going to call this.

452
00:22:53,500 --> 00:23:01,700
Maybe I'm going to call this like main transform and Shadow transform.

453
00:23:01,900 --> 00:23:09,800
And I may make these, I may want these to actually just be things that

454
00:23:09,800 --> 00:23:11,900
are in the debug system for real.

455
00:23:11,900 --> 00:23:14,700
Like I may want them to just be stored in debug state.

456
00:23:14,700 --> 00:23:16,100
In fact, I probably do

457
00:23:21,500 --> 00:23:22,400
but for now,

458
00:23:26,100 --> 00:23:31,200
I'm just going to say okay, the text transform sort of bias or soft

459
00:23:31,200 --> 00:23:31,700
bias.

460
00:23:32,400 --> 00:23:33,500
Not what I wanted.

461
00:23:34,700 --> 00:23:38,100
I'm just going to make these two arbitrarily huge numbers, so they

462
00:23:38,100 --> 00:23:39,700
always sort to the front.

463
00:23:40,300 --> 00:23:45,600
And that way, we've got the shadow transform and the text transform

464
00:23:45,900 --> 00:23:48,700
and we can put all of those things on separate planes by just picking

465
00:23:48,700 --> 00:23:49,800
which transform, we use.

466
00:23:50,000 --> 00:23:50,600
Right?

467
00:23:51,500 --> 00:23:54,100
So as you can see this, that won't fix a problem because we haven't

468
00:23:54,300 --> 00:23:55,400
put it in the other routine yet.

469
00:23:55,400 --> 00:23:55,700
So when we,

470
00:23:55,900 --> 00:23:57,200
Split switch into here.

471
00:23:57,500 --> 00:23:58,700
We're still wrong.

472
00:23:59,000 --> 00:23:59,900
But so now what I'm going to

473
00:24:00,000 --> 00:24:02,700
Is, I'm just going to make these first-class citizens of the debug

474
00:24:02,700 --> 00:24:05,200
system itself, so I can.

475
00:24:05,300 --> 00:24:06,800
Oops, that's not what I want.

476
00:24:07,600 --> 00:24:11,500
So I can always use them in all the debug routines without having to

477
00:24:11,500 --> 00:24:12,800
set them up and they'll just be there.

478
00:24:13,700 --> 00:24:17,400
So, here in the debug state, I'm just going to put them right.

479
00:24:19,200 --> 00:24:20,300
Put them right in here.

480
00:24:20,900 --> 00:24:27,600
So they're always usable and I don't know, we might actually want, I

481
00:24:27,600 --> 00:24:29,800
don't know if we want another one, which is like,

482
00:24:30,000 --> 00:24:33,500
And there's the textures from the shadow transform and there's

483
00:24:33,500 --> 00:24:36,400
probably like, you know, in order there's probably something like a

484
00:24:36,400 --> 00:24:40,900
backing transform, which is like the we probably want several

485
00:24:40,900 --> 00:24:43,800
transforms and we just picked which layer so they're basically layers

486
00:24:43,900 --> 00:24:44,900
that we can use.

487
00:24:45,100 --> 00:24:45,600
Right.

488
00:24:47,200 --> 00:24:47,700
So yeah.

489
00:24:48,200 --> 00:24:52,600
So now I just go and add that to add that to wherever we.

490
00:24:52,900 --> 00:24:55,800
I need I have a bunch of work.

491
00:24:55,800 --> 00:24:59,100
I got to do on my for coder config as you know, I switch to modal

492
00:24:59,100 --> 00:24:59,700
editing and

493
00:25:00,100 --> 00:25:04,300
Um I kind of like emacs or super buggy so I never really tuned.

494
00:25:04,800 --> 00:25:09,600
Oh my keys and stuff to be very good in my modally Max and I just

495
00:25:09,600 --> 00:25:11,100
poured that straight out of for a coder.

496
00:25:11,300 --> 00:25:14,300
Now that for a coder is like what I'm editing in everywhere.

497
00:25:14,400 --> 00:25:16,900
I need to spend some quality time, maybe if I'm lucky this weekend,

498
00:25:16,900 --> 00:25:18,000
I'll have some time to do it.

499
00:25:18,300 --> 00:25:22,700
Like tuning my how all my keys work because I spend too much time now

500
00:25:23,000 --> 00:25:27,000
trying to do edits and now that I can program for a coder and see

501
00:25:27,000 --> 00:25:29,700
emacs, of course I always had to program in emacs list now that I can

502
00:25:29,900 --> 00:25:32,800
Graham for a coder and see, I'm going to be able to make really great

503
00:25:32,800 --> 00:25:34,000
keybindings, I think.

504
00:25:34,000 --> 00:25:37,100
And so I'm kind of looking forward to being able to do that and I hope

505
00:25:37,100 --> 00:25:40,300
I can do that soon because I'm so much.

506
00:25:40,300 --> 00:25:43,900
I'm not even close to as fast as I used to be when I wasn't doing when

507
00:25:43,900 --> 00:25:45,700
I didn't, have the modal key bindings.

508
00:25:46,800 --> 00:25:49,000
Which is just, that's, you know, what happens when you've been

509
00:25:49,000 --> 00:25:51,600
programming your whole life non-modal, they switch to Modo, it's hard

510
00:25:51,600 --> 00:25:54,500
to make yourself be the same speed, right?

511
00:25:56,800 --> 00:25:57,100
Okay.

512
00:25:57,100 --> 00:25:58,600
But that's neither here, nor there.

513
00:25:58,800 --> 00:25:59,800
Let's go ahead and

514
00:26:00,200 --> 00:26:08,000
Get these initializations going here, and there we go to books date.

515
00:26:09,200 --> 00:26:13,000
I think that should do it.

516
00:26:13,200 --> 00:26:16,000
I guess I'll put this back in transforming here as well.

517
00:26:16,900 --> 00:26:18,100
Oops, back Young.

518
00:26:20,000 --> 00:26:22,000
Sounds vaguely Vietnamese.

519
00:26:23,100 --> 00:26:23,800
There we go.

520
00:26:26,100 --> 00:26:31,500
Back in transform, sort of bias, is going to be like not as much

521
00:26:32,300 --> 00:26:38,600
really know what my algorithm is here for how these things are being

522
00:26:38,600 --> 00:26:39,300
assigned.

523
00:26:39,300 --> 00:26:42,400
They just have to be numbers are larger than any other value that the

524
00:26:42,400 --> 00:26:43,400
game might use.

525
00:26:43,600 --> 00:26:44,400
If that's it.

526
00:26:46,400 --> 00:26:49,800
Yeah, that's all for that.

527
00:26:49,800 --> 00:26:54,200
And now I need to go actually use this transform up in the profile

528
00:26:54,600 --> 00:26:55,700
code, right?

529
00:26:55,800 --> 00:26:57,500
So in draw a profile in

530
00:26:58,800 --> 00:26:59,900
now, what I need to

531
00:27:00,000 --> 00:27:03,100
Do is make it so that my push Rex can use this.

532
00:27:03,400 --> 00:27:06,800
Thankfully, I already take a transform with the push for X, so, that's

533
00:27:06,800 --> 00:27:09,900
kind of nice and what that means is I can just go ahead and pass the

534
00:27:09,900 --> 00:27:14,200
debug State vacuum transform here and then all the rectangles that get

535
00:27:14,200 --> 00:27:15,800
drawn will go through that.

536
00:27:16,500 --> 00:27:17,500
And that's nice.

537
00:27:17,600 --> 00:27:20,600
But we should probably also take a look at anything else.

538
00:27:20,600 --> 00:27:21,800
Like, here's another one.

539
00:27:22,200 --> 00:27:24,200
I don't even know what this is doing here.

540
00:27:24,800 --> 00:27:29,800
But let's go ahead and put this in here, back in transform and under

541
00:27:30,000 --> 00:27:33,000
Cleared identifier, that's because it's debug state.

542
00:27:36,600 --> 00:27:42,300
And I think the the look grabby B, like all that stuff is also going

543
00:27:42,300 --> 00:27:45,600
to have to be kind of rendered properly.

544
00:27:45,600 --> 00:27:48,300
So you can see here like like all this stuff, right?

545
00:27:48,400 --> 00:27:51,300
Like all that stuff needs to be in there too.

546
00:27:51,300 --> 00:27:56,400
So when we do end, element that stuff's got to be in there.

547
00:27:56,400 --> 00:27:58,800
So what is these are good?

548
00:27:58,800 --> 00:28:00,300
This is just like corners and stuff.

549
00:28:00,300 --> 00:28:02,400
So I'm going to go ahead and make this be

550
00:28:04,000 --> 00:28:05,600
you know, just transform.

551
00:28:08,500 --> 00:28:10,800
In fact, I guess I can just do this to be cheesy.

552
00:28:23,000 --> 00:28:23,500
There we go.

553
00:28:28,200 --> 00:28:30,800
So let's take a look at this and see if that helps at all.

554
00:28:33,400 --> 00:28:36,500
So here we are viewing the profile as before, I'm now going to hit the

555
00:28:36,500 --> 00:28:39,600
spacebar and and there we go.

556
00:28:39,600 --> 00:28:42,900
So now we've still got our profile view and that's pretty great,

557
00:28:43,400 --> 00:28:43,900
right?

558
00:28:44,600 --> 00:28:46,000
So let's take a look at our timings.

559
00:28:46,000 --> 00:28:48,200
Now, you can see that this is the amount of time.

560
00:28:48,200 --> 00:28:49,800
You're spending in the game update.

561
00:28:49,900 --> 00:28:50,700
This is the amount of time.

562
00:28:50,700 --> 00:28:52,100
We're spending an input processing.

563
00:28:52,200 --> 00:28:54,200
This is the amount of time that we can't even hover over.

564
00:28:54,200 --> 00:28:55,200
That's like, executor refresh.

565
00:28:55,200 --> 00:28:56,400
Another junk like that.

566
00:28:56,700 --> 00:28:58,900
This is the amount of time or swing, a debug Coalition which again is

567
00:28:58,900 --> 00:29:02,500
substantially more in the game because there's a lot more things to do

568
00:29:02,500 --> 00:29:03,000
in there.

569
00:29:03,300 --> 00:29:07,300
And here is that frame display which is us just waiting for the

570
00:29:07,300 --> 00:29:10,200
vertical, refresh and the graphics card like who know?

571
00:29:10,200 --> 00:29:11,000
We don't know.

572
00:29:11,300 --> 00:29:13,700
We don't know how much of that time is the graphics card actually

573
00:29:13,700 --> 00:29:16,000
doing work and how much of the time is it's just waiting for the V

574
00:29:16,000 --> 00:29:21,100
blank because obviously you know, we don't we don't have insight into

575
00:29:21,100 --> 00:29:25,900
that and to be clear it's it's not it's overlapped as well.

576
00:29:25,900 --> 00:29:26,300
So

577
00:29:26,600 --> 00:29:30,400
Really what's happening with that code is a little bit slightly

578
00:29:30,400 --> 00:29:30,800
different.

579
00:29:30,800 --> 00:29:31,400
Right?

580
00:29:32,000 --> 00:29:35,500
If you if you really want to talk about what's happening there it's

581
00:29:35,500 --> 00:29:39,400
probably something more like you know we take that profile there.

582
00:29:42,500 --> 00:29:43,000
Right?

583
00:29:43,000 --> 00:29:46,600
And we sort of got like, oh well there's there's this, and then

584
00:29:46,600 --> 00:29:47,500
there's this.

585
00:29:48,100 --> 00:29:52,700
And this and this part here is the, the frame display.

586
00:29:56,300 --> 00:29:59,800
And so you can imagine this sort of stacked.

587
00:30:00,000 --> 00:30:04,300
In by frame like here is frame 0 that is going to repeat itself,

588
00:30:04,300 --> 00:30:04,500
right?

589
00:30:04,500 --> 00:30:07,500
And you can see that it's jittery which is very common on you know

590
00:30:07,500 --> 00:30:11,300
modern machines are very you know there's a lot of they're not like

591
00:30:11,300 --> 00:30:14,000
the machines in the old days where everything took exact amount of

592
00:30:14,000 --> 00:30:18,100
time, thanks to caching and during power and different.

593
00:30:18,100 --> 00:30:20,100
You know, every threads interrupted.

594
00:30:20,100 --> 00:30:22,600
You know, that brings to the pre-empting you all this stuff.

595
00:30:22,600 --> 00:30:25,000
You're never getting very stable frame timings anymore.

596
00:30:25,000 --> 00:30:29,200
So you do expect the Jitter and you get it but roughly we're going to

597
00:30:29,200 --> 00:30:29,800
have the same thing.

598
00:30:30,000 --> 00:30:36,400
Repeat right, so this time here, this time here we're not doing any

599
00:30:36,400 --> 00:30:40,700
work because we've already finished all the work we had to do and now

600
00:30:40,700 --> 00:30:43,900
we're just waiting and we could go start on the other frame but we

601
00:30:43,900 --> 00:30:45,800
really don't want to get too many frames ahead.

602
00:30:45,900 --> 00:30:46,400
Right?

603
00:30:47,100 --> 00:30:50,000
And we already know that we can do a whole frame in less than the

604
00:30:50,000 --> 00:30:50,500
amount of time.

605
00:30:50,500 --> 00:30:54,800
It takes for the graphics card to a for the, for the 60 frames.

606
00:30:54,800 --> 00:30:55,400
A second update.

607
00:30:55,400 --> 00:30:59,500
Anyway, so we're really just waiting here, but what I wanted to

608
00:31:00,000 --> 00:31:02,300
Precise is right here, right?

609
00:31:02,300 --> 00:31:03,800
Where we call swap buffers.

610
00:31:05,500 --> 00:31:06,200
It's not.

611
00:31:06,200 --> 00:31:10,000
It's it's sort of wrong to think about what happens there, as the

612
00:31:10,000 --> 00:31:10,800
graphics card.

613
00:31:10,800 --> 00:31:14,200
Then draws the frame and then waits for the V blank.

614
00:31:14,800 --> 00:31:15,100
Right.

615
00:31:15,100 --> 00:31:16,100
That's the tempting.

616
00:31:16,300 --> 00:31:20,000
That would be what would be tempting to think about but that's not

617
00:31:20,000 --> 00:31:21,200
what actually is happening.

618
00:31:21,700 --> 00:31:22,900
What actually is happening?

619
00:31:22,900 --> 00:31:26,800
Probably is, if you imagine that this is frame 0

620
00:31:29,200 --> 00:31:32,800
Right then actually on frame or rather, let's let's not pretend that

621
00:31:32,800 --> 00:31:34,200
let's pretend frame zeros back here.

622
00:31:34,400 --> 00:31:37,800
Let's pretend this is frame you know like five and this is frame 6.

623
00:31:38,400 --> 00:31:42,700
What's actually happening is this waiting for the V blank is actually

624
00:31:42,700 --> 00:31:44,700
something that's happening from framed for.

625
00:31:45,000 --> 00:31:49,600
So you're actually waiting for frame for to display, right?

626
00:31:55,000 --> 00:31:55,700
Potentially.

627
00:31:57,200 --> 00:32:01,100
You may actually be waiting for frame for to display and what you're

628
00:32:01,100 --> 00:32:07,700
actually kicking off here is frame 5 to be displayed here, right?

629
00:32:08,200 --> 00:32:14,900
And so the graphics card, maybe one frame ahead of you if it wants to

630
00:32:14,900 --> 00:32:18,400
be and technically, it could be 2 frames ahead of you if it wanted to

631
00:32:18,400 --> 00:32:18,700
be.

632
00:32:19,100 --> 00:32:23,700
So you don't unless you've gone and profiled it and determined that

633
00:32:23,700 --> 00:32:26,400
that is literally what's happening, don't assume that.

634
00:32:26,400 --> 00:32:26,700
What's

635
00:32:26,800 --> 00:32:27,200
Going on.

636
00:32:27,200 --> 00:32:29,000
Is you call swap buffers?

637
00:32:29,200 --> 00:32:33,300
It draws the frame in here and then it displays waits for the V blank

638
00:32:33,300 --> 00:32:33,700
here.

639
00:32:33,800 --> 00:32:38,500
What may happen is you call swap buffers here, it draws the frame

640
00:32:38,800 --> 00:32:40,900
here, right?

641
00:32:41,100 --> 00:32:45,300
Displays the previous frame here in the middle of having drawn this

642
00:32:45,300 --> 00:32:50,700
Frame, and then waits for you to submit the next one after that.

643
00:32:51,800 --> 00:32:54,600
And then we'll display this guy here.

644
00:32:54,800 --> 00:32:58,600
So it's really staggered a lot of the time and it's important to kind

645
00:32:58,600 --> 00:32:59,800
of understand that.

646
00:33:00,000 --> 00:33:04,100
What's happening only because if you want to kind of understand

647
00:33:04,100 --> 00:33:07,000
problems, you may have or performance things, you may see down the

648
00:33:07,000 --> 00:33:07,500
line.

649
00:33:08,100 --> 00:33:12,000
It's important to understand that the graphics card in the CPU are not

650
00:33:12,000 --> 00:33:14,700
necessarily operating in lockstep.

651
00:33:14,700 --> 00:33:16,600
They're two different processors.

652
00:33:16,600 --> 00:33:21,000
That can be going asynchronously and they may decide to stagger their

653
00:33:21,000 --> 00:33:22,900
operations specifically.

654
00:33:22,900 --> 00:33:26,800
So each of them has like, if you look at how this works, each of you

655
00:33:26,800 --> 00:33:29,700
now has one sixtieth of a second,

656
00:33:30,000 --> 00:33:36,900
To do your work by adding a frame of latency there, you can do 16, as

657
00:33:36,900 --> 00:33:44,000
worth of work on both the CPU and the GPU without reducing the frame

658
00:33:44,000 --> 00:33:44,400
rate.

659
00:33:44,700 --> 00:33:47,000
Now, you do add a frame of latency, right?

660
00:33:47,000 --> 00:33:52,100
So it's not as good as if everyone was in lockstep but you know, it's

661
00:33:52,100 --> 00:33:53,100
still pretty good.

662
00:33:53,100 --> 00:33:55,600
It's better than reducing the frame rate to 30 frames a second.

663
00:33:55,600 --> 00:33:56,100
Right?

664
00:33:56,100 --> 00:33:59,400
You'd much rather have one frame of latency at 60 frames a second.

665
00:34:00,400 --> 00:34:04,000
No frame to latency at 30 frames a second because one you just get a

666
00:34:04,000 --> 00:34:08,500
bonus extra frame every time right for the same effective amount of

667
00:34:08,500 --> 00:34:09,000
latency.

668
00:34:09,199 --> 00:34:11,800
So it's hopefully that makes some sense to you.

669
00:34:11,800 --> 00:34:14,400
It's just something to be aware of, it's not super relevant to

670
00:34:14,400 --> 00:34:14,900
handmade hero.

671
00:34:14,900 --> 00:34:17,500
We don't have to you don't have to like understand it that well or

672
00:34:17,500 --> 00:34:17,800
anything.

673
00:34:17,800 --> 00:34:20,400
But that's that's just what's going on there.

674
00:34:20,800 --> 00:34:23,500
So what I wanted to point out here because I just wanted to point out

675
00:34:23,500 --> 00:34:28,000
how useful profiles profiling are is, and why I want to spend some

676
00:34:28,000 --> 00:34:29,699
time showing you how to build a debug system

677
00:34:29,900 --> 00:34:35,400
And why I want to have one to begin with all we have done, right.

678
00:34:35,400 --> 00:34:40,100
The only thing we did so far is just show the top level debug stuff.

679
00:34:40,100 --> 00:34:43,600
I haven't even done the thing yet where I click and can go in here

680
00:34:43,699 --> 00:34:44,199
right?

681
00:34:44,600 --> 00:34:45,800
I haven't even done that.

682
00:34:46,000 --> 00:34:50,800
So that literally all we're doing is is just showing the very top

683
00:34:50,800 --> 00:34:51,199
level.

684
00:34:52,699 --> 00:34:53,500
Already.

685
00:34:54,000 --> 00:34:59,100
We're seeing this thing right here which is that input processing is

686
00:34:59,100 --> 00:35:02,900
taking us what is that 2 million Cycles?

687
00:35:04,400 --> 00:35:05,000
Right?

688
00:35:06,400 --> 00:35:08,700
And so think in your head, two million Cycles.

689
00:35:08,700 --> 00:35:09,300
Well, you know what?

690
00:35:09,300 --> 00:35:11,300
At least talked about Cycles before, right?

691
00:35:11,400 --> 00:35:14,500
We've talked about the fact that a cache Miss maybe cost 100 200

692
00:35:14,500 --> 00:35:16,800
cycles and that's really bad, right?

693
00:35:16,800 --> 00:35:18,000
That's like super long.

694
00:35:18,300 --> 00:35:20,000
It's longer than any instruction we met.

695
00:35:20,000 --> 00:35:21,800
We always talk about that missing the cash.

696
00:35:21,900 --> 00:35:24,000
You know we mentioned that and we're like we really don't want to miss

697
00:35:24,000 --> 00:35:27,700
the cash or whatever people say that that's what they're talking about

698
00:35:27,800 --> 00:35:30,400
but what they're talking about when this the cash is it a million

699
00:35:30,400 --> 00:35:31,000
Cycles?

700
00:35:31,000 --> 00:35:33,200
It's 100 Cycles or something, right?

701
00:35:33,300 --> 00:35:34,100
So we're looking at that.

702
00:35:34,200 --> 00:35:34,500
Number.

703
00:35:34,500 --> 00:35:36,400
And we're like, what are we doing?

704
00:35:37,300 --> 00:35:41,100
That's going to cause that much time to be taken doing input

705
00:35:41,100 --> 00:35:41,800
processing.

706
00:35:43,700 --> 00:35:45,400
Right, we're collating.

707
00:35:45,600 --> 00:35:49,300
2000d bugs of events here, right?

708
00:35:49,300 --> 00:35:51,100
Reprocessing, two thousand things.

709
00:35:53,100 --> 00:35:56,400
We're updating a ton of entities or updating hundreds of entities here

710
00:35:56,600 --> 00:35:59,300
all the stuff it's debug code, right?

711
00:35:59,300 --> 00:35:59,800
That's all.

712
00:36:00,000 --> 00:36:02,600
We have an optimized, any of it, it's all whatever.

713
00:36:02,600 --> 00:36:03,600
None of this is optimal.

714
00:36:04,000 --> 00:36:08,000
And yet, we're seeing a suitably sized chunk when compared to these

715
00:36:08,000 --> 00:36:08,600
things.

716
00:36:08,900 --> 00:36:12,300
We're seeing a suitably sized chunk of two million cycles for in

717
00:36:12,300 --> 00:36:13,000
processing.

718
00:36:13,100 --> 00:36:14,100
Where is that going?

719
00:36:15,500 --> 00:36:16,500
And that should be called, right?

720
00:36:16,500 --> 00:36:18,500
You should immediately be like what's going on.

721
00:36:18,900 --> 00:36:21,100
I don't understand what how that could be possible.

722
00:36:21,700 --> 00:36:24,000
I think I know what it is because

723
00:36:25,700 --> 00:36:28,000
you program long enough and you tend to have a hunch about these sort

724
00:36:28,000 --> 00:36:31,000
of things and I think we even mention it on streem way back when, but

725
00:36:31,000 --> 00:36:34,500
you probably have forgotten by now because it was mentioned in

726
00:36:34,500 --> 00:36:35,100
passing.

727
00:36:35,300 --> 00:36:37,800
Some of you may know if you're experienced programmer out there on

728
00:36:37,800 --> 00:36:41,000
Windows you probably know exactly what I think it is as well, doesn't

729
00:36:41,000 --> 00:36:41,600
mean we're right?

730
00:36:41,600 --> 00:36:42,400
So we think it is.

731
00:36:43,200 --> 00:36:47,700
So let's just start by, I'm going to sort of approach this as if I

732
00:36:47,700 --> 00:36:48,000
don't.

733
00:36:48,000 --> 00:36:51,700
Immediately know exactly what to comment out and just kind of show you

734
00:36:51,700 --> 00:36:53,500
how we might go about finding that.

735
00:36:56,300 --> 00:36:58,000
Now that we've got some tools.

736
00:36:59,100 --> 00:37:01,400
Well, here's our input processing, right?

737
00:37:02,000 --> 00:37:05,100
So even if I just don't want to think about this very hard.

738
00:37:05,500 --> 00:37:10,500
Well, what I can do is I can just start narrowing the scope of my

739
00:37:10,500 --> 00:37:11,300
timing blocks.

740
00:37:11,500 --> 00:37:16,000
I know that anything that took that time has to come between that

741
00:37:16,000 --> 00:37:19,300
begin and this end down here, right?

742
00:37:19,500 --> 00:37:23,900
So I can pretty much just tell you right off the bat that if I was to,

743
00:37:24,200 --> 00:37:28,100
You know, subdivide this, I could immediately eliminate certain pieces

744
00:37:28,100 --> 00:37:31,000
of the code as being potential culprits, right?

745
00:37:31,100 --> 00:37:34,300
And so, even if I didn't think, I already knew exactly what it was.

746
00:37:34,300 --> 00:37:38,200
I take this same approach and go, let's divide and conquer.

747
00:37:38,300 --> 00:37:42,500
Let's just add some more profiling blocks in here and that way we can

748
00:37:42,500 --> 00:37:46,300
see who it is, that might be taking this time.

749
00:37:46,400 --> 00:37:50,600
So I'm just going to go ahead and sort of make these blocks.

750
00:37:50,600 --> 00:37:53,900
Are I'm going to go ahead and say time block and I'm

751
00:37:54,000 --> 00:37:55,500
Going to call these things.

752
00:37:55,500 --> 00:37:57,000
Some stuff, whatever they are.

753
00:37:57,000 --> 00:37:58,900
So this is going to be.

754
00:38:00,000 --> 00:38:00,500
What is this?

755
00:38:00,500 --> 00:38:02,000
This is a clearing.

756
00:38:02,000 --> 00:38:03,500
This is like controller clearing.

757
00:38:05,900 --> 00:38:07,100
That's our code, right?

758
00:38:07,100 --> 00:38:08,400
Where it's only us there.

759
00:38:08,900 --> 00:38:11,300
This is win32 message processing.

760
00:38:13,600 --> 00:38:14,100
Right.

761
00:38:17,400 --> 00:38:18,800
Let's get some up in here.

762
00:38:20,600 --> 00:38:21,300
What have we got?

763
00:38:21,300 --> 00:38:22,600
Let's break this up in some.

764
00:38:22,700 --> 00:38:25,400
So here is keyboard messages here.

765
00:38:26,600 --> 00:38:29,400
This is the mouse processing, I guess, right?

766
00:38:35,500 --> 00:38:44,900
So this is X block Mouse processing or Mouse position in here.

767
00:38:44,900 --> 00:38:46,000
We've got some

768
00:38:47,900 --> 00:38:49,000
Keyboard messages.

769
00:38:56,700 --> 00:38:59,800
And then down at the bottom, we've got Xbox.

770
00:39:00,000 --> 00:39:00,700
Strollers.

771
00:39:03,900 --> 00:39:04,200
Yeah.

772
00:39:16,700 --> 00:39:17,400
And that's it.

773
00:39:18,500 --> 00:39:19,300
So that's what we're doing.

774
00:39:26,800 --> 00:39:27,200
Oops.

775
00:39:29,900 --> 00:39:31,300
New keyboard controller.

776
00:39:32,100 --> 00:39:36,700
These guys obviously have to be kind of Loft it up a little bit.

777
00:39:36,800 --> 00:39:40,100
I could do a begin block, end block around them, but I think I'm not

778
00:39:40,100 --> 00:39:40,800
going to bother.

779
00:39:40,800 --> 00:39:42,000
In fact, you know what I'll do.

780
00:39:42,000 --> 00:39:44,100
I don't think this is a problem.

781
00:39:44,100 --> 00:39:47,200
So I'm just going to assume it's not will see it because if it, if

782
00:39:47,200 --> 00:39:50,100
it's part of that outer bit there, right?

783
00:39:52,100 --> 00:39:56,200
All right, so now what I want to do and I'm going to, I'm kind of

784
00:39:56,200 --> 00:39:59,300
using this to motivate the next thing right now.

785
00:39:59,300 --> 00:40:03,100
When I run this those blocks will be timed, right?

786
00:40:03,400 --> 00:40:07,600
But of course, I won't actually be able to see them and the reason is

787
00:40:07,600 --> 00:40:10,500
because we're only showing the top level, right?

788
00:40:10,500 --> 00:40:11,600
So you can kind of see that.

789
00:40:11,600 --> 00:40:17,900
Here's that block of input processing, but I can't actually I can't

790
00:40:17,900 --> 00:40:20,800
actually look at what's inside it and

791
00:40:21,000 --> 00:40:25,800
What I'd like to do is go implement the ability to narrow in on a

792
00:40:25,800 --> 00:40:30,700
region and figure out what's going on inside that region, right?

793
00:40:31,100 --> 00:40:33,900
And so hopefully, you can now see why I want that.

794
00:40:33,900 --> 00:40:37,300
Because once I know that a particular block is expensive.

795
00:40:37,300 --> 00:40:41,200
I want to be able to put blocks inside it and see what the different

796
00:40:41,200 --> 00:40:42,100
parts take.

797
00:40:42,100 --> 00:40:46,000
Now we could do this by just not having this block to begin with,

798
00:40:46,500 --> 00:40:47,000
right?

799
00:40:47,100 --> 00:40:50,800
I could go ahead and do that and in fact, I suppose to make it so that

800
00:40:50,800 --> 00:40:50,800
we

801
00:40:50,900 --> 00:40:52,300
I can kind of finish the train of thought.

802
00:40:52,300 --> 00:40:56,000
Maybe I'll do it that way, so you can, we can see it if I did this,

803
00:40:56,100 --> 00:40:58,900
then these would all be at the top level, but you can see why I want

804
00:40:58,900 --> 00:41:00,100
them to be nested, right?

805
00:41:00,500 --> 00:41:02,000
So it's easier for us.

806
00:41:02,000 --> 00:41:06,700
So we don't have to constantly put everything at the top level, but

807
00:41:06,700 --> 00:41:11,300
let's take a look now at what's actually taking the time and hey, what

808
00:41:11,300 --> 00:41:13,500
a surprise, my suspicion is correct.

809
00:41:13,800 --> 00:41:17,200
The Xbox controllers are taking two million Cycles to pull

810
00:41:24,200 --> 00:41:27,500
And you may ask yourself, why does it take two million Cycles to pull

811
00:41:27,500 --> 00:41:28,700
an Xbox controller?

812
00:41:31,900 --> 00:41:32,500
I'm no idea.

813
00:41:33,700 --> 00:41:37,900
Do not know how they managed to write code that takes two million

814
00:41:37,900 --> 00:41:40,400
Cycles to figure out whether an Xbox controllers.

815
00:41:40,400 --> 00:41:42,900
They're considering the fact that it already knows whether the Xbox

816
00:41:42,900 --> 00:41:47,100
controller is there or not, because that's how you would have written

817
00:41:47,100 --> 00:41:48,100
the hid driver.

818
00:41:48,100 --> 00:41:50,200
If you had any idea what was going on at all.

819
00:41:50,600 --> 00:41:54,900
So, I have no idea what they're doing in there, but what you can

820
00:41:54,900 --> 00:41:58,400
determine from that profile just like shooting fish in a barrel.

821
00:41:58,500 --> 00:41:59,800
Right is

822
00:42:00,000 --> 00:42:03,500
Holding the Xbox controllers is taking all of our time.

823
00:42:03,700 --> 00:42:05,900
So we are spending 2 million cycles of frame.

824
00:42:07,000 --> 00:42:10,200
To not get Xbox controller input, right?

825
00:42:10,200 --> 00:42:15,000
There isn't even an Xbox controller plugged in and I will spare you.

826
00:42:15,300 --> 00:42:20,300
I will spoiler warning at this point and just tell you that this is a

827
00:42:20,300 --> 00:42:22,900
well known bug with Xbox controllers.

828
00:42:23,100 --> 00:42:25,800
I have no idea why they have never fixed it.

829
00:42:26,200 --> 00:42:30,700
But the problem with the Xbox controllers is that when you call

830
00:42:30,800 --> 00:42:36,400
xinput, get state, if the Xbox controller is plugged in it will

831
00:42:36,400 --> 00:42:36,600
operate

832
00:42:36,800 --> 00:42:37,500
Efficiently.

833
00:42:37,600 --> 00:42:41,100
So if you call Xbox controller, get state with a controller index of

834
00:42:41,100 --> 00:42:46,700
say, 0 and there is a controller index in slot 0, then you will

835
00:42:46,700 --> 00:42:49,000
complete immediately and it will not shut up on your profile.

836
00:42:49,200 --> 00:42:53,800
If you can call xinput get state with slot zero and there isn't it.

837
00:42:53,800 --> 00:42:55,900
Controller occupying that slot.

838
00:42:56,000 --> 00:43:00,300
It will take I think whatever two million Cycles divided by 4 is it'll

839
00:43:00,300 --> 00:43:06,000
take you know five hundred thousand Cycles just to tell you that there

840
00:43:06,000 --> 00:43:06,600
is no

841
00:43:06,700 --> 00:43:07,600
Xbox controller there.

842
00:43:08,000 --> 00:43:08,500
Right?

843
00:43:08,500 --> 00:43:16,600
Really heinous bug, obviously, I reported this bug to them in 2008, I

844
00:43:16,600 --> 00:43:17,200
believe.

845
00:43:17,600 --> 00:43:19,900
And well,

846
00:43:21,700 --> 00:43:26,400
You can see how how fast they jumped on that one going on a decade.

847
00:43:26,700 --> 00:43:31,700
Anyway, that's that's the state that's just the that's the reality of

848
00:43:31,700 --> 00:43:32,000
it.

849
00:43:32,200 --> 00:43:36,800
So we will have to work around that bug and there's various ways that

850
00:43:36,800 --> 00:43:37,600
we can choose.

851
00:43:37,600 --> 00:43:39,900
So we're at work around that bug.

852
00:43:40,200 --> 00:43:45,600
One thing that we can do, that's a simple fix that isn't perfect.

853
00:43:45,600 --> 00:43:49,400
Is to only pull one Xbox controller per frame.

854
00:43:50,700 --> 00:43:51,200
If it's

855
00:43:51,400 --> 00:43:52,000
Plugged.

856
00:43:52,200 --> 00:43:56,500
So, all of the controllers that are plugged in, we pull every frame

857
00:43:56,500 --> 00:43:58,700
because presumably, they're being used for the game and we want the

858
00:43:58,700 --> 00:44:01,400
input and we know that they don't stall when they're plugged in.

859
00:44:02,500 --> 00:44:04,400
But every time they

860
00:44:06,100 --> 00:44:08,400
every time there's one that's not plugged in.

861
00:44:08,700 --> 00:44:12,000
We can just not ask that for that state.

862
00:44:13,700 --> 00:44:15,900
We can instead of asking, you know, when there's three controllers

863
00:44:15,900 --> 00:44:18,800
aren't plugged in asking for all their see, all three state every

864
00:44:18,800 --> 00:44:22,300
frame, we only ask every third frame, right?

865
00:44:22,300 --> 00:44:24,500
So we asked like the first one on frame one.

866
00:44:24,500 --> 00:44:28,900
Second, when a frame to 31 on frame 3, thereby reducing the stall

867
00:44:28,900 --> 00:44:33,000
count from potentially two million Cycles down to 500 thousand Cycles

868
00:44:33,000 --> 00:44:33,800
right now.

869
00:44:33,800 --> 00:44:35,800
Again, not perfect because we're still

870
00:44:36,200 --> 00:44:39,700
Losing five, hundred thousand cycles and we don't really want to lose

871
00:44:39,700 --> 00:44:40,700
five thousand Cycles.

872
00:44:41,300 --> 00:44:42,300
Five hundred thousand Cycles.

873
00:44:42,400 --> 00:44:47,400
Now, if we have other things that can be multiplexed, we could do it

874
00:44:47,400 --> 00:44:48,700
even less frequently.

875
00:44:48,700 --> 00:44:52,400
Meaning we could ask only every 10 frames of 20 frames, right?

876
00:44:52,400 --> 00:44:55,600
But that doesn't really help us unless we have something else that

877
00:44:55,600 --> 00:44:56,700
only needs to happen.

878
00:44:56,700 --> 00:44:59,800
Every so often that is going to happen.

879
00:45:00,000 --> 00:45:03,800
That we can also Multiplex right?

880
00:45:03,800 --> 00:45:06,000
Because otherwise all we've done is ensure that we're going to have

881
00:45:06,000 --> 00:45:09,900
one really bad frame, where we lose 500 thousand Cycles, every so many

882
00:45:09,900 --> 00:45:14,500
frames and moving a potential hiccup out to only be every so many

883
00:45:14,500 --> 00:45:16,500
frames is not a great thing, right?

884
00:45:16,500 --> 00:45:17,900
We don't we don't want that.

885
00:45:17,900 --> 00:45:22,700
So if we were going to try and solve the problem all the way, what we

886
00:45:22,700 --> 00:45:28,000
need to do is try to use a different method for figuring out whether

887
00:45:28,000 --> 00:45:29,800
or not the Xbox controllers,

888
00:45:30,000 --> 00:45:32,400
Are plugged in or not and one way we could do that.

889
00:45:32,400 --> 00:45:36,700
For example, was try to monitor some sort of device change

890
00:45:36,700 --> 00:45:41,700
notifications that we might get to tell us if an Xbox controller gets

891
00:45:41,700 --> 00:45:43,900
plugged in or not, right?

892
00:45:45,100 --> 00:45:49,800
So what I'm going to do here is I'm just going to set us up for doing

893
00:45:49,800 --> 00:45:51,700
that at some point in the near future.

894
00:45:51,900 --> 00:45:55,800
I'm just going to go ahead and say, well, okay, we know that we've got

895
00:45:56,400 --> 00:45:59,800
this X User Max count nonsense Happening Here, Right?

896
00:46:01,400 --> 00:46:04,600
So what I'm going to do is I'm going to say, let's introduce a piece

897
00:46:04,600 --> 00:46:07,800
of permanent storage backup here outside the main Loop.

898
00:46:07,800 --> 00:46:10,000
Before we start any everything.

899
00:46:10,700 --> 00:46:15,700
And what I'm going to do is say Okay, since we don't know, we'll just

900
00:46:15,700 --> 00:46:20,900
say Xbox controller present and I'm going to say that we've got this

901
00:46:20,900 --> 00:46:24,300
array of assuming that none of the Xbox controllers are present for

902
00:46:24,300 --> 00:46:27,200
now, except for the first one.

903
00:46:29,600 --> 00:46:30,100
Right?

904
00:46:30,800 --> 00:46:34,100
And so in the future will try to actually keep that up to date.

905
00:46:34,100 --> 00:46:39,500
But what we'll do now is say, oh okay, what we'll do is we'll only get

906
00:46:39,500 --> 00:46:42,300
the X will only do exit input get state.

907
00:46:43,300 --> 00:46:46,900
If that Xbox controller present array.

908
00:46:49,500 --> 00:46:50,800
Is is true.

909
00:46:51,300 --> 00:46:56,400
So everybody else who's not set to True, won't, you know, go through

910
00:46:56,400 --> 00:47:01,300
this path and they'll be marked as not connected, right?

911
00:47:02,600 --> 00:47:05,200
So down here, when it says, control is not available, say Xbox

912
00:47:05,200 --> 00:47:11,400
controller, present is whatever the one is whatever controller index

913
00:47:11,400 --> 00:47:14,000
were on, will set it to false.

914
00:47:15,100 --> 00:47:15,600
Right.

915
00:47:16,300 --> 00:47:19,100
And so what we could even do in fact, you know, it will do here.

916
00:47:19,600 --> 00:47:22,400
What we could do is set them all to True at the beginning.

917
00:47:23,100 --> 00:47:23,600
I don't know why.

918
00:47:23,600 --> 00:47:26,700
I said the that's, I don't know what I was doing there.

919
00:47:27,300 --> 00:47:32,100
What I could do here is actually do controller index equals zero

920
00:47:32,100 --> 00:47:33,100
controller index,

921
00:47:35,800 --> 00:47:36,900
Is less than X User.

922
00:47:36,900 --> 00:47:39,800
Max tap and controller index.

923
00:47:42,100 --> 00:47:45,400
Plus plus inside here, I could just set these all too true.

924
00:47:45,800 --> 00:47:49,700
And then if you so basically what this turns our game into is this

925
00:47:49,700 --> 00:47:53,300
turns our game into a game where you have to have the controller

926
00:47:53,300 --> 00:47:56,200
plugged in at startup, in order for it to work, you can't plug it in

927
00:47:56,200 --> 00:47:58,500
after the fact, which is not what we want.

928
00:47:58,500 --> 00:47:59,900
So this is not a solution.

929
00:48:00,000 --> 00:48:00,600
Right.

930
00:48:00,800 --> 00:48:08,100
This is a definite to do, which is like monitor Xbox controllers for

931
00:48:08,600 --> 00:48:13,500
chain for being plugged in after the fact.

932
00:48:14,800 --> 00:48:17,200
So we want to go ahead and add something that will undo.

933
00:48:17,200 --> 00:48:21,600
This will basically like say oh when I get some other kind of change

934
00:48:21,600 --> 00:48:25,700
notification will re pull and see but for the moment we'll do is we'll

935
00:48:25,700 --> 00:48:28,800
assume they're all present and then as soon as we ask and find out

936
00:48:28,800 --> 00:48:29,900
that they're not will

937
00:48:30,000 --> 00:48:32,100
Stop pulling them ever again, right?

938
00:48:32,300 --> 00:48:34,500
So like I said, that'll be fine for if they're plugged in beginning.

939
00:48:34,500 --> 00:48:36,700
It won't handle when they're plugged in it, which is not what we want.

940
00:48:36,700 --> 00:48:39,400
So we still want something else there, but let's go ahead and see how

941
00:48:39,400 --> 00:48:41,100
that affects our profile.

942
00:48:44,300 --> 00:48:44,900
Look at that.

943
00:48:44,900 --> 00:48:46,600
Look at how much nicer that is now, right?

944
00:48:46,600 --> 00:48:50,800
So now there's none of that nonsense going on, right?

945
00:48:51,200 --> 00:48:54,500
Because we're never going to pull that joystick if it's not there and

946
00:48:54,500 --> 00:48:56,100
so that's great, which is what we wanted.

947
00:48:57,100 --> 00:49:00,100
So like I said, we have a little bit more work to do there and that's

948
00:49:00,100 --> 00:49:01,200
to do is very important.

949
00:49:01,200 --> 00:49:04,100
So don't forget about it, you know, that's why we put these two dudes

950
00:49:04,100 --> 00:49:04,500
in here.

951
00:49:04,700 --> 00:49:08,100
And so if the platform layer, when we go through to do find our sort

952
00:49:08,100 --> 00:49:11,800
of final shipping pass on it, we're going to want to go study up and

953
00:49:11,800 --> 00:49:13,000
figure out how to get some

954
00:49:13,400 --> 00:49:18,200
Word notifications that we can use to reset that array and re-query.

955
00:49:19,000 --> 00:49:25,400
But for now, this will avoid having a giant 2 million cycle time sink

956
00:49:25,400 --> 00:49:28,900
where Microsoft is sitting around figuring out that there aren't any

957
00:49:28,900 --> 00:49:32,200
Xbox controllers over and over and over and over again at Great

958
00:49:32,200 --> 00:49:33,000
expense to us.

959
00:49:33,600 --> 00:49:34,000
So,

960
00:49:36,000 --> 00:49:40,300
now that that's taken care of, let's get back to the input processing.

961
00:49:40,900 --> 00:49:44,700
Sub Loop stuff that we were talking about before, so yeah.

962
00:49:51,700 --> 00:49:52,400
Let's see.

963
00:49:55,900 --> 00:50:03,200
So now what I want to do is go back to focus on what I was trying to

964
00:50:03,200 --> 00:50:05,000
talk about with the profiler before.

965
00:50:06,200 --> 00:50:09,900
And so, here is, you know, here is our profile, you know, actually,

966
00:50:09,900 --> 00:50:12,100
it's kind of interesting to I'm kind of curious.

967
00:50:12,300 --> 00:50:13,300
Can we do?

968
00:50:17,900 --> 00:50:20,700
We do the software renderer do we actually get anything?

969
00:50:26,900 --> 00:50:27,900
Not sure why.

970
00:50:27,900 --> 00:50:31,000
That's, that's weird that seems weird, doesn't it?

971
00:50:39,400 --> 00:50:45,100
Not sure why that's all pink will have to go look at that, because I

972
00:50:45,100 --> 00:50:47,900
feel like when we turn on the other renderer, we should still see

973
00:50:47,900 --> 00:50:52,100
something reasonable in here, and you can see that when we did it, the

974
00:50:52,100 --> 00:50:53,300
lane count increased.

975
00:50:53,400 --> 00:50:57,800
So it did the profiler properly recorded that there were other

976
00:51:00,000 --> 00:51:04,200
It's doing things, but it doesn't seem to have worked properly.

977
00:51:05,600 --> 00:51:09,700
I don't know why this is not rendering correctly, I don't know if

978
00:51:09,700 --> 00:51:12,000
that's something to do with the Sorting or something like that.

979
00:51:19,200 --> 00:51:20,400
That's real weird.

980
00:51:20,700 --> 00:51:21,300
Roll.

981
00:51:23,700 --> 00:51:28,600
Yeah, that reminds me one thing that I wanted to check, you know, how

982
00:51:28,600 --> 00:51:28,900
we were.

983
00:51:28,900 --> 00:51:33,300
Had that sort of bug where this is in the software renderer when we

984
00:51:33,300 --> 00:51:35,400
played it through opengl, it looks weird.

985
00:51:36,400 --> 00:51:41,700
I was wondering about that and I was thinking, I wonder if we ever set

986
00:51:41,700 --> 00:51:46,300
srgb on The Source texture, I can't remember if we did or not and I

987
00:51:46,300 --> 00:51:48,900
just wanted to look so when we do

988
00:51:49,100 --> 00:51:53,200
Do I think that's an opengl potentially?

989
00:51:55,900 --> 00:51:56,800
But I can't remember.

990
00:51:57,700 --> 00:51:59,000
So let's take a look.

991
00:52:00,800 --> 00:52:04,900
Like that white, you know, it was getting that white look to it and

992
00:52:04,900 --> 00:52:10,000
what I couldn't remember is when we were to do opengl display bitmap

993
00:52:10,000 --> 00:52:10,900
when we do, okay?

994
00:52:10,900 --> 00:52:11,800
So there it is.

995
00:52:12,100 --> 00:52:18,200
So when we do GL text image to D, what I what I was thinking is our

996
00:52:18,200 --> 00:52:24,600
frame buffer is now srgb, I believe, but the texture that we're

997
00:52:24,600 --> 00:52:28,400
submitting, we're telling it that it's linear RGB.

998
00:52:28,900 --> 00:52:30,500
And so I was wondering if our

999
00:52:30,900 --> 00:52:38,000
Problem was actually this that we weren't submitting an srgb 8

1000
00:52:38,000 --> 00:52:39,700
texture, if that makes sense.

1001
00:52:42,000 --> 00:52:47,100
And I don't know, I wasn't sure if maybe that was the problem because

1002
00:52:47,600 --> 00:52:51,100
I was thinking maybe it was doing non srgb reads.

1003
00:52:53,800 --> 00:52:55,300
And hey look that's what the problem was.

1004
00:52:58,700 --> 00:52:59,100
Yeah.

1005
00:53:02,400 --> 00:53:02,900
Cool.

1006
00:53:03,800 --> 00:53:05,200
The other thing that I wanted to fix their.

1007
00:53:05,200 --> 00:53:05,900
So that's perfect.

1008
00:53:05,900 --> 00:53:08,300
So now we can switch between the software renderer and the hardware

1009
00:53:08,300 --> 00:53:11,000
renderer, it's kind of weird.

1010
00:53:11,100 --> 00:53:11,400
Isn't it?

1011
00:53:11,400 --> 00:53:14,200
Kind of interesting that are are fonts, look different,

1012
00:53:15,400 --> 00:53:19,100
I guessing that's because our we probably weren't accurate with pixel

1013
00:53:19,100 --> 00:53:19,800
centers.

1014
00:53:20,200 --> 00:53:23,700
I'm guessing that's the only thing I can think of, but it's kind of

1015
00:53:23,700 --> 00:53:26,100
cool that we can switch between software and Hardware rendering it

1016
00:53:26,100 --> 00:53:27,700
basically the exact same result.

1017
00:53:31,100 --> 00:53:32,300
That's kind of cool, right?

1018
00:53:34,200 --> 00:53:36,700
The other thing I was going to say is I don't know why that kind of

1019
00:53:36,700 --> 00:53:38,000
got a wild hair about that.

1020
00:53:38,000 --> 00:53:40,000
Just I saw it and I remembered I was thinking about it.

1021
00:53:40,000 --> 00:53:43,000
So hopefully you guys see what I was what I was doing there, right?

1022
00:53:44,500 --> 00:53:49,500
For gamma correction, when we render, we render with gamma correction

1023
00:53:49,500 --> 00:53:53,700
such that we load images in, we gamma correct the values, we do all

1024
00:53:53,700 --> 00:53:55,800
our blending operations, then we undemocratic the values and stored

1025
00:53:55,800 --> 00:53:57,500
them back to the frame buffer, what that means.

1026
00:53:59,600 --> 00:53:59,700
I,

1027
00:54:00,000 --> 00:54:01,300
A i gamma corrected values?

1028
00:54:01,300 --> 00:54:02,100
That's wrong.

1029
00:54:02,400 --> 00:54:04,300
We map from a gamut.

1030
00:54:04,300 --> 00:54:06,900
From a gamma curve space to a linear space.

1031
00:54:07,000 --> 00:54:09,600
We do all our bunny operations and then we map from the linear space

1032
00:54:09,600 --> 00:54:13,400
back to the gamma corrected to the gamma encoded, space, the curved

1033
00:54:13,400 --> 00:54:14,500
space, right?

1034
00:54:15,300 --> 00:54:16,900
And what was happening.

1035
00:54:16,900 --> 00:54:20,600
When we did our opengl display bitmap, where I think that use opengl

1036
00:54:20,600 --> 00:54:25,100
to display to the screen instead of using GDI to do.

1037
00:54:25,100 --> 00:54:29,400
So, is when I set what format the texture was, when I

1038
00:54:30,000 --> 00:54:33,200
It when I take the results of the software renderer which are gamma

1039
00:54:33,200 --> 00:54:37,600
encoded and I sent them to opengl, I didn't tell opengl, they were

1040
00:54:37,600 --> 00:54:38,700
gamma encoded.

1041
00:54:38,900 --> 00:54:45,000
So when it went to do the the the rendering of the image, it was

1042
00:54:45,000 --> 00:54:47,900
reading it as a texture and writing it to the frame buffer.

1043
00:54:48,000 --> 00:54:49,800
The frame buffer is marked as srgb.

1044
00:54:49,800 --> 00:54:51,300
The textures not.

1045
00:54:51,600 --> 00:54:53,900
So it's reading in linear what?

1046
00:54:53,900 --> 00:54:55,300
It thinks are linear values.

1047
00:54:55,300 --> 00:54:59,600
Even though their gamma curve values, it's applying the gamma curve.

1048
00:55:00,000 --> 00:55:04,100
Him when it coffees them to the frame buffer, right?

1049
00:55:05,300 --> 00:55:08,800
But it never applied the inverse gamma curve when it read them because

1050
00:55:08,800 --> 00:55:11,100
it thought they were linear to begin with.

1051
00:55:11,400 --> 00:55:16,800
So we were doing only half of a mapping which basically re squares are

1052
00:55:16,800 --> 00:55:19,900
gamma, which is why everything was so bright, right?

1053
00:55:20,700 --> 00:55:24,000
It recurs, it curves a curve, right?

1054
00:55:24,100 --> 00:55:26,800
It like takes things that were already gamma corrected and tries to

1055
00:55:26,800 --> 00:55:27,700
get back at them again.

1056
00:55:28,600 --> 00:55:31,200
So, I believe that was the only bug with that.

1057
00:55:31,200 --> 00:55:34,000
There's another bug in here, though, which is that when we do GL bind

1058
00:55:34,000 --> 00:55:36,100
texture and we set it to texture one.

1059
00:55:36,800 --> 00:55:40,400
Now, when we switch between those two, remember we've allocated a

1060
00:55:40,400 --> 00:55:44,000
bunch of textures for use in the games when it's in Harbor renderer,

1061
00:55:44,200 --> 00:55:48,500
so we can no longer just assume that we can use texture one.

1062
00:55:48,900 --> 00:55:53,500
So what we want to do is we want to like reserve one texture at

1063
00:55:53,500 --> 00:55:58,000
startup for the case, where we would like to do opengl.

1064
00:55:58,200 --> 00:55:59,900
Map display, right?

1065
00:56:00,100 --> 00:56:05,200
We essentially just want some way of setting up a global texture

1066
00:56:05,200 --> 00:56:07,600
handle for use for this blip through.

1067
00:56:08,900 --> 00:56:14,000
And so, in order to do that and you can see, I don't know if you guys

1068
00:56:14,000 --> 00:56:18,200
saw it, there's a way you can actually see the bug happen with it.

1069
00:56:18,200 --> 00:56:20,100
So oh, not in the profile.

1070
00:56:20,100 --> 00:56:21,200
Sorry, it's in here.

1071
00:56:21,500 --> 00:56:22,500
So watch this.

1072
00:56:22,600 --> 00:56:24,800
Watch the background layer when I do this.

1073
00:56:29,800 --> 00:56:31,200
Do you see what happens?

1074
00:56:33,800 --> 00:56:38,200
and if you can see that, I'll do it one more time in case you couldn't

1075
00:56:41,300 --> 00:56:42,000
So, here's the hardware.

1076
00:56:42,000 --> 00:56:44,700
Renderer write books for looks correct.

1077
00:56:44,700 --> 00:56:45,900
Switch to software rendering.

1078
00:56:46,100 --> 00:56:47,000
Obviously that looks correct.

1079
00:56:47,000 --> 00:56:48,900
That's always going to look correct because that's not using any

1080
00:56:48,900 --> 00:56:49,400
textures.

1081
00:56:49,400 --> 00:56:52,900
It's just bleep using 12 blit to the screen, and then back.

1082
00:56:52,900 --> 00:56:55,000
And you notice there's this weird thing in the background there.

1083
00:56:55,300 --> 00:56:58,500
That's the image that and you can even see the text.

1084
00:56:58,500 --> 00:56:59,300
I don't know if you can see it.

1085
00:56:59,300 --> 00:56:59,800
You could see like

1086
00:57:00,600 --> 00:57:04,100
That's the image that we put into that texture, that the software

1087
00:57:04,100 --> 00:57:09,900
rendering made over writing the texture, the that we had sent down the

1088
00:57:09,900 --> 00:57:13,000
graphics card to use for Hardware, rendering for that backplane,

1089
00:57:13,600 --> 00:57:14,200
right?

1090
00:57:15,300 --> 00:57:19,500
And so, we need to make sure that we use a separate texture for that

1091
00:57:19,500 --> 00:57:22,600
backplane rendering so that if we want to switch between hardware and

1092
00:57:22,600 --> 00:57:22,900
software.

1093
00:57:22,900 --> 00:57:26,200
Rendering, we are not romping an existing texture.

1094
00:57:27,500 --> 00:57:30,900
So in order to do that, all I need is I need to allocate a texture

1095
00:57:30,900 --> 00:57:34,700
from the graphics card at runtime handle and say this is the one

1096
00:57:34,700 --> 00:57:37,300
that's going to use for that, right?

1097
00:57:38,600 --> 00:57:41,600
And so, I'm going to say here that we've got one of those.

1098
00:57:49,500 --> 00:57:52,100
So I'm going to say that we essentially have some handle here that we

1099
00:57:52,100 --> 00:57:56,000
know we're going to reserve and I'm going to say that we pass it in

1100
00:57:56,100 --> 00:57:59,700
when we do open gel display bitmap, I'm going to pass in here like

1101
00:57:59,700 --> 00:58:04,400
whatever that put texture is and so when we bind that texture in I'm

1102
00:58:04,400 --> 00:58:09,900
just going to have that get Bound in here like so so that we will

1103
00:58:09,900 --> 00:58:16,100
never try to submit over someones existing texture and that way that's

1104
00:58:16,100 --> 00:58:18,100
just a little bit saner.

1105
00:58:18,100 --> 00:58:18,600
I think.

1106
00:58:19,600 --> 00:58:22,800
so in win32, in it, open gel

1107
00:58:26,800 --> 00:58:29,000
In here, once I'm done with everything.

1108
00:58:29,200 --> 00:58:32,900
And we've got open gel initialized, I'm going to go ahead and say,

1109
00:58:32,900 --> 00:58:34,800
okay, let's get that.

1110
00:58:35,400 --> 00:58:40,200
Let's, let's do a gen textures call to just give us one of those and

1111
00:58:40,200 --> 00:58:44,700
then we'll pass that in when we do the display call.

1112
00:58:45,300 --> 00:58:47,900
So that we know that it's that will always work.

1113
00:58:50,300 --> 00:58:54,400
Opengl display bitmap, put texture.

1114
00:58:56,000 --> 00:58:56,400
Okay.

1115
00:58:57,600 --> 00:59:01,100
So now we should go through a reserved handle that will not get

1116
00:59:01,100 --> 00:59:02,900
parceled out to somebody else.

1117
00:59:03,400 --> 00:59:06,700
So there's the software under, and there's back to the hardware

1118
00:59:06,700 --> 00:59:08,300
renderer there, and you can see that now.

1119
00:59:08,300 --> 00:59:09,500
We don't have that bug anymore.

1120
00:59:09,500 --> 00:59:13,800
So that's just a nice just getting rid of a bug that we would have had

1121
00:59:13,800 --> 00:59:14,400
otherwise.

1122
00:59:15,500 --> 00:59:18,300
So yeah, you can see that we're a little sloppy about pixel centers,

1123
00:59:18,300 --> 00:59:21,000
in the software renderer, which maybe we should go fix some day,

1124
00:59:21,300 --> 00:59:22,700
probably not till the games done.

1125
00:59:22,700 --> 00:59:24,600
Because we like I said, we don't need the software renderer, the

1126
00:59:24,600 --> 00:59:25,700
software renderer is just

1127
00:59:26,100 --> 00:59:30,200
It was about teaching how those things work, but someday be nice to go

1128
00:59:30,200 --> 00:59:34,100
back and like really be rigorous about the pixel centers and make sure

1129
00:59:34,100 --> 00:59:37,500
that everything is exactly right because we're really good with our

1130
00:59:37,900 --> 00:59:38,900
with our interpolator, right?

1131
00:59:38,900 --> 00:59:43,000
You can see how good we look, we look just as good as the graphics

1132
00:59:43,000 --> 00:59:46,300
card in because we did like but correct, bilinear, filtering and

1133
00:59:46,300 --> 00:59:46,500
correct.

1134
00:59:46,500 --> 00:59:49,000
Grammar correction, all that stuff, so, that's pretty cool.

1135
00:59:50,000 --> 00:59:54,400
But our pixel centers, we never talked about that and we never even

1136
00:59:54,400 --> 00:59:54,900
did anything.

1137
00:59:54,900 --> 00:59:55,500
We never.

1138
00:59:55,800 --> 00:59:56,700
Actually did that, right?

1139
00:59:56,700 --> 00:59:58,700
And it's not hard to get right necessarily.

1140
00:59:58,700 --> 00:59:59,900
It doesn't like

1141
01:00:00,000 --> 01:00:03,300
I mean it doesn't cost too many extra operations right thing to get,

1142
01:00:03,300 --> 01:00:03,500
right?

1143
01:00:03,500 --> 01:00:05,900
It's just you have to think through the math and do it properly.

1144
01:00:07,000 --> 01:00:08,400
So they all right.

1145
01:00:09,800 --> 01:00:10,700
How much time you got?

1146
01:00:10,900 --> 01:00:11,600
We got no time.

1147
01:00:11,900 --> 01:00:15,000
All right, so we've got our path.

1148
01:00:15,000 --> 01:00:15,800
Clear ahead of us.

1149
01:00:15,800 --> 01:00:17,300
Everything's working great right now.

1150
01:00:17,400 --> 01:00:20,200
Next week, we're going to make that profile view.

1151
01:00:20,200 --> 01:00:22,900
Be ten times cooler will make it so that you can navigate down.

1152
01:00:22,900 --> 01:00:23,800
The hierarchy will make it.

1153
01:00:23,800 --> 01:00:27,400
So it shows the top used things because now we're sort of, I think

1154
01:00:27,400 --> 01:00:28,900
we're on a roll, we've got what we need.

1155
01:00:29,100 --> 01:00:31,600
And that's what we'll do for next week.

1156
01:00:31,600 --> 01:00:34,900
I'm going to go ahead and take some Q&A now, because I would like to

1157
01:00:34,900 --> 01:00:39,000
take some Q and A now, and, and yeah.

1158
01:00:41,400 --> 01:00:42,500
That's, that's all good.

1159
01:01:22,800 --> 01:01:24,300
Oh my God, in sohbat.

1160
01:01:24,800 --> 01:01:26,000
It's about his amazing.

1161
01:01:28,600 --> 01:01:32,300
All right, so anyway, let's take some cues here.

1162
01:01:32,600 --> 01:01:36,400
Can't remember what opengl considers the center of the pixel.

1163
01:01:37,600 --> 01:01:46,200
So the way opengl works with pixel centers is that like the, they

1164
01:01:46,200 --> 01:01:46,700
picked it.

1165
01:01:46,700 --> 01:01:51,400
So that if you specified the bottommost pick,

1166
01:01:51,600 --> 01:01:57,200
All coordinates is act like 0 0 and the topmost width and height.

1167
01:01:57,200 --> 01:02:02,200
So like one passed it with 0 0 and 1, 1 texture coordinates, you'd get

1168
01:02:02,200 --> 01:02:05,500
a one-to-one blit, I believe that's how they ended up specifying it

1169
01:02:05,500 --> 01:02:10,400
out which was like, not the way that d3d did it originally.

1170
01:02:10,400 --> 01:02:14,400
But they've fixed now, it was a very smart the way opengl did.

1171
01:02:14,400 --> 01:02:15,700
It was a very smart way.

1172
01:02:19,400 --> 01:02:20,700
I think it was right.

1173
01:02:20,700 --> 01:02:23,900
I mean I'm not really a super Jeep you guys so you know,

1174
01:02:26,600 --> 01:02:29,100
Maybe there's reasons why you wouldn't want to do it that way, but it

1175
01:02:29,100 --> 01:02:32,100
seemed like a very sane definition of it.

1176
01:02:32,300 --> 01:02:35,000
And so what they did was they basically made it.

1177
01:02:35,000 --> 01:02:41,200
So that bilinear filtering and texture and pixel coverage lined up

1178
01:02:41,500 --> 01:02:45,200
exactly and that I don't know that just was kind of cool.

1179
01:02:45,200 --> 01:02:47,400
Anyway, it doesn't matter point being

1180
01:02:50,600 --> 01:02:52,900
Is Rob a synonym for clobber.

1181
01:02:53,000 --> 01:02:53,700
Yes.

1182
01:02:56,300 --> 01:02:58,100
Sure.

1183
01:02:58,200 --> 01:02:59,800
Do mean it will the

1184
01:03:00,000 --> 01:03:01,400
Opening cutscene be narrated?

1185
01:03:01,400 --> 01:03:06,700
Yes in fact I said I had it voice-acted but I didn't like the voice

1186
01:03:06,700 --> 01:03:11,400
acting so I'm still look, I'm going to probably get someone else to do

1187
01:03:11,400 --> 01:03:11,800
it.

1188
01:03:11,800 --> 01:03:16,200
Some point or Domina could you elucidate further on the waiting for

1189
01:03:16,200 --> 01:03:17,800
vsync in the profiler?

1190
01:03:18,900 --> 01:03:20,800
I'm not sure what you mean by elucidate further.

1191
01:03:21,200 --> 01:03:26,400
But what I am trying to say about that staggering is just that when

1192
01:03:26,400 --> 01:03:29,800
you are waiting for vsync what that

1193
01:03:30,000 --> 01:03:35,900
Actually means is, you're waiting for the GPU to tell you to proceed,

1194
01:03:36,700 --> 01:03:42,200
that may have nothing to do with when the vertical blanking occurs.

1195
01:03:43,100 --> 01:03:48,100
It just means that you are far enough ahead of the GPU that it doesn't

1196
01:03:48,100 --> 01:03:52,000
want you to submit any more stuff right now, right?

1197
01:03:53,200 --> 01:03:56,200
Meaning swap buffers, what's going to happen is you're going to call

1198
01:03:56,200 --> 01:03:59,200
swap buffers and the graphics card might return immediately.

1199
01:03:59,700 --> 01:04:02,800
It might just be like, okay even though it hasn't displayed a frame,

1200
01:04:03,100 --> 01:04:06,200
then you'll get to the next time you call swap buffers and call it

1201
01:04:06,200 --> 01:04:09,300
again and that time it might be like, okay, wait a second.

1202
01:04:09,700 --> 01:04:12,000
We haven't finished this playing the other frame yet.

1203
01:04:12,000 --> 01:04:13,200
We're still waiting for vsync.

1204
01:04:13,200 --> 01:04:15,700
So I'm just going to hold you there for a little bit, right?

1205
01:04:16,500 --> 01:04:19,400
Because the gravatar won't let you just submit an infinite number of

1206
01:04:19,400 --> 01:04:20,000
frames.

1207
01:04:20,000 --> 01:04:22,800
That's not going to happen, it's going to stop once.

1208
01:04:23,100 --> 01:04:25,000
A certain amount behind.

1209
01:04:26,200 --> 01:04:31,200
So then at that point, it probably is true that you will be roughly

1210
01:04:31,200 --> 01:04:34,800
around the vsync because it's like, okay, I cleared that frame out and

1211
01:04:34,800 --> 01:04:36,100
now we're moving on to the next one.

1212
01:04:36,100 --> 01:04:39,400
Like whatever that's one thing, but who knows that may not be true,

1213
01:04:39,400 --> 01:04:39,800
right?

1214
01:04:39,900 --> 01:04:44,100
It may be that it's only once it sinks something down to be pending

1215
01:04:44,100 --> 01:04:45,600
for vsync, you can start on the next one.

1216
01:04:45,800 --> 01:04:48,900
And really, what you're getting is waiting for that transition to

1217
01:04:48,900 --> 01:04:52,000
occur or, who knows, you might you might be staggered from the Visa

1218
01:04:52,000 --> 01:04:52,800
and quite a bit.

1219
01:04:53,200 --> 01:04:56,000
And so I don't have anything special to add.

1220
01:04:56,000 --> 01:04:58,000
There is not a problem that I've studied extensively.

1221
01:04:58,000 --> 01:05:01,600
I can't tell you what, you know, amd's driver does or Nvidia driver

1222
01:05:01,600 --> 01:05:03,000
does specifically or anything like that.

1223
01:05:03,100 --> 01:05:05,000
I just wanted you to be aware.

1224
01:05:05,200 --> 01:05:10,100
That calling swap buffers is not the same as saying wait for the

1225
01:05:10,100 --> 01:05:12,400
vertical, retrace and display this Frame.

1226
01:05:12,700 --> 01:05:15,300
What it's saying is here is the opengl commands.

1227
01:05:15,300 --> 01:05:15,800
That constitute.

1228
01:05:15,800 --> 01:05:20,000
This Frame, I trust, you will wait until the appropriate V blank to

1229
01:05:20,000 --> 01:05:20,800
display it.

1230
01:05:21,500 --> 01:05:22,900
And I also trust that you will

1231
01:05:23,000 --> 01:05:24,500
Put my thread to sleep here.

1232
01:05:24,500 --> 01:05:27,900
If I'm too far ahead of you, that's really what it's actually saying,

1233
01:05:28,200 --> 01:05:31,100
but none of it has anything to do with return.

1234
01:05:31,100 --> 01:05:34,100
Immediately after the V Blank, That's not necessarily guaranteed and

1235
01:05:34,100 --> 01:05:35,900
may often times, not be what happens.

1236
01:05:42,300 --> 01:05:43,100
Kubrick Caleb.

1237
01:05:43,100 --> 01:05:46,300
I actually prefer the fonts that the software renderer produces.

1238
01:05:46,600 --> 01:05:50,000
Is there anything we can do to make them look that way in GL?

1239
01:05:52,400 --> 01:05:55,700
Well, to be honest, since I haven't actually looked at what's going

1240
01:05:55,700 --> 01:05:56,000
on.

1241
01:05:56,000 --> 01:05:59,200
I don't really even know why they're looking one way or the other way.

1242
01:06:00,000 --> 01:06:00,300
Part of.

1243
01:06:00,300 --> 01:06:03,400
It may also be that the gamma curve in our software.

1244
01:06:03,400 --> 01:06:08,100
Renderer is approximate, whereas the one in the hardware is snot and

1245
01:06:08,100 --> 01:06:10,100
around the alpha, is his part.

1246
01:06:10,100 --> 01:06:12,000
It is going to have effects there.

1247
01:06:13,400 --> 01:06:18,300
So it may be that if we re-encode the fonts to, with a proper srgb

1248
01:06:18,300 --> 01:06:22,700
curve, which is some point, I actually will do in the asset Packer.

1249
01:06:23,600 --> 01:06:25,800
It may be that they look more correct there.

1250
01:06:27,400 --> 01:06:28,200
Butt out.

1251
01:06:29,500 --> 01:06:32,000
Like I said, we've kind of have to look we have to look into it.

1252
01:06:33,100 --> 01:06:33,400
Hmm.

1253
01:06:37,100 --> 01:06:39,000
Leaving seven recommended entry.

1254
01:06:39,000 --> 01:06:40,400
Level programming language for aspiring game.

1255
01:06:40,400 --> 01:06:44,400
Does I would see that?

1256
01:06:44,400 --> 01:06:47,300
I've said this multiple times before on the, on the stream.

1257
01:06:48,500 --> 01:06:52,600
In fact this is sort of gets Sean, Barrett said something on.

1258
01:06:54,100 --> 01:06:58,200
When he was talking to Abner on, handmade the handmade Dev like

1259
01:06:58,200 --> 01:07:03,200
interview thing that I kind of wanted to follow up on because I hope

1260
01:07:03,200 --> 01:07:05,400
he wasn't talking about me when he was talking about it because I've

1261
01:07:05,600 --> 01:07:07,900
Always said exactly the opposite of this.

1262
01:07:07,900 --> 01:07:12,900
But he was saying that people were worried or that people had been

1263
01:07:12,900 --> 01:07:17,900
saying that the fact that programmers of today have like JavaScript

1264
01:07:17,900 --> 01:07:19,800
and these sorts of things and they start on them, that they'll be

1265
01:07:19,800 --> 01:07:20,700
lousy programmers.

1266
01:07:21,500 --> 01:07:22,900
And that's totally not true.

1267
01:07:23,100 --> 01:07:26,300
And he said exactly what I think is the right thing, which is that

1268
01:07:26,300 --> 01:07:29,400
nobody started programming in c or like very few people did like

1269
01:07:29,400 --> 01:07:31,800
nobody starts by programming Assembly Language, that's very unusual.

1270
01:07:31,800 --> 01:07:35,300
Maybe in the old old old days, the old old

1271
01:07:35,500 --> 01:07:39,100
Old days, certainly not certainly before I was born, they would have

1272
01:07:39,100 --> 01:07:43,500
been right but all the rest of us, we all started in Easy language to

1273
01:07:43,500 --> 01:07:49,200
like we started in basic or like some kind of like logo would have

1274
01:07:49,200 --> 01:07:50,000
been another language.

1275
01:07:50,000 --> 01:07:53,800
We started everyone starts in an easier language usually I mean or at

1276
01:07:53,800 --> 01:07:54,700
least most of the time.

1277
01:07:56,900 --> 01:08:03,400
And so you should feel free to start programming in whatever language

1278
01:08:03,500 --> 01:08:04,600
you feel.

1279
01:08:04,800 --> 01:08:08,400
Is the one you enjoy programming in and will do.

1280
01:08:08,400 --> 01:08:10,500
Because the important thing about learning to program is doing it a

1281
01:08:10,500 --> 01:08:11,100
lot.

1282
01:08:11,200 --> 01:08:13,500
And so you want to start in a pregnant language that you get into

1283
01:08:13,500 --> 01:08:15,400
quickly and enjoy programming in.

1284
01:08:15,900 --> 01:08:18,899
And then when you're ready, you want to transition out of that

1285
01:08:18,899 --> 01:08:24,000
language into higher harder core language, if you want to be an engine

1286
01:08:24,000 --> 01:08:24,800
death, right?

1287
01:08:25,399 --> 01:08:29,200
Now the thing that I don't know if Sean was reacting to this or not,

1288
01:08:29,399 --> 01:08:31,300
but the part that I do think is true.

1289
01:08:31,300 --> 01:08:34,500
And that I've said multiple times that maybe, I don't know if maybe he

1290
01:08:34,500 --> 01:08:35,700
thinks about this differently.

1291
01:08:36,800 --> 01:08:38,800
The thing I do think is a problem nowadays.

1292
01:08:39,200 --> 01:08:43,700
Is that nowadays you don't really have to transition to a harder core

1293
01:08:43,700 --> 01:08:44,700
programming, language.

1294
01:08:44,800 --> 01:08:47,500
Meaning you could just keep programming in JavaScript and make kind of

1295
01:08:47,500 --> 01:08:50,200
janky slow programs but that you can still shift because they won't be

1296
01:08:50,200 --> 01:08:52,600
any worse than like what Google ships or something, right?

1297
01:08:52,600 --> 01:08:55,100
Because they ship like janky slow mail program on

1298
01:08:55,300 --> 01:08:56,700
JavaScript or whatever, right?

1299
01:08:57,100 --> 01:08:59,800
So you can go make a living now and you can go make a

1300
01:09:00,000 --> 01:09:03,800
Repetitive app in a number of domains without ever actually learning

1301
01:09:03,800 --> 01:09:09,100
to program any better than in something like JavaScript, you know what

1302
01:09:09,100 --> 01:09:09,500
I mean?

1303
01:09:10,300 --> 01:09:14,600
And that I think is bad because it means it takes away some of the

1304
01:09:14,600 --> 01:09:19,700
incentive for people to go learn more harder, core programming, and

1305
01:09:19,700 --> 01:09:25,000
unfortunately, machines and programming has not been abstracted to the

1306
01:09:25,000 --> 01:09:28,800
point yet where you can actually do that and not produce crappy

1307
01:09:28,800 --> 01:09:29,800
programs, right?

1308
01:09:30,000 --> 01:09:30,300
Right.

1309
01:09:30,500 --> 01:09:33,000
And so, that is a part that I'm very worried about.

1310
01:09:33,000 --> 01:09:35,700
Not the entry-level part, the entry-level part, you should use

1311
01:09:35,700 --> 01:09:39,000
whatever you want, any language you want, but you will start

1312
01:09:39,000 --> 01:09:41,200
programming in is a good language to start with.

1313
01:09:41,600 --> 01:09:44,500
But what you want to do eventually, is if you're going to be serious

1314
01:09:44,500 --> 01:09:48,200
about programming, you want to move past that into a language that has

1315
01:09:48,200 --> 01:09:50,200
low-level control like see does.

1316
01:09:51,800 --> 01:09:56,100
Where you're thinking about actual memory that has real pointers and

1317
01:09:56,100 --> 01:09:58,200
that sort of thing you want to get there.

1318
01:09:58,700 --> 01:10:00,400
And I do worry that.

1319
01:10:00,400 --> 01:10:04,600
Now, there's less push for people to get there and people may stay

1320
01:10:04,600 --> 01:10:07,700
with languages that don't have that like, Java or anything, you know,

1321
01:10:07,700 --> 01:10:10,100
those sorts of things which I don't, I don't think that's good.

1322
01:10:10,800 --> 01:10:14,200
I don't think we're at the point in Computing, history, where you can

1323
01:10:14,200 --> 01:10:20,000
be that sloppy and someday we might get there, you know, someday we

1324
01:10:20,000 --> 01:10:20,800
might get to the point where

1325
01:10:21,000 --> 01:10:24,600
Higher level languages are so good that you'd ever have to think about

1326
01:10:24,600 --> 01:10:27,600
these sorts of things again because we like, boiled it all down and

1327
01:10:27,600 --> 01:10:31,400
it's perfect or something or like we invent some crazy.

1328
01:10:31,400 --> 01:10:35,300
New super fast computers that are like thousands and thousands of

1329
01:10:35,300 --> 01:10:39,300
times faster than what we have today and so maybe it doesn't matter

1330
01:10:39,600 --> 01:10:40,600
but I don't know.

1331
01:10:41,300 --> 01:10:43,000
So that's just a clear that up.

1332
01:10:43,200 --> 01:10:45,100
Hopefully, that's a pretty complete answer to that.

1333
01:10:46,900 --> 01:10:47,500
Question.

1334
01:10:54,500 --> 01:10:55,300
Long billion is there?

1335
01:10:55,300 --> 01:10:57,800
Anything that can be done to help make it easier to hover?

1336
01:10:57,800 --> 01:10:58,700
Click on the debuggers?

1337
01:10:58,700 --> 01:11:00,100
Listen, are you talking about the profiler?

1338
01:11:00,200 --> 01:11:01,100
If so then yes.

1339
01:11:01,300 --> 01:11:04,700
What I want to do with that and we have this before, I just don't

1340
01:11:04,700 --> 01:11:08,200
remember to be honest with you, I don't really remember how it worked

1341
01:11:09,200 --> 01:11:11,100
but we just have to have a pause.

1342
01:11:11,700 --> 01:11:15,700
So that's all I was going to do but I don't remember.

1343
01:11:17,700 --> 01:11:22,500
It's this debug State, pause thing, but I just don't know if I think,

1344
01:11:22,500 --> 01:11:24,800
maybe we just don't have any way to pause right now.

1345
01:11:25,000 --> 01:11:28,700
So all we need is something that sets, debug pause to true and then it

1346
01:11:28,700 --> 01:11:33,700
will stop collating new timing information, and whoo, it won't be

1347
01:11:33,900 --> 01:11:34,100
right?

1348
01:11:34,100 --> 01:11:37,500
We can just so when we're like, what's going on, we can hit pause will

1349
01:11:37,500 --> 01:11:39,100
be able to scroll through the different frames.

1350
01:11:39,100 --> 01:11:41,600
Find the one we look here about in Hover trivially, so.

1351
01:11:41,600 --> 01:11:43,100
So I think we've got that covered out.

1352
01:11:43,100 --> 01:11:44,700
I don't think we're going to have too much trouble with that.

1353
01:11:46,300 --> 01:11:47,600
Like I said, we kind of already did that.

1354
01:11:47,600 --> 01:11:49,300
We just have to re-enable it.

1355
01:11:57,000 --> 01:11:59,200
Um, let's see.

1356
01:12:08,100 --> 01:12:11,300
In sohbat, is knocking it out of the park, by the way, today.

1357
01:12:13,200 --> 01:12:16,500
Ginger Bill are all the textures transferred every frame.

1358
01:12:17,100 --> 01:12:21,900
No the only textures that are transferred are ones that are freshly

1359
01:12:21,900 --> 01:12:23,100
loaded off disk.

1360
01:12:27,500 --> 01:12:28,200
That makes sense.

1361
01:12:30,100 --> 01:12:35,000
So it, in fact, I can I can show you the I'm assuming you're asking.

1362
01:12:35,900 --> 01:12:40,200
I'm assuming you're not asking if opengl conceptually transfers them

1363
01:12:40,200 --> 01:12:42,500
all every frame, obviously that's not true.

1364
01:12:43,200 --> 01:12:46,900
But if you're asking, if we do them every frame, you can see our

1365
01:12:46,900 --> 01:12:49,800
opengl render Loop here which is very, very simple.

1366
01:12:51,200 --> 01:12:55,900
And what happens is it just does a bind texture and binds the texture

1367
01:12:55,900 --> 01:12:59,500
handle for the bitmap that it that is in memory.

1368
01:13:00,600 --> 01:13:07,400
and what we do is in the asset system when we load a texture,

1369
01:13:09,200 --> 01:13:12,800
You can see here, that anytime we're done loading, a texture off.

1370
01:13:12,800 --> 01:13:16,100
Disk, we immediately asked the platform layer to download it.

1371
01:13:16,300 --> 01:13:18,400
So that's all happening on a background thread.

1372
01:13:18,800 --> 01:13:20,700
And once it's down there, it's down there.

1373
01:13:22,800 --> 01:13:32,100
So that's actually why now like if we run this so you know, like the

1374
01:13:32,100 --> 01:13:36,300
cutscene for example, there's a ton of texture data there is like, you

1375
01:13:36,300 --> 01:13:40,000
know, each one of these seeing some of them have you know, five six,

1376
01:13:40,000 --> 01:13:42,500
seven 1080p bitmaps.

1377
01:13:42,500 --> 01:13:43,500
That would have to get transferred.

1378
01:13:43,500 --> 01:13:46,400
There was a stutter there when we first implemented it and we did

1379
01:13:46,400 --> 01:13:50,500
download all the textures on the first frame of the cutscene

1380
01:13:51,600 --> 01:13:53,500
Now, we do that in the background.

1381
01:13:53,500 --> 01:14:01,100
And so we've got relatively smooth, I believe at this point switches,

1382
01:14:01,100 --> 01:14:02,700
I don't see any hitches anymore.

1383
01:14:03,200 --> 01:14:08,000
So right, right now actually, like, as we're moving through this

1384
01:14:08,000 --> 01:14:12,000
cutscene, it's looking ahead and going, oh, we need these other

1385
01:14:12,000 --> 01:14:15,000
textures, they're getting loaded it off the disk and downloaded while

1386
01:14:15,000 --> 01:14:17,200
we're watching this part of the cutscene, right?

1387
01:14:17,600 --> 01:14:20,200
So it's all sort of streamed in as it goes.

1388
01:14:21,000 --> 01:14:22,400
Which is cool, which is pretty cool.

1389
01:14:25,800 --> 01:14:26,200
Right.

1390
01:14:41,100 --> 01:14:44,300
In the debug view, I will we be able to click on a frame and have it

1391
01:14:44,300 --> 01:14:45,400
blit that frame?

1392
01:14:45,900 --> 01:14:49,300
Definitely not because in order to do that, we would have to read back

1393
01:14:49,300 --> 01:14:54,800
the frame from the frame buffer, every frame and save it which were

1394
01:14:54,800 --> 01:14:55,900
definitely not going to do.

1395
01:14:57,000 --> 01:14:59,700
That's basically like writing our own OBS recorder.

1396
01:15:01,100 --> 01:15:05,500
which while an interesting exercise is really not appropriate for him

1397
01:15:05,500 --> 01:15:06,400
a hero because

1398
01:15:08,500 --> 01:15:10,600
I mean, do we really need it?

1399
01:15:42,300 --> 01:15:47,300
Could you explain in what consists the dynamic resolution.

1400
01:15:51,600 --> 01:15:55,900
Text to rescale viewport rescale at the moment we don't really handle

1401
01:15:55,900 --> 01:15:58,500
a dynamic, resolution much.

1402
01:15:59,400 --> 01:16:03,800
All we just are always at the moment rendering at 1080P and putting

1403
01:16:03,800 --> 01:16:06,900
the screen so that's you know.

1404
01:16:09,000 --> 01:16:12,800
That's just something that we will look at a little bit more when

1405
01:16:12,800 --> 01:16:14,000
we're closer to shipping.

1406
01:16:16,700 --> 01:16:18,800
Dude, in basement one, are we going to have it auto?

1407
01:16:18,800 --> 01:16:20,200
Pause on Long frames?

1408
01:16:21,500 --> 01:16:25,800
No, I don't think so, we'll probably have some things with it's easier

1409
01:16:25,800 --> 01:16:26,500
for us to see that.

1410
01:16:26,500 --> 01:16:30,700
There was a long frame, but I don't think will Auto pause maybe Auto

1411
01:16:30,700 --> 01:16:32,200
jump to a long frame.

1412
01:16:39,400 --> 01:16:40,300
Hardware to row.

1413
01:16:40,300 --> 01:16:42,000
What about checking for memory leaks?

1414
01:16:42,700 --> 01:16:46,300
Yeah, we can I probably will do some of that.

1415
01:16:46,300 --> 01:16:51,000
I don't know how soon we would do it because I'll be honest, I don't

1416
01:16:51,000 --> 01:16:54,100
think we've got a lot of memory leak potential in this game.

1417
01:16:54,900 --> 01:17:01,000
So while we do want to do some for final checking it ain't it ain't

1418
01:17:01,000 --> 01:17:03,000
really that big a deal, right?

1419
01:17:04,600 --> 01:17:08,500
So I don't know that memory leaks is going to be a huge problem for

1420
01:17:08,600 --> 01:17:12,300
Us in other contexts maybe it would be in this context.

1421
01:17:12,300 --> 01:17:14,800
I don't think it's really going to be huge, so we probably will do a

1422
01:17:14,800 --> 01:17:15,400
little bit of that.

1423
01:17:15,400 --> 01:17:16,500
But at the moment,

1424
01:17:20,000 --> 01:17:21,900
I don't think it's going to be super relevant.

1425
01:17:22,700 --> 01:17:24,900
It's not high on my list, but do that way.

1426
01:17:38,400 --> 01:17:42,600
At what at which point should you make the transition from a more

1427
01:17:42,600 --> 01:17:44,600
basic language like JavaScript over to a language?

1428
01:17:44,600 --> 01:17:50,800
Like C I would say once you have gotten to the point,

1429
01:17:54,000 --> 01:17:57,200
like, I would say, once you've gotten to the point where you

1430
01:17:57,200 --> 01:17:59,800
understand how to

1431
01:18:00,000 --> 01:18:03,000
G in Java Script like,

1432
01:18:04,500 --> 01:18:05,900
And you're not confused by it.

1433
01:18:05,900 --> 01:18:09,700
So like, you know, you understand if statements and while loops and

1434
01:18:09,700 --> 01:18:13,100
how to make a structure, like a thing with some structured data in it,

1435
01:18:13,400 --> 01:18:15,700
you know, once you can like, I can write a program in JavaScript.

1436
01:18:15,700 --> 01:18:17,100
I understand how it works.

1437
01:18:17,100 --> 01:18:20,100
I can, you know, step through it and like Chrome's thing or whatever

1438
01:18:20,100 --> 01:18:21,500
and I see what it's doing.

1439
01:18:21,500 --> 01:18:22,600
I'm not confused about it.

1440
01:18:22,900 --> 01:18:27,800
Once you're at that point, then I would say can probably move to see.

1441
01:18:29,100 --> 01:18:30,700
But you want to kind of like

1442
01:18:31,600 --> 01:18:34,700
because, you know, this see has

1443
01:18:38,500 --> 01:18:42,200
once you move into the realm of controlling everything yourself, you

1444
01:18:42,200 --> 01:18:43,400
just have a lot more things.

1445
01:18:43,400 --> 01:18:46,100
You have to keep in your head and you have to understand how your

1446
01:18:46,100 --> 01:18:48,700
memory is laid out, and how you're using it, and how it works.

1447
01:18:48,700 --> 01:18:51,000
You know, how all that stuff comes together.

1448
01:18:52,300 --> 01:18:56,500
And so, you know, the idea behind starting with this a language like

1449
01:18:56,500 --> 01:19:00,400
JavaScript or, you know, something, whatever else, basic, you know,

1450
01:19:00,400 --> 01:19:04,600
doesn't matter, something.

1451
01:19:04,700 --> 01:19:08,100
Whatever that simple language is the idea with starting with those

1452
01:19:08,300 --> 01:19:13,300
In four languages is to let you practice on a subset of what

1453
01:19:13,300 --> 01:19:14,400
programming is, right?

1454
01:19:14,400 --> 01:19:18,500
It's like if you've never programmed before, you don't know how an if

1455
01:19:18,500 --> 01:19:21,700
statement works, you don't know what an else Clause is or why you

1456
01:19:21,700 --> 01:19:22,300
would care.

1457
01:19:22,500 --> 01:19:25,800
You don't know what a function is, you know, what a return value is,

1458
01:19:25,800 --> 01:19:30,500
right, and learning what, all those things are, and how to use them,

1459
01:19:30,500 --> 01:19:33,700
more importantly, so that they become a, you know, sort of more

1460
01:19:33,700 --> 01:19:37,700
natural to you to think through here is the problem I want to solve

1461
01:19:37,800 --> 01:19:38,100
how do

1462
01:19:38,200 --> 01:19:41,100
Do I use all those constructs to solve that problem?

1463
01:19:42,200 --> 01:19:45,600
It's just, it's helps to start in a language where you're not thinking

1464
01:19:45,600 --> 01:19:49,100
about memory and you're not thinking about how do I interface with

1465
01:19:49,100 --> 01:19:52,100
Windows or you're not thinking about, like, all the things that we do.

1466
01:19:52,100 --> 01:19:56,400
Think about on handmade hero, removing those from the problem allows

1467
01:19:56,400 --> 01:19:58,800
you, it's like putting training wheels on a bicycle, right?

1468
01:19:58,800 --> 01:20:05,500
It's letting you get part of the things done and used to it so that

1469
01:20:05,500 --> 01:20:07,100
your brain is ready with that.

1470
01:20:07,100 --> 01:20:10,900
So that when you take the training wheels off, instead of it being

1471
01:20:10,900 --> 01:20:12,200
like having to learn everything,

1472
01:20:12,300 --> 01:20:15,200
It once you can just learn now that new part, right?

1473
01:20:15,200 --> 01:20:20,500
Which is like the direct memory control and you know, sort of the the

1474
01:20:20,600 --> 01:20:25,200
more the more nuanced stuff that you have to understand when you're

1475
01:20:25,200 --> 01:20:26,100
programming in c.

1476
01:20:26,900 --> 01:20:30,600
And so I think it for everybody's going to be different, but that's

1477
01:20:30,600 --> 01:20:31,700
what you're looking to do.

1478
01:20:31,800 --> 01:20:37,600
So once you sort of get familiar with the basics of programming, then

1479
01:20:37,600 --> 01:20:39,600
you can move on to a different language.

1480
01:20:39,900 --> 01:20:42,100
You certainly don't have to go an expert in JavaScript.

1481
01:20:42,200 --> 01:20:44,100
And because, who cares, right?

1482
01:20:44,600 --> 01:20:47,300
So you don't need to go learn a ton about JavaScript specifically

1483
01:20:47,300 --> 01:20:48,400
because it doesn't matter.

1484
01:20:49,200 --> 01:20:52,000
You just want to practice those Basics the programming, fundamentals,

1485
01:20:52,200 --> 01:20:54,400
because they're the same in every language, right?

1486
01:20:55,100 --> 01:20:59,900
and off you go now, JavaScript does have one annoying thing which

1487
01:21:00,000 --> 01:21:01,700
That it's dynamically typed.

1488
01:21:02,400 --> 01:21:06,400
And so one problem with starting with with JavaScript is that it won't

1489
01:21:06,400 --> 01:21:08,000
help you catch those errors.

1490
01:21:08,400 --> 01:21:11,700
You know, one of the nice things about sees you say something is an

1491
01:21:11,700 --> 01:21:15,400
integer if you then try to use it as a string, you get a compiler

1492
01:21:15,400 --> 01:21:18,800
error, write in JavaScript, it just sort of works, and it does the

1493
01:21:18,800 --> 01:21:22,200
wrong thing in your program as a bug, or not sure why, right?

1494
01:21:22,600 --> 01:21:29,400
And so, you know, there's probably a real good language for learning

1495
01:21:29,400 --> 01:21:29,800
programming.

1496
01:21:30,000 --> 01:21:34,000
And and it's probably not JavaScript, but I don't know if it what it

1497
01:21:34,000 --> 01:21:37,300
is or if it's even has been really made yet.

1498
01:21:37,300 --> 01:21:38,500
But you know

1499
01:21:43,400 --> 01:21:44,500
That's that's that.

1500
01:21:45,700 --> 01:21:47,600
Alright I think I'm going to go have dinner now.

1501
01:21:48,500 --> 01:21:50,300
Let's see if there's any other two cones.

1502
01:21:55,400 --> 01:21:56,000
Dude, and basement.

1503
01:21:56,000 --> 01:21:58,700
Sorry have a Fail-Safe to see when we stutter to pause this.

1504
01:21:58,700 --> 01:22:02,000
Amanda Beckett, unfortunately, you can't really do it that way, right?

1505
01:22:02,200 --> 01:22:08,000
Because it's too late after you have have the stutter to debug the

1506
01:22:08,000 --> 01:22:10,900
code because the state has moved past there.

1507
01:22:11,300 --> 01:22:13,900
So all you can do is look at your debug out.

1508
01:22:14,000 --> 01:22:17,000
Look at your debug streams.

1509
01:22:17,400 --> 01:22:20,500
And that since we record forever, we don't have to pause immediately.

1510
01:22:20,500 --> 01:22:23,700
If we see a stutter we can just like pause if we if that's what we

1511
01:22:23,700 --> 01:22:24,300
want to do right now.

1512
01:22:24,800 --> 01:22:27,600
We can pause and then scroll back to it, right?

1513
01:22:28,200 --> 01:22:31,200
So we'll be able to do that as necessary but I don't think we want to

1514
01:22:31,200 --> 01:22:33,700
it to automatically happen because then it'll keep happening when

1515
01:22:33,700 --> 01:22:36,200
we're in the middle of something and that's not where we're trying to

1516
01:22:36,200 --> 01:22:37,700
look at or whatever, right?

1517
01:22:38,400 --> 01:22:39,500
But you can't run for it.

1518
01:22:39,500 --> 01:22:42,000
Unless you do a whole bunch of other stuff.

1519
01:22:42,000 --> 01:22:44,100
I don't even remotely want to go into right now.

1520
01:22:44,400 --> 01:22:47,600
You can't jump back and debug the stuttered frame.

1521
01:22:50,100 --> 01:22:50,500
So,

1522
01:23:05,700 --> 01:23:06,300
all right.

1523
01:23:08,700 --> 01:23:09,500
All right.

1524
01:23:15,300 --> 01:23:20,900
Let's close this and minimize.

1525
01:23:22,500 --> 01:23:25,000
Thank you everyone for joining me, for another episode of handmade

1526
01:23:25,000 --> 01:23:25,200
hero.

1527
01:23:25,200 --> 01:23:26,500
It's been a pleasure coding with you.

1528
01:23:26,500 --> 01:23:31,100
As always, if you would like to follow along at home, you can always

1529
01:23:31,100 --> 01:23:33,700
pre-order the game on handmade here at or get comes with the source

1530
01:23:33,700 --> 01:23:37,300
code so you can play around with it yourself and learn from it.

1531
01:23:38,100 --> 01:23:39,200
We also have a forum site.

1532
01:23:39,200 --> 01:23:41,000
You can go to ask questions a patreon page.

1533
01:23:41,000 --> 01:23:41,500
You can go to.

1534
01:23:41,500 --> 01:23:44,600
If you want to subscribe to support the video series and a tweet bot

1535
01:23:44,800 --> 01:23:46,500
that tweets the schedule at you.

1536
01:23:47,000 --> 01:23:51,500
So you can catch the stream live and it will be live next week again,

1537
01:23:51,800 --> 01:23:52,200
check the

1538
01:23:52,200 --> 01:23:52,500
Tweet.

1539
01:23:52,500 --> 01:23:55,600
But over the weekend for what the schedule will be because I don't

1540
01:23:55,600 --> 01:23:56,900
know exactly what it will be next week.

1541
01:23:56,900 --> 01:23:59,300
Just yet, I usually try to post it Monday morning.

1542
01:23:59,300 --> 01:23:59,800
So everyone

1543
01:24:00,100 --> 01:24:01,700
It was what the schedule will be for the week.

1544
01:24:03,200 --> 01:24:08,200
We also of course are using a new editor on stream written by Alan

1545
01:24:08,200 --> 01:24:10,000
Webster from the handmade hero chat.

1546
01:24:10,000 --> 01:24:11,300
In fact mr.

1547
01:24:11,300 --> 01:24:15,300
Fourth dimension if you type for a coder into Google, you will have

1548
01:24:15,300 --> 01:24:18,400
the top hit as this patreon page.

1549
01:24:20,700 --> 01:24:23,400
If you want to use the editor that we're now using on handmade hero

1550
01:24:23,400 --> 01:24:26,000
and help fund its development.

1551
01:24:26,000 --> 01:24:29,800
You can subscribe to his patreon page and I think

1552
01:24:30,000 --> 01:24:34,500
It's the five dollar level gets you, the extensible version of it

1553
01:24:34,900 --> 01:24:38,100
every month which he updates quite frequently despite being still in

1554
01:24:38,100 --> 01:24:39,300
school which is pretty awesome.

1555
01:24:39,800 --> 01:24:45,300
And it every every time if you're a handmade hero, if you have the

1556
01:24:45,300 --> 01:24:49,500
handmade hero source code as well in the Mist directory, I keep my for

1557
01:24:49,500 --> 01:24:52,600
code or customization file for a quarter Casey, so you can use my

1558
01:24:52,600 --> 01:24:55,700
customizations and look at how it got my other set up if you want to.

1559
01:24:56,600 --> 01:24:59,400
So check that out, that's about it.

1560
01:24:59,500 --> 01:24:59,900
Have a

1561
01:25:00,000 --> 01:25:03,700
Good weekend, programming everyone and I'll see you on the internet.

1562
01:25:04,100 --> 01:25:04,800
Take it easy.

