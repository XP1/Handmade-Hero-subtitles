1
00:00:00,300 --> 00:00:01,200
Start recording.

2
00:00:01,800 --> 00:00:03,500
Hello everyone and welcome to handmade hero.

3
00:00:03,500 --> 00:00:03,700
Sir.

4
00:00:03,700 --> 00:00:07,100
We could a complete game live on Twitch.

5
00:00:07,500 --> 00:00:11,400
Now we are at the precipice.

6
00:00:11,800 --> 00:00:17,900
We are about to likes or off the precipice of having some good profile

7
00:00:17,900 --> 00:00:21,100
inspection code so we can see where our time is being spent, I'm

8
00:00:21,100 --> 00:00:26,600
fairly excited about it, we just barely got things working yesterday

9
00:00:26,600 --> 00:00:29,800
stream but we had some bugs and we didn't have time to really look

10
00:00:29,800 --> 00:00:30,000
into it.

11
00:00:30,500 --> 00:00:33,000
At the end of last last night's dream.

12
00:00:33,500 --> 00:00:37,800
So today I think will be the day that we finally get to see this

13
00:00:37,800 --> 00:00:37,900
stuff.

14
00:00:37,900 --> 00:00:39,300
Sort of come to fruition a little bit.

15
00:00:40,000 --> 00:00:44,000
And we get to start working on some new stuff that I think will be a

16
00:00:44,000 --> 00:00:47,200
lot of fun like putting in some interface stuff so that we can quickly

17
00:00:47,200 --> 00:00:51,200
navigate around and like drill down on the / stuff and that's going to

18
00:00:51,200 --> 00:00:51,600
be kind of fun.

19
00:00:51,600 --> 00:00:55,400
That's sort of a new thing break from the actual debug data

20
00:00:55,400 --> 00:00:58,500
collection, now that that's working properly.

21
00:00:59,000 --> 00:01:00,100
So if we go ahead

22
00:01:00,200 --> 00:01:01,900
Ed and get started on that.

23
00:01:01,900 --> 00:01:03,900
I think there's not much to say about it.

24
00:01:03,900 --> 00:01:07,800
It's just us to bugging our stuff from yesterday today, is they 186?

25
00:01:07,800 --> 00:01:13,500
So if you unpacked a 185 source code into directory, that's what I'm

26
00:01:13,500 --> 00:01:13,900
starting with.

27
00:01:13,900 --> 00:01:17,400
So if you're, if you preorder the game, I had met here at org, that's

28
00:01:17,400 --> 00:01:19,100
the source code that you want to work with now.

29
00:01:19,300 --> 00:01:22,500
If I remember correctly, we sort of had some stuff drawing but it

30
00:01:22,500 --> 00:01:23,500
wasn't correct.

31
00:01:23,600 --> 00:01:26,900
So there was some, we knew there was some kind of problem with what we

32
00:01:26,900 --> 00:01:29,200
had written but we didn't have any time to really

33
00:01:30,200 --> 00:01:31,300
What was actually going on?

34
00:01:31,300 --> 00:01:34,000
Like it was definitely not correct, but we weren't sure what was

35
00:01:34,200 --> 00:01:35,000
incorrect about it.

36
00:01:35,000 --> 00:01:38,300
And so like, for example on here you can kind of see, we've got sort

37
00:01:38,300 --> 00:01:41,800
of the something that kind of starts to look like a correct series of

38
00:01:41,800 --> 00:01:44,400
things, but then it rapidly Scrolls off.

39
00:01:44,400 --> 00:01:47,800
And then we have, you know, essentially these should be all frames

40
00:01:47,800 --> 00:01:48,700
that are being displayed in here.

41
00:01:48,700 --> 00:01:52,900
Essentially, we've got just one, it looks like frame at the beginning

42
00:01:53,100 --> 00:01:54,200
and then nothing else.

43
00:01:54,600 --> 00:01:58,200
So, to me, that suggests that we've just got a bug in how we're

44
00:01:58,200 --> 00:02:00,000
getting things into frames or something like this.

45
00:02:00,200 --> 00:02:04,100
This and so that instead of having a full screens worth of frames were

46
00:02:04,100 --> 00:02:07,600
not properly accounting for that and we're getting just like one

47
00:02:07,600 --> 00:02:10,600
bucket with nothing in it or some weird situation is happening.

48
00:02:11,200 --> 00:02:14,200
So we need to kind of dive in and figure out what's going on there.

49
00:02:14,200 --> 00:02:18,100
So we can, we can figure out what's going wrong and solve it, right?

50
00:02:19,100 --> 00:02:24,100
So let's go ahead and take a look at what we've got and and see what

51
00:02:24,100 --> 00:02:24,900
the problem is.

52
00:02:25,400 --> 00:02:28,700
So, let's just take a minute to refresh our memories, what's going on

53
00:02:28,700 --> 00:02:30,100
here, and I'm

54
00:02:30,200 --> 00:02:31,900
And I sort of take a look into the code.

55
00:02:32,200 --> 00:02:37,700
So the way that we have things structured is we, you know, we maintain

56
00:02:37,700 --> 00:02:39,900
sort of a little collation thing here.

57
00:02:40,300 --> 00:02:50,200
Every frame we come through and we create a new sort of memory

58
00:02:50,200 --> 00:02:55,700
scratchpad and we build up this information which is a a set of

59
00:02:55,700 --> 00:02:56,300
frames.

60
00:02:57,500 --> 00:02:59,800
That have in them up here.

61
00:03:00,000 --> 00:03:04,100
Right with having them sort of the beginning and ending clock for that

62
00:03:04,100 --> 00:03:04,600
frame.

63
00:03:05,300 --> 00:03:09,500
And then a series of regions and the regions are essentially time

64
00:03:09,500 --> 00:03:12,000
spans where something was happening.

65
00:03:13,900 --> 00:03:17,100
So that's all we're trying to accomplish right now and we sort of

66
00:03:17,100 --> 00:03:21,400
started to see that happening on the screen, but we should be seeing a

67
00:03:21,400 --> 00:03:25,700
full screens worth of reach of frames with little colored regions and

68
00:03:25,700 --> 00:03:26,600
we're not seeing that.

69
00:03:27,400 --> 00:03:29,800
So the first question I have, you know, is is

70
00:03:30,000 --> 00:03:32,100
is the debug frame stuff happening properly.

71
00:03:32,100 --> 00:03:34,200
Are we actually seeing those debug frames?

72
00:03:34,900 --> 00:03:36,500
Get getting built up properly.

73
00:03:37,000 --> 00:03:40,500
And so what I'd like to do is take a look at that and find out what's

74
00:03:40,500 --> 00:03:41,200
happening in there.

75
00:03:42,900 --> 00:03:46,000
So there's a couple different things that I think could be happening

76
00:03:46,000 --> 00:03:47,700
in there one way or the other.

77
00:03:48,400 --> 00:03:53,700
So, the first thing that I was thinking is, well, you know, we have

78
00:03:53,700 --> 00:03:59,400
potentially more debug frames, then we have event arrays, like I don't

79
00:03:59,400 --> 00:03:59,800
actually know.

80
00:04:00,000 --> 00:04:01,900
All that stuff is shaking out the moment.

81
00:04:02,600 --> 00:04:06,500
So I'd like to do something where I just look at what the frame count

82
00:04:06,500 --> 00:04:07,200
actually is.

83
00:04:07,500 --> 00:04:10,100
So I want to just, you know, what, how many frames is it?

84
00:04:10,100 --> 00:04:11,100
Think it got?

85
00:04:11,700 --> 00:04:14,700
So, I'm going to just let this thing run a bit.

86
00:04:14,800 --> 00:04:15,900
You can even see.

87
00:04:16,800 --> 00:04:20,100
It's kind of, like, does this weird thing when it starts up or its

88
00:04:20,100 --> 00:04:22,200
kind of sitting there, right?

89
00:04:22,600 --> 00:04:25,500
And like these frames are not getting pushed off.

90
00:04:26,200 --> 00:04:28,900
So these are like a presumably, the initial frames and then it looks

91
00:04:28,900 --> 00:04:33,800
like once we hit a certain number, they start to scroll by right.

92
00:04:34,000 --> 00:04:37,100
So it seems like the frames are kind of moving backwards way of their

93
00:04:37,100 --> 00:04:37,400
expect.

94
00:04:37,400 --> 00:04:42,200
So the weird part is that nothing seems to be moving in from the left

95
00:04:42,200 --> 00:04:43,100
and from the right.

96
00:04:43,100 --> 00:04:45,500
We should be seeing frames of data and instead we're just getting

97
00:04:45,500 --> 00:04:47,800
nothing, it doesn't really make any sense.

98
00:04:48,000 --> 00:04:50,200
And furthermore I don't know what that's doing there because how is

99
00:04:50,200 --> 00:04:50,600
that thing?

100
00:04:50,600 --> 00:04:53,700
Varying when we don't see those frames coming at and moving this way.

101
00:04:54,600 --> 00:04:55,800
So I want to kind of start to

102
00:04:56,100 --> 00:04:59,100
Can see, first of all, how many frames do we think we have and some

103
00:04:59,100 --> 00:04:59,800
stuff like this?

104
00:04:59,800 --> 00:05:04,100
I just want to get a feeling for what might be going wrong there.

105
00:05:05,900 --> 00:05:08,300
Okay, so here we go.

106
00:05:08,700 --> 00:05:14,300
Let's go ahead and and just stop basically right after that that

107
00:05:14,300 --> 00:05:15,800
collation has happened.

108
00:05:15,900 --> 00:05:19,300
I'm going to take a look at the debug State and here we go.

109
00:05:19,700 --> 00:05:24,100
So we sit we think we have 63 frames and that seems

110
00:05:26,800 --> 00:05:28,300
Like pretty much exactly the number.

111
00:05:29,800 --> 00:05:34,100
I would have expected to see and if we take a look at those frames,

112
00:05:35,100 --> 00:05:37,800
Well we can see you're kind of right off the bat with the problem is

113
00:05:37,800 --> 00:05:43,800
we're really not getting any regions in there and I feel like that's

114
00:05:43,800 --> 00:05:47,800
probably no matter what the case I don't feel like there should

115
00:05:47,800 --> 00:05:51,600
probably only be two regions that seems really unusual.

116
00:05:51,600 --> 00:05:52,400
And here we go.

117
00:05:52,400 --> 00:05:54,900
We got two regions in one and then zeros in the rest.

118
00:05:54,900 --> 00:05:59,800
So it seems pretty clear that we just have a pretty fundamental basic

119
00:06:00,000 --> 00:06:02,600
In there because that just doesn't make any sense.

120
00:06:02,600 --> 00:06:04,500
There's no way that could actually be what's happening.

121
00:06:04,500 --> 00:06:06,900
I don't think with the data were collating.

122
00:06:07,500 --> 00:06:09,100
So I'm going to go ahead and take a look.

123
00:06:09,100 --> 00:06:12,800
We probably just have some kind of a basic problem with the way that

124
00:06:12,800 --> 00:06:13,400
we're collating.

125
00:06:13,400 --> 00:06:17,600
That's you know, Lille to yielding this problem.

126
00:06:19,200 --> 00:06:24,800
So when we come through here, we are making sort of an array of frames

127
00:06:24,800 --> 00:06:27,600
to store our frames and we're saying that we're just going to make

128
00:06:27,600 --> 00:06:29,900
enough that we know that we won't overflow it.

129
00:06:30,700 --> 00:06:34,700
We initialize all of our scale stuff and we decided not to play with

130
00:06:34,700 --> 00:06:35,600
frame bar scale yet.

131
00:06:35,600 --> 00:06:38,200
So we're just kind of setting that of the constant value so that won't

132
00:06:38,200 --> 00:06:41,500
change as the as the graph progresses.

133
00:06:42,300 --> 00:06:48,100
So then we come through our events and every time I guess, we go

134
00:06:48,100 --> 00:06:48,900
through our

135
00:06:49,100 --> 00:06:53,200
Ventura, you know, I should probably pre warm this up so that we're,

136
00:06:53,200 --> 00:06:54,800
at the point where it's buggy, right?

137
00:06:54,800 --> 00:06:57,200
Because we're getting some actual data here.

138
00:06:57,300 --> 00:07:00,100
So that's actually looks kind of valid at the moment.

139
00:07:00,100 --> 00:07:02,500
So let's let's let it kind of scroll off.

140
00:07:03,000 --> 00:07:07,100
So that now that we know we're in a just known, totally bad position.

141
00:07:07,700 --> 00:07:10,100
Now, let's kind of come through and see what happens there.

142
00:07:10,700 --> 00:07:15,500
So, our Global debug table contains all of the data for the debugging,

143
00:07:15,500 --> 00:07:15,800
right?

144
00:07:15,800 --> 00:07:18,900
It contains all of the events that have been stored

145
00:07:19,000 --> 00:07:19,300
Up.

146
00:07:20,000 --> 00:07:24,200
So, if I take a look at the event count array, that is all of the

147
00:07:24,200 --> 00:07:26,300
events that are happening here.

148
00:07:27,100 --> 00:07:28,800
And you can see what the counts are.

149
00:07:29,000 --> 00:07:30,300
The counts are massive.

150
00:07:30,300 --> 00:07:35,900
There's there's plenty of events in there, so it seems unlikely that

151
00:07:35,900 --> 00:07:39,700
we aren't getting at least a few top-level events everywhere.

152
00:07:40,300 --> 00:07:44,900
And so looking at that it's like, okay it doesn't look like the

153
00:07:44,900 --> 00:07:48,400
problem is that like we're not recording in any events because it

154
00:07:48,400 --> 00:07:48,900
looks like

155
00:07:49,100 --> 00:07:52,200
Definitely recording a ton of events, so that's fine.

156
00:07:53,500 --> 00:07:56,600
So, if we grab out some of these events, here we can take a look at

157
00:07:56,600 --> 00:07:57,400
how they're working.

158
00:07:58,300 --> 00:08:00,000
We get frame marker.

159
00:08:01,700 --> 00:08:03,000
as the very first thing,

160
00:08:06,400 --> 00:08:07,100
That seems fine.

161
00:08:08,900 --> 00:08:12,000
So we're going to assign a current frame to that.

162
00:08:12,300 --> 00:08:13,100
And here it is.

163
00:08:13,500 --> 00:08:16,600
We're then going to assign sort of like the clocks to it.

164
00:08:16,600 --> 00:08:17,400
There's the beginning clock.

165
00:08:17,400 --> 00:08:20,700
The end clock hasn't been recorded yet the region cast going to be 0

166
00:08:20,700 --> 00:08:24,100
and it's going to have some kind of a nominal region count there.

167
00:08:25,500 --> 00:08:27,200
now, we come through and we look

168
00:08:29,500 --> 00:08:30,600
We are on frame 0.

169
00:08:31,200 --> 00:08:34,299
We take a look at what the thread is that we're currently on.

170
00:08:34,700 --> 00:08:36,900
That's thread 54 08.

171
00:08:36,900 --> 00:08:37,799
That's the ID.

172
00:08:38,500 --> 00:08:42,200
And what we should see in the debug state is now, there should be one

173
00:08:42,200 --> 00:08:43,700
thread in the table of threads.

174
00:08:43,700 --> 00:08:46,600
There it is, it's assigned Elaine index, which is what we want.

175
00:08:46,700 --> 00:08:47,600
It remembers the ID.

176
00:08:47,600 --> 00:08:50,900
It has no open block at the moment because that's exactly what we

177
00:08:50,900 --> 00:08:51,900
would expect.

178
00:08:52,200 --> 00:08:52,800
We take a look.

179
00:08:52,800 --> 00:08:53,700
It's a begin block.

180
00:08:53,700 --> 00:08:57,200
That's what we would think because you know it's the start of the

181
00:08:57,200 --> 00:08:57,700
frame.

182
00:08:58,300 --> 00:08:59,200
We're going to open up that

183
00:08:59,300 --> 00:08:59,900
Block.

184
00:09:00,200 --> 00:09:02,100
And of course, there isn't anything on the free store.

185
00:09:02,100 --> 00:09:03,000
Because why would there be?

186
00:09:03,000 --> 00:09:04,600
We have an allocated anything yet.

187
00:09:04,700 --> 00:09:06,800
So we go ahead and allocate a new debug block.

188
00:09:06,800 --> 00:09:12,600
We put which frame it's on here we take the opening event there and

189
00:09:14,400 --> 00:09:15,300
And record it.

190
00:09:15,300 --> 00:09:16,000
It's this one.

191
00:09:16,100 --> 00:09:17,100
It's causing us to happen.

192
00:09:17,700 --> 00:09:21,000
We remember what the parent block was, and then we set, which, of

193
00:09:21,000 --> 00:09:21,700
course, is nothing.

194
00:09:21,700 --> 00:09:24,200
Yet, we set it to be us from now on.

195
00:09:24,200 --> 00:09:28,600
So anyone underneath us is going to be inside this block and then we,

196
00:09:28,700 --> 00:09:30,000
you know, continue on.

197
00:09:30,800 --> 00:09:35,100
And so now anyone under here, oh well, there's the end block.

198
00:09:35,100 --> 00:09:37,500
So it looks like there was no timings inside that block.

199
00:09:38,100 --> 00:09:43,100
In fact, you know, I wonder if we could even see if we could actually

200
00:09:43,100 --> 00:09:43,900
see in there.

201
00:09:44,200 --> 00:09:45,700
What the actual?

202
00:09:46,300 --> 00:09:47,300
Well I guess we don't have a way.

203
00:09:47,300 --> 00:09:48,300
I should have checked up here.

204
00:09:48,400 --> 00:09:51,700
We could we could have seen who, which block was being opened.

205
00:09:51,700 --> 00:09:53,100
But anyway, no big deal.

206
00:09:53,900 --> 00:09:55,300
So we come through here and we say.

207
00:09:55,300 --> 00:09:58,700
All right, we have a matching beginning and block that was.

208
00:09:58,700 --> 00:10:03,100
What this does is ensures that that were matching when it matches we

209
00:10:03,100 --> 00:10:04,300
see whether it's on the same frame.

210
00:10:04,300 --> 00:10:09,400
It was we see whether or not the open block had a parent because we're

211
00:10:09,400 --> 00:10:13,000
just taking the top level ones and we find that it did not.

212
00:10:13,500 --> 00:10:14,000
So we just say

213
00:10:14,200 --> 00:10:14,200
A.

214
00:10:14,200 --> 00:10:18,300
Okay, let's record that into the current Lane for this thread and

215
00:10:18,300 --> 00:10:21,400
using the sort of the clock base that we would expect.

216
00:10:21,400 --> 00:10:24,500
So there's that begin clock of the frame.

217
00:10:24,700 --> 00:10:28,700
We're just going to remember the timing of this relative to that begin

218
00:10:28,700 --> 00:10:29,000
clock.

219
00:10:29,000 --> 00:10:32,200
So we do that there and we say okay we're good to go.

220
00:10:33,100 --> 00:10:36,200
Alright, so at that point now what we want to do is we want to mark

221
00:10:36,200 --> 00:10:37,800
this block as being free.

222
00:10:38,600 --> 00:10:43,100
So we go ahead and we dump it onto the the free list.

223
00:10:47,800 --> 00:10:48,800
Is this, wait a minute.

224
00:10:48,800 --> 00:10:49,700
What's going on here?

225
00:10:51,100 --> 00:10:56,700
First open block next, free equals, debug State, first free.

226
00:10:56,700 --> 00:10:59,600
Block, first open block.

227
00:11:00,000 --> 00:11:00,800
Oh, that's just.

228
00:11:00,800 --> 00:11:03,600
Because this is the thing, I probably should have used matching block

229
00:11:04,100 --> 00:11:04,600
there.

230
00:11:05,200 --> 00:11:06,600
That's a little, that's a little

231
00:11:08,000 --> 00:11:08,600
Odd to look at.

232
00:11:08,600 --> 00:11:12,400
But anyway, so we take whatever, the current free list is, we stick it

233
00:11:12,400 --> 00:11:16,600
on to us, we then set whatever the free list head pointer is and we

234
00:11:16,600 --> 00:11:17,800
set it pointing to us.

235
00:11:18,300 --> 00:11:21,900
We then make sure that we move one up the parent.

236
00:11:21,900 --> 00:11:26,000
So it should set the first open block for the thread to be equal to 0,

237
00:11:26,200 --> 00:11:28,800
which it does and then we continue.

238
00:11:29,600 --> 00:11:32,500
So now we're going to see, presumably another begin block.

239
00:11:32,900 --> 00:11:33,600
There it is.

240
00:11:35,200 --> 00:11:38,900
And of course, this debug block already has a.

241
00:11:40,300 --> 00:11:41,500
There's already something on the free store.

242
00:11:41,500 --> 00:11:45,100
So we just use the one that we'd already allocated, we set all of its

243
00:11:45,100 --> 00:11:45,800
values.

244
00:11:45,900 --> 00:11:51,400
So those all now get set properly, as far as I can tell, and let's

245
00:11:51,400 --> 00:11:55,000
just double check that, I guess, do we have a good?

246
00:11:55,500 --> 00:11:59,300
Have a good, debug block view here, you brought block

247
00:12:00,400 --> 00:12:01,600
Smoothest a little bit.

248
00:12:02,700 --> 00:12:06,400
So there it is set up so we set the parent equal to the parent, should

249
00:12:06,400 --> 00:12:10,700
be, we cleared the next free and we set the two values to what they

250
00:12:10,700 --> 00:12:11,000
should be.

251
00:12:11,000 --> 00:12:12,700
So that's all good as well.

252
00:12:13,500 --> 00:12:16,300
We can take a look at what opening event this is as well.

253
00:12:16,500 --> 00:12:18,300
The The Source should be in here.

254
00:12:18,300 --> 00:12:19,500
Do we ever grab the source?

255
00:12:19,500 --> 00:12:21,300
We never grab the source unfortunately.

256
00:12:22,000 --> 00:12:23,600
Oh well well here it is.

257
00:12:26,600 --> 00:12:27,900
So this is input processing.

258
00:12:29,100 --> 00:12:31,400
So again, exactly what we would think we would see.

259
00:12:32,200 --> 00:12:33,100
So there we go.

260
00:12:35,400 --> 00:12:37,700
Here we are for the end block for input processing.

261
00:12:38,100 --> 00:12:42,500
And again, it works pretty much exactly as I would have expected it to

262
00:12:43,500 --> 00:12:44,100
write.

263
00:12:44,400 --> 00:12:48,400
And I don't again, I'm not seeing any, I'm not seeing any real

264
00:12:48,400 --> 00:12:49,400
problems yet.

265
00:12:49,800 --> 00:12:51,000
I'm not seeing anything.

266
00:12:51,000 --> 00:12:53,800
Particularly odd Happening Here.

267
00:12:54,900 --> 00:12:55,900
It looks pretty good.

268
00:12:56,200 --> 00:12:57,700
So now let's see what happens.

269
00:12:59,700 --> 00:13:02,400
When we get to something, I assume were going to get to the game first

270
00:13:02,400 --> 00:13:03,300
that has children.

271
00:13:04,000 --> 00:13:06,400
So let's see, game update.

272
00:13:06,500 --> 00:13:08,500
So now this is going to have a bunch of children.

273
00:13:08,500 --> 00:13:11,600
So this is the first time we're going to see a bunch of children here.

274
00:13:11,800 --> 00:13:15,900
We create the open block and now we're going to probably see another

275
00:13:16,000 --> 00:13:18,500
begin block right for the first time we're seeing that.

276
00:13:19,200 --> 00:13:21,500
So what I'm going to do here is I'm just going to set a breakpoint for

277
00:13:21,500 --> 00:13:25,100
the next time that we hit an end block and I'm also going to make sure

278
00:13:25,100 --> 00:13:28,900
we don't see something like a frame marker before then just to make

279
00:13:28,900 --> 00:13:29,100
sure

280
00:13:29,300 --> 00:13:32,100
Things, you know, relatively kosher there.

281
00:13:33,100 --> 00:13:34,000
So there we go.

282
00:13:34,600 --> 00:13:38,800
We're hitting an end of block and presumably, that's going to line up,

283
00:13:39,000 --> 00:13:39,300
right?

284
00:13:39,300 --> 00:13:43,600
And it's going to remove it, it does and so that's fine.

285
00:13:50,600 --> 00:13:52,200
We then come back around.

286
00:13:58,500 --> 00:14:02,200
And now I'm going to check to see when the next time we hit.

287
00:14:02,200 --> 00:14:06,000
One of these is right so the next time we close something that we're

288
00:14:06,000 --> 00:14:09,700
actually going to record and again I'm going to I'm going to just set

289
00:14:09,700 --> 00:14:13,400
a breakpoint to make sure up there that that we okay.

290
00:14:14,300 --> 00:14:14,900
So

291
00:14:16,800 --> 00:14:21,400
It looks like we have something bogus happening in terms of our block

292
00:14:21,400 --> 00:14:24,300
pairing or something like this, right?

293
00:14:25,100 --> 00:14:30,300
Because we should not have been able to get to the new frame without

294
00:14:30,300 --> 00:14:32,900
having closed the game update.

295
00:14:35,200 --> 00:14:37,600
The game update block.

296
00:14:38,900 --> 00:14:40,800
Let me see win32 handmade.

297
00:14:42,500 --> 00:14:47,800
because if you take a look at Hoops game update,

298
00:14:50,300 --> 00:14:55,700
Well, big game timer block.

299
00:14:57,800 --> 00:14:58,900
Can block.

300
00:15:00,300 --> 00:15:00,700
Okay.

301
00:15:00,900 --> 00:15:02,900
Ken Block in for processing.

302
00:15:05,300 --> 00:15:07,500
Let's take a look at en Bloc, so we saw that one.

303
00:15:08,000 --> 00:15:09,800
We've got begin block game update.

304
00:15:10,400 --> 00:15:12,800
So then we've got en Bloc game update.

305
00:15:13,400 --> 00:15:18,800
So we should have hit this and that should have closed out at the top

306
00:15:18,800 --> 00:15:19,300
level.

307
00:15:19,800 --> 00:15:22,100
It didn't, right?

308
00:15:22,800 --> 00:15:24,400
We did not see that happen.

309
00:15:26,100 --> 00:15:31,000
And so, what I'd like to do is I'd like to figure out some way of

310
00:15:31,000 --> 00:15:38,000
stopping us at the point where that happened and so trying to think of

311
00:15:38,000 --> 00:15:40,300
the best way to do that.

312
00:15:41,200 --> 00:15:46,300
So inside the debug code, like I want to see what happened on that

313
00:15:46,300 --> 00:15:50,000
frame where you know when we get to this what is the circumstance that

314
00:15:50,000 --> 00:15:51,900
causes this to fail?

315
00:16:03,200 --> 00:16:08,500
so, in order to do that inside here somewhere, when we, when we look

316
00:16:08,500 --> 00:16:09,300
at this stuff,

317
00:16:11,300 --> 00:16:16,200
I mean, one thing I could do right is I could I could complain here

318
00:16:16,200 --> 00:16:17,700
about it I suppose.

319
00:16:18,500 --> 00:16:20,000
Do we have any blocks?

320
00:16:23,500 --> 00:16:25,500
I guess other threads we do.

321
00:16:25,500 --> 00:16:26,600
So it's hard to say.

322
00:16:29,400 --> 00:16:31,100
Traffic and how I want to approach this?

323
00:16:32,500 --> 00:16:35,300
So On Any Given thread.

324
00:16:37,800 --> 00:16:40,400
We're always looking at the first open, block, on the thread, so we

325
00:16:40,400 --> 00:16:43,200
know that they closed in open and closed in order.

326
00:16:48,200 --> 00:16:48,700
Mmm.

327
00:16:50,600 --> 00:16:54,000
So I guess what I'd like to do is come in here and say well,

328
00:16:55,300 --> 00:17:01,200
When we get to the end block event, I would like to know for this guy

329
00:17:01,200 --> 00:17:04,700
here, I would like to know if it's this one, if it's, this particular,

330
00:17:04,700 --> 00:17:08,800
end block event and so I know that the that game update will appear as

331
00:17:08,800 --> 00:17:10,900
a string, right?

332
00:17:11,200 --> 00:17:14,900
So what I could do is I could just just full-on, do some kind of a

333
00:17:14,900 --> 00:17:19,700
string compare here where I just say if the source block name and this

334
00:17:19,700 --> 00:17:23,200
equals zero, then that's the one I'm looking for, right?

335
00:17:24,800 --> 00:17:28,099
Something like this which is just again, totally random.

336
00:17:28,300 --> 00:17:29,900
I could just straight up do that.

337
00:17:30,000 --> 00:17:31,700
Now, we haven't written a string compare.

338
00:17:33,300 --> 00:17:35,700
We could use the one in C runtime library but they're so easy.

339
00:17:35,700 --> 00:17:38,400
We might as well just write one ourselves again.

340
00:17:38,400 --> 00:17:43,400
I don't know really, we don't have a utility function area yet but we

341
00:17:43,400 --> 00:17:47,600
can just throw one in here there that simple, you know, it would be

342
00:17:47,600 --> 00:17:48,400
something trivial.

343
00:17:48,400 --> 00:17:51,600
Like, I just want, I want some way.

344
00:17:52,800 --> 00:17:55,800
Of returning, you know, assigned difference value.

345
00:17:56,000 --> 00:17:57,800
That's going to be positive or negative.

346
00:17:57,800 --> 00:17:59,800
In fact, I guess I could even just do a Boolean one.

347
00:18:00,000 --> 00:18:02,600
Now, so two strings are equal.

348
00:18:05,000 --> 00:18:08,400
And just have a and I assume we haven't are done that things are

349
00:18:08,400 --> 00:18:08,800
equal.

350
00:18:09,200 --> 00:18:10,000
Maybe we have

351
00:18:13,400 --> 00:18:15,100
We already did it, nevermind.

352
00:18:16,800 --> 00:18:18,000
Never mind.

353
00:18:19,200 --> 00:18:20,200
Strings are equal.

354
00:18:20,200 --> 00:18:21,500
And if are not found, oh

355
00:18:22,600 --> 00:18:25,700
Ha ha it was finding the one that I already wrote.

356
00:18:25,700 --> 00:18:26,000
Okay.

357
00:18:26,000 --> 00:18:27,000
So we didn't do it.

358
00:18:27,200 --> 00:18:27,800
So, here we go.

359
00:18:27,800 --> 00:18:30,200
We pass, we passed two things to our strings are equal.

360
00:18:30,200 --> 00:18:33,500
We just want to know if these two things are the same or not and we're

361
00:18:33,500 --> 00:18:36,900
going to return a value that's like true or false based on whether or

362
00:18:36,900 --> 00:18:38,600
not they match, right?

363
00:18:39,500 --> 00:18:43,900
So all I really need to do here is just do something like, you know,

364
00:18:44,400 --> 00:18:50,100
why let a equal, you know, well star a plus plus equals star B plus

365
00:18:50,100 --> 00:18:51,300
plus or something like this.

366
00:18:53,300 --> 00:18:58,200
And we don't want to kind of go over so we probably want to do while

367
00:18:58,200 --> 00:19:03,300
star a and star B and I and maybe I won't do that in here just to make

368
00:19:03,300 --> 00:19:03,900
it a little clearer.

369
00:19:03,900 --> 00:19:04,700
What's going on?

370
00:19:05,100 --> 00:19:06,800
I'll put it inside, right?

371
00:19:08,800 --> 00:19:13,700
So while everything is valid and the two things are equal, we can

372
00:19:13,700 --> 00:19:19,000
advance one letter, you know, just a really very stupid string

373
00:19:19,000 --> 00:19:19,300
compare.

374
00:19:19,300 --> 00:19:22,300
So while we're not at the null Terminator of a, we're not at the null

375
00:19:22,300 --> 00:19:28,700
Terminator of b and a equals B for the characters, whatever, the 22

376
00:19:28,700 --> 00:19:34,400
will advance them by one character and then if at any time, these guys

377
00:19:34,400 --> 00:19:38,400
are not equal to each other, it would stop the loop, the criteria for

378
00:19:39,300 --> 00:19:42,200
Whether or not they were equal at the end should be that they both hit

379
00:19:42,200 --> 00:19:44,300
their null Terminator, you know.

380
00:19:44,300 --> 00:19:50,200
So the result is just going to be that star a equals star be you know

381
00:19:50,200 --> 00:19:54,100
and star equals zero which is like you know, or I could you could

382
00:19:54,100 --> 00:19:55,300
alternatively think if this way

383
00:19:56,500 --> 00:20:00,200
If both of them are now pointing to null, then we've reached the end

384
00:20:00,200 --> 00:20:07,000
of the string if they aren't then, you know, then we know there was a

385
00:20:07,000 --> 00:20:07,700
difference.

386
00:20:09,700 --> 00:20:11,500
So now I've got a string compare.

387
00:20:13,100 --> 00:20:14,100
And I can do this.

388
00:20:15,600 --> 00:20:19,200
So if strings are equal to, then we'll stop and I'll just put a thing

389
00:20:19,200 --> 00:20:21,600
in here so I can set a breakpoint on it.

390
00:20:23,300 --> 00:20:28,500
All right, so if we are to run it again,

391
00:20:30,400 --> 00:20:31,000
off we go.

392
00:20:36,500 --> 00:20:37,200
There we are.

393
00:20:38,000 --> 00:20:42,700
And so as we sort of move, move forward, oh,

394
00:20:46,500 --> 00:20:47,900
Well, that's particularly odd.

395
00:20:52,400 --> 00:20:53,400
Access violation.

396
00:20:53,400 --> 00:20:54,700
Writing location, zero.

397
00:20:56,100 --> 00:20:59,800
So we out, we had more.

398
00:21:00,100 --> 00:21:02,200
In that one than we normally do.

399
00:21:03,900 --> 00:21:06,200
Which is a little weird.

400
00:21:06,700 --> 00:21:14,400
I wonder why it doesn't really matter I suppose for now, but it's

401
00:21:14,400 --> 00:21:16,000
weird that that didn't happen in previous runs.

402
00:21:16,000 --> 00:21:18,300
You think we'd have roughly the same number or debug events.

403
00:21:18,700 --> 00:21:21,300
So that was a little odd to say the least, but

404
00:21:22,500 --> 00:21:23,100
No, big deal.

405
00:21:24,300 --> 00:21:26,700
Not what I want to look at at the moment, say the least.

406
00:21:30,000 --> 00:21:33,500
Okay, so this is kind of settled down to its bogus state.

407
00:21:33,900 --> 00:21:37,900
So now, I want to kind of look at what is the reason why that this

408
00:21:37,900 --> 00:21:40,100
game update never actually gets cleared.

409
00:21:40,300 --> 00:21:43,400
So, this first time through we should be looking at the open block and

410
00:21:43,600 --> 00:21:44,000
oh,

411
00:21:47,600 --> 00:21:48,100
Oh wait, no.

412
00:21:48,100 --> 00:21:49,500
Sorry that's the the end block.

413
00:21:49,500 --> 00:21:50,000
Never mind.

414
00:21:50,800 --> 00:21:52,100
Well let's try that one more time.

415
00:21:52,600 --> 00:21:55,000
Alright so here we are on the end block for game.

416
00:21:55,000 --> 00:21:55,700
Update.

417
00:21:56,100 --> 00:21:57,100
Come through here.

418
00:21:57,100 --> 00:21:58,300
What's in the thread?

419
00:21:58,800 --> 00:22:00,100
Let's let's find out.

420
00:22:02,700 --> 00:22:05,400
And so our thread, first open block, there it is.

421
00:22:05,800 --> 00:22:07,100
So that's valid.

422
00:22:07,300 --> 00:22:12,700
We then take a look at the stuff here, what the opening event was, and

423
00:22:12,700 --> 00:22:16,900
let's take a look at these guys, so we've got the opening event.

424
00:22:20,000 --> 00:22:21,800
And we've got our event.

425
00:22:23,800 --> 00:22:26,400
Okay, so they're both on the same thread, which is what we expect

426
00:22:26,400 --> 00:22:29,800
because that's I mean how things are being recorded and then we have a

427
00:22:29,800 --> 00:22:31,900
deed of record index that does not match.

428
00:22:32,100 --> 00:22:36,000
In fact, a translation unit does not match either so these are two

429
00:22:36,000 --> 00:22:38,900
totally different events here.

430
00:22:40,300 --> 00:22:47,300
So I'm not sure how that's actually happening that's that's obviously

431
00:22:47,300 --> 00:22:48,200
what the problem is.

432
00:22:48,700 --> 00:22:52,200
So if we take a look at debug,

433
00:22:55,200 --> 00:22:56,100
For our thread.

434
00:22:56,600 --> 00:23:00,400
If we take a look at our first open block, how far up, does it go,

435
00:23:00,800 --> 00:23:01,400
right?

436
00:23:01,600 --> 00:23:07,300
It's got one parent to parents, three parents for parents.

437
00:23:07,700 --> 00:23:10,400
So it's super deep, right?

438
00:23:10,500 --> 00:23:11,200
Look at this.

439
00:23:14,800 --> 00:23:16,800
That's crazy how deep down it goes.

440
00:23:17,200 --> 00:23:18,500
It feels to me.

441
00:23:18,700 --> 00:23:22,600
Like there's like an unclosed block, right?

442
00:23:22,700 --> 00:23:27,900
It feels like it feels like something in there isn't closed properly.

443
00:23:38,200 --> 00:23:40,700
And I'm not sure.

444
00:23:42,800 --> 00:23:43,000
Yeah.

445
00:23:43,000 --> 00:23:45,600
Why that would be but I mean, look at this.

446
00:23:48,400 --> 00:23:50,200
Look at how many there are here, right?

447
00:23:51,400 --> 00:23:54,600
So I feel like the easiest thing to do would be to just look at what

448
00:23:54,600 --> 00:23:57,200
are these opening events that are never getting closed.

449
00:23:58,000 --> 00:23:59,400
And in fact, if you look,

450
00:24:00,700 --> 00:24:04,400
These these opening events are all the same event, they're all the

451
00:24:04,400 --> 00:24:05,200
zero.

452
00:24:05,500 --> 00:24:06,800
They're all the zero event.

453
00:24:08,000 --> 00:24:12,000
So there's just so there's some I think we just have a bug in the in

454
00:24:12,000 --> 00:24:13,600
the record recording.

455
00:24:14,300 --> 00:24:14,900
Right.

456
00:24:15,500 --> 00:24:20,700
That's causing that to get pushed on there in Translation unit 0, the

457
00:24:20,700 --> 00:24:25,400
first debug record index and so I guess, what I'll do is I'll just

458
00:24:25,400 --> 00:24:27,500
say, well, which one was that?

459
00:24:28,100 --> 00:24:33,800
You know, if I take a look at Global debug table, I should be able to

460
00:24:34,000 --> 00:24:35,600
look at this records here.

461
00:24:38,100 --> 00:24:43,300
Global, debug table records 00.

462
00:24:43,900 --> 00:24:51,800
Should tell me I would think who that was Global debug table era.

463
00:24:54,000 --> 00:24:54,700
and,

464
00:24:56,300 --> 00:24:57,300
So let's see.

465
00:24:57,800 --> 00:24:59,200
This is who it was.

466
00:25:01,000 --> 00:25:02,100
Is it?

467
00:25:03,300 --> 00:25:10,700
Is handmade render group dot CPP, it's draw a rectangle line number

468
00:25:10,700 --> 00:25:11,700
39.

469
00:25:14,200 --> 00:25:15,700
So let's take a look.

470
00:25:20,000 --> 00:25:25,100
So our time function does not seem to be closing itself.

471
00:25:26,100 --> 00:25:30,200
So maybe we just when we did our sort of our courting of this stuff

472
00:25:30,900 --> 00:25:32,700
maybe we just didn't do it right.

473
00:25:33,700 --> 00:25:37,700
Maybe end block with this counter is somehow not doing what it should

474
00:25:37,700 --> 00:25:38,300
be doing.

475
00:25:38,900 --> 00:25:39,300
I don't know.

476
00:25:45,300 --> 00:25:46,900
Because that should be pretty straightforward.

477
00:25:48,000 --> 00:25:53,300
So let's see time to underscore function is going to call timed Block,

478
00:25:53,500 --> 00:25:56,500
it's going to call it with these parameters, right?

479
00:25:56,500 --> 00:25:59,800
And we know that that's working because we saw those values in there.

480
00:26:00,300 --> 00:26:01,800
So we know that this part is working.

481
00:26:03,300 --> 00:26:08,500
We know that we're hitting the begin block, and the begin block itself

482
00:26:09,000 --> 00:26:13,500
is I guess doing this, right?

483
00:26:13,900 --> 00:26:16,700
So, it's getting one of these debug records, it's filling out, the

484
00:26:16,700 --> 00:26:18,900
founding which we know is happening properly, then it's doing a

485
00:26:18,900 --> 00:26:22,000
record, debug event of the counter.

486
00:26:24,200 --> 00:26:29,400
Whichever counter were on and where it's using the begin block tag.

487
00:26:30,400 --> 00:26:32,900
So we then do an end block with the counter, and that's doing a

488
00:26:32,900 --> 00:26:36,900
record, debug event of the counter and the debug event and block.

489
00:26:38,200 --> 00:26:41,500
And so that feels like that should be correct.

490
00:26:44,400 --> 00:26:51,800
I don't see why we would having a problem there because here is where

491
00:26:51,800 --> 00:26:57,300
we you know, we store that counter and it right into this integer we

492
00:26:57,300 --> 00:26:59,800
use it in both places passing it.

493
00:27:00,000 --> 00:27:01,600
Through the macro.

494
00:27:03,500 --> 00:27:05,500
So it seems like that should be fine.

495
00:27:06,100 --> 00:27:10,500
I guess what I'd like to do is, is just take a look at draw rectangle.

496
00:27:11,600 --> 00:27:13,200
So I can see what's going on.

497
00:27:15,700 --> 00:27:17,400
So here we are in draw a rectangle.

498
00:27:21,200 --> 00:27:23,100
And here we are in timed block.

499
00:27:24,700 --> 00:27:30,100
So, let's go ahead in their Global debug table.

500
00:27:33,800 --> 00:27:35,900
And let's see here.

501
00:27:38,700 --> 00:27:42,900
The counter is zero, which is what we'd expect begin Block.

502
00:27:43,200 --> 00:27:44,900
It's going into record, debug event.

503
00:27:45,700 --> 00:27:47,800
That is exactly what we'd expect to see.

504
00:27:48,800 --> 00:27:52,000
We're getting an event index out of the pool.

505
00:27:54,800 --> 00:28:01,000
We are oh and now week it time to block again but for probably

506
00:28:01,000 --> 00:28:02,000
somebody else.

507
00:28:02,200 --> 00:28:05,900
I would think all those draw a rectangle again.

508
00:28:08,100 --> 00:28:09,300
I'm not sure exactly what happened.

509
00:28:09,300 --> 00:28:11,100
There could be a different thread.

510
00:28:11,900 --> 00:28:12,600
I'm not sure.

511
00:28:15,700 --> 00:28:16,600
Let's find out.

512
00:28:20,500 --> 00:28:21,400
3780.

513
00:28:22,600 --> 00:28:24,400
Okay, so we get our core index.

514
00:28:25,300 --> 00:28:27,500
Here we come on counter counter in it.

515
00:28:28,900 --> 00:28:32,200
So again, I guess this is a different, a different one of them.

516
00:28:33,100 --> 00:28:37,600
There's a translation unit or that could actually just be jumping

517
00:28:37,600 --> 00:28:40,900
around because that may actually just be because this might be an

518
00:28:40,900 --> 00:28:42,600
optimized function here, I'm not sure.

519
00:28:43,800 --> 00:28:46,700
Anyway, I don't think we put it in the optimize section, though.

520
00:28:47,500 --> 00:28:49,200
So, alright, we got our translation units.

521
00:28:49,200 --> 00:28:50,600
We got everything recorded.

522
00:28:52,100 --> 00:28:53,000
And that's all good.

523
00:28:56,200 --> 00:28:57,400
And that feels correct.

524
00:28:57,800 --> 00:28:59,300
Nothing in there looked weird to me.

525
00:29:02,200 --> 00:29:02,900
Here we go.

526
00:29:06,400 --> 00:29:07,400
You did, we is this?

527
00:29:08,800 --> 00:29:11,600
How come this code appears to be optimized?

528
00:29:12,000 --> 00:29:13,300
Oh, you know what?

529
00:29:14,700 --> 00:29:15,300
Oh,

530
00:29:18,500 --> 00:29:23,700
You know, it probably is optimized because it's getting called from

531
00:29:23,700 --> 00:29:24,400
inside.

532
00:29:24,400 --> 00:29:26,500
Something that was compiled with optimizations on.

533
00:29:26,500 --> 00:29:29,500
I'm guessing or did we comply with optimizations on?

534
00:29:30,100 --> 00:29:32,300
We're not compiling with optimizations on, are we?

535
00:29:32,600 --> 00:29:33,500
Yeah, o.d.

536
00:29:34,200 --> 00:29:37,400
and is optimized and made optimize the CPP.

537
00:29:40,300 --> 00:29:42,700
It's only this one function, so I don't understand.

538
00:29:42,900 --> 00:29:45,700
Why does this appear to have been compiled with optimizations on?

539
00:29:45,700 --> 00:29:50,200
It's jumping all around, but it could just be, well, it could just be

540
00:29:50,200 --> 00:29:50,700
that.

541
00:29:52,500 --> 00:29:54,300
Yeah so it's just another thread.

542
00:29:54,600 --> 00:29:57,400
There's another thread that's in draw rectangle so that's all we're

543
00:29:57,400 --> 00:29:57,700
seeing.

544
00:29:57,700 --> 00:29:58,600
It's not jumping around.

545
00:29:58,600 --> 00:29:59,800
Is just multiple threads.

546
00:30:00,500 --> 00:30:01,200
So that's fine.

547
00:30:01,900 --> 00:30:05,000
Just want to make sure you can barely see that little guy on this

548
00:30:05,200 --> 00:30:05,700
monitor.

549
00:30:05,700 --> 00:30:07,600
But and as you can see that,

550
00:30:09,800 --> 00:30:10,900
You see that right there?

551
00:30:11,200 --> 00:30:16,800
That little thing, that's the little marker that says that the actual

552
00:30:16,800 --> 00:30:21,900
thread you're looking at switched when between steps

553
00:30:23,600 --> 00:30:26,300
So that's going to go ahead and do the fill, so I'm just going to go

554
00:30:26,300 --> 00:30:27,700
ahead and hop down here.

555
00:30:28,000 --> 00:30:32,000
I want to juggle check that I'm before the part, where things would be

556
00:30:32,000 --> 00:30:32,600
closed out.

557
00:30:32,600 --> 00:30:35,200
So you can see there's the call the ending call.

558
00:30:35,900 --> 00:30:37,500
So I'm going to let's hop down there.

559
00:30:44,500 --> 00:30:46,900
There we go, and step in here.

560
00:30:47,300 --> 00:30:47,700
Here we go.

561
00:30:47,700 --> 00:30:48,800
Into end block.

562
00:30:49,200 --> 00:30:51,900
So we come down recruiting 0.

563
00:30:59,200 --> 00:31:02,300
Thread ID is to 5508 but that's in the guy who doesn't?

564
00:31:02,300 --> 00:31:06,000
I don't know why it's hopping around quite so much 3780, so it is it's

565
00:31:06,000 --> 00:31:08,800
properly recording it and end event there, right?

566
00:31:10,200 --> 00:31:13,800
So I'm not sure what the problem is.

567
00:31:14,200 --> 00:31:15,300
It seems

568
00:31:16,800 --> 00:31:17,700
Like, it's fine.

569
00:31:18,800 --> 00:31:21,300
It seems like that should be fine to me.

570
00:31:22,500 --> 00:31:22,900
You know.

571
00:31:25,800 --> 00:31:29,300
We have multiple threads that are hitting that function.

572
00:31:30,500 --> 00:31:34,200
but I don't feel like that should be causing us a problem because

573
00:31:36,300 --> 00:31:40,600
We're expecting it may be our code for dealing with the multiple

574
00:31:40,600 --> 00:31:43,100
threads stuff is wrong.

575
00:31:48,500 --> 00:31:50,500
So I guess, let's take a quick look at that.

576
00:31:52,100 --> 00:31:52,700
And see.

577
00:31:54,500 --> 00:31:56,700
So what I'm going to do is I'm going to do the exact same thing.

578
00:31:56,700 --> 00:32:02,200
I just did only instead of looking at the end of block, I'm going to

579
00:32:02,200 --> 00:32:03,000
look at both.

580
00:32:04,000 --> 00:32:07,200
So, I'm gonna just go ahead and check any time.

581
00:32:09,200 --> 00:32:10,500
We have draw rectangle.

582
00:32:12,200 --> 00:32:15,100
I want to I want to know about it, right?

583
00:32:16,100 --> 00:32:19,300
So I you know I could actually just go ahead and do it here.

584
00:32:21,900 --> 00:32:29,300
So before we start pressing anything, I just I want to see when we get

585
00:32:29,300 --> 00:32:29,900
to that.

586
00:32:30,800 --> 00:32:31,200
Okay.

587
00:32:32,200 --> 00:32:33,900
So in the debug code,

588
00:32:39,200 --> 00:32:42,600
I'm going to set a breakpoint there, so I'm going to let this guy go

589
00:32:42,600 --> 00:32:46,100
for a little bit again, just to make sure that we're past any, like

590
00:32:46,100 --> 00:32:48,400
frames that may happen to work by luck.

591
00:32:48,600 --> 00:32:52,900
And that I know that we're into frames that are definitely busted, and

592
00:32:52,900 --> 00:32:55,500
then I'm going to go ahead and set the break point.

593
00:32:56,100 --> 00:32:59,700
So, here we go on the entry for this.

594
00:33:00,600 --> 00:33:01,500
The first entry.

595
00:33:05,300 --> 00:33:07,300
so, there is

596
00:33:13,700 --> 00:33:16,100
Amusingly draw a rectangle.

597
00:33:16,300 --> 00:33:20,000
The place that's probably being called mostly is in the debug code.

598
00:33:21,100 --> 00:33:26,200
So we're probably causing this bug by drawing rectangles in the debug

599
00:33:26,200 --> 00:33:27,000
code itself.

600
00:33:28,200 --> 00:33:29,300
Which is kind of hilarious.

601
00:33:29,800 --> 00:33:33,400
But anyway, so here we go.

602
00:33:34,800 --> 00:33:36,600
We have an opening one.

603
00:33:38,300 --> 00:33:41,300
So, we'll go ahead and take a look at that.

604
00:33:44,200 --> 00:33:48,600
so, there's four thread, 60/40 opened one

605
00:33:49,800 --> 00:33:51,500
and now thread 6040.

606
00:33:53,000 --> 00:33:55,600
Open one again or closed one.

607
00:34:02,200 --> 00:34:04,600
So this is just weird right thread.

608
00:34:04,600 --> 00:34:10,500
60/40 should not be able to open this many draw rectangles without

609
00:34:10,500 --> 00:34:11,400
closing them.

610
00:34:12,600 --> 00:34:15,400
Right, that's just should not be possible.

611
00:34:15,900 --> 00:34:17,900
That is not something that should be possible.

612
00:34:20,400 --> 00:34:23,699
Are we reading past the end of the array.

613
00:34:23,699 --> 00:34:27,900
Well, it's got a valid threat, ID set so I don't know.

614
00:34:30,199 --> 00:34:31,699
Contradicts is 32.

615
00:34:33,000 --> 00:34:34,000
Event count.

616
00:34:39,400 --> 00:34:41,100
Valid range plus 1.

617
00:34:41,600 --> 00:34:42,500
So that's fine.

618
00:34:43,699 --> 00:34:45,100
We're looping through those guys.

619
00:34:49,300 --> 00:34:49,800
Hmm.

620
00:34:54,500 --> 00:34:56,100
Hmm, I say.

621
00:35:05,200 --> 00:35:07,200
So I guess I'll try one more thing.

622
00:35:09,900 --> 00:35:13,700
Which is I will go ahead and set inside.

623
00:35:16,500 --> 00:35:19,300
Inside my render groups, I fear where we call that draw a rectangle

624
00:35:20,300 --> 00:35:21,600
here is where we're doing that.

625
00:35:22,300 --> 00:35:27,400
What I want to do is I want to look and see when we get here.

626
00:35:28,300 --> 00:35:30,200
I want to look at the global debug table.

627
00:35:31,200 --> 00:35:34,100
And I want to just get an opinion about where it's writing to and I

628
00:35:34,100 --> 00:35:34,900
want to look at it.

629
00:35:35,700 --> 00:35:36,200
So

630
00:35:37,400 --> 00:35:40,900
I want to see what we're actually writing to it.

631
00:35:40,900 --> 00:35:43,800
And when now that's controlled by this guy.

632
00:35:45,100 --> 00:35:47,700
And so the top is the event array index.

633
00:35:47,800 --> 00:35:51,700
So, if I shift this down by 32, I can see which it is.

634
00:35:51,700 --> 00:35:53,600
And of course, I guess, I want to wait again.

635
00:35:53,800 --> 00:35:57,600
I want to wait till we get to known bad behavior because these

636
00:35:57,600 --> 00:35:59,800
actually look kind of correct, right?

637
00:36:09,800 --> 00:36:12,700
So now let me go back there, set that break point.

638
00:36:13,000 --> 00:36:17,800
So here's our event array index, you know, and I'm going to do the

639
00:36:17,800 --> 00:36:18,600
same thing.

640
00:36:18,700 --> 00:36:19,100
Oops.

641
00:36:21,100 --> 00:36:22,600
I'm going to do the same thing to find out.

642
00:36:22,600 --> 00:36:31,900
What the event index is that we do in the actual code just so 27:22 is

643
00:36:32,000 --> 00:36:34,100
the code is that is location.

644
00:36:34,600 --> 00:36:39,400
So I'm going to look at Global debug table and I want to look at

645
00:36:39,400 --> 00:36:49,800
Global debug table, the events for array 8 and I want to see the 2762

646
00:36:49,800 --> 00:36:50,700
if of them

647
00:36:51,000 --> 00:36:54,700
Right, I guess I should do it probably like this.

648
00:37:00,600 --> 00:37:01,000
Okay.

649
00:37:02,300 --> 00:37:08,300
And I would like to see potentially more than just one of those but

650
00:37:08,300 --> 00:37:12,200
yeah and so if all so let's take a look at while we're at it.

651
00:37:12,200 --> 00:37:16,900
Let's just see what the global debug table event count is for array, 8

652
00:37:17,100 --> 00:37:18,100
at the moment.

653
00:37:20,600 --> 00:37:22,700
Yeah, so that's bogus the moment.

654
00:37:22,700 --> 00:37:27,000
That's okay because it gets set at the end so that's fine.

655
00:37:31,400 --> 00:37:33,400
We can double check if that actually works properly.

656
00:37:35,000 --> 00:37:41,100
I suppose a little bit later, but so if we take a look at this, we're

657
00:37:41,100 --> 00:37:42,700
about to write into this guy here.

658
00:37:43,500 --> 00:37:46,700
So there's us writing into it or trying to

659
00:37:49,000 --> 00:37:50,800
We wrote in 50 to 64.

660
00:37:50,800 --> 00:37:53,200
There's one there, I'm going to look, I want to look at a few more of

661
00:37:53,200 --> 00:37:53,400
these.

662
00:37:53,400 --> 00:37:56,900
Can I look at like 16 of these potentially?

663
00:37:58,800 --> 00:37:59,600
I guess not.

664
00:38:07,100 --> 00:38:07,700
There we go.

665
00:38:09,900 --> 00:38:12,200
So you can kind of see here is what we got.

666
00:38:12,300 --> 00:38:15,900
I'm going to keep looking through here at these guys.

667
00:38:19,800 --> 00:38:24,300
So you know, I mean if you just look at what's writing in there, I'm

668
00:38:24,300 --> 00:38:28,200
not seeing that pattern that we see when we actually go to collate.

669
00:38:28,200 --> 00:38:30,400
It there's 50 to 64.

670
00:38:31,600 --> 00:38:37,400
There are six 116, there is 1628, they're all different thread ideas

671
00:38:37,400 --> 00:38:38,500
that are coming through here.

672
00:38:39,700 --> 00:38:41,400
54 52.

673
00:38:42,300 --> 00:38:44,900
So where's the first one that there are six sixteen.

674
00:38:45,200 --> 00:38:47,600
So, we're the first time we see that again is here.

675
00:38:49,600 --> 00:38:50,800
So, let's see what happens here.

676
00:38:51,000 --> 00:38:53,100
So, six do 116, what are we on?

677
00:38:53,100 --> 00:38:58,300
We're on 2769, so 2769 and 62.

678
00:38:58,900 --> 00:38:59,800
So we have written

679
00:39:00,000 --> 00:39:03,700
They're so, but that does look.

680
00:39:05,100 --> 00:39:07,600
like we wrote to in without closing it,

681
00:39:08,600 --> 00:39:09,100
Yeah.

682
00:39:11,100 --> 00:39:14,100
So, I don't understand like how did that happen?

683
00:39:15,700 --> 00:39:17,200
How indeed?

684
00:39:18,800 --> 00:39:22,000
That that's pretty troubling to me because that means we're just

685
00:39:22,000 --> 00:39:23,400
writing bogus data in here.

686
00:39:23,500 --> 00:39:26,600
Like with, it's like the actual debug log is wrong.

687
00:39:28,200 --> 00:39:30,000
So, our collation routine isn't really wrong.

688
00:39:30,000 --> 00:39:34,900
This this routine is or who knows, which routine is actually writing

689
00:39:34,900 --> 00:39:39,100
the stuff out in properly and I don't know why.

690
00:39:39,800 --> 00:39:44,400
So, again, all we're doing is calling that end block here.

691
00:39:45,600 --> 00:39:47,900
So, I'm not sure how it's getting.

692
00:39:49,900 --> 00:39:50,900
How it's getting?

693
00:39:52,100 --> 00:39:54,100
Two opens without the clothes.

694
00:39:54,800 --> 00:39:56,900
It doesn't really make much sense.

695
00:39:58,600 --> 00:40:02,200
When we do record debug event, we're doing an atomic ad,

696
00:40:03,300 --> 00:40:07,100
And so, it feels like we should not have that problem.

697
00:40:07,100 --> 00:40:10,800
Now, I wonder if I guess there could be a thing where it's optimizing

698
00:40:10,800 --> 00:40:15,500
it or not reloading it, although the atomic ad is supposed to always

699
00:40:15,500 --> 00:40:16,400
treat it as

700
00:40:17,600 --> 00:40:18,700
As volatile.

701
00:40:19,000 --> 00:40:23,200
So that seems impossible basically because we're going through a known

702
00:40:23,700 --> 00:40:26,500
compiler path there, we have 20 minutes left on the clock so we

703
00:40:26,500 --> 00:40:29,300
actually have quite a bit past this.

704
00:40:31,300 --> 00:40:33,700
So this is a bit of a Puzzler, right?

705
00:40:34,500 --> 00:40:35,600
This is a bit odd.

706
00:40:36,800 --> 00:40:40,800
This is all looks relatively innocent in terms of how we're addressing

707
00:40:40,800 --> 00:40:41,500
this stuff.

708
00:40:45,200 --> 00:40:47,500
So I'll go, I'll go ahead and step in here, one more time.

709
00:40:47,500 --> 00:40:49,700
And see, see what else I can see.

710
00:40:50,300 --> 00:40:54,900
So, the first frames, it seemed like it worked more properly to right?

711
00:40:55,400 --> 00:40:56,600
So let's take a look here.

712
00:40:58,200 --> 00:40:59,900
Here are our

713
00:41:03,600 --> 00:41:04,000
Oops.

714
00:41:06,900 --> 00:41:08,000
Here are our values.

715
00:41:08,100 --> 00:41:14,300
So we're at array 0, our event index, that does not look like a proper

716
00:41:14,300 --> 00:41:15,300
event index.

717
00:41:15,300 --> 00:41:17,300
Does that look like a proper event index to you?

718
00:41:20,500 --> 00:41:24,100
That just looks totally bogus, maybe that's because by the time we got

719
00:41:24,100 --> 00:41:28,000
to draw a rectangle that actually was the case, but it does seem a bit

720
00:41:28,000 --> 00:41:28,400
odd.

721
00:41:28,700 --> 00:41:29,200
Right?

722
00:41:33,800 --> 00:41:35,100
Possible that a bit odd.

723
00:41:41,200 --> 00:41:42,900
I'm going to make sure that's correct as well.

724
00:41:44,100 --> 00:41:48,300
So, let's step in here, game update and render.

725
00:41:51,900 --> 00:41:55,600
all right, so when we step in here,

726
00:42:00,100 --> 00:42:01,500
Our Global debug table.

727
00:42:07,000 --> 00:42:10,300
Aventure re-index event index and event re-index event index.

728
00:42:10,300 --> 00:42:12,400
Here are both zero.

729
00:42:14,100 --> 00:42:15,400
That's what we would expect.

730
00:42:16,400 --> 00:42:19,500
I'm going to run through one more time to the second frame.

731
00:42:21,100 --> 00:42:22,400
And then I'm going to see what happens.

732
00:42:23,500 --> 00:42:29,900
So 6118 is the current amount that seems like it could be plausible,

733
00:42:29,900 --> 00:42:31,800
given that there are other threads that are running.

734
00:42:33,500 --> 00:42:34,900
And we're on a re-index one.

735
00:42:36,500 --> 00:42:40,000
That all seems relatively plausible, I can't believe it.

736
00:42:40,400 --> 00:42:44,100
So this Frame is not a known bad frame necessarily but I'm now I want

737
00:42:44,100 --> 00:42:44,500
to see.

738
00:42:44,500 --> 00:42:46,900
I'm just going to go in here and take a look at this time function.

739
00:42:47,100 --> 00:42:48,800
I want to see what actually happens here.

740
00:42:49,400 --> 00:42:53,200
So inside the time function, I'm going to watch what it writes.

741
00:42:53,500 --> 00:42:58,200
I'm just going to use again this ability to sort of view what it ends

742
00:42:58,200 --> 00:42:58,400
up.

743
00:42:58,400 --> 00:43:00,400
Writing out to the stream.

744
00:43:01,000 --> 00:43:01,900
So, here we go.

745
00:43:02,700 --> 00:43:03,200
so,

746
00:43:06,900 --> 00:43:09,400
we should see some rights here to this location.

747
00:43:10,000 --> 00:43:10,800
There we go.

748
00:43:12,200 --> 00:43:14,100
Wow, look at that.

749
00:43:15,300 --> 00:43:17,500
It's just it's just pure nonsense in here.

750
00:43:22,900 --> 00:43:25,500
Like here, you've got 164.

751
00:43:25,500 --> 00:43:27,900
Ending 164 ending again.

752
00:43:31,200 --> 00:43:33,000
Here's 164 ending again.

753
00:43:34,800 --> 00:43:35,500
Right?

754
00:43:35,500 --> 00:43:37,600
Because the values for those guys,

755
00:43:45,300 --> 00:43:46,900
Is 012.

756
00:43:47,000 --> 00:43:48,900
So a 2 means it was an end block.

757
00:43:50,500 --> 00:43:52,200
That's just full banana cakes.

758
00:43:52,700 --> 00:43:55,000
There's like no way that should be happening.

759
00:43:56,300 --> 00:43:58,300
So I'm not sure what to make of it.

760
00:44:00,900 --> 00:44:02,200
And I mean, look at all that.

761
00:44:03,200 --> 00:44:04,500
That's purely crazy.

762
00:44:04,700 --> 00:44:11,300
So I guess one thing is is our get thread, ID, function, busted, you

763
00:44:11,300 --> 00:44:14,100
know, like, did we did we Implement that wrong, right?

764
00:44:16,300 --> 00:44:19,800
Is this guy wrong and we could test that, right?

765
00:44:19,800 --> 00:44:24,300
We can try to figure out a way to test that since we would be.

766
00:44:25,900 --> 00:44:29,000
I mean, kind of think of what the easiest way to do that would be, we

767
00:44:29,000 --> 00:44:32,800
could probably try to do something here, where we used thread-local

768
00:44:32,800 --> 00:44:36,100
storage or something like this directly.

769
00:44:37,800 --> 00:44:41,900
I guess I don't really know we could do something like that, but you

770
00:44:41,900 --> 00:44:45,900
know, it's possible that this thing is just reading a bogus value out.

771
00:44:47,600 --> 00:44:51,700
And I'm not sure what else I could do, what else I could do to test

772
00:44:51,700 --> 00:44:57,400
that, we don't have the ability to call Windows directly in here in

773
00:44:57,400 --> 00:44:58,600
this part of the code.

774
00:44:58,800 --> 00:44:59,800
So there's no way for me to

775
00:45:00,000 --> 00:45:05,000
All actual get thread ID, I guess we could start linking with colonel

776
00:45:05,800 --> 00:45:06,800
in this dll.

777
00:45:11,800 --> 00:45:15,600
But like, I can't do this, you know, at the moment anyway.

778
00:45:17,300 --> 00:45:18,400
That's not a known thing.

779
00:45:21,300 --> 00:45:22,200
So, I don't know.

780
00:45:24,400 --> 00:45:28,600
On the other hand, those look like valid thread things and so I guess

781
00:45:28,600 --> 00:45:34,400
I could also, you know what, I could do to, I can test it where I do

782
00:45:34,400 --> 00:45:35,300
create thread.

783
00:45:37,800 --> 00:45:41,900
So here is create thread, create fed immediately calls.

784
00:45:44,400 --> 00:45:45,100
Red frock.

785
00:45:46,700 --> 00:45:47,600
With the new thread.

786
00:45:48,000 --> 00:45:51,100
What I can do here is I can say oh, give me the thread ID.

787
00:45:52,500 --> 00:45:52,900
You know.

788
00:45:56,200 --> 00:45:59,900
And then assert the test thread ID equals get current thread ID,

789
00:46:01,700 --> 00:46:02,300
right?

790
00:46:03,500 --> 00:46:09,100
So that I'm sure that windows and I are getting the same value when we

791
00:46:09,100 --> 00:46:10,400
do a thread ID test.

792
00:46:11,600 --> 00:46:14,100
We'll just try that, just to see.

793
00:46:15,000 --> 00:46:16,700
And so it looks like that's working just fine.

794
00:46:18,000 --> 00:46:20,000
So it seems to think the thread idea is the same.

795
00:46:20,400 --> 00:46:25,400
So we've got something stupid going on but we just don't know what it

796
00:46:25,400 --> 00:46:26,800
is, right?

797
00:46:26,800 --> 00:46:30,200
Something stupid is happening, but we don't know what it is.

798
00:46:31,200 --> 00:46:36,200
And I guess, you know, it seems like it happens under stress meaning

799
00:46:36,200 --> 00:46:39,100
when you have a function that multiple threads are calling at the same

800
00:46:39,100 --> 00:46:42,400
time, apparently this seems to be a problem.

801
00:46:44,400 --> 00:46:47,400
so, with the way this is working,

802
00:46:50,300 --> 00:46:54,400
Perhaps something about how this Atomic is being accessed.

803
00:46:55,000 --> 00:46:58,700
Perhaps something about the way that I'm doing it is

804
00:47:00,000 --> 00:47:03,200
Not proper like in something is getting lost.

805
00:47:04,800 --> 00:47:06,000
I'm not entirely sure.

806
00:47:06,600 --> 00:47:10,700
But oh I'll double-check Atomic adieu.

807
00:47:10,700 --> 00:47:14,600
64, we are marking it as volatile.

808
00:47:16,200 --> 00:47:16,700
Right.

809
00:47:20,800 --> 00:47:24,800
I don't know if one of these castes is, maybe a bad idea.

810
00:47:27,400 --> 00:47:29,000
But I don't think so.

811
00:47:29,000 --> 00:47:32,200
This is, I suppose a volatile as well, but

812
00:47:33,300 --> 00:47:37,200
That shouldn't have any that that should really just that should, that

813
00:47:37,200 --> 00:47:43,400
should not have any effect on anything that I can think of at all.

814
00:47:47,000 --> 00:47:47,900
This is a stumper.

815
00:47:50,900 --> 00:47:52,100
It's a bit of a stumper.

816
00:47:55,600 --> 00:47:58,200
And it's especially Stumpy because you can see that it happens

817
00:47:58,200 --> 00:47:59,500
correctly for a little while.

818
00:48:00,400 --> 00:48:04,300
Like this is exactly what we would expect to see for the most part,

819
00:48:05,000 --> 00:48:05,500
right?

820
00:48:06,200 --> 00:48:14,100
That is like those those are for get them back here.

821
00:48:15,100 --> 00:48:19,500
Those are our debug asynchronous, debug thread spinning up doing a

822
00:48:19,500 --> 00:48:21,200
bunch of rendering and then coming back.

823
00:48:21,700 --> 00:48:23,800
I would assume, right?

824
00:48:27,000 --> 00:48:30,400
So this this is a totally plausible visual picture.

825
00:48:31,300 --> 00:48:33,700
So the question is, just what happens?

826
00:48:33,700 --> 00:48:37,800
Why did things go sour and why does it start to record?

827
00:48:38,300 --> 00:48:40,700
These totally bogus things.

828
00:48:41,000 --> 00:48:44,200
I obviously have some kind of a bug with how those things are getting

829
00:48:44,200 --> 00:48:46,700
written out, but I don't know what it is.

830
00:48:47,400 --> 00:48:50,700
I suppose I could look at the assembly might maybe illuminate

831
00:48:50,700 --> 00:48:52,800
something, but that's sort of presuming that.

832
00:48:52,800 --> 00:48:54,200
There's something subtle happening.

833
00:48:54,200 --> 00:48:54,800
It's wrong.

834
00:48:55,700 --> 00:48:56,600
Where's some kind of expecting?

835
00:48:56,600 --> 00:48:59,500
It must be something blatant that we're doing wrong like something

836
00:48:59,500 --> 00:49:02,500
that's just flat-out, totally wrong, you know.

837
00:49:04,000 --> 00:49:08,400
because in order for it to write out, such ridiculous data, it has to

838
00:49:08,400 --> 00:49:14,200
either be missing a particular piece of debug information or it must

839
00:49:14,300 --> 00:49:14,900
like

840
00:49:17,900 --> 00:49:19,700
get the event type wrong.

841
00:49:21,800 --> 00:49:22,600
In some way.

842
00:49:24,900 --> 00:49:26,200
And I'm totally not seeing it.

843
00:49:29,500 --> 00:49:33,300
Record Loops record, debug event.

844
00:49:36,100 --> 00:49:42,400
And I guess one thing we could do is we could sort of take this part

845
00:49:42,500 --> 00:49:44,600
out of the equation a little bit too.

846
00:49:47,500 --> 00:49:48,400
Just for fun.

847
00:49:49,500 --> 00:49:51,700
We could do something like this since.

848
00:49:51,700 --> 00:49:54,200
I don't have any immediate idea.

849
00:49:54,800 --> 00:49:59,500
What the problem is, I could do something like, count, begin block,

850
00:49:59,900 --> 00:50:00,900
draw a rectangle.

851
00:50:03,000 --> 00:50:04,200
And Walk Tall rectangle.

852
00:50:05,500 --> 00:50:09,000
And now it would be going through.

853
00:50:09,000 --> 00:50:13,800
It wouldn't be using the Constructor Destructor paired one and it

854
00:50:13,800 --> 00:50:15,400
would be using the more explicit path.

855
00:50:16,100 --> 00:50:20,700
So it's still incorrect as far as I can tell, which is good, that

856
00:50:20,700 --> 00:50:23,200
would be even scarier if somehow that wasn't the case.

857
00:50:24,800 --> 00:50:27,700
But now, when I set a breakpoint here, I can look a little bit more

858
00:50:27,700 --> 00:50:31,600
explicitly at when it's doing what, right?

859
00:50:33,700 --> 00:50:39,300
So okay, so let me set a breakpoint there as well so you can see these

860
00:50:39,300 --> 00:50:41,400
guys kind of coming down through here.

861
00:50:43,100 --> 00:50:43,600
Right.

862
00:50:43,800 --> 00:50:46,400
It's a whole bunch of people hitting this function at the same time,

863
00:50:47,400 --> 00:50:50,700
they're doing whatever rectangle filling fund, they want to do.

864
00:50:52,300 --> 00:50:53,900
And then eventually

865
00:50:55,700 --> 00:50:56,700
I don't know why.

866
00:50:57,200 --> 00:50:59,800
When I hit run, it still shows me things from other threads.

867
00:51:01,300 --> 00:51:06,400
But then when we get down to end block for draw a rectangle, I want to

868
00:51:06,400 --> 00:51:07,600
see what that records.

869
00:51:07,900 --> 00:51:13,800
So we're on event array 3 at the moment and we're on 2271 is the

870
00:51:13,800 --> 00:51:14,400
event.

871
00:51:15,900 --> 00:51:21,000
And so let's see what happens here by step into this guy.

872
00:51:22,500 --> 00:51:25,800
It's going to write to 2272 which should be like that guy.

873
00:51:32,600 --> 00:51:36,500
Sorry 2271, it will write to that's the next value, so rights in

874
00:51:36,500 --> 00:51:37,100
there.

875
00:51:39,600 --> 00:51:41,600
I don't know why the thread ID.

876
00:51:41,600 --> 00:51:42,600
Oh, it didn't update.

877
00:51:42,600 --> 00:51:44,100
Just did change their so thread.

878
00:51:44,100 --> 00:51:45,500
ID 68, what's the event?

879
00:51:45,500 --> 00:51:47,200
Type event type is end block.

880
00:51:47,500 --> 00:51:50,300
That's what I would expect to see.

881
00:51:51,600 --> 00:51:53,600
So that's good, right?

882
00:51:53,600 --> 00:51:57,300
Everything is still happening the way I want it to, so that's all

883
00:51:57,300 --> 00:51:57,900
good.

884
00:51:59,500 --> 00:52:01,400
And then, let's see.

885
00:52:02,500 --> 00:52:06,400
Now, we come through here, somebody else has done their increment.

886
00:52:07,000 --> 00:52:07,800
It looks like

887
00:52:12,600 --> 00:52:16,000
I want you to keep want you to keep going, man.

888
00:52:26,700 --> 00:52:29,000
It's Ron's 2774 now.

889
00:52:31,100 --> 00:52:33,500
So it ended it for two of the different Frets here.

890
00:52:36,000 --> 00:52:36,600
There we go.

891
00:52:37,000 --> 00:52:38,200
1600

892
00:52:43,800 --> 00:52:44,400
I don't know.

893
00:52:45,700 --> 00:52:48,100
I got to have to come up with a more creative way to debug this

894
00:52:48,100 --> 00:52:52,500
because I don't see anything obviously weird happening here.

895
00:52:53,700 --> 00:52:58,400
I don't see it, but by the time we sort of get out to here, it's

896
00:52:58,400 --> 00:53:01,400
definitely having this weird thing where it's having a, I don't know

897
00:53:01,400 --> 00:53:05,100
if it's a race condition or right problem or what, but it's eluding me

898
00:53:05,100 --> 00:53:08,800
at the moment, really, just to the point of where I'm not even sure.

899
00:53:08,800 --> 00:53:12,800
I don't have a really good hypothesis for like usually, I could think

900
00:53:12,800 --> 00:53:15,300
of, like, oh, here's something, I suspect.

901
00:53:15,500 --> 00:53:16,100
Be happening.

902
00:53:16,100 --> 00:53:17,100
Let's go investigate it.

903
00:53:17,300 --> 00:53:21,900
I don't really have one of those so I'm going to pause.

904
00:53:22,500 --> 00:53:23,500
Here's the thing you can do.

905
00:53:23,500 --> 00:53:26,200
I don't normally do this but I'm going to do it anyway.

906
00:53:27,300 --> 00:53:28,700
You can kind of see, it's crazy.

907
00:53:28,800 --> 00:53:29,900
All of these people hit draw.

908
00:53:29,900 --> 00:53:32,000
A rectangle at the same time, right?

909
00:53:32,500 --> 00:53:35,300
And so that, I guess that's what's kind of causing our problem is we

910
00:53:35,300 --> 00:53:38,100
R, SF something that doesn't quite work there.

911
00:53:38,400 --> 00:53:41,100
What I'm going to do is I'm going to go ahead and like freeze these

912
00:53:41,100 --> 00:53:45,200
guys so that they can't Advance anymore, right?

913
00:53:45,600 --> 00:53:46,400
I'm just going to freeze them.

914
00:53:47,400 --> 00:53:52,600
So now, they should be unable to continue.

915
00:53:53,200 --> 00:53:56,000
So I'll be able to look at just this one thread.

916
00:53:56,800 --> 00:53:59,400
And I'm going to see what happens if I let each thread.

917
00:54:00,800 --> 00:54:01,500
Do its thing.

918
00:54:02,400 --> 00:54:09,500
So when we come in here, I'm going to get or I it was supposed to.

919
00:54:12,200 --> 00:54:16,700
Why did, who unfroze you the main thread came in?

920
00:54:17,700 --> 00:54:18,400
Freeze.

921
00:54:20,200 --> 00:54:20,700
There we go.

922
00:54:23,400 --> 00:54:24,000
All right.

923
00:54:24,200 --> 00:54:24,400
Try it.

924
00:54:24,400 --> 00:54:25,000
One more time.

925
00:54:26,200 --> 00:54:27,100
So we come in here.

926
00:54:27,100 --> 00:54:30,500
We're going to write event index 2764.

927
00:54:34,300 --> 00:54:38,500
And we're looking at that here, 2764.

928
00:54:39,600 --> 00:54:40,300
So here we go.

929
00:54:41,600 --> 00:54:44,100
I'm going to take a look at what that writes a to here.

930
00:54:44,100 --> 00:54:50,600
It is it's writing in the begin block For Thread 46:52 that's all

931
00:54:50,600 --> 00:54:51,200
good.

932
00:54:51,300 --> 00:54:52,300
Writes it all in there.

933
00:54:53,400 --> 00:54:54,400
Here it goes.

934
00:54:58,900 --> 00:55:01,700
And then we get down to the end block, all the other threads are

935
00:55:01,700 --> 00:55:02,300
frozen.

936
00:55:02,600 --> 00:55:06,000
So now we should see something right here, a 46:52

937
00:55:09,400 --> 00:55:11,600
The end for that guy, right?

938
00:55:11,600 --> 00:55:14,300
And I guess there was an interesting guy who snuck in there as well.

939
00:55:14,400 --> 00:55:17,200
That's probably the begin block for the other guy for the one that for

940
00:55:17,200 --> 00:55:18,400
the main for the second there.

941
00:55:18,700 --> 00:55:22,300
So there is the two, there is the one, there's the to, right?

942
00:55:22,900 --> 00:55:23,700
So, that's good.

943
00:55:25,000 --> 00:55:28,200
Okay, so now let's unfreeze one more thread.

944
00:55:28,500 --> 00:55:32,300
This guy was going, so I'll go ahead and freeze you.

945
00:55:34,300 --> 00:55:35,800
And I'll unfreeze you.

946
00:55:37,600 --> 00:55:38,000
Bah.

947
00:55:39,200 --> 00:55:39,900
You can see what I'm doing here.

948
00:55:39,900 --> 00:55:42,100
I'm just telling the threads, which thread can do.

949
00:55:42,100 --> 00:55:42,700
What when

950
00:55:45,600 --> 00:55:48,300
So, it kind of has this the sort of ability for me to watch more

951
00:55:48,300 --> 00:55:50,600
carefully at what's actually happening.

952
00:55:52,000 --> 00:55:52,800
So, here we go.

953
00:55:53,300 --> 00:55:56,300
You start writing to it, you can see it writing in here.

954
00:55:57,400 --> 00:55:58,600
There's the start.

955
00:56:00,000 --> 00:56:06,200
58 84 writes, everything in as I would expect.

956
00:56:08,100 --> 00:56:09,500
Gets down to the end of block.

957
00:56:10,400 --> 00:56:14,000
I should write it out here and it does as a too.

958
00:56:16,200 --> 00:56:18,700
So it kind of looks to me again.

959
00:56:18,700 --> 00:56:19,800
It's I don't know.

960
00:56:19,800 --> 00:56:24,900
It looks a lot like some kind of a race condition because when we

961
00:56:24,900 --> 00:56:29,400
force these guys to serialize meaning, you know, when we, when we

962
00:56:29,800 --> 00:56:35,100
prevent them from being able to hit the, the debug array, at the same

963
00:56:35,100 --> 00:56:38,800
time, I'm not seeing the kind of ridiculousness.

964
00:56:38,800 --> 00:56:43,000
I was seeing before where you were getting all of these opens and

965
00:56:43,000 --> 00:56:44,800
closes with the wrong thread IDs.

966
00:56:49,300 --> 00:56:51,000
So that seems suspicious.

967
00:56:51,000 --> 00:56:58,100
But at the same time I don't know, like I don't have any idea why that

968
00:56:58,100 --> 00:56:58,900
would be happening.

969
00:56:58,900 --> 00:56:59,800
I don't see where

970
00:57:00,000 --> 00:57:02,200
Would be having the race condition there.

971
00:57:02,800 --> 00:57:04,300
So let's freeze this guy again.

972
00:57:04,800 --> 00:57:06,200
I'll throw another one out.

973
00:57:12,800 --> 00:57:15,000
So there's thread 912 coming through.

974
00:57:16,500 --> 00:57:17,100
Right.

975
00:57:17,500 --> 00:57:22,200
And there's thread 912, closing again, perfectly paired exactly what

976
00:57:22,200 --> 00:57:23,000
we would have thought,

977
00:57:24,400 --> 00:57:27,700
So it looks very suspicious right.

978
00:57:28,500 --> 00:57:34,300
You know, it's not a Smoking Gun but it looks very suspicious because

979
00:57:35,100 --> 00:57:39,300
why is it suddenly behaving so much better when we freeze the threads

980
00:57:40,700 --> 00:57:42,000
There's got to be something.

981
00:57:42,000 --> 00:57:44,900
It would seem in this.

982
00:57:45,100 --> 00:57:46,900
That is incorrect.

983
00:57:46,900 --> 00:57:50,700
That's not, it's not doing the right thing, right?

984
00:57:50,700 --> 00:57:54,800
That's something that it's allowing it to, to misbehave.

985
00:57:55,500 --> 00:57:57,800
And so, if I look here, you know,

986
00:57:59,500 --> 00:58:01,800
These are all values that should not be changing.

987
00:58:01,800 --> 00:58:04,400
The only value that we really use is this one.

988
00:58:05,100 --> 00:58:08,000
We get that debug event in here, right?

989
00:58:10,700 --> 00:58:13,000
So we've got get thread ID, get thread ID.

990
00:58:13,000 --> 00:58:15,700
As far as I know is not doing anything weird.

991
00:58:16,300 --> 00:58:19,900
Maybe there's some reason why get thread ID is itself, not thread

992
00:58:19,900 --> 00:58:26,000
safe, like I don't know if read GSD word somehow doesn't work properly

993
00:58:26,100 --> 00:58:30,800
under but I mean it shouldn't have any thread dependent dependence

994
00:58:30,800 --> 00:58:31,300
whatsoever.

995
00:58:31,300 --> 00:58:32,200
I mean it should be.

996
00:58:32,600 --> 00:58:35,400
That should not really have any bearing on anything.

997
00:58:35,400 --> 00:58:39,100
I wouldn't think although you know, maybe there's some reason why

998
00:58:39,100 --> 00:58:40,300
that's that's a

999
00:58:40,500 --> 00:58:41,600
We're not quite safe.

1000
00:58:44,700 --> 00:58:49,100
Because if the gut thread ID was was coming back bogus then that would

1001
00:58:49,100 --> 00:58:49,700
be something.

1002
00:58:49,800 --> 00:58:53,700
I suppose the other thing we don't really know, we could do something

1003
00:58:53,700 --> 00:58:59,100
where with get thread ID, we're getting back, a u-32 obviously forget

1004
00:58:59,100 --> 00:58:59,800
thread ID.

1005
00:59:00,100 --> 00:59:03,500
We should probably try to determine well, we already doing that.

1006
00:59:03,500 --> 00:59:04,800
We're already verifying

1007
00:59:05,700 --> 00:59:06,500
I guess that's not true.

1008
00:59:06,700 --> 00:59:10,100
We don't verify that it actually fits in a u16, right?

1009
00:59:10,500 --> 00:59:12,600
So the other thing we could do is we could do this.

1010
00:59:21,500 --> 00:59:26,100
Just to make sure that we're not truncating it in some bad way, but I

1011
00:59:26,100 --> 00:59:28,100
would not expect that to be true.

1012
00:59:29,500 --> 00:59:33,000
But I just double check again at this point I'm you know sort of

1013
00:59:33,000 --> 00:59:37,400
paranoid about it, right because I don't really know if I don't have a

1014
00:59:37,400 --> 00:59:42,000
good idea of who the culprit is, then I have to start to suspect every

1015
00:59:42,000 --> 00:59:42,900
last little thing.

1016
00:59:44,300 --> 00:59:45,000
So that's fine.

1017
00:59:48,100 --> 00:59:48,900
so,

1018
00:59:57,000 --> 00:59:57,500
I don't know.

1019
01:00:01,400 --> 01:00:03,800
I'd say this is probably the hardest, debugging problem we've seen on

1020
01:00:03,800 --> 01:00:05,100
handmade hero so far.

1021
01:00:06,300 --> 01:00:09,400
That doesn't necessarily mean it's the hardest bug, but it's

1022
01:00:09,400 --> 01:00:13,100
definitely the one that's caused me the most perplexing.

1023
01:00:22,100 --> 01:00:26,000
Which usually has to do with you, not guessing not being able to guess

1024
01:00:26,200 --> 01:00:28,900
in the right direction of what the problem is.

1025
01:00:30,700 --> 01:00:34,900
So Atomic, add you 64?

1026
01:00:38,900 --> 01:00:40,800
Is presumably not at fault here.

1027
01:00:40,800 --> 01:00:44,200
Because we would assume that we would have seen that in some other

1028
01:00:44,200 --> 01:00:45,400
way, right?

1029
01:00:45,700 --> 01:00:46,800
When we have

1030
01:00:48,400 --> 01:00:49,000
See here.

1031
01:00:51,300 --> 01:00:58,000
We have been using those atomics, you know, the windows atomics.

1032
01:00:59,900 --> 01:01:02,900
Pretty much for everything we've done and we haven't seen any problems

1033
01:01:02,900 --> 01:01:03,400
with them.

1034
01:01:04,100 --> 01:01:06,200
So if there's a problem with the way that we were calling, we would

1035
01:01:06,200 --> 01:01:06,800
have expected.

1036
01:01:06,800 --> 01:01:10,300
I would think to see it in the renderer somewhere, whatever.

1037
01:01:10,300 --> 01:01:13,200
Now, granted we never calling it as heavily as we're calling it here.

1038
01:01:13,200 --> 01:01:13,900
That is true.

1039
01:01:15,000 --> 01:01:17,000
So there is a little bit of that I suppose.

1040
01:01:18,900 --> 01:01:23,500
But himself, you know, it's doing in Deluxe.

1041
01:01:23,500 --> 01:01:25,000
Change at 64 bit.

1042
01:01:31,100 --> 01:01:33,700
Is it conceivable that it's not aligned?

1043
01:01:35,900 --> 01:01:40,500
Somehow that it like straddles, a cache line or something like this.

1044
01:01:42,800 --> 01:01:43,400
So it wouldn't be.

1045
01:01:43,400 --> 01:01:49,400
That seems just really like I'm grasping at straws personally, what it

1046
01:01:49,400 --> 01:01:55,000
kind of seems like but I mean all right you know let's let's make sure

1047
01:01:55,900 --> 01:01:58,800
just just because why not.

1048
01:02:00,200 --> 01:02:08,100
So let's make sure that the address of that guy and the bottom 64

1049
01:02:08,100 --> 01:02:09,000
bits, right?

1050
01:02:09,100 --> 01:02:12,000
So I want to, I guess I'm saying is I want to make sure

1051
01:02:12,200 --> 01:02:17,300
This guy isn't in some kind of a weird alignment, so that's aligned on

1052
01:02:17,800 --> 01:02:19,800
all every, every 64.

1053
01:02:20,700 --> 01:02:24,200
So, I want to make sure that the the

1054
01:02:26,800 --> 01:02:27,300
Excuse me.

1055
01:02:28,400 --> 01:02:29,700
The bottom six bits.

1056
01:02:33,000 --> 01:02:37,200
Well I guess 8 so the bottom three B should all be zero.

1057
01:02:38,200 --> 01:02:42,900
So I want you know something like you know I want to make sure that

1058
01:02:43,400 --> 01:02:44,800
that I don't have

1059
01:02:48,200 --> 01:02:50,100
First cast sister, you 64.

1060
01:02:50,500 --> 01:02:54,200
Whatever the address is of this thing, right?

1061
01:02:54,400 --> 01:02:59,300
I want to make sure that, you know, that would be aligned to every two

1062
01:02:59,300 --> 01:02:59,800
bites.

1063
01:03:00,200 --> 01:03:02,400
That would be aligned to every for B.

1064
01:03:03,500 --> 01:03:05,400
And I want this aligned to every

1065
01:03:11,400 --> 01:03:12,800
Every eight, right?

1066
01:03:15,000 --> 01:03:16,100
A brains kind of fried here.

1067
01:03:17,100 --> 01:03:17,600
I'm also.

1068
01:03:19,400 --> 01:03:20,200
Little slope.

1069
01:03:21,900 --> 01:03:22,600
So yeah.

1070
01:03:24,400 --> 01:03:25,800
I'm just going to see what that does.

1071
01:03:34,000 --> 01:03:34,500
Right.

1072
01:03:36,600 --> 01:03:37,000
Yeah.

1073
01:03:37,300 --> 01:03:38,400
So

1074
01:03:44,100 --> 01:03:45,400
Sorry, that's not quite right.

1075
01:03:45,500 --> 01:03:46,700
Yeah, my brain is totally fried.

1076
01:03:46,700 --> 01:03:48,700
Sorry, I'm too busy thinking about the bug.

1077
01:03:48,700 --> 01:03:49,500
And not busy.

1078
01:03:49,600 --> 01:03:53,700
I'm not actually thinking about what I'm trying to explain here, so

1079
01:03:53,700 --> 01:03:56,300
that would be two that.

1080
01:03:56,500 --> 01:04:01,900
If that equals 0 then your your your lobe it that tells you every

1081
01:04:01,900 --> 01:04:03,200
other B, right?

1082
01:04:04,200 --> 01:04:07,800
That tells me the next bit over but I need I need both I need to know

1083
01:04:07,800 --> 01:04:11,900
that the low bit and the next bit up is not set, right?

1084
01:04:12,200 --> 01:04:13,700
So that would be forever.

1085
01:04:13,900 --> 01:04:14,400
For.

1086
01:04:15,200 --> 01:04:17,900
And so then, you know I wrote it right the first time that I was

1087
01:04:17,900 --> 01:04:18,500
trying to explain it.

1088
01:04:18,500 --> 01:04:22,800
I kind of said it wrong and typed it wrong and so that has all three

1089
01:04:22,800 --> 01:04:23,900
bottom bit set.

1090
01:04:23,900 --> 01:04:27,900
So now we know that we're by twos, we're not by twos, we're not by 4

1091
01:04:27,900 --> 01:04:28,600
as they were not.

1092
01:04:29,100 --> 01:04:31,600
You know, we've got to be by AIDS.

1093
01:04:31,700 --> 01:04:32,000
Right.

1094
01:04:32,000 --> 01:04:36,400
So that we relied them on on a 64-bit or eight byte boundary.

1095
01:04:37,700 --> 01:04:39,100
So I'm just going to go ahead and run that.

1096
01:04:43,900 --> 01:04:45,800
That's a little bit odd.

1097
01:04:47,600 --> 01:04:49,200
Oh well that's all right.

1098
01:04:50,600 --> 01:04:53,500
I guess sometimes the block name in The Source is 0.

1099
01:04:54,700 --> 01:04:59,200
So we should add our we should allow our string routine to handle that

1100
01:05:01,700 --> 01:05:04,700
we can just say something like

1101
01:05:10,300 --> 01:05:12,800
These are two results is false.

1102
01:05:12,900 --> 01:05:14,400
If a and b.

1103
01:05:18,900 --> 01:05:19,500
Like that.

1104
01:05:20,100 --> 01:05:22,600
So now you can pass in a null pointers if you want.

1105
01:05:22,600 --> 01:05:26,000
And I'll just tell you, although, I suppose, we could also do

1106
01:05:28,200 --> 01:05:29,100
something like this.

1107
01:05:33,800 --> 01:05:34,900
You know, oops.

1108
01:05:38,900 --> 01:05:46,400
So essentially like if they were both know, it would be okay because

1109
01:05:46,400 --> 01:05:48,800
technically if you say strings are equal, zero comma zero, that

1110
01:05:48,800 --> 01:05:52,000
probably should be true because they are same string.

1111
01:05:52,900 --> 01:05:54,500
So that seems like a fair thing to do.

1112
01:05:55,100 --> 01:05:56,400
All right, so let's run that.

1113
01:05:57,300 --> 01:05:59,000
Yeah, so that's all aligned properly.

1114
01:05:59,000 --> 01:05:59,900
So there's nothing weird going.

1115
01:06:00,000 --> 01:06:00,400
On there.

1116
01:06:00,400 --> 01:06:03,400
So our Atomic Miss should be fine.

1117
01:06:06,300 --> 01:06:07,600
Yeah, and there's nothing.

1118
01:06:08,800 --> 01:06:09,800
Nothing peculiar there.

1119
01:06:12,600 --> 01:06:13,100
I don't know.

1120
01:06:13,800 --> 01:06:14,700
This is a stumper.

1121
01:06:15,900 --> 01:06:18,900
I could just if you think it maybe it would be fun.

1122
01:06:18,900 --> 01:06:23,800
I could end the stream and see if people want to try to bugging it.

1123
01:06:23,800 --> 01:06:25,100
See if they could figure it out.

1124
01:06:25,200 --> 01:06:28,300
We've pretty clearly stated what the problem is, right?

1125
01:06:30,000 --> 01:06:34,900
So you should have a very good idea of exactly what you're looking

1126
01:06:34,900 --> 01:06:40,500
for, but why it is happening, is anyone's guess we pretty much don't

1127
01:06:40,500 --> 01:06:41,300
have any idea.

1128
01:06:44,900 --> 01:06:46,500
We're pretty much don't know, right?

1129
01:06:52,600 --> 01:06:54,600
So yeah I'm going to end it.

1130
01:06:54,700 --> 01:06:57,800
We're going to sleep on it and we'll see and we'll think about

1131
01:06:57,800 --> 01:07:00,900
tomorrow how we want to reproach to bugging it because it looks like I

1132
01:07:00,900 --> 01:07:02,600
don't have any good ideas for it.

1133
01:07:03,000 --> 01:07:08,500
And I think we may have to like what I am leaning towards doing is

1134
01:07:08,500 --> 01:07:14,800
trying to Pare down pair of this down to the smallest possible Repro

1135
01:07:14,800 --> 01:07:20,200
case, so that I can debug it more in isolation rather than having to

1136
01:07:20,200 --> 01:07:21,200
do it kind of with a

1137
01:07:21,400 --> 01:07:26,700
Instead of debug events in in the running program, right?

1138
01:07:27,600 --> 01:07:28,600
So I think that's what I'll do.

1139
01:07:29,900 --> 01:07:33,900
Maybe someone already knows what it is, but I'm assuming that without

1140
01:07:33,900 --> 01:07:36,800
doing the debugging themselves, they might not be able to.

1141
01:07:37,200 --> 01:07:38,600
So let's go ahead and go to the Q&A.

1142
01:07:40,700 --> 01:07:44,600
and I will leave debugging that as an exercise for the reader

1143
01:07:44,600 --> 01:07:51,100
overnight, if anyone can find it and see,

1144
01:08:05,400 --> 01:08:07,100
This Isaac try running without timing.

1145
01:08:07,100 --> 01:08:07,900
Draw a rectangle.

1146
01:08:08,300 --> 01:08:12,300
I'm sure if you want to see if you just want to see if it's like only

1147
01:08:12,300 --> 01:08:16,399
this one routine which is a perfectly reasonable thing to want to do

1148
01:08:17,800 --> 01:08:19,399
just to get more information.

1149
01:08:19,399 --> 01:08:21,700
Like is there something weird about draw?

1150
01:08:21,700 --> 01:08:23,000
A rectangle specifically?

1151
01:08:27,899 --> 01:08:30,000
And it does not look like it, right.

1152
01:08:30,000 --> 01:08:31,899
It looks like it's just happens.

1153
01:08:31,899 --> 01:08:32,600
Eventually.

1154
01:08:38,899 --> 01:08:40,200
Regardless of what we time.

1155
01:08:40,899 --> 01:08:44,899
The other thing is I suppose, you know, there's the timing that's in

1156
01:08:44,899 --> 01:08:48,899
render group is the timing that's going to be multi-threaded.

1157
01:08:49,500 --> 01:08:52,500
So you know what we could do to is say here like

1158
01:08:55,000 --> 01:08:58,600
Inside render group, we could replace time function.

1159
01:09:00,600 --> 01:09:03,100
With the new word timed function.

1160
01:09:05,200 --> 01:09:05,899
Like so.

1161
01:09:15,500 --> 01:09:18,500
And then up here we just do pound find ignored time function.

1162
01:09:20,000 --> 01:09:21,600
And that would take out all of them.

1163
01:09:28,500 --> 01:09:30,800
And similarly, inside optimized.

1164
01:09:34,000 --> 01:09:34,800
We do the same thing.

1165
01:09:47,100 --> 01:09:48,399
And that would give you.

1166
01:09:51,200 --> 01:09:55,000
That would give you like one that presumably wasn't really doing any

1167
01:09:55,000 --> 01:09:57,800
heavy multi-threaded use.

1168
01:10:00,700 --> 01:10:09,500
And, you know, it does sort of reinforce the notion that the code was

1169
01:10:09,500 --> 01:10:12,400
was working properly.

1170
01:10:13,300 --> 01:10:19,800
When it does not have, excuse me, multi-thread contention there.

1171
01:10:20,800 --> 01:10:27,200
And so, you know, yet further evidence that it suggests that something

1172
01:10:27,200 --> 01:10:27,900
is wrong.

1173
01:10:29,200 --> 01:10:34,700
But still doesn't really tell us what the what the Smoking Gun is, you

1174
01:10:34,700 --> 01:10:35,000
know?

1175
01:10:36,800 --> 01:10:37,400
So

1176
01:10:39,400 --> 01:10:40,800
So, still a Puzzler.

1177
01:10:42,000 --> 01:10:42,800
In my opinion.

1178
01:10:44,800 --> 01:10:49,800
The msdn documentation for read, gsq word States, these intrinsics are

1179
01:10:49,800 --> 01:10:54,000
only available in kernel mode and the routines are only available as

1180
01:10:54,000 --> 01:10:54,600
intrinsics.

1181
01:10:54,600 --> 01:11:00,100
If this is the case, how are you able to use read gsq word to read out

1182
01:11:00,100 --> 01:11:01,100
of the thread ID?

1183
01:11:01,100 --> 01:11:03,500
I'm not really sure what the difference between kernel mode.

1184
01:11:03,500 --> 01:11:11,000
User mode is so I don't, I'm pretty sure that is a bogus claim on the

1185
01:11:11,000 --> 01:11:12,200
msdn documentation.

1186
01:11:12,200 --> 01:11:14,500
And the reason that I say that is because we took

1187
01:11:14,800 --> 01:11:18,200
Look at how get current thread ID worked.

1188
01:11:18,200 --> 01:11:24,200
We like looked at this assembly and it issued a Direct Read to the GS

1189
01:11:24,200 --> 01:11:25,000
segment.

1190
01:11:25,400 --> 01:11:28,700
So clearly you don't need to be in kernel mode to do it because

1191
01:11:28,700 --> 01:11:31,600
Microsoft's own code, does it not in kernel mode?

1192
01:11:32,200 --> 01:11:35,000
So, I don't know where that notion came from, but it doesn't seem to

1193
01:11:35,000 --> 01:11:37,900
be at all grounded in reality, as far as I can tell.

1194
01:11:38,700 --> 01:11:41,700
So, all we're doing right now is exactly the same code that would have

1195
01:11:41,700 --> 01:11:42,900
happened with get current thread ID.

1196
01:11:42,900 --> 01:11:43,700
As far as I know,

1197
01:12:12,200 --> 01:12:15,100
You said that it seems to work normally for a little while, then stops

1198
01:12:15,100 --> 01:12:18,400
working when it's under stress, maybe let the threads run wild for a

1199
01:12:18,400 --> 01:12:21,200
little while, then freeze them or is this not possible with the

1200
01:12:21,200 --> 01:12:21,800
debugger.

1201
01:12:24,500 --> 01:12:26,100
Well, that is what we did.

1202
01:12:27,800 --> 01:12:28,500
or, I mean,

1203
01:12:30,100 --> 01:12:32,300
Yeah, I mean I mean we can definitely do that.

1204
01:12:37,300 --> 01:12:38,900
so, in order to do that,

1205
01:12:42,100 --> 01:12:43,200
let's go ahead and

1206
01:12:46,400 --> 01:12:48,000
switch this back to Broken mode.

1207
01:12:49,200 --> 01:12:50,600
Oh well, you know what though?

1208
01:12:51,900 --> 01:12:52,600
Let's not.

1209
01:12:53,800 --> 01:12:54,700
Quite do that.

1210
01:12:55,900 --> 01:12:59,900
Let's just see if turning on the just draw.

1211
01:12:59,900 --> 01:13:03,300
A rectangle is sufficient to reproduce the problem.

1212
01:13:05,300 --> 01:13:06,500
That I would like to know.

1213
01:13:14,300 --> 01:13:15,000
Really.

1214
01:13:16,700 --> 01:13:20,300
If yes, if we got some weird bugs in here, like, what is going on

1215
01:13:20,300 --> 01:13:20,700
there?

1216
01:13:22,800 --> 01:13:29,800
How could turning off stuff end up with more regions, you know, it's

1217
01:13:29,800 --> 01:13:30,700
very strange.

1218
01:13:32,700 --> 01:13:35,800
I guess it's well it's probably because there's no parent.

1219
01:13:36,100 --> 01:13:38,600
That's probably why there's no parent to draw a rectangle.

1220
01:13:40,100 --> 01:13:44,000
So you're just going to see a ton of draw rectangle calls, right?

1221
01:13:51,400 --> 01:13:55,900
so yeah, I mean that I guess doesn't isn't really that surprising but

1222
01:13:55,900 --> 01:13:56,300
still

1223
01:14:02,800 --> 01:14:06,400
Man, I guess there's just a lot of draw rectangle calls.

1224
01:14:11,800 --> 01:14:14,400
This is going to be like an Infinity of draw rectangle calls, right?

1225
01:14:14,400 --> 01:14:18,100
Because it's every every time we call draw a rectangle, it would add

1226
01:14:18,100 --> 01:14:21,800
another region per frame, that makes sense, because the Region's

1227
01:14:21,800 --> 01:14:23,400
themselves are draw a rectangle calls.

1228
01:14:26,700 --> 01:14:30,300
So it's just this kind of infinite feedback loop sort of thing.

1229
01:14:32,300 --> 01:14:37,200
It's not an infinite feedback loop but but it's a bad situation.

1230
01:14:37,500 --> 01:14:40,300
So yeah, I'm not sure how we would really get by that because there's

1231
01:14:40,300 --> 01:14:41,300
going to be a ton of them.

1232
01:14:44,800 --> 01:14:45,100
Right.

1233
01:14:45,100 --> 01:14:48,000
Because the student, it's just going to keep adding more and more and

1234
01:14:48,000 --> 01:14:48,400
more.

1235
01:14:51,100 --> 01:14:52,400
More and more, and more of them.

1236
01:14:53,500 --> 01:14:54,200
Let's see here.

1237
01:14:55,600 --> 01:14:56,400
Events are there?

1238
01:15:01,400 --> 01:15:02,300
Current frame.

1239
01:15:07,500 --> 01:15:12,700
It's that first one that first frame has way more debug events than

1240
01:15:12,700 --> 01:15:15,800
everybody else, which is also a little bit odd.

1241
01:15:23,900 --> 01:15:24,900
I don't know why.

1242
01:15:24,900 --> 01:15:27,600
Exactly that would be maybe because it has to do a lot of

1243
01:15:27,600 --> 01:15:31,700
initialization of stuff which is causing word, you big events.

1244
01:15:34,100 --> 01:15:35,700
But this is a little weird, right?

1245
01:15:37,600 --> 01:15:38,900
I sort of a separate issue there.

1246
01:15:44,300 --> 01:15:44,700
like,

1247
01:15:46,200 --> 01:15:47,500
It's a bit odd.

1248
01:16:09,200 --> 01:16:13,300
Is it possible that the array index part somehow got swapped out

1249
01:16:13,300 --> 01:16:15,500
during the begin and end records?

1250
01:16:17,500 --> 01:16:19,100
Even if it did, that's fine.

1251
01:16:19,700 --> 01:16:21,500
We don't count on that, not happening.

1252
01:16:24,200 --> 01:16:26,400
Did you create your colors to be easy on the eyes?

1253
01:16:26,400 --> 01:16:31,800
If not, how did they come to be here talking about the grid ones, or

1254
01:16:41,700 --> 01:16:43,000
Didn't remove the end block call.

1255
01:16:43,200 --> 01:16:47,200
No, it's still there because it's sort of implicit.

1256
01:16:49,100 --> 01:16:54,700
If you take a look the time function, it includes it automatically

1257
01:16:54,700 --> 01:16:56,600
does the beginning and right.

1258
01:16:56,600 --> 01:16:58,000
That's that's its job.

1259
01:16:58,200 --> 01:17:01,600
It uses the Constructor Destructor pair trick to make sure there's one

1260
01:17:01,600 --> 01:17:02,700
at the beginning in the end.

1261
01:17:04,200 --> 01:17:04,900
So you know,

1262
01:17:07,600 --> 01:17:12,800
But yeah, I wanted to kind, I wanted to do to do that, I guess what I

1263
01:17:12,800 --> 01:17:13,300
can do.

1264
01:17:13,300 --> 01:17:16,200
So here's the way I can fix this problem because I don't want to have

1265
01:17:16,200 --> 01:17:17,000
to deal with this.

1266
01:17:18,800 --> 01:17:20,200
The way I can fix this problem.

1267
01:17:22,700 --> 01:17:24,000
Is in the render group.

1268
01:17:24,500 --> 01:17:28,500
I can just add put one more of these guys back in like the top level

1269
01:17:28,500 --> 01:17:34,400
guy that way it won't add a region for every rectangle call.

1270
01:17:37,100 --> 01:17:38,200
so, if we did that,

1271
01:17:43,300 --> 01:17:44,200
It just being here.

1272
01:17:48,400 --> 01:17:51,400
So now we wouldn't be pushing those regions on and then it'd be fine.

1273
01:17:52,500 --> 01:17:54,300
I should think or not.

1274
01:17:58,400 --> 01:17:58,700
Hmm.

1275
01:18:00,000 --> 01:18:01,700
Right, so this is kind of interesting as well.

1276
01:18:02,300 --> 01:18:05,100
Let's take a look at what happens here because I'm interested to know

1277
01:18:05,100 --> 01:18:06,800
why that's happening source.

1278
01:18:08,600 --> 01:18:11,200
So draw a rectangle should not be happening.

1279
01:18:12,300 --> 01:18:15,000
Without an enclosed person, right?

1280
01:18:15,600 --> 01:18:16,700
Who is calling draw.

1281
01:18:16,700 --> 01:18:17,600
A rectangle.

1282
01:18:18,200 --> 01:18:21,600
That's not underneath one of these two guys.

1283
01:18:26,100 --> 01:18:28,100
Looking where can draw a rectangle be cold.

1284
01:18:36,200 --> 01:18:39,800
So, it does get called directly just straight out of the gate.

1285
01:18:43,800 --> 01:18:45,400
So there is one place there.

1286
01:18:45,900 --> 01:18:46,800
Well, that's not.

1287
01:18:46,800 --> 01:18:48,000
That's if they're it out though.

1288
01:18:49,300 --> 01:18:53,400
So that wouldn't count Direction quickly doesn't count draw a

1289
01:18:53,400 --> 01:18:53,900
rectangle.

1290
01:18:53,900 --> 01:18:55,100
There's our time function director.

1291
01:18:55,100 --> 01:18:58,700
How slowly does not count, draw a rectangle and the render group.

1292
01:18:58,700 --> 01:19:01,200
This is inside render group to Output.

1293
01:19:04,800 --> 01:19:07,300
Surrender group to Output.

1294
01:19:22,300 --> 01:19:22,600
Oops.

1295
01:19:29,300 --> 01:19:30,600
Render group to Output.

1296
01:19:37,000 --> 01:19:38,800
Is pretty much only called.

1297
01:19:40,000 --> 01:19:41,800
inside the guys that I just said,

1298
01:19:43,300 --> 01:19:43,900
right.

1299
01:19:49,300 --> 01:19:51,000
There is render route output.

1300
01:20:04,400 --> 01:20:07,300
So I guess not so do tiled render work.

1301
01:20:08,800 --> 01:20:13,400
Doesn't actually count because it isn't under here, right?

1302
01:20:22,100 --> 01:20:22,600
All right.

1303
01:20:28,800 --> 01:20:29,200
We'll see.

1304
01:20:32,000 --> 01:20:32,400
Okay.

1305
01:20:45,500 --> 01:20:48,400
So now we don't have that problem.

1306
01:20:48,400 --> 01:20:48,700
Once.

1307
01:20:48,700 --> 01:20:53,100
It's once those guys are sort of, you know, stuck under there

1308
01:20:54,300 --> 01:20:59,500
Now, we are properly seeing the render kickoffs and everything else it

1309
01:20:59,500 --> 01:20:59,800
looks.

1310
01:21:04,900 --> 01:21:08,400
So having those draw rectangle calls, kind of wild.

1311
01:21:11,200 --> 01:21:12,000
It's kind of interesting.

1312
01:21:12,600 --> 01:21:17,400
I'm gonna go ahead and make ignored time function, the time function.

1313
01:21:21,000 --> 01:21:21,400
Again.

1314
01:21:27,800 --> 01:21:31,100
So my turn all these guys back on and let's see what happens.

1315
01:21:40,200 --> 01:21:46,200
So it still has a problem if you turn everybody on, if that makes

1316
01:21:46,200 --> 01:21:46,600
sense.

1317
01:21:50,100 --> 01:21:52,800
All right, let's try one of these at a time.

1318
01:22:11,300 --> 01:22:15,700
So, now, with everybody on except the optimized code, right?

1319
01:22:15,700 --> 01:22:18,200
If you've read Justice counting, the optimized code,

1320
01:22:21,700 --> 01:22:23,000
We are not hitting the case.

1321
01:22:25,200 --> 01:22:28,100
so again, yet one more piece of data there,

1322
01:22:51,900 --> 01:22:55,600
Let's see, Elvin, if the debug code is slower than the actual runtime

1323
01:22:55,600 --> 01:22:56,300
of the game.

1324
01:22:56,300 --> 01:22:59,200
How can we rely on the debug systems to give us accurate timing of how

1325
01:22:59,200 --> 01:23:02,700
long things are taking in the game since they naturally take more time

1326
01:23:02,700 --> 01:23:03,700
in debug mode?

1327
01:23:05,000 --> 01:23:09,000
Well, again, there's a lot of stuff that we're will kind of be looking

1328
01:23:09,000 --> 01:23:13,300
at to what degree to how much stuff we can do and still reasonably,

1329
01:23:13,300 --> 01:23:14,700
get good timings remember.

1330
01:23:14,700 --> 01:23:16,800
It doesn't matter how slow the game runs.

1331
01:23:16,900 --> 01:23:20,000
It only matters how slow the part that actually interferes with the

1332
01:23:20,000 --> 01:23:20,400
games.

1333
01:23:20,500 --> 01:23:25,900
Fang takes so that the the overall time when we actually draw it

1334
01:23:25,900 --> 01:23:29,000
separately, that part is not so critical.

1335
01:23:29,800 --> 01:23:33,400
Look, we don't care if that slows things down because that doesn't

1336
01:23:33,400 --> 01:23:35,800
really affect the code that its timing.

1337
01:23:36,000 --> 01:23:41,600
It's only the part that does the actual timing that can't be slow or

1338
01:23:41,600 --> 01:23:43,100
the can interfere too much.

1339
01:23:43,400 --> 01:23:44,000
Thanks, that's

1340
01:23:57,800 --> 01:23:59,800
so, you can kind of see to like,

1341
01:24:00,600 --> 01:24:04,700
This is already, I believe, showing us what's happening in the game,

1342
01:24:04,700 --> 01:24:05,300
pretty clearly.

1343
01:24:05,300 --> 01:24:06,800
I also, you know what, let's why is it?

1344
01:24:06,800 --> 01:24:09,900
I want to move it down a little bit further as well.

1345
01:24:18,500 --> 01:24:20,100
so, let's go ahead and

1346
01:24:22,700 --> 01:24:23,600
do this here.

1347
01:24:25,100 --> 01:24:28,400
So let's say, let's just say,

1348
01:24:30,200 --> 01:24:33,100
That at y here.

1349
01:24:33,800 --> 01:24:35,400
I'm going to give it another 300.

1350
01:24:44,400 --> 01:24:46,200
Just so I can see a little more clearly.

1351
01:24:47,600 --> 01:24:49,700
But you can kind of see, right?

1352
01:24:50,100 --> 01:24:51,900
You can see what's going on here.

1353
01:24:52,400 --> 01:24:57,800
I believe, if you look at what these actual frame, display things kind

1354
01:24:57,800 --> 01:25:02,800
of look like, you can see that you've got, you know, this is that

1355
01:25:02,800 --> 01:25:03,800
first kickoff.

1356
01:25:03,800 --> 01:25:05,900
This this is rendering the game.

1357
01:25:06,800 --> 01:25:08,800
This sort of first batch here.

1358
01:25:09,000 --> 01:25:10,800
Those are the threads that actually render the game.

1359
01:25:11,300 --> 01:25:14,400
And this batch up here are presumably the threads that render the

1360
01:25:14,400 --> 01:25:16,800
debug output, right?

1361
01:25:17,600 --> 01:25:18,300
You know what I mean?

1362
01:25:19,600 --> 01:25:22,400
So it's kind of interesting to see that.

1363
01:25:22,800 --> 01:25:25,400
And, you know, the other thing I could do, is when we render these, we

1364
01:25:25,400 --> 01:25:28,400
could render less of them so that they fit on the screen properly.

1365
01:25:30,300 --> 01:25:32,500
Again, will kind of get to all this stuff a little bit later but just

1366
01:25:32,500 --> 01:25:33,900
for sake of the argument.

1367
01:25:35,100 --> 01:25:38,600
So you know, if we did something like, well we've got, you know, n

1368
01:25:38,600 --> 01:25:39,100
frames.

1369
01:25:39,100 --> 01:25:41,900
We know that the most recent frames are the last frames.

1370
01:25:42,500 --> 01:25:48,500
So if we did something like like this, we could do something like,

1371
01:25:48,500 --> 01:25:49,000
okay, give me.

1372
01:25:49,100 --> 01:25:49,800
The frame.

1373
01:25:50,000 --> 01:25:53,600
That's the frame count - the frame index.

1374
01:25:54,700 --> 01:25:55,500
you know, or

1375
01:25:58,900 --> 01:25:59,600
Like that.

1376
01:26:03,600 --> 01:26:07,500
And then here, what we do is we'd say, well, I really just want to go

1377
01:26:07,500 --> 01:26:13,000
to to like the tenth one or whatever or something like this.

1378
01:26:13,800 --> 01:26:22,300
So it'd be something like, you, 32, Max frame equals debug frame

1379
01:26:22,300 --> 01:26:22,700
count.

1380
01:26:22,700 --> 01:26:26,000
If Max frame is greater than 10, Max Payne 2 equals 10.

1381
01:26:26,700 --> 01:26:28,700
Just throwing it out there for now.

1382
01:26:29,900 --> 01:26:34,900
And that way, you know, presumably, we would have less of these well,

1383
01:26:35,000 --> 01:26:36,800
although that's still drawing more than 10.

1384
01:26:36,900 --> 01:26:38,000
What did I do wrong in there?

1385
01:26:39,000 --> 01:26:40,100
Didn't use it Max.

1386
01:26:44,200 --> 01:26:47,900
So at least then yeah we kind of have a little bit.

1387
01:26:47,900 --> 01:26:52,900
So this is the most recent frame here and you can kind of see.

1388
01:26:52,900 --> 01:26:56,300
Now, a little more saying it's not spending so much time drawing

1389
01:26:56,300 --> 01:26:57,900
rectangles and stuff like this, right?

1390
01:26:57,900 --> 01:26:59,900
But you can kind of

1391
01:27:00,000 --> 01:27:00,800
Here.

1392
01:27:00,900 --> 01:27:05,100
Now we have a again, a better sort of picture of what's going on.

1393
01:27:06,200 --> 01:27:11,200
But even just before, we've even debugged the, this system, you can

1394
01:27:11,200 --> 01:27:15,200
now see a really clear picture, even just from this really, really

1395
01:27:15,200 --> 01:27:16,500
lousy visualization.

1396
01:27:17,000 --> 01:27:21,300
Since we haven't spent any time, actually with a vis stuff, you can

1397
01:27:21,300 --> 01:27:24,100
already see a really good eye picture of kind of what's happening the

1398
01:27:24,100 --> 01:27:24,300
game.

1399
01:27:24,300 --> 01:27:26,400
Here's the main thread, right?

1400
01:27:27,100 --> 01:27:29,800
And you can see it's broken up into like the game update is this?

1401
01:27:30,000 --> 01:27:31,500
This large solid part.

1402
01:27:31,500 --> 01:27:33,700
Here's the part where it's waiting for the frames to change.

1403
01:27:33,700 --> 01:27:36,400
Here's the beginning part where it was like, pressing input and stuff

1404
01:27:37,000 --> 01:27:40,000
and then you here, you can see the frames the threads getting kicked

1405
01:27:40,000 --> 01:27:42,900
off to do the rendering and here you can see the threads, get given to

1406
01:27:42,900 --> 01:27:45,300
the rendering a second time for the debug overlay.

1407
01:27:47,500 --> 01:27:52,200
So you can, you know, it again, people were sort of saying, why do we

1408
01:27:52,200 --> 01:27:53,100
spend time in the debug code?

1409
01:27:53,100 --> 01:27:54,100
It takes too long.

1410
01:27:54,800 --> 01:27:59,800
I mean, the stuff we're going to find out and be able to see from

1411
01:27:59,800 --> 01:28:01,300
just, a few weeks of work.

1412
01:28:01,700 --> 01:28:04,600
And don't forget if you, if, you know, if you weren't breaking this up

1413
01:28:04,600 --> 01:28:08,700
into chunks of had to be an hour, a night uses not very much work, you

1414
01:28:08,700 --> 01:28:13,600
know, you're talking about like full-time one week, maybe two weeks of

1415
01:28:13,600 --> 01:28:17,100
full-time work at most to write a decent debug system.

1416
01:28:17,600 --> 01:28:21,600
The stuff that you end up seeing in it, just pay off.

1417
01:28:21,600 --> 01:28:26,400
So huge already, this kind of validates, what I think is happening in

1418
01:28:26,400 --> 01:28:30,300
the code and it gives me a much, you know, as soon as we're going to

1419
01:28:30,300 --> 01:28:33,200
be able to drill down in there a little more, we're going to learn a

1420
01:28:33,200 --> 01:28:33,700
lot of stuff.

1421
01:28:33,700 --> 01:28:34,800
We probably didn't know.

1422
01:28:35,600 --> 01:28:39,200
And it's also kind of itching to see how much time is spent prior to

1423
01:28:39,200 --> 01:28:40,000
taking off those threads.

1424
01:28:40,000 --> 01:28:43,400
It's actually pretty significant more than I would have thought there.

1425
01:28:45,000 --> 01:28:48,400
So I feel like that's yeah I feel like it's really good idea to spend

1426
01:28:48,400 --> 01:28:50,400
time on this kind of code because I feel like you learned a lot of

1427
01:28:50,400 --> 01:28:52,400
things that you wouldn't know otherwise.

1428
01:29:03,000 --> 01:29:05,700
Remember Chris, another day you discard events at buffers are full.

1429
01:29:05,700 --> 01:29:06,800
Are you sure?

1430
01:29:06,800 --> 01:29:07,800
I'll buffers are big enough.

1431
01:29:08,000 --> 01:29:11,500
Well actually that wouldn't cause the problem though because the

1432
01:29:11,500 --> 01:29:15,100
problem that we're seeing is that we're getting to end events that

1433
01:29:15,100 --> 01:29:16,400
don't have corresponding bit.

1434
01:29:16,400 --> 01:29:17,200
Begin events.

1435
01:29:17,400 --> 01:29:19,800
If we were throwing out events when the buffers got full, we would

1436
01:29:19,800 --> 01:29:21,200
never see the end events either.

1437
01:29:21,800 --> 01:29:24,000
So throwing out events on the bumpers feels actually fine.

1438
01:29:24,900 --> 01:29:26,900
But, no, I don't think we're having that because we have an assertion

1439
01:29:26,900 --> 01:29:28,800
in there, actually.

1440
01:29:31,700 --> 01:29:32,500
The moment.

1441
01:29:37,000 --> 01:29:39,100
We actually have a surgeons in there, like this.

1442
01:29:40,300 --> 01:29:40,800
You know.

1443
01:29:44,500 --> 01:29:44,900
so,

1444
01:29:47,700 --> 01:29:53,800
So yeah, I'd also be interested to see just for a moment.

1445
01:29:54,100 --> 01:29:57,400
I'd be interested to see if we go into our build-up at

1446
01:30:01,700 --> 01:30:03,000
What the difference is.

1447
01:30:05,400 --> 01:30:06,800
if I was,

1448
01:30:16,300 --> 01:30:17,200
To run release mode.

1449
01:30:19,900 --> 01:30:23,100
So seriously, you can see that just like a lot less time spent there,

1450
01:30:23,100 --> 01:30:23,600
right?

1451
01:30:33,800 --> 01:30:34,600
Not sure what those kind.

1452
01:30:34,600 --> 01:30:36,100
Those are some interesting spikes there.

1453
01:30:37,300 --> 01:30:39,000
Like, I don't know what their spikes were from.

1454
01:30:40,100 --> 01:30:41,300
That would be something that I can read.

1455
01:30:41,300 --> 01:30:42,800
Want to go ahead and investigate.

1456
01:30:43,700 --> 01:30:44,800
Oh, you know what we missed?

1457
01:30:44,800 --> 01:30:46,000
That's missing the frame.

1458
01:30:46,400 --> 01:30:47,000
You can see that it.

1459
01:30:47,000 --> 01:30:48,700
Misses the frame turnover.

1460
01:30:48,700 --> 01:30:49,400
It looks like

1461
01:30:51,000 --> 01:30:52,500
So, I'll be adjusting to investigate as well.

1462
01:30:54,100 --> 01:30:55,600
Again, really pretty interesting stuff.

1463
01:31:10,000 --> 01:31:12,900
Besides it could it be threads running across a frame boundary.

1464
01:31:19,600 --> 01:31:20,400
I mean, yeah.

1465
01:31:20,400 --> 01:31:23,200
I mean, I obviously could I just don't know.

1466
01:31:25,100 --> 01:31:27,800
I mean since I don't know what it is, I don't know what it isn't,

1467
01:31:28,600 --> 01:31:29,200
right.

1468
01:31:36,300 --> 01:31:36,900
but, you know,

1469
01:31:38,100 --> 01:31:40,800
this code doesn't care if that happened.

1470
01:31:47,200 --> 01:31:53,500
It really doesn't care because let's say that the begin events had had

1471
01:31:53,500 --> 01:31:57,700
moved out, had fallen off the had fallen off the event.

1472
01:31:58,600 --> 01:31:59,200
Arrays.

1473
01:31:59,800 --> 01:32:02,400
So, you know, they happened on the last frame and the last frame fell

1474
01:32:02,400 --> 01:32:02,600
out.

1475
01:32:02,600 --> 01:32:05,400
So we're starting on the, the farthest back frame.

1476
01:32:05,400 --> 01:32:06,400
We're starting to process it.

1477
01:32:06,400 --> 01:32:07,300
We don't have any big events.

1478
01:32:07,300 --> 01:32:08,300
We see end events.

1479
01:32:08,600 --> 01:32:09,600
We just throw them away.

1480
01:32:11,300 --> 01:32:11,800
Right?

1481
01:32:11,900 --> 01:32:14,400
They wouldn't be causing a problem.

1482
01:32:14,400 --> 01:32:16,600
They wouldn't be causing the problem you're seeing, which is that the

1483
01:32:16,600 --> 01:32:20,900
open block array is filled with people who didn't have who never got

1484
01:32:20,900 --> 01:32:21,600
closed.

1485
01:32:22,100 --> 01:32:25,700
From then, on we're processing everybody on all frames.

1486
01:32:25,800 --> 01:32:29,200
So it doesn't matter if a person crosses a frame boundary we should

1487
01:32:29,200 --> 01:32:31,400
still pop them off properly, right?

1488
01:32:31,400 --> 01:32:34,100
We don't reset the frame stack.

1489
01:32:34,500 --> 01:32:37,100
When we do this, this doesn't reset the frame.

1490
01:32:37,300 --> 01:32:38,700
I'm sorry, it doesn't reset.

1491
01:32:38,700 --> 01:32:40,400
The thread open block stock.

1492
01:32:41,900 --> 01:32:43,700
So it shouldn't matter if they cross.

1493
01:32:51,100 --> 01:32:52,900
So yeah.

1494
01:33:01,900 --> 01:33:03,500
All right, I think that's about it.

1495
01:33:05,400 --> 01:33:08,000
We're going to, we're going to leave that one be well.

1496
01:33:08,000 --> 01:33:13,400
Do you know I'm going to restore it to to its non-working State

1497
01:33:13,600 --> 01:33:16,200
because I don't want to leave it in a state that's actually working.

1498
01:33:19,600 --> 01:33:21,100
so, I want to

1499
01:33:23,600 --> 01:33:24,500
Put it back.

1500
01:33:25,800 --> 01:33:26,800
Into a state.

1501
01:33:28,100 --> 01:33:28,900
Where it is broken.

1502
01:33:31,800 --> 01:33:34,300
So that we can work on it tomorrow.

1503
01:33:35,500 --> 01:33:37,300
So that was the broken version.

1504
01:33:37,300 --> 01:33:37,700
Yeah.

1505
01:33:48,100 --> 01:33:49,300
What has happened?

1506
01:33:54,300 --> 01:33:54,500
Oh no.

1507
01:33:54,500 --> 01:33:55,100
That's correct.

1508
01:33:55,100 --> 01:33:56,500
Because we're only seeing the last ten frames.

1509
01:33:56,900 --> 01:33:57,200
Yeah.

1510
01:33:59,100 --> 01:33:59,500
So yeah.

1511
01:34:01,000 --> 01:34:02,900
So we're back in the broken safe here.

1512
01:34:03,200 --> 01:34:05,300
So I'm going to leave it like that because I want a broken when we

1513
01:34:05,300 --> 01:34:06,300
start looking at it tomorrow.

1514
01:34:07,500 --> 01:34:08,500
So that's good.

1515
01:34:10,000 --> 01:34:13,200
Let me go ahead and close down the thread.

1516
01:34:13,200 --> 01:34:13,800
The string

1517
01:34:17,400 --> 01:34:18,900
Nobody says nothing scheduled.

1518
01:34:19,700 --> 01:34:20,100
There we go.

1519
01:34:21,100 --> 01:34:24,000
That's what should say, okay.

1520
01:34:27,900 --> 01:34:29,600
Thank you everyone for joining me for another episode of handmade

1521
01:34:29,600 --> 01:34:29,800
hero.

1522
01:34:29,800 --> 01:34:31,200
This is a bit of a stumper.

1523
01:34:31,200 --> 01:34:34,700
This is the first time I think we've had one on handmade hero, so I

1524
01:34:34,700 --> 01:34:38,300
feel like this is a kind of a tricky problem to debug and it'll be

1525
01:34:38,300 --> 01:34:42,200
interesting to see what we do tomorrow to try and track it down.

1526
01:34:44,200 --> 01:34:46,700
Yeah, we're going to have to, we're going to have to give it some

1527
01:34:46,700 --> 01:34:49,000
serious thought because there doesn't seem to be anything particularly

1528
01:34:49,000 --> 01:34:49,900
obvious to try.

1529
01:34:50,600 --> 01:34:55,200
If you've got ideas, you can always try hunting down the bug yourself.

1530
01:34:55,200 --> 01:34:56,300
See if you can find it.

1531
01:34:56,600 --> 01:34:57,300
Is a tricky one.

1532
01:34:57,300 --> 01:34:59,800
So if you're looking for some debugging practice, I would say it's

1533
01:34:59,800 --> 01:35:03,000
probably a good one to try because there was not it was not something

1534
01:35:03,000 --> 01:35:04,300
that was immediately obvious to me.

1535
01:35:06,300 --> 01:35:10,900
So I don't think it would be immediately obvious and it might give you

1536
01:35:10,900 --> 01:35:14,900
a good chance to try and play around with hunting a hunting down.

1537
01:35:14,900 --> 01:35:17,100
Some, that may even be a multi threading bug, which is a particularly

1538
01:35:17,300 --> 01:35:19,400
tough type of bug find verbally as well.

1539
01:35:20,500 --> 01:35:26,100
So anyway, if you want to check that out you and you can always do

1540
01:35:26,100 --> 01:35:26,600
that.

1541
01:35:26,700 --> 01:35:28,900
If you are someone who pre-order the game, again it comes to the

1542
01:35:28,900 --> 01:35:31,000
source code so you can download the source code.

1543
01:35:31,000 --> 01:35:34,800
I'll upload it now and you can download the latest version and then

1544
01:35:35,100 --> 01:35:36,000
see if you can find it.

1545
01:35:36,700 --> 01:35:41,200
If you do, I don't know if you want to do spoiler warnings or not, you

1546
01:35:41,200 --> 01:35:45,700
can post it on the forums and see, maybe we can see who gets it first.

1547
01:35:47,300 --> 01:35:49,300
I seen you guys could easily beat me to it if you started.

1548
01:35:49,300 --> 01:35:51,200
Now, my voice is about to go.

1549
01:35:51,200 --> 01:35:53,500
So I'll just sign off for now and say, thanks everyone for joining me.

1550
01:35:53,900 --> 01:35:55,200
I'll be back here tomorrow.

1551
01:35:55,600 --> 01:35:57,100
I think it's a, it's a late stream tomorrow.

1552
01:35:57,100 --> 01:35:58,500
So it'll actually be 8 p.m.

1553
01:35:58,500 --> 01:35:59,800
Pacific Daylight time tomorrow.

1554
01:36:00,500 --> 01:36:04,200
When I'll pick back up the bug hunt and see if I can't find out what's

1555
01:36:04,200 --> 01:36:04,900
wrong with that guy.

1556
01:36:06,000 --> 01:36:10,800
Until then have programming and I will see you guys on the internet.

1557
01:36:10,800 --> 01:36:11,600
Take it easy, everyone.

