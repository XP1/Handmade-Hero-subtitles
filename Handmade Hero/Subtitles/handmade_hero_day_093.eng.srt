1
00:00:00,000 --> 00:00:01,400
According so we can get started.

2
00:00:03,100 --> 00:00:06,600
Hello, welcome to handmade hero.

3
00:00:07,100 --> 00:00:09,000
We had a little bit of a Rowdy pre stream, it's true.

4
00:00:09,700 --> 00:00:12,900
I was kind of going off on how I thought that gamers in the gaming

5
00:00:12,900 --> 00:00:16,200
press had done a remarkable League.

6
00:00:16,200 --> 00:00:19,400
Good job actually at creating a positive Market for games.

7
00:00:19,400 --> 00:00:22,500
And I got very excited, saying, how I think, people don't appreciate

8
00:00:22,500 --> 00:00:25,700
that enough and that they should, and so a little worked up, but

9
00:00:25,700 --> 00:00:26,300
that's okay.

10
00:00:27,100 --> 00:00:31,800
So let's go ahead and get things back to Graphics which is our topic

11
00:00:31,800 --> 00:00:32,299
for today.

12
00:00:33,000 --> 00:00:34,800
We are here on day 93.

13
00:00:34,800 --> 00:00:37,000
So, if you would like to follow along at home and you have

14
00:00:37,000 --> 00:00:40,700
pre-ordered, the game on handmade hero dot, or please, unzip date 92

15
00:00:40,700 --> 00:00:41,600
is source code.

16
00:00:42,200 --> 00:00:43,700
And that is where I am today.

17
00:00:44,600 --> 00:00:48,900
All right, so, where did we leave off people?

18
00:00:49,300 --> 00:00:51,500
I hope you remember because it was a lot of fun yesterday.

19
00:00:52,700 --> 00:00:57,500
We left off with a, the first time we actually started filling solid

20
00:00:57,500 --> 00:00:57,800
shapes.

21
00:00:57,800 --> 00:01:00,100
That could be arbitrarily rotated and scaled.

22
00:01:00,600 --> 00:01:04,400
And so what we need to do now to complete sort of our push forwards

23
00:01:04,400 --> 00:01:08,100
into adding more graphics features so we can have a real renderer is

24
00:01:08,100 --> 00:01:12,600
we would like to start filling these shapes and I guess I should

25
00:01:12,700 --> 00:01:13,300
correct that.

26
00:01:13,300 --> 00:01:15,500
That was again, people egged me on in the post.

27
00:01:15,500 --> 00:01:17,800
Dream, people are always like do this, do that.

28
00:01:17,900 --> 00:01:20,800
And then I kind of feel like, oh well, maybe we should do that, right?

29
00:01:21,600 --> 00:01:22,300
We were

30
00:01:22,500 --> 00:01:23,600
Not going to support that.

31
00:01:23,600 --> 00:01:26,700
We are only supposed to be supporting rectilinear Blitz here.

32
00:01:26,700 --> 00:01:27,800
So there we go.

33
00:01:28,400 --> 00:01:32,900
So anyway, what we want to be able to do is we want to be able to

34
00:01:32,900 --> 00:01:37,300
support rotated and scaled and potentially non-uniformly scaled.

35
00:01:37,300 --> 00:01:41,100
So we'd like to be able to scale differently in different directions

36
00:01:41,100 --> 00:01:41,400
as well.

37
00:01:41,400 --> 00:01:47,100
So you know for example we may want to be able to make it so that you

38
00:01:47,100 --> 00:01:49,300
know, things can be oblong as we put them.

39
00:01:49,400 --> 00:01:49,800
Right?

40
00:01:50,400 --> 00:01:50,900
But that's it.

41
00:01:50,900 --> 00:01:52,200
We're not going to support skewing.

42
00:01:52,400 --> 00:01:54,200
Any of that sort of stuff because we don't really need it.

43
00:01:54,300 --> 00:01:56,700
So we're just going to concentrate on this kind of thing.

44
00:01:57,100 --> 00:01:59,500
So we want to be able to do exactly what we're doing right here.

45
00:01:59,500 --> 00:02:02,500
We did the work for a yesterday where we can fill a shape of the solid

46
00:02:02,500 --> 00:02:02,900
color.

47
00:02:03,100 --> 00:02:07,400
What we want to do now is we want to to see if we can move from that

48
00:02:07,500 --> 00:02:10,600
to actually filling it with an image, right?

49
00:02:10,699 --> 00:02:14,300
So what we want to do is we want to start doing texture mapping so

50
00:02:14,300 --> 00:02:17,700
that we can scale and rotate our Sprite.

51
00:02:17,700 --> 00:02:21,400
So like for example this this head here or this tour so we want to be

52
00:02:21,400 --> 00:02:22,300
able to do that.

53
00:02:22,500 --> 00:02:28,600
Um, so that we can basically map any image that we want onto one of

54
00:02:28,600 --> 00:02:32,800
these sort of computing, one of these rotated and scaled

55
00:02:32,800 --> 00:02:34,500
quadrilaterals, right?

56
00:02:34,800 --> 00:02:37,000
And so we're going to do is talk about that in the Blackboard today.

57
00:02:37,000 --> 00:02:38,100
I don't know how far we'll get.

58
00:02:38,100 --> 00:02:40,400
We'll talk about that in the Blackboard and then we will start

59
00:02:40,400 --> 00:02:44,800
implementing it and then next week, we will pick up wherever we leave

60
00:02:44,900 --> 00:02:45,400
off.

61
00:02:45,500 --> 00:02:46,000
Okay?

62
00:02:46,300 --> 00:02:47,200
So there we go.

63
00:02:48,600 --> 00:02:49,700
That's where we're at.

64
00:02:49,800 --> 00:02:53,600
What I would like to do is I would like to go ahead and start us off

65
00:02:53,600 --> 00:02:57,500
by simply saying before we go to the Blackboard, we're going to have

66
00:02:57,500 --> 00:02:59,800
to start passing what we want, you know.

67
00:03:00,000 --> 00:03:02,900
It'll render entity coordinate system here which is like a test bed.

68
00:03:02,900 --> 00:03:07,400
We're gonna have to start passing down some image that we want to be

69
00:03:07,400 --> 00:03:08,500
the texture, right?

70
00:03:08,500 --> 00:03:10,700
Like whatever that texture is that we're going to map.

71
00:03:10,800 --> 00:03:13,800
We need to be able to pass that texture down.

72
00:03:13,800 --> 00:03:17,700
And so what we're going to do is we're going to expand our notion cure

73
00:03:17,900 --> 00:03:19,200
of coordinate system, right?

74
00:03:19,200 --> 00:03:21,900
We've got it in here where we're passing a bunch of stuff to it.

75
00:03:21,900 --> 00:03:25,600
What we want to do is after that color and then I guess I'll sort of

76
00:03:25,600 --> 00:03:27,500
make this a little easier to read there after that color.

77
00:03:27,800 --> 00:03:29,800
We want to pass some text that

78
00:03:30,000 --> 00:03:31,500
Can use to fill things.

79
00:03:31,500 --> 00:03:35,000
And so we've got, you know, we've got a situation where we had in our

80
00:03:35,000 --> 00:03:37,000
game State structure, a bunch of things loaded.

81
00:03:37,000 --> 00:03:41,400
So maybe we'll just grab the tree or something and say that the tree

82
00:03:41,400 --> 00:03:44,500
is going to be what we what we draw, right?

83
00:03:44,800 --> 00:03:49,900
And so, if we go in into our thing here and say game state tree is

84
00:03:49,900 --> 00:03:50,600
what we draw.

85
00:03:50,700 --> 00:03:54,100
Then in our render group, when we push on one of these coordinate

86
00:03:54,100 --> 00:03:58,400
systems, we can pass a loaded bitmap which is going to be the texture

87
00:03:58,400 --> 00:03:59,800
and then we'll just store that on.

88
00:04:00,000 --> 00:04:01,800
To the render State and we'll go.

89
00:04:01,800 --> 00:04:02,900
All right, you know,

90
00:04:06,700 --> 00:04:09,300
that's the texture that we're going to fill this quadrilateral with

91
00:04:09,300 --> 00:04:09,800
right.

92
00:04:10,100 --> 00:04:13,300
And so you know we've got that push down there now and and the tree is

93
00:04:13,300 --> 00:04:17,100
in there but we don't actually have it filling so that's going to be

94
00:04:17,100 --> 00:04:19,600
what we're going to talk about today is how do we start getting that

95
00:04:19,600 --> 00:04:19,899
in there?

96
00:04:19,899 --> 00:04:23,200
And when we do our draw a rectangle slowly call which is this right

97
00:04:23,200 --> 00:04:27,200
here we're going to want to pass that as well right and our draw

98
00:04:27,200 --> 00:04:29,400
rectangle slowly call will.

99
00:04:29,400 --> 00:04:34,300
Now will now take that loaded bitmap as its parameter.

100
00:04:34,700 --> 00:04:35,100
Okay.

101
00:04:35,400 --> 00:04:39,500
So, if you remember the way we were doing this, as we had our Edge

102
00:04:39,500 --> 00:04:42,900
equations and the edge equations for telling us whether or not we were

103
00:04:42,900 --> 00:04:44,700
inside the shape that we wanted to fill.

104
00:04:44,700 --> 00:04:48,200
And that this this test right here with said they all have to be

105
00:04:48,200 --> 00:04:50,100
negative in order for us to be inside.

106
00:04:50,100 --> 00:04:53,300
That would that was what would tell us whether we should take the

107
00:04:53,300 --> 00:04:57,300
pixel that were on and write to it with the color that we had or

108
00:04:57,300 --> 00:05:01,300
whether we should just let it pass pass through, right?

109
00:05:01,300 --> 00:05:03,100
And we also have another mode.

110
00:05:03,100 --> 00:05:05,100
We could switch to here where we do an

111
00:05:05,400 --> 00:05:09,000
A if we switch the f-zero, where we could just see all of the pixels,

112
00:05:09,000 --> 00:05:10,700
we were visiting, right?

113
00:05:11,100 --> 00:05:13,600
And, you know, we haven't done anything smart to do the coming here.

114
00:05:13,600 --> 00:05:17,600
So we're literally just doing the bounding box of those points, sort

115
00:05:17,600 --> 00:05:21,300
of an axial line, bounding box of those points, but that still speeds

116
00:05:21,300 --> 00:05:23,500
it up quite a bit compared to doing the whole screen as we saw

117
00:05:23,500 --> 00:05:24,000
yesterday.

118
00:05:24,000 --> 00:05:27,300
So it's a worthy thing to do the optimization, but in the future we'll

119
00:05:27,300 --> 00:05:28,600
probably have to do something little smarter.

120
00:05:28,600 --> 00:05:31,900
So that we aren't considering so many pixels that are nowhere near the

121
00:05:31,900 --> 00:05:32,800
actual interior.

122
00:05:32,800 --> 00:05:35,300
As the case is, when it sort of gets a little bigger

123
00:05:35,400 --> 00:05:36,100
They're certainly.

124
00:05:36,700 --> 00:05:40,400
So anyway, that's what we're doing at the moment and, and we've got

125
00:05:40,400 --> 00:05:40,900
that going.

126
00:05:40,900 --> 00:05:42,500
So what we need to do now, right?

127
00:05:42,600 --> 00:05:45,200
We know that we don't have to change any of any of what we're doing,

128
00:05:45,200 --> 00:05:47,300
for, filling pixels, because that's all the same.

129
00:05:47,600 --> 00:05:52,500
All we really need to do is this color 32 here, this color 32 is not

130
00:05:52,500 --> 00:05:54,100
useful anymore, right?

131
00:05:54,100 --> 00:05:54,600
That's the color.

132
00:05:54,600 --> 00:05:56,900
That was passed in, and that's not what we want.

133
00:05:56,900 --> 00:05:59,800
We want to be able to put in in place of that.

134
00:06:00,000 --> 00:06:05,600
32 a color that we read from that texture, that got passed in, right?

135
00:06:05,600 --> 00:06:09,000
And so let's talk a little bit on the Blackboard about how that's

136
00:06:09,000 --> 00:06:09,600
going to go.

137
00:06:09,900 --> 00:06:13,400
And what I'm going to do here is I'm not going to try and Lead

138
00:06:13,400 --> 00:06:14,000
anything.

139
00:06:14,400 --> 00:06:17,100
I try to do this a lot on the stream, like I've said multiple times,

140
00:06:17,200 --> 00:06:19,600
I'm not going to try to lead us into the correct answer.

141
00:06:19,600 --> 00:06:22,400
What I'm going to do is show you how I would go about creating a

142
00:06:22,400 --> 00:06:26,100
solution to the problem that we have and then sort of later on, we'll

143
00:06:26,100 --> 00:06:28,800
kind of revisit and talk about solutions that other people have come

144
00:06:28,800 --> 00:06:29,800
up with that are probably

145
00:06:30,000 --> 00:06:32,100
Better than the one that we come up with because this is the sort of

146
00:06:32,100 --> 00:06:36,100
topic that's been studied by many many people over many, many years.

147
00:06:36,300 --> 00:06:39,000
And so the thing that we'd come up with first is probably not the best

148
00:06:39,000 --> 00:06:41,800
thing, but I think that it's good for me to show you how I work

149
00:06:41,800 --> 00:06:42,900
through problems all the time.

150
00:06:42,900 --> 00:06:46,100
And so even though we're probably not going to arrive at the exact

151
00:06:46,100 --> 00:06:48,900
answer that will use eventually for efficiency and all sorts of other

152
00:06:48,900 --> 00:06:49,800
reasons, right.

153
00:06:50,000 --> 00:06:52,300
I think it's beneficial for us to show how we can work through things

154
00:06:52,300 --> 00:06:55,400
from first pencils and come up with an answer because that's always

155
00:06:55,400 --> 00:06:59,100
the start of solving new problems and yet maybe it takes 10 20 years

156
00:06:59,100 --> 00:06:59,800
of people cranking.

157
00:07:00,000 --> 00:07:03,800
To come up with the final best solutions to things but that's not

158
00:07:03,800 --> 00:07:06,400
necessarily what we're trying to teach on this stream, right?

159
00:07:06,400 --> 00:07:09,200
You can always go read a research paper to find out what the current

160
00:07:09,200 --> 00:07:12,000
status of something is but when you're tackling a problem that hasn't

161
00:07:12,000 --> 00:07:12,700
had solution yet.

162
00:07:12,700 --> 00:07:14,700
The important thing to know is how to do that.

163
00:07:14,800 --> 00:07:16,100
And so that's what we always try to do.

164
00:07:16,800 --> 00:07:20,500
So I'm going to sort of say, I'm going to show you how to think about

165
00:07:20,500 --> 00:07:22,800
this problem and start to try to attack it.

166
00:07:23,000 --> 00:07:25,800
And we're just going to go with what comes out of that analysis.

167
00:07:26,000 --> 00:07:29,800
So what we have right is we've talked about this many times now.

168
00:07:29,900 --> 00:07:32,100
We've got our coordinates laid out here.

169
00:07:32,200 --> 00:07:37,200
We have our y axis, and our x axis, right?

170
00:07:37,300 --> 00:07:40,100
And these are scaled, and basically what we're saying is that we're

171
00:07:40,100 --> 00:07:42,600
drawing a rectangle, that looks like this, right?

172
00:07:42,600 --> 00:07:46,900
So by the time we get to the X, you know, this is our origin.

173
00:07:46,900 --> 00:07:50,600
By the time we've moved out by the y-axis, on our origin.

174
00:07:50,600 --> 00:07:52,500
We've come to the end of the bitmap in that direction.

175
00:07:52,500 --> 00:07:55,200
And by the time we moved by the x-axis from the origin, we've come to

176
00:07:55,200 --> 00:07:57,800
the bitmap and in that direction, right?

177
00:07:58,000 --> 00:07:59,800
So what we would like to do

178
00:08:00,900 --> 00:08:05,600
Yes, we would like to take some regular rectangular grid of pixels,

179
00:08:05,600 --> 00:08:05,900
right?

180
00:08:05,900 --> 00:08:07,600
This is our texture over here, right?

181
00:08:07,600 --> 00:08:08,500
This is our texture.

182
00:08:09,800 --> 00:08:13,600
What we would like to do is take a regular grid of pixels and we'd

183
00:08:13,600 --> 00:08:19,000
like to figure out at any point in here where you know what pixel

184
00:08:19,100 --> 00:08:20,000
would map into there?

185
00:08:20,000 --> 00:08:24,100
And we can sort of imagine how you know that that looks just in our

186
00:08:24,100 --> 00:08:27,500
head, we can imagine taking this grid and you know, aligning it in

187
00:08:27,500 --> 00:08:28,000
here, right?

188
00:08:28,000 --> 00:08:30,800
And we can already start to see like it would be pretty obvious to us.

189
00:08:31,100 --> 00:08:34,200
If we were just asked to do this, well, we just kind of move and sort

190
00:08:34,200 --> 00:08:37,500
of rotate it into place and squish it till it fit.

191
00:08:37,500 --> 00:08:40,900
And then, you know, here's a, here's B, here's see, right there, it is

192
00:08:40,900 --> 00:08:42,200
a b c.

193
00:08:42,200 --> 00:08:45,000
And, you know, those things would kind of line up and, you know, I

194
00:08:45,000 --> 00:08:47,300
should actually probably point out that since we're in a bottom

195
00:08:47,300 --> 00:08:48,200
centered coordinate system.

196
00:08:48,200 --> 00:08:49,800
It really be this way, right?

197
00:08:50,000 --> 00:08:50,300
Oops.

198
00:08:50,800 --> 00:08:51,900
A b c.

199
00:08:52,000 --> 00:08:53,100
Like so, right.

200
00:08:54,400 --> 00:08:59,200
So what we'd like to do is say that, well, we've got pixels, right?

201
00:08:59,200 --> 00:08:59,800
And we know how

202
00:09:00,000 --> 00:09:04,200
Address this thing because we've been using these bitmaps a ton, we

203
00:09:04,200 --> 00:09:08,000
know that we can address these by an X and Y that are in pixel

204
00:09:08,000 --> 00:09:09,500
coordinates, right?

205
00:09:09,500 --> 00:09:12,500
But it's confusing, because we also have an X and Y over here.

206
00:09:12,600 --> 00:09:13,900
That's the pixel grid.

207
00:09:14,000 --> 00:09:16,400
That's actually the thing that we're filling, right?

208
00:09:16,400 --> 00:09:18,300
So there's like two grids on top of each other, right?

209
00:09:18,300 --> 00:09:19,300
There's the XY grid.

210
00:09:19,300 --> 00:09:21,600
That's the pixels were filling and then there's this other thing over

211
00:09:21,600 --> 00:09:21,900
here.

212
00:09:22,100 --> 00:09:24,200
So what we're going to do is we're going to try a new standard

213
00:09:24,200 --> 00:09:28,000
nomenclature here which is UV.

214
00:09:28,000 --> 00:09:29,400
Sometimes St, depends on the

215
00:09:30,000 --> 00:09:31,800
Has and what space you're talking about?

216
00:09:31,800 --> 00:09:35,100
But oftentimes people will talk about is they'll talk about UV

217
00:09:35,100 --> 00:09:39,300
coordinates for a texture map and we can also think about those UV

218
00:09:39,300 --> 00:09:42,200
coordinates in two different ways, right?

219
00:09:42,200 --> 00:09:45,600
And so I'm just going to tell you what those are briefly and so we can

220
00:09:45,600 --> 00:09:48,600
use the right moment later as we sort of solve for this because that

221
00:09:48,600 --> 00:09:51,400
will make it a little easier to understand when we talk about other

222
00:09:51,400 --> 00:09:53,200
solutions to this problem a little later on.

223
00:09:53,300 --> 00:09:56,000
So again I'm not introducing any solutions here, I'm not trying to

224
00:09:56,000 --> 00:09:56,400
lead us.

225
00:09:56,400 --> 00:09:59,400
I'm just going to introduce the terms properly so that when

226
00:10:00,000 --> 00:10:01,400
Start saying something we can use them.

227
00:10:01,900 --> 00:10:06,700
So, typically the way that people talk about indexing into these

228
00:10:06,700 --> 00:10:09,500
bitmaps is they talk about UV coordinates.

229
00:10:10,100 --> 00:10:13,800
Meaning sort of the yuan is in the X Direction.

230
00:10:14,000 --> 00:10:18,900
The V is in the y direction and they actually range from 0 to 1.

231
00:10:19,600 --> 00:10:20,000
Okay?

232
00:10:20,100 --> 00:10:22,900
So normally, when we were talking about looking after that texture,

233
00:10:23,200 --> 00:10:23,700
right?

234
00:10:24,200 --> 00:10:29,700
We were talking about having sort of X range from

235
00:10:29,900 --> 00:10:31,600
02 the width, right?

236
00:10:31,700 --> 00:10:34,600
And actually the width minus 1 would be the last pixel, all right?

237
00:10:34,600 --> 00:10:39,400
And when we were doing why we were talking about it, going from 0 to

238
00:10:39,400 --> 00:10:41,100
the height, minus 1, right?

239
00:10:41,400 --> 00:10:44,100
And so that's how we know how to look up into this bitmap.

240
00:10:44,400 --> 00:10:48,700
And so this is this is sort of the u and v paradigms a little weird

241
00:10:48,700 --> 00:10:48,900
for us.

242
00:10:48,900 --> 00:10:52,400
But you know, we've worked with this, it's so much before and handmade

243
00:10:52,400 --> 00:10:55,800
hear things like this, we can already see exactly how we would do

244
00:10:55,800 --> 00:10:56,500
this, right?

245
00:10:56,500 --> 00:10:59,800
We already saw this sort of mapping from 0 to 1.

246
00:11:00,600 --> 00:11:03,900
To do mapping from 0 to 255, right?

247
00:11:04,000 --> 00:11:06,500
When we were doing colors, right?

248
00:11:06,500 --> 00:11:10,300
All we do is we take the 0 1 and we multiply it, by whatever that

249
00:11:10,300 --> 00:11:11,600
range is, right.

250
00:11:11,700 --> 00:11:15,000
So we just take if we have some value here, that sort of are

251
00:11:15,000 --> 00:11:15,900
normalized value.

252
00:11:15,900 --> 00:11:19,300
It's the zero to one value when we want our sort of expanded value,

253
00:11:19,300 --> 00:11:19,800
right?

254
00:11:19,800 --> 00:11:23,600
We just take, whatever that is, whatever that maximum value is.

255
00:11:23,600 --> 00:11:26,000
And it's just n times the max, right?

256
00:11:26,000 --> 00:11:28,100
Because then when it's zero, it's still zero.

257
00:11:28,200 --> 00:11:29,800
And when it's one, it's the maximum value.

258
00:11:29,900 --> 00:11:32,700
And everywhere in between it's whatever the linear proportion is of

259
00:11:32,700 --> 00:11:33,500
it, right?

260
00:11:33,900 --> 00:11:37,100
So it's pretty free for us to talk about things in terms of UV

261
00:11:37,100 --> 00:11:37,800
coordinates.

262
00:11:38,700 --> 00:11:41,300
And because we always know that these are basically interchangeable.

263
00:11:41,300 --> 00:11:44,600
So we can say UV to talk about something in a texture or we could say

264
00:11:44,600 --> 00:11:48,800
like the textures X and the textures Y, which would be like more like

265
00:11:48,800 --> 00:11:49,500
these values.

266
00:11:49,600 --> 00:11:52,100
And really, we don't have to care too much about which one we're

267
00:11:52,100 --> 00:11:54,700
talking about because we know that it's while it may be an efficiency

268
00:11:54,700 --> 00:11:58,400
concern later that we need to think about in terms of conceptually we

269
00:11:58,400 --> 00:11:59,800
know how to address a texture in

270
00:12:00,000 --> 00:12:00,600
Either way, right?

271
00:12:00,600 --> 00:12:03,600
We would know how to get it either way because if we have these then

272
00:12:03,600 --> 00:12:05,300
it's just the same pixel lookups we've been doing.

273
00:12:05,400 --> 00:12:08,600
If we have these, we just first multiply them, by whatever, the width

274
00:12:08,600 --> 00:12:12,300
minus 1 is in the height minus 1 to get out t, x and t y values.

275
00:12:12,300 --> 00:12:13,600
And then we're done, right?

276
00:12:14,500 --> 00:12:15,800
So real straightforward stuff.

277
00:12:16,800 --> 00:12:23,600
So the question is right, how do we produce some u and v values?

278
00:12:24,100 --> 00:12:24,600
Right?

279
00:12:24,600 --> 00:12:28,400
That tell us where in the textile texture we are at any given time.

280
00:12:28,700 --> 00:12:29,900
And if I draw this diagram,

281
00:12:30,000 --> 00:12:31,700
I am a little more cleanly, right.

282
00:12:31,900 --> 00:12:32,600
Let me draw it.

283
00:12:32,600 --> 00:12:34,200
A little more cleanly here.

284
00:12:34,200 --> 00:12:37,500
So I'm going to draw the pixel grid that we're on, right?

285
00:12:37,900 --> 00:12:42,000
Like so, so this is the pixel grid that we're on, and this is the

286
00:12:42,000 --> 00:12:43,300
screen right at this moment.

287
00:12:43,300 --> 00:12:45,900
This is what we're drawing to, okay?

288
00:12:46,300 --> 00:12:51,100
And now I'm going to draw in our are sort of coordinate system, right?

289
00:12:51,100 --> 00:12:54,600
That we're actually filling at least I'm going to try to like so there

290
00:12:54,600 --> 00:12:55,100
we go.

291
00:12:55,700 --> 00:12:58,300
So here is that Y axis pointing out here.

292
00:12:58,400 --> 00:12:59,800
Here's that origin down.

293
00:13:00,000 --> 00:13:00,400
Here.

294
00:13:00,800 --> 00:13:04,700
And here is our x-axis here, right?

295
00:13:05,000 --> 00:13:08,100
And so we now know that this is essentially what we are filling,

296
00:13:08,200 --> 00:13:08,500
right?

297
00:13:08,500 --> 00:13:09,700
We are filling this region.

298
00:13:09,700 --> 00:13:10,100
Oops.

299
00:13:10,800 --> 00:13:12,000
Due to do.

300
00:13:12,600 --> 00:13:16,000
So, what we know is we're going to have a bunch of pixels who fall

301
00:13:16,000 --> 00:13:17,300
inside these lines, right?

302
00:13:17,300 --> 00:13:21,500
Like this, at least this pixel, this pixel, this pixel, this pixel,

303
00:13:21,500 --> 00:13:24,300
this pixel this pixel, right?

304
00:13:24,700 --> 00:13:28,100
They fall inside the lines, right?

305
00:13:28,900 --> 00:13:33,800
So these individual pixels that fall inside the lines, we know that we

306
00:13:33,800 --> 00:13:36,700
are going to fill them in and currently we're filling them with a

307
00:13:36,700 --> 00:13:37,300
solid color.

308
00:13:37,300 --> 00:13:41,700
So what we want to do is say for one of these pixels, what would be

309
00:13:41,700 --> 00:13:45,000
the way to look up into the texture to figure out what color we

310
00:13:45,000 --> 00:13:47,100
actually should put their right.

311
00:13:47,400 --> 00:13:50,900
And what's interesting about this is we actually have a pretty

312
00:13:50,900 --> 00:13:53,900
straightforward way of knowing what that is, right?

313
00:13:54,000 --> 00:13:57,900
Because all it would be is all we have to do if we wanted to solve

314
00:13:57,900 --> 00:13:58,400
that is

315
00:13:58,800 --> 00:14:02,900
Figure out where, What proportion of the x axis, it took to get there

316
00:14:03,100 --> 00:14:06,500
and What proportion of the y-axis it took to get there, right?

317
00:14:06,500 --> 00:14:10,100
Because we already know that if we start at the origin and started

318
00:14:10,100 --> 00:14:12,600
walking out on the y-axis, right?

319
00:14:12,800 --> 00:14:17,500
If we walked out one units along the y-axis, we'd be here because

320
00:14:17,500 --> 00:14:19,700
however, long it is, that's how far we would step.

321
00:14:19,700 --> 00:14:21,800
We Step 1 x, the y axis, right?

322
00:14:22,300 --> 00:14:26,300
And so, what we really want to know is how far along the y-axis this

323
00:14:26,300 --> 00:14:28,600
actually was because however, far

324
00:14:28,700 --> 00:14:29,700
Along the y-axis.

325
00:14:29,700 --> 00:14:35,200
That was, that is how that, that is the value, right?

326
00:14:36,600 --> 00:14:39,400
Because again, if we were to use these normal, is this normalized

327
00:14:39,400 --> 00:14:42,100
thing here where we're saying that you ranges from 0 to 1 and V range

328
00:14:42,100 --> 00:14:46,300
from 0 to 1, then just a v that said, how far from 0 to 1.

329
00:14:46,300 --> 00:14:49,800
We were along this axis would be the correct answer and similarly

330
00:14:49,800 --> 00:14:51,800
mapped onto the x-axis, right?

331
00:14:51,900 --> 00:14:52,400
That would be.

332
00:14:52,400 --> 00:14:55,900
Are you so really this value here?

333
00:14:56,100 --> 00:14:58,500
Normalized for the length of the y axis.

334
00:14:58,700 --> 00:14:59,900
Would be RV.

335
00:15:00,000 --> 00:15:03,800
And this length, here, normalized for the length of the y axis would

336
00:15:03,800 --> 00:15:04,100
be.

337
00:15:04,100 --> 00:15:05,800
Are you see what I'm saying?

338
00:15:07,000 --> 00:15:10,100
So, let's take a quick look at what's going to happen here, right?

339
00:15:11,000 --> 00:15:14,800
So, if we were to take a given pixel position, right?

340
00:15:14,800 --> 00:15:17,100
So there's our given pixel position, right?

341
00:15:17,200 --> 00:15:22,100
That's P if we're to take out, given pixel position, what will happen

342
00:15:22,300 --> 00:15:25,100
if we dot it onto the y-axis, right?

343
00:15:25,100 --> 00:15:27,900
Because remember the dot product is what measures things against it.

344
00:15:28,000 --> 00:15:29,800
So if I want to do is projection, I know.

345
00:15:30,000 --> 00:15:31,400
Oh that if I was to do.

346
00:15:31,700 --> 00:15:36,400
So let's let's in fact, also say that P instead of here, let's pre say

347
00:15:36,400 --> 00:15:37,700
that we've subtracted the origin.

348
00:15:37,700 --> 00:15:39,800
So it's actually this Vector here, right?

349
00:15:39,900 --> 00:15:41,300
We can call that something else.

350
00:15:41,600 --> 00:15:42,700
I'm not sure what we would call it.

351
00:15:42,700 --> 00:15:46,000
Let's let's call it instead of P.

352
00:15:46,000 --> 00:15:49,300
Let's call that R&D or something, right?

353
00:15:49,300 --> 00:15:50,000
So that's D.

354
00:15:50,900 --> 00:15:55,500
So if I were to take D and dotted against the y-axis, so, I've got its

355
00:15:55,500 --> 00:15:59,900
d.y right, what does that equal?

356
00:16:00,500 --> 00:16:03,100
Well, I hope you remember this by now, because we say it so many

357
00:16:03,100 --> 00:16:08,300
times, it's the length of d right times the length of Y times, the

358
00:16:08,300 --> 00:16:11,100
cosine of the angle between them, right?

359
00:16:11,400 --> 00:16:14,400
That's what that's what that actually equals, right?

360
00:16:15,100 --> 00:16:22,300
And so excuse me and so what I'm going to get here is I'm going to get

361
00:16:22,300 --> 00:16:25,700
whatever this value actually would be but with a bunch of lengths

362
00:16:25,700 --> 00:16:26,500
inside it.

363
00:16:26,700 --> 00:16:27,200
Right.

364
00:16:27,300 --> 00:16:29,800
I've got a bunch of links in there that I don't actually want.

365
00:16:29,900 --> 00:16:30,200
Aunt?

366
00:16:30,200 --> 00:16:33,000
Because I don't know what the length of D is and I don't know what the

367
00:16:33,000 --> 00:16:35,900
length of Y is and really, what I wanted is, I want a number that goes

368
00:16:35,900 --> 00:16:41,000
from 0 to 1 that says, how far along this thing, it went right.

369
00:16:41,700 --> 00:16:44,200
And so it's an issue, right?

370
00:16:44,200 --> 00:16:45,300
There's a problem here.

371
00:16:45,700 --> 00:16:47,600
It's not something that I could use directly.

372
00:16:47,800 --> 00:16:52,900
So, let's say, temporarily right that, I were to normalize these

373
00:16:52,900 --> 00:16:53,600
vectors, right?

374
00:16:53,600 --> 00:16:56,300
So I were to take them and I were to normalize them.

375
00:16:56,300 --> 00:16:59,300
So I know that these links are one and one, right?

376
00:16:59,400 --> 00:16:59,800
So I

377
00:17:00,000 --> 00:17:04,099
To say like, okay D and the y axis are now, just going to be vectors

378
00:17:04,099 --> 00:17:07,599
and all I'm going to do is look at the cosine in between them, right?

379
00:17:07,599 --> 00:17:11,900
So all I'm going to do is I'm going to try and figure out what this

380
00:17:12,500 --> 00:17:13,200
length is.

381
00:17:13,200 --> 00:17:16,300
If the y axis was equal to 1, right?

382
00:17:16,300 --> 00:17:17,800
Was it was already unit length.

383
00:17:19,099 --> 00:17:19,599
Okay?

384
00:17:19,800 --> 00:17:23,800
And so if I did that, right, that would just be sort of the normalized

385
00:17:23,800 --> 00:17:24,099
D.

386
00:17:24,099 --> 00:17:26,599
I don't know what, we'll call that we can call that denormalized,

387
00:17:26,599 --> 00:17:27,200
right?

388
00:17:27,599 --> 00:17:32,200
And why normalized if I did that then I would know that I would just

389
00:17:32,200 --> 00:17:36,200
have that cosine term purely because both of these are equal to 1 and

390
00:17:36,200 --> 00:17:37,900
they would go away, right?

391
00:17:38,500 --> 00:17:39,900
And so let's think about that for a second.

392
00:17:39,900 --> 00:17:44,700
Does that actually give us what we you know, the the value that we

393
00:17:44,700 --> 00:17:45,900
actually want right?

394
00:17:45,900 --> 00:17:48,800
Does that actually give us the the V chord

395
00:17:48,900 --> 00:17:52,100
It if you will or the you coordinate, if we were to do it for the x

396
00:17:52,100 --> 00:17:56,200
axis, does that actually give us what we want and so let's think about

397
00:17:56,200 --> 00:17:58,200
that, excuse me.

398
00:17:59,100 --> 00:17:59,600
So

399
00:18:00,000 --> 00:18:06,200
Way to go about thinking about this problem was, if we were to, you

400
00:18:06,200 --> 00:18:10,900
know, if we were to normalize just the axis, but leave the point the

401
00:18:10,900 --> 00:18:12,100
same length, right?

402
00:18:12,100 --> 00:18:16,600
So let's say I was going to do D, transpose transpose, y, normalized,

403
00:18:16,600 --> 00:18:17,100
right.

404
00:18:17,300 --> 00:18:20,800
That would give me the length of D times the cosine of theta, and it

405
00:18:20,800 --> 00:18:22,300
would take this out of the equation.

406
00:18:22,300 --> 00:18:27,200
Write this value would tell me exactly the location of where this was

407
00:18:27,200 --> 00:18:29,300
along that y-axis in.

408
00:18:30,000 --> 00:18:32,500
At distance in actual pixel distance, right?

409
00:18:32,700 --> 00:18:37,200
So in order to figure out how far along the y-axis, we were the first

410
00:18:37,200 --> 00:18:40,400
thing we would do with that, right, is to divide it by the total

411
00:18:40,400 --> 00:18:41,600
length we could have gone.

412
00:18:41,600 --> 00:18:44,300
Which was that length to begin with, right?

413
00:18:45,100 --> 00:18:49,800
So if you think about it, right?

414
00:18:49,800 --> 00:18:55,400
What we really wanted to do here is we sort of wanted to divide by the

415
00:18:55,400 --> 00:18:59,000
length of Y twice if that makes any sense, right?

416
00:18:59,000 --> 00:18:59,900
Like what we

417
00:19:00,000 --> 00:19:04,900
To do was we wanted to say okay we wish we had why normalized?

418
00:19:04,900 --> 00:19:07,600
Because this is the value that comes out this.

419
00:19:07,600 --> 00:19:09,600
This value here doesn't really help us.

420
00:19:09,700 --> 00:19:13,500
It doesn't look like because this value is divided by the length of D

421
00:19:13,500 --> 00:19:14,700
and the length of Y.

422
00:19:14,900 --> 00:19:17,300
But it looks like what we would actually want to figure out this

423
00:19:17,300 --> 00:19:18,200
point, right?

424
00:19:18,400 --> 00:19:21,700
Is we want to figure out the length of tubing

425
00:19:22,700 --> 00:19:26,700
We'd want to figure out that cosine term divided by the squared length

426
00:19:26,700 --> 00:19:29,900
of Y, if that makes sense /, that that y twice.

427
00:19:30,100 --> 00:19:31,300
And so, let's do that one more time.

428
00:19:31,300 --> 00:19:34,000
Just so we can kind of see what's going on there and make it a little

429
00:19:34,000 --> 00:19:34,500
clearer, right?

430
00:19:34,500 --> 00:19:36,700
So I'm going to draw it this way, right?

431
00:19:36,800 --> 00:19:38,900
So here's the the measurement axis, right?

432
00:19:38,900 --> 00:19:43,900
Here's the measurement axis, and this could be y or X, right?

433
00:19:44,500 --> 00:19:47,900
And so, what I'm going to say ahead of time is that this is unit

434
00:19:47,900 --> 00:19:49,000
length, right?

435
00:19:49,200 --> 00:19:52,300
So the length of this axis is going to be equal to 1.

436
00:19:52,500 --> 00:19:53,200
Right?

437
00:19:53,500 --> 00:19:56,500
And then I know I've got some length, right?

438
00:19:56,500 --> 00:19:59,200
I don't know how long it is, but I know I've got some length.

439
00:19:59,200 --> 00:20:02,500
That's the length of my quadrilateral, right?

440
00:20:03,200 --> 00:20:05,700
So that's the length of this thing, right?

441
00:20:05,700 --> 00:20:07,800
So let's say let's call this axis.

442
00:20:07,800 --> 00:20:09,700
Let's say that a is the axis, right?

443
00:20:09,700 --> 00:20:11,700
So the length of a is 1, right?

444
00:20:11,700 --> 00:20:14,700
And then we've got another length, let's call that L, right?

445
00:20:14,800 --> 00:20:16,800
And L is going to equal, you know?

446
00:20:16,800 --> 00:20:19,100
However, however long the texture is.

447
00:20:19,100 --> 00:20:21,300
So this is the actual our story of the quadrilateral.

448
00:20:21,300 --> 00:20:22,300
So this is our actual

449
00:20:22,500 --> 00:20:23,400
Quadrilateral.

450
00:20:24,500 --> 00:20:24,800
Wife.

451
00:20:26,200 --> 00:20:26,700
Right.

452
00:20:28,500 --> 00:20:32,600
So now if we have some point no matter where that point is, right?

453
00:20:32,600 --> 00:20:36,500
Here's our Point p and we projected onto this axis, right?

454
00:20:36,500 --> 00:20:40,100
We know we can do that by saying that that is the point.

455
00:20:40,400 --> 00:20:42,500
And again, this is the point I should do that.

456
00:20:42,500 --> 00:20:43,700
This will do d, right?

457
00:20:43,700 --> 00:20:45,500
So it's the - the origin, right?

458
00:20:45,500 --> 00:20:48,600
So D is always equal to P minus origin, right?

459
00:20:48,600 --> 00:20:49,100
There we go.

460
00:20:49,700 --> 00:20:53,800
So if I take that D and I transpose it by a now, I get the length of D

461
00:20:53,800 --> 00:20:57,600
cosine Theta, and that's what I actually want to measure against that.

462
00:20:57,700 --> 00:20:59,900
That tells me how far in.

463
00:21:00,000 --> 00:21:00,700
Pixel space.

464
00:21:00,700 --> 00:21:04,400
I am over but now I want to turn that into a uniform coordinate that

465
00:21:04,400 --> 00:21:05,200
goes from 0 to 1.

466
00:21:05,200 --> 00:21:08,600
So I'm going to divide by that L, right?

467
00:21:08,900 --> 00:21:10,300
And again you can see that again.

468
00:21:10,300 --> 00:21:14,200
So that L that is just how long the axis would have been, right?

469
00:21:14,200 --> 00:21:18,100
That L is just the length that a would have been if I'd let the It Go

470
00:21:18,100 --> 00:21:19,400
the whole way, right?

471
00:21:19,400 --> 00:21:21,000
So you can kind of see where I'm getting that that.

472
00:21:21,200 --> 00:21:25,100
So really it looks to me like what we want is we want D transpose,

473
00:21:25,100 --> 00:21:26,500
the, the actual axis.

474
00:21:26,500 --> 00:21:29,900
So, whatever, the actual axis, the original version was

475
00:21:30,000 --> 00:21:30,400
For normalization.

476
00:21:30,400 --> 00:21:31,900
So like the y-axis, right?

477
00:21:31,900 --> 00:21:35,900
We want to do that to produce length of d, right?

478
00:21:35,900 --> 00:21:39,600
Length of Y cosine Theta.

479
00:21:39,600 --> 00:21:43,900
When we do that, we can then just divide that axis after we're done

480
00:21:43,900 --> 00:21:44,200
with it.

481
00:21:44,200 --> 00:21:49,400
We can divide that by its length twice, right?

482
00:21:49,400 --> 00:21:53,100
So whatever this length is, we do that twice, divide and divide and

483
00:21:53,100 --> 00:21:55,700
that produces this equation up here, right?

484
00:21:55,700 --> 00:21:59,500
It cancels, the why once and then still leaves that length on the

485
00:22:00,100 --> 00:22:04,100
So that looks like the correct value to me again, I just work that

486
00:22:04,100 --> 00:22:04,300
through.

487
00:22:04,600 --> 00:22:07,400
I have no preconceived notion of what the answer actually should be.

488
00:22:07,400 --> 00:22:09,600
That's just what I thought it should be based on.

489
00:22:09,600 --> 00:22:13,000
We said, I may have made a math mistake or two along the way, but

490
00:22:13,000 --> 00:22:15,600
that's the first thing that I would like to try, right?

491
00:22:15,900 --> 00:22:18,500
And so now, let's talk about how to get that.

492
00:22:18,800 --> 00:22:22,700
So, ink here, when we actually do this pixel P - origin, right?

493
00:22:23,000 --> 00:22:25,500
You can notice that if I actually were to refactor this and let's just

494
00:22:25,500 --> 00:22:25,900
do that.

495
00:22:26,200 --> 00:22:27,800
I said we were going to do simpler origin.

496
00:22:27,800 --> 00:22:28,800
We didn't do it yet.

497
00:22:28,800 --> 00:22:30,100
But if I were to

498
00:22:30,100 --> 00:22:32,600
A factor this by Distributing this negative, right?

499
00:22:32,800 --> 00:22:37,700
If I distribute this negative, that would essentially distribute out

500
00:22:37,700 --> 00:22:40,800
and make this negative here and negative here.

501
00:22:40,900 --> 00:22:44,600
Right, again, distribute, the negative negative, negative negative

502
00:22:44,800 --> 00:22:47,600
should be the negative negative negative, right?

503
00:22:49,300 --> 00:22:52,100
And if I recompile that, you see that we didn't change anything,

504
00:22:52,100 --> 00:22:52,300
right?

505
00:22:52,300 --> 00:22:54,600
So, just to show you that - at what that allows me to do too, is

506
00:22:54,600 --> 00:22:57,300
introduced that value that I just said d, right?

507
00:22:57,400 --> 00:22:59,900
So if I go ahead and take my pixel P -

508
00:23:00,000 --> 00:23:01,000
And make that D.

509
00:23:01,000 --> 00:23:04,000
You can see that these are just all the same thing, right?

510
00:23:04,400 --> 00:23:07,500
We still haven't simplified that but, you know, same basic idea.

511
00:23:07,600 --> 00:23:09,500
Oops, they're right.

512
00:23:09,800 --> 00:23:11,900
But if I do that now, same exact thing.

513
00:23:12,000 --> 00:23:14,500
And there's that devalue that I actually wanted, we were already kind

514
00:23:14,500 --> 00:23:15,800
of using it to compute the thing.

515
00:23:16,200 --> 00:23:18,900
So now, if I want to compute what the texture coordinates are, right?

516
00:23:18,900 --> 00:23:21,700
I want to compute that you and that V, right?

517
00:23:21,800 --> 00:23:24,200
So if I want to compute the you coordinate, well, first of all, I

518
00:23:24,200 --> 00:23:26,400
suppose we should say, we don't need to do this unless we're actually

519
00:23:26,400 --> 00:23:27,000
inside.

520
00:23:27,000 --> 00:23:27,500
Right?

521
00:23:27,800 --> 00:23:29,700
Since they're already doing a test, we might as well not to take

522
00:23:29,700 --> 00:23:29,900
offense.

523
00:23:30,100 --> 00:23:31,300
Extra look up unless were inside.

524
00:23:31,700 --> 00:23:34,100
So we want to do is say okay, we've got that you value.

525
00:23:34,200 --> 00:23:36,100
And when I said that was going to be, as I said that was going to be

526
00:23:36,100 --> 00:23:37,400
the dot product, right?

527
00:23:37,400 --> 00:23:40,600
So we're going to do the dot product of whichever acts try measure on.

528
00:23:40,600 --> 00:23:43,000
So for the you, we're doing the x-axis, right?

529
00:23:43,400 --> 00:23:47,100
And we want to do that D times, the x axis, right?

530
00:23:47,200 --> 00:23:49,800
Then what we want to do is we want to multiply that by the length, of

531
00:23:49,800 --> 00:23:51,300
the x axis inverted, right?

532
00:23:51,300 --> 00:23:51,700
Squared.

533
00:23:51,700 --> 00:23:52,100
Sorry,

534
00:23:53,000 --> 00:23:53,500
Right.

535
00:23:53,600 --> 00:23:57,000
So, I want to divide, which means I'll just I'll pre do a one over for

536
00:23:57,000 --> 00:23:57,300
it.

537
00:23:57,300 --> 00:23:59,800
I want to divide by that X.

538
00:24:00,000 --> 00:24:02,800
Excess length, right squared?

539
00:24:03,500 --> 00:24:05,100
So that's what I actually want to do.

540
00:24:05,400 --> 00:24:09,900
That make sense and similarly, for the V, I would do the exact

541
00:24:09,900 --> 00:24:10,600
opposite.

542
00:24:10,600 --> 00:24:10,900
I'm sorry.

543
00:24:10,900 --> 00:24:14,100
Do the exact same thing, but for the y-axis, right?

544
00:24:14,200 --> 00:24:17,300
And that should produce my un my V, right?

545
00:24:17,500 --> 00:24:20,500
Similarly, I could just think of this as a vector, the UV Vector,

546
00:24:20,700 --> 00:24:21,300
right?

547
00:24:21,700 --> 00:24:24,500
And that's just, you know, composing these two together.

548
00:24:24,500 --> 00:24:28,400
So that when we pass it to a texture sampling function, you know, we

549
00:24:28,400 --> 00:24:29,400
could do that, right?

550
00:24:29,400 --> 00:24:29,900
If that makes sense.

551
00:24:30,000 --> 00:24:30,200
Ence.

552
00:24:30,700 --> 00:24:31,300
So there we go.

553
00:24:32,600 --> 00:24:33,200
All right.

554
00:24:33,300 --> 00:24:38,300
So let's let's go ahead and pre compute these values because we need

555
00:24:38,300 --> 00:24:39,300
to write.

556
00:24:39,300 --> 00:24:42,600
So, when we get that x axis, and that Y axis, if we want to do the

557
00:24:42,600 --> 00:24:46,100
inverse of the length squared, we just do length squared x axis,

558
00:24:46,100 --> 00:24:46,300
right?

559
00:24:46,300 --> 00:24:49,800
That's just the inverse of that and the why, right?

560
00:24:49,800 --> 00:24:52,000
So is one over in both cases, like so.

561
00:24:52,600 --> 00:24:55,000
And then we're Computing r u and v s, at least in theory.

562
00:24:55,400 --> 00:24:56,300
We are Computing them.

563
00:24:56,500 --> 00:24:58,200
And of course we haven't actually done the lookups yet.

564
00:24:58,200 --> 00:24:58,800
So that's fine.

565
00:24:59,200 --> 00:25:02,200
So now all we would need to do is actually look up the UN

566
00:25:02,700 --> 00:25:04,400
Inside the texter.

567
00:25:04,500 --> 00:25:06,800
And so, I'm going to do a function for that now or I guess I don't

568
00:25:06,800 --> 00:25:08,600
really need to do a function, I can just write it in place.

569
00:25:09,100 --> 00:25:09,700
That's fine.

570
00:25:10,200 --> 00:25:12,000
So, we've got that texture, right?

571
00:25:12,000 --> 00:25:18,700
We've got the, we've got the texture and it's one of those loaded

572
00:25:18,700 --> 00:25:19,700
textures, right?

573
00:25:19,700 --> 00:25:21,700
And so I believe is that in here?

574
00:25:21,700 --> 00:25:23,700
Whereas loaded bitmap to find?

575
00:25:23,700 --> 00:25:24,400
I don't even know.

576
00:25:24,400 --> 00:25:25,600
Loaded bitmap, there it is.

577
00:25:25,800 --> 00:25:29,900
Okay, so what I want to do is I want to look up into here to try and

578
00:25:30,100 --> 00:25:32,200
get whatever the actual value is.

579
00:25:32,400 --> 00:25:35,900
Is that the pixel should be to replace color 32, right?

580
00:25:37,000 --> 00:25:40,400
So if I'm going to do that, I'm going to go ahead and say color 32

581
00:25:40,600 --> 00:25:42,300
equals some look up into the texture.

582
00:25:42,800 --> 00:25:45,200
I'm going to first need X Y coordinates.

583
00:25:45,300 --> 00:25:45,800
Right.

584
00:25:46,200 --> 00:25:51,200
So what I can do there is say alright that the x-coordinate is going

585
00:25:51,200 --> 00:25:56,300
to be equal to the you and in fact, I guess this would make it a good

586
00:25:56,300 --> 00:25:58,300
reason to have not bothered to wrap them up.

587
00:25:58,300 --> 00:25:59,600
At least not at the moment.

588
00:25:59,800 --> 00:26:02,400
So I'll go back to using it just like this for now.

589
00:26:02,600 --> 00:26:03,100
There we go.

590
00:26:03,400 --> 00:26:04,500
There is our u and v.

591
00:26:06,300 --> 00:26:06,600
Like so

592
00:26:08,200 --> 00:26:12,100
So that you coordinate I just need to multiply that by however big

593
00:26:12,100 --> 00:26:14,300
this texture actually is right.

594
00:26:14,400 --> 00:26:17,800
So whatever the texture is I just need to multiply it by the width.

595
00:26:17,900 --> 00:26:21,600
And of course I need to subtract 1 from that with first because I need

596
00:26:21,600 --> 00:26:24,600
to make sure that the the final if the value is actually one, I want

597
00:26:24,600 --> 00:26:26,300
to end on that actual final text.

598
00:26:26,300 --> 00:26:26,600
Alright.

599
00:26:26,600 --> 00:26:29,600
I want to end on that final piece of that bitmap, right?

600
00:26:30,100 --> 00:26:32,900
So what I want to do here is just say all right take whatever that you

601
00:26:33,000 --> 00:26:36,600
proportion is and furthermore I could do in a certain here for just

602
00:26:36,700 --> 00:26:40,400
for the time being say that these are within legal range since we're

603
00:26:40,400 --> 00:26:44,200
doing some debugging here, we want to make sure that that's the case,

604
00:26:44,300 --> 00:26:44,700
right?

605
00:26:44,800 --> 00:26:48,100
So what we'd like to do is do that, and once I do this as well, one

606
00:26:48,100 --> 00:26:52,300
thing we might want to do again is is round this properly so we might

607
00:26:52,300 --> 00:26:57,500
want to do something like that right where we go ahead and and sort of

608
00:26:58,600 --> 00:26:59,800
Hoops that right.

609
00:27:00,000 --> 00:27:01,200
I could do that right at all.

610
00:27:02,500 --> 00:27:03,100
There we go.

611
00:27:03,900 --> 00:27:07,500
So texture with times, you know, that's correct, never mind.

612
00:27:07,700 --> 00:27:09,200
Well, we'll deal with the rounding second.

613
00:27:09,600 --> 00:27:10,400
All right, there we go.

614
00:27:11,100 --> 00:27:11,500
Okay.

615
00:27:11,700 --> 00:27:14,400
So when we do this, when we do this lookup or multiplying by the you

616
00:27:14,400 --> 00:27:16,800
that's going to get us all the way there, and then, this is a

617
00:27:16,800 --> 00:27:17,400
truncation.

618
00:27:17,400 --> 00:27:20,400
So what I was sort of saying, as well, once we do that, what I'd like

619
00:27:20,400 --> 00:27:24,900
to do is add the point five in so that we will round in either

620
00:27:24,900 --> 00:27:28,500
direction, depending on which, which one we got, okay.

621
00:27:30,100 --> 00:27:34,300
Trying to think, I'm just trying to think of that ever gives me know

622
00:27:34,300 --> 00:27:36,000
that that will never produce an out of bounds.

623
00:27:36,000 --> 00:27:36,200
So.

624
00:27:36,200 --> 00:27:39,800
Okay, so we're good at least for now and so the same exact thing is

625
00:27:39,800 --> 00:27:40,700
true for the height, right?

626
00:27:40,700 --> 00:27:41,200
No difference.

627
00:27:41,200 --> 00:27:45,700
There exact same thing and we've got the u and v test in here, just to

628
00:27:45,700 --> 00:27:48,000
see whether we're fetching outside at all.

629
00:27:48,100 --> 00:27:50,400
And let's go ahead and compile that and just see if we.

630
00:27:50,800 --> 00:27:53,500
So, we're at the moment, we're never Computing a u and v that's out of

631
00:27:53,500 --> 00:27:53,800
range.

632
00:27:53,800 --> 00:27:54,700
So that's a good thing.

633
00:27:55,300 --> 00:27:58,800
And similarly, we could assert that our X is greater than equal to 0

634
00:27:58,800 --> 00:27:59,700
and less.

635
00:28:00,100 --> 00:28:02,600
Then or not just less than the texture with.

636
00:28:02,700 --> 00:28:03,200
Right?

637
00:28:03,200 --> 00:28:08,100
So that we know we'd never be fetching out of bounds, like so oops,

638
00:28:08,100 --> 00:28:12,400
that's with my bad, I meant height.

639
00:28:12,500 --> 00:28:13,000
There we go.

640
00:28:15,800 --> 00:28:17,800
So now yet we're still not fetching out of bounds.

641
00:28:17,800 --> 00:28:19,600
So that's good, everyone's happy.

642
00:28:20,300 --> 00:28:22,900
And so now what I'd like to do is go ahead and actually do that look

643
00:28:22,900 --> 00:28:25,500
up right which is pretty easy for us to do we know exactly how to do

644
00:28:25,500 --> 00:28:25,700
this.

645
00:28:25,700 --> 00:28:26,800
We've done it a million times.

646
00:28:27,200 --> 00:28:31,000
Well, Millions a little bit much for to potentially but you know we've

647
00:28:31,000 --> 00:28:36,700
done it many times but it that way we start with a pointer to the base

648
00:28:37,200 --> 00:28:37,800
right.

649
00:28:38,000 --> 00:28:43,000
We then want to walk along the rows as far as we need to to get to the

650
00:28:43,000 --> 00:28:43,800
correct row.

651
00:28:43,800 --> 00:28:44,400
So that's just

652
00:28:44,500 --> 00:28:47,700
To be whatever the y-coordinate is times the pitch.

653
00:28:47,700 --> 00:28:53,300
And then we need to walk over right by however many we have with wise.

654
00:28:53,500 --> 00:28:56,700
And that's just going to be however, big a pixel is, Right?

655
00:28:56,700 --> 00:29:00,200
Which we know what the pixels are are 4 bytes per, right?

656
00:29:00,700 --> 00:29:04,200
And so that will give us the correct pixel that we're trying to access

657
00:29:04,300 --> 00:29:04,700
their.

658
00:29:05,500 --> 00:29:09,800
And in fact, I'll do it this way you, and this is like our Texel.

659
00:29:09,800 --> 00:29:12,400
This is, this is the texture texture that we're looking for, right

660
00:29:12,500 --> 00:29:13,000
makes sense.

661
00:29:13,700 --> 00:29:14,400
And then, what I want to

662
00:29:14,400 --> 00:29:17,800
Do is I want to I basically just read that in and so this is the

663
00:29:17,800 --> 00:29:22,300
textile value I guess I'll call us text Will pointer right whatever

664
00:29:22,300 --> 00:29:25,200
the Texel pointer is, I just want to treat it.

665
00:29:25,200 --> 00:29:29,500
Like it was a 32-bit value at that location want to read out.

666
00:29:29,500 --> 00:29:30,200
That's the RGB.

667
00:29:30,200 --> 00:29:33,400
And the a I was going to read that out and then we'll store it.

668
00:29:33,400 --> 00:29:38,100
Exactly right like so-and-so.

669
00:29:38,100 --> 00:29:38,800
Hey guess what?

670
00:29:39,200 --> 00:29:41,600
We've got texture mapping, right?

671
00:29:41,600 --> 00:29:44,400
And there's our tree and as you can see,

672
00:29:44,500 --> 00:29:45,200
See, very simple.

673
00:29:45,200 --> 00:29:45,300
Work.

674
00:29:45,300 --> 00:29:46,100
The first time.

675
00:29:46,100 --> 00:29:48,500
Nothing particularly fancy going on there.

676
00:29:48,900 --> 00:29:53,800
We can look at it a little more closely and you know, that's a that's

677
00:29:53,800 --> 00:29:55,300
texture mapping in a nutshell, right?

678
00:29:55,300 --> 00:29:59,800
We can add the, we can add Alpha blending to this routine.

679
00:30:00,000 --> 00:30:03,400
If we want to still do the Alphabet app so that Alpha blending that we

680
00:30:03,400 --> 00:30:07,100
were doing before, you know, we can we can make that happen.

681
00:30:07,100 --> 00:30:11,400
In fact we probably should Well that took almost no time at all but

682
00:30:11,400 --> 00:30:11,900
there you go.

683
00:30:12,000 --> 00:30:16,200
All right, we haven't handled a lot of the sort of finicky or stuff

684
00:30:16,200 --> 00:30:17,600
and we haven't done any optimization.

685
00:30:17,600 --> 00:30:20,300
So I suppose that's the more fancy stuff but ladies and gentlemen

686
00:30:20,300 --> 00:30:22,000
texture mapping, not very difficult.

687
00:30:22,700 --> 00:30:26,600
So so that's kind of the basics of it.

688
00:30:26,600 --> 00:30:29,800
Let me go ahead and add in that, sort of that Al finesse to it.

689
00:30:30,000 --> 00:30:30,400
It right?

690
00:30:30,400 --> 00:30:32,700
We have the alpha stuff happening here.

691
00:30:32,800 --> 00:30:36,900
So what I'm going to do for now is I'll just go ahead and grab this in

692
00:30:36,900 --> 00:30:39,800
here what we were doing before for the alpha.

693
00:30:39,900 --> 00:30:43,100
And so, if I want to do that when we're in this routine, right?

694
00:30:43,100 --> 00:30:47,400
Let's go ahead and and paste that in there so that we can kind of.

695
00:30:47,800 --> 00:30:51,300
Yeah, so that we can do that editing.

696
00:30:51,900 --> 00:30:54,900
So we don't have this anymore and we don't have that.

697
00:30:55,100 --> 00:30:57,400
We've just got the pixel right going on here.

698
00:30:57,600 --> 00:30:59,800
And so, in here, you know, after I do that textile

699
00:31:00,100 --> 00:31:03,500
What I need to do is I need to go ahead and make sure that we are

700
00:31:03,500 --> 00:31:04,700
reading from the right places, right?

701
00:31:04,700 --> 00:31:06,800
So there's the pixel that's coming in there.

702
00:31:06,800 --> 00:31:09,600
It is, will do that Alpha stuff on it right.

703
00:31:09,700 --> 00:31:14,900
Then we've got the Texel that's coming in and that Texel is our source

704
00:31:14,900 --> 00:31:16,000
now, right?

705
00:31:16,400 --> 00:31:21,200
Like so, and and I don't know if that's it.

706
00:31:21,200 --> 00:31:24,500
Let's see legal in direction of the Texel.

707
00:31:24,500 --> 00:31:24,800
Oh right.

708
00:31:24,800 --> 00:31:26,000
We don't need to do star on that.

709
00:31:26,000 --> 00:31:27,300
It's already been dereference.

710
00:31:27,700 --> 00:31:29,800
So now all we need is that Alpha

711
00:31:30,000 --> 00:31:34,000
that's coming in so that the alphabets going to modulate this and I'll

712
00:31:34,000 --> 00:31:37,600
just go ahead and say that that that's actually because that c Alpha,

713
00:31:37,700 --> 00:31:39,200
we're getting a color passed in that.

714
00:31:39,200 --> 00:31:41,000
Does have an alpha value, right?

715
00:31:41,000 --> 00:31:44,900
It's this one right here and so it will do is, will say color dot a

716
00:31:44,900 --> 00:31:45,400
right there.

717
00:31:45,400 --> 00:31:47,800
That's our, that's our modified Alpha, right?

718
00:31:49,300 --> 00:31:50,800
And that's that color dot a

719
00:31:53,700 --> 00:31:56,500
Corn on a port on it, right?

720
00:31:57,900 --> 00:32:03,000
And so now we are correctly doing the alpha composite to which means

721
00:32:03,000 --> 00:32:06,800
that we have the texture mapping working with all the same features

722
00:32:06,800 --> 00:32:09,300
that we previously had working in our bitmaps.

723
00:32:09,700 --> 00:32:12,000
And that's pretty awesome as well.

724
00:32:12,000 --> 00:32:16,400
And so I do I'm gonna try to think if we should quit while we're ahead

725
00:32:16,400 --> 00:32:19,300
here because the next sort of stuff that we'd be getting into, would

726
00:32:19,300 --> 00:32:20,200
be a little fancy.

727
00:32:20,200 --> 00:32:21,300
But yeah.

728
00:32:23,700 --> 00:32:24,400
I mean.

729
00:32:27,000 --> 00:32:28,500
Let's just, let's just do it.

730
00:32:28,500 --> 00:32:31,600
All right, so what we're going to do next is first of all, we need to

731
00:32:31,600 --> 00:32:34,900
slow this down and we need to do some stuff to kind of get us selves

732
00:32:34,900 --> 00:32:38,400
in position to understand the reasons why we might need to do some of

733
00:32:38,400 --> 00:32:39,600
the things that we're about to do.

734
00:32:39,600 --> 00:32:41,100
So let's let's clean this up.

735
00:32:41,100 --> 00:32:45,000
Let's stop getting fancy in the.

736
00:32:45,000 --> 00:32:47,400
In this place we can get fancy and other places.

737
00:32:47,400 --> 00:32:50,000
So for now I'm going to say let's keep this thing.

738
00:32:50,100 --> 00:32:52,600
Fairly uniformly sized for

739
00:32:55,700 --> 00:32:57,200
What just happened?

740
00:32:58,200 --> 00:32:59,500
I have no idea.

741
00:33:01,300 --> 00:33:05,700
So we have produced, we have produced a hue that is outside our

742
00:33:05,700 --> 00:33:06,400
Precision.

743
00:33:10,100 --> 00:33:14,500
Well, you know, it's bound to happen, these kind of need to be clamped

744
00:33:16,600 --> 00:33:18,100
Or we need to modify our filter rules.

745
00:33:18,100 --> 00:33:21,100
But I don't know if we may have to actually just clamp these most of

746
00:33:21,100 --> 00:33:26,500
the time, that's not actually a problem for us, we can keep going.

747
00:33:26,500 --> 00:33:30,300
I think if that makes sense, I don't think there's any real problem

748
00:33:30,300 --> 00:33:31,100
with that, right?

749
00:33:31,200 --> 00:33:33,700
But because it's not actually going to fetch out of bounds if the you

750
00:33:33,700 --> 00:33:34,900
is slightly over.

751
00:33:35,500 --> 00:33:37,800
But yeah, we're going to have to figure out how you want to handle

752
00:33:37,800 --> 00:33:38,000
that.

753
00:33:38,000 --> 00:33:40,800
In in Cindy, it'll be pretty easy for us to clamp those so it's not

754
00:33:40,800 --> 00:33:43,100
really a huge deal, but yeah, all right.

755
00:33:43,100 --> 00:33:46,200
So if we're in here what I wanted to do was go

756
00:33:46,400 --> 00:33:46,800
Incorrect.

757
00:33:46,800 --> 00:33:47,500
This stuff.

758
00:33:47,500 --> 00:33:48,900
What's the illegal in Direction?

759
00:33:48,900 --> 00:33:49,400
There we go.

760
00:33:50,300 --> 00:33:52,900
So that we're actually doing something.

761
00:33:52,900 --> 00:33:56,300
That's the same size everywhere, like so.

762
00:33:56,800 --> 00:34:00,700
And I wanted to make it bigger so we can see it at a larger scale and

763
00:34:00,700 --> 00:34:03,400
it's going to be slower obviously, because, again, we're not very

764
00:34:03,400 --> 00:34:06,400
optimal, but you can kind of see it going around there.

765
00:34:06,700 --> 00:34:11,500
So we've got that happening and we'd also like to, you know, what we

766
00:34:11,500 --> 00:34:13,699
should probably do too is maybe keep.

767
00:34:13,800 --> 00:34:16,100
Well, I don't know if we do that, we'll say.

768
00:34:16,300 --> 00:34:20,900
For a second, then what I'd like to do to is make that angle go much

769
00:34:20,900 --> 00:34:22,500
more slowly, okay?

770
00:34:23,600 --> 00:34:28,500
So I don't know if you can, can see that well enough on the stream,

771
00:34:29,300 --> 00:34:34,699
but you'll notice that it's kind of, I mean, when you kind of look at

772
00:34:34,699 --> 00:34:36,199
what's happening in there, right?

773
00:34:36,900 --> 00:34:40,900
It's not, it's very flickery and it's not really what we would want

774
00:34:40,900 --> 00:34:44,300
because we're kind of making giant pixels, right.

775
00:34:44,300 --> 00:34:48,300
We're like we're actually doing giant pixels at each step of the way

776
00:34:48,300 --> 00:34:51,000
and it kind of makes it so that it's not really taking into account

777
00:34:51,000 --> 00:34:56,500
sort of where we might happen to be sub-pixel e, right?

778
00:34:56,500 --> 00:35:01,100
And so, what I want to do is start to kind of talk about sub pixels

779
00:35:01,100 --> 00:35:05,800
and sub pixel accuracy, which obviously is going to involve a bunch

780
00:35:05,800 --> 00:35:06,100
more stuff.

781
00:35:06,100 --> 00:35:06,600
So, I figured

782
00:35:06,900 --> 00:35:09,900
Just I figure, I'll just get us started on that.

783
00:35:10,200 --> 00:35:14,800
And then we can kind of, we can kind of, I don't know next week, maybe

784
00:35:14,800 --> 00:35:18,300
we'll try to solidify most of it, but hopefully, you can see, maybe

785
00:35:18,300 --> 00:35:20,200
I'll make that even a little bit bigger.

786
00:35:22,500 --> 00:35:23,400
Yes, I don't care.

787
00:35:24,000 --> 00:35:28,100
So my statement maybe make it a little bit bigger and probably put it

788
00:35:28,100 --> 00:35:29,300
in the center of the screen to.

789
00:35:29,300 --> 00:35:30,500
I think that might be a good idea.

790
00:35:30,500 --> 00:35:34,600
So what I'd like to do here is when we do this what I might do is say

791
00:35:34,600 --> 00:35:36,800
okay the origin of it, I'm going to subtract

792
00:35:36,900 --> 00:35:41,600
Act half the x-axis and half the y-axis from it so that it remains in

793
00:35:41,600 --> 00:35:43,000
the center of the screen, right?

794
00:35:43,000 --> 00:35:47,900
Just offset it like so, so that we're kind of always looking at it

795
00:35:48,100 --> 00:35:50,900
right in that Center and you can.

796
00:35:51,000 --> 00:35:51,900
Yeah, I mean, I don't know.

797
00:35:51,900 --> 00:35:53,300
You can kind of see it.

798
00:35:53,300 --> 00:35:56,400
We basically just get a ton of aliasing there, right?

799
00:35:56,600 --> 00:35:59,200
And that's because we're just drawing pixels and we're looking up

800
00:35:59,200 --> 00:35:59,800
those pixels.

801
00:36:00,000 --> 00:36:04,500
We also have and you know what, let me let me show another thing to

802
00:36:04,500 --> 00:36:06,100
actually this maybe this is the best.

803
00:36:06,100 --> 00:36:07,300
My head is kind of spinning.

804
00:36:07,300 --> 00:36:09,200
I wasn't thinking I was going to talk about this today so I'm kind of

805
00:36:09,200 --> 00:36:10,400
thinking like okay what should I do?

806
00:36:10,600 --> 00:36:15,500
So maybe we'll do one more thing to before we start spinning this

807
00:36:15,500 --> 00:36:16,800
around and doing other stuff like that.

808
00:36:16,800 --> 00:36:21,800
Maybe what we'll do instead is will actually move it along, right?

809
00:36:21,800 --> 00:36:25,600
So what we'll do here is we'll say, Okay, instead of this stuff, we're

810
00:36:25,600 --> 00:36:26,700
not even going to do that, right?

811
00:36:26,700 --> 00:36:30,000
We're going to fix that x axis and the y axis.

812
00:36:30,000 --> 00:36:33,100
Y axis to just be their respective axes, right?

813
00:36:33,100 --> 00:36:34,200
We're not going to

814
00:36:35,900 --> 00:36:38,300
Do anything fancy with those, right?

815
00:36:39,000 --> 00:36:40,400
All we're going to do is do that.

816
00:36:40,500 --> 00:36:45,000
And let's see here, 300 300.

817
00:36:45,100 --> 00:36:49,100
So all we're going to do is, is that we're not going to change the

818
00:36:49,100 --> 00:36:49,900
angle at all.

819
00:36:50,200 --> 00:36:52,800
So, when we draw the thing, it's just a big tree, right?

820
00:36:52,800 --> 00:36:55,300
There's the big tree and you see, it's been magnified, right?

821
00:36:55,300 --> 00:36:58,600
Let's pixels or all kind of like a little rectangles because it's, you

822
00:36:58,600 --> 00:37:00,800
know, the bitmap is taller than it is wide.

823
00:37:00,800 --> 00:37:02,500
And so that's what happened, right?

824
00:37:03,000 --> 00:37:05,300
And what I want to do now is I want to just move,

825
00:37:05,400 --> 00:37:08,900
This guy slowly kind of left to right?

826
00:37:08,900 --> 00:37:09,500
That makes sense.

827
00:37:09,500 --> 00:37:13,800
So I'm going to take this angle value and I'm going to make another

828
00:37:13,800 --> 00:37:14,600
one, right?

829
00:37:14,600 --> 00:37:17,300
Which is going to be like displacement, right?

830
00:37:17,500 --> 00:37:22,100
And I'm going to make displacement be a function of that angle, right?

831
00:37:22,400 --> 00:37:24,900
So we'll kind of wobble back and forth.

832
00:37:25,100 --> 00:37:29,400
10 pixels to either side, I'll take that displacement and I'll put

833
00:37:29,400 --> 00:37:33,000
that displacement in so that it's basically like, you know, a

834
00:37:33,000 --> 00:37:35,200
displacement sort.

835
00:37:35,300 --> 00:37:39,700
Horizontally back and forth as, as the thing goes now.

836
00:37:41,100 --> 00:37:41,300
What?

837
00:37:41,300 --> 00:37:42,300
I want you to observe.

838
00:37:42,300 --> 00:37:45,800
Here is sort of the nature of a thing that we've hinted at a bunch of

839
00:37:45,800 --> 00:37:46,400
times.

840
00:37:46,900 --> 00:37:52,000
And that is that value is continuously moving, right?

841
00:37:52,100 --> 00:37:55,800
I mean the, the sort of speed at which this thing is going.

842
00:37:55,900 --> 00:38:00,300
It's changing every frame its location, but it kind of snaps into

843
00:38:00,300 --> 00:38:03,300
place as it moves one pixel over, right?

844
00:38:03,300 --> 00:38:03,700
Each time.

845
00:38:03,700 --> 00:38:07,700
It moves when actual pixel Over, You See It shift, but that's all that

846
00:38:07,700 --> 00:38:08,200
happens.

847
00:38:08,300 --> 00:38:10,500
And furthermore, you can kind of see like,

848
00:38:10,900 --> 00:38:14,100
Bolinas in here and maybe if I speed it up just a little bit.

849
00:38:14,700 --> 00:38:18,300
So maybe I speed it up just just a bit so we can that motion is a

850
00:38:18,300 --> 00:38:19,800
little more exaggerated there.

851
00:38:20,300 --> 00:38:21,000
Hopefully.

852
00:38:23,500 --> 00:38:24,400
Maybe maybe not.

853
00:38:24,400 --> 00:38:26,100
Oh whoops, that's not what I wanted to do.

854
00:38:26,700 --> 00:38:27,900
One speed it up.

855
00:38:28,700 --> 00:38:29,200
There we go.

856
00:38:31,000 --> 00:38:34,600
So, you can kind of see how you get these like lines of motion, how it

857
00:38:34,600 --> 00:38:35,400
kind of Ripples.

858
00:38:35,800 --> 00:38:38,600
And what you're seeing there is the fact that we're stepping through

859
00:38:38,600 --> 00:38:39,700
pixels right?

860
00:38:39,900 --> 00:38:44,700
And basically the pixel values will change from one Texel to the next

861
00:38:45,500 --> 00:38:48,700
trying to think of a good way for you to pick because like look at

862
00:38:48,700 --> 00:38:51,700
this motion just to study it for a second right and you see how there

863
00:38:51,700 --> 00:38:55,900
are these kind of wavy lines that kind of appear to move through it.

864
00:38:56,600 --> 00:38:58,400
So what's happening there right?

865
00:38:58,400 --> 00:38:59,800
Is that you have a

866
00:39:00,000 --> 00:39:04,400
We should wear the number of pixels and number of texels isn't

867
00:39:04,400 --> 00:39:05,900
dividing out evenly.

868
00:39:05,900 --> 00:39:06,500
Right?

869
00:39:07,100 --> 00:39:11,300
So, what happens is, I've got some pixels right on the screen, like

870
00:39:11,300 --> 00:39:12,400
so, right?

871
00:39:12,500 --> 00:39:15,400
And then I've got some texels in the texture map, right?

872
00:39:15,400 --> 00:39:18,100
In that thing that, you know, these are we call those texels?

873
00:39:18,100 --> 00:39:19,900
They're really just more pixels, right?

874
00:39:19,900 --> 00:39:22,500
But pixels are things around the screen and textiles are things going

875
00:39:22,500 --> 00:39:23,100
to texture.

876
00:39:23,200 --> 00:39:25,500
We just use that namik later to make things clearer.

877
00:39:26,200 --> 00:39:29,500
So we've got some pixels and when we're magnifying stuff like that,

878
00:39:29,500 --> 00:39:32,800
one pixel maps to several texels, right?

879
00:39:32,900 --> 00:39:36,300
So this textiles, these textiles here, all get the same pixel color,

880
00:39:36,500 --> 00:39:36,900
right?

881
00:39:36,900 --> 00:39:39,700
They all get this, I'm sorry these pixels like the same texture color,

882
00:39:39,900 --> 00:39:40,500
right?

883
00:39:40,700 --> 00:39:44,300
So if this is color, a all of these guys get color a right.

884
00:39:44,700 --> 00:39:48,000
And if this is B, then all of these guys get colored be right.

885
00:39:48,700 --> 00:39:52,100
But the problem is when it doesn't divide out perfectly evenly which

886
00:39:52,100 --> 00:39:53,300
it almost never will.

887
00:39:53,700 --> 00:39:55,900
Then really what happens is as we move through the

888
00:39:56,100 --> 00:39:56,600
Pixels.

889
00:39:56,700 --> 00:40:00,900
A single Texel maps to 1 and some amount.

890
00:40:01,100 --> 00:40:05,400
Write it like ends, right there, right?

891
00:40:05,400 --> 00:40:08,600
So that's the width of the textile mapping, right?

892
00:40:09,300 --> 00:40:12,400
And then this next one is going to be exactly as long.

893
00:40:12,400 --> 00:40:14,700
But that means, it ends a little bit further down.

894
00:40:14,900 --> 00:40:18,100
And then, finally, this one ends before it actually covers the pixel

895
00:40:18,100 --> 00:40:18,600
Center.

896
00:40:19,000 --> 00:40:23,700
What that means is, you will see 3 pixels from this Texel 3 pixels

897
00:40:23,700 --> 00:40:25,900
from this Texel, and then only to

898
00:40:26,000 --> 00:40:26,400
Two pixels.

899
00:40:26,400 --> 00:40:29,300
Potentially from this one or four from this one depending on how it

900
00:40:29,300 --> 00:40:30,700
you know it goes out right.

901
00:40:30,700 --> 00:40:34,700
You'll well, no you see 2 and then 4 to 3 3 2 3 3, right?

902
00:40:34,700 --> 00:40:37,400
You'd see like a pattern a beat frequency happen.

903
00:40:37,600 --> 00:40:40,900
As you see, those sort of things divide out and it leads to this

904
00:40:40,900 --> 00:40:45,000
really ugly amateur hour thing which is exactly.

905
00:40:46,400 --> 00:40:49,800
Unfortunately, what I see in a lot of Indie Games, sometimes it's

906
00:40:49,800 --> 00:40:53,800
really depressing When I See This and furthermore, you get the even

907
00:40:53,800 --> 00:40:55,900
worse artifact, which is you will see

908
00:40:56,300 --> 00:40:58,500
This motion as it's moving.

909
00:40:58,900 --> 00:41:02,600
It only moves when it can move a whole pixel, right?

910
00:41:02,900 --> 00:41:06,000
So you get this sort of stuttery motion, right?

911
00:41:06,000 --> 00:41:10,600
That just doesn't look smooth and and you get that, I see that kind of

912
00:41:10,600 --> 00:41:10,900
times.

913
00:41:10,900 --> 00:41:12,700
It's really, it bothers me.

914
00:41:12,700 --> 00:41:13,600
It's some deep level.

915
00:41:13,800 --> 00:41:17,100
You'll see a game and it's got like, a parallax background.

916
00:41:17,200 --> 00:41:23,000
And the cloud layer in the background is like, going well.

917
00:41:23,000 --> 00:41:25,000
Everything else is updating at 30 frames a second.

918
00:41:25,100 --> 00:41:25,900
It's effectively.

919
00:41:26,000 --> 00:41:29,600
E updating it like five frames a second because they didn't use sub

920
00:41:29,600 --> 00:41:32,600
pixel Precision for the rendering, right?

921
00:41:33,200 --> 00:41:38,500
So that's that's that right?

922
00:41:39,000 --> 00:41:41,100
That's that's the situation that goes in there.

923
00:41:41,100 --> 00:41:44,400
So what I want to do is start tackling these problems, right?

924
00:41:44,400 --> 00:41:46,800
What we want to do is start tackling these problems in the first thing

925
00:41:46,800 --> 00:41:51,800
we can do is at least start to look at whether we're being correct in

926
00:41:51,800 --> 00:41:55,700
terms of remembering where we roughly are in.

927
00:41:56,000 --> 00:41:57,100
Axel space, right?

928
00:41:57,600 --> 00:41:59,800
And so the first problem that you will,

929
00:42:00,200 --> 00:42:03,600
Immediately, when you look at the code that I'm writing, is this right

930
00:42:03,600 --> 00:42:05,000
here, right?

931
00:42:05,100 --> 00:42:05,900
Do you see this?

932
00:42:06,200 --> 00:42:10,800
We got past floating Point accuracy for where the origin is, but

933
00:42:10,800 --> 00:42:14,700
you'll notice that I because We're looping over pixels, I just

934
00:42:14,700 --> 00:42:16,800
flat-out ignored it and said, whatever.

935
00:42:16,800 --> 00:42:20,900
The rounded pixel values are, that's where we're at now, right?

936
00:42:21,200 --> 00:42:26,600
But that's not really where we were right, that's not really, you

937
00:42:26,600 --> 00:42:28,700
know, the location of the thing.

938
00:42:28,700 --> 00:42:29,600
That's the location of the

939
00:42:30,000 --> 00:42:30,300
vile.

940
00:42:31,300 --> 00:42:36,500
But I sort of semi redeemed myself because what I did is I then said

941
00:42:36,500 --> 00:42:40,600
all right that's the location of the pixel were on, but I'm going to

942
00:42:40,600 --> 00:42:44,800
subtract the actual floating-point origin from that, right?

943
00:42:44,900 --> 00:42:46,300
This is where we actually were.

944
00:42:46,700 --> 00:42:50,900
So if I adjust done this and then was using that somehow is the XY

945
00:42:50,900 --> 00:42:53,800
coordinates for lookups, that would have been bad but because we're

946
00:42:53,800 --> 00:42:59,500
still doing everything relative to that floating-point origin that

947
00:42:59,500 --> 00:43:00,800
restores back in that.

948
00:43:01,000 --> 00:43:06,400
Fractional value that's actually lets us know where we actually were

949
00:43:06,400 --> 00:43:06,900
right.

950
00:43:06,900 --> 00:43:10,500
And that means that we'll be filling the pixels correctly with the

951
00:43:10,500 --> 00:43:13,100
correct, fractional value with the correct fractional measurements as

952
00:43:13,100 --> 00:43:13,500
well.

953
00:43:13,600 --> 00:43:17,200
So that when we do those Edge tests, we're actually testing the edges

954
00:43:17,200 --> 00:43:17,800
against.

955
00:43:17,900 --> 00:43:20,100
We're actually testing its edges that are properly, moving through

956
00:43:20,100 --> 00:43:20,800
that space.

957
00:43:21,000 --> 00:43:23,200
So this is the thing that saves us right here.

958
00:43:23,200 --> 00:43:26,200
This this fact that we're still subtracting in the origin should mean,

959
00:43:26,200 --> 00:43:28,300
that we at least we'll have the information that we need.

960
00:43:28,900 --> 00:43:30,800
So the question is though, why do we still

961
00:43:30,900 --> 00:43:32,000
Look like that, right?

962
00:43:32,100 --> 00:43:35,400
And the answer is because then we then go ahead and throw away that

963
00:43:35,400 --> 00:43:38,300
fractional Precision by just doing a round operation here.

964
00:43:38,300 --> 00:43:38,800
Right.

965
00:43:38,900 --> 00:43:42,700
So even though we know where we are fractionally in the texture map,

966
00:43:42,700 --> 00:43:47,300
we know specifically that this Texel that this pixel maps to a very

967
00:43:47,300 --> 00:43:49,600
specific specific place and texture space, right?

968
00:43:49,600 --> 00:43:52,400
Like maybe it maps to right there or something like this.

969
00:43:53,400 --> 00:43:56,800
Even though we know that, we always just round to whatever the closest

970
00:43:56,800 --> 00:43:58,200
pixel is, right?

971
00:43:58,400 --> 00:44:01,800
So what we want to do is we want to do something that does a better

972
00:44:01,800 --> 00:44:07,900
job, basically, of figuring out where we are in the texture map, so

973
00:44:07,900 --> 00:44:11,200
that we can produce results that are sub-pixel accurate.

974
00:44:11,700 --> 00:44:13,400
And so let's talk about how we're going to do that.

975
00:44:14,900 --> 00:44:18,600
all right, so what we want to do, we've got our textiles

976
00:44:20,800 --> 00:44:21,300
Right.

977
00:44:23,400 --> 00:44:26,800
And what we want to do is say, okay, we've got a particular pixel and

978
00:44:26,800 --> 00:44:29,000
we know the location of that pixel in the texture.

979
00:44:29,000 --> 00:44:29,800
Exactly.

980
00:44:29,800 --> 00:44:31,900
Because we're Computing at all in floating-point space.

981
00:44:32,100 --> 00:44:34,100
So you know, here's the center of the textile.

982
00:44:34,100 --> 00:44:35,300
Let's say, right?

983
00:44:35,300 --> 00:44:39,500
Like so here's the center of the textile and we now have, you know,

984
00:44:39,500 --> 00:44:44,700
sort of four pixels that are kind of creating a space around where we

985
00:44:44,700 --> 00:44:45,500
want to sample.

986
00:44:45,900 --> 00:44:48,700
And so what we're doing right now is we're just taking this pixels

987
00:44:48,700 --> 00:44:52,200
color and we're using this pixels color and what we'd rather do is

988
00:44:52,200 --> 00:44:53,000
we'd rather lean

989
00:44:53,100 --> 00:44:54,900
A on a linear blend right that linear.

990
00:44:54,900 --> 00:44:58,200
Blend that we've used so many times, what we want to do is is leverage

991
00:44:58,200 --> 00:44:59,800
that linear blend to produce a color.

992
00:45:00,200 --> 00:45:02,300
That will allow us to smoothly sample.

993
00:45:02,300 --> 00:45:05,100
The texture anywhere in this rectangle, right?

994
00:45:05,100 --> 00:45:09,600
We want to be able to say, okay, we know for color values, so if you

995
00:45:09,600 --> 00:45:13,000
want something that's in between them, let's just blend those colors

996
00:45:13,000 --> 00:45:16,900
together so that we can produce a reasonable result, right.

997
00:45:17,000 --> 00:45:17,700
Does that make sense?

998
00:45:19,100 --> 00:45:21,200
So let's say we're going to do that, right?

999
00:45:21,500 --> 00:45:25,500
If we're going to do that, all we would have to do is load these

1000
00:45:25,500 --> 00:45:29,000
values, and then blend between them using the linear Blends.

1001
00:45:29,000 --> 00:45:30,700
We already know how to do, right?

1002
00:45:30,800 --> 00:45:35,400
So let's say, we have, you know, a b c d, right?

1003
00:45:35,500 --> 00:45:38,700
So this is our blending thing here.

1004
00:45:38,700 --> 00:45:43,400
We've got a b c d.

1005
00:45:43,600 --> 00:45:46,000
Well, you already know how to blend between two of these, right?

1006
00:45:46,000 --> 00:45:48,000
So, if we have a pixel that's here, right?

1007
00:45:48,100 --> 00:45:48,700
You already know.

1008
00:45:48,900 --> 00:45:52,600
If you take the number between 0 and 1, we can do the linear blend.

1009
00:45:52,600 --> 00:45:53,600
Write the equation.

1010
00:45:53,600 --> 00:45:57,700
I say handles just about everything right plus.

1011
00:45:58,200 --> 00:45:58,400
Wow!

1012
00:45:58,400 --> 00:46:03,200
That's the worst drawing of that equation plus t b, right, this equals

1013
00:46:03,200 --> 00:46:03,800
the value.

1014
00:46:04,300 --> 00:46:05,500
That's the sampled value.

1015
00:46:05,800 --> 00:46:08,700
That's like the a be blend, right?

1016
00:46:09,900 --> 00:46:12,700
So, all we need to do is produce that t value, we could blend between

1017
00:46:12,700 --> 00:46:13,300
a and b.

1018
00:46:13,300 --> 00:46:15,900
And similarly, we would also know how far we would go there.

1019
00:46:15,900 --> 00:46:18,700
We would know how to produce the C and D blend, right?

1020
00:46:18,700 --> 00:46:21,200
So we know how to do that.

1021
00:46:21,200 --> 00:46:23,700
Linear Blend or alert as it were right.

1022
00:46:23,700 --> 00:46:29,000
We know how to do a lerp between a and b, and we know how to do a lerp

1023
00:46:29,000 --> 00:46:31,900
between c and d, right?

1024
00:46:31,900 --> 00:46:35,900
But we don't know how to do is, do a blend between ABC and d and the

1025
00:46:35,900 --> 00:46:37,600
answer is you just do the lerp again.

1026
00:46:37,600 --> 00:46:39,500
Once I produce the Blended.

1027
00:46:40,000 --> 00:46:42,100
Of c and d and a, and b that effectively.

1028
00:46:42,100 --> 00:46:45,600
I've created two new points along the border.

1029
00:46:46,100 --> 00:46:49,400
And so if I want a point here, all I would need to know is some other

1030
00:46:49,400 --> 00:46:49,700
blend.

1031
00:46:49,700 --> 00:46:52,500
That tells me how far vertically to blend the two, and then just use

1032
00:46:52,500 --> 00:46:53,100
those to.

1033
00:46:53,300 --> 00:46:56,900
So, what I can do is I can actually compose lerp on top of itself,

1034
00:46:57,200 --> 00:46:57,700
right?

1035
00:46:57,700 --> 00:47:01,400
And I say lerp between the result of these two other lips, because all

1036
00:47:01,400 --> 00:47:03,500
I'm doing is producing two new points.

1037
00:47:03,500 --> 00:47:05,600
That now form a line that I can learn between.

1038
00:47:06,100 --> 00:47:09,300
So all we really need to know is we really need to know a fractional

1039
00:47:09,300 --> 00:47:09,800
value this

1040
00:47:09,900 --> 00:47:11,600
Sway and a fractional value.

1041
00:47:11,600 --> 00:47:13,400
This way that goes between 0 and 1.

1042
00:47:13,400 --> 00:47:16,600
That tells us how close we are to each of the textiles like an fx and

1043
00:47:16,600 --> 00:47:17,400
an F why.

1044
00:47:17,600 --> 00:47:18,200
Right.

1045
00:47:18,800 --> 00:47:19,500
And guess what?

1046
00:47:19,500 --> 00:47:23,300
We know exactly what that is because when we were actually Computing

1047
00:47:23,300 --> 00:47:26,800
the u and v we didn't have to round it here, right?

1048
00:47:27,900 --> 00:47:29,200
We have the value.

1049
00:47:29,500 --> 00:47:31,100
So let's do it this way, right?

1050
00:47:31,100 --> 00:47:37,000
Let's do our Tech selects like, so right there is our Tech selects and

1051
00:47:37,000 --> 00:47:37,500
our Texel.

1052
00:47:37,500 --> 00:47:37,900
Why?

1053
00:47:39,900 --> 00:47:40,200
Right?

1054
00:47:40,200 --> 00:47:41,700
Those are floating Point values.

1055
00:47:42,000 --> 00:47:45,500
Once I round them it's free for me to reconstruct the fractional

1056
00:47:45,500 --> 00:47:50,200
portion because I can just say whatever the rounded value is the real

1057
00:47:50,200 --> 00:47:52,700
version that I had before that had the fractional part in it.

1058
00:47:52,700 --> 00:47:56,000
If I subtract away, whatever the part is I came up with a rounding

1059
00:47:56,000 --> 00:47:57,900
should give me that fractional value.

1060
00:47:57,900 --> 00:47:58,700
That was left over.

1061
00:47:58,800 --> 00:47:59,600
Right so I

1062
00:48:00,000 --> 00:48:03,500
No, what I would need to do to blend, right?

1063
00:48:03,500 --> 00:48:06,100
Really, really straightforward to do that blend, right?

1064
00:48:07,500 --> 00:48:08,700
So let's just do that.

1065
00:48:08,800 --> 00:48:10,800
I mean let's just blend those colors, right?

1066
00:48:10,900 --> 00:48:12,100
Not particularly hard.

1067
00:48:12,100 --> 00:48:14,100
So I've got this text will fetch here, right?

1068
00:48:14,200 --> 00:48:15,900
And all I need to do now is do that.

1069
00:48:15,900 --> 00:48:16,900
Text will fetch.

1070
00:48:17,000 --> 00:48:19,900
I just need to do that textural effect for four things, right?

1071
00:48:19,900 --> 00:48:22,100
So I've got like, you know, like this.

1072
00:48:22,100 --> 00:48:24,400
And in fact, I'll use the ABC that I did before, right?

1073
00:48:24,400 --> 00:48:28,600
If I fetch for textiles it's just a text file pointer right?

1074
00:48:28,800 --> 00:48:29,900
With a few

1075
00:48:30,000 --> 00:48:32,000
Ins right to it.

1076
00:48:32,100 --> 00:48:34,700
The first one we sample right out of the textile pointer.

1077
00:48:35,200 --> 00:48:39,100
The next one we sample out of the text appoint ER Plus 1 pixel.

1078
00:48:39,300 --> 00:48:39,800
Right.

1079
00:48:39,900 --> 00:48:42,500
The next one we do plus the pitch.

1080
00:48:42,500 --> 00:48:47,300
So we're on the next row right and then the final one, we just do the

1081
00:48:47,300 --> 00:48:52,000
texture of the pitch + + 1 + 0, 1, X and Y and there's our, for

1082
00:48:52,000 --> 00:48:53,200
textiles, right?

1083
00:48:53,600 --> 00:48:55,400
That makes sense pretty straightforward.

1084
00:48:55,600 --> 00:48:58,800
Now the problem is when we do that, we may fetch off the edge of the

1085
00:48:58,800 --> 00:48:59,500
texture map.

1086
00:49:00,600 --> 00:49:04,900
So what I'm going to do synthetically just for the moment again this

1087
00:49:04,900 --> 00:49:05,500
is probably not.

1088
00:49:05,500 --> 00:49:08,400
This is not going to be probably the final way that we would handle

1089
00:49:08,400 --> 00:49:08,600
this.

1090
00:49:08,900 --> 00:49:11,300
But what I'm going to do just for the moment, is it going to pretend

1091
00:49:11,300 --> 00:49:13,300
our texture is smaller than it actually is?

1092
00:49:14,000 --> 00:49:17,500
Okay, so what I'm going to do is I'm going to pretend that the width

1093
00:49:17,500 --> 00:49:19,400
is 2 less than it actually is.

1094
00:49:19,800 --> 00:49:22,700
And then I'm going to add one at the beginning, so that way we're

1095
00:49:22,700 --> 00:49:24,200
always kind of in a rectangle.

1096
00:49:24,200 --> 00:49:25,400
That's a little bit smaller.

1097
00:49:25,600 --> 00:49:26,400
Does that make sense?

1098
00:49:27,100 --> 00:49:28,300
Hopefully, that makes some sense.

1099
00:49:28,900 --> 00:49:29,800
So then in here I'll just

1100
00:49:29,900 --> 00:49:31,300
Choose text Olay for now.

1101
00:49:31,600 --> 00:49:32,000
So,

1102
00:49:35,900 --> 00:49:38,400
And as you can see, we're still getting the exact same results which

1103
00:49:38,400 --> 00:49:39,200
is what we want.

1104
00:49:39,200 --> 00:49:44,200
And so now we have to do is blend these guys together to get our final

1105
00:49:44,200 --> 00:49:44,600
result.

1106
00:49:44,600 --> 00:49:48,800
So if I want to do that I believe I finally did add that linear blend,

1107
00:49:49,000 --> 00:49:51,400
of course, I've got to actually, I guess I have to actually Loft out

1108
00:49:51,400 --> 00:49:53,700
the values as well, which is a bit of a pain.

1109
00:49:54,100 --> 00:49:55,200
But let's go ahead and do that.

1110
00:49:55,900 --> 00:49:57,700
So this is Tex Le pointer a actually.

1111
00:49:57,700 --> 00:49:59,500
Textual pointer be Texel pointer.

1112
00:49:59,500 --> 00:50:02,000
See Texel pointer d, right?

1113
00:50:02,200 --> 00:50:05,200
So if I actually want to do these, I need to actually do this.

1114
00:50:05,700 --> 00:50:10,300
Where we actually extract the color values out if that makes sense.

1115
00:50:10,600 --> 00:50:14,900
And so, what I need to do is something here where we actually take.

1116
00:50:15,100 --> 00:50:18,300
So this is doing the premultiplied alpha, as well, sort of baked in

1117
00:50:18,300 --> 00:50:19,400
there, right?

1118
00:50:19,600 --> 00:50:22,600
Which we don't, actually, yeah, we don't actually.

1119
00:50:22,900 --> 00:50:23,500
Yeah, okay.

1120
00:50:23,600 --> 00:50:24,900
Well, let's rearrange this.

1121
00:50:25,100 --> 00:50:27,900
So if I wanted to do this, this is this is kind of getting into some

1122
00:50:27,900 --> 00:50:30,100
things that maybe we didn't want to get into yet.

1123
00:50:30,100 --> 00:50:34,000
But so if we do this, this sort of operation and we need to pre

1124
00:50:34,000 --> 00:50:35,500
multiply our texture values, we'd rather

1125
00:50:35,600 --> 00:50:39,100
I have pre multiplied them in the actual texture and unfortunately we

1126
00:50:39,100 --> 00:50:40,900
haven't done that yet.

1127
00:50:41,000 --> 00:50:41,300
Oh wait.

1128
00:50:41,300 --> 00:50:42,900
No, I take it back.

1129
00:50:43,100 --> 00:50:45,000
That's just pre multiplying by the color that's coming in.

1130
00:50:45,600 --> 00:50:46,300
Totally fine.

1131
00:50:46,500 --> 00:50:47,100
Never mind.

1132
00:50:47,300 --> 00:50:47,900
We're good here.

1133
00:50:48,400 --> 00:50:49,100
No problem.

1134
00:50:49,700 --> 00:50:52,100
So what I probably will do is I'm going to take this out for now, so

1135
00:50:52,100 --> 00:50:56,000
we're not going to use that color a at the moment and I'll do to do

1136
00:50:56,600 --> 00:50:57,400
color a

1137
00:50:59,300 --> 00:50:59,800
all right, so if

1138
00:51:00,000 --> 00:51:03,900
Want to read out of this texture and I'm going to go ahead and put in

1139
00:51:04,200 --> 00:51:05,200
my values here.

1140
00:51:05,300 --> 00:51:09,600
So there's red green, blue and Alpha there's my Texel.

1141
00:51:09,600 --> 00:51:10,300
A right?

1142
00:51:10,300 --> 00:51:16,200
We've extracted the values of it out, and gotten those.

1143
00:51:16,500 --> 00:51:19,700
Then I'm going to go in here and get the rest of my values.

1144
00:51:19,700 --> 00:51:25,200
So there is Texel, be pixel C Texel D and then I'll just do pointer a

1145
00:51:25,700 --> 00:51:28,400
probably should done that before I cut and pasted it but you know how

1146
00:51:28,400 --> 00:51:28,600
it is.

1147
00:51:28,600 --> 00:51:29,500
Sometimes.

1148
00:51:30,200 --> 00:51:30,700
Right.

1149
00:51:34,500 --> 00:51:35,000
so,

1150
00:51:38,200 --> 00:51:41,000
all right, so we've got our A's, here's our bees.

1151
00:51:41,000 --> 00:51:43,500
Here's our seas, here's our Dee's.

1152
00:51:43,700 --> 00:51:48,500
So now we have all the textiles and all we have to do is actually lerp

1153
00:51:48,500 --> 00:51:51,800
between them and then we have our essay.

1154
00:51:52,000 --> 00:51:57,100
When we did our SAR SBR that stuff we can actually just still do those

1155
00:51:58,000 --> 00:51:59,800
the same way we were doing them for

1156
00:52:01,500 --> 00:52:07,300
All right, so this will just be, you know, our final Texel values are

1157
00:52:07,300 --> 00:52:11,200
found, textual values are again just set ourselves up for fighting

1158
00:52:11,200 --> 00:52:12,200
feeding into that other equation.

1159
00:52:12,400 --> 00:52:12,600
Alright?

1160
00:52:12,600 --> 00:52:15,400
So right now, if I set it to just be one of our textiles just to

1161
00:52:15,400 --> 00:52:16,500
verify that we were reading them.

1162
00:52:16,500 --> 00:52:17,000
Right.

1163
00:52:18,000 --> 00:52:18,700
Let's see here.

1164
00:52:18,700 --> 00:52:19,800
Before Texel.

1165
00:52:19,900 --> 00:52:25,600
Right in theory, this should give us all the values that we need.

1166
00:52:26,400 --> 00:52:28,300
You should see the same tree we do so.

1167
00:52:28,300 --> 00:52:32,100
Now, all we have to do is produce this Texel by properly doing that,

1168
00:52:32,100 --> 00:52:33,200
linear interpolation.

1169
00:52:33,200 --> 00:52:35,800
And so, I said, we need to compose the lerp.

1170
00:52:36,000 --> 00:52:37,100
So here's our lerp.

1171
00:52:37,500 --> 00:52:38,200
There we go.

1172
00:52:38,300 --> 00:52:40,500
We need to text and text will be.

1173
00:52:40,800 --> 00:52:44,100
We need to do a loop of that with Texel.

1174
00:52:45,000 --> 00:52:45,600
See,

1175
00:52:46,700 --> 00:52:48,800
and Texel d, right?

1176
00:52:49,300 --> 00:52:52,200
And again, we've got our fractional, why that lips between those and

1177
00:52:52,200 --> 00:52:54,200
our fractional X, that Loops between these.

1178
00:52:54,700 --> 00:52:58,700
And that should give us should put us within Striking Distance of

1179
00:52:58,700 --> 00:53:00,700
actually doing that texture filtering.

1180
00:53:01,100 --> 00:53:03,500
So, what is the problem here v40?

1181
00:53:03,500 --> 00:53:03,700
Right?

1182
00:53:03,700 --> 00:53:06,700
We don't have a version for this 4 V 4 operations.

1183
00:53:07,100 --> 00:53:07,800
Looks like

1184
00:53:10,700 --> 00:53:14,200
And so, I will manufacture wine.

1185
00:53:15,600 --> 00:53:18,600
So, really lerp is the same no matter what you're doing, right?

1186
00:53:18,600 --> 00:53:20,400
So you can change it to anything else.

1187
00:53:20,400 --> 00:53:23,400
Again, if you're a template style person, this is a place you could do

1188
00:53:23,800 --> 00:53:24,200
templates.

1189
00:53:24,200 --> 00:53:26,000
There should work fine.

1190
00:53:26,000 --> 00:53:30,100
I would suspect, let's see here and we don't have multiplication for

1191
00:53:30,100 --> 00:53:30,900
those as well.

1192
00:53:31,100 --> 00:53:35,500
So scalar, multiply just want that as well.

1193
00:53:36,000 --> 00:53:38,900
Let's see, V3 operations.

1194
00:53:38,900 --> 00:53:42,100
Real want, I guess we'll probably want all of these.

1195
00:53:42,500 --> 00:53:45,200
So, yeah, if you're doing templates, you should be able to

1196
00:53:45,600 --> 00:53:47,900
Just just use templates for these guys.

1197
00:53:48,200 --> 00:53:50,200
There shouldn't be a problem with that.

1198
00:53:50,200 --> 00:53:52,400
I'm going to go ahead and I just don't like using templates.

1199
00:53:52,400 --> 00:53:55,000
I find that it's just they're always a headache.

1200
00:53:55,000 --> 00:53:57,000
So I stay away from them if you're using ja.

1201
00:53:57,000 --> 00:53:59,800
I if I was using J, I obviously

1202
00:54:00,500 --> 00:54:04,900
That is the preferred solution and I wish we were, but we're not.

1203
00:54:06,000 --> 00:54:08,300
So we got to suffer through for a little bit longer.

1204
00:54:08,300 --> 00:54:13,200
We got stuff out through a C++ for a little bit longer but hopefully

1205
00:54:13,500 --> 00:54:15,500
not too much longer John.

1206
00:54:15,500 --> 00:54:17,900
If you're listening not too much longer, right?

1207
00:54:18,200 --> 00:54:20,900
There's going to be a j, i just tribution that we all get to use,

1208
00:54:20,900 --> 00:54:21,300
right?

1209
00:54:21,300 --> 00:54:22,100
And it's awesome.

1210
00:54:24,400 --> 00:54:25,100
I'm sure he

1211
00:54:26,400 --> 00:54:29,400
is producing it as we speak, okay?

1212
00:54:32,500 --> 00:54:39,800
Yeah, so that looks like pretty much all we would need to do there so

1213
00:54:39,800 --> 00:54:40,300
off we go.

1214
00:54:41,000 --> 00:54:42,100
So what's the problem?

1215
00:54:42,100 --> 00:54:42,900
What are we missing of?

1216
00:54:42,900 --> 00:54:46,600
The lerp is before we had put that afterwards so it can access those

1217
00:54:46,600 --> 00:54:48,500
functions and there we go.

1218
00:54:50,000 --> 00:54:54,200
All right, so now we've got our properly blurry.

1219
00:54:54,200 --> 00:54:57,900
Although, why is of course, stopped moving, which doesn't seem like a

1220
00:54:57,900 --> 00:54:58,800
good idea.

1221
00:54:58,800 --> 00:55:00,300
I don't know why it stopped everything that's

1222
00:55:00,500 --> 00:55:01,300
Not a good sign.

1223
00:55:02,000 --> 00:55:02,900
Let me go ahead and

1224
00:55:05,800 --> 00:55:06,300
all right.

1225
00:55:11,300 --> 00:55:16,800
So I don't know what I accidentally did to stop our poor tree from

1226
00:55:16,800 --> 00:55:17,700
moving anywhere.

1227
00:55:18,900 --> 00:55:21,500
Oh, there, you know what it actually is moving?

1228
00:55:21,500 --> 00:55:25,600
It's just our stuff is sub-pixel now, so you can't, you couldn't see

1229
00:55:25,600 --> 00:55:29,000
it because it's so smooth.

1230
00:55:29,000 --> 00:55:31,500
You can't see the wavy lines that actually was moving.

1231
00:55:31,800 --> 00:55:33,000
So that's okay.

1232
00:55:33,000 --> 00:55:33,800
That was pretty funny.

1233
00:55:34,700 --> 00:55:38,200
So, as you can see, that helps a lot to just with the the change in

1234
00:55:38,200 --> 00:55:38,700
the size.

1235
00:55:38,700 --> 00:55:41,000
Let me go ahead and and show you maybe with a little

1236
00:55:41,100 --> 00:55:44,600
Bit more mean you can see how different that was, right?

1237
00:55:44,600 --> 00:55:46,600
I didn't even I thought the thing and stopped moving.

1238
00:55:46,600 --> 00:55:48,500
That's how smooth moves.

1239
00:55:48,500 --> 00:55:52,900
Now, once you start to put that sampling in there, you can't even see

1240
00:55:52,900 --> 00:55:53,400
it anymore.

1241
00:55:53,400 --> 00:55:56,400
It totally fools your eye and we're not even taking as much care as we

1242
00:55:56,400 --> 00:55:57,300
should in a lot of places.

1243
00:55:57,300 --> 00:56:00,500
So I suspect we still got stuff we can do to make it even better than

1244
00:56:00,500 --> 00:56:00,700
that.

1245
00:56:00,700 --> 00:56:05,700
But let's go ahead and make that a little bit more pronounced.

1246
00:56:05,700 --> 00:56:09,100
Maybe so now you can see it moving, right?

1247
00:56:09,300 --> 00:56:11,000
And we're still like there's there's still

1248
00:56:11,100 --> 00:56:13,600
Uh, choppiness there in terms of where it is.

1249
00:56:13,700 --> 00:56:17,100
So I think we've still got some problem although that may just be our

1250
00:56:17,100 --> 00:56:17,900
frame rate.

1251
00:56:18,000 --> 00:56:21,900
So what I could do is say let's go ahead and make it a little smaller

1252
00:56:21,900 --> 00:56:24,800
because since we're not optimized at the moment, our frame rate is

1253
00:56:24,800 --> 00:56:28,100
definitely Loops, that's the wrong place.

1254
00:56:28,300 --> 00:56:29,900
Our frame rate is definitely an issue.

1255
00:56:31,200 --> 00:56:35,100
So yeah, so there's are moving dude, right?

1256
00:56:35,600 --> 00:56:37,100
And you see how it's nice and smooth.

1257
00:56:37,100 --> 00:56:40,900
That is in fact you can basically see right now that only our edges.

1258
00:56:41,500 --> 00:56:45,100
Are a little bit on smooth, you can kind of see them being a little

1259
00:56:45,100 --> 00:56:48,100
unsmooth there and so we can talk about some reasons why that is and

1260
00:56:48,100 --> 00:56:51,800
maybe fix that a little bit but I don't know if you can see how nice

1261
00:56:51,800 --> 00:56:56,200
and smoothly that guy moves by comparison to the old guy just for for

1262
00:56:56,400 --> 00:56:57,500
comparison purposes.

1263
00:56:57,700 --> 00:56:59,800
If I was to go back to you,

1264
00:57:00,000 --> 00:57:02,700
In the old way, which is to do this.

1265
00:57:04,700 --> 00:57:05,300
Right.

1266
00:57:06,500 --> 00:57:07,000
So

1267
00:57:11,500 --> 00:57:14,400
Let's go ahead and compare those two, right?

1268
00:57:15,000 --> 00:57:18,500
So here we have it, moving back and forth and now I'm going to take it

1269
00:57:18,500 --> 00:57:24,600
out so it's moving in the sort of well, no, I'm not compile your so

1270
00:57:26,500 --> 00:57:29,000
this is the guy moving in the old way, right?

1271
00:57:29,000 --> 00:57:33,100
And you can kind of see, like, once he's getting moving at full speed,

1272
00:57:33,100 --> 00:57:35,700
he Shimmer is a bit which is objectionable, but he doesn't stutter

1273
00:57:35,700 --> 00:57:39,300
that much, but when he gets to the end, he's very stuttery, right?

1274
00:57:39,300 --> 00:57:41,200
He gets that kind of, really sort of

1275
00:57:41,300 --> 00:57:43,100
Stuttery motion at the end.

1276
00:57:43,600 --> 00:57:46,900
Whereas when we do it with the nice smooth version, he doesn't waive

1277
00:57:46,900 --> 00:57:47,700
when he's moving.

1278
00:57:48,000 --> 00:57:51,600
And when he Glides nicely to a stop without ever seeing that sort of

1279
00:57:51,600 --> 00:57:54,700
pixel Sutter emotion, let me see if I can make him just a little bit

1280
00:57:54,700 --> 00:57:59,900
bigger so you can kind of see a little bit more of that.

1281
00:57:59,900 --> 00:58:03,400
Well, a frame rate is just too bad at the moment is the problem, so I

1282
00:58:03,400 --> 00:58:03,700
don't know.

1283
00:58:03,700 --> 00:58:06,300
We're going to have to do some optimization before we can probably

1284
00:58:07,200 --> 00:58:11,100
actually show what it looks like when you make it a little bit.

1285
00:58:11,200 --> 00:58:11,700
Larger.

1286
00:58:12,700 --> 00:58:13,600
That's unfortunate.

1287
00:58:14,900 --> 00:58:16,300
But there you can kind of see it too.

1288
00:58:16,800 --> 00:58:20,200
So, let me go ahead and I'll switch it back to the pixelated version

1289
00:58:20,400 --> 00:58:21,700
so you can see all that crawling.

1290
00:58:21,700 --> 00:58:22,400
That's happening in there.

1291
00:58:22,400 --> 00:58:24,200
And you could do see that stuttering at the end.

1292
00:58:24,200 --> 00:58:25,900
How, how ugly that looks.

1293
00:58:26,600 --> 00:58:28,800
And again, it might be hard for you to see what the video compression

1294
00:58:28,800 --> 00:58:31,500
to because the video compression ads as a smoother.

1295
00:58:32,100 --> 00:58:33,300
But, yeah, there you go.

1296
00:58:34,300 --> 00:58:36,300
So, yeah, we've got a bunch of work to do.

1297
00:58:37,000 --> 00:58:41,500
We're far from the Finish Line on rendering, but hopefully you can see

1298
00:58:43,900 --> 00:58:47,000
Hopefully you can see that we're already pretty well on our way there

1299
00:58:47,000 --> 00:58:48,100
to having a render.

1300
00:58:48,100 --> 00:58:51,200
I mean, that's the Primitive that we need, which is filled textured

1301
00:58:51,200 --> 00:58:52,200
filled quad.

1302
00:58:53,000 --> 00:58:56,500
So we've kind of got, we kind of set ourselves up for next week to

1303
00:58:56,500 --> 00:59:00,300
really kind of get, get down to it, right?

1304
00:59:00,800 --> 00:59:03,100
And of course, I also need to probably put a thing here that says to

1305
00:59:03,100 --> 00:59:04,000
do Casey.

1306
00:59:07,900 --> 00:59:12,400
Formalize texture boundaries or something like this, just so we don't

1307
00:59:12,400 --> 00:59:13,200
forget about that.

1308
00:59:13,700 --> 00:59:18,800
All right, so we're about out of time anyway, so maybe it is time to

1309
00:59:18,800 --> 00:59:19,900
go to that Q&A.

1310
00:59:21,200 --> 00:59:26,000
So let's go ahead and do that and we'll leave our little tree.

1311
00:59:26,000 --> 00:59:27,500
In fact, you know what we should do too.

1312
00:59:29,900 --> 00:59:33,000
I think we should get our tree spinning again.

1313
00:59:33,000 --> 00:59:33,500
Probably.

1314
00:59:33,500 --> 00:59:34,000
Right.

1315
00:59:34,600 --> 00:59:38,700
That seems like a good idea to me, just so we can see what happens

1316
00:59:38,700 --> 00:59:40,000
there as well.

1317
00:59:40,000 --> 00:59:42,500
So there's our spinning version of the tree.

1318
00:59:43,300 --> 00:59:48,800
You can see it, it's going there and the spinning version of the tree.

1319
00:59:49,000 --> 00:59:54,000
We would also like to check that out in both cases.

1320
00:59:54,600 --> 00:59:59,200
So, let's see here, here's our lerp version, right?

1321
00:59:59,300 --> 00:59:59,600
So you can

1322
00:59:59,700 --> 00:59:59,900
See.

1323
01:00:00,000 --> 01:00:01,900
Ugly, that looks when we rotate it, right?

1324
01:00:01,900 --> 01:00:03,900
You can see how ugly that all looks.

1325
01:00:04,400 --> 01:00:07,600
And when you go to the lerp version already, it just cleans so much of

1326
01:00:07,600 --> 01:00:08,200
that up.

1327
01:00:08,600 --> 01:00:10,300
You get rid of so much artifacting there.

1328
01:00:11,200 --> 01:00:16,300
And so that's by the way, just so everyone knows to that's called when

1329
01:00:16,300 --> 01:00:18,600
you're doing texture texturing.

1330
01:00:19,400 --> 01:00:21,400
That's that's what they talk about when they talk about texture

1331
01:00:21,400 --> 01:00:22,000
filtering.

1332
01:00:22,400 --> 01:00:25,400
And so like, for example, if you talk about linear texture filtering,

1333
01:00:25,400 --> 01:00:28,100
that's what we're doing right now and isotropic texture.

1334
01:00:28,100 --> 01:00:29,800
Filtering is related, but does some more stuff

1335
01:00:30,000 --> 01:00:32,500
Cough mipmap based filtering does more stuff as well.

1336
01:00:32,500 --> 01:00:35,100
So there's other levels of filtering kits are adding in there.

1337
01:00:35,800 --> 01:00:38,500
And right now we're doing the most basic one which is like a simple by

1338
01:00:38,500 --> 01:00:43,100
linear filter on the texture, so that we can produce a smooth result

1339
01:00:43,100 --> 01:00:46,600
instead of a of a hard-edged result on this pixel boundaries.

1340
01:00:54,100 --> 01:00:58,000
We blow will the wall trees be sub-pixel accurate now, so you should

1341
01:00:58,000 --> 01:01:01,700
feel answer that yourself, my friend, should they be sub-pixel

1342
01:01:01,700 --> 01:01:02,600
accurate or not?

1343
01:01:03,500 --> 01:01:05,800
And of course, the answer is no, because we're not calling this

1344
01:01:05,800 --> 01:01:06,600
routine to draw them.

1345
01:01:07,100 --> 01:01:07,600
Right?

1346
01:01:07,700 --> 01:01:11,600
So until we actually call this the routine to draw, like, remember

1347
01:01:11,600 --> 01:01:12,900
this is only draw.

1348
01:01:13,100 --> 01:01:14,800
We're their only one place that calls.

1349
01:01:15,000 --> 01:01:16,200
Draw a rectangle slowly.

1350
01:01:16,400 --> 01:01:19,700
So these guys are not are still going through the old drawbitmap path.

1351
01:01:19,800 --> 01:01:22,800
So until we get this nice and fast and accurate and everything is

1352
01:01:22,800 --> 01:01:23,300
good.

1353
01:01:23,900 --> 01:01:27,400
And we're ready to actually call everyone to go through it.

1354
01:01:29,000 --> 01:01:31,400
Everything else will not be sub pixel accurate, so you can see that

1355
01:01:31,400 --> 01:01:34,500
the head is not so big sharks at the moment, right?

1356
01:01:38,400 --> 01:01:40,600
The top of the tree seems to be cut short.

1357
01:01:40,900 --> 01:01:41,900
That's correct.

1358
01:01:42,800 --> 01:01:44,400
Why do you think that might be?

1359
01:01:46,500 --> 01:01:47,400
You have any guesses?

1360
01:01:49,000 --> 01:01:50,200
I will give you a hint.

1361
01:01:53,300 --> 01:01:54,900
Although could actually just be Boop's.

1362
01:01:55,900 --> 01:01:57,500
I did not mean to do that but did I do?

1363
01:01:57,600 --> 01:02:00,400
No, don't don't edit the code in here.

1364
01:02:03,100 --> 01:02:05,700
While we may have other bugs in there as well, and I don't actually

1365
01:02:05,700 --> 01:02:08,400
know remember that.

1366
01:02:11,900 --> 01:02:16,100
This guy right is part of ammo and you know what?

1367
01:02:16,100 --> 01:02:18,500
I forgot to do we're by linearly filtering map.

1368
01:02:18,600 --> 01:02:19,900
So we don't want to round.

1369
01:02:19,900 --> 01:02:22,000
So we had two reasons that the tree was cut off.

1370
01:02:22,100 --> 01:02:25,800
One is because we actually do cut off the top and the sides, right?

1371
01:02:25,800 --> 01:02:30,900
Because we are just, we're just arbitrarily only using one pixel in

1372
01:02:30,900 --> 01:02:31,700
from everywhere.

1373
01:02:32,300 --> 01:02:36,700
But the other reason is to, we shouldn't be adding .05 anymore because

1374
01:02:37,000 --> 01:02:38,100
we're doing bilinear filtering.

1375
01:02:38,100 --> 01:02:40,700
So we don't want to round, we want to floor because we're using both

1376
01:02:40,700 --> 01:02:41,600
sides, right?

1377
01:02:43,100 --> 01:02:47,600
So yeah, so we can get a little bit of that back already just by

1378
01:02:47,600 --> 01:02:53,700
getting rid of that point five, but only a little bit.

1379
01:02:53,700 --> 01:02:56,200
There's there's another part of it, which has nothing to do with that.

1380
01:02:56,200 --> 01:02:58,500
So if we get rid of that point five, which we should have done,

1381
01:03:00,000 --> 01:03:05,600
See we get a little bit of the tree top back in but also remember that

1382
01:03:05,600 --> 01:03:11,000
Treetop I think that's just the last piece of it right there so I

1383
01:03:11,400 --> 01:03:17,000
believe that is just because like I think we're also cutting the this

1384
01:03:17,000 --> 01:03:18,800
edge of it as well if that makes any sense.

1385
01:03:19,700 --> 01:03:21,500
But I'm not totally sure about that.

1386
01:03:25,900 --> 01:03:31,200
So for example, if right here, we were to let it go further, right?

1387
01:03:31,200 --> 01:03:34,900
We'd potentially fetch outside the texture but that would bring it

1388
01:03:34,900 --> 01:03:35,900
back inside.

1389
01:03:39,100 --> 01:03:41,900
So you can see more of the Treetops, but now we occasionally, fetch

1390
01:03:41,900 --> 01:03:42,900
outside the texture.

1391
01:03:43,600 --> 01:03:45,400
So, yeah.

1392
01:03:51,200 --> 01:03:55,400
It's three spinning going to be in the DLC, know that'll probably be.

1393
01:03:55,400 --> 01:03:57,400
Well, it might be day one DLC.

1394
01:03:59,800 --> 01:04:00,200
like,

1395
01:04:01,600 --> 01:04:05,100
Obviously people shouldn't be able to just get a spanning tree.

1396
01:04:05,100 --> 01:04:08,500
They should have to pay extra for it so but I want to be there at the

1397
01:04:08,500 --> 01:04:10,900
beginning of you know, right from the first time to play the game so

1398
01:04:10,900 --> 01:04:12,900
maybe it'll be Dede 0 DLC.

1399
01:04:15,200 --> 01:04:17,200
Does it rotate with sub, pixel accuracy?

1400
01:04:17,200 --> 01:04:18,500
Yes, it does.

1401
01:04:18,900 --> 01:04:21,400
Although, again, we've got more stuff to do before we can really say,

1402
01:04:21,400 --> 01:04:23,500
we're sub-pixel accurate, because we haven't really gone through and

1403
01:04:23,500 --> 01:04:24,900
analyzed everything properly yet.

1404
01:04:25,100 --> 01:04:27,500
So, yes, we are rotating with sub pixel accuracy.

1405
01:04:27,500 --> 01:04:28,000
Now

1406
01:04:30,700 --> 01:04:33,300
And you can kind of see that to you can see how smooth this looks in

1407
01:04:33,300 --> 01:04:34,500
here, right?

1408
01:04:34,600 --> 01:04:39,100
Because for example, if I stop moving it side to side, for example.

1409
01:04:40,900 --> 01:04:45,700
So let's say we go in here and we get rid of this disc, right?

1410
01:04:45,700 --> 01:04:49,800
So we're not moving it back and forth anymore.

1411
01:04:50,500 --> 01:04:53,400
So, if you get rid of that, you can see how smooth that looks in

1412
01:04:53,400 --> 01:04:54,400
there, right?

1413
01:04:54,800 --> 01:04:57,200
It's super smooth, right?

1414
01:04:57,200 --> 01:04:59,200
You don't see any real artifacting in there.

1415
01:05:00,600 --> 01:05:03,700
So, and we're turning very slowly, so you can see that we've got a

1416
01:05:03,700 --> 01:05:07,900
nice sub-pixel thing going on there, but again, we've got more work to

1417
01:05:07,900 --> 01:05:11,100
do and we have to do some work for the texture boundaries as well.

1418
01:05:11,100 --> 01:05:14,000
Like I said, so that we don't have that tree clipping problem, and

1419
01:05:14,000 --> 01:05:17,000
there's a bunch of other things, but again, those are polish things.

1420
01:05:19,600 --> 01:05:23,000
What's the most major fundamental thing left to do on the renderer?

1421
01:05:23,500 --> 01:05:25,100
Well performance?

1422
01:05:26,100 --> 01:05:27,900
I mean that's the thing, right?

1423
01:05:28,200 --> 01:05:31,600
It's fine and good to get a nice little spinning tree here, right?

1424
01:05:31,600 --> 01:05:35,900
But if we, now need to draw the whole screen using this sort of

1425
01:05:35,900 --> 01:05:41,400
technique, and we want it to be fast, and we want it to be capable of

1426
01:05:41,400 --> 01:05:42,700
doing overdrawn that sort of stuff.

1427
01:05:42,700 --> 01:05:47,200
That's, that's really the next major obstacle that we have.

1428
01:05:47,200 --> 01:05:50,100
Now again, we don't really have to be that fast for shipping because,

1429
01:05:50,100 --> 01:05:53,500
like I said, will support the hardware path and I guess you could say

1430
01:05:53,500 --> 01:05:55,500
that's the other major thing left to do is, is a

1431
01:05:55,900 --> 01:05:56,800
Opengl version.

1432
01:05:57,700 --> 01:05:59,100
But I don't know when we want to do that.

1433
01:05:59,100 --> 01:05:59,500
Like

1434
01:06:00,000 --> 01:06:02,100
Depends on how fast our software rasterizer ends up.

1435
01:06:02,100 --> 01:06:03,800
Being, because maybe we'll just use that.

1436
01:06:03,800 --> 01:06:05,400
Our software is rather for a while, but

1437
01:06:12,300 --> 01:06:15,400
And we also have to figure out what we want to do about about clamping

1438
01:06:15,500 --> 01:06:16,400
and I'm not sure.

1439
01:06:16,400 --> 01:06:20,300
I think we just want to actually do the clamping for those guys but

1440
01:06:20,300 --> 01:06:21,400
ought to think about that.

1441
01:06:28,000 --> 01:06:30,700
How would you do smooth, some pixel rendering for something like pixel

1442
01:06:30,700 --> 01:06:34,200
art, Graphics that doesn't blur, but still moves smoothly.

1443
01:06:35,200 --> 01:06:37,800
So the way that you want to do that,

1444
01:06:40,000 --> 01:06:41,400
It's a little complicated.

1445
01:06:43,500 --> 01:06:44,100
So

1446
01:06:46,600 --> 01:06:48,900
I mean, it depends on what you're doing, right?

1447
01:06:48,900 --> 01:06:53,900
So how can I explain this?

1448
01:06:54,200 --> 01:06:55,100
Let's go to the Blackboard.

1449
01:06:56,100 --> 01:06:56,400
It's good.

1450
01:06:56,400 --> 01:06:57,200
It's a good question.

1451
01:06:57,500 --> 01:06:58,500
I'll start with that.

1452
01:07:00,000 --> 01:07:02,800
So this is, this is more of a technique question.

1453
01:07:02,800 --> 01:07:04,900
So, I'll just explain to you what's happening.

1454
01:07:06,000 --> 01:07:10,400
And then, you can think about the technique yourself, I can give an

1455
01:07:10,400 --> 01:07:13,100
example of one solution, but it's not a problem that I've ever had

1456
01:07:13,100 --> 01:07:14,900
because I don't really do pixel Graphics stuff.

1457
01:07:14,900 --> 01:07:17,500
So, I can't say definitively that I have a solution that I like,

1458
01:07:17,500 --> 01:07:20,200
because I'm just coming up with this on the spot, but I can tell you

1459
01:07:20,200 --> 01:07:21,400
the nature of the problem.

1460
01:07:22,200 --> 01:07:24,200
So the nature of the problem is as follows

1461
01:07:25,600 --> 01:07:30,500
Suppose, you have a texture map from a pixel Sprite and these pixels

1462
01:07:30,500 --> 01:07:32,500
are meant to be big on the screen, right?

1463
01:07:32,500 --> 01:07:36,700
So when we're talking on the screen, you know, we've got our nice 4K

1464
01:07:36,700 --> 01:07:38,300
display or whatever, right?

1465
01:07:39,200 --> 01:07:43,700
And so, in, in Good Times, it would just feel like one of these pixels

1466
01:07:43,700 --> 01:07:45,600
would fill, like, this whole thing, right?

1467
01:07:45,600 --> 01:07:48,500
So here's a, and this whole thing is a right?

1468
01:07:48,700 --> 01:07:51,500
And then here's be, if it was a line tears, be right?

1469
01:07:51,500 --> 01:07:53,400
There's be, and it's all good.

1470
01:07:53,800 --> 01:07:55,200
And so, the problem now is

1471
01:07:55,400 --> 01:07:57,900
Happens when this moves to the side, right?

1472
01:07:58,100 --> 01:07:59,200
When this moves to the side.

1473
01:07:59,200 --> 01:08:03,000
So you can imagine, in fact, I probably do that poorly.

1474
01:08:03,000 --> 01:08:04,300
Let me draw that a little bit better.

1475
01:08:06,200 --> 01:08:09,900
So here's a here's B, right.

1476
01:08:09,900 --> 01:08:14,200
So now we start off and we've got a and b are here and here, right?

1477
01:08:14,200 --> 01:08:15,800
So here's B.

1478
01:08:15,800 --> 01:08:18,600
And here's a, if they felt perfectly on a pixel boundary then

1479
01:08:18,600 --> 01:08:21,700
everything's good but let's suppose that they don't.

1480
01:08:21,700 --> 01:08:24,600
So let's suppose that we now have it, right?

1481
01:08:24,700 --> 01:08:26,800
So we've got something more like this.

1482
01:08:27,800 --> 01:08:31,300
Right, same size, still, but they're just off a little bit.

1483
01:08:31,300 --> 01:08:33,500
So here is being here is a right.

1484
01:08:34,100 --> 01:08:37,300
So, what I want to illustrate here is if we were tutor, if you were to

1485
01:08:37,300 --> 01:08:39,000
do what we were doing, right?

1486
01:08:39,600 --> 01:08:44,000
If you were to do pure linear filtering, then what would happen is you

1487
01:08:44,000 --> 01:08:47,200
would destroy the good case, right?

1488
01:08:47,200 --> 01:08:51,100
Which is where you have this, nice solid a, and this nice solid B, you

1489
01:08:51,100 --> 01:08:55,200
would destroy that case because it would blend the whole blend, right?

1490
01:08:55,300 --> 01:08:57,500
So all these pixels, all of these

1491
01:08:57,600 --> 01:08:59,899
would all be blend and you would not see those

1492
01:09:00,000 --> 01:09:02,600
Nice hard pixel boundaries that you want with the pixel art.

1493
01:09:03,000 --> 01:09:06,600
But at the same time, you've got a case here where these two pixels

1494
01:09:06,600 --> 01:09:09,500
you really do wish these two pixels would blend, right?

1495
01:09:09,500 --> 01:09:12,100
You don't want these guys to blend, but you want these two.

1496
01:09:14,399 --> 01:09:17,899
So really what you want to do here is you want to say, okay, if a

1497
01:09:17,899 --> 01:09:24,000
particular pixel would have landed in on, if the nearest neighbor

1498
01:09:24,000 --> 01:09:27,500
sample for a pixel on, either side of the pixel would have landed in

1499
01:09:27,500 --> 01:09:29,800
either into different textiles, then blend.

1500
01:09:30,000 --> 01:09:33,300
Um, but otherwise don't and you could actually do that in a pixel

1501
01:09:33,300 --> 01:09:36,300
Shader if you wanted to, that's totally doable and you could

1502
01:09:36,300 --> 01:09:41,000
explicitly, write that, so that's the perfect solution, right?

1503
01:09:41,000 --> 01:09:43,100
Would be to explicitly, write it that way.

1504
01:09:44,700 --> 01:09:48,100
Another solution is multi sample, right?

1505
01:09:48,100 --> 01:09:51,000
Turn on msaa and turn off, linear filtering.

1506
01:09:51,500 --> 01:09:54,900
And then it would actually be the case that these staggered pixels.

1507
01:09:54,900 --> 01:09:58,600
Would pick up the fact that one was coming from either or right, so

1508
01:09:58,600 --> 01:09:59,200
that's solution.

1509
01:09:59,200 --> 01:09:59,800
Number two.

1510
01:10:00,000 --> 01:10:03,400
So here our solution number one, right into pixel Shader to msaa.

1511
01:10:03,800 --> 01:10:10,500
3 is by far, the poor man solution, which is often times the best one

1512
01:10:10,500 --> 01:10:15,200
because it runs on the most platforms and that is manual pre

1513
01:10:15,200 --> 01:10:16,400
upsampling

1514
01:10:19,700 --> 01:10:20,300
Right.

1515
01:10:20,500 --> 01:10:22,700
So what you do there is you say, you know what?

1516
01:10:23,200 --> 01:10:27,300
Okay, so the artist handed me this little 4x4 pixel Sprite or

1517
01:10:27,300 --> 01:10:28,200
something, right?

1518
01:10:28,300 --> 01:10:30,000
And there's the, A, and B up in the corner.

1519
01:10:30,200 --> 01:10:33,100
And the problem is, when we're doing linear sampling, right?

1520
01:10:33,100 --> 01:10:36,900
If I was a turn-on linear than, like this pixel shows up as being half

1521
01:10:37,100 --> 01:10:41,000
a third of a and I'm sorry, a seventh of a, in the 3rd of B and that's

1522
01:10:41,000 --> 01:10:41,600
not what I want.

1523
01:10:41,600 --> 01:10:46,300
I want to be like solidly a all you do is you just up sample that

1524
01:10:46,400 --> 01:10:49,400
right pre make a texture, that's huge.

1525
01:10:49,800 --> 01:10:50,100
Right.

1526
01:10:50,100 --> 01:10:56,400
This 4x4 texture make this into a 512 by 512 texture, where all of

1527
01:10:56,400 --> 01:11:02,200
these are all a AAA BBB BBB.

1528
01:11:02,300 --> 01:11:07,000
So most of the time it is picking between two A's which just produces

1529
01:11:07,000 --> 01:11:10,900
the color a and only when you get near the boundary of A and B, do you

1530
01:11:10,900 --> 01:11:12,600
actually produce be right?

1531
01:11:14,100 --> 01:11:16,000
And that's a really cheap way to do it.

1532
01:11:16,000 --> 01:11:19,200
So what I would say is if you're working with an engine, it doesn't

1533
01:11:19,200 --> 01:11:19,500
you don't

1534
01:11:19,600 --> 01:11:20,500
Any control over it.

1535
01:11:20,500 --> 01:11:22,700
You don't want to be fancy because this Burns a lot of texture.

1536
01:11:22,700 --> 01:11:23,700
Memory, write.

1537
01:11:23,700 --> 01:11:27,000
It burns a ton of texture memory, but texture memory is pretty cheap

1538
01:11:27,000 --> 01:11:29,300
nowadays, especially for a pixel art game because there's just not

1539
01:11:29,300 --> 01:11:30,200
that much art.

1540
01:11:30,300 --> 01:11:34,700
So, all you have to do is blow those art assets up by actually just

1541
01:11:34,700 --> 01:11:35,500
replicating it.

1542
01:11:35,500 --> 01:11:39,500
So, take this 4x4 and spam it out into a 512 by 512.

1543
01:11:39,500 --> 01:11:44,700
Where each pixel, you know, you take 5, 12 divided by 4, right?

1544
01:11:44,700 --> 01:11:46,000
And you get 128.

1545
01:11:46,000 --> 01:11:49,400
So each pixel now maps to a 128 by 128

1546
01:11:49,500 --> 01:11:52,400
block of the same color, right?

1547
01:11:52,900 --> 01:11:55,700
And that'll solve your sub-pixel problem.

1548
01:12:01,200 --> 01:12:02,200
Just not as perfectly.

1549
01:12:09,700 --> 01:12:15,100
Couldn't you use the rounding and truncate to not sample outside the

1550
01:12:15,100 --> 01:12:16,500
edges of the texture.

1551
01:12:18,000 --> 01:12:24,200
So, the problem is really just we have to have a relatively sane

1552
01:12:24,200 --> 01:12:25,700
scheme for how we're going to do this.

1553
01:12:25,700 --> 01:12:28,800
This, this evolves, this is an accuracy issue.

1554
01:12:29,400 --> 01:12:32,800
So, if you think about how this works right, technically, we're always

1555
01:12:32,800 --> 01:12:35,200
doing a truncation and then we're adding 1.

1556
01:12:35,400 --> 01:12:39,300
So, like if we wanted to be 100% explicit here, we don't need the Plus

1557
01:12:39,900 --> 01:12:40,600
Right.

1558
01:12:41,000 --> 01:12:45,900
And we need to just make sure that we're one away from the end so that

1559
01:12:45,900 --> 01:12:51,600
we when we do this addition, we always make sure that we're within the

1560
01:12:51,600 --> 01:12:52,700
boundary right?

1561
01:12:53,400 --> 01:12:56,100
So I think that's the minimal one we could do again.

1562
01:12:56,100 --> 01:12:58,900
It's I'd like to go over this a little more carefully, but I think

1563
01:12:58,900 --> 01:13:01,300
that's the minimum that we could do.

1564
01:13:01,600 --> 01:13:04,200
And you know, I mean that looks

1565
01:13:05,800 --> 01:13:06,900
That looks pretty reasonable.

1566
01:13:06,900 --> 01:13:10,200
It looks like that top of that tree is back now for the most part,

1567
01:13:10,200 --> 01:13:10,700
right?

1568
01:13:12,700 --> 01:13:14,800
But again that's the stuff we want to analyze a little bit later

1569
01:13:14,800 --> 01:13:18,100
because we didn't really have time to kind of like work it through and

1570
01:13:18,100 --> 01:13:21,700
I didn't want to just start going oh we can do this and that so I'd

1571
01:13:21,700 --> 01:13:23,700
rather sort of take it a little bit slower.

1572
01:13:24,200 --> 01:13:25,400
But yeah, that's

1573
01:13:26,900 --> 01:13:28,400
I mean that's the basics of it, right?

1574
01:13:32,700 --> 01:13:37,100
Why are still adding 0.5 to 2 x and t y?

1575
01:13:37,300 --> 01:13:41,600
So I okay I've seen that question got asked before before I did that.

1576
01:13:49,000 --> 01:13:50,000
Is it any faster?

1577
01:13:50,000 --> 01:13:55,200
If you just test the domain of UV instead of testing edges?

1578
01:14:04,500 --> 01:14:07,200
so, the way that we're actually going to do this when we're doing

1579
01:14:07,200 --> 01:14:08,100
performance,

1580
01:14:12,800 --> 01:14:18,300
I think here's what I'll say is I don't often write software

1581
01:14:18,300 --> 01:14:20,300
rasterizer stuff, right?

1582
01:14:21,400 --> 01:14:24,900
So I don't want to answer incorrectly because it's not really my field

1583
01:14:24,900 --> 01:14:25,800
of expertise.

1584
01:14:26,800 --> 01:14:30,200
But I guess what I would say is I believe that the way that I suspect

1585
01:14:30,200 --> 01:14:34,600
will finally do this when we actually write the optimized version

1586
01:14:34,600 --> 01:14:36,200
which is like what regretted getting to.

1587
01:14:36,700 --> 01:14:40,100
I believe you could say that that sort of is what we will be doing.

1588
01:14:40,700 --> 01:14:41,700
We won't necessarily

1589
01:14:42,600 --> 01:14:45,600
Be thinking of them as much in terms of u and v will be thinking of

1590
01:14:45,600 --> 01:14:47,300
them as Bary, Centric coordinates.

1591
01:14:50,600 --> 01:14:52,700
Let me just make sure that that's just the same clamping thing.

1592
01:14:54,500 --> 01:14:54,900
Yeah.

1593
01:15:00,000 --> 01:15:05,100
Like I think what I would say is yes I believe that's the way you do

1594
01:15:05,100 --> 01:15:07,800
it quickly is that because you're looking at the very center

1595
01:15:07,800 --> 01:15:10,800
coordinates and your your testing the same coordinates that you're

1596
01:15:10,800 --> 01:15:11,700
using for look up.

1597
01:15:11,900 --> 01:15:12,500
So

1598
01:15:13,900 --> 01:15:15,500
I don't know if the answer is technically.

1599
01:15:15,500 --> 01:15:18,400
Yes, in the way that I've structured it, but I think it will.

1600
01:15:18,500 --> 01:15:22,500
I think you will see that that ends up being basically what we do

1601
01:15:22,900 --> 01:15:28,600
because you will like we want to collapse our both, our lookup and our

1602
01:15:28,800 --> 01:15:31,000
Edge functions into the same parameter space.

1603
01:15:31,000 --> 01:15:35,300
So I think I think the answer is yes, as I guess what I would say, but

1604
01:15:35,300 --> 01:15:37,700
don't quote me on that because we'll have to see when we actually get

1605
01:15:37,700 --> 01:15:37,800
there.

1606
01:15:37,800 --> 01:15:40,800
It's not something that I write often and so I'm not prepared to say

1607
01:15:40,800 --> 01:15:41,200
definitively.

1608
01:15:41,200 --> 01:15:41,700
Yes.

1609
01:15:42,600 --> 01:15:45,700
Software, rasterization is like, way out of my expertise, look area.

1610
01:15:45,700 --> 01:15:48,400
Like this is not what I do on a daily basis, right?

1611
01:15:48,400 --> 01:15:53,100
So I'm not necessarily qualified to give Pat answers to things like

1612
01:15:53,100 --> 01:15:53,600
that.

1613
01:15:58,400 --> 01:16:01,400
Is rendering on the CPU different in comparison to rendering on a GPU

1614
01:16:01,400 --> 01:16:03,700
code wise, not really.

1615
01:16:03,800 --> 01:16:08,800
So, basically the difference between the two is this Loop.

1616
01:16:09,200 --> 01:16:12,400
So the fact that we're implementing this Loop is mostly the

1617
01:16:12,400 --> 01:16:16,100
difference, the stuff that happens inside the loop is the Shader,

1618
01:16:16,500 --> 01:16:19,100
like, we write Shader, we will be writing Shader code in the GL

1619
01:16:19,100 --> 01:16:22,000
version that does exactly the same things that we do in here, right?

1620
01:16:22,100 --> 01:16:25,700
So basically, what happens on the GPU is the GPU, does the

1621
01:16:25,700 --> 01:16:27,500
rasterization part because it's built in.

1622
01:16:27,800 --> 01:16:29,900
So you don't control that unfortunately.

1623
01:16:32,000 --> 01:16:38,400
So it wrote this part right and then you do a lot of this stuff and

1624
01:16:38,400 --> 01:16:42,000
some of it you can have some of its got like macro it up for you so

1625
01:16:42,000 --> 01:16:44,300
like you don't have to manually compute, the u and v s.

1626
01:16:44,300 --> 01:16:45,200
It will compute them for you.

1627
01:16:45,200 --> 01:16:46,400
Sometimes it's tough like that, right?

1628
01:16:46,400 --> 01:16:49,500
Like there's things you can do like the lookups like the txt why?

1629
01:16:49,500 --> 01:16:51,900
I mean it's got a texture unit that can do that too.

1630
01:16:51,900 --> 01:16:54,800
So a bunch of things are Mac road, but it's all the exact same stuff

1631
01:16:54,800 --> 01:16:58,200
which is why I'm going through it with you this way so that you can

1632
01:16:58,200 --> 01:16:58,500
see.

1633
01:16:58,500 --> 01:17:01,400
Okay everything now you know what the gpus doing, like the Jeep.

1634
01:17:01,600 --> 01:17:05,200
You is doing this code, it's doing much more higher-end versions of

1635
01:17:05,200 --> 01:17:06,300
this code, right?

1636
01:17:06,400 --> 01:17:09,100
Because they, you know, keep cranking on it and trying to do more and

1637
01:17:09,100 --> 01:17:11,900
more optimal things that do like, you know, hierarchical calling and

1638
01:17:11,900 --> 01:17:14,500
all these sorts of things but they're basically doing exactly what

1639
01:17:14,500 --> 01:17:15,200
we're doing now.

1640
01:17:20,500 --> 01:17:23,400
Are there performance benefits for using a quad as primitive over

1641
01:17:23,400 --> 01:17:25,100
triangles in a software renderer like this?

1642
01:17:25,100 --> 01:17:30,700
Yes, excuse me.

1643
01:17:33,500 --> 01:17:39,600
I don't want to overstate the case, potentially.

1644
01:17:42,600 --> 01:17:46,100
But there's actually performance benefits for using a quad as a

1645
01:17:46,100 --> 01:17:49,600
primitive in Hardware as well, like, basically.

1646
01:17:53,100 --> 01:17:57,200
the only reason they don't do exactly what I'm doing here and do it as

1647
01:17:57,200 --> 01:17:59,800
quads is because quads don't

1648
01:18:00,000 --> 01:18:03,700
As well in 3D because triangles are the actual primitive that can

1649
01:18:03,700 --> 01:18:04,600
construct everything.

1650
01:18:04,800 --> 01:18:07,800
Whereas in a Sprite engine quads are the things you never have a

1651
01:18:07,800 --> 01:18:12,900
triangular problem and that gets down to the fact that surfaces, you

1652
01:18:12,900 --> 01:18:15,300
know, have extraordinary vertices and triangles.

1653
01:18:15,300 --> 01:18:17,500
The only things that can properly tile and all these other sorts of

1654
01:18:17,500 --> 01:18:18,700
weird, things like that.

1655
01:18:19,000 --> 01:18:22,200
And that the plane equation is only defined on a triangle and all

1656
01:18:22,200 --> 01:18:23,000
these sorts of stuff.

1657
01:18:23,100 --> 01:18:27,700
So there's all these reasons why they go triangular, but the

1658
01:18:27,700 --> 01:18:29,800
rasterization level, if you're a spy,

1659
01:18:30,000 --> 01:18:30,600
Right engine.

1660
01:18:30,700 --> 01:18:33,800
Even if you were a hardware Sprite engine I would be willing to say

1661
01:18:33,800 --> 01:18:36,800
that I suspect the hardware would always be much faster squads that it

1662
01:18:36,800 --> 01:18:40,300
was triangles because it be half the throughput, right?

1663
01:18:42,300 --> 01:18:42,700
So yeah.

1664
01:19:00,400 --> 01:19:02,900
Why do the edges of the tree look like they are feathered?

1665
01:19:03,100 --> 01:19:04,500
It's because they actually are.

1666
01:19:05,300 --> 01:19:11,600
So, if you take a look at the actual art assets, if we go into here.

1667
01:19:12,400 --> 01:19:14,800
So, where are the art assets?

1668
01:19:14,800 --> 01:19:15,900
I guess this is it.

1669
01:19:18,200 --> 01:19:23,000
so if we take a look at the actual assets, you can see that they

1670
01:19:23,000 --> 01:19:26,400
actually are feathered, so I'll create so you can kind of see

1671
01:19:27,800 --> 01:19:28,900
Oh, white background.

1672
01:19:30,600 --> 01:19:34,100
So you see that that's that's how they're actually made.

1673
01:19:35,500 --> 01:19:37,100
So that's just how that is.

1674
01:19:41,700 --> 01:19:45,100
See, Bruce the yeah.

1675
01:19:55,800 --> 01:19:57,800
With a different render as being the platform layer.

1676
01:19:58,100 --> 01:20:00,600
No, because they're platform-independent most of the time.

1677
01:20:01,100 --> 01:20:03,600
So they'll be sort of a different thing for renderers.

1678
01:20:03,600 --> 01:20:05,300
Where will kind of have will pull them out?

1679
01:20:05,300 --> 01:20:09,800
Once it's time to do that, will pull them out into that third tier.

1680
01:20:09,800 --> 01:20:11,800
I've talked about multiple times, I said we're going to have a three

1681
01:20:11,800 --> 01:20:12,400
tier thing.

1682
01:20:13,900 --> 01:20:14,300
so,

1683
01:20:20,600 --> 01:20:23,500
I saw a great video on YouTube called computer color is broken from

1684
01:20:23,500 --> 01:20:24,100
minutephysics.

1685
01:20:24,100 --> 01:20:26,800
A talks about how many cars is usually incorrectly done without

1686
01:20:26,800 --> 01:20:27,200
relying.

1687
01:20:27,200 --> 01:20:28,400
On third-party libraries.

1688
01:20:28,600 --> 01:20:29,900
You have an opportunity to do it correctly.

1689
01:20:30,000 --> 01:20:30,300
Yeah.

1690
01:20:30,300 --> 01:20:35,700
So we will be doing correctly or close to correctly.

1691
01:20:37,400 --> 01:20:39,000
You don't really need to do it.

1692
01:20:40,300 --> 01:20:44,200
So they're talking about situations, probably that are a little more

1693
01:20:44,200 --> 01:20:45,900
important than the ones that were talking about.

1694
01:20:45,900 --> 01:20:49,400
So like if you're doing a lighting, a physically based lighting,

1695
01:20:49,800 --> 01:20:51,600
You typically have to take taken into account.

1696
01:20:51,600 --> 01:20:53,900
If you're doing High dynamic range has taken into account.

1697
01:20:54,100 --> 01:20:56,100
If you're doing Sprites like this, you don't really have to take it

1698
01:20:56,100 --> 01:20:58,200
into account, although your edges may look a little bit better.

1699
01:20:58,200 --> 01:20:59,700
So like the edge

1700
01:21:00,100 --> 01:21:00,800
Improve.

1701
01:21:02,400 --> 01:21:06,500
So normally I would not Advocate the thing that they're probably

1702
01:21:06,500 --> 01:21:10,600
talking about in that view, video is gamma and normally I would not

1703
01:21:10,600 --> 01:21:13,000
Advocate correcting for the gamma in a Sprite engine.

1704
01:21:13,400 --> 01:21:19,200
Unless you had a really good reason but because Juan Chun made me

1705
01:21:19,200 --> 01:21:24,100
promise to show people how to do correct gamma we will be doing

1706
01:21:24,100 --> 01:21:31,700
correct gamma because of Juan and so you will see me when we go

1707
01:21:32,100 --> 01:21:36,400
Into our sort of optimization pass and we have SSE in there when we

1708
01:21:36,400 --> 01:21:40,000
can actually start to do it without it being in possibly slow, I will

1709
01:21:40,000 --> 01:21:48,700
show how to do the gamma correction and you know, you can see what the

1710
01:21:48,700 --> 01:21:49,200
results are.

1711
01:21:49,200 --> 01:21:54,000
They're not particularly impressive, but they're a little bit better

1712
01:21:54,000 --> 01:21:55,100
potentially, Maybe.

1713
01:21:57,800 --> 01:21:59,000
Again, really, it's for Lon.

1714
01:21:59,100 --> 01:22:00,800
Well, I made me promise to show how to do it.

1715
01:22:01,100 --> 01:22:05,900
So I will do it basically just involve squaring and then Square

1716
01:22:05,900 --> 01:22:12,800
rooting or using a color table, lookup, it's not rocket science.

1717
01:22:22,800 --> 01:22:25,700
remember when you introduced render group the other week, is this

1718
01:22:25,700 --> 01:22:28,900
sub-pixel rendering lerp, one of the things that will go in the render

1719
01:22:28,900 --> 01:22:29,300
group

1720
01:22:30,800 --> 01:22:34,600
Dude, it's already in the render group, right?

1721
01:22:35,300 --> 01:22:38,700
Draw a rectangle slowly gets called from inside the wreck inside the

1722
01:22:38,700 --> 01:22:39,800
render group, right?

1723
01:22:40,800 --> 01:22:43,100
Draw a rectangle slowly is the layer.

1724
01:22:43,100 --> 01:22:47,100
Paul here is the render group, so I'm not sure what you mean by that.

1725
01:22:47,100 --> 01:22:51,100
We it is, it is in the coordinate system, are little sort of debug

1726
01:22:51,100 --> 01:22:52,200
thing we were using here.

1727
01:22:53,000 --> 01:22:55,100
If you're asking whether the rest of render people start using it.

1728
01:22:55,100 --> 01:22:56,500
Yes, obviously.

1729
01:22:56,500 --> 01:22:58,700
That's, that's what we're sort of aiming towards, but we're just got

1730
01:22:58,700 --> 01:23:00,500
to get it all working in like a little simple deep.

1731
01:23:00,600 --> 01:23:03,100
Case, so that we can get it.

1732
01:23:03,100 --> 01:23:06,000
Correct and then we can go ahead and have everybody call it.

1733
01:23:06,300 --> 01:23:11,100
And so that our renderer can all go through like a nice, you know.

1734
01:23:12,600 --> 01:23:13,500
Useful path.

1735
01:23:16,900 --> 01:23:24,400
All right, I think we are at time so I am going to call it for today,

1736
01:23:24,900 --> 01:23:25,400
Man.

1737
01:23:25,400 --> 01:23:26,700
2 days back-to-back.

1738
01:23:26,700 --> 01:23:30,600
We're like nothing went wrong with rendering, guess?

1739
01:23:30,600 --> 01:23:33,900
It just goes to show you that programming visual stuff is easier than

1740
01:23:33,900 --> 01:23:36,800
programming non visual stuff or something.

1741
01:23:37,800 --> 01:23:39,800
Let's go ahead and save off our Mischief there.

1742
01:23:42,100 --> 01:23:45,100
But yeah, thank you, everyone for joining me for another episode of

1743
01:23:45,100 --> 01:23:45,800
handmade hero.

1744
01:23:45,800 --> 01:23:50,200
We did linear Blended texture mapping today and it all went great.

1745
01:23:52,000 --> 01:23:52,300
Yeah.

1746
01:23:52,300 --> 01:23:53,000
What can I say?

1747
01:23:53,200 --> 01:23:54,400
That's a lot easier.

1748
01:23:54,400 --> 01:23:54,900
I would.

1749
01:23:56,000 --> 01:23:56,900
Pat it in my head.

1750
01:23:56,900 --> 01:23:59,400
I was like the renderer is going to take like two months.

1751
01:23:59,400 --> 01:23:59,800
I think I even

1752
01:24:00,000 --> 01:24:01,400
Said something like that.

1753
01:24:02,100 --> 01:24:05,400
And yet it really took a week for us to implement mostly all the

1754
01:24:05,400 --> 01:24:06,100
features.

1755
01:24:06,900 --> 01:24:10,200
And so, I guess we'll see next week.

1756
01:24:10,200 --> 01:24:14,500
We'll work on tightening up the math and then the week after that,

1757
01:24:14,500 --> 01:24:15,800
we'll start working on optimization.

1758
01:24:15,800 --> 01:24:18,300
I don't know at this point who knows, like maybe will be done by the

1759
01:24:18,300 --> 01:24:18,900
end of next week.

1760
01:24:18,900 --> 01:24:20,000
I don't even know what to say.

1761
01:24:20,200 --> 01:24:22,500
I thought so for rendering was going to be a big topic.

1762
01:24:23,700 --> 01:24:28,000
It just doesn't seem to be and so, hey, that's great.

1763
01:24:28,000 --> 01:24:29,900
I mean the sooner we get

1764
01:24:30,000 --> 01:24:34,200
To making the game, the more fun we can have making the game.

1765
01:24:34,200 --> 01:24:36,600
I don't know, but I love making rendering stuff so it's 61f doesn't

1766
01:24:36,600 --> 01:24:37,200
happen to me.

1767
01:24:37,700 --> 01:24:41,300
I guess I'm just happy that's going smoothly so I hope you guys are

1768
01:24:41,300 --> 01:24:41,900
enjoying it.

1769
01:24:42,000 --> 01:24:44,000
I know I am next week.

1770
01:24:44,000 --> 01:24:45,000
We'll tighten up the math.

1771
01:24:45,000 --> 01:24:48,500
A bit I want to go through there and start to talk about like pixel

1772
01:24:48,500 --> 01:24:55,500
centers, Phil rules barycentric, coordinates and probably some color

1773
01:24:55,500 --> 01:24:55,800
stuff.

1774
01:24:55,800 --> 01:24:59,400
Maybe we'll get the gamma in there as well and then try to get all of

1775
01:24:59,400 --> 01:24:59,800
that in

1776
01:25:00,400 --> 01:25:04,400
You know, next week's we kind of have like, this is, you know, the

1777
01:25:04,400 --> 01:25:08,800
definitive kind of math that we want to be doing so that we can start

1778
01:25:08,800 --> 01:25:12,400
moving on to the optimization path, which is really just, you know,

1779
01:25:12,600 --> 01:25:15,700
dropping it down to SSE and making sure that we're doing, you know,

1780
01:25:15,700 --> 01:25:19,400
relatively minimal number of pixel tests and operations inside those

1781
01:25:19,400 --> 01:25:20,000
pixels.

1782
01:25:21,000 --> 01:25:25,600
So, yeah, that's that's software rendering in a nutshell and, and

1783
01:25:25,600 --> 01:25:26,400
that's the path we taking.

1784
01:25:26,400 --> 01:25:29,800
So, I hope to see you back here next week, probably.

1785
01:25:29,900 --> 01:25:31,200
Should be same schedule as this week.

1786
01:25:31,200 --> 01:25:32,200
So 5 p.m.

1787
01:25:33,200 --> 01:25:35,200
weeknights right here on Twitch.

1788
01:25:35,200 --> 01:25:37,500
If you want to follow along at home, of course, you can pre-order the

1789
01:25:37,500 --> 01:25:40,100
game on handmade hero dot org and it comes with a source code.

1790
01:25:40,100 --> 01:25:42,400
Every night, you can download it and play around with the stuff that

1791
01:25:42,400 --> 01:25:43,900
we're playing around with, its great way to learn.

1792
01:25:44,500 --> 01:25:47,800
We also have a forum to ask questions and that has forced a Mac and

1793
01:25:47,800 --> 01:25:50,800
Linux and an annotated episode guide for catching up on old episodes.

1794
01:25:50,800 --> 01:25:51,600
Pretty awesome.

1795
01:25:52,000 --> 01:25:54,400
We have a patreon page if you want to support this video series, if

1796
01:25:54,400 --> 01:25:55,900
you enjoyed it and want to support it.

1797
01:25:56,100 --> 01:25:59,600
That's a really awesome thing we very much appreciate, and we also

1798
01:25:59,600 --> 01:25:59,800
have a

1799
01:26:00,000 --> 01:26:02,800
Schedule tweeting bot thing that will treat the schedule at you.

1800
01:26:02,800 --> 01:26:07,600
If you want to know when there's going to be a live broadcast that

1801
01:26:07,600 --> 01:26:11,900
will tell you, so definitely check those out when you get a chance and

1802
01:26:12,600 --> 01:26:14,800
I guess have a fantastic weekend.

1803
01:26:14,900 --> 01:26:17,500
I can't seem to get to the task bar for some reason.

1804
01:26:17,500 --> 01:26:18,100
There it is.

1805
01:26:18,900 --> 01:26:22,100
So yeah, have a fantastic weekend and I will hopefully see you guys on

1806
01:26:22,100 --> 01:26:22,500
Monday.

1807
01:26:22,500 --> 01:26:23,300
Take it easy, everyone.

