1
00:00:00,900 --> 00:00:02,700
Hello, everyone, and welcome to handmade hero.

2
00:00:02,700 --> 00:00:05,300
The show we could have complete game live on stream.

3
00:00:05,300 --> 00:00:06,700
No engines, no libraries.

4
00:00:07,000 --> 00:00:08,500
It's just our code here.

5
00:00:08,600 --> 00:00:11,300
Running the entire thing right down to rendering the pixels.

6
00:00:11,300 --> 00:00:15,300
We don't even call the GPU, if you can believe that.

7
00:00:16,500 --> 00:00:18,700
Right now, we're in the middle of doing some, debug code for

8
00:00:18,700 --> 00:00:22,700
ourselves, we decided it was time to have some nice debugging tools

9
00:00:22,900 --> 00:00:26,300
that we could, you know, use to better visualize what our code is

10
00:00:26,300 --> 00:00:26,700
doing.

11
00:00:26,700 --> 00:00:29,900
And make it easier to find bugs that are in the code.

12
00:00:29,900 --> 00:00:30,500
When we have

13
00:00:31,200 --> 00:00:33,200
Or even, just to even know that the bugs are there.

14
00:00:33,200 --> 00:00:35,400
Sometimes you can have very subtle bugs and if you don't have good

15
00:00:35,400 --> 00:00:39,600
visualization, you'll kind of there will be something wrong but you

16
00:00:39,600 --> 00:00:39,900
can't.

17
00:00:39,900 --> 00:00:42,500
It's hard to put your finger on it or some things are acting strange.

18
00:00:42,500 --> 00:00:44,300
You don't really know why and stuff like that.

19
00:00:44,300 --> 00:00:48,100
So good to bugging code can be very good for a number of reasons.

20
00:00:48,300 --> 00:00:52,100
It shortens the debugging time but also lets you find more total bugs

21
00:00:52,100 --> 00:00:52,900
than you would have found.

22
00:00:52,900 --> 00:00:55,600
Otherwise specially kind of subtle performance bugs or things like

23
00:00:55,600 --> 00:00:59,500
that that are kind of tricky to find sometimes with traditional

24
00:00:59,500 --> 00:01:00,000
debugging.

25
00:01:00,500 --> 00:01:01,900
So that's what we're doing right now.

26
00:01:02,200 --> 00:01:04,900
This is going to be pretty much all coding here because we have a

27
00:01:04,900 --> 00:01:06,300
bunch of stuff that we want to do.

28
00:01:06,900 --> 00:01:10,300
So there's not going to be much Exposition, we already talked about it

29
00:01:10,300 --> 00:01:12,800
on the previous two days, so it's going to be all coding it today is

30
00:01:12,800 --> 00:01:16,100
what day 178 if you would like, to follow along with the coding at

31
00:01:16,100 --> 00:01:16,700
home.

32
00:01:16,800 --> 00:01:19,700
And you were one of the folks who pre-ordered the game on handmade

33
00:01:19,700 --> 00:01:25,100
hero dot-org, you will want to unpack day, 177, the source code from

34
00:01:25,100 --> 00:01:25,300
day.

35
00:01:25,300 --> 00:01:25,400
One.

36
00:01:25,400 --> 00:01:28,900
77 is what I'll be starting on day here on day one 78.

37
00:01:29,400 --> 00:01:30,400
So go ahead and do that.

38
00:01:30,600 --> 00:01:34,000
You will be where I am right now, and where am I right now?

39
00:01:34,000 --> 00:01:35,000
Well, let's take a look.

40
00:01:36,700 --> 00:01:38,800
Let's take a look.

41
00:01:39,800 --> 00:01:45,000
So, you know, if you remember correctly, last time we had just kind of

42
00:01:45,600 --> 00:01:49,900
put in the ability to do some automatic debug automatic performance

43
00:01:49,900 --> 00:01:53,700
counter stuff that improved upon the stuff that we had before but

44
00:01:53,700 --> 00:01:56,800
there's a bunch of stuff that we would like to do this for starters.

45
00:01:57,000 --> 00:02:00,000
We were just using the font code that we had in there before that we

46
00:02:00,000 --> 00:02:03,800
wrote but that was, you know, using a very large font, right?

47
00:02:04,300 --> 00:02:05,500
That we were using for testing.

48
00:02:05,500 --> 00:02:06,300
So we could see the

49
00:02:06,400 --> 00:02:08,900
What's up, you know, nice and close and all that sort of thing.

50
00:02:09,400 --> 00:02:13,100
And so obviously, you know, if you know, if you look at that, that's

51
00:02:13,100 --> 00:02:16,900
not going to be a very effective way to do a debug display to say, the

52
00:02:16,900 --> 00:02:20,800
very least because I mean, you know, nothing for nothing but you ain't

53
00:02:20,800 --> 00:02:25,900
gonna fit a lot of debug information on the screen if that's the size

54
00:02:25,900 --> 00:02:26,800
of your font.

55
00:02:27,100 --> 00:02:29,800
So what we probably want to do at this point is go over to our asset

56
00:02:29,800 --> 00:02:33,900
Packer and ask it to pack up for us up.

57
00:02:33,900 --> 00:02:36,200
A tiny font you know a font that's going to be

58
00:02:36,700 --> 00:02:42,600
You know legible you know, barely legible for us but that fits a lot

59
00:02:42,600 --> 00:02:44,200
of information on the screen at once.

60
00:02:44,300 --> 00:02:47,600
I think that's basically what we're going to look for and maybe we

61
00:02:47,600 --> 00:02:52,700
want also a monospaced font because we don't have really much in the

62
00:02:52,700 --> 00:02:55,100
way of any kind of advanced typography.

63
00:02:55,400 --> 00:02:59,500
So you know, our debug print outs are not going to be laid out pretty

64
00:02:59,500 --> 00:02:59,800
or anything.

65
00:03:00,000 --> 00:03:00,300
That.

66
00:03:00,300 --> 00:03:02,500
So we may want like Mah no space for something.

67
00:03:02,500 --> 00:03:05,100
So that we can line things up, manually with spaces, you know, old

68
00:03:05,100 --> 00:03:09,100
school, editor style, which, you know, we've talked about this before.

69
00:03:09,100 --> 00:03:12,500
It's probably why, you know, editors these days still use monospace

70
00:03:12,500 --> 00:03:14,100
fonts is because they don't have good typography.

71
00:03:14,100 --> 00:03:16,700
So we don't have good typography there.

72
00:03:16,700 --> 00:03:21,300
And so, our debug layout should probably be something in a monospace

73
00:03:21,300 --> 00:03:21,700
font.

74
00:03:21,700 --> 00:03:23,400
I would think so.

75
00:03:23,400 --> 00:03:24,700
Let's just get that going.

76
00:03:24,700 --> 00:03:27,600
Let's just, you know, do a little bit of that first just so we can

77
00:03:27,600 --> 00:03:29,600
kind of be in a better position to start.

78
00:03:30,000 --> 00:03:33,400
About what we want to do with that debug display, how we want to get

79
00:03:33,400 --> 00:03:36,700
that kind of working a little bit more, more fully.

80
00:03:37,900 --> 00:03:41,200
So in the acid Packer here, I think we have a thing that writes out

81
00:03:41,200 --> 00:03:43,700
fonts by themselves.

82
00:03:43,700 --> 00:03:44,900
Am I wrong about that?

83
00:03:44,900 --> 00:03:45,700
I think this is it.

84
00:03:45,700 --> 00:03:48,400
Yeah, so you can see this writing out the fonts here.

85
00:03:48,400 --> 00:03:50,400
So what I'd like to do is, you know,

86
00:03:56,900 --> 00:04:00,500
Like to have some way, probably a picking fonts I guess we haven't

87
00:04:00,500 --> 00:04:04,100
really done much with that yet in terms of picking fonts, so maybe we

88
00:04:04,100 --> 00:04:05,200
want to do that as well.

89
00:04:05,400 --> 00:04:09,300
What we could do here is in our handmade asset .h, we don't really

90
00:04:09,300 --> 00:04:12,300
have much in the way of support for like selecting things

91
00:04:12,300 --> 00:04:15,500
specifically, but our tag system can totally be used for that, right?

92
00:04:15,500 --> 00:04:20,000
We can make basically and a set of enumerated tags for lack of a

93
00:04:20,000 --> 00:04:21,200
better term, right?

94
00:04:21,300 --> 00:04:25,200
And we can go ahead and sort of say that we want a specific type of

95
00:04:25,200 --> 00:04:25,500
font.

96
00:04:25,500 --> 00:04:26,500
So if I look at the

97
00:04:26,600 --> 00:04:27,100
All formats.

98
00:04:27,100 --> 00:04:29,900
For example, we've got, you know, sort of these things facing

99
00:04:29,900 --> 00:04:32,400
Direction, Unicode code point, that stuff we could have something in

100
00:04:32,400 --> 00:04:35,000
here that's like font type, right?

101
00:04:35,600 --> 00:04:38,400
And we could say, you know, something in here where it's like, you

102
00:04:38,400 --> 00:04:46,000
know, zero is a debug or, like the default game font one is like the

103
00:04:46,000 --> 00:04:50,800
debug font or something, you know, or maybe we want to do something a

104
00:04:50,800 --> 00:04:51,900
little bit further up.

105
00:04:51,900 --> 00:04:54,600
So then case we want to use something else, you know, we could do

106
00:04:54,600 --> 00:04:55,400
something like this.

107
00:04:55,800 --> 00:04:56,400
In fact, we could

108
00:04:56,500 --> 00:04:58,400
even do something like this, right?

109
00:04:58,600 --> 00:05:05,900
Asset font type and we could do like font type default.

110
00:05:08,400 --> 00:05:09,500
And font type.

111
00:05:11,400 --> 00:05:14,600
Debug, you know, and we could just use those.

112
00:05:15,300 --> 00:05:19,400
So if we wanted to do that again we really shouldn't have to you know

113
00:05:19,800 --> 00:05:22,600
we haven't really done a whole lot of testing of our asset system but

114
00:05:22,600 --> 00:05:25,100
I suspect it all this stuff is probably totally fine.

115
00:05:25,500 --> 00:05:28,900
We'll find out but we'll go in here and just say, Okay, I want to set

116
00:05:28,900 --> 00:05:31,800
this to be the default font or something, right?

117
00:05:32,600 --> 00:05:36,800
And then, I can go in here and sort of do the exact same thing, you

118
00:05:36,800 --> 00:05:39,000
know, with the with, with a different font.

119
00:05:39,000 --> 00:05:40,900
So I can just say, all right, let's let's make another.

120
00:05:41,100 --> 00:05:41,500
Here.

121
00:05:41,500 --> 00:05:44,200
Maybe I can even just kind of bracket that off.

122
00:05:44,200 --> 00:05:47,000
I could even make this just be a thing that we do for all our fonts.

123
00:05:47,000 --> 00:05:52,400
So I could I could just do like something like internal void, add font

124
00:05:52,400 --> 00:05:57,700
like this and just kind of grab this whole thing, you know, and do

125
00:05:57,700 --> 00:05:57,900
that.

126
00:05:57,900 --> 00:05:59,900
And that way I can just have different.

127
00:06:00,000 --> 00:06:02,300
Fonts where I can say which fonts I want them to be.

128
00:06:03,100 --> 00:06:04,700
So I can just say, all right, you know,

129
00:06:06,500 --> 00:06:07,600
What's the font file?

130
00:06:08,000 --> 00:06:08,900
What's the font name?

131
00:06:09,800 --> 00:06:12,800
You know so then in here we just go

132
00:06:14,800 --> 00:06:16,700
like so add font.

133
00:06:18,000 --> 00:06:19,900
And again I'm not really doing anything interesting here.

134
00:06:19,900 --> 00:06:21,500
All I'm doing is just you know trying to make it.

135
00:06:21,500 --> 00:06:24,900
So it's easy for us to have two fonts in here which we've never really

136
00:06:24,900 --> 00:06:25,500
tried before.

137
00:06:25,500 --> 00:06:27,700
So as we should have probably tested that before we moved on.

138
00:06:27,700 --> 00:06:31,000
But you know what you going to do?

139
00:06:31,200 --> 00:06:32,700
God do stuff as it comes up.

140
00:06:33,000 --> 00:06:39,100
So yeah, you know, start with that and we can say now that we've got

141
00:06:39,100 --> 00:06:41,400
that font name font file and font name.

142
00:06:41,400 --> 00:06:45,100
Let's go ahead and compile this and make sure this all work site,

143
00:06:45,100 --> 00:06:47,500
okay, it's got a, got to have the assets obviously.

144
00:06:47,700 --> 00:06:51,800
So pass that in there and then, yeah.

145
00:06:53,100 --> 00:06:53,800
Looks good.

146
00:06:54,900 --> 00:07:01,000
So if we want to add a new font, so this tag here, we'd want to pass

147
00:07:01,000 --> 00:07:02,400
that font type in, right?

148
00:07:02,400 --> 00:07:05,200
Because we don't know what the type should actually be.

149
00:07:05,200 --> 00:07:08,600
So we can say, you know, which type of font we want and there's the

150
00:07:08,600 --> 00:07:11,000
type there so we can just go ahead and say, all right.

151
00:07:11,000 --> 00:07:16,600
That's that's going to be this and then we can do another one where we

152
00:07:16,600 --> 00:07:21,400
pass font type debug and the font type that we would want for debug.

153
00:07:22,300 --> 00:07:27,700
You know, I guess I probably just use this one here that we've got

154
00:07:27,800 --> 00:07:34,300
Liberation mono, like C program, Windows fonts, Liberation, mono

155
00:07:35,200 --> 00:07:39,300
regular, you know, something like this.

156
00:07:40,200 --> 00:07:44,800
And and so in there, I would just say, okay, you know, see Windows

157
00:07:44,800 --> 00:07:47,900
fonts Liberation law, no like that.

158
00:07:48,200 --> 00:07:51,100
And then, you know, I don't actually know what the name of that one

159
00:07:51,100 --> 00:07:51,300
is.

160
00:07:51,300 --> 00:07:51,700
I think it's

161
00:07:51,900 --> 00:07:57,900
Liberation space mono, di Tri it Liberation mono but I guess I could

162
00:07:57,900 --> 00:08:00,300
also see Windows fonts.

163
00:08:00,600 --> 00:08:01,000
Oops.

164
00:08:02,200 --> 00:08:04,200
I could just see what it says.

165
00:08:04,200 --> 00:08:10,400
The name of that is so, where is Liberation mono Liberation?

166
00:08:11,400 --> 00:08:12,800
But there's a lot of fonts on here.

167
00:08:13,100 --> 00:08:15,700
I think this machine is said lots of things installed on it.

168
00:08:15,700 --> 00:08:20,900
Like you know, it had Adobe Premiere on it at one point or and like

169
00:08:20,900 --> 00:08:24,700
other package like that because we used to use it for other things.

170
00:08:24,700 --> 00:08:28,700
And so now that it's been like kind of replaced as a, as a streaming

171
00:08:28,700 --> 00:08:29,800
machine, doesn't actually joining us.

172
00:08:29,800 --> 00:08:31,600
That all these fonts you nowhere,

173
00:08:32,000 --> 00:08:32,700
Fill in there.

174
00:08:33,299 --> 00:08:33,400
Yeah.

175
00:08:33,400 --> 00:08:34,700
So just Liberation mono.

176
00:08:35,500 --> 00:08:37,400
So that's, I think that's fine.

177
00:08:37,600 --> 00:08:40,100
That's what I use in my editor, so maybe we'll use that.

178
00:08:40,299 --> 00:08:43,700
So if I do Liberation mono, let's go ahead and compile this.

179
00:08:45,600 --> 00:08:47,800
And I'd tag tag font type.

180
00:08:49,700 --> 00:08:55,900
Let's see free from asset font type to real 52, possible loss of data.

181
00:08:56,600 --> 00:08:58,400
Well, you know what?

182
00:08:58,600 --> 00:08:59,800
Let's just go ahead and cast it then.

183
00:09:00,700 --> 00:09:01,600
No harm, no foul.

184
00:09:02,200 --> 00:09:06,100
So now that we've done that, I don't know, that's going to pack some

185
00:09:06,100 --> 00:09:08,500
fun stuff in there, and that's fine.

186
00:09:09,000 --> 00:09:12,400
So we'll go ahead and see what happens if I run.

187
00:09:12,400 --> 00:09:14,700
It will go to the data directory.

188
00:09:15,900 --> 00:09:18,400
And we'll run build test asset Builder.

189
00:09:20,200 --> 00:09:20,800
So yeah.

190
00:09:22,000 --> 00:09:23,200
Let's see what happened there.

191
00:09:23,500 --> 00:09:27,000
Well, the test fonts got about twice as big which is I think exactly

192
00:09:27,000 --> 00:09:30,700
what we would hope for and of course we still haven't quite done.

193
00:09:30,700 --> 00:09:31,000
What?

194
00:09:31,000 --> 00:09:31,900
We still haven't picked.

195
00:09:31,900 --> 00:09:34,500
A smaller size is still going to be huge but at least we can test the

196
00:09:34,500 --> 00:09:39,100
Dual font thing which will give us some perspective on whether we're

197
00:09:39,100 --> 00:09:39,700
working, right?

198
00:09:39,800 --> 00:09:43,000
And then we can go ahead and try to add that that size in there

199
00:09:44,500 --> 00:09:45,100
separately.

200
00:09:46,300 --> 00:09:46,900
Oh dear.

201
00:09:47,400 --> 00:09:48,800
So we do have some kind of a bug here.

202
00:09:48,800 --> 00:09:50,200
It looks like right.

203
00:09:51,600 --> 00:09:53,100
Oh you know what?

204
00:09:54,700 --> 00:09:55,300
Well, no.

205
00:09:57,300 --> 00:09:58,600
I rebuilt the fonts.

206
00:10:00,000 --> 00:10:01,200
And then we reran.

207
00:10:02,000 --> 00:10:03,700
So I'm not sure why we're getting a bug there.

208
00:10:07,100 --> 00:10:07,700
Oh dear.

209
00:10:08,900 --> 00:10:11,300
So, our asset count is massively wrong.

210
00:10:12,100 --> 00:10:17,000
So, something very bad has happened during loading these files.

211
00:10:17,400 --> 00:10:18,100
As you can see,

212
00:10:22,600 --> 00:10:26,800
Well I guess we don't necessarily have a problem with the tagging but

213
00:10:26,800 --> 00:10:28,900
we do have a problem with something else.

214
00:10:29,800 --> 00:10:31,500
So why are we getting that problem?

215
00:10:32,000 --> 00:10:36,000
Why are we expecting to load a lot more of these than we actually

216
00:10:36,000 --> 00:10:36,700
loaded.

217
00:10:38,000 --> 00:10:40,400
That's a little bit weird, right?

218
00:10:46,200 --> 00:10:46,500
Hmm.

219
00:10:48,400 --> 00:10:53,600
Well we know we merge multiple files properly so I guess I don't know

220
00:10:53,600 --> 00:10:58,400
why this would have had any particularly unusual sort of operation to

221
00:10:58,400 --> 00:10:58,800
it.

222
00:10:59,400 --> 00:11:02,200
I don't know why we would be getting some kind of a weird situation

223
00:11:02,200 --> 00:11:03,100
just from that.

224
00:11:04,100 --> 00:11:08,400
However, you know, let's just go ahead and step through it and see see

225
00:11:08,400 --> 00:11:10,100
what our what our actual problem is.

226
00:11:10,300 --> 00:11:13,700
What I'd like to do first is I'm going to go ahead and delete

227
00:11:13,700 --> 00:11:15,800
everything but the font one just so we can

228
00:11:16,000 --> 00:11:20,200
Narrow it down to one thing and just see if there's you know, just

229
00:11:20,200 --> 00:11:21,500
make it a little easier on ourselves.

230
00:11:21,500 --> 00:11:25,000
We don't have to debug all these other guys, the same time.

231
00:11:25,200 --> 00:11:29,700
So we've got like test1 test2, all that stuff.

232
00:11:29,700 --> 00:11:30,900
Let's just get rid of those.

233
00:11:30,900 --> 00:11:34,100
So now all we have is test fonts dot hhha.

234
00:11:34,600 --> 00:11:36,500
So all we're doing is loading the fonts

235
00:11:37,800 --> 00:11:42,400
It says that where it should be expecting 201, fonts asked us to come

236
00:11:42,400 --> 00:11:44,600
in instead, we only get 101.

237
00:11:45,300 --> 00:11:51,200
So we're basically, you know, we're missing essentially well you know

238
00:11:51,200 --> 00:11:52,500
you can kind of see what's happening there.

239
00:11:52,500 --> 00:11:53,600
Almost already.

240
00:11:54,100 --> 00:11:57,800
We're missing one entire character set for some reason, right?

241
00:11:57,800 --> 00:11:59,600
I mean, there's just it's just gone.

242
00:12:03,500 --> 00:12:04,500
So something.

243
00:12:06,100 --> 00:12:07,100
Is a little bit fishy.

244
00:12:08,000 --> 00:12:10,600
So I'm going to go ahead and step in here and see if I can see what's

245
00:12:10,600 --> 00:12:11,200
going on.

246
00:12:12,300 --> 00:12:15,100
Hopefully, it's something not particularly to nefarious.

247
00:12:15,800 --> 00:12:18,600
So as I come in here, let's see which desk type ID.

248
00:12:18,600 --> 00:12:24,200
I'm actually looking at this is the this is the asset type count,

249
00:12:24,500 --> 00:12:25,000
right?

250
00:12:27,100 --> 00:12:29,300
So we only have one file.

251
00:12:30,400 --> 00:12:31,400
Here is the file.

252
00:12:31,400 --> 00:12:34,300
It should be the test fonts AJ file, right?

253
00:12:35,700 --> 00:12:37,000
And let's see what it's got.

254
00:12:37,000 --> 00:12:38,500
The asset type array.

255
00:12:39,400 --> 00:12:42,800
How many of these actually are there so far in the file.

256
00:12:42,800 --> 00:12:43,600
Let's get the header.

257
00:12:44,200 --> 00:12:48,400
So the asset type count is 19, which seems a little odd because I

258
00:12:48,400 --> 00:12:51,700
don't know why it would have all those additional types in there.

259
00:12:51,700 --> 00:12:52,000
I guess.

260
00:12:52,000 --> 00:12:54,700
Maybe we just kind of spammed those dinner, something like this, I'm

261
00:12:54,700 --> 00:12:59,100
not entirely sure the asset count is 201 which I think is what we

262
00:12:59,100 --> 00:13:00,000
would expect 104.

263
00:13:00,200 --> 00:13:00,500
Fine.

264
00:13:00,500 --> 00:13:09,600
And then the 0 the reserve 0, there's the tags having 44 tags does

265
00:13:09,600 --> 00:13:11,700
seem a little bit odd, right?

266
00:13:11,800 --> 00:13:17,100
Because it's a, it's a bit strange to only have 44 tags when you have

267
00:13:17,100 --> 00:13:21,500
this many assets because each of them should have like like where are

268
00:13:21,500 --> 00:13:23,200
all those tax coming from, right.

269
00:13:23,200 --> 00:13:24,100
It's a little bit.

270
00:13:24,300 --> 00:13:25,200
That's a little bit odd.

271
00:13:25,200 --> 00:13:28,100
I think in and of itself asset types.

272
00:13:33,900 --> 00:13:35,600
I know what's going on, right?

273
00:13:35,600 --> 00:13:36,900
Right, tag count.

274
00:13:37,000 --> 00:13:37,900
I'm looking at the wrong one.

275
00:13:38,100 --> 00:13:40,400
Tags is just the offset in the file.

276
00:13:40,700 --> 00:13:43,000
I just got confused there, so don't worry about that.

277
00:13:43,100 --> 00:13:46,600
I take back what I said, but I count of three that seems fine asset

278
00:13:46,600 --> 00:13:47,000
type count.

279
00:13:47,000 --> 00:13:49,300
We probably just write them all out, even if there's zero, so that's

280
00:13:49,300 --> 00:13:49,700
fine.

281
00:13:49,800 --> 00:13:53,500
So all of this actually looks totally reasonable at first blush.

282
00:13:53,600 --> 00:13:54,600
I'm actually fine with it.

283
00:13:54,600 --> 00:13:57,100
I just got a little confused, reading it there anyway.

284
00:13:57,900 --> 00:13:59,300
So let's continue on.

285
00:13:59,600 --> 00:14:02,800
When we look here, they said, we're not reading font glyphs yet.

286
00:14:03,100 --> 00:14:06,300
We're just reading type ID 0 and turns out.

287
00:14:06,300 --> 00:14:08,200
There's none of those anyway.

288
00:14:08,300 --> 00:14:10,800
So since there's none of them were not actually going to do anything

289
00:14:10,800 --> 00:14:12,400
there and that's fine.

290
00:14:13,400 --> 00:14:14,700
This is I think that's going to be true.

291
00:14:14,700 --> 00:14:16,600
Pretty much the whole way through.

292
00:14:16,900 --> 00:14:17,400
Right?

293
00:14:18,700 --> 00:14:19,700
It is a little weird.

294
00:14:19,700 --> 00:14:24,200
So death type ID, let's see here.

295
00:14:24,900 --> 00:14:28,900
Let's go through, let's go through.

296
00:14:29,800 --> 00:14:31,100
To see where we're at.

297
00:14:31,100 --> 00:14:34,400
So under the file, indices under the source index,

298
00:14:35,600 --> 00:14:38,300
The Source type ID should be something else.

299
00:14:38,300 --> 00:14:38,800
Right?

300
00:14:39,400 --> 00:14:43,300
Why are there so many Source types with zero?

301
00:14:48,000 --> 00:14:49,400
Like why is that type ID?

302
00:14:49,400 --> 00:14:50,400
Always 0?

303
00:14:51,200 --> 00:14:54,200
I feel like our thing that writes out our assets is doing something a

304
00:14:54,200 --> 00:14:56,400
little bit wonky, wouldn't you agree?

305
00:14:58,300 --> 00:14:59,300
Let's let me I want to

306
00:15:00,400 --> 00:15:04,300
I don't like the look of that that looks just kind of wrong.

307
00:15:04,500 --> 00:15:08,100
So I would like to take a brief look to see how it's actually writing

308
00:15:08,100 --> 00:15:11,600
that out, its writing out this asset types array, right?

309
00:15:12,100 --> 00:15:15,400
And so what does it actually do there?

310
00:15:15,500 --> 00:15:19,100
Where is that asset types getting set right?

311
00:15:19,100 --> 00:15:23,600
And and I'd like to kind of, in fact, you know what I can do to before

312
00:15:23,600 --> 00:15:26,900
we go any further in this, let me just jump over to that asset

313
00:15:26,900 --> 00:15:29,800
processor and let's just actually see what

314
00:15:30,000 --> 00:15:34,300
Doing because it seems like it's just not it seems like it's actually

315
00:15:34,300 --> 00:15:37,100
a little janky and even though this may have nothing to do with the

316
00:15:37,100 --> 00:15:38,200
bug that we're seeing eye.

317
00:15:38,400 --> 00:15:42,000
When I see something janky, I prefer to go find out what's going on.

318
00:15:42,000 --> 00:15:45,300
Because, you know, I'd like to always understand what the code is

319
00:15:45,300 --> 00:15:48,000
doing and if I don't, if something doesn't make good sense, I should

320
00:15:48,000 --> 00:15:51,600
at least figure out what it's doing first before declaring that it's

321
00:15:51,600 --> 00:15:52,800
fine, you know.

322
00:15:54,200 --> 00:15:54,800
All right.

323
00:15:58,800 --> 00:16:01,600
So yeah, it looks like the way this works.

324
00:16:01,600 --> 00:16:06,000
Is it never actually initializes the type ID for these guys.

325
00:16:07,100 --> 00:16:08,200
Or something.

326
00:16:10,200 --> 00:16:15,000
Like the type ID maybe only gets initialized if the thing is ever used

327
00:16:16,100 --> 00:16:19,300
and that seems a little bit odd but there it is.

328
00:16:19,300 --> 00:16:20,400
And yeah I guess that's I guess.

329
00:16:20,400 --> 00:16:21,700
That's exactly what would happen.

330
00:16:21,800 --> 00:16:24,300
It grabs that particular one there.

331
00:16:27,700 --> 00:16:28,100
Okay.

332
00:16:28,100 --> 00:16:28,800
You know what?

333
00:16:28,800 --> 00:16:33,000
This is probably the bug because this probably happens.

334
00:16:34,400 --> 00:16:37,300
Yeah, that happens twice, right?

335
00:16:38,200 --> 00:16:39,900
So we don't really want to do that.

336
00:16:39,900 --> 00:16:40,400
That way.

337
00:16:40,400 --> 00:16:44,400
I don't know if you can see that, so that actually that, actually, if

338
00:16:44,400 --> 00:16:47,500
that's not the bug, it is at least something that would in totally

339
00:16:47,500 --> 00:16:48,200
cause the bug.

340
00:16:48,200 --> 00:16:51,700
So it's at least part of its, it is at least totally wrong and would

341
00:16:51,700 --> 00:16:54,000
do exactly what I just said.

342
00:16:54,700 --> 00:16:58,200
Because if you, if you look at what happens here, every time we go to

343
00:16:58,200 --> 00:17:00,600
start adding a particular asset type.

344
00:17:00,600 --> 00:17:03,300
When we do begin asset type, you can only call that once.

345
00:17:03,400 --> 00:17:04,000
And so I think

346
00:17:04,200 --> 00:17:05,099
Calling it twice.

347
00:17:05,300 --> 00:17:07,700
And so we should probably make it so that, you know,

348
00:17:10,000 --> 00:17:11,099
we should probably make it.

349
00:17:11,099 --> 00:17:15,700
So that that's an error, at the very least, I would think let's take a

350
00:17:15,700 --> 00:17:19,200
look here at how that's at how that works out.

351
00:17:19,400 --> 00:17:20,800
So in the test asset Builder,

352
00:17:23,000 --> 00:17:28,300
Dude, you do again asset type in the test asset Builder.

353
00:17:28,600 --> 00:17:32,400
This thing is going to get called when we do the ad font, right?

354
00:17:32,400 --> 00:17:34,900
Pretty sure the add font actually, just does that?

355
00:17:35,000 --> 00:17:35,300
Oops,

356
00:17:37,600 --> 00:17:40,000
Yeah, you can see it, does the begin asset type.

357
00:17:40,200 --> 00:17:43,900
And then, you know, you can't reopen these asset types, right?

358
00:17:45,100 --> 00:17:48,700
So that's that's just not cool.

359
00:17:48,900 --> 00:17:51,500
And you know, I don't know if I really want to upgrade this thing

360
00:17:51,500 --> 00:17:53,300
because like I said, this is just kind of a

361
00:17:54,900 --> 00:17:59,800
It's not really meant to be a, it's not really.

362
00:18:00,000 --> 00:18:03,000
To be a full-fledged system, you know, it's just supposed to be an

363
00:18:03,000 --> 00:18:06,000
example of one so I don't know that.

364
00:18:06,000 --> 00:18:08,600
I really want to spend a lot of time making it better than it is than

365
00:18:08,600 --> 00:18:11,600
it is, but that's not going to work like, right?

366
00:18:11,600 --> 00:18:12,900
That's not going to work at all.

367
00:18:13,400 --> 00:18:16,700
And so, what we would want to do, for example is we'd want to go

368
00:18:16,700 --> 00:18:20,900
through like the fonts and so maybe, you know what, here's a pretty

369
00:18:20,900 --> 00:18:22,400
easy way that I could do it.

370
00:18:22,500 --> 00:18:23,200
I could just make it.

371
00:18:23,200 --> 00:18:26,900
So that in here we do those fonts like as a group, right?

372
00:18:27,000 --> 00:18:29,800
So in here I just go through for each font and do this.

373
00:18:30,000 --> 00:18:33,200
All right, so I go like, you know, font index.

374
00:18:34,300 --> 00:18:40,000
Zero less than like array count fonts or something font index, or

375
00:18:40,000 --> 00:18:40,500
whatever.

376
00:18:40,800 --> 00:18:41,500
You know what I mean?

377
00:18:42,400 --> 00:18:45,200
Add all the characters do the little dance.

378
00:18:45,300 --> 00:18:49,400
Have a little party and then here, when we begin asset type just do

379
00:18:49,400 --> 00:18:51,600
the same thing, right?

380
00:18:52,500 --> 00:18:55,900
That seems like a reasonable compromise, you know, something that's

381
00:18:56,400 --> 00:18:58,600
not too much of an annoyance.

382
00:18:58,900 --> 00:19:02,100
And so then what I can do is in here, I can say, Okay, loaded font,

383
00:19:02,400 --> 00:19:03,800
you know, fonts

384
00:19:04,400 --> 00:19:05,100
Bracket.

385
00:19:05,500 --> 00:19:08,200
And then I can just go ahead and load the actual fonts.

386
00:19:08,900 --> 00:19:09,500
Like so,

387
00:19:12,400 --> 00:19:12,800
Poop.

388
00:19:15,400 --> 00:19:15,900
There we go.

389
00:19:17,300 --> 00:19:20,800
And then what I would need to do is I need to store I guess it's a

390
00:19:20,800 --> 00:19:22,600
slightly another piece of information.

391
00:19:22,600 --> 00:19:26,100
Like you know I don't know, desired font something like this.

392
00:19:26,300 --> 00:19:28,300
I would need to store which of the tags.

393
00:19:28,300 --> 00:19:29,000
I want with it.

394
00:19:29,000 --> 00:19:30,200
There, I guess.

395
00:19:33,100 --> 00:19:34,600
In fact, maybe, I don't even want to do that.

396
00:19:34,600 --> 00:19:38,000
Maybe I want to be able to do the tagging more explicitly.

397
00:19:38,400 --> 00:19:42,100
So probably what I'd do is I'd still just do it this way and then I'd

398
00:19:42,100 --> 00:19:44,300
add the tag down here, right?

399
00:19:44,400 --> 00:19:46,300
I do the tag adding down here.

400
00:19:46,800 --> 00:19:48,300
So, something like this.

401
00:19:49,500 --> 00:19:50,500
Add font asset.

402
00:19:50,500 --> 00:19:52,800
And then I pass the font, right?

403
00:19:56,500 --> 00:19:57,100
Like so.

404
00:19:58,300 --> 00:19:58,600
Oops.

405
00:20:00,900 --> 00:20:03,500
And and then I'd add the tags that I want for that, fine.

406
00:20:09,500 --> 00:20:14,700
Yeah, that seems fine to me and I suppose I could also even do

407
00:20:14,700 --> 00:20:15,000
something.

408
00:20:15,000 --> 00:20:19,300
If I was so inclined, I could actually make it even a little bit

409
00:20:19,300 --> 00:20:20,200
different than this.

410
00:20:20,500 --> 00:20:24,300
I could make it so that I just pass which font I want to this thing,

411
00:20:24,500 --> 00:20:26,900
and have this actually be a little routine, so I don't even have to

412
00:20:26,900 --> 00:20:28,900
put them in an array, but I don't know.

413
00:20:29,200 --> 00:20:30,300
I don't know if that's worth it.

414
00:20:30,800 --> 00:20:34,500
So I'll just go like this for now and leave it that seems fine.

415
00:20:36,200 --> 00:20:37,900
so then that elude those fonts

416
00:20:39,500 --> 00:20:45,100
and then we'll have loaded font font equals fonts plus font index and

417
00:20:45,100 --> 00:20:47,200
that'll just enumerate over the fonts

418
00:20:50,900 --> 00:20:51,900
so,

419
00:20:54,000 --> 00:20:57,200
Yeah, so that we have other characters for them.

420
00:20:58,300 --> 00:20:59,300
And that seems fine.

421
00:21:00,100 --> 00:21:03,000
Again, this is not really supposed to be particularly good code and

422
00:21:03,000 --> 00:21:04,400
isn't so that's fine.

423
00:21:05,100 --> 00:21:06,300
That's going to be a comma.

424
00:21:10,600 --> 00:21:12,200
and, and

425
00:21:13,700 --> 00:21:16,500
Cannot to a pointer to a pointer.

426
00:21:17,600 --> 00:21:18,400
All right well

427
00:21:23,700 --> 00:21:28,600
I'm not sure what this is, shouldn't that be an array of pointers to

428
00:21:28,600 --> 00:21:33,900
loaded fonts so load font, or oh, does load font actually just

429
00:21:33,900 --> 00:21:36,500
returned a loaded font?

430
00:21:36,700 --> 00:21:37,500
Now that's right.

431
00:21:37,900 --> 00:21:38,700
So, that should be fine.

432
00:21:39,800 --> 00:21:43,400
What is the complaint loaded font star star to loaded font?

433
00:21:45,200 --> 00:21:49,200
Oh yeah, sorry, just a little mental.

434
00:21:49,700 --> 00:21:50,700
It's a little mental break there.

435
00:21:51,400 --> 00:21:56,500
All right, so now we've got to do is we have to fix sort of the

436
00:21:59,100 --> 00:22:00,100
Fix the rest of this stuff.

437
00:22:00,600 --> 00:22:01,300
We've got to add it.

438
00:22:01,300 --> 00:22:04,500
The ability to change the size of the font as well, right?

439
00:22:05,000 --> 00:22:09,600
So this, hopefully will fix the bug that we had were the fonts were

440
00:22:09,600 --> 00:22:13,400
being written out in properly, but let's verify that first.

441
00:22:13,400 --> 00:22:17,300
So there's run the test a set builder and let's take a look at what

442
00:22:17,300 --> 00:22:18,000
we've got.

443
00:22:18,700 --> 00:22:20,400
We'll go ahead and see what happens now.

444
00:22:20,400 --> 00:22:26,300
If I run the actual game, there we go.

445
00:22:27,200 --> 00:22:28,700
So now let's see.

446
00:22:28,900 --> 00:22:34,600
If we can pick a different font, let's let's go in here and see maybe

447
00:22:34,600 --> 00:22:37,700
in handmade that CPP.

448
00:22:41,500 --> 00:22:45,000
What I'd like to do is say when we go to pick our font here for the

449
00:22:45,000 --> 00:22:49,200
overlay cycle counters and that sort of stuff, we need to find the

450
00:22:49,200 --> 00:22:52,700
font that we're actually going to do debug text line.

451
00:22:53,500 --> 00:22:55,900
Here's that push font with the font ID.

452
00:22:55,900 --> 00:23:00,100
So I'm going to take whatever font it was getting from the font ID

453
00:23:00,300 --> 00:23:02,400
when we do the weight vector,

454
00:23:05,200 --> 00:23:11,200
I feel like that wants to be set now so I can pick which font I want.

455
00:23:11,200 --> 00:23:20,800
So yeah if I do that I want to set the font type and where exactly is

456
00:23:20,800 --> 00:23:23,100
that asset Vector its dot e.

457
00:23:23,100 --> 00:23:26,400
So there there it is.

458
00:23:29,000 --> 00:23:29,700
Tidy.

459
00:23:32,300 --> 00:23:32,800
We go.

460
00:23:33,300 --> 00:23:38,500
So that weight Vector, I want to go ahead and set the font type thing

461
00:23:38,500 --> 00:23:43,300
to, like I want to make sure I get it and then I want my match, Vector

462
00:23:43,900 --> 00:23:46,600
to be, you know, whatever.

463
00:23:46,600 --> 00:23:47,100
That

464
00:23:48,200 --> 00:23:53,100
Debug value was there so font type debug, so we'll grab that out.

465
00:23:54,900 --> 00:23:56,700
And then we'll see if we get a different font.

466
00:23:57,900 --> 00:23:59,500
And we do lovely.

467
00:24:00,100 --> 00:24:00,700
So that's great.

468
00:24:00,700 --> 00:24:02,000
That lets us pick our fonts.

469
00:24:02,000 --> 00:24:04,900
Now, by just using the tag system, we can set our tags and get

470
00:24:04,900 --> 00:24:06,000
different fonts out of it.

471
00:24:06,900 --> 00:24:08,600
And that's exactly what I wanted.

472
00:24:08,900 --> 00:24:13,100
Because, I believe, at least, I believe that that is a different font.

473
00:24:13,400 --> 00:24:15,800
Of course, it's hard to always know.

474
00:24:16,100 --> 00:24:17,100
Let's double-check

475
00:24:23,500 --> 00:24:27,700
Yeah, so we can get different fonts and that's the party great.

476
00:24:27,700 --> 00:24:28,600
Everyone's happy.

477
00:24:29,100 --> 00:24:29,700
Everyone wins.

478
00:24:29,700 --> 00:24:31,000
It's fantastic.

479
00:24:31,000 --> 00:24:31,500
It's fine.

480
00:24:31,600 --> 00:24:32,200
Totally fine.

481
00:24:33,000 --> 00:24:38,200
So now I want to make it so that I can specify the size that I

482
00:24:38,200 --> 00:24:39,500
actually want for these fonts.

483
00:24:39,500 --> 00:24:42,700
Because right now, when we load a font, I think the size is just hard

484
00:24:42,700 --> 00:24:43,700
coded into it, right?

485
00:24:43,700 --> 00:24:47,000
We just in the load font, we never bothered to make it so that you can

486
00:24:47,000 --> 00:24:49,700
pass something and we just set it to something.

487
00:24:50,100 --> 00:24:52,600
So let's just say that this is the pixel height here.

488
00:24:54,000 --> 00:24:58,700
And then will, you know go in somewhere and wherever that height value

489
00:24:58,700 --> 00:24:59,600
was, will put it here.

490
00:25:00,800 --> 00:25:04,500
We're going to go ahead and make all our clothes to load font actually

491
00:25:04,700 --> 00:25:06,900
specify that value, right?

492
00:25:07,100 --> 00:25:09,900
So we had 128 before so we'll keep that.

493
00:25:10,500 --> 00:25:15,400
But then for our Liberation mono I don't actually know what, what am I

494
00:25:15,400 --> 00:25:17,700
actually using here 11-point?

495
00:25:17,700 --> 00:25:19,000
Well that's eleven point.

496
00:25:19,100 --> 00:25:20,600
I don't know what the pixels are.

497
00:25:23,000 --> 00:25:25,800
I don't know, we'll just try saying 12 pixels high, but I have

498
00:25:25,800 --> 00:25:27,000
absolutely no idea.

499
00:25:27,600 --> 00:25:30,200
So hopefully, that'll do something resembling anything.

500
00:25:30,900 --> 00:25:33,600
And I don't know where, well, we'll find out.

501
00:25:34,500 --> 00:25:36,700
All right, so let's see what happens if I run it.

502
00:25:36,900 --> 00:25:40,300
All right, we're still, we're still using the aerial there.

503
00:25:40,800 --> 00:25:43,800
So, now, let me switch it back to the debug font and see if we get a

504
00:25:43,800 --> 00:25:44,700
smaller font.

505
00:25:44,700 --> 00:25:47,400
That's one that we could, you know, debug with little bit better.

506
00:25:48,000 --> 00:25:48,600
All right.

507
00:25:49,300 --> 00:25:51,800
So, that may be a little too tiny.

508
00:25:53,500 --> 00:25:59,500
That's a little too tiny even for me and you know, obviously you guys

509
00:25:59,500 --> 00:26:04,900
are in a situation where you would see even less than I can see at

510
00:26:04,900 --> 00:26:05,400
this point.

511
00:26:05,400 --> 00:26:07,900
So, so that's, that's not great.

512
00:26:09,300 --> 00:26:10,400
Not not great.

513
00:26:10,400 --> 00:26:11,100
Not great.

514
00:26:11,400 --> 00:26:14,700
So, let's, let's, you know, just give it a little bit more room to get

515
00:26:14,700 --> 00:26:16,800
a little bit more room, the sake of the stream.

516
00:26:16,800 --> 00:26:20,500
Let's let's go ahead up to 20 and see if that helps at all.

517
00:26:24,500 --> 00:26:25,200
All right.

518
00:26:26,400 --> 00:26:28,000
So that's a little bit more reasonable.

519
00:26:28,000 --> 00:26:31,600
I don't know if that'll be super readable on stream, but you know it

520
00:26:31,600 --> 00:26:34,000
since this is our debug display, I think we're just gonna have to live

521
00:26:34,000 --> 00:26:37,700
with the fact that, you know, you got to be at 1080P or something.

522
00:26:37,800 --> 00:26:40,100
If you want to be able to read the debug display with me.

523
00:26:42,900 --> 00:26:45,300
It's a debug display people, okay?

524
00:26:46,100 --> 00:26:49,200
It's got to fit a lot of information on the screen if it's going to be

525
00:26:49,200 --> 00:26:49,600
useful.

526
00:26:49,600 --> 00:26:52,400
So that's just, that's just how it's going to go.

527
00:26:52,800 --> 00:26:55,300
You're going to have to live with it but there we go.

528
00:26:55,300 --> 00:26:56,400
Now we've got our stuff.

529
00:26:57,300 --> 00:26:59,300
Looking looking pretty correct.

530
00:26:59,300 --> 00:26:59,800
You can see that.

531
00:27:00,000 --> 00:27:01,100
Game update and render.

532
00:27:01,100 --> 00:27:04,100
Like I've talked about before is wrong because of course, it stays

533
00:27:04,100 --> 00:27:08,200
open because the renderer is, you know, it's is the thing that's

534
00:27:08,200 --> 00:27:08,700
actually drawing a.

535
00:27:08,700 --> 00:27:09,200
Do you like to play?

536
00:27:09,200 --> 00:27:12,200
So, like I mentioned at the end of last frame, we got to do some stuff

537
00:27:12,200 --> 00:27:15,500
to actually get these to be correct for profiling, the render as well,

538
00:27:15,500 --> 00:27:19,400
which is obviously something we want to profile, but our one called,

539
00:27:19,400 --> 00:27:22,200
we know that is make being made and completes is in here.

540
00:27:22,200 --> 00:27:25,300
You can see that it's got its cycle counts and that cycle costs were

541
00:27:25,300 --> 00:27:29,300
hit and it's got the number of hits as well, so that's pretty handy.

542
00:27:30,000 --> 00:27:34,900
And if I go in, now we can start to kind of see what would happen if

543
00:27:34,900 --> 00:27:36,800
we wanted to start using this a little bit more.

544
00:27:36,800 --> 00:27:39,400
Seriously are a little time flock function, right?

545
00:27:39,400 --> 00:27:47,000
So here we are in handmade dot CPP, you know, I could start to, to add

546
00:27:47,000 --> 00:27:48,600
profiling to this very, very quickly.

547
00:27:48,600 --> 00:27:54,100
Now, I don't really have anywhere in particular that I want to

548
00:27:54,100 --> 00:27:58,700
profile, I suppose but you know, let's say we wanted to start

549
00:27:58,700 --> 00:27:59,700
profiling things.

550
00:28:02,400 --> 00:28:05,000
Probably not going to be in this file right there.

551
00:28:05,000 --> 00:28:06,200
Going to be in somewhere else.

552
00:28:06,400 --> 00:28:11,300
So let's say we want our Sim region stuff to be profiled and so we're

553
00:28:11,300 --> 00:28:13,900
just going to start profiling this stuff, right?

554
00:28:14,100 --> 00:28:16,500
So here's our move entity call.

555
00:28:16,500 --> 00:28:17,500
It's time that

556
00:28:19,900 --> 00:28:23,800
Right here is our entities overlap call.

557
00:28:24,200 --> 00:28:25,900
I don't know time it.

558
00:28:26,000 --> 00:28:28,900
Why not speculative kalai?

559
00:28:28,900 --> 00:28:29,400
I don't know.

560
00:28:29,400 --> 00:28:33,400
I mean, I'm not even really pretending to be reasonable at this point.

561
00:28:34,500 --> 00:28:38,400
I'm just kind of spamming these guys in here, because why not?

562
00:28:39,500 --> 00:28:42,000
Guess what we can do this now because we have the power.

563
00:28:42,000 --> 00:28:45,300
So I've just spamming these things in anywhere.

564
00:28:45,300 --> 00:28:48,100
I want to, I don't care.

565
00:28:48,200 --> 00:28:49,000
It's fine.

566
00:28:50,800 --> 00:28:51,600
It's all fine.

567
00:28:52,000 --> 00:28:55,300
So we'll put those in there and now we'll recompile.

568
00:28:55,900 --> 00:28:58,400
And again this is exactly what I wanted out of the debug system

569
00:28:58,400 --> 00:29:01,400
because now we just run it and hey, look.

570
00:29:01,600 --> 00:29:06,200
Now we can see like where everything is happening and what's going on,

571
00:29:06,400 --> 00:29:07,000
right?

572
00:29:07,600 --> 00:29:10,700
So we can immediately see what our cycle counts are through all of our

573
00:29:10,700 --> 00:29:14,400
code you know we can we can kind of see what's going on in there

574
00:29:14,400 --> 00:29:17,900
without having to like stop and do a custom kind of a profile run or

575
00:29:17,900 --> 00:29:18,800
something like that.

576
00:29:20,000 --> 00:29:24,100
And I can keep going like that in anything that we've got in here,

577
00:29:24,100 --> 00:29:24,500
right?

578
00:29:24,500 --> 00:29:29,400
I can, I can keep going for, for whatever, whatever stuff we've got.

579
00:29:29,400 --> 00:29:32,700
So I don't know if handmade entities, got anything in it and I don't

580
00:29:32,700 --> 00:29:34,000
think it really does know.

581
00:29:34,600 --> 00:29:35,100
Let's see.

582
00:29:35,100 --> 00:29:36,000
Handmade

583
00:29:37,400 --> 00:29:38,400
What else we got in here?

584
00:29:39,200 --> 00:29:41,400
Canned made.

585
00:29:43,900 --> 00:29:48,500
Asset audio math.random Sim region handmade World dot CPP.

586
00:29:49,600 --> 00:29:50,700
So let's see what's in there.

587
00:29:50,700 --> 00:29:54,300
Change entity location will time that changing any location raw will

588
00:29:54,300 --> 00:29:54,500
time.

589
00:29:54,500 --> 00:29:57,200
That anything in here.

590
00:29:57,200 --> 00:29:59,800
That's got other stuff, get World chunk, totally.

591
00:30:00,000 --> 00:30:03,200
That let's see what else we got.

592
00:30:03,900 --> 00:30:08,400
Render groups, we probably want a Time, those right?

593
00:30:09,100 --> 00:30:11,900
An optimized and all that stuff but we've got some stuff to talk about

594
00:30:11,900 --> 00:30:14,300
there but I'm going to I'm going to drop those in there anyway because

595
00:30:14,300 --> 00:30:16,600
we might as well drop them in there like audio in the render groups,

596
00:30:16,600 --> 00:30:17,600
you might as well put in there.

597
00:30:18,600 --> 00:30:19,400
So let's see here.

598
00:30:19,400 --> 00:30:26,700
We've got play sound time that we've got up a playing sounds will time

599
00:30:26,700 --> 00:30:27,400
that

600
00:30:30,400 --> 00:30:34,200
Let's go ahead and do the render group as well.

601
00:30:36,500 --> 00:30:36,800
Right.

602
00:30:36,800 --> 00:30:39,000
Render group.

603
00:30:41,000 --> 00:30:42,500
What do we got to see?

604
00:30:42,500 --> 00:30:44,000
Draw a rectangle or time?

605
00:30:44,000 --> 00:30:47,700
That sample environment map.

606
00:30:48,000 --> 00:30:50,900
These aren't even really getting cold at this point but that's okay.

607
00:30:51,500 --> 00:30:55,900
Draw a bitmap sure just in case, change saturation.

608
00:30:56,600 --> 00:30:57,700
I don't know what that does.

609
00:30:57,700 --> 00:30:59,000
Probably some stuff I did.

610
00:30:59,000 --> 00:31:02,000
Because someone asked me on the stream to do it and that's fine.

611
00:31:02,800 --> 00:31:04,000
Put this in here.

612
00:31:05,000 --> 00:31:06,700
And let's see what else.

613
00:31:07,700 --> 00:31:14,800
Render group to Output tiled, render group to Output timed block.

614
00:31:16,100 --> 00:31:17,400
I'm just putting these everywhere.

615
00:31:17,900 --> 00:31:21,900
Just try and stop me, you know, just try.

616
00:31:22,400 --> 00:31:28,000
I dare you getting render and render.

617
00:31:29,200 --> 00:31:32,500
These are just the pushes, get ready to render entity basis P.

618
00:31:32,500 --> 00:31:34,400
Probably not necessary to time.

619
00:31:35,300 --> 00:31:36,300
But why not?

620
00:31:37,500 --> 00:31:39,600
All of the pushes here we can do that.

621
00:31:39,600 --> 00:31:40,800
Sure will time it?

622
00:31:40,800 --> 00:31:44,400
Why not anything else here?

623
00:31:44,400 --> 00:31:47,900
Okay, so now we've just basically, we did exactly what I said I

624
00:31:47,900 --> 00:31:50,100
wanted, which is it's free.

625
00:31:50,100 --> 00:31:53,600
Now, for us to just time those things, we can spam them everywhere.

626
00:31:54,000 --> 00:31:58,100
And now we just have a ton of heads-up information, right, that we can

627
00:31:58,100 --> 00:31:58,500
use.

628
00:31:59,100 --> 00:32:01,200
But we've got, there's a bunch of problems.

629
00:32:02,300 --> 00:32:05,800
So first off, like I said, we've got one here that you can see that I

630
00:32:05,800 --> 00:32:10,800
talked about before which is that the timings for anything that

631
00:32:10,800 --> 00:32:15,300
encloses the rendering are just totally wrong, right?

632
00:32:15,300 --> 00:32:21,500
Because they the block that's timing them is open when it actually

633
00:32:21,500 --> 00:32:22,500
gets printed.

634
00:32:22,700 --> 00:32:26,000
So we have to do something to delay, our timings by like one frame and

635
00:32:26,000 --> 00:32:28,700
like put them somewhere and print out the timings from the previous

636
00:32:28,700 --> 00:32:29,100
frame.

637
00:32:29,100 --> 00:32:31,900
For example, so that we can have those

638
00:32:32,100 --> 00:32:35,300
To be closed before we go to try to access them.

639
00:32:35,600 --> 00:32:37,900
So that's, we need to do that to finish.

640
00:32:37,900 --> 00:32:40,300
Go up updated render so that's one problem.

641
00:32:40,600 --> 00:32:41,700
Second problem we have

642
00:32:44,400 --> 00:32:44,900
Right.

643
00:32:46,600 --> 00:32:51,800
Is that when we go to do some of these other performance counters, we

644
00:32:51,800 --> 00:32:53,900
don't actually we're not thread safe.

645
00:32:54,500 --> 00:32:59,100
So anything that might be called from multiple threads, is, could have

646
00:32:59,100 --> 00:32:59,500
totally,

647
00:33:00,000 --> 00:33:00,500
Results.

648
00:33:00,600 --> 00:33:01,400
Right.

649
00:33:01,400 --> 00:33:05,100
Because as if two threads open and close the blocks together, or

650
00:33:05,100 --> 00:33:07,900
whatever, we have, no idea what's going to go on there, right?

651
00:33:08,300 --> 00:33:13,700
And furthermore, those threads could be running doing something while

652
00:33:13,700 --> 00:33:16,700
we're printing it out which means the block could again be open.

653
00:33:17,600 --> 00:33:21,200
So we have more work to do if we want this system to be able to handle

654
00:33:21,200 --> 00:33:23,800
everything and maybe we don't, maybe we'll get to something and say

655
00:33:23,800 --> 00:33:26,600
okay this is a little too hard, maybe we won't try to, you know, make

656
00:33:26,600 --> 00:33:29,400
it work at that but we should at least start trying to push a little

657
00:33:29,400 --> 00:33:29,600
bit.

658
00:33:30,000 --> 00:33:34,400
Either in now to sort of shore up the system a little bit more

659
00:33:34,600 --> 00:33:35,900
completely, right?

660
00:33:39,000 --> 00:33:39,700
All right.

661
00:33:40,900 --> 00:33:46,300
But even without even if we didn't do any of that, this still gives us

662
00:33:46,300 --> 00:33:51,100
a tremendous tremendously, more useful picture, right of what we're

663
00:33:51,100 --> 00:33:51,600
doing.

664
00:33:52,000 --> 00:33:54,800
Because if you can see here, we definitely have.

665
00:33:55,200 --> 00:33:57,600
You know, if you look at what's going on,

666
00:33:58,900 --> 00:34:01,700
You can see that already, we can see a bunch of cycle counts.

667
00:34:01,700 --> 00:34:02,500
A bunch of hit counts.

668
00:34:02,500 --> 00:34:06,200
We know like how many times we you know how many before we had no

669
00:34:06,200 --> 00:34:06,500
idea.

670
00:34:06,500 --> 00:34:08,699
How many render elements we pushed for frame.

671
00:34:08,699 --> 00:34:11,699
Now we know we push about 760, right?

672
00:34:12,300 --> 00:34:15,000
We know it takes about thirty eight Cycles to push one of those blah,

673
00:34:15,000 --> 00:34:16,000
blah blah, right?

674
00:34:16,000 --> 00:34:17,500
So there's actually stuff.

675
00:34:17,500 --> 00:34:20,900
And I mean, keep in mind that the cycle cast, this is not an optimized

676
00:34:20,900 --> 00:34:21,199
build.

677
00:34:21,199 --> 00:34:24,900
So the cycle counts are not that meaningful because they're going to

678
00:34:25,100 --> 00:34:27,699
those Cycle house would go down if we compiled an optimized mode.

679
00:34:27,699 --> 00:34:28,600
So there's that

680
00:34:28,800 --> 00:34:29,300
Right.

681
00:34:29,400 --> 00:34:33,300
But, you know, at the very least, we're already starting to get some

682
00:34:33,300 --> 00:34:36,500
more sort of a feel for what our program is doing, which is exactly

683
00:34:37,199 --> 00:34:38,800
what we want from this debug code.

684
00:34:38,900 --> 00:34:41,600
Even just that very little that we added, yesterday already gives us a

685
00:34:41,600 --> 00:34:46,000
tremendous tremendously more insight into what's happening, right?

686
00:34:46,800 --> 00:34:51,300
So the first things first, let's take a look and see if we can find or

687
00:34:51,300 --> 00:34:53,400
think through some ways.

688
00:34:57,100 --> 00:35:01,000
In which we could address some of these problems at the very least, I

689
00:35:01,000 --> 00:35:04,600
think we should be able to solve the one of something's open during

690
00:35:04,600 --> 00:35:07,500
the render because all we have to do is delay our results by one

691
00:35:07,500 --> 00:35:08,500
frame, right?

692
00:35:08,500 --> 00:35:12,900
So let's see if there's anything that we can we can do there to make

693
00:35:12,900 --> 00:35:13,700
that happen a little bit better.

694
00:35:13,700 --> 00:35:18,800
So right now what happens is when we do our overlay cycle counters

695
00:35:18,800 --> 00:35:22,600
that is the thing that does the reset.

696
00:35:22,600 --> 00:35:26,300
So what happens here is when we actually call in to this

697
00:35:27,100 --> 00:35:29,900
One who's going to be over, you know, going to have the cycle.

698
00:35:29,900 --> 00:35:33,700
Counters overlaid had better be closed by now.

699
00:35:34,300 --> 00:35:38,200
So, what we need is, we need a way of having that sort of closure

700
00:35:38,200 --> 00:35:38,600
happen.

701
00:35:38,600 --> 00:35:43,800
We need a way of having that sort of heartbeat, do some kind of like a

702
00:35:43,800 --> 00:35:44,400
copy.

703
00:35:44,700 --> 00:35:48,600
So that every time at the end of the frames it does like a copy of

704
00:35:48,600 --> 00:35:49,300
that memory.

705
00:35:50,000 --> 00:35:54,500
So that we know that it's, you know, not being used.

706
00:35:54,500 --> 00:35:56,400
It's not in the middle of being used.

707
00:36:01,400 --> 00:36:03,900
so thinking of through,

708
00:36:08,500 --> 00:36:09,300
I think.

709
00:36:11,100 --> 00:36:13,700
Let's, let's talk about this on the white bar because I think,

710
00:36:13,700 --> 00:36:17,200
actually there's some kind of creative things we could do here.

711
00:36:17,800 --> 00:36:18,400
I think,

712
00:36:21,700 --> 00:36:23,000
You know, I think I take it back.

713
00:36:23,500 --> 00:36:24,900
Let's start with the threaded one.

714
00:36:25,300 --> 00:36:28,000
Let's start with a threaded one instead, because I'm kind of

715
00:36:28,000 --> 00:36:29,100
interested in to see.

716
00:36:29,300 --> 00:36:31,600
I'm kind of interested in thinking about the threaded one first.

717
00:36:32,400 --> 00:36:33,300
So let's do that.

718
00:36:33,400 --> 00:36:35,700
Okay, so here we are.

719
00:36:36,300 --> 00:36:36,700
It's day.

720
00:36:36,700 --> 00:36:37,600
178

721
00:36:43,200 --> 00:36:46,700
So let's do thread safe.

722
00:36:47,800 --> 00:36:48,800
Performance.

723
00:36:51,300 --> 00:36:51,900
Counters.

724
00:36:54,600 --> 00:36:55,200
All right.

725
00:36:55,600 --> 00:37:01,100
So thing number one, right, take a look at the way that I implemented.

726
00:37:02,100 --> 00:37:05,100
The performance counters here, because it's not the smartest way to

727
00:37:05,200 --> 00:37:06,100
that we could have done it.

728
00:37:06,700 --> 00:37:07,900
So, do you see what I did?

729
00:37:08,100 --> 00:37:10,900
What I did is I add the hit count, that's fine.

730
00:37:11,500 --> 00:37:14,800
But when I do it, the our dtsc is, I just take the cycle count, I

731
00:37:14,800 --> 00:37:16,800
subtract first.

732
00:37:16,900 --> 00:37:18,200
The rdcs see value.

733
00:37:18,400 --> 00:37:21,700
Then, I add back in and what that's essentially doing.

734
00:37:21,700 --> 00:37:25,300
Is it subtracting the start time from the end time, right?

735
00:37:26,300 --> 00:37:31,100
Well, that means that if another thread were to come in here at this

736
00:37:31,100 --> 00:37:31,600
time and

737
00:37:31,800 --> 00:37:36,100
Read what the cycle count was they'd get a completely ridiculous value

738
00:37:36,300 --> 00:37:40,100
because it's using that as like a temporary buffer, okay?

739
00:37:41,800 --> 00:37:45,200
So, what's happening essentially, you know, is you can you can imagine

740
00:37:45,300 --> 00:37:47,800
let me try to give a little bit more maybe of a specific thing there.

741
00:37:48,400 --> 00:37:51,900
What we have is we have our total, right?

742
00:37:52,200 --> 00:37:56,500
And we do our total, minus the clock value, right?

743
00:37:56,600 --> 00:38:01,800
And we write that out to the new Total and then we do our total right.

744
00:38:01,900 --> 00:38:04,400
Plus this is like clock start.

745
00:38:04,800 --> 00:38:09,100
Let me, let me write this, in a slightly born Matthew way we subtract

746
00:38:09,100 --> 00:38:10,100
out the start value.

747
00:38:10,700 --> 00:38:11,400
Right.

748
00:38:11,500 --> 00:38:16,100
And that gives us a, I suppose our T1, and then we take our T1 and we

749
00:38:16,100 --> 00:38:20,800
add in the clock and time and that gives us our T2, right?

750
00:38:21,100 --> 00:38:25,000
And so, if we expand out what that actually ends up being the goal

751
00:38:25,000 --> 00:38:28,300
here is to end up with C minus CS, right?

752
00:38:28,300 --> 00:38:31,900
The starting clock time, the the ending clock time, minus the starting

753
00:38:31,900 --> 00:38:34,400
clock time is the Delta clock time, right.

754
00:38:34,500 --> 00:38:35,700
That's the Delta clock time.

755
00:38:35,700 --> 00:38:37,200
That we actually want to add in there.

756
00:38:37,200 --> 00:38:38,900
How many clocks elapsed?

757
00:38:39,400 --> 00:38:40,000
Well,

758
00:38:40,500 --> 00:38:43,800
we're counting on, you know, we're doing that through here, but that

759
00:38:43,800 --> 00:38:45,300
means in between here.

760
00:38:45,800 --> 00:38:47,900
Any thread that views this value?

761
00:38:48,200 --> 00:38:51,600
Even if we did everything properly, any thread, that looked at the

762
00:38:51,600 --> 00:38:54,200
value would get T1, right?

763
00:38:54,500 --> 00:38:59,800
But T1 is not valid T1 is, never an actual total thread.

764
00:39:00,300 --> 00:39:07,200
Performance time, t0 was, and T2 is, but T1 is a valid clock time -

765
00:39:07,200 --> 00:39:09,000
some absolute clock value.

766
00:39:09,100 --> 00:39:11,000
It's totally bogus, right?

767
00:39:11,200 --> 00:39:14,200
So we just want to make sure that we never have a T1 in there.

768
00:39:14,200 --> 00:39:17,800
We want to make sure we go right from t0 to T2 so that anytime you

769
00:39:17,800 --> 00:39:19,100
observe the thread value.

770
00:39:19,100 --> 00:39:19,900
It's correct.

771
00:39:20,500 --> 00:39:22,500
And that's really easy for us to do, right?

772
00:39:22,600 --> 00:39:25,800
All we have to do is do the start Cycles here.

773
00:39:27,500 --> 00:39:28,200
Like so.

774
00:39:28,600 --> 00:39:31,700
And then instead of modifying the cycle count, we just never, we just

775
00:39:31,700 --> 00:39:33,600
don't have to ever write to that, right?

776
00:39:33,700 --> 00:39:35,800
We would we would never actually have to do that.

777
00:39:41,500 --> 00:39:44,500
We could just go ahead and say, all right, take the cycle count here.

778
00:39:46,800 --> 00:39:52,000
And add to it, whatever the start Cycles was, which will record.

779
00:39:53,300 --> 00:39:54,500
Whatever the start Cycles.

780
00:39:55,700 --> 00:39:57,200
Was subtract that out.

781
00:39:58,300 --> 00:40:02,200
There's the Delta cycles and then we'll just record, you know, we'll

782
00:40:02,200 --> 00:40:05,100
get that will take the cycle count and we'll increment it by this.

783
00:40:05,300 --> 00:40:08,500
So now we would know that no matter when another thread goes in there,

784
00:40:09,200 --> 00:40:10,200
it's going to be correct.

785
00:40:12,300 --> 00:40:13,200
So that's all good.

786
00:40:14,300 --> 00:40:16,100
All right, but we've got another problem.

787
00:40:16,600 --> 00:40:19,200
We've got another kind of little ugliness, right?

788
00:40:19,800 --> 00:40:23,600
And the ugliness, is that if you take a look at what happens here, and

789
00:40:23,600 --> 00:40:25,300
we've got to do thread safety thing here.

790
00:40:25,800 --> 00:40:28,700
If you take a look what happens, two of us, could be trying to modify

791
00:40:28,700 --> 00:40:30,800
the hit count or the cycle count at the same time.

792
00:40:30,800 --> 00:40:34,200
Now we don't care if two people are modifying these values because

793
00:40:34,200 --> 00:40:36,600
these values are just always going to get overwritten with the same

794
00:40:36,600 --> 00:40:38,100
with the correct information.

795
00:40:38,500 --> 00:40:39,400
So it doesn't matter at.

796
00:40:39,400 --> 00:40:41,500
All right, does not matter in any way.

797
00:40:41,900 --> 00:40:43,900
It's a totally Superfluous, right?

798
00:40:46,700 --> 00:40:50,800
But the hit count and the cycle count, we want to modify atomically.

799
00:40:51,600 --> 00:40:56,600
So, what we want to do here is we want to do a locked increment of the

800
00:40:56,600 --> 00:40:59,200
hit count so that it can kind of accumulate.

801
00:40:59,200 --> 00:41:02,500
So, we'd rather do here is, we'd rather have our, handmade intrinsics,

802
00:41:02,800 --> 00:41:06,000
and I'm going to feel stupid for removing it because we have Atomic

803
00:41:06,000 --> 00:41:07,700
increment here and I think I removed it.

804
00:41:08,300 --> 00:41:08,800
Oops.

805
00:41:10,800 --> 00:41:13,200
Do what we want to do is go, okay, atomic.

806
00:41:15,800 --> 00:41:16,800
Increment.

807
00:41:20,400 --> 00:41:23,300
And we probably want to do, I don't know, you know how many cycles is

808
00:41:23,300 --> 00:41:23,800
going to take it.

809
00:41:23,800 --> 00:41:25,100
I'm going to take more than four billion cycles.

810
00:41:25,100 --> 00:41:25,900
Probably not.

811
00:41:25,900 --> 00:41:28,800
So we could do 32-bit Atomic increment, right?

812
00:41:29,100 --> 00:41:30,100
You could do atomic increment.

813
00:41:30,100 --> 00:41:30,900
You 32.

814
00:41:31,400 --> 00:41:33,400
We could say what we want.

815
00:41:33,400 --> 00:41:34,900
Here is the record cycle.

816
00:41:34,900 --> 00:41:37,200
Count, tried the record hit count.

817
00:41:37,400 --> 00:41:40,300
We want to atomically increment that by this, right?

818
00:41:40,300 --> 00:41:43,400
Or this is really Tha mehcad, right?

819
00:41:43,900 --> 00:41:45,200
So, you want to do an atomic add?

820
00:41:45,200 --> 00:41:47,600
We want to do the same thing for the cycle count, right?

821
00:41:47,600 --> 00:41:48,900
So Atomic, add the cyclic.

822
00:41:49,000 --> 00:41:52,000
count cast this to you 32, like so,

823
00:41:58,500 --> 00:41:59,800
and so, as long as the process,

824
00:42:00,000 --> 00:42:01,500
It's Atomic ad, which they all do.

825
00:42:01,800 --> 00:42:04,400
We don't even have to do any kind of compare exchange locking.

826
00:42:04,400 --> 00:42:07,200
None of that, we just say, okay, we needed to, we need to be an atomic

827
00:42:07,200 --> 00:42:09,900
ad and off we go, okay.

828
00:42:13,700 --> 00:42:14,900
It's very, very straightforward.

829
00:42:17,100 --> 00:42:19,200
And let's go ahead and do this here dealt the time.

830
00:42:21,300 --> 00:42:25,800
Let's go ahead and pull that out like so just so you can see very

831
00:42:25,800 --> 00:42:27,000
carefully where the atomics are.

832
00:42:28,300 --> 00:42:32,600
So I'm just now I just need that function, right?

833
00:42:32,800 --> 00:42:37,500
I need Atomic add you 32.

834
00:42:39,000 --> 00:42:41,600
The volatile and the at end.

835
00:42:42,900 --> 00:42:46,200
When we do the interlocked, I think this is just interlocked add.

836
00:42:46,500 --> 00:42:52,600
I think that's all we really need a tent and there's the result of the

837
00:42:52,600 --> 00:42:53,100
comes.

838
00:42:53,800 --> 00:42:56,900
I think, that's probably all we need to do, but I'm not sure.

839
00:42:58,500 --> 00:43:00,900
Let's take a look in Turlock, ad.

840
00:43:02,800 --> 00:43:03,400
Wow.

841
00:43:08,100 --> 00:43:10,000
Locked pair Exchange.

842
00:43:11,600 --> 00:43:12,900
Intrinsic functions.

843
00:43:16,500 --> 00:43:17,200
Excuse me.

844
00:43:18,100 --> 00:43:20,200
Please load up my intrinsic functions.

845
00:43:20,400 --> 00:43:22,800
Add, that's not the end.

846
00:43:23,000 --> 00:43:24,500
I don't like didn't actually want those.

847
00:43:24,500 --> 00:43:26,300
Those were not the ones I wanted.

848
00:43:26,800 --> 00:43:29,100
I wanted the other list.

849
00:43:30,800 --> 00:43:35,600
That for mips who still programs mips seriously.

850
00:43:36,400 --> 00:43:36,900
All right.

851
00:43:37,800 --> 00:43:47,300
So let's see here, let's let's get some interlocked compiler

852
00:43:47,300 --> 00:43:48,300
intrinsics

853
00:43:50,200 --> 00:43:52,500
Oh wait, is it up here?

854
00:43:52,500 --> 00:43:53,200
There it is.

855
00:43:54,200 --> 00:43:55,100
That's the one.

856
00:43:57,400 --> 00:43:59,000
Interlock exchange dad.

857
00:44:00,200 --> 00:44:01,600
Interlock exchange dad.

858
00:44:02,900 --> 00:44:03,600
It's not a good one.

859
00:44:04,300 --> 00:44:05,800
Do you like that, compiler?

860
00:44:07,100 --> 00:44:08,100
Yes, you do.

861
00:44:08,600 --> 00:44:09,000
Okay.

862
00:44:09,600 --> 00:44:11,700
So I'm going to take a look at interlocks change dad.

863
00:44:13,800 --> 00:44:14,700
With the underscore.

864
00:44:16,800 --> 00:44:19,900
Like so I just want to see what returns.

865
00:44:22,000 --> 00:44:23,800
This doesn't tell me what it returns.

866
00:44:24,100 --> 00:44:27,500
Why does it not tell me the initial value of the variable pointing to

867
00:44:27,500 --> 00:44:28,300
the by the atom?

868
00:44:28,300 --> 00:44:30,600
So it's the one that comes back.

869
00:44:31,900 --> 00:44:34,400
originally, so

870
00:44:36,100 --> 00:44:38,200
This note, Casey.

871
00:44:40,600 --> 00:44:45,700
Returns the original value prior to adding

872
00:44:46,800 --> 00:44:50,100
And I'm just going to take a blind guess at this one.

873
00:44:52,800 --> 00:44:55,200
Well, let's get this one right first, but I'm going to take a blind,

874
00:44:55,200 --> 00:44:57,800
guess at the llvm one and then the people on the forums can tell me

875
00:44:57,800 --> 00:44:59,900
what it is.

876
00:45:00,000 --> 00:45:01,500
Because I've implemented before I know VM.

877
00:45:01,500 --> 00:45:05,300
So I should be able to maybe get close in 64.

878
00:45:05,300 --> 00:45:06,200
Yes, that's fine.

879
00:45:07,800 --> 00:45:08,400
There we go.

880
00:45:11,000 --> 00:45:12,500
Cannot convert.

881
00:45:15,100 --> 00:45:15,700
Oh, the cycle.

882
00:45:15,700 --> 00:45:17,800
Count was a you.

883
00:45:17,800 --> 00:45:19,600
Third eye doesn't need to be any more.

884
00:45:20,200 --> 00:45:23,900
It does not need to be at all, which means we've actually got a pad in

885
00:45:23,900 --> 00:45:24,200
here.

886
00:45:24,200 --> 00:45:27,300
We could, you know, we could do something creative with it.

887
00:45:29,700 --> 00:45:31,600
and yeah, you know, we could even

888
00:45:33,700 --> 00:45:36,900
Now we can prep because the hit counts probably going to could, could

889
00:45:36,900 --> 00:45:39,400
in theory rap, if we were counting something large.

890
00:45:39,400 --> 00:45:43,000
So I'm gonna, I'm gonna, I'm not gonna try to pack that down further,

891
00:45:43,200 --> 00:45:43,500
right?

892
00:45:43,500 --> 00:45:49,300
You could imagine doing oops, you could imagine doing that and getting

893
00:45:49,300 --> 00:45:52,800
it down a little bit further, but I'm just I'm just not I'm just not

894
00:45:52,800 --> 00:45:53,400
gonna do it.

895
00:45:55,100 --> 00:45:57,900
All right, so let's take a look at this.

896
00:45:57,900 --> 00:46:02,400
Now that certainly doesn't look good.

897
00:46:05,000 --> 00:46:06,400
All right, so we're not quite there yet.

898
00:46:06,700 --> 00:46:07,900
We've got a little bit of work to do.

899
00:46:07,900 --> 00:46:08,400
It's true.

900
00:46:08,900 --> 00:46:09,800
That's totally fine.

901
00:46:11,700 --> 00:46:14,000
So what exactly have I?

902
00:46:14,000 --> 00:46:16,300
What if I, what if I ruined?

903
00:46:16,600 --> 00:46:18,700
What kind of a life have I ruined for us?

904
00:46:18,700 --> 00:46:19,500
What have I done?

905
00:46:21,400 --> 00:46:24,000
Let me just go back in here as well.

906
00:46:24,500 --> 00:46:29,800
I want to do one more thing which is let's see.

907
00:46:29,900 --> 00:46:32,600
In my print out routine.

908
00:46:34,300 --> 00:46:35,300
In here.

909
00:46:35,300 --> 00:46:39,100
I also want to change these guys to be

910
00:46:41,100 --> 00:46:43,300
I actually want to change these guys around slightly.

911
00:46:43,800 --> 00:46:49,200
So what I would like that way, what I would like to do here is I'd

912
00:46:49,200 --> 00:46:51,900
like to do a exchange of these.

913
00:46:51,900 --> 00:46:58,200
I'd like to do an atomic exchange of these guys so that we can

914
00:46:58,200 --> 00:47:01,800
actually do the reset atomically as well.

915
00:47:02,300 --> 00:47:03,100
That makes sense.

916
00:47:04,300 --> 00:47:07,200
Now we could actually do something kind of crazy.

917
00:47:10,600 --> 00:47:11,300
Oh man.

918
00:47:15,900 --> 00:47:18,500
I'm kind of thinking that we could do something kind of awesome here.

919
00:47:19,700 --> 00:47:23,400
So what we could also do, I won't quite do it yet.

920
00:47:23,500 --> 00:47:25,500
So you know what I'm not going to quite do this yet.

921
00:47:25,600 --> 00:47:27,600
I'm not going to do it yet but we're gonna do it.

922
00:47:27,900 --> 00:47:30,000
It's just I'm not going to get because if there was a bug in my thing

923
00:47:30,000 --> 00:47:32,600
before so we're just we're not going to be yet, then I'm going to do

924
00:47:32,600 --> 00:47:32,900
it.

925
00:47:32,900 --> 00:47:34,300
We're going to, we're going to, we're totally going to do it.

926
00:47:34,300 --> 00:47:36,200
We got 10 minutes left for it's so good to do it.

927
00:47:36,200 --> 00:47:37,300
We're so totally going to do it.

928
00:47:37,300 --> 00:47:41,600
So I movie funny, let's find the bug first.

929
00:47:41,700 --> 00:47:44,100
Let's just find the bug first, right?

930
00:47:44,200 --> 00:47:47,200
So, okay, what do we have going on here?

931
00:47:47,200 --> 00:47:49,400
That's probably just because we're printing out.

932
00:47:49,500 --> 00:47:51,700
I-64 is when these are not I-64.

933
00:47:51,700 --> 00:47:54,700
So let's get rid of that first and that'll fix that.

934
00:47:54,700 --> 00:47:55,100
Okay.

935
00:47:55,100 --> 00:47:58,800
And then let's go take a look and we'll see that.

936
00:47:58,800 --> 00:47:59,700
Looks a little more.

937
00:48:00,500 --> 00:48:01,000
Reasonable.

938
00:48:01,000 --> 00:48:01,900
Certainly.

939
00:48:03,200 --> 00:48:05,700
Now things are looking pretty, calm and fun.

940
00:48:06,500 --> 00:48:06,900
Okay.

941
00:48:08,200 --> 00:48:09,100
So, yeah, alright.

942
00:48:09,100 --> 00:48:10,700
We've totally fine.

943
00:48:11,200 --> 00:48:13,900
So now what I'd like to do is I'd like to make sure this is atomic as

944
00:48:13,900 --> 00:48:15,100
well, because why not?

945
00:48:15,300 --> 00:48:18,200
And what I was thinking is we could actually make sure that the cycle

946
00:48:18,200 --> 00:48:18,800
count in the hit.

947
00:48:18,800 --> 00:48:21,700
Count are, actually always updated atomically together, by just

948
00:48:21,700 --> 00:48:23,600
merging them into one, you 64.

949
00:48:24,100 --> 00:48:27,500
So we could basically, you know, do something where we have the hit

950
00:48:27,500 --> 00:48:30,000
count on the top and the cycle count on the bottom.

951
00:48:30,400 --> 00:48:34,200
Or something like this, and furthermore, that means we could have, we

952
00:48:34,200 --> 00:48:35,600
could steal some bits.

953
00:48:35,800 --> 00:48:37,100
So the hit count in the cycle.

954
00:48:37,100 --> 00:48:38,700
Count could actually not both be 32.

955
00:48:38,700 --> 00:48:41,000
If we wanted the cycle count to be able to go over 4 billion, we

956
00:48:41,000 --> 00:48:44,600
could, I don't know if we do, but we could

957
00:48:46,900 --> 00:48:50,200
It leaves our that ability open to us, right?

958
00:48:51,300 --> 00:48:58,400
So how that would work is we'd have our hit count here right?

959
00:48:58,900 --> 00:49:01,900
And the hit count Jimmy

960
00:49:03,500 --> 00:49:04,500
Would just get stored.

961
00:49:05,500 --> 00:49:07,200
So hit count.

962
00:49:08,300 --> 00:49:13,200
Bulls head count in it like that and instead of doing the atomic adieu

963
00:49:13,200 --> 00:49:15,000
32 cure you would not do that at.

964
00:49:15,000 --> 00:49:16,200
All right?

965
00:49:16,200 --> 00:49:17,900
We would just snap the start Cycles.

966
00:49:17,900 --> 00:49:19,600
That's the only thing that would happen.

967
00:49:20,500 --> 00:49:21,700
We would stop the start cycle.

968
00:49:21,700 --> 00:49:24,300
Now what there's another thing that's kind of annoying here.

969
00:49:24,300 --> 00:49:26,100
Again, this is just the part about.

970
00:49:26,500 --> 00:49:30,300
I wish we could sort of pass something to the destructor of this

971
00:49:30,300 --> 00:49:30,700
thing.

972
00:49:30,700 --> 00:49:33,200
You know, like kind of say that at the bottom, I want to do something

973
00:49:33,200 --> 00:49:33,500
else.

974
00:49:33,500 --> 00:49:34,100
I'd have to think about.

975
00:49:34,100 --> 00:49:35,500
There's some way we can do that.

976
00:49:35,600 --> 00:49:37,100
I don't think there really is, but

977
00:49:39,200 --> 00:49:41,600
Not an issue at the immediate moment.

978
00:49:41,600 --> 00:49:45,000
But when we do this Delta time here, right?

979
00:49:45,300 --> 00:49:48,700
What I can do now is, I can say, okay, take the Delta time as a user,

980
00:49:48,700 --> 00:49:53,900
you 64 then, or in the hit count as a you 64.

981
00:49:56,100 --> 00:49:57,900
Shift it up by 32 bits.

982
00:49:58,900 --> 00:49:59,500
Right?

983
00:49:59,800 --> 00:50:01,400
Then we just do one Atomic.

984
00:50:01,400 --> 00:50:07,300
Add you 64 to the hit count cycle count with just the Delta of both.

985
00:50:10,400 --> 00:50:11,100
That makes sense.

986
00:50:11,600 --> 00:50:16,300
And so then instead of our intrinsic being about a u-32, it's actually

987
00:50:16,300 --> 00:50:17,400
about a you 64,

988
00:50:19,300 --> 00:50:20,000
That makes sense.

989
00:50:23,800 --> 00:50:26,600
So then we do an interlocked exchange, add 64.

990
00:50:28,300 --> 00:50:32,100
And I guess I don't really know what it wants us to pass for that on

991
00:50:32,100 --> 00:50:32,600
msv.

992
00:50:32,600 --> 00:50:37,200
See just an underscore underscore in 64, okay?

993
00:50:39,300 --> 00:50:43,100
That would allow us to be completely Atomic.

994
00:50:43,100 --> 00:50:46,700
The whole way through which is pretty sweet.

995
00:50:47,100 --> 00:50:49,200
So then we have our hit count here.

996
00:50:49,700 --> 00:50:54,400
We have our cycle count here and that's just going to be, you know,

997
00:50:54,400 --> 00:50:56,900
the the end, I'll grab this out here.

998
00:50:56,900 --> 00:50:59,800
So we've got the what's that thing called?

999
00:51:00,200 --> 00:51:06,200
D-damn ladybug, can't, what's hit can't cycle count, right?

1000
00:51:06,300 --> 00:51:10,000
So the hit count cycle count, we grab it out like that.

1001
00:51:10,500 --> 00:51:15,400
Then we say, okay, whatever the hit count is, is just going to be this

1002
00:51:15,400 --> 00:51:17,100
thing shifted down by 32.

1003
00:51:18,700 --> 00:51:19,200
Right.

1004
00:51:22,100 --> 00:51:25,800
And the cycle count is just going to be that same thing with the top.

1005
00:51:25,800 --> 00:51:26,800
Mast out of it.

1006
00:51:28,000 --> 00:51:32,300
So and 0xffff ffff, right?

1007
00:51:32,700 --> 00:51:34,500
Just get those just those bottom fits.

1008
00:51:35,300 --> 00:51:38,000
So then we've got the hit, count the cycle count, we've extracted

1009
00:51:38,000 --> 00:51:38,400
them.

1010
00:51:38,800 --> 00:51:42,500
And now we just use them as if we had stored them, that way to begin

1011
00:51:42,500 --> 00:51:43,300
with, right?

1012
00:51:43,300 --> 00:51:44,000
Pretty easy.

1013
00:51:44,800 --> 00:51:48,200
And now for clearing, we also just do counter hit count cycle.

1014
00:51:48,200 --> 00:51:49,100
Count equals zero.

1015
00:51:49,200 --> 00:51:52,900
So we just clear one value and it clears the whole thing, right?

1016
00:51:53,400 --> 00:51:58,800
And so, in theory, that is now allows us to be completely Atomic with

1017
00:51:58,800 --> 00:51:59,300
the ad.

1018
00:51:59,300 --> 00:52:04,500
Which means that now there's no possibility of, you know, getting the,

1019
00:52:04,500 --> 00:52:09,600
the getting the cycle count with the wrong hit count and Reporting the

1020
00:52:09,600 --> 00:52:13,700
time wrong because when we divide by the cycle count to get the number

1021
00:52:13,700 --> 00:52:17,300
of cycles per invocation, if this, if they hit count was off by one

1022
00:52:17,300 --> 00:52:20,600
because someone's block hadn't finished updating the hit count, but

1023
00:52:20,600 --> 00:52:21,300
had finished up.

1024
00:52:21,300 --> 00:52:21,700
Kidding.

1025
00:52:21,700 --> 00:52:23,400
The cycle count, we would have

1026
00:52:23,400 --> 00:52:27,200
Sort of like missed report for just that one, right?

1027
00:52:28,600 --> 00:52:33,100
So we don't have that problem anymore or I should say we almost don't

1028
00:52:33,100 --> 00:52:34,100
have that problem anymore.

1029
00:52:34,200 --> 00:52:39,800
Our read from this thing and are reset, are not Atomic and we would

1030
00:52:39,800 --> 00:52:43,400
like those to be because we don't want to read from it and then reset

1031
00:52:43,400 --> 00:52:48,000
it after and miss an invocation, because then, we might, we might

1032
00:52:48,000 --> 00:52:50,500
miss, we'd miss one invocation of the thing, right?

1033
00:52:50,500 --> 00:52:55,800
That we were trying to count so that we can also fix by just having an

1034
00:52:55,800 --> 00:52:58,300
atomic exchange, right?

1035
00:53:00,600 --> 00:53:04,700
So we have a stomach exchange, you 64.

1036
00:53:05,200 --> 00:53:10,500
That's going to take a you 64 volatile and it's going to take a you 64

1037
00:53:10,500 --> 00:53:11,000
new.

1038
00:53:11,600 --> 00:53:15,800
It's essentially exactly the same as comparing exchange but instead of

1039
00:53:15,800 --> 00:53:19,400
ever doing it compared it's just always going to do the exchange.

1040
00:53:19,600 --> 00:53:20,400
It doesn't care.

1041
00:53:20,400 --> 00:53:23,200
What the original value was, it's just going to swap them, no matter

1042
00:53:23,200 --> 00:53:26,700
what it is, because that's all we actually needed to do in this

1043
00:53:26,700 --> 00:53:28,300
circumstance, right?

1044
00:53:29,200 --> 00:53:36,000
So now we can call Atomic exchange on this guy, so that'll do the

1045
00:53:36,000 --> 00:53:38,100
clear and give us back the original value.

1046
00:53:38,100 --> 00:53:44,200
And that makes sure that now we're always reporting, we're always

1047
00:53:44,200 --> 00:53:48,500
clearing as we do the report so that nobody is ever going to be able

1048
00:53:48,500 --> 00:53:52,400
to get in there in between that and and have us overwrite it when we

1049
00:53:52,400 --> 00:53:54,200
clear, right?

1050
00:53:55,200 --> 00:53:58,300
Okay, so let's take a look and see if that works now.

1051
00:54:03,800 --> 00:54:09,800
alright, so now I think I think

1052
00:54:11,400 --> 00:54:16,000
we are actually printing things out in a relatively sane fashion, I

1053
00:54:16,000 --> 00:54:16,600
think.

1054
00:54:22,100 --> 00:54:22,900
I think.

1055
00:54:24,100 --> 00:54:25,000
We're thread safe.

1056
00:54:26,800 --> 00:54:27,300
Right?

1057
00:54:28,000 --> 00:54:30,700
I think no matter how many threads are pounding on that, at the same

1058
00:54:30,700 --> 00:54:31,300
time,

1059
00:54:33,000 --> 00:54:34,600
It's going to get some proper late.

1060
00:54:35,600 --> 00:54:38,400
And that's fine right now.

1061
00:54:38,400 --> 00:54:40,600
There's some things we might want to do to get better information

1062
00:54:40,600 --> 00:54:41,600
about that thread stuff.

1063
00:54:41,600 --> 00:54:45,900
But as you can see, we now have pretty stable reporting.

1064
00:54:46,500 --> 00:54:49,300
All of our accounts are lining up nicely are cycle counts, look

1065
00:54:49,300 --> 00:54:50,000
plausible.

1066
00:54:50,400 --> 00:54:52,000
So we're getting there, right?

1067
00:54:52,000 --> 00:54:52,600
We're getting there.

1068
00:54:53,600 --> 00:54:54,500
So that's pretty good.

1069
00:54:55,900 --> 00:54:57,900
And we get these very low overhead at this point.

1070
00:54:58,200 --> 00:55:00,000
There's very little going on that time.

1071
00:55:00,000 --> 00:55:03,600
Block thing and really there's only one Atomic operation which is

1072
00:55:03,600 --> 00:55:05,200
right here and you know,

1073
00:55:06,100 --> 00:55:08,200
Those atomic operations are not particularly expensive.

1074
00:55:10,200 --> 00:55:11,100
So we're in good shape.

1075
00:55:11,100 --> 00:55:11,900
This is pretty cool.

1076
00:55:12,300 --> 00:55:14,500
I think this is pretty darn, pretty darn cool.

1077
00:55:20,600 --> 00:55:22,600
But we're not quite done yet.

1078
00:55:22,700 --> 00:55:25,900
So, when we print these things out, we are only putting out the debug

1079
00:55:25,900 --> 00:55:26,700
records main.

1080
00:55:26,900 --> 00:55:29,400
We also remember have the optimized one.

1081
00:55:30,100 --> 00:55:32,300
So in here, we've got a Time block and we're not reporting that one

1082
00:55:32,300 --> 00:55:32,800
yet.

1083
00:55:32,800 --> 00:55:36,100
So what I'd like to do is go ahead and explain expand this out a

1084
00:55:36,100 --> 00:55:45,900
little bit right to do sort of a debug output debug records.

1085
00:55:45,900 --> 00:55:49,300
I don't know something where I can pass which array I'm

1086
00:55:49,500 --> 00:55:50,200
Trying to do.

1087
00:55:50,800 --> 00:55:56,300
And that way, it will be able to be called twice, right?

1088
00:55:56,300 --> 00:56:01,100
So if I do that, and I have a hero, you know, I should say to do stop

1089
00:56:01,300 --> 00:56:03,900
using standard IO, that's another thing we've got to do.

1090
00:56:07,100 --> 00:56:09,600
Because technically that's a library, even though it's built in to

1091
00:56:09,600 --> 00:56:13,300
see, it's still a library and I don't like using libraries.

1092
00:56:13,300 --> 00:56:16,700
That's not really the point on handmade hero, so we want to get rid of

1093
00:56:16,700 --> 00:56:18,000
that anyway.

1094
00:56:18,700 --> 00:56:23,800
So I want to pass here, whatever the the array count is so I need like

1095
00:56:24,000 --> 00:56:25,600
account, right?

1096
00:56:26,000 --> 00:56:30,400
Counter count, ironically enough and a debug record pointer

1097
00:56:31,400 --> 00:56:32,100
Counters.

1098
00:56:33,000 --> 00:56:36,300
And then here I can just do two of these output.

1099
00:56:36,300 --> 00:56:41,400
Debug records output debug records so I can output the array count for

1100
00:56:41,400 --> 00:56:46,700
debug records Main and the array count for debug records optimized.

1101
00:56:47,800 --> 00:56:52,900
Like so and past the pointers as well.

1102
00:56:53,000 --> 00:56:53,600
There we go.

1103
00:56:54,200 --> 00:56:59,000
So in here, then I can just do counter count and I can do counters.

1104
00:57:01,400 --> 00:57:02,000
Counters.

1105
00:57:02,400 --> 00:57:04,000
And now we can print out both.

1106
00:57:04,200 --> 00:57:07,900
I believe, let's see, who poops you go.

1107
00:57:10,700 --> 00:57:14,900
Debug records optimized is an Undeclared identifier.

1108
00:57:15,700 --> 00:57:16,500
Well guess what?

1109
00:57:16,500 --> 00:57:20,200
My friend a you're right.

1110
00:57:20,600 --> 00:57:26,300
That's true because it's right down here I believe but I'm gonna just

1111
00:57:26,300 --> 00:57:29,800
going to go ahead and pretty clear that for you so that you can print

1112
00:57:29,800 --> 00:57:30,200
it out.

1113
00:57:32,500 --> 00:57:34,900
Yeah, the problem is though, we won't know what the count is.

1114
00:57:36,700 --> 00:57:37,900
Hmm.

1115
00:57:39,700 --> 00:57:42,800
Hmm, we won't know what the county is.

1116
00:57:42,800 --> 00:57:47,200
So we're going to have to do one more thing, actually, right?

1117
00:57:47,800 --> 00:57:55,000
We're going to have to do this, debug records optimized count equals

1118
00:57:55,000 --> 00:57:55,600
counter.

1119
00:57:57,400 --> 00:57:58,000
Right.

1120
00:57:58,800 --> 00:58:01,800
And then that and I guess this is going to have to be a concert

1121
00:58:01,800 --> 00:58:05,300
because there's no other way to do it in C without saying const.

1122
00:58:05,700 --> 00:58:07,600
I believe, right?

1123
00:58:08,000 --> 00:58:09,000
Am I right about that?

1124
00:58:12,200 --> 00:58:12,900
So, there we go.

1125
00:58:26,000 --> 00:58:29,600
Unresolved external symbol on technique consti bug records?

1126
00:58:29,600 --> 00:58:30,700
Optimize count.

1127
00:58:31,600 --> 00:58:33,500
It's right there though.

1128
00:58:34,900 --> 00:58:35,800
Why?

1129
00:58:37,200 --> 00:58:41,100
Why are you not accepting it now?

1130
00:58:41,100 --> 00:58:42,100
Because I said an extern it.

1131
00:58:42,900 --> 00:58:48,800
All right, so now that we're looking up there looks like we're doing,

1132
00:58:48,800 --> 00:58:50,500
okay now that's a little odd.

1133
00:58:50,600 --> 00:58:54,200
Why is draw a rectangle quickly showing up twice?

1134
00:58:57,400 --> 00:58:58,000
It's a bit odd.

1135
00:58:58,000 --> 00:58:58,700
Don't you think?

1136
00:58:59,500 --> 00:59:00,100
Oh, I know why?

1137
00:59:00,100 --> 00:59:01,800
Because it's got two pieces to it.

1138
00:59:03,300 --> 00:59:08,000
Yeah so what we probably should do is do something like draw.

1139
00:59:08,000 --> 00:59:12,100
We should probably when we when we print this stuff out we probably

1140
00:59:12,100 --> 00:59:14,300
should do something like printing out the fuck.

1141
00:59:14,300 --> 00:59:16,900
The line number as well.

1142
00:59:21,400 --> 00:59:25,400
So then we can see that there's two different ones, right?

1143
00:59:30,200 --> 00:59:31,100
Lovely, isn't it?

1144
00:59:32,100 --> 00:59:33,700
Running with all these threads as well?

1145
00:59:34,400 --> 00:59:36,900
That means we could do other stuff too, right?

1146
00:59:36,900 --> 00:59:38,500
We could even go a little bit more hog-wild.

1147
00:59:38,500 --> 00:59:40,600
I gotta go to the Q&A here, we're almost out of time.

1148
00:59:40,600 --> 00:59:46,100
We're pretty much out of time, but I should say, well, if we're thread

1149
00:59:46,100 --> 00:59:47,500
safe, right?

1150
00:59:49,800 --> 00:59:53,800
We can just go ahead and put Phil Graham Chunk in there, right?

1151
00:59:56,100 --> 00:59:57,800
Although I guess that doesn't really make any sense because I was

1152
00:59:57,800 --> 00:59:58,300
doing you work.

1153
00:59:58,300 --> 00:59:59,800
So let me rephrase that

1154
01:00:00,800 --> 01:00:01,600
Put it in there.

1155
01:00:02,200 --> 01:00:03,400
How about handmade asset?

1156
01:00:04,600 --> 01:00:08,500
What about in here, load a set directly, we'll put that in there.

1157
01:00:10,900 --> 01:00:14,500
You know, find block for size acquire, asset memory.

1158
01:00:15,000 --> 01:00:18,200
Why isn't that time should be timed, right?

1159
01:00:18,200 --> 01:00:20,000
Course, it should be, everyone knows.

1160
01:00:20,000 --> 01:00:24,000
It should be timed loud, sound but bitmap

1161
01:00:25,300 --> 01:00:27,900
When it's free to do stuff, you do it, right?

1162
01:00:28,100 --> 01:00:34,600
And so you want to keep that you want to have that sort of path.

1163
01:00:34,600 --> 01:00:38,900
Of least resistance, be the right path because if the path of least

1164
01:00:38,900 --> 01:00:45,100
resistance is the right path, then you're always on it, right?

1165
01:00:45,600 --> 01:00:47,800
It's never a drudge work to do the right thing.

1166
01:00:49,100 --> 01:00:49,600
Boom.

1167
01:00:51,000 --> 01:00:53,700
And so, as we walk around, you can actually see those guys.

1168
01:00:53,700 --> 01:00:57,800
Come on their briefly like the as the ground chunks get filled, right?

1169
01:00:57,800 --> 01:00:59,000
That's what that's showing.

1170
01:00:59,300 --> 01:01:01,600
And so, that's a good another hint to of other stuff.

1171
01:01:01,600 --> 01:01:04,200
We're probably going to want to do because those things are only on

1172
01:01:04,200 --> 01:01:08,600
their very briefly will want ways to build a see what they were on

1173
01:01:08,600 --> 01:01:09,800
previous frames, right?

1174
01:01:11,000 --> 01:01:13,000
All right, so that's good for today.

1175
01:01:13,000 --> 01:01:15,300
Let's go ahead and go to the Q&A.

1176
01:01:15,300 --> 01:01:18,500
If you have a question that you would like to ask about what we did on

1177
01:01:18,500 --> 01:01:23,800
today's stream, please put it into the chat with a q: in front of it,

1178
01:01:23,800 --> 01:01:25,600
so that I can see it.

1179
01:01:36,800 --> 01:01:39,500
And SZ, this was again pretty awesome.

1180
01:01:39,500 --> 01:01:40,200
Thank you.

1181
01:01:40,500 --> 01:01:41,700
You are most welcome.

1182
01:01:42,000 --> 01:01:42,900
Thanks for tuning in.

1183
01:01:44,400 --> 01:01:45,100
The buzz.

1184
01:01:45,500 --> 01:01:46,900
Wouldn't a union be helpful for that?

1185
01:01:46,900 --> 01:01:47,700
Hit count cycle.

1186
01:01:47,700 --> 01:01:48,000
Count.

1187
01:01:48,000 --> 01:01:50,800
It just seems unnecessary having to remember their offsets and or

1188
01:01:50,800 --> 01:01:55,800
lengths when you're talking about an atomic exchange, I don't really

1189
01:01:55,800 --> 01:01:59,300
want to deal with that stuff like when I'm when I'm doing stuff like

1190
01:01:59,300 --> 01:02:03,400
using atomics I want to micromanage that because I just don't want to

1191
01:02:03,400 --> 01:02:06,700
have to think about what the C compiler is might have done or what the

1192
01:02:07,400 --> 01:02:09,600
C++ Committee in their infinite Testament.

1193
01:02:09,600 --> 01:02:13,400
Wisdom might decide to do with the Union that messes me up, right?

1194
01:02:15,600 --> 01:02:18,100
Let's see, Elven yesterday I asked about preprocessor, constant other

1195
01:02:18,100 --> 01:02:18,800
than found lying.

1196
01:02:18,800 --> 01:02:21,400
Sarah, I did some searching I found about time and date.

1197
01:02:21,700 --> 01:02:24,400
Maybe it's useful for us to include a time-date stamp in some of our

1198
01:02:24,400 --> 01:02:25,300
logs.

1199
01:02:27,500 --> 01:02:28,400
I mean maybe.

1200
01:02:28,400 --> 01:02:30,900
But remember the time and the date or the time of day of the

1201
01:02:30,900 --> 01:02:36,200
compilation so it's not particularly useful for us to have that other

1202
01:02:36,200 --> 01:02:39,200
than probably, you know, you know, maybe we bake that in just as a

1203
01:02:39,200 --> 01:02:41,600
thing when you're like, if you're trying to report a bug because so

1204
01:02:41,600 --> 01:02:44,600
you know which like build it was or something, but it doesn't really.

1205
01:02:44,700 --> 01:02:46,700
Help us probably beyond that.

1206
01:02:51,300 --> 01:02:56,000
Can you align the text into columns with with percent 32s in the

1207
01:02:56,000 --> 01:02:57,200
sprintf or something?

1208
01:02:57,800 --> 01:02:59,400
Yeah, I mean you could do

1209
01:03:00,000 --> 01:03:04,000
You know, I'm assuming you could do something like that if you were in

1210
01:03:04,000 --> 01:03:05,400
the so inclined.

1211
01:03:12,600 --> 01:03:14,700
Is that the actual Syntax for the string with though?

1212
01:03:14,700 --> 01:03:15,700
I don't actually remember.

1213
01:03:25,500 --> 01:03:29,200
So, if you wanted in columns, the cycle counts going to be tough,

1214
01:03:29,400 --> 01:03:29,700
right?

1215
01:03:29,700 --> 01:03:33,300
The cycle counts going to be like a bunch of things.

1216
01:03:39,000 --> 01:03:39,800
Let's see here.

1217
01:03:42,800 --> 01:03:45,100
Still not quite still, not quite right.

1218
01:03:51,200 --> 01:03:51,900
Is that?

1219
01:03:54,300 --> 01:03:55,800
Is that my we're looking for?

1220
01:04:03,100 --> 01:04:06,600
I should I need to remember to go make Loop live coding work with a

1221
01:04:06,600 --> 01:04:09,300
debug system because it's not much work to do that, but

1222
01:04:12,400 --> 01:04:14,400
So yeah, there you go.

1223
01:04:26,300 --> 01:04:29,500
Elvin you mentioned yesterday that destructors are called when the

1224
01:04:29,500 --> 01:04:31,200
scope of the object ends?

1225
01:04:31,200 --> 01:04:32,400
I just wanted to note.

1226
01:04:32,400 --> 01:04:37,800
It seems that if you use it to exit a function instead of return, then

1227
01:04:37,800 --> 01:04:43,000
the destructors won't get called if you use what to exit a function.

1228
01:04:45,700 --> 01:04:46,700
Like what do you mean by?

1229
01:04:46,700 --> 01:04:49,200
If you use it to exit a function,

1230
01:04:59,500 --> 01:05:00,300
To any McGee?

1231
01:05:00,300 --> 01:05:02,200
Will you marry me unfortunately?

1232
01:05:02,200 --> 01:05:03,100
I cannot

1233
01:05:05,400 --> 01:05:10,500
I'm already married and Seattle, well, Washington State, and I guess

1234
01:05:10,700 --> 01:05:13,400
the federal government in general does not allow polygamy.

1235
01:05:13,400 --> 01:05:17,900
In fact, Utah wanted to have it when they entered the Union, right?

1236
01:05:17,900 --> 01:05:22,500
I believe, but the federal government said no as one of the conditions

1237
01:05:22,500 --> 01:05:25,000
of joining so you only have one spouse.

1238
01:05:28,300 --> 01:05:30,000
Panic 00 won't already TSE.

1239
01:05:30,000 --> 01:05:30,800
Give wrong results.

1240
01:05:30,800 --> 01:05:33,400
If your thread is preempted and scheduled on to a different CPU

1241
01:05:33,400 --> 01:05:35,100
between the Constructor and Destructor calls.

1242
01:05:35,100 --> 01:05:36,500
Yes, well,

1243
01:05:39,100 --> 01:05:40,700
Okay, so

1244
01:05:42,200 --> 01:05:44,600
yes, it does.

1245
01:05:46,700 --> 01:05:48,900
But there is a, but

1246
01:05:50,300 --> 01:05:54,500
if you are concerned about that, which I am not particularly concerned

1247
01:05:54,500 --> 01:05:57,700
about because, you know, that'll just show up as a blip, right?

1248
01:05:59,500 --> 01:05:59,900
If you are

1249
01:06:00,000 --> 01:06:01,000
Concerned about that.

1250
01:06:01,000 --> 01:06:04,100
You can you can actually let me rephrase that.

1251
01:06:04,800 --> 01:06:08,400
So that is what I want to know, right?

1252
01:06:08,400 --> 01:06:11,600
I want to know that a blip occurred and I want to know where it

1253
01:06:11,600 --> 01:06:13,600
occurred and then I can later be like, okay, it was an operating

1254
01:06:13,600 --> 01:06:14,800
system task which or something like that.

1255
01:06:14,800 --> 01:06:15,900
That's all fine, right?

1256
01:06:16,300 --> 01:06:19,700
But if you're trying to time things and you want to take the the

1257
01:06:19,700 --> 01:06:23,400
context switch out of the equation, you can't do it entirely because

1258
01:06:23,400 --> 01:06:25,900
it's going to mess with their cash and all that kind of stuff.

1259
01:06:25,900 --> 01:06:28,900
So it's not like you can completely remove it but you do have the

1260
01:06:28,900 --> 01:06:29,700
option Windows.

1261
01:06:29,700 --> 01:06:29,900
Actually.

1262
01:06:30,000 --> 01:06:33,200
Really does a save and restore our dtsc thing.

1263
01:06:33,700 --> 01:06:38,800
It's like get thread cycle times or something like this.

1264
01:06:44,800 --> 01:06:45,400
Windows.

1265
01:06:45,400 --> 01:06:47,700
Get read cycle count.

1266
01:06:47,700 --> 01:06:48,500
I don't remember

1267
01:06:49,700 --> 01:06:50,300
Here it is.

1268
01:06:53,000 --> 01:06:56,400
So what this guy does is,

1269
01:06:58,600 --> 01:06:59,500
It's not that one.

1270
01:06:59,500 --> 01:07:01,200
It's this one.

1271
01:07:12,100 --> 01:07:14,000
No, it's not that one either.

1272
01:07:16,300 --> 01:07:17,000
Which one is it?

1273
01:07:17,000 --> 01:07:18,200
There is an actual call.

1274
01:07:18,200 --> 01:07:21,300
You can make to get the thing that you sound like you want.

1275
01:07:21,500 --> 01:07:24,500
And I just can't remember what it is, but it trust me, it's in here

1276
01:07:24,500 --> 01:07:25,000
somewhere.

1277
01:07:28,000 --> 01:07:30,700
They added it at a particular time, in Windows.

1278
01:07:30,700 --> 01:07:33,500
There's it that, where they'll actually save and restore the thing.

1279
01:07:36,600 --> 01:07:39,800
And it's not, it's said that one says, it's not what it is.

1280
01:07:39,800 --> 01:07:40,700
It says when says

1281
01:07:46,600 --> 01:07:47,700
I don't remember.

1282
01:07:49,500 --> 01:07:51,700
I'm sorry, I just don't remember what it is.

1283
01:07:51,700 --> 01:07:53,700
You can get the information you want?

1284
01:07:53,900 --> 01:07:57,900
They added a thing to Windows that would that will save the our dtsc

1285
01:07:57,900 --> 01:07:59,700
when the task of switched out.

1286
01:07:59,800 --> 01:08:06,000
And so it knows the amount that was used and will account for that.

1287
01:08:06,300 --> 01:08:09,000
So if that's really important to you just go, you can probably just

1288
01:08:09,000 --> 01:08:11,800
search online or something and find it, but there is a way to do that

1289
01:08:11,800 --> 01:08:12,300
in Windows.

1290
01:08:12,300 --> 01:08:14,000
I don't know if there's a way to do it, another os's,

1291
01:08:18,200 --> 01:08:21,100
Man, he's saying, are you working any other games other than handmade

1292
01:08:21,100 --> 01:08:21,500
hero?

1293
01:08:21,500 --> 01:08:25,700
Yes, I have some work, I'm doing on the witness, just at the end here

1294
01:08:25,700 --> 01:08:26,600
for some stuff.

1295
01:08:28,700 --> 01:08:31,399
And then I also am working full-time on a game.

1296
01:08:31,700 --> 01:08:35,000
It's a different game during the day, at Molly rocket, which hasn't

1297
01:08:35,000 --> 01:08:35,800
been announced yet?

1298
01:08:37,399 --> 01:08:37,899
Twist makes me.

1299
01:08:37,899 --> 01:08:38,800
It's General partner question.

1300
01:08:38,800 --> 01:08:41,100
Do you have any general advice for optimizing code performance,

1301
01:08:41,100 --> 01:08:45,500
multi-threading algorithm Flex, analysis cetera, go watch the streams

1302
01:08:45,500 --> 01:08:47,500
on optimizing optimizing that we've already done.

1303
01:08:47,800 --> 01:08:52,000
That's my first set of advice, we didn't do like, all the optimization

1304
01:08:52,000 --> 01:08:56,100
stuff, there's more to come, but go back and watch the ones on

1305
01:08:56,100 --> 01:08:57,899
optimization for intro.

1306
01:09:01,300 --> 01:09:01,800
K.

1307
01:09:01,800 --> 01:09:02,500
Sorry, I made a typo.

1308
01:09:02,500 --> 01:09:04,800
The first question you mentioned yesterday that is structures are

1309
01:09:04,800 --> 01:09:06,300
called when the scope of the obligations.

1310
01:09:06,300 --> 01:09:07,200
I just want to note.

1311
01:09:07,200 --> 01:09:11,200
It seems that if you use exit to exit a function instead of return

1312
01:09:11,200 --> 01:09:12,700
than the destructors won't get called.

1313
01:09:13,300 --> 01:09:18,100
So just to be clear, exit, doesn't exit a function, exit exits, your

1314
01:09:18,100 --> 01:09:19,200
application.

1315
01:09:20,300 --> 01:09:23,800
So the reason that the destructors don't get called in that case is

1316
01:09:23,800 --> 01:09:26,399
because you've terminated your process.

1317
01:09:26,700 --> 01:09:29,500
So, obviously, there are structures, can't get called because it's

1318
01:09:29,500 --> 01:09:30,399
been terminated

1319
01:09:32,200 --> 01:09:33,000
Does that make sense?

1320
01:09:33,800 --> 01:09:37,399
Exit doesn't exit a function, exit, exit, exit.

1321
01:09:37,399 --> 01:09:38,899
Closes the entire app.

1322
01:09:45,899 --> 01:09:46,200
Whist.

1323
01:09:46,200 --> 01:09:48,300
Uh so the values are pretty hard to read when they're changing,

1324
01:09:48,300 --> 01:09:49,100
literally every frame.

1325
01:09:49,100 --> 01:09:50,399
Wouldn't it be better to average them?

1326
01:09:50,800 --> 01:09:54,600
Well I wouldn't say it's better to average them necessarily but we as

1327
01:09:54,600 --> 01:09:57,500
you as we sort of go forwards with this, you'll see the stuff that I'm

1328
01:09:57,500 --> 01:10:00,800
going to do I have a bunch of things we're going to do in terms of

1329
01:10:00,800 --> 01:10:02,100
visualizing those values.

1330
01:10:02,300 --> 01:10:07,400
So yes, but we haven't gotten there yet.

1331
01:10:12,500 --> 01:10:13,200
Panic 00.

1332
01:10:13,200 --> 01:10:15,900
Have you considered keeping the timers in thread-local storage instead

1333
01:10:15,900 --> 01:10:17,900
of using atomics every time you write them?

1334
01:10:18,800 --> 01:10:22,500
Well, first of all, I don't think that would that was not good.

1335
01:10:23,000 --> 01:10:26,500
I may have just spilled a bunch of water on my keyboard may have

1336
01:10:27,400 --> 01:10:28,000
spilled it.

1337
01:10:29,900 --> 01:10:33,400
Let's just say, well, may is probably the wrong term, definitely did

1338
01:10:34,200 --> 01:10:38,800
might be a better way to say it, you know, see how it.

1339
01:10:38,800 --> 01:10:40,400
Let's see how the we'll see.

1340
01:10:40,400 --> 01:10:41,700
How it how it responds.

1341
01:10:44,600 --> 01:10:45,200
So yeah.

1342
01:10:48,500 --> 01:10:49,500
And that was unfortunate.

1343
01:10:51,900 --> 01:10:53,300
Apparently, the keyboard is still working.

1344
01:10:54,400 --> 01:10:56,500
Which is odd, but lucky.

1345
01:10:58,600 --> 01:11:01,300
So, first of all, I would ask why you want to do that because

1346
01:11:01,300 --> 01:11:05,100
thread-local storage is only available on certain platforms and

1347
01:11:05,100 --> 01:11:09,800
involves a bunch of things that you may or may not want to do, right?

1348
01:11:11,100 --> 01:11:13,200
If we did them in thread-local storage, you have to answer the

1349
01:11:13,200 --> 01:11:16,700
question of, how do you get them out of thread-local storage, right?

1350
01:11:16,700 --> 01:11:17,700
When do you do that?

1351
01:11:18,100 --> 01:11:19,800
Who is the thread that would do that?

1352
01:11:19,900 --> 01:11:23,700
Do all of your threads then lock up on a single, debug pull pull

1353
01:11:24,900 --> 01:11:28,500
And if so does that ruin, what you were trying to observe, right?

1354
01:11:29,100 --> 01:11:31,500
So think about what that means, if you're going to put them into the

1355
01:11:31,500 --> 01:11:32,300
local storage.

1356
01:11:32,500 --> 01:11:34,600
And then think about the fact that atomics

1357
01:11:35,600 --> 01:11:37,000
Are free.

1358
01:11:38,000 --> 01:11:41,600
I mean, they're almost entirely literally free, they don't cost you

1359
01:11:41,600 --> 01:11:43,000
anything, right?

1360
01:11:43,100 --> 01:11:45,200
Most of the time they're like a few Cycles.

1361
01:11:46,900 --> 01:11:47,600
So

1362
01:11:49,100 --> 01:11:52,200
You know putting them in thread-local storage.

1363
01:11:52,200 --> 01:11:53,400
Doesn't sound like a very good idea.

1364
01:11:53,400 --> 01:11:57,400
It actually sounds like actually impacting the performance quite a bit

1365
01:11:57,400 --> 01:11:59,800
more perhaps significantly more than you.

1366
01:12:00,000 --> 01:12:00,600
Atomic.

1367
01:12:12,300 --> 01:12:12,600
Qbert.

1368
01:12:12,600 --> 01:12:14,300
Caleb are lock free data structures.

1369
01:12:14,300 --> 01:12:18,500
Worth the time they take to write that depends on the circumstance,

1370
01:12:19,000 --> 01:12:19,500
right?

1371
01:12:21,000 --> 01:12:26,500
Obviously if you have something that's performance-critical then you

1372
01:12:26,500 --> 01:12:30,100
may want to look for you to structure if you don't, you don't

1373
01:12:37,100 --> 01:12:38,200
Terry roar words.

1374
01:12:38,200 --> 01:12:40,200
Do you think it would be worthwhile to make the time records?

1375
01:12:40,200 --> 01:12:42,800
Hierarchical like a call tree and how would you go about it?

1376
01:12:43,700 --> 01:12:48,200
So I don't really think that it's particularly useful.

1377
01:12:52,200 --> 01:12:55,500
I mean, typically, that's for people who don't know how their own code

1378
01:12:55,500 --> 01:12:58,500
works for the most part once in a while.

1379
01:12:58,500 --> 01:13:00,900
There's a reason why you might want to do that, where you don't really

1380
01:13:00,900 --> 01:13:03,800
know on whose behalf something is being called.

1381
01:13:04,900 --> 01:13:07,200
But typically, I don't find the hierarchical thing particularly

1382
01:13:07,200 --> 01:13:07,900
necessary.

1383
01:13:08,600 --> 01:13:11,000
Now, one thing that is useful,

1384
01:13:12,200 --> 01:13:15,600
Is when you know that something inside something else is taking so

1385
01:13:15,600 --> 01:13:19,400
much time to subtract that time out, sometimes that can be kind of

1386
01:13:19,400 --> 01:13:23,200
Handy, but the problem with that is, if you're trying to track

1387
01:13:23,200 --> 01:13:28,200
hierarchical calls, you end up in things that, you know, that is

1388
01:13:28,200 --> 01:13:31,400
something that may require thread-local storage to do correctly.

1389
01:13:31,900 --> 01:13:37,800
So you have to be really sure that you want it, because if you, if you

1390
01:13:37,800 --> 01:13:40,700
aren't careful, you'll end up sort of impacting you're

1391
01:13:42,000 --> 01:13:44,500
The thing a lot more intrusive to get that.

1392
01:13:45,200 --> 01:13:46,500
Now, we could try.

1393
01:13:46,500 --> 01:13:49,200
I haven't thought too much about it in a while.

1394
01:13:54,200 --> 01:13:56,200
so, I'd have to think about

1395
01:13:57,900 --> 01:13:58,400
You know.

1396
01:14:00,100 --> 01:14:01,800
if there's some ways to do,

1397
01:14:04,100 --> 01:14:06,400
I mean, you know, on a platform like Windows where they're

1398
01:14:06,400 --> 01:14:09,900
thread-local storage, it's probably not very expensive to do.

1399
01:14:10,000 --> 01:14:14,900
So we could do the tracking without it being like a huge deal, right?

1400
01:14:17,000 --> 01:14:19,400
So yeah.

1401
01:14:19,600 --> 01:14:20,400
I mean

1402
01:14:25,100 --> 01:14:26,000
We could consider it.

1403
01:14:27,000 --> 01:14:30,400
We could consider it on platforms without thread-local storage without

1404
01:14:30,400 --> 01:14:32,400
without reliable thread-local storage.

1405
01:14:32,400 --> 01:14:36,900
It would be, it would be a bit of a, an ugliness, I think.

1406
01:14:43,700 --> 01:14:47,500
Can you explain the difference between mutexes and interlocks?

1407
01:14:49,300 --> 01:14:52,700
So when you say interlocks, you mean like the atomic ad and stuff?

1408
01:14:54,000 --> 01:14:56,000
So yes, I can.

1409
01:14:59,300 --> 01:14:59,900
but I guess those

1410
01:15:00,000 --> 01:15:01,500
Terms are often kind of used.

1411
01:15:01,500 --> 01:15:04,400
A lot of these terms are used somewhat imprecisely in certain

1412
01:15:04,400 --> 01:15:05,000
scenarios.

1413
01:15:05,000 --> 01:15:10,700
I guess I would also say so it's worth noting that

1414
01:15:12,600 --> 01:15:15,800
You kind of have to really be precise about what you're talking about

1415
01:15:15,800 --> 01:15:19,700
but alright, so inside the processor.

1416
01:15:22,300 --> 01:15:23,700
We've got Coors, right?

1417
01:15:27,100 --> 01:15:32,600
So here's core 0 and here's Core 1 and these cores have caches.

1418
01:15:33,100 --> 01:15:36,800
So inside the core, here's the L1 cache for Core 1.

1419
01:15:36,900 --> 01:15:41,400
Sorry, core 0, and here's the L1 cache for core one right now.

1420
01:15:41,400 --> 01:15:43,400
What's going to happen on an atomic?

1421
01:15:43,800 --> 01:15:47,000
The only thing that's going to happen on the Tomic, is that a

1422
01:15:47,000 --> 01:15:48,000
particular chord?

1423
01:15:48,000 --> 01:15:49,900
The one who's accessing the atomic.

1424
01:15:49,900 --> 01:15:54,400
So when I say, when I did that Atomic add right, the only thing that

1425
01:15:54,400 --> 01:15:56,300
happens on that Atomic is it's going to check to see.

1426
01:15:56,400 --> 01:16:00,200
Whether this is in my cache right, whether the address that's being

1427
01:16:00,200 --> 01:16:01,300
added, right?

1428
01:16:01,300 --> 01:16:03,200
So, you know, here's memory.

1429
01:16:06,700 --> 01:16:09,200
And here's like the L3 cache or something.

1430
01:16:09,200 --> 01:16:12,800
If there is one, Whatever whatever the shared cache is our.

1431
01:16:12,900 --> 01:16:13,900
So I won't even say L3.

1432
01:16:13,900 --> 01:16:16,500
I'll just say here's the shared caches, here's the exclusive.

1433
01:16:16,500 --> 01:16:18,800
Caches meaning catches only perk or right.

1434
01:16:18,900 --> 01:16:20,000
So these are per core caches.

1435
01:16:20,000 --> 01:16:22,300
These are the the show caches what I do.

1436
01:16:22,300 --> 01:16:23,000
The atomic add.

1437
01:16:23,000 --> 01:16:28,100
The only thing that's going to happen is the external part of the

1438
01:16:28,100 --> 01:16:28,700
memory system.

1439
01:16:28,700 --> 01:16:30,700
The part that's outside the cores.

1440
01:16:32,000 --> 01:16:36,000
This core is going to say, I now need to own whatever that address is.

1441
01:16:36,000 --> 01:16:39,600
So if we're going to do an atomic add to like this address of memory,

1442
01:16:39,800 --> 01:16:40,500
right?

1443
01:16:40,600 --> 01:16:43,600
It's going to make sure that I have exclusive access to that.

1444
01:16:43,600 --> 01:16:47,700
Which means that, if this guy previously had it, it had a value in it.

1445
01:16:47,700 --> 01:16:49,400
He's going to mark his is stale.

1446
01:16:49,500 --> 01:16:49,700
Right?

1447
01:16:49,700 --> 01:16:50,900
It says, is not exclusive.

1448
01:16:50,900 --> 01:16:53,300
Like I like someone else is using it, right?

1449
01:16:53,300 --> 01:16:56,000
This is the messy protocol stuff that we talked about before that you

1450
01:16:56,000 --> 01:16:56,800
can go look up.

1451
01:16:59,500 --> 01:17:00,600
That's all that's going to happen.

1452
01:17:00,900 --> 01:17:04,600
So it may involve a transfer where it has to like evict it from this

1453
01:17:04,600 --> 01:17:07,100
guy and bring it into this guy's cash, right?

1454
01:17:07,300 --> 01:17:10,600
But that was going to happen anyway because if it wasn't in this guy's

1455
01:17:10,600 --> 01:17:14,700
cash, he had to load it anyway to get it because he has to add to it.

1456
01:17:15,300 --> 01:17:17,500
So that's literally it.

1457
01:17:17,900 --> 01:17:20,400
That's all that happens on that Atomic ad.

1458
01:17:20,500 --> 01:17:23,900
Is it is it's going to do that exclusive, it's going to mark it as

1459
01:17:23,900 --> 01:17:24,700
exclusive.

1460
01:17:24,700 --> 01:17:27,800
It's just like if it was going to write to any other memory address

1461
01:17:28,100 --> 01:17:28,500
it's the same

1462
01:17:28,700 --> 01:17:30,000
Thing, right?

1463
01:17:31,000 --> 01:17:35,300
So, all it does is, it makes sure that the only thing that makes it

1464
01:17:35,300 --> 01:17:40,500
Atomic is the fact that the read and the write happened together,

1465
01:17:40,600 --> 01:17:43,400
without allowing an eviction in between, that's it.

1466
01:17:43,800 --> 01:17:45,600
Otherwise, it's just, it's free.

1467
01:17:45,800 --> 01:17:48,100
It's really not an expensive thing, right?

1468
01:17:48,800 --> 01:17:52,000
A mutex is not anything like that.

1469
01:17:52,200 --> 01:17:56,600
A mutex has an arbitrary performance penalty to it, that depends on

1470
01:17:56,600 --> 01:17:57,800
the Locking situation.

1471
01:17:58,000 --> 01:17:58,400
So what am I

1472
01:17:58,600 --> 01:18:00,000
You Tex is is a mutex.

1473
01:18:00,000 --> 01:18:01,600
Like built on top of this.

1474
01:18:01,900 --> 01:18:02,300
Right?

1475
01:18:02,400 --> 01:18:06,200
So understand that you know you got this a mutex is a programming

1476
01:18:06,200 --> 01:18:08,600
construct built on top of this system.

1477
01:18:09,000 --> 01:18:14,100
What a mutex does is it says okay, I have two pieces of code right

1478
01:18:14,300 --> 01:18:15,000
here is code.

1479
01:18:15,000 --> 01:18:16,400
A here's code be.

1480
01:18:17,800 --> 01:18:20,800
They both want to do something but that's something is complicated.

1481
01:18:20,900 --> 01:18:23,800
So they've got this piece of code, each of them have some code in

1482
01:18:23,800 --> 01:18:24,900
here, right?

1483
01:18:25,100 --> 01:18:28,100
And we know that this code and this code cannot be run at the same

1484
01:18:28,100 --> 01:18:31,300
time because they do some stuff that would conflict.

1485
01:18:31,500 --> 01:18:34,200
So you want to make sure that only one or the other runs at that time.

1486
01:18:34,900 --> 01:18:38,900
What a mutex is it uses the atomic operation of the processor to do

1487
01:18:38,900 --> 01:18:40,300
something like us?

1488
01:18:40,300 --> 01:18:44,400
Have a memory location, that's like a lock and that lock is just set

1489
01:18:44,400 --> 01:18:46,000
to 0, when, no one owns it.

1490
01:18:46,300 --> 01:18:47,400
And it's set to like some

1491
01:18:47,600 --> 01:18:49,300
Our value like 1, when someone does.

1492
01:18:49,500 --> 01:18:51,800
So it'll do an atomic on that thing.

1493
01:18:52,300 --> 01:18:56,700
Like an atomic compare exchange for example, to set it to 1 and if it

1494
01:18:56,700 --> 01:18:59,900
gets back a zero on the atomic, compare compare exchange, it knows

1495
01:18:59,900 --> 01:19:01,200
that it now owns the lock.

1496
01:19:01,400 --> 01:19:04,600
So if a does that and sees that it gets back, a 1, it will run the

1497
01:19:04,600 --> 01:19:06,100
code, right?

1498
01:19:06,500 --> 01:19:10,700
And B does that same thing gets back a one knows, oh, somebody else

1499
01:19:10,700 --> 01:19:11,600
holds the lock.

1500
01:19:11,600 --> 01:19:16,100
I'll just sit here in a loop and wait until this until whoever's done

1501
01:19:16,100 --> 01:19:17,300
with it, releases it.

1502
01:19:17,500 --> 01:19:17,700
It.

1503
01:19:17,700 --> 01:19:20,600
And at the end it does a set of the thing back to zero.

1504
01:19:20,600 --> 01:19:21,500
So it has done.

1505
01:19:21,500 --> 01:19:23,200
Be, will then see it in the loop go.

1506
01:19:23,200 --> 01:19:24,500
Oh, it's zero now.

1507
01:19:24,600 --> 01:19:27,100
Do the atomic compare exchange 21 and run my code.

1508
01:19:28,100 --> 01:19:32,700
So a mutex is like an unbounded amount of time that has to go by and

1509
01:19:32,700 --> 01:19:35,800
you have to have loops to like sit there and check right?

1510
01:19:37,200 --> 01:19:40,200
And mutexes can be more complicated to, they can involve the operating

1511
01:19:40,200 --> 01:19:44,200
system if you want to put, like, a thread to sleep, if the mutex is

1512
01:19:44,200 --> 01:19:47,800
taken, so that you can give the processor time, somebody else while

1513
01:19:47,800 --> 01:19:48,900
you're waiting on the mutex.

1514
01:19:49,100 --> 01:19:53,200
So you can have operating system mitigated mutexes, which allow

1515
01:19:53,200 --> 01:19:55,100
threads to give time back to the OS.

1516
01:19:55,400 --> 01:19:58,300
So, a mutex is like a way, like way more.

1517
01:19:58,300 --> 01:20:01,000
It's, it's not even remotely comparable to this.

1518
01:20:01,200 --> 01:20:04,000
The only time that's remotely comparable to, this is the case where

1519
01:20:04,000 --> 01:20:05,900
the mutexes on contended

1520
01:20:06,300 --> 01:20:08,400
And you still have a little bit more which is you got that Branch

1521
01:20:08,400 --> 01:20:09,400
that's happening in there.

1522
01:20:09,800 --> 01:20:12,000
But at that point, if you're just going to go through and you never

1523
01:20:12,000 --> 01:20:14,700
contend, you never contend that lock.

1524
01:20:14,700 --> 01:20:16,300
Then it's just going to be like an atomic.

1525
01:20:16,300 --> 01:20:19,200
It does the atomic it exchange compare exchange succeeds.

1526
01:20:19,200 --> 01:20:19,900
I run my code.

1527
01:20:19,900 --> 01:20:21,200
I set it to 0 at the end.

1528
01:20:21,300 --> 01:20:23,300
That's pretty darn close, right?

1529
01:20:23,400 --> 01:20:24,000
So, a nun.

1530
01:20:24,000 --> 01:20:26,800
Contended, mutex is basically, you know, it's not going to be a

1531
01:20:26,800 --> 01:20:28,700
preacher be more expensive, a contented.

1532
01:20:28,700 --> 01:20:32,100
Mutex could be, it can be as much as this cost.

1533
01:20:34,100 --> 01:20:37,100
The entire time of this be whilst, all right?

1534
01:20:43,600 --> 01:20:44,700
I just want food.

1535
01:20:44,700 --> 01:20:46,000
Wait about the values.

1536
01:20:46,000 --> 01:20:47,600
Can you draw a graph out of them?

1537
01:20:47,600 --> 01:20:48,100
Yes.

1538
01:20:48,100 --> 01:20:51,100
But, wait, wait, you got to, wait, be patient.

1539
01:20:52,700 --> 01:20:53,700
Be patient and see.

1540
01:20:55,600 --> 01:20:56,000
Elvin.

1541
01:20:56,000 --> 01:20:57,600
No, save the tree IMAX Blues.

1542
01:20:57,700 --> 01:20:59,300
They're actually Cherry MX Browns.

1543
01:21:03,900 --> 01:21:06,000
Tt, b JM will you be able to fix the click bug?

1544
01:21:06,000 --> 01:21:08,000
At the end of sounds with the debug system?

1545
01:21:09,100 --> 01:21:12,100
You know, honestly we could fix the click at the end of sounds

1546
01:21:12,100 --> 01:21:13,500
probably without the debug system.

1547
01:21:13,500 --> 01:21:16,500
But yeah, I mean, you know, we just haven't bothered spending any time

1548
01:21:16,500 --> 01:21:21,600
on sound, but yeah, we could make that a good excuse like, you know.

1549
01:21:24,500 --> 01:21:27,300
We could make that a good test of our debug system, like, could we

1550
01:21:27,300 --> 01:21:29,400
make it easy to find that bug, right?

1551
01:21:30,100 --> 01:21:31,000
Not a bad idea.

1552
01:21:36,900 --> 01:21:40,400
Guitar Free, can you still time a smaller section inside the code?

1553
01:21:40,400 --> 01:21:42,500
Or does it just work for Whole functions?

1554
01:21:42,500 --> 01:21:45,500
Now you can time a smaller section as you want.

1555
01:21:45,500 --> 01:21:52,200
Just wrap it in braces, we already do that, in fact, so for example,

1556
01:21:52,600 --> 01:21:59,500
handmade optimized, you can see here time block, this block starts

1557
01:21:59,500 --> 01:22:02,400
here and ends at the closing brace down here.

1558
01:22:04,100 --> 01:22:05,800
Right here.

1559
01:22:07,900 --> 01:22:11,300
So that is a sub time block, so you can time any block you want, just

1560
01:22:11,300 --> 01:22:12,300
enclose it in braces.

1561
01:22:21,400 --> 01:22:21,900
K.

1562
01:22:21,900 --> 01:22:25,900
I noticed you prefer to keep things on the stack and return by value.

1563
01:22:25,900 --> 01:22:28,300
This helps with locality of reference as more cash friendly.

1564
01:22:28,300 --> 01:22:32,900
And my right one is the stack size something to be concerned about

1565
01:22:33,000 --> 01:22:33,300
too.

1566
01:22:33,300 --> 01:22:36,400
When returning by value is the time taken to copy the object and

1567
01:22:36,400 --> 01:22:36,700
return.

1568
01:22:36,700 --> 01:22:39,300
It something to be worried about maybe when the struct is large.

1569
01:22:39,300 --> 01:22:43,300
In this case, you prefer to return a pointer to the object yesso

1570
01:22:44,600 --> 01:22:47,600
typically, return and pass and return by value.

1571
01:22:47,600 --> 01:22:50,800
You have to struct is large, and the function is not in line.

1572
01:22:51,600 --> 01:22:55,900
Then yes you typically want to use a pointer or something to for stack

1573
01:22:55,900 --> 01:22:56,400
size.

1574
01:22:57,200 --> 01:22:59,900
It's not really something to be too concerned about because I tend to

1575
01:22:59,900 --> 01:23:01,800
not use that for particularly large things.

1576
01:23:06,800 --> 01:23:07,900
Sparkly guy.

1577
01:23:07,900 --> 01:23:08,600
How do threads?

1578
01:23:08,600 --> 01:23:11,500
Wait, unlock free structures, do they?

1579
01:23:12,300 --> 01:23:14,300
Well it depends on lock-free structures.

1580
01:23:14,300 --> 01:23:16,200
A lock-free structure, is really.

1581
01:23:18,400 --> 01:23:19,300
It's a misnomer.

1582
01:23:19,300 --> 01:23:20,400
I got confused about this.

1583
01:23:20,400 --> 01:23:25,600
In fact earlier on stream and in fact, Fabi and corrected me.

1584
01:23:26,900 --> 01:23:29,100
He's, you know, like because he's more of a perfect guy than I am.

1585
01:23:29,100 --> 01:23:31,300
He knows this stuff a lot better than I do.

1586
01:23:32,000 --> 01:23:35,200
I'm like more of a generalist kind of programmer, so you know anything

1587
01:23:35,200 --> 01:23:35,800
that's perfect.

1588
01:23:35,900 --> 01:23:40,100
Elated like multi-threading and optimization.

1589
01:23:40,200 --> 01:23:45,800
He's, you know, he's the go-to guy and what he point out because I was

1590
01:23:45,800 --> 01:23:48,000
complaining about the phrase Lock Free when he pointed out is like

1591
01:23:48,000 --> 01:23:49,700
lock-free was a stupid name.

1592
01:23:50,900 --> 01:23:51,800
It's weight.

1593
01:23:51,800 --> 01:23:57,400
Free is actually the correct term introduced by herlihy in this paper

1594
01:23:57,400 --> 01:23:59,800
that like I swear to God if

1595
01:24:00,000 --> 01:24:02,200
Isn't the best paper that anyone's ever written.

1596
01:24:02,200 --> 01:24:02,800
It should be.

1597
01:24:02,800 --> 01:24:04,800
I don't remember what his name is.

1598
01:24:04,800 --> 01:24:05,800
Exactly.

1599
01:24:06,200 --> 01:24:07,400
I'm sorry how you spell it?

1600
01:24:08,600 --> 01:24:09,200
There it is.

1601
01:24:09,200 --> 01:24:10,600
Mitchell herlihy.

1602
01:24:14,500 --> 01:24:15,700
See if I can get it here.

1603
01:24:17,600 --> 01:24:18,800
Wait, the

1604
01:24:21,600 --> 01:24:23,200
Herlihy, there it is.

1605
01:24:27,000 --> 01:24:28,200
Think this is right.

1606
01:24:29,700 --> 01:24:30,400
Let's see.

1607
01:24:33,000 --> 01:24:37,000
Yes, so Maurice, sorry, man, I'm sorry.

1608
01:24:37,000 --> 01:24:38,400
I don't know why I thought it was Mitchell.

1609
01:24:38,500 --> 01:24:41,000
So this paper is insane.

1610
01:24:41,200 --> 01:24:44,300
I have not had time because I Fabi and brought it to my attention.

1611
01:24:46,100 --> 01:24:49,300
Only like a few weeks ago or a month or two ago when we were doing the

1612
01:24:49,300 --> 01:24:53,700
optimization stuff originally this weight free synchronization stuff.

1613
01:24:55,100 --> 01:25:02,300
This paper basically like just totally it just totally powned

1614
01:25:03,000 --> 01:25:03,800
multi-threading.

1615
01:25:04,100 --> 01:25:08,600
Nobody knew like anything about multi-threading at all and then this

1616
01:25:08,600 --> 01:25:11,200
paper came along and he basically just solved it all.

1617
01:25:11,200 --> 01:25:13,000
He was just like hey guess what guys?

1618
01:25:13,100 --> 01:25:15,200
You know all the open outstanding questions we had about

1619
01:25:15,200 --> 01:25:17,900
multi-threading I just did, I did them all and I just stuck them all

1620
01:25:17,900 --> 01:25:18,700
in one paper.

1621
01:25:18,800 --> 01:25:21,400
Like I know that sounds ridiculous but actually if you go read the

1622
01:25:21,400 --> 01:25:22,700
paper it's like totally true.

1623
01:25:22,700 --> 01:25:24,400
It's like, oh, it looks like

1624
01:25:24,800 --> 01:25:26,100
Just pound it.

1625
01:25:26,200 --> 01:25:30,500
And now we're done and it turns out that he was just right, and so in

1626
01:25:30,500 --> 01:25:34,600
this paper, he actually introduces all the correct stuff and he called

1627
01:25:34,600 --> 01:25:35,400
it, wait, free.

1628
01:25:35,400 --> 01:25:38,300
And he's actually more correct lot.

1629
01:25:38,300 --> 01:25:40,400
Free programming has nothing to do.

1630
01:25:40,400 --> 01:25:41,900
Like lock is a dumb term.

1631
01:25:41,900 --> 01:25:43,400
It doesn't mean what it sounds.

1632
01:25:43,400 --> 01:25:45,200
Like it means weight.

1633
01:25:45,200 --> 01:25:49,500
Free is the more appropriate term and what it's referring to is the

1634
01:25:49,500 --> 01:25:54,600
fact that multiple concurrent processing multiple

1635
01:25:54,700 --> 01:25:56,400
concurrent workers.

1636
01:25:58,100 --> 01:26:01,500
We'll never get into a situation where they do not guaranteed lie,

1637
01:26:01,500 --> 01:26:05,200
make forward progress eventually, right?

1638
01:26:06,000 --> 01:26:09,000
They never get in the situation where they might stop making forward

1639
01:26:09,000 --> 01:26:12,900
progress and he explains like a bunch of these things and he also goes

1640
01:26:12,900 --> 01:26:16,500
through like what are the properties of a processor necessary to

1641
01:26:16,500 --> 01:26:18,100
ensure that these are possible?

1642
01:26:19,400 --> 01:26:21,200
And so this stuff is pretty great.

1643
01:26:21,500 --> 01:26:25,200
He introduces the concept of a consensus number which is brilliant.

1644
01:26:25,300 --> 01:26:32,100
It's basically the idea that's how many different things could come to

1645
01:26:32,100 --> 01:26:33,200
an agreement.

1646
01:26:36,100 --> 01:26:39,100
About the state of the world, right?

1647
01:26:39,400 --> 01:26:43,100
And he basically proves that without compare exchange.

1648
01:26:43,100 --> 01:26:49,300
If you only have like Atomic increment or Atomic decrement, you can't

1649
01:26:49,300 --> 01:26:53,400
achieve a consensus number greater than 1, which means that like there

1650
01:26:53,400 --> 01:26:56,900
are algorithms that simply can't be implemented on that processor,

1651
01:26:56,900 --> 01:26:57,500
right?

1652
01:26:57,500 --> 01:26:59,500
But Atomic compare Exchange

1653
01:27:00,400 --> 01:27:03,600
Actually allows you to have a consensus number of infinity, which

1654
01:27:03,600 --> 01:27:06,700
means that you can have as many people as you want agreeing about the

1655
01:27:06,700 --> 01:27:09,500
state of something using just that operation.

1656
01:27:11,000 --> 01:27:11,500
So yeah.

1657
01:27:11,700 --> 01:27:13,000
So anyway point being

1658
01:27:14,600 --> 01:27:15,500
Read that paper.

1659
01:27:15,500 --> 01:27:18,900
If you want to have your mind blown because it's insane to think about

1660
01:27:18,900 --> 01:27:22,900
how much crazy stuff he did at just at once, just like poof.

1661
01:27:24,400 --> 01:27:25,500
So more easterly.

1662
01:27:25,500 --> 01:27:26,800
I'm sorry, I got his name wrong.

1663
01:27:27,400 --> 01:27:30,500
My memory is not what it used to be, but there you go.

1664
01:27:31,000 --> 01:27:34,600
And so if you want to know how threads wait on lock-free structures

1665
01:27:34,800 --> 01:27:37,800
actually think in terms of weight free structures, read that paper, it

1666
01:27:37,800 --> 01:27:38,600
explains it.

1667
01:27:38,800 --> 01:27:44,100
But the basic idea is that you make sure that when people do things

1668
01:27:44,500 --> 01:27:48,900
They're always only doing them for a prescribed amount of time and

1669
01:27:48,900 --> 01:27:50,200
never wait on each other.

1670
01:27:50,200 --> 01:27:52,300
They just do an operation and release.

1671
01:27:52,300 --> 01:27:52,600
Right.

1672
01:27:52,600 --> 01:27:56,100
And it's you can kind of see, he talks about how to do it with like a,

1673
01:27:56,300 --> 01:27:58,900
you know, you can imagine doing with atomic compare exchange as well.

1674
01:27:59,100 --> 01:28:00,400
It's relatively clear.

1675
01:28:09,900 --> 01:28:11,000
So the stream is technically over.

1676
01:28:11,000 --> 01:28:12,100
So let me just take a

1677
01:28:14,200 --> 01:28:16,200
May just take a quick Gander here.

1678
01:28:20,900 --> 01:28:21,500
Cast of five.

1679
01:28:21,500 --> 01:28:23,700
What's wrong with pointers to inline functions?

1680
01:28:25,700 --> 01:28:27,000
Is that, is that a joke?

1681
01:28:27,400 --> 01:28:28,300
I'm not sure what you mean.

1682
01:28:28,400 --> 01:28:30,200
How can you take a pointer to a function?

1683
01:28:30,200 --> 01:28:31,600
That doesn't exist, right?

1684
01:28:31,600 --> 01:28:33,500
An inline function is basically a macro.

1685
01:28:33,500 --> 01:28:36,900
It just gets expanded inside, whoever calls it.

1686
01:28:37,300 --> 01:28:41,500
So you can't take a pointer to it because there is no, it hasn't, it

1687
01:28:41,500 --> 01:28:44,100
doesn't exist in memory, right?

1688
01:28:44,100 --> 01:28:47,000
It's just get spammed out to everyone who used it.

1689
01:28:48,000 --> 01:28:50,100
I'm not sorry, I'm not sure if you're joking, if you're a serious,

1690
01:28:50,100 --> 01:28:50,600
that's the answer.

1691
01:28:50,600 --> 01:28:51,400
If you're joking.

1692
01:28:51,400 --> 01:28:53,800
I don't know what the wasn't.

1693
01:28:53,800 --> 01:28:55,700
I mean, I'm not following the chat so I can't tell.

1694
01:28:59,300 --> 01:28:59,700
K.

1695
01:28:59,700 --> 01:29:00,100
Y U.

1696
01:29:00,100 --> 01:29:01,100
Skips my questions.

1697
01:29:01,100 --> 01:29:02,600
What question did I skip?

1698
01:29:02,600 --> 01:29:04,000
I answer all your questions.

1699
01:29:09,900 --> 01:29:10,400
Blur Barry.

1700
01:29:10,400 --> 01:29:14,000
Did you get a degree in CS know what's your background on programming?

1701
01:29:14,200 --> 01:29:18,000
That should be hmh bot should answer that for you but also you can go

1702
01:29:18,000 --> 01:29:21,900
to the links underneath the twitch stream would tell you that

1703
01:29:23,700 --> 01:29:26,700
And it looks like that's about it, I think.

1704
01:29:28,200 --> 01:29:28,800
I think.

1705
01:29:34,400 --> 01:29:36,200
Yeah.

1706
01:29:41,000 --> 01:29:41,400
Yeah.

1707
01:29:42,500 --> 01:29:44,900
All right, let's wind it down.

1708
01:29:44,900 --> 01:29:48,000
People wind it down.

1709
01:29:48,200 --> 01:29:49,100
Save

1710
01:29:51,100 --> 01:29:54,100
minimize or try to minimize attempt to minimize and fail.

1711
01:29:55,500 --> 01:29:56,500
Close.

1712
01:29:58,400 --> 01:29:59,000
Okay.

1713
01:30:00,800 --> 01:30:02,900
Thank you everyone for joining me, for another episode of handmade

1714
01:30:02,900 --> 01:30:03,400
hero.

1715
01:30:03,500 --> 01:30:04,700
It's been a pleasure coding with you.

1716
01:30:04,700 --> 01:30:08,900
As always, if you would like to follow along at home with the source

1717
01:30:08,900 --> 01:30:11,700
code, if you preorder the game, it comes with a source code.

1718
01:30:11,700 --> 01:30:16,200
Even right now, even before the game is a game, you can follow along

1719
01:30:16,200 --> 01:30:18,200
with the, just the engine building in the source code, if you would

1720
01:30:18,200 --> 01:30:21,100
like to, and you can do that on handmade hero dot-org.

1721
01:30:21,100 --> 01:30:23,200
Just by clicking on this handy little button.

1722
01:30:24,200 --> 01:30:27,100
We also have a patreon if you just want to support the video series

1723
01:30:27,800 --> 01:30:29,400
and pledged to it, you can do it there.

1724
01:30:29,400 --> 01:30:31,000
It's always very much appreciated.

1725
01:30:31,300 --> 01:30:35,200
We also have a forum site where you can go to ask questions get ports

1726
01:30:35,200 --> 01:30:37,200
to Mac and Linux that community members have done.

1727
01:30:37,400 --> 01:30:39,000
You can look at it and say depe sewed guy.

1728
01:30:39,000 --> 01:30:40,600
The community members have been working on.

1729
01:30:41,200 --> 01:30:42,200
We also have a tweetbot.

1730
01:30:42,200 --> 01:30:46,400
So if you want to join the stream live like perhaps you did today, you

1731
01:30:46,400 --> 01:30:49,400
can go to the tweetbot and either subscribe to it or just check it

1732
01:30:49,400 --> 01:30:52,000
periodically to see when the stream is going to be, it always has

1733
01:30:52,000 --> 01:30:53,100
adopted a schedule on it.

1734
01:30:53,100 --> 01:30:53,900
So that's a good place to go.

1735
01:30:54,100 --> 01:30:55,100
Watch got stream live.

1736
01:30:56,000 --> 01:30:58,000
That's about it tomorrow.

1737
01:30:58,000 --> 01:31:01,100
We will sort of continue our exploration of debug code.

1738
01:31:01,400 --> 01:31:02,900
We sort of have the beginnings of it.

1739
01:31:02,900 --> 01:31:03,300
Now, right.

1740
01:31:03,300 --> 01:31:07,300
We've seen how to do one set of markup and we have a nice little

1741
01:31:07,300 --> 01:31:10,700
display that showing, you know, how many times we call various

1742
01:31:10,700 --> 01:31:12,200
functions and how long they take?

1743
01:31:12,200 --> 01:31:13,100
That's a good start.

1744
01:31:13,100 --> 01:31:14,700
But there still is a lot more we could do.

1745
01:31:14,900 --> 01:31:16,700
It's not a particularly good view at this point.

1746
01:31:16,700 --> 01:31:19,400
It doesn't really show us some of the information we might want.

1747
01:31:19,500 --> 01:31:22,100
It doesn't show us information over time at all, there's much things

1748
01:31:22,100 --> 01:31:23,800
we could do so we can start to press on that.

1749
01:31:24,000 --> 01:31:24,700
A little bit.

1750
01:31:24,800 --> 01:31:28,100
It also we don't have any sort of other markup, right?

1751
01:31:28,100 --> 01:31:31,100
All we can do right now is take timings we can't see data very easily

1752
01:31:31,100 --> 01:31:34,100
or memory so we got a bunch of more stuff we can do.

1753
01:31:34,100 --> 01:31:37,300
So over the next couple weeks that's what we're going to be doing.

1754
01:31:37,500 --> 01:31:40,200
So if you want to see us continue with that right back here tomorrow

1755
01:31:40,200 --> 01:31:40,700
5:00 p.m.

1756
01:31:40,700 --> 01:31:43,200
Pacific, Daylight time will be added again tomorrow.

1757
01:31:43,500 --> 01:31:44,700
Adding some more features to that.

1758
01:31:44,700 --> 01:31:47,600
So hope to see you there until then have fun programming and I'll see

1759
01:31:47,600 --> 01:31:48,600
you guys on the internet.

1760
01:31:48,700 --> 01:31:49,500
Take these everyone

