1
00:00:00,000 --> 00:00:00,400
Flirting.

2
00:00:02,200 --> 00:00:02,700
Here we go.

3
00:00:03,400 --> 00:00:06,000
Hello everyone and welcome to handmade hero.

4
00:00:06,000 --> 00:00:08,600
The show where we code a complete professional quality game from

5
00:00:08,600 --> 00:00:09,800
scratch using nothing.

6
00:00:09,800 --> 00:00:11,100
No libraries, no engines.

7
00:00:11,600 --> 00:00:15,600
Just so we can learn about absolutely everything that's in a game

8
00:00:15,600 --> 00:00:19,400
everything that happens all the way right down to what like gpus do

9
00:00:19,400 --> 00:00:20,200
and stuff like that.

10
00:00:20,200 --> 00:00:22,200
So we're actually going to implement absolutely everything including

11
00:00:22,200 --> 00:00:25,700
our own software renderer so we can see how absolutely everything

12
00:00:25,700 --> 00:00:26,000
works.

13
00:00:26,200 --> 00:00:28,400
And really gain that understanding that's necessary in order to be

14
00:00:28,400 --> 00:00:31,400
able to, you know, basically be someone who can build their own

15
00:00:31,400 --> 00:00:31,800
engine.

16
00:00:32,000 --> 00:00:33,500
Build their own libraries, if they want to.

17
00:00:33,500 --> 00:00:36,300
But also, if you're using stuff like that, you'll know exactly what

18
00:00:36,300 --> 00:00:39,000
they are doing underneath and how that sort of stuff works.

19
00:00:39,000 --> 00:00:40,900
So, if you need to drop down and fix something, you can, if you need

20
00:00:40,900 --> 00:00:44,000
to make good decisions about what to use or how to use it, you can,

21
00:00:44,000 --> 00:00:46,400
you basically just have that complete understanding that lets you be

22
00:00:46,400 --> 00:00:49,800
like a really effective game programmer, every level that you choose

23
00:00:49,800 --> 00:00:51,100
to, to go to.

24
00:00:51,200 --> 00:00:55,000
So that is what we have been doing.

25
00:00:55,000 --> 00:00:58,300
We are almost done, fussing with the win32 side of things.

26
00:00:58,300 --> 00:00:59,700
We have basically been working towards

27
00:01:01,200 --> 00:01:02,500
Excuse me here.

28
00:01:03,000 --> 00:01:07,000
We've been 20 days into it which basically 20 hours into development.

29
00:01:07,100 --> 00:01:10,200
We've been building our own win32 platform layer that allows us to do

30
00:01:10,200 --> 00:01:13,900
things, like play sounds and render graphics and get input from the

31
00:01:13,900 --> 00:01:16,700
GamePad and the keyboard allocate memory.

32
00:01:16,700 --> 00:01:17,800
Take tiny results.

33
00:01:17,800 --> 00:01:20,000
And we've done a tremendous amount of stuff in 20 days actually, and

34
00:01:20,000 --> 00:01:21,000
we've done it all by hand.

35
00:01:21,200 --> 00:01:22,500
So it's going actually quite well.

36
00:01:22,500 --> 00:01:24,500
And I'm delighted a bit about it yesterday.

37
00:01:24,500 --> 00:01:27,100
Unfortunately, we found out that the sound card and this machine is

38
00:01:27,300 --> 00:01:28,300
pretty latent.

39
00:01:28,600 --> 00:01:30,900
Takes about 33 milliseconds to get sound.

40
00:01:31,100 --> 00:01:34,400
From when we output it to when it comes out is the best that seems

41
00:01:34,400 --> 00:01:35,100
like we can do.

42
00:01:35,400 --> 00:01:36,900
So that's kind of a little rough.

43
00:01:36,900 --> 00:01:39,400
But today we're going to, you know, basically go back in there and hit

44
00:01:39,400 --> 00:01:41,300
that and see what we can do to try to make it.

45
00:01:41,500 --> 00:01:44,700
Try to get as far as we can towards getting our audio down to where we

46
00:01:44,700 --> 00:01:47,900
want it to be, before we move on to other stuff.

47
00:01:48,400 --> 00:01:52,700
Anyway, if you have gone to handmade here a.org and pre-ordered the

48
00:01:52,700 --> 00:01:53,100
game.

49
00:01:54,100 --> 00:01:55,600
Using this little handy dandy button.

50
00:01:55,600 --> 00:02:00,600
You got a link in your email that lets you go ahead and download

51
00:02:01,400 --> 00:02:04,400
handmade hero, the source code every night.

52
00:02:04,400 --> 00:02:04,900
I update it.

53
00:02:04,900 --> 00:02:07,700
So you can always follow along if you're following along at home.

54
00:02:07,900 --> 00:02:09,100
This is day 20.

55
00:02:09,100 --> 00:02:11,800
So when you download the source code, they'll actually be Zips in

56
00:02:11,800 --> 00:02:13,000
there one for each day.

57
00:02:13,000 --> 00:02:17,100
You just unzip day 19 and you will be exactly at the same state that I

58
00:02:17,100 --> 00:02:17,900
am when I start today.

59
00:02:17,900 --> 00:02:19,200
So you can follow along home.

60
00:02:19,300 --> 00:02:19,800
Exactly.

61
00:02:19,800 --> 00:02:23,400
Whenever you watch this video, Even if you watch it many, many days

62
00:02:23,400 --> 00:02:23,800
down the road.

63
00:02:23,900 --> 00:02:27,700
Now, I also believe I change this from saying weekly builds, to all

64
00:02:27,700 --> 00:02:28,000
bills.

65
00:02:28,000 --> 00:02:30,400
There we go, because some people were getting confused since it's

66
00:02:30,400 --> 00:02:33,100
actually nightly that you can download the stuff.

67
00:02:33,100 --> 00:02:36,400
So I change it to all builds because you get access to absolutely

68
00:02:36,400 --> 00:02:38,700
everything every time I push something and we push something basically

69
00:02:38,700 --> 00:02:39,300
every night.

70
00:02:42,200 --> 00:02:49,500
All right, that said let us go and and get started here.

71
00:02:49,500 --> 00:02:52,900
Someone on the chat was mentioning that we had an off by one error

72
00:02:52,900 --> 00:02:53,000
now.

73
00:02:53,000 --> 00:02:53,700
We've got we've

74
00:02:53,900 --> 00:02:56,600
I only have a couple bugs in what we were writing yesterday because we

75
00:02:56,600 --> 00:02:57,700
didn't really finish.

76
00:02:58,000 --> 00:02:59,900
We didn't get to the point where we really actually

77
00:03:00,000 --> 00:03:00,700
Lift it up.

78
00:03:01,700 --> 00:03:03,300
We only just barely threw it in there.

79
00:03:03,600 --> 00:03:04,700
We threw in some rendering code.

80
00:03:04,700 --> 00:03:10,500
They were saying there was an off by one error with with the, with the

81
00:03:10,500 --> 00:03:11,800
debug time marker.

82
00:03:12,500 --> 00:03:14,700
I'm not sure exactly what they meant by that.

83
00:03:14,700 --> 00:03:20,000
Actually on the chat, if they want to go ahead and point out exactly

84
00:03:20,000 --> 00:03:24,500
what it actually is, then we can go ahead and and look at it

85
00:03:24,500 --> 00:03:27,300
explicitly, but I'll take a quick look just to see if I see what they

86
00:03:27,300 --> 00:03:28,300
were talking about.

87
00:03:28,500 --> 00:03:29,800
We have debug time marker.

88
00:03:30,000 --> 00:03:32,100
Here we advance it.

89
00:03:34,400 --> 00:03:40,000
I don't see an off by one error in the recording of it.

90
00:03:40,000 --> 00:03:43,500
It looks like it's going to record one each time.

91
00:03:43,900 --> 00:03:46,200
So that's good.

92
00:03:46,600 --> 00:03:48,200
Basically, we go in here.

93
00:03:48,600 --> 00:03:49,100
We use.

94
00:03:49,100 --> 00:03:50,900
Whatever the current value of debug time.

95
00:03:50,900 --> 00:03:51,200
Marker.

96
00:03:51,200 --> 00:03:56,400
Index is we increment it by 1, which is fine in the case, where we hid

97
00:03:56,600 --> 00:03:57,100
the array.

98
00:03:57,100 --> 00:03:57,900
Ah, there we go.

99
00:03:58,000 --> 00:03:59,000
That's what we're looking for.

100
00:03:59,400 --> 00:03:59,900
This should actually

101
00:04:00,000 --> 00:04:05,400
They be like that that actually needs to be checking for whether we

102
00:04:05,400 --> 00:04:07,000
hit the actual end of the array.

103
00:04:07,300 --> 00:04:10,300
So that was thank you for that.

104
00:04:11,200 --> 00:04:13,800
That is again, one of those nasty little things.

105
00:04:13,800 --> 00:04:15,600
I don't usually make mistakes like that.

106
00:04:15,600 --> 00:04:18,100
I have to think that probably it is.

107
00:04:18,300 --> 00:04:21,600
I will admit my programming does degrade when I have to talk and

108
00:04:21,600 --> 00:04:22,700
explain stuff as we go.

109
00:04:22,700 --> 00:04:25,800
I think it takes up part of my brain and it's a little harder for me

110
00:04:25,800 --> 00:04:29,800
to write bug-free code, which at the end of the day is okay, because I

111
00:04:29,900 --> 00:04:32,600
I suspect a lot of people watching this stream are beginner C,

112
00:04:32,600 --> 00:04:34,300
programmers, or intermediate, C, programmers.

113
00:04:34,300 --> 00:04:37,500
Perhaps and so possibly, it's better for me to have to debug more

114
00:04:37,500 --> 00:04:39,700
stuff just so we can go through it.

115
00:04:39,900 --> 00:04:41,000
So, let's see there.

116
00:04:42,500 --> 00:04:46,500
That that would lead to a gap once in a while, but we weren't seeing

117
00:04:46,500 --> 00:04:47,200
too many gaps before.

118
00:04:47,200 --> 00:04:49,500
So it's looking pretty stable here.

119
00:04:49,500 --> 00:04:51,500
Anyway, this is roughly.

120
00:04:51,500 --> 00:04:53,700
What we were expecting to see before so we're good.

121
00:04:54,700 --> 00:04:58,100
Yeah, so all that is all good for now.

122
00:04:59,800 --> 00:05:02,300
Basically, what we need to do today is just decide how we're going to

123
00:05:02,300 --> 00:05:04,900
handle, what we're going to, what decisions were going to make based

124
00:05:04,900 --> 00:05:06,000
on the audio latency.

125
00:05:06,300 --> 00:05:09,700
So I'm going to go to the diagram for a minute and just talk about

126
00:05:09,800 --> 00:05:12,500
what we basically found yesterday.

127
00:05:13,300 --> 00:05:17,400
I should probably, you know, double mention I guess perhaps what that,

128
00:05:17,700 --> 00:05:20,900
what that bug was just in case, people weren't clear.

129
00:05:20,900 --> 00:05:25,800
So before I accidentally had typed that whenever the debug time marker

130
00:05:25,800 --> 00:05:29,100
index is greater than the array count.

131
00:05:29,100 --> 00:05:29,300
And

132
00:05:29,700 --> 00:05:30,600
See what happens is.

133
00:05:30,900 --> 00:05:32,800
Remember, these are zero based arrays.

134
00:05:32,800 --> 00:05:37,400
So if I look if I have an array, so if I've got debug time markers and

135
00:05:37,400 --> 00:05:40,900
I refer to the 0th element, that's the first entry in it because

136
00:05:40,900 --> 00:05:46,000
essentially what the syntax means in C and also it gets translated

137
00:05:46,000 --> 00:05:47,700
down to assembly relatively directly.

138
00:05:48,200 --> 00:05:52,000
Basically, what this means is I'm going to take the pointer to the

139
00:05:52,000 --> 00:05:54,500
beginning of the array which is debug time markers, and I'm going to

140
00:05:54,500 --> 00:05:56,800
add 0 to it, right?

141
00:05:57,100 --> 00:05:59,400
So what that means is the first one

142
00:05:59,600 --> 00:05:59,800
Is.

143
00:06:00,000 --> 00:06:05,300
Zero and the last one is actually whatever the count is minus 1,

144
00:06:05,500 --> 00:06:06,000
right?

145
00:06:06,100 --> 00:06:10,700
Because if we actually added all the count to it, we would be past.

146
00:06:10,700 --> 00:06:12,600
The last one will be pointing to One path.

147
00:06:12,600 --> 00:06:17,000
That's we actually pointing to one bite after the very last bite, that

148
00:06:17,000 --> 00:06:18,300
was reserved for this array.

149
00:06:19,000 --> 00:06:22,900
What that means is that when we get to the end, we're actually at

150
00:06:22,900 --> 00:06:24,700
array count when we get to the end.

151
00:06:24,800 --> 00:06:26,600
I don't really need this greater than here.

152
00:06:26,600 --> 00:06:27,700
It's not really necessary.

153
00:06:27,800 --> 00:06:28,100
Really?

154
00:06:28,100 --> 00:06:29,700
What we're talking about is when it's equal to

155
00:06:30,000 --> 00:06:30,500
array count.

156
00:06:30,500 --> 00:06:32,200
That's just kind of being paranoid and saying.

157
00:06:32,200 --> 00:06:35,400
Well, if someone came in here and muck with this value, in some really

158
00:06:35,400 --> 00:06:38,000
bad way, but of course, we'd still have a bug even if that happens.

159
00:06:38,000 --> 00:06:42,600
So really, we can do this and what we probably should do is say this.

160
00:06:42,800 --> 00:06:46,800
We should probably say, let's assert that we are never going to access

161
00:06:46,900 --> 00:06:51,300
outside that array here just so we can double check and make sure that

162
00:06:51,300 --> 00:06:52,000
we don't.

163
00:06:53,600 --> 00:06:55,200
So that's really all we're talking about.

164
00:06:55,300 --> 00:06:59,900
Nothing, but nothing really too too bizarre, but

165
00:07:00,000 --> 00:07:02,900
So, that was just a stupid bug and now it is fixed.

166
00:07:07,300 --> 00:07:08,300
And we can take a look.

167
00:07:09,400 --> 00:07:10,800
A little bit more, okay.

168
00:07:14,300 --> 00:07:17,000
So I'm going to go ahead and open up the infamous.

169
00:07:17,000 --> 00:07:20,200
Microsoft paint paint part number of Champions.

170
00:07:21,300 --> 00:07:25,000
And we talked a little bit about what we learned yesterday, much to

171
00:07:25,000 --> 00:07:27,100
our Chagrin, I should say.

172
00:07:27,300 --> 00:07:34,000
So we decided basically, to start off with trying to hit 30 frames a

173
00:07:34,000 --> 00:07:35,300
second, right?

174
00:07:35,400 --> 00:07:38,700
And 30 frames a second translates into, right?

175
00:07:38,700 --> 00:07:44,100
You've got 1,000 milliseconds, per frame for in one frame, right?

176
00:07:44,400 --> 00:07:45,100
That makes sense.

177
00:07:45,600 --> 00:07:51,000
And so, if we're doing 30 frames per second, 30 frames per second.

178
00:07:51,400 --> 00:07:51,900
Right.

179
00:07:52,400 --> 00:07:59,400
Basically, what we're expecting here is if we actually want to know

180
00:07:59,400 --> 00:08:04,400
how many milliseconds were actually going to have in every frame, we

181
00:08:04,400 --> 00:08:06,600
would divide by 30, right?

182
00:08:06,600 --> 00:08:10,900
And so what ends up happening is we're expecting to see about

183
00:08:10,900 --> 00:08:14,300
thirty-three point three milliseconds, every frame.

184
00:08:14,400 --> 00:08:19,000
That's how long we expect this to take 33.3.

185
00:08:19,100 --> 00:08:21,000
Well, it s like that, that makes

186
00:08:22,100 --> 00:08:30,300
Unfortunately, for us what we end up with is we end up with a, we have

187
00:08:30,300 --> 00:08:33,600
a sound card in the machine, that's going to Output our audio.

188
00:08:33,799 --> 00:08:37,200
And what we would like to be able to do is we'd like to be able to

189
00:08:37,400 --> 00:08:39,900
Output the audio and the video synchronously.

190
00:08:40,100 --> 00:08:44,800
So what we'd like to be able to do is inside any given frame boundary.

191
00:08:44,800 --> 00:08:46,300
We're Computing the next frame.

192
00:08:46,300 --> 00:08:50,800
So if we are in here, if we're somewhere in here, you know, basically

193
00:08:50,800 --> 00:08:51,200
we're showing

194
00:08:51,300 --> 00:08:51,500
Owing.

195
00:08:51,500 --> 00:08:52,200
Some frame.

196
00:08:52,200 --> 00:08:53,400
And this is the next frame.

197
00:08:53,700 --> 00:08:54,100
Basically.

198
00:08:54,100 --> 00:08:57,100
We're Computing a graphic, right?

199
00:08:57,500 --> 00:08:59,500
You know, we're Computing a little graphic here.

200
00:09:00,900 --> 00:09:04,600
We're trying to compute something that we're going to show right at

201
00:09:04,600 --> 00:09:05,200
this boundary.

202
00:09:05,200 --> 00:09:08,100
So this is where we're going to start displaying this to the monitor.

203
00:09:08,300 --> 00:09:11,500
So we're Computing it, you know, sometime in here and we're going to

204
00:09:11,500 --> 00:09:12,400
try and show it here.

205
00:09:12,400 --> 00:09:16,600
So ideally what we would like to do is also compute the sound that

206
00:09:16,600 --> 00:09:19,400
goes with this Frame and and have it line up.

207
00:09:19,400 --> 00:09:19,900
Exactly.

208
00:09:19,900 --> 00:09:21,200
That's what we would like to do.

209
00:09:21,800 --> 00:09:25,500
Unfortunately, what we found out is that the audio latency on this

210
00:09:25,500 --> 00:09:26,300
particular computer.

211
00:09:26,300 --> 00:09:30,100
Anyway, it's obviously going to vary when going through

212
00:09:30,500 --> 00:09:30,800
Sound.

213
00:09:30,800 --> 00:09:31,200
We don't know.

214
00:09:31,200 --> 00:09:32,400
It might, it might be lower.

215
00:09:32,400 --> 00:09:33,900
If we were to try X audio.

216
00:09:33,900 --> 00:09:35,000
We haven't tried that yet.

217
00:09:35,000 --> 00:09:38,500
But you know, we have no way of knowing until we actually try

218
00:09:38,800 --> 00:09:43,800
basically the audio latency is on the order of 33 milliseconds itself.

219
00:09:43,800 --> 00:09:46,400
We took a look at the difference between the What's called the play

220
00:09:46,400 --> 00:09:48,300
cursor, and the right cursor and direct sound.

221
00:09:48,600 --> 00:09:52,100
And we found that basically we could expect somewhere around that 30

222
00:09:52,100 --> 00:09:55,600
milliseconds of latency, which is our entire frame time, which means

223
00:09:55,600 --> 00:09:59,600
that assuming we're inside a frame and we're displaying something or

224
00:09:59,600 --> 00:10:00,300
Computing the next

225
00:10:00,400 --> 00:10:00,700
81.

226
00:10:00,900 --> 00:10:05,400
We can't expect our audio to show up until somewhere like in here

227
00:10:05,500 --> 00:10:06,400
basically, somewhere.

228
00:10:06,400 --> 00:10:09,100
That's like, wherever we start writing it, if we if we write the audio

229
00:10:09,100 --> 00:10:12,700
here, we couldn't expect it reasonably to show up at the earliest

230
00:10:12,700 --> 00:10:15,700
until somewhere out here, which means there's no way for us to

231
00:10:15,700 --> 00:10:18,900
actually compute the audio that goes with a particular frame and

232
00:10:18,900 --> 00:10:20,500
actually have it show up on that frame.

233
00:10:20,900 --> 00:10:23,200
That's just there's really nothing we can do about it.

234
00:10:23,200 --> 00:10:24,200
That's just the truth.

235
00:10:24,600 --> 00:10:28,800
So we've got a couple options here and I can tell you about what they

236
00:10:28,800 --> 00:10:29,100
are.

237
00:10:31,500 --> 00:10:32,600
But none of them are great.

238
00:10:33,600 --> 00:10:37,300
What we may have to do is just regress to a very basic sound Loop and

239
00:10:37,300 --> 00:10:40,600
just accept the latency and accept that it's never going to be

240
00:10:41,100 --> 00:10:41,800
synchronized.

241
00:10:41,800 --> 00:10:44,900
Or we can try to do something that is synchronized on a machine.

242
00:10:44,900 --> 00:10:45,700
That's faster.

243
00:10:45,900 --> 00:10:47,700
And we'll just test it somewhere there.

244
00:10:47,700 --> 00:10:51,300
And I don't mean faster like CPU, I mean less audio latency, but

245
00:10:51,300 --> 00:10:56,000
basically if you think about what happens inside of a frame, we do

246
00:10:56,000 --> 00:10:59,300
have some other options that we could try to pursue and I'll just

247
00:10:59,300 --> 00:11:02,500
discuss with they are briefly and it may lead to US changing the way

248
00:11:02,500 --> 00:11:03,300
we do audio in our

249
00:11:03,500 --> 00:11:04,600
From there, just a little bit.

250
00:11:05,300 --> 00:11:10,000
So basically what happens is, if we break down the time, there's

251
00:11:10,000 --> 00:11:12,200
there's inside of a given frame.

252
00:11:12,200 --> 00:11:15,500
Let's say we're taking this Frame and we want to kind of blow this out

253
00:11:15,600 --> 00:11:18,600
into what is actually happening inside the frame.

254
00:11:18,600 --> 00:11:20,400
So we're going to divide up this time.

255
00:11:20,700 --> 00:11:22,500
This is our 33 milliseconds.

256
00:11:22,500 --> 00:11:24,900
We're gonna divide up this time into the what we're actually doing.

257
00:11:25,100 --> 00:11:25,600
Right.

258
00:11:25,600 --> 00:11:29,200
What we're actually trying to do what we're going to do.

259
00:11:29,200 --> 00:11:31,400
Here is the first thing we're going to do.

260
00:11:31,400 --> 00:11:33,200
That doesn't really take a lot of time is

261
00:11:33,400 --> 00:11:34,900
are going to gather input, right?

262
00:11:34,900 --> 00:11:36,700
We're going to gather input.

263
00:11:37,300 --> 00:11:39,100
Okay, so we're going to get the keyboard.

264
00:11:39,100 --> 00:11:40,900
We're going to get the mouse if we wanted it.

265
00:11:40,900 --> 00:11:42,700
We're not really using that in the game.

266
00:11:42,700 --> 00:11:44,100
But we may use a few big purposes.

267
00:11:44,100 --> 00:11:46,300
We're going to get the keyboard, which we are using for the input with

268
00:11:46,300 --> 00:11:47,600
gamepads that sort of stuff.

269
00:11:48,300 --> 00:11:51,100
We're then going to update the game, right?

270
00:11:51,100 --> 00:11:51,900
So that's this.

271
00:11:52,400 --> 00:11:56,100
We then have some amount of time that we have to do update the game

272
00:11:56,800 --> 00:11:58,400
and make a render list.

273
00:11:58,400 --> 00:11:59,800
So, we have to update

274
00:12:00,300 --> 00:12:03,700
And and like do render prep basically, right?

275
00:12:03,700 --> 00:12:06,500
And you'll see what that is kind of as we go through.

276
00:12:06,500 --> 00:12:09,400
But we're going to update and do render prep in here.

277
00:12:09,500 --> 00:12:10,200
Right?

278
00:12:10,500 --> 00:12:14,000
Then we're going to actually have to do rendering, which is the

279
00:12:14,200 --> 00:12:15,100
massively.

280
00:12:15,400 --> 00:12:18,500
The majority, especially in this type of game where our physics, we're

281
00:12:18,500 --> 00:12:20,500
not doing like a 3D game.

282
00:12:20,600 --> 00:12:24,200
So our full 3d physics and collision detection, that sort of stuff

283
00:12:24,300 --> 00:12:26,400
would normally take more time.

284
00:12:26,500 --> 00:12:29,900
But since it's a 2-D game, will probably be able to keep that code.

285
00:12:30,200 --> 00:12:32,800
Pretty optimal when we write, if we write it properly.

286
00:12:33,200 --> 00:12:36,300
So we're not expecting this to grow that huge.

287
00:12:37,000 --> 00:12:40,500
It'll be complex because I'd like to make it for the compliment, but I

288
00:12:40,500 --> 00:12:41,000
don't know that.

289
00:12:41,000 --> 00:12:41,700
It'll grow that huge.

290
00:12:41,700 --> 00:12:45,000
It might, if we start doing some things, like fluid effects and stuff

291
00:12:45,000 --> 00:12:45,500
like that.

292
00:12:45,500 --> 00:12:46,900
So we can't guarantee that.

293
00:12:46,900 --> 00:12:50,700
But chances are especially during when we have the software renderer.

294
00:12:51,000 --> 00:12:54,200
This is going to be a huge amount of time when we start using GPU.

295
00:12:54,300 --> 00:12:57,500
It might go down quite a bit because gpus especially if it's a fast

296
00:12:57,500 --> 00:12:59,400
GPU will just romp through a 2-D game.

297
00:13:00,000 --> 00:13:01,200
But you know, you never know.

298
00:13:01,200 --> 00:13:05,600
We could run in a huge, we can run a 1920 by 1080 all the time and at

299
00:13:05,600 --> 00:13:08,000
full multi sample and stuff and suck downwards.

300
00:13:08,000 --> 00:13:09,100
You pu X stuff like that.

301
00:13:09,100 --> 00:13:12,600
So you never know, point being that takes a bunch of time.

302
00:13:12,800 --> 00:13:15,100
And then any time that's left over.

303
00:13:15,300 --> 00:13:16,600
We're just waiting, right?

304
00:13:16,600 --> 00:13:18,700
We're just going to wait until the flip, right?

305
00:13:18,700 --> 00:13:21,300
And then here, we actually display the frame, right?

306
00:13:21,500 --> 00:13:24,600
And this can actually be pipeline to some degree.

307
00:13:24,900 --> 00:13:29,400
So, depending on how deep the pipeline is a pipeline, is basically

308
00:13:29,400 --> 00:13:29,800
something.

309
00:13:30,000 --> 00:13:34,900
You're going to push more frames down, have frames.

310
00:13:34,900 --> 00:13:36,300
Be computed overlapped!

311
00:13:36,500 --> 00:13:41,000
So we could start right after we finish rendering this, or even if we

312
00:13:41,000 --> 00:13:45,000
were multi-threaded, we could start doing gather input and updating

313
00:13:45,000 --> 00:13:46,500
before we even do the rendering right?

314
00:13:46,500 --> 00:13:49,200
There's a bunch of ways we could overlap this, but if we're just doing

315
00:13:49,200 --> 00:13:52,300
it synchronously on One processor, no overlap.

316
00:13:52,500 --> 00:13:54,600
Then this is what that's going to look like and then we flip.

317
00:13:54,600 --> 00:13:54,800
Right?

318
00:13:54,800 --> 00:13:56,200
And certainly back in the old days.

319
00:13:56,200 --> 00:13:58,900
This is what it looked like because there weren't multi-core things.

320
00:13:58,900 --> 00:13:59,800
There wasn't a GP

321
00:14:00,000 --> 00:14:00,400
EU.

322
00:14:00,400 --> 00:14:02,900
So you were and you sir, you're just talking about this, this exact

323
00:14:02,900 --> 00:14:04,000
process gather?

324
00:14:04,000 --> 00:14:05,400
Input update, render.

325
00:14:05,400 --> 00:14:07,100
Wait flip right.

326
00:14:07,700 --> 00:14:07,900
Now.

327
00:14:07,900 --> 00:14:11,100
The question then is where do we insert sound in all of this?

328
00:14:11,300 --> 00:14:12,000
Right?

329
00:14:12,500 --> 00:14:15,800
The answer obviously would be if we are trying to minimize our audio

330
00:14:15,800 --> 00:14:17,900
latency and hit this time right here.

331
00:14:18,500 --> 00:14:21,000
Then if we have a 33, Ms.

332
00:14:21,200 --> 00:14:22,900
Sound delay.

333
00:14:22,900 --> 00:14:24,600
If we have something that's close to the frame thing.

334
00:14:24,800 --> 00:14:27,600
Then we'd actually have to start outputting the sound for the next

335
00:14:27,600 --> 00:14:28,100
frame.

336
00:14:28,100 --> 00:14:29,900
We have to Output it like back here.

337
00:14:30,300 --> 00:14:30,800
Right.

338
00:14:31,500 --> 00:14:32,200
Does that make sense?

339
00:14:35,800 --> 00:14:39,900
We'd actually have to Output the sound before we even gather the input

340
00:14:40,000 --> 00:14:44,000
for this Frame, which means that it's sort of somewhat impossible for

341
00:14:44,000 --> 00:14:44,800
us to do.

342
00:14:46,600 --> 00:14:50,200
But if you think about what was actually happening, if we though, if

343
00:14:50,200 --> 00:14:54,700
we go ahead and Tack on basically another frame to it and look at the

344
00:14:54,700 --> 00:14:55,400
same thing.

345
00:14:55,700 --> 00:14:59,300
So, basically just copy what we just drew, you know, over here.

346
00:14:59,500 --> 00:14:59,800
What?

347
00:15:00,000 --> 00:15:01,100
This period back here.

348
00:15:01,100 --> 00:15:02,500
That was that was before the thing.

349
00:15:02,500 --> 00:15:04,600
Well, this was the wait, period, right?

350
00:15:04,700 --> 00:15:08,000
And then before, that was the rendering period, right?

351
00:15:08,200 --> 00:15:12,800
So actually all the way back to almost the beginning of this other

352
00:15:12,800 --> 00:15:13,100
frame.

353
00:15:13,100 --> 00:15:16,900
Let's say this right here is only taking 10 milliseconds and this

354
00:15:16,900 --> 00:15:20,100
right here was taking 23 milliseconds, right?

355
00:15:20,200 --> 00:15:23,300
So we divide the frame time up in basically, The Gather input and that

356
00:15:23,300 --> 00:15:27,300
update step is maybe only 10 milliseconds and then we spent a lot of

357
00:15:27,300 --> 00:15:29,800
time weighted rendering and waiting process.

358
00:15:30,000 --> 00:15:31,000
Probably mostly rendering.

359
00:15:31,000 --> 00:15:33,600
Well, that means all the way back here.

360
00:15:33,600 --> 00:15:36,000
If we look at what the time was it right?

361
00:15:36,000 --> 00:15:39,800
When we actually after we did the update where we could have known,

362
00:15:39,800 --> 00:15:44,300
what the sound was going to be right for the for the next frame.

363
00:15:44,300 --> 00:15:46,600
If we go all the way back here, and look at that.

364
00:15:46,600 --> 00:15:52,300
If we were to sort of output the sound right here on the previous

365
00:15:52,300 --> 00:15:56,000
frame, we could have been only one frame behind, right?

366
00:15:56,000 --> 00:15:57,400
If we did everything, exactly right.

367
00:15:57,400 --> 00:15:59,700
We could have been only one frame behind and

368
00:15:59,900 --> 00:16:00,200
More.

369
00:16:00,200 --> 00:16:06,400
If we actually take this weight period, or if we take this render

370
00:16:06,400 --> 00:16:10,000
period and overlapped and started the update for the next frame here,

371
00:16:10,000 --> 00:16:10,800
right?

372
00:16:10,800 --> 00:16:12,900
So, this is where the gather input happens.

373
00:16:12,900 --> 00:16:16,500
So we basically overlap, The Gather input and update for the next

374
00:16:16,500 --> 00:16:18,400
frame with the rendering of the previous frame.

375
00:16:18,400 --> 00:16:23,300
If we actually overlap those on, you know, to course, we could

376
00:16:23,300 --> 00:16:29,100
actually hit the constraint of being, you know, 40 milliseconds or

377
00:16:29,100 --> 00:16:29,700
something ahead.

378
00:16:29,900 --> 00:16:33,400
Ahead of where we wanted to write that audio and actually get our

379
00:16:33,400 --> 00:16:36,500
audio synced, but there's a cost.

380
00:16:36,700 --> 00:16:40,800
The cost is now we have pushed input Gathering back a little bit

381
00:16:40,800 --> 00:16:41,200
further.

382
00:16:41,200 --> 00:16:46,900
So we introduced basically 23 milliseconds, somewhere around at

383
00:16:46,900 --> 00:16:50,100
maximum 23 milliseconds of input lag.

384
00:16:51,300 --> 00:16:53,100
Right, that would be the cost.

385
00:16:55,100 --> 00:16:57,800
So, if you think about that, is that a good trade?

386
00:16:57,800 --> 00:16:59,800
Probably not for a game.

387
00:16:59,800 --> 00:17:01,800
Like this one's audio sync.

388
00:17:03,000 --> 00:17:06,000
Is not that important because we're not.

389
00:17:06,099 --> 00:17:08,900
None of the gameplay really revolves around.

390
00:17:08,900 --> 00:17:10,400
Hitting a sound directly.

391
00:17:10,500 --> 00:17:13,700
We will probably have audio cues in the game that try to help the

392
00:17:13,700 --> 00:17:18,099
player understand what's going on, recharge times, whatever enemy

393
00:17:18,099 --> 00:17:19,500
attacks, that sort of thing.

394
00:17:22,300 --> 00:17:25,400
So, you know, audio is important in every game.

395
00:17:26,099 --> 00:17:28,099
I certainly don't want to suggest that.

396
00:17:28,099 --> 00:17:33,900
It isn't because it very much is, but how tightly the audio sync is as

397
00:17:33,900 --> 00:17:37,400
a priority versus how tightly the input is synced.

398
00:17:37,600 --> 00:17:38,300
In this game.

399
00:17:38,300 --> 00:17:41,800
I'm going to say that the input lag would be way worse if we did that.

400
00:17:43,000 --> 00:17:47,800
So I think we really want to push our gather input as far forwards as

401
00:17:47,800 --> 00:17:50,300
we can and we don't want to introduce that extra.

402
00:17:50,500 --> 00:17:51,000
Lag.

403
00:17:51,100 --> 00:17:57,000
So given that we don't really have any options, realistically given

404
00:17:57,000 --> 00:17:59,700
that for hitting our audio sync on a

405
00:18:00,000 --> 00:18:03,600
Frame, what I'm going to suggest is that I backpedal a little bit from

406
00:18:03,600 --> 00:18:07,100
what I was hoping to do, which is keep the audio and video synced to

407
00:18:07,100 --> 00:18:11,600
frames and basically say, all right, we're gonna go fall back to a

408
00:18:11,600 --> 00:18:12,800
little bit stupider.

409
00:18:13,000 --> 00:18:13,600
Right?

410
00:18:14,000 --> 00:18:19,100
And and what we're going to do is just say, all right, we're Computing

411
00:18:19,100 --> 00:18:23,000
our stuff and somewhere in here after the update and input has

412
00:18:23,000 --> 00:18:24,800
happened somewhere in here.

413
00:18:24,800 --> 00:18:27,900
We're going to try to right the audio and we're just going to accept

414
00:18:27,900 --> 00:18:29,900
the fact that it's not going to be on a frame.

415
00:18:30,000 --> 00:18:33,000
Hurry, it's going to be basically somewhere in the middle of next

416
00:18:33,000 --> 00:18:36,300
frame and we're going to accept the fact that there's basically 15

417
00:18:36,300 --> 00:18:41,400
milliseconds or so on this card of audio latency, and it's going to

418
00:18:41,400 --> 00:18:42,400
write right into the middle.

419
00:18:42,600 --> 00:18:44,300
We will lie to the game.

420
00:18:44,800 --> 00:18:48,800
So we will tell the game that it is, outputting this frames audio.

421
00:18:48,900 --> 00:18:52,000
So it doesn't the game doesn't have to try and account for that.

422
00:18:52,000 --> 00:18:52,300
15.

423
00:18:52,300 --> 00:18:53,300
Most I cancel a gig.

424
00:18:53,400 --> 00:18:57,000
We won't complicate the game's code by forcing it to do that.

425
00:18:57,200 --> 00:18:59,500
But what we will do, is Will basically

426
00:19:00,900 --> 00:19:04,200
Well, basically say all right, you go ahead and output for the for the

427
00:19:04,200 --> 00:19:04,600
frame.

428
00:19:04,700 --> 00:19:07,200
You're actually going to be lagged by a little bit and this is kind of

429
00:19:07,200 --> 00:19:10,300
a very standard audio Loop and it's unsynchronized.

430
00:19:10,300 --> 00:19:13,400
It's a bit sloppy, but it's better than the alternative, which is

431
00:19:13,400 --> 00:19:14,900
pushing it out to this Frame.

432
00:19:15,000 --> 00:19:19,700
And having one whole frame of lag or buffering a whole frame ahead and

433
00:19:19,700 --> 00:19:21,000
introducing input lag.

434
00:19:21,800 --> 00:19:24,400
So what I'm going to try to do is basically right.

435
00:19:24,400 --> 00:19:28,900
It go change our audio code so that, that is what we do.

436
00:19:28,900 --> 00:19:29,800
In the case, where the

437
00:19:29,900 --> 00:19:32,500
A audio latency is greater than what we think we can achieve.

438
00:19:32,500 --> 00:19:34,500
In the case where it was less.

439
00:19:34,500 --> 00:19:37,600
Like let's say we look and the audio cards got like five milliseconds

440
00:19:37,600 --> 00:19:37,800
of latency.

441
00:19:37,800 --> 00:19:38,800
It's like awesome.

442
00:19:38,800 --> 00:19:42,500
Maybe we're on a console or something and we can get that then what we

443
00:19:42,500 --> 00:19:46,800
will do in that case is we will try to make it so that it is offset.

444
00:19:46,800 --> 00:19:51,100
And basically we will write the audio, we will write the audio with

445
00:19:51,100 --> 00:19:51,800
some buffer.

446
00:19:51,800 --> 00:19:54,500
So that the audio for a frame, does line up with the frame.

447
00:19:54,500 --> 00:19:58,300
So basically we're going to have basically a conditional sort of

448
00:19:58,300 --> 00:19:59,800
output there will basically.

449
00:20:00,000 --> 00:20:07,100
Be one path for latent and one path for non latent audio and they

450
00:20:07,100 --> 00:20:08,300
won't really be paths.

451
00:20:08,300 --> 00:20:13,400
They'll just be our computation about where we're trying to hit will

452
00:20:13,400 --> 00:20:16,100
basically be sort of thresholded.

453
00:20:16,100 --> 00:20:21,100
So so when we look at that lag, assuming that it's more than the than

454
00:20:21,100 --> 00:20:24,900
the get them the, you know, some conservative estimate about where we

455
00:20:24,900 --> 00:20:27,200
can update our audio.

456
00:20:27,200 --> 00:20:29,800
Let's say that, we assume that we're going to be able to update our

457
00:20:29,900 --> 00:20:32,800
Our audio, you know, 16 milliseconds into the frame or something

458
00:20:32,800 --> 00:20:36,000
halfway through, then we're going to say, well, if that difference

459
00:20:36,000 --> 00:20:41,100
here, if the if the audio latency is 16 milliseconds or more, then

460
00:20:41,100 --> 00:20:44,300
we're basically going to have to just be writing as soon as we can if

461
00:20:44,300 --> 00:20:45,400
it's less than that.

462
00:20:45,500 --> 00:20:50,600
Let's push it up to that 60 milliseconds to try and and keep it right

463
00:20:50,600 --> 00:20:55,000
about here and we can even measure what our average update time is in

464
00:20:55,000 --> 00:20:59,300
here to try and keep that as close as possible if that makes sense.

465
00:21:00,300 --> 00:21:04,400
So yeah, we can do we can do a bunch of stuff like that.

466
00:21:05,000 --> 00:21:05,400
Do try.

467
00:21:05,600 --> 00:21:08,000
We'll try to do the best we can and we'll go from there.

468
00:21:10,400 --> 00:21:14,400
So that's about all we've got and I'm going to go ahead and do that.

469
00:21:14,500 --> 00:21:17,300
I think I mentioned on Twitter for those you're following.

470
00:21:17,600 --> 00:21:19,500
I feel like today maybe a long session.

471
00:21:22,100 --> 00:21:23,200
I'm going to go ahead and do this.

472
00:21:24,300 --> 00:21:26,800
It'll take us a little while to do because this kind of code, is

473
00:21:26,800 --> 00:21:27,700
always very finicky.

474
00:21:27,700 --> 00:21:28,700
Very error-prone.

475
00:21:28,800 --> 00:21:32,100
You saw how many mistakes are already made in it and will make more,

476
00:21:32,100 --> 00:21:32,500
I'm sure.

477
00:21:32,500 --> 00:21:34,800
So it's going to take us a while to kind of go through that.

478
00:21:35,300 --> 00:21:38,700
But if we finish that in a reasonable amount of time, I made double

479
00:21:38,700 --> 00:21:43,400
the length of this stream and basically due to h plus the Q&A instead

480
00:21:43,400 --> 00:21:46,200
of one hour, plus the Q and A because there's some other stuff that I

481
00:21:46,200 --> 00:21:49,000
might want to do and I feel like it's a Friday.

482
00:21:49,300 --> 00:21:50,200
It's the middle of the day.

483
00:21:50,200 --> 00:21:51,700
I don't have any particular time.

484
00:21:51,900 --> 00:21:53,600
I might just do a stream.

485
00:21:53,600 --> 00:21:55,600
That's a little longer will see.

486
00:21:55,800 --> 00:21:57,200
We will see where we get.

487
00:21:58,300 --> 00:22:04,100
Alrighty, so basically what we've got here is we have said that we are

488
00:22:04,100 --> 00:22:06,700
going to have frames of audio latency and I'm basically going to get

489
00:22:06,700 --> 00:22:08,000
rid of that notion all together.

490
00:22:08,300 --> 00:22:10,300
So I'm going to get rid of frames of audio latency.

491
00:22:10,300 --> 00:22:12,900
We've got a monitor refresh rate.

492
00:22:14,100 --> 00:22:16,200
We've got our game update hurts here.

493
00:22:16,800 --> 00:22:20,100
And basically, what we, what we're going to do eventually is change

494
00:22:20,100 --> 00:22:21,800
these into.

495
00:22:22,100 --> 00:22:22,900
Let's take a look at these.

496
00:22:22,900 --> 00:22:24,800
We've got our two to do is hear what we want to do.

497
00:22:24,800 --> 00:22:28,000
Eventually is change those to run bike to query window.

498
00:22:28,100 --> 00:22:30,800
For the refresh rate, which we think we can sort of do and just assume

499
00:22:30,800 --> 00:22:33,100
60 in the case where we don't get it.

500
00:22:33,300 --> 00:22:37,100
But anyway, so what we're going to do here is actually delete this to

501
00:22:37,100 --> 00:22:37,300
do.

502
00:22:37,300 --> 00:22:39,500
That says let's think about running non frame contacts for audio

503
00:22:39,500 --> 00:22:39,900
latency.

504
00:22:39,900 --> 00:22:43,300
That is what I just said, we will decide to do and let's use the right

505
00:22:43,300 --> 00:22:44,600
curse or Delta for the play cursor.

506
00:22:44,600 --> 00:22:45,100
Just a Target.

507
00:22:45,100 --> 00:22:45,700
Audio latency.

508
00:22:45,700 --> 00:22:47,900
That is also what we were going to do.

509
00:22:48,300 --> 00:22:52,600
So basically what we're going to do is every time we take a look at at

510
00:22:52,600 --> 00:22:56,400
our get current position right now, so we come in here and we take a

511
00:22:56,400 --> 00:22:57,900
look at get current position to play.

512
00:22:58,000 --> 00:22:59,100
Sr and the right cursor.

513
00:22:59,200 --> 00:23:03,200
The difference between those two things is sort of the minimum audio

514
00:23:03,200 --> 00:23:05,800
latency we could ever expect to have right.

515
00:23:06,700 --> 00:23:09,700
The right cursor says where it's safe for us to right to right now,

516
00:23:09,900 --> 00:23:13,300
the play cursor says, where the audio is playing as far as we know.

517
00:23:13,500 --> 00:23:17,000
So, if we look at those two, the number of samples in between them is

518
00:23:17,000 --> 00:23:19,400
the lowest audio latency.

519
00:23:19,400 --> 00:23:23,600
We can realistically expect to to count on Direct sound giving us in

520
00:23:23,600 --> 00:23:25,900
terms of what it's actually playing, right?

521
00:23:28,200 --> 00:23:30,000
So we've sort of got a value here.

522
00:23:31,600 --> 00:23:32,200
Right.

523
00:23:33,200 --> 00:23:36,300
We've got a right cursor - play cursor.

524
00:23:36,500 --> 00:23:37,000
Excuse me.

525
00:23:45,100 --> 00:23:49,500
We've got a value here, which is basically B between mmm.

526
00:23:51,100 --> 00:23:54,400
we're going to do right cursor - play cursor and that will sort of

527
00:23:54,400 --> 00:23:59,800
give us what we expect our our, our

528
00:24:00,100 --> 00:24:00,900
Our Delta B.

529
00:24:00,900 --> 00:24:03,500
Now, we've got a problem, which is that again.

530
00:24:03,500 --> 00:24:04,900
This is a circular buffer.

531
00:24:05,000 --> 00:24:05,600
Right?

532
00:24:05,600 --> 00:24:09,200
So since this is circularbuffer, whenever right cursor, actually

533
00:24:09,200 --> 00:24:11,400
happens to be ahead of play cursor in the buffer.

534
00:24:11,700 --> 00:24:12,700
This would work.

535
00:24:12,800 --> 00:24:15,900
But unfortunately, if the right Chris are actually happens to be

536
00:24:15,900 --> 00:24:20,200
behind the play cursor, that means that the it is the right cursor has

537
00:24:20,200 --> 00:24:22,500
wrapped around the buffer and come back to the beginning, but the play

538
00:24:22,500 --> 00:24:23,800
cursor hasn't yet.

539
00:24:24,200 --> 00:24:26,400
Then this would not be correct.

540
00:24:26,400 --> 00:24:26,900
Right.

541
00:24:27,000 --> 00:24:29,900
So what we need to do is we need to account for that and

542
00:24:30,000 --> 00:24:34,200
And of say the blights between cursors is going to have an if in it

543
00:24:34,300 --> 00:24:34,800
right.

544
00:24:34,800 --> 00:24:39,400
It's going to be one or the other of these two things and we have to

545
00:24:39,400 --> 00:24:41,000
compute them separately.

546
00:24:41,000 --> 00:24:46,800
So basically we have to say well actually we don't even have to really

547
00:24:46,800 --> 00:24:47,000
do it.

548
00:24:47,000 --> 00:24:47,500
That way.

549
00:24:47,500 --> 00:24:52,000
We can be a little we can be a little fancier so we can do something

550
00:24:52,000 --> 00:24:57,300
like d word unwrapped, right cursor.

551
00:24:57,300 --> 00:24:59,600
If you will, we can basically say

552
00:25:00,000 --> 00:25:00,900
The unwrapped right?

553
00:25:00,900 --> 00:25:03,200
Cursor is equal to the right cursor.

554
00:25:03,600 --> 00:25:07,200
But if for some reason, the right cursor is less than the play cursor,

555
00:25:07,300 --> 00:25:07,900
right?

556
00:25:08,200 --> 00:25:11,500
Then we just do the and I'll just say unwrapped here.

557
00:25:11,800 --> 00:25:19,300
Then we just add the size of the buffer, and so buffer sound buffer.

558
00:25:20,200 --> 00:25:23,600
There's some parameter, we did that was like, the total size, right?

559
00:25:24,400 --> 00:25:27,400
So, basically all I'm saying, here is like, okay, we'll take, we'll

560
00:25:27,400 --> 00:25:28,300
get the right cursor.

561
00:25:28,300 --> 00:25:29,800
We know that we can just subtract.

562
00:25:29,900 --> 00:25:34,400
T', wherever wherever the right cursor is from the play cursor because

563
00:25:34,400 --> 00:25:35,500
it's always going to be after it.

564
00:25:35,500 --> 00:25:38,800
But in the case, where the right cursor has wrapped around so that

565
00:25:38,800 --> 00:25:42,300
it's now before the play cursor technically will just add in the

566
00:25:42,300 --> 00:25:45,600
buffer size, which is where it would be if the buffer wasn't circular

567
00:25:45,700 --> 00:25:46,300
right?

568
00:25:46,400 --> 00:25:50,500
And we'll subtract those two and that should always give us a constant

569
00:25:50,500 --> 00:25:51,100
value.

570
00:25:51,100 --> 00:25:55,100
And so that's going to be basically a Delta that's going to be our

571
00:25:55,100 --> 00:25:57,400
latency, essentially our latency and B.

572
00:25:57,700 --> 00:25:59,800
So B between cursors, right?

573
00:26:00,000 --> 00:26:02,600
Our, I'm going to go ahead and compute that and just guarantee that,

574
00:26:02,600 --> 00:26:03,200
that's true.

575
00:26:03,400 --> 00:26:05,800
We're going to go ahead and change this value in a second.

576
00:26:05,800 --> 00:26:07,300
So the latency sample count.

577
00:26:07,700 --> 00:26:09,200
We're going to go ahead and neuter.

578
00:26:09,200 --> 00:26:10,200
So, in the second here.

579
00:26:10,200 --> 00:26:15,500
We're going to say, get rid of latency sample count because we are not

580
00:26:15,500 --> 00:26:16,400
going to use that anymore.

581
00:26:17,000 --> 00:26:19,900
And what is, what did I do?

582
00:26:19,900 --> 00:26:22,600
Here is not a member of game.

583
00:26:22,600 --> 00:26:23,300
Oh, right.

584
00:26:23,400 --> 00:26:24,500
Well, where's our?

585
00:26:25,700 --> 00:26:29,800
We need our actual, our actual sound output.

586
00:26:29,900 --> 00:26:34,000
Put ER, there we go, too many names for too many buffers.

587
00:26:34,500 --> 00:26:36,800
And so I just want to take a look at that for a second.

588
00:26:36,800 --> 00:26:37,400
There we go.

589
00:26:38,100 --> 00:26:39,200
I want to take a look at that.

590
00:26:39,200 --> 00:26:40,400
And here's our Delta.

591
00:26:40,600 --> 00:26:42,500
So that's looking nice and stable.

592
00:26:42,800 --> 00:26:46,000
You can kind of see even we can we can spot check the case that I was

593
00:26:46,000 --> 00:26:46,700
concerned about.

594
00:26:46,700 --> 00:26:48,700
We can see the play cursor in the right cursor.

595
00:26:49,100 --> 00:26:52,700
Here's the case that I was trying to handle the right cursor is behind

596
00:26:52,700 --> 00:26:53,500
the play cursor here.

597
00:26:53,500 --> 00:26:57,000
So if we had subtracted, these we would have gotten a number that we

598
00:26:57,000 --> 00:26:58,100
were unhappy with.

599
00:26:58,300 --> 00:26:59,600
So, basically, we've

600
00:27:00,000 --> 00:27:00,800
Fixed that.

601
00:27:01,100 --> 00:27:05,400
And we're constantly Computing, the Delta between them now that 5760

602
00:27:05,400 --> 00:27:08,100
number that is essentially our audio latency in B.

603
00:27:12,300 --> 00:27:12,900
There we go.

604
00:27:15,300 --> 00:27:17,400
We are basic Computing, our audio latency and B there.

605
00:27:18,200 --> 00:27:20,300
And that is all we needed to compute.

606
00:27:20,400 --> 00:27:20,600
Now.

607
00:27:20,600 --> 00:27:21,400
There's a variety of ways.

608
00:27:21,400 --> 00:27:21,700
We could have.

609
00:27:21,700 --> 00:27:22,200
Computed that.

610
00:27:22,200 --> 00:27:25,400
That's just the one that I thought was, was the most easy to

611
00:27:25,400 --> 00:27:28,300
understand the, easiest to look at the code.

612
00:27:28,300 --> 00:27:29,600
So I think that's a good one.

613
00:27:31,600 --> 00:27:40,000
And from there, we should now be able to say that that value in terms

614
00:27:40,000 --> 00:27:40,700
of samples.

615
00:27:40,700 --> 00:27:43,900
That's sort of going to tell us basically a number.

616
00:27:43,900 --> 00:27:47,600
We can use to reason about our audio latency.

617
00:27:47,600 --> 00:27:52,800
So in some sense you could think of, we now have our audio latency s,

618
00:27:53,100 --> 00:27:53,600
right?

619
00:27:53,600 --> 00:27:56,500
Is going to be however, many bites there were between cursors.

620
00:27:56,500 --> 00:27:59,800
That's the B /, the bytes per se.

621
00:28:00,300 --> 00:28:02,700
Is how many samples, right?

622
00:28:05,300 --> 00:28:09,300
The how many samples there are in our audio latency, right?

623
00:28:09,300 --> 00:28:10,600
How many samples of audio latency?

624
00:28:11,000 --> 00:28:16,300
We also have our samples per second right in our samples per second.

625
00:28:18,600 --> 00:28:22,200
Basically, is a divisor that tells us if we take samples and / samples

626
00:28:22,200 --> 00:28:22,700
per second.

627
00:28:22,700 --> 00:28:25,100
We're going to end up with s, which is exactly what we want.

628
00:28:25,100 --> 00:28:26,500
Again, dimensional analysis.

629
00:28:26,900 --> 00:28:29,600
You always want to think about that for a second.

630
00:28:29,900 --> 00:28:32,600
If you, if you know what I'm talking about.

631
00:28:32,700 --> 00:28:34,900
Basically, this is this, is that dimension.

632
00:28:35,100 --> 00:28:36,000
This is coming in again.

633
00:28:36,700 --> 00:28:38,400
I I do it in my head a lot.

634
00:28:38,400 --> 00:28:40,800
So it's hard for me to always remember that everyone.

635
00:28:40,800 --> 00:28:42,200
I'm not might not be familiar with it.

636
00:28:42,200 --> 00:28:45,000
But if you look at what we did there were basically saying B between

637
00:28:45,000 --> 00:28:45,700
cursors.

638
00:28:46,500 --> 00:28:51,700
So we basically have a value that's in B, right first.

639
00:28:51,800 --> 00:28:54,100
So that's this value right here B between cursors.

640
00:28:54,200 --> 00:28:58,100
We're dividing by sound output bytes per sample, right?

641
00:28:58,300 --> 00:28:59,500
So bytes per sample.

642
00:28:59,500 --> 00:29:00,700
We're dividing.

643
00:29:02,000 --> 00:29:07,600
By bytes per sample and dividing by something over something else is

644
00:29:07,600 --> 00:29:10,700
the same as multiplying by by swapping those two, right?

645
00:29:10,700 --> 00:29:15,700
So we're dividing because we basically want to X instead of bytes per

646
00:29:15,700 --> 00:29:16,300
sample.

647
00:29:16,300 --> 00:29:20,200
We want to multiply by sample over B, right?

648
00:29:20,400 --> 00:29:24,300
That cancels, the B value and leaves us with samples, which is what we

649
00:29:24,300 --> 00:29:25,900
want in the top.

650
00:29:25,900 --> 00:29:30,600
We then are dividing dividing by samples, right?

651
00:29:31,400 --> 00:29:31,900
Second.

652
00:29:32,900 --> 00:29:34,500
And again, that just swap these two.

653
00:29:34,500 --> 00:29:37,800
So that s over samples, right?

654
00:29:37,900 --> 00:29:40,400
And this becomes a multiply right that swaps.

655
00:29:40,400 --> 00:29:42,700
Those to cross out the samples.

656
00:29:42,700 --> 00:29:45,000
And we're just left with s, right?

657
00:29:45,000 --> 00:29:47,600
And S is the what we were trying to compute.

658
00:29:47,600 --> 00:29:50,100
So, again, just dimensional analysis, really simple.

659
00:29:50,100 --> 00:29:52,900
It's a way to work out the ratios in your head until you're just do

660
00:29:52,900 --> 00:29:54,400
them by wrote which I tend to do.

661
00:29:55,400 --> 00:29:57,300
So anyway, that's that's all that is, right.

662
00:29:57,300 --> 00:29:59,700
So B between cursors, / B per sample.

663
00:30:00,000 --> 00:30:03,600
Is the number of actual samples and then divided by the samples per

664
00:30:03,600 --> 00:30:04,200
second.

665
00:30:04,300 --> 00:30:06,300
We could also have if we wanted to save ourselves.

666
00:30:06,300 --> 00:30:06,700
Some time.

667
00:30:06,700 --> 00:30:10,400
We could have put bytes per second in there, which is probably a good

668
00:30:10,400 --> 00:30:10,800
idea.

669
00:30:10,800 --> 00:30:14,300
In fact, you know, maybe when we're doing some cleanup here, to do,

670
00:30:14,300 --> 00:30:22,500
Casey math, gets simpler if we add a b/s field because we could just

671
00:30:22,500 --> 00:30:25,900
use that which has this sort of baked into it.

672
00:30:26,400 --> 00:30:29,800
So anyway, something to think about, but that will basically give us

673
00:30:30,000 --> 00:30:37,000
Our latency in float, but remember it won't know to convert to float.

674
00:30:37,200 --> 00:30:38,600
It'll, it'll look at all these.

675
00:30:38,600 --> 00:30:39,700
It'll look at these three.

676
00:30:39,800 --> 00:30:41,700
See Will and say, they're all integer.

677
00:30:41,700 --> 00:30:43,700
So this would do the divide an integer.

678
00:30:43,700 --> 00:30:46,900
Now that first divide we can do in terms of I'd if we wanted to

679
00:30:47,200 --> 00:30:51,000
because it's going to be an even multiple b b between curses and even

680
00:30:51,000 --> 00:30:53,600
multiple, but I don't really need it to do that.

681
00:30:53,600 --> 00:30:55,900
I'm going to, I'm going to tell it to do everything in float anyway,

682
00:30:56,100 --> 00:30:59,200
so I'm just going to cast those up to floats because we want the final

683
00:30:59,200 --> 00:30:59,600
thing.

684
00:31:00,000 --> 00:31:00,700
In floats.

685
00:31:00,900 --> 00:31:08,400
So at that point we actually do have our value in s so I could print

686
00:31:08,400 --> 00:31:09,200
out that as well.

687
00:31:09,200 --> 00:31:13,300
What the Delta is in seconds and just you know, why not audio?

688
00:31:13,300 --> 00:31:16,700
Latency seconds just to make sure you can never really make be too

689
00:31:16,700 --> 00:31:19,700
sure with the number of crazy things that happens in programming.

690
00:31:20,100 --> 00:31:21,100
You can never be too sure.

691
00:31:21,100 --> 00:31:21,800
And so there you go.

692
00:31:21,800 --> 00:31:22,400
You can see that.

693
00:31:22,400 --> 00:31:25,500
That's exactly the number that we were suspecting right around 33

694
00:31:25,500 --> 00:31:27,700
milliseconds, which is what that number is.

695
00:31:27,900 --> 00:31:29,200
So we're basically looking at

696
00:31:29,900 --> 00:31:32,300
30 milliseconds slightly less than the frame time.

697
00:31:32,400 --> 00:31:33,900
Is is what we've got.

698
00:31:34,700 --> 00:31:39,100
So that is our audio latency s, that is the best that we're ever going

699
00:31:39,100 --> 00:31:39,700
to be able to do.

700
00:31:42,000 --> 00:31:43,400
So, looking at that value.

701
00:31:44,400 --> 00:31:50,200
Basically, what we want to say is, when we do our computation of what

702
00:31:50,200 --> 00:31:54,100
to write, we're going to take a look at this audio, s audio latency, s

703
00:31:54,100 --> 00:31:57,200
value, and are in fact, B between cursor.

704
00:31:57,200 --> 00:32:01,600
This should be audio latency B, really, right?

705
00:32:01,800 --> 00:32:06,100
So, audio latency B, and that basically is going to be right here.

706
00:32:06,300 --> 00:32:09,100
So, what I'm going to do is, I'm just going to save these values for

707
00:32:09,100 --> 00:32:09,300
now.

708
00:32:09,300 --> 00:32:12,100
These are going to be actual values that go with our sound is valid

709
00:32:12,100 --> 00:32:14,100
thing, and maybe now might be a good time to

710
00:32:14,200 --> 00:32:17,700
Are pulling these out, but I'm basically going to put those in there

711
00:32:17,700 --> 00:32:18,500
like that.

712
00:32:18,800 --> 00:32:20,900
Audio latency s where it's audio latency.

713
00:32:20,900 --> 00:32:21,300
S.

714
00:32:21,300 --> 00:32:21,900
There we go.

715
00:32:23,000 --> 00:32:26,000
So I'm going to compute those so that we can basically use those later

716
00:32:26,000 --> 00:32:28,700
when the sound is valid and we're Computing where we're going to write

717
00:32:28,700 --> 00:32:32,200
to because you remember we kind of did a thing where we said that we

718
00:32:32,200 --> 00:32:35,900
wanted to make the sound be valid sort of the next time around.

719
00:32:36,000 --> 00:32:38,400
So here's our sound is valid again.

720
00:32:39,800 --> 00:32:45,000
Flights between cursors, body Alexy, B.

721
00:32:45,000 --> 00:32:45,500
There we go.

722
00:32:45,900 --> 00:32:46,500
All right.

723
00:32:47,000 --> 00:32:49,900
So basically, that's that's just going to leave those values up here

724
00:32:49,900 --> 00:32:54,400
for us to be able to reason about when we go to actually output the

725
00:32:54,400 --> 00:32:55,100
sound.

726
00:32:55,100 --> 00:32:59,400
So, let's take a look here at where that happens.

727
00:32:59,400 --> 00:32:59,800
So that

728
00:33:00,000 --> 00:33:00,800
It's right here.

729
00:33:01,200 --> 00:33:04,500
Basically, what we were doing is we're Computing where we want to

730
00:33:04,500 --> 00:33:09,200
generally end up in terms of where to write to, you know, we're sort

731
00:33:09,200 --> 00:33:10,700
of in the, the running sample index.

732
00:33:10,700 --> 00:33:12,200
We want to write to.

733
00:33:12,200 --> 00:33:15,100
So, we know that we've set, our running sample index.

734
00:33:15,100 --> 00:33:18,700
If we look, when we first start up, we're going to set that to be

735
00:33:18,700 --> 00:33:20,100
equal to wherever the right cursor.

736
00:33:20,100 --> 00:33:23,200
Was that is where our running sample index is.

737
00:33:23,300 --> 00:33:29,300
And I'd also say, for math purposes to do should running sample index

738
00:33:29,300 --> 00:33:29,800
be

739
00:33:30,000 --> 00:33:33,200
Invites as well because a lot of times we're mapping in and out of

740
00:33:33,200 --> 00:33:35,900
samples, but I wonder if that's really all that useful because

741
00:33:36,100 --> 00:33:40,000
remember, the running sample index is really only used up here for

742
00:33:40,000 --> 00:33:41,200
this particular thing.

743
00:33:41,600 --> 00:33:44,900
And we could just go ahead and keep that in B, which might be a little

744
00:33:44,900 --> 00:33:47,900
smarter, save some math and possibly reduce some errors.

745
00:33:48,300 --> 00:33:50,800
So that's all we're doing there.

746
00:33:50,800 --> 00:33:51,900
We're basically saying we're going to write.

747
00:33:51,900 --> 00:33:53,300
This is the last place we wrote to.

748
00:33:53,400 --> 00:33:56,000
And we now need to know, since we're going to lock from there.

749
00:33:56,000 --> 00:33:58,000
Where is our Target cursor, right?

750
00:33:58,000 --> 00:33:59,800
Where is that actually going to be at?

751
00:34:00,000 --> 00:34:03,600
And so before we were using the last play cursor, but now I think

752
00:34:03,600 --> 00:34:07,800
probably what we want to do is we want to basically say whatever the

753
00:34:07,800 --> 00:34:09,199
last right, cursor was.

754
00:34:09,199 --> 00:34:12,900
So the last play cursor will actually keep the last right cursor as

755
00:34:12,900 --> 00:34:13,300
well.

756
00:34:13,699 --> 00:34:16,100
See here, and this should make some people happy because they were

757
00:34:16,100 --> 00:34:17,800
nervous about the way I was doing it before.

758
00:34:18,300 --> 00:34:19,699
And, you know, they're right to be nervous.

759
00:34:19,699 --> 00:34:21,000
It's always good to be nervous.

760
00:34:22,300 --> 00:34:24,699
I'm an experiment e, kind of dude.

761
00:34:24,900 --> 00:34:27,300
I go in to code often times.

762
00:34:28,900 --> 00:34:29,100
Oops.

763
00:34:29,100 --> 00:34:29,800
Why did I delete that?

764
00:34:29,900 --> 00:34:31,100
I just wanted to add this one.

765
00:34:31,100 --> 00:34:32,000
I want to leave the other one.

766
00:34:32,300 --> 00:34:33,400
I'm just going to save.

767
00:34:33,500 --> 00:34:35,800
I'm just going to save both of them here so we can take a look at both

768
00:34:35,800 --> 00:34:36,000
of them.

769
00:34:36,000 --> 00:34:38,500
We're doing computation and printouts and so on.

770
00:34:39,300 --> 00:34:43,000
I like to go in and you can tell this code is very, this code is very

771
00:34:43,000 --> 00:34:43,300
fluid.

772
00:34:43,300 --> 00:34:43,500
Right?

773
00:34:43,500 --> 00:34:46,300
I'm just kind of hacking the stuff in here as I experiment around with

774
00:34:46,300 --> 00:34:46,600
it.

775
00:34:47,199 --> 00:34:51,500
And then you'll notice, I've also never decided to pull this code out

776
00:34:51,500 --> 00:34:54,100
and tried to clean it up into a little encapsulating thing.

777
00:34:54,300 --> 00:34:56,699
And the reason for that is it's just not right yet.

778
00:34:56,699 --> 00:34:58,000
Like, we're playing with it.

779
00:34:58,100 --> 00:34:59,600
I'm not happy with it.

780
00:34:59,600 --> 00:34:59,800
I

781
00:35:00,000 --> 00:35:01,200
Is not to pull stuff out.

782
00:35:01,200 --> 00:35:02,800
Until I'm happy with how it works.

783
00:35:03,300 --> 00:35:04,500
And that is what's going on here.

784
00:35:04,500 --> 00:35:04,700
Right?

785
00:35:04,700 --> 00:35:09,900
I'm just, I'm just basically in there mucking with the code trying to

786
00:35:09,900 --> 00:35:13,800
see what seems like a good way to have it work.

787
00:35:14,900 --> 00:35:19,400
And that's a very intentional, that's a very specific way that I tend

788
00:35:19,400 --> 00:35:20,100
to program.

789
00:35:20,100 --> 00:35:21,700
And I think it's a good way to program.

790
00:35:21,700 --> 00:35:22,200
Basically.

791
00:35:22,200 --> 00:35:29,600
I think that it's important not to try to make good clean readable,

792
00:35:29,600 --> 00:35:31,900
lovely code right away.

793
00:35:31,900 --> 00:35:35,500
Because you burn a lot of time when you're in this state, like we are

794
00:35:35,500 --> 00:35:37,900
now we're kind of pushing things around where things are kind of

795
00:35:37,900 --> 00:35:40,200
fungible and we're trying to massage them into a place that we're

796
00:35:40,200 --> 00:35:41,000
happy with it.

797
00:35:41,000 --> 00:35:42,500
We don't know very much about the hardware.

798
00:35:42,500 --> 00:35:44,500
We learned a lot about the hardware yesterday.

799
00:35:44,700 --> 00:35:48,300
All that sort of stuff and so we're kind of pushing towards that point

800
00:35:48,300 --> 00:35:49,600
and while we're in that state.

801
00:35:49,600 --> 00:35:54,200
I like to kind of keep things pretty pretty sort of messy and fluid.

802
00:35:56,200 --> 00:35:58,200
I find it saves more time in the long run to do it.

803
00:35:58,200 --> 00:35:58,500
That way.

804
00:35:58,500 --> 00:35:59,900
You don't want it too horrible.

805
00:36:00,500 --> 00:36:03,700
Because you don't want to introduce bugs by how horrible it is.

806
00:36:04,400 --> 00:36:06,600
So we want to try and keep it a little bit cleaner.

807
00:36:06,600 --> 00:36:10,000
But, you know, we do what we can plus, I gotta admit, I can cheat a

808
00:36:10,000 --> 00:36:12,500
little bit because on this stream, there are so many people who watch

809
00:36:12,500 --> 00:36:13,300
this program.

810
00:36:13,500 --> 00:36:16,300
I get kind of Lucky they catch errors for me too.

811
00:36:16,900 --> 00:36:18,300
So so I get a bonus.

812
00:36:18,300 --> 00:36:23,100
It's almost like I've got a pair of programmer with me programming all

813
00:36:23,100 --> 00:36:23,700
the time.

814
00:36:24,700 --> 00:36:25,700
Catching stupid mistakes.

815
00:36:25,700 --> 00:36:26,400
That I make.

816
00:36:26,600 --> 00:36:28,800
That's, that's kind of awesome.

817
00:36:28,800 --> 00:36:29,400
You got to admit.

818
00:36:29,400 --> 00:36:31,900
There's some fringe benefits to doing this stream, to me.

819
00:36:31,900 --> 00:36:35,600
It's it's actually kind of pays off a little bit.

820
00:36:37,100 --> 00:36:40,300
Just in terms of extra eyes on the problem and you would be surprised

821
00:36:40,300 --> 00:36:43,000
how much that helps because when you're programming, you miss stuff

822
00:36:43,000 --> 00:36:45,900
all the time and having people who are just doing nothing but take a

823
00:36:45,900 --> 00:36:46,700
look at your code and going.

824
00:36:46,700 --> 00:36:47,600
Hey, wait a minute.

825
00:36:48,400 --> 00:36:49,100
Does that work?

826
00:36:49,100 --> 00:36:52,100
And then going, he missed, something is pretty great.

827
00:36:52,200 --> 00:36:54,100
It's yeah, it's like

828
00:36:54,600 --> 00:36:58,700
Whole a whole Suite of pair programmers but standing behind you just

829
00:36:58,700 --> 00:37:00,200
like catching catching problems.

830
00:37:00,800 --> 00:37:01,200
All right.

831
00:37:01,200 --> 00:37:03,600
So anyway, we've got those values now.

832
00:37:03,900 --> 00:37:07,700
So what we need to do is we need to think about when we're going to do

833
00:37:07,700 --> 00:37:12,800
our computation of where we want to write to basically we know what

834
00:37:12,800 --> 00:37:14,400
our audio latency is.

835
00:37:14,600 --> 00:37:17,600
We know what the right cursor was, right?

836
00:37:18,400 --> 00:37:23,100
And so, really, all we have to determine is how much past the right

837
00:37:23,100 --> 00:37:23,600
cursor?

838
00:37:23,800 --> 00:37:28,900
We actually want to write in terms of the the sample count.

839
00:37:29,000 --> 00:37:33,800
So, basically, what's going to happen here, going back to the diagram

840
00:37:34,900 --> 00:37:40,600
is we're in a situation where we're we've just flipped, right?

841
00:37:40,800 --> 00:37:41,600
We just flipped.

842
00:37:41,600 --> 00:37:44,700
And when we, when we did the flip, we're at this point in time.

843
00:37:44,800 --> 00:37:47,900
In fact, you know, I can just I can show you where we are in the code.

844
00:37:48,300 --> 00:37:49,200
This happens, right?

845
00:37:49,300 --> 00:37:50,700
We did our sleep.

846
00:37:51,900 --> 00:37:54,300
And by the way, that reminds me, I wanted to change this to.

847
00:37:55,000 --> 00:37:58,000
This is not really supposed to stay in here.

848
00:37:58,100 --> 00:38:01,000
So log miss here.

849
00:38:01,200 --> 00:38:03,800
So this should actually not be an assertion because this will happen.

850
00:38:03,800 --> 00:38:06,200
I don't like assertions for things that actually we know are going to

851
00:38:06,200 --> 00:38:06,700
happen.

852
00:38:07,100 --> 00:38:08,600
So we need to log a Miss there.

853
00:38:08,600 --> 00:38:09,100
It's not.

854
00:38:09,100 --> 00:38:10,000
It's not really.

855
00:38:11,200 --> 00:38:14,300
This is a Mist sleep, just sleep.

856
00:38:15,400 --> 00:38:15,900
So, okay.

857
00:38:15,900 --> 00:38:16,400
Sorry about that.

858
00:38:16,400 --> 00:38:16,900
Just need.

859
00:38:17,200 --> 00:38:18,000
I just I remember

860
00:38:18,200 --> 00:38:19,600
A things sometimes, when I'm thinking about them.

861
00:38:19,600 --> 00:38:22,800
I remember things and I'm like, I want to change that because I don't

862
00:38:22,800 --> 00:38:24,900
ever like a certain things that are actually going to happen.

863
00:38:24,900 --> 00:38:25,400
That's fine.

864
00:38:25,500 --> 00:38:28,300
I assert things that are going to happen when I'm testing code, but I

865
00:38:28,300 --> 00:38:29,600
don't like to leave those in there.

866
00:38:29,800 --> 00:38:32,100
The game should never assert when you're running it.

867
00:38:32,100 --> 00:38:34,100
That's always just a bad thing.

868
00:38:34,300 --> 00:38:34,800
All right.

869
00:38:34,800 --> 00:38:37,600
So basically, what's going to happen is right here.

870
00:38:37,600 --> 00:38:41,000
We did our flip win32 display by from we do, and then we asked what

871
00:38:41,000 --> 00:38:41,900
the current position was.

872
00:38:41,900 --> 00:38:43,900
So basically, we did our flip here.

873
00:38:43,900 --> 00:38:48,100
We asked what the current position is, and we kind of know that the

874
00:38:48,100 --> 00:38:48,200
price

875
00:38:48,200 --> 00:38:51,600
The play cursor is going to be like, like so we're right here.

876
00:38:51,600 --> 00:38:54,000
We're here right?

877
00:38:54,000 --> 00:38:54,900
At the flip time.

878
00:38:55,100 --> 00:38:57,600
We asked for the play cursor is, and we kind of know on this machine.

879
00:38:57,600 --> 00:38:59,500
It's going to be like, right there, right?

880
00:38:59,500 --> 00:38:59,900
It's going to

881
00:39:00,000 --> 00:39:04,100
Pretty darn close to where we were, at least what we're expecting.

882
00:39:04,500 --> 00:39:05,000
Right?

883
00:39:06,400 --> 00:39:11,600
And so the right cursor is actually going to be here.

884
00:39:11,800 --> 00:39:15,700
The right cursor is actually going to be somewhere out in the, you

885
00:39:15,700 --> 00:39:17,100
know, the frame like here.

886
00:39:17,200 --> 00:39:19,600
This is where the right Chris is going to be if that makes sense.

887
00:39:20,000 --> 00:39:21,200
Now, it could really be anywhere.

888
00:39:21,200 --> 00:39:22,300
I mean, we don't know that.

889
00:39:22,300 --> 00:39:24,300
I'm just saying, you know, it's going to the play cursor is going to

890
00:39:24,300 --> 00:39:29,900
be somewhere behind where we are in theory or close to if we

891
00:39:30,000 --> 00:39:32,600
A really good, it be close to where we are or I guess you could even

892
00:39:32,600 --> 00:39:35,800
think of it as the play cursor might even be in front of us.

893
00:39:35,800 --> 00:39:38,800
So it's going to be it's going to be somewhere right around where we

894
00:39:38,800 --> 00:39:39,000
are.

895
00:39:39,000 --> 00:39:41,000
Hopefully, if our audio sync isn't awful.

896
00:39:41,500 --> 00:39:42,700
It's going to be somewhere in here.

897
00:39:43,500 --> 00:39:46,500
Then we basically got the right cursor and the right cursor could be

898
00:39:46,500 --> 00:39:47,800
anywhere out here.

899
00:39:47,900 --> 00:39:48,500
Right?

900
00:39:48,900 --> 00:39:51,900
So we're hoping that the right cursor is somewhere kind of back in

901
00:39:51,900 --> 00:39:52,300
here.

902
00:39:52,300 --> 00:39:52,800
Possible.

903
00:39:52,800 --> 00:39:54,400
We're hoping that we're not a whole frame ahead.

904
00:39:54,400 --> 00:39:56,000
But you know, whatever it's going to be somewhere.

905
00:39:56,700 --> 00:39:59,800
So then what we have to determine right is from,

906
00:40:00,000 --> 00:40:01,100
That right cursor.

907
00:40:01,300 --> 00:40:05,900
How much do we have to write ahead in order to make it so that the

908
00:40:05,900 --> 00:40:10,200
next time that we come back around our audio, latency hasn't caught up

909
00:40:10,200 --> 00:40:11,300
with us, right?

910
00:40:12,200 --> 00:40:16,200
So we're going to do a right and we know we're going to wait 33

911
00:40:16,200 --> 00:40:16,800
milliseconds.

912
00:40:16,800 --> 00:40:22,400
So we have to do at least 33 milliseconds worth of writing because we

913
00:40:22,400 --> 00:40:25,100
know that however far you know, whatever our sink was.

914
00:40:25,100 --> 00:40:29,700
We're going to basically have to try to do roughly 33 milliseconds of

915
00:40:29,700 --> 00:40:34,300
writing, but we also need to account and if these these clocks were

916
00:40:34,300 --> 00:40:39,300
perfectly in sync, it would always be that 33 milliseconds of writing

917
00:40:39,300 --> 00:40:41,400
that we want after the right cursor.

918
00:40:42,000 --> 00:40:43,500
We also have to figure.

919
00:40:43,600 --> 00:40:45,200
Well, we've got.

920
00:40:45,200 --> 00:40:48,300
We've got this audio latency in here to account for now.

921
00:40:48,800 --> 00:40:52,000
I guess if you think about it, if the audio latency, this is the part

922
00:40:52,000 --> 00:40:53,400
that I was talking about with two conditions.

923
00:40:53,600 --> 00:40:57,800
If we know that the audio latency is larger than the frame.

924
00:40:58,200 --> 00:41:01,600
So basically I kind of needed a better diagram here because this stuff

925
00:41:01,600 --> 00:41:04,800
is kind of confusing and I want to make sure that I've drawn it out

926
00:41:04,800 --> 00:41:06,200
just right, okay.

927
00:41:07,600 --> 00:41:09,500
So let's take a look at that.

928
00:41:09,500 --> 00:41:10,400
Very first frame.

929
00:41:13,100 --> 00:41:13,700
All right.

930
00:41:13,900 --> 00:41:17,100
So we basically have our thing going on here.

931
00:41:17,800 --> 00:41:19,100
We're going to do.

932
00:41:19,100 --> 00:41:20,600
Our first frame is silent.

933
00:41:20,700 --> 00:41:23,300
Basically when we're because we're not actually displaying anything,

934
00:41:23,300 --> 00:41:24,400
our first phase silent.

935
00:41:24,600 --> 00:41:25,900
We go to do the flip.

936
00:41:25,900 --> 00:41:26,700
This is the first time.

937
00:41:26,700 --> 00:41:28,300
Anything actually shows up on the screen.

938
00:41:28,300 --> 00:41:32,100
So we flip here and then we asked essentially, we've got our sound

939
00:41:32,100 --> 00:41:34,100
buffer, our sound buffer is here.

940
00:41:34,200 --> 00:41:36,700
This is our sound buffer, right here.

941
00:41:37,500 --> 00:41:41,600
We ask where things are and we find out that the play cursor is here.

942
00:41:41,600 --> 00:41:42,700
We find out that the right.

943
00:41:42,800 --> 00:41:45,100
Cursor is somewhere around here.

944
00:41:45,100 --> 00:41:46,800
So there's the play Chris, or in the right cursor.

945
00:41:46,800 --> 00:41:50,500
We figured this out at this particular flip, right?

946
00:41:51,000 --> 00:41:51,900
So that's where that is.

947
00:41:52,700 --> 00:41:53,200
Now.

948
00:41:53,900 --> 00:41:57,200
Basically, what we have to do is we have to start writing to here.

949
00:41:57,300 --> 00:41:59,800
This is where we're actually going to write and so how much

950
00:42:00,000 --> 00:42:02,200
Sound, are we actually going to want to write?

951
00:42:02,200 --> 00:42:05,400
Well, it seems like we just want to write at that point.

952
00:42:05,400 --> 00:42:08,700
We definitely would just want to write one frames worth because we

953
00:42:08,700 --> 00:42:11,600
know that this this is already accounted for.

954
00:42:11,800 --> 00:42:16,400
So the play cursor is going to have to go the distance of the audio

955
00:42:16,400 --> 00:42:18,700
latency, which is our actual latency, right?

956
00:42:18,800 --> 00:42:21,300
It's going to have to go the distance of our audio latency and then

957
00:42:21,300 --> 00:42:25,900
start playing and it's got a full 33 milliseconds to go, right?

958
00:42:26,100 --> 00:42:29,600
So, that's totally that's totally we want and then this is just our

959
00:42:29,600 --> 00:42:29,800
30.

960
00:42:30,000 --> 00:42:33,000
Ms of audio latency that there's really not much.

961
00:42:33,200 --> 00:42:36,900
We can do anything about now if we wanted to then this is where it

962
00:42:36,900 --> 00:42:38,700
gets even in Harrier, right?

963
00:42:38,700 --> 00:42:45,000
You could imagine us actually waiting on that we could or doing that

964
00:42:45,000 --> 00:42:47,500
that guess right about here.

965
00:42:47,800 --> 00:42:49,000
The first time out.

966
00:42:49,100 --> 00:42:52,100
We could imagine doing that guessed right about here and that would

967
00:42:52,100 --> 00:42:55,000
reduce our initial audio latency, right?

968
00:42:55,000 --> 00:42:59,500
If we ask here instead of at the flip, so what we could consider doing

969
00:42:59,500 --> 00:42:59,800
and saying

970
00:43:00,000 --> 00:43:02,200
Well, yeah, let's move it.

971
00:43:02,200 --> 00:43:03,100
Let's move it back.

972
00:43:03,100 --> 00:43:03,600
Instead of doing it.

973
00:43:03,600 --> 00:43:06,300
The way we are, let's say we ask for it here, right?

974
00:43:06,700 --> 00:43:07,100
Then.

975
00:43:07,100 --> 00:43:10,000
We know that we basically are going to wait this amount of time.

976
00:43:10,200 --> 00:43:12,800
So there's however much time between when we asked.

977
00:43:12,800 --> 00:43:15,300
And when we expect to do the flip, right?

978
00:43:15,900 --> 00:43:20,000
That's going to be the elapsed time here, right?

979
00:43:20,300 --> 00:43:24,600
And the total time here of the frame, the total frame time.

980
00:43:25,100 --> 00:43:26,800
It's going to be the difference between those.

981
00:43:26,800 --> 00:43:28,000
It's going to be total minus.

982
00:43:28,000 --> 00:43:29,800
The elapsed is this time, right?

983
00:43:30,000 --> 00:43:34,300
So, our total minus the elapsed time is how much, how much of the play

984
00:43:34,300 --> 00:43:35,100
cursor, right?

985
00:43:35,100 --> 00:43:35,800
Cursor thing.

986
00:43:35,800 --> 00:43:41,500
We expect to eat up before we actually start playing right, if that

987
00:43:41,500 --> 00:43:42,000
makes sense.

988
00:43:42,700 --> 00:43:46,000
So we kind of could query that here go.

989
00:43:46,000 --> 00:43:46,900
Where is the soonest?

990
00:43:46,900 --> 00:43:52,300
We could write to if that number is less than this time.

991
00:43:52,500 --> 00:43:55,100
If this difference between the right cursor and the play cursor is

992
00:43:55,100 --> 00:43:56,800
less than this time, right?

993
00:43:57,000 --> 00:43:59,800
Then we are at that point, then we are at the point.

994
00:44:00,700 --> 00:44:03,400
Where we need to delay and push it out further.

995
00:44:03,400 --> 00:44:07,500
So we're going to right after the right cursor, basically, right, and

996
00:44:07,500 --> 00:44:11,500
line it up like that, if it's later than we're just going to write at

997
00:44:11,500 --> 00:44:15,700
the right cursor and we're going to write that 33 milliseconds, right?

998
00:44:16,300 --> 00:44:19,500
So that's kind of complicated to think about.

999
00:44:19,500 --> 00:44:20,800
I'm could complicating it.

1000
00:44:20,800 --> 00:44:21,700
Even myself in my head.

1001
00:44:21,700 --> 00:44:23,400
I'm like, oh man, this kind of complicated.

1002
00:44:26,400 --> 00:44:27,800
So, basically, what we're doing here.

1003
00:44:29,000 --> 00:44:32,100
Is whether that audio latency threshold is hit or not.

1004
00:44:32,200 --> 00:44:35,000
We're going to have to do a different sort of thing.

1005
00:44:35,700 --> 00:44:39,500
We're either going to have to intentionally sort of push our audio out

1006
00:44:39,800 --> 00:44:43,500
in the case, where we have a super fast sound card or we're going to

1007
00:44:43,500 --> 00:44:47,400
have to just write directly to the right to the audio right cursor.

1008
00:44:47,800 --> 00:44:50,200
When we look at where the right cursor actually, is.

1009
00:44:50,700 --> 00:44:54,900
We're going to write 33 milliseconds out from it in the case, where it

1010
00:44:54,900 --> 00:44:58,600
is, where it is too late, right, but

1011
00:44:58,700 --> 00:44:58,800
What?

1012
00:45:00,800 --> 00:45:02,900
So thinking about this a little bit further.

1013
00:45:04,200 --> 00:45:09,400
Basically, basically, I think that's all it boils down to so we look

1014
00:45:09,400 --> 00:45:10,200
at the right cry.

1015
00:45:10,200 --> 00:45:11,700
Think even though it's very complicated.

1016
00:45:11,700 --> 00:45:14,000
Think about, it's a lot of mental, gyrations here.

1017
00:45:14,200 --> 00:45:16,900
I think all that means is what we should do is when we go to write to

1018
00:45:16,900 --> 00:45:19,300
the audio, we look at where the right cursor is.

1019
00:45:19,500 --> 00:45:26,500
We say that we need to be ahead of that, right, cursor by the frame

1020
00:45:26,500 --> 00:45:27,000
time.

1021
00:45:27,200 --> 00:45:29,600
So we're going to write one frames worth of audio past the right

1022
00:45:29,600 --> 00:45:30,100
cursor.

1023
00:45:30,800 --> 00:45:37,300
But in the case, where the right cursor is actually far enough ahead

1024
00:45:37,300 --> 00:45:40,100
that we don't expect to get there in time.

1025
00:45:40,200 --> 00:45:42,900
We write that much less audio, right?

1026
00:45:43,400 --> 00:45:47,600
So basically, if we go ahead and we query these things and the right

1027
00:45:47,600 --> 00:45:50,500
cursor is actually inside our frame boundary.

1028
00:45:50,600 --> 00:45:53,800
It's actually it's actually earlier, right?

1029
00:45:54,600 --> 00:45:58,900
The right cursor is somewhere inside before where the flip is, then

1030
00:45:58,900 --> 00:46:00,400
when we write the audio out.

1031
00:46:00,600 --> 00:46:01,000
Out.

1032
00:46:01,000 --> 00:46:07,300
Instead of writing, instead of writing the full 33 milliseconds, We

1033
00:46:07,300 --> 00:46:11,300
could decide essentially to kind of push that out.

1034
00:46:12,500 --> 00:46:13,700
Push that out a little.

1035
00:46:13,900 --> 00:46:14,700
How would that work?

1036
00:46:14,700 --> 00:46:17,300
Exactly the first time through?

1037
00:46:17,400 --> 00:46:20,000
We would we would add a little bit of time to it.

1038
00:46:20,000 --> 00:46:25,000
That see the confusing thing is we always have to write from where we

1039
00:46:25,000 --> 00:46:25,900
left off.

1040
00:46:25,900 --> 00:46:29,200
So the next time I'm gonna have to actually do this out, just to make

1041
00:46:29,200 --> 00:46:29,700
sure

1042
00:46:30,600 --> 00:46:33,600
That we're doing, I'm going to actually do two frames, right?

1043
00:46:34,400 --> 00:46:37,100
So the first one I'm going to do, I'm going to actually work out, the

1044
00:46:37,100 --> 00:46:42,000
case is 100% just so I have both a good explanation and in my head a

1045
00:46:42,000 --> 00:46:42,500
good way.

1046
00:46:42,500 --> 00:46:47,100
So let's do first, this is audio low latency.

1047
00:46:47,200 --> 00:46:48,300
So very low latency.

1048
00:46:48,300 --> 00:46:49,400
Audio Happening Here.

1049
00:46:49,500 --> 00:46:52,800
Something that's going to be extremely low, audio latency on the sound

1050
00:46:52,800 --> 00:46:53,200
card.

1051
00:46:53,700 --> 00:46:55,500
So we ask here.

1052
00:46:55,500 --> 00:46:59,600
This is our ask and it turns out when we look at how much time the

1053
00:46:59,600 --> 00:47:00,400
audio is going.

1054
00:47:00,500 --> 00:47:04,700
Take, we expect it to basically the right cursor will be here.

1055
00:47:04,900 --> 00:47:05,500
Right?

1056
00:47:05,600 --> 00:47:08,900
So what we would want to do there is we want to move the right cursor

1057
00:47:08,900 --> 00:47:12,000
forward on that first frame so that it lines up with this.

1058
00:47:12,200 --> 00:47:15,900
So we're actually going to start our right here, and we're going to

1059
00:47:15,900 --> 00:47:19,000
write just one frame of audio, right?

1060
00:47:19,000 --> 00:47:21,400
That's all we're going to write is one frame of audio.

1061
00:47:22,000 --> 00:47:23,500
So that's what would happen here.

1062
00:47:23,800 --> 00:47:26,600
We then asked again here, right?

1063
00:47:26,600 --> 00:47:29,200
And we assume the audio latency is still very low.

1064
00:47:29,200 --> 00:47:30,400
So we would get the fact that

1065
00:47:30,500 --> 00:47:35,100
Right cursor is here and we would be here writing to it to this Frame

1066
00:47:35,100 --> 00:47:38,300
here and we would want to write one more frame.

1067
00:47:38,300 --> 00:47:43,600
So in this case, we would basically always just be writing just the 33

1068
00:47:43,600 --> 00:47:48,200
milliseconds and we would never want to write anything else, right?

1069
00:47:48,200 --> 00:47:54,400
But there's the audio clock problem where we want to make sure that

1070
00:47:54,400 --> 00:47:56,300
we're not going to just constantly fill the buffer.

1071
00:47:56,300 --> 00:47:59,900
Like let's say we were slightly off so we were always slightly.

1072
00:48:00,000 --> 00:48:05,700
Lee, we were always slightly writing too many bytes because wall clock

1073
00:48:05,800 --> 00:48:07,100
and the audio clock diverged.

1074
00:48:07,100 --> 00:48:09,000
The audio clock is a little slower or something like that.

1075
00:48:09,200 --> 00:48:11,500
That's the part that makes things really complicated.

1076
00:48:11,600 --> 00:48:14,600
So we can't always right exactly 33 milliseconds.

1077
00:48:14,600 --> 00:48:18,700
We have to write 32 milliseconds adjusted by however much the clock

1078
00:48:18,700 --> 00:48:19,400
consumed.

1079
00:48:19,500 --> 00:48:23,500
So what we need to see is how far did the right cursor move between

1080
00:48:23,500 --> 00:48:25,400
those two times on average?

1081
00:48:25,400 --> 00:48:26,000
Right?

1082
00:48:26,000 --> 00:48:29,900
So what we're going to do is say the average instead.

1083
00:48:30,000 --> 00:48:33,300
Ed of saying 33 milliseconds, we're going to say, whatever the

1084
00:48:33,300 --> 00:48:34,000
average.

1085
00:48:34,100 --> 00:48:39,400
Right cursor movement was over, you know, some some number of frames,

1086
00:48:39,600 --> 00:48:40,000
right?

1087
00:48:40,000 --> 00:48:43,700
So, we're basically going to say, however, much we think 33

1088
00:48:43,700 --> 00:48:47,300
milliseconds is in audio clock time.

1089
00:48:47,500 --> 00:48:49,600
That's how far we would right ahead.

1090
00:48:49,600 --> 00:48:50,200
Right?

1091
00:48:50,500 --> 00:48:51,800
So hopefully that makes some sense.

1092
00:48:51,800 --> 00:48:54,100
So, when we look at the right cursor, we'd say, if it's going to be

1093
00:48:54,100 --> 00:48:57,300
within here, will actually push it out to where we think it should be.

1094
00:48:57,600 --> 00:48:59,700
And then we'd always right that average, every

1095
00:49:00,300 --> 00:49:02,500
That's what we would want to have happen.

1096
00:49:03,100 --> 00:49:05,400
So basically just to summarize, what would happen here.

1097
00:49:05,800 --> 00:49:06,700
We're going to

1098
00:49:07,900 --> 00:49:18,700
if if we're inside frame for the right cursor, then we always write

1099
00:49:19,200 --> 00:49:25,400
the average right cursor, motion amount.

1100
00:49:26,700 --> 00:49:29,300
Right, so that's that's what we would do here.

1101
00:49:29,300 --> 00:49:34,300
And I think that gives us the least audio latency versus the frame

1102
00:49:34,900 --> 00:49:38,300
because basically the sound would show up early if we just wrote to

1103
00:49:38,300 --> 00:49:40,800
the right cursor and we don't actually want that.

1104
00:49:41,000 --> 00:49:44,300
So we basically want to wait we want to we want to do on that first

1105
00:49:44,300 --> 00:49:44,700
one.

1106
00:49:44,800 --> 00:49:46,300
We want to try the line them up.

1107
00:49:46,300 --> 00:49:49,700
And then from then on we always trying to want to line them up again.

1108
00:49:49,700 --> 00:49:51,800
Now, could we do this in a better way?

1109
00:49:53,500 --> 00:49:56,000
Could is there some way to look at the right cursor?

1110
00:49:56,200 --> 00:49:56,400
And

1111
00:49:56,500 --> 00:49:59,900
Do it without having to track that average because that would be nice.

1112
00:49:59,900 --> 00:50:03,600
It was just a more stable computation if that makes sense.

1113
00:50:11,500 --> 00:50:12,300
How would we do that?

1114
00:50:12,300 --> 00:50:16,300
So if we wake up here and we basically find out that the right cursor,

1115
00:50:16,500 --> 00:50:19,000
the difference between the right cursor and the play cursor.

1116
00:50:21,100 --> 00:50:21,700
Is it?

1117
00:50:21,700 --> 00:50:25,900
So we would expect the play cursor to be here in all, you know, if

1118
00:50:25,900 --> 00:50:28,600
we're assuming the low-latency car, we expect this like Russia to

1119
00:50:28,600 --> 00:50:29,100
here.

1120
00:50:29,200 --> 00:50:31,200
We find out that the right cursor is here.

1121
00:50:31,600 --> 00:50:37,100
So we know the Delta between these two is that and we can sort of say,

1122
00:50:37,800 --> 00:50:38,300
well.

1123
00:50:38,300 --> 00:50:40,800
Alright, in that case, how far do we want to write?

1124
00:50:40,800 --> 00:50:47,800
Well, we want to write from the right cursor forwards to our sample

1125
00:50:47,800 --> 00:50:48,200
index.

1126
00:50:48,200 --> 00:50:50,800
We're assuming that the sample index fell on a

1127
00:50:50,900 --> 00:50:52,000
A frame boundary.

1128
00:50:54,000 --> 00:50:57,000
Gosh, how do you even can you even do that computation?

1129
00:50:57,200 --> 00:50:59,800
How would we do this computation using only the right?

1130
00:51:00,000 --> 00:51:02,500
During the play cursor because they're the things that are in that

1131
00:51:02,500 --> 00:51:03,300
clock space.

1132
00:51:05,200 --> 00:51:06,900
Is there a way to do that?

1133
00:51:09,600 --> 00:51:13,000
Yeah, I don't I can't think of it.

1134
00:51:13,200 --> 00:51:14,000
To be honest with you.

1135
00:51:14,000 --> 00:51:15,500
I just I can't think of it.

1136
00:51:16,800 --> 00:51:19,400
We know how far forward the right cursor.

1137
00:51:19,400 --> 00:51:24,800
We know how far forward our estimated number of samples per frame is

1138
00:51:25,500 --> 00:51:27,200
but we don't really know.

1139
00:51:28,600 --> 00:51:30,300
Yeah, we don't really know anything else.

1140
00:51:32,400 --> 00:51:33,300
That's something to think about.

1141
00:51:33,300 --> 00:51:38,600
I don't know if anyone out there on the stream can think of a better

1142
00:51:38,600 --> 00:51:39,500
way to do this.

1143
00:51:40,700 --> 00:51:46,000
It seems pretty tricky to me to do anything other than just track that

1144
00:51:46,000 --> 00:51:47,700
average right to track.

1145
00:51:47,900 --> 00:51:50,400
You can see what I'm having trouble figuring out if there's a way to

1146
00:51:50,400 --> 00:51:55,100
do basically we're this is all this is a wall clock thing that we're

1147
00:51:55,100 --> 00:51:55,500
doing here.

1148
00:51:55,500 --> 00:51:59,200
We're using query performance counter, but the audio clock may not be

1149
00:51:59,200 --> 00:52:01,900
perfectly synced with the wall clock, it maybe like a sampler to off.

1150
00:52:02,100 --> 00:52:06,700
Something who knows, right and you can ignore the five-minute warning.

1151
00:52:06,700 --> 00:52:08,700
Like I said, long stream today, so we're good to go.

1152
00:52:09,500 --> 00:52:11,400
Basically the wall clock.

1153
00:52:12,100 --> 00:52:15,800
This is what the wall clock is thinking, but the audio clock may be

1154
00:52:15,800 --> 00:52:19,200
off, so I can't just use the wall clock to determine how much too,

1155
00:52:19,200 --> 00:52:19,800
right?

1156
00:52:19,900 --> 00:52:21,900
I can't just cold right out the samples.

1157
00:52:22,300 --> 00:52:26,900
So what I need is a way of saying, you know, if I'm estimating where

1158
00:52:26,900 --> 00:52:30,400
this is going to be, if I ask in the right cursors, here the play

1159
00:52:30,400 --> 00:52:31,700
cursors back here.

1160
00:52:32,000 --> 00:52:33,000
And I'm estimating.

1161
00:52:33,000 --> 00:52:36,500
Okay, if the play cursor is here, where is the play cursor going to

1162
00:52:36,500 --> 00:52:37,100
be?

1163
00:52:37,400 --> 00:52:40,400
When the time has elapsed, I can estimate where the play cursor would

1164
00:52:40,400 --> 00:52:40,600
be.

1165
00:52:40,600 --> 00:52:44,600
I can estimate where the right cursor would be and I can basically

1166
00:52:44,600 --> 00:52:45,500
say, okay.

1167
00:52:46,300 --> 00:52:49,900
I'm going to make sure that we write at least past where that right

1168
00:52:49,900 --> 00:52:53,100
cursor is at least one frame past it.

1169
00:52:53,100 --> 00:52:54,000
I guess maybe.

1170
00:52:54,000 --> 00:52:58,100
That's maybe that's the way to do it.

1171
00:52:59,300 --> 00:52:59,800
Okay.

1172
00:52:59,800 --> 00:53:00,400
Okay.

1173
00:53:00,400 --> 00:53:01,200
How about this?

1174
00:53:01,300 --> 00:53:01,900
Here's a proposal.

1175
00:53:02,400 --> 00:53:03,700
Here's a proposal for you.

1176
00:53:04,800 --> 00:53:06,600
Tell me how the stream likes this.

1177
00:53:07,100 --> 00:53:11,000
Let's say we do a thing where we go.

1178
00:53:11,000 --> 00:53:13,500
We wake up, we ask where the right cursor.

1179
00:53:13,500 --> 00:53:14,000
Is.

1180
00:53:14,800 --> 00:53:19,500
We forecast forward where we think it will be.

1181
00:53:19,800 --> 00:53:20,100
Right.

1182
00:53:20,100 --> 00:53:22,600
Basically we say, all right.

1183
00:53:22,700 --> 00:53:26,300
We have a wall clock estimate for where we think the right cursor will

1184
00:53:26,300 --> 00:53:26,700
be.

1185
00:53:26,800 --> 00:53:28,300
We push that forwards.

1186
00:53:28,900 --> 00:53:34,200
We then say, we want to write at least up to the next frame boundary

1187
00:53:34,300 --> 00:53:34,500
from

1188
00:53:34,700 --> 00:53:36,300
Are right?

1189
00:53:37,800 --> 00:53:40,700
And that is the sample index that we write to.

1190
00:53:41,000 --> 00:53:42,500
So it's always based off this.

1191
00:53:42,900 --> 00:53:48,000
So, in the case where the right cursor and we do that only when the

1192
00:53:48,000 --> 00:53:51,900
right cursor is behind basically, right?

1193
00:53:52,300 --> 00:53:54,600
If the so yeah that okay.

1194
00:53:54,600 --> 00:53:55,400
I like that.

1195
00:53:55,500 --> 00:53:59,700
We basically say Round Up to frame boundary from

1196
00:54:00,000 --> 00:54:03,700
The right cursor is projected because that basically gives us the

1197
00:54:03,700 --> 00:54:08,000
thing that we wanted, which is, which is we always just fill the next

1198
00:54:08,000 --> 00:54:09,300
frame and we're synched.

1199
00:54:09,700 --> 00:54:11,400
We're synched to it properly at that point.

1200
00:54:11,400 --> 00:54:14,600
If the right Chris are always, is kind of behind.

1201
00:54:14,900 --> 00:54:15,500
I like that.

1202
00:54:15,500 --> 00:54:16,000
I like that.

1203
00:54:16,000 --> 00:54:16,500
I like that.

1204
00:54:16,500 --> 00:54:16,900
A lot.

1205
00:54:16,900 --> 00:54:18,200
That is feeling much better to me.

1206
00:54:18,200 --> 00:54:19,500
I think we're getting there people.

1207
00:54:19,700 --> 00:54:21,500
It's as anyone else love this stuff.

1208
00:54:21,900 --> 00:54:23,500
That's the weird thing about it, too.

1209
00:54:23,700 --> 00:54:25,500
I feel like, there's probably a lot of people watching.

1210
00:54:25,500 --> 00:54:25,800
God.

1211
00:54:25,800 --> 00:54:28,800
There's just so much finicky stuff in here, but it's like,

1212
00:54:29,700 --> 00:54:33,600
there's something so satisfying about banging your head against

1213
00:54:33,600 --> 00:54:37,800
something for a little while and then making a little breakthrough.

1214
00:54:37,800 --> 00:54:39,900
It's kind of like playing a great puzzle game, right?

1215
00:54:39,900 --> 00:54:42,500
It's like it was confusing.

1216
00:54:46,100 --> 00:54:47,900
It was it was confusing, right?

1217
00:54:48,000 --> 00:54:51,100
And then you start to see little little sort of breakthroughs there

1218
00:54:51,100 --> 00:54:53,800
and we're getting much better than we would have had.

1219
00:54:53,800 --> 00:54:56,300
If we just through audio out, the sound card.

1220
00:54:56,300 --> 00:54:57,600
If you just throw it out, the sound card.

1221
00:54:57,600 --> 00:54:59,100
You have no idea how it synced.

1222
00:54:59,100 --> 00:55:02,400
So, even if someone makes a really low latency sound card, and gives

1223
00:55:02,400 --> 00:55:05,100
you this great Hardware, your game, just threw it all away.

1224
00:55:05,100 --> 00:55:06,400
So you weren't synced at all.

1225
00:55:06,500 --> 00:55:09,200
You now, your audio was early instead of late.

1226
00:55:10,000 --> 00:55:13,200
But if we actually take the time to work this out, just this one time,

1227
00:55:13,600 --> 00:55:15,200
we then have an audio layer that can actually

1228
00:55:15,400 --> 00:55:17,300
We respond to that, and be pretty cool.

1229
00:55:17,700 --> 00:55:20,000
So, yeah, so I think we're making good progress here in this.

1230
00:55:21,000 --> 00:55:21,400
I don't know.

1231
00:55:21,600 --> 00:55:24,300
This is what I like about programming and that, and then you get to

1232
00:55:24,300 --> 00:55:26,400
write that great article someday, right?

1233
00:55:26,400 --> 00:55:30,500
That's like how to do audio output right and everyone can benefit from

1234
00:55:30,500 --> 00:55:30,600
it.

1235
00:55:30,600 --> 00:55:30,900
Right?

1236
00:55:30,900 --> 00:55:32,500
So I feel like it's good.

1237
00:55:32,500 --> 00:55:34,100
It's just good to work this out.

1238
00:55:34,200 --> 00:55:36,200
So I feel like that's that's that's it.

1239
00:55:36,200 --> 00:55:40,000
I'm going to, I'm going to re draw this here and make sure that I

1240
00:55:40,000 --> 00:55:41,300
think that it's good.

1241
00:55:41,300 --> 00:55:42,600
So we got two cases.

1242
00:55:43,500 --> 00:55:45,200
This is going to be the low latency case.

1243
00:55:45,300 --> 00:55:48,700
Ace and then we'll work out what the high latency case is in a second.

1244
00:55:49,200 --> 00:55:49,600
Okay.

1245
00:55:50,000 --> 00:55:51,900
So basically what happens is we wake up.

1246
00:55:51,900 --> 00:55:53,000
We need to write audio.

1247
00:55:53,100 --> 00:55:54,400
So this is our wake up.

1248
00:55:54,600 --> 00:55:56,200
We find out where the right cursor is.

1249
00:55:56,200 --> 00:56:01,000
We find out that the right cursor is basically less, you know, we

1250
00:56:01,000 --> 00:56:04,100
figured that it's inside the frame boundary, right?

1251
00:56:04,200 --> 00:56:11,200
So the right cursor is inside the frame, that means that we will be

1252
00:56:11,200 --> 00:56:12,800
able to actually be audio.

1253
00:56:12,800 --> 00:56:13,400
Synced.

1254
00:56:13,400 --> 00:56:15,200
We know that on this, we have a card that is

1255
00:56:15,400 --> 00:56:16,900
It's enough that we will be audio sync.

1256
00:56:16,900 --> 00:56:19,400
So that's a card that had like 10 milliseconds of audio latency 5,

1257
00:56:19,400 --> 00:56:20,600
milliseconds of audio latency.

1258
00:56:20,800 --> 00:56:22,200
Some kind of pro grade audio.

1259
00:56:22,200 --> 00:56:23,600
Stuff coming down the pipe here.

1260
00:56:24,100 --> 00:56:24,800
That's what we got.

1261
00:56:24,800 --> 00:56:28,600
Maybe you're running on an as asio driver, its professional grade.

1262
00:56:28,600 --> 00:56:29,000
Who knows?

1263
00:56:29,000 --> 00:56:30,900
Or you're on a console and things are direct.

1264
00:56:31,700 --> 00:56:35,300
So, basically, what we do in that case, well, what we do in any case

1265
00:56:35,300 --> 00:56:37,200
is first, we project the right cursor forwards.

1266
00:56:37,400 --> 00:56:39,700
So we take the right cursor, right?

1267
00:56:39,800 --> 00:56:44,500
We take the right cursor, plus frames the set, the frame samples.

1268
00:56:44,500 --> 00:56:45,200
However, many frames.

1269
00:56:45,300 --> 00:56:49,200
Samples, we want that makes sense.

1270
00:56:49,700 --> 00:56:52,100
So we take the right cursor, press the number of samples for frame.

1271
00:56:52,200 --> 00:56:53,200
We look at where that is.

1272
00:56:53,200 --> 00:56:53,800
It's here.

1273
00:56:54,200 --> 00:56:58,100
We basically say, okay, we're going to want to write up to wherever

1274
00:56:58,100 --> 00:56:58,800
the frame is.

1275
00:56:58,900 --> 00:56:59,800
So then our Target

1276
00:57:00,300 --> 00:57:07,100
Is basically the next frame, the next expected frame boundary, right?

1277
00:57:07,400 --> 00:57:11,200
So, wherever that's going to be in time next frame bonding time.

1278
00:57:11,600 --> 00:57:12,400
That's where we?

1279
00:57:12,400 --> 00:57:13,600
That's where we write 2.

1280
00:57:13,600 --> 00:57:15,500
So, we write up to here, right?

1281
00:57:15,500 --> 00:57:19,500
We come there and we then say, all right, we woke up.

1282
00:57:19,500 --> 00:57:21,200
Here, we ask for the right cursor.

1283
00:57:21,200 --> 00:57:25,400
Is it's like here, roughly, where we thought it was going to be, we

1284
00:57:25,400 --> 00:57:25,800
project.

1285
00:57:25,800 --> 00:57:26,600
It forwards.

1286
00:57:26,700 --> 00:57:28,100
We truncate up.

1287
00:57:28,100 --> 00:57:29,200
We look up words.

1288
00:57:29,200 --> 00:57:29,800
We say that's right.

1289
00:57:30,000 --> 00:57:32,300
As to be, we write forwards, right?

1290
00:57:32,600 --> 00:57:36,300
So this is basically what we are trying to do.

1291
00:57:36,400 --> 00:57:36,900
Okay.

1292
00:57:37,200 --> 00:57:41,400
Now, let's take a look at the case where we have a high latency card.

1293
00:57:41,400 --> 00:57:44,300
So we wake up here and here's our frames again.

1294
00:57:44,500 --> 00:57:45,400
Same frames.

1295
00:57:46,000 --> 00:57:47,200
We wake up here.

1296
00:57:47,300 --> 00:57:50,800
This is where we wake, right, same time because we're basically

1297
00:57:50,800 --> 00:57:54,100
assuming that basically, you know, the, the game updates sort of not

1298
00:57:54,300 --> 00:57:55,800
based on the sound card latency.

1299
00:57:56,000 --> 00:57:58,500
So we sort of waking up as a bad term.

1300
00:57:58,500 --> 00:57:59,800
It sounds weird sleeping, we get

1301
00:58:00,000 --> 00:58:00,800
It's with the stuff here.

1302
00:58:00,800 --> 00:58:02,500
We look at where we need to write our audio.

1303
00:58:03,200 --> 00:58:07,300
We find out that the right cursor is actually going to be, you know,

1304
00:58:07,300 --> 00:58:08,900
out here somewhere, right?

1305
00:58:10,800 --> 00:58:11,300
Excuse me.

1306
00:58:16,200 --> 00:58:18,900
Okay, the right Chris is going to be out here somewhere.

1307
00:58:19,500 --> 00:58:20,900
So we're like yikes.

1308
00:58:21,500 --> 00:58:25,700
All right, so the right cursor is actually like past the where the,

1309
00:58:25,700 --> 00:58:28,700
where the actual frame boundary is so we know we're going to be super

1310
00:58:28,700 --> 00:58:29,500
latent.

1311
00:58:29,800 --> 00:58:34,200
Basically what that means is that where we need to write to is going

1312
00:58:34,200 --> 00:58:38,800
to actually be just up to the next frame boundary at all.

1313
00:58:38,800 --> 00:58:39,900
Is that correct?

1314
00:58:40,000 --> 00:58:40,900
If the right cursors?

1315
00:58:40,900 --> 00:58:44,300
There, then the next time we wake would be here.

1316
00:58:44,300 --> 00:58:45,300
No, so so

1317
00:58:45,500 --> 00:58:46,800
Typically its exact same.

1318
00:58:46,900 --> 00:58:49,600
The code is still totally exactly.

1319
00:58:49,600 --> 00:58:50,300
Right.

1320
00:58:50,400 --> 00:58:55,800
The only difference is the when we write up, when we write up here.

1321
00:58:55,800 --> 00:59:00,900
We could choose not to round up to the next frame boundary.

1322
00:59:01,000 --> 00:59:05,000
We could choose just to add a different amount in here.

1323
00:59:05,000 --> 00:59:07,500
So so we could add however much.

1324
00:59:07,500 --> 00:59:12,700
We think our audio latency safety margin would be basically is what we

1325
00:59:12,700 --> 00:59:13,200
could do.

1326
00:59:14,100 --> 00:59:17,100
So, we could do this right here.

1327
00:59:17,100 --> 00:59:20,200
The target is rounded up to the next frame in this case.

1328
00:59:20,300 --> 00:59:22,500
And the other one, we do the same thing.

1329
00:59:22,500 --> 00:59:25,500
We do the wc+ frame samples.

1330
00:59:25,700 --> 00:59:32,800
But instead now, the target is just that the target is that plus a

1331
00:59:32,800 --> 00:59:34,600
safety margin, right?

1332
00:59:34,800 --> 00:59:37,000
So we won't round up to the next frame.

1333
00:59:37,100 --> 00:59:38,400
We'll just have a little safety.

1334
00:59:38,400 --> 00:59:42,800
Margin, whatever we think we can get away with their the lowest thing.

1335
00:59:42,800 --> 00:59:43,700
We think we could get away with

1336
00:59:44,100 --> 00:59:48,200
In terms of our safety margin and the safety margin would basically

1337
00:59:48,200 --> 00:59:48,900
be.

1338
00:59:51,600 --> 00:59:55,900
I mean, it's basically going to probably be just a few samples.

1339
00:59:55,900 --> 00:59:59,800
I mean it's because basically, we're writing

1340
01:00:00,000 --> 01:00:02,200
Like where the right cursor tells us to be at that point.

1341
01:00:02,200 --> 01:00:05,900
So so the safety margin could be as little as like one millisecond or

1342
01:00:05,900 --> 01:00:06,300
something.

1343
01:00:06,300 --> 01:00:06,600
Right?

1344
01:00:06,600 --> 01:00:07,900
I think that would probably be fine.

1345
01:00:07,900 --> 01:00:12,100
It's however much we think there might be very variability in this if

1346
01:00:12,100 --> 01:00:12,800
that makes sense.

1347
01:00:14,400 --> 01:00:17,600
So that safety margin can actually be quite a bit less than the Delta

1348
01:00:17,600 --> 01:00:19,400
that we were pushing up, right.

1349
01:00:20,000 --> 01:00:21,400
So these are the two things here.

1350
01:00:21,400 --> 01:00:24,900
So now, the only thing we have to deal with is at startup, we don't

1351
01:00:24,900 --> 01:00:29,500
actually know the the concept of where the right cursor is.

1352
01:00:30,100 --> 01:00:33,600
Is not particularly understandable, right?

1353
01:00:33,600 --> 01:00:37,800
If that makes sense, because we don't actually know where the right

1354
01:00:37,800 --> 01:00:40,200
cursor is inside our frame.

1355
01:00:40,500 --> 01:00:44,300
Inside our kind of concept of a frame, if that makes sense, like

1356
01:00:44,300 --> 01:00:48,500
saying, where the right cursor is versus the, I guess, I guess we do.

1357
01:00:48,600 --> 01:00:51,900
It's just the play cursor is where we are now, right?

1358
01:00:52,000 --> 01:00:55,600
The play cursor is where we are now, and the right cursor is where we

1359
01:00:55,600 --> 01:00:56,500
where we will be.

1360
01:00:56,900 --> 01:00:59,800
That's like, it's as good as we can sort of do at that.

1361
01:01:00,000 --> 01:01:01,100
First initial startup.

1362
01:01:02,200 --> 01:01:03,200
Does that make sense?

1363
01:01:03,500 --> 01:01:04,600
I think that makes sense.

1364
01:01:05,200 --> 01:01:07,300
So, basically, we look at the Delta between the right cursor in the

1365
01:01:07,300 --> 01:01:07,800
play cursor.

1366
01:01:07,800 --> 01:01:08,700
That's what we're going to get.

1367
01:01:08,700 --> 01:01:08,800
Now.

1368
01:01:08,800 --> 01:01:09,700
There's a problem.

1369
01:01:10,000 --> 01:01:12,300
The thing with that as well, mapping that in there.

1370
01:01:12,300 --> 01:01:14,100
That's that's makes things even harder.

1371
01:01:14,600 --> 01:01:17,700
So this, this seems like the right computation, but the one thing we

1372
01:01:17,700 --> 01:01:21,800
have to remember is this play counter thing is very latent in terms of

1373
01:01:21,800 --> 01:01:23,200
how often it updates.

1374
01:01:23,700 --> 01:01:24,800
If you remember.

1375
01:01:26,200 --> 01:01:28,200
Basically that jump.

1376
01:01:28,600 --> 01:01:30,900
Let's take a look at that for a second.

1377
01:01:30,900 --> 01:01:33,100
Here II.

1378
01:01:33,100 --> 01:01:37,700
Left that Loop in for a very good reason that jump that happens.

1379
01:01:38,300 --> 01:01:42,800
Let's see here, doodoo turn that back on.

1380
01:01:43,100 --> 01:01:46,100
So remember I did a little thing you're so we could see how frequently

1381
01:01:46,400 --> 01:01:51,300
the audio updates at all like basically just you know, just just

1382
01:01:51,300 --> 01:01:55,600
taking a look at at what the jump is by of these two things.

1383
01:01:56,100 --> 01:02:00,200
So, if I take a look here, that's the B, the minimum B that it ever

1384
01:02:00,200 --> 01:02:01,000
goes up by.

1385
01:02:01,200 --> 01:02:09,800
So, for a 9920 - 48000, that's how many bytes it goes up by / that we

1386
01:02:09,800 --> 01:02:11,200
get 480 samples.

1387
01:02:11,400 --> 01:02:14,500
So, again, 480, samples pretty big.

1388
01:02:14,500 --> 01:02:16,900
Oops, love that shake thing.

1389
01:02:16,900 --> 01:02:18,000
I wish it wouldn't do that.

1390
01:02:18,400 --> 01:02:21,400
I should turn that off 480.

1391
01:02:23,200 --> 01:02:29,100
Is the granularity of that of the 480 samples?

1392
01:02:29,300 --> 01:02:34,600
So 480 samples, if we actually divide that by the total number of

1393
01:02:34,600 --> 01:02:38,600
samples per second, that's 10, millisecond granularity.

1394
01:02:39,000 --> 01:02:43,200
So basically what that means, if we go back to the, to the drawing,

1395
01:02:43,300 --> 01:02:46,300
this is why I'm getting so nervous about this because this is what we

1396
01:02:46,300 --> 01:02:49,400
actually want to do if we could map these into time, but if you think

1397
01:02:49,400 --> 01:02:52,400
about where these actually are, it's going to report this

1398
01:02:52,600 --> 01:02:57,100
With an error of plus or minus 10 milliseconds, right?

1399
01:02:57,700 --> 01:02:59,800
We don't actually know when we ask

1400
01:03:00,000 --> 01:03:04,000
This is it could, well, it's I guess it's not plus or minus in some

1401
01:03:04,000 --> 01:03:04,600
sense.

1402
01:03:04,700 --> 01:03:08,900
We know that it's it's it's plus or minus 5, I guess, technically,

1403
01:03:08,900 --> 01:03:09,400
right.

1404
01:03:09,600 --> 01:03:11,300
It's when we ask, where this is.

1405
01:03:11,500 --> 01:03:13,400
It could have been anywhere.

1406
01:03:13,500 --> 01:03:18,100
Sort of in this Zone, a 5, millisecond, forwards, 5, milliseconds,

1407
01:03:18,100 --> 01:03:19,100
backwards, and some sense.

1408
01:03:19,100 --> 01:03:21,200
We don't know where it is because it updates So lately.

1409
01:03:22,000 --> 01:03:22,700
So,

1410
01:03:25,300 --> 01:03:29,600
Where met correlating are two buffers, we have up to 5 milliseconds of

1411
01:03:29,600 --> 01:03:31,400
slop in there as well.

1412
01:03:31,400 --> 01:03:34,100
That's just makes it even harder.

1413
01:03:35,600 --> 01:03:37,600
So you see why this is so complicated.

1414
01:03:38,900 --> 01:03:43,100
It really does make it pretty tricky for us to figure out how we could

1415
01:03:43,100 --> 01:03:44,100
actually try.

1416
01:03:44,100 --> 01:03:48,300
If we wanted to how we could actually try to hit this thing.

1417
01:03:48,300 --> 01:03:49,800
We look at where we are.

1418
01:03:50,300 --> 01:03:52,000
We look at what the the play cursor is.

1419
01:03:52,000 --> 01:03:54,000
We just don't know the play.

1420
01:03:54,200 --> 01:03:56,600
Sir is only updating every 10.

1421
01:03:56,600 --> 01:03:59,700
So for all we know the play cursor could be 10 milliseconds, a header

1422
01:03:59,700 --> 01:04:00,200
10 mil.

1423
01:04:00,200 --> 01:04:02,000
I'm sorry, five more seconds ahead of five-month Ms.

1424
01:04:02,000 --> 01:04:04,400
Behind in terms of wall clock time.

1425
01:04:05,700 --> 01:04:10,900
So we have to figure that every time we wake up this this is going to

1426
01:04:10,900 --> 01:04:14,900
be this kind of nasty thing that shifts back and forth by five

1427
01:04:14,900 --> 01:04:17,400
milliseconds and five.

1428
01:04:17,400 --> 01:04:20,400
Milliseconds is enough that we could end up if we looked at where the

1429
01:04:20,400 --> 01:04:22,700
right cursor is and we said, oh it's inside.

1430
01:04:24,200 --> 01:04:26,800
Based on that estimate, what if that's wrong?

1431
01:04:26,800 --> 01:04:29,100
Because of the five milliseconds that it's and it's going to jump

1432
01:04:29,100 --> 01:04:30,500
forwards very soon.

1433
01:04:31,400 --> 01:04:31,700
Soon.

1434
01:04:31,700 --> 01:04:35,100
Thereafter, we could assume that's always a minimum bound and do it.

1435
01:04:35,100 --> 01:04:35,700
That way.

1436
01:04:35,800 --> 01:04:43,800
Try think if there's any downside to doing that, I assume.

1437
01:04:43,800 --> 01:04:45,100
It's always conservative.

1438
01:04:45,100 --> 01:04:47,300
So, I think, I think we're probably still.

1439
01:04:47,300 --> 01:04:47,900
Okay.

1440
01:04:48,400 --> 01:04:49,700
I think we're probably still.

1441
01:04:49,700 --> 01:04:50,300
Okay.

1442
01:04:52,200 --> 01:04:54,000
Yeah, so, I guess, what we can do is

1443
01:04:54,200 --> 01:04:57,700
Use the play cursor to determine where we are in the buffer, right?

1444
01:04:57,900 --> 01:04:59,600
So basically here's our sound buffer.

1445
01:04:59,900 --> 01:05:03,600
We basically wake up, we say, where is the play cursor in the sound

1446
01:05:03,600 --> 01:05:04,100
buffer?

1447
01:05:04,200 --> 01:05:04,800
Right?

1448
01:05:04,900 --> 01:05:05,900
We Mark where that is.

1449
01:05:05,900 --> 01:05:09,000
That's, that's where we are in the play cursor, right?

1450
01:05:09,000 --> 01:05:10,400
It at this time.

1451
01:05:10,500 --> 01:05:14,700
We then know we have a certain amount of time left to go so that we

1452
01:05:14,700 --> 01:05:16,300
map in the samples.

1453
01:05:16,300 --> 01:05:17,000
We say.

1454
01:05:17,100 --> 01:05:20,700
Okay, here is where the frame boundary would be in samples.

1455
01:05:20,900 --> 01:05:21,200
Right?

1456
01:05:21,200 --> 01:05:23,600
We say it's this many samples ahead of the play cursor.

1457
01:05:23,600 --> 01:05:24,000
We look at

1458
01:05:24,100 --> 01:05:27,800
The right cursor and we say, where is the right cursor relative to

1459
01:05:27,800 --> 01:05:28,300
that?

1460
01:05:28,300 --> 01:05:28,900
Right?

1461
01:05:29,000 --> 01:05:30,100
That's stable.

1462
01:05:30,100 --> 01:05:30,700
No matter what?

1463
01:05:30,700 --> 01:05:31,100
I guess.

1464
01:05:31,100 --> 01:05:32,700
Because, hey, it's a little late and whatever.

1465
01:05:32,800 --> 01:05:33,600
We look at the right Chris.

1466
01:05:33,600 --> 01:05:36,700
Or if the right cursor is behind that, then we're in this case.

1467
01:05:36,800 --> 01:05:38,700
If the right cursor is ahead of that.

1468
01:05:38,900 --> 01:05:40,200
Then we're in the other case.

1469
01:05:41,300 --> 01:05:42,200
I'm happy.

1470
01:05:42,200 --> 01:05:43,500
I'm pretty happy with that.

1471
01:05:43,500 --> 01:05:44,000
Basically.

1472
01:05:44,000 --> 01:05:48,200
This is the same as a normal sound output Loop, which would basically

1473
01:05:48,200 --> 01:05:50,200
just be doing this, right?

1474
01:05:50,700 --> 01:05:54,000
But we've now identified this other case where in

1475
01:05:54,100 --> 01:05:57,000
In, if we were given really low latency sound output.

1476
01:05:57,000 --> 01:05:59,800
I think we now could actually literally hit.

1477
01:06:00,000 --> 01:06:01,100
Our sound sink.

1478
01:06:01,100 --> 01:06:02,000
Exactly.

1479
01:06:03,100 --> 01:06:06,700
The more as the audio card, converges to Accurate.

1480
01:06:06,800 --> 01:06:09,400
We will converge towards outputting sound.

1481
01:06:09,400 --> 01:06:12,700
That is right on that frame, flip?

1482
01:06:12,800 --> 01:06:13,700
Right on it.

1483
01:06:13,700 --> 01:06:14,600
If that makes sense.

1484
01:06:18,500 --> 01:06:20,000
I'm pretty happy about that.

1485
01:06:21,400 --> 01:06:24,900
Maybe there's a mistake in our logic somewhere, but I'm pretty happy

1486
01:06:25,100 --> 01:06:26,700
about what we just worked out.

1487
01:06:29,000 --> 01:06:32,100
I wish we had a little thing that was like, a little happiness flag.

1488
01:06:33,200 --> 01:06:35,200
I feel like maybe the owl of shame.

1489
01:06:35,600 --> 01:06:36,000
I don't know.

1490
01:06:36,000 --> 01:06:37,600
Maybe the outer shame shouldn't be analysis.

1491
01:06:37,600 --> 01:06:37,700
A.

1492
01:06:37,700 --> 01:06:38,900
Maybe we shouldn't reinforce.

1493
01:06:38,900 --> 01:06:40,300
Our owls are shame.

1494
01:06:40,600 --> 01:06:42,600
Maybe we should reinforce our victories.

1495
01:06:43,000 --> 01:06:43,400
I don't know.

1496
01:06:43,400 --> 01:06:43,900
What do you think?

1497
01:06:43,900 --> 01:06:47,900
Should it be an owl of Victory or an owl of shame, or do I just need

1498
01:06:47,900 --> 01:06:48,800
to get to owls?

1499
01:06:49,100 --> 01:06:52,300
I guess I'll leave that to the stream and maybe even in the forums

1500
01:06:52,800 --> 01:06:55,600
will have to have a thread that's basically out of shame or owl of

1501
01:06:55,600 --> 01:06:56,200
Victory.

1502
01:06:56,300 --> 01:06:57,400
Which one do we want?

1503
01:06:57,500 --> 01:06:58,200
And I don't know.

1504
01:06:58,900 --> 01:07:01,100
Of course, we can't hold it up yet because we don't know if this

1505
01:07:01,100 --> 01:07:03,700
actually works and we have to go actually do it because there might be

1506
01:07:03,700 --> 01:07:07,300
a hole in our logic, but I like this.

1507
01:07:07,600 --> 01:07:10,000
So what I'm going to do is, I'm going to write a little comment here

1508
01:07:10,400 --> 01:07:13,000
down at the sound output code that sort of says how this works and

1509
01:07:13,000 --> 01:07:16,200
will when we extract this out and cleaned up a little bit.

1510
01:07:16,300 --> 01:07:19,500
We're basing to leave that comment in there just so it says how this

1511
01:07:19,500 --> 01:07:19,900
works.

1512
01:07:20,200 --> 01:07:22,100
So, because that was pretty important.

1513
01:07:23,100 --> 01:07:28,500
It took us a while to figure out, so I'd like to kind of just notate

1514
01:07:28,500 --> 01:07:28,500
it.

1515
01:07:28,600 --> 01:07:29,700
It so that it's very clear.

1516
01:07:31,600 --> 01:07:34,700
How's sound output computation works?

1517
01:07:35,600 --> 01:07:40,100
So what we're going to say is we're going to say in the case.

1518
01:07:41,100 --> 01:07:48,600
So when we wake up to right audio, basically, we will look.

1519
01:07:50,100 --> 01:07:54,100
And see what the play cursor position is.

1520
01:07:54,800 --> 01:08:02,000
And we will forecast ahead where we think the play cursor will be

1521
01:08:02,200 --> 01:08:03,000
after.

1522
01:08:08,100 --> 01:08:14,200
Sorry, we will forecast ahead where we think the play cursor will be

1523
01:08:14,600 --> 01:08:18,000
on the next frame boundary, right?

1524
01:08:18,500 --> 01:08:26,700
We will then look to see if the right cursor is before that if it is,

1525
01:08:27,100 --> 01:08:32,700
we will write up to the next frame.

1526
01:08:32,800 --> 01:08:36,000
Boundary from the right cursor.

1527
01:08:38,500 --> 01:08:45,100
And then one frame further which should give us basically exactly what

1528
01:08:45,100 --> 01:08:45,600
we want.

1529
01:08:45,700 --> 01:08:46,800
We will write up to the next.

1530
01:08:46,800 --> 01:08:50,000
So one frame boundary if it's before the frame battery, right up to

1531
01:08:50,000 --> 01:08:55,500
the frame boundary and then one frame further giving us perfect.

1532
01:08:55,899 --> 01:08:59,500
Audio sync, in the case of a card.

1533
01:09:00,000 --> 01:09:02,800
Has low enough latency, right?

1534
01:09:02,899 --> 01:09:07,300
So basically, we will write right?

1535
01:09:07,300 --> 01:09:11,200
We will, we will write up to.

1536
01:09:11,300 --> 01:09:12,800
I don't know how to say this, right?

1537
01:09:12,800 --> 01:09:15,500
So we will look to see if the right cursor is before that.

1538
01:09:15,500 --> 01:09:24,200
If it is the, I guess we'll say the, the target fill level or whatever

1539
01:09:24,200 --> 01:09:29,600
Target fill position, is that frame boundary plus 1.

1540
01:09:30,399 --> 01:09:31,800
Frame, right?

1541
01:09:33,399 --> 01:09:38,700
This gives us perfect audio sync in the case of a sound card that has

1542
01:09:38,700 --> 01:09:40,500
low enough audio latency, right?

1543
01:09:41,200 --> 01:09:50,300
If the right cursor is after the next frame boundary, then we assume

1544
01:09:50,399 --> 01:09:53,899
we can never sync the audio perfectly.

1545
01:09:55,400 --> 01:09:59,800
So we will write one frames worth.

1546
01:10:00,200 --> 01:10:04,900
Of Audio Plus a guard.

1547
01:10:05,000 --> 01:10:09,200
Plus some number of guard samples.

1548
01:10:09,600 --> 01:10:16,900
So, you know, one millisecond or something determined to be safe.

1549
01:10:17,300 --> 01:10:17,800
Right?

1550
01:10:18,700 --> 01:10:20,800
So we can actually say this is whatever, this is.

1551
01:10:20,800 --> 01:10:23,700
Maybe it's half the frame time, it's whatever we think the

1552
01:10:23,700 --> 01:10:26,800
variability, whatever.

1553
01:10:26,800 --> 01:10:29,800
We think the variability of our

1554
01:10:30,000 --> 01:10:33,000
Frame computation is right.

1555
01:10:33,100 --> 01:10:36,000
So we could set that all the way up to one whole frame ahead if we

1556
01:10:36,000 --> 01:10:40,800
were nervous, but basically that's that's really all we need to do and

1557
01:10:40,800 --> 01:10:44,100
this is the same basically what we need to say, if the right cursor is

1558
01:10:44,100 --> 01:10:45,400
before that.

1559
01:10:47,600 --> 01:10:55,600
It's really but before that buy-in by our safe by our safe amount,

1560
01:10:56,100 --> 01:10:56,700
right?

1561
01:10:56,800 --> 01:10:58,800
So we basically have a safe amount.

1562
01:10:59,100 --> 01:11:00,100
We should try to Define this.

1563
01:11:00,100 --> 01:11:00,500
Here.

1564
01:11:01,300 --> 01:11:05,300
We will say, we Define a safety value.

1565
01:11:05,400 --> 01:11:10,500
That is the number of milliseconds or the number of samples.

1566
01:11:10,600 --> 01:11:17,100
We think our game update Loop may vary by, right and so however much

1567
01:11:17,100 --> 01:11:17,200
that

1568
01:11:17,400 --> 01:11:21,200
Is let's say we assume that our game update can vary by, you know, up

1569
01:11:21,200 --> 01:11:22,500
to 2 milliseconds.

1570
01:11:23,200 --> 01:11:26,000
Let's say up to 2 milliseconds or something like this.

1571
01:11:27,900 --> 01:11:31,800
So we'll say that if the game update varies by up to 2 milliseconds,

1572
01:11:32,600 --> 01:11:35,700
then when we wake up with the audio we look and see it's a cursor, is

1573
01:11:35,700 --> 01:11:41,800
we look to see if the right cursor is before that, by the safety value

1574
01:11:42,000 --> 01:11:48,700
by the safety value, or by at least our safety value.

1575
01:11:49,700 --> 01:11:52,700
And if it is the Target Field position is the frame boundary plus 1

1576
01:11:52,700 --> 01:11:53,100
frame.

1577
01:11:53,700 --> 01:11:54,300
This gives us perfect.

1578
01:11:54,300 --> 01:11:57,100
Audio sync case card is loan of it and see if the right cursor is

1579
01:11:57,300 --> 01:11:59,800
after that, say,

1580
01:12:00,000 --> 01:12:02,100
The margin then.

1581
01:12:02,100 --> 01:12:06,100
We assume we can never sync the audio perfectly.

1582
01:12:06,200 --> 01:12:10,000
So we'll write one frames worth of audio, plus some number of guard

1583
01:12:10,000 --> 01:12:10,600
samples.

1584
01:12:11,000 --> 01:12:19,300
So this I think at you plus the safety margins worth of guard samples.

1585
01:12:19,400 --> 01:12:22,700
So basically, this does exactly the threshold in that I set out to do

1586
01:12:22,700 --> 01:12:27,800
initially, which is to say, we always write one frame, plus whatever

1587
01:12:27,800 --> 01:12:29,000
the guard amount is.

1588
01:12:29,300 --> 01:12:29,800
In the case.

1589
01:12:30,000 --> 01:12:32,500
Where we can't get audio sync to work, right?

1590
01:12:32,700 --> 01:12:36,300
Because the cards too slow, if we magically were to able to get some

1591
01:12:36,300 --> 01:12:41,500
Hardware that was fast enough, some really low latency Hardware, then

1592
01:12:41,500 --> 01:12:46,700
it would correctly, do a sort of the the forward prediction to line it

1593
01:12:46,700 --> 01:12:49,600
up with when we expect to flip, right?

1594
01:12:50,800 --> 01:12:54,000
So that's why I'm pretty comfortable with that.

1595
01:12:54,000 --> 01:12:56,200
How do you guys feel about that on the stream?

1596
01:12:56,400 --> 01:12:57,900
How do we feel?

1597
01:12:58,800 --> 01:12:59,600
I don't know.

1598
01:13:00,000 --> 01:13:02,000
Don't know what you guys are doing out there exactly.

1599
01:13:02,000 --> 01:13:05,500
But but hopefully people are following that, but that's what we

1600
01:13:05,500 --> 01:13:06,600
basically want to do.

1601
01:13:06,900 --> 01:13:14,100
So what we do here is we take a look, we always have to basically

1602
01:13:14,100 --> 01:13:18,900
right from from from so, you know, what, we're going to always look at

1603
01:13:18,900 --> 01:13:21,200
the, we don't have to save this kind of nice.

1604
01:13:21,200 --> 01:13:26,700
We don't have to save this stuff anymore, at 4-4 around the bend.

1605
01:13:26,800 --> 01:13:29,500
We don't actually have to do that because we can actually the last

1606
01:13:29,500 --> 01:13:29,800
right curse.

1607
01:13:29,900 --> 01:13:31,500
Our last play, Chris or thing.

1608
01:13:31,900 --> 01:13:34,600
We don't actually have to to save anymore.

1609
01:13:34,600 --> 01:13:35,600
So that's kind of nice.

1610
01:13:36,100 --> 01:13:40,200
We can go down here and basically get rid of that and say that from

1611
01:13:40,200 --> 01:13:43,800
now on, we're actually just going to use this stuff and we don't have

1612
01:13:43,800 --> 01:13:45,900
to save sound as valid as well.

1613
01:13:46,400 --> 01:13:49,200
We're pretty much good to go on that as well.

1614
01:13:50,000 --> 01:13:55,100
So sound is valid, can actually now be moved.

1615
01:13:55,100 --> 01:13:59,100
He moved back down to here.

1616
01:14:00,100 --> 01:14:01,400
Where we actually can do it.

1617
01:14:01,600 --> 01:14:03,500
So sound is valid doesn't have to Loop.

1618
01:14:03,500 --> 01:14:04,600
This is this is going to be nice.

1619
01:14:04,600 --> 01:14:06,200
This is going to clean up a bunch of stuff.

1620
01:14:06,300 --> 01:14:08,700
I'm going to leave this code in here for now because this is

1621
01:14:09,400 --> 01:14:13,100
basically, let's see here, right?

1622
01:14:13,100 --> 01:14:16,800
Kristen play Chris or I'm going to actually leave this code in in the

1623
01:14:16,800 --> 01:14:21,800
de bugging pass here so that we can actually inside that that internal

1624
01:14:21,800 --> 01:14:22,100
thing.

1625
01:14:22,100 --> 01:14:26,000
I still want to record those markers at this point because I think

1626
01:14:26,000 --> 01:14:27,300
that's actually going to be useful.

1627
01:14:27,500 --> 01:14:29,800
And so what I'm going to do is I'm just going to move the the sound

1628
01:14:29,900 --> 01:14:31,700
Is valid stuff up to here?

1629
01:14:31,700 --> 01:14:34,000
So sound is valid.

1630
01:14:34,700 --> 01:14:37,600
We're actually going to go ahead and do that here.

1631
01:14:38,300 --> 01:14:41,300
Maybe I still do want to actually keep it.

1632
01:14:41,300 --> 01:14:43,700
That sound is valid Global now that I think about it because we need

1633
01:14:43,700 --> 01:14:46,700
to still handle the case where we're starting up.

1634
01:14:46,900 --> 01:14:47,800
So I'm going to leave that.

1635
01:14:47,900 --> 01:14:52,100
I'm going to leave that going and so what we're going to do is I am

1636
01:14:52,100 --> 01:14:57,500
going to do the get current position to do that.

1637
01:14:58,400 --> 01:14:59,800
Where is the okay?

1638
01:15:00,300 --> 01:15:00,800
A thing.

1639
01:15:00,800 --> 01:15:01,500
There it is.

1640
01:15:02,000 --> 01:15:04,300
All right, go back a little.

1641
01:15:04,900 --> 01:15:05,400
There it is.

1642
01:15:05,700 --> 01:15:08,300
All right, so I'm going to go ahead and get that position.

1643
01:15:08,700 --> 01:15:09,800
Like we wanted.

1644
01:15:10,100 --> 01:15:14,200
I'm going to, basically, say, first of all, we've got a couple cases

1645
01:15:14,200 --> 01:15:14,600
here.

1646
01:15:16,500 --> 01:15:19,600
I don't actually know yet, whether we need to maintain the sound is

1647
01:15:19,600 --> 01:15:20,300
valid thing.

1648
01:15:20,700 --> 01:15:24,100
I think we do, because we need to set where we're going to write to.

1649
01:15:24,600 --> 01:15:28,100
So basically, if the sound isn't valid, currently we're going to

1650
01:15:28,100 --> 01:15:29,900
assume that the place that we're going to write.

1651
01:15:30,000 --> 01:15:30,400
It too.

1652
01:15:31,400 --> 01:15:33,100
Yeah, it's going to be roughly there.

1653
01:15:33,100 --> 01:15:33,900
Now we have.

1654
01:15:34,500 --> 01:15:39,300
So we have one little problem as well, which is that the game update

1655
01:15:39,300 --> 01:15:41,600
and render is happening sort of after this.

1656
01:15:42,200 --> 01:15:45,800
So we don't actually know this is this is a bit of a rub in the plan.

1657
01:15:45,800 --> 01:15:49,700
We only know the estimate for how long that's going to take.

1658
01:15:49,900 --> 01:15:53,100
We don't actually know exactly how that long that's going to take but

1659
01:15:53,100 --> 01:15:56,600
I guess that's okay because we sort of know it's expected time plus

1660
01:15:56,600 --> 01:15:57,400
its variability.

1661
01:15:57,400 --> 01:15:59,500
So that's that's the real tricky part here.

1662
01:16:00,000 --> 01:16:01,800
This is, it is really complicated.

1663
01:16:01,800 --> 01:16:04,600
If you want to try and get real audio sync, this is this is really

1664
01:16:04,600 --> 01:16:06,200
pretty, pretty, darn tough.

1665
01:16:06,200 --> 01:16:08,900
If you get right down to it, trying to manage these two clocks.

1666
01:16:08,900 --> 01:16:10,600
This is pretty pretty crazy.

1667
01:16:10,700 --> 01:16:13,700
We're going to have to actually account for the fact that in order to

1668
01:16:13,700 --> 01:16:18,000
ask the game to give us the the audio for this Frame.

1669
01:16:18,000 --> 01:16:20,200
We need to know how many bytes to ask for.

1670
01:16:20,200 --> 01:16:23,100
But in order to know me B ask for we have to do it before we ask the

1671
01:16:23,100 --> 01:16:24,000
game so we don't know.

1672
01:16:24,000 --> 01:16:28,800
Actually like we wanted to wake up and write the sound immediately,

1673
01:16:29,100 --> 01:16:29,700
but we can't.

1674
01:16:29,900 --> 01:16:31,000
Actually do that.

1675
01:16:32,500 --> 01:16:35,600
I mean we could I suppose actually do that and assume that the game

1676
01:16:35,600 --> 01:16:38,700
update doesn't take as long as it's going to take for the right person

1677
01:16:38,700 --> 01:16:41,000
to jump but we don't actually know if that's going to be true or not.

1678
01:16:41,000 --> 01:16:41,300
It could.

1679
01:16:41,300 --> 01:16:42,700
It could very easily jump.

1680
01:16:44,300 --> 01:16:47,800
So that's that's a little bit tricky.

1681
01:16:48,000 --> 01:16:50,900
That's a little bit tricky, that's going to complicate our

1682
01:16:50,900 --> 01:16:51,500
computation.

1683
01:16:51,500 --> 01:16:56,400
But all right, let's start out with start out with with it and we'll

1684
01:16:56,400 --> 01:16:57,400
keep on pushing through.

1685
01:17:00,300 --> 01:17:01,000
All right.

1686
01:17:01,600 --> 01:17:02,600
Okay.

1687
01:17:02,600 --> 01:17:04,700
So we go ahead and get that current position.

1688
01:17:05,200 --> 01:17:08,400
We take a look to see whether the sound is valid or not.

1689
01:17:08,400 --> 01:17:12,600
If the sound is not valid, then basically we're going to probably

1690
01:17:13,200 --> 01:17:16,600
we're probably going to defer that until after we actually do that.

1691
01:17:16,600 --> 01:17:18,800
So that'll still probably happen here.

1692
01:17:19,500 --> 01:17:21,200
So where we do our recheck.

1693
01:17:21,200 --> 01:17:24,500
So basically what we need to do first is we need to determine how many

1694
01:17:24,500 --> 01:17:25,700
samples the game.

1695
01:17:25,700 --> 01:17:28,400
We're going to actually ask the game for so Ike.

1696
01:17:28,400 --> 01:17:29,000
Okay.

1697
01:17:29,000 --> 01:17:29,900
I see how we can probably

1698
01:17:30,100 --> 01:17:32,800
We do this, I see how we can probably do this.

1699
01:17:34,300 --> 01:17:35,000
Yeah.

1700
01:17:35,000 --> 01:17:36,700
Yeah, I do I do.

1701
01:17:38,800 --> 01:17:40,400
I think I see how we do this.

1702
01:17:40,400 --> 01:17:44,100
We're going to have to do it a little bit, a little bit wet weirder,

1703
01:17:44,300 --> 01:17:45,000
but let's do it.

1704
01:17:45,000 --> 01:17:47,900
Let's let's let's let's let's reverse this a little bit.

1705
01:17:48,000 --> 01:17:48,600
So, okay.

1706
01:17:48,900 --> 01:17:52,400
So we're going to do it roughly exactly like we said, here we are

1707
01:17:52,400 --> 01:17:54,000
about to fill the sound buffer.

1708
01:17:54,000 --> 01:17:55,800
So we got the sound back from the game.

1709
01:17:56,400 --> 01:17:59,800
So we're just going to go ahead and do that right in.

1710
01:18:00,000 --> 01:18:00,400
Here.

1711
01:18:01,100 --> 01:18:03,000
So what we're going to do is we're going to we're going to get that

1712
01:18:03,000 --> 01:18:04,600
current position, right?

1713
01:18:06,200 --> 01:18:10,000
We're going to and we're going to print this out there.

1714
01:18:10,000 --> 01:18:11,900
Okay, so we're going to get that position.

1715
01:18:11,900 --> 01:18:14,100
We're going to look at the play cursor and the right cursor.

1716
01:18:14,100 --> 01:18:15,100
So we woke up there.

1717
01:18:15,700 --> 01:18:19,200
We're going to ignore a sound is valid for a minute because we're

1718
01:18:19,200 --> 01:18:22,900
going to we're going to set that sound is valid.

1719
01:18:23,700 --> 01:18:27,900
So we set that up here and that's just that's just a flag that we can

1720
01:18:27,900 --> 01:18:30,300
use to know whether it's our first time through or not.

1721
01:18:30,700 --> 01:18:35,300
So basically, what we're going to do is did I actually

1722
01:18:35,500 --> 01:18:36,800
Accidentally delete.

1723
01:18:36,800 --> 01:18:39,000
The, where is the running sample?

1724
01:18:39,000 --> 01:18:40,400
Index, update thing?

1725
01:18:40,600 --> 01:18:41,200
I did.

1726
01:18:41,300 --> 01:18:42,300
Yes, that was bad case.

1727
01:18:42,300 --> 01:18:43,100
You don't do that.

1728
01:18:43,200 --> 01:18:44,400
Why did you delete that?

1729
01:18:44,600 --> 01:18:47,400
Why did you delete that?

1730
01:18:47,500 --> 01:18:50,400
Because that was code, that we still wanted.

1731
01:18:50,500 --> 01:18:54,900
I don't know why I deleted it probably just because I'm overzealous.

1732
01:18:55,000 --> 01:18:55,600
All right.

1733
01:18:56,200 --> 01:18:59,500
So what we want to do here is we're going to move this down and I'm

1734
01:18:59,500 --> 01:19:00,700
not going to leave that code.

1735
01:19:00,700 --> 01:19:02,300
That code is is good.

1736
01:19:02,300 --> 01:19:03,600
It's going to be actually want

1737
01:19:05,800 --> 01:19:10,400
So in here, in the case, where that happens, there we go.

1738
01:19:10,400 --> 01:19:12,000
That's what we wanted to see happen.

1739
01:19:12,000 --> 01:19:15,300
Now, we've preserved the code that we actually still need.

1740
01:19:15,300 --> 01:19:16,100
I don't know why.

1741
01:19:16,100 --> 01:19:18,200
I was feeling so so overzealous.

1742
01:19:18,200 --> 01:19:19,300
They're all right.

1743
01:19:19,600 --> 01:19:21,900
This is not going to be inside a sound valid Loop.

1744
01:19:21,900 --> 01:19:22,300
There we go.

1745
01:19:22,500 --> 01:19:25,200
So, in the case, where we get it, we check to see if the sound is

1746
01:19:25,200 --> 01:19:25,600
valid.

1747
01:19:25,600 --> 01:19:26,400
If that is not valid.

1748
01:19:26,400 --> 01:19:27,800
We're going to write from the right cursor.

1749
01:19:27,800 --> 01:19:30,400
Obviously, that's the first place we have to write.

1750
01:19:30,400 --> 01:19:34,200
That's where we knew start writing from if our sound is valid, if we

1751
01:19:34,200 --> 01:19:35,800
don't get it, then we're going to assume that

1752
01:19:35,900 --> 01:19:39,600
The sound is not valid and restart the process or just never write

1753
01:19:39,600 --> 01:19:39,800
sound.

1754
01:19:39,800 --> 01:19:40,100
Again.

1755
01:19:40,100 --> 01:19:42,300
This basically means our buffer failed or something like that.

1756
01:19:44,300 --> 01:19:45,500
So you look for the current position.

1757
01:19:45,900 --> 01:19:48,500
If a sound is valid, we got to start writing at the right curse, or

1758
01:19:48,500 --> 01:19:52,200
otherwise, we always write wherever we actually left off before.

1759
01:19:52,600 --> 01:19:54,200
That's basically what we're going to do there.

1760
01:19:54,400 --> 01:19:57,400
We're then going to say that b to lock, always has to be wherever we

1761
01:19:57,400 --> 01:20:00,700
last wrote to which, or right at the right cursor.

1762
01:20:00,700 --> 01:20:03,200
If we're running for the first time and that's still correct.

1763
01:20:03,600 --> 01:20:05,700
Then, our Target cursor, is the new thing that we're

1764
01:20:05,800 --> 01:20:07,200
Going to compute a little bit differently.

1765
01:20:07,500 --> 01:20:11,000
Basically, what we're going to assume that it is, like I said before,

1766
01:20:11,000 --> 01:20:12,800
is we've got two cases essentially.

1767
01:20:13,200 --> 01:20:15,500
We've got these two cases to deal with.

1768
01:20:15,900 --> 01:20:17,700
So basically we need to do an F here.

1769
01:20:17,900 --> 01:20:21,500
And we need to figure out that Target cursor in two different ways,

1770
01:20:21,500 --> 01:20:22,000
right?

1771
01:20:22,100 --> 01:20:23,000
And the target cursor.

1772
01:20:23,000 --> 01:20:26,200
Now, I believe this stuff can be moved inside this Loop.

1773
01:20:26,500 --> 01:20:29,400
It can be made to be direct like this.

1774
01:20:30,000 --> 01:20:30,600
I think so.

1775
01:20:30,600 --> 01:20:31,400
So, play Christian, Right?

1776
01:20:31,400 --> 01:20:31,600
Girls.

1777
01:20:31,600 --> 01:20:33,500
Are we still need to be out there?

1778
01:20:34,700 --> 01:20:36,200
But everything else is fine.

1779
01:20:41,000 --> 01:20:41,500
Good deal.

1780
01:20:42,900 --> 01:20:44,000
So play Christian, right cursor?

1781
01:20:44,000 --> 01:20:44,800
Get grabbed.

1782
01:20:45,800 --> 01:20:46,700
That's all good.

1783
01:20:47,400 --> 01:20:49,800
We're going to compute the B to lock that's relatively

1784
01:20:49,800 --> 01:20:50,700
straightforward.

1785
01:20:51,300 --> 01:20:52,100
So we do that.

1786
01:20:52,100 --> 01:20:55,400
We can actually even do that directly in line here.

1787
01:20:55,700 --> 01:20:56,400
So there we go.

1788
01:20:56,400 --> 01:20:58,000
We will compute the B to lock that way.

1789
01:20:58,400 --> 01:20:59,800
We then go ahead and

1790
01:21:00,000 --> 01:21:03,900
Compute the target cursor and then we compute the bites, right?

1791
01:21:03,900 --> 01:21:05,900
So the target cursor has two cases.

1792
01:21:06,200 --> 01:21:12,300
One, is that we're just going to use the right cursor, the exact sort

1793
01:21:12,300 --> 01:21:12,500
of thing.

1794
01:21:12,500 --> 01:21:18,200
We were doing before the right cursor, plus our safety.

1795
01:21:18,800 --> 01:21:21,500
Let's call this our safety sample, B.

1796
01:21:22,900 --> 01:21:23,500
Right.

1797
01:21:23,800 --> 01:21:24,800
So we're just going to rid of that.

1798
01:21:24,800 --> 01:21:25,800
Instead of sample count.

1799
01:21:25,800 --> 01:21:29,500
I'm going to stop using samples anywhere I can and then we'll start to

1800
01:21:29,500 --> 01:21:31,400
simplify this code by just using B.

1801
01:21:31,800 --> 01:21:37,400
Our Target cursor is just going to be a rap version of basically the

1802
01:21:37,500 --> 01:21:44,800
the expected bytes per frame and this is our safety B.

1803
01:21:45,700 --> 01:21:46,300
There we go.

1804
01:21:46,700 --> 01:21:51,600
Our expected bytes per frame, plus our sound are selected sound bytes

1805
01:21:51,600 --> 01:21:52,200
per frame.

1806
01:21:53,300 --> 01:21:55,200
Plus our safety bites, right?

1807
01:21:55,200 --> 01:21:57,400
So that's, that's basically what we need to do there.

1808
01:21:58,300 --> 01:22:01,800
And then this is in the case of a latent audio card.

1809
01:22:02,000 --> 01:22:07,300
If audio card is latent, then we will we will do that.

1810
01:22:07,400 --> 01:22:08,400
If it is not.

1811
01:22:10,400 --> 01:22:16,200
Then our Target cursor is going to be equal to the expected frame.

1812
01:22:16,200 --> 01:22:19,800
Boundary the expected frame boundary, right expected?

1813
01:22:19,800 --> 01:22:28,000
Frame, boundary b, + yeah, plus the sound output.

1814
01:22:33,800 --> 01:22:35,800
Yeah, just expected sound bite for frame.

1815
01:22:36,100 --> 01:22:38,600
That's it like that.

1816
01:22:39,100 --> 01:22:42,300
So the right cursor just doesn't fact it factored into it, basically.

1817
01:22:45,200 --> 01:22:47,000
Yeah, I think that's it.

1818
01:22:47,400 --> 01:22:48,900
Well the right cursor.

1819
01:22:50,100 --> 01:22:51,500
Yeah, it plus it sounded.

1820
01:22:51,500 --> 01:22:51,800
Yeah.

1821
01:22:51,800 --> 01:22:52,700
Yeah, that's it.

1822
01:22:52,800 --> 01:22:54,200
That's that's all there is to it.

1823
01:22:54,700 --> 01:22:57,800
I think that's that's really all there is to it.

1824
01:22:58,600 --> 01:23:02,700
Yeah, I don't see anything wrong with that.

1825
01:23:02,800 --> 01:23:04,800
We can move the this out here.

1826
01:23:04,800 --> 01:23:08,600
So we can say that the target cursor equals the target cursor, mod

1827
01:23:08,600 --> 01:23:09,800
sound crass or B.

1828
01:23:09,900 --> 01:23:13,300
So we know that it's always inside and then we can just get rid of

1829
01:23:13,300 --> 01:23:17,800
that and do this computation a little more cleanly in either case.

1830
01:23:17,900 --> 01:23:19,300
So we're basically just doing this.

1831
01:23:20,600 --> 01:23:21,100
Right.

1832
01:23:21,400 --> 01:23:22,100
Like that.

1833
01:23:25,300 --> 01:23:27,900
I think that is correct.

1834
01:23:27,900 --> 01:23:31,700
So now we just have to compute audio card is latent.

1835
01:23:31,800 --> 01:23:33,400
So audio card is latent.

1836
01:23:36,000 --> 01:23:42,700
That is going to be our assumption certainly because well most are two

1837
01:23:42,700 --> 01:23:44,800
cards probably are that makes sense.

1838
01:23:45,600 --> 01:23:51,000
So we're going to see if the audio card is late by saying, what did we

1839
01:23:51,000 --> 01:23:51,600
say up here?

1840
01:23:51,600 --> 01:23:53,800
We basically said if the right cursor

1841
01:23:56,800 --> 01:23:59,800
let's say if the right cursor plus the

1842
01:24:00,000 --> 01:24:02,300
Affected sound bytes per frame, right?

1843
01:24:02,300 --> 01:24:06,000
If that if the right cursor plus the expected sound bites per frame,

1844
01:24:08,000 --> 01:24:09,300
basically is

1845
01:24:14,200 --> 01:24:14,500
Okay.

1846
01:24:15,500 --> 01:24:16,700
Safe right cursor.

1847
01:24:16,700 --> 01:24:17,600
Let's call this.

1848
01:24:18,300 --> 01:24:20,200
Sorry, not the Specter right pits, right?

1849
01:24:20,200 --> 01:24:23,500
Chris Surplus, the safety B, right?

1850
01:24:23,500 --> 01:24:27,100
That's that's where we know that that's a counting sort of for the

1851
01:24:27,100 --> 01:24:30,300
Jitter if the safe, right cursor, right?

1852
01:24:34,400 --> 01:24:38,800
Plus, plus that we need to kind of know.

1853
01:24:38,800 --> 01:24:41,400
What are what this expected frame boundary B is.

1854
01:24:41,800 --> 01:24:45,600
So, we basically say, if the safe right, cursor is less than the

1855
01:24:45,600 --> 01:24:48,000
expected frame boundary B, right?

1856
01:24:51,400 --> 01:24:55,100
Then we consider the audio card to not be late.

1857
01:24:57,900 --> 01:24:58,700
Make some sense.

1858
01:24:59,100 --> 01:25:03,100
So in some sense, this is saying the audio card is latent if the safe

1859
01:25:03,100 --> 01:25:05,600
right cursor is greater than or equal to that.

1860
01:25:05,900 --> 01:25:06,400
Okay.

1861
01:25:07,100 --> 01:25:11,100
So we're basically saying wherever we think the frame boundary is

1862
01:25:11,100 --> 01:25:13,600
going to be we basically.

1863
01:25:13,700 --> 01:25:15,800
Yeah, I mean that's that's it.

1864
01:25:15,800 --> 01:25:16,300
Right?

1865
01:25:16,700 --> 01:25:19,600
So really it's just Computing this that we have to do.

1866
01:25:20,400 --> 01:25:20,700
Okay.

1867
01:25:20,700 --> 01:25:21,400
Do you word?

1868
01:25:21,500 --> 01:25:22,100
There we go.

1869
01:25:22,500 --> 01:25:23,500
So basically just saying,

1870
01:25:24,700 --> 01:25:25,200
Safe, right.

1871
01:25:25,200 --> 01:25:28,100
Cursor is the right cursor, plus whatever our safety.

1872
01:25:28,100 --> 01:25:31,200
B margin is, which is how much variability we think there is in our

1873
01:25:31,200 --> 01:25:32,900
output timing, right?

1874
01:25:33,800 --> 01:25:37,600
Determining whether the audio card is late is saying wherever that is

1875
01:25:38,200 --> 01:25:42,600
if that is after wherever, we think our next flip will be, then we

1876
01:25:42,600 --> 01:25:46,900
know that the audio card is not low latency enough for our for us to

1877
01:25:46,900 --> 01:25:47,400
do perfect.

1878
01:25:47,400 --> 01:25:48,900
Audio sync, right?

1879
01:25:49,500 --> 01:25:53,200
So then we're going to say, basically, whatever the that Target cursor

1880
01:25:53,200 --> 01:25:53,600
is.

1881
01:25:55,200 --> 01:26:00,200
It's just going to be computed based on either of those and then

1882
01:26:00,200 --> 01:26:02,500
wrapped back into the buffer and that's about it.

1883
01:26:02,500 --> 01:26:04,000
So this is the only computation.

1884
01:26:04,000 --> 01:26:07,000
We actually have to do what this actually is.

1885
01:26:07,000 --> 01:26:08,100
Whatever the expected Fairground.

1886
01:26:08,100 --> 01:26:12,800
Invite is, is basically the play cursor plus the expected bytes per

1887
01:26:12,800 --> 01:26:13,400
frame.

1888
01:26:13,500 --> 01:26:19,300
Now we have, we have a problem here, which is again that the right

1889
01:26:19,300 --> 01:26:21,400
cursor and the play cursor, may have wrapped.

1890
01:26:21,600 --> 01:26:24,600
So, what we want to do is basically say,

1891
01:26:26,100 --> 01:26:31,100
What we want to do here is basically make sure that they aren't

1892
01:26:31,200 --> 01:26:32,500
wrapped relative to each other.

1893
01:26:32,500 --> 01:26:35,200
We're assuming that the safe right that the right cursor, and the play

1894
01:26:35,200 --> 01:26:38,200
cursor are sort of in the same space.

1895
01:26:38,400 --> 01:26:42,200
And so, what we need to do is say, if the expected frame boundary B,

1896
01:26:43,400 --> 01:26:47,100
you know, we're essentially on the wrong side of whatever that safe

1897
01:26:47,100 --> 01:26:47,300
right?

1898
01:26:47,300 --> 01:26:48,700
Cursor is right.

1899
01:26:48,700 --> 01:26:52,600
Because, yeah, so we kind of need to take the play cursor in the right

1900
01:26:52,600 --> 01:26:54,700
cursor and normalize them first.

1901
01:26:55,000 --> 01:26:57,600
So I think what I'd like to do is just take that out of the equation

1902
01:26:57,600 --> 01:26:59,800
because this is complicated enough already.

1903
01:27:00,100 --> 01:27:06,200
Um, so let's just say we have a mapped are safe.

1904
01:27:06,200 --> 01:27:06,400
Right?

1905
01:27:06,400 --> 01:27:11,000
Cursor is going to map into the same place as the play cursor.

1906
01:27:11,800 --> 01:27:14,200
Yeah, that that's, I guess what I'm going to say.

1907
01:27:14,400 --> 01:27:17,600
So basically, what I would say is the safe right cursor equals the

1908
01:27:17,600 --> 01:27:18,300
right cursor.

1909
01:27:19,500 --> 01:27:23,500
We're going to take safe, right, cursor, and we're going to add the

1910
01:27:23,500 --> 01:27:25,200
safety B in like this.

1911
01:27:25,700 --> 01:27:30,600
So that I flipped those out to me into two, so I can make sure these

1912
01:27:30,600 --> 01:27:31,500
were in the same place.

1913
01:27:31,700 --> 01:27:35,100
So, if the safe right cursor, for some reason was behind the play

1914
01:27:35,100 --> 01:27:36,600
cursor, then the safe right.

1915
01:27:36,600 --> 01:27:40,700
Cursor is going to be normalized up to, to be ahead of it.

1916
01:27:40,700 --> 01:27:41,200
Right?

1917
01:27:41,200 --> 01:27:43,600
So we assert here, that the safe right?

1918
01:27:43,600 --> 01:27:46,600
Cursor is always greater than or equal to the play cursor.

1919
01:27:48,200 --> 01:27:50,900
All right, so that looks a bit better now to me.

1920
01:27:51,200 --> 01:27:53,200
Alright, so we're going to take the expected, frame, boundary B.

1921
01:27:53,200 --> 01:27:54,200
That's going to be the play cursor.

1922
01:27:54,200 --> 01:27:58,300
Plus, however, many bytes, we expect to output on a particular frame

1923
01:27:58,900 --> 01:28:02,900
that's going to be some kind of a value that we compute up above.

1924
01:28:02,900 --> 01:28:03,800
That's pretty wrote.

1925
01:28:03,800 --> 01:28:07,000
It's just going to be however much the milliseconds is Multiplied out

1926
01:28:07,000 --> 01:28:08,200
by the science sound thing.

1927
01:28:09,300 --> 01:28:13,500
So, basically, we've got that we then check the the safe, right?

1928
01:28:13,500 --> 01:28:15,800
Cursors, the right curse or if it's behind the play cursor, which

1929
01:28:15,800 --> 01:28:16,900
means it has wrapped.

1930
01:28:16,900 --> 01:28:17,700
We're going to go ahead.

1931
01:28:17,800 --> 01:28:19,700
Normalize it so that it's ahead.

1932
01:28:20,000 --> 01:28:21,300
We're going to we're not really normalize.

1933
01:28:21,300 --> 01:28:24,000
It unwrapped it so that it's always ahead of the play cursor so that

1934
01:28:24,000 --> 01:28:26,000
we can do our computation properly.

1935
01:28:26,800 --> 01:28:28,400
We take that safe right cursor.

1936
01:28:29,000 --> 01:28:31,700
We assert that, we that it's always going to be ahead of it because

1937
01:28:31,700 --> 01:28:32,600
that was our goal.

1938
01:28:33,200 --> 01:28:35,400
We then add in the safety B.

1939
01:28:35,600 --> 01:28:37,000
That is where we say.

1940
01:28:37,000 --> 01:28:39,200
It could possibly be.

1941
01:28:39,700 --> 01:28:42,100
We look to see if the audio card is latent.

1942
01:28:42,100 --> 01:28:43,600
If the audio card is Layton.

1943
01:28:46,200 --> 01:28:51,300
By saying is that safe, right cursor going to be before I guess we

1944
01:28:51,300 --> 01:28:56,800
could we could kind of reverse this audio card is low, latency might

1945
01:28:56,800 --> 01:28:57,500
be a bit better.

1946
01:28:57,500 --> 01:29:00,200
So we'll say if we can hit our thing.

1947
01:29:00,500 --> 01:29:03,400
Then we're going to we're going to reverse the sense of this this

1948
01:29:03,400 --> 01:29:04,000
test.

1949
01:29:04,100 --> 01:29:08,000
So we're going to say if the audio card is low latency, then we will

1950
01:29:08,000 --> 01:29:11,200
go ahead and compute that right there.

1951
01:29:11,200 --> 01:29:12,700
So, okay, there we go.

1952
01:29:13,000 --> 01:29:14,500
So that's how we determine this.

1953
01:29:15,800 --> 01:29:17,400
That determines our latency.

1954
01:29:18,100 --> 01:29:19,300
That's pretty good.

1955
01:29:19,600 --> 01:29:20,700
We go through here.

1956
01:29:20,900 --> 01:29:26,800
We say compute the target cursor by using just the frame boundary.

1957
01:29:26,800 --> 01:29:27,700
Plus, however, many bytes.

1958
01:29:27,700 --> 01:29:30,800
We know we write per frame, when we are low latency, when we are high

1959
01:29:30,800 --> 01:29:31,400
latency.

1960
01:29:31,700 --> 01:29:33,500
We basically just use that.

1961
01:29:33,500 --> 01:29:35,600
Plus the safety margin, and that's the target.

1962
01:29:35,600 --> 01:29:36,600
We right to the Target.

1963
01:29:36,600 --> 01:29:37,000
Here.

1964
01:29:37,500 --> 01:29:40,000
We map the target back into the

1965
01:29:41,100 --> 01:29:46,000
The buffer properly and then we go ahead and do the B to write.

1966
01:29:46,700 --> 01:29:50,600
So yeah, pretty complicated computation ladies and gentlemen, that is

1967
01:29:50,600 --> 01:29:53,600
pretty darn complicated.

1968
01:29:54,200 --> 01:29:55,300
So so there we go.

1969
01:29:56,400 --> 01:29:57,000
There we go.

1970
01:29:57,100 --> 01:29:59,800
I guess that's really Mark modulo.

1971
01:29:59,800 --> 01:29:59,800
The

1972
01:30:00,000 --> 01:30:00,500
Bugs.

1973
01:30:00,800 --> 01:30:02,300
That's really what we wanted to do.

1974
01:30:02,500 --> 01:30:05,300
So now we've got one more thing to deal with.

1975
01:30:05,300 --> 01:30:08,700
Well, we got two more things to do deal with really, but so, the

1976
01:30:08,700 --> 01:30:12,800
expected sound bytes per frame is not defined yet, right?

1977
01:30:12,800 --> 01:30:14,200
We got to deal with that.

1978
01:30:14,500 --> 01:30:16,400
So let's go ahead and deal with that.

1979
01:30:17,100 --> 01:30:21,700
So, we've got a Define that in a second, and then we've got that

1980
01:30:21,700 --> 01:30:25,500
safety B, we've got sound output, safety B.

1981
01:30:25,500 --> 01:30:29,900
That we've got to deal with, as well at some point, and then,

1982
01:30:30,000 --> 01:30:32,200
We've got, let's see.

1983
01:30:32,200 --> 01:30:34,000
Undeclared identifier for that.

1984
01:30:34,000 --> 01:30:34,900
That's fine.

1985
01:30:35,600 --> 01:30:36,400
So much frame.

1986
01:30:36,400 --> 01:30:37,200
Safety, B.

1987
01:30:37,200 --> 01:30:38,400
Do not a member.

1988
01:30:38,600 --> 01:30:42,600
Last play cursor is not actually there.

1989
01:30:42,600 --> 01:30:45,700
So we're going to actually have to do, just play coarser and right

1990
01:30:45,700 --> 01:30:46,400
cursor.

1991
01:30:47,100 --> 01:30:48,800
So we'll get rid of that.

1992
01:30:49,500 --> 01:30:50,800
Let's take a look here.

1993
01:30:50,800 --> 01:30:52,200
B to write bikes.

1994
01:30:52,200 --> 01:30:54,800
Do do, do do, do, do, do so.

1995
01:30:54,800 --> 01:30:56,400
These are unfortunately.

1996
01:30:57,300 --> 01:30:58,900
Yeah, not known anymore.

1997
01:30:58,900 --> 01:30:59,800
So

1998
01:31:01,100 --> 01:31:03,100
Is there a way I can do this?

1999
01:31:03,100 --> 01:31:06,800
B to lock is there?

2000
01:31:07,000 --> 01:31:07,900
There we go.

2001
01:31:09,300 --> 01:31:14,600
Okay, so plate to lock Target, cursor, B to write play cursor, right

2002
01:31:14,600 --> 01:31:15,100
cursor.

2003
01:31:15,100 --> 01:31:16,900
Audio latency B, Ru latency s.

2004
01:31:16,900 --> 01:31:19,500
So we're still out putting all that and that's good.

2005
01:31:19,500 --> 01:31:20,000
Okay.

2006
01:31:21,200 --> 01:31:26,500
So so our problem here, besides defining these things.

2007
01:31:27,800 --> 01:31:31,200
Our problem here is basically that we still need to tell the game.

2008
01:31:31,500 --> 01:31:35,900
How many samples it should output and that's kind of

2009
01:31:38,400 --> 01:31:43,000
That basically gives us another audio latency problem because where we

2010
01:31:43,000 --> 01:31:47,000
want to actually do, the right is right here, but the game doesn't

2011
01:31:47,000 --> 01:31:48,500
actually the game.

2012
01:31:48,600 --> 01:31:53,700
Unfortunately doesn't actually hasn't actually updated.

2013
01:31:54,100 --> 01:31:56,800
If we were to put this before in order to tell the game how many

2014
01:31:56,800 --> 01:32:01,800
samples to write then we would have to we wouldn't actually have an

2015
01:32:01,800 --> 01:32:04,300
accurate read on where the play cursor was going to be when we needed

2016
01:32:04,300 --> 01:32:04,800
to fill.

2017
01:32:05,400 --> 01:32:07,900
So this is what we actually want to do for our fill.

2018
01:32:08,300 --> 01:32:11,200
And we can assume basically that the sound buffer here.

2019
01:32:12,100 --> 01:32:17,000
We basically need that sound buffer to basically always be enough that

2020
01:32:17,000 --> 01:32:18,700
we wouldn't underflow it here.

2021
01:32:19,400 --> 01:32:22,900
And so what we can do there, I guess is just kind of have a thing.

2022
01:32:22,900 --> 01:32:26,900
Which says we're generally going to write enough.

2023
01:32:27,900 --> 01:32:32,900
We're we want to make sure this B to right value never under flows is

2024
01:32:32,900 --> 01:32:34,000
basically the problem.

2025
01:32:34,700 --> 01:32:37,900
And so what is the maximum value that that b to right?

2026
01:32:38,000 --> 01:32:39,700
It could possibly be.

2027
01:32:40,100 --> 01:32:45,000
I don't actually know, I guess it could be, but expected frame,

2028
01:32:45,000 --> 01:32:48,400
boundary B, plus the expected sound bites per frame.

2029
01:32:48,400 --> 01:32:50,700
So in this case, it could actually be pretty high.

2030
01:32:53,000 --> 01:32:53,500
Yeah.

2031
01:32:54,100 --> 01:32:59,000
So if we move this before here, then we have another thing.

2032
01:32:59,000 --> 01:32:59,800
We've got to count.

2033
01:33:00,000 --> 01:33:02,800
Um, yeah, you can see how tricky the spacely is.

2034
01:33:02,800 --> 01:33:03,200
Right?

2035
01:33:03,500 --> 01:33:06,700
So what we want to do is we want to if maybe well one thing we could

2036
01:33:06,700 --> 01:33:10,500
do is we could then ask for the audio right here for the game and mix

2037
01:33:10,500 --> 01:33:11,000
it on demand.

2038
01:33:11,000 --> 01:33:15,800
And as long as we were able to keep that to within a millisecond or

2039
01:33:15,800 --> 01:33:20,000
two, then that would be okay potentially, but if it was going to be

2040
01:33:20,000 --> 01:33:21,600
long, I don't know.

2041
01:33:21,800 --> 01:33:23,100
So it's pretty, it's pretty tricky.

2042
01:33:23,500 --> 01:33:24,700
It's pretty tricky.

2043
01:33:25,100 --> 01:33:26,000
Should we do that?

2044
01:33:26,400 --> 01:33:27,600
Should we not do that?

2045
01:33:28,100 --> 01:33:29,100
Are we at risk?

2046
01:33:29,100 --> 01:33:30,000
There is

2047
01:33:30,000 --> 01:33:31,900
I guess, I guess let's, let's do it.

2048
01:33:31,900 --> 01:33:32,400
I don't know.

2049
01:33:32,500 --> 01:33:34,900
I'm feeling I'm feeling experimental today.

2050
01:33:35,100 --> 01:33:36,400
So I say we just do it.

2051
01:33:36,500 --> 01:33:39,400
So basically what's going to happen here is I'm going to say that we

2052
01:33:39,400 --> 01:33:42,700
actually just go ahead and we get that sound straight out of here.

2053
01:33:42,700 --> 01:33:45,700
So we go in here and we say, all right.

2054
01:33:46,300 --> 01:33:47,100
What are we going to do?

2055
01:33:47,100 --> 01:33:53,600
We're going to say internal void game, get sound samples.

2056
01:33:53,900 --> 01:33:55,500
So that's a call in to the game.

2057
01:33:55,700 --> 01:33:59,900
And we passed that everything except the graphics and

2058
01:34:00,100 --> 01:34:00,700
Don't come in.

2059
01:34:00,700 --> 01:34:03,800
So we passed that the game memory and we passed that the sound buffer

2060
01:34:04,200 --> 01:34:08,200
and basically we will say that the game just does its mixed down right

2061
01:34:08,200 --> 01:34:08,800
there.

2062
01:34:09,700 --> 01:34:10,800
Right into the buffer.

2063
01:34:11,200 --> 01:34:15,300
So basically the game no longer gets the sound buffer at all.

2064
01:34:15,900 --> 01:34:19,100
And so the game has to give a sound buffers on demand like this.

2065
01:34:19,300 --> 01:34:22,600
So in here, we will simply say, let's go ahead.

2066
01:34:22,600 --> 01:34:26,000
And as soon as we know, we know how many bytes to write, we will

2067
01:34:26,000 --> 01:34:27,700
actually do the right right here.

2068
01:34:27,800 --> 01:34:29,800
And that has to be low latency, which

2069
01:34:29,900 --> 01:34:31,400
Is the thing that makes me nervous about it.

2070
01:34:31,400 --> 01:34:35,100
Obviously, that's the reason that I was kind of like, oh, sounds

2071
01:34:35,100 --> 01:34:35,600
dangerous.

2072
01:34:35,900 --> 01:34:39,100
Well, well, you know, like I said, sometimes sometimes you just got to

2073
01:34:39,100 --> 01:34:42,900
do stuff and then you got to fight through it and see if there's

2074
01:34:42,900 --> 01:34:44,300
something good on the other side.

2075
01:34:44,400 --> 01:34:48,700
And sometimes there isn't and it turned out to be bad.

2076
01:34:48,800 --> 01:34:52,500
It was a mistake and other times you come out with something really

2077
01:34:52,500 --> 01:34:52,800
cool.

2078
01:34:52,800 --> 01:34:55,600
And so sometimes you just got to do it and see.

2079
01:34:55,600 --> 01:34:58,000
And so this is this is basically what we're doing here is we're just

2080
01:34:58,000 --> 01:34:59,800
kind of fighting through it and going, can we get

2081
01:35:00,000 --> 01:35:02,600
Our can we get something cool out the other end and maybe there's a

2082
01:35:02,600 --> 01:35:05,800
few more refinements left that will have insights into and see.

2083
01:35:06,200 --> 01:35:07,400
But let's take a look here.

2084
01:35:08,400 --> 01:35:12,700
So, basically we'll get the sound samples right here and we will out

2085
01:35:12,700 --> 01:35:14,100
put them right here.

2086
01:35:14,100 --> 01:35:16,400
The other thing that we could do, which is pretty interesting.

2087
01:35:16,400 --> 01:35:19,700
If we wanted to is we could write directly into the sound buffer here.

2088
01:35:19,700 --> 01:35:24,300
Now, if we wanted to because we could change, we could change to doing

2089
01:35:24,300 --> 01:35:25,900
a passing, a ring buffer to the game.

2090
01:35:25,900 --> 01:35:29,000
We don't really, I don't think want to do that at this point, but

2091
01:35:29,000 --> 01:35:29,900
that's what we would do.

2092
01:35:30,000 --> 01:35:35,400
So, all right, we went in here and and we did that.

2093
01:35:35,500 --> 01:35:38,000
We now have our explanation in

2094
01:35:38,200 --> 01:35:41,000
Here, I might actually move this explanation kind of inside.

2095
01:35:41,300 --> 01:35:44,800
So basically, this is this is the explanation of what's happening in

2096
01:35:44,800 --> 01:35:45,400
here.

2097
01:35:46,400 --> 01:35:51,100
And that looks relatively clean to me at the moment.

2098
01:35:51,100 --> 01:35:53,700
So we get the that getting that sound samples, but I'm going to put a

2099
01:35:53,700 --> 01:35:54,400
note here.

2100
01:35:54,400 --> 01:35:57,000
I'm going to say at the moment.

2101
01:35:58,100 --> 01:35:59,800
This has to be

2102
01:36:00,700 --> 01:36:02,300
A very fast function.

2103
01:36:02,900 --> 01:36:09,900
It cannot be, let's say more than a millisecond or so, right?

2104
01:36:10,100 --> 01:36:14,700
So that's going to be important to keep our sound latency down.

2105
01:36:15,000 --> 01:36:15,500
All right.

2106
01:36:17,400 --> 01:36:21,500
So basically, we can always account for more of that by buffering up

2107
01:36:21,500 --> 01:36:23,200
and maybe we could measure things here.

2108
01:36:23,800 --> 01:36:30,500
I could say to do Casey, reduce the pressure on this functions

2109
01:36:30,900 --> 01:36:39,900
performance by measuring it or asking about it Etc.

2110
01:36:39,900 --> 01:36:42,000
We could we could think about doing some stuff there to make that a

2111
01:36:42,000 --> 01:36:45,100
little easier, but for now, let's actually say that that's the case.

2112
01:36:45,300 --> 01:36:46,600
So compiling this

2113
01:36:47,200 --> 01:36:49,000
We now have to go through and fix.

2114
01:36:49,000 --> 01:36:50,300
I left a bunch of stuff in there.

2115
01:36:50,300 --> 01:36:53,200
So game update and render no longer takes the sound buffer.

2116
01:36:54,000 --> 01:36:54,800
So that's got to happen.

2117
01:36:54,800 --> 01:36:56,200
So we'll fix that in a second.

2118
01:36:56,900 --> 01:36:58,700
We have the expected sound bites for frame.

2119
01:36:58,700 --> 01:36:59,700
We know what that is.

2120
01:36:59,900 --> 01:37:03,900
That's basically just the game update hurts which we had, right?

2121
01:37:04,000 --> 01:37:07,900
We've got the sound output, the total secondary buffer size.

2122
01:37:08,500 --> 01:37:11,500
Basically, we've got see samples per second.

2123
01:37:12,700 --> 01:37:16,600
We've got the samples per second times, the bytes per se.

2124
01:37:16,800 --> 01:37:20,800
Bowl again, to probably I'm going to go through and change some of

2125
01:37:20,800 --> 01:37:21,000
those.

2126
01:37:21,000 --> 01:37:22,500
We don't have to keep doing this multiplies.

2127
01:37:23,200 --> 01:37:24,600
/, the game update hurts.

2128
01:37:24,600 --> 01:37:27,500
That's how many sound bites we expect per frame, right?

2129
01:37:27,500 --> 01:37:30,600
Because we've got the bites for sample, coming out, the samples per

2130
01:37:30,600 --> 01:37:31,200
second.

2131
01:37:32,900 --> 01:37:34,900
That's going to be how many bytes per second.

2132
01:37:35,400 --> 01:37:37,500
And then we're going to, we're going to go ahead and see how many per

2133
01:37:37,500 --> 01:37:39,300
frame by dividing by the game update hurts.

2134
01:37:39,600 --> 01:37:42,600
So that should be stable computation.

2135
01:37:43,500 --> 01:37:44,100
Our safety.

2136
01:37:44,100 --> 01:37:48,300
B is something that we will Define kind of at the top when we first do

2137
01:37:48,300 --> 01:37:53,400
our sound output set up, so are and that is basically sort of like

2138
01:37:53,400 --> 01:37:54,700
what this latency sample count is.

2139
01:37:54,700 --> 01:37:56,700
So basically what we have to say, there is, how much do we think?

2140
01:37:56,700 --> 01:38:02,000
Well, I think we can safely probably say that the variability in our

2141
01:38:02,000 --> 01:38:02,100
game.

2142
01:38:02,300 --> 01:38:06,000
Time is probably not going to be more than half the game time, right?

2143
01:38:06,000 --> 01:38:11,400
So, our safety B is probably something like the samples per second

2144
01:38:11,900 --> 01:38:12,400
times.

2145
01:38:12,400 --> 01:38:18,800
The bytes per sample divided by the game update hurts, you know, / to.

2146
01:38:18,800 --> 01:38:21,300
I think that's a pretty safe estimate.

2147
01:38:21,500 --> 01:38:26,200
It's probably probably more like going to be more than like a more of

2148
01:38:26,200 --> 01:38:29,500
a quarter or a third I'd say because in general, I don't think we're

2149
01:38:29,500 --> 01:38:32,100
going to have that much variability in how

2150
01:38:32,200 --> 01:38:33,500
along the update takes.

2151
01:38:33,800 --> 01:38:38,800
So basically, I think we could probably do this a little bit lower so

2152
01:38:38,800 --> 01:38:39,500
to do.

2153
01:38:42,200 --> 01:38:48,300
Basically actually compute this variance and see what the lowest

2154
01:38:49,000 --> 01:38:50,700
reasonable value.

2155
01:38:50,700 --> 01:38:51,200
Is.

2156
01:38:51,500 --> 01:38:52,400
That makes sense?

2157
01:38:52,700 --> 01:38:53,800
Kind of get that in there.

2158
01:38:54,000 --> 01:38:54,800
Take a look at it.

2159
01:38:55,600 --> 01:38:59,500
And then I just got to add that to this thing here.

2160
01:39:00,100 --> 01:39:01,200
The d word.

2161
01:39:02,300 --> 01:39:03,700
Safety B.

2162
01:39:04,000 --> 01:39:04,500
There we go.

2163
01:39:05,900 --> 01:39:08,800
Warning treat is error game update and render, right?

2164
01:39:08,800 --> 01:39:13,000
So, basically, now we have to go in here and split this out.

2165
01:39:13,100 --> 01:39:15,600
If you remember we decided we change the definition of these

2166
01:39:15,600 --> 01:39:16,200
functions.

2167
01:39:16,600 --> 01:39:19,700
So we got to go in here and and basically

2168
01:39:21,900 --> 01:39:28,300
And basically split our functions into one that updates the sound and

2169
01:39:28,300 --> 01:39:31,000
one that updates the game memory.

2170
01:39:31,000 --> 01:39:37,500
So what we need to do here is we need to take this out right and get

2171
01:39:37,500 --> 01:39:39,900
rid of that because we don't actually have that to do anymore.

2172
01:39:40,300 --> 01:39:43,400
We're going to do the sound buffer output for the tone hurts.

2173
01:39:44,100 --> 01:39:47,500
And basically, what we need to do is we need to grab our game State.

2174
01:39:47,500 --> 01:39:51,600
And so, our game state is basically just again, that

2175
01:39:51,700 --> 01:39:54,100
Storage is how we access it.

2176
01:39:54,300 --> 01:39:55,400
So let's go there.

2177
01:39:55,400 --> 01:39:57,300
Get that out from behind my head.

2178
01:39:58,600 --> 01:39:59,300
Let's see.

2179
01:39:59,300 --> 01:40:02,800
And we need to change this to be the proper function definition.

2180
01:40:03,400 --> 01:40:04,600
It is this one now.

2181
01:40:04,900 --> 01:40:06,200
So there we go.

2182
01:40:06,500 --> 01:40:08,600
And go.

2183
01:40:08,700 --> 01:40:09,300
There we go.

2184
01:40:09,300 --> 01:40:09,800
Now,

2185
01:40:11,000 --> 01:40:16,800
Whew, man, we've got about 15 minutes before we would call this time

2186
01:40:16,800 --> 01:40:17,400
for Q&A.

2187
01:40:17,400 --> 01:40:21,200
Probably sadly.

2188
01:40:21,200 --> 01:40:22,300
I'm expecting that.

2189
01:40:22,300 --> 01:40:25,300
There's a ton of bugs in there because man that was a lot of code.

2190
01:40:25,800 --> 01:40:27,400
So we still have a lot of work to do.

2191
01:40:27,400 --> 01:40:30,200
We've still got a lot of work to do in the next 20 minutes or so.

2192
01:40:31,000 --> 01:40:33,600
So let's run it just to see if we just full-on fail.

2193
01:40:34,600 --> 01:40:39,800
Oh, well, let's let's let's turn off the infinite Loop that we that we

2194
01:40:39,800 --> 01:40:40,500
had their

2195
01:40:40,800 --> 01:40:43,100
Of all and then see where we're at.

2196
01:40:44,700 --> 01:40:46,800
I am at the very least.

2197
01:40:46,800 --> 01:40:51,600
I am shocked that that still gives us clean sound output.

2198
01:40:51,600 --> 01:40:52,400
Ladies and gentlemen.

2199
01:40:57,100 --> 01:40:59,100
And it actually feels fairly low latency.

2200
01:40:59,100 --> 01:41:06,900
So we didn't introduce any weird bugs, which is kind of crazy, to say

2201
01:41:06,900 --> 01:41:07,500
the least.

2202
01:41:07,500 --> 01:41:08,900
That is kind of crazy.

2203
01:41:10,800 --> 01:41:14,200
I am, I am absolutely stunned.

2204
01:41:14,200 --> 01:41:14,800
That that worked.

2205
01:41:14,800 --> 01:41:15,700
The first time.

2206
01:41:16,100 --> 01:41:19,900
I can only assume that there actually is a bug in there somewhere that

2207
01:41:19,900 --> 01:41:22,800
we just don't find because we don't have testing for it yet.

2208
01:41:22,900 --> 01:41:26,300
That is kind of crazy.

2209
01:41:27,000 --> 01:41:31,500
What we just did in an hour and 45 minutes of thinking and programming

2210
01:41:31,500 --> 01:41:33,500
and not a single bug.

2211
01:41:33,900 --> 01:41:36,200
That's that's wrong.

2212
01:41:36,300 --> 01:41:39,700
Tom, Forsythe says, must be a bug and I agree with him.

2213
01:41:40,300 --> 01:41:42,800
There's no way that should have worked the first time.

2214
01:41:43,600 --> 01:41:47,300
So, so basically what that means, we can just pretty much.

2215
01:41:47,300 --> 01:41:52,100
Be sure that what that means is, there's got to be a bug in there that

2216
01:41:52,100 --> 01:41:55,100
we just aren't seeing because we're our test cases to simple.

2217
01:41:55,100 --> 01:41:56,600
We don't know what we're, you know.

2218
01:41:56,800 --> 01:41:58,800
We're not doing enough there.

2219
01:42:03,000 --> 01:42:03,700
Yeah.

2220
01:42:05,700 --> 01:42:08,900
Basically, somebody on the stream, just says, I hate it when you

2221
01:42:08,900 --> 01:42:12,300
compile and it works, the first time I could not agree more because

2222
01:42:12,600 --> 01:42:15,000
it's it's just so suspicious.

2223
01:42:15,200 --> 01:42:16,900
You want to fix some bugs in it.

2224
01:42:16,900 --> 01:42:20,000
So you can feel like you found them because, you know, they're there.

2225
01:42:20,300 --> 01:42:22,900
And so now you just feel like there's bugs that are hiding.

2226
01:42:22,900 --> 01:42:23,700
It's never like.

2227
01:42:23,700 --> 01:42:25,400
Oh, I did a good job, right?

2228
01:42:25,400 --> 01:42:26,500
You never think that.

2229
01:42:29,100 --> 01:42:34,100
So yeah, yeah, so well, well, there we go.

2230
01:42:34,400 --> 01:42:38,500
So basically let's let's take the 15 minutes and I'm basically going

2231
01:42:38,500 --> 01:42:39,300
to draw.

2232
01:42:39,300 --> 01:42:43,100
I'm going to improve our drawing routine so we can kind of see a

2233
01:42:43,100 --> 01:42:44,100
little bit more.

2234
01:42:44,900 --> 01:42:46,700
Basically what what's going on there?

2235
01:42:46,700 --> 01:42:47,400
Right?

2236
01:42:48,200 --> 01:42:50,100
Let's go ahead and improve our drawing.

2237
01:42:50,100 --> 01:42:51,700
My routine a little bit more.

2238
01:42:52,300 --> 01:42:56,800
So what I want to do here is I want to when we draw the sound, the

2239
01:42:56,800 --> 01:42:58,700
sink display, what I want to do.

2240
01:42:58,900 --> 01:43:02,700
We start drawing some other things like when we have the play, Chris,

2241
01:43:02,700 --> 01:43:03,000
the Red Cross.

2242
01:43:03,000 --> 01:43:06,400
I want to draw where we actually did our right.

2243
01:43:06,600 --> 01:43:12,800
And I want to I want to pull out from there.

2244
01:43:13,500 --> 01:43:13,700
What?

2245
01:43:13,700 --> 01:43:14,900
Just the current right?

2246
01:43:14,900 --> 01:43:18,900
Chris are in play Chris or are so we can see those a little bit more

2247
01:43:19,300 --> 01:43:20,900
cleanly, if that makes sense.

2248
01:43:22,900 --> 01:43:25,600
Stretch time time to stretch people.

2249
01:43:25,700 --> 01:43:27,100
It's time to stretch.

2250
01:43:28,400 --> 01:43:28,900
Mmm.

2251
01:43:29,400 --> 01:43:29,900
Yeah.

2252
01:43:31,600 --> 01:43:34,400
Early morning coding here.

2253
01:43:35,000 --> 01:43:39,600
Well, afternoon afternoon coding, not used to it for handmade hero

2254
01:43:40,300 --> 01:43:41,800
after handmade hero.

2255
01:43:42,500 --> 01:43:42,700
Yeah.

2256
01:43:42,700 --> 01:43:43,500
What are you gonna do?

2257
01:43:43,700 --> 01:43:46,000
Alright, so that was crazy.

2258
01:43:46,100 --> 01:43:47,600
And this is low level stuff to.

2259
01:43:47,600 --> 01:43:48,500
I'm surprised that worked.

2260
01:43:48,500 --> 01:43:49,700
I mean, we're writing

2261
01:43:51,300 --> 01:43:54,600
We're essentially writing the game engine like low level stuff here

2262
01:43:54,600 --> 01:43:56,000
that lowest of the low.

2263
01:43:56,800 --> 01:43:58,500
So yeah, that was crazy.

2264
01:43:58,500 --> 01:44:00,300
That work the first time, I don't know what's going on.

2265
01:44:00,300 --> 01:44:02,000
Usually you expect stuff to work the first time.

2266
01:44:02,000 --> 01:44:05,600
Once you're a little higher up in the food chain thing is can work the

2267
01:44:05,600 --> 01:44:08,000
first time because everything is fairly logical at that point and

2268
01:44:08,000 --> 01:44:10,200
you've done all the finicky stuff and you've kind of baked it down

2269
01:44:10,200 --> 01:44:15,500
into a language that's easy for you, but I wouldn't expect when you're

2270
01:44:15,500 --> 01:44:17,600
doing when you're doing the hardcore stuff.

2271
01:44:18,200 --> 01:44:21,000
You don't expect it to work the first time you don't

2272
01:44:21,500 --> 01:44:22,200
All right.

2273
01:44:22,500 --> 01:44:26,600
So, well, what I want to do here is I want to start passing to the

2274
01:44:26,600 --> 01:44:27,500
sink display.

2275
01:44:27,700 --> 01:44:30,200
I want to say which marker is current.

2276
01:44:30,300 --> 01:44:32,200
I wanted to say, which is the current marker.

2277
01:44:33,200 --> 01:44:33,700
Right?

2278
01:44:33,700 --> 01:44:35,700
So we can just highlight it.

2279
01:44:35,700 --> 01:44:39,400
And so, basically, what I'm going to do is I'm going to say in this

2280
01:44:39,400 --> 01:44:42,900
thing, if marker index equals current marker Index, right?

2281
01:44:42,900 --> 01:44:48,500
Then I'm going to use a highlighted color, current marker index, and

2282
01:44:48,500 --> 01:44:49,500
if not, then not.

2283
01:44:49,500 --> 01:44:54,200
So I'm going to do a thing for play color, equals this and right,

2284
01:44:54,200 --> 01:44:56,500
color equals that sort of thing.

2285
01:44:56,500 --> 01:44:59,800
And then I'm going to set them equal here.

2286
01:45:00,000 --> 01:45:03,700
I believe the play cursor is our right.

2287
01:45:03,700 --> 01:45:10,400
Curse is a, is our bright one and the right cursor, right?

2288
01:45:10,600 --> 01:45:21,600
Color and is because that that so right color and play color that and

2289
01:45:21,600 --> 01:45:25,100
then I'm going to initialize those by default to something a little

2290
01:45:25,100 --> 01:45:25,900
bit dimmer.

2291
01:45:26,900 --> 01:45:29,000
Although I guess we don't, you know what I could do.

2292
01:45:29,200 --> 01:45:29,900
I could just change.

2293
01:45:30,000 --> 01:45:31,800
Ange the top and bottom actually that.

2294
01:45:31,800 --> 01:45:34,900
And so we basically just have to kind of rows going that that might be

2295
01:45:34,900 --> 01:45:35,500
smarter.

2296
01:45:36,000 --> 01:45:41,700
So let's say that this is pad Y, and this is pad y plus line-height

2297
01:45:41,700 --> 01:45:47,100
like that in line height equals, maybe 32 or 64 or something like

2298
01:45:47,100 --> 01:45:47,600
that.

2299
01:45:49,000 --> 01:45:53,000
And so, basically what we'll do is we'll just basically say, okay.

2300
01:45:55,600 --> 01:46:01,500
That's the top and bottom, but in the case, where the marker index 0,

2301
01:46:01,500 --> 01:46:06,700
and whoops, doo-doo-doo-doo-doo-doo-doo, we still want to do this,

2302
01:46:07,800 --> 01:46:10,700
because I think it's good to pull those out because we may want to

2303
01:46:10,700 --> 01:46:13,700
change the color as well or something like that.

2304
01:46:13,800 --> 01:46:16,700
So let's get that back in there.

2305
01:46:17,000 --> 01:46:17,400
Boop.

2306
01:46:17,400 --> 01:46:17,800
Boop.

2307
01:46:18,100 --> 01:46:22,600
And now we go ahead and take our top and bottom will just go ahead and

2308
01:46:22,600 --> 01:46:25,000
plus equals those to be

2309
01:46:25,300 --> 01:46:28,100
Let's say, 2 times the line height or some of that, or, you know,

2310
01:46:28,100 --> 01:46:31,500
what, we'll do the line height plus the pad y.

2311
01:46:31,500 --> 01:46:34,300
So, we'll just, we'll just move it down, like that.

2312
01:46:34,800 --> 01:46:37,900
Yeah, and so now, we're not actually passing anything in there.

2313
01:46:37,900 --> 01:46:40,100
So we got to come in and say what is that?

2314
01:46:40,100 --> 01:46:41,100
Current marker?

2315
01:46:42,100 --> 01:46:46,800
And so, the current marker is whatever this was before.

2316
01:46:47,000 --> 01:46:49,600
So it's basically the debug, it's the previous.

2317
01:46:50,800 --> 01:46:54,300
It's the previous one of the debug time marker index.

2318
01:46:54,800 --> 01:46:55,000
So

2319
01:46:55,100 --> 01:46:59,200
Basically, we come in here and we say that debug time markers.

2320
01:47:00,400 --> 01:47:02,100
What is that value?

2321
01:47:02,300 --> 01:47:04,100
It's not actually this one.

2322
01:47:04,400 --> 01:47:08,100
It's this one back one.

2323
01:47:08,400 --> 01:47:13,900
But remember, we don't actually we, if we subtract 1 from it, we may

2324
01:47:13,900 --> 01:47:14,200
wrap.

2325
01:47:14,200 --> 01:47:17,400
We don't actually care for right now.

2326
01:47:17,400 --> 01:47:18,100
Note.

2327
01:47:18,500 --> 01:47:25,000
This is wrong on the zeroeth index, or I should say current is around.

2328
01:47:25,200 --> 01:47:26,500
We're just comparing to it.

2329
01:47:26,800 --> 01:47:27,900
That's fine for now.

2330
01:47:28,300 --> 01:47:30,000
So maybe I'll see you in there.

2331
01:47:30,000 --> 01:47:31,100
Fix that in a second.

2332
01:47:31,300 --> 01:47:32,700
Let's just see what that does.

2333
01:47:33,400 --> 01:47:36,100
Yeah, so that's what we, that's what we want.

2334
01:47:36,200 --> 01:47:36,700
You can kind of see.

2335
01:47:36,700 --> 01:47:40,000
Now we've got the historical ones are in there.

2336
01:47:40,900 --> 01:47:43,600
But but the the other ones are in there as well.

2337
01:47:43,800 --> 01:47:46,600
Let's go ahead and pause that for a second as well.

2338
01:47:46,600 --> 01:47:49,300
So we can take a look at it because I can just click on there.

2339
01:47:52,900 --> 01:47:55,300
Yeah, wow, so, at least this confirms what?

2340
01:47:55,300 --> 01:47:58,600
We were measuring to in the diagram, you can see the difference

2341
01:47:58,800 --> 01:47:59,700
between the play.

2342
01:48:00,000 --> 01:48:00,700
In the right cursor.

2343
01:48:00,700 --> 01:48:03,000
Is roughly the frame size, right?

2344
01:48:04,000 --> 01:48:05,300
Exactly what we would think.

2345
01:48:06,900 --> 01:48:07,400
Yeah.

2346
01:48:08,800 --> 01:48:09,200
Yeah.

2347
01:48:14,600 --> 01:48:17,100
All right, so that's fine.

2348
01:48:18,000 --> 01:48:19,200
That's all well and good.

2349
01:48:19,900 --> 01:48:24,500
Let's take a look here and see what else we got going.

2350
01:48:24,700 --> 01:48:28,700
So what I want to do now is I also want to record with our markers.

2351
01:48:28,900 --> 01:48:33,400
I want to record a basically change what this records to record some

2352
01:48:33,400 --> 01:48:34,300
additional stuff.

2353
01:48:34,500 --> 01:48:38,300
This is where the play cursor and the right cursor were at the, at the

2354
01:48:38,300 --> 01:48:42,700
time of the actual at the time of the flip.

2355
01:48:42,700 --> 01:48:44,200
So this is the flip play cursor.

2356
01:48:44,600 --> 01:48:48,900
And the flip right cursor, but we basically want to also have the

2357
01:48:48,900 --> 01:48:55,700
output play cursor and the output right cursor, right output, right?

2358
01:48:55,900 --> 01:49:02,400
For a sir, see where those were and we want to do the output location.

2359
01:49:02,600 --> 01:49:08,100
So that's like the output byte to lock and the output byte count.

2360
01:49:08,100 --> 01:49:10,700
So basically, this is the range, we actually filled.

2361
01:49:11,400 --> 01:49:14,000
So, basically, all I'm saying is back in here.

2362
01:49:14,300 --> 01:49:18,100
So, when we do this thing, when we do this, excuse me.

2363
01:49:19,400 --> 01:49:24,400
When we do this, this sort of save of the value, right?

2364
01:49:24,400 --> 01:49:26,900
When we, when we actually do this thing here, where we actually save

2365
01:49:26,900 --> 01:49:27,600
the value.

2366
01:49:28,600 --> 01:49:33,700
I want to actually do this across, I want to do this multiple times.

2367
01:49:33,800 --> 01:49:36,100
So basically this debug time, marker, index thing.

2368
01:49:36,500 --> 01:49:39,700
We're only going to increment it down at the end here.

2369
01:49:40,900 --> 01:49:41,800
If that makes sense.

2370
01:49:41,800 --> 01:49:42,600
Why did that do?

2371
01:49:42,800 --> 01:49:44,000
Well, because I just deleted it.

2372
01:49:44,000 --> 01:49:44,400
There we go.

2373
01:49:45,200 --> 01:49:48,100
So basically at the end of this guy, we're going to do.

2374
01:49:49,100 --> 01:49:52,600
You this in fact, we could actually do this, just to enforce the fact

2375
01:49:52,600 --> 01:49:54,700
that it's being done at the very end.

2376
01:49:54,700 --> 01:49:57,600
We'll do it down here in its own little block.

2377
01:49:57,900 --> 01:50:00,100
So we're basically going to have a little thing that there's just

2378
01:50:00,100 --> 01:50:02,000
increments that at the very end.

2379
01:50:02,500 --> 01:50:05,000
So that way, we can also write to this marker.

2380
01:50:05,300 --> 01:50:07,600
The same audio marker for this Frame.

2381
01:50:07,600 --> 01:50:09,400
We can write to it up here.

2382
01:50:09,700 --> 01:50:14,500
So, basically, in the case, if and main internal, basically, we will

2383
01:50:14,500 --> 01:50:18,800
be able to write to the same marker that will be written to down

2384
01:50:18,800 --> 01:50:18,900
there.

2385
01:50:19,000 --> 01:50:21,200
There, and that way, we can get a little more information.

2386
01:50:21,200 --> 01:50:25,600
In fact, I guess I've already got a handmade internal in here as well.

2387
01:50:25,700 --> 01:50:26,700
So there we go.

2388
01:50:28,900 --> 01:50:35,100
We really probably don't need to do this again, we could decide to,

2389
01:50:35,600 --> 01:50:38,300
but I don't think we really need to because we've already got this one

2390
01:50:38,700 --> 01:50:40,300
up here, so we can do this.

2391
01:50:40,300 --> 01:50:44,100
We could see how far it moved after the game get sound samples, but

2392
01:50:44,100 --> 01:50:45,900
you know, that's that's a separate thing.

2393
01:50:46,000 --> 01:50:46,300
All right.

2394
01:50:46,300 --> 01:50:49,600
So anyway, we're going to take a look at the the marker here.

2395
01:50:50,200 --> 01:50:54,600
We're going to go ahead and write all of these other values into it

2396
01:50:54,600 --> 01:50:54,800
will.

2397
01:50:54,800 --> 01:50:58,500
Do the output play cursor, will do the out.

2398
01:50:58,600 --> 01:50:58,900
Output.

2399
01:50:58,900 --> 01:50:59,800
Right cursor.

2400
01:51:00,000 --> 01:51:04,200
And those are just the things that we just write output, right cursor

2401
01:51:05,100 --> 01:51:07,200
and the output play cursor.

2402
01:51:07,900 --> 01:51:13,700
We will then do the output location and that is the B to lock, right?

2403
01:51:14,100 --> 01:51:19,900
And the output byte count by count and that is the B to, right?

2404
01:51:20,100 --> 01:51:23,600
And so now we've recorded that stuff properly.

2405
01:51:24,000 --> 01:51:28,900
And all we have to do now is down in the other marker where we're

2406
01:51:28,900 --> 01:51:29,600
writing these things.

2407
01:51:29,600 --> 01:51:29,900
These are

2408
01:51:30,000 --> 01:51:34,600
Actually, flip play cursor and flip right cursor, right?

2409
01:51:34,700 --> 01:51:39,000
So what I'd like to do now, so we're recording all of that

2410
01:51:39,000 --> 01:51:41,500
information, which is kind of handy.

2411
01:51:42,100 --> 01:51:43,700
So, here's the flip play cursor.

2412
01:51:43,700 --> 01:51:45,100
Here's the flip right, cursor.

2413
01:51:45,100 --> 01:51:47,600
Those are now there.

2414
01:51:48,100 --> 01:51:48,600
Excuse me.

2415
01:51:50,500 --> 01:51:50,900
Oops.

2416
01:51:55,300 --> 01:51:57,600
Those are now there and we should see exactly what we saw before.

2417
01:51:57,600 --> 01:51:57,800
Now.

2418
01:51:57,800 --> 01:51:59,000
It should be no change.

2419
01:51:59,400 --> 01:52:05,500
Oops, except there is, oh, what did I do wrong there?

2420
01:52:05,500 --> 01:52:08,500
Did I accidentally update that?

2421
01:52:09,400 --> 01:52:10,300
Oh, yeah.

2422
01:52:10,300 --> 01:52:10,800
Awesome.

2423
01:52:11,200 --> 01:52:11,800
That's good.

2424
01:52:12,100 --> 01:52:16,000
When we actually wrap this guy, we need to we need to actually do the

2425
01:52:16,000 --> 01:52:16,300
rap.

2426
01:52:16,300 --> 01:52:18,900
Notice how asserts save you time basically?

2427
01:52:18,900 --> 01:52:22,200
Anytime you can if you can assert the stuff that you know, to be true.

2428
01:52:23,300 --> 01:52:24,900
It definitely helps catch bugs.

2429
01:52:25,200 --> 01:52:26,500
Alright, so there we go.

2430
01:52:27,000 --> 01:52:31,800
We're kind of in, we're kind of in a vacuum where we started land and

2431
01:52:31,800 --> 01:52:32,500
that's good.

2432
01:52:32,600 --> 01:52:34,600
Everything looks about right.

2433
01:52:34,900 --> 01:52:36,000
So that's Happy.

2434
01:52:37,000 --> 01:52:37,500
Okay.

2435
01:52:37,900 --> 01:52:41,000
So now what we want to do is actually draw that actual information

2436
01:52:41,000 --> 01:52:41,800
that we had.

2437
01:52:42,000 --> 01:52:42,500
Right?

2438
01:52:42,500 --> 01:52:46,500
So we go into here to the, the thing in, this is the to do, we're

2439
01:52:46,500 --> 01:52:48,500
working on right now, drove over writing the sound.

2440
01:52:48,900 --> 01:52:53,200
So, in the case, where we have, the current marker index, I'm going to

2441
01:52:53,200 --> 01:52:55,000
draw some additional.

2442
01:52:55,100 --> 01:52:57,100
Oil information, right?

2443
01:52:57,300 --> 01:53:00,100
I'm going to go ahead and draw some additional stuff.

2444
01:53:00,200 --> 01:53:01,900
In the case where we have it.

2445
01:53:01,900 --> 01:53:03,900
I want to draw all the rest of this stuff.

2446
01:53:04,100 --> 01:53:08,500
So where do we actually have, what actual information do we have here

2447
01:53:09,400 --> 01:53:10,000
in there?

2448
01:53:10,200 --> 01:53:11,900
I've got the output play cursor.

2449
01:53:12,500 --> 01:53:16,100
So that's that's coming up.

2450
01:53:16,200 --> 01:53:18,900
Oops, output play cursor.

2451
01:53:18,900 --> 01:53:21,400
I've got the output right cursor, right?

2452
01:53:22,400 --> 01:53:24,400
And I've got,

2453
01:53:25,000 --> 01:53:27,200
Some more stuff here.

2454
01:53:27,200 --> 01:53:29,800
I've got the output location, right?

2455
01:53:29,800 --> 01:53:32,700
And then I've also got the output byte count.

2456
01:53:32,700 --> 01:53:36,400
Now the output byte count is a little bit harder to draw.

2457
01:53:36,400 --> 01:53:40,600
We can do it by basically doing this marker output location.

2458
01:53:40,600 --> 01:53:43,600
Plus this marker output byte count, but we do have one problem with

2459
01:53:43,600 --> 01:53:47,700
that which is that could write off the end because remember we're not

2460
01:53:47,700 --> 01:53:49,600
actually checking this value.

2461
01:53:49,600 --> 01:53:53,400
So what we should probably do here because because again, this this

2462
01:53:53,400 --> 01:53:55,000
there's a circular this is

2463
01:53:55,100 --> 01:53:55,800
A circular, right?

2464
01:53:55,800 --> 01:53:59,100
So the number of bytes could wrap around the buffer and we don't want

2465
01:53:59,100 --> 01:53:59,900
to actually overcome.

2466
01:54:00,000 --> 01:54:01,200
Rawr screen.

2467
01:54:01,400 --> 01:54:05,600
So what we could do here is just check our X if our X is greater than

2468
01:54:05,600 --> 01:54:06,600
equal to 0.

2469
01:54:07,700 --> 01:54:11,400
And our X is less than the back buffer width, right?

2470
01:54:11,700 --> 01:54:15,100
Then we can we can actually draw otherwise, we won't draw.

2471
01:54:15,200 --> 01:54:15,600
Right?

2472
01:54:15,600 --> 01:54:16,200
Makes sense.

2473
01:54:17,000 --> 01:54:21,500
And in fact, we could even do that in the actual check here, we could

2474
01:54:21,500 --> 01:54:25,600
do it right here, just to make sure that basically anyone who draws

2475
01:54:25,600 --> 01:54:27,400
this line is bounded there.

2476
01:54:28,600 --> 01:54:29,100
Excuse me.

2477
01:54:30,700 --> 01:54:32,200
Why do I still have a global back?

2478
01:54:32,200 --> 01:54:33,000
Buffer, typed in there?

2479
01:54:33,000 --> 01:54:33,700
Don't do that.

2480
01:54:33,700 --> 01:54:35,000
You should all be back over.

2481
01:54:35,500 --> 01:54:36,100
There we go.

2482
01:54:36,800 --> 01:54:38,400
So I'm going to go ahead and check that in there.

2483
01:54:39,000 --> 01:54:42,800
I'm also going to do one other thing in there, which is, we might as

2484
01:54:42,800 --> 01:54:43,000
well.

2485
01:54:43,000 --> 01:54:48,200
Also check the bottom and the top basically, if the top is less than

2486
01:54:48,200 --> 01:54:51,200
or equal to 0, right?

2487
01:54:51,300 --> 01:54:54,000
If the top is less than equal to 0, the top can just be equal to 0.

2488
01:54:54,000 --> 01:54:57,500
So that clips that basically Clips we're writing to and the same with

2489
01:54:57,500 --> 01:54:58,100
the bottom.

2490
01:54:58,600 --> 01:55:00,300
If the bottom is greater than

2491
01:55:01,300 --> 01:55:06,100
Or equal to the back buffer height, then we could clip the bottom and

2492
01:55:06,100 --> 01:55:09,100
say, bottom equals the back bumper height minus 1, right?

2493
01:55:09,700 --> 01:55:11,600
And that would that would work.

2494
01:55:11,600 --> 01:55:13,100
Oh, well, it's y less than bottom.

2495
01:55:13,100 --> 01:55:16,800
So I guess we're okay by just saying it's equal to the height like

2496
01:55:16,800 --> 01:55:17,100
that.

2497
01:55:17,100 --> 01:55:20,600
So if the bottom is, yeah, hopefully that makes some sense, right?

2498
01:55:20,600 --> 01:55:22,700
So that look that look reasonable to everyone.

2499
01:55:23,000 --> 01:55:24,600
Hopefully, that looks reasonable to everyone.

2500
01:55:24,900 --> 01:55:26,700
I think that should be about, right.

2501
01:55:28,000 --> 01:55:30,200
I'm not actually sure because what

2502
01:55:30,400 --> 01:55:33,900
I think this through, so basically, we're passing the bottom.

2503
01:55:33,900 --> 01:55:35,800
Are we ever actually writing to the bottom?

2504
01:55:35,800 --> 01:55:37,900
So, let's say the bottom now, we're using less than.

2505
01:55:37,900 --> 01:55:38,100
So.

2506
01:55:38,100 --> 01:55:38,700
We're not.

2507
01:55:38,700 --> 01:55:41,500
We're if top and bottom or equal, we would not write anything.

2508
01:55:41,500 --> 01:55:44,000
So if they were equal to height, we would not read anything at top,

2509
01:55:44,000 --> 01:55:45,200
but have to be at least less than that.

2510
01:55:45,200 --> 01:55:46,100
So we're okay.

2511
01:55:46,400 --> 01:55:47,200
That's about right.

2512
01:55:47,300 --> 01:55:50,300
So that's just we're going to, don't worry too much about that.

2513
01:55:50,600 --> 01:55:54,000
I was just putting in some some guards there to against clipping off

2514
01:55:54,000 --> 01:55:56,200
the screen, we're going to deal with that when we actually go, right?

2515
01:55:56,200 --> 01:55:59,300
The render all explain how these sorts of things work in great detail.

2516
01:55:59,300 --> 01:56:00,200
So this is just some

2517
01:56:00,600 --> 01:56:01,700
Debug code to draw lines.

2518
01:56:01,700 --> 01:56:04,500
And I want to make sure it would draw off the top bottom left or right

2519
01:56:04,500 --> 01:56:05,200
of the screen.

2520
01:56:05,600 --> 01:56:07,200
So that's really all I was doing here.

2521
01:56:07,600 --> 01:56:13,000
Anyway, so now I just need to go finish up this stuff and let's see

2522
01:56:13,000 --> 01:56:13,400
here.

2523
01:56:13,700 --> 01:56:17,900
So basically this marker needs to be snapped further up.

2524
01:56:18,000 --> 01:56:18,900
So that's that.

2525
01:56:19,400 --> 01:56:22,500
And then we also need some way of differentiating these guys.

2526
01:56:23,000 --> 01:56:24,100
So we're going to say

2527
01:56:25,800 --> 01:56:30,100
Basically that we're going to, I'm going to do this for now, which is

2528
01:56:30,100 --> 01:56:32,900
kind of annoying, but I'm just going to basically keep moving those

2529
01:56:32,900 --> 01:56:35,700
guys down as we go.

2530
01:56:36,800 --> 01:56:38,300
And then, let's see.

2531
01:56:38,400 --> 01:56:40,200
That should give us something that looks like this.

2532
01:56:42,000 --> 01:56:42,800
No, but that didn't?

2533
01:56:42,800 --> 01:56:44,300
That, that was not correct at all.

2534
01:56:46,100 --> 01:56:47,400
What's what?

2535
01:56:50,000 --> 01:56:51,300
Oh, yeah.

2536
01:56:51,500 --> 01:56:55,800
Well, so this assertion is no longer valid, unfortunately, because I'm

2537
01:56:56,200 --> 01:56:59,700
since I am actually using the output byte count thing that can.

2538
01:57:00,800 --> 01:57:04,600
Basically, this assertion I'm basically did the clipping.

2539
01:57:04,700 --> 01:57:07,700
I did the clipping that that assertion was guarding against up in

2540
01:57:07,700 --> 01:57:08,100
here.

2541
01:57:08,900 --> 01:57:11,600
So, this assertion really no longer valid that assertion is going to

2542
01:57:11,600 --> 01:57:12,400
assert.

2543
01:57:14,600 --> 01:57:19,100
Yeah, that assertion is going to assert by / definition when I do this

2544
01:57:19,100 --> 01:57:21,100
addition because that can wrap around the buffer.

2545
01:57:21,500 --> 01:57:24,400
So that assertion is, unfortunately no longer valid, which is too bad.

2546
01:57:24,700 --> 01:57:28,900
We could assert some of the other buffer values in here like we could

2547
01:57:29,400 --> 01:57:31,100
do these other guys.

2548
01:57:32,000 --> 01:57:36,600
Basically, these guys are all supposed to be correct, but we can't

2549
01:57:36,600 --> 01:57:39,500
assert it every time we do that, right?

2550
01:57:39,500 --> 01:57:42,900
Because it's actually it's actually kind of allowed to be wrong.

2551
01:57:42,900 --> 01:57:43,300
Now.

2552
01:57:44,600 --> 01:57:47,400
All of these things actually have to be less than the buffer size.

2553
01:57:47,400 --> 01:57:48,700
Nobody is allowed to be less.

2554
01:57:48,700 --> 01:57:51,500
But once we add those two together than that could be.

2555
01:57:52,100 --> 01:57:54,600
So I'll just start at those here just to make sure everything's not

2556
01:57:54,800 --> 01:57:55,200
wonky.

2557
01:57:55,200 --> 01:57:58,000
But that, yeah, that should be correct.

2558
01:57:58,400 --> 01:58:07,200
And this actually needs to why was this not why was this not looking

2559
01:58:07,200 --> 01:58:07,800
correct to me?

2560
01:58:07,800 --> 01:58:12,800
So we should have oh because we need one more, right?

2561
01:58:14,000 --> 01:58:14,400
There we go.

2562
01:58:21,300 --> 01:58:22,200
so,

2563
01:58:24,700 --> 01:58:29,000
Why are those two so, okay, we gotta change stuff here.

2564
01:58:30,700 --> 01:58:33,300
We've got to write Colors on this one, play color.

2565
01:58:34,100 --> 01:58:36,500
All right, so let's take a look at that.

2566
01:58:36,800 --> 01:58:39,800
It would be nice if we add labels and stuff, but let's take a look at

2567
01:58:39,800 --> 01:58:40,000
that.

2568
01:58:40,000 --> 01:58:41,200
So what do we have here?

2569
01:58:42,000 --> 01:58:45,800
Basically, we are looking that first one that we've got in the fact, I

2570
01:58:45,800 --> 01:58:46,100
guess.

2571
01:58:46,500 --> 01:58:48,000
While I do this.

2572
01:58:48,000 --> 01:58:52,000
What I should do is bring this up in the debugger so you can see what

2573
01:58:52,000 --> 01:58:54,300
the stuff is that we're actually looking at.

2574
01:58:54,600 --> 01:58:55,000
um,

2575
01:58:58,000 --> 01:58:58,600
all right.

2576
01:58:59,100 --> 01:59:03,100
So what we're looking at here is we're looking at that first one is

2577
01:59:03,100 --> 01:59:08,100
our play, our actual play cursor, and our output right cursor.

2578
01:59:08,700 --> 01:59:13,000
Is that first first row below below the Baseline.

2579
01:59:13,200 --> 01:59:16,600
So basically that is the white thing is where the play cursor was.

2580
01:59:17,200 --> 01:59:20,600
When we were going to output and the red line is where the the right

2581
01:59:20,600 --> 01:59:24,200
cursor was when we're going to Output, then the location that we

2582
01:59:24,200 --> 01:59:26,800
computed was kind of out.

2583
01:59:26,800 --> 01:59:27,500
You can see

2584
01:59:28,100 --> 01:59:31,900
Where the the white line is and the red line, that's where we were

2585
01:59:31,900 --> 01:59:33,000
going to output.

2586
01:59:33,700 --> 01:59:39,800
And then the flip location is, is basically, is the bottom, white line

2587
01:59:40,400 --> 01:59:42,400
is where the play cursor was when we flipped.

2588
01:59:42,600 --> 01:59:45,400
So you can see that that that's actually working.

2589
01:59:45,400 --> 01:59:46,000
Exactly.

2590
01:59:46,000 --> 01:59:52,000
Like we hoped would you can even see that's that's pretty good.

2591
01:59:52,100 --> 01:59:53,500
Like, look at what we did there.

2592
01:59:54,400 --> 01:59:56,600
Basically, you can kind of see

2593
01:59:57,700 --> 01:59:59,000
at very bottom one.

2594
01:59:59,000 --> 01:59:59,800
I kind of need to wait a

2595
02:00:00,000 --> 02:00:01,100
Pause this display.

2596
02:00:01,900 --> 02:00:05,000
Let's let's let's let's do away because I need a way to move, my mouse

2597
02:00:05,000 --> 02:00:05,800
cursor around.

2598
02:00:06,000 --> 02:00:08,200
So let's add a way to pause this display.

2599
02:00:09,000 --> 02:00:11,700
I'm going to just go ahead and full-on just throw in the way to pause

2600
02:00:11,700 --> 02:00:12,600
the display here.

2601
02:00:13,300 --> 02:00:15,200
So let's, let's, let's do that.

2602
02:00:15,300 --> 02:00:16,600
Let's have a pause.

2603
02:00:16,600 --> 02:00:18,900
Let's have some crazy Global, pause thing.

2604
02:00:19,500 --> 02:00:23,600
So, basically, you know, something like this.

2605
02:00:25,000 --> 02:00:26,700
If handmade internal.

2606
02:00:32,600 --> 02:00:33,200
There we go.

2607
02:00:34,300 --> 02:00:41,900
Pee then Global pause equals not Global pause and we'll just have.

2608
02:00:41,900 --> 02:00:43,000
This is just a full-on.

2609
02:00:43,000 --> 02:00:46,300
Debug pause function will probably want to make a pretty good.

2610
02:00:46,300 --> 02:00:52,000
One of these eventually eventually it's a little pause and basically

2611
02:00:52,000 --> 02:00:56,800
what Global pause will do is it will just stop us from actually ever

2612
02:00:56,800 --> 02:00:58,600
running the update.

2613
02:00:58,600 --> 02:01:01,400
So basically while Global running,

2614
02:01:02,600 --> 02:01:08,900
Will basically say inside here, when we do this sort of stuff.

2615
02:01:08,900 --> 02:01:10,500
Do we want to pause the input?

2616
02:01:10,600 --> 02:01:11,700
I'm not sure.

2617
02:01:12,000 --> 02:01:13,000
Probably not.

2618
02:01:13,200 --> 02:01:16,900
So what will basically do is say, if Global pause.

2619
02:01:18,000 --> 02:01:21,500
This is not Global pause, then we'll do all this stuff.

2620
02:01:21,900 --> 02:01:22,500
Right?

2621
02:01:22,700 --> 02:01:24,600
Will actually make all this stuff happen.

2622
02:01:25,300 --> 02:01:27,900
Otherwise, we won't.

2623
02:01:27,900 --> 02:01:29,600
So get 10 Dimension.

2624
02:01:29,900 --> 02:01:31,100
We won't do the blit.

2625
02:01:32,000 --> 02:01:32,100
We

2626
02:01:32,300 --> 02:01:33,200
Don't do any of this.

2627
02:01:33,200 --> 02:01:36,200
This is not none of this is going to happen.

2628
02:01:37,800 --> 02:01:41,700
Yeah, and so are basically, we have to not do any of this stuff.

2629
02:01:41,900 --> 02:01:44,900
None of this stuff is allowed to happen at all.

2630
02:01:45,300 --> 02:01:49,000
So we can't really do input either for the most part.

2631
02:01:50,200 --> 02:01:50,600
Yeah.

2632
02:01:50,700 --> 02:01:53,500
Looks like we can't really do anything if we wanted to actually have

2633
02:01:53,500 --> 02:01:54,600
it be a full pause.

2634
02:01:55,200 --> 02:01:56,400
So let's see here.

2635
02:01:56,700 --> 02:01:57,900
Let's do that.

2636
02:01:58,800 --> 02:02:01,800
Let's do this due to do.

2637
02:02:02,600 --> 02:02:06,300
So the win32 process messages still has to get called, so we can

2638
02:02:06,700 --> 02:02:07,900
unpause basically.

2639
02:02:08,500 --> 02:02:11,200
But yeah, that's that's sort of going to be buggy.

2640
02:02:11,200 --> 02:02:14,500
Will have to we'll have to do a better implementation of that going

2641
02:02:14,500 --> 02:02:15,000
forwards.

2642
02:02:19,900 --> 02:02:20,300
Okay.

2643
02:02:22,100 --> 02:02:22,400
Of course.

2644
02:02:22,400 --> 02:02:24,900
I also need to actually only toggle that Global.

2645
02:02:24,900 --> 02:02:29,900
Pause when the key actually goes down Global paws.

2646
02:02:31,200 --> 02:02:37,400
So we need to do if is down then Global pause.

2647
02:02:39,100 --> 02:02:42,700
All right, so we run that and now we can pause.

2648
02:02:44,500 --> 02:02:49,600
So basically what we've got here is this is where the the current.

2649
02:02:52,700 --> 02:02:54,700
Let's just verify this, right.

2650
02:02:54,700 --> 02:02:58,600
So the first thing that we drew below the Baseline, which is this

2651
02:02:58,600 --> 02:02:59,000
thing.

2652
02:02:59,100 --> 02:02:59,900
The first thing that we

2653
02:03:00,000 --> 02:03:05,400
To was just our output play cursor position and our output right

2654
02:03:05,400 --> 02:03:06,200
cursor position.

2655
02:03:06,700 --> 02:03:10,100
So that was where we when we woke up.

2656
02:03:10,100 --> 02:03:13,000
We asked where the things where that's where they were right.

2657
02:03:13,600 --> 02:03:17,400
We then computed where we're going to write to and we basically said

2658
02:03:17,400 --> 02:03:22,300
well we're going to right to right here and oh sorry, that's not

2659
02:03:22,300 --> 02:03:23,200
actually correct.

2660
02:03:23,400 --> 02:03:24,600
Is that actually correct?

2661
02:03:26,000 --> 02:03:28,200
What's the next thing the output location?

2662
02:03:28,200 --> 02:03:28,400
Okay.

2663
02:03:28,400 --> 02:03:28,800
Yeah.

2664
02:03:28,900 --> 02:03:29,800
So the next thing is the output.

2665
02:03:30,000 --> 02:03:30,400
Location.

2666
02:03:30,400 --> 02:03:33,600
So then we said, okay, the output location is going to be right here

2667
02:03:33,900 --> 02:03:35,200
and we're going to write this much.

2668
02:03:36,500 --> 02:03:40,400
Then when we actually came time to page flip be page slipped here.

2669
02:03:40,900 --> 02:03:42,500
And this is where the right cursor is going to be.

2670
02:03:42,500 --> 02:03:43,700
Although that's not super relevant.

2671
02:03:43,700 --> 02:03:45,100
So this is where we page flipped.

2672
02:03:45,300 --> 02:03:46,700
So this is our audio latency.

2673
02:03:46,700 --> 02:03:49,800
Our audio latency is between these two things and you can see that

2674
02:03:49,800 --> 02:03:52,300
that's actually much less than a frame now, which is good.

2675
02:03:52,300 --> 02:03:53,200
That's what we wanted.

2676
02:03:53,400 --> 02:03:55,500
And I suspect that.

2677
02:03:55,500 --> 02:03:58,900
Sometimes it will even be better than that depending on how things

2678
02:03:58,900 --> 02:04:00,700
work out for us.

2679
02:04:01,100 --> 02:04:02,600
It could even be a little bit less.

2680
02:04:03,600 --> 02:04:05,500
not actually entirely certain, but

2681
02:04:07,500 --> 02:04:10,500
Yeah, so that's that's pretty good.

2682
02:04:10,800 --> 02:04:11,100
I think.

2683
02:04:11,100 --> 02:04:12,100
That's not bad.

2684
02:04:12,900 --> 02:04:16,300
I'm relatively happy with that, especially because were actually doing

2685
02:04:16,300 --> 02:04:20,400
things so that we could do lower latency if we wanted to.

2686
02:04:23,000 --> 02:04:24,500
Yeah, that's not that's not awful.

2687
02:04:26,200 --> 02:04:27,400
I'm not unhappy with that.

2688
02:04:28,500 --> 02:04:30,400
I'm relatively happy with that.

2689
02:04:30,600 --> 02:04:32,100
I'm relatively happy with that.

2690
02:04:34,700 --> 02:04:41,700
All right, so that should be good blood dragon.

2691
02:04:41,700 --> 02:04:43,100
I just glanced at the track at this time.

2692
02:04:43,100 --> 02:04:44,000
To go to the question.

2693
02:04:45,700 --> 02:04:49,100
It says initialize the global which global you're talking about

2694
02:04:49,100 --> 02:04:49,400
global.

2695
02:04:49,400 --> 02:04:51,200
Pause this one.

2696
02:04:51,900 --> 02:04:56,000
I thought we covered This Global variables are initialized to Zero by

2697
02:04:56,000 --> 02:04:56,500
default.

2698
02:04:57,300 --> 02:05:04,300
And so pauses is supposed to be false by default, but

2699
02:05:05,200 --> 02:05:08,100
So, someone was saying I missed an assertion for one of the, one of

2700
02:05:08,100 --> 02:05:08,700
the things in here.

2701
02:05:08,700 --> 02:05:09,400
Let's take a look.

2702
02:05:09,900 --> 02:05:10,600
So output.

2703
02:05:10,600 --> 02:05:13,400
Play cursor is asserted right.

2704
02:05:13,400 --> 02:05:20,500
Cursor is asserted location and then well, so we could we could have

2705
02:05:20,500 --> 02:05:24,700
start the bike count because technically, it does have to be less.

2706
02:05:24,700 --> 02:05:28,600
It's not a position, but but we could certainly if it makes you more

2707
02:05:28,600 --> 02:05:32,400
comfortable, certainly assert it because although we don't really care

2708
02:05:32,400 --> 02:05:34,200
because we're wrapping that way.

2709
02:05:34,400 --> 02:05:37,000
We're clipping that value in the draw call.

2710
02:05:38,200 --> 02:05:39,500
Although we don't necessarily super care.

2711
02:05:39,500 --> 02:05:42,400
It is true that that does have to be less than the secondary buffer

2712
02:05:42,400 --> 02:05:42,600
size.

2713
02:05:42,600 --> 02:05:44,000
That's, that's certainly true.

2714
02:05:44,900 --> 02:05:45,700
So that's good.

2715
02:05:45,900 --> 02:05:50,800
All right, so I'm going to call that done for today.

2716
02:05:51,900 --> 02:05:56,800
I don't again know that, that was rather surprising that that all

2717
02:05:56,800 --> 02:05:59,800
worked and does seem to be relatively

2718
02:06:00,000 --> 02:06:00,900
Bust as well.

2719
02:06:02,500 --> 02:06:04,000
That that could be deceiving though.

2720
02:06:04,000 --> 02:06:08,300
We haven't tested it thoroughly enough to really know.

2721
02:06:10,000 --> 02:06:13,600
But yeah, I'm I'm pretty happy with that.

2722
02:06:13,700 --> 02:06:15,100
That was a good two hours of work, guys.

2723
02:06:15,400 --> 02:06:16,900
That was a good two hours of work.

2724
02:06:17,900 --> 02:06:23,500
What I'd like to do ideally if possible is I would like to at some

2725
02:06:23,500 --> 02:06:30,100
point go and find a low latency audio card and see if we can get it to

2726
02:06:30,100 --> 02:06:33,800
the point where that that frame display actually shows us that we're

2727
02:06:33,800 --> 02:06:38,100
getting really low latency on the audio because we want those two on a

2728
02:06:38,200 --> 02:06:39,400
really low latency card, we

2729
02:06:39,600 --> 02:06:41,400
Those two lines to line up.

2730
02:06:41,400 --> 02:06:46,400
So, another thing that I might do is let's draw one more thing in our

2731
02:06:46,400 --> 02:06:50,100
marker, which is basically the expected frame flip time.

2732
02:06:50,600 --> 02:06:54,900
So, basically the expected, the expected frame flip time.

2733
02:06:56,300 --> 02:06:58,400
This thing expected frame, boundary bite.

2734
02:06:58,900 --> 02:07:00,500
Let's draw that as well.

2735
02:07:01,100 --> 02:07:04,500
So, let's say, expected frame, boundary B.

2736
02:07:05,300 --> 02:07:10,000
So, that's, that's basically the expected flip cursor, right?

2737
02:07:10,100 --> 02:07:15,400
Where we expect, where we expect that to be when we actually computed

2738
02:07:15,600 --> 02:07:16,800
the value, right?

2739
02:07:17,000 --> 02:07:20,400
So, so let's to see whether our estimate lines up at all.

2740
02:07:21,000 --> 02:07:24,300
So our expected flip play cursor.

2741
02:07:26,100 --> 02:07:30,400
Equal to where the play cursor is, plus the expected sound bites per

2742
02:07:30,400 --> 02:07:31,200
frame.

2743
02:07:36,500 --> 02:07:39,300
Okay, see so that yeah, that already tells me that, that sort of

2744
02:07:39,300 --> 02:07:40,600
wrong, now that I'm thinking about that.

2745
02:07:40,600 --> 02:07:42,800
So we do have one incorrect thing here.

2746
02:07:44,000 --> 02:07:48,100
It's actually that we forgot one part of the computation that I talked

2747
02:07:48,100 --> 02:07:48,700
about.

2748
02:07:48,800 --> 02:07:52,300
We forgot to do that.

2749
02:07:52,300 --> 02:07:55,200
The flip is not the whole frame times worth.

2750
02:07:55,800 --> 02:08:02,700
It's just it's it's only actually - the time that's elapsed so far,

2751
02:08:03,200 --> 02:08:03,800
right?

2752
02:08:05,200 --> 02:08:08,500
Yeah, so we're actually not quite right.

2753
02:08:08,500 --> 02:08:11,700
So let's draw this out and we'll see that it's not quite right, and

2754
02:08:11,700 --> 02:08:15,000
then we'll make the fix and and put that incorrectly.

2755
02:08:15,000 --> 02:08:18,100
So that all that does is add a little audio latency.

2756
02:08:18,300 --> 02:08:22,200
So that's why we didn't see it as a bug, but we should be able to get

2757
02:08:22,200 --> 02:08:24,300
that audio latency down.

2758
02:08:24,800 --> 02:08:25,100
All right.

2759
02:08:25,100 --> 02:08:28,100
So the expected frame, boundary B will also get written here.

2760
02:08:28,700 --> 02:08:32,200
Marker expected foot play cursor.

2761
02:08:32,200 --> 02:08:34,300
Is that and now we should see that this is

2762
02:08:34,500 --> 02:08:35,600
Not really that close.

2763
02:08:35,900 --> 02:08:37,400
If we draw it, we should see that.

2764
02:08:37,400 --> 02:08:40,200
It's not really that close to the other line.

2765
02:08:41,600 --> 02:08:42,200
Right.

2766
02:08:42,700 --> 02:08:45,400
So let's go in here and draw that.

2767
02:08:45,400 --> 02:08:52,600
So, when we do our play cursor and art, right cursor, we will also

2768
02:08:52,600 --> 02:08:56,400
draw there or I should say when we do this.

2769
02:08:56,400 --> 02:08:57,300
Let's do it here.

2770
02:08:57,600 --> 02:08:59,800
So here's where we're writing to.

2771
02:09:00,000 --> 02:09:00,600
Squee.

2772
02:09:01,500 --> 02:09:01,900
Yeah, okay.

2773
02:09:01,900 --> 02:09:02,500
I'll do it here.

2774
02:09:02,800 --> 02:09:07,200
So this is going to be expected flip color, right?

2775
02:09:07,600 --> 02:09:09,200
And that's going to come out here.

2776
02:09:09,200 --> 02:09:10,800
Dealer expected flip Color.

2777
02:09:10,800 --> 02:09:11,300
Oops.

2778
02:09:11,600 --> 02:09:12,500
Equals 0 x.

2779
02:09:13,100 --> 02:09:15,300
Let's make that a nice cyan.

2780
02:09:15,300 --> 02:09:15,900
Shall we?

2781
02:09:16,400 --> 02:09:17,700
Sian would be good.

2782
02:09:17,700 --> 02:09:20,200
So, lets, you know who doesn't love cyan.

2783
02:09:20,400 --> 02:09:23,300
Oh, you know what we could do really purple, or we could do a yellow.

2784
02:09:23,400 --> 02:09:24,200
Let's do yellow.

2785
02:09:25,100 --> 02:09:25,700
I like yellow.

2786
02:09:26,800 --> 02:09:30,700
All right, we're going to an expected flip color and we're going to

2787
02:09:30,700 --> 02:09:31,400
draw.

2788
02:09:32,800 --> 02:09:34,600
Who did I just delete the yeah?

2789
02:09:35,100 --> 02:09:37,100
Suspected flip cursor.

2790
02:09:37,500 --> 02:09:37,900
What did I do?

2791
02:09:38,000 --> 02:09:38,500
What happened?

2792
02:09:38,500 --> 02:09:39,600
I thought I'd type this in.

2793
02:09:39,700 --> 02:09:42,300
I'm just, you can tell I'm getting a little loopy here.

2794
02:09:42,900 --> 02:09:45,100
Expected flip play cursor.

2795
02:09:46,400 --> 02:09:47,100
Get that in there.

2796
02:09:47,100 --> 02:09:47,700
There we go.

2797
02:09:48,700 --> 02:09:50,300
So save.

2798
02:09:51,600 --> 02:09:51,900
All right.

2799
02:09:51,900 --> 02:09:53,900
So now we should see that.

2800
02:09:53,900 --> 02:09:55,600
That is exactly wrong.

2801
02:09:56,300 --> 02:09:59,000
And let's go ahead and assert that one as well.

2802
02:09:59,300 --> 02:10:00,300
Goodbye count.

2803
02:10:00,500 --> 02:10:02,700
So that's expected flip like cursor.

2804
02:10:03,100 --> 02:10:05,100
That let's take a look.

2805
02:10:06,000 --> 02:10:08,000
So, we should see.

2806
02:10:08,100 --> 02:10:08,400
Oh,

2807
02:10:10,400 --> 02:10:11,100
Oh, that's right.

2808
02:10:11,100 --> 02:10:12,000
That's another one.

2809
02:10:12,000 --> 02:10:14,500
That also it's an it's an added value.

2810
02:10:14,500 --> 02:10:19,000
So that's actually allowed to be outside because that's normalized

2811
02:10:19,000 --> 02:10:19,700
outside.

2812
02:10:20,000 --> 02:10:22,100
So, there it is.

2813
02:10:24,000 --> 02:10:25,600
Wow, it's real close though.

2814
02:10:25,800 --> 02:10:27,800
Okay, so there's a case where it is not closed.

2815
02:10:27,800 --> 02:10:29,200
For example, right?

2816
02:10:32,800 --> 02:10:36,100
But it is still really darn darn close and I think that's just because

2817
02:10:36,100 --> 02:10:42,000
our game the milliseconds for our game update is so low that that

2818
02:10:42,000 --> 02:10:44,700
estimate is I guess going to be pretty close.

2819
02:10:45,200 --> 02:10:49,000
That's that's within reason, but you can see that often times if we're

2820
02:10:49,100 --> 02:10:53,300
unlucky and it's going to be a little further off there.

2821
02:10:53,900 --> 02:10:57,000
So let's let's try let's see if we can get that down a bit.

2822
02:10:57,000 --> 02:10:57,800
Let's just see.

2823
02:10:58,500 --> 02:11:02,000
So what I'm going to do is I'm just going to say well, okay.

2824
02:11:02,600 --> 02:11:06,700
So at some, we have an ability to query the clock, right?

2825
02:11:07,200 --> 02:11:08,600
And we're doing that often, right?

2826
02:11:08,600 --> 02:11:13,800
So we're doing stuff where we have this, this sort of flip time.

2827
02:11:14,000 --> 02:11:17,100
We take a look at what the flip time is right here.

2828
02:11:17,700 --> 02:11:20,300
So we've got kind of the the wall clock time here.

2829
02:11:20,900 --> 02:11:26,000
And then we could we could if we wanted to also store whatever the

2830
02:11:26,000 --> 02:11:28,300
actual time is right after the flip.

2831
02:11:28,500 --> 02:11:32,400
So basically right here, when we get this, when we get this guy,

2832
02:11:33,300 --> 02:11:35,800
Right, when we would, we would call that that query.

2833
02:11:36,400 --> 02:11:42,400
Let's just go ahead and have a thing here called flip wall clock and

2834
02:11:42,400 --> 02:11:44,000
we're just going to go ahead and get that.

2835
02:11:44,400 --> 02:11:47,400
Pull that out there and store that, right.

2836
02:11:47,800 --> 02:11:49,400
So let's let's just go ahead and do that.

2837
02:11:49,400 --> 02:11:53,600
So we're going to do our flip wall clock as there, and we're going to

2838
02:11:53,900 --> 02:11:56,200
go ahead and grab that every frame.

2839
02:11:56,500 --> 02:11:59,300
So, I've got that now and that

2840
02:12:00,000 --> 02:12:00,600
Wall clock.

2841
02:12:00,600 --> 02:12:01,000
Football.

2842
02:12:01,000 --> 02:12:03,500
Clock is just a large integer.

2843
02:12:03,600 --> 02:12:04,300
So, there we go.

2844
02:12:04,300 --> 02:12:05,500
There's our flip wall clock.

2845
02:12:06,400 --> 02:12:06,700
Boom.

2846
02:12:07,700 --> 02:12:12,700
Loops are flip wall clock, which is going to be, you know, basically a

2847
02:12:12,700 --> 02:12:14,800
total nonsense value at first.

2848
02:12:17,000 --> 02:12:21,200
But so, the flip wall clock is basically right from when the flip

2849
02:12:21,200 --> 02:12:25,100
occurred and then we're going to time the time between that flip and

2850
02:12:25,100 --> 02:12:27,600
where we are now, because that's what we said we were going to do.

2851
02:12:28,700 --> 02:12:36,100
So we're going to go ahead and say well that flip wall clock, let's do

2852
02:12:36,100 --> 02:12:37,000
that seconds.

2853
02:12:37,000 --> 02:12:38,200
Elapsed here.

2854
02:12:38,700 --> 02:12:42,500
Are we gonna win through to get S 2 laps that flipped wall clock?

2855
02:12:42,600 --> 02:12:46,600
And wherever we actually are at the time when we do

2856
02:12:46,800 --> 02:12:48,800
Computation for our expected.

2857
02:12:48,900 --> 02:12:50,000
Whereas are expected here.

2858
02:12:50,000 --> 02:12:51,700
Expected, expected expected.

2859
02:12:51,700 --> 02:12:52,300
Here we go.

2860
02:12:53,000 --> 02:12:58,900
So, our expected sound bytes per frame is correct, but it's when we

2861
02:12:58,900 --> 02:13:03,100
actually do the frame boundary B, we're not going to use the entire

2862
02:13:03,100 --> 02:13:05,700
expected sound bytes per frame, right?

2863
02:13:05,700 --> 02:13:07,400
Because we're only using a part of them.

2864
02:13:07,400 --> 02:13:09,100
So, what we're going to do is right there.

2865
02:13:09,500 --> 02:13:10,800
We're going to take a look.

2866
02:13:11,300 --> 02:13:16,200
So essentially right here when we do this, check will also do a thing

2867
02:13:16,200 --> 02:13:16,700
where we basically

2868
02:13:16,800 --> 02:13:23,100
If we say that, we have an audio counter, the audio counter is going

2869
02:13:23,100 --> 02:13:25,500
to be between here and the flip cap.

2870
02:13:25,500 --> 02:13:27,300
The flip wall clock, right?

2871
02:13:27,800 --> 02:13:32,000
I probably should call these either counter or wall clock correctly.

2872
02:13:32,400 --> 02:13:34,800
So clock, it will clock.

2873
02:13:34,800 --> 02:13:37,200
I should go through and change those wall clock.

2874
02:13:37,500 --> 02:13:38,000
There we go.

2875
02:13:39,300 --> 02:13:45,700
So, basically what we end up with is the S so far.

2876
02:13:45,700 --> 02:13:46,600
So the audio

2877
02:13:48,200 --> 02:13:52,400
The time between the beginning of the frame and so basis, basically,

2878
02:13:52,400 --> 02:13:55,000
from begin to audio s.

2879
02:13:55,500 --> 02:13:56,900
So, that's that's what we've got.

2880
02:13:57,100 --> 02:14:02,700
So now, what we need to do is basically subtract that out of the

2881
02:14:02,700 --> 02:14:07,800
expected frame time, and that is actually how many bytes forward we

2882
02:14:07,800 --> 02:14:08,800
want to move this.

2883
02:14:09,000 --> 02:14:09,700
Right.

2884
02:14:09,900 --> 02:14:15,800
So basically we've got sort of an expected expected thing here.

2885
02:14:16,700 --> 02:14:19,100
And we're going to, we're going to use only a part of it.

2886
02:14:19,400 --> 02:14:20,000
So.

2887
02:14:22,200 --> 02:14:28,900
Here we have expected, B, until flip and that is essentially going to

2888
02:14:28,900 --> 02:14:33,900
be the sound bytes per per frame times, whatever.

2889
02:14:33,900 --> 02:14:36,200
The actual proportion of a frame.

2890
02:14:36,200 --> 02:14:38,300
This actually is, right.

2891
02:14:38,400 --> 02:14:40,400
And and so, excuse me.

2892
02:14:42,000 --> 02:14:44,500
Whatever proportion of a frame.

2893
02:14:45,100 --> 02:14:49,200
We have here is what we need to multiply by, right, because we've got

2894
02:14:49,300 --> 02:14:54,400
the amount of time there toward the seconds per frame or expected

2895
02:14:54,400 --> 02:14:55,300
seconds per frame.

2896
02:14:55,600 --> 02:14:59,600
That is the actual value that we need to multiply this by.

2897
02:15:00,200 --> 02:15:04,600
In order to get it, that's the coefficient that we need in order to

2898
02:15:04,600 --> 02:15:07,000
get the amount of samples.

2899
02:15:07,000 --> 02:15:08,100
We at the amount of bytes.

2900
02:15:08,100 --> 02:15:09,400
We actually think we're going to use.

2901
02:15:09,500 --> 02:15:12,800
So the ratio of how much time we spent.

2902
02:15:14,800 --> 02:15:15,700
That's not quite right.

2903
02:15:15,800 --> 02:15:19,400
It's actually the expected seconds per frame - this, right?

2904
02:15:19,400 --> 02:15:21,000
It's the time left.

2905
02:15:21,000 --> 02:15:22,600
So we have the expected seconds, per frame.

2906
02:15:22,700 --> 02:15:24,500
- how many audio s?

2907
02:15:25,200 --> 02:15:27,200
We've actually spent so far.

2908
02:15:27,200 --> 02:15:28,700
It's how many seconds are left.

2909
02:15:28,700 --> 02:15:34,100
So there's basically seconds left until flip is this.

2910
02:15:34,600 --> 02:15:37,000
And so, that's this value here, right?

2911
02:15:39,000 --> 02:15:42,200
So the seconds left until we flip is however, many seconds we expect

2912
02:15:42,200 --> 02:15:47,300
to have per frame and then minus the number of seconds that we

2913
02:15:47,700 --> 02:15:52,700
actually already took, we go ahead and do the division to find out

2914
02:15:52,800 --> 02:15:57,100
what percentage of the frame that is and we multiply that by how many

2915
02:15:57,300 --> 02:15:59,700
bytes we expect to have in the frame.

2916
02:15:59,900 --> 02:16:01,400
So that's that's about it.

2917
02:16:01,600 --> 02:16:04,900
So then we just have to have our expected are expected seconds, per

2918
02:16:04,900 --> 02:16:07,500
frame value actually has to exist.

2919
02:16:07,900 --> 02:16:10,900
But that's pretty easy to compute.

2920
02:16:12,100 --> 02:16:15,700
When we take a look at our hurts Target seconds per frame.

2921
02:16:15,700 --> 02:16:16,800
Oh, we've already got it.

2922
02:16:16,900 --> 02:16:18,100
So, that's that's what it is.

2923
02:16:18,200 --> 02:16:19,700
It's just Target seconds per frame.

2924
02:16:20,100 --> 02:16:24,000
So it's Target s for French, so that's that.

2925
02:16:26,400 --> 02:16:29,500
Target frame, that's that.

2926
02:16:29,500 --> 02:16:33,000
And now let's see if I did that correctly with pause.

2927
02:16:34,100 --> 02:16:35,100
Let's see here.

2928
02:16:36,100 --> 02:16:37,200
Still a bit off.

2929
02:16:39,200 --> 02:16:42,500
Yeah, we're still getting that kind of because what we want to see,

2930
02:16:42,799 --> 02:16:51,700
right, is we want to see that value should be correlated with the

2931
02:16:51,700 --> 02:16:55,799
bottom value if I'm not mistaken, let's double, let's double-check.

2932
02:16:59,000 --> 02:17:04,000
That's, that's not, that's not what we're not seeing what we hope to

2933
02:17:04,000 --> 02:17:04,400
see.

2934
02:17:05,600 --> 02:17:07,700
So let's let's, let's go ahead here.

2935
02:17:07,900 --> 02:17:10,799
So, if we look at that, we should be correlating with this bottom

2936
02:17:10,799 --> 02:17:11,600
value here.

2937
02:17:11,600 --> 02:17:14,299
I think I was, I was confused before, and I was, I was looking at this

2938
02:17:14,299 --> 02:17:15,400
one, which is not right.

2939
02:17:15,900 --> 02:17:19,600
We're trying to correlate these two because this is our actual flip.

2940
02:17:19,600 --> 02:17:23,200
We want the yellow to basically be correlated with that.

2941
02:17:23,299 --> 02:17:26,500
And in fact, I guess what I should do is probably draw them, draw it

2942
02:17:26,500 --> 02:17:27,700
all the way down to that.

2943
02:17:27,900 --> 02:17:30,299
Level right.

2944
02:17:30,299 --> 02:17:32,400
I mean that would be sort of a better way to do it.

2945
02:17:32,400 --> 02:17:36,400
Let me let me draw it essentially across all those lines.

2946
02:17:36,400 --> 02:17:39,299
So this one that way, I don't make that mistake again, so we'll do it

2947
02:17:39,299 --> 02:17:39,799
this way.

2948
02:17:44,100 --> 02:17:49,400
Let's do that and we'll just go ahead and do it.

2949
02:17:49,500 --> 02:17:49,700
Oops.

2950
02:17:49,700 --> 02:17:50,000
Sorry.

2951
02:17:50,000 --> 02:17:54,500
First top first top top.

2952
02:17:54,600 --> 02:17:57,900
So I'm just going to go ahead and draw this all the way down.

2953
02:17:58,299 --> 02:17:58,799
There we go.

2954
02:18:05,400 --> 02:18:05,799
Yeah.

2955
02:18:07,600 --> 02:18:08,200
so,

2956
02:18:14,299 --> 02:18:16,500
What, what is going on here?

2957
02:18:16,900 --> 02:18:20,900
We're still not where we want to be that yellow value.

2958
02:18:20,900 --> 02:18:24,900
In that white value are not as correlated as I would like them to be.

2959
02:18:25,299 --> 02:18:28,100
Because that bottom point value, right?

2960
02:18:29,200 --> 02:18:34,200
That bottom white value is where the play cursor is, when we flip,

2961
02:18:34,400 --> 02:18:35,100
right?

2962
02:18:36,000 --> 02:18:37,100
That's what we were drawing.

2963
02:18:37,299 --> 02:18:38,000
Right?

2964
02:18:38,100 --> 02:18:40,500
So, this is our expected, play cursor.

2965
02:18:40,500 --> 02:18:42,100
Is that yellow line, right?

2966
02:18:43,799 --> 02:18:48,000
And oh, okay, okay.

2967
02:18:50,100 --> 02:18:51,299
No, no, I'm right.

2968
02:18:51,299 --> 02:18:52,900
So that and that bottom line.

2969
02:18:53,000 --> 02:18:58,000
That's that very bottom is is the actual flip cursor, right?

2970
02:18:59,600 --> 02:19:04,900
So basically we want the yellow line and that bottom white line.

2971
02:19:05,400 --> 02:19:06,200
I'm not mistaken.

2972
02:19:06,200 --> 02:19:11,400
Now, those should actually be lining up as closely as possible and

2973
02:19:11,400 --> 02:19:15,500
they do a lot of the time, but it looks like we get.

2974
02:19:15,600 --> 02:19:19,799
We get into certain situations like this, where they're pretty

2975
02:19:19,900 --> 02:19:21,700
Far away from each other.

2976
02:19:22,299 --> 02:19:25,900
And I don't know if that's to be expected or not.

2977
02:19:26,000 --> 02:19:31,700
I guess there is the fact that we can have that Jitter up to 480

2978
02:19:31,700 --> 02:19:32,400
samples.

2979
02:19:32,500 --> 02:19:38,700
So maybe what we should do is also draw in a 480, sample window to

2980
02:19:38,700 --> 02:19:41,700
basically say, well it could have moved by this much.

2981
02:19:41,700 --> 02:19:43,700
Now if it did though,

2982
02:19:45,700 --> 02:19:47,400
If it did, then it would be.

2983
02:19:47,400 --> 02:19:47,600
Yeah.

2984
02:19:47,600 --> 02:19:50,400
Well, okay, let's draw that in and just see.

2985
02:19:50,800 --> 02:19:55,400
So we knew that there was basically a 400 when we measured this card,

2986
02:19:55,500 --> 02:19:59,000
we knew there was a 480 sample difference there.

2987
02:19:59,000 --> 02:20:02,300
So I'm going to say, let's go ahead and draw that in.

2988
02:20:02,500 --> 02:20:04,100
Let's do that in our

2989
02:20:06,000 --> 02:20:09,500
Our play window will call that and we'll draw that in a.

2990
02:20:09,500 --> 02:20:12,900
Lovely purple is what will play right play window color.

2991
02:20:13,700 --> 02:20:19,100
So I just want to see basically I want to see play window color.

2992
02:20:19,400 --> 02:20:24,000
I want to see this Plus for an 80 times, the sound buffer, sound

2993
02:20:24,000 --> 02:20:26,100
output bytes per sample.

2994
02:20:27,100 --> 02:20:27,400
All right.

2995
02:20:27,400 --> 02:20:30,500
I just want to see what that will look like.

2996
02:20:40,800 --> 02:20:44,800
So looking at this a little more closely here, what we can see is

2997
02:20:44,800 --> 02:20:49,700
basically that line is where the the play cursor would be.

2998
02:20:50,300 --> 02:20:53,200
This is where the players are was when we measured it for the flip.

2999
02:20:53,400 --> 02:20:55,400
This is that for nudity, sample window.

3000
02:20:55,400 --> 02:20:56,300
So that's the update.

3001
02:20:56,300 --> 02:20:59,800
Granularity of the sound and that's where we thought we were going to.

3002
02:21:02,000 --> 02:21:06,200
So generally we are pretty darn close to being in between those two,

3003
02:21:06,400 --> 02:21:09,100
but I feel like we should always be in between those two.

3004
02:21:09,300 --> 02:21:11,900
And I don't like the fact that once in a while we get one.

3005
02:21:11,900 --> 02:21:15,700
That's a little further off than that, that feels like a bug to me,

3006
02:21:16,300 --> 02:21:18,500
that just feels like it's not correct.

3007
02:21:18,900 --> 02:21:22,400
Now, maybe that's just because there's too much variability in our

3008
02:21:22,400 --> 02:21:26,100
update and we're not, you know, so that's just natural.

3009
02:21:26,400 --> 02:21:29,700
But I would have liked to have seen those converge a little bit more

3010
02:21:29,700 --> 02:21:30,000
closely.

3011
02:21:30,800 --> 02:21:33,800
So I suspect that maybe we're still a little bit buggy.

3012
02:21:34,100 --> 02:21:36,700
Since this is not our final shipping code.

3013
02:21:36,800 --> 02:21:39,600
I'm going to say we're probably okay to move on to something else for

3014
02:21:39,600 --> 02:21:43,600
now, but this might be a kind of thing is when we have some extra time

3015
02:21:43,600 --> 02:21:47,600
or when we're doing a bonus stream or something to maybe come back,

3016
02:21:47,800 --> 02:21:51,100
make some better when we have a more of a renderer and we could render

3017
02:21:51,100 --> 02:21:53,800
the debug code a little more effectively.

3018
02:21:54,600 --> 02:21:58,600
I would say let's come back to this because I'm not satisfied in the

3019
02:21:58,600 --> 02:22:00,000
the level of quality of this.

3020
02:22:00,100 --> 02:22:00,800
Code yet.

3021
02:22:00,800 --> 02:22:02,600
I think it still has a way to go.

3022
02:22:04,400 --> 02:22:06,500
So I'm going to call that but Imma call that done for now.

3023
02:22:07,400 --> 02:22:11,400
I'm going to call that done for now because I don't want to Rat Hole

3024
02:22:11,400 --> 02:22:14,800
on perfect audio output for too long and want to keep it to within the

3025
02:22:14,800 --> 02:22:15,200
stream.

3026
02:22:15,200 --> 02:22:19,800
So let us go ahead and go to the Q&A now.

3027
02:22:22,500 --> 02:22:23,900
It has been a long stream.

3028
02:22:23,900 --> 02:22:25,700
That was like a two-and-a-half hour stream.

3029
02:22:25,700 --> 02:22:30,900
That's a that's a long one and people are saying on the stream, right?

3030
02:22:30,900 --> 02:22:32,100
A full-on audio visualizer.

3031
02:22:32,100 --> 02:22:32,500
Yes.

3032
02:22:32,500 --> 02:22:35,900
Well eventually we will so that's that's good.

3033
02:22:36,300 --> 02:22:38,100
But let's go to Q&A.

3034
02:22:38,100 --> 02:22:38,300
Now.

3035
02:22:38,300 --> 02:22:41,000
Let's take a, let's take a couple minutes of Q&A before we end the

3036
02:22:41,000 --> 02:22:41,500
stream.

3037
02:22:42,500 --> 02:22:44,800
Let's just stretch a little bit though.

3038
02:22:45,200 --> 02:22:45,900
Here we go.

3039
02:22:47,300 --> 02:22:50,100
And I will sort of a please make sure that you keep the questions to

3040
02:22:50,100 --> 02:22:50,800
stuff we did today.

3041
02:22:51,000 --> 02:22:55,900
Or in a previous day and please make sure to put Senior ettore on each

3042
02:22:55,900 --> 02:22:56,700
individual question.

3043
02:22:56,700 --> 02:22:57,800
So that I see them.

3044
02:22:58,600 --> 02:23:00,500
Did you try the audio without OBS?

3045
02:23:00,500 --> 02:23:01,900
I did, it did not change.

3046
02:23:02,100 --> 02:23:05,200
So OBS did not seem to affect the audio output which is what I would

3047
02:23:05,200 --> 02:23:07,000
expect it because it's going through the colonel mixer.

3048
02:23:07,200 --> 02:23:08,700
So it should be pretty free for the colonel.

3049
02:23:08,700 --> 02:23:12,600
Mixer to hand that audio to OBS after it's done sending it out.

3050
02:23:12,600 --> 02:23:16,500
So it should, I wouldn't have expected OBS to in a well working

3051
02:23:16,500 --> 02:23:16,800
system.

3052
02:23:16,800 --> 02:23:17,300
It shouldn't.

3053
02:23:17,300 --> 02:23:19,200
So I'm assuming that it was fine and it was

3054
02:23:25,800 --> 02:23:26,200
Yeah.

3055
02:23:29,100 --> 02:23:32,600
There's a lot of thinking today, a lot of thinking on the thinking, on

3056
02:23:32,600 --> 02:23:33,200
the Stream.

3057
02:23:43,300 --> 02:23:45,000
Not seen any questions though.

3058
02:23:45,400 --> 02:23:46,100
Do we have no Quest?

3059
02:23:46,100 --> 02:23:51,000
Maybe everyone's too tired from such a long, programming stint and I

3060
02:23:51,000 --> 02:23:54,000
can understand that, I could certainly understand that.

3061
02:23:56,100 --> 02:23:57,200
It's been a lot of code.

3062
02:23:58,400 --> 02:23:59,800
But hey, the good.

3063
02:24:00,000 --> 02:24:01,400
Is this next week's?

3064
02:24:01,500 --> 02:24:03,900
I think, almost exclusively fun stuff for the most part.

3065
02:24:04,500 --> 02:24:06,200
So we did a lot of hard work.

3066
02:24:06,400 --> 02:24:09,200
I across like the stuff, but I can appreciate the fact that other

3067
02:24:09,200 --> 02:24:10,100
people might not,

3068
02:24:11,700 --> 02:24:13,400
Let's take a look here.

3069
02:24:16,100 --> 02:24:18,400
Is it inexpensive to query for the play cursor?

3070
02:24:18,400 --> 02:24:19,200
In the right cursor?

3071
02:24:19,200 --> 02:24:23,700
Yeah, I think it's actually free is.

3072
02:24:23,700 --> 02:24:25,100
My my thinking.

3073
02:24:25,600 --> 02:24:27,500
The reason I say that is, I don't think.

3074
02:24:27,500 --> 02:24:29,000
When you actually do that query.

3075
02:24:29,100 --> 02:24:31,700
I don't think direct sound is actually doing any work.

3076
02:24:31,700 --> 02:24:35,500
I think it's just returning you its internal values and so it, I think

3077
02:24:35,500 --> 02:24:40,000
what happens is direct sound updates those on its own time.

3078
02:24:40,200 --> 02:24:42,800
So it's like occasionally resetting.

3079
02:24:42,800 --> 02:24:45,300
Those values to whenever it pushes.

3080
02:24:45,400 --> 02:24:48,600
New part of the buffer out, or whatever it updates, those values.

3081
02:24:48,900 --> 02:24:51,800
And then, when you ask for them, I think you're just getting back,

3082
02:24:51,800 --> 02:24:53,900
whatever its values are at that time.

3083
02:24:53,900 --> 02:24:57,200
So I don't actually think when you ask for it, that it actually does

3084
02:24:57,200 --> 02:24:58,200
any actual work.

3085
02:24:58,500 --> 02:24:59,700
I could be wrong about that though.

3086
02:25:04,400 --> 02:25:06,900
Audio seems to be the most complex part until now, which will be the

3087
02:25:06,900 --> 02:25:08,400
next more complicated thing.

3088
02:25:10,600 --> 02:25:14,800
So I don't think we'll have anything as nearly as complicated as this

3089
02:25:14,800 --> 02:25:25,000
audio output, until we get to the rasterization of actual of like till

3090
02:25:25,000 --> 02:25:27,900
we get to rendering non.

3091
02:25:30,100 --> 02:25:34,200
So when we do the renderer, if we just have like a rectangle, if we're

3092
02:25:34,200 --> 02:25:37,100
just drawing, like rectangles on the screen that are filled with

3093
02:25:37,100 --> 02:25:37,500
bitmaps.

3094
02:25:37,500 --> 02:25:39,500
We're just moving like bitmaps around the screen.

3095
02:25:40,300 --> 02:25:41,500
That's not that complicated.

3096
02:25:41,500 --> 02:25:47,000
It's pretty easy to understand when we get to because I would like to

3097
02:25:47,000 --> 02:25:50,800
do I would like to be able to support in our software renderer.

3098
02:25:51,900 --> 02:25:56,800
The ability to like deform and stretch things like skeletal animation

3099
02:25:56,900 --> 02:25:57,600
sort of thing.

3100
02:25:58,600 --> 02:26:01,400
When we write the rasterizer for that, that's going to be crazy

3101
02:26:01,400 --> 02:26:02,200
complicated.

3102
02:26:04,100 --> 02:26:07,000
They're not that hard to write, if you kind of just know everything

3103
02:26:07,000 --> 02:26:07,500
already.

3104
02:26:08,300 --> 02:26:14,000
But even even when you do, there's a ton of debugging to do.

3105
02:26:14,000 --> 02:26:17,600
And if you don't, if you've never done it before, it's, it's pretty

3106
02:26:17,600 --> 02:26:18,900
darn crazy, complicated.

3107
02:26:20,000 --> 02:26:24,100
And especially if we go and optimize it, which we will for Cindy.

3108
02:26:25,600 --> 02:26:26,800
It's going to be tough.

3109
02:26:27,500 --> 02:26:30,200
So this what we just did is the toughest thing we're going to do for

3110
02:26:30,200 --> 02:26:31,300
probably quite some time.

3111
02:26:31,300 --> 02:26:31,600
The other stuff.

3112
02:26:31,600 --> 02:26:35,900
We're like loading a bitmap is going to be a breeze compared to that

3113
02:26:36,000 --> 02:26:40,300
drawing the bitmap to the screen, a breeze, correcting understanding

3114
02:26:40,300 --> 02:26:41,700
gamma correction and stuff like that.

3115
02:26:41,700 --> 02:26:43,400
Maybe a little more complicated Alpha blending.

3116
02:26:43,400 --> 02:26:46,400
A little more complicated than that, but still way easier than what we

3117
02:26:46,400 --> 02:26:47,100
just did.

3118
02:26:48,000 --> 02:26:50,600
But then when we get to the when we get to fully deformable, rendering

3119
02:26:50,600 --> 02:26:51,600
that, that'd be the thing.

3120
02:26:59,500 --> 02:26:59,800
Oh, dear.

3121
02:27:00,000 --> 02:27:03,200
Hearts are a pain when debugging other things change to log messages.

3122
02:27:04,400 --> 02:27:07,100
Yes, I agree with that.

3123
02:27:07,100 --> 02:27:09,700
Tom and I wish we had a log.

3124
02:27:13,200 --> 02:27:14,900
Are we asserting anything though?

3125
02:27:15,100 --> 02:27:17,000
Now, that should that would ever fail.

3126
02:27:20,200 --> 02:27:22,900
I think the things were asserting are now.

3127
02:27:23,000 --> 02:27:25,600
The only things were asserting, Tom are things that can't fail.

3128
02:27:25,800 --> 02:27:28,800
Now, if they failed, you just got a full-on straight up bug.

3129
02:27:29,100 --> 02:27:31,000
I took out the assertion.

3130
02:27:33,500 --> 02:27:36,700
I took out the only assertion that was asserting on something that was

3131
02:27:36,700 --> 02:27:37,800
like an audio Miss.

3132
02:27:38,100 --> 02:27:39,700
So I think we've already got that covered.

3133
02:27:39,700 --> 02:27:40,600
But I agree with you.

3134
02:27:40,800 --> 02:27:43,300
You don't want to start stuff like, oh, I missed the frame or whatever

3135
02:27:43,300 --> 02:27:44,700
because that happens and then you're like,

3136
02:27:46,500 --> 02:27:49,400
If we had a buffer that played from start to finish, would it be a

3137
02:27:49,400 --> 02:27:52,700
valid syncing method to manually set audio?

3138
02:27:52,700 --> 02:27:54,300
Timer equals video timer?

3139
02:27:59,100 --> 02:28:02,200
Yes, if I understand the question correctly, I'm not sure I understand

3140
02:28:02,200 --> 02:28:03,400
exactly what you're asking.

3141
02:28:04,300 --> 02:28:08,600
But we are you basically saying could we just use the video, the

3142
02:28:08,600 --> 02:28:10,800
audios clock to determine when we flip?

3143
02:28:11,300 --> 02:28:15,600
And I think you could but the thing you have to remember is it's 480

3144
02:28:15,600 --> 02:28:20,100
sample granularity on this machine, right?

3145
02:28:21,100 --> 02:28:27,600
So, you know, just be aware that basically

3146
02:28:29,300 --> 02:28:31,500
That's how granular it is 10 milliseconds.

3147
02:28:31,700 --> 02:28:36,200
So that's a pretty high window of error for your flip time.

3148
02:28:36,900 --> 02:28:39,300
So so you would basically get frame stutter.

3149
02:28:39,300 --> 02:28:41,400
I think if you actually tried to use that.

3150
02:28:46,400 --> 02:28:49,200
Fully visualize waveforms and remove gradient turn entire thing into

3151
02:28:49,200 --> 02:28:50,400
massive audio visualizer.

3152
02:28:50,400 --> 02:28:52,400
So we will probably do exactly that.

3153
02:28:52,500 --> 02:28:55,200
When I said when we have better rendering code because when we have

3154
02:28:55,200 --> 02:28:57,400
better rendering code to be trivial for us to render stuff like this,

3155
02:28:57,400 --> 02:28:59,100
like we had to go code all that stuff ourselves.

3156
02:28:59,800 --> 02:29:02,400
And so I didn't want to go Hog Wild there because I'm like, we're just

3157
02:29:02,400 --> 02:29:05,700
redoing work that we're just going to we're doing later, right?

3158
02:29:06,300 --> 02:29:09,100
But once we have some good rendering code in there and we can just

3159
02:29:09,100 --> 02:29:12,000
call it like you would in a higher level language, where you've got a

3160
02:29:12,000 --> 02:29:14,200
libraries, we're going to build those things up, right?

3161
02:29:14,200 --> 02:29:15,100
And then we're going to be able

3162
02:29:15,200 --> 02:29:18,600
Program at a pretty high level, not too long in the future.

3163
02:29:18,600 --> 02:29:20,100
So I want to wait to do stuff.

3164
02:29:20,100 --> 02:29:23,000
That's like really good, debug output with labels and stuff.

3165
02:29:23,100 --> 02:29:25,400
I want to wait to do that until we actually have a renderer.

3166
02:29:36,000 --> 02:29:40,800
If we had a buffer that play for this ministry, we I did that one with

3167
02:29:40,800 --> 02:29:41,200
his invention.

3168
02:29:41,200 --> 02:29:42,700
I first got a question.

3169
02:29:43,200 --> 02:29:46,100
Could you please increased owners 2512 my crappy?

3170
02:29:46,100 --> 02:29:48,500
Laptop speakers can't output 256.

3171
02:29:51,000 --> 02:29:52,600
I guess I don't see why not.

3172
02:29:52,800 --> 02:29:55,100
That's we move that into the platform nonspecific code.

3173
02:29:55,100 --> 02:29:55,300
Right?

3174
02:29:55,300 --> 02:29:59,800
So you're asking for this and right.

3175
02:30:00,200 --> 02:30:04,500
Something like this that code is going to go away at some point with

3176
02:30:04,500 --> 02:30:04,900
something.

3177
02:30:09,900 --> 02:30:10,300
Better.

3178
02:30:19,400 --> 02:30:21,500
Okay, let's take a look here.

3179
02:30:22,900 --> 02:30:24,000
Turn.

3180
02:30:29,500 --> 02:30:31,900
Well this audio system be able to handle Music and Sound or will the

3181
02:30:31,900 --> 02:30:33,800
game have to mucks the audio for us.

3182
02:30:35,800 --> 02:30:38,800
Well, the idea is that Sound and Music are not different.

3183
02:30:38,800 --> 02:30:43,700
So all the sound music and sound effects, all come out through this

3184
02:30:43,700 --> 02:30:44,200
channel.

3185
02:30:44,400 --> 02:30:47,100
So basically the operating system only needs to provide us with a way

3186
02:30:47,100 --> 02:30:52,400
to Output audio in left and run left and right Channel.

3187
02:30:52,500 --> 02:30:55,100
And then the game just pushes everything through those channels.

3188
02:30:55,100 --> 02:30:56,900
So the music will just get mixed directly.

3189
02:30:57,000 --> 02:30:59,200
In there along with all the sound effects because music and sound

3190
02:30:59,200 --> 02:31:02,500
effects aren't actually different as far as the game is concerned in

3191
02:31:02,500 --> 02:31:03,600
terms of what it has to do.

3192
02:31:08,300 --> 02:31:10,500
How will you make sure that you don't have regressions in some parts

3193
02:31:10,500 --> 02:31:12,700
that are not that easy to spot right away.

3194
02:31:13,300 --> 02:31:16,900
Well, you can't, I mean it's part of the answer you put as much debug

3195
02:31:16,900 --> 02:31:20,100
visualization stuff in as you can and you put in as much assertions in

3196
02:31:20,100 --> 02:31:23,100
as you can, but one of the big problems with games is they're entirely

3197
02:31:23,100 --> 02:31:24,100
user input driven.

3198
02:31:24,300 --> 02:31:26,800
They're entirely based on stuff that comes back from the operating

3199
02:31:26,800 --> 02:31:27,300
system.

3200
02:31:27,600 --> 02:31:29,900
So you can't really unit test them.

3201
02:31:30,200 --> 02:31:35,400
Like you can't do a lot of testing of components because usually the

3202
02:31:35,400 --> 02:31:37,300
component style stuff.

3203
02:31:38,100 --> 02:31:42,500
The stuff that's easy to debug and it's the cross system user input

3204
02:31:42,500 --> 02:31:46,400
based like complex states of system stuff that fails.

3205
02:31:47,200 --> 02:31:52,100
And so you really can't do regression testing on most of the hardest

3206
02:31:52,100 --> 02:31:53,300
part of the stuff to test.

3207
02:31:53,300 --> 02:31:54,500
So that's unfortunate.

3208
02:31:54,900 --> 02:31:58,800
I'm sorry if I'm being slow, but I still don't truly understand why.

3209
02:31:58,800 --> 02:32:00,500
Exactly the audio is jumping.

3210
02:32:01,200 --> 02:32:02,900
I'm not sure what you mean by jumping.

3211
02:32:03,300 --> 02:32:05,800
It just seems like we should be able to handle it more simply.

3212
02:32:06,000 --> 02:32:07,900
I've been trying to put together through the storm.

3213
02:32:08,000 --> 02:32:09,600
Stream, but I'm just kind of lost.

3214
02:32:09,600 --> 02:32:11,300
So I'm not sure what you mean by jumping.

3215
02:32:13,500 --> 02:32:18,800
Could you be more specific starchy pancakes about starchy pancakes is

3216
02:32:18,800 --> 02:32:19,400
great name.

3217
02:32:22,500 --> 02:32:25,500
Why the audio is jumping by this question?

3218
02:32:25,500 --> 02:32:28,200
I mean the original problem not the current iteration.

3219
02:32:28,600 --> 02:32:33,300
And so I guess just tell me what you mean by jumping and original

3220
02:32:33,300 --> 02:32:37,900
problem so that I can I can be just just type it in and we'll ask

3221
02:32:37,900 --> 02:32:38,600
answer it there.

3222
02:32:40,400 --> 02:32:44,100
Why is the pitch of the sound changes after the game is running a

3223
02:32:44,100 --> 02:32:44,700
little while?

3224
02:32:45,100 --> 02:32:48,600
So actually, I don't think that that actually happens.

3225
02:32:48,600 --> 02:32:49,800
That's the controller.

3226
02:32:50,400 --> 02:32:51,100
So I

3227
02:32:51,500 --> 02:32:53,600
leave that the controller right now.

3228
02:32:53,600 --> 02:32:56,800
This controller has a dead zone as far as I can tell, and I haven't

3229
02:32:56,800 --> 02:32:57,400
played with it yet.

3230
02:32:57,400 --> 02:32:59,600
That's even bigger than the one specified by.

3231
02:33:00,900 --> 02:33:04,600
X input normally and I noticed this when I was playing games to it's

3232
02:33:04,600 --> 02:33:05,600
really kind of annoying.

3233
02:33:06,500 --> 02:33:10,500
But basically, I believe if we just took out the user input.

3234
02:33:10,700 --> 02:33:12,900
So this was gone, right?

3235
02:33:13,100 --> 02:33:14,300
We wouldn't hear that anymore.

3236
02:33:26,000 --> 02:33:26,300
Hmm.

3237
02:33:28,500 --> 02:33:30,300
Now, that's where that actually did change.

3238
02:33:30,900 --> 02:33:32,100
What is going on there?

3239
02:33:32,400 --> 02:33:32,700
I agree.

3240
02:33:32,700 --> 02:33:36,900
That's a bit of a bug because I think our tone hurts should now be

3241
02:33:36,900 --> 02:33:38,100
constant, right?

3242
02:33:39,500 --> 02:33:43,300
So, how are we actually getting a different sound output speed?

3243
02:33:43,400 --> 02:33:46,200
Because that is even difficult for us to do.

3244
02:33:49,100 --> 02:33:52,000
It is because we're, if we're always outputting it, basically the

3245
02:33:52,000 --> 02:33:53,700
exact same wave period.

3246
02:33:53,700 --> 02:33:55,200
That seems pretty pretty tricky.

3247
02:33:55,200 --> 02:33:57,000
Now, to be fair.

3248
02:33:57,200 --> 02:33:58,700
We're not actually accounting.

3249
02:33:59,300 --> 02:34:02,900
One thing we could do is we could account for the fact that the sign

3250
02:34:02,900 --> 02:34:06,800
sign loses its Precision, pretty quickly for our test value.

3251
02:34:06,800 --> 02:34:10,900
So I should double check as well that that's not happening.

3252
02:34:11,100 --> 02:34:14,900
Basically what happens is sign f as this T sign goes up I should guard

3253
02:34:14,900 --> 02:34:16,800
against that happening.

3254
02:34:17,400 --> 02:34:17,800
So

3255
02:34:18,000 --> 02:34:22,900
You know the, the T sine value should basically just wrap every time

3256
02:34:22,900 --> 02:34:25,600
it goes It goes through 2 pi.

3257
02:34:26,100 --> 02:34:26,600
Right?

3258
02:34:26,600 --> 02:34:34,300
So basically if T sine is greater than 2 pi, right T sine can go back

3259
02:34:34,300 --> 02:34:34,800
down.

3260
02:34:35,300 --> 02:34:39,600
By that amount basically just just normalizing it to its period if

3261
02:34:39,600 --> 02:34:41,800
that made sense, so,

3262
02:34:43,700 --> 02:34:45,500
But I don't think that should have been it.

3263
02:34:45,600 --> 02:34:46,400
Maybe it was.

3264
02:34:52,100 --> 02:34:54,600
Yeah, that's that's so for what it's worth.

3265
02:34:54,600 --> 02:34:58,000
That's way sooner than I would have thought sign would have lost its

3266
02:34:58,000 --> 02:35:00,800
floating Point Precision, but

3267
02:35:02,400 --> 02:35:03,400
Looks like that's it.

3268
02:35:03,400 --> 02:35:08,000
Looks like literally loses position that quickly and I guess that

3269
02:35:08,000 --> 02:35:08,400
makes sense.

3270
02:35:08,400 --> 02:35:09,100
Those numbers.

3271
02:35:09,500 --> 02:35:10,200
When you think about it.

3272
02:35:10,200 --> 02:35:11,500
The sine wave is oscillating.

3273
02:35:11,500 --> 02:35:14,100
Many times inside that set inside a second.

3274
02:35:14,900 --> 02:35:18,100
So that number is getting really huge and you just blow out.

3275
02:35:18,200 --> 02:35:19,000
That's kind of cool.

3276
02:35:19,000 --> 02:35:19,900
How fast that happened.

3277
02:35:19,900 --> 02:35:20,800
If you think about it.

3278
02:35:20,900 --> 02:35:23,100
Basically, you got a floating-point number here, right?

3279
02:35:23,200 --> 02:35:24,500
And the floating Point number.

3280
02:35:24,700 --> 02:35:27,500
Let's, let's let's do it this way.

3281
02:35:28,500 --> 02:35:32,000
I'm basically going to see if I can kind of

3282
02:35:32,200 --> 02:35:34,600
Late, roughly, when we hear that sound happen.

3283
02:35:35,100 --> 02:35:40,000
I'm going to go ahead and break break into the game at the point where

3284
02:35:40,000 --> 02:35:40,600
that happens.

3285
02:35:40,600 --> 02:35:43,100
So game output sound.

3286
02:35:43,100 --> 02:35:44,300
This is this is pretty cool.

3287
02:35:44,400 --> 02:35:45,100
I'm pretty psyched.

3288
02:35:45,100 --> 02:35:45,900
That was actually it.

3289
02:35:45,900 --> 02:35:50,000
I was wouldn't have expected that but I wanted to check and it turns

3290
02:35:50,000 --> 02:35:50,900
out that was it.

3291
02:35:50,900 --> 02:35:54,700
So what I'm going to do is I'm going to drop a breakpoint into the

3292
02:35:54,700 --> 02:35:59,000
game basically as soon as I hear that sound as soon as I hear us at

3293
02:35:59,000 --> 02:35:59,800
the sound change.

3294
02:36:00,000 --> 02:36:00,800
That makes sense.

3295
02:36:01,000 --> 02:36:02,600
I'm going to drop a breakpoint right there.

3296
02:36:11,000 --> 02:36:13,300
Okay, so I heard the sound change a little bit.

3297
02:36:13,400 --> 02:36:14,400
So let's take a look.

3298
02:36:15,700 --> 02:36:16,100
Let's see.

3299
02:36:16,100 --> 02:36:17,200
What T sign is.

3300
02:36:18,200 --> 02:36:18,900
So there we go.

3301
02:36:19,600 --> 02:36:24,800
So basically what we have learned here is that when we get to 18,000

3302
02:36:25,200 --> 02:36:30,700
roughly 18,000 we have lost the Precision necessary for the sign to

3303
02:36:30,700 --> 02:36:32,000
still work properly.

3304
02:36:32,100 --> 02:36:34,600
So I guess one question is roughly.

3305
02:36:34,600 --> 02:36:38,500
Where is that on the power of to Spectrum, right?

3306
02:36:39,400 --> 02:36:42,200
You know, where where is where is that value?

3307
02:36:42,400 --> 02:36:47,400
So if you think about what kind of power of 2 we need for that that's

3308
02:36:47,400 --> 02:36:47,900
somewhere.

3309
02:36:48,100 --> 02:36:53,400
Around, you know, that somewhere around 15, B.

3310
02:36:53,400 --> 02:36:56,300
Let's say, like if you, I don't know.

3311
02:36:56,300 --> 02:36:57,100
Where's that?

3312
02:36:57,100 --> 02:36:58,400
Where's the pow function?

3313
02:37:02,700 --> 02:37:03,600
Scientific?

3314
02:37:03,600 --> 02:37:07,600
What do we what do we got here to be have square root?

3315
02:37:07,600 --> 02:37:08,800
We do have square root.

3316
02:37:10,500 --> 02:37:12,400
So let's see what, let's see here.

3317
02:37:13,100 --> 02:37:16,800
Two to the 15th.

3318
02:37:17,800 --> 02:37:17,900
Yeah.

3319
02:37:18,000 --> 02:37:23,500
Yeah, so that's somewhere around to the 15th worth of bits in there.

3320
02:37:24,900 --> 02:37:30,500
And then so you figure, if we have a 24-bit mantissa, right?

3321
02:37:30,500 --> 02:37:35,900
So we have 24 bits worth of data in our sign and we're using up, you

3322
02:37:35,900 --> 02:37:40,200
know, something like 15 of them, that gives us nine bits of precision,

3323
02:37:40,700 --> 02:37:43,500
in our sine wave, left.

3324
02:37:43,500 --> 02:37:44,300
Am I doing that?

3325
02:37:44,300 --> 02:37:44,900
Right?

3326
02:37:44,900 --> 02:37:47,800
Let's say something like that.

3327
02:37:48,100 --> 02:37:52,000
That point and so 9 bits of precision in the sound.

3328
02:37:52,000 --> 02:37:52,600
Wave.

3329
02:37:53,400 --> 02:37:54,500
What would that actually be?

3330
02:37:54,500 --> 02:37:56,500
So two to the ninth?

3331
02:37:57,000 --> 02:37:58,100
It's 512.

3332
02:37:58,100 --> 02:38:00,300
Oh, all right, so you can kind of see what the problem is.

3333
02:38:00,500 --> 02:38:05,900
So basically we're down to one we're down to five hundred and twelve

3334
02:38:05,900 --> 02:38:09,800
steps in our sine wave and I guess that is enough that we can actually

3335
02:38:09,800 --> 02:38:11,700
hear the problem.

3336
02:38:12,800 --> 02:38:14,600
So, yeah, we just ran out of precision.

3337
02:38:14,600 --> 02:38:17,900
There weren't enough bits in The Floating point value to

3338
02:38:18,000 --> 02:38:24,200
Really make that make that work five hundred and twelve steps.

3339
02:38:24,200 --> 02:38:25,200
Well times, two Pi.

3340
02:38:25,200 --> 02:38:26,500
So yeah, I don't know.

3341
02:38:27,100 --> 02:38:30,400
That's that's kind of surprising that that happened so soon, but it

3342
02:38:30,400 --> 02:38:31,600
gets you kind of got to figure.

3343
02:38:31,800 --> 02:38:32,800
It's going to there.

3344
02:38:32,800 --> 02:38:34,700
Just aren't that many bits in a floating point value.

3345
02:38:34,700 --> 02:38:36,600
They lose Precision pretty quickly.

3346
02:38:37,500 --> 02:38:38,100
So there we go.

3347
02:38:38,100 --> 02:38:41,100
I'm going to go ahead and turn the user input back on and see if we

3348
02:38:41,100 --> 02:38:44,400
also have a problem with the controller because I think that may be

3349
02:38:44,400 --> 02:38:45,000
true as well.

3350
02:38:53,700 --> 02:38:54,600
That sounds pretty good.

3351
02:39:14,900 --> 02:39:15,900
So that's that's pretty good.

3352
02:39:15,900 --> 02:39:18,600
So it looks like maybe it was only just losing sign Precision.

3353
02:39:19,200 --> 02:39:19,500
Again.

3354
02:39:19,500 --> 02:39:20,400
This is just test codes.

3355
02:39:20,400 --> 02:39:22,500
We don't have to care about that but it is nice to get it out of there

3356
02:39:22,500 --> 02:39:27,500
because I mean, since its test code, we want it to be consistent and

3357
02:39:27,500 --> 02:39:31,200
maybe like, if we'd had another bug in the sound layer, that could

3358
02:39:31,200 --> 02:39:32,000
have been masking it.

3359
02:39:32,000 --> 02:39:33,000
And we could have been thinking.

3360
02:39:33,000 --> 02:39:37,800
Oh, there's just a bug in, you know, in the controller output or

3361
02:39:37,800 --> 02:39:38,100
whatever.

3362
02:39:38,100 --> 02:39:40,300
And, you know, it's just getting rid of bugs.

3363
02:39:40,300 --> 02:39:43,200
Even if it's in code, that doesn't matter at all, is still good

3364
02:39:43,300 --> 02:39:44,600
because now, at least we've

3365
02:39:44,700 --> 02:39:45,900
Some variability there.

3366
02:39:46,900 --> 02:39:47,700
Let's take a look.

3367
02:39:55,400 --> 02:39:58,400
Sorry, I meant skipping the original audio.

3368
02:39:58,400 --> 02:40:02,200
Skip when we move the latency to be inside of three frames, I believe.

3369
02:40:03,700 --> 02:40:04,800
Oh, okay.

3370
02:40:05,700 --> 02:40:08,400
So the reason for that was basically just the way we were doing.

3371
02:40:08,400 --> 02:40:11,700
The computation was off of the play cursor.

3372
02:40:12,100 --> 02:40:16,300
So we were kind of being a little too optimistic, right?

3373
02:40:17,100 --> 02:40:19,700
Start, your pancakes here is I think what you were asking.

3374
02:40:23,000 --> 02:40:25,000
So basically what we were doing is we were looking at where the play

3375
02:40:25,000 --> 02:40:25,500
Chris or was.

3376
02:40:25,500 --> 02:40:30,200
So we woke up and the play cursor is somewhere like here right.

3377
02:40:30,300 --> 02:40:31,400
Wherever it happens to be.

3378
02:40:32,200 --> 02:40:36,600
And we were basically saying, okay, what we want to do is take the

3379
02:40:36,600 --> 02:40:40,700
play cursor and take a look at where the next I think what we were

3380
02:40:40,700 --> 02:40:43,100
saying something like wherever the play cursor is.

3381
02:40:43,400 --> 02:40:46,900
We're going to assume that the play cursor at the time of the flip.

3382
02:40:46,900 --> 02:40:47,700
That's what we're doing.

3383
02:40:47,800 --> 02:40:49,600
So the play Crusher at the time of the flip.

3384
02:40:49,700 --> 02:40:52,500
We were basically saying let's go a frame.

3385
02:40:52,500 --> 02:40:52,600
A

3386
02:40:52,800 --> 02:40:54,500
Ed of that, right?

3387
02:40:55,300 --> 02:40:59,500
Was what we wanted to do, and that's where we should actually write to

3388
02:40:59,600 --> 02:41:00,900
should write 2 here in the buffer.

3389
02:41:01,000 --> 02:41:01,600
Right?

3390
02:41:02,600 --> 02:41:10,500
So one frame ahead is what we would expect for it to be, and we're

3391
02:41:10,500 --> 02:41:13,400
going to write one frame ahead of that.

3392
02:41:13,500 --> 02:41:13,700
Right?

3393
02:41:13,700 --> 02:41:16,400
So it's basically two frames, right?

3394
02:41:16,400 --> 02:41:20,100
Is how much, but we would right ahead, ideally, but we then knew that

3395
02:41:20,100 --> 02:41:22,600
the right cursor actually was was

3396
02:41:22,700 --> 02:41:25,300
Is all the way out here when we started looking at it.

3397
02:41:25,600 --> 02:41:28,600
So if the play cursor was even just a little bit off than the right

3398
02:41:28,600 --> 02:41:32,100
cursor, would actually be here and we would skip right?

3399
02:41:32,300 --> 02:41:33,900
Even if we were lined up properly.

3400
02:41:33,900 --> 02:41:38,000
So we had to do is write one full whole frame ahead of even the frame.

3401
02:41:38,000 --> 02:41:39,800
We were writing to ensure.

3402
02:41:41,700 --> 02:41:43,100
That by the time the play cursor.

3403
02:41:43,100 --> 02:41:44,600
Got to the next one.

3404
02:41:45,100 --> 02:41:47,300
The right cursor, wasn't passed.

3405
02:41:47,300 --> 02:41:50,600
The point that we had written to because if we'd written only to their

3406
02:41:50,600 --> 02:41:53,300
the right cursor, will now be passed it and we'd get that Gap.

3407
02:41:54,300 --> 02:41:58,100
So it was really just just because we were writing, we wrote that code

3408
02:41:58,100 --> 02:41:59,800
optimistically assuming that the play curse.

3409
02:42:00,300 --> 02:42:02,800
And the right cursor looked like that, but they actually look more

3410
02:42:02,800 --> 02:42:04,300
like that at least on this machine.

3411
02:42:26,200 --> 02:42:29,300
If it's not too much of an issue, can we have line numbers on the side

3412
02:42:29,300 --> 02:42:33,900
when you are coding so you can get a grip of where well, so, I don't

3413
02:42:33,900 --> 02:42:34,400
know.

3414
02:42:34,500 --> 02:42:36,400
Can we get them?

3415
02:42:37,600 --> 02:42:42,300
I don't know if emacs has that, but I could at least put them on in

3416
02:42:42,300 --> 02:42:47,500
here because I think this has that and I wouldn't mind having them

3417
02:42:47,500 --> 02:42:47,700
here.

3418
02:42:47,700 --> 02:42:50,500
I'm okay with that because I don't need the screen real estate for it.

3419
02:42:50,800 --> 02:42:55,000
So let's see, is the text editor have line numbers.

3420
02:42:55,900 --> 02:42:58,000
Does it have line numbers?

3421
02:42:58,000 --> 02:42:58,600
Yes.

3422
02:42:59,900 --> 02:43:00,700
So they're at least.

3423
02:43:00,700 --> 02:43:03,100
Then we'll have some line numbers in the debug.

3424
02:43:04,800 --> 02:43:05,300
Okay.

3425
02:43:05,600 --> 02:43:08,400
So let's see.

3426
02:43:08,400 --> 02:43:11,900
Clements bound says, it's more likely to be the accumulation of a

3427
02:43:11,900 --> 02:43:14,300
small value onto a larger value.

3428
02:43:14,300 --> 02:43:15,600
That is a numerical problem.

3429
02:43:15,600 --> 02:43:17,000
Mantissa is not lining up.

3430
02:43:17,500 --> 02:43:17,900
Okay.

3431
02:43:17,900 --> 02:43:20,800
So basically what they were saying is that we couldn't actually

3432
02:43:20,800 --> 02:43:23,600
increment it by well, that's but that's basically the same thing.

3433
02:43:25,200 --> 02:43:27,500
I mean that's that's there.

3434
02:43:27,500 --> 02:43:29,200
Those are two sides of the same coin.

3435
02:43:29,800 --> 02:43:33,800
Basically, the fact that we can't add a small value to it is the same

3436
02:43:33,800 --> 02:43:36,600
as saying there isn't Precision in it to record the size of the value

3437
02:43:36,600 --> 02:43:39,000
that we actually need for the most part.

3438
02:43:39,900 --> 02:43:44,400
But yeah, I agree that maybe if you you could do the math in a way

3439
02:43:44,400 --> 02:43:46,800
that was a little more amenable to it.

3440
02:43:48,100 --> 02:43:50,500
Well, I'm not sure how you would actually do it.

3441
02:43:52,400 --> 02:43:55,200
Yeah, I'm not sure how you'd actually reorganize that math without

3442
02:43:55,200 --> 02:43:58,500
just dividing into where the sign would be.

3443
02:43:58,500 --> 02:44:00,600
But if you were doing that, you wouldn't have it.

3444
02:44:00,600 --> 02:44:01,700
You would never let it grow.

3445
02:44:01,700 --> 02:44:02,800
So yeah, I'm not sure.

3446
02:44:03,400 --> 02:44:04,000
All right.

3447
02:44:04,600 --> 02:44:06,100
Well, my voice is about gone.

3448
02:44:06,400 --> 02:44:07,900
So I think that is it for today.

3449
02:44:08,400 --> 02:44:10,100
This has been a marathon session.

3450
02:44:10,800 --> 02:44:14,000
I think we're we basically did a three hour session of handmade hero,

3451
02:44:14,300 --> 02:44:17,300
but I said it was gonna be long and it was long and I think we did

3452
02:44:17,300 --> 02:44:18,300
some good work today.

3453
02:44:18,600 --> 02:44:20,900
So thank you so much everyone for joining me.

3454
02:44:21,300 --> 02:44:22,000
If you would.

3455
02:44:22,200 --> 02:44:25,700
Like to get the source code, you can go to handmade hero dot-org and

3456
02:44:25,700 --> 02:44:26,500
pre-order the game.

3457
02:44:26,500 --> 02:44:28,500
It comes with the full source code, updated, every evening.

3458
02:44:28,500 --> 02:44:29,600
You'll get a link in your email.

3459
02:44:29,600 --> 02:44:32,000
You can use to download it and it's divided by day.

3460
02:44:32,000 --> 02:44:34,500
So you can always jump back and forth between any given day or if you

3461
02:44:34,500 --> 02:44:35,700
want to use source code control.

3462
02:44:35,700 --> 02:44:38,300
If you have a source code control system that you use, you can check

3463
02:44:38,300 --> 02:44:39,200
it in every day.

3464
02:44:39,900 --> 02:44:40,700
Even if you just start.

3465
02:44:40,700 --> 02:44:44,200
Now, you can basically write a little script or something and unpack

3466
02:44:44,200 --> 02:44:47,200
each individual one and create your own source code repository with it

3467
02:44:47,200 --> 02:44:47,700
basically.

3468
02:44:48,400 --> 02:44:49,400
So you can go ahead and do that.

3469
02:44:49,400 --> 02:44:52,000
If you have questions or want to discuss things the news and for

3470
02:44:52,100 --> 02:44:55,500
rooms link that basically has all kinds of stuff.

3471
02:44:55,500 --> 02:44:58,400
It has coding resources where people have ported the thing to other

3472
02:44:58,400 --> 02:44:59,100
platforms.

3473
02:44:59,100 --> 02:44:59,700
It's got

3474
02:45:00,000 --> 02:45:03,600
Discussion forum where you can ask questions, so it's pretty good.

3475
02:45:03,900 --> 02:45:04,700
Basically.

3476
02:45:05,900 --> 02:45:09,100
It's a good place to go just to talk to other people and find out

3477
02:45:09,100 --> 02:45:09,600
stuff.

3478
02:45:09,800 --> 02:45:10,600
Anyway.

3479
02:45:11,300 --> 02:45:14,000
Before I lose my voice I will sign off now and say thanks so much for

3480
02:45:14,000 --> 02:45:17,200
joining me for another episode of handmade here.

3481
02:45:17,200 --> 02:45:19,400
We will be back Monday night at 8:00 p.m.

3482
02:45:19,400 --> 02:45:23,200
Pacific Standard time when we will start working on some more

3483
02:45:23,200 --> 02:45:24,400
interesting stuff.

3484
02:45:25,300 --> 02:45:29,800
In terms of actually what goes on the screen will start looking at how

3485
02:45:29,800 --> 02:45:29,900
to

3486
02:45:30,000 --> 02:45:31,400
To actually get the game together.

3487
02:45:31,400 --> 02:45:34,800
Now that we pretty sure that we've got a reasonable platform layer.

3488
02:45:34,800 --> 02:45:40,800
At least for prototyping will probably do one more day of next.

3489
02:45:40,800 --> 02:45:43,300
Next week, will mostly be about other stuff but we'll probably do one

3490
02:45:43,300 --> 02:45:44,700
more day of win32 things.

3491
02:45:44,700 --> 02:45:47,200
There's a couple fun things that I wanted to do.

3492
02:45:47,500 --> 02:45:51,100
So we'll probably do a little bit more on the platform layer since it

3493
02:45:51,100 --> 02:45:53,300
took us two days to the audio instead of one.

3494
02:45:54,100 --> 02:45:58,400
So we'll basically go ahead and do one more day, but after that, we

3495
02:45:58,400 --> 02:45:59,800
will be on to graphics.

3496
02:46:00,000 --> 02:46:02,500
Doing sort of graphic stuff on the street and other stuff, sort of fun

3497
02:46:02,500 --> 02:46:04,500
stuff that I think will be pretty interesting.

3498
02:46:04,500 --> 02:46:06,600
So, hopefully, you will join us next week.

3499
02:46:06,600 --> 02:46:07,200
8 p.m.

3500
02:46:07,200 --> 02:46:08,800
PST on Monday.

3501
02:46:08,800 --> 02:46:10,000
Hope to see you all there.

3502
02:46:10,400 --> 02:46:12,500
Thank you so much for joining me.

