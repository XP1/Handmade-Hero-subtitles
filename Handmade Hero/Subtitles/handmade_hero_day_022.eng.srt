1
00:00:00,500 --> 00:00:01,800
We will deal with that later.

2
00:00:02,500 --> 00:00:03,900
Alright, hello, everyone?

3
00:00:03,900 --> 00:00:07,200
And thank you for joining me for another episode of handmade hero.

4
00:00:07,200 --> 00:00:10,000
The show where we code a complete game from scratch using nothing.

5
00:00:10,700 --> 00:00:11,600
No libraries.

6
00:00:11,600 --> 00:00:15,400
No engines, just right on top of the OS as low as we can possibly go.

7
00:00:16,200 --> 00:00:19,100
And again, this is just an educational program.

8
00:00:19,100 --> 00:00:23,400
We're basically trying to do everything that's involved in the actual

9
00:00:23,400 --> 00:00:26,400
execution of a game, so that people can understand the complete

10
00:00:26,500 --> 00:00:30,000
technology behind them with no kind of hidden aspects.

11
00:00:30,400 --> 00:00:32,900
Misunderstandings like, really getting down into, absolutely

12
00:00:32,900 --> 00:00:36,800
everything that makes a game tick because not only do I think that's

13
00:00:36,800 --> 00:00:41,200
important because hey the next generation of engine programmers, and

14
00:00:41,700 --> 00:00:43,400
are going to have to be able to do all that stuff.

15
00:00:43,400 --> 00:00:46,500
But also because even if you always intend on using engines or

16
00:00:46,500 --> 00:00:50,400
libraries understanding how everything works, in the full stack of a

17
00:00:50,400 --> 00:00:55,200
game, really allows you to make better decisions.

18
00:00:55,300 --> 00:00:58,000
It allows you to debug things better and it allows you to drop down

19
00:00:58,000 --> 00:01:00,100
and do low-level stuff in the

20
00:01:00,200 --> 00:01:02,900
Is where you actually need to in order to make new things for your

21
00:01:02,900 --> 00:01:03,200
game.

22
00:01:03,200 --> 00:01:05,400
In the cases where existing things just don't work.

23
00:01:05,400 --> 00:01:05,600
Right?

24
00:01:05,600 --> 00:01:07,200
Or don't support the kind of things that you need.

25
00:01:07,200 --> 00:01:12,500
So pretty much there's never really a bad time to learn more about low

26
00:01:12,500 --> 00:01:16,400
level stuff because it can only really make you more powerful in

27
00:01:16,400 --> 00:01:18,500
everything that you do no matter what level you do it at.

28
00:01:18,500 --> 00:01:24,400
And so with that with that stated, we're going to do some stuff today

29
00:01:24,500 --> 00:01:27,800
that we to pick up on where we left off yesterday where we were trying

30
00:01:27,800 --> 00:01:30,100
to basically put C into a position.

31
00:01:30,300 --> 00:01:33,800
To be as easy to use as a scripting language in terms of turnaround

32
00:01:33,800 --> 00:01:34,000
time.

33
00:01:34,000 --> 00:01:38,300
So instead of having to go through a compile, debug Run Cycle every

34
00:01:38,300 --> 00:01:41,300
time you want to change something and see where you have to restart

35
00:01:41,300 --> 00:01:41,700
the app.

36
00:01:41,700 --> 00:01:44,200
We made something yesterday where we could just change the C code and

37
00:01:44,200 --> 00:01:47,800
it would automatically update in the game without having to close the

38
00:01:47,800 --> 00:01:48,200
game.

39
00:01:48,300 --> 00:01:50,500
And so we're going to do is kind of we're going to work on that a

40
00:01:50,500 --> 00:01:53,000
little bit more today and perfect it to getting to the point where we

41
00:01:53,000 --> 00:01:56,600
can just Live code C and have the game change, right?

42
00:01:56,700 --> 00:02:00,100
It's at a nice lie, as we change the C code, so if you are following

43
00:02:00,200 --> 00:02:00,800
Along at home.

44
00:02:00,800 --> 00:02:03,300
If you have pre-ordered, the game, you should have gotten an email

45
00:02:03,300 --> 00:02:05,700
with a link in it that link always allows you to download the latest

46
00:02:05,700 --> 00:02:06,300
source code.

47
00:02:06,500 --> 00:02:09,500
It is one big zip file that has separate steps in it for every day.

48
00:02:09,900 --> 00:02:13,400
And as you can see here, Friday handy dandy counter, we are on day 22.

49
00:02:13,600 --> 00:02:18,600
So if you would like to follow along with us unzip day 21 and you will

50
00:02:18,600 --> 00:02:21,600
have the exact same Source set up as I have right now.

51
00:02:22,300 --> 00:02:24,900
So with that said, here we go.

52
00:02:25,400 --> 00:02:28,300
Now a couple things happened yesterday.

53
00:02:28,300 --> 00:02:30,100
Basically, we were having trouble with

54
00:02:30,500 --> 00:02:32,700
I was having trouble figuring out how to tell the compiler.

55
00:02:32,700 --> 00:02:33,200
No, really.

56
00:02:33,200 --> 00:02:34,200
We don't want an exit.

57
00:02:34,200 --> 00:02:37,100
We just want to deal L, but it turned out, the only reason for that

58
00:02:37,100 --> 00:02:40,000
was because I was compiling in the build-up bet.

59
00:02:40,000 --> 00:02:43,900
I was compiling trying to pass the / dll to the Linker, but it in

60
00:02:43,900 --> 00:02:46,900
turns out, if you're actually calling CL and not the Linker, you have

61
00:02:46,900 --> 00:02:48,600
to pass this /ld switch.

62
00:02:48,600 --> 00:02:51,700
So it's just a compiler, switch change that you have to do.

63
00:02:51,700 --> 00:02:53,400
So we did that yesterday.

64
00:02:53,400 --> 00:02:56,600
But what that means is that a couple of things that we did to try and

65
00:02:56,600 --> 00:02:59,500
get things to Output a dll are not actually necessary.

66
00:02:59,500 --> 00:02:59,800
So for

67
00:03:00,000 --> 00:03:03,100
People at the bottom of handmade dot CPP.

68
00:03:03,100 --> 00:03:05,800
I had inserted this dll main, which is basically the place where when

69
00:03:05,800 --> 00:03:08,600
a dll is loaded Windows calls that back just to see if it needs do

70
00:03:08,600 --> 00:03:08,900
anything.

71
00:03:08,900 --> 00:03:10,100
We don't need to do anything.

72
00:03:10,100 --> 00:03:12,000
But I check to see if we had to put that in there.

73
00:03:12,600 --> 00:03:14,400
I don't think we actually need that anymore.

74
00:03:14,400 --> 00:03:17,900
So I'm just going to verify that we actually don't and it looks like

75
00:03:17,900 --> 00:03:18,600
we don't.

76
00:03:18,900 --> 00:03:20,900
So then we have in our build directory.

77
00:03:21,200 --> 00:03:24,100
We still should be producing a dll and we are not Annex C.

78
00:03:24,100 --> 00:03:26,200
So basically just want to get rid of that code because didn't need to

79
00:03:26,200 --> 00:03:26,500
be there.

80
00:03:26,500 --> 00:03:27,600
So there's no need for it.

81
00:03:28,300 --> 00:03:29,300
Other than that.

82
00:03:29,300 --> 00:03:29,800
We were in a

83
00:03:30,000 --> 00:03:30,800
Pretty good position.

84
00:03:30,800 --> 00:03:31,500
Yesterday.

85
00:03:31,900 --> 00:03:34,000
I'm going to recap sort of where we were.

86
00:03:34,000 --> 00:03:37,200
Just so you have a good understanding of what we're going to do in a

87
00:03:37,200 --> 00:03:37,700
second here.

88
00:03:37,700 --> 00:03:40,500
But basically where we gotten to is if we go into the build directory

89
00:03:41,000 --> 00:03:43,100
and we ran our game, right?

90
00:03:43,100 --> 00:03:44,100
And here is the game.

91
00:03:44,600 --> 00:03:46,400
We were now in a position where we could.

92
00:03:46,400 --> 00:03:50,400
If we wanted to go into good new emacs, or whatever, editor, you

93
00:03:50,400 --> 00:03:53,700
happen to be using at home, if I want to kind of make it so that I can

94
00:03:53,700 --> 00:03:54,600
see a little bit better.

95
00:03:54,600 --> 00:03:58,900
I'll make a little kind of short shorter and Squad easier, if you

96
00:03:58,900 --> 00:03:59,100
will.

97
00:03:59,200 --> 00:03:59,600
Oops,

98
00:04:00,000 --> 00:04:03,000
Windows for correcting that, of course, that's what I wanted you to

99
00:04:03,000 --> 00:04:05,300
do, was to make it the, the whole window size.

100
00:04:07,100 --> 00:04:10,800
So if I go in here, now while the game is running, we had actually

101
00:04:10,800 --> 00:04:15,000
gotten it to a point where I could go and change what it was doing and

102
00:04:15,000 --> 00:04:16,000
it would update on the fly.

103
00:04:16,000 --> 00:04:20,000
So for example, if I wanted to change this from using green, to

104
00:04:20,000 --> 00:04:22,600
putting green in the green slot, to putting green in the red slot, I

105
00:04:22,600 --> 00:04:23,300
can do that.

106
00:04:23,300 --> 00:04:27,900
I can hit save and then the game will periodically reload, Oscar.

107
00:04:27,900 --> 00:04:29,800
I got to build it first, so I build the game.

108
00:04:29,900 --> 00:04:33,100
Mmmmm, when it actually finishes building the game will then pick it

109
00:04:33,100 --> 00:04:35,000
up and change the color.

110
00:04:35,000 --> 00:04:37,300
But you'll notice there's a fair bit of lag there right?

111
00:04:37,300 --> 00:04:39,300
When I get it and I redo it.

112
00:04:39,500 --> 00:04:40,600
There's a fair bit of lag there.

113
00:04:40,600 --> 00:04:43,000
And the reason that there's lag is that our game is only actually

114
00:04:43,000 --> 00:04:46,600
checking to see if it needs to reload every so often.

115
00:04:46,600 --> 00:04:48,500
It's only checking about once every two seconds.

116
00:04:48,500 --> 00:04:49,100
So that's something.

117
00:04:49,100 --> 00:04:51,200
We could fix and get it a little bit better.

118
00:04:51,200 --> 00:04:55,100
The other thing that we would like to fix at a bare minimum is that if

119
00:04:55,100 --> 00:04:57,700
we were running in the debugger, oops, that's no good.

120
00:04:58,000 --> 00:04:58,600
I keep forgetting.

121
00:04:58,600 --> 00:04:59,800
That the in fact I should

122
00:05:00,000 --> 00:05:01,200
Let's go ahead and close that.

123
00:05:01,400 --> 00:05:02,300
Get that out of there.

124
00:05:02,700 --> 00:05:07,100
I was thinking the witness earlier today and don't want that getting

125
00:05:07,100 --> 00:05:08,900
getting a snuck in here.

126
00:05:08,900 --> 00:05:10,400
This is not a witness coding session.

127
00:05:10,400 --> 00:05:12,800
This is a, this is a handmade hero coding section session.

128
00:05:13,100 --> 00:05:17,800
So basically, if I was to run this in the debugger, right, so I run

129
00:05:17,800 --> 00:05:20,500
this, this the same thing that we were running, but I run it under the

130
00:05:20,500 --> 00:05:21,100
debugger.

131
00:05:21,600 --> 00:05:24,200
If I was to go, try to recompile.

132
00:05:24,400 --> 00:05:27,700
We ran into a problem, which is that Visual Studio when I try to

133
00:05:27,700 --> 00:05:29,600
compile when the game is running it,

134
00:05:29,900 --> 00:05:31,200
Aunt actually compile.

135
00:05:31,200 --> 00:05:34,600
Because Visual Studio has locked the debug information file.

136
00:05:35,000 --> 00:05:38,800
And so the compiler is unable to actually do anything about that.

137
00:05:38,800 --> 00:05:42,600
It can't out put a new one because it's trying to write it over to the

138
00:05:42,600 --> 00:05:43,200
same place.

139
00:05:43,200 --> 00:05:45,800
And this is pretty bad because I would like to always be able to run

140
00:05:45,800 --> 00:05:46,500
into the Bugger.

141
00:05:47,800 --> 00:05:51,400
I don't want to have to stop using the debugger when we want to use

142
00:05:51,400 --> 00:05:52,300
our Live code loading.

143
00:05:52,300 --> 00:05:55,100
So what I'd like to do is also figure out a way to get around that.

144
00:05:55,100 --> 00:05:58,800
So the first thing we're going to do is see, I don't actually know

145
00:05:58,800 --> 00:05:59,000
this.

146
00:05:59,000 --> 00:05:59,800
This didn't used to be

147
00:06:00,100 --> 00:06:03,300
Visual Studio like many, Microsoft products gets worse with every

148
00:06:03,300 --> 00:06:03,700
revision.

149
00:06:03,700 --> 00:06:06,900
And this is one of the ways that it got worse before, when you would

150
00:06:06,900 --> 00:06:12,600
unload a dll, it would actually unload the pdb, as well.

151
00:06:12,800 --> 00:06:15,800
And so, I assumed that it would do that, and that all we'd have to do

152
00:06:15,800 --> 00:06:18,500
today is make sure that we actually do that, like, in the game, we

153
00:06:18,500 --> 00:06:23,700
would unload, the dll it would unload, the pdb, windows Visual Studio

154
00:06:23,700 --> 00:06:26,600
would stop locking, the pdb, for Access, so we could write to it and

155
00:06:26,600 --> 00:06:29,500
then we would reload it and everything would be fine, but from

156
00:06:29,500 --> 00:06:29,800
looking.

157
00:06:30,000 --> 00:06:32,700
On the web today because I wanted to check to see if that was true.

158
00:06:32,700 --> 00:06:35,700
Still, it turns out that it does not look like it is true.

159
00:06:35,800 --> 00:06:42,100
It looks like visual studio now continues to lock the pdb even after

160
00:06:42,100 --> 00:06:45,000
you unload a dll even though it doesn't need the pdb anymore.

161
00:06:45,000 --> 00:06:46,300
It's just keeps it locked.

162
00:06:48,900 --> 00:06:52,000
So, we could go verify that that's true.

163
00:06:53,000 --> 00:06:57,800
Or what we could do is try to change what we do a little bit to see if

164
00:06:57,800 --> 00:06:58,600
we can work around it.

165
00:06:58,600 --> 00:07:01,800
So, one thing that I was thinking of people were saying, basically,

166
00:07:01,800 --> 00:07:04,300
you have the timestamp, the dll and stuff like that, but I'm not sure

167
00:07:04,300 --> 00:07:09,000
if that's actually true, we can change using a compiler option.

168
00:07:09,000 --> 00:07:12,100
We can change the name of the pdb that we're going to use.

169
00:07:12,100 --> 00:07:15,700
We can force it to Output the pdb to a different file if we want to.

170
00:07:17,300 --> 00:07:18,800
I'm going to go ahead and look up that here.

171
00:07:19,100 --> 00:07:25,700
So if I Google for msv cset name of pdb, there should be a thing which

172
00:07:25,700 --> 00:07:28,200
basically tells us a Linker flag.

173
00:07:28,200 --> 00:07:29,700
Well, actually it looks like a compiler flag.

174
00:07:29,700 --> 00:07:33,300
Sorry, a compiler flag that basically allows us to pass the name that

175
00:07:33,300 --> 00:07:35,400
we want for that pdb.

176
00:07:35,600 --> 00:07:37,500
And so it's a /f d.

177
00:07:37,500 --> 00:07:43,100
So if I go in here and I say /f d in theory, I should be able to.

178
00:07:43,200 --> 00:07:46,300
I don't know why you / has all of a sudden when I usually use dashes.

179
00:07:47,200 --> 00:07:49,700
Basically, I should be able to pass something else.

180
00:07:49,700 --> 00:07:53,100
So let's say I go ahead and pass some other thing here.

181
00:07:53,100 --> 00:07:55,300
Like, you know, food out, pdb.

182
00:07:55,600 --> 00:07:59,400
I should be able now to make it build a different pdb into the build

183
00:07:59,400 --> 00:08:00,100
directory.

184
00:08:00,400 --> 00:08:01,900
Let's see if that actually works.

185
00:08:02,100 --> 00:08:04,800
So I do not see a food pdb.

186
00:08:04,900 --> 00:08:06,100
Why do I not see a food up?

187
00:08:06,100 --> 00:08:06,700
Pdb?

188
00:08:07,000 --> 00:08:08,200
That does not look like it worked.

189
00:08:08,200 --> 00:08:10,100
People does not look like it worked at all.

190
00:08:10,100 --> 00:08:10,700
Am I wrong?

191
00:08:12,700 --> 00:08:13,900
I did not think I'm wrong.

192
00:08:14,000 --> 00:08:15,200
Let's delete all the pdp's.

193
00:08:15,200 --> 00:08:16,100
Just double-check.

194
00:08:19,100 --> 00:08:19,700
There we go.

195
00:08:23,000 --> 00:08:26,000
Yeah, so it's still going to handmade .pd be as far as I can tell,

196
00:08:26,200 --> 00:08:26,900
which looks like R.

197
00:08:26,900 --> 00:08:29,300
Minus FD does not seem to have stuck.

198
00:08:29,400 --> 00:08:34,000
So I know this is yet another situation where names default to vo.

199
00:08:34,000 --> 00:08:36,500
Well, this is not, Hmm.

200
00:08:37,000 --> 00:08:40,400
This is that secondary pdb, which is not the pdb that I actually

201
00:08:40,400 --> 00:08:41,400
wanted to rename.

202
00:08:42,500 --> 00:08:47,300
Is there another one that I can do that changes the other?

203
00:08:47,300 --> 00:08:51,500
Because remember, we actually stopped it from outputting that vcp DB1,

204
00:08:51,500 --> 00:08:52,600
the other type of PD.

205
00:08:52,800 --> 00:08:55,300
Be we actually stopped it from doing that.

206
00:08:55,600 --> 00:08:56,800
So I don't know.

207
00:08:56,800 --> 00:08:59,800
Can the Linker does the Linker have a way that we

208
00:09:00,000 --> 00:09:05,900
Put the pdb and maybe change it there because there should be a way to

209
00:09:05,900 --> 00:09:06,400
do that.

210
00:09:06,400 --> 00:09:11,500
So let's take a look here out / pdb, alt path.

211
00:09:11,500 --> 00:09:15,100
I don't know if that's good, an alternate location for the program

212
00:09:15,100 --> 00:09:17,000
database file in a compiled, binary file.

213
00:09:17,000 --> 00:09:19,700
Normally the Linker records location PDF file in the binary.

214
00:09:19,700 --> 00:09:20,600
Is that it produces?

215
00:09:20,800 --> 00:09:23,800
You can use this option for a different path and file name for the pdb

216
00:09:23,800 --> 00:09:24,000
file.

217
00:09:24,000 --> 00:09:27,200
The information provided in pdb all past and that change location

218
00:09:27,200 --> 00:09:28,200
actual pdb file.

219
00:09:30,000 --> 00:09:31,900
But what does pdb path?

220
00:09:32,300 --> 00:09:33,000
Is that right?

221
00:09:33,200 --> 00:09:34,000
Let's take a look here.

222
00:09:34,600 --> 00:09:34,900
Come on.

223
00:09:34,900 --> 00:09:35,400
Msdn.

224
00:09:35,400 --> 00:09:36,300
You can load it up.

225
00:09:38,500 --> 00:09:38,900
P path.

226
00:09:38,900 --> 00:09:41,300
Will search your computer along with the file passes Burger search

227
00:09:41,300 --> 00:09:43,200
for, pdb know.

228
00:09:43,200 --> 00:09:44,100
So I don't know.

229
00:09:44,800 --> 00:09:47,800
Let's see, does anyone around the stream know which is a, which is a

230
00:09:47,800 --> 00:09:50,600
way, I can tell it to do that because last time I spent too long

231
00:09:50,600 --> 00:09:51,800
looking for compiler symbols.

232
00:09:51,800 --> 00:09:53,900
And to be honest with you.

233
00:09:54,000 --> 00:09:55,200
This is a lot of my life.

234
00:09:55,200 --> 00:09:58,400
Whenever I'm on Windows is searching the Arcane documentation to try

235
00:09:58,400 --> 00:09:59,800
and find out how to just do something.

236
00:10:00,000 --> 00:10:01,400
Really simple, which is like set.

237
00:10:01,400 --> 00:10:01,700
Where are you?

238
00:10:01,700 --> 00:10:05,500
This pdb goes and a lot of times something like what I just did like

239
00:10:05,500 --> 00:10:06,600
exactly what just happened.

240
00:10:06,600 --> 00:10:07,300
Is what happens to me.

241
00:10:07,300 --> 00:10:09,300
A lot of the time I will go in.

242
00:10:09,400 --> 00:10:12,400
I'll find documentation that says, here is how you set where the pdb

243
00:10:12,400 --> 00:10:12,900
goes.

244
00:10:13,000 --> 00:10:14,800
I'll do it and then it doesn't work.

245
00:10:15,000 --> 00:10:18,300
And of course, there's really no way that you can actually go in and

246
00:10:19,000 --> 00:10:19,900
do anything about that.

247
00:10:19,900 --> 00:10:21,500
Because you have like nothing to go on.

248
00:10:21,500 --> 00:10:26,500
Like you have no idea why it's deciding not to use the switch that you

249
00:10:26,500 --> 00:10:27,500
have specified.

250
00:10:28,100 --> 00:10:29,000
So, again,

251
00:10:30,400 --> 00:10:30,900
Excuse me.

252
00:10:31,300 --> 00:10:32,000
I'm not sure.

253
00:10:32,100 --> 00:10:36,400
So I'm going to see if I can just go ahead and set it in here on the

254
00:10:36,400 --> 00:10:36,900
Linker.

255
00:10:36,900 --> 00:10:39,500
I don't know if this will work /, pdb.

256
00:10:39,700 --> 00:10:40,900
No / pdb.

257
00:10:43,400 --> 00:10:46,400
Actually supports arguments, but I'm going to go ahead and try it

258
00:10:46,400 --> 00:10:46,700
there.

259
00:10:46,700 --> 00:10:48,700
Because like I said, I just want to see if I can.

260
00:10:48,700 --> 00:10:51,900
I can put it to a different file name and have that help us here.

261
00:10:52,100 --> 00:10:53,000
Let's see.

262
00:10:53,000 --> 00:10:55,500
So, pdb: file name, looks like that should do it.

263
00:10:55,500 --> 00:11:00,000
So I'll specify it here, instead of there and see if that helps at

264
00:11:00,000 --> 00:11:00,100
all.

265
00:11:00,300 --> 00:11:00,600
I don't know.

266
00:11:00,600 --> 00:11:01,800
Maybe, I need to specify in both places.

267
00:11:01,800 --> 00:11:04,700
Let's find out that looked like it work.

268
00:11:04,700 --> 00:11:06,800
So apparently specifying it to the Linker works.

269
00:11:06,800 --> 00:11:09,100
But specifying to the compiler does not work.

270
00:11:09,200 --> 00:11:09,800
Is that true?

271
00:11:09,800 --> 00:11:11,000
So I deleted the pdbs.

272
00:11:11,000 --> 00:11:11,600
Let's compile it again.

273
00:11:11,600 --> 00:11:13,400
And let's see what it does.

274
00:11:16,200 --> 00:11:17,800
So, that looks good.

275
00:11:17,900 --> 00:11:18,200
All right.

276
00:11:18,200 --> 00:11:21,700
So now we've just got the two pdbs, one for our win32, which is fine,

277
00:11:21,700 --> 00:11:24,600
because that never closes and one for the game code, which goes into

278
00:11:24,600 --> 00:11:25,300
food out, pdb.

279
00:11:25,300 --> 00:11:28,300
So, now, what I'm going to do is I'm going to see if we can just

280
00:11:28,300 --> 00:11:30,800
generate a different name for the pdb every time.

281
00:11:31,200 --> 00:11:33,700
So basically, we'll do handmade underscore.

282
00:11:34,800 --> 00:11:35,200
I don't know.

283
00:11:35,200 --> 00:11:37,500
Like there's probably, isn't there a date.

284
00:11:37,600 --> 00:11:40,100
Predefined thing for date or something like this.

285
00:11:40,200 --> 00:11:43,800
Let me see in Windows and think there is date.

286
00:11:44,200 --> 00:11:45,100
Yeah, so there's a pretty

287
00:11:45,200 --> 00:11:46,500
Defined thing for date.

288
00:11:46,500 --> 00:11:51,500
So let me see if there's something that we can do here that would

289
00:11:51,500 --> 00:11:54,600
allow us to set the date, to something that would be convenient to

290
00:11:54,600 --> 00:11:55,000
insert.

291
00:11:55,000 --> 00:11:58,900
Because those slashes would not be a good thing, obviously to put into

292
00:11:58,900 --> 00:11:59,800
a file name.

293
00:12:00,100 --> 00:12:04,700
But it would seem oops, that that would be fine.

294
00:12:04,700 --> 00:12:07,500
In fact, that would actually probably be fine.

295
00:12:08,000 --> 00:12:11,200
You know, we could just do something like handmade underscore time Dot

296
00:12:11,200 --> 00:12:14,400
pdb, and I don't know if that'll work, but it probably will.

297
00:12:14,500 --> 00:12:15,200
Let's take a look.

298
00:12:17,500 --> 00:12:21,400
No, that did not work program to are writing profile.

299
00:12:22,600 --> 00:12:25,600
So it doesn't like that name because the colons.

300
00:12:25,800 --> 00:12:27,500
Yeah, so the cohens won't work.

301
00:12:27,500 --> 00:12:30,000
So is there any way that I can actually make this?

302
00:12:30,600 --> 00:12:35,400
Do something that will be a good name.

303
00:12:35,400 --> 00:12:41,600
So let's take a look here, bat file a pen time to name.

304
00:12:42,900 --> 00:12:43,800
Let's see.

305
00:12:43,900 --> 00:12:45,000
Let's take a look here.

306
00:12:45,100 --> 00:12:45,800
Stack Overflow.

307
00:12:45,800 --> 00:12:47,100
I don't think has redeemed itself.

308
00:12:47,100 --> 00:12:47,900
It's his entire time.

309
00:12:47,900 --> 00:12:49,600
So this could be its big chance.

310
00:12:50,400 --> 00:12:52,600
All right, so there they've got a little syntax here.

311
00:12:52,600 --> 00:12:55,600
That looks like they there is a Syntax for the time command.

312
00:12:55,900 --> 00:12:58,000
So that would suggest to me that we can do.

313
00:12:58,500 --> 00:13:01,600
MS-DOS time variable syntax.

314
00:13:01,600 --> 00:13:03,700
Is there a thing that would tell us what that was?

315
00:13:04,600 --> 00:13:05,900
And then we could take a look.

316
00:13:06,200 --> 00:13:08,800
Let's take a look date and time.

317
00:13:10,400 --> 00:13:11,500
Let's see here.

318
00:13:14,600 --> 00:13:15,800
Let's see.

319
00:13:16,200 --> 00:13:20,800
Yeah, so it looks like we can do some stuff that has to do with all

320
00:13:20,800 --> 00:13:24,500
this doesn't look like a very concise way of doing that.

321
00:13:24,500 --> 00:13:24,900
So, all right.

322
00:13:24,900 --> 00:13:26,600
Maybe we'll just do what it says in here.

323
00:13:27,200 --> 00:13:27,500
Alright.

324
00:13:27,500 --> 00:13:32,700
So basically we could use Blau this is look at that.

325
00:13:32,800 --> 00:13:34,100
That is some crazy stuff.

326
00:13:34,100 --> 00:13:34,900
I didn't even know there.

327
00:13:34,900 --> 00:13:37,200
A lot of I don't even know how to do a lot of this stuff in batch

328
00:13:37,200 --> 00:13:37,600
files.

329
00:13:37,900 --> 00:13:39,500
That looks like some crazy stuff.

330
00:13:40,800 --> 00:13:41,500
I don't even know.

331
00:13:41,500 --> 00:13:42,600
Look at look at this.

332
00:13:43,400 --> 00:13:44,500
That's crazy town.

333
00:13:44,800 --> 00:13:47,300
It's a little bit more crazy than I was hoping for.

334
00:13:48,900 --> 00:13:49,400
Wow.

335
00:13:49,700 --> 00:13:50,900
Yeah, I don't know.

336
00:13:51,600 --> 00:13:52,700
But let's take a look.

337
00:13:52,700 --> 00:13:55,600
So if we actually use this line here, right?

338
00:13:55,900 --> 00:13:57,400
Let's see what that?

339
00:13:57,400 --> 00:14:00,000
What that actually equals when you Echo it and if that's something

340
00:14:00,000 --> 00:14:00,800
that we could use.

341
00:14:01,400 --> 00:14:02,600
I don't know if it is or not.

342
00:14:04,800 --> 00:14:06,200
That doesn't look promising.

343
00:14:07,000 --> 00:14:10,000
I wonder if we have to have command extensions in able to actually use

344
00:14:10,000 --> 00:14:10,600
these things.

345
00:14:10,800 --> 00:14:11,800
I'm not actually sure.

346
00:14:12,600 --> 00:14:14,300
I am not actually sure.

347
00:14:15,200 --> 00:14:17,300
So again, this is all just really simple stuff.

348
00:14:17,300 --> 00:14:22,100
Like I am not an MS-DOS batch junkie or anything like that.

349
00:14:22,900 --> 00:14:27,000
But really all I want to do is make one of these that sanitized so

350
00:14:27,000 --> 00:14:32,600
that I can so that I don't have to do anything fancier to get em SVC

351
00:14:32,600 --> 00:14:34,000
to stop locking our file.

352
00:14:34,100 --> 00:14:36,600
So I'm just going to make it output to a different pdb every time and

353
00:14:36,600 --> 00:14:37,900
hope that that fixes it.

354
00:14:38,300 --> 00:14:41,600
So if I want to do that, I just need a way of format the date in a way

355
00:14:41,600 --> 00:14:42,100
that isn't

356
00:14:42,300 --> 00:14:43,100
Totally crazy.

357
00:14:43,300 --> 00:14:44,000
So let's see.

358
00:14:44,000 --> 00:14:44,700
Replace.

359
00:14:45,100 --> 00:14:47,700
I guess the other thing I should check is to see whether this works in

360
00:14:47,700 --> 00:14:53,100
a batch file instead of it's possible that the thing does work in a

361
00:14:53,100 --> 00:14:56,500
batch file and or does work under the set command and doesn't work in

362
00:14:56,500 --> 00:14:57,000
other things.

363
00:14:57,000 --> 00:14:59,800
So let's try this as well.

364
00:15:00,000 --> 00:15:02,800
Then see what test is set to now.

365
00:15:02,800 --> 00:15:04,000
So it doesn't work there either.

366
00:15:04,200 --> 00:15:04,600
So I don't know.

367
00:15:04,600 --> 00:15:08,700
That could be, I'm not sure why they have that.

368
00:15:08,800 --> 00:15:13,800
And I'm not sure why they are able to do this or think that that works

369
00:15:13,800 --> 00:15:16,700
and we can't write, but it could be.

370
00:15:16,700 --> 00:15:19,800
Well, it looks like maybe it was just a typo in the previous one.

371
00:15:20,700 --> 00:15:23,500
All right, so that's fine for our purposes.

372
00:15:23,500 --> 00:15:24,100
Actually.

373
00:15:24,300 --> 00:15:25,400
That is totally fine.

374
00:15:25,400 --> 00:15:27,200
All we need is some unique Stream.

375
00:15:27,400 --> 00:15:29,800
So if that works, that's totally fine.

376
00:15:30,200 --> 00:15:30,900
There we go.

377
00:15:31,300 --> 00:15:33,800
And we don't care at all about this code.

378
00:15:33,800 --> 00:15:39,300
This is literally just working around the craziness in visual studio.

379
00:15:39,300 --> 00:15:41,800
So, let's see if that allows us to do it.

380
00:15:41,800 --> 00:15:42,700
Okay, so that's

381
00:15:43,600 --> 00:15:47,200
Total Crazy Town don't even know what that does.

382
00:15:47,300 --> 00:15:47,500
Like.

383
00:15:47,500 --> 00:15:48,700
I literally have no idea.

384
00:15:48,700 --> 00:15:50,300
This would be interesting.

385
00:15:50,900 --> 00:15:52,900
This actually kind of has me interested.

386
00:15:52,900 --> 00:15:54,700
I will probably go read about this later.

387
00:15:54,700 --> 00:15:57,400
I didn't know that you could do these Tilda things.

388
00:15:57,400 --> 00:16:01,600
Like normally, you know you in a thing you can put in some kind of a

389
00:16:01,600 --> 00:16:05,200
variable in, it'll fill it in inside, parentheses inside a batch file.

390
00:16:05,200 --> 00:16:10,800
I had no idea there was this: tilde crazy replacement syntax.

391
00:16:10,800 --> 00:16:13,600
It looks like it's giving you character offsets.

392
00:16:13,700 --> 00:16:17,300
- 44 - 10 to like, look at all that.

393
00:16:17,400 --> 00:16:18,600
It was like you're extracting.

394
00:16:18,700 --> 00:16:18,900
It.

395
00:16:18,900 --> 00:16:22,700
Looks like you can basically say put in give me the value of this

396
00:16:22,700 --> 00:16:26,000
variable and then extract this range from it, which is pretty kind of

397
00:16:26,000 --> 00:16:26,200
cool.

398
00:16:26,200 --> 00:16:30,100
I mean, MS-DOS batch files are so underwhelming in terms of what they

399
00:16:30,100 --> 00:16:30,600
can do.

400
00:16:30,600 --> 00:16:33,300
It's kind of cool when you find something where you're like, oh that I

401
00:16:33,300 --> 00:16:34,400
could actually use that.

402
00:16:35,600 --> 00:16:39,600
So, basically, all I want to do here is I want to just delete the pdbs

403
00:16:39,900 --> 00:16:41,700
that currently exist, right?

404
00:16:42,200 --> 00:16:43,300
I want them to go away.

405
00:16:43,600 --> 00:16:45,700
And then I want to rebuild them, and I'm going to make a different

406
00:16:45,700 --> 00:16:46,600
name every time.

407
00:16:46,700 --> 00:16:50,000
And so really, all I did is I say, okay, delete all the PD bees and

408
00:16:50,000 --> 00:16:51,100
then use this crazy.

409
00:16:51,200 --> 00:16:53,000
Awesome string from stack Overflow.

410
00:16:53,000 --> 00:16:53,900
That's amazing.

411
00:16:54,100 --> 00:16:58,500
And and is absolutely nuts to just stick a thing on that's based on

412
00:16:58,500 --> 00:17:02,400
the time and that way every time I recompile my pdb will have a

413
00:17:02,400 --> 00:17:03,700
different name.

414
00:17:03,700 --> 00:17:08,500
And so what I'm hoping is now when I run visual studio, right?

415
00:17:08,800 --> 00:17:13,500
It's going to load that pdb file for the dll and if it keeps

416
00:17:13,700 --> 00:17:14,300
Locked.

417
00:17:14,300 --> 00:17:15,800
I'm hoping that that's okay.

418
00:17:16,000 --> 00:17:18,700
Because, basically, now when I go in here, right?

419
00:17:18,700 --> 00:17:23,500
And I asked this to recompile, it will actually just recompile to a

420
00:17:23,500 --> 00:17:26,000
different pdb altogether, right?

421
00:17:26,200 --> 00:17:30,000
So when I come in here and I do this, I'm assuming that it won't touch

422
00:17:30,000 --> 00:17:30,600
that one.

423
00:17:30,700 --> 00:17:33,700
It'll just use a completely different one and then it can re pick up

424
00:17:33,700 --> 00:17:35,200
the old dll and there it goes.

425
00:17:35,600 --> 00:17:40,600
So I'm hoping that that is the simplest possible solution to this

426
00:17:40,600 --> 00:17:41,000
problem.

427
00:17:41,000 --> 00:17:42,400
You don't have to do any trickery.

428
00:17:42,400 --> 00:17:43,500
We don't have to change our DNA.

429
00:17:43,600 --> 00:17:44,500
LOLs name.

430
00:17:44,500 --> 00:17:46,400
The dll can always be built to the same place.

431
00:17:46,800 --> 00:17:49,300
But basically we just keep making new pdb.

432
00:17:49,300 --> 00:17:50,300
He's making new pdb.

433
00:17:50,300 --> 00:17:51,700
He's making new pdbs.

434
00:17:51,700 --> 00:17:54,100
And you can see that they start stacking up here, right?

435
00:17:54,100 --> 00:17:58,400
Every time I make a change will end up with a new pdb in there because

436
00:17:58,400 --> 00:17:59,800
M SV c will keep them all.

437
00:18:00,000 --> 00:18:01,600
Locked in its infinite testable.

438
00:18:01,600 --> 00:18:02,100
Wisdom.

439
00:18:02,300 --> 00:18:05,700
I have no idea why it's doing that, but we don't really have to care.

440
00:18:05,700 --> 00:18:08,200
It just means there's a little more space used on our drive for these

441
00:18:08,200 --> 00:18:09,200
pdbs right there.

442
00:18:09,200 --> 00:18:10,700
They all are stacking up.

443
00:18:11,600 --> 00:18:16,300
But as soon as I end this program and we get out of here, then they

444
00:18:16,300 --> 00:18:17,700
will no longer be locked.

445
00:18:17,700 --> 00:18:20,900
So when I go to do my build again, you can see there's all the pdbs

446
00:18:20,900 --> 00:18:21,100
there.

447
00:18:21,100 --> 00:18:24,500
But when I go to do my build again, it should delete them all.

448
00:18:24,500 --> 00:18:25,300
And there they go.

449
00:18:26,300 --> 00:18:29,400
Now it's kind of annoying to have that deletion thing.

450
00:18:30,000 --> 00:18:33,000
Show up, so, I'm wondering if I can just do something to tell it to be

451
00:18:33,000 --> 00:18:33,800
quiet.

452
00:18:34,300 --> 00:18:37,800
So like, don't, you know, don't tell me all the time when you can't

453
00:18:37,800 --> 00:18:38,500
delete things.

454
00:18:38,700 --> 00:18:43,800
So there is a minus q, but I don't know if that actually do it.

455
00:18:44,000 --> 00:18:44,800
So, let's find out.

456
00:18:44,800 --> 00:18:48,100
Let's see if there's a way to tell delete to be just a little quieter

457
00:18:48,400 --> 00:18:51,300
because again, I'm just trying to figure out how to get rid of this.

458
00:18:51,300 --> 00:18:52,200
Access is denied.

459
00:18:52,200 --> 00:18:54,300
Access is denied nonsense, right?

460
00:18:54,800 --> 00:18:58,400
So in here, I'm going to go ahead and see there's the pdbs.

461
00:18:58,500 --> 00:18:59,800
I do Del startup PDP it.

462
00:19:00,000 --> 00:19:00,800
Access is denied.

463
00:19:00,800 --> 00:19:03,400
If I do / Q still says.

464
00:19:03,700 --> 00:19:06,800
So I don't know if there is a way to make it quiet down.

465
00:19:08,200 --> 00:19:11,400
Prompts for confirmation for still eating green, only files.

466
00:19:11,600 --> 00:19:13,800
Delete specified files from all sub directories.

467
00:19:16,400 --> 00:19:16,800
Yeah.

468
00:19:16,800 --> 00:19:17,600
I don't know.

469
00:19:18,200 --> 00:19:22,400
It doesn't seem to be any way to do that.

470
00:19:22,400 --> 00:19:22,700
Now.

471
00:19:22,700 --> 00:19:26,700
I have RM installed but I don't really want to do that because I don't

472
00:19:26,700 --> 00:19:29,800
know if that's I don't think that's installed on most.

473
00:19:29,900 --> 00:19:33,100
People systems, unfortunately, so I don't know.

474
00:19:33,100 --> 00:19:34,500
We may have to live with that.

475
00:19:34,500 --> 00:19:37,900
I'm not sure if there's a way we could, what we could do is pipe it to

476
00:19:37,900 --> 00:19:39,500
something that we don't care about.

477
00:19:39,600 --> 00:19:42,400
So, one of the things that you can do obviously in a command shell,

478
00:19:42,400 --> 00:19:43,000
right?

479
00:19:43,600 --> 00:19:48,400
Is if I do Del startup pdb, it prints its stuff to the to the thing.

480
00:19:48,400 --> 00:19:51,700
If I want to I can pipe it to like Foo dot txt.

481
00:19:51,700 --> 00:19:52,300
Right?

482
00:19:53,100 --> 00:19:56,600
And I think you can even pipe even the error stream as well.

483
00:19:56,600 --> 00:19:58,300
I don't know if you can do that in thing.

484
00:19:58,300 --> 00:19:58,900
Not sure.

485
00:19:59,600 --> 00:19:59,800
Yeah.

486
00:20:00,000 --> 00:20:01,500
I don't know if you can pipe the error stream.

487
00:20:01,600 --> 00:20:04,800
But basically what you can do is you can pipe the output of it to a

488
00:20:04,800 --> 00:20:05,300
file.

489
00:20:05,500 --> 00:20:10,000
So I can at least put some I can at least send it somewhere and I

490
00:20:10,000 --> 00:20:14,100
could send it somewhere that we don't care about like Unix you pipe to

491
00:20:14,100 --> 00:20:16,900
a thing called Dev know which is basically just a place that eats

492
00:20:16,900 --> 00:20:19,400
everything I could do something like that.

493
00:20:19,900 --> 00:20:23,200
But for now, I guess I'm not sure what I want to do with that.

494
00:20:23,200 --> 00:20:24,400
So let's just leave that for now.

495
00:20:24,400 --> 00:20:25,400
And we'll think about it.

496
00:20:25,700 --> 00:20:27,300
We'll think about that a little bit later because I don't even

497
00:20:27,300 --> 00:20:29,700
remember the Syntax for piping basically.

498
00:20:29,900 --> 00:20:35,100
Commands from the console have two different streams and we didn't

499
00:20:35,100 --> 00:20:38,100
cover this because we're not making a console app, but there's

500
00:20:38,100 --> 00:20:40,700
basically two different streams that console apps can write to

501
00:20:40,900 --> 00:20:44,900
standard out and standard error and they can be redirected separately.

502
00:20:44,900 --> 00:20:48,600
So, by default any time tries to write text to something called

503
00:20:48,600 --> 00:20:49,700
standard out.

504
00:20:49,700 --> 00:20:52,500
It shows the console any time, it tries to write something called

505
00:20:52,500 --> 00:20:53,100
standard error.

506
00:20:53,100 --> 00:20:54,200
It shows up in the console.

507
00:20:54,200 --> 00:20:58,200
But if you do something like I did where I use that little pipe

508
00:20:58,200 --> 00:20:59,800
syntax, so I did start up.

509
00:21:00,200 --> 00:21:04,000
And then I try to pipe it to a text file like this, this little arrow.

510
00:21:04,000 --> 00:21:07,200
Here says, send the output of this thing to food out text.

511
00:21:07,300 --> 00:21:09,000
When I do that, right?

512
00:21:09,000 --> 00:21:12,800
It sends only what's called standard out, only the output which

513
00:21:12,800 --> 00:21:15,800
doesn't include standard error, which is usually what things right to

514
00:21:15,800 --> 00:21:18,100
when they have an error message like, access denied.

515
00:21:18,200 --> 00:21:22,500
So you can see, we got rid of some of the printing, but not all of it.

516
00:21:22,500 --> 00:21:24,500
Now, what the command is to pipe standard error.

517
00:21:24,500 --> 00:21:25,600
I don't even remember.

518
00:21:26,700 --> 00:21:28,500
I do not remember what it is.

519
00:21:30,500 --> 00:21:31,100
Let's see.

520
00:21:31,300 --> 00:21:33,400
Let's check the stream and see if anyone knows on there.

521
00:21:33,700 --> 00:21:36,300
So they say /, null / to null.

522
00:21:36,300 --> 00:21:40,700
So they were saying potentially you could do this sort of thing,

523
00:21:41,300 --> 00:21:41,800
right?

524
00:21:42,800 --> 00:21:44,100
I don't know if that actually works.

525
00:21:45,700 --> 00:21:49,300
Doesn't look like it though, which is the 2 comes with four.

526
00:21:49,300 --> 00:21:50,100
So it's this way.

527
00:21:50,400 --> 00:21:50,700
Okay.

528
00:21:50,700 --> 00:21:51,200
So there we go.

529
00:21:51,200 --> 00:21:54,200
So there is a way to Output to pipe the different stream.

530
00:21:54,200 --> 00:21:57,900
So what we could do is do something like this and you could can

531
00:21:57,900 --> 00:22:02,000
actually do them to basically a null destination, which says just eat

532
00:22:02,000 --> 00:22:02,800
it entirely.

533
00:22:03,400 --> 00:22:05,200
I don't really want to go down too far to oops.

534
00:22:05,200 --> 00:22:05,900
I don't really want to.

535
00:22:06,200 --> 00:22:06,400
Okay.

536
00:22:06,400 --> 00:22:06,900
Thank you.

537
00:22:07,100 --> 00:22:12,500
I don't really want to go too far down that path necessarily, but this

538
00:22:12,500 --> 00:22:14,100
looks like a relatively solid thing.

539
00:22:14,100 --> 00:22:15,000
We can do that just as

540
00:22:15,400 --> 00:22:17,500
Get rid of that input because we don't ever care about it.

541
00:22:17,500 --> 00:22:19,900
But like I said, I don't want to cover batch file programming because

542
00:22:19,900 --> 00:22:25,100
a, I don't know it and be it's really only applicable to Windows.

543
00:22:25,100 --> 00:22:30,000
So let's go ahead and put that on the end here.

544
00:22:30,000 --> 00:22:33,200
So that's basically saying get rid of all those messages and there we

545
00:22:33,200 --> 00:22:33,400
go.

546
00:22:33,400 --> 00:22:36,900
Now we have a much cleaner thing and it just keeps on going.

547
00:22:36,900 --> 00:22:40,300
I wish this thing would not tell us about the Performing full link

548
00:22:40,300 --> 00:22:44,000
because I thought that I had turn incremental off.

549
00:22:45,200 --> 00:22:45,700
I'm here.

550
00:22:45,700 --> 00:22:47,300
But maybe I did that wrong.

551
00:22:47,300 --> 00:22:50,300
It's supposed to be off or, no.

552
00:22:50,700 --> 00:22:53,600
I'm not sure exactly why.

553
00:22:53,600 --> 00:22:55,000
I can't seem to get it.

554
00:22:55,600 --> 00:23:00,800
Not to do, not to do that stuff.

555
00:23:00,800 --> 00:23:03,000
I'm going to change these to my supposed to do that.

556
00:23:04,100 --> 00:23:07,000
So I'm not sure if I could get it to stop complaining about that

557
00:23:07,000 --> 00:23:08,000
necessarily.

558
00:23:09,100 --> 00:23:10,800
Where are the common Linker switches.

559
00:23:10,800 --> 00:23:11,700
Did I forget them?

560
00:23:11,700 --> 00:23:13,100
That's probably the problem.

561
00:23:13,300 --> 00:23:15,000
My common Linker Flags.

562
00:23:15,300 --> 00:23:16,200
So it's not on there.

563
00:23:16,200 --> 00:23:16,500
Right?

564
00:23:16,500 --> 00:23:19,400
This one's not, I'm not actually using the common Linker Flags because

565
00:23:19,400 --> 00:23:21,500
all of this stuff is not actually on there.

566
00:23:21,500 --> 00:23:22,500
So, okay.

567
00:23:22,600 --> 00:23:24,400
So basically, I should change this.

568
00:23:24,900 --> 00:23:27,300
I should probably change the structure of these, but we'll deal with

569
00:23:27,300 --> 00:23:27,900
that, a little later.

570
00:23:27,900 --> 00:23:31,300
So, let's see what happens if I turn off, incremental linking, and

571
00:23:31,600 --> 00:23:33,700
there we go, so that's, that's better.

572
00:23:34,300 --> 00:23:36,300
That's a much more concise one certainly.

573
00:23:36,900 --> 00:23:39,200
So I can live with that that seems pretty good.

574
00:23:39,200 --> 00:23:42,500
And now we are able to reload in the debugger which solves one of my

575
00:23:42,500 --> 00:23:43,600
problems, right?

576
00:23:43,600 --> 00:23:44,900
So that's that's better.

577
00:23:45,000 --> 00:23:45,700
We're getting better.

578
00:23:45,700 --> 00:23:48,900
We're getting closer to good but we're still not great yet.

579
00:23:49,200 --> 00:23:52,100
What I'd like to do a couple more things.

580
00:23:52,200 --> 00:23:55,300
Like a really simple one is I'd like to make it so it's much more

581
00:23:55,300 --> 00:23:56,100
instantaneous.

582
00:23:56,500 --> 00:23:59,800
So again right now if I'm running it here, basically I

583
00:24:00,100 --> 00:24:03,200
Over here in and I want to edit something.

584
00:24:03,400 --> 00:24:04,900
I'm in handmade dot CPP.

585
00:24:04,900 --> 00:24:05,700
I want to change.

586
00:24:05,700 --> 00:24:06,700
Make this change.

587
00:24:06,700 --> 00:24:07,200
I want it.

588
00:24:07,200 --> 00:24:10,800
So that as soon as I hit that em when I see it complete, I want it to

589
00:24:10,800 --> 00:24:11,600
change right away.

590
00:24:11,600 --> 00:24:14,800
I don't want to wait around for some number of seconds for that to

591
00:24:14,800 --> 00:24:15,300
happen.

592
00:24:15,900 --> 00:24:19,500
So what I'd like to do is change our platform code, a little bit to

593
00:24:19,500 --> 00:24:22,700
make it so that we don't have that delay and it's pretty easy to do

594
00:24:22,700 --> 00:24:23,400
that actually.

595
00:24:23,700 --> 00:24:26,200
Because if you think about it, all we really need to know is whether

596
00:24:26,200 --> 00:24:29,500
that file changed and checking if that file changed is actually

597
00:24:29,500 --> 00:24:29,800
pretty.

598
00:24:30,000 --> 00:24:33,500
Simple because what I can do, is, I can look at the date stamp on the

599
00:24:33,500 --> 00:24:34,100
file.

600
00:24:34,700 --> 00:24:38,100
Because if you look, basically all files have a date stamp, it shown,

601
00:24:38,100 --> 00:24:39,000
right here, right?

602
00:24:39,000 --> 00:24:42,300
You can see all the files and when they were when they were last

603
00:24:42,300 --> 00:24:45,900
touched, what I can do is I can just look at that date stamp and

604
00:24:45,900 --> 00:24:47,200
periodically, check it.

605
00:24:47,700 --> 00:24:49,200
Checking the date stamps really quick.

606
00:24:49,200 --> 00:24:52,000
So we could check the date stamp like every frame and not really can

607
00:24:52,900 --> 00:24:55,300
not really have any kind of Real Performance penalty associated with

608
00:24:55,300 --> 00:24:55,800
that.

609
00:24:55,800 --> 00:24:57,500
Just check in the date stamp a one file.

610
00:24:57,600 --> 00:24:59,800
So I could do is, I could check the date stamp of just the deal.

611
00:25:00,300 --> 00:25:03,400
If the date stamp has changed, reload it, if it hasn't don't and then

612
00:25:03,400 --> 00:25:05,400
we would get down to just one frame of latency.

613
00:25:05,400 --> 00:25:07,500
Basically, like we wouldn't even be able to see it.

614
00:25:07,600 --> 00:25:09,100
So I think that's the safest thing to do.

615
00:25:15,100 --> 00:25:21,500
So basically what I was doing here may not even need to be necessary

616
00:25:21,500 --> 00:25:24,600
anymore, either we could think about whether it is or not.

617
00:25:24,800 --> 00:25:28,300
But if you remember at the end of last dream, what I did is since the

618
00:25:28,300 --> 00:25:30,500
I needed to rebuild the dll what I do.

619
00:25:30,500 --> 00:25:33,200
Every time before I load, it is like copy it to a temp and I load the

620
00:25:33,200 --> 00:25:33,800
temp.

621
00:25:34,600 --> 00:25:36,400
Now, we wouldn't necessarily have to do that.

622
00:25:36,400 --> 00:25:41,600
I don't think but I think I'm going to keep that in there just just

623
00:25:41,600 --> 00:25:42,300
because it works.

624
00:25:42,500 --> 00:25:45,300
Actively well, so I think we want to I think I want to keep that in

625
00:25:45,300 --> 00:25:45,500
there.

626
00:25:46,000 --> 00:25:46,400
Okay.

627
00:25:47,100 --> 00:25:48,700
So we're going to do this first to do here.

628
00:25:48,700 --> 00:25:50,700
We're going to do automatic determination of when updates are

629
00:25:50,700 --> 00:25:51,300
necessary.

630
00:25:51,500 --> 00:25:53,600
So the first thing I'm going to do is I'm just going to Define this

631
00:25:53,600 --> 00:25:56,600
name here because this handmade dll.

632
00:25:57,200 --> 00:25:59,900
So I'm going to I'm going to actually store what the name is so that I

633
00:25:59,900 --> 00:26:01,100
don't use it multiple times.

634
00:26:01,300 --> 00:26:05,200
So basically we're going to have the source dll name and that's going

635
00:26:05,200 --> 00:26:06,500
to be this, right?

636
00:26:07,000 --> 00:26:10,800
And then we're going to have the temp, dll name and that's going to be

637
00:26:10,800 --> 00:26:11,200
this.

638
00:26:11,300 --> 00:26:12,300
And that way we just don't

639
00:26:12,400 --> 00:26:14,300
We don't spam strings all over the place.

640
00:26:14,600 --> 00:26:16,800
So we've got the source dll name that's here.

641
00:26:16,800 --> 00:26:18,800
We copy the source to the temp.

642
00:26:18,800 --> 00:26:20,700
Dll name and then we load the temp.

643
00:26:20,700 --> 00:26:21,600
Dll name, right?

644
00:26:21,600 --> 00:26:22,300
Real simple.

645
00:26:22,300 --> 00:26:22,700
Nothing.

646
00:26:22,800 --> 00:26:26,200
Nothing particularly crazy going on there, pretty basic.

647
00:26:27,000 --> 00:26:30,500
So what I want to do now is I want to extend this code to basically

648
00:26:30,500 --> 00:26:36,100
say, all right, let's also whenever we do this load, let's snap a

649
00:26:36,900 --> 00:26:37,600
reference.

650
00:26:37,800 --> 00:26:40,100
Let's snap a the file date.

651
00:26:40,100 --> 00:26:42,300
Let's just just get a quick handle on.

652
00:26:42,600 --> 00:26:46,500
How old the file is so that later we can check against that and see if

653
00:26:46,500 --> 00:26:47,700
we need to reload.

654
00:26:47,900 --> 00:26:54,100
So I want to do win32, get filed date and we want them basically the

655
00:26:54,100 --> 00:26:55,700
msdn documentation for this.

656
00:26:56,200 --> 00:26:56,900
So here you go.

657
00:26:56,900 --> 00:26:58,200
You can see it's really pretty basic.

658
00:26:58,200 --> 00:26:59,800
It's some of the windows 32.

659
00:27:00,000 --> 00:27:02,100
Hope you guys are actually pretty straightforward and good.

660
00:27:02,500 --> 00:27:06,100
Basically, all we have to do is just pass it the handle to a file and

661
00:27:06,100 --> 00:27:10,300
it'll give us back the different the creation time the access time and

662
00:27:10,300 --> 00:27:11,000
the right time.

663
00:27:11,700 --> 00:27:15,000
Now my question is, I don't necessarily want to have to open the file.

664
00:27:15,600 --> 00:27:21,300
So I'm wondering if there's perhaps an easier way to do it than that

665
00:27:21,300 --> 00:27:21,900
happen to do it.

666
00:27:21,900 --> 00:27:24,000
That way I could call this, right?

667
00:27:24,000 --> 00:27:26,300
But you notice it takes a handle, not a path.

668
00:27:26,300 --> 00:27:29,400
And I don't actually want to open the file for any particular reason.

669
00:27:29,600 --> 00:27:29,800
So I'm

670
00:27:30,000 --> 00:27:32,200
Worried that might incur a little bit of extra cost.

671
00:27:32,500 --> 00:27:34,600
So I'm thinking I might use a different API.

672
00:27:34,600 --> 00:27:35,300
Let's take a look.

673
00:27:35,300 --> 00:27:35,700
Here.

674
00:27:36,000 --> 00:27:39,300
There's a thing called Fine first file, which is used for searching

675
00:27:39,300 --> 00:27:40,800
files on a drive, basically.

676
00:27:41,500 --> 00:27:44,100
And I'm wondering if that may not be a faster way to do it.

677
00:27:44,100 --> 00:27:47,300
It's hard to tell but basically the way this works is you call fine,

678
00:27:47,300 --> 00:27:50,900
first file and you give it a file name and that found them could be a

679
00:27:50,900 --> 00:27:51,500
wild card.

680
00:27:51,500 --> 00:27:53,100
But in this case, we wouldn't pass a wild-card.

681
00:27:53,100 --> 00:27:55,500
We just passed the actual file name.

682
00:27:55,500 --> 00:27:59,100
And then I'm wondering if perhaps this fine data, but the data that it

683
00:27:59,100 --> 00:27:59,800
passes back.

684
00:28:01,000 --> 00:28:02,200
Wouldn't have what we need.

685
00:28:02,200 --> 00:28:03,200
Because you can see in here.

686
00:28:03,200 --> 00:28:04,400
It's kind of embedded in there.

687
00:28:04,700 --> 00:28:04,900
Right?

688
00:28:04,900 --> 00:28:08,100
It's got the creation time access time and right time, now, I don't

689
00:28:08,100 --> 00:28:09,800
know which one of these would be faster.

690
00:28:09,900 --> 00:28:11,000
I really don't.

691
00:28:11,800 --> 00:28:15,200
I just think, maybe not opening a file handle, might be a better idea.

692
00:28:15,800 --> 00:28:19,000
So if I call this, so we'll just try this first.

693
00:28:19,300 --> 00:28:21,800
And maybe if it's a problem will actually check, but, you know, we'll

694
00:28:21,800 --> 00:28:23,000
just try this first.

695
00:28:23,000 --> 00:28:25,200
We'll call fine first file.

696
00:28:26,400 --> 00:28:29,300
Excuse me, as a way to get that date.

697
00:28:29,500 --> 00:28:33,200
So basically what happens is this opens up a find handle right?

698
00:28:33,300 --> 00:28:35,600
Instead of a file handle, which is the thing that I was thinking might

699
00:28:35,600 --> 00:28:37,300
be a little might be a little faster.

700
00:28:37,500 --> 00:28:41,700
If I was to open on the source, dll name and then pass, one of these

701
00:28:41,700 --> 00:28:43,600
win for you to find data structures.

702
00:28:44,400 --> 00:28:46,500
Find data to it.

703
00:28:46,500 --> 00:28:47,600
Will fill it out for me.

704
00:28:48,100 --> 00:28:50,000
And then I do a fine clothes.

705
00:28:50,000 --> 00:28:53,200
This is something, this actually like does produce a handle, which is

706
00:28:53,200 --> 00:28:53,800
unfortunate.

707
00:28:53,800 --> 00:28:54,000
Again.

708
00:28:54,000 --> 00:28:56,100
I wish I could do something that didn't produce any handle at.

709
00:28:56,400 --> 00:29:00,400
But I don't know if there actually is anything that will get oops,

710
00:29:00,800 --> 00:29:05,300
that will actually get a files date without doing some kind of an

711
00:29:05,300 --> 00:29:05,800
open.

712
00:29:06,800 --> 00:29:09,400
There might be somewhere, but I don't actually know.

713
00:29:09,500 --> 00:29:10,700
Let's take a look at any of these.

714
00:29:10,700 --> 00:29:11,800
Other guys will do it.

715
00:29:12,500 --> 00:29:13,600
I don't think so.

716
00:29:14,300 --> 00:29:17,200
I don't think there is think you actually got to get the name.

717
00:29:17,200 --> 00:29:18,300
Well, I don't know.

718
00:29:18,900 --> 00:29:22,900
It does not look so does not look so but anyway, so I'm going to do a

719
00:29:22,900 --> 00:29:26,100
fine clothes on the handle to get rid of it by the handle.

720
00:29:26,200 --> 00:29:26,800
Oh, there we go.

721
00:29:27,900 --> 00:29:32,400
And so that should give us back the actual stuff that we wanted, the

722
00:29:32,400 --> 00:29:34,300
actual data that we actually need.

723
00:29:34,500 --> 00:29:39,200
And that is something that we can kind of wrap up here into into a

724
00:29:39,200 --> 00:29:44,100
call that we can use to get the the date of that file like every

725
00:29:44,100 --> 00:29:44,600
frame.

726
00:29:45,000 --> 00:29:47,300
So I'm going to go ahead and here and go to the this fine.

727
00:29:47,300 --> 00:29:47,900
First thing.

728
00:29:48,100 --> 00:29:51,000
I'm going to take a look at that win32 find data and basically what we

729
00:29:51,000 --> 00:29:52,200
want is this last right?

730
00:29:52,200 --> 00:29:53,200
Time the last time.

731
00:29:53,200 --> 00:29:54,900
The thing was written to write.

732
00:29:55,100 --> 00:29:56,100
So we want, we want to

733
00:29:56,200 --> 00:29:58,300
Grab that out of the result.

734
00:29:58,300 --> 00:29:59,700
So basically that

735
00:30:00,000 --> 00:30:03,800
Data dot last, right time is going to be one of these file time,

736
00:30:03,800 --> 00:30:09,500
things, and that file time thing is going to be the last right time of

737
00:30:09,500 --> 00:30:10,100
the file.

738
00:30:10,300 --> 00:30:13,500
So I can pull this out now and I can make this a little thing, a

739
00:30:13,500 --> 00:30:15,400
little function that returns a file time.

740
00:30:15,400 --> 00:30:22,100
That's called get five last right, time like this and then I can go

741
00:30:22,100 --> 00:30:23,100
ahead and put it in there.

742
00:30:23,100 --> 00:30:25,000
Whatever the file name is that we're going to load.

743
00:30:25,400 --> 00:30:26,300
It will do that.

744
00:30:26,700 --> 00:30:29,900
And then that will allow me in theory to just

745
00:30:30,000 --> 00:30:33,600
Go ahead and get the filed every frame, if I want to.

746
00:30:33,700 --> 00:30:35,000
I think that should work.

747
00:30:35,400 --> 00:30:37,800
Now, of course that find handle this, this could fail.

748
00:30:39,000 --> 00:30:39,500
In other words.

749
00:30:39,500 --> 00:30:41,600
It's not, it's not a given that it can find a file.

750
00:30:41,600 --> 00:30:43,600
If the file doesn't exist or something like that.

751
00:30:44,000 --> 00:30:45,000
Then it wouldn't work.

752
00:30:45,000 --> 00:30:48,800
So there's a question of what we do on failure and I think it's

753
00:30:48,800 --> 00:30:54,100
probably safe for us to just go ahead and return a 0 handle.

754
00:30:54,100 --> 00:30:57,800
If that was the case, like to just basically say, all right, if this

755
00:30:57,800 --> 00:30:59,100
file handle,

756
00:31:00,100 --> 00:31:01,900
It's not equal to invalid handle value.

757
00:31:01,900 --> 00:31:05,600
Then we will go ahead and do the actual work.

758
00:31:06,000 --> 00:31:09,800
If not, then we will just leave the last right time to 0.

759
00:31:09,800 --> 00:31:12,600
Because that means, you know, when I'm thinking about how this is

760
00:31:12,600 --> 00:31:15,900
going to work, when I asked to the last right time, let's say the file

761
00:31:15,900 --> 00:31:16,800
doesn't exist yet.

762
00:31:16,800 --> 00:31:18,300
So we haven't built the game code.

763
00:31:18,500 --> 00:31:21,400
Well, all I need to do is make sure that the last right time is

764
00:31:21,400 --> 00:31:24,100
something that when the game code does exist.

765
00:31:24,100 --> 00:31:27,100
It will not compare equal to it, because that will trigger us to

766
00:31:27,100 --> 00:31:28,200
reload it, right?

767
00:31:28,700 --> 00:31:29,800
So I think just passing as

768
00:31:29,900 --> 00:31:32,700
Zero back here, should be completely sufficient.

769
00:31:33,100 --> 00:31:34,900
So let's let's assume that that's true.

770
00:31:35,100 --> 00:31:35,200
Now.

771
00:31:35,200 --> 00:31:37,600
The other thing I don't know is whether or not assuming that this

772
00:31:37,600 --> 00:31:38,900
returns invalid handle value.

773
00:31:38,900 --> 00:31:40,600
I don't think I have to find close it.

774
00:31:41,000 --> 00:31:45,100
So that should be it for that and then we go ahead and get the time

775
00:31:45,100 --> 00:31:45,600
out of it.

776
00:31:46,000 --> 00:31:49,300
Well, I guess this is a little cleaner if I actually do it this way,

777
00:31:49,600 --> 00:31:52,500
so that should basically be all I really need to do.

778
00:31:53,700 --> 00:31:56,800
And then I'm going to go ahead and say that will also pass the file

779
00:31:56,800 --> 00:31:58,300
name in here.

780
00:32:00,000 --> 00:32:00,600
All right.

781
00:32:00,800 --> 00:32:05,400
So let's go down to our with 32 load game code function which is right

782
00:32:05,400 --> 00:32:05,800
here.

783
00:32:06,600 --> 00:32:09,600
Let's let's go ahead and pass the source, dll to that.

784
00:32:10,200 --> 00:32:14,300
And when we are going to load it, basically whenever we load it, I'm

785
00:32:14,300 --> 00:32:19,700
going to snap that file date into into the into the struct that we

786
00:32:19,700 --> 00:32:20,100
return.

787
00:32:20,100 --> 00:32:23,000
So this results direct right here, where we restore everything about

788
00:32:23,000 --> 00:32:24,000
the game that we loaded.

789
00:32:24,300 --> 00:32:26,400
I'm also going to store that file time.

790
00:32:26,900 --> 00:32:28,500
That's like the last right.

791
00:32:30,000 --> 00:32:31,200
Time for the dll.

792
00:32:31,600 --> 00:32:33,000
Let's see, dll last right.

793
00:32:33,000 --> 00:32:34,500
Time SEC.

794
00:32:34,900 --> 00:32:35,300
Okay.

795
00:32:35,400 --> 00:32:37,100
So I'm going to update that in here.

796
00:32:37,100 --> 00:32:40,300
I'm going to say OK when we go ahead and do this load Library,

797
00:32:40,300 --> 00:32:41,600
whenever we do that.

798
00:32:42,000 --> 00:32:44,200
I am going to go ahead and snap a copy to that.

799
00:32:44,200 --> 00:32:47,000
It won't be perfectly accurate because in theory, it could change in

800
00:32:47,000 --> 00:32:48,700
between these two, but that's okay.

801
00:32:48,700 --> 00:32:49,500
This is not code.

802
00:32:49,500 --> 00:32:50,900
That's Mission critical or anything.

803
00:32:50,900 --> 00:32:52,500
This is just for our own debugging purposes.

804
00:32:52,500 --> 00:32:53,400
So we should be fine.

805
00:32:54,100 --> 00:32:56,000
I will ask for the last right, time?

806
00:32:56,500 --> 00:32:57,000
Right here.

807
00:32:57,000 --> 00:32:59,600
Just using the same code that we already did.

808
00:33:00,300 --> 00:33:01,000
Actually, I should.

809
00:33:02,100 --> 00:33:03,800
Should we use the same name here?

810
00:33:03,800 --> 00:33:08,200
So like that and let's go ahead and compile that in theory.

811
00:33:08,800 --> 00:33:09,700
Let's see Source.

812
00:33:09,700 --> 00:33:10,500
Dll name.

813
00:33:10,800 --> 00:33:13,500
We should now have something that works exactly the way that we did

814
00:33:13,500 --> 00:33:13,800
before.

815
00:33:13,800 --> 00:33:17,800
This should actually be no change when we're actually doing it.

816
00:33:17,800 --> 00:33:21,500
We should still be able to do our changes, but they still should be

817
00:33:21,500 --> 00:33:22,000
latent.

818
00:33:22,000 --> 00:33:25,000
So, everything should still be working, there shouldn't be any

819
00:33:25,400 --> 00:33:26,400
bizarreness there.

820
00:33:27,400 --> 00:33:29,600
There we go, but we still got that latency.

821
00:33:29,600 --> 00:33:31,800
So now we're in a good position to fix.

822
00:33:32,000 --> 00:33:33,400
latency, so,

823
00:33:34,700 --> 00:33:39,400
Now in win32 handmade, we don't have to do, is this load counter

824
00:33:39,400 --> 00:33:40,000
anymore?

825
00:33:40,100 --> 00:33:42,800
Basically, we have a way to unload and load the game code.

826
00:33:42,800 --> 00:33:45,700
So all we really need to do is to figure out, whether it needs to be

827
00:33:45,700 --> 00:33:49,500
unloaded, and we've put ourselves in a great position to do that.

828
00:33:49,500 --> 00:33:49,900
Right?

829
00:33:49,900 --> 00:33:51,700
I can go to load game code here.

830
00:33:51,900 --> 00:33:55,400
I can use this last right time thing like this.

831
00:33:55,400 --> 00:33:56,300
I can say, okay.

832
00:33:56,800 --> 00:33:59,900
The file time is going to absorb the dll.

833
00:33:59,900 --> 00:34:03,500
We're going to get that every time through the loop like this.

834
00:34:04,900 --> 00:34:09,800
So this is the New Deal, alright, time that and basically I can just

835
00:34:09,800 --> 00:34:12,699
do if the new deal, right time.

836
00:34:13,100 --> 00:34:14,699
And I can't quite do a, not equals.

837
00:34:14,699 --> 00:34:18,600
But essentially what I'm going to do is, do a not equals here where I

838
00:34:18,600 --> 00:34:21,900
use whatever the the last right time was.

839
00:34:22,100 --> 00:34:24,100
What was, you know, I'm going to move to go ahead and move that

840
00:34:24,100 --> 00:34:24,400
struct.

841
00:34:24,400 --> 00:34:27,900
I like to keep my structs out in the H file so I can see them easier.

842
00:34:28,000 --> 00:34:31,500
So I'm going to go do it, go ahead and and check that that deal.

843
00:34:31,500 --> 00:34:32,000
Alright, time.

844
00:34:32,000 --> 00:34:33,400
So this is basically what I want to do.

845
00:34:33,400 --> 00:34:34,199
I want to do a not.

846
00:34:34,300 --> 00:34:34,699
Will's here.

847
00:34:34,699 --> 00:34:37,300
But if I actually compile, you'll see that I can't do that.

848
00:34:37,300 --> 00:34:39,699
And the reason for that is because file time is actually a compound

849
00:34:39,699 --> 00:34:43,400
structure and you can't test for not equals in a compound structure.

850
00:34:43,400 --> 00:34:43,600
Now.

851
00:34:43,600 --> 00:34:47,300
I don't know if Microsoft actually in, has a built-in function, for

852
00:34:47,300 --> 00:34:48,500
comparing file times.

853
00:34:48,600 --> 00:34:50,900
It doesn't really matter because we could do it ourselves, but let's

854
00:34:50,900 --> 00:34:52,800
take a look here compare file time.

855
00:34:52,800 --> 00:34:53,100
Okay.

856
00:34:53,100 --> 00:34:55,300
So they, they've written something already that compares.

857
00:34:55,300 --> 00:34:58,300
The foul times for us, so we can just go ahead and use that, and it

858
00:34:58,300 --> 00:34:59,300
works on Windows XP.

859
00:34:59,300 --> 00:35:00,200
We're all good.

860
00:35:00,500 --> 00:35:04,200
So all we really need to do is say that it there, this function will

861
00:35:04,400 --> 00:35:06,400
Zero if they're equal, right?

862
00:35:06,400 --> 00:35:13,100
So basically, whatever happens if compared file time like this, if we

863
00:35:13,100 --> 00:35:17,800
just pass it, the two times that we want to compare that, assuming

864
00:35:17,800 --> 00:35:21,800
that it is not equal to 0, then it's time to unload and reload the

865
00:35:21,800 --> 00:35:22,700
code, right?

866
00:35:22,700 --> 00:35:25,600
Because basically what we do every time as we get the new, whatever

867
00:35:25,600 --> 00:35:28,400
the the current dll is, we look at that date.

868
00:35:29,200 --> 00:35:32,500
And we see if that date on that date stamp on the file is different

869
00:35:32,500 --> 00:35:32,900
than the one.

870
00:35:32,900 --> 00:35:34,600
That was the last time we load it.

871
00:35:34,600 --> 00:35:37,200
And if it was, then we go ahead and reload it, right.

872
00:35:37,200 --> 00:35:38,500
That's all we really need to do.

873
00:35:38,900 --> 00:35:40,800
We can make this a little more efficient in a second here and

874
00:35:40,800 --> 00:35:43,800
actually, probably possibly eliminate a bug if we want to know if we

875
00:35:43,800 --> 00:35:44,400
will or not.

876
00:35:44,500 --> 00:35:44,900
Okay.

877
00:35:45,200 --> 00:35:48,100
So now when we're running it in theory, it should be.

878
00:35:48,100 --> 00:35:48,900
Checking course.

879
00:35:48,900 --> 00:35:50,000
We don't know if our codes buggy.

880
00:35:50,000 --> 00:35:50,600
It might be.

881
00:35:51,300 --> 00:35:53,000
So let's go ahead and take a look.

882
00:35:53,000 --> 00:35:56,500
We go in here again doing the same green, red switch that we did

883
00:35:56,500 --> 00:35:58,800
before I go ahead and hit build.

884
00:35:58,900 --> 00:35:59,900
and boom, instant

885
00:36:00,000 --> 00:36:02,400
Is exactly what we wanted.

886
00:36:02,500 --> 00:36:02,800
Right?

887
00:36:02,800 --> 00:36:03,400
There we go.

888
00:36:03,900 --> 00:36:08,500
So now we're at a position to really have that nice kind of smooth

889
00:36:08,500 --> 00:36:09,800
feedback of every time we edit.

890
00:36:09,800 --> 00:36:11,600
It's just bam, right?

891
00:36:12,500 --> 00:36:13,400
So that's pretty good.

892
00:36:14,200 --> 00:36:15,600
No, real problems there.

893
00:36:15,600 --> 00:36:18,200
I think we've taken care of that to do pretty handily.

894
00:36:18,700 --> 00:36:22,700
So now we basically have to just deal with a couple other random

895
00:36:22,700 --> 00:36:27,000
issues before we can move onto to something slightly related, but

896
00:36:27,000 --> 00:36:28,000
that's that's slightly different.

897
00:36:28,000 --> 00:36:29,400
I know if lot of time in the Stream or not.

898
00:36:29,400 --> 00:36:29,800
We have a couple

899
00:36:30,000 --> 00:36:30,900
minutes left.

900
00:36:31,400 --> 00:36:32,200
We've got what do we got?

901
00:36:32,200 --> 00:36:33,100
We got 22 minutes left.

902
00:36:33,100 --> 00:36:35,400
I don't know if that's going to be enough or not, but we'll see.

903
00:36:36,300 --> 00:36:37,800
So hopefully you can see how that's working.

904
00:36:37,800 --> 00:36:39,200
That's really pretty straightforward.

905
00:36:39,200 --> 00:36:40,500
We didn't do anything spectacular.

906
00:36:40,500 --> 00:36:41,100
Interesting there.

907
00:36:41,100 --> 00:36:43,000
All we were doing was just getting that time.

908
00:36:43,800 --> 00:36:48,100
And so one of the things we could do here is avoid doing multiple of

909
00:36:48,100 --> 00:36:51,900
these get times because that way we won't miss a right to the dll was

910
00:36:51,900 --> 00:36:54,000
the only thing I was thinking, excuse me.

911
00:36:54,800 --> 00:36:58,900
So, basically, what I was thinking there is in that unload load game

912
00:36:58,900 --> 00:36:59,500
code.

913
00:36:59,700 --> 00:37:04,700
If I just take load game code and I have load game code, take the file

914
00:37:04,700 --> 00:37:08,300
time, you know, take this this thing right here.

915
00:37:09,100 --> 00:37:10,100
We already know that.

916
00:37:10,100 --> 00:37:13,300
We have it anytime that we actually do that load.

917
00:37:13,500 --> 00:37:16,400
So we could just pass it in here and set it, right?

918
00:37:16,400 --> 00:37:18,800
We could just do that and not do it.

919
00:37:18,800 --> 00:37:21,100
And so I don't know if maybe that's a little bit better.

920
00:37:22,300 --> 00:37:23,400
I don't think it really is.

921
00:37:23,400 --> 00:37:24,500
I think it just adds a little

922
00:37:24,700 --> 00:37:28,000
Because we still could sneak a right in between so I think I think

923
00:37:28,000 --> 00:37:28,800
it's probably fine.

924
00:37:29,500 --> 00:37:34,100
So, basically, the problem that we have now that we have to address as

925
00:37:34,100 --> 00:37:37,800
if you remember, what I did yesterday is I set this directory to be

926
00:37:37,800 --> 00:37:38,800
the build directory.

927
00:37:39,200 --> 00:37:42,100
And the reason I did that was because it needs to load the dll and the

928
00:37:42,100 --> 00:37:43,800
dlls go in the build directory.

929
00:37:44,300 --> 00:37:48,100
So what I wanted to do is I wanted to leave it to where we had it

930
00:37:48,100 --> 00:37:50,800
before, where it's in the data directory, where our assets going to

931
00:37:50,800 --> 00:37:53,400
be, where they need to actually load that stuff.

932
00:37:54,400 --> 00:37:54,500
So,

933
00:37:54,600 --> 00:37:59,400
So I, if I ran it now in theory, we shouldn't well, okay, that was

934
00:38:00,400 --> 00:38:01,700
rather surprising.

935
00:38:01,700 --> 00:38:02,000
Oh, no.

936
00:38:02,000 --> 00:38:05,100
That that actually, is that actually is probably what you would

937
00:38:05,100 --> 00:38:05,700
expect.

938
00:38:06,400 --> 00:38:06,900
Okay.

939
00:38:07,100 --> 00:38:11,700
So basically what happens here, is Windows knows to use the search

940
00:38:11,700 --> 00:38:15,400
path for our executable to find the dll when we called load Library.

941
00:38:15,400 --> 00:38:19,300
So load Library succeeds, but what I would assume happen is our file

942
00:38:19,300 --> 00:38:19,600
date.

943
00:38:19,600 --> 00:38:22,200
Check fails, because that can actually find the file.

944
00:38:22,200 --> 00:38:23,700
I'm not actually sure if that's true.

945
00:38:24,100 --> 00:38:24,500
But let's

946
00:38:24,700 --> 00:38:26,200
Go ahead and see if it is.

947
00:38:26,300 --> 00:38:29,200
So when 32 load game code.

948
00:38:29,400 --> 00:38:29,900
Oops.

949
00:38:31,700 --> 00:38:36,300
Introduce load game code, set a breakpoint and run in there.

950
00:38:36,800 --> 00:38:38,100
So, here we are on load, gain cut.

951
00:38:38,100 --> 00:38:39,300
I just want to see what happens here.

952
00:38:39,900 --> 00:38:43,900
So basically, what happens what I was suggesting happens, is load

953
00:38:43,900 --> 00:38:46,600
library, and we talked about this when we first started talking about

954
00:38:46,600 --> 00:38:49,700
load Library, load Library, a there is a search path.

955
00:38:49,700 --> 00:38:52,700
Complicit in, where it's going to look to find that dll.

956
00:38:52,700 --> 00:38:55,400
And one of the places going to look to find a dll is it's going to

957
00:38:55,400 --> 00:38:57,200
look in the same directory as our executable.

958
00:38:57,500 --> 00:38:59,800
So when it looks in the same directory as our executable will,

959
00:39:00,000 --> 00:39:03,000
Find the dll which means that load Library will succeed.

960
00:39:03,000 --> 00:39:03,800
What I'm worried about.

961
00:39:03,800 --> 00:39:06,700
However is that this will not right.

962
00:39:06,900 --> 00:39:10,100
So when I come in here and take a look at it, it does Define first

963
00:39:10,100 --> 00:39:10,300
file.

964
00:39:10,300 --> 00:39:13,200
You can see it fails to find the file and the reason is because it's

965
00:39:13,200 --> 00:39:17,600
looking only in the current directory, which is set to whatever we set

966
00:39:17,600 --> 00:39:20,100
it to in here.

967
00:39:20,700 --> 00:39:22,400
Let me, I want to actually close this.

968
00:39:22,400 --> 00:39:25,000
Please that'll actually do that those please.

969
00:39:25,500 --> 00:39:29,400
Okay, it's whatever we set it to in the solution Explorer.

970
00:39:29,400 --> 00:39:29,800
So

971
00:39:30,000 --> 00:39:31,500
so basically, this thing

972
00:39:32,700 --> 00:39:34,300
Is what our current directory is.

973
00:39:34,300 --> 00:39:38,200
And that's where all files will be looked for except dlls, which have

974
00:39:38,200 --> 00:39:39,400
that magic search path.

975
00:39:39,600 --> 00:39:43,000
So what we need to do is make it so that we can actually find the dll

976
00:39:43,000 --> 00:39:43,800
ourselves.

977
00:39:43,900 --> 00:39:47,500
No matter what our actual path is so long as the dll is in the same

978
00:39:47,500 --> 00:39:48,700
directory as executable.

979
00:39:49,200 --> 00:39:52,700
So what I want to be able to do is I want to be able to ask, where is

980
00:39:52,700 --> 00:39:53,500
the executable?

981
00:39:53,500 --> 00:39:56,300
Like, where is our exit actual executable, so that we can look for the

982
00:39:56,300 --> 00:39:58,700
dll in that path specifically.

983
00:39:58,700 --> 00:40:02,400
And furthermore, when we do this copy, we want to actually put the

984
00:40:02,500 --> 00:40:05,800
Puppy in the same place as the dll was.

985
00:40:05,800 --> 00:40:08,700
So if I go in here, right?

986
00:40:08,800 --> 00:40:13,400
You can I think you should probably be able to see that it actually.

987
00:40:14,400 --> 00:40:14,700
Well.

988
00:40:14,700 --> 00:40:15,600
No, it didn't do that.

989
00:40:15,600 --> 00:40:16,200
That's weird.

990
00:40:16,200 --> 00:40:18,900
I thought it would have done the copy to the wrong place.

991
00:40:19,700 --> 00:40:20,400
Oh, you know what?

992
00:40:20,400 --> 00:40:23,200
The copy probably just flat-out failed because it probably couldn't

993
00:40:23,200 --> 00:40:23,700
find it.

994
00:40:23,900 --> 00:40:25,300
So actually that's probably what happened.

995
00:40:25,300 --> 00:40:27,600
This copy probably failed as well because it could never find the

996
00:40:27,600 --> 00:40:28,000
source tool.

997
00:40:28,000 --> 00:40:31,500
Oh, I'm so yeah, so both of these things don't work unless we actually

998
00:40:31,500 --> 00:40:32,300
have the path.

999
00:40:32,500 --> 00:40:34,700
Proper, so that's basically what we're going to have to do.

1000
00:40:34,700 --> 00:40:37,300
We have to get that that path to be proper.

1001
00:40:37,800 --> 00:40:40,200
So what I'm going to do here is I'm basically just going to try and

1002
00:40:40,200 --> 00:40:42,000
ask Windows where the executable is.

1003
00:40:42,500 --> 00:40:45,700
And I think probably the easiest way to do that is to use get module

1004
00:40:45,700 --> 00:40:50,500
file name because I believe we can just just flat out, ask it where it

1005
00:40:50,500 --> 00:40:51,400
actually is.

1006
00:40:51,700 --> 00:40:55,000
So, let me just double check to see what the look.

1007
00:40:55,000 --> 00:40:56,100
The EX version of that is.

1008
00:40:56,100 --> 00:40:58,900
I'm not sure what the two different ones are.

1009
00:40:59,100 --> 00:41:01,900
So one takes a process and a module.

1010
00:41:02,500 --> 00:41:03,300
One takes a model.

1011
00:41:03,300 --> 00:41:04,800
So yeah, so we can just use this one.

1012
00:41:05,100 --> 00:41:07,800
So basically what this does is remember those module handles, I said,

1013
00:41:07,800 --> 00:41:09,200
but occasionally you actually need them.

1014
00:41:09,300 --> 00:41:11,000
We only used it like twice, I think.

1015
00:41:13,200 --> 00:41:14,800
Well, here's another time we can use it.

1016
00:41:14,800 --> 00:41:16,000
Basically.

1017
00:41:16,000 --> 00:41:19,600
The module handle allows us to identify some piece of executable code,

1018
00:41:19,600 --> 00:41:20,600
that was loaded and windows.

1019
00:41:20,600 --> 00:41:23,000
We know what ours is because it's passed in.

1020
00:41:23,000 --> 00:41:24,600
I don't know if you guys remember in win main.

1021
00:41:24,600 --> 00:41:28,200
We actually get this H instance, which is a module handle.

1022
00:41:28,200 --> 00:41:33,000
I know it's a little deceptive, but it actually is a module handle, do

1023
00:41:33,000 --> 00:41:37,800
not, that's kind of antiquated, weird Windows type stuff, but that

1024
00:41:37,800 --> 00:41:40,300
that is what we could use for the module handle.

1025
00:41:40,300 --> 00:41:43,200
And so basically, when we call this, what we

1026
00:41:43,200 --> 00:41:46,100
Be able to do is oh and you know what?

1027
00:41:46,100 --> 00:41:47,100
It looks like.

1028
00:41:47,100 --> 00:41:50,300
We wouldn't even have to pass it in because know if we just pass a

1029
00:41:50,300 --> 00:41:53,200
zero there, it'll just default to using our current executable.

1030
00:41:53,200 --> 00:41:54,500
So we don't even need to pass it.

1031
00:41:54,500 --> 00:41:58,100
It will just do what we want it to do if we don't pass anything at

1032
00:41:58,100 --> 00:41:58,200
all.

1033
00:41:58,200 --> 00:41:59,900
So we need to do is we need

1034
00:42:00,000 --> 00:42:04,000
Figure out how big that actually is going to be.

1035
00:42:04,000 --> 00:42:05,000
So if we take a look,

1036
00:42:06,100 --> 00:42:09,400
if the buffer is too small to hold the module name, the string is

1037
00:42:09,400 --> 00:42:13,200
truncated to n size characters and function if the function returns in

1038
00:42:13,200 --> 00:42:16,800
size and the function sets last are, so it looks like if we call this

1039
00:42:16,800 --> 00:42:19,000
function with a buffer size, that's too small.

1040
00:42:19,000 --> 00:42:25,600
It would tell us it would basically tell us how big we need the buffer

1041
00:42:25,600 --> 00:42:25,900
to be.

1042
00:42:25,900 --> 00:42:28,300
That's what it seems like it's saying.

1043
00:42:28,300 --> 00:42:34,300
So, I believe if we say here, get module handle with zero and I pass

1044
00:42:34,300 --> 00:42:34,400
it.

1045
00:42:34,400 --> 00:42:36,000
Let's say I have a buffer.

1046
00:42:36,100 --> 00:42:37,500
That we know is too small.

1047
00:42:37,500 --> 00:42:38,600
So I just pass it.

1048
00:42:38,900 --> 00:42:40,600
Well, I don't even have to pass it above her right eye.

1049
00:42:40,600 --> 00:42:41,500
Could pass it.

1050
00:42:42,800 --> 00:42:47,100
Well, so, I have a buffer here, I could pass it the buffer pointer and

1051
00:42:47,100 --> 00:42:49,900
just pass it zero as a size, right?

1052
00:42:49,900 --> 00:42:54,800
Like that d word, size of file name.

1053
00:42:54,900 --> 00:42:55,900
Let's take a look.

1054
00:42:57,300 --> 00:42:58,200
So oops.

1055
00:42:59,600 --> 00:43:02,900
What is the problem function does not take three arguments about get

1056
00:43:02,900 --> 00:43:03,600
module handle?

1057
00:43:03,600 --> 00:43:04,000
That's good.

1058
00:43:04,100 --> 00:43:05,300
It's get module clown.

1059
00:43:05,800 --> 00:43:06,200
There we go.

1060
00:43:07,000 --> 00:43:09,500
So if I actually call that, what I want to see is if this will just

1061
00:43:09,500 --> 00:43:13,600
tell us if we call it with no buffer essentially will it then return

1062
00:43:13,600 --> 00:43:16,200
us how big the buffer supposed to be so that we can just make a

1063
00:43:16,200 --> 00:43:16,800
buffer?

1064
00:43:16,900 --> 00:43:18,800
That's the right size, if that makes sense.

1065
00:43:19,200 --> 00:43:22,900
So let's go ahead and check in our wind main here when we come in.

1066
00:43:23,900 --> 00:43:25,400
Let's see what it actually does.

1067
00:43:25,800 --> 00:43:28,800
Because I want to see if that's, that's correct size of filename.

1068
00:43:29,500 --> 00:43:32,800
Nope, that is not useful to us at all.

1069
00:43:32,900 --> 00:43:35,000
So that is unhelpful.

1070
00:43:35,800 --> 00:43:37,000
That is very unhelpful.

1071
00:43:37,000 --> 00:43:41,500
Say, the very least because that does not allow us to actually tell

1072
00:43:41,800 --> 00:43:42,800
what something is now.

1073
00:43:42,800 --> 00:43:48,700
I suppose, I could do something like this and cheese out a little bit.

1074
00:43:48,800 --> 00:43:52,300
But what I would have liked to do is how to tell me how big it was so

1075
00:43:52,300 --> 00:43:53,200
that we could have done it.

1076
00:43:53,500 --> 00:43:54,000
William Lee.

1077
00:43:55,000 --> 00:43:57,500
Yeah, well, I don't know what to say there.

1078
00:43:57,900 --> 00:44:01,700
I would say, since this is debug code again, not something that we're

1079
00:44:01,700 --> 00:44:03,900
ever going to actually need to use in practice.

1080
00:44:04,300 --> 00:44:05,600
I would say this is probably fine.

1081
00:44:05,600 --> 00:44:08,200
But basically, what I had to use is, there's a, there's a Define in

1082
00:44:08,200 --> 00:44:09,800
Windows called Max path.

1083
00:44:10,100 --> 00:44:10,600
Right?

1084
00:44:10,800 --> 00:44:13,800
And if you take a look at what it is, it's basically a thing that

1085
00:44:13,800 --> 00:44:20,300
tells you what the maximum number of characters is for a path in

1086
00:44:20,300 --> 00:44:22,400
Windows for a file name, right?

1087
00:44:22,400 --> 00:44:23,300
And I don't know if they

1088
00:44:23,500 --> 00:44:25,100
They document that in here somewhere.

1089
00:44:26,000 --> 00:44:27,400
Oops, Max path.

1090
00:44:28,100 --> 00:44:28,900
Yeah, here you go.

1091
00:44:29,100 --> 00:44:32,900
So it's defined to be two hundred and sixty characters and so on and

1092
00:44:33,100 --> 00:44:37,200
the reason that I don't like it is because it's totally wrong, like

1093
00:44:37,200 --> 00:44:39,400
it's not actually the max path anymore.

1094
00:44:40,500 --> 00:44:41,500
Like you can see here.

1095
00:44:41,500 --> 00:44:44,500
There's extended pass in certain circumstances and all this other

1096
00:44:44,500 --> 00:44:45,000
stuff.

1097
00:44:45,400 --> 00:44:50,800
And so really like Max path is just is not right.

1098
00:44:51,800 --> 00:44:53,300
So, you know, I'm just going to say

1099
00:44:53,500 --> 00:44:57,000
A never use max path in code.

1100
00:44:57,000 --> 00:44:59,800
That is user-facing because it

1101
00:45:00,000 --> 00:45:05,600
Can be dangerous and lead to bad results right now.

1102
00:45:05,600 --> 00:45:08,600
It's not going to produce a buffer overrun or anything here, because

1103
00:45:08,600 --> 00:45:11,200
we're still passing the size of the buffer, but it would mean that

1104
00:45:11,200 --> 00:45:12,500
we'd get the wrong.

1105
00:45:13,100 --> 00:45:15,000
We get a truncated file path back.

1106
00:45:15,000 --> 00:45:19,400
Potentially, in the case, where the size was larger than what we

1107
00:45:19,400 --> 00:45:20,000
passed in.

1108
00:45:20,400 --> 00:45:22,700
So I feel like it's just a good idea to not use it.

1109
00:45:22,700 --> 00:45:25,700
If you can, I don't want to go through some kind of long process of

1110
00:45:25,700 --> 00:45:29,000
trying to coax Windows into giving me the name by calling this

1111
00:45:29,000 --> 00:45:29,700
repeatedly with

1112
00:45:30,000 --> 00:45:31,400
Sure, buffer sizes or anything like that.

1113
00:45:31,400 --> 00:45:32,800
So I think this is for debug code.

1114
00:45:32,800 --> 00:45:35,300
This is probably the safest thing to do is to just actually do it this

1115
00:45:35,300 --> 00:45:37,200
way, but it would have been nice.

1116
00:45:37,500 --> 00:45:40,300
If Windows API had just allowed us to say, how big is the buffer need

1117
00:45:40,300 --> 00:45:42,900
to be and then we will give you that size buffer.

1118
00:45:42,900 --> 00:45:44,100
But what can you do?

1119
00:45:44,400 --> 00:45:47,500
So there you go to do it that way and now I'll get back a buffer and

1120
00:45:47,500 --> 00:45:49,800
that buffer should have the name of our executable.

1121
00:45:49,800 --> 00:45:52,900
Now, the thing that I want to check is does it actually have the path

1122
00:45:52,900 --> 00:45:53,700
baked in there?

1123
00:45:53,700 --> 00:45:56,600
I don't know if it does, so I'm going to look to see if that gives us

1124
00:45:56,600 --> 00:45:57,900
back the path.

1125
00:45:58,000 --> 00:45:59,400
It does look like, gives us back the path.

1126
00:45:59,400 --> 00:45:59,800
You can see

1127
00:46:00,000 --> 00:46:01,200
It's got the full path in there.

1128
00:46:02,000 --> 00:46:05,800
So what I need to do now is I just need to truncate that path so that

1129
00:46:05,800 --> 00:46:12,300
I basically have a way to build new paths with a change in the

1130
00:46:12,300 --> 00:46:13,300
filename part.

1131
00:46:13,400 --> 00:46:16,300
So all I'm going to do here is I'm going to do a real simple sort of

1132
00:46:16,300 --> 00:46:21,600
truncation where I basically go, give me wherever the last / is in

1133
00:46:21,600 --> 00:46:22,600
this in this name.

1134
00:46:22,600 --> 00:46:26,900
So I'm just going to do a really stupid, absolutely stupid Searcher.

1135
00:46:26,900 --> 00:46:27,900
I'm going to say

1136
00:46:31,500 --> 00:46:34,600
This right, as long as okay.

1137
00:46:34,600 --> 00:46:37,000
So I know this is null terminated because Windows is supposed to

1138
00:46:37,000 --> 00:46:38,500
return me a null terminated string.

1139
00:46:38,600 --> 00:46:40,100
So I can start scanning the buffer.

1140
00:46:40,200 --> 00:46:43,200
I go through the buffer looking for an alternator is and I stopped

1141
00:46:43,200 --> 00:46:46,100
when I get to the alternator and then what I'm going to say is there's

1142
00:46:46,100 --> 00:46:47,300
a last /.

1143
00:46:47,500 --> 00:46:52,500
The last lash is by default going to be equal to whatever the the

1144
00:46:52,500 --> 00:46:55,800
actual last character that Windows said was there.

1145
00:46:55,900 --> 00:46:59,900
I'm going to actually say that that is where that actually is and

1146
00:46:59,900 --> 00:47:01,100
we'll pretend that that's the last laugh.

1147
00:47:01,300 --> 00:47:03,200
That's where we would start actually writing stuff.

1148
00:47:04,500 --> 00:47:07,700
I guess, technically, we want one past the last lash in the file name.

1149
00:47:08,900 --> 00:47:10,900
And so then what I'll do is I'll go through here.

1150
00:47:10,900 --> 00:47:17,800
And if the character that IC is equal to a backslash, then I will say

1151
00:47:17,800 --> 00:47:20,900
One path, / / equals scan plus 1, right?

1152
00:47:21,500 --> 00:47:25,500
So I'm just I just basically just, you know, kind of quick and dirty

1153
00:47:25,600 --> 00:47:28,300
really simple thing to truncate, the file name.

1154
00:47:28,300 --> 00:47:31,100
I don't know if Windows actually provides one of

1155
00:47:31,200 --> 00:47:32,600
Those but it might.

1156
00:47:32,600 --> 00:47:37,100
So anyway, we look at one pass last / here and take a look at where it

1157
00:47:37,100 --> 00:47:37,400
is.

1158
00:47:37,700 --> 00:47:38,400
You can see that.

1159
00:47:38,400 --> 00:47:41,600
Basically all I did was I wrote something that just starts here.

1160
00:47:41,700 --> 00:47:45,200
It scans through and it looks to see whether it sounds the last /

1161
00:47:45,200 --> 00:47:47,900
where it found the last lash and it gives me a pointer right to there.

1162
00:47:48,100 --> 00:47:51,700
So if I wanted to just keep the path part, I now know I can overwrite

1163
00:47:51,700 --> 00:47:54,800
that part with the, you know, with the new thing.

1164
00:47:55,500 --> 00:47:58,600
All right, if you want to see that in action, we can step into it just

1165
00:47:58,600 --> 00:47:59,800
so you can see if you've never

1166
00:48:00,000 --> 00:48:00,800
And stuff like that before.

1167
00:48:00,800 --> 00:48:01,500
It's really simple.

1168
00:48:01,900 --> 00:48:04,900
Basically, what I did is this gives me back a length.

1169
00:48:05,100 --> 00:48:07,700
So I started off by saying, well, if there's no slashes.

1170
00:48:07,700 --> 00:48:08,700
I'm just going to assume that.

1171
00:48:08,700 --> 00:48:11,200
It's basically, the null Terminator is where the last lashes.

1172
00:48:12,300 --> 00:48:14,200
Although now that I think about it, that would be wrong.

1173
00:48:14,500 --> 00:48:15,600
That's not quite right.

1174
00:48:15,600 --> 00:48:19,500
Really the one if for this purpose is if there was no slashes than

1175
00:48:19,500 --> 00:48:21,200
there is no path is just a file name.

1176
00:48:21,200 --> 00:48:23,400
So I guess we would just be just be the beginning of the buffer,

1177
00:48:23,600 --> 00:48:24,100
right?

1178
00:48:24,100 --> 00:48:25,300
We'd overwrite the whole thing.

1179
00:48:25,800 --> 00:48:27,200
So, yeah, because there is no path.

1180
00:48:27,300 --> 00:48:28,600
So that's that's basically it.

1181
00:48:28,600 --> 00:48:29,800
So that's actually that's actually

1182
00:48:30,000 --> 00:48:31,200
more correct for our purposes.

1183
00:48:31,300 --> 00:48:34,900
So we go in here, we start off and we say that one pass last laugh is

1184
00:48:34,900 --> 00:48:38,400
just the beginning of the buffer and we've got scan and scan is

1185
00:48:38,400 --> 00:48:43,100
pointing to at the outset, the beginning of the buffer we go through

1186
00:48:43,200 --> 00:48:44,800
and we just go through each character.

1187
00:48:44,800 --> 00:48:50,100
Literally you can see em SVC is incredibly long, lag time for updating

1188
00:48:50,100 --> 00:48:52,300
its watch window, which has gotten worse with every version.

1189
00:48:52,300 --> 00:48:54,500
Speaking of things to get worse and msec with every version.

1190
00:48:54,500 --> 00:48:57,000
It used to be instantaneous when you hit F10, now, it takes like a

1191
00:48:57,000 --> 00:48:58,800
second to update the watch window.

1192
00:49:01,200 --> 00:49:06,500
Yes, I just like to remind you ladies and gentlemen, vet this machine,

1193
00:49:06,900 --> 00:49:09,700
which has this many virtual processors, at least in it.

1194
00:49:10,400 --> 00:49:11,300
This many cores.

1195
00:49:11,300 --> 00:49:17,400
I should say, is taking and, you know, Monster amount of memory, the

1196
00:49:17,400 --> 00:49:19,600
the people who wrote Visual Studio, could not figure out how to update

1197
00:49:19,600 --> 00:49:22,300
this watch window in any faster time than that.

1198
00:49:22,300 --> 00:49:22,800
Okay.

1199
00:49:23,200 --> 00:49:25,400
So, basically, what I want to do here is, like I said, I'm just going

1200
00:49:25,400 --> 00:49:25,700
through here.

1201
00:49:25,700 --> 00:49:29,800
And any time I get, a /i update one pass / / to point to that.

1202
00:49:29,900 --> 00:49:32,500
At location, so you can see it updated here, because it hit a / the

1203
00:49:32,500 --> 00:49:33,500
scanners hit a /.

1204
00:49:33,500 --> 00:49:34,400
So it updated it.

1205
00:49:34,600 --> 00:49:36,000
So, now we write through again.

1206
00:49:36,200 --> 00:49:37,700
We're gonna be scanning through.

1207
00:49:37,700 --> 00:49:40,700
You can see I'm eating characters using characters eating characters.

1208
00:49:40,800 --> 00:49:44,000
I get to a slash and now it's time to update one pass /.

1209
00:49:44,000 --> 00:49:44,700
/ 2.2.

1210
00:49:44,700 --> 00:49:45,400
Just after that.

1211
00:49:45,400 --> 00:49:46,000
There it is.

1212
00:49:46,600 --> 00:49:49,000
And that's the last time it will update because it won't hit any more

1213
00:49:49,000 --> 00:49:49,500
slashes.

1214
00:49:49,500 --> 00:49:52,700
So it eats the rest of the string when we finish, we are pointing to

1215
00:49:52,700 --> 00:49:53,500
exactly what we wanted.

1216
00:49:53,500 --> 00:49:58,300
So now, we know that the path part of our string is between buffer and

1217
00:49:58,500 --> 00:49:59,800
one pass last stress.

1218
00:50:00,100 --> 00:50:04,300
So if you wanted to build new ones we could which means, you know, I

1219
00:50:04,300 --> 00:50:05,400
should I should put this.

1220
00:50:06,900 --> 00:50:09,100
XZ, filename shouldn't be called, buffer.

1221
00:50:09,100 --> 00:50:12,700
Buffer is not a particularly good name for something certainly.

1222
00:50:13,100 --> 00:50:13,800
So there we go.

1223
00:50:13,800 --> 00:50:15,400
That's a little bit cleaner for that.

1224
00:50:15,400 --> 00:50:19,300
So we get the exif file name and now we have that dll name that

1225
00:50:19,300 --> 00:50:20,600
Source, dll name.

1226
00:50:21,100 --> 00:50:24,200
So what we can do now is we can actually start to play with this a

1227
00:50:24,200 --> 00:50:25,500
little bit and say, okay.

1228
00:50:25,800 --> 00:50:31,300
Well if we want to we can use Windows to construct new strings for us.

1229
00:50:31,700 --> 00:50:32,400
That actually happy.

1230
00:50:32,400 --> 00:50:35,900
So we can say WS printf which again you seem to use before which is

1231
00:50:35,900 --> 00:50:36,500
just the window.

1232
00:50:36,700 --> 00:50:38,400
As call for doing sort of formatted.

1233
00:50:38,400 --> 00:50:41,200
I 0, I can go ahead and say, all right.

1234
00:50:41,300 --> 00:50:45,600
What I'd like to do is print that path that we had, and then I'd like

1235
00:50:45,600 --> 00:50:47,200
to print handmade dot DL.

1236
00:50:47,200 --> 00:50:49,800
I like just append and made that deal to it.

1237
00:50:50,400 --> 00:50:52,200
And so, that's pretty straightforward.

1238
00:50:52,200 --> 00:50:52,700
Right?

1239
00:50:54,400 --> 00:50:57,000
All I have to do now is create something.

1240
00:50:57,000 --> 00:50:59,800
That's got the actual eggs e founding

1241
00:51:00,300 --> 00:51:01,000
You know what?

1242
00:51:03,200 --> 00:51:04,100
Maybe I should write this.

1243
00:51:04,100 --> 00:51:05,300
I mean, this is handmade hero.

1244
00:51:05,300 --> 00:51:06,700
Maybe I should write it ourselves.

1245
00:51:06,700 --> 00:51:08,500
Should we write the stream processing code ourselves?

1246
00:51:08,900 --> 00:51:10,500
Let's write the string Crossing code ourselves.

1247
00:51:10,500 --> 00:51:11,800
It doesn't look like I'm going to get to the other thing.

1248
00:51:11,800 --> 00:51:12,700
We were going to get to tonight.

1249
00:51:12,700 --> 00:51:14,700
Anyway, so we might as well write the string processing code

1250
00:51:14,800 --> 00:51:15,500
ourselves.

1251
00:51:15,900 --> 00:51:18,700
So let's do a concatenation function, basically, right?

1252
00:51:18,700 --> 00:51:22,300
Let's just do something that concatenate these two strings together.

1253
00:51:22,400 --> 00:51:27,400
So I'm going to do something that's like concatenate or or you know,

1254
00:51:28,300 --> 00:51:30,500
cat strings or something like this, right?

1255
00:51:30,700 --> 00:51:32,800
And so it's going to take Source a

1256
00:51:34,100 --> 00:51:35,900
I'm Source a count.

1257
00:51:36,500 --> 00:51:37,700
That's what I want to do.

1258
00:51:37,700 --> 00:51:43,900
And then a source, be count and a source B, and then a desk count and

1259
00:51:43,900 --> 00:51:45,000
a dest, right?

1260
00:51:45,000 --> 00:51:47,000
And I'm basically it's going to write something that does the string

1261
00:51:47,000 --> 00:51:49,900
can cat- myself, because why not?

1262
00:51:50,500 --> 00:51:53,400
And so then what I'm going to do is I'm going to call Cat strings to

1263
00:51:53,400 --> 00:51:54,400
produce the new string.

1264
00:51:54,400 --> 00:51:59,000
So let's say I've got something I want to do that Source, dll name,

1265
00:51:59,200 --> 00:52:02,800
and then I want to do that temp DL name, those two things, right?

1266
00:52:03,000 --> 00:52:05,000
I want both of those to be there.

1267
00:52:05,200 --> 00:52:11,700
So if I want to produce those strings, again, this is like the this is

1268
00:52:11,700 --> 00:52:13,800
the grossest way you could possibly do string processing.

1269
00:52:13,800 --> 00:52:15,400
If you were doing a lot of string processing, you would.

1270
00:52:15,400 --> 00:52:16,400
Absolutely not do this way.

1271
00:52:16,400 --> 00:52:19,300
You'd actually write a little string library for your use and then you

1272
00:52:19,300 --> 00:52:21,700
would kind of be in something, a little more convenient, you know,

1273
00:52:21,700 --> 00:52:25,200
like you would imagine seeing in python or something like that, but

1274
00:52:25,200 --> 00:52:27,900
for now since we really this is the only processing we have to do.

1275
00:52:28,100 --> 00:52:30,300
I'm just going to write it this way and not go right?

1276
00:52:30,300 --> 00:52:32,900
A huge, big library, or something to do with it.

1277
00:52:33,000 --> 00:52:35,800
But basically what I'm going to do here is I want to basically say,

1278
00:52:35,800 --> 00:52:36,500
all right.

1279
00:52:36,800 --> 00:52:43,600
So one past lash / - XE file name, gives me how long that that path

1280
00:52:43,600 --> 00:52:44,800
is, right.

1281
00:52:45,300 --> 00:52:48,000
And then I want to copy XE founding from there.

1282
00:52:48,300 --> 00:52:52,100
And then I want to also do that handmade.

1283
00:52:52,100 --> 00:52:58,500
So I've got this handmade dll file name, right?

1284
00:52:58,500 --> 00:53:00,600
Or I should say game code, dll.

1285
00:53:03,000 --> 00:53:04,000
Um, I don't know what you want to call it.

1286
00:53:04,000 --> 00:53:05,600
Just the file part of that.

1287
00:53:05,800 --> 00:53:11,400
So maybe maybe Source URL, full path and or I should say, let's say

1288
00:53:11,700 --> 00:53:12,700
game code.

1289
00:53:12,700 --> 00:53:15,000
Dll full path and game code.

1290
00:53:15,100 --> 00:53:19,100
Dll file name, we could do it like that, like that.

1291
00:53:19,900 --> 00:53:24,600
Basically, this will equal just the handmade dll part, right?

1292
00:53:25,500 --> 00:53:26,600
And similarly.

1293
00:53:26,600 --> 00:53:30,000
I can do a thing where, basically, the temp, dll gets the same one.

1294
00:53:31,200 --> 00:53:32,800
So there's the temp and

1295
00:53:35,500 --> 00:53:37,000
Milk should be called.

1296
00:53:37,000 --> 00:53:38,000
I don't know.

1297
00:53:38,200 --> 00:53:40,600
So called a source game code and temp.

1298
00:53:40,800 --> 00:53:41,400
There we go.

1299
00:53:41,700 --> 00:53:42,500
Something like that.

1300
00:53:42,500 --> 00:53:43,600
That should be relatively clear.

1301
00:53:43,600 --> 00:53:44,100
Right?

1302
00:53:44,100 --> 00:53:45,000
I feel like it should be.

1303
00:53:45,700 --> 00:53:49,300
So, anyway, and this was I guess, I think this is called underscore

1304
00:53:49,300 --> 00:53:49,900
temp.

1305
00:53:49,900 --> 00:53:51,800
I don't actually know what we called it, but doesn't matter.

1306
00:53:52,000 --> 00:53:54,400
So we do the cat strings here.

1307
00:53:54,700 --> 00:53:59,800
Then we want to do the size of this guy and source code, dll.

1308
00:54:00,000 --> 00:54:01,300
File name like that.

1309
00:54:01,300 --> 00:54:04,100
And then we want to put it in here.

1310
00:54:04,200 --> 00:54:05,800
So just past that.

1311
00:54:05,900 --> 00:54:06,800
And there we go.

1312
00:54:07,100 --> 00:54:09,100
This that's really all we need to do.

1313
00:54:09,100 --> 00:54:12,300
I think nothing particularly odd there.

1314
00:54:12,600 --> 00:54:17,700
So we want to do source with temp, their replace that and I think

1315
00:54:17,900 --> 00:54:19,800
that's the correct calls this double check.

1316
00:54:20,100 --> 00:54:21,400
What did I do wrong there?

1317
00:54:22,700 --> 00:54:25,500
Argument conversion from N64 to n 0.

1318
00:54:25,600 --> 00:54:29,700
So the size of its leader actually 64-bit since this is

1319
00:54:30,000 --> 00:54:31,300
Nicly a 64-bit OS.

1320
00:54:31,300 --> 00:54:34,000
We don't really need them too because we're never going to have 64-bit

1321
00:54:34,000 --> 00:54:35,000
wide strings.

1322
00:54:35,700 --> 00:54:36,100
Okay.

1323
00:54:36,100 --> 00:54:40,100
So then for win32 load game code, we are now going to pass both of

1324
00:54:40,100 --> 00:54:42,600
those things to it, game code.

1325
00:54:43,900 --> 00:54:48,500
We need to pass both the The Source deal name and the temp name.

1326
00:54:48,600 --> 00:54:52,700
So those go out of their Source kilo name and temp.

1327
00:54:52,700 --> 00:54:54,400
Dll name that?

1328
00:54:54,800 --> 00:54:57,000
And that should be about it.

1329
00:54:57,000 --> 00:54:58,700
Oh, of course, these were not named that anymore.

1330
00:54:58,700 --> 00:55:01,500
I made the super long crazy explanatory names for them.

1331
00:55:01,500 --> 00:55:03,700
So we got the full path here.

1332
00:55:04,200 --> 00:55:05,200
Full path.

1333
00:55:05,300 --> 00:55:09,200
And then we've got the full path here and there we go.

1334
00:55:09,200 --> 00:55:10,900
So, there we go.

1335
00:55:11,400 --> 00:55:13,100
And right in the

1336
00:55:13,300 --> 00:55:16,100
This guy has to also ask for that.

1337
00:55:16,400 --> 00:55:17,900
So I think that's it.

1338
00:55:18,700 --> 00:55:22,400
Just a couple more places load game code needs to take both of these

1339
00:55:22,400 --> 00:55:23,300
again 10.

1340
00:55:25,500 --> 00:55:26,200
So, there we go.

1341
00:55:26,400 --> 00:55:29,400
So now all I need to do is actually write this function because as you

1342
00:55:29,400 --> 00:55:31,300
can see, it doesn't actually do anything quite yet.

1343
00:55:31,300 --> 00:55:32,300
So that's no good.

1344
00:55:32,300 --> 00:55:34,900
So basically, all we have to do is we just have to copy these in

1345
00:55:34,900 --> 00:55:35,100
there.

1346
00:55:35,100 --> 00:55:38,800
So I'm going to do probably the worst possible implementation of this

1347
00:55:38,800 --> 00:55:40,100
because we don't care how fast it is.

1348
00:55:40,100 --> 00:55:42,300
I'm just going to go ahead and write the first thing that comes to

1349
00:55:42,300 --> 00:55:42,900
mind.

1350
00:55:43,200 --> 00:55:48,900
Actually, what we need to do is, we need to do a loop over Source, a

1351
00:55:48,900 --> 00:55:50,600
count and copied into discount.

1352
00:55:50,600 --> 00:55:51,000
Right?

1353
00:55:51,000 --> 00:55:54,300
So I need to do something that basically does tubing.

1354
00:55:54,900 --> 00:56:02,000
The basically does, you know, 4nt a index or should just say index,

1355
00:56:02,000 --> 00:56:04,000
equals Source, a count, right?

1356
00:56:05,400 --> 00:56:09,400
Zero index less than Swiss account index.

1357
00:56:09,400 --> 00:56:10,600
I'm do a loop over that guy.

1358
00:56:10,800 --> 00:56:14,200
And while we're in there we do desk plus equals.

1359
00:56:14,200 --> 00:56:19,100
I guess I should say well we'll do that in a second.

1360
00:56:19,200 --> 00:56:23,900
Sorry desk equals Source a plus plus this.

1361
00:56:23,900 --> 00:56:28,200
So we just basically move dust along copying and Source a and then we

1362
00:56:28,200 --> 00:56:31,200
need to copy and Source be like this Source be.

1363
00:56:31,200 --> 00:56:32,100
There we go.

1364
00:56:32,300 --> 00:56:34,400
Nothing particularly useful there.

1365
00:56:34,400 --> 00:56:35,000
We just do that.

1366
00:56:35,000 --> 00:56:35,400
And then,

1367
00:56:35,500 --> 00:56:36,500
That is the end of it.

1368
00:56:36,500 --> 00:56:41,000
But the at the very end we have to do something that looks like that

1369
00:56:41,000 --> 00:56:42,700
to insert the null Terminator, right?

1370
00:56:42,700 --> 00:56:45,400
Because all strings in C and in a null Terminator.

1371
00:56:45,800 --> 00:56:47,300
So we have to insert that null there.

1372
00:56:47,900 --> 00:56:49,900
And so that should be basically it.

1373
00:56:49,900 --> 00:56:53,600
Now, the question is, of course whether the null Terminator already

1374
00:56:53,600 --> 00:56:56,600
exists in these, when we get the size of, I think it does.

1375
00:56:57,000 --> 00:56:59,800
So technically this guy,

1376
00:57:00,200 --> 00:57:04,700
This this guy right here has to be a minus 1 because we don't want to

1377
00:57:04,700 --> 00:57:05,800
copy the null Terminator.

1378
00:57:05,800 --> 00:57:08,400
We could we, you know, if we wanted to copy meal Terminator, we would

1379
00:57:08,400 --> 00:57:09,200
but we got to get rid of that.

1380
00:57:09,200 --> 00:57:12,600
So we can just copy not the null Terminator part of these so that they

1381
00:57:12,600 --> 00:57:16,600
will can cat together and I guess, technically, we could have if you

1382
00:57:16,600 --> 00:57:20,500
wanted to be kind of weird and Sly, I actually could do this.

1383
00:57:20,600 --> 00:57:23,600
I don't think this is a particularly good idea, but you could just let

1384
00:57:23,600 --> 00:57:27,000
it copy, the null Terminator out of this one.

1385
00:57:27,300 --> 00:57:28,800
So that that would end it.

1386
00:57:29,200 --> 00:57:29,900
It's a

1387
00:57:30,000 --> 00:57:32,400
So creepy and I don't think that's particularly good idea.

1388
00:57:32,400 --> 00:57:34,300
So I'm going to say let's just not copy null Terminator.

1389
00:57:34,300 --> 00:57:35,100
No wouldn't matter.

1390
00:57:35,100 --> 00:57:37,300
We could add we'd end up a tune all Terminators and that'd be fine.

1391
00:57:37,600 --> 00:57:40,300
So the only thing this doesn't do now right now is doesn't actually

1392
00:57:40,300 --> 00:57:41,700
check for overflow in desk.

1393
00:57:41,700 --> 00:57:46,400
But I think it's actually borrowing a stupid mistakes, which usually

1394
00:57:46,700 --> 00:57:48,800
one does make in these particular circumstances.

1395
00:57:49,200 --> 00:57:50,100
Let's take a look here.

1396
00:57:50,100 --> 00:57:51,900
Let's run in there real quick.

1397
00:57:52,500 --> 00:57:54,300
So inside our first call here.

1398
00:57:54,300 --> 00:57:57,600
We've got Source a and we've got Source be.

1399
00:57:57,600 --> 00:57:58,800
There we go Source.

1400
00:57:59,500 --> 00:57:59,900
A

1401
00:58:00,000 --> 00:58:04,600
Out Source, be count, looks fine to me.

1402
00:58:04,600 --> 00:58:08,200
And then we've got our discount and are dest, looks fine.

1403
00:58:08,200 --> 00:58:09,500
So we start copying in.

1404
00:58:09,500 --> 00:58:16,200
There we go through these two copies, or say, go through these Copy

1405
00:58:16,200 --> 00:58:23,300
Source, be do the null termination and out become we then have our

1406
00:58:23,300 --> 00:58:28,300
temp game, code DOL, full path.

1407
00:58:29,900 --> 00:58:35,100
Oops, we didn't do that one yet Source, its source game code, dll,

1408
00:58:35,100 --> 00:58:36,300
full path.

1409
00:58:36,700 --> 00:58:38,700
And Hey, look, it's the path that we wanted.

1410
00:58:39,000 --> 00:58:45,100
We do the same thing again, and it is the temp game code.

1411
00:58:46,000 --> 00:58:47,900
Dll full path as well.

1412
00:58:48,700 --> 00:58:49,700
And that is correct.

1413
00:58:49,700 --> 00:58:53,800
So now in theory this actually will work.

1414
00:58:54,100 --> 00:58:57,700
I think, let's take a look now and see if it did the right thing.

1415
00:58:57,700 --> 00:58:59,800
So we are running it in the original location.

1416
00:59:00,000 --> 00:59:05,800
And now if I go into the build directory, let's take a look and see if

1417
00:59:05,800 --> 00:59:06,800
it actually did it.

1418
00:59:07,100 --> 00:59:09,600
So, it did create produce the handmade temp or at least we think it

1419
00:59:09,600 --> 00:59:09,800
did.

1420
00:59:09,800 --> 00:59:11,600
Let's see if that's the right time 859.

1421
00:59:11,600 --> 00:59:12,800
Yes, that is the right time.

1422
00:59:13,100 --> 00:59:16,700
And so now I should be able to do the stuff that we were doing before

1423
00:59:16,700 --> 00:59:21,600
I go in here and I change us back to our green like this.

1424
00:59:21,800 --> 00:59:23,900
Do the build and let's see.

1425
00:59:23,900 --> 00:59:24,800
And it is great again.

1426
00:59:24,800 --> 00:59:27,200
So I think we are totally good to go now.

1427
00:59:27,900 --> 00:59:29,600
Not not.

1428
00:59:29,900 --> 00:59:33,700
Really particularly hard, but I got to drop it to do in here because

1429
00:59:33,700 --> 00:59:36,900
we ran out of time before we did dest bounds checking.

1430
00:59:36,900 --> 00:59:40,500
And again, we don't need to check the bounds because this is debug

1431
00:59:40,500 --> 00:59:43,900
code, but we might as well implemented properly.

1432
00:59:44,400 --> 00:59:49,700
Alright, that is the end of that.

1433
00:59:49,700 --> 00:59:54,500
Now I have a new system for doing questions today that I hope will

1434
00:59:54,500 --> 00:59:54,800
work.

1435
00:59:54,800 --> 00:59:58,000
I don't know if it will work properly or not.

1436
00:59:58,400 --> 00:59:59,800
I just I just I'm hoping

1437
01:00:00,000 --> 01:00:00,900
Will work properly.

1438
01:00:01,500 --> 01:00:02,200
Let me see here.

1439
01:00:02,200 --> 01:00:03,500
I got to get something.

1440
01:00:04,000 --> 01:00:07,200
I have to just for a second quickly.

1441
01:00:07,200 --> 01:00:11,400
Switch over to this machine because I forgot to set it up before I

1442
01:00:11,400 --> 01:00:14,000
actually came on the stream here.

1443
01:00:14,100 --> 01:00:17,200
Alright, so let's go and set this up.

1444
01:00:17,200 --> 01:00:18,500
What I tried to make something.

1445
01:00:18,500 --> 01:00:20,200
I was having trouble, keeping track of questions.

1446
01:00:20,200 --> 01:00:23,400
So I tried to make something that would be a little bit easier for

1447
01:00:23,400 --> 01:00:23,800
that.

1448
01:00:23,800 --> 01:00:24,300
Okay.

1449
01:00:24,600 --> 01:00:27,200
So you saw what we did.

1450
01:00:29,000 --> 01:00:29,800
All we were doing today.

1451
01:00:30,000 --> 01:00:32,400
Is basically cleaning up our code from yesterday to make it so that

1452
01:00:32,400 --> 01:00:35,400
it's instantaneous now and that it works in no matter what directory,

1453
01:00:35,400 --> 01:00:37,900
we start our game in, we accomplished both of those.

1454
01:00:37,900 --> 01:00:42,000
There's still one more thing I want to do for doing this sort of Live

1455
01:00:42,000 --> 01:00:43,800
code editing thing, but we are in really good shape.

1456
01:00:43,800 --> 01:00:49,100
Now, I'm pretty actually excited about this because this is going to

1457
01:00:49,100 --> 01:00:52,500
be probably one of the first times I've ever had this working on a

1458
01:00:52,500 --> 01:00:56,700
game as I was developing before the last time I did a game was before

1459
01:00:57,900 --> 01:00:59,900
I had really thought to do this.

1460
01:01:00,800 --> 01:01:03,900
For some reason, it was a long time ago was like in 2005.

1461
01:01:03,900 --> 01:01:05,100
So it's like 10 years ago.

1462
01:01:05,800 --> 01:01:07,800
And since then I hadn't really ever thought to do it.

1463
01:01:07,800 --> 01:01:09,900
And so in a game where you're tweaking lot of stuff, I think this is

1464
01:01:09,900 --> 01:01:10,800
going to be pretty awesome.

1465
01:01:11,000 --> 01:01:13,900
It seems to be working pretty well, but there's a couple of things

1466
01:01:13,900 --> 01:01:15,100
that I want to do to it.

1467
01:01:15,600 --> 01:01:18,800
That we can do that, we'll do tomorrow, but I think we're in pretty

1468
01:01:18,800 --> 01:01:19,200
good shape.

1469
01:01:19,200 --> 01:01:20,700
Now, everything seems to be working relatively.

1470
01:01:20,700 --> 01:01:23,300
Well, so let's go ahead and go to the questions.

1471
01:01:23,300 --> 01:01:27,600
Please put Senior ettore in the question somewhere, so I can see it.

1472
01:01:27,600 --> 01:01:29,800
And please keep the questions, two things that happened on to

1473
01:01:29,900 --> 01:01:31,700
Add a stream or in previous streams.

1474
01:01:31,900 --> 01:01:34,900
Nothing about future streams because we will get there when we get

1475
01:01:34,900 --> 01:01:35,300
there.

1476
01:01:35,500 --> 01:01:36,700
So let's take a look here.

1477
01:01:39,400 --> 01:01:40,900
Let's take a look.

1478
01:01:45,600 --> 01:01:49,500
Okay, so case basically what I've learned is that my question thing is

1479
01:01:49,500 --> 01:01:50,900
still not quite right.

1480
01:01:53,300 --> 01:01:55,100
I forgot to do one part of it.

1481
01:01:56,700 --> 01:01:57,500
Terrible.

1482
01:01:58,000 --> 01:01:59,200
All right, well,

1483
01:02:02,900 --> 01:02:05,100
Next time tomorrow.

1484
01:02:05,100 --> 01:02:06,100
I will remember the thing.

1485
01:02:06,100 --> 01:02:07,900
I forgot to write in my question thing.

1486
01:02:10,600 --> 01:02:12,100
You didn't see it.

1487
01:02:12,500 --> 01:02:16,600
But there is a shame Al going on on my other computer.

1488
01:02:16,600 --> 01:02:19,600
Ladies and gentlemen, that is unfortunate.

1489
01:02:20,600 --> 01:02:22,100
All right, questions.

1490
01:02:23,300 --> 01:02:24,100
Let's see.

1491
01:02:25,300 --> 01:02:28,000
How do you manage to time your coding so perfectly?

1492
01:02:28,000 --> 01:02:29,500
I don't I just stop coding.

1493
01:02:29,500 --> 01:02:31,100
When we run out of time at whatever the thing.

1494
01:02:31,100 --> 01:02:31,400
We're on.

1495
01:02:31,400 --> 01:02:32,500
We've always got more things.

1496
01:02:32,500 --> 01:02:33,200
We could do.

1497
01:02:34,600 --> 01:02:35,300
You mentioned yesterday.

1498
01:02:35,300 --> 01:02:37,500
You have something you want to address from previous day's but you

1499
01:02:37,500 --> 01:02:38,000
never did.

1500
01:02:38,000 --> 01:02:38,300
Yes.

1501
01:02:38,300 --> 01:02:40,500
I've got a notebook full of things when we're done.

1502
01:02:40,900 --> 01:02:42,200
I want to do this because it was fun.

1503
01:02:42,200 --> 01:02:46,600
We got some other to dues to finish up when we are done with this.

1504
01:02:47,000 --> 01:02:49,800
So after tomorrow, we'll go back and do some of the things that are on

1505
01:02:49,800 --> 01:02:50,200
the notebook.

1506
01:02:50,400 --> 01:02:53,700
Just clean up stuff, you know, Thursday and Friday will basically just

1507
01:02:53,700 --> 01:02:57,100
be cleaning up stuff in preparation for Monday of next week.

1508
01:02:57,300 --> 01:02:59,800
I'm officially calling it done on the win32 platform layer.

1509
01:03:00,000 --> 01:03:02,900
I just, you know, like I said, what?

1510
01:03:03,100 --> 01:03:06,000
I just want to do something fun instead of moving right on to the game

1511
01:03:06,000 --> 01:03:09,000
code and and pretending when 32 never existed which will be fun.

1512
01:03:09,000 --> 01:03:12,000
But I wanted to do some fun stuff with win32 first so that people

1513
01:03:12,200 --> 01:03:14,200
didn't think it was all bad.

1514
01:03:14,900 --> 01:03:16,600
It is annoying to program platform layers.

1515
01:03:16,600 --> 01:03:17,200
It's true.

1516
01:03:17,400 --> 01:03:19,200
Once you do it you don't do it again, right?

1517
01:03:19,200 --> 01:03:22,100
You do it once and you kind of like have it and you use it, but

1518
01:03:23,400 --> 01:03:25,700
I want to show you that there are some cool things you can do with it.

1519
01:03:28,900 --> 01:03:30,200
Let's see here.

1520
01:03:31,900 --> 01:03:33,500
Will this capability be in the shipping game?

1521
01:03:33,500 --> 01:03:35,300
Or will it only be for debugging?

1522
01:03:35,600 --> 01:03:37,400
Well, we'll leave it in the shipping game.

1523
01:03:37,900 --> 01:03:41,400
Probably, as an option like we can leave it as like a - switch what

1524
01:03:41,400 --> 01:03:44,400
you could say, you know, go ahead and do it, but I don't know.

1525
01:03:44,500 --> 01:03:47,200
There's really no point in leaving it in the in the in the shipping

1526
01:03:47,200 --> 01:03:49,900
game because in order to use it you have to be able to build from the

1527
01:03:49,900 --> 01:03:52,900
source code and if you're building from the source code, then you

1528
01:03:52,900 --> 01:03:55,900
could just turn it on yourself in the bill that you use.

1529
01:03:55,900 --> 01:03:57,800
So we really don't need to ship the commercial.

1530
01:03:57,800 --> 01:04:01,300
Executable doesn't need to be built with it on because if you were

1531
01:04:01,300 --> 01:04:01,500
going

1532
01:04:01,600 --> 01:04:02,100
Play with it.

1533
01:04:02,100 --> 01:04:04,800
You would already be building your own dll so I don't know.

1534
01:04:05,400 --> 01:04:08,800
I don't think we need to ship it in the executable will leave it in

1535
01:04:08,800 --> 01:04:09,500
the source code though.

1536
01:04:09,500 --> 01:04:12,900
So anyone who starts playing around with the source code can do it?

1537
01:04:16,000 --> 01:04:17,200
Does the reload of the dll?

1538
01:04:17,200 --> 01:04:18,500
Reset the game entirely?

1539
01:04:18,600 --> 01:04:20,300
No, it doesn't reset it at all.

1540
01:04:21,800 --> 01:04:23,700
In fact, you saw you can see that.

1541
01:04:23,700 --> 01:04:24,700
It's already true.

1542
01:04:25,000 --> 01:04:25,600
Right?

1543
01:04:26,600 --> 01:04:28,100
I mean watch this thing right?

1544
01:04:28,400 --> 01:04:29,100
Watch it run.

1545
01:04:29,400 --> 01:04:31,000
You can see that it's got progress, right?

1546
01:04:31,000 --> 01:04:31,800
It's going in there.

1547
01:04:32,200 --> 01:04:36,200
And when we do this, when we rebuild, it does not miss a beat, right?

1548
01:04:36,300 --> 01:04:36,700
It's oops.

1549
01:04:36,700 --> 01:04:37,100
I got it.

1550
01:04:37,100 --> 01:04:37,400
Yes.

1551
01:04:37,600 --> 01:04:38,600
It does not miss a beat.

1552
01:04:38,600 --> 01:04:40,100
It stays exactly where it was.

1553
01:04:40,100 --> 01:04:42,000
There's no reset whatsoever.

1554
01:04:42,200 --> 01:04:42,700
Right?

1555
01:04:43,900 --> 01:04:44,700
So, the game,

1556
01:04:44,900 --> 01:04:46,100
Get reset in any way.

1557
01:04:46,100 --> 01:04:47,400
It's totally fine.

1558
01:04:47,400 --> 01:04:51,100
I can, if I was to do something like this, so, change the state.

1559
01:04:51,100 --> 01:04:53,800
Like that's are really all our game state that we have right now.

1560
01:04:54,600 --> 01:04:58,000
You'll notice when I, when I do that, it's exactly where it was.

1561
01:04:58,100 --> 01:04:59,700
So there's no resetting whatsoever.

1562
01:04:59,700 --> 01:05:03,100
We're totally live and it just works, right?

1563
01:05:07,200 --> 01:05:10,300
Let's see how much time have you spent planning this game prior to,

1564
01:05:10,300 --> 01:05:15,700
even starting day, one planning the game, not a whole lot.

1565
01:05:16,400 --> 01:05:19,800
I mean, I kind of thought through what I wanted to do for the game

1566
01:05:19,800 --> 01:05:24,000
that I thought would be a game that would allow us to focus on

1567
01:05:24,000 --> 01:05:25,800
learning to program games.

1568
01:05:25,800 --> 01:05:29,800
Well, so I picked a game that would have a lot of complexity in the

1569
01:05:29,800 --> 01:05:30,700
game code.

1570
01:05:30,800 --> 01:05:33,500
And that was the primary part of the planning that I did.

1571
01:05:33,700 --> 01:05:36,400
I did no planning for the code and I will never do anything.

1572
01:05:36,500 --> 01:05:37,400
Waiting for the code.

1573
01:05:37,400 --> 01:05:41,000
The most I will do is if I think something takes a long time like

1574
01:05:41,000 --> 01:05:42,600
those compiler switches and stuff.

1575
01:05:42,800 --> 01:05:44,400
When I did the day of compiler switches.

1576
01:05:44,400 --> 01:05:47,000
I knew that it would just be me looking at MSD and the entire time.

1577
01:05:47,100 --> 01:05:50,200
Sometimes I will go look at my old code and write down what the

1578
01:05:50,200 --> 01:05:51,100
compiler switches are.

1579
01:05:51,100 --> 01:05:54,900
Just so I don't have to spend as much time doing msdn, but I try very

1580
01:05:54,900 --> 01:05:57,900
hard to basically never do any planning for the stream.

1581
01:05:58,300 --> 01:05:59,900
So it's exactly as if

1582
01:06:00,100 --> 01:06:05,300
Sat down to program that day and had to figure this stuff out, right

1583
01:06:05,300 --> 01:06:05,700
then.

1584
01:06:05,900 --> 01:06:10,300
So I try not to do pre pro work because I feel like if I did pre pro

1585
01:06:10,300 --> 01:06:13,500
work, it wouldn't show you the real way.

1586
01:06:13,500 --> 01:06:14,500
I have to write the code.

1587
01:06:14,500 --> 01:06:17,900
It would show you a rehearsed fake way and I don't want this dream to

1588
01:06:17,900 --> 01:06:18,300
be that.

1589
01:06:18,300 --> 01:06:20,600
I want the stream to always be me doing it.

1590
01:06:20,900 --> 01:06:26,000
Straight out of my head without having the benefit of the pre pre warm

1591
01:06:26,000 --> 01:06:26,400
up.

1592
01:06:32,500 --> 01:06:33,500
Let's see.

1593
01:06:34,500 --> 01:06:38,200
So are you building the game into wait?

1594
01:06:41,100 --> 01:06:41,800
Let's see.

1595
01:06:43,000 --> 01:06:43,900
Let's see.

1596
01:06:43,900 --> 01:06:46,000
Are you building the gaming to sort of sections?

1597
01:06:46,000 --> 01:06:48,700
One being core, C++ section, and the other being a platform serves

1598
01:06:48,700 --> 01:06:49,000
section.

1599
01:06:49,000 --> 01:06:51,600
Yes, if you've been following along, you've seen us do that.

1600
01:06:52,000 --> 01:06:55,100
Basically, we're just about done with the platform section.

1601
01:06:55,100 --> 01:06:56,300
That's for win32.

1602
01:06:56,400 --> 01:06:58,100
As far as prototyping is concerned.

1603
01:06:58,200 --> 01:06:59,600
We basically finish that.

1604
01:06:59,600 --> 01:07:05,100
And so next week, we're moving on to the game core, which will still

1605
01:07:05,100 --> 01:07:06,400
touch the win32 layer.

1606
01:07:06,400 --> 01:07:09,700
Occasionally, if we want to change stuff that it does, like we're

1607
01:07:09,700 --> 01:07:11,900
like, oh we really want it to have passed this blonde.

1608
01:07:11,900 --> 01:07:12,700
It doesn't pass this.

1609
01:07:12,900 --> 01:07:16,000
We'll go change it, but we won't be really doing any more serious.

1610
01:07:16,000 --> 01:07:16,800
Win32 work.

1611
01:07:16,800 --> 01:07:18,600
Will always be doing game work from then on.

1612
01:07:21,800 --> 01:07:23,700
Since dlls aren't on OS X Linux.

1613
01:07:23,700 --> 01:07:25,300
How would we handle these in those environments?

1614
01:07:25,300 --> 01:07:29,100
They are actually, they're not called dlls, but both Linux and Mac OS,

1615
01:07:29,100 --> 01:07:31,600
X, have Dynamic libraries.

1616
01:07:31,700 --> 01:07:36,300
All major operating systems have Dynamic link libraries, so you can

1617
01:07:36,300 --> 01:07:36,900
just do it.

1618
01:07:41,200 --> 01:07:41,600
Beep.

1619
01:07:41,600 --> 01:07:44,300
Oh, did you list your qualifications in a previous stream?

1620
01:07:44,300 --> 01:07:45,600
If not, what are they?

1621
01:07:46,000 --> 01:07:49,700
I do not know what qualifications are as far as I know qualifications

1622
01:07:49,700 --> 01:07:50,400
for programming.

1623
01:07:50,400 --> 01:07:51,500
Is that you program?

1624
01:07:51,900 --> 01:07:52,400
Well,

1625
01:07:53,600 --> 01:07:56,800
And I think by watching the stream, you can tell whether I can or

1626
01:07:56,800 --> 01:07:57,900
can't in your opinion.

1627
01:07:59,500 --> 01:08:02,400
So, I don't know if there's any qualifications, certainly, there's a

1628
01:08:02,400 --> 01:08:07,600
lot of people who have done a lot of programming and are still bad at

1629
01:08:07,600 --> 01:08:07,700
it.

1630
01:08:07,700 --> 01:08:09,500
And there's people who haven't done a lot of programming in are good

1631
01:08:09,500 --> 01:08:09,700
at it.

1632
01:08:09,700 --> 01:08:11,800
So, I'm not sure what qualifications means as far as this is

1633
01:08:11,800 --> 01:08:12,400
concerned.

1634
01:08:13,100 --> 01:08:14,800
Why don't you use Dynamic buffer?

1635
01:08:14,800 --> 01:08:15,600
Allocation?

1636
01:08:17,700 --> 01:08:19,000
I'm not sure what that means.

1637
01:08:20,700 --> 01:08:24,200
We do Dynamic buffer allocation.

1638
01:08:25,200 --> 01:08:27,600
We have Dynamic buffer, allocation.

1639
01:08:29,100 --> 01:08:33,899
Basically in oops, that was not what I intended to do right there.

1640
01:08:34,399 --> 01:08:40,700
Basically if we go back to here and I do virtual a lock it's in win32

1641
01:08:40,700 --> 01:08:45,399
handmade so you can see here is where we allocate our our memory.

1642
01:08:46,100 --> 01:08:49,000
So that this is this asks for memory.

1643
01:08:49,600 --> 01:08:50,300
So we have to allocate

1644
01:08:50,500 --> 01:08:54,200
Patients currently in our code actually got more than that because we

1645
01:08:54,200 --> 01:08:57,800
do the bitmap as well and this read entire file.

1646
01:08:57,800 --> 01:08:59,800
So there's a couple places in the code where we dude.

1647
01:09:00,000 --> 01:09:02,000
Use dynamic allocations.

1648
01:09:09,600 --> 01:09:11,700
You said you were going to show us how to make a game.

1649
01:09:11,700 --> 01:09:14,600
Well, what are your qualifications for saying that you are making a

1650
01:09:14,600 --> 01:09:15,600
good game?

1651
01:09:15,600 --> 01:09:16,500
Code wise?

1652
01:09:18,000 --> 01:09:23,600
Well, I mean, I guess what I should say is, I do not know of any

1653
01:09:23,700 --> 01:09:28,700
absolute qualities of how to make how to certify that a game was

1654
01:09:28,700 --> 01:09:29,100
coded.

1655
01:09:29,100 --> 01:09:35,300
Well, so I can only give you what I consider to be game code that is

1656
01:09:35,500 --> 01:09:36,200
architected.

1657
01:09:36,200 --> 01:09:39,300
Cleanly, hopefully, as we go, you will.

1658
01:09:39,399 --> 01:09:41,399
See that there is good stuff.

1659
01:09:41,399 --> 01:09:45,399
Like we've already kind of done some things that I would say

1660
01:09:45,399 --> 01:09:48,600
illustrate that even though, we haven't even started the game

1661
01:09:48,600 --> 01:09:49,300
architecture yet.

1662
01:09:49,300 --> 01:09:51,500
You can also see that there's been good decisions that are made and

1663
01:09:51,500 --> 01:09:55,600
we'll see some more of that tomorrow actually, but for example, how

1664
01:09:55,600 --> 01:09:59,500
easy it was to do the dynamic code loading, a lot of that was because

1665
01:09:59,500 --> 01:10:02,000
I already did the game architecture correctly.

1666
01:10:02,000 --> 01:10:05,700
Like I showed you how to make the game architecture, just in the place

1667
01:10:05,700 --> 01:10:09,400
where interfaces the platform layer to be correct and in so doing.

1668
01:10:09,400 --> 01:10:11,400
Oh, doing it was trivial for us to make the code low.

1669
01:10:11,400 --> 01:10:11,900
Dynamically.

1670
01:10:11,900 --> 01:10:15,400
We didn't have to do a lot of crazy stuff to connect it up and back

1671
01:10:15,400 --> 01:10:18,800
and because we did the memory properly unloading and loading it just

1672
01:10:18,800 --> 01:10:20,200
works there as well.

1673
01:10:20,200 --> 01:10:22,800
So we're going to see tomorrow.

1674
01:10:22,800 --> 01:10:24,000
There's a bunch of other decisions.

1675
01:10:24,000 --> 01:10:27,700
I baked in here that I'm going to talk about because I basically can't

1676
01:10:27,700 --> 01:10:30,700
talk about decisions that I make until I show you why they're

1677
01:10:30,700 --> 01:10:31,500
important.

1678
01:10:31,500 --> 01:10:34,900
So I talked about decisions at the time when I can actually show you

1679
01:10:34,900 --> 01:10:36,300
the reasons why they were good.

1680
01:10:36,800 --> 01:10:39,200
And so hopefully it's very self evident as

1681
01:10:39,400 --> 01:10:43,200
Go why a lot of these decisions are important and why they're correct.

1682
01:10:43,500 --> 01:10:46,800
But if they're not obvious to you, you can always feel to ask.

1683
01:10:47,000 --> 01:10:49,500
You can always feel free to ask questions and I will try to explain

1684
01:10:49,800 --> 01:10:54,100
why it was a proper decision to make or why it was at least a good

1685
01:10:54,100 --> 01:10:54,600
decision.

1686
01:10:54,600 --> 01:10:58,800
Some decisions are not about right or wrong there about whether or not

1687
01:10:59,600 --> 01:11:01,500
you're prioritizing certain things.

1688
01:11:01,500 --> 01:11:05,800
And so I'll always try to be very clear to you about whether something

1689
01:11:05,800 --> 01:11:06,500
was a decision.

1690
01:11:06,500 --> 01:11:09,200
That's a six of one half-dozen of the other or whether

1691
01:11:09,300 --> 01:11:10,200
it was a decision.

1692
01:11:10,200 --> 01:11:12,500
That was like, you really should do it this way because we do it the

1693
01:11:12,500 --> 01:11:12,700
other way.

1694
01:11:12,700 --> 01:11:13,600
It's going to be bad.

1695
01:11:16,800 --> 01:11:19,800
Could you explain your method of compressed programming somewhere in

1696
01:11:19,800 --> 01:11:20,900
writing on the Forum?

1697
01:11:20,900 --> 01:11:27,600
Maybe, Yes, actually, I could so looks like someone already posted the

1698
01:11:27,600 --> 01:11:28,000
link.

1699
01:11:28,200 --> 01:11:30,500
So there's an entire blog post about that.

1700
01:11:31,000 --> 01:11:39,100
If you go to Mali rocket.com /, KC, my blog is on here and there's

1701
01:11:39,100 --> 01:11:43,000
this long series of working on the witness articles where I talk about

1702
01:11:43,000 --> 01:11:44,800
all the stuff that I was working on on the witness.

1703
01:11:46,000 --> 01:11:49,600
You know, like this one was the first one was a pretty popular one

1704
01:11:49,600 --> 01:11:53,600
where I talk about bullet, try doing some stuff to test the the

1705
01:11:53,600 --> 01:11:54,200
movement code.

1706
01:11:54,200 --> 01:11:56,700
I've got more of those articles that are men coming out.

1707
01:11:57,500 --> 01:11:59,800
Probably hopefully, early next year that are talking about

1708
01:12:00,000 --> 01:12:02,500
Final Collision system that I did on the witness, which I think is

1709
01:12:02,500 --> 01:12:04,300
actually pretty cool, but it's very odd.

1710
01:12:05,000 --> 01:12:06,700
Anyway, on here.

1711
01:12:06,700 --> 01:12:09,400
I believe there's a series that starts.

1712
01:12:09,900 --> 01:12:11,500
I think it's on 11.

1713
01:12:12,000 --> 01:12:12,400
Yeah.

1714
01:12:12,400 --> 01:12:17,700
So basically this this work on the witness part 11 from here on is all

1715
01:12:17,700 --> 01:12:18,500
about that.

1716
01:12:18,500 --> 01:12:21,400
That programming style that semantic impression programming style

1717
01:12:21,400 --> 01:12:23,500
where you kind of go through and you can see there's a bunch of

1718
01:12:23,500 --> 01:12:24,400
articles on it.

1719
01:12:25,700 --> 01:12:29,800
They go all the way through 15.

1720
01:12:30,000 --> 01:12:35,100
Sixteen Seventeen eighteen and even post a source code to it.

1721
01:12:35,200 --> 01:12:38,200
So yeah, you can go through those if you want to read about that style

1722
01:12:38,200 --> 01:12:40,500
of programming, so that's good.

1723
01:12:42,900 --> 01:12:45,800
When find first file is called, does Windows actually read anything

1724
01:12:45,800 --> 01:12:47,400
from the disk or is file system.

1725
01:12:47,400 --> 01:12:47,900
Meta stuff.

1726
01:12:47,900 --> 01:12:48,300
Kept in.

1727
01:12:48,300 --> 01:12:48,700
Ram.

1728
01:12:48,700 --> 01:12:50,000
Usually it's kept in Ram.

1729
01:12:51,200 --> 01:12:53,600
So it shouldn't have to actually hit the disc to answer that.

1730
01:12:53,600 --> 01:12:57,400
Maybe the first time it does like on Startup if that was cold, but it

1731
01:12:57,400 --> 01:12:58,700
should be after that.

1732
01:12:58,700 --> 01:13:01,500
It's cash, so it should be fine and it shouldn't cost anything.

1733
01:13:06,800 --> 01:13:07,600
One way to abuse.

1734
01:13:07,600 --> 01:13:11,100
The fact the game code is in a different dll is to do a Doom 3 star

1735
01:13:11,100 --> 01:13:13,900
release, where the dll part is open for modders and modding tools.

1736
01:13:13,900 --> 01:13:15,100
Well just to point out though.

1737
01:13:15,100 --> 01:13:16,800
This game comes with a full source code.

1738
01:13:17,100 --> 01:13:21,500
So modding isn't really a concern that we have because basically

1739
01:13:21,600 --> 01:13:24,400
people will be able to shift their own executables.

1740
01:13:24,600 --> 01:13:25,100
Right?

1741
01:13:25,600 --> 01:13:29,400
So basically you'll be able to just like, here's a new executable

1742
01:13:29,900 --> 01:13:30,400
will.

1743
01:13:30,600 --> 01:13:33,100
I'll try to do something when we actually ship the game.

1744
01:13:33,100 --> 01:13:36,400
But it basically says the game and its content are

1745
01:13:36,600 --> 01:13:42,700
Rated but anyone who buys the game, has the right to send executables

1746
01:13:42,700 --> 01:13:45,800
or post executables for the game, just the executable or something

1747
01:13:45,800 --> 01:13:46,100
like that.

1748
01:13:46,100 --> 01:13:48,700
So that people can trade their own executables, if they want to.

1749
01:13:49,800 --> 01:13:52,100
So, we'll figure something out.

1750
01:13:52,100 --> 01:13:52,400
I don't know.

1751
01:13:52,400 --> 01:13:54,800
What will, how will do it, but we'll figure something out.

1752
01:13:54,800 --> 01:13:57,600
So that basically the same sort of stuff is possible with the modding.

1753
01:14:01,800 --> 01:14:04,800
Let's see, one common theme in these videos is that you shouldn't

1754
01:14:04,800 --> 01:14:07,300
clean up OS objects or memory on shutdown, but OS objects will

1755
01:14:07,300 --> 01:14:10,200
presumably need to be cleaned up on dll reload, correct?

1756
01:14:10,400 --> 01:14:21,800
No, so basically our dll doesn't talk to the operating system.

1757
01:14:21,900 --> 01:14:23,600
And that's a crucial thing to understand.

1758
01:14:23,600 --> 01:14:25,800
The dll is our game code.

1759
01:14:26,000 --> 01:14:30,100
So it does not have the ability to nor will we ever give it the

1760
01:14:30,100 --> 01:14:30,400
ability?

1761
01:14:30,600 --> 01:14:36,800
T to handle operating system objects, so there will be no clean up on

1762
01:14:37,100 --> 01:14:38,400
on clothes and reload.

1763
01:14:41,500 --> 01:14:42,300
If that makes sense.

1764
01:14:47,200 --> 01:14:48,400
Not seeing any other questions.

1765
01:14:48,400 --> 01:14:48,600
Are there.

1766
01:14:48,600 --> 01:14:50,100
Any questions that I missed?

1767
01:14:50,900 --> 01:14:52,900
I don't things think.

1768
01:14:52,900 --> 01:14:53,600
So.

1769
01:14:54,500 --> 01:14:55,800
I wish you had a subscriber button.

1770
01:14:55,800 --> 01:14:56,600
This is awesome.

1771
01:14:56,600 --> 01:14:56,800
Are we?

1772
01:14:56,800 --> 01:14:57,900
In Q&A time right now?

1773
01:14:57,900 --> 01:14:58,400
We're still coding.

1774
01:14:58,400 --> 01:14:59,600
We are in Q&A time.

1775
01:15:00,200 --> 01:15:01,200
I do have.

1776
01:15:01,300 --> 01:15:05,600
So I talked to Twitch about being coming a partner.

1777
01:15:05,600 --> 01:15:09,900
And unfortunately, I can't sign the contract that they have.

1778
01:15:10,100 --> 01:15:14,200
Because their contract says that content has to be exclusive to Twitch

1779
01:15:14,200 --> 01:15:15,200
for 24 hours.

1780
01:15:15,500 --> 01:15:17,800
And I upload the videos to YouTube immediately.

1781
01:15:17,800 --> 01:15:19,400
So people can follow along with them.

1782
01:15:20,300 --> 01:15:24,600
So I couldn't sign the partner contract, just because of the weight,

1783
01:15:24,600 --> 01:15:25,200
which does things.

1784
01:15:25,200 --> 01:15:29,800
So I couldn't, I can't put a subscriber button.

1785
01:15:30,000 --> 01:15:32,700
So I apologize for people who want us to Cairo and I can't do that.

1786
01:15:33,200 --> 01:15:33,900
But I did.

1787
01:15:33,900 --> 01:15:36,300
There is, if you go to handmade here to, or if you just want to

1788
01:15:36,300 --> 01:15:37,500
contribute to the series.

1789
01:15:37,800 --> 01:15:41,000
There is a patreon link a lot of PPL at were asking for this.

1790
01:15:41,000 --> 01:15:44,300
If you go there, there's a way that you can sign up to just, you know,

1791
01:15:44,500 --> 01:15:48,400
pledge something for every month that I output the video series.

1792
01:15:49,600 --> 01:15:52,100
So if you're looking for a way to support the series, you still can do

1793
01:15:52,100 --> 01:15:53,100
it to subscribe to the series.

1794
01:15:53,100 --> 01:15:54,100
Basically you still can do it.

1795
01:15:54,100 --> 01:15:55,400
But I'm sorry.

1796
01:15:55,900 --> 01:15:58,100
I apologize to people who want the subscription button.

1797
01:15:58,100 --> 01:15:59,900
I can't do that because

1798
01:16:01,600 --> 01:16:05,000
Basically, I want the videos, the videos have to be in a permanent

1799
01:16:05,000 --> 01:16:05,500
location.

1800
01:16:05,500 --> 01:16:08,400
So they can't just exist on Twitch because twitch clears them after 60

1801
01:16:08,400 --> 01:16:09,400
days or something like that.

1802
01:16:10,300 --> 01:16:14,100
So I have to have a permanent location where people can go to get the

1803
01:16:14,100 --> 01:16:14,400
videos.

1804
01:16:14,400 --> 01:16:19,300
And so that the the episode guide which works off of YouTube can and

1805
01:16:19,300 --> 01:16:23,100
often from a location can be there and I don't want to delay posting

1806
01:16:23,100 --> 01:16:26,400
the YouTube for a day because there's a lot of people who work on it

1807
01:16:26,400 --> 01:16:28,600
like within just a couple hours of being posted.

1808
01:16:28,600 --> 01:16:29,800
So I just

1809
01:16:29,900 --> 01:16:32,200
has made the Judgment call that I felt like, you know, I mean, it's

1810
01:16:32,200 --> 01:16:35,200
not I don't I don't think to which generates a lot of revenue for a

1811
01:16:35,200 --> 01:16:38,000
stream like this one could or anything anyway, so I felt like it was

1812
01:16:38,000 --> 01:16:42,300
just like it didn't really matter that much and I'd rather give people

1813
01:16:42,300 --> 01:16:45,100
the files as soon as possible that just seemed like a senior decision.

1814
01:16:46,000 --> 01:16:48,400
So again, I apologize people who wanted to subscribe button.

1815
01:16:50,100 --> 01:16:52,800
I just I felt like it was easier to just do it this way and have a

1816
01:16:52,800 --> 01:16:54,200
separate place where you could donate.

1817
01:16:54,400 --> 01:16:56,300
So that's what that's what ended up happening.

1818
01:17:03,800 --> 01:17:05,000
Let's see.

1819
01:17:10,000 --> 01:17:13,300
Firefly says, are we going to see the process of Designing the game to

1820
01:17:13,300 --> 01:17:15,400
as in the game concept rather than the code?

1821
01:17:17,600 --> 01:17:23,800
No, and the reason for that is not because I don't want to show it but

1822
01:17:23,800 --> 01:17:27,200
it's actually just because I am not really a game designer.

1823
01:17:28,100 --> 01:17:32,700
So the process of Designing the game, I don't feel like

1824
01:17:33,900 --> 01:17:38,500
I don't want to present the game designing part of this series as

1825
01:17:38,500 --> 01:17:42,200
being an educational thing because I don't really want people to learn

1826
01:17:42,200 --> 01:17:43,900
their game design skills from me.

1827
01:17:44,200 --> 01:17:48,100
I think you want to learn your game design skills from like John, or

1828
01:17:48,100 --> 01:17:51,800
someone else who's like, a really great game designer, who's designed,

1829
01:17:51,800 --> 01:17:53,100
a lot of great games.

1830
01:17:53,900 --> 01:17:59,100
I am specifically selecting the game design for this game to be about

1831
01:17:59,100 --> 01:17:59,800
what we can do.

1832
01:18:00,000 --> 01:18:02,500
That creates a lot of code complexity.

1833
01:18:02,700 --> 01:18:08,100
And so I want the game to be driven by how do we add that complexity

1834
01:18:08,100 --> 01:18:11,900
in that forces us to do good work in the code.

1835
01:18:13,700 --> 01:18:17,400
And that is really the direction that we're going with that because

1836
01:18:17,400 --> 01:18:19,600
that's something that I feel qualified to do.

1837
01:18:19,700 --> 01:18:23,700
Whereas, if this game, if this stream were about designing a game, I

1838
01:18:23,700 --> 01:18:25,600
feel like you would want someone.

1839
01:18:25,700 --> 01:18:28,000
I mean, I have 30 years of experience programming.

1840
01:18:28,300 --> 01:18:29,500
I have hardly any experience.

1841
01:18:30,000 --> 01:18:31,600
Shining games, right?

1842
01:18:31,900 --> 01:18:35,600
So I feel like it would just be a bad idea to go.

1843
01:18:35,800 --> 01:18:39,000
The point of this stream is to design a great game and let's focus on

1844
01:18:39,000 --> 01:18:43,600
designing the game because I just don't feel like I have the kind of

1845
01:18:43,600 --> 01:18:45,300
experience necessary to do that.

1846
01:18:45,400 --> 01:18:50,100
I may look into it or I may be able to design a good game here, just

1847
01:18:50,100 --> 01:18:52,500
because I have a lot of experience with games.

1848
01:18:52,700 --> 01:18:55,300
And the game design is not crazy.

1849
01:18:55,300 --> 01:18:56,000
Far out there.

1850
01:18:56,000 --> 01:18:59,100
It's not like we're designing, some new kind of genre or whatever.

1851
01:18:59,400 --> 01:18:59,800
So,

1852
01:19:00,000 --> 01:19:04,600
The game design may go well and I hope it goes well, but even if it

1853
01:19:04,600 --> 01:19:09,500
does, I'm able to explain code coherently, I think because I have so

1854
01:19:09,500 --> 01:19:10,300
much experience.

1855
01:19:10,800 --> 01:19:14,700
I wouldn't be able to explain design in that same way because I'm not

1856
01:19:14,800 --> 01:19:15,800
a great game designer.

1857
01:19:15,800 --> 01:19:17,500
I don't have that background.

1858
01:19:17,800 --> 01:19:22,100
And so a lot of what I would say might be wrong, like even if the game

1859
01:19:22,100 --> 01:19:23,000
design is good.

1860
01:19:23,000 --> 01:19:26,600
I may not explain it in a way that allows you to do good game design,

1861
01:19:26,600 --> 01:19:27,100
right?

1862
01:19:27,500 --> 01:19:29,700
And so, I really feel like this.

1863
01:19:29,900 --> 01:19:31,300
I'm used to not be about that.

1864
01:19:31,300 --> 01:19:35,800
The scream is strictly about programming and hopefully someday, maybe

1865
01:19:35,800 --> 01:19:39,600
maybe if this series proves to be popular, which it has been so far,

1866
01:19:40,000 --> 01:19:42,700
you know, maybe someday there can be another type of stream.

1867
01:19:42,700 --> 01:19:46,300
That's by somebody else, who is a great game designer who will do the

1868
01:19:46,300 --> 01:19:47,500
equivalent of handmade hero.

1869
01:19:47,500 --> 01:19:48,900
But for design, right?

1870
01:19:50,700 --> 01:19:51,900
I can only hope that that's true.

1871
01:19:51,900 --> 01:19:53,600
I think I would learn a lot from that stream.

1872
01:19:54,400 --> 01:19:55,300
And so so I don't know.

1873
01:19:55,300 --> 01:19:57,800
So yeah, so all I can say is we aren't for this game.

1874
01:19:57,800 --> 01:20:01,500
I'm intentionally picking something that is not like a genre,

1875
01:20:01,500 --> 01:20:05,200
redefining kind of game design so that it can be relatively

1876
01:20:05,200 --> 01:20:06,800
straightforward in its core.

1877
01:20:07,000 --> 01:20:11,000
And then I'm just driving the design off of trying to make the world

1878
01:20:11,000 --> 01:20:13,800
and the items in the world and the monsters in the world and how you

1879
01:20:13,800 --> 01:20:18,300
interact with them very complicated, in terms of the possibilities of

1880
01:20:18,300 --> 01:20:19,000
what can happen.

1881
01:20:19,600 --> 01:20:23,100
That we will have to really do a good job, improving, and improving

1882
01:20:23,100 --> 01:20:24,800
our game, core to support all that.

1883
01:20:25,200 --> 01:20:27,100
So that is where the game design comes from.

1884
01:20:31,500 --> 01:20:35,100
Can you give some examples of some types of code changes to the game?

1885
01:20:35,100 --> 01:20:35,400
Dll?

1886
01:20:35,400 --> 01:20:36,000
That won't work?

1887
01:20:36,000 --> 01:20:36,900
Well with hot reloading.

1888
01:20:36,900 --> 01:20:37,400
Yes.

1889
01:20:38,000 --> 01:20:40,200
So changes to the code will always work.

1890
01:20:40,600 --> 01:20:44,400
Changes to the data layout will not.

1891
01:20:45,100 --> 01:20:49,600
So basically if we change a struct to reorder the parameters, it won't

1892
01:20:49,600 --> 01:20:50,200
work anymore.

1893
01:20:50,500 --> 01:20:50,800
Right?

1894
01:20:50,800 --> 01:20:52,900
Because the memory is static.

1895
01:20:53,000 --> 01:20:53,900
We load new code.

1896
01:20:53,900 --> 01:20:57,000
It's looking for the members of the struct in a new play, in different

1897
01:20:57,000 --> 01:20:59,800
places and it will fail because we'll get totally garbage.

1898
01:21:00,800 --> 01:21:04,600
There are things we can do that will improve that ability to make it

1899
01:21:04,600 --> 01:21:07,900
so that it could work across those changes in certain circumstances

1900
01:21:07,900 --> 01:21:10,000
depending on how much of a change you make.

1901
01:21:10,800 --> 01:21:13,600
But I don't know that we care about that.

1902
01:21:13,700 --> 01:21:15,200
So I may not.

1903
01:21:17,300 --> 01:21:18,800
I may not do those things.

1904
01:21:19,000 --> 01:21:20,500
I don't know how much we will care.

1905
01:21:20,600 --> 01:21:25,000
Will have to drive that decision based on what we see happening.

1906
01:21:25,100 --> 01:21:28,400
If it turns out that it proves to be a problem in a lot of times, we

1907
01:21:28,400 --> 01:21:31,800
would like to be able to have more flexibility there.

1908
01:21:32,200 --> 01:21:32,800
We can go.

1909
01:21:32,800 --> 01:21:35,200
It's actually a fairly heavy weight thing that has to happen in order

1910
01:21:35,200 --> 01:21:35,900
to make that work.

1911
01:21:35,900 --> 01:21:36,300
Okay.

1912
01:21:37,100 --> 01:21:39,700
So basically we could we could think about that and we could then at

1913
01:21:39,700 --> 01:21:43,200
that point say, all right, we're going to spend a month of time

1914
01:21:43,200 --> 01:21:45,500
because that's probably how long it would take given that I only get

1915
01:21:45,500 --> 01:21:47,000
an hour a night and I have to explain everything.

1916
01:21:47,200 --> 01:21:48,000
Probably take a while.

1917
01:21:48,000 --> 01:21:49,400
It's probably a week's worth of work.

1918
01:21:49,800 --> 01:21:50,800
Normally let's say

1919
01:21:52,800 --> 01:21:56,800
So it would take a long time for me to do that on stream.

1920
01:21:56,800 --> 01:21:58,700
So I'd rather not do it if we don't have to.

1921
01:21:58,800 --> 01:22:01,700
But if it turns out that that something that really looks like it

1922
01:22:01,700 --> 01:22:03,300
needs to happen and then it can happen.

1923
01:22:10,900 --> 01:22:12,700
Let's see.

1924
01:22:13,700 --> 01:22:17,500
Let's see what else we got on here.

1925
01:22:18,500 --> 01:22:19,600
Can I scroll back?

1926
01:22:19,600 --> 01:22:20,700
I can't scroll back.

1927
01:22:20,800 --> 01:22:21,900
I can't scroll back.

1928
01:22:22,000 --> 01:22:24,200
Don't got no, don't got no mouse.

1929
01:22:24,200 --> 01:22:26,900
I got to plug in a mouse to this laptop so I can scroll back.

1930
01:22:28,600 --> 01:22:29,500
Any other questions.

1931
01:22:29,500 --> 01:22:30,400
Do we have any other questions?

1932
01:22:30,400 --> 01:22:34,600
We have about five minutes left for Q&A.

1933
01:22:39,600 --> 01:22:42,800
Do you have any opinion on Louis such as using it for configuration or

1934
01:22:42,800 --> 01:22:44,200
more comprehensive scripting?

1935
01:22:44,200 --> 01:22:47,600
So I guess what I would say is, as I talked about last night, I don't

1936
01:22:47,600 --> 01:22:50,200
understand what the value added of Lua is you can dine in a

1937
01:22:50,300 --> 01:22:54,300
dynamically load, C and C is way more powerful than Lua and it has

1938
01:22:55,300 --> 01:22:57,300
that you can use the same debugger integrated.

1939
01:22:57,300 --> 01:23:00,700
All together II, don't know why anyone uses Lua.

1940
01:23:00,700 --> 01:23:02,100
I mean, I'm not trying to say that.

1941
01:23:02,100 --> 01:23:03,700
It's a bad idea to use Lua.

1942
01:23:04,200 --> 01:23:06,200
I'm just saying I don't understand this issue.

1943
01:23:06,200 --> 01:23:07,600
In the decision seems very

1944
01:23:07,800 --> 01:23:12,700
Odd to me because I don't understand what you perceive to be getting

1945
01:23:12,800 --> 01:23:13,500
by using glue.

1946
01:23:13,500 --> 01:23:16,000
It seems like all you did was make the language that you write your

1947
01:23:16,000 --> 01:23:19,100
game code in be worse than it was before.

1948
01:23:19,100 --> 01:23:21,800
It's like it's like a downgrade switching to Lua.

1949
01:23:23,400 --> 01:23:27,300
So, yeah, so I don't want a flat out, say, don't use Lua because I

1950
01:23:27,300 --> 01:23:30,500
don't know, maybe there's something that people are getting from it

1951
01:23:30,500 --> 01:23:35,300
that they like, but from my perspective, hot loading, C is superior to

1952
01:23:35,300 --> 01:23:36,500
Lou in all possible ways.

1953
01:23:38,600 --> 01:23:41,100
And if, for some reason, you thought there was something you needed a

1954
01:23:41,100 --> 01:23:41,400
loo.

1955
01:23:41,400 --> 01:23:44,200
I would say really, think about whether that's true.

1956
01:23:44,200 --> 01:23:47,800
And whether you can really say, for sure that it's true because like I

1957
01:23:47,800 --> 01:23:51,300
said, even if you wanted to make it so that you were, you could hop

1958
01:23:51,300 --> 01:23:54,100
load, see across data layout changes, you can do that.

1959
01:23:54,100 --> 01:23:58,100
And if this were a game where I was programming at full speed 40 hours

1960
01:23:58,100 --> 01:23:59,700
a week, I just do them.

1961
01:24:00,300 --> 01:24:02,000
They take a, like I said a couple, didn't you?

1962
01:24:02,100 --> 01:24:05,900
Maybe a week to do, it's not a big deal and then you're just done.

1963
01:24:09,000 --> 01:24:11,600
Do you think this method of hot reloading can be useful for developing

1964
01:24:11,600 --> 01:24:13,300
other types of software, besides a game?

1965
01:24:13,500 --> 01:24:15,700
Like, for example, a mobile app or business system?

1966
01:24:18,700 --> 01:24:19,200
Well.

1967
01:24:23,500 --> 01:24:27,000
May I don't know I don't just develop mobile apps or Business Systems.

1968
01:24:27,300 --> 01:24:28,000
It depends.

1969
01:24:28,200 --> 01:24:31,700
Basically, it depends on how long it takes you to get from starting

1970
01:24:31,700 --> 01:24:33,800
the app to the thing you want to tweak.

1971
01:24:35,900 --> 01:24:38,400
That's what this really does, is it cuts down that iteration time?

1972
01:24:38,400 --> 01:24:40,200
Because now you can just edit the code live.

1973
01:24:40,500 --> 01:24:44,200
If if you're spending a lot of time like shutting down, restarting the

1974
01:24:44,200 --> 01:24:47,700
app at every time you make a code change, then yes, this could help

1975
01:24:47,700 --> 01:24:51,200
you if you're not then it's just it doesn't really do anything for

1976
01:24:51,200 --> 01:24:51,500
you.

1977
01:24:51,700 --> 01:24:52,600
So, I don't know.

1978
01:24:52,800 --> 01:24:53,100
It's

1979
01:24:53,300 --> 01:24:54,000
Case-by-case basis.

1980
01:24:54,000 --> 01:24:55,900
You have to look and see if you thought that was true.

1981
01:25:01,900 --> 01:25:06,900
Do you think there's a case for dsls in some cases instead of using C

1982
01:25:06,900 --> 01:25:07,600
for the code?

1983
01:25:07,600 --> 01:25:14,300
Like for a I not really because I think there's domain-specific

1984
01:25:14,300 --> 01:25:14,900
languages.

1985
01:25:16,300 --> 01:25:19,200
Are only useful, if they're more powerful and expressive than C.

1986
01:25:20,400 --> 01:25:23,500
And so what I would say is why don't you just make your CB that

1987
01:25:23,500 --> 01:25:24,300
expressive, like, right?

1988
01:25:24,300 --> 01:25:26,600
The stuff that you're doing and see if he may be that expressive.

1989
01:25:27,500 --> 01:25:27,700
Now.

1990
01:25:27,700 --> 01:25:32,400
There are a bunch of things that I wish see would improve on, right?

1991
01:25:32,500 --> 01:25:33,900
There's tons of things I would do.

1992
01:25:33,900 --> 01:25:34,600
That would improve.

1993
01:25:34,600 --> 01:25:38,700
See and John blow right now is working on his new version.

1994
01:25:38,700 --> 01:25:41,300
That doesn't like he's doing that, right?

1995
01:25:41,500 --> 01:25:43,900
And so what I would say is if you were going to do a domain specific

1996
01:25:43,900 --> 01:25:45,600
language for your AI system,

1997
01:25:46,100 --> 01:25:47,300
Why think about it that way?

1998
01:25:47,600 --> 01:25:49,200
Think about what's wrong with see that?

1999
01:25:49,200 --> 01:25:52,300
You don't think you can write your AI in it and just improve see to

2000
01:25:52,300 --> 01:25:54,100
have those things, right?

2001
01:25:54,400 --> 01:25:57,300
Because all that time, that you spend just make a c preprocessor that

2002
01:25:57,300 --> 01:26:00,300
output C because then now you can use it for everything.

2003
01:26:00,300 --> 01:26:02,100
Like, why don't you want that power everywhere?

2004
01:26:02,400 --> 01:26:05,100
And so I don't think domain-specific languages are typically very

2005
01:26:05,100 --> 01:26:05,600
good.

2006
01:26:05,800 --> 01:26:07,500
I think you should just focus on.

2007
01:26:07,600 --> 01:26:09,600
What are the things you can't do in your language?

2008
01:26:09,600 --> 01:26:13,000
And if you're going to spend time making a new language, just make

2009
01:26:13,000 --> 01:26:15,500
that be the thing you actually program in, you know.

2010
01:26:19,700 --> 01:26:23,100
Panic says, one benefit of Lou is that you don't have to recompile it

2011
01:26:23,100 --> 01:26:26,600
all but neither do we really like I mean, I hit all M.

2012
01:26:26,600 --> 01:26:27,500
And it changes.

2013
01:26:27,700 --> 01:26:31,900
So it's basically like I could just bind the save key to also

2014
01:26:32,200 --> 01:26:36,100
recompile and we wouldn't know the difference between that, right.

2015
01:26:38,300 --> 01:26:38,600
I'm guess.

2016
01:26:38,600 --> 01:26:40,600
I'm people whose compile times are really huge.

2017
01:26:40,600 --> 01:26:41,700
Then that's true, but

2018
01:26:45,400 --> 01:26:46,100
Will the game engine?

2019
01:26:46,100 --> 01:26:48,100
Be mostly generic or tailored for this game?

2020
01:26:48,300 --> 01:26:51,300
Well, tailored for this game, obviously.

2021
01:26:54,200 --> 01:26:58,200
Yeah, it will be it'll support all the things that you need to support

2022
01:26:58,200 --> 01:26:59,800
for this game.

2023
01:27:00,200 --> 01:27:02,800
It's not going to be like trying to be like Unity or something.

2024
01:27:02,800 --> 01:27:04,300
That's like kind of an everything engine.

2025
01:27:09,400 --> 01:27:10,600
Let's see.

2026
01:27:12,300 --> 01:27:13,300
Let's see.

2027
01:27:14,600 --> 01:27:16,900
Any more on topic questions?

2028
01:27:18,200 --> 01:27:22,800
I don't think there are any more on topic questions, so I might switch

2029
01:27:22,800 --> 01:27:25,500
to off topic questions.

2030
01:27:28,900 --> 01:27:33,600
So, people are asking about larabee and Xenon, fee or Phi.

2031
01:27:33,600 --> 01:27:34,900
I don't know how you pronounce that.

2032
01:27:36,400 --> 01:27:37,500
So they're the same thing.

2033
01:27:37,500 --> 01:27:42,600
Obviously, Larrabee project is what turned into the Xenon fee, or Phi.

2034
01:27:43,600 --> 01:27:45,100
However, you want to say that.

2035
01:27:48,000 --> 01:27:53,900
So basically, I can't, I don't think I'm really allowed to talk too

2036
01:27:53,900 --> 01:27:57,900
much about that project because I was on that project so I probably

2037
01:27:57,900 --> 01:28:00,300
shouldn't talk about larabee and Xenon feet.

2038
01:28:00,400 --> 01:28:02,600
All I will say is I would have preferred it.

2039
01:28:02,600 --> 01:28:05,000
If that is the way graphics cards had gone permanently.

2040
01:28:05,300 --> 01:28:06,100
I would have preferred it.

2041
01:28:06,100 --> 01:28:10,900
If graphics cards were just programmable CPUs, that just had a lot of

2042
01:28:10,900 --> 01:28:12,000
in order cores on them.

2043
01:28:12,400 --> 01:28:12,800
So,

2044
01:28:16,000 --> 01:28:17,500
do I recommend C over C?

2045
01:28:17,500 --> 01:28:18,300
Plus plus?

2046
01:28:20,000 --> 01:28:24,700
No, I recommend using a few features of C++.

2047
01:28:24,900 --> 01:28:25,300
Basically.

2048
01:28:25,300 --> 01:28:27,300
I don't like most of the features of C++.

2049
01:28:27,300 --> 01:28:29,500
But there are a couple that I like, like, operator overloading and

2050
01:28:29,500 --> 01:28:30,500
function overloading.

2051
01:28:32,200 --> 01:28:36,800
So I feel like it's worth it usually to use C++ and just use it

2052
01:28:36,800 --> 01:28:42,400
lightly because basically, when I you know, a lot of times I will or

2053
01:28:42,400 --> 01:28:43,800
other people who are

2054
01:28:44,700 --> 01:28:49,300
It specifically kind of program in the way that I people who

2055
01:28:49,300 --> 01:28:52,700
programming the same style that I do often are disparaging a C++.

2056
01:28:52,700 --> 01:28:57,000
What were, what were disparaging of when we say C++ is bad, is really

2057
01:28:57,000 --> 01:28:59,400
that the way people use it is bad.

2058
01:29:01,800 --> 01:29:06,500
And the way people use it as bad and the language committee, the

2059
01:29:06,500 --> 01:29:09,400
changes that they make to see the way that they've made.

2060
01:29:10,600 --> 01:29:12,200
Improvements to the language.

2061
01:29:12,200 --> 01:29:14,800
Have been poorly thought-out and poorly executed.

2062
01:29:14,800 --> 01:29:15,300
Right?

2063
01:29:15,300 --> 01:29:20,200
So we're not trying to say that c is better than C++ because C is

2064
01:29:20,200 --> 01:29:24,200
really, mostly a subset of C plus plus, so it's usually better to use

2065
01:29:24,200 --> 01:29:27,500
C++ and then just not use a lot of its poorly thought-out features

2066
01:29:27,500 --> 01:29:30,600
just ignore them because you can still use the ones that do work.

2067
01:29:30,600 --> 01:29:31,200
Right?

2068
01:29:31,200 --> 01:29:36,000
And so usually the reason that we're so disparaging of C++ is because

2069
01:29:36,000 --> 01:29:40,500
we wish that the people who designs of us had had a clue because if

2070
01:29:40,600 --> 01:29:43,500
If people had had a clue, we would have had 30 years of great

2071
01:29:43,500 --> 01:29:47,500
modifications to C and C would be an amazing language today.

2072
01:29:47,500 --> 01:29:47,900
Instead.

2073
01:29:47,900 --> 01:29:52,600
What we got is mostly very poorly thought-out, oftentimes, almost

2074
01:29:52,600 --> 01:29:54,800
unusable a bad feature additions.

2075
01:29:55,000 --> 01:29:58,600
And as a result, most C++ programs are a mess because people try to

2076
01:29:58,600 --> 01:29:59,700
use those features in the way.

2077
01:29:59,700 --> 01:29:59,800
They

2078
01:30:00,000 --> 01:30:02,800
Intended, and they end up with code that's worse that if they've never

2079
01:30:02,800 --> 01:30:05,100
used that, they had never used the features at all.

2080
01:30:05,600 --> 01:30:07,100
What's worse is most people don't realize.

2081
01:30:07,100 --> 01:30:07,500
This is true.

2082
01:30:07,500 --> 01:30:11,200
They think that they've made progress but really their code compiles

2083
01:30:11,200 --> 01:30:11,900
slower.

2084
01:30:12,000 --> 01:30:17,200
Run slower is harder to read, has more bugs, is more lines of code.

2085
01:30:17,200 --> 01:30:19,600
Like everything is worse about it than if they just done the

2086
01:30:19,600 --> 01:30:21,800
equivalent without the C C++ feature.

2087
01:30:22,500 --> 01:30:24,500
And so, that's really that we're all the anger.

2088
01:30:24,500 --> 01:30:25,900
And the vitriol comes from.

2089
01:30:25,900 --> 01:30:28,600
I think I could speaking for myself.

2090
01:30:28,600 --> 01:30:29,800
I don't know if I can speak for other people.

2091
01:30:30,000 --> 01:30:32,200
Who don't like, see both laugh, that's really where it comes from.

2092
01:30:32,200 --> 01:30:33,800
Is this the mist potential?

2093
01:30:34,500 --> 01:30:36,800
We basically had a lot of people who didn't know how to do.

2094
01:30:36,800 --> 01:30:39,400
Good language design, iterating on.

2095
01:30:39,400 --> 01:30:42,500
See that's what produced C++ instead.

2096
01:30:42,500 --> 01:30:45,600
We had had great language designers who had done C++ instead of C.

2097
01:30:45,600 --> 01:30:47,500
We would have had an amazing language today.

2098
01:30:48,000 --> 01:30:50,300
And again, that's the thing that John Blow is trying to rectify right

2099
01:30:50,300 --> 01:30:50,600
now.

2100
01:30:50,600 --> 01:30:55,700
I highly recommend watching his stream naysayer 88.

2101
01:30:55,900 --> 01:30:58,900
He is like the one person right now who's actually working on trying

2102
01:30:58,900 --> 01:30:59,800
to build a better see

2103
01:31:00,000 --> 01:31:04,100
And I really hope that he succeeds because we could really use it.

2104
01:31:05,100 --> 01:31:08,400
And I think already, he's already his language is better than C++ has

2105
01:31:08,400 --> 01:31:12,000
even though C++ had 30 years of improvements.

2106
01:31:12,000 --> 01:31:14,100
So, yeah, I'm pretty hopeful.

2107
01:31:17,900 --> 01:31:18,800
Let's see.

2108
01:31:18,800 --> 01:31:21,200
As a beginning programmer, is Unity a good?

2109
01:31:21,200 --> 01:31:23,800
Start to develop some basic games.

2110
01:31:24,800 --> 01:31:25,100
I don't know.

2111
01:31:25,100 --> 01:31:26,300
I've never used Unity.

2112
01:31:28,300 --> 01:31:29,000
Probably.

2113
01:31:29,500 --> 01:31:33,100
I mean if you just want to make games and you don't care about

2114
01:31:33,100 --> 01:31:37,500
programming then like yeah, you know, maybe just Unity or unreal for

2115
01:31:37,500 --> 01:31:39,300
or one of those other game maker.

2116
01:31:39,300 --> 01:31:42,200
There's a lot of tools out there that you can use to just play around

2117
01:31:42,200 --> 01:31:43,200
with making a game.

2118
01:31:44,000 --> 01:31:46,900
If you care about programming and learning to program, I don't know

2119
01:31:46,900 --> 01:31:50,000
how useful those tools are because they opted to skate the programming

2120
01:31:50,000 --> 01:31:52,900
and what actually happens to a large extent and they may not be so

2121
01:31:52,900 --> 01:31:53,500
good for that.

2122
01:31:53,500 --> 01:31:56,200
So depends on what your goals are as what I would say.

2123
01:31:59,100 --> 01:32:01,900
You complain a lot about the windows API but clearly other platforms

2124
01:32:01,900 --> 01:32:02,600
aren't any better.

2125
01:32:02,700 --> 01:32:03,300
That is true.

2126
01:32:03,700 --> 01:32:05,200
I do not think other platforms are better.

2127
01:32:05,400 --> 01:32:09,000
What would your ideal, general purpose platform look like that's too

2128
01:32:09,000 --> 01:32:11,500
big of a topic and there's just so much to discuss there.

2129
01:32:12,800 --> 01:32:14,400
Sorry, it's a good question.

2130
01:32:14,400 --> 01:32:15,700
I just, it's too big.

2131
01:32:16,400 --> 01:32:18,700
We're there any personal products that you had done prior to

2132
01:32:18,700 --> 01:32:21,600
graduating high school college that came in handy, when looking for a

2133
01:32:21,600 --> 01:32:22,500
job.

2134
01:32:22,600 --> 01:32:24,300
How did you come to work at rad?

2135
01:32:25,000 --> 01:32:27,100
You can actually all of that is on.

2136
01:32:27,700 --> 01:32:31,700
If you go to the video archive, and you want to know the answer that

2137
01:32:31,700 --> 01:32:32,300
question.

2138
01:32:32,600 --> 01:32:36,700
If you go to the video archive on videos, all the way back.

2139
01:32:36,800 --> 01:32:37,600
Well, actually, you know, what?

2140
01:32:37,600 --> 01:32:38,300
Don't do that.

2141
01:32:38,300 --> 01:32:41,300
Don't do what I just said, instead click on news and forums.

2142
01:32:41,300 --> 01:32:42,500
I should probably update that video archive.

2143
01:32:42,600 --> 01:32:46,400
The go to episode guide, and on episode guide, click on this.

2144
01:32:46,400 --> 01:32:50,600
I think it's introducion Windows day 5 because this is the thing with

2145
01:32:50,600 --> 01:32:50,700
that.

2146
01:32:50,700 --> 01:32:52,400
Has the time jumps in it.

2147
01:32:53,000 --> 01:32:55,600
I'm pretty sure it was in here.

2148
01:32:55,600 --> 01:32:56,500
Was it in here?

2149
01:32:56,700 --> 01:32:58,600
Oh, no, you know, what was in the Q&A?

2150
01:32:58,600 --> 01:32:59,800
So the Q&A

2151
01:33:00,000 --> 01:33:00,900
Day 5, I think.

2152
01:33:00,900 --> 01:33:01,700
Is that it?

2153
01:33:02,300 --> 01:33:03,700
Let's see if it's down here.

2154
01:33:05,200 --> 01:33:05,500
Yeah.

2155
01:33:05,500 --> 01:33:06,000
Okay.

2156
01:33:06,300 --> 01:33:08,600
So if you scroll down here, you can see that.

2157
01:33:08,600 --> 01:33:12,600
They've actually the awesome people who do the handmade here episode

2158
01:33:12,600 --> 01:33:13,100
guide.

2159
01:33:13,800 --> 01:33:16,700
You can, you can go, which, by the way, if you go to this, thanks

2160
01:33:16,700 --> 01:33:17,000
page.

2161
01:33:17,000 --> 01:33:19,100
You can read a bunch of the people responsible for all this awesome

2162
01:33:19,100 --> 01:33:19,600
stuff.

2163
01:33:19,900 --> 01:33:24,600
Anyway, if you go on here, you can jump to basically, what's your life

2164
01:33:24,600 --> 01:33:25,000
story.

2165
01:33:25,000 --> 01:33:26,300
How did you learn programming?

2166
01:33:26,500 --> 01:33:29,200
And there's just honestly, it's like seriously a 30-minute thing.

2167
01:33:29,200 --> 01:33:29,800
That just tells you

2168
01:33:30,000 --> 01:33:30,600
Everything about that.

2169
01:33:30,600 --> 01:33:33,200
So, if you want to see that, it's recorded on there.

2170
01:33:33,200 --> 01:33:36,100
And it basically says what happened to me.

2171
01:33:43,800 --> 01:33:45,600
Do you think games can make use of concurrency?

2172
01:33:45,600 --> 01:33:47,600
And parallelism were than it is right now?

2173
01:33:48,200 --> 01:33:51,300
Well, yes and no, I mean a lot of game engines.

2174
01:33:51,300 --> 01:33:52,700
Now are getting pretty parallel.

2175
01:33:53,100 --> 01:33:54,300
So I don't know.

2176
01:33:54,300 --> 01:33:57,700
It depends on which it, depends on what specific game, you mean,

2177
01:33:57,700 --> 01:33:57,900
right?

2178
01:33:57,900 --> 01:34:00,500
Like some games, don't use it at all and some games, use it to a large

2179
01:34:00,500 --> 01:34:00,900
extent.

2180
01:34:00,900 --> 01:34:04,300
So, you know, six of one half dozen of the other.

2181
01:34:06,900 --> 01:34:09,500
Where can I find the song used in the YouTube trailer?

2182
01:34:11,100 --> 01:34:12,600
Well, I don't know if you can.

2183
01:34:12,700 --> 01:34:14,900
Basically it's a, it's a piece of music.

2184
01:34:14,900 --> 01:34:20,500
I licensed music for the game, and it's a piece of music that comes

2185
01:34:20,500 --> 01:34:22,900
with the license library that I did.

2186
01:34:23,000 --> 01:34:23,900
And so, I don't know.

2187
01:34:23,900 --> 01:34:27,300
I don't think, I don't know if you can get the song as just a song

2188
01:34:27,300 --> 01:34:27,900
that you buy.

2189
01:34:27,900 --> 01:34:29,700
I don't think it's like on iTunes or anything.

2190
01:34:29,700 --> 01:34:30,500
So, I'm sorry.

2191
01:34:31,700 --> 01:34:32,100
I don't know that.

2192
01:34:32,100 --> 01:34:33,500
There's anything you can do there.

2193
01:34:35,500 --> 01:34:38,300
Can you show how to set key bindings in emacs?

2194
01:34:38,300 --> 01:34:41,000
Sure, if you go in, well, I'm going to load mine.

2195
01:34:41,000 --> 01:34:43,700
But wherever yours is mines in the Miss directory.

2196
01:34:43,700 --> 01:34:44,100
Here.

2197
01:34:44,400 --> 01:34:47,300
If you go in there, there's basically like a bunch of lines.

2198
01:34:47,300 --> 01:34:51,700
You can see that look like this Define key, global map thing and

2199
01:34:51,700 --> 01:34:54,200
basically what you do is you put the key binding in here and then the

2200
01:34:54,200 --> 01:34:59,200
function you want to call in here and wacky that like back / e, just

2201
01:34:59,200 --> 01:35:00,000
means alt.

2202
01:35:00,100 --> 01:35:04,000
So if you want to do all you put that you can also see like if you

2203
01:35:04,100 --> 01:35:08,100
If you scan through here, you can see the syntax and other places like

2204
01:35:08,600 --> 01:35:13,400
backslash uppercase C is like for the for the control and for control

2205
01:35:13,400 --> 01:35:14,200
key and stuff.

2206
01:35:14,900 --> 01:35:18,300
There's also, this is an alternate syntax where you do bracket C Dash

2207
01:35:18,500 --> 01:35:19,200
a thing.

2208
01:35:19,500 --> 01:35:19,900
I don't know.

2209
01:35:19,900 --> 01:35:21,700
I don't, I don't know emacs.

2210
01:35:21,700 --> 01:35:24,700
That's but also, this is just like what worked for me to be able to

2211
01:35:24,700 --> 01:35:28,700
bind the file, you know, I don't even know if that's a good way to do

2212
01:35:28,700 --> 01:35:32,400
it and you can see, I have some keys Bound in C++ mode and other Keys

2213
01:35:32,400 --> 01:35:33,700
Bound in the global mode.

2214
01:35:34,300 --> 01:35:38,400
So, you can set them what you put in here for global map or C++ map is

2215
01:35:38,400 --> 01:35:39,400
just telling you like.

2216
01:35:39,400 --> 01:35:44,000
Oh, this is when that keyboard key binding Works, whether it's always

2217
01:35:44,000 --> 01:35:45,000
or just in C++.

2218
01:35:47,400 --> 01:35:50,000
What do I think of Blizzard is a game development company?

2219
01:35:50,400 --> 01:35:51,600
I've no idea.

2220
01:35:51,900 --> 01:35:53,300
I've never worked for blizzard.

2221
01:35:55,700 --> 01:35:56,500
Never work for blizzard.

2222
01:35:56,500 --> 01:35:57,900
Never even visited the offices.

2223
01:35:58,700 --> 01:35:59,800
I know some people who work.

2224
01:36:00,100 --> 01:36:01,500
But they work their long time ago.

2225
01:36:01,500 --> 01:36:03,900
Like Pat, Wyatt's a friend of mine?

2226
01:36:04,300 --> 01:36:05,200
Great guy started.

2227
01:36:05,200 --> 01:36:07,700
Arenanet same with Jeff strain.

2228
01:36:08,300 --> 01:36:10,100
I know those guys, they're great guys.

2229
01:36:10,400 --> 01:36:12,800
If the rest of blizzards like them, that's probably great.

2230
01:36:12,900 --> 01:36:13,500
I don't know.

2231
01:36:14,600 --> 01:36:18,400
Yeah, they went on to do like arenanet and then they did Undead Labs,

2232
01:36:18,400 --> 01:36:23,100
which is also here in Seattle, or we Nets across the water in

2233
01:36:23,100 --> 01:36:28,300
Bellevue, but basically, those guys are great and they're really good

2234
01:36:28,300 --> 01:36:29,100
at what they do.

2235
01:36:29,100 --> 01:36:29,800
And so I don't

2236
01:36:30,000 --> 01:36:32,800
Know if the rest of blizzards like them or you know, they were the

2237
01:36:32,800 --> 01:36:35,800
good people at blizzard and they left and now it's not I don't know.

2238
01:36:36,600 --> 01:36:40,300
But my only experience really with blizzard people was was knowing

2239
01:36:40,300 --> 01:36:44,500
them from way back when and and they're awesome people.

2240
01:36:46,800 --> 01:36:47,600
So, I don't know.

2241
01:36:47,900 --> 01:36:49,800
Yeah, if the rest of Brothers like them and it'd be awesome.

2242
01:36:49,800 --> 01:36:51,200
If it's not, then I don't know.

2243
01:36:58,100 --> 01:37:00,300
Perhaps this question is better suited for the forum's.

2244
01:37:00,300 --> 01:37:02,400
What guidance can you provide for newbie game?

2245
01:37:02,400 --> 01:37:05,100
Developers looking to find artists for their game projects.

2246
01:37:06,000 --> 01:37:07,200
Make money first.

2247
01:37:08,400 --> 01:37:12,400
As far as I know, like finding good artists involves paying for them.

2248
01:37:13,300 --> 01:37:17,300
I if you happen to look out in your friends, with someone who's a

2249
01:37:17,300 --> 01:37:19,600
really good artist and you want to go work on a game together.

2250
01:37:19,600 --> 01:37:20,400
That's great.

2251
01:37:21,100 --> 01:37:25,500
But if you want good, if you just want to like work with a good artist

2252
01:37:25,600 --> 01:37:26,400
you need to pay them.

2253
01:37:26,700 --> 01:37:27,600
So

2254
01:37:28,900 --> 01:37:32,700
You've got to have money, get funding is the really the way to do it.

2255
01:37:33,300 --> 01:37:35,300
And if not, then you're going to, you're going to have to befriend

2256
01:37:35,300 --> 01:37:35,800
someone for.

2257
01:37:35,800 --> 01:37:36,900
So It's Tricky.

2258
01:37:39,600 --> 01:37:41,800
You mentioned on stream, meta programming in c.

2259
01:37:41,800 --> 01:37:44,100
What does that look like been dying to know?

2260
01:37:44,900 --> 01:37:48,400
Well, this is this is since we're in off-topic land.

2261
01:37:48,400 --> 01:37:54,400
I mean, I can, it's really simple all meta.

2262
01:37:54,400 --> 01:37:54,800
Programming.

2263
01:37:54,800 --> 01:37:58,500
In c means is that you write a c program that right to see program.

2264
01:37:58,700 --> 01:38:02,700
So, you know, if you wanted to do it, you know, you open up

2265
01:38:02,700 --> 01:38:05,000
metaprogramming dot CPP, right?

2266
01:38:05,100 --> 01:38:08,600
And you have something that looks you know like this or whatever.

2267
01:38:11,600 --> 01:38:16,600
And you just output C code, you're like, hey, you know, I don't know.

2268
01:38:16,600 --> 01:38:21,700
This is my C file and I do enough open and it's like out dot CPP,

2269
01:38:21,700 --> 01:38:22,100
right?

2270
01:38:22,100 --> 01:38:23,300
And I do, right?

2271
01:38:23,300 --> 01:38:29,200
And then I do, you know, fprintf C file.

2272
01:38:31,200 --> 01:38:32,500
Int main.

2273
01:38:32,500 --> 01:38:33,300
N targe.

2274
01:38:33,300 --> 01:38:35,000
Seek a star star.

2275
01:38:35,000 --> 01:38:39,400
Argh be backslash, n right.

2276
01:38:39,900 --> 01:38:41,300
You know what I'm saying to you?

2277
01:38:42,000 --> 01:38:43,700
This this is all I'm talking about.

2278
01:38:43,700 --> 01:38:47,000
That's metaprogramming, metaprogramming is just writing a program that

2279
01:38:47,000 --> 01:38:50,900
outputs a program and that's it.

2280
01:38:50,900 --> 01:38:52,000
That's all I'm talking about.

2281
01:38:52,000 --> 01:38:55,900
So the way that I do things nowadays is I most of my code gets

2282
01:38:55,900 --> 01:38:56,400
outputted.

2283
01:38:56,400 --> 01:38:59,300
Well, not most but a fair degree of code, let's say,

2284
01:39:00,000 --> 01:39:03,400
Percent something like that gets outputted by a program that outputs

2285
01:39:03,400 --> 01:39:03,900
programs.

2286
01:39:03,900 --> 01:39:07,200
And the reason I do that is because C is just doesn't have a lot of

2287
01:39:07,200 --> 01:39:08,100
features that I need.

2288
01:39:08,100 --> 01:39:11,100
And so, what I do is I Implement those features in the meta program so

2289
01:39:11,100 --> 01:39:12,900
they can output C code and IU C code.

2290
01:39:12,900 --> 01:39:14,900
Sort of is like my output language.

2291
01:39:16,100 --> 01:39:17,500
That's, that's, that's all it is.

2292
01:39:18,000 --> 01:39:19,300
That's all I'm talking about.

2293
01:39:19,400 --> 01:39:23,800
And so basically, now once you have your program out being output by

2294
01:39:23,800 --> 01:39:26,500
another program, you can use control flow and do all the stuff you

2295
01:39:26,500 --> 01:39:26,800
want to do.

2296
01:39:26,800 --> 01:39:28,300
And obviously, it doesn't end up looking like this.

2297
01:39:28,300 --> 01:39:30,500
You've got helper functions that output functions and all that sort of

2298
01:39:30,500 --> 01:39:30,700
stuff.

2299
01:39:30,700 --> 01:39:33,800
But basically this is all I'm talking about, right?

2300
01:39:34,300 --> 01:39:35,700
So sweet that file.

2301
01:39:36,000 --> 01:39:36,500
That's it.

2302
01:39:37,100 --> 01:39:37,900
There's no magic to it.

2303
01:39:37,900 --> 01:39:39,400
You just write a program that spits out a program.

2304
01:39:39,400 --> 01:39:40,700
They compiled that program and run it.

2305
01:39:52,700 --> 01:39:53,600
Ambiguous Panda.

2306
01:39:53,600 --> 01:39:56,100
You mentioned that you don't think you will make much of a profit from

2307
01:39:56,100 --> 01:39:59,000
becoming a twitch partner, but you get 7x more viewers than some of

2308
01:39:59,000 --> 01:40:00,100
the full-time streamers.

2309
01:40:00,900 --> 01:40:04,900
So, the reason is because the streams just not on that long and also

2310
01:40:04,900 --> 01:40:07,100
I'm not going to put, I'm not going to put ads in the Stream.

2311
01:40:07,100 --> 01:40:09,800
This is supposed to be educational and I'm doing this to teach people.

2312
01:40:09,800 --> 01:40:12,800
I'm not going to start like triggering ads every 15 minutes or

2313
01:40:12,800 --> 01:40:13,100
something.

2314
01:40:13,100 --> 01:40:13,600
Right?

2315
01:40:13,800 --> 01:40:18,400
And so the way that it works and which has a TV station basically.

2316
01:40:18,400 --> 01:40:22,300
And so the way that it works just like everything else is

2317
01:40:22,500 --> 01:40:26,600
No, they get you get paid by when people watch ads and then if people

2318
01:40:26,600 --> 01:40:28,000
subscribe, you get something.

2319
01:40:28,000 --> 01:40:28,300
I don't know.

2320
01:40:28,300 --> 01:40:30,000
You get fifty percent of that or something like this.

2321
01:40:30,000 --> 01:40:32,800
But I mean how many subscribers you know, are you probably going to

2322
01:40:32,800 --> 01:40:33,200
get?

2323
01:40:34,400 --> 01:40:38,100
So it just economically speaking.

2324
01:40:38,400 --> 01:40:43,300
I don't think that it's something that's worth compromising.

2325
01:40:43,300 --> 01:40:47,400
The uploading of the videos, which it has a real tangible, educational

2326
01:40:47,400 --> 01:40:49,600
value to people who are trying to keep up with the Stream.

2327
01:40:49,600 --> 01:40:52,300
So, I just didn't feel like the money was worth.

2328
01:40:52,400 --> 01:40:56,400
It, you know, if they were like you can have a hundred million dollars

2329
01:40:56,700 --> 01:41:00,300
and if you just don't upload the videos for 24 hours, I'd be like,

2330
01:41:00,300 --> 01:41:03,800
okay, because we can probably do some really good stuff with a hundred

2331
01:41:03,800 --> 01:41:07,300
million dollars, but on the whole, I just didn't feel like the stream

2332
01:41:07,300 --> 01:41:10,300
was going to generate that kind of Revenue that would make it.

2333
01:41:10,300 --> 01:41:13,400
So that the good stuff we did with it would outweigh the bad of having

2334
01:41:13,400 --> 01:41:14,300
to hold the files.

2335
01:41:18,000 --> 01:41:18,800
Just a judgment call.

2336
01:41:18,800 --> 01:41:22,900
Like I said, I just I prioritize people having a stable location for

2337
01:41:22,900 --> 01:41:23,600
archive files.

2338
01:41:23,600 --> 01:41:24,500
That's up right away.

2339
01:41:24,500 --> 01:41:29,100
I prioritize that over, whatever the incremental Revenue would be up

2340
01:41:29,100 --> 01:41:29,900
from the twitch stream.

2341
01:41:30,600 --> 01:41:31,700
That's the best way to say it.

2342
01:41:32,000 --> 01:41:35,300
And I also I don't want to, I don't want this to be a slight on Twitch

2343
01:41:35,300 --> 01:41:35,700
in any way.

2344
01:41:35,700 --> 01:41:37,700
Their contracts are their contracts and they're trying to run a

2345
01:41:37,700 --> 01:41:38,100
business.

2346
01:41:38,100 --> 01:41:39,700
So I'm not trying to say that this is bad.

2347
01:41:39,700 --> 01:41:42,100
I just couldn't sign their contract.

2348
01:41:42,800 --> 01:41:45,900
And so, you know, that was that was just how it went.

2349
01:41:47,400 --> 01:41:48,900
I mean obviously Twitches a good service.

2350
01:41:48,900 --> 01:41:51,800
You've been watching the show on it for many nights now and it has

2351
01:41:51,800 --> 01:41:52,800
never gone down.

2352
01:41:52,800 --> 01:41:53,500
In the one time.

2353
01:41:53,500 --> 01:41:57,900
We had a problem was because my internet service provider died, so

2354
01:42:05,900 --> 01:42:08,900
So Telegraph Cable says, sorry if I missed it, but did you fix that

2355
01:42:08,900 --> 01:42:10,900
expected B until flipbook in the autocode know?

2356
01:42:10,900 --> 01:42:13,400
Like I said, I've got a notebook of couple things we got to clean up.

2357
01:42:13,600 --> 01:42:16,600
So we haven't done any cleanup of the code.

2358
01:42:16,700 --> 01:42:19,000
We've just been implementing this new kind of dynamic reload thing.

2359
01:42:19,000 --> 01:42:21,300
So we're done with the dynamic reload will clean up that and there's a

2360
01:42:21,300 --> 01:42:24,100
couple other things I have written down my notebook that are I don't

2361
01:42:24,100 --> 01:42:29,000
know if that may be the only bug but there's other things that I'd

2362
01:42:29,000 --> 01:42:31,400
written down that should be cleaned up and so we'll clean this up.

2363
01:42:32,200 --> 01:42:32,800
Couple days.

2364
01:42:37,700 --> 01:42:41,100
Can you make a lot of money by C programming?

2365
01:42:41,600 --> 01:42:42,300
Yes.

2366
01:42:43,600 --> 01:42:48,300
I make made all of my money by C programming.

2367
01:42:49,300 --> 01:42:55,700
I've supported myself for since I was maybe 19 20.

2368
01:42:56,000 --> 01:43:00,900
I supported myself through C programming and it pays very well at

2369
01:43:00,900 --> 01:43:03,800
least currently, so,

2370
01:43:05,500 --> 01:43:07,900
Yeah, I mean I have never felt that.

2371
01:43:07,900 --> 01:43:11,500
I couldn't earn a very good salary, C programming.

2372
01:43:11,500 --> 01:43:12,700
It is always been true.

2373
01:43:13,400 --> 01:43:15,700
And the other thing that I would mention is if you know, low-level

2374
01:43:15,700 --> 01:43:18,300
programming like the kind that we're sort of going towards on this

2375
01:43:18,300 --> 01:43:18,800
stream.

2376
01:43:20,100 --> 01:43:24,600
There's hardly anyone in your job market, like you are alone.

2377
01:43:24,600 --> 01:43:29,600
Like basically, you can go work at any company, any high-end company

2378
01:43:29,600 --> 01:43:32,700
you want to, if you know how to do a little level game programming,

2379
01:43:32,700 --> 01:43:35,400
because there are so few people who actually know how to do it.

2380
01:43:35,400 --> 01:43:37,900
Like, most people only know how to do like the high level programming.

2381
01:43:38,100 --> 01:43:43,000
So, like, at any given time, tons of companies out there, big name

2382
01:43:43,000 --> 01:43:43,600
companies.

2383
01:43:44,000 --> 01:43:47,200
Wish they had more developers who know, new really good, low level C

2384
01:43:47,200 --> 01:43:49,300
code code or kinds of people.

2385
01:43:49,900 --> 01:43:53,600
So I've never seen a case where a great engine programmer was out of

2386
01:43:53,600 --> 01:43:54,000
work.

2387
01:43:54,300 --> 01:43:56,300
That's just I've never even heard of it.

2388
01:43:56,400 --> 01:43:57,300
Maybe it happens.

2389
01:43:57,300 --> 01:44:00,800
But I've never heard of that, usually the times, when people are out

2390
01:44:00,800 --> 01:44:02,800
of work programming wisest because they don't have those special

2391
01:44:02,800 --> 01:44:03,100
skills.

2392
01:44:03,100 --> 01:44:05,000
They're just a generic high-level programmer.

2393
01:44:05,100 --> 01:44:08,200
And those are actually very easy to find, it's very easy to go find a

2394
01:44:08,200 --> 01:44:11,900
person who could program in a high-level simple language to do, you

2395
01:44:11,900 --> 01:44:15,300
know, basic kinds of programming stuff, but people who can write their

2396
01:44:15,300 --> 01:44:16,400
own rasterizer.

2397
01:44:17,000 --> 01:44:19,600
I just don't know, of a time when people who can do those kinds of

2398
01:44:19,600 --> 01:44:19,600
things,

2399
01:44:19,700 --> 01:44:21,600
Things can't go get a job.

2400
01:44:22,300 --> 01:44:23,800
So and maybe that's changing.

2401
01:44:23,800 --> 01:44:24,100
I don't know me.

2402
01:44:24,100 --> 01:44:24,900
That's not true anymore.

2403
01:44:24,900 --> 01:44:26,500
But that's been the case in my life.

2404
01:44:26,500 --> 01:44:26,900
Anyway.

2405
01:44:32,100 --> 01:44:33,000
Let's see.

2406
01:44:33,000 --> 01:44:35,600
Do you use hot reloading in any of your non-game projects?

2407
01:44:36,000 --> 01:44:39,000
Yes, but I can't talk about those yet because they're not announced.

2408
01:44:42,200 --> 01:44:43,600
Why do you think so few people?

2409
01:44:43,600 --> 01:44:44,500
Learn this stuff?

2410
01:44:45,500 --> 01:44:46,800
Well, two reasons, one.

2411
01:44:46,800 --> 01:44:50,400
I'm trying to fix with handmade hero, which is that I think people

2412
01:44:50,400 --> 01:44:54,600
don't know how to get to the point where they can work on low-level

2413
01:44:54,600 --> 01:44:54,900
code.

2414
01:44:54,900 --> 01:44:57,000
Like, I don't think they have a good intro.

2415
01:44:57,200 --> 01:44:59,800
And so the idea behind handmade hero is that if you can

2416
01:45:00,000 --> 01:45:04,100
You're an hour or two a night for a year, like like you would if you

2417
01:45:04,100 --> 01:45:08,800
were going to a college course, then you will be able to see the

2418
01:45:08,800 --> 01:45:11,200
entire process of how to do that low-level code.

2419
01:45:11,300 --> 01:45:13,900
And I feel like I'm trying to solve that one part of it.

2420
01:45:14,200 --> 01:45:16,200
The second part of it is a motivational issue.

2421
01:45:16,400 --> 01:45:18,000
I think what happens is people go.

2422
01:45:18,000 --> 01:45:20,600
Oh, I can just go download unity and start making a game.

2423
01:45:20,800 --> 01:45:21,300
Right?

2424
01:45:21,500 --> 01:45:25,100
And it's a lot faster to make a game in unity, because so much code

2425
01:45:25,100 --> 01:45:26,300
has already been written for you.

2426
01:45:26,500 --> 01:45:29,800
And so using code that's already written for you is always faster.

2427
01:45:30,000 --> 01:45:32,500
To get started, then writing code from scratch.

2428
01:45:32,500 --> 01:45:33,800
Now what's kind of odd is?

2429
01:45:33,800 --> 01:45:36,700
Sometimes it actually turns out to not actually be faster overall

2430
01:45:36,700 --> 01:45:40,200
because you have to fight that already written code all the time when

2431
01:45:40,200 --> 01:45:41,200
it doesn't do what you want.

2432
01:45:41,200 --> 01:45:44,500
So depending on whether you happen to do a unity game, that's exactly

2433
01:45:44,500 --> 01:45:47,500
like some other unity game that already works and didn't in kind of

2434
01:45:47,500 --> 01:45:50,900
had Unity built around it or whether you're doing something totally

2435
01:45:50,900 --> 01:45:51,900
new and you have to write a lot of code.

2436
01:45:51,900 --> 01:45:53,600
Yourself may make that determination.

2437
01:45:53,600 --> 01:45:57,900
But either way in general having a game, engine means a lot of code

2438
01:45:57,900 --> 01:45:59,800
was already written for you and just using it's a lot.

2439
01:46:00,000 --> 01:46:00,400
Fleur.

2440
01:46:00,800 --> 01:46:03,500
So, people often don't want to invest the time to learn how to do the

2441
01:46:03,500 --> 01:46:04,400
little level code.

2442
01:46:05,200 --> 01:46:08,600
So what that means is, basically, you will get, I think in the future.

2443
01:46:08,600 --> 01:46:13,300
A lot of people who can work within the confines of an existing

2444
01:46:13,300 --> 01:46:16,300
engine, but cannot extend that engine effectively.

2445
01:46:17,000 --> 01:46:17,800
That's a bummer.

2446
01:46:17,800 --> 01:46:20,400
Because I think game engines have a long way to go before they're

2447
01:46:20,400 --> 01:46:21,200
really great.

2448
01:46:21,400 --> 01:46:24,300
So I think we need a lot more engine programmers than we have.

2449
01:46:25,100 --> 01:46:26,500
I think we need a lot more unit.

2450
01:46:26,500 --> 01:46:29,400
He's like, I don't want Unity to be the only game engine, you know, I

2451
01:46:29,400 --> 01:46:29,800
don't want.

2452
01:46:29,900 --> 01:46:31,200
Unreal for to be the only game in.

2453
01:46:31,200 --> 01:46:34,900
We need a lot of good game engines and we need them to be competing so

2454
01:46:34,900 --> 01:46:39,700
that we can have a lot of progress in what a game engine is how it

2455
01:46:39,700 --> 01:46:40,200
works.

2456
01:46:40,300 --> 01:46:42,600
What it's capable of because I think we've only just scratched the

2457
01:46:42,600 --> 01:46:46,200
surface really so I think we need that but there's another there's

2458
01:46:46,200 --> 01:46:49,900
another side to that coin which is and I'm you know, I can say this

2459
01:46:49,900 --> 01:46:56,500
definitively because I do play a ton of Indie Games built in unity.

2460
01:46:56,500 --> 01:46:59,800
I play a ton of them because I do judging for Indie Mega boost.

2461
01:47:00,100 --> 01:47:02,200
And I just like, I'm interested in indie games.

2462
01:47:02,200 --> 01:47:08,200
I like indie games and I like, like, as much as I want people to be

2463
01:47:08,200 --> 01:47:09,000
lower programmers.

2464
01:47:09,000 --> 01:47:13,600
I like the fact that Unity allows people who maybe would never invest

2465
01:47:13,600 --> 01:47:17,000
the time to become a game programmer at a low level and build their

2466
01:47:17,000 --> 01:47:17,700
own engine.

2467
01:47:17,900 --> 01:47:20,600
I like the fact that it allows them to make games because maybe there

2468
01:47:20,600 --> 01:47:25,500
are people who will be great game designers don't have, maybe the what

2469
01:47:25,500 --> 01:47:27,700
it takes to be a low-level game designer, but do you have what it

2470
01:47:27,700 --> 01:47:29,800
takes to be a great game designer, for example.

2471
01:47:29,900 --> 01:47:31,000
So Unity empowers.

2472
01:47:31,000 --> 01:47:33,200
Those people to do that game design and so on.

2473
01:47:33,200 --> 01:47:37,000
So I think Unity actually does a really good Public Service in some

2474
01:47:37,000 --> 01:47:39,600
sense by and makes a good business out of it.

2475
01:47:39,600 --> 01:47:44,400
Certainly by filling that Gap but there's a real big downside there.

2476
01:47:45,000 --> 01:47:47,100
And that is that a lot of games.

2477
01:47:47,100 --> 01:47:48,900
I see Unity games.

2478
01:47:48,900 --> 01:47:55,000
I see the controls are awful, like you play a platformer and it just

2479
01:47:55,000 --> 01:47:56,200
plays terribly.

2480
01:47:56,800 --> 01:47:59,500
And the reason for that is because the person who made the game just

2481
01:47:59,500 --> 01:47:59,800
doesn't

2482
01:48:00,000 --> 01:48:04,700
No enough about game code to make a really great feeling.

2483
01:48:04,700 --> 01:48:09,400
Well, jump or a really great feeling rocket boost or that impact, or

2484
01:48:09,400 --> 01:48:12,400
what a gun should feel like the fire or what it should feel like to do

2485
01:48:12,400 --> 01:48:13,300
X, right?

2486
01:48:15,900 --> 01:48:19,200
And so programming and understanding like how to program your own

2487
01:48:19,200 --> 01:48:22,400
physics stuff, and how to program like is really very important.

2488
01:48:22,400 --> 01:48:25,400
Even if you're using someone else's engine, because we haven't gotten

2489
01:48:25,400 --> 01:48:28,800
to the point yet where the engines, make it foolproof for you to make

2490
01:48:28,800 --> 01:48:29,800
a good feeling game time.

2491
01:48:30,000 --> 01:48:33,600
Maybe someday, we will and that's like a very important Avenue of game

2492
01:48:33,600 --> 01:48:36,300
engine development and I'm sure that's the kind of thing that Unity

2493
01:48:36,300 --> 01:48:37,400
people are probably working on.

2494
01:48:37,400 --> 01:48:41,100
And, you know, I hope they succeed and making thing tools that make it

2495
01:48:41,100 --> 01:48:42,300
easier for you to do those things.

2496
01:48:42,300 --> 01:48:46,800
But for now, I feel like, even people who use an engine or existing

2497
01:48:46,800 --> 01:48:50,900
libraries need to know their stuff, and they don't need to know, all

2498
01:48:50,900 --> 01:48:52,100
the stuff that I'm learning on that.

2499
01:48:52,100 --> 01:48:55,400
I'm trying to teach on this dream about like how to like concatenate

2500
01:48:55,400 --> 01:48:59,700
your own strings and how to rasterize your own Sprites, but they do

2501
01:48:59,700 --> 01:48:59,900
need.

2502
01:49:00,000 --> 01:49:02,100
To learn some of this stuff.

2503
01:49:02,500 --> 01:49:07,200
And so, you know, I hope that their becomes more of a trend of people

2504
01:49:07,900 --> 01:49:11,600
sort of showing how to do that kind of programming.

2505
01:49:12,700 --> 01:49:17,500
So that games don't end up being bad for the reason that the probe,

2506
01:49:17,500 --> 01:49:20,600
the people making them didn't know how to write the code, right?

2507
01:49:21,500 --> 01:49:24,600
I mean, I literally cannot tell you how many Unity based Platformers I

2508
01:49:24,600 --> 01:49:26,800
have played that feel awful.

2509
01:49:27,100 --> 01:49:28,900
It is dozens.

2510
01:49:29,100 --> 01:49:29,700
Right?

2511
01:49:29,800 --> 01:49:35,700
And if those Platformers may have been great, like the platformer may

2512
01:49:35,700 --> 01:49:39,400
have actually been a good design that was interesting to play but you

2513
01:49:39,400 --> 01:49:42,100
just don't want to play it because it feels awful and the jump feels

2514
01:49:42,100 --> 01:49:42,300
awful.

2515
01:49:42,500 --> 01:49:44,500
Like that happens all the time.

2516
01:49:45,000 --> 01:49:50,100
And so there are consequences to people not knowing how to do some of

2517
01:49:50,100 --> 01:49:50,800
this coding.

2518
01:49:51,100 --> 01:49:54,000
And so I feel like there's a sort of Flip Side to it, too.

2519
01:49:58,800 --> 01:49:59,200
All right.

2520
01:49:59,200 --> 01:50:02,200
So any more questions, I think my horse my horse.

2521
01:50:02,200 --> 01:50:03,900
My voice is just about shot.

2522
01:50:03,900 --> 01:50:04,200
So

2523
01:50:09,900 --> 01:50:12,400
I know some of your friends went to reinvent but I can't stress how

2524
01:50:12,400 --> 01:50:14,300
much Guild Wars 2.

2525
01:50:14,300 --> 01:50:18,700
Feels awful that they didn't do Guild Wars 2, they left so the friends

2526
01:50:18,700 --> 01:50:20,400
of mine who is talking about they found it.

2527
01:50:20,400 --> 01:50:25,400
Arenanet made gills, Guild Wars 1 and then left because of political

2528
01:50:25,400 --> 01:50:28,100
reasons when the company got acquired.

2529
01:50:30,700 --> 01:50:31,700
So, do not worry.

2530
01:50:31,700 --> 01:50:32,700
You are not insulting them.

2531
01:50:32,700 --> 01:50:34,400
By saying, Guild Wars 2 is bad.

2532
01:50:39,200 --> 01:50:40,000
All right.

2533
01:50:40,400 --> 01:50:43,600
I think I'm going to call it here because I need to save some voice

2534
01:50:43,600 --> 01:50:45,100
because again, would be programming tomorrow.

2535
01:50:45,500 --> 01:50:50,400
Thank you, everyone for joining us for another episode of handmade

2536
01:50:50,400 --> 01:50:50,900
hero.

2537
01:50:51,800 --> 01:50:55,100
I'm going to go ahead and close everything down here.

2538
01:50:56,100 --> 01:50:59,800
Basically, if you enjoyed tonight's episode and you

2539
01:51:00,000 --> 01:51:03,200
Like to support the series, you have ways of doing that on handmade

2540
01:51:03,200 --> 01:51:03,800
hero dot-org.

2541
01:51:03,800 --> 01:51:04,700
There is a patreon.

2542
01:51:04,700 --> 01:51:06,900
You can click on if you'd like to just support the video series.

2543
01:51:06,900 --> 01:51:10,200
But also if you'd like to pre-order the game, you can do that right

2544
01:51:10,200 --> 01:51:12,000
here and that comes with some benefits.

2545
01:51:12,000 --> 01:51:16,100
You can download the source code every night and you will actually be

2546
01:51:16,100 --> 01:51:17,800
able to get builds of the game as well.

2547
01:51:17,800 --> 01:51:19,300
Once we have the full game running.

2548
01:51:20,000 --> 01:51:24,100
So this is like a basically complete access to everything and you can

2549
01:51:24,100 --> 01:51:25,100
download every night.

2550
01:51:25,100 --> 01:51:28,100
After I finish the stream, you can download the source code and it has

2551
01:51:28,100 --> 01:51:29,800
all of the source code from the previous day's as well.

2552
01:51:30,000 --> 01:51:32,200
So, if you go back and do other things, you can do that.

2553
01:51:32,600 --> 01:51:34,900
So, yeah, you like sports series, you've got ways of doing it, and I

2554
01:51:34,900 --> 01:51:35,800
appreciate that.

2555
01:51:36,200 --> 01:51:37,800
Also, we put up a site.

2556
01:51:38,200 --> 01:51:40,700
If you click on that news and forums link, if you click on this link,

2557
01:51:40,700 --> 01:51:43,500
right here, we put up a site that basically has like a forum.

2558
01:51:43,500 --> 01:51:46,400
You can click on code discussion and there's a forum in here that

2559
01:51:46,400 --> 01:51:47,800
people can can discuss things.

2560
01:51:47,800 --> 01:51:49,900
Help each other out, talk about things.

2561
01:51:49,900 --> 01:51:51,100
They've done with handmade hero.

2562
01:51:51,500 --> 01:51:53,900
There's also, if you just click on the main link to handmade hero

2563
01:51:53,900 --> 01:51:57,000
Centrelink, it's got the the schedule for each week if you want to

2564
01:51:57,000 --> 01:51:57,800
know ahead of time.

2565
01:51:58,900 --> 01:51:59,700
And also,

2566
01:52:00,000 --> 01:52:01,800
Got this great episode guide thing.

2567
01:52:01,900 --> 01:52:02,800
Well actually two great things.

2568
01:52:02,800 --> 01:52:06,500
This episode guide thing is basically a thing that community members

2569
01:52:06,500 --> 01:52:09,500
have put together where you can, where I showed it a little bit in the

2570
01:52:09,500 --> 01:52:12,500
Stream today where you can go click on things in there's like time

2571
01:52:12,600 --> 01:52:13,200
markers.

2572
01:52:13,200 --> 01:52:15,800
You can jump to anything that you want to learn about if you want to

2573
01:52:15,800 --> 01:52:16,700
go back and reference it.

2574
01:52:16,700 --> 01:52:17,700
So that's pretty awesome.

2575
01:52:18,100 --> 01:52:20,800
And this coding Resource page has some awesome stuff on it to people

2576
01:52:20,800 --> 01:52:21,300
have ported.

2577
01:52:21,300 --> 01:52:25,200
Handmade hero are ready to Mac OS X and sdl.

2578
01:52:25,300 --> 01:52:27,000
There's a bunch of stuff like that on here.

2579
01:52:27,000 --> 01:52:29,300
We've also people have talked about how to use other editors.

2580
01:52:30,200 --> 01:52:31,800
And we've got weekly Illustrated summaries.

2581
01:52:31,800 --> 01:52:32,600
These are pretty cool.

2582
01:52:32,600 --> 01:52:35,700
Like or murga does these ones where he does little illustrations of

2583
01:52:35,700 --> 01:52:36,600
what happens every week.

2584
01:52:36,600 --> 01:52:40,500
So there's just a ton of stuff here that you can check out and there's

2585
01:52:40,500 --> 01:52:43,000
also a thanks page where all the people have made this possible.

2586
01:52:43,000 --> 01:52:47,000
They come on here, so you can thank them if you see them online, so

2587
01:52:47,200 --> 01:52:50,200
that's that's all the the stuff for handmade hero.

2588
01:52:50,400 --> 01:52:53,600
I hope to see you here tomorrow at 8 p.m.

2589
01:52:53,800 --> 01:52:55,100
Pacific Standard time.

2590
01:52:56,000 --> 01:52:59,200
And then Thursday, and Friday will be on holiday hours because we're

2591
01:52:59,200 --> 01:52:59,800
getting close to Christmas.

2592
01:53:00,000 --> 01:53:02,700
Seriously, Thursday and Friday, we will be 11:00 a.m.

2593
01:53:02,700 --> 01:53:03,600
We'll be in the morning.

2594
01:53:04,100 --> 01:53:06,700
So some of you might not be able to make it but some of you from

2595
01:53:06,700 --> 01:53:07,700
Europe may be able to make it.

2596
01:53:07,700 --> 01:53:09,200
So hopefully we'll see some new faces.

2597
01:53:09,200 --> 01:53:10,800
They're on the twitch stream as well.

2598
01:53:11,000 --> 01:53:13,100
Thank you very much for joining me.

2599
01:53:13,200 --> 01:53:16,300
It has been a pleasure coding with you as always and I hope to see you

2600
01:53:16,400 --> 01:53:16,900
tomorrow.

2601
01:53:17,000 --> 01:53:17,600
Thanks, everyone.

