1
00:00:01,300 --> 00:00:03,400
Hello, everyone, and welcome to handmade hero.

2
00:00:03,400 --> 00:00:06,500
The show where we code a complete game live on stream.

3
00:00:07,000 --> 00:00:13,400
We are back this week with some camera code probably today, I don't

4
00:00:13,400 --> 00:00:17,700
know because we kind of started the camera code last week and I have

5
00:00:17,700 --> 00:00:19,600
some more things I would like to do it this week.

6
00:00:19,600 --> 00:00:20,800
There's some restructuring.

7
00:00:20,800 --> 00:00:21,800
I wanted to do to it.

8
00:00:21,800 --> 00:00:27,600
There was also like a sort of discontinuity bug that I want to fix and

9
00:00:27,600 --> 00:00:30,300
then we can just improve generally the quality of it, but there's a

10
00:00:30,300 --> 00:00:30,900
bunch of other things.

11
00:00:31,000 --> 00:00:33,700
I was thinking of that, I kind of wanted to get to, as well, so I

12
00:00:33,700 --> 00:00:34,500
don't know today.

13
00:00:34,500 --> 00:00:38,400
To today's episode might be a little bit of a potpourri, you know,

14
00:00:38,400 --> 00:00:42,400
that fabulous smell that that you're, you know, grandmother's bathroom

15
00:00:42,700 --> 00:00:47,500
smells of because she has that weird floral or stuff, you know, kind

16
00:00:47,500 --> 00:00:48,500
of above the toilet.

17
00:00:49,200 --> 00:00:52,300
It's that kind of episode kind of like above your grandma's toilet.

18
00:00:52,600 --> 00:00:55,300
Let's go ahead and and jump in here.

19
00:00:55,300 --> 00:00:59,500
I'll talk about a couple things I want to do today is day 379.

20
00:00:59,900 --> 00:01:00,900
So if you're following along at home,

21
00:01:01,000 --> 00:01:04,500
You want to follow along with Dave, start with de 378 source, code,

22
00:01:04,500 --> 00:01:05,200
that's source code.

23
00:01:05,200 --> 00:01:06,100
I'm starting with here.

24
00:01:06,500 --> 00:01:09,600
I will point out we did have and I probably want to do this first.

25
00:01:09,600 --> 00:01:12,200
If it is the case, just because someone took the time to write it in,

26
00:01:13,400 --> 00:01:16,800
someone was pointing out because we haven't gone and looked yet at

27
00:01:16,900 --> 00:01:19,400
re-enabling sort of the cliprect stuff.

28
00:01:20,000 --> 00:01:23,800
I briefly touched on it in the Q&A last time because someone asked

29
00:01:23,800 --> 00:01:25,700
about it, but I had never looked at myself.

30
00:01:26,300 --> 00:01:29,600
Snoring tortoise wrote in and said, hey, I think it's just a question

31
00:01:29,600 --> 00:01:30,900
of like, passing some parameters wrong.

32
00:01:31,100 --> 00:01:34,300
You changed some stuff and you haven't updated the way that the calls

33
00:01:34,300 --> 00:01:34,700
work.

34
00:01:35,000 --> 00:01:39,400
And so, I figure if since I know that people, I don't actually know

35
00:01:39,400 --> 00:01:42,300
why they were asking about running the profile again, but I know that

36
00:01:42,300 --> 00:01:43,500
they were asking for it.

37
00:01:44,200 --> 00:01:47,200
And so since other people are apparently using that at the moment, I

38
00:01:47,200 --> 00:01:49,400
feel like we might as well real and re-enable it for them.

39
00:01:49,400 --> 00:01:52,300
If this is actually the only bug in there because hey, I can go fix

40
00:01:52,300 --> 00:01:53,400
this bug, really trivially.

41
00:01:53,800 --> 00:01:56,400
And then the people who want to do, the profiler can use it.

42
00:01:57,500 --> 00:02:00,900
So in advance of us actually getting to the debug system and

43
00:02:01,000 --> 00:02:02,000
looking at it in more detail.

44
00:02:02,300 --> 00:02:07,100
So if we go ahead and take a look at what that mail was talking about,

45
00:02:07,200 --> 00:02:14,800
you can see that when I build this here, we have loops, if I spell

46
00:02:15,000 --> 00:02:19,000
Microsoft developer Studios command line tool, name correctly, that,

47
00:02:19,000 --> 00:02:24,800
when I run this, if I wanted to go to the profiler, you can see that

48
00:02:24,800 --> 00:02:28,600
although things are drawing in the debug view.

49
00:02:29,000 --> 00:02:30,700
You can see that there's like, this weird

50
00:02:31,100 --> 00:02:36,000
Your of the profile rectangle I'm of the profilers clip rectangle,

51
00:02:36,100 --> 00:02:39,400
where it's not really showing the things right.

52
00:02:39,400 --> 00:02:43,800
It's like the you know the rectangle is this sort of darkened region

53
00:02:43,800 --> 00:02:47,900
here but then we've got this like listing, that's getting half clipped

54
00:02:47,900 --> 00:02:48,800
you know what's going on?

55
00:02:49,700 --> 00:02:52,200
And the reason there is we never really updated the cliprect code to

56
00:02:52,200 --> 00:02:56,800
be correct once we updated ourselves to the 3D pipeline.

57
00:02:57,100 --> 00:02:59,600
Now, what the male is talking about though is that they were saying

58
00:02:59,600 --> 00:02:59,900
well,

59
00:03:00,000 --> 00:03:01,500
I know that there's actually anything wrong.

60
00:03:01,500 --> 00:03:05,400
Now that you updated that because in the Q&A, I went and fixed the

61
00:03:05,400 --> 00:03:11,400
projection code to do a reverse projection for the clip Rex, but they

62
00:03:11,400 --> 00:03:13,300
were basically saying that, hey, I don't know that there's anything

63
00:03:13,300 --> 00:03:15,000
actually wrong with that.

64
00:03:15,100 --> 00:03:18,500
I think you're just, you're passing the rectangle information wrong

65
00:03:19,000 --> 00:03:23,400
now because it's offset and dimension here, and it's rectangle here

66
00:03:23,400 --> 00:03:24,100
and blah, blah blah.

67
00:03:24,100 --> 00:03:26,900
So, if I may read the mail, you can see what they said.

68
00:03:28,000 --> 00:03:29,900
I believe the issue with the clipping on the profile.

69
00:03:30,000 --> 00:03:31,700
Is due to the get Center rectangle.

70
00:03:31,700 --> 00:03:35,200
Being passed from rectangle to, I get cliprect into rectangle, to I

71
00:03:35,200 --> 00:03:36,200
get cliprect.

72
00:03:36,200 --> 00:03:39,300
This is an issue because the latter function assumes, the data past is

73
00:03:39,300 --> 00:03:43,700
min-max without modification to simple, approaches to fix.

74
00:03:43,700 --> 00:03:47,500
This are either to change get Center rectangle to rectangle, Min or

75
00:03:47,500 --> 00:03:53,000
change the calculation of Min corner and Max Corner in in the, in the

76
00:03:53,000 --> 00:03:53,900
resulting code.

77
00:03:54,500 --> 00:03:58,100
So you can see these two here and you can see how these are being

78
00:03:58,100 --> 00:03:58,500
done.

79
00:03:58,700 --> 00:03:59,800
It is correct that

80
00:04:00,000 --> 00:04:01,800
Exactly saying the offset in the dimension.

81
00:04:01,800 --> 00:04:08,300
This is being interpreted as a corner and that probably was just

82
00:04:08,300 --> 00:04:10,700
because I read it when we were doing here, and I just wanted to do

83
00:04:10,700 --> 00:04:13,600
that or something like this, probably didn't think too much about

84
00:04:13,600 --> 00:04:15,400
because then we just did it the Q&A last time.

85
00:04:15,900 --> 00:04:19,300
And then you can see here, when we do get cliprect this rectangle, to

86
00:04:19,500 --> 00:04:22,800
that's being specified, here, you can see that it's turning that

87
00:04:22,800 --> 00:04:26,500
rectangle into a center point in a dimension.

88
00:04:26,700 --> 00:04:29,800
So probably the easiest thing to do in this case would be to

89
00:04:29,900 --> 00:04:33,300
pass a minute Max because since that's what's already getting done

90
00:04:33,300 --> 00:04:33,600
here.

91
00:04:33,600 --> 00:04:35,200
It seems like maybe that's the best thing to do.

92
00:04:35,200 --> 00:04:35,800
I don't really know.

93
00:04:35,800 --> 00:04:40,300
It depends on how we imagine these functions to be used, but here we

94
00:04:40,300 --> 00:04:40,600
go.

95
00:04:40,600 --> 00:04:42,400
Let's just try it this way instead.

96
00:04:44,000 --> 00:04:48,200
Oops, so if we do rectangle Min here, then this offset will now be the

97
00:04:48,200 --> 00:04:50,600
minimum Corner as expected.

98
00:04:50,900 --> 00:04:54,600
And the dimension will just go out from that and we'll see how that

99
00:04:54,600 --> 00:04:55,200
works.

100
00:04:59,700 --> 00:05:00,100
Okay.

101
00:05:00,700 --> 00:05:04,600
So I've made that change and I believe that corresponds to suggestion

102
00:05:04,600 --> 00:05:06,000
one, right?

103
00:05:06,200 --> 00:05:08,200
This would have been to change the other routine.

104
00:05:08,200 --> 00:05:12,600
So addition to be change the other routine and hey look they are

105
00:05:12,600 --> 00:05:18,600
totally on on point or on fleek as we might say that is exactly the

106
00:05:18,600 --> 00:05:22,900
problem and it looks like we still have some other issues.

107
00:05:22,900 --> 00:05:26,300
We might want to dress like you can see our tool tip still doesn't

108
00:05:26,300 --> 00:05:27,500
work properly that.

109
00:05:27,500 --> 00:05:28,600
I don't think it's anything to do is clip.

110
00:05:28,800 --> 00:05:33,500
Rex, I believe that is just because our draw order is not in any

111
00:05:33,500 --> 00:05:36,400
particular, least smart State at the moment.

112
00:05:37,600 --> 00:05:40,700
So we have some issues here to do with that.

113
00:05:41,200 --> 00:05:45,300
So what I might suggest is since snoring tortoise went through the

114
00:05:45,300 --> 00:05:49,100
trouble of writing in to tell us how to fix this it seems like maybe

115
00:05:49,100 --> 00:05:52,800
the least we can do assuming that he cares about it or she cares about

116
00:05:52,800 --> 00:05:58,600
it at all is just to go ahead and change those drawers.

117
00:05:58,900 --> 00:05:59,800
So for example,

118
00:06:00,700 --> 00:06:01,400
In here.

119
00:06:01,900 --> 00:06:05,100
We have some debug text.

120
00:06:10,700 --> 00:06:12,400
Think it's called Tech stop there.

121
00:06:12,400 --> 00:06:13,400
I think that's the one.

122
00:06:14,100 --> 00:06:18,700
So I think most of our text is going through Tech stop I'm not 100%

123
00:06:18,700 --> 00:06:21,400
sure about that but you can see that the only to push bitmap calls in

124
00:06:21,400 --> 00:06:23,200
here are right there.

125
00:06:23,900 --> 00:06:27,300
And in here you can see that there's only one and it's for drawing an

126
00:06:27,300 --> 00:06:28,300
actual bitmap.

127
00:06:28,600 --> 00:06:32,200
So I think pretty much 100% of the text flows through this line and

128
00:06:32,200 --> 00:06:35,600
what you can see about this line is that this line actually does APUSH

129
00:06:35,600 --> 00:06:36,300
bitmap.

130
00:06:37,400 --> 00:06:40,600
Of two lines of text, one of which is the drop shadow and one of which

131
00:06:40,600 --> 00:06:47,100
is the actual white text on top and we're actually drawing these at

132
00:06:47,100 --> 00:06:48,200
the same Z value.

133
00:06:48,200 --> 00:06:52,200
Because we got rid of the Shadow transform, text transform stuff doing

134
00:06:52,200 --> 00:06:53,200
anything in particular.

135
00:06:56,200 --> 00:06:59,800
And I don't think I really want to think about that too hard

136
00:06:59,800 --> 00:07:00,500
necessarily.

137
00:07:00,500 --> 00:07:03,800
But I think what we probably could do is just say if we want this

138
00:07:03,800 --> 00:07:08,300
working again, then when we set that shadow transform, instead of

139
00:07:08,300 --> 00:07:11,300
default flat transform, all we really have to do is offset these by a

140
00:07:11,300 --> 00:07:15,100
little bit of Z, and I think that that just fixes the problem.

141
00:07:15,400 --> 00:07:16,800
You know, don't quote me on this.

142
00:07:17,100 --> 00:07:19,200
I don't really know, but I think it's probably true.

143
00:07:20,000 --> 00:07:22,800
So again, I don't really know what order these are supposed to go.

144
00:07:22,800 --> 00:07:24,500
And I'm gonna have to think about that a little bit.

145
00:07:25,400 --> 00:07:31,200
Backing Shadow UI text tooltip, seems likely I don't know but so you

146
00:07:31,200 --> 00:07:36,300
could imagine it's just a signing these literally unit increments in Z

147
00:07:36,500 --> 00:07:41,000
like so and those would just sort of get closer to the camera as we

148
00:07:41,000 --> 00:07:41,300
went.

149
00:07:41,300 --> 00:07:44,700
Similarly, if we wanted to make these be things that went further

150
00:07:44,700 --> 00:07:48,700
away, we could do something like this in Stead.

151
00:07:48,800 --> 00:07:54,600
Now I don't know what we set up for the Z range is the only thing for

152
00:07:54,800 --> 00:07:55,000
clip.

153
00:07:56,900 --> 00:07:59,400
You know, our our orthographic transform.

154
00:07:59,400 --> 00:08:02,600
I if I remember correctly we didn't really do much with near and far

155
00:08:02,600 --> 00:08:03,400
clipping planes.

156
00:08:04,400 --> 00:08:06,200
So what we did is we just hard coded them here too.

157
00:08:06,200 --> 00:08:08,600
- hundred hundred, which means that basically anything that we want to

158
00:08:08,600 --> 00:08:12,300
put in here will be fine as long as it doesn't overflow.

159
00:08:12,300 --> 00:08:13,800
That value, I think.

160
00:08:14,500 --> 00:08:17,300
So let's just try this first because the z-buffer should in theory

161
00:08:17,300 --> 00:08:18,600
sort these things for us.

162
00:08:20,700 --> 00:08:21,800
Would be my assumption.

163
00:08:22,500 --> 00:08:25,900
So now we can see just looking at this it looks like they're sorted

164
00:08:25,900 --> 00:08:28,200
properly now and that's good.

165
00:08:28,200 --> 00:08:31,300
It looks like our tool tip is still a little bit busted so we may have

166
00:08:31,300 --> 00:08:35,400
to look at that one but the text itself appears correct and so maybe

167
00:08:35,400 --> 00:08:38,200
we can just go in there and take a look at the tool tips because that

168
00:08:38,200 --> 00:08:42,900
seems to be the only thing that is now incorrect, right?

169
00:08:43,100 --> 00:08:45,800
All the rest of this stuff looks like, it's working pretty good.

170
00:08:46,800 --> 00:08:50,300
We can pick properly in here and look at our various d.

171
00:08:50,500 --> 00:08:54,300
Frames, we can size this window.

172
00:08:54,300 --> 00:08:57,000
We can even hover and get a tool tip, but we just don't see the

173
00:08:57,000 --> 00:08:58,300
tooltip, right?

174
00:08:59,500 --> 00:08:59,800
So I

175
00:09:00,000 --> 00:09:03,600
No, will have to take a little bit of a gander over here at what's

176
00:09:03,600 --> 00:09:06,400
going on, because I don't know what's going on in this code anymore,

177
00:09:06,400 --> 00:09:08,000
was a long time since we touched it.

178
00:09:08,800 --> 00:09:11,500
So, what I'd like to do is take a look at say, for example, the

179
00:09:11,500 --> 00:09:15,700
profiler just so I can remember what we were even doing with Z in

180
00:09:15,700 --> 00:09:16,000
there.

181
00:09:16,000 --> 00:09:17,200
Whether we were setting Z.

182
00:09:17,200 --> 00:09:21,300
I just I'm literally looking at the code here to just re-familiarize

183
00:09:21,300 --> 00:09:25,300
myself a little bit with what this code was doing.

184
00:09:25,700 --> 00:09:29,900
So what you can see here is there is a base Z value and we're actually

185
00:09:30,000 --> 00:09:31,700
Actually using Z as a sort.

186
00:09:31,700 --> 00:09:34,000
This was what I was suspicious of here.

187
00:09:35,600 --> 00:09:39,100
So what that means is z value wise, we are actually doing a bunch of

188
00:09:39,100 --> 00:09:44,300
stuff with the Z value to do sorting and so it does suggest to me that

189
00:09:44,300 --> 00:09:45,600
what we probably need to do.

190
00:09:45,600 --> 00:09:48,400
In this case is give ourselves plenty of room here.

191
00:09:48,400 --> 00:09:52,500
And in order to do that, we will need because we're using Z inside of

192
00:09:52,500 --> 00:09:54,100
individual elements to do sorting.

193
00:09:54,900 --> 00:09:59,000
And so that seems like an important thing if that makes sense.

194
00:09:59,500 --> 00:10:04,500
So what we want to do from there out and again, if this is 100 minus

195
00:10:04,500 --> 00:10:04,900
10,

196
00:10:05,000 --> 00:10:05,900
The depth rating thing.

197
00:10:06,800 --> 00:10:08,500
We're going to need a lot of range.

198
00:10:08,500 --> 00:10:12,000
So what we can do in this case is again, just if we just give

199
00:10:12,000 --> 00:10:15,500
ourselves a large window of the near and far, clipping plane, we

200
00:10:15,500 --> 00:10:19,200
should be okay to use those for sorting values like we were using, I

201
00:10:19,200 --> 00:10:19,900
suspect.

202
00:10:20,600 --> 00:10:22,700
So I just want to double check to make sure that doesn't ruin any of

203
00:10:22,700 --> 00:10:23,800
the stuff that we were doing.

204
00:10:24,100 --> 00:10:25,400
It doesn't look like it does.

205
00:10:25,400 --> 00:10:26,500
And so, that's a good thing.

206
00:10:26,600 --> 00:10:30,100
And now we've got more room in the Z range for any given individual

207
00:10:30,100 --> 00:10:33,400
element because we were using those, as it turns out,

208
00:10:34,500 --> 00:10:38,800
So now what you can see when you when I'm sort of hovering over, these

209
00:10:38,900 --> 00:10:42,500
is that the tooltip itself now appears to be working correctly as far

210
00:10:42,500 --> 00:10:44,300
as sorting on top of these things.

211
00:10:44,500 --> 00:10:47,000
So the only real problem with our tool tip is that the texture, the

212
00:10:47,000 --> 00:10:49,800
tooltip appears to be drawing underneath the tooltip itself.

213
00:10:49,900 --> 00:10:52,900
And the reason we're not seeing that as a result is, the Z will kill

214
00:10:52,900 --> 00:10:53,300
it.

215
00:10:53,300 --> 00:10:55,600
So, what you have to remember and sometimes when you see these

216
00:10:55,600 --> 00:10:58,100
results, especially if you haven't program Graphics very much in the

217
00:10:58,100 --> 00:11:02,300
past, you can Stacey things that seem kind of confusing because they

218
00:11:02,300 --> 00:11:04,100
don't conform to any sort of real world.

219
00:11:04,300 --> 00:11:05,200
That you would expect to see.

220
00:11:05,400 --> 00:11:07,600
And so let me just take a brief moment since we're seeing one of them

221
00:11:07,600 --> 00:11:10,400
now to just try and articulate what's going on here.

222
00:11:10,700 --> 00:11:14,000
You can see as I move over here for the tooltip.

223
00:11:15,600 --> 00:11:18,600
you can see that the rectangle for the tooltip is drawing, and I don't

224
00:11:18,600 --> 00:11:20,800
know if you can see this on the video as well because maybe the

225
00:11:20,800 --> 00:11:24,300
compression artifacts are too bad but hopefully if you're maximizing

226
00:11:24,300 --> 00:11:26,800
your at 1080p, full stream Source, whatever

227
00:11:29,100 --> 00:11:34,100
Hopefully, you will see this, you can see what's behind the tooltip,

228
00:11:34,400 --> 00:11:34,900
right?

229
00:11:35,500 --> 00:11:37,100
So here might be the best example.

230
00:11:38,500 --> 00:11:39,300
I'll get it for you.

231
00:11:39,800 --> 00:11:42,700
If I grab a tool tip there, you can even see the level moving around

232
00:11:42,700 --> 00:11:46,600
behind it or like the blue bar of the cube behind it.

233
00:11:46,800 --> 00:11:51,800
So what you can tell from this is that we are seeing what is behind

234
00:11:52,000 --> 00:11:52,900
the tool tip.

235
00:11:53,500 --> 00:11:57,200
So the tooltip is drawing in a modulated blend mode and it's

236
00:11:57,200 --> 00:11:59,800
darkening, whatever was in the frame buffer prior to

237
00:12:00,000 --> 00:12:00,700
Being drawn.

238
00:12:01,900 --> 00:12:06,700
Okay, so now if you were thinking of this strictly, as a real-world

239
00:12:06,700 --> 00:12:11,800
analog where I'm holding up, say a translucent or transparent in this

240
00:12:11,800 --> 00:12:15,700
case, transparent piece of cellophane or something, that just happens

241
00:12:15,700 --> 00:12:16,600
to be dark.

242
00:12:16,800 --> 00:12:19,600
So it cuts down the light of a little bit but otherwise you can see

243
00:12:19,900 --> 00:12:20,600
through it.

244
00:12:20,900 --> 00:12:22,800
What you would expect to see here.

245
00:12:23,100 --> 00:12:26,600
If the texts were drawing behind it for the tooltip is you expect to

246
00:12:26,600 --> 00:12:28,200
see a darkened version of the text.

247
00:12:28,200 --> 00:12:31,500
And in fact, you can see a dark inversion of the other text behind it.

248
00:12:31,700 --> 00:12:33,000
Was drawn as part of the profile window.

249
00:12:33,000 --> 00:12:37,600
You just can't see a darkened version of this text, right?

250
00:12:38,900 --> 00:12:43,400
And so, it's important to ask ourselves here is, does that imply that

251
00:12:43,400 --> 00:12:46,100
the text is either being clipped or not drawn at all?

252
00:12:46,400 --> 00:12:50,500
And the answer is no in our case that doesn't actually apply that and

253
00:12:50,500 --> 00:12:53,100
the reason that it doesn't imply that is because, remember, we are

254
00:12:53,100 --> 00:12:54,300
using a z-buffer.

255
00:12:54,700 --> 00:12:58,800
That means that every time a pixel is drawn, it's going to test to see

256
00:12:58,800 --> 00:13:01,900
whether the Z value of what is already in the frame buffer at that

257
00:13:01,900 --> 00:13:07,000
location is higher or lower than the individual object.

258
00:13:07,000 --> 00:13:07,900
That's you know,

259
00:13:08,700 --> 00:13:11,800
That is higher or lower than the thing that we're drawing now, right?

260
00:13:12,200 --> 00:13:16,000
And furthermore we have a multi sample buffer on and the multi sample

261
00:13:16,000 --> 00:13:21,400
buffer will look to see whether or not individual samples.

262
00:13:21,400 --> 00:13:25,900
Are we're also using Alpharetta coverage and what that means is our

263
00:13:25,900 --> 00:13:28,800
Alpha 2 coverage will be making it.

264
00:13:28,800 --> 00:13:31,000
So that eight steps, I think that's how many we got on.

265
00:13:31,000 --> 00:13:35,300
This machine is eight levels of eight samples per pixel.

266
00:13:35,800 --> 00:13:38,500
Alpha 2 coverage will be randomly setting those

267
00:13:38,600 --> 00:13:39,400
date samples.

268
00:13:39,400 --> 00:13:41,600
Well pseudorandomly setting, those eight samples.

269
00:13:42,700 --> 00:13:46,600
How many of it will cover for any given pixel is based on the opacity

270
00:13:46,600 --> 00:13:47,700
of the thing being drawn.

271
00:13:48,400 --> 00:13:52,800
So given that all of those things are in play, what we don't actually

272
00:13:52,800 --> 00:13:53,300
know in.

273
00:13:53,300 --> 00:13:57,800
Any given circumstance is exactly what if we don't know what order

274
00:13:57,800 --> 00:13:59,300
things are being drawn in, right?

275
00:14:00,000 --> 00:14:03,300
If the Z value of one thing is underneath the Z value of another.

276
00:14:03,600 --> 00:14:08,300
It depends on the order in which those things get drawn, whether or

277
00:14:08,300 --> 00:14:08,500
not

278
00:14:08,700 --> 00:14:10,800
We will see them show through or not.

279
00:14:11,300 --> 00:14:14,100
Now, in this case we have to think through it very carefully because

280
00:14:14,100 --> 00:14:18,100
it does seem to suggest that they probably we should see something

281
00:14:18,100 --> 00:14:18,900
showing through.

282
00:14:19,400 --> 00:14:22,200
And the reason that we probably should see something showing through

283
00:14:22,500 --> 00:14:25,800
is because, whatever the opacity of this thing is, we know that it

284
00:14:25,800 --> 00:14:29,400
hasn't fallen below, the eight samples per pixel threshold.

285
00:14:29,400 --> 00:14:33,300
Because when we move it over something that we can see like this begin

286
00:14:33,300 --> 00:14:34,800
World change, right?

287
00:14:36,300 --> 00:14:41,100
It's obviously not so opaque that it covers all eight samples.

288
00:14:41,300 --> 00:14:45,000
If it did cover, all eight samples, we would not see anything behind

289
00:14:45,000 --> 00:14:45,400
it at.

290
00:14:45,400 --> 00:14:46,300
All right.

291
00:14:46,300 --> 00:14:50,400
It would just look black but since we can see something besides behind

292
00:14:50,400 --> 00:14:52,500
it, that means at least one of those.

293
00:14:52,500 --> 00:14:56,200
Eight multi samples is not getting covered, right?

294
00:14:59,100 --> 00:14:59,500
Okay.

295
00:15:01,400 --> 00:15:05,200
So what we would expect to see them in this case is even if we were to

296
00:15:05,200 --> 00:15:09,100
draw the thing afterwards, which I'm assuming must be happening here,

297
00:15:09,200 --> 00:15:09,500
right?

298
00:15:09,500 --> 00:15:09,800
Or sorry.

299
00:15:09,800 --> 00:15:13,200
Even if we were to draw the thing beforehand and then draw thing on

300
00:15:13,200 --> 00:15:19,100
top of it we would be expecting to see that thing show up dimly below

301
00:15:19,100 --> 00:15:23,200
it right but here's another option of what can happen in this case.

302
00:15:24,300 --> 00:15:29,200
If the XIV, if we were to draw these, in the other order, right?

303
00:15:29,200 --> 00:15:32,400
So let's say we were drawing these two things in the opposite order,

304
00:15:32,400 --> 00:15:35,900
so we're going to draw well, even at that case, I don't think it would

305
00:15:35,900 --> 00:15:36,400
happen.

306
00:15:38,400 --> 00:15:39,000
Yeah, strike.

307
00:15:39,000 --> 00:15:42,500
What I was about to say, but another thing that can happen here,

308
00:15:42,500 --> 00:15:42,900
right?

309
00:15:43,600 --> 00:15:46,000
That's what I point that out is the Z.

310
00:15:46,000 --> 00:15:48,300
Buffer also will kill anything.

311
00:15:48,300 --> 00:15:52,700
We're trying to draw that is below something that we already Drew.

312
00:15:53,000 --> 00:15:56,400
So, in the case that we had accidentally, let's say set the text to

313
00:15:56,400 --> 00:15:59,700
draw behind the tooltip bar, which I don't think it'd be possible

314
00:15:59,700 --> 00:16:03,100
because presumably wouldn't have shown up in our previous rendering.

315
00:16:03,200 --> 00:16:06,800
But let's say we did that, we could expect to see nothing there.

316
00:16:07,100 --> 00:16:08,000
And the reason we can expect

317
00:16:08,200 --> 00:16:12,000
I think there is that even though the open up the version of the

318
00:16:12,000 --> 00:16:15,900
tooltip backdrop is not opaque, right?

319
00:16:16,000 --> 00:16:21,100
And we and it what it's going to show is when it you know, kind of

320
00:16:21,100 --> 00:16:23,300
goes over something, it's going to dim it.

321
00:16:24,700 --> 00:16:27,300
The things that it will dim have to be things that have already been

322
00:16:27,300 --> 00:16:27,600
drawn.

323
00:16:27,600 --> 00:16:30,300
They have to be earlier in the draw order because opengl is not

324
00:16:30,300 --> 00:16:31,300
sorting anything for us.

325
00:16:31,300 --> 00:16:33,900
It's just using a z-buffer to resolve the depth.

326
00:16:34,400 --> 00:16:37,400
What that means is that when the text comes, if the texts were to have

327
00:16:37,400 --> 00:16:43,000
a z-value lower than the rectangle, all of the pixels for the text

328
00:16:43,000 --> 00:16:46,000
would get rejected because they would always think they were behind

329
00:16:46,000 --> 00:16:46,300
it.

330
00:16:46,400 --> 00:16:49,800
So not only would they not draw on top of it, but they actually

331
00:16:49,800 --> 00:16:54,200
wouldn't draw at all because it has laid down a solid rectangle of

332
00:16:54,500 --> 00:16:57,800
That is higher than the text and that appears to be what we're seeing

333
00:16:57,800 --> 00:16:58,300
here.

334
00:16:58,400 --> 00:17:01,200
But we could also just be seeing a clipping problem, right where the

335
00:17:01,200 --> 00:17:02,300
text is getting clipped.

336
00:17:03,600 --> 00:17:07,099
The reason I think that it's not as easy, sorting problem is again, it

337
00:17:07,099 --> 00:17:09,400
doesn't seem like the tooltip would have worked in our previous

338
00:17:09,400 --> 00:17:13,200
render, which was sorting if the Z value is less, but who knows?

339
00:17:13,400 --> 00:17:15,500
I just wanted to point, all that stuff out about how it's a little

340
00:17:15,500 --> 00:17:18,700
confusing there because because the Z buffer is a comparison and a

341
00:17:18,700 --> 00:17:21,300
rejection, not a sort.

342
00:17:21,700 --> 00:17:25,200
You can get situations where it appears like something should be

343
00:17:25,200 --> 00:17:27,900
drawing, one way or another, and it's, in fact, drawing an either way,

344
00:17:27,900 --> 00:17:28,400
right?

345
00:17:28,500 --> 00:17:32,600
So you might think that you would always see either the text dimly

346
00:17:32,600 --> 00:17:33,200
behind the

347
00:17:33,400 --> 00:17:37,800
Tangle or the text in front of the rectangle, but not just no text at

348
00:17:37,800 --> 00:17:38,300
all.

349
00:17:38,500 --> 00:17:40,800
If you were in fact, drawing it properly with no clipping.

350
00:17:41,000 --> 00:17:42,300
That is actually deceptively.

351
00:17:42,300 --> 00:17:45,500
Not the case because there's plenty of ways with the z-buffer, that,

352
00:17:45,500 --> 00:17:47,600
that could actually occur, right?

353
00:17:47,600 --> 00:17:48,200
That's the only part.

354
00:17:48,200 --> 00:17:49,800
I wanted to get out there again.

355
00:17:50,000 --> 00:17:52,900
Crazy Graphics bugs, just something to be aware of.

356
00:17:53,100 --> 00:17:56,000
So, anyway, let's take a look at the tool tip situation.

357
00:17:56,000 --> 00:17:58,800
I think that's in here if I remember was down at the bottom.

358
00:17:58,800 --> 00:17:59,400
Yes, it is.

359
00:18:00,800 --> 00:18:02,300
So let's go ahead and take a look at what's going on there.

360
00:18:02,300 --> 00:18:04,500
In fact, we move it over here, so my head's not ever going to be in

361
00:18:04,500 --> 00:18:07,300
the way and let's take a look, what's going on here.

362
00:18:07,800 --> 00:18:10,700
So you can see here that we're passing the tooltip transform as the

363
00:18:10,700 --> 00:18:11,000
place.

364
00:18:11,000 --> 00:18:14,900
We want to draw this text, we're drawing some stuff here but I don't

365
00:18:14,900 --> 00:18:15,700
really know.

366
00:18:15,800 --> 00:18:17,300
It's a bit of a little bit weird.

367
00:18:17,900 --> 00:18:20,600
We've got a hard-coded, that's probably the problem.

368
00:18:20,800 --> 00:18:24,100
We've got a hard-coded value for the text here, which doesn't seem

369
00:18:24,100 --> 00:18:25,100
particularly bright.

370
00:18:25,500 --> 00:18:27,100
Can't say that sounds smart.

371
00:18:27,600 --> 00:18:30,000
And so probably all that we're seeing here.

372
00:18:30,600 --> 00:18:32,600
Literally what we're seeing here is the clipping like I was saying

373
00:18:32,600 --> 00:18:33,100
before.

374
00:18:33,300 --> 00:18:35,200
Like I said, it's suggestive clipping turns out.

375
00:18:35,200 --> 00:18:39,000
It was slipping, it's not clipping in the clip rectangle sense, which

376
00:18:39,000 --> 00:18:42,500
makes sense why it didn't get fixed when we fix the clipping

377
00:18:42,500 --> 00:18:43,000
rectangle.

378
00:18:43,200 --> 00:18:45,700
What's actually happening here is, it's clipping outside of the Z

379
00:18:45,700 --> 00:18:52,400
range so you can see that this is being given 11 110,000 in Z, but we

380
00:18:52,400 --> 00:18:57,200
only allow in our in our transform, if you go back to the math

381
00:18:57,200 --> 00:18:59,900
functions, we only allow 10,000 as the maximum value.

382
00:19:00,500 --> 00:19:03,800
And so what ends up happening is it's past the far clipping plane and

383
00:19:03,800 --> 00:19:08,500
just gets clipped, it gets clipped in Z, not an X and Y but in Z and

384
00:19:08,500 --> 00:19:10,100
so that's really our only problem here.

385
00:19:10,100 --> 00:19:12,000
And I wonder why we had to do this in the first place.

386
00:19:12,000 --> 00:19:15,500
I don't really know why I'm not sure why we couldn't just use the tool

387
00:19:15,500 --> 00:19:16,700
to transform itself.

388
00:19:16,800 --> 00:19:18,700
Probably has something to do with the way we're sorting before or

389
00:19:18,700 --> 00:19:20,200
maybe this was just an expedient way to do it.

390
00:19:20,200 --> 00:19:23,600
It's the debug system so hey nobody probably cared, especially not me.

391
00:19:24,100 --> 00:19:26,700
But at this point, we do care because we want it to work again in our

392
00:19:26,700 --> 00:19:28,400
system because we'd like to see our tool tips.

393
00:19:28,500 --> 00:19:30,300
Now, what's interesting is the text out at

394
00:19:30,500 --> 00:19:32,200
Here, I'm not really sure why.

395
00:19:32,200 --> 00:19:33,900
It doesn't take one of these transforms.

396
00:19:34,300 --> 00:19:37,400
I would like to take a look and see how we were calling that most of

397
00:19:37,400 --> 00:19:41,900
the time, just, to find out why it's it's not just taking a transform

398
00:19:41,900 --> 00:19:42,500
as normal.

399
00:19:43,800 --> 00:19:46,600
I'm not sure why that would be but let's take a look.

400
00:19:46,700 --> 00:19:50,200
So, here's text out at and you can see that all it does is called Tech

401
00:19:50,200 --> 00:19:52,100
Stop and it uses a Nazi here.

402
00:19:52,500 --> 00:19:56,400
The p is just a regular P value, and when we come through here, it's

403
00:19:56,400 --> 00:19:57,300
going to call push him out.

404
00:19:57,300 --> 00:19:58,500
It's going to have to pass.

405
00:19:58,500 --> 00:20:01,700
I'll Transform of some kind and it looks like, okay, so you can see it

406
00:20:01,700 --> 00:20:03,300
does Shadow, transform, text transform.

407
00:20:03,400 --> 00:20:04,500
This is kind of a nut.

408
00:20:04,500 --> 00:20:07,300
So, way to do this, if you think about it, what's really happening

409
00:20:07,300 --> 00:20:10,700
here is that these two transforms are assuming that the transforms are

410
00:20:10,700 --> 00:20:13,100
just you know automatically going to be

411
00:20:15,100 --> 00:20:17,800
In some plain of Texans Aegis sorts within that.

412
00:20:19,600 --> 00:20:21,100
That doesn't seem particularly bright.

413
00:20:21,100 --> 00:20:23,400
It's at that doesn't seem like a particularly smart thing to do.

414
00:20:23,600 --> 00:20:27,800
I also don't really know where the actual Z value here.

415
00:20:27,800 --> 00:20:29,100
Is getting applied.

416
00:20:29,200 --> 00:20:32,900
You can see the @z, let's take a look here.

417
00:20:33,500 --> 00:20:36,100
So there's it's getting put into that bitmap offset, right?

418
00:20:36,100 --> 00:20:39,000
There's that at Z so we're effectively taking the transform in the

419
00:20:39,000 --> 00:20:42,500
text transform and just using those as baselines and then we're at

420
00:20:42,500 --> 00:20:46,100
using this at Z, to sort of rebase where the things are.

421
00:20:46,900 --> 00:20:49,100
Again, I think that was probably something we had to

422
00:20:49,200 --> 00:20:53,400
To do because we were trying to, you know, use our old wacky, two and

423
00:20:53,400 --> 00:20:57,600
a half D system, that doesn't seem to be particularly smart to me.

424
00:20:57,800 --> 00:20:59,800
I'm not even sure why we would have to play.

425
00:21:00,000 --> 00:21:03,000
For the for the Shadow and the regular text before.

426
00:21:03,000 --> 00:21:05,000
It doesn't really make a whole lot of sense.

427
00:21:06,100 --> 00:21:06,800
Honestly.

428
00:21:06,900 --> 00:21:11,500
So I kind of feel like this whole system wants to be simplified.

429
00:21:11,900 --> 00:21:15,400
Now that it can be, I'm going to take a quick Gander.

430
00:21:15,400 --> 00:21:16,400
I just want to know.

431
00:21:18,100 --> 00:21:21,000
If I take a look at all the places, we call text out at.

432
00:21:21,200 --> 00:21:23,300
I'm just curious as to how they're used.

433
00:21:23,500 --> 00:21:25,200
So you can see here.

434
00:21:25,200 --> 00:21:30,200
We've got a basic text element 1 and in the basic text element 1.

435
00:21:30,600 --> 00:21:33,400
I guess we don't really pass in a z of any kind.

436
00:21:33,600 --> 00:21:36,400
So when we're just doing basic text elements, it looks like we're you

437
00:21:36,400 --> 00:21:40,300
know, we're sort of just not really doing any kind of text element

438
00:21:40,300 --> 00:21:40,600
stuff.

439
00:21:40,600 --> 00:21:45,100
There we got the one in the tooltip, which is busted as we know and we

440
00:21:45,100 --> 00:21:46,000
know why it's broken.

441
00:21:46,000 --> 00:21:47,500
Now we have this

442
00:21:47,700 --> 00:21:48,000
Here.

443
00:21:48,000 --> 00:21:50,500
This is the string that kind of just shows up at the top of the screen

444
00:21:50,500 --> 00:21:53,400
is like a permanent reminder of what our frame rate and memory

445
00:21:53,400 --> 00:21:54,700
Footprints and things like this?

446
00:21:55,200 --> 00:21:57,900
It's all that does we then have a text out at

447
00:21:59,300 --> 00:22:01,500
That were using right here to sort of show us.

448
00:22:01,500 --> 00:22:08,600
Hey, okay, you know, here's the the tree that we, you know, that we

449
00:22:08,600 --> 00:22:11,800
view all our stuff in in, this is the case of a group.

450
00:22:11,800 --> 00:22:14,200
This is like, if there's a group, it'll draw, the, like, name of the

451
00:22:14,200 --> 00:22:18,000
group, but I don't think that's basically it, right?

452
00:22:18,300 --> 00:22:18,800
This.

453
00:22:18,800 --> 00:22:19,900
I don't know what this is.

454
00:22:19,900 --> 00:22:25,300
This is old radial menu stuff, which we don't use anymore, so that's

455
00:22:25,300 --> 00:22:26,100
just not a concern.

456
00:22:26,100 --> 00:22:27,300
It's not even the same function.

457
00:22:27,900 --> 00:22:28,600
So there's not a lot of

458
00:22:29,000 --> 00:22:30,300
This is getting called.

459
00:22:30,400 --> 00:22:33,600
So it wouldn't really be out of the question to just start having it

460
00:22:33,600 --> 00:22:34,700
past a z value.

461
00:22:34,700 --> 00:22:38,600
That was sensible and get us out of the business of this Shadow

462
00:22:38,600 --> 00:22:42,200
transform, text transform stuff, which doesn't really make a whole lot

463
00:22:42,200 --> 00:22:45,100
of sense to me because I feel like we should always inherit this z a

464
00:22:45,100 --> 00:22:46,400
little bit more explicitly.

465
00:22:47,300 --> 00:22:49,400
So I would kind of be interested in doing that again.

466
00:22:49,400 --> 00:22:52,000
I want to see in basic text element.

467
00:22:52,000 --> 00:22:54,600
The only problem there is four basic text element.

468
00:22:54,700 --> 00:22:58,400
I don't really know if the people have been leaning on this fact.

469
00:22:59,300 --> 00:23:01,700
That they can get Z values.

470
00:23:01,700 --> 00:23:04,300
You know in a convenient way here.

471
00:23:07,500 --> 00:23:08,000
I,

472
00:23:09,700 --> 00:23:13,100
Because none of these, all of these things, kind of just assumed a

473
00:23:13,100 --> 00:23:14,700
sort of basic Zenus.

474
00:23:20,800 --> 00:23:22,000
And I don't really know.

475
00:23:26,400 --> 00:23:29,900
Here's where, for example, we make those like Boolean buttons, right?

476
00:23:31,400 --> 00:23:35,000
And so I think everyone just assumes that the Z is just a flat thing

477
00:23:35,000 --> 00:23:37,400
and it doesn't really stack on top of itself at all.

478
00:23:38,700 --> 00:23:43,100
I don't really know how smart that is, you know?

479
00:23:43,100 --> 00:23:43,700
Maybe it is.

480
00:23:43,700 --> 00:23:44,700
Maybe it isn't.

481
00:23:45,500 --> 00:23:49,800
It seems to me like, it might be problematic in a few ways, but at the

482
00:23:49,800 --> 00:23:52,100
same time, maybe it's not, I don't really know.

483
00:23:53,000 --> 00:23:56,300
I guess what I would say is we can just fix the tooltips or we can fix

484
00:23:56,300 --> 00:23:59,500
this a little bit more, maybe, what I'll do is just fix a tooltips and

485
00:23:59,500 --> 00:23:59,900
hey, if

486
00:24:00,000 --> 00:24:00,800
Becomes a problem.

487
00:24:00,800 --> 00:24:03,500
Then we just don't look at it further, but you can kind of see why

488
00:24:03,500 --> 00:24:06,800
that's just a little bit weird and probably not what we really wanted

489
00:24:06,800 --> 00:24:07,300
to do.

490
00:24:08,100 --> 00:24:11,600
So in here, if we said like, oh okay, we just want the tooltips to be

491
00:24:11,600 --> 00:24:12,800
on top of everything else.

492
00:24:12,800 --> 00:24:14,300
That's all we were trying to do here.

493
00:24:15,300 --> 00:24:18,600
What I could say is well, alright, when we initialize these things

494
00:24:18,900 --> 00:24:20,200
Shadow transform

495
00:24:22,300 --> 00:24:24,300
You know, we've got here is all of our stuff.

496
00:24:24,500 --> 00:24:29,100
So if we want the Z value for these things, to sort of counteract, the

497
00:24:29,100 --> 00:24:32,900
sort of normal Shadow transform that we're seeing here, what we would

498
00:24:32,900 --> 00:24:36,100
need to do is like boost them over by 4,000, might we'd have to like,

499
00:24:36,100 --> 00:24:38,900
push them up right into the closer range.

500
00:24:39,900 --> 00:24:41,300
What I might say is, hey,

501
00:24:43,600 --> 00:24:46,900
Eventually, it's probably the right thing.

502
00:24:49,000 --> 00:24:57,300
To go ahead and make the flow through the debug system sensibly, but

503
00:24:57,300 --> 00:25:00,100
for now we just don't care.

504
00:25:02,700 --> 00:25:06,800
And then, I think we should now have our tooltips back or rather the

505
00:25:06,800 --> 00:25:07,600
tooltip text back.

506
00:25:07,600 --> 00:25:09,200
Obviously the tooltip, rectangles back.

507
00:25:10,100 --> 00:25:14,800
So there's that tooltip text working again and you can look at the

508
00:25:14,800 --> 00:25:19,200
frames here and so on, I don't know that there's anything else

509
00:25:19,200 --> 00:25:20,700
particularly that we did with tooltips.

510
00:25:20,700 --> 00:25:23,100
I think it was just mostly for hover in the profiler.

511
00:25:23,600 --> 00:25:25,500
I don't know if there was any other thing that it did.

512
00:25:26,600 --> 00:25:29,500
So anyway, this is seems to be working relatively well, now I think we

513
00:25:29,500 --> 00:25:31,000
can drill in here.

514
00:25:31,900 --> 00:25:32,500
And that works.

515
00:25:32,500 --> 00:25:35,400
Okay to do.

516
00:25:35,400 --> 00:25:37,000
It was there a there wasn't a back button.

517
00:25:37,000 --> 00:25:37,300
I remember.

518
00:25:37,300 --> 00:25:40,200
That was because it was hard to implement to know which was back.

519
00:25:40,200 --> 00:25:43,400
I guess I don't really remember there's something nasty about going

520
00:25:43,400 --> 00:25:43,900
backwards.

521
00:25:43,900 --> 00:25:44,500
I remember that.

522
00:25:45,400 --> 00:25:48,800
But anyway, you can you can see that we're pretty good to go here.

523
00:25:49,600 --> 00:25:53,200
We can we can look at you know anything we want now and it looks like

524
00:25:53,200 --> 00:25:54,400
everything's back and working.

525
00:25:54,400 --> 00:25:54,800
Okay.

526
00:25:54,800 --> 00:25:58,500
And the profiler, what are what is all this thing World mode?

527
00:25:58,500 --> 00:26:00,500
Some locations, enfant location?

528
00:26:01,800 --> 00:26:02,600
Sim region.

529
00:26:04,200 --> 00:26:05,400
Handmade particles.

530
00:26:05,700 --> 00:26:08,500
You know, it really bums me out that we don't get the function names

531
00:26:08,500 --> 00:26:15,600
anymore, all because llvm and clang, or dumb or I should say GCC

532
00:26:19,800 --> 00:26:22,600
And the C plus plus back, I suppose, because they kind of ratified the

533
00:26:22,600 --> 00:26:23,900
dumb that dumb decision.

534
00:26:26,700 --> 00:26:27,700
It really bums me out.

535
00:26:27,700 --> 00:26:29,600
That's the only reason we don't have the function names here is

536
00:26:29,600 --> 00:26:38,300
because C++ is spec didn't provide access to a constant like a string

537
00:26:38,300 --> 00:26:40,900
an actual string literal for the function name.

538
00:26:40,900 --> 00:26:44,000
They only provide access to a variable name which we couldn't

539
00:26:44,000 --> 00:26:47,800
concatenate on and that was just the worst anyway.

540
00:26:50,500 --> 00:26:52,200
but had trouble drawing, whatever that is

541
00:26:54,200 --> 00:26:55,100
Go back to Route.

542
00:26:55,100 --> 00:26:55,600
Here we go.

543
00:26:56,900 --> 00:26:59,800
So anyway we don't know the function names anymore which is a bummer.

544
00:27:01,900 --> 00:27:04,800
I wonder if we could like cheat and have an, if deaf in there that

545
00:27:04,800 --> 00:27:09,400
makes us get the function names on Windows because I really like

546
00:27:09,400 --> 00:27:10,400
having the function names.

547
00:27:10,400 --> 00:27:11,700
I don't like having to go.

548
00:27:11,900 --> 00:27:12,800
Okay, what's this?

549
00:27:12,800 --> 00:27:14,500
You know what's that win32?

550
00:27:14,500 --> 00:27:18,100
Handmade sevp line 24:02 right?

551
00:27:18,100 --> 00:27:23,100
It's like, okay, well let's see, win32 here made that CPP.

552
00:27:24,400 --> 00:27:26,700
Go to 24:02, okay?

553
00:27:26,700 --> 00:27:29,300
It's the game update block or whatever, right?

554
00:27:32,300 --> 00:27:34,300
Well, I suppose that one is less bad because that one at least we

555
00:27:34,300 --> 00:27:38,300
could was a string constant one, handmade debug 1981.

556
00:27:42,700 --> 00:27:44,400
All rights debug end, right?

557
00:27:45,100 --> 00:27:48,000
So, I want that to just say, debug n, you know, and that's what it

558
00:27:48,000 --> 00:27:49,900
used to do, before we had to fix it for

559
00:27:52,600 --> 00:27:57,300
Try not to get too upset about people who do C++ stuff literally

560
00:27:57,300 --> 00:28:00,900
making the wrong decision in every possible circumstance they ever

561
00:28:00,900 --> 00:28:04,500
can, which is kind of like some kind of unbroken streak.

562
00:28:06,600 --> 00:28:09,500
It's like some kids like the longest unbroken streak of bad decisions

563
00:28:09,500 --> 00:28:11,000
that that we've had in history.

564
00:28:11,300 --> 00:28:12,500
It's probably like u.s.

565
00:28:12,500 --> 00:28:15,200
foreign policy followed by the C++ standards committee.

566
00:28:15,700 --> 00:28:15,900
All right.

567
00:28:15,900 --> 00:28:20,900
So let's see what if we were to go to that.

568
00:28:20,900 --> 00:28:21,300
Just real

569
00:28:21,600 --> 00:28:23,500
Way and take a look.

570
00:28:25,800 --> 00:28:30,600
So actually do like interface .h, the reason that that's happening

571
00:28:30,600 --> 00:28:30,800
now.

572
00:28:30,800 --> 00:28:33,000
If I remember correctly, it's like when we build the, you know, these

573
00:28:33,000 --> 00:28:37,000
debug names, we do this this sort of nonsense here, right?

574
00:28:37,000 --> 00:28:38,400
File line, counter name

575
00:28:40,500 --> 00:28:48,500
Like that and I guess we don't stick D in there like the because that

576
00:28:48,500 --> 00:28:50,500
is sometimes underscore underscore function.

577
00:28:51,000 --> 00:28:51,500
Right?

578
00:28:51,800 --> 00:28:57,000
And so, you know what we could do here, I think if we wanted to is we

579
00:28:57,000 --> 00:29:00,400
could do something like if you know handmade win32.

580
00:29:00,700 --> 00:29:04,100
The think we have that I could do something.

581
00:29:04,200 --> 00:29:07,600
I think we're, that actually works, right?

582
00:29:07,700 --> 00:29:10,100
So on handmade win32, we

583
00:29:10,400 --> 00:29:11,600
That on the end.

584
00:29:11,900 --> 00:29:17,500
I don't know if that'll work, I'm going to see if it does, maybe it

585
00:29:17,500 --> 00:29:18,800
does, maybe it doesn't.

586
00:29:24,400 --> 00:29:25,000
There we go.

587
00:29:27,200 --> 00:29:31,200
So, so that way, we can have those on win32, right?

588
00:29:32,300 --> 00:29:33,500
And it will always show them

589
00:29:38,800 --> 00:29:39,200
Yeah.

590
00:29:41,800 --> 00:29:44,500
now, I suppose, the other thing is, maybe we were still getting that

591
00:29:44,500 --> 00:29:47,400
information through a secondary source because I guess one thing

592
00:29:47,400 --> 00:29:50,400
that's interesting is here are the time to Regions

593
00:29:54,900 --> 00:29:59,200
and if I don't do that, so if I don't have win32 and so the build

594
00:29:59,200 --> 00:29:59,800
right,

595
00:30:00,000 --> 00:30:00,800
Set in here.

596
00:30:00,900 --> 00:30:04,400
So that way you know people who are compiling, other platforms won't

597
00:30:04,400 --> 00:30:09,300
have to worry if I do force it to the other way.

598
00:30:09,900 --> 00:30:13,000
I guess the thing I'm not sure about is how is the what is the profile

599
00:30:13,000 --> 00:30:14,300
do in that situation?

600
00:30:14,500 --> 00:30:16,600
How is the profile getting this information?

601
00:30:16,800 --> 00:30:19,000
How is it getting the function name here?

602
00:30:19,900 --> 00:30:24,200
You know I'm saying that must be stored in an additional location

603
00:30:24,500 --> 00:30:27,900
because in here it like doesn't know that now,

604
00:30:28,700 --> 00:30:33,200
But in here it does so I guess like we still we worked around this

605
00:30:33,200 --> 00:30:36,200
problem and then I guess we didn't forward it forward when we had

606
00:30:36,200 --> 00:30:39,000
because we only worked around it for platform portability and it was

607
00:30:39,000 --> 00:30:40,500
after we'd already finished everything.

608
00:30:42,100 --> 00:30:45,800
So I guess it has to do with the fact that the name gets stored here.

609
00:30:47,900 --> 00:30:48,700
So, that's it.

610
00:30:48,800 --> 00:30:53,600
So we still do store the name here, we just don't concatenate it on,

611
00:30:54,100 --> 00:30:54,600
right?

612
00:30:56,200 --> 00:30:59,800
So in theory, I should be able to get that piece of information back

613
00:31:01,900 --> 00:31:07,000
in the debug layer where we do the tooltip, I think.

614
00:31:07,600 --> 00:31:11,000
So, for example, on here where we've got tooltip,

615
00:31:14,000 --> 00:31:17,300
Like this where we do element quid in theory.

616
00:31:17,300 --> 00:31:20,100
If I did element name, I would get that back.

617
00:31:20,100 --> 00:31:25,500
So maybe I don't have to be too grumpy about this because maybe we

618
00:31:25,500 --> 00:31:27,800
already solved the problem for all intents and purposes.

619
00:31:29,000 --> 00:31:34,100
And I can save my extreme hostility for the C++ people.

620
00:31:34,100 --> 00:31:38,700
For one of the other many Myriad times where it was, like, not

621
00:31:38,700 --> 00:31:39,800
something you could work around.

622
00:31:41,500 --> 00:31:43,400
Let's go ahead and just try it this way.

623
00:31:47,700 --> 00:31:50,300
That battle I guess I can just leave it back to the original way.

624
00:31:50,300 --> 00:31:57,900
It was like so, so maybe what I can do here is say Yeah in this case

625
00:31:58,200 --> 00:32:02,300
let's let's print out the element name as well.

626
00:32:06,600 --> 00:32:09,000
Which I don't actually know exactly what that is.

627
00:32:09,600 --> 00:32:11,400
So in this case, I'm going to have to look

628
00:32:14,800 --> 00:32:16,300
It is just a character.

629
00:32:17,400 --> 00:32:18,800
So I'll just say like,

630
00:32:21,100 --> 00:32:21,800
That.

631
00:32:26,600 --> 00:32:28,700
And we'll see if that now, which one did I just update?

632
00:32:28,700 --> 00:32:33,800
Their, I don't even remember which function as in profile bars, so I

633
00:32:33,800 --> 00:32:36,900
believe I go to profile gear and then I'm in here.

634
00:32:36,900 --> 00:32:37,600
So there we go.

635
00:32:37,600 --> 00:32:41,500
So then we can get it back right by just like sticking that.

636
00:32:43,800 --> 00:32:47,800
Additional bar piece on there and then similarly, I should be able to

637
00:32:47,800 --> 00:32:51,700
do that in the other case, where you had the tool tip again right

638
00:32:51,700 --> 00:32:52,300
here.

639
00:32:55,900 --> 00:32:58,400
Because we already did the work to work around this, so that's good.

640
00:32:59,600 --> 00:32:59,800
That.

641
00:33:00,000 --> 00:33:03,100
We'll work on Linux as well, which is nice too for people who want to

642
00:33:03,100 --> 00:33:04,000
be able to use this.

643
00:33:04,800 --> 00:33:06,200
So, let's see.

644
00:33:06,300 --> 00:33:08,600
Looking at this here on the frames one.

645
00:33:08,600 --> 00:33:09,100
There we go.

646
00:33:09,100 --> 00:33:13,400
You can see debug Haitian frame display a game update, perfect here.

647
00:33:13,400 --> 00:33:14,800
We've got them too.

648
00:33:15,000 --> 00:33:16,800
And I think those are the only places we had it.

649
00:33:16,800 --> 00:33:20,600
This was, this was just to say, which frame index it was just to Aid

650
00:33:20,600 --> 00:33:25,200
in debugging there, and the clocks here didn't ever print one out, it

651
00:33:25,200 --> 00:33:26,800
was already on the on the screen.

652
00:33:26,800 --> 00:33:29,700
So this one was just one that says, here's how many cycles.

653
00:33:30,500 --> 00:33:32,100
It was cumulative, right?

654
00:33:36,000 --> 00:33:38,100
I'm sorry here's how many cycles it was per call.

655
00:33:38,100 --> 00:33:41,300
Like that number divided by the call count and then what the

656
00:33:41,300 --> 00:33:42,700
cumulative percentage was.

657
00:33:42,800 --> 00:33:47,700
So you can kind of see like, okay, cumulative up to its 90% right here

658
00:33:47,700 --> 00:33:49,000
is where it ends.

659
00:33:49,600 --> 00:33:51,000
You know, what's kind of interesting about looking at.

660
00:33:51,000 --> 00:33:55,900
This is update and render entities takes a lot of time now, which is

661
00:33:55,900 --> 00:33:57,900
kind of cool now that our profilers back and working.

662
00:33:57,900 --> 00:34:02,700
We can see the 30% of the time is spent there, which is pretty

663
00:34:02,700 --> 00:34:04,000
interesting actually, right?

664
00:34:04,800 --> 00:34:05,500
I'm not sure why.

665
00:34:05,800 --> 00:34:07,300
And it would be interesting to know why.

666
00:34:07,400 --> 00:34:10,100
It would be interesting to take a look at what was costing that time

667
00:34:11,900 --> 00:34:12,900
in a little more detail.

668
00:34:13,800 --> 00:34:15,300
And in fact, why don't we go ahead and do that?

669
00:34:16,199 --> 00:34:17,900
So we're not compiling in debug mode.

670
00:34:18,400 --> 00:34:20,800
I'm sorry, we are compiling a debug mode, right?

671
00:34:21,500 --> 00:34:22,199
So that's fine.

672
00:34:23,699 --> 00:34:27,100
And I'm going to go ahead and go to update and render entities.

673
00:34:28,900 --> 00:34:31,699
Let's take a look at that call.

674
00:34:31,699 --> 00:34:32,400
Here it is.

675
00:34:33,300 --> 00:34:34,600
You can see the time function

676
00:34:35,900 --> 00:34:39,900
Bit here and we go through each of the end of these individually.

677
00:34:40,500 --> 00:34:46,300
We do the Boost code here which we don't really need to do anymore,

678
00:34:47,500 --> 00:34:49,400
but still kind of happening.

679
00:34:49,699 --> 00:34:52,199
We have the physics part here.

680
00:34:53,100 --> 00:34:56,699
We've got the render part here, and then we've got the debug pick

681
00:34:56,699 --> 00:34:57,900
entity part here.

682
00:34:58,600 --> 00:35:04,800
And so, what might be nice at this point is to do a little, you know,

683
00:35:04,800 --> 00:35:05,200
sort of

684
00:35:05,900 --> 00:35:10,800
Begin block, instrumentation and just kind of take a look at where.

685
00:35:10,800 --> 00:35:14,600
Exactly, we're getting that time.

686
00:35:16,100 --> 00:35:17,100
Getting where?

687
00:35:17,100 --> 00:35:19,300
That time is getting sucked away, right?

688
00:35:21,000 --> 00:35:21,700
So let's see.

689
00:35:22,400 --> 00:35:27,100
We know that we're going to process active entities so let's let's

690
00:35:27,100 --> 00:35:29,400
just do some quick instrumentation here.

691
00:35:31,400 --> 00:35:32,300
So there's the begin block.

692
00:35:32,300 --> 00:35:33,000
End block.

693
00:35:41,700 --> 00:35:45,500
And there's all that stuff.

694
00:35:55,400 --> 00:35:56,800
Do do, do do.

695
00:35:58,500 --> 00:35:59,800
And inside there, we actually.

696
00:36:00,000 --> 00:36:05,800
Have during the render, we've got this debug as well.

697
00:36:17,400 --> 00:36:20,500
So I'm just going to go ahead and give those a little prefixes because

698
00:36:20,500 --> 00:36:21,300
hey, those are there.

699
00:36:21,800 --> 00:36:25,100
We don't know that they're entity based at the moment, if we just saw

700
00:36:25,100 --> 00:36:28,100
them show up on the profile and weren't sure what we had been doing at

701
00:36:28,100 --> 00:36:30,500
that time, we'd be like, what physics?

702
00:36:30,500 --> 00:36:31,100
What?

703
00:36:31,400 --> 00:36:34,100
So at least now we can see that there are specific to this

704
00:36:35,300 --> 00:36:38,500
All right, so this should give us a little bit more granularity there

705
00:36:38,500 --> 00:36:40,900
in terms of the profiling, so we can kind of see what's going on.

706
00:36:42,100 --> 00:36:42,500
Hmm.

707
00:36:45,900 --> 00:36:47,000
That's weird.

708
00:36:47,000 --> 00:36:48,800
Did I miss a closing block?

709
00:36:48,900 --> 00:36:52,000
Begin block and block begin block.

710
00:36:54,300 --> 00:36:56,600
And block begin block.

711
00:36:58,700 --> 00:36:59,500
Yes, I did.

712
00:37:01,800 --> 00:37:02,300
There we go.

713
00:37:04,600 --> 00:37:05,600
Try that one more time.

714
00:37:11,400 --> 00:37:14,700
So it looks like here what we can kind of see is that none of these

715
00:37:14,700 --> 00:37:17,300
things, they're all kind of down in the noise so it's really only the

716
00:37:17,300 --> 00:37:22,900
entity render call that is doing anything particularly substantial.

717
00:37:22,900 --> 00:37:26,100
So we kind of know exactly where our situation is.

718
00:37:27,200 --> 00:37:30,500
And if we take a look here, you can kind of see, you know, debug end

719
00:37:30,500 --> 00:37:33,600
is not something that we're indeed acylation are things that are

720
00:37:33,600 --> 00:37:38,000
processing like tons of entries and doing a bunch of stuff, and we

721
00:37:38,000 --> 00:37:39,500
don't care so much about those,

722
00:37:40,000 --> 00:37:42,800
But these two right here, we do kind of care about because we want to

723
00:37:42,800 --> 00:37:45,000
make sure that nothing particularly nefarious going on in there.

724
00:37:45,300 --> 00:37:46,600
Opengl renderer commands.

725
00:37:48,000 --> 00:37:51,300
He is also a little bit suspicious at that point.

726
00:37:51,300 --> 00:37:54,700
I'm not sure we may want to take a look at at what's going on in there

727
00:37:54,700 --> 00:37:56,100
because that should be made relative Vision.

728
00:37:56,100 --> 00:37:56,400
I don't know.

729
00:37:56,400 --> 00:38:00,400
It depends on whether the GL texture changes and stuff like that are

730
00:38:00,400 --> 00:38:01,300
taking too much time.

731
00:38:01,300 --> 00:38:02,400
And who knows what?

732
00:38:02,700 --> 00:38:06,300
Not in terms of the actual rendering, but I just mean in terms of

733
00:38:06,300 --> 00:38:08,600
going through the driver and doing the handle translation stuff like

734
00:38:08,600 --> 00:38:09,100
that.

735
00:38:09,500 --> 00:38:13,500
But let's take a look because for only 510 calls is taking a 60

736
00:38:13,500 --> 00:38:16,000
thousand Cycles to do these.

737
00:38:16,000 --> 00:38:17,900
And so it just seems like well, you know, I'd like

738
00:38:18,100 --> 00:38:21,400
To know that that was appropriate because I don't know that it

739
00:38:21,400 --> 00:38:23,300
necessarily was right.

740
00:38:25,100 --> 00:38:26,400
So some things that are interesting in here.

741
00:38:26,400 --> 00:38:28,800
You can see that we're creating some vectors.

742
00:38:30,300 --> 00:38:31,500
And doing matches on them.

743
00:38:32,200 --> 00:38:37,700
I don't know if get bets match bitmap from, that's a very slow and an

744
00:38:37,700 --> 00:38:39,900
optimized and pretty stupid call.

745
00:38:41,300 --> 00:38:41,500
Really.

746
00:38:41,500 --> 00:38:47,100
So I'd be interested to know how much time that was taking and then we

747
00:38:47,100 --> 00:38:47,700
look on here.

748
00:38:47,700 --> 00:38:50,000
We've kind of got some other fairly straightforward stuff.

749
00:38:50,000 --> 00:38:56,400
I think just pushing on nothing, particularly interesting going on

750
00:38:56,400 --> 00:38:56,700
there.

751
00:38:56,700 --> 00:38:58,300
Just, you know, pushing volume, Atlas like that.

752
00:38:58,300 --> 00:38:59,800
So who knows how much time those

753
00:39:00,000 --> 00:39:05,000
Take, I would like to know about that get best best match bitmap from

754
00:39:05,200 --> 00:39:07,800
I'm assuming that it's not really taking too much of a problem.

755
00:39:11,600 --> 00:39:15,300
Because okay, so there it is it's already been removed, that's already

756
00:39:15,300 --> 00:39:19,300
a Time function and is not too because I would say like I feel like

757
00:39:19,300 --> 00:39:21,600
that function will have to optimize eventually but we just don't have

758
00:39:21,600 --> 00:39:23,600
very many Assets in the system right now.

759
00:39:24,000 --> 00:39:26,800
And so since we don't have very many assets, we wouldn't expect it to

760
00:39:26,800 --> 00:39:28,500
take long to iterate through them.

761
00:39:28,700 --> 00:39:29,200
Right.

762
00:39:30,000 --> 00:39:32,800
Let me pause this for a second so you can see right here.

763
00:39:32,800 --> 00:39:35,300
There's the function, and it's not taking any time.

764
00:39:36,000 --> 00:39:39,100
So we're really talking about this entity render here.

765
00:39:39,700 --> 00:39:40,900
We don't really know,

766
00:39:41,500 --> 00:39:46,100
The more specific elements of that are so we probably need to

767
00:39:46,100 --> 00:39:50,000
investigate even further to see what is this low point?

768
00:39:50,400 --> 00:39:54,300
So since we know that in here, let's see, we're going to go through

769
00:39:54,300 --> 00:39:54,600
here.

770
00:39:54,600 --> 00:39:57,600
Get best fit bitmap from push Cube, push bitmap.

771
00:39:59,800 --> 00:40:02,400
I guess we know we sort of have some of these, I'm going to get rid of

772
00:40:02,400 --> 00:40:03,800
these ifs, don't know.

773
00:40:03,900 --> 00:40:05,700
We don't really need them at the moment.

774
00:40:08,100 --> 00:40:09,200
We're not doing that one.

775
00:40:09,400 --> 00:40:13,400
So we really only have two here, I'm going to go ahead and just and

776
00:40:14,100 --> 00:40:16,700
see if I can isolate this a little bit further.

777
00:40:17,000 --> 00:40:19,800
So let's go ahead and do you know

778
00:40:21,000 --> 00:40:22,300
Render pieces.

779
00:40:36,600 --> 00:40:37,800
Under hip points.

780
00:40:47,200 --> 00:40:48,800
Render volume.

781
00:40:52,400 --> 00:40:55,900
And now I've kind of got this, like marked up pretty explicitly, so we

782
00:40:55,900 --> 00:41:00,200
should be able to see if there's if it's an even spread or what.

783
00:41:01,500 --> 00:41:06,100
So now if I pause we can see render volume takes quite a lot of time,

784
00:41:06,100 --> 00:41:10,400
but render pieces also does, so both of those are pretty slow

785
00:41:10,400 --> 00:41:11,100
actually.

786
00:41:12,000 --> 00:41:14,600
So what I'd like to do is take a look in there because those are just

787
00:41:14,600 --> 00:41:16,800
both basic render calls.

788
00:41:18,300 --> 00:41:21,800
I'd like to kind of know what's going on in there.

789
00:41:21,800 --> 00:41:23,200
That's making them so slow.

790
00:41:23,900 --> 00:41:28,000
So if we go to get best, I'm sorry if we know that that's not taking

791
00:41:28,000 --> 00:41:28,600
any time.

792
00:41:29,100 --> 00:41:32,200
We know that this is probably not take any time because it's literally

793
00:41:32,200 --> 00:41:34,300
just dereferencing some values.

794
00:41:34,600 --> 00:41:39,600
Push Cube and push bitmap are are really our only sort of suspicious

795
00:41:39,600 --> 00:41:45,300
and entities here and I suspect you know it could just be the case

796
00:41:45,500 --> 00:41:47,900
that because unoptimized these are going to go through

797
00:41:48,100 --> 00:41:51,300
Tons of calls and lots of cop unnecessary copies and stuff like that.

798
00:41:51,400 --> 00:41:52,100
It could just be that.

799
00:41:52,100 --> 00:41:54,300
That's just too much, right?

800
00:41:56,800 --> 00:41:58,800
But I want to make sure that's the case before I say.

801
00:41:58,800 --> 00:41:59,600
So for sure,

802
00:42:00,500 --> 00:42:03,800
And if there isn't something else going on, that's that's you know.

803
00:42:04,800 --> 00:42:06,900
More suspicious, if that makes sense.

804
00:42:08,300 --> 00:42:10,300
So let's take a look at what's going on there.

805
00:42:11,300 --> 00:42:12,500
Just looking through here.

806
00:42:20,000 --> 00:42:21,500
I mean, I can sort of see

807
00:42:23,100 --> 00:42:25,900
I mean, there really isn't much to say about these functions.

808
00:42:32,000 --> 00:42:35,000
They're just pretty much writing stuff out extremely straightforward.

809
00:42:35,200 --> 00:42:36,900
So I don't know that there's all that much to say.

810
00:42:36,900 --> 00:42:39,600
It may just be that there's just too many function calls in here.

811
00:42:40,200 --> 00:42:44,800
Of course, don't get in line and when you're not in release mode and

812
00:42:44,800 --> 00:42:48,100
if I look here at, you know, get current quads for example,

813
00:42:55,000 --> 00:42:57,300
I mean the again, just nothing happening.

814
00:42:58,000 --> 00:43:00,800
So I'm pretty sure all of these things are basically harmless.

815
00:43:01,100 --> 00:43:03,500
I'm going to verify that by switching to 0-2.

816
00:43:04,500 --> 00:43:07,100
So that once those are in lined, I want to see what happens.

817
00:43:14,600 --> 00:43:17,500
So again, pushes that way up in the top there, but render pieces is

818
00:43:17,500 --> 00:43:22,300
still pretty substantial at 10%, I'm not really sure.

819
00:43:22,300 --> 00:43:25,800
45 hunt for that eight thousand Cycles is an appropriate number of

820
00:43:25,800 --> 00:43:31,500
Cycles just for pushing some floats around but again it's a little bit

821
00:43:31,500 --> 00:43:32,300
hard to tell.

822
00:43:35,600 --> 00:43:37,400
Without further analysis of it.

823
00:43:43,500 --> 00:43:45,000
So, if I take a look at here,

824
00:43:50,300 --> 00:43:52,900
And again, all I'm doing is sort of looking to see if there's anything

825
00:43:52,900 --> 00:43:54,600
particularly unusual about what we're doing.

826
00:43:56,400 --> 00:44:01,000
I might want to take a, just a quick Gander in in optimized mode.

827
00:44:01,000 --> 00:44:05,900
Mind you of what the compiler has actually generated here just to give

828
00:44:05,900 --> 00:44:12,200
myself a little bit of a just a little bit of insight into like what

829
00:44:12,200 --> 00:44:13,700
actually is going on in here.

830
00:44:14,200 --> 00:44:19,400
So if we step into render pieces for example and I'm going to go to

831
00:44:19,400 --> 00:44:25,900
the disassembly here, you know here's the code for push Cube and you

832
00:44:26,200 --> 00:44:30,000
You can see here that we're going to skip over this.

833
00:44:32,400 --> 00:44:33,100
See here.

834
00:44:34,700 --> 00:44:37,400
And look at see if we're going to make any calls.

835
00:44:44,100 --> 00:44:46,100
This is actually the call to push bitmap.

836
00:44:48,300 --> 00:44:50,700
So that's going to look at the asset there.

837
00:44:53,300 --> 00:44:53,900
That's going to go.

838
00:44:53,900 --> 00:44:56,100
So I got to let this run so we can load some assets.

839
00:44:56,100 --> 00:44:59,100
It's going to skip bloat assets on the that's going to skip Red Ring.

840
00:44:59,300 --> 00:44:59,800
A bunch on the

841
00:45:00,000 --> 00:45:02,900
Frame because it hasn't had anything loaded yet.

842
00:45:03,400 --> 00:45:05,200
Alright, so let's go in now.

843
00:45:05,200 --> 00:45:06,700
So we can see one of the calls.

844
00:45:07,700 --> 00:45:10,600
Here's the call to get asset, it will succeed this time.

845
00:45:13,000 --> 00:45:15,000
And now I'm going to look at that call to push bitmap.

846
00:45:15,000 --> 00:45:16,000
So here it is.

847
00:45:16,400 --> 00:45:16,900
Right.

848
00:45:17,100 --> 00:45:22,000
I'm stepping in to push bitmap here and we can sort of see us testing

849
00:45:22,000 --> 00:45:22,900
what's going on.

850
00:45:23,600 --> 00:45:26,700
Here's the check against the bitmap width and height to make sure that

851
00:45:26,700 --> 00:45:28,300
there is a bitmap to push.

852
00:45:28,300 --> 00:45:31,400
We probably don't really need that anymore.

853
00:45:31,400 --> 00:45:33,600
But you know, we probably could just let it go.

854
00:45:35,000 --> 00:45:41,400
But here we are calling get bitmap Tim and that looks like it was not

855
00:45:41,400 --> 00:45:42,100
inlined.

856
00:45:42,700 --> 00:45:43,100
Right?

857
00:45:43,100 --> 00:45:47,700
So it's actually calling out to get bitmapped in now.

858
00:45:48,900 --> 00:45:50,200
That's a little weird.

859
00:45:55,100 --> 00:45:59,300
And I'll be honest, I wouldn't have expected quite so much work to be

860
00:45:59,300 --> 00:46:00,100
done here.

861
00:46:01,800 --> 00:46:04,000
This could probably be done a lot better.

862
00:46:04,900 --> 00:46:09,000
You can just see there's just a lot of lot of fussing.

863
00:46:12,200 --> 00:46:13,600
Just a lot of fussing.

864
00:46:13,900 --> 00:46:19,300
It did in line, get render entity basis P which again is very, very

865
00:46:19,300 --> 00:46:20,200
straightforward.

866
00:46:20,400 --> 00:46:22,700
I believe now, because we basically got it.

867
00:46:22,700 --> 00:46:26,400
It's just this, we got it so much.

868
00:46:26,400 --> 00:46:29,500
In fact, I don't know if object transform is even worth it anymore.

869
00:46:30,600 --> 00:46:31,800
Like it kind of feels like this.

870
00:46:31,800 --> 00:46:34,500
Maybe wants to go away entirely and object, transform should just be

871
00:46:34,500 --> 00:46:39,700
banished but you know it did in line that but that's literally just a

872
00:46:40,000 --> 00:46:40,300
trivial

873
00:46:42,400 --> 00:46:43,400
Trivial operation.

874
00:46:44,100 --> 00:46:49,900
But you look at, there's just a lot here and to be honest, I'm not

875
00:46:50,500 --> 00:46:52,100
really sure.

876
00:46:52,500 --> 00:46:58,700
That just some multiplies and some tracks would account for all of

877
00:46:58,700 --> 00:46:59,400
this.

878
00:47:06,400 --> 00:47:09,500
You know, let's let's do a little experiment here, shall we?

879
00:47:09,600 --> 00:47:12,100
I'm just, you know, I'm kind of interested in, you know, since we're

880
00:47:12,100 --> 00:47:13,300
we happen to be in the middle of it.

881
00:47:13,300 --> 00:47:15,200
I'm just going to go ahead and and see.

882
00:47:15,200 --> 00:47:19,800
So you know, here's get bitmap Tim right there it is.

883
00:47:20,500 --> 00:47:22,300
And well it actually goes to here.

884
00:47:23,000 --> 00:47:26,300
I'm going to I'm going to just cut and paste that and I'm going to cut

885
00:47:26,300 --> 00:47:27,700
and paste it into the scratch buffer.

886
00:47:28,700 --> 00:47:31,100
So you can see get bitmap, Tim here.

887
00:47:31,100 --> 00:47:34,200
And here's all the instructions for it and maybe that was a reasonable

888
00:47:34,200 --> 00:47:35,800
number instructions and maybe it wasn't.

889
00:47:36,200 --> 00:47:39,000
What I want to do here is I'm going to go to get bitmap, Tim now.

890
00:47:40,800 --> 00:47:44,400
Which is this code here and all I'm going to do is, I'm just going to

891
00:47:44,400 --> 00:47:49,200
rewrite it without using any C++, right?

892
00:47:49,400 --> 00:47:50,900
I'm just going to use straight.

893
00:47:50,900 --> 00:47:56,600
See and that's all I'm going to do and I want to make sure that it

894
00:47:56,600 --> 00:47:57,100
isn't.

895
00:47:57,100 --> 00:47:59,600
There isn't anything funny going on here?

896
00:48:00,500 --> 00:48:04,600
So, if we take a look at what's going to get produced for size, it's

897
00:48:04,600 --> 00:48:07,200
a, you know, size is a V2, right?

898
00:48:08,100 --> 00:48:10,200
In fact, I'll just I'll just go ahead and do it this way.

899
00:48:12,100 --> 00:48:13,500
So, we can generate either version.

900
00:48:15,900 --> 00:48:19,800
And so if I reproduce this second to say, well, alright the exercise

901
00:48:19,800 --> 00:48:23,300
is going to be the height times the bitmap with the over-height,

902
00:48:23,500 --> 00:48:23,700
right?

903
00:48:23,700 --> 00:48:29,000
That's just a multiply and the size in y is going to be the regular

904
00:48:29,000 --> 00:48:29,600
height.

905
00:48:29,900 --> 00:48:32,100
That's that's all we were trying to do here, right?

906
00:48:33,100 --> 00:48:37,100
The alignment you can see here is the hadamard product of the aligned

907
00:48:37,100 --> 00:48:41,800
percentage and the size times the C line again, that is just a 2d

908
00:48:41,800 --> 00:48:43,400
equation, right?

909
00:48:43,700 --> 00:48:44,600
And so the highwomen,

910
00:48:44,700 --> 00:48:47,200
Murmured product is just multiplying these two things.

911
00:48:47,400 --> 00:48:51,400
So really all that's happening here is, is this, right?

912
00:48:51,400 --> 00:48:53,700
You're just that's I mean, there's nothing.

913
00:48:55,200 --> 00:48:56,300
That's all that's happening.

914
00:48:56,700 --> 00:49:04,700
The Z is getting copied, directly, the X and the Y again are doing a

915
00:49:04,700 --> 00:49:06,300
very straightforward equation.

916
00:49:09,100 --> 00:49:10,900
like so, and

917
00:49:16,000 --> 00:49:18,200
That's, that's really all we're talking about here.

918
00:49:20,300 --> 00:49:22,100
And then get render entity basis.

919
00:49:22,100 --> 00:49:24,300
P is is really just

920
00:49:26,500 --> 00:49:27,000
This.

921
00:49:27,000 --> 00:49:27,400
Oops.

922
00:49:28,700 --> 00:49:31,600
So it's just adding the two together.

923
00:49:34,300 --> 00:49:37,800
And so just adding the two together is, is really trivial, right?

924
00:49:38,000 --> 00:49:38,800
It's this.

925
00:49:42,500 --> 00:49:45,500
And so, all I want to do there is just do them explicitly.

926
00:49:57,300 --> 00:50:00,400
And so, that's what this function looks like without C++, right?

927
00:50:00,400 --> 00:50:04,900
So, without operator, overloading of any kind, this is the actual set

928
00:50:04,900 --> 00:50:06,600
of operations, that's occurring.

929
00:50:13,400 --> 00:50:13,700
Don't know why.

930
00:50:13,700 --> 00:50:14,400
I just did that.

931
00:50:15,500 --> 00:50:16,500
So that's everything.

932
00:50:17,500 --> 00:50:19,700
So I'm going to compile this.

933
00:50:21,900 --> 00:50:23,400
What did I do wrong there?

934
00:50:30,200 --> 00:50:31,700
Is object transform sorry.

935
00:50:38,500 --> 00:50:39,000
There we go.

936
00:50:41,400 --> 00:50:46,400
So that's really all there is to it, and we'll have another transfer.

937
00:50:46,600 --> 00:50:49,800
We there'd be another sort of thing I could do there that I'll do in a

938
00:50:49,800 --> 00:50:54,200
second but I'm going to go ahead and and do this again.

939
00:50:54,200 --> 00:50:59,800
And I just want to see if if it really was correct to assume that that

940
00:51:00,000 --> 00:51:04,100
Stuff bitmap can.

941
00:51:05,800 --> 00:51:06,100
Okay.

942
00:51:06,100 --> 00:51:08,100
So that's very interesting already.

943
00:51:08,100 --> 00:51:10,800
You notice I couldn't set a breakpoint there and what that suggests to

944
00:51:10,800 --> 00:51:14,700
me is that now it has been in lined and previously it had not been in

945
00:51:14,700 --> 00:51:18,300
lined and that's a very interesting thing, right?

946
00:51:20,000 --> 00:51:20,800
So here we go.

947
00:51:23,700 --> 00:51:27,000
So let's take a look here where the here's that call to push bitmap,

948
00:51:27,000 --> 00:51:31,500
same call and and here we go right?

949
00:51:31,500 --> 00:51:36,500
Here's push bitmap and what you can see

950
00:51:42,100 --> 00:51:43,000
Oh God.

951
00:51:46,100 --> 00:51:51,600
What you can see is that the exact same set of SSA operations,

952
00:51:53,600 --> 00:51:58,900
Now, produces inline code, which hadn't been in line before.

953
00:52:01,700 --> 00:52:04,000
Probably because it couldn't.

954
00:52:08,500 --> 00:52:10,300
know that the

955
00:52:16,300 --> 00:52:16,700
Well, no.

956
00:52:16,700 --> 00:52:19,600
I mean it can't be an aliasing issue because we're still leaving

957
00:52:19,600 --> 00:52:21,800
everything in the structs and we didn't pull anything out to a

958
00:52:21,800 --> 00:52:22,900
temporary variable.

959
00:52:26,800 --> 00:52:28,000
I have no idea.

960
00:52:28,000 --> 00:52:32,400
I I guess I don't know why the compiler didn't know that those two

961
00:52:32,400 --> 00:52:34,400
sequences were the same but hey guess what?

962
00:52:34,400 --> 00:52:37,000
Now, there isn't a function call to that function.

963
00:52:40,700 --> 00:52:44,300
I wish I could say that that was surprising, but it didn't surprise

964
00:52:44,300 --> 00:52:44,700
me.

965
00:52:44,800 --> 00:52:48,300
And you know, that it didn't surprise me because that's why I took the

966
00:52:48,300 --> 00:52:50,500
step of writing it out explicitly.

967
00:52:54,000 --> 00:52:55,100
Not fabulous.

968
00:52:55,100 --> 00:53:01,300
So if I now pause, you can see that render pieces is still quite a bit

969
00:53:01,300 --> 00:53:05,900
of time, so it's not like we, you know, did some major amazing

970
00:53:05,900 --> 00:53:10,000
optimization on it yet but it's a little troubling right to see that.

971
00:53:10,000 --> 00:53:15,300
Literally, I took the exact same piece of code did nothing to it and

972
00:53:15,300 --> 00:53:16,900
just the same SS.

973
00:53:16,900 --> 00:53:20,200
A single static assignment.

974
00:53:20,200 --> 00:53:22,100
We haven't talked about animator, I guess I shouldn't be using that

975
00:53:22,100 --> 00:53:22,700
term yet.

976
00:53:23,700 --> 00:53:27,700
But the same set of mathematical operations in one case, is understood

977
00:53:27,700 --> 00:53:28,500
to be in line of bull.

978
00:53:28,500 --> 00:53:32,500
In the other case it isn't and I literally didn't do anything other

979
00:53:32,500 --> 00:53:35,500
than just expand this out in the same way that you would expand that

980
00:53:35,500 --> 00:53:39,400
out if you were to include those functions there.

981
00:53:39,400 --> 00:53:41,600
So that's not great.

982
00:53:45,800 --> 00:53:48,200
Just to be clear that is not great.

983
00:53:48,200 --> 00:53:50,300
That is what we would call a not great thing.

984
00:53:51,300 --> 00:53:53,600
But let's continue to investigate further.

985
00:53:54,600 --> 00:53:55,000
All right?

986
00:53:55,000 --> 00:53:57,500
So we can't even compare Apples to Apples because the other one wasn't

987
00:53:57,500 --> 00:53:58,100
getting in line to.

988
00:53:58,100 --> 00:53:59,800
Now, this one is so we don't even know.

989
00:54:00,000 --> 00:54:02,300
How much of a difference that one made in terms of assembly?

990
00:54:02,300 --> 00:54:06,100
But I think it also probably resulted in less assembly code just in

991
00:54:06,100 --> 00:54:06,700
general.

992
00:54:07,600 --> 00:54:10,500
And again that's because I think it was doing more operations than I

993
00:54:10,500 --> 00:54:10,800
felt.

994
00:54:10,800 --> 00:54:13,300
Like it should have been doing in that situation.

995
00:54:13,300 --> 00:54:16,900
Let's go to the disassembly here and just look

996
00:54:24,600 --> 00:54:28,100
So, it looks like it starts about here.

997
00:54:35,400 --> 00:54:36,900
And ends about here.

998
00:54:37,200 --> 00:54:39,700
So I don't know how much better that is.

999
00:54:50,300 --> 00:54:51,700
Here's that original version.

1000
00:54:57,900 --> 00:54:58,800
I don't know how to,

1001
00:55:00,300 --> 00:55:02,400
Yes, I can come in here and just put it at the end.

1002
00:55:04,800 --> 00:55:07,000
Here is the new version.

1003
00:55:09,800 --> 00:55:11,800
So it's definitely simpler a lot.

1004
00:55:11,800 --> 00:55:14,500
I don't know if it kind of elided, some of those observations, I'm not

1005
00:55:14,500 --> 00:55:18,200
being particularly meticulous, meticulous here at looking at it.

1006
00:55:18,200 --> 00:55:25,000
But you can see at least that, you know, I mean this was very long

1007
00:55:25,000 --> 00:55:26,200
before, right?

1008
00:55:26,200 --> 00:55:31,700
All I really do think this was doing more than necessary and I feel

1009
00:55:31,700 --> 00:55:34,700
like now it's down to sort of more like the number of operations I

1010
00:55:34,700 --> 00:55:37,600
would expect, but again, I'm not being meticulous there, so I don't,

1011
00:55:37,600 --> 00:55:39,500
it could have just stuck some of the Ops further.

1012
00:55:41,300 --> 00:55:43,400
And so it's a little bit hard to say, right?

1013
00:55:44,700 --> 00:55:48,600
Alright, so looking at here, so that's one call.

1014
00:55:48,600 --> 00:55:51,900
And now at least we're getting that call in line which I wanted, let's

1015
00:55:51,900 --> 00:55:53,800
take a look at the push quad call.

1016
00:55:54,600 --> 00:55:57,600
I just want to know if that's getting in line as well or not.

1017
00:55:59,400 --> 00:56:00,000
That here.

1018
00:56:02,400 --> 00:56:03,800
Where are we at here?

1019
00:56:11,500 --> 00:56:15,000
So we are in push bitmap, which is where we want to be.

1020
00:56:20,800 --> 00:56:23,500
However, it's pretty hard to isolate, where it actually spread this

1021
00:56:23,500 --> 00:56:24,300
code out too.

1022
00:56:26,000 --> 00:56:26,900
Unfortunately.

1023
00:56:32,500 --> 00:56:33,900
But I guess that's good enough for now.

1024
00:56:34,900 --> 00:56:37,700
Okay, so in the push quad call.

1025
00:56:40,000 --> 00:56:44,100
It looks like this has been properly in lined as well.

1026
00:56:53,500 --> 00:56:54,100
Aha.

1027
00:57:03,500 --> 00:57:05,900
So I'm going to take a look at this.

1028
00:57:05,900 --> 00:57:07,500
Saucy gentleman right here.

1029
00:57:09,800 --> 00:57:12,500
because I'll be honest, he does not look particularly

1030
00:57:15,200 --> 00:57:16,100
good to me.

1031
00:57:16,200 --> 00:57:19,700
In fact, what I might do is I might actually step back for a second.

1032
00:57:23,000 --> 00:57:24,200
Figure out what's going on here.

1033
00:57:28,400 --> 00:57:30,000
so somehow,

1034
00:57:33,300 --> 00:57:34,900
and I am not sure how

1035
00:57:37,500 --> 00:57:41,600
our rounding function is actually something that is not getting

1036
00:57:41,600 --> 00:57:42,400
inlined.

1037
00:57:44,800 --> 00:57:48,700
And so our color, I'm assuming this is due to the color conversion.

1038
00:57:48,800 --> 00:57:53,100
Oops, I don't know what just happened, hit some weird, hot cue there.

1039
00:57:55,100 --> 00:58:00,300
Let's go ahead and jump to the non optimized version of this code.

1040
00:58:00,300 --> 00:58:05,500
Since we know that round f is getting called, I don't really need the

1041
00:58:05,500 --> 00:58:08,300
Deep the other version right now.

1042
00:58:10,500 --> 00:58:15,700
So let's go to the disassembly here and see what's happening with that

1043
00:58:15,700 --> 00:58:17,200
with respect to that.

1044
00:58:21,100 --> 00:58:25,100
So it should be in the call to our GBA Pac for it by 8.

1045
00:58:25,500 --> 00:58:30,400
So, let's jump in there and you can see us calling round.

1046
00:58:31,200 --> 00:58:34,200
And so, here's an actual call to round.

1047
00:58:36,200 --> 00:58:37,100
Oh boy.

1048
00:58:38,600 --> 00:58:40,300
Oh my goodness.

1049
00:58:41,000 --> 00:58:44,700
So this is just an epic disaster, right?

1050
00:58:44,800 --> 00:58:49,000
So all we're trying to do is round a number to an integer to pack a

1051
00:58:49,000 --> 00:58:49,600
color.

1052
00:58:49,800 --> 00:58:52,600
So this is just, this is just real bad.

1053
00:58:53,200 --> 00:58:57,200
I mean, look at this, we're going to actually eat this function call

1054
00:58:57,300 --> 00:58:58,400
going to do all this work.

1055
00:58:58,400 --> 00:58:59,900
We're going to eat another function.

1056
00:58:59,900 --> 00:59:04,200
Call to f d and I don't even know where that is in the source code.

1057
00:59:05,500 --> 00:59:07,500
Oh God just

1058
00:59:08,300 --> 00:59:09,600
My Lord, no.

1059
00:59:12,800 --> 00:59:17,500
All right, so that's just that's real really bad.

1060
00:59:17,500 --> 00:59:20,600
Like that is really, really, really bad.

1061
00:59:21,500 --> 00:59:26,000
When we're pushing Sprites on to a list of things that is just awful

1062
00:59:26,700 --> 00:59:29,100
and let's just go ahead and get rid of that right now.

1063
00:59:29,300 --> 00:59:33,900
So I'm going to go find that round F function and excise it from this

1064
00:59:33,900 --> 00:59:37,700
code base immediately, because that is a really bad, very bad

1065
00:59:37,700 --> 00:59:38,500
situation.

1066
00:59:39,600 --> 00:59:41,500
That is not good.

1067
00:59:41,500 --> 00:59:41,900
And is that

1068
00:59:42,100 --> 00:59:47,600
Add the Badness of it is exemplified by its being bad, and we don't

1069
00:59:47,600 --> 00:59:48,300
want that.

1070
00:59:48,300 --> 00:59:50,200
So, you saw how much code there was there.

1071
00:59:50,300 --> 00:59:54,100
It was multiple function calls, it was a call into round, F, multiple

1072
00:59:54,100 --> 00:59:55,300
calls into F DN.

1073
00:59:55,300 --> 00:59:57,100
T, there is a whole bunch of boilerplate.

1074
00:59:57,100 --> 00:59:58,500
It couldn't be inlined.

1075
00:59:59,100 --> 00:59:59,800
This is really bad.

1076
01:00:00,300 --> 01:00:01,700
Surround F needs to go.

1077
01:00:02,200 --> 01:00:05,400
Fortunately, for us, we were smart at the beginning of our code base

1078
01:00:05,400 --> 01:00:07,100
and didn't call Round F.

1079
01:00:07,100 --> 01:00:08,900
We called round real 322.

1080
01:00:08,900 --> 01:00:09,700
You in 32.

1081
01:00:09,700 --> 01:00:13,900
So we have an even easier job for ourselves because we knew we were

1082
01:00:13,900 --> 01:00:14,500
going to have to replace.

1083
01:00:14,500 --> 01:00:16,600
This is some day and that day is today.

1084
01:00:17,000 --> 01:00:20,000
So the question is, if we just want to do a rounding function, so we

1085
01:00:20,000 --> 01:00:21,900
want to take a floating point value and rally to an integer.

1086
01:00:21,900 --> 01:00:22,600
How do we do that?

1087
01:00:22,600 --> 01:00:23,100
Well,

1088
01:00:24,000 --> 01:00:26,500
Fortunately, for us back when we originally did this, we didn't know

1089
01:00:26,500 --> 01:00:27,400
anything about 70.

1090
01:00:27,400 --> 01:00:28,900
We know something about Cindy now.

1091
01:00:29,000 --> 01:00:30,800
So we know about the Intel and trims, this guide.

1092
01:00:30,900 --> 01:00:32,600
Oh, by the way, thank you snoring tortoise

1093
01:00:52,300 --> 01:00:54,900
I forgot to close our bug there after we fixed it.

1094
01:00:55,500 --> 01:00:59,200
So, what we can do is we all know about the Intel intrinsics guide,

1095
01:00:59,200 --> 01:00:59,600
right?

1096
01:00:59,600 --> 01:01:03,400
And where is my?

1097
01:01:03,400 --> 01:01:03,900
There it is.

1098
01:01:05,500 --> 01:01:08,300
We know all know about the entire entry this guy which gives us access

1099
01:01:08,300 --> 01:01:13,300
to those nice intrinsics that we've been using and what happens to be

1100
01:01:13,300 --> 01:01:13,700
the case.

1101
01:01:13,700 --> 01:01:18,900
And again, remember we are on sse2 is what we decided our platform

1102
01:01:18,900 --> 01:01:19,100
was.

1103
01:01:19,100 --> 01:01:23,500
So we can go up to these sausage element right here, but we can use

1104
01:01:23,500 --> 01:01:24,300
any of the other ones.

1105
01:01:24,900 --> 01:01:28,400
It turns out that all of that work that was being done there with the

1106
01:01:28,500 --> 01:01:29,800
craziness that you saw.

1107
01:01:29,900 --> 01:01:31,600
We don't really need any of that work.

1108
01:01:31,800 --> 01:01:34,400
That's the C runtime libraries around F function.

1109
01:01:34,500 --> 01:01:35,000
We don't

1110
01:01:35,200 --> 01:01:38,200
Use that because it will you just saw what it was going to do.

1111
01:01:38,400 --> 01:01:41,600
We want something that, you know, we can be done much more quickly.

1112
01:01:41,700 --> 01:01:42,800
How much more quickly can we do this?

1113
01:01:42,800 --> 01:01:44,900
Well, it turns out that there's actually

1114
01:01:47,000 --> 01:01:53,800
a an actual function in SSE, a processor instruction for rounding.

1115
01:01:54,000 --> 01:01:57,500
So it should really be one instruction to do what was current

1116
01:01:57,500 --> 01:02:00,100
previously, taking hundreds of instructions and function calls and

1117
01:02:00,100 --> 01:02:00,400
everything.

1118
01:02:00,400 --> 01:02:04,300
There, it should just be able to call Just One of these and so we

1119
01:02:04,300 --> 01:02:12,000
should be able to round a, we should be able to round a floating point

1120
01:02:12,000 --> 01:02:15,600
value with with just, you know, going straight away.

1121
01:02:16,300 --> 01:02:16,600
So,

1122
01:02:16,800 --> 01:02:18,500
Let's take a look at that in a second here.

1123
01:02:18,500 --> 01:02:21,800
I believe I can't remember the names of these here.

1124
01:02:21,800 --> 01:02:25,800
Let me see if we if there's any way I can isolate them.

1125
01:02:25,800 --> 01:02:27,500
It's like convert PS.

1126
01:02:27,500 --> 01:02:30,300
We used it on the in fact you know what?

1127
01:02:34,600 --> 01:02:36,600
It's right here, right?

1128
01:02:37,100 --> 01:02:40,300
CVT TPS is.

1129
01:02:40,600 --> 01:02:46,900
I believe the one that does truncation the extra T without the extra T

1130
01:02:46,900 --> 01:02:50,200
I believe it doesn't do truncation does rounding right.

1131
01:02:55,500 --> 01:02:59,800
So let's see here, it's convert PS epi32.

1132
01:03:01,300 --> 01:03:02,900
Convert packed single Precision.

1133
01:03:02,900 --> 01:03:07,100
Three fluorine has in a 2-pack, 32 Miniatures, and store the results

1134
01:03:07,100 --> 01:03:12,700
in test and I believe it will just use whatever the mode is of the

1135
01:03:12,700 --> 01:03:16,000
chip at that time, which will be rounding if we haven't set it to

1136
01:03:16,000 --> 01:03:17,000
anything else.

1137
01:03:17,900 --> 01:03:22,700
So this is all we really need to call now, we don't need to do packed

1138
01:03:22,700 --> 01:03:25,700
singles because we're only converting one, but I don't know if they

1139
01:03:25,700 --> 01:03:27,400
have a convert s sf32.

1140
01:03:28,400 --> 01:03:28,800
Do they?

1141
01:03:28,800 --> 01:03:29,500
They do.

1142
01:03:30,800 --> 01:03:31,000
So.

1143
01:03:31,300 --> 01:03:33,400
That's also in SC2 and that's fine.

1144
01:03:33,700 --> 01:03:38,000
So if we want to do a convert SS in this case let's see what this does

1145
01:03:38,000 --> 01:03:40,700
convert the lower single-precision floating-point element into a

1146
01:03:40,700 --> 01:03:45,900
32-bit integer and store the result in death so convert sssi 32 should

1147
01:03:45,900 --> 01:03:50,800
be what we want and it should just preserve provide the integer that

1148
01:03:50,800 --> 01:03:52,500
we are looking for, right?

1149
01:03:53,600 --> 01:03:57,100
So, what we should be able to do here, I would hope is to just say,

1150
01:03:57,100 --> 01:04:07,000
okay, really, all we wanted was mmm convert SS SI 32, mmm, set, 1, PS.

1151
01:04:08,900 --> 01:04:09,900
Real 32.

1152
01:04:12,500 --> 01:04:17,100
And so that's I think and I guess set 1ss is really what we want.

1153
01:04:18,200 --> 01:04:20,400
Set SS.

1154
01:04:22,000 --> 01:04:25,100
All we really want to do is say, hey, take this float and round it

1155
01:04:25,100 --> 01:04:25,800
please.

1156
01:04:26,900 --> 01:04:28,600
That would be nice of you.

1157
01:04:35,700 --> 01:04:41,400
And presumably we can do this in either case, I don't actually know if

1158
01:04:41,400 --> 01:04:44,500
there's a way to do this in a way that doesn't involve casting because

1159
01:04:44,500 --> 01:04:50,900
I don't think they provide any version that that would do it that way.

1160
01:04:50,900 --> 01:04:53,700
We just have to take the rounding one way or the other.

1161
01:04:55,300 --> 01:04:58,400
Let's see ya.

1162
01:04:58,500 --> 01:05:01,300
So we're just going to have to do it that way but I think that's all

1163
01:05:01,300 --> 01:05:01,900
we need.

1164
01:05:02,300 --> 01:05:05,300
So if we do that in theory we should be good.

1165
01:05:05,500 --> 01:05:08,100
I don't actually know that's verify that our game is not all broken,

1166
01:05:08,100 --> 01:05:09,500
but it doesn't appear to be broken.

1167
01:05:11,000 --> 01:05:13,200
So now we've at least gotten rid of those calls, let's take a quick

1168
01:05:13,200 --> 01:05:17,200
look here to and see if that helps at all.

1169
01:05:17,900 --> 01:05:18,700
It's getting better.

1170
01:05:18,800 --> 01:05:20,300
Still not great, it's getting better.

1171
01:05:20,900 --> 01:05:24,700
So, let's take a look now and see if we've gotten rid of that.

1172
01:05:24,700 --> 01:05:26,400
Oh, that was good.

1173
01:05:27,100 --> 01:05:30,600
Get I said that and I was comparing the non-optimized version.

1174
01:05:30,600 --> 01:05:32,900
Now, let's see how our optimized version is, now that we've gotten

1175
01:05:32,900 --> 01:05:35,100
that that call of round F out of there.

1176
01:05:40,400 --> 01:05:41,600
Ha ha ha.

1177
01:05:42,000 --> 01:05:45,700
All right now you will notice that it has basically gotten slammed

1178
01:05:45,700 --> 01:05:49,500
down from what I think started at nine percent of the time down two

1179
01:05:49,500 --> 01:05:51,200
point eight, seven percent of the time.

1180
01:05:51,200 --> 01:05:52,100
So I was right.

1181
01:05:52,100 --> 01:05:56,000
I was like I was going to say removing that that call like, multiple

1182
01:05:56,000 --> 01:05:59,800
for calls to round outside of the inner part of that,

1183
01:06:00,000 --> 01:06:03,400
Should have done a lot more in it did so they're okay.

1184
01:06:03,400 --> 01:06:04,100
So

1185
01:06:09,800 --> 01:06:11,900
I'll say a couple things about that because I think it's a really good

1186
01:06:11,900 --> 01:06:14,200
illustration of a bunch of things that we've said many times I've had

1187
01:06:14,200 --> 01:06:15,600
made hero and they come up occasionally.

1188
01:06:15,600 --> 01:06:16,500
So number one

1189
01:06:19,800 --> 01:06:21,900
How important is that profiling, right?

1190
01:06:22,200 --> 01:06:26,700
We were very quickly, able to zero in on what the problem was and know

1191
01:06:26,800 --> 01:06:28,400
what was going wrong, right?

1192
01:06:28,400 --> 01:06:31,800
So having a profiler always running, it's just great for awareness,

1193
01:06:31,800 --> 01:06:32,400
right?

1194
01:06:33,200 --> 01:06:34,000
Number two,

1195
01:06:35,700 --> 01:06:38,500
Being able to read the assembly, right?

1196
01:06:38,700 --> 01:06:43,100
The only way I started to know what could be going on there is because

1197
01:06:43,100 --> 01:06:45,100
I looked at the actual Assembly Language code.

1198
01:06:45,100 --> 01:06:48,000
Now I'm not a great Assembly Language program, I don't write very many

1199
01:06:48,000 --> 01:06:49,500
things in Assembly Language ever.

1200
01:06:49,800 --> 01:06:53,100
Most of the time I just use intrinsics which you know, is not very

1201
01:06:53,100 --> 01:06:53,600
good, right?

1202
01:06:53,600 --> 01:06:55,800
It's a pretty, it's a poor man's assembly.

1203
01:06:56,000 --> 01:06:59,900
It's not as good nearly as running things in assembly, but I can read

1204
01:06:59,900 --> 01:07:03,500
it well enough to just to just get a basic idea of what the processor

1205
01:07:03,500 --> 01:07:03,900
is doing.

1206
01:07:04,100 --> 01:07:05,400
And know when things are too.

1207
01:07:05,600 --> 01:07:06,600
Totally wrong.

1208
01:07:06,800 --> 01:07:10,800
Which in that case they were, we saw it fail to inline a function

1209
01:07:10,800 --> 01:07:14,800
because of use of C++ features a very common thing that you have to be

1210
01:07:14,800 --> 01:07:17,200
aware of and you need to pull back on those features when it's

1211
01:07:17,200 --> 01:07:17,700
happening.

1212
01:07:18,400 --> 01:07:22,200
And then we saw using the C runtime library to do around not

1213
01:07:22,200 --> 01:07:22,800
acceptable.

1214
01:07:22,800 --> 01:07:26,200
Because even though the C runtime library is built into the compiler,

1215
01:07:26,200 --> 01:07:27,700
in the compiler, knows all about it.

1216
01:07:28,000 --> 01:07:29,600
It's still doing a really stupid thing.

1217
01:07:29,600 --> 01:07:32,500
They're probably because of some requirements in the spec.

1218
01:07:33,200 --> 01:07:36,700
Now there's ways we probably could have forced it to do something less

1219
01:07:36,700 --> 01:07:37,200
stupid there.

1220
01:07:37,200 --> 01:07:40,000
So for example, there are flags, you can pass the compiler that say

1221
01:07:40,000 --> 01:07:42,800
stuff like don't try to be all that accurate with floating Point

1222
01:07:42,800 --> 01:07:43,300
numbers.

1223
01:07:43,300 --> 01:07:47,400
And sometimes those will help make calls like round F, not have that

1224
01:07:47,400 --> 01:07:50,300
problem, but in our case, we don't want to do that.

1225
01:07:50,300 --> 01:07:53,300
What I'd much rather do is thing I said before, which is get rid of as

1226
01:07:53,300 --> 01:07:54,700
many C runtime Library calls.

1227
01:07:54,700 --> 01:07:58,000
We can because if we implemented them then we know they're not doing

1228
01:07:58,000 --> 01:07:58,900
anything too stupid.

1229
01:07:58,900 --> 01:08:01,800
And if they are do something stupid, we at least know what it is.

1230
01:08:01,800 --> 01:08:02,900
We know our own

1231
01:08:03,200 --> 01:08:06,300
Pity, we don't know the compiler stupidity and we don't know the C

1232
01:08:06,300 --> 01:08:09,400
runtime Library stupidity, but we probably do know, is that it?

1233
01:08:09,400 --> 01:08:10,600
It knows no bounds.

1234
01:08:10,700 --> 01:08:13,900
They can be as stupid in some cases, as you could possibly imagine.

1235
01:08:13,900 --> 01:08:17,000
In this case, that's one of them because again, not because the people

1236
01:08:17,000 --> 01:08:19,800
who wrote it, we're necessarily doing something dumb, but because they

1237
01:08:19,800 --> 01:08:22,500
have to follow something, that may be very stupid from our

1238
01:08:22,500 --> 01:08:26,100
perspective, but that was the requirement for what they were doing.

1239
01:08:29,100 --> 01:08:35,100
So happiness upon all happiness is now just from that minor

1240
01:08:35,100 --> 01:08:40,899
investigation, what you will note is that we have dramatically reduced

1241
01:08:41,200 --> 01:08:44,399
the degree to which, any of those things was affecting our frame rate

1242
01:08:44,399 --> 01:08:46,700
at all now, right?

1243
01:08:47,300 --> 01:08:48,800
I think you can see that.

1244
01:08:49,600 --> 01:08:53,899
Now, we're up in in just the platform layer in the debug layer are the

1245
01:08:53,899 --> 01:08:55,399
only things taking any time.

1246
01:08:55,600 --> 01:08:57,500
So let's pop back to debug

1247
01:08:57,700 --> 01:08:58,000
Mode.

1248
01:08:58,000 --> 01:08:59,399
And now see where we're at.

1249
01:08:59,399 --> 01:08:59,800
For our

1250
01:09:00,000 --> 01:09:04,100
Bug builds time usage, just to get a feel for it.

1251
01:09:04,899 --> 01:09:09,100
So now we can see that render pieces and render volume still do take a

1252
01:09:09,100 --> 01:09:11,600
little bit more time than I think, we would probably like.

1253
01:09:11,800 --> 01:09:14,399
So let's just push a little deeper into those and see if there's

1254
01:09:14,399 --> 01:09:17,100
anything we could do to make them in debug mode.

1255
01:09:17,100 --> 01:09:17,800
Go, faster.

1256
01:09:17,800 --> 01:09:21,300
Even though we don't care about that for shipping the game, it'd just

1257
01:09:21,300 --> 01:09:23,800
be nice to know what was happening there.

1258
01:09:26,000 --> 01:09:28,899
All right, so let's take a look.

1259
01:09:28,899 --> 01:09:32,100
Probably just too many function calls, like a death by 1000 function

1260
01:09:32,100 --> 01:09:35,700
calls, but you know, let's take a look inside.

1261
01:09:35,800 --> 01:09:39,300
Say, push volume is our worst offender at the moment.

1262
01:09:45,399 --> 01:09:47,800
Of course, for some reason, I can't find it.

1263
01:09:50,899 --> 01:09:51,800
It is pushed volume.

1264
01:09:51,800 --> 01:09:54,000
Is it not render volume?

1265
01:09:55,500 --> 01:09:57,100
Sorry render volume.

1266
01:10:01,100 --> 01:10:01,700
Nope.

1267
01:10:05,300 --> 01:10:10,800
Surrender volume is exclusively calling push volume outline and so,

1268
01:10:10,800 --> 01:10:12,400
push volume outline.

1269
01:10:16,500 --> 01:10:17,600
It kind of makes sense.

1270
01:10:17,600 --> 01:10:18,900
Why that's our worst case.

1271
01:10:18,900 --> 01:10:23,000
It's doing a lot of these line segments, doodads, and those line

1272
01:10:23,000 --> 01:10:27,300
segments doodads, obviously, do a lot of nasty stuff, right?

1273
01:10:27,300 --> 01:10:32,300
You can see in here we've got these like length things happening and

1274
01:10:32,300 --> 01:10:33,600
all kinds of stuff like that.

1275
01:10:33,600 --> 01:10:37,000
It's not great and blah, blah blah.

1276
01:10:37,400 --> 01:10:41,100
Let's take a look at push line segment 0 and in this got two of these

1277
01:10:41,100 --> 01:10:42,800
packs here going down.

1278
01:10:45,500 --> 01:10:48,200
And so, that's going to do a bunch of calls to round real 32.

1279
01:10:48,200 --> 01:10:51,900
But fortunately, at least we removed the really bad stuff from there

1280
01:10:51,900 --> 01:10:56,700
and in release mode, it'll be quite efficient, probably, so let's take

1281
01:10:56,700 --> 01:11:00,200
a jump, a little Gander, a little look-see, a little, you know, a

1282
01:11:00,200 --> 01:11:03,800
little bit of a, just take a little bit of a gloved finger in here and

1283
01:11:03,800 --> 01:11:07,800
just kind of feel around and see what we can palpate.

1284
01:11:08,500 --> 01:11:10,800
What I'm going to do here is just I'm going to skip over these because

1285
01:11:10,800 --> 01:11:13,600
I think they're probably as good as they're going to get again in

1286
01:11:13,600 --> 01:11:14,200
release mode.

1287
01:11:14,200 --> 01:11:14,800
I think they would

1288
01:11:15,100 --> 01:11:18,400
Now down to very clean at the moment, although they could still be

1289
01:11:18,400 --> 01:11:19,100
made cleaner.

1290
01:11:19,100 --> 01:11:25,100
Certainly, in fact, I could show you some stuff about that pretty

1291
01:11:25,100 --> 01:11:25,400
easily.

1292
01:11:25,400 --> 01:11:29,600
Anyway, we're doing some of these things here, the inner, and so on

1293
01:11:29,900 --> 01:11:30,200
functions.

1294
01:11:30,200 --> 01:11:31,700
Again, that's just going to be basic math.

1295
01:11:31,700 --> 01:11:32,600
That's okay.

1296
01:11:33,000 --> 01:11:33,900
Still calling down through.

1297
01:11:33,900 --> 01:11:36,900
Again, these are just basic math Ops, let's take a look into that

1298
01:11:36,900 --> 01:11:37,400
length.

1299
01:11:37,800 --> 01:11:40,000
I'm just interested in what's going on there because that, you know,

1300
01:11:40,000 --> 01:11:42,300
length does have a square root involved.

1301
01:11:42,500 --> 01:11:44,000
So let's see what's happening here.

1302
01:11:45,200 --> 01:11:49,500
There's our call to length squared again, that should just be math.

1303
01:11:49,700 --> 01:11:50,700
Nothing weird there.

1304
01:11:50,700 --> 01:11:53,900
And an inner product again, nothing where they're just basic math Ops.

1305
01:11:53,900 --> 01:11:56,600
So way to any function calls but those should all go away and release

1306
01:11:56,600 --> 01:11:59,600
mode and based on the profile looks like mostly they were

1307
01:12:00,300 --> 01:12:02,500
But once we get out of here, then we're going to call square, root

1308
01:12:02,500 --> 01:12:02,900
square.

1309
01:12:02,900 --> 01:12:09,100
Root is calling this, which I don't even want to hit f11 right now I

1310
01:12:10,200 --> 01:12:13,000
I'm hitting it and I'm sort of looking to the side.

1311
01:12:13,000 --> 01:12:14,000
This is again C.

1312
01:12:14,000 --> 01:12:15,200
Runtime Library.

1313
01:12:22,200 --> 01:12:26,800
Oh, so we don't have that, I guess we don't have their Square routine

1314
01:12:26,800 --> 01:12:27,900
in here, so that's fine.

1315
01:12:27,900 --> 01:12:29,000
We look at the assembly.

1316
01:12:29,800 --> 01:12:30,900
So let's see what we do.

1317
01:12:31,000 --> 01:12:34,800
Okay, so mind you square, root is one instruction on next 64.

1318
01:12:34,800 --> 01:12:37,400
Here's what the C runtime library is doing again, probably because it

1319
01:12:37,400 --> 01:12:37,900
has to handle.

1320
01:12:37,900 --> 01:12:42,400
All kinds of weird cases, we skipped over this handle error case, so

1321
01:12:42,400 --> 01:12:43,300
that's good.

1322
01:12:44,700 --> 01:12:49,000
And and then hey, at the end of it, we finally issue squirt SS to

1323
01:12:49,000 --> 01:12:50,200
actually do the square root.

1324
01:12:50,200 --> 01:12:51,800
So at least, it does the one

1325
01:12:52,000 --> 01:12:53,100
Square root, which is nice.

1326
01:12:56,000 --> 01:12:57,500
That's not that ownerís.

1327
01:12:57,500 --> 01:13:01,500
I didn't I squirmy my I didn't need to square them too much, although,

1328
01:13:01,500 --> 01:13:02,000
I mean, yeah.

1329
01:13:02,000 --> 01:13:04,800
Come on, you know, that's way too many for a square root that should

1330
01:13:04,800 --> 01:13:05,800
be one instruction.

1331
01:13:06,300 --> 01:13:07,700
So let's replace that one, too.

1332
01:13:07,700 --> 01:13:11,600
Just because we can, but at the moment you know, not not as egregious

1333
01:13:11,600 --> 01:13:14,600
as I feared, sometimes those you step into a square root and you're

1334
01:13:14,600 --> 01:13:18,700
just like, oh God, the, you know, the horror the humanity of it all,

1335
01:13:18,700 --> 01:13:21,500
you know, and you're just like, you're just terrified.

1336
01:13:22,000 --> 01:13:24,300
So I'm just going to scan through here to see if anything else

1337
01:13:24,300 --> 01:13:25,500
particularly now.

1338
01:13:25,700 --> 01:13:26,400
He is happening.

1339
01:13:26,600 --> 01:13:27,800
I don't suspect it is.

1340
01:13:27,800 --> 01:13:30,500
Again, I think this is just a case of like death by a thousand calls

1341
01:13:30,500 --> 01:13:33,500
that would all be inlined in a normal circumstance.

1342
01:13:33,500 --> 01:13:37,400
And look like they are from our other from our release mode profile.

1343
01:13:37,400 --> 01:13:40,200
So not too concerning.

1344
01:13:41,400 --> 01:13:42,200
See here.

1345
01:13:42,300 --> 01:13:44,200
Nothing else happening down here.

1346
01:13:45,300 --> 01:13:47,200
Not too much.

1347
01:13:48,100 --> 01:13:50,700
So I'm going to go ahead and just and just fix that while we can't

1348
01:13:50,700 --> 01:13:53,900
while we have the opportunity to do that as well.

1349
01:13:56,300 --> 01:13:57,400
So let's see here.

1350
01:13:58,300 --> 01:14:00,600
Is it in intrinsics squirt?

1351
01:14:00,600 --> 01:14:01,200
Deaf

1352
01:14:04,600 --> 01:14:05,100
So there it is.

1353
01:14:05,100 --> 01:14:08,800
So we've got, we've got our squirt F here.

1354
01:14:09,400 --> 01:14:13,600
And I just want to change this to something that's a little more sane,

1355
01:14:13,600 --> 01:14:17,100
like I said, so I'll fix it to our new naming scheme as well.

1356
01:14:17,100 --> 01:14:18,600
So, we know we've touched it recently.

1357
01:14:21,700 --> 01:14:24,800
So, all I really need to do here again is just lean on the fact that

1358
01:14:24,800 --> 01:14:26,800
we have a square root instruction already.

1359
01:14:27,000 --> 01:14:29,300
Here it is, it's m/s squared PS.

1360
01:14:29,300 --> 01:14:32,900
It was in sse2, which means basically all processors today.

1361
01:14:32,900 --> 01:14:37,200
Have it so you can go ahead and just call this directly.

1362
01:14:37,200 --> 01:14:39,100
It's going to do exactly what we want.

1363
01:14:41,200 --> 01:14:42,300
So let's just do it.

1364
01:14:42,700 --> 01:14:46,500
So again that's M square and I'm going to use SS in this case because

1365
01:14:46,500 --> 01:14:48,100
we don't need to do all of them.

1366
01:14:48,600 --> 01:14:51,100
There really isn't much of a difference between squirt.

1367
01:14:51,600 --> 01:14:53,100
PS and square SS.

1368
01:14:53,400 --> 01:14:59,200
However, in some cases and you can see here for example, in some cases

1369
01:14:59,200 --> 01:14:59,800
there are either

1370
01:15:00,200 --> 01:15:06,400
Slight performance differences or power differences like the chip can

1371
01:15:06,400 --> 01:15:08,900
use less power if it doesn't have to do all the lanes or whatever

1372
01:15:09,100 --> 01:15:12,300
there are reasons, why you may want to pay attention.

1373
01:15:12,500 --> 01:15:15,200
So even though it doesn't really matter whether we do all of them or

1374
01:15:15,200 --> 01:15:19,500
just one of them in most cases it till if you happen to know that

1375
01:15:19,500 --> 01:15:23,200
you're only doing one lane instead of four lanes or multiple Lanes,

1376
01:15:24,000 --> 01:15:25,500
you might as well, right?

1377
01:15:27,600 --> 01:15:31,700
It just makes sense to not ask the processor to do things, you know,

1378
01:15:31,700 --> 01:15:32,800
it doesn't have to do.

1379
01:15:33,700 --> 01:15:39,300
Okay, did I do that wrong?

1380
01:15:39,300 --> 01:15:40,500
What did I do wrong?

1381
01:15:42,200 --> 01:15:45,200
Set SS, right?

1382
01:15:47,400 --> 01:15:49,200
And I'm squirt SS.

1383
01:15:52,300 --> 01:15:53,600
Takes it in 128.

1384
01:15:53,900 --> 01:15:55,000
Oh duh.

1385
01:15:57,600 --> 01:16:02,200
this obviously I have to actually extract this floating point value

1386
01:16:02,200 --> 01:16:05,800
now, I don't know if there's no God

1387
01:16:09,300 --> 01:16:10,100
I don't know what happened there.

1388
01:16:10,100 --> 01:16:12,700
I accidentally hit like some debug key or something.

1389
01:16:13,800 --> 01:16:15,500
Can I extract it?

1390
01:16:20,600 --> 01:16:25,700
Yeah, so unfortunately, I have to store it with a pointer, I don't

1391
01:16:25,700 --> 01:16:26,000
know.

1392
01:16:26,000 --> 01:16:28,900
I don't remember if there's an intrinsic for just give me the value.

1393
01:16:28,900 --> 01:16:31,300
I don't think there is but there might be

1394
01:16:36,300 --> 01:16:39,500
Let's see if store so store doesn't have it.

1395
01:16:39,500 --> 01:16:40,700
What is the category?

1396
01:16:40,700 --> 01:16:42,000
Does it say which category is?

1397
01:16:42,000 --> 01:16:42,700
These are in

1398
01:16:44,700 --> 01:16:48,300
It doesn't say which category they're in because what I basically want

1399
01:16:48,300 --> 01:16:53,600
is like the 14 convert SS.

1400
01:16:54,100 --> 01:16:57,700
I want one that just Returns the floating point value, and I don't

1401
01:16:57,700 --> 01:17:00,600
know what category that's considered to be in.

1402
01:17:00,600 --> 01:17:02,300
It's not considered to be in storing.

1403
01:17:02,900 --> 01:17:06,400
It might be considered to be in round like a, if they've got rounding

1404
01:17:06,400 --> 01:17:07,000
on here,

1405
01:17:13,700 --> 01:17:14,600
Convert.

1406
01:17:14,600 --> 01:17:15,200
There we go.

1407
01:17:16,600 --> 01:17:20,000
So, convert our cast might be the right ways to look at it.

1408
01:17:20,600 --> 01:17:23,700
And let's just see, does anything ever return a float?

1409
01:17:24,100 --> 01:17:24,700
Here we go.

1410
01:17:25,500 --> 01:17:27,400
So, think this is all we want.

1411
01:17:28,900 --> 01:17:31,500
Copy the lower stem position to a to death.

1412
01:17:31,500 --> 01:17:37,300
Yes, so that's that's what I actually want convert sf32, so I'll call

1413
01:17:37,300 --> 01:17:38,000
that here.

1414
01:17:43,300 --> 01:17:47,200
And then we now have a square root that in theory should just work

1415
01:17:47,400 --> 01:17:47,900
right.

1416
01:17:51,600 --> 01:17:52,800
And it does look like it does.

1417
01:17:52,800 --> 01:17:54,900
I don't see any obvious problems there.

1418
01:17:55,200 --> 01:17:56,600
Let's take a look at the profile again.

1419
01:17:58,800 --> 01:17:59,500
So

1420
01:18:00,100 --> 01:18:03,200
Yeah, again, render volume not not good.

1421
01:18:03,200 --> 01:18:08,400
In this case still very, very slow, right render pieces continues to

1422
01:18:08,400 --> 01:18:12,600
get better but render volume unfortunately does not.

1423
01:18:13,600 --> 01:18:15,400
So, not much I can do about that, unfortunately.

1424
01:18:15,400 --> 01:18:17,200
But anyway, wanted to get rid of that as well.

1425
01:18:18,300 --> 01:18:20,900
So I don't really know what we can do with render volume.

1426
01:18:25,500 --> 01:18:29,900
again, because the optimized version seems to work relatively well,

1427
01:18:33,200 --> 01:18:36,100
I don't know how much time I want to spend on it, but let me just

1428
01:18:36,100 --> 01:18:37,400
verify that that is true.

1429
01:18:46,400 --> 01:18:50,100
Yeah, you know, these are just so low on the totem pole at this point.

1430
01:19:03,000 --> 01:19:06,100
And then basically, our whole game takes almost no time, right?

1431
01:19:06,100 --> 01:19:07,700
Our game is just this down here.

1432
01:19:08,300 --> 01:19:11,100
And so really, the only thing we're still even responsible.

1433
01:19:11,100 --> 01:19:14,400
For those taking time is the opengl renderer commands where we are

1434
01:19:14,400 --> 01:19:15,300
outputting those render commands.

1435
01:19:15,300 --> 01:19:18,400
I'm not sure why that's taking so much time and we should probably

1436
01:19:18,400 --> 01:19:19,700
look at that as well.

1437
01:19:20,000 --> 01:19:21,900
It could be, you know, because of calls to the driver.

1438
01:19:21,900 --> 01:19:25,100
It could be something we're doing stupid either way something we

1439
01:19:25,100 --> 01:19:28,800
probably want to look at eventually but that's just yeah.

1440
01:19:29,400 --> 01:19:29,900
So I don't know.

1441
01:19:29,900 --> 01:19:31,900
We could try to optimize that further.

1442
01:19:31,900 --> 01:19:32,600
I might just

1443
01:19:32,900 --> 01:19:34,600
I guess we don't really care in this case.

1444
01:19:40,400 --> 01:19:41,400
And we should just let it go.

1445
01:19:45,900 --> 01:19:48,800
In the meantime, opengl renderer commands is causing us trouble even

1446
01:19:48,800 --> 01:19:53,100
in debug mode which is unfortunate and yeah, that render volume just

1447
01:19:53,100 --> 01:19:55,900
takes a ton of time and it would be nice in debug mode if we could

1448
01:19:55,900 --> 01:19:56,700
speed it up at all.

1449
01:19:57,700 --> 01:20:00,100
I guess the other thing we could do is just render less volumes.

1450
01:20:00,600 --> 01:20:02,700
Because the other thing about that is we don't really need those on

1451
01:20:02,700 --> 01:20:04,600
except when we're doing active de bugging.

1452
01:20:04,900 --> 01:20:07,300
So what I could do is just not do those, right?

1453
01:20:07,300 --> 01:20:10,200
And so you know have a switch for rendering those

1454
01:20:12,900 --> 01:20:17,600
Turning them on and off so that we didn't have them open you know, up

1455
01:20:17,600 --> 01:20:19,400
when we didn't actually need them to be up.

1456
01:20:19,800 --> 01:20:21,500
That's certainly one thing we could do.

1457
01:20:24,000 --> 01:20:27,600
But in the meantime, let me also take a quick look at that open jails

1458
01:20:27,600 --> 01:20:30,200
because it turned out to be sort of a little bit of a performance

1459
01:20:30,200 --> 01:20:34,100
check day, we might as well just go ahead and look at that as well.

1460
01:20:34,500 --> 01:20:39,900
So if we were to look at the opengl render commands function, which is

1461
01:20:39,900 --> 01:20:44,000
here, you know, this is what we're actually dealing with and we don't

1462
01:20:44,000 --> 01:20:48,900
really have any idea what our performance profile is in this

1463
01:20:48,900 --> 01:20:50,100
particular case.

1464
01:20:50,100 --> 01:20:53,600
Like we don't know how many times through this Loop.

1465
01:20:53,800 --> 01:20:54,800
We're going.

1466
01:20:54,800 --> 01:20:58,500
We don't know, you know how much we're stalling behind any of these

1467
01:20:58,500 --> 01:20:59,800
particular calls.

1468
01:21:00,000 --> 01:21:02,000
We really just don't know anything about it.

1469
01:21:02,100 --> 01:21:07,000
All we know is that we time to the whole thing and we're getting that

1470
01:21:07,000 --> 01:21:07,400
result.

1471
01:21:07,400 --> 01:21:11,000
Now, I don't remember where that timing actually occurs.

1472
01:21:14,000 --> 01:21:15,000
We'll have to see.

1473
01:21:15,200 --> 01:21:18,300
So let me, let me take a look at where what we're, what we're actually

1474
01:21:18,300 --> 01:21:19,200
timing in there.

1475
01:21:19,700 --> 01:21:21,500
Opengl renderer commands,

1476
01:21:27,100 --> 01:21:30,100
That's this function, but where is the timer?

1477
01:21:33,400 --> 01:21:35,600
Are we timing it outside?

1478
01:21:43,100 --> 01:21:47,000
Okay, so we're tiny it outside and here you can see the swap buffers

1479
01:21:47,000 --> 01:21:50,100
call getting timed and the opengl renderer commands getting timed.

1480
01:21:50,700 --> 01:21:55,100
If I wanted to in here, I could definitely do some more targeted

1481
01:21:55,100 --> 01:21:59,200
profiling, just to see, you know, which of these things was doing

1482
01:21:59,200 --> 01:22:03,200
anything, you know, something like this.

1483
01:22:19,800 --> 01:22:24,500
You know what I would expect to see is I would expect to see the, you

1484
01:22:24,500 --> 01:22:29,300
know, let the, the quads is where everything's happening.

1485
01:22:30,100 --> 01:22:33,500
So, you know, I would expect to see the Lion's Share of the time spent

1486
01:22:33,500 --> 01:22:34,000
in there.

1487
01:22:34,000 --> 01:22:37,300
If I don't, I'm going to be, particularly surprised, not that that's

1488
01:22:37,300 --> 01:22:37,900
unusual.

1489
01:22:37,900 --> 01:22:38,600
But yeah.

1490
01:22:38,600 --> 01:22:39,600
So you can see here.

1491
01:22:40,600 --> 01:22:43,900
Five calls to the text 5.

1492
01:22:44,700 --> 01:22:48,300
Executions of the textured quads block is taking basically,

1493
01:22:48,500 --> 01:22:51,100
All of that time now granted.

1494
01:22:51,100 --> 01:22:56,400
You can imagine that the time spent in here actually is changing when

1495
01:22:56,400 --> 01:22:59,500
I'm opening closing this, the reason for that is because that's

1496
01:22:59,500 --> 01:23:02,500
actually a call that has to draw the debug system, and the debug

1497
01:23:02,500 --> 01:23:06,600
system gets tons, you know, there's a lot more quads that get end up

1498
01:23:06,600 --> 01:23:07,700
getting put in here.

1499
01:23:07,900 --> 01:23:13,100
When the debug system is open and what we can see, is every time we

1500
01:23:13,100 --> 01:23:16,700
call through here, there's a certain amount of Preamble, and then

1501
01:23:16,700 --> 01:23:18,200
there's the actual Loop itself.

1502
01:23:18,600 --> 01:23:21,900
And what I would assume is that because the Preamble is only getting

1503
01:23:21,900 --> 01:23:23,400
executed five times.

1504
01:23:23,600 --> 01:23:29,700
Again, I would be pretty surprised to find that the time was being

1505
01:23:29,700 --> 01:23:34,000
spent anywhere other than the quad loop, right.

1506
01:23:34,100 --> 01:23:37,600
I would expect this Loop specifically because it's executing on every

1507
01:23:37,600 --> 01:23:40,900
quad to be the one that takes all the time and I would expect the rest

1508
01:23:40,900 --> 01:23:42,600
of this stuff to be irrelevant.

1509
01:23:43,000 --> 01:23:45,900
So I'm guessing that if I just time just that one portion.

1510
01:23:46,100 --> 01:23:48,300
It should take all the time and everybody else is

1511
01:23:48,400 --> 01:23:49,800
Take any right?

1512
01:23:50,100 --> 01:23:52,900
And that seems to be the case because now opengl renderer commands is

1513
01:23:52,900 --> 01:23:56,300
doubt down to 4% of the time and opengl quad loop is at 22.

1514
01:23:56,700 --> 01:23:59,800
That still seems a little high like it doesn't really make

1515
01:24:00,000 --> 01:24:00,900
Whole lot of sense to me.

1516
01:24:00,900 --> 01:24:03,300
Why all of this stuff is taking that much time.

1517
01:24:03,300 --> 01:24:06,800
This only happens one time because most of time we have all the frame

1518
01:24:06,800 --> 01:24:07,000
buffer.

1519
01:24:07,000 --> 01:24:11,300
So we're talking about just this and some of this like boilerplate

1520
01:24:11,300 --> 01:24:15,000
stuff here like binding, the frame buffers and stuff is really taking

1521
01:24:15,000 --> 01:24:17,300
that much time to only do that a few times.

1522
01:24:17,400 --> 01:24:19,300
It's a little odd, right?

1523
01:24:20,100 --> 01:24:24,500
But 20% of the time is spent in here and that to me does make more

1524
01:24:24,500 --> 01:24:25,000
sense.

1525
01:24:25,900 --> 01:24:29,800
I'm assuming that the problem is behind the driver because this Loop

1526
01:24:30,000 --> 01:24:33,300
It is not really doing very much but I don't know that that's the

1527
01:24:33,300 --> 01:24:33,800
case.

1528
01:24:34,000 --> 01:24:37,000
And so what I'd like to do is verify that the driver is the thing

1529
01:24:37,000 --> 01:24:41,700
taking the time before I assume that it's not and furthermore it would

1530
01:24:41,700 --> 01:24:46,900
seem like maybe that's suspicion isn't really valid because if it was

1531
01:24:47,000 --> 01:24:51,200
then why does it get faster potentially in release mode or maybe it's

1532
01:24:51,200 --> 01:24:56,700
not getting any faster and Lisa and everything else is just like let's

1533
01:24:56,700 --> 01:24:58,200
in fact we could we could figure that out.

1534
01:24:58,300 --> 01:24:59,800
So here it is in debug mode.

1535
01:25:02,100 --> 01:25:03,700
And there's the cycle count, right?

1536
01:25:03,700 --> 01:25:05,100
It's like, let's see.

1537
01:25:05,100 --> 01:25:05,800
One, two, three.

1538
01:25:05,800 --> 01:25:06,500
One, two, three 20.

1539
01:25:06,500 --> 01:25:10,100
So it's like 23 million Cycles, right?

1540
01:25:11,600 --> 01:25:14,800
So, let's see if it's still 23 million Cycles.

1541
01:25:14,800 --> 01:25:15,400
Now,

1542
01:25:22,300 --> 01:25:25,900
So it is so what I can basically determine from that is that pretty

1543
01:25:25,900 --> 01:25:28,600
much there's probably nothing we're going to be able to do about that.

1544
01:25:28,600 --> 01:25:33,700
While we're still in the old school setting textures lots of times

1545
01:25:33,800 --> 01:25:38,500
because basically the driver is just thrashing around hating life

1546
01:25:39,100 --> 01:25:44,800
really badly because of this whole situation here, right?

1547
01:25:47,700 --> 01:25:50,900
And that's unfortunate, but that's just the case, right?

1548
01:25:51,800 --> 01:25:55,000
So what we would have to do if we wanted to fix, this is we would have

1549
01:25:55,000 --> 01:26:02,400
to make it so that the textures again were being handled in a more

1550
01:26:02,400 --> 01:26:06,500
thoughtful way so that they were, you know, in a texture array or

1551
01:26:06,500 --> 01:26:07,500
something similar.

1552
01:26:08,100 --> 01:26:10,800
And the reason we're not doing that right now is our textures are all

1553
01:26:10,800 --> 01:26:12,300
sorts of unusual sizes.

1554
01:26:12,600 --> 01:26:16,100
So it's not a simple matter to just throw them into a texture array.

1555
01:26:16,100 --> 01:26:17,400
It's not that simple.

1556
01:26:17,600 --> 01:26:20,700
Because texture array elements have to all be the same size and it's

1557
01:26:20,700 --> 01:26:21,600
unclear exactly.

1558
01:26:21,700 --> 01:26:22,800
Lee, how we would do that, right?

1559
01:26:22,800 --> 01:26:25,700
We'd have to go to something fancier like a texture tiling scheme.

1560
01:26:27,700 --> 01:26:30,800
For a bigger size textures or who knows what right?

1561
01:26:30,800 --> 01:26:34,300
So there's a lot of issues at stake there or at play there and it's

1562
01:26:34,300 --> 01:26:36,200
not a simple matter to

1563
01:26:37,700 --> 01:26:38,600
To resolve that.

1564
01:26:38,700 --> 01:26:41,600
But at least now we do know that that is what's called taking the time

1565
01:26:41,600 --> 01:26:43,200
which is what we want to see.

1566
01:26:44,300 --> 01:26:48,000
And so at least we know it's isolated by in something that we already

1567
01:26:48,000 --> 01:26:53,500
know we would want to fix for performance and if there isn't like some

1568
01:26:53,500 --> 01:26:57,000
other weird like we were copying something, we shouldn't have been

1569
01:26:57,000 --> 01:26:59,300
copying tons of times or stuff like that.

1570
01:27:00,000 --> 01:27:02,400
Would be causing that slow down, right?

1571
01:27:04,800 --> 01:27:07,700
So I think that's about it, I don't know that there's anything else we

1572
01:27:07,700 --> 01:27:11,500
can really track down, performance-wise here that we care about, but

1573
01:27:11,500 --> 01:27:15,000
at least now we know what the deal is, right?

1574
01:27:15,800 --> 01:27:17,400
And it would be nice.

1575
01:27:17,400 --> 01:27:20,400
Again, if we could make that dispatch quicker because if we could make

1576
01:27:20,400 --> 01:27:23,600
that dispatch quicker, we would be much happier.

1577
01:27:23,800 --> 01:27:29,100
The other thing I suppose we could do is we could check to see if the

1578
01:27:29,100 --> 01:27:30,600
textures were the same.

1579
01:27:30,900 --> 01:27:34,000
Like if they were the white texture for example, because a bunch of

1580
01:27:34,100 --> 01:27:38,900
Quads are going through that white texture and they, you know, are not

1581
01:27:38,900 --> 01:27:42,400
going to have that problem where they would have to change text every

1582
01:27:42,400 --> 01:27:42,700
time.

1583
01:27:42,700 --> 01:27:45,600
But again, that doesn't seem particularly relevant because most things

1584
01:27:45,600 --> 01:27:46,600
in the game will be textured.

1585
01:27:46,600 --> 01:27:49,200
So it's really just an optimisation for things that don't matter.

1586
01:27:49,700 --> 01:27:53,800
So, I would say or in, you know, but maybe in debug mode, they would

1587
01:27:53,800 --> 01:27:56,600
because, hey, you know, there's like, it's drawn these cubes and

1588
01:27:56,600 --> 01:27:56,900
stuff.

1589
01:27:56,900 --> 01:28:01,700
And there's lots of those, you know, so you'd save a bunch of time

1590
01:28:01,700 --> 01:28:04,000
there, but that's really about it, like,

1591
01:28:04,100 --> 01:28:06,300
That's the only thing I could think of that would really have that

1592
01:28:06,300 --> 01:28:06,700
case.

1593
01:28:08,100 --> 01:28:11,200
So you know, we could do something like that again.

1594
01:28:11,200 --> 01:28:14,600
I don't know if we should if we want to do something like that just to

1595
01:28:14,600 --> 01:28:17,900
see if it would help in the debug case, it's really pretty

1596
01:28:17,900 --> 01:28:19,300
straightforward Loop wise.

1597
01:28:19,500 --> 01:28:23,700
All we're going to do here is say, okay, so you know, we've hoops

1598
01:28:26,600 --> 01:28:30,900
We've got a bitmap and every time we see that bitmap, maybe I'll say

1599
01:28:30,900 --> 01:28:31,400
here.

1600
01:28:38,300 --> 01:28:38,900
Well, you know what?

1601
01:28:38,900 --> 01:28:39,900
I can't even do that.

1602
01:28:39,900 --> 01:28:40,100
Really?

1603
01:28:40,100 --> 01:28:44,500
Because again, we have this problem of wanting to draw quads and so we

1604
01:28:44,500 --> 01:28:49,600
can't really even fix that part of it because we have to do our vertex

1605
01:28:49,600 --> 01:28:50,400
indices.

1606
01:28:52,900 --> 01:28:57,600
You know, we can avoid calling bind texture multiple times and I guess

1607
01:28:57,600 --> 01:29:00,400
we could just try that but that's the only thing we can really do.

1608
01:29:00,800 --> 01:29:03,400
So, what we can do here is we load the bitmap up and what we could say

1609
01:29:03,400 --> 01:29:07,400
is if bitmap is not equal to last bitmap then buying the texture.

1610
01:29:07,400 --> 01:29:07,800
Otherwise

1611
01:29:07,900 --> 01:29:13,300
I want and you know, is this going to help?

1612
01:29:13,300 --> 01:29:14,400
Probably not.

1613
01:29:16,800 --> 01:29:18,900
But you know, might as well check it out.

1614
01:29:19,400 --> 01:29:23,000
So all that does is in the case where the bitmap doesn't vary, it's

1615
01:29:23,000 --> 01:29:26,500
not going to call it and you can see that it did help a little maybe

1616
01:29:26,500 --> 01:29:29,300
tiny bit, but really no, it didn't.

1617
01:29:30,100 --> 01:29:32,300
So I don't expect that to be.

1618
01:29:32,800 --> 01:29:35,400
I didn't expect that to be anything special and it wasn't.

1619
01:29:36,000 --> 01:29:39,500
I think the fact that we call Jill drawer raised so many times is

1620
01:29:39,500 --> 01:29:41,500
probably just the problem, right?

1621
01:29:42,700 --> 01:29:46,400
And the fact that we change the texture probably doesn't help but the

1622
01:29:46,500 --> 01:29:50,900
Driver probably was already doing something like this so it probably

1623
01:29:50,900 --> 01:29:54,700
already did that aggregation, if that makes sense.

1624
01:29:55,300 --> 01:29:57,900
And so when we do that aggregation, it doesn't help.

1625
01:30:00,900 --> 01:30:01,700
If that makes sense.

1626
01:30:01,900 --> 01:30:06,000
So I'm guessing that that's just a meaningless optimization that we

1627
01:30:06,000 --> 01:30:07,800
don't need to preserve right.

1628
01:30:09,500 --> 01:30:11,600
And I'll just verify that hold on, one second.

1629
01:30:22,700 --> 01:30:26,100
So, here's this calling it every time in debug mode.

1630
01:30:28,700 --> 01:30:32,200
So, yeah, well, you know it is it's not nothing.

1631
01:30:34,700 --> 01:30:38,500
For whatever reason us doing that manually, I guess the driver does

1632
01:30:38,500 --> 01:30:42,500
enough work behind that bind texture call to even detect whether or

1633
01:30:42,500 --> 01:30:47,000
not the texture is the same that it does actually flatten it a bit.

1634
01:30:48,300 --> 01:30:54,000
It's it's not really that great but it's you know it's something and

1635
01:30:54,000 --> 01:30:57,400
again we could get rid of this deal drawers if we had a way of drawing

1636
01:30:57,400 --> 01:31:02,000
quads instead of triangle strips that would be something that we would

1637
01:31:02,000 --> 01:31:02,700
do here.

1638
01:31:02,700 --> 01:31:03,400
Unfortunately, we

1639
01:31:03,600 --> 01:31:06,900
Can't really do that with introducing and without introducing a

1640
01:31:06,900 --> 01:31:12,300
geometry Shader that would produce triangle that would produce quad

1641
01:31:12,400 --> 01:31:17,200
into index groups for us and we don't really have that infrastructure

1642
01:31:17,200 --> 01:31:17,500
in place.

1643
01:31:17,500 --> 01:31:19,100
We could go at it.

1644
01:31:19,300 --> 01:31:20,700
It's not hard.

1645
01:31:21,400 --> 01:31:24,000
But I just don't know if that's worth it at this point.

1646
01:31:24,600 --> 01:31:28,500
But yeah what we what we would end up doing here again is the same

1647
01:31:28,500 --> 01:31:29,600
sort of situation.

1648
01:31:30,700 --> 01:31:33,800
If the bitmap were not the same, right?

1649
01:31:33,800 --> 01:31:37,500
Is instead of actually issuing the GL drawer, it's called we would

1650
01:31:37,500 --> 01:31:38,800
sort of stack them up.

1651
01:31:38,800 --> 01:31:44,100
So we would we would do something like how many indices or right?

1652
01:31:44,100 --> 01:31:49,000
How many you know what's our driver, it count and then what we would

1653
01:31:49,000 --> 01:31:52,100
do every time is when we did the switch, we would say, oh okay.

1654
01:31:52,900 --> 01:31:56,900
You know, every time we do the switch, we need to bind

1655
01:31:59,800 --> 01:32:04,000
Or we need to do the draw arrays with the number of vertices that we

1656
01:32:04,000 --> 01:32:04,600
have.

1657
01:32:07,600 --> 01:32:12,600
And in each time we come through here, we need to increment the number

1658
01:32:12,600 --> 01:32:14,900
of vertices we have by 4, right?

1659
01:32:15,300 --> 01:32:17,700
So in other words, the first time through we would pick out the

1660
01:32:17,700 --> 01:32:18,200
bitmap.

1661
01:32:18,200 --> 01:32:21,100
We'd see and, you know, I'd probably want to put a check here.

1662
01:32:21,100 --> 01:32:26,000
That was like, if drover count is greater than zero, then we do the GL

1663
01:32:26,000 --> 01:32:30,000
draw raise otherwise, we don't, then we do the by texture and we set

1664
01:32:30,000 --> 01:32:31,900
the driver count to 0, right?

1665
01:32:33,400 --> 01:32:36,700
And we can do the vine texture, right before the call to

1666
01:32:37,100 --> 01:32:40,900
We could do it this way by calling last bitmap, right?

1667
01:32:43,700 --> 01:32:44,500
And off we go.

1668
01:32:45,000 --> 01:32:48,600
So we could be a see if it map cycle lasts but math then you know if

1669
01:32:48,600 --> 01:32:51,500
the driver caps higher than 0 buying the texture and draw the arrays,

1670
01:32:51,500 --> 01:32:53,700
then do less with my pickles bitmap and off you go.

1671
01:32:54,000 --> 01:32:58,200
Every time we end up with four or more vertices and then at the end we

1672
01:32:58,200 --> 01:32:59,600
would need to do one more.

1673
01:33:00,500 --> 01:33:04,200
Just you know, basically clear it out.

1674
01:33:04,200 --> 01:33:07,500
So to say okay if the vert count is greater than zero at the end,

1675
01:33:07,900 --> 01:33:08,400
right?

1676
01:33:09,100 --> 01:33:11,600
Which would almost certainly is going to be unless we didn't have

1677
01:33:11,600 --> 01:33:13,800
anything anything in the loop at all.

1678
01:33:14,300 --> 01:33:21,800
Then we have to do the last bit map bind and the driver count.

1679
01:33:22,400 --> 01:33:27,400
Right now, the vertex index that we're on in this case is not going to

1680
01:33:27,400 --> 01:33:28,100
be accurate.

1681
01:33:28,100 --> 01:33:29,800
It's going to have to be the old.

1682
01:33:30,000 --> 01:33:33,500
Vertex index that we would have started with.

1683
01:33:34,000 --> 01:33:38,300
So we also kind of need to track how far back.

1684
01:33:38,300 --> 01:33:41,100
We have to go in some sense but we kind of know what that is.

1685
01:33:41,100 --> 01:33:41,500
Right.

1686
01:33:41,600 --> 01:33:45,100
So we know we're stopping on this one in fact you know up smarter way

1687
01:33:45,100 --> 01:33:48,100
to do this actually now that I think about it, it's probably a lot

1688
01:33:48,100 --> 01:33:51,500
cleaner is just to say like first vert,

1689
01:33:53,700 --> 01:33:54,200
Right.

1690
01:33:54,700 --> 01:33:57,500
And then what we would do is every time we draw, we would say, like,

1691
01:33:57,500 --> 01:34:00,500
first, vert equals vert index,

1692
01:34:02,000 --> 01:34:06,000
And so then all we would say is well, you know, you always draw.

1693
01:34:06,000 --> 01:34:06,500
Oops.

1694
01:34:07,500 --> 01:34:08,900
This we can still leave it this way.

1695
01:34:27,800 --> 01:34:30,400
This last one is a little more complicated, but as we go here, we're

1696
01:34:30,400 --> 01:34:34,900
going through the vertex vertex Industries, the driver account is

1697
01:34:34,900 --> 01:34:38,600
basically just wherever we are in the index dream - wherever we are.

1698
01:34:38,600 --> 01:34:42,500
When we started is the number to draw if that's greater than 0, then

1699
01:34:42,500 --> 01:34:46,900
we just draw it, you know, starting from first vert and we draw as

1700
01:34:46,900 --> 01:34:49,000
many as there are, right?

1701
01:34:49,400 --> 01:34:52,300
As many as we have to go to catch up.

1702
01:34:52,500 --> 01:34:54,100
We then store where we are right now.

1703
01:34:54,100 --> 01:34:56,800
Is the new first vert, we don't have this at all and

1704
01:34:57,000 --> 01:35:00,600
Or and we just keep going from there at the end.

1705
01:35:00,700 --> 01:35:02,800
We would do the same thing, right?

1706
01:35:03,400 --> 01:35:06,200
And we just need to know what that vert into index is.

1707
01:35:06,600 --> 01:35:10,000
So we need to have that be an actual like more like a while loop now,

1708
01:35:10,000 --> 01:35:10,500
right.

1709
01:35:12,600 --> 01:35:16,300
That's going to work like this so that vert index actually equals what

1710
01:35:16,300 --> 01:35:17,700
it should equal at the end.

1711
01:35:19,400 --> 01:35:19,900
Right?

1712
01:35:20,500 --> 01:35:21,300
But that's it.

1713
01:35:21,300 --> 01:35:26,300
And and then you know, it's it's going to be doing that drawing now.

1714
01:35:26,300 --> 01:35:27,400
There's a problem.

1715
01:35:27,700 --> 01:35:28,100
Oops.

1716
01:35:32,700 --> 01:35:33,700
Well, two problems here.

1717
01:35:33,900 --> 01:35:34,800
First of all.

1718
01:35:35,900 --> 01:35:38,700
These both have to be the same thing or rather, I could just do this.

1719
01:35:39,800 --> 01:35:40,900
So it won't show the first time.

1720
01:35:42,300 --> 01:35:48,500
The problem here is that we will get garbage now and the reason that

1721
01:35:48,500 --> 01:35:52,500
we get garbage again is because of that quad situation, right?

1722
01:35:52,500 --> 01:35:53,900
We don't have a way of generating quad.

1723
01:35:53,900 --> 01:35:56,500
So we're generating triangle strips, which means that the end will

1724
01:35:56,500 --> 01:35:59,800
always connect every Sprite to every other Sprite

1725
01:36:00,000 --> 01:36:01,800
As we go, right?

1726
01:36:03,600 --> 01:36:06,300
But interestingly enough, you can see that that really dropped

1727
01:36:06,300 --> 01:36:08,600
dramatically the number.

1728
01:36:08,900 --> 01:36:13,000
The amount of time spent in the quad loop, right here we are.

1729
01:36:13,300 --> 01:36:14,500
It's been flattened down.

1730
01:36:14,500 --> 01:36:19,100
It's about twice as fast as it was when doing those calls.

1731
01:36:19,200 --> 01:36:22,700
And again that's because just eliminating the number of times we asked

1732
01:36:22,700 --> 01:36:27,400
the driver to draw things by drawing things in batches right now.

1733
01:36:27,400 --> 01:36:30,300
I'm going to just back out all of that because again,

1734
01:36:32,500 --> 01:36:37,400
I don't really think that's particularly useful, it's not, you know,

1735
01:36:42,300 --> 01:36:42,800
There we go.

1736
01:36:44,100 --> 01:36:47,900
It's not really anything that I it's not really the appropriate

1737
01:36:47,900 --> 01:36:48,400
optimization.

1738
01:36:48,400 --> 01:36:51,200
I think the appropriate division is to figure out how we might use

1739
01:36:51,200 --> 01:36:54,400
texture raised here to avoid that overhead.

1740
01:36:54,500 --> 01:36:57,900
And again, the problem there is just that, that has a bunch of asset

1741
01:36:57,900 --> 01:37:01,000
implications that are really kind of nasty.

1742
01:37:02,000 --> 01:37:04,400
Basically, what that means is that, you know, if you want to use a

1743
01:37:04,400 --> 01:37:08,400
texture array there you get into a situation where you have to make

1744
01:37:08,400 --> 01:37:11,500
all of your textures fit into a particular size.

1745
01:37:11,800 --> 01:37:11,900
So,

1746
01:37:12,100 --> 01:37:16,400
Basically you know you have to pick a size like 1024 by 1024 and you

1747
01:37:16,400 --> 01:37:19,400
have to pack all of your Sprites such that they fit inside that

1748
01:37:19,400 --> 01:37:19,900
texture.

1749
01:37:19,900 --> 01:37:25,900
And if you have multiple of them that you know, are relatively small,

1750
01:37:26,000 --> 01:37:30,300
you would need to make sure that they fit, you know, maybe pack them

1751
01:37:30,300 --> 01:37:32,500
into a single one as like a texture Atlas or something because you

1752
01:37:32,500 --> 01:37:33,700
don't want to waste the space.

1753
01:37:33,900 --> 01:37:35,400
Since the memory is at a premium.

1754
01:37:35,700 --> 01:37:37,700
You have all of these issues you got to address.

1755
01:37:37,900 --> 01:37:39,500
Once you go to texture raised.

1756
01:37:42,000 --> 01:37:45,200
That are kind of nasty but that is what you would want to do to make

1757
01:37:45,200 --> 01:37:49,800
that Loop actually run in a reasonable fashion and the biggest problem

1758
01:37:49,800 --> 01:37:53,200
that we would have right now with that is the cutscene art because the

1759
01:37:53,200 --> 01:37:59,100
cutscene art is large and we would basically need to tile it, right?

1760
01:37:59,100 --> 01:38:02,400
We would have to break it into some tiles in order to draw it.

1761
01:38:03,900 --> 01:38:08,600
You know, the way that we're drawing it at the moment and so yeah.

1762
01:38:08,600 --> 01:38:11,200
I really just don't know if we want to deal with anything like that.

1763
01:38:11,400 --> 01:38:14,700
What we could do I suppose it's something like all of the in-game

1764
01:38:14,700 --> 01:38:18,100
Sprites we could put in a texture array and the cutscene art we could

1765
01:38:18,100 --> 01:38:19,800
leave outside the texture, right?

1766
01:38:20,200 --> 01:38:23,000
Because the cutscene is a very special case scenario and like the

1767
01:38:23,000 --> 01:38:23,800
cutscene

1768
01:38:27,100 --> 01:38:32,200
If we flip over to it here is not ever going to be in the performance

1769
01:38:32,200 --> 01:38:37,300
critical part of things because it's all it's doing, is just rendering

1770
01:38:37,600 --> 01:38:38,600
some basic stuff.

1771
01:38:39,300 --> 01:38:40,800
Wait, oh, and you know what?

1772
01:38:44,300 --> 01:38:48,000
We have never updated our cutscenes to work with the new 3D system

1773
01:38:48,000 --> 01:38:49,700
either have, we that's probably something we should do.

1774
01:38:49,800 --> 01:38:51,000
Maybe that's something I'll do right now.

1775
01:38:52,600 --> 01:38:56,600
So, you know, maybe we could just do something different for them, I'm

1776
01:38:56,600 --> 01:38:59,800
not sure it's hard to say.

1777
01:39:04,200 --> 01:39:06,200
So I don't really know what we want to do there, right?

1778
01:39:06,200 --> 01:39:07,400
I don't really know what we want to do there.

1779
01:39:07,400 --> 01:39:10,800
It's a good question but we definitely had the circumstance where it's

1780
01:39:10,800 --> 01:39:12,800
like, okay, like

1781
01:39:19,600 --> 01:39:24,300
You know, could we just slam all of our in game art into a texture

1782
01:39:24,300 --> 01:39:24,600
Ray?

1783
01:39:24,600 --> 01:39:26,500
And presumably, they would fit

1784
01:39:30,000 --> 01:39:33,300
Without too much, too much hubbub, I don't know.

1785
01:39:33,300 --> 01:39:34,100
Let me take a look here.

1786
01:39:34,100 --> 01:39:37,200
So, if we had a 1024, by 1024 texture because there's nothing, no

1787
01:39:37,200 --> 01:39:40,300
in-game Sprites, probably bigger than that times.

1788
01:39:40,300 --> 01:39:42,600
Four is what four megabytes of textures.

1789
01:39:43,400 --> 01:39:46,400
So, you know, if you assume half a gigabyte on the graphics card is a

1790
01:39:46,400 --> 01:39:48,700
reasonable minimum, minimum platform.

1791
01:39:50,400 --> 01:39:53,400
So then you're talking about what 128

1792
01:39:56,300 --> 01:39:57,400
Of those.

1793
01:40:00,000 --> 01:40:04,000
Right, that's just not very many Sprites.

1794
01:40:04,400 --> 01:40:07,100
So at the very least would probably have to say that all Sprites were

1795
01:40:07,100 --> 01:40:09,900
512 by 512, right.

1796
01:40:10,000 --> 01:40:15,400
And I mean, we could turn on dxt texture compression and get four more

1797
01:40:16,100 --> 01:40:16,700
times in there.

1798
01:40:16,700 --> 01:40:24,500
But so then at that point, you know we would get 512 Sprites images in

1799
01:40:24,500 --> 01:40:25,600
the cache at once.

1800
01:40:26,900 --> 01:40:27,400
Right.

1801
01:40:27,800 --> 01:40:28,400
And

1802
01:40:39,800 --> 01:40:41,000
It's not very many.

1803
01:40:43,300 --> 01:40:44,400
but, you know,

1804
01:40:46,100 --> 01:40:47,000
Maybe it's enough.

1805
01:40:47,100 --> 01:40:48,700
I mean it is a cash after all.

1806
01:40:49,900 --> 01:40:52,800
512 Unique Images on the screen.

1807
01:40:52,800 --> 01:40:56,900
And I know so 256 by 256, if we if we crammed everything into there,

1808
01:40:59,400 --> 01:41:01,700
With no texture compression.

1809
01:41:04,000 --> 01:41:05,200
Yeah that's 262.

1810
01:41:05,200 --> 01:41:08,500
So you know if we did say, well we've got 512, let's say we've got

1811
01:41:08,500 --> 01:41:10,400
512, oops.

1812
01:41:12,800 --> 01:41:14,800
1024 x 1024.

1813
01:41:15,600 --> 01:41:19,500
So we have 512 Megs to work with.

1814
01:41:21,900 --> 01:41:23,000
On the graphics card.

1815
01:41:23,400 --> 01:41:25,500
And we want to divide that by 2 to 6 by 2.

1816
01:41:25,500 --> 01:41:27,400
This by 4/4 Sprites.

1817
01:41:29,000 --> 01:41:33,400
2048 Sprites is a lot better in terms of how many different Sprite

1818
01:41:33,400 --> 01:41:36,800
images we could have in memory at once, but the resolution is not

1819
01:41:36,800 --> 01:41:39,500
great like 256 by 226 Sprites.

1820
01:41:41,900 --> 01:41:43,300
Isn't huge.

1821
01:41:44,900 --> 01:41:46,100
But you know, we could do it.

1822
01:41:47,000 --> 01:41:49,300
If we were in the mood to do it, we could do it.

1823
01:41:49,900 --> 01:41:55,500
So maybe we should be in the mood to do it and maybe we should do that

1824
01:41:55,500 --> 01:41:58,100
because hey that would get us into a much better place.

1825
01:41:58,100 --> 01:41:59,100
Performance-wise.

1826
01:42:30,800 --> 01:42:31,400
I don't know.

1827
01:42:32,000 --> 01:42:34,000
I really don't have a strong opinion about that.

1828
01:42:35,500 --> 01:42:36,500
Maybe we could take a poll.

1829
01:42:38,400 --> 01:42:43,800
What I can say is that regardless reasonably productive use of our

1830
01:42:43,800 --> 01:42:45,700
time at the moment.

1831
01:42:50,500 --> 01:42:52,800
I would be too.

1832
01:42:56,300 --> 01:43:03,300
Would be to go ahead and fix the cutscenes because I mean you were

1833
01:43:03,300 --> 01:43:05,100
going to want those to work either way, right?

1834
01:43:06,400 --> 01:43:10,400
So let's just go ahead and fix our cutscenes and here's how we, you

1835
01:43:10,400 --> 01:43:13,500
know, we're doing the cutscenes can see we've got sort of them.

1836
01:43:16,800 --> 01:43:21,700
Coated in here is just wear what layers we want and the layers as you

1837
01:43:21,700 --> 01:43:24,200
can see that they're already like pre-sorted, right?

1838
01:43:24,200 --> 01:43:28,400
So the farthest away thing comes first and then the closest thing

1839
01:43:28,400 --> 01:43:31,400
comes at, as the last one.

1840
01:43:31,400 --> 01:43:36,500
So they're, they're capable of being drawn in order is basically the

1841
01:43:36,500 --> 01:43:40,700
only important part about that and you can see here, I guess it never

1842
01:43:40,700 --> 01:43:46,400
draws the first layer index looks like for some reason.

1843
01:43:46,600 --> 01:43:49,300
Sure why that is seeing their accounts.

1844
01:43:50,100 --> 01:43:51,500
And it looks

1845
01:43:53,100 --> 01:43:54,900
That's a very interesting Loop.

1846
01:43:59,200 --> 01:44:01,800
It looks like we were previously drawing these in the other order.

1847
01:44:08,400 --> 01:44:14,400
I guess, just to match the layer tags in the bitmap matcher, but

1848
01:44:14,400 --> 01:44:17,400
that's just kind of a week if you think you could put, plus 1 here.

1849
01:44:18,100 --> 01:44:19,200
But either way, it doesn't matter.

1850
01:44:19,200 --> 01:44:20,500
You can see us drawing them here.

1851
01:44:20,500 --> 01:44:21,800
We are drawing them in order.

1852
01:44:22,900 --> 01:44:28,500
And so, as we draw these, and we push the bitmaps on, we should get

1853
01:44:29,400 --> 01:44:30,300
the transform Z.

1854
01:44:30,300 --> 01:44:33,100
Here - camera offset.

1855
01:44:33,100 --> 01:44:34,300
See being computed.

1856
01:44:34,700 --> 01:44:36,200
That peasy.

1857
01:44:36,200 --> 01:44:37,800
As far as I know,

1858
01:44:44,100 --> 01:44:52,000
I don't super get why we aren't seeing.

1859
01:44:55,900 --> 01:44:57,000
Let me take a look here.

1860
01:45:02,600 --> 01:45:07,100
Ah, so these look like they're coated.

1861
01:45:11,400 --> 01:45:15,200
In a, in a I guess I don't know how we've set up the camera.

1862
01:45:15,700 --> 01:45:19,600
But if you take a look at how we set up our Z values, though we did do

1863
01:45:19,600 --> 01:45:22,700
it, so as they were coded, how far away from the camera they are,

1864
01:45:22,700 --> 01:45:23,000
right?

1865
01:45:23,000 --> 01:45:23,600
So

1866
01:45:26,400 --> 01:45:31,600
That Z value there is really not what we would normally think of, as a

1867
01:45:31,600 --> 01:45:33,800
z value, because Z goes up in our game.

1868
01:45:34,300 --> 01:45:40,700
And so, when we set the camera transform here, you know, we we've got

1869
01:45:40,700 --> 01:45:46,400
the Z values going the wrong way, round in terms of distance from the

1870
01:45:46,400 --> 01:45:49,300
camera, I'm not sure how that was working.

1871
01:45:49,300 --> 01:45:51,500
Originally, it seems a little weird.

1872
01:45:51,500 --> 01:45:53,300
Did we account for that somehow?

1873
01:45:53,600 --> 01:45:56,000
Because you can see here, like, this is supposed to be the

1874
01:45:56,100 --> 01:45:59,200
The way, but in our game Z comes towards the camera.

1875
01:45:59,600 --> 01:46:02,700
So setting this to 300, doesn't really make any sense.

1876
01:46:02,900 --> 01:46:07,800
It's supposed to be 300 - 300 right but I don't see anywhere where

1877
01:46:07,800 --> 01:46:09,100
this is getting negated.

1878
01:46:09,100 --> 01:46:14,400
So it's a little bit weird what's happening here I'm not sure how to

1879
01:46:16,300 --> 01:46:21,700
interpret that or not sure I remember because long time ago we did

1880
01:46:21,700 --> 01:46:25,900
this why we weren't taking steps to rectify?

1881
01:46:26,100 --> 01:46:27,500
I have that, right?

1882
01:46:32,500 --> 01:46:33,900
It's just really strange.

1883
01:46:33,900 --> 01:46:38,200
So I also don't know what the camera offset Z stuff is for

1884
01:46:42,200 --> 01:46:44,900
So looking at this here, you can see like intro shot.

1885
01:46:46,200 --> 01:46:51,700
You can see here, our camera information, I believe is what's being

1886
01:46:51,700 --> 01:46:52,300
coded there?

1887
01:46:52,300 --> 01:46:57,100
So you can see here, we've got layered seen.

1888
01:46:57,600 --> 01:46:59,300
So these are those things, right?

1889
01:46:59,700 --> 01:47:00,700
There's the

1890
01:47:05,600 --> 01:47:06,700
Let's see how we got here.

1891
01:47:06,700 --> 01:47:08,900
Intro layers index.

1892
01:47:09,400 --> 01:47:13,100
So we start with the asset ID, which is

1893
01:47:15,000 --> 01:47:15,800
Is this one?

1894
01:47:16,200 --> 01:47:17,600
Then we have the shot index.

1895
01:47:17,800 --> 01:47:19,400
Then we have the layer count.

1896
01:47:19,500 --> 01:47:21,200
Then we have the layer pointer.

1897
01:47:21,400 --> 01:47:24,300
Then the next thing is the duration, which is this.

1898
01:47:24,300 --> 01:47:26,000
So 20 seconds, right?

1899
01:47:26,000 --> 01:47:26,600
Or whatever.

1900
01:47:27,600 --> 01:47:30,600
We then have in here, we've got

1901
01:47:32,400 --> 01:47:34,500
Where the camera is supposed to start.

1902
01:47:34,700 --> 01:47:38,700
And then we have here where the camera is supposed to end, right?

1903
01:47:40,000 --> 01:47:43,600
And there's also a fade value but only one person uses that which is

1904
01:47:43,600 --> 01:47:44,300
the first one.

1905
01:47:45,500 --> 01:47:47,600
So, if we take a look at what's happening, here are the camera

1906
01:47:47,600 --> 01:47:51,100
starting at 10:00 and it's going to 54 a zoom in.

1907
01:47:52,800 --> 01:47:59,300
And again, that's like, correct, if you're trying to zoom in zero

1908
01:47:59,300 --> 01:47:59,500
going to

1909
01:48:00,000 --> 01:48:05,300
Or also corrects you're going to -1.5 those are all proper Zoom values

1910
01:48:05,300 --> 01:48:07,300
in the distant, space of the game.

1911
01:48:08,200 --> 01:48:12,300
So what I don't understand is how these values.

1912
01:48:12,600 --> 01:48:15,500
Oh I see those are actually like

1913
01:48:18,400 --> 01:48:19,800
used for some other purpose.

1914
01:48:19,800 --> 01:48:24,000
These are the actual z-values I guess because those properly lineup

1915
01:48:24,000 --> 01:48:25,200
negatively, right?

1916
01:48:25,400 --> 01:48:27,100
So what are these values here?

1917
01:48:30,500 --> 01:48:31,800
That's more what I'm interested in.

1918
01:48:32,100 --> 01:48:35,300
So that's the height value, is all that is, okay?

1919
01:48:35,500 --> 01:48:40,000
So these are still, I was just taking some time to get back familiar

1920
01:48:40,000 --> 01:48:42,300
with how these are encoded, that's actually fine.

1921
01:48:43,800 --> 01:48:49,300
So what I really want to know there is is if these are being drawn

1922
01:48:49,300 --> 01:48:54,500
properly from Back to Front, I don't really understand what I'm

1923
01:48:54,500 --> 01:48:55,700
looking at.

1924
01:48:56,600 --> 01:48:59,700
I guess the problem is probably Alpha to coverage in this.

1925
01:49:00,200 --> 01:49:03,400
Case, let me find out though.

1926
01:49:05,700 --> 01:49:06,400
You know what I should do?

1927
01:49:06,400 --> 01:49:09,200
First is, let's not start into game mode.

1928
01:49:09,500 --> 01:49:11,200
So if I go to

1929
01:49:14,200 --> 01:49:15,900
Handmade CPP.

1930
01:49:18,400 --> 01:49:24,800
I'm pretty sure we can just turn this off and we will start with the

1931
01:49:24,800 --> 01:49:28,500
title sequence like the game would in reality.

1932
01:49:30,400 --> 01:49:35,000
So like looking at this you can kind of see I don't super understand

1933
01:49:35,000 --> 01:49:35,900
what I'm seeing here.

1934
01:49:35,900 --> 01:49:37,600
This this is confusing to me.

1935
01:49:37,900 --> 01:49:41,500
The reason it's confusing to me is I have this whole portion of this

1936
01:49:41,500 --> 01:49:45,500
image here, the alpha for this part of the image should be zero, which

1937
01:49:45,500 --> 01:49:47,000
means I should be seeing through it.

1938
01:49:47,000 --> 01:49:47,700
It should even

1939
01:49:47,900 --> 01:49:54,000
With Alfred to coverage, it should just not be affecting, what's

1940
01:49:54,000 --> 01:49:58,800
underneath it in that way, if there was anything being drawn

1941
01:49:58,800 --> 01:50:01,700
underneath it at all, but even if there wasn't, it should still work,

1942
01:50:01,800 --> 01:50:02,300
right?

1943
01:50:03,100 --> 01:50:05,700
And so, what I don't understand is it seems like the Z buffer is

1944
01:50:05,700 --> 01:50:07,000
getting set there in a way.

1945
01:50:07,000 --> 01:50:09,100
That doesn't make a lot of sense to me or something.

1946
01:50:09,100 --> 01:50:10,000
Weird is happening.

1947
01:50:10,900 --> 01:50:13,600
And I really just do not understand it.

1948
01:50:14,000 --> 01:50:17,700
So one thing is, I don't know what the Z clipping rectangle.

1949
01:50:17,800 --> 01:50:20,100
Range is here, but it could be that the Z.

1950
01:50:20,100 --> 01:50:23,800
Clipping range is too aggressive for where these are.

1951
01:50:23,800 --> 01:50:28,900
So you know, 300 what's are near for our clip plane, right?

1952
01:50:29,200 --> 01:50:33,700
So if I go here to perspective projection, well there's your answer,

1953
01:50:33,700 --> 01:50:34,100
right?

1954
01:50:34,100 --> 01:50:36,300
So our near clipping plane is at Point 1.

1955
01:50:36,300 --> 01:50:41,300
Nobody is in danger of violating that but 100 is certainly going to

1956
01:50:41,300 --> 01:50:47,700
clip out a bunch of these sausage gentleman here, I guess, 200 175.

1957
01:50:47,800 --> 01:50:50,100
E100 not going to work.

1958
01:50:53,000 --> 01:50:56,300
Can't see if there's anybody else here who wouldn't work.

1959
01:50:56,300 --> 01:50:59,800
Most of the other ones should be in line, so that would really only

1960
01:51:00,000 --> 01:51:04,800
Swinging a couple of these ones, right?

1961
01:51:05,600 --> 01:51:06,800
That we have

1962
01:51:14,800 --> 01:51:16,000
But that's definitely the case.

1963
01:51:16,000 --> 01:51:18,800
And so one of the things we might want to think about in here is

1964
01:51:18,800 --> 01:51:23,200
starting to say, well, what maybe we want to be able to specify the

1965
01:51:23,200 --> 01:51:24,800
near and far clip planes,

1966
01:51:26,800 --> 01:51:28,700
In some kind of a more reasonable fashion.

1967
01:51:29,600 --> 01:51:32,800
So let's let's go ahead and take a look at what we would do there.

1968
01:51:32,800 --> 01:51:38,400
So inside render group, when we have set camera, transform what we

1969
01:51:38,400 --> 01:51:40,400
could do is just tack those onto the end.

1970
01:51:47,300 --> 01:51:50,500
And then when we call perspective projection, we can just pass the

1971
01:51:50,500 --> 01:51:54,900
near clipping plane, the farthest plan and we call orthographic.

1972
01:51:54,900 --> 01:51:56,400
We could pass the neighborhood plan.

1973
01:51:58,100 --> 01:51:59,000
And the far clipping plane.

1974
01:52:00,400 --> 01:52:04,100
And then when we go to handmade math, we could just do

1975
01:52:16,600 --> 01:52:22,800
like so-and-so in same thing here.

1976
01:52:26,300 --> 01:52:27,900
Now that's parameterised.

1977
01:52:28,800 --> 01:52:31,700
And so we're going to want to do this in two places.

1978
01:52:31,700 --> 01:52:36,100
So in the debug system, when we do set camera transform, this is now

1979
01:52:36,100 --> 01:52:38,600
going to want to specify these two.

1980
01:52:38,800 --> 01:52:42,200
So it's going to want to specify those put planes like so so that we

1981
01:52:42,200 --> 01:52:45,100
have that nice big region that we were expecting.

1982
01:52:50,400 --> 01:52:52,400
And everybody else will be fine.

1983
01:52:56,400 --> 01:52:58,800
What is this complaining about?

1984
01:52:59,300 --> 01:53:01,700
What is it that that position that has to get set?

1985
01:53:01,700 --> 01:53:03,700
Their tell me, please.

1986
01:53:05,000 --> 01:53:06,700
I assume it is the position.

1987
01:53:07,300 --> 01:53:09,100
Let me find out for sure.

1988
01:53:09,700 --> 01:53:10,500
Yeah, camera p.

1989
01:53:13,000 --> 01:53:17,000
So now we should be fine for this as well, just want to make sure that

1990
01:53:17,000 --> 01:53:18,000
all the Z still works.

1991
01:53:18,000 --> 01:53:18,800
There it does.

1992
01:53:19,400 --> 01:53:23,200
So now in the cutscene case we can specify near and far clipping plane

1993
01:53:23,200 --> 01:53:26,200
that are more amenable for what we're trying to do.

1994
01:53:28,600 --> 01:53:30,500
We don't actually want to change any of these.

1995
01:53:30,500 --> 01:53:34,400
We want all these to be the same for the moment.

1996
01:53:38,700 --> 01:53:41,400
But the near and far clipping plane in this case, you know, we want to

1997
01:53:41,400 --> 01:53:46,400
be more generous for the cutscenes because that's just how we encoded

1998
01:53:46,400 --> 01:53:46,800
them.

1999
01:53:48,200 --> 01:53:51,800
And now we can take a look and see if we get any more reasonable in

2000
01:53:51,800 --> 01:53:52,300
this here.

2001
01:53:52,300 --> 01:53:55,000
Although I don't really see us getting any more reasonable.

2002
01:53:55,000 --> 01:53:59,800
And it's so and you know again the dimming weird dimming effect,

2003
01:54:00,000 --> 01:54:03,300
We get here is not explainable by clip planes, no matter what.

2004
01:54:03,300 --> 01:54:06,500
So that's also kind of a separate issue that I don't really know.

2005
01:54:07,400 --> 01:54:08,600
Oh, you know what?

2006
01:54:10,200 --> 01:54:12,200
That's our distance-based fog.

2007
01:54:15,800 --> 01:54:16,300
Right.

2008
01:54:21,100 --> 01:54:23,000
Are distance-based, fog.

2009
01:54:26,100 --> 01:54:27,900
We don't have a way to turn off.

2010
01:54:28,500 --> 01:54:29,700
Right here, we are.

2011
01:54:29,800 --> 01:54:35,900
When you do perspective projection, we're set this fog distance as

2012
01:54:35,900 --> 01:54:36,400
well.

2013
01:54:37,300 --> 01:54:38,700
So we also need that.

2014
01:54:38,700 --> 01:54:41,500
We should probably have a better way of passing these parameters.

2015
01:54:44,400 --> 01:54:46,400
Cuz there's just too many of them at this point, right?

2016
01:54:52,400 --> 01:54:56,100
and maybe at this point I'll just do ab32 that's like fog equals true

2017
01:54:58,600 --> 01:54:59,900
or maybe equals false

2018
01:55:15,600 --> 01:55:18,300
And so that way I could come in here and say, all right, well, you

2019
01:55:18,300 --> 01:55:21,700
know, if they ask me for fog then turn on fog, if they didn't ask me

2020
01:55:21,700 --> 01:55:24,600
for fog, then don't turn on fog, right?

2021
01:55:25,200 --> 01:55:28,800
And then inside World mode when it did the one person who actually

2022
01:55:28,800 --> 01:55:29,600
wants it

2023
01:55:33,500 --> 01:55:36,700
I thought it was here set camera transform.

2024
01:55:37,700 --> 01:55:38,300
There it is.

2025
01:55:39,300 --> 01:55:40,500
I so

2026
01:55:42,700 --> 01:55:45,200
I think that would also get us out of the business of doing this

2027
01:55:45,200 --> 01:55:46,500
switch, which is kind of nice.

2028
01:55:46,800 --> 01:55:49,600
So, what we could do is say like alright, it's always negative camera

2029
01:55:49,600 --> 01:55:56,100
Z in the case we wanted fog and just when you you know you near

2030
01:55:56,100 --> 01:56:01,500
clipping plane far, clipping plane false right near clipping plane

2031
01:56:01,800 --> 01:56:04,500
far, clipping plane through that.

2032
01:56:04,500 --> 01:56:07,600
What we can do here is say, well, let's encode the near and far

2033
01:56:07,600 --> 01:56:08,500
clipping planes.

2034
01:56:10,700 --> 01:56:11,200
Here.

2035
01:56:15,900 --> 01:56:16,700
And off you go.

2036
01:56:19,600 --> 01:56:23,100
So in shit in theory that should give us now, the ability to turn off

2037
01:56:23,100 --> 01:56:27,000
the fog in this case, although I guess that.

2038
01:56:27,600 --> 01:56:28,300
No, I think about it.

2039
01:56:28,300 --> 01:56:32,600
That's not important because we will get a default value of false

2040
01:56:32,600 --> 01:56:32,900
there.

2041
01:56:36,500 --> 01:56:39,800
And so now at least we're in a much better scenario where we're

2042
01:56:39,800 --> 01:56:43,200
looking at the cutscene and we can only see all the pieces of it and

2043
01:56:43,200 --> 01:56:47,600
nothing's getting clipped now, which is also nice because we have a

2044
01:56:47,600 --> 01:56:52,400
proper, a proper near and far clipping plane.

2045
01:56:52,500 --> 01:56:53,700
So that's also good.

2046
01:56:54,300 --> 01:56:57,100
And presumably all this stuff is still working as well and yeah it

2047
01:56:57,100 --> 01:56:59,100
does it does seem to be so that's good.

2048
01:57:00,000 --> 01:57:04,200
So now really our only real problem now is that our depth of field has

2049
01:57:04,200 --> 01:57:09,500
changed quite a bit with the, with the way that the projection is

2050
01:57:09,500 --> 01:57:10,100
working here.

2051
01:57:10,100 --> 01:57:15,400
So our camera, like our fov and stuff, all seems wrong, I don't really

2052
01:57:15,400 --> 01:57:18,100
know why that happened.

2053
01:57:18,700 --> 01:57:23,500
I'd be lying if I said, I really had any idea what was going on there

2054
01:57:24,700 --> 01:57:26,900
that seems going to be wrong because the near clipping plane and we'll

2055
01:57:26,900 --> 01:57:27,600
have to take a look.

2056
01:57:27,800 --> 01:57:29,800
Take a look at what's going on there.

2057
01:57:30,000 --> 01:57:33,100
A little bit later, but all the rest of the scene should be fine.

2058
01:57:34,000 --> 01:57:38,700
So, what we need to do is kind of restore that focal length, I guess.

2059
01:57:43,800 --> 01:57:50,700
And I'm not 100% sure, like I said how that got undone, I really don't

2060
01:57:50,700 --> 01:57:51,200
know.

2061
01:57:51,800 --> 01:57:56,100
So yeah.

2062
01:58:04,000 --> 01:58:08,600
Yeah, I really I just don't really know what the circumstances were

2063
01:58:08,600 --> 01:58:09,300
here.

2064
01:58:12,600 --> 01:58:16,700
In terms of how this was previously, what stuff in the old sort of

2065
01:58:16,700 --> 01:58:20,400
transfer system.

2066
01:58:20,400 --> 01:58:21,700
What it was actually trying to do.

2067
01:58:21,700 --> 01:58:25,600
So I'm just going to fuss with it a little bit here and just figure

2068
01:58:25,600 --> 01:58:27,800
out what maybe it was trying to do.

2069
01:58:29,000 --> 01:58:32,600
So we can get a little bit more involved in that now.

2070
01:58:32,600 --> 01:58:36,700
So I don't know what this is, we don't even need this anymore.

2071
01:58:36,700 --> 01:58:39,000
If you look at camera fram's, it's not even a thing.

2072
01:58:39,000 --> 01:58:41,900
It just focal length is focal length, so we can just set focal length.

2073
01:58:42,100 --> 01:58:45,800
Something here, you know, whatever it ends up being at the moment.

2074
01:58:45,800 --> 01:58:47,300
It's up to 0.25.

2075
01:58:47,300 --> 01:58:51,100
And so that's fine that just get set down here and nothing happens,

2076
01:58:51,600 --> 01:58:55,000
but I am interested to know what will happen if we change that focal

2077
01:58:55,000 --> 01:58:55,400
length,

2078
01:58:57,100 --> 01:58:59,900
We're we sort of thinking there was a different focal lengths so

2079
01:58:59,900 --> 01:59:01,600
suppose I change that focal length before.

2080
01:59:01,600 --> 01:59:05,800
For example, you can see we get closer in and perhaps perhaps a little

2081
01:59:05,800 --> 01:59:07,800
bit closer to what we were expecting.

2082
01:59:08,000 --> 01:59:12,500
Originally, here's a closer focal length and again, that's even closer

2083
01:59:12,500 --> 01:59:16,200
to the image that we were originally expecting to have which is a much

2084
01:59:16,200 --> 01:59:16,500
closer.

2085
01:59:16,500 --> 01:59:20,900
Inversion this one again, looking pretty good here.

2086
01:59:21,200 --> 01:59:25,400
I think maybe mostly what we had had happened before as we did it with

2087
01:59:25,400 --> 01:59:26,000
a focal length.

2088
01:59:26,000 --> 01:59:26,300
That

2089
01:59:26,400 --> 01:59:27,400
Is more akin to this.

2090
01:59:27,900 --> 01:59:29,700
And so now that's what we're looking at.

2091
01:59:29,700 --> 01:59:30,600
I don't really know.

2092
01:59:32,100 --> 01:59:34,500
You know, I also don't know when we were supposed to stop.

2093
01:59:42,300 --> 01:59:44,300
How long has it been since I've been streaming?

2094
01:59:45,700 --> 01:59:47,100
But I start at 11:30.

2095
01:59:48,900 --> 01:59:51,200
I was supposed to stop like 20 minutes ago, wasn't I?

2096
01:59:52,200 --> 01:59:53,900
I don't even know.

2097
01:59:55,300 --> 01:59:55,600
Yeah.

2098
01:59:55,600 --> 01:59:56,200
With okay.

2099
01:59:56,200 --> 01:59:58,000
So streams over technically and I'm still going.

2100
01:59:58,000 --> 01:59:59,000
I don't know what happened.

2101
01:59:59,300 --> 01:59:59,800
I apologize.

2102
02:00:00,000 --> 02:00:01,500
That I just got carried away.

2103
02:00:04,600 --> 02:00:06,400
Anyway, point being the focal length.

2104
02:00:07,200 --> 02:00:10,000
Setting might be the only real thing we need to fix their in terms of

2105
02:00:10,000 --> 02:00:11,200
getting the the scale.

2106
02:00:11,200 --> 02:00:11,700
Right?

2107
02:00:11,700 --> 02:00:13,700
I'm just not 100% sure.

2108
02:00:14,900 --> 02:00:19,400
So again looking at that that's a little bit too low in terms of where

2109
02:00:19,400 --> 02:00:20,900
we were supposed to be zoom in Wise.

2110
02:00:21,500 --> 02:00:24,500
Let me go ahead and just try a couple more values to see if any

2111
02:00:24,500 --> 02:00:25,800
particular value.

2112
02:00:26,300 --> 02:00:30,000
Looks like what we had tuned it to before, in terms of how we had

2113
02:00:30,000 --> 02:00:31,200
wanted those scenes to appear.

2114
02:00:31,400 --> 02:00:33,400
It honestly looks like something.

2115
02:00:33,400 --> 02:00:33,700
Very

2116
02:00:33,800 --> 02:00:39,100
Those 28 is probably what we actually used in terms of where we wanted

2117
02:00:39,100 --> 02:00:40,600
those cutscenes to be.

2118
02:00:41,600 --> 02:00:46,300
It's a little bit hard to tell but it seems correct.

2119
02:00:51,100 --> 02:00:52,700
We still have to fix the

2120
02:00:53,800 --> 02:00:54,800
window sizing there.

2121
02:01:04,200 --> 02:01:10,200
That's so it kind of seems like for the most part this is is more

2122
02:01:10,200 --> 02:01:10,600
correct.

2123
02:01:10,600 --> 02:01:14,500
And so really the only problem that we have at the moment

2124
02:01:17,100 --> 02:01:21,100
So you know, I guess you might say there's two things, we probably

2125
02:01:21,100 --> 02:01:22,000
want to fix one.

2126
02:01:22,000 --> 02:01:25,900
These cutscenes would look a lot better if we did not use Alpha to

2127
02:01:25,900 --> 02:01:26,400
coverage.

2128
02:01:26,400 --> 02:01:29,300
So if we just had a way of turning Alpha to coverage off at this

2129
02:01:29,300 --> 02:01:29,900
point,

2130
02:01:31,400 --> 02:01:32,400
That would be helpful.

2131
02:01:34,300 --> 02:01:37,400
And the other thing is we have everything hitting the near clipping

2132
02:01:37,400 --> 02:01:37,700
plane.

2133
02:01:37,700 --> 02:01:42,200
I believe in this in this particular scene.

2134
02:01:43,100 --> 02:01:47,400
So all of these are a little bit off where Santa Claus get went, I

2135
02:01:47,400 --> 02:01:54,200
don't know, it might be that his Z is set wrong, but I'm not sure

2136
02:01:54,800 --> 02:01:55,800
let's take a look.

2137
02:01:57,300 --> 02:01:59,100
Don't know which scene that actually is.

2138
02:02:00,100 --> 02:02:00,800
So there's that.

2139
02:02:00,800 --> 02:02:01,000
But

2140
02:02:02,100 --> 02:02:02,900
Let's see here.

2141
02:02:02,900 --> 02:02:08,200
So we've got your Sky wall and icicles here entry.

2142
02:02:09,200 --> 02:02:10,000
So

2143
02:02:15,500 --> 02:02:17,800
I believe it's this.

2144
02:02:19,300 --> 02:02:20,600
Because Krampus is next, right?

2145
02:02:20,600 --> 02:02:21,700
I believe it's this one.

2146
02:02:24,500 --> 02:02:29,900
And these both have the exact same Z, so that does seem like maybe

2147
02:02:29,900 --> 02:02:33,600
that's a problem, but maybe they're just in the wrong order.

2148
02:02:34,000 --> 02:02:34,300
Oh wait.

2149
02:02:34,300 --> 02:02:35,400
No, these are the same Flags.

2150
02:02:35,400 --> 02:02:36,000
So there

2151
02:02:37,700 --> 02:02:39,500
These should be sorting properly.

2152
02:02:39,500 --> 02:02:40,600
I don't know.

2153
02:02:42,200 --> 02:02:43,400
What's going on there?

2154
02:02:43,400 --> 02:02:45,400
I don't know why we're not seeing

2155
02:02:50,900 --> 02:02:54,400
I don't know why we're not seeing those those values.

2156
02:02:57,700 --> 02:02:59,900
Let's let's just take a quick look because

2157
02:03:00,000 --> 02:03:02,000
I'm already over time and who cares?

2158
02:03:02,000 --> 02:03:02,800
No one cares.

2159
02:03:06,800 --> 02:03:07,200
Hmm.

2160
02:03:12,700 --> 02:03:16,600
Need a quick way to set this to like large values, right?

2161
02:03:31,400 --> 02:03:32,100
We use it enough.

2162
02:03:32,100 --> 02:03:35,400
I don't think it's a waste of time test and better UI in there.

2163
02:03:39,100 --> 02:03:40,400
I can't pause, can I?

2164
02:03:42,200 --> 02:03:42,800
Hmm.

2165
02:03:43,800 --> 02:03:45,600
That just pauses the profiler,

2166
02:03:47,400 --> 02:03:48,000
Of course.

2167
02:03:50,200 --> 02:03:52,900
We don't really have a global pause working around so many things.

2168
02:03:52,900 --> 02:03:54,900
We should probably go fix in there.

2169
02:03:55,500 --> 02:03:59,100
Anyway, the problems of only having a few hours every week.

2170
02:04:00,000 --> 02:04:00,300
All right.

2171
02:04:00,300 --> 02:04:06,000
So yeah, I don't really know what's going on with that particular one.

2172
02:04:07,000 --> 02:04:13,800
It's a little weird to me that, that's a problem because it looks

2173
02:04:14,300 --> 02:04:16,000
harmless enough.

2174
02:04:17,000 --> 02:04:20,400
And so, you would think.

2175
02:04:22,400 --> 02:04:26,900
That it would be fine unless it has something more to do with these X

2176
02:04:26,900 --> 02:04:28,000
offsets here.

2177
02:04:54,400 --> 02:04:57,200
So the fact that this is marked a transient just means that it will

2178
02:04:57,200 --> 02:05:00,200
only show up between these two x values, right?

2179
02:05:01,100 --> 02:05:03,500
So there's nothing particularly weird there and we know that that

2180
02:05:03,500 --> 02:05:05,700
system is still working because if you take a look at the scene

2181
02:05:05,700 --> 02:05:09,500
immediately subsequent to it, you can see that that one also relies on

2182
02:05:09,500 --> 02:05:11,200
a bunch of transients and it's fine.

2183
02:05:12,600 --> 02:05:16,700
So I'm not really sure what's going on there.

2184
02:05:25,800 --> 02:05:28,000
I don't know why it would be having that problem.

2185
02:05:28,000 --> 02:05:31,400
Now, what I would like to do is I'd like to make this be the first

2186
02:05:31,400 --> 02:05:31,900
scene.

2187
02:05:32,800 --> 02:05:36,200
So I think what I can do there is just say like, oh well, you know,

2188
02:05:36,200 --> 02:05:39,100
let's just force it to be first.

2189
02:05:42,600 --> 02:05:43,100
Right?

2190
02:05:45,000 --> 02:05:47,700
And so at least then what I could do is I could go into cutscene and

2191
02:05:47,700 --> 02:05:53,600
see what's happening, right?

2192
02:06:07,400 --> 02:06:09,600
So, let's see how many layers of thinks there are.

2193
02:06:09,600 --> 02:06:12,300
Where are we?

2194
02:06:15,400 --> 02:06:15,800
There we go.

2195
02:06:16,600 --> 02:06:20,700
So we've got layer and X1, and we got layer count of five.

2196
02:06:20,700 --> 02:06:22,900
Here we come through here.

2197
02:06:22,900 --> 02:06:24,400
We're looking at this layer.

2198
02:06:33,100 --> 02:06:34,700
So, here's the transient.

2199
02:06:36,300 --> 02:06:37,500
Active is zero.

2200
02:06:40,000 --> 02:06:40,900
And active is one.

2201
02:06:41,200 --> 02:06:42,800
So we do know that we draw

2202
02:06:47,200 --> 02:06:49,800
one of the transient layers which is exactly what we expect.

2203
02:06:49,800 --> 02:06:53,300
We'd always expect to draw at least one of the transient layers, we

2204
02:06:53,300 --> 02:06:55,200
get the bitmap match back.

2205
02:06:55,200 --> 02:06:56,400
It's a real bitmap.

2206
02:06:56,400 --> 02:07:00,400
As far as we know, we go ahead and

2207
02:07:02,000 --> 02:07:07,700
Prepare the transform as we normally would and here is that transform.

2208
02:07:07,700 --> 02:07:09,000
Here's the offset P.

2209
02:07:10,600 --> 02:07:13,800
It's in a reasonable location, right?

2210
02:07:13,800 --> 02:07:15,300
-3.7,

2211
02:07:24,100 --> 02:07:27,600
And again, it's really only the x value that's at all unusual there.

2212
02:07:27,600 --> 02:07:29,000
And I'm going to assuming that's correct.

2213
02:07:29,000 --> 02:07:31,600
We don't really know, but I don't know why.

2214
02:07:31,600 --> 02:07:37,800
That would be at all bizarre right in theory, that should just work.

2215
02:07:44,400 --> 02:07:47,000
I guess, one thing I don't know is are these being rendered is upright

2216
02:07:47,000 --> 02:07:47,700
or not?

2217
02:07:49,100 --> 02:07:50,500
I would like to find that out.

2218
02:07:50,500 --> 02:07:53,400
Let's make sure they're not being rendered as upright Sprites because

2219
02:07:53,400 --> 02:07:58,700
that would potentially create this problem due to the Z offset.

2220
02:08:02,400 --> 02:08:05,100
So, they're not being rendered as upright, which is good.

2221
02:08:16,600 --> 02:08:17,800
However,

2222
02:08:26,700 --> 02:08:30,100
When we coming to push quad.

2223
02:08:38,000 --> 02:08:40,500
after packing, all of these things in here,

2224
02:08:46,900 --> 02:08:49,800
Yeah, all of the W values are properly zero.

2225
02:08:49,800 --> 02:08:50,700
It looks like

2226
02:08:54,700 --> 02:08:55,700
No, they are not.

2227
02:08:56,800 --> 02:08:59,800
Okay, so that is also a problem, right?

2228
02:09:00,800 --> 02:09:03,900
Because these are supposed to be flat, they're not supposed to be up.

2229
02:09:03,900 --> 02:09:04,400
Right?

2230
02:09:05,100 --> 02:09:10,100
When we bind these, this Z bias in here, the Z bias is only supposed

2231
02:09:10,100 --> 02:09:11,500
to be for upright Sprites.

2232
02:09:11,700 --> 02:09:14,800
So this has been a bug like the entire time.

2233
02:09:15,300 --> 02:09:19,400
We just haven't had any non upright Sprites, so probably what was

2234
02:09:19,400 --> 02:09:22,600
happening there and this is exactly what I thought might be happening.

2235
02:09:22,600 --> 02:09:26,600
Which is why when it's funny that it actually was true because it was

2236
02:09:26,600 --> 02:09:30,200
really just a hunch is since this bit

2237
02:09:30,400 --> 02:09:34,500
App starts lower down, it's Z bias will be increasing as it goes

2238
02:09:34,500 --> 02:09:37,300
upward and Santa Claus starts right here.

2239
02:09:37,600 --> 02:09:42,100
It the Z bias in an upright Sprite in, the Shader was enough to make

2240
02:09:42,100 --> 02:09:45,500
it Z value be higher than Santa Claus by the time Santa Claus started.

2241
02:09:45,500 --> 02:09:48,600
Because remember even though Santa Claus starts in front, his height

2242
02:09:48,600 --> 02:09:53,600
is is going to his Z bias, is going to start increasing only at a

2243
02:09:53,600 --> 02:09:56,000
certain point on the screen where he begins.

2244
02:09:57,900 --> 02:10:00,700
So it looks like the problem there is just in render group.

2245
02:10:00,700 --> 02:10:06,300
We never properly, handled Flats rights, the Z bias should only be

2246
02:10:06,300 --> 02:10:07,200
happening here.

2247
02:10:07,700 --> 02:10:12,600
If the Sprite is not a right that stands upright, it should have a z

2248
02:10:12,600 --> 02:10:21,400
biases, zero and and not of any other sort of like, stand up value.

2249
02:10:24,500 --> 02:10:28,200
Okay, so now our Santa Claus is back.

2250
02:10:28,600 --> 02:10:29,700
Everyone is happy.

2251
02:10:30,200 --> 02:10:34,300
And now I will go to the Q&A because I'm not going to try and fix the

2252
02:10:34,300 --> 02:10:35,300
near clipping plane thing yet.

2253
02:10:35,300 --> 02:10:36,600
So let's go to the Q&A.

2254
02:10:40,600 --> 02:10:44,800
So handmade he robot is really dead for real, right?

2255
02:11:06,000 --> 02:11:08,600
Just use asked, what will be our way forward to reduce GL drawer?

2256
02:11:08,600 --> 02:11:11,200
A calls will be looking to texture.

2257
02:11:11,200 --> 02:11:13,900
Atlas is Mega Texas or invent our own way, is it better to separate

2258
02:11:13,900 --> 02:11:15,500
cutscene rendering because it's so different.

2259
02:11:15,900 --> 02:11:19,100
The answer is, we don't know that we need a Way Forward yet.

2260
02:11:20,100 --> 02:11:24,100
In other words, like we don't actually have any performance problems

2261
02:11:24,100 --> 02:11:25,000
with this yet.

2262
02:11:25,900 --> 02:11:30,100
We only were looking at that as being a source of time that mattered

2263
02:11:30,100 --> 02:11:35,100
because our debug frame rate was not 60 frames a second but our nandi.

2264
02:11:35,300 --> 02:11:39,200
Our release mode frame rate is 60 frames a second so we actually don't

2265
02:11:39,200 --> 02:11:43,000
have a problem to solve yet, right?

2266
02:11:44,800 --> 02:11:49,000
And so before I would look at anything more complicated there, we have

2267
02:11:49,000 --> 02:11:50,800
to actually end up with a frame rate problem.

2268
02:11:50,800 --> 02:11:53,500
We have to solve which we don't currently have two,

2269
02:12:03,500 --> 02:12:06,800
Kylo asks, are we forced to use Cindy registers to use those

2270
02:12:06,800 --> 02:12:08,000
intrinsics for?

2271
02:12:08,300 --> 02:12:12,600
Are there some ways to do that without those like inline assembly or

2272
02:12:12,600 --> 02:12:13,500
something else?

2273
02:12:15,800 --> 02:12:25,500
So I guess what I would say is I'm not 100% sure if the question, if I

2274
02:12:25,500 --> 02:12:26,300
understand the question,

2275
02:12:32,800 --> 02:12:36,100
So I'll just start with a bit of background and you can stop me if

2276
02:12:36,100 --> 02:12:38,100
this is not answering the question.

2277
02:12:41,700 --> 02:12:46,600
On the original x86 architecture.

2278
02:12:47,300 --> 02:12:50,400
It did not have floating Point operations.

2279
02:12:50,500 --> 02:12:55,600
So you only had integer operations as far as manipulating numbers are

2280
02:12:55,600 --> 02:12:56,400
concerned.

2281
02:12:59,600 --> 02:13:05,300
They then added a CO Processing Unit called the x87, which had

2282
02:13:05,700 --> 02:13:10,900
floating Point operations for the first time, and those floating Point

2283
02:13:10,900 --> 02:13:13,000
operations were done.

2284
02:13:13,000 --> 02:13:16,300
Using a special set of registers to hold floating Point values.

2285
02:13:17,100 --> 02:13:19,400
So, when you wanted operate on floating Point values, you had to put

2286
02:13:19,400 --> 02:13:20,800
them into those registers.

2287
02:13:22,100 --> 02:13:25,500
And when you wanted to transfer, you know, if you want to round the

2288
02:13:25,500 --> 02:13:27,700
back to integer, something you had to move them out of those registers

2289
02:13:27,700 --> 02:13:29,300
using instructions for doing.

2290
02:13:29,400 --> 02:13:30,300
Exactly that.

2291
02:13:31,300 --> 02:13:34,500
So anytime you operated on floating Point values, you were going to

2292
02:13:34,500 --> 02:13:37,800
use the x87 stack, you put them in there you operate on the remove

2293
02:13:37,800 --> 02:13:39,200
them back, right?

2294
02:13:40,200 --> 02:13:44,800
Now, there's Opera you don't have to necessarily load them into

2295
02:13:44,900 --> 02:13:45,500
regular processor.

2296
02:13:45,500 --> 02:13:49,000
Registers first, you can load directly onto the x87 stack and you can

2297
02:13:49,000 --> 02:13:51,700
store directly out of the x87 stack to memory as well.

2298
02:13:52,700 --> 02:13:55,200
So it's just another set of registers but they were the registers for

2299
02:13:55,200 --> 02:13:57,900
operating on a floating Point unit, on a floating Point values.

2300
02:13:59,700 --> 02:14:06,900
When Cindy instructions were added to the X6 x86 architecture.

2301
02:14:07,200 --> 02:14:10,800
A separate set of registers were added for wide floating Point

2302
02:14:10,800 --> 02:14:12,100
operations, right?

2303
02:14:14,000 --> 02:14:18,100
The xmm registers and those registers are separate from the x87

2304
02:14:18,100 --> 02:14:18,800
registers.

2305
02:14:18,800 --> 02:14:22,300
So now, when you did floating Point operations, you had a choice of

2306
02:14:22,300 --> 02:14:24,500
putting things into one of two registers.

2307
02:14:24,500 --> 02:14:29,800
One register set was the x87 stack that you would use.

2308
02:14:29,800 --> 02:14:35,400
If you were trying to use x87 floating Point instructions and the

2309
02:14:35,400 --> 02:14:38,800
other one where the registers for Cindy instructions that you would

2310
02:14:38,800 --> 02:14:40,000
use for executing floating points.

2311
02:14:40,000 --> 02:14:43,000
But again in no way, were you ever doing?

2312
02:14:43,400 --> 02:14:46,500
Open operations in the main set of registers, because the

2313
02:14:46,500 --> 02:14:49,600
general-purpose registers don't have the capability of doing floating

2314
02:14:49,600 --> 02:14:50,900
Point operations at all.

2315
02:14:53,100 --> 02:14:56,900
once they move to the x64 architecture, they got rid of the x87

2316
02:14:56,900 --> 02:14:59,800
coprocessor concept altogether because again, it hadn't been a

2317
02:15:00,000 --> 02:15:01,200
Roster for quite some time.

2318
02:15:01,500 --> 02:15:04,400
It was simply just the old instruction set that the coprocessor used

2319
02:15:04,400 --> 02:15:07,800
to use had been sort of welded in and now just was used on the trip.

2320
02:15:07,900 --> 02:15:08,400
Always

2321
02:15:10,400 --> 02:15:15,500
They got rid of that and only have the same D registers, so single

2322
02:15:15,500 --> 02:15:21,800
Priscilla, like, single floating Point operations are now still done

2323
02:15:22,200 --> 02:15:27,300
on the vector floating Point Unit because the only floating Point

2324
02:15:27,300 --> 02:15:30,900
registers that are on the chip are wide floating Point registers,

2325
02:15:31,100 --> 02:15:38,000
there is no x87 stack anymore or x87 instructions as far as mainstream

2326
02:15:38,000 --> 02:15:39,100
x64 processor.

2327
02:15:39,100 --> 02:15:39,600
Use is

2328
02:15:39,800 --> 02:15:40,400
Concerned.

2329
02:15:41,900 --> 02:15:42,500
So,

2330
02:15:44,200 --> 02:15:45,700
The reason I don't quite understand.

2331
02:15:45,700 --> 02:15:49,300
The premise of the question is when you say, are we forced to use

2332
02:15:49,300 --> 02:15:51,700
Cindy in registers to use as intrinsics?

2333
02:15:51,700 --> 02:15:55,700
Or are there some ways to do it without those, what I would say is?

2334
02:15:55,700 --> 02:15:58,900
Well, what do you mean do it without those?

2335
02:15:59,100 --> 02:16:03,900
There's only one set of registers on the processor for doing things

2336
02:16:03,900 --> 02:16:06,900
like square roots or any kind of floating Point operations at all.

2337
02:16:06,900 --> 02:16:09,800
Just even adding two floating Point values together.

2338
02:16:09,800 --> 02:16:12,400
There's only one set of registers for those and that are the xmm

2339
02:16:12,400 --> 02:16:13,800
registers, right?

2340
02:16:15,900 --> 02:16:19,500
So I'm just not sure what you would even be trying to avoid.

2341
02:16:19,500 --> 02:16:22,400
If you're doing floating-point, you're using those registers, they are

2342
02:16:22,400 --> 02:16:24,100
the registers you want to use.

2343
02:16:24,100 --> 02:16:27,000
There is no reason you would want to avoid their use.

2344
02:16:27,300 --> 02:16:28,200
That is all there.

2345
02:16:28,200 --> 02:16:36,200
Therefore, and they are the only thing that that is used that that is

2346
02:16:36,200 --> 02:16:38,400
used for floating Point operations in that way.

2347
02:16:48,799 --> 02:16:49,299
Desi is.

2348
02:16:49,299 --> 02:16:52,500
Have you seen em USL standard Library?

2349
02:16:52,500 --> 02:16:53,400
It has very good code.

2350
02:16:53,400 --> 02:16:54,900
Quality Square.

2351
02:16:54,900 --> 02:16:56,299
F on x86.

2352
02:16:56,299 --> 02:16:58,000
64 is one instruction on it.

2353
02:16:59,900 --> 02:17:00,700
It's for Linux.

2354
02:17:00,700 --> 02:17:03,000
But parts of it are very profitable.

2355
02:17:04,100 --> 02:17:05,100
No, I have it.

2356
02:17:05,100 --> 02:17:07,299
Mus l.

2357
02:17:13,100 --> 02:17:14,200
I can take a look.

2358
02:17:17,500 --> 02:17:17,900
Oops.

2359
02:17:40,500 --> 02:17:42,100
So, here we are.

2360
02:17:46,700 --> 02:17:51,400
Well, that doesn't really seem to be like source code to the x86 64

2361
02:17:51,400 --> 02:17:52,000
version.

2362
02:17:54,000 --> 02:17:55,400
Oh, are these directories?

2363
02:17:59,400 --> 02:17:59,799
Hmm.

2364
02:18:03,799 --> 02:18:05,900
I don't know where to go to get the actual code.

2365
02:18:16,400 --> 02:18:21,200
I don't know where the code is, unfortunately, so I can't really look.

2366
02:18:21,200 --> 02:18:22,100
Okay, here we go.

2367
02:18:30,500 --> 02:18:33,299
So I don't know where the floating-point stuff would be, for example.

2368
02:18:36,500 --> 02:18:37,100
Math.

2369
02:18:41,400 --> 02:18:44,000
Wow, they use 1 C function per function.

2370
02:18:44,400 --> 02:18:44,799
That's

2371
02:18:47,500 --> 02:18:51,100
that's some some aggressive.

2372
02:18:53,000 --> 02:18:53,700
Work there.

2373
02:19:04,200 --> 02:19:07,000
So that's not an optimized version.

2374
02:19:07,200 --> 02:19:11,299
So how do I look at like the optimized that's like a sea version?

2375
02:19:12,400 --> 02:19:14,299
I don't know if maybe there's yeah.

2376
02:19:16,000 --> 02:19:17,299
Not sure how to get.

2377
02:19:19,500 --> 02:19:22,900
The like the specialized one.

2378
02:19:24,100 --> 02:19:27,600
Maybe it's also in there but under something like

2379
02:19:29,100 --> 02:19:29,900
there it is.

2380
02:19:34,299 --> 02:19:34,700
Yeah.

2381
02:19:39,900 --> 02:19:42,200
Let's check out a tan too.

2382
02:19:45,799 --> 02:19:46,600
What?

2383
02:19:51,200 --> 02:19:51,600
What?

2384
02:19:53,400 --> 02:19:55,500
What is what is this?

2385
02:19:58,200 --> 02:20:03,000
How that's not those don't exist anymore, do they?

2386
02:20:04,800 --> 02:20:08,300
Can you call fva Tan from x64?

2387
02:20:15,200 --> 02:20:17,000
I mean, I guess you could

2388
02:20:20,800 --> 02:20:22,200
but if you did,

2389
02:20:23,800 --> 02:20:26,900
Your operating system has to be restoring.

2390
02:20:26,900 --> 02:20:33,000
The old x86 stack, which I don't think it does on Windows does it?

2391
02:20:33,000 --> 02:20:33,800
Maybe it does.

2392
02:20:37,900 --> 02:20:39,600
Yeah, I don't know about this man.

2393
02:20:39,600 --> 02:20:40,700
This does not look good.

2394
02:20:40,800 --> 02:20:45,700
That is not, that is not probably a good way to do an F.

2395
02:20:45,700 --> 02:20:48,100
Be a tan on a generals.

2396
02:20:49,600 --> 02:20:51,000
I don't know about this dude.

2397
02:20:54,600 --> 02:20:58,300
I'm not getting a good feeling about this, you know I'm saying?

2398
02:21:18,100 --> 02:21:22,100
do you know whether the squirt function in math that H uses processor

2399
02:21:22,100 --> 02:21:26,200
instructions or calculates results via some software algorithm

2400
02:21:32,900 --> 02:21:36,100
I don't think I understand the question.

2401
02:21:40,800 --> 02:21:44,500
I mean, a software, algorithm would still use processor instructions,

2402
02:21:44,500 --> 02:21:45,000
right?

2403
02:21:46,200 --> 02:21:51,200
Do you just mean does it use Squirt PS and we showed that on today's

2404
02:21:51,200 --> 02:21:54,300
stream, it does eventually call call underscore.

2405
02:21:54,300 --> 02:21:56,500
Mmm, underscore a squirt underscore SS.

2406
02:21:58,900 --> 02:22:02,700
It does eventually do that in the C runtime Library so it just does a

2407
02:22:02,700 --> 02:22:05,400
bunch of preambles first, right?

2408
02:22:06,600 --> 02:22:10,300
It does a bunch of checks to see first whether it needs to be in a

2409
02:22:10,300 --> 02:22:13,500
special case probably for like in fernan or something.

2410
02:22:13,500 --> 02:22:17,400
I don't know what it's checking for actually - one maybe your negative

2411
02:22:17,400 --> 02:22:22,300
numbers and maybe the sea spec requires certain things to happen on

2412
02:22:22,300 --> 02:22:23,100
negative numbers.

2413
02:22:23,100 --> 02:22:26,000
I don't know but it was doing a bunch of Preamble but then eventually

2414
02:22:26,000 --> 02:22:27,600
did get down to actually just calling

2415
02:22:30,700 --> 02:22:33,800
This word instruction, which I never remember what it's actually

2416
02:22:33,800 --> 02:22:34,500
called.

2417
02:22:35,200 --> 02:22:37,500
The intrinsics called one thing, but the actual instruction on the

2418
02:22:37,500 --> 02:22:38,000
chip,

2419
02:22:45,800 --> 02:22:48,200
Intel, gives it a different name, squared SS.

2420
02:22:51,000 --> 02:22:55,500
So, squirt, assess is what the processor did.

2421
02:22:55,500 --> 02:22:56,500
In fact, call.

2422
02:22:56,700 --> 02:22:59,300
So the C runtime library is, in fact, using it.

2423
02:23:00,000 --> 02:23:03,800
It just only uses it after doing a bunch of unnecessary work for our

2424
02:23:03,800 --> 02:23:07,100
purposes, which I believe we're for checking for how for error

2425
02:23:07,100 --> 02:23:07,800
conditions.

2426
02:23:19,900 --> 02:23:24,800
And yeah, if you go back in today's stream and watch where I stepped

2427
02:23:24,800 --> 02:23:29,600
in to squirt squared F, we saw it call Squirt SS.

2428
02:23:29,900 --> 02:23:33,700
So it is actually calling that in the C runtime Library.

2429
02:23:33,700 --> 02:23:37,300
It just does a bunch of unnecessary Preamble probably to conform to

2430
02:23:37,300 --> 02:23:39,900
spec error, reporting standards or something.

2431
02:23:42,500 --> 02:23:44,900
All right, let's go ahead and close it down.

2432
02:23:45,900 --> 02:23:48,200
Thank you everybody for joining me for another episode of handmade

2433
02:23:48,200 --> 02:23:48,500
hero.

2434
02:23:48,500 --> 02:23:49,600
It's been a pleasure coding with you.

2435
02:23:49,600 --> 02:23:52,500
As always, if you would like to follow along at home, you can always

2436
02:23:52,500 --> 02:23:54,500
pre-order the game on handmade hero dot-org.

2437
02:23:55,100 --> 02:23:57,100
It comes to the source code so you can play around with it.

2438
02:23:57,100 --> 02:23:57,900
We also form site.

2439
02:23:57,900 --> 02:23:59,800
You go to ask question a patreon.

2440
02:24:00,000 --> 02:24:00,200
Age.

2441
02:24:00,200 --> 02:24:03,400
You can go to transport the video series schedule bot that tweet the

2442
02:24:03,400 --> 02:24:03,700
schedule.

2443
02:24:03,700 --> 02:24:06,800
You so, you know, when we're going to be live and an episode guide so

2444
02:24:06,800 --> 02:24:09,500
you can go back and look at any previous episodes we did and it has

2445
02:24:09,500 --> 02:24:10,900
all kinds of great annotations and stuff.

2446
02:24:10,900 --> 02:24:13,900
So it's easy to find things that's about it for today.

2447
02:24:13,900 --> 02:24:18,300
I'll be back tomorrow for another episode where we will probably just

2448
02:24:18,300 --> 02:24:21,400
go back to doing the camera stuff since the day, we kind of had a

2449
02:24:21,400 --> 02:24:24,500
little bit of a diversion fixing some things, but it's nice to fix

2450
02:24:24,500 --> 02:24:24,900
things.

2451
02:24:25,500 --> 02:24:26,200
That's about it.

2452
02:24:26,200 --> 02:24:29,400
Thank you for joining me until tomorrow have fun programming and I'll

2453
02:24:29,400 --> 02:24:29,900
see

2454
02:24:30,000 --> 02:24:30,700
we won on the internet.

2455
02:24:30,700 --> 02:24:31,600
Take it easy, everybody.

