1
00:00:03,400 --> 00:00:05,400
Hello everyone and welcome to handmade hero.

2
00:00:05,400 --> 00:00:07,800
The show recode complete game live on stream.

3
00:00:07,800 --> 00:00:12,200
We are trying out weekend streaming here and well.

4
00:00:15,900 --> 00:00:18,400
I don't know that it's gonna be that much different than weekday

5
00:00:18,400 --> 00:00:20,300
streaming, but we're going to do two episodes.

6
00:00:20,300 --> 00:00:22,100
Back-to-back is basically the difference.

7
00:00:23,700 --> 00:00:27,500
So, instead of doing one episode every week night, we're going to do

8
00:00:27,500 --> 00:00:31,200
two episodes on Saturday and two episodes on Sunday and see how that

9
00:00:31,200 --> 00:00:31,600
works.

10
00:00:35,800 --> 00:00:38,000
The idea here is just to make it so that we can have a more of a

11
00:00:38,000 --> 00:00:40,200
continuous workflow.

12
00:00:40,200 --> 00:00:42,700
Because two hour blocks, tend to be better than one hour blocks and

13
00:00:42,700 --> 00:00:45,800
programming in my experience, just normally especially when you factor

14
00:00:45,800 --> 00:00:47,400
in the discussion that has to go on.

15
00:00:47,400 --> 00:00:52,100
So, you know, there's certain less amount of coding that can actually

16
00:00:52,100 --> 00:00:53,400
happen when I'm explaining things.

17
00:00:53,400 --> 00:00:53,900
Obviously

18
00:00:55,200 --> 00:00:59,800
And so in order to try and make it more possible for us to do bigger,

19
00:00:59,800 --> 00:01:02,900
code changes, little more smoothly, we're gonna see how that works.

20
00:01:04,400 --> 00:01:08,000
So what I'm going to do today is finished what we were doing before

21
00:01:08,300 --> 00:01:09,300
today is day 350.

22
00:01:09,300 --> 00:01:13,300
So you want to start with de 349 source code, if you want to do that,

23
00:01:14,900 --> 00:01:18,100
If you want to follow along, my voice is in bad shape for some reason.

24
00:01:21,800 --> 00:01:22,800
I don't think it's the talking.

25
00:01:22,800 --> 00:01:28,400
I actually think that it is a little bit of a cold eye.

26
00:01:31,100 --> 00:01:35,600
I got my flu shot so I don't know that I have the flu, but I might

27
00:01:35,600 --> 00:01:38,100
have, like, fighting off the flu or something.

28
00:01:38,100 --> 00:01:41,500
I don't know what anyway, but I hadn't been feeling well.

29
00:01:41,500 --> 00:01:43,700
The past couple days so, so we'll see.

30
00:01:43,700 --> 00:01:49,700
Anyway, what I was working on when we last left hand made hero week

31
00:01:49,700 --> 00:01:53,300
ago, was I wanted to make it so that we could simulate multiple

32
00:01:53,300 --> 00:01:56,300
regions at the same time and we basically did that.

33
00:01:57,100 --> 00:02:00,600
So I showed at the end of last week stream and

34
00:02:00,900 --> 00:02:01,600
Full of stimulating.

35
00:02:01,600 --> 00:02:03,300
Two, separate regions in the world.

36
00:02:04,100 --> 00:02:04,800
Concurrently

37
00:02:08,900 --> 00:02:13,300
And it worked just fine, so that's good but we have a few more things

38
00:02:13,300 --> 00:02:18,200
to deal with here and we have to deal with the SIM region merging.

39
00:02:18,500 --> 00:02:20,500
I don't know that we're going to have to deal with printed clocking

40
00:02:20,500 --> 00:02:21,800
but we need to talk about both of them.

41
00:02:22,100 --> 00:02:26,600
However, before we get to there and this got fixed before we get to

42
00:02:26,600 --> 00:02:32,300
their, I want to do one of the thing and talk about why I'm doing it

43
00:02:32,300 --> 00:02:35,800
and how I'm doing it because it's something that I think is, you know,

44
00:02:36,100 --> 00:02:37,500
important to kind of know.

45
00:02:38,000 --> 00:02:38,900
And be aware of.

46
00:02:38,900 --> 00:02:42,000
So you can kind of, it's just a general, it's a fairly standard code

47
00:02:42,000 --> 00:02:42,900
transformation.

48
00:02:43,300 --> 00:02:45,600
If you're in architecture, kind of person and I just want people to

49
00:02:45,600 --> 00:02:47,500
understand what's going on and why?

50
00:02:49,000 --> 00:02:53,900
So if you remember how we made this work, we have a function called

51
00:02:53,900 --> 00:02:55,600
update and render Sim region.

52
00:02:55,800 --> 00:02:58,700
And what update and render Sim region does is update and render Sim

53
00:02:58,700 --> 00:02:59,200
region.

54
00:03:00,200 --> 00:03:06,300
Allows you to say this block of the world needs to be updated and that

55
00:03:06,300 --> 00:03:09,100
way you can pick any block of the world that you need to update and

56
00:03:09,100 --> 00:03:11,900
have it update, doesn't have to be only one per frame.

57
00:03:11,900 --> 00:03:13,600
We can do 12 for frame if you want.

58
00:03:13,600 --> 00:03:15,400
We could Farm them off to multiple processors.

59
00:03:15,400 --> 00:03:17,000
We can do anything we want, really?

60
00:03:18,600 --> 00:03:23,200
But when we did this, one of the things that you'll notice and a lot

61
00:03:23,200 --> 00:03:27,100
of times people, ask me what I think of functional programming and I

62
00:03:27,100 --> 00:03:29,100
always say the same thing which is, I think the functional programs

63
00:03:29,100 --> 00:03:29,700
really good.

64
00:03:30,200 --> 00:03:32,900
I don't think it's the kind of thing that you should apply everywhere.

65
00:03:32,900 --> 00:03:35,200
Just like, most programming practices, aren't the kind of thing, you

66
00:03:35,200 --> 00:03:35,900
should play everywhere.

67
00:03:35,900 --> 00:03:38,800
But functional programming is definitely something that's worth

68
00:03:38,800 --> 00:03:42,600
understanding and worth applying in a number of circumstances.

69
00:03:43,000 --> 00:03:43,500
Well,

70
00:03:45,200 --> 00:03:48,700
One of the things that you can sort of think of that, even a little

71
00:03:48,700 --> 00:03:53,700
bit more General than that is really just more of the concept of State

72
00:03:53,700 --> 00:03:56,600
visibility May sort of minimization.

73
00:03:57,300 --> 00:04:01,100
And what I mean by that is anytime that you look at a function, it's

74
00:04:01,100 --> 00:04:03,200
very instructive to know what it is.

75
00:04:03,200 --> 00:04:05,200
That that function actually requires to do.

76
00:04:05,200 --> 00:04:09,200
Its job, meaning, what state in the system does this function?

77
00:04:09,200 --> 00:04:10,100
Need to access?

78
00:04:10,600 --> 00:04:13,800
Now, in a purely functional context, one of the reasons that like I

79
00:04:13,800 --> 00:04:14,600
say, functional

80
00:04:14,700 --> 00:04:20,700
I think it's a good thing is because in some contexts you can get, you

81
00:04:20,700 --> 00:04:24,800
can get a function down to the point where it doesn't actually modify

82
00:04:24,800 --> 00:04:27,900
anything it only has to look at things right.

83
00:04:32,800 --> 00:04:35,400
Meaning the parameters that you pass in are immutable.

84
00:04:36,300 --> 00:04:39,300
And the only thing that you're interested in coming back from the

85
00:04:39,300 --> 00:04:41,500
function, is the return value, which you're going to use.

86
00:04:42,100 --> 00:04:45,800
And this obviously, pays a number of dividends any number of such

87
00:04:45,800 --> 00:04:50,400
functions can be called concurrently without any locking or anything,

88
00:04:50,400 --> 00:04:50,900
right?

89
00:04:51,000 --> 00:04:57,000
Because if all you do is look at the state of something and then

90
00:04:57,000 --> 00:05:00,200
return a value, you don't have to worry if two things are doing at the

91
00:05:00,200 --> 00:05:01,500
same time, right?

92
00:05:01,600 --> 00:05:02,500
To things that are doing that.

93
00:05:02,600 --> 00:05:04,800
Same time will still produce completely correct results because

94
00:05:04,800 --> 00:05:05,800
they're not touching.

95
00:05:06,400 --> 00:05:09,500
Any of the things that they're being handed, they're giving their

96
00:05:09,500 --> 00:05:13,300
being given this information as purely advisory and they are not

97
00:05:13,300 --> 00:05:15,100
allowed to go in and muck with it, right?

98
00:05:15,500 --> 00:05:18,500
This is what people mean when they say no side effects of a function,

99
00:05:18,500 --> 00:05:19,000
right?

100
00:05:19,000 --> 00:05:21,700
It means that when I call the function, it's not going to touch

101
00:05:21,700 --> 00:05:22,100
anything.

102
00:05:22,100 --> 00:05:24,900
It's just going to return a variable back to me, and that's the only

103
00:05:24,900 --> 00:05:26,400
thing that it's going to do.

104
00:05:27,100 --> 00:05:28,700
So, that's very powerful for a number of reasons.

105
00:05:28,700 --> 00:05:32,200
Right, another reason that's very powerful is it means that you don't

106
00:05:32,200 --> 00:05:32,400
have to

107
00:05:32,600 --> 00:05:36,600
To wonder about what that function is going to do when you call it.

108
00:05:36,700 --> 00:05:39,900
So for example in this circumstance, when we had two of these guys

109
00:05:39,900 --> 00:05:44,700
here, you can kind of see that when I call this update and render some

110
00:05:44,700 --> 00:05:46,700
region, there's a lot of stuff getting passed here.

111
00:05:47,100 --> 00:05:52,100
That I wouldn't really want to be touched or accessed in the case

112
00:05:52,100 --> 00:05:57,100
where I was simulating, something that wasn't getting rendered.

113
00:05:57,100 --> 00:05:59,800
So, for example, you know, we passed the render group and the

114
00:06:00,000 --> 00:06:02,600
Buffer here, well, the render group in the draw.

115
00:06:02,600 --> 00:06:05,700
Buffer are pieces of information that only someone who's going to

116
00:06:05,700 --> 00:06:07,600
display information to the screen would need.

117
00:06:08,200 --> 00:06:11,200
And so, you can tell right away that this function, really at this

118
00:06:11,200 --> 00:06:17,000
point, isn't quite right in terms of how it operates and what it

119
00:06:17,000 --> 00:06:17,700
needs.

120
00:06:17,700 --> 00:06:22,800
Because sometimes we want to call it in ways that don't involve using

121
00:06:22,800 --> 00:06:25,400
those parameters and those end up getting nullified out, right?

122
00:06:28,100 --> 00:06:32,800
Okay, so when when I look at this, that definitely gives me some

123
00:06:32,800 --> 00:06:36,800
concern and if you look at how the system is architected currently

124
00:06:36,800 --> 00:06:38,400
when we want to call this thing twice.

125
00:06:38,400 --> 00:06:42,700
If I didn't, you know, when I, when I did this before, I'm going to

126
00:06:42,700 --> 00:06:45,400
look and see if I can make that debug camera, be a little further out

127
00:06:45,400 --> 00:06:45,800
as well.

128
00:06:45,800 --> 00:06:46,400
Whereas

129
00:06:48,800 --> 00:06:49,900
I don't really remember what that's called.

130
00:06:49,900 --> 00:06:50,600
Hold on a second.

131
00:06:54,300 --> 00:06:56,900
It's called render camera, debug distance.

132
00:06:59,000 --> 00:07:07,200
so, if I do a search Global under camera, beeps camera debug distance,

133
00:07:08,200 --> 00:07:09,700
all right, or not,

134
00:07:11,300 --> 00:07:12,300
probably spelled that wrong.

135
00:07:13,700 --> 00:07:14,200
Here it is.

136
00:07:14,300 --> 00:07:16,400
I knew I knew it was there any way to know why I search for it?

137
00:07:17,600 --> 00:07:18,500
I missed the underscore.

138
00:07:19,200 --> 00:07:22,500
All right, I'm going to just make that be higher up.

139
00:07:23,500 --> 00:07:26,000
so, if we take a look at what happens here, when I run the program,

140
00:07:29,200 --> 00:07:31,900
And I turn on the debug stream here at that.

141
00:07:31,900 --> 00:07:32,900
Still probably wasn't enough.

142
00:07:32,900 --> 00:07:34,000
Let's make it even further.

143
00:07:37,200 --> 00:07:37,800
Excited.

144
00:07:37,900 --> 00:07:40,300
We don't have good slider so I don't want to have to edit it there as

145
00:07:40,300 --> 00:07:42,000
a pain in the butt, to edit it every time.

146
00:07:43,100 --> 00:07:47,000
So if I, if I switch this here we should be able to see still not

147
00:07:47,000 --> 00:07:49,000
enough far as it's really far.

148
00:07:49,000 --> 00:07:53,400
Okay, so maybe we want something more like 150 200.

149
00:07:54,100 --> 00:07:59,300
So now that I've got the camera far enough out, if I do switch to the

150
00:07:59,300 --> 00:08:00,600
debug camera, there you go.

151
00:08:01,000 --> 00:08:04,800
You can see that s debug region, down here and we do want it rendering

152
00:08:05,000 --> 00:08:05,200
Right.

153
00:08:05,200 --> 00:08:09,000
So it's okay that we pass in the render group there, but now let's say

154
00:08:09,000 --> 00:08:12,900
that I'm talking about the game in a more realistic setting, not in a

155
00:08:12,900 --> 00:08:16,900
debug View and I don't want that to be drawn, right?

156
00:08:17,500 --> 00:08:20,200
Well, what I do when I don't want that to be drawn in the way that we

157
00:08:20,200 --> 00:08:24,900
current have currently have the code structured is I just get rid of

158
00:08:24,900 --> 00:08:27,200
these things that I'm passing, right?

159
00:08:27,200 --> 00:08:32,500
I just say, I don't want you to access the render group and then you

160
00:08:32,500 --> 00:08:32,799
won't.

161
00:08:32,799 --> 00:08:34,799
And now that simulation is still a

162
00:08:34,900 --> 00:08:35,500
Occurring, right?

163
00:08:35,500 --> 00:08:38,799
You can still see, we've got that all that extra work.

164
00:08:38,799 --> 00:08:39,900
Being done here, right?

165
00:08:40,000 --> 00:08:45,200
That hunt, super unoptimized function that takes a lot of time, but

166
00:08:45,200 --> 00:08:49,300
when I zoom out, it's not being drawn and that's exactly what we would

167
00:08:49,300 --> 00:08:53,100
expect to see because we, you know, it shouldn't be right.

168
00:08:54,100 --> 00:08:57,100
And, you know what, what's interesting about this too is you can kind

169
00:08:57,100 --> 00:08:59,800
of see another bit of leakage

170
00:09:00,000 --> 00:09:00,600
Happening Here.

171
00:09:00,600 --> 00:09:04,300
In fact this is a really good example of why I want to do the code

172
00:09:04,300 --> 00:09:05,800
change that I'm going to do to.

173
00:09:06,200 --> 00:09:10,800
You can see that the particle systems are active down here, right?

174
00:09:10,800 --> 00:09:12,900
I don't know if you guys can see that but there's little particles

175
00:09:12,900 --> 00:09:13,700
being emitted here.

176
00:09:14,000 --> 00:09:17,600
And the reason for that is because hey, anytime you're in a

177
00:09:20,600 --> 00:09:21,900
You're in part of the simulation.

178
00:09:23,900 --> 00:09:26,100
It's going to want to generate particles, right?

179
00:09:26,100 --> 00:09:29,600
That's what that's what happens in these circumstances particles get

180
00:09:29,600 --> 00:09:30,800
generated, right?

181
00:09:33,700 --> 00:09:37,000
So, it's not that we can't do what we want to do with this, and even

182
00:09:37,000 --> 00:09:39,500
for the particle system, part of it, I could do the exact same

183
00:09:39,500 --> 00:09:42,500
process, I could make it so that when I call updated render same

184
00:09:42,500 --> 00:09:46,900
region, I have fundamentally speaking, you know, just some stuff that

185
00:09:46,900 --> 00:09:49,200
I pass in here, right?

186
00:09:50,300 --> 00:09:53,400
And that's a totally reasonable way to structure code, if that's the

187
00:09:53,400 --> 00:09:55,900
most efficient way to do it, and we may want to keep it that way.

188
00:09:55,900 --> 00:09:57,800
But there's at least one thing that I think I probably don't want to

189
00:09:57,800 --> 00:09:58,300
keep that way.

190
00:09:58,300 --> 00:10:00,300
But we'll sort of talked about that a second.

191
00:10:04,200 --> 00:10:06,400
So, if we take a look at what's happening with updating, render Sim

192
00:10:06,400 --> 00:10:10,500
region, what we have effectively done is said, okay, rather than

193
00:10:10,500 --> 00:10:14,000
Breaking this up into smaller functions and calling the ones that we

194
00:10:14,000 --> 00:10:14,700
want.

195
00:10:14,800 --> 00:10:17,700
We've kept it monolithic so that it does what it does.

196
00:10:17,900 --> 00:10:21,600
And then inside that monolithic function, we've put an if statement

197
00:10:21,600 --> 00:10:26,900
that says, hey, if you are in a place where you wanted me to process

198
00:10:26,900 --> 00:10:30,500
input, then I will do the stuff that I was going to do for that.

199
00:10:30,500 --> 00:10:31,000
Right?

200
00:10:31,900 --> 00:10:33,400
And similarly, you get kind of a

201
00:10:33,700 --> 00:10:37,300
Similar situation here where like if I go down to update and render

202
00:10:37,300 --> 00:10:41,300
entities, you know, and I look inside that function which is sort of

203
00:10:41,300 --> 00:10:44,600
sub function here of the simulation update.

204
00:10:44,700 --> 00:10:45,900
If we look at what's going on there.

205
00:10:45,900 --> 00:10:47,000
The same thing is true.

206
00:10:47,500 --> 00:10:51,000
The simulation code is here and will do the operations it needs to do

207
00:10:51,000 --> 00:10:53,000
to, to do the simulation.

208
00:10:53,500 --> 00:10:54,800
But then the render group,

209
00:10:56,000 --> 00:10:59,900
Is switched on and says, well, if there is a render group, then I'll

210
00:10:59,900 --> 00:11:03,900
go through and do this rendering that, I needed to do for this entity,

211
00:11:04,000 --> 00:11:07,100
but if it's not, I'll just ignore all of this code altogether, you

212
00:11:07,100 --> 00:11:10,700
know, none of it will become active and again, for the particle system

213
00:11:10,700 --> 00:11:11,000
stuff.

214
00:11:11,000 --> 00:11:15,800
Since we have this problem of spawning particles, you can kind of see

215
00:11:15,800 --> 00:11:17,100
here with the particle cash.

216
00:11:17,300 --> 00:11:20,300
What we'd want to do is the exact same thing here, right?

217
00:11:20,400 --> 00:11:23,400
We'd want to basically say, hey, the particle cash, should be

218
00:11:23,400 --> 00:11:25,600
something that's passed down to us and if we don't

219
00:11:25,800 --> 00:11:26,300
Have one.

220
00:11:26,400 --> 00:11:29,300
We shouldn't be doing this operation, right?

221
00:11:32,600 --> 00:11:34,200
So that's one way to structure the code.

222
00:11:35,700 --> 00:11:40,000
And what it essentially means is that when you are doing this

223
00:11:40,200 --> 00:11:45,600
particular operation, you're going to pass in a superset potentially,

224
00:11:45,600 --> 00:11:50,300
not a proper superset, perhaps, but a super set of all of the things

225
00:11:50,300 --> 00:11:53,200
that you might need to complete the operation.

226
00:11:53,400 --> 00:11:59,100
And then, you are going to selectively switch some of them off and the

227
00:11:59,100 --> 00:11:59,800
code.

228
00:12:00,100 --> 00:12:05,300
Using them will know when you've done that not to perform certain

229
00:12:05,600 --> 00:12:11,200
aspects of their function and it's important to internalize when this

230
00:12:11,200 --> 00:12:12,600
is happening and why.

231
00:12:13,600 --> 00:12:17,700
So we could equivalently say let's break this up into two phases,

232
00:12:17,800 --> 00:12:21,300
update and render, which are separate right?

233
00:12:24,100 --> 00:12:27,400
And if we did that, then we would only pass the render operations to

234
00:12:27,400 --> 00:12:28,200
the render side.

235
00:12:28,200 --> 00:12:32,000
And we'd only pass the update operations or information rather to the

236
00:12:32,000 --> 00:12:32,800
update side.

237
00:12:33,900 --> 00:12:38,200
And if we do that, that would make this code a lot more understandable

238
00:12:38,200 --> 00:12:41,500
and digestible because it means that you don't have the two parts sort

239
00:12:41,500 --> 00:12:42,600
of coming close together.

240
00:12:43,100 --> 00:12:47,700
The problem is, if we did that, we also pay potentially a very large

241
00:12:47,700 --> 00:12:51,000
cost and the cost that we pay is that in doing.

242
00:12:51,000 --> 00:12:53,400
So we would force the code.

243
00:12:53,700 --> 00:12:59,500
To look like this Loop twice, meaning, we would have to Loop over all

244
00:12:59,500 --> 00:13:02,400
the entities that we were concerned about in the same region two

245
00:13:02,400 --> 00:13:03,000
times.

246
00:13:03,800 --> 00:13:08,000
And in doing that, that means we are bringing all of their information

247
00:13:08,000 --> 00:13:09,100
back into the cache.

248
00:13:09,100 --> 00:13:12,300
Both times, this can be very expensive, right?

249
00:13:12,300 --> 00:13:13,900
That can be a very expensive thing to do.

250
00:13:18,800 --> 00:13:22,100
Now, we don't know a priority, which methods Cass.

251
00:13:22,100 --> 00:13:26,400
You cash usage is actually better because we haven't measured it.

252
00:13:26,500 --> 00:13:29,600
It could be that the things that we're doing because we also do the

253
00:13:29,600 --> 00:13:32,200
rendering and have to push things on the push buffer, in that case,

254
00:13:32,200 --> 00:13:33,200
whatever it could be.

255
00:13:33,200 --> 00:13:37,600
That for some reason we don't come out ahead, Cash Wise if we by

256
00:13:37,600 --> 00:13:40,300
merging two together, but it could also be that we do.

257
00:13:41,000 --> 00:13:43,500
And so it's always a trade-off here.

258
00:13:45,800 --> 00:13:49,100
When you look at these simplifying functions down so that they take

259
00:13:49,100 --> 00:13:54,000
less things is definitely something you want to do if you can without

260
00:13:54,000 --> 00:13:57,400
paying any cost but in some cases you have definite cost and this is

261
00:13:57,400 --> 00:13:58,300
potentially one of them.

262
00:13:59,400 --> 00:14:03,200
So what I want to do here is just show how we would remove some of

263
00:14:03,200 --> 00:14:03,400
this.

264
00:14:03,400 --> 00:14:06,800
If we wanted to, I'm not going to split up update and render yet.

265
00:14:06,800 --> 00:14:09,300
Because like I said, I'm not really confident that that's a good

266
00:14:09,300 --> 00:14:13,600
decision, there's nothing wrong with writing code, this way again, you

267
00:14:13,600 --> 00:14:15,400
know, there's obviously a lot of

268
00:14:15,600 --> 00:14:19,000
Doggery in programming and people often say you know you have to split

269
00:14:19,000 --> 00:14:22,300
up concerns or keep things in class and Bubba all of that stuff is,

270
00:14:22,300 --> 00:14:25,100
you know, it's is obviously, you know, not true right?

271
00:14:25,400 --> 00:14:26,600
CPUs are CPUs.

272
00:14:26,600 --> 00:14:27,800
They execute code.

273
00:14:28,000 --> 00:14:29,500
They know nothing of these things.

274
00:14:29,800 --> 00:14:34,300
And so the only thing that really matters at the end of the day is the

275
00:14:34,300 --> 00:14:35,200
shipping product.

276
00:14:35,400 --> 00:14:36,700
Were you able to write it efficiently?

277
00:14:36,700 --> 00:14:37,200
Did it work?

278
00:14:37,200 --> 00:14:40,200
Okay, did it, you know take too long to bug all those sorts of things?

279
00:14:40,300 --> 00:14:42,700
Measurable outcomes is the only thing that matters.

280
00:14:43,600 --> 00:14:45,400
And so in this case, again, with something like

281
00:14:45,500 --> 00:14:48,900
This both ways of structuring the code are totally valid.

282
00:14:48,900 --> 00:14:50,000
They just have trade-offs.

283
00:14:50,200 --> 00:14:52,800
And it's a question of which of those trade-offs, is the right one to

284
00:14:52,800 --> 00:14:54,100
make in this circumstance.

285
00:14:57,200 --> 00:14:59,700
So, here where we have the render group coming in,

286
00:15:00,800 --> 00:15:01,900
And and that's our stuff.

287
00:15:01,900 --> 00:15:03,100
I'm not going to touch that.

288
00:15:03,100 --> 00:15:05,700
Instead, what I'm going to do is just show how we might address this

289
00:15:05,700 --> 00:15:10,600
situation for a part that I think is absolutely of no cash concern is

290
00:15:10,600 --> 00:15:11,300
no perform screen.

291
00:15:11,400 --> 00:15:14,100
There's a there's probably no reason why it would have to do it that

292
00:15:14,100 --> 00:15:16,100
way and that is this part right here.

293
00:15:16,100 --> 00:15:19,400
So you can see that we have looked to see if any players are trying to

294
00:15:19,400 --> 00:15:20,000
join.

295
00:15:20,300 --> 00:15:20,800
Right?

296
00:15:21,700 --> 00:15:24,900
And this is clearly you know if you look at what's going on here,

297
00:15:24,900 --> 00:15:29,400
there's there's obviously no real reason why this would have to

298
00:15:30,000 --> 00:15:32,100
be done in line with anything.

299
00:15:32,200 --> 00:15:37,600
It's not, it's doing its own Loop over controller data, nobody else is

300
00:15:37,600 --> 00:15:41,600
participating in that Loop, there is no shared data here with this,

301
00:15:41,600 --> 00:15:45,400
and the thing that comes after it, there's really not a lot of

302
00:15:45,400 --> 00:15:50,300
argument to be made Regarding why this has to be part of this

303
00:15:50,300 --> 00:15:50,600
function.

304
00:15:50,600 --> 00:15:52,000
It's really a separate thing.

305
00:15:52,100 --> 00:15:53,400
It could be broken out.

306
00:15:53,900 --> 00:15:57,600
But of course, what we find when we do break it out, like, let's just

307
00:15:57,600 --> 00:15:58,700
do the very straight.

308
00:16:00,000 --> 00:16:00,800
Cut and paste here.

309
00:16:00,800 --> 00:16:04,900
If I wanted to start again, taking a small step to remove that from

310
00:16:04,900 --> 00:16:09,000
the code where it was and putting it in its own separate function.

311
00:16:09,200 --> 00:16:13,700
What I will find very quickly is that it relies on something that is

312
00:16:13,700 --> 00:16:15,900
not possible to be extricated directly.

313
00:16:16,200 --> 00:16:19,900
So let's say that we do this and this is I probably should keep the

314
00:16:19,900 --> 00:16:21,800
comment as well.

315
00:16:23,700 --> 00:16:24,800
Let's bring that back up here.

316
00:16:25,600 --> 00:16:27,300
So, put that in there.

317
00:16:28,500 --> 00:16:30,500
Check for joining Players.

318
00:16:30,500 --> 00:16:33,800
Let's say seems like a reasonable name for this function because

319
00:16:33,800 --> 00:16:34,700
that's what we're doing.

320
00:16:35,000 --> 00:16:38,200
And we know in this case that we need to pass the gain input, because

321
00:16:38,200 --> 00:16:41,000
it's going to Loop over that, and you can kind of see some of the

322
00:16:41,000 --> 00:16:42,200
other things that this needs.

323
00:16:42,200 --> 00:16:45,200
It needs the game State because that's where the controlled hero

324
00:16:45,200 --> 00:16:48,300
function array lives, where it can check things out.

325
00:16:48,700 --> 00:16:52,200
And now let's try to, you know, try to put that in here, check for

326
00:16:52,200 --> 00:16:53,000
joining players.

327
00:16:58,500 --> 00:17:01,500
I'll pass that game State and the input and then we'll just see what

328
00:17:01,500 --> 00:17:01,900
we need.

329
00:17:01,900 --> 00:17:04,000
So we need camera P.

330
00:17:04,900 --> 00:17:08,500
Which is where the, you know, the hero is going to show up.

331
00:17:08,599 --> 00:17:10,000
We need the Sim region, right?

332
00:17:10,000 --> 00:17:11,300
And those are pretty easy things.

333
00:17:11,300 --> 00:17:13,800
Again to add in here, not particularly hard.

334
00:17:16,000 --> 00:17:16,900
I want that.

335
00:17:20,000 --> 00:17:21,099
I want the Sim region.

336
00:17:23,400 --> 00:17:24,400
Where did that goes?

337
00:17:24,800 --> 00:17:26,900
Region, region.

338
00:17:32,000 --> 00:17:33,900
And the world mode.

339
00:17:43,300 --> 00:17:45,400
And that's all that that function needs at the moment.

340
00:17:46,000 --> 00:17:47,400
Let me go ahead and pass those in.

341
00:17:53,100 --> 00:17:54,300
Let's see.

342
00:17:54,400 --> 00:17:56,200
I need that same region.

343
00:17:56,200 --> 00:17:57,200
I need the world node.

344
00:17:58,500 --> 00:17:59,800
Remember where we put the world mode?

345
00:18:00,700 --> 00:18:02,400
In the parameter list, it's right after games today.

346
00:18:03,300 --> 00:18:05,300
So there I've called it, right?

347
00:18:05,300 --> 00:18:10,400
And so now the question is well like I said, I don't think that wants

348
00:18:10,400 --> 00:18:12,200
to be an update and render Sim region.

349
00:18:12,300 --> 00:18:14,300
So let's go ahead and move it out.

350
00:18:14,700 --> 00:18:18,200
And what we find when we do this is the thing that I wanted to talk

351
00:18:18,200 --> 00:18:19,500
about and just sort of mention.

352
00:18:19,500 --> 00:18:22,000
So let's say, I wanted this to be moved out.

353
00:18:22,000 --> 00:18:25,200
So I put it here and I'm like, good to go, this is going to be great.

354
00:18:25,200 --> 00:18:26,200
We'll compile it.

355
00:18:26,400 --> 00:18:27,900
Okay, we have the input.

356
00:18:27,900 --> 00:18:30,900
We have the game State and then we get to these two guys right here,

357
00:18:30,900 --> 00:18:32,200
Sim region and Camera p.

358
00:18:32,200 --> 00:18:33,300
And we're like, we don't have

359
00:18:33,300 --> 00:18:33,600
Of them.

360
00:18:34,400 --> 00:18:37,900
Now there's nothing we can do to get them, because if we take a look

361
00:18:37,900 --> 00:18:43,100
at where, what's going on in here, this function that we want to call

362
00:18:43,300 --> 00:18:47,100
that we want that we didn't want to be doing this operation, it's

363
00:18:47,100 --> 00:18:50,200
actually necessary for it to have been doing what it's doing with the

364
00:18:50,200 --> 00:18:51,900
begins him, right?

365
00:18:52,300 --> 00:18:54,100
That's actually necessary.

366
00:18:54,800 --> 00:18:55,800
That's an actually

367
00:18:57,700 --> 00:18:59,300
Required aspect.

368
00:18:59,700 --> 00:19:03,400
And in order to get the camera P, the same thing is true, right?

369
00:19:03,400 --> 00:19:08,300
We need the Sim Center which this thing was Computing.

370
00:19:09,000 --> 00:19:12,100
So if we take a look at what that means, it means that we have a thing

371
00:19:12,100 --> 00:19:13,800
that's optional, right?

372
00:19:13,900 --> 00:19:16,300
We only want to call check for joining players.

373
00:19:16,300 --> 00:19:20,000
This first time, we don't want to do it this time, right?

374
00:19:20,000 --> 00:19:23,900
It's not something that's supposed to happen in all of the times that

375
00:19:23,900 --> 00:19:26,600
we are simulating regions.

376
00:19:27,500 --> 00:19:30,000
So you only want to call check for joining players, just that one

377
00:19:30,000 --> 00:19:30,500
time.

378
00:19:31,000 --> 00:19:33,800
But we find that we can't, because when we call update and render Sim

379
00:19:33,800 --> 00:19:37,200
region, it's going to do some work that's necessary for us to be able

380
00:19:37,200 --> 00:19:41,200
to finish for us to be able to actually perform this function.

381
00:19:42,000 --> 00:19:46,000
So what we need to do fundamentally is Break Up Update and render Sim

382
00:19:46,000 --> 00:19:51,100
region into multiple pieces that can be controlled in a more Dynamic

383
00:19:51,100 --> 00:19:51,700
fashion.

384
00:19:51,800 --> 00:19:52,500
Right?

385
00:19:52,500 --> 00:19:55,900
What we want to do is do something like we have here, where we do

386
00:19:55,900 --> 00:19:57,100
begin Simmons him.

387
00:19:57,500 --> 00:20:00,700
We want something more like that you want to be able to call begin Sim

388
00:20:00,900 --> 00:20:01,500
and Sim.

389
00:20:01,700 --> 00:20:04,400
And in this case we call check for joining players in the other case,

390
00:20:04,400 --> 00:20:08,200
we just call begin Sim and Sim and we never actually call a check for

391
00:20:08,200 --> 00:20:10,400
joining players in between.

392
00:20:10,600 --> 00:20:11,000
Right?

393
00:20:12,400 --> 00:20:15,100
So, that's a fundamental kind of code transformation.

394
00:20:15,100 --> 00:20:16,100
We want to be able to make.

395
00:20:16,100 --> 00:20:18,700
It's the kind of code transformation where you're basically saying, we

396
00:20:18,700 --> 00:20:23,000
have something that all has to happen in line, but some of the parts

397
00:20:23,000 --> 00:20:26,700
of it want to be optional and we don't really want them to be sort of

398
00:20:26,700 --> 00:20:27,100
welded

399
00:20:27,300 --> 00:20:30,900
And to that code because we want the person calling it to be able to

400
00:20:30,900 --> 00:20:35,200
sort of control the order of how they're happening, or have more

401
00:20:35,200 --> 00:20:37,400
control over whether they happen at all.

402
00:20:37,600 --> 00:20:41,700
And we just feel more comfortable with that being the way things work.

403
00:20:42,100 --> 00:20:46,300
And so, what we can do here is, we can sort of expand our notion of

404
00:20:46,300 --> 00:20:49,900
how that begins in and Sim work because if you look at how this

405
00:20:49,900 --> 00:20:51,700
happens, beginning the same region,

406
00:20:52,800 --> 00:20:56,800
Is really kind of a lower level operation.

407
00:20:57,300 --> 00:20:59,800
It's really not begins him that we're calling hear what we're saying.

408
00:21:00,100 --> 00:21:04,200
Open up like a piece of the world for edit, right?

409
00:21:04,400 --> 00:21:05,200
Is what that is.

410
00:21:06,000 --> 00:21:10,000
So really, we kind of the naming here is sort of what's throwing us

411
00:21:10,000 --> 00:21:10,400
off.

412
00:21:10,800 --> 00:21:12,500
It shouldn't really be called, begin Sim.

413
00:21:12,500 --> 00:21:16,200
It should be called like open world region and then we should have a

414
00:21:16,200 --> 00:21:18,800
like closed World region or something like this, right?

415
00:21:19,100 --> 00:21:23,100
And then begin Sim is a higher level thing that happens, which does

416
00:21:23,100 --> 00:21:27,100
the open, but also does a few of these other things, right?

417
00:21:27,900 --> 00:21:29,900
And then inside there we would have

418
00:21:30,000 --> 00:21:33,300
Have thing that's like a call for example simulate which we don't

419
00:21:33,300 --> 00:21:38,500
currently have and and sort of makes this all look a lot more.

420
00:21:38,500 --> 00:21:44,700
Like a sort of a reasonable control flow that we can manage.

421
00:21:45,700 --> 00:21:48,500
So here's begins eminent Sam and check for joining players right?

422
00:21:48,500 --> 00:21:50,400
I know that that's one thing I want to have happen.

423
00:21:50,900 --> 00:21:56,300
So probably if we looked at how this we wanted this to look here, we

424
00:21:56,300 --> 00:21:57,600
could do something like this.

425
00:22:02,000 --> 00:22:02,400
Right.

426
00:22:03,700 --> 00:22:09,100
And maybe, you know, they'd be an opportunity for us to actually, you

427
00:22:09,100 --> 00:22:12,500
know, do do something even more specific there.

428
00:22:12,500 --> 00:22:15,200
Like, for example, the particle system rendering, could be something

429
00:22:16,100 --> 00:22:19,800
that sort of happens, only in one place as well, you know, we could do

430
00:22:20,600 --> 00:22:25,200
something like here, we do render particle systems and then that, you

431
00:22:25,200 --> 00:22:26,800
know, things could come out as well.

432
00:22:26,900 --> 00:22:30,600
Because as you can see, from here, this stuff is all, in fact, you

433
00:22:30,600 --> 00:22:30,800
know,

434
00:22:33,400 --> 00:22:34,100
Right.

435
00:22:34,500 --> 00:22:35,700
This stuff is all kind of

436
00:22:37,000 --> 00:22:38,200
Extractable, right?

437
00:22:38,200 --> 00:22:41,600
It's something that can come out and similarly, like this debug

438
00:22:41,900 --> 00:22:46,600
information as well that we have here that can come out equivalently.

439
00:22:46,900 --> 00:22:49,200
So, you know, if we look at what this is going to look like, you know,

440
00:22:49,200 --> 00:22:52,400
this starts to look a lot more reasonable to me because now we're

441
00:22:52,400 --> 00:22:54,300
starting to kind of get this

442
00:22:57,400 --> 00:23:00,700
This function starting to look a lot more sane and you can kind of now

443
00:23:00,700 --> 00:23:02,900
see much more clearly at the higher level.

444
00:23:03,100 --> 00:23:05,500
What the difference is between these two operations.

445
00:23:05,500 --> 00:23:07,900
You know, one of them is clearly just going to simulate an area.

446
00:23:08,100 --> 00:23:09,900
One of them is going to do a bunch of other things.

447
00:23:09,900 --> 00:23:12,500
In addition to stimuli in the area, it's also going to check for the

448
00:23:12,500 --> 00:23:15,900
players that are joining and it's also going to update and render the

449
00:23:15,900 --> 00:23:17,900
particle systems, and things like this.

450
00:23:20,200 --> 00:23:23,100
So again, just talking about kind of that motion.

451
00:23:23,100 --> 00:23:25,800
Hopefully that gives some understanding of how that's going to work.

452
00:23:26,000 --> 00:23:29,000
So let's go ahead and actually Implement that code change just so you

453
00:23:29,000 --> 00:23:31,100
can kind of see what that looks like.

454
00:23:31,600 --> 00:23:37,000
So suppose that I'm going to take here and and go down to.

455
00:23:37,300 --> 00:23:40,200
I probably shouldn't quite have moved everything out yet, but, you

456
00:23:40,200 --> 00:23:41,000
know, that's okay.

457
00:23:41,100 --> 00:23:42,300
Well, we'll deal with it.

458
00:23:43,100 --> 00:23:46,300
Suppose, I go into some region here and I just, again, call this

459
00:23:47,200 --> 00:23:49,100
something a little bit different because if you,

460
00:23:49,300 --> 00:23:51,200
About this being called a Sim region.

461
00:23:51,700 --> 00:23:55,700
Again, it's not really quite what it what it really means, it's really

462
00:23:55,700 --> 00:23:59,200
more of just an open region of the world, and in some sense you could

463
00:23:59,200 --> 00:23:59,800
even think

464
00:24:00,500 --> 00:24:02,500
if we take a look at what's Happening Here,

465
00:24:03,800 --> 00:24:06,500
In some sense really, you can start to see the same region stuff and

466
00:24:06,500 --> 00:24:10,800
the world are really just probably should be welded, right?

467
00:24:11,000 --> 00:24:15,100
This is kind of a thing that we were working on that sort of how they

468
00:24:15,100 --> 00:24:16,900
sort of pair up with each other.

469
00:24:17,200 --> 00:24:20,500
And what you can see is like the simulation side of things and the

470
00:24:20,500 --> 00:24:22,900
like packing and unpacking amenities side of things.

471
00:24:26,700 --> 00:24:29,200
Is really are really two very different functions.

472
00:24:29,200 --> 00:24:29,700
Right.

473
00:24:29,700 --> 00:24:32,900
You can see in here that really all this is doing is opening up the

474
00:24:32,900 --> 00:24:33,400
region.

475
00:24:33,600 --> 00:24:38,200
It's copying out all of the entities into an editable State and then

476
00:24:38,200 --> 00:24:39,500
giving it back to you, right?

477
00:24:40,000 --> 00:24:44,300
And similarly, then we have when we close it we have all the same

478
00:24:44,300 --> 00:24:45,800
stuff that's happening here, right?

479
00:24:45,800 --> 00:24:47,100
That's exactly what's going on.

480
00:24:47,900 --> 00:24:51,100
And so really you like I said, it's not begins Eminence and that's not

481
00:24:51,100 --> 00:24:52,100
really what's happening here.

482
00:24:52,400 --> 00:24:55,600
It's really more like begin worldedit.

483
00:24:58,400 --> 00:24:59,000
and,

484
00:25:00,400 --> 00:25:04,300
And then world at it, that's what's actually happening right?

485
00:25:05,100 --> 00:25:08,500
And you know we could we could also call it changes if edits a little

486
00:25:08,500 --> 00:25:12,500
too confusing, begin World change, you know, something like that.

487
00:25:17,600 --> 00:25:20,300
And I'm not sure what the best word is for it, obviously, but it's

488
00:25:20,300 --> 00:25:21,500
something along those lines.

489
00:25:22,900 --> 00:25:26,200
So then you know, that's a pretty simple name change all we're saying

490
00:25:26,200 --> 00:25:29,600
is, you know, it's now begin World change instead of something else.

491
00:25:32,100 --> 00:25:36,200
This is n World change again, not particularly strange.

492
00:25:36,200 --> 00:25:36,900
What's Happening Here?

493
00:25:36,900 --> 00:25:43,300
World change and World change and then we're left with just the things

494
00:25:43,300 --> 00:25:45,800
that are actually World Sim.

495
00:25:47,600 --> 00:25:48,000
Right.

496
00:25:49,100 --> 00:25:49,500
Okay.

497
00:25:51,200 --> 00:25:56,100
So now we have to address what this is actually happening here.

498
00:25:56,100 --> 00:26:00,700
So you know, now we have to say, okay, we've got a thing that probably

499
00:26:00,700 --> 00:26:02,300
will return a Sim region.

500
00:26:02,300 --> 00:26:06,600
It's going to be called begins him and then we're going to have a

501
00:26:06,600 --> 00:26:09,700
thing that does and then Sim and if you look at what's actually going

502
00:26:09,700 --> 00:26:13,200
to happen, there you can see that there is a lot of additional stuff.

503
00:26:13,200 --> 00:26:14,100
Right, here we go.

504
00:26:15,400 --> 00:26:17,400
Got our begins him.

505
00:26:19,900 --> 00:26:23,100
Then we've got our actual simulation step, which is this.

506
00:26:30,800 --> 00:26:33,300
And then we've got a sort of our finishing step.

507
00:26:35,000 --> 00:26:35,600
Which is this?

508
00:26:39,800 --> 00:26:40,200
Right?

509
00:26:41,900 --> 00:26:45,400
And you know, if we take a look at what's happening here in terms of

510
00:26:45,500 --> 00:26:48,800
passing down, like the mouse p and the world and that sort of stuff,

511
00:26:49,400 --> 00:26:53,100
probably mostly deal with it like this for now.

512
00:27:02,300 --> 00:27:02,800
Again.

513
00:27:05,800 --> 00:27:09,200
And now we can start to sort of play with the consequences of that and

514
00:27:09,200 --> 00:27:12,100
just like, make sure that we've kind of gotten them under control.

515
00:27:12,800 --> 00:27:16,600
So if we take a look at what we need to pass in terms of update and

516
00:27:16,600 --> 00:27:19,000
render some region, and all that sort of stuff.

517
00:27:19,000 --> 00:27:22,500
So we can take a look at begin secure, we can take a look at this list

518
00:27:22,600 --> 00:27:26,900
and I'm just going to paste that list into all three of these and then

519
00:27:26,900 --> 00:27:28,900
start eliminating things we didn't really need.

520
00:27:29,000 --> 00:27:33,100
So now you can see that NCM itself really doesn't need very much at

521
00:27:33,100 --> 00:27:34,700
all, it really just needs that Sim.

522
00:27:34,900 --> 00:27:38,300
We're going to have to deal with that in a second and then it needs,

523
00:27:38,800 --> 00:27:40,500
you know, the Sim region and the world mode.

524
00:27:40,600 --> 00:27:42,500
So those are pretty easy things to pass it.

525
00:27:43,500 --> 00:27:44,700
So there's the same region

526
00:27:47,900 --> 00:27:50,000
And we're going to have to pass in that.

527
00:27:51,000 --> 00:27:51,500
What is it?

528
00:27:51,500 --> 00:27:52,300
Emory

529
00:27:56,000 --> 00:27:57,600
Do not remember what that's called.

530
00:27:59,600 --> 00:28:00,200
Temporary.

531
00:28:02,700 --> 00:28:05,600
So it's going to need that same memory so it can end that, right?

532
00:28:05,700 --> 00:28:09,500
And then it's going to have to do the the world change stuff.

533
00:28:09,700 --> 00:28:13,300
So we'll deal with that in a second but that's it.

534
00:28:15,600 --> 00:28:21,400
Don't really know what this is talking about per se in terms of the

535
00:28:21,400 --> 00:28:24,600
camera update, I guess that's happening inside here.

536
00:28:24,600 --> 00:28:27,400
So we should probably leave that comment so you can take a look at it.

537
00:28:27,400 --> 00:28:30,100
But here is our simulate function.

538
00:28:30,100 --> 00:28:31,400
Let's take a look at what that needs.

539
00:28:31,900 --> 00:28:35,600
So again it needs Mouse P at the moment so we'll leave all the stuff

540
00:28:35,600 --> 00:28:37,300
in there that it actually needs World mode.

541
00:28:37,300 --> 00:28:39,100
Probably needs most of the stuff, right?

542
00:28:40,100 --> 00:28:42,100
But again, it's going to need some things from up here.

543
00:28:42,400 --> 00:28:43,600
So it needs like the camera.

544
00:28:43,800 --> 00:28:45,800
For example, is something that it needs to know.

545
00:28:46,600 --> 00:28:49,400
And so let's start figuring out how to get that information.

546
00:28:50,000 --> 00:28:51,300
Sort of encapsulated

547
00:28:54,100 --> 00:28:56,400
So I know what we're going to call this, I guess we'll call this you

548
00:28:56,400 --> 00:28:57,700
know, World Sim.

549
00:29:00,200 --> 00:29:01,000
Or something like this.

550
00:29:02,200 --> 00:29:05,100
And in here we're going to sort of store the information that we

551
00:29:05,100 --> 00:29:06,600
needed to flow through.

552
00:29:06,600 --> 00:29:10,300
In fact, I guess, what I can do is I can actually make this probably

553
00:29:10,300 --> 00:29:14,300
contain these two, so it's like a convenient way to pass them through.

554
00:29:17,000 --> 00:29:18,800
Alright, so here will pass this.

555
00:29:20,800 --> 00:29:23,600
The world Sim that will have the region in it.

556
00:29:28,100 --> 00:29:31,100
And the same memory and then similarly, like over here.

557
00:29:32,800 --> 00:29:34,000
Against them would return that.

558
00:29:36,200 --> 00:29:41,700
So, we have our results and we'll just fill it up.

559
00:29:48,100 --> 00:29:48,700
And that's it.

560
00:29:50,800 --> 00:29:54,400
So when we call simulate we're going to have to probably pass in the

561
00:29:54,400 --> 00:29:58,400
same region and I guess the camera p is probably also important here.

562
00:30:06,300 --> 00:30:11,600
And all of that stuff, now can come out from from this system, right?

563
00:30:12,300 --> 00:30:15,200
And similarly, we could save anything that we wanted to save here that

564
00:30:15,200 --> 00:30:19,600
we needed to save here out of things that if we knew to DT is not

565
00:30:19,600 --> 00:30:21,200
really necessary to be passed in here.

566
00:30:21,200 --> 00:30:25,700
I would think in fact, Y in y, just begin World.

567
00:30:25,700 --> 00:30:27,100
Change require the DT.

568
00:30:27,500 --> 00:30:28,600
Does that make sense to you?

569
00:30:28,600 --> 00:30:30,100
It doesn't make a whole lot of sense to me.

570
00:30:30,700 --> 00:30:33,600
Was that something that, you know, used to happen.

571
00:30:33,600 --> 00:30:35,000
And, you know,

572
00:30:35,700 --> 00:30:36,900
Doesn't have to happen anymore.

573
00:30:36,900 --> 00:30:37,700
Is there a reason for?

574
00:30:37,700 --> 00:30:42,000
Oh, I know why, it's because it needs to know how much to widen it by.

575
00:30:42,700 --> 00:30:47,300
So, I guess it does because things that move faster would require

576
00:30:47,300 --> 00:30:47,700
bigger.

577
00:30:47,700 --> 00:30:48,800
Symbols potentially.

578
00:30:49,800 --> 00:30:50,300
All right?

579
00:30:50,700 --> 00:30:54,300
So render group in the draw buffer and game input.

580
00:30:54,300 --> 00:30:56,000
Probably don't need to be passed here, right?

581
00:30:56,000 --> 00:30:58,400
So, none of this stuff has to be passed.

582
00:30:58,400 --> 00:31:00,400
The background color doesn't have to be passed.

583
00:31:02,300 --> 00:31:03,900
So, I think it's only the screen bounds.

584
00:31:03,900 --> 00:31:05,400
Potentially she even the

585
00:31:05,600 --> 00:31:06,100
Oz, I don't know.

586
00:31:06,100 --> 00:31:07,000
Need to be passed.

587
00:31:13,000 --> 00:31:16,000
So just a lot of things don't have to be passed here, right?

588
00:31:16,000 --> 00:31:21,000
It's really just these and so begins in becomes a much sort of simpler

589
00:31:21,000 --> 00:31:23,100
and more understandable thing at this point, which is nice.

590
00:31:24,300 --> 00:31:26,000
And then we can just return this out.

591
00:31:27,700 --> 00:31:29,800
And we can require that it be passed back in.

592
00:31:33,300 --> 00:31:37,700
Now, if I look at the trance State here, the assets is really the only

593
00:31:37,700 --> 00:31:39,200
thing that needs to get passed through.

594
00:31:40,000 --> 00:31:43,900
So I might just say that that's something that gets passed here.

595
00:31:48,600 --> 00:31:51,500
Because again, that would not really need to be passed in

596
00:31:51,600 --> 00:31:54,800
circumstances where you weren't rendering and so that could become a

597
00:31:54,800 --> 00:31:55,900
portent important leader.

598
00:31:58,400 --> 00:32:00,900
All right, all right.

599
00:32:01,900 --> 00:32:03,800
So we want to pull out the SIM region.

600
00:32:07,000 --> 00:32:07,900
Because we need that.

601
00:32:10,900 --> 00:32:12,300
We want to pull out the camera pee.

602
00:32:17,000 --> 00:32:19,000
And that's about it, okay?

603
00:32:22,300 --> 00:32:22,900
Alright.

604
00:32:23,300 --> 00:32:24,400
Now, what else do we need here?

605
00:32:24,400 --> 00:32:25,900
Is there anything that we don't need?

606
00:32:25,900 --> 00:32:26,500
I don't know that.

607
00:32:26,500 --> 00:32:28,000
The screen bounds is necessary.

608
00:32:29,700 --> 00:32:31,100
It's being bounced is not necessary.

609
00:32:33,900 --> 00:32:35,200
How about the game state?

610
00:32:36,500 --> 00:32:38,300
Game say is necessary for brain execution.

611
00:32:38,400 --> 00:32:39,600
We can probably get rid of that eventually.

612
00:32:39,600 --> 00:32:44,000
I think we probably will background color is necessary Sinbad's MDT

613
00:32:46,200 --> 00:32:50,500
symbols not necessary because sorority capsulated in the same region

614
00:32:50,600 --> 00:32:51,100
itself.

615
00:32:52,000 --> 00:32:54,900
So I think that's it, the role Tim the world, note the DT,

616
00:32:55,200 --> 00:32:56,000
everything's good.

617
00:32:58,500 --> 00:32:59,900
That's about it for

618
00:33:00,000 --> 00:33:00,300
That.

619
00:33:00,300 --> 00:33:03,000
So now let's actually go ahead and call these.

620
00:33:03,600 --> 00:33:08,400
So inside our update and render world, we now have this sort of world

621
00:33:08,400 --> 00:33:09,400
Sim that were calling

622
00:33:14,400 --> 00:33:16,900
and we're just going to go ahead and pass what it wants.

623
00:33:23,200 --> 00:33:26,100
All right, so nothing particularly unusual there.

624
00:33:26,100 --> 00:33:29,500
We're just passing what we're supposed to pass and

625
00:33:32,400 --> 00:33:34,600
Then we're going to do is call check for joining players, which we

626
00:33:34,600 --> 00:33:37,200
know we can do now because we've got our world.

627
00:33:37,200 --> 00:33:40,400
So we can sort of pass through the information that we need to pass

628
00:33:40,400 --> 00:33:40,800
through.

629
00:33:41,500 --> 00:33:43,000
We can then call simulate.

630
00:33:48,900 --> 00:33:53,000
Yeah, and we just need to know what that's going to take four

631
00:33:53,000 --> 00:33:54,000
parameters, right?

632
00:33:54,900 --> 00:33:56,400
So, here's simulate.

633
00:33:57,900 --> 00:34:00,800
It's going to take the world sin, it's going to take a world mode.

634
00:34:01,100 --> 00:34:02,200
It's going to take the duty.

635
00:34:05,100 --> 00:34:07,800
It's going to take all the rest of the stuff, the background color

636
00:34:08,199 --> 00:34:14,100
game, State assets input render group, the drop offer.

637
00:34:18,400 --> 00:34:20,100
And you got to spell game state, right?

638
00:34:20,100 --> 00:34:20,500
Not good.

639
00:34:20,500 --> 00:34:21,199
If you don't.

640
00:34:21,800 --> 00:34:23,199
So, here's the DT.

641
00:34:24,500 --> 00:34:28,600
And let's go ahead and correct that out.

642
00:34:30,199 --> 00:34:31,000
Frame to frame.

643
00:34:31,000 --> 00:34:32,500
Camera, Delta P.

644
00:34:34,100 --> 00:34:34,800
I'll be honest with you.

645
00:34:34,800 --> 00:34:36,699
I don't remember where that's computed.

646
00:34:37,300 --> 00:34:38,900
Let's take a look and see.

647
00:34:40,199 --> 00:34:44,100
So here we are, and

648
00:34:47,600 --> 00:34:50,000
Frame-to-frame, Delta camera p is produced up here.

649
00:34:50,699 --> 00:34:53,100
It looks like excuse me for a second.

650
00:34:53,100 --> 00:34:53,900
I want to put on my

651
00:34:55,400 --> 00:34:58,200
my hoodie here.

652
00:34:59,400 --> 00:34:59,900
There we go.

653
00:35:00,500 --> 00:35:01,700
Just getting a little cold.

654
00:35:12,400 --> 00:35:12,700
Okay.

655
00:35:18,000 --> 00:35:21,200
So yeah, what I was saying is I don't remember that was computed.

656
00:35:21,200 --> 00:35:22,400
Well, it's computer right here.

657
00:35:22,700 --> 00:35:26,000
And here's the subtraction frame to frame camera.

658
00:35:26,000 --> 00:35:26,700
Delta p.

659
00:35:29,000 --> 00:35:31,200
Is only used for particle systems, I believe.

660
00:35:32,000 --> 00:35:35,500
Yeah, so the frame to frame

661
00:35:37,500 --> 00:35:42,100
Camera, Delta p is something that probably should be moved because it

662
00:35:42,100 --> 00:35:46,100
really isn't necessary until we actually run the particle systems

663
00:35:46,600 --> 00:35:48,200
themselves, right?

664
00:35:49,100 --> 00:35:52,100
So I feel like that should probably be something that's just done here

665
00:35:52,700 --> 00:35:56,600
because it's really not necessary for anything else, right?

666
00:36:10,300 --> 00:36:10,900
All right.

667
00:36:18,900 --> 00:36:20,300
so, I think

668
00:36:24,300 --> 00:36:28,300
yeah, so I think we're now down to sort of a much

669
00:36:30,900 --> 00:36:34,500
Sort of a much more, much more simpler, sort of structure of this

670
00:36:34,500 --> 00:36:35,300
code, which is good.

671
00:36:35,400 --> 00:36:36,100
We're getting better.

672
00:36:37,200 --> 00:36:40,500
And you can see the, this allowed me to pull out a bunch of code into

673
00:36:40,500 --> 00:36:43,100
the upper level that used to be kind of sunk down in there.

674
00:36:43,600 --> 00:36:49,100
So now if you take a look at this, almost as like of code injection,

675
00:36:49,100 --> 00:36:52,400
almost you can kind of see that between the beginning and the end, we

676
00:36:52,400 --> 00:36:55,800
can now do a bunch of these things that only happen in the main

677
00:36:55,900 --> 00:36:57,400
visible update.

678
00:36:57,700 --> 00:37:00,600
And now none of those things the

679
00:37:00,700 --> 00:37:05,100
Systems the debug rendering the checking for joining players.

680
00:37:05,300 --> 00:37:08,900
None of those are welded into the update anymore which means that.

681
00:37:08,900 --> 00:37:14,300
Now if we want to do a second update down here, right?

682
00:37:17,500 --> 00:37:17,800
Oops.

683
00:37:19,800 --> 00:37:22,500
If we want to do a second update on here, we don't really have to

684
00:37:22,500 --> 00:37:23,100
worry.

685
00:37:28,200 --> 00:37:30,900
About all of those other aspects, right?

686
00:37:31,500 --> 00:37:33,600
So we can come in here and just call simulate.

687
00:37:36,100 --> 00:37:36,800
and I,

688
00:37:41,300 --> 00:37:42,600
Just got past these things in.

689
00:37:46,400 --> 00:37:47,200
Same as we're doing.

690
00:37:52,700 --> 00:37:54,300
So I think we should still be getting now.

691
00:37:54,300 --> 00:37:56,300
Exactly the same results right?

692
00:37:56,300 --> 00:37:57,300
Nothing has changed.

693
00:38:02,300 --> 00:38:05,200
Exactly, like we wanted and if we would like to have these things

694
00:38:05,200 --> 00:38:08,600
draw, well I guess I don't have to do it that way.

695
00:38:09,500 --> 00:38:10,200
We still can

696
00:38:26,400 --> 00:38:31,800
So that's really nice and like I'm feeling better about how that sort

697
00:38:31,800 --> 00:38:32,800
of starting to pull out.

698
00:38:32,800 --> 00:38:36,600
Now what we want to look at here again, like I said is we just kind of

699
00:38:36,600 --> 00:38:41,100
want to take a little bit closer, look at the stuff that we're doing

700
00:38:41,100 --> 00:38:44,400
in here and now asking again our there's other things that we could do

701
00:38:44,400 --> 00:38:49,900
here, is there other stuff that we should be being a little bit more?

702
00:38:49,900 --> 00:38:51,300
Careful about pulling out.

703
00:38:52,900 --> 00:38:53,500
So the

704
00:38:53,500 --> 00:38:57,100
first thing that I point out is if we take a look at Mouse P, right?

705
00:38:57,200 --> 00:38:58,700
Interrupt update and render entities.

706
00:38:59,400 --> 00:38:59,800
So,

707
00:39:00,500 --> 00:39:04,300
Mouse key is really only used for debug picking at stuff like this.

708
00:39:06,300 --> 00:39:07,400
We could use some more water.

709
00:39:10,700 --> 00:39:13,400
So, if we take a look at what happens with something like that, it's

710
00:39:13,400 --> 00:39:16,900
only there for debugging purposes and things that are only there for

711
00:39:16,900 --> 00:39:18,000
debug purposes.

712
00:39:18,100 --> 00:39:21,200
Often times, make a lot less sense to, like, structure code around.

713
00:39:21,500 --> 00:39:24,300
So, the fact that you have to pass in, put something like this right

714
00:39:24,300 --> 00:39:27,000
now for Mouse, be doesn't make very much sense.

715
00:39:27,100 --> 00:39:29,900
So the really the only thing that we should be looking at.

716
00:39:29,900 --> 00:39:33,700
I think in terms of why input is getting past this at all, is in the

717
00:39:33,700 --> 00:39:35,600
execute brain side of things.

718
00:39:36,300 --> 00:39:40,000
So, if you take a look at execute brain here, you can actually see

719
00:39:40,200 --> 00:39:41,700
Why we need input?

720
00:39:42,000 --> 00:39:46,000
The reason is because input is currently getting used in execute brain

721
00:39:46,800 --> 00:39:50,600
for controlling the hero right for controlling any player controlled

722
00:39:50,600 --> 00:39:51,200
character.

723
00:39:54,400 --> 00:40:00,300
So, I'm not 100% certain that we really want that as our model for a

724
00:40:00,300 --> 00:40:04,400
how controller input gets pushed down, right?

725
00:40:05,100 --> 00:40:10,400
We may want something that's going to allow us to do a little bit

726
00:40:10,400 --> 00:40:15,800
more, a little bit more thoughtful, kind of an operation on this,

727
00:40:16,100 --> 00:40:20,900
where the brains pick up their data from someplace that isn't directly

728
00:40:20,900 --> 00:40:21,700
the input.

729
00:40:22,300 --> 00:40:25,500
That's probably going to be a better thing in the long run especially

730
00:40:25,500 --> 00:40:29,900
so that we don't have input code kind of baked down in here in such a

731
00:40:29,900 --> 00:40:30,600
specific way.

732
00:40:30,600 --> 00:40:31,400
Now, I don't know that.

733
00:40:31,400 --> 00:40:31,900
That's true.

734
00:40:32,800 --> 00:40:35,400
It's just a hunch but you can kind of see that.

735
00:40:35,400 --> 00:40:36,900
That's why input is flowing through here.

736
00:40:36,900 --> 00:40:37,400
Right?

737
00:40:37,900 --> 00:40:42,200
Ignore this because this is just debug information and we could choose

738
00:40:42,200 --> 00:40:45,600
to get that to funnel that through in a number of different ways.

739
00:40:48,100 --> 00:40:49,200
In fact, what?

740
00:40:49,600 --> 00:40:51,100
So I'm actually kind of curious about that.

741
00:40:51,100 --> 00:40:52,000
I want to take a look at that.

742
00:40:53,200 --> 00:40:55,000
So, in update and render entities.

743
00:40:58,200 --> 00:40:59,500
What are we doing with the mouse be here.

744
00:40:59,500 --> 00:41:00,200
Exactly.

745
00:41:00,900 --> 00:41:01,600
So we do a nun.

746
00:41:01,600 --> 00:41:07,200
Projective the mouse be just in this one place that correct.

747
00:41:09,400 --> 00:41:09,700
Yeah.

748
00:41:12,000 --> 00:41:13,000
So, all we're doing right.

749
00:41:13,000 --> 00:41:15,700
There is using it for hit testing and envy, right?

750
00:41:17,000 --> 00:41:18,000
That's what that's for.

751
00:41:18,400 --> 00:41:21,700
So again, that's also something that we might be able to for like the

752
00:41:21,700 --> 00:41:22,500
debug you.

753
00:41:22,500 --> 00:41:25,800
I enabled stuff that might be something that makes a little more sense

754
00:41:25,800 --> 00:41:27,700
to kind of pull out separately.

755
00:41:28,700 --> 00:41:32,500
Because again, with something like where we're concerned about the

756
00:41:32,500 --> 00:41:35,800
performance, like I was saying the reason not to Loop over these

757
00:41:35,800 --> 00:41:40,000
entities again for performance reasons, make some sense and we may not

758
00:41:40,000 --> 00:41:41,300
want to separate.

759
00:41:41,400 --> 00:41:42,200
Update and render.

760
00:41:42,300 --> 00:41:45,600
But for debug code, we know that debug code isn't even going to be

761
00:41:45,600 --> 00:41:46,700
shipping in the game, right?

762
00:41:46,700 --> 00:41:47,900
It's going to be disabled.

763
00:41:48,500 --> 00:41:52,100
So, for that, it does seem like a pretty reasonable thing to say,

764
00:41:52,100 --> 00:41:55,700
okay, well, what if we just introduced a new function up here which is

765
00:41:55,700 --> 00:41:59,800
like debug, you know, debug entity.

766
00:42:01,900 --> 00:42:03,400
He's something like that.

767
00:42:03,700 --> 00:42:07,500
What if we just introduced a new function up here for that and said,

768
00:42:07,500 --> 00:42:10,400
okay you know, let's let's Loop through these entities just like we

769
00:42:10,400 --> 00:42:11,400
were doing before.

770
00:42:14,600 --> 00:42:18,400
But now when we're doing this, hit testing, you know, maybe we can

771
00:42:18,400 --> 00:42:19,200
pull that out.

772
00:42:20,300 --> 00:42:23,800
Although actually now to think about to, you know, do we can we just

773
00:42:23,800 --> 00:42:24,400
make this

774
00:42:27,200 --> 00:42:27,400
Well.

775
00:42:30,000 --> 00:42:33,600
I'm not sure yet we may want there to be debug information that kind

776
00:42:33,600 --> 00:42:37,500
of gets output during this is the only thing.

777
00:42:37,500 --> 00:42:43,400
Like, you know, this I would say, let's pull this out completely but I

778
00:42:43,400 --> 00:42:47,900
just don't know whether I think we want to sort of output debug

779
00:42:47,900 --> 00:42:52,200
information about this entity directly during its out during this

780
00:42:52,200 --> 00:42:52,700
phase.

781
00:42:55,600 --> 00:42:56,700
That's a tough call.

782
00:42:59,800 --> 00:43:00,900
That's a tough call.

783
00:43:01,400 --> 00:43:03,200
I'm not sure how I feel about that.

784
00:43:06,200 --> 00:43:08,000
I'm not sure how I feel about that.

785
00:43:10,900 --> 00:43:13,800
Because in some sense, what we could do here is just say that the

786
00:43:13,800 --> 00:43:18,100
debug kit stuff and the like unprojected, whatever this could just be

787
00:43:18,100 --> 00:43:22,900
some kind of function like debug mouse that the debug Mouse position

788
00:43:22,900 --> 00:43:26,700
comes back and you don't have to pass it down, right?

789
00:43:26,700 --> 00:43:32,000
It could be totally a separate debug situation, so I don't really know

790
00:43:32,000 --> 00:43:33,100
how I feel about that.

791
00:43:35,800 --> 00:43:42,500
I think I think because our debug system is only so-so like we don't

792
00:43:42,700 --> 00:43:44,500
have a ton of debug system in there.

793
00:43:44,500 --> 00:43:46,500
Maybe, let's go ahead and pull it out for now.

794
00:43:46,800 --> 00:43:51,700
So, let's say that we pull out this one part right here and we say

795
00:43:51,700 --> 00:43:54,600
that that's going to be something that we call externally.

796
00:43:54,600 --> 00:43:55,200
Like, so,

797
00:43:56,800 --> 00:43:57,600
and then,

798
00:44:02,700 --> 00:44:04,300
Depending on which one of them, we pick?

799
00:44:13,500 --> 00:44:14,800
let's see, I guess that's

800
00:44:17,900 --> 00:44:18,700
actually right here.

801
00:44:25,900 --> 00:44:28,100
Do you like nine able to book requested?

802
00:44:28,100 --> 00:44:28,900
There we go.

803
00:44:29,800 --> 00:44:31,500
And yeah.

804
00:44:40,400 --> 00:44:44,000
Just have one more thing to make here.

805
00:44:44,200 --> 00:44:45,800
Debug begin data block.

806
00:44:50,700 --> 00:44:55,400
I'm curious to know, I guess we don't have to specify that we're

807
00:44:55,400 --> 00:44:58,500
ending a data block, I guess the only thing that has to happen there,

808
00:45:00,100 --> 00:45:00,400
Is.

809
00:45:04,100 --> 00:45:05,400
It's just a regular end block.

810
00:45:07,500 --> 00:45:08,000
Right.

811
00:45:09,500 --> 00:45:11,500
Which is this guy right here, I believe.

812
00:45:24,000 --> 00:45:26,000
So there's our begin block for energy physics.

813
00:45:27,300 --> 00:45:28,400
And there's our end block.

814
00:45:33,400 --> 00:45:35,700
There are no other things in here.

815
00:45:35,700 --> 00:45:39,400
So yeah, I think it's just this guy now, I'm not sure why that end

816
00:45:39,400 --> 00:45:44,300
block was there wouldn't that end block have to be after each one?

817
00:45:44,800 --> 00:45:45,500
Seems kind of broke.

818
00:45:45,500 --> 00:45:46,200
It doesn't it?

819
00:45:46,800 --> 00:45:51,200
Like, I feel like the end block should correspond with this.

820
00:45:52,100 --> 00:45:54,400
Then again, the debug requested part.

821
00:45:56,200 --> 00:46:00,100
I'm not sure was this a spurious end block like, how did that get in

822
00:46:00,100 --> 00:46:00,500
there?

823
00:46:01,900 --> 00:46:03,700
There's the begin block, there's the begin block.

824
00:46:03,700 --> 00:46:06,000
There's only two right?

825
00:46:07,400 --> 00:46:10,600
And similarly, there's only two end blocks.

826
00:46:15,700 --> 00:46:18,700
So I guess this doesn't really require an in book.

827
00:46:21,300 --> 00:46:23,900
I'm a little stumped by that I have to admit.

828
00:46:28,700 --> 00:46:31,700
Oh, hi, I'm real smart.

829
00:46:31,800 --> 00:46:32,400
It's right there.

830
00:46:36,300 --> 00:46:39,100
Okay, so this would have to take the same region.

831
00:46:43,300 --> 00:46:45,400
Deadly debug ID, only needs to be created.

832
00:46:45,400 --> 00:46:49,300
Once now that we merge those two code paths, we do need to have the

833
00:46:49,300 --> 00:46:51,200
render group and the mouse P passed in.

834
00:47:00,100 --> 00:47:05,900
and then the entity transform, I guess this is where we decided to put

835
00:47:05,900 --> 00:47:06,700
this entity

836
00:47:10,300 --> 00:47:13,900
So this is a pretty good example, I guess of why.

837
00:47:13,900 --> 00:47:17,000
This would be tougher to put out here, right?

838
00:47:17,000 --> 00:47:19,800
In terms of knowing where this entity is.

839
00:47:20,000 --> 00:47:26,000
Because if we take a look at what has to happen for that to occur, you

840
00:47:26,000 --> 00:47:27,900
can see that like we've got this sort of

841
00:47:30,200 --> 00:47:34,800
You know, relatively complicated piece of code that has to go on in

842
00:47:34,800 --> 00:47:36,900
order for the end of the transform to be.

843
00:47:38,700 --> 00:47:40,000
You know, set up properly.

844
00:47:40,500 --> 00:47:42,200
You can see that it needs like the camera.

845
00:47:42,200 --> 00:47:43,800
I'll ground Z and all that sort of stuff.

846
00:47:46,000 --> 00:47:51,400
So I do, it's tough to say, we can keep it welded in there, but in the

847
00:47:51,400 --> 00:47:56,500
three in in once we have sort of the three dienes of this work of this

848
00:47:57,400 --> 00:47:59,800
working a little bit better, that's not going to

849
00:48:00,000 --> 00:48:01,000
So hard to do.

850
00:48:01,300 --> 00:48:04,100
So it's kind of six of one half dozen of the other, right?

851
00:48:06,400 --> 00:48:09,800
So, what I will say here is like yeah, I don't know about this that

852
00:48:09,800 --> 00:48:12,200
that does suggest just looking what happens that pulls out.

853
00:48:12,200 --> 00:48:13,600
Everything else is very simple.

854
00:48:13,800 --> 00:48:15,600
This is a little bit more complicated.

855
00:48:15,600 --> 00:48:19,200
We could pretty trivially reproduce it just by having their be a call

856
00:48:19,200 --> 00:48:24,400
here, but that gives me a relatively good argument for why I would

857
00:48:24,400 --> 00:48:28,100
want to keep this welded in is just because if that does become

858
00:48:28,100 --> 00:48:30,700
complicated I don't want to have to do it.

859
00:48:31,900 --> 00:48:33,100
Oftentimes right?

860
00:48:34,100 --> 00:48:35,300
So let's see.

861
00:48:35,500 --> 00:48:38,300
or if we can just kind of

862
00:48:41,900 --> 00:48:43,900
Make this a single entity pick.

863
00:48:51,800 --> 00:48:56,000
And when we call through here, maybe we just pass the entity

864
00:48:56,000 --> 00:48:56,700
transform.

865
00:49:07,300 --> 00:49:07,600
Oops.

866
00:49:17,200 --> 00:49:17,700
Okay.

867
00:49:24,200 --> 00:49:25,000
Of that.

868
00:49:26,300 --> 00:49:27,000
And then we're good.

869
00:49:28,200 --> 00:49:28,600
So yeah.

870
00:49:28,600 --> 00:49:30,000
So you can see debug pick entity.

871
00:49:30,000 --> 00:49:36,000
Now isn't something that will just pick a single entity and that seems

872
00:49:36,000 --> 00:49:37,200
a little bit more tenable to me.

873
00:49:37,400 --> 00:49:40,400
So if we come through here and we're look to say, okay, we're doing

874
00:49:40,400 --> 00:49:45,300
the render group, so assuming that we actually see this entity we're

875
00:49:45,300 --> 00:49:45,700
processing.

876
00:49:45,700 --> 00:49:49,500
It will call debug Kennedy on it so that it can be picked.

877
00:49:49,800 --> 00:49:51,300
And let's go ahead and

878
00:49:54,800 --> 00:49:55,900
Pass the right parameters to it.

879
00:49:55,900 --> 00:50:00,200
We need the Sim region, The Entity render group, and then transform.

880
00:50:03,300 --> 00:50:13,100
Okay, so I think everything we need there is in good shape but we

881
00:50:13,100 --> 00:50:14,500
still have this question of mouse P.

882
00:50:14,500 --> 00:50:16,000
Like I said I kind of want to get rid of that.

883
00:50:16,000 --> 00:50:18,600
I don't think I want that to be hanging around.

884
00:50:19,000 --> 00:50:22,600
So what I'm thinking is in general inside our debug interface, you

885
00:50:22,600 --> 00:50:28,600
know we have sort of this ability to get information back from the

886
00:50:28,600 --> 00:50:33,000
system and in fact we see this in a number

887
00:50:33,100 --> 00:50:34,100
Of ways, right?

888
00:50:34,800 --> 00:50:40,400
You can see here, we look at Global debug table edit event, so it'd be

889
00:50:40,400 --> 00:50:45,500
pretty trivial for us to use the global debug table to record this.

890
00:50:45,700 --> 00:50:46,800
This piece of information.

891
00:50:48,500 --> 00:50:50,200
So let me take a look at that.

892
00:50:57,300 --> 00:50:59,800
Here's the event that's being edited.

893
00:51:00,200 --> 00:51:01,600
We could pretty trivial in here.

894
00:51:01,600 --> 00:51:05,300
Say, here's the mouse be right.

895
00:51:05,700 --> 00:51:09,600
Could just put that in there, and so if we wanted to do that, then

896
00:51:09,600 --> 00:51:13,100
it's a pretty straightforward process of just saying.

897
00:51:13,100 --> 00:51:16,100
Well, anyone who wants to know what, the debug mouse key is now can

898
00:51:16,100 --> 00:51:18,000
just get that from the debug system itself.

899
00:51:19,200 --> 00:51:21,800
So, in here, when you say, you know, I want

900
00:51:24,200 --> 00:51:28,100
Debug Mouse P, right?

901
00:51:28,900 --> 00:51:31,800
And you say I want, I want that piece of information, then you can

902
00:51:31,800 --> 00:51:37,400
just say like, okay that's just going to be equal to whatever the

903
00:51:39,200 --> 00:51:39,500
Here.

904
00:51:43,700 --> 00:51:46,900
whatever the global debug table says the mouse be is

905
00:51:50,000 --> 00:51:50,900
something like that.

906
00:51:59,500 --> 00:52:00,400
And equivalent.

907
00:52:04,000 --> 00:52:06,200
So that seems pretty reasonable to me.

908
00:52:07,200 --> 00:52:10,900
That doesn't seem like it would be causing anyone any particular harm

909
00:52:10,900 --> 00:52:12,600
or trouble and we can.

910
00:52:12,600 --> 00:52:16,100
Again also make those not do anything when there is no.

911
00:52:21,200 --> 00:52:23,000
When there's no debug information happening.

912
00:52:23,800 --> 00:52:27,700
So now we can keep those debug things into Global variables.

913
00:52:28,000 --> 00:52:31,600
Again, the reason that I like that is just because I don't want the

914
00:52:31,600 --> 00:52:36,500
debug system and its additional needs impacting, how the code is

915
00:52:36,500 --> 00:52:41,400
architected given that the debug system itself gets compiled out when

916
00:52:41,400 --> 00:52:42,100
things are shipped.

917
00:52:42,100 --> 00:52:46,900
So I want to keep those separate and not creating that problem.

918
00:52:47,200 --> 00:52:50,300
So if we take a look at what we would need to do support this, now we

919
00:52:50,300 --> 00:52:50,700
can say

920
00:52:51,000 --> 00:52:55,300
Okay, we can generate this mouse p and we can set that up.

921
00:53:00,400 --> 00:53:04,000
And then anyone who wants to get it can just get it by asking the

922
00:53:04,000 --> 00:53:05,700
debug system, right?

923
00:53:06,000 --> 00:53:08,200
And that's the thing I could set, like, way up here at the beginning

924
00:53:08,200 --> 00:53:09,200
to, if I wanted to

925
00:53:28,400 --> 00:53:29,000
All right.

926
00:53:29,600 --> 00:53:32,700
So now we're out of the business of having to have this mouthpiece

927
00:53:33,000 --> 00:53:34,900
even exist at all which is good thing.

928
00:53:34,900 --> 00:53:38,500
Again that's just a positive code change because it really had nothing

929
00:53:38,500 --> 00:53:41,100
to do with the actual code that was happening, was strictly there as

930
00:53:41,100 --> 00:53:44,200
an artifact of the debug system, which I didn't want.

931
00:53:45,300 --> 00:53:50,300
So that's all good now to however, I think that code that code was.

932
00:53:51,000 --> 00:53:52,900
I don't even know if he kept up-to-date looks like we did.

933
00:53:52,900 --> 00:53:54,400
Because you can see it's still working now.

934
00:53:55,000 --> 00:53:59,800
So I guess we did keep it up to date and I guess it was in.

935
00:54:00,000 --> 00:54:00,600
In right.

936
00:54:00,700 --> 00:54:01,100
See.

937
00:54:01,700 --> 00:54:04,700
So I guess that code all still works and we can inspect entities

938
00:54:04,700 --> 00:54:06,300
properly, so that's good news.

939
00:54:07,700 --> 00:54:12,500
There's our hero look at him go, so that's all good.

940
00:54:13,800 --> 00:54:18,400
All right, so I think that's it for, for the first wave here of stuff

941
00:54:18,400 --> 00:54:19,200
that I want to do.

942
00:54:20,100 --> 00:54:22,400
And again, like that's getting a little bit cleaner, so that's good.

943
00:54:22,500 --> 00:54:28,400
I'm going to go ahead and go to the Q&A and then we'll do a second one

944
00:54:28,400 --> 00:54:29,800
hour session after the Q&A.

945
00:54:30,000 --> 00:54:30,100
Ray.

946
00:54:33,500 --> 00:54:35,600
Just in case, anyone has any questions about what we did?

947
00:55:04,200 --> 00:55:04,900
Seth Gartner.

948
00:55:04,900 --> 00:55:08,200
Can you try compiling with debug off?

949
00:55:10,800 --> 00:55:12,000
Yes.

950
00:55:12,100 --> 00:55:17,100
You mean just if we want to clean up our like things that may cause

951
00:55:17,100 --> 00:55:19,500
make call this thing?

952
00:55:23,500 --> 00:55:26,500
I mean, I suppose one thing we should do potentially is

953
00:55:28,300 --> 00:55:30,700
if we want to be able to compile with debug off,

954
00:55:32,900 --> 00:55:39,000
right now, we will need to have debug pick entity be be blocked out

955
00:55:39,000 --> 00:55:39,600
entirely.

956
00:55:39,600 --> 00:55:40,300
Where did that go?

957
00:55:41,900 --> 00:55:43,400
so, for example,

958
00:55:47,400 --> 00:55:54,300
It is this code right here doesn't like none of this wants to compiled

959
00:55:54,300 --> 00:55:54,700
in.

960
00:55:55,000 --> 00:55:57,200
Write all of that wants to compiled out.

961
00:55:58,200 --> 00:56:00,300
So we would want to do something like

962
00:56:21,300 --> 00:56:21,700
right.

963
00:56:23,400 --> 00:56:25,800
Other than that, I don't know that there's much that we'd have to do.

964
00:56:26,100 --> 00:56:28,900
So if we want to compile a debug off, its that

965
00:56:44,200 --> 00:56:45,200
Looks like that's it.

966
00:56:47,500 --> 00:56:49,100
So this has no debug at it.

967
00:56:52,400 --> 00:56:57,800
I also don't really remember I'll be honest if we've used this much at

968
00:56:57,800 --> 00:56:58,100
all.

969
00:57:06,900 --> 00:57:09,300
It looks like it's mostly just used for that one.

970
00:57:10,700 --> 00:57:13,400
Debug validation past there.

971
00:57:22,300 --> 00:57:23,300
And the assertions.

972
00:57:41,100 --> 00:57:42,500
See time stats.

973
00:57:42,500 --> 00:57:45,400
I know it's Irrelevant for the code.

974
00:57:46,400 --> 00:57:48,700
Sure you're talking about.

975
00:58:18,900 --> 00:58:21,000
So I guess I don't ever remember this.

976
00:58:21,200 --> 00:58:24,800
I think I call them .c time on my machine and I must call them

977
00:58:24,800 --> 00:58:26,800
different things on this machine ctm.

978
00:58:26,800 --> 00:58:28,300
Okay, ctm, great.

979
00:58:28,400 --> 00:58:28,700
Nice work.

980
00:58:28,700 --> 00:58:32,500
Casey, and made here at nctm.

981
00:58:32,900 --> 00:58:36,400
Here are the stats at the moment.

982
00:59:21,100 --> 00:59:23,700
Do we have any cues in days?

983
00:59:24,200 --> 00:59:25,000
Not really.

984
00:59:25,900 --> 00:59:27,600
So I guess we can just start

985
00:59:48,900 --> 00:59:55,700
Kiss cam says, what does the dot-dot-dot do in the Define and someone

986
00:59:55,700 --> 00:59:59,500
else asked about documentation in the code?

987
00:59:59,600 --> 00:59:59,800
So,

988
01:00:00,000 --> 01:00:01,100
Can answer both of those.

989
01:00:03,200 --> 01:00:03,800
so,

990
01:00:06,800 --> 01:00:09,700
The dot that in the defying, even if you are an experienced C

991
01:00:09,700 --> 01:00:17,600
programmer, may be surprised you slightly because it is actually new.

992
01:00:19,500 --> 01:00:20,800
So originally

993
01:00:22,900 --> 01:00:25,900
And I guess I use the term originally a little bit Loosely here.

994
01:00:26,900 --> 01:00:30,600
But originally right, we have the concept of functions I guess I'll

995
01:00:30,600 --> 01:00:32,100
just do like Foo.

996
01:00:34,000 --> 01:00:34,500
Right.

997
01:00:35,000 --> 01:00:37,400
Originally, we had the concept that we you know we've got these

998
01:00:37,400 --> 01:00:39,600
functions and we specify the parameters of the function.

999
01:00:39,600 --> 01:00:43,300
So inside the parentheses, we put a list of all the things that we're

1000
01:00:43,300 --> 01:00:45,800
going to pass and we all know this, it's in every programming

1001
01:00:45,800 --> 01:00:46,200
language.

1002
01:00:46,200 --> 01:00:52,900
It's fine C++, I'm sorry cos C had a need sometimes for passing

1003
01:00:55,200 --> 01:00:58,900
functions parameters where you didn't know how many were going to be

1004
01:00:58,900 --> 01:00:59,300
passed.

1005
01:00:59,300 --> 01:01:02,800
And so typically, what would happen is they introduce this notation

1006
01:01:03,400 --> 01:01:04,300
Dot dot dot.

1007
01:01:04,600 --> 01:01:07,800
Where you could have more parameters to functions and we actually used

1008
01:01:07,800 --> 01:01:08,200
this.

1009
01:01:09,200 --> 01:01:12,600
So, you know, so just to give a concrete example.

1010
01:01:23,700 --> 01:01:26,500
If I was to compile this, this compiles, just fine.

1011
01:01:27,100 --> 01:01:30,200
However, if I, you know, is to write that it would say it doesn't

1012
01:01:30,200 --> 01:01:31,200
work, right?

1013
01:01:32,100 --> 01:01:34,700
But if I said well, you can accept as many arguments as you want.

1014
01:01:34,700 --> 01:01:38,100
Now I can pass however many things I want to it and it will work,

1015
01:01:38,400 --> 01:01:39,000
right?

1016
01:01:39,700 --> 01:01:46,800
So the dot-dot-dot in C4 for, you know, decades has always meant just

1017
01:01:46,800 --> 01:01:50,600
this function can can support as many arguments as the color wishes to

1018
01:01:51,000 --> 01:01:51,500
pass it.

1019
01:01:51,500 --> 01:01:53,200
And it's assumed that inside the

1020
01:01:53,300 --> 01:01:53,700
Section.

1021
01:01:53,700 --> 01:01:57,300
I am going to deal with parsing there's arguments out somehow it's up

1022
01:01:57,300 --> 01:02:00,600
to me how I do it, but that's the idea, right?

1023
01:02:01,600 --> 01:02:06,700
Well, see, of course also have the ability to do macros, right?

1024
01:02:06,700 --> 01:02:08,500
And they worked pretty much the same way.

1025
01:02:08,500 --> 01:02:12,900
You know, I could say Foo of bar and then I would call something where

1026
01:02:12,900 --> 01:02:19,200
I would say, Okay, I want to call my macro and it would work, but if I

1027
01:02:19,200 --> 01:02:23,400
tried to pass more parameters to the macro, it wouldn't work, right?

1028
01:02:23,900 --> 01:02:24,300
Exactly.

1029
01:02:24,300 --> 01:02:29,700
Now, just the function, but for the longest time, there was no way to

1030
01:02:29,700 --> 01:02:30,900
do anything about that.

1031
01:02:30,900 --> 01:02:31,200
If you want,

1032
01:02:31,400 --> 01:02:32,700
Need to support multiple.

1033
01:02:32,700 --> 01:02:35,500
You know, arbitrary numbers of parameters in a function without

1034
01:02:35,500 --> 01:02:37,200
specifying how many there were supposed to be.

1035
01:02:37,600 --> 01:02:40,400
You didn't have any option of doing it dot, dot dot syntax, did not

1036
01:02:40,400 --> 01:02:41,100
work in macros.

1037
01:02:41,100 --> 01:02:47,100
Well, recently, they expanded the notion of macros recently, it's not

1038
01:02:47,100 --> 01:02:51,300
that recent, I guess to allow exactly that same thing.

1039
01:02:51,600 --> 01:02:55,500
The dot-dot-dot just says, you can put as many additional parameters

1040
01:02:55,500 --> 01:02:59,800
as you want at the end of this macro and they will be accepted.

1041
01:03:00,100 --> 01:03:04,400
What you can then do much like how the function is expected to deal

1042
01:03:04,400 --> 01:03:05,200
with their extra parameters.

1043
01:03:05,400 --> 01:03:08,600
The macro expected to deal with those extra parameters, the way that

1044
01:03:08,600 --> 01:03:11,800
it works is anywhere in the expansion of the macra, right?

1045
01:03:11,800 --> 01:03:14,400
The macro expansion would go here somewhere, right?

1046
01:03:14,800 --> 01:03:23,400
You can put the term VAR args like so and it will put the entire

1047
01:03:23,400 --> 01:03:27,200
contents of whatever, the dot dot dot represented.

1048
01:03:27,200 --> 01:03:29,700
So, in this case, the four comma, the three, it will

1049
01:03:30,000 --> 01:03:32,800
Put that in place of the VA arcs.

1050
01:03:34,000 --> 01:03:38,900
So example of that would be if I was going to say

1051
01:03:42,400 --> 01:03:43,900
Let's say I did something like this.

1052
01:03:48,200 --> 01:03:48,400
Here.

1053
01:03:48,400 --> 01:03:50,200
I'm going to add three numbers together.

1054
01:03:52,000 --> 01:03:54,000
And so I have my results.

1055
01:03:56,400 --> 01:03:56,800
Right?

1056
01:03:58,200 --> 01:04:02,000
And in this case, I want to be able to add these three numbers.

1057
01:04:02,000 --> 01:04:08,000
Well I have, you know, bar here and I say add three numbers and I pass

1058
01:04:08,000 --> 01:04:11,000
the results of this macro, this macro is going to be expanded

1059
01:04:11,000 --> 01:04:13,300
contextually before the file is compiled.

1060
01:04:13,700 --> 01:04:16,100
And what it's going to do is it's just going to evaluate to 5, right?

1061
01:04:16,100 --> 01:04:18,900
It's going to be evaluated to bar, right?

1062
01:04:18,900 --> 01:04:23,000
And that's not enough, because we need three parameters, the, a, to be

1063
01:04:23,000 --> 01:04:23,500
in the sea.

1064
01:04:23,800 --> 01:04:26,100
Well, if I was to say, oh also,

1065
01:04:26,400 --> 01:04:31,200
Expand the rest of the things that you got past.

1066
01:04:31,200 --> 01:04:34,900
You can see that now it works because now this is getting expanded to

1067
01:04:34,900 --> 01:04:35,900
five four, three.

1068
01:04:36,700 --> 01:04:40,300
Similarly, if I was to pass more parameters here it would then again,

1069
01:04:40,300 --> 01:04:44,700
complain that I had too many arguments to my function, right?

1070
01:04:45,800 --> 01:04:47,300
So that's all the dot-dot-dot is.

1071
01:04:47,300 --> 01:04:50,900
It's really just an equivalent to the dot dot dot Syntax for

1072
01:04:50,900 --> 01:04:51,600
functions.

1073
01:04:51,900 --> 01:04:56,000
But this way it works for macros now the

1074
01:04:56,200 --> 01:04:59,100
Nice Fringe benefit is there are a number of reasons why that's really

1075
01:04:59,100 --> 01:04:59,500
nice.

1076
01:04:59,700 --> 01:05:02,500
It means, for example, that a function like a very standard function

1077
01:05:02,500 --> 01:05:04,200
such as printf, right?

1078
01:05:04,300 --> 01:05:05,600
Printf, looks like this.

1079
01:05:07,700 --> 01:05:12,300
So if you wanted to make a macro that called printf, you couldn't do

1080
01:05:12,300 --> 01:05:13,600
it before, right?

1081
01:05:13,700 --> 01:05:16,100
Because you had no way of telling the compiler.

1082
01:05:16,100 --> 01:05:19,700
I want to take as many arguments to my macros as possible, right?

1083
01:05:19,800 --> 01:05:23,100
Now you can now if you want to

1084
01:05:24,100 --> 01:05:27,100
You can make it something that thunks through to printf and will work

1085
01:05:28,000 --> 01:05:29,600
and that's very nice for completeness, right?

1086
01:05:29,600 --> 01:05:33,100
So it's very good that they added this so that's a nice aspect of it

1087
01:05:33,100 --> 01:05:35,400
but also additional aspect of it.

1088
01:05:35,400 --> 01:05:36,200
That's really nice.

1089
01:05:36,400 --> 01:05:38,700
Is when you have debug functions, right?

1090
01:05:38,700 --> 01:05:41,900
When you have a function that you're I'm sorry, macro that's being

1091
01:05:41,900 --> 01:05:45,600
used for debugging purposes, oftentimes what it looks like in fact we

1092
01:05:45,600 --> 01:05:50,300
can even use the printf, example, let's say we want debug print, okay?

1093
01:05:50,700 --> 01:05:53,800
And all debug print is going to do is going to call printf but

1094
01:05:53,900 --> 01:05:55,600
I want a way to turn it off.

1095
01:05:55,900 --> 01:05:57,900
I want to way to compile it out of my code.

1096
01:05:58,100 --> 01:05:59,800
Well now I can say like okay

1097
01:06:04,900 --> 01:06:05,600
Know what I wanted.

1098
01:06:05,600 --> 01:06:06,700
Use a slightly different example.

1099
01:06:11,900 --> 01:06:15,400
Let's say I do something slightly different because it's a makes a

1100
01:06:15,400 --> 01:06:17,800
little more sense with what it's more congruent.

1101
01:06:17,800 --> 01:06:19,400
To the case that I used it in today.

1102
01:06:19,800 --> 01:06:21,700
So I think it would be a better example.

1103
01:06:22,400 --> 01:06:25,800
Let's suppose that I make a thing that's like debug print integer.

1104
01:06:27,300 --> 01:06:27,800
Right.

1105
01:06:28,900 --> 01:06:32,700
And so I'm just going to pass the NT here, whatever it is.

1106
01:06:33,100 --> 01:06:36,900
And then I'm going to call printf and I'm going to say like debug you

1107
01:06:36,900 --> 01:06:38,300
know D, right?

1108
01:06:38,800 --> 01:06:43,700
And here I am printing out my integer, okay, so I'm going to call

1109
01:06:43,700 --> 01:06:46,400
debug print integer and my code and I want that to print out the

1110
01:06:46,400 --> 01:06:51,500
integer but I only want to do it if we're in like debug mode, right?

1111
01:06:51,500 --> 01:06:54,800
So, if someone is pound to find the symbol debug, then I want to do it

1112
01:06:55,300 --> 01:06:56,700
but if not then I don't.

1113
01:06:57,200 --> 01:07:00,200
The old days, what you had to do, was you had to say this?

1114
01:07:01,800 --> 01:07:02,400
Right?

1115
01:07:02,700 --> 01:07:06,000
So now I have debug print integer and it takes an integer and it does

1116
01:07:06,000 --> 01:07:09,600
the print, then I have debug Bridge, it takes it in the else Clause.

1117
01:07:09,600 --> 01:07:13,000
Meaning, if the debug symbol wasn't defined, I'm going to make it

1118
01:07:13,000 --> 01:07:13,900
expand to nothing.

1119
01:07:14,000 --> 01:07:15,400
So it doesn't affect my code at all.

1120
01:07:15,900 --> 01:07:18,400
Well, the bummer about this is you can imagine, you started to have a

1121
01:07:18,400 --> 01:07:20,300
lot of these things often times, right?

1122
01:07:20,400 --> 01:07:24,700
So there's integer and real and blah, blah blah blah blah, blah.

1123
01:07:24,700 --> 01:07:25,000
All right.

1124
01:07:25,000 --> 01:07:26,700
There's just all these functions here, right?

1125
01:07:27,000 --> 01:07:30,500
So typically what you had to do when you were trying to do this switch

1126
01:07:30,500 --> 01:07:31,400
on and off thing.

1127
01:07:31,600 --> 01:07:34,800
Is you then have to like cut and paste them all and do this, right?

1128
01:07:38,300 --> 01:07:39,300
And that's bad enough.

1129
01:07:40,300 --> 01:07:43,400
And unfortunately, we really haven't fixed that in the language yet.

1130
01:07:43,400 --> 01:07:44,200
But what do you do?

1131
01:07:45,000 --> 01:07:48,100
But the insult to the injury is once you have it set up this way.

1132
01:07:48,300 --> 01:07:51,800
Now, what happens, if you decide that this thing needs to take another

1133
01:07:51,800 --> 01:07:52,400
parameter.

1134
01:07:52,800 --> 01:07:56,000
Well, now you always have to go down and change the corresponding

1135
01:07:56,000 --> 01:07:57,200
version to do the same.

1136
01:07:57,700 --> 01:08:01,600
And what's worse is because this is only a compile-time directive.

1137
01:08:01,600 --> 01:08:05,200
It means that until you actually compile it without the debug flag

1138
01:08:05,200 --> 01:08:05,800
set.

1139
01:08:05,800 --> 01:08:07,000
You'll never even get an error.

1140
01:08:07,000 --> 01:08:07,200
So you

1141
01:08:07,300 --> 01:08:09,700
Even though you broke the code, you don't even know that you broke the

1142
01:08:09,700 --> 01:08:12,200
non debug build until you actually go build it.

1143
01:08:13,000 --> 01:08:15,000
So what's much preference more preferable to do?

1144
01:08:15,000 --> 01:08:15,200
Now?

1145
01:08:15,200 --> 01:08:18,600
Just as a general coding convention, that's helped save you some time.

1146
01:08:19,399 --> 01:08:24,399
Is that when you call debug print and 25, I'm sorry.

1147
01:08:24,399 --> 01:08:28,600
When you define the debug print Macro for the non debug case, just go

1148
01:08:28,600 --> 01:08:30,600
ahead and and don't specify the parameters.

1149
01:08:30,800 --> 01:08:34,399
Just put the dot dot dot in there because you don't care what those

1150
01:08:34,399 --> 01:08:35,100
parameters are.

1151
01:08:35,100 --> 01:08:37,100
The whole code is being compiled out.

1152
01:08:37,300 --> 01:08:42,100
Out and so this way you can basically just say oh no matter what the

1153
01:08:42,100 --> 01:08:46,000
changes are, that happen up here as long as the function names.

1154
01:08:46,000 --> 01:08:46,800
Don't change.

1155
01:08:46,899 --> 01:08:47,399
I'm fine.

1156
01:08:48,600 --> 01:08:52,100
So it kind of helps eliminate a few steps to that process and just

1157
01:08:52,100 --> 01:08:53,899
saves you maintenance time, which is always good.

1158
01:09:04,100 --> 01:09:04,700
Hold on a second.

1159
01:09:26,600 --> 01:09:31,899
Okay, so another question is, what about how about documentation?

1160
01:09:31,899 --> 01:09:34,100
I see you don't have too much comments in your code.

1161
01:09:34,399 --> 01:09:35,899
And yes, that's true.

1162
01:09:35,899 --> 01:09:37,600
I tend to frown on comments.

1163
01:09:37,600 --> 01:09:42,100
I don't think they're very good, programming practice.

1164
01:09:42,600 --> 01:09:46,800
And the reason for that is because I find that comments are almost

1165
01:09:46,800 --> 01:09:47,600
always wrong.

1166
01:09:49,700 --> 01:09:53,100
As programmers, you know, I think that sort of an underappreciated

1167
01:09:53,100 --> 01:09:55,500
thing is, if you're a very productive programmer, you know, some

1168
01:09:55,500 --> 01:09:59,500
programmers aren't very productive and maybe for programmers, who

1169
01:09:59,500 --> 01:10:02,800
aren't very productive, comments is as a different story, right?

1170
01:10:03,300 --> 01:10:05,500
But if you're a very productive programmer than one of the problems

1171
01:10:05,500 --> 01:10:09,900
that you have is that you're leaning on the compiler, a lot to make

1172
01:10:09,900 --> 01:10:14,700
sure that when you have a piece of code that it actually semantically

1173
01:10:14,700 --> 01:10:16,000
checks out, right?

1174
01:10:16,500 --> 01:10:18,200
So you're very used to using

1175
01:10:18,300 --> 01:10:22,300
That process and also tests right?

1176
01:10:22,300 --> 01:10:26,000
Like, you know, maybe you practice test driven development, or maybe

1177
01:10:26,000 --> 01:10:29,500
you have a way of testing your code and you run that and that's how

1178
01:10:29,500 --> 01:10:32,300
you're ensuring that the code that you're making is working and is

1179
01:10:32,300 --> 01:10:32,800
correct.

1180
01:10:33,900 --> 01:10:36,900
We have no such thing for comments, right?

1181
01:10:37,900 --> 01:10:42,200
The only thing that we have to try and verify the accuracy of comments

1182
01:10:42,200 --> 01:10:44,900
are like code reviews and code reviews.

1183
01:10:44,900 --> 01:10:47,300
Are there very time-consuming?

1184
01:10:48,500 --> 01:10:52,100
They cost a lot in terms of productivity, and they don't even

1185
01:10:52,100 --> 01:10:54,400
necessarily verify that the comments or actually, right?

1186
01:10:54,400 --> 01:10:57,600
It's sort of just a, maybe they do, maybe they don't,

1187
01:10:58,900 --> 01:11:03,500
So that I find that comments are just usually a pretty bad idea, a

1188
01:11:03,500 --> 01:11:04,000
comment.

1189
01:11:04,000 --> 01:11:08,800
Oftentimes hurts the program are coming down the pipe after you more

1190
01:11:08,800 --> 01:11:12,800
than they help, because they send them in the wrong direction, right?

1191
01:11:12,800 --> 01:11:15,300
For every correct, comment that survives in your code.

1192
01:11:15,300 --> 01:11:19,700
There's probably an incorrect comment and even one incorrect, comment

1193
01:11:19,700 --> 01:11:23,600
out of every 10 is enough to really make it hard for somebody who's

1194
01:11:23,600 --> 01:11:27,700
relying on the comments to do their job effectively.

1195
01:11:27,900 --> 01:11:28,200
So I

1196
01:11:28,400 --> 01:11:30,700
A comments usually bad idea.

1197
01:11:31,400 --> 01:11:35,400
Try to keep the code is readable as possible and restrict your use of

1198
01:11:35,400 --> 01:11:39,400
comments to when you're done with code, when you're finished with a

1199
01:11:39,400 --> 01:11:43,400
piece of code and you're not going to touch it for a long time, that's

1200
01:11:43,400 --> 01:11:47,000
usually the time to put in a comment.

1201
01:11:47,300 --> 01:11:51,000
So when we ship pieces of handmade hero and we're like, we're done

1202
01:11:51,000 --> 01:11:51,500
with this.

1203
01:11:51,700 --> 01:11:52,900
We're Not Gonna touch it anymore.

1204
01:11:53,400 --> 01:11:56,900
That's the time to put a comment in the code because then I know that

1205
01:11:56,900 --> 01:11:58,200
that comment at least has a

1206
01:11:58,300 --> 01:11:59,900
Really good chance of actually.

1207
01:12:00,000 --> 01:12:03,000
Helping someone more than it hurts because I'm writing it at a time.

1208
01:12:03,000 --> 01:12:06,300
When I'm pretty sure I'm not going to change the overall architecture

1209
01:12:06,600 --> 01:12:09,800
and furthermore, those comments should usually be about exactly that.

1210
01:12:10,000 --> 01:12:12,400
They should be about the overall architecture.

1211
01:12:12,600 --> 01:12:15,800
Because again, the code is going to get to bug slightly and maybe make

1212
01:12:15,800 --> 01:12:17,200
slight modifications over time.

1213
01:12:17,300 --> 01:12:20,900
I don't want to put these bad comments and code that are going to

1214
01:12:22,500 --> 01:12:26,100
Live longer, then the code, they're describing and become erroneous.

1215
01:12:27,000 --> 01:12:30,600
So, what I try to do is I try to restrict myself to those kinds of

1216
01:12:30,600 --> 01:12:34,100
comments, and as such, you won't see very many on handmade hero til

1217
01:12:34,100 --> 01:12:34,700
the end.

1218
01:12:45,800 --> 01:12:48,400
I sometimes receive comments from colleagues or in code reviews, that

1219
01:12:48,400 --> 01:12:52,000
I should put long pieces of code into functions for cleanliness.

1220
01:12:52,600 --> 01:12:54,800
What parameters goes into your thought process.

1221
01:12:54,800 --> 01:12:58,300
When deciding, if a piece of code, should be placed on Jimmy, under a

1222
01:12:58,300 --> 01:12:58,800
function.

1223
01:12:59,100 --> 01:13:00,300
How do you make the decision?

1224
01:13:04,400 --> 01:13:08,400
Well usually when putting something in a function for me is about

1225
01:13:08,400 --> 01:13:11,300
whether it's going to get called more than once, right?

1226
01:13:14,300 --> 01:13:18,200
I don't think that pulling code out of a function and putting it into

1227
01:13:18,200 --> 01:13:25,500
another function increases the cleanliness in any, you know, in any

1228
01:13:25,500 --> 01:13:26,400
real way.

1229
01:13:27,400 --> 01:13:29,700
It's really just an arbitrary decision.

1230
01:13:30,900 --> 01:13:35,100
And you know, it might make it more legible for some people but it

1231
01:13:35,100 --> 01:13:37,400
make it less legible for others.

1232
01:13:38,200 --> 01:13:41,800
So I would say, typically speaking, you know, your decision whether

1233
01:13:41,800 --> 01:13:44,400
you pull something out into a function should be, do I need to call

1234
01:13:44,400 --> 01:13:45,800
this in more than one place?

1235
01:13:47,900 --> 01:13:53,400
You know, that's that's usually really all that it boils down to if

1236
01:13:53,400 --> 01:13:54,200
that makes sense.

1237
01:13:55,200 --> 01:13:59,200
So I don't think there's really a lot more to it than that.

1238
01:14:00,400 --> 01:14:07,100
If, if all of your colleagues are uniformly, you know, if literally

1239
01:14:07,100 --> 01:14:11,300
everyone you work with really did, have a better time.

1240
01:14:11,700 --> 01:14:14,100
Reading code, that was

1241
01:14:15,800 --> 01:14:21,100
Pulled out into smaller functions then you know, if you can actually,

1242
01:14:22,000 --> 01:14:24,100
if you can actually verify that they're not just saying that.

1243
01:14:24,100 --> 01:14:27,000
And that they really do have an easier time reading it, because one of

1244
01:14:27,000 --> 01:14:30,200
the problems with programmers, a lot of times is that they say things

1245
01:14:30,200 --> 01:14:32,400
but they're not true, right?

1246
01:14:36,200 --> 01:14:40,500
You know, for example, people often times will say like, oh you got to

1247
01:14:40,500 --> 01:14:43,200
put this thing in a class or something, right?

1248
01:14:43,600 --> 01:14:47,100
But they have no actual reason for that, they just they think that

1249
01:14:47,100 --> 01:14:50,400
clean, code means putting things in a class, but they've never done

1250
01:14:50,400 --> 01:14:54,300
any research or provided any data that backs up that claim.

1251
01:14:55,700 --> 01:14:59,400
So a lot of times it becomes problematic.

1252
01:15:01,300 --> 01:15:03,200
If you're going based on those assumptions.

1253
01:15:03,300 --> 01:15:06,400
So if colleagues are telling you to do something and you suspect that

1254
01:15:06,400 --> 01:15:09,000
that's why meaning, it's just because they've been told this and they

1255
01:15:09,000 --> 01:15:10,100
never really thought it through.

1256
01:15:10,300 --> 01:15:11,800
That's usually a poor reason to do it.

1257
01:15:12,200 --> 01:15:15,000
But let's say you were in a situation where your colleagues really

1258
01:15:15,000 --> 01:15:16,300
legitimately for whatever reason.

1259
01:15:16,300 --> 01:15:19,300
The way their brains tend to work is that they likes reading small

1260
01:15:19,300 --> 01:15:24,300
functions and can understand them better if that turns out to be true

1261
01:15:24,300 --> 01:15:28,100
in some measurable way, then that's obviously a good reason to do it.

1262
01:15:28,500 --> 01:15:29,800
It doesn't mean your code is bad.

1263
01:15:30,000 --> 01:15:32,800
Bad, if you didn't do it and it doesn't mean that it's always best to

1264
01:15:32,800 --> 01:15:34,000
break things up into small functions.

1265
01:15:34,000 --> 01:15:39,300
All it means is, hey, you're you're clearly in a work environment

1266
01:15:39,300 --> 01:15:42,000
where it benefits your colleagues to do this thing.

1267
01:15:42,500 --> 01:15:46,400
So that's a perfectly reasonable reason to do it, right?

1268
01:15:51,300 --> 01:15:53,100
Hopefully that's true.

1269
01:15:53,100 --> 01:15:54,200
Just in general, right?

1270
01:15:54,200 --> 01:15:58,400
It's like if there's some particular coding practice that perhaps has

1271
01:15:58,400 --> 01:16:03,500
absolutely no basis or no fundamental reason why it's better

1272
01:16:04,700 --> 01:16:06,800
You may still want to do that practice.

1273
01:16:07,100 --> 01:16:10,800
If it does, in practice, make your specific team function better

1274
01:16:11,200 --> 01:16:15,800
because every team and every development environment is going to be

1275
01:16:15,800 --> 01:16:16,500
different.

1276
01:16:17,000 --> 01:16:20,100
Sometimes drastically sometimes, only subtle to suddenly

1277
01:16:22,000 --> 01:16:26,000
But if you can establish that you that it is definitely true for your

1278
01:16:26,000 --> 01:16:29,300
work environment that a certain coding practice helps people.

1279
01:16:30,000 --> 01:16:31,800
That is a very good reason to do it.

1280
01:16:32,000 --> 01:16:36,800
And the only thing to be sure about obviously is that you've actually

1281
01:16:36,800 --> 01:16:42,800
come to that decision in a data-oriented way where you've actually

1282
01:16:42,800 --> 01:16:45,200
tried to do some experiments to determine that.

1283
01:16:45,200 --> 01:16:50,700
It was not just somebody's arbitrary, you know?

1284
01:16:51,400 --> 01:16:53,500
Fanciful notion that this was a better code.

1285
01:16:56,900 --> 01:16:57,400
So,

1286
01:17:12,100 --> 01:17:14,200
I think I've I got all the questions.

1287
01:17:14,300 --> 01:17:16,400
I don't see any other questions.

1288
01:17:33,300 --> 01:17:34,800
So I think I think we're good.

1289
01:17:36,200 --> 01:17:38,500
I don't think I said I don't see any other questions if there were no

1290
01:17:38,500 --> 01:17:39,100
other questions.

1291
01:17:39,100 --> 01:17:40,400
I'll start the second block.

1292
01:18:16,700 --> 01:18:19,600
How much code is, debug code versus real code?

1293
01:18:20,500 --> 01:18:23,600
Well, you know, it's always hard to say.

1294
01:18:23,600 --> 01:18:24,100
It changes.

1295
01:18:24,100 --> 01:18:27,900
A lot from Project to project, right?

1296
01:18:32,300 --> 01:18:32,900
The.

1297
01:18:38,400 --> 01:18:42,200
The breakdown on handmade here is probably I don't know, 30% debug

1298
01:18:42,200 --> 01:18:44,600
code, 70% actual code, I don't know.

1299
01:18:46,200 --> 01:18:47,400
I actually don't know.

1300
01:18:47,400 --> 01:18:52,500
We haven't measured it so that that's like a complete guess, on my

1301
01:18:52,500 --> 01:18:53,300
part.

1302
01:18:56,000 --> 01:18:59,700
You know, I wish there was an easier way to tell you can, obviously

1303
01:18:59,700 --> 01:19:08,100
get a clock count on the debug code versus the non debug code because

1304
01:19:08,100 --> 01:19:12,200
we have like, you know, these functions here.

1305
01:19:12,800 --> 01:19:20,100
Sorry these files here, debug their only debug code but you know,

1306
01:19:20,100 --> 01:19:22,300
there's debug code scattered throughout.

1307
01:19:22,300 --> 01:19:23,100
These are the things.

1308
01:19:23,100 --> 01:19:25,700
And so even that clock count would

1309
01:19:25,900 --> 01:19:27,300
Be definitive.

1310
01:20:15,400 --> 01:20:18,400
Yeah, that's a good point up, the coder suggest that you could expand

1311
01:20:18,400 --> 01:20:23,300
the files and take the diffs of the like pre-processed files in both

1312
01:20:23,300 --> 01:20:26,900
cases, one with the debug on and one of the debugger off that would be

1313
01:20:27,200 --> 01:20:29,400
that would totally work.

1314
01:20:29,400 --> 01:20:29,900
I think.

1315
01:20:32,700 --> 01:20:37,000
well, not even that doesn't really work because you need to

1316
01:20:37,000 --> 01:20:38,000
pre-process

1317
01:20:39,700 --> 01:20:44,600
The preprocessor would expand out things potentially that would skew

1318
01:20:44,600 --> 01:20:49,300
that metric a little bit, but yeah, that's probably the bet that's

1319
01:20:49,300 --> 01:20:51,600
probably the most accurate when we could hope for at the moment.

1320
01:20:56,800 --> 01:20:59,200
all right, let's go ahead and

1321
01:21:03,200 --> 01:21:06,300
Get ourselves back to normal state so we can start again.

1322
01:21:11,100 --> 01:21:11,700
All right.

1323
01:21:17,700 --> 01:21:20,400
Hello everyone and welcome to handmade hero.

1324
01:21:20,400 --> 01:21:22,700
The show Rico to complete game live on stream.

1325
01:21:22,700 --> 01:21:29,000
This is our second block of our to Saturday blocks in our first Vlog.

1326
01:21:29,000 --> 01:21:34,900
Today, we were just showing how to pull apart a piece of code that did

1327
01:21:34,900 --> 01:21:37,600
a bunch of different things where we wanted a little bit more control

1328
01:21:37,600 --> 01:21:40,000
over, which things happened in, which ones didn't.

1329
01:21:40,700 --> 01:21:44,500
And in the second block here, today I'm going to kind of go back into

1330
01:21:44,500 --> 01:21:47,400
that a little bit and just kind of comb over that

1331
01:21:47,600 --> 01:21:51,200
Code and do a little bit more restructuring of it.

1332
01:21:51,200 --> 01:21:55,700
Till I'm a little bit happier with how everything in it is working.

1333
01:21:56,400 --> 01:22:02,100
So yeah, it's the phrase day should probably always have been our

1334
01:22:02,500 --> 01:22:06,400
unfortunately, I don't know, maybe I'll change it to our instead but

1335
01:22:06,400 --> 01:22:10,700
here on our 350, you want to start with our three 49s source code

1336
01:22:10,700 --> 01:22:13,200
because that's what I'm was starting with.

1337
01:22:15,400 --> 01:22:16,600
Is that correct?

1338
01:22:20,000 --> 01:22:20,900
That's not correct.

1339
01:22:20,900 --> 01:22:22,700
It's that's not correct at all.

1340
01:22:28,300 --> 01:22:29,500
There we go.

1341
01:22:30,200 --> 01:22:30,900
There we go.

1342
01:22:31,000 --> 01:22:36,300
That's what we actually wanted, but I don't even know how to use my

1343
01:22:36,300 --> 01:22:37,600
own little advicing.

1344
01:22:37,600 --> 01:22:40,700
I should probably, I probably will have to update the update, the

1345
01:22:40,700 --> 01:22:42,600
timer to deal with the to block system.

1346
01:22:43,000 --> 01:22:48,900
So what I meant to say is today's day 351 or our 351 is, it is.

1347
01:22:50,200 --> 01:22:54,400
And so you're going to want to use our 350 source code.

1348
01:22:55,000 --> 01:22:56,100
That's what we're starting with the day.

1349
01:22:56,900 --> 01:23:05,200
All right, so let's go ahead and and jump back into it here mr.

1350
01:23:05,200 --> 01:23:08,300
Timer will I guess we're getting an extra five minutes here.

1351
01:23:08,600 --> 01:23:10,900
You know, sometimes we get an extra five minutes, it's always good.

1352
01:23:11,100 --> 01:23:13,900
The timer giveth and the timer taketh away.

1353
01:23:15,500 --> 01:23:19,600
So let's jump back in here and and take a look at where we were

1354
01:23:20,900 --> 01:23:25,300
If you remember, I was dealing with this code in World mode and we

1355
01:23:25,300 --> 01:23:28,700
kind of did a nice transform on the code here.

1356
01:23:28,700 --> 01:23:33,800
I think because you can kind of see, like, here's the code for

1357
01:23:33,800 --> 01:23:36,500
simulating a region.

1358
01:23:38,300 --> 01:23:41,000
You know, a non-primary region of the world.

1359
01:23:44,800 --> 01:23:47,300
Even including rendering it's kind of nice.

1360
01:23:47,300 --> 01:23:49,800
It looks pretty clean here right?

1361
01:23:50,100 --> 01:23:55,400
And here's the code for simulating a primary region where I should say

1362
01:23:55,400 --> 01:23:58,600
the primary region and you can see that it does some additional things

1363
01:23:58,600 --> 01:23:59,800
right, does check for joining

1364
01:24:00,000 --> 01:24:06,600
There's it does this sort of frame by frame Delta that gets used for

1365
01:24:06,600 --> 01:24:08,000
doing the particle systems?

1366
01:24:08,500 --> 01:24:13,100
It does some debug rendering here and these are fundamentally doing

1367
01:24:13,100 --> 01:24:14,800
the exact same things, right?

1368
01:24:14,900 --> 01:24:19,400
But because we broke it up into begin, Sim simulate and and Sim it.

1369
01:24:19,400 --> 01:24:22,800
Now allows us to insert in this, in this case, we're talking about the

1370
01:24:22,800 --> 01:24:23,800
primary region.

1371
01:24:24,000 --> 01:24:28,500
It allows us to insert this additional stuff in the right places

1372
01:24:28,900 --> 01:24:29,900
without having

1373
01:24:30,000 --> 01:24:31,900
NG to duplicate the code, right?

1374
01:24:31,900 --> 01:24:33,500
So that's kind of nice.

1375
01:24:36,800 --> 01:24:38,300
So, that's pretty good.

1376
01:24:38,400 --> 01:24:41,600
And what that means is that, now, if we wanted to, we could actually

1377
01:24:41,600 --> 01:24:45,200
distribute the work of updating the world, the part of the world.

1378
01:24:45,200 --> 01:24:45,600
That's

1379
01:24:48,600 --> 01:24:52,400
not the main part we're looking at, we could actually farm that off,

1380
01:24:52,400 --> 01:24:54,400
too many threads if we wanted to write

1381
01:24:55,600 --> 01:24:59,100
So on a typical four core computer, where maybe we have 8 total

1382
01:24:59,100 --> 01:25:03,800
logical processors to deal with, you could imagine us farming off the

1383
01:25:03,800 --> 01:25:08,800
update step, and having it be 8 times faster, right probably won't get

1384
01:25:08,800 --> 01:25:09,800
a full eight times faster.

1385
01:25:09,800 --> 01:25:16,300
But you know, the potential win obviously is, is there and right now

1386
01:25:16,300 --> 01:25:19,300
we have a very highly unoptimized function.

1387
01:25:22,700 --> 01:25:26,700
It's being called in there, especially in debug mode, you can see it

1388
01:25:26,700 --> 01:25:29,200
takes a long, long time, right?

1389
01:25:29,800 --> 01:25:31,400
It's called get closest reversible.

1390
01:25:31,400 --> 01:25:33,400
And you can see that its way up there.

1391
01:25:33,400 --> 01:25:37,600
In terms of amount of time, it takes out of the out of the frame.

1392
01:25:38,000 --> 01:25:43,500
Now, granted, if we do compiled in release mode that kind of goes

1393
01:25:43,500 --> 01:25:43,800
away.

1394
01:25:43,800 --> 01:25:49,200
So it's a bit of a red herring because it even though it's a function

1395
01:25:49,200 --> 01:25:51,500
that we really should optimize because it's doing a

1396
01:25:51,700 --> 01:25:54,800
Very poor job of what it needs to do right now.

1397
01:25:55,500 --> 01:25:58,900
When we do compiled in release mode, you can see that it actually ends

1398
01:25:58,900 --> 01:26:00,500
up being a non-issue.

1399
01:26:00,500 --> 01:26:03,700
It's down here in the, in the two percent range.

1400
01:26:03,700 --> 01:26:06,700
So even though it's awful, it's still not that awful.

1401
01:26:08,600 --> 01:26:14,600
But, you know, we can cheat because if we want to see how we're doing

1402
01:26:14,600 --> 01:26:17,600
here, like I said, if we just leave ourselves in debug mode, we have a

1403
01:26:17,600 --> 01:26:21,500
really highly optimized function that can kind of take its kind of

1404
01:26:21,600 --> 01:26:26,000
Ann's in if you will for doing more heavyweight updating in here,

1405
01:26:26,000 --> 01:26:26,600
potentially

1406
01:26:27,600 --> 01:26:31,700
So we already have a thing where in debug mode, we're not able to hit

1407
01:26:32,400 --> 01:26:34,600
60 frames a second in debug mode.

1408
01:26:35,100 --> 01:26:38,400
We you know, it's we're hitting it easily and optimize mode but we're

1409
01:26:38,400 --> 01:26:42,600
not able to hit it here because of those that on optimize function,

1410
01:26:42,900 --> 01:26:47,000
what we can do is say let's use that fact that we've got a piglet in

1411
01:26:47,000 --> 01:26:48,300
there, right?

1412
01:26:48,600 --> 01:26:50,300
In fact, maybe I'll put the Hat on.

1413
01:26:51,900 --> 01:26:56,600
Let's use that little piggy to sort of help us.

1414
01:26:58,100 --> 01:26:59,800
Figure out whether we can get some time.

1415
01:27:00,000 --> 01:27:05,600
Here by doing multi sort of just distribution across multiple threads,

1416
01:27:05,900 --> 01:27:06,500
right?

1417
01:27:07,500 --> 01:27:11,500
And so, what I want to do is I want to use this as a motivation for us

1418
01:27:11,500 --> 01:27:16,600
to get the code into a place where we can run multiple simulations on

1419
01:27:16,600 --> 01:27:18,000
multiple threads if we want to.

1420
01:27:18,000 --> 01:27:20,300
I'm not saying we need to do that, I'm saying that's something I want

1421
01:27:20,300 --> 01:27:23,600
to make sure this code could do so that if we start to crank up, our

1422
01:27:23,600 --> 01:27:26,700
simulation complexity, and we want to be simulating lots of different

1423
01:27:26,700 --> 01:27:27,300
parts of the world.

1424
01:27:27,300 --> 01:27:29,800
At the same time, we can Leverage

1425
01:27:30,100 --> 01:27:32,500
Multiple cores of the CPU, to do exactly that.

1426
01:27:35,000 --> 01:27:39,600
All right, so I'm going to call this one first, and I'm going to call

1427
01:27:39,600 --> 01:27:41,500
it without any of the, so we're good.

1428
01:27:41,500 --> 01:27:43,300
We're going to use this style simulate, right?

1429
01:27:43,300 --> 01:27:45,100
The kind that doesn't actually draw anything.

1430
01:27:48,600 --> 01:27:49,000
Okay?

1431
01:27:50,600 --> 01:27:54,400
And I'm going to go ahead and wrap these guys a little bit.

1432
01:27:55,900 --> 01:27:56,500
Like so.

1433
01:28:02,700 --> 01:28:07,600
So this is the isolated piece of code that we know we care about for

1434
01:28:07,600 --> 01:28:12,100
simulating a non-primary region of the world and now I don't want to

1435
01:28:12,100 --> 01:28:13,800
tax your memories too much here.

1436
01:28:13,800 --> 01:28:18,400
I realize that on handmade here at this point, we've we've shown how

1437
01:28:18,400 --> 01:28:19,100
to write so many things.

1438
01:28:19,100 --> 01:28:23,000
I love how much stuff we were able to show how to write in a game

1439
01:28:23,000 --> 01:28:23,800
engine so far.

1440
01:28:23,800 --> 01:28:27,700
It's awesome, but it does mean that I do ask a lot of people to try

1441
01:28:27,700 --> 01:28:29,700
and remember the things that you've already done.

1442
01:28:29,700 --> 01:28:32,600
So I apologize for digging.

1443
01:28:32,700 --> 01:28:34,000
Back like that.

1444
01:28:34,300 --> 01:28:38,900
But if you remember inside want that file, if you remember inside our

1445
01:28:38,900 --> 01:28:42,400
renderer, we have this sort of concept of multi-threading.

1446
01:28:42,800 --> 01:28:44,900
And I don't know if you remember how we did that.

1447
01:28:45,300 --> 01:28:50,800
But essentially what we did is we have these work units, that we

1448
01:28:50,800 --> 01:28:54,800
divide things into, and then we have threads that come along and pick

1449
01:28:54,800 --> 01:28:56,800
them up and do them, right.

1450
01:28:57,700 --> 01:28:59,600
And you can actually see this working right here.

1451
01:28:59,600 --> 01:29:01,700
This is the code for it.

1452
01:29:01,700 --> 01:29:06,100
So, we have a tiled renderer, and you can see here at Loops over the

1453
01:29:06,100 --> 01:29:10,100
tiles in X and Y, however, many there are, and we can control those

1454
01:29:10,100 --> 01:29:14,600
parameters, and then it creates a little work order here that says, I

1455
01:29:14,600 --> 01:29:17,900
need you to render this tile.

1456
01:29:17,900 --> 01:29:20,300
And this, do tiled render.

1457
01:29:20,300 --> 01:29:24,500
Work function would actually be the function that would do the work.

1458
01:29:24,500 --> 01:29:27,700
And so, instead of doing that, what we do is

1459
01:29:27,800 --> 01:29:33,400
We just push it on a Q and say, this is work, that's available to do

1460
01:29:33,900 --> 01:29:37,700
and then we trust that our multi-threaded code will come through.

1461
01:29:37,700 --> 01:29:39,300
Pick up those work things and do them.

1462
01:29:39,600 --> 01:29:44,300
And then what we do is we say complete all work on the thread that

1463
01:29:44,300 --> 01:29:45,200
launches all these.

1464
01:29:45,500 --> 01:29:50,500
And what that function will do is it will just go look at that q and

1465
01:29:50,500 --> 01:29:54,800
keep doing work itself out of that queue until it sees that all the

1466
01:29:54,800 --> 01:29:56,300
work has been done.

1467
01:29:57,200 --> 01:29:57,700
Right.

1468
01:29:57,700 --> 01:29:59,400
So this is a

1469
01:30:00,000 --> 01:30:03,300
Very simple way of doing multi-threaded work distribution, but it

1470
01:30:03,300 --> 01:30:06,400
works actually very well for a lot of circumstances.

1471
01:30:08,000 --> 01:30:09,600
We can just keep leveraging it.

1472
01:30:10,300 --> 01:30:14,800
So, if we take a look at what we want to do here, what we want to do

1473
01:30:15,100 --> 01:30:19,300
is, look at the do tiled render work function and go, can we go ahead

1474
01:30:19,300 --> 01:30:23,100
and make equivalent function to that, that we can use for doing this

1475
01:30:23,100 --> 01:30:24,100
simulation step?

1476
01:30:24,800 --> 01:30:29,100
And here is our, you know, function prototype for it and we can call

1477
01:30:29,100 --> 01:30:29,800
this to work

1478
01:30:30,000 --> 01:30:31,400
World Sim or something like that.

1479
01:30:31,900 --> 01:30:33,300
We can time it.

1480
01:30:33,300 --> 01:30:34,500
Of course like we always do.

1481
01:30:34,500 --> 01:30:38,100
So we can see how much time it's taking and then we can go here and

1482
01:30:38,200 --> 01:30:44,500
just imagine what we would need in terms of one of those little work

1483
01:30:44,500 --> 01:30:47,500
descriptions in order to make this happen now.

1484
01:30:47,500 --> 01:30:50,600
Usually, like I said, this is a very straightforward process because

1485
01:30:50,600 --> 01:30:53,400
we should be able to see exactly what we need.

1486
01:30:53,400 --> 01:30:57,000
Just by looking at the operation we're talking about and here you can

1487
01:30:57,000 --> 01:30:59,900
see, you know, this is what we know we need.

1488
01:31:00,000 --> 01:31:02,100
It because this is what we were calling before.

1489
01:31:03,000 --> 01:31:06,000
And you can see here, we need a boundary, right?

1490
01:31:06,000 --> 01:31:08,900
So we need to know where we are going to simulate.

1491
01:31:10,000 --> 01:31:15,600
We need to know some information about the world such as the transient

1492
01:31:15,600 --> 01:31:20,100
State, the, the world mode structure were working on the DT were

1493
01:31:20,100 --> 01:31:24,700
trying to stimulate, and then we need to know some rendering

1494
01:31:24,700 --> 01:31:26,600
information and that rendering information.

1495
01:31:26,600 --> 01:31:29,500
Thankfully I believe can all be blacked out so we can just get rid of

1496
01:31:29,500 --> 01:31:29,800
it.

1497
01:31:29,900 --> 01:31:32,000
And not have to worry about it, right?

1498
01:31:33,900 --> 01:31:40,000
Okay, so that won't be very hard to package up, but you can see kind

1499
01:31:40,000 --> 01:31:43,900
of right off the bat that we have a little bit of an issue and maybe

1500
01:31:43,900 --> 01:31:47,800
I'm cheating when I say, you can see because again, I'm the person

1501
01:31:47,800 --> 01:31:49,700
who's supposed to be teaching programming on this stream.

1502
01:31:50,800 --> 01:31:54,500
Let's just say I can see, and probably the experienced programmers out

1503
01:31:54,500 --> 01:31:54,700
there.

1504
01:31:54,700 --> 01:31:55,600
Watch stream can see.

1505
01:31:57,700 --> 01:32:01,600
That we're going to run into some problems, but it may not be obvious

1506
01:32:01,600 --> 01:32:05,100
to some of the beginners out there, what the problems are going to be

1507
01:32:05,100 --> 01:32:08,500
well, in a multi-threaded environment, the problem is, you can't be

1508
01:32:08,500 --> 01:32:13,600
doing anything where two people can't do it at once, right?

1509
01:32:14,100 --> 01:32:16,200
And so if you take a look at what's going to happen here at the

1510
01:32:16,200 --> 01:32:18,200
instant, we call begins him.

1511
01:32:18,500 --> 01:32:22,300
You can see that it's going to use this transient Arena to create the

1512
01:32:22,300 --> 01:32:23,200
temporary memory.

1513
01:32:23,200 --> 01:32:26,300
It needs in order for doing the world simulation.

1514
01:32:27,000 --> 01:32:29,800
Just fundamentally not going to work.

1515
01:32:29,800 --> 01:32:33,000
The reason that's not going to work is because the arena is a

1516
01:32:33,000 --> 01:32:35,200
single-threaded construct, right?

1517
01:32:35,400 --> 01:32:39,300
If we take a look here at how we wrote the memory Arena, nothing in

1518
01:32:39,300 --> 01:32:39,800
the memory.

1519
01:32:39,800 --> 01:32:43,300
Rihanna does any kind of locking or prevention of contention for

1520
01:32:43,300 --> 01:32:44,000
resources?

1521
01:32:44,200 --> 01:32:49,200
So when we do something like call allocate on the arena, it is not

1522
01:32:49,200 --> 01:32:50,300
locked right?

1523
01:32:50,300 --> 01:32:53,400
There is nothing that would prevent two threads from accidentally

1524
01:32:53,400 --> 01:32:56,800
stomping on each other's allocations or corrupting the state.

1525
01:32:56,900 --> 01:32:59,900
of the memory Arena because they're modifying different values at the

1526
01:33:00,000 --> 01:33:06,100
Same time without awareness of each other so that's a problem but it's

1527
01:33:06,100 --> 01:33:10,700
a problem we've seen before we already have the notion that temporary

1528
01:33:10,700 --> 01:33:14,800
memory for a work job can come from the job itself.

1529
01:33:14,900 --> 01:33:19,700
And we know that this is true because we actually created this when we

1530
01:33:19,700 --> 01:33:26,300
did that the work with the transient State originally, what we did,

1531
01:33:26,600 --> 01:33:27,900
that's not the file.

1532
01:33:27,900 --> 01:33:28,600
I wanted.

1533
01:33:29,200 --> 01:33:29,700
There we go.

1534
01:33:30,700 --> 01:33:36,700
What we did is we said, okay, when we have these tasks, they have

1535
01:33:36,700 --> 01:33:40,300
their own memory arena in the first place, right?

1536
01:33:40,600 --> 01:33:45,600
Every task has an arena, it consult sub allocate out of, and it's

1537
01:33:45,600 --> 01:33:50,300
aware that it is the only person acts in that Arena.

1538
01:33:50,600 --> 01:33:52,400
So it doesn't have to worry about that.

1539
01:33:52,400 --> 01:33:53,000
Contention.

1540
01:33:53,600 --> 01:33:56,700
So, what we need to do first in order to put ourselves in a position

1541
01:33:56,700 --> 01:33:59,800
where we can start to make this code thread-safe is we have to

1542
01:34:00,100 --> 01:34:02,200
Rid of that cross dependency.

1543
01:34:02,400 --> 01:34:04,000
So that's really, really easy.

1544
01:34:04,200 --> 01:34:08,700
All we have to do, we're lucky all we have to do in this case is stop

1545
01:34:08,700 --> 01:34:12,400
thinking about the temporary memory part with the begin temp and temp

1546
01:34:12,400 --> 01:34:17,700
stuff here as coming from the transient state and instead just say it

1547
01:34:17,700 --> 01:34:22,400
has to come from an arena that you're going to pass in.

1548
01:34:22,700 --> 01:34:25,500
And so that way, when we're calling it from the external code in the

1549
01:34:25,500 --> 01:34:28,100
main line block, we can pass in the transient State Arena.

1550
01:34:28,300 --> 01:34:29,800
If that's the arena, we want to use

1551
01:34:30,000 --> 01:34:33,300
But if we're calling it from one of our tasks, then we can just pass

1552
01:34:33,300 --> 01:34:35,000
in the task Arena.

1553
01:34:36,400 --> 01:34:39,900
So here, I'm going to get rid of that and pass the temporary NE in.

1554
01:34:40,300 --> 01:34:45,100
Same thing, here, temp Arena and now the trance state is illuminated,

1555
01:34:45,100 --> 01:34:45,500
right?

1556
01:34:45,500 --> 01:34:49,500
That is not something that's allowed to get passed into that function

1557
01:34:49,500 --> 01:34:55,500
at all and no one's allowed to use it in any way so that should help

1558
01:34:55,500 --> 01:34:56,800
us out tremendously.

1559
01:34:58,900 --> 01:35:02,200
With starting to make this code, something that can be called for

1560
01:35:02,200 --> 01:35:03,000
multiple threads.

1561
01:35:03,500 --> 01:35:08,300
So here when we come through, I'm going to go ahead and call the task

1562
01:35:08,300 --> 01:35:08,800
or any of their.

1563
01:35:09,100 --> 01:35:13,800
I don't fully remember the task with memory situation.

1564
01:35:14,100 --> 01:35:15,400
I don't to be honest with.

1565
01:35:15,400 --> 01:35:19,400
You remember very much about how this gets called back.

1566
01:35:19,400 --> 01:35:20,200
Exactly.

1567
01:35:28,700 --> 01:35:31,300
I suppose that's just something that gets isolated.

1568
01:35:31,300 --> 01:35:34,900
Let's take a look, I don't remember exactly how the begin task with

1569
01:35:34,900 --> 01:35:37,700
memory and task with memory system was supposed to work.

1570
01:35:40,500 --> 01:35:43,900
You can see here, we call it and then we end

1571
01:35:45,300 --> 01:35:49,100
And it looks like it's just so it's just I guess all that's really

1572
01:35:49,100 --> 01:35:49,900
happening here.

1573
01:35:49,900 --> 01:35:56,500
Is you just use this when you're initially feet farming off the test

1574
01:35:56,700 --> 01:35:59,400
and then you can be assured that they have them, right?

1575
01:36:00,000 --> 01:36:00,700
It's really it.

1576
01:36:02,700 --> 01:36:07,600
So yeah, this you know I feel like this is something that could

1577
01:36:07,600 --> 01:36:10,800
probably get expanded and put into the platform side of things.

1578
01:36:10,800 --> 01:36:15,500
Now, it seems to me like maybe this is not such a useful construct

1579
01:36:15,500 --> 01:36:18,700
anymore, especially that now that Arenas are things that can be sort

1580
01:36:18,700 --> 01:36:20,300
of allocated from separately.

1581
01:36:20,500 --> 01:36:23,100
So I'm kind of a little bit wondering about that.

1582
01:36:23,300 --> 01:36:28,100
Let's take a brief detour here because I want to double-check that

1583
01:36:28,100 --> 01:36:29,900
that's really the way that

1584
01:36:30,000 --> 01:36:30,900
That I want to do that.

1585
01:36:30,900 --> 01:36:33,000
So what I'm going to do is I'm going to put this on, hold for one

1586
01:36:33,000 --> 01:36:38,000
second and we know that we can still fulfill our previous obligations

1587
01:36:38,000 --> 01:36:43,800
to pass things by passing in the trance transient Arena here, right?

1588
01:36:44,100 --> 01:36:48,800
So our game still runs just fine, and it's working off of the transit

1589
01:36:48,800 --> 01:36:50,500
Arena by passing it in same.

1590
01:36:50,500 --> 01:36:51,400
Basic idea.

1591
01:36:52,900 --> 01:36:56,000
What I want to do now is I want to look to see is anyone using the

1592
01:36:56,000 --> 01:36:58,700
system anymore because originally, it was used for some rendering

1593
01:36:58,700 --> 01:36:59,400
purposes.

1594
01:37:00,000 --> 01:37:01,600
But it's not being used for that anymore.

1595
01:37:02,300 --> 01:37:04,400
The software renderer doesn't need memory.

1596
01:37:04,400 --> 01:37:06,300
I don't think maybe it does.

1597
01:37:06,300 --> 01:37:09,300
I can't remember, but I don't think it does.

1598
01:37:11,300 --> 01:37:15,400
So I want to take a look here and see if anyone's even using begin to

1599
01:37:15,400 --> 01:37:16,900
ask with memory just so I can be sure.

1600
01:37:17,400 --> 01:37:19,800
So it looks like the people who are using that are in the asset

1601
01:37:19,800 --> 01:37:20,100
system.

1602
01:37:20,100 --> 01:37:26,100
So here you go, you can see us trying to get begin task memory and its

1603
01:37:26,100 --> 01:37:28,400
operating off of the transient State there, right?

1604
01:37:31,600 --> 01:37:36,200
So, again, this just doesn't seem to be a smart way to do this, for a

1605
01:37:36,200 --> 01:37:37,000
number of reasons.

1606
01:37:37,000 --> 01:37:39,800
I understand why we did it this way originally, it's because we wanted

1607
01:37:39,800 --> 01:37:42,800
to keep this in the platform independent part and because memory

1608
01:37:42,800 --> 01:37:46,400
Rino's worked in a very specific way, we've expanded our concept of

1609
01:37:46,400 --> 01:37:50,700
memory is now to allow things like having them be acknowledged by the

1610
01:37:50,700 --> 01:37:52,600
platform layer and work with the platform layer.

1611
01:37:53,300 --> 01:37:56,900
And so at that point, it seems to me that this is not particularly

1612
01:37:58,100 --> 01:38:00,000
smart necessarily, right?

1613
01:38:03,300 --> 01:38:05,700
So, I want to see before I say anything about it.

1614
01:38:05,900 --> 01:38:10,100
Let me just see exactly what is happening here, in terms of how memory

1615
01:38:10,100 --> 01:38:11,200
is being allocated.

1616
01:38:11,800 --> 01:38:13,500
I want to see how it's how it's doing.

1617
01:38:16,900 --> 01:38:17,300
Yes.

1618
01:38:17,300 --> 01:38:19,800
Oh this, this is roughly as I expected.

1619
01:38:20,400 --> 01:38:23,400
So, if you take a look at what happens here, you can see that really

1620
01:38:23,400 --> 01:38:27,800
in terms of allocations, there's not really any allocations that are

1621
01:38:27,800 --> 01:38:31,100
going on besides that asset work structure there.

1622
01:38:31,800 --> 01:38:32,100
It.

1623
01:38:32,900 --> 01:38:35,400
It's just, it's just the task itself.

1624
01:38:35,400 --> 01:38:36,500
That's getting pushed on there.

1625
01:38:37,800 --> 01:38:42,600
And then what the memory is actually used for, I would assume is

1626
01:38:42,600 --> 01:38:43,400
actually in here.

1627
01:38:43,400 --> 01:38:43,700
Right?

1628
01:38:43,700 --> 01:38:47,500
So when I come through here and I'm going to do work, it's only really

1629
01:38:47,500 --> 01:38:48,000
in here.

1630
01:38:48,000 --> 01:38:53,300
I guess the that anything would actually be be getting used for the

1631
01:38:53,300 --> 01:38:56,400
arena, in fact, now that I look at it, is that anything even being

1632
01:38:56,400 --> 01:38:57,200
used there?

1633
01:39:05,100 --> 01:39:07,700
So I guess even the thing that I was going to say about why you might

1634
01:39:07,700 --> 01:39:08,200
want a little bit.

1635
01:39:08,200 --> 01:39:11,600
This doesn't even that doesn't really seem to be true.

1636
01:39:12,200 --> 01:39:16,700
So yeah, if you look at what's happening here really this is just not

1637
01:39:16,700 --> 01:39:21,700
necessary like why are these things that this is just not the way to

1638
01:39:21,700 --> 01:39:22,200
do these.

1639
01:39:23,500 --> 01:39:24,000
Okay.

1640
01:39:25,700 --> 01:39:30,400
So I need to I think I need to take a brief moment and explain why I

1641
01:39:30,400 --> 01:39:32,500
don't think that's a very constructive.

1642
01:39:33,500 --> 01:39:34,900
A to structure that.

1643
01:39:34,900 --> 01:39:39,600
So let's go ahead and go to Milton here and, and see if we can't

1644
01:39:43,700 --> 01:39:44,700
See if we can't.

1645
01:39:46,200 --> 01:39:47,100
Get this going.

1646
01:39:47,800 --> 01:39:48,300
Let's go.

1647
01:39:51,300 --> 01:39:52,000
Milton.

1648
01:39:57,700 --> 01:40:00,200
I think we don't have a working Milton with the hardware vendor,

1649
01:40:00,200 --> 01:40:00,400
right?

1650
01:40:00,400 --> 01:40:01,400
Yeah, so we're on this one.

1651
01:40:02,300 --> 01:40:08,000
Okay, so let me talk for a second about what I mean here and and

1652
01:40:14,600 --> 01:40:15,200
And we'll see.

1653
01:40:16,500 --> 01:40:17,400
I also don't know.

1654
01:40:17,600 --> 01:40:18,300
Are we actually?

1655
01:40:18,300 --> 01:40:20,000
So I don't know if we're getting any.

1656
01:40:22,500 --> 01:40:23,200
Tablet stuff.

1657
01:40:23,200 --> 01:40:26,500
Here are we looks like good pain.

1658
01:40:26,500 --> 01:40:31,100
Also, the tablets working now is Milton able to recognize the tablet.

1659
01:40:31,100 --> 01:40:31,900
I'm not sure.

1660
01:40:36,400 --> 01:40:37,500
But hopefully, yes.

1661
01:40:38,900 --> 01:40:39,400
There we go.

1662
01:40:40,100 --> 01:40:43,600
Okay, because we were having problems, my tablet, kind of conked out,

1663
01:40:43,600 --> 01:40:44,400
but now it's fine.

1664
01:40:45,000 --> 01:40:46,300
All right, pretend that's not there.

1665
01:40:47,800 --> 01:40:50,200
Forget day, 351.

1666
01:40:51,600 --> 01:40:57,300
Right, okay, so let's talk about memory.

1667
01:40:59,100 --> 01:41:00,500
And multiple.

1668
01:41:02,300 --> 01:41:03,000
Threads.

1669
01:41:05,800 --> 01:41:08,900
So, if you look at the way that we're doing it right now, in terms of

1670
01:41:08,900 --> 01:41:14,900
memory and threading, there's kind of two ways you can look at how

1671
01:41:14,900 --> 01:41:18,800
memory travels through threaded code, right.

1672
01:41:19,900 --> 01:41:24,200
And what I want to do is kind of encourage you to think about to sort

1673
01:41:24,200 --> 01:41:27,300
of separate axes that are sort of Happening Here.

1674
01:41:28,300 --> 01:41:31,100
One is like the task, right?

1675
01:41:31,600 --> 01:41:35,000
So, we may have tasks like, a bee.

1676
01:41:36,400 --> 01:41:37,000
See.

1677
01:41:38,700 --> 01:41:39,800
D, right?

1678
01:41:41,500 --> 01:41:44,800
And these are actually things that get queued up and there can be any

1679
01:41:44,800 --> 01:41:46,100
number of these, right?

1680
01:41:46,200 --> 01:41:50,100
There's an arbitrary number of tasks that can queued up and then

1681
01:41:50,100 --> 01:41:51,600
there's threads right?

1682
01:41:51,600 --> 01:41:55,000
There's thread 0, 1 2 3, right?

1683
01:41:55,600 --> 01:41:59,800
And here, there are as many as there are cores, really logical cores.

1684
01:42:01,200 --> 01:42:04,600
We don't really want to make lots of threads that are not

1685
01:42:04,600 --> 01:42:06,000
corresponding to anything physical.

1686
01:42:06,000 --> 01:42:08,800
We want to roughly have the same number of threads as we have physical

1687
01:42:08,800 --> 01:42:10,800
course to have a logical course to do work.

1688
01:42:13,300 --> 01:42:16,300
And so we have some number of these and it is not arbitrary.

1689
01:42:16,300 --> 01:42:18,800
It is not based on the amount of work it's based on the number of

1690
01:42:18,800 --> 01:42:20,000
workers, right?

1691
01:42:20,100 --> 01:42:24,400
So this is based on like work and this is based on workers.

1692
01:42:27,400 --> 01:42:31,300
Now, Memory for these two sets of things,

1693
01:42:32,500 --> 01:42:36,400
Is exactly the same sort of thing, right?

1694
01:42:36,800 --> 01:42:38,100
There's memory.

1695
01:42:38,600 --> 01:42:42,900
That might be used Briella relative to the work that's being done for

1696
01:42:42,900 --> 01:42:44,200
the lifetime of the work.

1697
01:42:45,200 --> 01:42:49,500
And then there's memory that might be used relevant to the lifetime of

1698
01:42:49,500 --> 01:42:50,200
the worker.

1699
01:42:51,200 --> 01:42:51,600
Okay?

1700
01:42:52,500 --> 01:42:55,500
So for example, scratch memory

1701
01:42:57,600 --> 01:43:03,900
Meaning memory that is only used during computation is really just

1702
01:43:03,900 --> 01:43:05,800
memory, that's proportional to the worker.

1703
01:43:06,300 --> 01:43:10,200
Each thread needs its own scratch memory for doing work, but that

1704
01:43:10,200 --> 01:43:14,800
memory doesn't need to persist outside of the thread having done that

1705
01:43:14,800 --> 01:43:15,900
work, right?

1706
01:43:16,100 --> 01:43:21,500
So, let's say that task a has three parts to it, right?

1707
01:43:23,600 --> 01:43:24,700
There's the setup.

1708
01:43:26,000 --> 01:43:28,400
There's the work and there's the completion.

1709
01:43:30,400 --> 01:43:31,000
Right?

1710
01:43:31,400 --> 01:43:35,800
And this part right here is done by the main thread, right?

1711
01:43:35,800 --> 01:43:39,200
The thread that's actually creating these tasks to do, is the one

1712
01:43:39,200 --> 01:43:40,200
that's doing the setup.

1713
01:43:40,400 --> 01:43:43,800
The work is being done by one of these worker threads, right?

1714
01:43:43,800 --> 01:43:45,100
Maybe it's happening up here.

1715
01:43:45,500 --> 01:43:46,900
So here's the work, right?

1716
01:43:48,900 --> 01:43:52,100
And maybe the main thread or something did the setup there's a setup.

1717
01:43:53,500 --> 01:43:57,600
And then the completion is maybe picked up somewhere else by the main

1718
01:43:57,600 --> 01:43:59,000
thread, right?

1719
01:43:59,800 --> 01:44:02,500
And the main thread during this time would be doing other things.

1720
01:44:02,800 --> 01:44:05,200
So we come through here, we do some setup work.

1721
01:44:05,300 --> 01:44:10,500
We now have the work, is queued eventually some other core picks up

1722
01:44:10,500 --> 01:44:13,300
the work and does the work and then later we look and find that the

1723
01:44:13,300 --> 01:44:15,500
work has been done, right?

1724
01:44:16,900 --> 01:44:23,200
So if we only need memory during this work part and we don't eat it to

1725
01:44:23,200 --> 01:44:26,400
persist from set up through work and into completion.

1726
01:44:27,200 --> 01:44:29,600
Then really, what we want is scratch memory.

1727
01:44:29,800 --> 01:44:33,800
We just want memory that we use just for a given thread and each of

1728
01:44:33,800 --> 01:44:36,700
these threads can have its own scratch memory, and they never need to

1729
01:44:36,700 --> 01:44:38,500
talk to each other, right?

1730
01:44:39,600 --> 01:44:43,200
On the other hand, if we do have memory that needs to flow this way,

1731
01:44:43,400 --> 01:44:46,400
it needs to be there for set up there for work and therefore

1732
01:44:46,400 --> 01:44:52,100
completion then we have task oriented or work oriented memory and that

1733
01:44:52,100 --> 01:44:53,500
needs to be managed for task.

1734
01:44:54,300 --> 01:44:59,100
So what we're doing right now is we're doing memory per task, right?

1735
01:45:07,500 --> 01:45:10,200
You can see that we have some number of tasks that we allow here.

1736
01:45:10,200 --> 01:45:13,400
Each one of these tasks has an arena and the memory for that task

1737
01:45:13,400 --> 01:45:14,400
comes from that Arena.

1738
01:45:15,200 --> 01:45:19,100
That makes a lot of sense, if we're actually doing something that

1739
01:45:19,100 --> 01:45:20,000
looks that way.

1740
01:45:20,600 --> 01:45:22,800
But at the moment, we're not even doing anything that looks that way.

1741
01:45:23,800 --> 01:45:26,300
So, that raises the question of do we want to keep doing this or

1742
01:45:26,300 --> 01:45:26,900
don't?

1743
01:45:27,400 --> 01:45:31,500
There's a certain flexibility that comes with having each task habits

1744
01:45:31,500 --> 01:45:31,900
or memory.

1745
01:45:31,900 --> 01:45:32,500
Certainly.

1746
01:45:33,500 --> 01:45:35,900
So it's not a given that we shouldn't keep it that way.

1747
01:45:37,200 --> 01:45:40,500
But what I will say is even if we wanted to keep it that way, it does

1748
01:45:40,500 --> 01:45:43,100
seem like a poor choice to have it.

1749
01:45:43,100 --> 01:45:45,700
Be some kind of a locked block set of structures.

1750
01:45:46,000 --> 01:45:49,800
We probably want to allow us to create as many of them as we want to

1751
01:45:50,200 --> 01:45:50,700
write.

1752
01:45:51,200 --> 01:45:55,600
That's probably my best, guess there, or at least, have it be

1753
01:45:55,600 --> 01:45:58,500
proportional to the number of things we actually expect to Q in

1754
01:45:58,500 --> 01:46:00,300
practice, right?

1755
01:46:03,900 --> 01:46:08,800
So yeah, so that to me is kind of a little bit of a red flag there,

1756
01:46:08,800 --> 01:46:09,500
right?

1757
01:46:12,100 --> 01:46:17,400
And it just seems like something where I probably don't want to be

1758
01:46:17,400 --> 01:46:21,600
using that kind of a system in cases where I don't want to do that,

1759
01:46:22,100 --> 01:46:24,100
whether I should remove it from the asset system.

1760
01:46:24,100 --> 01:46:25,000
I'm not sure yet.

1761
01:46:25,000 --> 01:46:28,200
It looks like I probably should because it really just doesn't look

1762
01:46:28,200 --> 01:46:29,100
relevant.

1763
01:46:29,400 --> 01:46:31,900
But what's definitely true is I don't think I would want to do it

1764
01:46:31,900 --> 01:46:32,400
here.

1765
01:46:32,900 --> 01:46:37,100
So probably what I want to do here is I would want to have my memory

1766
01:46:37,100 --> 01:46:41,800
Arena exist only for the lifetime of the work, right?

1767
01:46:42,900 --> 01:46:45,900
and so what I'd probably want to do here is say something like

1768
01:46:49,500 --> 01:46:50,400
Where is it?

1769
01:46:51,500 --> 01:46:51,900
Here.

1770
01:46:54,700 --> 01:46:58,900
I would probably want to say, hey, let's make a memory Arena.

1771
01:47:01,600 --> 01:47:03,800
And then, when we're done, we'll just eliminate the whole memory

1772
01:47:03,800 --> 01:47:04,200
Arena.

1773
01:47:04,800 --> 01:47:09,800
So that way it doesn't, it's, you know, the memory itself is coming

1774
01:47:09,800 --> 01:47:14,900
totally from inside this safe area, right?

1775
01:47:15,500 --> 01:47:20,800
It, you know, it doesn't have to do, it doesn't have to do anything

1776
01:47:20,800 --> 01:47:23,000
else, it doesn't have to talk to anyone.

1777
01:47:23,000 --> 01:47:28,500
It's like just coming from its own entirely isolated Arena and it will

1778
01:47:28,500 --> 01:47:31,000
do allocation as

1779
01:47:31,300 --> 01:47:32,100
Sorry to get there.

1780
01:47:32,600 --> 01:47:34,200
Now I'm going to put it to do here.

1781
01:47:46,600 --> 01:47:53,600
And what I mean by this comment or to do I should say is that we don't

1782
01:47:53,600 --> 01:47:57,400
actually want to allocate new memory blocks every time every time we

1783
01:47:57,400 --> 01:47:58,300
would open up a world.

1784
01:47:58,300 --> 01:47:59,800
Same here using this threaded.

1785
01:48:00,000 --> 01:48:04,600
Third, we will have to call the operating system to do a virtual

1786
01:48:04,600 --> 01:48:08,000
allocation to get us a block of memory to work with and then at the

1787
01:48:08,000 --> 01:48:09,400
end we'll have to re-release it.

1788
01:48:09,600 --> 01:48:11,000
There's no reason to do that.

1789
01:48:11,000 --> 01:48:12,800
We might as well have each worker thread.

1790
01:48:12,800 --> 01:48:16,500
Just have a block that it's virtually out from and then have the

1791
01:48:16,500 --> 01:48:19,400
arena, just use that block and only if we overflow the block, would we

1792
01:48:19,400 --> 01:48:20,600
ever have to call anything else?

1793
01:48:21,700 --> 01:48:25,000
So probably we want each worker thread to just have an arena uses for

1794
01:48:25,000 --> 01:48:26,900
Scratch space and would pass it in.

1795
01:48:27,100 --> 01:48:29,600
That's a much more efficient way to do this and it's something that we

1796
01:48:29,600 --> 01:48:29,900
should probably.

1797
01:48:30,000 --> 01:48:32,400
Really do after we finish what we're doing right now.

1798
01:48:34,500 --> 01:48:40,800
So inside do World Sim, you can see that we can now sort of work on

1799
01:48:40,800 --> 01:48:44,600
the rest of the part that we care about here during tiled render work

1800
01:48:44,600 --> 01:48:46,400
here where we're doing this.

1801
01:48:49,100 --> 01:48:50,500
This call to get the data out.

1802
01:48:50,500 --> 01:48:54,000
We want to do is replace that with our own sort of description of

1803
01:48:54,000 --> 01:48:54,300
work.

1804
01:48:54,300 --> 01:48:55,300
That makes sense for this.

1805
01:48:55,500 --> 01:48:57,800
So this is like World some work or whatever.

1806
01:48:58,600 --> 01:49:01,400
So we have this concept of world, some work, that's going to be the

1807
01:49:01,400 --> 01:49:05,800
struct that we need to create in order to create a work order for this

1808
01:49:05,800 --> 01:49:06,600
kind of operation.

1809
01:49:06,800 --> 01:49:10,500
We know that we need the bounds of the simulation so where it is going

1810
01:49:10,500 --> 01:49:14,500
to simulate, we know that we need the world mode structure, right?

1811
01:49:17,800 --> 01:49:21,600
Corporal, what is it game mode world?

1812
01:49:24,100 --> 01:49:25,600
We know that we need the DT.

1813
01:49:29,800 --> 01:49:32,600
And yeah, I guess we get the moment.

1814
01:49:32,600 --> 01:49:33,900
We still need the game State as well.

1815
01:49:34,900 --> 01:49:37,100
And again, some of these things, I think we can start to get rid of

1816
01:49:38,200 --> 01:49:40,700
but if we look at what happens there, now we can sort of say like okay

1817
01:49:43,300 --> 01:49:49,100
we know we can get the world mode and the Sim bounds and the DT out of

1818
01:49:49,100 --> 01:49:50,300
the work order.

1819
01:49:51,400 --> 01:49:52,100
So we will

1820
01:49:57,900 --> 01:49:59,600
That allows us to call this properly.

1821
01:50:00,500 --> 01:50:00,900
Oops.

1822
01:50:03,100 --> 01:50:03,900
Nice typing there.

1823
01:50:06,700 --> 01:50:11,300
Hand is tired and then game state.

1824
01:50:15,700 --> 01:50:17,400
And that gives us all the stuff that we need.

1825
01:50:17,400 --> 01:50:23,900
So now when we call one of these weeps, we know that we can

1826
01:50:23,900 --> 01:50:27,000
encapsulate all the stuff that we need into one of these work orders

1827
01:50:27,100 --> 01:50:28,700
so that that's all it needs to do.

1828
01:50:28,700 --> 01:50:30,700
One of its World simulation steps.

1829
01:50:31,500 --> 01:50:35,400
So if I want to kick one of these off, now, I can do it the exact same

1830
01:50:35,400 --> 01:50:38,200
way that we were doing it inside the renderer.

1831
01:50:38,300 --> 01:50:40,700
So you can see here, how we do it.

1832
01:50:40,800 --> 01:50:44,200
We create one of these work orders, right?

1833
01:50:48,500 --> 01:50:49,700
And then we kick it off.

1834
01:50:50,300 --> 01:50:53,400
So, if we want to do this in the update and render World call, where

1835
01:50:53,400 --> 01:50:58,100
we want to do a bunch of simulations here, let's say right here, what

1836
01:50:58,100 --> 01:50:59,700
we can do is do a for I

1837
01:51:01,000 --> 01:51:02,800
And do things exactly the same way.

1838
01:51:04,200 --> 01:51:06,500
We don't really know at this point because we're kind of making this

1839
01:51:06,500 --> 01:51:10,500
up as we go along since we don't really have the need to simulate

1840
01:51:10,500 --> 01:51:11,700
other parts of the world right now.

1841
01:51:12,000 --> 01:51:16,100
But let's suppose that we did have some idea of how many of these

1842
01:51:16,100 --> 01:51:17,200
things there were going to be.

1843
01:51:17,600 --> 01:51:23,100
So we would say something like okay there's the world Sim work and

1844
01:51:23,100 --> 01:51:29,900
these are like the some number of them 16 parts of the world that

1845
01:51:30,100 --> 01:51:36,000
Not simulation, let's say and then we can say, Okay, Sim index equals

1846
01:51:36,000 --> 01:51:36,400
zero.

1847
01:51:36,400 --> 01:51:39,700
Some index is less than however, many of these things we wanted to do.

1848
01:51:41,800 --> 01:51:47,000
You know, we increment it and then we fill out the structure that we

1849
01:51:47,000 --> 01:51:48,200
were trying to fill out.

1850
01:51:48,200 --> 01:51:52,600
Now notice, this is, you know, exactly analogous.

1851
01:51:52,900 --> 01:51:55,200
It's literally a tiled renderer for the world.

1852
01:51:55,200 --> 01:51:57,900
It's up to set of rendering, we're simulating, right?

1853
01:51:57,900 --> 01:51:58,800
That's all we're doing.

1854
01:52:01,400 --> 01:52:06,200
And so in order to do that, what we need is some way here of going

1855
01:52:06,200 --> 01:52:07,000
like okay,

1856
01:52:09,300 --> 01:52:12,300
We need to know where we're sort of going to say that this happens.

1857
01:52:12,300 --> 01:52:15,100
Let me go ahead and pull our work order out to the H file, so it's a

1858
01:52:15,100 --> 01:52:17,600
little easier for me to look at.

1859
01:52:17,600 --> 01:52:18,200
There it is.

1860
01:52:20,200 --> 01:52:22,900
So, I know I have to set the Sim bounds, I need to say like, here's

1861
01:52:22,900 --> 01:52:24,900
one, here's a place that you're going to simulate.

1862
01:52:25,300 --> 01:52:30,100
I know, I need to sort of pass in the parameters that it's going to

1863
01:52:30,100 --> 01:52:31,200
need to operate.

1864
01:52:33,600 --> 01:52:37,200
But other than that, I'm pretty good to go, right?

1865
01:52:37,400 --> 01:52:40,900
And then just like before I'm going to do exactly the same thing where

1866
01:52:40,900 --> 01:52:47,000
we do add entry in the multi-threaded path and this is going to be do

1867
01:52:47,000 --> 01:52:49,300
Sim or whoops assembled work.

1868
01:52:50,900 --> 01:52:51,700
I don't know what I called.

1869
01:52:51,700 --> 01:52:52,500
That forgot.

1870
01:52:52,500 --> 01:52:53,300
Do World Sim.

1871
01:52:59,000 --> 01:53:01,200
And then the other case, we're just going to actually call it

1872
01:53:01,200 --> 01:53:01,800
directly.

1873
01:53:03,500 --> 01:53:11,100
Right now, we need a cue for this to happen on and I believe we have

1874
01:53:11,400 --> 01:53:14,800
that already in the in the transient State.

1875
01:53:14,800 --> 01:53:16,800
It's just the high priority queue because this is the work.

1876
01:53:16,800 --> 01:53:18,000
That happens immediately.

1877
01:53:20,400 --> 01:53:22,500
so, all we really have to do here is just

1878
01:53:25,900 --> 01:53:26,600
Let It Go.

1879
01:53:29,900 --> 01:53:34,900
Okay, so in terms of where we're going to have the world Sim simulate,

1880
01:53:35,000 --> 01:53:39,200
it doesn't really matter where we have this done, because we're just

1881
01:53:39,200 --> 01:53:44,300
doing the simulation as a test, but we needed to be in different

1882
01:53:44,300 --> 01:53:45,000
places.

1883
01:53:45,600 --> 01:53:51,100
So, in order for this to make sense, I need just some

1884
01:53:52,200 --> 01:53:57,000
Notion of how to displace these Sim bonds and so much.

1885
01:53:57,000 --> 01:53:59,800
Like we were doing before I probably just need

1886
01:54:00,500 --> 01:54:07,300
You know, pick random places displaced from where the camera is to do

1887
01:54:07,300 --> 01:54:08,200
the simulation.

1888
01:54:08,500 --> 01:54:12,500
So, what I could do here is I could say something like this.

1889
01:54:20,000 --> 01:54:21,800
And then I could do another one I could do.

1890
01:54:21,800 --> 01:54:29,000
Like I said kind of a literally tiled render thing like so,

1891
01:54:34,800 --> 01:54:39,900
And you know, in this case, let's just say that we were going to do

1892
01:54:39,900 --> 01:54:45,500
simulation of the world, sort of Mana, no offset from the camera a

1893
01:54:45,500 --> 01:54:45,900
little bit.

1894
01:54:45,900 --> 01:54:52,000
So we just say, like offset x equals whatever the sin x is.

1895
01:54:52,000 --> 01:54:56,400
And like we just need some way of kind of displacing these things

1896
01:54:56,400 --> 01:54:57,100
around.

1897
01:54:57,400 --> 01:55:03,700
And so, I don't really remember what sorts of displacement we used for

1898
01:55:03,700 --> 01:55:03,900
the

1899
01:55:04,200 --> 01:55:07,100
Original sin bounds here, but let's say that we're just going to just

1900
01:55:07,100 --> 01:55:12,300
place it by maybe a hundred each time or something like that.

1901
01:55:12,800 --> 01:55:15,200
So we could just say, like times 100f

1902
01:55:28,200 --> 01:55:29,700
And leave it at that.

1903
01:55:31,400 --> 01:55:35,700
so that's our displacement that we would use and that way, we could

1904
01:55:35,700 --> 01:55:37,200
say, like offset,

1905
01:55:38,600 --> 01:55:40,500
Really remember exactly how this works.

1906
01:55:40,500 --> 01:55:42,800
But also at the same bounds

1907
01:55:44,500 --> 01:55:44,800
Here.

1908
01:55:53,100 --> 01:55:54,900
And I just, I guess I just passed that in.

1909
01:56:00,200 --> 01:56:02,300
So that just gives me some rectangle to simulate.

1910
01:56:02,300 --> 01:56:05,300
That's not the main one that we're looking at, right?

1911
01:56:06,800 --> 01:56:11,100
And that's really all I have to do to set up this thing in exactly the

1912
01:56:11,100 --> 01:56:12,900
same way as the previous render.

1913
01:56:13,700 --> 01:56:16,400
And now we should be calling that function a ton of times.

1914
01:56:16,600 --> 01:56:22,000
That of course, we should hit our profile really heavily and you can

1915
01:56:22,000 --> 01:56:24,300
kind of see like just a lot of

1916
01:56:28,900 --> 01:56:33,300
A lot of debug events basically being generated by that is mostly what

1917
01:56:33,300 --> 01:56:35,100
we're spending our time on.

1918
01:56:35,500 --> 01:56:40,400
But now we're actually sort of simulating, all of those right now.

1919
01:56:40,400 --> 01:56:44,500
Unfortunately, we can't see any of them simulate which is unfortunate,

1920
01:56:44,900 --> 01:56:47,900
because if we come out here, none of them are going to be rendering.

1921
01:56:47,900 --> 01:56:49,300
That's intentional, right?

1922
01:56:50,700 --> 01:56:56,100
So we might have to add some calls to actually do rendering of these

1923
01:56:56,100 --> 01:56:56,500
things.

1924
01:56:56,700 --> 01:56:59,900
in order to validate that they're actually being stimulated by

1925
01:57:00,000 --> 01:57:03,300
At least we now know that, you know, we're roughly sort of calling

1926
01:57:03,300 --> 01:57:03,800
through here.

1927
01:57:05,000 --> 01:57:08,900
So, when we do this simulation, I guess our world doesn't really

1928
01:57:08,900 --> 01:57:10,200
extend in this direction either.

1929
01:57:10,200 --> 01:57:15,100
So I do wonder if maybe maybe this would be smarter, that should also

1930
01:57:15,800 --> 01:57:20,300
make it take a lot more time because we now should be actually hitting

1931
01:57:20,300 --> 01:57:20,800
some.

1932
01:57:20,800 --> 01:57:25,000
Yeah, we should be hitting, more parts of the world that actually do

1933
01:57:25,000 --> 01:57:26,400
stuff, right?

1934
01:57:27,100 --> 01:57:29,800
And you can see like a lot of these these calls now occurring.

1935
01:57:30,000 --> 01:57:30,000
Ng.

1936
01:57:31,500 --> 01:57:35,200
All right, so we're still calling this in a single threaded fashion,

1937
01:57:35,200 --> 01:57:35,400
right?

1938
01:57:35,400 --> 01:57:40,000
I have this if zero going here but all it takes for me to Now call

1939
01:57:40,000 --> 01:57:45,300
this in a multi-threaded fashion is to change that to and if one right

1940
01:57:45,500 --> 01:57:49,300
and what on Earth did I just do,

1941
01:57:51,200 --> 01:57:53,200
Oh, there we go.

1942
01:57:53,300 --> 01:57:53,700
Like that.

1943
01:57:53,700 --> 01:57:55,000
And it was in the wrong place.

1944
01:57:55,400 --> 01:57:55,600
All right.

1945
01:57:55,600 --> 01:57:56,100
There we go.

1946
01:57:57,600 --> 01:58:01,300
And now, we will actually have multiple threads doing the simulation

1947
01:58:01,300 --> 01:58:02,100
of the same time.

1948
01:58:02,400 --> 01:58:04,200
It's not going to work correctly.

1949
01:58:05,000 --> 01:58:08,200
For some reasons that you'll see in a second but we've at least set up

1950
01:58:08,200 --> 01:58:09,200
a structure properly.

1951
01:58:11,100 --> 01:58:15,100
So, first question is, well why doesn't it work?

1952
01:58:15,800 --> 01:58:18,100
The reason is because now we have multiple

1953
01:58:19,800 --> 01:58:25,500
We have multiple threads working on the world Sim, but some of those

1954
01:58:25,600 --> 01:58:29,400
data structures that they use are shared, right?

1955
01:58:29,700 --> 01:58:32,300
And when you have multiple threads working on the shared data

1956
01:58:32,300 --> 01:58:36,100
structures, you cannot just let them do their thing.

1957
01:58:36,800 --> 01:58:39,800
Even if the language that you're using or the system that you are

1958
01:58:39,800 --> 01:58:45,200
using, has locking built into it for you at the lower level.

1959
01:58:46,300 --> 01:58:49,200
You're not going to guarantee that your operations are doing the

1960
01:58:49,200 --> 01:58:49,500
correct.

1961
01:58:49,600 --> 01:58:53,600
Thing, if you haven't thought through how those threads actually need

1962
01:58:53,600 --> 01:58:57,500
to interact and since we're running low level code here, we'll just

1963
01:58:57,500 --> 01:58:58,500
get straight up crashes.

1964
01:58:58,500 --> 01:59:02,600
If we don't do something smart about, making sure that our code thinks

1965
01:59:02,600 --> 01:59:03,900
about who's doing what?

1966
01:59:04,100 --> 01:59:04,600
And when

1967
01:59:06,800 --> 01:59:07,300
All right.

1968
01:59:08,500 --> 01:59:13,100
So let's start with some of the basics if I was to go over to the same

1969
01:59:13,100 --> 01:59:17,300
region code, hopefully you can see that it's already set up in a good

1970
01:59:17,300 --> 01:59:19,900
way for actually doing the right thing here.

1971
01:59:20,400 --> 01:59:24,600
The way that it works you can kind of see is it goes through the world

1972
01:59:24,600 --> 01:59:28,300
and it unpacks all the entities into its own working set.

1973
01:59:28,700 --> 01:59:31,300
Then it will do a bunch of work on them and then it will pack them

1974
01:59:31,300 --> 01:59:32,700
back, right?

1975
01:59:33,600 --> 01:59:36,600
the nice part about this, is, it means that the place where we

1976
01:59:36,600 --> 01:59:37,800
actually are

1977
01:59:40,300 --> 01:59:43,600
Sort of working with the shared data structure that is the world is

1978
01:59:43,600 --> 01:59:47,000
isolated to the pack and unpack steps, right?

1979
01:59:47,200 --> 01:59:53,200
So we don't actually need to talk to anyone else during the actual

1980
01:59:53,200 --> 01:59:53,900
simulation.

1981
01:59:54,200 --> 01:59:58,000
So, during the pack and unpack we do during the simulation we don't,

1982
01:59:58,700 --> 01:59:59,100
okay?

1983
02:00:00,700 --> 02:00:04,800
Because the world data structure is shared all of the simulation stuff

1984
02:00:04,800 --> 02:00:08,000
needs to unpack from the world and then pack into the world.

1985
02:00:08,400 --> 02:00:12,200
And so we need to make sure that they synchronize their doing of this.

1986
02:00:12,400 --> 02:00:15,100
But once everything is unpacked, we should be even in a situation

1987
02:00:15,100 --> 02:00:19,400
where all the simulation just happens internal to that system.

1988
02:00:21,400 --> 02:00:21,700
All right.

1989
02:00:21,700 --> 02:00:24,000
So there's some things I want to look at first.

1990
02:00:25,600 --> 02:00:28,900
So what I want to do first is I want to take a look at our simulation

1991
02:00:28,900 --> 02:00:29,300
call.

1992
02:00:30,100 --> 02:00:35,900
I want to know why our simulation call requires the world mode, right?

1993
02:00:36,500 --> 02:00:37,900
I want to know for example.

1994
02:00:37,900 --> 02:00:39,700
What in brains requires it?

1995
02:00:41,300 --> 02:00:44,600
Like what are we doing with the world mode and and why?

1996
02:00:44,900 --> 02:00:45,400
Okay,

1997
02:00:47,300 --> 02:00:51,500
So what you can see, here is the only reason that were passing the

1998
02:00:51,500 --> 02:00:56,800
world Mill mode at all is because we want a source of entropy, right.

1999
02:00:57,300 --> 02:01:02,800
We want something in the system that gives us a random number source

2000
02:01:02,900 --> 02:01:11,400
that we can use to progress now, I don't really care about that.

2001
02:01:11,600 --> 02:01:16,400
Random number being synchronized across threads, all the threads,

2002
02:01:16,500 --> 02:01:19,800
Could use their own random number generator and that's just fine with

2003
02:01:19,800 --> 02:01:20,200
me.

2004
02:01:21,200 --> 02:01:24,600
So what that means to me is that really this world mode is probably

2005
02:01:24,600 --> 02:01:28,600
not a good thing to pass to execute.

2006
02:01:28,600 --> 02:01:29,100
Brain.

2007
02:01:29,200 --> 02:01:32,900
Really just the source of entropy should be past execute brain, and

2008
02:01:32,900 --> 02:01:36,600
then we can break that out and not worry about that structure in terms

2009
02:01:36,600 --> 02:01:42,000
of having to lock it across access or us, right?

2010
02:01:43,900 --> 02:01:45,300
So let's put that

2011
02:01:46,400 --> 02:01:49,300
like on the list just for second mentally and then the other thing I

2012
02:01:49,300 --> 02:01:53,200
want to do is now I want to see why was World mode getting past here

2013
02:01:53,500 --> 02:01:57,800
right to update and render entities so you can see that it's accessing

2014
02:01:57,800 --> 02:01:58,900
some kind of constants.

2015
02:01:58,900 --> 02:02:00,700
It's accessing the particle cash.

2016
02:02:07,500 --> 02:02:11,500
And then it's used in move entity, which I don't actually know.

2017
02:02:13,900 --> 02:02:14,400
Why?

2018
02:02:15,800 --> 02:02:17,400
So, here we are in world move in.

2019
02:02:17,500 --> 02:02:20,000
Move entity looking at World mode.

2020
02:02:21,700 --> 02:02:27,100
Ah, and so it looks like the only thing that that's used for is sort

2021
02:02:27,100 --> 02:02:30,500
of the per entity Collision suppression, right?

2022
02:02:30,900 --> 02:02:35,100
You can see that that's there's this sort of like Collision rule.

2023
02:02:35,100 --> 02:02:40,100
Hash thing that's being used to look stuff up and the can Collide is

2024
02:02:43,200 --> 02:02:45,500
That's where that's coming from, right?

2025
02:02:47,300 --> 02:02:47,900
So

2026
02:02:51,500 --> 02:02:54,000
we don't really need that hash anymore.

2027
02:02:54,100 --> 02:02:58,900
I don't even know if we're using that hash anymore and there's a good

2028
02:02:58,900 --> 02:02:59,800
reason not to use it.

2029
02:03:00,000 --> 02:03:03,200
Which is that it does sort of lock people up if we have these pairwise

2030
02:03:03,200 --> 02:03:05,400
rules that can be changed over time.

2031
02:03:05,600 --> 02:03:10,300
So that does sort of give us a good reason to step away from that

2032
02:03:10,300 --> 02:03:11,900
which maybe we hadn't had before.

2033
02:03:12,800 --> 02:03:17,200
So let's take a look and just see what happens if we get rid of it.

2034
02:03:23,800 --> 02:03:25,000
as expected that

2035
02:03:28,100 --> 02:03:34,600
Sort of piece of code wants it, but add Collision rule is probably the

2036
02:03:34,600 --> 02:03:37,800
only thing that we really need to know about where our people calling

2037
02:03:38,200 --> 02:03:39,100
add Collision rule.

2038
02:03:44,000 --> 02:03:46,400
The answer is nobody is calling at questionable.

2039
02:03:47,600 --> 02:03:48,000
Good.

2040
02:03:49,500 --> 02:03:50,600
So let's get rid of it.

2041
02:03:53,700 --> 02:03:54,200
It's gone.

2042
02:04:06,500 --> 02:04:07,100
Oh God.

2043
02:04:13,700 --> 02:04:14,200
There we go.

2044
02:04:15,300 --> 02:04:19,900
And now that world mode simply doesn't have to be passed anymore to

2045
02:04:20,600 --> 02:04:21,500
the move entity.

2046
02:04:21,500 --> 02:04:23,000
Call it anyway.

2047
02:04:23,400 --> 02:04:27,800
So if I take a look at move entity here and I get rid of world mode, I

2048
02:04:27,800 --> 02:04:32,100
should be able to just eliminate it entirely because now can Collide

2049
02:04:32,100 --> 02:04:32,900
won't need it.

2050
02:04:37,800 --> 02:04:43,400
Because it can be done directly and presumably handle Collision, same

2051
02:04:43,400 --> 02:04:43,800
thing.

2052
02:04:52,200 --> 02:04:52,700
Okay.

2053
02:04:54,100 --> 02:04:54,700
So again

2054
02:04:56,400 --> 02:04:59,700
Getting better looking at here, we're just looking at, we're just

2055
02:04:59,700 --> 02:05:01,100
reading some of these out.

2056
02:05:01,400 --> 02:05:04,600
And so if you take a look at what we're looking at here, in terms of

2057
02:05:04,700 --> 02:05:07,000
meaningful changes, it's really the particle.

2058
02:05:07,000 --> 02:05:07,500
Cash.

2059
02:05:07,700 --> 02:05:08,600
That's important.

2060
02:05:08,700 --> 02:05:12,600
Typical floor, height is here for a number of reasons that probably

2061
02:05:12,900 --> 02:05:16,800
we, you know, are going to want to step away from a little bit and so

2062
02:05:16,800 --> 02:05:19,200
I'm okay with leaving that in temporarily but we can probably

2063
02:05:19,200 --> 02:05:23,100
eliminate World mode from this all together and that would be great.

2064
02:05:23,300 --> 02:05:26,100
And I think the thing that we can do here is just say

2065
02:05:26,200 --> 02:05:31,300
Let's go ahead and pass the particle cash in and then we can just say

2066
02:05:31,300 --> 02:05:39,200
when the particle cash is not set to anything, then we won't add

2067
02:05:39,200 --> 02:05:39,900
particles.

2068
02:05:40,300 --> 02:05:43,200
And so if I take a look at the particle code itself here, when we have

2069
02:05:43,200 --> 02:05:47,500
something like spawn fire, I'm just going to predicate these so that

2070
02:05:47,500 --> 02:05:51,500
they don't actually do anything when you pass in a null particle

2071
02:05:51,500 --> 02:05:52,000
system.

2072
02:05:52,500 --> 02:05:55,800
That way, we should be able to prevent that from happening entirely.

2073
02:05:56,300 --> 02:05:56,700
Right.

2074
02:05:59,200 --> 02:05:59,500
Okay.

2075
02:06:01,200 --> 02:06:06,400
So again getting closer getting much, much, much closer to what I want

2076
02:06:06,400 --> 02:06:07,100
this code to look.

2077
02:06:07,100 --> 02:06:10,700
Like it's little tiny baby steps, you know, always little tiny baby

2078
02:06:10,700 --> 02:06:14,300
steps and they, you know, are constantly trying to guide us towards

2079
02:06:15,400 --> 02:06:17,200
what we want, right?

2080
02:06:18,200 --> 02:06:20,700
So, it's just doesn't need World mode either.

2081
02:06:22,800 --> 02:06:26,700
So yeah, what we want to do here is just say alright update.

2082
02:06:27,400 --> 02:06:30,300
You know when we're doing our update here we want to pass in that

2083
02:06:30,300 --> 02:06:33,200
particle cash and

2084
02:06:37,400 --> 02:06:42,800
I guess I don't know why that gets passed to begin World change

2085
02:06:42,800 --> 02:06:43,400
either.

2086
02:06:43,400 --> 02:06:44,500
Let's take a look at that.

2087
02:06:54,200 --> 02:06:57,600
So that's a Vestige of when we used to unpack particle system so that

2088
02:06:57,600 --> 02:07:01,600
can get removed too which is great again keeps getting better and

2089
02:07:01,600 --> 02:07:02,000
better.

2090
02:07:08,000 --> 02:07:08,400
Oops.

2091
02:07:12,600 --> 02:07:13,100
We go.

2092
02:07:14,200 --> 02:07:18,500
So now we're just down to needing to pass the particle cash again in

2093
02:07:18,500 --> 02:07:19,000
here.

2094
02:07:19,500 --> 02:07:22,600
And when we're actually doing a simulate, that's actually something we

2095
02:07:22,600 --> 02:07:23,800
do want to pass in.

2096
02:07:25,000 --> 02:07:27,100
And so, I guess what I'd say there is again.

2097
02:07:27,100 --> 02:07:29,100
Let's just let's pass it in here.

2098
02:07:33,100 --> 02:07:34,300
Since it is optional.

2099
02:07:35,400 --> 02:07:36,400
Keep it down in here.

2100
02:07:45,400 --> 02:07:47,500
And I don't really remember where we pass the carrot boat.

2101
02:07:51,600 --> 02:07:54,000
So it's right before go.

2102
02:07:55,900 --> 02:07:57,400
And now we just have to pass it.

2103
02:07:57,400 --> 02:08:00,400
So, in here, we won't pass a particle, cash, right?

2104
02:08:00,400 --> 02:08:03,500
We're just not going to pass one because it's not going to get used.

2105
02:08:03,700 --> 02:08:05,400
And then in here, we will.

2106
02:08:10,600 --> 02:08:11,000
Right.

2107
02:08:13,300 --> 02:08:16,200
So in theory we should still be working properly and we still still

2108
02:08:16,200 --> 02:08:16,500
should be.

2109
02:08:16,500 --> 02:08:18,200
Oops I forgot.

2110
02:08:18,200 --> 02:08:23,000
I said sober working properly, what I meant was if we go to here.

2111
02:08:25,100 --> 02:08:28,600
And we should still be having particle spawned which we are, which is

2112
02:08:28,600 --> 02:08:29,800
good, right?

2113
02:08:31,000 --> 02:08:33,700
And so that's all well and good.

2114
02:08:34,300 --> 02:08:39,300
And so now we're just a little bit closer to having everything being

2115
02:08:40,400 --> 02:08:43,300
respectful of, you know, the data on either side.

2116
02:08:44,100 --> 02:08:44,500
Okay.

2117
02:08:45,000 --> 02:08:48,700
So jumping back here though to it where we have our like simulate

2118
02:08:48,700 --> 02:08:53,200
called, like I said, World mode is still getting passed around and it

2119
02:08:53,200 --> 02:08:53,900
really doesn't need to.

2120
02:08:54,200 --> 02:08:56,400
In a lot of situations, the floor.

2121
02:08:56,400 --> 02:08:57,900
Height needs to come through here.

2122
02:08:58,100 --> 02:08:59,800
But in execute brain, it really doesn't.

2123
02:09:00,200 --> 02:09:01,500
Need to have that happen.

2124
02:09:01,600 --> 02:09:04,700
So, at the very least inside execute bring, but I probably should do,

2125
02:09:05,300 --> 02:09:07,000
is pass a random series here.

2126
02:09:07,500 --> 02:09:08,600
That's like entropy

2127
02:09:10,900 --> 02:09:11,400
Right.

2128
02:09:12,000 --> 02:09:14,000
And this is where the entropy comes from.

2129
02:09:16,500 --> 02:09:20,500
For brain stimulation and it shouldn't really care where you got that

2130
02:09:20,500 --> 02:09:20,900
from.

2131
02:09:20,900 --> 02:09:23,200
Like maybe you wanted the entropy from somewhere.

2132
02:09:23,200 --> 02:09:24,700
Maybe you didn't, who cares?

2133
02:09:25,100 --> 02:09:30,200
That's just not that relevant and to the brain code, it just knows.

2134
02:09:30,200 --> 02:09:34,300
It needs a source of entropy and it wants you to provide one but it

2135
02:09:34,300 --> 02:09:37,200
shouldn't matter beyond that where it comes from.

2136
02:09:37,700 --> 02:09:43,500
So, when you call this, we can save game entropy here and then we're

2137
02:09:43,500 --> 02:09:44,100
good to go.

2138
02:09:44,700 --> 02:09:46,100
So, again, now, we've almost got

2139
02:09:46,300 --> 02:09:49,700
Rid of the world mode stuff entirely inside.

2140
02:09:50,000 --> 02:09:54,400
Handmade Loops inside handmade entity.

2141
02:09:54,900 --> 02:09:57,700
If we take a look at where that's being used, it's just the typical

2142
02:09:57,700 --> 02:09:58,300
floor height.

2143
02:09:58,300 --> 02:10:01,600
Now, that's ever actually getting used.

2144
02:10:02,100 --> 02:10:06,500
And so, we could even just for now just again, to sort of get us

2145
02:10:06,500 --> 02:10:11,400
closer to where we want to be say, all right, until we get rid of that

2146
02:10:11,400 --> 02:10:14,000
typical floor height, we're just going to pass in the typical fluoride

2147
02:10:14,000 --> 02:10:16,100
directly, right?

2148
02:10:16,600 --> 02:10:21,300
And it's not great because we probably want to systemically deal with

2149
02:10:21,300 --> 02:10:25,400
this in a much more logical way after we do the 3D move.

2150
02:10:25,900 --> 02:10:28,800
But for now whatever, right.

2151
02:10:33,100 --> 02:10:37,000
So now we're much much closer because now World mode is not really,

2152
02:10:37,000 --> 02:10:42,300
even getting used for the most part in here, it's really just a guide

2153
02:10:42,300 --> 02:10:42,900
guidance.

2154
02:10:42,900 --> 02:10:49,300
For a very small piece of information, like the entropy and the floor

2155
02:10:49,300 --> 02:10:50,400
height, it's only two things.

2156
02:10:50,400 --> 02:10:53,500
So we can will be able to pull those out really easily as we kind of

2157
02:10:53,500 --> 02:10:55,200
go further in.

2158
02:10:55,400 --> 02:10:56,500
But now, the question is well.

2159
02:10:56,500 --> 02:10:59,900
Okay, what about the other times when we were passing in this world

2160
02:10:59,900 --> 02:11:00,300
mode?

2161
02:11:00,800 --> 02:11:02,500
So, if you take a look at World mode here, right?

2162
02:11:02,500 --> 02:11:02,700
You can

2163
02:11:02,900 --> 02:11:06,800
The in this case, it's probably very necessary.

2164
02:11:07,200 --> 02:11:10,400
If we're talking about the the

2165
02:11:13,300 --> 02:11:15,200
The camera P situation.

2166
02:11:15,400 --> 02:11:17,800
And in fact, you can see here, we really want to abstract this part

2167
02:11:17,800 --> 02:11:19,400
out anyway, because the camera stuff.

2168
02:11:19,500 --> 02:11:23,900
So really this camera P stuff, we're probably going to have to deal

2169
02:11:23,900 --> 02:11:27,900
with outside of this anyway, because the camera piece only relevant to

2170
02:11:27,900 --> 02:11:31,400
one of the same regions so that we could probably pull out pretty

2171
02:11:31,400 --> 02:11:31,900
easily.

2172
02:11:32,300 --> 02:11:35,000
So, all I really need to look at here to keep going down.

2173
02:11:35,000 --> 02:11:38,100
This route of like, cleaning this stuff up in terms of what who needs

2174
02:11:38,100 --> 02:11:39,100
to access, what?

2175
02:11:41,700 --> 02:11:43,300
Is inside begin World change.

2176
02:11:43,300 --> 02:11:44,600
What do we actually loops?

2177
02:11:46,300 --> 02:11:48,100
What do we actually need the world mode for here?

2178
02:11:49,900 --> 02:11:50,400
Right?

2179
02:11:51,200 --> 02:11:54,700
And the answer appears to be like nothing if I just get rid of it,

2180
02:11:56,600 --> 02:11:57,600
it's not necessary.

2181
02:12:00,000 --> 02:12:01,100
Funny how that happens, right?

2182
02:12:01,100 --> 02:12:03,700
You end up seeing these things where you're like gee you know like I

2183
02:12:03,700 --> 02:12:06,600
was passing these things around because at one point I needed them but

2184
02:12:06,700 --> 02:12:10,500
as I start to like you know as this code starts to get bolt it down a

2185
02:12:10,500 --> 02:12:12,400
little bit more turns out their stuff getting passed around.

2186
02:12:12,400 --> 02:12:14,700
That just doesn't even get passed around anymore, right?

2187
02:12:15,000 --> 02:12:16,800
Yes this is simply not relevant.

2188
02:12:17,600 --> 02:12:20,500
So now we can see that world mode isn't really even used in here

2189
02:12:21,100 --> 02:12:25,600
because it's actually getting used for this sort of completely

2190
02:12:25,600 --> 02:12:27,700
ancillary purpose of like camera management.

2191
02:12:28,100 --> 02:12:29,800
So camera management kind of needs to be

2192
02:12:30,000 --> 02:12:33,500
He pulled out in a more coherent way there.

2193
02:12:33,500 --> 02:12:38,000
So we can avoid having this sort of false dependence on world mode

2194
02:12:38,000 --> 02:12:39,300
that we really didn't need.

2195
02:12:39,600 --> 02:12:41,700
And it's just because it happened to be convenient thing to do at the

2196
02:12:41,700 --> 02:12:42,200
time.

2197
02:12:43,500 --> 02:12:46,100
So let's take a look at what and Rural change needs here.

2198
02:12:47,100 --> 02:12:50,400
And it looks like World mode again.

2199
02:12:50,400 --> 02:12:52,200
Like you can kind of see what's going on here.

2200
02:12:52,500 --> 02:12:56,000
It's really, there's a lot of camera management happening.

2201
02:12:56,400 --> 02:12:58,100
Like all of the stuff for World mode.

2202
02:12:58,100 --> 02:13:00,100
Here is camera management, really?

2203
02:13:00,100 --> 02:13:03,900
It's just the world structure that this thing needs.

2204
02:13:06,400 --> 02:13:09,800
And the world mode is, is there really just for camera management,

2205
02:13:10,100 --> 02:13:10,600
right?

2206
02:13:14,700 --> 02:13:20,100
So that's again, really big red flag here for us, you know, I think

2207
02:13:20,100 --> 02:13:25,000
it's pretty clear that we kind of want to have a way of dealing with

2208
02:13:25,000 --> 02:13:25,500
the camera.

2209
02:13:25,500 --> 02:13:28,200
That makes more sense than what we're doing now.

2210
02:13:28,200 --> 02:13:32,300
Because as you can see, the only reason we have to pass that whole

2211
02:13:32,900 --> 02:13:36,300
world mode thing around is because we have on the entrance and the

2212
02:13:36,300 --> 02:13:40,500
exit stuff that deals with a camera that's not relevant for any other

2213
02:13:40,500 --> 02:13:42,100
part of the world that we're updating.

2214
02:13:42,700 --> 02:13:44,300
So the world in general, when it's updating

2215
02:13:44,500 --> 02:13:46,300
Doesn't need to know this stuff.

2216
02:13:46,600 --> 02:13:52,200
This is only specific to the very, very, very singular case where we

2217
02:13:52,200 --> 02:13:56,100
actually care about the camera being updated and there's only one time

2218
02:13:56,100 --> 02:13:58,200
that that actually happens, right?

2219
02:14:00,300 --> 02:14:06,500
All right, so let's go ahead and inside and real change here, I'm

2220
02:14:06,500 --> 02:14:10,400
going to start passing world to it, just because that way we can sort

2221
02:14:10,400 --> 02:14:12,400
of see that that's definitely happening.

2222
02:14:16,200 --> 02:14:17,000
Fix the other one.

2223
02:14:17,000 --> 02:14:18,800
Here we go.

2224
02:14:20,700 --> 02:14:24,200
And so, really, I think what we need to do now is figure out how to

2225
02:14:24,200 --> 02:14:28,600
make that camera handling be a little bit more reasonable, right?

2226
02:14:29,100 --> 02:14:33,600
And then we're sort of down to the, to the part where we were, this is

2227
02:14:33,600 --> 02:14:37,700
maybe starting to look like something that can be multi-threaded,

2228
02:14:37,700 --> 02:14:38,000
right?

2229
02:14:38,000 --> 02:14:41,400
That's not too much of a big deal to multi-thread.

2230
02:14:41,400 --> 02:14:44,800
We're starting to get to a sane place for it, right?

2231
02:14:46,000 --> 02:14:50,200
And really at that point, the only thing I think we're going to have

2232
02:14:50,200 --> 02:14:50,300
to

2233
02:14:50,500 --> 02:14:55,800
About is when we take a look at the same region stuff, we're probably

2234
02:14:55,800 --> 02:14:59,800
going to have to do a little bit of locking around that world.

2235
02:15:01,100 --> 02:15:01,800
Access.

2236
02:15:02,300 --> 02:15:02,900
Right.

2237
02:15:03,700 --> 02:15:08,200
So you know, begin Sim and end Sim when we do the unpacking the most

2238
02:15:08,700 --> 02:15:10,600
sort of straightforward way to do that.

2239
02:15:10,600 --> 02:15:12,900
Probably will be to.

2240
02:15:12,900 --> 02:15:13,400
Let's see.

2241
02:15:13,400 --> 02:15:14,000
Do we have?

2242
02:15:14,500 --> 02:15:14,800
Yeah.

2243
02:15:17,400 --> 02:15:21,700
The most simple way to do it at first would be to just do it this way

2244
02:15:21,700 --> 02:15:27,100
where since we know that these are the two things that actually

2245
02:15:27,200 --> 02:15:27,700
interact with.

2246
02:15:27,700 --> 02:15:31,100
The sure thing we could just lock around the entire beginning and Sim.

2247
02:15:31,900 --> 02:15:36,000
That's a little more coarse grained than we probably want to be in the

2248
02:15:36,000 --> 02:15:36,500
end.

2249
02:15:36,800 --> 02:15:41,800
So it's possible that we will want to lock the data more closely than

2250
02:15:41,800 --> 02:15:42,300
that.

2251
02:15:44,200 --> 02:15:45,100
And why do I say that?

2252
02:15:45,100 --> 02:15:46,400
Well, if

2253
02:15:46,500 --> 02:15:48,800
Take a look at what's actually happening.

2254
02:15:51,100 --> 02:15:52,500
Inside handmade world.

2255
02:15:52,500 --> 02:15:55,100
You can see how things are set up in here.

2256
02:15:55,100 --> 02:15:56,200
We've got a world struct.

2257
02:15:56,200 --> 02:15:59,600
We've got a free list and a chunk hash, right?

2258
02:15:59,600 --> 02:16:05,700
And if you take a look at how that works, we only really need to lock

2259
02:16:05,700 --> 02:16:06,600
stuff.

2260
02:16:06,600 --> 02:16:09,000
When we are doing freeing on the free list.

2261
02:16:09,000 --> 02:16:10,400
We need to lock the free list.

2262
02:16:10,400 --> 02:16:14,500
And for Chunk hashes, we only need to lock the hash line itself.

2263
02:16:14,500 --> 02:16:19,500
So, if we wanted to, we could have a ticket per hash line even and

2264
02:16:19,500 --> 02:16:20,300
only lock that

2265
02:16:21,200 --> 02:16:22,600
Flying when we're working on it.

2266
02:16:23,200 --> 02:16:24,800
So, you know, this is

2267
02:16:26,700 --> 02:16:27,500
Definitely.

2268
02:16:40,299 --> 02:16:43,299
We could definitely do much more fine-grained locking and might want

2269
02:16:43,299 --> 02:16:44,200
to write.

2270
02:16:44,299 --> 02:16:49,000
But first this is obviously a very simple way that we could make.

2271
02:16:50,500 --> 02:16:52,400
This piece of code work.

2272
02:16:53,400 --> 02:16:58,000
And then what we would need to do is we would need to have a ticket

2273
02:16:58,000 --> 02:17:00,200
that we could rely on.

2274
02:17:01,200 --> 02:17:04,799
That would allow us to lock and unlock this, right?

2275
02:17:07,299 --> 02:17:17,299
so, let's say that we had the world mode here and we said, like, okay,

2276
02:17:17,400 --> 02:17:18,100
you know,

2277
02:17:24,600 --> 02:17:26,799
there's a simulation ticket or something like this.

2278
02:17:28,200 --> 02:17:31,100
Well actually like I said, it's really it's part of the world so I

2279
02:17:31,100 --> 02:17:34,100
think it should probably go in here, right?

2280
02:17:37,299 --> 02:17:38,900
so if I want to change the world,

2281
02:17:40,900 --> 02:17:41,900
Lofty, aspirations.

2282
02:17:42,100 --> 02:17:47,000
If I want to change the world, if I want to change the world, then I

2283
02:17:47,000 --> 02:17:54,799
need to be able to say like, hey, take a look on the World ticket and

2284
02:17:54,799 --> 02:17:59,200
do what you're going to do, because only one person can edit that at a

2285
02:17:59,200 --> 02:17:59,600
time.

2286
02:18:06,500 --> 02:18:07,900
And hopefully, that makes some sense.

2287
02:18:09,100 --> 02:18:09,500
Right?

2288
02:18:11,200 --> 02:18:11,799
So yeah.

2289
02:18:11,799 --> 02:18:14,500
So I don't know how much time I've got left.

2290
02:18:14,500 --> 02:18:18,000
Probably not a whole, heck of a lot, but the camera situation is

2291
02:18:18,000 --> 02:18:20,799
definitely something we want to take a look at here.

2292
02:18:21,100 --> 02:18:22,799
So here's the multi-threaded path.

2293
02:18:23,299 --> 02:18:26,400
And, like I said, kind of runs into problems pretty quickly.

2294
02:18:27,000 --> 02:18:29,500
And you can kind of see where those might be.

2295
02:18:33,200 --> 02:18:36,900
Although be honest, I'm not really sure what that problem was right

2296
02:18:36,900 --> 02:18:37,299
there.

2297
02:18:38,299 --> 02:18:39,400
The world is no.

2298
02:18:39,400 --> 02:18:40,600
The world is no.

2299
02:18:42,500 --> 02:18:45,299
In begin World change.

2300
02:18:46,299 --> 02:18:47,400
Why would the world be?

2301
02:18:47,400 --> 02:18:48,100
No.

2302
02:18:52,799 --> 02:18:53,700
That seems odd.

2303
02:18:53,700 --> 02:18:54,400
Wouldn't you say?

2304
02:19:01,299 --> 02:19:02,100
Two Worlds.

2305
02:19:05,500 --> 02:19:09,500
That was not really what I was expecting to see.

2306
02:19:15,799 --> 02:19:21,400
So the world modes World parameter got set to zero somewhere down the

2307
02:19:21,400 --> 02:19:24,799
line here, which is not what I would have expected.

2308
02:19:34,400 --> 02:19:36,299
It looks like this is just

2309
02:19:40,600 --> 02:19:44,400
Getting overwritten prematurely is what it would appear to be.

2310
02:19:44,400 --> 02:19:46,100
Did I mess up the

2311
02:19:52,000 --> 02:19:52,400
ah,

2312
02:19:54,900 --> 02:19:57,100
well, so

2313
02:19:58,800 --> 02:20:03,900
One thing that is good to do when you actually say and then you call X

2314
02:20:04,100 --> 02:20:08,900
is to actually call it X unsurprisingly since we did not actually wait

2315
02:20:08,900 --> 02:20:11,000
for the work to be completed before moving on.

2316
02:20:12,700 --> 02:20:17,000
It should not probably surprise anyone that we end up over writing our

2317
02:20:17,000 --> 02:20:17,600
own data.

2318
02:20:18,600 --> 02:20:19,600
So, yeah.

2319
02:20:20,700 --> 02:20:22,000
Not great.

2320
02:20:24,200 --> 02:20:27,500
I said we had to do that when I came through here and I simply didn't

2321
02:20:27,500 --> 02:20:28,000
type it in

2322
02:20:30,000 --> 02:20:33,100
Anyway, so yeah, in theory.

2323
02:20:33,100 --> 02:20:36,400
Now like I said even though this is not really operating properly.

2324
02:20:36,600 --> 02:20:39,500
So you have to take it with a grain of salt.

2325
02:20:40,400 --> 02:20:44,800
We are now calling the world simulation code on multiple threads, at

2326
02:20:44,800 --> 02:20:45,900
least in theory.

2327
02:20:46,500 --> 02:20:51,100
And, you know, you can see it happening here just you know, so that we

2328
02:20:51,400 --> 02:20:52,800
are aware of it.

2329
02:20:52,800 --> 02:20:59,000
You can see that we've got six, worker threads looks like one, two,

2330
02:20:59,000 --> 02:20:59,400
three.

2331
02:20:59,500 --> 02:20:59,500
A.

2332
02:21:00,000 --> 02:21:04,700
Six, all doing that work and each of them is kind of calling.

2333
02:21:04,900 --> 02:21:06,600
You can see if we pause.

2334
02:21:07,100 --> 02:21:11,600
You can see that the worker threads are doing, you know, more than one

2335
02:21:12,000 --> 02:21:12,800
in this case.

2336
02:21:12,800 --> 02:21:16,400
And you can kind of see like there's begin World change and right,

2337
02:21:16,700 --> 02:21:17,500
it's kind of cool.

2338
02:21:17,600 --> 02:21:19,700
I really love this little visualizer that we built.

2339
02:21:21,100 --> 02:21:23,200
So you can see all of that work Happening Here.

2340
02:21:25,100 --> 02:21:29,500
Meanwhile up here, you can kind of see that the game update code here

2341
02:21:29,500 --> 02:21:31,300
is is actually just kind of waiting.

2342
02:21:32,600 --> 02:21:35,100
I guess what I would say is I'm a little surprised.

2343
02:21:37,900 --> 02:21:45,100
I'm not sure why this thread is not actively doing any of that work.

2344
02:21:45,800 --> 02:21:46,700
Oh, I see why.

2345
02:21:46,700 --> 02:21:48,400
It's because it's inside game update and render.

2346
02:21:48,400 --> 02:21:51,100
If I was to step in here, then I would see it do World soon.

2347
02:21:51,100 --> 02:21:54,200
Yes, okay, so anyway,

2348
02:21:56,100 --> 02:22:00,200
We are now correctly, multi-threading that update at least to a

2349
02:22:00,200 --> 02:22:06,300
certain degree, but one of course, like I said, problem with this is

2350
02:22:06,400 --> 02:22:10,600
that certain aspects are still not actually going to be locked

2351
02:22:10,600 --> 02:22:11,100
properly.

2352
02:22:11,100 --> 02:22:17,100
We did sort of the, the very core screwed locking version where we

2353
02:22:17,100 --> 02:22:20,800
just prevent obvious errors from happening in the world read and

2354
02:22:20,800 --> 02:22:21,000
write.

2355
02:22:21,000 --> 02:22:23,500
But we still sort of have this weird thing with the camera and these

2356
02:22:23,500 --> 02:22:25,800
other aspects of it that we're not.

2357
02:22:26,000 --> 02:22:31,200
the addressing properly and that we want to be definitely more

2358
02:22:31,200 --> 02:22:35,300
hardcore about but hopefully you can kind of see the direction that's

2359
02:22:35,300 --> 02:22:38,700
going and you can hopefully you're also appreciate sort of

2360
02:22:41,100 --> 02:22:42,700
why I said, you know,

2361
02:22:43,700 --> 02:22:45,700
Thinking about things in.

2362
02:22:45,700 --> 02:22:49,300
It's not really functional programming, but it's the concept of

2363
02:22:49,300 --> 02:22:53,200
that's, you know, I think very closely related which is understanding

2364
02:22:53,200 --> 02:22:57,700
specifically what a function does and does not need to access is

2365
02:22:57,700 --> 02:23:02,800
pretty critical to moving towards multi-threaded code in a particular

2366
02:23:02,800 --> 02:23:06,600
part of the project, functional code is obviously the most

2367
02:23:06,600 --> 02:23:09,400
multi-threaded bill because it literally doesn't do anything other

2368
02:23:09,400 --> 02:23:10,500
than look at its parameters.

2369
02:23:10,500 --> 02:23:13,200
But, you know, even

2370
02:23:13,700 --> 02:23:16,100
Is that are sort of beyond that where they do edit things, do

2371
02:23:16,100 --> 02:23:17,900
whatever, it's still the same general process.

2372
02:23:17,900 --> 02:23:22,600
You're trying to like winnow away at the number of things that you

2373
02:23:22,600 --> 02:23:25,100
have to access in order to sort of make it.

2374
02:23:26,000 --> 02:23:31,100
You know, something that can be easily run, concurrently with other

2375
02:23:31,100 --> 02:23:33,800
things that are touched that want to do like the same sort of

2376
02:23:33,800 --> 02:23:34,500
operations.

2377
02:23:36,900 --> 02:23:39,700
All right, so yeah.

2378
02:23:42,700 --> 02:23:45,900
When looking at this as well you know there's a couple things in here

2379
02:23:46,200 --> 02:23:50,900
that probably again we can sort of take a look at more closely but

2380
02:23:51,000 --> 02:23:54,900
really I think mostly what we want to do is is figure out how to back

2381
02:23:54,900 --> 02:23:58,800
away the back out.

2382
02:23:58,800 --> 02:23:59,800
That that sort of camera.

2383
02:24:00,100 --> 02:24:03,000
so I'm going to say that tomorrow, probably what we want to do is

2384
02:24:06,200 --> 02:24:07,300
Take a look at that explicitly.

2385
02:24:07,300 --> 02:24:16,900
So, you know, pull out the camera concept into something we're and

2386
02:24:16,900 --> 02:24:17,600
optional.

2387
02:24:19,400 --> 02:24:21,800
and then the other thing we want to do is

2388
02:24:23,900 --> 02:24:26,700
Where do things like typical?

2389
02:24:28,300 --> 02:24:30,200
For height live cetera.

2390
02:24:30,800 --> 02:24:33,300
So we want to kind of like eliminate World mode.

2391
02:24:39,000 --> 02:24:40,100
From The Sims step entirely.

2392
02:24:42,700 --> 02:24:44,200
I think that's about it for today.

2393
02:24:44,200 --> 02:24:49,800
So I'll go to the Q&A a little bit early since technically, I started

2394
02:24:49,800 --> 02:24:51,900
5 minutes early with the timer there.

2395
02:24:51,900 --> 02:24:59,700
So if anyone has any questions about what we're doing here, please

2396
02:24:59,700 --> 02:25:01,700
feel free to ask me.

2397
02:25:02,000 --> 02:25:05,700
Please prefix them with q:.

2398
02:25:09,500 --> 02:25:10,400
So I can see them.

2399
02:25:16,000 --> 02:25:17,700
May blow is posting some questions.

2400
02:25:18,400 --> 02:25:21,000
Sort of vicariously for are rather.

2401
02:25:21,300 --> 02:25:28,000
K'nuckles is asking the questions vicariously via midlow apparently,

2402
02:25:29,900 --> 02:25:32,100
so what do you suppose is two questions?

2403
02:25:32,300 --> 02:25:34,300
Have you finished sausage roll?

2404
02:25:35,300 --> 02:25:37,200
Stephen Sasha will know, Stephen sausage.

2405
02:25:37,200 --> 02:25:38,800
Roll is too hard of a game for me.

2406
02:25:38,800 --> 02:25:39,500
I'm afraid.

2407
02:25:40,400 --> 02:25:49,000
And to, I've been chilling, Shovel Knight for you and you have to add

2408
02:25:49,000 --> 02:25:49,700
undertale to list.

2409
02:25:49,700 --> 02:25:51,000
That game is a gift from the gods and high.

2410
02:25:51,000 --> 02:25:53,600
Alright, so I haven't played Shovel Knight yet.

2411
02:25:53,600 --> 02:25:57,900
I think I have it but I don't think I've played much of it.

2412
02:25:57,900 --> 02:26:02,800
I might have paid a little bit and I tried playing undertale a little

2413
02:26:02,800 --> 02:26:04,400
bit but I didn't see the.

2414
02:26:04,400 --> 02:26:06,700
I didn't understand the attraction really.

2415
02:26:06,700 --> 02:26:10,100
I could give it another go but those are not really

2416
02:26:10,500 --> 02:26:11,200
About the programming.

2417
02:26:11,200 --> 02:26:11,700
So,

2418
02:26:15,600 --> 02:26:16,400
Let's see.

2419
02:26:16,400 --> 02:26:19,700
A posting Mage isn't simulating the world in several threads.

2420
02:26:20,800 --> 02:26:24,600
Can't that make the game non-deterministic isn't the point of the RNG,

2421
02:26:24,600 --> 02:26:28,200
having a starting kernel for deterministic, play for competition and

2422
02:26:28,200 --> 02:26:28,600
stuff.

2423
02:26:29,800 --> 02:26:34,700
So I guess what I would say is that depends entirely on the game for a

2424
02:26:34,700 --> 02:26:39,600
game like handmade hero, we absolutely don't care about deterministic

2425
02:26:39,600 --> 02:26:39,900
play.

2426
02:26:39,900 --> 02:26:42,800
In fact, you might say that the point of handmade hero is specifically

2427
02:26:42,800 --> 02:26:44,200
non-deterministic, right?

2428
02:26:44,400 --> 02:26:45,300
Like you want

2429
02:26:45,400 --> 02:26:49,600
Every time you played handmade here for two completely different, it's

2430
02:26:49,600 --> 02:26:51,000
very Rogue alike in that sense.

2431
02:26:51,200 --> 02:26:58,200
So we don't care at all about being able to reproduce exact runs and

2432
02:26:58,200 --> 02:26:59,800
furthermore we

2433
02:27:00,000 --> 02:27:02,900
Support variable frame rates on animate here as well.

2434
02:27:02,900 --> 02:27:08,800
Which also means that we if we wanted to support fully deterministic

2435
02:27:08,800 --> 02:27:12,600
play, we would have to do extra work to make sure that our stimulation

2436
02:27:12,700 --> 02:27:17,600
subdivided time properly and never took bigger or smaller time steps,

2437
02:27:17,600 --> 02:27:19,100
even if the frame rate was bigger or smaller.

2438
02:27:19,700 --> 02:27:25,400
So we definitely don't have any reason to want deterministic play on

2439
02:27:25,400 --> 02:27:26,200
handmade hero.

2440
02:27:26,700 --> 02:27:29,700
And so we're not concerned about that.

2441
02:27:30,000 --> 02:27:30,900
Aspect at all.

2442
02:27:33,100 --> 02:27:39,700
However, if you are trying to accomplish deterministic play, then yes

2443
02:27:40,000 --> 02:27:41,700
having multiple threads is a problem.

2444
02:27:42,300 --> 02:27:49,000
You have to have ways of dealing with that fact and making sure that

2445
02:27:49,000 --> 02:27:52,400
your threads don't add non-determinism, if that's what you want most

2446
02:27:52,400 --> 02:27:55,800
games, don't try to be deterministic in the way that you're talking

2447
02:27:55,800 --> 02:27:58,200
about though because remember

2448
02:27:59,400 --> 02:28:06,900
Having a random number generator be deterministic from a colonel.

2449
02:28:07,000 --> 02:28:09,900
Usually we're going to care about that more during World Generation

2450
02:28:10,000 --> 02:28:10,700
right now.

2451
02:28:10,700 --> 02:28:14,000
It's what we might care about is the ability for someone to say, here

2452
02:28:14,000 --> 02:28:17,400
is a random seed, generate the world, and I want to make sure that on

2453
02:28:17,400 --> 02:28:17,800
your machine.

2454
02:28:17,800 --> 02:28:20,800
And my machine, we generate the same world from that random seed, that

2455
02:28:20,800 --> 02:28:25,100
is a valuable thing to use repeatability of the RNG.

2456
02:28:26,100 --> 02:28:27,600
That's valuable for us, right?

2457
02:28:28,700 --> 02:28:29,000
So,

2458
02:28:29,100 --> 02:28:29,800
I do care about it.

2459
02:28:29,800 --> 02:28:30,800
There it here.

2460
02:28:30,800 --> 02:28:31,700
We don't care about it at.

2461
02:28:31,700 --> 02:28:32,700
All right?

2462
02:28:33,500 --> 02:28:38,900
Because again, we there is no known reason that I can think of on

2463
02:28:38,900 --> 02:28:39,700
handmade hero.

2464
02:28:40,100 --> 02:28:45,200
Why we care about what the random numbers are that are generated on a

2465
02:28:45,200 --> 02:28:45,800
run-through.

2466
02:28:49,000 --> 02:28:54,800
Look, I just don't know any reason why we would if we did care about

2467
02:28:54,800 --> 02:29:00,500
the RNG on the run through, then we definitely have a problem.

2468
02:29:00,600 --> 02:29:05,500
And here is the reason that we have a problem like like I guess to

2469
02:29:05,500 --> 02:29:09,400
sort of sketch out the answer to the thing, which, I mean, I think you

2470
02:29:09,400 --> 02:29:12,000
kind of already know this answer because your question kind of begs.

2471
02:29:12,000 --> 02:29:14,200
The answer to begin with, right?

2472
02:29:15,800 --> 02:29:18,400
But let's say that we take

2473
02:29:18,500 --> 02:29:21,900
Look at the typical use of some of the entropy that's coming in

2474
02:29:21,900 --> 02:29:22,500
through the game.

2475
02:29:23,500 --> 02:29:27,400
So, you know, I've got, you know, my my hero cure and he's going to

2476
02:29:27,400 --> 02:29:32,000
like punch it somebody right and maybe you know there's there's the

2477
02:29:32,000 --> 02:29:33,500
monster here, right?

2478
02:29:33,800 --> 02:29:38,300
The spider monster with the big fangs or whatever like or something

2479
02:29:38,300 --> 02:29:38,800
like this.

2480
02:29:40,000 --> 02:29:43,600
So I'm going to punch it this monster and I hit the monster and so

2481
02:29:43,600 --> 02:29:47,400
then we do some kind of a like roll for damage or something, right?

2482
02:29:48,500 --> 02:29:51,300
Like I don't know what this is awful.

2483
02:29:51,300 --> 02:29:52,700
What is with the penmanship today?

2484
02:29:52,800 --> 02:29:57,100
Roll for damage.

2485
02:29:58,700 --> 02:29:59,800
So, you know, maybe I'm going.

2486
02:30:00,000 --> 02:30:03,200
We're like, okay, I have a certain percentage chance of getting a

2487
02:30:03,200 --> 02:30:04,600
critical hit, right?

2488
02:30:04,900 --> 02:30:10,300
Well, there's an RNG role and that oops, there is an orangey role that

2489
02:30:10,300 --> 02:30:15,800
needs to happen there that's going to determine whether or not, I get

2490
02:30:15,800 --> 02:30:16,700
that critical hit.

2491
02:30:17,400 --> 02:30:20,300
That's a source of entropy that I would argue you almost never care

2492
02:30:20,300 --> 02:30:22,100
about whether it's deterministic, right?

2493
02:30:22,100 --> 02:30:25,600
Because two players playing the same seed aren't even going to be

2494
02:30:25,600 --> 02:30:27,700
punching at the same spider at the same time.

2495
02:30:27,700 --> 02:30:29,900
So there are in G's are always going.

2496
02:30:30,000 --> 02:30:33,500
To be in different states anyway, right, they haven't even rolled the

2497
02:30:33,500 --> 02:30:35,500
same number of roles at this point.

2498
02:30:36,700 --> 02:30:40,200
So that Source I would say is not particularly relevant in terms of

2499
02:30:40,200 --> 02:30:45,000
caring about Divergence of the RNG because of multi-threading.

2500
02:30:45,700 --> 02:30:46,600
However,

2501
02:30:48,300 --> 02:30:51,900
If there's a chest in the game and it's like, what's in the chest,

2502
02:30:52,100 --> 02:30:52,800
right?

2503
02:30:53,100 --> 02:30:59,500
And the random roll for what's in the chest is dependent, let's say on

2504
02:30:59,500 --> 02:31:03,700
something that can happen in the game, like whether you've got a lucky

2505
02:31:03,700 --> 02:31:05,500
charm bracelet on or something like this.

2506
02:31:06,700 --> 02:31:09,300
There you might care more, right?

2507
02:31:09,300 --> 02:31:14,700
You might care if the RNG for chests, is consistent across

2508
02:31:14,700 --> 02:31:16,400
playthroughs or something in this way.

2509
02:31:17,300 --> 02:31:20,400
So I could see an argument for isolating the RNG here.

2510
02:31:20,400 --> 02:31:23,100
And if you wanted to do that, you could because all you need to do for

2511
02:31:23,100 --> 02:31:25,500
that is have a locked RNG.

2512
02:31:25,500 --> 02:31:29,700
You use for special roles you want to make consistent, right?

2513
02:31:34,400 --> 02:31:37,500
But I would say in General, trying to ensure consistency of the RNG in

2514
02:31:37,500 --> 02:31:42,300
this way, maybe a little bit of a Fool's errand because again, two

2515
02:31:42,300 --> 02:31:46,000
players paths, diverge almost immediately out of the Starting Gate.

2516
02:31:46,000 --> 02:31:48,100
So the question is, what are you really?

2517
02:31:48,100 --> 02:31:52,500
Ensuring when you ensure that the RNG is consistent, really all you're

2518
02:31:52,500 --> 02:31:52,900
ensuring.

2519
02:31:52,900 --> 02:31:57,500
Is that for the exact same set of inputs, you'll produce the same run.

2520
02:31:58,100 --> 02:31:59,800
How much do you care about that, right?

2521
02:31:59,800 --> 02:32:02,800
That's not really the same as saying that it's fair for both players

2522
02:32:02,800 --> 02:32:02,900
or

2523
02:32:03,100 --> 02:32:03,800
Like that.

2524
02:32:04,700 --> 02:32:05,300
Right?

2525
02:32:06,500 --> 02:32:10,200
So, yeah, so the thing that I care way more about, I think most of the

2526
02:32:10,200 --> 02:32:15,600
time is RNG for the world Jen and that's much easier because we don't

2527
02:32:15,600 --> 02:32:18,200
have to multi-thread that if we don't want to or if we do we can take

2528
02:32:18,200 --> 02:32:21,200
steps to make sure that it doesn't diverge.

2529
02:32:21,500 --> 02:32:26,200
So I think that's the place we're going to care a lot more about that.

2530
02:32:32,600 --> 02:32:33,100
The geek part.

2531
02:32:33,100 --> 02:32:35,100
When do you go back and complete to do tasks?

2532
02:32:35,100 --> 02:32:37,900
You've given yourself in the code is each one going to be completed

2533
02:32:37,900 --> 02:32:41,600
before you're done or they simply wish lists basically.

2534
02:32:41,600 --> 02:32:44,800
They're just notes to myself for when I go to ship.

2535
02:32:45,200 --> 02:32:49,300
So when I'm very, very close to being done, I'll often grep for all my

2536
02:32:49,300 --> 02:32:52,300
to dues and then I'll go through them all and decide which one's of

2537
02:32:52,300 --> 02:32:55,900
them are still relevant and need to get done and which ones aren't.

2538
02:32:56,300 --> 02:32:59,200
So the answer is that some of them will turn out to be wish list

2539
02:32:59,200 --> 02:32:59,800
things that just

2540
02:33:00,000 --> 02:33:02,800
I ordered some of them will turn out to be priority items that have to

2541
02:33:02,800 --> 02:33:03,400
get fixed.

2542
02:33:03,500 --> 02:33:07,200
And really it's towards the end of the project that that's relevant.

2543
02:33:14,900 --> 02:33:16,000
Is it important for Game?

2544
02:33:16,000 --> 02:33:17,500
Preserve to have a portfolio in the same way?

2545
02:33:17,500 --> 02:33:20,800
Artists do and if so what would be important to include?

2546
02:33:21,100 --> 02:33:24,300
I would say maybe wait for handmade con for that question.

2547
02:33:24,900 --> 02:33:27,200
I don't do a lot of hiring anymore.

2548
02:33:27,400 --> 02:33:33,100
I'm not involved in hiring programmers and so I am kind of out of

2549
02:33:33,100 --> 02:33:38,200
touch with what people screen for your first sort of when you're

2550
02:33:38,200 --> 02:33:39,400
trying to get into the game industry.

2551
02:33:39,700 --> 02:33:43,800
It's been too long since I've had any contact with that process.

2552
02:33:44,000 --> 02:33:46,100
Yes, that is a question.

2553
02:33:46,100 --> 02:33:50,200
I ask every year at handmade con this year will be the same as last

2554
02:33:50,200 --> 02:33:50,300
year.

2555
02:33:50,300 --> 02:33:54,300
I'll be asking in fact the person who I'll be asking that question of

2556
02:33:54,800 --> 02:34:00,200
very specifically is the the tech director at blizzard on World of

2557
02:34:00,200 --> 02:34:01,000
Warcraft.

2558
02:34:01,900 --> 02:34:06,000
They do a ton of hiring, it's the kind of job you might hope to get

2559
02:34:06,000 --> 02:34:09,000
when you're starting out in the game industry you know doing some you

2560
02:34:09,000 --> 02:34:13,000
know fairly basic tasks on World of Warcraft or something would be a

2561
02:34:13,000 --> 02:34:13,500
good?

2562
02:34:14,000 --> 02:34:17,300
Entry level position for example because you know they're a good

2563
02:34:17,300 --> 02:34:17,700
company.

2564
02:34:17,700 --> 02:34:20,000
You know, there's a lot of people to learn from you know it's a famous

2565
02:34:20,000 --> 02:34:27,200
game and so I'll definitely be asking those kinds of questions and so

2566
02:34:27,500 --> 02:34:29,800
this next week is handmade con.

2567
02:34:30,900 --> 02:34:34,200
I'll be asking those questions and we'll have some again difference

2568
02:34:34,200 --> 02:34:34,700
any answers.

2569
02:34:35,000 --> 02:34:40,000
If your can't wait till then go watch Mike Acton's segment from

2570
02:34:40,000 --> 02:34:41,100
handmade Con 2015.

2571
02:34:41,100 --> 02:34:43,800
Last year's con he was the

2572
02:34:44,200 --> 02:34:50,300
Tech director that I invited last year and he answered that question

2573
02:34:50,700 --> 02:34:51,200
as well.

2574
02:34:54,000 --> 02:34:55,000
Gary Johansen.

2575
02:34:57,000 --> 02:34:58,300
In a tight inner loop.

2576
02:34:58,300 --> 02:35:00,600
Do you think these memory copies for the temporary?

2577
02:35:00,600 --> 02:35:02,600
Scratch memory could become an overhead concern.

2578
02:35:02,600 --> 02:35:04,900
If I understand the stream correctly, that is

2579
02:35:09,100 --> 02:35:10,500
I'm not sure what you mean.

2580
02:35:10,800 --> 02:35:16,200
Certainly temporary memory copies are always a concern.

2581
02:35:16,500 --> 02:35:17,900
So the chances are the answer.

2582
02:35:17,900 --> 02:35:19,400
The question is yes but I'm not sure.

2583
02:35:19,400 --> 02:35:23,200
I know which temporary scratch memory copies are talking about.

2584
02:35:25,800 --> 02:35:29,400
So, if you could be a little more specific on that I could, I could

2585
02:35:29,400 --> 02:35:32,100
answer the question directly long billion.

2586
02:35:32,100 --> 02:35:35,500
Currently what is the behavior when walking several rooms over into

2587
02:35:35,500 --> 02:35:36,800
another chunk?

2588
02:35:38,200 --> 02:35:41,500
Well, right now, the simulation stuff is

2589
02:35:43,500 --> 02:35:47,900
Is just kind of running randomly out in the world, so you would never

2590
02:35:48,100 --> 02:35:50,200
you can't get to a chunk.

2591
02:35:50,500 --> 02:35:53,600
That's being stimulated because they're offset from the place where

2592
02:35:53,600 --> 02:35:54,500
you currently are.

2593
02:35:55,600 --> 02:35:56,300
That makes sense.

2594
02:36:14,300 --> 02:36:15,100
Save William.

2595
02:36:15,100 --> 02:36:17,100
Bundy just said, save scumming.

2596
02:36:17,300 --> 02:36:19,500
I don't know what save scumming is.

2597
02:36:21,700 --> 02:36:24,300
Jim Sarah, will there be streams for the job?

2598
02:36:24,300 --> 02:36:26,800
Fair people know the job.

2599
02:36:26,800 --> 02:36:29,400
Fair stuff is not recorded and really can't be.

2600
02:36:29,400 --> 02:36:31,400
There's so many of people there.

2601
02:36:31,400 --> 02:36:34,900
So many teams participating in the job for now.

2602
02:36:34,900 --> 02:36:37,500
There's like, I don't know how many there are but it's like way more

2603
02:36:37,500 --> 02:36:39,100
than anyone could possibly film.

2604
02:36:48,900 --> 02:36:52,500
What's the relation between IQ and success at programming?

2605
02:36:54,300 --> 02:36:56,800
I have no idea.

2606
02:36:58,500 --> 02:37:00,200
I literally have no idea.

2607
02:37:00,200 --> 02:37:02,900
I know a lot of great programmers.

2608
02:37:02,900 --> 02:37:07,600
I don't know that their IQs are so I don't know.

2609
02:37:10,100 --> 02:37:12,800
Well I can point to Great programmers and say these people are really

2610
02:37:12,800 --> 02:37:13,900
good at what they do.

2611
02:37:14,000 --> 02:37:17,600
I can't then tell you their IQ is this

2612
02:37:21,200 --> 02:37:23,200
Ginger, bill has a question off.

2613
02:37:23,200 --> 02:37:24,900
Topic questions can be answered later if necessary.

2614
02:37:24,900 --> 02:37:27,100
I've been developing a new programming language to replace my needs

2615
02:37:27,100 --> 02:37:30,600
for C C++ and pretty much every other language the main areas of

2616
02:37:30,600 --> 02:37:33,400
research for me at the moment are metaprogramming, as I say

2617
02:37:33,400 --> 02:37:36,600
optimizations, concurrency you being a better, bring an expert other

2618
02:37:36,600 --> 02:37:40,200
than compile-time, execution, that is John's language.

2619
02:37:40,200 --> 02:37:42,100
What other forms of Mentor program?

2620
02:37:42,100 --> 02:37:43,000
Would you like?

2621
02:37:43,400 --> 02:37:45,400
Yeah, that's kind of a bigger question.

2622
02:37:48,000 --> 02:37:49,900
I probably can't answer that the moment.

2623
02:37:50,700 --> 02:37:51,200
William Bonney.

2624
02:37:51,200 --> 02:37:55,600
Sorry it was in context if I open a chest and don't get what I want.

2625
02:37:55,600 --> 02:37:57,500
Reloading a save given playing slightly differently.

2626
02:37:57,500 --> 02:38:00,000
Might get me a different orangey for the chest.

2627
02:38:00,500 --> 02:38:01,500
Yes, exactly.

2628
02:38:01,700 --> 02:38:09,900
And that's why I say, if you want to be specific, specifically

2629
02:38:09,900 --> 02:38:15,900
concerned about specific elements are in gy so you can take extra

2630
02:38:15,900 --> 02:38:16,400
steps there.

2631
02:38:16,700 --> 02:38:19,400
However, I would point out kind of the obvious thing which is that I

2632
02:38:19,400 --> 02:38:20,100
don't know that.

2633
02:38:20,200 --> 02:38:23,400
Who's coming is really something to be that concerned about because at

2634
02:38:23,400 --> 02:38:26,500
the end of the day, if someone just wants a different thing in the

2635
02:38:26,500 --> 02:38:30,300
chest and they're going to be going the like mess with savegame routes

2636
02:38:30,300 --> 02:38:31,000
to do it.

2637
02:38:31,600 --> 02:38:36,200
They could easily just figure out where the RNG number is stored in

2638
02:38:36,200 --> 02:38:38,200
the savegame and edit it, right?

2639
02:38:39,600 --> 02:38:44,500
So I'm not sure that that's really all that much different.

2640
02:38:44,500 --> 02:38:46,300
You know, people are trying to cheat.

2641
02:38:48,000 --> 02:38:49,600
They they can

2642
02:38:50,100 --> 02:38:53,200
It and you're really just talking about how much of a barrier you're

2643
02:38:53,200 --> 02:38:54,400
trying to erect for them.

2644
02:38:54,400 --> 02:38:59,900
I might act as usually I don't really think it's that bad.

2645
02:39:00,000 --> 02:39:04,300
Directive to erect barriers to single player cheating because if

2646
02:39:04,300 --> 02:39:07,300
someone wants to cheat in single player, just let them it's their

2647
02:39:07,300 --> 02:39:07,600
game.

2648
02:39:07,600 --> 02:39:08,600
They bought it.

2649
02:39:09,500 --> 02:39:11,300
I don't care how you want to play it.

2650
02:39:11,300 --> 02:39:15,500
If it's fun for you to play the game that way and you would prefer to

2651
02:39:15,500 --> 02:39:17,700
do it, then that's okay with me.

2652
02:39:18,200 --> 02:39:23,900
I probably would recommend some level of barrier.

2653
02:39:24,200 --> 02:39:25,600
Like I wouldn't just

2654
02:39:26,500 --> 02:39:28,700
Have it so you know press X to win the game.

2655
02:39:29,300 --> 02:39:32,500
And the reason for that is I want to help people who don't want to

2656
02:39:32,500 --> 02:39:33,700
cheat to.

2657
02:39:33,700 --> 02:39:36,600
I want enough of a barrier there so that those people don't feel

2658
02:39:36,600 --> 02:39:38,000
constantly tempted to do it.

2659
02:39:38,000 --> 02:39:41,600
I want to help them have some, you know, step there.

2660
02:39:41,600 --> 02:39:45,300
But as long as there is a some significant step you have to take in

2661
02:39:45,300 --> 02:39:49,100
order to cheat that's enough so that regular people who want to play

2662
02:39:49,100 --> 02:39:52,400
the game and don't want to cheat aren't constantly tempted to do so

2663
02:39:53,200 --> 02:39:56,100
then I don't think the programmer really should go any further out of

2664
02:39:56,300 --> 02:40:00,400
Way, if someone wants to sit down and start shooting at a game, it's a

2665
02:40:00,400 --> 02:40:01,500
single-player game.

2666
02:40:02,000 --> 02:40:03,200
So you're not affect anyone else.

2667
02:40:03,200 --> 02:40:06,700
Then I don't see the crime in that rights likes their game.

2668
02:40:06,700 --> 02:40:11,600
They bought it, you put up enough of a barrier to make it so that it

2669
02:40:11,600 --> 02:40:13,200
wasn't trivial to cheat.

2670
02:40:13,200 --> 02:40:15,500
So it doesn't become this problem.

2671
02:40:15,500 --> 02:40:19,600
Temptation wise for players who don't really want to cheat that, I

2672
02:40:19,600 --> 02:40:21,600
think you've done your job and you're pretty much done.

2673
02:40:36,200 --> 02:40:37,500
Well, the game have different levels.

2674
02:40:37,500 --> 02:40:39,800
Like The Binding of Isaac, where will the entire game be a single

2675
02:40:39,800 --> 02:40:40,300
level?

2676
02:40:41,600 --> 02:40:46,100
I don't know that we'd have any levels in the sense that there would

2677
02:40:46,100 --> 02:40:47,800
be like breaks in between them.

2678
02:40:48,700 --> 02:40:51,200
No, so everything is continuous.

2679
02:40:51,200 --> 02:40:53,300
You can just go to anywhere in the game.

2680
02:40:53,900 --> 02:40:56,100
When you're walking, you wouldn't

2681
02:40:58,400 --> 02:40:59,700
Have a loading screen, certainly.

2682
02:41:47,000 --> 02:41:50,300
All right, are we basically done?

2683
02:42:13,400 --> 02:42:16,800
I think we should probably be about done because I probably,

2684
02:42:18,700 --> 02:42:20,900
Should go get some lunch or something.

2685
02:42:24,500 --> 02:42:25,900
Let's go ahead and wind it down.

2686
02:42:40,400 --> 02:42:43,800
Okay, thank you, everyone for joining me for another episode of

2687
02:42:43,800 --> 02:42:44,500
handmade hero.

2688
02:42:44,500 --> 02:42:45,700
It's been a pleasure coding with you.

2689
02:42:45,700 --> 02:42:50,800
As always, if you would like to follow along with the series at home,

2690
02:42:50,800 --> 02:42:53,300
you can always pre-order the game on handmade here a.org and it comes

2691
02:42:53,300 --> 02:42:54,200
with a source code.

2692
02:42:54,400 --> 02:42:58,600
I keep it up to date every night so you can experiment with what we're

2693
02:42:58,600 --> 02:43:01,000
doing on your own and learn from it.

2694
02:43:01,400 --> 02:43:03,200
We also have a forum site, you can go to.

2695
02:43:03,200 --> 02:43:06,200
If you want to ask questions a patreon page, you can go to if you want

2696
02:43:06,200 --> 02:43:10,100
to support the video series and a schedule bot that you can look.

2697
02:43:10,300 --> 02:43:11,500
For or subscribe to.

2698
02:43:11,500 --> 02:43:13,500
If you want to know, when the series is going to be live.

2699
02:43:13,900 --> 02:43:18,700
I will probably be updating the schedule but soon so that it is going

2700
02:43:18,700 --> 02:43:20,400
to do the weekend streams properly.

2701
02:43:20,700 --> 02:43:24,100
Now that we do the two back-to-back, which previously we had in quite

2702
02:43:24,100 --> 02:43:26,900
ever, had support for that because we never did it before.

2703
02:43:28,200 --> 02:43:31,000
We also have an episode guide want to catch up with old episodes

2704
02:43:32,100 --> 02:43:32,600
which?

2705
02:43:32,800 --> 02:43:35,100
Yeah, which is pretty awesome.

2706
02:43:36,300 --> 02:43:38,700
All right, thanks everyone for joining me.

2707
02:43:38,700 --> 02:43:40,000
I will see you back here tomorrow.

2708
02:43:40,200 --> 02:43:44,000
For another 2 episode block, until then have fun programming and I'll

2709
02:43:44,000 --> 02:43:45,300
see you guys on the internet.

2710
02:43:45,500 --> 02:43:46,400
Take it easy everyone.

