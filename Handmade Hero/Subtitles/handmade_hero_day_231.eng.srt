1
00:00:00,500 --> 00:00:01,400
Start recording.

2
00:00:02,300 --> 00:00:05,000
Hello everyone and welcome to handmade hero the show where we could

3
00:00:05,000 --> 00:00:09,800
complete game live on stream, except for tonight.

4
00:00:09,800 --> 00:00:12,400
And the reason for that is we have come to the point.

5
00:00:12,400 --> 00:00:14,500
They don't happen that often on the stream, but we have come to the

6
00:00:14,500 --> 00:00:17,700
point where we need to explain computer science.

7
00:00:17,700 --> 00:00:21,300
Fundamental, and so, today is going to be one of those days where we

8
00:00:21,300 --> 00:00:25,400
talked about at on the Whiteboard or Blackboard in this case.

9
00:00:26,500 --> 00:00:29,000
And so we're not really doing it again program right now.

10
00:00:29,000 --> 00:00:30,000
We are really just going to

11
00:00:30,200 --> 00:00:30,800
Talking about that.

12
00:00:30,800 --> 00:00:34,700
So, if you care about what order notation is or rather, if you don't

13
00:00:34,700 --> 00:00:37,500
know if you care, that's really the more important part.

14
00:00:37,500 --> 00:00:40,600
If you don't know if you care or don't like you haven't, you don't

15
00:00:40,600 --> 00:00:42,500
have a real firm enough grass.

16
00:00:42,500 --> 00:00:44,000
Want to know whether you care or not.

17
00:00:44,500 --> 00:00:48,500
This is probably the place to because you will have that answer in

18
00:00:48,500 --> 00:00:49,700
just a few short minutes.

19
00:00:49,700 --> 00:00:55,000
So, let's go ahead and get started on that and I will, I will go over

20
00:00:55,000 --> 00:00:59,900
here to the Blackboard day, too.

21
00:01:00,100 --> 00:01:05,200
3231 order notation.

22
00:01:08,100 --> 00:01:11,100
All right, my first, I want to start off with a really big caveat,

23
00:01:11,400 --> 00:01:16,400
which is to say that people who do like, sort of the formal discipline

24
00:01:16,400 --> 00:01:19,800
of computer science care about these sort of things a lot.

25
00:01:19,800 --> 00:01:22,900
And in fact, order notation is just a very small scratch of the

26
00:01:22,900 --> 00:01:25,800
surface of the sorts of theoretical Computing, things that they care

27
00:01:25,800 --> 00:01:26,400
about.

28
00:01:26,600 --> 00:01:29,100
I am not a theoretical computer scientist.

29
00:01:29,200 --> 00:01:32,600
And so, all of the things that I'm going to say on this stream Are For

30
00:01:32,600 --> 00:01:33,800
the Working programmer.

31
00:01:33,800 --> 00:01:37,300
If you will, we are going to be talking about order notation from the

32
00:01:37,400 --> 00:01:40,800
To have someone who's trying to make code run on a machine and cares

33
00:01:40,800 --> 00:01:42,700
about its performance characteristics.

34
00:01:43,100 --> 00:01:45,800
That is not all there is to this story.

35
00:01:45,800 --> 00:01:48,800
And so a number of the things that I say are going to be very

36
00:01:48,800 --> 00:01:53,200
simplified or they're not going to really go as far as you would want

37
00:01:53,200 --> 00:01:55,400
to go if you actually care about theoretical computer science.

38
00:01:55,400 --> 00:02:00,100
So what I would say is as we are going through this if you find

39
00:02:00,100 --> 00:02:02,900
yourself curious about these sorts of things are feel like you're kind

40
00:02:02,900 --> 00:02:03,800
of interested in it.

41
00:02:04,000 --> 00:02:07,300
In general, you may be interested in can in theoretical computer.

42
00:02:07,400 --> 00:02:11,300
ER science just as a discipline and I would encourage you to go read

43
00:02:11,300 --> 00:02:13,300
more about it or watch some lectures online.

44
00:02:13,300 --> 00:02:16,400
Maybe people have some recommendations they'll post on the handmade

45
00:02:16,400 --> 00:02:19,800
hero forums that you could look for to learn more about it because it

46
00:02:19,800 --> 00:02:20,900
is a really interesting field.

47
00:02:20,900 --> 00:02:25,600
It's not one that necessarily has immediate ramifications for what we

48
00:02:25,600 --> 00:02:26,600
do day to day all the time.

49
00:02:26,600 --> 00:02:27,600
But sometimes it does.

50
00:02:27,600 --> 00:02:30,100
And you know I wouldn't be talking about it if it didn't have

51
00:02:30,100 --> 00:02:32,100
ramifications what we're working on right now in our code for example

52
00:02:32,100 --> 00:02:36,000
but it's also just a theoretically interesting thing.

53
00:02:36,000 --> 00:02:37,300
And so if you do find that

54
00:02:37,700 --> 00:02:40,800
Please don't think that what I'm saying here tonight is really the

55
00:02:40,800 --> 00:02:41,400
full picture.

56
00:02:41,400 --> 00:02:45,400
It's not, it's just the basics to help you understand how to apply it

57
00:02:45,400 --> 00:02:46,300
and how to use it.

58
00:02:46,600 --> 00:02:51,500
The more richer more interesting parts of it are you know, well beyond

59
00:02:51,500 --> 00:02:55,000
my computer science background certainly and they're best left to

60
00:02:55,000 --> 00:02:56,800
someone who's a professional in that field.

61
00:02:57,200 --> 00:02:59,800
So that caveat aside, let's talk about order notation.

62
00:03:00,000 --> 00:03:01,200
You've seen it even on this stream.

63
00:03:01,200 --> 00:03:04,500
We've mentioned it, briefly and I gave her door capsule overview of

64
00:03:04,500 --> 00:03:04,600
it.

65
00:03:04,600 --> 00:03:06,100
But I want to sort of get it out of the way.

66
00:03:06,100 --> 00:03:08,500
Now, once and for all, and we're on sorting, which is kind of a

67
00:03:08,500 --> 00:03:12,100
classic place for this thing would be covered.

68
00:03:12,300 --> 00:03:13,300
So let's talk about that.

69
00:03:13,300 --> 00:03:18,000
Now you've seen order a notation before, probably something like this.

70
00:03:18,300 --> 00:03:22,500
Typically, it has a no a large 0 Capital that it's not a zero.

71
00:03:22,600 --> 00:03:26,400
It is an oh, and it's got a parenthesis and then there's something in

72
00:03:26,400 --> 00:03:29,800
the parentheses oftentimes involving an end.

73
00:03:30,000 --> 00:03:32,800
Then it can involve other things too, but oftentimes will see

74
00:03:32,800 --> 00:03:36,500
something like this and people will often say it to, they'll say, oh,

75
00:03:36,500 --> 00:03:41,700
that's 0n, or they'll say, oh, and squared, right?

76
00:03:41,800 --> 00:03:42,300
You'll hear them.

77
00:03:42,300 --> 00:03:43,400
Say this out loud.

78
00:03:43,600 --> 00:03:46,300
When they say, oh, and squared, they're talking about that, right?

79
00:03:46,300 --> 00:03:48,900
So people will typically say the oh, and then they'll say, what's in

80
00:03:48,900 --> 00:03:51,300
the parentheses and that is what they're talking about.

81
00:03:51,300 --> 00:03:54,200
And we've talked about this on handmade here on, we've used the term

82
00:03:54,600 --> 00:03:55,800
but we never covered in detail.

83
00:03:55,800 --> 00:03:56,900
So what is it?

84
00:03:57,100 --> 00:03:59,400
What is this notation?

85
00:03:59,400 --> 00:03:59,800
Really me.

86
00:04:00,400 --> 00:04:01,600
Why do we care?

87
00:04:01,800 --> 00:04:03,200
Blah, blah blah, right?

88
00:04:04,400 --> 00:04:09,600
Okay, what this is is it's an attempt to talk about how an algorithm

89
00:04:09,600 --> 00:04:13,100
scales with the amount of work that you expect it to do.

90
00:04:14,400 --> 00:04:18,399
So what we talk about when we talk about work is we typically talk

91
00:04:18,399 --> 00:04:23,600
about like some kind of a unit and the unit is what's represented by

92
00:04:23,600 --> 00:04:24,000
n.

93
00:04:24,200 --> 00:04:27,700
And so for example, we're talking about sorting right now.

94
00:04:28,400 --> 00:04:33,400
The number of individual elements that you expect to sort might be

95
00:04:33,400 --> 00:04:34,100
like the single

96
00:04:34,300 --> 00:04:37,600
The unit that we're talking about here, that refers to n.

97
00:04:38,000 --> 00:04:42,400
So when we say, n in the content in sort of the context of order

98
00:04:42,400 --> 00:04:46,800
notation, what we're saying is, how many units of work do you expect

99
00:04:46,800 --> 00:04:48,200
us to do in the sort?

100
00:04:48,200 --> 00:04:49,900
How many things do you expect to be sorted?

101
00:04:49,900 --> 00:04:52,400
If you give me a list of 10 things to sort?

102
00:04:52,500 --> 00:04:56,900
Then, in terms of order notation typically, that means that the N when

103
00:04:56,900 --> 00:05:00,000
we say, N means that 10 right.

104
00:05:01,500 --> 00:05:01,900
Okay.

105
00:05:02,400 --> 00:05:03,700
Now, why do we say n?

106
00:05:03,700 --> 00:05:04,800
Why don't we just say 10?

107
00:05:04,800 --> 00:05:07,200
Well, the reason is because typically when we're talking about order

108
00:05:07,200 --> 00:05:09,000
notation we want to know how something scales.

109
00:05:09,000 --> 00:05:13,400
So we're inherently saying, we don't know, we don't want to say ahead

110
00:05:13,400 --> 00:05:13,800
of time.

111
00:05:13,800 --> 00:05:15,200
How many work units were doing?

112
00:05:15,900 --> 00:05:20,400
We want your, or we want this branch of the math to tell us how our

113
00:05:20,400 --> 00:05:25,100
algorithm performs across the whole range of possible workloads.

114
00:05:25,100 --> 00:05:28,400
It could be assigned and so that's where the end comes from.

115
00:05:28,400 --> 00:05:31,000
The end, comes from a saying, we're not going to say ahead of

116
00:05:31,200 --> 00:05:31,600
Time.

117
00:05:31,700 --> 00:05:32,800
How many work units we want to do.

118
00:05:32,800 --> 00:05:36,700
We want you to tell us something about this algorithm so that we have

119
00:05:36,700 --> 00:05:38,800
an idea of how it will perform?

120
00:05:38,800 --> 00:05:42,400
As we scale up the amount of work,

121
00:05:44,900 --> 00:05:46,000
Very, very basic.

122
00:05:46,600 --> 00:05:49,300
Let's take it up to a slightly more complex level.

123
00:05:49,300 --> 00:05:49,800
All right.

124
00:05:50,200 --> 00:05:53,200
Now, if you were to just think about this from a non-computer science

125
00:05:53,200 --> 00:05:56,500
standpoint from a non programming standpoint as just a naive person.

126
00:05:56,500 --> 00:05:59,800
Perhaps looking at this problem you might say.

127
00:06:00,000 --> 00:06:03,900
Something well like well I don't know what you mean by.

128
00:06:03,900 --> 00:06:05,900
How does it scale, right?

129
00:06:05,900 --> 00:06:09,700
Because in the real world typically, when we talk about specific

130
00:06:09,700 --> 00:06:13,600
things, that a human might do scale, is always what you might call

131
00:06:13,600 --> 00:06:15,400
linear most of the time.

132
00:06:15,800 --> 00:06:20,300
Okay, what that means is that every time I ask you to do a certain

133
00:06:20,300 --> 00:06:24,800
amount more work, it will take you a certain amount, more time, okay?

134
00:06:25,200 --> 00:06:29,600
If I'm asking you to put stamps on envelopes.

135
00:06:30,000 --> 00:06:35,100
Right then if it takes you one minute and don't ask me why to stamp

136
00:06:35,100 --> 00:06:36,900
one envelope, right?

137
00:06:37,200 --> 00:06:41,700
Then we would often expect it to take five minutes to Stamp five

138
00:06:41,700 --> 00:06:42,400
envelopes.

139
00:06:43,300 --> 00:06:46,500
That's just the kind of thing we're used to seeing as humans.

140
00:06:46,500 --> 00:06:49,200
Now, it's not always true, there are things we could pick.

141
00:06:49,200 --> 00:06:51,000
That wouldn't be true, right?

142
00:06:51,900 --> 00:06:54,700
But I'm just trying to give you a little bit of a foothold into why it

143
00:06:54,700 --> 00:06:57,000
may be not intuitive, some of the things we're talking about.

144
00:06:57,200 --> 00:06:59,800
If you've never seen any of this before, if you have seen it before,

145
00:07:00,000 --> 00:07:01,900
Probably into it by now but you get the idea.

146
00:07:02,900 --> 00:07:06,000
Okay, so that is what we would call linear and the reason we would

147
00:07:06,000 --> 00:07:11,300
call it linear, right is specifically because of this whole concept up

148
00:07:11,300 --> 00:07:15,300
here if we were to write an equation that talked about or not an

149
00:07:15,300 --> 00:07:21,100
equation, just an expression that talked about how long it took you to

150
00:07:21,100 --> 00:07:21,900
do something.

151
00:07:22,000 --> 00:07:24,600
Well this obviously is my n write.

152
00:07:24,600 --> 00:07:28,200
The number of envelopes is the number of work units.

153
00:07:28,500 --> 00:07:29,800
So I am talking about

154
00:07:29,900 --> 00:07:31,300
n envelopes.

155
00:07:32,800 --> 00:07:37,100
And if for example I made a slightly more complicated thing so it took

156
00:07:37,100 --> 00:07:41,300
2 minutes per envelope so it took 10 minutes, 45 right.

157
00:07:41,500 --> 00:07:44,700
Then you could easily just just if you've had any math at all,

158
00:07:44,700 --> 00:07:48,400
instantly tell me how long it takes to do n envelopes, correct?

159
00:07:48,500 --> 00:07:50,500
You would say it takes two minutes.

160
00:07:52,500 --> 00:07:54,800
Times on N, right?

161
00:07:55,100 --> 00:07:56,700
That is the time right?

162
00:07:57,000 --> 00:08:00,200
And furthermore I might leave the units in there and say and envelopes

163
00:08:00,300 --> 00:08:02,300
at 2 minutes per envelope.

164
00:08:03,400 --> 00:08:06,500
The envelopes cancel and I just get to end minutes.

165
00:08:07,800 --> 00:08:08,300
Right.

166
00:08:09,000 --> 00:08:14,300
That is why we might say it is linear because the factor, right?

167
00:08:14,300 --> 00:08:16,700
The, the exponent I should say, not the factor.

168
00:08:16,700 --> 00:08:20,800
The exponent on our n is 1, right?

169
00:08:20,800 --> 00:08:21,700
It's linear.

170
00:08:21,900 --> 00:08:28,000
It looks when I graph it, like a line here is my, you know, number of

171
00:08:28,000 --> 00:08:33,900
envelopes, here are my minutes and this goes up and I said it was too,

172
00:08:33,900 --> 00:08:36,200
and so it's probably a little more like that, right?

173
00:08:36,500 --> 00:08:37,299
But it's a line.

174
00:08:38,600 --> 00:08:38,900
Okay.

175
00:08:39,600 --> 00:08:43,600
Now, if all the things huge humans did that are typical like this.

176
00:08:43,600 --> 00:08:46,900
If that was all that computers ever wanted to do, we probably never

177
00:08:46,900 --> 00:08:48,500
would have developed order notation at all.

178
00:08:48,500 --> 00:08:51,200
In fact, we probably wouldn't care and I wouldn't be suspending this

179
00:08:51,200 --> 00:08:52,900
stream time explaining it to you.

180
00:08:53,600 --> 00:08:57,500
But computers often do things that are much more complicated than what

181
00:08:57,500 --> 00:08:58,500
humans are expected to do.

182
00:08:58,500 --> 00:08:59,800
In fact, that's why we have

183
00:09:00,000 --> 00:09:02,800
Peter's, if they didn't then why do we even have them?

184
00:09:02,800 --> 00:09:03,300
Right.

185
00:09:04,200 --> 00:09:08,200
And oftentimes, what happens is we will produce algorithms that are

186
00:09:08,200 --> 00:09:09,100
not linear

187
00:09:10,800 --> 00:09:14,300
So let's take an example of what that might be and I'll give you an

188
00:09:14,300 --> 00:09:16,800
example of how it could happen even in the human world.

189
00:09:17,900 --> 00:09:22,800
I am going to give you an envelopes like I did before.

190
00:09:24,400 --> 00:09:26,000
And now what I want you to do.

191
00:09:27,100 --> 00:09:31,800
Is I want you to go through and tell me if any of these two envelopes

192
00:09:31,800 --> 00:09:33,800
are addressed to the same person.

193
00:09:35,700 --> 00:09:36,400
Right.

194
00:09:36,500 --> 00:09:42,800
I would like you to check to see if the address on any given envelope

195
00:09:42,800 --> 00:09:44,800
matches the address on any other envelope.

196
00:09:45,200 --> 00:09:47,200
And if it does, I want you to tell me.

197
00:09:48,700 --> 00:09:49,800
Very simple, right?

198
00:09:50,000 --> 00:09:54,500
Well, even if you're a human, you've got a problem, the most naive way

199
00:09:54,500 --> 00:09:54,800
to do.

200
00:09:54,800 --> 00:09:58,200
This might be to pick up one envelope and look at all the other

201
00:09:58,200 --> 00:09:58,900
envelopes.

202
00:09:59,000 --> 00:10:02,900
One at a time and see if they match if they don't.

203
00:10:02,900 --> 00:10:05,800
You know, that that envelope is fine and you put it aside, you then

204
00:10:05,800 --> 00:10:07,400
pick up the next one and you go through it.

205
00:10:08,700 --> 00:10:09,900
How long would that take you?

206
00:10:10,900 --> 00:10:11,500
Right.

207
00:10:11,500 --> 00:10:15,800
Well, you can imagine if we could quantify the amount of time, it took

208
00:10:15,800 --> 00:10:19,900
you to look at one at one address and the other artists and see if

209
00:10:19,900 --> 00:10:20,600
they match.

210
00:10:20,600 --> 00:10:25,000
Let's say it took something like five seconds to do that, so five

211
00:10:25,300 --> 00:10:26,900
seconds per pair,

212
00:10:29,200 --> 00:10:32,100
Then we would simply need to know how many of those do you have to do?

213
00:10:32,200 --> 00:10:35,900
Well, you're going to take the first envelope, right?

214
00:10:35,900 --> 00:10:37,900
And you're going to compare it to all the other envelopes.

215
00:10:38,200 --> 00:10:41,200
That would be n of these comparisons, right?

216
00:10:41,200 --> 00:10:44,400
So, that's n comparisons for the first envelope alone.

217
00:10:45,000 --> 00:10:47,800
Then we would have to add to that, right?

218
00:10:48,800 --> 00:10:51,100
We put that envelope aside, we don't need to look at anymore.

219
00:10:51,100 --> 00:10:54,200
We pick up the next one and we'd have to look for through all of them.

220
00:10:54,600 --> 00:10:57,100
So now, how many pairs are there again?

221
00:10:57,100 --> 00:10:58,600
Well, you know, ahh.

222
00:10:59,000 --> 00:11:03,700
We have one less pair so really, it would be something like n minus 1,

223
00:11:03,700 --> 00:11:04,300
right?

224
00:11:04,300 --> 00:11:08,800
And we keep going all the way down, right?

225
00:11:08,800 --> 00:11:14,100
Until we got, you know, to just the till we got this all the way down

226
00:11:14,300 --> 00:11:15,700
just to one, right?

227
00:11:17,200 --> 00:11:18,100
There's got to be a minus 1.

228
00:11:18,100 --> 00:11:21,100
N minus 2 and minus 3, m as far as fought until they got all the way

229
00:11:21,100 --> 00:11:22,900
till this was n, right?

230
00:11:23,500 --> 00:11:26,500
And so, if you look what happens as this kind of goes out and out and

231
00:11:26,500 --> 00:11:28,600
out depending on how big it is.

232
00:11:28,800 --> 00:11:31,700
What you can see here is that if we were to add up all of the ends,

233
00:11:31,700 --> 00:11:31,800
right?

234
00:11:31,800 --> 00:11:36,100
If I was to distribute here, I'd get n and this is the plus and minus

235
00:11:36,100 --> 00:11:38,600
1 plus n minus 2.

236
00:11:39,000 --> 00:11:43,100
I'm going to get as many ends because remember, I've got as many terms

237
00:11:43,100 --> 00:11:47,700
here, I've got n minus one of these terms, right?

238
00:11:47,700 --> 00:11:50,600
Because this till I get in all the way down to zero, I'm going to I

239
00:11:50,600 --> 00:11:54,700
gotta keep going and so that means there will be n.

240
00:11:55,100 --> 00:11:56,100
N terms.

241
00:11:56,700 --> 00:11:59,200
Or N squared, right?

242
00:11:59,600 --> 00:11:59,800
Which

243
00:12:00,000 --> 00:12:03,600
That the number of envelope pairs, I have to look at is going to be

244
00:12:03,600 --> 00:12:05,100
proportional to N squared.

245
00:12:05,400 --> 00:12:07,600
Now, there's a subtraction in here, right?

246
00:12:07,700 --> 00:12:10,400
I have n minus 1 times n as well.

247
00:12:10,400 --> 00:12:14,300
That gets removed from there, but, you know, I'm sorry not and and

248
00:12:14,300 --> 00:12:18,700
minus 1, I have n, minus 1, the constant that gets removed from their

249
00:12:18,800 --> 00:12:24,400
right because these these constants get removed from their right, but

250
00:12:24,400 --> 00:12:29,100
those don't actually subtracting a single end from an N squared, is

251
00:12:29,100 --> 00:12:29,900
just going to give you

252
00:12:30,000 --> 00:12:32,300
You, you know, N squared minus n or something like this, right?

253
00:12:32,300 --> 00:12:34,300
It's going to only get, take away a very small amount.

254
00:12:34,900 --> 00:12:38,300
And so typically, when we're working on the order, notation for

255
00:12:38,300 --> 00:12:41,500
something, meaning, how long we expect something to happen?

256
00:12:41,700 --> 00:12:45,100
Often times, you don't even really care about that part of it, if that

257
00:12:45,100 --> 00:12:45,700
makes sense.

258
00:12:45,800 --> 00:12:46,300
Right.

259
00:12:46,500 --> 00:12:49,800
And so, usually this part is the only part we concentrate on now.

260
00:12:49,800 --> 00:12:50,500
Why is that?

261
00:12:50,600 --> 00:12:52,400
Why is that the only part that becomes pretty well.

262
00:12:52,400 --> 00:12:56,400
First, let me just observe, this is the nonlinear part here, right?

263
00:12:57,000 --> 00:12:59,800
The fact that we now have an exponent on this thing, that is not

264
00:13:00,000 --> 00:13:04,000
One that means that this is nonlinear in the amount of work that we

265
00:13:04,000 --> 00:13:06,900
have to do even for a human, right?

266
00:13:07,800 --> 00:13:10,200
A human has to do this much work.

267
00:13:10,500 --> 00:13:12,900
There's nothing special about it being a computer or otherwise.

268
00:13:13,100 --> 00:13:17,500
So, somewhere around the proportion and squared is the amount of work

269
00:13:17,500 --> 00:13:18,900
you might expect to do.

270
00:13:19,000 --> 00:13:22,200
And so if it took five seconds, prepare your thinking of something

271
00:13:22,200 --> 00:13:24,300
like 5 Seconds, right time?

272
00:13:24,300 --> 00:13:27,400
Something like N squared if you want to be precise, maybe you do N

273
00:13:27,400 --> 00:13:27,800
squared.

274
00:13:27,800 --> 00:13:29,800
Minus n, minus 1, minus 1, or

275
00:13:29,900 --> 00:13:30,400
Like that.

276
00:13:30,400 --> 00:13:32,900
Maybe you try to make a little more accurate, but this is about as

277
00:13:32,900 --> 00:13:34,300
accurate need to be for our purposes.

278
00:13:34,400 --> 00:13:38,400
So even if you didn't have something, that was this clean, as long as

279
00:13:38,400 --> 00:13:38,900
whatever.

280
00:13:38,900 --> 00:13:40,400
The thing is that you created.

281
00:13:40,400 --> 00:13:44,200
As long as you could clearly, see how many n terms there would be,

282
00:13:44,600 --> 00:13:46,600
that would be enough for our purposes.

283
00:13:46,900 --> 00:13:49,300
So anyway, so just ignore that for now because like I said, it's not

284
00:13:49,300 --> 00:13:52,200
important, you'll see why in a second, but point being it be something

285
00:13:52,200 --> 00:13:54,900
like 5 seconds on the order of N squared, right?

286
00:13:54,900 --> 00:13:58,800
So B 5n squared seconds and that's how much work you would expect it

287
00:13:58,800 --> 00:13:59,800
to be for us.

288
00:14:00,000 --> 00:14:01,400
An envelope comparisons.

289
00:14:02,300 --> 00:14:05,000
Now, why do we care about that?

290
00:14:05,000 --> 00:14:08,300
Well, the reason we care about that is because you'd imagine what

291
00:14:08,300 --> 00:14:09,100
graph shape.

292
00:14:09,100 --> 00:14:12,300
This might be here was the graph shape of something that was linear

293
00:14:12,800 --> 00:14:17,600
and as you can see as we add more work to do, we spend more time in

294
00:14:17,600 --> 00:14:19,000
exactly that proportion.

295
00:14:19,800 --> 00:14:20,300
Okay.

296
00:14:21,300 --> 00:14:25,800
But if we had something that was N squared, that's going to look like

297
00:14:25,800 --> 00:14:26,800
a parabola, right?

298
00:14:26,800 --> 00:14:28,000
It's going to look like this.

299
00:14:28,600 --> 00:14:33,800
And it gets to a point where it's extremely extremely steep the

300
00:14:33,800 --> 00:14:36,400
difference in computing power or human power.

301
00:14:36,400 --> 00:14:41,100
In this case human time you know this might be an hour but just add a

302
00:14:41,100 --> 00:14:45,000
few more envelopes and all of a sudden you're at two hours, right?

303
00:14:45,000 --> 00:14:49,900
Whereas before that same number of envelopes, added would only cost

304
00:14:49,900 --> 00:14:51,800
you another five minutes or something.

305
00:14:51,800 --> 00:14:52,900
Let's say, right?

306
00:14:52,900 --> 00:14:57,500
So what that means is there's a very real

307
00:14:58,600 --> 00:14:59,500
All difference.

308
00:15:00,000 --> 00:15:05,900
These two tasks and the conceptual difference is that in the linear

309
00:15:05,900 --> 00:15:10,300
case, I can always without even knowing how many envelopes were

310
00:15:10,300 --> 00:15:11,400
talking about.

311
00:15:11,400 --> 00:15:16,200
I can always tell you the exact amount of time extra you will need to

312
00:15:16,200 --> 00:15:18,500
do a certain number more envelopes.

313
00:15:18,500 --> 00:15:21,400
It's always the same want to do five more envelopes.

314
00:15:21,400 --> 00:15:25,700
It's 10 more minutes with anything that is super linear, right?

315
00:15:25,700 --> 00:15:27,200
It's not end to the first.

316
00:15:27,200 --> 00:15:29,800
It send to the second and the third end of the 10th.

317
00:15:30,000 --> 00:15:30,700
Heaven, help you.

318
00:15:32,000 --> 00:15:33,100
No longer true.

319
00:15:33,100 --> 00:15:35,900
Now, there is a Breaking Point in the algorithm.

320
00:15:35,900 --> 00:15:40,500
There is a point where the curve gets so steep that even just adding a

321
00:15:40,500 --> 00:15:44,900
single extra envelope would be so expensive that you could never hope

322
00:15:44,900 --> 00:15:45,500
to do it.

323
00:15:47,800 --> 00:15:48,300
Right.

324
00:15:53,000 --> 00:15:56,400
That's the bummer of super linear algorithms.

325
00:15:56,400 --> 00:15:59,400
Now, let's go back down here to what we're talking about with order

326
00:15:59,400 --> 00:16:00,000
notation.

327
00:16:00,500 --> 00:16:03,800
Hopefully, now you can start to see why we might care about the

328
00:16:03,800 --> 00:16:07,600
concept of order notation because order notation is precisely the

329
00:16:07,600 --> 00:16:12,800
thing that boils things down into how long we expect them to take as

330
00:16:12,800 --> 00:16:13,500
they scale.

331
00:16:14,200 --> 00:16:17,700
So when we say that something is 0 and we are talking about the linear

332
00:16:17,700 --> 00:16:18,200
case.

333
00:16:18,300 --> 00:16:20,700
When we say that something is O N squared we are talking about the

334
00:16:20,700 --> 00:16:22,700
squared case, we are literally talking

335
00:16:23,100 --> 00:16:26,400
About the things we just did in our simple examples.

336
00:16:27,100 --> 00:16:31,400
So in Auto and algorithm can be expected to be scaled, very

337
00:16:31,400 --> 00:16:32,300
gracefully.

338
00:16:33,200 --> 00:16:35,800
As I add more things, I spend more time.

339
00:16:35,900 --> 00:16:39,400
Exactly proportional to the number of things I added, and I can keep

340
00:16:39,400 --> 00:16:42,700
doing that forever without ever expecting to hit a Breaking Point.

341
00:16:42,700 --> 00:16:46,400
The time just keeps going up proportionally and off I go, right?

342
00:16:46,800 --> 00:16:50,500
Very very predictable, very stable, very easy to deal with

343
00:16:51,600 --> 00:16:52,200
it's nice.

344
00:16:53,100 --> 00:16:56,000
As soon as I start talking about something that doesn't have that that

345
00:16:56,000 --> 00:16:59,600
is super linear and then has something in that exponent bad news.

346
00:16:59,600 --> 00:17:04,000
That's very bad news and the reason that it's bad news is because that

347
00:17:04,000 --> 00:17:07,000
N squared means that there will be a breaking point, I don't know

348
00:17:07,000 --> 00:17:10,200
where it is but somewhere there will be a breaking point where I will

349
00:17:10,200 --> 00:17:15,000
no longer be able to add Computing resources or human Manpower

350
00:17:15,000 --> 00:17:17,800
whatever it is that I'm feeding into this algorithm fire.

351
00:17:18,099 --> 00:17:21,200
I will some point reach that point of the Curve.

352
00:17:21,700 --> 00:17:24,000
Where the game is over, right?

353
00:17:24,099 --> 00:17:27,800
And it's here and just adding even one more envelope just cause this

354
00:17:27,800 --> 00:17:31,100
ridiculous amount of nastiness, right?

355
00:17:32,300 --> 00:17:35,500
Whereas I was used to doing it here so I'm scaling I'm scaling I'm

356
00:17:35,500 --> 00:17:38,700
scaling oh it's kind of working in an up forget it now it's like it's

357
00:17:38,700 --> 00:17:41,100
just everything ground to a halt and I can never process any more

358
00:17:41,100 --> 00:17:41,700
envelopes.

359
00:17:42,000 --> 00:17:42,400
Right.

360
00:17:44,000 --> 00:17:47,200
So that is the basic idea behind order notation.

361
00:17:47,500 --> 00:17:51,400
It's to say, let's break an algorithm down into the fundamental size

362
00:17:51,400 --> 00:17:52,300
of its input.

363
00:17:52,400 --> 00:17:54,600
How many work units is it expected to do?

364
00:17:55,200 --> 00:17:59,500
And then let's classify it based on how it will scale.

365
00:18:00,300 --> 00:18:03,300
Now, you'll notice what I didn't include in the order notation is

366
00:18:03,300 --> 00:18:04,100
something like this.

367
00:18:04,100 --> 00:18:05,900
Five seconds here, right?

368
00:18:06,300 --> 00:18:09,500
None of that stuff made it down here, why?

369
00:18:09,600 --> 00:18:11,700
Because I don't care, right?

370
00:18:11,700 --> 00:18:12,800
I just don't care.

371
00:18:12,900 --> 00:18:15,500
I'm talking about how it scales.

372
00:18:16,000 --> 00:18:19,600
Now, that doesn't mean that CS doesn't ever talk about this?

373
00:18:19,600 --> 00:18:23,200
It does often times, it will say, well, there's a constant Factor,

374
00:18:23,300 --> 00:18:23,900
right?

375
00:18:24,000 --> 00:18:25,500
So when I say some things, Owen school.

376
00:18:26,000 --> 00:18:27,600
Oh, and rather or O?

377
00:18:27,600 --> 00:18:28,700
N squared, what?

378
00:18:28,700 --> 00:18:29,800
I'm really talking about you.

379
00:18:30,000 --> 00:18:30,200
Ali.

380
00:18:30,200 --> 00:18:30,600
Is that it?

381
00:18:30,600 --> 00:18:35,800
So some constant times n or o some constant and squared and they will

382
00:18:35,800 --> 00:18:38,800
talk about that when they actually do their proofs and elevations,

383
00:18:38,800 --> 00:18:43,300
they will often even compute what the sea is in some sort of you know,

384
00:18:43,300 --> 00:18:45,500
if they're talking about some abstract machine they might even

385
00:18:45,500 --> 00:18:47,100
included who knows right?

386
00:18:48,100 --> 00:18:53,300
But the reason that we don't actually care about that very much when

387
00:18:53,300 --> 00:18:56,400
we're talking about order notation is because order notation is about

388
00:18:56,400 --> 00:18:59,900
how things scale and the constant doesn't affect

389
00:19:00,000 --> 00:19:07,700
Scaling the constant just affects how bad the overall cost is right.

390
00:19:07,800 --> 00:19:11,500
But it doesn't change where that Breaking Point really, is because the

391
00:19:11,500 --> 00:19:16,000
breaking point is about the steepness of this curve or sorry.

392
00:19:16,000 --> 00:19:19,300
The change I should say, in steepness of this curve over time.

393
00:19:19,600 --> 00:19:23,400
And if I was to elongate, if I was to multiply this curve by some

394
00:19:23,400 --> 00:19:27,900
constant, yes, the curve, you know, gets more like that or whatever,

395
00:19:28,100 --> 00:19:29,800
but the general scaling,

396
00:19:30,400 --> 00:19:33,800
You know, sort of look of the curve doesn't change.

397
00:19:33,800 --> 00:19:36,100
It doesn't go like that.

398
00:19:36,200 --> 00:19:39,100
For example, where the breaking point happens when it sooner.

399
00:19:39,300 --> 00:19:43,900
It's just a gradual sort of stretching of the curve that that's keeps

400
00:19:43,900 --> 00:19:45,100
its exact same shape.

401
00:19:45,500 --> 00:19:46,000
Right.

402
00:19:47,200 --> 00:19:52,400
So typically you know yes, does the constant Factor matter to people

403
00:19:52,400 --> 00:19:53,400
when we're implementing?

404
00:19:53,500 --> 00:19:54,400
Absolutely.

405
00:19:54,400 --> 00:19:57,700
Because that constant Factor when we start to talk about algorithms is

406
00:19:57,700 --> 00:19:59,800
how many instructions it takes to do each and

407
00:20:00,000 --> 00:20:02,400
Raishin of this Loop or things like that, right?

408
00:20:02,700 --> 00:20:07,000
So we do care about the constant Factor coming Plantation time but

409
00:20:07,000 --> 00:20:09,800
when we want to talk about how something scales, we don't care what

410
00:20:09,800 --> 00:20:10,500
the constant is.

411
00:20:11,100 --> 00:20:14,500
We just want to know this because that's the answer to the scaling

412
00:20:14,500 --> 00:20:15,100
question.

413
00:20:15,800 --> 00:20:19,000
The performance question is more complicated that involves the

414
00:20:19,000 --> 00:20:22,400
constant Factor but the scaling doesn't.

415
00:20:23,400 --> 00:20:26,900
And so what you know is that if you have a no anything no matter what

416
00:20:26,900 --> 00:20:28,700
the constant is, it's scales.

417
00:20:29,500 --> 00:20:33,100
It may be really slow but it's never going to hit a point where it

418
00:20:33,100 --> 00:20:36,400
becomes drastically more slow, right?

419
00:20:36,400 --> 00:20:41,300
It's always going to be the same amount slow when I add new stuff and

420
00:20:41,300 --> 00:20:42,600
squared not true.

421
00:20:43,100 --> 00:20:45,600
Could be extraordinarily extraordinarily fast.

422
00:20:45,600 --> 00:20:50,100
Very, very low constant but I can give you enough items until we're

423
00:20:50,200 --> 00:20:53,000
adding one more to it would be a breaking point for you no matter how

424
00:20:53,000 --> 00:20:54,100
fast the algorithm is.

425
00:20:54,300 --> 00:20:58,400
And that's the important part to internalize about order notation.

426
00:20:58,400 --> 00:20:59,100
It's telling you

427
00:20:59,300 --> 00:20:59,900
How something?

428
00:21:00,000 --> 00:21:02,900
Tails out to Infinity like as we add more and more and more units,

429
00:21:02,900 --> 00:21:07,200
what will happen to this thing and the constant doesn't come into play

430
00:21:07,200 --> 00:21:07,600
there.

431
00:21:07,800 --> 00:21:12,700
The constant just is a thing that talks about the reality of a

432
00:21:12,700 --> 00:21:17,400
specific implementation and how fast it will run for a given number of

433
00:21:17,400 --> 00:21:17,700
units.

434
00:21:17,700 --> 00:21:18,200
Yes.

435
00:21:18,700 --> 00:21:21,400
But in terms of knowing whether it will scale not relevant.

436
00:21:22,800 --> 00:21:23,200
Okay.

437
00:21:24,400 --> 00:21:25,800
So how does this translate into code?

438
00:21:25,800 --> 00:21:28,300
Well, it's very, very simple to understand how this translates into

439
00:21:28,300 --> 00:21:28,800
code.

440
00:21:28,800 --> 00:21:35,200
Actually, it's a for our Loop, basically, I mean, essentially you can

441
00:21:35,200 --> 00:21:37,600
think of things as being that simple.

442
00:21:37,600 --> 00:21:42,800
It's like okay I've got a for I Loop I'm going to say for I equals 0,

443
00:21:43,500 --> 00:21:51,900
you know I is less than you know n plus plus I that is 0 n right?

444
00:21:51,900 --> 00:21:52,500
I am going

445
00:21:52,600 --> 00:21:54,300
Iterate over and items.

446
00:21:55,500 --> 00:21:56,000
Done.

447
00:21:56,500 --> 00:21:57,300
This is a know.

448
00:21:57,300 --> 00:21:57,900
Anything.

449
00:21:57,900 --> 00:21:58,500
It will scale.

450
00:21:58,500 --> 00:22:00,000
Linearly everyone's happy.

451
00:22:00,300 --> 00:22:03,900
What if I do this for J, equals 0.

452
00:22:04,100 --> 00:22:07,400
J less than n + + J.

453
00:22:08,700 --> 00:22:10,700
And now this is where my algorithm takes place.

454
00:22:10,800 --> 00:22:13,100
Uh-oh, there's an end Loop.

455
00:22:13,100 --> 00:22:14,800
This is an end Loop, right?

456
00:22:15,200 --> 00:22:18,700
Every time I go through this loop, I have to go through all in items

457
00:22:18,700 --> 00:22:22,600
again, suddenly we've Hit N squared, right?

458
00:22:23,800 --> 00:22:27,900
And so really, it does directly translate conceptually in to coat.

459
00:22:27,900 --> 00:22:30,400
It is not a purely theoretical thing.

460
00:22:31,500 --> 00:22:35,400
It is all theory that you can use in a pure Theory sense, but it

461
00:22:35,400 --> 00:22:38,300
actually is exactly translatable into code.

462
00:22:38,600 --> 00:22:41,700
It's the loops in your code right?

463
00:22:42,400 --> 00:22:44,300
Or some you could write it with tail, recursion.

464
00:22:44,300 --> 00:22:46,700
There's nothing a recursive functions have this property, as well.

465
00:22:46,700 --> 00:22:48,500
Like, how many times will, they were curse?

466
00:22:48,800 --> 00:22:50,600
That's also could be an N, right?

467
00:22:50,700 --> 00:22:55,800
But Basics Loops, how many nested Loops do you have one level of

468
00:22:55,800 --> 00:23:00,700
nested Loop on2 levels of nested loops and squared, three levels and

469
00:23:00,700 --> 00:23:04,100
Cubed and forth and so on and and so on, right?

470
00:23:06,400 --> 00:23:11,400
All right, so that's that's the basics of order notation.

471
00:23:11,800 --> 00:23:14,700
Okay, let me tell you a few other things about it.

472
00:23:14,700 --> 00:23:15,500
Let me check my time.

473
00:23:15,500 --> 00:23:16,700
I've got about a half an hour.

474
00:23:16,700 --> 00:23:20,600
So let me tell you a little bit more about it so that you can have a

475
00:23:20,600 --> 00:23:22,300
little bit of a foothold into it.

476
00:23:22,300 --> 00:23:24,800
If you would like to go explore it, more on your own because like I

477
00:23:24,800 --> 00:23:29,100
said, it's a very, very rich theoretical area that computer scientists

478
00:23:29,100 --> 00:23:33,300
are working on all the time and you may find interesting to go read

479
00:23:33,300 --> 00:23:35,400
about some of the stuff that they've done, okay?

480
00:23:37,700 --> 00:23:40,100
So there's other things.

481
00:23:40,800 --> 00:23:43,300
So let's talk about first that 0n.

482
00:23:43,400 --> 00:23:45,500
What does it really talk about, right?

483
00:23:45,800 --> 00:23:50,700
Well, this may be a very simplistic view of what it might look like in

484
00:23:50,700 --> 00:23:56,400
the code, because maybe there's a break statement in here, right?

485
00:23:56,700 --> 00:23:59,900
And that break statement is inside some, if, and that if

486
00:24:00,000 --> 00:24:06,100
Vigorous sometimes that means that when I run this program I may not

487
00:24:06,100 --> 00:24:08,400
actually execute N squared.

488
00:24:08,800 --> 00:24:09,900
Loop iterations.

489
00:24:10,000 --> 00:24:13,200
I may exclude only one I get in there and break immediately.

490
00:24:13,300 --> 00:24:19,000
I may execute and I may execute all in squared, I don't know, right?

491
00:24:19,600 --> 00:24:23,400
And so it's important to think about what we actually mean when we say

492
00:24:23,400 --> 00:24:28,800
0 n 0, N squared, what the Big O notation actually refers to is worst

493
00:24:28,800 --> 00:24:29,400
case.

494
00:24:30,700 --> 00:24:31,400
Running time.

495
00:24:34,300 --> 00:24:37,700
And I shouldn't really say that that's what the Big O stands for, what

496
00:24:37,700 --> 00:24:40,700
I probably should say it again you really want to go read up about

497
00:24:40,700 --> 00:24:42,900
this if you want to be very specific.

498
00:24:43,400 --> 00:24:45,900
I don't get very pedantic about these things but if you want to you

499
00:24:46,100 --> 00:24:48,100
you're going to want to go read everything, right?

500
00:24:49,000 --> 00:24:54,300
But what I should say is when people throw around the term 0, N

501
00:24:54,300 --> 00:24:54,800
squared.

502
00:24:55,100 --> 00:25:00,100
Winnie average programmer says that to you, what they mean is the

503
00:25:00,100 --> 00:25:03,500
worst-case running time of this algorithm is O N squared.

504
00:25:03,700 --> 00:25:06,900
Oh, and whatever the oh is that they set, right?

505
00:25:07,200 --> 00:25:10,600
So 0 N means worst-case running time.

506
00:25:10,700 --> 00:25:15,400
That means in the case where this break gets hit as late as it

507
00:25:15,400 --> 00:25:18,700
possibly could given all possible inputs.

508
00:25:18,700 --> 00:25:20,400
This thing accepts

509
00:25:22,000 --> 00:25:23,100
How long will it run?

510
00:25:23,300 --> 00:25:25,400
Okay, it's N squared right?

511
00:25:27,600 --> 00:25:28,600
That's the worst case.

512
00:25:29,000 --> 00:25:31,700
Sometimes through it might be better, it might be better than having

513
00:25:31,700 --> 00:25:32,200
squared.

514
00:25:32,200 --> 00:25:35,700
So it doesn't mean when I say that something is 0, m squared, I don't

515
00:25:35,700 --> 00:25:38,100
mean that it always takes a win squared.

516
00:25:38,300 --> 00:25:40,100
I mean that it might.

517
00:25:40,400 --> 00:25:44,100
And again the reason that we typically use that as the metric is

518
00:25:44,100 --> 00:25:48,100
because we're talking about scaling, we want to know how this

519
00:25:48,100 --> 00:25:53,000
algorithm scales, we don't care how it performs because that's a

520
00:25:53,000 --> 00:25:54,200
different discipline.

521
00:25:54,600 --> 00:25:57,200
We care about what we can guarantee.

522
00:25:58,400 --> 00:26:01,400
How does it scale in the worst conditions?

523
00:26:01,900 --> 00:26:03,600
Because that's what we want to know about.

524
00:26:03,600 --> 00:26:08,400
That's what tells us how heavy this algorithm can handle, right?

525
00:26:09,300 --> 00:26:10,200
The worst case.

526
00:26:10,300 --> 00:26:11,300
That's what we're looking for.

527
00:26:11,900 --> 00:26:14,600
They don't only look at those.

528
00:26:14,900 --> 00:26:18,500
There's things that are like best-case running times, right?

529
00:26:20,700 --> 00:26:24,400
There's things that are like average running time.

530
00:26:25,500 --> 00:26:28,200
And this is typically called expected.

531
00:26:29,300 --> 00:26:31,000
Ryan times meaning.

532
00:26:31,200 --> 00:26:36,500
Well, the worst cases, O N squared, but we expect it will only be 0 n.

533
00:26:36,600 --> 00:26:37,500
What does that mean?

534
00:26:37,700 --> 00:26:41,000
Well might not be that appropriate for a game because maybe you will

535
00:26:41,000 --> 00:26:43,100
hit that case, the bad end squared case.

536
00:26:43,300 --> 00:26:48,100
But it might be just fine for an offline utility because most of the

537
00:26:48,100 --> 00:26:49,000
time, it will run fine.

538
00:26:50,000 --> 00:26:54,000
And as a little amusing side note, one of the things that typically

539
00:26:54,000 --> 00:26:58,100
happens with these expected ones is there's a whole branch called

540
00:26:58,100 --> 00:26:58,700
randomized.

541
00:26:59,100 --> 00:26:59,800
rhythms, which

542
00:27:00,000 --> 00:27:03,900
Designed exactly for this purpose, they don't care how bad the running

543
00:27:03,900 --> 00:27:05,100
time of an algorithm is.

544
00:27:05,700 --> 00:27:09,500
They only care what it's spected running time is the worst case is not

545
00:27:09,500 --> 00:27:14,100
relevant to them because they employ random techniques to ensure that

546
00:27:14,100 --> 00:27:17,600
if you ever did hit the worst case, you would just stop running.

547
00:27:17,600 --> 00:27:19,500
It re randomize and run.

548
00:27:19,500 --> 00:27:21,000
Again, when you won't,

549
00:27:22,400 --> 00:27:27,400
There's a whole theoretical Branch devoted to just these they're

550
00:27:27,400 --> 00:27:31,500
called randomized algorithms and it's it's a great thing to go read

551
00:27:31,500 --> 00:27:31,700
about.

552
00:27:31,700 --> 00:27:35,800
It's not that applicable to games necessarily but it is great to read

553
00:27:35,800 --> 00:27:37,200
about it and it's a good thing to know.

554
00:27:37,200 --> 00:27:39,600
So I would recommend taking a little detour to there.

555
00:27:39,600 --> 00:27:42,600
If you're the kind of person who's curious about stuff, I would highly

556
00:27:42,600 --> 00:27:45,600
recommend entertaining yourself for a little while by reading about

557
00:27:45,600 --> 00:27:47,400
randomized algorithms because it's pretty funny.

558
00:27:48,500 --> 00:27:53,600
And they're useful, like I said for offline tools, very, very useful,

559
00:27:54,400 --> 00:27:54,900
all right?

560
00:27:55,200 --> 00:27:57,900
So there's other things that they talk about and you will see these

561
00:27:57,900 --> 00:27:59,400
sorts of things talked about.

562
00:27:59,600 --> 00:28:02,700
And again, what they're talking about there is, well, there's the

563
00:28:02,700 --> 00:28:04,800
worst case but then there's also other cases.

564
00:28:04,800 --> 00:28:07,200
So we would like to know that as well.

565
00:28:07,400 --> 00:28:10,800
And there are analyses that are done of algorithms, that try to

566
00:28:10,800 --> 00:28:14,900
analyze what the expected running time of something, is because it may

567
00:28:14,900 --> 00:28:18,100
be that certain algorithms are very good even

568
00:28:18,200 --> 00:28:22,100
Go there and squared because you can almost never hit the N squared

569
00:28:22,100 --> 00:28:27,000
case and so they do care about these other things, it's not just the

570
00:28:27,000 --> 00:28:27,800
worst case.

571
00:28:27,800 --> 00:28:30,900
That's the only thing a computer scientist might be analyzing.

572
00:28:32,700 --> 00:28:38,000
Okay, so now let's talk about a little bit further Beyond this.

573
00:28:38,000 --> 00:28:42,800
Now let's talk about something you may have seen which is p equals NP,

574
00:28:43,900 --> 00:28:44,400
right?

575
00:28:45,000 --> 00:28:46,700
This is something that you may have seen.

576
00:28:48,400 --> 00:28:51,100
You may have heard stuff about it like, oh, that algorithms in P.

577
00:28:51,100 --> 00:28:54,500
It's an NP and it's np-complete.

578
00:28:57,300 --> 00:29:03,600
Right, you may have heard even the phrase np-hard, although often

579
00:29:03,600 --> 00:29:06,100
times, I think most programmers have never heard that.

580
00:29:07,100 --> 00:29:10,800
But point being, there's a lot of things there, okay?

581
00:29:12,200 --> 00:29:16,500
What this refers to is actually order notation.

582
00:29:16,900 --> 00:29:22,900
And so once, you know the 0 n 0, N squared, and so on this starts to

583
00:29:22,900 --> 00:29:26,700
come into play, you can understand p and NP totally fine.

584
00:29:27,700 --> 00:29:31,300
What they actually stand for is just polynomial.

585
00:29:33,800 --> 00:29:35,500
And non polynomial.

586
00:29:38,500 --> 00:29:42,200
So something that is polynomial time, right?

587
00:29:42,700 --> 00:29:44,600
Means that I can write it with a polynomial.

588
00:29:44,900 --> 00:29:47,200
I can write its 0n expression.

589
00:29:47,200 --> 00:29:51,400
Whatever we want to call that it's Big O notation as you might hear it

590
00:29:51,400 --> 00:29:53,900
said it's Big O notation.

591
00:29:54,300 --> 00:29:57,400
You can write it with a polynomial and as you know a polynomial is

592
00:29:57,400 --> 00:29:59,800
anything that looks like you know,

593
00:30:01,400 --> 00:30:06,900
And to the something like n, N2 I'm going to use x here to refer.

594
00:30:06,900 --> 00:30:09,700
To any constant, let's say or n to the C.

595
00:30:10,200 --> 00:30:14,400
Plus, you know, ended it to the c 1 plus n to the c 2 plus n to the c

596
00:30:14,400 --> 00:30:14,800
3.

597
00:30:14,800 --> 00:30:17,800
Plus end the sea for however, many of these you want.

598
00:30:18,600 --> 00:30:19,000
Right?

599
00:30:19,100 --> 00:30:21,300
It's just a standard polynomial from math, right?

600
00:30:21,300 --> 00:30:24,700
And you can put constants in front of it as well, whatever you want to

601
00:30:24,700 --> 00:30:29,500
do, but it's always got to be n to the something, right?

602
00:30:30,000 --> 00:30:34,600
That's that's just how that's just how polynomial is defined, right?

603
00:30:36,700 --> 00:30:41,000
so, if you can write it as a polynomial, where the variable,

604
00:30:42,100 --> 00:30:43,300
Is n, right?

605
00:30:43,300 --> 00:30:45,700
That the not saying this.

606
00:30:45,700 --> 00:30:48,100
Well this is my math terminologies to Limited.

607
00:30:49,300 --> 00:30:53,900
If you can write the Big O, notation as a polynomial, where the

608
00:30:53,900 --> 00:30:56,200
variable of the polynomial is n.

609
00:30:57,100 --> 00:31:00,300
It is in, it is in P, right?

610
00:31:00,300 --> 00:31:02,500
It is, it is AP algorithm.

611
00:31:02,500 --> 00:31:06,800
It is a polynomial time algorithm polynomial time, because we expect

612
00:31:06,800 --> 00:31:10,500
it to scale as a polynomial with the work input.

613
00:31:11,100 --> 00:31:14,200
Now, you'll note that this could be an extremely heinous expression,

614
00:31:14,300 --> 00:31:16,400
something that was like, end to the 12th.

615
00:31:17,300 --> 00:31:22,300
He's still a polynomial time algorithm because I didn't use anything

616
00:31:22,300 --> 00:31:25,400
besides a polynomial to represent its running time.

617
00:31:25,800 --> 00:31:29,200
So even things that you would never ever ever be able to run for any

618
00:31:29,200 --> 00:31:31,100
reason because they are absolutely ridiculous.

619
00:31:31,100 --> 00:31:36,900
Like end to the 12th are still considered in p and I often use that

620
00:31:36,900 --> 00:31:37,300
phrase.

621
00:31:37,300 --> 00:31:38,100
I should explain it.

622
00:31:38,600 --> 00:31:41,300
People say these p and NP.

623
00:31:41,700 --> 00:31:44,300
I I kind of started explaining them without really saying

624
00:31:45,200 --> 00:31:48,600
They stand for polynomial, not following you, they represent sets,

625
00:31:48,700 --> 00:31:52,700
they represent classes of algorithms.

626
00:31:53,300 --> 00:31:55,700
So, if I say that an algorithm

627
00:31:57,000 --> 00:31:58,100
Wow, handwriting.

628
00:31:59,400 --> 00:32:05,500
If I say that an algorithm is in P, it means that it is in the set P.

629
00:32:05,500 --> 00:32:07,100
It is in the group, the class.

630
00:32:07,400 --> 00:32:10,900
I'm sure there's a pedantic actual thing you want to say there, but I

631
00:32:10,900 --> 00:32:11,400
know what it is.

632
00:32:11,700 --> 00:32:16,800
It is it belongs to the class of algorithms that are polynomial time,

633
00:32:16,800 --> 00:32:21,700
and that means I can write it 6 order notation with a polynomial.

634
00:32:21,800 --> 00:32:26,600
Now, obviously NP is just the other

635
00:32:26,800 --> 00:32:27,700
A round.

636
00:32:27,800 --> 00:32:30,100
I can't do that.

637
00:32:30,200 --> 00:32:31,800
I cannot write it.

638
00:32:31,800 --> 00:32:35,100
So if an algorithm is in non-polynomial, it's an NP.

639
00:32:35,600 --> 00:32:39,800
It means that it's order notation, looks something like this.

640
00:32:41,100 --> 00:32:46,800
The expression, the end the variable that represents the work units.

641
00:32:48,300 --> 00:32:51,500
It is actually in the exponent, right?

642
00:32:52,200 --> 00:32:54,700
And at that point, I am in NP.

643
00:32:55,000 --> 00:32:58,000
I can no longer say that this has polynomial time.

644
00:32:58,200 --> 00:32:59,400
Now, obviously,

645
00:33:00,000 --> 00:33:02,800
No, the difference is pretty drastic.

646
00:33:03,000 --> 00:33:07,200
I don't know if like Wolfram Alpha can help us out here with a handy

647
00:33:07,200 --> 00:33:07,700
little graph.

648
00:33:07,700 --> 00:33:14,100
I don't actually can Google Glass graph, something graph, N squared +

649
00:33:14,100 --> 00:33:15,200
2 to the n

650
00:33:16,400 --> 00:33:17,400
Can it do that?

651
00:33:20,200 --> 00:33:20,600
I don't know.

652
00:33:20,600 --> 00:33:22,800
I don't know how to like get a good graph.

653
00:33:22,800 --> 00:33:24,400
I want to I want to graph.

654
00:33:25,000 --> 00:33:25,400
Let's try.

655
00:33:25,400 --> 00:33:27,300
Wolfram Alpha will from alpha.

656
00:33:28,600 --> 00:33:29,200
Let's see.

657
00:33:29,200 --> 00:33:32,800
Will from Alfre how are you going to do knowledge engine?

658
00:33:32,800 --> 00:33:37,600
Can you, please graph N squared + 2 to the N for me?

659
00:33:41,200 --> 00:33:42,100
Thank you.

660
00:33:42,800 --> 00:33:43,800
Thank you very much.

661
00:33:44,200 --> 00:33:46,800
Okay, I would like you to expand.

662
00:33:46,800 --> 00:33:47,500
Please.

663
00:33:47,600 --> 00:33:54,800
Can you expand the range for, for us here, on handmade hero and able

664
00:33:54,800 --> 00:33:55,600
interactivity?

665
00:33:55,600 --> 00:33:57,600
Oh, we're not subscribed to Pro.

666
00:33:57,800 --> 00:34:01,300
How about over the range?

667
00:34:01,400 --> 00:34:04,000
0 to 100.

668
00:34:08,000 --> 00:34:08,699
There we are.

669
00:34:09,900 --> 00:34:10,800
Did that actually work?

670
00:34:10,800 --> 00:34:12,500
I think it did well.

671
00:34:12,500 --> 00:34:14,800
I maybe made my point a little bit too much.

672
00:34:14,900 --> 00:34:18,100
Let's try it down a little bit so you can actually see what happens.

673
00:34:19,000 --> 00:34:19,600
There we are.

674
00:34:20,400 --> 00:34:24,400
So here, if you actually look at the plot, you will notice that 2 to

675
00:34:24,400 --> 00:34:27,900
the N is wickedly worse than N squared.

676
00:34:27,900 --> 00:34:31,400
It makes N squared, which is already very bad for us.

677
00:34:31,400 --> 00:34:35,199
Look like a line, it doesn't even look worrisome, right?

678
00:34:35,699 --> 00:34:37,600
So, 2 to the N is vicious.

679
00:34:37,800 --> 00:34:39,100
Be worse than N squared.

680
00:34:39,400 --> 00:34:42,400
For those of you who, you know, don't have an intuition, maybe for how

681
00:34:42,400 --> 00:34:43,600
those two things relate.

682
00:34:43,900 --> 00:34:47,000
I just wanted to sort of give you a little bit of a perspective into

683
00:34:47,000 --> 00:34:48,100
why we care.

684
00:34:48,900 --> 00:34:51,000
So yes, p and p.

685
00:34:51,100 --> 00:34:54,600
This is tractable, right?

686
00:34:54,699 --> 00:34:58,300
This is like intractable right does not scale.

687
00:34:58,400 --> 00:35:02,600
You know these things are just are horribly bad you know you try to

688
00:35:02,600 --> 00:35:04,900
feed a hundred things to it and it will never run, right?

689
00:35:04,900 --> 00:35:06,700
You can't even you know forget about it, right?

690
00:35:08,300 --> 00:35:13,900
So even though this may look bad, it is nothing compared to this and

691
00:35:13,900 --> 00:35:19,400
that is why we care about about what happens to these situations.

692
00:35:19,800 --> 00:35:20,300
All right?

693
00:35:20,400 --> 00:35:23,700
So what does this whole thing mean, why do we care about this sort of

694
00:35:23,700 --> 00:35:24,000
stuff?

695
00:35:24,000 --> 00:35:27,400
We do what's going on and blah, blah, blah, blah, blah, right?

696
00:35:28,800 --> 00:35:29,500
All right.

697
00:35:30,200 --> 00:35:35,700
So what I said here this was a little bit of a perhaps like I suspect

698
00:35:35,700 --> 00:35:36,600
maybe pseudonym.

699
00:35:36,800 --> 00:35:38,600
I don't know if he still comes to the stream, the river but he

700
00:35:38,600 --> 00:35:43,300
probably got extremely nervous when I wrote this, you know, pretend I

701
00:35:43,300 --> 00:35:44,100
never wrote that.

702
00:35:44,100 --> 00:35:46,800
I just kind of wanted to say you probably saw something like that.

703
00:35:47,300 --> 00:35:50,000
Let's not talk about that for a moment.

704
00:35:50,800 --> 00:35:57,000
Let's talk instead about something a little bit more specific and

705
00:35:57,000 --> 00:35:57,800
understandable.

706
00:35:57,900 --> 00:35:58,300
Okay.

707
00:35:58,600 --> 00:35:59,900
so, you know, that P is

708
00:36:00,000 --> 00:36:01,600
Something that's polynomial time.

709
00:36:03,400 --> 00:36:06,700
And you know that n p is non polynomial time.

710
00:36:10,900 --> 00:36:16,100
Right now, the tricky thing about this, and the reason that computer

711
00:36:16,100 --> 00:36:19,500
scientists are always so worried about these sorts of things is that

712
00:36:19,500 --> 00:36:26,300
we don't really know that much about how to classify algorithms, or I

713
00:36:26,300 --> 00:36:30,000
should say problems, perhaps, into these two categories.

714
00:36:30,000 --> 00:36:34,200
You would think that it would be extremely straightforward to say, oh,

715
00:36:34,200 --> 00:36:36,200
I've got this particular problem.

716
00:36:36,200 --> 00:36:40,100
I know that in order to solve it, I can always, you know, up there is

717
00:36:40,100 --> 00:36:40,700
the that there.

718
00:36:40,900 --> 00:36:42,200
The polynomial time algorithm.

719
00:36:42,200 --> 00:36:43,100
That will solve it.

720
00:36:43,400 --> 00:36:44,900
Or no, there isn't it.

721
00:36:44,900 --> 00:36:48,200
It's it requires a non polynomial, time, algorithm, etc, etc.

722
00:36:48,500 --> 00:36:48,900
Right?

723
00:36:50,400 --> 00:36:54,300
Well, the reasons you hear things like is p equal to NP.

724
00:36:54,300 --> 00:36:58,800
Your things like that said, is because we actually don't know yet how

725
00:36:58,800 --> 00:37:03,900
to classify a very large number of, actually practical practical

726
00:37:04,300 --> 00:37:05,600
programming problems.

727
00:37:06,600 --> 00:37:10,900
So, for example, there's a couple different ones, there's like,

728
00:37:11,100 --> 00:37:15,500
there's a thing called 3sat, or a circuit satisfiability, I guess,

729
00:37:15,600 --> 00:37:16,000
right?

730
00:37:16,500 --> 00:37:16,800
I guess.

731
00:37:16,800 --> 00:37:18,200
I don't know if they just call, it's at.

732
00:37:18,200 --> 00:37:19,300
I don't even know what they call them.

733
00:37:19,300 --> 00:37:19,700
They haven't.

734
00:37:19,900 --> 00:37:21,200
Specific names for them.

735
00:37:21,800 --> 00:37:24,100
There's a number of problems that are very straightforward, like,

736
00:37:24,300 --> 00:37:29,400
let's say that you have a circuit that just consists of not a nand

737
00:37:29,400 --> 00:37:34,000
Gates or, you know, in fact, you know what, I'm just going to get what

738
00:37:34,000 --> 00:37:35,600
the actual term is believe.

739
00:37:35,600 --> 00:37:37,200
It's three set though, yeah.

740
00:37:39,200 --> 00:37:39,700
Here you go.

741
00:37:40,400 --> 00:37:43,300
So you have a set of problems like this, which when you read it, it

742
00:37:43,300 --> 00:37:45,100
will sound incredibly simple.

743
00:37:45,200 --> 00:37:45,700
Right?

744
00:37:46,100 --> 00:37:47,800
It basically says that.

745
00:37:47,900 --> 00:37:49,100
Let's see if they've got it here.

746
00:37:49,300 --> 00:37:54,100
If you have, like I said, a ands and not and any number of inputs.

747
00:37:54,100 --> 00:37:57,100
So any number of Anne's and Knots, and a number of inputs, they just

748
00:37:57,100 --> 00:38:01,500
want to know whether or not if you can find a set of inputs that will

749
00:38:01,500 --> 00:38:04,100
produce like true or something, right?

750
00:38:04,900 --> 00:38:08,600
So, for example, again, I don't study this sort of stuff for a living,

751
00:38:08,600 --> 00:38:08,800
so I

752
00:38:09,100 --> 00:38:13,600
Advised that this part is not going to be the smoothest explanation

753
00:38:13,900 --> 00:38:20,900
but you just imagine you have some expression that's like a and not b

754
00:38:20,900 --> 00:38:31,500
and a and you know not c and d and I can just give you any number of

755
00:38:31,500 --> 00:38:32,700
those things, right?

756
00:38:33,000 --> 00:38:35,600
Well, the number of inputs.

757
00:38:35,600 --> 00:38:38,800
A b and c d here, right?

758
00:38:38,900 --> 00:38:39,900
Is for, right?

759
00:38:39,900 --> 00:38:42,600
That would be the N the N equals four here, right?

760
00:38:43,400 --> 00:38:47,800
And the question is, well, I want you to tell me if you were going to

761
00:38:47,800 --> 00:38:52,000
be able to write some algorithm, that could tell me whether some these

762
00:38:52,000 --> 00:38:53,500
inputs here are Boolean, right?

763
00:38:53,500 --> 00:38:56,400
They can only be like true, false, true?

764
00:38:56,400 --> 00:38:57,200
True, whatever.

765
00:38:58,400 --> 00:38:59,800
if you were going to take this,

766
00:39:00,000 --> 00:39:04,500
And say, tell me whether this expression can ever produce true.

767
00:39:05,300 --> 00:39:07,300
You can set these to whatever you want.

768
00:39:07,400 --> 00:39:09,800
Can it ever produce true naively?

769
00:39:09,800 --> 00:39:13,200
You might say, oh, I could totally solve that in polynomial time, let

770
00:39:13,200 --> 00:39:14,000
me just go do it.

771
00:39:14,200 --> 00:39:16,900
But then what you would probably find when you tried to solve it is

772
00:39:16,900 --> 00:39:17,800
that you couldn't.

773
00:39:18,200 --> 00:39:21,800
And the reason for that is because each input can be set to true or

774
00:39:21,800 --> 00:39:22,400
false.

775
00:39:22,500 --> 00:39:24,100
That means that for each input.

776
00:39:24,100 --> 00:39:29,500
That you have, you have two options, two times, two times, two times,

777
00:39:29,500 --> 00:39:29,800
two,

778
00:39:30,000 --> 00:39:30,500
Right.

779
00:39:30,600 --> 00:39:31,400
Two options here.

780
00:39:31,400 --> 00:39:32,200
Two options here.

781
00:39:32,200 --> 00:39:32,700
Two options.

782
00:39:32,700 --> 00:39:37,300
Here are two options here that my friends is 2 to the N for a non

783
00:39:37,300 --> 00:39:38,400
polynomial time.

784
00:39:38,600 --> 00:39:43,600
Right now, if we knew that the only way to solve this was by Brute

785
00:39:43,600 --> 00:39:47,100
Force, we would know that the solution to this problem was in non

786
00:39:47,100 --> 00:39:48,000
polynomial time.

787
00:39:48,000 --> 00:39:51,800
It would be in NP because the only way to solve it would be to try all

788
00:39:51,800 --> 00:39:55,500
to and possible input combinations and see if any of them produce true

789
00:39:56,100 --> 00:39:59,900
but try as they might computer scientists have yet to

790
00:40:00,000 --> 00:40:02,500
Figure out whether that's actually the case.

791
00:40:02,800 --> 00:40:04,300
We can't prove yet.

792
00:40:05,200 --> 00:40:09,500
Whether there exists, some more clever algorithm for processing.

793
00:40:09,700 --> 00:40:14,400
A thing of this nature that doesn't take n p.

794
00:40:15,100 --> 00:40:19,400
Now we probably know that it doesn't take you know, and squared time.

795
00:40:19,700 --> 00:40:23,200
But remember, in order to be polynomial time you could write something

796
00:40:23,200 --> 00:40:27,500
that takes end to the 256 time if you wanted to.

797
00:40:28,200 --> 00:40:32,400
And you would still have succeeded in proving one of the long long,

798
00:40:32,400 --> 00:40:37,100
long long, long standing mysteries of computer science which is, are

799
00:40:37,100 --> 00:40:41,300
these sorts of problems in P or not?

800
00:40:43,300 --> 00:40:43,700
Now.

801
00:40:45,200 --> 00:40:47,300
When I say these sorts of problems.

802
00:40:47,300 --> 00:40:48,100
What do I mean?

803
00:40:48,100 --> 00:40:53,600
Well, I mean, np-complete problems, np-complete is a term.

804
00:40:53,600 --> 00:40:59,500
You've probably heard it's almost always not understood properly and

805
00:40:59,500 --> 00:41:01,000
that includes by me.

806
00:41:01,000 --> 00:41:04,900
So, the explanation are about to give you is probably subtly wrong and

807
00:41:04,900 --> 00:41:09,100
you're going to want to go ask a computer scientist to correct it.

808
00:41:09,100 --> 00:41:15,000
But what we mean when we say that something is np-complete, is that it

809
00:41:15,500 --> 00:41:17,700
Quote unquote, one of these problems.

810
00:41:18,100 --> 00:41:23,300
And one of these problems is a problem, like this one where nobody has

811
00:41:23,300 --> 00:41:27,300
been able to prove that it takes polynomial.

812
00:41:27,300 --> 00:41:28,600
Time to solve, right?

813
00:41:28,600 --> 00:41:35,200
No one's come up with any way to solve it, okay, but they have not

814
00:41:35,200 --> 00:41:38,200
proved can't be so they haven't proved the opposite.

815
00:41:38,200 --> 00:41:42,700
They haven't proved that you can't solve it in polynomial time and

816
00:41:43,400 --> 00:41:45,200
they have proven that you can

817
00:41:45,400 --> 00:41:48,200
A verify the answer.

818
00:41:49,200 --> 00:41:54,700
So for example, if you were to give me right like true false, true

819
00:41:54,700 --> 00:41:56,600
true, you're like that produces true.

820
00:41:57,500 --> 00:41:59,800
I can verify that Impala.

821
00:42:00,000 --> 00:42:00,600
Mealtime.

822
00:42:01,100 --> 00:42:04,900
So this has a pea verifier usually, right?

823
00:42:05,000 --> 00:42:11,200
It has the ability to verify the solution without also taking NP.

824
00:42:13,600 --> 00:42:15,300
Again there's probably something suddenly wrong with that.

825
00:42:15,300 --> 00:42:18,200
Like it's like oh it doesn't have to have the P verifier.

826
00:42:18,200 --> 00:42:22,000
It's called np-complete Fufu frou-frou.

827
00:42:22,200 --> 00:42:24,500
If it's like got the P verifier and not if it doesn't.

828
00:42:24,500 --> 00:42:26,400
Like I said, go check the specifics.

829
00:42:27,000 --> 00:42:29,100
I am just trying to give you a photo to this so that you can go

830
00:42:29,100 --> 00:42:30,400
explore more about point being

831
00:42:31,700 --> 00:42:35,100
NP, complete problems are ones that we don't know where they land.

832
00:42:35,200 --> 00:42:40,400
No one has proven either but we do know that they can be verified in P

833
00:42:40,400 --> 00:42:41,600
time, right?

834
00:42:41,600 --> 00:42:44,800
So we can go here through here and actually say that the answer was

835
00:42:44,800 --> 00:42:47,400
correct or not without needing MP time.

836
00:42:48,300 --> 00:42:50,900
Now the number of problems that fall into this category are actually

837
00:42:50,900 --> 00:42:53,800
fairly large, and people have done a tremendous amount of work proving

838
00:42:53,800 --> 00:42:55,100
that they are all equivalent.

839
00:42:56,200 --> 00:42:59,000
What that means is that all of the problems that are in NP complete.

840
00:42:59,000 --> 00:43:02,900
And there are many, the Dean's List problem is another example.

841
00:43:02,900 --> 00:43:05,200
I'll just wrap them up here so you can take a look at them.

842
00:43:12,700 --> 00:43:14,000
Or not.

843
00:43:14,000 --> 00:43:14,400
Is that?

844
00:43:15,900 --> 00:43:16,300
All right.

845
00:43:16,300 --> 00:43:18,700
Well, there's a problem called the Dean's List problem.

846
00:43:18,900 --> 00:43:23,200
The, I don't know, there's a problem about trying to make sure that no

847
00:43:23,200 --> 00:43:27,200
two people sleep sleep in the same room with other people that it in

848
00:43:27,400 --> 00:43:30,000
as far as assigning rooms to people in a college but blah blah.

849
00:43:30,100 --> 00:43:32,600
And it's like you have a list of exclusions and you have to come up

850
00:43:32,600 --> 00:43:38,300
with, you know, picking people for who's to share the same room at a

851
00:43:38,300 --> 00:43:42,100
college without ever violating a list of things.

852
00:43:42,200 --> 00:43:45,200
That's a two people can't be paired with each other for some reason,

853
00:43:45,200 --> 00:43:45,700
right?

854
00:43:46,900 --> 00:43:49,600
There's a number of problems like that that are all very reasonable

855
00:43:49,600 --> 00:43:49,700
that.

856
00:43:49,700 --> 00:43:52,800
All sounds very logical that sound like the kind of things you want

857
00:43:52,800 --> 00:43:53,900
computers to solve.

858
00:43:54,100 --> 00:43:56,600
They have all been proven to be np-complete, which means you can

859
00:43:56,600 --> 00:44:02,900
verify the answers in P time, but you cannot actually solve them in P

860
00:44:02,900 --> 00:44:04,400
time yet.

861
00:44:05,100 --> 00:44:08,500
But until someone proves that you can't, we don't actually know.

862
00:44:08,900 --> 00:44:11,700
And that's one of the interesting things about this problem and why it

863
00:44:11,700 --> 00:44:14,100
is such a thorn in the side of computer.

864
00:44:14,100 --> 00:44:15,800
Scientists is because

865
00:44:16,700 --> 00:44:19,800
I would like to know we would like to know definitively whether we're

866
00:44:19,800 --> 00:44:23,300
just missing the big Point here and that all of these problems

867
00:44:23,300 --> 00:44:25,100
actually can be solved in p time.

868
00:44:26,000 --> 00:44:30,300
Or whether what seems to be true because no one's ever found a pea

869
00:44:30,300 --> 00:44:31,300
algorithm for any of them.

870
00:44:31,400 --> 00:44:34,200
It seems to be that they aren't, right?

871
00:44:34,200 --> 00:44:37,200
And the nice thing about all of the proof work that they've done so

872
00:44:37,200 --> 00:44:39,600
far is because they prove all of these problems are equivalent.

873
00:44:40,000 --> 00:44:45,400
What it actually means is that if you found a p solution, a pee-pee

874
00:44:45,400 --> 00:44:49,000
running time, algorithm for any of them, any of the things that I be

875
00:44:49,000 --> 00:44:52,000
complete, you will have proved that all of them are solvable in P

876
00:44:52,000 --> 00:44:52,400
time.

877
00:44:52,400 --> 00:44:54,900
Because computer, scientists actually done the work of proving that

878
00:44:54,900 --> 00:44:56,000
you can map one to the other.

879
00:44:56,000 --> 00:44:59,800
The other, they're all in the same, they can all be solved.

880
00:45:00,000 --> 00:45:04,400
By just translating them into like three sap for example.

881
00:45:04,600 --> 00:45:06,200
So if you can solve any of them

882
00:45:07,100 --> 00:45:08,300
You could solve all of them.

883
00:45:10,200 --> 00:45:13,200
Now, typical gotcha.

884
00:45:16,400 --> 00:45:17,400
And I've heard this on.

885
00:45:17,400 --> 00:45:21,800
I've seen programmers post videos where they make this mistake, try

886
00:45:21,800 --> 00:45:22,800
not to make it.

887
00:45:23,000 --> 00:45:24,400
Like I said, this stuff is very complicated.

888
00:45:24,400 --> 00:45:28,000
I've probably already made a mistake but just so try not to make

889
00:45:28,200 --> 00:45:31,800
mistakes about this if you can, but it's complicated for non-computer

890
00:45:31,800 --> 00:45:33,600
science people, it's true.

891
00:45:34,200 --> 00:45:35,100
There is a gotcha.

892
00:45:36,500 --> 00:45:41,900
Don't assume that something is np-complete just because it is hard for

893
00:45:41,900 --> 00:45:44,300
example, the traveling salesman problem.

894
00:45:48,200 --> 00:45:48,900
Right.

895
00:45:48,900 --> 00:45:49,700
That is a problem.

896
00:45:49,700 --> 00:45:52,000
Where I have some euclidean array of points.

897
00:45:52,000 --> 00:45:54,400
Let's say, doesn't have to be a pretty and actually, just have to have

898
00:45:54,400 --> 00:45:55,300
cost between them.

899
00:45:55,300 --> 00:45:58,900
But so forget I said that traveling salesman's really just some set of

900
00:45:58,900 --> 00:46:02,200
nodes in a graph and then I have some edges in that graph.

901
00:46:03,300 --> 00:46:08,200
Write something that looks like that and each of the edges has a cost,

902
00:46:08,400 --> 00:46:08,800
right?

903
00:46:08,900 --> 00:46:11,100
I could even make all the cost of one doesn't even matter.

904
00:46:11,100 --> 00:46:11,500
So let's say.

905
00:46:11,500 --> 00:46:12,300
It doesn't even have a cost.

906
00:46:12,300 --> 00:46:14,100
It just costs one to Traverse.

907
00:46:14,200 --> 00:46:14,700
Let's say

908
00:46:16,900 --> 00:46:19,500
Because I don't even think you need a cost, but either way, pretty

909
00:46:19,500 --> 00:46:25,200
sure the problems are equivalent find the shortest path, that visits

910
00:46:25,200 --> 00:46:27,300
all the nodes, right?

911
00:46:27,300 --> 00:46:30,700
So again, it's just like a Salesman, a Salesman wants to go to each of

912
00:46:30,700 --> 00:46:34,900
these places and they want to see them all once and they don't want to

913
00:46:34,900 --> 00:46:36,300
like waste any time.

914
00:46:36,300 --> 00:46:38,500
So they want the shortest possible route that will do them all.

915
00:46:39,900 --> 00:46:44,200
That's the traveling salesman problem, it is not np-complete.

916
00:46:44,300 --> 00:46:46,500
It is actually harder than that.

917
00:46:47,200 --> 00:46:51,800
The reason for that is because there is no P verifier for it.

918
00:46:52,400 --> 00:46:58,500
Right there is no way to actually verify the solution to the

919
00:46:58,500 --> 00:47:03,900
Travelling salesman problem in anything other than also MP time,

920
00:47:04,500 --> 00:47:05,000
right?

921
00:47:05,300 --> 00:47:09,600
If I were to give you a solution and say hey I solve this out.

922
00:47:09,700 --> 00:47:11,800
This particular traveling salesman problem for you.

923
00:47:11,800 --> 00:47:12,800
Here you go, happy birthday.

924
00:47:12,800 --> 00:47:14,600
You'd be like thanks.

925
00:47:14,800 --> 00:47:15,500
But that does me.

926
00:47:15,500 --> 00:47:16,600
Absolutely no good.

927
00:47:16,600 --> 00:47:19,600
Because in order to verify it, I would have to go solve it myself

928
00:47:19,600 --> 00:47:22,900
again using another MP complete algorithm, right?

929
00:47:24,000 --> 00:47:26,700
Or sorry, not MP complete online using another MP algorithm.

930
00:47:27,400 --> 00:47:27,800
Right.

931
00:47:28,300 --> 00:47:33,500
And so it is not like these other problems because these problems you

932
00:47:33,500 --> 00:47:35,400
can verify solutions to them.

933
00:47:35,700 --> 00:47:39,600
You can verify in P time whether a particular

934
00:47:39,700 --> 00:47:42,500
Allure set of inputs does or does not do the thing.

935
00:47:42,600 --> 00:47:45,700
You said it should and things like the traveling salesman problem, do

936
00:47:45,700 --> 00:47:46,800
not have that criteria.

937
00:47:47,900 --> 00:47:48,400
Right?

938
00:47:49,000 --> 00:47:51,300
And so, it's important to understand the difference between those

939
00:47:51,400 --> 00:47:54,300
because there's essentially, I don't know what you want to call them,

940
00:47:54,300 --> 00:47:58,600
a harder class of problems, but there's definitely a difference

941
00:47:58,600 --> 00:47:59,800
between problems.

942
00:48:00,300 --> 00:48:04,500
as you sort of go through there and I believe that that is typically

943
00:48:04,500 --> 00:48:08,800
a, I think that's a hard, but this term is also almost always

944
00:48:11,600 --> 00:48:13,200
Almost always also wrong.

945
00:48:13,400 --> 00:48:20,400
So let's see if we can do it and p-card and see firmly at least as far

946
00:48:20,400 --> 00:48:22,800
as her son's in P NP hard.

947
00:48:22,800 --> 00:48:26,600
When every problem P can be reduced following term age 50 plus of any

948
00:48:26,600 --> 00:48:29,100
a element get players to all the problems in P which is unlike some

949
00:48:29,100 --> 00:48:33,400
other sort of hard non-polynomial blah blah blah.

950
00:48:39,700 --> 00:48:40,700
Yeah.

951
00:48:48,500 --> 00:48:51,900
Let's see, this is going to be too hard class files which are at least

952
00:48:51,900 --> 00:48:52,700
as far as far as Point.

953
00:48:52,700 --> 00:48:54,700
P problems that are empty hard.

954
00:48:54,700 --> 00:48:58,500
Do not have elements of a indeed they may not even be decidable cause

955
00:48:58,500 --> 00:49:02,100
problems that contains the hardest problems in NP.

956
00:49:02,100 --> 00:49:04,900
Each MP problem has to be n p and p.

957
00:49:04,900 --> 00:49:05,900
Easy.

958
00:49:06,300 --> 00:49:08,000
Let's see, a equivalent.

959
00:49:08,100 --> 00:49:09,700
You can see why this is is

960
00:49:12,500 --> 00:49:13,300
Is annoying.

961
00:49:19,300 --> 00:49:19,800
Let's see.

962
00:49:21,900 --> 00:49:22,900
Polynomial.

963
00:49:23,500 --> 00:49:24,500
I don't know why I'm checking this.

964
00:49:24,500 --> 00:49:26,700
As I said that someone in math mathematician

965
00:49:29,200 --> 00:49:29,400
Yeah.

966
00:49:29,400 --> 00:49:29,800
Okay.

967
00:49:30,000 --> 00:49:34,500
So any MP complete problem can be verified quickly in polynomial time.

968
00:49:34,700 --> 00:49:36,300
So that part is correct.

969
00:49:36,400 --> 00:49:43,800
I have not made a heinous misstep there and I believe the np-hard so I

970
00:49:43,800 --> 00:49:48,200
don't really know, I guess I'm not I'm going to take this, I'm just

971
00:49:48,200 --> 00:49:50,900
going to say again to avoid being one of the programmers who puts up

972
00:49:50,900 --> 00:49:52,200
yet another stream with bad information.

973
00:49:52,400 --> 00:49:54,400
Let's just say that we don't know what that is.

974
00:49:54,600 --> 00:49:56,200
Let's just say we don't know.

975
00:49:57,300 --> 00:49:58,400
Because I think that's safer.

976
00:49:59,500 --> 00:50:05,400
But point being travelling, salesman problem is definitely different

977
00:50:05,400 --> 00:50:06,300
than one of these.

978
00:50:06,500 --> 00:50:09,400
And so what that means is there's a set of problems that are very,

979
00:50:09,400 --> 00:50:14,900
very difficult but that may not necessarily be exactly the same as

980
00:50:14,900 --> 00:50:16,100
these kind, right.

981
00:50:16,100 --> 00:50:19,900
Because there are differences in the problems that don't necessarily

982
00:50:19,900 --> 00:50:24,600
relate strictly to whether or not we know that, there's an NP, whether

983
00:50:24,600 --> 00:50:25,100
there's a

984
00:50:26,300 --> 00:50:27,700
Non polynomial time or polynomial.

985
00:50:27,700 --> 00:50:29,400
Time solution for them.

986
00:50:29,900 --> 00:50:33,500
Okay, so that's just yet another aspect of that.

987
00:50:33,600 --> 00:50:37,600
This whole thing here with the different categories that looks like

988
00:50:37,600 --> 00:50:40,300
this is a pretty extensive taxonomy here.

989
00:50:40,300 --> 00:50:43,800
So like I said, if this is the sort of thing that interests you you

990
00:50:43,800 --> 00:50:45,400
should definitely go read about it.

991
00:50:45,400 --> 00:50:47,300
There's a lot of interesting things in there.

992
00:50:48,900 --> 00:50:51,700
It's not the kind of thing that I spend much time doing and so that's

993
00:50:51,700 --> 00:50:53,600
why I say I'm the wrong one.

994
00:50:53,600 --> 00:50:55,700
To give you any more, right?

995
00:50:56,100 --> 00:50:59,900
once you get past what I've just told you, that's the end of

996
00:51:00,000 --> 00:51:02,600
My, that's the end of my understanding.

997
00:51:02,600 --> 00:51:05,400
What's on this Blackboard here is all you get from me.

998
00:51:06,200 --> 00:51:07,300
I don't study it.

999
00:51:07,500 --> 00:51:08,000
I don't know.

1000
00:51:08,800 --> 00:51:11,600
But again, like I said, it's kind of interesting.

1001
00:51:11,700 --> 00:51:12,500
It's interesting.

1002
00:51:12,500 --> 00:51:14,400
Like, I even find this this part interesting.

1003
00:51:14,400 --> 00:51:17,700
That's like, oh, there's problems that we can actually verify very

1004
00:51:17,700 --> 00:51:21,600
easily and problems that we can't verify very easily, but both have

1005
00:51:21,600 --> 00:51:26,800
the same sort of like np- thing to them, and I don't know that.

1006
00:51:26,800 --> 00:51:29,800
Even just, that alone, those sorts of things, I find weird.

1007
00:51:30,000 --> 00:51:30,100
Thing.

1008
00:51:30,100 --> 00:51:32,000
So I could easily see spending time doing it.

1009
00:51:32,000 --> 00:51:35,900
Just not doesn't come up at all in what I do for work and so I've

1010
00:51:35,900 --> 00:51:37,400
never really had time to say.

1011
00:51:37,400 --> 00:51:40,900
I'm going to spend several months really getting interested in this

1012
00:51:40,900 --> 00:51:44,600
sort of stuff in and like playing around with it, but that's all the

1013
00:51:44,600 --> 00:51:46,500
basics, that's everything.

1014
00:51:46,900 --> 00:51:47,300
Okay.

1015
00:51:47,900 --> 00:51:49,100
So let's bring it back around.

1016
00:51:49,100 --> 00:51:51,100
Now, I've sort of given you a tour through stuff.

1017
00:51:51,100 --> 00:51:52,000
I don't know.

1018
00:51:52,100 --> 00:51:52,600
Right.

1019
00:51:52,600 --> 00:51:53,200
I told you stuff.

1020
00:51:53,200 --> 00:51:53,900
I dunno.

1021
00:51:53,900 --> 00:51:55,500
I've been to a tourist if I don't know.

1022
00:51:55,500 --> 00:51:59,900
So, if you are interested, you can go, you know, sort of do.

1023
00:52:00,000 --> 00:52:02,800
Some home study on this stuff and maybe get into it.

1024
00:52:02,900 --> 00:52:07,100
Maybe you can learn a lot more about than I do and teach me some stuff

1025
00:52:08,000 --> 00:52:10,100
but now let's bring it back down.

1026
00:52:10,300 --> 00:52:12,700
Finally, to our goal, which is sorting.

1027
00:52:14,700 --> 00:52:15,100
Okay.

1028
00:52:16,000 --> 00:52:18,200
So sorting, why do we care about this?

1029
00:52:18,200 --> 00:52:19,500
Why did I pick sorting?

1030
00:52:19,500 --> 00:52:23,400
As a time to bring up this order notation stuff.

1031
00:52:23,600 --> 00:52:25,200
Why are these related?

1032
00:52:25,400 --> 00:52:29,700
Well, sorting is kind of a classic example of why you might care

1033
00:52:29,700 --> 00:52:29,800
about.

1034
00:52:29,900 --> 00:52:34,900
Order notation because typically, sorting is the kind of thing where

1035
00:52:34,900 --> 00:52:39,100
if done poorly is N squared, right?

1036
00:52:39,300 --> 00:52:43,300
The reason for that is because it's inherently talking about taking a

1037
00:52:43,300 --> 00:52:45,400
series of things and putting them in order.

1038
00:52:45,700 --> 00:52:49,000
In order to put things in order, you have to compare them and whenever

1039
00:52:49,000 --> 00:52:52,800
you're comparing think two things inside the set, you end up with a

1040
00:52:52,800 --> 00:52:55,500
pair wise thing, kind of like the envelope problem.

1041
00:52:55,500 --> 00:52:58,400
I talked about the beginning of the stream, I'm looking at an item and

1042
00:52:58,400 --> 00:52:59,800
another item figuring out how

1043
00:53:00,000 --> 00:53:02,900
They are different and then making a decision, then taking another

1044
00:53:02,900 --> 00:53:06,700
pair and another pair and anytime there's a pair wise thing, you're

1045
00:53:06,700 --> 00:53:09,000
getting into an N squared situation.

1046
00:53:10,200 --> 00:53:14,200
So sorting is a very studied problem for this very reason.

1047
00:53:14,200 --> 00:53:18,600
And there are many algorithms, which attempt to do better than N

1048
00:53:18,600 --> 00:53:19,500
squared at sorting.

1049
00:53:19,500 --> 00:53:22,700
Because naively, you would expect it to be N squared.

1050
00:53:22,700 --> 00:53:26,000
And lo and behold,

1051
00:53:28,100 --> 00:53:33,100
If I go ahead and open up the one that I wrote in just a few minutes

1052
00:53:33,100 --> 00:53:37,400
the other day so I could show you how sorting works in the basic case.

1053
00:53:39,900 --> 00:53:42,000
What is the running time of our sort?

1054
00:53:42,000 --> 00:53:44,600
You will notice hopefully, based on everything.

1055
00:53:44,600 --> 00:53:46,900
I've told you, you can see right away.

1056
00:53:47,100 --> 00:53:50,100
It is itself and squared there is Count.

1057
00:53:50,100 --> 00:53:55,400
There is Count, minus 1, that is Count squared, minus count or 0n,

1058
00:53:55,400 --> 00:53:55,800
count.

1059
00:53:55,800 --> 00:53:59,800
Basically, the N equals count so N squared, let me

1060
00:54:00,000 --> 00:54:01,900
If I could say that a little bit better, right?

1061
00:54:02,000 --> 00:54:03,800
We have one Loop that goes to count.

1062
00:54:03,800 --> 00:54:05,400
One Loop, that goes to count.

1063
00:54:06,500 --> 00:54:08,000
- 1, right?

1064
00:54:08,000 --> 00:54:12,000
And so if I've got to run those two, that means I have to do count.

1065
00:54:12,000 --> 00:54:18,500
Iterations of count - one thing's or count squared.

1066
00:54:18,500 --> 00:54:22,300
Oops, count squared minus count, right?

1067
00:54:23,100 --> 00:54:28,100
And that means my order is that and like I said, I don't really care

1068
00:54:28,100 --> 00:54:29,500
about extras here.

1069
00:54:29,500 --> 00:54:30,600
I care about the scaling.

1070
00:54:30,600 --> 00:54:32,800
So I just care about really the highest exponent.

1071
00:54:32,900 --> 00:54:36,100
So I would just say and again, these are our n right.

1072
00:54:36,200 --> 00:54:37,900
I would just say it's O N squared.

1073
00:54:39,100 --> 00:54:39,500
Right.

1074
00:54:39,600 --> 00:54:40,200
It's really O.

1075
00:54:40,200 --> 00:54:41,500
N squared, minus n.

1076
00:54:41,500 --> 00:54:44,200
But I don't care about that because that doesn't affect the scaling at

1077
00:54:44,200 --> 00:54:44,400
all.

1078
00:54:45,000 --> 00:54:46,700
Right, so it's this right here.

1079
00:54:48,000 --> 00:54:53,000
And so, just like I predicted, if you don't do anything smart, you end

1080
00:54:53,000 --> 00:54:55,100
up with N squared, which means this won't scale.

1081
00:54:55,200 --> 00:54:57,900
If you want it to render a million items, you would be sitting here

1082
00:54:57,900 --> 00:55:00,200
all day waiting for the entries to get sorted.

1083
00:55:01,800 --> 00:55:02,600
Thankfully, we're not.

1084
00:55:02,600 --> 00:55:06,000
So we don't have to worry about it right at the present time, but that

1085
00:55:06,000 --> 00:55:08,000
is what would happen, okay?

1086
00:55:09,100 --> 00:55:12,700
And so what happens with sorting algorithms, right?

1087
00:55:13,300 --> 00:55:13,700
Oops.

1088
00:55:13,800 --> 00:55:16,300
Where's my, where's my actual nervous?

1089
00:55:17,300 --> 00:55:21,400
So what happens with sorting algorithms is people have tried to figure

1090
00:55:21,400 --> 00:55:23,200
out how to make sorting

1091
00:55:24,500 --> 00:55:27,100
Not the N squared.

1092
00:55:30,000 --> 00:55:32,500
And so, a lot of the algorithms that people tried to come up with,

1093
00:55:32,500 --> 00:55:36,300
right, they're just ways of figuring out, can we do something clever

1094
00:55:37,100 --> 00:55:41,100
and and not have to spend N squared time not have to compare elements

1095
00:55:41,100 --> 00:55:41,700
to other elements.

1096
00:55:41,700 --> 00:55:44,600
Now, that may sound impossible at first if you've never considered it.

1097
00:55:44,900 --> 00:55:48,900
But the reason why I could do that it's because let's say I wanted to

1098
00:55:48,900 --> 00:55:49,900
do something like

1099
00:55:51,800 --> 00:55:52,400
I don't know.

1100
00:55:55,700 --> 00:55:57,900
Let's say I wanted to sort.

1101
00:56:05,000 --> 00:56:08,000
To be honest, I guess I can't give you a really intuitive reason for

1102
00:56:08,000 --> 00:56:10,200
why you can do this.

1103
00:56:14,300 --> 00:56:16,800
So I may just have to kind of explain an algorithm and show why it

1104
00:56:16,800 --> 00:56:17,300
isn't.

1105
00:56:17,400 --> 00:56:20,800
I'm trying to think if there's any intuition you could apply that with

1106
00:56:20,800 --> 00:56:23,100
let you go oh I see how you would approach this.

1107
00:56:23,100 --> 00:56:24,800
If you've never seen one before,

1108
00:56:31,000 --> 00:56:32,400
Yeah, I can't really think of one.

1109
00:56:32,600 --> 00:56:34,100
So let's go ahead and do it this way.

1110
00:56:36,400 --> 00:56:39,700
Let's talk about how we were doing our sorting before and then I'll

1111
00:56:39,700 --> 00:56:41,800
show you some other ways we could do it, right?

1112
00:56:42,200 --> 00:56:45,200
So before we had a situation where we, you know, we sort of said, oh

1113
00:56:45,200 --> 00:56:50,900
well we've got you know, a CZ d q.

1114
00:56:51,400 --> 00:56:52,000
Right.

1115
00:56:53,700 --> 00:56:56,100
This is my input and I want it sorted.

1116
00:56:56,100 --> 00:56:59,800
So I want you to give it back to me a CD qz.

1117
00:57:00,500 --> 00:57:06,500
And in the naive case, if I'm just going to compare every element with

1118
00:57:06,500 --> 00:57:09,600
every other element, like I was doing in my bubble sort where I just

1119
00:57:09,600 --> 00:57:12,100
kind of ran, I just, you know, with bubble things up.

1120
00:57:12,100 --> 00:57:15,100
And in fact, I could make this actually hit that case, pretty

1121
00:57:15,100 --> 00:57:17,000
trivially by just doing it this way.

1122
00:57:17,000 --> 00:57:25,300
B, c, d, a right, and maybe I'll put a few more in there.

1123
00:57:25,300 --> 00:57:30,400
B, c, d, e, f, g, a, my bubble sort.

1124
00:57:30,700 --> 00:57:32,800
Because it can only move the a one place.

1125
00:57:32,800 --> 00:57:34,800
Every time will actually take.

1126
00:57:35,300 --> 00:57:38,300
It will take the whole n Cycles to do it.

1127
00:57:38,300 --> 00:57:41,000
So it'll do end times through n passes.

1128
00:57:41,000 --> 00:57:44,100
Right to move the a all the way up to the beginning so it actually

1129
00:57:44,100 --> 00:57:45,700
will run and squared.

1130
00:57:45,700 --> 00:57:49,200
So our current sort our bubble skirt will literally take O N squared

1131
00:57:49,200 --> 00:57:52,400
time even if we early outed.

1132
00:57:52,400 --> 00:57:55,900
So, even if we did this to do here, where we said stop, if the list is

1133
00:57:55,900 --> 00:57:57,800
already sorted so you don't keep going.

1134
00:57:57,900 --> 00:57:59,000
We could trivially feed it.

1135
00:57:59,000 --> 00:58:00,300
Something where the the

1136
00:58:00,500 --> 00:58:03,300
Front most element is, is all the way in the back and it would still,

1137
00:58:03,300 --> 00:58:04,000
it would take N squared.

1138
00:58:04,000 --> 00:58:10,800
Time to produce a b, c, d, e, f g, right?

1139
00:58:11,500 --> 00:58:12,200
But

1140
00:58:14,200 --> 00:58:16,900
We can do, potentially better than N squared were stripped case

1141
00:58:16,900 --> 00:58:21,900
running time by observing that if we were to partition these things

1142
00:58:21,900 --> 00:58:26,600
into smaller groups, often times, it's called divide and conquer is a

1143
00:58:26,600 --> 00:58:27,100
strategy.

1144
00:58:27,100 --> 00:58:29,700
There's also another one which is bottom up, which is called dynamic

1145
00:58:29,700 --> 00:58:32,900
programming, and these are various different strategies for algorithm

1146
00:58:32,900 --> 00:58:35,100
design, they're very important to nothing.

1147
00:58:35,100 --> 00:58:38,600
We really cover on handmade hero, but maybe eventually we'll get to

1148
00:58:38,600 --> 00:58:42,100
them when we have to do some more complicated things, but divide and

1149
00:58:42,100 --> 00:58:42,700
conquer.

1150
00:58:43,700 --> 00:58:45,700
Is basically a strategy for devising algorithms.

1151
00:58:45,700 --> 00:58:49,400
That says, well, if something is really hard to do, let's just keep

1152
00:58:49,400 --> 00:58:52,300
breaking it into smaller parts and see if breaking it into the smaller

1153
00:58:52,300 --> 00:58:57,600
parts allows us to do it in any faster time, right?

1154
00:58:57,600 --> 00:59:02,800
So here's one example, let's suppose and you know what?

1155
00:59:02,800 --> 00:59:04,200
I'm going to go ahead and add an H in here, too.

1156
00:59:04,200 --> 00:59:06,100
So I have an even number four now because it makes it a little easier

1157
00:59:06,100 --> 00:59:06,600
on myself.

1158
00:59:07,000 --> 00:59:12,000
Let's suppose I broke this in two pairs of two, right?

1159
00:59:12,000 --> 00:59:13,800
So first, what I did is I

1160
00:59:13,800 --> 00:59:15,300
Just segmented it like this.

1161
00:59:17,000 --> 00:59:21,300
Okay, and then I said, I just want you to sort the pairs of two.

1162
00:59:22,100 --> 00:59:23,200
How long would that take?

1163
00:59:24,100 --> 00:59:26,800
Well, I need to compare these two items.

1164
00:59:27,900 --> 00:59:28,500
Right?

1165
00:59:29,200 --> 00:59:31,800
So that would be one that would take one.

1166
00:59:33,300 --> 00:59:36,700
Right now, you compare these two items so that would take one.

1167
00:59:37,600 --> 00:59:40,700
I had to compare these two items so that would take one right?

1168
00:59:41,600 --> 00:59:43,400
And you compare these two items so that would take one.

1169
00:59:44,600 --> 00:59:46,100
Depending on how we want to count it.

1170
00:59:46,100 --> 00:59:47,600
Maybe we'd say that count too.

1171
00:59:47,600 --> 00:59:50,500
Because we had to visit both items doesn't matter.

1172
00:59:50,800 --> 00:59:53,600
Either way it's going to either be double or single the running time.

1173
00:59:53,900 --> 00:59:57,100
But either way however you want to count it will just say we'll say

1174
00:59:57,100 --> 00:59:59,800
it's one for now because we'll talk about we'll say that are

1175
01:00:00,000 --> 01:00:02,500
N is in the comparisons, right?

1176
01:00:02,500 --> 01:00:04,400
It's how many comparisons you needed to do?

1177
01:00:05,500 --> 01:00:06,000
Right.

1178
01:00:07,900 --> 01:00:09,400
Okay, so

1179
01:00:11,600 --> 01:00:14,500
that's how many comparisons I would have to do to do this, right?

1180
01:00:15,000 --> 01:00:16,700
And I'll, you know what?

1181
01:00:16,700 --> 01:00:19,300
It would help, if I started with the right list, I need one that's out

1182
01:00:19,300 --> 01:00:21,400
of order first, let's try that one more time.

1183
01:00:24,400 --> 01:00:28,500
Okay, so I check these two, that's one I check these two.

1184
01:00:29,000 --> 01:00:30,700
That's one I check these two.

1185
01:00:32,000 --> 01:00:34,800
That's one, I checked these two, that's why.

1186
01:00:34,900 --> 01:00:37,300
And, you know, if I reverse the order of these two because that they

1187
01:00:37,300 --> 01:00:39,600
were, you know, they were in the wrong order in the list.

1188
01:00:39,600 --> 01:00:42,300
So that was what I was these all say the same but this one changed,

1189
01:00:42,500 --> 01:00:42,900
right?

1190
01:00:43,700 --> 01:00:48,800
So I can do one pass essentially and get all my pears in order.

1191
01:00:49,900 --> 01:00:50,500
Make sense.

1192
01:00:51,500 --> 01:00:57,600
Now, if I wanted to, I could then combine any two pairs, right?

1193
01:00:59,800 --> 01:01:05,000
I can funnel these guys together because I now know that the pairs are

1194
01:01:05,000 --> 01:01:06,000
in sorted order.

1195
01:01:06,700 --> 01:01:11,400
So there is no chance that if this guy, right?

1196
01:01:11,500 --> 01:01:16,200
If I compare this guy and this guy there's no chance that this guy

1197
01:01:16,200 --> 01:01:20,300
could be anything other than in the same direction as this guy from

1198
01:01:20,300 --> 01:01:21,300
during the comparison.

1199
01:01:21,500 --> 01:01:21,800
Right.

1200
01:01:21,800 --> 01:01:23,600
I know what direction they go.

1201
01:01:24,200 --> 01:01:28,100
So what I can do is I can say well let's produce a list here, I know.

1202
01:01:28,100 --> 01:01:29,400
I only have to check these

1203
01:01:29,600 --> 01:01:31,400
You to figure out who comes first.

1204
01:01:31,600 --> 01:01:34,700
I don't need to check either of these because they can't possibly come

1205
01:01:34,700 --> 01:01:37,600
first, the person who's in their own, pair comes before them.

1206
01:01:38,200 --> 01:01:41,900
So if I check these two and I say, oh becomes first, I'll put be

1207
01:01:41,900 --> 01:01:42,300
there.

1208
01:01:42,400 --> 01:01:44,800
That's one comparison, right?

1209
01:01:46,300 --> 01:01:48,600
I then say, all right, move to the next guy.

1210
01:01:48,700 --> 01:01:49,700
Compare these two.

1211
01:01:50,200 --> 01:01:50,500
Okay.

1212
01:01:50,500 --> 01:01:53,700
See your D, which comes first and this case it happens to be see.

1213
01:01:53,800 --> 01:01:55,300
That's another one comparison.

1214
01:01:56,000 --> 01:01:56,500
Okay.

1215
01:01:57,400 --> 01:02:01,000
Then finally, I would move to here and I'd say which one comes first C

1216
01:02:01,000 --> 01:02:02,400
or E, right?

1217
01:02:02,700 --> 01:02:05,200
And that's again, one comparison.

1218
01:02:06,500 --> 01:02:08,800
And so then I end up with that, right?

1219
01:02:08,800 --> 01:02:09,200
Oops.

1220
01:02:12,400 --> 01:02:17,800
So I only needed to do three comparisons, whereas if I had done all

1221
01:02:17,800 --> 01:02:22,300
the pair's bdb ecdc, right?

1222
01:02:22,300 --> 01:02:24,400
I would have had to have done for comparisons.

1223
01:02:26,100 --> 01:02:26,700
Make sense.

1224
01:02:27,100 --> 01:02:33,300
So I shaved off one comparison just by taking advantage of the fact

1225
01:02:33,300 --> 01:02:36,600
that I know these are sorted do the same thing here, right?

1226
01:02:36,600 --> 01:02:40,100
F, g a h, right?

1227
01:02:40,500 --> 01:02:41,200
Let's do that one.

1228
01:02:42,000 --> 01:02:44,500
So I take this one is fr a first.

1229
01:02:44,500 --> 01:02:48,700
Well, a is first right now, I move to H is frh first.

1230
01:02:48,700 --> 01:02:49,800
Well f is first.

1231
01:02:50,100 --> 01:02:51,200
Now, I've got G.

1232
01:02:51,200 --> 01:02:54,500
RH G is first, and then, I am course H, right?

1233
01:02:54,500 --> 01:02:55,700
So, that was three comparisons.

1234
01:02:55,900 --> 01:02:59,200
Then to get for results, okay?

1235
01:03:00,600 --> 01:03:04,200
So now you can kind of see as I leave her up here, right?

1236
01:03:04,200 --> 01:03:09,300
I've done effectively something that's only on the order of n here

1237
01:03:09,300 --> 01:03:12,300
basically and something that's only on the order of n here as well.

1238
01:03:12,500 --> 01:03:14,600
I've never had to do a full pair wise thing.

1239
01:03:14,600 --> 01:03:17,300
Still let's take it further and you can see how much power more

1240
01:03:17,300 --> 01:03:19,400
powerful this gets when we have the bigger sets.

1241
01:03:19,500 --> 01:03:20,300
Let's go together.

1242
01:03:20,300 --> 01:03:20,800
Right.

1243
01:03:21,700 --> 01:03:23,400
How many comparisons for all of these?

1244
01:03:23,500 --> 01:03:27,200
Well, being a witch is first, a is first, right?

1245
01:03:28,800 --> 01:03:32,200
Now, let's go to the next one, b or F, which is first be is first,

1246
01:03:32,400 --> 01:03:32,900
right?

1247
01:03:33,100 --> 01:03:36,400
So that's one comparison, one comparison, right?

1248
01:03:36,700 --> 01:03:39,600
It's one comparison basically for everyone, I right essentially.

1249
01:03:39,900 --> 01:03:40,300
Yeah.

1250
01:03:41,300 --> 01:03:44,200
Okay, so be where am I at here?

1251
01:03:45,700 --> 01:03:48,400
I did be f is first F isn't first.

1252
01:03:48,400 --> 01:03:52,600
So we go down to see, right CRF it, see right?

1253
01:03:53,100 --> 01:03:56,300
So then I can advance ahead d d or F.

1254
01:03:56,300 --> 01:03:58,100
It's still d, right?

1255
01:03:58,100 --> 01:03:59,500
That I go to erf.

1256
01:03:59,500 --> 01:04:02,500
It's still e0, then I'm out.

1257
01:04:02,500 --> 01:04:05,600
So now I just know that I just do the rest of these, right?

1258
01:04:05,700 --> 01:04:07,200
So then I'm just G and H.

1259
01:04:08,700 --> 01:04:11,300
Because they're just in order to just copy them, right?

1260
01:04:13,400 --> 01:04:16,600
So hopefully you can see how few comparisons I've done.

1261
01:04:16,600 --> 01:04:18,800
I'm already at the end of the list sorted.

1262
01:04:18,900 --> 01:04:21,400
Now if I was to do this and squared right?

1263
01:04:21,400 --> 01:04:30,300
1 2 3 4 5 6 7, which those ABCDE oops, forgot my f abcdefgh, right?

1264
01:04:31,500 --> 01:04:32,400
This list.

1265
01:04:32,600 --> 01:04:35,300
If I was to do this the N squared way, that would have been eight

1266
01:04:35,300 --> 01:04:38,300
squared or 16 comparisons, right?

1267
01:04:40,200 --> 01:04:45,200
Makes sense in this case at most, I only have two ever compare.

1268
01:04:45,600 --> 01:04:50,000
The number of things that are in each of these lists the number of

1269
01:04:50,000 --> 01:04:53,900
times up that I, that I had to do these these steps, right?

1270
01:04:54,100 --> 01:04:58,400
So I have to do n steps potentially right or something on the order of

1271
01:04:58,400 --> 01:05:02,700
n, but I only had to do it three times, right?

1272
01:05:03,700 --> 01:05:09,400
So even though I gave it n inputs instead of N squared, I actually

1273
01:05:09,400 --> 01:05:09,800
just had

1274
01:05:10,000 --> 01:05:17,300
had, you know, and time I actually just had three times that

1275
01:05:18,800 --> 01:05:19,400
Makes sense.

1276
01:05:20,300 --> 01:05:23,100
So this is much much better than this would have been, right?

1277
01:05:23,100 --> 01:05:26,200
This is, this is, this is like, like much much better, and I guess I'm

1278
01:05:26,200 --> 01:05:29,000
using the order here, because it wasn't actually three times and it

1279
01:05:29,000 --> 01:05:29,400
was nowhere.

1280
01:05:29,400 --> 01:05:32,100
Close to that because we're actually counting the actual comparison.

1281
01:05:32,100 --> 01:05:34,600
So, you know, it was instead of n here.

1282
01:05:34,600 --> 01:05:35,700
It's like, how many did we do?

1283
01:05:35,700 --> 01:05:41,200
We did, like six here we did for here so 46.

1284
01:05:41,200 --> 01:05:47,600
We did we did basically like something like fourteen right now, it's a

1285
01:05:47,600 --> 01:05:48,400
little bit tough because it

1286
01:05:48,600 --> 01:05:51,600
That only looks like it, Beat it by 2, which is not that great.

1287
01:05:52,000 --> 01:05:55,400
But hopefully you can see as you would go up here, things would get a

1288
01:05:55,400 --> 01:05:59,800
lot better because every time I moved up I was only having to do this.

1289
01:06:00,000 --> 01:06:04,000
Name this, I was only having to do a number of comparisons that was

1290
01:06:04,000 --> 01:06:08,600
based on the number of things for those numbers of steps, and how many

1291
01:06:08,600 --> 01:06:09,500
numbers of steps.

1292
01:06:09,600 --> 01:06:12,700
What I actually have to do, well, if I start with the lowest level,

1293
01:06:12,700 --> 01:06:18,500
which is every to, right, then that's just going to be too, you know,

1294
01:06:18,500 --> 01:06:21,100
for it's going to double every time, right?

1295
01:06:21,100 --> 01:06:24,400
It's going to be 2 4, 8, 16 32, right?

1296
01:06:24,400 --> 01:06:27,300
As I go up through here, that's how many I was processing each time.

1297
01:06:28,000 --> 01:06:31,900
And what you can see there is that essentially just a power of two

1298
01:06:32,700 --> 01:06:33,700
that it increases.

1299
01:06:33,900 --> 01:06:38,500
So, whatever, n was, in this case, n was eight, we just have to take

1300
01:06:38,500 --> 01:06:40,900
essentially, the log route to, right?

1301
01:06:40,900 --> 01:06:45,500
We just want to say what, you know, two to the x equals whatever RN is

1302
01:06:45,900 --> 01:06:48,300
write or log.

1303
01:06:51,100 --> 01:06:55,800
Log 2 to the x equals log and right.

1304
01:06:56,400 --> 01:06:56,900
Make sense.

1305
01:06:59,600 --> 01:07:03,900
So I only need to take whatever the log 2 is of my input n.

1306
01:07:04,000 --> 01:07:06,800
And I would get how many of these steps in this case, it was three,

1307
01:07:07,100 --> 01:07:07,600
right?

1308
01:07:08,400 --> 01:07:12,700
What that means is the running time for this thing instead of being in

1309
01:07:12,700 --> 01:07:14,200
squared, which is what we had before.

1310
01:07:14,300 --> 01:07:17,600
If I was to use this method, I would end up with something where we

1311
01:07:17,600 --> 01:07:20,400
took the log of n, right?

1312
01:07:20,500 --> 01:07:24,000
And then it was, it was times n, right?

1313
01:07:24,100 --> 01:07:27,500
Because I still have to do something on the order of the number of

1314
01:07:27,500 --> 01:07:29,300
elements each pass.

1315
01:07:29,500 --> 01:07:31,200
To this thing that makes sense.

1316
01:07:31,800 --> 01:07:36,100
And that actually is a very common running time to see, which is

1317
01:07:37,300 --> 01:07:42,400
written like this n log n, it's called right, which is anytime you

1318
01:07:42,400 --> 01:07:46,600
have some kind of a binary, divide and conquer algorithm, where you're

1319
01:07:46,600 --> 01:07:51,500
doing, N Things on every pass, but you only need to do as many passes

1320
01:07:51,500 --> 01:07:54,800
as the power of to what you essentially done.

1321
01:07:54,800 --> 01:07:57,900
Is you've taken something that was, you know, 0 N squared.

1322
01:07:57,900 --> 01:07:59,200
I could write as 0 n.

1323
01:07:59,400 --> 01:07:59,900
X n.

1324
01:08:00,000 --> 01:08:00,600
Right?

1325
01:08:00,800 --> 01:08:05,100
What you've done is you've taken normally I was doing n passes fact, I

1326
01:08:05,100 --> 01:08:06,400
could even draw this out for you.

1327
01:08:07,000 --> 01:08:10,500
Normally what I'm doing is I'm doing this right?

1328
01:08:10,600 --> 01:08:14,700
I'm taking every possible combination of the ends and I'm doing all

1329
01:08:14,700 --> 01:08:17,100
those possible comparisons, right?

1330
01:08:17,200 --> 01:08:20,300
And instead, what I've done is, I've attacked one of those ends, one

1331
01:08:20,300 --> 01:08:23,500
of the loops, instead of one of the loops being going through the

1332
01:08:23,500 --> 01:08:25,000
entire n.

1333
01:08:25,200 --> 01:08:26,500
I've changed it to a log n.

1334
01:08:27,100 --> 01:08:29,300
So now I've taken something that was

1335
01:08:29,800 --> 01:08:33,899
N times n and I change it to end times log n, right?

1336
01:08:35,500 --> 01:08:37,500
And so, just to be more concrete about it, right?

1337
01:08:37,500 --> 01:08:41,300
You could imagine pulling this out into something that made a little

1338
01:08:41,300 --> 01:08:47,300
bit more, that was a, you know, sort of longer or had more, you know,

1339
01:08:47,300 --> 01:08:48,700
got up a little bit higher, right?

1340
01:08:48,700 --> 01:08:54,100
So A B C, D, E, F, G.

1341
01:08:54,100 --> 01:08:58,800
H I J, this is going to be small enough, okay?

1342
01:08:58,800 --> 01:08:59,399
L

1343
01:09:00,399 --> 01:09:03,399
One, two, three, four, five, six, seven, eight, nine, ten, eleven

1344
01:09:03,399 --> 01:09:07,100
twelve and m0 P.

1345
01:09:07,399 --> 01:09:07,700
There we go.

1346
01:09:07,700 --> 01:09:15,600
So now I got 16, right 2, 4 6, 8, 10 12, 14 16 right now, in order to

1347
01:09:15,600 --> 01:09:18,700
our bubble sort, we know exactly what this would look like, in terms

1348
01:09:18,700 --> 01:09:20,700
of how many times we have to process this.

1349
01:09:20,700 --> 01:09:24,000
We'd have to process this many things and we have to process it and

1350
01:09:24,000 --> 01:09:25,100
times, right?

1351
01:09:25,200 --> 01:09:28,700
So we'd have 16 passes through the whole thing, right?

1352
01:09:28,800 --> 01:09:30,000
So we'd have you know, this

1353
01:09:30,200 --> 01:09:33,300
Our first path second path, the third path, fourth path, 6:15 past

1354
01:09:33,300 --> 01:09:35,899
8:07 path that the top, right?

1355
01:09:36,200 --> 01:09:38,700
That's how many operations you be doing, but in the way that I just

1356
01:09:38,700 --> 01:09:39,500
talked about.

1357
01:09:39,800 --> 01:09:44,100
Now, what we do is when we order each of these, we then move up to one

1358
01:09:44,100 --> 01:09:45,500
that has twice as many elements.

1359
01:09:45,500 --> 01:09:49,800
So the next phase is a b c, d e, f, g h.

1360
01:09:50,700 --> 01:09:55,300
I j k l and m 0 P, right?

1361
01:09:55,700 --> 01:09:59,200
And the next phase after this is, see if I can get it right underneath

1362
01:09:59,200 --> 01:09:59,900
the number there.

1363
01:10:00,500 --> 01:10:06,300
ABCDEFG H, I J K.

1364
01:10:06,300 --> 01:10:09,300
L M N O P.

1365
01:10:09,300 --> 01:10:11,000
Don't ask me why I wrote those in opposite order?

1366
01:10:12,400 --> 01:10:20,100
And the final step is abcdefghijklmnop.

1367
01:10:21,200 --> 01:10:25,500
And so what you can see is that in the log, n case with 16 inputs,

1368
01:10:25,700 --> 01:10:29,400
after just four steps of the, OM part of the algorithm.

1369
01:10:29,600 --> 01:10:31,400
I am done, right?

1370
01:10:31,700 --> 01:10:34,300
But if we had done the bubble sort, we would have had to go all the

1371
01:10:34,300 --> 01:10:37,400
way out to 16 that's over here, right?

1372
01:10:37,500 --> 01:10:38,600
That we'd still be running.

1373
01:10:39,800 --> 01:10:42,300
And so the eight case I kept it small so you can see how it was

1374
01:10:42,300 --> 01:10:42,700
working.

1375
01:10:42,800 --> 01:10:45,600
It doesn't show how much more powerful it is because I don't have

1376
01:10:45,600 --> 01:10:49,000
enough, but as soon as you get more, you can see right where as the

1377
01:10:49,000 --> 01:10:51,700
bubble sort would have had to run each of these times.

1378
01:10:51,700 --> 01:10:56,500
It would only have been a quarter of the way through its process by

1379
01:10:56,500 --> 01:10:59,600
the time, the, you know this, this one's already finished in terms of

1380
01:10:59,600 --> 01:11:01,500
the number of steps, right?

1381
01:11:02,000 --> 01:11:04,900
So that's why this is again, n log n.

1382
01:11:05,000 --> 01:11:09,500
It's because it does have to look at essentially, it has to do it.

1383
01:11:09,600 --> 01:11:14,700
Work proportional to the to the items, but it only has to do that work

1384
01:11:14,700 --> 01:11:15,800
log n times.

1385
01:11:16,000 --> 01:11:21,500
So if n is 16, well, obviously 2 to the 4th equals 16, right?

1386
01:11:21,700 --> 01:11:26,200
And so that log n is for, in this case, 16 times 4 whereas our O N

1387
01:11:26,200 --> 01:11:27,900
squared algorithm, right?

1388
01:11:28,000 --> 01:11:30,100
That is a 16 squared.

1389
01:11:30,200 --> 01:11:32,000
That is a really nasty amount of work.

1390
01:11:32,100 --> 01:11:34,300
That is 256, right?

1391
01:11:36,500 --> 01:11:37,800
Yeah, not wrong about that.

1392
01:11:37,800 --> 01:11:41,700
Am I to the 4th x to the fourth is to the 826, right?

1393
01:11:42,000 --> 01:11:46,300
So we've taken something that would have been 256 in the bubble sort

1394
01:11:46,300 --> 01:11:46,700
case.

1395
01:11:46,900 --> 01:11:48,400
And we've changed it to something.

1396
01:11:48,700 --> 01:11:50,700
Then this case is only going to be 64.

1397
01:11:51,100 --> 01:11:54,600
And that's a pretty darn good savings right in terms of the number of

1398
01:11:54,600 --> 01:11:55,300
work units.

1399
01:11:56,300 --> 01:11:59,900
And so hopefully that gives you some sort of insight into why we

1400
01:12:00,000 --> 01:12:03,800
Care about stuff like this, the nature of the algorithm and how it

1401
01:12:03,800 --> 01:12:04,500
processes.

1402
01:12:04,500 --> 01:12:09,500
The inputs can have a very real effect on how this works.

1403
01:12:09,500 --> 01:12:14,700
Now, this I believe is typically called a merge sort

1404
01:12:15,900 --> 01:12:20,500
actually has a name and it's called a merge sort because it does

1405
01:12:20,500 --> 01:12:23,000
exactly what its name sounds like it does.

1406
01:12:23,200 --> 01:12:29,200
It takes little pieces that it knows to be sorted and it merges them.

1407
01:12:30,500 --> 01:12:35,300
And then it merges them again and if you can't quite figure out

1408
01:12:35,300 --> 01:12:38,600
because it is a little confusing where the secret sauce comes from,

1409
01:12:38,600 --> 01:12:43,200
why is it able to do it so much more efficiently than the bubble sort?

1410
01:12:44,600 --> 01:12:50,300
Well, the reason is because it reuses comparisons, right?

1411
01:12:50,800 --> 01:12:53,500
It's basically saying, oh, hey guess what?

1412
01:12:53,900 --> 01:12:58,300
In this particular case, I know that since I've already compared these

1413
01:12:58,300 --> 01:13:04,000
two, if I compare one of these to one of these, I then imply something

1414
01:13:04,000 --> 01:13:06,700
about the other one in that pair.

1415
01:13:07,000 --> 01:13:07,500
Right.

1416
01:13:08,600 --> 01:13:11,500
And that actually, I know, I said this, we're kind of getting off on a

1417
01:13:11,500 --> 01:13:13,600
tangent here, but I'll just say,

1418
01:13:15,400 --> 01:13:18,500
That is actually the basis of dynamic programming, which is a whole

1419
01:13:18,500 --> 01:13:20,800
another discipline of programming, which I would also encourage you to

1420
01:13:20,800 --> 01:13:24,200
talk to look up if you were interested.

1421
01:13:26,200 --> 01:13:31,000
Anyway, point being that is called a merge sort and it's an example of

1422
01:13:31,000 --> 01:13:33,800
how we could knock down the worst-case running time of our bubble,

1423
01:13:33,800 --> 01:13:38,200
sort quite considerably just by doing something very, very simple.

1424
01:13:38,300 --> 01:13:40,300
Hopefully, you understood exactly how that would work.

1425
01:13:40,600 --> 01:13:43,000
It's incredibly incredibly basic.

1426
01:13:43,600 --> 01:13:46,800
Now I've only got four minutes left, so I think what I'll do is I'll

1427
01:13:46,800 --> 01:13:48,700
reserve a little bit of time for questions.

1428
01:13:48,800 --> 01:13:51,800
Hopefully, that was a reasonable introduction to how this sort of

1429
01:13:51,800 --> 01:13:55,900
stuff works and why you might care about it again, as it applies.

1430
01:13:56,000 --> 01:14:00,200
The Sorting the choice of algorithm and its complexity determines, how

1431
01:14:00,200 --> 01:14:03,000
when you add more elements, how much work you will actually have to

1432
01:14:03,000 --> 01:14:03,400
do.

1433
01:14:04,400 --> 01:14:06,800
And this, as you can see, even with just a small.

1434
01:14:06,800 --> 01:14:10,200
Number elements will probably be much faster than our bubble sort if

1435
01:14:10,200 --> 01:14:12,500
we decide to do it.

1436
01:14:12,800 --> 01:14:16,100
And that will be the subject of tomorrow's stream will be talking

1437
01:14:16,100 --> 01:14:20,400
about some of these, sorting algorithms and implementing one of our

1438
01:14:20,400 --> 01:14:24,200
choosing possibly merge sort because it's kind of clean and nice.

1439
01:14:24,200 --> 01:14:25,800
But we could also do quicksort, which is

1440
01:14:26,000 --> 01:14:28,100
Dirtier and a little less predictable.

1441
01:14:28,800 --> 01:14:35,000
But let's go ahead and go to the Q&A here so I can see if people have

1442
01:14:35,000 --> 01:14:35,700
questions.

1443
01:14:56,200 --> 01:14:56,900
Quarter Tron.

1444
01:14:56,900 --> 01:14:59,800
N p stands for non-deterministic polynomial, Plus

1445
01:15:00,000 --> 01:15:01,900
Some other minor problems.

1446
01:15:01,900 --> 01:15:02,600
Otherwise well done.

1447
01:15:02,600 --> 01:15:03,100
Okay good.

1448
01:15:03,100 --> 01:15:04,700
So we have a crude correction there.

1449
01:15:12,800 --> 01:15:14,000
No one will know.

1450
01:15:16,400 --> 01:15:18,300
If I, if I, if I just change that.

1451
01:15:19,900 --> 01:15:20,400
There we go.

1452
01:15:20,800 --> 01:15:21,200
You know what?

1453
01:15:21,200 --> 01:15:21,900
That's good.

1454
01:15:22,000 --> 01:15:25,100
And in fact that's something I should have remembered because that's

1455
01:15:25,100 --> 01:15:30,800
actually if you're actually in NP you would assume that that would

1456
01:15:30,800 --> 01:15:35,300
mean that you you absolutely knew for sure, right?

1457
01:15:35,700 --> 01:15:39,400
So non-deterministic is way better because, you know, that makes

1458
01:15:39,400 --> 01:15:39,800
sense.

1459
01:15:39,900 --> 01:15:44,000
If you say non-deterministic polynomial time, it's like, now, you

1460
01:15:44,000 --> 01:15:47,500
actually are saying, we don't know if the fact that we don't know is

1461
01:15:47,500 --> 01:15:49,300
right in the name, right?

1462
01:15:49,700 --> 01:15:50,400
That makes sense.

1463
01:15:51,800 --> 01:15:53,000
So yeah, so that's better.

1464
01:15:53,000 --> 01:15:56,500
So, the only question is, how do you say non polynomial?

1465
01:15:56,700 --> 01:15:59,600
If you can't say NP, what do you say?

1466
01:16:04,200 --> 01:16:09,200
Because if you, if MP meant non-deterministic polynomial, like how do

1467
01:16:09,200 --> 01:16:13,100
you actually say like, how do you say the thing that I was talking

1468
01:16:13,100 --> 01:16:13,700
about?

1469
01:16:14,500 --> 01:16:17,400
How do you say that, can you just not say it?

1470
01:16:17,400 --> 01:16:22,000
I mean, you can't abbreviate it.

1471
01:16:39,900 --> 01:16:41,400
Let's see for the records are Mark.

1472
01:16:41,400 --> 01:16:44,800
I made earlier about restaurants also isn't merge sort, n, log, n.

1473
01:16:44,900 --> 01:16:46,900
Yes, that's the one we're talking about down here.

1474
01:16:51,600 --> 01:16:55,600
This is merge sort and it is n log n, right?

1475
01:16:55,600 --> 01:16:55,800
Is it?

1476
01:16:55,800 --> 01:16:57,500
That's what we said right here.

1477
01:17:08,700 --> 01:17:09,300
Long brilliant.

1478
01:17:09,300 --> 01:17:11,800
So unit testing a function that computes a path for the traveling

1479
01:17:11,800 --> 01:17:12,500
salesman problem.

1480
01:17:12,500 --> 01:17:14,100
We require writing the algorithm twice.

1481
01:17:14,100 --> 01:17:19,500
The second one testing the first Yes actually unfortunately yes.

1482
01:17:22,000 --> 01:17:26,700
Unless you, unless you solve some open problems in computer science, I

1483
01:17:26,700 --> 01:17:32,300
mean, as far as I know, traveling salesman there is no polynomial,

1484
01:17:32,300 --> 01:17:38,000
verifier for it and so you can't test its results if that makes sense.

1485
01:17:39,800 --> 01:17:40,900
You would need to

1486
01:17:42,800 --> 01:17:45,400
Yeah, there's really nothing you can do as far as I know.

1487
01:18:04,500 --> 01:18:08,300
577, do you think computer science major is a good path to go?

1488
01:18:08,300 --> 01:18:10,500
I'm in it now I don't know.

1489
01:18:10,500 --> 01:18:12,800
It depends on what interests you right.

1490
01:18:12,800 --> 01:18:16,500
Like I said you know well as the fact that I got the NP term wrong

1491
01:18:16,500 --> 01:18:20,400
here and then I actually died suddenly so let me ask again just in

1492
01:18:20,400 --> 01:18:26,100
case, someone knows how do you actually say non polynomial is there.

1493
01:18:26,100 --> 01:18:27,600
No abbreviation for it.

1494
01:18:28,800 --> 01:18:31,800
like, if I actually want to talk about something that's non polynomial

1495
01:18:31,800 --> 01:18:32,300
time,

1496
01:18:33,600 --> 01:18:35,900
I don't want to say non-deterministic polynomial.

1497
01:18:35,900 --> 01:18:37,800
I want to say, non-polynomial.

1498
01:18:38,000 --> 01:18:39,700
Can you say anything?

1499
01:18:39,900 --> 01:18:41,600
Is there a name for it?

1500
01:18:41,700 --> 01:18:45,700
Like, can you say q p or something?

1501
01:18:45,800 --> 01:18:51,100
That means non polynomial time or, or is there just abbreviation NP?

1502
01:18:51,100 --> 01:18:53,300
And that's the only be a shit and you'd only means not a German spy.

1503
01:18:53,300 --> 01:18:56,000
So, if you want to say non polynomial time, you have to literally Say

1504
01:18:56,000 --> 01:18:57,300
Non polynomial time.

1505
01:19:05,100 --> 01:19:09,900
Insofar as says you say, exponential and okay, it sounds like Busy

1506
01:19:09,900 --> 01:19:10,400
Beaver.

1507
01:19:10,400 --> 01:19:12,100
Huge hmong and strophe.

1508
01:19:12,100 --> 01:19:13,700
Amar Bose saying not in P.

1509
01:19:14,100 --> 01:19:15,700
Alright, okay.

1510
01:19:15,700 --> 01:19:18,800
So, basically, let's let me rewrite this just for the benefit of

1511
01:19:18,800 --> 01:19:20,500
people who might watch this video later.

1512
01:19:21,500 --> 01:19:26,600
So here is how we say what I wanted to say, p, is polynomial time.

1513
01:19:26,600 --> 01:19:30,400
That doesn't change NP is non-deterministic.

1514
01:19:32,400 --> 01:19:33,300
Polynomial.

1515
01:19:37,300 --> 01:19:41,400
And that is what I explained here, which is saying that it has the P

1516
01:19:41,400 --> 01:19:42,800
verifier, I guess.

1517
01:19:45,400 --> 01:19:47,200
Well that just says we don't know.

1518
01:19:47,300 --> 01:19:48,500
I guess let's leave it at that.

1519
01:19:48,800 --> 01:19:52,200
That just says me, don't know if it's in here or not, right?

1520
01:19:53,700 --> 01:19:58,500
and then not in P, was actually the thing I was trying to say,

1521
01:20:01,900 --> 01:20:06,900
So when I said, NPI actually really meant this because I was trying to

1522
01:20:06,900 --> 01:20:10,400
explain the things that that don't have, you know, that are, like, 2

1523
01:20:10,400 --> 01:20:12,000
to the N or whatever, right?

1524
01:20:12,100 --> 01:20:13,400
For sure is 2 to the N.

1525
01:20:15,700 --> 01:20:17,600
So I guess that's all you can say you.

1526
01:20:17,600 --> 01:20:20,100
There is no abbreviation for this guy.

1527
01:20:21,000 --> 01:20:23,200
Maybe you could call him an imp

1528
01:20:24,800 --> 01:20:26,200
This algorithm is an imp.

1529
01:20:27,900 --> 01:20:28,900
I like that.

1530
01:20:29,700 --> 01:20:31,200
This is an imp e0.

1531
01:20:33,800 --> 01:20:34,500
Algorithm.

1532
01:20:41,000 --> 01:20:44,000
It is not in p.

1533
01:20:45,300 --> 01:20:48,800
All right, so that's for those of you who like me, don't know computer

1534
01:20:48,800 --> 01:20:53,800
science, very well that maybe if I can just get that drilled in, I

1535
01:20:53,800 --> 01:20:59,000
will stop using the wrong terms to refer to things because I've never

1536
01:20:59,000 --> 01:20:59,800
known what that was.

1537
01:21:00,000 --> 01:21:01,400
That's good to know.

1538
01:21:01,500 --> 01:21:02,500
So, not in P.

1539
01:21:02,700 --> 01:21:05,000
I can just say that and I won't say NP anymore.

1540
01:21:05,000 --> 01:21:08,700
When I mean, that something is is like, traveling salesman.

1541
01:21:10,800 --> 01:21:13,500
Although I guess we don't know, have we proven traveling through.

1542
01:21:13,500 --> 01:21:15,300
Let's ask, let's ask that.

1543
01:21:15,300 --> 01:21:20,500
Has anyone definitively proven that traveling salesman could not be in

1544
01:21:20,500 --> 01:21:22,200
P, or do we still?

1545
01:21:22,200 --> 01:21:26,200
Is that potentially np-hard?

1546
01:21:26,200 --> 01:21:29,600
Like is this as hard?

1547
01:21:32,000 --> 01:21:36,300
As n p, but not necessarily.

1548
01:21:38,000 --> 01:21:38,700
Limpy.

1549
01:21:41,100 --> 01:21:42,600
What do we know about traveling salesman?

1550
01:21:42,800 --> 01:21:43,700
That's the question.

1551
01:21:44,600 --> 01:21:45,500
Because right?

1552
01:21:45,700 --> 01:21:48,100
Just again, to sort of cement this down,

1553
01:21:49,400 --> 01:21:53,700
if nothing more for my own sake, we know the Travelling salesman

1554
01:21:54,700 --> 01:22:00,700
doesn't have a p or n p thing that we know of yet or sorry.

1555
01:22:00,700 --> 01:22:01,600
Np-complete.

1556
01:22:01,700 --> 01:22:05,200
We know that it doesn't have a polynomial time verifier.

1557
01:22:05,400 --> 01:22:08,900
And we know that doesn't have a polynomial time solution that we

1558
01:22:08,900 --> 01:22:09,700
found.

1559
01:22:10,700 --> 01:22:14,400
But we don't know necessarily what has been proven about it.

1560
01:22:15,000 --> 01:22:18,500
I'm pretty sure that they haven't proven it np-complete.

1561
01:22:18,700 --> 01:22:19,000
I'm

1562
01:22:19,200 --> 01:22:21,200
Sure that it is not np-complete.

1563
01:22:21,200 --> 01:22:27,000
I think it because it doesn't have like I said, I'm pretty sure no one

1564
01:22:27,000 --> 01:22:28,800
has found a pee verifier for it.

1565
01:22:29,200 --> 01:22:35,700
But I don't know if anyone's proven that it's not in P, maybe it still

1566
01:22:35,700 --> 01:22:36,100
is.

1567
01:22:36,300 --> 01:22:37,600
So do we know?

1568
01:22:44,300 --> 01:22:49,900
so people on the stream say np-complete, which means that it is in

1569
01:22:49,900 --> 01:22:55,200
fact, possible that if somebody were to figure out how to solve

1570
01:22:55,200 --> 01:22:57,000
np-complete problems

1571
01:22:59,000 --> 01:23:04,100
I MP time traveling salesman would also be solvable in that time.

1572
01:23:04,500 --> 01:23:09,200
Meaning, even though it doesn't have a p, verifier that we know of

1573
01:23:12,200 --> 01:23:13,100
Here's another question.

1574
01:23:13,400 --> 01:23:14,800
Have they proven?

1575
01:23:19,100 --> 01:23:21,300
Have they proven that?

1576
01:23:21,300 --> 01:23:22,500
It doesn't have a pee verifier.

1577
01:23:27,800 --> 01:23:30,900
I really want a computer scientist to just step in here and give us

1578
01:23:30,900 --> 01:23:34,000
the full explanation because I'd like to hear but unfortunately, we

1579
01:23:34,000 --> 01:23:34,800
don't have that.

1580
01:23:58,100 --> 01:23:59,800
Well, I'll let I'll let this go.

1581
01:24:00,100 --> 01:24:02,000
I'll let this go on to the thing.

1582
01:24:02,000 --> 01:24:02,500
So,

1583
01:24:04,400 --> 01:24:05,500
Somebody.

1584
01:24:08,100 --> 01:24:13,000
Somebody figure out whether the shortest path problem, I don't think

1585
01:24:13,000 --> 01:24:13,300
so.

1586
01:24:13,300 --> 01:24:16,400
I don't think so, because it sounds like what you guys are talking

1587
01:24:16,400 --> 01:24:16,600
about.

1588
01:24:16,600 --> 01:24:17,900
The stream is not what I was saying.

1589
01:24:17,900 --> 01:24:19,000
Was this fabric sells a problem?

1590
01:24:19,000 --> 01:24:23,900
Finding the shortest path is different than just finding a path of a

1591
01:24:23,900 --> 01:24:26,000
certain length, right?

1592
01:24:27,500 --> 01:24:30,200
Although, I guess technically you could transform those by then just

1593
01:24:30,300 --> 01:24:35,400
asking some up all the paths and then take one off and in order to

1594
01:24:35,400 --> 01:24:36,100
take them off.

1595
01:24:36,200 --> 01:24:36,200
Well,

1596
01:24:36,400 --> 01:24:37,900
That know that maybe that doesn't work.

1597
01:24:38,400 --> 01:24:42,700
I want someone so on the forums, if one of you computer science, folks

1598
01:24:42,900 --> 01:24:44,000
would be kind enough to do.

1599
01:24:44,000 --> 01:24:48,900
So I would love for someone to post some information about traveling

1600
01:24:48,900 --> 01:24:50,500
salesman, right?

1601
01:24:50,800 --> 01:24:57,000
Because I would like to know if we've ever figured out whether it has

1602
01:24:57,000 --> 01:25:02,700
a p verifier because I thought it didn't but maybe it actually does or

1603
01:25:02,700 --> 01:25:06,200
maybe it does now and it didn't before or something.

1604
01:25:06,400 --> 01:25:06,500
Thing.

1605
01:25:06,500 --> 01:25:07,600
So, I'd like to know about that.

1606
01:25:07,600 --> 01:25:10,600
That would be nice if someone could post about that, and I'll take a

1607
01:25:10,600 --> 01:25:11,200
look at it.

1608
01:25:11,200 --> 01:25:14,200
Maybe we'll talk about it tomorrow if someone does post.

1609
01:25:15,400 --> 01:25:17,500
All right, so anyway, this is all good.

1610
01:25:17,700 --> 01:25:18,700
Everyone's happy.

1611
01:25:18,900 --> 01:25:19,900
I'll go back to the Q&A.

1612
01:25:34,100 --> 01:25:36,000
Oh, I've created, I've created a problem.

1613
01:25:36,000 --> 01:25:39,600
I guess people don't know which traveling salesman problem.

1614
01:25:39,600 --> 01:25:40,400
We're talking about.

1615
01:25:40,400 --> 01:25:41,700
So there's more than one

1616
01:26:03,200 --> 01:26:03,800
interesting.

1617
01:26:04,200 --> 01:26:04,800
All right.

1618
01:26:06,300 --> 01:26:07,700
See if there's any other questions here.

1619
01:26:25,900 --> 01:26:29,800
It scares me that people on the stream, who, I think RCS people are

1620
01:26:30,000 --> 01:26:33,500
not even able to agree about the traveling salesman problem.

1621
01:26:33,500 --> 01:26:35,600
I feel like tomorrow should just be called

1622
01:26:36,500 --> 01:26:38,600
Ten minutes traveling, salesman problem.

1623
01:26:44,100 --> 01:26:45,500
Koreans have three wouldn't say that.

1624
01:26:45,500 --> 01:26:46,600
Something is nin P.

1625
01:26:46,600 --> 01:26:48,600
Implies that P is not equal to NP.

1626
01:26:48,700 --> 01:26:50,900
Did we win a 1 million dollar prize?

1627
01:26:51,300 --> 01:26:56,000
No, so again like I said this stuff is outside of my area of expertise

1628
01:26:56,000 --> 01:26:59,800
so I would hope

1629
01:27:00,000 --> 01:27:06,400
Refer to you to someplace, that's better to learn about it but the

1630
01:27:06,400 --> 01:27:12,500
reason that there's pee, you know, something is in p and not in P.

1631
01:27:13,700 --> 01:27:16,500
The reason that that's not the same as not deterministic polynomial,

1632
01:27:16,500 --> 01:27:21,500
time or whatever, the reason for that is because it's possible that

1633
01:27:21,500 --> 01:27:26,200
you could prove that there are things you cannot solve in polynomial

1634
01:27:26,200 --> 01:27:26,600
time.

1635
01:27:27,300 --> 01:27:27,800
Right?

1636
01:27:28,600 --> 01:27:30,100
Maybe you can prove that.

1637
01:27:30,900 --> 01:27:33,700
So you might be able to prove that an algorithm is not in p.

1638
01:27:34,800 --> 01:27:38,300
That's just for one specific problem, right?

1639
01:27:38,900 --> 01:27:42,900
So, you know, maybe it's like the, you know, we make up some problem.

1640
01:27:42,900 --> 01:27:44,100
We have the magical

1641
01:27:45,900 --> 01:27:51,200
Sorting food problem, you know, and we figure out that problem is so

1642
01:27:51,200 --> 01:27:54,400
hard that there's no way we can prove that.

1643
01:27:54,400 --> 01:27:58,000
It's definitely not solvable in polynomial time, right.

1644
01:27:58,000 --> 01:28:00,700
It's non-polynomial period, right?

1645
01:28:00,800 --> 01:28:03,100
I mean I guess I could do that.

1646
01:28:03,800 --> 01:28:06,900
Can't we just do that, right?

1647
01:28:07,900 --> 01:28:10,900
All the numbers.

1648
01:28:12,400 --> 01:28:17,500
You know, from 1 to 2 to the n.

1649
01:28:20,000 --> 01:28:23,900
And it's not very computer science ee, but there's no way to do that

1650
01:28:23,900 --> 01:28:24,900
in polynomial time.

1651
01:28:24,900 --> 01:28:25,900
You have to write them.

1652
01:28:25,900 --> 01:28:30,000
All you're done, right?

1653
01:28:30,200 --> 01:28:34,100
It's not really valid but imagine you have something that was that

1654
01:28:34,100 --> 01:28:37,500
blatant where you're just like, yep, there's no way you cuz the amount

1655
01:28:37,500 --> 01:28:41,200
of work that actually has to get done is the 2 to the N, right?

1656
01:28:41,400 --> 01:28:44,000
This doesn't really count because you might then say, well that actual

1657
01:28:44,000 --> 01:28:45,800
number there is and blah blah blah.

1658
01:28:45,800 --> 01:28:49,300
So so maybe that's maybe that's bad but if you could find something

1659
01:28:49,300 --> 01:28:49,500
that you

1660
01:28:49,800 --> 01:28:53,000
Actually prove there's no way you can do it in polynomial time.

1661
01:28:53,300 --> 01:28:56,900
That's that saying it's not in P.

1662
01:28:57,400 --> 01:29:02,900
The problem with the MP complete things saying MP complete I believe

1663
01:29:02,900 --> 01:29:04,700
is saying that we've sort of proven that.

1664
01:29:04,700 --> 01:29:07,200
It's in this set the non-deterministic.

1665
01:29:09,100 --> 01:29:10,800
I'm going to write this so I don't forget it again.

1666
01:29:12,800 --> 01:29:15,300
My brain is getting old because like it's not like I didn't know that

1667
01:29:15,300 --> 01:29:19,700
term but I guess I'm just getting too stupid anyway non-deterministic

1668
01:29:19,700 --> 01:29:20,700
polynomial time.

1669
01:29:22,200 --> 01:29:25,800
This is a class of problems that we couldn't prove that for we don't

1670
01:29:25,800 --> 01:29:28,400
know how to prove this this for it yet.

1671
01:29:28,600 --> 01:29:31,100
So it's not so much that P and not in P.

1672
01:29:31,300 --> 01:29:35,100
It's not so much that you can't ever classify algorithms into one of

1673
01:29:35,100 --> 01:29:37,300
these too often times you can.

1674
01:29:37,800 --> 01:29:41,600
But there's a whole set of algorithms in between that we don't know.

1675
01:29:43,500 --> 01:29:44,500
We just don't know.

1676
01:29:45,600 --> 01:29:48,500
The proofs are too hard or not possible, or who knows, right?

1677
01:29:48,500 --> 01:29:51,100
For some reason, nobody's been able to prove it yet.

1678
01:29:51,900 --> 01:29:55,700
And so that's why there's like room in between here for the

1679
01:29:55,700 --> 01:29:57,100
np-complete stuff.

1680
01:29:58,800 --> 01:29:59,800
And we just don't know.

1681
01:30:00,600 --> 01:30:04,300
So I don't think it's necessarily impossible to do this.

1682
01:30:05,100 --> 01:30:09,400
You could prove something was not in P, but for these things nobody

1683
01:30:09,400 --> 01:30:12,600
has ever done that they've never proven it in either direction.

1684
01:30:12,800 --> 01:30:15,500
They can't prove that it's in p and they can't prove that it's not,

1685
01:30:15,800 --> 01:30:16,700
it's just in limbo.

1686
01:30:17,600 --> 01:30:21,600
I think everyone sort of expects that eventually we will prove that

1687
01:30:21,600 --> 01:30:24,500
it's not in P but no one's done it yet.

1688
01:30:42,700 --> 01:30:45,700
Long Billy is suggesting that the game should include a traveling

1689
01:30:45,700 --> 01:30:46,300
salesman.

1690
01:30:46,800 --> 01:30:47,600
I agree.

1691
01:30:54,500 --> 01:30:55,400
Keeper Caleb.

1692
01:30:55,400 --> 01:30:57,900
Will we go into more complex?

1693
01:30:57,900 --> 01:30:58,600
Sort out of them's.

1694
01:30:58,600 --> 01:31:02,800
Like Radix sort also is the space requirement of merge sort, something

1695
01:31:02,800 --> 01:31:05,100
that needs to take into consideration for handmade hero.

1696
01:31:06,600 --> 01:31:12,400
So we have plenty of space, so I don't think it probably would be, as

1697
01:31:12,400 --> 01:31:13,600
for Radix sort.

1698
01:31:13,900 --> 01:31:14,400
I don't know.

1699
01:31:14,400 --> 01:31:17,800
We've got floating Point numbers, so I don't know that Radix sort is

1700
01:31:17,800 --> 01:31:19,300
going to be particularly useful to us.

1701
01:31:19,300 --> 01:31:20,300
Maybe it will be

1702
01:31:22,300 --> 01:31:27,100
But Radix sort is kind of a very special case, sort of A Sort.

1703
01:31:27,100 --> 01:31:30,700
It's not very general purpose because it implies some very specific

1704
01:31:30,700 --> 01:31:32,000
things about the inputs.

1705
01:31:32,600 --> 01:31:34,100
That is not so good.

1706
01:31:35,000 --> 01:31:39,400
It makes it hard to sort on things other than very specific numerical

1707
01:31:39,400 --> 01:31:40,000
things.

1708
01:31:45,000 --> 01:31:47,400
Quarter Tron says, since you didn't go to college, when did you first

1709
01:31:47,400 --> 01:31:50,400
get your shit in or at least start learning All About Big O?

1710
01:31:51,700 --> 01:31:54,200
I think it was because I had a book called introduction to algorithms

1711
01:31:54,200 --> 01:32:00,100
that was just about like, you know, like sorts and just joint set

1712
01:32:00,100 --> 01:32:03,100
forests, you know, all sorts of weird algorithm things and it talked

1713
01:32:03,100 --> 01:32:03,700
about it, a bunch.

1714
01:32:03,700 --> 01:32:06,900
So I was like, okay, like I see, right?

1715
01:32:06,900 --> 01:32:11,300
But as you can tell, like, right, you know, nobody makes this mistake

1716
01:32:11,300 --> 01:32:13,700
that I made up here, where I was like, tried to refer to non

1717
01:32:13,700 --> 01:32:14,600
polynomial time.

1718
01:32:14,800 --> 01:32:17,200
Saying it was NP, right.

1719
01:32:17,300 --> 01:32:21,700
Like nobody makes that nobody makes that mistake.

1720
01:32:21,800 --> 01:32:23,700
If you do a lot of computer science, you can tell.

1721
01:32:23,700 --> 01:32:25,600
I just don't I hardly do any of it.

1722
01:32:25,800 --> 01:32:31,100
I only know it just from the very basic, like the very basic

1723
01:32:31,100 --> 01:32:33,900
conceptual stuff like here, where you look at an algorithm that you

1724
01:32:33,900 --> 01:32:38,400
write, and you go what's its complexity, worst case complexity?

1725
01:32:38,400 --> 01:32:40,000
Because that's very easy, right?

1726
01:32:40,100 --> 01:32:43,200
That's the very practical, very simple part of the computer science,

1727
01:32:43,900 --> 01:32:44,600
but any of the other

1728
01:32:44,700 --> 01:32:44,900
Stuff.

1729
01:32:44,900 --> 01:32:49,700
I don't know and like the non-deterministic polynomial Time stuff.

1730
01:32:49,800 --> 01:32:51,300
I find it really interesting.

1731
01:32:51,500 --> 01:32:56,600
Like I would I'd be super entertained going and setting that I'm sure

1732
01:32:57,300 --> 01:32:59,800
but I've just never done it so I know almost nothing.

1733
01:33:00,900 --> 01:33:03,300
that's why I say like, I don't know anything about

1734
01:33:05,500 --> 01:33:06,800
Like even which problems are in there.

1735
01:33:06,800 --> 01:33:08,400
I remember like Dean's, listen 3sat.

1736
01:33:08,400 --> 01:33:10,600
But you know, there's dozens of other problems that they prove, you're

1737
01:33:10,600 --> 01:33:13,300
a complete and they do mappings between them and all the other stuff.

1738
01:33:13,400 --> 01:33:16,300
I don't know anything about them other than I think it's pretty cool.

1739
01:33:25,500 --> 01:33:28,600
Insofar says, I'm not sure we can prove something is not in P, unless

1740
01:33:28,600 --> 01:33:31,700
it is undecidable or we can prove p is not equal to NP.

1741
01:33:32,600 --> 01:33:33,600
So maybe that's true.

1742
01:33:47,000 --> 01:33:48,000
Again, like I said, I don't know.

1743
01:33:49,000 --> 01:33:51,100
My computer science knowledge is way too.

1744
01:33:54,300 --> 01:33:54,800
Connor rents.

1745
01:33:54,800 --> 01:33:56,000
By the way, eight squared.

1746
01:33:56,000 --> 01:33:56,500
Doesn't equal.

1747
01:33:56,500 --> 01:33:59,300
16, did I do that somewhere?

1748
01:34:01,900 --> 01:34:02,500
Nice.

1749
01:34:06,700 --> 01:34:07,200
No wonder.

1750
01:34:07,200 --> 01:34:11,600
This looked no wonder this looks not so not so good.

1751
01:34:11,700 --> 01:34:17,300
8 squared is 64 so that compared to whatever it was 14 is a lot

1752
01:34:17,300 --> 01:34:19,100
better, right?

1753
01:34:20,900 --> 01:34:26,000
so I guess we didn't have to do if my quick math had not been so bad,

1754
01:34:26,000 --> 01:34:27,800
I guess we didn't necessarily have to do all these

1755
01:34:29,100 --> 01:34:30,000
So, it's bad even.

1756
01:34:30,400 --> 01:34:31,900
It's gets bad really quick?

1757
01:34:32,000 --> 01:34:33,600
Doesn't it man?

1758
01:34:35,700 --> 01:34:37,700
And squared algorithms are just really dangerous.

1759
01:34:39,600 --> 01:34:40,700
That's really nasty.

1760
01:34:42,600 --> 01:34:43,500
For obvious reasons.

1761
01:34:45,700 --> 01:34:46,400
But anyway, thank you.

1762
01:34:46,400 --> 01:34:47,100
Connor 44.

1763
01:34:50,600 --> 01:34:51,300
Correcting that.

1764
01:35:01,300 --> 01:35:01,900
I'm really enjoy.

1765
01:35:01,900 --> 01:35:05,600
So I kind of like seriously guys, I really want someone to.

1766
01:35:05,600 --> 01:35:08,100
Can we start a forum for on this because like just the amount of

1767
01:35:08,100 --> 01:35:10,600
argument that's in the chat over whether or not, you can prove stuff

1768
01:35:10,600 --> 01:35:14,200
is in P, or not, is kind of entertaining.

1769
01:35:14,500 --> 01:35:15,500
I would love.

1770
01:35:15,500 --> 01:35:18,000
In fact, all we really need if there's a good explanation for the

1771
01:35:18,000 --> 01:35:21,500
summer, like you go to the Wikipedia and like it's just dense

1772
01:35:21,500 --> 01:35:23,000
nonsense, right?

1773
01:35:23,000 --> 01:35:27,400
Like you go to something like, np-complete and you get a lot of stuff

1774
01:35:27,400 --> 01:35:30,500
that's just really hard to actually follow, right?

1775
01:35:31,300 --> 01:35:32,100
we're like,

1776
01:35:33,600 --> 01:35:37,500
They have stuff that just not a very intuitive explanation of what is

1777
01:35:37,500 --> 01:35:39,600
actually going on, which may be fine.

1778
01:35:39,600 --> 01:35:43,100
If your primary goal is like mathy, right?

1779
01:35:44,400 --> 01:35:47,300
But if you're just trying to understand the basics of it, it'd be

1780
01:35:47,300 --> 01:35:51,900
really cool if I could Point people on the stream like tomorrow or

1781
01:35:51,900 --> 01:35:52,700
something.

1782
01:35:53,300 --> 01:35:54,900
When we actually go, right, the store stuff.

1783
01:35:55,500 --> 01:35:57,700
It'd be really cool if I could plant some into something that's like a

1784
01:35:57,700 --> 01:35:59,800
really good introduction.

1785
01:36:00,000 --> 01:36:04,100
We're it's just very clean, you know, explained if you aim at, you

1786
01:36:04,100 --> 01:36:06,400
know, explain the way I was sort of explain it here where it's just

1787
01:36:06,400 --> 01:36:08,200
very like, intuitive and simple.

1788
01:36:08,300 --> 01:36:12,200
But someone who knows the real deep parts of it.

1789
01:36:12,200 --> 01:36:13,600
So it's all correct.

1790
01:36:13,600 --> 01:36:20,700
And, and has all the right interrelations and there's no mistakes, you

1791
01:36:20,700 --> 01:36:24,900
know, like and and and it has the stuff like, can you prove things

1792
01:36:24,900 --> 01:36:25,800
like examples?

1793
01:36:25,800 --> 01:36:26,600
You know, is there?

1794
01:36:26,600 --> 01:36:29,200
Somebody who has like oh and here's an example of something that's not

1795
01:36:29,200 --> 01:36:29,700
in p.

1796
01:36:30,400 --> 01:36:31,000
Right.

1797
01:36:33,800 --> 01:36:35,100
It'd be really cool.

1798
01:36:36,000 --> 01:36:40,700
If, if there was a place that people could go for that, I would love

1799
01:36:40,700 --> 01:36:41,200
it.

1800
01:36:41,700 --> 01:36:44,200
And I feel like other people on handmade hero would like it to just so

1801
01:36:44,200 --> 01:36:49,500
that people who are curious about that can basically like go and get

1802
01:36:49,500 --> 01:36:53,300
the primer that just lets them know what this is all about without

1803
01:36:53,300 --> 01:36:56,600
having to actually learn it all first, right?

1804
01:36:59,400 --> 01:37:01,800
So yeah, because that would be really, really great.

1805
01:37:01,800 --> 01:37:05,400
It's something I've always wanted to because like I said I don't ever

1806
01:37:05,400 --> 01:37:09,200
have occasion to study this and it doesn't really affect me, but it's

1807
01:37:09,200 --> 01:37:09,900
intellectually.

1808
01:37:09,900 --> 01:37:10,600
Interesting.

1809
01:37:10,700 --> 01:37:14,100
And so I feel like there's a lot of people who would benefit from, who

1810
01:37:14,100 --> 01:37:17,900
are like Curious, who would benefit from having the really good

1811
01:37:17,900 --> 01:37:22,400
version, you know, an hour or two lecture even or whatever.

1812
01:37:22,600 --> 01:37:23,800
That's just like, here you go.

1813
01:37:25,500 --> 01:37:29,700
That would be pretty awesome if that makes sense.

1814
01:37:31,500 --> 01:37:35,100
Quarter Tron says I shall dig through my copy of computers and

1815
01:37:35,100 --> 01:37:37,900
intractability by Garey and Johnson tonight.

1816
01:37:37,900 --> 01:37:39,300
Well thank you very much.

1817
01:37:41,900 --> 01:37:45,400
Quarter Tron, the first sentence contains the word whimsical, so it's

1818
01:37:45,400 --> 01:37:46,700
looking good so far.

1819
01:37:48,200 --> 01:37:48,700
Okay.

1820
01:37:53,300 --> 01:37:54,900
Long Boolean has posted a link.

1821
01:37:56,400 --> 01:37:59,900
introduction to algorithms computational complexity by Eric Daman

1822
01:38:02,700 --> 01:38:05,500
I will watch this tonight and see what I think.

1823
01:38:09,600 --> 01:38:13,900
All right, so I think that's about it for today, yeah.

1824
01:38:14,100 --> 01:38:17,900
Anyway, just to wrap up after after all of that.

1825
01:38:18,000 --> 01:38:22,800
So all of that was, you know, like I said, just tons and tons of stuff

1826
01:38:22,800 --> 01:38:24,400
in there from computer science.

1827
01:38:24,600 --> 01:38:26,900
If you want to know more about that, I would definitely encourage you

1828
01:38:26,900 --> 01:38:27,800
to go take a look.

1829
01:38:27,800 --> 01:38:30,200
It is not something I ever do much of.

1830
01:38:30,800 --> 01:38:33,500
So, I would definitely encourage you to study it on your own or learn

1831
01:38:33,500 --> 01:38:36,700
more about it, if it interests you, if it doesn't interest you, that's

1832
01:38:36,700 --> 01:38:37,600
fine but

1833
01:38:38,700 --> 01:38:40,300
This stuff, you still got to know.

1834
01:38:40,300 --> 01:38:44,000
So the part that you have to know, you gotta know this basic stuff.

1835
01:38:44,000 --> 01:38:47,000
The stuff that I sort of worked through, you've got to know these

1836
01:38:47,000 --> 01:38:47,600
things.

1837
01:38:48,700 --> 01:38:52,500
You want to be able to tell the difference between these types of

1838
01:38:52,500 --> 01:38:53,400
algorithms, right?

1839
01:38:53,400 --> 01:38:54,500
You want to be able to know.

1840
01:38:54,500 --> 01:38:55,900
Did you write something that's 0n?

1841
01:38:55,900 --> 01:38:57,200
Did you write something that's so in square?

1842
01:38:57,200 --> 01:38:58,200
Did you write something it's n?

1843
01:38:58,200 --> 01:38:59,800
Log n, right?

1844
01:39:00,400 --> 01:39:05,100
And basically, like if you don't know the complexity of your

1845
01:39:05,100 --> 01:39:08,500
algorithms, when you write them, you won't know how your stuff scales

1846
01:39:08,600 --> 01:39:12,500
as you add more entities to your system, more triangles to your render

1847
01:39:12,500 --> 01:39:16,000
path, whatever it is that you're trying to handle workload wise.

1848
01:39:16,100 --> 01:39:17,200
This stuff to, you got to know.

1849
01:39:17,400 --> 01:39:19,700
So like p and p stuff like this.

1850
01:39:19,800 --> 01:39:22,000
You don't have to know that it's interesting.

1851
01:39:22,000 --> 01:39:23,900
You don't have to know this stuff.

1852
01:39:24,100 --> 01:39:28,800
You do you really got to know this it's not hard, right?

1853
01:39:28,800 --> 01:39:30,000
It's not nearly as hard.

1854
01:39:30,100 --> 01:39:33,500
It's like halting problems are np-complete or any of those things.

1855
01:39:33,500 --> 01:39:37,000
It's not nearly as hard as you know, that it's much, much simpler, but

1856
01:39:37,000 --> 01:39:38,400
you do have to be aware of it.

1857
01:39:38,400 --> 01:39:44,600
And so this is the stuff again, that will go over for a second time

1858
01:39:44,600 --> 01:39:47,700
tomorrow where we just actually Implement a few sorts look at what

1859
01:39:47,700 --> 01:39:50,000
they're running times are and just kind of hammer home.

1860
01:39:50,000 --> 01:39:51,400
The reason why you care about this.

1861
01:39:51,400 --> 01:39:55,600
So yeah, hopefully, maybe you're a little interested in this stuff and

1862
01:39:55,600 --> 01:39:58,200
maybe you'd like to look a little, take a little bit of look at it.

1863
01:39:58,200 --> 01:39:59,800
That will probably never come up again on.

1864
01:40:00,100 --> 01:40:04,000
Made hero, but this stuff absolutely will come up.

1865
01:40:04,100 --> 01:40:06,400
I've already mentioned it many times in the past, I will mention it

1866
01:40:06,400 --> 01:40:09,300
many times in the future, and you really do have to be solid on this

1867
01:40:09,300 --> 01:40:13,000
stuff because again, not that hard does not require really any

1868
01:40:13,000 --> 01:40:13,800
theoretical knowledge.

1869
01:40:13,800 --> 01:40:16,900
It's just a very simple, very basic concept of.

1870
01:40:16,900 --> 01:40:20,000
Can you figure out the maximum number of loop iterations?

1871
01:40:20,000 --> 01:40:22,600
Your things going to do and that's something every programmer should

1872
01:40:22,600 --> 01:40:23,400
be able to do.

1873
01:40:23,600 --> 01:40:25,600
It's not theoretical at all.

1874
01:40:25,600 --> 01:40:29,600
Actually, obviously it has a lot of applications in theory, but in

1875
01:40:29,600 --> 01:40:30,100
terms of

1876
01:40:30,400 --> 01:40:31,700
Using it day to day.

1877
01:40:32,300 --> 01:40:36,500
It's very practical and very very worth knowing because if you don't

1878
01:40:36,600 --> 01:40:40,600
you end up with a lot of surprises things that you weren't expecting

1879
01:40:40,600 --> 01:40:41,000
to hurt.

1880
01:40:41,000 --> 01:40:44,900
You can hurt you, a lot, as you try to scale up your game to handle

1881
01:40:44,900 --> 01:40:48,300
different sizes of Worlds or workloads.

1882
01:40:48,600 --> 01:40:49,800
So very, very important there.

1883
01:40:49,800 --> 01:40:52,800
And I hope that again, that's kind of a little bit more cemented.

1884
01:40:52,800 --> 01:40:57,100
Now tomorrow, we'll go back and just start focus on writing some

1885
01:40:57,100 --> 01:40:58,000
sorting code.

1886
01:40:58,100 --> 01:40:59,300
And we'll look at the

1887
01:41:00,100 --> 01:41:03,500
Lexa T of that sorting code first our bubble sort and then maybe we'll

1888
01:41:03,500 --> 01:41:04,400
write a merge sort.

1889
01:41:04,400 --> 01:41:07,200
Like the kind I demonstrate today and we'll talk a little more about

1890
01:41:07,200 --> 01:41:11,200
that to make sure that it's it's really solid in your head, that's

1891
01:41:11,200 --> 01:41:11,800
about it.

1892
01:41:12,900 --> 01:41:18,200
Let's sort of put and and here to that, let's close that down.

1893
01:41:18,200 --> 01:41:18,800
There we go.

1894
01:41:19,100 --> 01:41:21,300
Thank you everyone for joining me for another episode of episode of

1895
01:41:21,300 --> 01:41:21,900
handmade here.

1896
01:41:21,900 --> 01:41:23,600
It's in a pleasure, black boarding with you.

1897
01:41:23,600 --> 01:41:26,800
As always, and thank you to the folks on the stream who may be sort of

1898
01:41:26,800 --> 01:41:30,000
tried a little bit to answer our n p and p.

1899
01:41:30,100 --> 01:41:30,400
Ian's.

1900
01:41:30,700 --> 01:41:34,900
But I kind of am trying to assign them some homework for those of you

1901
01:41:34,900 --> 01:41:37,900
on the stream who are good at computer science, if you would be so

1902
01:41:37,900 --> 01:41:42,800
kind as to go and click on our little forums link here and maybe go to

1903
01:41:42,800 --> 01:41:45,000
the code discussion place.

1904
01:41:46,200 --> 01:41:50,700
If you could post some resources there, I know I would certainly love

1905
01:41:50,700 --> 01:41:53,100
to have a more solid walk through that.

1906
01:41:53,100 --> 01:41:57,500
I could a watch myself, but also, just point people to if the stuff

1907
01:41:57,500 --> 01:41:59,800
they saw in tonight's room, there is kind of like I would like to know

1908
01:42:00,000 --> 01:42:03,400
About some of the crazier aspects of what goes on out there and

1909
01:42:03,400 --> 01:42:04,600
computer science land.

1910
01:42:05,000 --> 01:42:09,100
Something that was a good introduction, not too difficult to get into

1911
01:42:09,100 --> 01:42:11,600
for people who aren't on that track necessarily.

1912
01:42:12,100 --> 01:42:13,200
That would be really awesome.

1913
01:42:13,200 --> 01:42:16,900
So if someone could do that, I would really appreciate it and I will

1914
01:42:17,500 --> 01:42:21,200
check it before 2:00 tomorrow stream and if there's anything good up

1915
01:42:21,200 --> 01:42:24,900
there, I will talk about it and point people towards it tomorrow.

1916
01:42:25,700 --> 01:42:27,400
Alright, that's about it.

1917
01:42:27,800 --> 01:42:29,800
I will see you guys back here tomorrow at five.

1918
01:42:30,000 --> 01:42:30,400
5 p.m.

1919
01:42:30,400 --> 01:42:32,400
Pacific Standard time for some sorting code.

1920
01:42:32,400 --> 01:42:35,100
If you want to always, make sure you can catch it, We-Vibe Scout.

1921
01:42:35,100 --> 01:42:38,200
The tweetbot is tweeting, it's little tweet out.

1922
01:42:38,400 --> 01:42:41,100
So, if you want to check to make sure you catch it live.

1923
01:42:41,100 --> 01:42:41,900
Just head there.

1924
01:42:42,000 --> 01:42:44,000
Otherwise, I will see you back here tomorrow at 5 p.m.

1925
01:42:44,000 --> 01:42:44,600
until then.

1926
01:42:44,600 --> 01:42:45,200
Take it easy.

1927
01:42:45,200 --> 01:42:49,200
Everyone have fun programming and have fun CS researching.

1928
01:42:49,200 --> 01:42:49,900
Take it easy.

