1
00:00:03,700 --> 00:00:05,700
Hello, everyone, and welcome to handmade hero.

2
00:00:05,700 --> 00:00:09,200
The show we could have complete game live on stream yesterday.

3
00:00:09,200 --> 00:00:13,500
We talked a lot about the fundamentals of depth buffering.

4
00:00:13,800 --> 00:00:17,600
And why we wanted to switch to a depth buffer on handmade hero.

5
00:00:17,600 --> 00:00:20,800
And today, we're going to go ahead and take a look at some of the code

6
00:00:20,800 --> 00:00:23,000
that's going to be involved in doing that.

7
00:00:23,400 --> 00:00:26,100
And again the code that's going to be involved in.

8
00:00:26,100 --> 00:00:30,800
This is really not that extensive and most of what you're going to see

9
00:00:30,800 --> 00:00:32,700
as we try to do this, switch over to someone

10
00:00:32,800 --> 00:00:38,600
3D oriented stuff in the pipeline is actually that a lot of the work

11
00:00:38,600 --> 00:00:41,800
is just in the 3D API Miss of it all.

12
00:00:42,500 --> 00:00:45,900
As soon as you move from the CPU to the GPU, you're in a really

13
00:00:45,900 --> 00:00:50,000
uncomfortable space where unlike before where we were able to step

14
00:00:50,000 --> 00:00:53,700
seamlessly through all of our codes, see what it was doing and like

15
00:00:53,700 --> 00:00:56,500
with our software renderer we could see how each individual pixel is

16
00:00:56,500 --> 00:00:56,800
filled.

17
00:00:56,800 --> 00:01:01,000
And so if a particular effect was not occurring correctly on screen,

18
00:01:01,000 --> 00:01:02,600
it was very easy for us to determine what was

19
00:01:02,700 --> 00:01:06,500
going on because we could step through our 100% of our code all the

20
00:01:06,500 --> 00:01:09,400
way down to like how that pixel was selected, who was trying to fill

21
00:01:09,400 --> 00:01:09,600
it.

22
00:01:09,600 --> 00:01:11,700
What they were trying to fill it with and why it wasn't getting filled

23
00:01:11,700 --> 00:01:14,800
with the correct color or correct texture or anything else, right?

24
00:01:15,600 --> 00:01:20,500
And hopefully you always kind of saw how easy it was for us to kind of

25
00:01:20,500 --> 00:01:22,700
work with that code and just understand what was going on.

26
00:01:22,700 --> 00:01:26,000
And we never really had a lot of problems.

27
00:01:26,000 --> 00:01:27,800
Sort of sitting around.

28
00:01:27,800 --> 00:01:31,600
Banging our heads going, I have no idea what could possibly be wrong

29
00:01:31,600 --> 00:01:32,600
with this for like a day.

30
00:01:32,800 --> 00:01:33,600
Or whatever, you know.

31
00:01:34,600 --> 00:01:39,400
And, and so, one of the big problems that you get into with.

32
00:01:39,400 --> 00:01:45,000
Once you start using code in a GPU sense, is that that a lot of that

33
00:01:45,000 --> 00:01:50,500
ability kind of goes away and you can get some of that ability back by

34
00:01:50,500 --> 00:01:56,100
using a aftermarket debugging system that allows you to sort of do bug

35
00:01:56,200 --> 00:02:00,900
GPU side of things to a greater extent and these tools can actually be

36
00:02:00,900 --> 00:02:02,300
very valuable and I

37
00:02:02,700 --> 00:02:05,100
And we are going to have to install one of those at some point if we

38
00:02:05,100 --> 00:02:08,699
go far enough down the rabbit hole of 3D stuff because otherwise you

39
00:02:08,699 --> 00:02:11,900
just have very little visibility in it and it's really a kind of this

40
00:02:11,900 --> 00:02:14,000
really nasty black box to fucking problem.

41
00:02:14,000 --> 00:02:15,200
That takes a lot longer.

42
00:02:16,300 --> 00:02:20,200
When things don't go the way, you think they should because you make

43
00:02:20,200 --> 00:02:23,500
some slight error somewhere in how you set something up and figuring

44
00:02:23,500 --> 00:02:26,800
out where that slight era was, because you can't step through anything

45
00:02:26,800 --> 00:02:28,200
becomes very difficult.

46
00:02:28,500 --> 00:02:29,800
And so there are tools for this.

47
00:02:29,800 --> 00:02:32,100
The insight to bugger is one of the Nvidia ships.

48
00:02:32,900 --> 00:02:36,400
There's I can never remember the name of it, there's a third party one

49
00:02:36,400 --> 00:02:40,400
that's freely available that works on both AMD and Nvidia chips.

50
00:02:41,300 --> 00:02:42,000
That's available.

51
00:02:42,400 --> 00:02:45,000
I would have already installed one for use on this machine.

52
00:02:45,000 --> 00:02:48,300
The only thing is I don't know two things yet.

53
00:02:48,900 --> 00:02:50,600
I'm going to have to find out both those things.

54
00:02:50,900 --> 00:02:55,100
One is whether or not this machines graphics card is simply too old to

55
00:02:55,100 --> 00:02:58,600
be supported by that tool.

56
00:02:59,000 --> 00:02:59,900
It's an AMD

57
00:03:00,100 --> 00:03:04,900
Obviously, nsight won't work, but the I can't remember the name of the

58
00:03:04,900 --> 00:03:08,800
other debugger, but I don't know why the name could totally escapes

59
00:03:08,800 --> 00:03:11,400
me, but it works on, am d as well.

60
00:03:13,700 --> 00:03:16,900
We can try that one, but I don't know if it will work on this card, so

61
00:03:16,900 --> 00:03:19,800
we may have to update the graphics card in this machine, put a

62
00:03:19,800 --> 00:03:22,300
different crafts center or switch to a different machine for handmade

63
00:03:22,300 --> 00:03:23,000
here or something.

64
00:03:23,500 --> 00:03:24,100
That has a grass.

65
00:03:24,100 --> 00:03:26,500
Carp, we can use for debugging because it's very important to have

66
00:03:26,500 --> 00:03:26,700
that.

67
00:03:26,700 --> 00:03:29,700
Otherwise you're just wasting time and

68
00:03:30,400 --> 00:03:31,500
And again to be clear.

69
00:03:31,500 --> 00:03:33,000
You it's not like you can't.

70
00:03:33,000 --> 00:03:35,500
I mean, you absolutely can still to bug them that way, and that's the

71
00:03:35,500 --> 00:03:37,700
way we used to do it all the time.

72
00:03:37,700 --> 00:03:41,800
It's just that much, like debugging without a debugger takes more time

73
00:03:42,300 --> 00:03:46,400
to bugging GPU code without a GPU, debugger takes more time and so you

74
00:03:46,400 --> 00:03:49,200
don't generally want to do it if you don't have to because you are

75
00:03:49,200 --> 00:03:50,600
literally just wasting your programming time.

76
00:03:50,600 --> 00:03:51,300
That could be better.

77
00:03:51,300 --> 00:03:54,400
Spent doing something more productive like adding a feature to your

78
00:03:54,400 --> 00:03:54,900
game.

79
00:03:55,600 --> 00:03:59,800
Similarly speaking, I do not know how running.

80
00:04:00,000 --> 00:04:00,900
Something like a graphical.

81
00:04:00,900 --> 00:04:03,000
Debugger will affect our ability to stream?

82
00:04:03,900 --> 00:04:11,900
I don't know if that will create problems for OBS and so, we'll have

83
00:04:11,900 --> 00:04:14,800
to do a test stream at some point to figure out these things.

84
00:04:14,800 --> 00:04:19,000
Just so I can see whether or not we can get to bugging working, and be

85
00:04:19,000 --> 00:04:20,500
able to step through GPU code.

86
00:04:26,100 --> 00:04:26,500
Now.

87
00:04:28,400 --> 00:04:29,300
Just to be clear.

88
00:04:30,900 --> 00:04:34,800
This is still even when you get this working, not nearly as good as

89
00:04:34,800 --> 00:04:38,700
when you have your actual own code running on the CPU in terms of

90
00:04:38,700 --> 00:04:39,400
visibility.

91
00:04:39,800 --> 00:04:42,700
And the reason for that is when I say step, you can step through GPU

92
00:04:42,700 --> 00:04:43,200
code.

93
00:04:43,900 --> 00:04:45,200
I don't really mean it.

94
00:04:45,500 --> 00:04:48,900
What I mean to say is that it gives you an approximation of being able

95
00:04:48,900 --> 00:04:52,700
to step through GPU code without actually being able to step through

96
00:04:53,100 --> 00:04:53,800
GPU code.

97
00:04:53,800 --> 00:04:58,100
So what it actually does is it does a bunch of shenanigans

98
00:04:58,200 --> 00:05:02,800
To allow you to inspect the state of things in the middle of shaders

99
00:05:02,900 --> 00:05:03,800
that you might write.

100
00:05:04,800 --> 00:05:08,500
And it does a bunch of shenanigans to try and get you information

101
00:05:08,500 --> 00:05:12,000
about the intermediate state of things before and after say,

102
00:05:12,000 --> 00:05:13,800
transforms and stuff like that.

103
00:05:14,500 --> 00:05:17,300
So it's more of a data dumping utility.

104
00:05:17,300 --> 00:05:20,600
It's more of a thing that allows you to see data through the pipeline,

105
00:05:20,600 --> 00:05:22,700
like the watch window in a debugger does.

106
00:05:23,700 --> 00:05:27,900
But the stepping is not really stepping through everything.

107
00:05:28,100 --> 00:05:32,500
The way that stepping on the CPU is stepping through everything.

108
00:05:33,300 --> 00:05:37,300
And the reason for that is that there's no way that is exposed, at

109
00:05:37,300 --> 00:05:41,700
least, you know, 2 and user on gpus to step through stuff.

110
00:05:41,700 --> 00:05:47,600
Like the dependency graph walking dispatch system that determines when

111
00:05:47,600 --> 00:05:51,800
batches of Primitives are dispatched, right?

112
00:05:52,300 --> 00:05:53,100
And so,

113
00:05:53,400 --> 00:05:57,600
You're never going to get, you don't get to see the whole pipeline

114
00:05:57,600 --> 00:05:59,800
occur in any way, shape, or form.

115
00:06:00,400 --> 00:06:05,000
You get to see snapshots at different points of the data flow.

116
00:06:06,400 --> 00:06:10,300
And when you're in a Shader you get a pretty good approximation of a

117
00:06:10,300 --> 00:06:15,300
debugger because that you can every line see the state of various

118
00:06:15,300 --> 00:06:16,800
variables and stuff like that.

119
00:06:17,500 --> 00:06:21,500
So Shader debugging is pretty good pipeline.

120
00:06:21,600 --> 00:06:25,000
Stepping you basically don't get it all but you can see like data

121
00:06:25,000 --> 00:06:27,800
snapshots and places and stuff like that.

122
00:06:28,100 --> 00:06:31,900
But you know, again even with that which is way better than what we

123
00:06:31,900 --> 00:06:32,900
have right now.

124
00:06:32,900 --> 00:06:34,200
For example, which is nothing.

125
00:06:36,300 --> 00:06:41,800
You're still kind of not nearly as close to the actual operation as

126
00:06:41,800 --> 00:06:43,900
you are with a regular debugger.

127
00:06:43,900 --> 00:06:46,500
So that's just the nature of the beast.

128
00:06:47,000 --> 00:06:51,100
That's that's just the way gpus are these days.

129
00:06:51,900 --> 00:06:56,300
They are not exposing their internal workings in that way.

130
00:06:56,300 --> 00:07:01,000
And they don't have the same debug interrupts exposed that modern

131
00:07:02,200 --> 00:07:03,200
system does.

132
00:07:03,400 --> 00:07:05,200
And again, I think that's probably

133
00:07:05,400 --> 00:07:11,400
We just because they don't really want you to know all of the details

134
00:07:11,400 --> 00:07:14,100
of how they do their processing and dispatching on that stuff.

135
00:07:14,100 --> 00:07:17,200
I'm guessing I don't really know like to be honest I don't know why it

136
00:07:17,200 --> 00:07:21,000
could just be also because they don't want to implement the Silicon

137
00:07:21,000 --> 00:07:24,100
necessary to have stuff like a breakpoint.

138
00:07:24,100 --> 00:07:27,200
You know like an M3 in the middle of that dispatcher, it may just be a

139
00:07:27,200 --> 00:07:30,400
hardwired thing that doesn't ever want to be step through.

140
00:07:30,400 --> 00:07:31,800
You know I have no idea.

141
00:07:33,500 --> 00:07:36,200
So that's the current status of it as far as I've ever seen it.

142
00:07:36,300 --> 00:07:42,700
And so, you know, keep in mind, that that's something that we have to

143
00:07:42,700 --> 00:07:45,000
address for today's episode.

144
00:07:45,000 --> 00:07:47,300
I don't think we're going to need that too much because we're just

145
00:07:47,300 --> 00:07:52,500
going to get you know barely get started on doing the changeover from

146
00:07:53,400 --> 00:07:57,400
the current way that the code is working to a more 3D Centric way for

147
00:07:57,400 --> 00:07:58,200
the back end.

148
00:07:58,900 --> 00:08:02,300
And so given that that's the case, I don't think we're going to have

149
00:08:02,300 --> 00:08:03,100
to do.

150
00:08:03,300 --> 00:08:09,400
Lot of debugging of any sort of subtle things that are so subtle, that

151
00:08:09,400 --> 00:08:10,200
we have that problem.

152
00:08:10,200 --> 00:08:13,600
Like, even if we end up with just a black screen, at the end of this

153
00:08:13,600 --> 00:08:17,200
episode, we probably won't have time to really de bug.

154
00:08:17,200 --> 00:08:20,100
Why we aren't seeing The Primitives, we think we're seeing or

155
00:08:20,100 --> 00:08:20,700
whatever, right?

156
00:08:20,700 --> 00:08:22,500
So I don't think we're gonna get far enough to really need the

157
00:08:22,500 --> 00:08:26,100
debugger today anyway so I'm not going to try and get that stuff set

158
00:08:26,100 --> 00:08:28,400
up our tested today instead.

159
00:08:28,400 --> 00:08:31,500
I'm just going to go ahead and do sort of some of the basic stuff that

160
00:08:31,500 --> 00:08:33,100
we have to do and

161
00:08:33,200 --> 00:08:37,299
And explain the things that I will need to explain along the way, in

162
00:08:37,299 --> 00:08:39,299
order to get us started on that.

163
00:08:40,100 --> 00:08:44,500
So let's go ahead and get things going here.

164
00:08:45,200 --> 00:08:48,200
I'm going to go ahead and load up by the way to today is day 359.

165
00:08:48,200 --> 00:08:51,400
So you want to start with the source code from day 358.

166
00:08:51,800 --> 00:08:54,800
Let's go ahead and open up the code.

167
00:08:57,900 --> 00:08:58,500
Here we are.

168
00:09:00,000 --> 00:09:00,800
We Run the game.

169
00:09:00,800 --> 00:09:04,400
We can see our 2D pipeline running, but we do like have Hardware

170
00:09:04,400 --> 00:09:05,100
rendering enabled.

171
00:09:05,100 --> 00:09:08,600
So remember this is a 2d pipeline back end.

172
00:09:10,400 --> 00:09:12,100
But it is running on the GPU.

173
00:09:12,400 --> 00:09:16,400
So, technically, we already have all the work done of setting up the

174
00:09:16,400 --> 00:09:17,900
GPU, right?

175
00:09:18,300 --> 00:09:23,500
Creating a frame buffer and rendering, you know, uploading textures to

176
00:09:23,500 --> 00:09:23,900
it.

177
00:09:24,200 --> 00:09:26,300
So we do have the basics ver.

178
00:09:26,500 --> 00:09:29,700
So, really, all that's not happening right now is we're not really

179
00:09:29,700 --> 00:09:34,800
doing any work regarding the three dienes of these objects as far as

180
00:09:34,800 --> 00:09:35,900
the GPU is concerned.

181
00:09:35,900 --> 00:09:40,000
By the time, any of this gets to the GPU, we have already.

182
00:09:40,200 --> 00:09:46,400
On all of the necessary work like we've done the projection of the

183
00:09:46,400 --> 00:09:49,800
coordinates and everything, and we're just handing the GPU things that

184
00:09:49,800 --> 00:09:51,000
are already in screen space.

185
00:09:55,400 --> 00:09:58,000
Okay, so given that.

186
00:09:59,200 --> 00:10:05,000
What we're going to try and do now is take out that screen, space

187
00:10:05,600 --> 00:10:06,400
transform.

188
00:10:06,600 --> 00:10:07,000
Okay.

189
00:10:08,100 --> 00:10:08,600
so,

190
00:10:10,000 --> 00:10:11,500
let's take a look at where that was happening.

191
00:10:13,400 --> 00:10:18,000
If you take a look at get render entity basis P, you can see that what

192
00:10:18,000 --> 00:10:23,200
we're doing here is we are performing our own transforms, right?

193
00:10:23,700 --> 00:10:27,900
And you can see this very clearly, so we have get render entity basis

194
00:10:27,900 --> 00:10:28,400
P.

195
00:10:28,600 --> 00:10:33,000
You can see in here, we've got this whole set of code and it's doing a

196
00:10:33,000 --> 00:10:37,900
bunch of stuff to do, our sort of fake, you know, our isometric, sort

197
00:10:37,900 --> 00:10:38,800
of transform.

198
00:10:39,800 --> 00:10:43,000
And then, we also do a regular projection transform for first.

199
00:10:43,200 --> 00:10:43,500
Going.

200
00:10:44,400 --> 00:10:46,400
And so you can kind of see that this right here.

201
00:10:46,400 --> 00:10:52,400
This code is the code that is doing our projection from World

202
00:10:52,400 --> 00:10:56,900
coordinates, which is this original P here and I shouldn't really say

203
00:10:56,900 --> 00:10:59,100
World coordinates because we have an object transform.

204
00:10:59,100 --> 00:11:03,100
So we actually, oftentimes are giving the original p in terms of some

205
00:11:03,100 --> 00:11:06,700
local coordinates and then the object transform transforms them into

206
00:11:06,700 --> 00:11:10,600
some sort of the world courts working with and then that's the camera

207
00:11:10,600 --> 00:11:11,400
transformed.

208
00:11:11,400 --> 00:11:13,000
That's telling us stuff like how to

209
00:11:13,100 --> 00:11:13,700
How to you know what?

210
00:11:13,700 --> 00:11:16,400
The focal length of the camera is done like that how to transform

211
00:11:16,400 --> 00:11:19,600
those World coordinates into screen coordinates, right?

212
00:11:20,200 --> 00:11:24,400
But what you can see here is that we ended up with a projected x y and

213
00:11:24,400 --> 00:11:28,100
the projected XY, then goes through some transforms for the screen and

214
00:11:28,100 --> 00:11:31,000
then we end up with just a thing that says okay.

215
00:11:31,500 --> 00:11:35,300
Now we've got exactly what we want for our screen coordinates and here

216
00:11:35,300 --> 00:11:40,400
we have out put them right and so all of our rendering code goes

217
00:11:40,400 --> 00:11:43,000
through this piece of code.

218
00:11:43,100 --> 00:11:43,600
Code.

219
00:11:44,800 --> 00:11:50,700
And what that means for us is that once we get to the actual render,

220
00:11:50,800 --> 00:11:54,600
like the actual Hardware rendering back end or in our case a software

221
00:11:54,600 --> 00:11:59,800
rendering back-end as well, they no longer have any 3D information.

222
00:12:00,000 --> 00:12:01,500
At all actually.

223
00:12:02,600 --> 00:12:06,000
And so what we were doing is, we were augmenting.

224
00:12:06,000 --> 00:12:11,300
What we were writing their, we were augmenting it with sorting

225
00:12:11,300 --> 00:12:14,100
information, which is all of this stuff that was happening in here,

226
00:12:14,100 --> 00:12:14,400
right?

227
00:12:14,400 --> 00:12:15,700
Like all these sort Kista.

228
00:12:17,200 --> 00:12:20,900
We would push sort of some of the 3D information that we needed to do

229
00:12:20,900 --> 00:12:27,300
sorting into this separate set of sort of like information chunks,

230
00:12:27,300 --> 00:12:27,800
right?

231
00:12:28,900 --> 00:12:32,500
And those would get used to do the Sorting because there is no 3D

232
00:12:32,500 --> 00:12:36,100
information left over after we do our transform, it just has

233
00:12:36,100 --> 00:12:40,000
rectangles that it knows, it needs to draw and that's a perfectly

234
00:12:40,000 --> 00:12:43,400
reasonable thing to do with the 2D thing because there's no reason for

235
00:12:43,400 --> 00:12:46,800
the render back-end to know anything other than how to sort things and

236
00:12:46,800 --> 00:12:47,600
how to draw things.

237
00:12:47,600 --> 00:12:51,000
So it doesn't really need, that's the information but now we need to

238
00:12:51,000 --> 00:12:53,700
make a switch and we need to start giving it that information.

239
00:12:53,700 --> 00:12:57,100
So if we pop over here to the opengl back end, which is what I'll work

240
00:12:57,100 --> 00:12:57,800
on first,

241
00:12:58,700 --> 00:13:00,800
Because we're going to have to write a bunch of routines in our

242
00:13:00,800 --> 00:13:04,100
software renderer if we want to support the full 3d transform stuff.

243
00:13:04,500 --> 00:13:07,000
So we'll kind of have to tackle that as a separate project at some

244
00:13:07,000 --> 00:13:07,600
point.

245
00:13:08,100 --> 00:13:10,600
So if we just look at, how do we're going to, we'd have to feed the

246
00:13:10,600 --> 00:13:11,100
hardware.

247
00:13:11,700 --> 00:13:15,100
One of the things that we can see about this is when we do

248
00:13:16,700 --> 00:13:20,700
I'm going to go ahead and show you the little biggest thing when we do

249
00:13:20,700 --> 00:13:24,600
our opengl set screen space, you can kind of see here how we're

250
00:13:25,000 --> 00:13:27,200
working this out, right?

251
00:13:28,100 --> 00:13:31,500
When we do opengl set screen space which I believe is the only thing

252
00:13:31,900 --> 00:13:33,700
that we actually call here.

253
00:13:33,700 --> 00:13:36,500
You can see when we do open gol.

254
00:13:36,500 --> 00:13:42,600
It's, that's not the one I want there is when you come in here, and

255
00:13:42,600 --> 00:13:44,900
we're about to do all our rendering, here's our opengl renderer

256
00:13:44,900 --> 00:13:45,800
commands call

257
00:13:46,200 --> 00:13:49,800
Before we do all our rendering, we set up a matrix and we talked about

258
00:13:49,800 --> 00:13:52,800
kind of what that does roughly but we need to talk about it.

259
00:13:52,800 --> 00:13:54,600
A little bit more in detail now because we're going to have to get

260
00:13:54,600 --> 00:13:55,800
much more familiar with these things.

261
00:13:55,800 --> 00:13:59,100
So we're going to go over that and very excruciating detail.

262
00:13:59,100 --> 00:14:03,000
In a moment, you can see we got our opengl set screen space here and

263
00:14:03,000 --> 00:14:05,400
the opengl set screen space called just past the width and height of

264
00:14:05,400 --> 00:14:06,000
the screen.

265
00:14:06,300 --> 00:14:10,000
Then what we do in that opengl set screen, space routine, is we

266
00:14:10,000 --> 00:14:14,000
generate this Matrix, which as you can see is kind of an identity

267
00:14:14,000 --> 00:14:15,500
Matrix to a certain degree.

268
00:14:16,800 --> 00:14:19,800
It's almost just a non transform, right?

269
00:14:19,800 --> 00:14:22,500
An identity Matrix would just be 1s down the diagonal and zeros

270
00:14:22,500 --> 00:14:26,400
everywhere else, but it has for specific values that have been changed

271
00:14:26,400 --> 00:14:27,400
from that identity.

272
00:14:28,200 --> 00:14:32,200
And those are the scaling coefficients on the X and Y, right?

273
00:14:33,000 --> 00:14:38,000
And to sort of negative ones here in the homogeneous coordinates,

274
00:14:38,300 --> 00:14:38,800
right?

275
00:14:44,500 --> 00:14:45,000
Okay.

276
00:14:47,100 --> 00:14:49,000
now, this is really the super

277
00:14:50,900 --> 00:14:52,700
This is the part that's super annoying.

278
00:14:53,600 --> 00:14:56,100
We're using the fixed function Pipeline and so we have to deal with

279
00:14:56,100 --> 00:14:57,300
this for a minute.

280
00:14:57,300 --> 00:14:59,500
When we switch to shaders, we won't have to worry about

281
00:15:00,000 --> 00:15:02,600
Apart anymore, actually, which is kind of nice.

282
00:15:03,100 --> 00:15:06,700
But for the moment, I'm just going to go ahead and start out with the

283
00:15:06,700 --> 00:15:08,300
very, very basic stuff here.

284
00:15:08,800 --> 00:15:12,100
Again, just to refresh your memory and also to get a little bit more

285
00:15:12,500 --> 00:15:14,000
detail, right?

286
00:15:14,000 --> 00:15:15,200
Stocks touch yells at.

287
00:15:15,200 --> 00:15:19,700
Yeah, there it is because it's going to be a lot more important to

288
00:15:19,700 --> 00:15:20,400
have this stuff.

289
00:15:20,400 --> 00:15:21,800
Understood very cleanly now,

290
00:15:23,300 --> 00:15:27,800
So let me just say, one more time, you can see that there's a really

291
00:15:27,800 --> 00:15:29,400
unfortunate thing that happens here.

292
00:15:29,400 --> 00:15:32,000
It has to do with column Major versus row major storage, and all this

293
00:15:32,000 --> 00:15:32,300
sort of stuff.

294
00:15:32,300 --> 00:15:34,600
I just want to explain it one more time.

295
00:15:34,600 --> 00:15:37,300
I think we went over it before when we did this but we need to go over

296
00:15:37,300 --> 00:15:40,500
it again and you really need to understand what's happening here

297
00:15:40,900 --> 00:15:44,500
because otherwise you will be a very unhappy camper when you start to

298
00:15:44,500 --> 00:15:51,200
do 3D programming and try to interface with the GPU because yeah stuff

299
00:15:51,200 --> 00:15:51,900
goes stuff.

300
00:15:51,900 --> 00:15:53,000
Stuff goes poorly if

301
00:15:53,200 --> 00:15:56,200
Get this part wrong and you'll always be scratching your head as to

302
00:15:56,200 --> 00:15:56,600
why.

303
00:15:57,600 --> 00:15:57,900
All right.

304
00:15:57,900 --> 00:15:59,100
So let's go ahead.

305
00:16:00,500 --> 00:16:01,700
and talk about,

306
00:16:05,200 --> 00:16:06,500
The projection Matrix here.

307
00:16:13,000 --> 00:16:13,400
Okay?

308
00:16:14,500 --> 00:16:17,500
So what I want you to do is kind of look at how this is defined here.

309
00:16:17,500 --> 00:16:19,200
You can see, I've got our three to project.

310
00:16:19,200 --> 00:16:24,600
I've got, you know, a 0 0, 0 0, B 0 0 0 0, 1 0 negative, 1 negative 1

311
00:16:24,600 --> 00:16:29,800
0 1, right now in mathematical notation, it's fairly standard.

312
00:16:29,800 --> 00:16:31,800
How matrices our are written.

313
00:16:32,100 --> 00:16:37,400
Okay, if you open up a generic math, textbook like an introduction to

314
00:16:37,400 --> 00:16:38,700
linear algebra, textbook.

315
00:16:38,700 --> 00:16:39,700
Whatever it is.

316
00:16:40,300 --> 00:16:42,300
You would then think

317
00:16:42,400 --> 00:16:44,800
That the Matrix that you see there, right?

318
00:16:44,800 --> 00:16:45,900
Is this Matrix?

319
00:16:55,900 --> 00:17:00,000
Right, because there it is in the code, it looks pretty obvious,

320
00:17:00,000 --> 00:17:00,600
right?

321
00:17:00,600 --> 00:17:05,800
And here, it is in in math, notation, right?

322
00:17:06,000 --> 00:17:09,300
And now it's like real easy for me to say, oh, here's the code, and

323
00:17:09,300 --> 00:17:10,700
here's the math, notation.

324
00:17:11,000 --> 00:17:14,000
And so, when I'm working on the code, I know, whatever I worked out in

325
00:17:14,000 --> 00:17:16,099
my math notebook, you know?

326
00:17:16,099 --> 00:17:19,800
I just type it in and I'm good to go or I loaded up Mathematica or

327
00:17:19,800 --> 00:17:22,900
Matlab or some computer-aided algebra system.

328
00:17:22,900 --> 00:17:25,099
And I saw the Matrix, it looked like this and

329
00:17:25,300 --> 00:17:30,000
Now I've got it right, but unfortunately at least it with opengl es

330
00:17:30,000 --> 00:17:33,000
default the way that it does Geo load Matrix.

331
00:17:33,600 --> 00:17:36,700
If you just call GL load Matrix, F to load a matrix.

332
00:17:37,000 --> 00:17:39,000
This is actually not true.

333
00:17:39,200 --> 00:17:40,200
That is not the Matrix.

334
00:17:40,200 --> 00:17:43,000
You get the Matrix that you will actually get.

335
00:17:43,000 --> 00:17:44,100
Is this Matrix?

336
00:17:52,400 --> 00:17:57,200
Okay, and what you can see here is the matrices are identical, except

337
00:17:57,200 --> 00:17:59,100
for the fact that they've been transposed.

338
00:17:59,100 --> 00:17:59,800
Now, you

339
00:18:00,000 --> 00:18:04,100
Number that the transpose operator, right?

340
00:18:04,100 --> 00:18:08,000
On a matrix written typically with a superscript t above the Matrix.

341
00:18:08,800 --> 00:18:13,200
All that does is it flips, The Matrix about its diagonal, right?

342
00:18:13,200 --> 00:18:16,900
So we had a b11 down the diagonal, we have a B-1 one, down the

343
00:18:16,900 --> 00:18:20,800
diagonal again, but all of these other things sort of flip around

344
00:18:20,800 --> 00:18:21,100
there.

345
00:18:21,200 --> 00:18:24,000
So this guy goes over to here, right?

346
00:18:24,000 --> 00:18:28,000
This guy goes over to hear this guy to hear that kind of their right?

347
00:18:28,000 --> 00:18:29,700
Everyone kind of goes to their flipped.

348
00:18:30,000 --> 00:18:30,500
Occasion.

349
00:18:30,700 --> 00:18:33,900
So another way to think of that would be, you know if I'm thinking

350
00:18:33,900 --> 00:18:35,800
about the index this way, right?

351
00:18:35,800 --> 00:18:38,900
Like let's say that I've got a matrix and I want to talk about the

352
00:18:38,900 --> 00:18:42,000
element of it, you know, if this is a matrix, a and I want to talk

353
00:18:42,000 --> 00:18:44,400
about the element IJ.

354
00:18:44,600 --> 00:18:47,800
Maybe I is my is going across.

355
00:18:47,800 --> 00:18:50,500
So I is like which one of these I am, right?

356
00:18:50,500 --> 00:18:52,000
And Jay is going down.

357
00:18:52,200 --> 00:18:56,400
So maybe I say A you know, 21 right.

358
00:18:56,500 --> 00:18:58,500
Well a 21 is 21.

359
00:18:58,900 --> 00:18:59,800
It's right here.

360
00:19:00,500 --> 00:19:03,900
Well basically what we're saying here is we would just flip it around

361
00:19:03,900 --> 00:19:06,700
to one is now at 12, right?

362
00:19:06,800 --> 00:19:12,100
And so you could say that a transpose means that a oops, I went behind

363
00:19:12,100 --> 00:19:12,800
my head there.

364
00:19:13,800 --> 00:19:18,300
Hey, i j gets swapped right with AJ.

365
00:19:18,300 --> 00:19:23,200
I right, you just you just switch which you know which indices you

366
00:19:23,200 --> 00:19:27,600
have, the, the column and row of your index gets switched.

367
00:19:27,600 --> 00:19:29,800
And that's where your new location is, right.

368
00:19:31,400 --> 00:19:32,800
So why does that happen?

369
00:19:32,800 --> 00:19:38,000
Well, it's just historical, there's really no reason for it.

370
00:19:38,100 --> 00:19:41,000
It's just a historical thing that that occurred back when SGI was

371
00:19:41,000 --> 00:19:42,700
first defining these sorts of things.

372
00:19:43,600 --> 00:19:48,200
Column-major is what it's called versus row major.

373
00:19:48,400 --> 00:19:50,600
What that means is in memory order, right?

374
00:19:50,600 --> 00:19:52,500
Because remember, when we Define an array,

375
00:19:54,300 --> 00:20:00,400
In C or C++, when we list the elements they get put in memory in that

376
00:20:00,400 --> 00:20:00,700
order.

377
00:20:00,700 --> 00:20:06,400
So, a comes at the first position in memory zero in the next 1000 B 0

378
00:20:06,400 --> 00:20:10,300
0, 0 0, 1 0 negative 1 negative 1 0 1, right.

379
00:20:10,300 --> 00:20:14,700
So in memory order right there basically, we're just doing this, you

380
00:20:14,700 --> 00:20:19,500
know, I put in that indentation to evoke the structure of the Matrix

381
00:20:19,700 --> 00:20:21,400
but really it's just a piece of memory.

382
00:20:21,400 --> 00:20:22,900
That's got that in it, right?

383
00:20:22,900 --> 00:20:23,300
I mean that's

384
00:20:23,400 --> 00:20:24,500
What we're talking about here.

385
00:20:25,300 --> 00:20:30,000
And so given that that's the case since it's just a line of digits,

386
00:20:30,200 --> 00:20:33,900
it's obviously up to the programmer when you're when you're creating

387
00:20:34,200 --> 00:20:38,000
things that operate on matrices, you know what the math has to do.

388
00:20:38,100 --> 00:20:41,600
But you don't know, just when you have just a set of 60 numbers,

389
00:20:41,600 --> 00:20:45,300
there's nothing that magically says which one has to correspond to

390
00:20:45,300 --> 00:20:46,500
which position in The Matrix?

391
00:20:46,500 --> 00:20:49,500
I mean we could make it be any rule we wanted really, we don't even

392
00:20:49,500 --> 00:20:51,900
have to make it be anything logical, we could have it.

393
00:20:51,900 --> 00:20:53,200
So that the 13th

394
00:20:53,300 --> 00:20:56,500
It is actually in the first position of in the 11 position of the

395
00:20:56,500 --> 00:20:57,200
Matrix, right?

396
00:20:57,200 --> 00:20:59,800
I mean we could because it's just whatever the math.

397
00:21:00,000 --> 00:21:03,400
Teens wherever they pull from to do their multiplication, that

398
00:21:03,400 --> 00:21:07,300
determines the structure of the Matrix and so what the programmers

399
00:21:07,300 --> 00:21:10,300
decided when they first did this was that it would actually go in

400
00:21:10,300 --> 00:21:11,300
column order.

401
00:21:12,400 --> 00:21:18,300
So a000, those first four positions in memory were considered to be

402
00:21:18,300 --> 00:21:23,100
defining Down The Columns of the Matrix, so that when we get to the

403
00:21:23,100 --> 00:21:27,400
next four elements, we're going down the next column and so much more

404
00:21:27,400 --> 00:21:28,300
sensible thing.

405
00:21:28,300 --> 00:21:29,800
It would have been nice wood.

406
00:21:30,000 --> 00:21:34,000
I've been to go across because then A and C or any other language

407
00:21:34,000 --> 00:21:39,400
where the arrays are written out in in this order, it's much easier to

408
00:21:39,400 --> 00:21:40,500
read the math.

409
00:21:40,500 --> 00:21:45,000
The standard math, textbook versus the code, but just the

410
00:21:45,000 --> 00:21:47,200
circumstances being what they were at The Times.

411
00:21:47,200 --> 00:21:48,500
They did not make that decision.

412
00:21:52,400 --> 00:21:55,500
I do not know why I wasn't there.

413
00:21:55,500 --> 00:22:00,300
I've heard various rumors but I have no idea how accurate they are.

414
00:22:00,300 --> 00:22:04,900
Anyway, it's probably it's, it's similar to the fact that they're

415
00:22:04,900 --> 00:22:06,900
still left handed coordinate systems.

416
00:22:06,900 --> 00:22:09,800
In a lot of the early stuff like direct3d is a left handed coordinate

417
00:22:09,800 --> 00:22:10,100
system.

418
00:22:10,100 --> 00:22:14,000
For example, whereas like there's I don't think there's any common

419
00:22:14,000 --> 00:22:17,100
math textbooks that ever use left-handed coordinate systems, they

420
00:22:17,100 --> 00:22:18,700
always use right-handed coordinate systems.

421
00:22:20,400 --> 00:22:25,500
So you know, I don't know why there was such a Divergence in the early

422
00:22:25,500 --> 00:22:30,400
computer Graphics Community, but what I do know is that subsequently

423
00:22:30,400 --> 00:22:33,100
most of the computer graphics people were much more closely wedded to

424
00:22:33,100 --> 00:22:37,200
the traditional math and so they kind of undid all that and nowadays,

425
00:22:38,100 --> 00:22:41,800
usually, you don't have any of that sort of thing happening, right?

426
00:22:41,900 --> 00:22:44,600
They typically try to make things as close to math notation as they

427
00:22:44,600 --> 00:22:47,800
can to avoid any kind of ambiguity anyway.

428
00:22:49,600 --> 00:22:54,000
So basically, what happens here is this is the actual Matrix that we

429
00:22:54,000 --> 00:22:56,800
are currently defining for our projection Matrix, and it may look a

430
00:22:56,800 --> 00:22:59,700
little bit weird to you because what it actually equals, if we go up

431
00:22:59,700 --> 00:23:04,100
here and read what A and B are, are some very unusual values right at

432
00:23:04,100 --> 00:23:05,400
they don't make a lot of sense.

433
00:23:05,400 --> 00:23:10,500
If you look at them, you know, if you just kind of like take a look at

434
00:23:10,500 --> 00:23:12,700
them quickly and go, what is this supposed to be doing?

435
00:23:13,400 --> 00:23:16,300
It's a rather confusing, right?

436
00:23:16,300 --> 00:23:17,000
You might say

437
00:23:19,300 --> 00:23:22,600
And this is, this is really a, I think, the thing that confuses people

438
00:23:22,600 --> 00:23:27,300
a lot about projection, matrices as well, but you know what, kind of

439
00:23:27,300 --> 00:23:28,600
get to that in general.

440
00:23:28,600 --> 00:23:34,100
So this is the projection Matrix that were currently using in the just

441
00:23:34,100 --> 00:23:37,800
to sort of start to get more comfortable with these with these kind of

442
00:23:37,800 --> 00:23:39,300
matrices and what they're trying to do.

443
00:23:39,700 --> 00:23:42,700
The first thing, I just want to point out is like, okay, looking at

444
00:23:42,700 --> 00:23:44,000
this projection Matrix?

445
00:23:44,400 --> 00:23:45,700
Why were we doing this?

446
00:23:45,700 --> 00:23:46,700
What's the point of this?

447
00:23:46,700 --> 00:23:48,300
You know, can we figure out what we were doing here?

448
00:23:48,400 --> 00:23:48,600
Here.

449
00:23:49,500 --> 00:23:51,300
And what I would encourage you to do.

450
00:23:51,300 --> 00:23:55,600
Obviously as always is just to take a look at a point that's coming in

451
00:23:55,600 --> 00:23:59,300
here, that's going to be transformed by this Matrix and take a look at

452
00:23:59,300 --> 00:23:59,800
what

453
00:24:00,100 --> 00:24:01,600
You get out of it, right?

454
00:24:01,600 --> 00:24:02,800
Because that's always a good way.

455
00:24:02,800 --> 00:24:05,600
You know, I this is a simple enough Matrix and I work with matrices

456
00:24:05,600 --> 00:24:08,100
often enough that I just kind of can read it straight off and know

457
00:24:08,300 --> 00:24:11,500
exactly what it's doing, but up until you build that sort of

458
00:24:11,500 --> 00:24:12,200
intuition.

459
00:24:12,900 --> 00:24:15,900
And especially even, if you have intuition, when you start to look at

460
00:24:15,900 --> 00:24:19,300
matrices that are much more complicated than this one, it helps a lot

461
00:24:19,300 --> 00:24:20,900
to just do the multiplication out.

462
00:24:20,900 --> 00:24:23,900
Now, you'll notice what I chose to X was an incoming point in three,

463
00:24:23,900 --> 00:24:25,400
dimensions X Y & Z.

464
00:24:25,700 --> 00:24:29,900
And I wrote a one in here right now, why did did I write a 1 in here?

465
00:24:30,000 --> 00:24:30,200
Here.

466
00:24:31,800 --> 00:24:34,300
Well, the reason that I wrote a one in here is because this is a four

467
00:24:34,300 --> 00:24:36,100
by four Matrix, right?

468
00:24:36,100 --> 00:24:39,700
And a 4 by 4 Matrix, and computer Graphics parlance is often called a

469
00:24:39,700 --> 00:24:40,900
homogeneous Matrix.

470
00:24:42,700 --> 00:24:46,100
And do not ask me why they pick that that term.

471
00:24:46,100 --> 00:24:49,400
That's another one of those historical things where it's like I feel

472
00:24:49,400 --> 00:24:52,600
like it doesn't convey a lot of the meaning I believe the reason that

473
00:24:52,600 --> 00:24:53,700
they call it a homogeneous Matrix.

474
00:24:53,700 --> 00:24:55,800
That's something to do at the fact that they want to consider

475
00:24:56,000 --> 00:24:58,600
translation to be treated the same as everything else.

476
00:24:58,600 --> 00:24:59,900
And that makes it a monetary thing.

477
00:25:01,000 --> 00:25:04,500
It's a very strange thing because it's not really yeah, I don't know.

478
00:25:04,700 --> 00:25:07,100
So I have no idea if that's why they call it - it might be that

479
00:25:07,100 --> 00:25:09,600
there's a really good math reason to call it homogeneous and I

480
00:25:09,600 --> 00:25:11,700
suspected of student him, 73 is still with us.

481
00:25:12,000 --> 00:25:15,600
Don't think he is, he could step in and perhaps give some people a

482
00:25:15,600 --> 00:25:18,600
little bit more background on may be why the word homogeneous if it

483
00:25:18,600 --> 00:25:22,700
predates the computer, Graphics usage and mean something better in

484
00:25:22,700 --> 00:25:25,300
mathematics why that was there.

485
00:25:25,300 --> 00:25:28,300
So that's kind of left an exercise to the reader because I don't know

486
00:25:28,300 --> 00:25:33,000
and I don't pretend to but I can tell you exactly why they were used

487
00:25:33,300 --> 00:25:37,400
in graphics and why they still get used to a limited extent today.

488
00:25:38,400 --> 00:25:47,700
So what happens here is if you imagine the types of equations that you

489
00:25:47,800 --> 00:25:51,500
typically look at, and I think we may have covered this before, but

490
00:25:51,500 --> 00:25:53,200
again I'm just going to cover it again because it's all very

491
00:25:53,200 --> 00:25:53,500
important.

492
00:25:53,500 --> 00:25:55,700
And you now need to be really, really comfortable with it.

493
00:25:57,100 --> 00:25:59,800
What does a matrix multiply do, right?

494
00:26:00,400 --> 00:26:04,200
Well, as you can kind of see from what we're looking at here.

495
00:26:04,600 --> 00:26:07,800
If you remember, how your matrix-matrix multiply works, you go column

496
00:26:07,800 --> 00:26:08,100
by

497
00:26:08,300 --> 00:26:11,700
Oh and you multiply the column of the input by the row here, right?

498
00:26:11,800 --> 00:26:13,400
And in this case we only have a vector.

499
00:26:13,400 --> 00:26:15,600
So we only have one column to multiply with.

500
00:26:15,600 --> 00:26:18,500
So we're just going to multiply this one column by each row in turn

501
00:26:18,700 --> 00:26:22,700
and that will give us our result, which will just be a vector if we

502
00:26:22,700 --> 00:26:26,600
had a matrix, we'd have more columns and we do every row by every

503
00:26:26,800 --> 00:26:31,100
column and produce several elements per row and produce another

504
00:26:31,100 --> 00:26:31,600
Matrix.

505
00:26:31,800 --> 00:26:32,300
Right?

506
00:26:32,400 --> 00:26:34,100
We know ideas, we've done it many times before.

507
00:26:35,000 --> 00:26:36,700
So let's go ahead and multiply here.

508
00:26:37,100 --> 00:26:40,000
We've got our two over W Times X, right?

509
00:26:40,000 --> 00:26:41,500
We've got zeros in the other two.

510
00:26:41,500 --> 00:26:43,700
So we're not going to have any more terms here.

511
00:26:44,100 --> 00:26:47,000
And then in the final one, we've gotten one times negative one.

512
00:26:47,300 --> 00:26:49,300
So, we just got a negative one there, right?

513
00:26:50,100 --> 00:26:54,000
Furthermore, we do the same thing again this time, there's only a

514
00:26:54,000 --> 00:26:58,100
coefficient for the Y, so it's going to be 2 over h y.

515
00:26:58,100 --> 00:26:59,800
And again, the one just multiplies.

516
00:27:01,300 --> 00:27:05,300
We then have nothing else to multiply for the Z, right?

517
00:27:05,400 --> 00:27:05,600
Oops.

518
00:27:05,600 --> 00:27:05,900
Sorry

519
00:27:07,300 --> 00:27:10,000
Nothing else, X, the Z other than unit coefficient.

520
00:27:10,000 --> 00:27:11,700
So we just get the Z copied directly.

521
00:27:11,700 --> 00:27:12,900
It doesn't change at all.

522
00:27:13,300 --> 00:27:15,900
And then our final Road just multiplies, the one.

523
00:27:16,500 --> 00:27:19,100
And so here is our resulting Vector its to over w.

524
00:27:19,100 --> 00:27:23,000
X minus 12 over h y, minus 1/2 and 1, right?

525
00:27:24,200 --> 00:27:28,800
And so now just to get back to what I was trying to explain their, why

526
00:27:28,800 --> 00:27:30,600
do we have the 4x4 Des of it?

527
00:27:30,600 --> 00:27:33,700
Well, you can kind of see why we need that for by foreigners.

528
00:27:33,700 --> 00:27:36,100
Even just looking at this very very simple Matrix here.

529
00:27:36,600 --> 00:27:36,900
The

530
00:27:37,000 --> 00:27:40,600
It is because if the author of The Matrix who is trying to create a

531
00:27:40,600 --> 00:27:43,300
transform for the incoming data.

532
00:27:44,200 --> 00:27:48,300
If you have a 3D coordinate system, you know, that your inputs will

533
00:27:48,300 --> 00:27:50,200
consist of xy's and Z's.

534
00:27:50,200 --> 00:27:52,000
That's a three Vector, right?

535
00:27:52,600 --> 00:27:53,500
And that means,

536
00:27:58,300 --> 00:28:05,900
That if you were to only use a 3 by 3 Matrix, this part up here, then

537
00:28:05,900 --> 00:28:10,100
every single thing you could do with the Matrix, right?

538
00:28:10,100 --> 00:28:14,700
The only mathematical things you could produce with the Matrix in the

539
00:28:14,700 --> 00:28:21,100
results, here would be equations that were coefficients of the input X

540
00:28:21,100 --> 00:28:24,200
Y & Z because that's exactly what happens, right?

541
00:28:24,300 --> 00:28:26,600
If I have a matrix that looks like this,

542
00:28:29,800 --> 00:28:31,600
And I'm inputting an XYZ.

543
00:28:31,900 --> 00:28:34,400
Well then the only things I'm ever going to be able to produce on the

544
00:28:34,400 --> 00:28:36,800
other side are things that look like this.

545
00:28:38,000 --> 00:28:38,700
Right.

546
00:28:39,900 --> 00:28:44,100
There's no way for me to get another term in here.

547
00:28:44,200 --> 00:28:49,700
I can't just add some additional value that's going to be on

548
00:28:49,700 --> 00:28:52,100
multiplied by the input, right?

549
00:28:53,200 --> 00:28:57,200
So effectively what it means is that operations like the one we are,

550
00:28:57,200 --> 00:29:01,600
in fact, doing right now, where we just want to offset the value by a

551
00:29:01,600 --> 00:29:06,100
constant that we Supply become impossible.

552
00:29:07,400 --> 00:29:09,900
They will not work, right?

553
00:29:09,900 --> 00:29:13,200
Because anything that you might put in The Matrix will always be

554
00:29:13,200 --> 00:29:15,500
multiplied by something in the input.

555
00:29:15,500 --> 00:29:20,000
And so if your goal was to produce an effect that was unmultiplied and

556
00:29:20,000 --> 00:29:22,200
is irrelevant, what the input is?

557
00:29:22,200 --> 00:29:24,200
It will still produce the same effect.

558
00:29:24,700 --> 00:29:26,500
You cannot do it, right?

559
00:29:27,400 --> 00:29:33,300
And so that's why you extend one beyond the number of coordinates that

560
00:29:33,300 --> 00:29:36,600
you have and you augment the vectors.

561
00:29:36,900 --> 00:29:40,000
By a third, I'm sorry, fourth value?

562
00:29:41,500 --> 00:29:44,800
Or I guess, an N, plus 1 value, whatever your end Dimension is, right

563
00:29:44,800 --> 00:29:48,300
for 2D you'd have a 3D Matrix for 3D of a 40 Matrix.

564
00:29:48,300 --> 00:29:50,700
If you had 70, you detonate D Matrix, right?

565
00:29:51,100 --> 00:29:56,900
You augment it with a 1 so that you just say, hey, don't modify at all

566
00:29:56,900 --> 00:29:58,100
that final value.

567
00:29:58,100 --> 00:29:59,800
Just keep it as it is and allow

568
00:30:00,000 --> 00:30:03,400
But to be an offset for what I'm doing, right?

569
00:30:04,700 --> 00:30:08,100
And so, the reason that the big motivation for this originally was for

570
00:30:08,100 --> 00:30:10,300
doing stuff like translation, right?

571
00:30:10,800 --> 00:30:13,400
Because you can do things like rotation which involve just

572
00:30:13,400 --> 00:30:18,300
coefficients of the inputs, those can all happen in the upper 3x3 but

573
00:30:18,300 --> 00:30:21,700
as soon as you want your Matrix to be able to represent a movement,

574
00:30:21,800 --> 00:30:25,900
well, a movement isn't dependent on the input, a movement that goes

575
00:30:25,900 --> 00:30:26,700
five units to.

576
00:30:26,700 --> 00:30:32,400
The left is about subtracting 5 from your thing whether or not that

577
00:30:32,400 --> 00:30:34,100
value is 10 or 50 or a

578
00:30:34,200 --> 00:30:38,400
Thousand or a billion or - 325, right?

579
00:30:38,800 --> 00:30:45,400
And so being able to support a offset just a raw offset value was

580
00:30:45,400 --> 00:30:46,100
crucial.

581
00:30:46,100 --> 00:30:49,500
And that's why they wanted this to be augmented.

582
00:30:50,200 --> 00:30:55,400
Now, the other thing to remember here is that this value is not always

583
00:30:55,400 --> 00:30:56,200
meaningless.

584
00:30:56,200 --> 00:31:05,200
The input can actually use this value to confer some meaning, on the

585
00:31:05,200 --> 00:31:06,200
input, right?

586
00:31:06,200 --> 00:31:09,700
And what I mean by that, is if you think about what's going on here,

587
00:31:09,700 --> 00:31:14,800
this X Y & Z value is saying how the upper 3x3 is going to work,

588
00:31:14,800 --> 00:31:15,000
right?

589
00:31:15,000 --> 00:31:19,900
The upper 3x3 of the Matrix is going to modify this and this portion

590
00:31:19,900 --> 00:31:20,100
of

591
00:31:20,200 --> 00:31:21,500
Matrix, right?

592
00:31:21,600 --> 00:31:23,900
Is going to be controlled by this, right?

593
00:31:23,900 --> 00:31:26,100
This negative 1 and negative 1 is going to be still controlled by

594
00:31:26,100 --> 00:31:26,400
this.

595
00:31:26,700 --> 00:31:29,700
We're setting it to one so it will just happen immediately but if we

596
00:31:29,700 --> 00:31:33,400
wanted to we could also set it to zero and that would knock out these

597
00:31:33,400 --> 00:31:36,900
terms and cause them to not have any effect, right?

598
00:31:37,800 --> 00:31:42,400
And so that's why you will sometimes see if you've ever seen something

599
00:31:42,400 --> 00:31:44,800
like this happen and maybe didn't know exactly why.

600
00:31:47,200 --> 00:31:52,600
You can sort of see why people will sometimes say, well x, y z one,

601
00:31:53,700 --> 00:31:54,800
that's a point.

602
00:31:56,300 --> 00:31:57,100
Where is x?

603
00:31:57,100 --> 00:31:59,600
Y z 0, right.

604
00:31:59,600 --> 00:31:59,900
Oops.

605
00:32:03,000 --> 00:32:03,400
Right.

606
00:32:03,400 --> 00:32:04,300
That's a vector.

607
00:32:06,200 --> 00:32:07,900
Sometimes people will say something like that.

608
00:32:08,700 --> 00:32:11,800
I believe this is sort of a more rigorous way of defining these

609
00:32:11,800 --> 00:32:12,200
things.

610
00:32:12,200 --> 00:32:13,400
And what do we mean by this?

611
00:32:13,800 --> 00:32:17,400
Well, the reason we would say x y z 1 is a point in x y z.

612
00:32:17,400 --> 00:32:25,500
0 is a vector, is because x y z, 1 allows the input variable to pick

613
00:32:25,500 --> 00:32:28,300
up those translation changes, right?

614
00:32:28,300 --> 00:32:32,800
So, it's a point in space, that will be moved by The Matrix, right?

615
00:32:32,800 --> 00:32:35,600
When the Matrix says, to move the point moves,

616
00:32:36,400 --> 00:32:40,600
A vector on the other hand is technically, just a direction in space.

617
00:32:40,900 --> 00:32:44,400
We tend to use Vector to mean this thing, right?

618
00:32:45,400 --> 00:32:48,900
But in Geometry, you might sometimes mathematically.

619
00:32:48,900 --> 00:32:52,000
They use these things to talk about them being different in that way,

620
00:32:52,000 --> 00:32:52,500
right?

621
00:32:53,100 --> 00:32:57,800
And so a direction in space doesn't move, right?

622
00:32:57,800 --> 00:32:59,800
A Direction, Just points in a direction and

623
00:33:00,000 --> 00:33:01,400
The Matrix is trying to move it.

624
00:33:01,400 --> 00:33:02,400
It shouldn't move at all.

625
00:33:02,400 --> 00:33:04,000
If you're still just point in that direction.

626
00:33:04,300 --> 00:33:08,300
So this is the type of object that, you know, this is the type of life

627
00:33:08,300 --> 00:33:11,900
that moves things is this, the type of object that only rotates with

628
00:33:11,900 --> 00:33:13,000
it, right?

629
00:33:13,200 --> 00:33:17,200
It only spins around and scales and shears, and does those other sorts

630
00:33:17,200 --> 00:33:19,000
of operations that are encoded in here?

631
00:33:19,400 --> 00:33:23,100
But it will never actually displace itself, right?

632
00:33:23,100 --> 00:33:27,300
It will never move away from the origin any further than it already is

633
00:33:28,100 --> 00:33:29,500
based on the translation.

634
00:33:31,400 --> 00:33:34,300
It can move further away from the origin based on scaling, obviously.

635
00:33:35,200 --> 00:33:40,200
But that's, you know, again, not a displacement, right?

636
00:33:41,400 --> 00:33:44,300
So this this value actually isn't meaningless.

637
00:33:44,300 --> 00:33:47,900
Either, it just isn't a coordinate of the kind that we're used to

638
00:33:47,900 --> 00:33:52,500
talking about when we talk about things in the actual world and

639
00:33:52,500 --> 00:33:55,700
picking points in three dimensional space because we don't talk about

640
00:33:55,700 --> 00:33:57,600
there being this fourth coordinate ever.

641
00:33:58,100 --> 00:34:01,000
But it does have a practical usage that can be used to.

642
00:34:01,200 --> 00:34:06,500
Certain effect when you are providing values to multiply by a matrix,

643
00:34:06,700 --> 00:34:07,100
right?

644
00:34:10,100 --> 00:34:10,500
Okay.

645
00:34:12,600 --> 00:34:15,699
So let's take a look at our projection Matrix now with all of that

646
00:34:16,500 --> 00:34:19,100
understanding here is our projection Matrix.

647
00:34:19,600 --> 00:34:23,500
And for starters, you know, I'm going to put projection in quotes here

648
00:34:24,000 --> 00:34:27,400
because even though it's being loaded into opengl as projection Matrix

649
00:34:27,400 --> 00:34:29,500
lat, is it doing any projection?

650
00:34:29,800 --> 00:34:30,600
Not really

651
00:34:32,000 --> 00:34:34,199
And you'll see what I mean by that in the feud in the future.

652
00:34:34,400 --> 00:34:39,500
But just so you're, you know, as you already kind of know, we do the

653
00:34:39,500 --> 00:34:41,900
projection ourselves in that, get empty basis.

654
00:34:41,900 --> 00:34:45,699
P things, the actual projection, with the perspective, foreshortening

655
00:34:45,699 --> 00:34:46,500
and all that stuff.

656
00:34:46,699 --> 00:34:48,900
And so really, the projections already happened.

657
00:34:48,900 --> 00:34:52,000
This Matrix essentially is saying, don't do any projection, it's

658
00:34:52,000 --> 00:34:52,900
really what it's saying.

659
00:34:53,500 --> 00:34:57,200
It just does some scaling and manipulation of the coordinates, right?

660
00:34:58,300 --> 00:35:00,900
Because we don't want opengl to do another projection.

661
00:35:00,900 --> 00:35:01,500
We want open G.

662
00:35:01,700 --> 00:35:02,700
Just use the one we already.

663
00:35:02,700 --> 00:35:03,400
Computed.

664
00:35:03,900 --> 00:35:05,800
So what is this thing doing?

665
00:35:06,500 --> 00:35:11,300
Well, you can see how these these equations are kind of coming down.

666
00:35:11,300 --> 00:35:13,600
Let me go ahead and make that a clearer Z there.

667
00:35:14,100 --> 00:35:18,100
You can see how these equations are sort of working out.

668
00:35:18,300 --> 00:35:20,800
You can see we have two over W.

669
00:35:20,800 --> 00:35:24,300
Times x 2 over H times y now.

670
00:35:24,300 --> 00:35:25,900
Why are we Computing?

671
00:35:25,900 --> 00:35:26,500
Those terms?

672
00:35:26,500 --> 00:35:29,000
Well, remember we've already done.

673
00:35:29,000 --> 00:35:30,300
By the time we get here.

674
00:35:30,600 --> 00:35:31,500
We've already

675
00:35:31,600 --> 00:35:32,400
he done.

676
00:35:35,600 --> 00:35:36,500
This work.

677
00:35:37,500 --> 00:35:38,000
Okay.

678
00:35:38,900 --> 00:35:45,500
We've already taken our m, 2 pixels transform and multiplied that by

679
00:35:45,500 --> 00:35:46,200
whatever.

680
00:35:46,600 --> 00:35:47,400
Our

681
00:35:49,500 --> 00:35:53,400
Whatever our projection result was and we've already offset by the

682
00:35:53,400 --> 00:35:54,300
screen center.

683
00:35:54,600 --> 00:35:58,400
So we've already put our values into screen space.

684
00:36:00,000 --> 00:36:03,000
This does is undo that work.

685
00:36:03,200 --> 00:36:03,800
Right?

686
00:36:03,900 --> 00:36:08,800
If x came in, as let's say it was all the way to this end of the

687
00:36:08,800 --> 00:36:09,700
screen, right?

688
00:36:09,700 --> 00:36:11,900
So it was W, right?

689
00:36:12,000 --> 00:36:15,300
So we were talking about a pixel that was over here and we input a w.

690
00:36:15,500 --> 00:36:16,500
What would this do?

691
00:36:16,800 --> 00:36:19,100
Well, the W's would cancel out.

692
00:36:19,200 --> 00:36:24,400
We would get 2 minus 1 which is 1, which just makes one be.

693
00:36:24,400 --> 00:36:28,800
This, you know, this side of the screen is equal to 1 in the output.

694
00:36:29,400 --> 00:36:29,800
What if

695
00:36:30,000 --> 00:36:32,200
We were to input 0, right?

696
00:36:32,200 --> 00:36:37,800
So all the way over on this side of the screen in our parlance well to

697
00:36:37,800 --> 00:36:41,700
over W Times 0 is just 0 and we're left with just negative 1.

698
00:36:41,900 --> 00:36:45,600
So negative, 1 is over on this ice cream, same with this, right?

699
00:36:45,900 --> 00:36:50,500
So you can see what we're doing here with that Matrix is we've created

700
00:36:50,500 --> 00:36:55,100
a matrix, which takes coordinate system that write this in the right

701
00:36:55,100 --> 00:36:57,200
place, that looks like this.

702
00:36:58,200 --> 00:36:58,800
Right?

703
00:36:59,000 --> 00:37:01,100
And it transforms it to one.

704
00:37:01,300 --> 00:37:03,600
That looks oops, that's great.

705
00:37:06,200 --> 00:37:07,400
That looks like this.

706
00:37:10,400 --> 00:37:14,000
Okay, so you can see exactly what we're doing with that.

707
00:37:14,000 --> 00:37:17,800
With that projection Matrix, we've outputted things that look like

708
00:37:17,800 --> 00:37:20,600
this and the reason we output those because we have a software

709
00:37:20,600 --> 00:37:22,500
renderer and that's what we wanted to draw with.

710
00:37:22,500 --> 00:37:27,900
Is just locations in the frame buffer, but clearly opengl wanted this.

711
00:37:27,900 --> 00:37:30,800
And so we needed to create a matrix that would produce this coordinate

712
00:37:30,800 --> 00:37:32,900
system for opengl.

713
00:37:33,400 --> 00:37:37,100
And that is exactly what I wanted to talk about today because it's

714
00:37:37,100 --> 00:37:39,900
crucial for us to understand why all

715
00:37:40,800 --> 00:37:41,700
Because that's the obvious.

716
00:37:41,700 --> 00:37:42,600
Next question, right?

717
00:37:42,600 --> 00:37:44,800
Is why does it want that, right?

718
00:37:44,800 --> 00:37:46,600
Why does it want - 121?

719
00:37:46,600 --> 00:37:47,700
What's going on here?

720
00:37:48,100 --> 00:37:48,500
Okay,

721
00:37:55,400 --> 00:37:58,800
and again, like I was saying, I really think this is crucial to

722
00:37:58,800 --> 00:38:04,400
understand when you're working on 3D stuff because it can be so

723
00:38:04,400 --> 00:38:07,500
confusing to people to look at projection matrices because they just

724
00:38:07,500 --> 00:38:11,100
have no idea what's going on in them and a lot of the reason they have

725
00:38:11,100 --> 00:38:14,200
no idea what's going on in them is because they don't fundamentally

726
00:38:14,200 --> 00:38:19,000
know about the - 121 space because if you think about what you were

727
00:38:19,000 --> 00:38:21,900
doing with the projection Matrix in our world and what we wanted,

728
00:38:22,100 --> 00:38:22,600
With it.

729
00:38:23,600 --> 00:38:26,700
We're producing a very different looking thing, right?

730
00:38:26,700 --> 00:38:30,200
And so, if you're accidentally still in this mindset, and you look at

731
00:38:30,200 --> 00:38:33,400
matrices, at do this, or you try to make matrices that do something,

732
00:38:33,600 --> 00:38:36,000
you're going to make something totally wrong, because it's not doing

733
00:38:36,000 --> 00:38:40,300
even remotely the same thing as what opengl wants you to do, okay?

734
00:38:40,600 --> 00:38:42,600
So let's talk about what's actually happening here.

735
00:38:43,800 --> 00:38:49,100
Okay what's actually happening here is opengl has to sort of have a

736
00:38:49,100 --> 00:38:53,100
bunch of processing that occurs in order to do the 3D pipeline

737
00:38:53,100 --> 00:38:54,500
correctly and robots late.

738
00:38:54,700 --> 00:38:57,900
Okay, and one of those things is clipping

739
00:39:01,000 --> 00:39:02,400
Clipping is extremely important.

740
00:39:02,400 --> 00:39:03,100
It needs to be done.

741
00:39:03,100 --> 00:39:06,200
Exactly correctly, or you'll get all kinds of visual artifacts which

742
00:39:06,200 --> 00:39:08,000
means that this sort of math had to be worth out.

743
00:39:08,000 --> 00:39:08,700
Exactly.

744
00:39:08,800 --> 00:39:10,800
And the people who implemented in Hardware have to get it.

745
00:39:10,800 --> 00:39:12,500
Exactly right.

746
00:39:12,500 --> 00:39:14,900
There is no room for error and needs to be perfect.

747
00:39:15,500 --> 00:39:15,900
Okay?

748
00:39:17,600 --> 00:39:20,200
And the reason for that, is that, if you think about what happens,

749
00:39:20,600 --> 00:39:24,000
you've got to systems that need to line up perfectly.

750
00:39:24,000 --> 00:39:26,100
And here's what those two systems are.

751
00:39:26,300 --> 00:39:27,600
If I have a triangle

752
00:39:32,600 --> 00:39:37,000
And I say for this triangle, you know, I am mapping my little smiley

753
00:39:37,000 --> 00:39:39,700
face on to it or whatever there's my texture map, right?

754
00:39:41,000 --> 00:39:45,800
I Define the texture, mapping, all of the routines that do that.

755
00:39:45,800 --> 00:39:50,100
All of the, you know, basically the pixel Shader, the fragments all of

756
00:39:50,100 --> 00:39:53,700
the pixels Center, picking all that stuff, I Define everything such

757
00:39:53,700 --> 00:39:57,900
that when this triangle is on the screen, I know I get this exact

758
00:39:57,900 --> 00:40:02,200
beautiful try, you know perfectly rendered triangle and it looks like

759
00:40:02,200 --> 00:40:05,800
a nice modern GPU rendered triangle, right?

760
00:40:06,900 --> 00:40:10,400
It does not look for example like, you know, a PlayStation 1.

761
00:40:10,400 --> 00:40:10,600
I do

762
00:40:10,800 --> 00:40:16,400
If you've ever seen for example, a PlayStation 1 but well, you know

763
00:40:16,400 --> 00:40:19,800
what, maybe we can just grab some graphics from the PlayStation 1 or

764
00:40:19,800 --> 00:40:22,000
something like this, and I don't mean to pick on the PlayStation 1

765
00:40:22,000 --> 00:40:22,700
uniquely.

766
00:40:22,900 --> 00:40:25,400
I'm just picking something from that era, right?

767
00:40:25,800 --> 00:40:27,900
So let's see here, PlayStation 1.

768
00:40:30,000 --> 00:40:31,100
Let's see.

769
00:40:32,800 --> 00:40:36,800
How do I get a game?

770
00:40:39,200 --> 00:40:41,000
What's a good example?

771
00:40:41,000 --> 00:40:46,800
May be Final Fantasy or something, I don't know.

772
00:40:46,800 --> 00:40:48,400
What would be a good?

773
00:40:48,700 --> 00:40:50,600
That's got too much pre-rendered stuff.

774
00:40:50,600 --> 00:40:52,800
I need something that's going to be more.

775
00:40:54,000 --> 00:40:54,600
Well, you know what?

776
00:40:54,600 --> 00:40:55,500
It might be fine.

777
00:40:56,300 --> 00:40:57,200
Let's find out.

778
00:41:04,500 --> 00:41:05,100
There we go.

779
00:41:09,600 --> 00:41:12,200
I'm trying to think if this will just the frame rates kind of bad to.

780
00:41:12,200 --> 00:41:15,400
So, it's kind of hard to see some of this PS1 like maybe

781
00:41:17,100 --> 00:41:18,100
Maybe this would be better.

782
00:41:25,900 --> 00:41:28,500
Some of these would give exactly what I want, I suppose.

783
00:41:44,900 --> 00:41:47,700
Still not really probably good enough for what I really want to

784
00:41:47,700 --> 00:41:50,700
illustrate, but you can kind of see something happening here.

785
00:41:58,500 --> 00:41:59,800
This is somebody who's hot.

786
00:42:00,000 --> 00:42:08,400
The emulator I desk to use so you can kind of see what's happening

787
00:42:08,400 --> 00:42:08,700
there.

788
00:42:08,700 --> 00:42:09,200
Right?

789
00:42:11,100 --> 00:42:15,800
I don't know if I can make this thing so is some higher res.

790
00:42:17,100 --> 00:42:17,800
I guess not.

791
00:42:20,300 --> 00:42:22,300
I wish I had a better example of this.

792
00:42:27,000 --> 00:42:28,600
Well that's actually pretty good there.

793
00:42:28,900 --> 00:42:30,800
Let's see if we can take a look at that.

794
00:42:30,800 --> 00:42:33,000
I'm going to see if I can get a good high risk play of this because I

795
00:42:33,000 --> 00:42:36,100
just want you to kind of take a look and see stop.

796
00:42:36,100 --> 00:42:36,700
Exactly.

797
00:42:59,500 --> 00:43:00,700
That's all I wanted to get in there.

798
00:43:02,200 --> 00:43:06,600
All right, so if you take a look at something like that, right?

799
00:43:07,000 --> 00:43:10,400
I'm not talking about that sort of thing because that's sort of back

800
00:43:10,400 --> 00:43:13,000
when they didn't have all the math or exactly where they couldn't

801
00:43:13,000 --> 00:43:15,900
afford the Silicon to do all the math worked out, right?

802
00:43:16,300 --> 00:43:18,300
And obviously I don't mean they don't have the math right out like the

803
00:43:18,300 --> 00:43:21,000
industry, obviously the industry had it worked out in the PS1 are just

804
00:43:21,000 --> 00:43:23,100
the people who made the PS1, I don't know.

805
00:43:23,100 --> 00:43:26,600
If the reason the PS1 has those problems is is because they didn't

806
00:43:26,600 --> 00:43:28,100
know about how to do it, exactly right?

807
00:43:28,100 --> 00:43:29,500
Or because they didn't have the Silicon to do it.

808
00:43:29,500 --> 00:43:31,500
Exactly right, or what?

809
00:43:31,500 --> 00:43:31,800
Right, I'm

810
00:43:32,000 --> 00:43:36,000
Sure because St I was doing it right at that time in the higher end

811
00:43:36,000 --> 00:43:36,500
Hardware.

812
00:43:37,300 --> 00:43:41,300
So anyway, assuming that you don't want that like wobbly stuff, and

813
00:43:41,300 --> 00:43:47,500
whatever you've very precisely specified exactly how to fill pixels

814
00:43:47,900 --> 00:43:51,300
what you know they should be how they should be doing the math

815
00:43:51,300 --> 00:43:54,500
interpolation to know the right texture and support from so that you

816
00:43:54,500 --> 00:43:56,100
don't have all of this shifting.

817
00:43:56,300 --> 00:43:59,900
Because you've maybe major Mass sloppy and it's rounding weirdly or

818
00:43:59,900 --> 00:44:01,800
arbitrarily or snapping two integers.

819
00:44:01,900 --> 00:44:05,000
Is arbitrarily and not taking that stuff into account, right?

820
00:44:06,700 --> 00:44:10,600
So, sub-pixel accurate rendering like that, where you're doing all of

821
00:44:10,600 --> 00:44:11,400
the math, just?

822
00:44:11,400 --> 00:44:15,100
Right is very important for a solid looking image and they've done all

823
00:44:15,100 --> 00:44:15,400
that.

824
00:44:15,400 --> 00:44:19,800
But now consider what happens when that same triangle is slowly moving

825
00:44:19,800 --> 00:44:22,300
and it slides off screen, right?

826
00:44:23,700 --> 00:44:29,800
Well, during this slide off screen, you are seeing lots of steps of

827
00:44:29,800 --> 00:44:33,900
actually filling other triangles.

828
00:44:33,900 --> 00:44:34,500
Right?

829
00:44:34,500 --> 00:44:39,800
You've got, you know, actually this triangle that you're filling once

830
00:44:39,800 --> 00:44:43,100
it gets to that part of the screen, you're only feeling that triangle

831
00:44:43,100 --> 00:44:44,300
once you get to that part of the screen, right?

832
00:44:44,300 --> 00:44:49,100
So you're not even giving it the same coordinates in terms of like

833
00:44:49,100 --> 00:44:51,600
distance from each other or even same structure.

834
00:44:51,600 --> 00:44:53,300
You may even have to split some

835
00:44:53,700 --> 00:44:54,000
Rules.

836
00:44:54,500 --> 00:44:58,300
For example, if you imagine something like a triangle that was off the

837
00:44:58,300 --> 00:44:59,300
screen like this.

838
00:44:59,400 --> 00:44:59,900
Now, you've

839
00:45:00,200 --> 00:45:03,500
Actually two triangles that you're filling for this one triangle,

840
00:45:03,600 --> 00:45:04,100
right?

841
00:45:06,200 --> 00:45:07,700
If it was moving down this way, right?

842
00:45:07,700 --> 00:45:12,100
Some big triangle here and so, if you think about, you have to get all

843
00:45:12,100 --> 00:45:13,100
of this math, correct?

844
00:45:13,200 --> 00:45:15,900
And so it's incredibly important to the pipeline respect very

845
00:45:15,900 --> 00:45:16,500
carefully.

846
00:45:16,700 --> 00:45:17,300
That it be spect.

847
00:45:17,300 --> 00:45:19,900
Such that you can have enough Precision everywhere to do the right

848
00:45:19,900 --> 00:45:24,800
thing that you will not see any errors and that the clip triangles

849
00:45:24,800 --> 00:45:26,600
will look exactly the same as unclip.

850
00:45:26,600 --> 00:45:30,000
Triangles as they move off the screen to avoid getting any of these

851
00:45:30,000 --> 00:45:33,100
other artifacts right perspective.

852
00:45:33,800 --> 00:45:35,200
Incorrect interpolation is

853
00:45:35,300 --> 00:45:36,700
Totally separate thing.

854
00:45:36,900 --> 00:45:40,600
We kind of mentioned that before but I'm not even talking about that

855
00:45:40,600 --> 00:45:41,200
right now.

856
00:45:41,300 --> 00:45:46,400
I'm literally just talking even about just the basic getting the

857
00:45:46,400 --> 00:45:51,200
subpixel fill and the correct texture coordinate picking correct.

858
00:45:51,200 --> 00:45:52,100
Even just that stuff.

859
00:45:52,100 --> 00:45:55,000
You have to make sure that all this stuff goes correctly and there's a

860
00:45:55,000 --> 00:45:56,700
lot of different things that go on in this.

861
00:45:56,700 --> 00:45:59,800
Sometimes there's a thing called guard band, which does some stuff and

862
00:45:59,800 --> 00:46:01,000
that's a separate issue as well.

863
00:46:01,000 --> 00:46:04,200
And gpus have all these other things that they do, we don't have to

864
00:46:04,200 --> 00:46:05,100
care about any of that right now.

865
00:46:05,300 --> 00:46:08,400
Now we just have to understand the fact that this is real work and

866
00:46:08,400 --> 00:46:09,000
real math.

867
00:46:09,000 --> 00:46:12,500
That had to be worked out and gotten just right and it's non-trivial,

868
00:46:12,800 --> 00:46:13,200
okay?

869
00:46:14,300 --> 00:46:16,900
I mean, like anything else is Trivial once you actually just know it

870
00:46:17,300 --> 00:46:20,100
but it was not in Trivial that to everyone had to actually sit down

871
00:46:20,100 --> 00:46:21,800
and do all this work and get it just right in.

872
00:46:21,800 --> 00:46:24,100
This was a, you know, this was real real stuff.

873
00:46:25,600 --> 00:46:30,800
So, in order to do that clipping process and to do it accurately the

874
00:46:30,800 --> 00:46:36,100
way that opengl handles its coordinates system, is the input

875
00:46:36,100 --> 00:46:37,900
coordinate system, right?

876
00:46:38,100 --> 00:46:41,000
That's the X Y Z's that you pass, right?

877
00:46:42,400 --> 00:46:45,600
Are they go through the projection Matrix?

878
00:46:47,900 --> 00:46:54,500
Right and they come out in what is called a unit cube sometimes even

879
00:46:54,500 --> 00:46:57,500
though it's really like a bilateral unit cube right.

880
00:46:57,900 --> 00:47:03,500
But what this thing is is it's essentially a space where you've got

881
00:47:03,500 --> 00:47:05,400
going to draw in some kind of crude.

882
00:47:05,600 --> 00:47:06,200
There we go.

883
00:47:06,800 --> 00:47:07,700
Here's an X.

884
00:47:08,400 --> 00:47:11,500
And A Y Epps, that's no good.

885
00:47:11,900 --> 00:47:16,500
Here we go, an x, a y, and the Z, right?

886
00:47:17,600 --> 00:47:22,300
And it's negative 2 1 negative 1 to 1 on all the axes.

887
00:47:22,500 --> 00:47:28,900
So this cube is, you know, along the Z axis negative 1 to 1 along the

888
00:47:28,900 --> 00:47:32,200
y-axis, its negative one to one as well.

889
00:47:32,200 --> 00:47:34,600
And I guess maybe I could write those on the actual axis.

890
00:47:34,600 --> 00:47:35,700
If I was cool.

891
00:47:39,500 --> 00:47:40,100
Right.

892
00:47:40,300 --> 00:47:45,700
So the boundaries of this Cube, this imaginary Cube are negative 1 to

893
00:47:45,700 --> 00:47:46,100
1.

894
00:47:46,500 --> 00:47:50,200
And what it's going to do is it's going to clip the entire world,

895
00:47:50,300 --> 00:47:54,700
everything that gets input to it is going to get clipped against this

896
00:47:54,700 --> 00:47:55,300
Cube.

897
00:47:55,900 --> 00:47:59,800
So anything that extends past negative 1 or 1,

898
00:48:00,000 --> 00:48:03,600
Any direction on any access will get clipped if it's completely

899
00:48:03,600 --> 00:48:04,200
outside.

900
00:48:04,200 --> 00:48:06,900
So there's a triangle floating out here, it just gets discarded

901
00:48:06,900 --> 00:48:10,700
entirely, if it happens to pierce it, right?

902
00:48:10,700 --> 00:48:14,400
Then it will produce only the part of the triangle, that is going to

903
00:48:14,400 --> 00:48:16,900
be actually inside the cube.

904
00:48:17,900 --> 00:48:18,300
Okay.

905
00:48:29,100 --> 00:48:31,000
So, that is actually how it does.

906
00:48:32,000 --> 00:48:36,200
Its clipping in this uniform, I think this is typically called clip

907
00:48:36,200 --> 00:48:36,700
space.

908
00:48:39,200 --> 00:48:40,400
I'm not sure if that's what the open.

909
00:48:40,400 --> 00:48:41,200
Jill spec, actually calls.

910
00:48:41,200 --> 00:48:42,100
It's been a long time.

911
00:48:42,600 --> 00:48:43,700
I should probably go.

912
00:48:43,700 --> 00:48:46,600
I probably should have gone and reread that before talking about this

913
00:48:46,600 --> 00:48:50,100
today, so I could have used right terms but as is the rule on handmade

914
00:48:50,100 --> 00:48:51,900
hero I never get to do any preparation.

915
00:48:52,800 --> 00:48:53,700
It's not allowed.

916
00:48:54,200 --> 00:48:56,900
So that's just my vague recollection.

917
00:48:56,900 --> 00:48:58,300
As I think this is called clip space.

918
00:48:59,100 --> 00:49:03,300
So you have the input here, it goes through a matrix multiply

919
00:49:04,100 --> 00:49:09,600
And that Matrix, multiply puts everything into is responsible for

920
00:49:09,600 --> 00:49:11,000
putting everything into Cliffs face.

921
00:49:11,000 --> 00:49:12,800
Now, you write this Matrix.

922
00:49:13,100 --> 00:49:17,900
What that means is when we created our projection Matrix, that is our

923
00:49:17,900 --> 00:49:22,900
job, our job was to put a, our input coordinate system, which was this

924
00:49:23,200 --> 00:49:25,400
into Clips face, which looks like this.

925
00:49:25,500 --> 00:49:29,000
Now we didn't have to worry about Z because we don't have it.

926
00:49:30,900 --> 00:49:33,100
These are all 0, right?

927
00:49:33,900 --> 00:49:38,500
So since ours, these are all 0, we didn't have to do any work in this

928
00:49:38,500 --> 00:49:42,400
part of the Matrix at all to deal with Z.

929
00:49:43,600 --> 00:49:46,400
We would have had to do the exact same thing and that's what we're

930
00:49:46,400 --> 00:49:46,900
going to see.

931
00:49:46,900 --> 00:49:48,600
That's what I'm building up to here.

932
00:49:48,800 --> 00:49:51,300
We're going to have to do the exact same thing with Z.

933
00:49:52,000 --> 00:49:56,200
Once we start handling Z in the back part of the pipeline here,

934
00:49:56,400 --> 00:49:59,700
because what we're going to have to do, is make sure that our Z - 1 2

935
00:49:59,700 --> 00:50:00,200
1,

936
00:50:00,500 --> 00:50:03,200
Also does that exact same work?

937
00:50:03,200 --> 00:50:07,600
So it takes the boundaries of what we are trying to render in our

938
00:50:07,600 --> 00:50:12,600
world and Maps those from negative 1 to 1, okay?

939
00:50:13,600 --> 00:50:23,100
So as you might imagine, once you sort of get this, this once you,

940
00:50:23,100 --> 00:50:27,600
once you have this, it's there's not a whole lot more that needs to

941
00:50:27,600 --> 00:50:34,000
happen in order to in order to get your screen coordinates.

942
00:50:34,000 --> 00:50:37,500
It's just a matter of rendering what's in here, but it still does go

943
00:50:37,500 --> 00:50:40,900
through a little bit of extra tough in terms of determining where

944
00:50:40,900 --> 00:50:42,700
things actually are on the screen.

945
00:50:42,700 --> 00:50:43,600
And the reason for that

946
00:50:43,600 --> 00:50:47,000
Is obviously that, at some point, it really does have to do the

947
00:50:47,000 --> 00:50:48,500
transform to pixels.

948
00:50:48,500 --> 00:50:52,000
And of course, the way that it transforms to pixels is now it does is

949
00:50:52,000 --> 00:50:55,300
essentially the reverse of this, right?

950
00:50:55,300 --> 00:50:59,200
It now has to go from Clips face to I believe what they call Window

951
00:50:59,200 --> 00:50:59,800
space.

952
00:51:02,500 --> 00:51:03,500
In opengl.

953
00:51:04,100 --> 00:51:08,900
And that is again a really straightforward transform that just

954
00:51:08,900 --> 00:51:13,300
involves multiplying out again by the width and then offsetting,

955
00:51:13,400 --> 00:51:13,900
right?

956
00:51:13,900 --> 00:51:19,300
So that's just taking a negative 1 to 1 range on each of the axes and

957
00:51:19,300 --> 00:51:24,200
producing a 02 width range 0 to height range, right?

958
00:51:24,200 --> 00:51:28,300
Exactly like what we had to undo because they need to get pixels

959
00:51:28,300 --> 00:51:29,100
eventually as well.

960
00:51:29,100 --> 00:51:31,600
So they end up producing window Space by doing this.

961
00:51:31,800 --> 00:51:32,500
Transform.

962
00:51:33,100 --> 00:51:44,600
And I believe this is documented very clearly if I'm not mistaken in

963
00:51:44,600 --> 00:51:48,700
GL viewport, I think so.

964
00:51:48,700 --> 00:51:54,600
Let me go ahead and load that up here or try to load it up.

965
00:51:54,600 --> 00:51:55,300
There it is.

966
00:51:55,900 --> 00:51:57,100
And here you go.

967
00:51:57,200 --> 00:51:57,800
Right.

968
00:51:58,100 --> 00:52:01,600
And you can see it's the exact inverse of what we were doing.

969
00:52:01,700 --> 00:52:04,700
I'm right, you can.

970
00:52:05,700 --> 00:52:06,900
Yeah, you can.

971
00:52:09,500 --> 00:52:11,500
You can see that it does exactly what we were doing.

972
00:52:11,800 --> 00:52:14,900
This is the precise inverse of what we did to take our screen

973
00:52:14,900 --> 00:52:17,100
coordinates and put them into clip space because hey, that's the do

974
00:52:17,100 --> 00:52:18,600
the exact opposite to put them out.

975
00:52:19,200 --> 00:52:23,300
And then of course it has an offset because remember GL viewport

976
00:52:23,300 --> 00:52:25,200
doesn't have to draw to the whole screen.

977
00:52:25,300 --> 00:52:27,000
You can draw two like a subset of the screen.

978
00:52:27,000 --> 00:52:30,500
So it needs to also have like a displacement in there to allow you to

979
00:52:30,500 --> 00:52:33,100
draw two just a sub rectangle, right?

980
00:52:33,800 --> 00:52:38,400
And so that equation is going to happen after the things are in clip

981
00:52:38,400 --> 00:52:38,800
space.

982
00:52:39,500 --> 00:52:47,300
Let me just see, I don't know if I can get like a better.

983
00:52:52,600 --> 00:52:53,500
Because these aren't there.

984
00:52:53,500 --> 00:52:57,400
I don't know if any of the things we'll have the those those terms.

985
00:52:57,500 --> 00:52:59,600
Oh, right gluperspective, that's what it's called.

986
00:53:00,400 --> 00:53:03,900
There is a thing that I don't think many people use anymore, but there

987
00:53:03,900 --> 00:53:06,100
is a utility library that came with opengl.

988
00:53:06,100 --> 00:53:08,300
That you could use that had stuff like an automatic thing for

989
00:53:08,300 --> 00:53:09,700
generating a perspective.

990
00:53:09,700 --> 00:53:10,300
Matrix.

991
00:53:10,300 --> 00:53:13,800
I didn't know if any of these would have quick documentation that

992
00:53:13,800 --> 00:53:18,000
would talk about the window Space versus screen space the best place

993
00:53:18,000 --> 00:53:18,800
to look for this stuff.

994
00:53:18,800 --> 00:53:24,800
And I guess I mean I should just bring it up but the GL spec is is

995
00:53:24,800 --> 00:53:26,800
pretty good about keeping all this stuff.

996
00:53:26,800 --> 00:53:27,900
It's less.

997
00:53:27,900 --> 00:53:30,400
So nowadays that it's focused on all of the

998
00:53:30,500 --> 00:53:35,100
craziness in Modern Hardware used to be a much more manageable you

999
00:53:35,100 --> 00:53:41,000
like, for example, if you go back to like, Geo spec as of like to, I

1000
00:53:41,000 --> 00:53:41,800
don't know if that's

1001
00:53:44,500 --> 00:53:46,400
I don't know how how

1002
00:53:53,200 --> 00:53:54,700
How easy that would be for me to get.

1003
00:53:54,700 --> 00:53:55,500
Okay, here you go.

1004
00:53:56,300 --> 00:53:59,900
So if you go back to like earlier versions of the Geo spec, it's a

1005
00:54:00,000 --> 00:54:04,400
If that's much more focused on just like the fixed function Pipeline

1006
00:54:04,600 --> 00:54:06,500
and while that's not so relevant anymore.

1007
00:54:06,500 --> 00:54:09,000
Because like I said, most of the time you end up do using shaders and

1008
00:54:09,000 --> 00:54:09,500
stuff like that.

1009
00:54:09,500 --> 00:54:11,800
If you're doing anything significant with Graphics program, these

1010
00:54:11,800 --> 00:54:14,800
days, it's a much more manageable spec, if you just want to read stuff

1011
00:54:14,800 --> 00:54:16,400
and find out like what the terms are.

1012
00:54:16,800 --> 00:54:21,100
And so, this is kind of a handy document to potentially peruse,

1013
00:54:21,500 --> 00:54:24,000
because you can take a look at stuff in an easier way.

1014
00:54:24,000 --> 00:54:28,900
So, so like here's here's an example, coordinate transforms, right?

1015
00:54:29,100 --> 00:54:29,800
And this kind,

1016
00:54:30,000 --> 00:54:33,000
Comes through and talks entirely about.

1017
00:54:33,000 --> 00:54:35,000
Yeah, here you go right.

1018
00:54:36,000 --> 00:54:39,700
This talks about all the terms and here is the other one that I wanted

1019
00:54:39,700 --> 00:54:40,700
to.

1020
00:54:41,100 --> 00:54:42,100
Let's see here.

1021
00:54:43,500 --> 00:54:48,000
So window coordinates, so window space is not quite correct.

1022
00:54:48,800 --> 00:54:49,800
Let's talk about.

1023
00:54:52,400 --> 00:54:53,800
Window coordinates.

1024
00:54:58,000 --> 00:55:04,000
We go and it looks like normalized device.

1025
00:55:04,000 --> 00:55:09,700
Coordinates is is the phrase of the negative 1 to 1.

1026
00:55:09,700 --> 00:55:14,000
It looks like clip coordinates subdivision car down and clip

1027
00:55:14,000 --> 00:55:14,800
coordinates to yield.

1028
00:55:14,800 --> 00:55:17,500
No choice coordinates in the final few of our transformation is

1029
00:55:17,500 --> 00:55:19,700
converters courts into window coordinates, okay?

1030
00:55:22,100 --> 00:55:23,000
So, that's interesting.

1031
00:55:23,100 --> 00:55:25,300
I may have misspoken on this then, as well.

1032
00:55:25,300 --> 00:55:28,100
So maybe the clip happens before the prospective divide which would

1033
00:55:28,100 --> 00:55:31,600
mean that you're not quite here yet.

1034
00:55:31,600 --> 00:55:34,700
So let me try and again I'm going to try and use this is unusual for

1035
00:55:34,700 --> 00:55:34,900
me.

1036
00:55:34,900 --> 00:55:40,500
I don't try to usually get these right but I'm gonna try to analyzed

1037
00:55:40,500 --> 00:55:41,400
coordinates

1038
00:55:44,600 --> 00:55:45,100
Is that?

1039
00:55:45,100 --> 00:55:45,700
There we go.

1040
00:55:51,600 --> 00:55:52,100
And maybe.

1041
00:55:53,900 --> 00:55:55,300
Also normalized.

1042
00:55:58,500 --> 00:55:59,600
Device coordinates.

1043
00:56:00,100 --> 00:56:02,700
Now, it I've got to have to take a look at the speck, Mark carefully

1044
00:56:02,700 --> 00:56:07,100
to see if they actually say exactly where the clipping happens, but

1045
00:56:07,100 --> 00:56:11,200
the part that we need to talk about in here now, I suppose it doesn't

1046
00:56:11,200 --> 00:56:17,200
really matter per se where the clip happens for our purposes because

1047
00:56:17,200 --> 00:56:20,200
we don't really need to know where the clip happens because we don't

1048
00:56:20,300 --> 00:56:22,700
do anything at that point if this makes sense.

1049
00:56:23,300 --> 00:56:26,600
But it would be nice to know it sounds like just the fact that they

1050
00:56:26,600 --> 00:56:28,000
talk about clip coordinates being

1051
00:56:28,300 --> 00:56:30,100
The protective I'd which I'll talk about in a second.

1052
00:56:30,900 --> 00:56:34,300
Suggest to me that my statement just there that they clip in the

1053
00:56:34,300 --> 00:56:36,400
negative one to one space is not actually true.

1054
00:56:36,700 --> 00:56:41,300
They clip just before it becomes in that space potentially, I'm not

1055
00:56:41,300 --> 00:56:42,200
sure, but let's see.

1056
00:56:42,200 --> 00:56:45,600
In fact, we might be able to tell because again, like I said, this is

1057
00:56:45,600 --> 00:56:47,200
a really good spec for this sort of thing.

1058
00:56:50,700 --> 00:56:55,400
I'm just assuming that the fact that they call it clip coordinates is,

1059
00:56:55,600 --> 00:56:59,900
is means that they clip there, but they're not coming out in quite

1060
00:57:00,000 --> 00:57:06,400
Saying, which because, and they might not want to say because maybe

1061
00:57:06,400 --> 00:57:09,000
they don't want the implementation have to know.

1062
00:57:09,600 --> 00:57:10,000
So, I don't know.

1063
00:57:10,000 --> 00:57:10,200
Yeah.

1064
00:57:10,200 --> 00:57:13,500
If you maybe take a look and see if you can find on your own, I don't

1065
00:57:13,500 --> 00:57:17,000
want to waste too much stream time on it, but you can see they've got

1066
00:57:17,000 --> 00:57:21,500
exactly basically the thing that we drew here with one exception which

1067
00:57:21,500 --> 00:57:24,800
is the part that we probably should start talking about.

1068
00:57:24,800 --> 00:57:27,700
Now I don't know if it's too early for it I so it's not I still got a

1069
00:57:27,700 --> 00:57:29,500
reasonable amount of time so maybe I'll give it a shot.

1070
00:57:31,100 --> 00:57:34,700
All right, so I think we've got our terminology correct here window,

1071
00:57:34,700 --> 00:57:38,300
coordinates and normalized device coordinates, and it looks like

1072
00:57:38,300 --> 00:57:40,900
actually clip coordinates are not these.

1073
00:57:41,000 --> 00:57:44,000
It looks like clip coordinates are actually a little bit before.

1074
00:57:44,000 --> 00:57:48,000
So I'm just going to go ahead and say, since it sounds like it from

1075
00:57:48,000 --> 00:57:53,300
the spec that the GPU may actually do the clipping before it actually

1076
00:57:53,300 --> 00:57:55,100
produces the cube just before.

1077
00:57:55,800 --> 00:57:58,800
And so let's talk about what happens in here.

1078
00:57:59,400 --> 00:57:59,900
All right,

1079
00:58:01,100 --> 00:58:04,100
So here's the part that I haven't talked about yet because our Matrix

1080
00:58:04,100 --> 00:58:08,300
doesn't do it basically and the reason that our Matrix doesn't do it

1081
00:58:08,300 --> 00:58:12,600
is because we're not actually performing any kind of work with Z.

1082
00:58:13,100 --> 00:58:17,600
So we don't actually try to produce, we don't try to be careful about

1083
00:58:17,600 --> 00:58:20,800
producing any particular results with the Z coordinate.

1084
00:58:20,800 --> 00:58:24,400
Like, we're literally not doing anything with our Z coordinates.

1085
00:58:24,400 --> 00:58:27,300
So there's nothing there's really no.

1086
00:58:29,400 --> 00:58:32,000
Modification that's going on.

1087
00:58:32,000 --> 00:58:38,900
Now it's tempting to take a look at this and say oh okay so you know I

1088
00:58:38,900 --> 00:58:42,100
know I've got my XYZ one that comes in here and I've got you know,

1089
00:58:42,100 --> 00:58:46,800
that I've got my XYZ one that comes in here and I've got an output

1090
00:58:46,800 --> 00:58:50,400
that also has an x y z 1 in it, right?

1091
00:58:50,400 --> 00:58:54,600
And so if we were going to talk about what would happen in terms of

1092
00:58:54,600 --> 00:58:57,200
projection and stuff like that, we would think about the Z coordinate

1093
00:58:57,200 --> 00:58:59,300
as being this coordinate, it turns out that's not

1094
00:58:59,400 --> 00:59:00,700
Entirely going to be the case.

1095
00:59:01,200 --> 00:59:06,800
So let me quickly give a brief refresher on what the perspective part

1096
00:59:06,800 --> 00:59:10,200
of perspective, projection, or the projection part I should say of

1097
00:59:10,200 --> 00:59:10,800
projection.

1098
00:59:12,400 --> 00:59:16,100
But the prospectus part in particular is going to have to accomplish

1099
00:59:16,100 --> 00:59:18,400
because we've already done it previously in handmade here, but we're

1100
00:59:18,400 --> 00:59:21,800
going to have to kind of remember again, and like be careful about

1101
00:59:22,100 --> 00:59:23,300
what that actually means.

1102
00:59:23,800 --> 00:59:27,500
So remember what we are trying to do with perspective projection?

1103
00:59:29,200 --> 00:59:31,400
And just to say this one more time because there's so much stuff in

1104
00:59:31,400 --> 00:59:34,500
here and I apologize for there being so much stuff in here, but you

1105
00:59:34,500 --> 00:59:37,200
kind of have to have a little bit of all of it in order to understand

1106
00:59:37,200 --> 00:59:37,800
what's going on.

1107
00:59:41,300 --> 00:59:45,600
In here, we were doing all of the work for the perspective.

1108
00:59:45,600 --> 00:59:46,200
Projection.

1109
00:59:46,200 --> 00:59:47,200
Would we want in perspective?

1110
00:59:47,200 --> 00:59:50,800
Now, we had two branches, one was orthographic and orthographic is a

1111
00:59:50,800 --> 00:59:53,900
transform that doesn't do perspective projection, right?

1112
00:59:53,900 --> 00:59:58,000
It doesn't have things getting smaller as they get further away from

1113
00:59:58,000 --> 00:59:58,600
the viewer.

1114
00:59:59,000 --> 00:59:59,900
It's just a direct.

1115
01:00:00,700 --> 01:00:04,400
You know, sort of projection onto the screen that doesn't change size

1116
01:00:04,400 --> 01:00:07,900
based on distance, but when we weren't trying to do that and that's

1117
01:00:07,900 --> 01:00:10,400
usually used for like you I or something is why we were doing that,

1118
01:00:10,400 --> 01:00:10,900
right?

1119
01:00:11,800 --> 01:00:15,000
But when we're not doing that, when we're trying to do things that are

1120
01:00:15,000 --> 01:00:17,700
sort of more realistic in the world and they get smaller the further.

1121
01:00:17,700 --> 01:00:19,600
They get away from the viewer.

1122
01:00:19,600 --> 01:00:23,900
When we are doing something like that, then we need to have some way

1123
01:00:23,900 --> 01:00:26,600
of shrinking things as they get further away and if you remember

1124
01:00:26,600 --> 01:00:29,800
correctly, the way we did, that was with a relationship of similar.

1125
01:00:30,000 --> 01:00:30,700
Triangles.

1126
01:00:30,800 --> 01:00:31,200
Right?

1127
01:00:32,300 --> 01:00:36,300
What we did was say, well okay, if we're looking from here, here is

1128
01:00:36,300 --> 01:00:38,000
our eyeball, right?

1129
01:00:40,300 --> 01:00:43,100
And we know we've got some flat screen here.

1130
01:00:44,900 --> 01:00:48,300
That we want to project onto, and you remember me, drawing this

1131
01:00:48,300 --> 01:00:48,700
diagram.

1132
01:00:48,700 --> 01:00:53,700
Hopefully then if we have a point out in the world, somewhere we can

1133
01:00:53,700 --> 01:00:56,900
find where it is on the screen, right?

1134
01:00:57,600 --> 01:01:02,300
We can find its coordinates on the screen by crew constructing to try

1135
01:01:02,300 --> 01:01:05,000
and similar triangles right to similar.

1136
01:01:05,000 --> 01:01:06,400
Right triangles, here's one.

1137
01:01:06,700 --> 01:01:11,300
Here's the other one and we know since we've got both the distance to

1138
01:01:11,300 --> 01:01:12,300
the screen, right?

1139
01:01:12,300 --> 01:01:14,200
We've got the distance to the screen and we

1140
01:01:14,400 --> 01:01:17,000
Half the distance to the point, right?

1141
01:01:18,000 --> 01:01:20,000
And another way to look at, that would be those would be the Z

1142
01:01:20,000 --> 01:01:21,200
coordinates, right?

1143
01:01:21,300 --> 01:01:23,600
This would be the Z of the screen, right?

1144
01:01:23,600 --> 01:01:26,700
And this would be the Z of the point, right?

1145
01:01:26,800 --> 01:01:29,500
Maybe the better way to do that would be screen Z.

1146
01:01:32,900 --> 01:01:37,100
Point Z, right, since we've got both of those.

1147
01:01:37,300 --> 01:01:40,600
And we know this, which is say the y, coordinate of the point or

1148
01:01:40,600 --> 01:01:41,100
whatever.

1149
01:01:41,800 --> 01:01:45,100
If we want to find the screen, why it's just a straight relationship,

1150
01:01:45,100 --> 01:01:48,400
similar, triangle relationship, just like, high school geometry class,

1151
01:01:50,100 --> 01:01:50,600
right?

1152
01:01:50,700 --> 01:01:53,800
So, all we have to do is just set up the really simple relationship

1153
01:01:53,800 --> 01:01:54,200
that s.

1154
01:01:54,200 --> 01:01:58,800
Why is 2py exactly as SZ is 2pz.

1155
01:01:59,500 --> 01:02:02,500
And then when you solve this equation, which again is Trivial to solve

1156
01:02:02,700 --> 01:02:03,800
And Y equals screen.

1157
01:02:03,800 --> 01:02:05,800
Z x, py / peasy right?

1158
01:02:05,800 --> 01:02:12,600
Just multiply this through, you've got a trivial way of computing that

1159
01:02:12,600 --> 01:02:14,200
relationship, right?

1160
01:02:14,600 --> 01:02:17,900
And so we basically worked out how we were going to do our math based

1161
01:02:17,900 --> 01:02:20,200
on based on this, right?

1162
01:02:22,500 --> 01:02:24,000
And it's very straightforward.

1163
01:02:24,200 --> 01:02:26,800
So that's what we have here, but

1164
01:02:38,100 --> 01:02:39,900
Implicit in all this, right?

1165
01:02:42,200 --> 01:02:47,500
Is is sort of this activity, that, that that relationship has a

1166
01:02:47,500 --> 01:02:48,600
divided, right?

1167
01:02:48,600 --> 01:02:53,100
We had to divide by something in order to make that ratio work and you

1168
01:02:53,100 --> 01:02:58,700
can see that divided operating right here and this is the crucial part

1169
01:02:58,700 --> 01:02:58,900
of it.

1170
01:02:58,900 --> 01:02:59,800
That's the thing that

1171
01:03:00,000 --> 01:03:02,400
The perspective right there, right?

1172
01:03:02,900 --> 01:03:08,700
The the correct visual appearance of things shrinking into the

1173
01:03:08,700 --> 01:03:16,800
distance is a 1 over distance relationship and so that must appear in

1174
01:03:16,800 --> 01:03:21,000
the final equations of your graphics, you know, of what you're

1175
01:03:21,000 --> 01:03:21,700
producing.

1176
01:03:21,900 --> 01:03:26,400
If someone over distance relationship doesn't appear in there, you

1177
01:03:26,400 --> 01:03:29,900
will not have something that looks like a human style perspective.

1178
01:03:30,000 --> 01:03:31,200
Spective, right.

1179
01:03:31,800 --> 01:03:32,400
So

1180
01:03:33,500 --> 01:03:39,900
That crucial part when we come back and look here, you can see where

1181
01:03:39,900 --> 01:03:41,700
is it going to come from right?

1182
01:03:41,700 --> 01:03:47,800
There is no way in matrix, multiplication to produce a divided, right?

1183
01:03:47,800 --> 01:03:54,300
I have an input and I need to divide some other things in my input, by

1184
01:03:54,300 --> 01:03:57,800
this, right, I need to like, get the Z in a denominator down here.

1185
01:03:57,800 --> 01:04:02,800
There is no way in a matrix to take something from the input and

1186
01:04:02,800 --> 01:04:03,200
divide

1187
01:04:03,500 --> 01:04:07,600
It by something else in the input, matrices, don't have that ability,

1188
01:04:08,000 --> 01:04:08,500
right?

1189
01:04:09,800 --> 01:04:18,200
So what happens in opengl is there sort of a secret additional

1190
01:04:18,200 --> 01:04:18,900
procedure?

1191
01:04:19,000 --> 01:04:21,700
It's not secret because like I said, it's very clearly spelled out how

1192
01:04:21,700 --> 01:04:22,300
it works.

1193
01:04:23,500 --> 01:04:29,000
But in order to produce prospective results, which we obviously want,

1194
01:04:30,300 --> 01:04:34,700
There is a divide that's baked in.

1195
01:04:37,900 --> 01:04:41,300
So, implicit in the process, although you set this entire Matrix

1196
01:04:41,300 --> 01:04:43,500
herself and provide all the values for the Matrix.

1197
01:04:43,500 --> 01:04:47,500
So it's a generic Matrix multiply, there is a baked divide that

1198
01:04:47,500 --> 01:04:48,800
happens in here.

1199
01:04:49,000 --> 01:04:50,700
That is like expect to happen.

1200
01:04:50,700 --> 01:04:53,700
It's just like after we do the projection Matrix like we would

1201
01:04:53,700 --> 01:04:54,900
normally do with the Matrix.

1202
01:04:55,200 --> 01:04:58,700
We are going to perform a divided and the reason that we're going to

1203
01:04:58,700 --> 01:05:03,900
perform perform a divide is because there is no other way to get

1204
01:05:03,900 --> 01:05:05,800
perspective results out of this thing.

1205
01:05:06,000 --> 01:05:07,200
So although we love

1206
01:05:07,300 --> 01:05:10,500
To make it so that you just specify a matrix and that's the whole

1207
01:05:10,600 --> 01:05:11,300
operation.

1208
01:05:11,500 --> 01:05:12,200
We can't.

1209
01:05:14,000 --> 01:05:14,400
Okay.

1210
01:05:14,900 --> 01:05:16,200
And so how do they do that?

1211
01:05:16,200 --> 01:05:20,100
Well what they typically do is they say well, okay, what we're going

1212
01:05:20,100 --> 01:05:26,600
to do is we're going to provide for one divided operation and that

1213
01:05:26,600 --> 01:05:30,600
divided operation is going to be to normalize.

1214
01:05:31,900 --> 01:05:38,000
Whatever is in the vector at the End by its W coordinate, right?

1215
01:05:38,700 --> 01:05:46,700
So instead of w coming out as one right, w-we're telling you, whoever

1216
01:05:46,700 --> 01:05:50,500
authors this Matrix, you can make W come out to be whatever you want

1217
01:05:50,500 --> 01:05:51,000
it to be.

1218
01:05:51,000 --> 01:05:53,400
So set up these Matrix values to be whatever you want.

1219
01:05:54,400 --> 01:05:56,700
Put anything you want into the resulting W.

1220
01:05:57,200 --> 01:05:59,800
And then what I will do when I am going to

1221
01:06:00,000 --> 01:06:04,100
The final coordinates is I will take all of these other coordinates

1222
01:06:04,100 --> 01:06:04,800
here, right?

1223
01:06:04,800 --> 01:06:10,200
And W itself although it's kind of somewhat meaningless, I guess and I

1224
01:06:10,200 --> 01:06:13,600
will divide them conceptually by the value of w.

1225
01:06:14,300 --> 01:06:17,200
So it's actually

1226
01:06:18,600 --> 01:06:22,200
You know, this is sort of what you have been thinking of it.

1227
01:06:22,300 --> 01:06:26,000
You know, we've got a matrix a projection Matrix here, right?

1228
01:06:26,300 --> 01:06:29,900
And we're going to multiply our Point by this projection Matrix and

1229
01:06:29,900 --> 01:06:32,300
get a new Matrix.

1230
01:06:32,800 --> 01:06:37,100
I think I get a new Point conceptually that's sort of what we're

1231
01:06:37,100 --> 01:06:40,300
thinking of but really what's actually happening and we just weren't

1232
01:06:40,300 --> 01:06:42,700
using it because we were setting W equal to 1.

1233
01:06:42,700 --> 01:06:46,200
So it was never actually performing any actual operation for us what's

1234
01:06:46,200 --> 01:06:47,600
actually happening here.

1235
01:06:48,900 --> 01:06:49,700
Is this?

1236
01:06:53,700 --> 01:06:54,200
Right?

1237
01:06:55,100 --> 01:07:03,100
Well that so we're actually taking whatever the resulting MP is using

1238
01:07:03,100 --> 01:07:06,900
its W value to divide, the whole result of our Matrix transform.

1239
01:07:07,200 --> 01:07:07,600
Right?

1240
01:07:08,200 --> 01:07:12,200
So what that will produce is essentially whatever the x coordinates

1241
01:07:12,200 --> 01:07:16,200
computed, you know whatever the new x coordinate is over the W Nu W

1242
01:07:16,200 --> 01:07:17,200
coordinate whatever.

1243
01:07:17,200 --> 01:07:19,700
The y-coordinate is over the new W coordinate, whatever the Z

1244
01:07:19,700 --> 01:07:22,700
coordinate is over the new W coordinate and then one

1245
01:07:23,400 --> 01:07:24,800
Right, would be the output.

1246
01:07:33,200 --> 01:07:36,900
So, hopefully, that makes some sense.

1247
01:07:37,800 --> 01:07:40,900
It's purely a convention in some sense, right?

1248
01:07:41,000 --> 01:07:44,800
Meaning, there's many mathematical ways that maybe they could have

1249
01:07:44,800 --> 01:07:49,000
gone about saying how we wait get a perspective dividing here, but

1250
01:07:49,000 --> 01:07:52,200
this is the cleanest and maybe there are deeper math reasons.

1251
01:07:52,200 --> 01:07:53,800
Why they felt like this was a good idea.

1252
01:07:53,800 --> 01:07:54,300
I don't know.

1253
01:07:54,300 --> 01:07:59,400
I don't pretend to know I wasn't there, but that's how they chose to

1254
01:07:59,400 --> 01:08:00,000
do it.

1255
01:08:00,500 --> 01:08:02,900
So what this means is, if

1256
01:08:03,100 --> 01:08:07,000
You want to implement your own perspective, projection inside an

1257
01:08:07,000 --> 01:08:08,100
opengl Matrix?

1258
01:08:08,400 --> 01:08:10,800
What you are fundamentally trying to do

1259
01:08:12,600 --> 01:08:19,399
Is move the information about what is supposed to get divided out into

1260
01:08:19,399 --> 01:08:24,300
the W coordinate, which means fiddling with these values here, right?

1261
01:08:24,300 --> 01:08:26,200
Which are what control the W coordinate.

1262
01:08:26,500 --> 01:08:27,000
Okay.

1263
01:08:27,600 --> 01:08:32,000
In order to put information in there, so we're not going to be doing

1264
01:08:32,000 --> 01:08:32,899
this anymore.

1265
01:08:33,000 --> 01:08:36,700
00:01 is not going to be what we're doing at all because we don't want

1266
01:08:36,700 --> 01:08:38,100
a 1 in here at all.

1267
01:08:38,500 --> 01:08:42,300
Instead what we're going to do is something more like a 0010

1268
01:08:42,500 --> 01:08:46,700
Right to move our Z coordinate into our W, so that it will divide

1269
01:08:46,700 --> 01:08:48,200
through, right?

1270
01:08:50,300 --> 01:08:50,899
That's exactly.

1271
01:08:50,899 --> 01:08:52,700
We're going to be doing because we need the W, coordinate to be

1272
01:08:52,700 --> 01:08:54,100
something more fancy than that.

1273
01:08:54,100 --> 01:08:56,200
But you get the idea, right?

1274
01:08:58,899 --> 01:08:59,399
So

1275
01:09:00,500 --> 01:09:05,100
At that point you may also ask well okay what is this here for?

1276
01:09:05,399 --> 01:09:06,100
Right?

1277
01:09:06,200 --> 01:09:08,300
Because if these are the coordinates,

1278
01:09:10,600 --> 01:09:12,899
if these are the coordinates that we're going to draw on the screen,

1279
01:09:13,399 --> 01:09:16,300
this is the thing that we're going to divide them by, right?

1280
01:09:16,300 --> 01:09:19,800
So we're going to do you know / W these so that's the perspective,

1281
01:09:19,800 --> 01:09:20,000
right?

1282
01:09:20,000 --> 01:09:23,399
So we're producing our XY coordinates here is the perspective part

1283
01:09:23,600 --> 01:09:27,899
that's going to produce our - 121 space over here and then we're going

1284
01:09:27,899 --> 01:09:30,700
to apply a viewport transform to get it into pixel space.

1285
01:09:30,800 --> 01:09:32,200
Well what is the Z?

1286
01:09:32,200 --> 01:09:34,700
Why are we even what's this even here for?

1287
01:09:36,200 --> 01:09:38,000
Why are we even Computing a z value?

1288
01:09:39,899 --> 01:09:42,000
And that's where we come full circle.

1289
01:09:42,100 --> 01:09:44,500
And the answer is because it goes into Z buffer.

1290
01:09:47,399 --> 01:09:48,800
That's what the z-buffer actually is.

1291
01:09:49,800 --> 01:09:55,200
Its, we need to now produce a value that will go into the Z buffer and

1292
01:09:55,900 --> 01:09:57,300
part, and parcel with that.

1293
01:09:57,900 --> 01:09:59,600
It's what needs to be used for clipping.

1294
01:10:01,000 --> 01:10:01,500
Right.

1295
01:10:02,000 --> 01:10:07,600
Because again, we need to have a range from negative 1 to 1 that we

1296
01:10:07,600 --> 01:10:09,300
can use for clipping.

1297
01:10:10,700 --> 01:10:11,300
Right?

1298
01:10:12,500 --> 01:10:14,600
So again, I want to just make sure I understand.

1299
01:10:14,600 --> 01:10:16,600
I'm going to go back and double-check the spec, to make sure that I'm

1300
01:10:17,000 --> 01:10:19,400
right about where the clipping happens, because I still don't know

1301
01:10:19,400 --> 01:10:20,500
where the clipping happens.

1302
01:10:21,600 --> 01:10:27,200
So saying there's a big divide here, may be the wrong thing to say, I

1303
01:10:27,200 --> 01:10:32,300
want to just make it clear that like, yeah, I want to see them say

1304
01:10:32,300 --> 01:10:35,700
specifically where they have this happen.

1305
01:10:38,100 --> 01:10:44,000
And I can't, I just can't seem to see them say it explicitly, so it

1306
01:10:44,000 --> 01:10:47,400
may be that they just don't, but you can see very clearly what they

1307
01:10:47,400 --> 01:10:48,100
call the stuff.

1308
01:10:48,100 --> 01:10:48,500
Right?

1309
01:10:48,600 --> 01:10:51,200
The vertex coordinates are presented, the GL are termed object

1310
01:10:51,200 --> 01:10:52,300
coordinates, right?

1311
01:10:53,100 --> 01:10:54,600
And so this right here,

1312
01:10:58,100 --> 01:11:00,400
Is this and this is what we're giving it right.

1313
01:11:02,200 --> 01:11:05,000
The modelview Matrix is applied is going to yield, I coordinates and

1314
01:11:05,000 --> 01:11:06,300
another Mage called objection are supplied to.

1315
01:11:06,300 --> 01:11:07,100
I course we equip born.

1316
01:11:07,100 --> 01:11:11,300
It's that part is not so true, really?

1317
01:11:11,300 --> 01:11:13,600
That's a very conceptual thing in opengl.

1318
01:11:13,600 --> 01:11:16,600
That's actually gone now, anyway, in the modern versions of it.

1319
01:11:16,600 --> 01:11:20,200
So that's kind of an acronym stick to 2.0 and the old fixed function

1320
01:11:20,200 --> 01:11:22,500
pipeline stuff, model view and projection Matrix.

1321
01:11:22,500 --> 01:11:26,600
We're just a convenience really, those are specified together, right?

1322
01:11:26,800 --> 01:11:27,800
And so really, you can

1323
01:11:27,900 --> 01:11:31,400
Think about this is just, there is a matrix, right?

1324
01:11:31,400 --> 01:11:35,000
And it can do whatever it wants, but it has to, at least do the

1325
01:11:35,000 --> 01:11:38,200
production of the screen coordinates, but member matrices can be

1326
01:11:38,200 --> 01:11:39,000
multiplied together.

1327
01:11:39,000 --> 01:11:42,900
So you can have whatever your object transform World, transfer, case

1328
01:11:42,900 --> 01:11:43,300
transforms.

1329
01:11:43,300 --> 01:11:46,500
All your other transferred can all be baked into one and then they

1330
01:11:46,500 --> 01:11:49,400
just have to be multiplied with the projection Matrix at the end to

1331
01:11:49,400 --> 01:11:51,300
produce one Matrix does all the work.

1332
01:11:51,400 --> 01:11:54,300
So even though they talk about model view and projection here really,

1333
01:11:54,300 --> 01:11:57,400
there's just one Matrix and even though opengl lets you set two

1334
01:11:57,400 --> 01:11:57,800
matrices,

1335
01:11:57,900 --> 01:11:59,000
He's in the old school way.

1336
01:11:59,000 --> 01:11:59,900
In the old fixed function,

1337
01:12:00,000 --> 01:12:02,500
Pipeline, those are just multiplied together.

1338
01:12:02,500 --> 01:12:06,000
Anyway, when they're actually used by the GPU, nobody actually does

1339
01:12:06,000 --> 01:12:09,100
the to, I think, the only reason they kept them separate was because

1340
01:12:09,100 --> 01:12:11,800
there was some old-school lighting stuff that they would do.

1341
01:12:11,900 --> 01:12:12,700
I don't even remember.

1342
01:12:12,700 --> 01:12:14,200
It was just nonsense stuff.

1343
01:12:14,600 --> 01:12:20,300
So anyway, so really in practice, we only need that one Matrix for the

1344
01:12:20,300 --> 01:12:22,800
full transform, when we're actually producing our screen coordinates

1345
01:12:23,600 --> 01:12:27,200
and so when we multiply by The Matrix, we get the clip coordinates,

1346
01:12:27,300 --> 01:12:27,900
right?

1347
01:12:28,000 --> 01:12:29,800
The perspective divisions carried out on.

1348
01:12:30,000 --> 01:12:30,400
Up towards do.

1349
01:12:30,400 --> 01:12:33,500
You'll normalized device coordinates which are these guys here, right?

1350
01:12:34,200 --> 01:12:38,700
And so I'm just assuming that the clip happens in here somewhere and I

1351
01:12:38,700 --> 01:12:41,400
just yeah, I'm assuming it happens in clip coordinates cuz that's what

1352
01:12:41,400 --> 01:12:42,100
they call it.

1353
01:12:42,500 --> 01:12:45,900
But again, I just don't know enough about the history there to know

1354
01:12:45,900 --> 01:12:50,200
why specifically, that's the best way to do it.

1355
01:12:50,200 --> 01:12:51,500
Like, I don't know.

1356
01:12:53,300 --> 01:12:55,800
I guess, here's one thing I will say and again, takes the grain of

1357
01:12:55,800 --> 01:12:57,900
salt because I'm not an expert on these sorts of things.

1358
01:12:57,900 --> 01:12:59,800
So I don't want to pretend to tell you the right answer.

1359
01:13:01,000 --> 01:13:05,900
But you know, in order to get the clipping correct, you can never

1360
01:13:05,900 --> 01:13:07,500
divide by 0, right.

1361
01:13:07,500 --> 01:13:10,000
So you imagine there's a divide that's going on in here, right?

1362
01:13:10,000 --> 01:13:11,300
I'm going to divide by w.

1363
01:13:12,600 --> 01:13:13,100
Right?

1364
01:13:13,700 --> 01:13:17,400
It could be that W is 0 if I divide by zero, all bets are off, right?

1365
01:13:17,400 --> 01:13:21,400
And as I get closer to 0 things, get more and more unstable in that

1366
01:13:21,400 --> 01:13:21,900
sense, right?

1367
01:13:21,900 --> 01:13:25,800
They start to go towards infinity and all sorts of stuff like that

1368
01:13:27,100 --> 01:13:28,300
before they hit undefined.

1369
01:13:28,300 --> 01:13:31,600
So in that sense you might imagine.

1370
01:13:31,600 --> 01:13:36,400
Well, okay, I can't divide first before I've clipped, because part of

1371
01:13:36,400 --> 01:13:40,000
clipping is, you know, if I imagine I've got my view

1372
01:13:45,700 --> 01:13:46,500
Here's my view.

1373
01:13:46,500 --> 01:13:48,300
Frustum right.

1374
01:13:50,700 --> 01:13:54,500
I'm looking down things this way, if I imagine, I've got some triangle

1375
01:13:54,500 --> 01:13:56,200
that comes back behind the viewer.

1376
01:13:56,200 --> 01:13:58,500
It goes out in front of the viewer and back behind the viewer.

1377
01:13:58,800 --> 01:13:59,900
It will pass.

1378
01:14:00,600 --> 01:14:05,300
You know, if this is where the viewer is standing, it will pass by Z

1379
01:14:05,300 --> 01:14:08,600
equals 0, like, this triangle Mae Pierce, Z equals zero effect.

1380
01:14:08,600 --> 01:14:10,900
Maybe I could draw it from the side for as, for better.

1381
01:14:13,000 --> 01:14:14,400
I think I drove the other way last time.

1382
01:14:22,900 --> 01:14:25,100
So you imagine, I'm trying to do this operation here.

1383
01:14:25,100 --> 01:14:25,600
Right?

1384
01:14:25,600 --> 01:14:30,000
Here's a, you know, a point and I'm doing the projection onto the

1385
01:14:30,000 --> 01:14:30,500
screen.

1386
01:14:30,600 --> 01:14:34,600
Well, what if this point is part of a triangle and the other point is

1387
01:14:34,600 --> 01:14:36,300
over here, right?

1388
01:14:36,500 --> 01:14:40,700
Here's my triangle, right at Z equals 0.

1389
01:14:41,900 --> 01:14:42,500
You know I'm saying.

1390
01:14:43,400 --> 01:14:47,500
Well, I still need to draw this triangle so I still need to produce

1391
01:14:47,600 --> 01:14:51,300
this clipped Point, that's like wherever it is right?

1392
01:14:51,300 --> 01:14:54,300
Wherever this triangle, intersects the screen I still need to produce

1393
01:14:54,300 --> 01:14:57,000
it and I still need to draw that, right?

1394
01:14:58,100 --> 01:14:59,000
That's crucial.

1395
01:15:01,500 --> 01:15:05,100
But I can't do the Divide first because this point becomes undefined

1396
01:15:05,100 --> 01:15:06,800
if I do the Divide right.

1397
01:15:07,200 --> 01:15:10,300
So I assume that basically what's happening there is the reason that

1398
01:15:10,300 --> 01:15:13,800
they have to perform the clipping before they go into this space is

1399
01:15:13,800 --> 01:15:16,700
just because, or at least conceptually perform at their, I don't know,

1400
01:15:16,700 --> 01:15:20,000
you know exactly how they do it is, you know, up to them obviously.

1401
01:15:20,600 --> 01:15:22,800
But I'm assuming that the reason they have to do it is because if they

1402
01:15:22,800 --> 01:15:27,800
don't get the near clipping plane, clipping done first, then they

1403
01:15:27,800 --> 01:15:29,800
would it would explode, right?

1404
01:15:30,000 --> 01:15:32,100
They wouldn't be able to do the clipping anymore.

1405
01:15:32,800 --> 01:15:35,700
So I suspect that that's basically what has to happen, right?

1406
01:15:35,700 --> 01:15:37,300
At that at that point, right?

1407
01:15:37,300 --> 01:15:40,900
The clipping has to do that clipping and now that I think about it

1408
01:15:40,900 --> 01:15:41,800
since I have done

1409
01:15:43,300 --> 01:15:45,000
Sort of software versions of this before.

1410
01:15:45,000 --> 01:15:46,500
That is exactly what you have to do.

1411
01:15:46,500 --> 01:15:49,100
You have to, I've never done it.

1412
01:15:49,400 --> 01:15:52,600
I did it before I knew about the opengl pipeline and so I never really

1413
01:15:52,600 --> 01:15:55,900
had anything as fancy as normalized device coordinates at all.

1414
01:15:56,700 --> 01:16:02,300
Those were totally A New Concept to me when I learned opengl but you

1415
01:16:02,300 --> 01:16:05,200
you can't do your perspective divide before doing your clipping

1416
01:16:05,200 --> 01:16:05,700
otherwise?

1417
01:16:05,700 --> 01:16:10,100
Yeah you get when things get close and pass through the near clip play

1418
01:16:10,100 --> 01:16:11,200
and you get explosions.

1419
01:16:11,800 --> 01:16:12,400
You get.

1420
01:16:12,700 --> 01:16:13,000
Yeah, yeah.

1421
01:16:13,200 --> 01:16:16,500
Your triangles go nuts because they get close to that undefined

1422
01:16:16,500 --> 01:16:17,000
divided.

1423
01:16:17,900 --> 01:16:20,600
So yeah so that actually makes perfect sense to me so I can talk to

1424
01:16:20,600 --> 01:16:20,900
you that.

1425
01:16:20,900 --> 01:16:24,200
So you go through the projection, you do the clip and then you do that

1426
01:16:24,200 --> 01:16:29,000
big divide to finally give you your complete - 121 space which is

1427
01:16:29,200 --> 01:16:31,500
where everything is fully defined.

1428
01:16:33,500 --> 01:16:38,200
Okay, but that's all we really need to know about it.

1429
01:16:38,200 --> 01:16:41,300
For now, in a sense, there's a lot there but that's really all we need

1430
01:16:41,300 --> 01:16:44,400
to know about it again, we don't really have to understand how the GPU

1431
01:16:44,400 --> 01:16:44,900
does clipping.

1432
01:16:44,900 --> 01:16:47,800
I just kind of wanted to give you a little sense of what was going on

1433
01:16:47,800 --> 01:16:48,100
there.

1434
01:16:48,300 --> 01:16:51,200
We don't actually have to know because we don't have to deal with that

1435
01:16:51,200 --> 01:16:55,000
clipping in any particular way, we just have to make sure that we're

1436
01:16:55,000 --> 01:16:58,900
out putting coordinates that make sense in this final space.

1437
01:16:58,900 --> 01:17:03,000
So our big focus is on this cube right here, because

1438
01:17:03,300 --> 01:17:06,500
Thing that we produce in our projection Matrix has to produce that

1439
01:17:06,500 --> 01:17:07,700
Cube correctly.

1440
01:17:07,900 --> 01:17:11,100
We have to make sure that everything that we want to see in our world

1441
01:17:11,100 --> 01:17:13,400
is fitting directly into that Cube.

1442
01:17:13,400 --> 01:17:18,200
So you can imagine our entire view space like what we are viewing.

1443
01:17:19,800 --> 01:17:21,600
That whole frustum, right?

1444
01:17:21,800 --> 01:17:24,200
The whole view, frustum.

1445
01:17:24,300 --> 01:17:28,500
I don't know how to draw this very well, maybe this that, maybe this

1446
01:17:28,500 --> 01:17:29,500
is the right way to draw it.

1447
01:17:32,000 --> 01:17:33,500
Just from the side again.

1448
01:17:35,000 --> 01:17:37,500
So I guess I'll do the dotted line.

1449
01:17:58,400 --> 01:17:58,900
There we go.

1450
01:18:00,800 --> 01:18:02,100
So, looking for the sign anyway.

1451
01:18:04,000 --> 01:18:06,100
I didn't want to try to draw a frustum in 3D.

1452
01:18:06,100 --> 01:18:06,800
It's kind of hard.

1453
01:18:06,800 --> 01:18:08,200
My sketching skills aren't up to it.

1454
01:18:09,200 --> 01:18:12,800
So looking from the side, our job is to take this whole part of the

1455
01:18:12,800 --> 01:18:15,100
world that we can see, right?

1456
01:18:15,700 --> 01:18:16,400
Here's the eye.

1457
01:18:18,600 --> 01:18:23,000
We're looking this way and we're trying to take this whole part of the

1458
01:18:23,000 --> 01:18:26,900
world that we can see and map it into that, you know, negative 1 to 1

1459
01:18:26,900 --> 01:18:27,500
cube.

1460
01:18:27,500 --> 01:18:28,100
Right.

1461
01:18:28,300 --> 01:18:29,400
That's what we're trying to do.

1462
01:18:30,400 --> 01:18:36,500
And so these are World coordinates, you know, and we and and we need

1463
01:18:36,500 --> 01:18:40,000
to map them into this this normalized device coordinates and that

1464
01:18:40,000 --> 01:18:41,200
involves a bunch of stuff.

1465
01:18:42,000 --> 01:18:44,400
First of all, it involves centering everything around the camera.

1466
01:18:44,400 --> 01:18:47,600
So actually technically, like even in this diagram, these aren't even

1467
01:18:47,600 --> 01:18:48,100
really

1468
01:18:49,100 --> 01:18:51,800
You know, they aren't sent around the camera yet, it's everything is

1469
01:18:51,800 --> 01:18:54,000
going to be in World space or wherever it is, right?

1470
01:18:54,000 --> 01:18:55,100
And then we have to transform it.

1471
01:18:55,100 --> 01:18:58,000
So it's centered around the camera, we have to, then transfer it.

1472
01:18:58,000 --> 01:19:02,000
So it's between the the front near in front clip, planes map - 121 in

1473
01:19:02,000 --> 01:19:02,500
Z.

1474
01:19:02,600 --> 01:19:05,600
We have to transform it so the extents of the screen map to negative 1

1475
01:19:05,600 --> 01:19:09,900
to 1 going out after the protected divided in blah, blah blah, blah

1476
01:19:09,900 --> 01:19:10,600
blah, right?

1477
01:19:10,700 --> 01:19:14,600
So we have a ton of work to do to make sure that our Matrix does all

1478
01:19:14,600 --> 01:19:18,200
the work necessary to take this frustum shape and

1479
01:19:18,300 --> 01:19:22,700
It you know, after the prospective divided into that clean negative 1

1480
01:19:22,700 --> 01:19:25,700
to 1 Cube, that's what we have to do.

1481
01:19:27,200 --> 01:19:29,000
So that is our goal.

1482
01:19:30,900 --> 01:19:35,400
And if we think about what's happening with our Z coordinate, right?

1483
01:19:36,600 --> 01:19:40,200
The Z coordinate is programmed when it's going to be using the Z

1484
01:19:40,200 --> 01:19:40,600
buffer.

1485
01:19:45,400 --> 01:19:49,200
Again to range between negative 1 and 1.

1486
01:19:49,400 --> 01:19:52,000
Now there are extensions to Z buffer is like w buffering and these

1487
01:19:52,000 --> 01:19:53,900
other sorts of things that we're not going to talk about right now.

1488
01:19:54,600 --> 01:19:57,000
But assuming we're just using a straightforward z-buffer for our depth

1489
01:19:57,000 --> 01:20:01,900
buffer, which is what we're going to do first, at least, when we are

1490
01:20:01,900 --> 01:20:03,100
producing our Z value.

1491
01:20:03,300 --> 01:20:07,600
Then what we are trying to do here effectively in that Z position is

1492
01:20:07,600 --> 01:20:10,400
we're trying to map the near clipping plane, right?

1493
01:20:10,400 --> 01:20:12,600
And I don't know if we've ever talked about the concept of a near and

1494
01:20:12,600 --> 01:20:13,200
far clipping plane.

1495
01:20:13,200 --> 01:20:15,100
We may not have but

1496
01:20:15,200 --> 01:20:19,000
a whole reason we have these things is specifically for that reason,

1497
01:20:19,400 --> 01:20:23,900
we want to be able to produce some consistent value for negative, one

1498
01:20:23,900 --> 01:20:24,700
in z,

1499
01:20:26,400 --> 01:20:28,800
and some consistent value of 1 in Z.

1500
01:20:29,000 --> 01:20:32,800
So we need to Define bounds on our world.

1501
01:20:33,000 --> 01:20:38,900
Where we know, like, we understand what we are actually mapping them

1502
01:20:39,000 --> 01:20:40,300
to, right?

1503
01:20:41,500 --> 01:20:45,100
Because we need those normalized device coordinates to map out

1504
01:20:45,100 --> 01:20:46,500
correctly, right?

1505
01:20:46,800 --> 01:20:49,800
And so we create an ear clip plane, which is this.

1506
01:20:50,100 --> 01:20:54,200
And if our clip plane, which is this, and that's what determines our Z

1507
01:20:54,200 --> 01:20:56,100
range right now.

1508
01:20:56,100 --> 01:20:59,300
There's a lot of things that have done.

1509
01:20:59,600 --> 01:20:59,900
There's

1510
01:21:00,000 --> 01:21:05,100
Lot of Z buffers, methodologies that aren't this.

1511
01:21:06,100 --> 01:21:09,400
There's a thing called an infinite, far clipping plane, which is by,

1512
01:21:09,600 --> 01:21:13,000
you can do a trick by putting Z into a denominators, so that you never

1513
01:21:13,000 --> 01:21:14,100
have a far clipping plane.

1514
01:21:14,300 --> 01:21:15,800
It just gets less and less precise.

1515
01:21:15,800 --> 01:21:19,200
The further out you get I believe is the thing which can just use a

1516
01:21:19,200 --> 01:21:19,800
floating Point.

1517
01:21:19,800 --> 01:21:20,100
Direct.

1518
01:21:20,100 --> 01:21:23,400
See buffer, where it just allows it to be greater than 1 and you use,

1519
01:21:23,400 --> 01:21:25,700
you just start floating Point values, which is basically the same

1520
01:21:25,700 --> 01:21:26,000
thing.

1521
01:21:26,000 --> 01:21:29,900
It just gets less and less accurate, as you get further out, so,

1522
01:21:30,000 --> 01:21:34,200
So by no means, do you have to end your understanding of Z buffer is

1523
01:21:34,200 --> 01:21:37,400
just with the understanding that you map Things, We negative 1 to 1

1524
01:21:37,500 --> 01:21:40,900
and that's the values that get mapped into the z-buffer somehow that

1525
01:21:40,900 --> 01:21:43,300
are used for the types of stuff that we talked about yesterday.

1526
01:21:43,700 --> 01:21:47,300
But for the purposes of our first implementation here and possibly

1527
01:21:47,300 --> 01:21:49,800
what, we will just stay with because handmade hero doesn't reach him.

1528
01:21:50,200 --> 01:21:54,100
A hero does kind of know a very tight bound on what it's trying to

1529
01:21:54,100 --> 01:21:55,300
display depth wise.

1530
01:21:55,500 --> 01:21:59,000
So it's it's highly unlikely that we will really need anything more

1531
01:21:59,000 --> 01:21:59,800
advanced than a base.

1532
01:22:00,000 --> 01:22:03,700
Z buffer approach but just understand that there's more out there than

1533
01:22:03,700 --> 01:22:06,700
just the basic z-buffer approach and if so if that's something that

1534
01:22:06,700 --> 01:22:09,300
you're interested in, you can look those up again.

1535
01:22:09,300 --> 01:22:13,800
You can look up W buffer you can look up infinite.

1536
01:22:15,800 --> 01:22:18,900
For our clip plane, you can look up.

1537
01:22:18,900 --> 01:22:24,000
Like, there's probably like no far clipping plane or, like, disable

1538
01:22:24,000 --> 01:22:24,800
far clipping plane.

1539
01:22:24,800 --> 01:22:25,300
I don't know.

1540
01:22:28,000 --> 01:22:30,800
I'm not sure what all the methods even are at this point, but there's

1541
01:22:30,800 --> 01:22:37,000
a lot of there's a lot more out there than just than just this one way

1542
01:22:37,000 --> 01:22:39,800
that we're looking at, but we just don't have any need to go into

1543
01:22:39,800 --> 01:22:40,100
them.

1544
01:22:40,800 --> 01:22:42,600
So, be sure to take a look at those.

1545
01:22:42,600 --> 01:22:46,100
If you're doing an other types of games, if you're playing around, you

1546
01:22:46,100 --> 01:22:51,500
know, with a more sort of traditional 3D style thing, where you're

1547
01:22:51,500 --> 01:22:54,600
standing in a world and looking out over the horizon or something in

1548
01:22:54,600 --> 01:22:54,700
it.

1549
01:22:54,700 --> 01:22:55,500
And, you know,

1550
01:22:57,500 --> 01:22:58,700
X, an outdoor scene.

1551
01:22:58,700 --> 01:23:01,600
For example, where you got these really Long View distances, there are

1552
01:23:01,600 --> 01:23:04,200
other ways you can try to approach these problems that don't

1553
01:23:04,200 --> 01:23:07,600
necessarily involve creating a far, clipping plane.

1554
01:23:09,000 --> 01:23:12,200
It's, I don't know if there's any way to get away with not having an

1555
01:23:12,200 --> 01:23:13,000
ear clip plane.

1556
01:23:15,800 --> 01:23:17,300
I have never really thought about that.

1557
01:23:17,300 --> 01:23:19,600
That's kind of interesting.

1558
01:23:20,100 --> 01:23:23,800
But yeah, that's usually less of a concern because typically, you

1559
01:23:23,800 --> 01:23:26,500
don't want stuff like right in the face of the player like that

1560
01:23:26,500 --> 01:23:27,400
anyway, so it's not.

1561
01:23:27,500 --> 01:23:31,300
Not as big of a concern but you know at the very least the far

1562
01:23:31,300 --> 01:23:32,700
clipping plane is often something.

1563
01:23:32,900 --> 01:23:36,000
When you're dealing with very large world's at view distances.

1564
01:23:36,000 --> 01:23:38,900
The far clipping plane is something that you do care about potentially

1565
01:23:38,900 --> 01:23:42,300
not having or at least not seeing its effects.

1566
01:23:42,300 --> 01:23:44,800
And so, that's something to be aware of.

1567
01:23:45,300 --> 01:23:48,400
So, anyway, if we come back here, let's talk about our projection

1568
01:23:48,400 --> 01:23:51,300
Matrix and how we might get sort of the effects that we want to get

1569
01:23:51,300 --> 01:23:51,900
out of it.

1570
01:23:53,600 --> 01:23:57,300
So let's take a look at how we were sort of doing this stuff.

1571
01:23:57,500 --> 01:23:58,400
To begin with.

1572
01:23:58,400 --> 01:23:59,800
And I think we did this on his.

1573
01:24:00,000 --> 01:24:04,000
Made hero before, when we were talking about how to produce the X and

1574
01:24:04,000 --> 01:24:04,300
Y coordinates.

1575
01:24:04,300 --> 01:24:08,600
But let's just kind of go back through here and see how we might want

1576
01:24:08,600 --> 01:24:09,900
to to do this.

1577
01:24:09,900 --> 01:24:14,300
So let's pretend we're having x, y, z and Z is come in.

1578
01:24:14,300 --> 01:24:18,300
Now that are essentially in our, you know, camera space.

1579
01:24:18,300 --> 01:24:18,800
Let's call it.

1580
01:24:18,800 --> 01:24:23,100
And what I mean by camera space is just I'm not going to talk about

1581
01:24:23,100 --> 01:24:26,800
the process right now of centering the world around the camera.

1582
01:24:26,800 --> 01:24:29,900
So let's just assume that the camera as you

1583
01:24:30,000 --> 01:24:31,800
No, at 000 or something.

1584
01:24:31,800 --> 01:24:33,600
We've already done that work.

1585
01:24:33,600 --> 01:24:37,000
So the world is just centered around the camera and that the cameras,

1586
01:24:37,000 --> 01:24:41,000
like, looking down the Z axis, so that the Z axis is like pointing

1587
01:24:41,000 --> 01:24:42,200
back up at the camera.

1588
01:24:42,300 --> 01:24:42,800
Right?

1589
01:24:42,800 --> 01:24:46,900
So we've done that, we've taken where the camera is out of the

1590
01:24:46,900 --> 01:24:50,600
equation and we're just talking about producing the perspective part.

1591
01:24:50,800 --> 01:24:54,300
And the reason that it's free for us to do is because again, matrices

1592
01:24:54,300 --> 01:24:58,800
can be multiplied together at any time to produce a composite result.

1593
01:24:59,200 --> 01:24:59,700
So if I

1594
01:25:00,000 --> 01:25:01,100
Something like this.

1595
01:25:02,500 --> 01:25:07,900
Two matrices, I can produce a matrix that does the effect of two

1596
01:25:07,900 --> 01:25:10,200
matrices just by multiple took multiplying together.

1597
01:25:10,500 --> 01:25:14,200
So if I want to, I can consider my projection Matrix, as a separate

1598
01:25:14,200 --> 01:25:18,400
Matrix, I can consider my camera Matrix as a separate Matrix, and this

1599
01:25:18,400 --> 01:25:20,000
one can be responsible for putting.

1600
01:25:20,500 --> 01:25:22,300
Well, actually these are in the wrong order, right now.

1601
01:25:23,200 --> 01:25:24,100
Order matters.

1602
01:25:26,400 --> 01:25:27,300
So let's try that again.

1603
01:25:27,400 --> 01:25:28,500
Here's my camera Matrix.

1604
01:25:28,500 --> 01:25:29,700
Here's my projection Matrix.

1605
01:25:32,000 --> 01:25:36,500
I can take a thing where I want to, you know, do a camera transform on

1606
01:25:36,500 --> 01:25:39,300
the points to put them relative to the camera and then I can do

1607
01:25:39,300 --> 01:25:44,100
another transform that does the projection that opengl wants me to do

1608
01:25:44,300 --> 01:25:47,300
and then I can combine those together and get the same effect on a

1609
01:25:47,300 --> 01:25:50,200
point by doing just a single Matrix, right?

1610
01:25:50,400 --> 01:25:53,800
And so, it's free for me to consider steps of these previous process

1611
01:25:53,800 --> 01:25:57,900
individually and not worry about any inefficiency because all I have

1612
01:25:57,900 --> 01:26:00,700
to do is before I get started with my world, rendering just just

1613
01:26:00,900 --> 01:26:04,000
Quick Matrix multiply to smush them together or even do it offline.

1614
01:26:04,000 --> 01:26:07,200
I can even do it in something like Mathematica or something like that.

1615
01:26:07,200 --> 01:26:10,600
If I want to, if I have matrices with constants in them that I've

1616
01:26:10,600 --> 01:26:13,700
considered separately, I can just do that ahead of time and produce

1617
01:26:13,700 --> 01:26:16,000
the result and then use that or whatever.

1618
01:26:16,000 --> 01:26:16,300
Right?

1619
01:26:16,300 --> 01:26:21,300
So there's really no consequence for considering matrices separately

1620
01:26:21,300 --> 01:26:24,600
because you can always multiply them either in code or symbolically

1621
01:26:24,600 --> 01:26:28,800
ahead of time to get a composite result that will do the combination

1622
01:26:28,800 --> 01:26:29,400
of them.

1623
01:26:29,400 --> 01:26:30,700
So, I'm going to consider just

1624
01:26:30,900 --> 01:26:31,900
The projection now.

1625
01:26:33,400 --> 01:26:37,000
And we're going to take a quick look at that.

1626
01:26:37,300 --> 01:26:37,800
So

1627
01:26:45,300 --> 01:26:49,400
Okay, so let's talk a little bit about what the sorts of things are

1628
01:26:49,400 --> 01:26:51,600
that we're going to have to do here, right?

1629
01:26:52,900 --> 01:26:56,300
And if we take a look at what's going on, you'll notice there's some

1630
01:26:56,300 --> 01:26:59,800
there's a very interesting occur.

1631
01:27:00,000 --> 01:27:03,600
Happening here and I just want to make sure that we sort of have all

1632
01:27:03,600 --> 01:27:04,100
of it.

1633
01:27:05,200 --> 01:27:07,500
Let me sort of go through what we were doing before us.

1634
01:27:07,500 --> 01:27:10,400
You can kind of appreciate all the stuff because it's been a while

1635
01:27:10,400 --> 01:27:13,900
since we've looked at this part of the code.

1636
01:27:13,900 --> 01:27:18,200
And it's, you know, understandable that you probably haven't, you

1637
01:27:18,200 --> 01:27:21,600
know, it's been paged out all the stuff that we were doing.

1638
01:27:22,400 --> 01:27:26,700
So let's take a look at how this transform is working here.

1639
01:27:27,500 --> 01:27:29,600
You can kind of see we have a

1640
01:27:32,300 --> 01:27:36,700
We have a pretty basic transformed here at the back of our transform.

1641
01:27:36,800 --> 01:27:40,600
This just doing essentially exactly what open jails going to do, in

1642
01:27:40,600 --> 01:27:46,600
terms of transforming, like things that the pixel space, right?

1643
01:27:47,900 --> 01:27:51,700
We don't really have to worry too much about about that part of it

1644
01:27:51,700 --> 01:27:54,800
because open jails are automatically going to do the transform out

1645
01:27:54,800 --> 01:27:56,300
into the screen.

1646
01:27:57,000 --> 01:28:01,300
But one of the things that you can see here is that nowhere in any

1647
01:28:01,400 --> 01:28:05,700
Of our equations, are we taking account of the different aspect ratio

1648
01:28:06,300 --> 01:28:07,000
of the screen?

1649
01:28:07,000 --> 01:28:07,500
Right?

1650
01:28:08,000 --> 01:28:12,200
And think about this and just just make sure that we appreciate all

1651
01:28:12,200 --> 01:28:13,200
the different parts of it.

1652
01:28:15,400 --> 01:28:19,300
When we are talking about coordinates, when we draw to the screen,

1653
01:28:19,300 --> 01:28:22,000
there are more pixels and X than there are in y.

1654
01:28:22,000 --> 01:28:22,300
Right?

1655
01:28:22,300 --> 01:28:25,000
Most of the time when we're talking about display, it's going to be

1656
01:28:25,000 --> 01:28:27,000
like a 1080p display or something, like this.

1657
01:28:27,400 --> 01:28:30,500
It's going to be like 16 by 9 aspect ratio.

1658
01:28:31,300 --> 01:28:35,000
And so part of the stuff that happens.

1659
01:28:37,300 --> 01:28:41,400
In this process, right, and you can see it happening.

1660
01:28:41,500 --> 01:28:43,600
Well, let's go back down here.

1661
01:28:44,900 --> 01:28:46,900
Part of what is kind of interesting about this.

1662
01:28:46,900 --> 01:28:50,200
If you think about this normalized device coordinates face, where

1663
01:28:50,200 --> 01:28:56,500
everything's negative 1 to 1, well, the negative 1 to 1 in X is

1664
01:28:56,500 --> 01:29:02,100
actually representing a wider swath of world space than the negative 1

1665
01:29:02,100 --> 01:29:03,400
to 1 in y.

1666
01:29:03,700 --> 01:29:06,600
And the reason for that is it's about to get blown back.

1667
01:29:06,800 --> 01:29:09,000
Out to a larger width.

1668
01:29:10,700 --> 01:29:15,300
And so, when we produce our negative 1 to 1 in X and our negative, 1

1669
01:29:15,300 --> 01:29:19,800
to 1, and why we didn't have to care about that here.

1670
01:29:20,100 --> 01:29:24,200
And the reason that we didn't have to care about that here was because

1671
01:29:24,200 --> 01:29:26,300
we were never producing normalized.

1672
01:29:26,300 --> 01:29:30,400
Device coordinates, we never squished our world into a negative 1 to 1

1673
01:29:30,400 --> 01:29:34,200
Cube like opengl demands that we do, right?

1674
01:29:35,500 --> 01:29:40,000
So what happened and how we were compensating for this and opengl is

1675
01:29:40,500 --> 01:29:44,100
We're dividing by the with the head of time and the height ahead of

1676
01:29:44,100 --> 01:29:46,000
time in our Matrix.

1677
01:29:46,200 --> 01:29:50,100
So that when opens yell multiplied it again on the other side, it

1678
01:29:50,100 --> 01:29:51,000
undid it.

1679
01:29:52,300 --> 01:29:52,900
Right.

1680
01:29:52,900 --> 01:29:58,400
So, we were effectively fighting opengl to prevent its it's

1681
01:29:58,400 --> 01:29:59,900
multiplication by

1682
01:30:00,000 --> 01:30:03,600
Width and height from producing an aspect ratio Warp.

1683
01:30:05,300 --> 01:30:08,500
And just to hammer this point home, let's say we haven't done that,

1684
01:30:08,900 --> 01:30:09,400
right?

1685
01:30:09,500 --> 01:30:12,000
Let's say that they were both done by the width.

1686
01:30:12,000 --> 01:30:14,500
Well, here is what we'd get, right?

1687
01:30:16,900 --> 01:30:21,000
So you can hopefully you can appreciate their that what we're

1688
01:30:21,000 --> 01:30:24,700
essentially doing was fighting the normalized device coordinates to

1689
01:30:24,700 --> 01:30:28,100
make sure that the normalized device coordinates wouldn't produce a

1690
01:30:28,100 --> 01:30:31,900
warped aspect ratio when our image was displayed to the screen.

1691
01:30:32,200 --> 01:30:34,400
So we need to be aware of that.

1692
01:30:34,400 --> 01:30:39,400
Now when we when we construct our projection Matrix because we need to

1693
01:30:39,400 --> 01:30:43,500
take into account that exact same thing, right?

1694
01:30:44,500 --> 01:30:47,200
So where did our, where did we go here?

1695
01:30:47,200 --> 01:30:48,700
I don't even know where I was.

1696
01:30:48,700 --> 01:30:50,600
I'm too.

1697
01:30:50,700 --> 01:30:51,300
There we go.

1698
01:30:51,300 --> 01:30:51,800
Here it is.

1699
01:30:53,200 --> 01:31:00,300
So we need to be aware of that aspect ratio problem and we've got too

1700
01:31:00,300 --> 01:31:03,700
much stuff going on right now because some of our stuff, just all

1701
01:31:03,700 --> 01:31:05,100
multiplies out.

1702
01:31:05,100 --> 01:31:07,900
If you think about what's actually happening because we're sort of

1703
01:31:07,900 --> 01:31:10,800
doing things that we don't need to be doing because we're doing them

1704
01:31:10,800 --> 01:31:11,500
than undoing them.

1705
01:31:11,500 --> 01:31:14,100
So opengl can redo them and all that sort of stuff, right?

1706
01:31:14,600 --> 01:31:18,600
So let's start very simply and let's try to move some of these things

1707
01:31:18,600 --> 01:31:23,700
that we're doing over to the open GL projection Matrix just very

1708
01:31:23,700 --> 01:31:24,700
carefully, right?

1709
01:31:26,400 --> 01:31:30,000
So let's see here is our P coordinates that are coming out, right?

1710
01:31:30,100 --> 01:31:32,500
And you can see we have our camera, transform screen Center,

1711
01:31:33,700 --> 01:31:35,200
That's being adjusted in.

1712
01:31:35,900 --> 01:31:39,500
Now, what I want to do is see, can we remove the camera, transform

1713
01:31:39,500 --> 01:31:40,800
screen center, right?

1714
01:31:40,800 --> 01:31:44,100
Can I just get rid of that entirely, right?

1715
01:31:45,000 --> 01:31:47,600
And so what would happen if I just get rid of the camera, transform

1716
01:31:47,600 --> 01:31:49,100
scream center, right?

1717
01:31:49,500 --> 01:31:52,300
And then I multiply, and then I run the game.

1718
01:31:52,600 --> 01:31:56,300
Well, as you can see, you know, I don't really get any ill effects

1719
01:31:56,300 --> 01:32:00,500
other than just the fact that it isn't the center of the world right

1720
01:32:00,500 --> 01:32:00,600
now.

1721
01:32:00,600 --> 01:32:03,000
The center of the camera view, anyway, is now at

1722
01:32:03,300 --> 01:32:06,200
Zero instead of the center of the screen because I'm not doing that

1723
01:32:06,200 --> 01:32:07,300
offset, right.

1724
01:32:07,600 --> 01:32:11,800
But the only reason I had to do that offset in the opengl path was

1725
01:32:11,800 --> 01:32:14,900
because I had, you know, that's how we were doing it for the software

1726
01:32:14,900 --> 01:32:20,000
renderer and now in the opengl path, we've got the -1 -1 to compensate

1727
01:32:20,000 --> 01:32:22,800
so it was doing that offset again, right?

1728
01:32:24,100 --> 01:32:27,300
So, if I just play with these values, right?

1729
01:32:27,900 --> 01:32:32,800
I can produce a version of that transform, that doesn't have that

1730
01:32:32,800 --> 01:32:33,700
problem, right?

1731
01:32:33,900 --> 01:32:34,700
That reproduces.

1732
01:32:34,700 --> 01:32:35,900
What we had before.

1733
01:32:37,000 --> 01:32:42,900
Now I, of course, since we don't have, I'm going to have to go ahead

1734
01:32:42,900 --> 01:32:46,600
and say I don't have any idea why we're getting that Ridiculousness

1735
01:32:46,600 --> 01:32:46,900
there?

1736
01:32:46,900 --> 01:32:51,400
Oh, probably because our sorting is still using those values as well.

1737
01:32:51,400 --> 01:32:53,500
So yeah, until we turn on the z-buffer.

1738
01:32:53,700 --> 01:32:56,900
Are sorting is going to be nuts, but anyway, you can see that our

1739
01:32:56,900 --> 01:32:59,300
transform anyway is still correct.

1740
01:33:00,000 --> 01:33:01,100
I apologize, mr.

1741
01:33:01,100 --> 01:33:03,300
Sorter, you're getting complete nonsense now.

1742
01:33:03,600 --> 01:33:06,400
So we're going to be flickering like crazy until we turn on.

1743
01:33:06,600 --> 01:33:07,800
Just a z-buffer for that.

1744
01:33:07,900 --> 01:33:08,800
But what do you do?

1745
01:33:10,500 --> 01:33:14,200
In fact, what I could do is just turn the sort off entirely I suppose

1746
01:33:14,600 --> 01:33:16,000
because it's not really going to do anything anymore.

1747
01:33:16,000 --> 01:33:20,600
But anyway, so you can see right there that that simplified what we

1748
01:33:20,600 --> 01:33:21,900
were doing for starters.

1749
01:33:22,300 --> 01:33:24,400
Because right there we've kind of got this.

1750
01:33:25,800 --> 01:33:29,800
We've got a solution there which means that our transfer Matrix no

1751
01:33:29,800 --> 01:33:32,300
longer has to be fighting a thing.

1752
01:33:32,300 --> 01:33:36,200
We were doing in our project, in our sort of offline, projection part

1753
01:33:36,200 --> 01:33:39,200
here or not offline production, I should say our render group

1754
01:33:39,200 --> 01:33:40,000
projection stuff.

1755
01:33:40,100 --> 01:33:42,500
As opposed to the open GL, projection stuff, right?

1756
01:33:43,600 --> 01:33:44,500
So that's kind of nice.

1757
01:33:45,000 --> 01:33:46,200
Let's take a look now.

1758
01:33:47,500 --> 01:33:50,900
A little more deeply here at what we're doing in terms of outputting

1759
01:33:51,100 --> 01:33:52,000
the result P.

1760
01:33:52,200 --> 01:33:55,900
So we're going to have to start producing 3D coordinates obviously.

1761
01:33:59,800 --> 01:34:02,200
If we ever want our perspective, divide and stuff to happen.

1762
01:34:04,100 --> 01:34:07,700
And, you know, we're gonna have to look at what's going on with scale

1763
01:34:07,700 --> 01:34:08,600
and all these are the sorts of things.

1764
01:34:08,600 --> 01:34:11,800
So, we're going to take this very slowly but at least we got rid of

1765
01:34:11,800 --> 01:34:12,500
one of those things there.

1766
01:34:12,700 --> 01:34:14,000
So now let's take a look at the m.

1767
01:34:14,000 --> 01:34:17,900
2 pixels part of this nanometers to pixels is something that's telling

1768
01:34:17,900 --> 01:34:22,800
us about the size of the world, relative to the size of the display.

1769
01:34:22,900 --> 01:34:23,400
Right?

1770
01:34:24,200 --> 01:34:29,600
And what you can see here is that m 2 pixels is actually getting, its

1771
01:34:29,600 --> 01:34:30,700
is actually doing work.

1772
01:34:30,800 --> 01:34:32,800
Because this within this height here,

1773
01:34:33,800 --> 01:34:39,100
That were dividing by those are getting sort of undone, if you will by

1774
01:34:39,100 --> 01:34:39,900
opengl later.

1775
01:34:39,900 --> 01:34:43,200
So, this with and this height are basically nullified by opengl as

1776
01:34:43,200 --> 01:34:47,600
multiplication by the width and the height later, right?

1777
01:34:48,600 --> 01:34:53,500
However, one thing that we could look at here is to realize that the

1778
01:34:53,500 --> 01:35:00,600
number of pixels that were using in this case is represented,

1779
01:35:00,600 --> 01:35:03,000
obviously by opengl

1780
01:35:03,100 --> 01:35:06,800
Who is open jails multiplication by the width.

1781
01:35:07,400 --> 01:35:13,300
So we can probably unwind our knowledge of pixels out of this routine,

1782
01:35:13,300 --> 01:35:17,400
potentially entirely by just taking advantage of the fact that opengl

1783
01:35:17,400 --> 01:35:20,300
has to be multiplied by the number of pixels at the end anyway.

1784
01:35:20,900 --> 01:35:25,200
So although we have to know something about the scale of our world in

1785
01:35:25,200 --> 01:35:29,000
general, we don't really have to know anything about its relationship

1786
01:35:29,000 --> 01:35:32,700
to pixels because the multiplication by pixels is going to happen at

1787
01:35:32,700 --> 01:35:33,000
the end.

1788
01:35:33,700 --> 01:35:36,400
Right anyway.

1789
01:35:36,600 --> 01:35:42,200
So if we were to remove the width and the height from here and just

1790
01:35:42,200 --> 01:35:45,300
talk about the difference between the width and the height to correct

1791
01:35:45,300 --> 01:35:51,600
for the aspect ratio, then we would be able to create something where

1792
01:35:51,600 --> 01:35:54,300
the pixels wasn't considered in here at all.

1793
01:35:54,300 --> 01:35:54,800
Right?

1794
01:35:54,900 --> 01:35:59,300
So let's take a little bit of a look at what I mean by that.

1795
01:35:59,500 --> 01:35:59,800
So

1796
01:36:00,000 --> 01:36:03,100
Where are we specifying or m, 2 pixels value?

1797
01:36:03,100 --> 01:36:06,700
I believe that gets passed in and so let me just take a look here.

1798
01:36:06,900 --> 01:36:08,700
M, 2 pixels.

1799
01:36:15,400 --> 01:36:19,300
That is not in there.

1800
01:36:19,300 --> 01:36:20,900
Where is that?

1801
01:36:25,100 --> 01:36:28,600
I don't know where we specify this.

1802
01:36:31,700 --> 01:36:34,000
Oops, here you go.

1803
01:36:35,100 --> 01:36:36,800
So you can see what we're doing here.

1804
01:36:36,800 --> 01:36:40,700
We've got width in pixels / with the monitor, right?

1805
01:36:41,900 --> 01:36:45,500
And we call that in get standard camera params and we're passing the

1806
01:36:45,500 --> 01:36:46,400
width in pixels.

1807
01:36:46,900 --> 01:36:50,600
So let's just quickly just math wise and I think you'll see what I

1808
01:36:50,600 --> 01:36:51,000
mean.

1809
01:36:51,000 --> 01:36:53,400
As soon as I read out this equation, it should be relatively obvious.

1810
01:36:53,600 --> 01:36:55,300
Let's just see math wise, what that's doing.

1811
01:36:55,500 --> 01:36:59,100
So we have M to pixels that's width in pixels over with the monitor.

1812
01:36:59,200 --> 01:37:01,200
So that's with of pixels over with of mom.

1813
01:37:02,200 --> 01:37:02,700
Right?

1814
01:37:03,500 --> 01:37:04,500
That's what we're talking about here.

1815
01:37:05,600 --> 01:37:11,000
So that's m 2 pixels in the actual case where we're out putting our

1816
01:37:11,000 --> 01:37:11,700
coordinates here.

1817
01:37:11,700 --> 01:37:12,600
Here's our result P.

1818
01:37:12,600 --> 01:37:16,200
We've got me restrictions time, projected, X Y, we are multiplying by

1819
01:37:16,200 --> 01:37:17,900
that m, 2 pixels value.

1820
01:37:18,400 --> 01:37:18,800
Okay?

1821
01:37:19,000 --> 01:37:23,100
So the P that we are putting down to opengl is, is starting off being

1822
01:37:23,100 --> 01:37:25,000
multiplied by this coefficient, right?

1823
01:37:25,100 --> 01:37:28,400
So, whatever the point is, this is, well, I can just write it right

1824
01:37:28,400 --> 01:37:30,700
there, this is multiplying that point.

1825
01:37:32,300 --> 01:37:34,000
Then inside our opengl path.

1826
01:37:34,100 --> 01:37:34,800
What do we turn around?

1827
01:37:34,800 --> 01:37:35,700
I multiply it by.

1828
01:37:35,800 --> 01:37:39,200
Well, we multiply it by two over the with, right?

1829
01:37:39,600 --> 01:37:42,300
So we multiply it by 2 over the width in pixels

1830
01:37:43,500 --> 01:37:46,500
Look anything jump out at you there, right?

1831
01:37:46,600 --> 01:37:50,100
It's like, hey, that actually cancels out.

1832
01:37:52,700 --> 01:37:53,200
Right.

1833
01:37:57,600 --> 01:37:59,800
I mean, that's what's happening, right?

1834
01:38:00,300 --> 01:38:05,100
Opengl will then later X, the width of pixels again to put it back in,

1835
01:38:05,700 --> 01:38:06,200
right?

1836
01:38:06,600 --> 01:38:09,500
So even though we were sort of thinking of it as canceling, this

1837
01:38:09,500 --> 01:38:12,400
because we wanted to keep this really, we could think of it as these

1838
01:38:12,400 --> 01:38:14,700
two canceling and opengl doing that work.

1839
01:38:15,700 --> 01:38:18,600
So that would allow us to simplify things further and cancel these

1840
01:38:18,600 --> 01:38:19,000
out.

1841
01:38:19,000 --> 01:38:23,300
But there is a caveat and the caveat is, we haven't thought about the

1842
01:38:23,300 --> 01:38:25,300
fact that both the X and the Y are here.

1843
01:38:25,300 --> 01:38:25,700
And this is

1844
01:38:25,800 --> 01:38:26,700
I was trying to get to.

1845
01:38:26,900 --> 01:38:28,000
So here's the X.

1846
01:38:30,400 --> 01:38:31,600
And here is the why?

1847
01:38:41,500 --> 01:38:45,600
It doesn't cancel any more at this point, right?

1848
01:38:45,700 --> 01:38:50,600
So our x coordinate totally cancels our y coordinate does not.

1849
01:38:50,700 --> 01:38:54,800
It is left with the residual term and that residual term is the width

1850
01:38:54,800 --> 01:38:58,400
of the monitor over the height of the monitor, right?

1851
01:38:58,600 --> 01:38:59,800
And that is the ass.

1852
01:39:00,000 --> 01:39:01,300
Horatio correction.

1853
01:39:01,700 --> 01:39:04,700
That is the thing that when we were shrinking down into those

1854
01:39:04,700 --> 01:39:11,000
normalized - 121 coordinates, does the correct warp to ensure that we

1855
01:39:11,000 --> 01:39:12,000
are encompassing.

1856
01:39:12,000 --> 01:39:16,900
A wider swath in X then we are encompassing in y and you can see what

1857
01:39:16,900 --> 01:39:23,600
I mean by wider swath because wpx right in this case and wpy are the

1858
01:39:23,600 --> 01:39:24,500
things that are

1859
01:39:29,800 --> 01:39:37,700
I'm I'm at a loss for words here, because wpx is is bigger, let then

1860
01:39:37,700 --> 01:39:43,500
wpy, this will mean that this will produce a what a bigger

1861
01:39:43,500 --> 01:39:45,200
multiplication effect on the why.

1862
01:39:45,200 --> 01:39:48,700
Right now again intuitively, you would think well, a bigger

1863
01:39:48,700 --> 01:39:51,800
multiplication effect in why produces a wider swath, and why, it

1864
01:39:51,800 --> 01:39:52,500
doesn't.

1865
01:39:52,500 --> 01:39:56,500
And the reason is because remember the negative 1 to 1 bounds, are

1866
01:39:56,500 --> 01:39:59,200
what determines, what we'll see on the screen, so if

1867
01:39:59,400 --> 01:40:05,200
Multiply y out bigger, we will select a smaller slice from it to be

1868
01:40:05,200 --> 01:40:05,800
viewed.

1869
01:40:07,300 --> 01:40:10,700
And so this is why I say it's very important to understand why I

1870
01:40:10,700 --> 01:40:14,100
wanted to talk about those normalized device coordinates so badly that

1871
01:40:14,100 --> 01:40:15,700
negative 1 to 1 Cube there.

1872
01:40:18,500 --> 01:40:22,400
And again, yeah, I wish I knew more about the origins of the 3D

1873
01:40:22,400 --> 01:40:24,400
Pipeline and why you did things certain ways.

1874
01:40:24,400 --> 01:40:28,100
I if we just had one of like the old SGI if like critically or

1875
01:40:28,100 --> 01:40:33,300
somebody or one of the old SGI guys was around, who wanted to talk to

1876
01:40:33,300 --> 01:40:33,600
us about it.

1877
01:40:33,600 --> 01:40:36,200
They could explain why they chose all these things.

1878
01:40:36,200 --> 01:40:36,700
Exactly.

1879
01:40:36,700 --> 01:40:38,900
The way they did, I'm sure they had very good reasons.

1880
01:40:39,400 --> 01:40:42,400
I don't know why they thought it was so important to put them into

1881
01:40:42,400 --> 01:40:43,400
normalized device coordinates.

1882
01:40:43,400 --> 01:40:46,500
But just because that that is how the 3D.

1883
01:40:47,000 --> 01:40:51,800
Works now in Hardware, you have to always be aware that your intuition

1884
01:40:51,800 --> 01:40:56,200
when you writing a prospective Matrix might be to think about creating

1885
01:40:56,400 --> 01:40:59,700
the screen coordinates, because that's what a software, rendering

1886
01:40:59,700 --> 01:41:03,700
person might have thought of, and you saw how it naturally came about,

1887
01:41:03,700 --> 01:41:06,300
that way, when we just wrote Our software renderer without thinking

1888
01:41:06,300 --> 01:41:07,700
about it too hard, right?

1889
01:41:08,700 --> 01:41:11,300
But that's not what happens in 3D pipeline, three pipelines about

1890
01:41:11,300 --> 01:41:15,600
compressing things into this Cube and so as a result, the exact

1891
01:41:15,600 --> 01:41:16,900
operation you would think to

1892
01:41:17,000 --> 01:41:17,400
Mix things.

1893
01:41:17,400 --> 01:41:18,800
Wider makes things smaller.

1894
01:41:19,500 --> 01:41:21,700
Okay but now let's take a look.

1895
01:41:21,700 --> 01:41:23,100
Can we just make this much?

1896
01:41:23,100 --> 01:41:25,000
Much simpler at that point, right?

1897
01:41:26,200 --> 01:41:29,900
Can we just simplify this out entirely?

1898
01:41:30,000 --> 01:41:33,900
So let's go ahead and take M to pixels and change that into some other

1899
01:41:33,900 --> 01:41:35,900
thing that isn't have nothing to do with that.

1900
01:41:36,500 --> 01:41:45,000
That is maybe a little bit more straightforward, right?

1901
01:41:47,100 --> 01:41:48,700
So maybe what we can say is, okay.

1902
01:41:48,700 --> 01:41:51,400
With the monitor is all we're going to have here, right?

1903
01:41:51,600 --> 01:41:57,100
M 2 pixels is not going to be involved at all and we'll just have

1904
01:41:57,500 --> 01:41:59,800
we'll just have with the monitor in here as the

1905
01:42:00,000 --> 01:42:02,900
The thing and then all we have to do over here.

1906
01:42:02,900 --> 01:42:04,600
Since we have the width and height are ready.

1907
01:42:05,200 --> 01:42:07,700
All we have to do over here is we just have to make sure that we

1908
01:42:07,700 --> 01:42:11,700
account for our aspect ratio adjustment, right?

1909
01:42:11,900 --> 01:42:13,000
And that's all we would have to do.

1910
01:42:14,400 --> 01:42:16,600
So let's go ahead and try that and see if we can make that work.

1911
01:42:17,000 --> 01:42:18,400
So accounting for that again.

1912
01:42:18,700 --> 01:42:22,400
We know that in here are safe ratio, one now would just be, there's

1913
01:42:22,400 --> 01:42:23,300
nothing to /.

1914
01:42:23,300 --> 01:42:25,000
That's just that's just not there anymore.

1915
01:42:25,700 --> 01:42:29,500
But in the case of where we've got that, the height again, we need to

1916
01:42:29,500 --> 01:42:33,400
actually perform the ratio W, PX / WP Y, in order to get the result

1917
01:42:33,400 --> 01:42:35,400
back again that we wanted to.

1918
01:42:35,500 --> 01:42:38,700
And so that would have to be, I believe the width divided by the

1919
01:42:38,700 --> 01:42:41,200
height in order to produce that Rio.

1920
01:42:41,200 --> 01:42:41,700
Wait.

1921
01:42:45,000 --> 01:42:49,100
but this is in the bottom of safe ratio, so it should actually be

1922
01:42:50,600 --> 01:42:52,400
There because this is a divided already.

1923
01:42:52,800 --> 01:42:55,300
So we want the with on top and we want the height on bottom to

1924
01:42:55,300 --> 01:43:00,200
reproduce this equation that we're looking at here and then I think we

1925
01:43:00,200 --> 01:43:00,800
would be okay.

1926
01:43:02,000 --> 01:43:03,800
That right?

1927
01:43:04,900 --> 01:43:07,500
And so now we have to do is make our m 2 pixels.

1928
01:43:08,000 --> 01:43:14,000
Actually not represent m, 2 pixels anymore and we don't remember

1929
01:43:14,000 --> 01:43:16,300
exactly where we were setting that.

1930
01:43:16,300 --> 01:43:19,900
Again pixels, I had it just a moment ago.

1931
01:43:29,600 --> 01:43:31,200
I was just looking at this.

1932
01:43:31,900 --> 01:43:32,400
There it is.

1933
01:43:35,000 --> 01:43:38,100
And so now you just have to have our m, 2 pixels, no longer take that

1934
01:43:38,100 --> 01:43:39,100
into account.

1935
01:43:39,300 --> 01:43:43,000
So if I was to go ahead and do that, where I no longer take with them

1936
01:43:43,000 --> 01:43:46,400
pixels into account, we can see whether we get what we would expect

1937
01:43:46,400 --> 01:43:48,000
and we do, right?

1938
01:43:48,200 --> 01:43:51,700
And notice that we are not warped at all at this point either we do

1939
01:43:51,700 --> 01:43:56,700
not have any sort of sort of weird, you know, contraction of the

1940
01:43:56,700 --> 01:43:58,000
screen or anything like that.

1941
01:43:59,100 --> 01:43:59,500
Okay.

1942
01:43:59,600 --> 01:44:02,900
So again that's kind of really nice because we're still simplifying

1943
01:44:02,900 --> 01:44:03,500
this down.

1944
01:44:04,000 --> 01:44:07,200
That we now have our meters to pixels is really just all we have.

1945
01:44:07,200 --> 01:44:11,700
There is now a transform, that talks about the width of the monitor,

1946
01:44:11,700 --> 01:44:14,700
so that we can sort of get a little bit of an idea of what's going on

1947
01:44:14,700 --> 01:44:15,000
there.

1948
01:44:15,000 --> 01:44:18,500
And that's just a constant multiplication that we're doing there in

1949
01:44:18,500 --> 01:44:19,200
order to

1950
01:44:21,000 --> 01:44:23,200
try and produce a reasonable effect there, right?

1951
01:44:28,100 --> 01:44:28,500
Okay.

1952
01:44:29,900 --> 01:44:34,700
So really, all we've got now is just a simple scale factor.

1953
01:44:36,500 --> 01:44:38,400
That's being applied that in no way.

1954
01:44:38,400 --> 01:44:42,100
Has any like that?

1955
01:44:42,100 --> 01:44:45,100
No longer has any bearing on any kind of input, right?

1956
01:44:45,200 --> 01:44:47,600
So when we call get standard camera, parameters, really?

1957
01:44:47,600 --> 01:44:51,700
All we're importing now is the focal length and this is really just a

1958
01:44:51,700 --> 01:44:55,100
scale factor that we determined in terms of what we thought was a

1959
01:44:55,100 --> 01:44:57,100
reasonable view on the world.

1960
01:44:57,500 --> 01:44:59,900
And so in some sense with the monitor, I don't even

1961
01:45:00,000 --> 01:45:01,200
If that gets used anywhere.

1962
01:45:03,700 --> 01:45:07,800
It doesn't right and so we can sort of stopped even talking about that

1963
01:45:07,800 --> 01:45:12,700
outside of outside of this context, right?

1964
01:45:12,800 --> 01:45:18,300
We can just basically say okay we've got a width of monitor

1965
01:45:24,900 --> 01:45:28,500
And we're producing this result this way for our Majors to pixels and

1966
01:45:28,500 --> 01:45:29,100
really m.

1967
01:45:29,100 --> 01:45:33,900
2 pixels now is not m 2 pixels, it's just our straightforward scaling

1968
01:45:33,900 --> 01:45:34,400
factor.

1969
01:45:34,800 --> 01:45:38,700
In fact, you know, I don't really sure what we would want to call

1970
01:45:38,700 --> 01:45:42,300
this, but maybe it would just be world scale or something like that,

1971
01:45:42,600 --> 01:45:46,400
because we could set it really arbitrarily however, we wanted to set

1972
01:45:46,400 --> 01:45:47,100
it, right?

1973
01:45:48,400 --> 01:45:49,600
And we should get the same results.

1974
01:45:50,100 --> 01:45:53,000
Now, it's important to just double-check to make sure that our

1975
01:45:53,000 --> 01:45:56,100
projection still does the thing that it's supposed to do, which is no

1976
01:45:56,100 --> 01:46:00,500
matter how esoteric, the window shape, that it always kind of does a

1977
01:46:00,500 --> 01:46:04,700
reasonable fit of what reviewing and keeps the size correct.

1978
01:46:04,700 --> 01:46:08,800
And it does, so that's important and we're still maintaining that.

1979
01:46:08,800 --> 01:46:09,400
So that's good.

1980
01:46:09,900 --> 01:46:11,400
But that's really all we need to do there.

1981
01:46:11,800 --> 01:46:14,500
Now, we're coming into the end of today.

1982
01:46:14,500 --> 01:46:17,600
We've only got about 15 minutes left, I think.

1983
01:46:17,800 --> 01:46:21,400
And so I don't want to start doing too much probably with your

1984
01:46:21,400 --> 01:46:24,200
perspective, divide but I do want to take a quick look.

1985
01:46:26,300 --> 01:46:27,500
First of all, we should rename this.

1986
01:46:27,500 --> 01:46:31,000
So instead of m 2 pixels, I think we'll just call this world scale.

1987
01:46:36,700 --> 01:46:38,700
and then wherever we were using that before,

1988
01:46:46,900 --> 01:46:51,100
We no longer have to have that in anything and let's also make sure

1989
01:46:51,100 --> 01:46:54,100
that because I don't actually know for sure, let's make sure that our

1990
01:46:54,100 --> 01:46:56,500
cutscenes are rendering properly since that's the other people.

1991
01:46:56,800 --> 01:46:59,200
That's that's a sort of a separate piece of code that uses the same

1992
01:46:59,200 --> 01:47:01,800
Graphics Pipeline and we don't want to be in a situation where for

1993
01:47:01,800 --> 01:47:05,100
some reason our cutscenes are no longer working properly.

1994
01:47:07,100 --> 01:47:08,100
So that all looks good.

1995
01:47:10,500 --> 01:47:15,400
okay, so once we've got that straightened away, the next thing to ask

1996
01:47:15,400 --> 01:47:20,200
is well okay if we're sort of for starting to simplify

1997
01:47:22,500 --> 01:47:24,200
This part of that transform process.

1998
01:47:26,600 --> 01:47:28,400
We're quickly going to get into a position here.

1999
01:47:28,400 --> 01:47:31,400
Like we're really all we've got is the world scale in here.

2000
01:47:31,400 --> 01:47:35,100
We could roll that world scale out into the opengl transform and

2001
01:47:35,100 --> 01:47:40,000
probably we should will have to take a look about at doing that at a

2002
01:47:40,200 --> 01:47:41,100
slightly later step.

2003
01:47:41,200 --> 01:47:44,100
There's no particular reason for us to do that now but it's free for

2004
01:47:44,100 --> 01:47:46,400
us to put it in there so we should obviously put it in there and we

2005
01:47:46,400 --> 01:47:50,000
will but you can see the next like systemic thing.

2006
01:47:50,000 --> 01:47:52,800
We actually would want to do probably is to start to tackle.

2007
01:47:53,200 --> 01:47:55,700
This line here and that line is obviously

2008
01:47:55,800 --> 01:47:58,400
A all about that perspective, divide.

2009
01:47:58,500 --> 01:47:59,800
And so now we have to start

2010
01:48:00,000 --> 01:48:06,000
Thinking about how we're going to get this data down to our output

2011
01:48:06,000 --> 01:48:06,500
code.

2012
01:48:06,700 --> 01:48:10,500
And I don't even know if right now, if we're even sending down 3D

2013
01:48:10,500 --> 01:48:13,700
coordinates as part of our of our render group information.

2014
01:48:14,000 --> 01:48:16,700
And so I'm going to have to take a look here when we do in Trenton

2015
01:48:16,700 --> 01:48:17,200
bitmap.

2016
01:48:17,200 --> 01:48:18,900
Yeah it doesn't look like we even are.

2017
01:48:19,300 --> 01:48:23,200
And so right now you know we said send down an X and Y axis but we

2018
01:48:23,200 --> 01:48:27,100
don't send down a z coordinate at all.

2019
01:48:27,200 --> 01:48:29,800
We send down a color but but only two

2020
01:48:31,100 --> 01:48:32,800
Just an X and Y for, for position.

2021
01:48:33,100 --> 01:48:36,500
And so what we want to do on the bitmaps now is we're going to want to

2022
01:48:36,500 --> 01:48:39,700
sort of like expand those out to having a 3D coordinate.

2023
01:48:39,700 --> 01:48:43,000
And basically everywhere in here that we were doing this, we probably

2024
01:48:43,000 --> 01:48:44,500
want to do that.

2025
01:48:46,000 --> 01:48:48,200
Since this has become will flee out of date at this point, we're

2026
01:48:48,200 --> 01:48:52,100
probably going to have to get rid of this guy because would have to

2027
01:48:52,100 --> 01:48:55,400
re-implement that entirely if we ever wanted to play with it again.

2028
01:48:55,400 --> 01:48:55,900
Anyway.

2029
01:48:56,400 --> 01:48:59,600
So we just really only have two things which are rectangles and

2030
01:48:59,600 --> 01:49:00,800
bitmaps at the moment.

2031
01:49:00,800 --> 01:49:04,300
And so I'm just going to expand both of them to have three-dimensional

2032
01:49:04,300 --> 01:49:06,500
coordinate instead of a two dimensional coordinate.

2033
01:49:06,600 --> 01:49:09,500
And then I have to deal with the Fallout from that.

2034
01:49:11,500 --> 01:49:12,600
I know what just happened there.

2035
01:49:13,700 --> 01:49:14,500
So

2036
01:49:15,300 --> 01:49:17,800
So I think it's trying to load some things.

2037
01:49:17,800 --> 01:49:18,700
I don't know what is trying to learn.

2038
01:49:19,900 --> 01:49:25,100
So let me go ahead and first delete those, those coordinates system

2039
01:49:25,200 --> 01:49:26,500
cases that are there.

2040
01:49:26,500 --> 01:49:31,300
In fact, Let me let me just delete that entry entirely, so it's just

2041
01:49:31,300 --> 01:49:32,400
not there anymore.

2042
01:49:34,600 --> 01:49:39,600
And then we'll sort of go through and try to make sure that we've got

2043
01:49:41,100 --> 01:49:44,700
here quarter system that out of there.

2044
01:49:48,400 --> 01:49:53,300
All right, so I think we're all good.

2045
01:49:53,300 --> 01:49:56,300
Now we just have to go through and make sure that now everywhere that

2046
01:49:56,300 --> 01:49:59,800
we were producing 2D coordinate, we're going to produce a 3D

2047
01:49:59,800 --> 01:50:02,600
coordinate and that shouldn't be too hard because they're typically

2048
01:50:02,600 --> 01:50:06,600
all going through that one routine which is entity basis, P results.

2049
01:50:06,600 --> 01:50:10,600
I'm just going to update that to return a 3D coordinate and I'm going

2050
01:50:10,600 --> 01:50:14,500
to come in here and I'm going to say, all right, I need to return 3D

2051
01:50:14,500 --> 01:50:18,300
coordinates so instead of just having the projected XYZ, I'm going

2052
01:50:18,400 --> 01:50:23,800
I need to also have the projected Z coming through here except we're

2053
01:50:23,800 --> 01:50:27,200
about to undo the fact that it gets projected at all.

2054
01:50:27,200 --> 01:50:29,000
But that makes it pretty easy.

2055
01:50:29,000 --> 01:50:32,000
Because now we're just all were really doing is saying, hey, let's get

2056
01:50:32,000 --> 01:50:33,400
all the projected values in there.

2057
01:50:33,400 --> 01:50:37,700
So I can just basically say that and I will get that P out.

2058
01:50:37,900 --> 01:50:41,100
This on the other hand is going to have to have a little more

2059
01:50:41,100 --> 01:50:42,100
information in it.

2060
01:50:42,300 --> 01:50:45,500
Of course, this stuff will also will probably go ahead and fix the

2061
01:50:45,500 --> 01:50:46,400
orthographic stuff.

2062
01:50:47,400 --> 01:50:48,600
To work through the open gym.

2063
01:50:48,600 --> 01:50:50,000
I choose quickly as well.

2064
01:50:50,000 --> 01:50:53,100
So that's going to that's going to want to look more like this.

2065
01:50:53,100 --> 01:50:57,100
Anyway, we'll remove the screen centering operation from it, but we

2066
01:50:57,100 --> 01:50:59,900
will need to multiply the entire P like that as well.

2067
01:51:00,800 --> 01:51:04,700
Okay, so that's what we want to do for returning these.

2068
01:51:04,800 --> 01:51:07,400
We now have to take a look at any of these things that are working

2069
01:51:07,400 --> 01:51:07,700
here.

2070
01:51:07,700 --> 01:51:10,200
Let's take a look at these.

2071
01:51:10,400 --> 01:51:13,500
So these sort of things like the screen area and the Sprite bounds,

2072
01:51:13,900 --> 01:51:16,100
those can now also be removed.

2073
01:51:16,200 --> 01:51:19,000
So we don't really need to update that code because since the Z buffer

2074
01:51:19,000 --> 01:51:22,200
will be in effect, these are not required anymore.

2075
01:51:22,600 --> 01:51:25,700
So this screen area can literally just be like a no rectangle that we

2076
01:51:25,700 --> 01:51:27,100
don't actually care about.

2077
01:51:28,900 --> 01:51:33,200
And that will be fine and we can like I said, if we have any problems

2078
01:51:33,200 --> 01:51:35,400
with sorting, we can just turn it off entirely because we're not going

2079
01:51:35,400 --> 01:51:39,500
to use it anymore and so we don't have to worry too much about that as

2080
01:51:39,500 --> 01:51:40,500
any real.

2081
01:51:41,000 --> 01:51:43,900
Real issue that's going to create a problem for us in any way.

2082
01:51:45,400 --> 01:51:51,000
alright, so now we're passing when we're coming down through here and

2083
01:51:51,000 --> 01:51:53,400
we've got our sort of

2084
01:51:55,200 --> 01:51:58,300
Our 3D coordinates that we want to start talking about here, which I'm

2085
01:51:58,300 --> 01:52:00,200
going to go ahead and, and put in.

2086
01:52:00,800 --> 01:52:03,300
We've got a bunch of problems because we were expecting everything to

2087
01:52:03,300 --> 01:52:03,800
be 2D.

2088
01:52:03,800 --> 01:52:09,400
So our x-axis y-axis stuff, again, is since all of that is in 2D, we

2089
01:52:09,400 --> 01:52:12,500
need to augment that to 3D now, that's not a big deal because we still

2090
01:52:12,500 --> 01:52:14,400
not using Z in any particular way here.

2091
01:52:14,400 --> 01:52:18,500
So our x axis that we get passed down, can be trivially expanded, you

2092
01:52:18,500 --> 01:52:23,200
know, to, a tattoo of a V3 by just pretending that there is no Z,

2093
01:52:23,200 --> 01:52:24,200
coordinate to it.

2094
01:52:24,400 --> 01:52:24,800
And then,

2095
01:52:25,000 --> 01:52:28,300
all of our math that was previously, you know, creating these Sprites

2096
01:52:28,500 --> 01:52:30,100
shapes, is it just

2097
01:52:32,000 --> 01:52:36,600
Just that I know we have this in here, but yeah, we'll just work.

2098
01:52:36,600 --> 01:52:37,600
So there isn't a lot.

2099
01:52:37,900 --> 01:52:39,400
There isn't much, we have to do there.

2100
01:52:39,900 --> 01:52:42,200
The same is true for some like this were drawing a rectangle and we

2101
01:52:42,200 --> 01:52:43,600
have a pee here again.

2102
01:52:43,600 --> 01:52:46,400
It's really just a question of anything that was previously just doing

2103
01:52:46,400 --> 01:52:49,800
an XY operation, can still do that exact same operation and just not

2104
01:52:49,800 --> 01:52:50,800
just don't change the Z.

2105
01:52:50,800 --> 01:52:53,400
Just keep the Z where it was, if you expand out into a rectangle, just

2106
01:52:53,400 --> 01:52:57,400
expand, the X&Y, don't change the Z and that's really all that

2107
01:52:57,400 --> 01:52:57,900
matters.

2108
01:52:59,800 --> 01:53:04,200
Okay, and so opengl rectangle now which is actually doing some of the

2109
01:53:04,200 --> 01:53:08,700
work there is going to have to have that that change as well.

2110
01:53:08,700 --> 01:53:13,600
Let me go ahead and finish this off and then we'll go ahead line.

2111
01:53:13,600 --> 01:53:18,800
Vertices draw a rectangle quickly and binary plus.

2112
01:53:19,000 --> 01:53:20,000
Where is that?

2113
01:53:20,000 --> 01:53:20,800
There it is.

2114
01:53:20,900 --> 01:53:22,600
What more here if you three.

2115
01:53:23,600 --> 01:53:25,400
Okay, there we go.

2116
01:53:27,900 --> 01:53:29,900
So, the opengl rectangle call.

2117
01:53:35,500 --> 01:53:36,300
Where is that?

2118
01:53:36,600 --> 01:53:39,100
There it is, is again going to have to take?

2119
01:53:41,600 --> 01:53:45,700
A Min P Animax be that rv3 is now because that's just kind of how it's

2120
01:53:45,700 --> 01:53:46,700
looking at the world.

2121
01:53:47,200 --> 01:53:53,000
And so what we can do is just ignore the Z entirely if we just want to

2122
01:53:53,000 --> 01:53:56,200
reproduce the exact results but since we want to start having that Z

2123
01:53:56,200 --> 01:53:59,100
carry through what I'm going to do here is just go ahead and pick one

2124
01:53:59,100 --> 01:53:59,800
of the two Z's.

2125
01:54:00,500 --> 01:54:02,000
So, we'll just say that will pick the mint.

2126
01:54:02,000 --> 01:54:06,500
Easy as the test as the coordinate for it, for the time being.

2127
01:54:07,100 --> 01:54:11,500
Although we might want to do something more fancy coming down in the

2128
01:54:11,500 --> 01:54:11,900
future.

2129
01:54:20,500 --> 01:54:22,000
All right, and let's see.

2130
01:54:22,000 --> 01:54:28,300
Opengl line vertices is the same routine.

2131
01:54:33,400 --> 01:54:33,900
We go.

2132
01:54:34,700 --> 01:54:36,100
And again, I'll just pick any, you know, what?

2133
01:54:36,100 --> 01:54:37,400
I really should probably do it this way.

2134
01:54:37,400 --> 01:54:39,000
It's a little nicer.

2135
01:54:39,200 --> 01:54:40,000
So, it's obvious.

2136
01:54:40,000 --> 01:54:40,700
What's going on?

2137
01:54:43,200 --> 01:54:45,000
But these are all drawn at a flat sea.

2138
01:54:50,400 --> 01:54:53,200
And again, it's just a really simple transform to just basically make

2139
01:54:54,100 --> 01:54:57,600
all of our stuff that was sort of flowing as a 2d Point flow of the 3D

2140
01:54:57,600 --> 01:54:59,700
point, but we're not even going to really use it yet.

2141
01:55:00,500 --> 01:55:06,000
We're just doing, just the basic the most basic stuff, they're right.

2142
01:55:18,700 --> 01:55:19,300
And there we go.

2143
01:55:21,200 --> 01:55:23,100
So finishing the cleanup here.

2144
01:55:23,100 --> 01:55:25,900
Again, we've got a couple of things which are still, you know, just

2145
01:55:25,900 --> 01:55:29,500
kind of we're passing things directly for for, you know,

2146
01:55:31,200 --> 01:55:32,800
Constructing explicit rectangles.

2147
01:55:32,800 --> 01:55:36,200
We're just getting rid of those and here we are in the software

2148
01:55:36,200 --> 01:55:38,900
renderer and the software under we can.

2149
01:55:38,900 --> 01:55:44,100
Of course if you want to just Nerf these at the moment, it's

2150
01:55:46,300 --> 01:55:46,800
Right.

2151
01:55:51,600 --> 01:55:54,500
And we'll have to do a bunch of updating the software and if you want

2152
01:55:54,500 --> 01:55:57,600
to suffer render the 3D stuff which you know, it's no big deal.

2153
01:55:57,600 --> 01:55:58,600
We can totally do that.

2154
01:55:59,200 --> 01:56:01,800
But again we don't really want to get bogged down in that at the

2155
01:56:01,800 --> 01:56:03,500
moment while we're working on this part of it.

2156
01:56:04,400 --> 01:56:07,200
So what did I do?

2157
01:56:07,200 --> 01:56:07,700
Wrong?

2158
01:56:08,600 --> 01:56:13,600
Draw a rectangle cannot convert argument three from V3.

2159
01:56:13,600 --> 01:56:19,400
Okay, that's probably because I did this backwards.

2160
01:56:21,300 --> 01:56:21,700
All right.

2161
01:56:21,700 --> 01:56:25,000
And so in theory now we're passing everything down as 3D but we're not

2162
01:56:25,000 --> 01:56:27,300
using the 3D in any way, right?

2163
01:56:27,600 --> 01:56:31,500
But at least we're getting those Z coordinates down right now.

2164
01:56:31,500 --> 01:56:35,400
What the Z coordinates actually are, of course, is a different matter

2165
01:56:36,200 --> 01:56:39,600
because we're not actually setting them to anything reasonable at the

2166
01:56:39,600 --> 01:56:41,500
moment, if I remember correctly.

2167
01:56:41,500 --> 01:56:44,000
I don't really even remember what those were getting set to.

2168
01:56:47,800 --> 01:56:48,500
It's just m.

2169
01:56:48,500 --> 01:56:49,500
2 pixels times.

2170
01:56:49,500 --> 01:56:50,400
The projected X Y.

2171
01:56:50,400 --> 01:56:51,200
So, it's already done.

2172
01:56:51,200 --> 01:56:55,000
The projection here, which is 1 over a distance to PC X.

2173
01:56:55,000 --> 01:56:59,900
The camera focal length x, the raw, x y, and so,

2174
01:57:00,000 --> 01:57:04,100
Assuming you know the next logical step and I just don't think I want

2175
01:57:04,100 --> 01:57:06,300
to do it with only three minutes left because we're going to want to

2176
01:57:06,300 --> 01:57:08,100
talk about more sickly, right?

2177
01:57:08,100 --> 01:57:11,500
Is just we're going to now going to want to put the Z value.

2178
01:57:11,500 --> 01:57:13,700
Is just going to be like distance 2pz.

2179
01:57:13,900 --> 01:57:16,400
And we're going to let this divide happen in opengl.

2180
01:57:16,400 --> 01:57:19,000
But in order to do that, we're also going to have to move the camera

2181
01:57:19,000 --> 01:57:20,200
focal length, and that sort of stuff.

2182
01:57:20,200 --> 01:57:24,300
We're probably gonna want to move those out as well.

2183
01:57:24,900 --> 01:57:27,400
But yeah, you can kind of see what's happening here.

2184
01:57:27,400 --> 01:57:29,800
It's not particularly confusing at all.

2185
01:57:30,800 --> 01:57:34,000
And in theory, you know, I don't know, I guess we could if we wanted

2186
01:57:34,000 --> 01:57:39,300
to just I don't think it is probably a bad idea but I'm just, you

2187
01:57:39,300 --> 01:57:40,300
know, we got a couple minutes.

2188
01:57:40,700 --> 01:57:46,400
We could try to sticking it in there and see now, I because I want to

2189
01:57:46,400 --> 01:57:48,300
give a complete description of why I would change the Matrix.

2190
01:57:48,300 --> 01:57:50,900
I don't want to just go change the Matrix on you, and then yeah.

2191
01:57:51,400 --> 01:57:54,600
So let's go ahead and go to the Q&A just a tad early.

2192
01:57:54,600 --> 01:57:59,200
And then next weekend, we can talk all about everything out.

2193
01:58:00,000 --> 01:58:03,000
How we multiply, how we address everything else?

2194
01:58:27,400 --> 01:58:31,800
Okay, so we have 10 cent in the explanation for homogeneous.

2195
01:58:31,800 --> 01:58:34,000
If you remember back in school now is kind of like homogeneous.

2196
01:58:34,000 --> 01:58:36,100
I'm not really sure where the term actually comes from.

2197
01:58:38,400 --> 01:58:43,500
If that makes sense and and I was like, if pseudonym 73 was here, he

2198
01:58:43,500 --> 01:58:44,300
could answer that for us.

2199
01:58:44,300 --> 01:58:47,200
He's off in our resident math expert, but I think the stream is not at

2200
01:58:47,200 --> 01:58:47,500
a time.

2201
01:58:47,500 --> 01:58:51,300
He can attend anymore, unfortunately but Rift and rode in with the

2202
01:58:51,600 --> 01:58:55,400
answer for us he says concerning the homogeneous use the Madras word

2203
01:58:55,400 --> 01:58:56,800
indeed comes from mathematics.

2204
01:58:56,800 --> 01:58:59,200
Homogeneous is used for mathematical object, that have some

2205
01:58:59,200 --> 01:59:04,600
scalability property here, x y z, 1 and 2.

2206
01:59:04,600 --> 01:59:05,300
What 2 X2?

2207
01:59:05,300 --> 01:59:07,900
Y2, Z2 represent the same point in space.

2208
01:59:09,300 --> 01:59:12,500
Therefore the usage of - coordinates into - matrices here so that

2209
01:59:12,500 --> 01:59:13,500
makes perfect sense.

2210
01:59:13,500 --> 01:59:14,400
Then if that's the case.

2211
01:59:14,400 --> 01:59:18,200
So in math parlance they're just talking about that property like are

2212
01:59:18,200 --> 01:59:25,300
saying where you do the / W to normalize everything down to 1 W,

2213
01:59:25,300 --> 01:59:28,000
coordinate of 1 and everything else gets divided by W.

2214
01:59:28,100 --> 01:59:32,000
You can see why that obviously means that if you had a thing that was

2215
01:59:32,000 --> 01:59:37,900
like 3 x 3 y 3z + 3 in the W, coordinate is the same as 2 x 2, Y, 2 Z,

2216
01:59:37,900 --> 01:59:38,100
and

2217
01:59:38,200 --> 01:59:41,000
To in the W coordinate because they're all gonna get / W anyway.

2218
01:59:41,200 --> 01:59:47,100
So those all represent the same point and so Rift and was saying that

2219
01:59:47,100 --> 01:59:51,700
that term homogeneous in math implies that.

2220
01:59:51,700 --> 01:59:54,400
Now why homogeneous is the word that would be used for that?

2221
01:59:54,400 --> 01:59:56,600
I have no idea but at least, there we go.

2222
01:59:56,600 --> 01:59:59,400
So thank you very much for writing that in because I was not sure

2223
01:59:59,400 --> 01:59:59,800
about that.

2224
02:00:03,300 --> 02:00:05,900
Valve has turn off the Sorting so we won't have flashing.

2225
02:00:06,100 --> 02:00:07,500
Yeah, we can.

2226
02:00:08,200 --> 02:00:12,000
Well, we might still have flashing but it probably won't be as bad.

2227
02:00:12,200 --> 02:00:18,100
The Sorting inside the render back-end sort.

2228
02:00:20,100 --> 02:00:20,900
Let's see.

2229
02:00:23,700 --> 02:00:24,700
Okay.

2230
02:00:27,300 --> 02:00:28,800
Where is Weir?

2231
02:00:32,200 --> 02:00:33,600
Burgers are sort.

2232
02:00:43,600 --> 02:00:44,700
Where did I start go?

2233
02:00:45,900 --> 02:00:46,900
That it wasn't render.

2234
02:00:50,500 --> 02:00:50,900
There it is.

2235
02:00:50,900 --> 02:00:51,700
Sorta entries.

2236
02:01:04,200 --> 02:01:11,700
All right, so in prep for render, I guess we could just do this.

2237
02:01:14,000 --> 02:01:17,200
But in order to do that yes, the problem is we're going to do a couple

2238
02:01:17,200 --> 02:01:21,000
things here because we don't we rely on that to produce the list.

2239
02:01:21,200 --> 02:01:21,700
Yeah.

2240
02:01:22,400 --> 02:01:26,500
So we're going to have to I don't want to do that just yet because

2241
02:01:26,500 --> 02:01:33,200
when we turn off sword entries, we're going to have to change the

2242
02:01:33,200 --> 02:01:36,500
iteration back to one that just steps over the entries directly.

2243
02:01:36,500 --> 02:01:38,300
So I'm I'm not going to do that.

2244
02:01:38,300 --> 02:01:41,300
That's going to stay on I suppose maybe what we could do.

2245
02:01:44,600 --> 02:01:47,300
Is just make sort entries, not actually sort.

2246
02:01:49,300 --> 02:01:51,500
So it still produces the results.

2247
02:01:58,600 --> 02:02:00,900
I guess what I can do here is just say, should sort.

2248
02:02:00,900 --> 02:02:01,900
As always false

2249
02:02:08,300 --> 02:02:08,800
Right.

2250
02:02:17,600 --> 02:02:22,100
Yeah, so I feel like just the problem with that right at the moment in

2251
02:02:22,100 --> 02:02:28,100
my assumption anyway is that the order that we output the entities,

2252
02:02:28,100 --> 02:02:29,400
varies as well.

2253
02:02:29,600 --> 02:02:32,800
So I just the fact that we're not sorting is not going to be

2254
02:02:32,800 --> 02:02:34,500
sufficient to stop the flashing.

2255
02:02:34,500 --> 02:02:36,900
I really just don't think I feel like that's just something that's

2256
02:02:36,900 --> 02:02:44,100
going to have to wait until we're actually closer to being done and we

2257
02:02:44,100 --> 02:02:45,200
can turn on the z-buffer.

2258
02:02:45,500 --> 02:02:47,200
I mean, we could turn off the trees.

2259
02:02:47,300 --> 02:02:51,500
He's, if you wanted to to reduce it but I think that's about it.

2260
02:03:20,500 --> 02:03:22,100
Kim Davis says the debug you is broken.

2261
02:03:22,300 --> 02:03:23,600
Yes, the debug UI.

2262
02:03:23,800 --> 02:03:28,500
We won't be able to access the debug UI until we support orthographic

2263
02:03:28,900 --> 02:03:32,000
transform in the because remember, the debug you, I goes to the

2264
02:03:32,000 --> 02:03:33,800
orthographic transform and the orthographic.

2265
02:03:33,800 --> 02:03:37,800
Transform is NOW essential effectively incorrect.

2266
02:03:37,900 --> 02:03:39,700
I mean, we might be able to just fix it quickly.

2267
02:03:39,700 --> 02:03:43,100
I was going to look at that once we decided if that but you can see in

2268
02:03:43,100 --> 02:03:48,700
here when we do the orthographic pass, it's going through a different

2269
02:03:48,700 --> 02:03:49,300
thing than

2270
02:03:49,800 --> 02:03:54,700
Then the past here and I didn't look at exactly what that would need.

2271
02:03:54,700 --> 02:04:00,000
In order to work properly when it gets, put on the when it gets put

2272
02:04:00,000 --> 02:04:02,300
out now, I don't know.

2273
02:04:02,300 --> 02:04:05,600
I can't think offhand of why the Earth our graphic would have broken

2274
02:04:06,000 --> 02:04:07,300
yet, but it

2275
02:04:14,900 --> 02:04:16,800
Yeah, I'm not, I'm not sure offhand.

2276
02:04:16,800 --> 02:04:21,100
I know exactly why it would break here, but I just I, I'm not even

2277
02:04:21,100 --> 02:04:24,900
going to look at that yet because we're about to make up, you know, do

2278
02:04:24,900 --> 02:04:29,300
a perspective divide in in the actual

2279
02:04:31,900 --> 02:04:34,800
In the projection Matrix in opengl.

2280
02:04:35,100 --> 02:04:40,600
And once we do that that would irrevocable that would irreparably

2281
02:04:40,600 --> 02:04:44,000
break of the the debug UI for sure.

2282
02:04:44,300 --> 02:04:47,600
And so we I knew it would go away that point anyway so I'm not going

2283
02:04:47,600 --> 02:04:49,900
to worry about that just yet because we're going to have to have a

2284
02:04:49,900 --> 02:04:55,200
thing in opengl that we're in opengl we actually set an orthographic

2285
02:04:55,200 --> 02:04:56,700
Matrix for the debug UI.

2286
02:04:56,900 --> 02:04:58,500
So we need to kind of do that as well.

2287
02:04:58,500 --> 02:05:01,600
That's just some of its going to have to happen because

2288
02:05:02,000 --> 02:05:04,100
Even though I'm not sure exactly why we broke it here.

2289
02:05:04,100 --> 02:05:06,000
I wasn't paying close attention because I already knew it was going to

2290
02:05:06,000 --> 02:05:09,400
break and I wasn't really going to worry about it, but I can tell you

2291
02:05:09,400 --> 02:05:11,600
for sure that it's soon as we put the provider, then it would be

2292
02:05:11,600 --> 02:05:12,400
completely broken.

2293
02:05:13,300 --> 02:05:15,700
So we have to deal with that separate.

2294
02:05:25,400 --> 02:05:28,500
Elvin, I was reading the article from Fabien about his optimizations

2295
02:05:28,500 --> 02:05:31,400
on the Intel software renderer and I saw him doing the clipping in a

2296
02:05:31,400 --> 02:05:34,500
very simple manner in screen space where he takes the min/max between

2297
02:05:34,500 --> 02:05:38,600
the pixel and screen dimensions because he was using Orient.

2298
02:05:38,600 --> 02:05:41,800
2D and barycentric coordinates to rasterize.

2299
02:05:42,200 --> 02:05:46,200
The clipping was only four lines of code in easy to understand why

2300
02:05:46,200 --> 02:05:50,400
does open jail have to do complicated homogeneous clipping?

2301
02:05:51,400 --> 02:05:51,900
Well,

2302
02:05:56,200 --> 02:05:59,800
so, I think the problem

2303
02:06:00,000 --> 02:06:04,600
Just figuring out which pixels to consider in the first place though

2304
02:06:04,600 --> 02:06:05,600
is the problem.

2305
02:06:05,600 --> 02:06:09,300
Once you're actually doing pixels, once you're actually stepping

2306
02:06:09,300 --> 02:06:11,100
through pixels, then it's pretty easy.

2307
02:06:11,500 --> 02:06:16,800
But you can't do the Divide to figure out where the thing is on the

2308
02:06:16,800 --> 02:06:18,100
screen ahead of time.

2309
02:06:20,000 --> 02:06:26,500
And so I don't know, since I haven't read that particular article that

2310
02:06:26,500 --> 02:06:27,500
you're talking about,

2311
02:06:28,700 --> 02:06:32,600
I'm not sure exactly what that was referring to.

2312
02:06:32,700 --> 02:06:37,900
But in terms of doing the clipping regardless of what you do, you

2313
02:06:37,900 --> 02:06:42,300
still need some way of figuring out what pixels to consider, right?

2314
02:06:42,400 --> 02:06:46,300
You need a bounding box at least and in order to produce the bounding

2315
02:06:46,300 --> 02:06:49,200
box, you need to know how small this triangle ended up being on the

2316
02:06:49,200 --> 02:06:49,800
screen.

2317
02:06:50,000 --> 02:06:52,400
And in order to know how small the triangle end up being on screen you

2318
02:06:52,400 --> 02:06:54,700
need to be able to do a divide, right?

2319
02:06:56,300 --> 02:06:57,300
And so

2320
02:07:01,200 --> 02:07:05,000
Homogeneous clipping is not necessarily what gpus do.

2321
02:07:05,800 --> 02:07:08,300
And at the very least, it's not the only kind of clipping they do

2322
02:07:08,300 --> 02:07:12,200
because they do do clipping in pixel space as well.

2323
02:07:12,200 --> 02:07:15,600
When they're evaluating pixels, they do it as well, right?

2324
02:07:15,800 --> 02:07:17,300
And these guard been clipping and all those other.

2325
02:07:17,300 --> 02:07:21,600
Sorts of things is, I don't really know what current gpus do, exactly

2326
02:07:21,600 --> 02:07:23,400
as their Suite of things, but it definitely does.

2327
02:07:26,000 --> 02:07:30,700
And so how they actually decide to do their clipping at the front end,

2328
02:07:30,900 --> 02:07:36,700
I don't know, but they do have to do it in a way that's consistent

2329
02:07:36,800 --> 02:07:40,300
with that homogeneous idea, right?

2330
02:07:40,300 --> 02:07:44,500
That's because that's how the pipeline is defined, but that doesn't

2331
02:07:44,500 --> 02:07:46,700
mean that they do it at any particular point, they just need to get

2332
02:07:46,700 --> 02:07:49,200
results that are consistent with having done it in the way that the

2333
02:07:49,200 --> 02:07:53,700
opengl spec says so that it always get predictable results right.

2334
02:07:59,000 --> 02:08:01,000
In practice is the camera, near plane.

2335
02:08:01,000 --> 02:08:04,000
And the camera focal length really differ.

2336
02:08:04,300 --> 02:08:06,500
I would expect them to be the same.

2337
02:08:09,100 --> 02:08:10,200
Yeah, they can differ.

2338
02:08:21,200 --> 02:08:22,600
they can differ, because

2339
02:08:28,100 --> 02:08:32,200
The near and far clipping planes are really just there to divide to me

2340
02:08:32,200 --> 02:08:34,300
unless you're trying to do some kind of special effect.

2341
02:08:35,900 --> 02:08:39,600
Where you're trying to clip things, in some way the near and far

2342
02:08:39,600 --> 02:08:42,700
clipping are really just there to set your Z precision.

2343
02:08:43,700 --> 02:08:47,400
Right, what the near and far clip playing are going to do is they're

2344
02:08:47,400 --> 02:08:53,800
going to set your range of possible Z values.

2345
02:08:54,700 --> 02:08:58,600
And if you push the near clip playing out further you get more

2346
02:08:58,600 --> 02:08:59,600
Precision in your

2347
02:09:02,700 --> 02:09:05,500
In your in your Z buffer, right?

2348
02:09:06,700 --> 02:09:10,400
So you may want to move it out further than or less that, you know,

2349
02:09:11,900 --> 02:09:15,900
not sure I'm saying this correctly, the near and far clip planes are

2350
02:09:15,900 --> 02:09:20,800
really just there because the z-buffer can only store, you know, it

2351
02:09:20,800 --> 02:09:22,600
stores values in it, right?

2352
02:09:23,000 --> 02:09:28,100
And it the Precision with which, you can resolve the difference

2353
02:09:28,100 --> 02:09:32,900
between two, Z coordinates is entirely dependent on those two planes,

2354
02:09:33,200 --> 02:09:33,700
right?

2355
02:09:34,200 --> 02:09:36,300
That's just the nature of the fact that the

2356
02:09:36,600 --> 02:09:40,000
Computer doesn't have infinite Precision, it only has however many

2357
02:09:40,000 --> 02:09:42,300
bits of precision, the Z buffer is.

2358
02:09:42,300 --> 02:09:45,500
And if the Z buffer is the 32 bit floating Point Z buffer.

2359
02:09:45,800 --> 02:09:49,900
Then you have 32-bit floating-point precision and if it's a 16-bit

2360
02:09:49,900 --> 02:09:55,500
fixed Point Z buffer, then you have 16-bit fixed precision and so the

2361
02:09:55,500 --> 02:09:58,700
Z buffers are never going to be infinitely.

2362
02:09:58,700 --> 02:09:59,400
Precise,

2363
02:10:00,700 --> 02:10:02,700
the focal length of the camera.

2364
02:10:02,700 --> 02:10:06,700
On the other hand is about how much perspective foreshortening.

2365
02:10:06,700 --> 02:10:07,200
You get

2366
02:10:08,500 --> 02:10:09,900
And that's what it controls.

2367
02:10:10,700 --> 02:10:15,300
So, since there's two control fundamentally different things, there's

2368
02:10:15,300 --> 02:10:18,300
no particular reason why they have to be the same.

2369
02:10:18,800 --> 02:10:22,400
If you want to change the fov of your game, you're going to change the

2370
02:10:22,400 --> 02:10:26,200
focal length variable, but you don't have to touch the near clipping

2371
02:10:26,200 --> 02:10:27,900
plane for any particular reason.

2372
02:10:30,200 --> 02:10:31,900
So hopefully that makes some sense.

2373
02:10:37,400 --> 02:10:40,300
Elven, are we going to continue supporting the software renderer in 3D

2374
02:10:40,300 --> 02:10:40,800
as well?

2375
02:10:40,900 --> 02:10:47,100
Yes, probably we will, I don't know to what extent we will, but we or

2376
02:10:47,100 --> 02:10:49,700
when, but we probably will at least at some point.

2377
02:11:07,300 --> 02:11:11,500
Elvin, if I set the near clipping plane to say 10, does that mean the

2378
02:11:11,500 --> 02:11:14,200
entities with a world's best Z less than 10?

2379
02:11:14,500 --> 02:11:17,600
They would be clipped just trying to make sure that near-far clip-ins

2380
02:11:17,600 --> 02:11:19,200
are defined in terms of world space.

2381
02:11:19,800 --> 02:11:24,100
So it's a little premature for us to talk about that only because we

2382
02:11:24,100 --> 02:11:27,100
haven't actually gotten around to creating that perspective Matrix

2383
02:11:27,100 --> 02:11:28,400
that starts dealing with Z.

2384
02:11:28,900 --> 02:11:31,500
So although I mentioned what the near and clip planes are

2385
02:11:31,500 --> 02:11:34,200
conceptually, we haven't actually talked about what we even mean when

2386
02:11:34,200 --> 02:11:36,300
we say near and far clipping plane in terms of

2387
02:11:36,500 --> 02:11:39,700
She'll specificity and that question is a very specific question.

2388
02:11:40,100 --> 02:11:44,900
What I would say is that in general yes you can think of it simply in

2389
02:11:44,900 --> 02:11:51,700
an abstract sense of whatever the after I've transformed things into

2390
02:11:51,700 --> 02:11:52,400
camera space.

2391
02:11:52,600 --> 02:11:56,200
I typically talk about my near clip plane as being the distance away

2392
02:11:56,200 --> 02:11:59,700
from the camera at which things start to be visible anything

2393
02:12:00,000 --> 02:12:01,500
Other than that is clipped away.

2394
02:12:02,600 --> 02:12:05,700
And similarly the far clipping plane is the distance at which once

2395
02:12:05,700 --> 02:12:10,400
things get further than that, they are no longer visible, right?

2396
02:12:11,000 --> 02:12:12,700
And like I said, the near clipping plane.

2397
02:12:12,700 --> 02:12:15,800
I don't know if there's a way to get rid of the near clipping plane.

2398
02:12:17,700 --> 02:12:24,000
That's again, maybe a question for a person who's more knowledgeable

2399
02:12:24,000 --> 02:12:25,400
about rendering than me.

2400
02:12:26,500 --> 02:12:30,400
But you certainly can't get rid of the far clip plane and just have it

2401
02:12:30,400 --> 02:12:33,300
so that you just get diminishing Precision, the further you get out

2402
02:12:33,300 --> 02:12:35,300
that's eminently doable.

2403
02:12:38,100 --> 02:12:44,700
And I'll try to show you how that works with when we when we write our

2404
02:12:44,700 --> 02:12:49,100
projection equation, I'll mention sort of how that comes into play.

2405
02:13:35,500 --> 02:13:36,000
Elven.

2406
02:13:36,000 --> 02:13:41,500
Can you use the GPU to bypass opengl and DirectX API Pipeline and just

2407
02:13:41,500 --> 02:13:43,600
use computers to implement your own pipeline?

2408
02:13:43,600 --> 02:13:45,900
That's also running on the GPU?

2409
02:13:47,100 --> 02:13:54,300
Well, you can, but it's not going to be as fast as if you didn't.

2410
02:13:55,500 --> 02:14:01,100
So yeah, you can just, you know, you could just write something in

2411
02:14:01,100 --> 02:14:05,000
Cuda for example, that would just

2412
02:14:05,600 --> 02:14:09,400
Do your own completely own software rendering pipeline, that just gets

2413
02:14:09,400 --> 02:14:13,000
uploaded, the GPU as a giant program and then runs right?

2414
02:14:13,200 --> 02:14:16,800
You can totally do that, you can output a an image and you can show

2415
02:14:16,800 --> 02:14:18,500
that image on the screen.

2416
02:14:18,500 --> 02:14:20,100
So that's that's doable.

2417
02:14:21,300 --> 02:14:26,200
And in fact that's how rate racing engines work now.

2418
02:14:26,500 --> 02:14:29,600
So for example, if you look at like the Brigade renderer,

2419
02:14:31,400 --> 02:14:34,400
my understanding is that's just a Cuda program that they upload, and

2420
02:14:34,400 --> 02:14:38,400
it's a ray Tracer, not a rasterizer, and it you know, it just tries to

2421
02:14:39,300 --> 02:14:40,800
render the world using Ray tracing

2422
02:14:42,600 --> 02:14:46,400
However, it's not going to be as fast as if you use the traditional

2423
02:14:46,400 --> 02:14:47,300
API.

2424
02:14:47,300 --> 02:14:52,000
And by traditional, I mean, like modern like opengl for point x or

2425
02:14:52,000 --> 02:14:52,400
something.

2426
02:14:52,400 --> 02:14:56,300
I don't mean the fixed function pipeline, it's not going to be as fast

2427
02:14:56,300 --> 02:14:58,200
as if you use the traditional Pipeline.

2428
02:14:58,200 --> 02:14:59,900
And the reason for that,

2429
02:15:00,000 --> 02:15:04,000
That's because there's a bunch of Hardware in GPU that set up to

2430
02:15:04,000 --> 02:15:11,800
accelerate specifically the shading pipeline in terms of frame,

2431
02:15:11,800 --> 02:15:15,800
buffer, access and texture fetching, and these sorts of things.

2432
02:15:17,500 --> 02:15:20,700
There's a bunch of things that surround that process that are

2433
02:15:20,700 --> 02:15:26,000
optimized specifically, when the GPU is executing code that it knows

2434
02:15:26,000 --> 02:15:32,000
our is specific to the rendering concept so much so that there's

2435
02:15:32,000 --> 02:15:36,500
certain, you know, there's, there's certain stuff in the hardware that

2436
02:15:36,500 --> 02:15:38,300
still actually very hard coded.

2437
02:15:38,400 --> 02:15:42,900
You know, I'm not equipped to say what it actually is, but there's

2438
02:15:42,900 --> 02:15:46,900
plenty of, there's still plenty of special purpose, Hardware in a GPU

2439
02:15:47,200 --> 02:15:51,300
Specifically set up for the rasterization pipeline that is not

2440
02:15:51,300 --> 02:15:51,900
General.

2441
02:15:52,900 --> 02:15:58,300
And so when you go to implement your own software, rasterizer in Cuda,

2442
02:15:58,600 --> 02:16:02,400
you will not have the ability to access those pieces of the hardware,

2443
02:16:03,400 --> 02:16:04,200
whatever they are.

2444
02:16:05,000 --> 02:16:11,500
Whether that's scheduling or graph traversal or, you know, clipping

2445
02:16:11,500 --> 02:16:15,000
things or whatever it is that they've still got special-purpose parts

2446
02:16:15,000 --> 02:16:16,500
for you.

2447
02:16:16,500 --> 02:16:17,100
Don't get the

2448
02:16:17,200 --> 02:16:18,800
Thought to access those parts.

2449
02:16:19,000 --> 02:16:25,200
So you'll get all the flops that you would have for shaders and you'll

2450
02:16:25,200 --> 02:16:28,100
be able to use all of that but you won't be able to use any of the

2451
02:16:28,100 --> 02:16:30,600
special purpose Hardware which still does exist.

2452
02:16:31,100 --> 02:16:34,500
And so, that's what I would say about that.

2453
02:16:37,100 --> 02:16:40,700
It certainly be a fun exercise to do, but it probably wouldn't be a

2454
02:16:40,700 --> 02:16:44,900
very good idea in terms of quality because you will end up losing

2455
02:16:45,100 --> 02:16:47,799
performance because of that.

2456
02:16:51,200 --> 02:16:51,799
We have 10.

2457
02:16:51,799 --> 02:16:53,299
So to avoid z-fighting.

2458
02:16:53,299 --> 02:16:57,299
Should we have dynamical near far complains?

2459
02:16:57,600 --> 02:17:00,299
I mean, that their value should change according to the nearest and

2460
02:17:00,299 --> 02:17:01,100
the farthest objects.

2461
02:17:01,100 --> 02:17:06,100
We want to render in order for the near far, clip playing space to be

2462
02:17:06,100 --> 02:17:07,500
as small as possible.

2463
02:17:10,500 --> 02:17:13,100
Yeah, I guess I would say yes.

2464
02:17:16,900 --> 02:17:21,100
If you wanted to try and get the most Precision you could you would

2465
02:17:21,100 --> 02:17:22,400
probably do that.

2466
02:17:22,500 --> 02:17:28,799
Yeah I don't know that that's a particularly good idea and the reason

2467
02:17:28,799 --> 02:17:32,299
for that is that it kind of fights with a fundamental notion of

2468
02:17:32,299 --> 02:17:37,100
consistency in that, you could imagine a scene where somebody throws

2469
02:17:37,100 --> 02:17:40,400
something at the player and that thing comes close to the player.

2470
02:17:40,700 --> 02:17:44,400
All of a sudden does a bunch of Z fighting starts happening because

2471
02:17:44,600 --> 02:17:45,700
previously, the

2472
02:17:45,799 --> 02:17:49,299
Bounds were out further and now they have to be moved closer and

2473
02:17:49,299 --> 02:17:52,000
you're looking at the scene and it degrades right?

2474
02:17:52,900 --> 02:17:57,600
And so I think typically the approach that you take it doesn't

2475
02:17:57,600 --> 02:17:59,700
necessarily look like that.

2476
02:18:00,500 --> 02:18:05,500
In terms of dynamically setting the bounds that way, but I don't know.

2477
02:18:05,600 --> 02:18:10,900
Certainly things of the nature that you just described are very

2478
02:18:10,900 --> 02:18:11,600
common.

2479
02:18:12,100 --> 02:18:16,799
When people are trying to get Shadow map Precision to be better

2480
02:18:17,000 --> 02:18:20,900
because honestly Z fighting is not as much of an issue.

2481
02:18:23,200 --> 02:18:28,299
These days unless you just made your geometry really poorly Z.

2482
02:18:28,299 --> 02:18:30,900
Finally fighting is really not as big of an issue as it used to

2483
02:18:30,900 --> 02:18:33,200
because Z buffer is tend to be pretty accurate.

2484
02:18:33,299 --> 02:18:39,600
Usually the problem is more with lightmaps and and comparing the Z

2485
02:18:39,600 --> 02:18:42,900
buffer to the light maps and and not having enough Precision there

2486
02:18:42,900 --> 02:18:45,700
because that's a really delicate operation where you've got, two

2487
02:18:45,700 --> 02:18:50,400
different ways of computing, a distance from a different places that

2488
02:18:50,400 --> 02:18:52,500
have to agree and

2489
02:18:52,600 --> 02:18:54,299
That's really ugly.

2490
02:18:55,000 --> 02:18:58,200
And so that's where you get those like Shadow, those really bad Shadow

2491
02:18:58,200 --> 02:18:58,799
artifacts.

2492
02:18:59,100 --> 02:19:05,299
And so people who do Shadow art to try to like do algorithms that make

2493
02:19:05,600 --> 02:19:07,299
shadows look better.

2494
02:19:08,799 --> 02:19:10,200
And have less artifacts.

2495
02:19:10,799 --> 02:19:15,000
They actually do a lot of stuff with the ranges which they do, in

2496
02:19:15,000 --> 02:19:17,799
fact, you know, like just to pick one of them.

2497
02:19:22,600 --> 02:19:28,799
Here's an example of of, in fact, this is a reasonable diagram.

2498
02:19:30,000 --> 02:19:34,100
People will do stuff like breaking up Shadow Maps into regions of the

2499
02:19:34,100 --> 02:19:37,299
frustum specifically because they need more Precision clothes and less

2500
02:19:37,299 --> 02:19:39,299
Precision further away and stuff like this.

2501
02:19:40,100 --> 02:19:44,900
So you can think of that almost as making multiple near and far

2502
02:19:44,900 --> 02:19:49,400
clipping planes for this very reason, right.

2503
02:19:50,900 --> 02:19:54,700
So the kind of thing you're talking about is absolutely true.

2504
02:19:55,000 --> 02:20:00,200
I just don't know how many people actually do anything with the main

2505
02:20:00,200 --> 02:20:02,400
render in that, what right?

2506
02:20:02,400 --> 02:20:07,900
Like the, the main production of the image separate from the

2507
02:20:07,900 --> 02:20:12,900
shadowing, I don't know how much of that is ever done with adjusted

2508
02:20:15,900 --> 02:20:18,100
adjusted, clipping planes.

2509
02:20:20,200 --> 02:20:23,200
Because again this isn't my area of expertise, I'm not a rendering

2510
02:20:23,200 --> 02:20:24,700
guy, you know.

2511
02:20:24,700 --> 02:20:30,200
You'd want to talk to somebody who is really up, always kept really

2512
02:20:30,200 --> 02:20:34,100
close up to date on the state-of-the-art in rendering because they

2513
02:20:34,100 --> 02:20:36,900
know all the sorts of stuff that people that tend to be doing at that

2514
02:20:36,900 --> 02:20:37,700
point in time.

2515
02:20:38,000 --> 02:20:43,200
And so, you know, I don't know to what extent people mess with the

2516
02:20:43,300 --> 02:20:45,400
near and far clipping planes on a frame to frame basis.

2517
02:20:45,400 --> 02:20:49,600
These days, the answer may be quite a bit, the answer, maybe not at

2518
02:20:49,600 --> 02:20:49,800
all.

2519
02:20:50,000 --> 02:20:52,700
All I do know that a lot of people now use.

2520
02:20:56,300 --> 02:20:59,800
rendering that actually breaks the scene into

2521
02:21:00,000 --> 02:21:01,400
Chunks anyway.

2522
02:21:02,300 --> 02:21:05,700
And so at that point, you're near and far clipping planes are actually

2523
02:21:05,800 --> 02:21:09,300
moving around, many times a frame because you're rendering lots of

2524
02:21:09,300 --> 02:21:11,200
little chunks, right?

2525
02:21:11,500 --> 02:21:14,300
And so, in that sense you might sort of say, that's kind of what

2526
02:21:14,300 --> 02:21:15,000
you're talking about.

2527
02:21:15,000 --> 02:21:18,300
Almost it's not really, I know it's not exactly what you were asking,

2528
02:21:18,300 --> 02:21:20,000
but it's the same kind of idea.

2529
02:21:20,300 --> 02:21:23,600
It may not have had anything to do because the reason they do that is

2530
02:21:23,600 --> 02:21:27,100
to isolate parts of the scene so that they can do less computations.

2531
02:21:27,100 --> 02:21:29,700
Because like that one part of the scene is only affected by a certain

2532
02:21:30,000 --> 02:21:35,700
lights and so on but it's definitely the case that that same thing.

2533
02:21:35,700 --> 02:21:37,300
Applies the near and far clip cleaner.

2534
02:21:37,300 --> 02:21:39,900
Now just going to apply to a very small region of space.

2535
02:21:40,000 --> 02:21:44,400
So you would naturally get a lot more Precision there, if you needed

2536
02:21:44,400 --> 02:21:47,900
it, in terms of your clipping region and what you were talking about.

2537
02:21:48,000 --> 02:21:50,900
So maybe, you know, that's an example of that as well.

2538
02:21:50,900 --> 02:21:51,400
I don't know.

2539
02:21:51,400 --> 02:21:56,100
And again, I would just underscore, I am not a rendering person.

2540
02:21:56,300 --> 02:21:59,900
It's a very specialized disc discipline, obviously, I know how

2541
02:21:59,900 --> 02:22:02,500
Do it because I've written render stuff before.

2542
02:22:02,500 --> 02:22:08,100
But I've never it's not really super where my interests lie.

2543
02:22:08,100 --> 02:22:12,500
So I've never been one of those people who's constantly invested in

2544
02:22:12,500 --> 02:22:15,500
the state of the art and Game 3D rendering.

2545
02:22:15,500 --> 02:22:18,200
And so in order to really definitively say what's a good idea?

2546
02:22:18,200 --> 02:22:22,600
What do people do currently you kind of you're going to have to ask

2547
02:22:22,600 --> 02:22:26,200
someone who's more up-to-date on all the stuff that people do.

2548
02:22:26,200 --> 02:22:29,500
I can only really give you the basic understanding of how everything

2549
02:22:29,500 --> 02:22:29,900
works.

2550
02:22:29,900 --> 02:22:33,200
Works so that you're set to go learn about those yourself.

2551
02:22:33,200 --> 02:22:36,000
But in order to kind of be more familiar with that, you have to do a

2552
02:22:36,000 --> 02:22:39,500
lot of reading and be very specialized in that discipline in order to

2553
02:22:39,500 --> 02:22:42,700
really know definitively the answers to questions like those

2554
02:22:50,900 --> 02:22:52,900
Does any of the clip and projection math change?

2555
02:22:52,900 --> 02:22:55,000
If we change the rendering technique that we're using, say,

2556
02:22:55,000 --> 02:22:58,200
rasterization versus Ray tracing or voxels?

2557
02:22:58,400 --> 02:22:59,600
Well, obviously, yes.

2558
02:22:59,600 --> 02:23:02,900
I mean, with Ray tracing, you, don't clip, right?

2559
02:23:03,800 --> 02:23:04,500
Ray tracing.

2560
02:23:04,500 --> 02:23:07,300
You just have the Ray and whatever it hits it hits.

2561
02:23:07,600 --> 02:23:11,500
So you don't need a near or far clip playing in Ray tracing for any

2562
02:23:11,500 --> 02:23:12,700
reason at all.

2563
02:23:15,500 --> 02:23:18,300
It's not, it's not relevant, right?

2564
02:23:19,600 --> 02:23:25,200
The the only point that causes you a problem in Ray.

2565
02:23:25,200 --> 02:23:31,200
Tracing, I guess would be would be 000, I think, although I, you know,

2566
02:23:31,200 --> 02:23:32,600
now I think that's probably not true.

2567
02:23:32,800 --> 02:23:36,700
I guess I would say no probably in ray-tracing, you still do, want an

2568
02:23:36,700 --> 02:23:40,500
ear clip plane because something that, you know, that that Ray

2569
02:23:40,500 --> 02:23:43,900
intersection math could still you'd still get a little unstable down

2570
02:23:43,900 --> 02:23:44,100
there.

2571
02:23:44,100 --> 02:23:44,800
So you

2572
02:23:45,300 --> 02:23:53,600
I mean okay you might still, you might still want to be some nominal

2573
02:23:53,600 --> 02:23:58,900
near clipping plane and and I guess, you know, the other way to look

2574
02:23:58,900 --> 02:23:59,700
at it would be

2575
02:24:01,500 --> 02:24:06,000
You still sort of have Precision issues in Ray tracing so that the

2576
02:24:06,000 --> 02:24:08,900
problem is still there, it just manifest itself in a different way.

2577
02:24:09,000 --> 02:24:12,700
When you're ray-tracing, you end up with the problem of like Z

2578
02:24:12,700 --> 02:24:17,600
fighting in a ring, in a rasterizer is having trouble determining,

2579
02:24:17,600 --> 02:24:19,800
which hit is closest in a ray Tracer.

2580
02:24:19,800 --> 02:24:22,600
Because that's the ray goes out, you're like, oh, is this surface

2581
02:24:22,600 --> 02:24:23,100
closer?

2582
02:24:23,100 --> 02:24:26,500
Sir, is this surface closest, and if they're very, very close together

2583
02:24:26,700 --> 02:24:29,900
and the floating Point, Precision can't determine between

2584
02:24:30,100 --> 02:24:31,800
Do in the range of section equation.

2585
02:24:32,600 --> 02:24:35,600
Then you've got the same kind of thing, right?

2586
02:24:35,800 --> 02:24:39,500
So you know, I guess what I would say, you know, to answer your

2587
02:24:39,500 --> 02:24:45,300
question, perhaps to answer it poorly, the math is very different,

2588
02:24:45,900 --> 02:24:51,900
depending on the type of renderer, but the effects are not really all

2589
02:24:51,900 --> 02:24:52,700
that dissimilar.

2590
02:24:53,500 --> 02:24:56,500
You can't fight the fact that you have limited Precision rears its

2591
02:24:56,500 --> 02:24:57,800
ugly head in many ways.

2592
02:24:59,100 --> 02:24:59,700
But yeah.

2593
02:24:59,700 --> 02:24:59,900
So

2594
02:25:00,000 --> 02:25:01,700
For the, for the ray Tracer, I guess.

2595
02:25:01,700 --> 02:25:07,600
All I was trying to convey was you don't need a view frustum in a ray

2596
02:25:07,600 --> 02:25:09,100
Tracer, right?

2597
02:25:09,100 --> 02:25:12,400
Because you're just shooting raised up from the camera and you will

2598
02:25:12,400 --> 02:25:17,000
never shoot a ray further than the side of the view.

2599
02:25:17,300 --> 02:25:20,500
So you don't need to clip anything to it because you're never going to

2600
02:25:20,500 --> 02:25:24,800
send array towards anything that wasn't in it anyway, right?

2601
02:25:25,000 --> 02:25:28,300
So you never have to do any of that stuff if you don't want to, you

2602
02:25:28,300 --> 02:25:29,700
don't have to produce.

2603
02:25:30,100 --> 02:25:32,500
Lives device coordinates for any particular reason.

2604
02:25:32,700 --> 02:25:36,600
You don't have to even Define a view, frustum explicitly at any time,

2605
02:25:36,600 --> 02:25:37,700
if you don't want to.

2606
02:25:38,000 --> 02:25:41,800
Now, often times, you will still have clipping.

2607
02:25:42,800 --> 02:25:47,200
In effect, it'll just be calling not clipping.

2608
02:25:47,200 --> 02:25:52,800
So your ray Tracer will not want to consider anything that isn't that

2609
02:25:52,800 --> 02:25:54,300
isn't going to potentially hit.

2610
02:25:54,300 --> 02:25:57,900
And so you typically have some kind of a spatial hierarchy that allows

2611
02:25:57,900 --> 02:26:01,300
you to narrow down the things that that Ray might encounter at any

2612
02:26:01,300 --> 02:26:01,700
point in space.

2613
02:26:01,700 --> 02:26:05,700
It just doesn't really have anything to do with the view frustum and

2614
02:26:05,700 --> 02:26:08,500
the reason for that is you typically use the same spatial query, you

2615
02:26:08,500 --> 02:26:08,600
know?

2616
02:26:08,600 --> 02:26:10,200
You need to shoot these rays and space.

2617
02:26:10,200 --> 02:26:11,500
You need to do spatial queries on them.

2618
02:26:11,500 --> 02:26:12,700
What you're going to

2619
02:26:12,800 --> 02:26:16,000
Immediately after you hit something is you're going to cast a ray off

2620
02:26:16,000 --> 02:26:20,800
in a bounce direction to compute, what it's hitting.

2621
02:26:22,100 --> 02:26:24,800
And that Ray will trivially go outside the view.

2622
02:26:24,800 --> 02:26:26,100
Frustum most of the time.

2623
02:26:26,500 --> 02:26:29,700
So you can't clip the world to a view, frustum first and then Ray

2624
02:26:29,700 --> 02:26:31,900
trace it, it would be completely wrong.

2625
02:26:33,000 --> 02:26:38,700
So that's again, like, kind of another way of looking at that problem,

2626
02:26:38,700 --> 02:26:39,500
if that makes sense.

2627
02:26:40,500 --> 02:26:42,900
All right, I think we have finished for today.

2628
02:26:43,200 --> 02:26:44,600
I'm going to go ahead and close out here.

2629
02:26:49,500 --> 02:26:51,700
Thank you everyone for joining me, for those set of handmade hero.

2630
02:26:51,700 --> 02:26:53,600
It's been a pleasure coding with you.

2631
02:26:53,600 --> 02:26:56,900
As always, if you would like to follow along, with series at home, you

2632
02:26:56,900 --> 02:26:59,800
can always pre-order the game on handmade hero dot org and it comes

2633
02:27:00,000 --> 02:27:00,500
Source code.

2634
02:27:00,500 --> 02:27:02,800
So you can follow along with all the stuff that we do.

2635
02:27:03,500 --> 02:27:07,100
You can also go to the forums if you have questions and ask questions

2636
02:27:07,100 --> 02:27:07,500
there.

2637
02:27:08,000 --> 02:27:09,500
You can go to the our patreon page.

2638
02:27:09,500 --> 02:27:10,700
Want to support the video series.

2639
02:27:10,900 --> 02:27:14,000
You can check out our schedule bot And subscribe to it on Twitter.

2640
02:27:14,000 --> 02:27:16,500
If you want to know, when the series is going to be live and you're

2641
02:27:16,500 --> 02:27:19,800
going to go to our episode guide if you want to catch up on previous

2642
02:27:19,800 --> 02:27:23,000
week's episodes, that's it for today.

2643
02:27:23,000 --> 02:27:26,000
I'll be back next week where we'll take a look at moving the

2644
02:27:26,000 --> 02:27:29,300
perspective divided into opengl as the next step in our process of

2645
02:27:29,300 --> 02:27:29,800
change.

2646
02:27:30,000 --> 02:27:32,800
And over to a 3D pipeline all the way through instead of just at the

2647
02:27:32,800 --> 02:27:36,700
head end like we have been doing until then have fun program this week

2648
02:27:36,700 --> 02:27:38,500
and I will see y'all on the internet.

2649
02:27:38,500 --> 02:27:39,500
Take it easy everyone.

