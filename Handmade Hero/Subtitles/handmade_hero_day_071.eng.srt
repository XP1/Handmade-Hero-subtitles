1
00:00:00,800 --> 00:00:01,600
Start recording.

2
00:00:02,500 --> 00:00:03,800
Alright, hello everyone.

3
00:00:03,800 --> 00:00:08,200
And thank you for joining me for another episode of handmade hero the

4
00:00:08,200 --> 00:00:11,200
show where we code complete game live from scratch on Twitch.

5
00:00:11,200 --> 00:00:11,900
No engine.

6
00:00:12,500 --> 00:00:13,900
No library is just us.

7
00:00:14,400 --> 00:00:18,500
And right now, we're in the process of sort of working through our to

8
00:00:18,500 --> 00:00:18,900
do list.

9
00:00:18,900 --> 00:00:21,700
We made it to do list on Friday, where we kind of said, like, wait a

10
00:00:21,700 --> 00:00:22,300
minute.

11
00:00:22,500 --> 00:00:25,600
We're kind of gotten relatively far here on stuff that we want to spec

12
00:00:25,600 --> 00:00:25,900
out.

13
00:00:26,000 --> 00:00:30,300
We're trying to basically build out our entire engine superstructure.

14
00:00:30,300 --> 00:00:30,500
If

15
00:00:30,600 --> 00:00:33,600
Well, so that everything kind of fits together nicely and we still

16
00:00:33,600 --> 00:00:36,000
have a lot of work to do on any individual piece of it.

17
00:00:37,000 --> 00:00:39,100
There's a, there's a bunch of stuff that we haven't done in terms of

18
00:00:39,100 --> 00:00:41,100
the actual components but we're just trying to make sure.

19
00:00:41,100 --> 00:00:44,000
We know how everything fits together and so on Friday, we made a to-do

20
00:00:44,000 --> 00:00:46,600
list that was basically like let's think about all the things that we

21
00:00:46,600 --> 00:00:48,000
would need to do before we're done.

22
00:00:48,800 --> 00:00:51,600
And so now at least we're in a position where you can just kind of go

23
00:00:51,600 --> 00:00:54,500
take a quick look when we when we come to a stopping point on any

24
00:00:54,500 --> 00:00:57,300
particular thing that we're working on, we can go take a peek at that

25
00:00:57,300 --> 00:00:57,600
and go.

26
00:00:57,600 --> 00:00:59,000
What are the things that we still have to do?

27
00:00:59,000 --> 00:01:00,400
Let's pick a good one to do next.

28
00:01:00,500 --> 00:01:05,000
And go do it and so that'll be pretty handy allowing us to not.

29
00:01:05,000 --> 00:01:08,600
Forget basically to do something often times what I will do.

30
00:01:08,600 --> 00:01:12,600
When I'm programming, not on the stream, just my regular day,

31
00:01:12,600 --> 00:01:14,900
programming is actually keep a notebook next to me.

32
00:01:15,200 --> 00:01:18,800
And I've actually heard multiple people do this and it wasn't like we

33
00:01:18,800 --> 00:01:21,200
got together and talked about it and all decided to do it.

34
00:01:21,300 --> 00:01:23,900
I've actually heard multiple people do exactly the same thing.

35
00:01:23,900 --> 00:01:28,300
Independently completely never having talked to them or them having

36
00:01:28,300 --> 00:01:30,400
talk to each other and it just turned out to be a

37
00:01:30,600 --> 00:01:31,100
People do.

38
00:01:32,200 --> 00:01:36,600
On the notebook we write out the things that we still want to remember

39
00:01:36,600 --> 00:01:40,900
to do as a list on the notebook next to us when were programming and

40
00:01:40,900 --> 00:01:46,900
then every so often when the page gets full we go to a new page and we

41
00:01:46,900 --> 00:01:51,900
copy the list down again filtering it with by removing stuff that we

42
00:01:51,900 --> 00:01:54,200
no longer want to do or the isn't applicable that we finished or

43
00:01:54,200 --> 00:01:54,700
whatever.

44
00:01:56,300 --> 00:01:58,300
And for some reason this because this is very popular.

45
00:01:58,300 --> 00:02:00,600
I don't know why it's much more popular than using like

46
00:02:02,100 --> 00:02:04,000
Actual like to do manager or something.

47
00:02:04,300 --> 00:02:07,400
There's something about the act of writing it and copying it.

48
00:02:07,400 --> 00:02:09,300
That is somehow important.

49
00:02:09,400 --> 00:02:11,500
That nobody knows why, but that's what happens.

50
00:02:12,200 --> 00:02:13,200
So we have the next best thing.

51
00:02:13,200 --> 00:02:15,900
We have an actual to-do list that I can display on the screen since we

52
00:02:15,900 --> 00:02:17,800
need that since you would be able to see my notebook.

53
00:02:17,800 --> 00:02:18,500
If it's sitting here,

54
00:02:19,600 --> 00:02:21,900
that's what we're going to do today is we're going to go start

55
00:02:21,900 --> 00:02:24,000
tackling that before I start.

56
00:02:24,100 --> 00:02:30,700
This is day 71 so if you are trying to follow along at home what you

57
00:02:30,700 --> 00:02:34,000
want and you've pre-order the game on handmade here to org what you

58
00:02:34,000 --> 00:02:36,300
want to do is download Day 70 source code.

59
00:02:37,000 --> 00:02:39,400
Well you download all the source code together but you want to unpack

60
00:02:39,400 --> 00:02:43,300
Day 70 source code and that's what we're starting with today if you

61
00:02:43,300 --> 00:02:44,100
want to follow along.

62
00:02:44,800 --> 00:02:47,400
So, let's go ahead and open up that to-do list because we basically

63
00:02:47,500 --> 00:02:49,300
put a bunch of stuff there and there's also a

64
00:02:49,400 --> 00:02:49,700
Briefing.

65
00:02:49,700 --> 00:02:51,800
Maybe I'll do this right at the start here before we do that.

66
00:02:52,600 --> 00:02:58,400
There was a to do like a bug that someone noticed on the forums that I

67
00:02:58,400 --> 00:02:59,600
want to mark down.

68
00:03:00,000 --> 00:03:03,300
The actual code where it actually happened.

69
00:03:03,500 --> 00:03:07,600
So in our familiar, guess that's over here.

70
00:03:08,000 --> 00:03:12,300
So we have not yet moved our enemy code out.

71
00:03:12,300 --> 00:03:14,700
So we're still actually doing our entity updates in here.

72
00:03:15,100 --> 00:03:18,000
I said, I want to move them to ham identity dot see if you we haven't

73
00:03:18,000 --> 00:03:18,900
quite done that yet.

74
00:03:19,600 --> 00:03:23,000
Anyway, one of the things that we did not do, is we kind of we're

75
00:03:23,000 --> 00:03:26,400
playing around with, with doing this before

76
00:03:27,300 --> 00:03:30,100
Somebody had said, what if we made familiar as follow other familiars,

77
00:03:30,100 --> 00:03:32,300
and we had kind of hacked that together, and one of the things we did

78
00:03:32,300 --> 00:03:36,500
was change the test distance squared to basically, wait Heroes as if

79
00:03:36,500 --> 00:03:39,100
they were closer than familiar is just to try and make it so that

80
00:03:39,200 --> 00:03:43,100
familiars would follow Heroes when Heroes were close by in doing so,

81
00:03:43,200 --> 00:03:48,800
we never actually went and updated the code to still store, whatever

82
00:03:48,800 --> 00:03:53,400
the actual distance was and so as a result this code is under shoot,

83
00:03:53,500 --> 00:03:56,900
it's moving things closer than they should be because of this.

84
00:03:57,100 --> 00:04:00,000
Location by 0.75 that we kind of had act in there at the time.

85
00:04:00,600 --> 00:04:03,600
So what I'd like to do is since we remove that sort of play code that

86
00:04:03,600 --> 00:04:06,200
we were doing, I'd like to remove this and make it back the way that

87
00:04:06,200 --> 00:04:07,000
it used to be.

88
00:04:07,300 --> 00:04:09,400
And so that way, now there that won't be in there.

89
00:04:09,800 --> 00:04:11,100
So it's just a little cleanup.

90
00:04:11,800 --> 00:04:14,700
We had sort of introduce them code when we were playing around at the

91
00:04:14,700 --> 00:04:18,100
end of a stream and we didn't quite restore it to proper working order

92
00:04:19,800 --> 00:04:20,800
when we had stopped.

93
00:04:20,800 --> 00:04:24,500
And so, now, the familiar at least should be presumably at the the

94
00:04:24,500 --> 00:04:27,000
distance that we thought it should be, which is not

95
00:04:27,100 --> 00:04:30,900
We a big change, but but, you know, it's better to have it that way in

96
00:04:30,900 --> 00:04:33,800
case we end up using some of that code in the final stuff, we don't

97
00:04:33,800 --> 00:04:36,300
want to then have to figure out why we have a bug anyway.

98
00:04:37,100 --> 00:04:41,600
So, let's go ahead and grab our handmade dot h here, where we have our

99
00:04:41,600 --> 00:04:44,500
to-do list, and you can kind of see that we have it broken down here,

100
00:04:44,500 --> 00:04:47,300
and I was kind of saying that like, well, we're we've only got five

101
00:04:47,300 --> 00:04:48,500
more days of programming.

102
00:04:51,200 --> 00:04:54,200
Excuse me, it's getting on allergy season here in Seattle.

103
00:04:54,200 --> 00:04:57,000
So I may still be sniffly for a while even though I'm not really sick

104
00:04:57,000 --> 00:04:57,300
anymore.

105
00:05:02,000 --> 00:05:02,500
All right.

106
00:05:05,200 --> 00:05:09,100
So we sort of said so we only have five days before we go on break.

107
00:05:09,100 --> 00:05:12,700
People were asking for a break so I can catch up before we go on break

108
00:05:12,700 --> 00:05:13,400
for a week.

109
00:05:13,500 --> 00:05:18,300
Let's focus on things that we have that have been sort of accruing

110
00:05:18,300 --> 00:05:21,500
that we'd like to just kind of finish up instead of getting into

111
00:05:21,500 --> 00:05:23,600
something new, like some of these new things that we were

112
00:05:23,600 --> 00:05:28,300
brainstorming on Friday that need to get done before we actually start

113
00:05:28,500 --> 00:05:30,100
production work on the game.

114
00:05:30,500 --> 00:05:33,500
And so what I was thinking there was, you know,

115
00:05:33,800 --> 00:05:36,200
Maybe let's say the Collision detection for now, let's do something.

116
00:05:36,200 --> 00:05:39,100
Since it's Monday, start something a little bit more straightforward.

117
00:05:39,200 --> 00:05:42,100
Let's clean up our use of Z A little bit.

118
00:05:42,600 --> 00:05:46,000
Let's just take a quick look at that, go through the code, once clean

119
00:05:46,000 --> 00:05:48,600
up, the places where we weren't using Vector threes, where we could

120
00:05:48,600 --> 00:05:55,200
have been, and maybe just kind of like, get that a little bit more

121
00:05:55,400 --> 00:05:58,000
tightened up so that we don't constantly have different things in

122
00:05:58,000 --> 00:05:59,500
there for Z versus

123
00:06:00,200 --> 00:06:00,800
Nazi.

124
00:06:01,800 --> 00:06:06,700
And so I think the place that I want to start with this was we had

125
00:06:06,700 --> 00:06:09,800
this notion of a world difference and really a world difference.

126
00:06:09,800 --> 00:06:13,600
Doesn't need to exist at all, because all it was is just a vector3

127
00:06:13,600 --> 00:06:16,500
where we have the distance in all three.

128
00:06:16,500 --> 00:06:18,700
But when we originally wrote it, we didn't have a vector3.

129
00:06:18,700 --> 00:06:22,000
So we were still, well, we didn't have any vectors at all and then we

130
00:06:22,000 --> 00:06:23,400
had only a vector to so it move it to this.

131
00:06:23,400 --> 00:06:26,400
So I'm just going to go ahead and get rid of that class entirely and

132
00:06:26,400 --> 00:06:29,300
then I'm just going to go fix, all the places that were actually using

133
00:06:29,300 --> 00:06:29,700
it.

134
00:06:30,000 --> 00:06:32,900
To just use Vector threes directly from now on.

135
00:06:33,100 --> 00:06:33,600
Right?

136
00:06:34,000 --> 00:06:37,500
And so that's kind of handy because now what we can do is we can

137
00:06:37,500 --> 00:06:41,800
actually just sort of unify a lot of this code I think to make it so

138
00:06:41,800 --> 00:06:45,100
that we don't have to worry about that anymore.

139
00:06:45,400 --> 00:06:50,000
So this still gets out the tile difference.

140
00:06:50,000 --> 00:06:55,400
The the D, the the detail XY there and what we can do is we can roll

141
00:06:55,400 --> 00:06:55,700
this.

142
00:06:55,700 --> 00:06:58,800
This computation in there as well because basically that's all the

143
00:06:58,800 --> 00:06:59,800
same like so,

144
00:07:00,200 --> 00:07:05,000
And then when we do our chunk side M we don't really know yet, how big

145
00:07:05,000 --> 00:07:07,300
our Z chunks are going to be.

146
00:07:07,300 --> 00:07:10,700
So maybe I spoke a little too soon.

147
00:07:10,700 --> 00:07:14,300
There may be, I don't quite want to do that because I'm not sure what

148
00:07:14,300 --> 00:07:15,000
we want to do with that.

149
00:07:15,000 --> 00:07:17,800
Maybe that's the first thing I kind of have to think through a little

150
00:07:17,800 --> 00:07:18,500
bit more carefully.

151
00:07:18,600 --> 00:07:22,800
Basically our chunks are probably not going to be symmetric in Z.

152
00:07:22,800 --> 00:07:27,800
So when we multiply this, we probably do want to actually say, okay,

153
00:07:27,800 --> 00:07:30,200
you know, let's go ahead and make sure that

154
00:07:30,200 --> 00:07:35,100
That our, our, our code handles that that asymmetry.

155
00:07:35,600 --> 00:07:39,500
So I'm going to go into the place where we store in our trunk side in

156
00:07:39,500 --> 00:07:43,100
meters and also do our a chunk height in meters.

157
00:07:43,100 --> 00:07:47,500
Basically, if you will or maybe we want to call it depth in meters,

158
00:07:47,500 --> 00:07:48,600
maybe a little bit better.

159
00:07:49,100 --> 00:07:50,300
I'm not sure what we want to call it.

160
00:07:50,300 --> 00:07:50,700
Exactly.

161
00:07:50,700 --> 00:07:54,800
It's kind of ambiguous because usually think of width and height but

162
00:07:54,800 --> 00:07:56,900
then you think of height in the world as being high.

163
00:07:57,700 --> 00:07:59,100
So I don't actually know.

164
00:07:59,200 --> 00:08:00,000
You know what the, what the

165
00:08:00,200 --> 00:08:05,000
Best way to think of that is, but we can think of it that way.

166
00:08:05,400 --> 00:08:08,700
The other thing I could do here is actually change about chunk side

167
00:08:08,700 --> 00:08:11,700
and M to be something that was actually just a vector.

168
00:08:11,800 --> 00:08:13,600
In fact, maybe that's a fun thing to do.

169
00:08:13,900 --> 00:08:18,900
We could do like something like, you know, III chunk dim in M,

170
00:08:18,900 --> 00:08:20,300
something like that, right?

171
00:08:20,400 --> 00:08:22,000
And then it's basically has the dimension.

172
00:08:22,000 --> 00:08:26,400
Each X, Y and Z, and then we can make them be whatever we want, right?

173
00:08:26,900 --> 00:08:29,600
And that would be interesting here, because then I can unify these

174
00:08:29,600 --> 00:08:30,100
right then.

175
00:08:30,200 --> 00:08:32,400
Can pull these in like this.

176
00:08:32,600 --> 00:08:36,000
And then what I do here is, I just bust out what I was talking about,

177
00:08:36,000 --> 00:08:39,000
before you remember, I talked about the hadamard product, right?

178
00:08:39,299 --> 00:08:41,299
I don't know if we ever actually end up implemented, the hadamard

179
00:08:41,299 --> 00:08:44,100
product we're going to want to because it's useful, especially for

180
00:08:44,100 --> 00:08:45,000
working with colors.

181
00:08:45,700 --> 00:08:47,000
So I'm going to do that, go ahead and do that.

182
00:08:47,000 --> 00:08:47,700
Hadamard product.

183
00:08:47,700 --> 00:08:50,800
And I can say that we have the chunk demand meters and I multiply that

184
00:08:51,100 --> 00:08:54,000
by that D Tau X Y Z now.

185
00:08:54,000 --> 00:08:56,300
So, this is a full one now, right?

186
00:08:56,700 --> 00:08:59,800
And then what I can do is I can add essentially

187
00:09:00,100 --> 00:09:01,600
My this will be good.

188
00:09:01,600 --> 00:09:04,300
This is going to get us a lot of little tricks in there and this is

189
00:09:04,300 --> 00:09:08,700
just our result can just be right here.

190
00:09:09,800 --> 00:09:12,100
I'll show you the other trick that I was going to hurt.

191
00:09:12,100 --> 00:09:14,600
Not trick but like thing I want to add to our to our math Library.

192
00:09:14,900 --> 00:09:15,800
So they had my product here.

193
00:09:15,800 --> 00:09:20,100
So basically this this tells us what our chunk difference was now, and

194
00:09:20,100 --> 00:09:23,300
we get to do that sort of all at once, so that we can, we can kind of

195
00:09:23,300 --> 00:09:27,000
do it without having to split it up into multiple access anymore.

196
00:09:27,400 --> 00:09:30,600
And then we have an offset here and that offset really should be

197
00:09:30,600 --> 00:09:31,800
three-dimensional as well.

198
00:09:32,100 --> 00:09:35,100
And so, I think, what we want to do is sort of move to making that

199
00:09:35,100 --> 00:09:36,300
just be a three-dimensional offset.

200
00:09:36,300 --> 00:09:39,100
So, we'll let that compiler out for now and we'll go ahead and move

201
00:09:39,100 --> 00:09:39,400
that to it.

202
00:09:39,600 --> 00:09:40,900
Mention offset soon as well.

203
00:09:42,200 --> 00:09:44,700
And then we can get rid of this because this actually, this works.

204
00:09:44,700 --> 00:09:46,100
Now that hadamard product.

205
00:09:46,900 --> 00:09:47,900
I don't know if.

206
00:09:48,600 --> 00:09:53,000
If you guys remember I talked about it a bit.

207
00:09:53,000 --> 00:09:55,000
I don't think we implemented one we didn't.

208
00:09:55,300 --> 00:09:59,700
And so we implemented our DOT product, I believe right here.

209
00:09:59,700 --> 00:10:00,200
There it is.

210
00:10:01,000 --> 00:10:04,000
We planted our DOT product or the inner product and so I'm just going

211
00:10:04,000 --> 00:10:07,900
to go ahead and also Implement while we're at it the hadamard product

212
00:10:07,900 --> 00:10:10,100
for both V2, S and B 3.

213
00:10:10,100 --> 00:10:11,300
So that's basically just

214
00:10:11,800 --> 00:10:14,800
Taking in these guys here and I had a mod product.

215
00:10:14,800 --> 00:10:17,800
Although, the name is fancy, it's just component wise multiplication.

216
00:10:17,800 --> 00:10:21,000
So basically multiply the X by the X and you stick it in X, you

217
00:10:21,000 --> 00:10:23,900
multiply the Y by the why you stick it, and why in many ways, it's

218
00:10:23,900 --> 00:10:25,700
exactly the same as the inner product.

219
00:10:25,700 --> 00:10:28,000
Except for the fact you don't some the terms.

220
00:10:28,100 --> 00:10:32,000
So you notice here we do x times X and Y times Y, and we sum the terms

221
00:10:32,100 --> 00:10:33,100
for the hadamard product.

222
00:10:33,100 --> 00:10:36,100
We leave the terms separate as they were right?

223
00:10:36,400 --> 00:10:40,700
And so that result is basically exactly the same as here, but instead

224
00:10:40,700 --> 00:10:41,600
we just actually

225
00:10:41,700 --> 00:10:44,600
We keep the two terms separate and put them into their respective

226
00:10:44,600 --> 00:10:45,000
positions.

227
00:10:45,000 --> 00:10:48,800
I don't know why that type 2 plus, they're lazy shift key, right?

228
00:10:49,400 --> 00:10:51,700
So that is all that's happening with the hadamard product.

229
00:10:51,900 --> 00:10:54,000
And similarly, we can do it for the V3.

230
00:10:54,100 --> 00:10:54,400
I don't know.

231
00:10:54,400 --> 00:10:57,400
Did we ever do our inner product or anything for the V3?

232
00:10:57,400 --> 00:10:59,200
We haven't really done anything for our V3.

233
00:10:59,200 --> 00:11:04,500
Have our V3 is basically just sitting there like we implemented.

234
00:11:04,600 --> 00:11:07,300
Literally like nothing for our v3s.

235
00:11:07,500 --> 00:11:09,300
I don't even know what we were using it for.

236
00:11:10,000 --> 00:11:11,000
That's kind of crazy.

237
00:11:11,300 --> 00:11:11,600
We

238
00:11:11,700 --> 00:11:12,600
Absolutely nothing.

239
00:11:12,900 --> 00:11:14,000
Which is kind of bizarre.

240
00:11:15,000 --> 00:11:15,500
Yeah.

241
00:11:15,600 --> 00:11:16,000
All right.

242
00:11:16,000 --> 00:11:18,600
Well, so I'm going to go ahead and do this now.

243
00:11:18,600 --> 00:11:23,300
A lot of people don't like to do this and that's totally fine.

244
00:11:23,300 --> 00:11:25,800
I'm not going to yell at anyone for this sort of thing.

245
00:11:27,500 --> 00:11:33,900
Basically, like what I do almost invariably is I do not go get

246
00:11:33,900 --> 00:11:36,800
template happy here and start making template because I find it's just

247
00:11:36,800 --> 00:11:37,900
more trouble than it's worth.

248
00:11:38,000 --> 00:11:41,100
We're Sarah Mayer such as well as compile time where it's everything

249
00:11:41,300 --> 00:11:41,500
and it

250
00:11:41,700 --> 00:11:45,700
So easy really to just go through and change it once.

251
00:11:45,700 --> 00:11:48,500
Yes, you may need to make some stupid mistakes.

252
00:11:48,900 --> 00:11:52,200
Yes, there, maybe there's a little extra typing involved.

253
00:11:53,200 --> 00:11:57,000
Oops, I want to go ahead and do a replace just in this region I don't

254
00:11:57,000 --> 00:11:59,800
deny that and so if you do want to go to template template

255
00:12:01,200 --> 00:12:04,400
I'm totally, you know, totally fine with that but I just have found

256
00:12:04,400 --> 00:12:08,200
that typically because it's so rare that you do stuff here.

257
00:12:08,200 --> 00:12:11,000
Typically you make this math file once and then you're done with it

258
00:12:11,000 --> 00:12:13,900
forever, you know, you'll debug it once and then that's it.

259
00:12:17,400 --> 00:12:21,300
I just find the introducing that kind of nastiness you just doesn't

260
00:12:21,300 --> 00:12:21,900
pay off.

261
00:12:22,700 --> 00:12:25,500
It does it isn't worth the hassle because you'll be left with those

262
00:12:25,500 --> 00:12:28,600
nasty additional compile times an additional

263
00:12:29,300 --> 00:12:32,200
Error, message, ugliness and all these extra things you'll be left

264
00:12:32,200 --> 00:12:34,900
with after you've debugged it.

265
00:12:34,900 --> 00:12:38,800
And whereas in this case, once you do that to bugging, once you're in

266
00:12:38,800 --> 00:12:40,700
kind of nice, beautiful land.

267
00:12:40,700 --> 00:12:42,300
That doesn't have any more problems.

268
00:12:42,700 --> 00:12:45,000
So anyway, I'm just going to go through here really quickly and build

269
00:12:45,000 --> 00:12:46,100
out our Vector threes as well.

270
00:12:46,100 --> 00:12:49,300
And again, this is just literally doing what your template would have

271
00:12:49,300 --> 00:12:49,500
done.

272
00:12:49,500 --> 00:12:53,800
So if you do want to do this with a template, knock yourself out, all

273
00:12:53,800 --> 00:12:57,500
you're going to have to do is basically, you know, if you don't know

274
00:12:57,500 --> 00:12:59,000
how to program templates, then you probably don't want.

275
00:12:59,200 --> 00:13:02,400
But assuming you do know how to program templates, this should be, you

276
00:13:02,400 --> 00:13:05,400
know, trivial thing to template on your, just going to template on the

277
00:13:05,400 --> 00:13:08,800
number of dimensions and you would have to stop using the dot x dot.

278
00:13:08,800 --> 00:13:12,600
Why you'd have to stop using that and start using the E syntax that we

279
00:13:12,600 --> 00:13:15,000
had, because you're only going to know numbers and you'd have to put

280
00:13:15,000 --> 00:13:17,200
four Loops in here as well and all that garbage.

281
00:13:17,300 --> 00:13:19,700
You have to do all that but you know, if you want templates you've got

282
00:13:19,700 --> 00:13:20,300
to do it, right?

283
00:13:20,300 --> 00:13:24,100
So so that's what you would do here, okay?

284
00:13:24,400 --> 00:13:27,600
And so like I said, there might be some copy and paste as I might be

285
00:13:27,600 --> 00:13:28,900
some nastiness there.

286
00:13:29,100 --> 00:13:31,400
They're what, what is?

287
00:13:31,500 --> 00:13:32,300
I don't need that?

288
00:13:32,300 --> 00:13:32,500
I don't know.

289
00:13:32,500 --> 00:13:36,800
Why was square square kind of got stuck in there that was not

290
00:13:36,800 --> 00:13:37,300
appropriate.

291
00:13:37,300 --> 00:13:38,700
Square should really be up here.

292
00:13:39,500 --> 00:13:43,800
Kind of in a section where we have our our you know scalar operator is

293
00:13:43,800 --> 00:13:48,100
kind of kind of breaking this up roughly into like scalar operators,

294
00:13:48,500 --> 00:13:49,000
right?

295
00:13:50,400 --> 00:13:51,700
For operations, I should say.

296
00:13:53,900 --> 00:13:55,700
And these are the two operations.

297
00:13:58,400 --> 00:14:02,100
All right, that we did there and then here's our B 3 operations.

298
00:14:04,600 --> 00:14:05,000
Right.

299
00:14:05,300 --> 00:14:09,200
And so then again multiplication Operator by a scalar again is just a

300
00:14:09,200 --> 00:14:13,500
scalar times, the 3 components, set it back into, you know, piecewise.

301
00:14:14,500 --> 00:14:17,300
And then again this is just an operator that that's used for the other

302
00:14:17,300 --> 00:14:18,000
syntax.

303
00:14:18,600 --> 00:14:20,800
Then there's the x equals, which again, same thing.

304
00:14:20,800 --> 00:14:22,800
Just just end up there all going to call this thing.

305
00:14:23,500 --> 00:14:26,500
You Nora, - right just flipping each of the things X y&z.

306
00:14:26,500 --> 00:14:27,500
That's how vectors work.

307
00:14:27,500 --> 00:14:29,700
You do it to each component, plus same thing.

308
00:14:29,700 --> 00:14:30,900
Do it to each component, right?

309
00:14:30,900 --> 00:14:34,200
So, we just added the Z plus equals just calling that guy.

310
00:14:34,300 --> 00:14:38,300
Up again, subtraction basically doing the same thing as the addition

311
00:14:38,300 --> 00:14:41,500
was and then we get to our hadamard product or had a more product news

312
00:14:41,500 --> 00:14:42,100
into doozy.

313
00:14:42,100 --> 00:14:45,500
Now our inner product needs to do Zine again, just adds another term

314
00:14:45,500 --> 00:14:49,400
on to the end and then our length squared and our length are

315
00:14:49,400 --> 00:14:51,800
essentially the same calls because they just leverage the fact that

316
00:14:51,800 --> 00:14:54,400
operator, I'm sorry a function or call overloading.

317
00:14:54,600 --> 00:14:58,500
We'll just call the right thing here and so that's all I wanted to do

318
00:14:58,500 --> 00:14:58,800
there.

319
00:14:58,800 --> 00:14:59,800
So then we get our hadamard product.

320
00:15:00,000 --> 00:15:03,500
Which means we can multiply out this by the scale of our chunkin, all

321
00:15:03,500 --> 00:15:03,900
Dimensions.

322
00:15:03,900 --> 00:15:05,600
So we're just taking the chunk dissed.

323
00:15:06,500 --> 00:15:09,500
The chunk distance between those two positions and multiplying It Out

324
00:15:09,500 --> 00:15:10,800
by however, much that would be.

325
00:15:10,800 --> 00:15:12,000
So we get our meters back.

326
00:15:12,300 --> 00:15:14,500
These are now going to be the threes, right?

327
00:15:14,700 --> 00:15:18,600
So this is going to be I'll be 3 now, like so.

328
00:15:23,500 --> 00:15:34,100
I feel like this to do is, is less useful than it was any more tests

329
00:15:34,100 --> 00:15:38,200
to be able to figure out where they are or other, which wrong so well

330
00:15:38,200 --> 00:15:39,200
I guess not.

331
00:15:39,200 --> 00:15:43,100
So it still remains to be seen

332
00:15:45,500 --> 00:15:48,400
I wonder this maybe something.

333
00:15:48,400 --> 00:15:51,600
We can actually get rid of now, which is kind of humorous.

334
00:15:55,100 --> 00:15:55,800
Gosh.

335
00:16:00,600 --> 00:16:04,100
I hate to break up the flow here, but I just want to point it out.

336
00:16:04,300 --> 00:16:07,500
I think we may have architected ourselves into a position where we

337
00:16:07,500 --> 00:16:10,600
could actually do the thing that we said we might want to do in a to

338
00:16:10,600 --> 00:16:11,100
do.

339
00:16:11,300 --> 00:16:16,100
If we could figure out how to do it, The Puzzler may have unpleasant

340
00:16:16,100 --> 00:16:16,700
itself.

341
00:16:17,100 --> 00:16:21,800
And the reason I say that is because now we no longer operate on

342
00:16:21,800 --> 00:16:25,100
entities, without bringing them into the same region.

343
00:16:25,300 --> 00:16:28,800
And in order to have brought them into the same region, we iterated

344
00:16:28,800 --> 00:16:29,100
over the

345
00:16:29,300 --> 00:16:33,900
Now, chunks, which means we don't need to know what tile chunk and

346
00:16:33,900 --> 00:16:35,200
entities in anymore.

347
00:16:35,200 --> 00:16:38,000
Using its World position, right?

348
00:16:38,800 --> 00:16:42,300
So we would no longer have to store that we might still use it, to

349
00:16:42,300 --> 00:16:42,900
figure out.

350
00:16:42,900 --> 00:16:45,700
We still need a chunk XYZ thing.

351
00:16:45,800 --> 00:16:48,400
That's basically, just lets us know which World Chunk.

352
00:16:48,400 --> 00:16:49,800
We would put this guy in.

353
00:16:50,100 --> 00:16:52,700
So we still need to compute, x, y and Z's, but we wouldn't need to

354
00:16:52,700 --> 00:16:53,600
store them anymore.

355
00:16:53,900 --> 00:16:58,400
So, I think The Puzzler, the answer to this Puzzler may actually be

356
00:16:58,600 --> 00:16:59,100
the same

357
00:16:59,200 --> 00:17:01,000
Region solved the puzzle.

358
00:17:02,100 --> 00:17:08,599
So I'm going to go ahead and just say that, maybe we're going to stick

359
00:17:08,599 --> 00:17:09,200
that.

360
00:17:11,000 --> 00:17:16,900
Solve The Puzzler from World position because we may have accidentally

361
00:17:17,000 --> 00:17:18,300
by doing a bunch of other architecture.

362
00:17:18,300 --> 00:17:19,200
Work that needed to get done.

363
00:17:19,200 --> 00:17:23,599
We may have backed into a solution to this problem that was puzzling

364
00:17:23,599 --> 00:17:26,000
us before, which is pretty awesome.

365
00:17:27,200 --> 00:17:28,300
That would be pretty awesome.

366
00:17:28,700 --> 00:17:32,800
Okay, so there's our rope system is going to generate more compiler

367
00:17:32,800 --> 00:17:34,200
errors and work through them here.

368
00:17:34,700 --> 00:17:39,200
So now when we do is canonical our world side in chunk side in meters,

369
00:17:40,100 --> 00:17:45,100
we need to now know, basically, which dimension this actually was when

370
00:17:45,100 --> 00:17:46,000
we do is canonical.

371
00:17:46,000 --> 00:17:49,300
So you can see when someone calls this canonical, they're basically

372
00:17:49,300 --> 00:17:54,300
going to have to know which which one that was now that's the only

373
00:17:54,300 --> 00:17:57,400
place I believe on those couple.

374
00:17:57,400 --> 00:17:59,500
There's two other places that call it, okay?

375
00:17:59,500 --> 00:17:59,900
So basically

376
00:18:00,000 --> 00:18:04,500
What's going to happen here is the is canonical needs to know what the

377
00:18:04,500 --> 00:18:06,000
chunk side in meters.

378
00:18:06,000 --> 00:18:10,800
Actually is we could do that in two ways but since world is only

379
00:18:10,800 --> 00:18:12,600
really used to access it.

380
00:18:12,700 --> 00:18:15,200
I'm thinking maybe what we do is we just pass that.

381
00:18:15,500 --> 00:18:22,100
So we do chunk side in meters or redo chunk dim like that and we

382
00:18:22,100 --> 00:18:25,200
replace this with with chunk Tim like so,

383
00:18:27,500 --> 00:18:31,000
And then when those guys used to pass the world instead of what

384
00:18:31,000 --> 00:18:34,400
they're doing is now they're passing chunk demand M.

385
00:18:34,500 --> 00:18:39,100
This thing right here right there, passing chunk demand meters and

386
00:18:39,100 --> 00:18:42,000
they're going to pass the X for the X and they're going to pass the

387
00:18:42,000 --> 00:18:42,800
wife or the Y.

388
00:18:43,000 --> 00:18:43,200
Right.

389
00:18:43,200 --> 00:18:45,900
And so you know pretty simple code modification there.

390
00:18:47,400 --> 00:18:48,600
Yeah, works that out in that.

391
00:18:48,600 --> 00:18:52,400
And so now for canonical I suppose what we should also do is start

392
00:18:52,400 --> 00:18:55,600
adding the Z in there because now we're going to want to start

393
00:18:55,600 --> 00:18:57,100
validating our Z's.

394
00:18:57,300 --> 00:19:02,400
Well, jumped him and M like so we'll so we'll go ahead and do that.

395
00:19:03,000 --> 00:19:03,500
Choose me.

396
00:19:09,500 --> 00:19:11,200
And then, we're just going to keep on going, right?

397
00:19:11,200 --> 00:19:14,900
We're just going to keep on pushing through that that'll do actually.

398
00:19:14,900 --> 00:19:15,800
That does it right there.

399
00:19:15,800 --> 00:19:17,100
We don't actually have to do anymore there.

400
00:19:17,100 --> 00:19:22,500
Some skill at the compile errors guide is here not a member of V to

401
00:19:22,500 --> 00:19:23,400
you are right sir?

402
00:19:23,400 --> 00:19:25,700
That's because now we're taking v3s.

403
00:19:26,800 --> 00:19:27,300
All right.

404
00:19:27,400 --> 00:19:30,500
And so when we initialize the world we need to actually go ahead and

405
00:19:30,500 --> 00:19:31,400
set that up.

406
00:19:31,400 --> 00:19:35,300
We need to set up that chunk side and M to basically be something

407
00:19:35,300 --> 00:19:35,900
reasonable.

408
00:19:36,000 --> 00:19:38,400
Now, I don't think we want

409
00:19:40,700 --> 00:19:46,400
I don't think we want to use this value for Z because I think Z is

410
00:19:46,400 --> 00:19:48,500
going to want to be smaller than that.

411
00:19:48,700 --> 00:19:53,200
I feel like RZ slices are only going to be like kind of one tile deep.

412
00:19:53,200 --> 00:19:59,800
So, you know, if our tiles are square, then I would say that our kind

413
00:19:59,800 --> 00:20:05,600
of our chunk side for Z is actually just just going to be that tile

414
00:20:05,600 --> 00:20:06,500
side, right?

415
00:20:06,500 --> 00:20:08,900
So it's just, it's just going to be one tile high.

416
00:20:09,200 --> 00:20:10,300
And when they Stack Up,

417
00:20:10,600 --> 00:20:13,000
Because we're not storing 16 by 16.

418
00:20:13,000 --> 00:20:17,200
Like we were, I feel like that's probably how we want to slice it.

419
00:20:17,300 --> 00:20:20,000
Again, we don't have tiles anymore per se.

420
00:20:20,200 --> 00:20:22,200
So this is really a meaningless measure.

421
00:20:22,300 --> 00:20:24,300
We could just stick a number of meters in here.

422
00:20:24,300 --> 00:20:27,300
The tiles per chunk is not useful.

423
00:20:27,700 --> 00:20:30,400
It's not a meat, it's not really a useful metric.

424
00:20:30,400 --> 00:20:31,400
It's mostly just something.

425
00:20:31,400 --> 00:20:34,200
We're kind of still using to guide our construction, but we could

426
00:20:34,200 --> 00:20:37,500
totally pull that out eventually and it won't matter but either way, I

427
00:20:37,500 --> 00:20:39,200
think that's roughly what we want to do there.

428
00:20:40,500 --> 00:20:41,900
Now, let me just take a quick look.

429
00:20:41,900 --> 00:20:44,100
I want to make sure that we're not missing something here.

430
00:20:45,000 --> 00:20:46,400
This stuff get World chunk.

431
00:20:46,400 --> 00:20:50,900
Doesn't really care about those offsets, but I just want to make sure

432
00:20:50,900 --> 00:20:53,100
these guys aren't doing anything weird.

433
00:20:53,100 --> 00:20:58,100
It looks like they're all pretty good with the way that they're

434
00:20:58,100 --> 00:20:59,100
working.

435
00:20:59,700 --> 00:20:59,800
So

436
00:21:00,000 --> 00:21:01,100
I think that's fine.

437
00:21:01,700 --> 00:21:04,100
I think that's that's probably just fine.

438
00:21:04,600 --> 00:21:08,700
So what we now would move on to is that we canonicalize stuff.

439
00:21:09,100 --> 00:21:13,600
I did I do here chunk side and M is not a member of world.

440
00:21:13,600 --> 00:21:15,200
It's chunked in meters.

441
00:21:15,200 --> 00:21:16,100
It's try that again.

442
00:21:16,900 --> 00:21:17,200
Yeah.

443
00:21:18,100 --> 00:21:22,100
So let's do that and tile side and M I guess is also something we

444
00:21:22,100 --> 00:21:24,800
probably want to get rid of eventually but you know it's kind of their

445
00:21:24,800 --> 00:21:27,100
it's a Vestige will remain is not harming us so we'll leave it for

446
00:21:27,100 --> 00:21:27,500
now.

447
00:21:28,800 --> 00:21:34,700
All right, so when we actually do our, okay?

448
00:21:34,700 --> 00:21:36,400
So this is actually pretty interesting as well.

449
00:21:36,600 --> 00:21:39,900
I'll just kind of show you another thing that I usually often do here

450
00:21:39,900 --> 00:21:42,500
and it's Now's the Time to do it for sure.

451
00:21:43,100 --> 00:21:47,500
So what you can see here is when I have this offset that I'm

452
00:21:47,500 --> 00:21:52,500
producing, we could be doing this entirely in bulk if we wanted to, I

453
00:21:52,500 --> 00:21:52,800
guess.

454
00:21:52,800 --> 00:21:53,900
Now, you know what never mind.

455
00:21:54,000 --> 00:21:54,900
I won't bother doing that.

456
00:21:54,900 --> 00:21:56,700
I was going to show something else, but it's just, it would just get

457
00:21:56,700 --> 00:21:57,900
us off topic, really doesn't matter.

458
00:21:58,700 --> 00:22:01,100
But point, being our world chunk side and M.

459
00:22:01,100 --> 00:22:04,800
Now, what we actually, again, want to do is, we would now want to pass

460
00:22:04,800 --> 00:22:08,600
that that chunk Tim along the axis that we're talking about.

461
00:22:08,700 --> 00:22:11,100
And so, we're just going to just going to pull out just that chunk,

462
00:22:11,100 --> 00:22:14,400
Tim that we're doing, and that kind of lines up nicely with how we

463
00:22:14,400 --> 00:22:15,900
modified is canonical.

464
00:22:15,900 --> 00:22:19,700
So that the data just flows right through exactly as it should and

465
00:22:19,700 --> 00:22:24,700
that's a good thing and so that will do the re canonicalize for us.

466
00:22:25,000 --> 00:22:28,000
But now everywhere that calls that re canonicalize is going to have to

467
00:22:28,500 --> 00:22:29,600
use all three.

468
00:22:29,600 --> 00:22:30,900
So I'm going to go ahead and do that.

469
00:22:30,900 --> 00:22:34,700
And now we're going to have to pass that proper that proper chunked

470
00:22:34,700 --> 00:22:38,900
in, in meters for each of our Dimensions.

471
00:22:39,000 --> 00:22:42,000
Like, so there's our why, there's our Z, right?

472
00:22:42,400 --> 00:22:43,100
And so, there we go.

473
00:22:43,700 --> 00:22:48,100
Now, this is now, mapping into chunks face is going to want to take a

474
00:22:48,100 --> 00:22:50,100
three dimensional offset now, because again, we're sending everything,

475
00:22:50,100 --> 00:22:50,900
the three dimensions.

476
00:22:50,900 --> 00:22:54,400
So, we want to allow people to pass in offsets and Z that will get

477
00:22:54,400 --> 00:22:57,200
reconnect lies back correctly because that's how the same region is

478
00:22:57,200 --> 00:22:58,400
going to map those things back together.

479
00:22:58,500 --> 00:23:00,900
They're so we want to make sure that's correct.

480
00:23:01,100 --> 00:23:01,800
Let me go back there.

481
00:23:01,800 --> 00:23:03,800
We kind of got out of that quickly because I guess there were no more

482
00:23:03,800 --> 00:23:07,200
Powers but I want to make sure yes you can kind of see I don't know

483
00:23:07,200 --> 00:23:08,300
what's going on here.

484
00:23:08,600 --> 00:23:11,300
So we're taking a chunk position from tile position.

485
00:23:12,400 --> 00:23:15,700
That's basically a thing that's supposed to produce these for us.

486
00:23:15,700 --> 00:23:16,000
This was.

487
00:23:16,000 --> 00:23:22,000
Yeah, so we want to do here is we want to kind of be able to produce a

488
00:23:22,000 --> 00:23:27,400
V3 out of this because we don't have yeah, we want to be able to

489
00:23:27,400 --> 00:23:28,300
produce a world position.

490
00:23:28,500 --> 00:23:29,000
Out of that.

491
00:23:29,000 --> 00:23:33,600
So really what we want to do here is we would want to set that result.

492
00:23:34,100 --> 00:23:36,100
So I'm just going to do this are we don't really need to do this, I'm

493
00:23:36,100 --> 00:23:37,000
going to show it.

494
00:23:37,600 --> 00:23:42,700
So I think what we should say is basically the plane where the actual

495
00:23:42,700 --> 00:23:46,000
like people are standing on is generally going to be Z equals zero for

496
00:23:46,200 --> 00:23:46,800
a given.

497
00:23:46,900 --> 00:23:48,700
Like that's the basis point, right?

498
00:23:49,000 --> 00:23:54,800
So I think that's better than having it be the - bottom of, you know,

499
00:23:54,800 --> 00:23:56,700
- half tile side and M.

500
00:23:57,000 --> 00:23:58,400
And the reason I think that is because we don't

501
00:23:58,500 --> 00:23:59,900
Want to have you oscillate?

502
00:24:00,100 --> 00:24:02,600
Very close to the bottom of the thing.

503
00:24:02,600 --> 00:24:07,100
We'd rather you have you be sort of well within the Z bounds of a tile

504
00:24:07,100 --> 00:24:09,300
when you're standing on the ground, right?

505
00:24:09,600 --> 00:24:10,400
So I'm going to leave.

506
00:24:10,400 --> 00:24:15,100
Oops, I'm going to leave that at zero for this.

507
00:24:17,900 --> 00:24:18,700
although,

508
00:24:19,900 --> 00:24:25,000
I guess we still want to do this in case we set tile side and M, to be

509
00:24:25,000 --> 00:24:25,700
something.

510
00:24:33,000 --> 00:24:33,800
You know, I'm saying to you.

511
00:24:35,700 --> 00:24:36,600
Hmm.

512
00:24:38,200 --> 00:24:41,100
Hmm, hmm.

513
00:24:41,100 --> 00:24:41,900
I say

514
00:24:46,000 --> 00:24:49,700
So, you know, technically like I saying that, you know, setting it to

515
00:24:49,700 --> 00:24:54,600
0, we know that that would work because we know what the tile side,

516
00:24:54,800 --> 00:24:57,300
what, what are our tiles per chunk?

517
00:24:57,300 --> 00:24:57,600
Is?

518
00:24:57,900 --> 00:25:04,200
We know, our tiles for chunk, is always going to be one, right?

519
00:25:04,400 --> 00:25:10,400
So we essentially know what this works out to be, but in case we

520
00:25:10,400 --> 00:25:15,600
decide to change that later, it does seem like

521
00:25:15,800 --> 00:25:18,600
Would kind of want to change that?

522
00:25:21,000 --> 00:25:22,800
Yeah, like we kind of want to change that.

523
00:25:23,000 --> 00:25:27,900
Now, here's a question for you and I guess I don't know why we weren't

524
00:25:27,900 --> 00:25:32,100
doing it this way to get in with I wonder why we're not just using map

525
00:25:32,100 --> 00:25:37,000
into chunks Pace with a mapping Center of 02 always produce this.

526
00:25:38,200 --> 00:25:40,700
It seems kind of weird, right?

527
00:25:42,700 --> 00:25:45,000
So, I'm not really sure why we're doing it this way.

528
00:25:45,700 --> 00:25:48,500
So, I'm wondering if maybe we shouldn't Force everything to go through

529
00:25:48,500 --> 00:25:52,600
here anyway, am I totally off base there?

530
00:25:53,000 --> 00:25:57,300
I guess, because when things get larger, maybe that wouldn't be a good

531
00:25:57,300 --> 00:25:58,500
idea, potentially.

532
00:25:58,900 --> 00:26:00,500
You'd rather do the Divide first.

533
00:26:00,500 --> 00:26:03,300
But is that really a concern?

534
00:26:04,300 --> 00:26:09,600
I don't know, because we're doing the math here, either way.

535
00:26:09,600 --> 00:26:11,200
So it kind of seems to me.

536
00:26:12,200 --> 00:26:14,200
It kind of seems to me like for now.

537
00:26:14,200 --> 00:26:18,900
Anyway you would want to just go ahead and do that directly, so I

538
00:26:18,900 --> 00:26:22,700
think I'm just going to go ahead and do that, right?

539
00:26:22,700 --> 00:26:24,800
I mean that seems logical enough right?

540
00:26:24,800 --> 00:26:28,200
You would just say okay we've got the tile side and M I'm just going

541
00:26:28,200 --> 00:26:31,500
to go ahead and take these and multiply them out, right?

542
00:26:31,500 --> 00:26:34,200
So I'm just going to go ahead and say that basically got a V3 which is

543
00:26:34,200 --> 00:26:35,700
my offset, right?

544
00:26:36,900 --> 00:26:43,000
And the offsets going to be, you know, whatever that that AB style X

545
00:26:43,000 --> 00:26:44,100
is X.

546
00:26:44,100 --> 00:26:46,600
The it's really just going to be, you know what?

547
00:26:46,600 --> 00:26:47,500
It's just going to be this.

548
00:26:48,200 --> 00:26:52,800
It's going to be that hadamard product, right of the chunk demand m.

549
00:26:54,200 --> 00:26:55,900
Let's talk to me, m.

550
00:26:56,800 --> 00:26:59,000
It's going to be that hadamard product of the chunk demand m.

551
00:27:00,000 --> 00:27:03,600
Times, whatever, the the ab style X AB style.

552
00:27:03,600 --> 00:27:07,100
Why and abs tiles e are right.

553
00:27:07,500 --> 00:27:11,400
And that seems that seems pretty pretty easy.

554
00:27:11,400 --> 00:27:16,900
To to, you know, come by here, we met, we're gonna probably wanna do

555
00:27:16,900 --> 00:27:18,900
something different when we do world-building, anyway, and that's the

556
00:27:18,900 --> 00:27:21,200
only thing this was used for, so kind of feels to me.

557
00:27:21,200 --> 00:27:25,300
Like that's a little bit better for now, and, and we can that way we

558
00:27:25,300 --> 00:27:27,200
can worry about alignment and all that other stuff in a totally

559
00:27:27,200 --> 00:27:28,700
separate pass.

560
00:27:30,000 --> 00:27:33,000
So I don't I think this just seems like we should just get that's all

561
00:27:33,000 --> 00:27:33,900
just goodbye.

562
00:27:33,900 --> 00:27:35,000
Like why is that even there?

563
00:27:35,000 --> 00:27:35,800
It's just no good.

564
00:27:37,200 --> 00:27:40,600
And so what I'd say is, we'll set our base posed to be all zeros,

565
00:27:40,700 --> 00:27:41,400
right?

566
00:27:42,100 --> 00:27:46,000
And then we will go ahead and say whatever our world position result

567
00:27:46,000 --> 00:27:50,800
is is just going to be map into chunks, Pace will pass, the world will

568
00:27:50,800 --> 00:27:53,600
pass that base position and then we'll pass the offset that we just

569
00:27:53,600 --> 00:27:56,600
computed and they said we'll just leverage this routine that way we

570
00:27:56,600 --> 00:27:57,200
know that it's over.

571
00:27:57,300 --> 00:27:58,600
Everything's going through this routine.

572
00:27:58,700 --> 00:27:59,900
Now eventually that may be problematic

573
00:28:00,000 --> 00:28:02,400
I like because of precision when we get way out there.

574
00:28:02,700 --> 00:28:04,300
But like I said, I think we're going to switch to a different thing

575
00:28:04,300 --> 00:28:06,600
for building world's anyway, we haven't done World building yet, so

576
00:28:06,600 --> 00:28:08,900
when we do World, building, will probably have a smartest game anyway.

577
00:28:11,100 --> 00:28:16,800
Probably something more like some regions that like we move around to

578
00:28:16,800 --> 00:28:17,300
do stuff.

579
00:28:17,300 --> 00:28:20,100
Okay, so that seems fine to me.

580
00:28:20,700 --> 00:28:25,900
Our subtraction looks like it's pretty much already worked out so

581
00:28:25,900 --> 00:28:26,800
that's all good.

582
00:28:28,600 --> 00:28:31,000
Yeah, that's going to give us a few three results after we do that

583
00:28:31,000 --> 00:28:31,400
detail.

584
00:28:31,400 --> 00:28:33,800
Where did that stuff centered?

585
00:28:33,800 --> 00:28:38,400
Chunk point you even call that anymore and don't even know if we call

586
00:28:38,400 --> 00:28:38,900
that anymore.

587
00:28:38,900 --> 00:28:40,000
But hey, it's looks fine.

588
00:28:40,000 --> 00:28:40,700
So we'll leave it.

589
00:28:41,900 --> 00:28:44,200
Change in C position location raw.

590
00:28:44,200 --> 00:28:46,600
That doesn't really use the offset anywhere.

591
00:28:46,800 --> 00:28:50,500
So I'm pretty sure that's probably fine and then changing the location

592
00:28:50,500 --> 00:28:50,900
regular?

593
00:28:50,900 --> 00:28:53,200
Yeah, I think those are probably mostly fine.

594
00:28:53,700 --> 00:28:55,500
So let's go ahead and put the code that uses it.

595
00:28:55,500 --> 00:29:02,600
Now, this is just going to be a V3 like, so getting our Sim Space P.

596
00:29:02,800 --> 00:29:05,600
I don't know why our Sim Space P was a V2.

597
00:29:06,200 --> 00:29:09,000
I guess we just kind of carried that through for now.

598
00:29:09,000 --> 00:29:10,600
I guess I'll go ahead and

599
00:29:11,600 --> 00:29:13,500
And well, you know what?

600
00:29:14,800 --> 00:29:17,100
So be a good time to do this to one thing that I like to do.

601
00:29:17,100 --> 00:29:20,000
Just go nuts with the anonymous unions which I love Anonymous unions.

602
00:29:20,000 --> 00:29:20,800
They're the best.

603
00:29:22,700 --> 00:29:25,700
So we basically have a struct that has an x y and it, right?

604
00:29:25,800 --> 00:29:27,200
And now we have a V3.

605
00:29:27,200 --> 00:29:30,500
And so what I'd like to do with this V3 is I'd like to be able to just

606
00:29:30,500 --> 00:29:33,400
say I want the XY coordinates out of it, right?

607
00:29:33,500 --> 00:29:34,900
That's what I'd like to be able to do there.

608
00:29:35,700 --> 00:29:39,400
I'd like to upgrade this routine to use the 3s, but I want to do that

609
00:29:39,400 --> 00:29:40,200
in a second pass.

610
00:29:40,200 --> 00:29:42,000
So I don't change too many things at once.

611
00:29:42,800 --> 00:29:48,600
So what I can do, right, is I can make another struct here, right?

612
00:29:48,600 --> 00:29:53,000
That actually has just that the X Y in it.

613
00:29:53,200 --> 00:29:58,600
Right, something that looks, you know, something that looked like

614
00:29:58,600 --> 00:29:59,500
this, I guess.

615
00:30:00,000 --> 00:30:07,700
anything if I have a an XY like so on, and

616
00:30:09,400 --> 00:30:11,500
You know, just a pad on here, something like this.

617
00:30:12,800 --> 00:30:13,300
Right.

618
00:30:13,500 --> 00:30:17,200
I may know it's a little weird, but you could imagine something like

619
00:30:17,200 --> 00:30:17,600
this.

620
00:30:18,600 --> 00:30:23,100
Where, this way I can grab the XY by just typing X Y.

621
00:30:23,100 --> 00:30:24,800
I'm not sure if that makes sense.

622
00:30:25,400 --> 00:30:30,300
I know it's a little confusing but hopefully that you can kind of see

623
00:30:30,400 --> 00:30:32,500
if I just stack enough of these things up on here.

624
00:30:32,600 --> 00:30:36,300
I can actually grab out the XY by just typing x y, and it's in the

625
00:30:36,300 --> 00:30:41,100
same place as the X and the Y, which makes it work, right?

626
00:30:42,500 --> 00:30:43,500
So, yeah, I don't know.

627
00:30:43,500 --> 00:30:44,500
Can do something like that.

628
00:30:44,500 --> 00:30:49,300
You can also do something like this if you were so inclined, something

629
00:30:49,300 --> 00:30:52,500
that looks like that if you want to be able to go out the y z.

630
00:30:52,500 --> 00:30:55,200
So I don't know.

631
00:30:55,200 --> 00:30:56,400
It's just kind of interesting thing.

632
00:30:56,400 --> 00:31:00,200
I don't know if that makes any sense, but it just kind of fun.

633
00:31:00,200 --> 00:31:03,200
And then you can see that code compiled properly where I did that XY.

634
00:31:03,200 --> 00:31:05,300
It's just kind of a fun little trick.

635
00:31:05,300 --> 00:31:10,100
So I kind of like to do that and and works on all the compilers I use.

636
00:31:10,100 --> 00:31:11,700
So I'm pretty happy with it.

637
00:31:12,500 --> 00:31:13,900
Okay, so my map into chunks face.

638
00:31:13,900 --> 00:31:19,500
Now one problem with my map and a trunk space is we are now going to

639
00:31:19,500 --> 00:31:23,400
have to start thinking about Z in terms of when we do that, Min Corner

640
00:31:23,400 --> 00:31:24,300
Max Corner stuff.

641
00:31:24,400 --> 00:31:25,500
Now, right now.

642
00:31:26,600 --> 00:31:30,400
We don't really have a concept of a three-dimensional rectangle.

643
00:31:30,900 --> 00:31:35,600
I don't know if we need one or not but does kind of seem to some

644
00:31:35,600 --> 00:31:39,800
degree like really we don't I don't know how much we really want

645
00:31:39,800 --> 00:31:40,200
rectangle.

646
00:31:40,200 --> 00:31:43,200
2's at all, it may be that we mostly just want rectangle threes.

647
00:31:44,400 --> 00:31:48,400
But again I'm not gonna I'm Not Really Gonna fuss with that too much

648
00:31:48,500 --> 00:31:49,200
just yet.

649
00:31:49,300 --> 00:31:53,200
I'm going to go ahead and make v3's out of these guys.

650
00:31:53,700 --> 00:31:56,100
And so one thing that you can kind of do

651
00:31:56,300 --> 00:31:59,400
We can go ahead and in our handmade math where we have these V3

652
00:31:59,400 --> 00:32:02,800
Constructors, we can also make them and they're not, I don't mean see

653
00:32:02,800 --> 00:32:05,400
what's left of our sites mean thing, that make something that makes

654
00:32:05,400 --> 00:32:06,000
something else.

655
00:32:06,800 --> 00:32:11,300
Obviously, these are not actual Constructors, so we can pass a, an

656
00:32:11,300 --> 00:32:14,100
ex-wife, or the first ones, and do it like this.

657
00:32:14,200 --> 00:32:14,500
Oops.

658
00:32:15,500 --> 00:32:20,600
So that we can sort of easily easily construct, a vector, 3 by

659
00:32:20,600 --> 00:32:23,100
extension, which is kind of nice, right?

660
00:32:23,300 --> 00:32:24,000
So there you go.

661
00:32:24,600 --> 00:32:26,100
We'll just extend those guys out.

662
00:32:26,200 --> 00:32:27,500
Out for now.

663
00:32:29,400 --> 00:32:31,500
And same thing in here.

664
00:32:31,500 --> 00:32:34,500
Our entity class that we have here.

665
00:32:34,500 --> 00:32:37,200
And again, I use the words class and Constructor here.

666
00:32:37,800 --> 00:32:41,700
Obviously, we don't have a classic instructor but you and I'm talking

667
00:32:41,700 --> 00:32:42,200
about.

668
00:32:43,000 --> 00:32:44,300
I don't really mean implementation.

669
00:32:44,300 --> 00:32:48,900
I mean, conceptually something to think about it is typically called

670
00:32:48,900 --> 00:32:49,700
The Entity class.

671
00:32:49,700 --> 00:32:53,500
And so, you know, imagine I had typed that if you're someone who likes

672
00:32:53,500 --> 00:32:55,400
classes, the actual classes better.

673
00:32:55,900 --> 00:32:59,100
So anyway in our same entity, we

674
00:32:59,200 --> 00:32:59,500
Have.

675
00:33:00,400 --> 00:33:00,800
Jimmy.

676
00:33:02,400 --> 00:33:06,700
A p which is only two dimensional and then we restoring our disease

677
00:33:06,700 --> 00:33:07,200
here.

678
00:33:07,400 --> 00:33:12,600
And so what I'd like to do is just go ahead and update our all of our

679
00:33:12,600 --> 00:33:14,200
stuff to just go in three dimensions.

680
00:33:14,200 --> 00:33:14,800
Right.

681
00:33:15,000 --> 00:33:16,500
Which actually shouldn't be too hard.

682
00:33:16,500 --> 00:33:18,600
Even that sounds like a pretty big change.

683
00:33:18,800 --> 00:33:20,200
It shouldn't be too.

684
00:33:20,300 --> 00:33:21,400
Big of a deal.

685
00:33:21,600 --> 00:33:23,400
I don't know that the chunk Z.

686
00:33:23,400 --> 00:33:26,600
I'm not even sure why that chunk Z is still there to be honest with

687
00:33:26,600 --> 00:33:26,800
you.

688
00:33:26,800 --> 00:33:31,600
I'm not sure what we're doing with it, we're sort of using the

689
00:33:31,800 --> 00:33:37,900
Trunk Z for some reason, we're just directly setting it which isn't

690
00:33:38,000 --> 00:33:40,500
doesn't super make a whole lot of sense and we're not using the one

691
00:33:40,500 --> 00:33:41,000
out of here anyway.

692
00:33:41,000 --> 00:33:43,000
So I'm just going to I'm just going to delete that because I don't

693
00:33:43,000 --> 00:33:47,300
actually know why that's there or what's going on with that.

694
00:33:47,500 --> 00:33:48,000
Alright.

695
00:33:48,100 --> 00:33:52,100
So we have our invalid PR invalid P needs to get boosted up a little

696
00:33:52,100 --> 00:33:52,900
bit as well.

697
00:33:52,900 --> 00:33:55,000
Like so into a V3.

698
00:33:55,000 --> 00:34:01,600
Oops that and then we're going to have to actually take Vector 3.

699
00:34:01,700 --> 00:34:05,300
He's when we, when we set things, again, just pushing the compiler

700
00:34:05,300 --> 00:34:08,699
errors forward to like bring me through the code in a front that will

701
00:34:08,699 --> 00:34:11,199
allow me to change the things that need to get changed, right?

702
00:34:11,500 --> 00:34:12,300
That makes sense.

703
00:34:14,699 --> 00:34:16,900
So we're all good, the result here.

704
00:34:16,900 --> 00:34:19,800
Now again, we can now make this change that we didn't make before.

705
00:34:20,199 --> 00:34:24,600
Now, our results is just that it just the direct result of the

706
00:34:24,600 --> 00:34:25,400
subtraction.

707
00:34:26,100 --> 00:34:28,600
This Sim space p is the same thing.

708
00:34:28,600 --> 00:34:31,600
In the words calling, there is not going to return us a video.

709
00:34:31,800 --> 00:34:32,199
Three.

710
00:34:32,400 --> 00:34:36,699
So off we go with that and our ad entity is going to have to be

711
00:34:36,699 --> 00:34:38,100
upgraded to take one as well.

712
00:34:38,600 --> 00:34:41,300
So that is taking a V3 now.

713
00:34:41,300 --> 00:34:45,600
Like so let's take a look in here again.

714
00:34:45,800 --> 00:34:47,600
Same thing, just change that up.

715
00:34:47,800 --> 00:34:49,600
And most of these are just passing through.

716
00:34:50,000 --> 00:34:53,300
So I don't suspect, there'd be a whole lot there.

717
00:34:53,600 --> 00:34:55,500
So we do our is in rectangle check?

718
00:34:56,800 --> 00:34:57,100
Yeah.

719
00:34:57,100 --> 00:35:00,400
I mean I'm kind of thinking that we pretty much always want.

720
00:35:00,600 --> 00:35:01,100
That isn't a

721
00:35:01,700 --> 00:35:04,600
Let's check to go ahead and be on a rectangle, three.

722
00:35:04,700 --> 00:35:08,700
So I'm sort of thinking to this, let's just go ahead and do that now

723
00:35:08,800 --> 00:35:11,500
right, let's just go ahead and do that so that we don't have to deal

724
00:35:11,500 --> 00:35:12,100
with it later.

725
00:35:12,100 --> 00:35:15,700
We'll just say that we're going to actually have rectangle 3 as well.

726
00:35:15,900 --> 00:35:19,800
And I don't even know if we really need rectangle 20s anymore, but you

727
00:35:19,800 --> 00:35:20,900
know, what do you do?

728
00:35:22,500 --> 00:35:29,100
So let's see where our rectangle to use, they should have been in here

729
00:35:29,100 --> 00:35:30,500
somewhere.

730
00:35:30,800 --> 00:35:31,300
There they are.

731
00:35:31,700 --> 00:35:33,900
So those guys going to be rectangle, threes, and then I'll just go

732
00:35:33,900 --> 00:35:37,100
into our math again and build those out.

733
00:35:38,000 --> 00:35:45,000
So here is our rectangle to OKC, rectangle to and I'm going to go

734
00:35:45,000 --> 00:35:48,400
ahead and move the sky up as well, because we kind of have our our

735
00:35:48,400 --> 00:35:50,000
definitions up at the top here.

736
00:35:51,000 --> 00:35:52,200
All right, Andrea.

737
00:35:52,300 --> 00:35:56,300
All that is exact same code just with the v3s, right?

738
00:35:56,700 --> 00:35:58,600
And so it's exactly the same stuff here.

739
00:35:59,100 --> 00:35:59,700
And again,

740
00:36:00,400 --> 00:36:02,600
All the same things I said before, applies, if you'd like to use

741
00:36:02,600 --> 00:36:04,900
templates here, be my guest.

742
00:36:05,600 --> 00:36:10,700
I don't tend to prefer that approach but obviously you know, it all

743
00:36:10,700 --> 00:36:14,600
depends on what your experience is and what your priorities are in

744
00:36:14,600 --> 00:36:18,900
terms of what you're doing, whether that will work out better for you.

745
00:36:20,500 --> 00:36:25,700
So be advised, it wouldn't be hard to template eyes and I think it

746
00:36:25,700 --> 00:36:26,500
should be pretty obvious.

747
00:36:26,500 --> 00:36:31,100
Why basically, the code is, is pretty straightforward, right?

748
00:36:32,500 --> 00:36:37,800
So, anyway, you know this, I wonder why this isn't just taking also

749
00:36:39,800 --> 00:36:42,200
A vector here, right?

750
00:36:42,500 --> 00:36:44,400
Seems like this would just be that.

751
00:36:46,100 --> 00:36:50,600
And then, you know, then you're just doing this, which seems a lot

752
00:36:50,600 --> 00:36:53,000
smarter not sure.

753
00:36:53,000 --> 00:36:58,900
Why in type that in first time, you know, like, I can't think of a

754
00:36:58,900 --> 00:37:02,500
reason not to, but you do add radius to, I kind of feel like you would

755
00:37:02,500 --> 00:37:04,600
just do that, right?

756
00:37:04,800 --> 00:37:06,800
So I'm going to go ahead and say, that's what we'll do.

757
00:37:12,500 --> 00:37:17,200
That just seems seems a little smarter so we'll just go ahead and

758
00:37:17,200 --> 00:37:23,800
we'll we'll do our safety margin, their safety margin in Z is tough to

759
00:37:23,800 --> 00:37:26,100
figure out exactly what that would be so I don't know.

760
00:37:26,100 --> 00:37:29,000
I'm going to say update, safety margin.

761
00:37:30,600 --> 00:37:31,900
Z cuz I don't know.

762
00:37:32,400 --> 00:37:36,800
That's, that's going to be the same at the end of the day.

763
00:37:38,000 --> 00:37:38,700
But we'll see.

764
00:37:39,100 --> 00:37:42,200
Alright, so off we go again.

765
00:37:42,200 --> 00:37:43,600
Just dupes just trying to

766
00:37:45,700 --> 00:37:46,900
Correct, some of these things here.

767
00:37:47,300 --> 00:37:49,200
So let's see.

768
00:37:49,400 --> 00:37:51,900
No operator found which takes right in my V3.

769
00:37:52,000 --> 00:37:59,600
Okay, so basically we are now taking in which a three-dimensional

770
00:37:59,600 --> 00:38:00,100
acceleration.

771
00:38:00,100 --> 00:38:02,300
Hopefully, let's push that through.

772
00:38:02,700 --> 00:38:06,100
And so all of these guys have to be three-dimensional as well.

773
00:38:07,000 --> 00:38:08,500
And that also means that.

774
00:38:08,500 --> 00:38:13,900
Now what we were doing before with gravity, if we want, always to have

775
00:38:13,900 --> 00:38:15,200
gravity, then really all

776
00:38:15,400 --> 00:38:18,700
Have to do is just add into our acceleration.

777
00:38:18,800 --> 00:38:20,400
The fact that we always have gravity.

778
00:38:20,700 --> 00:38:26,900
So basically that negative 9.8 is going to just add in to whatever the

779
00:38:27,000 --> 00:38:31,500
acceleration was that we actually give our entity and then that, you

780
00:38:31,500 --> 00:38:35,300
know, will we no longer have to do this computation separately because

781
00:38:35,300 --> 00:38:36,300
you can see it.

782
00:38:37,300 --> 00:38:40,700
It's happening right here automatically for us, right?

783
00:38:41,500 --> 00:38:43,800
So it's just, it's totally, it's totally set.

784
00:38:44,300 --> 00:38:45,100
So what we

785
00:38:45,300 --> 00:38:50,100
Do want to do however, is we sort of had this cheesiness here where we

786
00:38:50,100 --> 00:38:54,300
were sort of doing the ground collision with with z, and we're going

787
00:38:54,300 --> 00:38:55,200
to leave that in for now.

788
00:38:55,200 --> 00:38:57,300
But eventually, what we probably want to do is start getting a little

789
00:38:57,300 --> 00:38:58,300
more hardcore about Z.

790
00:38:58,300 --> 00:38:59,700
That's what this passage is about.

791
00:38:59,700 --> 00:38:59,800
So,

792
00:39:00,000 --> 00:39:02,400
Ashley will do something smarter here with z and actually see like

793
00:39:02,400 --> 00:39:04,600
what maybe we should land on or something like that.

794
00:39:05,300 --> 00:39:06,700
Just get a little bit fancier there.

795
00:39:07,500 --> 00:39:09,900
And again, we don't need to update the velocity because now our

796
00:39:09,900 --> 00:39:14,300
velocity is properly tracked along with everything else.

797
00:39:15,500 --> 00:39:16,700
Now, I don't remember.

798
00:39:17,100 --> 00:39:18,700
Did we already get rid of DZ?

799
00:39:18,700 --> 00:39:19,900
I think we did, right?

800
00:39:19,900 --> 00:39:20,100
Yeah.

801
00:39:20,100 --> 00:39:23,400
So we got rid of d z, so that's all now nice and kosher.

802
00:39:23,600 --> 00:39:24,700
So we just get rid of that.

803
00:39:24,700 --> 00:39:28,800
And then after we do our Collision detection, right?

804
00:39:29,200 --> 00:39:34,100
We also want to do the sort of cheesy ground Ridiculousness like so,

805
00:39:34,800 --> 00:39:36,600
so that's after we've accepted the update.

806
00:39:36,600 --> 00:39:40,900
Step we would basically say our whatever our position is.

807
00:39:40,900 --> 00:39:43,100
We don't want to let it go below zero.

808
00:39:43,400 --> 00:39:44,800
But again, that's something that we gotta.

809
00:39:45,400 --> 00:39:50,600
I supposed to do in there to do, this has to become real tight

810
00:39:50,600 --> 00:39:51,200
handling.

811
00:39:53,500 --> 00:39:55,700
Ground Collision Etc.

812
00:39:57,300 --> 00:39:58,800
Yeah, and we'll see what happens with that.

813
00:39:59,300 --> 00:40:01,100
All right, so let's see.

814
00:40:01,400 --> 00:40:02,900
Got our desired position here.

815
00:40:04,700 --> 00:40:06,600
That's going to have to go up to a V3 as well.

816
00:40:07,500 --> 00:40:09,800
Our well normal will have to be a V3 as well.

817
00:40:10,000 --> 00:40:12,100
Basically, everything in our Collision routine is going to have to be

818
00:40:12,100 --> 00:40:14,100
upgraded to a V3.

819
00:40:14,700 --> 00:40:16,300
So we might as well go ahead and do that.

820
00:40:16,600 --> 00:40:23,700
Now, we were doing diameter of the enemy because it has a width and a

821
00:40:23,700 --> 00:40:24,300
height.

822
00:40:24,600 --> 00:40:28,900
We don't actually know of it, actually having a depth yet.

823
00:40:32,400 --> 00:40:34,000
Which makes things a little complicated.

824
00:40:34,900 --> 00:40:38,500
Unfortunately, but we can sort of start to imagine what that would be

825
00:40:38,600 --> 00:40:38,800
right.

826
00:40:38,800 --> 00:40:43,700
Our diameter depth is just going to probably be you know for now like

827
00:40:43,700 --> 00:40:46,000
a tile height it's worth or something, right?

828
00:40:46,000 --> 00:40:51,600
So would be something like what we were talking about in here before

829
00:40:52,900 --> 00:40:55,100
handmade world's out of H?

830
00:40:56,100 --> 00:41:00,600
You know the something like in here maybe we have a tile depth in

831
00:41:00,600 --> 00:41:01,800
meters, or something like this.

832
00:41:01,800 --> 00:41:04,100
I don't know what we want to call that, but maybe we'll just go ahead

833
00:41:04,100 --> 00:41:04,500
and say,

834
00:41:05,000 --> 00:41:08,000
That we've got that and then that way because we don't really know

835
00:41:08,000 --> 00:41:11,200
what it is yet that way at least we'll see where it's being used.

836
00:41:11,300 --> 00:41:15,200
And so that way in the tile Dim, when we set that tile dim in meters,

837
00:41:15,400 --> 00:41:18,200
we can also set this tile depth in meters.

838
00:41:18,200 --> 00:41:21,600
And since we know that these are all essentially, all the same, we're

839
00:41:21,600 --> 00:41:23,700
just going to leave it like that.

840
00:41:24,500 --> 00:41:25,000
So,

841
00:41:26,700 --> 00:41:28,500
We can sort of think about that a little bit more later.

842
00:41:29,100 --> 00:41:32,700
So when we do our diameter D, now we know that our Min and Max Corners

843
00:41:32,700 --> 00:41:35,500
are going to expand by that as well now.

844
00:41:35,500 --> 00:41:37,700
So we've got that diameter D.

845
00:41:38,000 --> 00:41:41,200
And really, I feel like this should just be a V3 called diameter,

846
00:41:41,900 --> 00:41:45,400
which seems a little bit more logical, right?

847
00:41:48,300 --> 00:41:50,300
This is just doing two times this.

848
00:41:51,500 --> 00:41:55,000
Is that what what was this supposed to be?

849
00:41:55,800 --> 00:41:57,700
Oh, I see what we were doing here.

850
00:41:58,200 --> 00:41:59,600
Yeah, so we were

851
00:42:00,000 --> 00:42:02,200
Okay, so this was this was the Armand Cascade.

852
00:42:02,500 --> 00:42:04,800
So really diameter is a little bit weird.

853
00:42:04,800 --> 00:42:08,700
It's this is really the Mankowski diameter, right?

854
00:42:08,700 --> 00:42:10,100
That's really what we should call this.

855
00:42:11,200 --> 00:42:15,000
And so that's like adding the depths of these together.

856
00:42:15,200 --> 00:42:17,200
And so really this should probably be two times.

857
00:42:17,200 --> 00:42:23,000
This eventually we should have probably to do, you know, entities have

858
00:42:23,000 --> 00:42:24,800
height, you know.

859
00:42:25,000 --> 00:42:29,800
Probably who knows and so, you know, there we go.

860
00:42:30,300 --> 00:42:31,400
So now I'm going to go ahead and do that.

861
00:42:31,400 --> 00:42:33,600
Makowski diameter here and just use that.

862
00:42:33,700 --> 00:42:34,400
So there we are.

863
00:42:34,400 --> 00:42:37,400
We can put that in there and we'll compute it that way and then when

864
00:42:37,400 --> 00:42:40,500
we do our relative positioning, we can go ahead and do that.

865
00:42:40,500 --> 00:42:42,300
Now, all of this should still work.

866
00:42:42,400 --> 00:42:44,900
Basically, we're doing the Collision detection in two dimensions.

867
00:42:45,000 --> 00:42:48,300
That's fine for now we don't need to upgrade that for any particular

868
00:42:48,400 --> 00:42:49,100
reason.

869
00:42:51,400 --> 00:42:54,500
And then our normals are all still exactly the same.

870
00:42:54,500 --> 00:43:00,300
They just, again, end up having enough, no, no Z component, they just

871
00:43:00,300 --> 00:43:02,800
stay in that in the plane, right?

872
00:43:03,300 --> 00:43:04,500
And then, everything else is still work.

873
00:43:04,500 --> 00:43:06,600
I think, I don't think there's anything else in particular that we

874
00:43:06,600 --> 00:43:09,100
need to worry too much about their Hoops, those supposed to be threes

875
00:43:09,100 --> 00:43:10,300
now, like so.

876
00:43:12,700 --> 00:43:17,900
Like so, our world difference again, these are now going to be pretty,

877
00:43:18,400 --> 00:43:19,600
pretty basic stuff.

878
00:43:20,300 --> 00:43:22,700
I don't know if get camera space p is even called anymore.

879
00:43:22,800 --> 00:43:23,700
To be honest with you.

880
00:43:24,200 --> 00:43:25,900
Let's find out camera space.

881
00:43:25,900 --> 00:43:28,200
P&R us-based P.

882
00:43:29,200 --> 00:43:30,300
Was that used anywhere.

883
00:43:30,300 --> 00:43:31,500
It is not so you know what?

884
00:43:31,500 --> 00:43:36,400
That can just disappear and let's see begins Sim.

885
00:43:37,800 --> 00:43:39,300
What is begin?

886
00:43:39,300 --> 00:43:40,200
Tsum doing?

887
00:43:40,800 --> 00:43:42,300
Let's see here.

888
00:43:42,700 --> 00:43:48,900
That is passing the camera bounds which now needs to be a rectangle 3.

889
00:43:49,200 --> 00:43:51,900
So that's going to be we're going to use a Center Dim again we're

890
00:43:51,900 --> 00:43:55,700
going to go ahead and do tile side in meters and we're just going to

891
00:43:55,700 --> 00:43:56,000
say that.

892
00:43:56,000 --> 00:43:59,700
It's fans 14 now again because we don't really know although I could

893
00:43:59,700 --> 00:44:01,300
do it I can do it this way.

894
00:44:01,300 --> 00:44:04,000
So it's a little clearer that is just going to do one.

895
00:44:04,500 --> 00:44:08,600
So we could do real to be to tile span Z like so.

896
00:44:11,400 --> 00:44:13,500
And yes, I am totally picking those numbers randomly.

897
00:44:14,300 --> 00:44:16,500
So let's see here.

898
00:44:16,700 --> 00:44:17,400
There we go.

899
00:44:19,200 --> 00:44:22,000
V2 again, I really like typing V2.

900
00:44:22,000 --> 00:44:23,600
When really I should be typing Bakery.

901
00:44:24,900 --> 00:44:28,800
And okay, so this is just our entities position .z.

902
00:44:28,800 --> 00:44:32,900
Now because we're old the Z into it and our DDP is now going to have

903
00:44:32,900 --> 00:44:36,300
to be not, not based on Z anymore.

904
00:44:36,800 --> 00:44:42,400
So our DDP here, if the con Heroes DZ oops we do the line accidentally

905
00:44:42,400 --> 00:44:42,600
there.

906
00:44:44,500 --> 00:44:50,400
Then I want to actually make that DZ change so that I can just make I

907
00:44:50,400 --> 00:44:52,400
can just put that what I was putting in.

908
00:44:52,400 --> 00:44:53,200
As a request.

909
00:44:53,200 --> 00:44:54,300
Their I can actually put in

910
00:44:54,400 --> 00:44:59,000
in as a request on the the acceleration now because we don't have to

911
00:44:59,000 --> 00:44:59,500
keep it as a

912
00:45:00,000 --> 00:45:02,600
Then you can go get passed through directly.

913
00:45:02,700 --> 00:45:04,500
Unfortunately, I overwrite it here.

914
00:45:05,000 --> 00:45:07,200
Oh, well, so actually that's even easier.

915
00:45:07,400 --> 00:45:10,600
I guess, what I can do is just go up where I actually write can con

916
00:45:10,600 --> 00:45:16,200
hero, and when Conn hero does it, we can just say, okay, you know,

917
00:45:16,700 --> 00:45:18,300
let's put that DDP.

918
00:45:18,500 --> 00:45:22,300
Let's put that onto the Z component of that, right?

919
00:45:23,500 --> 00:45:24,500
That seems to make sense.

920
00:45:25,900 --> 00:45:27,000
I don't really know why it's a

921
00:45:28,100 --> 00:45:29,600
Plus equals there.

922
00:45:30,200 --> 00:45:31,000
Oh

923
00:45:32,800 --> 00:45:36,300
Wait, because that because that's we're actually setting the velocity.

924
00:45:36,400 --> 00:45:41,300
Sorry that was a that was me having a quick sort of brain as it does a

925
00:45:41,300 --> 00:45:42,100
bit of a brain farts.

926
00:45:42,100 --> 00:45:42,500
True.

927
00:45:43,800 --> 00:45:45,800
We're actually cold setting, the velocity.

928
00:45:45,900 --> 00:45:48,500
That's not getting rolled into the acceleration at all.

929
00:45:48,900 --> 00:45:50,400
We're actually cold saying the velocity.

930
00:45:50,400 --> 00:45:53,500
So that's actually a deep E.Z.

931
00:45:54,400 --> 00:45:57,200
That's just straight up getting an additional jump to it.

932
00:45:58,200 --> 00:45:59,400
So all right, we'll leave it.

933
00:45:59,400 --> 00:46:00,800
Go doing it that way for now.

934
00:46:02,600 --> 00:46:03,200
Because that's fine.

935
00:46:03,200 --> 00:46:05,900
And again, jumping jumping, just something that we're keeping in there

936
00:46:05,900 --> 00:46:07,400
for fun for now.

937
00:46:07,400 --> 00:46:10,000
So it's not really a huge deal either way.

938
00:46:10,100 --> 00:46:13,000
So our con hero DDP technically.

939
00:46:13,000 --> 00:46:15,500
We're not even going to allow that to really accelerate in the Z

940
00:46:15,500 --> 00:46:16,800
Direction at the moment anyway.

941
00:46:17,400 --> 00:46:18,800
So we'll just go ahead and leave it.

942
00:46:19,100 --> 00:46:25,700
Like so oops, the three and let's see here, no operator found.

943
00:46:25,700 --> 00:46:29,400
Which takes left hand side, May, Kennedy, spatial.

944
00:46:32,300 --> 00:46:33,800
What's wrong with it going to be spatial?

945
00:46:33,800 --> 00:46:38,000
Did we not update that make the key?

946
00:46:38,700 --> 00:46:41,100
Spatial, is that an entity that h

947
00:46:42,400 --> 00:46:46,600
Make entities spatial is taking a 2 V 3 S.

948
00:46:46,800 --> 00:46:48,700
So it's calm here, OD sword.

949
00:46:49,100 --> 00:46:53,000
So con hero d sword also is only allowed to throw in the plane.

950
00:46:53,000 --> 00:46:58,300
So we'll just not bothers propagating that changeup word, okay?

951
00:46:58,300 --> 00:47:02,200
So old P I'm assuming doesn't get used anymore because we fixed that.

952
00:47:02,200 --> 00:47:06,000
Yes, that's just a vestigial remain anyway, so that should be fine.

953
00:47:06,400 --> 00:47:08,700
RZ is now our P.C.

954
00:47:08,900 --> 00:47:10,000
So that's fine too.

955
00:47:10,500 --> 00:47:12,100
Our worlds difference again, we're just

956
00:47:12,200 --> 00:47:14,200
Getting V3 is for those things now.

957
00:47:14,700 --> 00:47:19,200
So if we want to actually get that out, it's just gift out, x y.

958
00:47:19,900 --> 00:47:23,600
And now we have a program that compiles, yay.

959
00:47:23,900 --> 00:47:33,900
Of course, we made a ton of changes, so it probably won't work, but we

960
00:47:33,900 --> 00:47:36,600
have gotten to compile, and that when you're making a big change, like

961
00:47:36,600 --> 00:47:39,000
this is the first step to success.

962
00:47:39,300 --> 00:47:41,800
Alright, so as you can see, we have absolutely nothing here.

963
00:47:42,200 --> 00:47:44,200
Which is not at all what we wanted.

964
00:47:44,500 --> 00:47:47,600
Of course, there is a problem already that I kind of knew that we

965
00:47:47,600 --> 00:47:49,700
would have when we did that change.

966
00:47:50,500 --> 00:47:54,900
And so I want to just go ahead before we start to bugging, which may

967
00:47:54,900 --> 00:47:55,800
have to wait till tomorrow.

968
00:47:55,800 --> 00:47:58,600
Obviously, because we're just about out of time, we got about 30

969
00:47:58,600 --> 00:47:59,800
minutes left and I started about 10.

970
00:48:00,000 --> 00:48:07,000
Wait, what I wanted to do, was, when we actually do our rectangle

971
00:48:07,000 --> 00:48:09,000
inclusion test, right?

972
00:48:09,600 --> 00:48:12,200
I wanted to point out that we kind of have this problem where we have

973
00:48:12,200 --> 00:48:16,200
to think about where stuff is actually centered and whether or not it

974
00:48:16,200 --> 00:48:20,200
gets included in that centered rectangular bounds.

975
00:48:22,000 --> 00:48:26,500
So yeah, like basically what I wanted to do is just make sure that

976
00:48:26,500 --> 00:48:29,500
we're actually getting our bounce set up properly.

977
00:48:29,500 --> 00:48:29,900
So before

978
00:48:30,000 --> 00:48:32,700
Why bother debugging things I want to actually, make sure that I kind

979
00:48:32,700 --> 00:48:36,400
of fix that and basically what I wanted to make sure I fix this.

980
00:48:38,600 --> 00:48:41,700
You know, when we are doing this checking, right?

981
00:48:41,700 --> 00:48:44,800
We've we were doing before we were doing this checking where we would

982
00:48:44,800 --> 00:48:47,400
take a chunk in the world, right?

983
00:48:47,400 --> 00:48:53,000
And you know these these chunks were sort of on a grid and we would

984
00:48:53,000 --> 00:48:54,900
gather all the entities that were in that Chunk.

985
00:48:54,900 --> 00:48:56,900
We wouldn't care about where they were in Z.

986
00:48:56,900 --> 00:49:01,100
We just used their abs tile Z or something like this to grab them out.

987
00:49:01,200 --> 00:49:04,500
And so what I want to make sure we're doing now is if you look at this

988
00:49:04,500 --> 00:49:07,700
sort of side on right, so if this is our top view,

989
00:49:08,200 --> 00:49:10,400
And we want to look at our side view, right?

990
00:49:11,300 --> 00:49:14,900
Basically, we've got this sort of thing where the ground I want the

991
00:49:14,900 --> 00:49:19,500
ground to pass through the middle of our, our query region.

992
00:49:20,000 --> 00:49:23,100
And I want things to be placed on this midline.

993
00:49:23,400 --> 00:49:26,300
And the reason that I want to be that way and I want to go make sure

994
00:49:26,300 --> 00:49:29,800
we're doing it that way, instead of this way, where it's like that is,

995
00:49:29,800 --> 00:49:34,200
I don't want floating Point wise us, to be always really near to being

996
00:49:34,200 --> 00:49:36,500
moved into the trunk below us, right.

997
00:49:36,500 --> 00:49:37,500
I want the

998
00:49:37,800 --> 00:49:42,800
The plane where everything happens to be squarely in the middle of our

999
00:49:42,800 --> 00:49:43,800
gather region.

1000
00:49:44,700 --> 00:49:49,800
And so that the next like stare place, you would stand would be up

1001
00:49:49,800 --> 00:49:51,900
here in another chunk, right?

1002
00:49:51,900 --> 00:49:54,900
And so that when you walk, you'd walk like upstairs or something like

1003
00:49:54,900 --> 00:49:58,000
this, you would transition like the halfway point in the stairs from

1004
00:49:58,000 --> 00:50:01,000
being in one chunk to another, and you'd never be standing on anything

1005
00:50:01,000 --> 00:50:01,300
in here.

1006
00:50:01,300 --> 00:50:04,100
Anyway, just to keeps you away from that boundary so that you don't

1007
00:50:04,100 --> 00:50:07,700
end up basically, having to constantly check two things for Collision,

1008
00:50:07,900 --> 00:50:10,000
Section in vacillate between them and all that sort of stuff.

1009
00:50:10,100 --> 00:50:12,100
So I just wanted to make sure we were actually doing that.

1010
00:50:14,000 --> 00:50:14,500
Properly.

1011
00:50:14,700 --> 00:50:17,400
So I'm going to go ahead and take our remaining 10 minutes to just go

1012
00:50:17,400 --> 00:50:18,200
do that.

1013
00:50:18,500 --> 00:50:21,700
And then we'll probably saved a bugging RZ stuff for tomorrow.

1014
00:50:22,200 --> 00:50:23,600
Although it looks like we sort of we're working.

1015
00:50:23,600 --> 00:50:27,100
We just probably have some problems with our gather to work out.

1016
00:50:27,100 --> 00:50:29,900
So we'll go ahead and do that, but it looks like we weren't too far

1017
00:50:29,900 --> 00:50:30,300
too.

1018
00:50:30,300 --> 00:50:33,200
Terribly far from working, hopefully fingers crossed.

1019
00:50:34,800 --> 00:50:35,300
So yeah.

1020
00:50:35,600 --> 00:50:39,700
So what I'd like to do is I'd like to go ahead and check when we add

1021
00:50:39,700 --> 00:50:42,900
entities first and also then when we

1022
00:50:43,900 --> 00:50:45,000
Pull them out.

1023
00:50:45,000 --> 00:50:48,000
Just that the what the actual values are that we're actually using for

1024
00:50:48,000 --> 00:50:48,500
that.

1025
00:50:49,100 --> 00:50:51,600
That's that's really all I wanted to make sure we do.

1026
00:50:52,700 --> 00:50:52,900
So.

1027
00:50:52,900 --> 00:50:57,400
Okay so we have our chunk poster from tile position.

1028
00:50:59,000 --> 00:50:59,800
and then we add

1029
00:51:00,000 --> 00:51:01,500
Sing our tile location.

1030
00:51:01,500 --> 00:51:03,400
So let's Okay, let me just go ahead.

1031
00:51:04,000 --> 00:51:07,200
I'll do it actually in the ad wall column will take a look at it in

1032
00:51:07,200 --> 00:51:07,500
there.

1033
00:51:09,200 --> 00:51:10,000
So here we go.

1034
00:51:10,200 --> 00:51:11,800
We're doing chunk position from top position.

1035
00:51:12,000 --> 00:51:13,800
We're passing all zeros here.

1036
00:51:14,000 --> 00:51:17,000
And so what I want to see come out of this, I just want to see what we

1037
00:51:17,000 --> 00:51:21,500
end up giving it as its location and that is exactly what I had hoped

1038
00:51:21,500 --> 00:51:22,300
to see, right.

1039
00:51:22,300 --> 00:51:27,700
I wanted basically our XY and Z 2, all be 0 because that zero is right

1040
00:51:28,400 --> 00:51:34,200
since its measured from the center, or should be that Z is right in in

1041
00:51:34,200 --> 00:51:35,600
the middle, right?

1042
00:51:35,600 --> 00:51:38,600
And you have negative half tile dim and positive half tile.

1043
00:51:38,600 --> 00:51:39,000
Jim,

1044
00:51:39,100 --> 00:51:40,400
To go in either direction.

1045
00:51:40,400 --> 00:51:40,900
Right?

1046
00:51:41,000 --> 00:51:42,300
So, that's what I wanted to see.

1047
00:51:43,100 --> 00:51:44,100
That's all good.

1048
00:51:44,400 --> 00:51:47,500
And hopefully, like, if I check a few more of these, we can kind of

1049
00:51:47,500 --> 00:51:50,500
see those work properly.

1050
00:51:51,100 --> 00:51:52,500
Let's take a look here.

1051
00:51:54,600 --> 00:51:56,900
Yeah, that doesn't look right to me.

1052
00:51:58,400 --> 00:51:58,900
All right.

1053
00:51:58,900 --> 00:52:04,000
Well, I guess I said I wasn't going to debug it but I, you know how I

1054
00:52:04,000 --> 00:52:04,200
am.

1055
00:52:04,200 --> 00:52:08,100
When I see something happening wrong, I kind of have to go look at it.

1056
00:52:08,400 --> 00:52:08,900
So what

1057
00:52:09,000 --> 00:52:10,100
Happened there.

1058
00:52:11,200 --> 00:52:16,700
I would like to know because we have our AB style, ABS tie lab style.

1059
00:52:17,100 --> 00:52:22,200
We should be seeing some multiplication happen.

1060
00:52:22,200 --> 00:52:24,200
There AB style, ABS table style.

1061
00:52:24,400 --> 00:52:27,200
Did I mess up our implementation of the hadamard product or something

1062
00:52:27,200 --> 00:52:27,600
like that?

1063
00:52:28,900 --> 00:52:29,500
Macbeth.

1064
00:52:30,900 --> 00:52:31,800
Let's see here.

1065
00:52:33,100 --> 00:52:35,900
So, we have our a, you have our B.

1066
00:52:36,800 --> 00:52:39,900
So if we do our multiplication, what do we end up with?

1067
00:52:40,100 --> 00:52:42,600
Make sure we produce a valid value there.

1068
00:52:42,600 --> 00:52:45,500
So that looks like what I would have expected to see.

1069
00:52:46,100 --> 00:52:47,000
So that's good.

1070
00:52:47,200 --> 00:52:49,600
We come out of there and now we're going to do mapping the chunk

1071
00:52:49,600 --> 00:52:51,400
space, right?

1072
00:52:53,500 --> 00:52:54,200
So that's fine.

1073
00:52:54,300 --> 00:52:56,400
Oh well, this actually might be fine.

1074
00:52:56,400 --> 00:53:00,200
I may have, I may have overreacted that makes because we are aligned

1075
00:53:00,200 --> 00:53:02,400
on our tile boundaries because that's how we

1076
00:53:02,700 --> 00:53:06,300
Placing our trees should never be offset from the tub tile boundaries.

1077
00:53:06,600 --> 00:53:07,200
So okay.

1078
00:53:07,200 --> 00:53:10,400
Sorry, I may have overreacted, let's double-check

1079
00:53:12,100 --> 00:53:14,100
So we go ahead and do that ad.

1080
00:53:14,300 --> 00:53:16,500
We're going to canonicalize canonicalize clockwise.

1081
00:53:16,500 --> 00:53:17,700
That's the correct answer.

1082
00:53:17,800 --> 00:53:22,100
Out comes the results and our word position result is 7.

1083
00:53:22,200 --> 00:53:22,500
Okay.

1084
00:53:22,500 --> 00:53:24,500
So we refined nevermind, nevermind.

1085
00:53:24,500 --> 00:53:26,200
I was looking at the wrong thing.

1086
00:53:26,600 --> 00:53:30,200
It's all good, it's all good.

1087
00:53:30,600 --> 00:53:31,000
So, yeah.

1088
00:53:31,000 --> 00:53:32,800
So that looks fine.

1089
00:53:34,600 --> 00:53:35,400
How come we can't see?

1090
00:53:35,400 --> 00:53:36,400
Where is our P?

1091
00:53:36,800 --> 00:53:37,200
There it is.

1092
00:53:37,200 --> 00:53:38,200
There's the nine.

1093
00:53:39,200 --> 00:53:41,000
So that's what we would expect to see.

1094
00:53:41,600 --> 00:53:41,800
All right.

1095
00:53:42,000 --> 00:53:43,300
So it looks actually totally fine.

1096
00:53:43,300 --> 00:53:44,200
That's all good.

1097
00:53:44,200 --> 00:53:45,600
So I'm just going to go ahead and check.

1098
00:53:45,900 --> 00:53:49,200
Now, the other thing that I want to check like I said, when we do our

1099
00:53:49,200 --> 00:53:53,200
Sim region grab over here.

1100
00:53:53,200 --> 00:53:56,300
In begin Sim, come on.

1101
00:53:56,300 --> 00:53:57,000
Begin Sam.

1102
00:53:57,000 --> 00:53:57,700
There we are.

1103
00:53:58,200 --> 00:53:59,800
I want to make sure that we're grabbing

1104
00:54:00,000 --> 00:54:04,000
From sort of the bounds that I expect, right?

1105
00:54:04,100 --> 00:54:06,400
That the bounds are something reasonable.

1106
00:54:07,100 --> 00:54:14,900
So those bounds are going to be in our Sim region updatable bounds or

1107
00:54:14,900 --> 00:54:16,100
just a guess, just bounds.

1108
00:54:16,500 --> 00:54:17,600
So, taking a look at those.

1109
00:54:17,600 --> 00:54:19,200
Let's take a look at what the Min and Max are.

1110
00:54:19,200 --> 00:54:24,100
So we're - 36 never 19 -1.7 36:19 1.7.

1111
00:54:24,100 --> 00:54:24,900
So that looks

1112
00:54:25,700 --> 00:54:28,200
right on the money to me, that looks totally good.

1113
00:54:28,200 --> 00:54:29,600
Although I would say,

1114
00:54:31,300 --> 00:54:34,700
The span looks larger than it should be, but I guess that's because

1115
00:54:34,700 --> 00:54:37,500
our, we have our safety region margin that we added.

1116
00:54:37,500 --> 00:54:39,900
So that's that, now, that's about, right?

1117
00:54:40,100 --> 00:54:43,600
So, let's go ahead and check a look at our Min and Max chunk, right?

1118
00:54:43,700 --> 00:54:49,500
So we have our moon jump P, Max chunk P like so you take a look at

1119
00:54:49,500 --> 00:54:50,400
what those give us.

1120
00:54:51,300 --> 00:54:56,200
We're going from 6 3 - 1 to 10 51.

1121
00:55:07,600 --> 00:55:12,000
That doesn't seem right to me at all.

1122
00:55:17,300 --> 00:55:21,400
I don't like the that value for men to be completely honest with you.

1123
00:55:28,100 --> 00:55:31,500
I don't understand, I don't understand what I just witnessed their I'm

1124
00:55:31,500 --> 00:55:34,300
going to have to set that through how much time I got.

1125
00:55:34,600 --> 00:55:35,800
I got five more minutes.

1126
00:55:39,000 --> 00:55:43,900
Because if these are negatives, I feel like the tile index should have

1127
00:55:43,900 --> 00:55:51,100
been - because the time to seize our signed now, so that's kind of a

1128
00:55:51,100 --> 00:55:52,700
little weird.

1129
00:55:53,700 --> 00:55:56,400
So let me see what's going on here.

1130
00:55:58,400 --> 00:55:59,800
Okay, that's fine.

1131
00:56:00,100 --> 00:56:00,400
Okay.

1132
00:56:00,400 --> 00:56:03,600
Because that's relative to the camera and our camera is not starting

1133
00:56:03,600 --> 00:56:05,500
out at 0 0, all right.

1134
00:56:05,500 --> 00:56:06,300
Totally fine.

1135
00:56:06,500 --> 00:56:07,400
I'm happy with it.

1136
00:56:08,100 --> 00:56:11,300
I'm totally fine with that, totally fine with that.

1137
00:56:11,500 --> 00:56:14,200
So then we're going to grab out are chunks.

1138
00:56:14,200 --> 00:56:17,200
We're going to come through here and now I guess the other thing we

1139
00:56:17,200 --> 00:56:21,600
could see is do we actually ever grab an entity or don't we?

1140
00:56:22,000 --> 00:56:26,700
So it looks like our problem is our checking for entities is never

1141
00:56:26,700 --> 00:56:28,000
actually returning us any.

1142
00:56:28,000 --> 00:56:29,600
Any entities is that?

1143
00:56:29,600 --> 00:56:32,500
Because we're failing on our chunks, it is because we're failing on

1144
00:56:32,500 --> 00:56:33,000
the chunks.

1145
00:56:33,200 --> 00:56:37,700
So if you notice here, when I'm adding I'm never even getting in

1146
00:56:38,500 --> 00:56:40,800
22 these checks here.

1147
00:56:41,100 --> 00:56:45,800
So we're basically never our world chunks are never actually seeming

1148
00:56:45,800 --> 00:56:50,500
to include the entities even though we were supposedly adding them.

1149
00:56:50,700 --> 00:56:55,700
So I guess the thing that we would have to debug and I don't know if

1150
00:56:55,700 --> 00:56:56,300
we want to start this.

1151
00:56:56,300 --> 00:56:59,800
Now I'll take a quick look at it but I think this will basically way.

1152
00:57:00,000 --> 00:57:04,600
Tomorrow really what we need to do is find out when I did my

1153
00:57:04,600 --> 00:57:08,900
modifications to handmade world.

1154
00:57:08,900 --> 00:57:13,700
What did I break in terms of how we're storing things into chunk

1155
00:57:13,700 --> 00:57:14,700
positions, right?

1156
00:57:14,700 --> 00:57:19,100
How we're basically putting them in, it seems to be a little bit

1157
00:57:19,100 --> 00:57:22,300
broken unless I'm in less, I'm missing something obvious.

1158
00:57:22,600 --> 00:57:28,500
So basically

1159
00:57:30,700 --> 00:57:35,800
for some reason, our map into chunks face is busted in some way.

1160
00:57:36,100 --> 00:57:40,200
Something like this or there's some other thing that I'm not thinking

1161
00:57:40,200 --> 00:57:44,100
of that we haven't updated yet that we need to update and didn't but

1162
00:57:44,100 --> 00:57:49,800
we handle all yeah we always we always were, z4r 4r indices so it

1163
00:57:49,800 --> 00:57:51,400
should be something relatively straightforward.

1164
00:57:51,500 --> 00:57:56,600
I would think but I'm not obviously positive that yet.

1165
00:57:56,700 --> 00:57:58,400
So I'm going to go ahead and stop for now.

1166
00:57:59,100 --> 00:58:01,600
Because I don't want to get too deep into the bugging because it'll

1167
00:58:01,600 --> 00:58:03,600
just eat through the whole Q&A.

1168
00:58:03,600 --> 00:58:08,800
So we'll stop for now and we'll pick it back up tomorrow, which I

1169
00:58:08,800 --> 00:58:11,500
don't think will probably take us that long to debug because, you

1170
00:58:11,500 --> 00:58:12,400
know, it's not that complicated.

1171
00:58:13,000 --> 00:58:19,100
All right, so I'm gonna go ahead and start the Q&A dude, like so and

1172
00:58:19,100 --> 00:58:22,800
if you could go ahead and prefix your questions with Q: so I can see

1173
00:58:22,800 --> 00:58:25,300
them and also try to keep them in stuff, we've done today stream or on

1174
00:58:25,300 --> 00:58:26,100
a previous dream.

1175
00:58:26,100 --> 00:58:28,200
If you like to ask off-topic questions, we can do that.

1176
00:58:29,300 --> 00:58:33,000
Basically in the in the priest dream come about 15 minutes early to

1177
00:58:33,000 --> 00:58:36,500
any scheduled start time and we do off-topic questions then so.

1178
00:58:37,000 --> 00:58:37,600
All right.

1179
00:58:51,700 --> 00:58:52,000
Let's see.

1180
00:58:52,000 --> 00:58:55,800
Have you considered using macros that, take a name and operator to

1181
00:58:55,800 --> 00:58:57,900
paste in simple Vector functions?

1182
00:58:58,900 --> 00:59:03,300
I don't love using macros because they can be kind of unwieldy to make

1183
00:59:03,300 --> 00:59:06,000
longer functions, and they're kind of, they're just, they're very

1184
00:59:06,000 --> 00:59:06,800
cumbersome.

1185
00:59:07,800 --> 00:59:11,400
And really, that's not because macros are bad.

1186
00:59:11,400 --> 00:59:18,000
It's because C makes me and C++ the same make macros bad like macros

1187
00:59:18,300 --> 00:59:24,500
should be good and I would use them a lot if they were better.

1188
00:59:25,100 --> 00:59:29,400
If see actually allowed proper macro processing if you like using

1189
00:59:29,400 --> 00:59:33,200
macros and want to get more into that than what I would probably

1190
00:59:33,200 --> 00:59:37,400
recommend you actually do is not use see.

1191
00:59:37,600 --> 00:59:43,000
Macros use a macro preprocessor you know something that's designed to

1192
00:59:43,000 --> 00:59:46,500
do those better more interesting macro Transformations, might actually

1193
00:59:46,500 --> 00:59:50,000
be better for you because sees sees macros are pretty weak.

1194
00:59:50,000 --> 00:59:52,300
They've got a little bit better now, they can support varargs and

1195
00:59:52,300 --> 00:59:54,400
stuff but they're pretty bad.

1196
00:59:55,000 --> 00:59:59,200
As macro language is go-sees is real bad and C++ really didn't fix it.

1197
01:00:02,600 --> 01:00:03,700
What kind of onlooker drinking?

1198
01:00:03,700 --> 01:00:05,400
I'm drinking water right now, actually.

1199
01:00:06,300 --> 01:00:07,400
No, I'm in milk tonight.

1200
01:00:12,900 --> 01:00:15,500
You have any suggestions on how to keep up with your five episodes a

1201
01:00:15,500 --> 01:00:16,100
week.

1202
01:00:16,200 --> 01:00:18,700
When me, and my friend have only started watching your videos from the

1203
01:00:18,700 --> 01:00:19,000
beginning.

1204
01:00:19,000 --> 01:00:23,600
Last week, I would say, don't try to keep up, watch at your own pace.

1205
01:00:23,600 --> 01:00:27,800
That's why I put them all on YouTube, and people maintain the episode

1206
01:00:27,800 --> 01:00:28,800
guide to and all that stuff.

1207
01:00:28,800 --> 01:00:31,600
I would say don't try to rush.

1208
01:00:31,600 --> 01:00:37,200
There's no reason why you have to keep up with me, take it at your own

1209
01:00:37,200 --> 01:00:38,900
pace, and if you do keep up, you do.

1210
01:00:38,900 --> 01:00:41,100
If you don't, you don't, it's not an issue, right?

1211
01:00:41,100 --> 01:00:42,300
The important thing is to learn.

1212
01:00:43,100 --> 01:00:47,800
The only point of the stream is for to make it easier to learn how to

1213
01:00:47,800 --> 01:00:49,700
do a bunch of these game things.

1214
01:00:50,100 --> 01:00:55,500
And so I would just kind of say don't stress about that at all, you

1215
01:00:55,500 --> 01:00:58,200
can always ask questions on the forums so you don't have to worry

1216
01:00:58,200 --> 01:01:00,000
about like, being able to ask questions in the Q&A.

1217
01:01:00,200 --> 01:01:04,000
So I'd say, it's take your time, it's about learning, it's about being

1218
01:01:04,000 --> 01:01:08,600
comfortable, the material and catching up, doesn't really help in any

1219
01:01:08,600 --> 01:01:09,800
particular way, right?

1220
01:01:09,800 --> 01:01:12,100
So you don't have to catch up if it takes you

1221
01:01:12,400 --> 01:01:16,400
you know a very long time to go through all the episodes as long as

1222
01:01:16,400 --> 01:01:18,400
you learn from them that's really the only that's really the only

1223
01:01:18,400 --> 01:01:20,000
thing that matters I think

1224
01:01:23,000 --> 01:01:25,200
Why did 1.0 F instead of 1.0?

1225
01:01:25,500 --> 01:01:28,200
So you don't really need to anymore.

1226
01:01:29,300 --> 01:01:34,000
It used to be that compilers were too dumb to accept 1.0, they would

1227
01:01:34,000 --> 01:01:35,700
only accept 1.0 F.

1228
01:01:35,900 --> 01:01:39,500
And the reason for that is because they thought 1.0 was a double.

1229
01:01:40,700 --> 01:01:41,900
And 1.0 is afloat.

1230
01:01:41,900 --> 01:01:47,500
And so every time you typed 1.0, it would say it would, it would

1231
01:01:47,500 --> 01:01:51,200
complain, it would say, conversion from double to float, possible loss

1232
01:01:51,200 --> 01:01:51,800
of precision.

1233
01:01:53,400 --> 01:01:54,200
And so really what?

1234
01:01:54,200 --> 01:01:57,100
You're seeing there when I habitually type like 1.0 F.

1235
01:01:58,100 --> 01:02:00,300
That's where that comes from most compilers.

1236
01:02:00,300 --> 01:02:03,800
Nowadays are smart enough to know that it's one play know.

1237
01:02:04,200 --> 01:02:06,200
It could be a double or a float.

1238
01:02:06,200 --> 01:02:09,700
So just see if you can convert it to a float properly without losing

1239
01:02:09,700 --> 01:02:11,500
any precision and then you're fine right.

1240
01:02:11,600 --> 01:02:13,900
Most compilers today don't have that problem.

1241
01:02:14,300 --> 01:02:18,000
So really when you see me doing that F, it's because I was, you know,

1242
01:02:18,000 --> 01:02:22,400
basically, when I grew up, compilers were too dumb to understand that,

1243
01:02:22,600 --> 01:02:25,000
so, you had to always put an F, otherwise, you got warnings,

1244
01:02:28,900 --> 01:02:30,400
Have you considered writing tests?

1245
01:02:31,000 --> 01:02:37,000
So tests are again very test test very.

1246
01:02:37,300 --> 01:02:41,900
So in order to justify spending time on tests, you have to verify that

1247
01:02:41,900 --> 01:02:43,700
the amount of time you spend on test will be less than the amount of

1248
01:02:43,700 --> 01:02:45,900
time you spend in debugging, right?

1249
01:02:48,100 --> 01:02:51,000
At any stage in the process, like, where we are now.

1250
01:02:51,500 --> 01:02:54,200
Because right now, we're not considering shipping this code.

1251
01:02:55,200 --> 01:02:58,500
We're doing a engine architecture work and so,

1252
01:02:58,600 --> 01:02:59,800
if you write a test,

1253
01:03:00,200 --> 01:03:01,100
You'd be better.

1254
01:03:01,100 --> 01:03:06,000
Be damn sure that the time you spend writing and debugging the test

1255
01:03:06,000 --> 01:03:08,800
and getting the test working properly is less than the time.

1256
01:03:08,800 --> 01:03:12,500
It would have taken you to debug the code without the test because if

1257
01:03:12,500 --> 01:03:15,100
it's not, you just made a mistake, right?

1258
01:03:15,100 --> 01:03:20,000
You wasted time the time when test become a more reasonable more,

1259
01:03:20,000 --> 01:03:23,500
justifiable thing to write is when you actually have code, you're

1260
01:03:23,500 --> 01:03:24,700
planning on shipping.

1261
01:03:26,200 --> 01:03:29,700
Or because then you can think of the test as even if it takes longer

1262
01:03:29,700 --> 01:03:31,400
to write the test a test about the code.

1263
01:03:31,500 --> 01:03:35,000
The test is helping to validate that the code doesn't have bugs in it

1264
01:03:35,000 --> 01:03:35,900
before I ship it, right?

1265
01:03:35,900 --> 01:03:38,900
It's part of your Q&A at that point and then a test can be more

1266
01:03:38,900 --> 01:03:41,800
justifiable in terms of the time it takes to write it, right?

1267
01:03:42,400 --> 01:03:45,300
The other time you could do it is if you feel like you're you're

1268
01:03:45,300 --> 01:03:48,100
having a lot of trouble debugging something because then you can see

1269
01:03:48,100 --> 01:03:51,800
that you're spending that debugging time now, it might be time to it,

1270
01:03:51,800 --> 01:03:54,600
be better to switch that time over into running a test because the

1271
01:03:54,600 --> 01:03:55,400
test will pay off more.

1272
01:03:55,800 --> 01:03:57,100
Then the debugging time, right?

1273
01:03:57,600 --> 01:04:01,300
And so thinking of it, strictly in terms of I should write tests for

1274
01:04:01,300 --> 01:04:03,000
my code is not a good way to code.

1275
01:04:03,000 --> 01:04:06,500
In my opinion that leads to a lot of wasted time and wasted effort.

1276
01:04:06,600 --> 01:04:12,400
What you want to do is include tests in your thought, process about

1277
01:04:12,400 --> 01:04:15,900
how to write code efficiently and then make the decision as you go all

1278
01:04:15,900 --> 01:04:16,400
the time.

1279
01:04:16,800 --> 01:04:18,800
I don't think this code is going to take us very long to the bug.

1280
01:04:18,800 --> 01:04:22,500
I think it'll take us like five minutes or something or 10 minutes on

1281
01:04:22,500 --> 01:04:25,400
the next screen, maybe it won't, but I don't think it will take

1282
01:04:25,500 --> 01:04:26,100
Very long.

1283
01:04:26,800 --> 01:04:29,100
And so starting to write a bunch of tests here, I think would just be

1284
01:04:29,100 --> 01:04:33,300
a waste of time when we actually go to lock down something.

1285
01:04:33,400 --> 01:04:35,700
Like when we do the renderer we start locking that down stuff.

1286
01:04:35,800 --> 01:04:38,800
That's when you'll probably see me start to write some tests because I

1287
01:04:38,800 --> 01:04:43,700
want to be sure and also because for certain things I know that I can

1288
01:04:43,700 --> 01:04:48,000
write tests that will help me develop and debug, the thing that I'm

1289
01:04:48,000 --> 01:04:52,100
working on now, unfortunately for games testing is very difficult,

1290
01:04:52,100 --> 01:04:55,100
because there's a lot of things in games that really can't have unit

1291
01:04:55,100 --> 01:04:55,400
tests.

1292
01:04:55,500 --> 01:04:56,000
For them.

1293
01:04:56,200 --> 01:04:59,700
So the tests are very complicated intend to be randomized, more

1294
01:04:59,700 --> 01:05:01,800
because you couldn't possibly exhaustively test.

1295
01:05:02,200 --> 01:05:07,200
So testing has in general, less utility in game programming than in

1296
01:05:07,200 --> 01:05:08,800
other disciplines in other disciplines.

1297
01:05:08,800 --> 01:05:11,800
Sometimes when you're talking about text transformation like web

1298
01:05:11,800 --> 01:05:16,700
programming you can often times isolate things and write more specific

1299
01:05:16,700 --> 01:05:19,200
test that do cover a lot more of your usage cases.

1300
01:05:19,700 --> 01:05:21,800
So you can get more out of tests and other disciplines.

1301
01:05:21,800 --> 01:05:24,500
Sometimes in game design is a little bit hard, but we will have places

1302
01:05:24,500 --> 01:05:25,300
where we can use them in you.

1303
01:05:25,500 --> 01:05:26,100
See me use them.

1304
01:05:28,300 --> 01:05:30,300
Now however is not one of those times.

1305
01:05:37,100 --> 01:05:39,300
Can you explain what your Z really means?

1306
01:05:39,400 --> 01:05:42,600
If it's for separating levels should tall walls be able to poke into

1307
01:05:42,600 --> 01:05:43,700
upper Z layers.

1308
01:05:44,500 --> 01:05:47,300
So really what I'm sort of doing here.

1309
01:05:49,100 --> 01:05:52,200
Is I'm just kind of building out what's almost a 3D game engine.

1310
01:05:52,600 --> 01:05:58,600
If you think about it and just letting us regress back to 2D for

1311
01:05:58,600 --> 01:05:59,800
things that we find our more.

1312
01:06:00,000 --> 01:06:05,000
Be so, what Z actually means in this engine right now, like we're

1313
01:06:05,000 --> 01:06:07,200
basically treating Z as if it was almost.

1314
01:06:07,500 --> 01:06:10,000
This is almost a 3D engine at this point, right?

1315
01:06:11,000 --> 01:06:13,800
So our Z doesn't have special meaning anymore, we've kind of gotten to

1316
01:06:13,800 --> 01:06:19,200
a place where Z can just be handled and so that probably won't

1317
01:06:19,200 --> 01:06:21,500
continue to be the case will probably have places where we want to

1318
01:06:21,500 --> 01:06:25,400
treat Z very specifically because it is a 2-D game and that means

1319
01:06:25,400 --> 01:06:29,800
we'll have to make some some sort of semantic, z mean,

1320
01:06:30,000 --> 01:06:32,500
Things and places as opposed to making the Z real.

1321
01:06:33,000 --> 01:06:36,100
But for right now, Z means is it's a third coordinate period.

1322
01:06:36,100 --> 01:06:38,800
So you could do anything you wanted, you could have things that span

1323
01:06:38,800 --> 01:06:42,000
multiple Z, you can have entities that that span two floors.

1324
01:06:42,000 --> 01:06:44,500
So you could fight the top of the monster and go down a floor and

1325
01:06:44,500 --> 01:06:45,700
flight the bottom of monster.

1326
01:06:45,900 --> 01:06:46,900
Which come to think about it.

1327
01:06:46,900 --> 01:06:47,300
I don't know why.

1328
01:06:47,300 --> 01:06:48,300
No, one's ever done that before.

1329
01:06:48,300 --> 01:06:49,300
That sounds awesome.

1330
01:06:50,900 --> 01:06:52,400
Don't put that in reminders file.

1331
01:06:54,700 --> 01:06:59,500
So we're basically not cheating yet on Z so so, yeah.

1332
01:06:59,500 --> 01:06:59,900
And so,

1333
01:07:00,300 --> 01:07:03,100
Once we start cheating on Z at some point it will be because we have

1334
01:07:03,100 --> 01:07:06,600
things we want to do there but I put I'm going to put that in the

1335
01:07:06,600 --> 01:07:06,800
thing.

1336
01:07:06,800 --> 01:07:12,200
Monster that you fight on two floors at once.

1337
01:07:13,000 --> 01:07:19,000
Whatever you want to call that going up and down stairs to fight the

1338
01:07:19,000 --> 01:07:21,100
bottom or the top.

1339
01:07:21,900 --> 01:07:22,100
Yeah.

1340
01:07:22,100 --> 01:07:23,400
I've never seen that in a 2-D game.

1341
01:07:23,400 --> 01:07:25,100
I don't think so.

1342
01:07:25,100 --> 01:07:27,000
Yeah, what's going on here?

1343
01:07:27,500 --> 01:07:29,100
Oh no, there we go.

1344
01:07:29,100 --> 01:07:29,500
Okay.

1345
01:07:31,000 --> 01:07:31,500
All right.

1346
01:07:35,000 --> 01:07:37,300
How do you tab between things so quickly?

1347
01:07:39,200 --> 01:07:41,500
I am just using alt be

1348
01:07:42,700 --> 01:07:44,800
Which brings up a little buffer.

1349
01:07:45,700 --> 01:07:49,400
If that what you're talking about in emacs, I can do like alt shift b

1350
01:07:49,400 --> 01:07:50,000
or alt be.

1351
01:07:50,000 --> 01:07:53,000
So alt shift B allows me to bring up something in the separate window

1352
01:07:53,000 --> 01:07:55,800
so I can just type like handmade entity or something, right?

1353
01:07:55,800 --> 01:07:59,200
And bring it up, alt be switches in the same buffer, so I can be like

1354
01:07:59,200 --> 01:08:00,700
math and got the math thing.

1355
01:08:00,800 --> 01:08:01,400
So, that's all I'm.

1356
01:08:01,400 --> 01:08:02,200
That's all I'm doing.

1357
01:08:03,000 --> 01:08:03,700
It's pretty quick.

1358
01:08:03,700 --> 01:08:07,700
When you get the hang of it, if you use Visual Studio, you can

1359
01:08:07,700 --> 01:08:10,300
actually do the same sort of thing in Visual Studio.

1360
01:08:10,300 --> 01:08:12,300
I can't remember what it's called, but there's

1361
01:08:12,800 --> 01:08:17,000
There's a function that's like switch to buffer and you can bind it to

1362
01:08:17,000 --> 01:08:17,600
a key.

1363
01:08:18,000 --> 01:08:20,700
And if you're if you're slow at moving around files and visual studio,

1364
01:08:20,700 --> 01:08:23,899
I would highly recommend going looking that up and binding it to a key

1365
01:08:24,000 --> 01:08:25,100
or just using whatever the key.

1366
01:08:25,100 --> 01:08:28,300
I think it's bound to a key by default, but if it's not then bind it

1367
01:08:29,500 --> 01:08:31,100
and that's that helps you get around a lot quicker.

1368
01:08:40,000 --> 01:08:43,100
How good of a computer do I need to smoothly?

1369
01:08:43,100 --> 01:08:47,000
Code coding doesn't require.

1370
01:08:48,200 --> 01:08:52,399
Any kind of computer, you can smoothly code with, like, my computer at

1371
01:08:52,399 --> 01:08:56,500
work is probably four years old at this point, and I could comfortably

1372
01:08:56,500 --> 01:08:59,000
code on one that was eight years old, probably just fine.

1373
01:09:00,200 --> 01:09:03,500
In fact, this one that were using handmade hero, it was a crazy beefy

1374
01:09:03,500 --> 01:09:05,000
machine for Hardware development.

1375
01:09:05,000 --> 01:09:07,700
So at the time it was kind of ridiculous lie, Advanced.

1376
01:09:07,700 --> 01:09:09,800
But it's pretty old too.

1377
01:09:09,800 --> 01:09:11,000
I think it's four years old.

1378
01:09:11,100 --> 01:09:12,800
At this point, probably more.

1379
01:09:13,899 --> 01:09:17,500
So really coding is not the thing.

1380
01:09:17,500 --> 01:09:18,300
That's the problem.

1381
01:09:18,700 --> 01:09:21,700
The thing that you need to worry about is what kind of game you're

1382
01:09:21,700 --> 01:09:22,300
developing.

1383
01:09:22,500 --> 01:09:26,000
If you're developing some kind of crazy game that does a ton of 3D

1384
01:09:26,200 --> 01:09:29,800
that's really stresses the GPU or even if it's too,

1385
01:09:30,000 --> 01:09:32,200
D but has tons of overdraw or stuff like this.

1386
01:09:33,200 --> 01:09:36,700
Then what you have to ask yourself is how good of a computer do I need

1387
01:09:36,700 --> 01:09:41,600
to handle the development of this because until I optimize it a lot or

1388
01:09:41,600 --> 01:09:45,399
if I'm targeting high-end machines for the day, then I can't obviously

1389
01:09:45,399 --> 01:09:48,500
develop on a machine that couldn't even play my game because I

1390
01:09:48,500 --> 01:09:51,600
couldn't run the game to test it and I can't optimize the game

1391
01:09:51,600 --> 01:09:52,300
properly.

1392
01:09:52,300 --> 01:09:56,400
If I'm not running on the sort of machine that I expect and user to

1393
01:09:56,400 --> 01:09:56,800
have.

1394
01:09:57,600 --> 01:10:00,300
So really the coding part, it doesn't matter.

1395
01:10:00,400 --> 01:10:04,200
You can program on anything just like an editor and a compiler.

1396
01:10:04,200 --> 01:10:05,100
Don't take a lot of

1397
01:10:06,600 --> 01:10:07,300
CPU.

1398
01:10:09,400 --> 01:10:13,300
So it's really more about about what the game is going to need.

1399
01:10:14,100 --> 01:10:14,400
So

1400
01:10:20,100 --> 01:10:20,700
I love you.

1401
01:10:20,700 --> 01:10:21,800
Will you marry me?

1402
01:10:21,900 --> 01:10:25,500
Well, I'm already married and fortunately in Washington state.

1403
01:10:26,800 --> 01:10:29,100
You're only allowed to marry one person.

1404
01:10:29,500 --> 01:10:32,600
So, you know what you going to do?

1405
01:10:32,800 --> 01:10:37,000
When they bring polygamy back, you know how smooth?

1406
01:10:37,000 --> 01:10:38,700
Is it transitioning?

1407
01:10:38,700 --> 01:10:41,800
A knowledge of python into C++.

1408
01:10:50,700 --> 01:10:54,100
So, I would say that if you can just learn to work with memory, more

1409
01:10:54,100 --> 01:10:56,600
directly, you're gonna have to learn to work with pointers and memory

1410
01:10:56,600 --> 01:11:01,600
a little bit more integrally and like get them a little bit more than

1411
01:11:01,600 --> 01:11:06,800
with python but otherwise I mean, you know, code is code and so it's

1412
01:11:06,800 --> 01:11:11,100
really the memory part and thinking about where things live and how

1413
01:11:11,100 --> 01:11:12,300
you operate on them.

1414
01:11:12,400 --> 01:11:16,000
More directly is most of what would be different.

1415
01:11:16,800 --> 01:11:21,500
So, yeah, but I can't say beyond that, I haven't written much python

1416
01:11:21,500 --> 01:11:21,700
code.

1417
01:11:21,700 --> 01:11:24,500
I've only written a little bit so hard for me to say,

1418
01:11:26,700 --> 01:11:29,200
Have you thought more on how the Z axis will look when finally

1419
01:11:29,200 --> 01:11:29,700
implemented?

1420
01:11:29,700 --> 01:11:31,200
I haven't quite yet.

1421
01:11:32,800 --> 01:11:38,200
So I looked at the people were posting and I appreciate that, we're

1422
01:11:38,200 --> 01:11:41,100
posting videos on the forums because I was out talking about it and I

1423
01:11:41,100 --> 01:11:44,700
haven't thought about my I didn't like the isometric looking ones that

1424
01:11:44,700 --> 01:11:48,200
much or was like tilted and there was a lot of Z motion.

1425
01:11:50,000 --> 01:11:52,700
I think I kind of want to focus more on a flat

1426
01:11:53,600 --> 01:11:57,200
World of this, not a lot of Z motion and the Z motion happens when you

1427
01:11:57,200 --> 01:11:59,800
go down into things or up out of things.

1428
01:12:02,800 --> 01:12:05,800
And anyway, it's kind of I mean I don't know we'll have to play around

1429
01:12:05,800 --> 01:12:09,100
with it a little, I don't have a good basically.

1430
01:12:09,100 --> 01:12:13,000
What I want the Z2 mostly do is that but, you know, when I think about

1431
01:12:13,000 --> 01:12:15,100
things like fighting a monster on the top and the bottom and you kind

1432
01:12:15,100 --> 01:12:18,100
of want to see into something below you a little.

1433
01:12:18,100 --> 01:12:19,600
So we'll see.

1434
01:12:19,600 --> 01:12:21,200
We're going to we're going to have to play with it.

1435
01:12:21,800 --> 01:12:24,100
I didn't see anything where I was like yes obviously this game.

1436
01:12:24,100 --> 01:12:25,400
Just did it right or anything, you know?

1437
01:12:25,400 --> 01:12:26,500
So so I don't know.

1438
01:12:30,200 --> 01:12:31,400
Let's see.

1439
01:12:35,700 --> 01:12:39,200
When you work on a game, do you work on one project or do they contact

1440
01:12:39,200 --> 01:12:40,800
you from multiple projects?

1441
01:12:41,400 --> 01:12:43,100
It depends that's entirely.

1442
01:12:43,100 --> 01:12:46,500
Contextual most people tend to work on a single project at a time

1443
01:12:46,500 --> 01:12:46,800
though.

1444
01:12:51,000 --> 01:12:54,800
Do you think about data locality all the time to reduce cache, misses

1445
01:12:57,000 --> 01:12:59,500
No, not really.

1446
01:13:01,400 --> 01:13:05,900
So the answer is, I probably think about data locality a little less

1447
01:13:05,900 --> 01:13:10,600
than I should because data locality wasn't a big deal.

1448
01:13:10,800 --> 01:13:14,400
When I started programming, like, my first 20 years of programming

1449
01:13:14,400 --> 01:13:18,900
data locality was not a big deal and it's only in like the past 10

1450
01:13:18,900 --> 01:13:22,800
years or so that it's been growing into a more and more dominant

1451
01:13:23,800 --> 01:13:24,400
thing.

1452
01:13:25,200 --> 01:13:26,400
And so I

1453
01:13:26,500 --> 01:13:30,500
This point really tend to think about data locality more when I'm

1454
01:13:30,500 --> 01:13:34,300
optimizing things, then what I'm just coding them and in some sense

1455
01:13:34,300 --> 01:13:36,800
that's good because you don't want to spend a lot of mental energy

1456
01:13:36,800 --> 01:13:40,600
thinking about optimization stuff when you're just trying to figure

1457
01:13:40,600 --> 01:13:44,200
out what the architecture for things should be but part of figuring

1458
01:13:44,200 --> 01:13:46,900
out the architecture is making sure you don't make decisions which

1459
01:13:46,900 --> 01:13:49,500
make it impossible for you to do good optimizations later.

1460
01:13:50,200 --> 01:13:53,600
And so I should think about locality more than I do.

1461
01:13:53,700 --> 01:13:54,700
It's really the answer.

1462
01:13:55,900 --> 01:13:59,900
But I've never been a super hardcore optimization guy.

1463
01:14:01,900 --> 01:14:04,800
So you know, like I don't tend to focus.

1464
01:14:04,800 --> 01:14:08,200
I don't tend to be the person who focuses on making the absolute

1465
01:14:08,200 --> 01:14:09,300
fastest, possible thing.

1466
01:14:09,900 --> 01:14:15,200
I try to make my code be pretty darn fast but it's not as fast as like

1467
01:14:15,200 --> 01:14:16,300
some of my friends at rad.

1468
01:14:16,300 --> 01:14:18,300
For example, who are all about the speed

1469
01:14:20,300 --> 01:14:24,500
And so, you know, at some level, I'm just not, I'm not the, I'm not

1470
01:14:24,500 --> 01:14:27,600
the like super crazy Optimizer guy.

1471
01:14:27,600 --> 01:14:33,000
I'm below that and so in some sense that's it's not that unusual that

1472
01:14:33,000 --> 01:14:35,000
I'm not like always thinking about those things.

1473
01:14:38,000 --> 01:14:38,900
And answer the other question.

1474
01:14:38,900 --> 01:14:42,400
I've been programming for 31 years now.

1475
01:14:51,100 --> 01:14:53,600
Am I done working for real made?

1476
01:14:53,600 --> 01:14:56,000
All your money and this is just for fun, philanthropic reasons.

1477
01:14:56,000 --> 01:14:57,300
No, I am.

1478
01:14:57,700 --> 01:14:59,800
I have to go to work.

1479
01:15:00,000 --> 01:15:02,400
Day and I do worry about making money.

1480
01:15:03,200 --> 01:15:05,100
I am, I am not independently wealthy.

1481
01:15:11,300 --> 01:15:15,200
How do you determine what gathers in a chunk with the Z axis?

1482
01:15:15,200 --> 01:15:17,900
Do you grab entities from all six sides of the chunk?

1483
01:15:18,200 --> 01:15:21,500
Well, it's not really 6 size of the chunk, it's a volume, right?

1484
01:15:21,900 --> 01:15:24,300
And so what we're doing and this is the part that we have to debug

1485
01:15:24,300 --> 01:15:25,900
tomorrow because we broke something.

1486
01:15:25,900 --> 01:15:26,500
Right?

1487
01:15:27,300 --> 01:15:30,600
What we were doing before is we were basically saying, okay let's

1488
01:15:30,600 --> 01:15:34,100
gather everything from a-z slice in the world, right?

1489
01:15:34,400 --> 01:15:38,400
Because remember before we were sort of dividing up the world, right?

1490
01:15:38,800 --> 01:15:40,600
We have this notion that the

1491
01:15:40,800 --> 01:15:43,200
World was sort of in slices, right?

1492
01:15:43,200 --> 01:15:47,100
And then inside those slices, they were little 16 by 16 tile chunks,

1493
01:15:47,100 --> 01:15:49,100
sort of, and then we got rid of the concept of tiles.

1494
01:15:49,100 --> 01:15:50,700
So really it's mostly just like, you know.

1495
01:15:50,700 --> 01:15:52,700
However, I do remember how wide a tile was on the side.

1496
01:15:52,700 --> 01:15:55,100
But, you know, it's something like, you know, 20 meter by 20 meter

1497
01:15:55,100 --> 01:15:56,300
chunk at this point or something.

1498
01:15:56,400 --> 01:15:57,800
So it's, you know, it's just a chunk.

1499
01:15:58,500 --> 01:16:01,300
And basically what we were doing is we were storing all of our world

1500
01:16:01,300 --> 01:16:04,200
in those chunks and we only had a sparse storage for them.

1501
01:16:04,400 --> 01:16:06,600
And then what we would do is we'd go through the chunks that

1502
01:16:06,600 --> 01:16:10,600
overlapped a camera region and we grab them out and process them.

1503
01:16:10,700 --> 01:16:11,700
And then stick them back.

1504
01:16:12,000 --> 01:16:12,500
Right?

1505
01:16:13,500 --> 01:16:16,700
And so now what we're doing is we're extending that to basically think

1506
01:16:16,700 --> 01:16:20,900
of these things, instead of a slices to be actual like they're not

1507
01:16:20,900 --> 01:16:25,600
actually cubes because they're they're they're sort of square on one

1508
01:16:25,600 --> 01:16:25,900
side.

1509
01:16:25,900 --> 01:16:30,100
But there's stuff out there, they're not as tall as they are wide and

1510
01:16:30,700 --> 01:16:33,900
you know with them height and Z they're not as tall.

1511
01:16:35,300 --> 01:16:38,100
So, I believe the term would be right.

1512
01:16:39,300 --> 01:16:40,800
Rectangular prism.

1513
01:16:47,100 --> 01:16:50,700
also, often called an axis aligned

1514
01:16:53,200 --> 01:16:58,700
bounding box, even though these things are not the same, this one

1515
01:16:58,700 --> 01:17:02,000
doesn't have to be access aligned, it just has to be some kind of a

1516
01:17:02,000 --> 01:17:04,400
thing that has all right angles, right?

1517
01:17:05,000 --> 01:17:08,700
But an excellent bounding box is a special case of one of these, where

1518
01:17:08,900 --> 01:17:12,500
we know that these things can't be freely rotated in here, they have

1519
01:17:12,500 --> 01:17:14,800
to actually line up with the x y&z axis, right?

1520
01:17:14,800 --> 01:17:18,500
There, axis aligned chunks and so it acts as a line bounding box.

1521
01:17:18,500 --> 01:17:18,600
Really.

1522
01:17:18,600 --> 01:17:22,600
We have actually about us also called an AA BB

1523
01:17:22,900 --> 01:17:24,600
Axis aligned bounding box.

1524
01:17:24,700 --> 01:17:27,100
You'll see that term pretty often and so really what we're doing is

1525
01:17:27,100 --> 01:17:29,300
we're trying this isn't just something that pulls out.

1526
01:17:29,300 --> 01:17:31,400
Whatever's inside, that axis line bounding box.

1527
01:17:31,400 --> 01:17:33,500
Anything that overlaps it we pull out

1528
01:17:34,700 --> 01:17:37,200
So that's what we're doing currently.

1529
01:17:37,200 --> 01:17:42,100
And right now we actually, you know, and I should put it to do in.

1530
01:17:42,100 --> 01:17:49,100
We actually are doing something not quite right, which we could pretty

1531
01:17:49,100 --> 01:17:50,300
trivially start doing right now.

1532
01:17:50,300 --> 01:17:51,700
So we might as well just start doing it, right?

1533
01:17:51,700 --> 01:17:57,000
Which is that when we pull things in, when we do is in rectangle,

1534
01:17:57,000 --> 01:17:57,600
right?

1535
01:17:57,600 --> 01:17:59,700
We've got sort of these two calls

1536
01:18:00,400 --> 01:18:06,200
Is it rectangle is in rectangle really what we want to do is to do and

1537
01:18:06,200 --> 01:18:06,500
you know what?

1538
01:18:06,500 --> 01:18:06,800
I'll do.

1539
01:18:06,800 --> 01:18:08,900
I'll put it in our Master to do so I remembered it.

1540
01:18:08,900 --> 01:18:09,400
Do it.

1541
01:18:10,400 --> 01:18:15,900
See in here minkowski it'll do that pretty easily I guess we did that

1542
01:18:15,900 --> 01:18:16,500
clean up things.

1543
01:18:16,500 --> 01:18:18,100
We're just a buggy Matt now, so that's gone.

1544
01:18:19,100 --> 01:18:24,700
So we have our Mankowski, we want to do Mankowski inclusion test for a

1545
01:18:24,700 --> 01:18:29,500
Sim region, begin updatable bounds.

1546
01:18:30,400 --> 01:18:32,600
And so basically what I was going to say is what we're not doing right

1547
01:18:32,600 --> 01:18:34,300
now is our entities.

1548
01:18:34,300 --> 01:18:40,100
When we do tests on the entities, we're not actually seeing if we're

1549
01:18:40,100 --> 01:18:41,200
treating them as points.

1550
01:18:41,300 --> 01:18:44,000
So when we do our inclusion test, oops I zoomed out there.

1551
01:18:44,000 --> 01:18:49,700
Didn't I when we do our inclusion tests I actually am just doing a

1552
01:18:49,700 --> 01:18:53,700
point test and saying is this point inside the volume that we're

1553
01:18:53,700 --> 01:18:54,300
pulling in?

1554
01:18:54,400 --> 01:18:54,600
Yes.

1555
01:18:54,600 --> 01:18:58,600
Know what I really should be doing is saying okay entities have volume

1556
01:18:58,600 --> 01:18:59,900
themselves so

1557
01:19:00,000 --> 01:19:01,700
Let's do the exact same Mankowski.

1558
01:19:01,700 --> 01:19:03,000
Some we were doing for vision to action.

1559
01:19:03,100 --> 01:19:08,000
Let's expand that gather region by the dimensions of the entity then

1560
01:19:08,000 --> 01:19:11,900
test the point to see if it's included or something similar dude.

1561
01:19:11,900 --> 01:19:16,700
So, basically actually test for volumes overlapping instead of just a

1562
01:19:16,700 --> 01:19:20,300
point being inside it, so we should probably do that because it's

1563
01:19:20,300 --> 01:19:21,300
pretty free for us to do.

1564
01:19:21,300 --> 01:19:22,300
So we might as well.

1565
01:19:26,300 --> 01:19:27,500
Let's see.

1566
01:19:28,200 --> 01:19:31,400
I recently, watched John blows talk on a tempting deep work and became

1567
01:19:31,400 --> 01:19:31,900
curious.

1568
01:19:32,100 --> 01:19:35,700
Do you do anything similar from a psychological perspective by ego,

1569
01:19:35,700 --> 01:19:39,000
dancing like John does or do you have some other relaxing rewarding

1570
01:19:39,000 --> 01:19:42,000
activity that helps to spawn, creative thought or gain elusive

1571
01:19:42,000 --> 01:19:43,000
insights into problems?

1572
01:19:43,000 --> 01:19:44,300
You are struggling to solve

1573
01:19:47,000 --> 01:19:50,000
So no, I guess, I don't.

1574
01:19:50,400 --> 01:19:54,400
But you have to remember, John is, I mean, he is a programmer, but

1575
01:19:54,400 --> 01:20:03,800
he's a game designer probably first nowadays and like programming.

1576
01:20:03,800 --> 01:20:08,200
I don't know if John would be doing those things for programming,

1577
01:20:08,300 --> 01:20:13,100
like, I don't know if John feels like he needs to go dancing to think

1578
01:20:13,100 --> 01:20:16,300
through a problem in his new language compiler, right?

1579
01:20:17,100 --> 01:20:18,900
That's a good question to ask him actually.

1580
01:20:19,800 --> 01:20:23,900
So I don't know if he does that but he may be talking about that more

1581
01:20:23,900 --> 01:20:29,700
for doing game design which has a lot less rigor to it, right?

1582
01:20:29,700 --> 01:20:33,700
It's a lot more, there's a lot more creativity and loose constraints

1583
01:20:33,700 --> 01:20:36,100
and things that are harder to Think Through logically.

1584
01:20:37,200 --> 01:20:41,500
And so I don't know if he would say that he does those same things.

1585
01:20:41,500 --> 01:20:46,300
He was talking about in that lecture for programming only but I don't

1586
01:20:46,300 --> 01:20:47,600
know because I actually never seen that.

1587
01:20:47,600 --> 01:20:50,200
Lecture, I know what you're talking about roughly about never seen

1588
01:20:50,200 --> 01:20:51,100
that particular lecture.

1589
01:20:51,400 --> 01:20:54,800
So I guess I'd say you'd have to ask John to be more specific about

1590
01:20:54,800 --> 01:20:58,600
that but no I don't and I also don't know how to dance very well so

1591
01:20:58,600 --> 01:20:59,500
that doesn't help.

1592
01:21:03,900 --> 01:21:06,400
So we're almost done here.

1593
01:21:06,400 --> 01:21:07,400
Let me see.

1594
01:21:08,600 --> 01:21:09,700
Do you think rk4?

1595
01:21:09,700 --> 01:21:12,600
Integration is overkill for a 2-D game like handmade hero.

1596
01:21:13,800 --> 01:21:15,700
So, I answered this question before.

1597
01:21:16,600 --> 01:21:19,200
I will answer it briefly again, but I would say, maybe try to go back

1598
01:21:19,200 --> 01:21:20,500
and find my previous answer.

1599
01:21:21,500 --> 01:21:25,600
Rk4 is not something I would ever use in a game.

1600
01:21:25,600 --> 01:21:31,500
Under any circumstances rk4 is a numerical integration technique.

1601
01:21:31,500 --> 01:21:33,600
First of all, we had we don't have anything to numerically integrate

1602
01:21:33,600 --> 01:21:34,100
yet.

1603
01:21:34,100 --> 01:21:38,200
So there are k for we wouldn't have any use for rk4, I assume your

1604
01:21:38,200 --> 01:21:38,300
form.

1605
01:21:38,500 --> 01:21:45,100
The runge-kutta integration fourth order, or whatever, but, or

1606
01:21:45,100 --> 01:21:47,400
whatever the force transfer, I don't remember how they number them.

1607
01:21:47,400 --> 01:21:51,100
I assume you're referring to a runge-kutta flavor, runge-kutta is not

1608
01:21:51,100 --> 01:21:52,500
a good integrator for games.

1609
01:21:52,500 --> 01:21:55,000
I would not suggest using around cut off or anything.

1610
01:21:55,100 --> 01:21:59,100
If you're numerically integrating things, I would strongly recommend

1611
01:22:00,200 --> 01:22:05,400
using something like backwards, Euler or something, that was more

1612
01:22:05,400 --> 01:22:07,900
conservative, and that doesn't add energy to the system.

1613
01:22:07,900 --> 01:22:08,200
Our case.

1614
01:22:08,400 --> 01:22:13,900
4S unless I'm misremembering are very bad and they have all kinds of

1615
01:22:13,900 --> 01:22:16,800
energy explosion criteria and you just hate life.

1616
01:22:17,100 --> 01:22:21,000
If you're running through in rk4 integrator and unless things have

1617
01:22:21,000 --> 01:22:25,600
changed significantly, I don't recall the the high in physics people

1618
01:22:25,900 --> 01:22:30,100
in games to ever think that rk4 was a good idea, but I could be wrong

1619
01:22:30,100 --> 01:22:30,800
about that.

1620
01:22:31,400 --> 01:22:33,100
So rk4 II.

1621
01:22:35,400 --> 01:22:36,500
I don't think that has anything to do with her.

1622
01:22:36,500 --> 01:22:37,900
It's Overkill, or not, for Duty game.

1623
01:22:37,900 --> 01:22:40,200
I would say stay far away from rk4.

1624
01:22:40,200 --> 01:22:44,000
Unless you really know that it's a good idea because I've been

1625
01:22:44,000 --> 01:22:45,400
programmed physics in a long time.

1626
01:22:45,400 --> 01:22:51,500
Last night program physics was 1998, maybe let's say, I mean serious

1627
01:22:51,500 --> 01:22:55,900
physics like three-dimensional rotating rigid body physics was

1628
01:22:55,900 --> 01:22:57,900
literally 1998, so a lot has changed since then.

1629
01:22:59,000 --> 01:23:02,600
But at that time we were using around Kutta methods, and they were

1630
01:23:02,600 --> 01:23:05,700
awful, and it was right at that time where people were figuring out,

1631
01:23:05,700 --> 01:23:08,000
you don't ever want to use those kind of methods.

1632
01:23:08,000 --> 01:23:12,500
You want to use methods that remove energy from the system, virile a

1633
01:23:12,500 --> 01:23:17,000
schemes backwards, Euler stuff like that, that remove energy from the

1634
01:23:17,000 --> 01:23:22,000
systems instead of ones to add energy because the last you want things

1635
01:23:22,000 --> 01:23:26,900
in your game to calm down, you don't want them to excite and rk4 is an

1636
01:23:26,900 --> 01:23:28,500
exciting, you know, integrators.

1637
01:23:28,700 --> 01:23:31,500
That add energy to excite things and they cause those physics

1638
01:23:31,500 --> 01:23:35,200
explosions, where stuff, just goes crazy, and, and the game goes nuts,

1639
01:23:35,200 --> 01:23:35,600
right?

1640
01:23:35,600 --> 01:23:37,300
And you really don't want that.

1641
01:23:41,600 --> 01:23:42,200
Let's see.

1642
01:23:42,200 --> 01:23:43,700
Last few questions here.

1643
01:23:48,400 --> 01:23:49,400
Give this anything?

1644
01:23:49,700 --> 01:23:52,800
Like an answer that's related to the programming.

1645
01:24:06,100 --> 01:24:07,700
Let's see.

1646
01:24:07,800 --> 01:24:10,900
Okay, I will take two more of these that I see here.

1647
01:24:20,300 --> 01:24:21,100
Maybe I'll take three.

1648
01:24:21,300 --> 01:24:21,600
All right.

1649
01:24:21,600 --> 01:24:23,100
So we'll do these in order here.

1650
01:24:25,400 --> 01:24:29,500
So, someone asked why am I using assertions in non test code?

1651
01:24:30,900 --> 01:24:32,100
So I guess

1652
01:24:33,900 --> 01:24:37,300
I want to take that question because I feel like that suggests that

1653
01:24:37,300 --> 01:24:42,700
maybe you are thinking about assertions in an unusual way because what

1654
01:24:42,700 --> 01:24:47,100
assertions are for is assertions are specifically for non test code.

1655
01:24:48,200 --> 01:24:54,800
The whole design of assertions is to put them in your non test code.

1656
01:24:55,900 --> 01:25:00,500
So the way that assertions work is when you compile normally you leave

1657
01:25:00,500 --> 01:25:03,400
them in and then when you want to do performance testing or release

1658
01:25:03,400 --> 01:25:03,500
the

1659
01:25:04,000 --> 01:25:05,700
They disappear, right?

1660
01:25:05,700 --> 01:25:07,300
You can just compile them out.

1661
01:25:07,500 --> 01:25:11,400
So they're zero cost to you when you're actually doing performance

1662
01:25:11,400 --> 01:25:15,100
work and they only actually cost you when you're doing your debugging

1663
01:25:15,100 --> 01:25:16,700
work which is when you want them to do the work.

1664
01:25:16,900 --> 01:25:19,500
So the idea behind assertion is to put them everywhere.

1665
01:25:19,800 --> 01:25:23,500
You have some condition you think is always going to be true.

1666
01:25:24,100 --> 01:25:27,900
And I don't always do that so I can put in a lot more assertions,

1667
01:25:27,900 --> 01:25:32,600
like, for example right here, we know that that ref can't be 0, right?

1668
01:25:33,600 --> 01:25:34,500
So I can put that in there.

1669
01:25:34,800 --> 01:25:38,700
The reason that I don't is because that's literally a waste of typing.

1670
01:25:39,000 --> 01:25:43,000
We know that that if ref was passed in as 0, the first thing that's

1671
01:25:43,000 --> 01:25:45,700
going to happen is this codes going to fault immediately because it

1672
01:25:45,700 --> 01:25:48,700
going to try and reference off of the zero to load this pointer out.

1673
01:25:48,900 --> 01:25:52,800
So the assertion didn't do anything that code will already Fail Hard

1674
01:25:52,800 --> 01:25:53,400
immediately.

1675
01:25:54,100 --> 01:25:57,500
But what you do want to do is you want to put in a search engines that

1676
01:25:57,500 --> 01:26:00,700
will try to make your code Fail Hard at that point whenever you have

1677
01:26:00,700 --> 01:26:03,300
something that would not have caused a null pointer.

1678
01:26:03,500 --> 01:26:04,600
It's because that would stop you heart.

1679
01:26:04,600 --> 01:26:06,800
What you need is to, you're trying to create hard stops where none

1680
01:26:06,800 --> 01:26:07,600
existed before.

1681
01:26:08,100 --> 01:26:12,700
So for example, in this case, If This Were a zero, this this storage

1682
01:26:12,700 --> 01:26:13,200
index.

1683
01:26:13,500 --> 01:26:14,200
No problem.

1684
01:26:14,200 --> 01:26:16,700
When the storage index gets passed through this code would just work

1685
01:26:17,300 --> 01:26:20,500
but that be very bad because that meant someone was trying to add an

1686
01:26:20,500 --> 01:26:23,000
entity with a storage X of 0, which we know is not allowed.

1687
01:26:23,000 --> 01:26:28,300
Zero means no entity, so that assertion here is to catch that much

1688
01:26:28,300 --> 01:26:30,800
earlier in the debugging process.

1689
01:26:30,800 --> 01:26:31,300
It makes it.

1690
01:26:31,300 --> 01:26:32,100
So it's loud.

1691
01:26:32,100 --> 01:26:33,200
It fails right there.

1692
01:26:33,400 --> 01:26:33,600
R.

1693
01:26:33,600 --> 01:26:36,800
Otherwise, what will happen is that in any gets added as entity 0,

1694
01:26:36,800 --> 01:26:38,500
then somewhere down the line.

1695
01:26:38,500 --> 01:26:40,700
We go, wait, why do we have an entity 0 Y?

1696
01:26:40,700 --> 01:26:43,500
Is this, this is actually getting someone is looking it up and he's

1697
01:26:43,500 --> 01:26:45,200
finding it as to what's going on, right?

1698
01:26:45,200 --> 01:26:47,600
And then we got to work all the way backwards and get all the way back

1699
01:26:47,600 --> 01:26:49,400
to this part where it failed.

1700
01:26:50,500 --> 01:26:54,200
And so the goal of assertions is specifically to put them in code,

1701
01:26:54,500 --> 01:26:58,000
that is not test code, is to put it in your release code, your actual

1702
01:26:58,000 --> 01:26:59,700
real code that you're trying to make.

1703
01:27:00,400 --> 01:27:02,900
You're trying to assert the things that you think should always be

1704
01:27:02,900 --> 01:27:03,400
true.

1705
01:27:03,800 --> 01:27:07,200
And then again, what you do is at the end you just compile them out,

1706
01:27:07,300 --> 01:27:07,500
right?

1707
01:27:07,500 --> 01:27:11,500
We inside handmade platform that H.

1708
01:27:12,100 --> 01:27:14,000
We have this assertion macro, right?

1709
01:27:14,100 --> 01:27:15,400
We've got handmade slow.

1710
01:27:15,500 --> 01:27:18,700
All we have to do is pound a fine handmade slow to be 0 and all the

1711
01:27:18,700 --> 01:27:21,600
assertions disappear poof, they're not even there anymore, right?

1712
01:27:21,800 --> 01:27:25,000
So it costs us nothing to put in those assertions.

1713
01:27:25,000 --> 01:27:28,400
They are completely free when we actually go to do our optimization

1714
01:27:28,400 --> 01:27:28,700
work.

1715
01:27:28,900 --> 01:27:29,700
So I would greatly

1716
01:27:30,000 --> 01:27:32,400
courage you to put a certain in your actual code.

1717
01:27:32,400 --> 01:27:35,600
It's not just for test code, it's for all your code and it's for

1718
01:27:35,600 --> 01:27:40,800
making things fail, quickly, and immediately upon any circumstance

1719
01:27:40,800 --> 01:27:43,500
that seems out of the ordinary in shouldn't happen because that's

1720
01:27:43,500 --> 01:27:45,500
going to cut down on the debugging time.

1721
01:27:45,900 --> 01:27:49,600
If anything, I am using less assertions here than I probably would

1722
01:27:49,600 --> 01:27:50,100
normally.

1723
01:27:50,200 --> 01:27:53,000
And part of that is I have a hard time when I'm explaining code and

1724
01:27:53,000 --> 01:27:53,600
writing it.

1725
01:27:54,800 --> 01:27:58,400
It's harder for me to keep my mental state proper for coding.

1726
01:27:58,800 --> 01:27:59,900
If anything, the code that

1727
01:28:00,000 --> 01:28:02,700
See me right on the stream has less assertions.

1728
01:28:02,700 --> 01:28:06,700
That it would, when I would normally be writing it because it takes

1729
01:28:06,700 --> 01:28:09,300
extra mental energy for me to think about what should be asserted.

1730
01:28:09,900 --> 01:28:13,600
So I'd highly recommend certainly don't use less asserts that I'm

1731
01:28:13,600 --> 01:28:14,000
using.

1732
01:28:15,200 --> 01:28:17,000
I'm a decent programmer.

1733
01:28:17,000 --> 01:28:22,300
I don't make a huge number of stupid mistakes so it's not the case

1734
01:28:22,300 --> 01:28:25,400
that I have to put in these assertions because I'm just really bad or

1735
01:28:25,400 --> 01:28:26,200
anything like that.

1736
01:28:26,400 --> 01:28:29,800
I am reasonably good at coding and I

1737
01:28:29,900 --> 01:28:32,500
still always want those searches there and they always catch errors

1738
01:28:32,500 --> 01:28:37,500
Because unless you're way way better than I am, trust me, you will

1739
01:28:37,500 --> 01:28:41,500
make mistakes of the kind that these assertions will catch quickly and

1740
01:28:41,500 --> 01:28:44,900
they'll save you a ton of time and I'm the guy who says don't bother

1741
01:28:44,900 --> 01:28:45,800
typing const, right?

1742
01:28:45,800 --> 01:28:51,100
So I would not tell you, to put something in your code by rote or

1743
01:28:51,100 --> 01:28:51,800
anything like that.

1744
01:28:51,800 --> 01:28:56,200
I, I trim out all of those things that I think don't catch my errors.

1745
01:28:56,200 --> 01:28:58,600
The kind of errors that I make because I make errors all the time.

1746
01:28:59,000 --> 01:28:59,800
You see me, make them on the

1747
01:29:00,000 --> 01:29:01,500
And I make them that's not just on the stream.

1748
01:29:01,500 --> 01:29:02,900
I make them in real life all the time.

1749
01:29:03,200 --> 01:29:04,800
My code doesn't work the first time.

1750
01:29:04,800 --> 01:29:05,400
I'm not mr.

1751
01:29:05,400 --> 01:29:09,600
Like everything comes out perfect and so I don't type the things in

1752
01:29:09,600 --> 01:29:10,800
that I don't find Sammy time.

1753
01:29:10,800 --> 01:29:12,900
I don't type private, don't type cos I don't find.

1754
01:29:12,900 --> 01:29:14,100
They help me right?

1755
01:29:14,400 --> 01:29:19,000
But assert it absolutely does every day, maybe not every day.

1756
01:29:19,000 --> 01:29:24,500
But you know, every week let's say I have bugs that get caught every

1757
01:29:24,500 --> 01:29:27,700
week by assertions that I may not even have seen till much later.

1758
01:29:27,700 --> 01:29:29,800
And that could have been very hard to track down.

1759
01:29:29,900 --> 01:29:34,700
So assert good, I would highly recommend keeping it in your code, not

1760
01:29:34,700 --> 01:29:35,400
just test code.

1761
01:29:37,500 --> 01:29:39,500
So let's see here.

1762
01:29:39,800 --> 01:29:42,800
And then the last question, what about having two regions one outer

1763
01:29:42,800 --> 01:29:44,000
and one inner included?

1764
01:29:44,000 --> 01:29:47,100
He's that move into the inner and exclude entities, that move out of

1765
01:29:47,100 --> 01:29:47,900
the outer.

1766
01:29:48,100 --> 01:29:52,800
So there's a margin that allows some moving without ping-ponging,

1767
01:29:53,000 --> 01:29:59,800
right across a hard in outline, so we already have that.

1768
01:30:00,500 --> 01:30:04,300
I don't know, if you remember what we have is the updatable zone and

1769
01:30:04,300 --> 01:30:05,700
the non updatable Zone.

1770
01:30:06,300 --> 01:30:09,500
And so we have that area in the outside where we basically allow

1771
01:30:09,500 --> 01:30:12,800
people to move out into it, but we don't allow anything in it to move.

1772
01:30:14,000 --> 01:30:16,600
It's not quite for the purpose you're talking about, but the idea

1773
01:30:16,600 --> 01:30:20,200
behind the non ping pong is whatever the region is, you're still going

1774
01:30:20,200 --> 01:30:21,500
to have this.

1775
01:30:23,000 --> 01:30:24,600
It's really an optimization.

1776
01:30:24,600 --> 01:30:27,800
If that makes sense is to make it so that you can have tighter bounds

1777
01:30:27,800 --> 01:30:29,900
on the number of entities that are in your

1778
01:30:30,000 --> 01:30:33,200
set or that you have to check to see if they're in the set.

1779
01:30:33,300 --> 01:30:36,300
And so really what I was doing there was I just wanted the alignment

1780
01:30:36,300 --> 01:30:38,300
so that we don't have to pull in.

1781
01:30:39,100 --> 01:30:42,900
We don't have a check another tile chunk so it really didn't have

1782
01:30:42,900 --> 01:30:44,700
anything to do with the bounds we were using.

1783
01:30:44,800 --> 01:30:47,500
It was more just about centering it so that we do the minimal amount

1784
01:30:47,500 --> 01:30:51,700
of work to get the same volume and if that makes sense because it

1785
01:30:51,700 --> 01:30:52,300
wouldn't matter.

1786
01:30:52,300 --> 01:30:53,900
The ping-pong is going to affect us, it's fight.

1787
01:30:53,900 --> 01:30:55,100
We'd it doesn't bother us.

1788
01:30:55,400 --> 01:30:58,300
It was more just to make sure that we didn't have to check that extra

1789
01:30:58,300 --> 01:30:58,700
region.

1790
01:30:58,800 --> 01:30:59,900
And to be clear it's not always

1791
01:31:00,000 --> 01:31:02,800
Roppongi either entities have a size so we just don't want them to

1792
01:31:02,800 --> 01:31:04,500
straddle that boundary.

1793
01:31:04,500 --> 01:31:08,000
We want to center it and now we have less tile chunks to check.

1794
01:31:08,400 --> 01:31:11,300
So that's that's really it, right?

1795
01:31:13,300 --> 01:31:14,500
So I think that's about it.

1796
01:31:15,500 --> 01:31:17,300
Hopefully we covered enough of the questions there.

1797
01:31:17,300 --> 01:31:19,800
There were a lot of them but yeah.

1798
01:31:20,000 --> 01:31:21,300
So hopefully we covered all that there.

1799
01:31:21,800 --> 01:31:23,900
So I'm going to go ahead and and call it here.

1800
01:31:24,000 --> 01:31:25,500
And tomorrow, we will pick up.

1801
01:31:25,500 --> 01:31:29,200
We'll finish that to bugging process, just to clean up, all the

1802
01:31:29,200 --> 01:31:32,100
changes that we made and make sure everything's working, okay, enough

1803
01:31:32,300 --> 01:31:35,400
with our V3 change and then what we'll do is we'll just finish these

1804
01:31:35,400 --> 01:31:39,000
guys up and so this will be some more cleanup tomorrow.

1805
01:31:39,000 --> 01:31:41,700
Just working through that Z and we might be able to finish the off

1806
01:31:41,700 --> 01:31:43,000
tomorrow but maybe

1807
01:31:43,100 --> 01:31:46,100
Not will have to will see, it may take another day because we've got

1808
01:31:46,100 --> 01:31:49,100
this nastiness here, which is it's kind of like, we don't really know

1809
01:31:49,100 --> 01:31:49,700
what we want to do.

1810
01:31:49,700 --> 01:31:52,900
And when we don't know that implies playing around in testing in that

1811
01:31:52,900 --> 01:31:55,500
test, take a little more time, but we should be able to make pretty

1812
01:31:55,500 --> 01:31:56,000
good progress.

1813
01:31:56,000 --> 01:31:58,100
So hopefully I will see you tomorrow for that.

1814
01:31:58,100 --> 01:31:58,900
That's at 8 p.m.

1815
01:31:58,900 --> 01:32:01,200
Pacific Standard Time, same time plate, same place.

1816
01:32:01,700 --> 01:32:04,200
Hope to see you all here again then.

1817
01:32:04,800 --> 01:32:08,700
Until then, if you would like to follow along at home,

1818
01:32:09,700 --> 01:32:12,500
You can always do so by pre-ordering the game at handmade hero

1819
01:32:12,500 --> 01:32:13,100
dot-org.

1820
01:32:13,500 --> 01:32:15,600
If you go ahead and pre-order the game, it comes with a full source

1821
01:32:15,600 --> 01:32:15,800
code.

1822
01:32:15,800 --> 01:32:17,500
So you can download the source code play around at home.

1823
01:32:17,500 --> 01:32:18,300
Just like I'm doing.

1824
01:32:19,200 --> 01:32:21,900
And of course, all of the videos are archived both on YouTube and at

1825
01:32:21,900 --> 01:32:24,100
our news and Forum site, we have an episode guide.

1826
01:32:24,200 --> 01:32:25,700
That's pretty cool that you can go through.

1827
01:32:26,400 --> 01:32:29,000
And so, if you want to go back and see how everything was made,

1828
01:32:29,100 --> 01:32:33,100
absolutely every line of code, I explained on this stream, just like I

1829
01:32:33,100 --> 01:32:35,300
did tonight and so if you want to check that out, you can always do

1830
01:32:35,300 --> 01:32:35,900
that.

1831
01:32:36,200 --> 01:32:38,500
We also have a patreon if you want to support the video series, it's

1832
01:32:38,500 --> 01:32:39,200
very much appreciated.

1833
01:32:40,400 --> 01:32:41,300
You can check that out again.

1834
01:32:41,300 --> 01:32:43,000
He made here at Orange, got all the links for it.

1835
01:32:43,200 --> 01:32:45,900
Finally, if you're trying to catch the stream regularly and you want

1836
01:32:45,900 --> 01:32:48,000
to know what it is, we've got a tweetbot, the tweets, the schedule

1837
01:32:48,000 --> 01:32:52,100
that you and that's a good place to go to sort of just keep up to date

1838
01:32:52,100 --> 01:32:54,300
on when the, when the streams are.

1839
01:32:54,700 --> 01:32:56,700
If you're having trouble catching of course, you can always subscribe

1840
01:32:56,700 --> 01:33:01,300
on, not subscribe, follow on Twitch and that emails you when I start

1841
01:33:01,300 --> 01:33:03,700
but that doesn't really help you tell like when it's going to be so

1842
01:33:03,700 --> 01:33:05,200
the treat box pretty handy for that.

1843
01:33:05,700 --> 01:33:06,400
That's about it.

1844
01:33:06,400 --> 01:33:09,100
Thank you for joining me and I hope to see you all tomorrow.

1845
01:33:09,400 --> 01:33:10,400
So, thanks everyone.

