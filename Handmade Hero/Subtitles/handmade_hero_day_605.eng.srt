1
00:00:00,000 --> 00:00:01,800
Everybody and welcome to handmade hero.

2
00:00:01,800 --> 00:00:04,300
Sure, we could complete game live on stream.

3
00:00:04,300 --> 00:00:09,000
I don't know that there's anything particularly magical to say before

4
00:00:09,000 --> 00:00:10,300
today's episode.

5
00:00:10,300 --> 00:00:14,800
We just have to now go through and clean up the lighting code and

6
00:00:14,800 --> 00:00:21,300
debug it, which is what I was going to do yesterday and we actually

7
00:00:21,300 --> 00:00:25,900
ended up doing a lot more clean up, then I was originally planning to

8
00:00:25,900 --> 00:00:29,000
do, but it was just like getting to the point where the code was just

9
00:00:29,000 --> 00:00:29,800
too many things.

10
00:00:30,000 --> 00:00:34,200
Things in one place, there was just so much stuff that we had tried

11
00:00:34,200 --> 00:00:35,800
and it was still running in line.

12
00:00:35,800 --> 00:00:38,700
I just like we're going to have to clean this up a little bit.

13
00:00:40,900 --> 00:00:42,300
So that's exactly what we did.

14
00:00:42,300 --> 00:00:46,400
And you can now kind of see the structure of the code is changing a

15
00:00:46,400 --> 00:00:49,100
little bit and I'm going to go ahead and copy these functions

16
00:00:49,100 --> 00:00:52,800
signatures out to the outside just so they can be viewed a little bit

17
00:00:52,800 --> 00:00:58,900
clearer so we can see what's happening in terms of the actual sort of

18
00:00:58,900 --> 00:01:06,000
flow of using the lighting system and I think if I'm not mistaken,

19
00:01:06,400 --> 00:01:08,500
we've now got it down to the point.

20
00:01:09,700 --> 00:01:11,300
Where you're to me?

21
00:01:12,600 --> 00:01:16,000
Where you're a lot more explicit about what you're actually going to

22
00:01:16,000 --> 00:01:16,600
be doing.

23
00:01:17,100 --> 00:01:20,500
And so it's much clearer how the Lighting systems actually going.

24
00:01:21,300 --> 00:01:24,500
So you can see here the way that we currently have, it structured

25
00:01:24,700 --> 00:01:28,000
where you set up the lighting region by telling it what's going on

26
00:01:28,000 --> 00:01:28,300
here.

27
00:01:28,700 --> 00:01:32,200
You then push the lighting render values on if you're trying to do.

28
00:01:32,200 --> 00:01:34,800
Rendering you update the lighting.

29
00:01:37,100 --> 00:01:38,500
This is after you've already done everything.

30
00:01:42,500 --> 00:01:46,300
And then you go to push lighting, debug values if you actually want to

31
00:01:46,300 --> 00:01:48,700
put like, the debug lines on the screen and stuff like that.

32
00:01:49,600 --> 00:01:55,600
Now, the problem that just mean that we have here is just that set up.

33
00:01:55,600 --> 00:02:00,100
Lighting region is something that I'd rather not have to call my goal,

34
00:02:00,100 --> 00:02:05,000
would have been to just have one call that's like update lighting, but

35
00:02:05,000 --> 00:02:07,500
the problem with that, and the reason that we can't really do that is

36
00:02:07,500 --> 00:02:10,400
because even though the lighting system would work just fine, it's

37
00:02:10,400 --> 00:02:12,100
this pushed lighting.

38
00:02:12,400 --> 00:02:13,700
Our values, that's the problem.

39
00:02:14,300 --> 00:02:17,400
So, the way this works is, you can see it sets these light bounds here

40
00:02:18,300 --> 00:02:20,300
and does the enable lighting call.

41
00:02:21,700 --> 00:02:26,800
Now, anyone could do these calls, but they, so there's not any

42
00:02:26,800 --> 00:02:29,100
particular reason that the lighting system has to be involved.

43
00:02:29,600 --> 00:02:32,900
But the key thing here is there's this voxel wrecked, and that Foxhole

44
00:02:32,900 --> 00:02:33,300
wrecked.

45
00:02:33,400 --> 00:02:35,800
We only know after we've updated, the lighting system.

46
00:02:36,700 --> 00:02:42,900
So that's really the reason why we have to have this two-stage process

47
00:02:43,600 --> 00:02:48,900
is because we need to set up these light bounds prior to doing any of

48
00:02:48,900 --> 00:02:51,000
the actual pushes that push the entities.

49
00:02:51,500 --> 00:02:53,100
In the system on, right?

50
00:02:55,100 --> 00:02:56,300
So that's the problem we've got.

51
00:03:00,500 --> 00:03:03,600
And it's not a problem in the sense of like there's nothing wrong with

52
00:03:03,600 --> 00:03:04,800
the code as it is right now.

53
00:03:04,800 --> 00:03:07,700
So it's not something we have to fix but it's just something that

54
00:03:07,700 --> 00:03:08,700
would make the code simpler.

55
00:03:08,700 --> 00:03:12,400
If we could get rid of it, right, if I could somehow make it so that

56
00:03:12,400 --> 00:03:15,600
we weren't having to do these two steps, we could just call One Step.

57
00:03:15,900 --> 00:03:17,500
Well, that's just better, right?

58
00:03:18,500 --> 00:03:21,600
And so I'd like to figure out some way to do that, and unfortunately,

59
00:03:21,600 --> 00:03:25,200
at the moment I don't really know how I would necessarily do that.

60
00:03:27,800 --> 00:03:28,700
So the problem.

61
00:03:28,900 --> 00:03:33,300
Yeah, that I think we're going to have is just like do I want to try

62
00:03:33,300 --> 00:03:38,000
to do anything particularly specific like specific with that or do I

63
00:03:38,000 --> 00:03:42,700
want to try to like you know leave it as it is and just like live with

64
00:03:42,700 --> 00:03:45,700
that that aspect of it and I don't really know which one of those two

65
00:03:45,700 --> 00:03:46,300
I want to do.

66
00:03:46,800 --> 00:03:53,200
I'm not entirely sure so we'll take a brief look at it now to me.

67
00:03:54,000 --> 00:03:54,800
And we'll go from there.

68
00:03:57,000 --> 00:04:02,600
So when I do set light bounds, what this is actually doing,

69
00:04:04,000 --> 00:04:04,400
oops.

70
00:04:07,400 --> 00:04:08,800
Got my keyboard is all.

71
00:04:10,100 --> 00:04:10,800
Aligned weird.

72
00:04:10,800 --> 00:04:11,500
Here we go.

73
00:04:12,600 --> 00:04:17,399
So when I get set light bounds, what you can see, is that this is

74
00:04:17,399 --> 00:04:18,000
setting.

75
00:04:19,000 --> 00:04:23,900
This thing called the render setup and the render setup basically

76
00:04:24,100 --> 00:04:26,700
says, all the stuff that has to happen.

77
00:04:30,100 --> 00:04:31,400
For a particular.

78
00:04:33,000 --> 00:04:36,900
It basically tells you what has to happen for all of the things that

79
00:04:36,900 --> 00:04:38,300
get pushed on after it.

80
00:04:38,400 --> 00:04:40,600
So if we set the lighting region,

81
00:04:42,000 --> 00:04:47,700
And then we go ahead and for each entity we push on it's sort of

82
00:04:47,700 --> 00:04:48,900
underneath that lighting region.

83
00:04:48,900 --> 00:04:51,200
It's had that lighting region set.

84
00:04:52,300 --> 00:04:53,800
Then it will be lit properly.

85
00:04:58,000 --> 00:05:03,100
If we don't do this, then none of those entities know how to look up

86
00:05:03,100 --> 00:05:03,300
there.

87
00:05:03,300 --> 00:05:04,900
Lighting in the light voxel.

88
00:05:07,100 --> 00:05:10,200
Now, there's other ways we could potentially do this because there's

89
00:05:10,300 --> 00:05:14,600
only one light Bound in use ever.

90
00:05:17,100 --> 00:05:20,100
We don't really compute multiple lighting and we don't ever expect to

91
00:05:20,100 --> 00:05:20,900
do that.

92
00:05:21,500 --> 00:05:26,400
So we could do something slightly different which is to say, we could

93
00:05:26,400 --> 00:05:29,600
just make the lighting bounds be something Global.

94
00:05:30,600 --> 00:05:36,400
And if we did that, that would probably solve this problem and it

95
00:05:36,400 --> 00:05:39,500
might be something that we actually do want to do, you know?

96
00:05:39,500 --> 00:05:45,700
I'm not sure which way we want to do it, but it's entirely possible.

97
00:05:45,900 --> 00:05:48,700
That's like the sensible thing, right?

98
00:05:50,600 --> 00:05:54,100
And so if, for example, we take a look Jimmy

99
00:05:57,300 --> 00:05:59,600
if we take a look at handmade,

100
00:06:01,400 --> 00:06:02,700
And handmade platform.

101
00:06:03,600 --> 00:06:06,100
There's well, I guess I could just jump right to payment or commands.

102
00:06:06,500 --> 00:06:09,900
If we take a look at game render commands, what you can see here is,

103
00:06:10,700 --> 00:06:14,500
you know, things like the light Atlas, and the lighting box, like,

104
00:06:14,500 --> 00:06:19,000
occluders in that stuff are just out here in the game render commands.

105
00:06:19,300 --> 00:06:23,500
We could choose to just put the light voxel in there, right?

106
00:06:24,300 --> 00:06:27,100
And if we did that, then you could just set it at the end.

107
00:06:27,800 --> 00:06:28,700
And you'd be done.

108
00:06:30,600 --> 00:06:34,500
The problem with this is it does make the renderer a little less

109
00:06:34,500 --> 00:06:35,800
generic meaning.

110
00:06:36,500 --> 00:06:38,700
You now couldn't have multiple lighting regions.

111
00:06:40,500 --> 00:06:42,600
but it seems to me like that's a pretty

112
00:06:44,000 --> 00:06:44,600
Okay.

113
00:06:44,600 --> 00:06:48,100
Change like we don't expect to ever have to do that.

114
00:06:49,900 --> 00:06:53,200
So it seems like we could just make it so that this is something that

115
00:06:53,200 --> 00:06:54,900
gets set once and never changes.

116
00:06:55,600 --> 00:06:59,100
So for example, if we took a look at the opengl right side of things

117
00:06:59,200 --> 00:07:00,800
where this actually happens,

118
00:07:03,400 --> 00:07:10,400
it's actually in here and I don't actually remember what that's called

119
00:07:10,400 --> 00:07:12,600
but I guess I'll just look at the code because I know where the code

120
00:07:12,600 --> 00:07:15,800
is, but the voxel dim part of things, right?

121
00:07:16,700 --> 00:07:20,500
Then when you look in here at how this actually gets set up, we should

122
00:07:20,500 --> 00:07:24,700
be able to see, just pretty clearly how that gets dealt with.

123
00:07:25,100 --> 00:07:29,300
We would pass the setup to wherever the actual dispatch is.

124
00:07:29,300 --> 00:07:31,300
So right?

125
00:07:33,300 --> 00:07:34,100
It's here.

126
00:07:38,700 --> 00:07:42,300
So what you can see here, you know, ignoring the clipping rectifier to

127
00:07:42,300 --> 00:07:46,200
these this here, what you can see is that when we actually go to use

128
00:07:46,500 --> 00:07:53,300
the program, and we're going to go use specifically the the Z bias

129
00:07:53,300 --> 00:07:54,400
program, which is this one.

130
00:07:55,200 --> 00:07:58,900
You can see in here that it gets the Vox Min corner and the M5 total

131
00:07:58,900 --> 00:08:04,500
dim, it gets those out of the setup and it could just as easily get

132
00:08:04,500 --> 00:08:06,100
those out of something else.

133
00:08:07,100 --> 00:08:08,300
There's nothing stopping.

134
00:08:08,500 --> 00:08:12,100
yes, from just pulling those out of the game render commands, instead,

135
00:08:14,600 --> 00:08:15,500
so,

136
00:08:17,600 --> 00:08:18,000
You know?

137
00:08:18,000 --> 00:08:19,500
I mean, it just, it seems

138
00:08:21,600 --> 00:08:23,400
It seems compelling, right?

139
00:08:23,400 --> 00:08:24,400
It seems like a good idea.

140
00:08:29,700 --> 00:08:31,000
So I may go ahead and try that.

141
00:08:31,800 --> 00:08:35,500
What I'm going to do here is I'm going to go over to the game, rental

142
00:08:35,500 --> 00:08:35,700
commands.

143
00:08:35,700 --> 00:08:40,799
I'm going to move those over and just see if I like that, right?

144
00:08:42,200 --> 00:08:47,200
So, let's go to the render setup and let's just pull these two things

145
00:08:47,200 --> 00:08:47,800
out.

146
00:08:48,000 --> 00:08:52,900
So, you know, rather than having them be part of this particular piece

147
00:08:52,900 --> 00:08:56,500
of information for the lighting bands, instead, I'm just going to put

148
00:08:56,500 --> 00:08:59,700
them, you know, here in the game render commands.

149
00:09:00,000 --> 00:09:00,600
and,

150
00:09:06,200 --> 00:09:09,700
I mean, I guess one other thing that I'm not sure about is

151
00:09:12,400 --> 00:09:17,100
You know, does this have a problem, will this cause a problem in terms

152
00:09:17,100 --> 00:09:18,600
of like transforms?

153
00:09:19,100 --> 00:09:22,200
I don't think so because we only ever set it once.

154
00:09:22,200 --> 00:09:28,500
So we're never updating it based on any other transform information.

155
00:09:28,900 --> 00:09:32,200
So I think it's just fine, right?

156
00:09:32,200 --> 00:09:36,100
Like the lighting bounds should just be okay.

157
00:09:37,200 --> 00:09:39,600
Again, I'm a little nervous about this but I just don't see any other

158
00:09:39,600 --> 00:09:41,800
way to flatten the lighting into just like,

159
00:09:43,200 --> 00:09:44,400
Straight update call.

160
00:09:46,300 --> 00:09:50,900
So if I move this out here so we have like a lighting voxel Min corner

161
00:09:50,900 --> 00:09:54,900
and a lighting voxel inverse total Dimension.

162
00:09:54,900 --> 00:10:00,000
Those two parameters that are used now and you have to get them from

163
00:10:00,000 --> 00:10:01,100
the game render commands.

164
00:10:01,100 --> 00:10:05,100
I should be able to change the way that this setup stuff.

165
00:10:05,100 --> 00:10:08,200
Works to make that be the case, right?

166
00:10:08,200 --> 00:10:13,000
And so now when you call set light bounds, it wouldn't actually push a

167
00:10:13,000 --> 00:10:14,500
new set up onto the stack.

168
00:10:14,500 --> 00:10:16,100
Instead, what it would do is just

169
00:10:16,300 --> 00:10:17,700
Get in the game render commands.

170
00:10:18,200 --> 00:10:22,700
And I believe the, you know, the render group itself, it just has that

171
00:10:22,700 --> 00:10:23,100
pointer.

172
00:10:23,100 --> 00:10:23,900
I mean, here it is.

173
00:10:24,500 --> 00:10:26,900
So I can even leave this call.

174
00:10:31,500 --> 00:10:37,600
You know, I think I'm not going to just because I don't really want it

175
00:10:37,600 --> 00:10:40,000
to look like it's working in a push fashion.

176
00:10:40,300 --> 00:10:45,300
So, I think what I might do is just say, look, you call it to set it

177
00:10:45,300 --> 00:10:47,200
on the actual game render commands.

178
00:10:48,400 --> 00:10:51,900
So you kind of have to be doing that, right?

179
00:10:57,000 --> 00:10:59,700
I'm just not sure I'm going to leave it this way for now, and then if

180
00:10:59,700 --> 00:11:01,400
I don't like it, I'll change it back.

181
00:11:01,600 --> 00:11:04,200
So we'll go ahead and get that out of the render group and then we'll

182
00:11:04,200 --> 00:11:06,400
set these two things in there.

183
00:11:07,000 --> 00:11:08,400
And then all we have to do is change it.

184
00:11:08,400 --> 00:11:15,200
So that that information is now coming from their game render commands

185
00:11:15,200 --> 00:11:16,300
instead of the setup.

186
00:11:16,300 --> 00:11:19,800
So, in here, we just need to know what those would be, what those

187
00:11:19,800 --> 00:11:20,400
would do.

188
00:11:21,100 --> 00:11:24,300
And so we need in here, the game render.

189
00:11:24,700 --> 00:11:26,600
Tends to actually be passed.

190
00:11:27,900 --> 00:11:31,000
And then in here, we would get those like this.

191
00:11:33,100 --> 00:11:34,800
And that's the entirety of the change.

192
00:11:34,800 --> 00:11:37,200
So it's a pretty easy thing.

193
00:11:37,200 --> 00:11:39,500
Like, there's nothing magical to it, right?

194
00:11:40,900 --> 00:11:43,600
And I'm assuming that we just have this on hand, because that's the

195
00:11:43,600 --> 00:11:45,200
whole thing we're drawing, right?

196
00:11:45,200 --> 00:11:48,200
So it's just that it's already there.

197
00:11:48,300 --> 00:11:52,100
It's just something that we weren't using before, for that particular

198
00:11:52,100 --> 00:11:52,700
pass.

199
00:11:53,800 --> 00:11:59,300
So, what I might do now is try to flip back to the extent that I can

200
00:11:59,400 --> 00:11:59,800
and

201
00:12:00,000 --> 00:12:01,600
The old system real quick.

202
00:12:01,600 --> 00:12:08,300
So in here, where we've got the lighting, use old KD.

203
00:12:09,400 --> 00:12:15,300
I'm going to leave that on lighting, use for raised, I don't actually

204
00:12:15,300 --> 00:12:16,100
know.

205
00:12:18,200 --> 00:12:19,300
We actually using that.

206
00:12:19,300 --> 00:12:20,600
Is that what's actually happening?

207
00:12:22,900 --> 00:12:28,900
Yes, so I should be able to still compile this and make this work the

208
00:12:28,900 --> 00:12:34,100
old way and I figured this would be the best way to get to make sure

209
00:12:34,100 --> 00:12:38,000
that this works properly before we go any further.

210
00:12:38,000 --> 00:12:38,500
Right.

211
00:12:39,100 --> 00:12:42,900
Because we're making some changes here and we have to figure out like

212
00:12:43,300 --> 00:12:46,500
you know, we have to debug the changes that I've made so far.

213
00:12:49,800 --> 00:12:53,300
It looks like compute walk table is still running, which I suppose is

214
00:12:53,300 --> 00:12:53,700
fine.

215
00:12:54,000 --> 00:12:55,500
Although, it looks like I've got a bug in it.

216
00:12:55,800 --> 00:12:57,100
Let me take a look at there.

217
00:13:06,500 --> 00:13:10,200
Yeah, so we're not actually updating cost, so we want to do a plus

218
00:13:10,200 --> 00:13:11,100
plus cost here.

219
00:13:14,800 --> 00:13:15,300
Here we go.

220
00:13:29,300 --> 00:13:31,800
looks like,

221
00:13:33,300 --> 00:13:34,000
That's weird.

222
00:13:41,600 --> 00:13:43,600
So, looks like we do.

223
00:13:45,200 --> 00:13:47,400
Didn't actually.

224
00:13:52,700 --> 00:13:56,000
It looks like we didn't actually if that that one out either.

225
00:13:56,300 --> 00:14:04,300
So we probably want to if deaf this out real quick because, you know,

226
00:14:04,300 --> 00:14:07,800
if we're not using the for Ray's version, we don't need this stuff.

227
00:14:09,200 --> 00:14:09,800
Right.

228
00:14:10,100 --> 00:14:13,300
So I'm just going to go ahead and knock that out as well.

229
00:14:13,700 --> 00:14:14,600
So, this is

230
00:14:16,400 --> 00:14:18,800
Lighting use for raised.

231
00:14:19,300 --> 00:14:25,000
So if we aren't doing that, then this path is.

232
00:14:25,000 --> 00:14:30,100
And again and again, this is just so I can do some like debugging with

233
00:14:30,100 --> 00:14:34,000
the old version first to make sure I didn't break anything there and

234
00:14:34,000 --> 00:14:36,300
then I can look at the new version separately, right?

235
00:14:41,300 --> 00:14:41,800
Okay.

236
00:14:42,100 --> 00:14:44,300
Yeah because you can see there's some busted stuff, right?

237
00:14:45,900 --> 00:14:46,500
Yeah, I'm saying.

238
00:14:47,300 --> 00:14:52,100
So we want to go in and and fix that first before we go any further,

239
00:14:52,100 --> 00:14:55,600
but that's but so I just wanted that to make sure that was correct

240
00:14:56,200 --> 00:14:57,000
also.

241
00:15:00,400 --> 00:15:01,800
We're building with O2.

242
00:15:01,900 --> 00:15:04,200
I mean, I would be right now, so we should probably build with O2 for

243
00:15:04,200 --> 00:15:06,000
the moment as I'm doing this changes.

244
00:15:12,000 --> 00:15:13,800
All right, so yeah.

245
00:15:13,800 --> 00:15:17,500
So what we want to do here is is just we just need to fix the old

246
00:15:17,500 --> 00:15:21,800
lighting and make sure that that's working, okay, with the new changes

247
00:15:22,100 --> 00:15:24,900
that are streamlined and then try to pull everything out, just so it's

248
00:15:24,900 --> 00:15:26,600
roughly correct, right?

249
00:15:28,300 --> 00:15:31,700
So let's go ahead and go through that process.

250
00:15:31,700 --> 00:15:35,400
So now that we don't have to do that set Lighting in any particular

251
00:15:35,400 --> 00:15:38,700
way, I catch should be able to now make it so that this is a one call

252
00:15:38,700 --> 00:15:40,300
system which is what I wanted.

253
00:15:41,800 --> 00:15:45,700
In the first place so update lighting can now just be the only call

254
00:15:45,700 --> 00:15:47,000
that we actually have.

255
00:15:48,000 --> 00:15:53,000
And so up here where we do set up lighting region I can actually sort

256
00:15:53,000 --> 00:15:56,700
of just weld these two together into single, you know, a single

257
00:15:56,700 --> 00:15:57,900
operation basically.

258
00:15:59,800 --> 00:16:02,600
And so, when I'm doing that, I just need to make sure that we have

259
00:16:02,600 --> 00:16:05,600
sort of all of the information that we might actually need.

260
00:16:05,800 --> 00:16:08,600
And you can see here like of the stuff that gets passed.

261
00:16:09,100 --> 00:16:15,600
Basically, we just need this additional set of data to me.

262
00:16:17,200 --> 00:16:21,500
Pass to the system and then we just have sort of one giant monolithic

263
00:16:21,500 --> 00:16:23,400
call that updates everything at once.

264
00:16:23,400 --> 00:16:26,100
And the reason that I want that is because

265
00:16:27,300 --> 00:16:31,300
I would like ideally to have one entry point to the lighting system

266
00:16:31,700 --> 00:16:32,600
you call it.

267
00:16:32,600 --> 00:16:35,300
It does all of the lighting work and then it returns to you.

268
00:16:35,500 --> 00:16:40,900
So that it's very clear, the lifetime of everything and what needs to

269
00:16:40,900 --> 00:16:41,400
happen.

270
00:16:41,800 --> 00:16:45,500
I didn't really like the multi call nature of it and I just didn't

271
00:16:45,500 --> 00:16:49,600
think that was particularly useful, right?

272
00:16:50,300 --> 00:16:54,100
So, I think what I want to do here is just say, get rid of that, we're

273
00:16:54,100 --> 00:16:56,800
just going to have one update lighting call.

274
00:16:57,800 --> 00:17:01,200
The update lighting call is the only thing you actually call.

275
00:17:03,500 --> 00:17:07,400
And then there's a push lighting, render values call.

276
00:17:07,700 --> 00:17:14,500
And you can tell it whether or not you want include debug, right?

277
00:17:16,400 --> 00:17:20,000
And you know maybe I don't know, maybe we don't even have that, maybe

278
00:17:20,000 --> 00:17:24,900
the put maybe that particular call actually just it.

279
00:17:25,099 --> 00:17:28,200
It's going to do debugger not based on how I have configured it.

280
00:17:28,200 --> 00:17:32,700
You'd the caller doesn't really get a say in that, right?

281
00:17:35,100 --> 00:17:36,500
So that's what this would look like.

282
00:17:37,100 --> 00:17:40,400
And presumably if the lighting is not enabled.

283
00:17:42,200 --> 00:17:43,700
Then we just don't do this.

284
00:17:44,500 --> 00:17:50,300
Now at that point it also kind of seems like, I don't know what

285
00:17:50,300 --> 00:17:55,100
lighting enabled really means at this point, like I'm not sure what

286
00:17:55,100 --> 00:17:58,600
we're actually trying to say with lighting enabled because it's kind

287
00:17:58,600 --> 00:17:59,600
of just seems

288
00:18:00,800 --> 00:18:04,400
Sort of like an unnecessary flag like if you didn't want lighting just

289
00:18:04,400 --> 00:18:06,700
don't call this at that point, right?

290
00:18:09,200 --> 00:18:12,500
So I suspect we probably can just get rid of that.

291
00:18:16,000 --> 00:18:21,000
So I think we can remove one of the inputs, right?

292
00:18:22,700 --> 00:18:26,400
Because you just, you just wouldn't call it at that point.

293
00:18:26,800 --> 00:18:28,200
And that's all there is to it.

294
00:18:30,200 --> 00:18:31,900
So I think that's all we really need there.

295
00:18:32,400 --> 00:18:35,400
And so we'll just assume that if you know, if your

296
00:18:38,000 --> 00:18:40,100
Calling that you want lighting.

297
00:18:40,200 --> 00:18:42,600
If you didn't want lighting you just wouldn't call it.

298
00:18:42,600 --> 00:18:46,600
It doesn't really need to do any kind of tracking of that on its own.

299
00:18:48,600 --> 00:18:52,200
Now, my understanding on the fundamental unit side of things is, I

300
00:18:52,200 --> 00:18:55,900
kind of thought that the world's knew what the fundamental unit was,

301
00:18:56,000 --> 00:19:02,100
but I guess maybe it doesn't, which is a little bit weird because you

302
00:19:02,100 --> 00:19:05,400
would think that the world's would have the information about what the

303
00:19:05,400 --> 00:19:06,700
fundamental unit was.

304
00:19:07,600 --> 00:19:11,200
And so I'm a little weirded out by the fact that it doesn't seem to

305
00:19:11,200 --> 00:19:12,900
know the answer to that question.

306
00:19:13,800 --> 00:19:17,200
And I would like to know why we didn't do it that way.

307
00:19:18,000 --> 00:19:21,200
So I'm just going to quickly take a look at the fundamental unit here

308
00:19:22,000 --> 00:19:23,700
and I'm going to see what's going on.

309
00:19:26,100 --> 00:19:29,600
You can see here that in World mode, we set the fundamental unit, and

310
00:19:29,600 --> 00:19:32,500
then we create the world's, you know, we just pass it, the chunk

311
00:19:32,500 --> 00:19:33,300
demand M.

312
00:19:34,200 --> 00:19:36,600
I guess the idea is that the world doesn't care what the fundamental

313
00:19:36,600 --> 00:19:39,200
unit is and that's why we don't know, but

314
00:19:40,600 --> 00:19:42,400
I don't know, it seems like the kind of thing the world should

315
00:19:42,400 --> 00:19:45,900
probably know, eventually, I won't change that now because it's not

316
00:19:45,900 --> 00:19:46,300
really the area.

317
00:19:46,300 --> 00:19:47,000
The code were working on.

318
00:19:47,000 --> 00:19:50,900
I don't want to make decisions in that part of the code right now, so

319
00:19:50,900 --> 00:19:52,100
I guess we'll just like leave it.

320
00:19:52,100 --> 00:19:54,300
But you know, you see why I'm a little bit?

321
00:19:54,300 --> 00:19:55,600
Like I do that really necessary.

322
00:19:57,900 --> 00:20:01,200
Okay, so now we have an update, letting call the update, letting call

323
00:20:01,200 --> 00:20:02,600
should do literally everything.

324
00:20:02,700 --> 00:20:05,500
And what I'm going to do is I'm just going to kind of jump back over

325
00:20:05,500 --> 00:20:07,800
to the code.

326
00:20:07,800 --> 00:20:10,300
That's calling that this stuff.

327
00:20:10,300 --> 00:20:15,000
Obviously doesn't need to be here either and I'm going to pull that

328
00:20:15,000 --> 00:20:15,700
part out.

329
00:20:15,700 --> 00:20:20,900
Since it's always actually going to do this here.

330
00:20:20,900 --> 00:20:21,300
Yeah.

331
00:20:21,900 --> 00:20:23,600
All of this stuff can just be

332
00:20:26,800 --> 00:20:28,600
Left up like so.

333
00:20:30,100 --> 00:20:34,200
And then really, what we want to do here is just have these calls,

334
00:20:34,200 --> 00:20:35,300
make a little more sense.

335
00:20:36,500 --> 00:20:38,600
So you can see this stuff here.

336
00:20:38,600 --> 00:20:41,200
Now, in theory, shouldn't actually have to occur.

337
00:20:41,200 --> 00:20:45,300
Here, we should be able to go down to just where we actually finish

338
00:20:45,300 --> 00:20:46,900
the lighting up, which is here.

339
00:20:48,200 --> 00:20:53,200
And in this particular case, now, what we should be able to do is

340
00:20:54,100 --> 00:20:56,500
replace the debug part with this and

341
00:20:56,600 --> 00:20:57,400
and update lighting.

342
00:20:57,400 --> 00:20:59,900
Now, we'll just take additional precautions.

343
00:21:00,000 --> 00:21:02,800
Going to put it, then we won't have to call this set lighting region

344
00:21:02,800 --> 00:21:03,300
anymore.

345
00:21:04,800 --> 00:21:09,600
So when we call update lighting, we pass the solution, the fundamental

346
00:21:09,600 --> 00:21:10,900
unit, which is here.

347
00:21:13,600 --> 00:21:15,900
The spec Atlas and the diffuse.

348
00:21:15,900 --> 00:21:18,400
Atlas, it looks like these are in the opposite order here for some

349
00:21:18,400 --> 00:21:23,700
reason which would be very bad.

350
00:21:25,700 --> 00:21:30,700
I wonder if that's part of the reason why stuff was looking weird, we

351
00:21:30,700 --> 00:21:34,300
have of the world needs to get past which is this

352
00:21:37,700 --> 00:21:39,400
We have the same origin, pee.

353
00:21:41,200 --> 00:21:44,100
Which is this and the lighting Center, which is this.

354
00:21:47,800 --> 00:21:49,400
And then we've got the occluders.

355
00:21:52,600 --> 00:21:53,900
I think that's everything.

356
00:21:57,800 --> 00:22:01,100
And the compiler will certainly tell us if it's not.

357
00:22:07,200 --> 00:22:07,800
All right.

358
00:22:08,800 --> 00:22:14,500
So now we just need to make sure that the push lighting render values

359
00:22:14,500 --> 00:22:15,400
call.

360
00:22:15,700 --> 00:22:18,500
I guess actually does.

361
00:22:21,900 --> 00:22:22,600
What we needed to.

362
00:22:23,100 --> 00:22:26,600
This is the one thing that it actually needs to do enable lighting.

363
00:22:28,300 --> 00:22:29,300
What does that do?

364
00:22:33,500 --> 00:22:35,600
So render group light bounds.

365
00:22:35,700 --> 00:22:40,000
What are what is the light bounds for do we know?

366
00:22:46,400 --> 00:22:46,900
I don't know.

367
00:22:49,300 --> 00:22:52,100
Route lightbox.

368
00:22:58,900 --> 00:23:00,800
I have no idea what this does.

369
00:23:02,500 --> 00:23:03,600
Why do we have this?

370
00:23:05,100 --> 00:23:05,800
Does anyone know?

371
00:23:07,400 --> 00:23:08,600
Does anyone know what this does?

372
00:23:12,500 --> 00:23:18,800
That is literally, the only thing it does is set that value for no

373
00:23:18,800 --> 00:23:19,400
reason.

374
00:23:20,100 --> 00:23:20,900
So,

375
00:23:23,400 --> 00:23:26,300
Dad, I do not know what the point is of that.

376
00:23:26,400 --> 00:23:29,100
So what we really want here is just like

377
00:23:32,600 --> 00:23:34,100
Lighting enabled, I guess.

378
00:23:37,300 --> 00:23:39,200
I think that's what this should have looked like,

379
00:23:40,500 --> 00:23:41,000
Yeah.

380
00:23:41,900 --> 00:23:46,900
So that's probably all we actually want and then enable Lighting in

381
00:23:47,500 --> 00:23:51,100
the world mode stuff just goes up here at where we turn it on.

382
00:23:53,600 --> 00:23:58,300
So some are up here before we actually do anything.

383
00:23:59,100 --> 00:23:59,900
We probably

384
00:24:00,000 --> 00:24:01,100
To turn on the lighting.

385
00:24:01,100 --> 00:24:05,200
So like, you know, maybe here,

386
00:24:09,000 --> 00:24:13,000
I don't actually know to what extent this stuff wants to be here.

387
00:24:13,300 --> 00:24:17,500
Particularly again, this Loop probably should get sort of streamlined

388
00:24:17,500 --> 00:24:22,900
at some point, but sort of a separate issue, but we would just do an

389
00:24:22,900 --> 00:24:27,400
enable lighting here and then probably disable lighting here, right?

390
00:24:27,500 --> 00:24:31,500
So after all this stuff happens, we do false.

391
00:24:31,900 --> 00:24:34,100
Now eventually, we should actually use that.

392
00:24:34,100 --> 00:24:36,700
We don't even use this right now but, you know, it's kind of a

393
00:24:36,700 --> 00:24:37,400
separate issue.

394
00:24:38,900 --> 00:24:41,900
When we sort of do but we don't do the right thing with it.

395
00:24:41,900 --> 00:24:42,900
I guess is what I would say.

396
00:24:44,300 --> 00:24:48,200
So now we're using we're doing the streamlined version and now we just

397
00:24:48,200 --> 00:24:53,300
have to actually go through and make this not be buggy, right?

398
00:24:54,500 --> 00:24:57,600
So I'll so it's weirdly fast.

399
00:24:59,200 --> 00:25:05,300
For some reason and I don't know why.

400
00:25:06,800 --> 00:25:10,400
I'm guessing that maybe the bugginess of it, made it run much quicker

401
00:25:10,400 --> 00:25:15,100
or something it's like way faster than it was for

402
00:25:19,000 --> 00:25:20,300
So that's a bit weird.

403
00:25:21,300 --> 00:25:23,500
But anyway, so this is much better.

404
00:25:23,500 --> 00:25:25,400
This is kind of more what I would like.

405
00:25:26,000 --> 00:25:29,500
And so I'm going to go ahead and copy these directly in here because

406
00:25:29,500 --> 00:25:31,300
these don't need to get pulled out anymore.

407
00:25:34,200 --> 00:25:38,500
so, I'm going to go ahead and just grab those this way, and

408
00:25:42,300 --> 00:25:45,600
Now, that we have a single way just to call the lighting system and

409
00:25:45,600 --> 00:25:47,200
say, do the entire update.

410
00:25:47,800 --> 00:25:52,500
Now, I can focus on that side of the code more directly and make sure

411
00:25:52,500 --> 00:25:53,300
it works, right?

412
00:25:55,100 --> 00:26:00,000
So now when we do update lighting, what you can see here is, we've got

413
00:26:00,000 --> 00:26:03,700
initialization stuff that we want to do and that stuff can all live in

414
00:26:03,700 --> 00:26:04,200
here.

415
00:26:07,400 --> 00:26:13,300
We then have sort of like update stuff that involves figuring out, how

416
00:26:13,300 --> 00:26:20,600
the, how the voxels shift over time and that's this code here, right?

417
00:26:21,300 --> 00:26:26,500
And then we've got sort of our, in fact, this build a few slight Maps.

418
00:26:26,500 --> 00:26:30,000
Now, we actually know where we would cash that we would cash it right

419
00:26:30,000 --> 00:26:31,400
here, right?

420
00:26:35,300 --> 00:26:36,800
So that actually gets better, too.

421
00:26:37,700 --> 00:26:40,900
We then have like, the internal lighting core stuff, which runs here

422
00:26:41,200 --> 00:26:45,400
and, you know, other stuff for we do the the boxes and the occluders

423
00:26:45,400 --> 00:26:45,900
and stuff.

424
00:26:46,600 --> 00:26:53,800
So, I think probably what we would want is to maybe like I think we

425
00:26:53,800 --> 00:26:56,500
maybe want to start to streamline this out a little bit too.

426
00:26:57,900 --> 00:26:59,800
This is probably not working.

427
00:27:00,000 --> 00:27:01,800
In the most efficient way possible.

428
00:27:02,400 --> 00:27:07,300
So if I take a look at internal lighting core, now I don't know that

429
00:27:07,300 --> 00:27:11,700
we actually want this to be separate, this could just be its own

430
00:27:11,700 --> 00:27:12,300
thing.

431
00:27:13,000 --> 00:27:14,400
That happens out of line.

432
00:27:14,400 --> 00:27:18,600
Kind of I want to say

433
00:27:33,800 --> 00:27:38,400
I want to say that this can just be welded in now, right?

434
00:27:50,700 --> 00:27:52,300
So, you know what you would do here?

435
00:27:52,300 --> 00:27:53,400
Is you just say

436
00:27:56,000 --> 00:27:56,800
Well yeah, don't know.

437
00:27:57,400 --> 00:27:59,300
So the question is internal lighting.

438
00:27:59,300 --> 00:28:02,600
Core is just something that we may or may not want to update in some

439
00:28:02,600 --> 00:28:05,700
way based on how we are.

440
00:28:08,100 --> 00:28:12,800
How we're doing the external testing so I may leave that for now.

441
00:28:13,000 --> 00:28:16,100
And I think what I'll do is I'll just document this routine as we go

442
00:28:16,100 --> 00:28:20,000
through it, and we'll kind of go from there.

443
00:28:21,200 --> 00:28:25,800
So, what I would say is, you know, this first part here,

444
00:28:28,600 --> 00:28:36,300
Is see if any settings have changed or if we've never been run before

445
00:28:38,100 --> 00:28:41,200
and initialize all our tables.

446
00:28:42,200 --> 00:28:46,600
So this is basically, you know, just something that initializes the

447
00:28:46,900 --> 00:28:51,700
lookup tables, we actually need and instead of doing these at compile

448
00:28:51,700 --> 00:28:55,200
time by making like a meta program, that generates them which we do

449
00:28:55,200 --> 00:28:58,200
for the sampling spheres in most

450
00:28:58,400 --> 00:29:01,300
says we just generate them on the Fly and the reason we do that is

451
00:29:01,300 --> 00:29:05,500
because that way we can change these values at runtime if we want to

452
00:29:05,500 --> 00:29:06,800
and it will re compute them

453
00:29:15,700 --> 00:29:18,500
so I think that's fine and

454
00:29:24,400 --> 00:29:25,800
sorry, I'm still feeling pretty sick.

455
00:29:27,000 --> 00:29:30,300
It's been like four or five weeks of being somewhat ill.

456
00:29:31,200 --> 00:29:34,100
I'm not really sure what exactly it is.

457
00:29:36,300 --> 00:29:43,100
Anyway, we compute walk table here and we do, you know, the basic

458
00:29:43,100 --> 00:29:46,500
stuff we need for doing our grid, March lookups at the moment, that's

459
00:29:46,500 --> 00:29:53,400
not in play, the diffuse light map build we use in all the cases so

460
00:29:53,400 --> 00:29:54,600
that one is the same.

461
00:29:58,700 --> 00:29:59,500
But otherwise, I think.

462
00:30:00,000 --> 00:30:01,100
Pretty straightforward.

463
00:30:02,900 --> 00:30:07,100
Yeah, I would say that probably build a few slight Maps.

464
00:30:07,200 --> 00:30:12,800
I would put it to do on this and say this should probably dynamically

465
00:30:12,800 --> 00:30:21,500
allocate the map just like compute walk table and so we can fix that

466
00:30:21,500 --> 00:30:21,700
one.

467
00:30:21,700 --> 00:30:25,100
But at the moment, I don't want to touch anything until we return

468
00:30:25,100 --> 00:30:29,800
delighting in the old system to working properly because I don't

469
00:30:29,800 --> 00:30:32,500
actually want to introduce any

470
00:30:32,700 --> 00:30:37,200
Or possible failure points as we go.

471
00:30:39,500 --> 00:30:43,300
So coming here through here, you can see us setting up the sampling

472
00:30:43,300 --> 00:30:46,600
spheres like so and setting up the fundamental unit.

473
00:30:49,200 --> 00:30:51,300
You know, it occurs to me that I'm not.

474
00:30:52,600 --> 00:30:57,100
100% sure if the sampling spheres are still the same.

475
00:30:57,200 --> 00:31:00,400
I wonder if there's problems with that, but that's sort of a separate

476
00:31:00,400 --> 00:31:00,500
thing.

477
00:31:00,500 --> 00:31:03,700
We can look at all of this stuff.

478
00:31:03,700 --> 00:31:06,900
I think is probably not particularly relevant, like Vox seldom

479
00:31:06,900 --> 00:31:08,200
obviously is computed the same way.

480
00:31:08,200 --> 00:31:12,100
It used to be, it's just one Fender fundamental unit per side, the

481
00:31:12,100 --> 00:31:17,100
spatial cell count here is not used in the old system so it shouldn't

482
00:31:17,100 --> 00:31:17,500
matter.

483
00:31:17,500 --> 00:31:19,900
Should only be this Atlas grid here that matters.

484
00:31:19,900 --> 00:31:22,200
So it's the these two values only

485
00:31:22,400 --> 00:31:24,600
I'll use that should matter, and we're getting that one right off the

486
00:31:24,600 --> 00:31:25,200
spec Atlas.

487
00:31:25,200 --> 00:31:26,200
So it should be okay.

488
00:31:27,700 --> 00:31:33,500
When we come through here, we look up those values and we use them for

489
00:31:33,500 --> 00:31:36,000
doing the same computations we were doing before.

490
00:31:36,300 --> 00:31:40,800
So, here, we basically just say, look, where would we actually be?

491
00:31:43,300 --> 00:31:47,100
In the voxel, you know, how far do we need to move the voxel to

492
00:31:47,100 --> 00:31:49,800
account for where we are, is what this is doing?

493
00:31:50,700 --> 00:31:54,000
And I assume this should just work fine.

494
00:31:54,000 --> 00:31:57,800
I don't actually know why it's doing some of the things that's doing

495
00:31:58,900 --> 00:31:59,400
for example.

496
00:31:59,400 --> 00:32:03,900
If we already have the inverse voxel cell Dimension, I don't know why

497
00:32:03,900 --> 00:32:07,300
we're actually dividing by the Vox seldom there.

498
00:32:08,000 --> 00:32:09,800
It's a little weird, right?

499
00:32:09,800 --> 00:32:12,600
Like, like this is

500
00:32:12,800 --> 00:32:13,500
Is this?

501
00:32:14,900 --> 00:32:15,500
Right.

502
00:32:19,100 --> 00:32:23,900
So not sure why that was not just using the value to already had

503
00:32:23,900 --> 00:32:27,100
probably because again, we hadn't really streamlined this code ever.

504
00:32:27,300 --> 00:32:28,700
So we didn't actually know

505
00:32:30,800 --> 00:32:34,600
That we were being redundant there but anyway once we figure out

506
00:32:34,600 --> 00:32:38,000
what's going on here, then we update whatever the last origin P was

507
00:32:38,000 --> 00:32:39,900
and we look to see if we need to move the thing.

508
00:32:39,900 --> 00:32:44,300
We call the block copy to move the voxels around which all seems

509
00:32:44,300 --> 00:32:45,600
pretty good, right?

510
00:32:46,200 --> 00:32:50,900
So that's the initialization, this part of the routine here.

511
00:32:52,700 --> 00:32:58,300
Is update the alignment of the voxels.

512
00:33:00,000 --> 00:33:05,400
In voxels to the view and I don't think we changed anything here

513
00:33:05,400 --> 00:33:05,700
though.

514
00:33:11,600 --> 00:33:13,500
So, I'm not totally sure.

515
00:33:17,300 --> 00:33:19,800
I'm not totally sure why we would have been seeing weird flickering

516
00:33:19,800 --> 00:33:21,800
artifacts there because we did have some.

517
00:33:21,800 --> 00:33:22,100
I don't know.

518
00:33:23,100 --> 00:33:26,700
It may not come across very well on the recording so let me kind of

519
00:33:26,700 --> 00:33:27,700
show you what I mean.

520
00:33:28,200 --> 00:33:33,400
So when we were running so you can see that there's two things that

521
00:33:33,400 --> 00:33:33,800
are happening.

522
00:33:33,800 --> 00:33:35,800
One, is that the lighting computations wrong now?

523
00:33:35,800 --> 00:33:37,100
And it used to be correct.

524
00:33:38,500 --> 00:33:42,100
And the other one is that as you move, do you see that flash?

525
00:33:43,500 --> 00:33:48,300
So it's like the camera is one off there and so there's a couple of

526
00:33:48,300 --> 00:33:51,700
places that could be coming from, it could actually be coming from the

527
00:33:51,700 --> 00:33:52,500
world mode.

528
00:33:52,800 --> 00:33:57,000
So in the world mode, this Cameo Simulation Center, we may need to

529
00:33:57,000 --> 00:33:59,700
save that across the boundary.

530
00:34:04,300 --> 00:34:06,900
Because this update here will change it.

531
00:34:06,900 --> 00:34:10,199
So what we may need to do is say like

532
00:34:14,900 --> 00:34:16,699
Back where we snap the lighting Center.

533
00:34:20,600 --> 00:34:22,199
We probably want to fix this.

534
00:34:22,500 --> 00:34:26,600
So we probably want to say lighting Sim Center.

535
00:34:33,300 --> 00:34:33,800
And pass.

536
00:34:33,800 --> 00:34:37,500
That just to fix that, that error.

537
00:34:40,500 --> 00:34:40,800
Oops.

538
00:34:44,500 --> 00:34:45,699
Not sure.

539
00:34:45,800 --> 00:34:46,400
Yeah, there we go.

540
00:34:49,400 --> 00:34:49,699
Okay.

541
00:34:54,400 --> 00:34:57,400
So I'm guessing that will fix that problem.

542
00:34:58,600 --> 00:35:01,600
Oh whoops, no, what happened there?

543
00:35:02,400 --> 00:35:02,800
There we go.

544
00:35:12,600 --> 00:35:17,200
And so now I would expect to be smooth everywhere and it is so.

545
00:35:17,200 --> 00:35:19,000
So now we're totally good on that.

546
00:35:19,000 --> 00:35:21,100
That's where that bug came from.

547
00:35:22,000 --> 00:35:25,100
So, now, what we need to look at though is just like, why is the ray

548
00:35:25,100 --> 00:35:28,700
casting and or voxel stuff so strange, right?

549
00:35:28,700 --> 00:35:30,500
Like something bizarre is happening there.

550
00:35:31,600 --> 00:35:33,800
And there could be any number of reasons for that.

551
00:35:33,800 --> 00:35:36,600
And so I think at this point, now we want to sort of focus on their

552
00:35:36,600 --> 00:35:38,100
product code, but let me just finish doing this.

553
00:35:38,100 --> 00:35:41,300
So here's the update alignment code, right?

554
00:35:42,700 --> 00:35:47,100
And I don't know why the temporary NE thing starts here probably

555
00:35:47,100 --> 00:35:48,500
because that's where that code was.

556
00:35:48,700 --> 00:35:51,700
I think I'll just start it here so that anyone can use it anywhere

557
00:35:51,700 --> 00:35:52,600
they want to.

558
00:35:54,900 --> 00:35:57,000
Because it is the temporary Reign after all.

559
00:35:57,600 --> 00:35:59,700
And then in here, where we do

560
00:36:02,500 --> 00:36:04,300
The next stuff.

561
00:36:04,300 --> 00:36:08,500
Let's do update.

562
00:36:10,400 --> 00:36:11,500
Lighting voxels.

563
00:36:13,800 --> 00:36:15,100
I guess our update.

564
00:36:24,700 --> 00:36:26,500
Maybe what's called update voxel values?

565
00:36:27,600 --> 00:36:30,600
And I could also break this into two stages because one of them is

566
00:36:30,600 --> 00:36:31,900
sort of a little bit different here.

567
00:36:32,100 --> 00:36:33,100
So we could say

568
00:36:34,600 --> 00:36:38,900
Update box of values and record statistics.

569
00:36:39,500 --> 00:36:45,800
So, up here, we're basically saying like, you know, determine the

570
00:36:45,800 --> 00:36:46,900
blend setup.

571
00:36:48,600 --> 00:36:52,900
So we're left with something here, that then I'd like to take a look

572
00:36:52,900 --> 00:36:55,800
at, which is the boxes.

573
00:36:55,800 --> 00:36:58,700
Like, I'm not thrilled with how the boxes flow through the system.

574
00:36:58,700 --> 00:37:02,000
So so now you know what I'd like to do is maybe take a little bit of a

575
00:37:02,000 --> 00:37:02,400
look at.

576
00:37:02,400 --> 00:37:04,400
I mean I guess you know, let's not do that yet.

577
00:37:04,400 --> 00:37:07,600
Let me actually go to bug why we're getting wrong lighting results

578
00:37:07,800 --> 00:37:11,000
first and then I want to come back and take a look at the boxes.

579
00:37:11,500 --> 00:37:16,200
Essentially, what I want to do here is say I kind of like this.

580
00:37:18,400 --> 00:37:22,600
This to not be stored anymore.

581
00:37:22,800 --> 00:37:24,700
So I'd like that to kind of go away.

582
00:37:27,700 --> 00:37:29,000
And we can start to move towards a.

583
00:37:29,000 --> 00:37:33,800
It'll be real easy to do when we move to the new Ray Caster.

584
00:37:33,800 --> 00:37:37,000
So I might put it off till then but eventually that, that should also

585
00:37:37,000 --> 00:37:37,700
happen anyway.

586
00:37:38,900 --> 00:37:47,000
So, yeah, so when we do build spatial partition for lighting, I don't

587
00:37:47,000 --> 00:37:48,400
think we really messed with that.

588
00:37:48,400 --> 00:37:54,700
The split KD stuff, we didn't end up wanting to do and I'm pretty sure

589
00:37:54,700 --> 00:37:55,800
we're not going to do it.

590
00:37:55,800 --> 00:37:56,600
We can always go back.

591
00:37:56,600 --> 00:38:00,700
You know, we've got all the old source code, we can go back and re put

592
00:38:00,700 --> 00:38:01,600
it in if we want to.

593
00:38:01,600 --> 00:38:06,900
But I think what I'd rather do here is just say like look, let's now

594
00:38:06,900 --> 00:38:08,700
just use the two versions The

595
00:38:08,900 --> 00:38:12,600
Ask this old version we have and the new one, right?

596
00:38:17,000 --> 00:38:20,200
So, we'll do if lighting use for a raise and then we'll do the else

597
00:38:20,200 --> 00:38:23,400
clause and we'll do this build here, right?

598
00:38:24,600 --> 00:38:30,100
And we'll just yank split Katie entirely.

599
00:38:30,600 --> 00:38:34,600
So, split Katie goes away.

600
00:38:34,800 --> 00:38:37,000
It's not actually working anymore.

601
00:38:38,400 --> 00:38:41,100
And then we just have to focus on the

602
00:38:42,200 --> 00:38:45,900
The actual rate, Caster think and pull anything that we needed there,

603
00:38:45,900 --> 00:38:46,400
right?

604
00:38:50,200 --> 00:38:50,500
Yeah.

605
00:38:52,400 --> 00:38:58,200
Okay, so then we've got kind of multiple paths in here.

606
00:38:58,200 --> 00:38:59,700
And what I'll do is I'm just going to

607
00:39:00,200 --> 00:39:01,400
Remove some of them.

608
00:39:04,200 --> 00:39:07,900
Debug wise, we may still want to do this especially now when we're

609
00:39:07,900 --> 00:39:11,000
trying to do some debugging so I'm not going to pull that yet.

610
00:39:11,600 --> 00:39:16,800
The if lighting use old KD I'm going to actually let it just run that

611
00:39:17,100 --> 00:39:19,300
and then I'm just going to remove the else Clause.

612
00:39:19,400 --> 00:39:21,700
So this whole thing is going to go away.

613
00:39:24,300 --> 00:39:25,000
Like so.

614
00:39:33,200 --> 00:39:34,900
I think, what did I do there?

615
00:39:34,900 --> 00:39:36,200
How come that didn't?

616
00:39:37,900 --> 00:39:38,900
What did I do wrong there?

617
00:39:39,000 --> 00:39:39,700
Hold on a second.

618
00:39:39,700 --> 00:39:40,900
I don't want to accidentally push.

619
00:39:41,000 --> 00:39:42,700
Okay, so it looks like I just wasn't

620
00:39:44,700 --> 00:39:46,000
Cutting it quite right.

621
00:39:46,000 --> 00:39:47,400
So right there.

622
00:39:49,100 --> 00:39:49,800
Down to their.

623
00:39:51,500 --> 00:39:54,600
And so this is again just me like pruning down the code so I can, you

624
00:39:54,600 --> 00:39:57,200
know, there was just so many things kind of that we kept putting in

625
00:39:57,200 --> 00:39:59,900
for testing and eventually it gets to the point where it's very hard

626
00:39:59,900 --> 00:40:00,600
to work with.

627
00:40:00,700 --> 00:40:01,300
Right?

628
00:40:02,500 --> 00:40:06,000
So we have an if use for a raise and then here I guess we would have

629
00:40:08,600 --> 00:40:12,900
this still occurs regardless and then we would drop down to the else

630
00:40:12,900 --> 00:40:13,400
case.

631
00:40:13,400 --> 00:40:15,900
So I guess this is actually how we would do it, right?

632
00:40:22,800 --> 00:40:28,400
Yeah, and so this code has not been changed.

633
00:40:28,500 --> 00:40:31,900
It's still updating the spec textiles the same way, but I don't know

634
00:40:31,900 --> 00:40:32,500
to what extent.

635
00:40:32,500 --> 00:40:35,200
We may have changed a few things in here while we were doing some of

636
00:40:35,200 --> 00:40:36,400
the optimization work.

637
00:40:36,800 --> 00:40:42,500
So you may want to verify that any of that is still like working

638
00:40:42,500 --> 00:40:43,100
properly.

639
00:40:43,400 --> 00:40:43,700
I guess.

640
00:40:43,700 --> 00:40:45,600
I don't know if we touch anything in there.

641
00:40:45,600 --> 00:40:49,700
That might cause a problem, but so now we've at least simplified it

642
00:40:49,700 --> 00:40:52,500
down, it should look basically the same, it does.

643
00:40:53,700 --> 00:40:54,900
and,

644
00:40:56,600 --> 00:40:58,400
There's a grid raycast.

645
00:40:59,600 --> 00:41:01,600
Update voxel.

646
00:41:03,800 --> 00:41:06,500
I don't actually know what we're doing with update voxel.

647
00:41:07,300 --> 00:41:08,200
Like nothing.

648
00:41:12,000 --> 00:41:15,700
So that's just old news as well as we welded that in so that shouldn't

649
00:41:15,700 --> 00:41:16,500
actually be happening.

650
00:41:16,500 --> 00:41:17,700
I like looks fishy.

651
00:41:18,400 --> 00:41:20,000
Looks fishy is very good.

652
00:41:23,200 --> 00:41:28,900
You got to understand sometimes, some numbers look fishy when you say,

653
00:41:31,100 --> 00:41:33,100
I don't know that we really care about that.

654
00:41:34,800 --> 00:41:37,400
But you know what I might do, I might stick it in here.

655
00:41:38,500 --> 00:41:40,600
Just in case just in case.

656
00:41:43,700 --> 00:41:45,300
We need to check if something looks fishy.

657
00:41:47,300 --> 00:41:54,000
So we've got our voxel, irradiance computation, and we did sort of

658
00:41:54,000 --> 00:41:54,900
change some of these.

659
00:41:54,900 --> 00:41:57,000
Like, we do dues, the get relative P.

660
00:41:57,800 --> 00:41:59,800
So we use the the voxel

661
00:42:00,800 --> 00:42:01,700
Utility functions.

662
00:42:01,700 --> 00:42:03,600
Now maybe I screwed them up, right?

663
00:42:03,600 --> 00:42:06,600
I mean that's totally on the table and that would leak into here.

664
00:42:08,300 --> 00:42:09,600
Get light leaf.

665
00:42:09,600 --> 00:42:15,100
For p is like, we're not really going to be doing these anymore, so

666
00:42:15,100 --> 00:42:16,300
this can go as well.

667
00:42:16,600 --> 00:42:17,800
It's just not a thing.

668
00:42:19,300 --> 00:42:22,600
Debug box push, we probably want to keep because we're going to have

669
00:42:22,600 --> 00:42:25,500
to debug a bunch of stuff soon and we would like to fix that.

670
00:42:26,200 --> 00:42:29,100
I don't know that get box is a thing.

671
00:42:30,000 --> 00:42:33,100
I guess we're using it, just to verify that we don't go out of bounds

672
00:42:33,100 --> 00:42:34,600
now, right?

673
00:42:34,900 --> 00:42:36,100
So I guess we'll leave it in.

674
00:42:38,300 --> 00:42:40,100
And add Box Storage were using as well.

675
00:42:40,100 --> 00:42:41,000
I think, right?

676
00:42:41,300 --> 00:42:41,700
Yeah.

677
00:42:42,000 --> 00:42:43,700
On the only on the old path though.

678
00:42:44,600 --> 00:42:46,300
So we'll leave that stuff for now.

679
00:42:57,900 --> 00:43:00,500
Be sure the Katie stack pack is gone now too, right?

680
00:43:05,300 --> 00:43:07,900
So again not really doing anything right now other than just deleting

681
00:43:07,900 --> 00:43:11,300
code so that I can have a little bit more of a focused approach as to

682
00:43:11,300 --> 00:43:12,200
what's going on in here.

683
00:43:12,200 --> 00:43:18,700
It just gotten a little bit too crafty to really be able to like suss

684
00:43:18,700 --> 00:43:23,000
out what was going on there and it'll get simplified quite a bit more

685
00:43:23,000 --> 00:43:25,700
once we pull out the old Caster as well, but I just don't want to do

686
00:43:25,700 --> 00:43:29,500
that till I can verify that the new Caster is unambiguously better,

687
00:43:29,500 --> 00:43:31,100
which we don't know that it is, right.

688
00:43:31,100 --> 00:43:34,400
So I just can't make that leap yet.

689
00:43:36,800 --> 00:43:38,800
Okay, so same situation here.

690
00:43:39,400 --> 00:43:42,700
I don't know that there's lighting points anymore so I feel like those

691
00:43:42,700 --> 00:43:44,600
should be able to be removed.

692
00:43:46,500 --> 00:43:47,300
We don't use them.

693
00:43:49,700 --> 00:43:54,500
Light node is also not used, I don't think.

694
00:44:01,600 --> 00:44:03,600
Katie tree node is not used.

695
00:44:06,100 --> 00:44:09,700
And I think that is the end of it, right?

696
00:44:16,900 --> 00:44:18,800
All right, so this is much more streamlined.

697
00:44:18,800 --> 00:44:21,600
Now although there still is a ton of stuff in here that doesn't need

698
00:44:21,600 --> 00:44:22,200
to be in here.

699
00:44:22,200 --> 00:44:26,000
Once we can actually pick the the raycast or we're going to use.

700
00:44:27,000 --> 00:44:29,600
So now we just need to address like why are we getting this weird

701
00:44:29,600 --> 00:44:30,400
light Behavior?

702
00:44:30,400 --> 00:44:32,100
Like it's it's

703
00:44:33,600 --> 00:44:39,700
looks kind of, looks kind of like,

704
00:44:45,400 --> 00:44:45,900
Well.

705
00:44:49,300 --> 00:44:52,300
I mean, it looks kind of like an issue with the Ray kassar.

706
00:44:52,300 --> 00:44:57,700
I don't know, I think, I mean, I don't really know, but I may have to

707
00:44:57,700 --> 00:44:59,800
just kind of re-enable, some debug

708
00:45:00,000 --> 00:45:04,000
Because this kind of algorithms really hard to debug without looking

709
00:45:04,000 --> 00:45:05,100
at what it is.

710
00:45:05,100 --> 00:45:06,700
You know what, it actually shows you.

711
00:45:07,800 --> 00:45:11,900
So I'll take a quick spin through the raycast or first and see if

712
00:45:11,900 --> 00:45:16,300
there's anything obvious that we can just Bingo out on and save time.

713
00:45:16,300 --> 00:45:19,200
But assuming that, you know, we don't see anything.

714
00:45:19,400 --> 00:45:22,100
I think I'm gonna have to take a much more methodical approach to it.

715
00:45:24,500 --> 00:45:27,600
Okay, so here's the actual light Loop.

716
00:45:27,900 --> 00:45:28,900
You can see how it works.

717
00:45:28,900 --> 00:45:34,600
It's basically just looping through the children of the of the entry

718
00:45:34,600 --> 00:45:35,500
on the box stack.

719
00:45:36,400 --> 00:45:39,300
And so the way this works is it just says look we're going to start

720
00:45:39,300 --> 00:45:44,400
with with one box on the stack and, you know, we're going to go ahead

721
00:45:44,400 --> 00:45:47,500
and look consider that box.

722
00:45:47,900 --> 00:45:52,700
And the way we do that is we Loop through the Leafs that it has

723
00:45:54,300 --> 00:45:54,900
and,

724
00:45:58,800 --> 00:46:04,900
you can see here, says, like, if we need to actually push something

725
00:46:04,900 --> 00:46:06,000
onto the stack,

726
00:46:11,500 --> 00:46:12,200
You can see.

727
00:46:12,700 --> 00:46:16,400
So basically, this is the Collision detector that says, did we hit

728
00:46:16,400 --> 00:46:16,900
this?

729
00:46:17,600 --> 00:46:20,000
You know, essentially we know for pulling something off.

730
00:46:20,400 --> 00:46:21,200
I can see how this works.

731
00:46:21,200 --> 00:46:23,300
Now, I just had to repaint it back into my head.

732
00:46:24,100 --> 00:46:27,300
We pull something off the stack, if it's on the stack, then we know

733
00:46:27,800 --> 00:46:31,500
it's a like interior node.

734
00:46:31,500 --> 00:46:32,400
It's not a leaf.

735
00:46:32,400 --> 00:46:33,900
It's not an actual like occluder.

736
00:46:33,900 --> 00:46:35,900
It's some kind of a spatial partition node.

737
00:46:36,600 --> 00:46:37,300
We test it.

738
00:46:37,300 --> 00:46:41,100
And we see whether or not it's going to have the correct set of

739
00:46:41,300 --> 00:46:42,900
Things for us to process it later.

740
00:46:44,100 --> 00:46:47,100
So we use should push which is to say whether or not it was close

741
00:46:47,100 --> 00:46:48,200
enough for inside.

742
00:46:50,900 --> 00:46:54,900
And we say if we should push and this thing is a leaf container.

743
00:46:54,900 --> 00:46:59,500
Then we roll over the leaves in a tighter Loop which just streams over

744
00:46:59,500 --> 00:47:06,900
them one after the other and we pull the the box out test against it

745
00:47:07,500 --> 00:47:11,200
preserve the best hits using select and continue the loop, right?

746
00:47:11,500 --> 00:47:13,700
So it's just a little branchless Loop that just kind of

747
00:47:13,900 --> 00:47:17,900
There and runs units, Branch this assuming this is turned into a seam

748
00:47:17,900 --> 00:47:19,000
of which you hope it would be.

749
00:47:24,500 --> 00:47:25,000
But who knows?

750
00:47:25,000 --> 00:47:26,200
We did find that msv.

751
00:47:26,200 --> 00:47:28,600
See doesn't really turn things into see, mobs unless you're very

752
00:47:28,600 --> 00:47:29,000
careful.

753
00:47:29,000 --> 00:47:31,000
So it's entirely possible that actually doesn't.

754
00:47:31,300 --> 00:47:35,500
But and then we have another CMOS version down here.

755
00:47:35,500 --> 00:47:38,400
This is the thing that does, the should push for the Box pack.

756
00:47:39,200 --> 00:47:43,500
And I think it actually turned out to not be faster with the seam of

757
00:47:43,500 --> 00:47:43,800
those.

758
00:47:43,800 --> 00:47:46,200
We didn't bother there are some weird about that.

759
00:47:46,200 --> 00:47:46,800
Right?

760
00:47:47,100 --> 00:47:52,700
But anyway you can see here, we just do like look we update the depth.

761
00:47:54,200 --> 00:47:57,500
And the Box stock, if this is something we should have pushed on,

762
00:47:58,100 --> 00:47:58,600
right?

763
00:48:05,200 --> 00:48:06,600
You know, it seems pretty reasonable.

764
00:48:07,000 --> 00:48:08,500
And also anything particularly weird going on.

765
00:48:08,500 --> 00:48:16,000
They're not sure why that would have sort of flamed out the way that

766
00:48:16,000 --> 00:48:16,400
we're seeing now.

767
00:48:16,400 --> 00:48:21,400
But anyway, we go down here, we finally, when we retire, we know we

768
00:48:21,400 --> 00:48:23,500
now have four hits.

769
00:48:23,500 --> 00:48:26,500
I mean hopefully like maybe something's didn't hit, but we have for

770
00:48:27,400 --> 00:48:28,400
Real Results.

771
00:48:28,500 --> 00:48:31,600
We try to compute with the normals are that's what this whole thing

772
00:48:31,600 --> 00:48:31,900
is.

773
00:48:33,600 --> 00:48:38,300
And then we Loop over each Ray and in scalar, we ask it to compute the

774
00:48:38,300 --> 00:48:43,000
voxel irradiance and you can see getting the components out here and

775
00:48:43,000 --> 00:48:47,000
then asking the the voxel computation to like sample that if you sat

776
00:48:47,000 --> 00:48:49,400
lists and blend it together.

777
00:48:49,700 --> 00:48:51,900
So that's, you know, that's all that happens there.

778
00:48:53,300 --> 00:48:57,900
Assuming that that information is fetched it then uses the transfer

779
00:48:57,900 --> 00:48:58,700
pps2.

780
00:48:58,800 --> 00:49:03,300
Basically update the spec map in just this little piece of code here,

781
00:49:03,700 --> 00:49:06,200
which is pretty trivial, and it hasn't been touched.

782
00:49:06,200 --> 00:49:11,000
So I don't suspect there would be much to worry about there, but, you

783
00:49:11,000 --> 00:49:12,200
know, I guess you never know.

784
00:49:13,000 --> 00:49:19,600
So, I think that's basically it, my concern would be that compute

785
00:49:19,600 --> 00:49:21,100
voxel irradiance at

786
00:49:25,700 --> 00:49:26,200
Let me.

787
00:49:27,900 --> 00:49:30,000
Let me take a look at relative P.

788
00:49:30,700 --> 00:49:35,800
I'm just not entirely sure, you know, I don't know to what extent.

789
00:49:35,800 --> 00:49:37,600
That's correct.

790
00:49:38,700 --> 00:49:39,800
I just want to take a look at it.

791
00:49:39,800 --> 00:49:43,000
So it's basically saying, look, make the world PB relative.

792
00:49:45,100 --> 00:49:48,600
Figure out which one it's in, which it does.

793
00:49:58,000 --> 00:50:00,200
And then it just produces the uvw is.

794
00:50:00,200 --> 00:50:02,000
Yeah it's a pretty straightforward routine.

795
00:50:02,000 --> 00:50:03,700
Doesn't seem like it could be wrong.

796
00:50:04,700 --> 00:50:09,400
The actual initialization code could of course, always be wrong

797
00:50:09,400 --> 00:50:09,900
though.

798
00:50:10,500 --> 00:50:11,800
So that part's a little bit harder.

799
00:50:11,800 --> 00:50:15,100
Let's take a look at that real quick so you can see here.

800
00:50:15,100 --> 00:50:19,800
We get the Silicon, the seldom we pass, we produce those, you know,

801
00:50:19,800 --> 00:50:23,100
the inverse from those and we set the cell count.

802
00:50:23,100 --> 00:50:27,600
We will set them in corner later by using rectum in dim.

803
00:50:30,000 --> 00:50:33,000
Working off of the cell count in the cell Doom, just to produce,

804
00:50:33,000 --> 00:50:34,800
whatever that offset should actually be.

805
00:50:38,100 --> 00:50:41,400
So, unless rectum in dim was somehow wrong, which doesn't seem

806
00:50:41,400 --> 00:50:43,400
plausible at this point because we use it everywhere.

807
00:50:43,400 --> 00:50:48,100
But yeah, it doesn't seem like that.

808
00:50:48,100 --> 00:50:55,300
Could be incorrect so that I don't know why that would be wrong.

809
00:51:04,100 --> 00:51:04,900
I don't know.

810
00:51:06,200 --> 00:51:09,100
So again, I'm just struggling to find anything obviously wrong.

811
00:51:09,100 --> 00:51:14,000
So, I think I may have to just kind of dip down into it and sort of

812
00:51:14,000 --> 00:51:15,900
Step through carefully to see what's going on.

813
00:51:16,600 --> 00:51:21,000
I don't see any, I don't see any obvious explanation for why we would

814
00:51:21,000 --> 00:51:21,600
be getting that.

815
00:51:21,600 --> 00:51:26,600
I suppose the exterior code which we did change, pretty heavily could

816
00:51:26,600 --> 00:51:30,100
have screwed something up, I mean, you know, in here if you forgot to

817
00:51:30,100 --> 00:51:33,500
set some fundamental value, that would be a pretty obvious way you.

818
00:51:33,700 --> 00:51:37,800
Of screwed things up because, you know, the code is dependent on all

819
00:51:37,800 --> 00:51:41,500
of these values being said, because there's just as with anything with

820
00:51:41,500 --> 00:51:41,900
lighting.

821
00:51:41,900 --> 00:51:45,000
There's just so many moving pieces and so, it's pretty easy.

822
00:51:45,200 --> 00:51:46,500
You end up with kind of this orgy.

823
00:51:46,500 --> 00:51:49,100
If you actually, you know, if you imagine trying to do the lighting,

824
00:51:49,100 --> 00:51:52,200
as a functional, kind of a design where you always pass everything

825
00:51:52,200 --> 00:51:53,200
that everyone needs,

826
00:51:54,600 --> 00:51:58,600
It just gets really unwieldy very quickly and that's usually you know

827
00:51:58,700 --> 00:52:01,000
when you're know you're dealing with a system like that, you also know

828
00:52:01,000 --> 00:52:04,600
that there's kind of a lot of cruft in it then because that just means

829
00:52:04,600 --> 00:52:08,100
there's so many moving parts that it is going to be tricky, right?

830
00:52:08,100 --> 00:52:09,800
That's that's just kind of how that goes.

831
00:52:11,400 --> 00:52:15,800
So anyway, yeah, so I'm not sure I would say that.

832
00:52:19,400 --> 00:52:21,000
I guess I also don't know.

833
00:52:21,000 --> 00:52:23,300
As far as the lighting spheres are concerned.

834
00:52:23,400 --> 00:52:27,500
I don't really remember to what extent we're out.

835
00:52:27,500 --> 00:52:29,400
Putting those values.

836
00:52:29,400 --> 00:52:32,800
I don't know if you even ever verified if we were out putting those

837
00:52:32,800 --> 00:52:37,500
values in a sensible way, I assume that they're still correct but I

838
00:52:37,500 --> 00:52:39,200
actually don't know like

839
00:52:50,000 --> 00:52:54,100
We generated like a non interleaved version of this thing or

840
00:52:54,100 --> 00:52:54,800
something.

841
00:52:54,800 --> 00:52:58,700
And so I you know, I'm just going to go take a quick look at HHS fear

842
00:52:58,700 --> 00:53:01,700
just to remember what the last thing we dumped to this file was

843
00:53:01,700 --> 00:53:02,800
because I'm just not sure.

844
00:53:03,800 --> 00:53:08,600
So like in here where we do output sphere inl, right?

845
00:53:10,800 --> 00:53:14,600
When we did the generate octahedral lighting pattern, I want to say

846
00:53:14,600 --> 00:53:19,500
that we preserved it like meaning it should be the same thing like

847
00:53:19,500 --> 00:53:19,600
way.

848
00:53:19,800 --> 00:53:20,600
It was.

849
00:53:25,200 --> 00:53:25,800
Select.

850
00:53:30,100 --> 00:53:30,400
Select.

851
00:53:30,400 --> 00:53:31,000
Here's the light.

852
00:53:31,000 --> 00:53:32,000
Sampling sphere.

853
00:53:42,500 --> 00:53:44,200
and that looks like, it's just

854
00:53:49,700 --> 00:53:53,500
That looks like it's just you know, correctly grouped.

855
00:53:55,400 --> 00:53:56,200
For X is 4.

856
00:53:56,200 --> 00:53:57,300
Y is for Z's.

857
00:53:58,600 --> 00:53:59,000
Right.

858
00:54:04,600 --> 00:54:05,100
So, I don't know.

859
00:54:05,100 --> 00:54:09,100
So assuming that this is still, you know, producing reasonable

860
00:54:09,100 --> 00:54:14,400
results, I guess, let me just test it because rather, than me

861
00:54:14,500 --> 00:54:15,400
inspecting the code.

862
00:54:15,400 --> 00:54:19,500
The easiest way is for me to just look at the actual stuff that comes

863
00:54:19,500 --> 00:54:22,900
out and see whether or not it's valid, right?

864
00:54:23,200 --> 00:54:28,400
So, if I go, and I can actually do that in the code as well.

865
00:54:28,400 --> 00:54:33,300
When we pull those samples out, I can sort of check to see what there.

866
00:54:33,800 --> 00:54:35,100
It says, right?

867
00:54:35,400 --> 00:54:42,200
So when we are actually doing the ray casting and, you know, we're in

868
00:54:42,200 --> 00:54:45,000
the compute, light propagation callback here for example.

869
00:54:47,600 --> 00:54:52,400
I should be able to then take a look at the value.

870
00:54:52,400 --> 00:54:54,200
We're using to do the cast.

871
00:54:54,600 --> 00:54:56,400
Well, I guess that's probably down in here, right?

872
00:54:57,300 --> 00:55:00,700
And verify that it's actually a

873
00:55:05,100 --> 00:55:08,200
like I should be able to verify that it's actually correct.

874
00:55:08,800 --> 00:55:10,500
This looks weird though.

875
00:55:23,500 --> 00:55:28,400
So this is odd in fact.

876
00:55:28,400 --> 00:55:31,900
So why is this look like this?

877
00:55:31,900 --> 00:55:33,500
Here's sample directions.

878
00:55:33,500 --> 00:55:35,000
Okay, so this is wrong.

879
00:55:36,900 --> 00:55:37,900
This is totally wrong.

880
00:55:38,700 --> 00:55:44,800
Okay, so what it looks like is happening here is that raycast is we

881
00:55:44,800 --> 00:55:48,200
don't have one that's still doing it the way that it used to work

882
00:55:48,200 --> 00:55:49,200
where we would pass

883
00:55:50,800 --> 00:55:52,300
For re directions down.

884
00:55:55,700 --> 00:55:58,000
I mean just looking at it, right?

885
00:55:59,800 --> 00:56:01,400
Like that would still need to be true.

886
00:56:01,400 --> 00:56:08,900
So so I think this is garbage now and you can see that it's not even

887
00:56:08,900 --> 00:56:11,300
loading up the sample spheres anymore.

888
00:56:12,100 --> 00:56:16,100
So if we do want this to run properly, we need to use both of those

889
00:56:16,100 --> 00:56:16,500
things.

890
00:56:16,500 --> 00:56:19,000
So we need to do like, light sample sphere.

891
00:56:22,800 --> 00:56:26,000
And we would need to actually like load that out.

892
00:56:26,100 --> 00:56:26,600
So

893
00:56:32,600 --> 00:56:36,400
in order to get the sampling sphere, in this case, I think it would be

894
00:56:36,400 --> 00:56:37,000
like

895
00:56:38,200 --> 00:56:40,000
Basically, this same thing.

896
00:56:46,900 --> 00:56:49,700
It just looks like we were just while we were doing the other code, we

897
00:56:49,700 --> 00:56:52,000
just vaporized the original version here.

898
00:56:52,900 --> 00:56:56,300
So this would pull out the sampling sphere in question and then this

899
00:56:56,300 --> 00:56:58,300
would be the thing that would pull out the

900
00:57:00,900 --> 00:57:04,300
The correct, sampling sphere value.

901
00:57:04,300 --> 00:57:09,500
So if we just did, you know, array D here where we said, samples fear.

902
00:57:10,300 --> 00:57:14,100
I don't remember what that is, just called sample Direction.

903
00:57:14,900 --> 00:57:17,700
So if we said, like, okay, that's the sample Direction in here, we

904
00:57:17,700 --> 00:57:20,400
just say like, oh okay, like

905
00:57:28,800 --> 00:57:35,600
Do the Rady that you need to pass and presumably, we can just do one

906
00:57:35,600 --> 00:57:37,800
and two and then update this one as well.

907
00:57:38,200 --> 00:57:41,100
Now I have to go verify that that actually works.

908
00:57:46,200 --> 00:57:48,300
So just fat that.

909
00:57:48,300 --> 00:57:52,600
That's actually what we used to be passing because I'm not sure, but I

910
00:57:52,600 --> 00:57:56,000
feel like that's mostly, right?

911
00:57:56,000 --> 00:57:58,300
Like, that's, that's mostly what we should have been pulling.

912
00:57:59,800 --> 00:58:00,500
So, let's see.

913
00:58:00,600 --> 00:58:04,100
Okay, so it looks like that was probably the only problem, so we just

914
00:58:04,100 --> 00:58:06,300
weren't passing the right sampling values.

915
00:58:07,200 --> 00:58:11,200
So now, if I go ahead and run Us in 02 mode,

916
00:58:21,600 --> 00:58:22,800
Looks reasonable.

917
00:58:26,800 --> 00:58:27,700
Like, I'm not sure.

918
00:58:27,700 --> 00:58:28,500
It's right.

919
00:58:29,800 --> 00:58:32,600
Because again, we haven't even really done our lighting quality pass.

920
00:58:32,600 --> 00:58:38,200
So we don't really know to what extent the lighting is is actually

921
00:58:38,200 --> 00:58:38,700
proper.

922
00:58:38,700 --> 00:58:41,600
But at least it's not obviously bugging now, right?

923
00:58:42,900 --> 00:58:48,200
It's at least more towards the same side of things and, you know,

924
00:58:50,700 --> 00:58:52,300
Looks like more, what you would expect.

925
00:58:54,400 --> 00:58:54,800
Okay.

926
00:58:57,000 --> 00:59:01,800
So what I would like to do here is maybe just because I don't know

927
00:59:01,800 --> 00:59:04,800
that I really want to get into the other side of the lighting today

928
00:59:04,800 --> 00:59:05,300
yet.

929
00:59:05,500 --> 00:59:07,200
Maybe I'll say that for next weekend.

930
00:59:07,700 --> 00:59:10,100
What I'd like to do now is just streamline this again a little

931
00:59:10,100 --> 00:59:10,500
further.

932
00:59:10,500 --> 00:59:16,300
So while I have the the lighting in a writing running form simplify

933
00:59:16,300 --> 00:59:20,000
the code down into maybe two discrete branching paths that I can

934
00:59:20,000 --> 00:59:22,100
switch between very clearly.

935
00:59:23,700 --> 00:59:28,700
The old one in the new one just so it's more straightforward for me to

936
00:59:28,700 --> 00:59:32,900
be able to like continue to do the debugging properly between the two

937
00:59:32,900 --> 00:59:33,400
of them.

938
00:59:34,600 --> 00:59:40,400
so if I were to try to write it so you can see that the way the grid

939
00:59:40,400 --> 00:59:42,500
raycast here works is, you know, you say,

940
00:59:44,200 --> 00:59:48,300
here's the one Ray I want and it returns you, the transfer PPS value

941
00:59:49,700 --> 00:59:53,700
and you can see the way the other raycast works is it just does the

942
00:59:53,700 --> 00:59:56,100
update sort of at the end, right?

943
00:59:57,400 --> 00:59:59,800
And so the problem with

944
01:00:00,000 --> 01:00:05,100
Doing it this way is again, just like you kind of have to figure out

945
01:00:05,100 --> 01:00:08,900
like what are you actually going to do in terms of the difference in

946
01:00:08,900 --> 01:00:09,500
updates?

947
01:00:09,500 --> 01:00:13,300
The reason we did it this way here was because this code already

948
01:00:13,300 --> 01:00:18,800
happened to be, you know, it was already doing four at a time.

949
01:00:19,600 --> 01:00:22,700
So when it pulls out of this routine, it's got four color values that

950
01:00:22,800 --> 01:00:28,300
made sense to just update those directly into the

951
01:00:29,800 --> 01:00:34,700
resulting spec Texel buffer, but I'm not sure that that makes a whole

952
01:00:34,700 --> 01:00:37,300
lot of sense for the other way, the raycast works because the other

953
01:00:37,300 --> 01:00:41,600
raycast routine is set up to just do like

954
01:00:43,300 --> 01:00:44,700
One single Ray.

955
01:00:45,100 --> 01:00:49,200
So you need to do it four times in order to be able to pull out this

956
01:00:49,200 --> 01:00:50,900
exit criteria, right?

957
01:00:53,600 --> 01:00:58,600
now maybe that's just better maybe we do just want to wrap it in a

958
01:00:58,600 --> 01:01:01,400
loop of four and

959
01:01:02,700 --> 01:01:06,600
so, when you call that raycast routine, you'd still do four at a time,

960
01:01:08,600 --> 01:01:09,900
you just do them see really

961
01:01:13,500 --> 01:01:14,500
And I don't know.

962
01:01:15,000 --> 01:01:18,400
I'm going to go ahead and say, sure, because again, that allows me to

963
01:01:18,400 --> 01:01:25,900
split these two into clean like, completely separated versions and

964
01:01:25,900 --> 01:01:29,200
that to me, just seems like way better.

965
01:01:30,100 --> 01:01:34,800
So I'm going to call this routine here, a BB raycast.

966
01:01:35,300 --> 01:01:39,100
And I'm going to call the other one, the grid raycast, which it

967
01:01:39,100 --> 01:01:40,200
already was.

968
01:01:41,600 --> 01:01:43,200
And then I guess I'll just try to wrap.

969
01:01:43,300 --> 01:01:48,600
The grid raycast routine in this in this code, right?

970
01:01:48,800 --> 01:01:54,400
So in other words, this will actually happen at the top of this code.

971
01:01:57,400 --> 01:02:01,700
I don't actually know if casts initiated properly gets updated by for

972
01:02:01,700 --> 01:02:02,700
in here or not.

973
01:02:05,300 --> 01:02:05,900
It does.

974
01:02:07,300 --> 01:02:13,500
So this code here, will basically, instead of grid raycast, actually

975
01:02:13,500 --> 01:02:16,600
getting called it, just is the routine now.

976
01:02:16,600 --> 01:02:22,800
So, it'll Loop over the re-index multiple times and produce in here.

977
01:02:23,800 --> 01:02:28,500
The transfer PPS value, it will not like return it

978
01:02:29,800 --> 01:02:30,300
Right?

979
01:02:30,700 --> 01:02:34,400
So it's actually going to just produce it directly.

980
01:02:36,400 --> 01:02:43,700
After producing the transfer PPS value, it will do the same rights as

981
01:02:43,700 --> 01:02:44,700
this routine does.

982
01:02:44,700 --> 01:02:48,900
So, you know, we'll we'll actually streamline it in here.

983
01:02:53,500 --> 01:02:54,200
Like so.

984
01:02:57,200 --> 01:02:59,400
And then, this routine will.

985
01:03:00,000 --> 01:03:03,400
Have any preprocessor directives in it anymore.

986
01:03:03,500 --> 01:03:05,800
It'll just always be what it is.

987
01:03:07,100 --> 01:03:09,500
And then we'll just have

988
01:03:10,700 --> 01:03:17,600
Lighting use grid will be a 0 or a 1 and I'll take a look at the

989
01:03:17,600 --> 01:03:23,100
places where lighting use gets gets used here and I'll just say, okay,

990
01:03:23,100 --> 01:03:27,200
if lighting use grid then we do it one way.

991
01:03:28,000 --> 01:03:32,500
If not, then we do it the other way and then the Ray Caster can just

992
01:03:32,500 --> 01:03:34,500
be something that gets picked

993
01:03:37,900 --> 01:03:38,400
Yeah.

994
01:03:38,900 --> 01:03:43,100
So like in here we'll just do a pound if

995
01:03:44,500 --> 01:03:45,800
Around these guys.

996
01:03:47,200 --> 01:03:52,000
And we'll say, lighting, use grid will do it one way, and then this

997
01:03:52,000 --> 01:03:53,000
will do it the other way.

998
01:03:53,700 --> 01:03:54,200
Right?

999
01:03:55,000 --> 01:03:59,700
So in one case, we update the sample Direction and the other, we

1000
01:03:59,700 --> 01:04:04,000
update the Rady pull and that's all we needed to do.

1001
01:04:05,000 --> 01:04:08,000
So now let's actually call the correct one in these two.

1002
01:04:08,000 --> 01:04:12,300
So in the AABB case, it's going to look like this.

1003
01:04:12,300 --> 01:04:16,400
We don't need the final two parameters.

1004
01:04:17,000 --> 01:04:21,200
Those were added specifically to support the grid, Ray Tracer, which

1005
01:04:21,200 --> 01:04:22,500
we know we don't need.

1006
01:04:23,900 --> 01:04:27,500
And then in this one, the same thing would be true in Reverse.

1007
01:04:27,500 --> 01:04:29,500
Like we probably don't need.

1008
01:04:30,100 --> 01:04:33,000
Oh well it's already says that so we know that it's like a different

1009
01:04:33,000 --> 01:04:34,200
set of parameters, right?

1010
01:04:36,500 --> 01:04:39,900
So in this case, we know that we would probably pass those two.

1011
01:04:39,900 --> 01:04:44,900
So instead of the Rady single like that stuff, right?

1012
01:04:45,900 --> 01:04:50,100
We know that these two have to be set to the things we would have

1013
01:04:50,100 --> 01:04:50,800
passed.

1014
01:04:51,400 --> 01:04:52,000
Right?

1015
01:04:53,500 --> 01:04:58,000
And so things like the walk table or whatever are not actually going

1016
01:04:58,000 --> 01:04:58,600
to be

1017
01:05:00,900 --> 01:05:02,200
We're not actually going to get those.

1018
01:05:03,700 --> 01:05:04,500
So,

1019
01:05:07,600 --> 01:05:12,200
Diffuse knotless just comes in automatically re origin.

1020
01:05:12,200 --> 01:05:13,200
Single.

1021
01:05:17,200 --> 01:05:24,100
Is just whatever, this Ray origin was so that's getting passed in

1022
01:05:24,500 --> 01:05:25,400
directly.

1023
01:05:26,500 --> 01:05:27,200
Right.

1024
01:05:28,600 --> 01:05:29,300
Yeah.

1025
01:05:29,500 --> 01:05:31,200
So this

1026
01:05:37,400 --> 01:05:40,500
Is just going to get passed in as what we use.

1027
01:05:43,200 --> 01:05:46,500
In the case of this Ray origin here.

1028
01:05:50,400 --> 01:05:55,600
It seems like the spec Atlas needs to be in here as well, right?

1029
01:05:55,600 --> 01:05:59,300
Because if we don't pass the spec, Atlas we won't have anywhere to

1030
01:05:59,300 --> 01:05:59,600
write.

1031
01:05:59,600 --> 01:05:59,800
So that

1032
01:06:00,000 --> 01:06:04,900
Is an addition that needs to happen and the same with the spec Texel.

1033
01:06:11,400 --> 01:06:14,700
The sample Direction gets past year and there's a grid index and

1034
01:06:14,700 --> 01:06:16,600
that's everything at that point.

1035
01:06:17,500 --> 01:06:24,300
So then we do our Loop and our Loop needs to pull off of the sample

1036
01:06:24,300 --> 01:06:27,600
direction for the particular re-index for on to get this Rady, which

1037
01:06:27,600 --> 01:06:33,800
is what it will do and that will be called Rady single Andrei origin.

1038
01:06:33,800 --> 01:06:40,300
Single is just what we got past, so that's just here because it

1039
01:06:40,300 --> 01:06:41,000
doesn't change.

1040
01:06:42,600 --> 01:06:48,100
The initial grid index, we got passed in the wok table.

1041
01:06:48,100 --> 01:06:55,500
We pulled out ourselves and so then I think we're good total cast

1042
01:06:55,500 --> 01:06:59,600
initiated can just be Inked by 4 because we know that's what that's

1043
01:06:59,600 --> 01:07:00,600
actually going to do.

1044
01:07:03,600 --> 01:07:07,500
And so, in order to simplify this, we might just go ahead and say,

1045
01:07:07,500 --> 01:07:11,400
like each time through this Loop, we initiate a tray casts, right?

1046
01:07:12,700 --> 01:07:15,600
So that doesn't need to be done twice.

1047
01:07:21,800 --> 01:07:22,400
Okay.

1048
01:07:25,800 --> 01:07:31,700
So the moon direction again, we don't really know how this is going to

1049
01:07:31,700 --> 01:07:32,600
shake out.

1050
01:07:32,700 --> 01:07:38,800
That's like, placeholder code because we just have no idea like what

1051
01:07:38,800 --> 01:07:40,500
we're expecting to happen there, right?

1052
01:07:47,100 --> 01:07:47,500
Oops.

1053
01:07:49,800 --> 01:07:52,000
So we don't really know what's going on there and we don't really care

1054
01:07:52,000 --> 01:07:52,700
at the moment.

1055
01:07:52,700 --> 01:07:55,600
So this is lighting used grid.

1056
01:08:00,600 --> 01:08:01,200
Rid.

1057
01:08:02,100 --> 01:08:03,000
Hey Bebe.

1058
01:08:09,200 --> 01:08:09,700
Okay.

1059
01:08:11,500 --> 01:08:16,899
So, we should be able to now swap between these two lighting versions,

1060
01:08:17,300 --> 01:08:19,000
pretty straightforward, right?

1061
01:08:20,000 --> 01:08:25,899
And now we have completely separated calls for each one.

1062
01:08:26,000 --> 01:08:30,700
So there, you know, completely unrelated and don't like overlap each

1063
01:08:30,700 --> 01:08:32,000
other at all in theory.

1064
01:08:35,300 --> 01:08:38,700
We do have two separate calls here so we have a build spatial

1065
01:08:38,700 --> 01:08:41,800
partition for lighting for a bees and a build spatial partition

1066
01:08:41,800 --> 01:08:46,500
lighting for grids and when I might want to do is actually just split

1067
01:08:46,500 --> 01:08:47,600
those two out as well.

1068
01:08:47,600 --> 01:08:51,500
So again, we have just one like point where we call them

1069
01:08:53,399 --> 01:08:57,500
And and see if we can make that work correctly.

1070
01:08:58,800 --> 01:08:59,200
Yeah.

1071
01:09:00,200 --> 01:09:01,600
So I'm going to try that.

1072
01:09:01,600 --> 01:09:05,300
I'm going to say like, build spatial partition.

1073
01:09:09,800 --> 01:09:14,800
And I'm going to have like a BB and grid.

1074
01:09:21,899 --> 01:09:25,399
And I'm just going to try slitting this routine into two, halves to

1075
01:09:25,399 --> 01:09:27,600
see if I can make that work or not.

1076
01:09:28,500 --> 01:09:34,700
So if I grab the part of this routine that does the, a be build, it

1077
01:09:34,700 --> 01:09:35,500
looks like this.

1078
01:09:40,399 --> 01:09:45,700
And then, if I take a look at the part that builds the grid routine

1079
01:09:45,899 --> 01:09:46,800
looks like this.

1080
01:09:50,300 --> 01:09:54,800
And it seems like there's probably like very very little overlap here.

1081
01:09:57,900 --> 01:09:59,800
You know, just just looking at it.

1082
01:10:00,600 --> 01:10:05,000
So I think that should be pretty straightforward and now I can just do

1083
01:10:05,000 --> 01:10:05,600
here.

1084
01:10:06,700 --> 01:10:09,200
If lighting use grid, we call the grid one.

1085
01:10:09,300 --> 01:10:10,800
Otherwise we call the other one.

1086
01:10:10,900 --> 01:10:15,700
And now we've kind of like pull this code apart.

1087
01:10:17,900 --> 01:10:23,100
To the point where we don't like we could even make this be like hot

1088
01:10:23,100 --> 01:10:24,700
swappable right now.

1089
01:10:24,700 --> 01:10:28,800
We just have effectively a switch we turn and we run completely

1090
01:10:28,800 --> 01:10:34,400
separate code paths for each case and they're really not at all.

1091
01:10:34,400 --> 01:10:36,900
So we could we could run them together, right?

1092
01:10:37,700 --> 01:10:39,100
Could run them at the same time.

1093
01:10:40,300 --> 01:10:46,500
Without the pound, if right by just using an actual, if in the code

1094
01:10:47,000 --> 01:10:50,900
and that seems good just as something we can use going forwards.

1095
01:10:52,100 --> 01:10:55,200
So let's go ahead and run the old a B-1.

1096
01:10:55,200 --> 01:10:57,800
And so the other thing I would like to do here is maybe clean up the

1097
01:10:57,800 --> 01:10:59,400
way the Box Storage stuff works.

1098
01:10:59,400 --> 01:11:03,900
In this particular case, that's another thing I would like to do but

1099
01:11:03,900 --> 01:11:04,600
let's just see.

1100
01:11:04,600 --> 01:11:09,900
So when we do the grid lighting there was like a ton of bugs

1101
01:11:10,100 --> 01:11:15,300
This is supposed to be good raycast and so we could also maybe try to

1102
01:11:15,300 --> 01:11:16,600
look for some of the bugs.

1103
01:11:17,000 --> 01:11:17,900
Like we've got

1104
01:11:19,200 --> 01:11:20,400
a certain stuff.

1105
01:11:20,500 --> 01:11:23,200
We had accidentally disabled asserts by accident.

1106
01:11:23,200 --> 01:11:25,700
So we've got bugs in here.

1107
01:11:26,100 --> 01:11:28,900
That's an assert should probably go to debug mode.

1108
01:11:37,400 --> 01:11:44,400
So yeah, if I run and debug mode, I should hit asserts on things, not

1109
01:11:44,400 --> 01:11:45,600
being in bouncy here.

1110
01:11:45,600 --> 01:11:49,700
Like we've got an index and the index is apparently garbage.

1111
01:11:49,700 --> 01:11:55,700
So if I take a look at the cell count, you can see that it's fetching

1112
01:11:56,100 --> 01:11:59,100
to it's like one ahead of X where it should be.

1113
01:12:00,500 --> 01:12:04,200
so basically like this particular piece of code here,

1114
01:12:09,000 --> 01:12:14,200
Somehow this clipping to the spatial grid bound like wasn't sufficient

1115
01:12:14,200 --> 01:12:17,000
to prevent the index from being out of bounds, which is a little bit

1116
01:12:17,000 --> 01:12:17,500
weird.

1117
01:12:28,900 --> 01:12:31,300
it's a little bit hard to see here in 29 for

1118
01:12:39,000 --> 01:12:41,100
What's the actual total Downs?

1119
01:12:59,200 --> 01:13:00,400
Interesting.

1120
01:13:06,600 --> 01:13:08,100
I would like to see this.

1121
01:13:15,300 --> 01:13:17,200
This one was right on the edge.

1122
01:13:26,600 --> 01:13:29,000
So, I guess the problem that we would have there.

1123
01:13:31,900 --> 01:13:37,400
Is that on the absolute edge of the box?

1124
01:13:38,300 --> 01:13:38,800
So,

1125
01:13:40,900 --> 01:13:46,700
since we don't want to step over the edge of the Box, we would want to

1126
01:13:51,100 --> 01:13:55,400
We would want to bring the actual like total bounds.

1127
01:13:55,400 --> 01:13:56,200
That were clipping.

1128
01:13:56,200 --> 01:14:00,800
We'd want to bring them in by .5 since it wouldn't change the results,

1129
01:14:00,800 --> 01:14:03,000
but it would make sure we never step out of bounds.

1130
01:14:03,300 --> 01:14:08,800
So, what we probably actually want to do is we want to use like our

1131
01:14:10,300 --> 01:14:11,500
region clipping

1132
01:14:12,700 --> 01:14:15,100
You know where clipping region like that.

1133
01:14:16,700 --> 01:14:19,400
And what we would want to do is say, you know, take this thing.

1134
01:14:24,200 --> 01:14:27,000
and so, when we produce the Box bounds in both cases,

1135
01:14:28,600 --> 01:14:32,200
What we want to do is once we do that clipping.

1136
01:14:34,500 --> 01:14:36,400
We would want to do a Mankowski.

1137
01:14:37,400 --> 01:14:39,700
Some on that, I do have that, don't I?

1138
01:14:40,300 --> 01:14:40,700
Yeah.

1139
01:14:46,800 --> 01:14:47,500
Do we not have it?

1140
01:14:47,500 --> 01:14:49,500
I guess we just called it add radius to.

1141
01:14:49,500 --> 01:14:49,800
Yeah.

1142
01:14:50,600 --> 01:14:53,600
So what we'd want to do here is we'd want to just do an ad Radius 2.

1143
01:14:56,200 --> 01:14:57,300
Otherwise known as Mankowski.

1144
01:14:57,300 --> 01:14:59,400
Some butt.

1145
01:15:00,000 --> 01:15:03,500
In this case, it's just a radius so you can't add two shapes I guess

1146
01:15:03,500 --> 01:15:04,900
whatever doesn't matter plate.

1147
01:15:04,900 --> 01:15:08,300
Being, I want to add to the clipping region.

1148
01:15:08,400 --> 01:15:14,900
Effectively like a - shrink of half the cell dim so whatever the

1149
01:15:21,200 --> 01:15:25,000
Whatever the cell Dimension is, I'm shrinking it in by half so that I

1150
01:15:25,600 --> 01:15:29,700
clip everything just to the to that region.

1151
01:15:31,800 --> 01:15:32,600
I think that would work.

1152
01:15:32,600 --> 01:15:36,700
The only thing I don't like about that is maybe we don't quite want to

1153
01:15:36,700 --> 01:15:37,300
do it.

1154
01:15:38,700 --> 01:15:43,300
all the way into there, because the only the, the downside of doing

1155
01:15:43,300 --> 01:15:44,800
that is just that

1156
01:15:48,000 --> 01:15:52,000
Well this has an apron anyway so actually technically we want to

1157
01:15:52,000 --> 01:15:54,200
shrink it by one whole unit, don't we?

1158
01:15:54,600 --> 01:15:55,300
I mean really

1159
01:15:59,200 --> 01:16:01,500
Because we're not suppose we putting things in the apron anyway.

1160
01:16:01,900 --> 01:16:03,700
So actually that's probably fine.

1161
01:16:05,600 --> 01:16:06,500
Because we don't really care.

1162
01:16:06,500 --> 01:16:10,200
If things are in the apron, we're going to, we're not going to look at

1163
01:16:10,200 --> 01:16:11,100
them either way.

1164
01:16:12,800 --> 01:16:17,000
So that way we won't have anything that goes outside the region due to

1165
01:16:17,000 --> 01:16:18,300
the rounding, right?

1166
01:16:19,200 --> 01:16:20,800
So let's take a look at it.

1167
01:16:20,800 --> 01:16:22,200
If there's any other ones here.

1168
01:16:27,500 --> 01:16:32,500
So that looks like it's still overlapping on why they're right.

1169
01:16:32,900 --> 01:16:34,000
Why is that

1170
01:16:36,300 --> 01:16:37,200
Pun intended.

1171
01:16:39,900 --> 01:16:40,400
Show me.

1172
01:16:40,400 --> 01:16:41,000
Okay, there we go.

1173
01:16:45,700 --> 01:16:49,200
Because the clipping region should now be shrunk.

1174
01:16:55,100 --> 01:16:58,300
Such that you shouldn't ever be able to step outside like that.

1175
01:17:12,000 --> 01:17:15,700
although I have to go actually verify that, that's really true, but

1176
01:17:18,400 --> 01:17:22,700
So it does still look like it's for some reason in whiny way thinking

1177
01:17:22,700 --> 01:17:24,600
that it can continue to do that.

1178
01:17:31,600 --> 01:17:32,900
But I'm not sure why.

1179
01:17:36,400 --> 01:17:37,600
Oh wow.

1180
01:17:40,600 --> 01:17:41,700
We're not even using it.

1181
01:17:43,200 --> 01:17:44,200
Check that out.

1182
01:17:44,600 --> 01:17:47,800
So this actually needs to be box bounds, right?

1183
01:17:51,400 --> 01:17:53,300
So that's pretty obvious there.

1184
01:17:55,400 --> 01:17:58,200
So that was just the case of like, because the routine had been

1185
01:17:58,200 --> 01:17:59,500
written prior to the clipping.

1186
01:17:59,500 --> 01:17:59,900
It was

1187
01:18:00,000 --> 01:18:04,200
Actually using the direct box bounds there, which is not at all what

1188
01:18:04,200 --> 01:18:05,200
we actually wanted.

1189
01:18:06,200 --> 01:18:08,200
So oops, it's comma.

1190
01:18:10,500 --> 01:18:14,300
All right, so now we fix to potential bugs and that sorting routine.

1191
01:18:15,400 --> 01:18:18,700
Let's see where else we get assertions here.

1192
01:18:20,700 --> 01:18:21,600
In the grid lighting.

1193
01:18:25,100 --> 01:18:28,100
Okay, so you can see that basically, like, if you call the grid

1194
01:18:28,100 --> 01:18:33,200
lighting routine, you end up with basically just straight Moonlight

1195
01:18:34,300 --> 01:18:35,000
weird way.

1196
01:18:36,400 --> 01:18:36,900
Right.

1197
01:18:37,000 --> 01:18:39,700
So every direction hits nothing.

1198
01:18:41,100 --> 01:18:42,500
I'm right, you know, you see I'm saying.

1199
01:18:42,700 --> 01:18:46,500
So basically, like every you run it every direction returns Moonlight

1200
01:18:46,900 --> 01:18:52,200
and it immediately goes to like fully saturated Moonlight because and

1201
01:18:52,200 --> 01:18:55,500
there's literally no, there's really no direction.

1202
01:18:55,500 --> 01:19:03,700
That doesn't produce Moonlight apparently right let me pull out.

1203
01:19:04,600 --> 01:19:07,200
To a further out can see the lighting man's there.

1204
01:19:09,800 --> 01:19:10,500
So that's good.

1205
01:19:10,500 --> 01:19:12,300
I mean, we're at a reasonable point.

1206
01:19:12,300 --> 01:19:14,600
Now, I don't know how much time I got left over like a half an hour,

1207
01:19:15,400 --> 01:19:21,200
so I think that we will want to maybe push a little further down into

1208
01:19:21,200 --> 01:19:22,800
their today.

1209
01:19:22,800 --> 01:19:23,700
I'm what should I do?

1210
01:19:25,300 --> 01:19:27,000
What should I do with my half hour?

1211
01:19:31,500 --> 01:19:34,800
So I'm not 100% sure what I should do with my half hour.

1212
01:19:37,500 --> 01:19:39,600
Try a ferret, whether I should try to get this working or whether I

1213
01:19:39,600 --> 01:19:42,600
should go to the let's let's finish the cleanup and then we'll start

1214
01:19:42,600 --> 01:19:44,500
next weekend on that on that part.

1215
01:19:45,400 --> 01:19:49,300
All right, so let me switch back to the grid version here.

1216
01:19:51,800 --> 01:19:53,100
I mean, the non grid version rather.

1217
01:19:55,100 --> 01:19:58,400
And what I wanted to do here was I'd like to start to remove some of

1218
01:19:58,400 --> 01:20:01,800
the stuff that's getting stored in the lighting structure that really

1219
01:20:01,800 --> 01:20:04,400
probably should not be in the lighting structure.

1220
01:20:07,300 --> 01:20:12,900
So if we take a look at the at the wig, get box is working.

1221
01:20:12,900 --> 01:20:18,400
I think that's the primary thing that don't really like.

1222
01:20:18,400 --> 01:20:24,900
So if you look at where add back storage is actually being called, can

1223
01:20:24,900 --> 01:20:30,100
kind of see what's going on here, like basically everywhere that we're

1224
01:20:30,100 --> 01:20:33,000
doing our splits, like we add these boxes in, right?

1225
01:20:33,800 --> 01:20:36,600
And these boxes are now we

1226
01:20:37,100 --> 01:20:39,700
Boxes for every particular case.

1227
01:20:39,700 --> 01:20:45,100
Meaning we never actually use the original boxes that were passed to

1228
01:20:45,100 --> 01:20:45,500
us.

1229
01:20:46,700 --> 01:20:52,300
And so what I'd like to do is I'd like to just stop storing that array

1230
01:20:52,700 --> 01:20:56,400
and so what I'd like to do is basically

1231
01:20:57,800 --> 01:20:59,900
take a look at this and say,

1232
01:21:00,100 --> 01:21:02,200
a okay, like

1233
01:21:03,400 --> 01:21:10,300
this is going to be some other thing, right?

1234
01:21:12,300 --> 01:21:19,200
And we will still use it for our own internal storage.

1235
01:21:25,000 --> 01:21:27,400
So that can continue happening.

1236
01:21:27,800 --> 01:21:28,200
Oops.

1237
01:21:32,200 --> 01:21:36,200
But everywhere else that we use it, actually.

1238
01:21:36,200 --> 01:21:37,800
Why isn't this calling get box?

1239
01:21:37,800 --> 01:21:38,700
I have no idea.

1240
01:21:51,200 --> 01:21:51,900
Oh wait.

1241
01:21:51,900 --> 01:21:53,700
But that's shouldn't be calling.

1242
01:21:53,700 --> 01:21:54,600
Get box.

1243
01:21:54,600 --> 01:21:55,000
Should it?

1244
01:21:55,000 --> 01:21:57,000
Because these are Source boxes.

1245
01:21:57,400 --> 01:22:03,600
So that should actually be looking in the in the actual box array.

1246
01:22:18,400 --> 01:22:19,300
Yeah, I am.

1247
01:22:19,500 --> 01:22:25,800
So actually what we want to do here is we want this to be completely.

1248
01:22:26,200 --> 01:22:26,600
Okay?

1249
01:22:27,400 --> 01:22:33,300
So what I'm trying to say here is I want this to pull these Source

1250
01:22:33,300 --> 01:22:37,900
boxes here, out of like some kind of source box thing, right?

1251
01:22:37,900 --> 01:22:41,200
Like in here we would say lighting box.

1252
01:22:42,600 --> 01:22:45,000
You know input boxes or something like this.

1253
01:22:45,800 --> 01:22:49,200
So then like when you pull something out of the source here you're

1254
01:22:49,200 --> 01:22:52,000
pulling it out of like input boxes.

1255
01:22:55,100 --> 01:22:55,800
Like that.

1256
01:22:58,800 --> 01:23:05,000
And everybody else is using the get box part of things, right?

1257
01:23:06,100 --> 01:23:08,100
Which I, we should probably remove at this point.

1258
01:23:09,000 --> 01:23:09,700
So,

1259
01:23:12,800 --> 01:23:13,400
This.

1260
01:23:15,900 --> 01:23:20,900
code would look more like that and then when we call the split box

1261
01:23:20,900 --> 01:23:21,500
thing,

1262
01:23:28,200 --> 01:23:30,600
We would pass in the original boxes.

1263
01:23:31,500 --> 01:23:35,200
So in here, where we do

1264
01:23:36,400 --> 01:23:38,600
ABB build spatial partition.

1265
01:23:39,000 --> 01:23:46,400
We would just pass like actual box count and or like input box count.

1266
01:23:48,500 --> 01:23:49,400
and,

1267
01:23:50,600 --> 01:23:51,600
Input boxes.

1268
01:23:57,700 --> 01:23:59,800
And in that way, we wouldn't really need.

1269
01:24:00,000 --> 01:24:03,200
Actual box count either, you know this would just be input box.

1270
01:24:03,200 --> 01:24:03,800
Count?

1271
01:24:18,800 --> 01:24:22,100
And I don't think we want the route lighting nonsense either.

1272
01:24:22,200 --> 01:24:25,000
Look we're not using that anymore so let's just get rid of that.

1273
01:24:27,700 --> 01:24:28,400
So,

1274
01:24:30,200 --> 01:24:33,100
Basically what I'm saying here is we pass in the input boxes and we

1275
01:24:33,100 --> 01:24:36,500
wouldn't store them anymore and then this a bee boxes thing would be

1276
01:24:36,500 --> 01:24:40,000
something we would actually allocate so much like this routine here.

1277
01:24:40,000 --> 01:24:43,700
Allocates we using a push or a call the spatial grid node set.

1278
01:24:44,000 --> 01:24:45,300
We would do the same thing here.

1279
01:24:45,300 --> 01:24:51,100
So we just say like yeah whatever man, the temporary NE now gets a

1280
01:24:51,100 --> 01:24:56,600
lighting like solution AABB boxes.

1281
01:24:57,600 --> 01:25:01,400
Equals push array, you know Max lightbox count.

1282
01:25:01,400 --> 01:25:02,100
Who cares?

1283
01:25:03,100 --> 01:25:04,000
Lighting box.

1284
01:25:06,900 --> 01:25:07,500
Right?

1285
01:25:07,900 --> 01:25:09,400
So we just put that on the temporary.

1286
01:25:09,400 --> 01:25:10,800
No, we don't really care.

1287
01:25:10,800 --> 01:25:13,600
Like, it doesn't matter, and it's not an issue.

1288
01:25:14,300 --> 01:25:15,100
We then go through.

1289
01:25:15,100 --> 01:25:19,300
And, you know, we use input boxes everywhere for when we're actually

1290
01:25:19,300 --> 01:25:20,800
reading it of the input stream.

1291
01:25:31,300 --> 01:25:32,800
And I think that's really it.

1292
01:25:32,900 --> 01:25:33,600
I mean, that's

1293
01:25:39,300 --> 01:25:40,600
so that's all I really wanted to do.

1294
01:25:40,600 --> 01:25:43,700
There was get rid of that kind of weirdness where it's getting stored,

1295
01:25:43,800 --> 01:25:46,800
like the input boxes are getting stored and we put them onto the same

1296
01:25:46,800 --> 01:25:48,300
array for some reason like that.

1297
01:25:48,300 --> 01:25:49,300
I just was like nah.

1298
01:25:51,200 --> 01:25:56,200
So anyway, if we do it that way then both of these routines can get

1299
01:25:56,200 --> 01:25:58,900
past the input box like set.

1300
01:26:00,700 --> 01:26:02,800
Which to me feels a lot more sane.

1301
01:26:03,900 --> 01:26:07,100
So then the set of actual box count, it's just input box, count.

1302
01:26:09,400 --> 01:26:11,900
And input boxes.

1303
01:26:22,900 --> 01:26:23,300
Yeah.

1304
01:26:23,700 --> 01:26:24,200
Okay.

1305
01:26:24,400 --> 01:26:30,700
And in this case for the child box stuff, this is actually going to

1306
01:26:30,700 --> 01:26:32,700
pull out of the ABB boxes.

1307
01:26:34,900 --> 01:26:39,400
The split box calls are just going to take the input boxes exactly as

1308
01:26:39,400 --> 01:26:40,300
they were before.

1309
01:26:41,600 --> 01:26:43,600
So nothing particularly special happening there.

1310
01:26:44,800 --> 01:26:46,700
And same thing with this.

1311
01:26:56,400 --> 01:26:59,800
I guess, in this case, this is a 16 bit.

1312
01:27:00,000 --> 01:27:00,900
Value.

1313
01:27:07,500 --> 01:27:07,800
Yeah.

1314
01:27:09,700 --> 01:27:13,700
So I think that's fine and the.

1315
01:27:13,800 --> 01:27:18,600
So now we kind of need to fix the debug dump data stuff but which is

1316
01:27:18,600 --> 01:27:19,200
totally fine.

1317
01:27:25,200 --> 01:27:29,600
And I guess I'll just Nerf that for now and then cuz I'm going to have

1318
01:27:29,600 --> 01:27:34,200
to decide what I actually want where I actually want that to be and

1319
01:27:34,200 --> 01:27:37,500
I'm not 100% sure result.

1320
01:27:37,500 --> 01:27:41,700
Light boxes is kind of irrelevant at this point so that's probably

1321
01:27:41,700 --> 01:27:43,400
just not going to happen anyway.

1322
01:27:45,300 --> 01:27:47,900
But you know, we'll see you when we actually get there.

1323
01:27:49,000 --> 01:27:52,500
So now we can just pass right when we get in here to the internal

1324
01:27:52,500 --> 01:27:56,300
lighting core, the internal lighting core would take the input box

1325
01:27:56,300 --> 01:28:00,700
count in the input boxes as actual parameters, which is a lot better

1326
01:28:00,700 --> 01:28:03,600
because that way, you know, you kind of know what you're actually

1327
01:28:03,600 --> 01:28:04,400
dealing with here.

1328
01:28:05,900 --> 01:28:15,200
So be input box, count lighting box and put boxes like so and I don't

1329
01:28:15,200 --> 01:28:18,100
know like we may just want to like say that that has to be a 16-bit

1330
01:28:18,100 --> 01:28:18,500
value because we

1331
01:28:18,700 --> 01:28:19,700
Don't use more than that.

1332
01:28:19,700 --> 01:28:22,400
I don't know whether we want to do that or not.

1333
01:28:26,100 --> 01:28:26,900
It's hard to say.

1334
01:28:29,500 --> 01:28:32,000
So when we actually call internal lighting Cornell, we would pass the

1335
01:28:32,000 --> 01:28:33,100
occluder count.

1336
01:28:35,700 --> 01:28:43,300
and the occluders like that and this would go away and

1337
01:28:45,500 --> 01:28:50,300
I guess I didn't remember what that actually takes.

1338
01:28:55,900 --> 01:28:57,400
What's the complaint?

1339
01:29:05,400 --> 01:29:07,400
Temper Inna came first.

1340
01:29:07,400 --> 01:29:08,300
That's why

1341
01:29:10,300 --> 01:29:11,300
It's temporary NE.

1342
01:29:11,300 --> 01:29:13,400
And then those two, there we go.

1343
01:29:15,300 --> 01:29:18,600
all right, so with that point,

1344
01:29:22,900 --> 01:29:24,200
yeah, I don't know.

1345
01:29:26,000 --> 01:29:28,000
This is all the H Prof stuff.

1346
01:29:29,000 --> 01:29:31,300
Which I don't really care about very much in here.

1347
01:29:32,900 --> 01:29:35,500
So I'm going to go ahead and Nerf that real quick.

1348
01:29:43,200 --> 01:29:43,700
There we go.

1349
01:29:44,100 --> 01:29:46,300
And now I guess.

1350
01:29:50,200 --> 01:29:52,500
I'm going to just verify that this stuff.

1351
01:29:55,300 --> 01:29:56,600
All runs properly.

1352
01:29:58,500 --> 01:29:59,300
And we can move on.

1353
01:29:59,500 --> 01:29:59,800
All right.

1354
01:30:05,200 --> 01:30:07,000
so in here, wait, are we

1355
01:30:08,400 --> 01:30:09,300
In debug mode.

1356
01:30:10,100 --> 01:30:10,400
No.

1357
01:30:14,500 --> 01:30:19,100
All right, so one problem we're going to have here is that when we do

1358
01:30:20,100 --> 01:30:23,400
we have to initialize these somewhere now.

1359
01:30:23,500 --> 01:30:31,800
So like I guess when I do a BB build spatial partition, I will also

1360
01:30:31,800 --> 01:30:34,200
need to kind of like set this value up.

1361
01:30:34,200 --> 01:30:37,600
So ABB box count has to be 0.

1362
01:30:38,100 --> 01:30:42,500
When we start there, I suppose it actually actually technically has to

1363
01:30:42,500 --> 01:30:43,200
be 1.

1364
01:30:43,800 --> 01:30:46,200
Because I think we leave a slot.

1365
01:30:47,600 --> 01:30:51,200
Like 0 is not an actual valid lighting box.

1366
01:30:54,100 --> 01:30:55,800
so, that's kind of a separate issue, but

1367
01:31:02,000 --> 01:31:03,200
So that seems fine.

1368
01:31:07,500 --> 01:31:10,200
And so now I think we're getting a little closer to what we actually

1369
01:31:10,200 --> 01:31:10,700
need here.

1370
01:31:10,800 --> 01:31:16,000
So then if we actually take a look at handmade lighting, so we could

1371
01:31:16,000 --> 01:31:21,300
now also ensure that people don't fuss with these if they're not using

1372
01:31:21,500 --> 01:31:24,900
the correctly corresponding version of the two.

1373
01:31:26,000 --> 01:31:32,000
So like, you know, if you go to

1374
01:31:40,800 --> 01:31:42,200
The central switch noun.

1375
01:31:42,400 --> 01:31:49,600
Well, we could move the central switch up to the top of the H file and

1376
01:31:49,600 --> 01:31:54,500
then we could use that to determine which set of space partitions.

1377
01:31:54,500 --> 01:31:55,700
You actually had.

1378
01:31:56,300 --> 01:32:02,100
So we would compile out the ones that you don't have if that makes

1379
01:32:02,100 --> 01:32:02,500
sense.

1380
01:32:05,200 --> 01:32:10,700
Which might also just make sure things are a little bit better in

1381
01:32:10,700 --> 01:32:12,200
terms of like consistency.

1382
01:32:22,000 --> 01:32:24,300
So now we should

1383
01:32:31,300 --> 01:32:33,100
we should be okay.

1384
01:32:33,900 --> 01:32:38,900
The only thing here is that the like split box stuff like all of that

1385
01:32:39,800 --> 01:32:41,200
and kalcker FC.

1386
01:32:42,500 --> 01:32:46,000
Yeah, like that stuff should also be in that if because these things

1387
01:32:46,000 --> 01:32:50,700
should not happen either if you're not compiling that in.

1388
01:32:50,700 --> 01:32:54,000
So if you're using lighting use grid, then great, but it and if

1389
01:32:54,000 --> 01:32:57,800
there's another one, then you also get these other routines if that

1390
01:32:57,800 --> 01:32:58,500
makes sense.

1391
01:32:58,900 --> 01:32:59,900
Where was the end of that?

1392
01:33:00,100 --> 01:33:01,600
Function.

1393
01:33:10,200 --> 01:33:10,700
Right there.

1394
01:33:13,700 --> 01:33:18,100
So now I think we're compiling all of the code one way or the other as

1395
01:33:18,100 --> 01:33:18,400
well.

1396
01:33:19,800 --> 01:33:21,200
And again, there's no reason for that.

1397
01:33:22,800 --> 01:33:26,300
I could just remove those, but I just wanted to verify that nobody was

1398
01:33:26,300 --> 01:33:28,700
using, like both like that.

1399
01:33:28,700 --> 01:33:32,800
Everything was clean one, you know if you do it one way or do it the

1400
01:33:32,800 --> 01:33:33,300
other way.

1401
01:33:33,600 --> 01:33:38,000
Nobody's, like looking at somebody else's data structure there, so

1402
01:33:38,000 --> 01:33:40,400
that I know that they're completely isolated.

1403
01:33:41,000 --> 01:33:47,500
So I think now we have a clean switch between the two of those systems

1404
01:33:48,000 --> 01:33:49,400
and, you know, whichever

1405
01:33:49,600 --> 01:33:54,300
You choose is is the one you cat and they build their own intermediate

1406
01:33:54,300 --> 01:33:58,100
data structures and they never share right either.

1407
01:33:59,700 --> 01:34:02,000
So I think that's good.

1408
01:34:07,400 --> 01:34:09,400
So we're getting closer.

1409
01:34:09,400 --> 01:34:11,300
So now that that's done.

1410
01:34:11,300 --> 01:34:15,000
I'm just trying to think if there's anything else that I want fixed up

1411
01:34:15,700 --> 01:34:19,300
and then like I said next weekend can just be just for debugging the

1412
01:34:19,300 --> 01:34:20,400
grid walk code.

1413
01:34:22,500 --> 01:34:27,700
And that should be it for that so that all looks fine.

1414
01:34:28,100 --> 01:34:33,600
I think like the debug line stuff should probably be in the temporary

1415
01:34:33,600 --> 01:34:34,900
Arena now.

1416
01:34:35,500 --> 01:34:37,300
So like these don't need to stick around.

1417
01:34:37,300 --> 01:34:42,600
So I think you know, if we take a look at where that's being used and

1418
01:34:42,600 --> 01:34:44,600
we just go debug lines, right?

1419
01:34:47,500 --> 01:34:49,900
Let's just see everyone who's using it.

1420
01:34:56,400 --> 01:34:57,900
I mean that's pretty straightforward.

1421
01:34:57,900 --> 01:35:00,100
So I think we should just be able to do this.

1422
01:35:01,900 --> 01:35:06,500
And then we can allocate the amount of debug lines that we actually

1423
01:35:06,500 --> 01:35:07,300
want.

1424
01:35:09,000 --> 01:35:12,400
So, maybe at the top of things we do that.

1425
01:35:14,200 --> 01:35:16,900
So there is an interesting thing we could do there, which is to say,

1426
01:35:16,900 --> 01:35:18,100
like we could do that.

1427
01:35:18,200 --> 01:35:22,900
Just only if we don't have any of them.

1428
01:35:24,100 --> 01:35:29,400
So, like we could do something where we said, like when we do push

1429
01:35:29,400 --> 01:35:29,900
lighting,

1430
01:35:30,400 --> 01:35:31,600
Render values.

1431
01:35:33,400 --> 01:35:36,800
We push all the line segments out here and then we say, like, debug

1432
01:35:36,800 --> 01:35:44,100
line count 0 and after we've done that, we know sort of the temporary

1433
01:35:44,100 --> 01:35:45,400
memory would get freed.

1434
01:35:45,400 --> 01:35:50,400
So in a sense, we probably have to if we were going to do that,

1435
01:35:53,400 --> 01:35:59,300
yes, I guess I guess the reason not to do that is just that we don't

1436
01:35:59,300 --> 01:35:59,800
actually have

1437
01:36:00,000 --> 01:36:07,400
The ability to persist those across, you know, it's like ambiguous.

1438
01:36:07,400 --> 01:36:09,500
How long they should last at that point?

1439
01:36:11,200 --> 01:36:13,300
We could just put them in the table.

1440
01:36:15,000 --> 01:36:15,600
Memory.

1441
01:36:18,100 --> 01:36:19,300
And maybe we'll do that.

1442
01:36:19,600 --> 01:36:21,700
So maybe what I'll do is I'll say, all right.

1443
01:36:24,000 --> 01:36:24,700
Solution.

1444
01:36:24,700 --> 01:36:30,600
Debug lines, equals push array debug line.

1445
01:36:38,900 --> 01:36:44,000
And I don't know how it knows what the max debug line count is.

1446
01:36:48,900 --> 01:36:51,300
It was a rake out here, which is not what I want.

1447
01:36:51,300 --> 01:36:53,800
So I probably want Max debug lines, right?

1448
01:36:53,900 --> 01:36:55,300
And it would it would do that.

1449
01:36:56,800 --> 01:36:58,400
I think that's probably fine.

1450
01:36:58,700 --> 01:37:00,000
So we just say Max.

1451
01:37:02,900 --> 01:37:04,400
Debug line count.

1452
01:37:10,100 --> 01:37:12,300
Equals however many we want the maximum to be.

1453
01:37:16,200 --> 01:37:19,600
And then we just need that value to exist.

1454
01:37:25,300 --> 01:37:27,600
I think that should do it.

1455
01:37:28,900 --> 01:37:33,600
Oops, forgot to tell you that solution, table memory.

1456
01:37:38,300 --> 01:37:38,900
All right.

1457
01:37:41,600 --> 01:37:43,500
So, I think now we're pretty good.

1458
01:37:45,000 --> 01:37:50,400
That feels nice and it just feels a lot more manageable now because

1459
01:37:50,400 --> 01:37:52,600
we've got those pretty buttoned-up.

1460
01:37:53,300 --> 01:37:55,200
Nothing really squirrelly happening.

1461
01:37:55,200 --> 01:37:59,200
Now, everything is pretty, you know, pretty easy to take a look at

1462
01:37:59,200 --> 01:37:59,500
now.

1463
01:38:00,600 --> 01:38:03,900
so I guess the only other thing I would say is internal lighting core

1464
01:38:03,900 --> 01:38:09,900
is now sort of a little bit on the table, so

1465
01:38:11,700 --> 01:38:16,000
I would be interested to know whether I still want that to be its own

1466
01:38:16,000 --> 01:38:18,400
function or weather update.

1467
01:38:18,400 --> 01:38:20,200
Lighting should just have the whole thing in it.

1468
01:38:20,900 --> 01:38:25,800
And mostly what that's about is just determining whether or not.

1469
01:38:26,300 --> 01:38:30,800
I think it would be easier to have it be callable from the

1470
01:38:33,300 --> 01:38:34,700
from the external code.

1471
01:38:44,300 --> 01:38:45,800
And I really am not sure.

1472
01:39:06,100 --> 01:39:07,000
Yeah, I'm not sure.

1473
01:39:07,700 --> 01:39:08,700
I don't know about that.

1474
01:39:09,300 --> 01:39:14,200
That's a that's a tough one and I guess I would say I'm not sure.

1475
01:39:14,600 --> 01:39:19,800
Yeah I'm not sure what we want to do there, you know, I can

1476
01:39:22,800 --> 01:39:24,900
I can roll that in but the same time.

1477
01:39:24,900 --> 01:39:28,300
Like, I'm not sure how we would necessarily compute the stats.

1478
01:39:28,300 --> 01:39:32,500
We could use the debug macros to do that if we wanted to.

1479
01:39:34,800 --> 01:39:43,600
But look if we take a look at H light Prof here, and in terms of how

1480
01:39:43,600 --> 01:39:45,200
we do our pound defines,

1481
01:39:49,200 --> 01:39:52,800
I'm just, I'm just not sure, you know, we turn off handmade internal

1482
01:39:52,800 --> 01:39:54,200
and handmade slow there, right?

1483
01:39:55,600 --> 01:39:56,900
And that's to get rid of those.

1484
01:39:56,900 --> 01:40:01,300
Those pound defines and we could just pound to find them back in and

1485
01:40:01,300 --> 01:40:07,700
use the debug data itself in that case the debug output itself, and

1486
01:40:07,700 --> 01:40:10,300
maybe that's the best option.

1487
01:40:11,500 --> 01:40:15,300
I'm really not sure if we don't, we're going to have to

1488
01:40:16,300 --> 01:40:20,500
call this function right with with the data that we get here.

1489
01:40:21,000 --> 01:40:23,300
That's not so tough though.

1490
01:40:25,400 --> 01:40:26,800
if you look at what's in there,

1491
01:40:28,200 --> 01:40:29,800
Really, you just have the similar origin, P.

1492
01:40:29,800 --> 01:40:34,500
The origin P, the input boxes and the atlases and we could just dump

1493
01:40:34,500 --> 01:40:35,000
those.

1494
01:40:35,900 --> 01:40:41,200
I don't actually know what the heck it needs world for it's probably

1495
01:40:41,200 --> 01:40:42,400
just for alignment.

1496
01:40:42,800 --> 01:40:47,600
Yes, you can, you can see here, like, it needs like the, the

1497
01:40:47,600 --> 01:40:52,700
operations on the world struct and that's kind of a little

1498
01:40:52,900 --> 01:40:54,100
unfortunate.

1499
01:40:56,300 --> 01:41:00,800
Because it would be nice if we didn't depend on the world struct and

1500
01:41:00,800 --> 01:41:03,500
you can see that.

1501
01:41:06,400 --> 01:41:07,400
The.

1502
01:41:09,800 --> 01:41:11,600
Like the subtract call.

1503
01:41:19,900 --> 01:41:21,000
actually, let's

1504
01:41:22,800 --> 01:41:24,200
take the nonstop on this one.

1505
01:41:24,200 --> 01:41:24,600
Yeah.

1506
01:41:27,700 --> 01:41:32,000
So if you look at like the subtract call, like the only reason these

1507
01:41:32,000 --> 01:41:37,600
things need the world is because of the chunk dimension in meters and

1508
01:41:37,600 --> 01:41:41,600
I'm assuming like are in the same chunk is the same thing, too.

1509
01:41:47,800 --> 01:41:51,500
Actually, you don't even it's literally just for an assertion in that

1510
01:41:51,500 --> 01:41:52,500
one, right?

1511
01:41:55,500 --> 01:41:57,700
so I kind of feel like

1512
01:41:59,300 --> 01:41:59,700
Weep.

1513
01:42:00,200 --> 01:42:04,100
Probably just want versions of these that don't need that.

1514
01:42:04,100 --> 01:42:07,700
And then instead of passing the world in we would just pass the chunk

1515
01:42:07,700 --> 01:42:10,500
dimension in meters at that point.

1516
01:42:10,500 --> 01:42:15,000
It becomes possible to create a flat struct and you can call the whole

1517
01:42:15,000 --> 01:42:15,600
thing.

1518
01:42:16,600 --> 01:42:21,800
Exactly as is on in and out that seems way better.

1519
01:42:21,800 --> 01:42:26,300
So like I think the thing that I would then want to do is the

1520
01:42:26,300 --> 01:42:29,800
following I would want to make a struct here.

1521
01:42:30,000 --> 01:42:30,000
R.

1522
01:42:30,000 --> 01:42:32,400
That's like, lighting update.

1523
01:42:33,900 --> 01:42:37,500
Params or something, you know what I mean?

1524
01:42:38,600 --> 01:42:42,400
And this would take the chunk dim in meters.

1525
01:42:42,600 --> 01:42:49,600
It would take these two, sausage gentleman here and

1526
01:42:54,400 --> 01:42:57,800
I guess that fundamental unit.

1527
01:43:00,900 --> 01:43:04,300
And that way you would say like here's the parameters and then here's

1528
01:43:04,300 --> 01:43:05,300
the pointers.

1529
01:43:05,400 --> 01:43:09,900
And when you want to snap a debug output version, right?

1530
01:43:11,100 --> 01:43:13,700
You just you just use the parameters now,

1531
01:43:15,900 --> 01:43:19,900
I think that means I also probably want to go ahead and pull the

1532
01:43:20,100 --> 01:43:23,700
random series I'm guessing as well.

1533
01:43:24,200 --> 01:43:28,700
So like I guess, I don't know, but I'd like to take a look at how the

1534
01:43:28,700 --> 01:43:31,000
entropy flows through it and it would be nice.

1535
01:43:31,000 --> 01:43:35,600
If you basically said here, like, look the random series comes in here

1536
01:43:35,600 --> 01:43:36,200
as well.

1537
01:43:36,800 --> 01:43:40,800
So that that's also like, repeatable to the extent that you want it to

1538
01:43:40,800 --> 01:43:41,000
be.

1539
01:43:41,000 --> 01:43:44,800
So if you pass the same parameters, you get the same result and there.

1540
01:43:45,000 --> 01:43:46,300
Like a stored state.

1541
01:43:48,300 --> 01:43:51,000
So look, if you look at the lighting solution,

1542
01:43:55,000 --> 01:43:59,500
and you look at what's in here, you know, at this point I guess what

1543
01:43:59,500 --> 01:44:00,900
we could do is just say

1544
01:44:03,300 --> 01:44:06,400
Maybe this is what that is.

1545
01:44:20,900 --> 01:44:22,100
So yeah.

1546
01:44:22,100 --> 01:44:26,600
Like I wonder if maybe the best thing to do here would be to say look

1547
01:44:26,600 --> 01:44:29,500
all of this stuff is regenerated.

1548
01:44:30,300 --> 01:44:35,100
The random series isn't so it probably should come out and be in a

1549
01:44:35,100 --> 01:44:36,000
separate thing.

1550
01:44:38,900 --> 01:44:45,800
The same with this stuff to write like I feel like we could make one

1551
01:44:45,800 --> 01:44:49,600
more transformation to this code and I guess I don't want to do it in

1552
01:44:49,600 --> 01:44:50,200
five minutes.

1553
01:44:50,400 --> 01:44:53,300
Like I feel like we can make one more transformation to this code.

1554
01:44:53,700 --> 01:44:59,200
We're basically like at least from this point from the update lighting

1555
01:44:59,200 --> 01:44:59,800
call.

1556
01:45:00,900 --> 01:45:05,300
It's functional to the outside like so you pass in all the state and

1557
01:45:05,300 --> 01:45:10,700
it does the work and updates the things without having any stored

1558
01:45:10,700 --> 01:45:13,500
state that you didn't give it then, right?

1559
01:45:13,500 --> 01:45:17,500
So in other words, the lighting solution thing would kind of disappear

1560
01:45:17,500 --> 01:45:19,600
and there would just be two things.

1561
01:45:19,700 --> 01:45:21,400
What is the stored State?

1562
01:45:21,400 --> 01:45:22,600
You want it to operate on?

1563
01:45:22,600 --> 01:45:24,900
And what is the new state you're passing in?

1564
01:45:25,300 --> 01:45:27,700
And those two things are both like savable.

1565
01:45:27,700 --> 01:45:30,400
So this and the only reason I'm saying this is so that we can

1566
01:45:30,700 --> 01:45:34,200
Due to a nicely repeatable test setup, which we know we need.

1567
01:45:35,700 --> 01:45:38,600
So, I might go to Q&A now and just put it to do in here that says

1568
01:45:38,600 --> 01:45:45,600
like, you know, split the lighting State into pieces so we can have a

1569
01:45:45,600 --> 01:45:52,700
more functional esque way of calling it where the two halves

1570
01:45:53,100 --> 01:45:59,500
specified, the persistent and new state, so we can save them both

1571
01:45:59,500 --> 01:46:02,000
easily if we want.

1572
01:46:02,900 --> 01:46:07,200
And basically, what I mean by that is like, right now, this lighting

1573
01:46:07,200 --> 01:46:09,700
solution structure is doing double duty.

1574
01:46:10,500 --> 01:46:14,800
It is both the thing that we use to avoid, having to pass eight

1575
01:46:14,800 --> 01:46:19,000
thousand things to everybody in the actual lighting code because that

1576
01:46:19,000 --> 01:46:22,500
gets extremely slow, you want to be able to pass one pointer and know,

1577
01:46:22,500 --> 01:46:26,400
you can access all this stuff for efficiency, not to mention typing.

1578
01:46:28,000 --> 01:46:31,800
But it's also the thing that carries the persistent storage.

1579
01:46:31,900 --> 01:46:35,300
So like this diffuse weight map, and the sampling spheres and all this

1580
01:46:35,300 --> 01:46:35,900
crap.

1581
01:46:36,300 --> 01:46:37,300
That's in there too.

1582
01:46:37,800 --> 01:46:42,000
It would be nice to split those things out so it was clear like here's

1583
01:46:42,000 --> 01:46:45,000
the stuff that's like cashed and stored over time.

1584
01:46:45,600 --> 01:46:50,200
Here's the stuff that's like regenerated automatically and it's really

1585
01:46:50,200 --> 01:46:51,100
just for efficiency.

1586
01:46:51,700 --> 01:46:52,200
So like

1587
01:46:53,500 --> 01:46:55,300
You know, just to be specific.

1588
01:47:09,200 --> 01:47:10,200
It looks like this.

1589
01:47:44,400 --> 01:47:51,100
so, you can see right from and

1590
01:47:53,900 --> 01:47:58,600
You know, you can see there's four separate types of information that

1591
01:47:58,600 --> 01:47:59,600
are in here, right?

1592
01:48:00,100 --> 01:48:03,300
And each one of those types has a different behavior.

1593
01:48:03,300 --> 01:48:10,100
And so what I'm saying is look, we should probably, you know, figure

1594
01:48:10,100 --> 01:48:14,900
out the most effective way to split those into pieces so that it's

1595
01:48:14,900 --> 01:48:18,100
clear what each one does and they're not all mixed together, right?

1596
01:48:18,100 --> 01:48:21,700
Because I don't think they need to be for any particular reason and it

1597
01:48:21,700 --> 01:48:25,100
would just be easier to work with easier to understand and easier to

1598
01:48:25,100 --> 01:48:29,000
save the state if we had those clear pieces, right?

1599
01:48:30,900 --> 01:48:33,800
Now that we're starting to get a very clear picture of how this whole

1600
01:48:33,800 --> 01:48:36,900
thing works, we can start to make those changes accurately.

1601
01:48:39,000 --> 01:48:39,500
Right.

1602
01:49:18,300 --> 01:49:23,500
Is Max nude index supposed to be in bounds or one pass the bound?

1603
01:49:23,500 --> 01:49:25,100
It supposed to be in bounds

1604
01:49:27,900 --> 01:49:30,400
I'm not sure I know exactly what you're talking about, but I'm

1605
01:49:30,400 --> 01:49:34,800
assuming you mean inside the grid bills page partition routine.

1606
01:49:34,800 --> 01:49:37,000
So I'm assuming you mean this

1607
01:49:39,300 --> 01:49:40,700
It's supposed to be in bounds.

1608
01:50:10,000 --> 01:50:12,600
Just letting switches were direct lighting like the sun and moon.

1609
01:50:13,300 --> 01:50:19,800
So at the moment, there is a Moonlight and it's just assumed to kind

1610
01:50:19,800 --> 01:50:21,700
of be, it's more like a skylight.

1611
01:50:22,100 --> 01:50:25,500
So it's just generally a dome where it's brighter.

1612
01:50:25,500 --> 01:50:29,600
If you are aligned with the direction that the Moon is in and dimmer

1613
01:50:29,600 --> 01:50:30,800
as you get further out.

1614
01:50:32,400 --> 01:50:34,200
I don't know that that's going to stay in there.

1615
01:50:34,200 --> 01:50:37,400
That way, we may change that we probably will.

1616
01:50:39,200 --> 01:50:43,500
So, you know, that that was kind of just a thing that was in there

1617
01:50:43,500 --> 01:50:44,400
temporarily.

1618
01:50:44,400 --> 01:50:46,900
So that'll that'll probably get modified a little bit.

1619
01:50:47,700 --> 01:50:55,300
But obviously, we do have, we do want Moonlight in the game, so there

1620
01:50:55,300 --> 01:50:58,100
will be some way that Moonlight applies.

1621
01:50:58,200 --> 01:50:59,800
I just don't know exactly.

1622
01:51:00,000 --> 01:51:06,000
We'll end up wanting to that to be encoded because things that are

1623
01:51:06,000 --> 01:51:06,500
underground.

1624
01:51:06,500 --> 01:51:08,100
Shouldn't have Moonlight applied.

1625
01:51:08,100 --> 01:51:10,600
So doing it the way we're doing it now is probably not how I would do

1626
01:51:10,600 --> 01:51:11,000
it.

1627
01:51:15,400 --> 01:51:17,600
Are we doing this on the CPU purely for educational reasons?

1628
01:51:17,600 --> 01:51:18,400
Or is there something else?

1629
01:51:21,900 --> 01:51:26,600
I guess the reason is because at least at the moment,

1630
01:51:27,700 --> 01:51:32,800
we really don't want to require really high-end graphics cards.

1631
01:51:33,500 --> 01:51:41,000
So, you know, a core i7 from a few years ago and a graphics card from

1632
01:51:41,000 --> 01:51:43,200
a few years ago, will run the game just fine.

1633
01:51:45,700 --> 01:51:49,500
If we try to do like an RT X version, like that really limits.

1634
01:51:49,500 --> 01:51:52,900
The number of platforms, you can actually run this thing on, right?

1635
01:51:52,900 --> 01:51:57,600
So Ray tracing on the graphics card is not super fantastic.

1636
01:51:58,800 --> 01:52:02,800
If you are also requiring, the graphics card to do all this other

1637
01:52:02,800 --> 01:52:04,300
stuff, which we do right.

1638
01:52:04,300 --> 01:52:08,700
Like, we actually used depth feeling to make nice compositing.

1639
01:52:08,700 --> 01:52:09,800
And we use,

1640
01:52:11,900 --> 01:52:14,900
Msaa to have kind of nice, smooth edges and stuff.

1641
01:52:14,900 --> 01:52:21,100
So you know, we were using the graphics card to do stuff and we can't

1642
01:52:21,100 --> 01:52:23,200
just pile things on the graphics card forever.

1643
01:52:23,700 --> 01:52:27,400
So doing it on the CPU, seems like a good thing because it's nice to

1644
01:52:27,400 --> 01:52:32,300
have that option and then eventually if we want to move that to a GPU

1645
01:52:32,300 --> 01:52:37,600
computation, well, we would want it to be on the CPU anyway because

1646
01:52:37,700 --> 01:52:41,300
you really don't want to debug your lighting code on the GPU.

1647
01:52:41,300 --> 01:52:41,500
Like

1648
01:52:41,700 --> 01:52:43,300
Oh my God, right?

1649
01:52:46,600 --> 01:52:51,100
so, I guess what I would say is that's you know,

1650
01:52:54,900 --> 01:52:58,100
I think no matter what you plan on in shipping, you should probably

1651
01:52:58,100 --> 01:53:01,200
have it working on the CPU side first, because it's the only way

1652
01:53:01,200 --> 01:53:05,200
you're going to probably debug it very well because gpus just are very

1653
01:53:05,200 --> 01:53:06,000
hard to debug.

1654
01:53:06,100 --> 01:53:09,100
They don't even really let you step through code, most of the time

1655
01:53:10,600 --> 01:53:13,100
certain cards did and then now they don't, I don't know, it's pretty

1656
01:53:13,100 --> 01:53:13,800
weird but

1657
01:53:23,100 --> 01:53:23,700
Can I come with you?

1658
01:53:23,700 --> 01:53:25,200
If I demo, I already did.

1659
01:53:26,800 --> 01:53:28,500
We can put mirrors in every level.

1660
01:53:28,500 --> 01:53:31,600
Like, Labyrinth mirrors.

1661
01:53:31,600 --> 01:53:32,400
Wouldn't work?

1662
01:53:32,400 --> 01:53:36,400
Particularly well in this system because we don't have any way to

1663
01:53:36,400 --> 01:53:37,600
render mirrors.

1664
01:53:37,900 --> 01:53:42,500
We can bounce the light off of them, but the actual renderer that

1665
01:53:42,500 --> 01:53:48,500
renders like Sprites and stuff wouldn't actually work, right?

1666
01:53:48,500 --> 01:53:52,800
Like we don't have the renderer doesn't try to do that at all.

1667
01:53:58,100 --> 01:53:59,800
So we would need something in the act.

1668
01:54:00,000 --> 01:54:04,300
All we would need to put like a ray Tracer in the actual pixel Shader

1669
01:54:04,300 --> 01:54:09,800
to do like the rendering of the mirrors as opposed to just allowing

1670
01:54:09,800 --> 01:54:12,400
the mirrors to bounce light around for the lighting solution, which

1671
01:54:12,700 --> 01:54:13,800
that would be trivial.

1672
01:54:15,900 --> 01:54:22,600
It would just be that you wouldn't, you would add spikes to the to the

1673
01:54:23,200 --> 01:54:26,400
spec maps for those things because they would bounce directly, rather

1674
01:54:26,400 --> 01:54:27,700
than diffusing, right?

1675
01:54:34,700 --> 01:54:37,200
Can you go over the AVX scatter gather intrinsics?

1676
01:54:37,200 --> 01:54:38,400
I've never used them.

1677
01:54:39,200 --> 01:54:43,200
The last time I saw the AVX scatter gather intrinsics, they were still

1678
01:54:43,200 --> 01:54:49,200
larabee intrinsics or I should say actual code like actual as mmm.

1679
01:54:51,500 --> 01:54:54,000
So I don't actually know what they put in there.

1680
01:54:57,100 --> 01:54:58,700
Presumably, they look similar.

1681
01:55:00,400 --> 01:55:01,300
But I have no idea.

1682
01:55:10,000 --> 01:55:15,500
I actually didn't, if you'd asked me, like I said, I haven't looked if

1683
01:55:15,500 --> 01:55:19,300
you'd asked me, I didn't actually know that AV X itself had scatter

1684
01:55:19,300 --> 01:55:19,800
gather.

1685
01:55:22,100 --> 01:55:24,200
As opposed to avx-512.

1686
01:55:27,900 --> 01:55:29,100
But maybe it does.

1687
01:55:30,600 --> 01:55:31,000
No.

1688
01:55:31,000 --> 01:55:32,200
So I'm right about that.

1689
01:55:32,200 --> 01:55:34,600
So so there really isn't an AV X gather gather.

1690
01:55:34,600 --> 01:55:37,500
I don't think unless I'm missing it's only in the avx-512.

1691
01:55:37,500 --> 01:55:39,700
Like it's the Larrabee instructions that the scatter gather

1692
01:55:42,400 --> 01:55:45,200
But, you know, I'm guessing that, you know, if you just read the

1693
01:55:45,200 --> 01:55:47,500
thing, it should be pretty clear like what it does right?

1694
01:55:47,500 --> 01:55:48,400
I would imagine

1695
01:55:53,800 --> 01:55:58,000
Yeah, I mean, they're just so these, I don't know if you remember, but

1696
01:55:58,000 --> 01:56:02,000
like I've lamented many times that like the SEC and AVX instructions

1697
01:56:02,000 --> 01:56:06,300
sets, not a big fight all but the first two instruction sets, they

1698
01:56:06,300 --> 01:56:10,300
didn't have a way to do memory fetching for wide 8.

1699
01:56:10,300 --> 01:56:14,800
Wide, 16 wide, you couldn't do that, right?

1700
01:56:15,800 --> 01:56:18,500
So what you typically end up with is you'll do something like you'll

1701
01:56:18,500 --> 01:56:22,900
do a computation and you'll say, where do I need to fact

1702
01:56:23,100 --> 01:56:27,600
My textiles from or whatever and you're doing this for eight at a time

1703
01:56:28,000 --> 01:56:31,200
and all of a sudden you have to downshift into scalar like you've seen

1704
01:56:31,200 --> 01:56:36,000
this literally in the lighting code just now in compute voxel,

1705
01:56:36,000 --> 01:56:37,100
irradiance at.

1706
01:56:37,500 --> 01:56:43,100
So this function is almost always in a situation with the

1707
01:56:44,900 --> 01:56:47,800
when we were trying to do the a beer a Caster.

1708
01:56:48,400 --> 01:56:54,500
So in the ABB re Caster, what you see is like it comes down here and

1709
01:56:54,500 --> 01:56:59,700
it has to downshift to scalar to do the voxel irradiance computations

1710
01:56:59,700 --> 01:56:59,800
right.

1711
01:57:01,100 --> 01:57:04,000
And this is just a huge pain in the butt because what you'd rather do

1712
01:57:04,000 --> 01:57:06,700
is just keep it for wind and do them for y.

1713
01:57:06,700 --> 01:57:08,300
Now, in the grid, Ray Tracer, we don't care.

1714
01:57:08,300 --> 01:57:11,000
We can choose to bundle up to 4, but we can keep it scalar.

1715
01:57:11,400 --> 01:57:14,100
It's one of the nice things about it, for ssc's, it just kind of works

1716
01:57:14,100 --> 01:57:16,900
if you do the grid raycast way, but separate issue.

1717
01:57:18,500 --> 01:57:22,300
So, anyway, inside the compute voxel Radiance call.

1718
01:57:22,300 --> 01:57:26,700
We would like to be using the get tile clamped thing wide, but we

1719
01:57:26,700 --> 01:57:31,700
can't, because you can only Access Memory off of general purpose

1720
01:57:31,700 --> 01:57:32,500
registers.

1721
01:57:33,400 --> 01:57:37,100
So what the scatter gather intrinsics do finally, is they just let you

1722
01:57:37,100 --> 01:57:43,800
say, look, give me an address, but then you can pass me a vector

1723
01:57:43,800 --> 01:57:45,300
register, right?

1724
01:57:46,300 --> 01:57:48,500
That will actually have in it.

1725
01:57:49,800 --> 01:57:55,000
The index is that I should then go fetch for each individual Lane,

1726
01:57:55,200 --> 01:57:55,800
right?

1727
01:57:56,600 --> 01:58:01,500
And so scatter, and gather are just ways of writing or reading two

1728
01:58:01,600 --> 01:58:08,500
different memory locations using indexes per Lane rather than having

1729
01:58:08,500 --> 01:58:09,800
to downshift a scalar.

1730
01:58:09,900 --> 01:58:11,000
But that's it.

1731
01:58:11,700 --> 01:58:12,900
That's all they do.

1732
01:58:13,400 --> 01:58:16,000
Now, they're awesome.

1733
01:58:16,700 --> 01:58:19,400
In that, you really want instructions that do this.

1734
01:58:20,100 --> 01:58:24,500
So when I say that's it, I don't mean like, it's the unimportant, I

1735
01:58:24,500 --> 01:58:29,000
just mean it's very simple but it's really really great.

1736
01:58:29,000 --> 01:58:32,400
Because once you have these, if they are actually implemented fast in

1737
01:58:32,400 --> 01:58:35,400
the chip which at the moment, I don't actually know if they are but

1738
01:58:35,400 --> 01:58:38,700
like when they get them high performance, eventually hopefully, maybe

1739
01:58:38,700 --> 01:58:39,400
right.

1740
01:58:39,500 --> 01:58:41,700
And maybe they already are and I'm like, I said, I've not tried them

1741
01:58:41,800 --> 01:58:43,900
because I don't even have a chip that can do this.

1742
01:58:43,900 --> 01:58:45,100
I don't think maybe,

1743
01:58:46,900 --> 01:58:47,500
Maybe I do.

1744
01:58:47,500 --> 01:58:51,500
I don't know if my I have a core I9 that may have scatter gather.

1745
01:58:51,500 --> 01:58:52,300
It may not.

1746
01:58:52,600 --> 01:58:53,000
I don't know.

1747
01:58:53,000 --> 01:58:55,700
It has it has avx-512 F.

1748
01:58:55,700 --> 01:59:00,000
I think, but probably not any of the other avx-512 things it doesn't

1749
01:59:00,000 --> 01:59:00,300
matter.

1750
01:59:00,600 --> 01:59:06,300
The point is, if they get this working, well, it's great because now

1751
01:59:06,300 --> 01:59:08,100
you can keep everything wide.

1752
01:59:08,100 --> 01:59:14,300
So you don't have to worry anymore about the problems that you have

1753
01:59:14,300 --> 01:59:16,500
when you've done all your computations and nice scalar.

1754
01:59:16,700 --> 01:59:20,200
Form a nice Lane form and having to downshift autoscaler.

1755
01:59:20,300 --> 01:59:21,000
Does that make sense?

1756
01:59:21,800 --> 01:59:23,700
But there's really not much more to it than that.

1757
01:59:23,700 --> 01:59:25,200
It's just, that's all it is.

1758
01:59:38,000 --> 01:59:39,800
Do you have any idea how the gameplay will look like?

1759
01:59:39,800 --> 01:59:41,800
Are we way to finish the engine for getting to it?

1760
01:59:42,100 --> 01:59:42,400
Yes.

1761
01:59:42,400 --> 01:59:44,500
So the gameplay stuff is really not my thing.

1762
01:59:44,500 --> 01:59:51,100
So I would say that like, we just do engine programming here, like,

1763
01:59:51,100 --> 01:59:53,900
gameplay stuff is not really going to be interesting.

1764
01:59:54,500 --> 01:59:58,400
So, I mean, when we get to gameplay that means we're basically done

1765
01:59:59,500 --> 01:59:59,800
and that's

1766
02:00:00,000 --> 02:00:02,000
Really, like I said, it's really just not my thing.

1767
02:00:02,000 --> 02:00:03,700
I don't I'd not a game designer.

1768
02:00:10,300 --> 02:00:12,200
On the RSI front, I would say two things.

1769
02:00:12,200 --> 02:00:17,300
One, try to optimize your editing configuration to not use modifier

1770
02:00:17,300 --> 02:00:17,900
keys at all.

1771
02:00:18,100 --> 02:00:25,300
So get rid of control, get rid of alt as much as you can and start

1772
02:00:25,300 --> 02:00:33,900
doing a variable like a diverse hand exercise sport.

1773
02:00:33,900 --> 02:00:37,000
So rock climbing, was hugely helpful to me.

1774
02:00:38,500 --> 02:00:41,200
The only thing I would say is don't use gamepads gamepads.

1775
02:00:41,200 --> 02:00:44,700
Also seem to be bad on your hands in terms of cramping and tendonitis

1776
02:00:44,700 --> 02:00:48,200
and stuff, so maybe just like stop playing console games.

1777
02:00:49,600 --> 02:00:52,500
Those are the only three things that I know, I suspect it's different

1778
02:00:52,500 --> 02:00:53,600
for, every one's Anatomy.

1779
02:00:53,600 --> 02:00:56,100
So those are things that have had helpful to me.

1780
02:00:56,800 --> 02:00:59,600
If your Anatomy is similar to mind that probably helped you if it's

1781
02:00:59,600 --> 02:01:00,600
very different.

1782
02:01:01,500 --> 02:01:02,300
Probably won't.

1783
02:01:02,300 --> 02:01:02,800
Right?

1784
02:01:24,300 --> 02:01:27,600
Probably covered in some other day, but what's the best update rate to

1785
02:01:27,600 --> 02:01:28,600
choose for a game?

1786
02:01:28,600 --> 02:01:31,700
John says it's good to have it high so it looks good in high update

1787
02:01:31,700 --> 02:01:36,800
screens but 120fps isn't a multiple of 144 FPS.

1788
02:01:37,300 --> 02:01:39,000
So what do you recommend?

1789
02:01:48,100 --> 02:01:50,600
So, that's a good question.

1790
02:01:58,700 --> 02:02:04,700
So I guess what I would say is like for my purposes most if I want to

1791
02:02:04,700 --> 02:02:08,200
make is usually like more of a 24 frames a second kind of thing.

1792
02:02:09,000 --> 02:02:12,000
Like I care more about cinematic stuff than I care about action e

1793
02:02:12,000 --> 02:02:12,500
stuff.

1794
02:02:12,500 --> 02:02:16,300
Most of the time handmade here is kind of a different sort of game

1795
02:02:16,300 --> 02:02:17,600
than I would normally make.

1796
02:02:21,600 --> 02:02:24,500
So, to my mind, I be like I'll 24 frames a second, sounds good.

1797
02:02:24,500 --> 02:02:35,000
And we just, we just to 120 or 140 for based on that, but I guess I'm

1798
02:02:35,000 --> 02:02:37,500
not sure what you would do.

1799
02:02:37,500 --> 02:02:42,400
If you want 120 frames, I can and 144 frames a second and you want to

1800
02:02:42,400 --> 02:02:43,600
have a fixed frame rate.

1801
02:02:43,600 --> 02:02:46,500
I would say, maybe what I would do

1802
02:02:50,100 --> 02:02:50,500
Ugh.

1803
02:02:50,500 --> 02:02:54,300
So I would say 144 frames a second sounds like it kind of sucks.

1804
02:03:00,400 --> 02:03:04,800
I would maybe tell people who make 144 hurts monitors to stop because

1805
02:03:04,800 --> 02:03:05,700
that sucks.

1806
02:03:06,300 --> 02:03:09,800
It doesn't even evenly divided and a sample rate.

1807
02:03:11,800 --> 02:03:17,300
So like this is good, this is very good.

1808
02:03:17,600 --> 02:03:22,400
She I'm saying, it's like twenty four fifty sixty one twenty Thirty

1809
02:03:22,700 --> 02:03:23,300
right?

1810
02:03:23,700 --> 02:03:28,700
Like 4800 samples per second is like perfect for all monitors except

1811
02:03:28,700 --> 02:03:29,800
for 144.

1812
02:03:29,800 --> 02:03:31,700
So I would basically say like

1813
02:03:33,900 --> 02:03:40,200
set your sample rate to 240 as your core sample rate and tell people

1814
02:03:40,200 --> 02:03:42,700
with 144 Hertz, monitors to stop

1815
02:03:44,900 --> 02:03:48,200
144 is a bad effing idea, is what I would say.

1816
02:04:20,500 --> 02:04:24,900
As far as game design service current, it's not really like whether I

1817
02:04:24,900 --> 02:04:26,200
want to do it or not, it's more.

1818
02:04:26,200 --> 02:04:29,200
Just like I'm not going to teach game design like this.

1819
02:04:29,200 --> 02:04:31,900
Stream is supposed to be like me explaining, what's going on?

1820
02:04:32,400 --> 02:04:37,400
But that's just like not like I don't have anything to explain about

1821
02:04:37,400 --> 02:04:40,800
game design because I'm not a game designer, you know,

1822
02:04:42,300 --> 02:04:47,600
It's like I'm not going to like teach a subject that I myself.

1823
02:04:47,600 --> 02:04:48,600
Don't do.

1824
02:04:51,200 --> 02:04:52,700
I would just be making stuff up.

1825
02:05:09,500 --> 02:05:10,500
All right.

1826
02:05:17,800 --> 02:05:20,800
Make sure this is in a reasonable States.

1827
02:05:20,800 --> 02:05:21,900
Yes, good

1828
02:05:25,200 --> 02:05:26,000
All right.

1829
02:05:26,200 --> 02:05:29,100
Thank you everybody for joining me for the Sarasota handmade here.

1830
02:05:29,100 --> 02:05:31,800
It felt good to clean up the letting code today at it's kind of

1831
02:05:31,800 --> 02:05:34,300
bugging me a little bit, so I'm glad that's been taken care of.

1832
02:05:35,800 --> 02:05:41,200
I will be back here next weekend to start to look at debugging the

1833
02:05:41,200 --> 02:05:42,100
grid, Ray Tracer.

1834
02:05:42,100 --> 02:05:45,600
And then we can take some good performance samples and see where we're

1835
02:05:45,600 --> 02:05:47,000
at in terms of throughput.

1836
02:05:47,500 --> 02:05:51,400
And we can maybe make some educated guesses about about that looking

1837
02:05:51,400 --> 02:05:53,300
at the vtune profiles and so on.

1838
02:05:55,400 --> 02:05:55,700
That's it.

1839
02:05:55,700 --> 02:05:56,300
For today.

1840
02:05:56,300 --> 02:05:58,800
If you want to follow along the series at home, you can always go to

1841
02:05:58,800 --> 02:05:59,800
handmade here a.org and

1842
02:06:00,000 --> 02:06:02,900
The game it comes with the source code so you can follow along with it

1843
02:06:03,500 --> 02:06:05,900
and if you want to, you can try to debugging the grid raytracer of

1844
02:06:05,900 --> 02:06:06,600
this week.

1845
02:06:06,800 --> 02:06:08,100
You could certainly beat me to it.

1846
02:06:08,600 --> 02:06:11,700
I don't think there's a whole lot of bugs in there probably, it's

1847
02:06:11,700 --> 02:06:14,700
probably just a case of stepping through it carefully and fixing all

1848
02:06:14,700 --> 02:06:16,300
of the little issues that come up.

1849
02:06:16,900 --> 02:06:20,400
So I'd highly recommend giving that a shot until then have fun program

1850
02:06:20,400 --> 02:06:22,300
everyone, and I'll see you on the internet.

1851
02:06:22,300 --> 02:06:23,100
Take it easy, everybody.

