1
00:00:00,500 --> 00:00:01,300
Start recording.

2
00:00:03,000 --> 00:00:05,100
Hello everyone and welcome to handmade hero.

3
00:00:05,100 --> 00:00:07,700
Sure, we could a complete game live on stream.

4
00:00:08,300 --> 00:00:12,000
We are actually back after a pretty long break.

5
00:00:12,000 --> 00:00:15,800
We were on our soil, you for a little while and then we did some

6
00:00:15,800 --> 00:00:20,400
streams that were not specifically coding on the game.

7
00:00:20,400 --> 00:00:24,300
We just did some chat stream so I could rest my hands.

8
00:00:24,300 --> 00:00:29,800
And then we also did one where we switched over to for coder and that

9
00:00:29,800 --> 00:00:30,200
was precisely

10
00:00:30,300 --> 00:00:32,900
Detained by the fact that since I was on RSI break, I took that

11
00:00:32,900 --> 00:00:38,200
opportunity to switch over to a Moodle keyboard binding which is still

12
00:00:38,200 --> 00:00:39,200
kind of in progress.

13
00:00:39,400 --> 00:00:43,800
Like I only just did the basic work of switching to a modal keybinding

14
00:00:43,800 --> 00:00:46,900
which is sort of switching to a Moodle version of what I already was

15
00:00:46,900 --> 00:00:51,200
using for my emacs key bindings which is that really the best model

16
00:00:51,200 --> 00:00:52,200
keybinding certainly.

17
00:00:52,200 --> 00:00:56,400
But it's what allows me to keep editing on a daily basis without

18
00:00:56,400 --> 00:00:56,800
losing too.

19
00:00:56,800 --> 00:00:58,500
Much speed over time.

20
00:00:58,500 --> 00:01:00,100
I would like to mutate.

21
00:01:00,200 --> 00:01:03,300
Eight The Binding around a little bit because now that it is modal,

22
00:01:04,700 --> 00:01:08,400
there's things I could do like things from VI, that are cool that I

23
00:01:08,400 --> 00:01:12,500
could borrow like, you know, that are based on the modality that I,

24
00:01:12,600 --> 00:01:15,100
that really maybe wouldn't make a lot of sense before because I didn't

25
00:01:15,100 --> 00:01:17,800
have a Milky binding, I can start using those and I'm not using those

26
00:01:17,800 --> 00:01:18,200
yet.

27
00:01:18,900 --> 00:01:21,800
So, anyway, I switched over to that in trying to do is Middle key.

28
00:01:21,800 --> 00:01:23,100
Bindings in emacs was a nightmare.

29
00:01:23,100 --> 00:01:24,400
There were so many problems with it.

30
00:01:24,500 --> 00:01:29,600
I did get it working and I and I am using it at work right now, but I

31
00:01:29,600 --> 00:01:30,100
wanted to try

32
00:01:30,300 --> 00:01:33,600
Switching over to for coder because Alan Webster who's one of the

33
00:01:33,600 --> 00:01:34,600
people on the stream.

34
00:01:35,100 --> 00:01:35,400
Mr.

35
00:01:35,400 --> 00:01:36,000
Fourth dimension.

36
00:01:36,000 --> 00:01:39,900
If you don't already know, made a pretty cool editor that he's been

37
00:01:39,900 --> 00:01:43,800
working on, in his spare time, he's a student but the editors are

38
00:01:43,800 --> 00:01:46,200
ready better than emacs in a lot of ways.

39
00:01:46,800 --> 00:01:50,400
And mostly the only thing, in fact, the only reason right now that I'm

40
00:01:50,400 --> 00:01:54,600
not using it, even at work is just because there's like a few bugs or

41
00:01:54,600 --> 00:01:55,100
missing.

42
00:01:55,100 --> 00:01:58,800
Think there's like a few little tiny things that have made it so that

43
00:01:58,800 --> 00:02:00,000
I can't quite such over there.

44
00:02:00,200 --> 00:02:04,400
But it's like shockingly good for how long it's been in development

45
00:02:04,500 --> 00:02:06,300
and I'm really pretty excited about it.

46
00:02:06,300 --> 00:02:08,100
So we switched over to it here on handmade Heroes.

47
00:02:08,100 --> 00:02:11,900
So for those of you who didn't follow the streams, that were sort of

48
00:02:11,900 --> 00:02:14,800
not handmade Heroes dreams with just me like going over for a coder

49
00:02:14,800 --> 00:02:17,100
and implementing some features.

50
00:02:17,200 --> 00:02:22,400
Like in the customization thing, that's what this sort of new editor

51
00:02:22,400 --> 00:02:26,700
situation is and so I can sort of show it to you real quickly here.

52
00:02:29,400 --> 00:02:32,200
If we're in a handmade hero, right?

53
00:02:32,500 --> 00:02:33,900
This is the actual editor.

54
00:02:34,700 --> 00:02:36,100
And I made a batch file.

55
00:02:36,100 --> 00:02:39,900
Like we had the old emacs one to load it and essentially, like it

56
00:02:39,900 --> 00:02:40,300
works.

57
00:02:42,000 --> 00:02:44,700
You know, it, it looks like a standard editor.

58
00:02:44,700 --> 00:02:47,700
There's nothing in particular that I think will be confusing to people

59
00:02:47,700 --> 00:02:53,800
on the stream but in general, you know, it's, it's very much does the

60
00:02:53,800 --> 00:02:57,600
same sorts of operations that I typically would have done Ani.

61
00:02:57,700 --> 00:02:58,200
Max.

62
00:02:58,800 --> 00:02:59,300
And

63
00:03:00,000 --> 00:03:05,200
Also allows programming program ability in see, which I've sort of

64
00:03:05,200 --> 00:03:06,200
leaned on pretty heavily.

65
00:03:06,200 --> 00:03:10,000
So there's a for coder Casey file that I've made which is basically

66
00:03:10,000 --> 00:03:14,400
like my C code that does all the things that I wanted it to do to

67
00:03:14,800 --> 00:03:17,000
basically copy what I do in emacs.

68
00:03:18,400 --> 00:03:20,600
So yeah this is basically it's a long-winded way of saying that's

69
00:03:20,600 --> 00:03:25,000
what's going on differently here and this is a program that you can

70
00:03:25,000 --> 00:03:26,000
also get yourself.

71
00:03:26,000 --> 00:03:29,800
So if you want to, follow along with this instead of with emacs you

72
00:03:30,000 --> 00:03:35,100
Can actually type in for a coder to your search window and there's a

73
00:03:35,100 --> 00:03:38,200
patreon page for are here to support Allen's development on it, which

74
00:03:38,600 --> 00:03:39,800
would be awesome if you did.

75
00:03:40,000 --> 00:03:41,000
It's a great editor.

76
00:03:41,000 --> 00:03:44,100
I am really happy about its development and so if you want to support

77
00:03:44,100 --> 00:03:45,100
it, that would be awesome.

78
00:03:45,700 --> 00:03:51,700
But if you support it, even I think at one dollar you get access to it

79
00:03:51,700 --> 00:03:55,500
and if you supported that $5, you get the whole programmability thing

80
00:03:55,500 --> 00:03:56,300
and all that stuff.

81
00:03:56,900 --> 00:03:59,700
There's even a $10 tier for people who are awesome.

82
00:04:00,100 --> 00:04:03,600
And I contributed my config to this.

83
00:04:03,600 --> 00:04:08,800
So if you want to be a supporter of for coder, you can also get my

84
00:04:08,800 --> 00:04:12,900
config included with that at the at the height are so please check

85
00:04:12,900 --> 00:04:13,400
that out.

86
00:04:13,400 --> 00:04:16,399
Like I said, I'm it's, I think it's a really awesome project and it's

87
00:04:16,399 --> 00:04:18,200
it's been really helpful to me.

88
00:04:18,200 --> 00:04:22,300
And I'm really hoping that other people in the community take to it.

89
00:04:22,300 --> 00:04:25,200
So we can sort of have our own editor.

90
00:04:25,200 --> 00:04:29,400
That is sort of nice for us to use and nice for the sorts of things

91
00:04:29,400 --> 00:04:29,800
that we do.

92
00:04:29,900 --> 00:04:33,400
Do as opposed to other things, like Adam, or whatever, which are

93
00:04:33,400 --> 00:04:37,000
clearly targeted at very different way of working and a very different

94
00:04:37,000 --> 00:04:37,900
set of priorities.

95
00:04:38,500 --> 00:04:42,200
So that's really it for the changes other than that.

96
00:04:42,200 --> 00:04:42,900
Nothing is different.

97
00:04:42,900 --> 00:04:45,500
We're just go back to programming handmade here.

98
00:04:45,500 --> 00:04:49,100
Exactly the way that we were the only thing that is going to point out

99
00:04:49,100 --> 00:04:50,400
is in for coder.

100
00:04:50,400 --> 00:04:53,400
I actually kind of I probably should have done this in emacs a long

101
00:04:53,400 --> 00:04:54,000
time ago.

102
00:04:54,700 --> 00:04:56,800
I didn't, I just never got around to it.

103
00:04:57,000 --> 00:04:59,800
But in for a coder since now, I can program in C,

104
00:05:00,300 --> 00:05:02,400
It's really easy for me to add things in emacs.

105
00:05:02,400 --> 00:05:05,200
It was always very laborious for me to add things because I don't

106
00:05:05,200 --> 00:05:08,800
program list natively and I barely know my way around lisp.

107
00:05:08,800 --> 00:05:12,200
So you know if you look at what I did in my emacs config file, it's

108
00:05:12,200 --> 00:05:16,600
this really kind of janky like Casey tries to sort of make lists do

109
00:05:16,600 --> 00:05:18,200
things but he doesn't really know how to program list.

110
00:05:18,200 --> 00:05:20,400
So it's obviously stupid kind of stuff.

111
00:05:22,400 --> 00:05:25,500
But since I know how to program, see, I can always hack something

112
00:05:25,500 --> 00:05:26,400
together and see.

113
00:05:26,600 --> 00:05:28,700
And yeah, maybe it's not going to be the greatest code in the world,

114
00:05:28,700 --> 00:05:29,900
but, you know, it's my editor.

115
00:05:29,900 --> 00:05:32,300
I know the boundaries of what I'm trying to do.

116
00:05:32,600 --> 00:05:35,800
I'm not trying to make some kind of robust code that I'm, you know,

117
00:05:35,800 --> 00:05:37,500
shipping to people or doing whatever.

118
00:05:38,100 --> 00:05:42,300
And so, when I can just open up a C file and edit it my editor, config

119
00:05:42,300 --> 00:05:43,900
and see, that's pretty great.

120
00:05:43,900 --> 00:05:46,600
So, one thing I did really quickly, as I just made this notion of a

121
00:05:46,600 --> 00:05:50,500
prj file, which is literally just a list of

122
00:05:52,200 --> 00:05:56,700
Basically paths so that I could make it so that it would automatically

123
00:05:56,700 --> 00:05:59,200
like load a project for me like load all the files.

124
00:05:59,300 --> 00:05:59,800
So I don't have to

125
00:06:00,000 --> 00:06:01,000
It's like loading the file.

126
00:06:01,000 --> 00:06:03,400
So emacs, I never had the concept of a project.

127
00:06:03,400 --> 00:06:06,200
There's even like Stephanie Max I think to help with that, and I never

128
00:06:06,200 --> 00:06:06,900
did it.

129
00:06:07,300 --> 00:06:10,900
So one thing I wanted to do is just get that into handmade hero.

130
00:06:10,900 --> 00:06:17,500
So in handmade code, I could just do handmade prj as an actual thing.

131
00:06:17,500 --> 00:06:20,600
Of course, I actually, I always forget, I've never actually made a way

132
00:06:20,600 --> 00:06:23,600
to open to create new files for some reason.

133
00:06:24,600 --> 00:06:27,400
In for a coder, there is a command for it and I never bound it to

134
00:06:27,400 --> 00:06:29,300
anything eventually.

135
00:06:29,300 --> 00:06:35,300
I will, when I actually remember, but point being I need something

136
00:06:35,300 --> 00:06:37,300
there to open, there we go.

137
00:06:37,300 --> 00:06:40,700
Okay, so let's see, handmade prj.

138
00:06:41,800 --> 00:06:45,500
So in this project file, all you have to do is list the directories.

139
00:06:45,500 --> 00:06:50,100
You actually care about now in for in handmade hero, we only have one

140
00:06:50,200 --> 00:06:53,300
thing we care about which is this directory, right?

141
00:06:53,800 --> 00:06:54,200
So

142
00:06:54,400 --> 00:06:58,900
Can just say like, oh yeah you know, there's the handmade code

143
00:06:58,900 --> 00:07:03,100
directory and that's it and then you can also do a thing where you can

144
00:07:03,100 --> 00:07:04,500
set the compilation directory.

145
00:07:04,500 --> 00:07:07,500
So, the first line in the file, I think I did is always the

146
00:07:07,500 --> 00:07:13,000
compilation directory, I want to say and so basically like you, this

147
00:07:13,000 --> 00:07:17,300
is where you want to run the build from and this is then everything

148
00:07:17,300 --> 00:07:20,700
else after it was what directories to load.

149
00:07:20,700 --> 00:07:22,700
So it works as kind of nice because I have a couple of different

150
00:07:22,700 --> 00:07:23,600
directors or stuff is in.

151
00:07:23,600 --> 00:07:24,200
And I just

152
00:07:24,300 --> 00:07:27,000
Those directories and everything gets loaded and it's kind of cool.

153
00:07:28,000 --> 00:07:31,900
So anyway like I did that for for for coder and it's just been kind of

154
00:07:31,900 --> 00:07:32,200
nice.

155
00:07:32,200 --> 00:07:34,600
So I wanted to do it for him here even though it's kind of not that

156
00:07:34,600 --> 00:07:37,600
necessary, not as necessary because there's not as much stuff, it's

157
00:07:37,600 --> 00:07:41,000
just kind of nice to have that and then when you load a prj file it

158
00:07:41,000 --> 00:07:47,000
like automatically does that load for you or at least in theory that

159
00:07:47,000 --> 00:07:49,000
was how it was supposed to work.

160
00:07:49,000 --> 00:07:53,200
So I think if I'm correct now and I actually wrote the code properly

161
00:07:53,500 --> 00:07:54,100
then

162
00:07:54,300 --> 00:07:57,700
Whenever the next time you're in here and you run 4head you can kind

163
00:07:57,700 --> 00:08:02,400
of go in and say like okay I'm going to rut load handmade out prj and

164
00:08:02,400 --> 00:08:06,000
then if you look at your buffers their oral pre-populated with all of

165
00:08:06,000 --> 00:08:09,500
the stuff and it looks like H is and CPS I probably should have made

166
00:08:09,500 --> 00:08:13,500
it load bats as well I didn't but you know we could always add that at

167
00:08:13,500 --> 00:08:14,400
some point we want to.

168
00:08:15,200 --> 00:08:15,900
So that's it.

169
00:08:15,900 --> 00:08:19,700
Everything else about it is the same and a lot of its I made pretty

170
00:08:19,700 --> 00:08:20,400
similar to emacs.

171
00:08:20,400 --> 00:08:23,100
So like I said, everything should look pretty familiar when we're

172
00:08:23,100 --> 00:08:23,700
working.

173
00:08:24,000 --> 00:08:24,100
Like

174
00:08:24,300 --> 00:08:27,500
If I hit, you know, the build key it builds on the other side and it

175
00:08:27,500 --> 00:08:29,400
does exactly sort of what you would expect.

176
00:08:30,000 --> 00:08:33,200
So the the difference and this would have been difference on emacs as

177
00:08:33,200 --> 00:08:37,000
well that will take perhaps a little bit of getting used to.

178
00:08:37,000 --> 00:08:40,400
If you're trying to understand what I'm doing on the stream is like I

179
00:08:40,400 --> 00:08:43,500
said, I switched my emacs and then correspondingly for a coder.

180
00:08:43,900 --> 00:08:49,700
I switch them to be, to be modal.

181
00:08:50,000 --> 00:08:54,200
So what that means is that, you know, when I was in emacs, you just

182
00:08:54,300 --> 00:08:58,800
Type keys and you know, the text would come out and then you would

183
00:08:58,800 --> 00:08:59,800
hold down like the control key.

184
00:09:00,000 --> 00:09:02,600
The ALT key and I would push something.

185
00:09:02,600 --> 00:09:06,400
And then that would write like that would actually do the special

186
00:09:06,400 --> 00:09:11,400
function, the idea behind a modal binding is to try to keep your hand

187
00:09:11,400 --> 00:09:15,800
not be doing so much with your hands and so you don't want to have to

188
00:09:15,800 --> 00:09:17,100
ever hold modifiers.

189
00:09:17,300 --> 00:09:22,700
If you don't have to caps lock, I have controlled bound to caps lock

190
00:09:22,700 --> 00:09:23,200
so I don't know.

191
00:09:23,200 --> 00:09:27,200
That control key was particularly bad for you but alt is a real like

192
00:09:27,200 --> 00:09:29,800
bad motion with your thumb, kind of, I suspect.

193
00:09:30,000 --> 00:09:33,000
So I definitely want to get rid of that but since I was going to do it

194
00:09:33,000 --> 00:09:36,100
one way, I just feared get rid of both of them so now it's just

195
00:09:36,100 --> 00:09:36,900
completely modal.

196
00:09:36,900 --> 00:09:40,000
And the way that I have that work is I can go in and out of the mode

197
00:09:40,000 --> 00:09:42,800
and you can see the I change like the

198
00:09:44,200 --> 00:09:47,400
The color of things on the screen to say, which mood I'm in.

199
00:09:47,600 --> 00:09:51,500
So right now, if it's white, I'm in that mode of just like typing and

200
00:09:51,500 --> 00:09:55,100
keys like you would normally but then if I leave that mode now I'm in

201
00:09:55,100 --> 00:09:59,200
a mode where I can issue commands like undo or something or build and

202
00:09:59,200 --> 00:10:01,000
that's all that's happening there.

203
00:10:01,100 --> 00:10:06,600
So you'll see those things change from a color and that that's all

204
00:10:06,600 --> 00:10:07,300
that's happening there.

205
00:10:07,300 --> 00:10:12,200
So again, it's a little bit different than what you're used to but

206
00:10:12,200 --> 00:10:13,800
otherwise there's really no.

207
00:10:14,000 --> 00:10:16,000
Prince, the operations are all the same.

208
00:10:16,200 --> 00:10:16,800
I haven't.

209
00:10:16,800 --> 00:10:19,600
Like I said, even gone in and tried to take advantage of that

210
00:10:19,600 --> 00:10:20,100
modality.

211
00:10:20,100 --> 00:10:23,400
So you'll literally see me doing the exact same operations.

212
00:10:23,400 --> 00:10:24,900
I've been doing in emacs.

213
00:10:24,900 --> 00:10:29,500
The only difference now is I'm doing the modally instead of with the

214
00:10:29,500 --> 00:10:32,400
modifier keys and to that end, you'll have to cut me some slack for

215
00:10:32,400 --> 00:10:36,200
being a slower editor now, because since I've switched key bindings,

216
00:10:36,200 --> 00:10:39,300
it's like, you know, I have to kind of relearn it, so things will go a

217
00:10:39,300 --> 00:10:41,800
little slower than they used to I suspect.

218
00:10:42,600 --> 00:10:43,800
But other than that, that's where

219
00:10:43,900 --> 00:10:47,700
We're at, so if I remember correctly and it's kind of hilarious that I

220
00:10:47,700 --> 00:10:48,800
would even remember correctly.

221
00:10:48,800 --> 00:10:53,800
Considering that it's been a month where we were what we sort of left

222
00:10:53,800 --> 00:10:58,200
off on is I decided that it was a good time to sort of have Hardware

223
00:10:58,200 --> 00:10:59,500
acceleration in the game.

224
00:10:59,800 --> 00:11:02,800
So we have our software renderer which of course we wrote ourselves

225
00:11:03,400 --> 00:11:10,800
and which kind of surprisingly at least to me ran very quickly, it

226
00:11:10,800 --> 00:11:13,500
could even run the cutscenes reasonably dot great.

227
00:11:14,400 --> 00:11:17,200
So we didn't ever really had to address the need for 3D Hardware

228
00:11:17,200 --> 00:11:20,700
acceleration, but then we were sort of like, well, it's probably time

229
00:11:20,700 --> 00:11:21,800
when we're going to do game tuning.

230
00:11:21,800 --> 00:11:24,700
We'd like it to run at 60 frames a second all the time without us

231
00:11:24,700 --> 00:11:28,200
having to stop and optimize our software rasterizer all the time or

232
00:11:28,200 --> 00:11:29,000
things like this.

233
00:11:29,200 --> 00:11:32,700
So, you know, maybe it would be nice if we have the ability to access

234
00:11:32,700 --> 00:11:34,000
Hardware acceleration.

235
00:11:34,300 --> 00:11:37,900
So we did opengl implementation and we pretty much did all of the

236
00:11:37,900 --> 00:11:41,300
stuff to implement opengl for our purposes, which is actually right,

237
00:11:41,300 --> 00:11:42,600
like very simplistic.

238
00:11:42,600 --> 00:11:43,800
There's not very much work that

239
00:11:43,900 --> 00:11:47,500
it has to happen to do that which I kind of showed it just not

240
00:11:47,700 --> 00:11:49,200
particularly involved.

241
00:11:49,400 --> 00:11:54,300
But what we did not ever do is we did not ever actually finish text or

242
00:11:54,300 --> 00:11:56,700
downloads as an actual first class citizen.

243
00:11:56,900 --> 00:11:59,900
So what happens right now is the texture code is just

244
00:12:00,000 --> 00:12:04,100
The placeholder and this means two things and I'm going to go over

245
00:12:04,100 --> 00:12:06,600
them on the Blackboard so that you can understand what they are.

246
00:12:08,000 --> 00:12:11,500
And then there's one thing with getting srgb that will probably do

247
00:12:11,500 --> 00:12:12,300
today as well.

248
00:12:12,300 --> 00:12:14,500
In fact, you know what, how much time do we have?

249
00:12:14,800 --> 00:12:17,900
So we've got, I guess we're Refugee Ministries, we have about 45

250
00:12:17,900 --> 00:12:22,900
minutes, so I'm trying to think of which way we should go because I

251
00:12:22,900 --> 00:12:25,200
probably won't take 45 minutes to get the RGB stuff.

252
00:12:25,300 --> 00:12:27,800
I'm going to do the texture stuff, I think that's probably a better

253
00:12:27,800 --> 00:12:28,100
idea.

254
00:12:28,700 --> 00:12:31,800
So I'm just going to really quickly just explain what was going on

255
00:12:31,800 --> 00:12:36,400
with the textures and you know, because people probably have forgotten

256
00:12:37,000 --> 00:12:37,300
or

257
00:12:37,500 --> 00:12:41,600
Maybe don't even necessarily know some of the stuff that I was needed

258
00:12:41,600 --> 00:12:45,500
to do with them and that they weren't doing and so hopefully we can

259
00:12:45,500 --> 00:12:47,200
kind of get that squared away.

260
00:12:47,700 --> 00:12:48,200
All right.

261
00:12:49,100 --> 00:12:53,000
So what sorry what was it day to 44?

262
00:12:56,900 --> 00:12:57,800
Why is that?

263
00:12:58,300 --> 00:13:00,100
That's a weird color?

264
00:13:03,100 --> 00:13:03,600
Here we go.

265
00:13:11,900 --> 00:13:12,500
All right.

266
00:13:16,300 --> 00:13:20,600
Okay, so what was happening before hand, right?

267
00:13:20,600 --> 00:13:23,400
And you're going to have to kind of pull back into your memory or

268
00:13:23,500 --> 00:13:25,800
pause this and go re-watch the videos.

269
00:13:25,800 --> 00:13:29,700
If you don't remember, you have to pull back into your memory, the GPU

270
00:13:29,800 --> 00:13:33,200
conceptual GPU stuff that we talked about, right?

271
00:13:33,800 --> 00:13:36,800
And specifically, you're going to have to remember the stuff about the

272
00:13:36,800 --> 00:13:38,500
fact that there was GPU memory

273
00:13:40,100 --> 00:13:41,300
and CPU memory.

274
00:13:42,800 --> 00:13:45,700
And these were not necessarily the same thing, right?

275
00:13:45,800 --> 00:13:47,900
Especially when you have a discrete graphics card that's plugged into

276
00:13:47,900 --> 00:13:51,300
a slot, the GPU has a set of memory chips.

277
00:13:51,500 --> 00:13:55,800
They're totally its own, it doesn't, it's not even remotely in the

278
00:13:55,800 --> 00:13:58,900
same physical location as the CPU memory, they're totally separate.

279
00:13:59,500 --> 00:14:03,300
And so what happens is, you know, we go from the disk we load a

280
00:14:03,300 --> 00:14:08,900
texture into CPU memory, but that is not accessible by the GPU.

281
00:14:08,900 --> 00:14:12,500
The GPU is over here, and has to be able to read out of this.

282
00:14:13,000 --> 00:14:16,700
So we need to get the textures onto the GPU.

283
00:14:16,700 --> 00:14:19,100
Somehow have to move be moved over there.

284
00:14:20,200 --> 00:14:24,500
And so there is a degree you know like we talked about immediate mode

285
00:14:24,500 --> 00:14:25,400
versus retain mode.

286
00:14:25,400 --> 00:14:30,300
Things like this there's definitely a degree of retention that happens

287
00:14:30,500 --> 00:14:32,300
with GPU programming.

288
00:14:32,300 --> 00:14:37,200
For this very reason, we cannot send the whole texture down to the GPU

289
00:14:37,200 --> 00:14:39,200
every time because it could be huge, right?

290
00:14:39,300 --> 00:14:42,700
A single one of our plates, for the cutscene could be something like

291
00:14:42,700 --> 00:14:45,100
six megabytes when uncompressed, right?

292
00:14:45,100 --> 00:14:48,800
That's just a lot to send down every time if you're talking about lots

293
00:14:48,800 --> 00:14:49,800
of these different place that I

294
00:14:50,000 --> 00:14:51,100
Go down there, right?

295
00:14:52,100 --> 00:14:55,100
And so, we don't want to just spend all of our time and all of our

296
00:14:55,100 --> 00:14:58,500
bandwidth of the graphics card sending down the same textures over and

297
00:14:58,500 --> 00:14:59,900
over again, it would drastically.

298
00:15:00,000 --> 00:15:04,700
Limit how much textures we could actually use in a given frame because

299
00:15:04,700 --> 00:15:07,000
instead of it being about how much memory is on the graphics card.

300
00:15:07,000 --> 00:15:09,700
It would suddenly be about how much bandwidth can actually go to the

301
00:15:09,700 --> 00:15:12,200
card during a single 60th of a second.

302
00:15:12,300 --> 00:15:13,400
Not what we want.

303
00:15:15,000 --> 00:15:21,300
So in pretty much all ways, you can think of that GPU memory as sort

304
00:15:21,300 --> 00:15:22,900
of like a cash, right?

305
00:15:22,900 --> 00:15:23,400
It's a lot.

306
00:15:23,400 --> 00:15:26,800
Like the way we think about the cash on the CPU, when the CPU is

307
00:15:26,800 --> 00:15:30,500
operating on something, it you want to have all of that stuff there in

308
00:15:30,500 --> 00:15:34,000
the cache so that when its operating on it, it's nice and fast.

309
00:15:34,000 --> 00:15:35,600
It doesn't have to go out to me, remember to get it.

310
00:15:35,600 --> 00:15:36,900
The same is true of GPU memory.

311
00:15:36,900 --> 00:15:40,300
When you're drawing a frame, you want to have all of your Textures in

312
00:15:40,300 --> 00:15:41,200
GPU memory.

313
00:15:41,300 --> 00:15:44,000
That doesn't mean that all the textures for your game are necessary.

314
00:15:44,200 --> 00:15:47,100
The GPR, because you may have too much textures, like, too many actual

315
00:15:47,100 --> 00:15:51,300
images to even fit, like maybe you have 2 gigabytes of images, which

316
00:15:51,300 --> 00:15:53,600
the GPU is only, 1 GB worth of ram.

317
00:15:53,800 --> 00:15:55,500
Well, obviously that's not going to work.

318
00:15:55,800 --> 00:15:59,800
So it's very much like a cashier trying to put the textures that are

319
00:15:59,800 --> 00:16:04,600
relevant to the current, you know, time in the game, the current, you

320
00:16:04,600 --> 00:16:08,500
know, 20 30 frame Horizon, you're trying to make sure all the textures

321
00:16:08,600 --> 00:16:12,300
that are necessary to render that set of frames are actually on the

322
00:16:12,300 --> 00:16:13,700
GPU for

323
00:16:14,200 --> 00:16:18,800
In time for it to work with them and in order to do that, what we need

324
00:16:18,800 --> 00:16:21,800
to do is a have some opinion about what textures need to be in GPU

325
00:16:21,800 --> 00:16:27,200
memory and then have some concept of how to get them down there or at

326
00:16:27,200 --> 00:16:30,100
some point when they're no longer necessary, remove them to make room

327
00:16:30,100 --> 00:16:31,300
for another texter.

328
00:16:32,000 --> 00:16:33,600
Okay, now,

329
00:16:38,300 --> 00:16:39,600
To a certain extent.

330
00:16:40,900 --> 00:16:45,500
Like a regular cash GPU memory can be sort of virtualized in the sense

331
00:16:45,500 --> 00:16:47,300
that you can over.

332
00:16:47,300 --> 00:16:48,800
Subscribe it right?

333
00:16:48,900 --> 00:16:53,200
Meaning I could, if this was one gigabyte, it's entirely possible on

334
00:16:53,500 --> 00:16:54,800
in certain circumstances.

335
00:16:56,600 --> 00:17:00,100
And given the way that opengl specified and stuff like that, I could,

336
00:17:00,100 --> 00:17:04,300
for example, create 4, gigabytes of textures and tell it to the card

337
00:17:05,000 --> 00:17:09,099
and if I did that, what would happen is the driver would sit there and

338
00:17:09,099 --> 00:17:10,500
it would basically try to

339
00:17:10,700 --> 00:17:16,700
Do a sort of best, guess of which, you know, quarter of this 4 GB.

340
00:17:16,700 --> 00:17:18,099
It was going to put on the card.

341
00:17:18,300 --> 00:17:21,900
And then when we invest in Ewa tably, tried to reference a texture,

342
00:17:21,900 --> 00:17:25,599
that wasn't in there, it would pick somebody to evict and then pull

343
00:17:25,599 --> 00:17:26,500
somebody else in.

344
00:17:26,900 --> 00:17:29,000
So it really does work a lot like a cash.

345
00:17:29,000 --> 00:17:31,700
When the driver the driver sitting there will actually start acting

346
00:17:31,700 --> 00:17:34,600
like the cash that be fine.

347
00:17:34,600 --> 00:17:38,200
If this were an application like 3D Studio or something like that,

348
00:17:38,200 --> 00:17:40,500
where we don't care about hitting a hard frame.

349
00:17:40,600 --> 00:17:40,800
Limit.

350
00:17:40,800 --> 00:17:44,600
Then we're talking about wanting to render 60 frames a second and that

351
00:17:44,600 --> 00:17:46,600
have a bunch of study stuttering happening.

352
00:17:46,600 --> 00:17:46,900
All the time.

353
00:17:46,900 --> 00:17:51,000
We want to make sure that the driver is not doing that.

354
00:17:51,000 --> 00:17:54,300
We want to make sure that we are not over subscribing, the texture

355
00:17:54,300 --> 00:17:58,900
memory and that we are knowledgeable about when our textures are going

356
00:17:58,900 --> 00:17:59,400
to be used.

357
00:17:59,400 --> 00:17:59,800
And that we

358
00:18:00,000 --> 00:18:04,100
Them down there before that happens so that we're not in a just like,

359
00:18:04,100 --> 00:18:05,300
oh, darn.

360
00:18:05,700 --> 00:18:08,600
I'm using a texture that I didn't know about yet, right?

361
00:18:09,000 --> 00:18:10,300
Or that I need to get down there.

362
00:18:11,600 --> 00:18:14,300
So that's something that we have to do now.

363
00:18:14,300 --> 00:18:18,200
Unfortunately, graphics cards, don't make this easy for us and this is

364
00:18:18,200 --> 00:18:23,500
a little bit of an unfortunate scenario, which is that this sort of

365
00:18:23,500 --> 00:18:27,400
swapping, where the drivers swaps for you unfortunately, is actually

366
00:18:27,400 --> 00:18:32,100
more efficient in a lot of ways than if you try to do it yourself.

367
00:18:32,300 --> 00:18:36,700
And the reason for that is because you don't actually know the format

368
00:18:36,700 --> 00:18:40,800
in which the driver needs to store the textures in order for the GPU

369
00:18:40,800 --> 00:18:41,200
Texas.

370
00:18:41,400 --> 00:18:41,800
Them.

371
00:18:42,500 --> 00:18:43,800
And what do I mean by this?

372
00:18:43,900 --> 00:18:44,300
Well,

373
00:18:47,200 --> 00:18:49,200
there's something called swiveling.

374
00:18:51,800 --> 00:18:55,100
And we sort of use this term in the past because whistling just really

375
00:18:55,100 --> 00:18:56,600
means rearranging things.

376
00:18:58,000 --> 00:19:01,300
So, in some sense, when we were talking about Cindy programming,

377
00:19:01,300 --> 00:19:01,900
right?

378
00:19:01,900 --> 00:19:06,200
We would talk about things like, oh, there's four lanes of this CMD

379
00:19:06,800 --> 00:19:11,500
and maybe like a typical way of using the word Swizzle might be that

380
00:19:11,500 --> 00:19:16,300
I'm going to like rearranged, you know, some set of these things.

381
00:19:16,400 --> 00:19:21,300
Like this is going to be a swizzle where I do see be a

382
00:19:21,400 --> 00:19:24,300
Something right, where you kind of have see bad.

383
00:19:24,300 --> 00:19:25,200
That's my rapper name.

384
00:19:25,200 --> 00:19:28,400
Maybe so like you can sort of see here.

385
00:19:28,600 --> 00:19:32,200
I start out with some ordering of things and then I rearrange the

386
00:19:32,200 --> 00:19:35,600
order of those things to give me some New Order that's often called

387
00:19:35,600 --> 00:19:36,100
sizzling.

388
00:19:36,600 --> 00:19:40,900
Well swindling happens for textures to and the reason that's whistling

389
00:19:40,900 --> 00:19:45,100
happens for textures is because graphics cards are not set up to

390
00:19:45,100 --> 00:19:47,800
actually to be optimized.

391
00:19:50,000 --> 00:19:53,800
For the case that we actually are talking about in handmade hero in

392
00:19:53,800 --> 00:19:59,800
hand me a hero, we're talking about a bunch of, you know, 2D cards

393
00:19:59,800 --> 00:20:01,400
stacked on top of each other, right?

394
00:20:01,400 --> 00:20:04,600
And the heroes, one of those cards, you know, and trees and stuff or

395
00:20:04,600 --> 00:20:06,500
one of those cards and whatever, right?

396
00:20:06,700 --> 00:20:10,800
And we're always talking about using the entire texture in the order

397
00:20:10,800 --> 00:20:16,600
that it was drawn in exactly as a rectangle on the screen, right?

398
00:20:16,800 --> 00:20:18,200
That's what we're essentially doing.

399
00:20:18,700 --> 00:20:19,200
And so,

400
00:20:19,500 --> 00:20:22,000
Degree to which you would need to do swindling to support that.

401
00:20:22,000 --> 00:20:25,100
Kind of operation is probably not huge.

402
00:20:25,300 --> 00:20:27,500
It doesn't necessarily mean that you couldn't do some sizzling to

403
00:20:27,500 --> 00:20:29,500
help, but we'll get to that in a second.

404
00:20:30,200 --> 00:20:33,800
However, the point that I'm that I want to get to First is just that

405
00:20:34,200 --> 00:20:37,700
what they're normally trying to do is they're normally trying to take,

406
00:20:37,700 --> 00:20:39,400
you know, like a triangle.

407
00:20:39,800 --> 00:20:43,400
And a triangle is like assigned to some region of this texture, right?

408
00:20:43,400 --> 00:20:47,100
Like texture mapping in the traditional sense is pulling out a region

409
00:20:47,100 --> 00:20:48,700
of this and putting it onto a triangle.

410
00:20:48,700 --> 00:20:49,300
That's from a

411
00:20:49,400 --> 00:20:50,800
3D model, right?

412
00:20:51,300 --> 00:20:55,200
So they're very much pulling from Little sections all over the

413
00:20:55,200 --> 00:20:59,200
texture, you know, that really don't have anything to do with using

414
00:20:59,200 --> 00:20:59,800
the whole text.

415
00:21:00,000 --> 00:21:03,600
In fact, a lot of the times, there's no way the whole texture would

416
00:21:03,600 --> 00:21:06,400
get used because part of its on like the back of something that you

417
00:21:06,400 --> 00:21:08,000
can't see the whole of the texture.

418
00:21:08,000 --> 00:21:10,400
On one frame, etc, etc, etc.

419
00:21:11,400 --> 00:21:15,600
There's there's just tons of reasons why a texter is not getting

420
00:21:15,600 --> 00:21:17,000
access to in the same way.

421
00:21:17,100 --> 00:21:19,600
When you're talking about just stamping it down on something versus

422
00:21:19,600 --> 00:21:22,200
when it's wrapped on the surface of a 3D model for actual texture

423
00:21:22,200 --> 00:21:22,600
mapping.

424
00:21:23,700 --> 00:21:28,600
So, in order to best support texture mapping textures are often

425
00:21:28,600 --> 00:21:33,600
Swizzle 'd:wz way that if you were to take the original texture and

426
00:21:33,600 --> 00:21:36,000
you look at it like this, you know, I've got the little Hero on here.

427
00:21:36,000 --> 00:21:36,800
Here it is.

428
00:21:37,800 --> 00:21:42,100
The actual way that it's stored is some totally other way like, you

429
00:21:42,100 --> 00:21:47,700
know, the in memory we think of this as a row, right?

430
00:21:47,700 --> 00:21:51,700
And we think of this as maybe like 0 I guess we did it bottom up or

431
00:21:51,700 --> 00:21:52,700
something, right?

432
00:21:53,500 --> 00:21:54,200
Is how we stored it.

433
00:21:54,200 --> 00:21:58,200
So, like here is the first, here's the pointer to the first pixel and

434
00:21:58,200 --> 00:21:59,700
they go all the way across this row.

435
00:21:59,900 --> 00:22:02,600
And then we come back up here and go all the way across this row,

436
00:22:02,700 --> 00:22:03,100
right?

437
00:22:03,200 --> 00:22:04,400
That's how it's stored in memory.

438
00:22:04,500 --> 00:22:09,000
So it linearly in memory, you'd be reading it this way, right?

439
00:22:09,000 --> 00:22:11,400
I mean, we all know this, we wrote the routines to read and write

440
00:22:11,400 --> 00:22:13,000
them, we didn't implement it all that, right?

441
00:22:13,000 --> 00:22:13,900
That's what we did.

442
00:22:15,800 --> 00:22:20,300
Well, if you think about what happens when you're trying to talk about

443
00:22:20,300 --> 00:22:24,400
a little square here, that might map to a particular triangle, right?

444
00:22:24,400 --> 00:22:28,800
Something like this, if that's what we're talking about and we're not

445
00:22:28,800 --> 00:22:32,000
typically processing, huge runs of things like that.

446
00:22:32,700 --> 00:22:36,800
Then if you think about it, the cache coherency of this texture is not

447
00:22:36,800 --> 00:22:38,100
particularly good.

448
00:22:38,300 --> 00:22:43,700
If I'm only going to talk about grabbing this much of a line typically

449
00:22:43,700 --> 00:22:44,800
when I'm operating on it.

450
00:22:45,400 --> 00:22:50,500
Then what I would rather do is have it more looks toward like this in

451
00:22:50,500 --> 00:22:51,700
memory, right?

452
00:22:52,400 --> 00:22:56,000
Like maybe little squares of textures, right?

453
00:22:56,000 --> 00:22:58,400
That were maybe like four by four or something.

454
00:22:58,500 --> 00:23:03,600
So that when I load 16 pixels, instead of loading a big long line of

455
00:23:03,600 --> 00:23:08,000
16 here, I'm instead loading a little square because the chances of me

456
00:23:08,000 --> 00:23:10,300
using everything from that little square.

457
00:23:10,300 --> 00:23:12,900
When I do that load are much higher, right?

458
00:23:13,100 --> 00:23:15,000
And furthermore, I probably

459
00:23:15,100 --> 00:23:17,300
I am going to use things in this area, right?

460
00:23:17,300 --> 00:23:21,300
Like, if I'm looking at this image, I probably going to use a bunch of

461
00:23:21,300 --> 00:23:25,000
things in this area if I'm using something in this area, but I might

462
00:23:25,000 --> 00:23:27,100
never use anything in this area, right?

463
00:23:27,200 --> 00:23:29,300
If I'm going to use as much stuff in this area, I might never touch

464
00:23:29,300 --> 00:23:29,900
this area.

465
00:23:30,100 --> 00:23:34,600
So they also tend to continues whistling to pack blocks instead of

466
00:23:34,600 --> 00:23:37,400
going in memory this way, they might go.

467
00:23:37,500 --> 00:23:41,100
Like in this this way, like this block, then this block, then this

468
00:23:41,100 --> 00:23:44,600
block, then that block, then this block to try it again.

469
00:23:44,600 --> 00:23:45,000
Max

470
00:23:45,100 --> 00:23:48,100
Some eyes, the chances that were hitting things in the same.

471
00:23:48,300 --> 00:23:50,600
If we're pulling, you know, from from different regions.

472
00:23:50,600 --> 00:23:53,100
It's easier for the memory controller to grab these things out.

473
00:23:55,000 --> 00:23:57,900
Now, to be completely honest with you, I have never studied studied

474
00:23:57,900 --> 00:23:59,300
textures whistling at all.

475
00:24:00,200 --> 00:24:04,200
When I worked on larabee, that was just something, I never actually

476
00:24:04,200 --> 00:24:05,700
saw the texture unit stuff.

477
00:24:05,800 --> 00:24:08,600
I did not know how they did this whistling and I never really looked

478
00:24:08,600 --> 00:24:09,100
into it.

479
00:24:12,400 --> 00:24:17,200
So unfortunately I can't tell you any more than a hand, wavy

480
00:24:17,200 --> 00:24:20,900
explanation like that where I'm like, they're trying to rearrange it

481
00:24:20,900 --> 00:24:26,100
to make memory access and computation easier on the critical path.

482
00:24:26,200 --> 00:24:28,400
Which is sampling textures for triangles.

483
00:24:29,300 --> 00:24:30,700
How that, actually breaks down.

484
00:24:30,800 --> 00:24:31,400
I don't know.

485
00:24:31,400 --> 00:24:33,600
Like, I couldn't tell you the like hard proof of.

486
00:24:33,600 --> 00:24:35,100
Like, here's exactly why.

487
00:24:35,300 --> 00:24:37,100
Here's the exact format their store.

488
00:24:37,200 --> 00:24:40,000
And here's why I don't even know if it's the same from card to card, I

489
00:24:40,000 --> 00:24:41,500
suspect, it probably isn't, I suspect?

490
00:24:41,500 --> 00:24:41,600
There's

491
00:24:41,800 --> 00:24:44,600
Grunts whistle formats depending on which graphics card drawn.

492
00:24:45,300 --> 00:24:49,300
Anyway, what that means is when you submit a texture.

493
00:24:49,700 --> 00:24:52,200
So you have a texture you load up disk and then you hand it over to

494
00:24:52,200 --> 00:24:53,000
opengl.

495
00:24:53,200 --> 00:24:56,300
What's actually going to happen is opengl is going to Swizzle that

496
00:24:56,300 --> 00:24:56,900
texture.

497
00:24:57,700 --> 00:25:00,300
Now maybe that texture gets whistled on the card.

498
00:25:00,300 --> 00:25:03,900
If the card has some way of swindling, the texture on it, meaning it

499
00:25:03,900 --> 00:25:07,000
can do the remapping but maybe it doesn't.

500
00:25:07,200 --> 00:25:11,300
And so what that means is this CPU itself actually has to rearrange

501
00:25:11,300 --> 00:25:11,600
all that.

502
00:25:11,700 --> 00:25:14,000
Memory at a very expensive cost, right?

503
00:25:14,000 --> 00:25:16,500
It has to actually go touch, all that memory and move it all around.

504
00:25:17,000 --> 00:25:20,400
So what that means is, if you've submitted a texture to opengl, even

505
00:25:20,400 --> 00:25:23,700
if it didn't go to the card, it has gone through the swiveling stage

506
00:25:23,700 --> 00:25:27,800
and could remain in memory priests whistled, which saves time on the

507
00:25:27,800 --> 00:25:31,200
transfer because instead of having to Swizzle and transfer, it just

508
00:25:31,200 --> 00:25:33,300
has to transfer memory, that's already been swindled.

509
00:25:35,300 --> 00:25:39,000
So unfortunately even though we do want to get rid of this, because

510
00:25:39,000 --> 00:25:40,300
it's a bit unpredictable.

511
00:25:42,700 --> 00:25:46,400
We do lose something because that how dismissal the texture is not

512
00:25:46,400 --> 00:25:47,400
exposed to us.

513
00:25:47,600 --> 00:25:48,400
I wish it was.

514
00:25:48,400 --> 00:25:52,400
I wish they had formalized that sometime in the past couple years and

515
00:25:52,400 --> 00:25:55,900
said, here is how everything will be swindled so that when you do your

516
00:25:55,900 --> 00:25:58,800
own stuff on the CPU side you can just submit pre-social textures.

517
00:25:58,900 --> 00:26:00,100
I don't think they have.

518
00:26:00,200 --> 00:26:03,600
Even if they have plenty of grass cards, in circulation, don't have

519
00:26:03,600 --> 00:26:06,000
any sort of thing like that, so I don't really think there's much you

520
00:26:06,000 --> 00:26:09,700
can do at least at this stage in the game but okay.

521
00:26:11,700 --> 00:26:12,200
Now.

522
00:26:14,400 --> 00:26:19,400
We may get away with not having that because we are using rectangular

523
00:26:19,400 --> 00:26:20,300
textures.

524
00:26:23,100 --> 00:26:26,000
Which are tend to be treated somewhat differently in graphics cards

525
00:26:26,200 --> 00:26:29,600
Square textures are the more common thing or more particularly not

526
00:26:29,600 --> 00:26:33,400
square at or not rectangular I should say power of 2 and non power of

527
00:26:33,400 --> 00:26:33,800
2.

528
00:26:35,500 --> 00:26:39,900
So, most textures that you would use on a graphics card for mapping

529
00:26:39,900 --> 00:26:42,900
onto a 3D model, our power of 2.

530
00:26:43,500 --> 00:26:46,800
And what that means is simply that the sides are a power of 2 in

531
00:26:46,800 --> 00:26:47,300
length.

532
00:26:47,300 --> 00:26:50,800
So if I was to, you know, draw you one of these it would always be

533
00:26:50,800 --> 00:26:56,900
like 256 by 256, or 512 by 256, right?

534
00:26:57,600 --> 00:26:59,900
So doesn't it can be a rectangle but

535
00:27:00,000 --> 00:27:05,500
Actual Dimension is 2 to some power and never anything else.

536
00:27:05,500 --> 00:27:07,800
It's never going to be 540, right?

537
00:27:07,800 --> 00:27:11,000
It's gonna be 512 or 1024, but it's not going to be this.

538
00:27:12,800 --> 00:27:15,600
Originally, that's all that grabs card supported originally gravis

539
00:27:15,600 --> 00:27:15,800
cards.

540
00:27:15,800 --> 00:27:23,700
Could literally not do any other shape nowadays, they do and certain

541
00:27:23,700 --> 00:27:27,200
ones supported more than others, like some actually secretly end up

542
00:27:27,200 --> 00:27:28,900
using a power of two texture anyway.

543
00:27:30,100 --> 00:27:32,700
And just don't tell you about it in the space is wasted other of them.

544
00:27:32,700 --> 00:27:33,600
I think actually do.

545
00:27:33,700 --> 00:27:37,500
But either way, I want to say that the rectangular texture paths

546
00:27:37,500 --> 00:27:42,100
nowadays, don't go through the same kind of sizzling and may not have

547
00:27:42,100 --> 00:27:42,400
as much.

548
00:27:42,600 --> 00:27:43,900
Cost associated with them.

549
00:27:44,100 --> 00:27:47,600
And the reason for that is, of course, that they are expecting it to

550
00:27:47,600 --> 00:27:50,300
be something like a video, download or something, where you're trying

551
00:27:50,300 --> 00:27:53,000
to send over a thing that you're going to rectilinear blit.

552
00:27:53,000 --> 00:27:56,800
And you want to try a say the time on the submission and be, you're

553
00:27:56,800 --> 00:27:59,400
not going to be wrapping around a 3D model anyway, and blah, blah,

554
00:27:59,400 --> 00:27:59,700
blah?

555
00:27:59,700 --> 00:28:00,400
I don't know.

556
00:28:00,700 --> 00:28:04,200
That's all minutiae that, like, only people who follow GPS tough, very

557
00:28:04,200 --> 00:28:05,300
closely could tell you.

558
00:28:05,600 --> 00:28:08,000
And, you know, if there's someone on the street who happens to be a

559
00:28:08,000 --> 00:28:11,300
GPU expert, that's up on the way that they currently work.

560
00:28:11,600 --> 00:28:12,400
They could fill you in.

561
00:28:12,500 --> 00:28:16,500
If not, none of this really matters too much, we're doing, this is

562
00:28:16,500 --> 00:28:19,100
only, if you're going to be one of those people who's a serious

563
00:28:19,100 --> 00:28:22,600
serious GPU, programmer, all of these things are things that you

564
00:28:22,600 --> 00:28:23,000
should know.

565
00:28:23,000 --> 00:28:23,200
Right?

566
00:28:23,200 --> 00:28:27,000
If we, if, you know, if I was a serious GPU programmer, kind of guy, I

567
00:28:27,000 --> 00:28:31,600
would know these things, or at least, I should say, if I had a GPU

568
00:28:31,600 --> 00:28:35,800
person on my team, I'd expect them to be up on all this stuff, if

569
00:28:35,800 --> 00:28:38,800
you're a generalist and you don't have to deal with like squeezing

570
00:28:38,800 --> 00:28:41,500
every bit of performance out of a GPU, then you'd really don't have to

571
00:28:41,500 --> 00:28:42,200
know this stuff.

572
00:28:42,600 --> 00:28:46,200
It's good to be aware so that when the time comes and you do have a

573
00:28:46,200 --> 00:28:49,000
little something that needs to get tuned or whatever, your you kind of

574
00:28:49,000 --> 00:28:50,200
have some idea what's going on.

575
00:28:50,400 --> 00:28:51,700
And then you could ask the specifics.

576
00:28:51,700 --> 00:28:54,000
You can ask someone from Nvidia, someone from ATI, whatever.

577
00:28:54,100 --> 00:28:57,500
You can say, hey, yeah, I kind of remember the rectangle texture thing

578
00:28:57,500 --> 00:28:59,800
and I was wondering, is there what's going on in there?

579
00:28:59,800 --> 00:29:02,000
My, I seem to they don't seem to be downloading the fast they could,

580
00:29:02,000 --> 00:29:02,800
is it's literally problem.

581
00:29:02,900 --> 00:29:06,200
You know, just having an idea that something that might be happening,

582
00:29:06,200 --> 00:29:09,100
is really all you need to probably know as a generalist if that makes

583
00:29:09,100 --> 00:29:09,400
sense.

584
00:29:10,400 --> 00:29:16,400
Okay, so anyway, so that's essentially the situation and so we have to

585
00:29:16,400 --> 00:29:18,700
do is figure out a better way to deal with this.

586
00:29:18,700 --> 00:29:20,800
Then what we're dealing with what we're doing right now because all

587
00:29:20,800 --> 00:29:23,100
we're doing right now is when it comes time to draw.

588
00:29:23,200 --> 00:29:26,200
We just look to see whether we've ever submitted a particular bitmap

589
00:29:26,200 --> 00:29:27,500
that we have in our asset store.

590
00:29:27,700 --> 00:29:30,200
If we've never submitted it, we submit it and we draw it.

591
00:29:30,400 --> 00:29:32,600
Otherwise, we just used the handle that we've used before.

592
00:29:34,200 --> 00:29:38,500
There's two problems with this, and they both need to get fixed

593
00:29:38,800 --> 00:29:39,200
problem.

594
00:29:39,200 --> 00:29:42,600
Number one is, it's, you know, just too late, right?

595
00:29:42,700 --> 00:29:45,800
Meaning we only do this when we actually go to draw.

596
00:29:46,000 --> 00:29:49,400
So, if we have some huge texture here, that's like, you know, some 20,

597
00:29:50,000 --> 00:29:53,600
I don't remember what they were other 1920 by 1080 right or more,

598
00:29:53,700 --> 00:29:54,100
right?

599
00:29:54,100 --> 00:29:56,200
So we have some big 1920 by 1080.

600
00:29:56,300 --> 00:29:59,200
Graphic that was for the cutscene that we want to draw here, right?

601
00:29:59,200 --> 00:29:59,800
It's like the house.

602
00:30:00,000 --> 00:30:00,900
Or whatever.

603
00:30:00,900 --> 00:30:02,100
I don't know what it is.

604
00:30:04,100 --> 00:30:05,500
We want to draw that.

605
00:30:05,500 --> 00:30:07,100
We co it hasn't downloaded.

606
00:30:07,100 --> 00:30:09,800
We download it right there and draw it right there.

607
00:30:10,000 --> 00:30:13,800
What that means is it creates this sort of bubble where the graphics

608
00:30:13,800 --> 00:30:16,300
card can't start rendering the current frame.

609
00:30:16,300 --> 00:30:18,300
That it's supposed to be rendering that we're like, we need you to run

610
00:30:18,300 --> 00:30:19,000
to this right now.

611
00:30:19,400 --> 00:30:24,000
It can't start rendering that current frame until after it finishes

612
00:30:24,000 --> 00:30:27,100
downloading this gigantic 6, MB texture or something.

613
00:30:28,500 --> 00:30:32,100
Now, that's a real big problem for and I'm actually might be an 8 MB

614
00:30:32,100 --> 00:30:32,500
texture.

615
00:30:32,500 --> 00:30:34,200
What is I, don't remember how much that is.

616
00:30:34,200 --> 00:30:40,800
How much is that 1920 by 1080 by 4 8 megabytes?

617
00:30:42,400 --> 00:30:46,100
So we sent down this 8 MB texture and we're sitting there.

618
00:30:46,100 --> 00:30:46,700
Waiting for the grass.

619
00:30:46,700 --> 00:30:49,800
Try to transfer it before the graphics card can ever even start

620
00:30:49,800 --> 00:30:50,900
rendering that frame.

621
00:30:52,100 --> 00:30:53,000
And that's no good.

622
00:30:53,300 --> 00:30:57,400
What we would rather do is, we'd rather have the graphics card be

623
00:30:57,400 --> 00:30:58,500
transferring this.

624
00:30:58,800 --> 00:31:02,400
While we're drawing frames, we do have the textures for such that when

625
00:31:02,400 --> 00:31:08,300
we get to a frame where we don't have the textures, it will have had

626
00:31:08,300 --> 00:31:10,000
that whole time to put it in.

627
00:31:10,000 --> 00:31:13,300
And hopefully by the time we get to that frame the textures there.

628
00:31:14,000 --> 00:31:16,800
It's exactly analogous to what we were doing with our assets, where we

629
00:31:16,800 --> 00:31:17,900
load them off disk.

630
00:31:17,900 --> 00:31:19,800
And this is just another step in the process.

631
00:31:20,200 --> 00:31:21,700
So before, you know, we

632
00:31:21,900 --> 00:31:24,700
The thing where we've got the disc version of the texture, we've got

633
00:31:24,700 --> 00:31:27,800
the memory version of the texture and then we've got the screen,

634
00:31:28,100 --> 00:31:28,800
right?

635
00:31:28,900 --> 00:31:32,600
And we were just like, okay disc fills to memory, memory fills to

636
00:31:32,600 --> 00:31:33,200
screen.

637
00:31:33,300 --> 00:31:36,900
This is instant, and we do it on every frame, this takes time.

638
00:31:36,900 --> 00:31:38,600
So we overlapped it on a thread.

639
00:31:41,300 --> 00:31:44,600
All we're talking about now is essentially there's another step in

640
00:31:44,600 --> 00:31:46,400
this process, right?

641
00:31:46,400 --> 00:31:47,500
It's the GPU.

642
00:31:47,900 --> 00:31:51,700
We've got to get the texture into the GPU or we could open the

643
00:31:51,700 --> 00:31:54,900
windows, start menu, always fun.

644
00:31:57,200 --> 00:32:03,300
Yeah, so we've got to get into the GPU and this is also not instant.

645
00:32:03,400 --> 00:32:06,800
So what we want to do is if possible put this on a thread as well,

646
00:32:08,700 --> 00:32:09,700
So that's what we're trying to do.

647
00:32:14,200 --> 00:32:14,600
Now.

648
00:32:17,000 --> 00:32:20,400
There was a time when this was more or less impossible.

649
00:32:21,500 --> 00:32:26,000
Like, if you tried to thread a texture, download, you haven't helped

650
00:32:26,000 --> 00:32:26,300
you.

651
00:32:26,900 --> 00:32:31,500
It was not going to work, don't try disaster and and off you go

652
00:32:32,200 --> 00:32:37,200
nowadays, most people try to stream, textures down to the GPU

653
00:32:37,200 --> 00:32:40,800
dynamically because essentially, it really reduces load times.

654
00:32:40,800 --> 00:32:42,300
And also drastically increases.

655
00:32:42,300 --> 00:32:46,100
The amount of detail that you could have because obviously, you can

656
00:32:46,100 --> 00:32:46,500
have a

657
00:32:46,700 --> 00:32:52,300
Any 7 GB Game or something like this where you're free roaming around.

658
00:32:52,300 --> 00:32:55,500
You need to be updating these textures because the graphics card might

659
00:32:55,500 --> 00:32:58,700
only have 512 Meg's or GB on it, right?

660
00:33:00,000 --> 00:33:01,500
A lot of that's taken up with textures.

661
00:33:02,100 --> 00:33:10,000
So nowadays while it's not easy to do ever to ship anything on a GPU

662
00:33:10,000 --> 00:33:13,500
and windows, because you have tons of driver compatibility problems.

663
00:33:13,700 --> 00:33:18,600
Anyway, while it's not easy to ship threaded texture, download it's

664
00:33:18,600 --> 00:33:21,500
not so much more difficult than anything else to get, right?

665
00:33:21,500 --> 00:33:24,500
Which is to say that it's not that hard potentially to get it working

666
00:33:24,500 --> 00:33:27,500
on your machine and then when you go to ship it on Steam, everyone and

667
00:33:27,500 --> 00:33:29,800
their grandmother has a problem with their 12 year old driver.

668
00:33:30,000 --> 00:33:32,500
Her and they're weird graphics card that they overclocked and

669
00:33:32,500 --> 00:33:33,600
everything else, right?

670
00:33:34,700 --> 00:33:40,200
So now, on the PC, it is generally possible to thread on most systems

671
00:33:40,200 --> 00:33:42,800
and you are not necessarily opening yourself up.

672
00:33:42,800 --> 00:33:47,500
As far as I know, anyway, in my my understanding, you're not opening

673
00:33:47,500 --> 00:33:50,300
ourselves up to drastically more driver compatibility bugs than you

674
00:33:50,300 --> 00:33:50,700
already.

675
00:33:50,700 --> 00:33:51,600
Were going to have anyway.

676
00:33:52,000 --> 00:33:54,700
However, unfortunately, that number is still probably quite High

677
00:33:54,700 --> 00:33:59,900
because yeah, drivers and windows drivers and

678
00:34:00,900 --> 00:34:02,400
They conspire to help you.

679
00:34:03,300 --> 00:34:03,900
So anyway,

680
00:34:05,100 --> 00:34:09,400
That's the situation as as we kind of have to deal with it.

681
00:34:09,699 --> 00:34:12,800
That's the primary problem and solve the secondary problem that we had

682
00:34:12,800 --> 00:34:13,300
to solve.

683
00:34:13,300 --> 00:34:15,000
And we read pretty much get this.

684
00:34:15,000 --> 00:34:18,000
I think for free by anything that we do that addresses, this is it

685
00:34:18,000 --> 00:34:18,400
right now.

686
00:34:18,400 --> 00:34:22,199
We're never removing anything from texture memory and what that means

687
00:34:25,300 --> 00:34:28,400
Is that depending on how much text remember, you had we're just going

688
00:34:28,400 --> 00:34:33,600
to keep on filling it up and eventually we might overflow it or worse

689
00:34:33,600 --> 00:34:34,199
yet.

690
00:34:34,500 --> 00:34:39,400
Right now, we have an eviction scheme for our CPU memory for textures,

691
00:34:39,400 --> 00:34:39,600
right?

692
00:34:39,600 --> 00:34:44,600
Like, we're loading in various bitmaps from the asset store when we

693
00:34:44,600 --> 00:34:47,800
evict an asset from the storage.

694
00:34:48,500 --> 00:34:52,800
We never go back and delete its corresponding texture, right?

695
00:34:53,000 --> 00:34:54,699
Because we just did the little hack.

696
00:34:55,100 --> 00:34:56,400
To get this working, right?

697
00:34:56,500 --> 00:34:57,800
So what will happen now?

698
00:34:57,800 --> 00:35:00,000
And like I said we don't really have to think about this as a separate

699
00:35:00,000 --> 00:35:00,200
thing.

700
00:35:00,200 --> 00:35:01,900
I just want people to understand it was happening.

701
00:35:03,500 --> 00:35:05,300
Because when we do this, it would fix it.

702
00:35:05,800 --> 00:35:11,300
But what's happening right now is we have a fixed size CPU asset

703
00:35:11,300 --> 00:35:12,400
store, right?

704
00:35:12,400 --> 00:35:14,700
And then we have our GPU texture memory.

705
00:35:15,000 --> 00:35:18,200
So, what will happen is, we'll fill, you know, texture able coming

706
00:35:18,200 --> 00:35:19,400
here, will do Phil.

707
00:35:19,400 --> 00:35:22,800
Here's the disc that is coming off, textured be will come in here

708
00:35:23,400 --> 00:35:23,800
texture.

709
00:35:23,800 --> 00:35:24,800
See, will come in here.

710
00:35:25,100 --> 00:35:29,200
And every time we're drawing, we're sending these down to the GPU if

711
00:35:29,200 --> 00:35:30,400
they're not there, right?

712
00:35:30,400 --> 00:35:31,100
And they're not.

713
00:35:31,400 --> 00:35:32,400
So they all go down.

714
00:35:32,900 --> 00:35:33,200
Now, the next,

715
00:35:33,300 --> 00:35:35,700
And we draw for children with a b and c, that's all great.

716
00:35:35,700 --> 00:35:38,500
But now we get d.

717
00:35:38,500 --> 00:35:41,400
Right, here's a b and c and d on disk.

718
00:35:41,400 --> 00:35:42,700
Now we get D weld.

719
00:35:42,700 --> 00:35:46,700
He's got nowhere to go because the CPU cache is full, there's no room

720
00:35:46,700 --> 00:35:49,600
for the asset anywhere so it might decide.

721
00:35:49,600 --> 00:35:49,900
Well.

722
00:35:49,900 --> 00:35:52,400
Okay we're gonna, you know, we have that least recently used kind of

723
00:35:52,400 --> 00:35:53,200
thing going on in there.

724
00:35:53,200 --> 00:35:56,200
So it's just like, let's get rid of B because we don't need it.

725
00:35:56,300 --> 00:35:57,100
We're not going to use it.

726
00:35:57,100 --> 00:35:58,300
We haven't used it for several frames.

727
00:35:58,300 --> 00:35:59,500
Now, let's just get rid of being.

728
00:35:59,500 --> 00:35:59,800
We'll put

729
00:36:00,000 --> 00:36:04,400
It's place so be gets removed and D gets put in its place, our CPU

730
00:36:04,400 --> 00:36:08,900
side, memory stuff works nicely, we debugged it and it works so that

731
00:36:08,900 --> 00:36:13,700
just happens but it never tells the GPU that it did that.

732
00:36:13,800 --> 00:36:15,100
So this is still here.

733
00:36:15,300 --> 00:36:19,800
So Wendy comes in, it gets added to the GPU memory, which eventually,

734
00:36:19,800 --> 00:36:22,400
you know, just keeps filling up that GPU memory till it's completely

735
00:36:22,400 --> 00:36:26,100
out if this was where it was now, the driver has to keep backing store

736
00:36:26,100 --> 00:36:29,800
of this thing, which further fills up main memory until all the

737
00:36:30,000 --> 00:36:30,900
Main memory is gone.

738
00:36:30,900 --> 00:36:33,500
And then if you're just done, you're just out of texture memory and

739
00:36:33,500 --> 00:36:35,600
you'll just get gray images or something, right?

740
00:36:36,000 --> 00:36:41,600
So we have a situation that would be untenable in the game right now

741
00:36:41,600 --> 00:36:42,300
anyway.

742
00:36:42,700 --> 00:36:47,800
So at a bare minimum, if we wanted to ship what we have now without

743
00:36:47,800 --> 00:36:54,800
doing something, that was a little more coherent for prepping the GPU,

744
00:36:56,700 --> 00:36:59,800
we would, at least have to add something to our asset code.

745
00:37:00,300 --> 00:37:05,400
That said, whenever we evict an asset from the CPU site asset store,

746
00:37:05,700 --> 00:37:08,800
we also have to evicted from the GPU side asset store.

747
00:37:10,200 --> 00:37:16,100
Which brings us to one more point that is probably worth mentioning.

748
00:37:18,300 --> 00:37:23,300
So right now if you remember the way our CPU asset store works is,

749
00:37:23,300 --> 00:37:26,700
it's essentially a general-purpose allocator like it just puts things

750
00:37:26,700 --> 00:37:30,700
in and then when it frees something it remembers that it's free.

751
00:37:30,800 --> 00:37:34,600
And if you free enough stuff again to make space for another asset,

752
00:37:34,600 --> 00:37:36,400
It'll like use that up, right?

753
00:37:36,400 --> 00:37:39,800
It'll then put something in there but that's what we have right now

754
00:37:41,000 --> 00:37:43,300
and that's it's not particularly well implemented, right?

755
00:37:43,300 --> 00:37:46,300
We put it in there and I said, this is just a basic thing.

756
00:37:46,300 --> 00:37:47,700
This is not a very good allocate.

757
00:37:47,900 --> 00:37:50,600
We're going to save this till we actually have some performance stuff

758
00:37:50,600 --> 00:37:53,500
to run through it and then we'll see if there's anything smarter that

759
00:37:53,500 --> 00:37:54,300
we want to do there.

760
00:37:54,300 --> 00:37:56,600
Because again, you don't really want to over engineer, something like

761
00:37:56,600 --> 00:37:58,400
that because you don't know what it's demands are.

762
00:37:58,600 --> 00:38:01,000
And if you try to over engineer up before, you're actually running

763
00:38:01,000 --> 00:38:04,400
your game through it, you might make bad decisions and you have to

764
00:38:04,400 --> 00:38:06,800
throw away, all that work because it turns out that what you did was

765
00:38:06,800 --> 00:38:07,500
not smart.

766
00:38:07,500 --> 00:38:09,800
It doesn't solve the problem that you actually end up having.

767
00:38:10,300 --> 00:38:13,100
So you don't want to do something like performance upper, optimize

768
00:38:13,100 --> 00:38:17,200
your CPU asset store until you actually know how you used your CPU SS

769
00:38:17,200 --> 00:38:17,600
store.

770
00:38:17,800 --> 00:38:19,700
Kind of obvious, basic programming principle.

771
00:38:19,700 --> 00:38:21,500
Premature optimization is the root of all evil.

772
00:38:21,500 --> 00:38:25,400
I think is the knuth quote perhaps and that is sort of what I'm saying

773
00:38:25,400 --> 00:38:25,600
here.

774
00:38:25,600 --> 00:38:27,700
It's like you don't want to start optimizing something till you

775
00:38:27,700 --> 00:38:31,500
actually know a, whether you need to optimize it unless you're just

776
00:38:31,500 --> 00:38:33,100
trying to do it for fun in which case fine.

777
00:38:34,300 --> 00:38:37,400
But more importantly, if you are gonna spend the time out doing

778
00:38:37,400 --> 00:38:39,500
something, even if you are just doing it for fun, you need to pick the

779
00:38:39,500 --> 00:38:42,900
point in the project where you actually have the data that you can use

780
00:38:42,900 --> 00:38:45,700
to optimize a properly, and we are nowhere near that, right?

781
00:38:45,700 --> 00:38:47,700
We just don't even know until the game is.

782
00:38:47,900 --> 00:38:50,500
Totally Running and you're actually playing it and doing whatever you

783
00:38:50,500 --> 00:38:51,900
don't want to do something like that.

784
00:38:52,500 --> 00:38:54,700
So that's where CP U.

785
00:38:54,700 --> 00:38:55,300
S-- is Taurus.

786
00:38:55,600 --> 00:38:57,100
The GPU asset store.

787
00:39:00,300 --> 00:39:04,800
Obviously also a general purpose out here that GPU the driver

788
00:39:05,100 --> 00:39:07,100
micromanages, this, right?

789
00:39:07,200 --> 00:39:10,700
And like uses regions and the same sort of stuff that we're doing

790
00:39:10,700 --> 00:39:11,100
here.

791
00:39:12,500 --> 00:39:19,100
If we did not do any software rendering, we could turn our CPU asset

792
00:39:19,100 --> 00:39:27,100
store into a fixed size, free list based allocator and it would be

793
00:39:27,100 --> 00:39:32,100
100% efficient because all it would have to store is the handle that

794
00:39:32,100 --> 00:39:35,200
the GPU gave us back for where we put the actual texture.

795
00:39:37,300 --> 00:39:42,700
So what that sort of means, is, if we want to in the future, if we

796
00:39:42,700 --> 00:39:48,100
don't care about how well our assets or performs under software

797
00:39:48,100 --> 00:39:51,500
rendering because at the end of the day software, rendering is purely

798
00:39:51,500 --> 00:39:54,300
an educational feature, like, we don't really need it for anything.

799
00:39:55,700 --> 00:39:58,200
We're always going to run through GPU if it's there because it's going

800
00:39:58,200 --> 00:39:59,400
to be faster, right?

801
00:40:00,700 --> 00:40:05,300
What we could decide to do is change the CPU asset store to actually

802
00:40:05,300 --> 00:40:06,400
just be a fixed size out.

803
00:40:06,500 --> 00:40:11,300
Later that just holds the handle for the GPU side and then what we

804
00:40:11,300 --> 00:40:15,200
would do is just use like virtual lock and virtual free at the OS

805
00:40:15,200 --> 00:40:18,300
layer to allocate and free the size of our things.

806
00:40:18,300 --> 00:40:21,200
If we are on the software renderer because it's we don't care.

807
00:40:21,700 --> 00:40:25,400
That means we don't have to bother actually doing any sort of

808
00:40:25,400 --> 00:40:27,600
optimization for that thing.

809
00:40:28,200 --> 00:40:29,300
So, in some sense,

810
00:40:30,400 --> 00:40:33,200
That might be the right thing to do and we might want to eventually do

811
00:40:33,200 --> 00:40:36,500
that and the reason for that is you don't want to Stack a

812
00:40:36,600 --> 00:40:39,300
general-purpose allocator on top of another general-purpose allocator.

813
00:40:39,300 --> 00:40:43,100
If the driver already is going to do it and we can't stop it.

814
00:40:44,900 --> 00:40:47,100
We might as well, right?

815
00:40:48,500 --> 00:40:48,900
So,

816
00:40:54,300 --> 00:40:55,000
That.

817
00:40:56,900 --> 00:40:57,500
Is that?

818
00:40:58,900 --> 00:41:02,000
All right, so I think that's just about everything that I wanted to

819
00:41:02,000 --> 00:41:03,100
say about texture downloading.

820
00:41:03,100 --> 00:41:08,700
So what we need to do now is put ourselves in some position that we

821
00:41:08,700 --> 00:41:14,300
can start to download these sectors on a separate thread and then use

822
00:41:14,300 --> 00:41:15,500
them in the main thread, right?

823
00:41:15,500 --> 00:41:19,700
So we need some way of sort of getting that feeling to happen and

824
00:41:19,700 --> 00:41:23,800
thankfully for us we already have our loading threaded and we know

825
00:41:23,800 --> 00:41:26,400
that every time we load a texture we want to send it to the GPU at

826
00:41:26,400 --> 00:41:28,900
least at the moment that seems like something that we would want.

827
00:41:29,000 --> 00:41:33,400
To do because if we thought we were going to need it, we pretty much

828
00:41:33,400 --> 00:41:35,200
want to get it to the GPU as fast as possible.

829
00:41:35,700 --> 00:41:39,700
So what we can do is just start to look at that code and see if we can

830
00:41:39,700 --> 00:41:44,200
formulate a good plan for how we're going to make that start to work.

831
00:41:44,200 --> 00:41:45,600
We only have 15 minutes left.

832
00:41:45,600 --> 00:41:47,500
Sir probably not going to implement very much.

833
00:41:47,500 --> 00:41:49,900
But as was anything on handmade hero, anytime?

834
00:41:49,900 --> 00:41:52,100
We're about to do a complex topic, we cannot spend some time with the

835
00:41:52,100 --> 00:41:52,700
white board.

836
00:41:52,800 --> 00:41:53,900
So whatever is on the same page.

837
00:41:53,900 --> 00:41:56,300
You know what we're about to do, instead of just seeing a bunch of

838
00:41:56,300 --> 00:41:57,600
code whizzing around.

839
00:41:58,300 --> 00:41:58,700
So,

840
00:42:00,300 --> 00:42:04,300
All right, here we are in handy, dot CPP, kind of good to be back in

841
00:42:04,300 --> 00:42:05,000
the code base.

842
00:42:05,400 --> 00:42:09,500
And if you remember properly, we have this opengl file and here is

843
00:42:09,500 --> 00:42:12,100
where that stuff that I was talking about, actually takes place.

844
00:42:12,600 --> 00:42:16,900
So if you look in here under render entry bitmap, you can see what I'm

845
00:42:16,900 --> 00:42:17,600
actually talking about.

846
00:42:17,600 --> 00:42:20,100
When I say that we just kind of did this just in time, hacky thing.

847
00:42:20,300 --> 00:42:21,800
Like I said, you may not remember it.

848
00:42:22,100 --> 00:42:23,900
But GL binds texture here.

849
00:42:24,300 --> 00:42:26,100
This is the thing that says we're going to be drawing with this

850
00:42:26,100 --> 00:42:29,800
texture and you can see that what it is predicated on is the fact that

851
00:42:29,800 --> 00:42:29,900
the

852
00:42:30,100 --> 00:42:33,400
Map that we're going to draw, has a handle associated with it.

853
00:42:33,400 --> 00:42:35,700
That handle is the thing that the driver gave us back when we

854
00:42:35,700 --> 00:42:36,400
submitted it.

855
00:42:36,700 --> 00:42:39,400
So if we have one of those, we just bind it and say, hey graphics

856
00:42:39,400 --> 00:42:40,500
card, you already have the section.

857
00:42:40,500 --> 00:42:42,200
We're going to use a section of drawing a second.

858
00:42:42,300 --> 00:42:44,800
So get ready on the other hand.

859
00:42:44,800 --> 00:42:47,700
If we find that there is no handle that means we have to actually bind

860
00:42:47,900 --> 00:42:49,900
a new texture and send it down.

861
00:42:50,100 --> 00:42:51,300
We asked it to do that.

862
00:42:52,800 --> 00:42:54,200
And then we submit the texture.

863
00:42:54,900 --> 00:42:58,600
So this is actually right here, the part that I'm concerned about

864
00:42:59,700 --> 00:43:00,200
again.

865
00:43:00,300 --> 00:43:03,000
There's the part about never freeing them, that's obviously something

866
00:43:03,000 --> 00:43:05,800
that's separate but what I'm talking about when I'm saying

867
00:43:05,800 --> 00:43:08,200
overlapping, the texture download, this is the part we're talking

868
00:43:08,200 --> 00:43:12,100
about this text image to D, is taking the memory for our texture.

869
00:43:12,100 --> 00:43:16,000
So all of that stuff that we loaded into memory off of the drive,

870
00:43:16,600 --> 00:43:19,800
we're trying to submit that down to the graphics card and we don't

871
00:43:19,800 --> 00:43:22,200
know how long that's going to take and we want to give that the

872
00:43:22,500 --> 00:43:25,700
Not only can, we don't want that to potentially cause a hiccup.

873
00:43:25,700 --> 00:43:28,700
If we have to do a bunch of these, we want those to be overlapped.

874
00:43:29,800 --> 00:43:32,800
And what we also know is a lot of modern graphics cards.

875
00:43:33,000 --> 00:43:37,300
Everything, probably from a G4S 500 model and up for example, around

876
00:43:37,300 --> 00:43:38,400
that time, period.

877
00:43:38,800 --> 00:43:41,700
So quite some time ago, I mean they're on like G4S 900 now, right?

878
00:43:41,700 --> 00:43:42,600
Or something like this.

879
00:43:42,900 --> 00:43:46,600
So quite a while ago they have things on them called copy engines and

880
00:43:46,600 --> 00:43:49,700
those copy engines are actually pieces of the graphics card that are

881
00:43:50,100 --> 00:43:53,400
that do nothing other than transfer stuff like textures over to the

882
00:43:53,400 --> 00:43:56,700
graphics card asynchronously while the graphics card is doing other

883
00:43:56,700 --> 00:43:57,100
things.

884
00:43:57,500 --> 00:43:58,000
So

885
00:43:59,100 --> 00:44:02,200
We know that there's plenty there for us to take advantage of and that

886
00:44:02,200 --> 00:44:06,300
we can, we are not like interrupting, the rendering of our frame by

887
00:44:06,300 --> 00:44:09,200
asking the graphics hard to do this transfer on lots of different

888
00:44:09,200 --> 00:44:10,000
Modern Hardware.

889
00:44:10,000 --> 00:44:12,200
It's actually set up to do exactly this.

890
00:44:12,800 --> 00:44:13,200
So,

891
00:44:14,400 --> 00:44:17,900
What we want to do is figure out a way to move this GL text, image 2D

892
00:44:18,100 --> 00:44:22,300
out to somewhere where it can actually happen in an asynchronous

893
00:44:22,300 --> 00:44:25,100
fashion and this is going to turn out to be a lot more difficult than

894
00:44:25,100 --> 00:44:25,900
you might think.

895
00:44:25,900 --> 00:44:30,000
And a lot of that has to do with the fact that the opengl API was not

896
00:44:30,000 --> 00:44:31,600
designed with anything like this in mind.

897
00:44:31,700 --> 00:44:34,300
And so the way that you end up doing it is kind of a little bit janky

898
00:44:34,700 --> 00:44:35,200
but

899
00:44:37,400 --> 00:44:43,100
So back to a little bit more of a fresher, if we go into our handmade

900
00:44:43,100 --> 00:44:47,200
asset that CPP, then you know that we've got sort of this, this

901
00:44:47,200 --> 00:44:52,000
concept here of the asynchronous loading and you can kind of go in and

902
00:44:52,000 --> 00:44:55,100
see, we've got like, like load bitmap here, right?

903
00:44:55,300 --> 00:44:58,200
And this is the code that gets executed when we need to load one.

904
00:44:58,500 --> 00:44:59,500
You can see what happens.

905
00:44:59,500 --> 00:44:59,800
We say,

906
00:45:00,100 --> 00:45:05,900
Okay, I need you to like to sort of create this job like this this

907
00:45:05,900 --> 00:45:07,500
sort of work structure.

908
00:45:07,500 --> 00:45:09,200
We called it right like that asset work.

909
00:45:09,200 --> 00:45:12,700
And I here's all the information you need to go get off the off of our

910
00:45:13,200 --> 00:45:14,700
out of our asset file.

911
00:45:15,400 --> 00:45:16,400
Here's this information.

912
00:45:16,400 --> 00:45:20,800
You need to go and load that asset, right?

913
00:45:21,700 --> 00:45:25,500
And so then it calls dispatches up to here to load asset work

914
00:45:25,500 --> 00:45:27,800
directly, I believe is the is the actual dispatch, right?

915
00:45:27,800 --> 00:45:29,900
Because here's the load asset work, and it just calls

916
00:45:30,000 --> 00:45:31,300
Is that load s at work directly?

917
00:45:33,600 --> 00:45:36,200
So if we call, if we look at load a server directly, we can see what

918
00:45:36,200 --> 00:45:36,800
happens.

919
00:45:37,600 --> 00:45:42,100
All it does is first it reads the chunk out of the file that we want

920
00:45:42,100 --> 00:45:45,500
it and then it looks to see if it was able to do.

921
00:45:45,500 --> 00:45:51,500
So what would it actually need to do in order to finish making this

922
00:45:51,500 --> 00:45:53,200
asset like usable?

923
00:45:54,000 --> 00:45:56,500
And you can see that for a font there's some stuff that it actually

924
00:45:56,500 --> 00:45:59,800
had to do so we were already in a position to say

925
00:46:00,100 --> 00:46:05,300
If this was a bitmap do some extra stuff like submit GL, text image

926
00:46:05,300 --> 00:46:05,700
2D.

927
00:46:05,900 --> 00:46:10,900
So we are actually we put ourselves already in a very nice position to

928
00:46:10,900 --> 00:46:14,000
write this code properly because what we can say here is like I want

929
00:46:14,000 --> 00:46:17,700
you to do a finalized asset, you know, texture on this thing or

930
00:46:17,700 --> 00:46:18,200
something.

931
00:46:19,600 --> 00:46:22,500
We'll call it image or bitmap because I think we'd want to just keep

932
00:46:22,500 --> 00:46:26,000
using that terminology rather than use the graphics card one.

933
00:46:26,500 --> 00:46:30,600
But if I come down here and say like okay, you know, in this case I've

934
00:46:30,600 --> 00:46:31,100
got

935
00:46:33,000 --> 00:46:36,200
Another thing that I want to do, when I have to finalize something,

936
00:46:36,900 --> 00:46:42,400
then what I, what I need to figure out is some way to move that GL

937
00:46:42,400 --> 00:46:45,200
text, image to D over here, to this other thread.

938
00:46:46,500 --> 00:46:50,100
So in a world where we didn't have like all this driver complexity and

939
00:46:50,100 --> 00:46:53,800
whatever we would be able to do exactly this because if you look at it

940
00:46:53,800 --> 00:46:59,300
we've actually got essentially all of the information that we need

941
00:46:59,400 --> 00:47:00,200
right there.

942
00:47:00,200 --> 00:47:03,700
There isn't like we have the width, we have the height, we know it's

943
00:47:03,700 --> 00:47:07,700
be gra, we know it's unsigned byte we have the memory so we have

944
00:47:07,700 --> 00:47:09,400
everything that we had here.

945
00:47:10,500 --> 00:47:10,800
Right.

946
00:47:10,800 --> 00:47:17,600
That's all the same in the the GL, I forget what it is that GL Tech.

947
00:47:17,600 --> 00:47:18,600
Where is that thing?

948
00:47:18,600 --> 00:47:25,400
There's a default internal texture format, see your default default.

949
00:47:25,400 --> 00:47:27,500
Internal checks in for Matt.

950
00:47:27,500 --> 00:47:33,300
Yeah, that's just some arbitrary thing that we defined and so we could

951
00:47:33,700 --> 00:47:36,600
we just need some way of like, passing this piece of information down

952
00:47:36,600 --> 00:47:39,800
about whether or not we want it to be srgb or RGB.

953
00:47:41,600 --> 00:47:43,800
And that just depends on whether we saw the extension.

954
00:47:44,800 --> 00:47:48,300
So we have one piece of information that we'd have to conduit in here.

955
00:47:48,500 --> 00:47:50,100
That's not particularly hard.

956
00:47:50,200 --> 00:47:51,700
It's something that gets set once.

957
00:47:51,700 --> 00:47:53,700
There's actually no race conditions accessing it.

958
00:47:53,700 --> 00:47:56,100
So it's threading threaded access to a thing that's essentially

959
00:47:56,100 --> 00:47:56,700
constant.

960
00:47:56,800 --> 00:47:59,500
We don't have to worry about it at all so we can fix that no problem.

961
00:48:00,200 --> 00:48:01,800
What we can't fix.

962
00:48:03,400 --> 00:48:12,400
Is the fact that this GL text image, 2D has no notion of where or when

963
00:48:12,400 --> 00:48:13,800
or why it's executing.

964
00:48:14,500 --> 00:48:18,200
Because if you remember, when we talked about how opengl works,

965
00:48:18,700 --> 00:48:24,000
there's essentially a opengl context, associated with every thread.

966
00:48:24,600 --> 00:48:28,500
And when you issue one of these calls, like GL text image to D, what

967
00:48:28,500 --> 00:48:31,300
it's doing, is this looking up in the thread-local storage?

968
00:48:31,400 --> 00:48:32,600
What context that is

969
00:48:33,700 --> 00:48:40,300
And executing things on that context, opengl does not allow the same

970
00:48:40,300 --> 00:48:43,700
context to be active on two threads at once.

971
00:48:44,400 --> 00:48:48,800
So the main thread, which is calling these GL text operator, these GL

972
00:48:48,900 --> 00:48:49,900
drawing operations

973
00:48:51,300 --> 00:48:57,400
cannot be using the same context as this so we can't just call GL text

974
00:48:57,400 --> 00:49:00,100
image to d right here and expect it to work.

975
00:49:00,200 --> 00:49:02,000
It will totally fail, right?

976
00:49:02,000 --> 00:49:04,900
It will not work at all and just to kind of underscore that I'll go

977
00:49:04,900 --> 00:49:06,000
ahead and show you what I mean.

978
00:49:10,500 --> 00:49:12,100
I guess we also probably want to do this, huh?

979
00:49:17,600 --> 00:49:20,000
So let's say, we move all this stuff out there, right?

980
00:49:20,000 --> 00:49:21,200
This is all going to be out there.

981
00:49:23,700 --> 00:49:26,900
So when we come through here, we would just do instead of this, if

982
00:49:26,900 --> 00:49:29,900
entry bitmap handle stuff, we would just always bind the bitmap

983
00:49:29,900 --> 00:49:30,400
handle.

984
00:49:31,400 --> 00:49:32,600
We just always find it.

985
00:49:32,900 --> 00:49:35,900
If it happens to be 0, that just means that this texture isn't there

986
00:49:35,900 --> 00:49:36,000
yet?

987
00:49:36,000 --> 00:49:38,100
Which means that we won't draw anything, which is fine.

988
00:49:38,100 --> 00:49:39,100
That just means the asset.

989
00:49:39,100 --> 00:49:40,700
Wasn't there, we missed the cash.

990
00:49:41,000 --> 00:49:42,700
What are you going to do, right?

991
00:49:42,900 --> 00:49:45,500
We could choose to stall at this point, right?

992
00:49:45,500 --> 00:49:49,400
We could choose to hold the frame to do Casey, you know, hold the

993
00:49:49,400 --> 00:49:50,000
frame.

994
00:49:50,400 --> 00:49:52,000
If we are not.

995
00:49:53,000 --> 00:49:54,600
Ready with the texter.

996
00:49:56,400 --> 00:49:57,700
So, we could choose do that in the future.

997
00:49:57,700 --> 00:50:00,700
If you want to or we could say 60 frames a second, is more important

998
00:50:00,800 --> 00:50:02,800
than having everything lasting draw properly.

999
00:50:03,000 --> 00:50:05,100
So just don't and it's always go.

1000
00:50:06,300 --> 00:50:07,200
Right, we could do that.

1001
00:50:08,700 --> 00:50:11,800
But then the code essentially looks like this and now this code is

1002
00:50:11,800 --> 00:50:12,400
over here.

1003
00:50:14,300 --> 00:50:19,000
So again, two problems with this first problem is, we don't want to be

1004
00:50:19,000 --> 00:50:24,300
calling GL code in the middle of our of our code path here, right?

1005
00:50:24,300 --> 00:50:28,300
Because for all we know we're not even running on opengl, right?

1006
00:50:28,600 --> 00:50:30,300
So we want to have something here.

1007
00:50:30,300 --> 00:50:32,500
We need this to be a little more clean and we need this to be a little

1008
00:50:32,500 --> 00:50:33,500
more platforms separated.

1009
00:50:33,500 --> 00:50:36,700
We had all our open GL code, kind of isolated we want to keep that

1010
00:50:36,900 --> 00:50:37,700
being true.

1011
00:50:38,100 --> 00:50:41,200
So really what we're going to have to do is sort of pull this out and

1012
00:50:41,200 --> 00:50:42,700
make it a little more isolated first.

1013
00:50:42,700 --> 00:50:43,900
That's obviously going to have to happen.

1014
00:50:44,000 --> 00:50:45,100
Ian butt.

1015
00:50:46,300 --> 00:50:50,000
Beyond that, what we need to do is figure out some way to make an

1016
00:50:50,000 --> 00:50:55,000
additional to make an opengl context that this thing can actually use

1017
00:50:55,000 --> 00:50:56,200
to download the texture.

1018
00:50:57,100 --> 00:50:58,600
So we need to do that as well.

1019
00:50:59,300 --> 00:50:59,800
That's what we need.

1020
00:51:00,000 --> 00:51:03,100
You and we have seven minutes, so forget it's not even remotely going

1021
00:51:03,100 --> 00:51:06,300
to happen but we can start, we can get a little further.

1022
00:51:07,100 --> 00:51:09,800
So, let's talk about what happened in here.

1023
00:51:09,800 --> 00:51:14,600
I don't know if we actually put the make, I don't think we did right?

1024
00:51:14,600 --> 00:51:16,700
Because the wiggle code should be in win32.

1025
00:51:17,400 --> 00:51:18,500
Yeah, here we go.

1026
00:51:19,000 --> 00:51:20,800
So, win32 handmade dot CPP.

1027
00:51:21,400 --> 00:51:23,100
We have the wiggle make current

1028
00:51:24,000 --> 00:51:24,800
Or we should.

1029
00:51:26,100 --> 00:51:26,400
Oh wait.

1030
00:51:26,400 --> 00:51:27,700
That's the H file my bad?

1031
00:51:29,100 --> 00:51:30,500
so we go make current

1032
00:51:31,600 --> 00:51:33,000
here is we go make current

1033
00:51:34,200 --> 00:51:38,500
You can see this is our opengl startup code and so what we did with

1034
00:51:38,500 --> 00:51:42,000
the opengl startup code, as we said, all right, we need to create a

1035
00:51:42,000 --> 00:51:45,200
context and then we did what was called context Exploration with our

1036
00:51:45,200 --> 00:51:49,400
beliefs, what I call concentration, which is saying when and I'm not

1037
00:51:49,400 --> 00:51:51,500
going to spend all that again because we have a whole episode about it

1038
00:51:51,500 --> 00:51:54,500
but basically we start out with an opengl one point.

1039
00:51:54,500 --> 00:51:58,500
Next contacts we want an opengl more modern, one opengl 3.0 so then we

1040
00:51:58,500 --> 00:52:00,900
escalate to and opengl 3.0 context and Africa.

1041
00:52:00,900 --> 00:52:04,200
Right now when we did this

1042
00:52:04,100 --> 00:52:07,400
Yes, I sort of hinted at the thing that we would eventually have to

1043
00:52:07,400 --> 00:52:11,600
do, which is that when we do this wiggle, create context of trips are

1044
00:52:11,600 --> 00:52:12,700
right.

1045
00:52:12,700 --> 00:52:15,700
You can see that there's this thing called the share context.

1046
00:52:15,700 --> 00:52:19,900
The share context is saying when I create a context, I may want to

1047
00:52:19,900 --> 00:52:23,500
create another context who shares memory with this other context.

1048
00:52:23,500 --> 00:52:26,500
So that if I download a texture to one of them, it's accessible in

1049
00:52:26,500 --> 00:52:26,700
either.

1050
00:52:26,700 --> 00:52:28,800
And that's exactly what we want to do.

1051
00:52:28,800 --> 00:52:33,900
So all we need to do to start setting ourselves up for calling GL.

1052
00:52:34,100 --> 00:52:39,100
XO image on a separate thread is make sure that any thread that could

1053
00:52:39,100 --> 00:52:40,000
call GL text.

1054
00:52:40,000 --> 00:52:46,100
Image 2D has a context that is shared with our context and then all of

1055
00:52:46,100 --> 00:52:49,700
them can be downloading textures and we would necessarily have a

1056
00:52:49,700 --> 00:52:50,900
problem now.

1057
00:52:52,000 --> 00:52:55,200
Whether the driver freaks out if we have four threads trying to

1058
00:52:55,200 --> 00:52:57,900
download text at the same time, I don't know, we're certainly going to

1059
00:52:57,900 --> 00:53:01,800
find out, but there's no technical reason why we shouldn't be able to

1060
00:53:01,800 --> 00:53:04,400
do it if the drivers written properly, then that would work.

1061
00:53:05,000 --> 00:53:10,900
So if we take a look at when we do our create thread, and I'm sorry

1062
00:53:10,900 --> 00:53:12,500
that I'm jumping around here a little bit,

1063
00:53:14,600 --> 00:53:16,600
But a lot of pieces come into play here.

1064
00:53:16,600 --> 00:53:18,000
So I'm just trying to give you what they all are.

1065
00:53:18,700 --> 00:53:22,200
You can see that when we do win three to make you you asked for a

1066
00:53:22,200 --> 00:53:26,700
thread count and we go through each of the threads, creating a new

1067
00:53:26,700 --> 00:53:30,400
thread, which goes ahead and calls into the thread proc.

1068
00:53:30,600 --> 00:53:35,300
And that thread proc is the thing that sits there and waits for a work

1069
00:53:35,300 --> 00:53:40,300
queue entry every time that it basically sits there waiting for work

1070
00:53:40,300 --> 00:53:40,700
to do.

1071
00:53:41,200 --> 00:53:43,900
Now, when it gets work to do, it will do that work.

1072
00:53:44,400 --> 00:53:46,500
And when it does that work, one of the pieces of work.

1073
00:53:46,500 --> 00:53:50,000
It might do is to call through here and call finalize as a bitmap.

1074
00:53:50,200 --> 00:53:55,800
Which means that any thread that is created on our work system needs

1075
00:53:55,800 --> 00:53:58,500
to have an opengl context associated with it.

1076
00:53:58,600 --> 00:53:59,800
Otherwise the GL

1077
00:54:00,000 --> 00:54:01,500
Image 2D call Will Fail.

1078
00:54:02,600 --> 00:54:07,100
So what we need to do here before any thread proc actually goes into

1079
00:54:07,100 --> 00:54:12,500
service, we need to make sure that it has created its own context.

1080
00:54:12,500 --> 00:54:14,100
So we need to do something here.

1081
00:54:14,100 --> 00:54:19,100
Like win32 create opengl context for worker thread.

1082
00:54:22,300 --> 00:54:27,200
Once we have that then these threads will be able to perform those

1083
00:54:27,200 --> 00:54:27,800
downloads.

1084
00:54:28,000 --> 00:54:30,800
Now we don't actually want them to perform the downloads directly here

1085
00:54:30,800 --> 00:54:33,600
like I said because we probably don't want opengl code sitting in the

1086
00:54:33,600 --> 00:54:36,400
middle of our otherwise platform independent code.

1087
00:54:37,700 --> 00:54:39,200
But that is a problem.

1088
00:54:39,200 --> 00:54:42,700
We can easily solve later by having this code, either use something

1089
00:54:42,700 --> 00:54:47,000
that calls the platform where to download, or we can do something even

1090
00:54:47,300 --> 00:54:48,200
more ridiculous.

1091
00:54:48,200 --> 00:54:48,800
In fact,

1092
00:54:51,600 --> 00:54:54,800
You know, this might be the better thing to do and I don't really

1093
00:54:54,800 --> 00:54:55,300
know.

1094
00:54:57,900 --> 00:55:03,800
So, the other thing we could do is actually just put this on a cue for

1095
00:55:03,800 --> 00:55:06,100
another thread to download and have it picked up.

1096
00:55:06,100 --> 00:55:08,600
It just seems like too complicated, so I feel like this is probably

1097
00:55:08,600 --> 00:55:10,200
the better way to go and we'll see.

1098
00:55:10,700 --> 00:55:11,200
Alright.

1099
00:55:11,300 --> 00:55:14,500
So what we would do is we'd say, hey create an opengl context is so we

1100
00:55:14,500 --> 00:55:16,800
know that it's already set up for that.

1101
00:55:16,900 --> 00:55:19,600
And then when it comes through here, to finalize bitmap, it knows that

1102
00:55:19,600 --> 00:55:21,900
it will always work properly, right?

1103
00:55:27,300 --> 00:55:31,500
Okay, so let's go ahead and see what we would need to do for that.

1104
00:55:31,500 --> 00:55:34,700
So I'm going to go ahead and take this guy here and take a look at

1105
00:55:34,700 --> 00:55:35,400
that wiggle.

1106
00:55:35,400 --> 00:55:36,300
Make current

1107
00:55:38,200 --> 00:55:39,000
So, here we are.

1108
00:55:41,200 --> 00:55:43,900
And here's our win32 in opengl.

1109
00:55:44,200 --> 00:55:46,900
So what we need is essentially another one of these, right?

1110
00:55:47,100 --> 00:55:48,300
We need one of these.

1111
00:55:52,300 --> 00:55:55,300
We're all it's going to do is it's going to do this, right?

1112
00:55:55,300 --> 00:55:59,600
It's literally just going to do just this one part right here, and

1113
00:55:59,600 --> 00:56:00,200
that's all

1114
00:56:04,800 --> 00:56:06,500
Like I said, you have to bear with me on the editor, I'm still

1115
00:56:06,500 --> 00:56:07,500
learning the modal.

1116
00:56:07,500 --> 00:56:11,400
Like I'm still learning the modal ropes if you will.

1117
00:56:12,100 --> 00:56:15,700
So when three to create up until context for worker thread, it just

1118
00:56:15,700 --> 00:56:18,200
needs to come in here and do exactly this thing.

1119
00:56:18,400 --> 00:56:21,700
Where, instead of passing the sugar context of 0, I'm going to

1120
00:56:21,700 --> 00:56:24,900
actually say that it you know you just need to tell me what that share

1121
00:56:24,900 --> 00:56:28,800
contacts actually is and then you know I would I would be all set,

1122
00:56:29,000 --> 00:56:29,700
right?

1123
00:56:30,000 --> 00:56:32,200
We would just do exactly this and off we go.

1124
00:56:32,800 --> 00:56:37,600
Now the window DC part, I don't actually know whether we need to ever

1125
00:56:37,600 --> 00:56:38,500
pass this window.

1126
00:56:38,500 --> 00:56:42,900
Do you see, we certainly could pass the window DC, but since this kind

1127
00:56:42,900 --> 00:56:44,700
of can never draw to window DC.

1128
00:56:45,300 --> 00:56:49,400
I don't actually know if it's more appropriate to actually just use 0

1129
00:56:49,400 --> 00:56:50,000
for it.

1130
00:56:50,400 --> 00:56:55,200
I couldn't tell you like I feel like you would probably want to do

1131
00:56:55,200 --> 00:56:59,800
something more like this and

1132
00:57:00,100 --> 00:57:02,000
Again, I'm not 100% sure.

1133
00:57:02,000 --> 00:57:02,800
Totally honest with you.

1134
00:57:03,300 --> 00:57:05,700
So what I would say is we probably want to check

1135
00:57:11,800 --> 00:57:15,700
For example, I have a particular presentation in mind.

1136
00:57:18,900 --> 00:57:23,100
And we just want to see what they would recommend.

1137
00:57:23,200 --> 00:57:27,000
Because basically, any time your program, your GPU, you want to see

1138
00:57:27,000 --> 00:57:29,900
what the graphs card, vendor people say, because that's usually the

1139
00:57:29,900 --> 00:57:33,500
best, the best option, right?

1140
00:57:34,600 --> 00:57:35,500
So, let's see.

1141
00:57:37,200 --> 00:57:41,400
So to them, it would appear that they want to pass the windy see,

1142
00:57:41,800 --> 00:57:42,300
right?

1143
00:57:43,200 --> 00:57:46,500
And so because that's what they're saying, I'm just going to assume

1144
00:57:46,500 --> 00:57:47,600
that that's the right thing to do.

1145
00:57:47,700 --> 00:57:51,500
And then it sets it up in the right position this, by the way, is

1146
00:57:52,100 --> 00:57:56,000
presentation specifically about this, about the copy engines on the

1147
00:57:56,000 --> 00:57:59,600
fair me and up, which you could look for if you want to know more

1148
00:57:59,600 --> 00:58:03,700
about asynchronous texture transfers, right?

1149
00:58:04,900 --> 00:58:06,500
So anyway so we we

1150
00:58:06,700 --> 00:58:09,900
You want to do this, we do want to have the windy, see in there, so

1151
00:58:09,900 --> 00:58:15,200
we're going to have to pass those two things to this, which means that

1152
00:58:15,200 --> 00:58:16,900
we actually need some way of getting them.

1153
00:58:17,200 --> 00:58:20,700
Now, we know that we can always get the DC of our window.

1154
00:58:21,100 --> 00:58:24,000
So, in theory, we could even save the DC of our window because if I

1155
00:58:24,000 --> 00:58:26,200
remember correctly, we actually do CS own DC.

1156
00:58:26,200 --> 00:58:30,400
So we actually always have the DC of our of our, we know.

1157
00:58:30,400 --> 00:58:32,000
Anyway, the point being

1158
00:58:33,600 --> 00:58:37,100
If we do this, if we have the window see and the sure context, then

1159
00:58:37,100 --> 00:58:38,500
all that's missing is those a trips?

1160
00:58:38,700 --> 00:58:41,900
So these art ribs, we can just move out, right?

1161
00:58:42,600 --> 00:58:46,100
And and save them because we know we want them to pretty much always

1162
00:58:46,100 --> 00:58:46,600
be the same.

1163
00:58:46,600 --> 00:58:47,100
I think.

1164
00:58:47,600 --> 00:58:53,600
So if I just put those guys out here and we call this, you know, win32

1165
00:58:53,600 --> 00:58:54,800
open Jill at ribs.

1166
00:58:55,200 --> 00:58:58,400
We can just make that be something that everyone has access to.

1167
00:58:59,500 --> 00:59:00,500
It looks like I'm out of time.

1168
00:59:00,500 --> 00:59:02,000
So we'll probably have to stop for today.

1169
00:59:03,500 --> 00:59:04,100
Which is fine.

1170
00:59:04,900 --> 00:59:07,700
All right, so we've got our went through to open till at ribs this

1171
00:59:07,700 --> 00:59:08,400
down here.

1172
00:59:08,400 --> 00:59:10,700
Should also be the win32 opengl at ribs.

1173
00:59:14,700 --> 00:59:18,700
And I think that's pretty much all there is to it.

1174
00:59:18,700 --> 00:59:23,600
Now, if the wiggle make current doesn't succeed, then there really

1175
00:59:23,600 --> 00:59:25,900
nothing we can probably do about that.

1176
00:59:25,900 --> 00:59:28,500
I mean if for some reason, it doesn't want to create another one for

1177
00:59:28,500 --> 00:59:28,800
us.

1178
00:59:29,600 --> 00:59:33,000
I think this is probably just going to be like a fatal error scenario.

1179
00:59:33,000 --> 00:59:36,600
I mean the game just if we can't get a download context there's really

1180
00:59:36,600 --> 00:59:37,900
nothing we're going to be able to do.

1181
00:59:38,100 --> 00:59:42,600
I mean we could try to engineer some kind of crazy backup path for it.

1182
00:59:42,800 --> 00:59:44,300
But on the whole I think it would be pretty important.

1183
00:59:44,500 --> 00:59:44,800
Possible.

1184
00:59:46,000 --> 00:59:50,300
So anyway, this is really what we need to do, and once we have this

1185
00:59:50,600 --> 00:59:55,000
such that, we've got our open gel DC set for every one of those

1186
00:59:55,000 --> 00:59:55,900
contexts.

1187
00:59:56,000 --> 00:59:57,100
We're pretty much good to go.

1188
00:59:57,400 --> 00:59:59,800
So we just need to save this in this, these pieces of

1189
01:00:00,000 --> 01:00:00,600
Formation.

1190
01:00:00,800 --> 01:00:03,100
I think we might have a global window handle.

1191
01:00:03,400 --> 01:00:07,000
I can't quite remember whether we do or whether we don't though, do

1192
01:00:07,000 --> 01:00:07,400
we?

1193
01:00:07,400 --> 01:00:11,900
Let's see, I guess we don't so it looks like we never actually store

1194
01:00:11,900 --> 01:00:13,000
that unfortunately.

1195
01:00:13,500 --> 01:00:17,600
So what I guess I would say is maybe we want to just go ahead and be

1196
01:00:17,600 --> 01:00:23,300
relatively careful about this and go ahead and pass it through a

1197
01:00:23,300 --> 01:00:24,200
little more cleanly.

1198
01:00:24,600 --> 01:00:28,200
So what we would do for that is where we call create window.

1199
01:00:29,500 --> 01:00:30,100
PX.

1200
01:00:31,500 --> 01:00:32,100
Which is here.

1201
01:00:32,700 --> 01:00:34,500
You can see us creating our window.

1202
01:00:34,900 --> 01:00:40,600
Now, when we create our Q is a little bit earlier, we've got this test

1203
01:00:40,600 --> 01:00:43,300
code up here and we do our make you stuff.

1204
01:00:43,400 --> 01:00:44,200
What we can do.

1205
01:00:44,200 --> 01:00:47,200
I believe I don't think there's really any reason that we would need

1206
01:00:47,200 --> 01:00:49,100
to do it at a different time.

1207
01:00:49,400 --> 01:00:53,800
So I believe what we could do is move the cue creation down such that

1208
01:00:53,800 --> 01:01:00,400
when we make the queue we could we could have the window handle ready.

1209
01:01:00,700 --> 01:01:01,100
So when

1210
01:01:01,300 --> 01:01:06,200
Create this window we could go ahead and create the cues afterwards

1211
01:01:06,400 --> 01:01:09,500
such that when we create the Q, we are in a position to pass the

1212
01:01:09,500 --> 01:01:15,300
window actually to it and we could even initialize the opengl I guess.

1213
01:01:15,300 --> 01:01:17,900
I don't know if we can initialize the open till after.

1214
01:01:17,900 --> 01:01:20,200
Or before before or after the toggle full screen.

1215
01:01:20,400 --> 01:01:22,800
I think we could do it at either time.

1216
01:01:24,500 --> 01:01:28,200
But yeah, I guess we can even move this down even further, right?

1217
01:01:28,300 --> 01:01:30,200
So we've initialized opengl here.

1218
01:01:32,000 --> 01:01:36,400
And when we initialize opengl, we could just pass the HCL RSC.

1219
01:01:36,900 --> 01:01:38,500
This is the opengl RC

1220
01:01:41,500 --> 01:01:43,500
And then these guys can get that past.

1221
01:01:43,600 --> 01:01:48,600
So when we call make you, in this case, I believe the low priority

1222
01:01:48,600 --> 01:01:50,200
queue is the one we're concerned about.

1223
01:01:50,200 --> 01:01:54,800
There's two of them and so here, I can pass the opengl RC and the

1224
01:01:54,800 --> 01:01:56,500
window handle like so.

1225
01:01:57,400 --> 01:02:00,600
And this one could just have those be sort of nullified out, if that

1226
01:02:00,600 --> 01:02:01,200
makes sense.

1227
01:02:01,400 --> 01:02:04,000
So that would be the signal that it doesn't ever actually need to do

1228
01:02:04,000 --> 01:02:04,500
that.

1229
01:02:05,900 --> 01:02:09,000
And if we go, so let's say that that

1230
01:02:09,200 --> 01:02:09,500
True.

1231
01:02:09,500 --> 01:02:12,600
In fact, let's let's I know I'm over time here but, you know, we

1232
01:02:12,600 --> 01:02:15,500
haven't done handmade here in a while, so I feel like I'm entitled to

1233
01:02:15,500 --> 01:02:16,800
a little extra programming time.

1234
01:02:17,000 --> 01:02:18,200
Let's just do one last thing.

1235
01:02:19,300 --> 01:02:22,400
So all I wanted to do here with say that when we actually do create

1236
01:02:22,400 --> 01:02:26,700
that, so when we do our win32 make you obviously the thing that has to

1237
01:02:26,700 --> 01:02:29,500
do the we're going to make current is actually the thread proc and we

1238
01:02:29,500 --> 01:02:32,700
have this this parameter, which is the platform where Q thing does the

1239
01:02:32,700 --> 01:02:33,800
cue on it, right?

1240
01:02:34,800 --> 01:02:36,000
It sets this stuff up.

1241
01:02:36,700 --> 01:02:39,600
That's the thing that we actually want to probably put the data in.

1242
01:02:40,100 --> 01:02:40,400
Right.

1243
01:02:40,400 --> 01:02:42,000
We probably want to put the data in there.

1244
01:02:43,100 --> 01:02:44,300
The platform work queue though.

1245
01:02:44,300 --> 01:02:46,300
I guess it's not really a win32 thing.

1246
01:02:46,500 --> 01:02:51,200
I don't think it's not defined in the winter to layer if I'm not

1247
01:02:51,200 --> 01:02:55,700
mistaken like platform where Q is not a thing that makes sense.

1248
01:02:56,100 --> 01:02:59,500
So what we probably want to do is actually extend that notion a little

1249
01:02:59,500 --> 01:02:59,800
bit

1250
01:03:00,500 --> 01:03:03,900
And see that there's actually another piece of information there,

1251
01:03:04,100 --> 01:03:04,400
right?

1252
01:03:04,400 --> 01:03:05,900
Another like thing on top of it.

1253
01:03:06,300 --> 01:03:11,200
And so what I'm going to do is say okay there's you know, struct win32

1254
01:03:11,600 --> 01:03:15,300
thread startup or something like this and in there will have stuff

1255
01:03:15,300 --> 01:03:18,500
like platform work queue.

1256
01:03:20,600 --> 01:03:25,000
But then we'll also have the window handle and the opengl RC.

1257
01:03:28,100 --> 01:03:28,500
Here we go.

1258
01:03:31,100 --> 01:03:31,700
Make sense.

1259
01:03:32,300 --> 01:03:36,200
So that's our, you know, that's our game plan anyway with that.

1260
01:03:37,000 --> 01:03:40,800
And so then when I'm in here, I can make one of these guys went

1261
01:03:40,800 --> 01:03:44,600
through threads win32 thread startup, and I'll just call this thread

1262
01:03:44,600 --> 01:03:45,200
startup.

1263
01:03:47,500 --> 01:03:51,400
And in this case, we'll just pass the thread startup.

1264
01:03:54,000 --> 01:03:56,700
Code with nothing in it.

1265
01:03:57,800 --> 01:04:01,100
And in this case, we'll pass the thread startup code with something in

1266
01:04:01,100 --> 01:04:01,400
it.

1267
01:04:05,500 --> 01:04:05,900
There we go.

1268
01:04:06,600 --> 01:04:15,300
So we've got thread start up that window, red startup dot opengl.

1269
01:04:15,300 --> 01:04:15,700
I see.

1270
01:04:18,600 --> 01:04:19,200
so,

1271
01:04:22,000 --> 01:04:26,000
Now, we're in position 2.

1272
01:04:28,900 --> 01:04:29,300
Excuse me.

1273
01:04:29,400 --> 01:04:29,800
I don't know why.

1274
01:04:29,800 --> 01:04:31,200
I feel the need to type that whole thing in.

1275
01:04:32,200 --> 01:04:34,200
Now, we're in position to have this guy.

1276
01:04:37,500 --> 01:04:38,700
Fill out the startup structure.

1277
01:04:38,700 --> 01:04:43,400
So basically, if startup and in fact, we know we always need one.

1278
01:04:49,000 --> 01:04:51,300
so if we're past the startup in it,

1279
01:04:53,800 --> 01:04:55,200
You know, I think we are always passed one.

1280
01:04:55,200 --> 01:04:55,700
Never mind.

1281
01:04:55,800 --> 01:04:56,700
We were always passing.

1282
01:05:00,000 --> 01:05:00,400
Yeah.

1283
01:05:03,700 --> 01:05:07,400
So now when we go ahead and do this whole Q thing, right?

1284
01:05:08,300 --> 01:05:11,100
And we passed the platform work queue thing there.

1285
01:05:13,200 --> 01:05:16,500
Oh and now that I think about it I guess this stuff actually kind of

1286
01:05:16,500 --> 01:05:22,100
comes in like automatically so we don't even need that part of it so

1287
01:05:22,100 --> 01:05:25,200
the Q can just come off of the start up like so.

1288
01:05:27,700 --> 01:05:30,500
And then that startup will just get passed through directly.

1289
01:05:30,700 --> 01:05:35,600
So instead of, passing the Q handle here, we passed the startup and

1290
01:05:38,400 --> 01:05:38,800
excuse me.

1291
01:05:39,800 --> 01:05:43,000
And then when the thread block actually does this and it gets the L PP

1292
01:05:43,000 --> 01:05:48,000
parameter thing out here, then that LP parameter is actually a win32.

1293
01:05:54,900 --> 01:05:56,600
It's the last it this still has to be.

1294
01:05:59,100 --> 01:05:59,800
I have to make.

1295
01:06:00,000 --> 01:06:03,900
So that we actually use a fixed one because obviously each time

1296
01:06:03,900 --> 01:06:06,400
through the stuff's going to get grabbed out of there.

1297
01:06:07,200 --> 01:06:09,900
So it actually needs to be different for every thread.

1298
01:06:10,400 --> 01:06:13,400
If that makes sense because we don't know that it's actually gotten

1299
01:06:13,400 --> 01:06:15,000
the information out of there yet.

1300
01:06:15,300 --> 01:06:20,500
So in order to pass that extra information through but this tends to

1301
01:06:20,500 --> 01:06:22,600
be a real pain for passing this information through.

1302
01:06:22,700 --> 01:06:25,300
I feel like this actually introduces more bugs than I thought we were

1303
01:06:25,300 --> 01:06:28,100
going to say by doing it because I would actually need each of them to

1304
01:06:28,100 --> 01:06:28,900
have their own one.

1305
01:06:28,900 --> 01:06:29,900
Otherwise you can't

1306
01:06:30,000 --> 01:06:31,500
Don't Go Changing it, right?

1307
01:06:32,400 --> 01:06:33,900
So maybe that's actually dumb.

1308
01:06:34,000 --> 01:06:35,100
Now that I think about it.

1309
01:06:35,100 --> 01:06:38,800
Maybe we don't actually want this to be the case, maybe that's just

1310
01:06:38,800 --> 01:06:42,300
stupid and maybe the better way to do it is just to say, like, hey

1311
01:06:42,300 --> 01:06:45,700
those are actually just Global last variables if that makes sense,

1312
01:06:46,100 --> 01:06:49,700
because all of a sudden, it seems like that's actually a lot, a lot

1313
01:06:49,700 --> 01:06:50,200
uglier.

1314
01:06:50,700 --> 01:06:51,600
That makes some sense.

1315
01:06:52,900 --> 01:06:58,100
So here, if we did something, like, before we make these work use, we

1316
01:06:58,100 --> 01:06:59,400
say like global

1317
01:07:00,000 --> 01:07:03,500
and Jill are C equals 132 and it opengl

1318
01:07:06,600 --> 01:07:11,400
and like, you know, Global DC equals get to see window.

1319
01:07:13,600 --> 01:07:14,800
That's totally.

1320
01:07:15,500 --> 01:07:16,600
That's probably actually.

1321
01:07:16,600 --> 01:07:18,400
Just ironically quite a bit safer.

1322
01:07:20,000 --> 01:07:23,700
It seems so maybe we will do it that way.

1323
01:07:25,200 --> 01:07:25,900
Let's take a look.

1324
01:07:26,700 --> 01:07:34,700
So up here, we would just Define our Global variable for each GRC.

1325
01:07:41,200 --> 01:07:41,900
What was I call?

1326
01:07:41,900 --> 01:07:43,200
It was an open field as.

1327
01:07:43,200 --> 01:07:44,800
Yeah, and

1328
01:07:46,500 --> 01:07:47,200
What will be see?

1329
01:07:48,400 --> 01:07:53,300
Like, so and those would essentially just get lashed, they just get

1330
01:07:53,300 --> 01:07:53,800
set.

1331
01:07:53,900 --> 01:07:56,300
And then when we do our thread startup,

1332
01:07:59,800 --> 01:08:00,500
It would just work.

1333
01:08:02,900 --> 01:08:04,100
Where's my will make current.

1334
01:08:04,800 --> 01:08:07,900
So let's see here, we go.

1335
01:08:08,700 --> 01:08:10,500
Create opengl context for worker thread.

1336
01:08:10,600 --> 01:08:13,400
In this case, it doesn't really have to take it either of these guys.

1337
01:08:14,000 --> 01:08:15,300
Now, they're not going to be parameters.

1338
01:08:15,300 --> 01:08:20,800
There's going to be here and we'll just make this Global DC and this

1339
01:08:20,800 --> 01:08:25,200
be Global opengl RC and that actually should work.

1340
01:08:26,100 --> 01:08:28,300
And again, I don't know, maybe it wouldn't be a big deal to pass us

1341
01:08:28,300 --> 01:08:29,399
that I just didn't love.

1342
01:08:29,399 --> 01:08:32,600
That was like, well now it's actually getting kind of more drink.

1343
01:08:32,800 --> 01:08:36,100
Then if they're just set because they don't change and so it seems

1344
01:08:36,100 --> 01:08:38,800
like until we actually change them around.

1345
01:08:39,399 --> 01:08:40,700
We don't actually want to.

1346
01:08:40,800 --> 01:08:42,300
Oops that's HTC.

1347
01:08:43,100 --> 01:08:45,399
We don't actually want to introduce that complexity for no reason.

1348
01:08:45,399 --> 01:08:46,399
Just seems like a bad decision.

1349
01:08:46,500 --> 01:08:48,100
So I'm so like - well not.

1350
01:08:48,899 --> 01:08:51,800
All right, so what we call we will create context tarp.

1351
01:08:51,800 --> 01:08:55,000
Here we go.

1352
01:08:55,000 --> 01:08:56,100
And that's another thing.

1353
01:08:56,300 --> 01:08:57,600
We actually that's a pointer.

1354
01:08:57,600 --> 01:08:59,200
So we're gonna have to save that pointer as well.

1355
01:09:01,200 --> 01:09:01,899
So, let's see.

1356
01:09:02,100 --> 01:09:06,600
Cannot convert from void, right?

1357
01:09:06,600 --> 01:09:07,899
So we need that guy to save it.

1358
01:09:08,100 --> 01:09:12,000
And one thing we could do is make this stuff actually gets toward I

1359
01:09:12,000 --> 01:09:17,100
suppose up in win32, open, chillin it, if that makes sense.

1360
01:09:17,300 --> 01:09:20,200
So, what I could do is say that this is actually responsible for

1361
01:09:20,200 --> 01:09:21,000
storing it.

1362
01:09:21,300 --> 01:09:26,000
So if I actually go back to Winter to and it opengl right here, what

1363
01:09:26,000 --> 01:09:29,300
we could do is say that this actually stores that DC.

1364
01:09:29,300 --> 01:09:30,000
So instead of releasing

1365
01:09:30,200 --> 01:09:30,600
Sing it.

1366
01:09:30,899 --> 01:09:31,899
We actually store it.

1367
01:09:33,100 --> 01:09:37,500
So we say like what we'll do sequels window DC and never allow that to

1368
01:09:37,500 --> 01:09:38,200
be released.

1369
01:09:39,200 --> 01:09:40,899
And then similarly, the global

1370
01:09:43,100 --> 01:09:45,100
Global from glr sequels.

1371
01:09:45,100 --> 01:09:46,000
Opengl RC

1372
01:09:47,800 --> 01:09:51,600
Here and we will create context arbs is going to have to do exactly

1373
01:09:51,600 --> 01:09:53,200
the same thing as well, right?

1374
01:09:53,399 --> 01:09:55,900
So we will create context, our has to be something.

1375
01:09:59,000 --> 01:10:01,500
That we would keep so that other people can call it.

1376
01:10:12,500 --> 01:10:14,100
So I think that's basically it.

1377
01:10:17,200 --> 01:10:20,500
But, excuse me.

1378
01:10:22,200 --> 01:10:25,400
All of this of course is predicated on whether or not we ever actually

1379
01:10:25,400 --> 01:10:26,100
got that function.

1380
01:10:26,100 --> 01:10:28,800
If we didn't then we would not be able to run, right?

1381
01:10:29,800 --> 01:10:32,200
We would not be able to run at least not through up in jail.

1382
01:10:33,300 --> 01:10:35,400
All right, so I think we're good.

1383
01:10:36,100 --> 01:10:37,700
I don't know where wiggle conducts.

1384
01:10:37,700 --> 01:10:38,300
There it is.

1385
01:10:44,700 --> 01:10:45,200
There we go.

1386
01:10:46,300 --> 01:10:51,400
And so now I think we gonna win three to make Q.

1387
01:10:53,200 --> 01:10:56,100
Has some probably wrong signature here.

1388
01:10:59,000 --> 01:11:01,000
What are the what was that?

1389
01:11:01,000 --> 01:11:01,700
Passing it?

1390
01:11:03,400 --> 01:11:06,200
The window is not getting going to get past.

1391
01:11:06,600 --> 01:11:07,400
That's just dumb.

1392
01:11:12,600 --> 01:11:15,900
Alright, so now we're compiling again and in theory we can run but of

1393
01:11:15,900 --> 01:11:18,000
course we won't see anything now because we don't download any

1394
01:11:18,000 --> 01:11:19,300
textures, right?

1395
01:11:20,500 --> 01:11:26,000
So we're creating a bunch of sort of workers and stuff, but we don't

1396
01:11:26,000 --> 01:11:29,200
actually ever download any textures which is not particularly useful

1397
01:11:29,200 --> 01:11:30,000
if that makes sense.

1398
01:11:30,000 --> 01:11:35,700
And as you can see there's actually nothing on it so we'll stop for

1399
01:11:35,700 --> 01:11:39,300
today but we're pretty far from actually being in good shape at this

1400
01:11:39,300 --> 01:11:41,000
point to say the least.

1401
01:11:41,100 --> 01:11:45,400
So we have to actually go do the work of actually coming here into the

1402
01:11:45,400 --> 01:11:49,200
asset file and actually making this actually do something and then we

1403
01:11:49,200 --> 01:11:49,900
have to actually make

1404
01:11:50,100 --> 01:11:52,500
That we did everything correctly and that we're actually getting the

1405
01:11:52,500 --> 01:11:57,300
context, and that we're actually having those guys have what they need

1406
01:11:57,300 --> 01:11:57,900
for for.

1407
01:11:57,900 --> 01:11:59,300
We're gonna make current and all that other stuff.

1408
01:12:00,100 --> 01:12:01,500
So that actually has to happen as well.

1409
01:12:01,900 --> 01:12:07,500
Okay, so last thing is last, I guess when we do our, we will make

1410
01:12:07,500 --> 01:12:11,900
current here in our win through to create opengl context or worker

1411
01:12:11,900 --> 01:12:12,400
thread.

1412
01:12:12,900 --> 01:12:19,700
We know that we only do the asset work I believe on the low priority

1413
01:12:19,700 --> 01:12:21,400
threads, right?

1414
01:12:22,700 --> 01:12:27,300
So we actually don't need to create these for the non

1415
01:12:29,400 --> 01:12:30,500
high priority threads.

1416
01:12:31,200 --> 01:12:37,000
So if we actually take a look down here when we're in thread proc, we

1417
01:12:37,000 --> 01:12:44,400
want to have some idea of whether or not this particular threat is

1418
01:12:44,700 --> 01:12:46,200
high or low priority.

1419
01:12:46,600 --> 01:12:52,600
So that platform work queue, where we actually Define that, which is

1420
01:12:52,600 --> 01:12:53,600
in here, I believe.

1421
01:12:54,300 --> 01:12:55,700
So the platform work queue.

1422
01:12:59,000 --> 01:13:00,100
Is that actually to find out?

1423
01:13:00,100 --> 01:13:00,700
It's not.

1424
01:13:02,200 --> 01:13:03,200
So, who defines it?

1425
01:13:06,800 --> 01:13:10,800
Is that actually defined in the open in the wintry to side of things?

1426
01:13:11,100 --> 01:13:14,200
If so I'm going to feel pretty stupid because I just was like well

1427
01:13:14,200 --> 01:13:17,000
blah blah blah, and then it's not actually anything and whatever.

1428
01:13:18,200 --> 01:13:19,000
So, let's find out.

1429
01:13:23,600 --> 01:13:27,200
From work puffer, more queue entry platform work you.

1430
01:13:27,400 --> 01:13:28,500
So it's actually right there.

1431
01:13:28,900 --> 01:13:32,200
So actually the entire time I could have just left it in there.

1432
01:13:33,100 --> 01:13:38,400
Brilliant anyway, doesn't matter, point being here is our platform

1433
01:13:38,400 --> 01:13:38,900
work you

1434
01:13:40,200 --> 01:13:45,500
And what I want to do in here is I want to have some notion of whether

1435
01:13:45,500 --> 01:13:48,600
this thing is ever going to download anything like that, right?

1436
01:13:49,300 --> 01:13:52,200
So, I want something in here that's just like a bull 32 or something.

1437
01:13:52,400 --> 01:13:56,600
That's like, can download textures or something like that because if

1438
01:13:56,600 --> 01:14:00,800
it doesn't have to do this, maybe I should say like needs opengl or

1439
01:14:00,800 --> 01:14:01,500
something like this.

1440
01:14:02,100 --> 01:14:06,000
And so that way if you know, if it wants to do that, then it's going

1441
01:14:06,000 --> 01:14:06,400
to do that.

1442
01:14:06,400 --> 01:14:07,600
If it doesn't, it doesn't.

1443
01:14:07,700 --> 01:14:09,500
And I could, I guess at this point also,

1444
01:14:09,700 --> 01:14:12,700
Go in and clean up the other part of it and have it passed through

1445
01:14:12,700 --> 01:14:13,000
there.

1446
01:14:13,600 --> 01:14:14,200
But anyway,

1447
01:14:15,700 --> 01:14:16,300
Time is it?

1448
01:14:16,700 --> 01:14:19,100
This is for a sec so I even have 50 minutes left, really?

1449
01:14:19,800 --> 01:14:23,800
All right, so all I need to do is now when I Define these things those

1450
01:14:23,800 --> 01:14:26,800
the high priority queue and and what and low priority queue and

1451
01:14:26,800 --> 01:14:27,300
whatnot.

1452
01:14:27,600 --> 01:14:29,800
When I do win32 make you on these.

1453
01:14:30,100 --> 01:14:36,100
What I can do is just say like okay we'll set whatever the the Q needs

1454
01:14:36,100 --> 01:14:39,900
opengl thing is we'll set that before we call it, right?

1455
01:14:40,200 --> 01:14:41,300
So when we do

1456
01:14:42,900 --> 01:14:45,400
Since you're to make queue.

1457
01:14:47,100 --> 01:14:54,200
Which is right here, we will just set it I guess before we pass it in.

1458
01:14:55,000 --> 01:14:59,200
So let's see went through to make Q on high priority queue and I guess

1459
01:14:59,200 --> 01:14:59,800
these high

1460
01:15:00,200 --> 01:15:01,800
the high priority queue is just

1461
01:15:04,900 --> 01:15:06,000
it's cleared out to 0.

1462
01:15:06,300 --> 01:15:08,200
So what I could say is the high priority queue, we know that it

1463
01:15:08,200 --> 01:15:11,200
doesn't need access to opengl the low priority queue.

1464
01:15:11,200 --> 01:15:15,300
We know does so we need this to be set to open Jill, right?

1465
01:15:17,700 --> 01:15:21,900
so now we know that that will be set properly so that when we do our

1466
01:15:21,900 --> 01:15:26,900
make q and we call into the thread code, we now know that that thread

1467
01:15:26,900 --> 01:15:29,700
code, that's a good cook can basically understand

1468
01:15:30,900 --> 01:15:32,300
Whether or not it needs to do this.

1469
01:15:32,800 --> 01:15:33,100
Oops.

1470
01:15:34,200 --> 01:15:39,800
So right here, I can say, if the cue needs opengl then get it opengl

1471
01:15:40,000 --> 01:15:41,700
otherwise don't bother, right?

1472
01:15:41,700 --> 01:15:45,300
Because we don't need to do anything if it's not going to do that.

1473
01:15:45,900 --> 01:15:51,000
So, so I think that's all we really need to do to make that a little

1474
01:15:51,000 --> 01:15:51,500
bit cleaner.

1475
01:15:52,300 --> 01:15:56,100
And now, yeah, like a since I kind of messed that up, I probably

1476
01:15:56,100 --> 01:15:58,500
should have made it so that just get past the gear, but doesn't

1477
01:15:58,500 --> 01:16:00,800
matter, it's all fine.

1478
01:16:00,800 --> 01:16:03,900
Anyway, so now, I think we're a little

1479
01:16:04,000 --> 01:16:04,400
More correct.

1480
01:16:04,400 --> 01:16:07,400
The only are creating to opengl context, one for each of those.

1481
01:16:08,200 --> 01:16:12,400
And off we go, unfortunately, we don't really have anything at this

1482
01:16:12,400 --> 01:16:13,100
point.

1483
01:16:13,300 --> 01:16:16,300
That's going to actually download the textures, but we could do that

1484
01:16:16,300 --> 01:16:16,800
tomorrow.

1485
01:16:17,000 --> 01:16:19,100
So you know, we're not in bad shape.

1486
01:16:19,100 --> 01:16:20,200
We've actually got an opengl.

1487
01:16:20,200 --> 01:16:25,000
So really all we need to do is just make it so that the asset

1488
01:16:26,400 --> 01:16:29,200
System now has a way to actually make this call.

1489
01:16:29,500 --> 01:16:30,000
What the heck?

1490
01:16:30,200 --> 01:16:31,100
Let's just do it.

1491
01:16:31,400 --> 01:16:32,400
Let's just do it with a trivial.

1492
01:16:32,400 --> 01:16:33,300
Callback for now.

1493
01:16:33,600 --> 01:16:38,900
And and then if we want to do something fancier, we can might as well.

1494
01:16:39,000 --> 01:16:41,900
So in order to do that, right, in order to call finalized bitmap, we

1495
01:16:41,900 --> 01:16:48,400
just need some way for the platform code to to be triggered, right?

1496
01:16:48,400 --> 01:16:51,900
We just need some way for it to actually do that.

1497
01:16:51,900 --> 01:16:52,800
That download

1498
01:16:55,100 --> 01:16:59,000
And right and we just need some way for it to affect that change to

1499
01:16:59,000 --> 01:17:03,900
the graphics card and so in here when we have our very stuff we've got

1500
01:17:03,900 --> 01:17:08,000
kind of like our our calls that we actually use.

1501
01:17:08,100 --> 01:17:09,600
These are the ones that are only for debugging.

1502
01:17:09,600 --> 01:17:13,200
These are the ones that we actually expect to expose as sort of like

1503
01:17:13,200 --> 01:17:14,500
the platform for the game.

1504
01:17:14,500 --> 01:17:17,900
So these are the actual apis that the game is allowed to call and we

1505
01:17:17,900 --> 01:17:19,300
try to keep these pretty minimal, right?

1506
01:17:19,300 --> 01:17:23,700
We try to not have a lot of stuff in here and and yeah,

1507
01:17:24,200 --> 01:17:28,300
So I think I can actually I wanted to actually eliminate these a

1508
01:17:28,300 --> 01:17:28,700
little bit.

1509
01:17:28,700 --> 01:17:30,600
I think I can actually cut down.

1510
01:17:30,600 --> 01:17:33,200
These are there's too many here that there's probably shouldn't be but

1511
01:17:34,400 --> 01:17:38,400
so if we want to do a sort of this concept that we're going to

1512
01:17:38,700 --> 01:17:43,900
actually submit a texture we need a way of setting and unsetting

1513
01:17:43,900 --> 01:17:46,000
textures or basically like saying what's going on here.

1514
01:17:47,100 --> 01:17:51,000
So what I think I would probably say is let's do something like

1515
01:17:55,900 --> 01:17:59,800
Let's do something where we just have.

1516
01:18:00,000 --> 01:18:04,600
One call and that call can either allocate or deallocate the texture,

1517
01:18:05,000 --> 01:18:05,500
right?

1518
01:18:06,000 --> 01:18:06,800
Something like this.

1519
01:18:07,400 --> 01:18:12,300
So in opengl we have a feed forward because mm, I guess, the only

1520
01:18:12,300 --> 01:18:14,900
thing is we don't if you want to deport certain like d3d where you get

1521
01:18:14,900 --> 01:18:17,700
back the handle and it's like an address or something, we probably

1522
01:18:17,700 --> 01:18:18,200
don't want to do that.

1523
01:18:18,200 --> 01:18:23,600
So we might actually want the too but we just do, I guess allocate

1524
01:18:23,600 --> 01:18:24,200
texture.

1525
01:18:28,300 --> 01:18:30,100
And platform deallocate texture.

1526
01:18:35,400 --> 01:18:38,300
So we just need both of those things to work, right?

1527
01:18:39,000 --> 01:18:42,000
And so then the actual cost of these

1528
01:18:44,000 --> 01:18:48,800
Are pretty much equivalent to these guys here where we'd say like,

1529
01:18:48,800 --> 01:18:54,500
okay, we're going to give back a void star for platform allocate

1530
01:18:54,500 --> 01:18:55,100
texture.

1531
01:19:00,300 --> 01:19:04,000
And instead of passing a size which is what we'd normally pass

1532
01:19:04,000 --> 01:19:05,800
allocate actual memory.

1533
01:19:06,100 --> 01:19:09,200
Instead we're going to do is we're going to pass this information that

1534
01:19:09,200 --> 01:19:11,400
we needed to pass down here, right?

1535
01:19:11,800 --> 01:19:18,200
So we're going to pass that the width, the height and the rest of the

1536
01:19:18,200 --> 01:19:19,400
stuff doesn't really very.

1537
01:19:19,500 --> 01:19:22,600
So then we and we just have like the actual like data.

1538
01:19:23,600 --> 01:19:26,400
So we're just going to pass that down and that's all we currently need

1539
01:19:26,400 --> 01:19:26,700
and we can

1540
01:19:26,900 --> 01:19:28,200
Span this obviously in the future.

1541
01:19:28,600 --> 01:19:32,900
But that's basically all we need for our purposes and then we can do

1542
01:19:32,900 --> 01:19:34,400
Platform deallocate to.

1543
01:19:34,400 --> 01:19:35,800
Oops, have it there.

1544
01:19:38,800 --> 01:19:39,800
So then we can do Platform.

1545
01:19:39,800 --> 01:19:40,900
Do you like a texture?

1546
01:19:41,500 --> 01:19:46,300
Like, so, and when we delegate the texture, all we need to do is pass

1547
01:19:46,300 --> 01:19:49,000
back the handle that it gave us and say like we're getting rid of this

1548
01:19:49,000 --> 01:19:49,300
now.

1549
01:19:49,500 --> 01:19:53,800
It doesn't shouldn't need any other piece of information, right?

1550
01:19:53,800 --> 01:19:59,200
Because if that's all it handed this back so we don't need to tell it.

1551
01:19:59,200 --> 01:20:02,400
Anything else should be able to you know eliminated with just that

1552
01:20:03,600 --> 01:20:08,200
All right, so if that's what we've got then in here, after we do our

1553
01:20:08,200 --> 01:20:15,000
platform, we did it from file, we should be able to do our equivalent

1554
01:20:15,100 --> 01:20:16,700
platform allocate texture.

1555
01:20:18,900 --> 01:20:21,300
Here and we're just going to pass it.

1556
01:20:21,300 --> 01:20:24,500
That piece of those pieces of information that are the, the new pieces

1557
01:20:24,500 --> 01:20:31,200
of information, like so and we don't need this and we don't need

1558
01:20:31,200 --> 01:20:31,800
these.

1559
01:20:33,500 --> 01:20:34,300
That's all we need.

1560
01:20:35,000 --> 01:20:38,800
So, with that piece of information, it should everything it needs.

1561
01:20:38,800 --> 01:20:42,700
And so we just need to now on the win32 side of things actually, place

1562
01:20:42,700 --> 01:20:49,400
these calls in to actually give these calls some some

1563
01:20:50,700 --> 01:20:51,600
Somewhere to live.

1564
01:20:53,300 --> 01:20:57,300
So where we got our callback specified, I believe is up here somewhere

1565
01:20:57,300 --> 01:20:58,600
somewhere.

1566
01:20:58,700 --> 01:20:59,800
I don't actually know where

1567
01:21:00,500 --> 01:21:01,500
It's up here somewhere.

1568
01:21:01,800 --> 01:21:06,800
If we just keep looking, so there you can see the callbacks right that

1569
01:21:06,800 --> 01:21:08,100
we Define for debug.

1570
01:21:08,300 --> 01:21:14,100
So let's do, like, let's see, platform allocate memory.

1571
01:21:15,600 --> 01:21:20,100
So if I just stick these guys in here, then we've got sort of our

1572
01:21:20,100 --> 01:21:21,300
function definitions.

1573
01:21:21,800 --> 01:21:22,300
So,

1574
01:21:29,900 --> 01:21:33,800
And so if I do Platform allocate texture I'm just going to call this

1575
01:21:34,000 --> 01:21:42,000
locate texter and if I do tlk texture here then we can just go ahead

1576
01:21:42,000 --> 01:21:46,600
and take the opengl code verbatim and just have it happen in here.

1577
01:21:50,400 --> 01:21:54,800
So, inside here, when we do, what we're going to do.

1578
01:21:58,800 --> 01:22:01,600
We need this to basically return avoid star, that's kind of the

1579
01:22:01,600 --> 01:22:02,300
texture information.

1580
01:22:02,500 --> 01:22:06,400
What I'm going to do here is I'm going to assign the handle to that,

1581
01:22:06,500 --> 01:22:06,800
right?

1582
01:22:06,800 --> 01:22:09,000
Because, you know, we had that entry bitmap handle

1583
01:22:13,400 --> 01:22:18,200
and I don't really remember why exactly that.

1584
01:22:18,400 --> 01:22:19,800
There's the entry bitmap handle thing.

1585
01:22:19,800 --> 01:22:21,400
But point being

1586
01:22:25,700 --> 01:22:28,200
Right because I guess I'll just explain that a little more detail

1587
01:22:28,200 --> 01:22:31,300
because I kind of said that without saying what it was when we call

1588
01:22:31,300 --> 01:22:35,300
load when we when we grab the Centre here, right?

1589
01:22:41,900 --> 01:22:45,000
That was actually code from a previous thing.

1590
01:22:45,100 --> 01:22:46,400
That's okay, that's why I got confused.

1591
01:22:46,400 --> 01:22:47,800
I was like, why is there an entry handle here?

1592
01:22:48,100 --> 01:22:49,400
That's because it's totally different thing.

1593
01:22:50,300 --> 01:22:54,200
So when I'm going to actually finalize the bitmap, I only presumably

1594
01:22:54,200 --> 01:22:57,700
have just the the actual

1595
01:22:59,900 --> 01:23:00,800
The actual.

1596
01:23:02,300 --> 01:23:04,900
Stuff that was stored in the work, right?

1597
01:23:04,900 --> 01:23:06,400
Which would be the asset header.

1598
01:23:06,400 --> 01:23:09,600
Presumably I think so.

1599
01:23:09,600 --> 01:23:13,100
We're going to have to figure out a way to kind of store that bitmap

1600
01:23:13,100 --> 01:23:15,400
stuff in with what we create.

1601
01:23:15,700 --> 01:23:25,500
So if I look down where we do load bitmap load that I gotta remember

1602
01:23:25,500 --> 01:23:29,400
to change search to be case insensitive because the New Mexico is case

1603
01:23:29,400 --> 01:23:31,900
insensitive, I'm used to not having to put in the correct.

1604
01:23:33,800 --> 01:23:36,000
So when we, when we do this thing here.

1605
01:23:36,000 --> 01:23:38,700
So we've prepared the bitmap and here it all is and there's that

1606
01:23:38,700 --> 01:23:45,000
handle so I think after we do asset header bitmap, we should be able

1607
01:23:45,000 --> 01:23:47,000
to just claw that back out.

1608
01:23:47,500 --> 01:23:53,500
Let's see because the asset assets ID value.

1609
01:23:55,400 --> 01:23:57,300
I like how we recreate that for no reason.

1610
01:23:57,300 --> 01:23:58,000
It's right here.

1611
01:23:58,000 --> 01:23:59,600
That's just asset, right?

1612
01:24:00,600 --> 01:24:04,200
I know why we're doing that but point being so we can get the bitmap

1613
01:24:04,200 --> 01:24:04,400
out.

1614
01:24:04,400 --> 01:24:05,400
Really trivially.

1615
01:24:07,800 --> 01:24:14,100
It's just like this so the work asset header bitmap that's the bit map

1616
01:24:14,600 --> 01:24:19,100
so we can do like and I don't remember exactly what that class is for

1617
01:24:19,100 --> 01:24:19,300
us.

1618
01:24:19,300 --> 01:24:20,000
I guess it's

1619
01:24:21,800 --> 01:24:22,600
It's going to be.

1620
01:24:25,900 --> 01:24:26,900
Loaded bitmap.

1621
01:24:29,500 --> 01:24:31,100
So I just need to start one of those.

1622
01:24:37,400 --> 01:24:41,500
So if I grab out this bitmap, I can store back to the handle and now I

1623
01:24:41,500 --> 01:24:45,100
can get all of those pieces of data that I was getting off the bitmap

1624
01:24:45,100 --> 01:24:45,600
as well.

1625
01:24:46,300 --> 01:24:49,100
And so now we're pretty good to go, right?

1626
01:24:49,100 --> 01:24:50,800
That's that's everything we needed.

1627
01:24:51,300 --> 01:24:54,300
So this would allocate the texture that would do the download and

1628
01:24:54,300 --> 01:24:55,900
everyone would be happy, right?

1629
01:24:56,000 --> 01:24:57,300
Everything is Peachy.

1630
01:24:58,700 --> 01:25:03,700
So in that circumstance, of course we need to actually return the

1631
01:25:03,700 --> 01:25:04,200
handle.

1632
01:25:04,600 --> 01:25:09,300
And so when we do this GL text image here, I'm going to have to do the

1633
01:25:09,300 --> 01:25:11,300
bind, that would have gone with it.

1634
01:25:11,400 --> 01:25:14,600
So the GL buying texture, 2gl texture.

1635
01:25:14,600 --> 01:25:19,100
2D I need something here, that's going to be the handle.

1636
01:25:19,600 --> 01:25:23,700
So if I'm going to do that that I need I believe it's a

1637
01:25:25,100 --> 01:25:25,800
Jie Lun.

1638
01:25:25,800 --> 01:25:28,500
So I think I need a handle.

1639
01:25:28,600 --> 01:25:31,200
I need some way of making that handle work.

1640
01:25:31,300 --> 01:25:34,500
And then when I return it, I can always just cast it to avoid star to

1641
01:25:34,500 --> 01:25:39,600
return it to the caller, and I can put an assertion here just to be

1642
01:25:39,600 --> 01:25:40,500
doubly safe.

1643
01:25:40,800 --> 01:25:46,600
I can be like assert that the size of a handle is much, like the size

1644
01:25:46,600 --> 01:25:50,200
of handle is less than or equal to the size of a void star just to

1645
01:25:50,200 --> 01:25:51,400
make sure that it's going to fit.

1646
01:25:52,200 --> 01:25:54,700
But point being, we can always do that and then we want to deallocate

1647
01:25:54,900 --> 01:25:56,700
Here we can deallocate.

1648
01:25:56,800 --> 01:26:00,000
So in this case we've already covered the thing that we would need to

1649
01:26:00,000 --> 01:26:00,500
use here.

1650
01:26:00,600 --> 01:26:04,800
There's a thing called GL Jen textures that will just give us back a

1651
01:26:04,800 --> 01:26:05,500
texter handle.

1652
01:26:05,500 --> 01:26:08,300
That's known not to be used, right?

1653
01:26:08,300 --> 01:26:09,700
So we can say just give us one.

1654
01:26:09,800 --> 01:26:10,900
It'll give us that one.

1655
01:26:11,100 --> 01:26:12,000
We then use it.

1656
01:26:12,100 --> 01:26:12,700
We give it back.

1657
01:26:12,700 --> 01:26:15,400
So now we can always be used for binding and everything else that it

1658
01:26:15,400 --> 01:26:16,400
needs to be used for.

1659
01:26:17,100 --> 01:26:19,600
And after we do the submission we don't really want to leave the

1660
01:26:19,600 --> 01:26:23,000
texture Bound for any reason because this is a download thread.

1661
01:26:23,000 --> 01:26:24,700
So you might as well also just unbind the

1662
01:26:24,800 --> 01:26:25,100
Texture.

1663
01:26:25,100 --> 01:26:26,700
So it knows we're done talking about it.

1664
01:26:27,900 --> 01:26:32,200
Oops, meanwhile and here we want to deallocate.

1665
01:26:33,000 --> 01:26:34,300
There's the equivalent college is Jill.

1666
01:26:34,300 --> 01:26:36,500
Delete textures which just says hey that handle.

1667
01:26:36,800 --> 01:26:39,600
So in order to get the handle we do exactly the same thing we were

1668
01:26:39,600 --> 01:26:43,100
doing before we just say oh that thing that we pass in here,

1669
01:26:44,300 --> 01:26:46,900
the texture that you're going to free, I know it came in as a void

1670
01:26:46,900 --> 01:26:51,600
star treated instead as GL unit,

1671
01:26:54,200 --> 01:26:54,600
Right.

1672
01:26:54,800 --> 01:26:56,000
So hmm.

1673
01:26:58,500 --> 01:26:59,800
This is probably going to be a saint.

1674
01:27:01,900 --> 01:27:07,400
Yeah, so that handle that's on the loaded bitmap, which I don't

1675
01:27:07,400 --> 01:27:09,500
actually know where that even is anymore.

1676
01:27:09,500 --> 01:27:11,300
This is the problem with not every parent while.

1677
01:27:11,600 --> 01:27:14,500
It's like, where do we store that I'm guessing?

1678
01:27:14,500 --> 01:27:19,700
It's probably in the render group and hey, I'm right.

1679
01:27:20,400 --> 01:27:22,700
So, this handle is not going to be one of these.

1680
01:27:22,700 --> 01:27:26,600
It's actually going to be like, one of these, and we probably should

1681
01:27:26,600 --> 01:27:28,900
call it like some kind of a texture handle.

1682
01:27:28,900 --> 01:27:30,800
So that we know what we're even talking about here.

1683
01:27:31,300 --> 01:27:34,300
So I might go ahead and do that and then say that anyone who

1684
01:27:34,300 --> 01:27:38,400
references, that should really call it a texture handle proper, if

1685
01:27:38,400 --> 01:27:39,100
that makes sense.

1686
01:27:39,900 --> 01:27:41,200
Which I guess would include this dude.

1687
01:27:41,200 --> 01:27:42,900
Oops, that's no good.

1688
01:27:43,100 --> 01:27:43,700
What did I do?

1689
01:27:45,300 --> 01:27:45,900
Oh, you know what?

1690
01:27:45,900 --> 01:27:46,600
I just realized?

1691
01:27:46,600 --> 01:27:48,000
I don't really remember how to redo.

1692
01:27:48,000 --> 01:27:48,700
Okay, there we go.

1693
01:27:49,700 --> 01:27:50,200
Now I do.

1694
01:27:50,700 --> 01:27:51,800
Yeah, perfect.

1695
01:27:52,400 --> 01:27:52,900
Okay.

1696
01:27:53,000 --> 01:27:53,700
So

1697
01:27:56,200 --> 01:27:59,300
This handle is now texture handle.

1698
01:28:00,900 --> 01:28:02,700
And stream actually has intended.

1699
01:28:02,700 --> 01:28:03,700
That's the funny part.

1700
01:28:04,000 --> 01:28:04,300
Mr.

1701
01:28:04,300 --> 01:28:05,200
Counter person.

1702
01:28:06,500 --> 01:28:07,000
So yeah.

1703
01:28:07,000 --> 01:28:08,800
And here we've got, let's see.

1704
01:28:08,800 --> 01:28:10,400
Hold the frame if you're not ready with texture.

1705
01:28:10,400 --> 01:28:12,600
Yeah, so this is actually still texture handle.

1706
01:28:13,300 --> 01:28:16,800
Does anyone else have anything to say about that bind?

1707
01:28:16,800 --> 01:28:18,300
Texture cannot?

1708
01:28:18,300 --> 01:28:18,600
Okay.

1709
01:28:18,600 --> 01:28:19,600
Yes, that's true.

1710
01:28:20,000 --> 01:28:21,700
So, this is just a jewel.

1711
01:28:21,700 --> 01:28:23,300
You ain't so,

1712
01:28:26,500 --> 01:28:27,600
And off we go.

1713
01:28:27,900 --> 01:28:31,300
So, in here now we know we've just got these, we don't have to read

1714
01:28:31,300 --> 01:28:33,400
out of an entry or anything we cut and paste this code from.

1715
01:28:33,400 --> 01:28:36,400
Before we know, we pretty much have all this information.

1716
01:28:37,000 --> 01:28:40,600
I think we called this the data, this opengl default.

1717
01:28:40,600 --> 01:28:44,100
Internal texture specification is going to have to be a global.

1718
01:28:44,100 --> 01:28:48,400
I would believe, although I guess it already was a global.

1719
01:28:49,200 --> 01:28:50,000
So off we go.

1720
01:28:50,100 --> 01:28:53,700
And so now in theory, we're downloading these Textures in the

1721
01:28:53,700 --> 01:28:55,300
background in theory, right?

1722
01:28:58,200 --> 01:28:59,300
Pretty big caveat there.

1723
01:28:59,400 --> 01:29:02,100
We're still not actually deleting them yet, but in theory, we're

1724
01:29:02,100 --> 01:29:02,700
downloading them.

1725
01:29:02,700 --> 01:29:06,200
Now here's the part where the graph the whole machine probably crashes

1726
01:29:06,200 --> 01:29:11,300
on us or something equally, horrible happens, but it looks like not.

1727
01:29:11,600 --> 01:29:11,900
Okay.

1728
01:29:12,800 --> 01:29:17,800
So all we should have to do now is the bug this which might be a

1729
01:29:17,800 --> 01:29:18,500
little tricky.

1730
01:29:19,400 --> 01:29:22,800
And the other thing that I might want to do just before I get any

1731
01:29:22,800 --> 01:29:27,900
further in, it is, when we do asset eviction, we want to call that

1732
01:29:28,800 --> 01:29:30,600
Delicate texture, right?

1733
01:29:31,000 --> 01:29:38,300
So in order to do that, when we actually evict an asset, which is

1734
01:29:38,300 --> 01:29:43,200
going to be allocate game assets and I like that.

1735
01:29:43,200 --> 01:29:46,300
We have Snuffleupagus oriented programming written in there when we're

1736
01:29:46,300 --> 01:29:48,300
going to evict an asset.

1737
01:29:49,300 --> 01:29:50,400
Then in here.

1738
01:29:50,500 --> 01:29:52,200
Let's see where we've got.

1739
01:29:53,800 --> 01:29:55,100
This is not.

1740
01:29:56,300 --> 01:29:58,900
This is not that's allocate all game assets.

1741
01:29:58,900 --> 01:29:59,900
I want the actual

1742
01:30:00,300 --> 01:30:01,700
Where's the actual thing?

1743
01:30:01,700 --> 01:30:02,900
Where we evict an asset?

1744
01:30:02,900 --> 01:30:08,900
Font load bitmap, acquire asset memory.

1745
01:30:08,900 --> 01:30:10,100
That's what I actually want.

1746
01:30:10,100 --> 01:30:16,100
So when we do acquire acid memory and we do all this merge as possible

1747
01:30:16,100 --> 01:30:16,300
stuff.

1748
01:30:16,300 --> 01:30:21,900
So in here, when we're going through this stuff, this is the part that

1749
01:30:21,900 --> 01:30:24,000
actually matters to us, right?

1750
01:30:24,400 --> 01:30:27,900
So when we do remove asset header from list, we're taking this guy out

1751
01:30:27,900 --> 01:30:30,300
and we're changing it back to us.

1752
01:30:30,400 --> 01:30:34,600
Used normally we don't have to do anything because we're in control of

1753
01:30:34,600 --> 01:30:35,800
everything is nice and clean.

1754
01:30:36,200 --> 01:30:36,900
But

1755
01:30:37,800 --> 01:30:41,500
in the case where this was actually a texter, we have to tell opengl

1756
01:30:41,500 --> 01:30:42,100
about it.

1757
01:30:42,700 --> 01:30:46,000
So what we want to do here is something like okay we're about to like

1758
01:30:46,000 --> 01:30:47,200
free this dude, right?

1759
01:30:47,200 --> 01:30:52,400
He's he's been removed from the from the list and let me double check

1760
01:30:52,400 --> 01:30:56,000
to make sure that that doesn't do anything particularly bad.

1761
01:30:57,300 --> 01:31:02,800
So I will go ahead and say asset CPP but remove asset.

1762
01:31:02,900 --> 01:31:04,200
Whoops move.

1763
01:31:05,800 --> 01:31:08,800
I said Heather from West.

1764
01:31:12,000 --> 01:31:12,800
Where are you in?

1765
01:31:12,800 --> 01:31:13,400
Uh-huh.

1766
01:31:16,100 --> 01:31:16,600
There it is.

1767
01:31:17,200 --> 01:31:19,000
I said doesn't do anything, so that's fine.

1768
01:31:19,700 --> 01:31:22,300
So basically, when we remove it from the list, all we have to do is

1769
01:31:22,300 --> 01:31:25,300
say, you know what, kind of texture actually was this

1770
01:31:27,900 --> 01:31:30,400
Which I guess now that I think about it that might be is that

1771
01:31:30,400 --> 01:31:31,600
something we even know?

1772
01:31:31,800 --> 01:31:34,900
And I don't actually know because we didn't do anything in particular

1773
01:31:35,300 --> 01:31:39,200
to store those things in a way that was was marked.

1774
01:31:39,200 --> 01:31:43,900
But I suppose the AHA probably has it right because the AHA.

1775
01:31:48,900 --> 01:31:52,500
I needed to know what kind of a set each individual thing was so the

1776
01:31:52,500 --> 01:31:54,400
HHA probably does actually have the type.

1777
01:31:54,400 --> 01:31:55,100
So we're kinda out.

1778
01:31:55,100 --> 01:31:58,600
We got a little bit of a get-out-of-jail-free card there.

1779
01:31:58,600 --> 01:32:02,400
I suspect if we actually store that if we didn't, then we're in a

1780
01:32:02,400 --> 01:32:05,400
little more trouble because we don't actually know which kind of

1781
01:32:05,400 --> 01:32:05,700
asset.

1782
01:32:05,700 --> 01:32:07,700
This actually is, if that makes sense.

1783
01:32:09,200 --> 01:32:12,900
So, right here, when we're about to actually free it, we need to know,

1784
01:32:13,000 --> 01:32:14,400
should we call the platform?

1785
01:32:14,500 --> 01:32:16,600
And should be called deallocate texture.

1786
01:32:18,500 --> 01:32:19,100
Right.

1787
01:32:20,100 --> 01:32:20,500
Mmm.

1788
01:32:22,400 --> 01:32:23,500
On the bitmap header.

1789
01:32:28,600 --> 01:32:31,000
Something like this, that make sense.

1790
01:32:31,500 --> 01:32:34,900
So assuming that we have to do that, excuse me.

1791
01:32:37,300 --> 01:32:41,100
We need some way of knowing, you know, what's going on there.

1792
01:32:41,700 --> 01:32:44,800
So let's take a look at at that asset header.

1793
01:32:45,200 --> 01:32:46,900
So here's the asset memory header.

1794
01:32:47,900 --> 01:32:52,000
And here is the asset index, total size generation ID, right?

1795
01:32:52,100 --> 01:32:54,300
And here's all the various stuff for it.

1796
01:32:54,500 --> 01:32:59,100
So we know that if we, if we did know that it was a bitmap, all we

1797
01:32:59,100 --> 01:32:59,800
would have to do is

1798
01:33:00,000 --> 01:33:05,000
The allocated thusly and we'd be done but since we don't actually know

1799
01:33:05,400 --> 01:33:07,400
which one it is, we have the acid index.

1800
01:33:07,700 --> 01:33:11,900
I'm not sure how we would tell what type of a sighted actually was

1801
01:33:13,500 --> 01:33:16,100
because I don't know that we have any more information in there.

1802
01:33:16,100 --> 01:33:20,000
Other than that we've got the AHA that doesn't have it in it, right?

1803
01:33:20,800 --> 01:33:21,800
I just looked at that.

1804
01:33:24,300 --> 01:33:29,400
It just has the offset the tags, and then a union, you know, one for

1805
01:33:29,400 --> 01:33:29,900
each thing.

1806
01:33:31,500 --> 01:33:37,200
So, if I come back here to the asset and we look at it, I don't think

1807
01:33:37,200 --> 01:33:41,500
there's anything that I could use, that would give me a clue.

1808
01:33:41,900 --> 01:33:45,800
So we probably would have to store in order to support that shut down

1809
01:33:45,800 --> 01:33:46,500
properly.

1810
01:33:46,800 --> 01:33:50,200
We'd probably have to store some piece of type information.

1811
01:33:50,300 --> 01:33:53,600
We just straight-up have to augment it so that when we have asset

1812
01:33:53,600 --> 01:33:53,900
memory head,

1813
01:33:54,100 --> 01:33:57,500
It actually stores a type in here that tells you what it was actually

1814
01:33:57,500 --> 01:34:02,100
being used for if that makes sense because I don't know any other way

1815
01:34:02,100 --> 01:34:02,600
to get it.

1816
01:34:03,000 --> 01:34:05,000
So in here we would actually need something.

1817
01:34:05,000 --> 01:34:11,700
Oops in here we would actually need something that's like asset type.

1818
01:34:14,400 --> 01:34:17,700
and that would tell us, which I think we had tried to avoid doing

1819
01:34:17,700 --> 01:34:20,000
because we really just didn't need that information in any other

1820
01:34:20,000 --> 01:34:24,000
place, but

1821
01:34:25,900 --> 01:34:28,300
I mean, if we need it, we need it.

1822
01:34:28,500 --> 01:34:31,500
And so here we would say if the asset header

1823
01:34:34,400 --> 01:34:36,500
Asset type equals h.

1824
01:34:36,500 --> 01:34:42,100
A bitmap we have I believe we have an actual type field for this sort

1825
01:34:42,100 --> 01:34:44,000
of thing, right?

1826
01:34:48,100 --> 01:34:48,700
I assume.

1827
01:34:51,800 --> 01:34:55,300
So we actually got away with never storing the type at all anywhere

1828
01:34:55,700 --> 01:34:57,700
and this would be the only thing that actually needed.

1829
01:34:57,700 --> 01:34:58,700
But that's a bummer.

1830
01:34:59,200 --> 01:35:01,000
I wonder if there's any way we can avoid.

1831
01:35:01,000 --> 01:35:04,100
Like it's kind of funny that we never had to do that and now we would

1832
01:35:04,100 --> 01:35:04,900
have to do it.

1833
01:35:10,400 --> 01:35:12,200
Kind of a bummer, right?

1834
01:35:17,100 --> 01:35:22,100
Yeah, that's really too bad because it looks like we don't ever even

1835
01:35:22,100 --> 01:35:24,600
have to know and

1836
01:35:26,300 --> 01:35:27,300
Through the entire thing.

1837
01:35:27,300 --> 01:35:31,000
It was always just assumed which one it was, and it all just worked

1838
01:35:31,100 --> 01:35:32,900
somehow magically, right?

1839
01:35:34,300 --> 01:35:38,700
Which is really kind of cool, but I guess, I mean, not in any real

1840
01:35:38,700 --> 01:35:41,200
concrete way, but it's just like, hey, that's kind of neat.

1841
01:35:41,900 --> 01:35:44,200
But unfortunately, looks like we wouldn't be able to get away with

1842
01:35:44,200 --> 01:35:44,900
that anymore.

1843
01:35:45,300 --> 01:35:46,100
That makes sense.

1844
01:35:46,700 --> 01:35:47,500
What just happened?

1845
01:35:50,000 --> 01:35:50,600
Okay good.

1846
01:35:52,400 --> 01:35:53,300
Hmm.

1847
01:35:53,800 --> 01:35:54,900
Hmm.

1848
01:35:55,200 --> 01:35:55,600
So yeah.

1849
01:35:55,600 --> 01:35:59,100
I don't really know what else to do about that here.

1850
01:36:00,000 --> 01:36:08,500
then say like asset type bitmap like that and just

1851
01:36:10,100 --> 01:36:13,300
store it because I don't see any real way around it.

1852
01:36:13,800 --> 01:36:14,300
And

1853
01:36:16,300 --> 01:36:19,300
And I think that just has to be that just has to be stored.

1854
01:36:20,100 --> 01:36:23,700
So I'll come in here and say enum asset type

1855
01:36:26,500 --> 01:36:33,200
and I'll just say there's an asset type bitmap and asset type none at

1856
01:36:33,200 --> 01:36:33,900
the moment.

1857
01:36:36,800 --> 01:36:40,200
In the future, maybe we'll actually track them all, but for now, we

1858
01:36:40,200 --> 01:36:40,900
don't need to.

1859
01:36:41,200 --> 01:36:48,500
And so then when we do sort of the the obligatory linking in which I

1860
01:36:48,500 --> 01:36:52,700
guess is, is sort of the stuff that we do appear, we do insert asset

1861
01:36:52,700 --> 01:36:53,700
header at front.

1862
01:36:58,000 --> 01:36:58,500
Hmm.

1863
01:36:59,700 --> 01:37:00,100
I guess.

1864
01:37:00,700 --> 01:37:03,400
Well I'm we probably won't even really need to do it quite at, then we

1865
01:37:03,400 --> 01:37:06,700
probably just need to do it at in that actual allocator itself.

1866
01:37:07,200 --> 01:37:09,600
When we do, when we load the actual

1867
01:37:11,700 --> 01:37:14,500
Stephen, so when we call load bitmap,

1868
01:37:24,400 --> 01:37:25,000
Where is my load?

1869
01:37:25,000 --> 01:37:26,800
That meant, there it is.

1870
01:37:27,600 --> 01:37:28,900
So when we call the bitmap,

1871
01:37:31,900 --> 01:37:34,200
I would need to set it in places like this.

1872
01:37:34,200 --> 01:37:36,700
So when it comes through here and it says like, okay, we're going to

1873
01:37:36,700 --> 01:37:40,800
load this asset in when we set these things.

1874
01:37:41,000 --> 01:37:46,400
So in here, when we take that, that asset header and do a choir, a sad

1875
01:37:46,400 --> 01:37:49,000
memory, I guess an acquirer asset memory.

1876
01:37:49,000 --> 01:37:53,000
We should force it just to make sure everyone sets, it set the asset

1877
01:37:53,000 --> 01:37:53,500
type.

1878
01:37:56,700 --> 01:37:58,700
So, acquire asset memory.

1879
01:38:00,800 --> 01:38:01,600
It's right here.

1880
01:38:02,000 --> 01:38:04,200
It's going to take an asset type.

1881
01:38:07,800 --> 01:38:10,200
and so, then when it actually gets the memory,

1882
01:38:11,600 --> 01:38:16,200
Whenever that actually has to happen when we come down here and we do

1883
01:38:16,200 --> 01:38:18,700
result acid, index result, total size.

1884
01:38:18,700 --> 01:38:22,700
And so on insert header at front when we do the insert header at

1885
01:38:22,700 --> 01:38:23,400
front.

1886
01:38:23,700 --> 01:38:24,100
Mmm,

1887
01:38:26,800 --> 01:38:29,600
We then be set to go, right?

1888
01:38:29,600 --> 01:38:32,400
Because that's the asset, the asset memory header is the thing that

1889
01:38:32,400 --> 01:38:33,400
sort of the type in it.

1890
01:38:33,700 --> 01:38:37,100
So we would just say, Okay, assuming that we got one at the asset,

1891
01:38:37,100 --> 01:38:40,400
type is whatever it is.

1892
01:38:42,000 --> 01:38:42,600
so,

1893
01:38:45,200 --> 01:38:47,500
Oh, right, can't quite do that.

1894
01:38:48,800 --> 01:38:49,200
Oops.

1895
01:38:55,300 --> 01:38:56,500
Or to use that name.

1896
01:39:05,900 --> 01:39:06,600
Let's see.

1897
01:39:06,600 --> 01:39:10,600
Little bit map does not have an overloaded.

1898
01:39:12,000 --> 01:39:13,000
Remember.

1899
01:39:14,900 --> 01:39:16,000
You are correct, sir.

1900
01:39:17,300 --> 01:39:20,900
I do not mean to suggest that it does, and this

1901
01:39:25,400 --> 01:39:26,500
Is an asset header type.

1902
01:39:27,500 --> 01:39:30,500
So then we might as well finish these guys, so this would be an asset

1903
01:39:30,500 --> 01:39:31,500
type sound.

1904
01:39:33,100 --> 01:39:35,000
And this would be an asset type font.

1905
01:39:50,000 --> 01:39:51,100
And that's it.

1906
01:39:51,600 --> 01:39:53,900
I think except for the typo.

1907
01:39:54,500 --> 01:39:55,400
Thank you, compiler.

1908
01:39:57,100 --> 01:40:02,300
So that that's that and we'll leave it at that at the interest of

1909
01:40:02,300 --> 01:40:06,900
closing reasonably and I so I think we're all set up now, we just need

1910
01:40:06,900 --> 01:40:10,000
to do our debugging to figure out like when we're not getting stuff

1911
01:40:10,000 --> 01:40:14,400
and whatever and then we should be good to go.

1912
01:40:14,800 --> 01:40:18,900
So I'll end it there and we'll see if anyone have has any questions.

1913
01:40:18,900 --> 01:40:22,300
But that's, that's basically the infrastructure necessary to do the

1914
01:40:22,300 --> 01:40:23,300
texture downloading.

1915
01:40:24,700 --> 01:40:25,900
We just got a

1916
01:40:27,500 --> 01:40:29,800
We just got to actually set it up.

1917
01:40:30,700 --> 01:40:36,600
Now, there is one more thing we can choose to do if we want to or not,

1918
01:40:37,800 --> 01:40:40,400
which is we can fence the downloads.

1919
01:40:40,700 --> 01:40:42,100
I, that's why I put that to do in there.

1920
01:40:42,100 --> 01:40:45,900
We can do something called fence fencing, the downloads, which makes

1921
01:40:45,900 --> 01:40:48,600
it so that the opengl will just pause.

1922
01:40:48,600 --> 01:40:52,000
If the texture hasn't been downloaded yet, we can do that.

1923
01:40:52,200 --> 01:40:54,700
I don't know that we actually want to put we can

1924
01:40:56,200 --> 01:40:59,500
If we always hit our texture download times, we never have to do that.

1925
01:40:59,500 --> 01:41:02,100
It doesn't matter but you know,

1926
01:41:30,700 --> 01:41:32,400
Are we missing a day in the episode guide?

1927
01:41:32,400 --> 01:41:34,400
The guide only goes up to day two for a two-bit.

1928
01:41:34,400 --> 01:41:37,300
Today's overlay was saying day 244,

1929
01:41:38,700 --> 01:41:39,300
I don't know.

1930
01:41:46,400 --> 01:41:48,400
No, I think that counter was just busted.

1931
01:41:50,200 --> 01:41:52,600
So this is day this is actually day 243.

1932
01:41:53,800 --> 01:41:54,700
Sorry about that.

1933
01:41:56,400 --> 01:41:57,400
Just correct that.

1934
01:41:58,900 --> 01:41:59,300
Yeah.

1935
01:41:59,400 --> 01:41:59,800
What do you mean?

1936
01:42:00,000 --> 01:42:01,800
Said, they 243 the whole time.

1937
01:42:02,400 --> 01:42:03,500
What's wrong with you guys?

1938
01:42:04,000 --> 01:42:05,600
You're obviously mistaken.

1939
01:42:08,100 --> 01:42:11,600
It never said 244, don't be ridiculous.

1940
01:42:15,500 --> 01:42:26,000
and and just look over there, a seagull outside flying around and then

1941
01:42:30,300 --> 01:42:30,800
See.

1942
01:42:32,200 --> 01:42:34,100
I know, I don't know what you guys are talking about.

1943
01:42:34,100 --> 01:42:35,600
You just totally confused.

1944
01:42:39,900 --> 01:42:45,200
Gary Johansen, is it possible to tell opengl which graphics card to

1945
01:42:45,200 --> 01:42:49,600
use if you have more than one in a given machine?

1946
01:42:50,200 --> 01:42:54,800
No, it is not so

1947
01:43:00,500 --> 01:43:03,200
So the answer to that question is a little complicated.

1948
01:43:05,300 --> 01:43:06,400
The short answer is no.

1949
01:43:06,400 --> 01:43:12,800
The long answer is actually it depends on whether they are by the same

1950
01:43:12,800 --> 01:43:19,100
manufacturer or not and if they are by the same manufacturer, then you

1951
01:43:19,100 --> 01:43:20,300
may be able to

1952
01:43:22,700 --> 01:43:23,900
If they aren't then.

1953
01:43:23,900 --> 01:43:24,300
No.

1954
01:43:25,000 --> 01:43:29,600
So for example, if you have like an ATI card and an Nvidia card in one

1955
01:43:29,600 --> 01:43:35,900
machine, only one of the drivers will get loaded will be mapped to you

1956
01:43:35,900 --> 01:43:38,800
as the driver you're talking to when you ask for opengl.

1957
01:43:39,500 --> 01:43:43,300
And there's no way to say give me the opengl context that corresponds

1958
01:43:43,300 --> 01:43:44,700
to that guy's card.

1959
01:43:45,600 --> 01:43:49,000
So whoever is set up as like, the primary display driver is the person

1960
01:43:49,000 --> 01:43:50,300
who you'll actually be talking to.

1961
01:43:52,500 --> 01:43:55,000
If you have to grab, as far as the machine and they're both by the

1962
01:43:55,000 --> 01:43:57,100
same vendor, then it's the same driver.

1963
01:43:57,100 --> 01:44:06,200
Anyway, in that case, opengl will by default, just do whatever it's

1964
01:44:06,200 --> 01:44:07,000
going to do.

1965
01:44:07,100 --> 01:44:10,400
Meaning if the user has set it up as SLI, it'll SLI.

1966
01:44:10,400 --> 01:44:14,000
If the user has set it up as like, just separate and don't use the

1967
01:44:14,000 --> 01:44:15,600
other one it then that's what it will do.

1968
01:44:16,500 --> 01:44:17,100
But

1969
01:44:18,700 --> 01:44:23,600
If it is, for example, Nvidia card and it's a Quadro card, there's a

1970
01:44:23,600 --> 01:44:27,100
graphics API that allows you to iterate over, which cards are in the

1971
01:44:27,100 --> 01:44:30,700
machine and say, which one you're talking to for any particular

1972
01:44:30,700 --> 01:44:31,400
context.

1973
01:44:32,800 --> 01:44:34,400
If it's not a quadrille, you can't.

1974
01:44:35,200 --> 01:44:38,600
And so you just don't have a, there's nothing you can do forget it.

1975
01:44:39,400 --> 01:44:45,600
If it's an ATI card, I think there is a similar one that works on all

1976
01:44:45,600 --> 01:44:46,200
their cards.

1977
01:44:46,200 --> 01:44:48,300
So I think on a TI, you can actually

1978
01:44:48,600 --> 01:44:52,100
I'm trying to talk to this card and I want to use each card

1979
01:44:52,100 --> 01:44:52,700
separately.

1980
01:44:55,800 --> 01:44:58,200
That's all I know.

1981
01:44:58,200 --> 01:44:59,800
I don't know about Intel.

1982
01:45:00,300 --> 01:45:01,900
Since they're integrated Graphics.

1983
01:45:01,900 --> 01:45:05,600
I don't know if there's such a thing technically, as having more than

1984
01:45:05,600 --> 01:45:11,400
one, but it occurs to me that you could duel socket a Skylake in which

1985
01:45:11,400 --> 01:45:14,800
case you do have two gpus and I have no idea what happens in that

1986
01:45:14,800 --> 01:45:15,600
circumstance.

1987
01:45:16,000 --> 01:45:17,800
It's never even really crossed my mind.

1988
01:45:20,700 --> 01:45:23,200
But in theory, you could I don't know what happens.

1989
01:45:24,500 --> 01:45:24,800
so,

1990
01:45:26,500 --> 01:45:27,300
Kubrick Caleb.

1991
01:45:27,300 --> 01:45:30,100
Is it really a good idea to keep the DC round forever.

1992
01:45:30,100 --> 01:45:31,600
What if the user changes their monitor?

1993
01:45:31,600 --> 01:45:34,200
Config while handmade hero is running?

1994
01:45:35,000 --> 01:45:38,600
Well, that's the least of our worries because if the DC has to get

1995
01:45:38,600 --> 01:45:41,400
rebuilt, the opengl context is no longer valid.

1996
01:45:41,900 --> 01:45:46,600
So it's really the opengl context that you'd be worried about, but if

1997
01:45:46,600 --> 01:45:50,600
they change their Monica fig in theory, it it's not going to affect

1998
01:45:50,600 --> 01:45:51,800
the opengl context.

1999
01:45:52,700 --> 01:45:57,200
In theory, it should still work actually.

2000
01:45:57,800 --> 01:46:00,100
So really we just have to reposition our window or something.

2001
01:46:07,800 --> 01:46:10,300
Pragma script wouldn't the allocate and deallocate texture fit better

2002
01:46:10,300 --> 01:46:12,300
in the open Jill there instead of the platform.

2003
01:46:12,500 --> 01:46:19,200
Yeah, I think so because we don't I think that's a reasonable idea

2004
01:46:19,200 --> 01:46:24,100
because I feel like we don't call any platform specific stuff in

2005
01:46:24,100 --> 01:46:24,400
there.

2006
01:46:27,800 --> 01:46:28,100
Right?

2007
01:46:28,100 --> 01:46:31,900
I mean that looks totally fine for moving so I feel like we could

2008
01:46:32,000 --> 01:46:37,200
share them with any platform like if Linux or whatever wants to use

2009
01:46:37,200 --> 01:46:37,500
this.

2010
01:46:37,900 --> 01:46:38,900
I think that's fine.

2011
01:46:40,100 --> 01:46:42,400
So I think that's a totally reasonable thing.

2012
01:46:42,400 --> 01:46:45,000
So let's let's go ahead and do that.

2013
01:46:45,000 --> 01:46:45,600
Should be fine.

2014
01:46:53,700 --> 01:46:56,500
What is Microsoft's rationale for not allowing exclusive full screen

2015
01:46:56,500 --> 01:46:58,200
mode for universal windows.

2016
01:46:58,200 --> 01:47:02,100
Platform games seems like that would just shoot themselves in the

2017
01:47:02,100 --> 01:47:02,700
foot.

2018
01:47:07,800 --> 01:47:08,500
I mean,

2019
01:47:10,900 --> 01:47:13,500
What is Microsoft's rationale for anything?

2020
01:47:14,000 --> 01:47:19,100
I have no idea, they're a large organization with a lot of people in

2021
01:47:19,100 --> 01:47:19,400
it.

2022
01:47:19,900 --> 01:47:22,900
Some of whom are probably reasonable Engineers.

2023
01:47:22,900 --> 01:47:26,300
Who want to make a good decision?

2024
01:47:27,600 --> 01:47:31,600
Some of whom are probably just too inexperienced to make a good

2025
01:47:31,600 --> 01:47:32,200
decision.

2026
01:47:32,600 --> 01:47:37,600
Some of whom are like actively malicious and just want to win at all

2027
01:47:37,600 --> 01:47:39,600
costs and will intentionally make bad decisions who

2028
01:47:40,700 --> 01:47:44,100
And that whole mixture plus deadlines.

2029
01:47:44,100 --> 01:47:49,300
Plus, whatever comes out to give you stuff like universal windows

2030
01:47:49,300 --> 01:47:49,900
platform.

2031
01:47:51,300 --> 01:47:54,700
And then we have to live with it and that's life and it's not a great

2032
01:47:54,700 --> 01:47:55,000
life.

2033
01:47:55,800 --> 01:47:58,400
But why those things happen

2034
01:48:00,800 --> 01:48:01,400
Who knows?

2035
01:48:03,100 --> 01:48:04,500
I don't even know if they do or don't.

2036
01:48:04,500 --> 01:48:07,300
I mean I'm never going to ship in the Universal Windows platform game

2037
01:48:07,300 --> 01:48:10,800
unless it literally is the only way left to ship on windows.

2038
01:48:11,800 --> 01:48:13,100
So I don't care.

2039
01:48:13,800 --> 01:48:16,600
But, you know, I don't know.

2040
01:48:19,900 --> 01:48:20,500
Easy site.

2041
01:48:20,500 --> 01:48:23,600
Is there a way to preload vertices normals and colors to the card in

2042
01:48:23,600 --> 01:48:27,100
the same way as textures EG before a GL drawn?

2043
01:48:27,100 --> 01:48:29,400
This is called or is that usually never an issue?

2044
01:48:29,600 --> 01:48:30,000
No.

2045
01:48:30,000 --> 01:48:31,500
Actually it's exactly the same.

2046
01:48:31,500 --> 01:48:32,600
It's exactly analogous.

2047
01:48:34,000 --> 01:48:38,200
And the reason that we are not doing anything like that here, is

2048
01:48:38,200 --> 01:48:42,400
because all of our information that has to do with vertices is

2049
01:48:42,400 --> 01:48:43,400
actually Dynamic.

2050
01:48:43,500 --> 01:48:46,600
Like everything moves around on on a frame.

2051
01:48:47,700 --> 01:48:49,400
But if we found that

2052
01:48:49,600 --> 01:48:51,500
Really needed to care about something like that.

2053
01:48:51,700 --> 01:48:55,400
Like let's say, for example, for some reason, like the background

2054
01:48:55,400 --> 01:48:59,100
elements that tend to be in the same place like our trees.

2055
01:49:00,800 --> 01:49:05,300
Let's say that those were really expensive like lots of vertices and

2056
01:49:05,300 --> 01:49:07,400
we wanted to try to minimize that bus traffic.

2057
01:49:08,100 --> 01:49:12,200
You can actually create a buffer for vertices the same way that you do

2058
01:49:12,200 --> 01:49:17,000
like a texter and transfer that I think receipt as well if you want to

2059
01:49:20,200 --> 01:49:21,100
It's exactly analogous.

2060
01:49:21,800 --> 01:49:23,200
So in general,

2061
01:49:26,700 --> 01:49:29,500
You can kind of think about this is just the general way that you

2062
01:49:29,500 --> 01:49:31,600
would do stuff that is expensive to transfer.

2063
01:49:31,800 --> 01:49:36,100
Our vertices are mostly Dynamic per frame, and there's not that many

2064
01:49:36,100 --> 01:49:36,600
of them.

2065
01:49:37,100 --> 01:49:39,900
So it's really not something that we have to care about most of our

2066
01:49:39,900 --> 01:49:41,300
data lives in textures.

2067
01:49:42,400 --> 01:49:43,700
And so, you know,

2068
01:49:50,000 --> 01:49:53,700
could you invite Jeff to supervise and micromanage you while coding

2069
01:49:53,700 --> 01:49:54,100
sometime?

2070
01:49:54,800 --> 01:49:58,600
I he'd be a bad one to invite for that because he's actually a very

2071
01:49:58,600 --> 01:49:59,500
hands-off manager.

2072
01:49:59,500 --> 01:50:05,000
He doesn't supervison micromanage people which is, you know, one of

2073
01:50:05,000 --> 01:50:06,200
the reasons I like working for him.

2074
01:50:08,200 --> 01:50:10,700
So you'd probably want to ask somebody else.

2075
01:50:12,600 --> 01:50:14,900
To do that because he probably wouldn't be interested.

2076
01:50:54,900 --> 01:50:56,000
Hubert Keller for 3D Mi.

2077
01:50:56,000 --> 01:50:56,300
Isn't it?

2078
01:50:56,300 --> 01:50:58,200
Typical to upload the mesh to the GPU once?

2079
01:50:58,200 --> 01:50:59,800
And write a shooter that takes a

2080
01:51:00,000 --> 01:51:02,000
For Matrix for transfer drawing, each model?

2081
01:51:02,300 --> 01:51:02,800
Yes.

2082
01:51:04,100 --> 01:51:08,500
And like, that's why I'm saying so, you know, in our circumstance with

2083
01:51:08,500 --> 01:51:12,400
Sprites, it's just a card on the screen, it's four vertices.

2084
01:51:12,600 --> 01:51:16,700
And if we found that specifying four vertices per one was to ownerís.

2085
01:51:17,000 --> 01:51:19,300
We actually don't even have to do that because there's a thing called

2086
01:51:19,300 --> 01:51:22,500
a Tessellation Shader and a geometry Shader and various other things

2087
01:51:22,800 --> 01:51:28,200
that can actually blow out vertices to get you things by specifying,

2088
01:51:28,200 --> 01:51:29,900
only a single vertex and then

2089
01:51:30,000 --> 01:51:32,600
matically generate the four vertices that would create the card.

2090
01:51:34,900 --> 01:51:39,200
So in actuality we just don't have to worry about vertex traffic.

2091
01:51:39,200 --> 01:51:41,400
We can specify all the all the positional information.

2092
01:51:41,400 --> 01:51:47,000
We need every frame very easily and the the size of a transform that

2093
01:51:47,000 --> 01:51:48,500
you normally send down for.

2094
01:51:48,500 --> 01:51:52,200
Even a static mesh, is bigger than the amount of data we send down for

2095
01:51:52,200 --> 01:51:54,200
our Sprite cards right now.

2096
01:51:54,900 --> 01:51:58,600
So we're just not even in that same realm but in a circumstance where

2097
01:51:58,600 --> 01:52:01,900
you have tens of thousands of vertices hundreds of thousands of

2098
01:52:01,900 --> 01:52:02,600
vertices,

2099
01:52:03,900 --> 01:52:04,500
Models.

2100
01:52:05,200 --> 01:52:07,900
Then the same thing you have to do for textures here are that you have

2101
01:52:07,900 --> 01:52:09,700
to do for your vertices.

2102
01:52:10,500 --> 01:52:11,500
It's exactly the same.

2103
01:52:13,500 --> 01:52:15,600
We just don't have any data in vertices.

2104
01:52:15,900 --> 01:52:18,400
All of our vertex data is dynamic removing.

2105
01:52:18,400 --> 01:52:21,300
The whole point of specifying, the very famous to move things around.

2106
01:52:21,600 --> 01:52:28,700
And so we wouldn't get any savings by taking a transform because a

2107
01:52:28,700 --> 01:52:33,000
Transformer, you know, is just as big as the actual vertex data or

2108
01:52:33,000 --> 01:52:33,700
very

2109
01:52:33,800 --> 01:52:39,200
aunt in size essentially, you know, and like I said if we did want to

2110
01:52:39,200 --> 01:52:44,700
compress down that data instead of just instead of sending the four

2111
01:52:44,700 --> 01:52:48,900
vertices, we could actually just send the center in a scale and have a

2112
01:52:50,300 --> 01:52:52,100
A geometry Shader blow that out for us.

2113
01:52:58,800 --> 01:53:01,100
FSS dries, it was just very reasons.

2114
01:53:01,100 --> 01:53:03,500
I wasn't implying anything else Jeff saying, you know I really don't

2115
01:53:03,500 --> 01:53:04,400
like the name of that variable.

2116
01:53:04,800 --> 01:53:07,100
So the funny part about that is Jeff would hate the name of all these

2117
01:53:07,100 --> 01:53:09,200
variables because you can actually understand what they mean.

2118
01:53:09,500 --> 01:53:15,500
Jeff only likes like ABCDE like four, variables, he and Sean like

2119
01:53:15,500 --> 01:53:21,700
don't like to named variables, like actual names very much.

2120
01:53:21,700 --> 01:53:25,600
They like them to be short and concise and hey, there's something to

2121
01:53:25,600 --> 01:53:26,900
that, right less typing.

2122
01:53:27,200 --> 01:53:28,300
I was just on RSI break.

2123
01:53:28,300 --> 01:53:28,500
I can

2124
01:53:28,700 --> 01:53:29,600
Really appreciate.

2125
01:53:31,900 --> 01:53:35,400
That there's power, perhaps very good reason to do that.

2126
01:53:36,300 --> 01:53:40,100
That has nothing to do with the code even so

2127
01:54:01,500 --> 01:54:02,000
She become.

2128
01:54:02,000 --> 01:54:04,700
How the heck do you even read code with one letter variables?

2129
01:54:06,600 --> 01:54:10,600
Well, you know, I mean, you can sort of you can sort of do this

2130
01:54:10,600 --> 01:54:12,400
exercise for yourself if you want.

2131
01:54:12,800 --> 01:54:13,700
So, here's stb.

2132
01:54:13,700 --> 01:54:14,600
Truetype right?

2133
01:54:14,900 --> 01:54:16,900
Which I showed how to use on the stream a while back?

2134
01:54:16,900 --> 01:54:18,400
I was like if you want to read fonts

2135
01:54:20,900 --> 01:54:25,100
So you can look at Sean's code here and you can kind of see what it

2136
01:54:25,100 --> 01:54:26,100
looks like, right?

2137
01:54:27,100 --> 01:54:34,800
He's, you know, they they still put a fair number of variable names in

2138
01:54:34,800 --> 01:54:38,300
there eventually, you know, it's not, it's not all it's, I mean, I'm

2139
01:54:38,300 --> 01:54:40,200
exaggerating when I say that, right?

2140
01:54:40,800 --> 01:54:44,900
So you can kind of see that it's not it's not so so much that way,

2141
01:54:45,000 --> 01:54:45,500
right?

2142
01:54:46,700 --> 01:54:50,000
It's just a lot more concise than my intend to be like, you know,

2143
01:54:51,900 --> 01:54:53,900
you're not going to have with spelled out.

2144
01:54:53,900 --> 01:54:56,100
You're just going to have like w or something.

2145
01:54:56,500 --> 01:55:03,100
But assuming you know what your short hands are and you do use longer

2146
01:55:03,100 --> 01:55:06,800
ones in places where it's important, it's not that, you know, you can

2147
01:55:06,800 --> 01:55:08,000
still read this, right?

2148
01:55:10,400 --> 01:55:13,100
And this is probably a little more verbose than I think Sean's code

2149
01:55:13,100 --> 01:55:15,600
normally is maybe because it's in the sdp library, I don't know, maybe

2150
01:55:15,600 --> 01:55:16,000
not.

2151
01:55:16,800 --> 01:55:20,000
And I think this is more of a post maybe than Jeff Code would be,

2152
01:55:21,100 --> 01:55:22,900
which might have it be even more truncated.

2153
01:55:22,900 --> 01:55:25,800
But you can see that even when I'm saying, like they're more targeted,

2154
01:55:25,800 --> 01:55:30,800
it's not they still have if it's something that needs an explanation,

2155
01:55:30,800 --> 01:55:33,800
they still kind of put it in there, it's just you'll see a lot more of

2156
01:55:33,800 --> 01:55:37,100
like if something could be abbreviated it was and there's a lot more

2157
01:55:37,100 --> 01:55:39,800
like for things that are clearly just iterators.

2158
01:55:39,800 --> 01:55:40,000
It's just

2159
01:55:40,200 --> 01:55:42,300
JK and whatever, right?

2160
01:55:42,300 --> 01:55:43,100
They don't name them.

2161
01:55:43,100 --> 01:55:45,900
What they were they just assumed you could tell from the context which

2162
01:55:45,900 --> 01:55:46,900
is usually true, right?

2163
01:55:46,900 --> 01:55:52,500
It's not that hard to usually sort of suss out, you know?

2164
01:55:53,800 --> 01:55:54,600
What's going on?

2165
01:56:10,700 --> 01:56:11,200
So yeah.

2166
01:56:28,000 --> 01:56:30,400
So is that a about all?

2167
01:56:30,400 --> 01:56:37,100
There is to that feel like we've gotten through all of the questions.

2168
01:56:39,500 --> 01:56:41,400
All right, I'm going to wrap it up.

2169
01:56:42,300 --> 01:56:43,600
I'm going to wrap it on up.

2170
01:56:44,100 --> 01:56:44,800
Hello.

2171
01:56:47,200 --> 01:56:48,300
I'm going to try to anyway.

2172
01:56:56,400 --> 01:56:58,500
Thank you for this dream, you're not doing good job, asking real

2173
01:56:58,500 --> 01:56:58,900
questions.

2174
01:56:58,900 --> 01:56:59,800
I was there was

2175
01:57:00,000 --> 01:57:00,500
because, I mean,

2176
01:57:02,100 --> 01:57:07,300
At the end of the day, you saw what I did, it's just really

2177
01:57:08,400 --> 01:57:09,400
babysitting the driver.

2178
01:57:09,400 --> 01:57:09,900
I mean, the draw.

2179
01:57:09,900 --> 01:57:13,000
All the complexity for programming graphics card on Windows is in the

2180
01:57:13,000 --> 01:57:13,500
driver.

2181
01:57:13,500 --> 01:57:14,900
There's nothing you know.

2182
01:57:17,500 --> 01:57:23,700
Even if you use Vulcan, it's still just babysitting the driver and the

2183
01:57:23,700 --> 01:57:24,400
driver actually does.

2184
01:57:24,400 --> 01:57:28,500
All the actual complexity of like mapping figuring out like how to

2185
01:57:28,500 --> 01:57:30,900
talk to the graphics card and synchronization and all that stuff is

2186
01:57:30,900 --> 01:57:32,600
actually really still mostly all in there.

2187
01:57:32,600 --> 01:57:40,100
So, you know, Graphics programming is largely about if you've already

2188
01:57:40,100 --> 01:57:43,100
worked out like we did on handmade hero, how we wanted everything

2189
01:57:43,100 --> 01:57:46,700
done, transferring it to programming graphics card is, is really just

2190
01:57:46,700 --> 01:57:47,500
about figured

2191
01:57:47,700 --> 01:57:52,000
How to babysit drivers properly to, you know, feed them stuff in the

2192
01:57:52,000 --> 01:57:53,300
way that they want them fed.

2193
01:57:53,900 --> 01:57:55,500
But that's but that's it.

2194
01:57:57,000 --> 01:58:00,300
So there isn't a lot to it anyway.

2195
01:58:02,700 --> 01:58:04,300
I think we'll wrap it up for now.

2196
01:58:05,400 --> 01:58:07,200
Thank you everyone for joining me, for another episode of handmade

2197
01:58:07,200 --> 01:58:07,400
here.

2198
01:58:07,400 --> 01:58:11,900
It has been a pleasure coding with you, as always, hope that you will

2199
01:58:11,900 --> 01:58:18,000
join me tomorrow for going through and stepping through our texture

2200
01:58:18,000 --> 01:58:18,500
download stuff.

2201
01:58:18,500 --> 01:58:22,600
So we can get it all working and then check that off of our list of

2202
01:58:22,600 --> 01:58:23,400
things to do.

2203
01:58:24,200 --> 01:58:27,000
As always, if you would like to follow along at home of the source

2204
01:58:27,000 --> 01:58:30,800
code, you can always pre-order the game handmade Hero on handmade hero

2205
01:58:30,800 --> 01:58:31,400
dot-org.

2206
01:58:31,400 --> 01:58:34,000
And it comes to the source code, which you can download at any time.

2207
01:58:35,200 --> 01:58:38,400
If you would like to use the editor that we're now using, it's called

2208
01:58:38,400 --> 01:58:39,100
for a coder.

2209
01:58:39,500 --> 01:58:42,200
You can get it by typing for a coder and returning here.

2210
01:58:42,200 --> 01:58:45,200
I'll try to put a link on the web page so that we know that it'll just

2211
01:58:45,200 --> 01:58:45,900
be up here.

2212
01:58:46,000 --> 01:58:49,100
Eventually that's editor.

2213
01:58:49,100 --> 01:58:52,000
We're using, if you would like to do it, you can support Alan Webster.

2214
01:58:52,000 --> 01:58:56,100
Who's the developer on patreon, and you can have your own copy of it.

2215
01:58:56,600 --> 01:59:02,200
That is the same as the one that I am working with on stream, that's

2216
01:59:02,200 --> 01:59:02,900
about it.

2217
01:59:05,300 --> 01:59:07,800
We also have a patronage whilst worth of video series for a forum

2218
01:59:07,800 --> 01:59:10,200
site, if you want to ask questions and we have a tweet, but if you

2219
01:59:10,200 --> 01:59:13,900
want to know the schedule, please go to him a hero dot org, and check

2220
01:59:13,900 --> 01:59:14,300
those out.

2221
01:59:14,300 --> 01:59:18,200
If those are things that interest, you, if not, and you just want to

2222
01:59:18,200 --> 01:59:21,200
hang out here on the stream, we will be back here tomorrow.

2223
01:59:21,200 --> 01:59:21,700
5:00 p.m.

2224
01:59:21,700 --> 01:59:24,300
Pacific Standard Time to do the rest of that texture programming.

2225
01:59:24,500 --> 01:59:28,500
Hope to see you here, until then, please have fun programming and I

2226
01:59:28,500 --> 01:59:29,600
will see you guys on the internet.

2227
01:59:29,700 --> 01:59:30,500
Take it easy, everyone.

