1
00:00:00,800 --> 00:00:01,800
I do a little stop.

2
00:00:01,800 --> 00:00:02,600
Start recording.

3
00:00:02,800 --> 00:00:04,400
Hello everyone and welcome to handmade hero.

4
00:00:04,400 --> 00:00:07,000
The show we could complete game live on stream.

5
00:00:07,400 --> 00:00:12,500
I have some work to do from yesterday yesterday.

6
00:00:12,500 --> 00:00:16,400
We made it so that we could dump data into our debug stream.

7
00:00:17,100 --> 00:00:21,000
Our debug string previously contained, mostly just profiling data and

8
00:00:21,000 --> 00:00:23,500
now we can dump just arbitrary data in there.

9
00:00:23,900 --> 00:00:28,000
And so now that we've done that, what we would like to do is have ways

10
00:00:28,000 --> 00:00:29,800
to gather up that data and display.

11
00:00:30,000 --> 00:00:33,300
It so that we have kind of a nice convenient way to put anything that

12
00:00:33,300 --> 00:00:35,200
we want to put into that stream.

13
00:00:35,600 --> 00:00:37,900
So that's what I've got to do now.

14
00:00:39,200 --> 00:00:42,300
Because we got just to the point where we would start implementing

15
00:00:42,300 --> 00:00:45,500
that yesterday and then we were done with the stream.

16
00:00:45,500 --> 00:00:49,500
So today is the day that we start to tackle that problem.

17
00:00:49,500 --> 00:00:54,900
So I'm going to go ahead and do exactly that, that is after I adjust

18
00:00:54,900 --> 00:00:58,200
my chair which apparently is not adjusted properly, and that's

19
00:00:58,200 --> 00:01:01,400
obviously, no good, you know, nobody wants a maladjusted chair.

20
00:01:03,000 --> 00:01:08,000
All right, so I need to go ahead and get myself.

21
00:01:09,000 --> 00:01:09,700
Up here.

22
00:01:11,000 --> 00:01:13,000
Let's see where we were at.

23
00:01:13,000 --> 00:01:15,500
Today is day 2009.

24
00:01:16,100 --> 00:01:20,300
Which means that if you would like to follow along with with me at

25
00:01:20,300 --> 00:01:25,900
home you want to unpack Day 2008 source code into the directory in

26
00:01:25,900 --> 00:01:28,900
which you are working, that is the source code that I will be working

27
00:01:28,900 --> 00:01:29,600
with today.

28
00:01:30,300 --> 00:01:33,600
I do not know why I find similar results and up here, we could just

29
00:01:33,600 --> 00:01:34,700
pretend that never happened.

30
00:01:34,700 --> 00:01:35,200
I suppose.

31
00:01:36,500 --> 00:01:36,700
Oh.

32
00:01:36,700 --> 00:01:37,100
You know what?

33
00:01:37,100 --> 00:01:38,600
It probably was because we

34
00:01:38,700 --> 00:01:42,900
A little, we probably use the other platform to search for offset of

35
00:01:42,900 --> 00:01:43,200
our do.

36
00:01:43,200 --> 00:01:45,800
Remember why that was there and probably, left it up there.

37
00:01:46,600 --> 00:01:50,100
Anyway, so here is where we left off again, everything running

38
00:01:50,100 --> 00:01:50,800
correctly.

39
00:01:50,900 --> 00:01:53,700
Nothing out of the ordinary and all the stuff is still working.

40
00:01:54,500 --> 00:01:57,500
So, we're in good shape there, but we are not actually, you know,

41
00:01:57,500 --> 00:02:00,200
although we've got our profile data obviously and stuff like that.

42
00:02:00,200 --> 00:02:00,700
That's happening.

43
00:02:00,900 --> 00:02:04,300
We have not yet done anything with that other data.

44
00:02:04,300 --> 00:02:07,700
The object stuff that's that's kind of being dumped out there.

45
00:02:07,700 --> 00:02:08,600
We've got entity.

46
00:02:09,100 --> 00:02:11,600
Information that's being printed out in the Stream and then we don't

47
00:02:11,600 --> 00:02:13,400
actually ever use that information.

48
00:02:13,600 --> 00:02:15,700
So that's what I'm going to try and do today is just get that

49
00:02:15,700 --> 00:02:19,100
information displaying somewhere so that we can look at it.

50
00:02:19,300 --> 00:02:23,200
And again, this is very tricky, code the code that we've been working

51
00:02:23,200 --> 00:02:24,900
on for the past couple days.

52
00:02:27,100 --> 00:02:29,000
It's been about two weeks of working on.

53
00:02:31,000 --> 00:02:32,100
Debug hierarchy stuff.

54
00:02:33,600 --> 00:02:35,600
There's a lot of very subtle decisions and they're very difficult to

55
00:02:35,600 --> 00:02:36,200
get right.

56
00:02:36,600 --> 00:02:39,400
And so it's kind of a iterative refinement process for you.

57
00:02:39,400 --> 00:02:42,300
Kind of have to go through and go through a bunch of iterations to

58
00:02:42,300 --> 00:02:42,900
actually get it.

59
00:02:42,900 --> 00:02:43,500
Correct.

60
00:02:44,100 --> 00:02:46,500
Typically, most people don't bother going through any of those

61
00:02:47,200 --> 00:02:51,000
iterations and you end up with kind of just some code like we have

62
00:02:51,000 --> 00:02:54,000
right now if we were to just kind of stop and just use it as it is,

63
00:02:54,200 --> 00:02:57,400
which has a bunch of drawbacks that are not really that good right

64
00:02:57,400 --> 00:02:57,600
there.

65
00:02:57,600 --> 00:02:59,800
Not something that we want to continue to have

66
00:03:00,300 --> 00:03:02,800
So it's kind of important to make sure that you spend enough time to

67
00:03:02,800 --> 00:03:07,300
sort of smooth out those rough spots until it's actually clear that

68
00:03:07,300 --> 00:03:13,000
it's able to do the things that you really wanted to do and not that

69
00:03:14,000 --> 00:03:14,900
it's able to do things.

70
00:03:14,900 --> 00:03:19,600
You really want to do in a concise way and not that you are able to do

71
00:03:19,600 --> 00:03:21,900
things, you want to do with a tremendous amount of like overhead or

72
00:03:21,900 --> 00:03:24,500
weird work on the usage side, right?

73
00:03:25,600 --> 00:03:29,100
A lot of debug systems, end up with these huge things, you have to do

74
00:03:29,100 --> 00:03:29,700
to use them.

75
00:03:29,700 --> 00:03:29,900
And

76
00:03:30,000 --> 00:03:34,200
they had that kind of defeats a lot of the purpose of of actually

77
00:03:34,400 --> 00:03:37,300
doing the debug system in the first place, right?

78
00:03:37,800 --> 00:03:42,900
So here is the thing that we're doing is in terms of dumping data out

79
00:03:43,000 --> 00:03:45,400
and you can see here that we've got like our data block, beginning our

80
00:03:45,400 --> 00:03:46,700
data block and an in-between.

81
00:03:46,700 --> 00:03:48,600
There we put out a lot of values here.

82
00:03:48,700 --> 00:03:52,300
These values are the elements of the entity that we're talking about,

83
00:03:52,300 --> 00:03:53,500
in this particular case.

84
00:03:53,800 --> 00:03:56,800
And so what I want to do is that, you know, and those are going into

85
00:03:56,800 --> 00:03:57,300
the stream.

86
00:03:57,400 --> 00:03:59,800
What I want to do is gather those kind of back.

87
00:04:00,000 --> 00:04:00,200
Up.

88
00:04:00,200 --> 00:04:04,100
Again, inside the debug code just like we were pulling profile

89
00:04:04,100 --> 00:04:04,700
regions.

90
00:04:04,900 --> 00:04:06,900
I want to gather those back up again into something that I can

91
00:04:06,900 --> 00:04:08,200
display, right.

92
00:04:09,700 --> 00:04:13,900
so, in order to do that, what I have to do here is

93
00:04:18,800 --> 00:04:20,300
inside the debug coalition.

94
00:04:22,700 --> 00:04:26,800
Wherever that lives, there it is inside the debug collation.

95
00:04:27,500 --> 00:04:31,300
I have to do a bunch of work just like I was doing with the blocks

96
00:04:31,300 --> 00:04:34,100
here for profiling.

97
00:04:34,300 --> 00:04:37,200
I have to be able to do that for the data as well.

98
00:04:37,700 --> 00:04:41,100
So what I'm going to do is I'm going to basically follow the exact

99
00:04:41,100 --> 00:04:44,600
same process where when I hit an open block, right?

100
00:04:44,600 --> 00:04:48,100
I'm going to say, OK, when a block gets opened, I'm going to allocate

101
00:04:48,100 --> 00:04:50,900
a new one here, and this is going to be for the data.

102
00:04:51,900 --> 00:04:54,500
And I'm going to fill out this information here.

103
00:04:54,700 --> 00:04:58,000
Now, the interesting thing about this is if you look for the most

104
00:04:58,000 --> 00:05:01,500
part, this sort of stuff can be almost entirely again.

105
00:05:02,500 --> 00:05:05,500
Sort of shared between the two pieces of code because all of this

106
00:05:05,500 --> 00:05:09,100
stuff is is essentially the same thing, right?

107
00:05:09,100 --> 00:05:11,100
So the only thing that really changes.

108
00:05:11,100 --> 00:05:14,800
If you look the way this actually works, you can see that there's this

109
00:05:14,800 --> 00:05:18,700
concept of chaining that we're doing here for these debug blocks.

110
00:05:18,900 --> 00:05:21,400
Where in one case, I would be putting it on the

111
00:05:21,700 --> 00:05:22,100
Block.

112
00:05:22,100 --> 00:05:25,200
So, like up in this one here I'll be putting on the code block but in

113
00:05:25,200 --> 00:05:29,000
this case here I would be putting it on the data block, right?

114
00:05:29,000 --> 00:05:31,400
So there's there's a data block cheering in a code Block Chain.

115
00:05:31,700 --> 00:05:32,400
Is that really a change?

116
00:05:32,400 --> 00:05:36,700
Just a little stack I mean it is a chain but it's conceptually just to

117
00:05:36,700 --> 00:05:39,900
stack you know whatever the last one that's open is that's the one

118
00:05:40,400 --> 00:05:41,700
that we're working with or whatever.

119
00:05:42,500 --> 00:05:46,100
So if you if you know how that works it means that probably what I

120
00:05:46,100 --> 00:05:48,100
could do is say that you know

121
00:05:48,700 --> 00:05:52,600
My allocate open debug block, I could go ahead and make that be

122
00:05:52,600 --> 00:05:54,000
something a little more automated.

123
00:05:54,000 --> 00:05:59,000
So if I want to, I can just extend that out into something where you

124
00:05:59,000 --> 00:05:59,900
know, I'm passing.

125
00:06:00,000 --> 00:06:03,900
Little more information here and then it could just do that work for

126
00:06:03,900 --> 00:06:04,200
me.

127
00:06:04,300 --> 00:06:05,400
That's being done here.

128
00:06:05,400 --> 00:06:06,500
Manually, right?

129
00:06:06,500 --> 00:06:08,300
So it doesn't actually have to do.

130
00:06:08,900 --> 00:06:11,600
I don't actually have to write out that code every time that's

131
00:06:11,600 --> 00:06:13,000
something that could just happen in here.

132
00:06:13,300 --> 00:06:16,100
So after it kind of gets the result, you know, it could do this sort

133
00:06:16,100 --> 00:06:19,800
of thing where it fills out all of this stuff, right?

134
00:06:20,300 --> 00:06:24,100
So we have there, we've got our source, that's our debug record,

135
00:06:24,100 --> 00:06:24,700
right?

136
00:06:25,200 --> 00:06:28,200
We've got our frame index like so,

137
00:06:30,400 --> 00:06:32,600
And we've got our opening event.

138
00:06:32,800 --> 00:06:34,800
And since we have those in both cases, right?

139
00:06:34,800 --> 00:06:38,400
It's pretty free to just have those get past and so now when we do

140
00:06:38,400 --> 00:06:42,200
allocate D, sorry allocate open debug lock.

141
00:06:43,200 --> 00:06:46,300
In this case two, I can do the exact same thing and I can just go

142
00:06:46,300 --> 00:06:48,900
ahead and say, all right, we've got the frame index.

143
00:06:52,400 --> 00:06:53,000
Events.

144
00:06:54,400 --> 00:06:55,200
And thesaurus.

145
00:06:57,000 --> 00:06:59,500
And then we still have to do this separately, right?

146
00:06:59,500 --> 00:07:00,800
This is still different.

147
00:07:01,700 --> 00:07:02,200
I could.

148
00:07:02,200 --> 00:07:06,500
However, say well, since the debug block does have a parent there, I

149
00:07:06,500 --> 00:07:10,700
could do something like this where I say, alright, since I know that,

150
00:07:10,700 --> 00:07:13,100
it's a certain pointer that's actually getting operate on there.

151
00:07:13,100 --> 00:07:17,800
I could say here is the place to chain it as well and have that chain

152
00:07:17,800 --> 00:07:19,800
operate automatically as well.

153
00:07:20,000 --> 00:07:23,600
So for example, I could just say, hey, you know,

154
00:07:24,600 --> 00:07:25,600
Something like this.

155
00:07:27,800 --> 00:07:30,600
And then, this code could also go in here, right?

156
00:07:30,700 --> 00:07:36,200
So, I could do that at the bottom, where we say, okay, whatever the

157
00:07:36,800 --> 00:07:40,300
first open block pointer is here, right?

158
00:07:41,300 --> 00:07:42,300
We're going to write to it.

159
00:07:45,300 --> 00:07:45,700
Excuse me.

160
00:07:48,400 --> 00:07:50,200
So, something like this.

161
00:07:53,000 --> 00:07:54,700
And now we should have a situation.

162
00:07:54,700 --> 00:07:57,800
Oops, there we go.

163
00:07:57,900 --> 00:08:02,800
We should have a situation where hmm.

164
00:08:04,900 --> 00:08:05,700
Scratchy throat.

165
00:08:11,800 --> 00:08:16,200
We should have a situation where all of that stuff is now handled

166
00:08:16,200 --> 00:08:20,400
automatically for us in nothing particularly weird is happening.

167
00:08:21,200 --> 00:08:21,900
So, let's see here.

168
00:08:21,900 --> 00:08:23,300
Looks like got a parameter there.

169
00:08:23,300 --> 00:08:28,000
So you 32 debug record, debug Event, open to account for 3, from debug

170
00:08:28,600 --> 00:08:30,100
events, to debug record.

171
00:08:30,100 --> 00:08:32,600
So it looks like these are in the wrong order here, frame, index,

172
00:08:32,600 --> 00:08:34,400
events or astray - with source.

173
00:08:34,700 --> 00:08:40,400
And here, I did them frame index Source event, so that's just a slight

174
00:08:41,600 --> 00:08:42,700
Order problem.

175
00:08:43,100 --> 00:08:44,600
So there we go.

176
00:08:47,400 --> 00:08:49,100
And that's it.

177
00:08:49,700 --> 00:08:54,900
So now that we've got that again, the closing stuff is very similar

178
00:08:54,900 --> 00:08:57,800
but presumably, since all of this interior stuff is going to be

179
00:08:57,800 --> 00:08:59,900
different, I don't know that it's going to have the same.

180
00:09:00,000 --> 00:09:05,700
Kind of a for lack of better term of the same kind of a sharing as the

181
00:09:05,700 --> 00:09:06,200
other one will be.

182
00:09:06,200 --> 00:09:09,900
So I'm going to start by kind of I guess.

183
00:09:09,900 --> 00:09:13,900
I'll I guess what I will do is I'll grab at least the whole thing and

184
00:09:13,900 --> 00:09:17,600
then kind of trim, just so we can see the structure of it a little bit

185
00:09:17,600 --> 00:09:18,000
better.

186
00:09:18,400 --> 00:09:22,800
So in here, right, if I've got this sort of get record from scope

187
00:09:22,800 --> 00:09:26,800
thing, the clocking and all this sort of stuff, we don't really care

188
00:09:26,800 --> 00:09:27,900
about that stuff.

189
00:09:28,400 --> 00:09:29,700
So, in general, I

190
00:09:30,000 --> 00:09:34,100
I'd say that this stuff doesn't really matter here and similarly like

191
00:09:34,100 --> 00:09:36,700
frames in between beginning and spans and that sort of stuff.

192
00:09:36,700 --> 00:09:38,600
This isn't that really a span situation.

193
00:09:38,600 --> 00:09:42,600
So in theory, this stuff is pretty much good to go.

194
00:09:42,600 --> 00:09:46,100
Nothing particularly weird, there, it's all, it's all fine.

195
00:09:47,300 --> 00:09:50,900
So mostly all we really want to do is just do you allocate the open

196
00:09:50,900 --> 00:09:55,000
debug block whenever we actually get here, right?

197
00:09:59,800 --> 00:10:04,700
So assuming that we have an open data block, we want to do is say

198
00:10:04,700 --> 00:10:09,000
whatever the, whatever the matching block is that we've released the

199
00:10:09,000 --> 00:10:11,200
one that we think is going to be the matching block is going to be

200
00:10:11,200 --> 00:10:12,300
that, right?

201
00:10:12,700 --> 00:10:16,100
So we grab that one, we then see what the event is on that matching

202
00:10:16,100 --> 00:10:19,500
block and then we'd be then see if these events match.

203
00:10:19,500 --> 00:10:22,200
Now that I guess is a good case there.

204
00:10:22,200 --> 00:10:25,000
That looks like something we could easily pull out, right?

205
00:10:25,100 --> 00:10:28,800
So this is basically something like inline pool, you know, events

206
00:10:28,800 --> 00:10:29,400
match.

207
00:10:32,000 --> 00:10:34,500
And in this case it's just going to do exactly what it does right

208
00:10:34,500 --> 00:10:34,900
there.

209
00:10:35,100 --> 00:10:37,500
And so that would be something where we have to debug events.

210
00:10:37,500 --> 00:10:40,000
You know, we've got debug event, a and debug event B.

211
00:10:40,500 --> 00:10:46,300
And in this case we would just say like okay we've got a we've got

212
00:10:46,300 --> 00:10:50,100
the, we just want to know if the same a

213
00:10:51,700 --> 00:10:56,600
and B and A and B.

214
00:10:58,800 --> 00:11:04,300
So that is is that, I don't know why bother putting an if statement

215
00:11:04,300 --> 00:11:09,400
there just left over from where I cut and paste it.

216
00:11:09,700 --> 00:11:15,300
So that's whether or not at the events match and so I should be able

217
00:11:15,300 --> 00:11:15,900
to do something.

218
00:11:15,900 --> 00:11:20,000
Now where I just say like, okay, you know, this is really an event if

219
00:11:20,000 --> 00:11:24,100
events match and I could actually cause events are equal.

220
00:11:24,800 --> 00:11:27,300
And so in here I could say like, all right,

221
00:11:28,300 --> 00:11:32,000
Let's let me actually see if I should call it that or match.

222
00:11:32,500 --> 00:11:34,000
So, debug event has what in it.

223
00:11:34,000 --> 00:11:37,200
Exactly platform.

224
00:11:37,200 --> 00:11:41,500
Handmade platform, debug events.

225
00:11:42,700 --> 00:11:47,000
So debug event has a bunch of stuff so so R equals wrong ISO.

226
00:11:47,000 --> 00:11:49,300
Match match events, match is better.

227
00:11:49,300 --> 00:11:52,100
Because in this case we are talking about sort of this like fuzzy

228
00:11:52,100 --> 00:11:54,900
match, they're not actually going to be equal because it were really

229
00:11:54,900 --> 00:11:58,800
just talking about whether some of these things line up properly,

230
00:11:58,900 --> 00:11:59,500
right?

231
00:12:01,000 --> 00:12:01,900
That does seem like.

232
00:12:04,500 --> 00:12:05,400
The way it should go.

233
00:12:07,600 --> 00:12:08,800
Now there is one part of it.

234
00:12:08,800 --> 00:12:13,200
That's a little bit wonky, which is the thread, the thread ID core

235
00:12:13,200 --> 00:12:19,200
index bit here, I feel like that part kind of has to be elevated out

236
00:12:19,200 --> 00:12:22,500
because we need that in addition to the data that's being stored

237
00:12:22,900 --> 00:12:23,600
right?

238
00:12:23,900 --> 00:12:27,500
The thread ID, Corey index thing is, at least the thread ID part is

239
00:12:27,500 --> 00:12:31,800
very important for us to kind of match that stuff out, you know, I

240
00:12:33,000 --> 00:12:38,200
Yeah I guess only the thread ID really is right if we want to get

241
00:12:38,200 --> 00:12:42,200
right down to it, but either or like that kind of has to be something

242
00:12:42,200 --> 00:12:45,100
that would be matchable across multiple different types of events.

243
00:12:45,100 --> 00:12:49,700
So I think you probably want to do something more like this, right?

244
00:12:49,700 --> 00:12:53,300
Where we sort of say, you know, there's a there's a data package and

245
00:12:53,300 --> 00:12:54,400
then there's this and thread.

246
00:12:54,400 --> 00:12:57,600
ID is actually an important thing that kind of has to be in there,

247
00:12:57,600 --> 00:12:58,100
right?

248
00:12:58,900 --> 00:13:02,400
I think that makes some sense, so yeah.

249
00:13:02,700 --> 00:13:06,800
That also suggests to me, that we would have to get that information,

250
00:13:07,000 --> 00:13:10,700
which we are not currently doing so inside, handmade platform.

251
00:13:10,800 --> 00:13:16,200
If we take a look at the TC, like the TC thread ID and stuff, this

252
00:13:16,200 --> 00:13:21,400
stuff here, where we do record debug event you know when we're calling

253
00:13:21,400 --> 00:13:24,700
the common thing it looks like now we could sort of start to talk

254
00:13:24,700 --> 00:13:27,400
about the fact that well really honestly this is actually going to

255
00:13:27,400 --> 00:13:31,900
happen everywhere so we really don't need the common and regular

256
00:13:31,900 --> 00:13:32,400
versions of

257
00:13:32,500 --> 00:13:36,600
This we could just say that now, actually, it's always the common one,

258
00:13:37,100 --> 00:13:40,600
and these guys actually are going to get set pretty much every time

259
00:13:41,000 --> 00:13:45,100
for every thing that seems reasonable to me.

260
00:13:45,900 --> 00:13:49,100
So if I get rid of that, then what that means is the common version

261
00:13:49,100 --> 00:13:50,200
kind of goes away here.

262
00:13:50,200 --> 00:13:50,600
Oops.

263
00:13:52,900 --> 00:13:57,200
And so all these guys record, debug event, common is just going to

264
00:13:57,200 --> 00:13:59,000
become record debug event.

265
00:14:01,200 --> 00:14:02,200
And that's all good.

266
00:14:03,700 --> 00:14:08,500
okay, so yeah, this then becomes

267
00:14:11,900 --> 00:14:14,100
Well, that's actually just fine the way it is right now.

268
00:14:14,800 --> 00:14:17,700
So this guy now is going to say, okay, I want to make sure the opening

269
00:14:17,700 --> 00:14:20,800
event and the event match if they do then off we go.

270
00:14:21,300 --> 00:14:23,600
And again, that's something that now I can share.

271
00:14:23,900 --> 00:14:26,900
So in here I can also say, you know, if events match.

272
00:14:27,300 --> 00:14:32,300
So that that is not actually something that has to be done

273
00:14:32,300 --> 00:14:33,600
differently, right?

274
00:14:34,500 --> 00:14:40,000
And that should pretty much do it right?

275
00:14:40,200 --> 00:14:40,900
This

276
00:14:41,100 --> 00:14:43,900
Again, is the same.

277
00:14:43,900 --> 00:14:46,400
When we do deallocate open debug block.

278
00:14:49,400 --> 00:14:53,700
If you look at how that goes, I feel like that's something where we

279
00:14:53,700 --> 00:14:56,300
could totally have.

280
00:14:58,500 --> 00:14:59,700
We could totally have that.

281
00:15:00,000 --> 00:15:04,200
Threading, the the chain management, right?

282
00:15:04,400 --> 00:15:10,800
I feel like, I feel like something like, this, could easily be done,

283
00:15:11,000 --> 00:15:11,500
right?

284
00:15:11,600 --> 00:15:15,700
So this is first open data block, that's first open code block and now

285
00:15:15,700 --> 00:15:20,600
we know that we just have to make sure that this thing happens right

286
00:15:21,600 --> 00:15:22,600
in that deallocate.

287
00:15:22,600 --> 00:15:25,800
So when we do deallocate open debug lock, we actually want to do

288
00:15:25,900 --> 00:15:27,100
whatever the pointer is.

289
00:15:27,100 --> 00:15:29,400
So, you know, this is a open.

290
00:15:29,400 --> 00:15:29,800
Debug

291
00:15:30,000 --> 00:15:33,100
Lock first, I don't know what we called up here.

292
00:15:33,900 --> 00:15:35,700
First block or something.

293
00:15:35,700 --> 00:15:37,600
Yeah, first open block.

294
00:15:40,300 --> 00:15:44,800
and so, what we would do is say, okay, we've got the first open block

295
00:15:47,600 --> 00:15:51,700
We want that to be equal to whatever the parent is, right?

296
00:15:56,600 --> 00:15:57,200
Well.

297
00:16:00,100 --> 00:16:00,800
Okay.

298
00:16:03,000 --> 00:16:04,200
But hold on a second.

299
00:16:08,500 --> 00:16:11,500
Is that actually always the block that gets passed in here?

300
00:16:13,400 --> 00:16:14,800
so, matching block

301
00:16:16,400 --> 00:16:17,000
Becomes threat.

302
00:16:17,000 --> 00:16:22,500
First open code block, then we do deallocate thread first open code

303
00:16:22,500 --> 00:16:23,000
block.

304
00:16:24,700 --> 00:16:26,000
That actually is the one.

305
00:16:36,800 --> 00:16:39,700
That seems reasonable because the first open code block is always the

306
00:16:39,700 --> 00:16:41,700
one that we're popping off when we get to the end we're going to be

307
00:16:41,700 --> 00:16:42,700
popping this one off.

308
00:16:43,000 --> 00:16:45,300
So when we do this here and I'm going to look at take a look at

309
00:16:45,300 --> 00:16:46,300
matching block here.

310
00:16:46,700 --> 00:16:49,100
So if we take a look at matching block, right, it kind of just does

311
00:16:49,100 --> 00:16:52,700
its thing and then at the end when we say we want to do, okay?

312
00:16:52,700 --> 00:16:53,100
At the open.

313
00:16:53,100 --> 00:16:55,900
Debug look what would be saying here is like, okay, we want to

314
00:16:55,900 --> 00:17:00,100
deallocate matching Block, it's always actually the top one.

315
00:17:00,300 --> 00:17:03,700
So in some sense we could just even pass just a single thing in.

316
00:17:03,900 --> 00:17:06,400
We could do it this way where we say like okay,

317
00:17:06,599 --> 00:17:08,599
We're just going to say here's the block to free.

318
00:17:11,500 --> 00:17:12,800
And so it's something like this.

319
00:17:12,800 --> 00:17:14,700
We have first open block where we just go.

320
00:17:14,700 --> 00:17:16,900
Like, okay, the open debug block free.

321
00:17:16,900 --> 00:17:21,400
Block equals whatever first open, block is so free Block next three

322
00:17:21,400 --> 00:17:21,800
equals.

323
00:17:21,800 --> 00:17:24,800
You know, first free block and then debug say perspectives equals free

324
00:17:24,800 --> 00:17:25,200
Block, right?

325
00:17:25,200 --> 00:17:26,800
So, that kind of like, cleans that up.

326
00:17:27,000 --> 00:17:29,400
And then in here, we say, oh first open block, is now going to be

327
00:17:29,400 --> 00:17:33,600
equal to whatever the three blocks parent was right.

328
00:17:34,700 --> 00:17:35,900
In fact we could do that right?

329
00:17:35,900 --> 00:17:36,500
Right there.

330
00:17:37,500 --> 00:17:40,300
So that would allow us to leverage this.

331
00:17:40,300 --> 00:17:43,300
The code pretty much exactly the same in both cases.

332
00:17:44,900 --> 00:17:49,000
So that seems like a good idea to me.

333
00:17:50,800 --> 00:17:53,900
That's what I at least think.

334
00:17:53,900 --> 00:17:59,700
So I'm going to go ahead and see how that plays out and, and we'll see

335
00:17:59,700 --> 00:17:59,800
you.

336
00:18:00,000 --> 00:18:00,400
Yes.

337
00:18:00,900 --> 00:18:01,100
All right.

338
00:18:01,100 --> 00:18:05,600
So I'm going to go ahead and, and fix these compile errors here.

339
00:18:06,300 --> 00:18:10,500
Just see where we're at, let's find out.

340
00:18:10,800 --> 00:18:15,300
So we've got some array index, multiple definitions.

341
00:18:15,300 --> 00:18:20,800
So our, our thing here, where I did this obviously, I did a slight, a

342
00:18:20,800 --> 00:18:22,200
slight mistake.

343
00:18:22,400 --> 00:18:26,400
There was a slight mistake involved here, record, debug event.

344
00:18:29,100 --> 00:18:30,600
Probably needs to have.

345
00:18:31,900 --> 00:18:32,600
Yeah it does.

346
00:18:32,800 --> 00:18:36,800
It needs to have some kind of a guarding around it so that it doesn't

347
00:18:36,800 --> 00:18:37,900
get multiplied to find.

348
00:18:38,200 --> 00:18:43,100
So you can see in here, like, it's end block, right?

349
00:18:43,100 --> 00:18:48,900
That is not actually, it doesn't actually have a wrapper around this

350
00:18:49,100 --> 00:18:52,900
and so this stuff when it kind of puts forth into the stream there,

351
00:18:52,900 --> 00:18:56,000
you would create multiple defined symbols if you ever called en Bloc

352
00:18:56,000 --> 00:18:57,200
and can multiple times.

353
00:18:57,200 --> 00:18:58,700
So we're just wrapping it in.

354
00:18:58,900 --> 00:19:02,000
Those braces to make sure that all those variables aren't don't kind

355
00:19:02,000 --> 00:19:04,100
of pollute out to the to the outer scope.

356
00:19:05,900 --> 00:19:06,800
So that's all good.

357
00:19:06,800 --> 00:19:09,700
And in theory now, we should still see the same result Loops.

358
00:19:09,700 --> 00:19:11,500
That's the head don't want to do that.

359
00:19:12,100 --> 00:19:19,400
We should still see the same results here where we kind of expect no

360
00:19:19,400 --> 00:19:23,400
changes in our, in our sort of ability to view the profile, which

361
00:19:23,400 --> 00:19:24,400
looks roughly correct.

362
00:19:25,100 --> 00:19:28,200
And so that's it for that.

363
00:19:28,300 --> 00:19:28,700
Now, that

364
00:19:28,800 --> 00:19:30,300
We have open debug box.

365
00:19:30,300 --> 00:19:34,200
All we need to do is actually have a way to kind of, like, put stuff

366
00:19:34,200 --> 00:19:36,000
out, you know, Bill stuff out into them.

367
00:19:39,900 --> 00:19:41,300
Such that the debug system.

368
00:19:43,000 --> 00:19:44,000
Is able to.

369
00:19:46,800 --> 00:19:47,700
is able to sort of

370
00:19:50,400 --> 00:19:52,500
parse through them after, right?

371
00:19:53,100 --> 00:19:57,000
And so what we could do is we could go ahead and try to use the

372
00:19:57,000 --> 00:19:59,800
variable system, but what's going to happen, right?

373
00:19:59,900 --> 00:20:02,600
Is, this is going to kind of and this is why I want to do this part of

374
00:20:02,600 --> 00:20:02,900
it.

375
00:20:03,000 --> 00:20:05,100
What's going to happen here is we're going to come across some things

376
00:20:05,100 --> 00:20:09,000
in our in our variable system that make it harder to do this and those

377
00:20:09,000 --> 00:20:13,100
are the things that we want to fix but it's easiest to do that usually

378
00:20:13,100 --> 00:20:14,700
by just starting and doing it.

379
00:20:14,800 --> 00:20:18,800
So I'm going to actually just go ahead and slowly kind of move it over

380
00:20:19,400 --> 00:20:20,100
and and

381
00:20:20,300 --> 00:20:24,100
And get it to the point where it's, you know, obvious kind of how we

382
00:20:24,100 --> 00:20:25,800
might kind of massage it a little bit more.

383
00:20:26,400 --> 00:20:30,000
So normally, when we do this stuff, right and we have this sort of

384
00:20:30,000 --> 00:20:32,800
variable group, kind of concept and all this sort of stuff happening,

385
00:20:32,800 --> 00:20:33,200
right?

386
00:20:33,600 --> 00:20:37,000
We are creating these Verdi's debug variables, we create them on the

387
00:20:37,000 --> 00:20:38,400
debug Arena and that's all good.

388
00:20:38,400 --> 00:20:41,300
And we can do this exact same stuff we could basically convert all

389
00:20:41,300 --> 00:20:44,700
this stuff over to be stuff that happens at collation time, right?

390
00:20:45,000 --> 00:20:47,500
And that's basically what we want to do because if you think about

391
00:20:47,500 --> 00:20:50,000
this stuff this was just our test code, right?

392
00:20:50,200 --> 00:20:53,400
So this code actually is completely worthless, right?

393
00:20:53,400 --> 00:20:54,300
It doesn't

394
00:20:55,300 --> 00:20:59,200
It's not how we actually want to specify these things.

395
00:20:59,200 --> 00:20:59,800
What we'd rather

396
00:21:00,000 --> 00:21:03,700
You is having specified very dynamically like we just saw, right?

397
00:21:09,700 --> 00:21:12,000
So ideally right.

398
00:21:12,000 --> 00:21:18,600
Ideally we want to basically run this exact same code but we just want

399
00:21:18,600 --> 00:21:19,800
to do it sort of in here.

400
00:21:20,200 --> 00:21:22,000
So we want to be able to add these variables.

401
00:21:22,000 --> 00:21:23,900
We want to be able to do that sort of stuff.

402
00:21:23,900 --> 00:21:24,500
Right?

403
00:21:24,700 --> 00:21:27,800
And so what we would do is we'd have this sort of a thing where we

404
00:21:27,800 --> 00:21:32,000
create debug variable links, we create a bunch of links and then we

405
00:21:32,000 --> 00:21:32,600
end the group.

406
00:21:32,600 --> 00:21:36,400
So we're basically doing the begin variable group and variable groups

407
00:21:36,400 --> 00:21:37,600
stuff, right?

408
00:21:38,800 --> 00:21:42,600
So something like this when we open a data block, right, we would

409
00:21:42,600 --> 00:21:46,300
create a group for it, where we would add, you know, groups and all

410
00:21:46,300 --> 00:21:47,200
that sort of stuff.

411
00:21:47,900 --> 00:21:51,700
And then when we are done with it, we would end the group which, as

412
00:21:51,700 --> 00:21:53,400
you can see, does not actually do anything.

413
00:21:53,400 --> 00:21:56,200
So we're already because we have the open block closed block stuff.

414
00:21:56,200 --> 00:21:59,300
We already handle the sort of stack for granted stuff we were doing

415
00:21:59,300 --> 00:21:59,900
before.

416
00:22:00,800 --> 00:22:04,200
When we want to add a variable, we can come in here and add the

417
00:22:04,200 --> 00:22:07,400
variable just like we would any other variable and just like these

418
00:22:07,400 --> 00:22:08,000
routines you

419
00:22:08,200 --> 00:22:12,100
just call that, whatever that add variable thing was, you would call

420
00:22:12,100 --> 00:22:14,300
that for every different type

421
00:22:16,800 --> 00:22:20,000
now, we should already have the types that we need, hopefully,

422
00:22:21,300 --> 00:22:25,400
If I take a look at handmade debug .h, you can see that.

423
00:22:25,400 --> 00:22:29,400
We've sort of have these types already right here.

424
00:22:29,400 --> 00:22:30,200
They all are.

425
00:22:31,000 --> 00:22:34,300
So all I should really have to do is say, okay, if I want to add, you

426
00:22:34,300 --> 00:22:38,500
know, in our 32 or something like this, I can add an R32.

427
00:22:39,100 --> 00:22:40,100
And then in here,

428
00:22:42,100 --> 00:22:43,800
Let's see where we're at.

429
00:22:45,200 --> 00:22:46,600
Yeah, okay, here we go.

430
00:22:46,900 --> 00:22:49,000
I've got sort of this, this ability to say.

431
00:22:49,000 --> 00:22:53,100
All right, there is my real 32 and I can just put the value in their

432
00:22:53,100 --> 00:22:53,500
right.

433
00:22:53,600 --> 00:22:57,200
And the value comes from the event that I'm working with right now,

434
00:22:57,600 --> 00:22:57,900
right?

435
00:22:57,900 --> 00:23:02,000
I've got this event and the debug event that we're talking about,

436
00:23:02,100 --> 00:23:02,700
right?

437
00:23:02,700 --> 00:23:05,200
It's got this kind of stuff in it, you know I'm saying.

438
00:23:05,700 --> 00:23:09,000
So I could just say, all right, I know that this thing is an R32

439
00:23:09,000 --> 00:23:09,300
event.

440
00:23:09,300 --> 00:23:11,100
I know that are 32 is go into our

441
00:23:11,300 --> 00:23:16,900
32 and so there's my grabbing my R32 out, right?

442
00:23:17,700 --> 00:23:19,600
So all I need to be able to do is do this.

443
00:23:19,600 --> 00:23:20,800
Debug, add variable thing.

444
00:23:20,800 --> 00:23:24,900
I need to be able to do that, in a way, that makes some sense where I

445
00:23:24,900 --> 00:23:25,900
can do it with.

446
00:23:26,000 --> 00:23:29,800
Say, for example, thread first open data block so that I can say,

447
00:23:29,800 --> 00:23:34,500
okay, I want you to add it to the currently open data block instead of

448
00:23:34,500 --> 00:23:36,900
that weird context stuff that we were doing before, the didn't really

449
00:23:36,900 --> 00:23:38,400
have anything to do with anything else.

450
00:23:38,400 --> 00:23:40,600
Right now, I also know the name

451
00:23:41,300 --> 00:23:45,600
In theory because the name comes from whatever the debug record was

452
00:23:45,800 --> 00:23:46,000
right.

453
00:23:46,000 --> 00:23:48,000
Because remember every time we record one of these things, we've got

454
00:23:48,000 --> 00:23:49,300
the debord record index.

455
00:23:49,300 --> 00:23:53,100
The debug record index is already in Theory, been dereference for us.

456
00:23:53,100 --> 00:23:57,100
I think right record index.

457
00:23:57,100 --> 00:23:58,700
Get record from

458
00:24:01,000 --> 00:24:04,100
Yeah, they're not quite but almost right.

459
00:24:06,100 --> 00:24:10,200
So what we would need to do, there is well, I guess now that I think

460
00:24:10,200 --> 00:24:17,000
about it, that's not really true matching block.

461
00:24:17,000 --> 00:24:19,300
Parent is not, that's not what we want.

462
00:24:19,300 --> 00:24:21,500
We want to actually, I want to get the Deep.

463
00:24:21,500 --> 00:24:25,800
How do I get a, how, how do I get the debug record it?

464
00:24:26,200 --> 00:24:27,500
There it is Source.

465
00:24:27,900 --> 00:24:30,100
That's why I'm like, I thought that would have been dereference for

466
00:24:30,100 --> 00:24:30,200
us.

467
00:24:30,200 --> 00:24:31,100
What is going on?

468
00:24:31,300 --> 00:24:33,200
It was I just was looking in the wrong place.

469
00:24:34,400 --> 00:24:39,200
So we've got that Source, the debug record, and in there, we've got

470
00:24:39,200 --> 00:24:40,300
this block named.

471
00:24:40,400 --> 00:24:44,000
The Block name can serve as the thing that the variable gets printed

472
00:24:44,000 --> 00:24:45,800
out under because that's you know what?

473
00:24:45,800 --> 00:24:48,400
We were specifying when we push that stuff on there.

474
00:24:48,800 --> 00:24:50,000
So in here,

475
00:24:51,700 --> 00:24:54,200
When we do our debug, add variable, as long as we can Implement that

476
00:24:54,200 --> 00:24:57,200
somehow, which I'm pretty confident that we can, then we're all good.

477
00:24:57,200 --> 00:25:01,400
And so then all we would need to do is actually have this stuff again

478
00:25:01,400 --> 00:25:05,600
work in exactly the same way where it's going to pull these things out

479
00:25:05,900 --> 00:25:08,100
and then put them back on, right?

480
00:25:08,600 --> 00:25:10,500
So let's go ahead and do it.

481
00:25:10,800 --> 00:25:15,400
Let's just do that stuff.

482
00:25:15,800 --> 00:25:18,800
And there's some more things that we are going to want to do here.

483
00:25:19,900 --> 00:25:21,300
So try not to

484
00:25:21,500 --> 00:25:25,800
Jump Ahead too much because I'm just trying to do this in a slow

485
00:25:25,800 --> 00:25:26,700
methodical fashion.

486
00:25:26,700 --> 00:25:30,100
So you can kind of see how the each transformation takes place is so

487
00:25:30,100 --> 00:25:35,500
it won't be as nasty as this all appears to be at the very end.

488
00:25:35,700 --> 00:25:37,700
It'll clean itself up quite a bit.

489
00:25:37,700 --> 00:25:39,400
I think you'll see anyway.

490
00:25:40,000 --> 00:25:43,200
So just going ahead and filling out these guys.

491
00:25:46,000 --> 00:25:48,000
I don't remember if we support V2s.

492
00:25:48,000 --> 00:25:48,200
We?

493
00:25:48,200 --> 00:25:49,000
Yes, we do.

494
00:25:49,400 --> 00:25:51,400
So we've got, we've got more types here.

495
00:25:51,400 --> 00:25:53,400
We can do V2s.

496
00:25:53,900 --> 00:25:58,800
So, V2 are like v2x?

497
00:26:00,600 --> 00:26:01,600
Probably something like this.

498
00:26:02,200 --> 00:26:05,300
Back are 30, 20, and this is a V2.

499
00:26:06,400 --> 00:26:08,000
So let's go ahead and do that.

500
00:26:09,600 --> 00:26:12,800
And then again, there's the V3 there's the before.

501
00:26:16,200 --> 00:26:17,400
X y, z w.

502
00:26:19,800 --> 00:26:22,700
And there we go.

503
00:26:23,700 --> 00:26:27,300
Yeah, so oops.

504
00:26:31,400 --> 00:26:32,500
So that

505
00:26:34,600 --> 00:26:38,200
Is how we do that and similarly for the rectangle stuff.

506
00:26:38,500 --> 00:26:40,500
I think we have a rectangle to in here.

507
00:26:40,800 --> 00:26:41,800
I don't really remember.

508
00:26:43,400 --> 00:26:45,500
Let's see if that's true.

509
00:26:46,700 --> 00:26:50,100
I don't remember we don't.

510
00:26:50,200 --> 00:26:52,700
So, basically rectangle twos, and threes.

511
00:26:58,400 --> 00:26:59,700
Are not are not.

512
00:27:02,000 --> 00:27:02,600
Sup.

513
00:27:04,300 --> 00:27:06,800
Now we have to actually implement the stuff that actually does the,

514
00:27:06,800 --> 00:27:09,800
you know, the variable adding stuff, right?

515
00:27:15,600 --> 00:27:19,600
And so, what I'd like to do is have some way here of sort of figuring

516
00:27:19,600 --> 00:27:20,100
out.

517
00:27:22,000 --> 00:27:25,100
Where these things are going to live and in order to have some place

518
00:27:25,100 --> 00:27:28,800
for these things to live, I think what we want to do, right, is

519
00:27:28,800 --> 00:27:32,800
respect the fact that debug collation is a frame based thing, you

520
00:27:32,800 --> 00:27:34,700
know, that's how we've been doing it.

521
00:27:34,900 --> 00:27:38,800
So we've got things like a debug frame here in a debug frame has like

522
00:27:38,800 --> 00:27:40,200
regions that are the timing regions.

523
00:27:40,400 --> 00:27:42,800
I would also like it to have one of our groups.

524
00:27:42,800 --> 00:27:44,400
One of our route groups, right?

525
00:27:44,500 --> 00:27:47,300
Because right now we just have one root Group which is like this route

526
00:27:47,300 --> 00:27:49,600
group, for kind of global variables that we sort of were playing

527
00:27:49,600 --> 00:27:51,700
around with and that is right.

528
00:27:51,800 --> 00:27:52,000
Sure.

529
00:27:52,000 --> 00:27:56,000
But what I'd rather do is, I'd rather have an ability to sort of have

530
00:27:56,000 --> 00:27:57,200
that be specified.

531
00:27:58,200 --> 00:27:59,000
Per frame.

532
00:27:59,200 --> 00:28:02,800
So as frames go by, they build up their data inside the frame, and

533
00:28:02,800 --> 00:28:05,300
then, as they go away, they go away, right?

534
00:28:05,500 --> 00:28:07,500
So there's that sort of Route group concept.

535
00:28:07,500 --> 00:28:11,700
When we create a frame, will make one of those route groups and then

536
00:28:11,700 --> 00:28:13,500
we will use it, right?

537
00:28:14,500 --> 00:28:19,200
So what I'd like to do is I'd like to get when we create one of these

538
00:28:19,200 --> 00:28:23,500
debug frames, you know, something like this.

539
00:28:23,600 --> 00:28:27,900
When we grab one of these guys, right, I would like to have

540
00:28:28,000 --> 00:28:31,500
Way of getting that information of sort of initializing that route

541
00:28:31,500 --> 00:28:33,000
group 20.

542
00:28:33,600 --> 00:28:37,500
And yeah so probably frame.

543
00:28:37,500 --> 00:28:38,600
Begin clock.

544
00:28:39,500 --> 00:28:40,800
Equals one clock, here we go.

545
00:28:41,400 --> 00:28:45,100
So you can kind of see here where we've got our debug State collation

546
00:28:45,100 --> 00:28:45,600
frame.

547
00:28:49,100 --> 00:28:52,900
So I want to basically, I want to make sure that when we create one of

548
00:28:52,900 --> 00:28:54,600
these guys so that retires it right?

549
00:28:54,600 --> 00:28:56,700
When we make a new one like we do here.

550
00:28:56,900 --> 00:29:00,100
I want to say that when we create that new one, right?

551
00:29:00,100 --> 00:29:03,900
I want to be able to make the route group be initialized to 0, right?

552
00:29:03,900 --> 00:29:04,900
Or I guess not zero.

553
00:29:04,900 --> 00:29:08,300
What I would rather do is have the route group be created at that

554
00:29:08,300 --> 00:29:08,900
point.

555
00:29:08,900 --> 00:29:12,700
So when it's collating that frame, it will create one of these one of

556
00:29:12,700 --> 00:29:13,400
these guys.

557
00:29:14,100 --> 00:29:18,800
And so in order to do that, I would have to do something

558
00:29:19,100 --> 00:29:19,900
where,

559
00:29:21,100 --> 00:29:24,000
Our, debug variable stuff and I can, I think I can start to safely

560
00:29:24,000 --> 00:29:25,000
kind of move this thing in.

561
00:29:25,100 --> 00:29:27,700
We sort of have this in off in the test code, I think we probably get

562
00:29:27,700 --> 00:29:30,600
rid of this file entirely in a second.

563
00:29:30,600 --> 00:29:32,700
You know, I think we could, we could do that pretty safely.

564
00:29:33,500 --> 00:29:36,500
So, what I want to do is kind of again, move, this sort of stuff over

565
00:29:36,600 --> 00:29:38,600
slowly but have it so that it

566
00:29:41,400 --> 00:29:44,700
You know, have it so that it's now working sort of, in the collation

567
00:29:44,700 --> 00:29:45,200
system.

568
00:29:45,500 --> 00:29:50,600
So, when I do a begin variable group sort of thing, which is what I

569
00:29:50,600 --> 00:29:55,600
would be doing for the route group here, I can just make that code be

570
00:29:55,600 --> 00:29:57,300
something that happens with collation.

571
00:29:58,000 --> 00:29:59,800
So we have this here, begins.

572
00:30:00,000 --> 00:30:04,300
Will Group instead of taking the context, really what I need to know

573
00:30:04,300 --> 00:30:07,600
is just who sort of the parent there is.

574
00:30:07,900 --> 00:30:09,700
So I've got the debug state.

575
00:30:12,600 --> 00:30:17,200
That I could pass directly and that's just like this and then I've

576
00:30:17,200 --> 00:30:20,600
kind of got the the concept of adding the variable to the group.

577
00:30:21,800 --> 00:30:23,200
I'm going to leave that up for now.

578
00:30:24,000 --> 00:30:27,600
This part I don't have to track so really all we're talking about is

579
00:30:27,600 --> 00:30:28,500
something like this.

580
00:30:28,900 --> 00:30:30,400
So add route group.

581
00:30:32,800 --> 00:30:34,000
Is this sort of thing?

582
00:30:35,800 --> 00:30:37,300
That's really what I actually wanted.

583
00:30:37,300 --> 00:30:40,400
I grabbed the wrong guy, so that's what I want.

584
00:30:40,700 --> 00:30:46,000
And that relies on the ability to do a debug add variable right.

585
00:30:48,700 --> 00:30:52,800
So, debug out variable is that again, that's all pretty

586
00:30:52,800 --> 00:30:53,500
straightforward.

587
00:30:53,500 --> 00:30:56,000
The only difference here is instead of using the debugger, we know,

588
00:30:56,000 --> 00:30:59,300
we're going to want to use the collation Arena because that's actually

589
00:30:59,300 --> 00:31:03,200
the thing that we are that we're kind of working with.

590
00:31:04,000 --> 00:31:05,300
So I'm going to actually call that for.

591
00:31:05,300 --> 00:31:08,900
Now I'm going to call that collated variable so I can sort of keep

592
00:31:08,900 --> 00:31:11,400
these guys separate as I because I'm going to probably remove the

593
00:31:11,400 --> 00:31:14,700
other one and I kind of want them to bring up in parallel.

594
00:31:15,600 --> 00:31:18,100
So this is the collation version.

595
00:31:25,300 --> 00:31:29,000
I don't know that we have to push a copy of the string.

596
00:31:31,900 --> 00:31:35,200
But I guess I just will keep doing that since there's no real reason

597
00:31:35,200 --> 00:31:37,900
not to and it might make things a little more robust in the face of

598
00:31:37,900 --> 00:31:42,300
dynamic code reloading which, you know, can cause problems certainly

599
00:31:43,300 --> 00:31:45,400
if we don't keep copies of the string.

600
00:31:45,400 --> 00:31:46,300
So we'll do that.

601
00:31:46,300 --> 00:31:47,300
We'll keep doing that for now.

602
00:31:48,600 --> 00:31:51,400
So, we got begin variable group when we have end rail group and very

603
00:31:51,400 --> 00:31:53,600
group doesn't actually matter here at all.

604
00:31:54,300 --> 00:31:57,400
So, this is more of a collate, create variable group.

605
00:31:58,100 --> 00:31:58,700
Like so,

606
00:32:01,200 --> 00:32:05,300
And really all we need now is just a way to add a variable to a group,

607
00:32:05,300 --> 00:32:06,200
that's about it.

608
00:32:06,600 --> 00:32:10,700
So we just have a thing that's like collate, add variable to group

609
00:32:10,800 --> 00:32:13,700
that would again, just take whatever the group is and the variable to

610
00:32:13,700 --> 00:32:14,000
add.

611
00:32:14,000 --> 00:32:15,400
And you can see it doing a thing right here.

612
00:32:15,400 --> 00:32:17,600
And the only difference is going to come out of the collation Arena

613
00:32:17,900 --> 00:32:21,600
and this is I think mostly all the code that we actually would need.

614
00:32:22,000 --> 00:32:26,700
So in here, when we're going to do the roof route, I do collate, add

615
00:32:27,100 --> 00:32:29,700
or create variable group, right?

616
00:32:30,400 --> 00:32:32,700
Or maybe add variable group, that's probably.

617
00:32:36,100 --> 00:32:36,400
You know what?

618
00:32:36,400 --> 00:32:40,100
This is probably create a variable.

619
00:32:41,700 --> 00:32:42,700
Create variable.

620
00:32:43,800 --> 00:32:44,800
I like that, little bit better.

621
00:32:45,700 --> 00:32:51,000
So when we do collate create variable group, we're going to need some

622
00:32:51,000 --> 00:32:53,700
way of naming this thing for now.

623
00:32:53,700 --> 00:32:56,600
I'll just call it frame but we may want to make an actual thing.

624
00:32:56,600 --> 00:32:59,500
That's like what the name of the frame is or something like that at

625
00:32:59,500 --> 00:32:59,800
some point.

626
00:33:00,600 --> 00:33:02,100
But for now we'll just call it like this.

627
00:33:02,600 --> 00:33:04,600
And then when we actually do this work here,

628
00:33:06,200 --> 00:33:09,100
we're doing the en, Bloc begin block, and that stuff for the data

629
00:33:09,100 --> 00:33:09,600
blocks.

630
00:33:09,900 --> 00:33:13,000
Now, we should be able to have this group stuff.

631
00:33:13,000 --> 00:33:15,100
Sort of start to come in to play.

632
00:33:15,400 --> 00:33:18,600
So when we do open and close data block, we know that we have a

633
00:33:18,600 --> 00:33:21,400
collation frame, which means that we know that we have a route group,

634
00:33:21,900 --> 00:33:22,500
right?

635
00:33:22,600 --> 00:33:25,000
We know that we have a way to kind of add those things in there

636
00:33:25,600 --> 00:33:28,600
because if the frame exists then we created a group for it.

637
00:33:28,900 --> 00:33:32,100
So what we can do here is we can say, all right I know that I want to

638
00:33:32,100 --> 00:33:35,600
add this to the route group, you know, this is this open data block or

639
00:33:35,600 --> 00:33:35,800
whatever.

640
00:33:42,600 --> 00:33:45,700
Although, I guess we want these things to Nest, so really what we want

641
00:33:45,700 --> 00:33:49,300
to do is just have a thing here, where we say, if there is an open

642
00:33:49,300 --> 00:33:52,200
debug block, the open debug block, would have a debug variable thing

643
00:33:52,200 --> 00:33:53,700
on here, potentially, right?

644
00:33:53,700 --> 00:33:56,600
Which is just, what is the group, right?

645
00:33:57,400 --> 00:33:58,400
The things are going into.

646
00:34:00,600 --> 00:34:06,800
And I'll do a thing here with sort of like notes Casey only for data

647
00:34:06,800 --> 00:34:07,400
blocks.

648
00:34:15,800 --> 00:34:20,000
So when we do an open data block, obviously we would, we would always

649
00:34:20,000 --> 00:34:27,500
do Kuwait, add variable, sorry, collate create variable group, we

650
00:34:27,500 --> 00:34:32,100
would always create one of those and presumably cure again.

651
00:34:32,100 --> 00:34:33,600
It's the block name is the source.

652
00:34:33,600 --> 00:34:35,000
So it's whatever we were told.

653
00:34:35,000 --> 00:34:37,699
We are data block, is that we're trying to Output.

654
00:34:37,900 --> 00:34:40,300
We're going to create a variable group for it and we're going to go

655
00:34:40,300 --> 00:34:42,900
ahead and just put that into whenever we create this.

656
00:34:43,100 --> 00:34:43,500
Lock.

657
00:34:43,699 --> 00:34:47,300
That is the new group for this data block, right?

658
00:34:47,600 --> 00:34:51,300
And now we want to see if there was or ready and open data block,

659
00:34:51,300 --> 00:34:51,600
right?

660
00:34:51,600 --> 00:34:54,199
Like if there was one here, then we have a parent.

661
00:34:54,199 --> 00:34:56,199
So, you know, we've got this guy right?

662
00:34:56,199 --> 00:34:57,200
This parent in there.

663
00:34:58,800 --> 00:35:05,400
So we want to say, is if our debug block had a parent, then we would

664
00:35:05,400 --> 00:35:10,500
want to do a collate, add variable to group, right?

665
00:35:12,500 --> 00:35:18,300
And we'd want to be able to add to our debug block parent group.

666
00:35:22,800 --> 00:35:24,500
We want to be able to add ourselves.

667
00:35:25,300 --> 00:35:28,000
So again, just creating a creating that hierarchy as we go

668
00:35:30,300 --> 00:35:33,100
So that's obviously pretty straightforward.

669
00:35:33,100 --> 00:35:35,400
Nothing particularly unusual happening there.

670
00:35:37,400 --> 00:35:40,800
And in fact, I think that's basically all there is to that, right?

671
00:35:40,800 --> 00:35:42,100
I think that's mostly it.

672
00:35:44,900 --> 00:35:47,900
This is actually collate, create variable.

673
00:35:49,400 --> 00:35:53,900
And so in here now, yeah, I guess we actually the open data block.

674
00:35:53,900 --> 00:35:54,900
Stuff is now all good.

675
00:35:54,900 --> 00:35:57,400
So enclose data block, I don't think we really we don't have to do

676
00:35:57,400 --> 00:35:58,000
anything.

677
00:35:58,200 --> 00:35:59,800
Everything kind of would take care of itself there.

678
00:36:00,100 --> 00:36:04,200
However, what we do need to do here is in fact, I guess we could say

679
00:36:04,300 --> 00:36:05,200
something more like this.

680
00:36:05,900 --> 00:36:08,500
We know that we're going to add it to a group, right?

681
00:36:08,600 --> 00:36:10,100
We just don't know which group it is.

682
00:36:10,200 --> 00:36:12,300
So if we have a parent, we would add it there.

683
00:36:12,700 --> 00:36:15,200
But if we don't have a parent, right?

684
00:36:16,100 --> 00:36:19,000
Then we would just add it to whatever the collation frame is.

685
00:36:19,000 --> 00:36:22,100
So the debug State collation frame.

686
00:36:24,200 --> 00:36:27,900
Whatever its route group is, that's the one we would use.

687
00:36:32,100 --> 00:36:33,500
And that's just always going to be true.

688
00:36:34,200 --> 00:36:37,400
So in here, when we do our debug, add variable, this is actually going

689
00:36:37,400 --> 00:36:39,200
to be like something more, like

690
00:36:40,600 --> 00:36:52,000
Kool-Aid, Kool-Aid create and at or create maybe like great grouped

691
00:36:52,100 --> 00:36:53,500
variable or something like that.

692
00:36:54,100 --> 00:36:58,200
And what we want this to do is do all the sort of this work again for

693
00:36:58,200 --> 00:36:58,400
us.

694
00:36:58,400 --> 00:37:01,900
We want it to take this first open block and we want it to

695
00:37:01,900 --> 00:37:05,900
automatically sort of figure out where these things should go.

696
00:37:06,300 --> 00:37:09,000
So I think that's all pretty much.

697
00:37:10,000 --> 00:37:14,400
Really much good for us.

698
00:37:14,800 --> 00:37:15,900
Yeah.

699
00:37:15,900 --> 00:37:16,400
So

700
00:37:18,900 --> 00:37:23,800
So that all looks kind and friendly and pretty much all we really need

701
00:37:23,800 --> 00:37:24,400
to do here.

702
00:37:24,400 --> 00:37:28,300
So I feel like mostly all I need to do is change the name of that

703
00:37:28,300 --> 00:37:32,000
function to something reasonable, and then we can just go implement it

704
00:37:32,000 --> 00:37:33,100
and be good, right?

705
00:37:33,100 --> 00:37:36,400
And everyone's happy and smiling, and everyone is dancing around and

706
00:37:36,400 --> 00:37:41,100
doing things, ridiculous, things, unmentionable things.

707
00:37:41,700 --> 00:37:45,400
And so I'm just going to go ahead and change this guy here.

708
00:37:45,800 --> 00:37:47,500
So that we don't

709
00:37:49,200 --> 00:37:50,000
Have to deal with.

710
00:37:50,000 --> 00:37:51,700
People got variable as a name.

711
00:37:55,000 --> 00:37:59,700
Okay, so let's go ahead and implement this and this should be really

712
00:37:59,700 --> 00:38:01,900
easy to implement on top of what we already have.

713
00:38:02,700 --> 00:38:04,300
Like really, really, really easy.

714
00:38:06,800 --> 00:38:09,900
It's just a question of like, basically swindling the parameters

715
00:38:09,900 --> 00:38:10,500
around.

716
00:38:11,300 --> 00:38:12,700
So we have our open.

717
00:38:15,000 --> 00:38:16,400
Open d block.

718
00:38:19,700 --> 00:38:21,200
We have our data type.

719
00:38:21,200 --> 00:38:23,400
So this is our debug variable.

720
00:38:26,300 --> 00:38:26,900
Type.

721
00:38:29,300 --> 00:38:31,100
And then we have our block name.

722
00:38:32,400 --> 00:38:33,500
Just just a variable name.

723
00:38:34,700 --> 00:38:38,400
So in here, all I'm going to do is first, I'm going to create a

724
00:38:38,400 --> 00:38:38,900
variable

725
00:38:42,100 --> 00:38:45,200
that's very, very straight forward because we have all the parameters

726
00:38:45,200 --> 00:38:45,900
we need.

727
00:38:46,100 --> 00:38:47,200
So we're just calling it.

728
00:38:48,800 --> 00:38:51,400
After we create the variable, we're going to want to add it to the

729
00:38:51,400 --> 00:38:51,900
group.

730
00:38:53,900 --> 00:38:56,600
and we'll do a little if here to make sure if we have a block, then

731
00:38:56,600 --> 00:38:59,800
we're going to add it to the group and we might as well sir the block

732
00:39:00,300 --> 00:39:03,300
How's it going to avoid?

733
00:39:03,300 --> 00:39:04,900
Getting down further into the code and going?

734
00:39:04,900 --> 00:39:06,000
Wait, why isn't there?

735
00:39:06,400 --> 00:39:07,200
What's going on?

736
00:39:09,100 --> 00:39:10,600
Actually, to be honest, you know that I think about it.

737
00:39:10,600 --> 00:39:13,500
You should probably never be calling this, if there isn't one.

738
00:39:14,200 --> 00:39:16,400
So this should probably just assert both of those things.

739
00:39:16,400 --> 00:39:18,400
It's like, you know what, you got to have both of those things, my

740
00:39:18,400 --> 00:39:18,800
friend.

741
00:39:21,100 --> 00:39:22,200
so that

742
00:39:23,500 --> 00:39:28,900
Should be that, I think so that kind of Hoover's up like sniffs up all

743
00:39:28,900 --> 00:39:29,600
that data.

744
00:39:30,400 --> 00:39:36,400
I don't actually remember what the members are here, okay, so it's

745
00:39:36,400 --> 00:39:38,600
Vector 2.

746
00:39:48,200 --> 00:39:51,400
And so now in theory, we are creating those again.

747
00:39:51,400 --> 00:39:53,600
I don't know, you know, we're probably got some bugs in here.

748
00:39:54,200 --> 00:39:57,900
In fact, the fact that we are crashing in here, suggest that we almost

749
00:39:57,900 --> 00:40:01,200
certainly have some bugs in here, that's just a null pointer

750
00:40:01,200 --> 00:40:01,700
dereference.

751
00:40:01,700 --> 00:40:06,700
So somewhere we have made a very erroneous assumption about what is

752
00:40:06,700 --> 00:40:07,800
getting past.

753
00:40:08,200 --> 00:40:09,600
So let's see what's getting past year.

754
00:40:10,400 --> 00:40:15,000
We have our debug block, of course, it can't view it because it's

755
00:40:15,000 --> 00:40:17,000
already thinks that has gotten past that statement.

756
00:40:17,000 --> 00:40:17,500
Of course it

757
00:40:17,600 --> 00:40:20,300
Some even gotten past the statement, but that's the miracle of

758
00:40:20,300 --> 00:40:21,900
Microsoft Visual Studio.

759
00:40:22,100 --> 00:40:25,400
It can't even inspect a variable, that's one line above it, happy

760
00:40:25,400 --> 00:40:26,000
birthday.

761
00:40:26,300 --> 00:40:27,400
So in here,

762
00:40:29,200 --> 00:40:30,500
We can look at these guys.

763
00:40:31,300 --> 00:40:31,800
Let's see.

764
00:40:31,800 --> 00:40:32,700
So the group.

765
00:40:32,900 --> 00:40:35,700
So, what we know is that the group is null.

766
00:40:35,700 --> 00:40:38,100
So this guy right here is actually no.

767
00:40:38,600 --> 00:40:44,700
So the parent either the parent or the Coalition frame Trooper was

768
00:40:44,700 --> 00:40:47,700
null depending on whether this guy has a parent.

769
00:40:47,900 --> 00:40:49,900
So let's see, whether he has a parent.

770
00:40:50,100 --> 00:40:55,900
That's probably the easiest thing to do if I can write, which is

771
00:40:55,900 --> 00:40:58,600
easier said than done potentially, but

772
00:40:58,900 --> 00:40:59,200
C.

773
00:40:59,200 --> 00:41:03,800
So, the debug block thread first open data block, would have gotten

774
00:41:03,800 --> 00:41:05,200
changed to be us.

775
00:41:05,800 --> 00:41:11,200
So, I think I can look at thread first, open data, block to get that

776
00:41:11,200 --> 00:41:12,000
information.

777
00:41:12,400 --> 00:41:14,900
So thread, first open data, block, parent is null.

778
00:41:15,200 --> 00:41:18,600
So we are going to be looking at debug State collation frame.

779
00:41:19,400 --> 00:41:22,600
And yep, the route group is, in fact, null.

780
00:41:22,800 --> 00:41:27,000
So the question would be how are we getting to the point where we have

781
00:41:27,000 --> 00:41:27,900
a route group?

782
00:41:28,300 --> 00:41:28,600
Who is

783
00:41:28,800 --> 00:41:29,200
Null.

784
00:41:29,600 --> 00:41:34,000
That is not cool, it's not cool bro, it's not cool.

785
00:41:34,600 --> 00:41:37,500
And so the question is, how do we get into that situation?

786
00:41:38,000 --> 00:41:40,600
So I'm going to make sure that we actually ever hit that case.

787
00:41:40,700 --> 00:41:41,000
Okay?

788
00:41:41,000 --> 00:41:44,500
So here is US, getting that case when I come into route group here,

789
00:41:45,100 --> 00:41:45,700
what did I do?

790
00:41:45,700 --> 00:41:50,300
I gotta I got one of these guys back, so we keep going here, let me

791
00:41:50,300 --> 00:41:51,100
keep running.

792
00:41:51,900 --> 00:41:53,600
So, somehow in here,

793
00:41:55,300 --> 00:41:58,100
we are getting to the point where even though we saw that that

794
00:42:00,300 --> 00:42:04,100
That collation frame situation where it actually did create a variable

795
00:42:04,100 --> 00:42:04,700
group.

796
00:42:05,100 --> 00:42:07,500
Ah, I'm it Nats type O.

797
00:42:08,300 --> 00:42:09,900
That's a little bit of a typo there.

798
00:42:09,900 --> 00:42:14,000
My friends probably should get rid of that route Group, which is the,

799
00:42:14,300 --> 00:42:16,900
you know, sort of the one that's Global because I don't know that

800
00:42:16,900 --> 00:42:20,000
we'll need it anymore, but, you know, one step at a time.

801
00:42:21,100 --> 00:42:23,600
So, in theory, now again, we're working.

802
00:42:24,200 --> 00:42:26,600
We don't really have anywhere to print print those things out yet, but

803
00:42:26,600 --> 00:42:27,800
everything here is working.

804
00:42:27,800 --> 00:42:28,600
And so, that's a good sign.

805
00:42:28,600 --> 00:42:29,900
And now, so all we should really have

806
00:42:30,000 --> 00:42:34,900
Do if we want to take a look at what's happening is, maybe look at the

807
00:42:34,900 --> 00:42:35,600
frames.

808
00:42:38,900 --> 00:42:40,700
Route group like have a way to display.

809
00:42:42,200 --> 00:42:44,100
The route groups for frames, right?

810
00:42:45,100 --> 00:42:47,500
So when we create that variable set there,

811
00:42:49,300 --> 00:42:50,500
it's going to be a little bit nasty.

812
00:42:50,500 --> 00:42:53,300
In fact, one thing I'm going to do to make lives a little easier on us

813
00:42:53,300 --> 00:42:55,100
for debugging purposes.

814
00:42:55,300 --> 00:42:58,300
Is it going to make it so that our groups when we create them are open

815
00:42:58,300 --> 00:42:59,200
by default?

816
00:42:59,400 --> 00:43:01,300
Which is not what would normally happen.

817
00:43:01,700 --> 00:43:05,600
So when we do create a variable group thing, I'm going to go ahead

818
00:43:05,600 --> 00:43:10,200
there and and sort of make sure that they are expanded if that makes

819
00:43:10,200 --> 00:43:10,600
sense.

820
00:43:10,900 --> 00:43:14,100
So, you know, when I have one of these variable groups at the moment,

821
00:43:14,100 --> 00:43:17,700
we've got this sort of that debug ID concept there, right?

822
00:43:18,100 --> 00:43:19,000
That it's going to be using

823
00:43:19,100 --> 00:43:21,900
To figure out as its walking things.

824
00:43:22,400 --> 00:43:23,500
What it would need to do.

825
00:43:23,900 --> 00:43:24,500
So,

826
00:43:26,600 --> 00:43:27,100
Excuse me.

827
00:43:29,000 --> 00:43:32,000
All this may be the first point that we hit where we have to modify

828
00:43:32,000 --> 00:43:32,500
something.

829
00:43:32,900 --> 00:43:35,300
So if you look,

830
00:43:37,700 --> 00:43:42,900
so you think if you look at the way we're doing this, when we actually

831
00:43:42,900 --> 00:43:48,600
need to to walk one of these guys and we have this sort of this, this

832
00:43:48,600 --> 00:43:50,200
route group scenario, right?

833
00:43:50,900 --> 00:43:56,000
The VAR group thing, when that happens, is just a link chain, right?

834
00:43:56,000 --> 00:44:00,800
So the links are being created when we do the add to group.

835
00:44:01,200 --> 00:44:06,000
So when we do Cole, a create variable group, it hasn't actually gotten

836
00:44:06,200 --> 00:44:07,400
added to anything yet.

837
00:44:08,500 --> 00:44:11,100
And when we do collate add variable to group as the first time that

838
00:44:11,100 --> 00:44:15,400
the link itself would actually have been been set up.

839
00:44:15,700 --> 00:44:19,300
So in order to make our stuff expanded by, oh well, you know what?

840
00:44:19,300 --> 00:44:22,300
I could choose this much more easily, I guess.

841
00:44:22,300 --> 00:44:25,300
Now that I think about it, what I could do is just always have

842
00:44:25,300 --> 00:44:26,200
everything be expanded.

843
00:44:26,200 --> 00:44:30,700
So in the debug draw me menu, what I could do is not bother with the

844
00:44:30,700 --> 00:44:31,700
thing that I was about to do.

845
00:44:32,200 --> 00:44:34,500
And instead just say all right, everything's always expanded all the

846
00:44:34,500 --> 00:44:34,800
time.

847
00:44:34,800 --> 00:44:36,300
So when we come down here and we say,

848
00:44:37,500 --> 00:44:40,800
You know, and expanded always, I could just make it so that that

849
00:44:40,900 --> 00:44:43,000
particular part of the branches, just forget it.

850
00:44:43,000 --> 00:44:45,700
It's like it's always going to be expanded so that we run things, you

851
00:44:45,700 --> 00:44:48,600
can see that, you know, everything's always expanded by default.

852
00:44:48,600 --> 00:44:51,500
That means that now we don't have to worry about that one part of it.

853
00:44:51,500 --> 00:44:53,400
So you can take it out of the equation, which is what I want to do.

854
00:44:53,400 --> 00:44:56,500
Because again, one thing on the time, there's a whole bunch of stuff

855
00:44:56,500 --> 00:44:59,900
in play right now and it's going to kind of collapse down into

856
00:45:00,000 --> 00:45:03,000
Much more streamlined thing over the next couple of days as we sort of

857
00:45:03,000 --> 00:45:03,900
had to completion.

858
00:45:04,300 --> 00:45:08,200
But you really, you know, again, especially if you're not entirely,

859
00:45:08,200 --> 00:45:10,500
sure how everything's going to work, you really want to take it.

860
00:45:10,500 --> 00:45:14,000
That kind of that one step at a time to make sure that you see how

861
00:45:14,000 --> 00:45:16,700
everything is kind of interconnecting and you see how the code is

862
00:45:16,700 --> 00:45:19,500
working, because if you don't, you're just going to end up with a big

863
00:45:19,500 --> 00:45:20,600
old hot mess on your hands.

864
00:45:21,900 --> 00:45:26,200
All right, so what I want to do now is I want to actually see what

865
00:45:26,200 --> 00:45:27,100
we're getting.

866
00:45:27,300 --> 00:45:28,600
I want to see in.

867
00:45:28,600 --> 00:45:32,400
So, instead of doing, for example, the route group, when we do like

868
00:45:32,400 --> 00:45:33,900
drumming menu, right?

869
00:45:34,100 --> 00:45:37,700
Instead of doing that, where we have the trees and all that sort of

870
00:45:37,700 --> 00:45:42,500
stuff, what I'd like to do here is say well, you know what, for these

871
00:45:42,500 --> 00:45:46,400
debug trees, we don't really use the tree pretty much anywhere.

872
00:45:46,400 --> 00:45:47,400
Like if you look

873
00:45:49,600 --> 00:45:54,700
The trees situation is really just something to sort of be used with

874
00:45:54,700 --> 00:45:56,200
with the interactions or whatever, right?

875
00:45:56,200 --> 00:45:59,300
It's like what tree you're in and you can kind of see that the way

876
00:45:59,300 --> 00:46:04,800
that we're doing that invar link interaction, here, that debug tree is

877
00:46:04,800 --> 00:46:09,600
just kind of being used as part of the ID so that each tree gets its

878
00:46:09,600 --> 00:46:11,000
own sort of State for things.

879
00:46:11,200 --> 00:46:11,800
You know, I'm saying?

880
00:46:12,600 --> 00:46:16,500
So it should be pretty free for me to sort of create another one of

881
00:46:16,500 --> 00:46:17,300
these trees.

882
00:46:17,600 --> 00:46:19,200
In fact, I could, I could, I think,

883
00:46:19,400 --> 00:46:20,700
Piggyback ride on top of it.

884
00:46:20,700 --> 00:46:23,800
So when We're looping over these trees way, be one of the ways that

885
00:46:23,800 --> 00:46:24,800
you get the tree.

886
00:46:28,500 --> 00:46:31,200
Is the tree could have some kind of special thing on it that says,

887
00:46:31,300 --> 00:46:35,900
point to this Frame, whatever this frames debug variable is going to

888
00:46:35,900 --> 00:46:36,600
be or whatever.

889
00:46:36,700 --> 00:46:37,200
Right?

890
00:46:37,400 --> 00:46:40,900
So, you know, if I look in here and I see handmade

891
00:46:43,400 --> 00:46:48,700
Debug dot h has the sort of frame set here where those frames frames.

892
00:46:49,200 --> 00:46:50,600
So, here's all the frames.

893
00:46:50,600 --> 00:46:51,100
Right?

894
00:46:51,800 --> 00:46:54,500
What I could do is go through the frame count and and have it.

895
00:46:54,500 --> 00:46:58,500
So that each one of those sort of has a tree that corresponds to it.

896
00:46:58,500 --> 00:47:02,000
It's sort of what I want to do for our you know our printout purposes

897
00:47:02,000 --> 00:47:06,000
that makes sense or actually better yet what I could do is just use

898
00:47:06,000 --> 00:47:06,800
frame 0.

899
00:47:07,000 --> 00:47:11,300
So, you know in here for example, when we do this, this sort of Stack

900
00:47:11,300 --> 00:47:13,100
thing where I've put, you know, push

901
00:47:13,200 --> 00:47:14,300
Of things onto the stack.

902
00:47:14,900 --> 00:47:18,700
What I could do instead there is just say, oh, you know, instead of it

903
00:47:18,700 --> 00:47:22,100
sort of tree Group, whatever I could do something where I say,

904
00:47:22,200 --> 00:47:22,500
alright?

905
00:47:22,500 --> 00:47:23,900
The debug variable.

906
00:47:25,800 --> 00:47:29,100
Group is going to be the tree group here.

907
00:47:33,100 --> 00:47:33,800
and then,

908
00:47:35,600 --> 00:47:37,600
This is just the same code, right?

909
00:47:37,600 --> 00:47:39,300
Nothing nothing.

910
00:47:39,300 --> 00:47:40,100
Weird happens.

911
00:47:44,200 --> 00:47:51,300
but now what I could do is I could say, okay if you know, if debug

912
00:47:51,300 --> 00:47:52,000
state

913
00:47:53,200 --> 00:47:54,900
Ram, count is greater than zero.

914
00:47:55,900 --> 00:47:58,100
Then I'll just again just override it right here.

915
00:47:58,100 --> 00:47:59,800
So, for our testing purposes, I'll just say hey,

916
00:48:00,500 --> 00:48:03,300
The group that we're going to print out is going to be the debug State

917
00:48:03,900 --> 00:48:04,700
frames.

918
00:48:06,600 --> 00:48:09,400
Zero's whatever that frame is.

919
00:48:09,400 --> 00:48:11,000
It's going to be that route group.

920
00:48:11,500 --> 00:48:13,700
So we can just see, you know what?

921
00:48:13,900 --> 00:48:15,500
What is it printing, right?

922
00:48:18,000 --> 00:48:18,500
Okay.

923
00:48:19,600 --> 00:48:20,300
so,

924
00:48:22,900 --> 00:48:28,900
I will point out at the risk of stating the obvious, but that is not

925
00:48:29,600 --> 00:48:30,800
what should have been happening.

926
00:48:31,500 --> 00:48:39,100
As you can see, that keeps adding to the same thing every time and

927
00:48:39,100 --> 00:48:41,500
what should have been happening is each frame.

928
00:48:41,500 --> 00:48:42,600
It should just have its own.

929
00:48:42,600 --> 00:48:45,100
It should not every frame be adding to the same route group.

930
00:48:45,100 --> 00:48:54,500
So something is is quite messed up there and I'm not exactly sure why.

931
00:48:54,500 --> 00:48:59,400
I don't actually remember how we clear.

932
00:48:59,400 --> 00:49:01,000
I thought we cleared the collation.

933
00:49:02,000 --> 00:49:04,700
Every end frames?

934
00:49:04,700 --> 00:49:06,600
Yes, yes.

935
00:49:07,400 --> 00:49:13,800
So we do that right here, so I'm not sure, I'm not sure how you can

936
00:49:13,800 --> 00:49:15,300
keep adding like that.

937
00:49:16,700 --> 00:49:20,100
Although I also don't remember how many frames we keep.

938
00:49:20,500 --> 00:49:23,700
Do you guys remember how many frames you keep at the moment?

939
00:49:24,400 --> 00:49:25,200
I do not.

940
00:49:30,000 --> 00:49:34,700
Max debug event array, count times for so.

941
00:49:34,700 --> 00:49:38,800
Okay, we keep a lot of frames, so we probably just have something

942
00:49:38,800 --> 00:49:44,900
stupid happening with our first open code block situation would be my

943
00:49:44,900 --> 00:49:48,300
guess, but I guess we'll have to find out.

944
00:49:48,400 --> 00:49:48,800
Okay.

945
00:49:49,400 --> 00:49:50,500
So let's take a look.

946
00:49:58,600 --> 00:50:00,200
I guess I should also verify.

947
00:50:02,400 --> 00:50:04,100
That thing is actually closed.

948
00:50:05,400 --> 00:50:11,200
Like meaning that the code ever actually closes it so debug and data

949
00:50:11,200 --> 00:50:16,400
block, for example, I'm just going to verify that and data block

950
00:50:16,500 --> 00:50:18,000
actually ever closes anything.

951
00:50:19,200 --> 00:50:21,300
So we do have the clothes data block event.

952
00:50:21,600 --> 00:50:27,700
It looks like, it should be the same and so that's good.

953
00:50:30,500 --> 00:50:33,900
Events match to do to do.

954
00:50:35,100 --> 00:50:39,300
So I suppose what we could check first is whether we are ever getting

955
00:50:39,300 --> 00:50:40,500
a successful.

956
00:50:42,000 --> 00:50:43,100
Clothes.

957
00:50:43,400 --> 00:50:45,700
So what's interesting here is you can kind of see

958
00:50:48,300 --> 00:50:53,700
when we have begin block and end block in this particular case or ER,

959
00:50:53,700 --> 00:50:54,700
code blocks are

960
00:50:56,800 --> 00:50:59,800
Oh yeah, okay, blocks are doing what you expect.

961
00:51:00,000 --> 00:51:04,100
Data blocks have a sensibly, the same code first open data, block the

962
00:51:04,100 --> 00:51:04,800
checks.

963
00:51:10,500 --> 00:51:12,300
And check to see whether the events match.

964
00:51:12,300 --> 00:51:15,400
Assuming that they do it D, allocates the block, which should also pop

965
00:51:15,400 --> 00:51:17,900
it off the stack, which is good.

966
00:51:18,700 --> 00:51:25,100
So, first open data block right, when I do deallocate open, debug

967
00:51:25,100 --> 00:51:29,300
block that right there, should make sure that the parent stuff chains

968
00:51:29,300 --> 00:51:30,000
properly.

969
00:51:30,900 --> 00:51:33,600
So I'm just going to go ahead and step into the code because I can't

970
00:51:33,600 --> 00:51:34,100
immediately.

971
00:51:34,100 --> 00:51:35,800
See any particular reason.

972
00:51:35,800 --> 00:51:40,200
I believe that that should be doing what it is doing yet.

973
00:51:40,500 --> 00:51:43,500
As we can see, it definitely is doing it.

974
00:51:44,000 --> 00:51:45,800
So let's just find out.

975
00:51:46,000 --> 00:51:47,100
Let's step into here.

976
00:51:49,300 --> 00:51:54,800
So, our events are not matching, so that's, that's not good.

977
00:51:55,300 --> 00:52:00,900
And in fact, I guess what I could say to 2 that is in general.

978
00:52:06,700 --> 00:52:12,000
In general, I don't really think we should ever be seeing that because

979
00:52:12,000 --> 00:52:15,700
our data, like, if we had a data block, that was spanning a frame

980
00:52:15,700 --> 00:52:17,500
boundary, that could happen.

981
00:52:17,700 --> 00:52:20,200
So if we were using the data blocks from other threads that could

982
00:52:20,200 --> 00:52:25,200
happen, we are not using data blocks from other threads right now, so

983
00:52:25,200 --> 00:52:27,600
that's just plain wrong, right?

984
00:52:27,600 --> 00:52:31,700
Like there's no circumstance under which that should be occurring.

985
00:52:32,200 --> 00:52:35,900
And so I want to see why our events aren't matching because

986
00:52:36,000 --> 00:52:37,700
That's just a bad situation.

987
00:52:38,300 --> 00:52:41,300
So, here is our matching block that we're testing.

988
00:52:41,700 --> 00:52:43,800
Here is our opening event.

989
00:52:45,100 --> 00:52:47,100
Here is our event, right?

990
00:52:48,000 --> 00:52:49,300
So here we go.

991
00:52:49,900 --> 00:52:54,200
We have the opening event and this is the closing event.

992
00:52:55,300 --> 00:52:57,500
The debug record index is different, which we would expect.

993
00:52:57,500 --> 00:53:02,000
The translation unit is the same, which is what we would hope the

994
00:53:02,000 --> 00:53:08,500
types do line up the TC, the thread indices are the same.

995
00:53:08,600 --> 00:53:16,600
The core index is the same as so, I guess, I don't remember what would

996
00:53:16,600 --> 00:53:17,400
be happening.

997
00:53:18,100 --> 00:53:18,600
ah,

998
00:53:24,900 --> 00:53:29,500
So, the debug record index is not going to be the same across these

999
00:53:30,200 --> 00:53:31,000
two.

1000
00:53:36,000 --> 00:53:37,900
So, I don't know.

1001
00:53:41,900 --> 00:53:43,400
I don't know what we want to do about that.

1002
00:53:43,400 --> 00:53:48,400
So if you look you can see that in like are timed block or you know

1003
00:53:48,400 --> 00:53:50,600
our end block sort of stuff like this sort of thing.

1004
00:53:51,600 --> 00:53:54,700
We were careful to meticulously recorded that counter.

1005
00:53:54,900 --> 00:53:59,100
And so I suppose what we would want to do here is take the exact same

1006
00:53:59,100 --> 00:53:59,800
approach.

1007
00:54:00,000 --> 00:54:03,800
You can sort of see how we were doing that, since we're trying to have

1008
00:54:03,800 --> 00:54:04,500
those lineup.

1009
00:54:04,500 --> 00:54:11,100
I guess we want to do the same thing in here for the most part that

1010
00:54:11,100 --> 00:54:14,500
seems that seems like how it goes.

1011
00:54:16,600 --> 00:54:17,600
Yeah.

1012
00:54:21,100 --> 00:54:22,500
It's a little nasty.

1013
00:54:23,800 --> 00:54:25,900
It's just a little bit nasty as all.

1014
00:54:31,500 --> 00:54:32,000
So,

1015
00:54:52,000 --> 00:54:53,800
I'm not certain.

1016
00:54:55,500 --> 00:55:00,200
That I really want that to work that way because really all that is is

1017
00:55:00,200 --> 00:55:04,200
a check to make sure that the debug data lines up properly but there

1018
00:55:04,200 --> 00:55:07,700
really isn't any way you could do anything else about it.

1019
00:55:08,800 --> 00:55:15,100
So I feel like at some level, that's probably just a stupid idea.

1020
00:55:15,500 --> 00:55:17,600
Like what's going on there, right?

1021
00:55:21,700 --> 00:55:26,100
I feel like, you know, we have that begin block, end block situation.

1022
00:55:27,300 --> 00:55:29,400
I feel like almost in some sense.

1023
00:55:29,400 --> 00:55:32,600
It's always kind of dumb to have that happen because you pretty much

1024
00:55:32,600 --> 00:55:36,300
always want to end the block, you know, the block opens and closes

1025
00:55:36,300 --> 00:55:39,700
always have to be symmetric that's the way that we're processing them

1026
00:55:39,700 --> 00:55:40,300
here.

1027
00:55:40,500 --> 00:55:44,100
So that's really just a all that is is to debug check to ensure that

1028
00:55:44,100 --> 00:55:46,000
you don't have an era.

1029
00:55:47,200 --> 00:55:49,900
And so I really don't love that.

1030
00:55:52,300 --> 00:55:55,600
I'm going to I'm going to table that for tomorrow and I'm going to say

1031
00:55:55,600 --> 00:56:06,300
that what we will do here to do remove this checking, I want to see

1032
00:56:06,500 --> 00:56:07,700
what's going on there.

1033
00:56:08,900 --> 00:56:12,300
I want to think about that in a little bit more detail.

1034
00:56:14,400 --> 00:56:15,100
Sorry about that.

1035
00:56:16,400 --> 00:56:20,000
All right, so let's see here.

1036
00:56:21,800 --> 00:56:25,600
Looks like we run properly for a little bit and then when we wrap when

1037
00:56:25,600 --> 00:56:31,900
we do our sort of like our our rap over, we bite it, right?

1038
00:56:32,300 --> 00:56:35,300
But you can kind of see that we're actually doing what we wanted to do

1039
00:56:35,300 --> 00:56:36,400
for the most part.

1040
00:56:37,200 --> 00:56:39,800
It looks like I don't know if we're actually getting the right data

1041
00:56:39,800 --> 00:56:41,700
out because I didn't we don't actually know.

1042
00:56:41,700 --> 00:56:44,200
Even what the data is for that thing that we were printing the hot

1043
00:56:44,200 --> 00:56:44,700
entity.

1044
00:56:46,400 --> 00:56:49,800
I don't even know what entity that was and all that sort of stuff that

1045
00:56:50,700 --> 00:56:51,700
we're almost there.

1046
00:56:52,300 --> 00:56:55,600
And so all we have to do now is just kind of solidify, make sure that

1047
00:56:55,600 --> 00:56:56,400
we don't have.

1048
00:56:56,600 --> 00:56:58,200
In fact, let's just take a look quickly.

1049
00:57:01,800 --> 00:57:02,300
Okay.

1050
00:57:03,100 --> 00:57:05,600
So in here we're getting a VAR of null.

1051
00:57:06,100 --> 00:57:10,000
So when we get a debug view for a particular link, we're getting back

1052
00:57:10,000 --> 00:57:15,100
nothing it looks like oh sorry, no, the VAR from this link from

1053
00:57:15,100 --> 00:57:20,400
whatever the Interlink was so that implies that something that got

1054
00:57:20,400 --> 00:57:23,800
erased is still on the group.

1055
00:57:27,900 --> 00:57:29,700
I'm not sure why that would be.

1056
00:57:31,800 --> 00:57:34,800
That seems a little bit odd to me, actually.

1057
00:57:35,300 --> 00:57:39,600
So when we're drawing through these here, we've got a tree, right, how

1058
00:57:39,600 --> 00:57:41,700
many how many frame counts are there?

1059
00:57:42,200 --> 00:57:44,000
We're up to 32 frames.

1060
00:57:44,700 --> 00:57:49,900
So why would we be having a situation on the 30 when there's 32

1061
00:57:49,900 --> 00:57:50,500
frames?

1062
00:57:50,600 --> 00:57:55,200
Why would we having a situation where something in the first frame has

1063
00:57:55,200 --> 00:57:59,300
a variable link that is not valid at that point, right?

1064
00:58:00,200 --> 00:58:01,100
And I'm not sure

1065
00:58:01,600 --> 00:58:10,400
So let's see if I go ahead and check debug State frame 0 and we look

1066
00:58:10,400 --> 00:58:12,900
to see what the route group has in it.

1067
00:58:13,100 --> 00:58:18,100
So the route group is in fact garbage but I'm not really sure why that

1068
00:58:18,100 --> 00:58:24,500
would be how did it end up getting the garbage out since it should

1069
00:58:24,800 --> 00:58:28,400
never in general be swept away except when we sweep away everything

1070
00:58:28,400 --> 00:58:30,300
including the you know, the frame counter whatever.

1071
00:58:30,700 --> 00:58:31,400
Because when we do,

1072
00:58:31,600 --> 00:58:33,100
Restart collation, right?

1073
00:58:33,100 --> 00:58:34,200
Restart collation.

1074
00:58:34,200 --> 00:58:36,200
Should restart everything I'm going to

1075
00:58:39,700 --> 00:58:40,700
Do a little check here.

1076
00:58:45,200 --> 00:58:45,800
All right.

1077
00:58:47,400 --> 00:58:50,500
So we call restart collation once, right?

1078
00:58:50,500 --> 00:58:54,900
We set the frame, count up, we then run, we do not restart collation

1079
00:58:54,900 --> 00:58:58,900
again but we do get a crash there, right?

1080
00:58:59,400 --> 00:59:01,700
So that looks a little nasty.

1081
00:59:04,900 --> 00:59:11,200
That looks nasty that looks like that looks like you know, something

1082
00:59:11,400 --> 00:59:16,500
that one might call you know, a nasty thing looks a little nasty, it

1083
00:59:16,500 --> 00:59:20,700
looks a little bit nasty because our group is like getting corrupted

1084
00:59:20,700 --> 00:59:21,800
basically or something.

1085
00:59:21,800 --> 00:59:25,600
Bad is happening to the group because we know that in general

1086
00:59:28,600 --> 00:59:32,300
We know that in general, the route group itself should never actually

1087
00:59:32,300 --> 00:59:34,500
be kind of stand in that way.

1088
00:59:34,600 --> 00:59:38,500
So, when we restart collation, let's go ahead and do that here.

1089
00:59:38,900 --> 00:59:40,300
We we start collation.

1090
00:59:41,000 --> 00:59:46,000
If we take a look at debug State frame 0, there is the route group

1091
00:59:46,600 --> 00:59:52,400
right there and and that's going to be equal to nothing, right?

1092
00:59:52,400 --> 00:59:56,900
That's going to be equal to 2 and empty group, I suppose.

1093
00:59:58,400 --> 00:59:59,900
Suppose, one thing I should also do.

1094
01:00:00,500 --> 01:00:02,800
Now that I think about it and this is just a separate thing.

1095
01:00:02,800 --> 01:00:06,300
I'm I just wanted to fix while we were here is when we're doing that

1096
01:00:06,300 --> 01:00:08,100
tree thing, that hacked tree thing.

1097
01:00:08,900 --> 01:00:12,300
We really should still be checking because technically we could easily

1098
01:00:12,300 --> 01:00:16,400
have one where this group is, is 0, right?

1099
01:00:16,800 --> 01:00:20,100
So, we pretty much want to do something like more along the lines of

1100
01:00:20,100 --> 01:00:22,500
debug variable Paki group.

1101
01:00:25,400 --> 01:00:26,400
if hacking group,

1102
01:00:27,700 --> 01:00:30,100
Through people's have to do, that's really more.

1103
01:00:30,100 --> 01:00:34,100
What we actually want to do, but that should not affect this

1104
01:00:34,100 --> 01:00:35,700
particular bug, right?

1105
01:00:36,000 --> 01:00:36,900
We still have it.

1106
01:00:37,800 --> 01:00:38,200
So yeah.

1107
01:00:38,200 --> 01:00:38,500
Again.

1108
01:00:38,500 --> 01:00:40,300
So symptom is we run for a little while.

1109
01:00:40,300 --> 01:00:45,200
Then something goes horribly wrong, and our very our group.

1110
01:00:45,200 --> 01:00:46,700
That was previously, fine.

1111
01:00:48,000 --> 01:00:49,800
I'll becomes very much not fine.

1112
01:00:50,600 --> 01:00:54,100
So what I'd like to do in that scenario is.

1113
01:00:54,300 --> 01:00:55,900
Oops, what's going on here?

1114
01:00:56,000 --> 01:00:57,900
I'm still running into be still running.

1115
01:00:58,400 --> 01:01:02,200
So what I'd like to do here is every time we call debug and for

1116
01:01:02,200 --> 01:01:10,800
example I would like to every time we call debug and I want to see how

1117
01:01:10,800 --> 01:01:12,000
many frames we have.

1118
01:01:12,000 --> 01:01:16,700
So, you know, after we do the collation, like let's take a look at the

1119
01:01:16,700 --> 01:01:17,300
collation.

1120
01:01:17,900 --> 01:01:18,500
so,

1121
01:01:25,800 --> 01:01:27,600
When we're doing this I'm going to put a little.

1122
01:01:27,600 --> 01:01:31,700
If at the top here and just say, if debug State, you know, frame count

1123
01:01:32,700 --> 01:01:36,300
equals 31 and Y equals zero, something like that.

1124
01:01:39,000 --> 01:01:41,700
I want to be able to break right on that.

1125
01:01:42,100 --> 01:01:44,000
So inside Kool-Aid, debug records.

1126
01:01:50,300 --> 01:01:50,800
Kuwait.

1127
01:01:50,900 --> 01:01:53,600
Debug records I want to stop there.

1128
01:01:55,700 --> 01:01:56,900
So okay.

1129
01:01:56,900 --> 01:01:58,600
So on frame, 30 one, here we go.

1130
01:01:58,600 --> 01:01:59,500
We have not hit the bug.

1131
01:01:59,500 --> 01:02:03,600
Yet, if we look at debug frame 0, I'm going to take a check out that

1132
01:02:03,600 --> 01:02:04,200
route group.

1133
01:02:04,300 --> 01:02:07,100
You can see that the route group is is actually now.

1134
01:02:07,100 --> 01:02:07,900
Okay, right.

1135
01:02:07,900 --> 01:02:09,700
It's not busted, like it was before.

1136
01:02:10,100 --> 01:02:16,200
I'm going to go one round further to the debug, right?

1137
01:02:16,600 --> 01:02:19,700
And that's when we hit the the bug, right?

1138
01:02:20,200 --> 01:02:23,700
So, I now have a way of stopping just before we hit the bug.

1139
01:02:24,600 --> 01:02:28,500
and so in here is where the bug will actually occur, and I can watch

1140
01:02:28,500 --> 01:02:35,700
the bug occur if I want to, by saying, like, Okay, if I run to this

1141
01:02:35,700 --> 01:02:38,600
state and I take a look at the frames, route group,

1142
01:02:40,500 --> 01:02:41,300
There it is.

1143
01:02:42,400 --> 01:02:46,600
The canary in the mine shaft here right is that this data becomes

1144
01:02:47,500 --> 01:02:49,100
becomes dead right?

1145
01:02:49,100 --> 01:02:53,600
It becomes corrupted as I come through here I will trash it.

1146
01:02:54,000 --> 01:02:58,500
And so I'm just going to go ahead and assume temporarily that it has

1147
01:02:58,500 --> 01:02:59,700
something to do with the new code.

1148
01:02:59,700 --> 01:02:59,800
We

1149
01:03:00,000 --> 01:03:05,000
Did because obviously that code is code that was not running before

1150
01:03:05,100 --> 01:03:07,000
and we were not having a problem before.

1151
01:03:07,400 --> 01:03:10,900
So we're just going to take a look and see what happens in that code

1152
01:03:11,200 --> 01:03:16,200
if any of it destroys our frame and so actually looks like that is

1153
01:03:16,200 --> 01:03:20,800
getting destroyed prior to this if that makes sense.

1154
01:03:21,100 --> 01:03:27,300
So it actually looks like it's getting overwritten sort of before that

1155
01:03:27,500 --> 01:03:29,800
that process even occurs, right?

1156
01:03:30,000 --> 01:03:31,500
It looks like it's getting overridden.

1157
01:03:32,000 --> 01:03:33,800
I guess, perhaps actually in here.

1158
01:03:35,900 --> 01:03:38,200
So, I'm not sure why that actually is.

1159
01:03:39,200 --> 01:03:40,400
Collate frame.

1160
01:03:40,600 --> 01:03:42,200
What is the actual frame count?

1161
01:03:42,200 --> 01:03:43,200
I would like to know.

1162
01:03:43,900 --> 01:03:48,400
Max, debug event, array, thing Ridiculousness, right?

1163
01:03:51,900 --> 01:03:55,400
So, we do this push a RE/MAX, debug event.

1164
01:03:55,500 --> 01:03:58,500
Array, count is eight and that's okay.

1165
01:03:58,600 --> 01:04:03,700
So when the frame count gets to 32, that's actually when we would wrap

1166
01:04:03,700 --> 01:04:05,600
that array, right?

1167
01:04:06,600 --> 01:04:10,300
So that's that's what the bug is, right?

1168
01:04:10,300 --> 01:04:13,000
That we just have to figure out exactly what we're doing there.

1169
01:04:13,100 --> 01:04:16,000
But now we now we at least know what the bug is.

1170
01:04:16,000 --> 01:04:19,100
So how did we actually expect this to work?

1171
01:04:21,100 --> 01:04:23,000
Originally would be the question.

1172
01:04:23,200 --> 01:04:25,500
In fact is this just

1173
01:04:26,500 --> 01:04:28,300
Is this just complete garbage code?

1174
01:04:29,000 --> 01:04:32,900
Is this just a just a totally just ridiculous garbage code.

1175
01:04:32,900 --> 01:04:35,500
I mean, that's not that's to be expected since we're still totally

1176
01:04:35,500 --> 01:04:36,200
experiments things.

1177
01:04:36,200 --> 01:04:40,400
So I'm not blaming myself like saying that it's like terrible code or

1178
01:04:40,400 --> 01:04:40,600
anything.

1179
01:04:40,600 --> 01:04:46,800
I'm because it's supposed to be at this point, but if the frame count

1180
01:04:46,800 --> 01:04:52,100
gets to be 32, you certainly can't dereference it, right?

1181
01:04:52,100 --> 01:04:52,700
You can't.

1182
01:04:52,700 --> 01:04:55,600
If there's only 32 total things in the array, you can't start writing

1183
01:04:55,600 --> 01:04:56,200
to it, right?

1184
01:04:57,200 --> 01:05:02,200
And so, what exactly causes that correlation restart to occur?

1185
01:05:03,700 --> 01:05:05,300
If we look at it, right?

1186
01:05:05,300 --> 01:05:07,600
Like, when does that actually supposed to happen?

1187
01:05:07,900 --> 01:05:09,800
When we call restart collation?

1188
01:05:22,100 --> 01:05:24,000
I mean there was a point right?

1189
01:05:24,400 --> 01:05:25,600
Where we sort of

1190
01:05:35,900 --> 01:05:37,400
there is a point where I

1191
01:05:39,400 --> 01:05:40,600
so, this is just

1192
01:05:43,300 --> 01:05:46,000
This is just not correct, right?

1193
01:05:46,400 --> 01:05:49,800
This like hockey thing that we did temporarily to make it so that we

1194
01:05:49,800 --> 01:05:52,900
don't have to deal with a rolling buffer yet is just wrong because it

1195
01:05:52,900 --> 01:05:55,500
will go one over where it should.

1196
01:05:56,000 --> 01:05:59,200
So that was just totally bogus, we just weren't hitting it before

1197
01:05:59,200 --> 01:05:59,800
because hey, we've got

1198
01:06:00,300 --> 01:06:01,300
A big old memory Arena.

1199
01:06:01,300 --> 01:06:03,800
So we can go ahead and write right on over it.

1200
01:06:03,800 --> 01:06:05,100
But that doesn't really make it.

1201
01:06:05,100 --> 01:06:05,700
Okay.

1202
01:06:07,600 --> 01:06:13,400
So yeah, alright, so now actually, you can kind of see that this is

1203
01:06:13,600 --> 01:06:15,400
working which is kind of cool.

1204
01:06:16,400 --> 01:06:19,700
You can actually see that as we Mouse over things, we actually get the

1205
01:06:19,700 --> 01:06:23,600
data for the hot entity there and there's two entities, right?

1206
01:06:23,600 --> 01:06:25,300
Which is actually kind of awesome.

1207
01:06:25,500 --> 01:06:28,200
That's what should be happening because there's we are actually on top

1208
01:06:28,200 --> 01:06:28,700
of two entities.

1209
01:06:28,700 --> 01:06:29,700
The tree and the

1210
01:06:30,600 --> 01:06:33,200
The like space entity that we have underneath it.

1211
01:06:34,600 --> 01:06:35,500
So, that's pretty great.

1212
01:06:35,900 --> 01:06:37,000
We're getting real close here.

1213
01:06:37,000 --> 01:06:39,300
This is starting to feel pretty good starting to come together.

1214
01:06:39,300 --> 01:06:43,400
We have a lot of consolidation to do, but I'm pretty excited about

1215
01:06:43,400 --> 01:06:43,800
that.

1216
01:06:44,200 --> 01:06:46,800
I don't have a whole lot of time for Q&A today.

1217
01:06:46,800 --> 01:06:49,800
I gotta go relatively soon, but I'll just briefly.

1218
01:06:49,800 --> 01:06:53,400
See if anyone has a very on topic, question that I could answer and

1219
01:06:53,400 --> 01:06:57,100
then tomorrow will kind of be like crushing this down some more and

1220
01:06:57,300 --> 01:06:58,300
and getting a little bit.

1221
01:07:00,700 --> 01:07:01,400
A little bit more.

1222
01:07:01,600 --> 01:07:05,000
Sort of I don't like to use the word clean code or dirty code because

1223
01:07:05,000 --> 01:07:06,400
again I think it has a lot of bad.

1224
01:07:06,400 --> 01:07:09,300
Ramifications of people think about but as you've seen as I can't do

1225
01:07:09,300 --> 01:07:12,200
this, debug code thing, it's kind of willy-nilly in all over the place

1226
01:07:12,500 --> 01:07:13,600
and that's intentional, right?

1227
01:07:13,600 --> 01:07:17,400
It's like I don't want to think about how to make sure that this stuff

1228
01:07:17,400 --> 01:07:18,400
all lines up nicely.

1229
01:07:18,400 --> 01:07:22,400
Until I see the lining up actually start to click and it's starting to

1230
01:07:22,400 --> 01:07:23,200
get to that point now.

1231
01:07:23,200 --> 01:07:27,900
So things have to kind of consolidate down now that I, I see if you

1232
01:07:27,900 --> 01:07:29,800
will, I see the the

1233
01:07:30,300 --> 01:07:32,100
World view that the code is starting to take.

1234
01:07:32,200 --> 01:07:37,300
I like that debug buffer concept where everything is running out to

1235
01:07:37,300 --> 01:07:41,200
the buffer and then there's this collation process and that gathers up

1236
01:07:41,200 --> 01:07:45,000
data and profile together because now, those things can unify.

1237
01:07:45,100 --> 01:07:49,800
And we can have things that show us where we were in our profile, as

1238
01:07:49,800 --> 01:07:52,400
well as where we are in our data and those are together, and I'm

1239
01:07:52,400 --> 01:07:53,800
really liking the way that's coming together.

1240
01:07:54,100 --> 01:07:57,200
And so, as that starts to come together, more and more, that's when we

1241
01:07:57,200 --> 01:08:00,000
start to make the code more rigorous, that might be it.

1242
01:08:00,200 --> 01:08:04,300
Better name for it than clean to start to do some things where we're

1243
01:08:04,300 --> 01:08:07,400
not quite so confused about where everything is and how its lining up.

1244
01:08:29,500 --> 01:08:30,399
Smarter 37.

1245
01:08:30,399 --> 01:08:32,200
We've been on the debug code for quite a while.

1246
01:08:32,200 --> 01:08:34,500
How much longer do you think it will take before we

1247
01:08:35,700 --> 01:08:36,700
We are finished.

1248
01:08:37,800 --> 01:08:41,500
You never know with code if you have a specific deadline.

1249
01:08:42,500 --> 01:08:49,600
Where you're like we need to finish this by a certain time, then you

1250
01:08:49,600 --> 01:08:53,500
can always decide to cut things and you know scope it to a certain

1251
01:08:54,000 --> 01:08:54,700
extent.

1252
01:08:55,100 --> 01:08:58,600
But in terms of when you're just trying to work out a system and

1253
01:08:58,600 --> 01:08:59,800
you've you know, sort of

1254
01:09:00,000 --> 01:09:02,000
Going to spend some time to make this correct.

1255
01:09:02,200 --> 01:09:05,000
Then you never really know how long it will take to make it be proper.

1256
01:09:07,300 --> 01:09:09,700
Yeah and again, I really don't super love.

1257
01:09:09,700 --> 01:09:12,500
The fact that people get impatient when working on code like that.

1258
01:09:14,399 --> 01:09:17,300
You know, if it doesn't make good streaming, then, you know, I

1259
01:09:17,300 --> 01:09:18,800
apologize for that obviously.

1260
01:09:19,200 --> 01:09:24,500
But at the end of the day, this is really what actual serious

1261
01:09:24,500 --> 01:09:26,100
programming looks like, right?

1262
01:09:27,700 --> 01:09:29,600
This is what you actually expected to do.

1263
01:09:30,399 --> 01:09:36,100
And if you can't keep track of this in your head and make this be a

1264
01:09:36,100 --> 01:09:41,700
relatively easy, short tasks meaning, if 20 hours of debug code,

1265
01:09:41,700 --> 01:09:44,100
coding or 20 hours of coding, which is what this

1266
01:09:44,200 --> 01:09:44,899
Probably is.

1267
01:09:46,200 --> 01:09:48,300
Well, it depends whether you count the profiling or not.

1268
01:09:49,700 --> 01:09:53,500
If that's a lot of time to spend on code for you, that's a real bad

1269
01:09:53,500 --> 01:09:54,400
sign, right?

1270
01:09:54,400 --> 01:10:01,500
That should be, this should be, this should be like half a week's work

1271
01:10:01,600 --> 01:10:03,200
of your programming, right?

1272
01:10:03,300 --> 01:10:05,600
It should be something you don't even think about the amount of time

1273
01:10:05,600 --> 01:10:09,500
we spend on the debug code right now, should be a triviality to you.

1274
01:10:10,100 --> 01:10:12,400
And if it feels like a lot more than that,

1275
01:10:13,400 --> 01:10:17,000
if that's just because we only see them in our night, that's fine, but

1276
01:10:17,000 --> 01:10:20,800
if it feels like too much or like it's taking too long, that's I would

1277
01:10:20,800 --> 01:10:26,000
say, you really either you just don't want to be, you know, an engine

1278
01:10:26,000 --> 01:10:27,800
coder and that's fine too, right?

1279
01:10:27,800 --> 01:10:30,700
No, you don't have to be one kind of code or another, but if you're

1280
01:10:30,700 --> 01:10:34,000
serious about engine coding, this should you want to reassess that

1281
01:10:34,000 --> 01:10:34,700
mindset?

1282
01:10:34,700 --> 01:10:37,400
Like this should be a trivial amount of code work to you?

1283
01:10:37,400 --> 01:10:39,800
It should not feel like anything, right?

1284
01:10:41,200 --> 01:10:43,000
So I would say, definitely if

1285
01:10:43,300 --> 01:10:46,100
Is feeling like a thing for you assess whether that's just because

1286
01:10:46,100 --> 01:10:46,900
it's a stream or not.

1287
01:10:46,900 --> 01:10:49,700
But if it's if it's because of the amount of actual coding, that's bad

1288
01:10:49,700 --> 01:10:53,600
sign and you should try to figure out a way to fight that feeling, you

1289
01:10:53,600 --> 01:10:57,400
should try to figure out a way to invest yourself more in, seeing how

1290
01:10:57,400 --> 01:11:01,900
the code comes out and enjoying that process of getting it into good

1291
01:11:01,900 --> 01:11:04,700
shape because that's really crucial to being good.

1292
01:11:04,700 --> 01:11:08,200
Programmer is enjoying that process of refining, it and working it,

1293
01:11:08,600 --> 01:11:11,500
it's sort of like, you know, if someone asks you to model a cup out of

1294
01:11:11,500 --> 01:11:12,900
clay and you just like, stick your

1295
01:11:13,100 --> 01:11:13,900
Finger in it and go here.

1296
01:11:13,900 --> 01:11:16,700
It's a cup and then another person spends like several hours.

1297
01:11:16,700 --> 01:11:18,000
Making this like beautiful cup.

1298
01:11:18,000 --> 01:11:20,700
It's like you want to be the second guy you don't want to be the one

1299
01:11:20,700 --> 01:11:21,100
who's like.

1300
01:11:21,100 --> 01:11:22,500
Well I'm just going to drink out you know.

1301
01:11:22,500 --> 01:11:23,900
I just want to see some water in it.

1302
01:11:23,900 --> 01:11:26,000
I don't care like what it looks like, right?

1303
01:11:26,600 --> 01:11:29,400
So it's really important to like get that mindset right.

1304
01:11:34,400 --> 01:11:35,300
Steven last.

1305
01:11:35,300 --> 01:11:39,400
Do I ever use data breakpoints?

1306
01:11:39,400 --> 01:11:40,100
I find them helpful.

1307
01:11:40,100 --> 01:11:43,000
When some value is changing somewhere, but you're not sure where, yes,

1308
01:11:43,000 --> 01:11:43,500
I do.

1309
01:11:43,900 --> 01:11:46,600
The reason you don't see me use them very often on stream is sort of a

1310
01:11:46,600 --> 01:11:51,800
holdover from the fact that when I was originally learning to program

1311
01:11:52,600 --> 01:11:57,000
pretty much probably for the first 20 years or so, of programming data

1312
01:11:57,000 --> 01:11:59,900
breakpoints were extremely unreliable or didn't?

1313
01:12:01,600 --> 01:12:04,700
Like they either didn't exist in some you're using, or they didn't

1314
01:12:04,700 --> 01:12:09,500
really work reliably, so they were very unreliable way of debugging.

1315
01:12:09,800 --> 01:12:13,700
And so I'm used to debugging without it, if that makes sense and the

1316
01:12:13,700 --> 01:12:16,300
fact that I'm used to debugging it without it means that often times,

1317
01:12:16,300 --> 01:12:19,100
I probably do something by putting code in and running it that way

1318
01:12:19,600 --> 01:12:24,200
there by simulating a data breakpoint like this thing that I did just

1319
01:12:24,200 --> 01:12:26,100
just a moment ago, right?

1320
01:12:27,400 --> 01:12:29,900
This thing right here, you could have done it with the data break

1321
01:12:29,900 --> 01:12:31,900
point, which is presumably why you're asking the question.

1322
01:12:32,200 --> 01:12:35,200
I tend to just type it in because that's like my reflexive habit.

1323
01:12:35,300 --> 01:12:38,200
Now, data breakpoints are much more reliable now than they used to be,

1324
01:12:38,900 --> 01:12:41,300
since I again, don't use them by habit.

1325
01:12:41,300 --> 01:12:43,000
Unfortunately, I can't say it.

1326
01:12:43,000 --> 01:12:44,600
Maybe they still are a little unreliable for all.

1327
01:12:44,600 --> 01:12:45,400
I know, I don't know.

1328
01:12:45,800 --> 01:12:49,600
They might be 100% reliable though, so I wouldn't have to discourage

1329
01:12:49,600 --> 01:12:50,600
anyone for using them.

1330
01:12:51,900 --> 01:12:54,400
Be aware that they have been unreliable in the past and if you start

1331
01:12:54,400 --> 01:12:56,700
to see that they are like, don't, you know, obviously don't

1332
01:12:56,900 --> 01:12:59,000
But assuming that you are finding that they are reliable for you.

1333
01:12:59,000 --> 01:13:01,400
They're totally fine and they do exactly what I just did.

1334
01:13:01,800 --> 01:13:04,500
So there, you know, it's not because I think there's something wrong

1335
01:13:04,500 --> 01:13:05,800
with them, it's really more.

1336
01:13:05,800 --> 01:13:09,800
Just because for most, you know, most of my formative programming,

1337
01:13:10,200 --> 01:13:11,900
they simply didn't work.

1338
01:13:20,200 --> 01:13:22,400
Does the design of this debug system differs significantly from the

1339
01:13:22,400 --> 01:13:24,100
debug systems, you've worked on for other games?

1340
01:13:24,100 --> 01:13:27,000
Yes, this is completely different from any debug system that I've ever

1341
01:13:27,000 --> 01:13:28,400
worked on ever before.

1342
01:13:33,900 --> 01:13:37,500
In fact, it looks nothing like any debug system I've ever written or

1343
01:13:37,500 --> 01:13:38,500
used for that matter.

1344
01:13:38,500 --> 01:13:40,700
Although, there probably are some out there that look like this.

1345
01:13:40,700 --> 01:13:41,800
It just I haven't used them.

1346
01:13:43,300 --> 01:13:45,200
Chronodragon, not super hot topic, feel free to skip.

1347
01:13:45,200 --> 01:13:46,800
How do you treat you'll Handles in your own code?

1348
01:13:46,800 --> 01:13:49,400
Are they handled by the asset system or by something else?

1349
01:13:50,000 --> 01:13:53,000
That depends quite a bit on the circumstance?

1350
01:13:53,400 --> 01:13:54,300
It's a tricky question.

1351
01:13:54,300 --> 01:13:58,000
I think probably if you don't mind saving it for down the road, when

1352
01:13:58,000 --> 01:14:01,300
we do the renderer, it would probably be better to do it at that time

1353
01:14:01,700 --> 01:14:03,000
or you can post on the forums.

1354
01:14:03,000 --> 01:14:05,500
We could, we could do it there, it's a bit involved.

1355
01:14:16,700 --> 01:14:17,700
All right.

1356
01:14:18,800 --> 01:14:20,600
I think I've got all the cues here.

1357
01:14:31,300 --> 01:14:34,700
All right, since I said, I like I said, I have to kind of go, I'm

1358
01:14:34,700 --> 01:14:38,700
gonna call it and we'll be back to sort of condense this stuff down

1359
01:14:38,800 --> 01:14:39,400
tomorrow night.

1360
01:14:39,400 --> 01:14:39,700
Anyway.

1361
01:14:39,700 --> 01:14:43,700
So you could always ask questions, then tomorrow night stream is

1362
01:14:43,700 --> 01:14:49,600
special, like I mentioned before, it will be starting at 7:00, but

1363
01:14:49,600 --> 01:14:53,900
then it will at 7:30, after the Q&A, instead of being off the air, it

1364
01:14:53,900 --> 01:14:57,800
will switch over to a debate with Sean McGrath he wanted a devil's

1365
01:14:57,800 --> 01:14:59,800
advocate for something that he's been.

1366
01:15:00,000 --> 01:15:02,000
About lately, which was free to play games.

1367
01:15:02,600 --> 01:15:07,800
He asked me if I would mock debate him, there is nothing on the line

1368
01:15:07,800 --> 01:15:08,500
for this debate.

1369
01:15:08,500 --> 01:15:13,300
It is not actually me versus him because I have no skin in this game

1370
01:15:13,300 --> 01:15:13,800
whatsoever.

1371
01:15:13,800 --> 01:15:14,600
He does.

1372
01:15:14,600 --> 01:15:17,500
He is working on a game and is thinking of making it feel free to

1373
01:15:17,500 --> 01:15:17,800
play.

1374
01:15:18,000 --> 01:15:20,000
So there is something on the line for him, in some sense, which is

1375
01:15:20,000 --> 01:15:22,700
that this is sort of a Proving Ground for his ideas or a way of sort

1376
01:15:22,700 --> 01:15:24,600
of sounding them out.

1377
01:15:24,600 --> 01:15:26,000
There's nothing on the line for me.

1378
01:15:26,000 --> 01:15:28,200
Other than the fact that I tend to not really like the free-to-play

1379
01:15:28,200 --> 01:15:29,700
model particularly much so I suppose.

1380
01:15:30,100 --> 01:15:37,400
Me arguing against it is sort of a position on principle or something

1381
01:15:37,400 --> 01:15:40,900
like that but like I said, in general, I actually don't have any real

1382
01:15:40,900 --> 01:15:42,400
horse in the race.

1383
01:15:43,000 --> 01:15:49,300
I am simply a sort of acting as the general argue, ER, since I like to

1384
01:15:49,300 --> 01:15:53,400
argue for Sean, so that he can kind of Bounce those ideas off, and

1385
01:15:53,400 --> 01:15:55,900
maybe explore them a little bit himself in ways that maybe he didn't

1386
01:15:55,900 --> 01:15:59,100
think of because he didn't have an adversary there to challenge some

1387
01:15:59,100 --> 01:15:59,800
of the

1388
01:16:00,000 --> 01:16:01,000
Casey was thinking about it.

1389
01:16:03,000 --> 01:16:04,200
I think it'll be pretty interesting.

1390
01:16:04,400 --> 01:16:06,800
I don't know, but that's what we'll be doing tomorrow.

1391
01:16:07,500 --> 01:16:10,400
You should be able to just stay on handmade hero and watch the stream

1392
01:16:10,400 --> 01:16:11,000
at 8:30.

1393
01:16:11,000 --> 01:16:14,900
If all goes, well, technical difficulties aside and I also I assume

1394
01:16:14,900 --> 01:16:16,900
Sean will try to stream it on his Stream.

1395
01:16:16,900 --> 01:16:19,400
So if you tend to watch Sean stream, you hopefully we'll be able to

1396
01:16:19,400 --> 01:16:22,700
watch on, they're either both of them would just hopefully, we'll

1397
01:16:24,200 --> 01:16:27,900
we'll both sort of work and, and you can watch on whichever Channel

1398
01:16:27,900 --> 01:16:28,800
you normally watch on.

1399
01:16:29,700 --> 01:16:32,000
Again that's boring technical difficulties because you never know with

1400
01:16:32,000 --> 01:16:33,600
computer is trying to run Skype and OBS.

1401
01:16:33,600 --> 01:16:37,500
At the same time is probably the microphone fight of the century.

1402
01:16:37,500 --> 01:16:40,100
And and you'll no one will hear anything and they'll be no audio and I

1403
01:16:40,100 --> 01:16:41,500
won't be able to Sean, and he won't hear me.

1404
01:16:41,500 --> 01:16:44,500
And you won't hear him, and you won't hear me, and he won't hear you,

1405
01:16:44,500 --> 01:16:48,500
hearing me and everything else, but if we can get it to work, I think

1406
01:16:48,500 --> 01:16:49,300
it should be pretty interesting.

1407
01:16:49,300 --> 01:16:51,500
So hopefully, you'll stick around tomorrow night for that.

1408
01:16:52,100 --> 01:16:53,000
That's all for.

1409
01:16:53,000 --> 01:16:57,600
Now, as usual, if you want to follow along at home with a me here, you

1410
01:16:57,600 --> 01:16:58,600
can always pre-order the game.

1411
01:16:58,600 --> 01:16:59,300
It comes to the source.

1412
01:16:59,400 --> 01:16:59,900
Code.

1413
01:16:59,900 --> 01:17:02,100
So if your decision that check out handmade here at or can also check

1414
01:17:02,100 --> 01:17:04,900
out the tweetbot which feeds the schedule and calls out special events

1415
01:17:04,900 --> 01:17:06,400
like the one we're doing tomorrow night.

1416
01:17:06,500 --> 01:17:09,600
So you can always keep comprised of that.

1417
01:17:09,600 --> 01:17:10,600
We have a patreon page.

1418
01:17:10,600 --> 01:17:12,600
If you want to survive video series we also have four arms.

1419
01:17:12,600 --> 01:17:15,000
You want to ask questions or view, attitude, episode guide, other,

1420
01:17:15,000 --> 01:17:16,000
good stuff like that.

1421
01:17:16,600 --> 01:17:22,900
That's about it until tomorrow seven again, pacific daylight time

1422
01:17:22,900 --> 01:17:23,500
tomorrow.

1423
01:17:25,100 --> 01:17:28,000
Hope to see you all here for that, until then have fun coding and I'll

1424
01:17:28,000 --> 01:17:28,900
see you guys on the internet.

1425
01:17:28,900 --> 01:17:29,800
Take it easy, everyone.

