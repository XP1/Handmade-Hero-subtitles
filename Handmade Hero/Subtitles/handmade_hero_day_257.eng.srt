1
00:00:02,200 --> 00:00:05,200
Hello everyone and welcome to handmade here on the show.

2
00:00:05,200 --> 00:00:08,500
We code a complete game live on Stream.

3
00:00:10,600 --> 00:00:16,800
So couple things I would like to go work on the profiler today, but I

4
00:00:16,800 --> 00:00:19,100
feel like there's a couple things we should clean up first.

5
00:00:20,400 --> 00:00:22,000
And here is what I'm talking about.

6
00:00:22,300 --> 00:00:26,700
So I realized we don't really ever do this on handmade hero and you

7
00:00:26,700 --> 00:00:29,900
know, it's not like my primary concern or anything, but I do feel like

8
00:00:29,900 --> 00:00:30,500
it's worth doing down.

9
00:00:30,500 --> 00:00:38,100
Again, if anyone, at the moment was going to try to run the current

10
00:00:38,100 --> 00:00:40,500
version of handmade hero, there's a couple things that we've done.

11
00:00:40,500 --> 00:00:44,700
Make it kind of difficult for them to do that if that makes sense.

12
00:00:45,500 --> 00:00:49,700
And specifically what I'm thinking of is the crazy hack that we had.

13
00:00:49,900 --> 00:00:53,400
Do in order to keep OBS correctly streaming our program, even though

14
00:00:53,400 --> 00:00:54,400
it's an opengl.

15
00:00:55,100 --> 00:01:01,800
And so, if you remember how we did this, you know, on when we first

16
00:01:01,800 --> 00:01:04,900
went through this and go ahead and load our prj file.

17
00:01:05,200 --> 00:01:08,800
If you remember how we did this inside the build bat file,

18
00:01:10,500 --> 00:01:14,700
This business right here, what we did is we had a handmaid streaming

19
00:01:14,700 --> 00:01:19,300
equals one thing and the handmade streaming equals one, controls the

20
00:01:19,300 --> 00:01:24,600
code in handmade us UT, which is totally bogus very bad idea code,

21
00:01:24,600 --> 00:01:25,100
right?

22
00:01:25,100 --> 00:01:28,500
It's this thing right here, where we actually set the double buffer to

23
00:01:28,500 --> 00:01:31,300
false, even though we're using the double buffer, which should just be

24
00:01:31,300 --> 00:01:32,300
straight up a legal.

25
00:01:32,600 --> 00:01:33,900
Don't even know why it works.

26
00:01:34,000 --> 00:01:36,600
Well, all we know is for some reason when I did it.

27
00:01:36,600 --> 00:01:40,200
It allows the streaming to work in a nice integrated way that doesn't

28
00:01:40,300 --> 00:01:44,900
Require us doing anything crazy with OBS, so it's good for us on

29
00:01:44,900 --> 00:01:47,900
stream but anyone who tries to build a game, it doesn't know.

30
00:01:47,900 --> 00:01:49,000
They have to turn that off.

31
00:01:49,000 --> 00:01:52,600
Is going to be very sad because they're going to get totally broken.

32
00:01:52,600 --> 00:01:55,000
Open job, put or a crash, or who knows what else?

33
00:01:59,500 --> 00:02:03,300
So what I'm thinking is, could we take some time today to figure out a

34
00:02:03,300 --> 00:02:04,100
way to make it?

35
00:02:05,000 --> 00:02:10,699
So that in general, only on my build, does this default to 1 but on

36
00:02:10,699 --> 00:02:14,300
everyone else's build, it will default to zero if that makes sense.

37
00:02:15,800 --> 00:02:19,700
And so what I was thinking is we could do something where maybe I set

38
00:02:19,700 --> 00:02:24,100
an environment variable and only if that environment variable is set

39
00:02:24,100 --> 00:02:27,500
does handmade streaming end up getting set to anything if that makes

40
00:02:27,500 --> 00:02:27,900
sense.

41
00:02:29,000 --> 00:02:29,100
Now,

42
00:02:29,300 --> 00:02:31,300
Don't actually know what format would take.

43
00:02:31,400 --> 00:02:32,200
Exactly.

44
00:02:32,800 --> 00:02:36,300
But I'm thinking something like this so you know, the simplest

45
00:02:36,300 --> 00:02:41,200
possible version would be that the environment variables, right?

46
00:02:41,200 --> 00:02:43,900
Like, you know, we've got this whole big stream of environment

47
00:02:43,900 --> 00:02:44,700
variables here.

48
00:02:45,000 --> 00:02:48,200
Maybe I could bring in one of the environment girls or see if that

49
00:02:48,200 --> 00:02:52,100
environment variable is set and I don't need that browser.

50
00:02:52,100 --> 00:02:54,900
I don't really do that sort of stuff very often but I'm pretty sure

51
00:02:54,900 --> 00:02:56,200
that's not a huge deal.

52
00:02:56,800 --> 00:02:59,100
So like check if an environment,

53
00:02:59,200 --> 00:02:59,500
Aunt.

54
00:03:00,000 --> 00:03:02,600
Variable is set MS-DOS, right?

55
00:03:02,600 --> 00:03:04,600
Like shouldn't be a big deal.

56
00:03:06,300 --> 00:03:08,100
I'm assuming you're, here we go.

57
00:03:08,900 --> 00:03:09,700
There you go.

58
00:03:09,800 --> 00:03:13,800
Right, so like, well, no that's somebody saying.

59
00:03:13,800 --> 00:03:14,400
Here we go.

60
00:03:15,700 --> 00:03:17,700
Here are some stuff that looks ridiculous.

61
00:03:17,800 --> 00:03:19,100
I don't think that's true.

62
00:03:20,800 --> 00:03:26,200
Why do I even look at stack Overflow, God people seriously.

63
00:03:27,800 --> 00:03:29,800
Anyway, let's see here.

64
00:03:30,100 --> 00:03:30,600
There we go.

65
00:03:30,600 --> 00:03:32,300
That looks more like what I was looking for.

66
00:03:32,600 --> 00:03:36,900
So what we can do is we can say, all right, let's check whatever the

67
00:03:36,900 --> 00:03:41,900
environment variable is and see if it has a non empty value.

68
00:03:41,900 --> 00:03:44,200
Then that means maybe we'll do my thing.

69
00:03:44,200 --> 00:03:46,300
And if it doesn't right, we can say it.

70
00:03:46,300 --> 00:03:49,000
Other people won't have it set and so that'll be fine.

71
00:03:49,200 --> 00:03:52,900
So, if I do this format, I think in this batch file, I should be able

72
00:03:52,900 --> 00:03:55,400
to do something where that would would would happen.

73
00:03:55,700 --> 00:03:56,700
That's my guess.

74
00:03:57,700 --> 00:04:01,200
So, for example, in here, you know, I could just do something where

75
00:04:01,200 --> 00:04:06,700
I'm like, okay, if you know handmade streaming, which is just

76
00:04:06,700 --> 00:04:09,000
something, all only I will set.

77
00:04:09,900 --> 00:04:16,399
If that equals nothing here, then we will do well.

78
00:04:16,399 --> 00:04:19,700
I guess what I would rather do is do a not.

79
00:04:20,000 --> 00:04:24,800
So what I could do to pretty trivial say, you know, then go to, you

80
00:04:24,800 --> 00:04:27,500
know, no streaming or something like that, right, no screaming.

81
00:04:27,600 --> 00:04:27,900
Aiming.

82
00:04:29,700 --> 00:04:32,700
And then I can just put one of those labels here.

83
00:04:33,200 --> 00:04:39,100
So that way if this is not defined it'll jump over the next statement

84
00:04:39,200 --> 00:04:42,700
and then in here, what I can do is say, well, let's take the common

85
00:04:42,700 --> 00:04:48,000
compiler flags and I will add to those flags, right?

86
00:04:48,800 --> 00:04:49,200
Oops.

87
00:04:50,000 --> 00:04:51,000
That's no good.

88
00:04:51,300 --> 00:04:53,200
I will add to those flags.

89
00:04:56,800 --> 00:04:59,000
Some thing like

90
00:04:59,200 --> 00:04:59,600
This.

91
00:05:03,800 --> 00:05:04,200
There we go.

92
00:05:07,100 --> 00:05:10,200
So this way are common compiler, Flags will have handmade streaming

93
00:05:10,200 --> 00:05:15,800
appended to it, but only in that case, where I've actually defined it.

94
00:05:15,900 --> 00:05:17,200
So if I compile

95
00:05:19,600 --> 00:05:20,600
Did I do that wrong?

96
00:05:22,700 --> 00:05:25,000
This is cannot find the batch label specified.

97
00:05:25,000 --> 00:05:25,500
No streaming.

98
00:05:25,500 --> 00:05:26,600
Is it actually this way?

99
00:05:26,800 --> 00:05:29,500
Yeah, that's how you do the sorry, I missed it.

100
00:05:29,500 --> 00:05:30,500
The labels and batch files.

101
00:05:30,500 --> 00:05:35,500
Have a colon 3 getting C has the: of the end, so Leah.

102
00:05:35,700 --> 00:05:39,700
So if I do that, I believe what will happen is, I'll get the handmade

103
00:05:39,700 --> 00:05:44,600
streaming will be not defined and so we'll check right now whether it

104
00:05:44,600 --> 00:05:49,700
is by going into just going into win32 handmade where we're using it,

105
00:05:52,000 --> 00:05:52,600
Right here.

106
00:05:53,000 --> 00:05:55,600
And the handmade streaming case, which is this case.

107
00:05:55,600 --> 00:05:57,300
I'm just going to put some garbage in there.

108
00:05:57,700 --> 00:05:59,900
And so there we can verify that that's not the case.

109
00:06:00,000 --> 00:06:03,000
we're using and that this is the case we're using

110
00:06:04,000 --> 00:06:05,700
Right, which is that's what we wanted.

111
00:06:06,000 --> 00:06:07,500
So, now we know that that's working.

112
00:06:07,500 --> 00:06:11,500
Let's now test the other side of that, so that's what normally people

113
00:06:11,500 --> 00:06:12,700
will get, so that's good.

114
00:06:12,700 --> 00:06:16,000
Now, they don't have to care about that right now, they don't have to

115
00:06:16,000 --> 00:06:20,000
know to do that, if they can just build and it will build normally,

116
00:06:20,200 --> 00:06:20,800
right?

117
00:06:21,300 --> 00:06:26,800
And so if we've got that now we'll try saying, like, Okay, let's close

118
00:06:26,800 --> 00:06:30,500
this down and see if I can set environment variable that will make

119
00:06:30,500 --> 00:06:32,800
that happen, right?

120
00:06:32,800 --> 00:06:33,600
So I can close this.

121
00:06:34,400 --> 00:06:40,000
And I can close this and I can say, all right, inside my computer, and

122
00:06:40,000 --> 00:06:43,300
I'll go to the settings for not, that's not it.

123
00:06:44,500 --> 00:06:45,400
Where is it?

124
00:06:45,400 --> 00:06:47,600
It's in here somewhere.

125
00:06:48,200 --> 00:06:50,000
I never remember where there it is.

126
00:06:51,200 --> 00:06:51,600
Okay.

127
00:06:52,800 --> 00:06:53,400
Or not.

128
00:06:53,400 --> 00:06:54,500
That's permissions.

129
00:06:54,900 --> 00:06:58,700
Where are you, mr.

130
00:06:58,700 --> 00:07:01,300
Environment variables, is it not?

131
00:07:01,400 --> 00:07:02,400
Why isn't it there?

132
00:07:02,400 --> 00:07:08,200
What, what for crying out loud?

133
00:07:08,800 --> 00:07:09,800
They're okay.

134
00:07:09,900 --> 00:07:10,900
To have to do this.

135
00:07:11,900 --> 00:07:16,800
Got like it's this, my computer is because it's a link or something,

136
00:07:16,800 --> 00:07:17,900
you don't get the settings.

137
00:07:17,900 --> 00:07:21,700
This one, you do, of course, then I go to Advanced system settings and

138
00:07:21,700 --> 00:07:22,000
there is

139
00:07:22,600 --> 00:07:23,600
Tables of course, right?

140
00:07:23,600 --> 00:07:26,600
Where you would expect it to be or not.

141
00:07:27,200 --> 00:07:29,100
So anyway, use a variables for me.

142
00:07:29,100 --> 00:07:31,500
I can go in here and say, all right, well, there's a handmade

143
00:07:31,500 --> 00:07:35,300
streaming variable and it's going to be set to 1 so buckle up.

144
00:07:35,600 --> 00:07:38,100
There you go and hit, okay?

145
00:07:38,100 --> 00:07:43,800
And now I believe if I go back here I should be able to see that it

146
00:07:43,800 --> 00:07:44,800
has been set.

147
00:07:45,700 --> 00:07:49,500
And so if I do set I should see him a stream because one there it is.

148
00:07:50,000 --> 00:07:52,300
And now if I go back to what we were doing,

149
00:07:52,500 --> 00:07:53,400
And reload.

150
00:07:55,400 --> 00:07:57,200
Reload our editor in here.

151
00:07:57,700 --> 00:07:59,600
Oops, that's not how you spell, handmade.

152
00:08:00,100 --> 00:08:00,900
There we go.

153
00:08:00,900 --> 00:08:03,800
And build up that and I'll do the project file.

154
00:08:03,900 --> 00:08:04,500
Here we go.

155
00:08:05,500 --> 00:08:09,700
So if I build now in theory, I'm building that other code path because

156
00:08:09,700 --> 00:08:11,600
I've defined the environment variable.

157
00:08:11,900 --> 00:08:13,400
I don't actually know if that's true or not.

158
00:08:13,400 --> 00:08:14,400
So I'm going to do the same trick.

159
00:08:14,400 --> 00:08:17,500
I just did to see if that's actually true.

160
00:08:17,500 --> 00:08:18,900
So here is handmade streaming.

161
00:08:20,200 --> 00:08:22,200
This was the case that now should be shut off.

162
00:08:22,200 --> 00:08:24,500
So we should not get an error and we do

163
00:08:24,700 --> 00:08:25,300
That's great.

164
00:08:25,300 --> 00:08:27,800
And so that means this case should be going correctly.

165
00:08:27,800 --> 00:08:32,100
It is and so I think that's just a cleaner way to handle that, because

166
00:08:32,100 --> 00:08:34,600
really no one should ever build with that on.

167
00:08:35,700 --> 00:08:39,299
It's not something that anyone actually should ever use.

168
00:08:39,299 --> 00:08:42,200
We definitely don't want to ever accidentally ship the game that way

169
00:08:42,600 --> 00:08:43,100
either.

170
00:08:43,100 --> 00:08:45,700
So we would want to be very careful about this and certainly no one

171
00:08:45,700 --> 00:08:48,800
else should ever be doing that.

172
00:08:48,900 --> 00:08:52,400
And so I think that's a reasonable enough solution to the problem.

173
00:08:53,000 --> 00:08:54,500
And so let's double check to make sure.

174
00:08:54,700 --> 00:08:56,000
We can still stream.

175
00:08:56,000 --> 00:08:57,200
So I'm going to launch, Ms.

176
00:08:57,200 --> 00:08:58,000
Dev here.

177
00:09:00,100 --> 00:09:00,800
There we go.

178
00:09:01,100 --> 00:09:05,000
And I'm going to run it and can everyone still see this?

179
00:09:05,000 --> 00:09:07,800
Okay like what do you think?

180
00:09:21,000 --> 00:09:21,500
Anyone.

181
00:09:23,100 --> 00:09:23,800
Anyone.

182
00:09:27,700 --> 00:09:33,200
Yeah, okay, so I just want to make sure that that was seeable and all

183
00:09:33,200 --> 00:09:35,000
that, so that's good.

184
00:09:35,700 --> 00:09:38,300
And that's just one thing that I wanted to quickly.

185
00:09:38,300 --> 00:09:39,600
Make sure was working.

186
00:09:39,600 --> 00:09:40,100
Okay.

187
00:09:40,900 --> 00:09:44,600
The other thing that I suppose that we probably want to do at the

188
00:09:44,600 --> 00:09:48,600
moment, I think in the build-up at is I don't think we're not really

189
00:09:48,600 --> 00:09:53,200
using the preprocessor or anything, this stuff is not actually

190
00:09:53,200 --> 00:09:53,700
happening.

191
00:09:53,900 --> 00:09:57,400
So I'm going to disable this stuff as well because it just adds

192
00:09:57,600 --> 00:10:02,500
Another thing for people to have to worry about and so I'm going to

193
00:10:02,500 --> 00:10:07,100
just leave that from, I'm going to prevent that from Ever Getting

194
00:10:07,100 --> 00:10:07,900
called.

195
00:10:08,300 --> 00:10:13,400
And similarly I'm going to take a look at handmade generated there and

196
00:10:13,400 --> 00:10:16,200
I'm going to just Nerf that guy because we don't use it at all.

197
00:10:19,500 --> 00:10:19,700
Right?

198
00:10:19,700 --> 00:10:23,000
Like, I don't think we actually use any of this at the moment.

199
00:10:23,200 --> 00:10:26,700
So I'm going to see if we can just get rid of that entirely.

200
00:10:29,300 --> 00:10:31,000
And handmade meta dot CPP as well.

201
00:10:42,800 --> 00:10:46,000
Cannot open include file with that's because I deleted it.

202
00:10:46,000 --> 00:10:46,900
Weren't you watching?

203
00:10:46,900 --> 00:10:47,300
Oops.

204
00:10:47,400 --> 00:10:48,800
I just thought that was a mistake.

205
00:10:51,700 --> 00:10:53,300
Why did I closed everything?

206
00:10:53,300 --> 00:10:54,500
I don't know.

207
00:10:54,900 --> 00:10:56,300
It's just me being stupid.

208
00:10:56,400 --> 00:10:56,900
All right.

209
00:10:57,900 --> 00:11:06,200
Handmade meta, get rid of that and I don't even know what this is, but

210
00:11:06,200 --> 00:11:07,200
I don't care.

211
00:11:07,800 --> 00:11:08,200
Okay.

212
00:11:09,500 --> 00:11:10,000
All right.

213
00:11:11,300 --> 00:11:14,900
All right, so what is this code?

214
00:11:16,100 --> 00:11:17,700
Debug dump struct.

215
00:11:17,700 --> 00:11:19,300
Do we even call this anymore?

216
00:11:22,500 --> 00:11:26,000
Nope, that's what is get rid of all of that, goodbye.

217
00:11:31,500 --> 00:11:39,100
Okay, so I think we're good and yeah so that's at least cleaner so now

218
00:11:39,100 --> 00:11:41,400
they don't have to worry about that either because I think that has

219
00:11:41,400 --> 00:11:44,900
some stuff in it, that was a little bit tricky for them to do or

220
00:11:44,900 --> 00:11:45,300
whatever.

221
00:11:45,600 --> 00:11:48,900
There was also in the opengl side of things.

222
00:11:49,300 --> 00:11:56,200
My understanding was that casting this bit of casting here is

223
00:11:56,200 --> 00:11:59,800
problematic for Jeep for like jeez.

224
00:12:00,000 --> 00:12:02,500
C or somebody was having trouble with this.

225
00:12:03,100 --> 00:12:05,000
So we might as well get rid of this one because this one's pretty

226
00:12:05,000 --> 00:12:05,600
easy.

227
00:12:05,700 --> 00:12:07,900
This is basically just a like pointer

228
00:12:10,700 --> 00:12:12,900
Well actually you know is it a void star?

229
00:12:12,900 --> 00:12:16,600
I don't actually remember what we even Define that to be the texture

230
00:12:16,600 --> 00:12:17,100
handle.

231
00:12:19,500 --> 00:12:20,600
I guess what's that in?

232
00:12:20,700 --> 00:12:23,800
I don't even remember what that's in here.

233
00:12:30,600 --> 00:12:31,600
Not really remember.

234
00:12:39,500 --> 00:12:42,500
One of the things I really want to write for for it is a grep for all

235
00:12:42,500 --> 00:12:46,700
the files like basically find all the file look through all the files

236
00:12:46,700 --> 00:12:50,300
that I have loaded because right now I have like everything loaded for

237
00:12:50,300 --> 00:12:53,100
the whole project and so be really trivial for me to do a find

238
00:12:53,100 --> 00:12:56,300
everywhere but I just haven't written it yet and be so simple.

239
00:12:56,300 --> 00:12:59,100
I'm really excited about it because it would be like instant you just

240
00:12:59,100 --> 00:13:03,200
do it and it would find that for you, but I never remember to do it.

241
00:13:03,200 --> 00:13:03,700
I got it.

242
00:13:03,700 --> 00:13:04,700
I've been so busy lately.

243
00:13:04,700 --> 00:13:07,200
I haven't had a chance to really do anything with it.

244
00:13:07,400 --> 00:13:09,100
So many .h, we still got a medal.

245
00:13:09,300 --> 00:13:10,000
H.

246
00:13:11,700 --> 00:13:12,300
Oh no, we don't.

247
00:13:12,300 --> 00:13:12,600
That's math.

248
00:13:12,600 --> 00:13:15,000
That age metadata H.

249
00:13:15,000 --> 00:13:19,200
There It Is So Meta, .h, we don't really need either, these are all

250
00:13:19,200 --> 00:13:20,200
things we can get rid of.

251
00:13:20,200 --> 00:13:25,800
So, I'm gonna get rid of that as well, well, and made metadata H.

252
00:13:26,100 --> 00:13:26,500
Yeah.

253
00:13:31,100 --> 00:13:36,300
All right, but I still now need to take a look at that, the bitmap

254
00:13:36,300 --> 00:13:38,100
stuff so, oops.

255
00:13:38,800 --> 00:13:41,100
So in here, I have to do

256
00:13:42,800 --> 00:13:43,800
Where's that going to be?

257
00:13:45,000 --> 00:13:52,000
It's not in file formats it's in in not an asset.

258
00:13:59,100 --> 00:14:00,000
I don't know where it is.

259
00:14:00,000 --> 00:14:01,400
I don't know where that went.

260
00:14:02,500 --> 00:14:03,400
Oh, you know what?

261
00:14:03,500 --> 00:14:07,600
It's in render, its in render group dot h, isn't it?

262
00:14:10,400 --> 00:14:11,000
It's right here.

263
00:14:13,700 --> 00:14:16,100
So since that's a void, start extra handle.

264
00:14:16,100 --> 00:14:19,500
That's basically, you know, a thing where you can stick a pointer in

265
00:14:19,500 --> 00:14:19,900
there.

266
00:14:19,900 --> 00:14:24,200
And the problem with that is, GCC is like super overzealous about

267
00:14:24,200 --> 00:14:27,700
checking whether you cast from a pointer to other things.

268
00:14:28,100 --> 00:14:29,700
I have no idea why.

269
00:14:29,900 --> 00:14:36,400
Because it's not like there isn't a cast their like, it's not like I

270
00:14:36,400 --> 00:14:40,400
just did an equals, I told it to cast, but it's like, that's not good

271
00:14:40,400 --> 00:14:41,100
enough for me.

272
00:14:41,300 --> 00:14:43,000
I don't actually want you to cast.

273
00:14:43,400 --> 00:14:49,000
So it's like all right so I can do like a you 32 from pointer kind of

274
00:14:49,000 --> 00:14:49,300
a thing.

275
00:14:49,300 --> 00:14:50,200
I guess.

276
00:14:50,800 --> 00:14:51,300
I don't.

277
00:14:51,300 --> 00:14:53,200
I feel like we had one of these.

278
00:14:53,500 --> 00:14:56,500
I don't really remember what we called it but I feel like we have to

279
00:14:56,500 --> 00:14:56,800
do it.

280
00:14:56,800 --> 00:14:58,700
So here you go pointer.

281
00:14:58,700 --> 00:14:59,800
So it's corner too.

282
00:15:01,300 --> 00:15:03,300
I might change that to be.

283
00:15:04,800 --> 00:15:06,700
You 32 from pointer.

284
00:15:06,900 --> 00:15:08,200
So I think I like that better.

285
00:15:09,500 --> 00:15:10,200
Let's see here.

286
00:15:10,800 --> 00:15:14,000
You're to from pointer keep going.

287
00:15:15,800 --> 00:15:17,600
You 32 pointer.

288
00:15:17,900 --> 00:15:27,000
So yeah, one more time for the world youth into from pointer.

289
00:15:28,200 --> 00:15:29,100
Yep.

290
00:15:29,400 --> 00:15:33,500
And the other thing that Loops that's didn't mean to do that.

291
00:15:34,100 --> 00:15:38,200
And the other thing that I might want to do is do the reverse, right?

292
00:15:38,300 --> 00:15:42,800
Because inside assets of sleepy, I'm assuming that it will also

293
00:15:42,800 --> 00:15:45,600
complain about the this one.

294
00:15:46,000 --> 00:15:51,400
So we probably also want to do pointer from you, 32, or actually, to

295
00:15:51,400 --> 00:15:51,900
be honest.

296
00:15:51,900 --> 00:15:53,300
I don't know what is allocate texture.

297
00:15:53,300 --> 00:15:54,100
Actually return.

298
00:15:57,400 --> 00:15:58,200
I don't actually know.

299
00:15:59,900 --> 00:16:01,500
So it returns a void star.

300
00:16:01,600 --> 00:16:04,500
So actually, the only person I guess that would end up getting

301
00:16:04,500 --> 00:16:05,200
complain about.

302
00:16:05,200 --> 00:16:10,600
It was, was in here where we do winter jacket extra this, by the way,

303
00:16:10,600 --> 00:16:12,100
should not really be called button through axis.

304
00:16:12,100 --> 00:16:12,600
You should be.

305
00:16:12,600 --> 00:16:14,800
This should just be a allocate and deallocate texture.

306
00:16:14,800 --> 00:16:18,100
Now, I think about it because we move them out of the win32 section.

307
00:16:18,200 --> 00:16:20,400
I think someone was like, hey, they're not platform so that you can

308
00:16:20,400 --> 00:16:21,900
move them out and that's true.

309
00:16:22,200 --> 00:16:26,600
So this year we want to do the cast as well.

310
00:16:26,900 --> 00:16:29,300
We want to do pointer.

311
00:16:30,200 --> 00:16:32,100
From you pretty to for this one.

312
00:16:32,500 --> 00:16:34,500
So that it goes the other direction as well.

313
00:16:35,200 --> 00:16:37,800
And probably inside here, we need to do the same thing.

314
00:16:37,800 --> 00:16:43,000
So we need to you through to from pointer like so, and so, yeah.

315
00:16:43,000 --> 00:16:44,600
That's just again, just to clean up.

316
00:16:44,600 --> 00:16:48,500
Just furious compiler warnings for people to make it a little easier

317
00:16:48,500 --> 00:16:50,000
on them if they don't really know what's going on.

318
00:16:50,800 --> 00:16:58,300
And let's see if I go to platform here, we've got that those casts.

319
00:16:58,800 --> 00:16:59,500
So these

320
00:16:59,700 --> 00:17:00,200
R.

321
00:17:03,600 --> 00:17:07,300
To find pointer from you 32.

322
00:17:08,900 --> 00:17:10,400
And you know what I could do to?

323
00:17:10,400 --> 00:17:13,000
I don't know if this is particularly, you know what, this does seem

324
00:17:13,000 --> 00:17:13,700
kind of nice.

325
00:17:13,900 --> 00:17:16,700
If any point if I said, what type you want the player to be.

326
00:17:17,000 --> 00:17:20,400
And then I said, value here, then what I could do is say like, oh,

327
00:17:20,400 --> 00:17:23,800
it's going to be a type star and then in here will do the cast.

328
00:17:23,800 --> 00:17:28,900
So to do the cast we would say whatever the value is we're going to

329
00:17:28,900 --> 00:17:32,900
elevate the value to a memory index size first, which I think is what

330
00:17:32,900 --> 00:17:33,800
we need to do.

331
00:17:34,300 --> 00:17:37,800
I don't really remember what it wants us to do and then it could cast

332
00:17:37,800 --> 00:17:38,300
it to a

333
00:17:38,400 --> 00:17:38,800
star.

334
00:17:38,800 --> 00:17:41,700
I think that's what GCC wants to see.

335
00:17:41,700 --> 00:17:46,200
I don't actually know or I should say clang GCC and clang kind of

336
00:17:46,200 --> 00:17:48,400
mirror each other I think intentionally.

337
00:17:49,800 --> 00:17:52,600
So yeah, so I can just do that and say I want to void out of that

338
00:17:52,600 --> 00:17:56,200
thing and then I can go in here and fix these guys up.

339
00:17:57,500 --> 00:17:58,000
Right.

340
00:17:59,200 --> 00:17:59,600
so,

341
00:18:00,900 --> 00:18:07,700
So that's that and that goes a heads and runs and looks fine for what

342
00:18:07,700 --> 00:18:08,400
we're doing.

343
00:18:08,900 --> 00:18:11,800
We seems like it so that's all good.

344
00:18:12,300 --> 00:18:17,000
And yeah, so that gets rid of some of those things I suppose

345
00:18:17,000 --> 00:18:20,900
technically I should probably look at the GitHub to see what some of

346
00:18:20,900 --> 00:18:21,600
the other ones were.

347
00:18:21,600 --> 00:18:24,300
But I feel like I wanted to just get those out of the way because

348
00:18:24,300 --> 00:18:28,300
those were easy ones that have been kind of sitting around that we can

349
00:18:28,300 --> 00:18:30,200
sort of get rid of if that makes sense.

350
00:18:31,200 --> 00:18:35,000
So yeah, what time is it?

351
00:18:35,300 --> 00:18:37,200
How long did that take 540?

352
00:18:38,100 --> 00:18:42,700
And we've got that's 20 minutes, plus the 20 minutes on the clock.

353
00:18:42,700 --> 00:18:44,800
So we've got 40 minutes left.

354
00:18:45,200 --> 00:18:47,000
What do I want to do with that 40 minutes?

355
00:18:48,000 --> 00:18:51,500
I think I want to go do more profiling but I'm trying to think if

356
00:18:51,500 --> 00:18:56,100
there's other stuff that I want to do in here, that makes some sense.

357
00:18:58,100 --> 00:19:00,500
So there's there's fader uninitialized.

358
00:19:00,900 --> 00:19:04,100
The fader uninitialized, variable, some of the thing that Martin's

359
00:19:04,300 --> 00:19:06,300
pointed out that I would like to fix as well.

360
00:19:06,500 --> 00:19:08,800
And then people were also trying to talk about

361
00:19:10,300 --> 00:19:13,100
How to keep the fader working, now, that we're using opengl.

362
00:19:13,300 --> 00:19:17,400
And here's the thing about fading in and out is I don't really want to

363
00:19:17,400 --> 00:19:18,400
support that.

364
00:19:19,500 --> 00:19:22,500
I think I added it specifically because midlow wanted to know how to

365
00:19:22,500 --> 00:19:27,800
do it, but I feel like it's just a really bad idea in general because

366
00:19:27,800 --> 00:19:30,900
you're basically taking something that's often very nasty, which is

367
00:19:30,900 --> 00:19:34,300
initializing the 3D card and now you're adding something else that can

368
00:19:34,300 --> 00:19:35,600
go wrong on top of it.

369
00:19:36,600 --> 00:19:39,900
So ideally I would say, just the fader should just

370
00:19:40,200 --> 00:19:41,500
Removed, right?

371
00:19:41,500 --> 00:19:43,200
I mean, I showed how to add it, you know.

372
00:19:43,300 --> 00:19:45,800
Now if you want to do that in your name, you've got it, you've got the

373
00:19:45,800 --> 00:19:51,000
code, but I feel like you probably are going to be on her own for that

374
00:19:51,000 --> 00:19:51,200
one.

375
00:19:51,200 --> 00:19:55,000
So I really don't particularly want to continue supporting that.

376
00:19:55,000 --> 00:19:57,800
I feel like what we should really do is just get rid of the fader

377
00:19:58,000 --> 00:19:58,900
fader is gone.

378
00:20:00,000 --> 00:20:05,200
And, you know, if you want the fader, you go look at sort of the code

379
00:20:05,500 --> 00:20:08,000
for the fader, and you can implement it yourself, if that makes sense.

380
00:20:08,400 --> 00:20:09,900
Because I don't really want have to ship it.

381
00:20:10,100 --> 00:20:11,100
Game with that fader in it.

382
00:20:11,300 --> 00:20:14,100
I don't think that's a good idea and if we're saying that my hair is

383
00:20:14,100 --> 00:20:16,900
going to have it, then that means at some point we're going to like

384
00:20:17,100 --> 00:20:21,100
put it on Steam and it's going to have the stupid fader code, right?

385
00:20:21,900 --> 00:20:25,100
And that's going to be like something that I've got to support now

386
00:20:25,100 --> 00:20:26,400
with overlay windows.

387
00:20:26,400 --> 00:20:29,700
And whether that screws up the graphics drivers ability to initialise

388
00:20:29,700 --> 00:20:30,400
like blah blah blah.

389
00:20:33,000 --> 00:20:36,000
So I think that probably wants to get get iced.

390
00:20:36,700 --> 00:20:38,900
So I'm going to go ahead and get that out of here.

391
00:20:39,100 --> 00:20:41,900
That's going to go away if that makes sense.

392
00:20:42,300 --> 00:20:47,500
And we're just going to take a look at what that used to be doing in

393
00:20:47,500 --> 00:20:48,100
here.

394
00:20:48,500 --> 00:20:52,100
So I'm going to delete that out of here as well.

395
00:20:52,900 --> 00:20:57,600
And the begin faded desktop, if quit requested, I'm just going to set

396
00:20:57,600 --> 00:20:59,800
Global running at this point to fall.

397
00:21:00,400 --> 00:21:03,000
And I'm going to delete this stuff here.

398
00:21:04,600 --> 00:21:07,300
I don't know what handle debug cycle counters was doing there?

399
00:21:07,300 --> 00:21:08,300
I don't know why it was there.

400
00:21:08,300 --> 00:21:11,600
I'm assuming it can be removed, and so now I think we should just

401
00:21:11,600 --> 00:21:14,200
start up hopefully or not.

402
00:21:16,800 --> 00:21:20,200
Oh cuz I still have the thing for like, setting the, the window to be

403
00:21:20,200 --> 00:21:20,900
visible.

404
00:21:21,900 --> 00:21:24,100
Where is that stuff happening here?

405
00:21:24,300 --> 00:21:26,700
Let's see, let's see.

406
00:21:34,700 --> 00:21:36,600
Yes, we still have all this nonsense.

407
00:21:36,900 --> 00:21:40,400
So what we actually want to do is do the show window.

408
00:21:40,500 --> 00:21:42,800
We need to get the show window code working.

409
00:21:44,200 --> 00:21:47,400
So we need to do this, basically, if that makes sense.

410
00:21:47,400 --> 00:21:50,500
And I pretty much don't need any of this stuff.

411
00:21:50,500 --> 00:21:53,400
I don't think all of this stuff doesn't need to be here.

412
00:21:53,400 --> 00:21:55,200
So so this can all go away.

413
00:21:55,200 --> 00:21:55,800
Goodbye.

414
00:22:06,200 --> 00:22:07,900
And let's see.

415
00:22:07,900 --> 00:22:12,500
So inside here where we're actually doing this, we would now just go

416
00:22:12,500 --> 00:22:15,100
ahead and show this window after we're done.

417
00:22:15,100 --> 00:22:19,300
So when this stuff all sort of happens and we get everything up to the

418
00:22:19,300 --> 00:22:25,200
point where it's ready to go, right before we start the game, we would

419
00:22:25,200 --> 00:22:29,400
do a show window so you know, that's what she's not there.

420
00:22:32,200 --> 00:22:35,000
So something like here.

421
00:22:42,600 --> 00:22:43,200
All right.

422
00:22:49,000 --> 00:22:49,500
There we go.

423
00:22:50,700 --> 00:22:52,600
So that's correct now.

424
00:22:52,600 --> 00:22:56,300
And if we exit we can exit instantly so that's good.

425
00:22:57,600 --> 00:22:58,100
Yeah.

426
00:22:58,100 --> 00:23:02,900
And so that's like, you know that's that's it's in there and if you

427
00:23:02,900 --> 00:23:06,500
want to try and ship a game with the fader go nuts, I don't want

428
00:23:06,500 --> 00:23:09,600
anything to do with that because I have no idea what that's going to

429
00:23:09,600 --> 00:23:09,800
do.

430
00:23:09,800 --> 00:23:13,900
Two graphs drivers on a whole variety of machines, trying to have like

431
00:23:13,900 --> 00:23:16,200
the fade out over the desktop and then create the over to.

432
00:23:16,200 --> 00:23:17,400
Like I don't want to know.

433
00:23:18,800 --> 00:23:19,400
Not an effect.

434
00:23:19,400 --> 00:23:20,300
I care about it all.

435
00:23:20,300 --> 00:23:25,000
So I'm just not interested in making ourselves have potentially a

436
00:23:25,000 --> 00:23:29,600
worst time of of things, but you are welcome to it.

437
00:23:29,600 --> 00:23:30,400
If that makes sense.

438
00:23:31,600 --> 00:23:35,000
The other thing that I am wondering about here is also

439
00:23:37,300 --> 00:23:41,600
that we could do is we could undo the multi-threaded opengl part of

440
00:23:41,600 --> 00:23:42,200
things.

441
00:23:43,300 --> 00:23:45,500
I don't know to what extent we want to do that.

442
00:23:45,500 --> 00:23:52,300
But from what I can tell and asking around on like the having the

443
00:23:52,300 --> 00:23:55,100
multiple opengl context, really doesn't get you anything if you're not

444
00:23:55,100 --> 00:23:56,900
on one of their special high-end cards.

445
00:23:57,200 --> 00:23:58,300
So like

446
00:24:00,700 --> 00:24:03,900
The like, if you're on an Nvidia Quadro or something like this, you

447
00:24:03,900 --> 00:24:07,600
get access to these actual copy engines, but apparently that's not

448
00:24:07,600 --> 00:24:10,500
actually true on the lower end consumer grade cards.

449
00:24:10,800 --> 00:24:13,800
So really that extra complexity isn't getting us anything.

450
00:24:14,400 --> 00:24:18,200
So what that means, I guess, somewhat

451
00:24:19,200 --> 00:24:24,800
Oddly, is that we don't actually need those contexts for anything.

452
00:24:25,200 --> 00:24:30,100
And what we would want to do is we would want to specify those

453
00:24:30,100 --> 00:24:30,900
textures.

454
00:24:32,900 --> 00:24:38,400
We'd want to basically have a way of specifying those textures upfront

455
00:24:38,400 --> 00:24:39,900
and putting them like using.

456
00:24:39,900 --> 00:24:43,300
For example, we mentioned the pixel buffer objects we could use

457
00:24:43,300 --> 00:24:46,600
something like pixel buffer objects to prep the textures ahead of time

458
00:24:46,900 --> 00:24:51,000
and then we don't actually ever try to submit them in any other way.

459
00:24:51,000 --> 00:24:51,800
We just do it GL.

460
00:24:51,800 --> 00:24:53,200
Tech sub image at the time.

461
00:24:53,700 --> 00:24:56,100
I mean, Jill text image and then, that's and that's it.

462
00:24:56,100 --> 00:24:58,400
And we don't ever really try to do anything else.

463
00:24:59,300 --> 00:25:01,600
So, you know, we could do that as well.

464
00:25:01,600 --> 00:25:02,500
I'm not sure.

465
00:25:03,400 --> 00:25:07,400
Whether we want to do that today, I guess we've got maybe have enough

466
00:25:07,400 --> 00:25:11,000
time to do it but I'm not sure if we want to do it or not we could can

467
00:25:11,000 --> 00:25:13,500
leave things kind of going the way they are at the moment but I'm not

468
00:25:13,500 --> 00:25:15,200
sure it's a particularly efficient way to do things.

469
00:25:15,500 --> 00:25:19,500
It's hard to say, while I'm sort of doing cleanup oriented stuff.

470
00:25:19,800 --> 00:25:24,000
But anyway, now that the fader is out of there that's good and I'm

471
00:25:24,000 --> 00:25:26,700
trying to think if there's any other things in here that I wanted to.

472
00:25:26,700 --> 00:25:27,200
Oh yeah.

473
00:25:27,600 --> 00:25:29,100
You know what's one thing that I've believed?

474
00:25:29,100 --> 00:25:31,800
That we had a reproducible bug that I want to look at no one actually

475
00:25:31,800 --> 00:25:32,700
mentioned this bug.

476
00:25:33,300 --> 00:25:35,300
Specifically, in the GitHub.

477
00:25:35,300 --> 00:25:38,100
But I had noticed it is, if I remember correctly.

478
00:25:38,100 --> 00:25:40,600
You know, we weren't, we didn't finished a bugging.

479
00:25:40,600 --> 00:25:43,400
We've got, we did some stuff here and we were starting to start

480
00:25:43,400 --> 00:25:48,600
working on this, but if I remember correctly, we did something wrong

481
00:25:48,600 --> 00:25:51,100
with our strings that I wanted to look at.

482
00:25:51,100 --> 00:25:55,700
Because if we took like, for example, here I am in for code or if I

483
00:25:55,700 --> 00:25:58,100
was to do a rebuild and have it reload.

484
00:25:58,100 --> 00:26:02,400
I seem to remember us like on reload, losing our strings.

485
00:26:03,400 --> 00:26:08,900
That's why I remember we lost our profile that happened and if I like

486
00:26:08,900 --> 00:26:13,300
let me go actually make a change here just to see like

487
00:26:18,900 --> 00:26:19,700
CPP.

488
00:26:21,000 --> 00:26:23,100
So let me make a change of some kind.

489
00:26:29,800 --> 00:26:30,500
Yeah.

490
00:26:30,500 --> 00:26:31,600
So

491
00:26:34,900 --> 00:26:39,700
Course, it's not doing it now, but there was one I probably have to

492
00:26:39,700 --> 00:26:43,000
make a change that will actually be somewhat substantial.

493
00:26:46,300 --> 00:26:47,100
Let's take a look.

494
00:26:48,700 --> 00:26:52,500
So, here's for coder and what can I do?

495
00:26:52,500 --> 00:26:57,200
So first of all, why isn't my profile working would be question.

496
00:26:57,200 --> 00:26:59,200
Number one, right?

497
00:27:00,200 --> 00:27:05,600
So, I am interested to know why my profile isn't profiling, but the

498
00:27:05,600 --> 00:27:06,400
other thing, right?

499
00:27:06,400 --> 00:27:09,500
Because that should be showing something here, you know?

500
00:27:09,500 --> 00:27:14,300
I mean so that's odd and the other thing that I wanted I thought there

501
00:27:14,300 --> 00:27:17,800
was some string problems may be there, maybe we accidentally fix them

502
00:27:17,800 --> 00:27:19,900
or something but I don't see how we would have.

503
00:27:20,200 --> 00:27:23,200
So I need to make some changes that will actually do something.

504
00:27:23,200 --> 00:27:24,200
I don't know what.

505
00:27:25,500 --> 00:27:26,500
Well, here we go.

506
00:27:26,700 --> 00:27:28,000
Let's go to render.

507
00:27:29,100 --> 00:27:30,300
Let's go to world mode.

508
00:27:30,900 --> 00:27:34,100
I think what I was doing at the time to play around with it is, I was

509
00:27:34,900 --> 00:27:40,900
fussing with some of these variables here, so maybe we can do that.

510
00:27:42,400 --> 00:27:48,800
So here's her a bit maps and let's see where we're doing these Maps

511
00:27:48,800 --> 00:27:49,300
here.

512
00:27:49,900 --> 00:27:51,400
Maybe I can go in here.

513
00:27:53,200 --> 00:27:57,300
Here, we are doing some stuff and then I can change this to like cape

514
00:27:57,300 --> 00:27:58,000
or something.

515
00:28:03,200 --> 00:28:04,000
That didn't work.

516
00:28:06,900 --> 00:28:08,700
Why aren't you breaking?

517
00:28:12,900 --> 00:28:13,600
Yeah.

518
00:28:13,600 --> 00:28:17,500
So this is not breaking and that's problem because can't bug out.

519
00:28:17,500 --> 00:28:23,000
If it doesn't break, I suppose that's sort of good and sort of not

520
00:28:23,000 --> 00:28:23,200
good.

521
00:28:23,200 --> 00:28:23,600
All right.

522
00:28:23,600 --> 00:28:27,000
What if I were to just delete the code for like rendering trees

523
00:28:27,000 --> 00:28:30,900
entirely like this stuff just goes away like walls are gone.

524
00:28:30,900 --> 00:28:31,600
Swords are gone.

525
00:28:31,600 --> 00:28:32,500
The Familiar is gone.

526
00:28:32,500 --> 00:28:35,400
The monsters gone, all of it gone.

527
00:28:36,500 --> 00:28:37,100
Goodbye.

528
00:28:39,800 --> 00:28:40,700
Well, that's fine.

529
00:28:40,800 --> 00:28:41,300
Yeah, I know.

530
00:28:41,300 --> 00:28:42,900
It's invalid, code path, I don't care.

531
00:28:43,300 --> 00:28:44,100
Ignore it.

532
00:28:46,200 --> 00:28:48,700
I would like you to ignore the code, please, all right.

533
00:28:50,200 --> 00:28:51,400
Here's the disassembly.

534
00:28:51,400 --> 00:28:54,400
What is the problem for this?

535
00:28:54,600 --> 00:28:55,800
I can't ignore it, right?

536
00:28:55,800 --> 00:29:00,600
Because I guess we don't have that and then we jump here, we test this

537
00:29:00,800 --> 00:29:06,100
and jump if equals to cure and then we do R&D, would pour into, right?

538
00:29:06,400 --> 00:29:09,000
So all right fine.

539
00:29:09,300 --> 00:29:11,700
What if instead we just didn't do that.

540
00:29:13,600 --> 00:29:17,500
So for example, in this d word pointer the jump, if equals can I just

541
00:29:17,500 --> 00:29:19,800
overwrite this value with something else.

542
00:29:21,800 --> 00:29:25,400
Let's see, can I can I what can I do here to make that not happen?

543
00:29:26,200 --> 00:29:28,200
What can I do here to make that not happen?

544
00:29:28,200 --> 00:29:29,900
Because I just wanted to keep going.

545
00:29:30,800 --> 00:29:34,400
That's a valid assertion and I'm happy it happened.

546
00:29:36,100 --> 00:29:37,200
Let's take a look here.

547
00:29:50,000 --> 00:29:53,900
Kind of want an OP but I don't remember what the instruction is for

548
00:29:53,900 --> 00:29:54,300
it.

549
00:29:55,300 --> 00:29:57,500
Which I would if I was an Assembly Language programmer.

550
00:29:59,100 --> 00:29:59,800
Of course.

551
00:30:01,600 --> 00:30:02,000
um,

552
00:30:04,500 --> 00:30:07,300
although actually this would probably be fine as well.

553
00:30:09,000 --> 00:30:09,900
To be honest.

554
00:30:10,800 --> 00:30:13,000
I suppose I don't need an OP.

555
00:30:13,500 --> 00:30:14,100
An OP.

556
00:30:14,100 --> 00:30:15,800
I could just do something.

557
00:30:16,100 --> 00:30:18,300
I could just do some more of these actually.

558
00:30:18,300 --> 00:30:19,800
Why didn't I think of that before?

559
00:30:23,200 --> 00:30:27,000
What I could do is just repeat this instruction like ad infinitum,

560
00:30:27,100 --> 00:30:27,700
right?

561
00:30:27,700 --> 00:30:29,600
I could do like, you know,

562
00:30:33,400 --> 00:30:34,400
Memory.

563
00:30:37,800 --> 00:30:40,800
Let's get a little scrub that there.

564
00:30:42,100 --> 00:30:48,200
So there's C70 425 like 0000 doesn't start to do the x or again till

565
00:30:48,300 --> 00:30:51,900
here which is the 33 C 0.

566
00:30:52,200 --> 00:30:59,100
So what if I just instead, just patch that over with like 330, 330,

567
00:31:00,100 --> 00:31:05,500
330, 330, 33, C, 0.

568
00:31:05,800 --> 00:31:08,300
Oh, it's the wrong parody.

569
00:31:14,700 --> 00:31:15,600
Oh, that's a bummer.

570
00:31:17,500 --> 00:31:18,700
I just need something.

571
00:31:18,700 --> 00:31:20,600
Oh, well that one is three.

572
00:31:20,600 --> 00:31:21,800
Would that have been enough?

573
00:31:21,800 --> 00:31:30,300
Could I do just the test the test instruction for 85 C, 0, 4, 8, 8 5,

574
00:31:30,300 --> 00:31:39,300
C 0, 4, 8, 85, C 0 and then I can do the xor.

575
00:31:41,200 --> 00:31:44,900
All right now the code is okay, right?

576
00:31:47,600 --> 00:31:48,600
Perfect.

577
00:31:48,900 --> 00:31:50,600
So now we can just go ahead and go there.

578
00:31:50,600 --> 00:31:53,500
So we have surgically removed, right?

579
00:31:53,500 --> 00:31:54,900
You saw what I did there, right?

580
00:31:54,900 --> 00:31:59,400
It was that was our assertion because hey, like we assert that we

581
00:31:59,400 --> 00:32:03,300
always handled that and I updated the code to make it so that it

582
00:32:03,300 --> 00:32:05,000
wasn't handling, a bunch of cases.

583
00:32:05,200 --> 00:32:07,900
And so, we would get in here and say, hey, this is, that's not legal.

584
00:32:07,900 --> 00:32:10,400
You didn't handle one of the entities, and I didn't want it to write

585
00:32:10,400 --> 00:32:11,100
zero anymore.

586
00:32:11,100 --> 00:32:14,000
So, I had to write over the instructions in memory.

587
00:32:15,100 --> 00:32:17,600
With something that would not harm it.

588
00:32:17,600 --> 00:32:20,400
And so, I just did a bunch of tests instructions, which is fine

589
00:32:20,400 --> 00:32:23,000
because we already executed, that's not going to do anything different

590
00:32:23,100 --> 00:32:25,500
and then I put the x or in there, I had to make it work out to the

591
00:32:25,500 --> 00:32:29,700
right instruction line because of course x64 is a variable instruction

592
00:32:30,300 --> 00:32:35,100
sort of thing but you know as long as they don't do anything harmful,

593
00:32:35,100 --> 00:32:35,800
then we're fine.

594
00:32:37,400 --> 00:32:39,700
So in theory we should be all good.

595
00:32:39,700 --> 00:32:43,300
Now I think I don't actually know but let's find out.

596
00:32:44,400 --> 00:32:44,900
There we go.

597
00:32:45,400 --> 00:32:48,100
Alright, so now we're not drawing anything and there we go.

598
00:32:48,100 --> 00:32:48,500
Good.

599
00:32:48,500 --> 00:32:48,800
Yes.

600
00:32:48,800 --> 00:32:51,000
See my string is got messed up.

601
00:32:52,200 --> 00:32:52,700
Right?

602
00:32:52,900 --> 00:32:57,600
So I have verified that the strings in fact are getting messed up and

603
00:32:57,600 --> 00:32:59,800
so I want to go take a look at why

604
00:33:00,200 --> 00:33:03,200
We're having our strength that messed up because my understanding was

605
00:33:03,200 --> 00:33:06,800
we wrote it, so that we actually saved the strings properly, and so,

606
00:33:06,800 --> 00:33:08,700
they shouldn't be getting messed up.

607
00:33:08,700 --> 00:33:13,200
But since they are, that means, obviously, that's not true, like our

608
00:33:13,200 --> 00:33:16,300
strings actually are bogus in some way and we should go figure out

609
00:33:16,300 --> 00:33:17,700
why, okay?

610
00:33:18,800 --> 00:33:19,500
That was a lot of fun.

611
00:33:26,000 --> 00:33:27,900
Okay, so yeah.

612
00:33:28,000 --> 00:33:32,500
Now we know now we know now we know.

613
00:33:34,000 --> 00:33:35,300
Where was that?

614
00:33:35,300 --> 00:33:36,500
I don't even know where that was.

615
00:33:36,500 --> 00:33:37,200
There's monstar.

616
00:33:37,200 --> 00:33:37,700
Here we go.

617
00:33:37,800 --> 00:33:40,400
So this stuff, this is going to come back in.

618
00:33:40,400 --> 00:33:42,900
We now know, we can turn that off to get the strings to break.

619
00:33:42,900 --> 00:33:46,400
Hopefully, I'm going to comment that out for now, so we don't have to

620
00:33:46,400 --> 00:33:49,100
keep doing that rap every time because I took a little while, in case

621
00:33:49,100 --> 00:33:49,800
you couldn't tell.

622
00:33:50,600 --> 00:33:55,000
So in here, when we're doing our Thang, we're doing our Thang

623
00:33:55,800 --> 00:34:01,100
If I want to I can come back in here set this to 0 and I'm hoping that

624
00:34:01,100 --> 00:34:01,800
that will.

625
00:34:02,400 --> 00:34:04,500
Yeah and so there you go, that corrupts our strings.

626
00:34:04,500 --> 00:34:07,500
And so now we've got a Repro case that I can work with to figure out

627
00:34:07,500 --> 00:34:09,199
why our strings are being corrupted.

628
00:34:09,500 --> 00:34:12,400
It presumably, it's something pretty simple but you never do know.

629
00:34:13,100 --> 00:34:18,900
But either way right that code reloading is very delicate with strings

630
00:34:18,900 --> 00:34:21,400
and we want to make sure that we're not screwing it up because I want

631
00:34:21,400 --> 00:34:23,800
to be able to use that with the debug system without having to worry

632
00:34:23,800 --> 00:34:24,400
about it.

633
00:34:25,300 --> 00:34:30,900
So right now when we print out those strings, right?

634
00:34:30,900 --> 00:34:36,199
We do that in the those are headers strings.

635
00:34:36,699 --> 00:34:39,199
The the ones that are getting corrupted, right.

636
00:34:39,199 --> 00:34:40,400
I think our header strings.

637
00:34:41,000 --> 00:34:45,000
So those are going to be in when we print out our debug groups.

638
00:34:45,600 --> 00:34:50,300
So inside this debug drumming menu nonsense here.

639
00:34:51,100 --> 00:34:54,300
What we're actually printing is this stuff I believe.

640
00:34:54,699 --> 00:34:55,100
And so,

641
00:34:55,199 --> 00:34:56,600
Where is it getting that?

642
00:34:56,600 --> 00:34:57,100
Right.

643
00:34:58,000 --> 00:34:59,700
It looks like it's getting that from.

644
00:35:01,200 --> 00:35:06,500
The links, the, the name of the group that is in, you can see this

645
00:35:06,500 --> 00:35:06,900
here.

646
00:35:07,300 --> 00:35:10,600
That's the name of the group that's stored in the actual like,

647
00:35:10,600 --> 00:35:14,100
hierarchy tree, which is different like the it's not the debug

648
00:35:14,100 --> 00:35:14,500
element.

649
00:35:14,500 --> 00:35:18,100
It's actually the the debug tree which has that.

650
00:35:18,100 --> 00:35:20,000
So it's this debug variable group thing.

651
00:35:20,900 --> 00:35:24,300
So it's going to be this name and name length business here.

652
00:35:25,500 --> 00:35:28,400
So I actually you can kind of see already.

653
00:35:28,400 --> 00:35:30,300
This is probably broken.

654
00:35:31,400 --> 00:35:34,900
In fact, we probably should not be doing it that way at all, right?

655
00:35:35,000 --> 00:35:38,300
This is probably pointing into the original instead of into the grid.

656
00:35:38,800 --> 00:35:44,700
There's probably no reason to do that anyway, and we should probably

657
00:35:44,700 --> 00:35:46,200
just be doing it like this.

658
00:35:46,700 --> 00:35:48,600
So my guess.

659
00:35:49,000 --> 00:35:49,900
Let's take a look here.

660
00:35:52,600 --> 00:35:54,700
We do this whole copy with the nameless thing.

661
00:35:54,700 --> 00:35:56,500
We probably don't want to do any of that.

662
00:35:56,500 --> 00:35:59,700
Really, we'd probably rather do something like this.

663
00:36:00,300 --> 00:36:06,300
Where we just say the text equals the link children name like so.

664
00:36:06,900 --> 00:36:09,200
And we just, you know, we just get rid of all that.

665
00:36:09,400 --> 00:36:11,400
That's probably just better here.

666
00:36:11,400 --> 00:36:14,600
We're doing the name and name length and we do create variable group.

667
00:36:15,700 --> 00:36:19,700
I want to take a quick survey of just who is actually doing that just

668
00:36:19,700 --> 00:36:27,300
to make sure so you can see it doing the Clone there, which is fine.

669
00:36:28,100 --> 00:36:29,900
And thin in here where we do get our

670
00:36:30,000 --> 00:36:33,600
Create, you can see it sort of doing it out of ya and I'm just

671
00:36:33,600 --> 00:36:36,600
guessing that that's probably out of the wrong place.

672
00:36:37,500 --> 00:36:39,800
So I think I'm just going to change those just to be safe since we

673
00:36:39,800 --> 00:36:43,600
don't care that much about the amount of memory used by these things.

674
00:36:43,800 --> 00:36:45,700
I'm just going to clone those strings.

675
00:36:45,700 --> 00:36:49,400
So that here where it comes in and it's doing this getter create, I'm

676
00:36:49,400 --> 00:36:50,600
sorry, create variable group.

677
00:36:50,600 --> 00:36:54,000
This this bit here I'm going to make that just do a push string.

678
00:36:54,400 --> 00:36:59,000
So instead of doing the these name likes here it's just going to do in

679
00:36:59,000 --> 00:36:59,800
here a push

680
00:37:00,000 --> 00:37:04,100
ring, it's not going to store this and it's going to do just to push

681
00:37:04,100 --> 00:37:04,900
drink your

682
00:37:08,900 --> 00:37:11,600
Do we have a pushing copy and made?

683
00:37:15,500 --> 00:37:15,900
Not.

684
00:37:18,300 --> 00:37:19,400
H.

685
00:37:22,800 --> 00:37:23,500
There it is.

686
00:37:24,900 --> 00:37:28,000
So we have a push size and we have a push copy.

687
00:37:29,500 --> 00:37:30,200
Right.

688
00:37:30,200 --> 00:37:33,800
So what I really want to do here is I want to do a push, I actually

689
00:37:33,800 --> 00:37:37,800
want to do like push and null terminate, right?

690
00:37:39,300 --> 00:37:40,400
so, this guy here,

691
00:37:44,300 --> 00:37:51,200
This guy here is really probably wants to be like, you know, push

692
00:37:52,900 --> 00:37:54,600
handle terminate.

693
00:37:55,300 --> 00:37:56,200
Something like that.

694
00:37:57,700 --> 00:38:00,400
And this would just take.

695
00:38:01,800 --> 00:38:06,900
the length of the string to push and it would do the copy and they'll

696
00:38:06,900 --> 00:38:10,700
terminate the name for me, I don't really know that we're going to

697
00:38:10,700 --> 00:38:13,200
really use that multiple times but

698
00:38:15,800 --> 00:38:19,400
Just in case we might as well, we might as well have it.

699
00:38:22,600 --> 00:38:27,000
So here when we do this stuff, we'd no longer have to get the size

700
00:38:27,000 --> 00:38:31,000
because the person's telling us what the size is as it comes in.

701
00:38:31,400 --> 00:38:34,600
So when we do the push, we know that we're just going to push the

702
00:38:34,600 --> 00:38:38,200
length plus 1 because we want to null terminated obviously and we

703
00:38:38,200 --> 00:38:38,900
don't want to clear.

704
00:38:38,900 --> 00:38:41,600
Then we're going to go through and we're going to copy it in.

705
00:38:41,600 --> 00:38:45,600
And the only difference between these two is at the end, we would just

706
00:38:45,600 --> 00:38:47,900
stick the null Terminator on, right?

707
00:38:48,300 --> 00:38:49,500
So pushing L terminate.

708
00:38:49,500 --> 00:38:51,700
That's all that's going to do and

709
00:38:52,000 --> 00:38:52,800
And that's fine.

710
00:38:53,700 --> 00:38:58,500
So in here where we do, oops.

711
00:39:02,600 --> 00:39:06,300
Let's see pushing all terminate function does not take two arguments,

712
00:39:06,300 --> 00:39:06,600
right?

713
00:39:06,600 --> 00:39:07,600
You are sir.

714
00:39:08,400 --> 00:39:11,700
This is going to be our debugger Arena that those go on to because

715
00:39:11,700 --> 00:39:15,100
those are permanent names that they want to keep across the entire run

716
00:39:15,100 --> 00:39:15,800
of the program.

717
00:39:17,000 --> 00:39:20,300
We've got the name length here, where we do a create variable group in

718
00:39:20,300 --> 00:39:21,400
here really.

719
00:39:21,400 --> 00:39:26,500
When we do the Clone, we don't really want this to work this way, we

720
00:39:26,500 --> 00:39:28,000
don't actually want to.

721
00:39:30,300 --> 00:39:33,600
We don't actually want to clone the string because the string can stay

722
00:39:33,600 --> 00:39:35,000
the same if that makes sense.

723
00:39:35,700 --> 00:39:40,100
So really what we would want here is for this to be an actual push

724
00:39:40,100 --> 00:39:46,400
struct and for for Deaf children here to actually get initialized the

725
00:39:46,400 --> 00:39:50,300
same way as the previous one was and then inside when we do our

726
00:39:50,300 --> 00:39:52,300
pushing null terminate.

727
00:39:52,700 --> 00:39:55,500
We instead of doing that, we just hard set.

728
00:39:55,500 --> 00:39:58,800
The the link to to what we were calling, right?

729
00:39:58,800 --> 00:39:59,300
We just say

730
00:39:59,500 --> 00:40:04,000
So we want to just point to the same string because there's really no

731
00:40:04,000 --> 00:40:05,400
need to copy it twice.

732
00:40:10,000 --> 00:40:10,500
Yeah.

733
00:40:10,500 --> 00:40:12,600
Oops, that's dust children name.

734
00:40:15,400 --> 00:40:17,000
So let's see.

735
00:40:17,100 --> 00:40:19,500
Name length, what is this?

736
00:40:19,500 --> 00:40:20,300
That's true.

737
00:40:20,300 --> 00:40:25,500
So this is just strings, are equal, we no longer need this there.

738
00:40:25,600 --> 00:40:29,300
We can just do it as a single comparison.

739
00:40:29,300 --> 00:40:33,800
I don't know which normally comes first, though, in the way we do it.

740
00:40:34,000 --> 00:40:36,500
I don't know if we have this, this strings are equal.

741
00:40:36,500 --> 00:40:40,900
We may have to do it this way, so there we go.

742
00:40:41,600 --> 00:40:44,800
But I think that now cleans it up so that we're not using

743
00:40:45,200 --> 00:40:46,700
Is that we need?

744
00:40:46,900 --> 00:40:48,600
We're always pushing them properly.

745
00:40:48,600 --> 00:40:49,500
I think now.

746
00:40:50,300 --> 00:40:55,400
So here is our debug situation and we should still try to fit while, I

747
00:40:55,400 --> 00:40:56,800
don't know why our profile went away.

748
00:40:56,800 --> 00:40:58,800
So that's another good one to look for as well.

749
00:41:00,100 --> 00:41:05,700
But anyway, so we've fixed that, we believe, let's take a look and see

750
00:41:05,700 --> 00:41:05,900
if.

751
00:41:05,900 --> 00:41:11,600
Now we go back to the render group and and test that change of that,

752
00:41:11,600 --> 00:41:12,000
if

753
00:41:14,500 --> 00:41:16,800
oh wait, not render group its role mode.

754
00:41:20,500 --> 00:41:23,000
So I'm going to go ahead and recompile that.

755
00:41:23,700 --> 00:41:24,400
There we go.

756
00:41:25,400 --> 00:41:26,400
We compile it again.

757
00:41:27,300 --> 00:41:30,000
So now we're all good and we're stable across friends.

758
00:41:30,000 --> 00:41:35,200
We don't mess up any strings and everything works as necessary.

759
00:41:35,200 --> 00:41:38,600
Let me go in here to make sure that's true because it was actually in

760
00:41:38,600 --> 00:41:43,600
in this in the game mode that we were actually seeing the bad

761
00:41:43,600 --> 00:41:44,000
behavior.

762
00:41:44,000 --> 00:41:47,000
So maybe slightly different, let's take a look.

763
00:41:51,400 --> 00:41:51,700
Hm.

764
00:41:53,700 --> 00:41:55,000
Looks like we have a bug here, though.

765
00:41:57,200 --> 00:41:58,100
What happened?

766
00:42:01,400 --> 00:42:03,600
This is an odd place for us to crash.

767
00:42:04,600 --> 00:42:06,300
Collation frames.

768
00:42:06,600 --> 00:42:08,900
Don't really have anything to do with strings.

769
00:42:17,800 --> 00:42:18,600
Yet, here we are.

770
00:42:19,300 --> 00:42:20,800
So we do the reload.

771
00:42:22,100 --> 00:42:24,700
Who is wrong thread?

772
00:42:29,000 --> 00:42:33,800
The thread is valid the first open code block.

773
00:42:34,100 --> 00:42:35,400
Also valid

774
00:42:37,500 --> 00:42:39,200
But the opening event.

775
00:42:41,600 --> 00:42:44,900
The opening event does not have to be valid.

776
00:42:46,200 --> 00:42:47,200
Is the thing.

777
00:42:50,100 --> 00:42:54,400
Yeah, that's actually true.

778
00:43:02,300 --> 00:43:04,600
So is that actually the case though?

779
00:43:04,800 --> 00:43:08,500
Because the opening event is still inside the buffer.

780
00:43:10,500 --> 00:43:13,200
But I guess that buffer is actually a static buffer.

781
00:43:17,900 --> 00:43:20,900
So here is the question riddle.

782
00:43:20,900 --> 00:43:23,200
Me this Batman.

783
00:43:27,500 --> 00:43:30,100
Why did we make it a static buffer?

784
00:43:37,600 --> 00:43:38,300
Is anyone now?

785
00:43:50,100 --> 00:43:53,000
I feel like that is probably a hold over.

786
00:43:54,200 --> 00:43:55,700
Like what why did we do that?

787
00:43:55,800 --> 00:43:57,100
Because here is, I mean,

788
00:44:00,900 --> 00:44:06,000
Correct me if I'm wrong but here's what I what I assert is happening.

789
00:44:07,700 --> 00:44:09,300
So we have a static buffer in here.

790
00:44:11,100 --> 00:44:12,300
It's the global debug table.

791
00:44:16,700 --> 00:44:17,200
Right here.

792
00:44:18,900 --> 00:44:21,200
We have a static variable in here, its Global debug table, it's where

793
00:44:21,200 --> 00:44:23,900
everything gets written and you can see it in here.

794
00:44:26,200 --> 00:44:27,200
it's, it's

795
00:44:37,900 --> 00:44:38,500
It's right here.

796
00:44:40,000 --> 00:44:40,600
It's one of these.

797
00:44:42,100 --> 00:44:42,700
Right?

798
00:44:43,100 --> 00:44:46,000
And we know we always have a pointer to it.

799
00:44:46,900 --> 00:44:49,200
But why did we declare it a static?

800
00:44:56,200 --> 00:44:56,900
I have no idea.

801
00:45:01,600 --> 00:45:05,300
I do not know why we devoted a static, it seems like that's just

802
00:45:05,300 --> 00:45:08,400
asking for trouble because that's going to get relocated potentially

803
00:45:11,000 --> 00:45:13,700
when the DB the dll gets reloaded.

804
00:45:13,700 --> 00:45:16,800
And so at the very least, if it was going to be static, it should

805
00:45:16,800 --> 00:45:19,300
actually be in the platform layer.

806
00:45:21,500 --> 00:45:22,600
Like why is it?

807
00:45:23,500 --> 00:45:25,700
This is just stupid, right?

808
00:45:25,700 --> 00:45:26,700
This is just dumb.

809
00:45:27,800 --> 00:45:30,300
It's the wrong way round.

810
00:45:30,600 --> 00:45:32,700
Like you don't want this to be in the game.

811
00:45:33,000 --> 00:45:35,600
You want this to be in the platform layer and the platform layer would

812
00:45:35,600 --> 00:45:37,600
pass it to the game, right?

813
00:45:37,600 --> 00:45:38,700
That's what you would do.

814
00:45:39,000 --> 00:45:41,700
If you had any idea what you're doing, which I obviously don't because

815
00:45:41,700 --> 00:45:43,300
I wrote it this way, which is stupid.

816
00:45:43,900 --> 00:45:47,600
So what you would, what you would do?

817
00:45:47,600 --> 00:45:51,200
And by would do, I mean what we're going to do right now is in the

818
00:45:51,200 --> 00:45:53,500
win32 layer where this actually gets

819
00:45:55,200 --> 00:45:57,200
Defined, as something the game passes.

820
00:46:00,700 --> 00:46:06,600
I think what we actually want to do is say well, hey, this one that's

821
00:46:06,900 --> 00:46:08,200
that's created here.

822
00:46:09,100 --> 00:46:11,800
This is actually going to be the authoritative one.

823
00:46:13,000 --> 00:46:13,600
Right.

824
00:46:13,800 --> 00:46:16,100
That seems like the smarter way to go.

825
00:46:16,300 --> 00:46:18,300
This is the authoritative debug table.

826
00:46:19,600 --> 00:46:25,100
And then when we actually call, the game will give the game our debug

827
00:46:25,100 --> 00:46:29,000
table for it to use rather than the other way around.

828
00:46:29,300 --> 00:46:31,800
Because right now, it goes the other way around, right?

829
00:46:32,100 --> 00:46:33,700
Right now, what happens is,

830
00:46:36,900 --> 00:46:39,400
In here, we do this.

831
00:46:39,400 --> 00:46:42,900
So nonsense where we like look to see when the game.

832
00:46:42,900 --> 00:46:44,500
Does this debug frame end?

833
00:46:44,800 --> 00:46:50,400
We like get the debug table back from the game but I have no idea why

834
00:46:50,400 --> 00:46:51,200
we do that.

835
00:46:54,000 --> 00:46:55,300
Like, why are we doing that?

836
00:46:56,700 --> 00:46:59,000
I literally have no idea why we did that.

837
00:47:00,200 --> 00:47:01,100
None whatsoever.

838
00:47:07,600 --> 00:47:11,300
I also don't know why we set event, array index underscore event,

839
00:47:11,300 --> 00:47:12,400
index 20,

840
00:47:13,700 --> 00:47:14,900
I guess that's because

841
00:47:19,100 --> 00:47:22,500
I guess that's because if we don't have a game, we don't want to blow

842
00:47:22,500 --> 00:47:23,700
out the end of the table.

843
00:47:31,200 --> 00:47:34,100
This is just bad, that's what I've decided.

844
00:47:34,400 --> 00:47:36,500
I don't think we really knew what we were doing when we did this.

845
00:47:36,800 --> 00:47:39,700
I think we were like still working our way through it and I'm not

846
00:47:39,700 --> 00:47:41,200
confident in the decisions we made here.

847
00:47:41,500 --> 00:47:44,500
So I am going to consider this something that I can rewrite right now

848
00:47:44,500 --> 00:47:48,500
because I don't think if we actually wanted to keep this I feel like

849
00:47:48,500 --> 00:47:51,200
we had an onus on ourselves to write some kind of a comment that

850
00:47:51,200 --> 00:47:51,900
explained why?

851
00:47:51,900 --> 00:47:53,200
Because I don't see it.

852
00:47:53,200 --> 00:47:55,200
And so I don't really think that it needs to remain.

853
00:47:55,200 --> 00:47:58,300
I think it was wasn't thought, through as opposed, to it being thought

854
00:47:58,300 --> 00:47:59,500
through particularly carefully or

855
00:47:59,600 --> 00:48:00,000
Something like that.

856
00:48:00,400 --> 00:48:05,400
I think what we actually want to do is pass this in here where we're

857
00:48:05,400 --> 00:48:09,700
going to pass the global debug table into the game, more specifically,

858
00:48:09,700 --> 00:48:13,200
probably what I'd say is, let's, we would actually pass that in

859
00:48:13,200 --> 00:48:15,300
probably at the head end, right?

860
00:48:15,400 --> 00:48:20,200
So like the very first time we call the game with something, which is

861
00:48:20,200 --> 00:48:24,200
going to be, like, probably up here, right?

862
00:48:24,200 --> 00:48:27,300
We do win through to load game code, you know what I mean?

863
00:48:27,600 --> 00:48:29,900
And right there, like before we've

864
00:48:30,000 --> 00:48:34,500
Actually called anything at all, we would want to set that that debug

865
00:48:34,500 --> 00:48:34,900
thing up.

866
00:48:34,900 --> 00:48:39,200
So the first thing we call is the update and render.

867
00:48:39,300 --> 00:48:42,700
So I feel like that just wants to take the global debug table as a

868
00:48:42,700 --> 00:48:43,200
thing.

869
00:48:43,400 --> 00:48:46,800
Right now, we can just stick that in the memory that could just be in

870
00:48:46,800 --> 00:48:51,400
the memory itself so that we don't have to care, we don't have to like

871
00:48:51,500 --> 00:48:52,600
write it can just be in here.

872
00:48:54,900 --> 00:48:56,400
And I think that's the right thing to do.

873
00:48:56,700 --> 00:48:59,900
So we'll have that debug storage size thing and we might be able to

874
00:48:59,900 --> 00:49:01,200
condense these down.

875
00:49:01,700 --> 00:49:04,800
So this would just be like, debug table and it would be Global debug

876
00:49:04,800 --> 00:49:05,200
table.

877
00:49:05,200 --> 00:49:06,800
That would be, what would be in there.

878
00:49:07,000 --> 00:49:10,600
And then, in the platform, you know, when we're passing this nonsense

879
00:49:10,600 --> 00:49:17,800
around inside the where we have the the memory bit.

880
00:49:18,600 --> 00:49:19,500
Where's that at?

881
00:49:21,500 --> 00:49:22,400
Memory.

882
00:49:25,700 --> 00:49:27,800
I like actually start using this.

883
00:49:29,300 --> 00:49:30,700
Probably see what that does is.

884
00:49:30,700 --> 00:49:34,600
Well, let's take a look here.

885
00:49:38,700 --> 00:49:39,100
There we go.

886
00:49:40,900 --> 00:49:43,100
So here is game memory.

887
00:49:43,100 --> 00:49:46,900
And I think, what we want to do here is just say, like, okay, we got

888
00:49:46,900 --> 00:49:49,800
the debug storage size and the debug storage, I'm going to put the

889
00:49:49,800 --> 00:49:50,900
debug table in here.

890
00:49:55,500 --> 00:49:57,000
We can do a handmade internal.

891
00:49:58,600 --> 00:50:02,300
Because we wouldn't need it if it wasn't and so we could predict eight

892
00:50:02,300 --> 00:50:03,100
this on that.

893
00:50:07,500 --> 00:50:08,100
Right.

894
00:50:09,900 --> 00:50:14,200
So that seems like a good situation to me.

895
00:50:14,900 --> 00:50:17,000
Now it will just compile in theory.

896
00:50:17,000 --> 00:50:18,600
It will also just work.

897
00:50:19,000 --> 00:50:23,200
I can eliminate the concept that we ever return that information.

898
00:50:27,400 --> 00:50:28,000
From this.

899
00:50:28,000 --> 00:50:32,300
So that now, when we're doing that and frame stuff,

900
00:50:34,300 --> 00:50:36,000
I don't remember where that is.

901
00:50:37,400 --> 00:50:39,000
It's in here somewhere.

902
00:50:41,100 --> 00:50:45,800
Let's see and whips and frame.

903
00:50:47,000 --> 00:50:48,500
I know we've got that in here somewhere.

904
00:50:57,800 --> 00:50:59,600
So here's game update and render.

905
00:51:01,400 --> 00:51:04,000
Where's the debug frame end is that in the interface code?

906
00:51:13,700 --> 00:51:14,100
Huh.

907
00:51:21,500 --> 00:51:23,000
I'm very confused by this.

908
00:51:26,600 --> 00:51:29,500
I feel like it should have been defined in here, but maybe it's not.

909
00:51:29,800 --> 00:51:30,500
Let's take a look.

910
00:51:32,200 --> 00:51:36,300
So here is debug game frame Endo, its frame end, perfect.

911
00:51:36,300 --> 00:51:36,700
Wow.

912
00:51:36,900 --> 00:51:39,500
All right, that's fine, doesn't matter.

913
00:51:41,500 --> 00:51:42,000
Frame.

914
00:51:42,100 --> 00:51:42,700
And

915
00:51:51,500 --> 00:51:52,000
There it is.

916
00:51:53,600 --> 00:51:59,400
So this thing is not going to return a debug tables.

917
00:51:59,400 --> 00:52:01,800
Basically, what we're saying, it's just going to look like that now.

918
00:52:02,800 --> 00:52:04,200
And now this thing

919
00:52:05,500 --> 00:52:07,700
Is not going to return anybody at all.

920
00:52:08,200 --> 00:52:10,800
And now everything is all set to go.

921
00:52:10,800 --> 00:52:15,200
All we have to do, if we want to make this work is in update and

922
00:52:15,200 --> 00:52:19,700
render, which is here when we initialize, we would just do Global

923
00:52:19,700 --> 00:52:23,400
debug table equals memory, debug cable.

924
00:52:24,200 --> 00:52:25,100
And that's it.

925
00:52:25,100 --> 00:52:27,600
And then we just have to actually Define that somewhere.

926
00:52:27,800 --> 00:52:29,100
We could just do that here.

927
00:52:29,300 --> 00:52:30,000
Certainly.

928
00:52:30,800 --> 00:52:34,400
And we could condense these two down into something as well, right?

929
00:52:35,800 --> 00:52:37,100
Global debug table.

930
00:52:40,500 --> 00:52:42,100
But I think that's better.

931
00:52:43,900 --> 00:52:47,500
So here we go and we're up and running and everyone's happy and that's

932
00:52:47,500 --> 00:52:48,200
good.

933
00:52:49,200 --> 00:52:52,800
And I'm going to try to get this to crash or rather.

934
00:52:52,800 --> 00:52:55,600
I'm hoping it won't crash but I want to twiddle it a little bit.

935
00:52:56,000 --> 00:52:57,400
Just give it a little, you know,

936
00:53:00,000 --> 00:53:02,800
Get get all up ons there.

937
00:53:05,200 --> 00:53:06,400
See what's going on?

938
00:53:08,100 --> 00:53:09,300
So, I get this going.

939
00:53:09,300 --> 00:53:10,700
Here we go.

940
00:53:13,300 --> 00:53:13,900
Okay.

941
00:53:19,300 --> 00:53:20,500
And that's looking nice.

942
00:53:22,300 --> 00:53:23,000
Yeah.

943
00:53:32,900 --> 00:53:33,300
Cool.

944
00:53:34,300 --> 00:53:36,100
So now our debug code reloading

945
00:53:38,300 --> 00:53:42,300
In case we weren't already ridiculous enough, we can live edit debug

946
00:53:42,300 --> 00:53:42,600
code.

947
00:53:42,600 --> 00:53:46,900
That's being re round at the same time while having the full debug on

948
00:53:46,900 --> 00:53:48,700
multiple threads being captured.

949
00:53:48,800 --> 00:53:53,300
Even if they are going across the frame boundary and apparently will

950
00:53:53,300 --> 00:53:54,400
report it correctly.

951
00:53:58,000 --> 00:53:59,800
like I said, I like engine programming do

952
00:54:00,000 --> 00:54:01,200
They care about game programming.

953
00:54:02,600 --> 00:54:03,300
What can I say?

954
00:54:04,400 --> 00:54:08,400
So now my only question is, what is wrong with our profile?

955
00:54:08,400 --> 00:54:11,600
So we have one more Live code edit.

956
00:54:11,600 --> 00:54:17,500
Bug here with the debug system that we want to address which is why

957
00:54:17,500 --> 00:54:20,300
our profile disappears because our profile definitely does this appear

958
00:54:20,300 --> 00:54:21,800
and our profile should not disappear.

959
00:54:22,100 --> 00:54:25,500
Because as far as I know, I wasn't actually relying on anything in the

960
00:54:25,500 --> 00:54:27,200
debug system for that purpose.

961
00:54:27,600 --> 00:54:29,100
So something

962
00:54:30,000 --> 00:54:30,900
is messed up.

963
00:54:33,300 --> 00:54:35,200
And I don't know what that something is.

964
00:54:35,800 --> 00:54:39,000
So we should find out what that something is.

965
00:54:40,100 --> 00:54:42,400
At the risk of stating, the overwhelmingly obvious.

966
00:54:44,500 --> 00:54:45,700
So let's start with that now.

967
00:54:46,300 --> 00:54:51,200
So first of all, when we do the debugging stuff, we're talking about

968
00:54:51,200 --> 00:54:52,700
that profile group, right?

969
00:54:54,300 --> 00:54:59,100
And so when we do begin and end blocks the way that we're doing that

970
00:54:59,100 --> 00:55:03,200
is I guess we're just sort of getting these event elements and we're

971
00:55:03,200 --> 00:55:06,700
setting up the route profile node for collation frames.

972
00:55:07,400 --> 00:55:09,800
You know we're just checking to see whether we've got one of these

973
00:55:09,800 --> 00:55:10,800
open or not.

974
00:55:11,800 --> 00:55:18,200
So it occurs to me and I'm just going to throw this out there as an

975
00:55:18,200 --> 00:55:21,000
example of something ridiculous, that could be happening, it occurs to

976
00:55:21,000 --> 00:55:21,200
me.

977
00:55:21,200 --> 00:55:27,100
That one way to get what we're seeing is if we never actually created

978
00:55:27,100 --> 00:55:29,900
a route profile node after the code reload.

979
00:55:29,900 --> 00:55:33,800
So we're going along, just fine, were, we've got open thread block,

980
00:55:33,800 --> 00:55:36,500
you know, we do begin blocks, we do clothes, blocks, begin blocks,

981
00:55:36,500 --> 00:55:39,600
those blocks, begin blocks, those blocks, and they're properly.

982
00:55:39,600 --> 00:55:41,100
Matched such that.

983
00:55:41,100 --> 00:55:41,600
We are always

984
00:55:41,800 --> 00:55:44,900
Closing a block that we've opened burgo.

985
00:55:45,400 --> 00:55:49,100
We are always at the root level correctly when we restart a frame.

986
00:55:49,100 --> 00:55:52,600
And so, when we open things up there, we're seeing that we don't have

987
00:55:52,600 --> 00:55:55,200
anyone sitting on the, debug thread list.

988
00:55:55,200 --> 00:55:59,300
So everything goes to the root level, but if during the code reload,

989
00:55:59,300 --> 00:56:00,500
that was not true.

990
00:56:00,600 --> 00:56:04,300
And so, during the code reload, it somehow messed up, who was the open

991
00:56:04,300 --> 00:56:05,500
block at that time.

992
00:56:05,600 --> 00:56:09,300
So that we always have an extra open block sitting at the beginning,

993
00:56:09,900 --> 00:56:11,600
then we would never get to this.

994
00:56:11,700 --> 00:56:12,500
This case.

995
00:56:13,500 --> 00:56:14,000
Right.

996
00:56:14,000 --> 00:56:18,400
We never have this case where we actually set the route profile node

997
00:56:18,400 --> 00:56:21,100
for a collation frame that would never happen.

998
00:56:24,600 --> 00:56:28,600
So that's one example of how this could occur.

999
00:56:29,700 --> 00:56:31,400
I can test that pretty easily.

1000
00:56:33,000 --> 00:56:36,300
But the first thing I want to do is I want to look to see how I

1001
00:56:36,300 --> 00:56:39,800
believe that would be happening so that I can just educate myself

1002
00:56:39,800 --> 00:56:41,500
about what I expect to see.

1003
00:56:41,600 --> 00:56:45,400
So that when I go looking for it, I will know whether I'm seeing what

1004
00:56:45,400 --> 00:56:47,000
I think I should see or not.

1005
00:56:48,800 --> 00:56:52,100
All right, so normally when we blazed through here, we do.

1006
00:56:52,100 --> 00:56:54,400
Do a begin block of the executable refresh.

1007
00:56:55,100 --> 00:56:59,300
So, during the time, when the executable is itself, refreshed,

1008
00:57:00,500 --> 00:57:03,500
We are actually inside and open debug block.

1009
00:57:04,600 --> 00:57:08,500
And then when we come back out, well there's Bears our answer right

1010
00:57:08,500 --> 00:57:08,800
there.

1011
00:57:13,600 --> 00:57:15,400
You're looking at it, you seen it?

1012
00:57:17,800 --> 00:57:20,000
So presumably, what's happening?

1013
00:57:20,000 --> 00:57:20,700
Well actually, no.

1014
00:57:20,700 --> 00:57:21,800
Wait I take it back.

1015
00:57:22,000 --> 00:57:23,100
This should still be working.

1016
00:57:23,700 --> 00:57:27,300
There should still be working because we don't rely on the game to

1017
00:57:27,300 --> 00:57:28,300
close that block.

1018
00:57:29,500 --> 00:57:30,700
So, this should be fine.

1019
00:57:52,800 --> 00:57:56,400
This should be fine because if all were queues are completed, that

1020
00:57:56,400 --> 00:57:58,900
means that no one can launch an asynchronous background task to be

1021
00:57:58,900 --> 00:58:01,300
loading anything, they're gone, they've been drained out.

1022
00:58:01,800 --> 00:58:03,900
The code, has been unloaded, everything's out of memory.

1023
00:58:04,900 --> 00:58:08,200
When we end of this block here, we are doing that locally so that

1024
00:58:08,200 --> 00:58:11,600
should actually do an end block using the global debug memory.

1025
00:58:13,500 --> 00:58:14,300
That should work.

1026
00:58:15,200 --> 00:58:17,300
We then do a begin block, we open that up.

1027
00:58:17,300 --> 00:58:20,000
We do what we were normally doing here, that's all fine.

1028
00:58:20,000 --> 00:58:23,000
We call the update, everything should be fine.

1029
00:58:23,500 --> 00:58:25,600
So, all of that, looks reasonable to me,

1030
00:58:27,700 --> 00:58:28,900
So, that seems okay.

1031
00:58:30,500 --> 00:58:31,400
That seems okay.

1032
00:58:32,500 --> 00:58:33,700
So let's take a look at this.

1033
00:58:33,700 --> 00:58:36,800
The other part where we do debugging frame.

1034
00:58:36,800 --> 00:58:38,900
So here's the up, again, frame this.

1035
00:58:39,200 --> 00:58:40,200
What is this doing?

1036
00:58:41,500 --> 00:58:42,400
Why is this year?

1037
00:58:44,700 --> 00:58:46,600
Because that doesn't make any sense at all.

1038
00:58:49,000 --> 00:58:51,200
I'm very curious about what that's doing there.

1039
00:58:51,200 --> 00:58:55,000
And I do wonder if that, that, in theory could also probably be part

1040
00:58:55,000 --> 00:58:57,800
of the bug and fell, although that should be causing about all the

1041
00:58:57,800 --> 00:58:58,600
time, shouldn't it?

1042
00:58:58,900 --> 00:59:00,100
I don't know why that's there.

1043
00:59:00,800 --> 00:59:04,700
So if we are in the debug code, and we do a frame end,

1044
00:59:07,300 --> 00:59:10,800
Right, here's where we're updating these things.

1045
00:59:11,000 --> 00:59:16,400
You can see that we're, we're doing an atomic exchange on the array

1046
00:59:16,400 --> 00:59:17,200
event index.

1047
00:59:17,400 --> 00:59:20,500
We update it each time.

1048
00:59:22,200 --> 00:59:22,800
Right.

1049
00:59:24,200 --> 00:59:28,600
I mean we are doing the update in here for what we want this to be.

1050
00:59:29,300 --> 00:59:32,200
I don't understand why this is getting set to 0.

1051
00:59:42,900 --> 00:59:46,700
I guess, because we want to always set it to 0 regardless.

1052
00:59:58,300 --> 00:59:59,800
But it shouldn't be okay.

1053
01:00:01,400 --> 01:00:03,400
It just it shouldn't be 0, right?

1054
01:00:03,400 --> 01:00:05,500
Am I the only person who's concerned about this?

1055
01:00:06,100 --> 01:00:07,200
Maybe I am.

1056
01:00:07,400 --> 01:00:08,000
I don't know.

1057
01:00:08,300 --> 01:00:10,500
But here is the bug interface, right?

1058
01:00:11,300 --> 01:00:16,900
And I realized been a long time since we put touching this stuff, but

1059
01:00:17,200 --> 01:00:18,600
let's take a look at that.

1060
01:00:19,400 --> 01:00:20,600
Where's that debug table?

1061
01:00:22,700 --> 01:00:23,200
There it is.

1062
01:00:25,100 --> 01:00:28,000
So, here is the debug table.

1063
01:00:28,500 --> 01:00:33,200
And you can see event index event, array index event index.

1064
01:00:33,500 --> 01:00:37,200
And you can kind of see here that we've got to event arrays and we

1065
01:00:37,200 --> 01:00:38,500
ping-pong between them, right?

1066
01:00:38,500 --> 01:00:40,500
We collate one while we write into the other.

1067
01:00:43,500 --> 01:00:44,100
Right.

1068
01:00:46,300 --> 01:00:47,900
I mean that's what we were doing.

1069
01:00:48,500 --> 01:00:52,700
And so when we, when we set this to 0, that suggests that we're only

1070
01:00:52,700 --> 01:00:54,300
using one of them,

1071
01:00:57,800 --> 01:00:59,100
Which means we're going to miss.

1072
01:00:59,200 --> 01:01:01,200
Like, I don't understand, I don't get it.

1073
01:01:01,500 --> 01:01:02,400
Why would that?

1074
01:01:02,400 --> 01:01:04,400
Why would we ever want that to be true?

1075
01:01:07,000 --> 01:01:10,600
Like what what is what is that for?

1076
01:01:11,600 --> 01:01:15,300
That seems like that's just never you good, right?

1077
01:01:28,500 --> 01:01:30,000
That seems broken.

1078
01:01:30,300 --> 01:01:33,100
All right, so let's try to, let's try to ascertain whether we're

1079
01:01:33,100 --> 01:01:35,500
correct so you can see in current event rednecks.

1080
01:01:35,500 --> 01:01:37,200
Here we just toggle back and forth between it.

1081
01:01:37,200 --> 01:01:40,800
So every time through, we're going to pick a different one, when we do

1082
01:01:40,800 --> 01:01:45,500
in our Atomic exchange, this Atomic exchange will clear it out.

1083
01:01:45,500 --> 01:01:50,900
Will clear out this value and it will set this to the correct thing.

1084
01:01:51,600 --> 01:01:56,100
So this, this is just probably was only their back from when we might

1085
01:01:56,100 --> 01:01:57,900
have been when we were sharing deal.

1086
01:01:58,100 --> 01:01:58,500
Tables.

1087
01:01:58,500 --> 01:02:01,600
And this was just clearing the one that was for that would not have

1088
01:02:01,600 --> 01:02:06,200
gotten cleared if we you know when we call debug frame end or whatever

1089
01:02:06,800 --> 01:02:12,600
so I would say probably what we would want to do is if we failed to

1090
01:02:12,600 --> 01:02:15,900
load the game then sure we zero it out.

1091
01:02:15,900 --> 01:02:19,700
But any other condition where the game Got Loaded correctly we

1092
01:02:19,700 --> 01:02:20,600
wouldn't want to.

1093
01:02:20,700 --> 01:02:22,200
So I think right?

1094
01:02:23,800 --> 01:02:29,100
For some reason, the game didn't load, make sure we clear the debug.

1095
01:02:31,300 --> 01:02:32,800
Event array.

1096
01:02:33,400 --> 01:02:36,500
So it doesn't pile up on itself.

1097
01:02:39,100 --> 01:02:42,000
But I think that's more correct.

1098
01:02:42,300 --> 01:02:46,000
I don't know what, I don't know what was going on there, but that was

1099
01:02:46,000 --> 01:02:47,600
bad because that would have that meant.

1100
01:02:47,600 --> 01:02:50,900
We were always running into the same array, which meant that are like

1101
01:02:51,000 --> 01:02:55,000
other people who might have still be running into their would we would

1102
01:02:55,000 --> 01:02:57,500
miss them more weird stuff would happen if we did that.

1103
01:02:57,500 --> 01:02:58,500
That was not great.

1104
01:02:59,400 --> 01:02:59,900
I don't think

1105
01:03:02,700 --> 01:03:04,900
All right anyway, let's see what happens here.

1106
01:03:06,100 --> 01:03:08,400
Presumably that doesn't fix our profile bug though.

1107
01:03:08,400 --> 01:03:12,900
But I'm pretty sure that wasn't a bug that we did not want.

1108
01:03:15,500 --> 01:03:18,800
All right, so pound, if one there we are.

1109
01:03:18,800 --> 01:03:20,700
Let's go ahead and take that out.

1110
01:03:23,600 --> 01:03:25,100
So maybe that was our bug.

1111
01:03:29,600 --> 01:03:32,000
Here's our profile.

1112
01:03:33,100 --> 01:03:37,100
Yeah so that was our bug because that was clearing I guess that

1113
01:03:39,200 --> 01:03:39,900
Now, there we go.

1114
01:03:40,000 --> 01:03:41,000
So that wasn't the book.

1115
01:03:41,200 --> 01:03:41,400
All right.

1116
01:03:41,400 --> 01:03:41,800
Good.

1117
01:03:42,200 --> 01:03:43,000
So it's just a question.

1118
01:03:43,000 --> 01:03:46,100
If we got to catch it at the right time, that's going to say.

1119
01:03:46,400 --> 01:03:47,800
It didn't seem possible.

1120
01:03:49,900 --> 01:03:50,400
To me.

1121
01:03:53,900 --> 01:03:56,100
So given how finicky that is.

1122
01:03:56,300 --> 01:03:59,900
Again, it really does feel to me, like the problem is, we're like

1123
01:03:59,900 --> 01:04:00,300
leaving.

1124
01:04:00,300 --> 01:04:03,900
There's like a hanging thread block that's open or something.

1125
01:04:04,100 --> 01:04:07,400
So, since we're in that condition right now, I'm going to just go

1126
01:04:07,400 --> 01:04:12,300
ahead and step into the code that's doing the tracking, so I can

1127
01:04:12,300 --> 01:04:15,100
verify, I can see if that's actually the case.

1128
01:04:15,900 --> 01:04:19,500
So, all I'm going to do is I'm going to look to see when we go to open

1129
01:04:19,500 --> 01:04:21,100
one of these begin blocks.

1130
01:04:21,200 --> 01:04:22,900
I'm just going to look to see what actually

1131
01:04:23,000 --> 01:04:24,500
Is in there, right?

1132
01:04:26,300 --> 01:04:29,800
So here's one of them threads, in fact, I guess we could also say

1133
01:04:30,900 --> 01:04:34,200
here's the debug State itself, here's all of it.

1134
01:04:37,100 --> 01:04:40,900
And we can see here on our our thread list here, right?

1135
01:04:40,900 --> 01:04:45,000
Here's all our threads and this is the thread that we're that is

1136
01:04:45,000 --> 01:04:46,700
actually active at the time.

1137
01:04:47,300 --> 01:04:48,400
It's Lane index zero.

1138
01:04:48,400 --> 01:04:51,700
So it's actually going to be, let's see here.

1139
01:04:53,300 --> 01:04:54,400
Come through, right?

1140
01:04:54,400 --> 01:04:56,300
So it's the third one on the list here.

1141
01:04:58,600 --> 01:05:05,900
So in here, we've got first open code block and we can see what, oh,

1142
01:05:06,000 --> 01:05:07,900
what that event actually is.

1143
01:05:10,600 --> 01:05:12,500
well, I could if there was a scrollbar on it,

1144
01:05:15,200 --> 01:05:16,800
So it's the open block.

1145
01:05:16,800 --> 01:05:18,500
It's the debug collation block.

1146
01:05:18,500 --> 01:05:23,900
That's actually what's open, which actually is I guess.

1147
01:05:25,300 --> 01:05:26,200
Kind of amusing.

1148
01:05:28,100 --> 01:05:29,900
So the debug Collision block is open.

1149
01:05:31,700 --> 01:05:32,800
And thusly.

1150
01:05:37,600 --> 01:05:38,800
That's inside.

1151
01:05:42,600 --> 01:05:43,000
Hmm.

1152
01:05:49,800 --> 01:05:52,200
it looks like this is some kind of a

1153
01:05:55,800 --> 01:05:59,000
it looks like that's a block that's like never closed or isn't getting

1154
01:05:59,000 --> 01:05:59,800
close properly.

1155
01:06:00,200 --> 01:06:00,800
Right?

1156
01:06:00,800 --> 01:06:03,600
Like during the reload, that's not getting close or something because

1157
01:06:03,600 --> 01:06:09,500
you can see it's parented to itself which is just obviously not good.

1158
01:06:09,500 --> 01:06:13,900
Because while you could get that case in a recursive call, we

1159
01:06:13,900 --> 01:06:16,500
shouldn't be getting that case because that isn't a recursive

1160
01:06:16,500 --> 01:06:18,100
function, right?

1161
01:06:23,200 --> 01:06:24,500
So, where is that?

1162
01:06:32,800 --> 01:06:33,900
Where is that block?

1163
01:06:45,700 --> 01:06:46,700
looks like,

1164
01:06:51,000 --> 01:06:52,700
Handmade that CPP.

1165
01:06:57,900 --> 01:07:03,100
It's actually the one it's actually the one out here so it's actually

1166
01:07:03,100 --> 01:07:03,700
this one.

1167
01:07:06,000 --> 01:07:07,100
It's this one right here.

1168
01:07:09,600 --> 01:07:12,900
So basically we come through here, we've got to begin block and then

1169
01:07:12,900 --> 01:07:18,500
we're going to do an end block like so and it looks like this one is

1170
01:07:18,500 --> 01:07:23,900
for some reason on the reload, not getting closed properly.

1171
01:07:25,700 --> 01:07:30,700
Now, that makes a very good bit of sense, because this is where the

1172
01:07:30,700 --> 01:07:32,100
table gets reset.

1173
01:07:32,100 --> 01:07:34,900
So, that's the block that's going to be hanging.

1174
01:07:36,300 --> 01:07:38,400
But hopefully, you know what?

1175
01:07:38,400 --> 01:07:40,000
I'm getting at here, right?

1176
01:07:40,300 --> 01:07:41,200
That's the block.

1177
01:07:41,200 --> 01:07:42,700
That's going to be hanging.

1178
01:07:43,600 --> 01:07:48,800
When the reload happens because I come in here, I've had this begin.

1179
01:07:48,800 --> 01:07:50,200
Block, I collate everything.

1180
01:07:50,200 --> 01:07:54,400
I've got that block still open on the parser that's running.

1181
01:07:54,700 --> 01:07:56,400
The end block, it's written in.

1182
01:07:57,700 --> 01:08:02,700
But the the next time around the reload will have happened before, I

1183
01:08:02,700 --> 01:08:06,800
get too close to look at the actual end.

1184
01:08:06,800 --> 01:08:07,400
Block code.

1185
01:08:07,700 --> 01:08:10,300
That closed it, right?

1186
01:08:14,800 --> 01:08:18,700
So I'm not 100% sure why it's having that problem.

1187
01:08:18,700 --> 01:08:24,100
But that is the most logical person to have the bug that we have

1188
01:08:24,100 --> 01:08:26,300
assuming that I'm right about what the bug is.

1189
01:08:27,500 --> 01:08:30,800
So when we do our win32 unload game code here,

1190
01:08:32,100 --> 01:08:32,800
Right.

1191
01:08:35,300 --> 01:08:39,300
It does, this block will always be parsed together so it's even though

1192
01:08:39,300 --> 01:08:41,600
this one's around the one around the refresh.

1193
01:08:41,600 --> 01:08:44,300
That's not the one that's likely to be bifurcated.

1194
01:08:45,600 --> 01:08:49,399
So is there some reason why reloading the game?

1195
01:08:51,000 --> 01:08:54,800
is messing with the game's ability to process that

1196
01:08:56,000 --> 01:08:57,200
When it comes back around.

1197
01:08:57,200 --> 01:08:59,700
So I guess the first question

1198
01:09:00,000 --> 01:09:01,600
Have his, how is it matching?

1199
01:09:01,600 --> 01:09:05,600
Those two is it accidentally matching them on something that it

1200
01:09:05,600 --> 01:09:07,000
shouldn't be matching them on.

1201
01:09:10,399 --> 01:09:10,800
Like,

1202
01:09:12,000 --> 01:09:13,399
It's matching them on.

1203
01:09:15,700 --> 01:09:19,100
It's matching my grid, the grid could change, and that would be wrong,

1204
01:09:19,100 --> 01:09:21,100
but in this case, the good shouldn't have changed.

1205
01:09:27,700 --> 01:09:28,800
Nope, that's what it is.

1206
01:09:30,300 --> 01:09:31,000
That's what it is.

1207
01:09:31,899 --> 01:09:32,800
The grid changes.

1208
01:09:33,200 --> 01:09:33,800
So

1209
01:09:36,800 --> 01:09:39,800
Well, okay, maybe I take it back.

1210
01:09:39,899 --> 01:09:41,000
Maybe the good doesn't change.

1211
01:09:41,000 --> 01:09:41,700
Let's take a look.

1212
01:09:42,500 --> 01:09:43,600
So it's here.

1213
01:09:43,600 --> 01:09:46,500
It's handmade CP24 1234.

1214
01:09:47,800 --> 01:09:49,000
Right then.

1215
01:09:49,000 --> 01:09:50,500
Let's take a look at what this one is.

1216
01:09:54,700 --> 01:09:56,000
24 1234.

1217
01:09:56,000 --> 01:09:56,700
What's this here?

1218
01:09:58,600 --> 01:10:01,500
132 zero and debug interface.

1219
01:10:03,200 --> 01:10:05,800
So, that should still match if we were doing correctly.

1220
01:10:05,800 --> 01:10:09,600
So let's take a look here at how we're actually doing that matching.

1221
01:10:12,200 --> 01:10:16,600
So to check if two events match, what are we doing?

1222
01:10:19,000 --> 01:10:20,100
I don't care about you.

1223
01:10:24,600 --> 01:10:26,700
If the thread ID.

1224
01:10:31,300 --> 01:10:34,300
Equals the other thread ID than the events match.

1225
01:10:36,700 --> 01:10:37,900
That's what that means.

1226
01:10:40,600 --> 01:10:40,800
Hm.

1227
01:10:42,600 --> 01:10:47,800
Okay, I don't see any reason why the thread IDs would not match across

1228
01:10:47,800 --> 01:10:48,700
a Reload.

1229
01:10:49,300 --> 01:10:50,600
So that's a bit odd.

1230
01:10:58,400 --> 01:11:00,200
I can't say I know why that would be the case.

1231
01:11:02,700 --> 01:11:03,800
Why wouldn't match?

1232
01:11:04,400 --> 01:11:06,400
That seems like that should match just fine.

1233
01:11:10,300 --> 01:11:12,200
That's a very strange call to be making.

1234
01:11:13,400 --> 01:11:16,400
So I want to take a look at this, a little more closely and I know

1235
01:11:16,400 --> 01:11:19,300
we're out of time but that's just the way it goes sometimes.

1236
01:11:19,700 --> 01:11:23,600
So assuming it's I'm going to change this temporarily to just be like

1237
01:11:23,600 --> 01:11:24,400
in assert

1238
01:11:30,400 --> 01:11:31,800
Because I just want to know.

1239
01:11:32,200 --> 01:11:35,400
I want to know what's going on in there, and I'm not sure I do.

1240
01:11:36,800 --> 01:11:40,500
So I want to set that to an assertion and I want to see like when does

1241
01:11:40,500 --> 01:11:42,800
this not happen, right?

1242
01:11:43,400 --> 01:11:47,100
So there we've hit it once, so here's an opening event.

1243
01:11:48,000 --> 01:11:49,200
And here's the event.

1244
01:11:52,900 --> 01:11:55,600
and we've got a thing that's like record span that goes to the

1245
01:11:55,600 --> 01:11:59,600
beginning of the frame series and it's like, okay but that's not even

1246
01:11:59,600 --> 01:11:59,800
disk

1247
01:12:00,000 --> 01:12:02,500
It's not even valid anymore, like that's not what's Happening Here,

1248
01:12:02,500 --> 01:12:03,000
Right?

1249
01:12:03,400 --> 01:12:03,600
Least.

1250
01:12:03,600 --> 01:12:04,300
I don't think so.

1251
01:12:06,000 --> 01:12:06,700
So let's see.

1252
01:12:07,100 --> 01:12:10,600
This is handmade code, 1320.

1253
01:12:16,700 --> 01:12:17,900
Which ones are these?

1254
01:12:20,400 --> 01:12:21,300
Are these both.

1255
01:12:23,500 --> 01:12:25,900
There's the opening event and there's the event.

1256
01:12:27,100 --> 01:12:28,500
The opening event.

1257
01:12:31,500 --> 01:12:36,300
The opening event should not have an end block as it squid.

1258
01:12:38,200 --> 01:12:38,900
Right.

1259
01:12:39,400 --> 01:12:41,300
I mean that doesn't make any sense at all.

1260
01:12:42,700 --> 01:12:47,300
To say the very least the opening event should have an open like a

1261
01:12:47,300 --> 01:12:49,400
block, an open block as it squid.

1262
01:12:50,400 --> 01:12:52,400
So I'm not sure what's going on here.

1263
01:12:52,400 --> 01:12:54,500
That's very bizarre to me.

1264
01:12:56,800 --> 01:12:57,900
Take a look at the thread.

1265
01:13:03,200 --> 01:13:04,300
Opening event.

1266
01:13:10,700 --> 01:13:14,300
And what's the debug element for this code block as well?

1267
01:13:16,400 --> 01:13:21,000
It's load asset work directly, which is what we would expect, right?

1268
01:13:21,400 --> 01:13:23,700
But why is the opening event?

1269
01:13:25,000 --> 01:13:28,600
Bizarre, why is this the opening event?

1270
01:13:29,700 --> 01:13:31,200
We're setting it correct?

1271
01:13:31,300 --> 01:13:31,900
Aren't we?

1272
01:13:33,600 --> 01:13:34,800
Or maybe we aren't.

1273
01:13:35,400 --> 01:13:36,200
Let's take a look.

1274
01:13:36,300 --> 01:13:37,400
Do we set that properly?

1275
01:13:37,400 --> 01:13:39,700
So, here's the debug block.

1276
01:13:40,100 --> 01:13:41,600
Here's the event that we set.

1277
01:13:41,600 --> 01:13:45,300
When we open it, we do allocate it and we do pass it.

1278
01:13:45,400 --> 01:13:48,600
And when we call allocate, debug block, I'm assuming we actually

1279
01:13:48,700 --> 01:13:49,500
correctly, set it.

1280
01:13:49,500 --> 01:13:50,900
So, there's a point to the event.

1281
01:13:51,700 --> 01:13:52,300
Right.

1282
01:13:57,300 --> 01:13:58,000
oh,

1283
01:14:00,200 --> 01:14:00,800
oh,

1284
01:14:02,600 --> 01:14:07,800
but that is the wrong pointer to the event that is not stored.

1285
01:14:08,800 --> 01:14:10,100
That's not start at all.

1286
01:14:10,300 --> 01:14:12,100
This is the actual event.

1287
01:14:12,100 --> 01:14:15,000
We want to store because anything that we take, that's a pointer into

1288
01:14:15,000 --> 01:14:17,300
their is going to go away, right?

1289
01:14:18,100 --> 01:14:23,200
So that's a bug, perhaps the bug, and I don't know if you follow me on

1290
01:14:23,200 --> 01:14:23,700
that one.

1291
01:14:24,100 --> 01:14:26,700
The event that we're processing here, right?

1292
01:14:26,700 --> 01:14:29,400
Is transitory after we process it.

1293
01:14:29,400 --> 01:14:31,200
We can't count it being live anymore.

1294
01:14:31,500 --> 01:14:35,500
So since we're now parsing, this incrementally, this event is going to

1295
01:14:35,500 --> 01:14:38,500
disappear once we flush the buffer, so

1296
01:14:38,600 --> 01:14:42,400
So the only thing we can actually reference is the stored event

1297
01:14:42,400 --> 01:14:47,200
version of that event that we copied that we can look at all day long

1298
01:14:47,300 --> 01:14:49,400
because that's permanent, right?

1299
01:14:50,100 --> 01:14:53,700
Or at least it's very long lasting certainly longer lasting than the

1300
01:14:53,700 --> 01:14:55,200
block, right?

1301
01:14:55,500 --> 01:14:59,000
We know we can store several frames worth of that and I'll make a note

1302
01:14:59,000 --> 01:14:59,800
here no case.

1303
01:15:02,000 --> 01:15:02,600
And you know what?

1304
01:15:02,600 --> 01:15:06,600
Actually now I think about to it might actually be a better idea to

1305
01:15:06,600 --> 01:15:07,300
keep this.

1306
01:15:07,300 --> 01:15:08,600
I'll make note of this.

1307
01:15:08,800 --> 01:15:10,800
It might be a good idea.

1308
01:15:13,900 --> 01:15:21,100
To actually just copy the relevant block information into the open

1309
01:15:21,400 --> 01:15:22,500
debug block.

1310
01:15:23,600 --> 01:15:33,900
Directly because really stored blocks can get freed eventually to so

1311
01:15:33,900 --> 01:15:39,000
stored Event Event isn't really what we want.

1312
01:15:39,600 --> 01:15:45,100
So technically, I think this code is not so good, right?

1313
01:15:45,300 --> 01:15:48,700
What we really want to do is copy it, what we wanted into that, debug

1314
01:15:48,700 --> 01:15:50,200
block, and then use it.

1315
01:15:55,000 --> 01:15:55,600
But yeah.

1316
01:15:57,500 --> 01:15:57,800
so,

1317
01:15:59,600 --> 01:16:00,800
Okay, so let's take a look.

1318
01:16:00,800 --> 01:16:02,000
Now where we're at?

1319
01:16:02,100 --> 01:16:07,800
Wait did I actually make sure I did that right stored event event

1320
01:16:09,300 --> 01:16:11,000
Element framing decks first up.

1321
01:16:11,000 --> 01:16:11,400
Go block.

1322
01:16:11,400 --> 01:16:11,700
Yeah.

1323
01:16:13,000 --> 01:16:13,600
That's all good.

1324
01:16:13,700 --> 01:16:15,800
Okay, all right, off we go.

1325
01:16:17,000 --> 01:16:19,500
And so now, let's take a look at these guys.

1326
01:16:19,500 --> 01:16:22,300
Of course, we still may have other problems here, but I that was

1327
01:16:22,300 --> 01:16:23,600
definitely just wrong.

1328
01:16:25,000 --> 01:16:27,700
Okay, so we've got an opening event here.

1329
01:16:29,400 --> 01:16:30,400
Write the grid.

1330
01:16:31,700 --> 01:16:34,000
Well, why would the grid be zero?

1331
01:16:35,400 --> 01:16:38,700
Something very strange is afoot, the grid should not be 0.

1332
01:16:39,800 --> 01:16:42,600
I mean I suppose it's not a problem that it is but it shouldn't be.

1333
01:16:43,000 --> 01:16:44,000
There's the end block.

1334
01:16:49,400 --> 01:16:50,600
Show me what's Happening Here?

1335
01:16:51,600 --> 01:16:52,200
There we go.

1336
01:16:53,100 --> 01:16:55,400
I want to see what's happening with Stuart event.

1337
01:16:59,300 --> 01:17:02,400
okay, so inside stored event here is our event handle

1338
01:17:04,800 --> 01:17:06,700
And why is there no good to it?

1339
01:17:07,200 --> 01:17:09,000
We called stored event.

1340
01:17:09,400 --> 01:17:12,500
We called store event and we stored this event.

1341
01:17:15,400 --> 01:17:16,000
Right.

1342
01:17:17,400 --> 01:17:19,200
So what happened here?

1343
01:17:24,200 --> 01:17:25,600
Oh, right, that's actually fine.

1344
01:17:32,500 --> 01:17:33,800
So complicated.

1345
01:17:34,400 --> 01:17:35,600
I rather enjoy it though.

1346
01:17:36,100 --> 01:17:40,900
So the reason for that is just that in here, we're actually just using

1347
01:17:40,900 --> 01:17:42,500
that to double for profile nodes.

1348
01:17:42,700 --> 01:17:46,700
So yeah, this does not want to be doing what it's doing is basically

1349
01:17:46,700 --> 01:17:52,600
what it boils down to the correct way to do this is just to say the

1350
01:17:52,600 --> 01:17:56,600
open debug block does not store the event, get stores anything that

1351
01:17:56,600 --> 01:17:59,700
you needed from the event, right?

1352
01:18:00,000 --> 01:18:03,700
Here in end block, when we do the end block, anything that we actually

1353
01:18:03,700 --> 01:18:08,300
needed to do, we had better do now we had better have stored.

1354
01:18:08,500 --> 01:18:13,000
So instead of ever looking at open event, we want to do something

1355
01:18:13,000 --> 01:18:17,300
where we can actually, where we can do whatever check-in, we need

1356
01:18:17,400 --> 01:18:18,200
events matches.

1357
01:18:18,200 --> 01:18:21,200
The only place that we actually used it other than the clock.

1358
01:18:21,700 --> 01:18:25,000
So I'm going to say that we put the begin clock directly in there.

1359
01:18:25,200 --> 01:18:27,400
So, this will just be the matching block.

1360
01:18:29,000 --> 01:18:29,300
Oops,

1361
01:18:34,400 --> 01:18:35,800
And I can get rid of this as well.

1362
01:18:40,100 --> 01:18:44,100
So, I'm just going to say that, instead of opening event clock, I'm

1363
01:18:44,100 --> 01:18:46,900
going to say that we have the matching block.

1364
01:18:49,200 --> 01:18:50,000
Begin clock.

1365
01:18:50,500 --> 01:18:52,300
So in here will store that

1366
01:18:55,300 --> 01:18:59,400
And then this events match all that was actually doing was checking

1367
01:18:59,500 --> 01:19:00,500
the threads.

1368
01:19:00,900 --> 01:19:07,000
So I think what I want to do here is say matching block or rather the

1369
01:19:07,000 --> 01:19:09,500
thread ID.

1370
01:19:09,800 --> 01:19:14,100
I want to make sure that that thread ID matches, this events thread

1371
01:19:14,100 --> 01:19:16,900
ID, and that's it.

1372
01:19:18,100 --> 01:19:19,400
That's all that should be happening.

1373
01:19:19,700 --> 01:19:22,500
And I think that's just an assert.

1374
01:19:22,500 --> 01:19:24,400
I think these always have to close.

1375
01:19:24,800 --> 01:19:26,700
That's just like, got to happen.

1376
01:19:27,400 --> 01:19:29,900
And so all this stuff goes away, right?

1377
01:19:29,900 --> 01:19:30,800
And that's all fine.

1378
01:19:32,800 --> 01:19:37,600
So yeah, so up here, we've got our begin clock and now we just say

1379
01:19:37,600 --> 01:19:41,400
like whatever the event clock actually was is what we store.

1380
01:19:45,200 --> 01:19:47,100
The first open code Block open Event.

1381
01:19:47,100 --> 01:19:47,400
Clock.

1382
01:19:47,400 --> 01:19:49,800
Now is again, that's just that begin clock.

1383
01:19:53,000 --> 01:19:56,500
When we tried to get this, we no longer want that to be something you

1384
01:19:56,500 --> 01:19:57,600
can even access.

1385
01:19:59,100 --> 01:20:05,900
And this right here, I don't even know why we have this at all with

1386
01:20:05,900 --> 01:20:08,400
the matching events match thing, because it's just the thread thing.

1387
01:20:08,400 --> 01:20:10,200
Again, we don't even need that.

1388
01:20:10,600 --> 01:20:16,100
So this is really just an assertion that the thread ID matches.

1389
01:20:19,600 --> 01:20:22,300
All right, so that's just cleaning out some code.

1390
01:20:24,100 --> 01:20:27,200
Alright, now, let's take a look at what's going down in here.

1391
01:20:29,700 --> 01:20:36,600
okay, now we are in better shape, I suspect

1392
01:20:38,400 --> 01:20:41,400
Okay, so everything seems to be working.

1393
01:20:41,400 --> 01:20:41,800
Okay?

1394
01:20:41,800 --> 01:20:46,200
And there now and I'm going to go in here and I'm going to switch back

1395
01:20:46,200 --> 01:20:47,800
to the world mode stuff.

1396
01:20:47,800 --> 01:20:54,400
And I'm going to go like this compile and hey, we're still losing her.

1397
01:20:55,800 --> 01:20:56,400
Profile.

1398
01:20:56,700 --> 01:20:59,000
Well, we're out of time.

1399
01:20:59,000 --> 01:20:59,800
So I'll say

1400
01:21:00,000 --> 01:21:00,900
It for tomorrow.

1401
01:21:01,000 --> 01:21:03,700
I'm kind of interested to know what's going wrong in there, but I'm

1402
01:21:03,700 --> 01:21:06,000
pretty sure we'll figure it out relatively quickly.

1403
01:21:06,000 --> 01:21:08,900
That was all just kind of garbage stuff in there.

1404
01:21:08,900 --> 01:21:12,800
So I'm glad that we clean that out because that's not, that was not

1405
01:21:12,800 --> 01:21:13,900
correct in any way.

1406
01:21:16,700 --> 01:21:23,200
But yeah, I'll take a couple brief Q&A as but might want to save most

1407
01:21:23,200 --> 01:21:25,700
of them for tomorrow when we actually finish finding the bug and then

1408
01:21:25,700 --> 01:21:26,600
we'll be in good shape.

1409
01:21:36,400 --> 01:21:40,000
Just used, would it be reasonable to separate the debug UI into a

1410
01:21:40,000 --> 01:21:42,800
program that communicates with the game over pipes or sockets?

1411
01:21:43,100 --> 01:21:46,000
The game, will the debug data and won't waste Cycles on debug

1412
01:21:46,000 --> 01:21:46,400
collation?

1413
01:21:46,400 --> 01:21:49,700
Debug rendering, if game crashes, you can still expect frames or even

1414
01:21:49,700 --> 01:21:52,000
save them to the disk independently of the game running.

1415
01:21:53,900 --> 01:21:54,800
Yes.

1416
01:21:54,900 --> 01:21:56,100
So that's

1417
01:21:58,900 --> 01:22:01,400
so that's totally a good idea.

1418
01:22:01,900 --> 01:22:06,800
And probably if we were going to do like eating, you know, a

1419
01:22:06,800 --> 01:22:09,900
commercial version of the debug system, you would probably want to do

1420
01:22:09,900 --> 01:22:10,300
that.

1421
01:22:10,800 --> 01:22:14,800
The other reason why you would want it to work over sockets would be

1422
01:22:14,800 --> 01:22:18,100
so that you can debug a machine that is not the machine that you're

1423
01:22:18,100 --> 01:22:18,500
on.

1424
01:22:18,700 --> 01:22:23,200
So, for example, if you had a console like stack, like like the, you

1425
01:22:23,200 --> 01:22:26,800
know, I got my PlayStation 4 dev kit or whatever, and I want to view

1426
01:22:26,800 --> 01:22:28,500
the debug stuff on another machine.

1427
01:22:28,700 --> 01:22:32,500
In that's, you know, kind of the classic use case.

1428
01:22:33,000 --> 01:22:33,600
So yeah,

1429
01:22:35,500 --> 01:22:37,400
And we've kind of set it up to do that.

1430
01:22:37,400 --> 01:22:39,800
Like, the way we've got it, where it writes to the buffers.

1431
01:22:40,300 --> 01:22:45,700
It's not, you know, you could easily switch this over to something

1432
01:22:45,700 --> 01:22:46,200
that did that.

1433
01:22:46,200 --> 01:22:48,600
If you want to start writing some Network code, we're not going to do

1434
01:22:48,600 --> 01:22:49,100
that.

1435
01:22:50,900 --> 01:22:52,900
On stream but you could imagine it right?

1436
01:22:52,900 --> 01:22:56,100
We sort of architected it so that that wouldn't be a huge deal, but

1437
01:22:56,100 --> 01:22:58,300
that's not a, it's not a most.

1438
01:22:58,300 --> 01:23:01,700
It's really just that collation part that you would at Cochin display

1439
01:23:01,700 --> 01:23:02,100
part.

1440
01:23:02,100 --> 01:23:05,100
You just move that out into your separate program in that.

1441
01:23:05,100 --> 01:23:05,900
Be all you have to do.

1442
01:23:09,500 --> 01:23:12,300
Referring to Global debug table outside of handmade internal guard.

1443
01:23:12,600 --> 01:23:16,900
Yeah I mean there's probably a ton of those will clean them up when we

1444
01:23:16,900 --> 01:23:18,300
actually start turning that off again.

1445
01:23:25,900 --> 01:23:26,800
He's in your stream.

1446
01:23:26,800 --> 01:23:29,200
Overlay disappeared, at some point during this evening.

1447
01:23:30,600 --> 01:23:33,900
Well, it only disappeared because we ran out of like it ended at 6:30.

1448
01:23:39,200 --> 01:23:41,300
Elvin, how are you finding modular editing so far?

1449
01:23:41,700 --> 01:23:45,400
I'm still pretty slow, but I think that's because I have to do some

1450
01:23:45,400 --> 01:23:49,600
more work to make it easier for me to do cleanup edits without having

1451
01:23:49,600 --> 01:23:50,500
to switch modes.

1452
01:23:50,900 --> 01:23:54,400
So I think I'll eventually be as fast as I was possibly even faster

1453
01:23:55,700 --> 01:23:58,300
when I actually do some more work on it.

1454
01:23:59,000 --> 01:23:59,800
So,

1455
01:24:00,600 --> 01:24:01,300
I don't know.

1456
01:24:02,400 --> 01:24:03,000
We'll see.

1457
01:24:08,000 --> 01:24:09,100
Well, I'm waiting for another questions.

1458
01:24:09,100 --> 01:24:16,800
I can fix the one from the question for taking a look at Global debug

1459
01:24:16,800 --> 01:24:20,000
table outside of a internal guard.

1460
01:24:24,600 --> 01:24:26,900
Where am I doing it though?

1461
01:24:29,500 --> 01:24:30,900
You're referring to go.

1462
01:24:30,900 --> 01:24:32,000
Buddies are outside a total guard.

1463
01:24:32,000 --> 01:24:34,300
We initialize it in update and render, okay?

1464
01:24:34,800 --> 01:24:36,600
So you're talking about in here,

1465
01:25:10,200 --> 01:25:10,800
Cubicle up.

1466
01:25:10,800 --> 01:25:14,200
Why don't use debug break instead of insert, which will allow you to

1467
01:25:14,200 --> 01:25:16,800
step over the surgeon because Depot break isn't platform.

1468
01:25:18,300 --> 01:25:20,400
We'd have to do multiple uncertain platforms.

1469
01:25:20,400 --> 01:25:21,600
That only works on Windows.

1470
01:25:24,300 --> 01:25:28,100
There's an equivalent one for Unix, but it's different.

1471
01:25:31,400 --> 01:25:34,800
Or da minha the handmade Twitter account says, tomorrow is an off day.

1472
01:25:34,800 --> 01:25:35,800
That is correct.

1473
01:25:37,500 --> 01:25:38,300
Bad fly dog.

1474
01:25:38,300 --> 01:25:39,900
What exactly is modular editing?

1475
01:25:40,400 --> 01:25:41,500
I don't think it.

1476
01:25:41,500 --> 01:25:42,800
I think they meant modal.

1477
01:25:44,200 --> 01:25:45,200
It's modal editing.

1478
01:25:48,300 --> 01:25:50,200
It's just the it's like VI style.

1479
01:25:50,400 --> 01:25:54,100
So like when you're in the green mode, you type, but when you're in

1480
01:25:54,100 --> 01:25:58,600
the red mode, all of those things are actually commands, right?

1481
01:25:58,600 --> 01:26:01,400
So, I'm not actually holding down control or anything when I do that,

1482
01:26:02,500 --> 01:26:04,200
that that's that's all it is.

1483
01:26:09,800 --> 01:26:14,300
Alvin when you're writing your own renderers to go for left handed

1484
01:26:14,300 --> 01:26:16,000
coordinate system or right-handed.

1485
01:26:16,900 --> 01:26:25,400
I always use right-handed cuz that's just typically what math uses so

1486
01:26:25,400 --> 01:26:27,900
I figured no real reason.

1487
01:26:29,100 --> 01:26:29,800
That makes sense.

1488
01:26:36,500 --> 01:26:38,900
Something I noticed when you disable the trees, rendering the white

1489
01:26:38,900 --> 01:26:39,900
dot used to resize.

1490
01:26:39,900 --> 01:26:43,200
The profile view is hard to see over a light background like the text

1491
01:26:43,200 --> 01:26:45,000
was hard to read before adding a shadow.

1492
01:26:45,200 --> 01:26:49,000
Yeah, well that's like I said, if we get to the point where we do a

1493
01:26:49,000 --> 01:26:52,000
beautification pass really there's a bunch of things you want to do.

1494
01:26:52,000 --> 01:26:55,400
So first of all, we want this to actually come up large to begin with.

1495
01:26:56,200 --> 01:26:59,200
And the other thing is we want this to be bigger as well.

1496
01:27:01,000 --> 01:27:02,000
And it's not currently.

1497
01:27:02,000 --> 01:27:06,100
So this, you know, we didn't really do any work to draw this

1498
01:27:06,100 --> 01:27:08,700
correctly, we would want to write.

1499
01:27:10,200 --> 01:27:12,200
How many profiles should be open at?

1500
01:27:12,200 --> 01:27:14,200
Once is really the question.

1501
01:27:14,900 --> 01:27:18,000
I think we probably just want a ton of profile views

1502
01:27:42,600 --> 01:27:45,300
Zack to 11w do you find that commenting as you work helps?

1503
01:27:45,300 --> 01:27:50,200
You reason or helps you overall when programming I find that

1504
01:27:50,200 --> 01:27:54,000
commenting is really just if I'm trying to make a note for later like

1505
01:27:54,000 --> 01:27:58,500
I think I'm going to forget something really is mostly why I put it

1506
01:27:58,500 --> 01:27:58,900
there.

1507
01:28:03,800 --> 01:28:04,200
K.

1508
01:28:04,200 --> 01:28:06,700
Do you think for a coder is good enough to switch to coming from

1509
01:28:06,700 --> 01:28:07,300
emacs?

1510
01:28:07,300 --> 01:28:09,300
Or are you finding it's missing some stuff yet?

1511
01:28:10,900 --> 01:28:19,300
Right now the there's only two well I guess there's three reasons not

1512
01:28:19,300 --> 01:28:24,300
to switch from for from for a coder from emacs for a coder.

1513
01:28:24,300 --> 01:28:28,500
They are the indenting and for cutter doesn't really work right yet?

1514
01:28:29,200 --> 01:28:31,200
I think it just has some bugs in it.

1515
01:28:31,200 --> 01:28:32,700
Alan was suggesting that it was because he

1516
01:28:32,900 --> 01:28:35,400
Did had a person in the beginning of the buffer to get it.

1517
01:28:35,400 --> 01:28:35,500
Right.

1518
01:28:35,500 --> 01:28:36,800
But that's not actually true.

1519
01:28:36,800 --> 01:28:39,900
Like it's, it's just not working quite right yet.

1520
01:28:39,900 --> 01:28:44,600
Like, it doesn't pick even in obvious, cases it often picks wrong.

1521
01:28:44,800 --> 01:28:47,700
So, I think actually, it probably wouldn't be that hard to get as good

1522
01:28:47,700 --> 01:28:49,500
because emacs pics wrong, a bunch too.

1523
01:28:49,700 --> 01:28:51,600
So I don't think I'd be as hard to get it as good as you might, but

1524
01:28:51,600 --> 01:28:52,400
right now it's not.

1525
01:28:52,400 --> 01:28:53,700
So, I noticed that a lot

1526
01:28:56,500 --> 01:29:02,200
The autocomplete doesn't autocomplete stuff, that's nearby so it's not

1527
01:29:02,200 --> 01:29:03,200
really that usable.

1528
01:29:03,700 --> 01:29:09,300
So the autocomplete at the moment is a pretty is is pretty noticeable

1529
01:29:10,300 --> 01:29:13,600
and I have a lot of trouble with it and the third one is just macros.

1530
01:29:13,800 --> 01:29:17,900
So if you're going to ever do a big text edit with macros, it doesn't

1531
01:29:17,900 --> 01:29:20,200
have the ability to the macro record and replay.

1532
01:29:21,200 --> 01:29:27,200
Those are the only three things right now that I find to be worse than

1533
01:29:27,200 --> 01:29:27,800
emacs.

1534
01:29:28,000 --> 01:29:30,400
Everything else is either the same or better.

1535
01:29:31,300 --> 01:29:34,800
So I don't really know what Alan schedule is like he's in school at

1536
01:29:34,800 --> 01:29:35,800
the moment, obviously.

1537
01:29:37,000 --> 01:29:42,300
But I would be pretty surprised if in a couple months for coder,

1538
01:29:42,300 --> 01:29:44,700
wasn't at the point where there's literally no reason to be using

1539
01:29:44,700 --> 01:29:50,700
emacs at all, unless you just really like programming and lisp.

1540
01:29:54,600 --> 01:29:58,100
Which I really, really, really don't case anyone's wondering.

1541
01:30:00,000 --> 01:30:02,600
K, vertical, Block, kill selection.

1542
01:30:03,100 --> 01:30:05,600
I don't really care that much about that.

1543
01:30:05,900 --> 01:30:09,300
I use it on occasion but honestly macro recording is usually what I

1544
01:30:09,300 --> 01:30:11,500
even use, most of the time for that sort of stuff.

1545
01:30:11,500 --> 01:30:13,100
So I don't even care about that.

1546
01:30:13,600 --> 01:30:14,100
I don't even know.

1547
01:30:14,100 --> 01:30:16,800
We might even have that for all, I know and if it didn't have that you

1548
01:30:16,800 --> 01:30:18,000
could actually write it yourself.

1549
01:30:20,700 --> 01:30:21,500
At the moment.

1550
01:30:23,100 --> 01:30:24,800
so, if you really wanted it, you could add that

1551
01:30:32,100 --> 01:30:33,100
Kb3 off topic.

1552
01:30:33,100 --> 01:30:36,000
I noticed that pragma pack will change the alignment of the struct is

1553
01:30:36,000 --> 01:30:41,800
their way of keeping the original alignment, will know.

1554
01:30:41,800 --> 01:30:44,500
I mean, that's the whole point of pragma pack,

1555
01:30:46,000 --> 01:30:47,100
I'm not sure what you mean.

1556
01:30:48,100 --> 01:30:50,300
That flight I could you share your for credit customers.

1557
01:30:50,300 --> 01:30:54,000
EP it is, it's in the handmade here, directory already.

1558
01:30:54,500 --> 01:30:55,400
It's already

1559
01:30:57,000 --> 01:30:57,700
It's already in there.

1560
01:30:58,800 --> 01:31:02,100
so, if you, if you pre-ordered him a hero you've already got it

1561
01:31:05,400 --> 01:31:11,400
I also send it to Alan every time and I gave him permission to

1562
01:31:11,400 --> 01:31:15,700
redistribute it with for a coder but I don't know to what extent he is

1563
01:31:15,700 --> 01:31:16,400
doing that.

1564
01:31:16,700 --> 01:31:18,100
So I either

1565
01:31:20,100 --> 01:31:23,200
You can also get it there, or you can only get it here.

1566
01:31:23,200 --> 01:31:30,600
But either way, it's freely available somehow to some in one of your

1567
01:31:30,600 --> 01:31:30,800
free.

1568
01:31:30,800 --> 01:31:33,900
Or if you pre-ordered both, you definitely have it.

1569
01:31:33,900 --> 01:31:40,400
If you've only pre-ordered, if you, if you only support for coder, I

1570
01:31:40,400 --> 01:31:45,500
don't know if you get it or not, but if you preorder handmade hero,

1571
01:31:45,500 --> 01:31:46,300
then you get it.

1572
01:31:47,000 --> 01:31:47,800
That's for sure.

1573
01:31:50,200 --> 01:31:50,900
That makes sense.

1574
01:31:57,900 --> 01:32:00,900
And yeah, and like I said, I gave Alan permission to redistribute it

1575
01:32:00,900 --> 01:32:03,700
with fur coat as well, but I don't know to what extent that actually

1576
01:32:04,600 --> 01:32:09,100
happens now because he told me to distribute it originally, I said

1577
01:32:09,100 --> 01:32:11,800
just distributed for a coder, give people another reason to buy for

1578
01:32:11,800 --> 01:32:13,700
coder because I want them to support for a coder.

1579
01:32:14,000 --> 01:32:17,200
But he just said Not, Just Give It Away with handmade here as well.

1580
01:32:17,200 --> 01:32:18,200
So I was like, all right.

1581
01:32:22,600 --> 01:32:24,900
Beach and games, do you think it would be neat to save a debug UI

1582
01:32:24,900 --> 01:32:27,200
layout with torn Ellen's open as they were last?

1583
01:32:28,000 --> 01:32:33,300
So I think it would be neat but I probably won't bother what I think.

1584
01:32:33,300 --> 01:32:36,700
I probably do instead is just make it so that we can, we can do that

1585
01:32:36,700 --> 01:32:37,400
in code.

1586
01:32:37,400 --> 01:32:42,100
And I'll just make my own ones in code for that, like, we'll just have

1587
01:32:42,100 --> 01:32:45,000
a way of creating extra views and code, that's what I probably will

1588
01:32:45,000 --> 01:32:45,400
do.

1589
01:32:46,200 --> 01:32:48,900
But again, if we were, if this were like more of a commercial system,

1590
01:32:48,900 --> 01:32:51,600
like, we were trying to do, like here's this thing and we're shipping.

1591
01:32:51,600 --> 01:32:51,800
The

1592
01:32:51,900 --> 01:32:55,000
Debug system as a separate thing than you would for sure want to do

1593
01:32:55,000 --> 01:32:55,500
that.

1594
01:32:56,500 --> 01:32:57,100
Right.

1595
01:33:02,900 --> 01:33:07,500
Announcing in the chat that if you are at, if you subscribe to the ten

1596
01:33:07,500 --> 01:33:13,200
dollar patreon for for coder then you you get the four coder Casey as

1597
01:33:13,200 --> 01:33:13,500
well.

1598
01:33:13,700 --> 01:33:15,700
So basically there's two ways you can get it.

1599
01:33:16,000 --> 01:33:19,200
One is by supporting for a coder at the $10 a month to your.

1600
01:33:19,200 --> 01:33:22,400
And the other is, if you pre-ordered handmade hero, both of them will

1601
01:33:22,400 --> 01:33:22,700
come with.

1602
01:33:22,700 --> 01:33:24,000
It sounds like

1603
01:33:30,500 --> 01:33:33,100
and yeah, you can use it with the five dollar build.

1604
01:33:43,300 --> 01:33:43,700
so,

1605
01:33:49,600 --> 01:33:51,600
all right, I'm going to call it a day.

1606
01:33:52,700 --> 01:33:53,600
I'm getting tired.

1607
01:33:55,100 --> 01:33:57,900
Tired, I don't know what's going on here.

1608
01:33:59,800 --> 01:34:00,400
There we go.

1609
01:34:00,900 --> 01:34:02,600
All right, close you down.

1610
01:34:03,000 --> 01:34:04,300
Thank you, everyone for joining me.

1611
01:34:04,300 --> 01:34:05,500
For another episode of handmade here.

1612
01:34:05,500 --> 01:34:06,800
It's going to put the coding with you.

1613
01:34:06,800 --> 01:34:11,400
As always, if you want to follow along at home, you can always

1614
01:34:11,400 --> 01:34:13,800
pre-order the game at hand made here at org and it comes the source

1615
01:34:13,800 --> 01:34:16,200
code, so that you can play around with it yourself.

1616
01:34:16,200 --> 01:34:20,300
We also form site, which you can go to, if you would like to ask

1617
01:34:20,300 --> 01:34:23,000
questions, we have a patreon page, you can use to support the video

1618
01:34:23,000 --> 01:34:23,200
series.

1619
01:34:23,200 --> 01:34:25,800
We have a tweet bot, the tweets, the schedule at you.

1620
01:34:26,900 --> 01:34:29,400
And if you are interested in the editor, we were just talking about

1621
01:34:29,400 --> 01:34:29,500
which

1622
01:34:29,600 --> 01:34:34,300
The one I use on stream, you can type for a coder into Google and it

1623
01:34:34,300 --> 01:34:35,800
is available.

1624
01:34:36,200 --> 01:34:42,200
If you support Allen's patreon, then you can get a copy of it.

1625
01:34:42,200 --> 01:34:46,700
Now while it's still in Alpha, the one that we're using is the $5,

1626
01:34:46,800 --> 01:34:50,100
tier one that allows you to build your own customizations in C, which

1627
01:34:50,100 --> 01:34:51,100
is pretty rad.

1628
01:34:51,800 --> 01:34:54,500
So, I would say, definitely check that out.

1629
01:34:54,500 --> 01:34:58,300
Like, I answered just a few minutes ago, it's at the point now where I

1630
01:34:58,300 --> 01:34:59,200
actually use it instead of

1631
01:34:59,600 --> 01:34:59,900
X.

1632
01:35:01,000 --> 01:35:05,000
Everywhere at the moment and there's only a few things really left in

1633
01:35:05,000 --> 01:35:06,900
it that are not as good as emacs.

1634
01:35:06,900 --> 01:35:10,300
And so for the things that I use anyway and so it's rapidly

1635
01:35:10,300 --> 01:35:14,500
approaching kind of a no-brainer switch and I don't think it's going

1636
01:35:14,500 --> 01:35:16,400
to take that much longer for it to get there.

1637
01:35:18,100 --> 01:35:21,600
The big reason that I changed to it actually was because emacs when I

1638
01:35:21,600 --> 01:35:25,400
decided to switch to a modal editing layout Emax is awful at that.

1639
01:35:25,400 --> 01:35:28,400
It was just it was horrific and there's so many bugs I encountered

1640
01:35:28,600 --> 01:35:30,600
trying to make a list thing that would do

1641
01:35:30,800 --> 01:35:34,900
modal that I just couldn't, I just couldn't do it.

1642
01:35:35,100 --> 01:35:38,500
So I switched it for a coder and it's been much smoother and so like I

1643
01:35:38,500 --> 01:35:42,100
said, now the only things are a couple things that aren't quite as

1644
01:35:42,100 --> 01:35:45,200
good as emacs is version of the features and when those are done than

1645
01:35:45,200 --> 01:35:50,000
it's just pretty much, it's pretty much just better across the board,

1646
01:35:50,100 --> 01:35:52,700
and it's definitely better for modal because oh, my God, trying to use

1647
01:35:52,700 --> 01:35:55,200
emacs and modal was was a nightmare.

1648
01:35:55,900 --> 01:35:58,800
Anyway, tomorrow is a day off.

1649
01:35:58,900 --> 01:35:59,800
It is Molly.

1650
01:36:00,000 --> 01:36:01,100
That movie night tomorrow.

1651
01:36:01,100 --> 01:36:04,300
So I will not be streaming handmade hero, but I will be back on

1652
01:36:04,300 --> 01:36:04,800
Wednesday.

1653
01:36:04,800 --> 01:36:07,000
And again, if you ever want to know what schedule is, you can always

1654
01:36:07,000 --> 01:36:07,700
check the tweetbot.

1655
01:36:07,700 --> 01:36:09,000
It tells you what the schedule is.

1656
01:36:09,800 --> 01:36:11,900
If you want to know what the week schedule is or even that day

1657
01:36:11,900 --> 01:36:13,400
schedule, it'll tell you if we're on or off.

1658
01:36:13,400 --> 01:36:14,400
So check that out.

1659
01:36:14,500 --> 01:36:15,100
I'll be back here.

1660
01:36:15,100 --> 01:36:15,500
Wednesday.

1661
01:36:15,500 --> 01:36:16,000
5:00 p.m.

1662
01:36:16,000 --> 01:36:20,500
Pacific Daylight time until then everyone, please have fun coding and

1663
01:36:20,500 --> 01:36:21,600
I will see you on the internet.

1664
01:36:21,800 --> 01:36:22,400
Take it easy.

