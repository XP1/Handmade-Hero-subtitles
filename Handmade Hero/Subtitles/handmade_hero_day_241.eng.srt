1
00:00:01,500 --> 00:00:03,900
Hello everyone and welcome to handmade here at the show.

2
00:00:03,900 --> 00:00:08,600
We could a complete game live on stream, two things.

3
00:00:08,600 --> 00:00:11,800
One I have been asked and I don't necessarily know specifically why.

4
00:00:11,800 --> 00:00:17,800
But I have been asked to issue a reminder to folks that the source

5
00:00:17,800 --> 00:00:20,900
code to handmade hero, which comes with a pre-order, is not in the

6
00:00:20,900 --> 00:00:24,700
public domain yet, it is commercial source code and you're not allowed

7
00:00:24,700 --> 00:00:28,600
to redistribute it, as you can see down here.

8
00:00:28,600 --> 00:00:30,100
There is actually a thing that says

9
00:00:30,200 --> 00:00:33,400
This specifically, it's how it sort of could be license and it says

10
00:00:33,400 --> 00:00:36,200
that it will become public domain after two years.

11
00:00:36,600 --> 00:00:40,200
So basically, two years after the game is released, it'll be public

12
00:00:40,200 --> 00:00:40,700
domain.

13
00:00:41,700 --> 00:00:45,800
I should say in, at least two years, meaning I could choose to release

14
00:00:45,800 --> 00:00:51,100
it sooner, but I can't choose to release it any later than that.

15
00:00:52,100 --> 00:00:52,700
So there you go.

16
00:00:52,700 --> 00:00:54,000
Public service announcement

17
00:00:55,100 --> 00:00:56,800
for whatever reason it was requested.

18
00:00:57,400 --> 00:01:01,700
And the other thing I wanted to mention is I'm awfully, sick, feeling

19
00:01:01,700 --> 00:01:02,200
today.

20
00:01:02,600 --> 00:01:07,600
So if I decide to, you know, just vomit all over the screen in the

21
00:01:07,600 --> 00:01:12,200
middle of this stream, that is just how that's going to go.

22
00:01:12,700 --> 00:01:19,200
That is not me, reacting to the wonders of Visual Studio, I've used to

23
00:01:19,200 --> 00:01:22,600
it, and it no longer nauseates me in the way that it probably should.

24
00:01:22,900 --> 00:01:24,500
This is actually just legitimate not

25
00:01:24,700 --> 00:01:27,800
You're coming from, you know a virus or something like that.

26
00:01:27,800 --> 00:01:33,400
I have not been sick in like a year so I certainly can't complain.

27
00:01:34,200 --> 00:01:36,700
It was not like when I first started handmade here and I got sick like

28
00:01:36,700 --> 00:01:37,700
three times in a row.

29
00:01:38,300 --> 00:01:42,900
So anyway I want to go ahead and just dive into what we were doing

30
00:01:42,900 --> 00:01:44,600
yesterday and just get it finished up.

31
00:01:44,800 --> 00:01:49,900
It was basically doing some an architecture shift for how we have the

32
00:01:49,900 --> 00:01:51,000
render isolated.

33
00:01:51,000 --> 00:01:52,600
It's not a particularly difficult one.

34
00:01:52,600 --> 00:01:54,500
I explained it yesterday but we just

35
00:01:54,600 --> 00:01:58,800
Have to kind of finish up that architectural shift.

36
00:01:58,900 --> 00:02:02,200
And so it's just, you know, it's just fussing, it's just a bunch of

37
00:02:02,200 --> 00:02:05,000
fussing, it's the kind of fussing you need to do when you decide to

38
00:02:05,200 --> 00:02:08,100
pull some code out from, you know, place that it used to be.

39
00:02:09,300 --> 00:02:10,800
So I'm going to go ahead and get started on that.

40
00:02:12,300 --> 00:02:16,800
And if you are trying to follow along at home today is day 2 41.

41
00:02:16,800 --> 00:02:19,900
So you want to start with a 240s source code.

42
00:02:19,900 --> 00:02:22,400
And if you remember correctly, we didn't want anyone to be confused

43
00:02:22,400 --> 00:02:25,300
because normally almost every day, which is kind of weird.

44
00:02:25,300 --> 00:02:27,900
Because a lot of times isn't true and Commercial Source spaces, code

45
00:02:27,900 --> 00:02:28,400
bases.

46
00:02:28,800 --> 00:02:32,500
But after we've never really ended an hour without stuff that still

47
00:02:32,500 --> 00:02:33,100
worked.

48
00:02:33,600 --> 00:02:36,600
But we yesterday since we're in the middle of a refactor, we actually

49
00:02:36,600 --> 00:02:37,200
put

50
00:02:39,200 --> 00:02:42,200
We actually put a notice in here that prevents you from building so

51
00:02:42,200 --> 00:02:44,300
that you can know that we're doing that.

52
00:02:45,300 --> 00:02:49,700
And so now I'm going to go ahead and remove that and we'll be back to

53
00:02:49,800 --> 00:02:51,100
what we were working on before.

54
00:02:51,600 --> 00:02:52,100
Right?

55
00:02:53,100 --> 00:02:53,300
Okay.

56
00:02:53,300 --> 00:02:58,300
So really all we have to do here besides the inevitable debugging of

57
00:02:58,300 --> 00:02:59,800
making sure all our changes and

58
00:03:00,000 --> 00:03:03,600
really work which I'm sure we'll have some of that to do later on,

59
00:03:04,100 --> 00:03:06,800
really, the only thing we had left to do in terms of actually just

60
00:03:06,800 --> 00:03:10,800
getting everything compiling properly, with the change state of how we

61
00:03:10,800 --> 00:03:15,300
wanted things to work, is the win32 platform code, which now calls the

62
00:03:15,300 --> 00:03:16,400
renderer directly,

63
00:03:18,400 --> 00:03:22,500
That code needs to be fixed because we have not finished it yet so you

64
00:03:22,500 --> 00:03:23,700
can kind of see in here.

65
00:03:23,700 --> 00:03:27,000
It was still working off of stuff like the sort entry stuff, taking a

66
00:03:27,000 --> 00:03:27,800
memory Arena.

67
00:03:27,900 --> 00:03:31,800
We want to just be able to pass 10th memory in directly to it now.

68
00:03:32,600 --> 00:03:36,600
And so what I'd like to do is just go ahead and finish that clean up

69
00:03:36,800 --> 00:03:40,700
and then we can move on to the debugging phase of things which is

70
00:03:41,000 --> 00:03:42,000
where we'll finish today.

71
00:03:42,900 --> 00:03:47,200
All right, so when we call our sword entries call, right?

72
00:03:47,600 --> 00:03:50,400
When we have to actually display stuff, we go ahead and we do the sort

73
00:03:50,400 --> 00:03:53,800
here, we need to pass some temporary memory so that the Sorting can

74
00:03:53,800 --> 00:03:54,400
occur.

75
00:03:54,700 --> 00:03:58,000
So we need like temp memory, or sort memory, right?

76
00:03:58,000 --> 00:04:02,800
Because we don't currently sort in place and our sort of temporary

77
00:04:02,800 --> 00:04:06,300
assessment, although we didn't really do any, you know, particularly

78
00:04:07,200 --> 00:04:08,700
Fancy work here or anything.

79
00:04:09,300 --> 00:04:15,100
But one of the things that we did was, we said, well, it looks like

80
00:04:15,100 --> 00:04:18,100
pretty much no matter what we end up doing, for sorting, it'll

81
00:04:18,100 --> 00:04:21,300
probably whether it's Radix or merge or whatever else.

82
00:04:22,600 --> 00:04:25,600
It looks like, it'll probably be faster with temp space, like doing it

83
00:04:25,600 --> 00:04:27,500
in place, generally is just slower.

84
00:04:27,700 --> 00:04:31,900
And so since we can easily afford the extra space, it's not, we're not

85
00:04:31,900 --> 00:04:36,900
talking about GB, we're talking about MB or less since we can probably

86
00:04:37,100 --> 00:04:39,400
Afford the space on just about anywhere, we're going to be running

87
00:04:39,400 --> 00:04:40,000
this game.

88
00:04:40,700 --> 00:04:42,600
We should probably use temp space.

89
00:04:42,600 --> 00:04:46,000
So I'd like to always provide temp space to the sort thing.

90
00:04:46,000 --> 00:04:49,600
And if we want to do something that sorts in place, sometimes as an

91
00:04:49,600 --> 00:04:50,700
exercise, that's fine.

92
00:04:50,700 --> 00:04:53,900
But I think our final sort will almost certainly want some temporary

93
00:04:53,900 --> 00:04:55,500
memory for Speed purposes.

94
00:04:56,100 --> 00:04:58,200
So I'm going to say that there's like temp.

95
00:04:59,300 --> 00:05:03,500
Or sort memory that comes in here when we call win32 Slade, buffer

96
00:05:03,500 --> 00:05:03,900
window.

97
00:05:03,900 --> 00:05:07,900
And that way, when we call sort entries, it just gets some sort memory

98
00:05:09,400 --> 00:05:13,700
that it can use and so it won't do any of these things here.

99
00:05:15,400 --> 00:05:20,200
And it'll also take a look here at guess there's nothing really the

100
00:05:20,200 --> 00:05:20,400
temp.

101
00:05:20,400 --> 00:05:24,900
Space is just looks like this put that in there for now so it comes in

102
00:05:24,900 --> 00:05:25,100
here.

103
00:05:25,100 --> 00:05:26,300
We got the short memory.

104
00:05:27,400 --> 00:05:28,300
I'm not sure.

105
00:05:28,300 --> 00:05:28,900
Just temp space.

106
00:05:29,100 --> 00:05:30,300
The call for there.

107
00:05:30,600 --> 00:05:33,000
So we'll just replace that with certain they're made for now.

108
00:05:34,600 --> 00:05:35,200
There we go.

109
00:05:35,500 --> 00:05:35,900
I don't know why.

110
00:05:35,900 --> 00:05:40,000
This stuff is still here, and now we'll recompile and see where we're

111
00:05:40,000 --> 00:05:40,400
at.

112
00:05:40,600 --> 00:05:41,100
All right.

113
00:05:42,200 --> 00:05:45,300
So on start entries, the push, buffer element count.

114
00:05:45,300 --> 00:05:47,700
Apparently, not a member of render group.

115
00:05:47,700 --> 00:05:50,100
Hey, that's not an accident.

116
00:05:50,100 --> 00:05:52,900
In fact, these are not really supposed to be taking render group

117
00:05:52,900 --> 00:05:53,600
anymore.

118
00:05:53,900 --> 00:05:55,900
All of this stuff that was taking render group.

119
00:05:55,900 --> 00:05:59,500
Previously, should now be taking one of those command sets.

120
00:05:59,500 --> 00:05:59,700
Right?

121
00:05:59,700 --> 00:05:59,900
Because

122
00:06:00,000 --> 00:06:02,700
All of this stuff again, we kind of pull it all out.

123
00:06:02,700 --> 00:06:05,600
So we really don't want to see render group out here anymore.

124
00:06:05,600 --> 00:06:08,600
Render group is a thing that the game uses to batch up

125
00:06:09,500 --> 00:06:10,800
stuff that it wants to render.

126
00:06:11,100 --> 00:06:13,500
So we're really talking about game render commands.

127
00:06:15,800 --> 00:06:19,400
And so render group, anything, that was happening in here in render

128
00:06:19,400 --> 00:06:19,900
group.

129
00:06:20,100 --> 00:06:23,600
We would like it to, to instead happen.

130
00:06:24,900 --> 00:06:25,300
Oops.

131
00:06:28,000 --> 00:06:32,500
Although that probably actually is what we would want to call this

132
00:06:32,500 --> 00:06:37,500
function instead of render group to Output, but that's fine.

133
00:06:37,900 --> 00:06:40,500
So maybe this is, you know what, maybe let's just change it while

134
00:06:40,500 --> 00:06:41,100
we're in here.

135
00:06:42,100 --> 00:06:43,300
Let's let me see.

136
00:06:47,900 --> 00:06:49,800
Let me see.

137
00:06:51,400 --> 00:06:52,800
Look a little too high up.

138
00:06:56,600 --> 00:06:58,000
Just not not adjusted.

139
00:06:58,000 --> 00:07:00,400
Well, I need to be better adjusted.

140
00:07:02,000 --> 00:07:02,500
There we go.

141
00:07:05,700 --> 00:07:06,600
There we go.

142
00:07:07,100 --> 00:07:07,800
Much better.

143
00:07:10,100 --> 00:07:16,800
All right, so, yeah, like I was saying we've got, we've got sort of

144
00:07:16,800 --> 00:07:20,100
this thing that will switch between, which way we want to render.

145
00:07:20,100 --> 00:07:24,300
And now, it's really probably not correct to call it render group to

146
00:07:24,300 --> 00:07:26,000
Output or any of these things, right?

147
00:07:26,000 --> 00:07:30,100
Talbert appropriate, we probably just want to call it, you know, tiled

148
00:07:30,600 --> 00:07:33,200
commands render or something like this.

149
00:07:33,800 --> 00:07:35,000
And that will take

150
00:07:37,400 --> 00:07:40,800
Game render commands.

151
00:07:42,100 --> 00:07:48,000
Like so and yeah, that that feels to me like a better idea.

152
00:07:48,000 --> 00:07:49,800
So here's our tiles command render.

153
00:07:49,800 --> 00:07:50,400
There we go.

154
00:07:50,400 --> 00:07:53,000
That's going to take the commands it.

155
00:07:53,100 --> 00:07:55,500
And oh yeah, and the render queue whoops.

156
00:07:56,200 --> 00:07:57,500
So I didn't mean to delete that guy.

157
00:07:57,500 --> 00:07:58,100
That's fine.

158
00:07:58,100 --> 00:07:59,100
You can take that Q.

159
00:08:00,000 --> 00:08:02,200
It's this guy.

160
00:08:04,600 --> 00:08:05,600
That's going to be different.

161
00:08:06,200 --> 00:08:08,100
And so that's all good.

162
00:08:10,100 --> 00:08:14,100
And then when this guy calls through again, he's not just, just in the

163
00:08:14,100 --> 00:08:17,400
exact same way, he's not going to do any of them.

164
00:08:18,800 --> 00:08:23,200
You know, and we don't need this guy anymore either actually so he's

165
00:08:23,200 --> 00:08:26,000
not going to do any of the stuff with render group anymore either.

166
00:08:26,000 --> 00:08:29,900
He's going to exclusively do stuff with those commands.

167
00:08:29,900 --> 00:08:34,799
So the work thing is going to take the commands and it looks like he

168
00:08:34,799 --> 00:08:36,600
doesn't really touch anything else, so that's fine.

169
00:08:37,200 --> 00:08:42,600
So, here is commands and tile render work where we, I don't actually

170
00:08:42,600 --> 00:08:45,300
know, that's probably still defined over in render group.

171
00:08:45,900 --> 00:08:48,200
Let's see tiled render work.

172
00:08:48,200 --> 00:08:48,400
Yeah.

173
00:08:48,500 --> 00:08:52,100
Yeah, so this time render work stuff to that's going to come out here.

174
00:08:52,100 --> 00:08:55,000
Presumably, we could make a separate H file if we wanted.

175
00:08:55,000 --> 00:08:58,100
I'm not sure if we want to or not, but this is going to be in game.

176
00:08:58,100 --> 00:08:59,800
This is gonna be game rendered.

177
00:09:00,000 --> 00:09:03,300
Ants and there's that loaded bitmap output Target in the clip.

178
00:09:03,300 --> 00:09:08,800
Rect so this is the stuff that the, the actual renderer uses now,

179
00:09:09,500 --> 00:09:09,800
okay?

180
00:09:09,800 --> 00:09:11,400
So let's see.

181
00:09:13,100 --> 00:09:14,400
This is our sort memory.

182
00:09:14,400 --> 00:09:17,200
This it wants to have it cast to that, so that's fine.

183
00:09:19,600 --> 00:09:24,000
Inside here we've got our push before elements.

184
00:09:24,000 --> 00:09:24,700
And that stuff, okay?

185
00:09:24,700 --> 00:09:27,400
So all of our render group stuff again, is just going through command.

186
00:09:27,400 --> 00:09:32,400
So that's just a case of telling it to use something different here.

187
00:09:33,100 --> 00:09:34,500
And this will, of course, be

188
00:09:36,600 --> 00:09:38,800
Render commands to pit map.

189
00:09:39,500 --> 00:09:43,500
That's probably the right phrase for this, okay?

190
00:09:45,900 --> 00:09:53,500
And yeah, you're like, that's really what we need for the most part.

191
00:09:55,000 --> 00:09:56,800
So platform add entry.

192
00:09:56,800 --> 00:10:00,100
So this is nice because now we can also just cut we can really, we

193
00:10:00,100 --> 00:10:02,500
don't really have to access platform anymore.

194
00:10:03,300 --> 00:10:08,200
We can just use the add entry called probably directly, right?

195
00:10:08,200 --> 00:10:10,700
We wouldn't need it to be exported to us because we know we're being

196
00:10:10,700 --> 00:10:17,200
compiled as part of the system that said, you know, we can continue to

197
00:10:17,200 --> 00:10:21,100
go through that platform that concept if we wanted to.

198
00:10:21,800 --> 00:10:23,900
And I'm not sure which way we want to do it.

199
00:10:24,400 --> 00:10:26,400
Relatively straightforward to make it work.

200
00:10:26,400 --> 00:10:31,000
Both ways to make it irrelevant like, which one you happen to go

201
00:10:31,000 --> 00:10:31,500
through.

202
00:10:31,900 --> 00:10:35,700
Because if you remember, the way that we did that is we have the

203
00:10:35,700 --> 00:10:40,500
platform thing was a global variable with the platform API in it.

204
00:10:41,400 --> 00:10:43,600
And so we've got that same thing.

205
00:10:47,200 --> 00:10:51,600
We should have that same thing available if we want to outside of it,

206
00:10:51,900 --> 00:10:52,200
right?

207
00:10:52,200 --> 00:10:54,500
Because that's in that's in

208
00:10:56,600 --> 00:10:58,000
Hamid platform.sh.

209
00:11:02,300 --> 00:11:02,600
Right.

210
00:11:02,600 --> 00:11:07,200
That that platform API, we create one of those for our.

211
00:11:07,200 --> 00:11:09,800
We must, I mean, how do we not create one of those?

212
00:11:09,800 --> 00:11:10,400
Oh, you know what?

213
00:11:10,400 --> 00:11:13,500
It's probably, it's welded into this guy.

214
00:11:13,500 --> 00:11:16,400
So it's in-game memory there, right?

215
00:11:16,900 --> 00:11:21,900
So if we wanted to, we could easily take the platform API there and

216
00:11:22,100 --> 00:11:25,000
have that be available outside in here as well.

217
00:11:25,500 --> 00:11:28,300
So that, you know, like the render and stuff could get at it.

218
00:11:28,300 --> 00:11:29,600
Meaning, if we wanted to

219
00:11:31,400 --> 00:11:35,600
We could make the platform API be something that's available out here.

220
00:11:36,700 --> 00:11:40,200
So, maybe we'll just do that, because that way, we don't have any kind

221
00:11:40,200 --> 00:11:46,500
of weirdness with, with, you know, when we move code back and forth

222
00:11:46,500 --> 00:11:50,300
between the two, you know, it doesn't matter.

223
00:11:52,100 --> 00:11:52,800
Does that make sense?

224
00:11:53,100 --> 00:11:55,800
It's basically, like, just makes it so that it doesn't matter where

225
00:11:55,800 --> 00:11:56,400
code exists.

226
00:11:56,400 --> 00:11:58,700
They can still call through it if they want to.

227
00:11:58,800 --> 00:11:59,900
That way, we can cut and paste.

228
00:12:00,000 --> 00:12:03,700
Code into the platform layer and out of the platform layer and we

229
00:12:03,700 --> 00:12:06,600
don't have to like poured it every time or change the way that it

230
00:12:06,600 --> 00:12:07,400
works, you know.

231
00:12:07,900 --> 00:12:09,600
And that seems like a good idea to me.

232
00:12:11,800 --> 00:12:13,700
Okay, so let's see.

233
00:12:13,700 --> 00:12:21,200
Temper Inna is, it's going on with temporary NE that we don't really

234
00:12:21,200 --> 00:12:22,000
want to use it all.

235
00:12:22,000 --> 00:12:24,700
We want that to just be our sort member here, right?

236
00:12:24,700 --> 00:12:26,700
So our sort memory comes in and we just use it.

237
00:12:30,700 --> 00:12:32,800
Render to opengl identifier.

238
00:12:32,800 --> 00:12:33,900
Not found.

239
00:12:34,200 --> 00:12:37,700
Well, we should have opengl rendering support here summer.

240
00:12:41,000 --> 00:12:48,500
So it's this, let's see, enter commands opengl renderer commands like

241
00:12:48,500 --> 00:12:49,000
that.

242
00:12:50,200 --> 00:12:54,100
So this would probably be like software.

243
00:12:56,100 --> 00:12:57,000
Render commands.

244
00:12:59,000 --> 00:12:59,600
You know, I'm saying?

245
00:13:01,300 --> 00:13:02,100
That seems better.

246
00:13:03,000 --> 00:13:05,200
All right, so there's open gel, there's yeah, there's that.

247
00:13:05,200 --> 00:13:07,700
And then I can just sort of come in here and say, okay, tell commands

248
00:13:07,700 --> 00:13:10,900
render is actually called out and then they're uniformly named, it

249
00:13:10,900 --> 00:13:11,600
seems reasonable.

250
00:13:12,600 --> 00:13:16,900
All right, so then we get an output Target, the output Target is going

251
00:13:16,900 --> 00:13:18,500
to be our Global bitmap.

252
00:13:18,500 --> 00:13:19,400
I believe.

253
00:13:19,400 --> 00:13:19,900
Right?

254
00:13:20,400 --> 00:13:24,100
Is probably the thing that we want to Target there and that and then

255
00:13:24,100 --> 00:13:25,100
we would want to

256
00:13:26,400 --> 00:13:31,300
Yeah, and then we would want that to be workable as well.

257
00:13:31,300 --> 00:13:36,400
So let me take a look here at where we're at opengl display bitmap.

258
00:13:37,300 --> 00:13:42,700
So, display bitmap via, opengl is not an actual thing.

259
00:13:43,000 --> 00:13:47,100
We're talking actually about this is what we want and here is all of

260
00:13:47,100 --> 00:13:51,800
these guys with tight memory pitch window, with window height, right?

261
00:13:52,700 --> 00:13:55,500
And software, renderer commands, that guy takes

262
00:13:57,400 --> 00:14:00,200
That guy takes a loaded bitmap as the output Target.

263
00:14:00,200 --> 00:14:01,900
I don't think we have one of those.

264
00:14:04,000 --> 00:14:08,400
Exactly what we have instead is a win32 off-screen buffer which is the

265
00:14:08,400 --> 00:14:10,200
global back buffer, right?

266
00:14:11,300 --> 00:14:16,300
And so that guy the global back buffer, we can just use directly to.

267
00:14:17,200 --> 00:14:20,600
We can we can just basically make a loaded bitmap that points into

268
00:14:20,600 --> 00:14:23,500
that because it has all the same stuff, right?

269
00:14:23,500 --> 00:14:26,700
It's got its got the exact same stuff in it.

270
00:14:27,300 --> 00:14:28,700
So the global back buffer,

271
00:14:30,300 --> 00:14:32,600
And the output Target we can sort of do.

272
00:14:32,600 --> 00:14:37,300
Both of them output Target, memory equals Global back buffered up

273
00:14:37,300 --> 00:14:37,800
memory.

274
00:14:39,500 --> 00:14:43,200
And then we can just do like, Whit height pitch.

275
00:14:49,800 --> 00:14:51,200
and I think,

276
00:14:53,900 --> 00:14:56,400
That should be roughly what we want there.

277
00:14:57,200 --> 00:14:59,800
Similarly, we can kind of just do this.

278
00:15:01,200 --> 00:15:01,800
Now.

279
00:15:07,100 --> 00:15:09,400
And that will do our bitmap display for us as well.

280
00:15:09,400 --> 00:15:11,400
So that's now plumbing.

281
00:15:11,400 --> 00:15:13,100
Plumbing wise, correct?

282
00:15:14,700 --> 00:15:19,000
This stuff I guess is really buffer is just output Target.

283
00:15:19,000 --> 00:15:24,400
I could I suppose just say buffer Arrow output Target Dot

284
00:15:27,300 --> 00:15:29,700
And I think that's roughly, correct.

285
00:15:34,800 --> 00:15:35,200
oh,

286
00:15:37,000 --> 00:15:39,400
So that's got to be from the go back before because we don't keep that

287
00:15:39,400 --> 00:15:40,300
anywhere else.

288
00:15:41,200 --> 00:15:42,400
Let's see here.

289
00:15:44,500 --> 00:15:45,100
All right.

290
00:15:48,100 --> 00:15:50,500
With memory.

291
00:15:52,400 --> 00:15:58,300
And these I guess maybe I should have those be the global back buffer

292
00:15:58,300 --> 00:15:59,500
as well instead.

293
00:15:59,500 --> 00:16:01,500
Like maybe that's a little bit more correct.

294
00:16:01,600 --> 00:16:05,800
Since it has to be that since we have to have the input info for it,

295
00:16:06,400 --> 00:16:07,200
we could replace

296
00:16:10,300 --> 00:16:16,500
Seer, I want to do output Target dot with global.

297
00:16:24,800 --> 00:16:28,000
Global Tobacco, you know what's probably back buffer with the

298
00:16:28,000 --> 00:16:31,500
lowercase b, because I'm the worst at being consistent with my camo

299
00:16:31,500 --> 00:16:32,100
caps.

300
00:16:36,000 --> 00:16:38,200
One more time, there we go.

301
00:16:39,400 --> 00:16:43,300
All right, so we don't have this anymore, it's gone because now we

302
00:16:43,300 --> 00:16:44,500
don't pass that through.

303
00:16:45,100 --> 00:16:48,400
And so I don't even know if that was still in here, it is.

304
00:16:48,400 --> 00:16:53,800
So that's got to go away goodbye because we don't call that anymore.

305
00:16:53,800 --> 00:16:57,300
In now went through to display Byford window, that's got everything,

306
00:16:57,300 --> 00:16:57,700
an easy set.

307
00:16:57,700 --> 00:16:59,800
The temp memory now, right?

308
00:16:59,800 --> 00:17:04,400
Because the win32 display buffer and window has to take that temp

309
00:17:04,400 --> 00:17:05,599
memory, right?

310
00:17:05,800 --> 00:17:08,099
And that's to take a couple things to it as to take the render queue.

311
00:17:08,099 --> 00:17:08,900
Exactly the highwomen.

312
00:17:09,000 --> 00:17:09,900
Priority queue.

313
00:17:10,599 --> 00:17:12,000
So, it's got to take the render queue.

314
00:17:12,000 --> 00:17:14,800
It's got to take the render commands and use the device context window

315
00:17:14,800 --> 00:17:17,599
width and height and then it needs attempt memory.

316
00:17:18,700 --> 00:17:22,700
So we gotta pass the temp, memory here and the temp memory.

317
00:17:22,700 --> 00:17:26,500
Really wants to be a thing that's however, big it needs to be for the

318
00:17:26,500 --> 00:17:28,300
render commands, right?

319
00:17:29,000 --> 00:17:34,400
And so really, I guess what we want here, is something like this is,

320
00:17:34,400 --> 00:17:35,700
this is our sort memory.

321
00:17:35,900 --> 00:17:38,800
We want something like, okay, if

322
00:17:39,000 --> 00:17:40,800
You know, the sort memory.

323
00:17:43,300 --> 00:17:48,600
You know, needed sort memory size and current sort memory size.

324
00:17:52,700 --> 00:17:58,000
We could say, if the amount of syrup member, we currently have is less

325
00:17:58,000 --> 00:17:59,100
than the amount we need.

326
00:17:59,100 --> 00:17:59,800
Then we'll get the

327
00:18:00,000 --> 00:18:02,000
What we need instead, right?

328
00:18:02,000 --> 00:18:08,100
So, we'll virtual free and virtual Alec Neu sort memory.

329
00:18:08,800 --> 00:18:11,700
So that way, we'll make sure we always keep some.

330
00:18:11,800 --> 00:18:14,800
We always grab as much memory as we need.

331
00:18:14,800 --> 00:18:20,700
So, you know, we, we could just say we just fail or don't sort if we

332
00:18:20,700 --> 00:18:22,700
go over is the other option.

333
00:18:23,500 --> 00:18:28,400
I'm not sure which one of those makes more sense dynamically growing.

334
00:18:34,100 --> 00:18:35,500
It depends what you want to do.

335
00:18:35,900 --> 00:18:40,100
Dynamically growing means that probably you're always going to be safe

336
00:18:40,100 --> 00:18:43,600
on most machines, but it does mean that, you know, in theory, you

337
00:18:43,600 --> 00:18:46,000
could overflow your memory for some reason, you do so many things and

338
00:18:46,000 --> 00:18:48,900
need to sort them that you allocated more memory than you were

339
00:18:48,900 --> 00:18:51,000
expecting or something.

340
00:18:53,400 --> 00:18:54,700
I'm not sure that's really possible.

341
00:18:54,700 --> 00:18:57,100
And we could always, we always know what the upper bound is because it

342
00:18:57,100 --> 00:19:00,700
has to fit inside there, but I'm going to do it as allow it to

343
00:19:00,700 --> 00:19:01,300
dynamically grow.

344
00:19:01,300 --> 00:19:03,800
Because like I said, I wanted to show you guys later.

345
00:19:04,000 --> 00:19:06,400
To make the Arena's grow dynamically as well.

346
00:19:06,400 --> 00:19:10,400
And so, I feel like we probably want to just make sure that everything

347
00:19:10,400 --> 00:19:14,300
can be flexible if you want to, and then turn it off if we want to

348
00:19:14,300 --> 00:19:18,300
lock it to a certain size because it's we could always just stop doing

349
00:19:18,300 --> 00:19:19,700
the if, right?

350
00:19:19,800 --> 00:19:23,800
And don't render when we can't sort or something.

351
00:19:25,700 --> 00:19:30,400
Anyway, so we'll free the sort memory and then will allocate the sort

352
00:19:30,400 --> 00:19:33,100
memory again.

353
00:19:34,800 --> 00:19:35,400
That makes sense.

354
00:19:36,400 --> 00:19:39,500
And so that's really all I wanted to be able to do.

355
00:19:39,500 --> 00:19:42,200
So basically like we would say, okay the current certain memories.

356
00:19:42,300 --> 00:19:46,700
Sorry the needed sort memory size is going to be however, many render

357
00:19:46,700 --> 00:19:47,100
commands.

358
00:19:47,100 --> 00:19:48,300
There were right.

359
00:19:48,300 --> 00:19:51,100
So it's render commands push buffer, element count,

360
00:19:52,200 --> 00:19:56,300
Times the size of the tile sort entry.

361
00:19:57,800 --> 00:20:02,000
And so that is how much memory we would need to sort.

362
00:20:02,000 --> 00:20:05,300
And so if we don't have that much, we can just allocate some more.

363
00:20:06,900 --> 00:20:07,400
Right?

364
00:20:09,000 --> 00:20:13,700
And that way, once we hit our high Watermark will never allocate.

365
00:20:13,700 --> 00:20:16,800
And in fact, we can just allocate off the bat something very high and

366
00:20:16,800 --> 00:20:19,400
make sure we're in there, right?

367
00:20:20,400 --> 00:20:25,000
So yeah, we have our win32 allocate and went through to deallocate.

368
00:20:25,500 --> 00:20:29,100
I guess, I'll just call those right when three to allocate memory.

369
00:20:36,200 --> 00:20:38,700
350, allocate memory.

370
00:20:40,500 --> 00:20:44,300
Yeah, that's seems fine to me.

371
00:20:46,900 --> 00:20:49,600
okay, and so then we just have

372
00:20:51,800 --> 00:20:57,300
Our current sort memory size and let's just say that we start with

373
00:20:57,300 --> 00:20:59,800
like one megabyte of sort memory or something like this.

374
00:21:00,300 --> 00:21:03,800
Like I'm not going to waste be tuned to something later if we want,

375
00:21:03,800 --> 00:21:06,600
which is so that's more than presumably we would ever need.

376
00:21:06,700 --> 00:21:08,200
So this case would never get hit.

377
00:21:08,900 --> 00:21:17,100
And then we just say, our Ford Star sort memory equals win32 allocate

378
00:21:17,100 --> 00:21:22,600
memory current members sort size and think that's it.

379
00:21:27,800 --> 00:21:28,600
Seems reasonable.

380
00:21:29,100 --> 00:21:33,100
So yeah, that's all we need to do course, obviously, we need to do

381
00:21:33,100 --> 00:21:36,400
this before we you know, start the game running.

382
00:21:36,400 --> 00:21:39,000
Certainly so we you know we want that to be something that happens up

383
00:21:39,000 --> 00:21:44,400
here and side to know what else we would do.

384
00:21:44,400 --> 00:21:46,400
You M&M's are not defined to the platform there.

385
00:21:50,800 --> 00:21:51,600
A weird.

386
00:21:52,300 --> 00:21:52,800
Well,

387
00:21:57,800 --> 00:21:58,500
They are now.

388
00:22:02,600 --> 00:22:04,500
That's a memory size unsigned integer.

389
00:22:04,600 --> 00:22:06,000
I've been using it recently.

390
00:22:06,300 --> 00:22:08,900
I guess it's something I started doing.

391
00:22:10,600 --> 00:22:12,000
Don't know anyway.

392
00:22:12,700 --> 00:22:13,600
So let's see.

393
00:22:16,400 --> 00:22:17,900
I think we're almost there.

394
00:22:19,300 --> 00:22:22,400
I think we've got most of the things we want to do here.

395
00:22:24,700 --> 00:22:25,600
Pretty wrapped up.

396
00:22:25,600 --> 00:22:26,100
So, yeah.

397
00:22:26,100 --> 00:22:27,200
Okay, that's all good.

398
00:22:28,800 --> 00:22:29,400
Let's see.

399
00:22:29,500 --> 00:22:29,800
Needed.

400
00:22:29,800 --> 00:22:32,700
Certain memory size, etc, etc.

401
00:22:34,600 --> 00:22:35,000
Yeah.

402
00:22:37,900 --> 00:22:39,100
Yeah.

403
00:22:43,800 --> 00:22:44,600
Feels reasonable.

404
00:22:45,400 --> 00:22:47,700
I feel like you could make an argument that was okay.

405
00:22:48,400 --> 00:22:49,600
So let's see what do we got?

406
00:22:49,600 --> 00:22:52,100
For unresolved symbols draw, a rectangle quickly.

407
00:22:53,700 --> 00:22:54,700
Where is that?

408
00:22:54,800 --> 00:22:55,400
That's in here.

409
00:22:55,400 --> 00:22:57,400
So we can finally get rid of all this stuff, too.

410
00:22:57,400 --> 00:23:03,500
I think, now we should be able to just go ahead and grab this out from

411
00:23:03,500 --> 00:23:08,500
handmade hand optimized and put that in here, after draw a rectangle

412
00:23:08,500 --> 00:23:10,100
slowly, right?

413
00:23:11,800 --> 00:23:19,500
Could just put that in here and we can, you know, choose to optimize

414
00:23:19,500 --> 00:23:20,300
this or not.

415
00:23:20,700 --> 00:23:21,700
But I think we're all good.

416
00:23:21,700 --> 00:23:22,500
So here we go.

417
00:23:22,500 --> 00:23:23,100
We've got

418
00:23:24,500 --> 00:23:25,700
The ignored function stuff.

419
00:23:25,700 --> 00:23:27,200
I think this doesn't need to be there.

420
00:23:27,200 --> 00:23:35,200
Let's go ahead and compile this pixel fill nor timed block ignore time

421
00:23:35,200 --> 00:23:35,900
block.

422
00:23:42,100 --> 00:23:42,600
We go.

423
00:23:43,400 --> 00:23:48,200
So now we're compiling and in here, we can go ahead and get rid of

424
00:23:48,200 --> 00:23:50,100
half of the optimize thing in here.

425
00:23:50,100 --> 00:23:57,200
I believe this guy I think we can just get rid of that for the time

426
00:23:57,200 --> 00:23:59,600
being because now we have the hardware renderer

427
00:24:00,300 --> 00:24:04,000
So if we want fast rendering in a debug build, we could always just

428
00:24:04,000 --> 00:24:07,500
use the hardware renderer and we don't have to worry about having a

429
00:24:07,500 --> 00:24:09,500
special code thing.

430
00:24:09,500 --> 00:24:13,700
That forces something to always be optimized, which seems like good,

431
00:24:13,900 --> 00:24:14,200
right?

432
00:24:14,200 --> 00:24:16,500
Because now we can just build the whole thing and optimize.

433
00:24:16,500 --> 00:24:20,200
If we want to see how fast the software rasterizer runs, we don't have

434
00:24:20,200 --> 00:24:23,200
to always have that because we can't even do any development if we

435
00:24:23,200 --> 00:24:25,000
don't have an optimized, right?

436
00:24:25,600 --> 00:24:27,600
So that seems like a pretty good thing to me.

437
00:24:28,400 --> 00:24:29,900
So I'm going to go ahead and say let's just

438
00:24:30,100 --> 00:24:33,500
That change and we can always use the pound pragma trick that people

439
00:24:33,500 --> 00:24:36,400
figured out how to finally, do correctly on the forums.

440
00:24:36,500 --> 00:24:38,500
Remember because we try it on stream, it didn't work, but turns out,

441
00:24:38,500 --> 00:24:41,800
it's because you have to make sure you have in lines and the right

442
00:24:41,800 --> 00:24:42,400
place and stuff.

443
00:24:42,400 --> 00:24:44,000
But anyway, separate issue.

444
00:24:45,000 --> 00:24:48,100
So we can do that now which is good because that gets rid of a little

445
00:24:48,100 --> 00:24:51,500
bit more complexity there and it also means that we can delete that

446
00:24:51,500 --> 00:24:52,500
file entirely.

447
00:24:52,500 --> 00:24:57,100
Like we don't need a handmade optimized whatever nonsense that can go.

448
00:24:57,300 --> 00:24:58,100
So that's gone now.

449
00:24:58,200 --> 00:24:58,700
Goodbye

450
00:25:00,700 --> 00:25:02,800
Make sure it's killed from the buffer as well.

451
00:25:03,600 --> 00:25:08,100
Alright, so now we're like structurally, sort of working but we're

452
00:25:08,100 --> 00:25:13,400
probably not actually working because we made like a ton of changes

453
00:25:13,400 --> 00:25:16,500
and we've got, you know, some debugging ahead of a certainly.

454
00:25:17,000 --> 00:25:19,800
But, you know, we've got 30 minutes, 35 minutes.

455
00:25:20,200 --> 00:25:24,400
So hopefully, we'll be able to make some Headway into that.

456
00:25:25,300 --> 00:25:28,100
So let's start by seeing where we like Crash and Burn first.

457
00:25:33,400 --> 00:25:37,200
All right, so I think the first thing is we probably don't initialize.

458
00:25:37,900 --> 00:25:38,200
Yeah.

459
00:25:38,200 --> 00:25:44,800
We so we aren't we don't initialize or reset or do anything for for

460
00:25:44,800 --> 00:25:45,900
our actual render command.

461
00:25:45,900 --> 00:25:47,800
So we got to take care of that first.

462
00:25:49,200 --> 00:25:50,200
Let's see here.

463
00:25:52,800 --> 00:25:53,400
There we go.

464
00:25:54,400 --> 00:25:55,500
So we've got this push.

465
00:25:55,500 --> 00:25:57,500
Buffer size, push buffer thing.

466
00:25:58,600 --> 00:25:59,400
Oh wow.

467
00:25:59,800 --> 00:26:01,700
The we never this is awesome.

468
00:26:01,700 --> 00:26:04,200
It's actually we never finished typing this in.

469
00:26:04,400 --> 00:26:08,600
So this virtual a like is actually just it's setting the void push

470
00:26:08,600 --> 00:26:12,200
buffer to point to the address of the virtual Alec function.

471
00:26:12,600 --> 00:26:13,400
That's amazing.

472
00:26:14,300 --> 00:26:17,400
But anyway, yeah, so we're going to do a went through to allocate

473
00:26:17,400 --> 00:26:20,900
memory here with the push buffer size and this is something that we

474
00:26:20,900 --> 00:26:22,000
can move.

475
00:26:22,200 --> 00:26:25,500
Also, back up to the sort like this, the same place, we're gonna sort

476
00:26:25,500 --> 00:26:25,900
memory.

477
00:26:26,400 --> 00:26:27,800
So that seems like a reasonable

478
00:26:27,900 --> 00:26:29,000
Nothing to do, okay.

479
00:26:30,600 --> 00:26:32,400
At, let's push a little further through there.

480
00:26:33,500 --> 00:26:35,400
Oh, all right.

481
00:26:36,400 --> 00:26:38,400
Well that was somewhat surprising.

482
00:26:38,500 --> 00:26:45,100
I wasn't expecting that to work the first time but I guess it did.

483
00:26:47,200 --> 00:26:48,100
Yeah.

484
00:26:49,400 --> 00:26:51,300
So that's fine.

485
00:26:51,800 --> 00:26:54,200
I guess, weird.

486
00:27:12,800 --> 00:27:13,200
Well.

487
00:27:17,500 --> 00:27:18,600
I wasn't faking that to work.

488
00:27:21,700 --> 00:27:22,500
I don't know.

489
00:27:25,900 --> 00:27:27,900
That that takes a little window sales.

490
00:27:28,100 --> 00:27:33,800
Got a bit that, you know, wasn't expecting it to work, it worked, it

491
00:27:33,800 --> 00:27:36,100
worked even the debug code worked.

492
00:27:36,100 --> 00:27:39,500
So even the fact that we're now aggregating and adult, it all just

493
00:27:39,500 --> 00:27:42,600
worked everything just worked, which is crazy.

494
00:27:43,900 --> 00:27:46,300
And I don't know what to say.

495
00:27:46,400 --> 00:27:47,700
I guess we just had good luck.

496
00:27:48,200 --> 00:27:49,800
Maybe they were taking it easy on me.

497
00:27:49,800 --> 00:27:52,100
The gods of programming, looked down and said he's sick today.

498
00:27:53,000 --> 00:27:55,400
We won't give him a bunch of debugging to do.

499
00:27:56,400 --> 00:27:57,200
Thanks guys.

500
00:27:58,700 --> 00:27:59,100
All right.

501
00:27:59,100 --> 00:28:00,900
So that's

502
00:28:04,100 --> 00:28:06,300
I would say is I would have something more attention to say about that

503
00:28:06,300 --> 00:28:07,400
if I wasn't feeling ill.

504
00:28:08,400 --> 00:28:12,500
All right, so I guess, let's at least test the software side.

505
00:28:12,500 --> 00:28:17,600
Probably that maybe that needs some debugging, and here's win32

506
00:28:17,600 --> 00:28:19,300
display barford window, right?

507
00:28:20,100 --> 00:28:25,400
And so this is currently going through hardware and doing so, this

508
00:28:25,400 --> 00:28:29,700
Branch, we're not testing at the moment, so maybe let's have a global

509
00:28:29,700 --> 00:28:32,100
variable that allows us to switch between hardware and software

510
00:28:32,100 --> 00:28:33,500
rendering or something.

511
00:28:33,900 --> 00:28:34,300
Don't know.

512
00:28:35,600 --> 00:28:36,400
So here we go.

513
00:28:36,400 --> 00:28:38,500
Let's just have a global variable.

514
00:28:40,400 --> 00:28:43,200
B32 use Hardware rendering.

515
00:28:45,800 --> 00:28:49,700
and we can just say like, okay Global use Hardware rendering is here,

516
00:28:50,000 --> 00:28:53,300
or maybe we'll do Global use software rendering actually

517
00:28:55,300 --> 00:28:58,900
That way, the default value of false will be the one that we probably

518
00:28:58,900 --> 00:29:00,200
want to ship the game with.

519
00:29:06,800 --> 00:29:07,300
Boop.

520
00:29:10,300 --> 00:29:11,000
And poops.

521
00:29:16,800 --> 00:29:23,600
And so display via Hardware equals true is still one that we use here.

522
00:29:27,500 --> 00:29:29,800
But this in Hardware now goes away.

523
00:29:30,900 --> 00:29:37,200
Okay, so now we've got a global variable for that and I have to

524
00:29:37,200 --> 00:29:44,500
actually declare it correctly, use software, rendering, and so now in

525
00:29:44,500 --> 00:29:48,200
theory, I should be able to change between hardware and software,

526
00:29:48,200 --> 00:29:53,300
rendering software, rendering by editing the value of that variable.

527
00:29:53,300 --> 00:29:57,100
So for example, if I came in here, right and set

528
00:29:58,200 --> 00:29:59,500
Break point or something?

529
00:29:59,500 --> 00:29:59,800
Well, I

530
00:30:00,000 --> 00:30:00,900
Set a breakpoint somewhere.

531
00:30:00,900 --> 00:30:02,300
It's actually going to be hit.

532
00:30:05,400 --> 00:30:08,100
Which is like here.

533
00:30:08,100 --> 00:30:13,600
Let's say then I should be able to do something like saying Global use

534
00:30:13,600 --> 00:30:20,600
software rendering and you can see that it's set to zero so it's using

535
00:30:20,700 --> 00:30:21,700
the hardware.

536
00:30:21,700 --> 00:30:26,100
I can probably set it to one now and then something will happen and

537
00:30:26,100 --> 00:30:29,400
Hey look it's software rendering right now it's expected incredibly

538
00:30:29,400 --> 00:30:32,900
slow suffering because it's not being compiled optimized but it is

539
00:30:32,900 --> 00:30:34,100
actually in software.

540
00:30:34,700 --> 00:30:36,200
So what's kind of nice about that?

541
00:30:36,200 --> 00:30:40,100
Is the other thing that you know, is kind of cool.

542
00:30:40,100 --> 00:30:43,200
If you now, look at how we've got our architecture, it means you can

543
00:30:43,200 --> 00:30:46,400
just switch it run time if you want to write.

544
00:30:46,500 --> 00:30:50,300
So, you know, now we can just say, like, oh whatever you want to do

545
00:30:50,400 --> 00:30:53,000
with use, you know, software or Hardware rendering.

546
00:30:54,000 --> 00:30:57,100
In fact, I don't even know, does our debug system because we have to

547
00:30:57,100 --> 00:30:58,500
finish the debug system at some point.

548
00:30:58,600 --> 00:30:59,900
I don't know where we left that.

549
00:31:00,500 --> 00:31:03,100
Can you edit true, and false values in here?

550
00:31:03,100 --> 00:31:04,500
I felt like we had that

551
00:31:04,800 --> 00:31:09,800
at one point, but we like, you know, we had sort of changed it around

552
00:31:09,800 --> 00:31:11,300
and did all this other stuff, right?

553
00:31:14,100 --> 00:31:16,800
So I don't know if we can do something like this here, where we have

554
00:31:16,800 --> 00:31:23,300
like a debug variable type path, sort of thing and you know, we had

555
00:31:23,300 --> 00:31:26,300
some stuff for like we would do.

556
00:31:30,000 --> 00:31:31,100
Debug.

557
00:31:32,400 --> 00:31:33,100
Variable.

558
00:31:34,900 --> 00:31:36,400
We did some stuff like this.

559
00:31:37,500 --> 00:31:38,000
Right?

560
00:31:38,700 --> 00:31:46,800
And I feel like maybe we could do that with the with the hardware

561
00:31:46,800 --> 00:31:47,400
rendering.

562
00:31:48,500 --> 00:31:49,200
I don't know.

563
00:31:49,700 --> 00:31:52,400
We never, this is why we got to go back and finish this stuff because

564
00:31:52,400 --> 00:31:54,700
I really want these things to all actually be done.

565
00:31:54,700 --> 00:31:57,200
But most of them, you know, we kind of just stopped in the middle when

566
00:31:57,200 --> 00:32:00,600
we went on break and we never came back to actually finish this code,

567
00:32:00,600 --> 00:32:01,700
which is unfortunate.

568
00:32:02,200 --> 00:32:05,700
But yeah, I mean, in theory like if that debug, if that stuff actually

569
00:32:05,700 --> 00:32:06,500
worked,

570
00:32:09,200 --> 00:32:13,000
Then we could actually have that, you know, BFB a thing.

571
00:32:14,000 --> 00:32:17,500
So that would be Global use suffering.

572
00:32:17,900 --> 00:32:18,900
We could do.

573
00:32:26,600 --> 00:32:27,600
I don't notice that work.

574
00:32:32,200 --> 00:32:33,100
Global constants.

575
00:32:33,100 --> 00:32:36,700
Render use software Undeclared, okay?

576
00:32:53,800 --> 00:32:54,300
Better.

577
00:32:56,400 --> 00:32:57,900
So, I don't know what happens now.

578
00:33:00,000 --> 00:33:00,900
Because I don't remember.

579
00:33:05,100 --> 00:33:05,700
So, I don't know if we can't.

580
00:33:05,700 --> 00:33:08,100
We can't actually click on this kind of way, because we don't actually

581
00:33:08,100 --> 00:33:08,900
have that stuff.

582
00:33:14,000 --> 00:33:17,200
Yeah, it looks like we almost had this stuff working like it displays

583
00:33:17,200 --> 00:33:17,700
up there.

584
00:33:20,500 --> 00:33:20,900
Hmm.

585
00:33:22,500 --> 00:33:23,400
Well, let's take a look.

586
00:33:28,000 --> 00:33:28,700
you know what actually

587
00:33:31,700 --> 00:33:33,100
No, I think about let's not take a look.

588
00:33:33,200 --> 00:33:35,900
I got a better idea because we want to go finish the debug system at

589
00:33:35,900 --> 00:33:36,300
some point.

590
00:33:36,300 --> 00:33:39,900
There's no point in opening up that as a can of worms, Let's ignore

591
00:33:39,900 --> 00:33:40,600
that for now.

592
00:33:40,800 --> 00:33:43,800
I've got a better idea, let's Implement vsync because one of the

593
00:33:43,800 --> 00:33:45,600
reasons I wanted to do all the hardware stuff.

594
00:33:45,600 --> 00:33:49,800
Now anyway, besides the fact that we have get a lot of free speed from

595
00:33:49,800 --> 00:33:55,400
it is that I wanted a vsync and so we could get Visa Inc pretty in a

596
00:33:55,400 --> 00:33:57,900
pretty straightforward fashion and there's some things that I want to

597
00:33:57,900 --> 00:33:59,700
explain about how you do that anyway.

598
00:34:00,300 --> 00:34:01,300
So let's go ahead and do that.

599
00:34:01,800 --> 00:34:06,600
Okay, so why don't we have vsync at the moment, right?

600
00:34:06,600 --> 00:34:10,500
First of all, does everyone know what vsync is, might be another good

601
00:34:11,000 --> 00:34:13,699
thing and I kind of take it for granted that you do.

602
00:34:13,699 --> 00:34:17,400
And the reason is because even if you're not a graphics programmer,

603
00:34:17,600 --> 00:34:20,600
you if you're even if you just, if you just play games, you probably

604
00:34:20,600 --> 00:34:22,900
know what vsync is Right, Sophie sink.

605
00:34:24,100 --> 00:34:27,699
Is really sort of an old school Concept in the old days, right?

606
00:34:27,800 --> 00:34:30,199
On a CRT, on a cathode ray tube.

607
00:34:30,900 --> 00:34:32,600
I don't know if you guys remember these guys things.

608
00:34:32,600 --> 00:34:36,699
They were like the old sort of TVs that are super long, right?

609
00:34:36,699 --> 00:34:40,500
The way TVs originally were, and there was like an electron beam thing

610
00:34:40,600 --> 00:34:45,100
that would like, literally scan across the screen in like this zigzag

611
00:34:45,100 --> 00:34:46,000
pattern like this.

612
00:34:46,300 --> 00:34:50,400
Lighting up, the phosphorus that was on the coded, on the front glass

613
00:34:50,400 --> 00:34:51,900
plate, right?

614
00:34:52,000 --> 00:34:53,699
And those phosphorus, when the electron

615
00:34:53,900 --> 00:34:57,700
Phosphorus it would admit a color, and that's how you know, they're be

616
00:34:57,700 --> 00:35:00,200
look, a little red green and blue dots, they would light up those with

617
00:35:00,200 --> 00:35:02,900
certain different intensities, and that's how you would get

618
00:35:03,000 --> 00:35:04,500
Television, right?

619
00:35:05,700 --> 00:35:09,800
And so the reason that it's called vsync is because as this happened

620
00:35:10,100 --> 00:35:14,400
at the end, it would get to the bottom and it would have to the, the

621
00:35:14,400 --> 00:35:15,100
gun thing.

622
00:35:15,100 --> 00:35:16,400
This, this is electron gun.

623
00:35:16,400 --> 00:35:17,100
That's like letting up.

624
00:35:17,100 --> 00:35:20,500
This play would have to kind of come all the way back and start again

625
00:35:20,600 --> 00:35:23,700
at the top and during that period where it comes

626
00:35:23,800 --> 00:35:26,400
It's back to start at the top, was like the synchronization period

627
00:35:26,400 --> 00:35:28,000
where you would start the next frame.

628
00:35:28,100 --> 00:35:30,300
It was called vertical sync or vsync.

629
00:35:30,400 --> 00:35:35,400
And so what happens is that phrase became known as waiting for the

630
00:35:35,400 --> 00:35:39,300
right time, whatever that means in your current system, waiting for

631
00:35:39,300 --> 00:35:41,500
the right time to update the frame.

632
00:35:41,900 --> 00:35:43,100
Such that U such that.

633
00:35:43,100 --> 00:35:47,000
The thing displaying it, whether it's an LCD or a CRT, like the old

634
00:35:47,000 --> 00:35:51,200
days or whatever, doesn't like end up showing the user half, the old

635
00:35:51,200 --> 00:35:53,300
frame, and half the new frame,

636
00:35:53,800 --> 00:35:57,500
Right, because what happens if it's in the middle of updating and you

637
00:35:57,500 --> 00:35:59,700
change the frame right in the middle.

638
00:36:00,000 --> 00:36:02,800
You'll end up with some portion of the frame as the old one and some

639
00:36:02,800 --> 00:36:06,500
portion is the new one that the user actually sees and that manifests

640
00:36:06,500 --> 00:36:09,400
itself as like a tear, right.

641
00:36:09,400 --> 00:36:10,400
It's called tearing

642
00:36:12,400 --> 00:36:15,300
And so you end up with a thing that's like, oh the handmade Heroes

643
00:36:15,300 --> 00:36:16,200
moving across the screen.

644
00:36:16,200 --> 00:36:21,300
And there's this little like line where his his bottom part is like,

645
00:36:21,600 --> 00:36:26,000
is moving ahead of his top part or something right happens.

646
00:36:26,700 --> 00:36:29,100
Because this is from the next frame, and this is from the previous

647
00:36:29,100 --> 00:36:31,400
frame, and you end up with the or this is from the current frame, this

648
00:36:31,400 --> 00:36:33,200
from the previous frame, right?

649
00:36:33,900 --> 00:36:35,000
So vsync.

650
00:36:35,000 --> 00:36:36,800
It just means that, right?

651
00:36:36,900 --> 00:36:41,500
And we want it for a game to prevent tearing certainly, but we also

652
00:36:41,500 --> 00:36:42,000
want it to

653
00:36:42,200 --> 00:36:45,900
Tried to get steady timing so that our timing is synced with the video

654
00:36:46,000 --> 00:36:50,700
properly and so what we can do is we can ask opengl for it.

655
00:36:51,300 --> 00:36:55,900
There's a thing called wgl swap interval or it might just be a GL,

656
00:36:55,900 --> 00:36:56,700
swap interval.

657
00:36:58,400 --> 00:36:59,200
I don't remember.

658
00:37:00,300 --> 00:37:03,900
I don't remember whether it's a Windows call or a regular call.

659
00:37:03,900 --> 00:37:05,300
I think it might be a regular call.

660
00:37:06,300 --> 00:37:10,100
So Mike, just bgl swap interval, is the GL swap interval call and what

661
00:37:10,100 --> 00:37:13,500
you can do is you can pass a value to this here.

662
00:37:14,500 --> 00:37:20,200
Which says, how many frames do you want to wait before you swap,

663
00:37:20,200 --> 00:37:21,300
right?

664
00:37:21,600 --> 00:37:25,400
So when we call our, like our well, it's not a GL call.

665
00:37:25,400 --> 00:37:29,900
When we call our swap buffers call that we were using right to display

666
00:37:29,900 --> 00:37:30,900
our frame and GL.

667
00:37:30,900 --> 00:37:35,500
If this value is set to 0, then it means, as soon as we call swap

668
00:37:35,500 --> 00:37:37,700
buffers, just put it on the screen, just do it.

669
00:37:38,000 --> 00:37:40,400
I don't care if you're in the middle of this thing in frame, I don't

670
00:37:40,400 --> 00:37:42,300
care whatever just do it, right.

671
00:37:42,300 --> 00:37:44,500
If this value is,

672
00:37:44,600 --> 00:37:45,300
One.

673
00:37:45,400 --> 00:37:47,000
It means wait for the next vertical.

674
00:37:47,000 --> 00:37:51,100
Retrace, if the value is 2, it means wait for two vertical, retrace

675
00:37:51,100 --> 00:37:51,700
has right?

676
00:37:51,700 --> 00:37:53,100
So it's like every other frame.

677
00:37:53,900 --> 00:37:56,000
And three, four, five, six seven, right?

678
00:37:56,100 --> 00:37:57,800
It's all very predictable at that point.

679
00:37:58,800 --> 00:38:02,200
Now, it's important to note that this is simply a request.

680
00:38:03,100 --> 00:38:06,100
So, when we make this call, what we're saying is this is what we would

681
00:38:06,100 --> 00:38:07,100
like to have happen.

682
00:38:07,700 --> 00:38:11,400
But opengl look for all we know, we might not even be on a card that

683
00:38:11,400 --> 00:38:14,400
even supports vsync, like vsync is

684
00:38:14,500 --> 00:38:17,000
Not a guarantee, it's just a hope.

685
00:38:17,700 --> 00:38:20,700
And so, for shipping the game, we will probably also have to have some

686
00:38:20,700 --> 00:38:22,800
logic that tries to look and go.

687
00:38:22,800 --> 00:38:25,900
Oh, hey, it looks like we're not really getting any vsync because

688
00:38:25,900 --> 00:38:29,500
like, you know our frame rate is you know, is two milliseconds, a

689
00:38:29,500 --> 00:38:29,800
frame.

690
00:38:29,800 --> 00:38:31,200
So obviously that's not happening.

691
00:38:33,000 --> 00:38:37,000
And so try to, you know, maybe insert some delay to try and get us to

692
00:38:37,000 --> 00:38:39,900
a 30 frames a second or whatever we want, our 60 frames a second

693
00:38:39,900 --> 00:38:41,900
whatever we want our speed to me.

694
00:38:43,300 --> 00:38:47,900
So GL swap interval is is a request but it's a request we want to make

695
00:38:47,900 --> 00:38:49,300
and it's on most users machines.

696
00:38:49,300 --> 00:38:53,200
If they don't disable it in their control panel will work and give a

697
00:38:53,200 --> 00:38:54,200
reliable vsync.

698
00:38:54,200 --> 00:38:55,700
So, it's a good thing to use.

699
00:38:57,000 --> 00:38:59,800
okay, so here you can see if

700
00:39:00,000 --> 00:39:00,600
Go.

701
00:39:01,000 --> 00:39:04,400
Someone told me, docks dot g l was a good place to go by the way and

702
00:39:04,400 --> 00:39:08,500
it is it does look pretty good so I don't know if it's in here if

703
00:39:08,500 --> 00:39:10,300
Wiggles in there or swap intervals in here.

704
00:39:10,300 --> 00:39:11,000
It isn't.

705
00:39:11,300 --> 00:39:12,900
But this was a pretty good site.

706
00:39:12,900 --> 00:39:15,100
People recommending for the regular opengl calls.

707
00:39:15,100 --> 00:39:16,100
It's a pretty nice.

708
00:39:16,800 --> 00:39:18,500
It's a pretty nice collection here.

709
00:39:20,000 --> 00:39:22,600
I don't know if you if you've ever played with it, I was I was pretty

710
00:39:22,600 --> 00:39:25,700
happy with it anyway so it's probably wiggle.

711
00:39:25,700 --> 00:39:29,800
Swap interval then I'm guessing that's what I thought but I wasn't.

712
00:39:30,000 --> 00:39:31,800
Sure, let's see.

713
00:39:32,900 --> 00:39:34,500
W GLX swap control.

714
00:39:34,500 --> 00:39:36,100
So this is the extension, all right.

715
00:39:37,700 --> 00:39:43,700
so the way that opengl works like I saying before is on Windows,

716
00:39:46,000 --> 00:39:49,600
There's the wgl stuff, which is the windows bindings for up in jail.

717
00:39:49,600 --> 00:39:53,400
And then there's the GL stuff, which is the actual opengl, right?

718
00:39:54,200 --> 00:39:57,300
And so, what we are actually talking about here is a wiggle side

719
00:39:57,300 --> 00:39:57,500
thing.

720
00:39:57,500 --> 00:39:58,900
So it's a window side thing.

721
00:39:59,200 --> 00:40:07,300
And what this means is that we have to call through wiggle to

722
00:40:07,300 --> 00:40:09,500
actually, you know, to.

723
00:40:10,400 --> 00:40:13,500
We have to work for calling Through the Windows, part of things, it's

724
00:40:13,500 --> 00:40:14,700
part of the windows thing.

725
00:40:14,700 --> 00:40:15,600
It's not common.

726
00:40:15,800 --> 00:40:19,300
Won't work on OS X to make this same call, for example, right?

727
00:40:20,800 --> 00:40:24,000
And so, what that means, if we actually do it this way, and I can't

728
00:40:24,000 --> 00:40:27,200
remember if there's a ARB swap interval.

729
00:40:27,200 --> 00:40:28,900
I don't even remember, but there probably isn't any way.

730
00:40:29,500 --> 00:40:32,300
So point being, since we're doing that, it means that we have called

731
00:40:32,300 --> 00:40:32,600
your wiggle.

732
00:40:32,600 --> 00:40:40,400
Now, the problem is, I believe this swap interval was added after the,

733
00:40:40,900 --> 00:40:43,000
the version of opengl.

734
00:40:43,000 --> 00:40:46,500
That's that ships in Windows, the version of the bindings, the windows

735
00:40:46,500 --> 00:40:47,000
bindings.

736
00:40:47,200 --> 00:40:50,000
So I believe that if we call W GL swap,

737
00:40:50,400 --> 00:40:53,300
It will be an unknown identifier.

738
00:40:53,500 --> 00:40:56,400
So like for example, we will create context, right?

739
00:40:57,800 --> 00:40:59,700
Which is a function we are using in wiggle.

740
00:41:00,100 --> 00:41:02,300
It's just there, right?

741
00:41:02,300 --> 00:41:04,600
And your of course, is telling me that I it doesn't take their

742
00:41:04,600 --> 00:41:05,500
arguments, which is true.

743
00:41:05,500 --> 00:41:07,100
But you know, it's there wiggle.

744
00:41:07,100 --> 00:41:11,300
Swap interval is not an actual function that was in wiggle originally,

745
00:41:12,200 --> 00:41:16,500
and that's totally fine because there is an extension mechanism inside

746
00:41:16,500 --> 00:41:20,200
wiggle to get new functions that you can then call.

747
00:41:20,800 --> 00:41:26,400
And so what we want to do here is inside our code, right?

748
00:41:26,500 --> 00:41:27,400
Here's our swap buffers.

749
00:41:27,600 --> 00:41:30,100
All when we in it, are opengl.

750
00:41:35,700 --> 00:41:36,200
There it is.

751
00:41:37,600 --> 00:41:42,000
When we in it are opengl what we want to do is after and I guess we

752
00:41:42,000 --> 00:41:43,600
don't need this anymore either.

753
00:41:45,700 --> 00:41:48,800
What we want to do is we want to go ahead and get any of these

754
00:41:48,800 --> 00:41:50,600
extensions that we might need.

755
00:41:50,600 --> 00:41:51,900
And these extensions work.

756
00:41:52,100 --> 00:41:55,100
Almost exactly like what you've seen me do in the past for getting

757
00:41:55,100 --> 00:41:57,800
win32 functions that we need, right?

758
00:41:58,200 --> 00:41:59,800
Basically, if there's a function that we need,

759
00:42:00,000 --> 00:42:03,800
Wasn't in the base services, that were linking with what we can do is,

760
00:42:03,800 --> 00:42:06,900
we can call, you know, get proc address like, for Windows, we call get

761
00:42:06,900 --> 00:42:11,000
proc address and that basically says, Hey windows, I know.

762
00:42:11,000 --> 00:42:14,600
There's a function named this, do you support it and if you do, please

763
00:42:14,600 --> 00:42:16,500
return me a pointer to it, so I can call it.

764
00:42:18,200 --> 00:42:21,200
And so what happens in in wiggle, right?

765
00:42:22,000 --> 00:42:25,600
Is you call the exact same thing, but I believe you call will get proc

766
00:42:25,600 --> 00:42:26,100
address.

767
00:42:27,000 --> 00:42:28,500
Not regular, get proc address.

768
00:42:29,700 --> 00:42:30,000
Right?

769
00:42:30,000 --> 00:42:31,900
So it's it's own query extension.

770
00:42:32,800 --> 00:42:36,200
So you call wiggle get proc address and it sends you back in an API

771
00:42:36,200 --> 00:42:38,200
pointer that you can then use.

772
00:42:38,700 --> 00:42:40,900
But other than that it's all exactly the same.

773
00:42:41,000 --> 00:42:43,500
So I can call wiggle get proc address.

774
00:42:44,100 --> 00:42:46,900
I can ask for the function that I actually want.

775
00:42:49,500 --> 00:42:50,400
Which is this?

776
00:42:53,400 --> 00:42:53,900
Right?

777
00:42:55,300 --> 00:42:58,800
And then it will give it to me if it is there.

778
00:43:00,000 --> 00:43:02,800
So I can have wiggle swap interval, EXT.

779
00:43:05,900 --> 00:43:07,800
Will swap interval equals?

780
00:43:08,000 --> 00:43:11,200
We get proc address if we're gonna swap interval.

781
00:43:13,000 --> 00:43:15,800
We will swap interval one, which would set V.

782
00:43:15,800 --> 00:43:17,700
Think for every frame.

783
00:43:18,900 --> 00:43:19,300
Okay.

784
00:43:20,500 --> 00:43:24,100
And so, what I want to do here is I would like to be able to take the

785
00:43:24,100 --> 00:43:26,700
function prototype and just make sure I can keep it, which is what

786
00:43:26,700 --> 00:43:27,400
I'll do here.

787
00:43:27,600 --> 00:43:29,800
So I can say, okay, here's the function prototype.

788
00:43:32,500 --> 00:43:35,200
Again, this is exactly the same thing as I've done many, many times in

789
00:43:35,200 --> 00:43:36,000
the Stream already.

790
00:43:37,500 --> 00:43:37,900
Okay.

791
00:43:39,100 --> 00:43:41,900
And so I'm going to go ahead and put that up at the top here where we

792
00:43:41,900 --> 00:43:44,300
kind of do this, this sort of stuff, right?

793
00:43:44,300 --> 00:43:48,100
That we commonly do, and I don't really know that I need to do

794
00:43:48,100 --> 00:43:49,900
anything fancy with this guy.

795
00:43:49,900 --> 00:43:53,300
I don't think I need to use any sort of macros for him or anything

796
00:43:53,300 --> 00:43:55,600
like that, because I'm not actually going to create a stub for this

797
00:43:55,600 --> 00:43:56,500
particular guy.

798
00:43:57,600 --> 00:43:59,900
So we just have to type def in like this.

799
00:43:59,900 --> 00:44:03,900
Now we can load him when we do wiggle swap interval, EXT.

800
00:44:04,000 --> 00:44:07,100
The other thing I should probably do is Mark it with a win API call.

801
00:44:07,700 --> 00:44:11,400
Because it is one that won't matter in 64-bit code.

802
00:44:11,400 --> 00:44:15,300
But if we ever compiled for 32-bit, might matter because the calling

803
00:44:15,300 --> 00:44:17,200
convention anyway.

804
00:44:17,500 --> 00:44:21,000
So what I want to do now is I want to go to that, we will swap

805
00:44:21,000 --> 00:44:23,900
interval, and I got to do the Castor

806
00:44:27,100 --> 00:44:30,300
And I guess I should just do this as if this could just be a global

807
00:44:30,300 --> 00:44:34,000
right where we check it and we use it so that we can keep the value of

808
00:44:34,000 --> 00:44:34,600
it around.

809
00:44:37,100 --> 00:44:39,900
All right, so I'll do wiggle swap interval.

810
00:44:39,900 --> 00:44:42,300
EXT will swap interval.

811
00:44:46,500 --> 00:44:48,300
And that will be a global variable.

812
00:44:49,900 --> 00:44:50,300
So,

813
00:44:53,300 --> 00:44:59,000
and so now when we run this guy, I should probably step through the

814
00:44:59,000 --> 00:44:59,800
code and show it to you.

815
00:45:01,300 --> 00:45:05,500
Now you can see that we're running at a locked 60 frames a second,

816
00:45:06,000 --> 00:45:06,600
right?

817
00:45:07,200 --> 00:45:11,400
You can kind of see that it's a 16 milliseconds and everything's

818
00:45:11,400 --> 00:45:18,200
running at the correct speed and that's because opengl is waiting to

819
00:45:18,200 --> 00:45:20,600
do that flip until the frame boundary.

820
00:45:21,600 --> 00:45:22,300
Makes sense.

821
00:45:23,400 --> 00:45:26,900
And so if I didn't call that again, just so you can see what happens.

822
00:45:26,900 --> 00:45:31,000
If I don't call it case, you missed it from before, or I call it with

823
00:45:31,000 --> 00:45:35,900
zero, for example, which says don't think, then we just go at the

824
00:45:35,900 --> 00:45:38,000
maximum possible speed the graphics card allows.

825
00:45:38,000 --> 00:45:40,800
And you can see that it were running away faster, right?

826
00:45:40,800 --> 00:45:46,200
We're running it about eight times seven seven to eight times faster

827
00:45:46,600 --> 00:45:49,300
and so the game would just run like it was on you know, speed or

828
00:45:49,300 --> 00:45:49,800
something.

829
00:45:50,800 --> 00:45:51,300
Yep.

830
00:45:54,300 --> 00:45:58,400
So that's you know how that works but we're not we're not quite done

831
00:45:58,400 --> 00:45:58,600
yet.

832
00:45:58,600 --> 00:46:02,400
For a number of reasons like first of all we don't know how long this

833
00:46:02,400 --> 00:46:06,400
actually is because it might be that the swap intervals actually like

834
00:46:06,700 --> 00:46:10,900
maybe it's 120 hertz display in which case, it wouldn't be 60 frames a

835
00:46:10,900 --> 00:46:12,500
second for frames.

836
00:46:12,500 --> 00:46:16,100
It would actually be 120 frames a second, right?

837
00:46:16,200 --> 00:46:17,400
So we have more work to do there.

838
00:46:17,400 --> 00:46:18,400
We're not done yet.

839
00:46:18,900 --> 00:46:23,100
And the other thing that's worth noting is the way that

840
00:46:23,500 --> 00:46:26,500
The opengl extension mechanism, technically works.

841
00:46:27,100 --> 00:46:31,600
Is that calling wiggle get proc address is not technically sufficient.

842
00:46:32,300 --> 00:46:40,700
What we're supposed to do is check for the existence of Extensions by

843
00:46:40,700 --> 00:46:43,600
checking a string and you can see here like that they talked about

844
00:46:43,600 --> 00:46:48,000
this a little bit because there's no way to extend wgl.

845
00:46:48,000 --> 00:46:50,300
These calls are to finding the ICD and can be called by obtaining

846
00:46:50,300 --> 00:46:50,600
post.

847
00:46:50,600 --> 00:46:53,100
We're going to get progress because this extension is a wiggle.

848
00:46:53,200 --> 00:46:53,400
In.

849
00:46:53,400 --> 00:46:55,500
It is not included that you extension during its existence can be

850
00:46:55,500 --> 00:46:57,500
determined with a wiggle ex extension.

851
00:46:57,500 --> 00:46:58,500
Strings extension.

852
00:46:58,700 --> 00:47:01,700
So technically what you're supposed to do is ask the driver for this

853
00:47:01,700 --> 00:47:06,200
wiggle, ex extension string, which you can do look to see whether it's

854
00:47:06,200 --> 00:47:07,000
extension.

855
00:47:07,000 --> 00:47:10,100
String is in there, right?

856
00:47:10,500 --> 00:47:11,400
Which is this one?

857
00:47:13,000 --> 00:47:17,500
I believe, and if that's there, that it's there, and if it's not, it's

858
00:47:17,500 --> 00:47:18,200
not.

859
00:47:18,500 --> 00:47:21,700
Now the stupid thing about this.

860
00:47:22,800 --> 00:47:28,600
Is that you don't actually know that you can get it after you see that

861
00:47:28,600 --> 00:47:31,100
string, you start to make this function call and who knows what the

862
00:47:31,100 --> 00:47:33,500
function call is going to return and we're still return 0.

863
00:47:33,700 --> 00:47:34,300
Right?

864
00:47:35,200 --> 00:47:37,900
So I find it's usually better to check this way.

865
00:47:37,900 --> 00:47:40,400
I like to check this way better but it's not technically correct.

866
00:47:40,400 --> 00:47:46,900
Because in theory if the extension string isn't there, then in theory

867
00:47:46,900 --> 00:47:52,400
you could be getting the pointer to some other wiggle swap interval.

868
00:47:52,600 --> 00:47:53,900
Function.

869
00:47:53,900 --> 00:47:57,600
That does something different right in theory.

870
00:47:57,600 --> 00:47:59,900
So it's kind of

871
00:48:00,000 --> 00:48:03,500
Worth understanding that, that's their right.

872
00:48:04,900 --> 00:48:08,400
So if we wanted to, we could make this a little bit more technically

873
00:48:08,400 --> 00:48:13,000
correct by getting the extension string and then doing if stir stir,

874
00:48:13,100 --> 00:48:15,900
you know, on the extension string, well, I'm not really stir stir, you

875
00:48:15,900 --> 00:48:19,700
need to actually parse it and see that you didn't get like a partial

876
00:48:19,700 --> 00:48:21,400
match, right?

877
00:48:22,000 --> 00:48:24,600
So you need to actually parse it and then say, you know, is it found

878
00:48:24,600 --> 00:48:29,000
in there and, and that would be a little bit more correct on Swap

879
00:48:29,000 --> 00:48:29,400
interval.

880
00:48:29,400 --> 00:48:32,000
That's really not necessary, because that's the only way that you can

881
00:48:32,000 --> 00:48:33,100
ever have this function.

882
00:48:33,500 --> 00:48:34,500
So I don't know how

883
00:48:34,700 --> 00:48:37,000
Useful, that actually is, but it's just worth understanding.

884
00:48:38,200 --> 00:48:38,600
Okay?

885
00:48:38,800 --> 00:48:42,700
So that's one type of extension down, which is wiggle extension, and

886
00:48:42,700 --> 00:48:44,400
we needed that for a v blank, right?

887
00:48:44,400 --> 00:48:48,700
We needed that for for this but there's another type of extension that

888
00:48:48,700 --> 00:48:52,600
we want because remember, right now on a rendering is actually wrong

889
00:48:53,600 --> 00:48:54,400
in Hardware.

890
00:48:54,500 --> 00:48:57,700
It's actually our rendering and software is actually more correct than

891
00:48:57,700 --> 00:48:58,800
our rendering harder at the moment.

892
00:48:58,800 --> 00:49:02,500
And the reason for that is our Hardware renderer doesn't understand

893
00:49:02,500 --> 00:49:04,500
the fact that we're using

894
00:49:04,600 --> 00:49:06,600
GB at the moment, right?

895
00:49:06,700 --> 00:49:07,600
We're using

896
00:49:09,300 --> 00:49:15,700
We're actually using a an encoding, right?

897
00:49:15,700 --> 00:49:17,400
An srgb encoding for our textures.

898
00:49:17,400 --> 00:49:20,000
We're not quite exactly srgb.

899
00:49:20,000 --> 00:49:22,500
We're actually using squared a squared mapping.

900
00:49:22,500 --> 00:49:26,700
So we Square values in the textures, which is not really the correct

901
00:49:26,700 --> 00:49:33,900
gamma ramp at least not quite so, you know, it's it's it's not exactly

902
00:49:33,900 --> 00:49:36,000
correct to say that it's srgb.

903
00:49:36,000 --> 00:49:39,300
But we would like ideally

904
00:49:39,400 --> 00:49:43,800
Eight, the graphics card to be doing sort of the srgb rendering for

905
00:49:43,800 --> 00:49:44,700
us, right?

906
00:49:45,200 --> 00:49:48,900
And so, that's another thing that we could, if we wanted to turn on.

907
00:49:48,900 --> 00:49:53,400
And so let me, let me at least point you in that direction, we have a

908
00:49:53,400 --> 00:49:58,100
little bit of a, sort of a issue to work out there that we can talk

909
00:49:58,100 --> 00:49:58,400
about.

910
00:49:58,400 --> 00:50:00,200
But we'll talk about little red later.

911
00:50:00,300 --> 00:50:02,600
So frame buffer.

912
00:50:04,800 --> 00:50:11,600
Alright, so here we are with our bed frame before srgb, and you can

913
00:50:11,600 --> 00:50:12,500
kind of see in here.

914
00:50:12,500 --> 00:50:15,700
There's just a bunch of verbiage talking about the extension, but

915
00:50:15,700 --> 00:50:22,900
basically, what happens is, when you actually create a pixel format

916
00:50:23,200 --> 00:50:26,900
like we were doing before, you know, you remember, we did this in an

917
00:50:26,900 --> 00:50:27,900
it open gel.

918
00:50:29,500 --> 00:50:32,700
Where we do this, this thing here, where we do describe desired pixel

919
00:50:32,700 --> 00:50:33,800
format, and all that stuff.

920
00:50:34,800 --> 00:50:40,600
When we do that, when we're in the PIR choose for amateur for for I'm

921
00:50:40,600 --> 00:50:44,500
sorry, that's not true when we're doing choose visual, right?

922
00:50:45,600 --> 00:50:48,100
We can pass this sort of this sort of stuff.

923
00:50:48,100 --> 00:50:50,300
Now this is looks like the Linux docks.

924
00:50:50,400 --> 00:50:53,900
It's actually the wiggle our lab frame of a srgb one that we actually

925
00:50:53,900 --> 00:50:54,500
care about here.

926
00:50:54,500 --> 00:50:57,600
So I'm not sure if they document that one specifically, let me see.

927
00:51:03,900 --> 00:51:04,900
Doesn't look like it.

928
00:51:06,000 --> 00:51:07,900
Let me just let me see if they've got it.

929
00:51:08,600 --> 00:51:13,100
Let me see if they've got an example somewhere and if they do if they

930
00:51:13,100 --> 00:51:13,700
don't.

931
00:51:14,100 --> 00:51:18,100
But basically when we create our frame buffer, we can make it be srgb

932
00:51:18,100 --> 00:51:19,100
if we want it to be.

933
00:51:19,800 --> 00:51:21,100
So it's this is our

934
00:51:22,800 --> 00:51:23,900
Capability flag.

935
00:51:23,900 --> 00:51:25,300
But where is the actual

936
00:51:27,800 --> 00:51:29,500
Where is the actual?

937
00:51:29,500 --> 00:51:30,500
Let's let's see here.

938
00:51:38,900 --> 00:51:40,200
Let's see.

939
00:51:41,800 --> 00:51:44,100
That's not reassuring, but okay.

940
00:51:47,500 --> 00:51:49,600
Well, I can't actually find really anyone.

941
00:51:49,600 --> 00:51:53,000
That looks like he was talking about this, which is unfortunate, but

942
00:51:53,000 --> 00:51:53,700
what are you gonna do?

943
00:51:54,500 --> 00:51:58,500
So, we'll just kind of, we'll just wing it, which will be fine.

944
00:51:59,600 --> 00:52:02,400
So the point is anyway, ignore all this stuff.

945
00:52:03,500 --> 00:52:05,600
Sometimes I'm able to find things on the web show you.

946
00:52:05,600 --> 00:52:11,600
And sometimes I'm not the point is that like we handled gamma

947
00:52:11,600 --> 00:52:14,300
correction basically in our software renderer, which if you don't

948
00:52:14,300 --> 00:52:16,600
remember that, please go back and and watch.

949
00:52:16,800 --> 00:52:21,200
Those because I it would take quite some time to go through it all

950
00:52:21,200 --> 00:52:21,600
again.

951
00:52:22,100 --> 00:52:23,800
But like we tried to handle gamma correctly.

952
00:52:23,800 --> 00:52:27,300
There's a couple things we can set in opengl to try and handle gamma

953
00:52:27,300 --> 00:52:31,000
correctly in opengl and right now we're not setting any of them.

954
00:52:31,400 --> 00:52:34,200
So as a result like I think in particular, there's some things we

955
00:52:34,200 --> 00:52:37,700
should probably able to notice that it'll be like too bright or too

956
00:52:37,700 --> 00:52:38,400
weird.

957
00:52:39,300 --> 00:52:43,800
Like in general, the the colors shouldn't be quite what they are now.

958
00:52:43,900 --> 00:52:46,500
Unfortunately, I this is why I kind of wish we could toggle between

959
00:52:46,700 --> 00:52:49,700
Our software vendor and not because that way, we could sort of see

960
00:52:49,700 --> 00:52:53,100
what the actual difference was color-wise between them but point being

961
00:52:54,200 --> 00:52:57,800
right now, even though we're feeding it squared values for everything,

962
00:52:58,100 --> 00:52:59,300
it doesn't know that.

963
00:52:59,400 --> 00:53:03,800
And so we don't actually ever get that that

964
00:53:05,300 --> 00:53:08,400
When it's doing the blending, we don't get that srgb awareness.

965
00:53:09,100 --> 00:53:12,300
So in order to do that, there's two different places that we have to

966
00:53:12,300 --> 00:53:15,900
make sure that the srgb stuff works, right?

967
00:53:16,200 --> 00:53:20,200
And it's exactly the same as what we had to do in our renderer.

968
00:53:20,300 --> 00:53:26,300
So if you go look at how our renderer was working, you can see that we

969
00:53:26,300 --> 00:53:28,800
have our M Square PS function, right?

970
00:53:29,100 --> 00:53:34,000
When we load it in the frame, buffer values that we're going to blend

971
00:53:34,000 --> 00:53:34,800
with, right?

972
00:53:35,000 --> 00:53:36,100
We squared them.

973
00:53:37,200 --> 00:53:37,900
Make sense.

974
00:53:40,700 --> 00:53:43,300
And when we did our texels,

975
00:53:45,400 --> 00:53:46,800
they are already.

976
00:53:48,600 --> 00:53:50,300
In school.

977
00:53:52,800 --> 00:53:53,300
How do we do?

978
00:53:53,300 --> 00:53:53,900
Our textiles?

979
00:53:53,900 --> 00:53:55,800
Our textiles are encoded in srgb.

980
00:53:55,800 --> 00:53:56,800
So how do we convert them?

981
00:53:56,900 --> 00:53:59,600
Okay, so we shifted them just how we did it.

982
00:54:00,000 --> 00:54:02,700
It said so the reason we're not squaring them as because we actually

983
00:54:02,700 --> 00:54:08,400
just used shifting to, to make that happen.

984
00:54:08,400 --> 00:54:09,300
It looks like right?

985
00:54:09,400 --> 00:54:12,000
Weird texture from srgb to linear brightness space.

986
00:54:12,600 --> 00:54:16,700
And so those are the two things that have to happen at draw time,

987
00:54:16,700 --> 00:54:17,200
right?

988
00:54:17,500 --> 00:54:22,300
When we grab from the texture, the texture that we grabbed from has to

989
00:54:22,300 --> 00:54:25,300
be converted from srgb to linear.

990
00:54:25,900 --> 00:54:29,800
And when we grab the destination that has to be converted from srgb,

991
00:54:30,000 --> 00:54:34,400
Linear as well then after we're done, right?

992
00:54:35,200 --> 00:54:39,800
Well after we do the combining, then we have to square root to put

993
00:54:39,800 --> 00:54:42,100
things back into srgb space.

994
00:54:42,900 --> 00:54:44,800
So we need to tell opengl to do those steps.

995
00:54:44,800 --> 00:54:48,800
We need to opengl to like change the textures into linear space.

996
00:54:48,800 --> 00:54:52,300
Change the destination into linear space and then change the dust,

997
00:54:52,300 --> 00:54:56,300
change the results back to srgb Safe before writing them out.

998
00:54:57,600 --> 00:55:02,500
and so, really all that has to happen for that is, we have to tell it

999
00:55:02,500 --> 00:55:03,700
about the

1000
00:55:05,500 --> 00:55:06,200
the textures.

1001
00:55:07,200 --> 00:55:11,600
And so in opengl, when we submitted the textures, you'll notice that

1002
00:55:11,600 --> 00:55:16,800
we said what we wanted, the in internal format to be was GL r g b A8,

1003
00:55:17,000 --> 00:55:17,700
right?

1004
00:55:18,000 --> 00:55:22,400
And so when we submit the texture, what we actually want to do here is

1005
00:55:22,400 --> 00:55:27,000
submit, I don't know if there's a good listing of these guys but what

1006
00:55:27,000 --> 00:55:30,900
we want to do is like, actually just submit the srgb version of this.

1007
00:55:30,900 --> 00:55:32,500
Which I don't even remember what their?

1008
00:55:33,700 --> 00:55:34,500
Let me see if I can.

1009
00:55:38,800 --> 00:55:39,400
There it is.

1010
00:55:43,200 --> 00:55:46,800
so, it is

1011
00:55:48,600 --> 00:55:50,000
Let's see.

1012
00:55:50,000 --> 00:55:53,800
Dependencies overview texture.

1013
00:55:53,800 --> 00:55:54,800
Archie codex controls.

1014
00:55:54,800 --> 00:55:58,700
Whether the coding of the sample time to Shriners separates.

1015
00:56:02,000 --> 00:56:04,100
Where is the actual value here?

1016
00:56:04,100 --> 00:56:04,500
It is.

1017
00:56:05,500 --> 00:56:11,200
So it's srgb eight, right?

1018
00:56:12,500 --> 00:56:14,800
It should be srgb A8.

1019
00:56:14,800 --> 00:56:15,500
There it is.

1020
00:56:15,800 --> 00:56:19,200
So it's srgb, 8 Alpha, a text,

1021
00:56:20,200 --> 00:56:20,700
Right.

1022
00:56:22,400 --> 00:56:26,800
Is I think what we actually want could be wrong, is what we actually

1023
00:56:26,800 --> 00:56:27,300
want.

1024
00:56:28,900 --> 00:56:32,600
Which unfortunately, I don't know where the values are.

1025
00:56:36,700 --> 00:56:41,900
Let's see, sorry, this is a bit boring here.

1026
00:56:41,900 --> 00:56:43,800
It is finally

1027
00:56:45,300 --> 00:56:46,600
Texture image specification.

1028
00:56:47,200 --> 00:56:51,700
And so you can see the internal formats listed srgb, a text srgb

1029
00:56:51,700 --> 00:56:52,900
Alpha, a text.

1030
00:56:53,000 --> 00:56:58,000
And so instead of telling it that we have a GL rgba 8 texture, we want

1031
00:56:58,000 --> 00:56:58,500
to tell it that.

1032
00:56:58,500 --> 00:56:59,500
We have an srgb.

1033
00:56:59,500 --> 00:56:59,800
Aah.

1034
00:57:00,000 --> 00:57:03,600
Alpha 8 x 10, EXT texture, right?

1035
00:57:03,900 --> 00:57:07,500
So really what wants to happen here is we want to do something like

1036
00:57:07,500 --> 00:57:08,600
this, right?

1037
00:57:08,700 --> 00:57:11,700
We want to do something like whatever the type of this thing is, I

1038
00:57:11,700 --> 00:57:13,600
believe this is a glue in, right?

1039
00:57:14,900 --> 00:57:20,100
So we have our default, internal or opengl.

1040
00:57:22,000 --> 00:57:24,800
Default, internal texture format, right?

1041
00:57:24,900 --> 00:57:30,500
And that format is going to be by default rgba 8.

1042
00:57:32,800 --> 00:57:37,500
But if we detect that the extension is present, then we will set it to

1043
00:57:37,600 --> 00:57:38,400
srgb.

1044
00:57:38,400 --> 00:57:42,400
A alpha a text which means now our textures will always be sampled

1045
00:57:42,400 --> 00:57:44,300
properly, right?

1046
00:57:44,900 --> 00:57:47,200
And that doesn't actually help our

1047
00:57:49,000 --> 00:57:52,000
That doesn't actually help the frame buffer part of things, but that

1048
00:57:52,000 --> 00:57:57,200
will fix the texture part of things and so again I can go in here and

1049
00:57:57,200 --> 00:58:01,200
make that the one of our Global's here for the rendering.

1050
00:58:04,200 --> 00:58:04,800
Like so.

1051
00:58:06,600 --> 00:58:09,000
And then I can go ahead and make that.

1052
00:58:10,700 --> 00:58:11,800
Be something that we do.

1053
00:58:15,100 --> 00:58:18,300
Okay, then we do with 22 in it opengl.

1054
00:58:19,400 --> 00:58:23,900
So when we do win32 in opengl there and we go ahead and make this

1055
00:58:23,900 --> 00:58:27,400
happen, we can say, okay, the default route extra ferment is that if

1056
00:58:27,400 --> 00:58:31,900
the extension is present, then it's that right, or something like

1057
00:58:31,900 --> 00:58:33,800
this, that'll work, just fine.

1058
00:58:34,000 --> 00:58:36,200
And then the other only other thing that we're going to have to figure

1059
00:58:36,200 --> 00:58:36,800
out

1060
00:58:38,100 --> 00:58:40,700
Is we're going to have to figure out how to turn on the the frame

1061
00:58:40,700 --> 00:58:41,200
buffer.

1062
00:58:41,400 --> 00:58:45,500
So like srgb frame, buffer opengl.

1063
00:58:45,900 --> 00:58:49,000
And I don't remember what the enable B is for that, right?

1064
00:58:49,100 --> 00:58:53,100
It's I guess a steel frame buffer srgb, it's that guy right there.

1065
00:58:54,900 --> 00:58:59,200
So we need to also do call that V 0 and able to make sure that that's

1066
00:58:59,200 --> 00:58:59,500
on.

1067
00:58:59,700 --> 00:59:02,800
So, we need to do another thing to say, like the, do we have that

1068
00:59:03,000 --> 00:59:06,100
extension and if we do have that extension, then we're going to try

1069
00:59:06,100 --> 00:59:07,200
and enable GL frame.

1070
00:59:07,400 --> 00:59:08,700
For srgb.

1071
00:59:09,500 --> 00:59:11,600
Let's see here, GL frame buffer.

1072
00:59:15,200 --> 00:59:16,000
To tell it that.

1073
00:59:16,000 --> 00:59:20,700
Hey, by the way, we would like that to be on, right?

1074
00:59:21,600 --> 00:59:23,200
Let me see here.

1075
00:59:23,200 --> 00:59:24,200
So Jill frame buffer.

1076
00:59:24,200 --> 00:59:25,900
Srgb is from this extension.

1077
00:59:34,000 --> 00:59:35,900
Let's actually talk about anywhere, not really.

1078
00:59:38,600 --> 00:59:41,500
So anyway, so that's essentially what we have to do.

1079
00:59:41,800 --> 00:59:45,700
Like we have to do something like extension open GL.

1080
00:59:45,700 --> 00:59:47,500
Extension is available.

1081
00:59:50,200 --> 00:59:54,300
Like this in both cases, and then we would just do that switch.

1082
00:59:54,900 --> 00:59:59,600
Now, these values are, of course, not don't exist in our unknown.

1083
01:00:00,000 --> 01:00:02,000
No extended version of opengl.

1084
01:00:02,200 --> 01:00:07,600
So we will have to Define them to be something to be whatever their

1085
01:00:07,600 --> 01:00:09,700
actual values are, right?

1086
01:00:09,900 --> 01:00:13,400
And I thought the extensions were supposed to have what they are

1087
01:00:13,400 --> 01:00:14,300
defined to be.

1088
01:00:14,300 --> 01:00:17,400
I thought that was supposed to be in the extension, but I don't

1089
01:00:17,400 --> 01:00:23,900
actually see it here anywhere, but I suspect he'll extension header

1090
01:00:23,900 --> 01:00:24,500
file.

1091
01:00:24,900 --> 01:00:26,300
We could just use

1092
01:00:28,700 --> 01:00:29,600
Some stuff here.

1093
01:00:29,600 --> 01:00:33,500
So for example, Geo frame buffer srgb.

1094
01:00:33,700 --> 01:00:36,100
And what I've done here is, I've just gone to someone's header file.

1095
01:00:36,100 --> 01:00:41,700
Like the opengl core arm extensions, they just have them all in one

1096
01:00:41,700 --> 01:00:42,600
giant header file.

1097
01:00:42,600 --> 01:00:44,500
We can just grab the ones, we actually want.

1098
01:00:44,700 --> 01:00:45,800
So we want this one.

1099
01:00:48,800 --> 01:00:51,900
And we want srgb alpha 8.

1100
01:00:53,000 --> 01:00:53,400
Oops.

1101
01:00:58,600 --> 01:01:00,100
Let's see where that's at.

1102
01:01:00,200 --> 01:01:03,700
S, RG abuse to be 88.

1103
01:01:07,500 --> 01:01:08,100
There it is.

1104
01:01:13,200 --> 01:01:18,200
So that's a those are the two that we actually want now GLS.

1105
01:01:18,200 --> 01:01:23,700
Rgba alpha 8 is not the EXT 1, which I wonder if that superseded, it

1106
01:01:23,700 --> 01:01:28,300
may well have because these sorts of things as they go through their

1107
01:01:28,300 --> 01:01:28,800
little

1108
01:01:30,000 --> 01:01:31,300
Yeah, it did.

1109
01:01:31,800 --> 01:01:36,000
So the way that the opengl ARB ARB

1110
01:01:37,200 --> 01:01:38,000
Explain this.

1111
01:01:40,100 --> 01:01:44,200
Barb, I believe stands for architecture.

1112
01:01:47,600 --> 01:01:48,500
Review.

1113
01:01:50,300 --> 01:01:51,000
Bored.

1114
01:01:54,800 --> 01:01:55,300
Right.

1115
01:01:55,800 --> 01:01:58,800
So what happens is, the way these extensions work, is somebody

1116
01:01:58,800 --> 01:02:02,100
proposes an extension and implemented in their Hardware.

1117
01:02:02,100 --> 01:02:05,700
So like Nvidia says, oh I want to implement this srgb thing, they do

1118
01:02:05,700 --> 01:02:09,300
it and then they propose it to the ARB as an extension.

1119
01:02:10,200 --> 01:02:13,000
It's already implanted in their drivers with their name, right?

1120
01:02:13,000 --> 01:02:15,500
It'll have like an Nvidia extension or something.

1121
01:02:15,800 --> 01:02:19,200
If it gets extent if multiple vendors decide to implement it, the name

1122
01:02:19,200 --> 01:02:20,600
becomes EXT.

1123
01:02:21,300 --> 01:02:24,100
And then if the architecture review board says, we want to make this a

1124
01:02:24,100 --> 01:02:24,400
permanent.

1125
01:02:24,500 --> 01:02:26,200
Part of opengl going forwards.

1126
01:02:26,200 --> 01:02:30,400
Then it becomes an ARB and so the names change a lot, they go from

1127
01:02:30,400 --> 01:02:33,800
like vendors to the Vic to multi-vendor than to ARP and then they're

1128
01:02:33,800 --> 01:02:35,400
just integrated into opengl entirely.

1129
01:02:36,400 --> 01:02:41,300
And so this is the final one that got actually in put into our and so

1130
01:02:41,300 --> 01:02:44,700
those are the the values that we actually would want to ask for, I

1131
01:02:44,700 --> 01:02:45,300
believe.

1132
01:02:45,500 --> 01:02:49,000
Now I'm going to actually comment these out so we're not going to even

1133
01:02:49,000 --> 01:02:50,700
check to see if these extensions are available.

1134
01:02:50,700 --> 01:02:52,600
We're just going to go ahead and call these right now.

1135
01:02:54,900 --> 01:02:56,200
Which is not safe.

1136
01:02:57,300 --> 01:02:59,700
So we don't actually want to do that tomorrow.

1137
01:02:59,700 --> 01:02:59,900
We're

1138
01:03:00,000 --> 01:03:03,900
I want to actually make something that does check to see if it's there

1139
01:03:03,900 --> 01:03:05,600
but for now we don't actually have to do that.

1140
01:03:05,600 --> 01:03:08,000
We can just call it and blissfully unaware of it, right?

1141
01:03:08,900 --> 01:03:13,100
So this guy, these guys, if these people want access to these

1142
01:03:13,100 --> 01:03:13,900
Global's,

1143
01:03:18,200 --> 01:03:19,600
we're going to have to do something like that.

1144
01:03:25,000 --> 01:03:30,000
And this guy is this but that's really it for turning on srgb.

1145
01:03:30,000 --> 01:03:34,700
It's just a question of setting, some Flags like in that fashion and

1146
01:03:34,700 --> 01:03:42,200
this might just work or it might not will find out so that I believe

1147
01:03:42,200 --> 01:03:45,300
is the more correct way of doing it.

1148
01:03:45,300 --> 01:03:49,400
Now our textures aren't really srgb their squared which is not quite

1149
01:03:49,400 --> 01:03:49,900
right.

1150
01:03:50,200 --> 01:03:53,900
So really what we probably want to do in the future is I'll modify our

1151
01:03:53,900 --> 01:03:54,500
art packs.

1152
01:03:54,700 --> 01:03:56,400
Use actual srgb.

1153
01:03:56,900 --> 01:03:58,400
So that it'll be 100% correct.

1154
01:03:58,400 --> 01:04:00,900
And our software renderer will be the one that's less accurate,

1155
01:04:00,900 --> 01:04:02,200
because that's really the way it should be.

1156
01:04:02,200 --> 01:04:04,000
I mean, the hardware should be the most accurate version.

1157
01:04:04,000 --> 01:04:06,500
Our software under should be the one cutting Corners, right?

1158
01:04:07,500 --> 01:04:10,300
So, now we've got actual srgb, rendering happening.

1159
01:04:11,100 --> 01:04:15,700
And I feel like it, you can already kind of see that the alpha is a

1160
01:04:15,700 --> 01:04:17,100
little bit better, right?

1161
01:04:18,900 --> 01:04:22,100
So it definitely looks a little less janky to me as it is at the

1162
01:04:22,100 --> 01:04:22,800
moment.

1163
01:04:23,200 --> 01:04:28,000
Anyway, so that that's again, the just the basics of the extension

1164
01:04:28,000 --> 01:04:31,600
stuff will get it into a little bit more extension stuff, a little

1165
01:04:31,600 --> 01:04:35,500
later on, but that's that's basically what that's about.

1166
01:04:35,800 --> 01:04:44,700
And yeah, and now we'll go ahead and we'll go to the the Q&A perhaps.

1167
01:04:50,000 --> 01:04:52,700
And yeah you can sort of see that there's like I feel like there's a

1168
01:04:52,700 --> 01:04:56,800
lot less sort of fringing around the alpha as well, which is nice.

1169
01:04:58,800 --> 01:05:01,100
But again, it's still going to be a little bit wrong.

1170
01:05:02,500 --> 01:05:06,300
Just because of the way the because we're not our textures are not

1171
01:05:06,300 --> 01:05:07,300
actually srgb.

1172
01:05:09,100 --> 01:05:09,500
Okay.

1173
01:05:19,500 --> 01:05:23,300
So yeah, let's just put it to do in there.

1174
01:05:35,600 --> 01:05:38,200
Let's see, will you be implementing multiple render pass depending on

1175
01:05:38,200 --> 01:05:41,100
your opengl context version or available extensions at run time?

1176
01:05:42,000 --> 01:05:43,000
Probably not.

1177
01:05:43,000 --> 01:05:47,000
Because I don't think we're asking for like in a 2-D game, it's pretty

1178
01:05:47,000 --> 01:05:48,600
hard to ask for extensions.

1179
01:05:50,000 --> 01:05:52,600
That aren't there, right?

1180
01:05:53,900 --> 01:05:55,300
So I doubt it.

1181
01:05:56,100 --> 01:05:59,900
I mean, if there might be like, if we find, there's one thing.

1182
01:06:00,000 --> 01:06:00,700
We want to use that.

1183
01:06:00,700 --> 01:06:03,300
We just don't know if it's there, then we might have a little

1184
01:06:03,300 --> 01:06:05,000
predicated thing that's like if it's here do this.

1185
01:06:05,000 --> 01:06:06,000
Otherwise do that.

1186
01:06:09,400 --> 01:06:11,800
The size it, can you fix the Santa sorting?

1187
01:06:12,000 --> 01:06:13,800
Yeah, we can fix the Santa sorting.

1188
01:06:21,800 --> 01:06:30,700
I don't actually remember how any of this stuff worked, but I assume

1189
01:06:30,700 --> 01:06:35,700
that it's just like, because of this situation here.

1190
01:06:44,400 --> 01:06:48,500
So what is which one is the Santa situation?

1191
01:06:48,500 --> 01:06:49,000
Is it is?

1192
01:06:49,000 --> 01:06:52,100
It intro layers for think it's this one.

1193
01:06:53,300 --> 01:06:54,700
So, I'm not sure.

1194
01:07:04,600 --> 01:07:07,400
I think it's just because this is at negative four and so are all

1195
01:07:07,400 --> 01:07:07,900
these

1196
01:07:09,000 --> 01:07:09,900
I think that's it.

1197
01:07:10,500 --> 01:07:13,700
So we have two choices with, for how to fix that, right?

1198
01:07:15,000 --> 01:07:18,400
We can just change the order because I believe our sword is always

1199
01:07:18,400 --> 01:07:19,000
stable.

1200
01:07:21,700 --> 01:07:25,300
So that would fix the Santa sorting the other way to do it is put the

1201
01:07:25,300 --> 01:07:27,700
other one, two, slightly different Z.

1202
01:07:45,500 --> 01:07:46,600
Just wait for it.

1203
01:07:46,800 --> 01:07:48,000
Wait for Santa.

1204
01:07:54,500 --> 01:07:55,200
There he is.

1205
01:07:57,600 --> 01:07:58,800
Why is he all?

1206
01:08:01,600 --> 01:08:03,200
I don't know what's going on there.

1207
01:08:05,700 --> 01:08:07,200
Did I do something weird is changing?

1208
01:08:07,200 --> 01:08:08,100
The order of those.

1209
01:08:08,100 --> 01:08:10,600
Does that do something strange that?

1210
01:08:10,600 --> 01:08:11,400
I don't remember.

1211
01:08:25,500 --> 01:08:26,500
It's very confusing.

1212
01:08:27,000 --> 01:08:29,000
I really know why that was happening.

1213
01:08:31,399 --> 01:08:32,500
I'm going to try.

1214
01:08:33,899 --> 01:08:37,100
Putting the background at a slightly further distance, just to see

1215
01:08:37,100 --> 01:08:38,100
what's going on there.

1216
01:08:40,200 --> 01:08:41,399
While I answer to the question.

1217
01:09:09,300 --> 01:09:12,300
Kiss there, a bunch of questions here that are pretty good.

1218
01:09:18,100 --> 01:09:18,600
Weird.

1219
01:09:18,600 --> 01:09:21,899
So for some reason changing the order really mattered a lot there.

1220
01:09:23,200 --> 01:09:29,399
Why is that, is there something special about the first layer that I

1221
01:09:29,399 --> 01:09:31,200
don't even know about.

1222
01:09:35,600 --> 01:09:38,100
You must be that the sort isn't actually stable.

1223
01:09:38,100 --> 01:09:38,500
I don't know.

1224
01:09:38,500 --> 01:09:39,200
That's weird.

1225
01:09:39,500 --> 01:09:40,399
Anyway, that's fine.

1226
01:09:42,300 --> 01:09:43,800
Let me take some more questions here.

1227
01:09:48,100 --> 01:09:51,399
Okay, your maximum frame times about 2 to 3 milliseconds, without

1228
01:09:51,399 --> 01:09:52,200
vsync enabled.

1229
01:09:52,200 --> 01:09:55,100
But with it enabled, I see it stays at 60 ml s supposed to time, but

1230
01:09:55,100 --> 01:09:56,700
sometimes goes to 70 most, I guess.

1231
01:09:56,700 --> 01:09:58,300
Does that mean it will skip a frame?

1232
01:09:58,700 --> 01:10:00,100
Is that a problem with vsync?

1233
01:10:00,600 --> 01:10:01,000
No.

1234
01:10:01,000 --> 01:10:03,400
So that's, that's not really what's happening.

1235
01:10:04,500 --> 01:10:07,300
So, and in fact, I should make this very clear because this was

1236
01:10:07,300 --> 01:10:10,700
something that people were confused about before for a totally

1237
01:10:10,700 --> 01:10:11,200
different reason.

1238
01:10:11,200 --> 01:10:13,200
And so let me just kind of try to hammer it home

1239
01:10:14,900 --> 01:10:18,500
All right, so in our code, we have a call to swap buffers.

1240
01:10:20,800 --> 01:10:23,000
So what happens is everything?

1241
01:10:25,700 --> 01:10:29,500
Step 1, everything step to swap buffers right?

1242
01:10:29,700 --> 01:10:31,200
Step 3, everything.

1243
01:10:33,400 --> 01:10:34,800
Step four, swap buffers.

1244
01:10:37,700 --> 01:10:38,300
And so on.

1245
01:10:39,000 --> 01:10:41,400
Okay, so this is the game Loop, right?

1246
01:10:41,400 --> 01:10:44,400
The game Loop does all the stuff at call swap buffers and all the

1247
01:10:44,400 --> 01:10:47,700
stuff swap buffers, all the stuff write all the code in between the

1248
01:10:47,700 --> 01:10:51,700
swap buffers and swap buffers is the thing that tells opengl we're

1249
01:10:51,700 --> 01:10:52,400
done with the frame.

1250
01:10:52,400 --> 01:10:55,500
So go do all the stuff and and display it right.

1251
01:10:56,300 --> 01:11:00,500
And some people were under the misconception that this means wait for

1252
01:11:00,500 --> 01:11:04,000
that, it doesn't swap buffers.

1253
01:11:04,000 --> 01:11:05,200
Just means that we're done.

1254
01:11:05,900 --> 01:11:07,300
It doesn't mean that we stop.

1255
01:11:08,200 --> 01:11:11,300
So it can roll straight on through the swap buffers.

1256
01:11:11,400 --> 01:11:14,600
It'll, it's just the telling the driver, you can go kick off a frame.

1257
01:11:16,200 --> 01:11:19,800
So what actually happens is we plow through here, we call the swap

1258
01:11:19,800 --> 01:11:23,200
buffers call back, kicks off the graphics to let it know.

1259
01:11:23,200 --> 01:11:26,900
It can start rendering if it hasn't already which I probably actually

1260
01:11:26,900 --> 01:11:28,700
has started processing right?

1261
01:11:30,300 --> 01:11:33,800
But we keep going and then we get to the next swap buffers and we kick

1262
01:11:33,800 --> 01:11:34,800
that off too.

1263
01:11:36,200 --> 01:11:36,800
Right?

1264
01:11:37,000 --> 01:11:40,400
Because remember, when we don't have vsync enabled, we only take two

1265
01:11:40,400 --> 01:11:41,900
milliseconds to sink a frame.

1266
01:11:42,500 --> 01:11:43,000
Okay.

1267
01:11:43,600 --> 01:11:44,700
So we think a frame.

1268
01:11:44,700 --> 01:11:45,700
This is two milliseconds.

1269
01:11:45,700 --> 01:11:47,500
We think another frame into Ms.

1270
01:11:47,600 --> 01:11:50,200
We could even think a third frame potentially

1271
01:11:51,300 --> 01:11:52,000
Right?

1272
01:11:53,400 --> 01:11:57,600
And this Frame will not even have been shown on the screen yet.

1273
01:11:58,800 --> 01:11:59,800
Then what will happen is?

1274
01:12:00,200 --> 01:12:04,200
Some point depending on how the graphics card has chosen to set itself

1275
01:12:04,200 --> 01:12:05,400
up, right?

1276
01:12:06,300 --> 01:12:08,300
Whether it's a double.

1277
01:12:09,700 --> 01:12:12,300
Or triple buffered, right?

1278
01:12:16,100 --> 01:12:19,400
At some point, we'll go to a swap buffers and it's like I'm too.

1279
01:12:19,400 --> 01:12:21,900
I'm, I can't take any more stuff.

1280
01:12:22,300 --> 01:12:27,700
I'm too far behind now and that is when we will actually wait,

1281
01:12:30,200 --> 01:12:31,100
If that makes sense.

1282
01:12:32,200 --> 01:12:37,600
So as far as I know and I have not looked at this recently, so maybe

1283
01:12:37,600 --> 01:12:39,200
this is old and someone's going to tell me.

1284
01:12:39,200 --> 01:12:41,000
No, that doesn't do that anymore.

1285
01:12:41,600 --> 01:12:46,200
But as far as I know, swap buffers doesn't actually block your

1286
01:12:46,200 --> 01:12:47,100
process.

1287
01:12:48,100 --> 01:12:49,800
Or I should say the that thread.

1288
01:12:50,900 --> 01:12:54,300
It doesn't actually block your thread until the driver actually

1289
01:12:54,300 --> 01:12:54,900
decides.

1290
01:12:54,900 --> 01:12:59,700
It doesn't want any more info from you, the driver if it wanted to

1291
01:13:00,100 --> 01:13:03,900
could decide that it quadruple buffers, right?

1292
01:13:04,800 --> 01:13:07,100
And then it's four frames ahead all the time.

1293
01:13:07,100 --> 01:13:08,500
Our game is for frames ahead.

1294
01:13:08,500 --> 01:13:13,600
And, you know, the, the graphics card is it sort of chewing on all

1295
01:13:13,600 --> 01:13:16,600
those frames and displaying them right now.

1296
01:13:16,900 --> 01:13:19,300
The graphics card, probably could let you get very far ahead because

1297
01:13:19,300 --> 01:13:20,500
there's a lot of memory and

1298
01:13:20,700 --> 01:13:22,100
It can do a lot of stuff, right?

1299
01:13:23,800 --> 01:13:28,000
But the reason it doesn't is because you don't delete in C increases,

1300
01:13:28,100 --> 01:13:32,100
however, long you do this for right because every one of these frames

1301
01:13:32,100 --> 01:13:33,800
that took two milliseconds to compute.

1302
01:13:33,800 --> 01:13:38,300
Take, 16 milliseconds to display when you wait for the vsync, right?

1303
01:13:39,100 --> 01:13:42,500
So, the more frames we sink in the pipeline, the more latency there is

1304
01:13:42,500 --> 01:13:43,400
in the controller.

1305
01:13:44,600 --> 01:13:48,200
So, while we do want to be one frame ahead because the graphics card

1306
01:13:48,200 --> 01:13:49,900
has to have something to work on while we're working.

1307
01:13:49,900 --> 01:13:51,400
We want is some overlap there.

1308
01:13:51,900 --> 01:13:55,000
We don't want to be like 12 frames ahead because now all of a sudden

1309
01:13:55,000 --> 01:13:56,400
you can feel the lag.

1310
01:13:57,600 --> 01:14:00,600
And now that that action games not going to feel very good anymore,

1311
01:14:00,700 --> 01:14:01,200
right?

1312
01:14:03,000 --> 01:14:07,100
but so what you're seeing when we report the frame time has nothing to

1313
01:14:07,100 --> 01:14:11,100
do, it's literally unrelated that number

1314
01:14:13,000 --> 01:14:17,600
to waiting for a frame to be displayed.

1315
01:14:17,600 --> 01:14:23,000
What it is is it's waiting for the driver to tell us when it wants

1316
01:14:23,000 --> 01:14:24,000
more information.

1317
01:14:25,100 --> 01:14:29,700
and the reason it comes out to 60 milliseconds is because, hey, since

1318
01:14:29,700 --> 01:14:34,900
it's waiting till the vsync to display the next frame, the point where

1319
01:14:34,900 --> 01:14:39,300
it tells us when it wants more information, after it's gotten this far

1320
01:14:39,300 --> 01:14:40,700
ahead, as it wants to get

1321
01:14:41,800 --> 01:14:47,000
That point will therefore be very close to the frame time but they're

1322
01:14:47,000 --> 01:14:47,400
not.

1323
01:14:47,400 --> 01:14:50,400
They could they could be literally completely different if the driver

1324
01:14:50,400 --> 01:14:51,200
wanted them to be.

1325
01:14:51,600 --> 01:14:55,600
There's no real correlation between them other than the fact that a

1326
01:14:55,600 --> 01:14:58,600
well working driver is basing it off of that frame time.

1327
01:14:59,400 --> 01:14:59,800
So yeah,

1328
01:15:00,000 --> 01:15:00,700
Has nothing.

1329
01:15:00,700 --> 01:15:04,300
We won't learn in any danger of missing a frame because of that, that

1330
01:15:04,300 --> 01:15:04,900
makes sense.

1331
01:15:08,000 --> 01:15:11,800
He's object-oriented, programming bad in general, or for game purposes

1332
01:15:11,800 --> 01:15:13,500
and why it's bad in general.

1333
01:15:13,500 --> 01:15:18,800
And I've covered it many times Rohit and I believe you do a stir Stir

1334
01:15:18,800 --> 01:15:21,700
of jail extensions, then check if the end of the extension is no a

1335
01:15:21,700 --> 01:15:23,900
space or tab to see if it exists.

1336
01:15:24,600 --> 01:15:25,400
Yeah we can do that.

1337
01:15:25,400 --> 01:15:28,100
But I think what I'd rather do is just parse it and have just a little

1338
01:15:28,100 --> 01:15:30,600
hash table that tells us whether the extensions that we want or there

1339
01:15:30,600 --> 01:15:31,800
or not, right?

1340
01:15:34,500 --> 01:15:34,900
Soy sauce.

1341
01:15:34,900 --> 01:15:37,800
The kid is there any reason to make the swap out of a larger than one?

1342
01:15:37,800 --> 01:15:38,300
Yes.

1343
01:15:38,300 --> 01:15:41,200
And we will probably do it ourselves on handmade hero.

1344
01:15:41,900 --> 01:15:46,500
The reason is because let's suppose that we're on a machine and we

1345
01:15:46,500 --> 01:15:50,400
find that we are unable to hit the actual frame rate of the monitor,

1346
01:15:51,000 --> 01:15:51,600
right?

1347
01:15:53,900 --> 01:15:55,900
so we're doing a thing where we're like, okay,

1348
01:15:58,000 --> 01:16:01,700
You know, we wrote frame BC whatever and this each one of these is

1349
01:16:01,700 --> 01:16:04,600
like 60 milliseconds, 16 milliseconds or whatever.

1350
01:16:04,800 --> 01:16:08,300
But the machines really slow and we're not hitting it, right?

1351
01:16:08,300 --> 01:16:12,400
So we're not hitting these boundaries, we're coming in late, what we

1352
01:16:12,400 --> 01:16:15,700
can then do is down shift to 33 milliseconds per frame and set the

1353
01:16:15,700 --> 01:16:16,900
swap interval to to

1354
01:16:19,400 --> 01:16:22,700
so that we can run at 30 frames a second locked, if we can't run at

1355
01:16:22,700 --> 01:16:23,200
60,

1356
01:16:24,700 --> 01:16:25,200
Right.

1357
01:16:33,100 --> 01:16:35,100
Is there an asynchronous way to do vsync?

1358
01:16:35,100 --> 01:16:39,300
I mean a way to ask opengl if it has displayed the frame or how much

1359
01:16:39,300 --> 01:16:43,800
time you have to wait until the frame is going to be displayed, not

1360
01:16:43,800 --> 01:16:45,200
that I know of

1361
01:16:49,200 --> 01:16:55,300
There might be in like in very recent opengl like four point x, it

1362
01:16:55,300 --> 01:16:55,700
spot.

1363
01:16:55,700 --> 01:16:57,000
Maybe there's a

1364
01:16:58,500 --> 01:17:01,000
they're like there might be a

1365
01:17:02,400 --> 01:17:06,000
Offense of some kind you can set for that.

1366
01:17:07,800 --> 01:17:11,100
But I don't know, I've certainly never done that, but that doesn't

1367
01:17:11,100 --> 01:17:14,100
mean that there isn't an extension or something that does do it.

1368
01:17:20,200 --> 01:17:22,800
Easy odd, dito Ramirez.

1369
01:17:22,800 --> 01:17:26,700
How would you allow the game to run at a non 60 frames a second rate

1370
01:17:26,700 --> 01:17:29,500
and not speed up slow down the animation speed?

1371
01:17:30,100 --> 01:17:32,200
Well it's pretty simple straightforward right?

1372
01:17:33,100 --> 01:17:35,600
Our game already just runs off of a DT.

1373
01:17:37,800 --> 01:17:43,600
So this value right here, is just as long as when you run the as long

1374
01:17:43,600 --> 01:17:47,600
as when you call the game game update and render, as long as you pass

1375
01:17:47,600 --> 01:17:50,900
the correct value for that, for whatever your update rate, actually,

1376
01:17:50,900 --> 01:17:52,200
is then you're fine.

1377
01:17:55,500 --> 01:17:56,200
K, apologies.

1378
01:17:56,200 --> 01:17:58,600
If you explained this before or since rotation is stored in the upper

1379
01:17:58,600 --> 01:17:59,800
3x3, part of the

1380
01:18:00,000 --> 01:18:03,800
Matrix and scale is stored in the 0, 0, 1 1, 2 2 diagonal.

1381
01:18:04,200 --> 01:18:05,800
How do they play well together?

1382
01:18:05,800 --> 01:18:07,700
I mean, wouldn't change the rotation or scale?

1383
01:18:07,700 --> 01:18:08,700
Affect the other.

1384
01:18:09,300 --> 01:18:11,100
Let's hold off on that question for a second.

1385
01:18:11,100 --> 01:18:15,400
Let me see if there's anything related to what we're doing right now

1386
01:18:15,400 --> 01:18:16,100
first.

1387
01:18:18,200 --> 01:18:19,900
Quickly games, you mentioned 120 hertz.

1388
01:18:19,900 --> 01:18:22,000
How do you handle skipping every other vsync event?

1389
01:18:22,000 --> 01:18:24,400
Do you just detect the monetary face Rhett rate?

1390
01:18:24,400 --> 01:18:28,600
And if one trying hurt swap twice in a row, yeah, basically if we

1391
01:18:28,600 --> 01:18:31,900
detect the monitor, refresh rate is higher than 60 hertz.

1392
01:18:32,000 --> 01:18:37,900
What we can do is set swap interval to whatever that divisor is.

1393
01:18:39,400 --> 01:18:40,200
At least we can try.

1394
01:18:41,800 --> 01:18:42,500
Connor rents.

1395
01:18:42,500 --> 01:18:44,000
If vsync is disabled in Windows.

1396
01:18:44,000 --> 01:18:45,600
Will there be no vsync at all?

1397
01:18:45,600 --> 01:18:46,300
Correct.

1398
01:18:46,300 --> 01:18:50,400
If vsync is disabled in Windows, we will not get it and that's why I

1399
01:18:50,400 --> 01:18:53,800
say it's a request, not a guarantee.

1400
01:19:00,000 --> 01:19:02,200
The glove in the scene where Krampus is giving it to the kid.

1401
01:19:02,200 --> 01:19:05,300
Looks a bit strange with the thumb pointing downwards.

1402
01:19:05,800 --> 01:19:07,900
Okay, noted long billion?

1403
01:19:07,900 --> 01:19:10,800
Why does he sink cause input lag on some machines?

1404
01:19:12,000 --> 01:19:14,700
Because again, it means that there's a deeper buffering.

1405
01:19:15,500 --> 01:19:20,300
Like these think adds latency just period, right?

1406
01:19:20,400 --> 01:19:24,400
Because it's delaying when a friend is frame is displayed until the

1407
01:19:24,400 --> 01:19:26,400
point when it won't tear.

1408
01:19:26,700 --> 01:19:28,400
And so there's always going to be a little bit of latency

1409
01:19:28,500 --> 01:19:32,900
So it doesn't add much, but it can add some and especially if the

1410
01:19:32,900 --> 01:19:34,100
frame rate is low.

1411
01:19:34,800 --> 01:19:38,400
Look at the frame rates, only 34 frames a second or 15 frames a

1412
01:19:38,400 --> 01:19:38,700
second.

1413
01:19:38,700 --> 01:19:39,900
20 frames a second.

1414
01:19:42,200 --> 01:19:46,500
You end up with with a lot with some, some possibly noticeable time

1415
01:19:46,500 --> 01:19:47,200
being added in there.

1416
01:19:51,600 --> 01:19:54,200
What are the trade-offs to storing the textures on disk in the same

1417
01:19:54,200 --> 01:19:58,100
linear Colour space for Matt you were using you don't really want to

1418
01:19:58,100 --> 01:20:02,000
store Textures in a linear Colour space because you waste a lot of

1419
01:20:02,000 --> 01:20:02,500
bits.

1420
01:20:03,100 --> 01:20:08,200
The human eye doesn't perceive dark tones the same way it perceives

1421
01:20:08,200 --> 01:20:09,000
light tones.

1422
01:20:09,400 --> 01:20:13,000
Light tones, need less data than dark tones to represent properly.

1423
01:20:13,000 --> 01:20:16,200
So that's why we have srgb in the first place.

1424
01:20:16,600 --> 01:20:20,400
So in order to get better color quality for the same number of bits in

1425
01:20:20,400 --> 01:20:21,200
your textures, you

1426
01:20:21,400 --> 01:20:27,000
To store them nonlinearly and that's why we do this nonsense with

1427
01:20:27,000 --> 01:20:30,700
changing from the nonlinear space to the linear space to operate on

1428
01:20:30,700 --> 01:20:31,000
them.

1429
01:20:31,000 --> 01:20:34,000
And then putting them back at says so that we don't use unnecessary

1430
01:20:34,000 --> 01:20:35,400
amounts of data.

1431
01:20:37,600 --> 01:20:38,400
See Flixster.

1432
01:20:38,400 --> 01:20:40,700
Any update on when to implement sound effects?

1433
01:20:40,900 --> 01:20:43,100
Who knows whenever we decide?

1434
01:20:43,100 --> 01:20:45,000
That's a good idea, Garland.

1435
01:20:45,000 --> 01:20:45,300
A balloon.

1436
01:20:45,300 --> 01:20:47,000
What is the bottle full of that?

1437
01:20:47,900 --> 01:20:49,100
What is the bottle full of that?

1438
01:20:49,100 --> 01:20:49,900
John post on Twitter?

1439
01:20:49,900 --> 01:20:51,000
I have no idea.

1440
01:20:54,400 --> 01:20:56,700
Nibbler, we're still fading from to the desktop.

1441
01:20:56,700 --> 01:20:58,200
Did you have to re-implement that?

1442
01:20:58,200 --> 01:20:59,000
Is it being Hardware?

1443
01:20:59,000 --> 01:20:59,700
Rendered is the

1444
01:21:00,000 --> 01:21:00,800
Here to stay.

1445
01:21:01,400 --> 01:21:05,600
So the reason that that's back is because when we switched opengl to

1446
01:21:05,600 --> 01:21:10,500
being to not be double buffered, and is said to be just background

1447
01:21:10,500 --> 01:21:14,900
glitter, whatever the same thing that fixed OBS allows Are Over the

1448
01:21:14,900 --> 01:21:16,200
Top window to still work.

1449
01:21:16,900 --> 01:21:18,200
So that's why that's working.

1450
01:21:20,900 --> 01:21:24,200
With wiggle swap interval, do we still have to do sleep at the end of

1451
01:21:24,200 --> 01:21:24,800
the frame?

1452
01:21:24,800 --> 01:21:28,500
Could you also comment on GL finish gel flush and how they're used?

1453
01:21:28,600 --> 01:21:29,200
Sure.

1454
01:21:30,700 --> 01:21:37,600
So wiggle, swap interval, like I said, doesn't actually guarantee us

1455
01:21:37,600 --> 01:21:42,000
the vsync, so we don't have to sleep at the end of the frame.

1456
01:21:42,000 --> 01:21:46,500
If wiggle swap interval is working, but if it's not working, we will

1457
01:21:46,500 --> 01:21:47,500
probably have to.

1458
01:21:48,200 --> 01:21:51,700
But yet it will do a sleep there for us effectively, so we don't have

1459
01:21:51,700 --> 01:21:53,900
to sleep if we will swap intervals, sleeping.

1460
01:21:55,200 --> 01:21:58,300
So, so that's a good thing Geo.

1461
01:21:58,300 --> 01:22:02,300
Finish until flush or not really relevant for us GL, finishing GL

1462
01:22:02,300 --> 01:22:02,700
flush.

1463
01:22:02,700 --> 01:22:07,200
Just tell the graphics card about particular times when you want stuff

1464
01:22:07,200 --> 01:22:07,800
to happen.

1465
01:22:08,100 --> 01:22:12,900
So, for example, if you want to force all rendering to finish, you can

1466
01:22:12,900 --> 01:22:15,100
call GL flush.

1467
01:22:15,100 --> 01:22:18,300
I believe, I don't remember, which is which they each one of them, is

1468
01:22:18,300 --> 01:22:23,400
a more stringent guarantee than the other and I don't remember which

1469
01:22:23,400 --> 01:22:24,700
one is the more stringent

1470
01:22:25,000 --> 01:22:26,400
I never call these functions.

1471
01:22:32,800 --> 01:22:35,100
Let's cgl flush.

1472
01:22:42,400 --> 01:22:43,400
Yeah.

1473
01:22:47,800 --> 01:22:52,400
So I guess what I would say is Gee L finish from Rich briefly reading

1474
01:22:52,400 --> 01:22:53,300
it GL.

1475
01:22:53,300 --> 01:22:56,200
Finish is the full completion one.

1476
01:22:56,400 --> 01:23:00,100
So basically GL finish says I want to wait until you finish all the

1477
01:23:00,100 --> 01:23:03,200
rendering that you have to do and don't come back to me until that's

1478
01:23:03,200 --> 01:23:03,700
true.

1479
01:23:04,100 --> 01:23:05,000
So that pipeline.

1480
01:23:05,000 --> 01:23:07,200
Where are saying, look, we kick off the renders and they're going

1481
01:23:07,200 --> 01:23:08,300
while we're doing stuff.

1482
01:23:08,400 --> 01:23:11,100
If you want to say no I want you to finish everything right now.

1483
01:23:11,100 --> 01:23:13,500
Please you could call GL finish.

1484
01:23:14,000 --> 01:23:15,700
We don't really want to do that.

1485
01:23:15,900 --> 01:23:17,100
So we don't call that

1486
01:23:17,600 --> 01:23:21,900
That's what that would be GL flush on the other hand is just a way of

1487
01:23:21,900 --> 01:23:22,200
saying.

1488
01:23:22,200 --> 01:23:26,600
Hey, if you're buffering anything right now, in anticipation of

1489
01:23:26,600 --> 01:23:31,300
kicking it off, I would like you to kick it off now, the don't wait

1490
01:23:31,300 --> 01:23:33,400
till it's done, but Kick It Off please.

1491
01:23:33,600 --> 01:23:38,700
So it's kind of like asking for like a buffer flush in like the C

1492
01:23:38,700 --> 01:23:43,200
runtime Library where you're saying, hey actually go flush this buffer

1493
01:23:43,300 --> 01:23:47,300
of stuff, I'm writing out to disk please, but it doesn't

1494
01:23:47,500 --> 01:23:50,500
Sara Lee guarantee that the operating system has finished writing it,

1495
01:23:50,500 --> 01:23:51,100
right?

1496
01:23:51,600 --> 01:23:53,500
It's just saying, hey, kick off the right.

1497
01:24:00,800 --> 01:24:03,800
Insofar, as we use x, swapped are negative 1 in the swap interval

1498
01:24:03,800 --> 01:24:04,100
call.

1499
01:24:04,300 --> 01:24:05,300
Hopefully, not

1500
01:24:07,000 --> 01:24:09,900
should we wait for swept over his weight exercise that returns to

1501
01:24:09,900 --> 01:24:10,300
fast?

1502
01:24:10,300 --> 01:24:11,800
Yes, that's what I was saying before.

1503
01:24:11,800 --> 01:24:13,700
Whereas like, we're still going to have to do

1504
01:24:16,000 --> 01:24:16,800
some work there.

1505
01:24:27,900 --> 01:24:31,000
Would it be better to minimize or maximize how much you do per frame?

1506
01:24:31,800 --> 01:24:35,100
Like, would it be better to make your program take any time that it

1507
01:24:35,100 --> 01:24:38,300
would be waiting for vsync and instead, focus it on performing, more

1508
01:24:38,300 --> 01:24:41,600
computations even potentially Computing, things ahead of time.

1509
01:24:43,100 --> 01:24:45,400
But that's what we are doing right?

1510
01:24:46,100 --> 01:24:49,800
That's exactly what what's what the swap buffers currently does.

1511
01:24:51,200 --> 01:24:56,100
Like I said, you come through to your swap buffers call and if if it

1512
01:24:56,100 --> 01:24:57,100
can keep buffering,

1513
01:24:57,200 --> 01:24:58,100
Up it will.

1514
01:24:59,000 --> 01:25:01,900
But if you've reached the end of the amount of buffering that the GP

1515
01:25:01,900 --> 01:25:03,200
is going to do, then you stop.

1516
01:25:03,600 --> 01:25:09,300
So you already are able to get quite far ahead right and but you don't

1517
01:25:09,300 --> 01:25:12,400
you just you gotta stop at some point otherwise your game runs off and

1518
01:25:12,400 --> 01:25:16,000
now your input lag is way too big, right?

1519
01:25:17,600 --> 01:25:20,000
So, you have to only buffer one or two frames.

1520
01:25:20,000 --> 01:25:21,400
You can't let it go too far.

1521
01:25:24,300 --> 01:25:26,500
Tiberian, how do you easily affect the vsync is active?

1522
01:25:26,500 --> 01:25:29,200
You just gotta check the monitor resync, refresh.

1523
01:25:29,300 --> 01:25:32,500
If you can and then see how long it takes and make sure there are

1524
01:25:32,500 --> 01:25:33,900
similar, right?

1525
01:25:52,000 --> 01:25:54,500
Okay, let's see here.

1526
01:25:54,500 --> 01:25:57,500
How do I vsync and prevent tearing with a dual monitor setup?

1527
01:25:57,500 --> 01:25:59,600
Is it any different than a single monitor setup?

1528
01:26:00,000 --> 01:26:06,600
Yeah, okay, so if you're, if you're on a dual monitor setup, you have

1529
01:26:06,600 --> 01:26:11,800
to do a thing called a swap swap chain, or a swap group.

1530
01:26:18,200 --> 01:26:20,800
Swap meet.

1531
01:26:24,100 --> 01:26:25,400
You got to do this stuff.

1532
01:26:27,400 --> 01:26:34,100
basically what you do is you say like, okay I'm going to like issue,

1533
01:26:34,100 --> 01:26:37,300
all the rendering calls, I need to each of these contexts, one for

1534
01:26:37,300 --> 01:26:43,900
each of the windows that I'm trying to draw and then depending on, you

1535
01:26:43,900 --> 01:26:47,400
know, all of those depending on assuming that you want them all to

1536
01:26:47,400 --> 01:26:50,000
update the same time, maybe you have, you know, if you have 12

1537
01:26:50,000 --> 01:26:53,200
monitors and you want six to be 1 times 6 to the other something but

1538
01:26:53,200 --> 01:26:55,400
assuming want them all at one time, they're all added something called

1539
01:26:55,400 --> 01:26:57,200
a swap group and then you say

1540
01:26:57,400 --> 01:26:59,700
okay, I need you to go ahead and update the

1541
01:27:00,000 --> 01:27:01,600
Group now, right?

1542
01:27:01,700 --> 01:27:03,400
And then that will flip them all at the same time.

1543
01:27:23,400 --> 01:27:24,800
All right, it is 6:30.

1544
01:27:24,800 --> 01:27:26,000
So

1545
01:27:31,900 --> 01:27:33,900
I think I will conclude.

1546
01:27:43,000 --> 01:27:43,700
Bloop.

1547
01:27:54,100 --> 01:27:55,100
All right.

1548
01:27:56,600 --> 01:27:57,900
I think that's everything.

1549
01:28:00,200 --> 01:28:02,300
Thank you everyone for joining me, for another episode of handmade

1550
01:28:02,300 --> 01:28:02,400
here.

1551
01:28:02,400 --> 01:28:03,400
It's been a pleasure coating with you.

1552
01:28:03,400 --> 01:28:07,500
As always, if you want to follow along at home, you can always

1553
01:28:08,100 --> 01:28:11,400
pre-order the game on him here at organic comes with a source code,

1554
01:28:11,400 --> 01:28:13,500
which you can use to follow the series if you would.

1555
01:28:13,500 --> 01:28:16,700
Like, that's a handmade here at or argh, there's also links to the

1556
01:28:16,700 --> 01:28:17,600
forums where you can go to.

1557
01:28:17,600 --> 01:28:18,700
Ask question about the series.

1558
01:28:18,900 --> 01:28:21,800
There's our patreon page where you can support the video series and

1559
01:28:21,800 --> 01:28:24,400
there is our tweet bot which of course tweets the schedule.

1560
01:28:24,400 --> 01:28:28,100
You if you want to catch the series live in, if you do want to catch

1561
01:28:28,100 --> 01:28:29,900
the series Live, you

1562
01:28:30,000 --> 01:28:32,000
Catch it live tomorrow at 5 p.m.

1563
01:28:32,000 --> 01:28:37,400
Pacific Standard Time if I'm not too sick by then and that will be our

1564
01:28:37,400 --> 01:28:39,400
last stream of the week.

1565
01:28:39,900 --> 01:28:41,400
That's about it for now.

1566
01:28:43,300 --> 01:28:45,600
I will catch you guys tomorrow.

1567
01:28:45,600 --> 01:28:48,800
Hopefully, until then have fun programming and I'll see you on the

1568
01:28:48,800 --> 01:28:49,100
internet.

1569
01:28:49,200 --> 01:28:49,600
Take it easy.

