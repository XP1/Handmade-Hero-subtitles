1
00:00:00,000 --> 00:00:03,900
Hello, everyone, and welcome to handmade hero.

2
00:00:03,900 --> 00:00:07,700
The show where we could complete game from scratch live on Twitch

3
00:00:07,700 --> 00:00:09,000
using nothing.

4
00:00:09,000 --> 00:00:09,700
But our own.

5
00:00:09,700 --> 00:00:11,400
Our very own handwritten code.

6
00:00:11,400 --> 00:00:12,200
No engine.

7
00:00:12,200 --> 00:00:13,200
No libraries for us.

8
00:00:13,200 --> 00:00:13,700
It is.

9
00:00:13,700 --> 00:00:17,300
It is our code or nothing here on handmade hero.

10
00:00:17,300 --> 00:00:21,900
And we are right in the middle of doing sort of our structure,

11
00:00:21,900 --> 00:00:27,200
structuring our sort of code, to into the, I guess I want to say one

12
00:00:27,200 --> 00:00:29,600
of the most important parts for

13
00:00:30,000 --> 00:00:33,300
later on in development, which is kind of how we process think about

14
00:00:33,300 --> 00:00:37,600
in-store entities in the world where they are spatially, how they get

15
00:00:37,600 --> 00:00:38,000
updated.

16
00:00:38,000 --> 00:00:41,200
That sort of thing, how they are tracked, how they interact with each

17
00:00:41,200 --> 00:00:41,500
other.

18
00:00:41,800 --> 00:00:43,900
That's what we're working on right now and we're partway through it.

19
00:00:43,900 --> 00:00:46,600
I want to get right back to it because we do have a lot of work to do.

20
00:00:46,800 --> 00:00:50,400
So, I'll briefly just say that if you are following along, if you

21
00:00:50,400 --> 00:00:53,300
preorder the game and you're following along with the source code at

22
00:00:53,300 --> 00:00:57,300
home, you should have received a link in your email that link allows

23
00:00:57,300 --> 00:00:58,500
you to download a zip file inside.

24
00:00:58,500 --> 00:00:59,800
That zip file is one ZIP for

25
00:01:00,000 --> 00:01:02,100
Every day since we're on day 57.

26
00:01:02,100 --> 00:01:04,099
Right now you want to undo unzip day?

27
00:01:04,099 --> 00:01:07,900
56 has source code and if you do that, you'll be exactly where I am

28
00:01:07,900 --> 00:01:08,300
right now.

29
00:01:08,300 --> 00:01:09,600
So you'll be able to follow along with everything.

30
00:01:09,600 --> 00:01:13,300
I do if you want to sort of see how to do it yourself.

31
00:01:15,800 --> 00:01:17,600
Okay, so let's take a look.

32
00:01:18,700 --> 00:01:22,100
If I remember correctly, yesterday, we had just started finished

33
00:01:22,100 --> 00:01:25,900
pulling things out into handmade World dot h and Dot CPP.

34
00:01:26,200 --> 00:01:31,000
And we were starting to kind of starting to get our entity update

35
00:01:31,000 --> 00:01:35,500
scheme in place, and figure out exactly how we wanted to figure, you

36
00:01:35,500 --> 00:01:37,900
know, move things in and out of our active set.

37
00:01:37,900 --> 00:01:41,800
And so on, and I had turned on smooth, scrolling for a minute, just to

38
00:01:41,800 --> 00:01:44,400
be kind of see what happens when we scroll around.

39
00:01:45,100 --> 00:01:48,300
And you'll also notice that we don't sort our enemies now, so,

40
00:01:48,500 --> 00:01:50,600
It is like the wall entities and stuff.

41
00:01:50,800 --> 00:01:53,300
We'll look clued, the player improperly because like I said, we

42
00:01:53,300 --> 00:01:55,000
haven't done any work on rendering yet.

43
00:01:55,300 --> 00:01:59,300
So we're best entirely doing this in whatever order the end of these

44
00:01:59,300 --> 00:02:00,100
happen to be in.

45
00:02:00,800 --> 00:02:04,900
So what I'd like to do now is I'd like to sort of go through and

46
00:02:04,900 --> 00:02:08,699
continue to refine that code the way that we had it, and what I'd like

47
00:02:08,699 --> 00:02:11,400
to do there is I'd like to start making a world.

48
00:02:11,400 --> 00:02:12,800
That's very, very large.

49
00:02:12,800 --> 00:02:16,000
I'd like to go ahead and start creating a world that's quite sizable

50
00:02:16,600 --> 00:02:18,000
so that we can start to see.

51
00:02:18,400 --> 00:02:18,700
Actly.

52
00:02:18,700 --> 00:02:22,300
What the world, how our code will behave?

53
00:02:22,300 --> 00:02:23,900
Under a heavier stress load?

54
00:02:24,100 --> 00:02:28,100
And we can start to do some things like verify that we are, in fact,

55
00:02:28,100 --> 00:02:30,100
moving things in and out of the active set.

56
00:02:30,100 --> 00:02:31,100
And we're not just

57
00:02:33,600 --> 00:02:35,700
Processing everything through the higher entities and so on.

58
00:02:36,200 --> 00:02:39,500
So I'd like to sort of get into sort of sort of going that direction

59
00:02:39,900 --> 00:02:43,500
and there's one really big thing that I'm not sure exactly how we want

60
00:02:43,500 --> 00:02:46,900
to do yet that also point out while we're doing that, which is kind of

61
00:02:46,900 --> 00:02:50,700
something that I think I'll probably come into into play later.

62
00:02:51,600 --> 00:02:53,500
I don't know exactly when we'll start to play with that.

63
00:02:53,500 --> 00:02:57,200
But let's go ahead and look at that now, so what I'd like to do is I'd

64
00:02:57,200 --> 00:02:59,800
first like to say, well, let's go ahead and start.

65
00:03:01,300 --> 00:03:05,100
Since we know that, we don't apparently at the moment have any real

66
00:03:05,100 --> 00:03:07,500
issues even though we're not doing anything.

67
00:03:07,500 --> 00:03:10,400
Particularly intelligent elegant, with our spatial stored sorting.

68
00:03:11,500 --> 00:03:16,700
Let's go ahead and start sort of creating a lot more of our rooms,

69
00:03:16,700 --> 00:03:17,000
right?

70
00:03:17,000 --> 00:03:22,100
Because we had a thing that would create a screen screens and we could

71
00:03:22,100 --> 00:03:26,300
basically pick as, you know, a number of rooms to create and it would

72
00:03:26,300 --> 00:03:28,300
go ahead and create as many as we told it to.

73
00:03:28,600 --> 00:03:30,200
So I'd be interested to see what happens.

74
00:03:30,400 --> 00:03:31,500
Just crank that number up.

75
00:03:31,500 --> 00:03:32,100
Right?

76
00:03:32,700 --> 00:03:35,500
And I believe, we are no longer creating all of our dummy entities

77
00:03:35,500 --> 00:03:35,700
here.

78
00:03:35,700 --> 00:03:38,700
So we should have plenty of room to create a fairly large number.

79
00:03:38,700 --> 00:03:42,200
So, you know, if we were to say, create something like 2,000 rooms

80
00:03:42,200 --> 00:03:44,400
now, instead of the number that we had been creating.

81
00:03:44,900 --> 00:03:48,100
I'd like to see first of all, what happens there, just to make sure

82
00:03:48,500 --> 00:03:53,100
that that actually happens properly and, you know, I don't have I

83
00:03:53,100 --> 00:03:56,300
realized I don't have anymore a key to like speed this fellow up,

84
00:03:56,700 --> 00:03:58,900
which does seem like something that I probably going to do if I'm

85
00:03:58,900 --> 00:04:00,200
walking through here.

86
00:04:00,300 --> 00:04:04,800
Here it also is the kind of thing where I wonder if I would also want

87
00:04:04,800 --> 00:04:08,800
to be able to zoom in and zoom out on the map or show some kind of at

88
00:04:08,800 --> 00:04:09,100
some point.

89
00:04:09,100 --> 00:04:12,400
We're going to have to have some way of showing the map a little, you

90
00:04:12,400 --> 00:04:14,500
know, clearer for our own debugging purposes.

91
00:04:14,700 --> 00:04:18,300
Unfortunately, since we don't have a render yet our options are a

92
00:04:18,300 --> 00:04:20,899
little bit Limited in terms of what we do and don't do, you know, that

93
00:04:20,899 --> 00:04:23,800
sort of thing but it does look like we don't really have any

94
00:04:23,800 --> 00:04:24,700
particular problems here.

95
00:04:24,700 --> 00:04:27,800
What I want to do though is I want to walk a little bit further away.

96
00:04:27,800 --> 00:04:30,000
I just want to take a little bit of sample here again since we don't

97
00:04:30,000 --> 00:04:30,200
have any

98
00:04:31,200 --> 00:04:32,800
Debugging support or anything in particular.

99
00:04:32,800 --> 00:04:33,300
Right now.

100
00:04:34,300 --> 00:04:37,300
I'm just going to do this by Straight manual inspection.

101
00:04:37,400 --> 00:04:40,900
What I want to do is I want to set a breakpoint just when I'm about to

102
00:04:40,900 --> 00:04:43,700
do some rendering there and I want to just take a quick look at the

103
00:04:43,700 --> 00:04:48,400
game state to see what exactly is going on in the game State.

104
00:04:48,400 --> 00:04:51,000
How many hyades there are how Milo entities there are.

105
00:04:51,100 --> 00:04:54,500
So there's 159 High entities in the in that set right now.

106
00:04:55,100 --> 00:04:58,800
And what I want to do is just I want to make sure that as we Traverse

107
00:04:58,800 --> 00:05:00,500
the world that that number stays.

108
00:05:00,600 --> 00:05:01,900
Early consistent, right?

109
00:05:01,900 --> 00:05:05,300
Because the idea is that things should be moving into and out of.

110
00:05:05,300 --> 00:05:08,400
We know when things are moving into, we know that things are moving in

111
00:05:08,400 --> 00:05:11,100
properly because as you can see, it's still drawing all these things

112
00:05:11,100 --> 00:05:12,700
so they're getting pulled into the set.

113
00:05:12,700 --> 00:05:15,100
But what I want to make sure is that they're also leaving the set

114
00:05:15,100 --> 00:05:15,700
properly.

115
00:05:16,100 --> 00:05:18,600
And like I said in the future, when we have a little bit more in the

116
00:05:18,600 --> 00:05:21,500
way of a renderer, and debugging services will just print those

117
00:05:21,500 --> 00:05:22,400
numbers out.

118
00:05:22,400 --> 00:05:26,400
Just what is overlay them right on the on our sort of our console are

119
00:05:26,600 --> 00:05:29,500
basically our heads up displays will show us this information.

120
00:05:30,600 --> 00:05:34,200
But for now, I just want to make a quick spot check just to make sure

121
00:05:34,900 --> 00:05:37,300
that it's not wildly incorrect.

122
00:05:39,300 --> 00:05:40,500
So that is still going up.

123
00:05:40,500 --> 00:05:44,400
That's 219 now and I'd like to make sure that it's not monotonically

124
00:05:44,400 --> 00:05:47,600
increasing like I want to make sure that that's that's what should

125
00:05:47,600 --> 00:05:48,100
have happened.

126
00:05:48,100 --> 00:05:51,600
That we're just overlapping more things at the moment and that it's

127
00:05:51,600 --> 00:05:56,100
not continuously going up and so I'm going to double check that again

128
00:05:56,600 --> 00:05:59,500
because if it's just keeps going up and up and up, and that means that

129
00:05:59,500 --> 00:05:59,900
there's something

130
00:06:00,000 --> 00:06:04,000
Wrong with our eviction scheme that are eviction scheme is not

131
00:06:04,000 --> 00:06:07,500
actually removing things from the low entity list like it's supposed

132
00:06:07,500 --> 00:06:07,700
to.

133
00:06:08,100 --> 00:06:10,900
Now again, there's also things we haven't really checked for like we

134
00:06:10,900 --> 00:06:13,400
don't know about whether we're getting duplicate things moved in.

135
00:06:13,400 --> 00:06:15,100
There's a number of things that we probably will want to check for

136
00:06:15,100 --> 00:06:18,900
eventually, but for right now, this is just sort of doing a little

137
00:06:19,100 --> 00:06:24,500
minor due diligence just to make sure that we're not really messed up.

138
00:06:24,800 --> 00:06:25,500
So, let's see.

139
00:06:25,800 --> 00:06:27,100
So things look a little jerk you're now.

140
00:06:27,100 --> 00:06:28,800
So I'm going to go ahead and say I think

141
00:06:30,000 --> 00:06:32,600
Unless that's just, I mean, one of the things is, our frame rate is

142
00:06:32,600 --> 00:06:33,500
not particularly good at the moment.

143
00:06:33,500 --> 00:06:36,600
Anyway, and we're running in debug not release mode, but, but even so

144
00:06:36,600 --> 00:06:39,200
I just want to make sure that that's not the case.

145
00:06:39,200 --> 00:06:40,200
So there we go.

146
00:06:40,200 --> 00:06:41,300
We're back down to 168.

147
00:06:41,300 --> 00:06:42,000
So I think we're okay.

148
00:06:42,500 --> 00:06:46,800
Looks like our basic scheme of eviction is working fine.

149
00:06:46,800 --> 00:06:49,800
And again all this is trying to do is just make sure that the entities

150
00:06:49,800 --> 00:06:52,600
that are we actually care about the ones that are around the player.

151
00:06:52,600 --> 00:06:58,100
At any given time are actually of a limited finite bounded number that

152
00:06:58,100 --> 00:06:58,900
we know we can handle.

153
00:06:59,200 --> 00:07:00,000
So what we'd like to

154
00:07:00,000 --> 00:07:02,900
Do is say, you know, we're going to pick some number of entities that

155
00:07:02,900 --> 00:07:05,900
surround an immediate vicinity of the player.

156
00:07:05,900 --> 00:07:07,600
And we're just going to always keep it to that number.

157
00:07:07,600 --> 00:07:09,900
And so 200-300, that seems reasonable.

158
00:07:09,900 --> 00:07:11,400
I think we'll be able to write our code fine.

159
00:07:11,700 --> 00:07:14,200
They'll be able to handle that number of entities, so we should be

160
00:07:14,200 --> 00:07:14,800
good to go.

161
00:07:15,200 --> 00:07:17,100
So, I think that's all working reasonably.

162
00:07:17,100 --> 00:07:17,600
Well, now,

163
00:07:18,800 --> 00:07:19,600
It's all good.

164
00:07:21,000 --> 00:07:25,100
So the next question then that I have is we started to use this.

165
00:07:25,200 --> 00:07:26,900
We started to create this spatial partition.

166
00:07:27,100 --> 00:07:29,100
I wanted to be able to make a spatial partition.

167
00:07:29,100 --> 00:07:32,600
And the reason that I want to make the spatial partition was because I

168
00:07:32,600 --> 00:07:36,800
didn't want our code to constantly Loop over every single entity in

169
00:07:36,800 --> 00:07:39,300
the system, every time the camera moved.

170
00:07:41,200 --> 00:07:45,700
Because I was afraid that that would incur so much overhead that we

171
00:07:45,700 --> 00:07:46,500
would start to pay for it.

172
00:07:46,500 --> 00:07:46,800
Now.

173
00:07:46,800 --> 00:07:49,900
We did a test yesterday and determined, that actually, the number of

174
00:07:49,900 --> 00:07:53,000
entities we could just cold Loop over and not have to worry about too

175
00:07:53,000 --> 00:07:54,300
much was actually pretty high.

176
00:07:54,900 --> 00:07:57,700
We got up to about a million and we were still able to do it.

177
00:07:57,700 --> 00:08:00,200
Okay, at 5 million it clearly broke down.

178
00:08:01,300 --> 00:08:03,600
And again, that's just doing the checking to see whether things need

179
00:08:03,600 --> 00:08:05,300
to put be pulled into the active set.

180
00:08:05,600 --> 00:08:05,900
Now.

181
00:08:05,900 --> 00:08:09,400
It's a little misleading because we don't actually know how much work

182
00:08:09,400 --> 00:08:10,200
we have to do in a nobody.

183
00:08:10,400 --> 00:08:14,200
Relations, but that does tell me that really we might be able to let

184
00:08:14,200 --> 00:08:15,100
this one slide.

185
00:08:15,200 --> 00:08:16,400
I'm not sure one way or the other.

186
00:08:17,200 --> 00:08:21,900
But what I would like to do is say, well for the, for the sake of

187
00:08:21,900 --> 00:08:23,300
actually showing how to do this cleanly.

188
00:08:23,300 --> 00:08:28,700
And well, I think I want to still make the spatial partition on the

189
00:08:28,700 --> 00:08:30,300
one hand not that useful.

190
00:08:30,300 --> 00:08:33,600
But on the other hand, it will also allow us to be kind of crazy

191
00:08:33,600 --> 00:08:37,799
scalar if we want to wear, we can have millions of entities and not

192
00:08:37,799 --> 00:08:40,200
have to worry about it because we will be able to sort.

193
00:08:40,299 --> 00:08:41,200
Of break through that barrier.

194
00:08:41,200 --> 00:08:44,500
Trivially because we won't be paying cost for all those extra enemies

195
00:08:45,400 --> 00:08:46,000
every frame.

196
00:08:46,900 --> 00:08:52,800
So what I was doing here was we were tired of talking about, well, I

197
00:08:52,800 --> 00:08:54,700
want to start storing the entities.

198
00:08:55,200 --> 00:08:59,500
I want to store, which entities are in, which locations so basically,

199
00:09:00,000 --> 00:09:03,000
Our world would be broken up into the same chunks that we were using

200
00:09:03,000 --> 00:09:04,000
for the tile map.

201
00:09:04,000 --> 00:09:06,400
But since we've kind of jettison, the Tom Apple are just going with

202
00:09:06,400 --> 00:09:08,900
straight entities as the way that we store the world for now.

203
00:09:10,300 --> 00:09:13,500
I want to basically take those same chunks and make them basically

204
00:09:13,500 --> 00:09:14,300
entity chunks.

205
00:09:14,800 --> 00:09:19,300
So each Chunk in the world is now instead of being about a certain

206
00:09:19,400 --> 00:09:20,300
number of tiles.

207
00:09:20,300 --> 00:09:23,700
It's about have storing which entities overlap that chunk.

208
00:09:23,800 --> 00:09:27,800
And then when we want to bring things into the hiset, what we can do

209
00:09:27,800 --> 00:09:29,600
is we can go ahead and grab those.

210
00:09:30,000 --> 00:09:30,700
Right off of there.

211
00:09:31,200 --> 00:09:31,300
Now.

212
00:09:31,300 --> 00:09:35,000
The other thing that I point out is I suspect that that that looping

213
00:09:35,000 --> 00:09:37,900
over the million entities thing was also a little deceptive in one

214
00:09:37,900 --> 00:09:41,000
sense, which is that as we get a little further down the road.

215
00:09:41,000 --> 00:09:45,600
We may want to have a lot of entities that are doing things moving

216
00:09:45,600 --> 00:09:51,300
around out in the world in that are sort of autonomous, a eyes in the

217
00:09:51,300 --> 00:09:52,500
world doing stuff.

218
00:09:52,800 --> 00:09:55,700
That's far away from the player and can't afford to be simulated in

219
00:09:55,700 --> 00:09:58,700
that high resolution because all of the stuff outside of the players

220
00:09:58,700 --> 00:09:59,900
area is not being simulated.

221
00:10:00,000 --> 00:10:00,600
Resolution.

222
00:10:01,900 --> 00:10:05,000
And I thought of this last night, I that I wish I had mentioned on

223
00:10:05,000 --> 00:10:08,800
this, on the stream that looping over the million guys was just for

224
00:10:08,800 --> 00:10:09,600
one operation.

225
00:10:09,600 --> 00:10:12,100
We need to do, which was pulling things into the active set.

226
00:10:12,600 --> 00:10:14,900
But what's important to remember is we would have had to do that Loop

227
00:10:14,900 --> 00:10:17,100
over a million for any operation.

228
00:10:17,100 --> 00:10:19,400
That was spatial, that worked on the low entities.

229
00:10:19,700 --> 00:10:22,300
And so, really, that would have gotten out of hand quickly.

230
00:10:22,300 --> 00:10:25,900
Because let's say we had 100 entities that were autonomous and working

231
00:10:25,900 --> 00:10:27,400
throughout the world's moving around.

232
00:10:28,200 --> 00:10:31,100
Each one of those hundred would need to make queries to see what was

233
00:10:31,100 --> 00:10:33,600
around it and where it could be moving and stuff like this.

234
00:10:33,900 --> 00:10:36,900
Those would have incurred that same million time Loop.

235
00:10:37,800 --> 00:10:41,000
And so really the when I thought about it after I was like, oh duh,

236
00:10:41,000 --> 00:10:44,800
like even if we only had a hundred thousand of these we probably would

237
00:10:44,800 --> 00:10:48,100
run into this problem because it would shoot up to 5 million queries

238
00:10:48,100 --> 00:10:52,200
very quickly because if you don't have a spatial partition, you have

239
00:10:52,200 --> 00:10:53,200
no way of cutting them down.

240
00:10:55,500 --> 00:10:57,000
So again, just to be really clear.

241
00:10:58,200 --> 00:10:59,300
About how this works.

242
00:11:00,800 --> 00:11:02,900
We essentially are going to have whoops.

243
00:11:02,900 --> 00:11:04,000
That's not what I wanted to do.

244
00:11:05,000 --> 00:11:06,400
How do I get my color back?

245
00:11:06,800 --> 00:11:07,500
Let's see here.

246
00:11:07,900 --> 00:11:11,900
I don't know why this this constantly switches away from it switches

247
00:11:11,900 --> 00:11:14,300
to the the eyedropper tool for no reason.

248
00:11:14,300 --> 00:11:18,400
That's my only see like we you alt-tab, I guess it's cause the ALT key

249
00:11:18,600 --> 00:11:19,900
because the ALT key does it?

250
00:11:19,900 --> 00:11:21,900
They don't know how to write keyboard handling code on Windows.

251
00:11:21,900 --> 00:11:23,200
Basically what that boils down to

252
00:11:24,400 --> 00:11:27,700
So again what this is for is we have a giant world and we're any given

253
00:11:27,700 --> 00:11:29,700
time looking at a tiny little piece of it.

254
00:11:29,800 --> 00:11:32,000
And we've got all kinds of entities out here, right?

255
00:11:33,000 --> 00:11:35,800
And in the future, any operation that we want to do.

256
00:11:35,800 --> 00:11:39,700
So, let's say one of these entities here wants to know, you know, if

257
00:11:39,700 --> 00:11:42,800
there's anyone around him who is hostile to him, right?

258
00:11:43,200 --> 00:11:46,300
And because he might attack them or he might run away from them.

259
00:11:47,300 --> 00:11:50,400
What we want to be able to do is restrict that query so that we only

260
00:11:50,400 --> 00:11:53,100
have to consider a low number of entities entities, that might

261
00:11:53,100 --> 00:11:54,100
actually be near him.

262
00:11:54,600 --> 00:11:58,500
Because if we crank up that number again to like 100,000, right, then

263
00:11:58,500 --> 00:11:59,800
every single query.

264
00:12:00,300 --> 00:12:03,000
If there were 100,000 total entities in the world, every single query

265
00:12:03,000 --> 00:12:05,500
that he does will touch all hundred thousand entities.

266
00:12:05,800 --> 00:12:08,900
So you end up with what is essentially a no N squared.

267
00:12:08,900 --> 00:12:11,500
I know we haven't talked about order notation much yet.

268
00:12:11,800 --> 00:12:18,000
But basically if you think about how that works every entity that in

269
00:12:18,000 --> 00:12:20,800
the world that might want to do one of those queries, if we didn't

270
00:12:20,800 --> 00:12:23,300
have a spatial partition something of getting the numbers down.

271
00:12:23,700 --> 00:12:26,300
It would have to go check every other entity.

272
00:12:26,400 --> 00:12:29,900
So every entity would be checking every other entity every time it

273
00:12:30,100 --> 00:12:30,300
Ago.

274
00:12:30,300 --> 00:12:32,700
And so if you think about how many enemies there are, if there are n

275
00:12:32,700 --> 00:12:37,000
entities, then if every entity has to every time it wants update,

276
00:12:37,000 --> 00:12:38,500
check all the other entities.

277
00:12:38,700 --> 00:12:42,700
That is an N squared that scales relative to N squared, right?

278
00:12:42,700 --> 00:12:46,900
Because every n everything, every each individual entity does, and N

279
00:12:46,900 --> 00:12:48,800
number of checks, right?

280
00:12:49,200 --> 00:12:52,900
And that as, you know, is a curve that looks like this, which is

281
00:12:52,900 --> 00:12:54,400
totally untenable, right?

282
00:12:54,400 --> 00:12:58,100
You want all of your stuff to scale very flatly so that you can crank

283
00:12:58,100 --> 00:12:59,000
those numbers out.

284
00:12:59,200 --> 00:12:59,800
This is not

285
00:13:00,000 --> 00:13:01,800
Something that scales and that's something we'll talk about a little

286
00:13:01,800 --> 00:13:02,900
more later orientation.

287
00:13:02,900 --> 00:13:05,200
We don't talk about too much now, but point being.

288
00:13:05,200 --> 00:13:09,000
So the whole point of the spatial query is to to get down so that it's

289
00:13:09,000 --> 00:13:13,500
nice and cheap to do those queries to level eyes this number.

290
00:13:13,500 --> 00:13:17,000
So that instead of 100,000 guys each asking questions about another

291
00:13:17,000 --> 00:13:20,500
hundred thousand guys, which results in that hundred thousand squared

292
00:13:20,500 --> 00:13:21,800
which is a disastrous number.

293
00:13:21,900 --> 00:13:26,000
Well over the 1 million that we found we could do successfully, right?

294
00:13:27,400 --> 00:13:28,300
We want to get it down.

295
00:13:28,300 --> 00:13:32,500
So it's just okay the people who need to check they only check, you

296
00:13:32,500 --> 00:13:34,200
know 180s around them.

297
00:13:34,300 --> 00:13:34,500
Right?

298
00:13:34,500 --> 00:13:36,800
Just just in their immediate vicinity or something.

299
00:13:36,800 --> 00:13:40,000
That's much more levelized in an effort to keep it down to this kind

300
00:13:40,000 --> 00:13:42,200
of Number, the total number of iterations.

301
00:13:42,200 --> 00:13:44,400
We need to do through a spatial check.

302
00:13:45,100 --> 00:13:46,400
So that's what we're doing here.

303
00:13:47,100 --> 00:13:50,200
And I'd like to go ahead and finish up what we were doing because we

304
00:13:50,200 --> 00:13:53,200
started most of it but we just didn't actually end up getting to sort

305
00:13:53,200 --> 00:13:56,500
of implement the code, we sort of structured it and then left.

306
00:13:57,600 --> 00:14:02,900
So what I want to do is much like we used to be doing where we would.

307
00:14:02,900 --> 00:14:07,200
Sort of say, I want to insert this particular entity into the world.

308
00:14:07,200 --> 00:14:10,500
What I want to insert this set this particular tile map value.

309
00:14:10,500 --> 00:14:11,000
What I want to do.

310
00:14:11,000 --> 00:14:13,800
Now, just be able to say, I want to insert this entity.

311
00:14:14,500 --> 00:14:18,100
So what I'm going to do is have a function that's called, you know,

312
00:14:18,100 --> 00:14:21,900
insert entity in Two Worlds or something like this.

313
00:14:24,200 --> 00:14:27,000
and what that's going to do is that is going to

314
00:14:30,800 --> 00:14:36,900
Put this entity into it's where it should be in the world entity

315
00:14:36,900 --> 00:14:38,200
blocks where it is.

316
00:14:38,200 --> 00:14:40,300
And to be honest with you.

317
00:14:40,300 --> 00:14:43,000
I think I'm actually going to jump the gun a little bit here and say

318
00:14:43,000 --> 00:14:50,100
that what it's really going to be is change, entity, chunk or change

319
00:14:50,100 --> 00:14:51,300
entity location.

320
00:14:51,300 --> 00:14:51,900
Right?

321
00:14:52,000 --> 00:14:55,100
Where what we basically do is we say we're going to tell you in any

322
00:14:55,100 --> 00:14:56,200
number, right?

323
00:14:56,300 --> 00:14:59,200
We have a we have a low end of the index, one of our entity.

324
00:14:59,300 --> 00:14:59,800
Numbers.

325
00:15:00,100 --> 00:15:03,900
What we want to do is say this entity is going to move from where it

326
00:15:03,900 --> 00:15:06,000
was to where it is now.

327
00:15:06,300 --> 00:15:06,800
Okay.

328
00:15:07,700 --> 00:15:10,400
And so what it's going to do is it's going to take one of these World

329
00:15:10,400 --> 00:15:11,800
positions, right?

330
00:15:11,800 --> 00:15:15,300
It's going to say this is the old position and then it's going to say

331
00:15:15,300 --> 00:15:16,700
this is the nude position.

332
00:15:16,800 --> 00:15:22,600
I'll just do new p and old p and what we'll do for now is Will Allow

333
00:15:22,800 --> 00:15:29,000
World position Old P will allow old P to be zero potentially so that

334
00:15:29,000 --> 00:15:29,800
if you if this

335
00:15:30,000 --> 00:15:32,900
This entity was not and my savior.

336
00:15:32,900 --> 00:15:36,400
I mean the pointer will literally be zero will not point to a valid

337
00:15:36,500 --> 00:15:37,300
will position.

338
00:15:37,600 --> 00:15:41,600
So what this will do, in that case is it will actually allow us to

339
00:15:43,400 --> 00:15:45,200
Just sort of say this is a new insertion.

340
00:15:45,200 --> 00:15:47,400
This entity didn't exist anywhere in the world yet.

341
00:15:47,600 --> 00:15:49,800
Please put it in where the new p is.

342
00:15:50,600 --> 00:15:55,000
So the first thing I would do is I'd say if old pee right?

343
00:15:56,200 --> 00:16:01,400
And in that case we want to see whether the old P, you know, is not

344
00:16:01,400 --> 00:16:02,300
equal to the new P.

345
00:16:02,300 --> 00:16:03,200
Basically, we want it.

346
00:16:03,200 --> 00:16:08,000
We want to be able to do a check and I think we have what we had our

347
00:16:08,000 --> 00:16:08,800
on same tile.

348
00:16:08,800 --> 00:16:12,700
So we want to do something like saying, you know, if these are

349
00:16:12,900 --> 00:16:15,400
In same chunk, right?

350
00:16:15,800 --> 00:16:22,700
So, I want to base to be able to say if if to if the position that

351
00:16:22,700 --> 00:16:25,600
this entity was in and the position that he's needs to be, in are the

352
00:16:25,600 --> 00:16:29,900
same then we don't have to do anything because wherever he wherever he

353
00:16:29,900 --> 00:16:33,800
was inserted in the spatial partition in our in our whichever world

354
00:16:33,800 --> 00:16:34,900
that he blocky resided.

355
00:16:34,900 --> 00:16:38,100
In is correct for him basically, right?

356
00:16:40,100 --> 00:16:45,500
But what I want to do in the other case, so this is leave entity where

357
00:16:45,500 --> 00:16:50,700
it is in the other case where it's different or in the case where old

358
00:16:50,700 --> 00:16:53,000
pee doesn't actually exist at all.

359
00:16:54,000 --> 00:16:56,000
In fact, I guess I could do this slight little bit differently.

360
00:16:56,000 --> 00:17:01,200
I might say, if old P and R in the same chunk, right?

361
00:17:01,900 --> 00:17:02,100
Then.

362
00:17:02,100 --> 00:17:06,000
What I'm going to do is leave it where it is, but on the in any other

363
00:17:06,000 --> 00:17:08,900
case, what I'm going to do is say all right, if there isn't

364
00:17:09,099 --> 00:17:09,500
P.

365
00:17:09,500 --> 00:17:13,099
Then the first thing I need to do is pull this entity out of its old

366
00:17:13,099 --> 00:17:14,400
location, right?

367
00:17:14,500 --> 00:17:16,099
So that'll be what this does here.

368
00:17:16,099 --> 00:17:24,300
This will say pull the entity out of its current entity block and then

369
00:17:24,300 --> 00:17:29,900
I will go ahead and insert it insert the empty into its new interview.

370
00:17:29,900 --> 00:17:32,700
Block should say old to block.

371
00:17:33,400 --> 00:17:36,200
So this will basically a search through the spatial partition to find

372
00:17:36,200 --> 00:17:37,700
out where the entity actually is.

373
00:17:37,700 --> 00:17:38,900
Now will ya.

374
00:17:39,000 --> 00:17:39,600
Ink it.

375
00:17:39,900 --> 00:17:43,900
Then what we'll do is we'll say, okay, let's take a look at where the

376
00:17:43,900 --> 00:17:47,000
energy needs to go and we'll go stick them onto the end of the list

377
00:17:47,000 --> 00:17:47,400
there.

378
00:17:49,300 --> 00:17:54,200
All right, so we know that we can query, right?

379
00:17:54,300 --> 00:17:55,800
We can do a get World chunk here.

380
00:17:56,600 --> 00:17:59,200
So we know, we can grab the road chunk by its chunk X.

381
00:17:59,200 --> 00:17:59,800
Chunk Blanche.

382
00:18:00,100 --> 00:18:03,900
A yeah, so we'll go ahead and do that.

383
00:18:05,100 --> 00:18:06,000
We'll get that back.

384
00:18:07,000 --> 00:18:09,300
And this is going to be the new chunk X, the new chunk.

385
00:18:09,300 --> 00:18:09,900
Why the new chunk.

386
00:18:09,900 --> 00:18:10,500
See now.

387
00:18:10,500 --> 00:18:15,800
What's interesting about this is what we want to do, as well, like a

388
00:18:15,800 --> 00:18:18,300
separate a separate thing that we'd like to do now.

389
00:18:18,400 --> 00:18:18,900
Right?

390
00:18:19,900 --> 00:18:23,800
Is we don't really care about tile indices anymore, which is what we

391
00:18:23,800 --> 00:18:24,800
were tracking before.

392
00:18:25,100 --> 00:18:27,100
We used to be tracking tile indices.

393
00:18:27,100 --> 00:18:31,600
And then offsets, right, but we don't really have any need for that

394
00:18:31,600 --> 00:18:34,400
anymore, because now we just have chunks.

395
00:18:34,900 --> 00:18:35,400
Right.

396
00:18:35,700 --> 00:18:41,000
We don't have any real need to conceptualize where tiles are that can

397
00:18:41,000 --> 00:18:43,700
be strictly an artifact of the world-building.

398
00:18:43,700 --> 00:18:47,600
The world-building can consider things in tiles, if it wants to.

399
00:18:47,600 --> 00:18:50,600
But once it comes to actually storing the world, we don't care.

400
00:18:51,300 --> 00:18:55,300
So really what we want to do now is we want to call these probably the

401
00:18:55,300 --> 00:18:57,900
chunk X chunk, why and chunks D.

402
00:18:58,200 --> 00:19:01,600
So that what we can do is say that the world position is now based

403
00:19:01,600 --> 00:19:03,700
entirely on those.

404
00:19:05,000 --> 00:19:08,000
So we now no longer have any restrictions.

405
00:19:08,000 --> 00:19:11,700
We don't have to even do the chunk shift.

406
00:19:11,700 --> 00:19:14,000
Chunk mask chunk dim stuff anymore.

407
00:19:14,300 --> 00:19:18,700
All we would need is a single thing, which is that, whatever the chunk

408
00:19:18,700 --> 00:19:22,100
side and M is, is, is all it is, right.

409
00:19:22,300 --> 00:19:26,100
So, this is, this is actually can just go away entirely and what we

410
00:19:26,100 --> 00:19:29,000
can say is this is going to be chunk side M.

411
00:19:29,200 --> 00:19:32,000
And we don't care what the tile side of M, is because the tile side

412
00:19:32,000 --> 00:19:34,500
and M, really is just

413
00:19:34,800 --> 00:19:37,800
The world-building will do so, you know, though.

414
00:19:37,800 --> 00:19:41,600
I will perhaps still store it here just so we know and the chunk side

415
00:19:41,600 --> 00:19:45,500
and M will just be some amount above that, right?

416
00:19:45,900 --> 00:19:46,600
So, there you go.

417
00:19:48,200 --> 00:19:48,600
Okay.

418
00:19:50,200 --> 00:19:53,400
So we'll start the chunk X y&z directly in there, and then offsets are

419
00:19:53,400 --> 00:19:57,600
will be from the chunk Center and that is how we will store things as

420
00:19:57,600 --> 00:19:58,700
these nice little chunks.

421
00:19:59,600 --> 00:20:06,000
So if we go ahead and do that, then what we should be able to say is

422
00:20:06,000 --> 00:20:10,000
that we can just directly access off of this world position.

423
00:20:10,100 --> 00:20:14,500
We can direct directly access, what those chunk coordinates will be

424
00:20:14,500 --> 00:20:16,600
and pull the chunk out straight from there.

425
00:20:16,900 --> 00:20:19,000
Okay, so that'll pull that out directly.

426
00:20:19,600 --> 00:20:19,800
And then

427
00:20:20,000 --> 00:20:23,700
We would pass a memory Arena here if we needed to store stuff.

428
00:20:23,700 --> 00:20:25,500
And in this case, we actually do.

429
00:20:25,700 --> 00:20:29,600
So we're going to want to pass a memory Arena like so.

430
00:20:29,800 --> 00:20:33,500
So that we always guarantee that we have the ability to allocate more

431
00:20:33,500 --> 00:20:34,000
space.

432
00:20:34,200 --> 00:20:38,100
If we were trying to store something that, you know, that requires

433
00:20:38,100 --> 00:20:41,600
say, allocating a new, what's the word for it?

434
00:20:41,600 --> 00:20:42,900
And of evil OCH, right?

435
00:20:44,400 --> 00:20:44,800
Okay.

436
00:20:45,400 --> 00:20:46,000
So here we go.

437
00:20:46,000 --> 00:20:47,300
We're going to get this world chunk.

438
00:20:48,100 --> 00:20:51,400
So this is the chunk that we have and then what we need to do is say

439
00:20:51,400 --> 00:20:52,400
for this world Chunk.

440
00:20:52,400 --> 00:20:58,100
We want to go ahead and push this entity onto the like onto it set.

441
00:20:58,100 --> 00:20:59,800
So you remember we've got this here, World them.

442
00:21:00,000 --> 00:21:03,500
Block World entity Block store, some number of entities, as far as

443
00:21:03,500 --> 00:21:05,100
them in blocks of 16.

444
00:21:05,400 --> 00:21:08,800
So what we're going to do is say, if this chunk could have fit a new

445
00:21:08,800 --> 00:21:10,600
one, then we push it on.

446
00:21:10,700 --> 00:21:16,400
So we basically say, you know, if chunk entity count, look we'll check

447
00:21:16,400 --> 00:21:17,500
here at the chunk.

448
00:21:17,500 --> 00:21:23,400
Entity count is is already equal to sixteen or I should say the array

449
00:21:23,400 --> 00:21:24,000
count.

450
00:21:24,200 --> 00:21:28,100
So, however, many it can store of those low entity indices.

451
00:21:29,400 --> 00:21:32,500
Right, if it's equal to that, we're going to have to make more room

452
00:21:32,500 --> 00:21:33,000
for it.

453
00:21:33,000 --> 00:21:36,000
And then afterwards we can go ahead and push it on.

454
00:21:36,400 --> 00:21:39,300
So we're out of room.

455
00:21:43,000 --> 00:21:44,900
Get a new block, right?

456
00:21:45,900 --> 00:21:49,100
So what we want to do here is we want to grab a new world entity

457
00:21:49,100 --> 00:21:49,600
block.

458
00:21:49,700 --> 00:21:52,700
And the way that we're going to do, that is actually a little, not

459
00:21:52,700 --> 00:21:54,200
quite what we will really.

460
00:21:54,500 --> 00:21:55,400
We've got one more thing.

461
00:21:55,400 --> 00:21:59,000
I will show you in, it'll literally be in about 10 minutes.

462
00:21:59,000 --> 00:22:00,800
We'll go back and add something to this.

463
00:22:00,800 --> 00:22:04,300
But I'm going to go through it directly for a so you can kind of see

464
00:22:04,500 --> 00:22:05,700
why we're doing it this way.

465
00:22:06,200 --> 00:22:06,900
So, we're out of room.

466
00:22:06,900 --> 00:22:10,400
We need to get a new block because there's no room left in that block,

467
00:22:10,800 --> 00:22:12,500
or we may find that

468
00:22:13,100 --> 00:22:17,500
That that sorry, this is I'm looking at this wrong.

469
00:22:17,500 --> 00:22:19,100
So it's actually our block here.

470
00:22:19,100 --> 00:22:22,000
So what I need to do first is actually crap that block out.

471
00:22:22,000 --> 00:22:26,300
So real identity block, block equals the address of a chunk first

472
00:22:26,300 --> 00:22:27,200
block, right?

473
00:22:27,400 --> 00:22:27,800
Okay.

474
00:22:28,100 --> 00:22:32,900
So if that block is, is full, we need to get a new block.

475
00:22:32,900 --> 00:22:34,600
So, what we're going to do, there is say

476
00:22:36,600 --> 00:22:40,900
Oh, well, I'm really glad we did this.

477
00:22:41,200 --> 00:22:44,400
So if you remember I said something very specific.

478
00:22:44,500 --> 00:22:47,200
I said back back before we did this.

479
00:22:47,200 --> 00:22:51,000
I said, Royal chunk, a should probably switch to pointers if Thailand

480
00:22:51,000 --> 00:22:51,800
ID block to T.

481
00:22:51,800 --> 00:22:55,700
Be stored on mass directly on the touch up which meant, if this was

482
00:22:55,700 --> 00:23:01,000
not a pointer, then this should become a pointer and we've received

483
00:23:01,000 --> 00:23:02,600
the answer to the question.

484
00:23:03,800 --> 00:23:06,000
So can you guys see what it is?

485
00:23:06,700 --> 00:23:07,800
The answer to the question is?

486
00:23:07,800 --> 00:23:09,800
No, this should stay how it is.

487
00:23:10,000 --> 00:23:11,300
And this should become a pointer.

488
00:23:11,800 --> 00:23:16,000
The reason I know that is because as World entity blocks, fill up,

489
00:23:17,100 --> 00:23:17,300
what.

490
00:23:17,300 --> 00:23:20,600
I don't really want to have to do is I don't want to have to do the

491
00:23:20,600 --> 00:23:22,200
block copy when they fill up.

492
00:23:22,700 --> 00:23:26,000
Now, I guess what I should say is, I guess we don't really know the

493
00:23:26,000 --> 00:23:29,200
answer quite yet because it may be the doing that block copy is

494
00:23:29,200 --> 00:23:32,200
actually not that expensive because we only do it when we fill them

495
00:23:32,200 --> 00:23:32,600
up.

496
00:23:34,900 --> 00:23:36,100
I talk myself out of it.

497
00:23:36,100 --> 00:23:36,500
See what I did.

498
00:23:36,500 --> 00:23:37,700
I talk myself out of it.

499
00:23:38,000 --> 00:23:44,400
The thing that I'm considering here just to be 100% explicit is when

500
00:23:44,400 --> 00:23:45,400
this gets filled up.

501
00:23:45,400 --> 00:23:47,200
We need to make a new world entity Block.

502
00:23:47,300 --> 00:23:50,200
In order to avoid copying the block wholesale.

503
00:23:50,500 --> 00:23:55,900
What we would need to do is we would need to have this be a pointer so

504
00:23:55,900 --> 00:23:58,200
that we could then create a new one and point to the new one and then

505
00:23:58,200 --> 00:23:59,800
have the new ones next pointer.

506
00:24:00,000 --> 00:24:01,100
Point to the old block.

507
00:24:01,100 --> 00:24:04,600
So we just basically making a daisy-chain of these things as we go.

508
00:24:06,100 --> 00:24:08,500
And so that's what I was assuming I should do because I was like,

509
00:24:08,500 --> 00:24:10,200
well, I don't want to have to do that whole block copy, but then I

510
00:24:10,200 --> 00:24:12,900
realized that block copies, not that expensive.

511
00:24:13,000 --> 00:24:17,400
We only do it every 16 insertions and it's really only done at

512
00:24:17,400 --> 00:24:18,600
world-building time.

513
00:24:18,600 --> 00:24:22,000
Probably, it's probably not something that happens all that often in

514
00:24:22,000 --> 00:24:24,800
regular play through the game necessarily.

515
00:24:25,000 --> 00:24:29,000
So it may actually be the case that since querying is a much more

516
00:24:29,000 --> 00:24:29,900
frequent thing than

517
00:24:30,000 --> 00:24:31,100
An reinsertion.

518
00:24:31,100 --> 00:24:35,000
Is that actually the decision is that should be the other way around.

519
00:24:35,100 --> 00:24:37,800
We should leave those those first blocks in there.

520
00:24:39,400 --> 00:24:42,800
Yeah, so it's hard to say, it's hard to say, so maybe I will leave it

521
00:24:42,800 --> 00:24:43,300
this way.

522
00:24:43,800 --> 00:24:45,200
Maybe I will leave it this way.

523
00:24:45,900 --> 00:24:48,000
So what I'm going to do is I'm going to I'm going to leave it this way

524
00:24:48,000 --> 00:24:53,700
for now and we'll just have to you know, say basically to do profile.

525
00:24:53,700 --> 00:24:55,500
This and determine

526
00:24:56,900 --> 00:24:59,800
If a pointer would be better here.

527
00:25:01,400 --> 00:25:01,800
Right.

528
00:25:02,900 --> 00:25:06,800
So, when we get a new block, really easy, obviously, we're going to do

529
00:25:07,600 --> 00:25:12,800
a push on our Arena at this point because we have to, we have to add

530
00:25:13,200 --> 00:25:14,000
some more space.

531
00:25:14,300 --> 00:25:16,500
So we have to do our push struck.

532
00:25:16,600 --> 00:25:17,100
There we go.

533
00:25:17,800 --> 00:25:19,100
So we got to do a push truck.

534
00:25:19,300 --> 00:25:22,500
And what we want to do on our push truck is push a new world entity

535
00:25:22,500 --> 00:25:23,700
block, right?

536
00:25:23,700 --> 00:25:25,000
So that's going to take that Arena.

537
00:25:25,000 --> 00:25:27,500
That's just going to use up some more of that space that we've got.

538
00:25:28,000 --> 00:25:30,800
And when we do that, push, what we're going to do is we're going to

539
00:25:30,800 --> 00:25:32,500
get that world entity block back.

540
00:25:33,100 --> 00:25:36,500
So this is going to be our new block and then what we'll do is we'll

541
00:25:36,500 --> 00:25:38,800
just say, well, the new block.

542
00:25:39,900 --> 00:25:43,300
That we made is actually I mean really we should we could call this

543
00:25:43,300 --> 00:25:45,900
the old lock in some sense because what we're going to do is were

544
00:25:45,900 --> 00:25:48,500
immediately going to take it and we're just going to block copy.

545
00:25:48,900 --> 00:25:52,100
Whatever was in the in the block that we had.

546
00:25:52,100 --> 00:25:55,200
We're going to slam slap that right on top of it, right?

547
00:25:55,400 --> 00:25:59,200
And then what we're going to do after we're done with that, is we're

548
00:25:59,200 --> 00:26:01,300
going to go ahead and say, all right.

549
00:26:01,800 --> 00:26:05,200
Now, that that block that we've got is now considered empty.

550
00:26:05,200 --> 00:26:07,800
So, we copy the old block and the new block is going to be considered

551
00:26:07,800 --> 00:26:08,200
empty.

552
00:26:08,400 --> 00:26:09,500
So we're going to set it sold.

553
00:26:09,600 --> 00:26:12,200
Pointer to be equal to the I'm sorry.

554
00:26:12,200 --> 00:26:14,800
It's next point is equal to the old block so that you can still get to

555
00:26:14,800 --> 00:26:14,900
it.

556
00:26:14,900 --> 00:26:17,300
And then we're going to say that it's residency, right?

557
00:26:17,300 --> 00:26:20,300
The Entity count is now zero, so there's nothing in it now.

558
00:26:20,300 --> 00:26:23,800
So we essentially just made a copy of the block pointed to it, by the

559
00:26:23,800 --> 00:26:26,000
next pointer so we can still get there if we want to walk it.

560
00:26:26,000 --> 00:26:28,900
And then we just vaporized the one that we had.

561
00:26:28,900 --> 00:26:31,400
So that now it can accept a new one again.

562
00:26:31,400 --> 00:26:33,900
So then what I'm going to do is go ahead and assert that.

563
00:26:33,900 --> 00:26:38,700
If we got here, that we definitely do have room to store it now

564
00:26:38,700 --> 00:26:39,500
because we know that we should

565
00:26:39,600 --> 00:26:40,700
I'd have made room for it.

566
00:26:40,700 --> 00:26:45,800
And then we're going to say that blocks low entity index.

567
00:26:46,400 --> 00:26:49,200
At the edit account is going to be equal to the one we're trying to

568
00:26:49,200 --> 00:26:49,600
store it.

569
00:26:49,600 --> 00:26:51,300
So this reinsert sit, right?

570
00:26:51,800 --> 00:26:53,200
So this does our insertion.

571
00:26:53,800 --> 00:26:56,400
Again, it's a little hard to concentrate on these things while I'm

572
00:26:56,400 --> 00:26:56,800
talking.

573
00:26:56,800 --> 00:26:59,100
So I may have made a mistake in there somewhere, but that's basically

574
00:26:59,100 --> 00:26:59,600
the idea.

575
00:27:01,900 --> 00:27:03,000
Will step through it to check.

576
00:27:04,700 --> 00:27:07,300
And so, now, what we need to do is we need to do something that will

577
00:27:08,000 --> 00:27:10,000
that will pull it out of a block, right?

578
00:27:10,200 --> 00:27:11,900
We need to be able to remove it from a block.

579
00:27:12,400 --> 00:27:14,700
So we've got our old P here, right?

580
00:27:15,800 --> 00:27:17,300
And our old P.

581
00:27:17,800 --> 00:27:20,000
We need to grab that chunk out.

582
00:27:20,100 --> 00:27:20,700
Right?

583
00:27:21,000 --> 00:27:23,900
And we need to go ahead and see, she's me.

584
00:27:25,200 --> 00:27:27,500
We don't need to pass the arena here, because the theory, we should

585
00:27:27,500 --> 00:27:32,000
always get a chunk because otherwise whoever called us is totally

586
00:27:32,000 --> 00:27:32,400
wrong.

587
00:27:32,500 --> 00:27:33,100
Right?

588
00:27:33,800 --> 00:27:37,400
Basically, if somebody called us with a bogus position, we want to

589
00:27:37,400 --> 00:27:38,300
assert that immediately.

590
00:27:38,300 --> 00:27:39,600
Like something went very wrong there.

591
00:27:40,000 --> 00:27:42,600
Since this is not a necessarily a high-speed function.

592
00:27:45,000 --> 00:27:46,800
You know, it's not going to be called millions of times a frame, or

593
00:27:46,800 --> 00:27:47,000
anything.

594
00:27:47,000 --> 00:27:49,000
I'll just go ahead and do the extra if you're just in case.

595
00:27:49,000 --> 00:27:52,500
For some reason, we do ship with a bug where that happens.

596
00:27:52,900 --> 00:27:54,000
Instead of crashing here.

597
00:27:54,300 --> 00:27:56,200
We'll just go ahead and and handle it will say.

598
00:27:56,200 --> 00:27:59,200
All right, the, you know, we didn't find the entity in there.

599
00:27:59,500 --> 00:28:02,900
We'll just assume that everything will keep on running and maybe the

600
00:28:02,900 --> 00:28:03,900
game will still play fine.

601
00:28:03,900 --> 00:28:06,800
Anyway, because we're about to insert this guy into the spatial

602
00:28:06,800 --> 00:28:08,100
partition a new location anyway.

603
00:28:09,600 --> 00:28:11,400
So I go ahead and I check to see.

604
00:28:12,400 --> 00:28:13,100
But again, yet.

605
00:28:13,100 --> 00:28:16,000
I put the assertion in there because I also want to know if that's

606
00:28:16,000 --> 00:28:19,700
happening in a debug build for sure because it should never be

607
00:28:19,700 --> 00:28:20,200
happening.

608
00:28:20,200 --> 00:28:24,600
In strictly a defensive maneuver to sort of prevent a catastrophic

609
00:28:24,600 --> 00:28:26,300
situation that I would be checking for that.

610
00:28:27,900 --> 00:28:29,000
So we get the chunk back.

611
00:28:29,000 --> 00:28:31,300
Now we need to do is basically run over the blocks, and we need to

612
00:28:31,300 --> 00:28:34,400
find this entity so that we can pull them out, right?

613
00:28:36,100 --> 00:28:36,300
Then.

614
00:28:36,300 --> 00:28:37,200
This is pretty slow.

615
00:28:37,900 --> 00:28:40,200
So we're going to have to think about if this is something that we

616
00:28:40,200 --> 00:28:41,600
want to be able to speed up in the future.

617
00:28:41,600 --> 00:28:44,700
We're going to have to profile and see it depends on how often we need

618
00:28:44,700 --> 00:28:45,400
to change.

619
00:28:45,700 --> 00:28:49,600
Because remember we only need to do this when the entity actually

620
00:28:49,600 --> 00:28:51,000
moves from one block to another.

621
00:28:51,200 --> 00:28:54,400
So, thankfully, it's not it's not something that happens every frame

622
00:28:54,400 --> 00:28:55,100
for every entity.

623
00:28:55,400 --> 00:28:57,100
It's something that happens occasionally.

624
00:28:57,300 --> 00:29:00,200
Or entities that move outside of the block that they were in before.

625
00:29:00,500 --> 00:29:04,500
So, we may not have to accelerate it too much, or we may have to.

626
00:29:04,700 --> 00:29:06,200
We will see what happens.

627
00:29:07,900 --> 00:29:08,300
Okay.

628
00:29:08,800 --> 00:29:11,800
So here we are in the the chunk code.

629
00:29:11,900 --> 00:29:17,100
And what we need to do is now run over the the list of these World

630
00:29:17,100 --> 00:29:19,900
entity blocks have until we find it.

631
00:29:19,900 --> 00:29:21,800
And then when we find it, we'll yank it.

632
00:29:22,000 --> 00:29:25,000
So we've got our world entity block that's going to be that first

633
00:29:25,000 --> 00:29:26,100
block, right?

634
00:29:26,100 --> 00:29:27,100
So we're going to start there.

635
00:29:27,900 --> 00:29:32,200
We're going to continue for as long as the block is a valid pointer

636
00:29:32,700 --> 00:29:34,500
and assuming that we didn't find it.

637
00:29:34,500 --> 00:29:37,500
We're going to go ahead and move on to the next one along in the

638
00:29:37,600 --> 00:29:38,800
The daisy chain, right?

639
00:29:38,800 --> 00:29:40,900
This is a singly linked list.

640
00:29:40,900 --> 00:29:43,200
For those of you who like, terminology, right?

641
00:29:43,200 --> 00:29:48,300
We essentially have what is sometimes called a sentinel, but that term

642
00:29:48,300 --> 00:29:49,600
can mean different things to different people.

643
00:29:49,600 --> 00:29:53,300
So, well, I simply will say is we always have one Link in the list.

644
00:29:53,300 --> 00:29:54,400
Always there.

645
00:29:54,400 --> 00:29:58,200
And then what we're doing is we have pointers that allow us to chain

646
00:29:58,200 --> 00:29:59,700
as many additional ones on as we

647
00:30:00,000 --> 00:30:02,700
But the list can never be effectively entirely empty.

648
00:30:02,700 --> 00:30:04,800
Because there's always at least one that's hard code.

649
00:30:04,800 --> 00:30:05,100
Stored.

650
00:30:05,100 --> 00:30:07,600
It stored right in the world chunk there.

651
00:30:08,400 --> 00:30:09,700
So, as we move through this,

652
00:30:10,800 --> 00:30:15,500
But we want to do is we want to scan to see if that entity is in these

653
00:30:15,500 --> 00:30:17,000
this block, right?

654
00:30:17,200 --> 00:30:20,200
And what we can do there actually in the future to is, we could, we

655
00:30:20,200 --> 00:30:25,700
could use wide tests, we could use like Cindy stop, test to test, you

656
00:30:25,700 --> 00:30:28,300
know, for entities at a time or something like that as well.

657
00:30:28,700 --> 00:30:31,900
So in the future, we could speed this up even mechanically without

658
00:30:31,900 --> 00:30:34,400
making the algorithm any smarter, we could actually speed up, just

659
00:30:34,400 --> 00:30:35,500
evil imitation of it as well.

660
00:30:36,000 --> 00:30:37,800
But for now we don't have to worry about that because again, we're not

661
00:30:37,800 --> 00:30:40,400
really at a performance place where we have to think too deeply.

662
00:30:40,600 --> 00:30:42,300
About about minutiae like that.

663
00:30:43,300 --> 00:30:46,400
So when I come in here, what I then want to do is just scan through

664
00:30:46,500 --> 00:30:53,600
inside each individual block and see which, which one of the blocks

665
00:30:53,600 --> 00:30:56,800
contains this particular energy, right?

666
00:30:57,000 --> 00:31:00,800
So that's a simple matter of scanning over what's in here and actually

667
00:31:00,800 --> 00:31:03,200
guess I don't have to go through the array count.

668
00:31:03,200 --> 00:31:05,600
All I really have to do because we've got a member in there that

669
00:31:05,600 --> 00:31:06,500
actually counts them.

670
00:31:06,700 --> 00:31:10,400
Is I can just use that and account that we've got I can go through.

671
00:31:10,500 --> 00:31:11,100
Through there.

672
00:31:16,200 --> 00:31:16,800
There we go.

673
00:31:18,500 --> 00:31:25,400
And I can say for each one of these, if the block contains the entity,

674
00:31:27,100 --> 00:31:27,600
right?

675
00:31:29,100 --> 00:31:29,700
so,

676
00:31:32,200 --> 00:31:36,700
So if we found a match, then we know we can just remove it from this

677
00:31:36,700 --> 00:31:38,500
particular list, right?

678
00:31:39,300 --> 00:31:41,800
And the best way to remove it from the list, right?

679
00:31:41,900 --> 00:31:46,800
Is to swap into this location, whatever.

680
00:31:46,800 --> 00:31:49,100
The sort of highest entity is.

681
00:31:49,100 --> 00:31:51,100
So we want to do that same trick we did before.

682
00:31:51,500 --> 00:31:54,300
Basically, I don't know if you guys remember this, we did this.

683
00:31:54,600 --> 00:32:01,100
I think on the high entities, what we have here is we've got sort of a

684
00:32:01,100 --> 00:32:01,600
series of

685
00:32:02,300 --> 00:32:02,800
Right.

686
00:32:02,800 --> 00:32:07,400
The go like this and each one of those blocks sort of has inside of

687
00:32:07,400 --> 00:32:09,100
it, 16 things.

688
00:32:09,200 --> 00:32:09,700
Right?

689
00:32:09,700 --> 00:32:12,300
So each one of these blocks has has lots of things in it.

690
00:32:12,800 --> 00:32:16,300
When we find the one that we want to remove, what we'd like to do is

691
00:32:16,300 --> 00:32:20,600
keep always keep the empty space at the head of that list, right?

692
00:32:20,600 --> 00:32:23,300
We always want to keep the empty space up here.

693
00:32:23,500 --> 00:32:27,400
So we'd like to do is when we find the one that moves we would like to

694
00:32:27,400 --> 00:32:31,900
go ahead and say wherever wherever you are.

695
00:32:32,000 --> 00:32:34,000
Our head and list was, right?

696
00:32:34,000 --> 00:32:35,400
When we get rid of this guy.

697
00:32:35,500 --> 00:32:38,700
We'd like to grab something from the head of the list and put it into

698
00:32:38,700 --> 00:32:39,500
that space.

699
00:32:39,600 --> 00:32:42,300
So that this decrements downward, right?

700
00:32:42,300 --> 00:32:45,400
So that we always keep our free space at the beginning, so that when

701
00:32:45,400 --> 00:32:47,500
people try to insert the can just insert the head end.

702
00:32:47,700 --> 00:32:51,200
They don't have to hunt to try and find free space.

703
00:32:51,500 --> 00:32:53,900
Now, we could do it the other way around.

704
00:32:54,700 --> 00:32:59,600
We could do the hunt here, but since we're already hunting,

705
00:33:00,000 --> 00:33:01,100
This case, we've already.

706
00:33:01,200 --> 00:33:04,600
We've had to hunt through to find the entity in the first place.

707
00:33:04,600 --> 00:33:08,700
It seems more sensical to do it here than to force the hunt a second

708
00:33:08,700 --> 00:33:10,200
time back here.

709
00:33:10,800 --> 00:33:13,900
So, what I want to do is say all right, when we find this entity

710
00:33:13,900 --> 00:33:18,900
index, then what we're going to do is say, we have two circumstances,

711
00:33:20,000 --> 00:33:24,300
that could be in play here one, is that, we are the head block, which

712
00:33:24,300 --> 00:33:27,100
basically means that we're just going to reduce the count on the head

713
00:33:27,100 --> 00:33:29,000
block or in the other case.

714
00:33:29,000 --> 00:33:29,800
We are some other block.

715
00:33:30,000 --> 00:33:32,600
Lock in which case, what we're going to do is we're going to reduce

716
00:33:32,600 --> 00:33:35,800
the amount on the head block by grabbing something from head block,

717
00:33:35,800 --> 00:33:37,600
and putting it in here, right?

718
00:33:39,200 --> 00:33:40,900
So what I'd like to do is say okay.

719
00:33:41,500 --> 00:33:42,100
Got it.

720
00:33:42,100 --> 00:33:46,200
Let's see if chunk first block equals block, right?

721
00:33:48,600 --> 00:33:53,500
So in this case, we're going to say if, if we're on the first block

722
00:33:53,500 --> 00:33:58,000
itself, then all we really need to do is swap with the last guy in

723
00:33:58,000 --> 00:34:00,900
here, and I don't really know.

724
00:34:01,500 --> 00:34:07,100
I, I feel like I could write this code to just be very aliasing and

725
00:34:07,200 --> 00:34:08,300
let the compiler.

726
00:34:08,699 --> 00:34:09,600
I think we don't have it.

727
00:34:09,600 --> 00:34:12,300
Something to anything turned on, its going to assume, no aliasing like

728
00:34:12,300 --> 00:34:12,800
that.

729
00:34:15,199 --> 00:34:17,900
So we may be able to just let this ride without having to do the

730
00:34:17,900 --> 00:34:21,300
check, but I'm going to break it into case that first and then we can

731
00:34:21,300 --> 00:34:23,300
collapse them later if need be.

732
00:34:23,900 --> 00:34:26,900
So I'm going to do here is say, alright, if the first block equals the

733
00:34:26,900 --> 00:34:28,500
block, then we just have one block to deal with.

734
00:34:28,500 --> 00:34:32,699
So all we're doing here, is we're saying that the entity count on the

735
00:34:32,699 --> 00:34:33,800
chunk that we're on, right?

736
00:34:33,800 --> 00:34:35,699
Whoops, glop.

737
00:34:37,500 --> 00:34:39,900
The end of the count is going to go down.

738
00:34:40,000 --> 00:34:40,500
Right?

739
00:34:40,600 --> 00:34:42,600
And when the enemy comes out, goes down.

740
00:34:42,800 --> 00:34:46,500
What I want to do is I want to take whatever was at the end of the

741
00:34:46,500 --> 00:34:51,300
list and I want to put it in the location where I'm removing the sky.

742
00:34:51,300 --> 00:34:54,400
So basically the low entity Index, right?

743
00:34:54,600 --> 00:34:55,100
Of whatever.

744
00:34:55,100 --> 00:34:55,800
This guy was.

745
00:34:57,500 --> 00:35:00,400
Well, I actually have one of the things that I want to do, right?

746
00:35:00,800 --> 00:35:04,800
I want to see if that first block, and you know what?

747
00:35:04,800 --> 00:35:07,100
I think I'm going to introduce an actual pointer.

748
00:35:07,300 --> 00:35:08,300
Called first block.

749
00:35:08,300 --> 00:35:09,900
So I'm going to I'm going to just go ahead and do that.

750
00:35:10,200 --> 00:35:16,800
So I can say, first block equals chunk first block, right like so so

751
00:35:16,800 --> 00:35:21,700
what I want to do is I want to say, Okay, first things first, if there

752
00:35:21,700 --> 00:35:25,400
was only one entity in the first block, is really what I should be,

753
00:35:25,400 --> 00:35:26,600
what I should be checking in this case.

754
00:35:26,600 --> 00:35:30,300
So if the first block equals the block, if the first block entity

755
00:35:30,300 --> 00:35:35,800
count equals 0, or I should say equals 1, right?

756
00:35:35,800 --> 00:35:36,700
So if me

757
00:35:37,200 --> 00:35:37,600
Moving.

758
00:35:37,600 --> 00:35:41,500
This guy is basically going to cause this block to go away.

759
00:35:42,600 --> 00:35:46,800
Then what I need to do is something very special.

760
00:35:47,100 --> 00:35:51,600
What I need to do is say okay, if there was a next block, that block

761
00:35:51,600 --> 00:35:53,700
is now going to become me, right?

762
00:35:53,900 --> 00:35:58,600
So basically, I need to say if that first block next is valid.

763
00:35:58,900 --> 00:35:59,800
Then the first block,

764
00:36:00,000 --> 00:36:02,500
Self becomes the the next block, right?

765
00:36:02,500 --> 00:36:04,800
Because we would be getting rid of this block entirely.

766
00:36:04,800 --> 00:36:05,700
It just goes away.

767
00:36:06,100 --> 00:36:10,100
So I want to pull that next block up into where I'm at, essentially

768
00:36:10,100 --> 00:36:12,900
getting rid of one of them, right?

769
00:36:13,700 --> 00:36:15,400
So that finishes that off.

770
00:36:15,400 --> 00:36:16,000
But

771
00:36:17,400 --> 00:36:21,600
I have one other thing that I need to do, which is we had memory

772
00:36:21,600 --> 00:36:23,100
stored for that next block.

773
00:36:23,100 --> 00:36:24,600
I'd like to reclaim that, right.

774
00:36:24,600 --> 00:36:27,700
I'd like to be able to use that for further entity block storage.

775
00:36:27,900 --> 00:36:28,400
Right?

776
00:36:28,900 --> 00:36:33,500
So the world empty block next block, right, is going to be equal to

777
00:36:33,500 --> 00:36:34,000
this.

778
00:36:34,600 --> 00:36:36,300
We're going to set that equal to

779
00:36:38,900 --> 00:36:39,700
To it there.

780
00:36:39,700 --> 00:36:43,600
And then what I'm going to do is say well I can I can go ahead and

781
00:36:43,600 --> 00:36:44,300
free that block.

782
00:36:44,300 --> 00:36:46,300
So I'm going to make a note of that here because we're gonna talk

783
00:36:46,300 --> 00:36:49,000
about what that does in a second, but I'm not actually going to

784
00:36:49,000 --> 00:36:51,400
implement it for another couple seconds because I just want to work

785
00:36:51,400 --> 00:36:54,000
out what all the cases are here for doing the storage, the way that

786
00:36:54,000 --> 00:36:55,500
were doing it first.

787
00:36:55,500 --> 00:36:57,800
So the first step is to look at the end of the count equals 1.

788
00:36:57,800 --> 00:37:01,900
If the entity count does not equal 1, that means that we have an

789
00:37:01,900 --> 00:37:03,600
entity that we can Shuffle into this place.

790
00:37:03,600 --> 00:37:06,800
So all we're going to do is we're going to take that entity count and

791
00:37:06,800 --> 00:37:08,500
if you imagine what we're doing here again,

792
00:37:09,000 --> 00:37:09,800
A straightforward.

793
00:37:10,300 --> 00:37:12,900
Oops, I really wish that it would not do that.

794
00:37:12,900 --> 00:37:14,600
I feel like they should fix that bug.

795
00:37:14,700 --> 00:37:16,000
It's a really bad bug.

796
00:37:16,400 --> 00:37:18,200
And I feel like you had to have known that.

797
00:37:18,200 --> 00:37:22,400
It was there because it's anyone who's ever alt-tab to your program

798
00:37:22,400 --> 00:37:23,300
would experience it.

799
00:37:24,000 --> 00:37:25,900
I'll have to send them an email.

800
00:37:26,300 --> 00:37:26,800
Okay?

801
00:37:28,700 --> 00:37:29,200
so,

802
00:37:30,900 --> 00:37:36,500
Essentially, what we're doing is, we're pick that pick it.

803
00:37:36,500 --> 00:37:37,000
There we go.

804
00:37:37,500 --> 00:37:39,800
That's what we're doing is we're going to go ahead and say all right,

805
00:37:39,800 --> 00:37:42,300
we've got some number of entities in here, right?

806
00:37:43,000 --> 00:37:47,100
And again entity count would basically be pointing to some this is the

807
00:37:47,100 --> 00:37:48,400
count here, right?

808
00:37:48,400 --> 00:37:51,000
We point to some location that doesn't exist at the moment.

809
00:37:51,100 --> 00:37:53,700
We are looking at some location that does exist.

810
00:37:54,000 --> 00:37:57,100
And what we want to do is say, all right, we want to reduce the count

811
00:37:57,100 --> 00:37:59,900
by 1, so it'll now Point here, right?

812
00:38:02,100 --> 00:38:02,600
Excuse me.

813
00:38:03,600 --> 00:38:07,700
And what we'd also like to do is we'd like to move, whoever was there

814
00:38:07,900 --> 00:38:10,100
into the the location that we have.

815
00:38:10,200 --> 00:38:10,800
Right?

816
00:38:11,500 --> 00:38:12,200
Does that make sense?

817
00:38:12,400 --> 00:38:17,300
So all we're trying to do here is say, okay, whatever whatever that

818
00:38:17,300 --> 00:38:23,400
first block low entity index is wherever entity count will now be

819
00:38:23,400 --> 00:38:30,300
pointing to, we want to make where we are at right now equal to that.

820
00:38:30,300 --> 00:38:31,800
So use the space that we are.

821
00:38:32,300 --> 00:38:34,100
Pulling the The Entity that we're moving.

822
00:38:34,300 --> 00:38:38,000
We're pulling him out of that, use that space to store, whatever was

823
00:38:38,100 --> 00:38:40,900
at the tail end of this list, right?

824
00:38:41,500 --> 00:38:43,000
And that's that's it.

825
00:38:43,100 --> 00:38:44,100
That's what we're going to do there.

826
00:38:47,900 --> 00:38:50,700
Okay, excuse me.

827
00:38:51,800 --> 00:38:54,700
And so if it wasn't the case, right?

828
00:38:56,200 --> 00:38:58,500
If that wasn't the case, well, honestly.

829
00:39:00,000 --> 00:39:02,200
Are basically it's a posse, right?

830
00:39:03,300 --> 00:39:07,200
It's pretty much exactly the same there really isn't anything.

831
00:39:07,900 --> 00:39:09,600
Yeah, there really isn't anything else to say.

832
00:39:09,600 --> 00:39:15,400
In fact, we don't even have to do this if if we happen to have been

833
00:39:15,400 --> 00:39:17,600
removing it from there.

834
00:39:18,200 --> 00:39:18,900
Really?

835
00:39:20,100 --> 00:39:20,500
Yeah.

836
00:39:20,500 --> 00:39:24,800
I mean, there's really only one sort of iffy Corner case that we have

837
00:39:24,800 --> 00:39:25,300
to deal with.

838
00:39:25,300 --> 00:39:26,900
So let's go ahead and just write them as 1.

839
00:39:27,900 --> 00:39:29,800
If the first first, if the first luck

840
00:39:30,000 --> 00:39:34,400
Entity count equals 1, then we do have to do that shuffle there.

841
00:39:35,300 --> 00:39:37,300
But really the only thing is this guy.

842
00:39:37,400 --> 00:39:40,100
Well, I don't know, maybe it's clear to write it this way.

843
00:39:41,300 --> 00:39:43,400
You can see what I'm what I'm kind of grappling with here.

844
00:39:43,800 --> 00:39:47,200
If we know that we're only the first, if it's only the first block,

845
00:39:47,300 --> 00:39:50,700
then we know that we can just do this and we don't have to do the copy

846
00:39:50,700 --> 00:39:52,800
because we know that there's no room left in the first block.

847
00:39:54,000 --> 00:39:58,600
But if if we actually worked the first block, then we essentially have

848
00:39:58,600 --> 00:39:59,800
to do the same thing.

849
00:40:00,000 --> 00:40:00,600
Right.

850
00:40:01,800 --> 00:40:03,000
I was trying to condense them.

851
00:40:03,300 --> 00:40:08,200
So let's just blow them out first and see if we know, excuse me.

852
00:40:09,700 --> 00:40:12,900
If we know that the first block was not born, we're on but it still

853
00:40:12,900 --> 00:40:14,800
has that then we need to do that copy again.

854
00:40:14,800 --> 00:40:17,900
But we need to do first is we need to salvage that entity first.

855
00:40:17,900 --> 00:40:22,800
So in either case, now, what we would do is this guy always, right?

856
00:40:23,200 --> 00:40:25,800
So what we'd want to do is say, okay, whatever.

857
00:40:25,800 --> 00:40:27,900
The first block edit index is there.

858
00:40:28,000 --> 00:40:31,400
We're going to copy it from the Block that we're on.

859
00:40:31,600 --> 00:40:35,300
Because they're different and we're going to go ahead and reduce that

860
00:40:35,300 --> 00:40:35,500
block.

861
00:40:35,500 --> 00:40:36,400
Entity count.

862
00:40:36,900 --> 00:40:37,200
Nope.

863
00:40:37,200 --> 00:40:38,400
Sorry, did that backwards?

864
00:40:39,800 --> 00:40:41,500
We're trying to copy it into this location.

865
00:40:41,700 --> 00:40:44,300
The one that we're on the one, the, the space that is now free.

866
00:40:44,900 --> 00:40:48,400
We're going to go ahead and grab whatever that last one was in the

867
00:40:48,400 --> 00:40:49,200
first block.

868
00:40:49,600 --> 00:40:53,500
And then, if that block, count has now dropped to zero, right?

869
00:40:53,500 --> 00:40:54,400
As a result.

870
00:40:54,600 --> 00:40:57,600
Then we're going to go ahead and do the free if necessary.

871
00:40:57,800 --> 00:40:58,100
Right?

872
00:40:58,100 --> 00:41:01,700
If it happened to have something down the road from, it will grab it.

873
00:41:02,400 --> 00:41:05,400
So I guess what I was going to say though, is I want would like to

874
00:41:05,400 --> 00:41:06,300
collapse these.

875
00:41:06,400 --> 00:41:09,500
I'd like to get rid of this and so the question is, is

876
00:41:09,600 --> 00:41:11,400
Anything special that we have to do it.

877
00:41:11,900 --> 00:41:15,000
Kind of looks to me like this just works, no matter what, right?

878
00:41:15,000 --> 00:41:18,900
I mean, it doesn't, it doesn't really look like there's anything else.

879
00:41:18,900 --> 00:41:21,500
If, if it was the first block and the entity count.

880
00:41:21,500 --> 00:41:27,200
It would just copy the zero with and index over itself, which is fine.

881
00:41:27,400 --> 00:41:27,900
Right?

882
00:41:28,000 --> 00:41:28,900
So it doesn't really matter.

883
00:41:28,900 --> 00:41:33,200
So, I think we can just say that after all that after thinking it

884
00:41:33,200 --> 00:41:35,200
through, really, that's it.

885
00:41:35,700 --> 00:41:37,700
That's the entirety of the code.

886
00:41:37,700 --> 00:41:39,400
That's really all we need to do, right?

887
00:41:39,500 --> 00:41:42,400
Right, and I don't know if I've got bugs in there, of course, maybe I

888
00:41:42,400 --> 00:41:43,800
do, but but that's it.

889
00:41:44,100 --> 00:41:45,600
And it's once we find it.

890
00:41:48,200 --> 00:41:50,700
We can break out of there but we've got to do a double break here,

891
00:41:51,200 --> 00:41:54,600
unfortunately, because we essentially have two.

892
00:41:54,600 --> 00:41:55,300
Yeah, we got it.

893
00:41:55,300 --> 00:41:58,600
We kind of got to do something like this because we have to be able to

894
00:41:58,600 --> 00:41:59,800
stop searching through the blocks.

895
00:42:00,000 --> 00:42:03,000
We don't want to waste time searching through blocks that don't

896
00:42:03,000 --> 00:42:03,700
actually matter.

897
00:42:04,700 --> 00:42:07,500
So really what we have to do now is just address what happens when you

898
00:42:07,500 --> 00:42:10,700
free a block and this is one of those memory management things.

899
00:42:10,700 --> 00:42:11,300
Like I said,

900
00:42:15,700 --> 00:42:17,700
People don't usually believe me.

901
00:42:17,700 --> 00:42:20,200
When I say that, I don't spend time thinking about memory management

902
00:42:20,500 --> 00:42:23,900
and I really just don't because it seems like most of the time, it

903
00:42:23,900 --> 00:42:25,200
just sort of handles itself.

904
00:42:25,300 --> 00:42:28,100
Usually the things that I do spend time thinking about are things like

905
00:42:28,100 --> 00:42:31,900
this where I like to actually work on the data structures themselves

906
00:42:31,900 --> 00:42:34,100
because I like to think about how things are being stored and I like

907
00:42:34,100 --> 00:42:37,400
to play with those and make things that are custom built as opposed to

908
00:42:37,400 --> 00:42:40,500
just using a generic array and just throw things in and call like

909
00:42:40,500 --> 00:42:42,000
search or a map or something like that.

910
00:42:42,000 --> 00:42:42,600
Right?

911
00:42:42,800 --> 00:42:44,200
I like to do that sort of stuff.

912
00:42:44,400 --> 00:42:45,400
And so that is definitely

913
00:42:45,500 --> 00:42:47,700
Something that I do spend time doing all those.

914
00:42:47,700 --> 00:42:48,100
You can see.

915
00:42:48,100 --> 00:42:48,800
Not that long man.

916
00:42:48,800 --> 00:42:50,200
How long did that take us 30 minutes?

917
00:42:50,200 --> 00:42:50,700
I don't know.

918
00:42:50,800 --> 00:42:52,700
Not very long, but I still like to do that.

919
00:42:52,900 --> 00:42:55,500
But the memory management part of it, that's the thing that people

920
00:42:55,500 --> 00:42:55,900
bring up.

921
00:42:55,900 --> 00:43:02,200
So often is so free compared to the other.

922
00:43:02,200 --> 00:43:05,600
The rest of the thought that I put into any particular system that I'm

923
00:43:05,600 --> 00:43:08,700
surprised is the one that always comes up because in this case, we

924
00:43:08,700 --> 00:43:10,300
have that exact situation, right.

925
00:43:10,300 --> 00:43:13,400
Where we've got memory that's being used, these entity blocks and we

926
00:43:13,400 --> 00:43:15,300
need to make sure that we conserve it.

927
00:43:15,500 --> 00:43:19,900
It but it's so easy to just I mean, this is the entirety of the memory

928
00:43:19,900 --> 00:43:21,500
management we would need right.

929
00:43:21,500 --> 00:43:25,000
All we would need to do is say first free, right?

930
00:43:25,000 --> 00:43:29,400
There's our first free block and when we free a block we just say,

931
00:43:29,400 --> 00:43:29,800
okay?

932
00:43:29,800 --> 00:43:34,900
The world first free equals that block that we just read and it's next

933
00:43:34,900 --> 00:43:39,600
pointer is going to be whatever, you know was there, right?

934
00:43:39,600 --> 00:43:43,500
So base is going to take that and instead of where it was chaining off

935
00:43:43,500 --> 00:43:43,900
before.

936
00:43:43,900 --> 00:43:45,100
We're just going to stick it on a chain.

937
00:43:45,100 --> 00:43:45,400
That's on the

938
00:43:45,500 --> 00:43:49,200
Of thing and then like I said, down here, when we do this push struct

939
00:43:49,300 --> 00:43:50,600
instead of doing that.

940
00:43:51,200 --> 00:43:54,500
What we're going to do is we're just going to say, okay.

941
00:43:54,700 --> 00:43:57,500
The old block actually is going to be equal to

942
00:43:58,600 --> 00:44:01,200
Whatever, that first free was in the world.

943
00:44:01,200 --> 00:44:04,000
So we'll just grab whatever, whatever is on that free list.

944
00:44:04,500 --> 00:44:07,900
If nothing's on the free list, meaning we don't actually have anything

945
00:44:08,900 --> 00:44:09,500
on there.

946
00:44:10,200 --> 00:44:10,700
Up there.

947
00:44:11,300 --> 00:44:13,000
We don't actually have anything on there.

948
00:44:13,000 --> 00:44:17,200
So if not old block, right, or I could even say, if old Buck, right?

949
00:44:17,200 --> 00:44:17,900
We'll do it this way.

950
00:44:21,500 --> 00:44:22,000
Like so.

951
00:44:22,600 --> 00:44:26,900
So if we have an old block, then what we do want to do is say, okay,

952
00:44:27,200 --> 00:44:28,000
then world.

953
00:44:28,000 --> 00:44:30,500
First free is now going to be equal to whatever that.

954
00:44:30,500 --> 00:44:32,400
The next thing was on the free list.

955
00:44:32,700 --> 00:44:37,800
And otherwise, we're just going to allocate right and that's it.

956
00:44:37,800 --> 00:44:42,200
That's the entirety of the memory management for the system right was

957
00:44:42,300 --> 00:44:43,600
absolutely trivial.

958
00:44:45,200 --> 00:44:46,800
And, you know, maybe I made a typo in there.

959
00:44:46,800 --> 00:44:49,000
Like I said, when I talk on the stream, sometimes I can't concentrate

960
00:44:49,000 --> 00:44:49,600
that high, but

961
00:44:49,800 --> 00:44:51,400
I almost never make mistakes in those.

962
00:44:51,400 --> 00:44:53,000
If I do, it'll take us 10 seconds to find.

963
00:44:53,000 --> 00:44:54,700
I mean, we only have to step through two ears.

964
00:44:54,800 --> 00:44:58,900
There's all of four lines of code involved in the memory management

965
00:44:58,900 --> 00:44:59,600
for this thing.

966
00:45:00,500 --> 00:45:03,600
And now there's never a call to an alligator at.

967
00:45:03,600 --> 00:45:05,300
There's never a need to serialize.

968
00:45:05,300 --> 00:45:08,800
There's never a need to have allocation at runtime.

969
00:45:09,800 --> 00:45:12,100
It just works, right?

970
00:45:12,700 --> 00:45:13,500
And

971
00:45:14,900 --> 00:45:15,300
Yeah.

972
00:45:15,300 --> 00:45:19,800
So again, I wouldn't ever really call that out or make a big deal out.

973
00:45:19,800 --> 00:45:22,700
I would have just typed it in but I just kind of wanted to emphasize

974
00:45:22,700 --> 00:45:22,900
that.

975
00:45:22,900 --> 00:45:26,400
That's what it feels like to me because when people ask me these

976
00:45:26,400 --> 00:45:29,900
questions a lot of times I don't have a good feel for where they're

977
00:45:29,900 --> 00:45:33,600
coming from because in my world that's the extent to which I think

978
00:45:33,600 --> 00:45:34,500
about memory management.

979
00:45:34,500 --> 00:45:37,400
It was like that 5 Seconds at the end of something that took me 30

980
00:45:37,400 --> 00:45:42,000
minutes to Think Through how exactly I felt like everything should

981
00:45:42,000 --> 00:45:44,500
work for a number of other reasons that were

982
00:45:44,700 --> 00:45:47,700
Very complicated like spatial queries and how often something to do

983
00:45:47,700 --> 00:45:48,200
something on this.

984
00:45:48,200 --> 00:45:51,000
And I was thinking about how to get a good first pass design that I

985
00:45:51,000 --> 00:45:51,300
could work.

986
00:45:51,300 --> 00:45:54,400
You know, all that stuff is so much more complicated and there's so

987
00:45:54,400 --> 00:45:55,300
many more trade-offs.

988
00:45:55,300 --> 00:45:58,000
The memory management part is like irrelevant.

989
00:45:58,000 --> 00:46:01,500
It's like 10 seconds of typing and maybe 30 seconds of debugging later

990
00:46:01,500 --> 00:46:04,600
to make sure that it worked and you didn't type make a typo, right?

991
00:46:07,300 --> 00:46:08,300
And that's the end of it.

992
00:46:11,300 --> 00:46:12,100
So, that's it.

993
00:46:12,200 --> 00:46:19,600
Yeah, and and and there really isn't much left to say so that is how

994
00:46:19,600 --> 00:46:20,900
roughly will do things again.

995
00:46:20,900 --> 00:46:23,900
Like I said, there's a bunch of it's a fairly nuanced piece of Kobe

996
00:46:23,900 --> 00:46:24,600
just wrote.

997
00:46:25,300 --> 00:46:28,800
I'm sure that there's some typos / bug stuff in there.

998
00:46:28,800 --> 00:46:30,600
Oh, we forgot to do X, you've got to do why?

999
00:46:31,100 --> 00:46:32,800
So I think it's a good thing to start.

1000
00:46:32,800 --> 00:46:35,200
Testing it out, just play around a little make sure that we got it

1001
00:46:35,200 --> 00:46:38,000
working and we've got a bunch of other stuff that we sort of said in

1002
00:46:38,000 --> 00:46:38,900
the meantime, and we've got to

1003
00:46:39,100 --> 00:46:39,600
Do that as well.

1004
00:46:39,600 --> 00:46:40,900
So we might as well start that process.

1005
00:46:40,900 --> 00:46:44,400
I don't think we'll finish it probably in time for the end of the

1006
00:46:44,400 --> 00:46:45,800
stream, but we all might as well start it.

1007
00:46:45,800 --> 00:46:48,400
And then tomorrow we can finish it up and then our spatial queries are

1008
00:46:48,400 --> 00:46:49,100
pretty much done.

1009
00:46:49,700 --> 00:46:50,500
So that's pretty cool.

1010
00:46:51,900 --> 00:46:56,300
So what I would like to do is, say all right, we've got rid of the

1011
00:46:56,300 --> 00:46:58,900
chunk shift and masks and dim and all that sort of stuff.

1012
00:46:59,000 --> 00:47:00,500
We've got rid of that.

1013
00:47:00,700 --> 00:47:04,800
So we just got tile sided M and chunk side in meters and the chunk

1014
00:47:04,800 --> 00:47:05,600
side and M.

1015
00:47:05,600 --> 00:47:07,200
You know, is just going to be something.

1016
00:47:07,200 --> 00:47:09,500
We'll have to think about what we actually want that value to be.

1017
00:47:09,500 --> 00:47:11,000
We don't really care at the moment.

1018
00:47:11,300 --> 00:47:12,200
We have to do that.

1019
00:47:12,400 --> 00:47:15,700
We also would like to set our first free Block to be 0.

1020
00:47:16,100 --> 00:47:19,500
And when we go ahead and set up these chunk ashes, I would also like

1021
00:47:19,500 --> 00:47:21,400
to go ahead and set those from first.

1022
00:47:21,700 --> 00:47:23,400
And he counts to be zero as well.

1023
00:47:23,700 --> 00:47:26,400
And again, this is just so for using some memory that was initialized

1024
00:47:26,400 --> 00:47:27,800
to 0 which might be true on second.

1025
00:47:27,800 --> 00:47:28,900
Third runs through the game.

1026
00:47:29,300 --> 00:47:30,800
We want to make sure we initialize that properly.

1027
00:47:33,100 --> 00:47:34,400
So I went ahead and did that.

1028
00:47:35,800 --> 00:47:36,500
And off we go.

1029
00:47:37,400 --> 00:47:40,700
So now when we're doing the rest of our stuff here, we can sort of

1030
00:47:40,700 --> 00:47:41,900
think this through a little bit.

1031
00:47:41,900 --> 00:47:44,300
We don't have to do get chunk position for anymore.

1032
00:47:44,300 --> 00:47:45,300
We know that that's gone.

1033
00:47:45,700 --> 00:47:49,600
So really our spatial partition is really just a hash table, plus a

1034
00:47:50,000 --> 00:47:51,600
sort of daisy chain of chunks.

1035
00:47:52,100 --> 00:47:55,300
So I guess we've got that straightened away, pretty pretty well.

1036
00:47:57,600 --> 00:47:59,800
I think at this point, we know that these do not

1037
00:48:00,500 --> 00:48:02,700
These do not belong in a position, your geometry file because they're

1038
00:48:02,700 --> 00:48:06,200
really pretty intimately tied to the concept of the world storage.

1039
00:48:06,300 --> 00:48:09,100
So I think that's probably the appropriate place for them as well.

1040
00:48:09,800 --> 00:48:12,700
So now we just have to do is kind of start talking about these other

1041
00:48:12,700 --> 00:48:13,900
things here that we've got.

1042
00:48:14,300 --> 00:48:19,500
We had a new sort of sense of are on same tile.

1043
00:48:19,800 --> 00:48:22,800
We wanted to change that over to be are on same chunk.

1044
00:48:23,500 --> 00:48:25,400
And so let's go ahead and see.

1045
00:48:25,400 --> 00:48:29,400
I know we call that somewhere are on same.

1046
00:48:30,000 --> 00:48:30,300
Oops.

1047
00:48:31,700 --> 00:48:32,300
Could I do.

1048
00:48:32,800 --> 00:48:33,300
There we go.

1049
00:48:33,800 --> 00:48:35,700
Same shock.

1050
00:48:36,300 --> 00:48:36,800
There we go.

1051
00:48:37,400 --> 00:48:40,100
So we'll change this to our in same Chunk.

1052
00:48:40,100 --> 00:48:40,900
We take two of them.

1053
00:48:40,900 --> 00:48:44,700
And basically this is just going to change that AB style to a chunk.

1054
00:48:44,700 --> 00:48:45,000
Oops.

1055
00:48:45,200 --> 00:48:49,300
That's not what I wanted AB style to chunk.

1056
00:48:49,500 --> 00:48:53,900
So those are placed and that is the definition of whether something's

1057
00:48:53,900 --> 00:48:54,800
on the same chunk.

1058
00:48:55,300 --> 00:48:59,100
Now, I should probably assert here when it does the check, that these

1059
00:48:59,100 --> 00:49:00,700
offsets are within bounds.

1060
00:49:01,500 --> 00:49:03,900
And that because otherwise the test would fail.

1061
00:49:03,900 --> 00:49:05,600
So we're kind of assuming this is true here.

1062
00:49:06,100 --> 00:49:10,900
So what I kind of want to do is say, let's go ahead and assert is

1063
00:49:10,900 --> 00:49:12,500
canonical, right?

1064
00:49:12,600 --> 00:49:14,100
Let's make a function for that.

1065
00:49:14,600 --> 00:49:16,200
And what is canonical do?

1066
00:49:16,400 --> 00:49:16,700
Right?

1067
00:49:16,700 --> 00:49:17,800
Is is canonical.

1068
00:49:19,000 --> 00:49:24,200
Will just take one of these sort of one of these positions here.

1069
00:49:24,600 --> 00:49:28,800
It'll take a guess a tile relative offset, right?

1070
00:49:28,800 --> 00:49:30,100
So take a real value.

1071
00:49:30,600 --> 00:49:31,300
That's basically just

1072
00:49:31,400 --> 00:49:39,400
Just like this style Rail, and it will go ahead and and say, whether

1073
00:49:39,400 --> 00:49:41,200
whether this is is working or not.

1074
00:49:41,200 --> 00:49:41,500
Right?

1075
00:49:41,500 --> 00:49:43,700
Fix floating Point mass of this can be exact.

1076
00:49:44,200 --> 00:49:47,700
How did we, how are we getting away with these being greater than when

1077
00:49:47,700 --> 00:49:48,100
did I win?

1078
00:49:48,100 --> 00:49:49,200
Did I switch from it?

1079
00:49:49,200 --> 00:49:50,100
Being that?

1080
00:49:50,500 --> 00:49:51,600
When did I switch from that?

1081
00:49:51,600 --> 00:49:53,900
Because that technically shouldn't be possible.

1082
00:49:53,900 --> 00:49:55,000
You should be able to end up.

1083
00:49:55,500 --> 00:49:59,600
You have to be able to end up exactly on it, one way or the other at

1084
00:49:59,600 --> 00:50:01,100
least in one of the directions.

1085
00:50:01,500 --> 00:50:03,300
That's a know why we did that.

1086
00:50:03,600 --> 00:50:04,400
All right.

1087
00:50:04,600 --> 00:50:06,900
Yeah, that's well.

1088
00:50:06,900 --> 00:50:08,400
We've got a nice little to do on there.

1089
00:50:08,400 --> 00:50:10,500
So we'll leave that to do on there.

1090
00:50:10,500 --> 00:50:13,300
But anyway, is canonical will now.

1091
00:50:15,600 --> 00:50:18,800
Basically, give us something like this, right?

1092
00:50:18,800 --> 00:50:21,900
Will say, all right, it's canonical if both.

1093
00:50:24,500 --> 00:50:27,200
If it's, if it's within the bounds, right?

1094
00:50:28,200 --> 00:50:34,000
And so now, we can sort of say we've got that test and we also will do

1095
00:50:34,000 --> 00:50:39,300
one where we do are these always done with V2s?

1096
00:50:39,300 --> 00:50:41,800
No, they're not, because they are economically as Court separately.

1097
00:50:41,800 --> 00:50:43,100
So we do want that to be separate.

1098
00:50:43,100 --> 00:50:44,900
So it will do is we'll make a separate one here.

1099
00:50:46,300 --> 00:50:51,400
It's basically that which go ahead and says that the result equals is

1100
00:50:51,400 --> 00:50:53,700
canonical world.

1101
00:50:54,200 --> 00:50:59,700
Set X and is canonical world.

1102
00:51:00,000 --> 00:51:05,900
That why we go and that will return the results as well.

1103
00:51:06,300 --> 00:51:09,800
So now I've got the ability to just kind of ask at any time really

1104
00:51:09,800 --> 00:51:14,000
easily whether or not these guys are canonical.

1105
00:51:14,100 --> 00:51:18,000
I'll stick that up at the top and then when we do that, re

1106
00:51:18,000 --> 00:51:19,000
canonicalize

1107
00:51:21,900 --> 00:51:22,900
What was that peacock?

1108
00:51:22,900 --> 00:51:25,500
Last chord we can do that is canonical.

1109
00:51:25,500 --> 00:51:30,300
Check on the tile relative position and I think that should be good

1110
00:51:30,300 --> 00:51:30,600
there.

1111
00:51:30,900 --> 00:51:36,900
And that way, this guy can also basically guarantee to whoever's

1112
00:51:36,900 --> 00:51:42,800
calling him that it had been, you know, cut it had been canonicalized

1113
00:51:43,000 --> 00:51:44,500
before it was checked.

1114
00:51:44,700 --> 00:51:45,100
Right?

1115
00:51:45,200 --> 00:51:47,800
So basically, we'll pass the world in there and say, okay, will double

1116
00:51:47,800 --> 00:51:50,600
check that make sure that it was canonical first.

1117
00:51:50,800 --> 00:51:54,500
Otherwise, we know that this would fail, right?

1118
00:51:54,700 --> 00:51:56,800
So we've got that like so,

1119
00:51:59,500 --> 00:52:00,300
And there we go.

1120
00:52:00,900 --> 00:52:02,300
So we'll double check those.

1121
00:52:02,300 --> 00:52:03,400
That seems good.

1122
00:52:03,500 --> 00:52:04,700
Let's see where else we're at.

1123
00:52:04,700 --> 00:52:08,500
Here are get World, chunk, chunk.

1124
00:52:08,500 --> 00:52:10,900
Tim towel.

1125
00:52:10,900 --> 00:52:13,300
Count is no longer even a relevant thing.

1126
00:52:13,300 --> 00:52:14,400
It doesn't matter at all.

1127
00:52:14,800 --> 00:52:19,700
So off we go with that and now we just have to do we have to fix our

1128
00:52:19,700 --> 00:52:20,900
economically ization.

1129
00:52:21,200 --> 00:52:22,500
Now are we cannot see ization?

1130
00:52:22,500 --> 00:52:24,800
Can literally just think of them as same as they were thinking of

1131
00:52:24,800 --> 00:52:25,300
tiles.

1132
00:52:25,300 --> 00:52:27,100
There's really nothing else that we have to do here.

1133
00:52:27,400 --> 00:52:27,900
Essentially.

1134
00:52:27,900 --> 00:52:29,200
All we're going to do is just change.

1135
00:52:29,300 --> 00:52:33,500
Change from thinking in terms of tiles to thinking in terms of chunks.

1136
00:52:34,000 --> 00:52:36,600
So really that just involves me doing this, right?

1137
00:52:36,600 --> 00:52:42,700
It just involves me doing doing this and similarly are re canonicalize

1138
00:52:42,700 --> 00:52:44,400
right if we want to switch to that.

1139
00:52:44,400 --> 00:52:46,700
We just do chunk side and M.

1140
00:52:47,200 --> 00:52:54,000
And now I think basically everything is going to be chunk side in

1141
00:52:54,000 --> 00:52:54,700
meters.

1142
00:52:55,900 --> 00:52:58,000
Oops tile side and beers.

1143
00:52:59,500 --> 00:53:01,600
So now we just have to go ahead and say, all right.

1144
00:53:01,600 --> 00:53:05,900
These are all going to be the same as well, shrimp side and M chunk

1145
00:53:05,900 --> 00:53:06,900
side and M.

1146
00:53:07,200 --> 00:53:07,700
Right?

1147
00:53:08,700 --> 00:53:10,100
And so tile siding M.

1148
00:53:10,100 --> 00:53:11,100
You literally use know?

1149
00:53:11,100 --> 00:53:12,700
We're in here now, which is what we want.

1150
00:53:12,900 --> 00:53:16,000
So the re-cock lies now will work properly to canonicalize and chunk

1151
00:53:16,000 --> 00:53:18,200
space instead of tile space, which is what we want.

1152
00:53:18,300 --> 00:53:22,100
Basically just think of them as giant tiles and there's just lots of

1153
00:53:22,100 --> 00:53:25,600
entities and any given tile that make up the character of the world

1154
00:53:26,600 --> 00:53:29,100
and we done that.

1155
00:53:29,200 --> 00:53:33,000
Third tile point is not particularly useful anymore.

1156
00:53:33,000 --> 00:53:34,300
But I guess we'll leave it in there for now.

1157
00:53:34,300 --> 00:53:35,700
In case anyone's actually calling it.

1158
00:53:35,700 --> 00:53:37,000
Is anyone actually calling it.

1159
00:53:38,200 --> 00:53:38,900
Let's see.

1160
00:53:39,500 --> 00:53:39,700
Laughs.

1161
00:53:39,700 --> 00:53:40,900
I guess I can just do a compile.

1162
00:53:41,600 --> 00:53:42,600
Let's find out this way.

1163
00:53:43,500 --> 00:53:43,800
Okay.

1164
00:53:43,800 --> 00:53:49,900
So first subtract, this is again, just the ABS tile becomes a chunk.

1165
00:53:50,200 --> 00:53:51,000
So there we go.

1166
00:53:51,600 --> 00:53:53,000
And let's see what else we got here.

1167
00:53:53,000 --> 00:53:58,500
Same exact thing AB style equals chunk, and this is actually a

1168
00:53:58,500 --> 00:53:59,100
centered.

1169
00:53:59,300 --> 00:53:59,900
Chunk point.

1170
00:54:00,100 --> 00:54:01,500
Yeah, so I don't even want that out.

1171
00:54:01,500 --> 00:54:03,100
That's not going to be a thing that anyone does.

1172
00:54:03,100 --> 00:54:04,000
Is it really, I guess?

1173
00:54:04,000 --> 00:54:05,100
Well, yeah, who knows?

1174
00:54:05,600 --> 00:54:08,000
Let's call it Center, chunk point and we'll just, we'll just see.

1175
00:54:08,300 --> 00:54:10,100
So, we'll take ABS tab, change that.

1176
00:54:10,400 --> 00:54:11,000
There we go.

1177
00:54:12,000 --> 00:54:13,700
And are in same chunk.

1178
00:54:14,100 --> 00:54:15,500
Now needs to take the world.

1179
00:54:15,500 --> 00:54:16,500
I believe is the only difference.

1180
00:54:16,500 --> 00:54:19,100
There are in Superchunk role position.

1181
00:54:19,100 --> 00:54:20,900
These are taking pointers to the moment.

1182
00:54:21,200 --> 00:54:23,700
Not sure if we care about that, but off we go.

1183
00:54:24,400 --> 00:54:29,800
And so here, we are with with having to do our

1184
00:54:30,000 --> 00:54:34,300
Our Z position, we need to think about that for a minute, but we can

1185
00:54:34,300 --> 00:54:39,500
for the moment, we can for the moment change that to be the chunk Z,

1186
00:54:39,500 --> 00:54:42,600
but we want to think a little bit more about that because right now,

1187
00:54:42,600 --> 00:54:46,400
we don't support offsets in the Z Direction and I think we want to.

1188
00:54:47,600 --> 00:54:48,700
So, that's that war.

1189
00:54:48,700 --> 00:54:49,800
It's a little bit more thought.

1190
00:54:49,800 --> 00:54:50,900
We're pretty much out of time.

1191
00:54:50,900 --> 00:54:54,400
So let's go ahead and finish cleaning some of these things up here.

1192
00:54:56,800 --> 00:55:00,000
I'm not sure what I want to do here for these guys.

1193
00:55:00,300 --> 00:55:05,400
So these are creating entities at those locations and we do know how

1194
00:55:05,400 --> 00:55:08,600
to create things at a particular tile location.

1195
00:55:09,200 --> 00:55:13,600
So what we could do is actually just allow it to map those in there.

1196
00:55:13,700 --> 00:55:15,400
So maybe I'll just do that for now.

1197
00:55:15,400 --> 00:55:16,900
That'll be the easiest thing to do.

1198
00:55:17,300 --> 00:55:18,300
So, I'll do it that way.

1199
00:55:19,200 --> 00:55:22,800
What I'd like to do is say that re canonicalize right that we can

1200
00:55:22,800 --> 00:55:23,600
call.

1201
00:55:24,500 --> 00:55:25,300
Where is that?

1202
00:55:25,300 --> 00:55:25,600
So

1203
00:55:25,700 --> 00:55:31,400
so we canonicalize your should have been mapping at a space.

1204
00:55:31,400 --> 00:55:33,000
Where is the?

1205
00:55:33,700 --> 00:55:35,100
Where is the actual did?

1206
00:55:35,100 --> 00:55:38,700
I accidentally delete the one that calls this guy?

1207
00:55:38,700 --> 00:55:40,700
I think I accidentally did that.

1208
00:55:40,700 --> 00:55:44,000
Was this my bad, you know, didn't mean to delete that guy.

1209
00:55:44,100 --> 00:55:51,300
I actually thought he was was totally fine map into tile space is

1210
00:55:51,300 --> 00:55:54,500
essentially the the function that we actually would want here.

1211
00:55:56,300 --> 00:56:00,800
Yeah, well, well, hold on a second.

1212
00:56:01,100 --> 00:56:05,400
Let's think about this just a little bit more.

1213
00:56:05,700 --> 00:56:10,500
Okay, so if the camera filing entity, yes, so this is going to be the

1214
00:56:10,500 --> 00:56:12,500
chunk Z here, right?

1215
00:56:12,900 --> 00:56:13,600
For now.

1216
00:56:15,000 --> 00:56:20,100
Let's go ahead and take a look, the Abbe style Z against these.

1217
00:56:20,100 --> 00:56:23,500
We're going to have to do some Z handling, a little bit with a little

1218
00:56:23,500 --> 00:56:28,500
bit more Pizzazz in a second here, a little bit more thoughtfulness

1219
00:56:29,000 --> 00:56:31,000
Chuck Z is not a member of high entity.

1220
00:56:31,200 --> 00:56:31,900
That's true.

1221
00:56:32,100 --> 00:56:32,600
That is true.

1222
00:56:32,600 --> 00:56:34,200
It's not AB style Z.

1223
00:56:34,500 --> 00:56:36,500
So that'll be chunk Z for the moment.

1224
00:56:37,600 --> 00:56:39,400
We've got abs tile, X Y.

1225
00:56:39,400 --> 00:56:44,400
So, these are all going to be essentially ones where we have to

1226
00:56:45,700 --> 00:56:50,500
figure out what that what the chunk relatives ocean would be from a

1227
00:56:50,500 --> 00:56:52,600
tile relative position if that makes sense.

1228
00:56:53,900 --> 00:56:58,000
And that is a little trickier, but what I could do is just make a

1229
00:56:58,000 --> 00:56:59,200
function that's called.

1230
00:57:01,800 --> 00:57:04,500
Position from tile position, right?

1231
00:57:04,600 --> 00:57:05,500
Something like that.

1232
00:57:05,600 --> 00:57:10,000
And then just pass these in and that would presumably, just just solve

1233
00:57:10,000 --> 00:57:10,900
the problem for us.

1234
00:57:10,900 --> 00:57:11,500
Right?

1235
00:57:12,000 --> 00:57:14,800
Like so so let's go ahead and take a look at that.

1236
00:57:14,800 --> 00:57:15,700
We don't have that yet.

1237
00:57:15,700 --> 00:57:15,900
Yes.

1238
00:57:15,900 --> 00:57:21,600
I know and if we do hit High into the index, so this is not actually

1239
00:57:22,000 --> 00:57:22,700
done yet.

1240
00:57:22,700 --> 00:57:25,000
We're not going to do that yet to do.

1241
00:57:25,500 --> 00:57:26,700
This is stairs.

1242
00:57:27,200 --> 00:57:29,800
Basically abs tilak.

1243
00:57:30,000 --> 00:57:31,800
X6, this is searching.

1244
00:57:31,800 --> 00:57:36,100
So the set camera now will be this will actually be a thing that we

1245
00:57:36,100 --> 00:57:41,200
can we can do in in tile, chunk space.

1246
00:57:41,600 --> 00:57:45,100
So I'm going to, I'm going to vaporize this for one second just to

1247
00:57:45,100 --> 00:57:47,300
make sure that we're compiling right.

1248
00:57:52,400 --> 00:57:54,300
Can you terms of tile chunks?

1249
00:57:54,800 --> 00:57:55,800
And that's what we'll do.

1250
00:57:55,800 --> 00:57:58,100
I think probably first thing tomorrow because then we'll be optimized

1251
00:57:58,100 --> 00:57:58,800
there as well.

1252
00:57:59,600 --> 00:58:02,900
We got to implement that and the same thing is true here.

1253
00:58:02,900 --> 00:58:04,400
So new camera P.

1254
00:58:04,800 --> 00:58:12,900
Will basically be equal to chunk position from tile position and that

1255
00:58:12,900 --> 00:58:16,300
will just do what it was doing before.

1256
00:58:16,700 --> 00:58:20,000
And so all we really need to do in order to end the day on a working

1257
00:58:20,000 --> 00:58:22,100
note is make sure that we actually write this function.

1258
00:58:22,200 --> 00:58:26,600
Improperly and I say working note that's actually pretty strong

1259
00:58:26,600 --> 00:58:27,000
statement.

1260
00:58:27,000 --> 00:58:28,900
I suppose because we don't actually know if we'll be working.

1261
00:58:28,900 --> 00:58:31,800
Well at least be compiling and that's what we'd like to be.

1262
00:58:31,800 --> 00:58:33,800
Leave us in a good place for tomorrow.

1263
00:58:34,600 --> 00:58:37,700
So all we really need to do is make something that will return.

1264
00:58:40,100 --> 00:58:43,300
A world position from a tile position so that our old code still

1265
00:58:43,300 --> 00:58:43,600
works.

1266
00:58:43,800 --> 00:58:48,500
We may never use that but at least we know that it will work in terms

1267
00:58:48,500 --> 00:58:52,800
of of our testing and testing the same code that we had before.

1268
00:58:53,400 --> 00:58:55,600
So let's go ahead and do that.

1269
00:58:55,600 --> 00:58:56,200
There we go.

1270
00:58:56,800 --> 00:58:58,900
And now we can Implement that function.

1271
00:58:59,800 --> 00:59:03,600
So our result is going to be equal to all zeros at the start.

1272
00:59:03,700 --> 00:59:08,500
And then what we will do is we will say that our chunk X right?

1273
00:59:08,500 --> 00:59:08,700
Is

1274
00:59:08,900 --> 00:59:14,800
I'm to be equal to sort of, we have a definition up here for probably,

1275
00:59:14,800 --> 00:59:15,300
how many?

1276
00:59:15,300 --> 00:59:20,400
How many chunks, how many tiles per chunk, if you will.

1277
00:59:20,700 --> 00:59:21,200
Right?

1278
00:59:21,200 --> 00:59:23,100
We've got, we've got this number here.

1279
00:59:23,100 --> 00:59:27,000
So I think we want to do is, do tiles per chunk, something like that,

1280
00:59:27,100 --> 00:59:28,900
and we'll save it, that 16.

1281
00:59:28,900 --> 00:59:33,300
So tiles per chunk equals 16, right?

1282
00:59:34,200 --> 00:59:35,800
And we'll just leave that up here for now.

1283
00:59:36,000 --> 00:59:38,700
That could be parametrized later if we wanted to, because we

1284
00:59:38,800 --> 00:59:40,300
Don't really use it in a lot of places.

1285
00:59:40,600 --> 00:59:41,200
It's optically.

1286
00:59:41,200 --> 00:59:42,000
Interesting function.

1287
00:59:43,000 --> 00:59:44,600
So we got our ABS tie, Lex.

1288
00:59:46,100 --> 00:59:52,200
And our ABS Telex is going to tell us where we were and and these were

1289
00:59:52,300 --> 00:59:55,300
are going to are sort of signed now, right as well.

1290
00:59:55,900 --> 00:59:56,900
If I remember correctly.

1291
00:59:57,100 --> 00:59:59,500
I know why they were still unsigned in there, right?

1292
00:59:59,500 --> 00:59:59,800
Because

1293
01:00:00,000 --> 01:00:04,500
Sort of saying that our tiles now could go could roam positive and

1294
01:00:04,500 --> 01:00:05,100
negative right.

1295
01:00:05,100 --> 01:00:07,000
There were starting at zero and that sort of stuff.

1296
01:00:07,900 --> 01:00:10,300
But yeah, a lot of this code is still Legacy from when we were first

1297
01:00:10,300 --> 01:00:11,500
doing our initial testing.

1298
01:00:12,200 --> 01:00:16,000
So what I want to do here is I want to just basically say, all right,

1299
01:00:16,000 --> 01:00:17,600
whatever you passed me in.

1300
01:00:17,900 --> 01:00:20,800
I need to figure out what Chunk we would have been on, right?

1301
01:00:20,800 --> 01:00:25,600
And so, if the first chunk is at 0 0, then if that was the center, I

1302
01:00:25,600 --> 01:00:28,300
don't know exactly where we want Center, but let's say that our chunks

1303
01:00:28,300 --> 01:00:29,800
are centered at 0.

1304
01:00:30,000 --> 01:00:33,300
0 0, that seems reasonable to me relative to tiles.

1305
01:00:33,900 --> 01:00:39,200
Then what we want to do is we want to basically every time you go nine

1306
01:00:39,200 --> 01:00:40,000
tiles, right?

1307
01:00:40,000 --> 01:00:43,200
You're going to move when you when you move away from zero, a certain

1308
01:00:43,200 --> 01:00:44,500
number of tiles, you're going to get.

1309
01:00:46,300 --> 01:00:47,300
Into the next chunk.

1310
01:00:47,900 --> 01:00:51,100
So, what I want to do is I want to divide this by tiles for chunk,

1311
01:00:51,300 --> 01:00:55,100
that tells me how many tiles I would have to go in that direction, but

1312
01:01:02,000 --> 01:01:04,500
It depends, like I said on how I want to Center the world, I guess I

1313
01:01:04,500 --> 01:01:07,100
could center it so that the bottom left corner of a chunk.

1314
01:01:07,300 --> 01:01:07,600
Yeah.

1315
01:01:07,600 --> 01:01:08,700
All right, we'll just do it this way.

1316
01:01:09,000 --> 01:01:11,000
So, that's how many away we are.

1317
01:01:11,000 --> 01:01:13,400
So, basically, it's this, right.

1318
01:01:14,800 --> 01:01:17,500
That's, that's it to figure out what chunk we're in.

1319
01:01:17,700 --> 01:01:20,300
And then we have to do is figure out where we are relative to the

1320
01:01:20,300 --> 01:01:20,700
chunk.

1321
01:01:20,900 --> 01:01:21,400
Right?

1322
01:01:21,700 --> 01:01:25,000
And so in order to find out where we are relative, the Chunk, we just

1323
01:01:25,000 --> 01:01:29,300
need to then take so that the offset and right now we're not handling

1324
01:01:29,300 --> 01:01:30,300
the Z properly.

1325
01:01:30,600 --> 01:01:36,700
So this is again move to 3 DZ which we kind of need to do some point

1326
01:01:36,700 --> 01:01:38,000
because we don't really have the way to.

1327
01:01:38,100 --> 01:01:40,900
We don't have a way to capture an offset in Z yet.

1328
01:01:40,900 --> 01:01:43,100
Still so right?

1329
01:01:43,100 --> 01:01:43,800
So if we have

1330
01:01:44,700 --> 01:01:48,100
if we have these guys, then essentially we know that the the

1331
01:01:49,900 --> 01:01:55,700
AB style X, right, whatever, that number came out to be and it could

1332
01:01:55,700 --> 01:01:56,500
be negative.

1333
01:01:56,500 --> 01:01:56,900
Right?

1334
01:01:56,900 --> 01:01:58,400
It could definitely be negative.

1335
01:01:58,700 --> 01:02:06,100
We know that, whatever the ABS tile X was - the result, whatever.

1336
01:02:06,100 --> 01:02:08,400
The result of the Divide was times the tiles per chunk.

1337
01:02:08,600 --> 01:02:10,200
This is how many were left over?

1338
01:02:10,200 --> 01:02:10,800
How many tiles?

1339
01:02:10,800 --> 01:02:12,800
We did not account for, right?

1340
01:02:14,000 --> 01:02:14,300
Whoa.

1341
01:02:16,100 --> 01:02:20,800
Okay, my keyboard has stopped allowing me to go upward.

1342
01:02:21,900 --> 01:02:23,500
I'm not even joking right now.

1343
01:02:23,900 --> 01:02:26,200
I cannot move the keyboard upward.

1344
01:02:28,200 --> 01:02:29,500
Why is that happening?

1345
01:02:30,400 --> 01:02:33,700
Like, literally the up key has gone away.

1346
01:02:36,800 --> 01:02:38,000
That would make it harder.

1347
01:02:38,100 --> 01:02:40,000
Well, not that much harder.

1348
01:02:40,300 --> 01:02:43,700
So anyway, if I want to do, I can always just do it.

1349
01:02:43,700 --> 01:02:44,200
My home.

1350
01:02:44,200 --> 01:02:44,900
What did I do?

1351
01:02:44,900 --> 01:02:48,300
Did I hit some kind of a control state of the keyboard?

1352
01:02:49,100 --> 01:02:52,400
Hold on, hold, please do not know what just happened.

1353
01:02:53,700 --> 01:02:54,100
I don't know that.

1354
01:02:54,100 --> 01:02:55,400
I want to know what just happened.

1355
01:02:56,300 --> 01:02:57,300
Let me plug it.

1356
01:02:57,500 --> 01:02:59,000
Unplug it, and plug it back in again.

1357
01:03:01,000 --> 01:03:01,400
All right.

1358
01:03:01,400 --> 01:03:02,000
Well, it's back.

1359
01:03:02,100 --> 01:03:02,800
That's always good.

1360
01:03:03,300 --> 01:03:06,200
All right, so just finishing up the offset here is just going to be

1361
01:03:06,200 --> 01:03:09,700
however many tiles there were times that I'll sided M, right.

1362
01:03:12,000 --> 01:03:14,500
And I think that'll give me the offset X & Y.

1363
01:03:14,800 --> 01:03:15,300
Right?

1364
01:03:15,500 --> 01:03:17,400
I'm pretty sure that's all we really need there.

1365
01:03:17,900 --> 01:03:23,700
So that way, we have sort of that tile difference like, so,

1366
01:03:25,300 --> 01:03:28,600
And then we just do the Y.

1367
01:03:29,300 --> 01:03:31,400
And again, we're waiting right there.

1368
01:03:31,400 --> 01:03:35,200
We want to we want to be able to compute the Z offset as well, but we

1369
01:03:35,500 --> 01:03:36,800
don't have that option for moment.

1370
01:03:36,800 --> 01:03:40,300
Unfortunately, so I think that's it for that.

1371
01:03:40,300 --> 01:03:42,800
And we are probably horribly broken right now, but I will go to the

1372
01:03:42,800 --> 01:03:47,800
Q&A anyway because yeah, assuming this won't, this won't run at all

1373
01:03:47,900 --> 01:03:49,400
and it doesn't as you can see.

1374
01:03:50,000 --> 01:03:51,000
So that's where we're going to leave.

1375
01:03:51,000 --> 01:03:52,500
Our poor little hero for today.

1376
01:03:52,500 --> 01:03:54,900
But just because you know, what you going to do.

1377
01:03:55,500 --> 01:03:56,900
You can't can't.

1378
01:03:59,300 --> 01:04:02,300
You sometimes you have to let the hero to sit for a little while.

1379
01:04:02,300 --> 01:04:05,300
He has to kind of think about a situation and then, you know, you come

1380
01:04:05,300 --> 01:04:06,800
back to it later and we're good to go.

1381
01:04:07,100 --> 01:04:10,600
It's alright, so we've done that and we'll leave everything for

1382
01:04:10,600 --> 01:04:13,200
tomorrow, which is probably one will just finish this up.

1383
01:04:13,200 --> 01:04:14,000
So it seems pretty good.

1384
01:04:14,500 --> 01:04:19,000
We will go to the Q&A now, so please prefix your questions with q: and

1385
01:04:19,000 --> 01:04:22,400
so that I can see them and please keep in the stuff that we've done on

1386
01:04:22,400 --> 01:04:23,800
today streamer on previous streams.

1387
01:04:23,800 --> 01:04:26,400
If you want to talk about other stuff like how to get in the game

1388
01:04:26,400 --> 01:04:29,300
industry or what software to use for doing something or

1389
01:04:29,300 --> 01:04:31,300
You just want to talk about random stuff.

1390
01:04:32,100 --> 01:04:34,900
Come we do do those kind of questions, but we do them before the

1391
01:04:34,900 --> 01:04:35,200
stream.

1392
01:04:35,400 --> 01:04:38,800
So please come about 15 minutes before a scheduled start time.

1393
01:04:38,800 --> 01:04:43,100
If you want to chat about stuff, we often do and it's a lot of fun.

1394
01:04:43,100 --> 01:04:44,600
So, so come for that for sure.

1395
01:04:44,700 --> 01:04:47,800
But for right now, let's just do just a questions on what we've, what

1396
01:04:47,800 --> 01:04:51,200
we've been working on for the past past days.

1397
01:05:13,400 --> 01:05:15,800
I don't think I can actually trigger the cue and I can, I

1398
01:05:22,700 --> 01:05:24,800
I'm not whitelisted on the butt.

1399
01:05:26,200 --> 01:05:27,000
So sad.

1400
01:05:30,100 --> 01:05:31,400
All right, let's go.

1401
01:05:31,500 --> 01:05:32,500
Let's see here.

1402
01:05:33,300 --> 01:05:36,400
Let's see what we're doing on cue, a any questions.

1403
01:05:39,600 --> 01:05:43,200
Can you please go over the lasagna code again that goes through the

1404
01:05:43,200 --> 01:05:45,800
linked list and moves around the entities?

1405
01:05:47,000 --> 01:05:48,400
Yes, I can.

1406
01:05:50,600 --> 01:05:52,600
And can you remove the note and reconnoiter about Tyrell?

1407
01:05:52,600 --> 01:05:53,300
Topology?

1408
01:05:53,600 --> 01:05:54,900
Yes, that's good point.

1409
01:05:55,600 --> 01:05:58,000
We don't want to do that anymore.

1410
01:06:12,100 --> 01:06:17,000
So what we could do there too is we could try to compute what that

1411
01:06:17,000 --> 01:06:17,300
safe.

1412
01:06:17,300 --> 01:06:18,800
Margin was.

1413
01:06:19,400 --> 01:06:20,100
I don't know.

1414
01:06:20,100 --> 01:06:23,000
I mean, maybe we want to try and get a little harder core on that in

1415
01:06:23,000 --> 01:06:23,800
the future.

1416
01:06:24,800 --> 01:06:25,200
Let's see.

1417
01:06:25,200 --> 01:06:26,600
Read canonicalize cord.

1418
01:06:29,900 --> 01:06:38,100
So maybe assert that we are nowhere near the edges of the world may

1419
01:06:38,100 --> 01:06:38,400
be.

1420
01:06:39,200 --> 01:06:41,900
Okay, so you want to go around the

1421
01:06:45,700 --> 01:06:46,900
Oh, My Stream is out.

1422
01:06:46,900 --> 01:06:48,600
Someone was saying my stream was out.

1423
01:06:48,600 --> 01:06:51,100
That sounds bad so it actually true.

1424
01:06:52,200 --> 01:06:57,100
Uh that looks like my service providers fault as well.

1425
01:06:57,400 --> 01:07:00,500
I will have to so I have gone through the process of trying to get a

1426
01:07:00,500 --> 01:07:01,600
new internet service provider.

1427
01:07:01,600 --> 01:07:04,500
So we'll see if I can get to that point at some point.

1428
01:07:04,700 --> 01:07:06,100
I don't know if we'll be able to or not.

1429
01:07:07,500 --> 01:07:11,600
The hope is that we'll be able to but looks like not looks like we're

1430
01:07:11,600 --> 01:07:12,400
in bad shape.

1431
01:07:12,400 --> 01:07:13,300
All right, so

1432
01:07:15,400 --> 01:07:16,600
I'll go through the code again.

1433
01:07:17,800 --> 01:07:18,600
Let's take a look.

1434
01:07:20,300 --> 01:07:24,900
So, change entity location, basically does all the work in our entire

1435
01:07:25,400 --> 01:07:26,900
for everything that we need to do.

1436
01:07:29,600 --> 01:07:29,900
I like that.

1437
01:07:29,900 --> 01:07:31,600
Was someone call it lasagna code.

1438
01:07:31,700 --> 01:07:32,600
I'm not sure what that means.

1439
01:07:32,600 --> 01:07:35,200
Is that mean that it has multiple layers, I guess.

1440
01:07:35,700 --> 01:07:36,500
Not entirely sure.

1441
01:07:37,900 --> 01:07:39,500
So changing a location.

1442
01:07:40,500 --> 01:07:42,000
We haven't had a chance to actually test yet.

1443
01:07:42,000 --> 01:07:43,300
We don't know if it's actually working.

1444
01:07:43,600 --> 01:07:44,600
We just wrote it today.

1445
01:07:44,900 --> 01:07:49,600
But what it does is it takes an entity which is this low energy Index

1446
01:07:49,600 --> 01:07:52,300
right here and it goes ahead and says, all right.

1447
01:07:52,300 --> 01:07:56,800
We've got a world position where it was and a world position where it

1448
01:07:56,800 --> 01:07:59,200
is going to be and we would like to

1449
01:07:59,400 --> 01:08:03,700
Move it between those two in inside the, these World chunks.

1450
01:08:04,300 --> 01:08:06,900
So, the first thing it does is it says, okay.

1451
01:08:08,300 --> 01:08:08,900
If?

1452
01:08:10,800 --> 01:08:15,300
The old and the new are the same chunk, then we don't have to do

1453
01:08:15,300 --> 01:08:18,600
anything because obviously you don't need to move something into a

1454
01:08:18,600 --> 01:08:20,000
chunk if it's already in that chunk.

1455
01:08:20,200 --> 01:08:21,700
So we check that first.

1456
01:08:21,700 --> 01:08:23,899
And if that's true, we just skip the whole operation.

1457
01:08:25,100 --> 01:08:28,800
Next, we check to see whether old P exist at all because of old pee

1458
01:08:28,800 --> 01:08:29,399
doesn't exist.

1459
01:08:29,399 --> 01:08:31,800
Then we're strictly inserting because it means that the enemy was

1460
01:08:31,800 --> 01:08:34,100
never in the spatial partition.

1461
01:08:34,399 --> 01:08:37,399
So it was never in the world at all, and we're adding it for the first

1462
01:08:37,399 --> 01:08:37,600
time.

1463
01:08:37,700 --> 01:08:41,899
But if it was previously in the world, then we go ahead and say, all

1464
01:08:41,899 --> 01:08:46,300
right, let's pull out the chunk that it is in and that's about our

1465
01:08:46,300 --> 01:08:49,100
hash table again will give us the chunk back that it should be.

1466
01:08:50,100 --> 01:08:53,600
We assert that there is in fact, a chunk there because remember the

1467
01:08:53,600 --> 01:08:56,700
hash table might not be filled at that point, and if it wasn't filled,

1468
01:08:56,700 --> 01:08:57,399
then we've got an error.

1469
01:08:57,399 --> 01:08:59,800
Because someone's telling us that it was previously.

1470
01:09:00,000 --> 01:09:04,200
In our world, but we are finding that it is not there and we should

1471
01:09:04,300 --> 01:09:06,600
alert immediately on that, which is why I put the assertion there.

1472
01:09:07,100 --> 01:09:09,399
So assuming we got the chunk back, which we always should

1473
01:09:10,500 --> 01:09:11,600
and the case of an old pee.

1474
01:09:12,899 --> 01:09:17,500
Then we go ahead and say, all right, grab the first block inside that

1475
01:09:17,500 --> 01:09:20,500
hash junk, that stores, which entities are in the block.

1476
01:09:21,000 --> 01:09:22,600
We loop from there.

1477
01:09:23,300 --> 01:09:25,800
In fact, I guess I could simplify this here because we already pulled

1478
01:09:25,800 --> 01:09:26,500
it out.

1479
01:09:26,899 --> 01:09:30,700
We loop from there over every block in the chain of blocks inside that

1480
01:09:30,700 --> 01:09:32,300
chunk, right?

1481
01:09:33,300 --> 01:09:34,500
For each one of them.

1482
01:09:34,500 --> 01:09:37,399
We look through we start at the zeroth, entity.

1483
01:09:37,700 --> 01:09:41,500
We look through all the entities that that block has in it at the time

1484
01:09:41,800 --> 01:09:42,399
and we see

1485
01:09:42,500 --> 01:09:46,200
whether our entity that we're looking for resides there in,

1486
01:09:47,300 --> 01:09:50,399
If it does reside there in then it is that is where we remove.

1487
01:09:50,399 --> 01:09:51,700
It will remove it from.

1488
01:09:52,300 --> 01:09:55,600
And if we are going to remove it, then we will set our block pointer

1489
01:09:55,600 --> 01:09:59,800
to 0 so that this Loop will exit and we break so that this Loop will

1490
01:09:59,800 --> 01:10:00,100
exit.

1491
01:10:00,100 --> 01:10:02,800
So we want to get out of all the loops, right?

1492
01:10:04,500 --> 01:10:10,200
So to remove it, what we do is we say, okay, we need to move, we want

1493
01:10:10,300 --> 01:10:12,800
the the first block.

1494
01:10:12,800 --> 01:10:14,500
So this block right?

1495
01:10:14,700 --> 01:10:17,700
We want the first block to always have all the empty space in it.

1496
01:10:18,100 --> 01:10:22,200
So if we're removing something from us, what we want to do is grab

1497
01:10:22,200 --> 01:10:27,600
whatever entity is available on that on that first block, right.

1498
01:10:27,800 --> 01:10:29,800
And we want to put it into us here.

1499
01:10:30,600 --> 01:10:34,200
So since we know the reason that this works or at least I'm assuming

1500
01:10:34,300 --> 01:10:36,100
Works because we haven't actually tested it.

1501
01:10:37,100 --> 01:10:39,800
Since we know that the first block always contains all the empty

1502
01:10:39,800 --> 01:10:40,200
space.

1503
01:10:40,200 --> 01:10:45,900
It means that if we are a non full block we must be the first block.

1504
01:10:46,600 --> 01:10:51,100
So either this is the first block operating with itself or it is the

1505
01:10:51,200 --> 01:10:55,600
the first block operating with some future block and that future

1506
01:10:55,600 --> 01:10:56,100
block.

1507
01:10:56,700 --> 01:11:00,200
And the first block does have something in it, right?

1508
01:11:00,200 --> 01:11:03,600
Because if the first block didn't have something in it, then it

1509
01:11:03,600 --> 01:11:04,100
wouldn't exist.

1510
01:11:04,300 --> 01:11:07,900
Anymore, it would be the some subsequent block if that makes any

1511
01:11:07,900 --> 01:11:09,400
sense, but point being.

1512
01:11:09,800 --> 01:11:14,900
So what we do is we say the index that we found, we want to replace

1513
01:11:14,900 --> 01:11:16,500
because we're removing the entity that was there.

1514
01:11:16,700 --> 01:11:22,300
So overwrite that entity with the entity from whatever the first block

1515
01:11:22,400 --> 01:11:26,600
had at its last element and its last index and we can even assert here

1516
01:11:26,900 --> 01:11:29,700
because we know that this has to be true and so we should just

1517
01:11:29,700 --> 01:11:30,900
double-check that.

1518
01:11:30,900 --> 01:11:34,000
The first block enemy count is greater than zero, right?

1519
01:11:36,000 --> 01:11:39,400
Because if it was Zero, it should have gotten, which should have

1520
01:11:39,400 --> 01:11:40,900
pulled in from its next block.

1521
01:11:42,000 --> 01:11:46,900
So, yeah, so if the first plug-in any count equals 0 at that point,

1522
01:11:46,900 --> 01:11:49,300
that means we removed in this operation.

1523
01:11:49,400 --> 01:11:51,300
The last entity that was in that block.

1524
01:11:51,300 --> 01:11:54,800
And so now we want to do is say if there were any more blocks at all.

1525
01:11:55,400 --> 01:11:58,700
We should get rid of that first block now, so overwrite, the vet, the,

1526
01:11:58,700 --> 01:11:59,200
the

1527
01:12:00,100 --> 01:12:03,200
Overwrite, what is in that first block, right?

1528
01:12:03,700 --> 01:12:04,500
This is what this line does.

1529
01:12:04,600 --> 01:12:08,000
Overwrite the memory of the first block with whatever was in that next

1530
01:12:08,000 --> 01:12:08,300
block.

1531
01:12:09,500 --> 01:12:12,900
We then set the next block itself to point to whatever was on our free

1532
01:12:12,900 --> 01:12:13,500
list.

1533
01:12:14,100 --> 01:12:15,300
So save, what was there?

1534
01:12:16,200 --> 01:12:18,300
And we make the free lists first free Block.

1535
01:12:18,300 --> 01:12:20,200
Be us, right?

1536
01:12:21,200 --> 01:12:21,700
Like so

1537
01:12:25,200 --> 01:12:26,300
Because we are now free.

1538
01:12:27,400 --> 01:12:28,700
All our data was copied in here.

1539
01:12:28,700 --> 01:12:29,000
We don't need.

1540
01:12:29,000 --> 01:12:29,800
We're not you anymore.

1541
01:12:30,300 --> 01:12:31,000
That's it.

1542
01:12:31,400 --> 01:12:32,500
That's the entirety of that.

1543
01:12:33,500 --> 01:12:36,100
Inserting The Entity into a new entity block.

1544
01:12:37,800 --> 01:12:39,400
Is a similar procedure.

1545
01:12:39,400 --> 01:12:40,600
We got to get that chunk.

1546
01:12:40,600 --> 01:12:42,900
It's simpler though, because we're always inserting into the first

1547
01:12:42,900 --> 01:12:45,900
block, gotta get a chunk that we should be in.

1548
01:12:45,900 --> 01:12:49,300
And again, we passed the arena here because we and we could assert

1549
01:12:49,300 --> 01:12:49,800
this as well.

1550
01:12:49,800 --> 01:12:52,100
But I mean, we're passing the arena, so we know it'll just allocate

1551
01:12:52,100 --> 01:12:52,500
right.

1552
01:12:53,800 --> 01:12:57,700
Basically, what we're going to do is we're going to make sure that we

1553
01:12:57,700 --> 01:12:58,500
get back a chunk.

1554
01:12:58,500 --> 01:12:59,500
So we will allocate one.

1555
01:12:59,500 --> 01:13:01,800
Even if there wasn't a chunk of that location yet because maybe the

1556
01:13:01,800 --> 01:13:04,400
first entity that's stored to that section of the world.

1557
01:13:05,000 --> 01:13:06,900
We assert that we got one, then me.

1558
01:13:07,200 --> 01:13:09,500
Alright, Loop over.

1559
01:13:10,500 --> 01:13:10,800
I'm sorry.

1560
01:13:10,800 --> 01:13:12,800
Not Loop over grab that first block.

1561
01:13:14,100 --> 01:13:18,500
And check to make sure that the edit account has room in it.

1562
01:13:18,900 --> 01:13:22,000
So this will trigger if the entity does not have room in it.

1563
01:13:22,000 --> 01:13:25,400
There's no room left and I'm sorry if the block is not have any entity

1564
01:13:25,900 --> 01:13:28,400
any room to store any Manatee, it will trigger.

1565
01:13:29,000 --> 01:13:30,400
So what it will do is say, okay.

1566
01:13:30,700 --> 01:13:31,700
We need a new block.

1567
01:13:32,300 --> 01:13:35,600
Let's find a new block on the free list.

1568
01:13:35,800 --> 01:13:38,000
So it'll go ahead and grab that, right.

1569
01:13:39,700 --> 01:13:40,200
You here?

1570
01:13:49,000 --> 01:13:50,700
Okay, so it'll grab one off the free list.

1571
01:13:51,100 --> 01:13:53,100
But remember the free list might not have anything on it.

1572
01:13:53,100 --> 01:13:54,800
We may never have freed any blocks.

1573
01:13:54,800 --> 01:13:57,300
We may have only used blocks up and then they have been freed.

1574
01:13:57,600 --> 01:14:00,200
So we check to see whether there was anything on the free list.

1575
01:14:00,300 --> 01:14:03,500
If there was something on the free list and we say, okay, good news

1576
01:14:03,600 --> 01:14:05,200
will advance the free list pointer to whatever.

1577
01:14:05,200 --> 01:14:08,200
The next free Block is, which is our next pointer.

1578
01:14:08,900 --> 01:14:10,300
Otherwise, that's not true.

1579
01:14:10,800 --> 01:14:15,300
We will go ahead and make an entirely new block by asking the arena to

1580
01:14:15,300 --> 01:14:18,200
give us the next available slot in memory to store it.

1581
01:14:19,100 --> 01:14:22,700
We'll then go ahead and say, all right, the old block is going to be

1582
01:14:22,700 --> 01:14:26,100
equal to this new block, right?

1583
01:14:27,300 --> 01:14:31,100
So the old block is the space that we've prepared to store the block

1584
01:14:31,100 --> 01:14:33,600
we were on and this is the block we're on.

1585
01:14:33,700 --> 01:14:35,200
So we basically copy over.

1586
01:14:35,200 --> 01:14:37,300
We overwrite the memory.

1587
01:14:37,300 --> 01:14:38,200
We just allocated.

1588
01:14:38,200 --> 01:14:39,900
We stop it with the value.

1589
01:14:40,200 --> 01:14:41,300
We then say all right.

1590
01:14:41,300 --> 01:14:44,200
Now that we've copied those contents into the next thing in the daisy

1591
01:14:44,200 --> 01:14:48,700
chain, we'd go ahead and say the next pointer points to that that

1592
01:14:48,700 --> 01:14:49,900
that's that place.

1593
01:14:49,900 --> 01:14:53,800
We just did the storage and then reset our entity pointer to be 0.

1594
01:14:54,100 --> 01:14:56,600
So we're constantly just basic pushing things out onto the daisy

1595
01:14:56,600 --> 01:14:56,900
chain.

1596
01:14:57,600 --> 01:14:59,300
At the end of the day, we should

1597
01:15:00,000 --> 01:15:02,000
Italy through all of this code here.

1598
01:15:02,400 --> 01:15:06,800
We should have always come up with space to store our new entity.

1599
01:15:07,300 --> 01:15:09,600
And so that is exactly what we do.

1600
01:15:20,800 --> 01:15:21,900
Let's see.

1601
01:15:23,000 --> 01:15:24,000
Are you dropping frames?

1602
01:15:24,000 --> 01:15:24,700
Things are glitchy.

1603
01:15:24,700 --> 01:15:33,400
Yes, apparently, according to, according to this, the dropped frames,

1604
01:15:34,500 --> 01:15:35,300
often times.

1605
01:15:35,300 --> 01:15:38,500
There will be zero percent and we are at 17.

1606
01:15:38,800 --> 01:15:40,500
So it is not great.

1607
01:15:41,300 --> 01:15:41,800
Again.

1608
01:15:42,000 --> 01:15:43,100
Gotta get a new SP.

1609
01:15:43,100 --> 01:15:44,000
Not much I can do about it.

1610
01:15:44,000 --> 01:15:44,500
Unfortunately.

1611
01:15:44,500 --> 01:15:45,100
I've been trying.

1612
01:15:51,500 --> 01:15:53,300
Do I use Bink for videos?

1613
01:15:53,400 --> 01:15:55,400
I've never shipped something that plays videos.

1614
01:15:55,900 --> 01:16:00,500
So no, I have never but I haven't used anything else or videos either.

1615
01:16:18,300 --> 01:16:20,800
For someone who does a lot of coding, nothing seems to be going your

1616
01:16:20,800 --> 01:16:21,400
way today.

1617
01:16:21,900 --> 01:16:22,600
I wouldn't say that.

1618
01:16:22,600 --> 01:16:25,400
I thought everything went pretty well including the stream Integrity.

1619
01:16:25,400 --> 01:16:26,500
Well, yet streaming technique.

1620
01:16:26,500 --> 01:16:28,800
Can you elaborate on what you will do to avoid this in the future?

1621
01:16:29,000 --> 01:16:29,500
Nothing.

1622
01:16:29,600 --> 01:16:30,500
There's nothing I can do.

1623
01:16:31,200 --> 01:16:32,400
The stream is what it is.

1624
01:16:34,000 --> 01:16:35,300
What is your opinion on things?

1625
01:16:35,300 --> 01:16:37,900
Like, bunnyhopping or other movement mechanics, that are bugs in the

1626
01:16:37,900 --> 01:16:39,800
code, but contribute to gameplay.

1627
01:16:40,100 --> 01:16:43,100
For example, if there was a technique for gaining speed in your game,

1628
01:16:43,100 --> 01:16:44,200
albeit difficult.

1629
01:16:44,200 --> 01:16:45,200
Would you keep it?

1630
01:16:46,400 --> 01:16:48,900
That's really a design question, and I'm not a game designer.

1631
01:16:49,300 --> 01:16:52,100
So I don't really have an opinion on that.

1632
01:16:53,400 --> 01:16:57,200
I really liked ski jumping and in tribes and starseeds tribes.

1633
01:16:57,900 --> 01:17:00,100
So I suspect if there was something fun like that.

1634
01:17:00,100 --> 01:17:01,100
I probably would keep it.

1635
01:17:01,100 --> 01:17:03,100
But like I said, not really a game designer so you shouldn't take

1636
01:17:03,200 --> 01:17:04,800
My advice on that.

1637
01:17:14,100 --> 01:17:17,000
What do you think about namespacing functions like entity underscore?

1638
01:17:17,000 --> 01:17:20,100
Get location instead of get entity location?

1639
01:17:23,200 --> 01:17:29,100
I don't I tend to like things to read as close to English as possible.

1640
01:17:29,800 --> 01:17:33,600
So I would probably not prefer entity under sword get location unless

1641
01:17:33,600 --> 01:17:37,100
I was trying to do it in some kind of Library style that was important

1642
01:17:37,100 --> 01:17:38,000
for people.

1643
01:17:38,200 --> 01:17:38,700
External.

1644
01:17:38,700 --> 01:17:40,000
Like I probably wouldn't do that.

1645
01:17:40,000 --> 01:17:43,200
But but I wouldn't be against it necessarily.

1646
01:17:44,800 --> 01:17:46,300
But I thought so nice to Purdue.

1647
01:17:51,000 --> 01:17:51,800
About push truck.

1648
01:17:51,800 --> 01:17:52,300
Isn't it?

1649
01:17:52,300 --> 01:17:52,600
True?

1650
01:17:52,600 --> 01:17:55,000
That it can actually fail if you're out of P allocated memory.

1651
01:17:55,100 --> 01:17:57,400
So when you still have to check, if your custom block allocation

1652
01:17:57,400 --> 01:17:58,700
fails, if your world gets too big.

1653
01:17:58,900 --> 01:17:59,400
No.

1654
01:17:59,400 --> 01:17:59,800
Well.

1655
01:18:00,000 --> 01:18:04,700
I mean, yes, obviously, but we will actually take steps to ensure that

1656
01:18:04,700 --> 01:18:06,000
we don't do that.

1657
01:18:06,000 --> 01:18:06,700
If that makes sense.

1658
01:18:07,700 --> 01:18:11,500
We will put bounds on our world generation so that we know that we

1659
01:18:11,500 --> 01:18:17,200
always allocate the amount that we need or we can also in the future

1660
01:18:17,200 --> 01:18:19,200
do a thing where the push struct.

1661
01:18:19,200 --> 01:18:21,200
If like pre allocating memory.

1662
01:18:23,200 --> 01:18:27,400
We can also loosen that because if we want to, we could do a thing

1663
01:18:27,400 --> 01:18:29,600
where we allow World allocation only,

1664
01:18:30,000 --> 01:18:33,800
During World Generation for example, and then if it fails, we just

1665
01:18:33,800 --> 01:18:37,800
vaporize that block and so the program won't have anybody Behavior as

1666
01:18:37,800 --> 01:18:38,600
a result of it.

1667
01:18:39,300 --> 01:18:41,200
So I'm actually okay with that as well.

1668
01:18:41,200 --> 01:18:45,000
And nothing that we've done so far jeopardizes that that's all still

1669
01:18:45,000 --> 01:18:48,100
very easy to do and clean with the way that we're doing things.

1670
01:18:48,100 --> 01:18:51,000
So we'll, we'll talk about those certain things a little bit later,

1671
01:18:51,600 --> 01:18:55,100
but no, we're never going to allow in practice.

1672
01:18:55,300 --> 01:18:56,600
We're never going to allow.

1673
01:18:58,100 --> 01:18:59,200
Those pushes to fail.

1674
01:19:04,700 --> 01:19:06,700
Why do you mean if chunk after a search chunk?

1675
01:19:07,100 --> 01:19:11,300
Because we don't know that our game will be 100% bug free, basically.

1676
01:19:11,700 --> 01:19:14,000
And so, I'd rather not crashed because it's possible that the game

1677
01:19:14,000 --> 01:19:14,400
would run.

1678
01:19:14,400 --> 01:19:17,700
Okay, even if someone made a mistake and thought that entity was

1679
01:19:17,700 --> 01:19:19,200
inserted somewhere and it wasn't

1680
01:19:20,000 --> 01:19:22,200
So, I decided to be extra careful.

1681
01:19:26,800 --> 01:19:28,800
Can you please explain when you comment your code?

1682
01:19:28,800 --> 01:19:31,500
What's the logic of having less comments on very big chunks of code?

1683
01:19:31,600 --> 01:19:32,100
Sure.

1684
01:19:32,300 --> 01:19:33,000
So comments.

1685
01:19:33,000 --> 01:19:39,100
I try to use almost never the only time I put in comments is when they

1686
01:19:39,100 --> 01:19:42,300
are strictly notational.

1687
01:19:42,300 --> 01:19:46,400
Meaning like the operation I'm doing now, like something like this

1688
01:19:46,800 --> 01:19:48,900
pull entity out of its old entity block.

1689
01:19:48,900 --> 01:19:51,900
So something that has nothing to do with how the operation is

1690
01:19:51,900 --> 01:19:52,300
occurring.

1691
01:19:52,300 --> 01:19:55,300
Just a vague notion of what's happening in that part of the code.

1692
01:19:55,400 --> 01:19:56,100
Because those are

1693
01:19:56,400 --> 01:19:57,700
Unlikely to be out of date.

1694
01:19:57,700 --> 01:19:59,400
Although they do still go out of date.

1695
01:20:00,000 --> 01:20:03,100
Any other thing I do is when I button down a piece of code, but I'm

1696
01:20:03,100 --> 01:20:05,300
like this is exactly how I want this to work and it'll probably stay

1697
01:20:05,300 --> 01:20:06,100
this way for a while.

1698
01:20:06,300 --> 01:20:09,300
I'll put in an informational comment that explains the rationale

1699
01:20:09,400 --> 01:20:11,000
behind how it was designed.

1700
01:20:11,200 --> 01:20:11,700
I'll do that.

1701
01:20:11,700 --> 01:20:15,500
Sometimes I try very hard, not to put any other comments in because I

1702
01:20:15,500 --> 01:20:19,200
find comments are almost always wrong because since the compiler

1703
01:20:19,200 --> 01:20:23,300
doesn't compile comments, you will often be making changes and re and

1704
01:20:23,300 --> 01:20:26,100
not realize you've invalidated something subtle said in the comment.

1705
01:20:26,200 --> 01:20:28,900
And then later someone comes and reads it and is now more confused and

1706
01:20:28,900 --> 01:20:30,200
if they're just hadn't been a comment.

1707
01:20:30,300 --> 01:20:35,100
So I try to make the code, read relatively cleanly as code, and and I

1708
01:20:35,100 --> 01:20:37,600
like people to be able to get it from that.

1709
01:20:38,600 --> 01:20:41,100
And honestly, also, if people can't understand the code from reading

1710
01:20:41,100 --> 01:20:43,600
it, maybe they shouldn't be editing it yet.

1711
01:20:43,600 --> 01:20:46,000
And I don't think they should think by reading a comment that they

1712
01:20:46,000 --> 01:20:46,900
will understand it.

1713
01:20:47,400 --> 01:20:50,300
So I tend to keep comments again to things that are going to be

1714
01:20:51,500 --> 01:20:55,600
either, just purely landmarking so they can tell what's going on each

1715
01:20:55,600 --> 01:20:56,100
piece of code.

1716
01:20:56,200 --> 01:20:59,800
Before they go and look at it or when I'm sure that it.

1717
01:21:00,000 --> 01:21:01,100
Because got stick around for a while.

1718
01:21:01,100 --> 01:21:04,000
Then I'll put in a comment that says, here's how this works.

1719
01:21:04,700 --> 01:21:08,300
Just so I can refresh my mental state and why I did the code, the way

1720
01:21:08,300 --> 01:21:09,100
that I did it.

1721
01:21:10,200 --> 01:21:13,900
But putting code in that tries to explain how the code is working.

1722
01:21:14,800 --> 01:21:18,300
Like in a line-by-line, kind of ways is a really bad idea, and I would

1723
01:21:18,300 --> 01:21:19,700
strongly recommend against it.

1724
01:21:21,300 --> 01:21:23,200
I find it usually hurts more than it helps.

1725
01:21:38,300 --> 01:21:40,600
When you said the code today, wasn't that performance-critical.

1726
01:21:40,600 --> 01:21:44,600
I instantly thought about a machine gun Stone through our battle just

1727
01:21:44,600 --> 01:21:45,900
across a chunk Edge.

1728
01:21:46,100 --> 01:21:47,500
I still don't think that would be a big deal.

1729
01:21:47,500 --> 01:21:49,900
Like, I mean, this will handle hundreds of entities, just fine.

1730
01:21:50,600 --> 01:21:51,600
So I don't think it.

1731
01:21:51,600 --> 01:21:52,900
I don't think it'll be a problem.

1732
01:21:53,600 --> 01:21:54,100
We'll find out.

1733
01:21:54,100 --> 01:21:54,700
Certainly

1734
01:22:02,100 --> 01:22:03,000
Alrighty.

1735
01:22:07,600 --> 01:22:10,700
Looks like we are done with questions.

1736
01:22:15,500 --> 01:22:16,500
I think.

1737
01:22:17,700 --> 01:22:18,300
Yes.

1738
01:22:19,800 --> 01:22:22,600
All right, so we are done with the questions which is good because

1739
01:22:22,600 --> 01:22:24,000
it's right about time to end.

1740
01:22:25,200 --> 01:22:25,500
Again.

1741
01:22:25,500 --> 01:22:27,200
It looks like everything is pretty good.

1742
01:22:27,200 --> 01:22:28,700
I'm relatively happy where everything is.

1743
01:22:28,700 --> 01:22:31,500
We need a little bit of time to debug everything that we wrote today.

1744
01:22:32,100 --> 01:22:34,300
I usually would like to do that right back to back.

1745
01:22:34,300 --> 01:22:36,600
But again, try to keep it to an hour a day, always.

1746
01:22:37,200 --> 01:22:38,800
So we are not going to do that.

1747
01:22:39,200 --> 01:22:41,600
But we will do that tomorrow and then we will be done with spatial

1748
01:22:41,600 --> 01:22:45,300
partition, which should be good as well.

1749
01:22:48,000 --> 01:22:48,300
You know what?

1750
01:22:48,300 --> 01:22:49,100
I just realized.

1751
01:22:49,800 --> 01:22:52,000
I think we may not even have any bugs.

1752
01:22:52,600 --> 01:22:56,400
We may actually be working correctly because the only reason that we

1753
01:22:56,400 --> 01:23:00,500
didn't see things is maybe because we just haven't finished porting

1754
01:23:00,500 --> 01:23:04,300
this when we Port, this, we may be fine.

1755
01:23:04,300 --> 01:23:06,400
So it could be that we actually don't even have any bugs either.

1756
01:23:06,500 --> 01:23:06,800
I don't know.

1757
01:23:06,800 --> 01:23:10,600
We'll find out, wishful thinking, probably usually you've got some

1758
01:23:10,600 --> 01:23:11,000
bugs.

1759
01:23:11,200 --> 01:23:12,800
So everything I think went pretty well today.

1760
01:23:12,800 --> 01:23:14,300
I was pretty happy with how that went.

1761
01:23:14,400 --> 01:23:17,500
We need to do some testing and some debugging to get everything up to

1762
01:23:17,600 --> 01:23:19,300
Speed, but everything looks pretty good.

1763
01:23:19,400 --> 01:23:21,700
Well, everything went well today, except the apparently the fact that

1764
01:23:21,700 --> 01:23:24,900
my internet service provider is fantastic and can't actually serve a

1765
01:23:24,900 --> 01:23:25,300
stream.

1766
01:23:25,700 --> 01:23:29,400
But if my internet service provider was capable of actually streaming

1767
01:23:29,500 --> 01:23:31,900
stream, then we would be in good shape and everything would be fine.

1768
01:23:33,000 --> 01:23:34,900
So tomorrow, we'll go ahead and finish that up.

1769
01:23:35,200 --> 01:23:38,500
And then I think that will probably a good time to go ahead and start

1770
01:23:38,500 --> 01:23:40,300
adding more stuff to the world.

1771
01:23:40,500 --> 01:23:43,300
Maybe some different kinds of entities and that sort of thing.

1772
01:23:43,300 --> 01:23:45,600
So we can start to look at the World building process.

1773
01:23:46,800 --> 01:23:47,400
I think that's probably

1774
01:23:47,500 --> 01:23:48,500
Only The Next Step.

1775
01:23:48,500 --> 01:23:52,300
So that's what we'll do tomorrow after we finish up, making sure that

1776
01:23:52,300 --> 01:23:54,200
the system partition works properly.

1777
01:23:54,500 --> 01:23:57,000
We'll go ahead and we'll start adding some entity types of the world.

1778
01:23:57,400 --> 01:23:58,600
We'll see how that goes.

1779
01:23:58,700 --> 01:23:59,800
We'll see what we need to do.

1780
01:24:00,000 --> 01:24:03,100
We'll start doing some Collision handling logic, like, what happens

1781
01:24:03,100 --> 01:24:06,500
when two things hit, you know, hitpoints some stuff like that.

1782
01:24:06,500 --> 01:24:09,100
Just to get some of that stuff in there, which I think now is about

1783
01:24:09,100 --> 01:24:11,200
the time for, that's our stuff to happen.

1784
01:24:11,200 --> 01:24:13,900
So we can solidify that entity update procedure.

1785
01:24:14,500 --> 01:24:15,600
So thank you very much for joining me.

1786
01:24:15,600 --> 01:24:17,000
It's been a pleasure coding with you.

1787
01:24:17,000 --> 01:24:20,900
As always, I will be back here, eight pm six center time to do the

1788
01:24:20,900 --> 01:24:21,200
stuff.

1789
01:24:21,200 --> 01:24:25,800
I just said and I certainly hope everyone will join me.

1790
01:24:25,800 --> 01:24:28,600
If you would like to follow along yourself with the source code.

1791
01:24:28,700 --> 01:24:29,800
You can pre-order the game on.

1792
01:24:30,000 --> 01:24:32,400
Handmade here a.org and it comes a little source code.

1793
01:24:32,400 --> 01:24:36,600
You will get an email with with a link where you could download it and

1794
01:24:36,600 --> 01:24:38,500
also the test assets that we use on the string.

1795
01:24:39,800 --> 01:24:43,700
If you want support the video series, you can subscribe to our patreon

1796
01:24:43,700 --> 01:24:44,900
as well, which we have here.

1797
01:24:45,500 --> 01:24:48,400
And if you are trying to learn from the serious, you want to go to the

1798
01:24:48,400 --> 01:24:49,600
news and Forum site.

1799
01:24:49,600 --> 01:24:52,400
It's got a lot of good stuff on it, especially the episode guide which

1800
01:24:52,400 --> 01:24:56,200
has all the past episodes you can catch up on stuff and they have some

1801
01:24:56,200 --> 01:24:58,900
time coded things for various episodes as well, which makes it easier

1802
01:24:58,900 --> 01:25:00,100
to jump around to specific things.

1803
01:25:00,100 --> 01:25:01,100
I talked about.

1804
01:25:01,300 --> 01:25:03,600
There's also a coding resources page where people have ported.

1805
01:25:03,600 --> 01:25:07,600
The code base already to Mac and Linux and other stuff like that.

1806
01:25:07,600 --> 01:25:09,100
So you can go check that out if you're trying to run.

1807
01:25:09,200 --> 01:25:11,200
A different platform that Windows already.

1808
01:25:12,300 --> 01:25:13,900
And we also have a code discussion board.

1809
01:25:13,900 --> 01:25:17,600
So if you want to post stuff, if you have things, you want to talk

1810
01:25:17,600 --> 01:25:20,100
about questions, you want to ask.

1811
01:25:20,100 --> 01:25:21,200
That's a great place to do it.

1812
01:25:21,700 --> 01:25:23,200
So thank you, everyone for joining me.

1813
01:25:23,700 --> 01:25:28,100
I hope to see you back here tomorrow and, yeah, have a have an

1814
01:25:28,100 --> 01:25:31,300
excellent Wednesday, whether I do or not.

1815
01:25:31,400 --> 01:25:32,700
So take it easy, everybody.

