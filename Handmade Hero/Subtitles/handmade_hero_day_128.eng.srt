1
00:00:01,000 --> 00:00:01,700
There we go.

2
00:00:02,700 --> 00:00:05,000
Hello everyone and welcome to handmade hero.

3
00:00:05,000 --> 00:00:07,900
The show Rico to complete game live on Twitch.

4
00:00:08,500 --> 00:00:11,600
You know, we don't use any libraries or engines because that is just

5
00:00:11,600 --> 00:00:15,900
the way that we roll and we roll pretty strong here on him here.

6
00:00:15,900 --> 00:00:19,900
I don't mean to, I don't mean to brag or anything, but our render is

7
00:00:19,900 --> 00:00:22,700
pretty darn sweet which is actually kind of surprising.

8
00:00:22,700 --> 00:00:25,400
It's surprised everyone including me because I was not expecting it to

9
00:00:25,400 --> 00:00:30,200
be this fast without a lot more work and it turns out that computers

10
00:00:30,200 --> 00:00:30,200
are

11
00:00:30,400 --> 00:00:31,400
Very fast these days.

12
00:00:31,400 --> 00:00:35,200
If you actually just take some time to program them, you don't even

13
00:00:35,200 --> 00:00:37,200
have to be, that clever, as it turns out.

14
00:00:37,200 --> 00:00:40,300
Who knew we really haven't done anything.

15
00:00:40,300 --> 00:00:43,700
Super finesse oriented to our render, and it's already extremely fast.

16
00:00:43,700 --> 00:00:45,100
So I don't know what to think about that.

17
00:00:45,100 --> 00:00:48,100
I guess we're just very lucky and so that's a good thing.

18
00:00:48,300 --> 00:00:52,200
But that said we do have some work to do here because we're not out of

19
00:00:52,200 --> 00:00:52,600
the woods yet.

20
00:00:52,600 --> 00:00:57,500
In terms of rendering stuff, we might want to do today is day 128 and

21
00:00:57,500 --> 00:00:59,900
so if you want to follow along at home and you have pre-ordered the

22
00:00:59,900 --> 00:01:00,200
game on

23
00:01:00,400 --> 00:01:01,500
And made hero dot-org.

24
00:01:01,500 --> 00:01:05,700
You should unpack day 127 source code because that is what I'm

25
00:01:05,700 --> 00:01:06,300
starting with today.

26
00:01:06,300 --> 00:01:10,300
So, if you want to follow along with where I'm at, that is how you

27
00:01:10,300 --> 00:01:11,000
would do that.

28
00:01:12,200 --> 00:01:15,500
So, let's open things up here.

29
00:01:16,200 --> 00:01:20,200
We are back in our debug build compile, if I don't, if I'm not

30
00:01:20,200 --> 00:01:20,700
mistaken.

31
00:01:20,700 --> 00:01:24,300
So we are not compiling for performance anymore because things are

32
00:01:24,300 --> 00:01:24,900
pretty fast.

33
00:01:24,900 --> 00:01:27,300
Now that we did the multi-threading so we can actually run the game.

34
00:01:27,300 --> 00:01:30,100
It doesn't quite run as fast as we would like it to, but we can

35
00:01:30,100 --> 00:01:30,300
actually

36
00:01:30,400 --> 00:01:33,200
Run the game in a completely debug compile.

37
00:01:33,200 --> 00:01:36,200
It still runs at a totally reasonable frame rate, so that's pretty

38
00:01:36,200 --> 00:01:36,600
fun.

39
00:01:37,200 --> 00:01:38,100
So that's all good.

40
00:01:38,300 --> 00:01:41,100
So we've got some more stuff that we have to work out.

41
00:01:41,100 --> 00:01:49,000
I want to put in here some just a little bit in terms of notes before

42
00:01:49,000 --> 00:01:49,900
we go any further.

43
00:01:50,700 --> 00:01:54,000
Because inside the renderer, there's some stuff that we haven't done

44
00:01:54,500 --> 00:01:54,600
that.

45
00:01:54,600 --> 00:01:57,900
We might want to consider doing that could have some ramifications.

46
00:01:57,900 --> 00:02:00,100
So I just want to put some to dues in here.

47
00:02:00,600 --> 00:02:01,800
For things for us to think about.

48
00:02:01,800 --> 00:02:06,300
So to do Casey, and we don't have to do these anytime soon because

49
00:02:06,300 --> 00:02:09,100
we've already kind of put things in a situation where we're relatively

50
00:02:09,100 --> 00:02:13,000
well, isolated, and we could work on this all day long if we wanted

51
00:02:13,000 --> 00:02:16,100
to, and it wouldn't really affect the outside code, so that's like a

52
00:02:16,100 --> 00:02:16,800
good thing, right?

53
00:02:16,800 --> 00:02:18,400
That's that's where we want to be.

54
00:02:19,100 --> 00:02:25,200
So, here are some to dues one is, make sure that tiles.

55
00:02:26,000 --> 00:02:32,100
Are all cash aligned so like what we're doing right now?

56
00:02:32,100 --> 00:02:34,400
Oh, and this actually reminds me something I'll mention on the

57
00:02:34,400 --> 00:02:37,100
Blackboard because someone asked about it and I had no idea what the

58
00:02:37,100 --> 00:02:40,400
term was that they were using because I'd never heard it before.

59
00:02:40,400 --> 00:02:43,200
But I actually looked it up and I was like oh that thing.

60
00:02:43,200 --> 00:02:46,600
Okay so I can actually mention it here because it's relevant.

61
00:02:48,300 --> 00:02:51,500
So, in terms of what that means and with tiles, all being cash

62
00:02:51,500 --> 00:02:52,700
aligned, right?

63
00:02:53,500 --> 00:02:58,300
Is that if you want the tiles to be, if we if we break up the screen

64
00:02:58,300 --> 00:02:59,800
into tiles and our whole

65
00:03:00,000 --> 00:03:01,400
Purpose of this right?

66
00:03:01,500 --> 00:03:05,700
Is to try and make it so that we're rendering quickly, what we want to

67
00:03:05,700 --> 00:03:08,500
do is we want to make it that, you know, the whole reason of breaking

68
00:03:08,500 --> 00:03:11,600
it up into those tiles is to make sure that we can run them on

69
00:03:11,600 --> 00:03:12,500
separate threads.

70
00:03:12,600 --> 00:03:15,300
So we can have, you know, core zero takes this one and core one takes

71
00:03:15,300 --> 00:03:17,900
us one and, you know, whatever we want to do something like this.

72
00:03:18,600 --> 00:03:23,200
And what that means is that two tiles next to each other, you know, we

73
00:03:23,200 --> 00:03:27,000
want to be able to support that a very, very easily support that being

74
00:03:27,800 --> 00:03:29,800
in a situation where thread korzy

75
00:03:30,000 --> 00:03:30,900
Errol is writing to one.

76
00:03:30,900 --> 00:03:34,000
You know, some core is writing to 1 and some core is writing, that's a

77
00:03:34,000 --> 00:03:36,600
different core is writing to the one right next to it, right?

78
00:03:38,000 --> 00:03:40,700
And we don't have any problems with that now, because we made sure

79
00:03:40,700 --> 00:03:43,200
that we were always seem to be aligned.

80
00:03:43,200 --> 00:03:47,400
So we're always 16, byte aligned and so that's always good, right?

81
00:03:47,900 --> 00:03:50,900
And that means that we never have any sharing across this Edge.

82
00:03:50,900 --> 00:03:54,400
So we can always just load up a block of four pixels operate on them

83
00:03:54,400 --> 00:03:57,900
and write them back and we never have any contention between these two

84
00:03:57,900 --> 00:03:59,000
tiles, right?

85
00:03:59,000 --> 00:04:01,300
In terms of our thread code, but

86
00:04:03,200 --> 00:04:07,500
Even though we don't have any contention that we can see in our thread

87
00:04:07,500 --> 00:04:11,200
code and we don't have any bugs at that boundary that are due to

88
00:04:11,200 --> 00:04:11,900
contention.

89
00:04:14,400 --> 00:04:18,300
They're actually can be some silent contention happening at this

90
00:04:18,300 --> 00:04:18,800
boundary.

91
00:04:18,800 --> 00:04:21,300
So I want to magnify when do a little magnify here.

92
00:04:22,300 --> 00:04:23,800
Let's take a look at this boundary.

93
00:04:24,200 --> 00:04:28,600
Okay, so we've got all these pixels in here, right, coming through

94
00:04:28,600 --> 00:04:29,000
here.

95
00:04:29,700 --> 00:04:33,500
And we're operating on, you know, these four pixels here on core 0 and

96
00:04:33,500 --> 00:04:35,300
we're operating on these four pixels here.

97
00:04:35,300 --> 00:04:36,600
Oops, that's the only three pixels.

98
00:04:37,100 --> 00:04:38,300
These four pixels here.

99
00:04:38,300 --> 00:04:38,900
Encore one.

100
00:04:38,900 --> 00:04:40,000
Let's say right.

101
00:04:41,100 --> 00:04:46,500
Well as we know and we haven't talked about this too much but there's

102
00:04:46,500 --> 00:04:50,000
something called a cache line and maybe this is a good time to be.

103
00:04:50,000 --> 00:04:50,600
More explicit about.

104
00:04:50,600 --> 00:04:56,200
That is a cache line is the unit at which the cash cash is memory.

105
00:04:56,900 --> 00:05:01,800
So, you know, if your cache lines were four, bytes long, right?

106
00:05:02,600 --> 00:05:05,000
Let's say in the hypothetical cash.

107
00:05:05,000 --> 00:05:08,900
That would mean that every time you looked at a memory location,

108
00:05:09,100 --> 00:05:09,700
right?

109
00:05:09,900 --> 00:05:10,700
It would be looking

110
00:05:10,800 --> 00:05:15,500
To see if you hit somewhere inside a 4, byte long region.

111
00:05:15,900 --> 00:05:18,800
That is the place that that is, you know, stored in the cache.

112
00:05:18,900 --> 00:05:21,900
And if you weren't, if you're outside of what the things that are

113
00:05:21,900 --> 00:05:23,100
stored in the cache, right?

114
00:05:23,100 --> 00:05:24,700
And you know who knows how many we have of these.

115
00:05:24,700 --> 00:05:27,400
Right, let's say the cash has one megabyte of data or something.

116
00:05:27,400 --> 00:05:28,600
Well let's that's a little too big.

117
00:05:28,700 --> 00:05:30,800
Let's say it's 32k, right?

118
00:05:30,900 --> 00:05:37,300
If the cache is 32k, that means it has, you know 32k / for cache lines

119
00:05:37,300 --> 00:05:40,300
in it and each one of them has four bytes, right?

120
00:05:41,500 --> 00:05:45,100
And so it's going to look and see is, you know, anywhere in the cache

121
00:05:45,100 --> 00:05:48,400
does it have the piece of memory that I'm trying to access if it does

122
00:05:48,500 --> 00:05:48,900
it goes.

123
00:05:48,900 --> 00:05:49,800
Okay great.

124
00:05:49,900 --> 00:05:52,500
And it tries to remember the fact that it used that recently so it

125
00:05:52,500 --> 00:05:54,200
doesn't evict it, if it doesn't, it goes.

126
00:05:54,200 --> 00:05:54,700
Okay.

127
00:05:54,800 --> 00:05:56,900
Try to evict someone from this cash.

128
00:05:57,100 --> 00:05:59,900
Take one of those 4 B lines and put it back.

129
00:06:00,000 --> 00:06:00,600
Out to memory.

130
00:06:00,600 --> 00:06:04,500
If it's if it's been modified and then load in, you know, from memory,

131
00:06:04,500 --> 00:06:08,600
grab in from memory, the four bytes that are actually being asked for

132
00:06:08,600 --> 00:06:10,900
and now they're in the cash and they can start being worked on the

133
00:06:10,900 --> 00:06:11,400
cash, right?

134
00:06:11,400 --> 00:06:16,800
So a cache line is just like how big that chunk is in the cache.

135
00:06:16,800 --> 00:06:21,200
Cache line is one, you know, one of those those chunks and four bytes

136
00:06:21,200 --> 00:06:21,800
is way too small.

137
00:06:21,800 --> 00:06:25,100
I made that number up, you know, you're talking about something much

138
00:06:25,100 --> 00:06:27,800
more like you know, 128 bytes or something like this, right?

139
00:06:28,100 --> 00:06:30,000
So depending on your processor, you have

140
00:06:30,000 --> 00:06:33,400
you have a cache line that is some size, right?

141
00:06:33,500 --> 00:06:37,900
And it's that is the you the unit of granularity which memory will be

142
00:06:37,900 --> 00:06:38,500
pulled in.

143
00:06:40,300 --> 00:06:45,200
So the reason we care about this is that cache lines are the things

144
00:06:45,200 --> 00:06:46,600
that actually get arbitrated.

145
00:06:46,600 --> 00:06:49,000
Remember when we talked about messy, right?

146
00:06:49,300 --> 00:06:53,600
Modified exclusive shared invalid cache lines are actually the thing

147
00:06:53,600 --> 00:06:59,200
that that preserve memory coherence between multiple cores when

148
00:06:59,200 --> 00:07:00,600
multiple cores are working on things.

149
00:07:01,400 --> 00:07:06,900
And so as long as the cache lines ended right at the tile boundary, we

150
00:07:06,900 --> 00:07:09,500
would never have any contention for cache lines between

151
00:07:09,700 --> 00:07:11,000
In the cores, right?

152
00:07:11,000 --> 00:07:12,300
We never have anything going on there.

153
00:07:12,300 --> 00:07:15,000
They would always like, this would be one cache line, right?

154
00:07:15,100 --> 00:07:18,700
That ends right here going and this would be another cache line,

155
00:07:18,900 --> 00:07:19,400
right?

156
00:07:19,500 --> 00:07:22,000
And these two cores could just party on it and they never have any

157
00:07:22,000 --> 00:07:22,700
contention.

158
00:07:23,000 --> 00:07:29,700
But if we did not happen to end right on a cache line, then that means

159
00:07:29,700 --> 00:07:32,700
there is a cache line that likes spans these things.

160
00:07:32,800 --> 00:07:36,100
So let's say that the cache line, you know, spans these things.

161
00:07:36,300 --> 00:07:37,600
So here is a cache line.

162
00:07:38,200 --> 00:07:43,900
Well, yes, we don't have a bug in terms of contention because the

163
00:07:43,900 --> 00:07:47,000
processor will always take care of it for us, but what will actually

164
00:07:47,000 --> 00:07:50,900
happen when we're working on these things, is, when we go to load this

165
00:07:50,900 --> 00:07:53,800
cash, this this piece of data, right?

166
00:07:53,900 --> 00:07:55,100
When we go to load that,

167
00:08:01,200 --> 00:08:05,000
It's going to pull it into court, zeros, cash and core 0 is Cash is

168
00:08:05,000 --> 00:08:07,800
going to be marked as shared or something like this, right?

169
00:08:08,800 --> 00:08:12,400
Then you know, core ones going to hit it and he's going to pull it in

170
00:08:12,400 --> 00:08:14,500
and it's going to be marked and share a shared in his caste or

171
00:08:14,500 --> 00:08:16,100
something like this, right?

172
00:08:17,000 --> 00:08:19,300
But then zeros going to try to write to it.

173
00:08:20,300 --> 00:08:24,000
And when 0 goes to write to it, it's going to Market is invalid, in

174
00:08:24,000 --> 00:08:25,900
this guy's cash, right?

175
00:08:26,400 --> 00:08:29,500
And it's going to mark it as modified in this guy's cash, eventually.

176
00:08:30,400 --> 00:08:35,200
So now what happens is when one wants to write back his results, he

177
00:08:35,200 --> 00:08:41,500
then has to go re pull that data into the cache again because his copy

178
00:08:41,500 --> 00:08:46,000
is now invalid and he knows that he can't actually write to it without

179
00:08:46,000 --> 00:08:46,400
first.

180
00:08:46,400 --> 00:08:49,100
Grabbing it from whoever had modified it.

181
00:08:50,000 --> 00:08:53,800
So it's got to go, Snoop it out of zeros cash, and then it's going to

182
00:08:53,800 --> 00:08:57,500
invalidate it in his cash because this guy's going to modify it.

183
00:08:57,700 --> 00:08:59,900
And so it's bet this cache line is like bouncing back.

184
00:09:00,000 --> 00:09:03,100
Forth between the chorus potentially, who knows what's going on,

185
00:09:03,200 --> 00:09:03,700
right?

186
00:09:05,000 --> 00:09:09,100
And so we actually want to make sure that we don't have, you know,

187
00:09:09,100 --> 00:09:09,700
this happened.

188
00:09:09,700 --> 00:09:10,800
We want to make this happen.

189
00:09:10,800 --> 00:09:14,800
We want to make sure that these guys are not actually going through a

190
00:09:14,800 --> 00:09:19,100
bunch of contention internal to the processor even though we are not

191
00:09:19,100 --> 00:09:22,100
seeing it external because that could have performance ramifications

192
00:09:22,100 --> 00:09:26,000
for us that we don't want it will lead to us having more memory

193
00:09:26,000 --> 00:09:28,100
traffic or more cash.

194
00:09:28,100 --> 00:09:29,800
You know people talking to each other.

195
00:09:30,100 --> 00:09:35,700
In terms of on the CPU and that could lead to slower performance than

196
00:09:35,700 --> 00:09:37,800
if one CPU core knows.

197
00:09:37,800 --> 00:09:41,700
It can always just fully monopolize that cache line, right?

198
00:09:43,100 --> 00:09:45,900
So I'm not saying that's a performance concern right now, I'm just

199
00:09:45,900 --> 00:09:49,200
saying that we don't know that it isn't and it could be.

200
00:09:49,400 --> 00:09:51,900
And so, one of the things that we want it, we want to test later is

201
00:09:51,900 --> 00:09:56,800
making sure that we cash align things and see whether that improves

202
00:09:56,800 --> 00:09:59,300
our performance because that may be important.

203
00:09:59,800 --> 00:10:00,400
So there's that.

204
00:10:01,200 --> 00:10:06,100
The next one is, can we get hyper threads?

205
00:10:07,500 --> 00:10:12,300
Synced, so they do interleaved.

206
00:10:13,500 --> 00:10:16,700
Oops, interleave lines.

207
00:10:16,800 --> 00:10:19,000
Because right now, we're not using hyper threads at all.

208
00:10:19,000 --> 00:10:20,300
Really in any particular way.

209
00:10:21,400 --> 00:10:24,800
We're not trying to account for that and it would be nice if we did

210
00:10:24,800 --> 00:10:26,700
something with Hyper threads where we could do it early Alliance.

211
00:10:26,700 --> 00:10:28,900
The reason I haven't done yet is this not immediately?

212
00:10:28,900 --> 00:10:31,100
Obvious to me how to synchronize things.

213
00:10:31,100 --> 00:10:35,600
So that people pulling, you know, hyper threads, we'll both pull the

214
00:10:35,600 --> 00:10:40,400
same work unit out or something like this and just do even an odd

215
00:10:40,600 --> 00:10:42,100
pairs of that work unit.

216
00:10:42,200 --> 00:10:43,100
So I don't actually

217
00:10:43,200 --> 00:10:46,500
Know how to do something clever like that.

218
00:10:46,500 --> 00:10:48,900
And so I might talk to some friends and see if there's any way to

219
00:10:48,900 --> 00:10:51,800
really do that or it might be the best, just a bad idea and that was

220
00:10:51,800 --> 00:10:55,300
stupid and I shouldn't try to do that and in which case we don't have

221
00:10:55,300 --> 00:10:59,400
to but I wanted to mention those two things and then finally we want

222
00:10:59,400 --> 00:11:05,200
to know like how big should the tiles be for performance, right?

223
00:11:05,500 --> 00:11:09,800
Because how big the tiles are affects how much of the render Target

224
00:11:10,200 --> 00:11:11,500
stays in the cash?

225
00:11:12,100 --> 00:11:13,000
And we may

226
00:11:13,100 --> 00:11:14,400
Be doing some read modify.

227
00:11:14,400 --> 00:11:17,400
Write to that render Target often, you know, multiple times, like if

228
00:11:17,400 --> 00:11:20,200
for layering things on top of each other or who knows what

229
00:11:21,400 --> 00:11:26,500
And so in that circumstance we have to consider how big the tiles are

230
00:11:26,800 --> 00:11:28,300
makes a difference in terms of performance.

231
00:11:28,500 --> 00:11:32,100
Making them smaller means that more of it fits in the cache but more

232
00:11:32,100 --> 00:11:34,600
work has to be done in set up, right?

233
00:11:34,600 --> 00:11:38,400
Because remember every one of those tiles has to do work to like

234
00:11:38,400 --> 00:11:41,200
figure out where all the blocks are relative to it and clip them and

235
00:11:41,200 --> 00:11:41,900
all that stuff.

236
00:11:42,100 --> 00:11:45,000
So there's work being done in D queuing the thing and all that stuff.

237
00:11:45,000 --> 00:11:46,000
There's work.

238
00:11:46,300 --> 00:11:50,200
So it's not free to make the tile smaller, but there may be benefits

239
00:11:50,300 --> 00:11:51,100
in terms of

240
00:11:51,200 --> 00:11:52,900
formance in the renderer to making the smaller.

241
00:11:52,900 --> 00:11:55,900
So we want to see if we can figure out where that performance

242
00:11:55,900 --> 00:11:57,400
trade-off leads us.

243
00:11:57,400 --> 00:11:59,800
In terms of what is a good tile size to pick.

244
00:12:03,900 --> 00:12:04,700
So there's that.

245
00:12:05,500 --> 00:12:07,700
So I just wanted to kind of put those in there now and maybe some time

246
00:12:07,700 --> 00:12:11,700
when we're feeling like Goosey doing some more performance, we should

247
00:12:11,700 --> 00:12:14,600
play with that because that that's basically what we have to do in

248
00:12:14,600 --> 00:12:17,400
terms of doing some, some check on the performance.

249
00:12:17,900 --> 00:12:20,500
And then we also want to do a couple other things here.

250
00:12:20,800 --> 00:12:26,500
We want to do like actually ballpark the memory bandwidth for our

251
00:12:26,500 --> 00:12:30,400
render routine for our draw a rectangle quickly.

252
00:12:32,200 --> 00:12:35,800
So, you want to do that actual ballpark there, and we also want to

253
00:12:36,600 --> 00:12:42,300
retest some of our instruction choices.

254
00:12:43,000 --> 00:12:46,400
Once we actually have now that we've got multiple threads working and

255
00:12:46,400 --> 00:12:49,700
stuff like that, we would want to go actually do a little bit of

256
00:12:49,700 --> 00:12:51,800
playing with the actual observation of that routine.

257
00:12:52,000 --> 00:12:56,400
Once we now, you know, can sort of see, here's the actual fully

258
00:12:56,400 --> 00:12:59,500
hyper-threaded use case, once we decide to do that.

259
00:12:59,500 --> 00:13:01,300
So, we've got some of those things.

260
00:13:01,400 --> 00:13:02,000
You in there.

261
00:13:03,000 --> 00:13:04,600
Okay, so

262
00:13:06,700 --> 00:13:08,700
I don't really want to tackle that stuff today.

263
00:13:09,500 --> 00:13:12,800
What I'd rather do is start to clean out the render a little bit more

264
00:13:12,800 --> 00:13:17,200
in terms of some of the sort of things that we left as Loose Ends.

265
00:13:17,400 --> 00:13:21,000
So before we actually start to tighten the ratchet down on this now

266
00:13:21,000 --> 00:13:23,500
that we've got it running, I think what I want to do is just go a

267
00:13:23,500 --> 00:13:27,000
little bit further in terms of getting the renderer into sort of a

268
00:13:27,000 --> 00:13:30,200
more complete feature set, if that makes sense.

269
00:13:32,000 --> 00:13:36,100
So that we don't optimize stuff that's that in in absence of knowing

270
00:13:36,100 --> 00:13:36,400
exactly.

271
00:13:36,600 --> 00:13:38,400
What everything should be doing.

272
00:13:38,800 --> 00:13:43,400
So what I want to do in that effect and I guess we can pop over to The

273
00:13:43,400 --> 00:13:44,400
To Do List here.

274
00:13:45,400 --> 00:13:49,300
So what we want to do is finish straightening out all the coordinate

275
00:13:49,300 --> 00:13:52,300
systems which we kind of did.

276
00:13:52,300 --> 00:13:54,900
We actually did a bunch of optimization as well, it's kind of cool.

277
00:13:55,400 --> 00:13:57,500
We're actually running very fast so we want to straighten out these

278
00:13:57,500 --> 00:14:01,200
coordinate system so I want to go through and do that pass.

279
00:14:02,500 --> 00:14:05,200
I want to get back and sort of finish up that lighting.

280
00:14:05,800 --> 00:14:06,300
Right.

281
00:14:06,600 --> 00:14:09,900
And then we'll do the final optimization and then we can kind of cross

282
00:14:10,000 --> 00:14:11,200
rendering off the list.

283
00:14:11,300 --> 00:14:15,800
What I might want to do as well in here is some particle systems

284
00:14:16,200 --> 00:14:19,300
because I feel like particle systems might want some consideration in

285
00:14:19,300 --> 00:14:22,000
the render as well because they tend to be a little bit different from

286
00:14:22,000 --> 00:14:22,400
other things.

287
00:14:22,400 --> 00:14:23,500
So I want, what else I like to do?

288
00:14:23,500 --> 00:14:27,000
A particle systems a brief little particle systems thing in there.

289
00:14:27,300 --> 00:14:31,400
Perhaps before we do lighting for perhaps after not sure where that

290
00:14:31,400 --> 00:14:31,900
should go.

291
00:14:32,200 --> 00:14:32,800
I don't really know.

292
00:14:32,800 --> 00:14:34,300
But then we'll have to do that.

293
00:14:34,300 --> 00:14:35,400
Final optimization pass.

294
00:14:35,500 --> 00:14:39,000
Then we can kind of call the renderer essentially done for all intents

295
00:14:39,000 --> 00:14:39,600
and purposes.

296
00:14:39,900 --> 00:14:45,000
So I think that's a reasonable idea that seems good to me and I'm

297
00:14:45,000 --> 00:14:51,000
going to take a quick look here to see what we have to do in terms of

298
00:14:51,000 --> 00:14:51,700
other stuff.

299
00:14:54,000 --> 00:14:59,800
So I feel like we probably want to move.

300
00:15:00,000 --> 00:15:02,000
Audio up here as well.

301
00:15:04,000 --> 00:15:16,300
And I think we want animation up here as well to probably, maybe not.

302
00:15:16,300 --> 00:15:19,600
All right, so I think this is basically going to be mostly sort of

303
00:15:19,600 --> 00:15:20,700
game stuff, right?

304
00:15:20,700 --> 00:15:24,100
This is sort of, in fact, I feel like this stuff is kind of getting

305
00:15:24,100 --> 00:15:25,400
straight into game stuff.

306
00:15:25,400 --> 00:15:27,200
Most most of this stuff here.

307
00:15:28,300 --> 00:15:29,200
So

308
00:15:30,700 --> 00:15:34,800
This stuff here is kind of stuff we can make and put away.

309
00:15:34,800 --> 00:15:38,900
So I want to sort of concentrate on getting this stuff finished up

310
00:15:38,900 --> 00:15:41,900
because this is basically, you know, the low-level engine stuff that

311
00:15:41,900 --> 00:15:44,700
once we have it done, we can probably call it, you know, pretty,

312
00:15:44,700 --> 00:15:45,200
pretty.

313
00:15:45,700 --> 00:15:46,300
Pretty much done.

314
00:15:47,300 --> 00:15:49,700
So, yeah, so I want to try and get through some of this.

315
00:15:51,800 --> 00:15:55,400
And maybe look towards trying to get the renderer actually ship

316
00:15:55,400 --> 00:15:58,900
sometime soon so that we can we can check it off our list of things

317
00:15:58,900 --> 00:16:02,700
that need to get done before before the game can ship.

318
00:16:03,800 --> 00:16:07,700
So let's take a look at how we were doing with our coordinate systems

319
00:16:07,700 --> 00:16:08,900
here, right?

320
00:16:10,000 --> 00:16:13,000
We had our render group and we're pushing things onto the list and we

321
00:16:13,000 --> 00:16:16,800
kind of have things that are a little janky here because we were just

322
00:16:16,800 --> 00:16:20,000
sort of pushing things on sort of willy-nilly and not really thinking

323
00:16:20,000 --> 00:16:21,500
too hard about how

324
00:16:21,600 --> 00:16:23,000
Stuff wants to work.

325
00:16:23,000 --> 00:16:26,900
And so what I think I don't like about some of the stuff is this

326
00:16:26,900 --> 00:16:30,000
render entity basis stuff and these sorts of things, I feel like

327
00:16:30,000 --> 00:16:31,800
there's a little bit too much going on there.

328
00:16:32,200 --> 00:16:35,600
That isn't necessarily stuff that we need to have happen.

329
00:16:35,900 --> 00:16:39,900
And similarly, I feel like we are playing it a little fast and loose

330
00:16:40,100 --> 00:16:44,900
in terms of how we're actually dealing with our camera stuff, right?

331
00:16:45,500 --> 00:16:49,300
So I kind of want to take a look at this and maybe make it a little

332
00:16:49,300 --> 00:16:51,500
closer to how you would typically do it in a 3D.

333
00:16:51,600 --> 00:16:55,200
A pipeline so that I can be a little more comfortable about how it's

334
00:16:55,200 --> 00:16:57,600
all actually working, right?

335
00:16:59,100 --> 00:17:05,099
So, let's go, let's go back and take a look here, right, at at how

336
00:17:05,099 --> 00:17:06,700
this stuff is actually playing out.

337
00:17:07,200 --> 00:17:12,000
You can see, we've got this this basis function, that's get render

338
00:17:12,000 --> 00:17:12,800
entity basis.

339
00:17:13,200 --> 00:17:16,700
And what this does is this basically does our our 3D transform,

340
00:17:16,800 --> 00:17:19,400
because even though we're in 2D, we're actually doing, you know, most

341
00:17:19,400 --> 00:17:23,800
of our stuff in 3D, and you can kind of see us going ahead and doing

342
00:17:23,800 --> 00:17:24,900
that here, right?

343
00:17:25,400 --> 00:17:28,300
And so what I'd like to do is is go ahead.

344
00:17:28,500 --> 00:17:32,200
And make this a little bit more formalized because what we, what we

345
00:17:32,200 --> 00:17:36,300
have a sort of a problem with at the moment is we don't actually have

346
00:17:36,300 --> 00:17:41,100
any a way of saying we that we don't want to do any sort of 3D stuff.

347
00:17:41,100 --> 00:17:41,800
Right?

348
00:17:41,900 --> 00:17:46,800
And that kind of reared, its ugly head at us because what ended up

349
00:17:46,800 --> 00:17:49,600
happening when we want to build the ground chunks is, there's no way

350
00:17:49,600 --> 00:17:55,100
to actually go and disable this situation where we are doing these 3D

351
00:17:55,100 --> 00:17:56,200
transforms, right?

352
00:17:58,100 --> 00:17:59,800
And that is a problem because we can't.

353
00:18:00,000 --> 00:18:01,800
Ground chuck seamless like we were doing.

354
00:18:03,000 --> 00:18:05,700
If we don't know that we're actually operating in proper pixel space

355
00:18:05,700 --> 00:18:06,600
and that sort of stuff.

356
00:18:07,500 --> 00:18:11,700
So I think that this is mostly what we want to focus on here is

357
00:18:11,700 --> 00:18:17,700
actually like you know doing doing some work here where we can where

358
00:18:17,700 --> 00:18:22,400
we can make this a little more, a little more solid I guess that's

359
00:18:22,400 --> 00:18:23,000
what I would say.

360
00:18:24,200 --> 00:18:29,600
So what I want to do is make it so that we have a way to do both a

361
00:18:30,200 --> 00:18:32,200
An orthographic transform of standard transform.

362
00:18:32,200 --> 00:18:35,000
Like we were doing originally where we just can pick place.

363
00:18:35,000 --> 00:18:36,300
Things pixelize.

364
00:18:36,500 --> 00:18:40,000
I want to be able to do that and also I want to be able to do the

365
00:18:40,000 --> 00:18:42,000
perspective transform in both cases.

366
00:18:43,300 --> 00:18:48,000
So the way that I want to approach that is I want to stop doing these

367
00:18:48,000 --> 00:18:52,500
delayed and I want to start doing them right in line.

368
00:18:53,100 --> 00:18:54,800
And what that's going to require is.

369
00:18:54,800 --> 00:18:58,400
If you remember the way that we were doing this, we had it so that

370
00:18:58,400 --> 00:19:02,900
when we went through, our our entity simulation which was happening in

371
00:19:02,900 --> 00:19:04,000
here, right?

372
00:19:04,500 --> 00:19:10,400
We would simulate the entities first by, you know, by executing, what

373
00:19:10,400 --> 00:19:12,100
was ever in there, switch statements here.

374
00:19:12,300 --> 00:19:12,800
And then we would

375
00:19:13,000 --> 00:19:17,500
Sort of put on whatever we wanted the bitmaps to be, that they were

376
00:19:17,500 --> 00:19:20,000
going to have that, were related to them, right?

377
00:19:21,500 --> 00:19:25,800
And then after we were all done, we would do this thing where we would

378
00:19:25,800 --> 00:19:29,800
simulate The Entity and the entity would move to wherever it needed to

379
00:19:29,800 --> 00:19:31,900
move or whatever that sort of stuff, right?

380
00:19:32,600 --> 00:19:35,600
And this created a problem because it meant that we couldn't actually

381
00:19:35,600 --> 00:19:38,800
know where anything was until after we already finished, our

382
00:19:38,800 --> 00:19:41,800
simulation switch statement and that was just really annoying and

383
00:19:41,800 --> 00:19:45,100
that's what caused us to have to have the delayed render entity basis

384
00:19:45,100 --> 00:19:45,700
to like that.

385
00:19:45,800 --> 00:19:49,600
So in general, I don't really think I like that idea.

386
00:19:50,100 --> 00:19:50,900
And I do

387
00:19:51,100 --> 00:19:54,200
Really want to do that anymore, right?

388
00:19:54,900 --> 00:19:57,900
And so what I'd rather do is I'd rather have it.

389
00:19:57,900 --> 00:20:02,300
So the entity gets moved and then the rendering for the entity happens

390
00:20:03,000 --> 00:20:07,300
and we can really do that in one of two ways and I'm going to do the

391
00:20:07,300 --> 00:20:10,600
simplest way right now, but we may do something a little bit

392
00:20:10,600 --> 00:20:11,900
different, a little later on.

393
00:20:12,000 --> 00:20:15,400
So all I'm really going to do here is, I'm just going to copy the

394
00:20:15,400 --> 00:20:16,900
switch statement, right?

395
00:20:17,100 --> 00:20:20,200
And I'm just going to have half of it be and render half of it.

396
00:20:21,600 --> 00:20:22,300
Like out here.

397
00:20:22,500 --> 00:20:24,500
I want to be the render part, right?

398
00:20:24,500 --> 00:20:27,700
So this is like you know render an entity.

399
00:20:29,500 --> 00:20:34,100
And the other part up here, I want to be simulating entity.

400
00:20:40,200 --> 00:20:44,100
And I think eventually, I don't know, eventually we may still be able

401
00:20:44,100 --> 00:20:47,700
to do these together because we may have the way movement Works, be a

402
00:20:47,700 --> 00:20:53,700
little bit different, but I feel like in some sense, I maybe don't

403
00:20:53,700 --> 00:20:56,000
even want to call it simulate an entity or moving.

404
00:20:56,000 --> 00:20:59,800
And see, I think what I probably want to call it is more like pre.

405
00:21:00,400 --> 00:21:08,700
Physics Sim entity work, maybe would be a better idea and and post,

406
00:21:09,100 --> 00:21:09,600
right.

407
00:21:13,200 --> 00:21:19,500
And so, you know, we might not we might even do stuff that is actually

408
00:21:19,800 --> 00:21:23,200
not just rendering in this back end here, right?

409
00:21:23,700 --> 00:21:29,000
And so, you know, I just kind of want to, I want to make make it clear

410
00:21:29,000 --> 00:21:32,000
that simulation could happen in here and so what I'm going to do for

411
00:21:32,000 --> 00:21:34,500
the moment is I'm just going to do again.

412
00:21:34,500 --> 00:21:35,900
The simplest possible thing.

413
00:21:36,600 --> 00:21:42,300
I'm going to just go ahead and kind of make this make this stuff work

414
00:21:42,700 --> 00:21:42,900
to the

415
00:21:43,100 --> 00:21:45,200
Scent of just splitting it in half.

416
00:21:47,700 --> 00:21:48,400
And that's it.

417
00:21:50,800 --> 00:21:53,700
And then what I'm going to do is go up here and remove the, you know,

418
00:21:54,000 --> 00:21:55,100
remove that code.

419
00:21:55,900 --> 00:21:56,800
So that's gone now.

420
00:21:57,800 --> 00:21:59,400
Walls don't need any Sims.

421
00:21:59,400 --> 00:22:01,200
Stairwells don't need any Sim here.

422
00:22:02,100 --> 00:22:03,000
Store does.

423
00:22:04,600 --> 00:22:11,800
And then we've got our familiar and are familiar does have SIM, but

424
00:22:11,800 --> 00:22:20,100
then it stops here and the monstar has no shame at the moment and

425
00:22:21,000 --> 00:22:23,900
let's see, space has no sin either.

426
00:22:24,700 --> 00:22:27,900
So we're only sending a couple entities at the moment in terms of

427
00:22:27,900 --> 00:22:32,200
stuff that they actually do and then we do all the rendering here.

428
00:22:32,800 --> 00:22:34,000
And so what I think can

429
00:22:34,100 --> 00:22:38,100
Ben now is we can go ahead and actually just put things at the

430
00:22:38,100 --> 00:22:41,100
location where they actually should be, right?

431
00:22:41,800 --> 00:22:46,600
And so now instead of having to do this stuff delayed we can just do

432
00:22:46,600 --> 00:22:47,600
it right in line.

433
00:22:47,600 --> 00:22:52,800
So when things get pushed, they will just get pushed properly, right?

434
00:22:54,100 --> 00:22:56,900
So let's take a look at that here.

435
00:22:58,100 --> 00:23:02,100
What I want to do is say this default basis thing, I'm going to

436
00:23:02,100 --> 00:23:03,600
actually make that

437
00:23:06,000 --> 00:23:06,800
Be something.

438
00:23:08,100 --> 00:23:13,000
That's just kind of set directly in the render group and used as sort

439
00:23:13,000 --> 00:23:18,000
of a, you know, a thing that kind of gets gets overwritten and stuff

440
00:23:18,000 --> 00:23:18,500
like this.

441
00:23:18,900 --> 00:23:20,800
So I'm going to have a default basis there.

442
00:23:22,200 --> 00:23:24,900
And I think what I would like to do

443
00:23:28,900 --> 00:23:31,400
How do I want to do this?

444
00:23:32,900 --> 00:23:37,400
I think what I want to do is I want to look and see what we're

445
00:23:37,400 --> 00:23:40,100
actually using in here out of that the basis.

446
00:23:40,800 --> 00:23:46,600
So let's see empty basis so we use the p screen dim.

447
00:23:50,600 --> 00:23:54,700
Screened in probably also wants to be something that's sort of in

448
00:23:54,700 --> 00:23:55,900
there as well.

449
00:23:56,700 --> 00:23:59,800
It looks to me like so I feel like we're going to want to do that.

450
00:24:00,000 --> 00:24:03,500
Monitor half-demon, M, sort of situation.

451
00:24:05,200 --> 00:24:06,900
I'm going to want to pull that out as well.

452
00:24:07,500 --> 00:24:08,600
I think almost certainly.

453
00:24:09,200 --> 00:24:09,800
Then we've got.

454
00:24:09,800 --> 00:24:10,400
Let's see.

455
00:24:10,400 --> 00:24:18,400
So, the cameras distance above Target and the let's see in the focal

456
00:24:18,400 --> 00:24:18,900
length.

457
00:24:20,200 --> 00:24:23,000
And it looks like that.

458
00:24:24,500 --> 00:24:28,900
About it to me.

459
00:24:29,700 --> 00:24:30,300
Yeah.

460
00:24:31,500 --> 00:24:34,700
of course you got the new clip playing as well, but that that looks

461
00:24:34,700 --> 00:24:37,500
like basically it

462
00:24:40,400 --> 00:24:44,300
Yeah, so I'm going to go ahead and just again do the simplest possible

463
00:24:44,300 --> 00:24:46,600
thing here to to pull this out.

464
00:24:46,700 --> 00:24:52,300
I'm going to I'm going to sort of, do we use m 2 pixels in here as

465
00:24:52,300 --> 00:24:52,600
well?

466
00:24:52,700 --> 00:24:54,500
L 2 pixels, we do.

467
00:24:55,000 --> 00:24:56,600
So we have M to pixels as well.

468
00:24:57,100 --> 00:25:05,600
So I'm going to go ahead and sort of pull these out into the that

469
00:25:05,600 --> 00:25:07,200
render basis, right?

470
00:25:10,200 --> 00:25:12,700
Which I guess will actually, you know, I might just call it this.

471
00:25:15,200 --> 00:25:15,800
Here we go.

472
00:25:17,000 --> 00:25:19,100
And this render group camera.

473
00:25:19,100 --> 00:25:23,000
I'm actually going to call this just a render group transform for now.

474
00:25:23,800 --> 00:25:26,900
And I'm going to use this render group transform and I'm going to say

475
00:25:26,900 --> 00:25:28,700
that we basically have one of those.

476
00:25:29,100 --> 00:25:29,500
Right?

477
00:25:29,600 --> 00:25:34,500
Like so and I'm going to get rid of this concept of game can Burr and

478
00:25:34,500 --> 00:25:37,600
render camera in here, right?

479
00:25:38,000 --> 00:25:41,800
And I'm going to have that be something that's actually done outside,

480
00:25:42,300 --> 00:25:42,700
right?

481
00:25:42,700 --> 00:25:44,300
So we're going to have that be done outside.

482
00:25:45,400 --> 00:25:47,400
So here is our transform.

483
00:25:47,700 --> 00:25:52,700
This is our current transform and it is going to contain all of the

484
00:25:52,700 --> 00:25:53,900
stuff that we need for this.

485
00:25:53,900 --> 00:25:56,600
And so this routine get and render entity basis.

486
00:25:56,600 --> 00:26:03,100
P is actually just going to kind of collapse away into the thing that

487
00:26:03,100 --> 00:26:04,300
actually does the push.

488
00:26:04,600 --> 00:26:08,800
So I'm going to put that this entity basis P result thing.

489
00:26:08,900 --> 00:26:12,300
I'm actually going to sort of get rid of that that concept a little

490
00:26:12,300 --> 00:26:12,800
bit, right?

491
00:26:12,800 --> 00:26:14,600
And we're going to we're going to kind of move it down.

492
00:26:16,400 --> 00:26:18,000
To where things are getting pushed.

493
00:26:18,200 --> 00:26:21,500
So here, where things are getting pushed, I'm going to have that.

494
00:26:21,500 --> 00:26:23,900
Be the place where this stuff happens.

495
00:26:24,300 --> 00:26:29,200
And so, when we actually were doing that appear, like when we were

496
00:26:29,200 --> 00:26:33,600
actually doing the get render entity basis P, what I want to do is I

497
00:26:33,600 --> 00:26:35,500
want to do that all at push time.

498
00:26:35,600 --> 00:26:38,300
So instead of having that be some delayed thing, that transforms

499
00:26:38,300 --> 00:26:42,900
things after the fact, I want to make this actually something that

500
00:26:42,900 --> 00:26:44,800
happens at a

501
00:26:45,600 --> 00:26:47,200
at the time, when you actually submit it,

502
00:26:50,100 --> 00:26:50,600
Okay.

503
00:26:52,700 --> 00:26:57,700
So at the time when you submit it, I'm actually going to call this.

504
00:26:57,700 --> 00:26:59,800
So we're going to have this guy.

505
00:27:00,000 --> 00:27:00,800
Down here.

506
00:27:03,000 --> 00:27:07,400
So when you call, you know, draw a rectangle or push Vector, any of

507
00:27:07,400 --> 00:27:08,900
these sorts of things, right?

508
00:27:09,500 --> 00:27:11,800
So we do push bitmap.

509
00:27:11,800 --> 00:27:15,400
For example, what this is going to do is its first going to actually

510
00:27:15,400 --> 00:27:16,900
do that transform, right?

511
00:27:16,900 --> 00:27:20,400
And then it's going to see if that the transformative it can actually

512
00:27:20,400 --> 00:27:21,100
be seen.

513
00:27:21,900 --> 00:27:25,500
And so what will happen is the nice thing about this will be if this

514
00:27:25,500 --> 00:27:28,700
thing was like behind the camera or something, it won't even ever get

515
00:27:28,700 --> 00:27:30,000
pushed onto the render stack.

516
00:27:30,100 --> 00:27:32,800
So just gets thrown away immediately which is kind of

517
00:27:33,000 --> 00:27:34,100
Eyes, right?

518
00:27:34,100 --> 00:27:38,700
So we'll do that for this guy right here.

519
00:27:38,900 --> 00:27:40,300
I guess the same thing.

520
00:27:40,300 --> 00:27:44,100
Just does the is that how these guys work before with the with the

521
00:27:44,100 --> 00:27:45,000
rectangle as well?

522
00:27:45,100 --> 00:27:45,500
Yes.

523
00:27:45,500 --> 00:27:47,000
So these guys work the same way.

524
00:27:47,500 --> 00:27:51,800
So similarly, like I can do the exact same thing when you push a

525
00:27:51,800 --> 00:27:52,800
rectangle, right?

526
00:27:52,800 --> 00:27:55,500
We can say if the basis is valid

527
00:27:57,200 --> 00:27:57,600
There we go.

528
00:27:58,600 --> 00:28:02,300
If the base is valid, then we would do push.

529
00:28:02,400 --> 00:28:04,300
Otherwise we just won't ever do the push.

530
00:28:05,200 --> 00:28:06,600
Push wrecked outline.

531
00:28:06,900 --> 00:28:09,100
It's just exactly the same thing clear.

532
00:28:09,300 --> 00:28:13,300
And then our coordinate system needs to do the same thing as well.

533
00:28:13,500 --> 00:28:15,700
Write it needs to do this as well.

534
00:28:15,900 --> 00:28:20,200
So, all these guys basically just have to do this this system here,

535
00:28:20,400 --> 00:28:20,900
right?

536
00:28:21,500 --> 00:28:24,100
And this is now going to be something that might return a 0.

537
00:28:24,900 --> 00:28:25,600
That makes sense.

538
00:28:26,100 --> 00:28:28,800
And so anyone outside who calls it without the right now, this is our

539
00:28:28,800 --> 00:28:33,600
test call anyway, so I'm not super concerned about that but just to be

540
00:28:33,600 --> 00:28:37,200
safe when we actually do coordinate system here, I'm going to do a

541
00:28:37,200 --> 00:28:39,300
thing that says, you know, if C.

542
00:28:39,900 --> 00:28:43,800
So actually, we have a reference see anywhere.

543
00:28:45,400 --> 00:28:45,900
At all.

544
00:28:46,900 --> 00:28:49,400
SI pero weed out.

545
00:28:49,600 --> 00:28:51,100
All right, so that doesn't actually even matter.

546
00:28:51,200 --> 00:28:55,000
Never mind, never mind, nobody cares.

547
00:28:56,600 --> 00:28:57,700
Nobody cares at all.

548
00:28:58,400 --> 00:28:59,800
So we'll just go ahead and get rid of that.

549
00:29:02,000 --> 00:29:05,300
like so, in fact, we could if we wanted to just get rid of this

550
00:29:05,300 --> 00:29:05,900
entirely,

551
00:29:09,800 --> 00:29:10,200
Okay.

552
00:29:14,000 --> 00:29:16,900
So yeah, so if you can see sort of what I'm doing here, I'm just sort

553
00:29:16,900 --> 00:29:20,400
of pushing this work into a different location and I'm pushing it to a

554
00:29:20,400 --> 00:29:23,000
place where it can be done, you know, right at the time.

555
00:29:24,400 --> 00:29:26,900
And I like that a little bit better because then we're not wasting

556
00:29:26,900 --> 00:29:30,400
this time of like going back and retouching things to recompute them

557
00:29:30,400 --> 00:29:31,900
and storing more data than we need to

558
00:29:33,100 --> 00:29:36,400
So, all right, so when we come through here, and we're going to look

559
00:29:36,400 --> 00:29:41,100
at our render entry bitmap, we got to make sure that that now stores

560
00:29:41,100 --> 00:29:42,600
the correct stuff with it.

561
00:29:43,200 --> 00:29:47,300
So I want to just take a look at what that's got render group entry

562
00:29:48,100 --> 00:29:48,800
bitmap.

563
00:29:49,400 --> 00:29:53,600
So we have our loaded bitmap and our entity basis can now go away.

564
00:29:53,900 --> 00:29:57,400
And we only need to know, basically whatever the the P.

565
00:29:57,400 --> 00:29:59,800
These two things were so we just need like

566
00:30:00,000 --> 00:30:04,500
Story the p and the scale that would get used.

567
00:30:04,600 --> 00:30:08,500
It looks like that's about it and so that's fine.

568
00:30:08,700 --> 00:30:13,000
Now I guess I don't understand exactly entry sighs.

569
00:30:13,300 --> 00:30:15,800
Why is there a size and a scale?

570
00:30:20,600 --> 00:30:28,400
Yeah, does anyone know why we still have a size and the scale?

571
00:30:31,300 --> 00:30:34,900
Does that make any sense?

572
00:30:39,300 --> 00:30:39,900
I don't know.

573
00:30:40,600 --> 00:30:44,300
I'm going to say that it doesn't make any sense and so I'm going to go

574
00:30:44,300 --> 00:30:48,600
ahead and say that this would just be like that because since the

575
00:30:48,600 --> 00:30:54,400
scale is not actually used anywhere, it just doesn't seem relevant to

576
00:30:54,400 --> 00:30:54,800
me.

577
00:30:55,100 --> 00:30:58,100
Now, it could be that since we normalize them in the other routine

578
00:30:58,100 --> 00:31:01,300
that we should store a scale Plus or a deep renormalized, but I don't

579
00:31:01,300 --> 00:31:01,600
know.

580
00:31:01,600 --> 00:31:03,400
I'm just I'm just gonna go with this for now.

581
00:31:03,400 --> 00:31:08,400
It just seems silly to have more so inside the rendering,

582
00:31:09,100 --> 00:31:10,800
The bitmap information.

583
00:31:12,000 --> 00:31:17,900
You know, all we would have is that 2D position and then and then a

584
00:31:17,900 --> 00:31:23,200
size we may eventually want to store the full 3d position for lighting

585
00:31:23,200 --> 00:31:25,500
purposes or you know, something like this.

586
00:31:25,900 --> 00:31:28,600
So I don't actually know if we want to.

587
00:31:28,800 --> 00:31:31,800
We may want to double later but for now I'm just going to store only

588
00:31:31,800 --> 00:31:36,700
what we're actually using rather than try to like guess and and see

589
00:31:36,700 --> 00:31:37,800
what we would use later.

590
00:31:38,700 --> 00:31:41,700
So we would need to store the the P there and we would need to

591
00:31:41,800 --> 00:31:46,400
Were the size prescale there, and that's fine.

592
00:31:48,200 --> 00:31:49,300
So that all looks good.

593
00:31:50,100 --> 00:31:52,100
So the same would go for these guys.

594
00:31:52,500 --> 00:31:56,500
The Ender, Ender entity, rectangle would now do that.

595
00:31:56,500 --> 00:32:01,100
Plus I guess the the dim there would now be pre scaled, so we wouldn't

596
00:32:01,100 --> 00:32:03,500
have to call scale on it.

597
00:32:04,600 --> 00:32:07,700
And so I think that was just all there because we're doing the

598
00:32:07,700 --> 00:32:08,600
transforms in line.

599
00:32:08,700 --> 00:32:10,400
I think we can basically just get rid of all that.

600
00:32:10,400 --> 00:32:10,800
Now

601
00:32:12,400 --> 00:32:18,200
So this stuff, we now totally got rid of, I guess we're not even

602
00:32:18,200 --> 00:32:20,900
calling it anymore because we are having been testing with it.

603
00:32:21,300 --> 00:32:22,800
So I'm going to go ahead and compile that

604
00:32:24,400 --> 00:32:25,500
And see where we're at.

605
00:32:25,800 --> 00:32:31,200
So pixels 2 m, where does that actually get used that gets passed into

606
00:32:31,200 --> 00:32:32,100
these guys.

607
00:32:33,900 --> 00:32:35,700
So, draw a rectangle quickly.

608
00:32:36,400 --> 00:32:38,000
Let me take a look at what's Happening Here.

609
00:32:39,100 --> 00:32:42,700
Those I guess are just used for are positional lighting stuff.

610
00:32:43,500 --> 00:32:46,100
I assume is the only thing that that's actually used for looking up

611
00:32:46,100 --> 00:32:53,400
into that reflection bitmap so I guess that can change is the only

612
00:32:53,500 --> 00:32:56,700
Problem, right for the lighting that can actually very.

613
00:32:57,200 --> 00:32:59,800
So I feel like we need to store that with with the

614
00:33:00,200 --> 00:33:02,700
With any particular render entry as well because it's part of the

615
00:33:02,700 --> 00:33:03,600
lighting equation.

616
00:33:04,200 --> 00:33:08,400
At least that seems like what would be the case to me?

617
00:33:09,100 --> 00:33:09,900
That's what I feel like.

618
00:33:09,900 --> 00:33:10,900
So let me take a look here.

619
00:33:10,900 --> 00:33:12,100
Also at screen dim.

620
00:33:13,300 --> 00:33:14,600
What's happening with screen dim?

621
00:33:14,900 --> 00:33:19,300
So screen dims only getting passed in here so that we won't need

622
00:33:19,300 --> 00:33:19,600
either.

623
00:33:19,600 --> 00:33:24,500
So that can just go away actually that can go away entirely and so

624
00:33:24,500 --> 00:33:25,100
that's good.

625
00:33:25,800 --> 00:33:29,500
All right, so it's really just this guy here pixels to m is actually

626
00:33:29,500 --> 00:33:29,900
something that's

627
00:33:30,000 --> 00:33:30,900
Going to have to be stored.

628
00:33:30,900 --> 00:33:33,400
It doesn't have to actually be stored for things that don't have

629
00:33:33,400 --> 00:33:36,000
lighting like the render entry bitmap, which doesn't have lighting

630
00:33:36,300 --> 00:33:39,800
doesn't actually need to be stored, but it would need to be stored for

631
00:33:39,800 --> 00:33:40,400
other people.

632
00:33:40,400 --> 00:33:43,600
Like, for example, the coordinate system would need to store m 2

633
00:33:43,600 --> 00:33:45,800
pixels in it to do the lighting.

634
00:33:45,800 --> 00:33:48,500
So when we think about that, we'll have to think of it.

635
00:33:49,200 --> 00:33:50,500
Think about how you want to do that.

636
00:33:52,900 --> 00:33:55,200
Need to store this for lighting.

637
00:33:57,900 --> 00:34:00,400
Let's see like that.

638
00:34:01,600 --> 00:34:05,200
Okay, so we come through here and we do our rectangle drawing.

639
00:34:05,700 --> 00:34:11,199
We do our draw rectangle, slowly, and our draw rectangle quickly now

640
00:34:11,199 --> 00:34:11,900
can both work.

641
00:34:11,900 --> 00:34:15,600
Okay, pixels to M, for draw rectangle.

642
00:34:15,600 --> 00:34:17,199
It's weird that dark tunnel, slowly.

643
00:34:17,300 --> 00:34:18,500
I was taking a different spot.

644
00:34:21,100 --> 00:34:23,100
So dark tan quickly and draw a rectangle slowly.

645
00:34:23,400 --> 00:34:25,500
They don't actually need those quite yet.

646
00:34:28,100 --> 00:34:28,699
What the heck?

647
00:34:28,800 --> 00:34:30,199
I guess, I'll go ahead and put them in there.

648
00:34:31,500 --> 00:34:35,500
Because eventually I guess our well I'm really torn because we're

649
00:34:35,500 --> 00:34:39,500
going to want a drawbitmap that doesn't use lighting, so I'm not going

650
00:34:39,500 --> 00:34:40,000
to do that.

651
00:34:40,100 --> 00:34:45,199
So I'm gonna I'm gonna put like null pixels to meters or something,

652
00:34:45,500 --> 00:34:46,000
right?

653
00:34:46,500 --> 00:34:50,100
And I'm just going to have no pixels to m is just one.

654
00:34:50,300 --> 00:34:51,400
There's no transform.

655
00:34:53,100 --> 00:34:55,699
Okay, so that should be fine.

656
00:34:56,400 --> 00:35:01,000
Let's take a look here, the entry render entry rectangle.

657
00:35:01,200 --> 00:35:04,400
Oops, I didn't actually add that in there.

658
00:35:05,300 --> 00:35:06,800
Kind of want these sorted like that.

659
00:35:06,800 --> 00:35:08,000
Probably, don't.

660
00:35:08,000 --> 00:35:09,500
I feel like I do.

661
00:35:10,600 --> 00:35:11,000
Okay.

662
00:35:11,000 --> 00:35:13,400
And this doesn't need a render entity basis anymore.

663
00:35:13,800 --> 00:35:17,800
In fact, nobody needs one of those in fact, render entity basis can

664
00:35:17,800 --> 00:35:18,800
actually just go away.

665
00:35:21,700 --> 00:35:22,700
And let's take a look here.

666
00:35:22,700 --> 00:35:28,400
So now what we need to do is we need to initialize some of these

667
00:35:28,400 --> 00:35:28,800
things.

668
00:35:28,800 --> 00:35:33,700
Like our default basis is gone but we do have the concept of that

669
00:35:33,700 --> 00:35:36,800
transform and the transform.

670
00:35:38,300 --> 00:35:41,600
Is going to have to have some of the stuff, right?

671
00:35:42,300 --> 00:35:46,900
So what we want to do in our transform, we probably want to have again

672
00:35:46,900 --> 00:35:50,900
that scale and we want to have an offset in there, right?

673
00:35:50,900 --> 00:35:56,000
So we'll leave that like that and

674
00:35:59,000 --> 00:35:59,800
Yeah, I think that's all.

675
00:36:00,900 --> 00:36:05,000
So in here in the transform we need to initialize all this stuff.

676
00:36:05,000 --> 00:36:08,300
So it's doing a push struct of a render basis.

677
00:36:08,600 --> 00:36:12,900
I guess it doesn't need to do that anymore because the render group

678
00:36:12,900 --> 00:36:15,200
now just contains it directly.

679
00:36:15,500 --> 00:36:17,600
So actually it doesn't actually need to do that.

680
00:36:17,600 --> 00:36:22,100
It can just do render and to transform directly without ever having to

681
00:36:22,100 --> 00:36:27,300
do that, but it needs to be able to put m 2 pixels in there, right?

682
00:36:28,100 --> 00:36:29,900
And it needs to be able to

683
00:36:30,000 --> 00:36:33,700
You want to actually initialize any of those?

684
00:36:35,600 --> 00:36:40,800
M, 2 pixels needs to be in there and monitor half-demon M needs to be

685
00:36:40,800 --> 00:36:41,400
in there.

686
00:36:42,100 --> 00:36:43,900
The focal length needs to be in there.

687
00:36:45,200 --> 00:36:47,900
And the distance above Target needs to be in there.

688
00:36:48,800 --> 00:36:52,000
Set p and the scale.

689
00:36:52,900 --> 00:36:53,400
All right.

690
00:36:57,000 --> 00:37:01,500
And what we probably want to do, I'm just guessing is to start with

691
00:37:01,500 --> 00:37:03,600
essentially an invalid transform.

692
00:37:03,700 --> 00:37:06,900
I'm guessing, I don't really know.

693
00:37:07,400 --> 00:37:08,300
I'm just guessing.

694
00:37:09,600 --> 00:37:13,400
Well, I guess we could set it to something sort of reasonable here.

695
00:37:13,700 --> 00:37:14,400
Let's take a look.

696
00:37:16,700 --> 00:37:21,500
So in here, will say, okay, we've got, we've got the monitor

697
00:37:21,500 --> 00:37:24,300
half-demon M, we net, we know what that is.

698
00:37:24,300 --> 00:37:25,900
It's right here, right?

699
00:37:25,900 --> 00:37:27,000
We were to Computing it.

700
00:37:28,400 --> 00:37:30,200
We've got M to pixels.

701
00:37:30,600 --> 00:37:31,300
It's right here.

702
00:37:33,800 --> 00:37:34,700
So, that's good.

703
00:37:37,200 --> 00:37:37,900
Let's see.

704
00:37:37,900 --> 00:37:41,100
We've got a to do in their Justice based on Buffer size, so that's

705
00:37:41,400 --> 00:37:42,500
something we'll have to do.

706
00:37:42,900 --> 00:37:44,100
That's still not being done.

707
00:37:45,000 --> 00:37:51,000
So, we've got focal length and let's go ahead and copy that down.

708
00:37:52,100 --> 00:37:55,500
All right, we've got distance above Target.

709
00:37:58,200 --> 00:38:02,800
And we've got with the monitor is just something that needs to be

710
00:38:03,200 --> 00:38:05,000
dealt with a little bit more specifically later.

711
00:38:07,600 --> 00:38:12,500
Offset p is going to be nothing and the scale will just be 1.0.

712
00:38:13,900 --> 00:38:17,200
Is global Alpha used anymore you still using that?

713
00:38:17,200 --> 00:38:18,400
Yeah we still are using that.

714
00:38:19,200 --> 00:38:20,200
That's what we're using for do that.

715
00:38:20,200 --> 00:38:21,500
That silly fade thing.

716
00:38:21,600 --> 00:38:21,900
Yeah.

717
00:38:22,000 --> 00:38:22,900
Okay fine.

718
00:38:24,400 --> 00:38:28,200
So I think that's everything that needs to happen there so that all

719
00:38:28,200 --> 00:38:30,600
gets initialized properly, right?

720
00:38:31,900 --> 00:38:32,900
So, that's good.

721
00:38:33,200 --> 00:38:35,100
And I think

722
00:38:36,700 --> 00:38:46,100
I think, now when we call get render entity basis P, let me see what

723
00:38:46,100 --> 00:38:47,200
render group actually.

724
00:38:47,200 --> 00:38:47,500
Oops.

725
00:38:47,500 --> 00:38:49,600
That's not, that's all what I wanted.

726
00:38:50,600 --> 00:38:54,300
Yeah, let me see what we actually call.

727
00:38:54,300 --> 00:38:55,000
What?

728
00:38:55,000 --> 00:38:56,500
We actually get out of render group.

729
00:38:56,500 --> 00:38:58,100
Do we get anything?

730
00:38:58,100 --> 00:38:59,900
So, we need the focal length.

731
00:39:00,800 --> 00:39:04,100
But that's okay because that's now in our transform, right?

732
00:39:04,200 --> 00:39:05,400
So we need the focal length.

733
00:39:05,400 --> 00:39:11,300
We need M to pixels which we have right and we have distance above

734
00:39:11,300 --> 00:39:13,200
Target, right?

735
00:39:14,700 --> 00:39:16,300
And then we also have screen center.

736
00:39:16,300 --> 00:39:22,100
So screen center is just transform monitor.

737
00:39:22,500 --> 00:39:23,600
That's that's

738
00:39:24,500 --> 00:39:28,100
Monitor half-demon m is not actually who actually is using that

739
00:39:28,300 --> 00:39:29,600
monitor half-demon.

740
00:39:29,600 --> 00:39:31,800
M, get camera rectal.

741
00:39:31,800 --> 00:39:32,100
Okay?

742
00:39:32,100 --> 00:39:37,300
So that that is actually a mistake that that I didn't mean to pull out

743
00:39:37,300 --> 00:39:39,000
that actually stays in here.

744
00:39:39,300 --> 00:39:41,100
So that's monitor half-demon.

745
00:39:41,100 --> 00:39:43,500
M, that's a different thing.

746
00:39:44,100 --> 00:39:45,400
Got a little overzealous there.

747
00:39:46,100 --> 00:39:49,400
So that actually wants to stay up here.

748
00:39:50,500 --> 00:39:51,200
So here we go.

749
00:39:51,700 --> 00:39:54,100
No Casey default transform.

750
00:39:56,300 --> 00:40:01,900
And so, what we want to do here is just have screen center like so so

751
00:40:01,900 --> 00:40:03,600
we want screen Center.

752
00:40:06,400 --> 00:40:09,100
And we want screen center, I assume we'll just be this.

753
00:40:10,500 --> 00:40:11,000
For now.

754
00:40:13,600 --> 00:40:14,100
Right.

755
00:40:15,300 --> 00:40:18,000
So we'll leave that like that but of course we can always modify it

756
00:40:18,000 --> 00:40:18,200
later.

757
00:40:18,200 --> 00:40:20,500
So the transfer has got that in there now and so if we pass them

758
00:40:20,500 --> 00:40:21,400
transform here,

759
00:40:24,900 --> 00:40:26,300
and,

760
00:40:28,700 --> 00:40:29,300
Render.

761
00:40:29,300 --> 00:40:31,100
Let's call that just render transform.

762
00:40:31,100 --> 00:40:33,000
I don't think we need to be rendered group transform.

763
00:40:33,600 --> 00:40:37,000
So if we said what the transfer was here, right?

764
00:40:37,000 --> 00:40:44,600
Like that, then really all that has to happen is we just need to to

765
00:40:44,600 --> 00:40:48,400
take in that the p-value there, right?

766
00:40:48,400 --> 00:40:54,700
Because entity basis, oops, entity basis was only used to get that

767
00:40:54,800 --> 00:40:56,200
that p-value, right?

768
00:40:58,700 --> 00:41:01,100
So there's the offset x y.

769
00:41:03,300 --> 00:41:04,000
Hmm.

770
00:41:07,100 --> 00:41:07,800
Hmm.

771
00:41:15,300 --> 00:41:18,200
Yeah, I mean, this is just a 3D position now, right?

772
00:41:18,800 --> 00:41:22,600
So entity based p is this value, right?

773
00:41:23,200 --> 00:41:27,800
And then entity base p is never actually used again.

774
00:41:28,200 --> 00:41:31,400
So we really just have a p-value, right?

775
00:41:31,600 --> 00:41:37,700
There's nothing wacky about it, so we should just be able to do this.

776
00:41:38,700 --> 00:41:39,200
Right.

777
00:41:39,400 --> 00:41:44,200
We should just be able to go ahead and get the the p-value indirectly.

778
00:41:44,500 --> 00:41:47,900
And if there's some kind of Z offset that someone wants to do, they

779
00:41:47,900 --> 00:41:49,300
just wouldn't pass it in here.

780
00:41:49,700 --> 00:41:51,300
I assume, right?

781
00:41:51,300 --> 00:41:54,700
They wouldn't they wouldn't consider it part of the get rendering

782
00:41:54,700 --> 00:41:56,100
databases part of things.

783
00:41:56,700 --> 00:41:59,200
So I think that's fine and we can just say, okay,

784
00:42:01,600 --> 00:42:03,000
You know, this is just peasy.

785
00:42:04,200 --> 00:42:06,900
Right, and this is just p x y.

786
00:42:09,300 --> 00:42:09,900
Like so.

787
00:42:12,500 --> 00:42:15,600
That seems good to me.

788
00:42:18,400 --> 00:42:26,400
I don't actually know why raw X Y gets constructed as that value of,

789
00:42:26,400 --> 00:42:26,700
okay?

790
00:42:26,700 --> 00:42:29,200
Because we wanted to see what the actual scale was.

791
00:42:29,300 --> 00:42:30,200
So that makes sense.

792
00:42:31,100 --> 00:42:32,300
So I think that's all good.

793
00:42:32,700 --> 00:42:34,200
That looks pretty reasonable to me.

794
00:42:34,800 --> 00:42:36,500
Let's reorganize this a little bit here.

795
00:42:36,700 --> 00:42:40,800
Screen center is now part of the transform, so that's that.

796
00:42:41,000 --> 00:42:46,100
Looks like this and now we've reorganized this routine to a reasonably

797
00:42:46,100 --> 00:42:49,200
good, you know, a reasonably good situation.

798
00:42:49,200 --> 00:42:53,700
So we compute everything off of just the transform and off we go.

799
00:42:55,600 --> 00:42:57,200
So, that seems pretty pretty reasonable.

800
00:42:57,600 --> 00:43:00,300
What that means is though, this actually has to have screen center in

801
00:43:00,300 --> 00:43:03,400
it, not monitor half dim in meters, that was just wrong.

802
00:43:04,200 --> 00:43:07,900
And then when we do the entity basis P result, right?

803
00:43:08,700 --> 00:43:10,200
When we have that happening,

804
00:43:11,300 --> 00:43:14,100
what that's going to do is we're going to pass that now different

805
00:43:14,100 --> 00:43:14,800
stuff.

806
00:43:15,000 --> 00:43:17,800
We're going to pass it the group transform, right?

807
00:43:18,200 --> 00:43:19,400
And it's going to use that.

808
00:43:19,900 --> 00:43:24,400
And then what we want to do is we want to take the sort of the

809
00:43:24,400 --> 00:43:25,600
position of this thing.

810
00:43:26,100 --> 00:43:29,500
We want to take that in as as like a p-value here.

811
00:43:29,800 --> 00:43:33,800
Now, the question is, do we want an offset in addition to the P value?

812
00:43:33,800 --> 00:43:36,600
Because there we could have an offset that gets passed in.

813
00:43:36,600 --> 00:43:38,100
That's not part of it, right?

814
00:43:38,100 --> 00:43:40,200
I don't know if we want to do that anymore.

815
00:43:40,200 --> 00:43:40,800
I think we were

816
00:43:40,900 --> 00:43:43,600
Kind of up in the air as to whether we were under that or not, but you

817
00:43:43,600 --> 00:43:46,800
can see where we would kind of do it in here if we want to.

818
00:43:46,800 --> 00:43:48,000
But, but anyway, so

819
00:43:49,500 --> 00:43:52,200
We're going to go ahead and put that in here like this.

820
00:43:53,400 --> 00:43:54,000
I guess you know what?

821
00:43:54,000 --> 00:43:58,500
I also have to do, which I forgot about is this P value here.

822
00:43:59,000 --> 00:44:02,800
This P value has to be adjusted based on the transform, right?

823
00:44:02,800 --> 00:44:06,100
Because the transform has an offset in it, right?

824
00:44:06,100 --> 00:44:07,700
And we're not actually using that right now.

825
00:44:09,200 --> 00:44:14,000
So this is like a pea or it, you know, original pee.

826
00:44:15,400 --> 00:44:22,100
And so we do actually still want to do that sort of stuff where we go,

827
00:44:22,800 --> 00:44:27,800
original p+ transform, offset P, so that allows us to move everything

828
00:44:27,800 --> 00:44:29,400
around with the Transformer if we want to.

829
00:44:32,400 --> 00:44:34,900
Um, let's see.

830
00:44:35,100 --> 00:44:37,300
Let us see here.

831
00:44:39,900 --> 00:44:40,500
All right.

832
00:44:40,600 --> 00:44:41,200
All right.

833
00:44:42,100 --> 00:44:43,100
So that's all good.

834
00:44:43,700 --> 00:44:45,800
I think for the most part,

835
00:44:47,100 --> 00:44:51,400
Let's take a look pixels to M pixels to meters.

836
00:44:52,400 --> 00:44:53,500
Where did my pixels to M?

837
00:44:53,500 --> 00:44:54,900
Go to, I accidentally deleted it.

838
00:44:54,900 --> 00:44:55,400
Didn't I?

839
00:45:01,700 --> 00:45:02,300
Horrible.

840
00:45:02,300 --> 00:45:02,700
Horrible.

841
00:45:02,700 --> 00:45:03,400
Horrible.

842
00:45:09,400 --> 00:45:10,400
Why did I do that?

843
00:45:10,500 --> 00:45:11,000
Alright.

844
00:45:11,300 --> 00:45:11,700
Well,

845
00:45:14,800 --> 00:45:16,400
meters to pixels.

846
00:45:20,200 --> 00:45:22,900
Go pixels to meters.

847
00:45:25,300 --> 00:45:26,300
And there we go.

848
00:45:27,500 --> 00:45:31,900
Okay, I guess I could also do a safe ratio one here.

849
00:45:35,700 --> 00:45:38,400
Just to make sure in case some weird totally bogus values.

850
00:45:38,400 --> 00:45:39,800
Got passed in.

851
00:45:42,600 --> 00:45:44,200
And let's see.

852
00:45:44,200 --> 00:45:48,300
So transform does not have an overloaded.

853
00:45:48,300 --> 00:45:48,800
You're right.

854
00:45:48,800 --> 00:45:51,900
It does not have an overloaded Arrow operator, because it's right in

855
00:45:51,900 --> 00:45:52,300
there.

856
00:45:52,800 --> 00:45:53,300
There we go.

857
00:45:54,400 --> 00:46:02,200
And we've got, let's see, offset P needs to be all zeros in a vector.

858
00:46:02,300 --> 00:46:06,200
It's not a scalar value and

859
00:46:07,600 --> 00:46:07,900
Oops.

860
00:46:08,000 --> 00:46:11,000
In fact, it's oh, although it should be.

861
00:46:11,100 --> 00:46:11,500
I don't know why.

862
00:46:11,500 --> 00:46:14,500
It wasn't a vector3, you should be able to offset stuff, however, you

863
00:46:14,500 --> 00:46:15,100
want really.

864
00:46:16,500 --> 00:46:22,800
All right, so that seems fine, push bitmap entry bitmap.

865
00:46:23,300 --> 00:46:25,400
That was just a, that was Scott.

866
00:46:25,400 --> 00:46:28,400
I think a cutting cut and paste error, there that should be up here,

867
00:46:28,400 --> 00:46:28,700
right?

868
00:46:28,700 --> 00:46:30,400
That was that should have been this.

869
00:46:30,800 --> 00:46:32,700
I think, I don't know why.

870
00:46:32,700 --> 00:46:35,000
I accidentally cut and paste the whole thing.

871
00:46:37,200 --> 00:46:41,200
So we come in here, we do push bitmap, we see whether it's valid.

872
00:46:41,200 --> 00:46:46,200
If it is, we come through here we need the size again like our size

873
00:46:46,200 --> 00:46:47,900
now needs to be scaled.

874
00:46:48,300 --> 00:46:52,300
So we have that that basis, that comes back.

875
00:46:52,300 --> 00:46:56,200
It's got the scale in it so we can go ahead and and, and multiply

876
00:46:56,200 --> 00:46:56,700
that.

877
00:46:57,500 --> 00:47:01,300
And then when we store the actual p-value, right?

878
00:47:03,300 --> 00:47:05,700
Offset minus V3 a line.

879
00:47:07,500 --> 00:47:07,900
Okay?

880
00:47:07,900 --> 00:47:09,400
So we need to do this stuff.

881
00:47:11,600 --> 00:47:12,000
We go.

882
00:47:12,800 --> 00:47:16,700
So we need to do this computation up here and then this is our actual

883
00:47:16,700 --> 00:47:18,800
P value that we're using, right?

884
00:47:18,800 --> 00:47:22,700
Here's our p-value that we're using and I guess this is technically

885
00:47:22,700 --> 00:47:23,400
offset.

886
00:47:23,600 --> 00:47:30,300
All right, so we need to do that alignment of the bitmap which is

887
00:47:30,300 --> 00:47:32,000
fine, right?

888
00:47:32,100 --> 00:47:34,500
Looks like we're just trying to align the bitmap there.

889
00:47:35,100 --> 00:47:37,400
So you do that alignment and then that's the thing that we're actually

890
00:47:37,400 --> 00:47:38,500
going to transform.

891
00:47:38,600 --> 00:47:39,800
So we transform it.

892
00:47:40,700 --> 00:47:46,900
And then, we actually just store that p-value now instead of instead,

893
00:47:46,900 --> 00:47:48,300
of doing anything fancy, right?

894
00:47:48,300 --> 00:47:51,800
And we don't need the scale anymore because the scale will just be

895
00:47:51,800 --> 00:47:55,400
baked in to the size and the size.

896
00:48:02,400 --> 00:48:05,200
Besides wants to be multiplied after the transform.

897
00:48:05,400 --> 00:48:07,000
So I think that's all correct.

898
00:48:07,000 --> 00:48:10,100
Now that will just basically do exactly what we did before, but it

899
00:48:10,100 --> 00:48:13,200
does it right now instead of waiting, right?

900
00:48:15,200 --> 00:48:20,400
So, here we have the same situation group, we've got the group

901
00:48:20,400 --> 00:48:21,100
transform.

902
00:48:22,400 --> 00:48:26,700
And then we pass the offset that does all of our camera work for us.

903
00:48:27,400 --> 00:48:30,200
We then go ahead and say shooting

904
00:48:38,200 --> 00:48:38,900
Hmm.

905
00:48:42,700 --> 00:48:44,900
So I guess we actually want to do this first, right?

906
00:48:51,400 --> 00:48:53,300
Yeah, so you want this to go ahead and happen.

907
00:48:53,300 --> 00:48:55,400
First, we want to say here is our P.

908
00:48:55,500 --> 00:49:00,300
This was the p-value that we're going to use like so and then we want

909
00:49:00,300 --> 00:49:01,300
to actually instead of.

910
00:49:01,300 --> 00:49:03,700
So we don't want to store this in here.

911
00:49:03,900 --> 00:49:08,000
We just want to store, not know why this is called peace.

912
00:49:08,500 --> 00:49:10,800
Seems kind of dumb is that

913
00:49:13,500 --> 00:49:18,800
So, we want to go ahead and record the scale and the result there, and

914
00:49:18,800 --> 00:49:21,100
this is going to take in that value.

915
00:49:21,900 --> 00:49:24,700
So, I think that's all good that again.

916
00:49:24,700 --> 00:49:27,700
Should we're just trying to reproduce what we had before but do

917
00:49:27,700 --> 00:49:28,600
everything in line.

918
00:49:29,600 --> 00:49:33,600
So here's the push bitmap, we don't store the basis anymore so we can

919
00:49:33,600 --> 00:49:35,000
just get rid of that entirely.

920
00:49:36,700 --> 00:49:40,300
Let's go ahead and see that.

921
00:49:41,400 --> 00:49:42,900
Coordinate system.

922
00:49:43,400 --> 00:49:46,700
So coordinate system, we're not really doing any more, we'll deal with

923
00:49:46,700 --> 00:49:48,900
that when we get to it, but I think we have 10 minutes left on the

924
00:49:48,900 --> 00:49:49,200
clock.

925
00:49:49,200 --> 00:49:50,800
If I remember, we started 10 minutes late.

926
00:49:51,300 --> 00:49:53,700
So I'm going to go through so I can finish up these code changes.

927
00:49:55,500 --> 00:50:01,900
Okay, so when we do this stuff like on project, so unprojected now do

928
00:50:01,900 --> 00:50:06,700
it with whatever the whatever the transform is that the group is using

929
00:50:06,800 --> 00:50:07,000
right?

930
00:50:07,000 --> 00:50:09,300
It should unprojected with the current transform.

931
00:50:10,000 --> 00:50:13,000
So that's just going to be doing this week.

932
00:50:13,000 --> 00:50:13,400
So,

933
00:50:16,600 --> 00:50:18,100
Oh well, hmm.

934
00:50:23,100 --> 00:50:24,700
Hmm.

935
00:50:29,900 --> 00:50:33,900
So this is where this is why we have the debug one, the debug camera

936
00:50:33,900 --> 00:50:35,500
and the regular camera in the renderer.

937
00:50:36,200 --> 00:50:39,900
So I kind of I got rid of that, but I wonder if we still want to do it

938
00:50:39,900 --> 00:50:43,400
because if that's the way I wonder if we want to do it this way where

939
00:50:43,400 --> 00:50:48,400
we, where we still do the to transforms and when we push them on, we

940
00:50:48,400 --> 00:50:49,600
change things, I'm not

941
00:50:51,300 --> 00:50:54,200
I'm not sure if we want to do that or not.

942
00:50:57,900 --> 00:50:59,400
It's a little dicey, right?

943
00:50:59,400 --> 00:50:59,800
Because

944
00:51:00,000 --> 00:51:06,000
Is as we are editing those adding in sort of that distance above

945
00:51:06,000 --> 00:51:06,700
Target.

946
00:51:06,700 --> 00:51:09,900
It's really the distance of a Target is and the offset of the only

947
00:51:09,900 --> 00:51:11,300
things we would changing.

948
00:51:11,900 --> 00:51:16,300
So I think we I think I want to do that slightly differently.

949
00:51:17,400 --> 00:51:19,800
I think I want to do that slightly differently so I'm going to I'm

950
00:51:19,800 --> 00:51:21,800
going to leave it like this for now and we're going to re-enable that

951
00:51:21,800 --> 00:51:22,000
later.

952
00:51:22,000 --> 00:51:23,700
So we're going to we're going to leave it like this for now.

953
00:51:25,700 --> 00:51:28,800
So let's go ahead and keep going here.

954
00:51:29,400 --> 00:51:33,900
We've got the transform that needs to be accessed here.

955
00:51:35,500 --> 00:51:37,900
And then we've got the render basis.

956
00:51:40,700 --> 00:51:44,600
See, so we don't need to do this anymore, right?

957
00:51:45,100 --> 00:51:47,700
This stuff is actually not that necessary.

958
00:51:47,700 --> 00:51:52,300
So when we push on these render basis, what we can do now, instead of

959
00:51:52,300 --> 00:51:55,100
having to do this, we can just actually pass these values in as the

960
00:51:55,100 --> 00:51:57,500
actual things that we want to use, right?

961
00:51:57,800 --> 00:52:00,500
Because they're not, they're not necessary at all anymore.

962
00:52:01,000 --> 00:52:02,400
I don't think so.

963
00:52:02,400 --> 00:52:04,700
Where is the, the default basis equals basis?

964
00:52:04,700 --> 00:52:05,600
Where is the actual?

965
00:52:05,600 --> 00:52:08,900
It's just pushing a random one on and putting them at Delta so we can

966
00:52:09,200 --> 00:52:10,500
I think we can literally now just do this.

967
00:52:10,600 --> 00:52:12,200
Just write for these guys.

968
00:52:14,600 --> 00:52:18,400
Like so and not have to do any of this stuff that stuff can just go

969
00:52:18,400 --> 00:52:22,500
away, which is good but we will need to set up so we'll need to do a

970
00:52:22,500 --> 00:52:26,000
thing here where we actually set up the camera, more more

971
00:52:26,000 --> 00:52:28,800
appropriately but I think that's that's basically it.

972
00:52:29,900 --> 00:52:33,700
Okay, so let's see, we got the render basis stuff happening here and

973
00:52:33,700 --> 00:52:37,100
going 200, again, that none of that actually needs to happen anymore.

974
00:52:37,100 --> 00:52:38,600
That can just be cleared out.

975
00:52:39,400 --> 00:52:40,400
So that's good.

976
00:52:41,200 --> 00:52:43,700
And none of this stuff needs to happen.

977
00:52:43,700 --> 00:52:44,200
Either that

978
00:52:44,400 --> 00:52:50,200
Go away and then here so really all that this is doing is doing that

979
00:52:50,200 --> 00:52:53,600
that that transferring to put things into the correct position.

980
00:52:53,600 --> 00:52:57,700
So all we would really have to do here is go ahead and set the render

981
00:52:57,700 --> 00:52:58,900
group, right?

982
00:52:59,400 --> 00:53:04,100
Set the transforms P offset key to be whatever the ground points

983
00:53:04,500 --> 00:53:06,100
location is right.

984
00:53:07,800 --> 00:53:09,600
So let's go ahead and do that.

985
00:53:09,800 --> 00:53:12,600
Now we probably missed a bunch of things up and that's totally fine.

986
00:53:15,000 --> 00:53:16,000
Oops, Sadat.

987
00:53:22,300 --> 00:53:23,600
What is the saying?

988
00:53:23,600 --> 00:53:27,900
What is wrong with my render group transform must have a class?

989
00:53:28,900 --> 00:53:29,800
What did I do?

990
00:53:32,100 --> 00:53:35,000
I want to access transform from my render group.

991
00:53:37,800 --> 00:53:41,200
Left of transform must have a class or cream and type as render group

992
00:53:41,200 --> 00:53:41,600
star.

993
00:53:41,600 --> 00:53:43,600
Oh, so it was a, it was a pointer.

994
00:53:44,000 --> 00:53:46,700
I guess it was only complaining about this one, my bad.

995
00:53:47,300 --> 00:53:49,500
So I don't suspect that this is going to work at all.

996
00:53:51,400 --> 00:53:51,800
Well,

997
00:53:53,000 --> 00:53:56,300
How is it possible that every time I think there's no way something is

998
00:53:56,300 --> 00:53:58,500
going to work and we make a ton of code changes.

999
00:53:58,500 --> 00:53:59,700
It totally works.

1000
00:54:00,800 --> 00:54:02,800
That's just weird.

1001
00:54:05,800 --> 00:54:09,700
Okay, well, I guess it worked.

1002
00:54:11,700 --> 00:54:14,600
All of those changes and it worked right the first time.

1003
00:54:16,000 --> 00:54:16,700
Okay.

1004
00:54:17,500 --> 00:54:19,900
I think there's still something wrong though, because you see there's

1005
00:54:19,900 --> 00:54:21,000
that orange.

1006
00:54:21,000 --> 00:54:22,800
I don't know why that orange thing is there.

1007
00:54:22,800 --> 00:54:25,100
So I'm not sure what's going on with that.

1008
00:54:25,100 --> 00:54:25,900
Exactly.

1009
00:54:27,800 --> 00:54:30,100
So there might be something strange happening there.

1010
00:54:30,200 --> 00:54:33,700
I don't know, that's probably just offset stuff.

1011
00:54:33,900 --> 00:54:37,200
Anyway, I am shocked at that worked.

1012
00:54:39,000 --> 00:54:41,600
We should have at least had something serious go wrong in there.

1013
00:54:41,600 --> 00:54:42,100
We didn't.

1014
00:54:42,100 --> 00:54:44,100
That's good, I guess.

1015
00:54:45,100 --> 00:54:45,800
But that is.

1016
00:54:45,900 --> 00:54:46,900
Yes, very strange.

1017
00:54:47,300 --> 00:54:50,500
So what I was going to say before is I was thinking that perhaps what

1018
00:54:50,500 --> 00:54:54,500
I should do is I should make the render transform stuff, work a little

1019
00:54:54,500 --> 00:54:57,500
bit differently for the debug where it would just take distance above

1020
00:54:57,500 --> 00:55:01,000
Target and if it was in a debug scenario would add to it.

1021
00:55:01,300 --> 00:55:05,000
I'm not sure if I like that or not but I'm trying to think of a way.

1022
00:55:05,000 --> 00:55:07,900
I want people to be able to work with the transforms and

1023
00:55:08,700 --> 00:55:10,500
You know, be able to work with them directly and they only get

1024
00:55:10,500 --> 00:55:12,400
modified in a debug scenario.

1025
00:55:12,400 --> 00:55:13,800
Like after the fact

1026
00:55:15,100 --> 00:55:19,800
So I'm not totally sure what I want to do there.

1027
00:55:20,400 --> 00:55:24,900
I'm not, I'm just not totally sure, but I'll I think you know what I

1028
00:55:24,900 --> 00:55:28,800
was thinking is something like taking this distance above Target and

1029
00:55:28,800 --> 00:55:30,300
saying, you know, okay?

1030
00:55:31,100 --> 00:55:36,900
You know, distance above Target equals that right?

1031
00:55:38,000 --> 00:55:43,000
And then this could be picked out of a different location, right?

1032
00:55:43,100 --> 00:55:47,500
So distance above Target could actually be modified in some way.

1033
00:55:48,400 --> 00:55:51,600
You know, if debug camera

1034
00:55:53,400 --> 00:55:59,400
Distance above Target, you know, you just were much higher than we

1035
00:55:59,400 --> 00:56:02,600
would normally be or something like that, you know, stuff like that.

1036
00:56:02,700 --> 00:56:04,500
I don't know if that's a good idea or not.

1037
00:56:05,100 --> 00:56:09,500
I'm not I'm not sold on it but you know, that would be one way of

1038
00:56:09,500 --> 00:56:11,400
getting our debug camera back.

1039
00:56:12,700 --> 00:56:13,200
Right?

1040
00:56:13,800 --> 00:56:14,400
So,

1041
00:56:20,500 --> 00:56:21,100
Yeah.

1042
00:56:23,300 --> 00:56:24,600
So that's all fine.

1043
00:56:31,500 --> 00:56:32,000
Yeah.

1044
00:56:36,600 --> 00:56:37,800
Yeah.

1045
00:56:43,400 --> 00:56:45,700
It's kind of funny watching a little dude, walk around in here.

1046
00:56:50,500 --> 00:56:52,300
This is going to be a pretty sweet game engine.

1047
00:56:53,000 --> 00:56:57,900
I gotta say since it does everything without like much in the way of

1048
00:56:57,900 --> 00:56:58,700
the limits

1049
00:57:00,000 --> 00:57:01,000
It's going to be kind of fun.

1050
00:57:01,100 --> 00:57:04,900
I wonder if anyone will ever actually play a world.

1051
00:57:04,900 --> 00:57:06,200
That's huge.

1052
00:57:08,100 --> 00:57:10,500
I see, I suspect, I mean, I don't know.

1053
00:57:10,500 --> 00:57:12,300
I'm just thinking this is probably true.

1054
00:57:12,300 --> 00:57:13,200
I don't really know.

1055
00:57:14,900 --> 00:57:18,500
But I suspect that if we make it so that you can say, I want you to

1056
00:57:18,500 --> 00:57:23,900
generate me a world that will take me six months to complete somebody

1057
00:57:24,100 --> 00:57:24,700
at some point.

1058
00:57:24,700 --> 00:57:29,200
We'll do it like one dude or something.

1059
00:57:30,500 --> 00:57:32,200
But yeah, okay.

1060
00:57:33,900 --> 00:57:35,800
So I'm going to put a little to do in here.

1061
00:57:45,700 --> 00:57:47,600
But we want to keep that.

1062
00:57:47,700 --> 00:57:48,500
Keep that going.

1063
00:57:50,300 --> 00:57:52,100
All right, so I'm going to go ahead and go to the Q&A.

1064
00:57:52,200 --> 00:57:52,900
I think we're right.

1065
00:57:52,900 --> 00:57:55,900
A little maybe two minutes early, but that's fine.

1066
00:57:56,700 --> 00:57:58,300
I'm going to go ahead and go to the Q&A.

1067
00:58:01,500 --> 00:58:03,400
And and take any questions.

1068
00:58:04,100 --> 00:58:04,300
I think.

1069
00:58:04,300 --> 00:58:06,300
We've got everything organized relatively well.

1070
00:58:06,300 --> 00:58:06,700
Now,

1071
00:58:09,600 --> 00:58:10,400
And so that's good.

1072
00:58:10,400 --> 00:58:14,100
That'll allow me to kind of go ahead and now go through and finish up

1073
00:58:14,100 --> 00:58:19,300
the rest of the coordinate system stuff and and it'll be pretty in

1074
00:58:19,300 --> 00:58:26,200
line with what we would want to do for for Hardware rendering as well.

1075
00:58:34,500 --> 00:58:39,100
Please remember to prefix your questions with Q: so I can see them by

1076
00:58:39,100 --> 00:58:39,300
the way.

1077
00:58:56,400 --> 00:58:57,400
No questions today.

1078
00:59:04,800 --> 00:59:07,800
surgery, everything works the first time because you think out loud

1079
00:59:07,900 --> 00:59:08,800
we've been in but

1080
00:59:10,400 --> 00:59:11,500
Not everything works.

1081
00:59:11,500 --> 00:59:13,100
The first time, that's the thing.

1082
00:59:13,700 --> 00:59:19,300
Oftentimes stuff doesn't work the first time on the stream but they're

1083
00:59:19,300 --> 00:59:19,600
not.

1084
00:59:19,600 --> 00:59:22,800
The things that I think are not going to work the first time, right?

1085
00:59:22,900 --> 00:59:25,300
And then when I do think, something's not going to work the first time

1086
00:59:25,300 --> 00:59:26,700
it does which is odd.

1087
00:59:27,700 --> 00:59:30,600
I guess I've just because my brain is is thinking something's

1088
00:59:30,600 --> 00:59:31,200
complicated.

1089
00:59:31,200 --> 00:59:34,400
So it's paying more attention to it and is less likely to screw it up.

1090
00:59:34,500 --> 00:59:37,100
Then in the case where it, you know, well, I don't know.

1091
00:59:50,900 --> 00:59:51,500
Let's see.

1092
00:59:51,500 --> 00:59:54,500
Here does the Yellow Part represent the loaded bitmaps?

1093
00:59:55,200 --> 00:59:58,800
Well, so yellow was just what we were writing in there because we were

1094
00:59:59,100 --> 00:59:59,800
before ground.

1095
01:00:00,000 --> 01:00:00,700
Purposes.

1096
01:00:00,900 --> 01:00:01,900
I can turn those back on.

1097
01:00:01,900 --> 01:00:05,400
Actually, in fact, we're tomorrow, we can turn this back on

1098
01:00:05,400 --> 01:00:08,200
permanently I think because we will

1099
01:00:09,800 --> 01:00:13,500
We will no longer have the problem of having to turn them off, for

1100
01:00:13,500 --> 01:00:14,500
testing purposes.

1101
01:00:15,300 --> 01:00:18,800
But they're, they're basically this Phil ground chunk thing.

1102
01:00:19,300 --> 01:00:20,400
That's what the yellow is.

1103
01:00:20,400 --> 01:00:22,700
It was just showing where those things were not happening at the

1104
01:00:22,700 --> 01:00:24,000
moment, right?

1105
01:00:24,600 --> 01:00:28,200
And so these, These Guys, these things

1106
01:00:29,500 --> 01:00:30,100
Right.

1107
01:00:31,600 --> 01:00:35,700
So so we are kind of in a position where we need to.

1108
01:00:36,800 --> 01:00:39,200
They were sort of the big there.

1109
01:00:39,200 --> 01:00:42,300
The big thing that's left in the engine, not the ground chunk

1110
01:00:42,300 --> 01:00:46,400
specifically but like the sorting and the depth stuff and how we deal

1111
01:00:46,400 --> 01:00:51,100
with those Z's and how that all ties into lighting is like the big.

1112
01:00:51,300 --> 01:00:56,800
Is this the only real giant thing left in our in our to dues?

1113
01:00:57,200 --> 01:00:58,200
If that makes sense

1114
01:01:00,100 --> 01:01:06,100
So yeah, so I need to fix the the 2D.

1115
01:01:06,300 --> 01:01:09,100
So I did break something when we went to it, which is that?

1116
01:01:09,100 --> 01:01:14,300
I, I'm treating the, the Z, offsets all the same now, which I guess we

1117
01:01:14,300 --> 01:01:16,000
don't want to do, right?

1118
01:01:16,000 --> 01:01:18,600
Because you can see the head as it floats up and down.

1119
01:01:18,600 --> 01:01:25,100
It actually is moving, you know, it's moving, laterally, as well.

1120
01:01:25,300 --> 01:01:28,600
Which I think we were saying we didn't want to do, but I don't know.

1121
01:01:28,800 --> 01:01:29,600
Back and forth on it.

1122
01:01:29,600 --> 01:01:33,200
I never really know what we want to do, what we don't want to do, but

1123
01:01:33,200 --> 01:01:34,400
we'll take a look at it tomorrow.

1124
01:01:36,200 --> 01:01:38,200
These guys are placeholders for a stairwell.

1125
01:01:40,800 --> 01:01:42,600
So yeah, but we wanted these things to be.

1126
01:01:43,100 --> 01:01:45,700
I think to stay on top of each other with the idea.

1127
01:01:48,300 --> 01:01:50,200
So, yeah, so I'm not sure what we're going to do with that.

1128
01:01:51,500 --> 01:01:52,400
It's going to be dicey.

1129
01:01:53,900 --> 01:01:55,300
But I really love the scaling.

1130
01:01:55,500 --> 01:01:58,200
I love the scaling so much that we're going to figure out a way to

1131
01:01:58,200 --> 01:02:01,100
make it work with the art.

1132
01:02:01,200 --> 01:02:04,100
I don't know what we'll have to do but we'll figure it out because I

1133
01:02:04,100 --> 01:02:07,200
really want to be able to walk up and down a stairwell and have stuff

1134
01:02:07,200 --> 01:02:08,300
get bigger like that.

1135
01:02:09,000 --> 01:02:13,300
It's just too darn cool to not have.

1136
01:02:13,700 --> 01:02:16,300
So I feel like we have to have it.

1137
01:02:21,400 --> 01:02:23,700
What does it mean to invalidate cache?

1138
01:02:24,900 --> 01:02:25,700
So

1139
01:02:31,200 --> 01:02:34,700
You'll have to take this explanation with a bit of a grain of salt

1140
01:02:34,700 --> 01:02:39,400
because I am not really that knowledgeable about CPU, Hardware.

1141
01:02:39,400 --> 01:02:42,900
These days, I really just don't know very much about how it works

1142
01:02:42,900 --> 01:02:43,400
internally.

1143
01:02:43,400 --> 01:02:48,100
So I can only kind of give you a sort of rough overview of what

1144
01:02:48,100 --> 01:02:49,100
probably happens.

1145
01:02:49,100 --> 01:02:53,000
And if you really want to know the exact specifics of any of it, you

1146
01:02:53,000 --> 01:02:54,200
will have to do additional reading.

1147
01:02:54,200 --> 01:02:58,100
I'm afraid or ask someone who didn't tell for a good explanation.

1148
01:02:59,300 --> 01:02:59,800
So,

1149
01:03:00,300 --> 01:03:03,100
What happens if the cash, right?

1150
01:03:05,200 --> 01:03:07,200
Let's say we have core zeros, cashier.

1151
01:03:08,200 --> 01:03:08,800
Right?

1152
01:03:09,800 --> 01:03:12,400
And I'm not going to draw L1 and L2 and L3.

1153
01:03:12,400 --> 01:03:18,100
I'm just going to say that we have, you know, two caches of some kind

1154
01:03:18,100 --> 01:03:18,900
for these cores.

1155
01:03:19,100 --> 01:03:21,200
Well, I'm just trying to give, like I said, I don't know the specifics

1156
01:03:21,200 --> 01:03:25,000
well enough to make explaining it at that level of detail worth

1157
01:03:25,000 --> 01:03:27,600
anything, because it would just be, it would still be more just more

1158
01:03:27,600 --> 01:03:28,500
hand-waving, right?

1159
01:03:30,500 --> 01:03:31,700
So, here's the CPU.

1160
01:03:33,900 --> 01:03:36,400
And here's a register, right?

1161
01:03:36,700 --> 01:03:39,000
So typically what we're going to do is we're going to issue something

1162
01:03:39,000 --> 01:03:42,500
like a move instruction and the move instruction is going to grab

1163
01:03:42,500 --> 01:03:45,400
something from the cash, and it's going to bring it into the register

1164
01:03:45,400 --> 01:03:46,200
of the CPU.

1165
01:03:46,800 --> 01:03:50,100
It's going to be worked on here and then it's going to go back out,

1166
01:03:50,200 --> 01:03:50,700
right?

1167
01:03:52,500 --> 01:03:58,200
So, what happens in this in this actual scenario is that main memory

1168
01:03:58,200 --> 01:04:03,100
is what actually stores the definitive contents, right of stuff that

1169
01:04:03,100 --> 01:04:04,400
is not in the cache.

1170
01:04:05,200 --> 01:04:07,500
So there's a lot more here.

1171
01:04:07,500 --> 01:04:11,500
This is, you know, this is 16 gigabytes or something, right?

1172
01:04:11,700 --> 01:04:16,400
And this cash is maybe only 256 k or something, right?

1173
01:04:16,400 --> 01:04:18,300
So this is very tiny, right?

1174
01:04:18,300 --> 01:04:19,700
And here's another 256k.

1175
01:04:20,700 --> 01:04:23,200
These are very tiny compared to this thing.

1176
01:04:25,300 --> 01:04:29,000
Okay, and so here's I shouldn't say CPU, I should say.

1177
01:04:29,600 --> 01:04:31,600
In fact, I don't really know why I drew it this way.

1178
01:04:31,600 --> 01:04:33,800
This is a dumb, the dumb drawing.

1179
01:04:35,400 --> 01:04:36,600
Dumb drawing.

1180
01:04:40,600 --> 01:04:41,100
All right.

1181
01:04:42,200 --> 01:04:42,900
Try that again.

1182
01:04:47,400 --> 01:04:49,900
So here's core zero register.

1183
01:04:52,600 --> 01:04:54,800
And here's core one register.

1184
01:04:57,600 --> 01:05:01,000
so, what happens is you go out there and there are some location in

1185
01:05:01,000 --> 01:05:03,300
memory and let's call that location a

1186
01:05:05,200 --> 01:05:10,000
So, at some point, the CPU says, I want to move location a into this

1187
01:05:10,000 --> 01:05:10,800
register, right?

1188
01:05:10,800 --> 01:05:11,900
Core zero says that.

1189
01:05:12,100 --> 01:05:15,400
So it goes out to the cash and it asks, the cash for location a.

1190
01:05:15,400 --> 01:05:20,900
It's like, I need to load location a and with the cash says, is, it's

1191
01:05:20,900 --> 01:05:24,100
like, oh, I don't have location a, right?

1192
01:05:24,400 --> 01:05:29,000
So it goes out to memory and it grabs location, a, and it brings it

1193
01:05:29,000 --> 01:05:31,200
back in here and sticks it in here.

1194
01:05:31,400 --> 01:05:34,300
And now the contents of location a living here, okay?

1195
01:05:35,100 --> 01:05:38,700
It marks it with some Flags, it knows that this is a value that's

1196
01:05:38,700 --> 01:05:40,400
potentially shared, right?

1197
01:05:40,400 --> 01:05:40,800
Or something.

1198
01:05:40,800 --> 01:05:42,500
Let's say maybe someone else has it.

1199
01:05:42,500 --> 01:05:43,200
I'm not sure.

1200
01:05:43,300 --> 01:05:45,700
It could be marked as exclusive when I bring it in because nobody else

1201
01:05:45,700 --> 01:05:46,100
has it.

1202
01:05:46,100 --> 01:05:47,300
I don't know, right?

1203
01:05:47,800 --> 01:05:49,600
So something happens here.

1204
01:05:51,800 --> 01:05:52,800
It's Mark with those flags.

1205
01:05:52,800 --> 01:05:55,200
These are the meze flags that's talking about.

1206
01:05:55,900 --> 01:05:58,400
So it's Mark with some Flags when it first gets loaded in, we have

1207
01:05:58,400 --> 01:05:59,800
location a and then says, okay, now I

1208
01:06:00,000 --> 01:06:02,600
You location a and we put it into the register.

1209
01:06:04,100 --> 01:06:05,500
Now what happens is core.

1210
01:06:05,500 --> 01:06:08,000
One also wants to do that load.

1211
01:06:08,500 --> 01:06:13,400
So it goes out to its cash and it says, hey man, like I need location

1212
01:06:13,400 --> 01:06:15,300
a and it doesn't have it either.

1213
01:06:15,300 --> 01:06:18,200
So it goes out and gets it from here, right?

1214
01:06:20,300 --> 01:06:21,400
Actually, that's not true.

1215
01:06:21,800 --> 01:06:25,500
It first does a snoop to see if anyone else has that in.

1216
01:06:25,600 --> 01:06:29,600
I suppose without going to main memory and it finds that cache 0 has,

1217
01:06:29,600 --> 01:06:32,900
it is what actually would happen, and presumably it would get it from

1218
01:06:32,900 --> 01:06:33,200
there.

1219
01:06:33,900 --> 01:06:35,300
It get it from core zeros cash.

1220
01:06:35,300 --> 01:06:37,900
It would stick it in here and now these guys would both be marked as

1221
01:06:37,900 --> 01:06:39,700
sharing this cache line, right?

1222
01:06:39,700 --> 01:06:41,200
So they're both sharing it.

1223
01:06:42,200 --> 01:06:44,800
And what that means is they can both operated on it, just fine,

1224
01:06:45,100 --> 01:06:47,500
everyone's reading from it, they read from it, lots of times.

1225
01:06:47,500 --> 01:06:48,700
They move it into a register.

1226
01:06:48,700 --> 01:06:49,400
They do some stuff.

1227
01:06:49,400 --> 01:06:51,700
They move it in to register again leader, who knows what they do?

1228
01:06:51,800 --> 01:06:56,800
But then what happens is somebody rights to it, okay?

1229
01:06:58,400 --> 01:07:03,600
So core zero goes, I need to move something to location a.

1230
01:07:03,800 --> 01:07:06,700
So instead of moving from location a, I'm moving to it.

1231
01:07:06,700 --> 01:07:07,500
I'm not moving from it.

1232
01:07:07,500 --> 01:07:08,300
I'm moving to it.

1233
01:07:09,300 --> 01:07:11,700
What happens then is the cash goes up.

1234
01:07:11,800 --> 01:07:15,900
Okay well unfortunately I'm sharing cache line.

1235
01:07:16,100 --> 01:07:22,300
A I'm sharing memory location a with a cache line, in Core 1.

1236
01:07:22,900 --> 01:07:26,900
So what I first need to do is I need to announce essentially that I'm

1237
01:07:26,900 --> 01:07:27,700
going to write to it.

1238
01:07:27,700 --> 01:07:28,700
So what happens is?

1239
01:07:28,700 --> 01:07:32,400
I change it to exclusive and I let everyone know that I haven't made

1240
01:07:32,400 --> 01:07:35,100
it exclusive so they now get marked invalid.

1241
01:07:35,700 --> 01:07:36,200
Okay.

1242
01:07:37,600 --> 01:07:40,000
That is what is meant by invalidating the cache line?

1243
01:07:40,600 --> 01:07:45,300
It's saying this cache line this thing that I've got stored here, no

1244
01:07:45,300 --> 01:07:50,700
longer accurately reflects what the location, the value of location a

1245
01:07:51,100 --> 01:07:53,900
is as far as the CPUs are concerned in this machine.

1246
01:07:55,800 --> 01:07:59,600
This cord then go ahead and rights to it, which changes it from E2 M,

1247
01:07:59,600 --> 01:08:01,300
which is modified, right?

1248
01:08:01,300 --> 01:08:02,700
So out comes the value.

1249
01:08:02,700 --> 01:08:07,100
The new value gets placed in here and then the next time core one goes

1250
01:08:07,100 --> 01:08:08,200
to read from this.

1251
01:08:08,400 --> 01:08:08,900
It goes.

1252
01:08:08,900 --> 01:08:11,100
Hey, give me that cache line and it goes sorry.

1253
01:08:11,100 --> 01:08:13,300
My friend cache line is not in there.

1254
01:08:13,600 --> 01:08:14,800
I gotta go get it again.

1255
01:08:14,800 --> 01:08:18,700
So it's snoops the cache again, gets the new modified value puts it

1256
01:08:18,700 --> 01:08:18,800
in.

1257
01:08:18,800 --> 01:08:21,600
Here is shared this guy comes back to shared and we're all good.

1258
01:08:22,100 --> 01:08:25,000
I believe that's roughly what happens, like I said.

1259
01:08:25,399 --> 01:08:28,100
Don't know, messy worth a darn.

1260
01:08:28,600 --> 01:08:32,100
So basically, you will have to go read about it if you want the actual

1261
01:08:32,100 --> 01:08:35,800
set of steps that goes in there, but it's something along those lines.

1262
01:08:36,100 --> 01:08:40,600
So invalidating the cash is that step where you had a value, you could

1263
01:08:40,600 --> 01:08:44,700
have used, but then it became invalid because somebody else wrote to

1264
01:08:44,700 --> 01:08:46,600
the line behind your back, right?

1265
01:08:58,000 --> 01:08:58,800
Could you summarize?

1266
01:08:58,800 --> 01:08:59,800
What you did tonight?

1267
01:09:00,000 --> 01:09:01,700
And a little hard to follow along.

1268
01:09:01,899 --> 01:09:04,800
Yeah so what we did tonight was really really straightforward.

1269
01:09:05,700 --> 01:09:07,100
It just involved a lot of typing

1270
01:09:08,300 --> 01:09:11,399
Previously, what we were doing is here is our render buffer.

1271
01:09:16,700 --> 01:09:20,399
Previously, what we were doing is we're saying, okay, we're going to

1272
01:09:20,399 --> 01:09:22,800
push in, you know, essentially a transform.

1273
01:09:22,800 --> 01:09:24,500
We call this The Entity basis.

1274
01:09:26,600 --> 01:09:31,700
And then we're going to pass in, you know, bitmaps bitmap records.

1275
01:09:32,300 --> 01:09:34,700
And these are just records that say, you know, what's the bitmap to

1276
01:09:34,700 --> 01:09:35,800
draw and whatever.

1277
01:09:35,800 --> 01:09:39,000
And these guys would refer to some basis, right?

1278
01:09:39,899 --> 01:09:43,300
Then when we actually went to render, we would combine these two at

1279
01:09:43,300 --> 01:09:48,500
render time and say, okay, at render time, figure out where the bitmap

1280
01:09:48,500 --> 01:09:52,100
is by using the basis we pushed on before, which is like a transform

1281
01:09:52,100 --> 01:09:56,200
thing and the actual offset and stuff that we stored in the bitmap.

1282
01:09:56,400 --> 01:10:01,800
And produce, you know, an actual position in an actual rectangle in

1283
01:10:01,800 --> 01:10:02,800
space, on the screen.

1284
01:10:02,900 --> 01:10:05,700
You know, it's like here, this is where the bitmap actually happens,

1285
01:10:05,900 --> 01:10:06,400
right?

1286
01:10:07,900 --> 01:10:08,900
That's what we were doing.

1287
01:10:09,400 --> 01:10:13,100
What we change to doing is saying, let's not do that anymore, let's

1288
01:10:13,100 --> 01:10:14,400
have the render group.

1289
01:10:14,400 --> 01:10:18,000
So here's the render group store, a transform in it.

1290
01:10:18,000 --> 01:10:21,000
That's whatever the current Transformers at the time and then the

1291
01:10:21,000 --> 01:10:24,900
render buffer the the sort of the push buffer, right?

1292
01:10:25,500 --> 01:10:29,100
Instead of ever pushing on these bases, it just pushes on bitmaps and

1293
01:10:29,100 --> 01:10:34,000
at the time when the bitmap is pushed on it does this operation here

1294
01:10:34,000 --> 01:10:37,500
that the actual like whatever you want to call this operation, where

1295
01:10:37,500 --> 01:10:37,500
we

1296
01:10:37,800 --> 01:10:38,500
Transform.

1297
01:10:38,600 --> 01:10:42,800
It does it right at the push time and then just stores the result of

1298
01:10:42,800 --> 01:10:47,200
this instead of storing, the all of the data needed to reconstruct it.

1299
01:10:47,900 --> 01:10:50,200
So I just wanted to get that done for efficiency purposes.

1300
01:10:50,200 --> 01:10:54,700
I wanted all the transforms to happen there so that's all we did is is

1301
01:10:54,800 --> 01:10:59,200
change from Adelaide transform to a push time, transform, that's it.

1302
01:11:01,100 --> 01:11:02,300
Can you explain what is meant?

1303
01:11:02,300 --> 01:11:05,500
When one says, something is done, see, really sure.

1304
01:11:05,500 --> 01:11:10,100
See really means that things have to happen in order, right in.

1305
01:11:10,100 --> 01:11:12,200
They have to wait for each other, right?

1306
01:11:12,300 --> 01:11:14,600
So if I have here, are my steps

1307
01:11:15,900 --> 01:11:21,700
I have a b c and d Kira, the ways I could do that cereal.

1308
01:11:23,000 --> 01:11:30,200
Would be a b c d, and these would happen at various times.

1309
01:11:30,200 --> 01:11:35,600
This is x equals 0 x equals 1 x equals to x equals 3, right?

1310
01:11:35,600 --> 01:11:36,200
They happen.

1311
01:11:37,600 --> 01:11:38,300
Parallel.

1312
01:11:39,400 --> 01:11:41,600
Is the other way not cereal.

1313
01:11:41,900 --> 01:11:45,800
And what happens there is, I have time equals 0, ABC, and D.

1314
01:11:45,800 --> 01:11:48,100
If they were happening in, parallel can all happen at the same time?

1315
01:11:48,700 --> 01:11:53,600
Now, maybe they don't all complete at the same time, you know?

1316
01:11:53,600 --> 01:11:56,400
Maybe some take longer than others but the point is, they can all

1317
01:11:56,400 --> 01:11:59,800
start at the same time, they have to wait for each other, right?

1318
01:12:00,000 --> 01:12:04,800
Whereas here and I probably should say time equals 0 x equals a time

1319
01:12:04,800 --> 01:12:06,200
equals a plus b.

1320
01:12:06,600 --> 01:12:09,400
Time equals a plus b plus C, right.

1321
01:12:09,500 --> 01:12:13,500
Meaning D won't start until all of a finished, all of be finished and

1322
01:12:13,500 --> 01:12:15,800
all of CSUN if see finished in order.

1323
01:12:16,100 --> 01:12:17,800
So a can't start up.

1324
01:12:17,800 --> 01:12:21,500
So a starts, then B has to wait for a to finish before it can start

1325
01:12:21,500 --> 01:12:24,600
then Siesta wait for be to finish which means it also had to wait for

1326
01:12:24,600 --> 01:12:27,600
a to finish because a be couldn't start to lay finished and blah blah

1327
01:12:27,600 --> 01:12:27,900
blah.

1328
01:12:28,000 --> 01:12:29,800
So this takes a lot longer because each

1329
01:12:30,000 --> 01:12:31,000
Thing has to wait for each other.

1330
01:12:31,000 --> 01:12:32,300
Whereas parallel.

1331
01:12:32,500 --> 01:12:38,000
One way to say it is cereal takes the time of all the things added up

1332
01:12:38,100 --> 01:12:38,800
right?

1333
01:12:38,900 --> 01:12:43,300
Where as parallel takes the maximum of whatever the times were right.

1334
01:12:43,400 --> 01:12:46,600
So whichever one takes the longest is the is the amount of time that a

1335
01:12:46,600 --> 01:12:48,300
parallel thing would take, right?

1336
01:13:13,700 --> 01:13:16,300
I missed a bit of the stream after you removed scale.

1337
01:13:16,300 --> 01:13:18,600
Didn't you use that for scaling by Z?

1338
01:13:18,800 --> 01:13:21,700
So, yeah, we just didn't need to store it anymore.

1339
01:13:21,700 --> 01:13:23,500
So we do we preserved.

1340
01:13:23,500 --> 01:13:25,000
It pseudonym.

1341
01:13:25,400 --> 01:13:26,900
We preserved it in.

1342
01:13:30,600 --> 01:13:32,500
Where is it in here?

1343
01:13:32,600 --> 01:13:37,400
So the render transform sets the scale and then never get stored in

1344
01:13:37,400 --> 01:13:39,000
the actual render buffer ever.

1345
01:13:39,200 --> 01:13:43,700
What happens is at the push time, we compute what the scale is at push

1346
01:13:43,700 --> 01:13:46,300
time, and then just store the dimensions, pre scaled.

1347
01:13:46,400 --> 01:13:48,300
So that we don't have to keep scale anywhere.

1348
01:13:49,000 --> 01:13:51,900
So, when we compute this scale like you can see in here

1349
01:13:53,000 --> 01:13:57,800
when we do a push bitmap, we do the scale right in here, right?

1350
01:13:59,000 --> 01:14:02,100
And we and everything does get Scaled P, get Scaled as well, but like

1351
01:14:02,100 --> 01:14:03,500
we store the pee, right?

1352
01:14:03,500 --> 01:14:05,700
So we just don't store the scale anymore because we don't need it

1353
01:14:05,700 --> 01:14:07,500
anymore after we've pushed the value.

1354
01:14:07,500 --> 01:14:09,000
We just bake everything in

1355
01:14:27,500 --> 01:14:30,200
What's happening between staircase passing in the bitmaps.

1356
01:14:30,200 --> 01:14:32,200
It is simple scaling based on the Z axis.

1357
01:14:32,700 --> 01:14:33,000
Yes.

1358
01:14:33,000 --> 01:14:37,900
So I think what I did here and I have to again, we go back and forth

1359
01:14:37,900 --> 01:14:40,400
on this so many times and it's just, it's the 2D art thing.

1360
01:14:41,000 --> 01:14:44,800
It's always hard to really know what the right thing to do is but get

1361
01:14:44,800 --> 01:14:46,200
entity basis p.

1362
01:14:48,500 --> 01:14:50,600
Where's that get tea?

1363
01:14:53,000 --> 01:14:54,400
Render entity base speed.

1364
01:14:57,100 --> 01:14:59,300
So, when we were doing this, right?

1365
01:15:01,100 --> 01:15:02,700
And we pass in that offset.

1366
01:15:02,700 --> 01:15:07,700
I think the thing is the, the P value actually shouldn't offset this

1367
01:15:07,700 --> 01:15:09,600
Z, right?

1368
01:15:09,800 --> 01:15:12,700
I think is what we want.

1369
01:15:14,300 --> 01:15:21,000
So, like original P, if that makes sense, original peas, Z offset

1370
01:15:21,000 --> 01:15:27,400
should only be taken into account to move the X Y to move, the Y of

1371
01:15:27,400 --> 01:15:30,400
the guy or something absurd like this.

1372
01:15:33,900 --> 01:15:38,400
So I think, you know what, we wanted, if this makes sense is this.

1373
01:15:44,700 --> 01:15:48,700
Right to knock out that Z value.

1374
01:15:48,700 --> 01:15:57,300
And then after the P transform happens right after the P transform

1375
01:15:57,300 --> 01:16:02,200
happens, we would take the scale, I guess.

1376
01:16:03,000 --> 01:16:07,800
And we would add the scale in

1377
01:16:10,300 --> 01:16:13,400
So in addition to the projected X Y, right?

1378
01:16:13,800 --> 01:16:17,100
We would add additional, why based on that p-value.

1379
01:16:17,100 --> 01:16:21,800
So it's, you know, I want to say, it's something like this result

1380
01:16:21,800 --> 01:16:24,500
thought scale x times.

1381
01:16:24,500 --> 01:16:28,200
Original P .z, right?

1382
01:16:28,200 --> 01:16:29,400
So it's going to go up.

1383
01:16:41,700 --> 01:16:46,100
I don't know if that's correct, but I feel like that's so.

1384
01:16:46,100 --> 01:16:49,800
So you can kind of see like how that's working now, right?

1385
01:16:52,500 --> 01:16:56,300
So I think that's, that's more what we want, potentially.

1386
01:17:00,100 --> 01:17:03,900
So yeah, so the problem with that is when we do that obviously, you

1387
01:17:03,900 --> 01:17:10,700
know, stuff Z value, the Z value for the offset isn't really baked in

1388
01:17:10,700 --> 01:17:11,600
so I don't know.

1389
01:17:11,600 --> 01:17:13,800
I mean, we got to kind of think about this.

1390
01:17:13,800 --> 01:17:18,100
This is, this is like, this is the offset Z, right?

1391
01:17:21,900 --> 01:17:25,000
And so I think what we probably want to do is just do it this way and

1392
01:17:25,000 --> 01:17:29,100
for now set the offset z20 and then we'll have to play around with how

1393
01:17:29,100 --> 01:17:29,800
we want to push that.

1394
01:17:29,800 --> 01:17:31,000
Maybe we'll do that tomorrow.

1395
01:17:32,200 --> 01:17:35,000
So basically what we want at the moment is to kind of do this.

1396
01:17:35,000 --> 01:17:41,300
Just I think just like, yeah, just as we were doing it where we don't

1397
01:17:42,100 --> 01:17:42,700
really

1398
01:17:44,800 --> 01:17:45,500
Why am I still?

1399
01:17:45,800 --> 01:17:47,100
I'm still getting.

1400
01:17:51,300 --> 01:17:52,800
Why am I still getting?

1401
01:18:04,100 --> 01:18:06,900
Some, I feel like I'm still getting some roll offset there.

1402
01:18:08,700 --> 01:18:09,400
Don't you think?

1403
01:18:12,900 --> 01:18:15,100
Felt like I was still getting some roll-off set there.

1404
01:18:24,800 --> 01:18:25,900
Now, that may be fine.

1405
01:18:29,700 --> 01:18:32,200
All right, well, we can think about it later.

1406
01:18:34,900 --> 01:18:36,800
How many FPS is this running at?

1407
01:18:37,300 --> 01:18:38,900
We're running at 60 right now.

1408
01:18:38,900 --> 01:18:45,000
Locked, if I, if I actually compiler ourselves and optimize mode,

1409
01:18:48,100 --> 01:18:49,500
So it's pretty sweet.

1410
01:18:49,600 --> 01:18:55,900
Actually our ground chunk rebuilding is not on a separate thread yet

1411
01:18:55,900 --> 01:18:57,300
although we could do that pretty soon.

1412
01:18:58,100 --> 01:19:01,400
So we do have some, some hiccups like if I move to a new location, see

1413
01:19:01,400 --> 01:19:02,100
the hiccup there.

1414
01:19:02,500 --> 01:19:06,000
So we have to fix a couple things but but we're pretty good.

1415
01:19:23,000 --> 01:19:25,300
To make the 3D appearance of the staircase where you have to make

1416
01:19:25,300 --> 01:19:28,000
render technique to draw the walls of the staircase to start from the

1417
01:19:28,000 --> 01:19:30,700
bottom floor and end at the top floor, creating a cool peroxide.

1418
01:19:30,800 --> 01:19:33,500
I don't know, like I said, I don't know what we're going to do, will

1419
01:19:33,500 --> 01:19:34,100
do something.

1420
01:19:41,000 --> 01:19:42,900
When do you consider Consulting other programmers?

1421
01:19:42,900 --> 01:19:44,000
Where's the threshold?

1422
01:19:44,600 --> 01:19:45,400
I usually consult.

1423
01:19:45,400 --> 01:19:46,100
Other programmers.

1424
01:19:46,100 --> 01:19:49,000
If I know somebody is an expert in something that I'm curious about,

1425
01:19:49,100 --> 01:19:49,600
right?

1426
01:19:51,300 --> 01:19:54,600
That's usually when I don't usually consult, other programmers to,

1427
01:19:54,600 --> 01:19:58,900
just talk about some programming thing because I'm usually find to

1428
01:19:58,900 --> 01:20:00,000
just program it myself.

1429
01:20:00,100 --> 01:20:03,200
But when I'm like, doing some multi-threading code and maybe I don't

1430
01:20:03,200 --> 01:20:06,400
feel like I'm an expert in this particular thing about multi-threading

1431
01:20:06,400 --> 01:20:07,900
or whatever, because I don't do it that much.

1432
01:20:08,000 --> 01:20:10,200
I might ask someone who I know, does a lot of multi-threaded program?

1433
01:20:10,200 --> 01:20:10,500
Who's a good?

1434
01:20:10,700 --> 01:20:13,400
Grammar and say, like, you know, what do you do about this, or how do

1435
01:20:13,400 --> 01:20:15,100
you tend to think about these problems, you know?

1436
01:20:15,500 --> 01:20:16,900
So I can gain some insight there.

1437
01:20:18,400 --> 01:20:18,800
I'll do that.

1438
01:20:18,800 --> 01:20:19,900
Even if I'm not working on it though.

1439
01:20:19,900 --> 01:20:23,100
Like I also just will tend to ask people how they do stuff in general.

1440
01:20:23,100 --> 01:20:25,600
If I know that they're good at something because it's, you know, then

1441
01:20:25,600 --> 01:20:26,400
I'll just know for later.

1442
01:20:32,400 --> 01:20:34,700
What happens if you want to apply different transforms or lighting to

1443
01:20:34,700 --> 01:20:38,000
different parts of the scene that's that, were already set up for that

1444
01:20:38,000 --> 01:20:40,900
basically all you do is, as you go through things.

1445
01:20:41,000 --> 01:20:44,400
Well, well, in fact, we already are applying different transforms,

1446
01:20:44,600 --> 01:20:46,800
we're applying a different transform to every entity actually already,

1447
01:20:47,100 --> 01:20:49,400
so you can trivially do it to different parts of the scenes if you

1448
01:20:49,400 --> 01:20:52,000
wanted to like right now.

1449
01:20:53,200 --> 01:20:56,200
So you can see transform that pea right now.

1450
01:20:56,200 --> 01:20:59,600
We're setting the offset to wherever the entity is for every entity.

1451
01:20:59,600 --> 01:20:59,800
But

1452
01:21:00,000 --> 01:21:01,700
A trivially do anything you want.

1453
01:21:01,700 --> 01:21:03,700
Who could set the focal length differently for every entity or

1454
01:21:03,700 --> 01:21:05,100
anything else you wanted, right?

1455
01:21:05,100 --> 01:21:06,800
So that we already allow all that

1456
01:21:14,900 --> 01:21:17,400
What do you expect will be the Boost using opengl D3?

1457
01:21:17,400 --> 01:21:18,200
D4 bleeding?

1458
01:21:20,400 --> 01:21:23,700
Well, I mean, there's just more, there's a lot more Hardware on there,

1459
01:21:23,700 --> 01:21:28,000
for copying memory around, and, and it's set up for that, right?

1460
01:21:28,700 --> 01:21:33,900
So, it should be able to do our texture stuff faster than we are.

1461
01:21:34,900 --> 01:21:37,300
So I'm not sure what you mean or do you mean for just living our

1462
01:21:37,300 --> 01:21:38,200
bitmap to the screen?

1463
01:21:38,700 --> 01:21:40,200
If you mean just bidding our bitmap, the screen.

1464
01:21:40,200 --> 01:21:40,900
I don't know.

1465
01:21:41,300 --> 01:21:43,100
They probably just be a little smoother because we're not going

1466
01:21:43,100 --> 01:21:44,100
through a weird path or

1467
01:21:44,200 --> 01:21:44,700
Thing.

1468
01:21:45,200 --> 01:21:45,700
But I don't know.

1469
01:21:51,200 --> 01:21:53,700
Is there a concept of local space model, space camera, space clip,

1470
01:21:53,700 --> 01:21:55,900
space in the render that is analogous to the kind of transformations

1471
01:21:55,900 --> 01:22:02,000
in API service opengl d3d would want so opengl and direct3d don't have

1472
01:22:02,100 --> 01:22:05,000
any of those actually.

1473
01:22:05,600 --> 01:22:07,600
They only have clip space.

1474
01:22:09,600 --> 01:22:11,900
They don't have local space model, space or camera space.

1475
01:22:13,500 --> 01:22:18,900
Opengl and direct3d are now, they allow you to do all of your

1476
01:22:18,900 --> 01:22:23,900
transforms and stuff like that in the shaders.

1477
01:22:23,900 --> 01:22:25,700
So you are in complete control of all of that.

1478
01:22:25,800 --> 01:22:29,500
So the only thing they really care about is clip space and clip space,

1479
01:22:30,400 --> 01:22:34,300
we don't really have and then we sort of have it in the sense that

1480
01:22:34,300 --> 01:22:36,500
when we do the entity get basis B thing.

1481
01:22:37,600 --> 01:22:40,300
We have it, it's right here, right.

1482
01:22:40,800 --> 01:22:42,600
But we aren't ever

1483
01:22:42,900 --> 01:22:44,700
That we actually Computing things that could face because we don't

1484
01:22:44,700 --> 01:22:46,600
have to wear as opengl.

1485
01:22:46,600 --> 01:22:49,900
Direct3d need to put things into clip space first.

1486
01:22:50,600 --> 01:22:52,300
But local space model facing camera.

1487
01:22:52,300 --> 01:22:55,700
Space are not things that opengl and direct3d ever care about or do

1488
01:22:55,700 --> 01:22:56,300
anything with.

1489
01:22:57,500 --> 01:23:02,100
Those are all things that get pre multiplied together into some values

1490
01:23:02,100 --> 01:23:05,400
that you will submit to your Shader and opengl and direct3d don't care

1491
01:23:05,400 --> 01:23:07,200
about any of them or even think about them.

1492
01:23:15,400 --> 01:23:16,400
This isn't really the stream.

1493
01:23:16,400 --> 01:23:18,800
I found a video where you can explore, explain quaternion double

1494
01:23:18,800 --> 01:23:21,600
cover, but there is no intro to quaternions and I could really use a

1495
01:23:21,600 --> 01:23:22,200
good one.

1496
01:23:22,500 --> 01:23:24,800
Would you consider doing that in the recent future?

1497
01:23:25,200 --> 01:23:26,300
No, probably not.

1498
01:23:27,600 --> 01:23:30,600
I haven't worked with questioning in a long time and so I don't feel

1499
01:23:30,600 --> 01:23:33,900
like I'm probably the right person to give an explanation of them now,

1500
01:23:34,500 --> 01:23:36,400
especially since there's been a bunch of things that have happened

1501
01:23:36,400 --> 01:23:39,100
since when I originally did all the work but turning into, they were

1502
01:23:39,100 --> 01:23:41,000
very new when I did work with them.

1503
01:23:43,100 --> 01:23:44,700
Well, new to computer Graphics.

1504
01:23:44,700 --> 01:23:45,700
They were not new.

1505
01:23:46,800 --> 01:23:50,300
I mean, Hamilton had them under control a long time ago, so they were

1506
01:23:50,300 --> 01:23:51,500
not new in mathematical sense.

1507
01:23:53,300 --> 01:23:56,100
So yeah, the the

1508
01:23:58,600 --> 01:23:59,800
The landscape has changed.

1509
01:24:00,000 --> 01:24:04,100
There's they do dual quaternion stuff now and other things and I don't

1510
01:24:04,100 --> 01:24:05,000
really know anything about that.

1511
01:24:05,000 --> 01:24:05,900
I've never studied it.

1512
01:24:07,600 --> 01:24:10,200
I feel like a good introduction is probably also include some

1513
01:24:10,200 --> 01:24:14,100
geometric algebra stuff, and I don't really study that either so it's

1514
01:24:14,100 --> 01:24:14,800
not really my thing.

1515
01:24:17,200 --> 01:24:20,400
Alright, let's let's finish it up, folks.

1516
01:24:21,100 --> 01:24:22,100
Let's finish it up.

1517
01:24:24,700 --> 01:24:26,100
I'm going to go ahead and close this down.

1518
01:24:28,200 --> 01:24:29,000
Save that.

1519
01:24:31,300 --> 01:24:32,700
Takes a long time to save Mischief.

1520
01:24:32,700 --> 01:24:34,300
Now how big is it?

1521
01:24:35,100 --> 01:24:37,100
Sure handmade.

1522
01:24:40,200 --> 01:24:41,800
I guess it's archived.

1523
01:24:46,300 --> 01:24:47,600
Where is that Blackboard?

1524
01:24:50,000 --> 01:24:50,900
Gays.

1525
01:24:52,900 --> 01:24:54,000
Six megabytes.

1526
01:24:54,000 --> 01:24:54,900
That's a lot of drawing.

1527
01:24:54,900 --> 01:24:55,600
We've done.

1528
01:24:56,600 --> 01:24:58,400
We've done six megabytes of drawings folks.

1529
01:24:59,300 --> 01:25:01,800
Alright enough about that.

1530
01:25:03,200 --> 01:25:05,200
Thank you, everyone for joining me, for another episode of handmade

1531
01:25:05,200 --> 01:25:05,300
here.

1532
01:25:05,300 --> 01:25:06,300
It's been a pleasure coding with you.

1533
01:25:06,300 --> 01:25:10,800
As always, if you would like to follow along at home and you want to

1534
01:25:10,800 --> 01:25:13,600
copy the source code, you can go ahead and pre-order the game at hand

1535
01:25:13,600 --> 01:25:17,600
made here at org and it comes with the source code so you can check

1536
01:25:17,600 --> 01:25:20,000
out all the days source and follow along and all that sort of stuff

1537
01:25:20,000 --> 01:25:23,000
and you can download it every night, I uploaded after I finish

1538
01:25:23,100 --> 01:25:23,600
programming here.

1539
01:25:23,600 --> 01:25:26,300
So you can always be up to date as well if you're just

1540
01:25:26,400 --> 01:25:27,900
For this video series, we do have a patreon.

1541
01:25:27,900 --> 01:25:29,900
You can subscribe to, it's always much appreciated.

1542
01:25:30,200 --> 01:25:34,800
We also have a forum site that you can go to and ask questions or get

1543
01:25:34,800 --> 01:25:37,300
ports to Mac and Linux look at an antidepressant guide, good stuff

1544
01:25:37,300 --> 01:25:37,900
like that.

1545
01:25:38,300 --> 01:25:43,200
We have tweetbot the Tweet has the schedule, it basically schedule

1546
01:25:43,200 --> 01:25:45,300
every weekend and it tweets.

1547
01:25:45,300 --> 01:25:50,200
The schedule like, sort of a coming up soon kind of announcements on

1548
01:25:50,400 --> 01:25:51,900
on every day that the stream is there.

1549
01:25:51,900 --> 01:25:53,700
So if you're trying to follow the stream live, it's a good way to

1550
01:25:53,700 --> 01:25:54,800
always know when it's going to be.

1551
01:25:55,500 --> 01:25:56,200
And finally, we have the

1552
01:25:56,300 --> 01:26:00,200
Live Now button which will actually show a countdown timer to the days

1553
01:26:00,200 --> 01:26:00,700
stream.

1554
01:26:00,900 --> 01:26:01,900
If there's a stream on that day.

1555
01:26:01,900 --> 01:26:05,200
So you can also use that, you know, if you're trying to figure out how

1556
01:26:05,200 --> 01:26:05,900
long it's going to be.

1557
01:26:07,000 --> 01:26:07,500
All right.

1558
01:26:07,600 --> 01:26:08,700
So thanks for joining me.

1559
01:26:08,700 --> 01:26:09,700
I'll see you back here tomorrow.

1560
01:26:09,700 --> 01:26:10,200
Same time.

1561
01:26:10,200 --> 01:26:10,900
Same place.

1562
01:26:11,300 --> 01:26:15,300
And we will sort of go and maybe start to clean up our pixel Texel

1563
01:26:15,300 --> 01:26:18,000
coordinates that needs to happen.

1564
01:26:18,000 --> 01:26:19,900
So we'll probably go ahead and do that tomorrow or try to do that

1565
01:26:19,900 --> 01:26:20,300
tomorrow.

1566
01:26:20,800 --> 01:26:23,300
So thanks everyone for joining us and I will see you tomorrow.

