1
00:00:01,300 --> 00:00:05,400
Okay, hello everyone, and welcome to handmade hero.

2
00:00:05,400 --> 00:00:09,200
The show where we code a complete game live on stream.

3
00:00:09,900 --> 00:00:12,000
No engines, no libraries.

4
00:00:12,000 --> 00:00:16,700
It's just us here, and this is a very special episode of handmade

5
00:00:16,700 --> 00:00:17,000
hero.

6
00:00:17,000 --> 00:00:24,800
Actually, I would like to dedicate this episode to, you know, I guess

7
00:00:24,800 --> 00:00:25,700
I'm not sure how to do this.

8
00:00:25,700 --> 00:00:29,000
Like, normally, you know, if you have someone that you want to

9
00:00:29,000 --> 00:00:30,300
dedicate an episode to

10
00:00:30,600 --> 00:00:31,700
In a positive way.

11
00:00:31,800 --> 00:00:35,800
So you like I would like to dedicate this episode to you know such and

12
00:00:35,800 --> 00:00:38,600
such who helped out with something or whatever.

13
00:00:39,600 --> 00:00:42,500
But on this episode of handmade hero, I would like to do the inverse

14
00:00:42,500 --> 00:00:43,100
of that.

15
00:00:43,200 --> 00:00:47,900
I would like to dedicate this episode of handmade hero to how much

16
00:00:47,900 --> 00:00:53,000
Microsoft is an awful company and I hate them because, basically, my

17
00:00:53,000 --> 00:00:58,300
last two days have been been taken up with Microsoft, awesomeness,

18
00:00:58,500 --> 00:01:00,400
because I upgraded, my

19
00:01:00,500 --> 00:01:06,600
Zeenat work for the first time since 2008, and I went from Windows 7

20
00:01:06,600 --> 00:01:14,400
to using Windows 8 and it was absolutely ridiculous.

21
00:01:14,600 --> 00:01:18,000
How awful absolutely awful.

22
00:01:18,000 --> 00:01:23,400
It was, first of all, they broke their font rendering somehow

23
00:01:23,800 --> 00:01:24,200
normally.

24
00:01:24,200 --> 00:01:27,100
I use Liberation mono, you've seen me use Liberation mono on the

25
00:01:27,100 --> 00:01:27,600
stream.

26
00:01:27,600 --> 00:01:30,100
I use it every day, well, using

27
00:01:30,600 --> 00:01:34,300
In mono on the machine at work, the underscores are all missing.

28
00:01:34,300 --> 00:01:38,500
Now there are no underscores in Liberation mono at the point size that

29
00:01:38,500 --> 00:01:39,200
I am using.

30
00:01:39,300 --> 00:01:44,100
They vanished, you go, one point size up, and they're back, so it's

31
00:01:44,100 --> 00:01:47,700
like whatever in turn they assign to the anti-aliased font.

32
00:01:47,700 --> 00:01:52,200
Rendering code, could not figure out the fact that a one pixel wide

33
00:01:52,500 --> 00:01:56,500
underscore, should still show up when you shrink the font.

34
00:01:57,200 --> 00:01:58,500
So, that was fantastic.

35
00:01:58,600 --> 00:02:02,700
So now I've got to go decide on a new font to use for programming

36
00:02:02,700 --> 00:02:07,100
because Microsoft can't figure out how to render an underscore thumbs

37
00:02:07,100 --> 00:02:07,400
up.

38
00:02:08,400 --> 00:02:12,000
All right, thing to I tried to move my visual studio.

39
00:02:12,000 --> 00:02:16,000
2012, professional Edition from the machine to the new machine.

40
00:02:16,400 --> 00:02:20,500
So, I install it using the same installation media I used before, I

41
00:02:20,500 --> 00:02:23,500
enter the same product key that I was using on the machine that I

42
00:02:23,500 --> 00:02:24,100
replaced.

43
00:02:24,700 --> 00:02:26,600
And it says invalid product key.

44
00:02:27,400 --> 00:02:29,700
That's it, it's just invalid product key.

45
00:02:30,000 --> 00:02:32,300
Call Microsoft, give them the product key.

46
00:02:32,300 --> 00:02:35,600
They're like, that's a valid product key and I'm like, yeah, I know,

47
00:02:35,600 --> 00:02:36,900
it's a valid product key.

48
00:02:37,100 --> 00:02:39,700
It was the product here is using on Windows 7.

49
00:02:40,300 --> 00:02:44,400
The machine that I just replaced, and they're like, well, we can't

50
00:02:44,400 --> 00:02:45,500
really help you with that.

51
00:02:45,700 --> 00:02:53,300
But if you want to pay $499, we can create a support ticket for you to

52
00:02:53,300 --> 00:02:54,000
find out.

53
00:02:54,000 --> 00:02:54,300
Why

54
00:02:54,500 --> 00:02:57,300
Are DRM isn't working on your machine.

55
00:02:58,200 --> 00:02:59,800
I am not making a single

56
00:03:00,000 --> 00:03:00,800
Of this up.

57
00:03:00,900 --> 00:03:03,400
This is after like a 30 minute phone call to them.

58
00:03:03,600 --> 00:03:06,200
So it's like, okay, I bought your product.

59
00:03:06,200 --> 00:03:10,400
Your DRM is so broken, that it can't even figure out how to run on my

60
00:03:10,400 --> 00:03:11,000
machine.

61
00:03:11,800 --> 00:03:16,700
And now I have to pay you $500 for the privilege of you figuring out

62
00:03:16,700 --> 00:03:17,700
how the other intern.

63
00:03:17,700 --> 00:03:20,500
I maybe it's the same intern, maybe you just have one intern who

64
00:03:20,500 --> 00:03:24,400
programmed both your underscore rendering code on the font system and

65
00:03:24,400 --> 00:03:26,900
like the DRM for visual studio 2012.

66
00:03:26,900 --> 00:03:29,900
I'm not sure, maybe it's just one guy or maybe it's a team of guys.

67
00:03:30,000 --> 00:03:30,200
Guys.

68
00:03:30,200 --> 00:03:34,800
Maybe you've got a whole cradle filled with little babies in diapers

69
00:03:34,800 --> 00:03:38,400
with little rattles that they shake and they're just sitting around

70
00:03:38,400 --> 00:03:41,300
their kind of stinking up the place and every once in a while you

71
00:03:41,300 --> 00:03:43,500
decide you're going to poop out a new version into one of your

72
00:03:43,500 --> 00:03:44,100
diapers.

73
00:03:44,400 --> 00:03:47,300
You pick one of them up, you sit him down at the keyboard and you're

74
00:03:47,300 --> 00:03:50,400
just like, hey man, see what you can do with this font code.

75
00:03:50,400 --> 00:03:51,700
I'm sure it's going to be great.

76
00:03:52,000 --> 00:03:53,300
So that was fantastic.

77
00:03:53,400 --> 00:03:54,000
No, it's really.

78
00:03:54,000 --> 00:03:55,100
It's just, it's fine.

79
00:03:55,100 --> 00:03:56,400
It's totally fantastic.

80
00:03:56,500 --> 00:03:58,900
That's been my past two days has been stuff like that.

81
00:03:59,000 --> 00:03:59,800
I was like in and

82
00:04:00,000 --> 00:04:01,400
Absolute rage.

83
00:04:01,400 --> 00:04:04,600
It's one of those things where every time I have to touch a system

84
00:04:04,700 --> 00:04:08,500
that involves Microsoft software, it's like the worst possible thing.

85
00:04:08,700 --> 00:04:11,700
And like I end up just switching back to Linux even though I don't

86
00:04:11,700 --> 00:04:15,800
like using Linux these days very much.

87
00:04:15,800 --> 00:04:19,700
It's like man, I was like this close to just bagging Windows entirely

88
00:04:19,700 --> 00:04:20,399
at the office.

89
00:04:20,600 --> 00:04:22,700
I think sometimes we didn't have to run Photoshop.

90
00:04:22,700 --> 00:04:26,900
I just go ahead and do it because using a slightly worse to bugger, is

91
00:04:26,900 --> 00:04:29,800
just totally fine at the end of the day compared to the stuff that

92
00:04:29,900 --> 00:04:33,500
These people put me through and that's for a paying customer like, oh

93
00:04:33,500 --> 00:04:38,600
my God, these are like legitimate versions of Windows and and visual

94
00:04:38,600 --> 00:04:39,700
studio professional 2012.

95
00:04:39,700 --> 00:04:42,700
This isn't even like the free version of Visual Studio, which you can

96
00:04:42,700 --> 00:04:44,100
download on the internet.

97
00:04:45,700 --> 00:04:46,900
I just don't know what to say.

98
00:04:47,800 --> 00:04:54,300
I sincerely hope that you guys continue to sort of your slide into

99
00:04:54,300 --> 00:04:58,100
irrelevance in this industry, good riddance to bad rubbish.

100
00:04:58,200 --> 00:04:59,800
And with that said,

101
00:04:59,900 --> 00:05:04,100
I think maybe like, you know, maybe what we need to do on handmade

102
00:05:04,100 --> 00:05:07,300
here a very soon, is stop streaming this from Windows, and start

103
00:05:07,300 --> 00:05:11,100
streaming it from Linux because I have had just about enough.

104
00:05:11,400 --> 00:05:15,600
So with that in mind we're going to be doing some more debug code

105
00:05:15,600 --> 00:05:16,000
today.

106
00:05:16,900 --> 00:05:19,900
And again it's going to be dedicated to how much Microsoft is awful at

107
00:05:19,900 --> 00:05:24,700
everything that they do today is day 179 and day.

108
00:05:24,700 --> 00:05:27,800
178 obviously is going to be the source code that I'm going to start

109
00:05:27,800 --> 00:05:28,200
with.

110
00:05:28,400 --> 00:05:29,800
So if you want to start with,

111
00:05:29,900 --> 00:05:31,400
With the same code that I have starting with today.

112
00:05:31,400 --> 00:05:33,500
If you want to follow along at home and you preorder the game on

113
00:05:33,500 --> 00:05:37,700
handmade hero dot-org, you're going to want to unpack day 178 source

114
00:05:37,700 --> 00:05:41,000
code because that's the source code that I'm starting with.

115
00:05:41,100 --> 00:05:44,800
So, let's go ahead and boot that up here on Windows 7.

116
00:05:44,800 --> 00:05:47,500
I guess, the last version of Windows that maybe works at all.

117
00:05:47,500 --> 00:05:52,200
In terms of actually rendering fonts who knows maybe they'll never

118
00:05:52,200 --> 00:05:55,300
ship another version that renders fonts properly again maybe they'll

119
00:05:55,300 --> 00:05:58,800
just start eliminating letters one at a time from the English language

120
00:05:59,300 --> 00:05:59,800
until they get

121
00:06:00,000 --> 00:06:00,700
Down to letters.

122
00:06:00,700 --> 00:06:02,000
They can actually handle

123
00:06:06,900 --> 00:06:07,900
So where were we?

124
00:06:08,600 --> 00:06:12,700
We left off at a point where we sort of had some cool debug timers

125
00:06:12,700 --> 00:06:15,300
working and they're kind of groovy, right?

126
00:06:15,300 --> 00:06:16,600
I mean, we're looking at them.

127
00:06:17,400 --> 00:06:21,000
They're using what I like to call Windows Safe letters, which are

128
00:06:21,000 --> 00:06:22,300
witcher's, no underscores.

129
00:06:22,400 --> 00:06:25,700
So Windows is actually capable of rendering them even on Windows 8,

130
00:06:25,700 --> 00:06:26,600
which is shocking.

131
00:06:27,300 --> 00:06:30,200
You know, it's a little bit challenged in that department.

132
00:06:30,600 --> 00:06:33,400
Oh no, it's not so push render element with that underscore might

133
00:06:33,400 --> 00:06:34,100
cause a big problem.

134
00:06:34,100 --> 00:06:36,600
Those of you following along with Windows 8 at home, I apologize.

135
00:06:36,800 --> 00:06:37,400
Surrender element.

136
00:06:37,400 --> 00:06:38,800
Just has a big old space there.

137
00:06:39,700 --> 00:06:40,800
What can you do unsolved?

138
00:06:40,800 --> 00:06:43,100
Problem in computer science, rendering an underscore.

139
00:06:43,500 --> 00:06:49,000
So we've got these counters up there and the counters themselves are

140
00:06:49,000 --> 00:06:49,900
pretty cool right now.

141
00:06:49,900 --> 00:06:53,300
They're actually thread safe so far, so you can actually have multiple

142
00:06:53,300 --> 00:06:57,500
threads that are all kind of pounding on the same function and it will

143
00:06:57,500 --> 00:07:01,400
actually count the hits properly and the cycle counts properly for

144
00:07:01,400 --> 00:07:02,600
that, which is kind of cool.

145
00:07:03,500 --> 00:07:06,200
And, you know, we've got this nice display that updates in real time

146
00:07:06,200 --> 00:07:06,600
so we can see

147
00:07:06,700 --> 00:07:07,200
See it.

148
00:07:07,900 --> 00:07:12,500
But we've already got a couple things that you know, maybe aren't the

149
00:07:12,500 --> 00:07:14,400
best possible situation here, right?

150
00:07:15,000 --> 00:07:18,400
There's a couple things that already even just at this early stage are

151
00:07:18,400 --> 00:07:23,600
kind of jumping out where we, you know, we may not really be super

152
00:07:23,600 --> 00:07:26,100
happy with it when it actually comes time to use it, right?

153
00:07:26,400 --> 00:07:29,200
So one of those things is that there's really no.

154
00:07:29,200 --> 00:07:34,600
What I usually hear the term hysteresis used to this, but ignoring the

155
00:07:34,600 --> 00:07:36,600
fancy terminology there really isn't,

156
00:07:36,800 --> 00:07:40,400
Think here, that helps us visualize this information in a way that's

157
00:07:40,400 --> 00:07:43,600
easy to use given how fast it's changing.

158
00:07:43,600 --> 00:07:46,700
So especially if we were running, it's a 60 frames, a second or

159
00:07:46,700 --> 00:07:47,600
something like that.

160
00:07:47,800 --> 00:07:50,400
Like in the full release mode, you know these things are going to be

161
00:07:50,400 --> 00:07:53,200
flickering like crazy and it's going to be pretty hard for us to

162
00:07:53,200 --> 00:07:55,100
understand what we're seeing, right?

163
00:07:55,800 --> 00:07:58,800
So one thing that we might want to do is start adding some features

164
00:07:58,800 --> 00:08:02,500
that allow us to more concisely view, what's happening over time with

165
00:08:02,500 --> 00:08:06,200
these values in terms of just just knowing the general number like

166
00:08:06,200 --> 00:08:06,600
mint.

167
00:08:06,700 --> 00:08:08,800
Max average, just basic stuff like that, right?

168
00:08:08,800 --> 00:08:11,400
You could imagine being kind of useful, so we can kind of see like

169
00:08:11,400 --> 00:08:14,400
okay, you know, in the last sixty frames, what was the minimum value?

170
00:08:14,400 --> 00:08:15,700
What was the maximum value?

171
00:08:15,700 --> 00:08:18,200
What was the average something like you know, whatever I mean, who

172
00:08:18,200 --> 00:08:19,800
knows something like this.

173
00:08:20,900 --> 00:08:21,100
Okay.

174
00:08:21,100 --> 00:08:22,000
So that would be one thing.

175
00:08:22,000 --> 00:08:24,800
That would be pretty handy for us to know, just in terms of being able

176
00:08:24,800 --> 00:08:29,200
to visualize these things, a little bit more clearly just, you know,

177
00:08:29,200 --> 00:08:32,200
not trying to find any Trends or anything, but just just reading the

178
00:08:32,200 --> 00:08:32,700
numbers.

179
00:08:33,600 --> 00:08:37,000
Another thing that's closely related to that is, if there was a sudden

180
00:08:37,000 --> 00:08:38,700
Spike here, right?

181
00:08:39,000 --> 00:08:42,900
We wouldn't have any ability to really see that, right?

182
00:08:43,200 --> 00:08:45,700
Like you can almost see occasionally we can see Little Numbers kind of

183
00:08:45,700 --> 00:08:48,700
jump out on there and we can see it twitch a little bit and you know

184
00:08:48,800 --> 00:08:50,300
maybe those are important spikes.

185
00:08:50,700 --> 00:08:52,000
Something weird was happening.

186
00:08:52,000 --> 00:08:55,900
Probably not with the level of complexity that our game has right now,

187
00:08:55,900 --> 00:08:58,400
you know, because it's mostly test code and stuff like that on top of

188
00:08:58,400 --> 00:08:58,900
the engine.

189
00:08:58,900 --> 00:08:59,900
So it's not stressing

190
00:09:00,000 --> 00:09:01,500
And just not stressing anything.

191
00:09:01,500 --> 00:09:04,700
So the chances of having a really bad frame are probably pretty low,

192
00:09:04,700 --> 00:09:07,800
but as we get further on in the game, the chances of having something

193
00:09:08,100 --> 00:09:11,400
really weird and like performance-critical happen on a particular

194
00:09:11,400 --> 00:09:15,300
frame, that causes us to miss our frame rate will go up and what we'd

195
00:09:15,300 --> 00:09:18,900
like to be able to do is see when we get those Miss frames.

196
00:09:18,900 --> 00:09:21,500
We'd like to be able to see who was responsible, right?

197
00:09:21,500 --> 00:09:24,200
To give us a little bit of an idea, but we're not gonna be able to do

198
00:09:24,200 --> 00:09:24,600
that all.

199
00:09:24,600 --> 00:09:27,100
We're going to be able to know, is maybe we saw a little framerate

200
00:09:27,100 --> 00:09:29,900
stutter, you know, maybe we're walking around on here and we see,

201
00:09:30,000 --> 00:09:33,700
See a little stutter or something, but we'll have no idea.

202
00:09:34,000 --> 00:09:36,600
We won't have any idea who caused it because the numbers have already

203
00:09:36,600 --> 00:09:38,500
passed their long gone, right?

204
00:09:39,000 --> 00:09:42,500
So, I think, what we'd rather do is we'd rather have some way of being

205
00:09:42,500 --> 00:09:47,200
able to see some kind of a like, you know, graphical depiction of, you

206
00:09:47,200 --> 00:09:48,100
know, the frames over time.

207
00:09:48,100 --> 00:09:52,200
So we can see when we hit or miss our frame rate and stuff like that,

208
00:09:52,200 --> 00:09:52,800
right?

209
00:09:53,100 --> 00:09:55,800
So let's go ahead and start down that path.

210
00:09:55,800 --> 00:09:59,400
A little bit, just seems like a pretty interesting thing to do and

211
00:09:59,400 --> 00:09:59,900
this will be

212
00:10:00,000 --> 00:10:02,800
something that, you know, we can do hopefully rendering

213
00:10:05,000 --> 00:10:09,900
Mostly in the kinds of characters that Windows is capable of

214
00:10:09,900 --> 00:10:10,300
rendering.

215
00:10:10,300 --> 00:10:14,200
So we'll try to stay away from underscores being output to the screen

216
00:10:15,300 --> 00:10:17,000
and other stuff like that.

217
00:10:17,300 --> 00:10:19,500
Or if we find that we really need an underscore.

218
00:10:19,800 --> 00:10:24,400
Maybe we can call the there, tech-support Hotline in the Philippines.

219
00:10:24,400 --> 00:10:26,400
That wanted me to pay the $500.

220
00:10:26,400 --> 00:10:30,200
We could just pay $500 to Microsoft to see if they could figure out

221
00:10:30,500 --> 00:10:31,900
where the underscores went.

222
00:10:32,100 --> 00:10:33,300
So, let's see.

223
00:10:34,000 --> 00:10:34,200
Inside

224
00:10:34,400 --> 00:10:35,700
I can be dot CPP.

225
00:10:35,800 --> 00:10:39,500
We've got, we've got our sort of Little Beginnings of our debug print

226
00:10:39,500 --> 00:10:41,800
out thing that's printing out what we saw there.

227
00:10:42,600 --> 00:10:46,200
It's down here at the end where we do overlay cycle counters and what

228
00:10:46,200 --> 00:10:47,600
happens with the overlay cycle count.

229
00:10:47,600 --> 00:10:52,100
As you can see we print out the cycle counters at the same time,

230
00:10:52,400 --> 00:10:53,000
right?

231
00:10:53,200 --> 00:10:57,200
We print out the psycho counters at the same time as we look at them.

232
00:10:57,400 --> 00:11:00,900
So this is actually our pass through the cycle, counters, to gather

233
00:11:00,900 --> 00:11:04,200
the information to pull that information off of.

234
00:11:04,300 --> 00:11:06,300
Of the debug system, right?

235
00:11:06,500 --> 00:11:10,700
And then we are putting it out to the debug text buff.

236
00:11:10,700 --> 00:11:14,400
You know, we're sort of grabbing the information resetting it and

237
00:11:14,400 --> 00:11:17,000
putting it out to the render at the same time.

238
00:11:17,200 --> 00:11:17,700
Okay.

239
00:11:18,100 --> 00:11:22,100
And so what we'd like to do at this point if we want to look at things

240
00:11:22,100 --> 00:11:26,100
kind of historically speaking, is we like to change that so that when

241
00:11:26,100 --> 00:11:30,400
we go through and we pull the data out and we do the reset instead of

242
00:11:30,400 --> 00:11:34,100
that happening, as part of the render, the render can just

243
00:11:34,300 --> 00:11:38,000
Something separate that renders information that we've stored for the

244
00:11:38,000 --> 00:11:42,700
debugging purposes this sort of like stored information and then we

245
00:11:42,700 --> 00:11:47,600
can move where we're actually doing the pull into something whose sole

246
00:11:47,600 --> 00:11:52,500
purpose is to do that debug check and maybe start keeping a longer

247
00:11:52,500 --> 00:11:54,200
history of what happened.

248
00:11:54,200 --> 00:11:57,800
So that then the renderer can become more complicated and draw, more

249
00:11:57,800 --> 00:11:59,800
information, show more information.

250
00:12:00,000 --> 00:12:03,300
Time, do sort of interesting things like that and again we alluded to

251
00:12:03,300 --> 00:12:05,800
this on the previous dreams when people were asking about that.

252
00:12:05,800 --> 00:12:06,400
I was like, yep.

253
00:12:06,400 --> 00:12:09,300
Don't we're getting there were getting there and now we are, we are

254
00:12:09,300 --> 00:12:09,500
there.

255
00:12:09,500 --> 00:12:16,200
It's time now for us to think about that temporal aspect, okay?

256
00:12:17,600 --> 00:12:22,100
So let's go ahead and and sort of start moving into that.

257
00:12:22,300 --> 00:12:26,000
Now, I'm just going to go ahead and I sort of this is a little bit

258
00:12:26,000 --> 00:12:27,100
predictive, right?

259
00:12:27,100 --> 00:12:30,500
This is a little bit of me, kind of knowing some stuff that I like,

260
00:12:30,500 --> 00:12:34,100
because I've worked on lots of projects before and so I just kind of

261
00:12:34,100 --> 00:12:34,900
like jumping the gun.

262
00:12:34,900 --> 00:12:38,500
I'm not waiting to discover it later on, so I'll just say that this

263
00:12:38,500 --> 00:12:41,300
would be something we'd sort of would have had to sort of stumble into

264
00:12:41,300 --> 00:12:45,800
potentially, and that is that I fully suspect that we will want this

265
00:12:45,800 --> 00:12:47,300
debug info system.

266
00:12:47,400 --> 00:12:51,400
To be able to visualize some things that are largely happening outside

267
00:12:51,400 --> 00:12:53,000
of the platform independent code.

268
00:12:53,000 --> 00:12:57,800
So for example, we may want the windows side of things or the Linux

269
00:12:57,800 --> 00:13:00,600
side of the Mac OS X side or the Raspberry Pi side or whatever, we

270
00:13:00,600 --> 00:13:06,000
choose to Port it to, we may not that side to be able to sort of put

271
00:13:06,000 --> 00:13:07,700
information into the system.

272
00:13:07,800 --> 00:13:11,000
That's about the current frame that we're on, right?

273
00:13:11,300 --> 00:13:17,000
And so what I'd like to be able to do is is sort of elevate the notion

274
00:13:17,000 --> 00:13:17,300
of

275
00:13:17,400 --> 00:13:21,000
The debug frame latch that latch where we go through and grab all the

276
00:13:21,000 --> 00:13:21,700
information.

277
00:13:22,000 --> 00:13:25,800
I want to elevate that to something that the platform layer itself

278
00:13:25,800 --> 00:13:32,100
actually calls so that we can guarantee that that call will be done at

279
00:13:32,100 --> 00:13:34,600
a time when the platform layer knows, it's all.

280
00:13:34,700 --> 00:13:37,800
It's actually done all of the frame and the frame itself has been like

281
00:13:37,800 --> 00:13:39,400
fully retired that way.

282
00:13:39,400 --> 00:13:43,300
When the platform layer wants to sort of announce debug things,

283
00:13:43,500 --> 00:13:46,800
they'll all go into the frame correctly and it won't be like this

284
00:13:46,800 --> 00:13:47,300
weird sing.

285
00:13:47,400 --> 00:13:50,700
We're like, oh, it shows up as being on the next frame, even though it

286
00:13:50,700 --> 00:13:53,600
was on this Frame, because the debug reset happens inside, game update

287
00:13:53,600 --> 00:13:56,600
and render and then the the weight, you know, the blind to the screen

288
00:13:56,600 --> 00:13:57,600
happens after that.

289
00:13:57,700 --> 00:13:59,500
And so it shows up inside It Bubba.

290
00:13:59,500 --> 00:14:02,100
But right, you know, there's this whole like sort of ordering that

291
00:14:02,100 --> 00:14:02,700
happens there.

292
00:14:03,500 --> 00:14:07,000
So what I'd rather do is kind of kind of come in here, get that, get

293
00:14:07,000 --> 00:14:08,700
that sort of a little more straightened out.

294
00:14:08,800 --> 00:14:09,300
Okay.

295
00:14:09,600 --> 00:14:13,100
So what I want to do in here inside sort of our loop, our Global

296
00:14:13,100 --> 00:14:16,200
running group but we know we even sort of did this.

297
00:14:16,200 --> 00:14:17,200
We have these debug time.

298
00:14:17,400 --> 00:14:18,100
Marker things, right?

299
00:14:18,100 --> 00:14:20,100
That we were using when we're sort of playing around with sound a

300
00:14:20,100 --> 00:14:20,800
little bit.

301
00:14:21,600 --> 00:14:26,100
So what I like to do is in here when we, when we actually sort of go

302
00:14:26,100 --> 00:14:30,000
to do this stuff at the very end, when we latch everything, where we

303
00:14:30,000 --> 00:14:32,200
would be checking the frame count, right?

304
00:14:32,400 --> 00:14:37,400
What I'd like to do there is maybe right there, that's where we do our

305
00:14:37,400 --> 00:14:39,300
debug reset, okay?

306
00:14:40,100 --> 00:14:42,000
And so this is going to be in here, right?

307
00:14:42,100 --> 00:14:43,600
This is going to call the game.

308
00:14:44,400 --> 00:14:49,100
I forget really exactly what the names of stuff was in here.

309
00:14:49,100 --> 00:14:51,200
Here it is, right, we're going to call.

310
00:14:51,400 --> 00:14:52,500
For that game structure.

311
00:14:52,900 --> 00:14:56,400
Some new function pointer that we're going to introduce which calls

312
00:14:56,400 --> 00:14:59,800
into the debug system and does that that reset right.

313
00:15:03,300 --> 00:15:04,300
So, down here at the end.

314
00:15:05,400 --> 00:15:09,800
After we do that, maybe we do the our dtsc to take the N Cycle count

315
00:15:09,800 --> 00:15:11,200
the last cycle count stuff.

316
00:15:11,500 --> 00:15:13,400
So it's done its little strobe.

317
00:15:13,500 --> 00:15:16,200
And now we know some of the stuff that we were printing out here.

318
00:15:16,200 --> 00:15:18,000
This FPS buffer, all that stuff.

319
00:15:18,000 --> 00:15:21,800
Maybe we're even maybe we can even just do this, get rid of that sort

320
00:15:21,800 --> 00:15:23,300
of dumped to the console.

321
00:15:23,300 --> 00:15:26,400
Because remember, we have, this was just dumping our frames to Second.

322
00:15:27,800 --> 00:15:30,800
Jimmy, it was dumping our frames a second out to the debug console,

323
00:15:30,800 --> 00:15:33,200
which is because we didn't have any debug support.

324
00:15:33,400 --> 00:15:35,100
Well, now, we're going to start to have some so maybe

325
00:15:35,300 --> 00:15:39,800
Will do is say, you know, this is going to be our debug frame end or

326
00:15:39,800 --> 00:15:40,800
something like that.

327
00:15:42,800 --> 00:15:44,800
Maybe I'll make that caps because that's sort of been the way I've

328
00:15:44,800 --> 00:15:45,500
been doing it.

329
00:15:45,800 --> 00:15:50,400
So we called debug frame end and that will get past all the same stuff

330
00:15:50,400 --> 00:15:52,500
that it would normally get past that game memory.

331
00:15:52,500 --> 00:15:54,900
So it can sort of pull stuff out of that or whatever it wants to do.

332
00:15:55,500 --> 00:15:56,800
We can have that work.

333
00:15:56,800 --> 00:16:00,700
And then what we'll do is we'll pass that the stuff that we were

334
00:16:00,700 --> 00:16:02,600
passing here, right?

335
00:16:02,600 --> 00:16:05,000
So, you know, the frames per second and the milliseconds per

336
00:16:05,200 --> 00:16:07,700
a frame and and all that sort of stuff, right?

337
00:16:08,100 --> 00:16:10,300
So you know, it can compute those on its own.

338
00:16:10,300 --> 00:16:14,600
So really all we would need to know I think Mmm.

339
00:16:17,200 --> 00:16:18,300
What was this doing?

340
00:16:19,300 --> 00:16:21,600
This was assuming on a gigahertz machine.

341
00:16:21,600 --> 00:16:26,100
Something I guess I don't know what this was so I don't think we.

342
00:16:26,700 --> 00:16:28,200
Yeah I don't know what I don't.

343
00:16:28,200 --> 00:16:29,500
What is that trying to say?

344
00:16:29,500 --> 00:16:31,000
I have no idea what that's trying say.

345
00:16:32,300 --> 00:16:35,900
That's a good question and we don't know so milliseconds per frame.

346
00:16:36,700 --> 00:16:39,900
Where is that actually getting computed?

347
00:16:41,200 --> 00:16:43,300
Went through to get seconds elapsed.

348
00:16:43,800 --> 00:16:45,100
Last counter

349
00:16:47,400 --> 00:16:50,600
So, that's just some kind of that's actually Counting.

350
00:16:51,900 --> 00:16:52,900
Up a little bit.

351
00:16:52,900 --> 00:16:53,100
Right?

352
00:16:53,100 --> 00:16:57,400
Before we do the flip went through to buffer and window.

353
00:16:57,400 --> 00:17:02,400
That's not really where we would want it to be right.

354
00:17:03,800 --> 00:17:06,400
I guess we're timing that because we don't want to time this Windows

355
00:17:06,400 --> 00:17:07,000
thing.

356
00:17:07,900 --> 00:17:09,400
No, that's really weird.

357
00:17:09,800 --> 00:17:11,000
That's really weird.

358
00:17:11,300 --> 00:17:14,300
So why did we do that?

359
00:17:14,900 --> 00:17:16,500
Why did we do it there?

360
00:17:17,099 --> 00:17:19,800
Because we I guess because we didn't want to wait.

361
00:17:19,800 --> 00:17:20,800
We didn't.

362
00:17:20,800 --> 00:17:21,300
That's how many

363
00:17:21,500 --> 00:17:24,000
S, it took before, Windows did its thing.

364
00:17:25,200 --> 00:17:27,200
So I really want both of these.

365
00:17:27,400 --> 00:17:28,600
I guess is what I'm saying.

366
00:17:28,800 --> 00:17:30,200
So I think here's what I'm going to do.

367
00:17:30,300 --> 00:17:32,700
I want, I want I want more.

368
00:17:34,700 --> 00:17:38,300
So, what I want to do here is instead of doing it this way, instead of

369
00:17:38,300 --> 00:17:42,200
just having milliseconds per frame, I want multiple strobe points,

370
00:17:42,300 --> 00:17:42,800
right?

371
00:17:42,900 --> 00:17:46,900
I want to be able to sort of, in cure be able to write down like,

372
00:17:46,900 --> 00:17:49,700
where some different stuff happened, right?

373
00:17:50,600 --> 00:17:54,800
So where we have this large unit integer with the last counter, right?

374
00:17:55,300 --> 00:17:58,500
I want to update that at the very end of the frame, probably I'm

375
00:17:58,500 --> 00:17:59,100
thinking.

376
00:18:00,000 --> 00:18:03,500
And then I want to take a few markers where we comp, where we compute

377
00:18:03,500 --> 00:18:07,600
those milliseconds, so that I can pass them all in, right?

378
00:18:07,700 --> 00:18:10,400
So what I'm going to do, here's how I'm going to do that.

379
00:18:10,500 --> 00:18:13,200
I'm going to go to handmade platform, and of course, we're going to

380
00:18:13,200 --> 00:18:17,200
make that debug call, but I'm also going to in addition to that debug

381
00:18:17,200 --> 00:18:22,800
call, I'm going to go ahead and make a thing where we'll have sort of

382
00:18:22,800 --> 00:18:23,200
a

383
00:18:24,200 --> 00:18:28,100
A packet, if you will of information.

384
00:18:28,100 --> 00:18:32,000
So, like debug frame and

385
00:18:33,400 --> 00:18:35,100
Info, right?

386
00:18:35,300 --> 00:18:38,100
And that will get passed a bunch of stuff.

387
00:18:38,800 --> 00:18:41,900
So this will be like a different counters or something like this.

388
00:18:42,300 --> 00:18:46,900
So they'll be you know one of these lines basically.

389
00:18:47,400 --> 00:18:51,300
Right where we do milliseconds per frame, we could just make it s /

390
00:18:51,300 --> 00:18:55,700
because there's no, this is just multiplying by by 1,000 there.

391
00:18:59,900 --> 00:19:03,200
We can just fill out a struct, that has a bunch of these in it and I

392
00:19:03,200 --> 00:19:04,500
think that's what I'd like to do.

393
00:19:04,800 --> 00:19:05,900
So up at the top.

394
00:19:07,100 --> 00:19:11,400
Will do debug frame and info and we'll do like, debug what would be

395
00:19:11,400 --> 00:19:16,100
like frame and info and then frame and info will take a strobe at

396
00:19:16,100 --> 00:19:17,000
various points.

397
00:19:17,500 --> 00:19:21,300
So, what we'll do here is we'll say like, you know, this right here

398
00:19:21,300 --> 00:19:24,700
will be executable ready.

399
00:19:26,000 --> 00:19:28,500
Something like that and that'll be win32.

400
00:19:30,500 --> 00:19:32,100
Get seconds elapsed.

401
00:19:34,200 --> 00:19:36,500
To get seconds elapsed.

402
00:19:37,200 --> 00:19:39,000
Yeah, like so.

403
00:19:42,500 --> 00:19:43,700
So we will.

404
00:19:47,200 --> 00:19:47,800
There we go.

405
00:19:48,600 --> 00:19:53,300
So on frame and info, we'll go ahead and say when the executables

406
00:19:53,300 --> 00:19:53,900
ready to go.

407
00:19:54,700 --> 00:19:55,900
We'll put that in there.

408
00:19:56,100 --> 00:19:59,000
So now we kind of know what's going to happen there.

409
00:19:59,000 --> 00:20:04,200
Now, I want last counter and I guess just the current counter, so it's

410
00:20:04,200 --> 00:20:06,800
like the get it's like, get wall clock itself, right?

411
00:20:06,800 --> 00:20:08,300
Is the thing that I'm going to want to do.

412
00:20:08,700 --> 00:20:13,000
So I want to know between the last time I took the counter and the get

413
00:20:13,000 --> 00:20:14,600
wall clock, right?

414
00:20:15,200 --> 00:20:16,500
I'm going to have

415
00:20:17,100 --> 00:20:19,800
How many seconds it was till we got to that, right?

416
00:20:19,800 --> 00:20:26,800
Something like this, and then we'll just kind of place these in here.

417
00:20:26,800 --> 00:20:31,400
So we go through here, we get messages pending.

418
00:20:31,600 --> 00:20:34,900
So we do a bunch of like input processing, right?

419
00:20:35,000 --> 00:20:39,100
This is all input processing in here.

420
00:20:41,100 --> 00:20:45,400
If not Global pause, then we actually go through and do this stuff.

421
00:20:45,400 --> 00:20:49,700
So I'm not sure where I guess I would want to do it.

422
00:20:49,800 --> 00:20:53,700
So that after we do all of this controller stuff, right?

423
00:20:54,000 --> 00:20:57,600
Then we would do it like this, probably if not Google pause, so we

424
00:20:57,600 --> 00:20:59,800
always take right here.

425
00:21:00,200 --> 00:21:03,000
Like input process for something input process.

426
00:21:04,600 --> 00:21:07,700
Like that and then we keep going.

427
00:21:08,100 --> 00:21:10,100
So then we have inside here.

428
00:21:10,200 --> 00:21:15,600
Oops, when we go through, and do all of the game updating stuff, I

429
00:21:15,600 --> 00:21:18,800
guess, well we've got some audio stuff that happens here as well,

430
00:21:19,100 --> 00:21:19,600
right?

431
00:21:20,000 --> 00:21:22,800
We got the sound, the audio, the audio still a little janky in this

432
00:21:22,800 --> 00:21:23,300
platform layer.

433
00:21:23,300 --> 00:21:27,100
It's pretty janky, which is unfortunate, but we come through here, we

434
00:21:27,100 --> 00:21:33,900
do the audio, and then we do the, and then we do the sleep and all

435
00:21:33,900 --> 00:21:34,300
that stuff.

436
00:21:34,700 --> 00:21:40,700
So where does the game actually get updated whereas game update and

437
00:21:40,700 --> 00:21:41,200
render?

438
00:21:42,900 --> 00:21:43,300
Okay.

439
00:21:43,500 --> 00:21:46,300
Oh wait, game dot update and render.

440
00:21:47,500 --> 00:21:49,600
So it's right there, right?

441
00:21:50,100 --> 00:21:52,100
So probably I do one more.

442
00:21:52,100 --> 00:21:53,000
I do it here.

443
00:21:57,300 --> 00:22:00,500
Don't really know if we even using Global pause but not really

444
00:22:00,500 --> 00:22:01,200
important.

445
00:22:01,800 --> 00:22:09,600
So, this is act after Hoops after game update game updated and then in

446
00:22:09,600 --> 00:22:12,100
here we have, like the audio getting updated.

447
00:22:12,300 --> 00:22:14,600
All right, let's see.

448
00:22:15,200 --> 00:22:18,200
Doot-doot-doot game.

449
00:22:18,200 --> 00:22:19,500
Updated seconds.

450
00:22:19,500 --> 00:22:21,900
Elapsed while Target yeah.

451
00:22:23,100 --> 00:22:23,900
So, there we go.

452
00:22:27,000 --> 00:22:28,700
Last counter work counter.

453
00:22:28,700 --> 00:22:29,700
That's all good.

454
00:22:29,700 --> 00:22:31,200
If not little paws.

455
00:22:32,600 --> 00:22:34,000
It'll go ahead and do that.

456
00:22:34,500 --> 00:22:37,000
So this is audio updated.

457
00:22:38,200 --> 00:22:44,500
And then inside here, when it does the flip wall clock.

458
00:22:46,000 --> 00:22:46,600
Yeah.

459
00:22:47,300 --> 00:22:52,000
Now, it occurs to me that we could probably do this just with our

460
00:22:53,400 --> 00:22:56,200
With our deep, we could just do this with the.

461
00:22:56,300 --> 00:22:59,700
Well, I don't want to do that because we kind of had that in the other

462
00:22:59,700 --> 00:23:00,400
compilations.

463
00:23:00,400 --> 00:23:02,300
I don't really want to push that, so we could do that with other

464
00:23:02,300 --> 00:23:03,500
things, but I'm not gonna do that.

465
00:23:04,200 --> 00:23:09,400
So then we go through here, we do sort of our frame display, whatever

466
00:23:09,400 --> 00:23:13,500
we need to do to actually do the frame display and do the sink and all

467
00:23:13,500 --> 00:23:14,100
that stuff.

468
00:23:14,200 --> 00:23:18,200
And then, so that at the very end, right is is just here.

469
00:23:19,600 --> 00:23:23,000
yeah, so I don't know, I feel kind of like

470
00:23:25,200 --> 00:23:29,700
I feel kind of like the global pause should not have paused this, but

471
00:23:29,900 --> 00:23:31,100
I guess that's will.

472
00:23:31,100 --> 00:23:34,600
I guess we'll cross that bridge when we come to it because I feel like

473
00:23:34,600 --> 00:23:36,600
this stuff, you kind of want to have happen.

474
00:23:37,200 --> 00:23:39,400
I guess, the reason we were doing that is because we didn't want the

475
00:23:39,400 --> 00:23:43,300
debug time markers to advance or something like that, but that's

476
00:23:43,300 --> 00:23:46,100
something we can probably just get rid of now.

477
00:23:46,500 --> 00:23:49,100
And maybe start to look at making this a little bit, a little, bit

478
00:23:49,100 --> 00:23:52,500
more intelligently done, right?

479
00:23:53,800 --> 00:23:54,800
What's the yeah?

480
00:23:55,300 --> 00:23:59,700
Okay, so then at the very end when we actually do this

481
00:24:01,800 --> 00:24:07,700
I guess we've got this is the sleep, the weight, right?

482
00:24:08,200 --> 00:24:09,800
And so that's going to be right here.

483
00:24:12,200 --> 00:24:14,600
And then this stuff we can just do

484
00:24:15,800 --> 00:24:17,500
Again, there we go.

485
00:24:18,400 --> 00:24:21,200
I don't really this is debug code.

486
00:24:21,200 --> 00:24:22,900
I don't, I don't want.

487
00:24:23,000 --> 00:24:24,800
We're just going to get rid of this stuff because I want to start

488
00:24:24,800 --> 00:24:25,800
cleaning this up anyway.

489
00:24:26,200 --> 00:24:29,900
So we're going to get rid of that and we're going to get rid of

490
00:24:29,900 --> 00:24:33,300
probably this stuff as well, because will take, I think we're may want

491
00:24:33,300 --> 00:24:36,400
to take a little bit of a closer look, although well, I guess we can

492
00:24:36,400 --> 00:24:39,600
leave just that last that cycle counting there and we'll pass that

493
00:24:39,600 --> 00:24:40,200
down as well.

494
00:24:40,400 --> 00:24:44,400
This stuff with the FPS and all that nonsense, all this stuff is going

495
00:24:44,400 --> 00:24:45,000
to go away.

496
00:24:45,400 --> 00:24:45,900
Right?

497
00:24:46,900 --> 00:24:50,600
So that'll go away and then we'll just do if handmade internal here

498
00:24:51,200 --> 00:24:51,800
and there we go.

499
00:24:52,100 --> 00:24:54,600
Okay, so that's getting a little bit better.

500
00:24:54,600 --> 00:24:57,600
Still not quite there yet, so there's audio updated down.

501
00:24:57,600 --> 00:25:04,700
This is going to be sleep or frame timing app, you know, frame timing,

502
00:25:04,800 --> 00:25:08,800
complete or frame weight complete

503
00:25:09,600 --> 00:25:11,900
Something like that framerate.

504
00:25:14,400 --> 00:25:15,300
Great complete.

505
00:25:15,900 --> 00:25:19,400
And then at the very end we do like the total thing, right?

506
00:25:19,400 --> 00:25:22,700
So at the very very end we just do like right before we call it or

507
00:25:22,700 --> 00:25:29,100
whatever we do you know end of frame, something like that.

508
00:25:30,500 --> 00:25:30,800
Yeah.

509
00:25:32,500 --> 00:25:36,400
Okay, so getting closer, and then we call this thing, we'd pass it

510
00:25:36,400 --> 00:25:37,100
this info.

511
00:25:37,400 --> 00:25:38,100
So we pass it.

512
00:25:38,100 --> 00:25:43,800
One of these guys so frame and info is going to be right there, and

513
00:25:43,800 --> 00:25:44,700
let's take a look.

514
00:25:44,800 --> 00:25:47,400
So flip wall clock.

515
00:25:47,400 --> 00:25:48,300
What is flip wall?

516
00:25:48,300 --> 00:25:49,900
Clock doing nowadays?

517
00:25:52,000 --> 00:25:54,300
Look wall clock out, it's syncing up at that.

518
00:25:54,300 --> 00:25:55,100
Okay, that's fine.

519
00:25:56,100 --> 00:26:00,100
And then encounter encounter is just doing.

520
00:26:00,100 --> 00:26:02,900
Yeah, this is just for the loop so we can actually use on frame.

521
00:26:02,900 --> 00:26:07,300
Wait complete, this end counter thing right here can actually move

522
00:26:07,300 --> 00:26:11,100
down to the end of frame so that can actually just be our actual end

523
00:26:11,100 --> 00:26:12,300
of frame counter.

524
00:26:12,300 --> 00:26:14,900
We don't need this anymore and the last counter update.

525
00:26:14,900 --> 00:26:17,800
Their this can just be instead of getting the wall clock, will just

526
00:26:17,800 --> 00:26:21,000
use the M counter and that's the end of the frame, right?

527
00:26:22,400 --> 00:26:25,500
So I think now we've sort of got the beginnings of what I wanted there

528
00:26:25,900 --> 00:26:26,900
and that's all good.

529
00:26:27,300 --> 00:26:30,300
So let's go through and now actually make the structure that

530
00:26:30,300 --> 00:26:33,200
corresponds to storing all that information that I just said that I

531
00:26:33,200 --> 00:26:34,100
wanted again.

532
00:26:34,100 --> 00:26:38,100
Just taking those strobe points along the way.

533
00:26:38,500 --> 00:26:40,200
So we've got end of frame.

534
00:26:40,400 --> 00:26:43,600
Is there we've got framerate.

535
00:26:43,600 --> 00:26:44,700
Wait, complete.

536
00:26:44,700 --> 00:26:49,400
Is there we've got audio updated is there?

537
00:26:50,400 --> 00:26:51,600
We've got game, oops.

538
00:26:51,800 --> 00:26:54,100
Game updated is there?

539
00:26:54,800 --> 00:26:56,800
We've got input processed.

540
00:26:58,000 --> 00:26:59,800
We've got executable ready.

541
00:27:01,300 --> 00:27:03,600
And that's it, I think.

542
00:27:04,700 --> 00:27:06,900
Yeah, that's all good.

543
00:27:08,700 --> 00:27:13,100
All right, so assuming we pass all that in we now just need a function

544
00:27:13,400 --> 00:27:14,300
that will do that.

545
00:27:14,300 --> 00:27:17,100
Debug, you know, that will actually finish off that debug stuff.

546
00:27:17,600 --> 00:27:20,800
So we need to actually Define this guy here because obviously, you

547
00:27:20,800 --> 00:27:25,700
know, we wouldn't actually be able to have that happen.

548
00:27:26,500 --> 00:27:29,100
We can't call a function function that we have never defined.

549
00:27:29,400 --> 00:27:31,800
So inside here, we do something like saying.

550
00:27:31,800 --> 00:27:35,000
Okay, let's go ahead and Define this thing.

551
00:27:35,000 --> 00:27:36,300
I guess we'll find it right here.

552
00:27:36,700 --> 00:27:38,400
So we've got debug

553
00:27:38,500 --> 00:27:42,100
Frame and is our new function.

554
00:27:42,900 --> 00:27:46,100
We don't need it to really return anything.

555
00:27:46,800 --> 00:27:50,200
It's going to take some game memory, right?

556
00:27:50,200 --> 00:27:54,900
It's going to take the game memory and then just a debug frame and

557
00:27:54,900 --> 00:27:55,400
info.

558
00:27:56,400 --> 00:28:01,100
That it can use to know some extra information from the platform layer

559
00:28:01,100 --> 00:28:03,800
about what was going on and we'll probably put more stuff in there as

560
00:28:03,800 --> 00:28:08,200
we go, right.

561
00:28:08,200 --> 00:28:10,500
Okay.

562
00:28:10,500 --> 00:28:14,000
So debug platform right.

563
00:28:14,000 --> 00:28:17,400
Entire file is not the name of this thing, that's actually called

564
00:28:17,400 --> 00:28:18,100
debug frame.

565
00:28:18,100 --> 00:28:23,900
And and actually debug platform, frame end is probably the right name

566
00:28:23,900 --> 00:28:26,300
for it and something

567
00:28:26,500 --> 00:28:28,800
That there we go.

568
00:28:28,800 --> 00:28:29,300
Oops.

569
00:28:30,700 --> 00:28:31,300
Okay.

570
00:28:31,800 --> 00:28:36,700
And so if I go ahead and compile that then I am just left with

571
00:28:36,700 --> 00:28:42,500
whatever my random errors are, let's see what they are.

572
00:28:42,500 --> 00:28:46,300
Okay, so our game now has to have that actually passed in.

573
00:28:46,800 --> 00:28:51,500
So we just have to go take inside the platform API, where we have all

574
00:28:51,500 --> 00:28:52,400
this other stuff.

575
00:28:52,600 --> 00:28:58,500
We now just have one more debug function that the game can can provide

576
00:28:58,500 --> 00:28:58,900
to us.

577
00:28:59,100 --> 00:29:00,400
And again this is just a

578
00:29:00,500 --> 00:29:03,700
The game provides us things that the platform layer calls into.

579
00:29:04,700 --> 00:29:08,100
So we have debug platform frame end,

580
00:29:09,900 --> 00:29:15,000
Bug brain and so that will just get passed in now.

581
00:29:15,000 --> 00:29:18,100
And so, we just have to be able to kind of fill that out somewhere.

582
00:29:19,400 --> 00:29:23,100
Where 0.32 game code.

583
00:29:24,200 --> 00:29:25,600
What did I do?

584
00:29:25,600 --> 00:29:26,100
Auto.

585
00:29:26,100 --> 00:29:29,000
That's the, that's the wrong way round.

586
00:29:29,400 --> 00:29:30,400
I don't know what I'm thinking.

587
00:29:31,400 --> 00:29:32,800
I don't know where my head is today.

588
00:29:33,700 --> 00:29:35,200
That's not what we wanted.

589
00:29:35,200 --> 00:29:39,500
We want that to actually be in the game itself because

590
00:29:39,600 --> 00:29:43,700
Something that the game actually defines, right?

591
00:29:43,700 --> 00:29:45,300
That's actually one of these.

592
00:29:46,400 --> 00:29:49,100
You know, I'm saying, so we want this to be.

593
00:29:49,100 --> 00:29:52,200
We want this to be not something, not an actual pointer.

594
00:29:52,700 --> 00:29:54,000
We want this to be something.

595
00:29:55,500 --> 00:29:59,500
That's actually defined out in the game side of things.

596
00:30:00,300 --> 00:30:00,800
Right.

597
00:30:01,300 --> 00:30:04,200
So we want that like here, that makes sense.

598
00:30:05,200 --> 00:30:06,700
So, this should actually be called.

599
00:30:06,700 --> 00:30:13,100
Well, now, I'll still call it that, but it ain't a platform thing is,

600
00:30:13,100 --> 00:30:16,700
my point, it's actually game side, it does the platform doesn't

601
00:30:16,700 --> 00:30:17,300
provide to the game.

602
00:30:17,300 --> 00:30:18,800
The game provides for the platform.

603
00:30:20,200 --> 00:30:23,900
So yeah, I think that's all we really need their.

604
00:30:25,500 --> 00:30:26,300
Yeah.

605
00:30:26,400 --> 00:30:30,600
So then in win32, you know, where we're actually calling game update

606
00:30:30,600 --> 00:30:31,800
and render, for example,

607
00:30:33,000 --> 00:30:34,300
We can just grab.

608
00:30:36,000 --> 00:30:36,600
That guy.

609
00:30:36,600 --> 00:30:41,600
So, in here, we just go, okay, you know, the, the Deep, oops, that's

610
00:30:41,600 --> 00:30:42,000
good.

611
00:30:42,600 --> 00:30:49,000
The debug frame end, we would call game frame, and oops, debug.

612
00:30:49,500 --> 00:30:52,500
And we would just get that from the game.

613
00:30:53,500 --> 00:30:57,400
And in this case, we wouldn't probably effect is valid for that

614
00:30:57,500 --> 00:31:00,400
because if the game didn't provide us a debug thing to call back,

615
00:31:00,600 --> 00:31:02,300
that's okay, right.

616
00:31:03,300 --> 00:31:06,700
You know, we'd crashed if we tried to call it but we just don't have

617
00:31:06,700 --> 00:31:07,400
to call it.

618
00:31:07,900 --> 00:31:11,600
You know, instead what we could do is just say in here.

619
00:31:11,700 --> 00:31:16,800
If there isn't one of these then don't then don't call it right, only

620
00:31:16,800 --> 00:31:18,900
call it, if it exists and then we don't care.

621
00:31:18,900 --> 00:31:23,100
If the game never provided one, it doesn't matter to anybody, right?

622
00:31:23,300 --> 00:31:24,700
That seems like a better idea.

623
00:31:25,500 --> 00:31:29,300
So let's go ahead and add that into win32 game code there.

624
00:31:30,600 --> 00:31:35,500
So now we've got debug frame end, debug frame end and that should be

625
00:31:35,500 --> 00:31:36,300
sufficient.

626
00:31:36,700 --> 00:31:43,000
Let's see, oops, got an extra got a spurious, little Spirits little

627
00:31:44,000 --> 00:31:44,900
close there.

628
00:31:45,400 --> 00:31:48,400
Okay, so this should do like absolutely nothing, right?

629
00:31:49,000 --> 00:31:53,100
And it does because the game doesn't actually Define that yet so it's

630
00:31:53,100 --> 00:31:54,200
just plain not there.

631
00:31:54,800 --> 00:31:59,200
So if we want to add that in all we would have to do is I think.

632
00:31:59,200 --> 00:31:59,500
Do we do?

633
00:31:59,500 --> 00:32:00,000
We do our

634
00:32:00,800 --> 00:32:01,600
On the command line.

635
00:32:01,600 --> 00:32:03,900
I remember, it's been such a long time, we do.

636
00:32:04,400 --> 00:32:07,400
So, what we can do here is we can just say, okay, we've got one more

637
00:32:07,600 --> 00:32:11,300
export that, we'd like to export, it's called debug frame end

638
00:32:12,900 --> 00:32:16,700
Like so, and so now, you'll notice you now I'm just expecting that to

639
00:32:16,700 --> 00:32:22,400
be exported from, you know, from the platform back and maybe I'll just

640
00:32:22,400 --> 00:32:25,600
add a game in there just to be a little bit more consistent with the

641
00:32:25,600 --> 00:32:25,700
way.

642
00:32:25,700 --> 00:32:27,800
This thing works, right?

643
00:32:29,200 --> 00:32:34,600
Okay, so now, if I do this, I should get an error.

644
00:32:34,800 --> 00:32:35,300
Yeah.

645
00:32:35,500 --> 00:32:39,300
Which is that I didn't make one of those, right?

646
00:32:39,600 --> 00:32:43,200
So, now, if I go into handmade dot CPP, I should be able to make one

647
00:32:43,200 --> 00:32:47,100
of those like, the debug reset function, for example, which is

648
00:32:47,100 --> 00:32:51,100
currently getting called, you can see it getting cold down here.

649
00:32:51,600 --> 00:32:54,800
What I could do is I could actually make that debug reset call, be

650
00:32:54,800 --> 00:32:57,500
something that ends up getting called separately.

651
00:33:00,000 --> 00:33:04,100
Well, I guess technically debug reset, resets the debugging print out

652
00:33:04,100 --> 00:33:04,400
stuff.

653
00:33:04,400 --> 00:33:08,600
So, maybe we'll start by just keeping it separate because maybe it's

654
00:33:08,600 --> 00:33:09,200
sort of is.

655
00:33:10,000 --> 00:33:12,700
So anyway, when we need to do this sort of exporting stuff, you can

656
00:33:12,700 --> 00:33:17,700
kind of see the way that we were doing it before here is our template

657
00:33:17,700 --> 00:33:18,600
for that, right?

658
00:33:18,900 --> 00:33:22,100
So if I want to, I can just come down here and say, all right, here is

659
00:33:22,100 --> 00:33:29,700
my extra and see, debug should probably actually again, keep it a

660
00:33:29,700 --> 00:33:29,900
little

661
00:33:30,000 --> 00:33:30,900
It consistent.

662
00:33:31,000 --> 00:33:33,600
Debug game frame end like so.

663
00:33:35,300 --> 00:33:35,900
Do it that way.

664
00:33:36,300 --> 00:33:39,200
Game frame and game frame.

665
00:33:39,300 --> 00:33:44,100
And and then now I know that that will get called and I got to go just

666
00:33:44,100 --> 00:33:45,300
change these guys here.

667
00:33:45,400 --> 00:33:46,000
This is

668
00:33:48,100 --> 00:33:48,500
yeah.

669
00:33:51,400 --> 00:33:53,500
And there we go.

670
00:33:57,600 --> 00:33:59,100
That's about it.

671
00:33:59,100 --> 00:34:02,800
So now we're getting called with that information, right?

672
00:34:03,100 --> 00:34:06,000
And now we need to actually start doing something with that

673
00:34:06,000 --> 00:34:06,600
information.

674
00:34:06,600 --> 00:34:07,900
That would be useful.

675
00:34:08,800 --> 00:34:12,600
Now, fortunately, I can just straight-up do this right?

676
00:34:12,600 --> 00:34:18,500
I can just grab the stuff and do all of this in here except the print

677
00:34:18,500 --> 00:34:19,500
out, right?

678
00:34:19,500 --> 00:34:23,500
Because nothing in here is actually going to be a problem.

679
00:34:23,600 --> 00:34:26,000
It's all stuff that that would just work, I believe.

680
00:34:27,600 --> 00:34:31,400
Except for, of course, the fact that I need to actually call this way,

681
00:34:32,100 --> 00:34:32,600
right?

682
00:34:33,100 --> 00:34:37,400
So I need like something like, you know, update debug records or

683
00:34:37,400 --> 00:34:39,300
something like that.

684
00:34:39,800 --> 00:34:41,000
And then make this guy,

685
00:34:43,199 --> 00:34:43,800
Like so.

686
00:34:45,699 --> 00:34:50,300
Update debug records and that should just work because there's nothing

687
00:34:50,300 --> 00:34:53,199
that I've but actually relies on the rest of the game stuff here.

688
00:34:53,699 --> 00:34:56,500
So as far as I know, I should be able to do something like that,

689
00:34:56,500 --> 00:34:58,800
without a whole lot of problem.

690
00:34:59,000 --> 00:35:02,700
So this will allow me to capture that information at the end of the

691
00:35:02,700 --> 00:35:04,100
frame, which is what I wanted.

692
00:35:04,200 --> 00:35:08,500
So really all I need to do now is Port, the printout code to print out

693
00:35:08,500 --> 00:35:12,000
of something that is not, right is not

694
00:35:17,500 --> 00:35:20,700
That instant, you know, the actual debug counters themselves.

695
00:35:21,400 --> 00:35:23,000
So, how do I want to do that?

696
00:35:24,100 --> 00:35:28,900
I don't really know how I want to do that but I suspect we could

697
00:35:28,900 --> 00:35:30,300
figure it out pretty easily.

698
00:35:30,300 --> 00:35:34,500
And so what I'm going to do again when you're not sure what to do, you

699
00:35:34,500 --> 00:35:36,900
start from the side of the code that you know, right.

700
00:35:37,200 --> 00:35:40,800
I know that I want to print this stuff out in a more robust way than I

701
00:35:40,800 --> 00:35:44,600
was with more information stuff like that, that could sort of track

702
00:35:44,600 --> 00:35:46,700
stuff over time and all those other sorts of things.

703
00:35:47,100 --> 00:35:51,100
So what I'd like to do is have something where instead of this output,

704
00:35:51,100 --> 00:35:53,700
debug records which does, with the counter count, the counters and

705
00:35:53,700 --> 00:35:54,100
that sort of

706
00:35:54,100 --> 00:35:54,500
Of stuff.

707
00:35:54,700 --> 00:35:58,000
What I'd like to do is change this overlay cycle counter stuff, you

708
00:35:58,000 --> 00:35:58,200
know?

709
00:35:58,200 --> 00:35:59,800
And maybe even move this stuff down.

710
00:36:00,000 --> 00:36:01,900
Here to just to the update call.

711
00:36:01,900 --> 00:36:03,400
Like so, right.

712
00:36:04,800 --> 00:36:05,600
Like that.

713
00:36:06,100 --> 00:36:09,500
I like this call now to be something that just does the rendering in a

714
00:36:09,500 --> 00:36:11,200
sane way, right?

715
00:36:11,400 --> 00:36:12,800
And I can move this stuff up here.

716
00:36:12,800 --> 00:36:16,000
So now I don't even have to pre declare that stuff, which is what I

717
00:36:16,000 --> 00:36:19,300
was having to do before because now it can actually be just in line

718
00:36:19,300 --> 00:36:22,900
with the rest of the rendering stuff and and all that, all that juicy

719
00:36:22,900 --> 00:36:23,300
goodness.

720
00:36:23,300 --> 00:36:24,600
So I can get rid of this as well.

721
00:36:25,500 --> 00:36:28,800
So now, what I want to do is I want this stuff and again we still

722
00:36:28,800 --> 00:36:32,400
haven't replace that standard IO sprintf from the old platform layer

723
00:36:32,400 --> 00:36:34,500
stuff, which, at some point, we would like to do

724
00:36:34,700 --> 00:36:38,000
It just seems like not the most instructive time for me to stop and

725
00:36:38,000 --> 00:36:39,500
explain how to print out a number.

726
00:36:40,000 --> 00:36:41,000
But we'll do that.

727
00:36:41,600 --> 00:36:43,700
After we sort of finish this this other stuff,

728
00:36:46,300 --> 00:36:46,800
So yeah.

729
00:36:47,100 --> 00:36:49,900
So in here, I'm going to go ahead and get rid of this stuff.

730
00:36:51,000 --> 00:36:51,600
There we go.

731
00:36:52,400 --> 00:36:56,600
And now we're in a situation where we can start to tune these routines

732
00:36:56,600 --> 00:37:00,000
to be doing, whatever it is that we think we might want them to do.

733
00:37:00,700 --> 00:37:03,300
So, what is the first thing that I need to be able to do is be able to

734
00:37:03,300 --> 00:37:06,100
get some debug memory out of the system, right?

735
00:37:06,100 --> 00:37:10,000
I need to be able to get, you know, whatever.

736
00:37:10,000 --> 00:37:11,600
We're going to store our debug memory in.

737
00:37:11,800 --> 00:37:14,300
And obviously, we don't want that to be.

738
00:37:15,300 --> 00:37:16,000
We really don't.

739
00:37:16,200 --> 00:37:17,900
That memory to be stuff.

740
00:37:17,900 --> 00:37:21,900
That's that's used by anything else we want, we want to sort of

741
00:37:21,900 --> 00:37:25,100
unknown chunk for that and so I feel like, I don't know, I mean maybe

742
00:37:25,100 --> 00:37:29,500
this isn't true, but I feel like we almost want there to be a third

743
00:37:29,600 --> 00:37:31,900
tier in our platform system, right?

744
00:37:32,700 --> 00:37:34,600
Which is debug memory memory.

745
00:37:34,600 --> 00:37:38,500
That we put debug stuff into because in here we've kind of got this,

746
00:37:38,800 --> 00:37:39,600
this situation.

747
00:37:44,500 --> 00:37:47,000
Where we passed permanent storage and transient storage?

748
00:37:47,000 --> 00:37:49,700
I feel like we want one more which is like debug storage.

749
00:37:50,800 --> 00:37:54,500
You know, and I think we wanted then test the game when we actually

750
00:37:54,500 --> 00:37:57,000
go, you know, when we're sort of clean things up for shipping and so

751
00:37:57,000 --> 00:37:59,400
on, we want to be able to set that size 20.

752
00:37:59,500 --> 00:38:02,300
So the debug stuff, you know, if the debug stuff isn't running, it

753
00:38:02,300 --> 00:38:05,000
doesn't use it and so that you know, the release version, the game

754
00:38:05,000 --> 00:38:08,500
just doesn't pass anything into the debug storage, right?

755
00:38:09,400 --> 00:38:14,200
That seems to me to be probably, that's what I would like to see

756
00:38:14,200 --> 00:38:15,400
happen, right?

757
00:38:15,900 --> 00:38:19,400
And that way I can do something like all right, so now we've just got

758
00:38:19,400 --> 00:38:20,400
another thing which is

759
00:38:20,600 --> 00:38:21,700
The debug state.

760
00:38:23,100 --> 00:38:24,300
And I can keep it totally separate.

761
00:38:24,300 --> 00:38:27,300
In fact, I don't even have to put it in there, I'll put it over here.

762
00:38:27,500 --> 00:38:30,900
So now we can sort of have it isolated off in a separate file.

763
00:38:30,900 --> 00:38:33,700
It's going to be like debug State and the debug State.

764
00:38:33,700 --> 00:38:35,600
I don't even know what that's going to have in it right now.

765
00:38:36,600 --> 00:38:43,500
Debug you know counter State who even knows who knows it's anyone's

766
00:38:43,500 --> 00:38:44,000
guess really?

767
00:38:44,300 --> 00:38:48,500
But in the debug counter state will have like debug counter.

768
00:38:48,500 --> 00:38:52,300
Snapshot, I'm making this stuff up, completely making this stuff up

769
00:38:52,500 --> 00:38:52,800
but I'm just

770
00:38:53,000 --> 00:38:54,900
I give you the the idea of what we might want.

771
00:38:54,900 --> 00:38:58,300
So, in here, you know, we'd have something like, okay, we've got state

772
00:38:58,800 --> 00:38:59,800
for a bunch of

773
00:39:00,000 --> 00:39:02,800
Counters or whatever, you know, something like this.

774
00:39:03,600 --> 00:39:05,400
And who knows how many there are.

775
00:39:05,400 --> 00:39:07,800
You know, we say that we've got, you know, up to that many counters

776
00:39:07,800 --> 00:39:10,600
doesn't even matter will kind of.

777
00:39:10,800 --> 00:39:11,500
Look at that.

778
00:39:12,000 --> 00:39:13,900
We can always just change it, it's only for debug code.

779
00:39:13,900 --> 00:39:15,600
So, no one cares at all, how much that is?

780
00:39:16,200 --> 00:39:18,800
And then inside the debug counter State, we just have some snapshots,

781
00:39:18,800 --> 00:39:19,200
right?

782
00:39:19,300 --> 00:39:22,000
And so here's the snapshots and, and who knows how many snapshots

783
00:39:22,000 --> 00:39:22,600
there are?

784
00:39:23,000 --> 00:39:28,400
Maybe we store, you know, the past, you know, 120 frames or something

785
00:39:28,500 --> 00:39:29,600
like that, I don't know.

786
00:39:30,000 --> 00:39:30,500
Why not?

787
00:39:31,300 --> 00:39:34,300
And inside the snapshot, we just have, like, okay, this stuff that

788
00:39:34,300 --> 00:39:35,300
would have been here.

789
00:39:35,400 --> 00:39:37,300
You know, we store this information.

790
00:39:37,300 --> 00:39:40,800
So you know, inside the debug counter snapshot

791
00:39:42,600 --> 00:39:45,600
We would store the part that's actually relevant for the particular

792
00:39:45,600 --> 00:39:46,000
frame.

793
00:39:46,000 --> 00:39:51,100
You know, and then the stuff that's not actually relevant to a frame,

794
00:39:51,500 --> 00:39:54,900
we would put in the debug counter State itself, right?

795
00:39:54,900 --> 00:39:58,700
So this, this information would be stored, there something like

796
00:39:58,700 --> 00:39:59,500
something like that.

797
00:40:00,400 --> 00:40:03,600
And this would probably have pre separated these guys out because why

798
00:40:03,600 --> 00:40:04,900
not, right?

799
00:40:06,000 --> 00:40:09,200
So, you know, this is what I'm envisioning.

800
00:40:09,400 --> 00:40:11,900
So to something that's going to store that stuff for us and

801
00:40:12,100 --> 00:40:13,200
A printout of that.

802
00:40:15,500 --> 00:40:21,400
Again, I really just don't have any particular idea of what I want

803
00:40:21,400 --> 00:40:21,600
here.

804
00:40:21,600 --> 00:40:23,600
I was just kind of slamming something in there so you can kind of tell

805
00:40:23,600 --> 00:40:24,500
what I'm talking about.

806
00:40:24,500 --> 00:40:27,100
What I'm going to do is I'm going to go write the actual print out

807
00:40:27,100 --> 00:40:29,700
code here, and then whatever the printout code, kind of thinks maybe

808
00:40:29,700 --> 00:40:33,900
that it would want their will go in and make that be what happens,

809
00:40:33,900 --> 00:40:34,500
right?

810
00:40:34,900 --> 00:40:35,400
Okay.

811
00:40:39,700 --> 00:40:44,000
Okay, so in output, debug records.

812
00:40:45,400 --> 00:40:48,200
Really, we don't need the separate function anymore because all of our

813
00:40:48,200 --> 00:40:50,700
records will presumably just be aggregated together.

814
00:40:51,300 --> 00:40:53,900
I would assume that's my assumption anyway.

815
00:40:54,400 --> 00:40:57,100
I don't know if it's an accurate assumption but it's an assumption

816
00:40:57,100 --> 00:40:57,800
nonetheless.

817
00:40:58,200 --> 00:40:59,000
So, here we go.

818
00:40:59,800 --> 00:41:05,700
And now, what I need to do is this is going to sort of somehow get

819
00:41:05,700 --> 00:41:07,300
debug State out of it, right?

820
00:41:07,300 --> 00:41:12,200
So it's going to have debug State, debug State like that.

821
00:41:12,600 --> 00:41:14,400
And it's just going to take the memory

822
00:41:14,700 --> 00:41:16,900
Going to cold-cast that just like we always do.

823
00:41:17,700 --> 00:41:21,100
When we first enter the platform layer, we're going to go ahead and

824
00:41:21,100 --> 00:41:23,400
get that out of the debug storage, right?

825
00:41:24,900 --> 00:41:28,300
And maybe what I'll do here is assumed that if this thing was called,

826
00:41:29,300 --> 00:41:35,000
we're only going to activate if, if this debug storage is nonzero,

827
00:41:35,400 --> 00:41:36,000
right?

828
00:41:36,000 --> 00:41:39,600
So that way, if anyone sets that 20 we just won't we just won't try to

829
00:41:39,600 --> 00:41:42,900
do anything at all so that you can just turn it off as like a kill

830
00:41:42,900 --> 00:41:43,500
switch.

831
00:41:44,500 --> 00:41:44,900
All right.

832
00:41:44,900 --> 00:41:50,200
So in here we would then just Loop we Loop over counter.

833
00:41:50,900 --> 00:41:52,400
I guess this would be exactly the same.

834
00:41:52,500 --> 00:41:56,900
It just now we would look at the debug State and we'd say how many are

835
00:41:57,000 --> 00:41:59,800
of these are there and I guess

836
00:42:00,000 --> 00:42:01,800
Here we might do like counter account.

837
00:42:01,800 --> 00:42:04,400
Just so we know how many there are, like, whatever the maximum one is

838
00:42:04,400 --> 00:42:07,600
that we've seen we put in there or something like that.

839
00:42:08,000 --> 00:42:08,600
So we just go.

840
00:42:08,600 --> 00:42:10,400
Okay, we'll go over counter count.

841
00:42:10,700 --> 00:42:14,200
We take a look at all of the counters that we have so counter States.

842
00:42:14,800 --> 00:42:18,800
And we're going to have this debug counter State and for now we can

843
00:42:18,800 --> 00:42:21,700
actually just print it out like we were putting it out.

844
00:42:23,300 --> 00:42:26,000
And all we would really need is for the cycle, count, hit count.

845
00:42:26,600 --> 00:42:32,000
We just need to be able to get that out of out of this, one of the

846
00:42:32,000 --> 00:42:33,400
snapshots, right?

847
00:42:33,800 --> 00:42:35,000
And for now, we'll just try.

848
00:42:35,000 --> 00:42:39,300
We'll just use Snapshot zero because we haven't quite gotten far

849
00:42:39,300 --> 00:42:41,100
enough to start thinking about that yet.

850
00:42:41,500 --> 00:42:44,000
So, for now we'll just say, OK, we'll do snapshot

851
00:42:45,000 --> 00:42:46,800
0.

852
00:42:46,800 --> 00:42:48,500
Hit count like so.

853
00:42:50,300 --> 00:42:53,200
Snapshot zero cycle count.

854
00:42:54,000 --> 00:42:54,600
There we go.

855
00:42:55,600 --> 00:42:56,900
So that

856
00:43:04,500 --> 00:43:05,600
should be sufficient.

857
00:43:05,900 --> 00:43:09,400
And then the rest of this stuff should in theory, just work, right?

858
00:43:09,400 --> 00:43:12,100
Because we have the file name, we have the function name, all of that

859
00:43:12,100 --> 00:43:13,100
stuff should just work.

860
00:43:13,300 --> 00:43:19,100
So if I go ahead and compile it, we should be good to go right, there

861
00:43:19,100 --> 00:43:19,500
we go.

862
00:43:20,200 --> 00:43:26,800
So snapshots is not your right, so lowercase s

863
00:43:27,800 --> 00:43:28,400
There we go.

864
00:43:30,700 --> 00:43:31,100
See.

865
00:43:33,200 --> 00:43:37,700
Okay, so that's all good but of course we don't actually initialize

866
00:43:37,700 --> 00:43:38,400
this yet.

867
00:43:38,700 --> 00:43:42,100
So I'm imagining, I don't even remember if we if we set, if we

868
00:43:42,100 --> 00:43:43,500
initially the game, start, we probably do.

869
00:43:43,500 --> 00:43:43,700
Yes.

870
00:43:43,700 --> 00:43:45,800
So basically, what's going to happen is that codes.

871
00:43:45,800 --> 00:43:49,000
Just going to see that there's a zero there, it's not going to run so

872
00:43:49,000 --> 00:43:52,200
it's not going to matter when it calls overlay cycle counters, right?

873
00:43:53,300 --> 00:43:57,400
Okay, so the next thing we got to do is actually make this guy.

874
00:43:58,200 --> 00:44:01,300
When we do our, when we do our updates here, we got to make this guy,

875
00:44:01,300 --> 00:44:03,800
actually do something intelligent as well, right?

876
00:44:03,800 --> 00:44:06,800
We have to make him actually capture the counters and put them into

877
00:44:06,800 --> 00:44:07,800
the debug State.

878
00:44:08,100 --> 00:44:11,400
That's, you know, that's that's just what we got to do.

879
00:44:12,300 --> 00:44:15,200
So we come in here and do the exact same thing.

880
00:44:15,200 --> 00:44:16,700
We did in the other function.

881
00:44:17,500 --> 00:44:18,600
So there we go.

882
00:44:18,600 --> 00:44:19,500
We take a look at that.

883
00:44:19,500 --> 00:44:21,600
Debug storage and off we go.

884
00:44:24,300 --> 00:44:24,500
Ernie.

885
00:44:26,100 --> 00:44:28,900
So I think we started 10 minutes late today, so my guess so we

886
00:44:28,900 --> 00:44:32,800
actually have 15 minutes left which is probably enough to actually get

887
00:44:32,800 --> 00:44:34,300
this all working anyway.

888
00:44:34,700 --> 00:44:37,700
So we do our debugging frame and becoming a receipt.

889
00:44:37,700 --> 00:44:40,000
If we've got the book storage, assuming that we have a debug storage,

890
00:44:40,000 --> 00:44:43,000
we then want to go ahead and update all the debug records, which means

891
00:44:43,000 --> 00:44:47,600
we want to copy them out from where they are, you know, grab out the

892
00:44:47,600 --> 00:44:52,900
current values and stuff them in to these actual records, right?

893
00:44:53,200 --> 00:44:55,600
So, I think the right way to do that.

894
00:44:56,200 --> 00:44:58,600
Would be to say, okay?

895
00:45:00,000 --> 00:45:07,100
Go through all the counters that are here and yeah, like at the start

896
00:45:07,100 --> 00:45:12,200
at this point in debug State, let's go ahead and set the counter count

897
00:45:12,200 --> 00:45:13,000
to zero.

898
00:45:13,800 --> 00:45:17,400
And then as we update, the records will increment it.

899
00:45:17,400 --> 00:45:21,200
So that we know how many total counters we saw, right?

900
00:45:21,500 --> 00:45:25,000
So yeah, you know what I'm saying?

901
00:45:25,100 --> 00:45:25,900
You know, I'm saying to.

902
00:45:26,100 --> 00:45:29,900
So basically, we've got inside the debug thing.

903
00:45:30,000 --> 00:45:31,700
here inside handmade debug

904
00:45:33,300 --> 00:45:36,200
We would have debug counter State.

905
00:45:38,200 --> 00:45:42,000
This is like the destination, this is like the source, right?

906
00:45:42,200 --> 00:45:45,900
We're reading from this, debug counter, we are putting it into this,

907
00:45:45,900 --> 00:45:51,300
debug counter counter States like so

908
00:45:53,400 --> 00:45:55,800
And so that will basically copy these in.

909
00:45:56,200 --> 00:45:59,000
So we go ahead and do the atomic exchange to reset the value.

910
00:45:59,000 --> 00:46:03,900
Now we've got these two out so now we can say just snapshots again at

911
00:46:03,900 --> 00:46:06,800
the moment will just write in 20 and then in the future we're going to

912
00:46:06,800 --> 00:46:09,700
want to write into you know, not zero.

913
00:46:11,900 --> 00:46:13,000
Grab that out.

914
00:46:13,200 --> 00:46:16,900
And while we're at it, we can also grab all the other relevant

915
00:46:16,900 --> 00:46:19,200
information that we actually want.

916
00:46:19,200 --> 00:46:22,000
Like, the file name, the function name in the line, number function,

917
00:46:22,000 --> 00:46:27,500
name function name, line number line number, right?

918
00:46:28,300 --> 00:46:31,600
So that should grab all of the information that we need, I would

919
00:46:31,600 --> 00:46:32,100
think.

920
00:46:33,000 --> 00:46:33,800
And, of course, right.

921
00:46:33,800 --> 00:46:39,100
We've got a pass that debug state in here so that these guys know

922
00:46:39,100 --> 00:46:41,100
where they're supposed to be writing, debug state32.

923
00:46:41,700 --> 00:46:47,600
State and I think, let's see that Source.

924
00:46:48,300 --> 00:46:50,800
I think that should do it.

925
00:46:50,800 --> 00:46:53,600
So again, if I run this, we won't see anything yet because we don't

926
00:46:53,600 --> 00:46:56,600
actually give it any memory to work with, but, you know, that's fine.

927
00:46:56,700 --> 00:47:00,700
It won't be very difficult to give it some memory to work with.

928
00:47:00,700 --> 00:47:02,400
And so now inside handmade

929
00:47:03,700 --> 00:47:07,300
Win32 here when we're doing our allocations.

930
00:47:07,500 --> 00:47:08,200
Let's see.

931
00:47:08,900 --> 00:47:11,600
When we set the game, memory game memory.

932
00:47:12,700 --> 00:47:16,500
So, what we should be able to do, here is set the sizes, so that we

933
00:47:16,500 --> 00:47:18,500
actually get some other stuff.

934
00:47:18,800 --> 00:47:22,200
Let's see, where we actually allocate that from.

935
00:47:22,200 --> 00:47:23,800
I don't see it.

936
00:47:23,800 --> 00:47:24,200
There it is.

937
00:47:24,200 --> 00:47:28,900
Total size and here you can see it doing it's, it's thing, right?

938
00:47:29,600 --> 00:47:32,600
So very simple, nothing to it.

939
00:47:33,400 --> 00:47:39,100
Just make one more of these that actually sits at the end of

940
00:47:39,100 --> 00:47:39,700
everything.

941
00:47:40,400 --> 00:47:45,600
And then all we should have to do is add one more size in here like

942
00:47:45,900 --> 00:47:46,600
this.

943
00:47:49,500 --> 00:47:50,000
Right.

944
00:47:50,800 --> 00:47:58,200
And all that we would do then is say that the debug storage size is

945
00:47:58,200 --> 00:47:59,800
some amount of memory.

946
00:48:00,100 --> 00:48:02,600
And I don't know how much debug memory we want and we don't really

947
00:48:02,600 --> 00:48:06,000
care, maybe it's infinite.

948
00:48:06,900 --> 00:48:08,700
So that's all we should really need.

949
00:48:09,900 --> 00:48:14,200
And I'm not sure what you are complaining about.

950
00:48:15,800 --> 00:48:16,900
Debug state.

951
00:48:16,900 --> 00:48:18,800
That is not what I wanted.

952
00:48:18,800 --> 00:48:20,800
I wanted to debug storage.

953
00:48:21,200 --> 00:48:22,400
Let's try that again.

954
00:48:23,500 --> 00:48:25,700
So, let's see if that does anything for us.

955
00:48:26,500 --> 00:48:27,200
It does.

956
00:48:28,700 --> 00:48:31,000
So there's those values, right?

957
00:48:35,200 --> 00:48:37,000
So now we're going through that whole system.

958
00:48:38,300 --> 00:48:43,200
Let's go ahead and start to sort of push through that a little bit.

959
00:48:43,200 --> 00:48:46,500
This is not going to be a particularly efficient way to do this, so I

960
00:48:46,500 --> 00:48:47,100
don't know.

961
00:48:47,100 --> 00:48:49,600
You know, depending on the number of snapshots this this might be a

962
00:48:49,600 --> 00:48:55,200
little bit ugly, but let's just say, you know, let's just say that we

963
00:48:55,200 --> 00:48:57,600
wanted to start recording those snapshots now.

964
00:48:58,900 --> 00:49:02,000
What I could do is inside that debug State structure, right?

965
00:49:02,000 --> 00:49:03,900
I've got a bunch of snapshots of these timers.

966
00:49:04,400 --> 00:49:07,800
What I could do is say, all right, let's just figure that there's

967
00:49:07,800 --> 00:49:09,500
going to be a snapshot index.

968
00:49:11,400 --> 00:49:12,900
For something like this, right?

969
00:49:13,600 --> 00:49:15,400
And the snapshot index will just Inc.

970
00:49:15,400 --> 00:49:18,700
Every time we update the debug records, it will go ahead and ink it

971
00:49:18,800 --> 00:49:19,300
right.

972
00:49:19,800 --> 00:49:23,700
So at the end of this, it'll do a debug State snapshot index.

973
00:49:24,300 --> 00:49:28,000
It will increment that and then it'll see if the debug state

974
00:49:28,000 --> 00:49:33,400
snapshotting to X is greater than or equal to the number of snapshots,

975
00:49:33,700 --> 00:49:34,300
right?

976
00:49:34,300 --> 00:49:39,800
And we could even do Define Max, debug, snapshot count 12.

977
00:49:40,000 --> 00:49:42,500
To your something like that or just be debug Snapchat account.

978
00:49:44,100 --> 00:49:51,200
If we go over that value then we will just set it back to zero.

979
00:49:53,100 --> 00:49:55,200
So that allows us to now have a rolling buffer.

980
00:49:55,200 --> 00:49:59,700
So, in here, it can just say, oh, debug State, snapshot index.

981
00:50:00,700 --> 00:50:04,200
Now we're going to capture a whole bunch of these and so if I just run

982
00:50:04,200 --> 00:50:08,100
this as is now we'll just get a strobe because we're only printing out

983
00:50:08,100 --> 00:50:09,500
the zeroeth one.

984
00:50:09,700 --> 00:50:14,500
So now it'll just show us the value and every 120 frames it will show

985
00:50:14,500 --> 00:50:15,600
us a new value.

986
00:50:15,600 --> 00:50:19,800
So roughly every 4 seconds, it will update to analyze.

987
00:50:19,800 --> 00:50:21,600
What you just saw that it did, right?

988
00:50:26,400 --> 00:50:32,300
So now what we'd like to do is figure out some ways of looking at

989
00:50:32,300 --> 00:50:33,600
those values.

990
00:50:33,600 --> 00:50:34,900
I don't know.

991
00:50:34,900 --> 00:50:37,900
Let's, let's, you know, we don't have very much time left.

992
00:50:37,900 --> 00:50:40,800
So let's just think a little bit about what we might want to see.

993
00:50:40,800 --> 00:50:46,300
They're just randomly thinking it through.

994
00:50:46,300 --> 00:50:49,300
So again, not gonna think about the performance of drawing this at

995
00:50:49,300 --> 00:50:49,700
all.

996
00:50:50,400 --> 00:50:54,500
I'm just going to go ahead and do some weird stuff.

997
00:50:55,500 --> 00:50:59,800
First thing is first for this counter index.

998
00:51:00,000 --> 00:51:03,600
Let's just go ahead and compute min-max, average kind of a situation.

999
00:51:04,200 --> 00:51:08,600
So, here we go, min max.

1000
00:51:10,000 --> 00:51:15,900
and do we have a, do we have a float Min in a float Max yet, people

1001
00:51:17,200 --> 00:51:18,500
Do we have one float?

1002
00:51:18,500 --> 00:51:19,500
Min we do.

1003
00:51:20,100 --> 00:51:20,900
So, there we go.

1004
00:51:24,000 --> 00:51:25,200
Real pretty to maximum.

1005
00:51:26,800 --> 00:51:32,400
So I will set those values to inverse and then I will set the average

1006
00:51:32,700 --> 00:51:33,500
20.

1007
00:51:33,500 --> 00:51:37,500
I will then go through all of the snapshot snapshot index.

1008
00:51:37,500 --> 00:51:43,800
Equals zero, snapshot index is less than debug snapshot count and I

1009
00:51:43,800 --> 00:51:47,600
will run through all of the values in the counter.

1010
00:51:49,600 --> 00:51:53,700
And I will see what we get.

1011
00:51:54,400 --> 00:51:56,800
And I suppose the min max average here, you know what, I'm just going

1012
00:51:56,800 --> 00:51:58,200
to go, you know,

1013
00:51:59,600 --> 00:51:59,900
Let's go.

1014
00:51:59,900 --> 00:52:04,000
Football will call this a statistic.

1015
00:52:07,500 --> 00:52:08,000
Something.

1016
00:52:09,300 --> 00:52:19,800
So, Min backs, average, we will say debug statistic hit count the big

1017
00:52:19,800 --> 00:52:29,900
statistic cycle count right equals in it statistic for empty

1018
00:52:29,900 --> 00:52:30,800
statistic.

1019
00:52:34,700 --> 00:52:36,000
Deep bugs.

1020
00:52:37,500 --> 00:52:38,300
Yeah.

1021
00:52:39,700 --> 00:52:43,700
So we'll just take one of those guys will create an empty one of them.

1022
00:52:44,100 --> 00:52:47,700
Like, so empty, debug statistic like that.

1023
00:52:48,800 --> 00:52:49,900
And inside there.

1024
00:52:49,900 --> 00:52:53,800
We'll just go ahead and do this initialization code that I have right

1025
00:52:53,800 --> 00:52:54,300
here.

1026
00:52:54,700 --> 00:53:01,000
So there's debug statistic result, we will say result, Min results,

1027
00:53:01,000 --> 00:53:01,800
Max

1028
00:53:02,400 --> 00:53:03,600
Result average.

1029
00:53:05,300 --> 00:53:06,400
And will return that.

1030
00:53:07,400 --> 00:53:09,900
So now we can make one for the hit count and one for the cycle count

1031
00:53:09,900 --> 00:53:12,800
and as we go through each of these, we can just do something like

1032
00:53:13,700 --> 00:53:20,200
accumulate statistic and we will pass the hip count statistic like

1033
00:53:20,200 --> 00:53:28,400
that and the hit count to my statistic cycle count and that like that.

1034
00:53:29,400 --> 00:53:34,700
You know, and so we'll take the snapshot index that we want to grab.

1035
00:53:35,300 --> 00:53:38,700
And now we should be able to compute those out.

1036
00:53:38,700 --> 00:53:41,400
And we'll do like finalized statistic here.

1037
00:53:43,100 --> 00:53:48,000
Oh, I guess we could, you know, what begin debug statistic and debug

1038
00:53:48,000 --> 00:53:48,800
statistic.

1039
00:53:50,600 --> 00:53:53,400
Might be the better way to go, right.

1040
00:53:53,400 --> 00:53:54,100
That seems.

1041
00:53:54,200 --> 00:53:55,500
Yeah, you know what?

1042
00:53:55,500 --> 00:53:56,600
That's that's it.

1043
00:53:56,600 --> 00:53:59,100
That's the sauce right there, right?

1044
00:53:59,300 --> 00:53:59,800
You

1045
00:54:00,000 --> 00:54:03,800
It, you know, it don't try to tell me you don't because you do.

1046
00:54:04,500 --> 00:54:05,900
All right, so hit count.

1047
00:54:06,500 --> 00:54:08,000
And then we've got cycle count.

1048
00:54:09,300 --> 00:54:13,100
And so, what we'll do here is, we'll call this getting debug statistic

1049
00:54:13,500 --> 00:54:19,000
that will take the debug statistic in that will just take the stat.

1050
00:54:19,200 --> 00:54:23,800
So that will initialize it to, you know, an empty sort of the empty

1051
00:54:23,800 --> 00:54:30,700
State and then we will have an Envy bug statistic, which will double

1052
00:54:30,700 --> 00:54:31,000
check.

1053
00:54:31,000 --> 00:54:36,800
It'll say like if State Min equals real titty to maximum it knows, it

1054
00:54:36,800 --> 00:54:38,300
never accumulated anything.

1055
00:54:39,200 --> 00:54:43,200
What it will do is it will then set the Min and Max 20 just to avoid

1056
00:54:43,200 --> 00:54:46,500
putting out some giant bogus number, right?

1057
00:54:47,400 --> 00:54:49,500
And then I guess, you know what, the other thing we need is here is we

1058
00:54:49,500 --> 00:54:53,500
need to count in here so because we're going to need the average.

1059
00:54:53,500 --> 00:54:56,500
So we want to divide by how many we had something like that.

1060
00:54:57,600 --> 00:55:02,000
In fact, I guess we know that, we know that if we saw any values, the

1061
00:55:02,000 --> 00:55:03,300
Min and the max will get set.

1062
00:55:03,300 --> 00:55:08,900
So I guess all we have to do is just say if the count equals 0, right?

1063
00:55:09,100 --> 00:55:13,600
Then we know we're in a sort of or I guess we'll say not equal to 0.

1064
00:55:13,900 --> 00:55:16,900
Then we know that we're in a situation where the Min and Max are valid

1065
00:55:17,000 --> 00:55:21,200
and the average can be divided by the count to get the actual number,

1066
00:55:21,400 --> 00:55:22,600
if we didn't see anything.

1067
00:55:22,600 --> 00:55:25,500
If there's no for some reason, we didn't see any statistics, when

1068
00:55:25,500 --> 00:55:29,000
we're doing this, then we'll set the Min and Max 20, and the average,

1069
00:55:29,000 --> 00:55:32,000
and the count can stay at zero because they won't have changed, right?

1070
00:55:32,700 --> 00:55:36,000
So then, let's go ahead and do update debug statistic.

1071
00:55:38,400 --> 00:55:41,900
And that's going to take just some value.

1072
00:55:43,000 --> 00:55:43,600
Right.

1073
00:55:43,900 --> 00:55:47,100
And, you know, we could also say, let's do this in float in double.

1074
00:55:47,700 --> 00:55:49,000
Because, again, this is debug code.

1075
00:55:49,000 --> 00:55:51,700
We really don't care too much about it speed because we're going to

1076
00:55:51,700 --> 00:55:54,200
not include that really in our side, unless it becomes ownerís.

1077
00:55:54,500 --> 00:55:56,900
So we'll do that in double so that they can handle really large values

1078
00:55:56,900 --> 00:55:57,000
to.

1079
00:55:57,000 --> 00:56:00,400
If we're trying to count some crazy high cycle counts or who knows

1080
00:56:00,400 --> 00:56:00,800
what?

1081
00:56:01,000 --> 00:56:03,000
We'll just give ourselves a little head room there to make sure that

1082
00:56:03,000 --> 00:56:03,900
there's no problem.

1083
00:56:04,300 --> 00:56:07,600
So State count plus equals 1, I guess the count itself.

1084
00:56:07,600 --> 00:56:09,100
Probably doesn't have to be that.

1085
00:56:09,100 --> 00:56:12,300
So we could, we could say that the count itself was was going to be

1086
00:56:12,300 --> 00:56:12,700
something a

1087
00:56:12,800 --> 00:56:14,200
It more sane.

1088
00:56:14,200 --> 00:56:18,800
So will, you know, will back off at tiny a little smidge?

1089
00:56:19,300 --> 00:56:21,900
Just a Touch, just a little poke.

1090
00:56:23,600 --> 00:56:25,000
So, yeah.

1091
00:56:25,200 --> 00:56:29,500
So assuming that the state count is valid then we will divide by that

1092
00:56:29,500 --> 00:56:30,000
value.

1093
00:56:30,600 --> 00:56:34,500
If the count is not valued, we will just clear everything and call it

1094
00:56:34,500 --> 00:56:36,200
a day, right?

1095
00:56:37,300 --> 00:56:39,700
When we go to update it, we increment the count.

1096
00:56:40,300 --> 00:56:42,800
We will set the Min and the max.

1097
00:56:43,100 --> 00:56:47,500
So base will say, like if the Min is greater than the value, we want

1098
00:56:47,500 --> 00:56:53,800
to update it to be the value, you know, similarly if the max is less

1099
00:56:53,800 --> 00:56:55,900
than the value, we want it to be the value.

1100
00:56:56,200 --> 00:56:59,800
And finally we just want to Summit into the average, right?

1101
00:57:01,000 --> 00:57:03,600
So that we get, we get that value.

1102
00:57:04,400 --> 00:57:07,700
So that allows us to kind of do, sadistic sorbets rarely we could have

1103
00:57:07,700 --> 00:57:09,900
baked some things in there because we know like the number of

1104
00:57:09,900 --> 00:57:11,800
snapshots, there are and other stuff like that.

1105
00:57:12,200 --> 00:57:15,400
So we don't really have to quite do it that much, but this would just,

1106
00:57:15,400 --> 00:57:16,800
it's just a little general-purpose thing.

1107
00:57:16,800 --> 00:57:20,300
We can use anytime we want to do something like this.

1108
00:57:20,600 --> 00:57:22,300
So now, we've got our statistics

1109
00:57:24,300 --> 00:57:28,000
Oops, it means that I didn't mean stat people.

1110
00:57:28,400 --> 00:57:29,900
I mean I didn't mean State.

1111
00:57:29,900 --> 00:57:30,700
I meant that.

1112
00:57:33,100 --> 00:57:36,300
Don't ask me, don't ask me how the E got on there.

1113
00:57:36,700 --> 00:57:38,400
It just did.

1114
00:57:40,100 --> 00:57:51,700
All right, so this goes away and now accumulate debug debug

1115
00:57:54,000 --> 00:57:55,900
Identifier not found.

1116
00:57:57,000 --> 00:57:57,400
Oh.

1117
00:57:59,300 --> 00:57:59,900
There we go.

1118
00:58:01,300 --> 00:58:02,700
Conditional expression.

1119
00:58:03,300 --> 00:58:06,000
All right, so now we can go ahead and print this out.

1120
00:58:06,000 --> 00:58:10,800
And so what I can say is okay, if the hit count value is greater than

1121
00:58:10,800 --> 00:58:11,400
zero,

1122
00:58:13,700 --> 00:58:15,000
Then we'll print it out.

1123
00:58:15,000 --> 00:58:18,200
When we go to print it out, we'll just, we'll just do the average for

1124
00:58:18,200 --> 00:58:20,100
now or something like that.

1125
00:58:21,200 --> 00:58:21,800
Right?

1126
00:58:21,800 --> 00:58:22,300
I don't know.

1127
00:58:25,800 --> 00:58:26,700
That's not really well.

1128
00:58:26,700 --> 00:58:27,800
That's, and that's a pretty good.

1129
00:58:27,800 --> 00:58:29,300
Well, that's a pretty good thing to.

1130
00:58:31,100 --> 00:58:33,300
We'll talk about that in just one second.

1131
00:58:33,300 --> 00:58:36,600
I just want to get this working first hit count.

1132
00:58:37,900 --> 00:58:40,300
Oh, hit count.

1133
00:58:41,100 --> 00:58:42,200
What do I want to do there?

1134
00:58:42,200 --> 00:58:44,100
I want to say, if the hit count Max.

1135
00:58:44,100 --> 00:58:48,500
So if any, if anyone ever hit it in, any run, in the past, we want to

1136
00:58:48,500 --> 00:58:49,000
see it.

1137
00:58:49,900 --> 00:58:53,400
Okay, well, that doesn't look good people.

1138
00:58:53,900 --> 00:58:55,500
I don't think that's working properly.

1139
00:58:55,700 --> 00:58:58,700
Just gonna go ahead and say it, don't think that's working properly.

1140
00:58:59,600 --> 00:59:03,200
Oh, well, of course, these are floating Point values that would be the

1141
00:59:03,200 --> 00:59:04,200
that would be the first one.

1142
00:59:04,900 --> 00:59:05,300
So yeah.

1143
00:59:05,300 --> 00:59:09,200
If we want these we'd have to then cast them down to you 32s in order

1144
00:59:09,200 --> 00:59:10,200
to print them out.

1145
00:59:10,900 --> 00:59:11,600
Which is fine.

1146
00:59:13,900 --> 00:59:14,500
There we go.

1147
00:59:21,400 --> 00:59:28,300
Okay, so in theory, these are our average values.

1148
00:59:32,000 --> 00:59:37,200
In theory and so they're still going to fluctuate and stuff like that.

1149
00:59:37,400 --> 00:59:41,100
But now we have a values, not particularly useful what we're doing

1150
00:59:41,100 --> 00:59:43,000
here, but we're getting closer.

1151
00:59:43,900 --> 00:59:46,200
So the first thing I want to say was, well, we don't really want to

1152
00:59:46,200 --> 00:59:48,300
divide the average by the average.

1153
00:59:48,500 --> 00:59:50,800
That's not what we want here, right?

1154
00:59:50,800 --> 00:59:52,800
We wanted how many cycles for hit.

1155
00:59:53,000 --> 00:59:56,100
So if we're going to print out averages, we want the average number of

1156
00:59:56,100 --> 00:59:57,300
cycles per hit.

1157
00:59:57,300 --> 00:59:59,900
Not the average number of Cycles divided by the average,

1158
01:00:00,000 --> 01:00:02,800
Numbers of hits as a surly, right?

1159
01:00:04,200 --> 01:00:07,000
Because I don't necessarily think those are the same thing.

1160
01:00:07,200 --> 01:00:08,100
Does that make sense?

1161
01:00:09,600 --> 01:00:10,700
I'd have to think it through.

1162
01:00:10,800 --> 01:00:17,500
So if I was to sum up all of the Cycles we're almost out of time but I

1163
01:00:17,500 --> 01:00:19,100
want to know the answer to this question.

1164
01:00:19,300 --> 01:00:22,800
So I'm just going to say that I get to know it and that's just the way

1165
01:00:22,800 --> 01:00:23,200
it's going to go.

1166
01:00:23,200 --> 01:00:26,900
So day 179, okay?

1167
01:00:27,300 --> 01:00:29,600
So what I want to know here is I want to know

1168
01:00:30,000 --> 01:00:32,500
Cycle count and hit count average.

1169
01:00:32,500 --> 01:00:36,800
So if I have something where I'm like, you know, cycle count over kit

1170
01:00:36,800 --> 01:00:42,200
count, and I want to know these things summed up, right?

1171
01:00:42,300 --> 01:00:48,800
I want to know what the average would be of say, three of these guys,

1172
01:00:49,300 --> 01:00:49,900
right?

1173
01:00:50,800 --> 01:00:54,900
Then the question is, does that equate, right?

1174
01:00:54,900 --> 01:00:59,800
Like, meaning, is that equal to the average,

1175
01:01:00,000 --> 01:01:04,400
Of those guys / each other, right?

1176
01:01:04,400 --> 01:01:06,200
So if I divide by 3,

1177
01:01:10,900 --> 01:01:11,800
On each side.

1178
01:01:12,100 --> 01:01:12,500
Right?

1179
01:01:12,600 --> 01:01:16,800
Do I get do I get the correct answer, right?

1180
01:01:19,200 --> 01:01:24,100
So looking, you know, looking through this if I was to divide these

1181
01:01:24,100 --> 01:01:27,300
guys by 3 then really all that's going to happen is each of these

1182
01:01:27,300 --> 01:01:29,300
quantities is going to be divided by three, right?

1183
01:01:29,300 --> 01:01:32,100
So this this side of the equation is just going to divide.

1184
01:01:32,300 --> 01:01:36,700
I can divide each of these by 3 and not change the equation at.

1185
01:01:36,700 --> 01:01:46,900
All right, so that would just be C 0 / 3 H 0 plus c 1 / 3, H 1 plus c

1186
01:01:46,900 --> 01:01:47,200
2.

1187
01:01:47,200 --> 01:01:48,600
/ 3 h 2

1188
01:01:49,300 --> 01:01:49,900
Right.

1189
01:01:50,400 --> 01:01:51,300
There's nothing.

1190
01:01:51,900 --> 01:01:56,600
There's nothing mysterious about that on this side over here.

1191
01:01:58,100 --> 01:02:01,500
What I've actually got is.

1192
01:02:01,900 --> 01:02:03,700
Yeah, I mean,

1193
01:02:06,900 --> 01:02:10,500
If you're dividing by 3 on, both of these.

1194
01:02:11,500 --> 01:02:12,300
Right?

1195
01:02:12,600 --> 01:02:19,200
Then essentially you're not really changing the equation at, all

1196
01:02:19,800 --> 01:02:20,400
right?

1197
01:02:20,700 --> 01:02:21,500
Meaning.

1198
01:02:26,700 --> 01:02:31,300
Meaning if I divide both of these by three, then that's just going to

1199
01:02:31,300 --> 01:02:32,800
be equivalent to.

1200
01:02:33,500 --> 01:02:35,900
I can I can just that comes directly out, right?

1201
01:02:35,900 --> 01:02:37,600
That's just going to be equivalent to this.

1202
01:02:43,100 --> 01:02:43,600
Right?

1203
01:02:44,400 --> 01:02:46,700
So I don't know this.

1204
01:02:48,000 --> 01:02:51,400
Does not look like that to me.

1205
01:02:52,500 --> 01:02:57,200
I could be wrong certainly, but I guess there's only one way to really

1206
01:02:57,200 --> 01:02:59,800
defined out and that would be two.

1207
01:03:00,000 --> 01:03:01,200
Actually combine this.

1208
01:03:01,400 --> 01:03:06,400
So in order to combine this, yeah, I'd have to go ahead and actually

1209
01:03:06,400 --> 01:03:11,600
do sort of the composite where I actually add them up with each other.

1210
01:03:11,600 --> 01:03:16,000
So, the lowest common denominator would be H 0, H, 1 h 2.

1211
01:03:16,200 --> 01:03:16,900
Right.

1212
01:03:17,200 --> 01:03:20,300
And I don't, I don't see any way that's going to be the same.

1213
01:03:20,700 --> 01:03:22,100
That seems totally ludicrous.

1214
01:03:22,400 --> 01:03:27,900
Maybe we'll ask pseudonyms 73, but that doesn't look at all proper to

1215
01:03:27,900 --> 01:03:28,200
me.

1216
01:03:28,800 --> 01:03:29,800
So anyway,

1217
01:03:30,000 --> 01:03:30,000
Way.

1218
01:03:31,000 --> 01:03:32,300
I should spend a little more time on that.

1219
01:03:32,300 --> 01:03:33,400
My math skills are so Rusty.

1220
01:03:33,400 --> 01:03:35,000
I just don't do that much math anymore.

1221
01:03:35,700 --> 01:03:39,900
But anyway, so what I wanted to point out was the nice part about

1222
01:03:39,900 --> 01:03:40,000
this.

1223
01:03:40,000 --> 01:03:44,000
Debug statistic thing is, if we want another thing that's an average

1224
01:03:44,100 --> 01:03:45,900
we just add it right?

1225
01:03:45,900 --> 01:03:48,300
We do like, hit over cycle.

1226
01:03:49,600 --> 01:03:53,500
Something like that and we just say begin debug statistic hit over

1227
01:03:53,500 --> 01:03:58,300
cycle and we just literally, you know, do whatever the thing is that

1228
01:03:58,300 --> 01:04:04,500
we were doing down here we just accumulate that in right so we say

1229
01:04:04,500 --> 01:04:12,700
like you know, accumulate or or H OC or whatever.

1230
01:04:12,700 --> 01:04:13,300
Right.

1231
01:04:13,400 --> 01:04:18,200
Equal 0 0 will say h OC here.

1232
01:04:18,700 --> 01:04:22,200
And then we'll just do like an if like so.

1233
01:04:25,000 --> 01:04:28,500
Yeah, actually, I guess I want cycle count.

1234
01:04:31,600 --> 01:04:32,800
Over hit count.

1235
01:04:35,000 --> 01:04:37,700
And I want both of those to be our 64's.

1236
01:04:38,700 --> 01:04:41,100
So assuming that the cycle count, I'm sorry.

1237
01:04:41,100 --> 01:04:45,100
The hit count is not 0, then I can compute the average.

1238
01:04:46,100 --> 01:04:48,800
Like so right?

1239
01:04:49,100 --> 01:04:53,200
Then I can accumulate that into hit over cycle now.

1240
01:04:54,800 --> 01:04:59,500
I'm actually taking the average guaranteed we properly I don't have to

1241
01:04:59,600 --> 01:05:02,400
try and figure out if there's a way to make the math work out, I can

1242
01:05:02,400 --> 01:05:05,600
just actually do that directly right.

1243
01:05:07,700 --> 01:05:11,600
And it's pretty free for us to do that so we can just add arbitrarily

1244
01:05:11,800 --> 01:05:15,900
more statistics in there and it really doesn't become any more owners

1245
01:05:15,900 --> 01:05:16,500
to do so.

1246
01:05:17,700 --> 01:05:22,900
Okay so we're still a little bit ways away from having a full-fledged

1247
01:05:23,000 --> 01:05:26,000
like historical piece of debug information to look at

1248
01:05:28,000 --> 01:05:31,200
We now store it all but we don't really get much out of it.

1249
01:05:32,000 --> 01:05:34,700
So next dream, we can concentrate.

1250
01:05:34,700 --> 01:05:38,200
Now that we've got it all set up, we can just concentrate on actually

1251
01:05:38,200 --> 01:05:40,700
using it to print out useful stuff.

1252
01:05:40,900 --> 01:05:41,500
Right?

1253
01:05:42,400 --> 01:05:43,500
And that's what we'll do next time.

1254
01:05:44,200 --> 01:05:48,100
So with that, I will go to the Q&A.

1255
01:05:50,300 --> 01:05:52,200
And take some questions.

1256
01:05:53,200 --> 01:05:54,800
Yeah.

1257
01:05:55,100 --> 01:05:57,700
If you have questions about what we did in today's stream plz, press

1258
01:05:57,700 --> 01:05:59,700
them with q: and I

1259
01:06:00,000 --> 01:06:00,600
Answer them.

1260
01:06:01,800 --> 01:06:02,500
Right now.

1261
01:06:12,100 --> 01:06:13,200
Questions.

1262
01:06:16,300 --> 01:06:17,800
Questions.

1263
01:06:19,000 --> 01:06:21,500
Questions for me.

1264
01:06:26,400 --> 01:06:30,800
Elvin asks, is a c compiler faster in compiling C code than a C++

1265
01:06:30,800 --> 01:06:31,700
compiler compiling?

1266
01:06:31,700 --> 01:06:33,500
See like C++ code.

1267
01:06:35,000 --> 01:06:38,200
Too many variables in that depends on the C++ compiler.

1268
01:06:38,200 --> 01:06:39,600
And, you know,

1269
01:06:40,600 --> 01:06:42,900
Whether it's optimized for C code and whatever.

1270
01:06:42,900 --> 01:06:45,700
Usually C compilers are much faster because they're much simpler.

1271
01:06:45,700 --> 01:06:48,500
They don't have to worry about as much stuff, but that doesn't mean

1272
01:06:48,500 --> 01:06:51,600
you couldn't make a C++ compiler, probably go at a reasonable speed

1273
01:06:51,600 --> 01:06:52,900
when compiling see you like code.

1274
01:06:56,000 --> 01:07:01,100
I will say that if someone went and dug up turbo C and like, ran it on

1275
01:07:01,100 --> 01:07:05,200
a modern machine, it probably would compile faster than you could even

1276
01:07:05,200 --> 01:07:05,700
see.

1277
01:07:06,400 --> 01:07:09,800
Like, you're probably like, and it would be done because it used to

1278
01:07:09,800 --> 01:07:15,300
compile Superfast back on like 25, MHz machines and so on a machine

1279
01:07:15,300 --> 01:07:17,700
like today, I don't even know what it would do.

1280
01:07:17,700 --> 01:07:20,100
It would probably just like tear through it.

1281
01:07:20,100 --> 01:07:21,800
Like it was nothing.

1282
01:07:23,900 --> 01:07:26,000
Shouldn't it be cycle over hit?

1283
01:07:26,500 --> 01:07:27,700
Yeah, that's probably true.

1284
01:07:27,700 --> 01:07:28,300
It should be

1285
01:07:30,000 --> 01:07:33,000
Uber cycle cycle over it.

1286
01:07:43,700 --> 01:07:48,400
Elvin, is there a standard portable way in C to get a file star to a

1287
01:07:48,400 --> 01:07:52,000
block region in memory in Linux?

1288
01:07:52,000 --> 01:07:54,800
There's FM open, but I can't seem to find equipment and windows

1289
01:07:54,800 --> 01:07:57,100
internet seems to suggest map view of file.

1290
01:07:57,400 --> 01:07:59,100
But I dont think that is it.

1291
01:07:59,200 --> 01:08:03,300
I don't want a memory mapped file, just file star to a map region to

1292
01:08:03,300 --> 01:08:04,100
such a thing exists.

1293
01:08:04,100 --> 01:08:07,000
Or am I looking at this the wrong way?

1294
01:08:12,500 --> 01:08:15,000
So I guess I don't know if.

1295
01:08:15,500 --> 01:08:18,500
I mean, there's no reason you couldn't have that because the C runtime

1296
01:08:18,500 --> 01:08:22,200
Library could easily support it but file star is not an operating

1297
01:08:22,200 --> 01:08:22,700
system thing.

1298
01:08:22,700 --> 01:08:24,300
It's a c runtime Library thing.

1299
01:08:25,399 --> 01:08:27,600
So it really doesn't have anything to do with Windows Linux or

1300
01:08:27,600 --> 01:08:28,000
Windows.

1301
01:08:28,000 --> 01:08:30,700
Except for the fact that the runtime libraries on those two or tend to

1302
01:08:30,700 --> 01:08:34,399
be different, it has nothing to do with the operating system, right?

1303
01:08:34,800 --> 01:08:37,399
So, I don't think I've ever tried to open a file stored memory, but I

1304
01:08:37,399 --> 01:08:39,100
would be kind of surprised.

1305
01:08:39,100 --> 01:08:41,800
Actually, if you couldn't do that,

1306
01:08:42,300 --> 01:08:46,399
Um, because it should be relatively simple, right?

1307
01:08:47,200 --> 01:08:50,500
I mean all it is is instead of backing it by a file.

1308
01:08:50,500 --> 01:08:54,800
So that when it flows, you know, it just a file Stars already buffered

1309
01:08:54,800 --> 01:08:55,100
I/O.

1310
01:08:55,100 --> 01:08:58,600
So all it is is just allocating a buffer for the file IO.

1311
01:08:58,800 --> 01:08:59,800
That just happens to

1312
01:09:00,000 --> 01:09:03,200
We be the whole fight, the whole thing and then it never actually

1313
01:09:03,200 --> 01:09:04,700
fails over to a file ever.

1314
01:09:06,200 --> 01:09:08,899
So it shit, you know, I don't know if it does or not, I don't know if

1315
01:09:08,899 --> 01:09:11,700
they have support that or not, but it's should be easy for them to if

1316
01:09:11,700 --> 01:09:12,399
they wanted to.

1317
01:09:17,600 --> 01:09:18,100
Captain.

1318
01:09:18,100 --> 01:09:23,100
Craft asks, are there inherent problems with using composition for

1319
01:09:23,100 --> 01:09:24,300
writing game engines?

1320
01:09:24,500 --> 01:09:27,100
Like there are problems with poop.

1321
01:09:30,100 --> 01:09:30,399
I guess.

1322
01:09:30,399 --> 01:09:33,100
Could you be more specific about using composition?

1323
01:09:35,000 --> 01:09:37,300
Like, what specifically do you mean by that?

1324
01:09:39,200 --> 01:09:39,899
Elvin.

1325
01:09:40,000 --> 01:09:43,600
Why is the professor able to convert a parameter to a string via the

1326
01:09:43,600 --> 01:09:44,500
pound symbol?

1327
01:09:44,700 --> 01:09:46,200
But not the other way around.

1328
01:09:46,300 --> 01:09:50,200
IE strings stripping, taking the inner value of the string and passing

1329
01:09:50,200 --> 01:09:50,600
it.

1330
01:09:50,700 --> 01:09:53,800
My guess is that it's because this would not make it possible for the

1331
01:09:53,800 --> 01:09:56,400
macro to be determined at compile time since we can pass.

1332
01:09:56,400 --> 01:09:57,500
It arbitrary strings.

1333
01:09:58,400 --> 01:10:02,900
So the answer is for the fur Dynamic strings, like strings, that

1334
01:10:02,900 --> 01:10:05,900
aren't known at compile time yet, that's the reason because that

1335
01:10:05,900 --> 01:10:07,200
wouldn't be a preprocessor operation.

1336
01:10:07,500 --> 01:10:08,600
But the answer as to why

1337
01:10:08,700 --> 01:10:12,900
Can't do that for Strings that were known at compile time.

1338
01:10:12,900 --> 01:10:17,500
Is it just because the C++ standards committee, probably, because

1339
01:10:17,900 --> 01:10:21,200
strew strip was so anti preprocessor.

1340
01:10:21,300 --> 01:10:22,700
He was really against the preprocessor.

1341
01:10:22,700 --> 01:10:26,600
He always was today, just never implemented a good preprocessor.

1342
01:10:26,600 --> 01:10:29,000
It could easily do that, right?

1343
01:10:29,100 --> 01:10:31,800
We could have so many things in the preprocessor that would be great

1344
01:10:32,000 --> 01:10:34,400
like parsing a string into a number, right?

1345
01:10:34,400 --> 01:10:38,000
Or turning a number into a string by printing it out.

1346
01:10:38,000 --> 01:10:38,600
With

1347
01:10:38,700 --> 01:10:39,500
Formatting options.

1348
01:10:39,500 --> 01:10:40,700
And like there's be so many things.

1349
01:10:40,700 --> 01:10:45,800
You could input there like, John, Blow already made his language, be

1350
01:10:45,800 --> 01:10:50,200
able to run any code that's known at compile time at compile time as

1351
01:10:50,200 --> 01:10:51,700
part of the preprocessor, right?

1352
01:10:52,300 --> 01:10:53,800
And he's working on his spare time.

1353
01:10:54,600 --> 01:10:58,000
So you know there's no reason we couldn't have a way better posture.

1354
01:10:58,000 --> 01:11:02,700
It's just strip didn't like it probably because he doesn't know how to

1355
01:11:02,700 --> 01:11:03,200
program.

1356
01:11:04,900 --> 01:11:06,300
Culver fly, unless I missed.

1357
01:11:06,300 --> 01:11:07,700
It shouldn't it be cycle ever?

1358
01:11:07,700 --> 01:11:10,200
Hit, rather are saying yes, sorry, I flipped it.

1359
01:11:15,200 --> 01:11:16,800
Students send me three averages of averages.

1360
01:11:16,800 --> 01:11:18,700
Need to be weighted by the population size.

1361
01:11:18,700 --> 01:11:21,400
This is a common mistake that you even see in scientific papers, that

1362
01:11:21,400 --> 01:11:23,400
try to combine the results of other scientific papers.

1363
01:11:23,600 --> 01:11:23,800
Yeah.

1364
01:11:23,800 --> 01:11:25,600
That's what it looked like to me, right?

1365
01:11:25,600 --> 01:11:29,800
Because it looks like there's this, like, there it is, right?

1366
01:11:30,200 --> 01:11:36,000
There's an extra divide there and so I felt like that you couldn't

1367
01:11:36,000 --> 01:11:37,900
just do it and I guess I'm right.

1368
01:11:38,600 --> 01:11:39,200
So that's good.

1369
01:11:40,600 --> 01:11:43,600
We could have, we could have, computed it more, simply, right?

1370
01:11:43,600 --> 01:11:47,500
We could have computed it here by just adding that term in.

1371
01:11:47,700 --> 01:11:53,300
Like, we could just multiply, by the 1 over the total count again, but

1372
01:11:53,300 --> 01:11:55,200
I thought it would be fun to show that we can just use another

1373
01:11:55,200 --> 01:11:57,500
statistic because then we could compute anything we want here.

1374
01:11:58,100 --> 01:11:59,200
So that's why did that way.

1375
01:12:07,600 --> 01:12:08,100
Drive dude.

1376
01:12:08,100 --> 01:12:08,400
Turbo.

1377
01:12:08,400 --> 01:12:10,600
C successor is C++ Builder from Embarcadero.

1378
01:12:10,600 --> 01:12:15,600
Yeah, but C++ Builder is not nearly as good as TP.

1379
01:12:15,600 --> 01:12:19,500
Turbo C was even in the old days when they first went from Turbo CC,

1380
01:12:19,500 --> 01:12:21,500
muscle builder, see what's the Builder was not as good.

1381
01:12:21,800 --> 01:12:22,700
It just wasn't.

1382
01:12:23,200 --> 01:12:26,300
So, I don't know that I trust its current internation at all, because

1383
01:12:26,300 --> 01:12:28,000
it's probably only gotten worse since then as well.

1384
01:12:30,400 --> 01:12:31,300
Elvin met a person.

1385
01:12:31,300 --> 01:12:35,100
Question, let's say, I want to have a generic Dynamic list.

1386
01:12:35,200 --> 01:12:35,800
We sighs already.

1387
01:12:35,800 --> 01:12:38,500
My game Library void, pointers and macros are two ways of approaching

1388
01:12:38,500 --> 01:12:38,700
this.

1389
01:12:38,900 --> 01:12:40,500
Another is Journey that code for The Unique list types.

1390
01:12:40,500 --> 01:12:43,400
I want, is this what you mean when you say I write C programs and spit

1391
01:12:43,400 --> 01:12:44,100
out C programs.

1392
01:12:44,200 --> 01:12:44,700
Yes.

1393
01:12:45,000 --> 01:12:48,300
That is what I mean if so can we do this generation at compile time

1394
01:12:48,500 --> 01:12:49,600
like we can do it in j.i.

1395
01:12:49,600 --> 01:12:52,000
or we forced to write and run next to do the desires for us.

1396
01:12:52,200 --> 01:12:53,500
The ladder J.

1397
01:12:53,500 --> 01:12:59,000
AI has some good metaprogramming support already even though it's

1398
01:12:59,000 --> 01:12:59,800
early and

1399
01:13:00,000 --> 01:13:05,500
It can do a lot more to see can or C++ can so you can't do those

1400
01:13:05,500 --> 01:13:08,700
things and c and C++ you have to do to compilation phases.

1401
01:13:08,700 --> 01:13:14,300
So, what I do is I like I do a build run, build is the way I do it

1402
01:13:14,300 --> 01:13:18,800
with my works or space so that it like, it doesn't build up some code

1403
01:13:18,800 --> 01:13:22,200
that spits out some code, then it builds the result of that code plus

1404
01:13:22,200 --> 01:13:25,300
any code that doesn't that isn't generated and then that's the actual

1405
01:13:25,300 --> 01:13:25,900
executable.

1406
01:13:29,500 --> 01:13:31,000
Captain craft with respect to composition.

1407
01:13:31,200 --> 01:13:33,900
I have a player struck that has various other structure represent what

1408
01:13:33,900 --> 01:13:34,200
the player is.

1409
01:13:34,200 --> 01:13:38,200
Composed of one could be the objects direct which is added to any

1410
01:13:38,200 --> 01:13:40,400
entity in the game that I want to be like an object.

1411
01:13:40,400 --> 01:13:43,000
Then I create functions that run on objects, such as object move.

1412
01:13:43,200 --> 01:13:47,100
So that anything that I want to move into the game would have, would

1413
01:13:47,100 --> 01:13:50,300
simply have a knob District within it yet compositions not

1414
01:13:50,300 --> 01:13:51,100
particularly useful.

1415
01:13:52,600 --> 01:13:56,600
Unless the things don't have to interact with each other and usually

1416
01:13:56,600 --> 01:13:58,700
the interesting Parts come from when they interact with each other.

1417
01:13:59,100 --> 01:14:03,900
So what I would say is wait till we get to that part and how many

1418
01:14:03,900 --> 01:14:04,000
here?

1419
01:14:04,000 --> 01:14:09,000
Because I'm going to show you some pretty crazy far out, like past the

1420
01:14:09,000 --> 01:14:12,200
ball and kind of stuff that I want to try for that.

1421
01:14:12,200 --> 01:14:15,300
Because this is my first time actually working on a game.

1422
01:14:15,300 --> 01:14:18,200
That was about crazy combinations of things.

1423
01:14:18,400 --> 01:14:21,600
So I have some stuff that I want to try and so you'll get to watch me

1424
01:14:21,600 --> 01:14:22,200
try it.

1425
01:14:22,500 --> 01:14:26,000
And I think the stuff will be a lot better than composition.

1426
01:14:28,700 --> 01:14:30,900
But who knows Captain Craftsmen running game engines.

1427
01:14:30,900 --> 01:14:33,200
How much should a programmer know about the about how the compiler

1428
01:14:33,200 --> 01:14:34,800
works and what is a good way to learn?

1429
01:14:34,800 --> 01:14:35,900
What is going on under the hood?

1430
01:14:36,800 --> 01:14:39,000
It depends a lot on the game.

1431
01:14:39,300 --> 01:14:43,200
If the game has performance at the Mackay implications than knowing

1432
01:14:43,200 --> 01:14:45,100
how the compiler work can be pretty important.

1433
01:14:45,200 --> 01:14:47,800
Also for portability, it's important to know a few things about how

1434
01:14:47,800 --> 01:14:49,100
the compiler works, but much less.

1435
01:14:49,100 --> 01:14:50,900
So obviously that's a little bit easier.

1436
01:14:51,300 --> 01:14:52,600
The easiest way to know how it works.

1437
01:14:52,600 --> 01:14:54,100
Under the hood is really, very simple.

1438
01:14:54,500 --> 01:14:56,400
You've got a debugger, right?

1439
01:14:56,400 --> 01:14:58,400
You step into it and you right click,

1440
01:14:58,500 --> 01:14:59,800
Can you say go to disassembly?

1441
01:15:00,000 --> 01:15:04,300
If that tells you what the compiler did and so what you need to do is

1442
01:15:04,300 --> 01:15:08,000
just get familiar, get comfortable with looking at your code in the

1443
01:15:08,000 --> 01:15:12,400
disassembly so that when you're doing stuff you can kind of get a feel

1444
01:15:12,400 --> 01:15:15,900
for in the province critical portions taking a look what's it doing

1445
01:15:16,200 --> 01:15:17,800
when I want to know what it's going to do?

1446
01:15:17,800 --> 01:15:19,200
I just look right?

1447
01:15:19,200 --> 01:15:21,600
Look at the debug build the release build, see what the difference is

1448
01:15:21,600 --> 01:15:22,100
between them.

1449
01:15:22,200 --> 01:15:25,100
That's the way to get to build up that knowledge, right?

1450
01:15:25,100 --> 01:15:27,500
And to understand what the what the compiler is doing well and what is

1451
01:15:27,500 --> 01:15:29,800
doing poorly and so on, right?

1452
01:15:30,000 --> 01:15:30,100
Right.

1453
01:15:30,800 --> 01:15:33,800
Similarly running stuff like ayaka which we've done in the Stream

1454
01:15:34,400 --> 01:15:37,700
where you can look, you know, run a perf dump.

1455
01:15:37,700 --> 01:15:41,300
Essentially on a piece of code play around with how its structured and

1456
01:15:41,300 --> 01:15:43,800
see what the compiler does differently and how the perf might change

1457
01:15:43,800 --> 01:15:44,600
stuff like that.

1458
01:15:45,500 --> 01:15:46,700
It's useful as well.

1459
01:15:50,000 --> 01:15:51,100
Big cat CK.

1460
01:15:51,400 --> 01:15:53,400
Hey I'm looking to pick a programming.

1461
01:15:53,400 --> 01:15:55,800
I have some basic knowledge but really would like to know where to get

1462
01:15:55,800 --> 01:15:58,400
started and he suggested languages, you might think are a good place

1463
01:15:58,400 --> 01:15:59,200
to start.

1464
01:16:03,000 --> 01:16:05,000
I'm sorry, it's a little, it's a little early for that.

1465
01:16:05,200 --> 01:16:09,100
I don't have good, I haven't put up really any materials for for

1466
01:16:09,100 --> 01:16:14,000
really like simple starting projects like getting into program for the

1467
01:16:14,000 --> 01:16:14,600
first time.

1468
01:16:14,900 --> 01:16:19,500
So I kind of assume that people know programming already and just want

1469
01:16:19,500 --> 01:16:22,700
to learn game programming and so I can't really help too much with

1470
01:16:22,700 --> 01:16:24,400
that eventually.

1471
01:16:24,400 --> 01:16:26,900
That's something I plan to maybe make some more resources about like

1472
01:16:26,900 --> 01:16:30,200
further down the road and so I don't know, maybe some people on the

1473
01:16:30,200 --> 01:16:32,100
stream know of some places to go for that, but I

1474
01:16:32,400 --> 01:16:33,100
I don't really know.

1475
01:16:34,700 --> 01:16:37,200
How much more engine work are we going to do before diving into

1476
01:16:37,200 --> 01:16:38,000
gameplay stuff?

1477
01:16:38,600 --> 01:16:41,100
It looks like we get back to gameplay stuff.

1478
01:16:44,300 --> 01:16:45,500
Let's see.

1479
01:16:46,500 --> 01:16:48,700
Oh, so we did that.

1480
01:16:51,700 --> 01:16:55,800
So, it looks like we've got this.

1481
01:16:55,800 --> 01:16:57,800
I mean, this is the stuff we've got right?

1482
01:16:57,800 --> 01:17:01,200
So the architecture expiration stuff, this gets back in and we're

1483
01:17:01,200 --> 01:17:02,000
pretty much on game.

1484
01:17:02,000 --> 01:17:03,500
Play for the rest of the time.

1485
01:17:03,500 --> 01:17:05,300
I think, right?

1486
01:17:05,300 --> 01:17:07,300
Well, this is metagame saved.

1487
01:17:07,300 --> 01:17:12,900
Game is probably, not really gameplay but you know everything else is

1488
01:17:12,900 --> 01:17:14,100
probably pretty gameplay.

1489
01:17:14,100 --> 01:17:19,700
Like you know, doing the Z Collision detection pass and like the AI

1490
01:17:19,700 --> 01:17:21,600
and stuff is you know there's engine work.

1491
01:17:21,700 --> 01:17:24,800
There, but it's so tightly coupled with the game that it's not really

1492
01:17:25,200 --> 01:17:26,500
something we can break out.

1493
01:17:26,500 --> 01:17:29,000
So that's going to kind of be all woven together as we go.

1494
01:17:29,400 --> 01:17:29,900
So I don't know.

1495
01:17:29,900 --> 01:17:34,800
I was saying, somewhere around a 200, I think that maybe we might, we

1496
01:17:34,800 --> 01:17:39,600
probably won't quite hit that because that's 21 more days and I feel

1497
01:17:39,600 --> 01:17:42,000
like we're going to want, you know, debug code.

1498
01:17:42,000 --> 01:17:45,800
We're going to want a good more, you know, ten days on at least.

1499
01:17:47,000 --> 01:17:49,300
And then, you know, I like I said, if we probably want to do so a

1500
01:17:49,300 --> 01:17:51,500
little more work on the renderer a little just tightening some things.

1501
01:17:51,700 --> 01:17:55,800
Up before we get back into the game stuff for good.

1502
01:17:55,800 --> 01:17:59,700
So I would say you know, day 200, wasn't I guess such a bad ballpark I

1503
01:17:59,700 --> 01:17:59,800
think.

1504
01:18:00,000 --> 01:18:04,700
Might be relatively close, but, you know, figured 8 to 10 to 20,

1505
01:18:04,700 --> 01:18:05,800
something like that figure.

1506
01:18:05,800 --> 01:18:08,200
We're be a little over that when we get back to it.

1507
01:18:15,900 --> 01:18:16,800
Can you run around to the game?

1508
01:18:16,800 --> 01:18:17,200
A little bit?

1509
01:18:17,200 --> 01:18:19,500
The last time I watch was a month ago, two ago, and I'd love to see

1510
01:18:19,500 --> 01:18:20,000
how its progressed.

1511
01:18:20,100 --> 01:18:23,000
We haven't done any work on the game, we've only been doing engine

1512
01:18:23,000 --> 01:18:31,000
work so it should be roughly the same, you know, the the, the engine

1513
01:18:31,000 --> 01:18:32,900
stuff is pretty.

1514
01:18:32,900 --> 01:18:36,600
We've got a lot of pretty good stuff now and we're running off of our

1515
01:18:36,600 --> 01:18:39,600
own asset files, and everything is streaming in properly.

1516
01:18:39,600 --> 01:18:41,900
We've got all the audio streaming as well.

1517
01:18:42,300 --> 01:18:44,200
We have it turned off right now because it's getting annoying.

1518
01:18:44,600 --> 01:18:45,200
We have like

1519
01:18:45,400 --> 01:18:50,600
Real-time 1080p running in software so the engine is pretty sweet but

1520
01:18:50,600 --> 01:18:53,500
we have still a little bit more work to do like we got some sorting

1521
01:18:53,500 --> 01:18:56,800
and stuff to do, but we're pretty close.

1522
01:18:56,800 --> 01:18:59,100
Like I said, there's not that much more left to do.

1523
01:18:59,600 --> 01:19:02,600
The debug code stuff is is only just starting.

1524
01:19:02,600 --> 01:19:06,600
Like I said, we've a little bit more to do there and we've got to kind

1525
01:19:06,600 --> 01:19:10,000
of go back and do some final stuff with the renderer particle systems

1526
01:19:10,000 --> 01:19:12,400
in the lighting and stuff like that, that we wanted to kind of put

1527
01:19:12,400 --> 01:19:15,200
back in there, but otherwise I think we're pretty good to go.

1528
01:19:15,400 --> 01:19:20,200
Go and running quite well even with no GPU right so this is all

1529
01:19:20,200 --> 01:19:21,300
running through our code.

1530
01:19:21,300 --> 01:19:23,700
No we're not touching the graphics card in any way.

1531
01:19:24,100 --> 01:19:27,700
We're doing all the rendering by hand and its really darn fast

1532
01:19:27,700 --> 01:19:28,400
multi-threaded.

1533
01:19:28,400 --> 01:19:29,000
In fact

1534
01:19:41,900 --> 01:19:45,700
I'll ask him questions, your thoughts on using a scripting language

1535
01:19:45,700 --> 01:19:46,700
with the game engine.

1536
01:19:48,600 --> 01:19:51,100
I don't really like scripting language is very much so I don't have

1537
01:19:51,100 --> 01:19:52,100
any thoughts on that.

1538
01:19:52,500 --> 01:19:54,600
I tend to just like it to make it to that the see reloads

1539
01:19:54,600 --> 01:19:58,900
instantaneously and in the end in game so that you don't have to use a

1540
01:19:58,900 --> 01:20:01,300
scripting language and you have access to everything.

1541
01:20:02,300 --> 01:20:02,700
so,

1542
01:20:04,300 --> 01:20:05,900
Blot 238 for the performance counters.

1543
01:20:05,900 --> 01:20:07,100
Could you perhaps color code them?

1544
01:20:07,100 --> 01:20:08,800
According to how far outside of the ideal effective range?

1545
01:20:08,800 --> 01:20:09,100
They are.

1546
01:20:09,100 --> 01:20:12,400
Similarly, is there a way to roughly estimate the ideal cycle count

1547
01:20:12,400 --> 01:20:13,100
for a function?

1548
01:20:15,200 --> 01:20:18,900
No unfortunately it's pretty darn hard to estimate the ideal cycle

1549
01:20:18,900 --> 01:20:22,100
count of a function because so much of it depends on memory accesses

1550
01:20:22,400 --> 01:20:24,900
and those are very variable in terms of how long they take.

1551
01:20:25,000 --> 01:20:28,300
So you could do, you could do an ideal, like, if all of the memory

1552
01:20:28,300 --> 01:20:32,200
axes were all in the cash, that's not too hard to do, potentially, and

1553
01:20:32,200 --> 01:20:33,600
ayako would do that for us.

1554
01:20:34,900 --> 01:20:35,300
But

1555
01:20:37,100 --> 01:20:40,000
You know, that's not that meaningful of a number, unfortunately.

1556
01:20:41,700 --> 01:20:44,500
You have to first form some opinion of whether you think it should all

1557
01:20:44,500 --> 01:20:45,300
be in the cache.

1558
01:20:46,000 --> 01:20:46,700
Child's E.

1559
01:20:46,700 --> 01:20:50,000
I have an interview tomorrow that I'm going and I'm going to have to

1560
01:20:50,000 --> 01:20:52,200
whiteboard how not to be nervous.

1561
01:21:01,000 --> 01:21:01,800
To be honest.

1562
01:21:05,000 --> 01:21:06,700
to be honest, I guess I don't really

1563
01:21:08,300 --> 01:21:09,500
have much advice for that.

1564
01:21:11,700 --> 01:21:14,500
If it's the kind of interview where someone asks you a stupid problem,

1565
01:21:15,200 --> 01:21:18,700
like they say something like reverse a linked list and want you to do

1566
01:21:18,700 --> 01:21:19,600
it on a whiteboard.

1567
01:21:20,200 --> 01:21:23,300
The easiest way not to be nervous is to know that anyone who asks that

1568
01:21:23,300 --> 01:21:26,200
question is a bad interviewer.

1569
01:21:26,200 --> 01:21:28,800
It's a terrible way to interview people and it doesn't do a good job

1570
01:21:28,800 --> 01:21:29,200
separating.

1571
01:21:29,200 --> 01:21:30,700
Good programmers from Bad programmers.

1572
01:21:33,500 --> 01:21:36,700
The reason for that is because nobody programs on a whiteboard and

1573
01:21:36,700 --> 01:21:39,400
nobody programs with someone watching them except me on the Stream.

1574
01:21:41,000 --> 01:21:44,400
and so especially in a situation where you're trying to get a job,

1575
01:21:45,500 --> 01:21:50,800
it puts someone in a very bad position and likely makes them do very

1576
01:21:50,800 --> 01:21:52,300
different things than they would do.

1577
01:21:52,600 --> 01:21:56,000
If they actually needed to solve that problem in real life in the job,

1578
01:21:56,000 --> 01:21:59,500
you're actually trying to figure out whether they're, you know, going

1579
01:21:59,500 --> 01:22:01,200
to be good at it or what, right?

1580
01:22:02,200 --> 01:22:04,600
So yeah, I've done a lot of tech interviewing in the past.

1581
01:22:06,100 --> 01:22:08,500
And I've been on to, you know, when I was first starting around to do

1582
01:22:08,500 --> 01:22:11,900
Tech interviews and I can tell you definitively, if anyone asks you to

1583
01:22:11,900 --> 01:22:14,400
solve a programming problem on a whiteboard while they watch, they are

1584
01:22:14,400 --> 01:22:15,300
just a bad interviewer.

1585
01:22:15,500 --> 01:22:17,600
So the first thing you can do to not be nervous is go.

1586
01:22:17,600 --> 01:22:24,400
Oh well now I know the person interviewing me is bad part of their job

1587
01:22:24,500 --> 01:22:29,700
so they just failed the interview that I would be having for them Step

1588
01:22:29,700 --> 01:22:31,500
1 so there's that

1589
01:22:34,300 --> 01:22:40,400
And step two I suppose would just be like hey you know a lot of people

1590
01:22:40,400 --> 01:22:42,100
are going to be nervous when they're in that situation.

1591
01:22:42,100 --> 01:22:44,400
You're not the only one a lot of people are going to make mistakes

1592
01:22:44,400 --> 01:22:45,000
that situation.

1593
01:22:45,000 --> 01:22:45,900
You're not the only one.

1594
01:22:46,300 --> 01:22:48,900
What the interview is trying to do is just see how you work through a

1595
01:22:48,900 --> 01:22:49,500
problem.

1596
01:22:49,500 --> 01:22:50,800
They just want to see your thought process.

1597
01:22:50,800 --> 01:22:54,800
So just you know try to just understand that getting the right answer

1598
01:22:54,800 --> 01:22:55,500
and doing everything.

1599
01:22:55,500 --> 01:22:58,100
Perfect is not necessarily what they're looking for, if they're any

1600
01:22:58,100 --> 01:22:58,800
good at all.

1601
01:22:59,700 --> 01:23:01,000
So you have some leeway there.

1602
01:23:01,300 --> 01:23:02,600
So, you know, maybe

1603
01:23:02,800 --> 01:23:04,000
Relax, you a little bit too.

1604
01:23:05,200 --> 01:23:07,000
I said it before on the stream and I'll say it again.

1605
01:23:07,000 --> 01:23:11,200
The correct way to do Tech interviews is to its the onus is on the

1606
01:23:11,200 --> 01:23:14,300
interviewer, not the interviewee and what the interviewer should be

1607
01:23:14,300 --> 01:23:14,600
doing.

1608
01:23:14,600 --> 01:23:19,800
Is, they should be drilling down into your programming history, to

1609
01:23:19,800 --> 01:23:23,900
find things that you have done before that, you've already done that.

1610
01:23:23,900 --> 01:23:26,600
You already worked on that you've already programmed.

1611
01:23:27,500 --> 01:23:36,100
And have you explained those on the Whiteboard because nobody is about

1612
01:23:36,100 --> 01:23:38,200
solving problems, they haven't seen before.

1613
01:23:38,200 --> 01:23:42,600
All of a sudden on a whiteboard in front of someone, they know, no, it

1614
01:23:42,600 --> 01:23:43,900
doesn't even make any sense.

1615
01:23:43,900 --> 01:23:48,700
It's so far from anything that you would ever do in an actual work

1616
01:23:48,700 --> 01:23:49,300
environment.

1617
01:23:49,300 --> 01:23:50,500
It's ridiculous.

1618
01:23:50,600 --> 01:23:51,100
Right?

1619
01:23:52,300 --> 01:23:55,200
But what you actually want to know when you interview someone in Tech

1620
01:23:55,300 --> 01:23:57,300
is do they actually know their stuff.

1621
01:23:58,200 --> 01:23:59,900
So what have they done before and you drill,

1622
01:24:00,000 --> 01:24:00,500
Down into that.

1623
01:24:00,500 --> 01:24:03,900
And one of the best tech interviewers there is is Chris Hacker.

1624
01:24:04,400 --> 01:24:06,100
He's the one who taught me this.

1625
01:24:08,000 --> 01:24:10,400
And he did it flawlessly.

1626
01:24:10,500 --> 01:24:11,200
Every time.

1627
01:24:11,300 --> 01:24:15,300
He'd be like the the you know, the candidate would be there and he'd

1628
01:24:15,300 --> 01:24:17,200
be like, what, you know, what have you worked on?

1629
01:24:17,200 --> 01:24:19,800
They've been like, oh, you know, I did this, you know, I used to work

1630
01:24:19,800 --> 01:24:22,500
on this banking system and it was like, you know, it was a thing for

1631
01:24:22,500 --> 01:24:25,600
animators actually be like, oh okay tell me a little bit more about

1632
01:24:25,600 --> 01:24:28,200
that transaction system and the guy would go like oh okay well you

1633
01:24:28,200 --> 01:24:30,800
know the transaction would come in and we have to patch them up and

1634
01:24:30,800 --> 01:24:34,300
there's a like, oh well, you know then crispy like oh is it hard to

1635
01:24:34,300 --> 01:24:37,000
like handle the consistency model for that or whatever and they'd be

1636
01:24:37,000 --> 01:24:37,300
like, well,

1637
01:24:37,500 --> 01:24:40,100
Well, you know, maybe it was this or that and then be like, okay, tell

1638
01:24:40,100 --> 01:24:42,400
me a little bit about that algorithm, you just mentioned for him

1639
01:24:42,400 --> 01:24:46,900
consistency and he would get them to do a whiteboard problem

1640
01:24:46,900 --> 01:24:47,600
effectively.

1641
01:24:47,700 --> 01:24:50,300
But one that they were comfortable with, right?

1642
01:24:51,400 --> 01:24:55,300
And one that they had already done, so they should know they should be

1643
01:24:55,300 --> 01:24:57,200
aware of all that stuff, right?

1644
01:24:57,800 --> 01:25:01,400
And that's the way you figure out if someone knows their stuff, you

1645
01:25:01,400 --> 01:25:04,300
figure out if they know their stuff, when they're comfortable with it.

1646
01:25:04,600 --> 01:25:07,100
Finding out how they perform on something they're uncomfortable with

1647
01:25:07,100 --> 01:25:07,300
is

1648
01:25:07,400 --> 01:25:11,400
Useless because some of the greatest programmers don't come up with

1649
01:25:11,400 --> 01:25:12,500
anything right away.

1650
01:25:13,000 --> 01:25:18,300
They're they're too slow on the spot but give them a day and the thing

1651
01:25:18,300 --> 01:25:22,200
they come back with you the next day, maybe better than anybody else

1652
01:25:22,200 --> 01:25:24,600
said in the room at the time, who is fast on their feet?

1653
01:25:25,300 --> 01:25:29,500
And so if you're screening for that whiteboard like, you know, Macho,

1654
01:25:29,500 --> 01:25:32,600
whatever it is, you're just wasting everyone's time.

1655
01:25:32,600 --> 01:25:33,600
That doesn't filter.

1656
01:25:33,600 --> 01:25:36,400
Good programmers, from Bad programmers at all.

1657
01:25:37,100 --> 01:25:37,300
And

1658
01:25:37,800 --> 01:25:40,800
It's just a stupid thing that I guess, Microsoft started that people

1659
01:25:40,800 --> 01:25:43,800
still do now, but it's, it's ridiculous.

1660
01:25:43,800 --> 01:25:47,100
And if it helps at all, when someone does that to you, in a job

1661
01:25:47,100 --> 01:25:50,200
interview, just understand that there allows the interviewer and maybe

1662
01:25:50,200 --> 01:25:52,100
that will help you not be nervous.

1663
01:25:54,400 --> 01:26:05,900
Alright, that's about it for today because we are out of time clothes.

1664
01:26:06,000 --> 01:26:06,400
Oops.

1665
01:26:10,700 --> 01:26:12,900
Yeah, we did that close.

1666
01:26:14,500 --> 01:26:15,200
Save.

1667
01:26:20,100 --> 01:26:21,600
Save and close.

1668
01:26:22,400 --> 01:26:24,500
Okay, thank you, everyone for joining me for another episode of

1669
01:26:24,500 --> 01:26:25,300
handmade hero.

1670
01:26:25,300 --> 01:26:26,700
It's been a pleasure coding with you.

1671
01:26:26,900 --> 01:26:31,900
As always, it has been almost as much of a pleasure coding with you,

1672
01:26:32,100 --> 01:26:34,600
as Windows is awful.

1673
01:26:34,700 --> 01:26:40,600
And that it is a non pleasure having to work with Microsoft.

1674
01:26:40,600 --> 01:26:45,500
As I said, this episode was dedicated to just how antagonistic they

1675
01:26:45,500 --> 01:26:49,200
are and how miserable they've made my life over the past two days.

1676
01:26:50,100 --> 01:26:53,500
So you can go ahead and all give them an official.

1677
01:26:54,200 --> 01:26:57,500
Thank you for nothing from me.

1678
01:26:57,700 --> 01:26:59,900
That said if

1679
01:27:00,000 --> 01:27:03,300
You would like, to follow along with handmade Hero at home, and maybe

1680
01:27:03,300 --> 01:27:06,200
ported to Linux or Mac, which believe me is starting to look at that.

1681
01:27:06,200 --> 01:27:09,600
Like a very, very high on the list priority for handmade hero.

1682
01:27:09,700 --> 01:27:15,000
Even though I wasn't expecting to do that anytime soon, you can go

1683
01:27:15,000 --> 01:27:17,500
ahead and pre-order the game at handmade hero dot-org.

1684
01:27:18,200 --> 01:27:21,400
Using the handy dandy pre-order button and it comes with a source

1685
01:27:21,400 --> 01:27:21,600
code.

1686
01:27:21,600 --> 01:27:27,300
So you can, you know, play with it experiment, learn from it, do do

1687
01:27:27,300 --> 01:27:29,900
all kinds of stuff like that, and

1688
01:27:30,000 --> 01:27:34,100
And and yeah, and actually, if you go to our Forum site, there's

1689
01:27:34,100 --> 01:27:36,600
actually people have already done ports to Mac and Linux and stuff

1690
01:27:36,600 --> 01:27:37,100
like that.

1691
01:27:37,100 --> 01:27:38,100
And yeah.

1692
01:27:38,100 --> 01:27:40,200
And like I said, maybe that's something that we have to start thinking

1693
01:27:40,200 --> 01:27:41,100
about doing a little bit earlier.

1694
01:27:41,100 --> 01:27:43,500
Maybe we need to move our primary Dev platform over to Links or

1695
01:27:43,500 --> 01:27:43,800
something.

1696
01:27:43,800 --> 01:27:48,500
Because at this point, Microsoft is so high on my list of most awful

1697
01:27:48,500 --> 01:27:49,300
people that I am.

1698
01:27:49,800 --> 01:27:52,700
Not sure that I really want to keep streaming from their platform.

1699
01:27:52,900 --> 01:27:53,800
That's it.

1700
01:27:55,600 --> 01:27:59,000
If you would like to know when, I will be streaming from Linux or

1701
01:27:59,000 --> 01:28:03,400
Windows or anything else, you can go to our tweet bot and our tweet

1702
01:28:03,400 --> 01:28:04,000
tweets the schedule.

1703
01:28:04,000 --> 01:28:05,400
It you it treats the schedule every day.

1704
01:28:05,400 --> 01:28:07,500
So you know, when it's going to be live and also tweets the schedule

1705
01:28:07,500 --> 01:28:08,100
on the weekend.

1706
01:28:08,100 --> 01:28:11,400
So you can go ahead and take a look at when it's going to be live.

1707
01:28:11,400 --> 01:28:12,800
If you want to catch it.

1708
01:28:12,900 --> 01:28:14,000
We also have a patreon page.

1709
01:28:14,000 --> 01:28:17,600
If you want to support the video series, you can always subscribe to

1710
01:28:17,600 --> 01:28:18,100
that.

1711
01:28:19,900 --> 01:28:22,300
And, you know, I don't know, I don't know what we'll do.

1712
01:28:22,300 --> 01:28:24,500
Exactly maybe we'll make a new patreon, tier.

1713
01:28:24,500 --> 01:28:27,500
That's like if we hit, you know, a certain amount of money on the

1714
01:28:27,500 --> 01:28:28,000
patreon.

1715
01:28:28,000 --> 01:28:32,400
I'll just do weekend streams to like Port it to Linux in the meantime

1716
01:28:32,400 --> 01:28:37,200
so that we can get off of Windows and, and not have to deal with this

1717
01:28:37,500 --> 01:28:38,400
nonsense anymore.

1718
01:28:38,500 --> 01:28:40,400
Anyway, so that's about it.

1719
01:28:40,500 --> 01:28:43,300
I will be back here tomorrow at 5 p.m.

1720
01:28:43,300 --> 01:28:44,200
Pacific Daylight time.

1721
01:28:44,200 --> 01:28:48,300
I think tomorrow is Friday, if I'm not mistaken, so that would be the

1722
01:28:48,300 --> 01:28:49,300
lasting for this week.

1723
01:28:49,400 --> 01:28:55,100
Eek hope to see you there and until then have fun coding on your own

1724
01:28:55,100 --> 01:28:58,500
projects or on handmade hero experiments or whatever else is that

1725
01:28:58,500 --> 01:29:01,200
you're doing, and I will see you guys on the internet.

1726
01:29:01,200 --> 01:29:05,600
So tickety's everyone and and have a good evening.

