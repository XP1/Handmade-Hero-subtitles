1
00:00:00,000 --> 00:00:03,900
Clean one from to upload to Youtube and there we go.

2
00:00:04,700 --> 00:00:09,700
All right, welcome everybody to what is day 16.

3
00:00:09,800 --> 00:00:12,700
You didn't think we would make it to such a high power of 2, but we

4
00:00:12,700 --> 00:00:18,500
did day 16 of handmade hero the show where we actually code an entire

5
00:00:18,500 --> 00:00:20,900
professional color, quality game from scratch.

6
00:00:21,600 --> 00:00:25,700
So that we can basically explore all of the intricacies of what a

7
00:00:25,700 --> 00:00:29,600
computer does when it runs a game so that we, we can basically see and

8
00:00:30,000 --> 00:00:32,000
Stand everything that is going on.

9
00:00:32,400 --> 00:00:35,700
So we don't use any libraries and we try to kind of get down is as

10
00:00:35,700 --> 00:00:39,000
detail-oriented as we can to try and basically tease out all of that

11
00:00:39,000 --> 00:00:39,700
stuff.

12
00:00:40,100 --> 00:00:43,800
That's kind of obscured when you when you lose higher level stuff.

13
00:00:44,400 --> 00:00:47,900
And so so far we have done the win32 side of things where you just

14
00:00:47,900 --> 00:00:51,200
made ourselves, basically an interface to Windows that allows us to do

15
00:00:51,200 --> 00:00:54,400
the sorts of things we need to do in a game and we're almost to the

16
00:00:54,400 --> 00:00:56,200
part we're going to actually start building the game.

17
00:00:56,200 --> 00:00:59,400
Proper, we're going to do this week is basically transition between

18
00:00:59,400 --> 00:00:59,800
those two.

19
00:01:00,400 --> 00:01:03,200
And so, in order to do that, what we need to do is go through our

20
00:01:03,200 --> 00:01:07,900
win32 code and clean up any of the stuff that we haven't finished yet.

21
00:01:07,900 --> 00:01:08,800
Just touch things up.

22
00:01:08,800 --> 00:01:11,000
Put, you know, go through any of stuff that we don't have time to do.

23
00:01:11,000 --> 00:01:13,800
There's just some loose ends that were left hanging when we wrote

24
00:01:13,800 --> 00:01:14,100
everything.

25
00:01:14,300 --> 00:01:16,800
And so that's really what's going to be our Focus today is going

26
00:01:16,800 --> 00:01:20,200
through and making sure we we kind of like get that done and we'll do

27
00:01:20,200 --> 00:01:23,000
that for the next couple days until we're satisfied that everything is

28
00:01:23,000 --> 00:01:26,000
in good shape and then we can move on to just game code proper.

29
00:01:26,000 --> 00:01:29,700
Now, for those of you who have pre-ordered the game from

30
00:01:29,900 --> 00:01:30,900
I made here at dot org.

31
00:01:31,400 --> 00:01:34,400
If you are following along with the source code at home, that it comes

32
00:01:34,400 --> 00:01:39,000
with you want to unzip day 15 because that is the source code that I

33
00:01:39,000 --> 00:01:39,700
am starting with.

34
00:01:39,700 --> 00:01:42,800
So if you want to follow along on zip day 15 from the pre-order and

35
00:01:42,800 --> 00:01:45,800
that will, that will be where we are starting?

36
00:01:46,000 --> 00:01:46,400
All right.

37
00:01:46,400 --> 00:01:48,200
So let me go ahead and jump in here.

38
00:01:48,500 --> 00:01:50,100
The first thing to me.

39
00:01:51,100 --> 00:01:51,600
Yeah.

40
00:01:51,700 --> 00:01:53,400
It's been a long cold.

41
00:01:53,400 --> 00:01:57,100
Winter here for me, as you know, and every stream.

42
00:01:57,100 --> 00:01:57,600
I'm coughing.

43
00:01:57,600 --> 00:01:59,800
Just a little bit getting

44
00:02:00,100 --> 00:02:01,600
But what can you do?

45
00:02:01,900 --> 00:02:05,000
It's definitely going to be one of those Winters where I'm sick all

46
00:02:05,000 --> 00:02:05,400
the time.

47
00:02:05,400 --> 00:02:06,000
But you know what?

48
00:02:06,000 --> 00:02:07,600
Sickness doesn't really have to stop me programming.

49
00:02:07,600 --> 00:02:08,100
Most of the time.

50
00:02:08,100 --> 00:02:10,500
Thankfully, I have not been that sick yet.

51
00:02:10,900 --> 00:02:13,900
So hopefully things will continue where I can stream with just a

52
00:02:13,900 --> 00:02:17,600
little bit of coughing anyway, so one of the big things that I said we

53
00:02:17,600 --> 00:02:20,000
were going to do and which we hadn't done yet, but I'd like to start

54
00:02:20,000 --> 00:02:22,100
doing now as we sort of move forwards.

55
00:02:22,300 --> 00:02:24,800
Is one of the things that we're doing in our build script.

56
00:02:24,800 --> 00:02:29,500
Here is, we are just compiling with no real warnings turned on, like,

57
00:02:29,500 --> 00:02:29,800
we

58
00:02:29,900 --> 00:02:33,200
We only have the barest minimum warnings turned on and warnings are

59
00:02:33,200 --> 00:02:37,100
basically things that the compiler doesn't actually need you to fix.

60
00:02:37,500 --> 00:02:39,500
It doesn't need you to fix warnings.

61
00:02:40,100 --> 00:02:43,600
It can still generate the code just fine, but it does tend to indicate

62
00:02:43,600 --> 00:02:45,400
that there might be something wrong.

63
00:02:45,400 --> 00:02:47,300
So warning is the compilers way of telling you.

64
00:02:47,300 --> 00:02:50,000
Hey, I'm not sure about this.

65
00:02:50,000 --> 00:02:51,900
It looks like something that might be suspicious.

66
00:02:51,900 --> 00:02:53,000
Could you check it out?

67
00:02:53,100 --> 00:02:54,500
And that is basically what a warning is.

68
00:02:54,500 --> 00:02:56,900
And so one of the things that I want to do is I want to turn on

69
00:02:56,900 --> 00:02:59,800
warnings in are compiled basically.

70
00:03:00,000 --> 00:03:03,400
On a higher level of warnings, warnings are typically grouped into

71
00:03:03,400 --> 00:03:07,600
levels level 1 level 2, level 3, level 4 and so on such that you can

72
00:03:07,600 --> 00:03:10,300
enable them in waves and they're sort of categorized.

73
00:03:10,400 --> 00:03:13,800
So, if you want to enable like each individual warning, so typically

74
00:03:13,800 --> 00:03:17,700
what you'll do is you enable a certain level of warning that you're

75
00:03:17,700 --> 00:03:20,400
comfortable with, in this case, probably going to use worrying level

76
00:03:20,400 --> 00:03:22,900
three and you're going to enable that warning level.

77
00:03:22,900 --> 00:03:25,800
And then you're going to disable any warnings that you didn't want

78
00:03:25,800 --> 00:03:26,800
from that warning level.

79
00:03:26,800 --> 00:03:29,500
That's a lot easier than picking each individual, warning and turning

80
00:03:29,500 --> 00:03:29,800
it on.

81
00:03:30,000 --> 00:03:34,700
And now what will happen, you can see if we actually turn on basically

82
00:03:34,800 --> 00:03:36,000
all the warnings, right?

83
00:03:36,000 --> 00:03:41,300
If I do - W all, we get some pretty immediate problems, some of which

84
00:03:41,300 --> 00:03:43,600
we can fix and some of which we couldn't fix.

85
00:03:43,800 --> 00:03:45,300
So, for example, you can see in here.

86
00:03:45,300 --> 00:03:48,000
It's going to warn us about some things that maybe we did want to know

87
00:03:48,000 --> 00:03:48,400
about.

88
00:03:48,400 --> 00:03:51,300
Like, for example, it's telling us that there's going to be padding

89
00:03:51,300 --> 00:03:54,900
inserted here, because this is a 32-bit value, and this is a 64-bit

90
00:03:54,900 --> 00:03:55,300
value.

91
00:03:55,500 --> 00:03:56,300
Now, that's a warning.

92
00:03:56,300 --> 00:03:59,800
I wouldn't mind seeing whirring 4820, that's, that's can be useful.

93
00:04:00,000 --> 00:04:01,200
Educational for me.

94
00:04:01,500 --> 00:04:04,500
In case I forgot that when I wrote the struct, right?

95
00:04:04,500 --> 00:04:07,500
It's kind of just nice to know doesn't mean you have to fix it.

96
00:04:08,600 --> 00:04:09,800
But it does mean that just nice.

97
00:04:09,800 --> 00:04:10,700
A nice thing to know.

98
00:04:11,400 --> 00:04:14,300
But as you can see, when we get down into these other warnings here,

99
00:04:14,300 --> 00:04:17,899
there's just a stream of them that are all in Windows, .h there in

100
00:04:17,899 --> 00:04:21,200
Windows is header files, right justjust reams of warnings and windows

101
00:04:21,200 --> 00:04:21,800
header files.

102
00:04:22,200 --> 00:04:25,800
So there's not a lot that we could really do about that short of

103
00:04:25,800 --> 00:04:28,300
getting rid of Windows dot h, which could be something that we might

104
00:04:28,300 --> 00:04:28,700
want to do.

105
00:04:28,700 --> 00:04:29,800
Like I've talked about in the future.

106
00:04:29,900 --> 00:04:32,100
ER I don't know that we're going to do it this week, but we might do

107
00:04:32,100 --> 00:04:34,100
in the future so we could get rid of that.

108
00:04:34,100 --> 00:04:37,100
But the say nothing to do potentially will just be to switch down to a

109
00:04:37,100 --> 00:04:40,600
warning level that can, you know, sort of successfully.

110
00:04:41,300 --> 00:04:45,600
Go ahead and compile the windows header files just to keep that out of

111
00:04:45,600 --> 00:04:47,000
the out of the equation for now.

112
00:04:47,100 --> 00:04:50,500
So what I did is I drop down to warning level 3, warning, level 3 has

113
00:04:50,500 --> 00:04:51,300
really no problem.

114
00:04:51,300 --> 00:04:53,800
I don't know if warning level for, I don't think warning level for

115
00:04:53,800 --> 00:04:54,100
can.

116
00:04:54,100 --> 00:04:55,700
Oh, so warning level for can compile them as well.

117
00:04:55,700 --> 00:04:59,100
It's just not if you turn on all of them so we could consider turning

118
00:04:59,100 --> 00:04:59,800
on water level.

119
00:05:00,000 --> 00:05:00,500
Or as well.

120
00:05:00,500 --> 00:05:01,600
Three and four will both work.

121
00:05:01,600 --> 00:05:05,800
Just not all, which is, I guess above for, if you think about it, so,

122
00:05:06,700 --> 00:05:08,900
hmm, apple is done.

123
00:05:10,600 --> 00:05:11,500
Getting all those vitamins.

124
00:05:11,500 --> 00:05:14,400
I don't know if Apple temp vitamins, maybe apples have vitamins hard

125
00:05:14,400 --> 00:05:16,600
to say, anyway.

126
00:05:18,500 --> 00:05:19,700
Couldn't leave that one piece lying.

127
00:05:19,700 --> 00:05:20,500
There was too hard to do.

128
00:05:22,300 --> 00:05:26,500
So, moving along basically, what we can do is we can now look at the

129
00:05:26,500 --> 00:05:30,100
warnings that we do have in our code and the ones that we agree with,

130
00:05:30,100 --> 00:05:33,900
we can basically fix whatever it was, that was causing the warning and

131
00:05:33,900 --> 00:05:35,900
the ones that we think are just annoying.

132
00:05:36,000 --> 00:05:40,100
We can turn off so we can basically decide at this point what warnings

133
00:05:40,100 --> 00:05:42,100
we want and what warnings we think are busy work.

134
00:05:42,100 --> 00:05:43,600
That the compiler is just telling us to do that.

135
00:05:43,600 --> 00:05:44,400
We don't want to do.

136
00:05:44,700 --> 00:05:45,700
Now, another thing we can do.

137
00:05:46,800 --> 00:05:47,800
And I'll do that first.

138
00:05:47,900 --> 00:05:51,200
Is you'll notice that if I compile this here, basically, the compiled

139
00:05:51,200 --> 00:05:54,500
succeeded just fine because warnings do not stop the compile.

140
00:05:55,100 --> 00:05:58,100
But what you can do, I believe it's minus WX as well.

141
00:05:58,100 --> 00:05:59,500
Another command-line switch you can do.

142
00:05:59,600 --> 00:05:59,900
I

143
00:06:00,000 --> 00:06:00,700
You can do.

144
00:06:01,100 --> 00:06:01,400
Yeah.

145
00:06:01,400 --> 00:06:05,600
WX, if you pass WX, it will basically treat warnings as errors.

146
00:06:05,800 --> 00:06:08,500
So it's basically the same as saying, like, Okay, warnings, just our

147
00:06:08,500 --> 00:06:09,200
errors are things.

148
00:06:09,200 --> 00:06:11,100
I'm going to either, I'm either going to turn the warning off.

149
00:06:11,100 --> 00:06:14,900
If I think that it's an erroneous kind of warning or I'm going to fix

150
00:06:14,900 --> 00:06:18,800
it, but I don't ever want you to actually let me compile this file

151
00:06:19,200 --> 00:06:22,500
into an executable, if there's warnings in there, and I think I want

152
00:06:22,500 --> 00:06:26,000
to do that as well, because we're going to be basically keeping our

153
00:06:26,000 --> 00:06:29,300
warning set to just warnings that we consider useful and important.

154
00:06:29,600 --> 00:06:29,900
We're going.

155
00:06:30,000 --> 00:06:31,600
Turn off ones that we think are frivolous.

156
00:06:31,700 --> 00:06:34,900
So at that point, it doesn't really make sense to ever allow them to

157
00:06:34,900 --> 00:06:35,200
be in there.

158
00:06:35,200 --> 00:06:37,900
We should just never have any warnings because if there were ones that

159
00:06:37,900 --> 00:06:40,100
we really thought were frivolous and unimportant we would have turned

160
00:06:40,100 --> 00:06:40,600
them off.

161
00:06:40,800 --> 00:06:42,200
So that's the way I'm going to treat it for now.

162
00:06:42,200 --> 00:06:43,800
So I'm going to leave that WX in there.

163
00:06:44,100 --> 00:06:48,300
So if we look here now, what we get is basically this guy right here

164
00:06:48,300 --> 00:06:51,400
that I said, I want to use the nameless, the nameless structure.

165
00:06:52,000 --> 00:06:52,600
This guy.

166
00:06:53,000 --> 00:06:56,400
It doesn't love that guy because that's apparently something that it

167
00:06:56,400 --> 00:06:59,000
doesn't think is a standard sort of extension.

168
00:06:59,300 --> 00:06:59,800
These doesn't think

169
00:07:00,000 --> 00:07:04,100
Standard way to to do that but I don't think that's actually a

170
00:07:04,100 --> 00:07:04,500
problem.

171
00:07:04,500 --> 00:07:07,300
I don't know any compilers where that actually causes a problem.

172
00:07:07,500 --> 00:07:09,900
So I'm going to go ahead and say that that warning just does not

173
00:07:09,900 --> 00:07:10,500
count.

174
00:07:10,600 --> 00:07:11,600
We don't want that warning.

175
00:07:11,600 --> 00:07:13,900
I want to be able to use that feature.

176
00:07:14,200 --> 00:07:18,700
If those of you who are standards sticklers, you may want to look that

177
00:07:18,700 --> 00:07:21,800
up before you do this and verify that you think it's okay.

178
00:07:22,400 --> 00:07:25,100
Bye, you know, standards and that sort of stuff, but I don't care

179
00:07:25,100 --> 00:07:27,700
because as long as all the compiler supported, I'm happy with to to

180
00:07:27,700 --> 00:07:28,400
use that.

181
00:07:28,600 --> 00:07:29,800
So what I can do is I can

182
00:07:29,900 --> 00:07:33,200
I can pass - WD - WD.

183
00:07:33,200 --> 00:07:34,900
Takes a warning number, right?

184
00:07:35,000 --> 00:07:39,000
So I can pass warning 4201 and that'll basically disable it.

185
00:07:39,400 --> 00:07:39,700
Oops.

186
00:07:40,000 --> 00:07:41,000
What did I do wrong there?

187
00:07:41,100 --> 00:07:41,700
Invalid?

188
00:07:41,700 --> 00:07:42,500
Numeric arguments?

189
00:07:42,500 --> 00:07:43,800
I think I did that, right.

190
00:07:44,200 --> 00:07:45,400
I wrote down, I do it.

191
00:07:45,400 --> 00:07:46,200
Slower case.

192
00:07:46,400 --> 00:07:48,200
I wrote down these command line switches beforehand.

193
00:07:48,200 --> 00:07:50,000
So I wouldn't have to go hunt for them too much.

194
00:07:51,100 --> 00:07:54,200
Just so you know, if you want to hunt for command-line switches.

195
00:07:54,200 --> 00:07:55,200
It's not that hard.

196
00:07:55,300 --> 00:07:56,200
If you go to msv.

197
00:07:56,200 --> 00:07:59,800
See you can actually type in a command line switch such as the one we

198
00:07:59,800 --> 00:07:59,800
just

199
00:08:00,000 --> 00:08:01,100
I tried like w.

200
00:08:01,100 --> 00:08:04,800
All right, and you can actually get the double, the msdn

201
00:08:04,800 --> 00:08:09,200
documentation, which will tell you all of the stuff about that switch

202
00:08:09,200 --> 00:08:12,700
and other switches, and over here in the compiler options.

203
00:08:12,800 --> 00:08:16,000
You'll notice there's a compiler options listed alphabetically heading

204
00:08:16,300 --> 00:08:19,300
and you can kind of scroll through there and just see what all the

205
00:08:19,300 --> 00:08:20,400
crazy can power switches are.

206
00:08:20,400 --> 00:08:23,100
So if you don't even know what kind of computers which are looking

207
00:08:23,100 --> 00:08:25,800
for, it's kind of handy because you can just go read through and see

208
00:08:25,800 --> 00:08:27,100
what can I do with my compiler.

209
00:08:27,100 --> 00:08:28,300
Hey, it's fun, right?

210
00:08:28,700 --> 00:08:29,800
So that's that's one thing.

211
00:08:29,900 --> 00:08:30,400
You can do.

212
00:08:30,500 --> 00:08:31,100
All right.

213
00:08:31,900 --> 00:08:36,900
So this this is basically, you know, this, this is basically all I

214
00:08:36,900 --> 00:08:37,400
wanted to do.

215
00:08:37,400 --> 00:08:38,799
There was turn that warning off.

216
00:08:38,900 --> 00:08:40,600
I had it capitalize, it should have been lower case.

217
00:08:40,600 --> 00:08:42,799
So - WD-40 to a one turns out off.

218
00:08:42,799 --> 00:08:44,000
We won't hear that anymore.

219
00:08:44,300 --> 00:08:45,900
Now, let's take a look at what this one is.

220
00:08:46,100 --> 00:08:49,200
So this one, it says it's converting from an inch to a un eight

221
00:08:49,200 --> 00:08:50,300
possible loss of data.

222
00:08:50,300 --> 00:08:53,300
So what it's telling me is that think, computed on this side is

223
00:08:53,300 --> 00:08:57,800
basically 32 bits, but the thing on this side is, is eight and it's

224
00:08:57,800 --> 00:08:59,700
feeling like the truncation should be.

225
00:09:00,000 --> 00:09:02,000
Something that tells me about now, I like that warning.

226
00:09:02,000 --> 00:09:02,900
I don't think that's frivolous.

227
00:09:02,900 --> 00:09:05,700
I want to know and it's trivial for me to get rid upright.

228
00:09:05,700 --> 00:09:07,100
I can just say, don't worry.

229
00:09:07,200 --> 00:09:08,200
I understand.

230
00:09:08,600 --> 00:09:11,600
I'm going to tell you with a cast that I wanted that to happen.

231
00:09:11,700 --> 00:09:13,100
You don't have to do it implicitly.

232
00:09:13,200 --> 00:09:16,100
And when I do that, you'll notice that gets rid of the warning, right.

233
00:09:16,300 --> 00:09:18,700
So now we're down, we skipped over those, they're gone.

234
00:09:18,900 --> 00:09:20,400
And so I want to keep that one.

235
00:09:20,400 --> 00:09:21,300
I don't want to eliminate that.

236
00:09:21,300 --> 00:09:22,200
We're that's a good warning.

237
00:09:22,200 --> 00:09:24,000
I don't think there's any reason to get rid of it.

238
00:09:24,500 --> 00:09:26,700
If I had made a mistake there.

239
00:09:27,000 --> 00:09:29,400
It would have been nice to call that line to my attention and say,

240
00:09:29,400 --> 00:09:29,800
hey.

241
00:09:30,000 --> 00:09:33,200
Hey, this is actually going to going to truncate the value, you know,

242
00:09:33,200 --> 00:09:34,500
and I'd be like whoops.

243
00:09:34,500 --> 00:09:35,200
You know, my bad.

244
00:09:35,200 --> 00:09:35,900
I got to fix that.

245
00:09:35,900 --> 00:09:36,900
I shouldn't be truncating there.

246
00:09:36,900 --> 00:09:37,400
Right?

247
00:09:37,900 --> 00:09:42,700
Alright, so in this case, we got another one here looks like the let's

248
00:09:42,700 --> 00:09:46,300
see conversion from real 32 inch possible loss of data.

249
00:09:46,500 --> 00:09:49,600
So I'm not sure where exactly that is complaining about.

250
00:09:49,600 --> 00:09:51,000
So the blue offsets in ENT.

251
00:09:51,100 --> 00:09:52,200
This one's an ENT.

252
00:09:52,200 --> 00:09:53,300
Let me take a look here.

253
00:09:53,900 --> 00:09:55,200
What's going on here?

254
00:09:56,000 --> 00:09:56,800
Yeah, so, okay.

255
00:09:56,800 --> 00:09:59,400
So basically what's happening there is I didn't I guess we missed a

256
00:09:59,400 --> 00:09:59,900
set of

257
00:10:00,000 --> 00:10:01,600
You somehow when I originally wrote that.

258
00:10:01,700 --> 00:10:06,600
So the cast here to integer was affecting only the 4.0 F because it

259
00:10:06,600 --> 00:10:07,900
was binding, it like that.

260
00:10:07,900 --> 00:10:08,400
Right?

261
00:10:08,500 --> 00:10:11,500
And so, then it was it was turning this into an ENT, but then it was

262
00:10:11,500 --> 00:10:14,000
doing the multiply in float, I guess.

263
00:10:14,300 --> 00:10:17,000
Which then is it was not going to actually do the thing that we

264
00:10:17,000 --> 00:10:19,600
wanted, which was turned it into an ENT after doing a floating-point

265
00:10:19,600 --> 00:10:20,100
multiply.

266
00:10:20,300 --> 00:10:23,700
So we actually want to do is make sure we do the multiply first and

267
00:10:23,700 --> 00:10:24,100
then that.

268
00:10:24,100 --> 00:10:26,900
So the compiler doesn't get confused about what we what we were

269
00:10:26,900 --> 00:10:27,800
telling it with this cast.

270
00:10:27,800 --> 00:10:29,600
We're trying to tell you, it's okay.

271
00:10:29,900 --> 00:10:31,300
To turn it from the float to an end.

272
00:10:31,400 --> 00:10:34,100
And I guess it was thinking that this was binding too closely to be

273
00:10:34,100 --> 00:10:34,300
honest.

274
00:10:34,300 --> 00:10:34,700
I'm not sure.

275
00:10:34,700 --> 00:10:36,100
That's what you might want to check that.

276
00:10:36,100 --> 00:10:37,200
I'm not sure about that.

277
00:10:37,300 --> 00:10:39,800
It's a little odd input 0 and x.

278
00:10:39,800 --> 00:10:40,400
No, that's right.

279
00:10:40,400 --> 00:10:41,000
Okay, it is right.

280
00:10:41,000 --> 00:10:43,100
I was gonna say, I didn't know if input end X was a float.

281
00:10:43,100 --> 00:10:45,100
I couldn't remember, but it is a float.

282
00:10:45,100 --> 00:10:46,500
So yeah, what was probably happening?

283
00:10:46,500 --> 00:10:49,800
Was, it was turning this 4.0 F into an integer then multiplying by a

284
00:10:49,800 --> 00:10:52,400
float, which up, converts it back to a float.

285
00:10:52,600 --> 00:10:55,200
And then it was trying to, you know, the whole expression evaluates to

286
00:10:55,200 --> 00:10:56,600
float by doing it this way.

287
00:10:56,600 --> 00:10:59,700
It does the two floats times each other, which is what we want.

288
00:11:00,000 --> 00:11:03,100
That's actually what we wanted, is the floats time to each other.

289
00:11:03,100 --> 00:11:04,500
Once the floats multiply out.

290
00:11:04,500 --> 00:11:07,600
Then we cast down to an end, the compiler thinks that's just fine and

291
00:11:07,600 --> 00:11:09,500
we're done now.

292
00:11:09,900 --> 00:11:13,600
Basically, this guy, I don't like this warning at all unreferenced

293
00:11:13,600 --> 00:11:14,500
formal parameter.

294
00:11:14,600 --> 00:11:17,000
Basically, what this tells you is that you are passing a parameter of

295
00:11:17,000 --> 00:11:18,500
function and not using it.

296
00:11:18,600 --> 00:11:21,600
Now I do that all the time because I'm planning for something in the

297
00:11:21,600 --> 00:11:24,000
future or there's a reason why I didn't do it.

298
00:11:24,300 --> 00:11:25,400
I hate that warning.

299
00:11:26,000 --> 00:11:29,000
I'm maybe you'd want to do that in a compile once in a while just to

300
00:11:29,000 --> 00:11:29,400
see.

301
00:11:29,400 --> 00:11:29,800
But

302
00:11:29,900 --> 00:11:32,800
day to day, I find it to be really annoying and not useful.

303
00:11:33,200 --> 00:11:38,800
So 4100 is also going to get the virtual XO 4100 goes away.

304
00:11:39,200 --> 00:11:39,800
It's gone.

305
00:11:40,500 --> 00:11:42,300
Now, we're down to just a few here.

306
00:11:42,900 --> 00:11:44,000
Let's take a look.

307
00:11:44,300 --> 00:11:46,000
We've got initializing.

308
00:11:46,600 --> 00:11:49,500
So this one is W /, a.

309
00:11:49,500 --> 00:11:50,000
Okay.

310
00:11:50,100 --> 00:11:52,600
So we're basically getting a VK code out of a w /.

311
00:11:52,600 --> 00:11:56,100
Am now the VK code, we're asking for only 32 bits, but the W preamps,

312
00:11:56,100 --> 00:11:58,200
actually 64 bits in win 64.

313
00:11:58,700 --> 00:11:59,800
So we do need to tell it that it's

314
00:12:00,000 --> 00:12:03,000
Okay, truncate that because VK codes, which are going to keyboard

315
00:12:03,000 --> 00:12:04,700
codes that say what key was pressed.

316
00:12:04,700 --> 00:12:06,200
Those are not 64-bit.

317
00:12:06,200 --> 00:12:07,600
So we're fine with that truncation.

318
00:12:07,600 --> 00:12:08,700
That's all good.

319
00:12:08,900 --> 00:12:10,000
No, real problem there.

320
00:12:10,300 --> 00:12:15,800
Now, excuse me in this G word, mass controller count is not a d where

321
00:12:15,800 --> 00:12:16,600
it should have been.

322
00:12:16,900 --> 00:12:19,200
So basically, what we need to do is just make that a d word because d

323
00:12:19,200 --> 00:12:20,200
word is unsigned.

324
00:12:20,200 --> 00:12:22,700
It was signed, it was telling us that we're doing comparison between a

325
00:12:22,700 --> 00:12:24,800
signed and unsigned value, which may have been a mistake.

326
00:12:25,000 --> 00:12:25,700
Not a problem.

327
00:12:25,700 --> 00:12:26,600
We'll just fix that.

328
00:12:27,100 --> 00:12:29,900
And then we basically get to just a bunch of

329
00:12:30,000 --> 00:12:32,300
local variables that aren't actually used.

330
00:12:32,300 --> 00:12:32,500
Now.

331
00:12:32,500 --> 00:12:33,900
I'm fine with that as well.

332
00:12:33,900 --> 00:12:37,000
The compiler will always optimize out those, if they're not used.

333
00:12:37,000 --> 00:12:40,400
So usually that is just not a big savings to have it warned me about

334
00:12:40,400 --> 00:12:40,800
that.

335
00:12:41,000 --> 00:12:45,200
So that's the last we're going to get rid of 4189 and now we're down

336
00:12:45,200 --> 00:12:46,000
to a clean compile.

337
00:12:46,000 --> 00:12:46,800
No warnings.

338
00:12:46,900 --> 00:12:50,300
We eliminated three warnings that we did not want and we left in all

339
00:12:50,300 --> 00:12:52,400
the other ones that seem like they're probably going to be useful to

340
00:12:52,400 --> 00:12:55,800
us and we would like it to keep on asking, so that's pretty good.

341
00:12:55,900 --> 00:12:58,100
All right, so that's just something I want to do.

342
00:12:58,100 --> 00:12:59,800
Turn on a higher warning level because War

343
00:13:00,000 --> 00:13:03,000
Do catch errors for you, occasionally bugs in the code?

344
00:13:03,000 --> 00:13:05,000
Basically, it's not often.

345
00:13:05,000 --> 00:13:07,800
A lot of times warnings don't actually catch a bug, but the times that

346
00:13:07,800 --> 00:13:09,200
they do, you'll be happy there there.

347
00:13:09,300 --> 00:13:12,100
I think we already had one time on the stream when because we were at

348
00:13:12,100 --> 00:13:15,800
a lower warning level, we had some, we had to catch ourselves of the

349
00:13:15,800 --> 00:13:16,200
compiler.

350
00:13:16,200 --> 00:13:17,700
Would it cost for us at a higher warning level?

351
00:13:18,000 --> 00:13:20,700
And that's just an example of something that, you know, like I said, I

352
00:13:20,700 --> 00:13:23,900
wanted to get to and turn that on, because I never code without prior,

353
00:13:23,900 --> 00:13:24,400
warning level.

354
00:13:24,400 --> 00:13:26,900
And so, I didn't want to mislead people into thinking that was a good

355
00:13:26,900 --> 00:13:27,100
idea.

356
00:13:27,100 --> 00:13:28,200
I don't think it's a good idea.

357
00:13:28,600 --> 00:13:29,700
I like to keep the warning level.

358
00:13:29,900 --> 00:13:30,200
Le tively.

359
00:13:30,200 --> 00:13:30,600
Hi.

360
00:13:32,900 --> 00:13:35,600
And like I said, if there's a particular warning level, that seems too

361
00:13:35,600 --> 00:13:37,500
high because there's a couple areas that are, there's a couple of

362
00:13:37,500 --> 00:13:38,700
warnings that are just really bugging.

363
00:13:38,700 --> 00:13:40,600
You just turn just those ones off.

364
00:13:40,600 --> 00:13:43,800
If you don't think if you think their frivolous but don't let that

365
00:13:43,800 --> 00:13:47,200
discourage you from turning on the rest of them, which may be actually

366
00:13:47,200 --> 00:13:51,500
been very beneficial and help you catch errors before a long,

367
00:13:51,500 --> 00:13:54,500
protracted annoying debugging session to find those errors.

368
00:13:54,700 --> 00:13:56,300
Alright, so I wrote down here.

369
00:13:56,300 --> 00:13:59,000
I took my notebook today and I wrote down some of the other compiler

370
00:13:59,000 --> 00:14:00,800
switches that I typically use.

371
00:14:00,900 --> 00:14:03,900
Use and I just wanted to kind of go over some of them while we're in

372
00:14:03,900 --> 00:14:08,000
here, doing sort of this kind of cleanup of our stuff that we're

373
00:14:08,000 --> 00:14:09,000
passing to our build.

374
00:14:09,200 --> 00:14:11,500
So typically we have some stuff in here.

375
00:14:11,500 --> 00:14:15,900
One of them is minus zi and what - zi does is minus zi.

376
00:14:15,900 --> 00:14:19,800
Basically tells it to produce debug information and what that is.

377
00:14:19,800 --> 00:14:23,400
If you go look in the actual build directory, right?

378
00:14:24,000 --> 00:14:26,800
That's these pdb files and stuff here, right?

379
00:14:26,900 --> 00:14:29,100
Those those are basically read by the debugger.

380
00:14:31,000 --> 00:14:31,500
Excuse me.

381
00:14:32,600 --> 00:14:37,400
Those are read by the debugger to tell it essentially, where the stuff

382
00:14:37,400 --> 00:14:39,900
is in the executable, that It produced.

383
00:14:40,000 --> 00:14:43,600
Because when the debugger loads, the executable and starts stepping

384
00:14:43,600 --> 00:14:45,300
through that executable as you go.

385
00:14:45,400 --> 00:14:49,800
He doesn't know, for example, where in the executable corresponds to

386
00:14:50,300 --> 00:14:51,700
where in the source code.

387
00:14:51,900 --> 00:14:54,900
So what the compiler has to do is it has to spit out annotation

388
00:14:54,900 --> 00:14:57,000
essentially in the form of these pdb files.

389
00:14:57,200 --> 00:14:59,800
That essentially sort of illustrate.

390
00:15:00,000 --> 00:15:01,700
To the debugger.

391
00:15:01,700 --> 00:15:04,800
After the fact, we're in the executable corresponds to where in the

392
00:15:04,800 --> 00:15:08,800
source file and stuff like, where, what names of variables were that

393
00:15:08,800 --> 00:15:09,300
sort of stuff.

394
00:15:09,300 --> 00:15:12,400
Lots of things have to go in there and you can see just by looking at

395
00:15:12,400 --> 00:15:12,800
it.

396
00:15:12,900 --> 00:15:14,100
It's a 2 megabyte file.

397
00:15:14,100 --> 00:15:17,800
That pdb is, and our, executable is only 200 K.

398
00:15:17,900 --> 00:15:20,500
So, it's actually, the debug info is just a lot bigger than the

399
00:15:20,500 --> 00:15:21,000
executable.

400
00:15:21,000 --> 00:15:22,600
In fact, it's just a lot of info.

401
00:15:22,600 --> 00:15:23,900
It's sort of like browse info.

402
00:15:23,900 --> 00:15:25,700
You almost might think of it, kind of like that.

403
00:15:25,800 --> 00:15:29,100
Like, you know, in Visual Studio allows you to jump around and see

404
00:15:29,100 --> 00:15:29,800
what things are.

405
00:15:30,000 --> 00:15:31,300
It's almost like that for the debugger.

406
00:15:31,300 --> 00:15:34,000
It's a thing that tells it this particular location executable

407
00:15:34,000 --> 00:15:36,700
corresponds to this particular name of a thing.

408
00:15:36,700 --> 00:15:39,000
And that thing is a function and whatever that sort of stuff.

409
00:15:41,200 --> 00:15:46,100
So what I want to do here is I just want to point out the fact that

410
00:15:46,100 --> 00:15:46,800
minus Z.

411
00:15:46,800 --> 00:15:48,000
I can be problematic.

412
00:15:48,000 --> 00:15:48,700
Sometimes.

413
00:15:49,200 --> 00:15:53,200
I don't know if they fix this in 2013, but in previous versions, there

414
00:15:53,200 --> 00:15:57,200
were a lot of problems with the way that pdb handling was done and if

415
00:15:57,200 --> 00:15:59,600
I delete the pdbs here, basically.

416
00:15:59,600 --> 00:15:59,800
So there

417
00:16:00,000 --> 00:16:01,000
Dawn, right?

418
00:16:01,000 --> 00:16:04,800
And I do this build, you know, they come back right there they are.

419
00:16:05,200 --> 00:16:09,700
So when I make those pdbs they basically are kind of shared as the

420
00:16:09,700 --> 00:16:12,100
program is compiling in depending on whether it's trying to do a

421
00:16:12,100 --> 00:16:14,900
multiprocessor compiled and all these other sorts of things.

422
00:16:15,100 --> 00:16:17,300
Or if your build script is calling a little times, you can get into

423
00:16:17,300 --> 00:16:21,000
problems where you get kind of race conditions on the PD, because the

424
00:16:21,000 --> 00:16:23,700
compilers trying to hit multiple times and it'll get slower at all

425
00:16:23,700 --> 00:16:24,300
these sorts of things.

426
00:16:24,300 --> 00:16:24,800
I don't know.

427
00:16:25,000 --> 00:16:27,400
It's problematic has been problematic in the past.

428
00:16:27,400 --> 00:16:29,800
I don't know how problematic it still is today, but one of

429
00:16:29,900 --> 00:16:33,900
Things you can do is you can change the zi2 a - z7 and what that'll

430
00:16:33,900 --> 00:16:34,300
do.

431
00:16:34,700 --> 00:16:38,500
If I delete the the pdbs here, it's pretty minimal what it actually

432
00:16:38,500 --> 00:16:39,200
doesn't practice.

433
00:16:39,200 --> 00:16:44,200
You can see that that this guy, this this VC, 120 pdb goes away, and

434
00:16:44,200 --> 00:16:45,500
it's no longer necessary.

435
00:16:45,800 --> 00:16:50,900
And basically, what happens there, you can see that was gonna say.

436
00:16:50,900 --> 00:16:52,300
Oh, yeah, you can see that.

437
00:16:52,300 --> 00:16:57,100
Basically, it only now has this one pdb, Whatever that causes it to

438
00:16:57,100 --> 00:16:57,300
do.

439
00:16:57,300 --> 00:16:59,800
It's some combination of putting debug info in like

440
00:17:00,000 --> 00:17:04,099
Object file or something like this, the minus Z 7 uses a quote-unquote

441
00:17:04,099 --> 00:17:08,000
older format or an older method of do, using the producing the debug

442
00:17:08,000 --> 00:17:12,500
info that seems to play nicer with build environments and

443
00:17:12,599 --> 00:17:13,700
multiprocessor build.

444
00:17:13,700 --> 00:17:15,400
So, I just wanted to point out that it's there.

445
00:17:15,400 --> 00:17:15,800
It will.

446
00:17:16,000 --> 00:17:20,300
I cannot imagine we will ever care about it because we're just using a

447
00:17:20,300 --> 00:17:23,800
build up that file but for people who are doing other stuff and just

448
00:17:23,800 --> 00:17:27,099
want to know, like the z7 is something to kind of be aware of.

449
00:17:27,599 --> 00:17:29,800
So I just, I just be aware of it, read up.

450
00:17:29,900 --> 00:17:30,300
About it.

451
00:17:30,300 --> 00:17:32,600
If you care, we don't really care but it's wanted to point it out.

452
00:17:32,600 --> 00:17:35,900
And that is something that I typically will use any time that if I was

453
00:17:35,900 --> 00:17:37,600
using a more sophisticated build environment.

454
00:17:37,600 --> 00:17:40,400
All, I'd probably throw that in there just because to be safe because

455
00:17:40,400 --> 00:17:41,500
I've had problems in the past.

456
00:17:42,100 --> 00:17:44,000
Anyway, so we've got a couple other things.

457
00:17:44,000 --> 00:17:47,200
There's there's there's definitely a bunch of things we can do in

458
00:17:47,200 --> 00:17:49,700
terms of training on optimizations and that sort of stuff when we want

459
00:17:49,700 --> 00:17:52,300
to do an optimized bill, but we're not really at that point yet.

460
00:17:52,300 --> 00:17:54,500
So mostly I just want to do a couple other things that are turning off

461
00:17:54,500 --> 00:17:54,800
features.

462
00:17:54,800 --> 00:17:55,700
We don't want it all.

463
00:17:56,100 --> 00:17:59,500
So one of the things that we want to do all the time for example is

464
00:18:00,000 --> 00:18:00,800
Intrinsics.

465
00:18:01,000 --> 00:18:05,300
So for example, if the compiler knows how to is output something say

466
00:18:05,700 --> 00:18:09,800
that would be, you know, like we were calling sign before, right?

467
00:18:09,800 --> 00:18:11,000
You were calling sign F.

468
00:18:11,300 --> 00:18:14,200
If the compiler knows how to do an intrinsic version of sign F, which

469
00:18:14,200 --> 00:18:17,800
is basically to say, do the assembly code right there, that just calls

470
00:18:17,800 --> 00:18:20,200
the processor and does something, you know, if the processor knows how

471
00:18:20,200 --> 00:18:22,700
to do a sign, for example, just do that.

472
00:18:23,000 --> 00:18:25,400
That is something that I like to keep turned on in debug as well

473
00:18:25,400 --> 00:18:29,900
because I never actually want to have the compiler generating calls.

474
00:18:30,000 --> 00:18:33,200
To the C runtime library to do functions that the CPU could have done.

475
00:18:33,300 --> 00:18:36,500
Because I feel like that just adds complexity and changes the behavior

476
00:18:36,500 --> 00:18:39,400
of the C program between debug and release.

477
00:18:39,400 --> 00:18:41,500
Because in release mode, I'm always going to want it to use those

478
00:18:41,500 --> 00:18:42,500
faster intrinsics.

479
00:18:42,600 --> 00:18:44,600
So I tend to like to leave that on all the time.

480
00:18:44,600 --> 00:18:48,500
So - oh, I just says in this build, even though this is a debug build.

481
00:18:48,500 --> 00:18:52,000
I want you to always do any intrinsic stuff that you can.

482
00:18:52,200 --> 00:18:53,100
So that's that.

483
00:18:53,400 --> 00:18:55,000
So I leave that on all the time.

484
00:18:56,000 --> 00:18:59,000
One of the other things that I try to do and I don't even know how

485
00:18:59,000 --> 00:19:02,400
effectively you can do this anymore, but it's just a turn-off runtime

486
00:19:02,400 --> 00:19:04,900
type information, which is a C++ feature.

487
00:19:05,300 --> 00:19:09,300
Basically that is what is the thing that I wrote down the gr.

488
00:19:09,300 --> 00:19:12,900
- is that that basically turns off runtime type information because we

489
00:19:12,900 --> 00:19:14,100
don't need runtime type information.

490
00:19:14,100 --> 00:19:17,800
We're never going to use C++ is runtime type information facility.

491
00:19:17,800 --> 00:19:20,500
So we can just turn that off and save any of the extra stuff that

492
00:19:20,500 --> 00:19:22,100
might be generated for its, we don't care.

493
00:19:22,200 --> 00:19:25,400
The other thing is exception, exception handling, I think.

494
00:19:25,700 --> 00:19:27,600
This is the way the best way to turn it off.

495
00:19:27,600 --> 00:19:32,200
But those of you who maybe have more experience with visual Visual

496
00:19:32,200 --> 00:19:35,100
Studio stuff, might know of an easier way to turn off.

497
00:19:35,100 --> 00:19:39,500
I think that turns it off so that you can you no longer generate it,

498
00:19:39,500 --> 00:19:43,300
no longer generates kind of overhead based on handling.

499
00:19:43,300 --> 00:19:44,200
This kind of stuff.

500
00:19:44,600 --> 00:19:47,500
I'm not going to cover what this is, but those of you who program C++

501
00:19:47,500 --> 00:19:48,700
know what I'm talking about.

502
00:19:49,100 --> 00:19:50,100
I think that turns it off.

503
00:19:50,100 --> 00:19:51,100
I'm not actually sure.

504
00:19:51,600 --> 00:19:55,500
Let's see, x equals zero, does it now?

505
00:19:55,600 --> 00:19:58,500
So I don't actually know how to get that to turn off in.

506
00:19:58,800 --> 00:19:59,400
There it is.

507
00:19:59,400 --> 00:20:00,700
All right, that's good.

508
00:20:00,700 --> 00:20:01,300
That's good enough.

509
00:20:01,300 --> 00:20:05,000
Then - eh, eh appears to have turned it off again.

510
00:20:05,000 --> 00:20:08,200
If you're if you're a visual C++ expert and you happen to know what

511
00:20:08,200 --> 00:20:08,600
the switch is.

512
00:20:08,600 --> 00:20:10,100
That definitively turns it off.

513
00:20:10,500 --> 00:20:11,600
Maybe that's a good thing.

514
00:20:11,700 --> 00:20:12,400
Let's see here.

515
00:20:12,400 --> 00:20:13,000
That's it.

516
00:20:13,000 --> 00:20:13,300
Yeah.

517
00:20:13,400 --> 00:20:13,800
Okay.

518
00:20:13,800 --> 00:20:17,600
So that's the one that I wanted then and and basically what that does

519
00:20:17,600 --> 00:20:21,900
is it says this is a C++ feature that's basically called exception

520
00:20:21,900 --> 00:20:22,500
handling.

521
00:20:22,600 --> 00:20:24,300
What it allows you to do is do something.

522
00:20:25,000 --> 00:20:25,500
And if

523
00:20:25,700 --> 00:20:28,200
That something should do what's called throwing an exception.

524
00:20:28,200 --> 00:20:31,500
Which basically allows you to type, you know, throw something here.

525
00:20:31,900 --> 00:20:35,900
If you are inside a try block and somebody does one of these throw

526
00:20:35,900 --> 00:20:36,500
things.

527
00:20:36,600 --> 00:20:38,100
It doesn't matter how deep down you are.

528
00:20:38,100 --> 00:20:39,500
You could be many functions deep.

529
00:20:39,600 --> 00:20:41,100
It will unwind the stack.

530
00:20:41,100 --> 00:20:45,600
The call stack all the way back up to the first and closing, try and

531
00:20:45,600 --> 00:20:48,500
see if the catch Handler catches, whatever.

532
00:20:48,500 --> 00:20:52,000
The thing is, that's thrown and basically what that means is if an

533
00:20:52,000 --> 00:20:55,300
integer was thrown, you would have an ENT catch here.

534
00:20:55,600 --> 00:20:58,500
And then it would go ahead and execute this piece of code and

535
00:20:58,500 --> 00:20:59,200
continue.

536
00:20:59,300 --> 00:20:59,600
That's what

537
00:21:00,000 --> 00:21:00,500
Killing it.

538
00:21:00,700 --> 00:21:02,300
I have no need for those at all.

539
00:21:02,400 --> 00:21:05,400
Because the only exception handling we might do is called structured

540
00:21:05,400 --> 00:21:08,200
exception handling, which is a win32 feature.

541
00:21:09,000 --> 00:21:11,900
We don't actually need C++ has exception handling for anything.

542
00:21:11,900 --> 00:21:15,100
So I'm just going to turn that off because it generates extra stuff on

543
00:21:15,100 --> 00:21:16,400
the stack that we don't actually need.

544
00:21:19,500 --> 00:21:21,700
But I don't actually know if it's much of an efficiency thing anymore.

545
00:21:21,700 --> 00:21:22,300
These days.

546
00:21:22,800 --> 00:21:24,500
I don't know if they've gotten that down to where it's not that

547
00:21:24,500 --> 00:21:24,900
important.

548
00:21:24,900 --> 00:21:26,000
But I usually turn those off.

549
00:21:26,600 --> 00:21:29,900
Also, obviously when we compile you'll notice it still printing out.

550
00:21:29,900 --> 00:21:31,000
This little Banner here.

551
00:21:31,100 --> 00:21:34,700
It's like telling us about the Microsoft are C, C++ optimizing

552
00:21:34,700 --> 00:21:35,300
compiler.

553
00:21:35,700 --> 00:21:37,000
That I like to turn off as well.

554
00:21:37,000 --> 00:21:39,100
You can do no logo and just get rid of it.

555
00:21:39,200 --> 00:21:40,200
It's just cleaner to read.

556
00:21:40,200 --> 00:21:41,600
I don't need to know who wrote the compiler.

557
00:21:41,600 --> 00:21:44,400
I'm a pretty well aware of that at this point, so it shouldn't be a

558
00:21:44,400 --> 00:21:44,800
problem.

559
00:21:45,000 --> 00:21:48,200
And I think that's most of the things that I want to show now.

560
00:21:49,000 --> 00:21:51,600
I did want to show one more thing.

561
00:21:51,700 --> 00:21:52,900
I'm not sure.

562
00:21:53,200 --> 00:21:58,600
So I it's a little bit iffy is whether whether I want to do this today

563
00:21:58,600 --> 00:21:59,100
or not.

564
00:21:59,100 --> 00:22:00,400
I think I'm gonna try to do it.

565
00:22:00,400 --> 00:22:05,300
And we'll see how hard it is to actually get it to Output this without

566
00:22:05,300 --> 00:22:07,300
having to do too much work on the tool chain.

567
00:22:07,300 --> 00:22:12,000
But what I'd like to do is show how to do a 32-bit build potentially.

568
00:22:12,100 --> 00:22:15,200
And so, what I'm going to do in here, I think we're still asking for

569
00:22:15,200 --> 00:22:16,600
four gigabytes of memory.

570
00:22:17,000 --> 00:22:18,600
I'm going to I'm going to drop that down to one.

571
00:22:18,800 --> 00:22:23,000
A bite just so we can be 32 bits safe for the moment.

572
00:22:23,300 --> 00:22:23,700
Basically.

573
00:22:23,700 --> 00:22:26,200
What I want to do is I want to see if we can just get it compiling

574
00:22:26,200 --> 00:22:28,800
under 32 bit by using Arch.

575
00:22:28,800 --> 00:22:33,200
I don't remember there used to be all these kind of weird restrictions

576
00:22:33,200 --> 00:22:36,200
on like you had to actually use a different version of the compiler.

577
00:22:36,200 --> 00:22:39,700
If you were compiling for 32-bit versus 64-bit and then they made it

578
00:22:39,700 --> 00:22:40,800
so you could or couldn't.

579
00:22:40,800 --> 00:22:43,300
I don't remember it was it was all kind of wacky at first.

580
00:22:43,300 --> 00:22:46,800
It wasn't like llvm where you could just always run one of them and it

581
00:22:46,800 --> 00:22:48,700
worked on both or whatever, but I

582
00:22:48,800 --> 00:22:52,000
Be sure that if you run at least a 64-bit one, now, we'll do 32 bit

583
00:22:52,000 --> 00:22:52,900
and 64 or something like this.

584
00:22:52,900 --> 00:22:59,800
So it we should be able to I think be able to actually tell it that we

585
00:22:59,800 --> 00:23:03,700
want to compile in x86 but I don't actually know if that's true.

586
00:23:03,700 --> 00:23:06,600
So we're just going to try and if we can then I'm going to actually

587
00:23:06,600 --> 00:23:08,500
show how to do that build as well.

588
00:23:08,500 --> 00:23:13,000
Otherwise, if it's if it's a little too much, I may go sort of just do

589
00:23:13,000 --> 00:23:14,700
a pre-baked version one of one of those.

590
00:23:14,700 --> 00:23:17,400
Get it already and then show it on the screen at some point, so we

591
00:23:17,400 --> 00:23:18,800
don't waste hours going through.

592
00:23:18,800 --> 00:23:21,900
You try and you know pulling our hair out, trying to make that work.

593
00:23:21,900 --> 00:23:22,200
All right.

594
00:23:22,200 --> 00:23:24,200
So basically let's let's take a look here.

595
00:23:24,200 --> 00:23:32,000
What I want to do is I want to do M SV C, 2013, compile x86 32-bit

596
00:23:32,000 --> 00:23:34,100
basically, so let's see here.

597
00:23:34,400 --> 00:23:36,600
Let's see what they say.

598
00:23:38,200 --> 00:23:40,100
Did you in the configuration manager?

599
00:23:40,100 --> 00:23:42,400
Oh, that's actually not the compiler switches though.

600
00:23:42,700 --> 00:23:45,000
I want to actually know what the compiler switches are.

601
00:23:45,000 --> 00:23:47,500
I feel like this should be it, but I don't actually see it.

602
00:23:47,900 --> 00:23:48,600
This, our check.

603
00:23:48,700 --> 00:23:53,100
It's 86 thing is kind of looked like what I wanted this thing, but I

604
00:23:53,100 --> 00:23:55,500
don't actually see ia-32.

605
00:23:55,700 --> 00:23:56,000
So in size?

606
00:23:56,000 --> 00:23:56,300
No.

607
00:23:56,300 --> 00:23:59,400
Enhanced instruction is also specifies x87 for floating-point

608
00:23:59,400 --> 00:23:59,800
calculations.

609
00:24:00,200 --> 00:24:05,000
This looks more like just telling it what kind of instructions to use

610
00:24:05,000 --> 00:24:08,500
not whether to use 32-bit or 64-bit in a weird kind of way.

611
00:24:08,900 --> 00:24:10,000
I would have thought.

612
00:24:10,500 --> 00:24:13,800
Yeah, it's a little it's just kind of strange so that doesn't look

613
00:24:13,800 --> 00:24:14,600
like what I wanted.

614
00:24:14,600 --> 00:24:16,700
So I don't know whether I have to actually use.

615
00:24:16,700 --> 00:24:20,000
Like I said a different version of the executable to tell it which can

616
00:24:20,200 --> 00:24:26,600
which, which 32-bit or 64-bit version.

617
00:24:26,600 --> 00:24:27,600
I'm trying to use.

618
00:24:27,800 --> 00:24:28,900
So I'm not sure about that.

619
00:24:28,900 --> 00:24:29,800
What I do know.

620
00:24:30,200 --> 00:24:34,800
At the very least is the, there's a couple things that I want to do

621
00:24:34,800 --> 00:24:35,500
with the Linker.

622
00:24:35,700 --> 00:24:37,700
And so, what I'm going to do is I'm just going to, like I said, spend

623
00:24:37,700 --> 00:24:40,800
a couple seconds on this and see if I can get it to work so that we

624
00:24:40,800 --> 00:24:43,500
can we can kind of go into debt, but that's okay.

625
00:24:43,500 --> 00:24:46,900
32-bit compiled M SV C CL.

626
00:24:47,000 --> 00:24:47,700
Let's just see.

627
00:24:50,100 --> 00:24:51,900
Let's see here.

628
00:24:53,100 --> 00:24:53,800
Target, Arch.

629
00:24:53,800 --> 00:24:56,100
Those look like platform to finds.

630
00:24:57,900 --> 00:24:58,300
I don't know.

631
00:24:58,300 --> 00:24:59,800
This doesn't look useful.

632
00:25:00,400 --> 00:25:02,300
Let's see here.

633
00:25:06,900 --> 00:25:10,300
Yeah, I mean, the other, I guess, the thing we can do.

634
00:25:10,600 --> 00:25:12,900
I mean, obviously, we have this thing.

635
00:25:13,500 --> 00:25:14,600
I don't know if you remember this.

636
00:25:14,800 --> 00:25:20,000
So in our shell, in our shell, dot bat that we made way back at the

637
00:25:20,000 --> 00:25:23,100
beginning, you'll notice we did x64 here.

638
00:25:23,600 --> 00:25:27,400
So, one thing we could do, right, is we could call this thing and

639
00:25:27,400 --> 00:25:28,900
switch the mode that were in.

640
00:25:29,100 --> 00:25:33,000
So if I do this, right, if I do this line exactly.

641
00:25:33,200 --> 00:25:34,700
And just tell it to do instead.

642
00:25:34,900 --> 00:25:37,900
Of that to do x86 like that.

643
00:25:39,300 --> 00:25:44,100
Then when we build, I believe it will build 32-bit because that is

644
00:25:44,200 --> 00:25:44,900
that is the thing.

645
00:25:44,900 --> 00:25:46,400
I was talking about where you switch the compiler.

646
00:25:46,400 --> 00:25:49,500
I was kind of hoping to not have to do it, but that's one way to do

647
00:25:49,500 --> 00:25:49,900
it.

648
00:25:50,000 --> 00:25:51,600
And so that should actually work.

649
00:25:51,800 --> 00:25:55,200
And you can see here, when I did the build, it really did switch

650
00:25:55,200 --> 00:26:00,600
because it's giving me a warning about a size conversion where where

651
00:26:00,600 --> 00:26:04,700
size T is now 32 bits instead of 64 bits, so we can

652
00:26:04,800 --> 00:26:06,000
Always switch it that way.

653
00:26:06,300 --> 00:26:07,600
I guess that's just what I'll do.

654
00:26:07,700 --> 00:26:09,300
And we'll just put it to do in here.

655
00:26:09,300 --> 00:26:10,200
Will say, look.

656
00:26:11,300 --> 00:26:16,800
Can we just build both without with one egg Z?

657
00:26:17,200 --> 00:26:20,400
If we can't, it's not really that big of a deal because we could still

658
00:26:20,400 --> 00:26:22,700
build both with a batch file without a problem.

659
00:26:22,700 --> 00:26:27,700
By just instead of letting v c VAR story to a VC vars, do the work for

660
00:26:27,700 --> 00:26:27,900
us.

661
00:26:29,000 --> 00:26:31,700
We would basically just actually directly set the environment

662
00:26:31,700 --> 00:26:34,700
variables and call the right things to make it work, but it doesn't

663
00:26:34,800 --> 00:26:36,100
Like that's going to be forthcoming.

664
00:26:36,200 --> 00:26:40,400
So I was going to do it this way for the sake of expediency for now.

665
00:26:40,600 --> 00:26:42,700
So we'll go ahead and do that.

666
00:26:43,100 --> 00:26:44,000
If we compile in here.

667
00:26:44,000 --> 00:26:46,600
This is a 64-bit compile because emacs was launched from the show,

668
00:26:46,600 --> 00:26:48,700
when it still had the environment setup for 64.

669
00:26:48,900 --> 00:26:50,600
If we build it out here, now, we switched it.

670
00:26:50,600 --> 00:26:51,600
So it'll do it this way.

671
00:26:51,800 --> 00:26:54,200
We can take a look at line 634 in win32.

672
00:26:54,200 --> 00:26:54,700
Handmade.

673
00:26:54,700 --> 00:26:59,600
That's our only error 634 and basically, all that is is it's saying,

674
00:26:59,600 --> 00:26:59,800
oh,

675
00:27:00,000 --> 00:27:02,900
By the way, excuse me.

676
00:27:03,400 --> 00:27:04,300
I need to convert.

677
00:27:04,300 --> 00:27:06,500
I supposed total size to a size, T.

678
00:27:06,700 --> 00:27:08,600
We can't actually pass it.

679
00:27:08,600 --> 00:27:11,100
Things that are going to be 64 bits anymore because virtual Alec is

680
00:27:11,100 --> 00:27:12,300
going to be that.

681
00:27:12,300 --> 00:27:16,400
So what I'll do is I guess I'll just use size T that way on 64-bit

682
00:27:16,400 --> 00:27:16,900
platforms.

683
00:27:16,900 --> 00:27:20,100
Size T, is defined to be 64-bit and 32-bit.

684
00:27:20,100 --> 00:27:21,800
It's defined to be 32.

685
00:27:21,900 --> 00:27:24,700
So that's the compiler specific definition for that.

686
00:27:24,700 --> 00:27:28,200
So we can just use that size T in this code, for that purpose and that

687
00:27:28,200 --> 00:27:29,200
way on either of our builds.

688
00:27:29,200 --> 00:27:29,800
It'll compile.

689
00:27:30,000 --> 00:27:33,000
A properly and you sit the full 64 bits, where applicable?

690
00:27:33,500 --> 00:27:33,900
All right.

691
00:27:33,900 --> 00:27:35,700
So basically what that should have done.

692
00:27:35,700 --> 00:27:39,000
If I do this build here are win32 handmade should now be a 32-bit

693
00:27:39,000 --> 00:27:43,000
executable and I can I can actually just run it as such.

694
00:27:43,100 --> 00:27:46,600
So if I come in here, right, this should be a 64-bit executable.

695
00:27:46,600 --> 00:27:48,400
Now will double check to see if that's true.

696
00:27:48,800 --> 00:27:52,400
If I come in here basically, we're going through everything and we

697
00:27:52,400 --> 00:27:55,500
want to see does this kind of work.

698
00:27:55,500 --> 00:27:57,500
What is the size of size T.

699
00:27:57,500 --> 00:27:58,200
For example?

700
00:27:59,100 --> 00:27:59,500
For.

701
00:27:59,500 --> 00:28:01,800
So, this is a 32-bit build does everything.

702
00:28:01,800 --> 00:28:02,300
Run?

703
00:28:02,300 --> 00:28:03,300
Everything does run?

704
00:28:03,300 --> 00:28:04,300
It's all good.

705
00:28:04,400 --> 00:28:05,400
So we're happy.

706
00:28:05,400 --> 00:28:06,800
We have our 32-bit filled.

707
00:28:07,100 --> 00:28:10,800
Okay, so that gets me onto the main thing that I what

708
00:28:13,000 --> 00:28:13,700
Is that?

709
00:28:18,400 --> 00:28:19,200
What happened there?

710
00:28:22,300 --> 00:28:25,000
Mmm, I got a reconnecting message.

711
00:28:25,000 --> 00:28:27,100
Are people still is a stream still alive.

712
00:28:32,200 --> 00:28:33,000
What's going on?

713
00:28:38,800 --> 00:28:39,500
Where do we lose?

714
00:28:39,500 --> 00:28:40,600
Where we leave off?

715
00:28:44,800 --> 00:28:46,100
I don't know what's going on here.

716
00:28:52,200 --> 00:28:52,900
What's going on?

717
00:28:54,500 --> 00:28:55,100
Oh, no.

718
00:28:56,200 --> 00:28:56,900
All right.

719
00:28:58,200 --> 00:28:58,600
Well.

720
00:29:00,500 --> 00:29:03,200
Not sure what we can do about.

721
00:29:03,200 --> 00:29:03,700
That.

722
00:29:03,700 --> 00:29:05,200
Looks like the internet went down.

723
00:29:06,200 --> 00:29:08,200
So I guess there's not much I can do.

724
00:29:08,200 --> 00:29:09,600
I guess I'll finish the lesson though.

725
00:29:10,800 --> 00:29:12,100
That's really unfortunate.

726
00:29:12,400 --> 00:29:15,500
Oh, well, well, the stream went down, but I guess I'll finish the

727
00:29:15,500 --> 00:29:16,600
lesson and people can watch it.

728
00:29:16,600 --> 00:29:18,400
After the fact that's really unfortunate.

729
00:29:19,300 --> 00:29:22,200
I will have to get a better internet service provider.

730
00:29:23,000 --> 00:29:26,800
All right, so, I guess moving on here.

731
00:29:27,500 --> 00:29:28,900
Let's see what we can do.

732
00:29:29,500 --> 00:29:30,100
Basically, we've got

733
00:29:30,300 --> 00:29:33,500
32-bit build working, which is what we actually wanted.

734
00:29:34,000 --> 00:29:35,300
And I don't know what I can do.

735
00:29:35,300 --> 00:29:37,300
I guess, what soon as this reconnects will be able to get the

736
00:29:37,300 --> 00:29:39,000
livestream back, that is unfortunate.

737
00:29:39,000 --> 00:29:41,000
I'm surprised it hasn't happened earlier, to be honest with you.

738
00:29:41,400 --> 00:29:42,500
That's really annoying.

739
00:29:42,900 --> 00:29:44,000
But I will, I will.

740
00:29:44,000 --> 00:29:44,600
Basically.

741
00:29:44,600 --> 00:29:47,100
I've already kind of been a little bit mad at the internet service

742
00:29:47,100 --> 00:29:47,300
prior.

743
00:29:47,300 --> 00:29:53,300
So we will, we will take that up with them after the fact and then

744
00:29:53,300 --> 00:29:54,200
we'll continue on.

745
00:29:54,200 --> 00:29:54,800
All right.

746
00:29:54,800 --> 00:29:58,200
So back to where we were before the internet service provider.

747
00:29:58,200 --> 00:29:59,800
So, so gracious.

748
00:30:00,000 --> 00:30:01,800
He destroyed the stream.

749
00:30:02,500 --> 00:30:03,200
Basically.

750
00:30:04,400 --> 00:30:07,000
I was just trying to say once we have a 32-bit build working.

751
00:30:07,300 --> 00:30:09,200
There's some stuff that I wanted to show you.

752
00:30:09,600 --> 00:30:12,400
So I that's why I wanted to get to a 32-bit build.

753
00:30:12,400 --> 00:30:13,900
All right, so we have a 32-bit build here.

754
00:30:13,900 --> 00:30:16,300
Now, inside emacs, it's 64 bit.

755
00:30:16,300 --> 00:30:19,400
So I'm going to close emacs because again, emacs inherits when you

756
00:30:19,400 --> 00:30:21,200
launch it, all of the settings from your shell.

757
00:30:21,600 --> 00:30:25,200
So basically, I am going to go ahead and relaunch emac, so that now

758
00:30:25,200 --> 00:30:28,500
we're building in 32-bit mode and we are happy.

759
00:30:28,800 --> 00:30:29,800
So basically in here,

760
00:30:30,000 --> 00:30:35,700
Here, I will go ahead and say in my hand made here at STP build, that

761
00:30:35,700 --> 00:30:38,300
looks like a 32-bit and we're all good.

762
00:30:38,400 --> 00:30:41,900
What I want to do now is the thing that I wanted to do before the that

763
00:30:41,900 --> 00:30:44,300
a long time ago, but I didn't think we were quite ready for it yet.

764
00:30:44,300 --> 00:30:48,100
Is I want to basically show you what happens when you try to roll.

765
00:30:48,300 --> 00:30:52,600
Basically you try to run on another machine.

766
00:30:52,600 --> 00:30:53,700
That's not your dead machine.

767
00:30:53,700 --> 00:30:54,400
Right?

768
00:30:54,500 --> 00:30:57,900
And so what I've done here is I've set up a virtual box.

769
00:30:58,500 --> 00:30:59,800
A virtual box with Windows.

770
00:31:00,000 --> 00:31:01,000
7, I'm sorry.

771
00:31:01,000 --> 00:31:01,900
Windows XP.

772
00:31:04,100 --> 00:31:07,200
Old-school Windows XP super old school, you know what I'm talking

773
00:31:07,200 --> 00:31:07,800
about.

774
00:31:08,500 --> 00:31:10,700
Basically, this Windows XP.

775
00:31:10,800 --> 00:31:14,000
I've set it up to share our executable.

776
00:31:14,300 --> 00:31:17,200
So basically, if I go in here to build, you can see that we've got

777
00:31:17,300 --> 00:31:20,900
basically the win32 handmade thing here and all that.

778
00:31:21,100 --> 00:31:24,800
So if I want to, I can basically open up a command prompt.

779
00:31:25,100 --> 00:31:26,700
I can take a look at where we are.

780
00:31:26,800 --> 00:31:30,200
I can go into where we normally run our stuff, which is an end,

781
00:31:30,200 --> 00:31:32,400
handmade data, right?

782
00:31:32,400 --> 00:31:33,500
We normally run it here.

783
00:31:34,000 --> 00:31:39,100
And I can run our build by going win32 handmade like that.

784
00:31:39,100 --> 00:31:39,700
Right?

785
00:31:39,900 --> 00:31:45,500
So I can do all the stuff that I wanted to actually do but at least

786
00:31:45,500 --> 00:31:48,100
I'm assuming I know what's going to happen when I hit this.

787
00:31:48,200 --> 00:31:53,000
Maybe I don't, I've never tried it before, but if you notice, when you

788
00:31:53,000 --> 00:31:57,500
actually try to run your stuff, this is often what happens.

789
00:31:57,500 --> 00:31:58,100
This happens.

790
00:31:58,500 --> 00:32:02,600
Shockingly frequently, basically, when you try to

791
00:32:03,900 --> 00:32:07,400
When people try to distribute code nowadays, Windows has gotten to the

792
00:32:07,400 --> 00:32:09,200
point where the development environment is.

793
00:32:09,200 --> 00:32:10,000
So awful.

794
00:32:10,000 --> 00:32:13,100
That the chances that you will actually be able to run an executable.

795
00:32:13,100 --> 00:32:17,000
You build on someone else's machine are essentially zero, like unless

796
00:32:17,000 --> 00:32:20,600
they have the exact same machine as you or, you know, all the things

797
00:32:20,600 --> 00:32:21,600
I'm about to tell you.

798
00:32:21,900 --> 00:32:24,600
There is no way that you will ever do it because Microsoft is

799
00:32:24,600 --> 00:32:28,200
essentially written the development tools to ensure that when you

800
00:32:28,200 --> 00:32:30,100
build something, it won't run.

801
00:32:30,200 --> 00:32:30,600
Now.

802
00:32:30,600 --> 00:32:31,800
I don't know why they did this.

803
00:32:31,900 --> 00:32:33,700
I think it may just be

804
00:32:33,900 --> 00:32:34,800
Not understanding that.

805
00:32:34,800 --> 00:32:37,200
It's important to not have that happen.

806
00:32:37,200 --> 00:32:37,800
I'm not sure.

807
00:32:37,800 --> 00:32:41,400
Cause it seems like they would want things to run, but they have gone

808
00:32:41,400 --> 00:32:42,200
a different route.

809
00:32:42,300 --> 00:32:45,700
Basically, the route that they've gone is to make everyone build these

810
00:32:45,700 --> 00:32:47,500
executables that are crazy incompatible.

811
00:32:47,500 --> 00:32:52,300
And then force you to ship a ton of redistributable content.

812
00:32:52,500 --> 00:32:54,400
I don't know if you've ever noticed, you try to run something on

813
00:32:54,400 --> 00:32:54,700
Steam.

814
00:32:54,700 --> 00:32:57,400
It's got to install the DirectX, runtime, and then it's got to install

815
00:32:57,400 --> 00:32:59,800
some VC redistributable.

816
00:33:00,000 --> 00:33:03,300
A 32 bit or 64 bit depending on what you want, it is, and whether it's

817
00:33:03,300 --> 00:33:06,000
10 or 12, and all, this is just, it's a disaster.

818
00:33:06,300 --> 00:33:08,800
It's a compatibility has gotten awful and windows lately.

819
00:33:08,800 --> 00:33:09,500
It's awful.

820
00:33:09,500 --> 00:33:12,800
But there are some things you can do to try and give yourself a leg

821
00:33:12,800 --> 00:33:13,200
up.

822
00:33:13,200 --> 00:33:16,400
One of them is the thing that I just showed you which is to have a

823
00:33:16,400 --> 00:33:21,200
virtual machine that is totally free of anything installed on it.

824
00:33:21,300 --> 00:33:22,200
No, DirectX!

825
00:33:22,200 --> 00:33:23,000
Runtime.

826
00:33:23,100 --> 00:33:24,400
No VC, redistribute.

827
00:33:24,400 --> 00:33:29,400
Oh, nothing just so you can see what you are actually missing when you

828
00:33:29,400 --> 00:33:29,800
go to run your

829
00:33:30,000 --> 00:33:30,400
Thing.

830
00:33:30,900 --> 00:33:34,500
So, the first thing that will notice is Windows XP.

831
00:33:34,500 --> 00:33:38,100
Actually, if you actually want to be able to run on Windows XP, you

832
00:33:38,100 --> 00:33:42,300
can't even use an executable built by a modern Visual Studio without

833
00:33:42,300 --> 00:33:42,900
some work.

834
00:33:43,200 --> 00:33:47,000
What you actually have to do is start passing things to the Linker by

835
00:33:47,000 --> 00:33:47,400
default.

836
00:33:47,400 --> 00:33:51,600
The Linker won't even create a Windows Windows, XP, compatible,

837
00:33:51,600 --> 00:33:52,300
binary.

838
00:33:52,400 --> 00:33:54,100
That's that's where we're at.

839
00:33:54,100 --> 00:33:54,700
Right?

840
00:33:54,900 --> 00:33:58,600
So what you need to do is you need to pass /, link and / link.

841
00:33:58,600 --> 00:33:59,800
Will allow you to specify start.

842
00:34:00,000 --> 00:34:03,700
Passing Linker options and the Linker auction that I'm going to pass

843
00:34:03,800 --> 00:34:07,500
is called - subsystem which basically tells it what to build.

844
00:34:07,500 --> 00:34:07,900
Normally.

845
00:34:07,900 --> 00:34:10,800
This is for console or Windows.

846
00:34:11,199 --> 00:34:13,300
Those are the two things that you might pass to it.

847
00:34:13,300 --> 00:34:16,699
Console is if you want to make a thing that has wit, you know, Main

848
00:34:17,000 --> 00:34:20,400
and it can print things out to the console printf, scanf, that sort of

849
00:34:20,400 --> 00:34:20,800
thing.

850
00:34:21,300 --> 00:34:22,900
And windows means it's going to open a window.

851
00:34:22,900 --> 00:34:24,199
So it shouldn't be bound to a console.

852
00:34:24,199 --> 00:34:25,400
That's normally what that was for.

853
00:34:25,900 --> 00:34:28,400
But now they've gotten they paint themselves in this corner where

854
00:34:28,400 --> 00:34:29,600
there by default they're compiler.

855
00:34:29,600 --> 00:34:29,800
Doesn't

856
00:34:29,900 --> 00:34:33,300
Even produce executables that when X Windows XP can even run.

857
00:34:33,300 --> 00:34:35,500
And so what you have to do is you have to pass this.

858
00:34:35,500 --> 00:34:39,500
Crazy syntax - subsystem: Windows 5.1.

859
00:34:39,500 --> 00:34:44,000
And if you pass that then when you build, you will actually building

860
00:34:44,000 --> 00:34:46,500
an executable that Windows XP can read at all.

861
00:34:46,900 --> 00:34:49,600
That's not the same as saying that we're actually going to have our

862
00:34:49,600 --> 00:34:50,699
thing actually work.

863
00:34:51,000 --> 00:34:53,400
I'm just saying that's the first step that we need to do.

864
00:34:53,400 --> 00:34:56,800
So, now, if we go back here and try it, you will notice that we

865
00:34:56,800 --> 00:34:59,800
actually get what we wanted, right off the

866
00:35:00,000 --> 00:35:03,100
Right, you can see, you can kind of see, I've actually surprising

867
00:35:03,100 --> 00:35:03,200
that.

868
00:35:03,200 --> 00:35:05,000
There's one other thing I would probably have to do but I didn't have

869
00:35:05,000 --> 00:35:06,600
to we'll talk about that second.

870
00:35:06,700 --> 00:35:10,000
You can see that we're now running on XP, just fine, totally Clean

871
00:35:10,000 --> 00:35:13,100
Machine, nothing installed and we just ran right out of the gate.

872
00:35:13,400 --> 00:35:16,100
Now that actually I said, surprise me.

873
00:35:16,100 --> 00:35:17,500
I thought there was one more thing we're going to do.

874
00:35:17,600 --> 00:35:23,800
I'll make it happen first and then I'll because we lucked out since

875
00:35:23,800 --> 00:35:24,700
we're compiling for the command line.

876
00:35:24,700 --> 00:35:28,100
If you're compiling, I think from the from the, from the

877
00:35:30,300 --> 00:35:31,200
From the IDE.

878
00:35:31,400 --> 00:35:33,900
This wouldn't have been true, but I can make it happen.

879
00:35:34,500 --> 00:35:35,200
I can make it happen.

880
00:35:35,200 --> 00:35:36,800
Anyway, hold on one second.

881
00:35:37,100 --> 00:35:41,600
Let me figure out what the switch is multi-threaded, dll.

882
00:35:41,600 --> 00:35:44,900
This is the one that gets most people and this is why you have to do

883
00:35:44,900 --> 00:35:47,100
the VC readest stuff.

884
00:35:47,100 --> 00:35:48,700
That's very, very annoying.

885
00:35:49,300 --> 00:35:50,100
Let's see here.

886
00:35:50,300 --> 00:35:52,600
Of course, my internet is kind of toast at this point.

887
00:35:52,600 --> 00:35:55,500
So, I don't know if I'll be able to actually look up anything.

888
00:35:55,500 --> 00:35:58,000
Let's find out if I can.

889
00:35:59,500 --> 00:35:59,800
A deal.

890
00:36:00,900 --> 00:36:01,700
Yes, we can.

891
00:36:01,700 --> 00:36:02,500
So here we go.

892
00:36:02,800 --> 00:36:03,900
Baseline is going to do this.

893
00:36:03,900 --> 00:36:06,100
And this is what would have been done by default.

894
00:36:06,100 --> 00:36:11,000
I believe if you would use if you were going to use the the IDE to

895
00:36:11,000 --> 00:36:12,400
build things, which most people do.

896
00:36:12,400 --> 00:36:15,200
And so they get the wrong thing selected, but I'm going to show you

897
00:36:15,200 --> 00:36:19,100
basically what happens if you if you turn it off, so well, I will if

898
00:36:19,100 --> 00:36:19,800
it ever can load.

899
00:36:19,800 --> 00:36:23,300
I think it's / at minus MD, but we'll see here.

900
00:36:23,900 --> 00:36:29,800
So basically we'll go on here - MD and that will allow us.

901
00:36:30,100 --> 00:36:32,200
To sort of exhibit the bug.

902
00:36:32,800 --> 00:36:35,500
Yeah, there we go.

903
00:36:35,700 --> 00:36:39,500
So this is what you normally get when you build from the IDE, you get

904
00:36:39,500 --> 00:36:40,000
this.

905
00:36:40,500 --> 00:36:44,000
And this is basically something that tells you that you can't load

906
00:36:44,000 --> 00:36:47,400
this, you know, random dll that you didn't even know you were using.

907
00:36:48,000 --> 00:36:51,800
Well, the reason for that is because by default the C, runtime

908
00:36:51,800 --> 00:36:54,600
Library, Microsoft, C, runtime Library, the thing that we were using

909
00:36:54,600 --> 00:36:58,200
to call say sign, the thing that has our startup code in it basically

910
00:36:58,500 --> 00:36:59,500
when we step in

911
00:37:00,000 --> 00:37:01,700
If you look at in the debugger, right?

912
00:37:01,800 --> 00:37:05,400
If we look at the call stack this stuff, the all this stuff that

913
00:37:05,400 --> 00:37:06,600
Microsoft implemented.

914
00:37:06,700 --> 00:37:09,700
As part of the compiler package, that starts up the program and stuff

915
00:37:09,700 --> 00:37:10,300
that stuff.

916
00:37:10,600 --> 00:37:15,000
That is basically the thing that it is missing because, by default

917
00:37:15,100 --> 00:37:20,100
that is always done by using a multi-threaded dll by started on my

918
00:37:20,100 --> 00:37:21,900
third, by using an external dll.

919
00:37:21,900 --> 00:37:25,100
So instead of actually linking it into your code, it treats it just

920
00:37:25,100 --> 00:37:26,500
like operating system code and assumes.

921
00:37:26,500 --> 00:37:29,500
The operating system will supply the C runtime library.

922
00:37:29,500 --> 00:37:29,700
Now, the

923
00:37:29,900 --> 00:37:33,400
Problem with that is there are like at this point hundreds of versions

924
00:37:33,400 --> 00:37:36,100
of that c runtime Library, they modify it all the time.

925
00:37:36,400 --> 00:37:38,900
They ship multiple versions of it different versions with each

926
00:37:38,900 --> 00:37:39,700
compiler.

927
00:37:39,900 --> 00:37:43,100
And so what happens is the operating system often doesn't have the

928
00:37:43,100 --> 00:37:48,700
right version of that c runtime library in the dll and so what happens

929
00:37:48,800 --> 00:37:49,800
in dll form.

930
00:37:49,900 --> 00:37:53,200
So it happens is your executable when it tries to load it, totally

931
00:37:53,200 --> 00:37:54,800
fails, because it can't find it.

932
00:37:54,900 --> 00:37:55,200
Now.

933
00:37:55,200 --> 00:37:58,400
There's the thing that you can do, the, I'll show you here to kind of

934
00:37:58,700 --> 00:37:59,800
understand this sort of stuff.

935
00:38:00,000 --> 00:38:01,000
Little bit better.

936
00:38:01,400 --> 00:38:04,300
Again, looks like my internet connections down.

937
00:38:04,300 --> 00:38:08,500
So I may not be able to actually show you one way or the other.

938
00:38:08,500 --> 00:38:09,900
We'll see if it actually works at all.

939
00:38:09,900 --> 00:38:11,300
It doesn't look like it's going to.

940
00:38:11,800 --> 00:38:14,100
So it seems like probably I won't be able to do that.

941
00:38:14,300 --> 00:38:16,900
But basically, there's a thing you can use called depends.

942
00:38:17,300 --> 00:38:18,100
There's a program called.

943
00:38:18,100 --> 00:38:18,500
Depends.

944
00:38:18,500 --> 00:38:20,700
I don't think it's installed on this machine, but maybe it is.

945
00:38:20,700 --> 00:38:21,500
I'm not sure.

946
00:38:22,000 --> 00:38:23,000
I'll give it a shot.

947
00:38:23,100 --> 00:38:25,300
You can download it freely from the Internet.

948
00:38:25,400 --> 00:38:27,500
It's called, depends dot exe.

949
00:38:27,800 --> 00:38:29,800
And I think I might have it installed.

950
00:38:29,900 --> 00:38:30,100
Called.

951
00:38:30,100 --> 00:38:31,000
Let's take a look.

952
00:38:31,000 --> 00:38:33,200
I'm not sure apps now.

953
00:38:33,200 --> 00:38:34,900
I don't got it installed on here.

954
00:38:34,900 --> 00:38:35,700
Unfortunately.

955
00:38:36,900 --> 00:38:39,000
Yeah, it's not it's not on here.

956
00:38:39,100 --> 00:38:41,500
There's basically something called depends dot exe.

957
00:38:41,800 --> 00:38:45,600
And what it will do is it will show you the stuff that a particular

958
00:38:45,600 --> 00:38:48,500
executable relies on and maybe I'll show that to you in a different

959
00:38:48,500 --> 00:38:49,000
stream.

960
00:38:49,400 --> 00:38:52,900
Well, stream, I use the term loosely now since we can't actually use

961
00:38:53,000 --> 00:38:56,200
any streaming to the internet because my internet service provider is

962
00:38:56,200 --> 00:38:56,600
awful.

963
00:38:57,200 --> 00:38:59,800
Basically, what it boils down to is it will

964
00:39:00,000 --> 00:39:05,400
Us what the executable actually relies on so you don't have to

965
00:39:05,400 --> 00:39:09,600
necessarily test it first to see what dlls are expected to be loading

966
00:39:09,600 --> 00:39:12,100
because we know that some of them are going to be loaded, right?

967
00:39:12,200 --> 00:39:13,400
We linked to user 32.

968
00:39:13,400 --> 00:39:14,800
Lib and GDI 32 .libs.

969
00:39:14,800 --> 00:39:17,300
So we knew that and those are just import Library.

970
00:39:17,300 --> 00:39:20,500
So we knew that those were going to link to user 32 at dll and GDI 32

971
00:39:20,500 --> 00:39:23,200
dup Vol, but we didn't know about that hidden one.

972
00:39:23,200 --> 00:39:24,700
That the compiler had stuck in there.

973
00:39:25,000 --> 00:39:28,300
And also kernel32 is implicit here and we didn't ask for that.

974
00:39:28,300 --> 00:39:29,600
So we wouldn't necessarily have known that.

975
00:39:29,600 --> 00:39:29,900
That was

976
00:39:30,000 --> 00:39:30,400
He's in there.

977
00:39:30,400 --> 00:39:33,300
So depends on the XE is a good thing to kind of let you know that.

978
00:39:33,900 --> 00:39:37,300
So basically what I want to show you is - Mt.

979
00:39:37,800 --> 00:39:42,000
Instead of minus MD is the thing that's minus MD, says, use the dll -

980
00:39:42,000 --> 00:39:46,700
Mt says, use the static Library, like link it in actually package, all

981
00:39:46,700 --> 00:39:49,600
the C runtime Library into our executable wholesale.

982
00:39:49,600 --> 00:39:53,400
Don't look for a dll that is the switch that you absolutely want to

983
00:39:53,400 --> 00:39:55,500
have set so that you don't get that error.

984
00:39:55,500 --> 00:39:58,600
And then when you run on another computer, you don't need to have

985
00:39:58,600 --> 00:39:59,800
that, VC, vars, read.

986
00:40:00,000 --> 00:40:03,400
Beauty redistributable, so that's a very good thing if you're trying

987
00:40:03,400 --> 00:40:04,800
to make your game more compatible.

988
00:40:05,300 --> 00:40:08,800
So basically now at least we know we are running sanely.

989
00:40:08,800 --> 00:40:10,300
We can run on Windows XP.

990
00:40:10,500 --> 00:40:11,700
I hear the sound.

991
00:40:12,200 --> 00:40:14,600
We've got the, the image and everything.

992
00:40:15,000 --> 00:40:16,500
So, I think we're in pretty good shape.

993
00:40:17,100 --> 00:40:18,400
That's all I really wanted to show you.

994
00:40:18,700 --> 00:40:22,100
And so, I keep a virtual machine around or an actual machine installed

995
00:40:22,100 --> 00:40:22,800
with Windows XP.

996
00:40:22,800 --> 00:40:25,700
For this very purpose, when I actually want it.

997
00:40:26,100 --> 00:40:28,000
I'm going to actually just get rid of this.

998
00:40:28,000 --> 00:40:28,100
Now.

999
00:40:28,100 --> 00:40:29,700
Let's see, power off the machine.

1000
00:40:29,700 --> 00:40:29,700
I

1001
00:40:29,900 --> 00:40:31,900
Yes, because we don't need it for anything else, but that's all I

1002
00:40:31,900 --> 00:40:32,400
wanted to show you.

1003
00:40:32,400 --> 00:40:34,600
And so I'm going to put that in there, even though it's the default on

1004
00:40:34,600 --> 00:40:35,400
the command line.

1005
00:40:35,500 --> 00:40:39,000
So, I don't think you would make ever have this mistake, if you're

1006
00:40:39,000 --> 00:40:41,000
using the command line, because even if you don't specify it, it's

1007
00:40:41,000 --> 00:40:41,400
fine.

1008
00:40:41,600 --> 00:40:44,500
But in the IDE, I believe, when you create a new project, a default is

1009
00:40:44,500 --> 00:40:46,200
to use the, the, the multi-threaded dll.

1010
00:40:46,200 --> 00:40:47,500
And that's really bad.

1011
00:40:47,500 --> 00:40:51,100
Like you don't want that creates all kinds of compatibility nightmares

1012
00:40:51,100 --> 00:40:51,600
for you.

1013
00:40:51,800 --> 00:40:54,400
So, that's basically all I wanted to cover.

1014
00:40:54,400 --> 00:40:57,400
I think that's basically everything I had written down here.

1015
00:40:57,400 --> 00:40:59,300
That's not about compilation.

1016
00:41:00,000 --> 00:41:02,900
So I want to turn off minimal rebuild since we're building.

1017
00:41:02,900 --> 00:41:04,400
We rebuild everything every time.

1018
00:41:04,500 --> 00:41:08,400
- GM - turns off, any sort of incremental, build stuff that Microsoft

1019
00:41:08,400 --> 00:41:10,700
might be trying to do to quote unquote, speed things up since we're

1020
00:41:10,700 --> 00:41:12,700
not doing any of that kind of rebuilding.

1021
00:41:13,300 --> 00:41:16,000
And I think that's about everything there is.

1022
00:41:16,000 --> 00:41:19,000
Now, I did want to produce one more thing since this is.

1023
00:41:19,000 --> 00:41:22,800
Like I said, a stream about kind of learning how all of these stuff

1024
00:41:22,800 --> 00:41:23,300
works.

1025
00:41:23,300 --> 00:41:25,600
There is one more thing I wanted to do, since we've got plenty of time

1026
00:41:25,600 --> 00:41:26,000
here.

1027
00:41:26,200 --> 00:41:29,300
It's called - FM minus FM.

1028
00:41:29,900 --> 00:41:36,400
Allows us to basically pass something that tells the tells the Linker

1029
00:41:36,900 --> 00:41:41,200
a location to stick a map file basically.

1030
00:41:41,200 --> 00:41:46,600
So, if I do this, right, I will now get an extra file in here, where I

1031
00:41:46,600 --> 00:41:49,300
actually build my, my game, right?

1032
00:41:49,300 --> 00:41:50,300
So you can see that before.

1033
00:41:50,300 --> 00:41:51,900
There wasn't this thing, this map file.

1034
00:41:51,900 --> 00:41:55,600
There is now a map file and the map file is kind of interesting.

1035
00:41:55,900 --> 00:41:58,800
You can see if I actually just oops, that's tough.

1036
00:41:59,300 --> 00:41:59,800
All right.

1037
00:42:00,000 --> 00:42:02,500
Go ahead and take a listing of the executable.

1038
00:42:02,600 --> 00:42:05,800
If I look at the map file, what the map file actually is, is it's

1039
00:42:05,800 --> 00:42:07,900
basically what it exactly its name.

1040
00:42:07,900 --> 00:42:08,900
It is a map.

1041
00:42:09,000 --> 00:42:13,400
It is a thing that tells you in text form where all of the functions

1042
00:42:13,400 --> 00:42:16,100
are in your actual executable.

1043
00:42:16,100 --> 00:42:17,600
Like, you can actually see.

1044
00:42:17,800 --> 00:42:22,500
Every last thing that is in there is actually listed, right?

1045
00:42:22,500 --> 00:42:23,100
It's like here.

1046
00:42:23,100 --> 00:42:25,500
They all are here's where everything went right?

1047
00:42:25,700 --> 00:42:29,300
All the stuff that we actually wanted to know where it was.

1048
00:42:29,400 --> 00:42:29,800
It's in there.

1049
00:42:30,000 --> 00:42:32,400
Are now one of the things is you might ask.

1050
00:42:32,400 --> 00:42:35,300
Why do we actually care where any of this stuff is?

1051
00:42:35,300 --> 00:42:36,700
And why does it look so funny?

1052
00:42:36,700 --> 00:42:37,500
In some of the places?

1053
00:42:37,500 --> 00:42:40,800
You can see some of these have some really bizarre stuff on them and

1054
00:42:40,800 --> 00:42:41,500
that sort of stuff.

1055
00:42:41,700 --> 00:42:44,500
Well, basically there's a bunch of subtleties with map files.

1056
00:42:44,800 --> 00:42:46,400
Basically, excuse me.

1057
00:42:47,300 --> 00:42:49,200
What happens with a map file is?

1058
00:42:49,200 --> 00:42:52,700
It's going to go ahead and it's, you know, we can actually see looking

1059
00:42:52,700 --> 00:42:53,500
at the side.

1060
00:42:53,700 --> 00:42:56,700
If you look at the side here, you can see what module was responsible

1061
00:42:56,700 --> 00:42:59,500
for out, putting something into your map file and then what the thing

1062
00:42:59,500 --> 00:42:59,800
was

1063
00:43:00,100 --> 00:43:04,200
That the name, what the name was of the thing that got outputted and

1064
00:43:04,200 --> 00:43:08,600
you can also see where like this is basically the byte offset of the

1065
00:43:08,600 --> 00:43:11,300
actual thing where it actually was these sorts of things.

1066
00:43:11,900 --> 00:43:16,100
But what I wanted to point out is basically there's, there's a lot of

1067
00:43:16,200 --> 00:43:19,100
what's called name mangling that goes on in here.

1068
00:43:19,100 --> 00:43:20,600
That might be confusing to people.

1069
00:43:20,900 --> 00:43:24,700
So if you look at some stuff like, like this sort of thing, the names

1070
00:43:24,700 --> 00:43:26,000
just look absolutely crazy.

1071
00:43:26,000 --> 00:43:27,900
Like, that looks pretty normal.

1072
00:43:27,900 --> 00:43:29,800
It's got a lot of underscores, but underscores are usually,

1073
00:43:29,900 --> 00:43:31,600
Just saying, hey, this is a reserved keyword in C.

1074
00:43:31,600 --> 00:43:33,400
So a lot of things will have underscores in them.

1075
00:43:33,400 --> 00:43:36,200
If there's something the compiler used or introduced, right?

1076
00:43:36,700 --> 00:43:38,600
But these things here, right?

1077
00:43:39,100 --> 00:43:41,600
These, these sort of, weirdly mangled names.

1078
00:43:42,200 --> 00:43:45,400
Those are kind of an interesting anachronism and it's worth

1079
00:43:45,400 --> 00:43:46,900
understanding what they are.

1080
00:43:47,300 --> 00:43:49,000
So this map file, I'll talk about those in a second.

1081
00:43:49,000 --> 00:43:49,900
I just want to finish up.

1082
00:43:49,900 --> 00:43:51,200
So this map files basically just the thing.

1083
00:43:51,200 --> 00:43:54,100
If we kind of want to know what ended up getting put in our

1084
00:43:54,100 --> 00:43:54,500
executable.

1085
00:43:54,500 --> 00:43:57,500
And where stuff is, this is a thing that basically this is a text

1086
00:43:57,500 --> 00:43:58,000
file.

1087
00:43:58,000 --> 00:43:59,800
That tells you exactly that information and

1088
00:44:00,000 --> 00:44:03,300
Kind of fun to be able to look at and you can even see.

1089
00:44:03,400 --> 00:44:06,900
Remember I said we were using an import library to basically allow us

1090
00:44:06,900 --> 00:44:11,000
to bind to dll system dlls we can even see what those kind of are.

1091
00:44:11,000 --> 00:44:13,800
You can see this underscore underscore imp underscore underscore

1092
00:44:14,200 --> 00:44:14,500
right?

1093
00:44:14,500 --> 00:44:17,400
Console W or underscore underscore imp, like where's one that we

1094
00:44:17,400 --> 00:44:18,800
actually call it get file size.

1095
00:44:18,800 --> 00:44:19,400
There it is.

1096
00:44:19,800 --> 00:44:22,300
And basically what that is is that's an import function.

1097
00:44:23,000 --> 00:44:25,700
That was the thing that was put in place, as sort of a stub,

1098
00:44:25,700 --> 00:44:29,300
essentially, that's going to be replaced with the actual pointer to

1099
00:44:29,300 --> 00:44:29,800
the win32.

1100
00:44:29,900 --> 00:44:35,200
T2 to the win32 dll, when it gets loaded, so you'll see underscore

1101
00:44:35,200 --> 00:44:39,200
underscore imp versions of every win32 thing that either you call or

1102
00:44:39,200 --> 00:44:42,300
the C runtime Library calls, and therefore needs to bind to.

1103
00:44:42,400 --> 00:44:44,900
So, a lot of these things we don't call but the C runtime Library

1104
00:44:44,900 --> 00:44:45,200
called.

1105
00:44:45,200 --> 00:44:46,400
So they had to get Dragged In.

1106
00:44:46,700 --> 00:44:49,200
And that's one nice thing, too, that you can kind of see when you

1107
00:44:49,200 --> 00:44:51,200
start looking at the map file.

1108
00:44:51,200 --> 00:44:54,600
You can see all the stuff that got stuck in there.

1109
00:44:54,700 --> 00:44:57,200
That you ain't even necessarily want or know about, right?

1110
00:44:57,200 --> 00:44:59,600
There's just tons of stuff in there that you didn't necessarily want

1111
00:44:59,600 --> 00:44:59,800
that you

1112
00:45:00,000 --> 00:45:01,100
Necessarily call.

1113
00:45:01,800 --> 00:45:04,400
And it's just kind of interesting to kind of be aware of it that like,

1114
00:45:04,400 --> 00:45:07,200
oh, the C runtime Library drag that in or such and such happened,

1115
00:45:07,200 --> 00:45:07,800
right?

1116
00:45:08,400 --> 00:45:10,100
And you can get rid of some of that stuff.

1117
00:45:10,100 --> 00:45:10,800
Sometimes.

1118
00:45:10,900 --> 00:45:14,400
There's basically a thing called opt ref which you can do that.

1119
00:45:14,400 --> 00:45:17,900
You can pack pass to the Linker which basically says to be aggressive

1120
00:45:17,900 --> 00:45:19,900
about not putting anything you.

1121
00:45:19,900 --> 00:45:22,100
Can you do it this way, ah, pref like that.

1122
00:45:22,400 --> 00:45:25,600
If you pass that to Linker it basically says don't put anything into

1123
00:45:25,600 --> 00:45:26,600
the executable.

1124
00:45:27,100 --> 00:45:29,900
If you don't need to like nobody uses it, make sure you get

1125
00:45:30,000 --> 00:45:30,500
Get rid of it.

1126
00:45:30,500 --> 00:45:33,300
It's kind of like, try hard to discard things, if that makes sense.

1127
00:45:33,900 --> 00:45:36,700
And if we take a look at what happens when we specify that, you'll

1128
00:45:36,700 --> 00:45:41,200
notice it went from from a 157 k21 42 K.

1129
00:45:41,200 --> 00:45:43,800
So it does sorry to 134k.

1130
00:45:45,000 --> 00:45:47,100
And so it does get rid of some stuff.

1131
00:45:47,500 --> 00:45:49,900
You know, it there is some stuff that gets stuck in there that doesn't

1132
00:45:49,900 --> 00:45:52,200
need to because no one actually called it or used it or whatever.

1133
00:45:52,600 --> 00:45:55,000
But they're still, just a ton of stuff used by the C runtime library

1134
00:45:55,000 --> 00:45:57,600
that Justice is just stuck in there and that's unfortunate.

1135
00:45:57,600 --> 00:45:58,100
Right?

1136
00:45:58,100 --> 00:45:59,900
It's one of the reasons to get rid of the C runtime.

1137
00:46:00,000 --> 00:46:03,500
Library, if you can, and we talked a little bit about maybe doing

1138
00:46:03,500 --> 00:46:06,300
that, I've done it on projects before, but I don't know how productive

1139
00:46:06,300 --> 00:46:07,800
it would be to spend time the stream to do that.

1140
00:46:07,800 --> 00:46:11,700
So, we probably won't anyway, onto the name mangling.

1141
00:46:11,900 --> 00:46:16,800
So the way name mangling works is basically, C used to have saying

1142
00:46:16,800 --> 00:46:17,800
names for things.

1143
00:46:18,300 --> 00:46:21,800
Basically, when you used to call things and see, they used to look

1144
00:46:21,800 --> 00:46:22,400
like this.

1145
00:46:22,400 --> 00:46:25,700
They would look like just the name of the thing that you called, but

1146
00:46:25,700 --> 00:46:29,800
the problem is C++ introduced overloaded function.

1147
00:46:29,900 --> 00:46:30,100
Yes.

1148
00:46:32,300 --> 00:46:35,800
Now I've talked about what that what that was.

1149
00:46:36,400 --> 00:46:39,100
I showed an example of that on the stream previously.

1150
00:46:39,300 --> 00:46:42,300
Basically, what an overloaded function is, is an overloaded function

1151
00:46:42,500 --> 00:46:46,600
is having two functions with the same name like this, but that take

1152
00:46:46,600 --> 00:46:48,400
different parameters, right?

1153
00:46:48,400 --> 00:46:49,200
This kind of thing.

1154
00:46:51,600 --> 00:46:52,200
Right.

1155
00:46:53,600 --> 00:46:55,800
Basically, what this is trying to say is, all right.

1156
00:46:55,800 --> 00:46:59,400
I'm going to call Foo and then I want you to call whichever Foo

1157
00:47:00,000 --> 00:47:03,100
happens to be the one that uses the parameters that I passed.

1158
00:47:03,100 --> 00:47:09,100
So I might say Foo five or Foo 56 and this one will call the second

1159
00:47:09,100 --> 00:47:10,600
Foo and this one will come on the first few.

1160
00:47:10,600 --> 00:47:15,300
It's as, if they were labeled like this, right, does that make sense?

1161
00:47:16,300 --> 00:47:20,800
So the problem here was that C++ was originally written, sort of on

1162
00:47:20,800 --> 00:47:21,300
top of a

1163
00:47:21,400 --> 00:47:22,700
See like toolchain.

1164
00:47:23,000 --> 00:47:26,300
It was kind of first done as a preprocessor and then it kind of, you

1165
00:47:26,300 --> 00:47:27,600
know, went from there.

1166
00:47:28,500 --> 00:47:31,900
But the whole time they were sort of coming from C and adding features

1167
00:47:31,900 --> 00:47:36,700
to C++ in ways that were easy for them to implement under the hood as

1168
00:47:36,800 --> 00:47:39,800
it wasn't really the case that they started from scratch or C++ and

1169
00:47:39,800 --> 00:47:43,100
implemented each feature the way that maybe it would most optimally

1170
00:47:43,100 --> 00:47:43,300
be.

1171
00:47:43,300 --> 00:47:47,800
So what they decided to do to make this work with the c with C Style

1172
00:47:47,800 --> 00:47:48,400
linkers.

1173
00:47:49,600 --> 00:47:51,600
Was to basically allow you to write this.

1174
00:47:51,800 --> 00:47:56,800
And then the compiler would sort of silently go in and generate a name

1175
00:47:56,800 --> 00:47:59,500
for this function based on its arguments.

1176
00:47:59,600 --> 00:47:59,800
So,

1177
00:48:00,100 --> 00:48:02,700
You can imagine coming up with sort of a coding system.

1178
00:48:02,800 --> 00:48:03,200
Right?

1179
00:48:03,300 --> 00:48:05,100
Which is whatever the type is.

1180
00:48:05,100 --> 00:48:09,900
Like if the type is in t then maybe we append underscore in t, right

1181
00:48:10,100 --> 00:48:11,700
to the name of the, of the function.

1182
00:48:11,700 --> 00:48:12,200
Right?

1183
00:48:12,700 --> 00:48:13,700
And it looks like that, right.

1184
00:48:13,700 --> 00:48:15,500
So this is few underscore intent.

1185
00:48:15,500 --> 00:48:16,900
This is to underscore n t.

1186
00:48:16,900 --> 00:48:21,800
So now we kind of know when we generate a call, we can actually output

1187
00:48:21,800 --> 00:48:25,700
actual calls it in the object file that the Linker will look at, we

1188
00:48:25,700 --> 00:48:27,000
can actually output one.

1189
00:48:27,000 --> 00:48:29,300
That's an actual name that the Linker can resolve.

1190
00:48:30,000 --> 00:48:30,800
Lee, right?

1191
00:48:31,200 --> 00:48:35,700
And so that is what this name mangling was all about this name.

1192
00:48:35,700 --> 00:48:39,300
Mangling was about taking things that were potentially overloaded

1193
00:48:39,300 --> 00:48:44,100
functions in C++ and mangling them into something that would be unique

1194
00:48:44,100 --> 00:48:45,600
and work with a regular Linker.

1195
00:48:45,900 --> 00:48:49,400
So you can kind of see these sorts of things ending up happening.

1196
00:48:49,400 --> 00:48:51,300
I'll try to find a good example of one of them.

1197
00:48:51,700 --> 00:48:54,800
I'm not sure what the best example would be in C.

1198
00:48:54,800 --> 00:48:57,300
So, you know, this this kind of a thing, right?

1199
00:48:57,400 --> 00:48:59,800
These sorts of things are what I'm talking about this stuff.

1200
00:49:00,000 --> 00:49:03,200
After the app that sort of thing there, right?

1201
00:49:03,300 --> 00:49:09,700
All of that is basically code that tells that diff it disambiguates

1202
00:49:10,100 --> 00:49:13,200
this function from another function that may be the same thing, but

1203
00:49:13,200 --> 00:49:17,000
overloaded now because C++ doesn't actually know how overloaded a

1204
00:49:17,000 --> 00:49:19,500
function might be because you have to remember C++.

1205
00:49:19,800 --> 00:49:21,500
Usually, you compile and multiple files.

1206
00:49:21,500 --> 00:49:23,400
We're using one big translation unit.

1207
00:49:23,500 --> 00:49:25,700
But normally you compiled file separately.

1208
00:49:25,800 --> 00:49:28,500
So it doesn't know how many overloaded versions of a function, there

1209
00:49:28,500 --> 00:49:29,800
might be, so it can't.

1210
00:49:29,900 --> 00:49:32,300
Only knit mangle the names of overloaded functions.

1211
00:49:32,300 --> 00:49:35,500
It has to mangle the names of all functions because that same function

1212
00:49:35,500 --> 00:49:38,400
might be defined with a different set of parameters in a different

1213
00:49:38,400 --> 00:49:40,200
file that's going to compiled separately.

1214
00:49:40,300 --> 00:49:42,000
So it's going to be different translation unit.

1215
00:49:42,000 --> 00:49:44,600
And only the Linker will ever see them together.

1216
00:49:44,900 --> 00:49:47,500
So even stuff that isn't overloaded has to go through this name

1217
00:49:47,500 --> 00:49:50,400
mangling and that's why those things look like they do.

1218
00:49:50,600 --> 00:49:53,200
So, hopefully that makes some sense.

1219
00:49:54,800 --> 00:49:55,500
All right.

1220
00:49:55,800 --> 00:49:58,500
So basically that's all I wanted to show today was just to kind of get

1221
00:49:58,500 --> 00:50:01,800
our build kind of in you know in some shape there.

1222
00:50:02,200 --> 00:50:05,600
And then I think the the other thing maybe we've got about got a few

1223
00:50:05,600 --> 00:50:06,000
minutes left.

1224
00:50:06,000 --> 00:50:07,400
I'm going to start today on the thing.

1225
00:50:07,400 --> 00:50:10,400
We're going to do tomorrow, finish up tomorrow, which is we did never

1226
00:50:10,400 --> 00:50:11,900
did our keyboard input.

1227
00:50:12,200 --> 00:50:16,500
We never wired keyboard input up to the controller and that requires a

1228
00:50:16,500 --> 00:50:20,300
little bit of sort of finesse, and factoring here that we need to kind

1229
00:50:20,300 --> 00:50:20,600
of do.

1230
00:50:20,600 --> 00:50:23,700
Because if you remember properly, we kind of we did the work of

1231
00:50:23,700 --> 00:50:24,400
getting keyboard.

1232
00:50:24,600 --> 00:50:25,600
It right.

1233
00:50:25,700 --> 00:50:29,500
But we never actually went in and wired it up the way that we wear it

1234
00:50:29,500 --> 00:50:30,300
up the controller.

1235
00:50:30,600 --> 00:50:33,400
So if I go in here and Run the game, right?

1236
00:50:33,400 --> 00:50:35,100
I don't actually no matter what I do.

1237
00:50:35,100 --> 00:50:38,300
I don't actually get any actual motion.

1238
00:50:38,300 --> 00:50:41,500
They're out of pressing the keys, which I kind of wanted to do.

1239
00:50:42,100 --> 00:50:44,400
So what I think we can do in our last 10 minutes here, now that we

1240
00:50:44,400 --> 00:50:47,100
finish with the build stuff is just think about how we're going to do

1241
00:50:47,100 --> 00:50:47,500
that.

1242
00:50:47,600 --> 00:50:51,200
Now, I have a problem, which is that, because of the way Windows

1243
00:50:51,200 --> 00:50:52,700
forces me to go through, callbacks.

1244
00:50:52,900 --> 00:50:54,400
I have no context when I hop.

1245
00:50:54,600 --> 00:50:57,200
In here, so I'm either going to have to use a global variable or use

1246
00:50:57,200 --> 00:50:59,800
some local storage on the window, too.

1247
00:51:00,000 --> 00:51:03,300
You're out what we're even stuff is right because I need to stuff this

1248
00:51:03,300 --> 00:51:06,700
stuff into the into an input structure of some kind and I don't even

1249
00:51:06,700 --> 00:51:09,100
know where I'm going to be able to do that.

1250
00:51:09,100 --> 00:51:09,500
Right?

1251
00:51:09,600 --> 00:51:12,900
What I would like to be able to do is I'd like to be able to pass the

1252
00:51:13,100 --> 00:51:16,600
parse those messages in my in my Loop here.

1253
00:51:16,900 --> 00:51:20,700
And so one question that I might ask myself is could I go ahead and

1254
00:51:20,700 --> 00:51:21,600
process them there?

1255
00:51:22,100 --> 00:51:26,500
Because as we know most of the time Windows actually does send us our

1256
00:51:26,500 --> 00:51:29,800
messages through here, so it may be possible to just

1257
00:51:30,000 --> 00:51:32,300
Always do the message processing in there.

1258
00:51:32,300 --> 00:51:35,300
So what I could do and I'm just going to do this as a test for.

1259
00:51:35,300 --> 00:51:35,600
Now.

1260
00:51:35,600 --> 00:51:39,900
What I could do is go ahead and say these four messages that I want

1261
00:51:39,900 --> 00:51:42,700
the ciske up, ciske down, those sorts of things, right?

1262
00:51:43,100 --> 00:51:44,700
I know they're getting dispatched in here.

1263
00:51:44,900 --> 00:51:48,300
Well, could I do something like this?

1264
00:51:48,300 --> 00:51:52,700
Basically, if the message type, right, if message message, right?

1265
00:51:53,000 --> 00:51:54,400
In fact, I can just do this as a switch statement.

1266
00:51:54,400 --> 00:51:59,600
If the message is one of these things wmq down, you know, any of these

1267
00:51:59,600 --> 00:52:00,000
sorts of things.

1268
00:52:00,300 --> 00:52:04,000
I'm just going to see what happens if I feel that there and then if

1269
00:52:04,000 --> 00:52:07,300
there's anything else, if it's something else that comes in, I'm going

1270
00:52:07,300 --> 00:52:11,300
to go ahead and filled it using the standard translate dispatch out to

1271
00:52:11,300 --> 00:52:12,100
the window routine.

1272
00:52:12,100 --> 00:52:16,100
And then in here I'm gonna use that assertion that we did to say.

1273
00:52:16,400 --> 00:52:19,400
No just to see if we got there, right?

1274
00:52:19,900 --> 00:52:22,100
So I'm going to go ahead and see if that ever fires.

1275
00:52:22,200 --> 00:52:26,100
So what I'm doing here is I'm testing to see if the keyboard input

1276
00:52:26,200 --> 00:52:29,600
ever comes in through a path other than the standard.

1277
00:52:29,900 --> 00:52:33,600
Loop because we know that paint messages do but we don't actually seem

1278
00:52:33,600 --> 00:52:34,600
to say so I don't see that.

1279
00:52:34,600 --> 00:52:35,700
I've never hidden that.

1280
00:52:35,700 --> 00:52:38,700
I've never hitting that assertion which tells me that that we should

1281
00:52:38,700 --> 00:52:41,800
probably be safe to just move this handling down there.

1282
00:52:42,100 --> 00:52:43,400
So I'm going to leave this in here.

1283
00:52:44,800 --> 00:52:53,600
Keyboard input, came in through a non dispatch event or message.

1284
00:52:54,900 --> 00:52:55,600
That's bad.

1285
00:52:55,700 --> 00:52:58,300
What I'm going to do is I'm just going to move our handling out of

1286
00:52:58,300 --> 00:53:01,300
here out of the windows code, where we don't actually want to do it

1287
00:53:01,500 --> 00:53:04,200
down into the main Loop or a process, everything else, because that'll

1288
00:53:04,200 --> 00:53:08,900
be nice and convenient, and I don't have to do any kind of weird like

1289
00:53:08,900 --> 00:53:10,000
round tripping, right?

1290
00:53:10,000 --> 00:53:11,000
You know, that sort of thing.

1291
00:53:13,800 --> 00:53:18,600
If that makes sense, hmm, okay, let's see here.

1292
00:53:19,300 --> 00:53:21,700
Let's go ahead and translate these.

1293
00:53:21,700 --> 00:53:24,600
So we've got the wasd keys.

1294
00:53:24,600 --> 00:53:26,300
Those to me are going to be.

1295
00:53:26,300 --> 00:53:29,500
So, so basically we if you look down here, we've got this sort of

1296
00:53:29,500 --> 00:53:32,000
stuff that we were doing for the buttons.

1297
00:53:32,000 --> 00:53:33,900
We have the the process digital button.

1298
00:53:34,000 --> 00:53:36,200
I think that's basically what we want to do.

1299
00:53:36,700 --> 00:53:42,100
We want to do essentially the same exact thing for the keyboard,

1300
00:53:42,100 --> 00:53:42,800
right?

1301
00:53:43,000 --> 00:53:43,400
We can even

1302
00:53:43,500 --> 00:53:44,500
I'm possibly collapse those.

1303
00:53:44,500 --> 00:53:49,100
Basically, what I want to do is I want to do this for all of these

1304
00:53:49,100 --> 00:53:49,500
buttons.

1305
00:53:49,500 --> 00:53:50,900
So these are going to be the buttons.

1306
00:53:50,900 --> 00:53:54,700
I think the up-down left-right is going to be the buttons for me.

1307
00:53:55,100 --> 00:53:59,800
So basically, if we have a VK code of up, that's going to be Loop.

1308
00:54:00,000 --> 00:54:01,800
That's going to be our oh.

1309
00:54:02,900 --> 00:54:03,600
That's not good.

1310
00:54:03,600 --> 00:54:03,900
Okay.

1311
00:54:04,000 --> 00:54:08,300
Sorry, that's going to be our up here like this, and we're going to

1312
00:54:08,300 --> 00:54:10,600
get rid of that like that.

1313
00:54:10,700 --> 00:54:13,000
So basically pass the to, uh, parameters.

1314
00:54:13,300 --> 00:54:17,800
This one is going to be our left, just as you might expect are left

1315
00:54:17,800 --> 00:54:18,400
button.

1316
00:54:18,900 --> 00:54:19,400
There we go.

1317
00:54:19,400 --> 00:54:22,100
Again, you always important to pronounce button like this.

1318
00:54:22,700 --> 00:54:24,900
There we go down.

1319
00:54:25,400 --> 00:54:26,100
That's good.

1320
00:54:26,600 --> 00:54:27,400
Let's take a look.

1321
00:54:27,400 --> 00:54:32,500
Here we go down, and I'm

1322
00:54:33,000 --> 00:54:34,700
Do right?

1323
00:54:34,700 --> 00:54:35,500
That's good.

1324
00:54:36,200 --> 00:54:36,900
There we go.

1325
00:54:37,000 --> 00:54:37,900
Five-minute warning.

1326
00:54:38,200 --> 00:54:39,000
No problem.

1327
00:54:39,300 --> 00:54:42,900
We're just kind of wrapping this up anyway, so we can get those things

1328
00:54:42,900 --> 00:54:43,500
in there.

1329
00:54:43,800 --> 00:54:47,200
Basically, how we want to, we can process Escape as well.

1330
00:54:47,200 --> 00:54:47,700
If you want to.

1331
00:54:47,700 --> 00:54:50,200
We could we could say that that kills our game, maybe.

1332
00:54:50,200 --> 00:54:52,500
I don't know, we'll see will talk about.

1333
00:54:52,500 --> 00:54:53,500
We will think about what?

1334
00:54:53,500 --> 00:54:56,400
We want these things to do sometime, when we actually have the whole

1335
00:54:56,400 --> 00:54:57,800
game running and were like, what do we want?

1336
00:54:57,800 --> 00:54:59,200
Our, what do we want our stuff to do?

1337
00:54:59,700 --> 00:55:02,000
But anyway, yeah, so we've got a new controller up it.

1338
00:55:02,000 --> 00:55:02,700
Well, you know what?

1339
00:55:03,100 --> 00:55:04,100
Do we pass the do?

1340
00:55:04,100 --> 00:55:05,800
We have like start buttons or things like that?

1341
00:55:05,800 --> 00:55:09,500
I remember what we actually decided on passing for our first pass.

1342
00:55:10,000 --> 00:55:10,500
No, we didn't.

1343
00:55:10,500 --> 00:55:11,500
So I'll just leave it like that.

1344
00:55:11,500 --> 00:55:12,100
So, that's fine.

1345
00:55:12,500 --> 00:55:13,700
So then these will be our shoulder.

1346
00:55:13,700 --> 00:55:15,700
But so these will be our shoulder buttons here.

1347
00:55:16,300 --> 00:55:17,100
Like this.

1348
00:55:17,800 --> 00:55:20,700
This will be our left shoulder.

1349
00:55:20,800 --> 00:55:23,300
That's on the cues on that side, right?

1350
00:55:23,300 --> 00:55:28,500
Left shoulder left shoulder and this will be our right shoulder like

1351
00:55:28,500 --> 00:55:29,000
that.

1352
00:55:29,400 --> 00:55:30,300
That's good.

1353
00:55:30,700 --> 00:55:32,800
And then what we need to pass here too is we need

1354
00:55:33,000 --> 00:55:35,500
Past like basically which one it was.

1355
00:55:35,800 --> 00:55:38,000
So we need to pass gives down right.

1356
00:55:38,000 --> 00:55:42,200
We need to pass is down to these, so is down so that they'll know

1357
00:55:42,200 --> 00:55:47,700
which to do and obviously this is no longer processing, win32 button

1358
00:55:47,700 --> 00:55:48,300
stuff.

1359
00:55:48,300 --> 00:55:54,500
So this is going to be 132 win32 process keyboard events or something

1360
00:55:54,500 --> 00:55:55,200
like that.

1361
00:55:55,500 --> 00:55:58,900
T-bird message I suppose and then it will just go ahead and do the

1362
00:55:58,900 --> 00:56:00,300
exact same kind of processing.

1363
00:56:00,800 --> 00:56:01,700
That are other one did.

1364
00:56:01,700 --> 00:56:02,400
So that

1365
00:56:02,900 --> 00:56:05,800
Should be sufficient.

1366
00:56:05,900 --> 00:56:10,900
Okay, so I'm going to go up here and just copy this guy and do win32

1367
00:56:10,900 --> 00:56:13,000
process, keyboard message.

1368
00:56:13,000 --> 00:56:19,200
Again, that just takes the Old State and the new state and the is down

1369
00:56:19,700 --> 00:56:20,400
is down.

1370
00:56:20,900 --> 00:56:25,000
And basically, whether it ended down is just going to be, is down

1371
00:56:25,000 --> 00:56:25,600
here.

1372
00:56:25,600 --> 00:56:28,200
I guess that's, that's it.

1373
00:56:28,200 --> 00:56:29,500
So, it's going to set that to that.

1374
00:56:29,500 --> 00:56:32,800
And the half transition count for the new state.

1375
00:56:33,000 --> 00:56:37,500
Basically going to go up every time we get one of these.

1376
00:56:37,500 --> 00:56:41,800
So this is just basically plus plussing that yeah, I think that's

1377
00:56:41,800 --> 00:56:42,400
basically it.

1378
00:56:42,400 --> 00:56:43,900
I mean we guess we could do it this way.

1379
00:56:44,000 --> 00:56:49,900
We can say, if the now, I guess this is exactly what we want.

1380
00:56:49,900 --> 00:56:51,300
This is exactly what we want.

1381
00:56:51,400 --> 00:56:54,300
It's actually really this simple because this is coming in the

1382
00:56:54,300 --> 00:56:54,600
keyboard.

1383
00:56:54,600 --> 00:56:56,700
Messages are coming in as events.

1384
00:56:57,200 --> 00:56:58,900
They're coming in inside the loop.

1385
00:56:58,900 --> 00:56:59,800
We're going to get each key.

1386
00:57:00,000 --> 00:57:01,300
Keyword message each time.

1387
00:57:01,300 --> 00:57:06,000
So really what we want to do here is the new input old input Paradigm.

1388
00:57:06,000 --> 00:57:09,200
We don't, we almost really don't need old input.

1389
00:57:09,200 --> 00:57:13,800
Old input is, is kind of redundant at this point for us.

1390
00:57:13,800 --> 00:57:18,000
So, in some sense we can just use the new one, right like this.

1391
00:57:18,000 --> 00:57:21,200
We can just say the new controller goes like this, right?

1392
00:57:21,200 --> 00:57:26,000
And and we don't actually ever need to see the old one because Windows

1393
00:57:26,000 --> 00:57:30,000
Event processing is doing the check to see whether or not

1394
00:57:30,000 --> 00:57:32,500
Not the thing went up or down, or that sort of stuff.

1395
00:57:32,500 --> 00:57:34,100
So we don't actually need to even.

1396
00:57:34,100 --> 00:57:34,700
Look at that stuff.

1397
00:57:34,700 --> 00:57:35,900
I don't think so.

1398
00:57:35,900 --> 00:57:39,600
All we really have to do here is decide what we want.

1399
00:57:39,600 --> 00:57:42,100
Our new input controller to be.

1400
00:57:42,100 --> 00:57:46,800
So since we since we have the controller over here, let's see here,

1401
00:57:46,800 --> 00:57:49,200
new controller, this controller State.

1402
00:57:49,400 --> 00:57:52,800
Basically, what we want to do is we want to clear out and we, I think

1403
00:57:52,800 --> 00:57:53,500
we want to do this.

1404
00:57:53,500 --> 00:57:56,400
Anyway, we want to clear out for new controller.

1405
00:57:56,900 --> 00:57:58,600
Whatever its transition count was.

1406
00:57:58,600 --> 00:57:59,800
So at the top of the loop here.

1407
00:58:00,100 --> 00:58:05,000
I'm going to say that new controller whenever we get that, that first

1408
00:58:05,000 --> 00:58:06,400
one, we'll get that in there.

1409
00:58:06,400 --> 00:58:08,000
So I guess this will be our keyboard controller.

1410
00:58:08,000 --> 00:58:09,800
Let's say, keyboard controller.

1411
00:58:10,000 --> 00:58:11,000
When we get that one in there.

1412
00:58:11,100 --> 00:58:12,800
I want this zeroed out.

1413
00:58:12,900 --> 00:58:17,000
Like I want, I want all these buttons to be cleared essentially.

1414
00:58:17,200 --> 00:58:19,700
So I'm going to go through and I'm just going to clear the buttons out

1415
00:58:19,700 --> 00:58:19,900
since.

1416
00:58:19,900 --> 00:58:21,400
I don't actually want the well, you know what?

1417
00:58:21,400 --> 00:58:22,400
I could probably clear.

1418
00:58:22,400 --> 00:58:23,500
Just about everything.

1419
00:58:23,900 --> 00:58:27,000
We know that we know that the entire thing should really be cleared.

1420
00:58:27,700 --> 00:58:29,800
So I could basically just clear the entire thing.

1421
00:58:30,100 --> 00:58:32,900
I think I could do that instead, so I can do that.

1422
00:58:32,900 --> 00:58:40,600
I can say game, controller input, zero equals, this c0 controller and

1423
00:58:40,600 --> 00:58:43,400
I can just go ahead and say keyboard, Ctrl 0, equals 0 controller.

1424
00:58:43,400 --> 00:58:43,800
There we go.

1425
00:58:43,800 --> 00:58:45,400
So that will just clear that out for now.

1426
00:58:45,700 --> 00:58:50,200
I do want to go ahead and make a zeroing macro some point.

1427
00:58:50,400 --> 00:58:51,600
So we don't have to do that.

1428
00:58:51,800 --> 00:58:53,200
So I'm going to go ahead and do that.

1429
00:58:53,400 --> 00:58:58,600
Well, zero that guy out and then we'll go through and and use him that

1430
00:58:58,600 --> 00:58:58,800
way.

1431
00:58:58,800 --> 00:58:59,800
So that that's

1432
00:59:00,000 --> 00:59:03,500
Yeah, we're will have to clean this up a little bit more tomorrow, but

1433
00:59:03,500 --> 00:59:04,300
we should be okay.

1434
00:59:04,300 --> 00:59:05,800
All right, so I believe.

1435
00:59:05,800 --> 00:59:10,200
Now we need to actually read everything out of our of our message

1436
00:59:10,200 --> 00:59:10,900
thing here.

1437
00:59:11,000 --> 00:59:12,000
So hold on a second.

1438
00:59:12,100 --> 00:59:14,300
This is keyboard controller, I believe.

1439
00:59:14,300 --> 00:59:16,900
Yeah, roller, dude, dude.

1440
00:59:17,100 --> 00:59:17,500
Okay.

1441
00:59:18,100 --> 00:59:21,100
I just need to go ahead and make these come out of the message

1442
00:59:21,100 --> 00:59:23,400
because, remember, we were dispatching them before now.

1443
00:59:23,400 --> 00:59:24,200
We're not dispassionate.

1444
00:59:24,200 --> 00:59:27,300
We're just reading them out of that, message structure, this guy right

1445
00:59:27,300 --> 00:59:29,800
here, when we get the message back, that used to be,

1446
00:59:29,900 --> 00:59:33,800
Going through the win32 side of things and now it's not anymore.

1447
00:59:33,800 --> 00:59:36,300
So I'm going to go ahead and if the internet's working at all, I'll

1448
00:59:36,300 --> 00:59:37,400
check em SVC.

1449
00:59:37,700 --> 00:59:40,400
I'm not sure that it actually will be but I'll check for MSG.

1450
00:59:40,800 --> 00:59:42,500
No, not that MSG.

1451
00:59:43,400 --> 00:59:44,100
That's funny.

1452
00:59:44,400 --> 00:59:46,200
That's not the MSG we're looking for.

1453
00:59:48,000 --> 00:59:48,400
Basically.

1454
00:59:48,400 --> 00:59:49,700
I just W / a male friend, there.

1455
00:59:49,700 --> 00:59:50,400
They're all right there.

1456
00:59:50,400 --> 00:59:53,000
So basically all we all we have to do is just get those right out of

1457
00:59:53,000 --> 00:59:53,700
the structure.

1458
00:59:53,800 --> 00:59:56,700
So instead of allowing Windows to basically dispatch to our Windows

1459
00:59:57,200 --> 00:59:57,400
thing.

1460
00:59:57,400 --> 00:59:59,200
We're just going to skip that all together.

1461
01:00:00,500 --> 01:00:03,800
Now, no longer has to take the old State at all.

1462
01:00:03,800 --> 01:00:06,400
It could just take the new state and process it that way.

1463
01:00:06,800 --> 01:00:08,400
And we are good to go.

1464
01:00:08,400 --> 01:00:08,700
Now.

1465
01:00:08,700 --> 01:00:09,700
There's a bunch of stuff.

1466
01:00:09,700 --> 01:00:12,100
We haven't quite done in there yet, but I think that puts us in good

1467
01:00:12,100 --> 01:00:13,400
position for tomorrow.

1468
01:00:14,100 --> 01:00:19,300
So hopefully, we should be in a position to actually see this work, a

1469
01:00:19,300 --> 01:00:20,300
little bit here.

1470
01:00:21,000 --> 01:00:21,700
Yes, and there.

1471
01:00:21,700 --> 01:00:23,800
If I do push that down, there we go.

1472
01:00:23,800 --> 01:00:27,900
Okay, so we don't quite handle what we need to handle yet, and the

1473
01:00:27,900 --> 01:00:29,600
reason is and I'll put the to do in here.

1474
01:00:30,100 --> 01:00:37,700
So basically for tomorrow, we can't zero everything because the

1475
01:00:37,700 --> 01:00:41,700
up-down state will be wrong, right?

1476
01:00:44,200 --> 01:00:48,300
So we have to actually do some real code here that I couldn't do in

1477
01:00:48,300 --> 01:00:52,100
five minutes because basically, we won't be able to hold down a key,

1478
01:00:52,100 --> 01:00:53,000
if that makes sense.

1479
01:00:53,500 --> 01:00:57,800
Like, basically, we only will set it on events when we get an actual

1480
01:00:57,800 --> 01:00:59,800
message, and you can see that happening in here.

1481
01:01:00,000 --> 01:01:00,200
Right?

1482
01:01:00,200 --> 01:01:03,800
If I, if I push the down, I have to actually keep pushing it to scroll

1483
01:01:03,800 --> 01:01:06,500
down instead of holding the down button and making that work.

1484
01:01:07,000 --> 01:01:11,400
And the reason why that happened is basically because, well,

1485
01:01:13,700 --> 01:01:16,700
We're only, you know, I wanted to zero this out so that because we

1486
01:01:16,700 --> 01:01:18,300
want to zero out those half counts.

1487
01:01:18,500 --> 01:01:21,500
So I'm zeroing out everything here at the top, which means that if you

1488
01:01:21,500 --> 01:01:24,600
never get a keyboard message on a frame, everything's going to be set

1489
01:01:24,600 --> 01:01:25,400
to not be down.

1490
01:01:25,400 --> 01:01:27,200
So all the buttons will be set to not be down.

1491
01:01:27,200 --> 01:01:31,200
What we want to do is we want to persist the setting of the buttons.

1492
01:01:31,300 --> 01:01:34,200
So one thing I could do is change this from a ping pong thing.

1493
01:01:34,200 --> 01:01:37,700
Instead of you know, like that to actually just sort of propagating

1494
01:01:37,700 --> 01:01:38,200
forwards.

1495
01:01:38,200 --> 01:01:40,800
I'm not sure we need to do some thinking about how we want to actually

1496
01:01:40,800 --> 01:01:42,500
handle that and that's what we'll do tomorrow.

1497
01:01:42,700 --> 01:01:44,900
Because we want to streamline all this code anyway, and we've got some

1498
01:01:44,900 --> 01:01:45,500
two dudes in here.

1499
01:01:45,500 --> 01:01:48,500
So we should be able to go through and do that relatively quickly, but

1500
01:01:48,500 --> 01:01:51,900
that's really all we're gonna have to do to support keyboard input

1501
01:01:51,900 --> 01:01:52,600
properly in here.

1502
01:01:52,600 --> 01:01:55,600
It should not take too long to do, we're going to have to go through

1503
01:01:55,600 --> 01:01:56,900
and do the stick stuff as well.

1504
01:01:56,900 --> 01:01:59,200
And I thought of some things I want to talk about there as well,

1505
01:01:59,200 --> 01:02:02,400
anyway and are, and we'll finally get to The Dead Zone processing as

1506
01:02:02,400 --> 01:02:02,700
well.

1507
01:02:03,100 --> 01:02:05,400
So basically that's that's all we need to do tomorrow.

1508
01:02:05,400 --> 01:02:07,200
So tomorrow should be a nice a passing day.

1509
01:02:07,200 --> 01:02:08,800
We'll try to get all this code nice and clean.

1510
01:02:09,000 --> 01:02:10,600
We'll go through a couple different revisions of it.

1511
01:02:10,600 --> 01:02:12,500
Basically, just sort of pull things out, get things.

1512
01:02:12,600 --> 01:02:13,300
He's nicer.

1513
01:02:13,400 --> 01:02:14,400
We might want to pull some things out.

1514
01:02:14,400 --> 01:02:16,500
So this isn't so hard to read, we could make it function for them.

1515
01:02:16,500 --> 01:02:17,100
Those sorts of things.

1516
01:02:17,300 --> 01:02:18,600
That is what we will do tomorrow though.

1517
01:02:18,600 --> 01:02:19,300
For now.

1518
01:02:19,600 --> 01:02:21,300
The stream has technically ended.

1519
01:02:21,300 --> 01:02:25,500
I know, it'll be very difficult for anyone to ask a Q&A because of the

1520
01:02:25,500 --> 01:02:28,700
wonderfulness of the internet that ditched the stream in the middle.

1521
01:02:28,700 --> 01:02:31,600
So you probably are missing a good chunk of what actually happened and

1522
01:02:31,600 --> 01:02:34,300
won't have a question until you're actually able to go watch it on

1523
01:02:34,300 --> 01:02:36,100
YouTube in the archive.

1524
01:02:36,100 --> 01:02:37,200
So I apologize for that.

1525
01:02:37,200 --> 01:02:41,200
I will absolutely flame my internet service provider immediately after

1526
01:02:41,200 --> 01:02:42,200
getting off the Stream.

1527
01:02:42,700 --> 01:02:44,100
But beyond that, there's not a whole lot.

1528
01:02:44,100 --> 01:02:44,700
I can do about it.

1529
01:02:44,700 --> 01:02:48,500
Unfortunately, and that is definitely unfortunate to say the least.

1530
01:02:48,500 --> 01:02:54,100
All right, let us go to the Q&A and see what is going on here.

1531
01:02:55,100 --> 01:02:55,800
Let's see.

1532
01:02:57,900 --> 01:02:59,200
Let us see.

1533
01:03:00,200 --> 01:03:06,800
Please, if you can use put see me oratory in your questions, so I know

1534
01:03:06,800 --> 01:03:08,500
they are addressed to me and I can see them.

1535
01:03:08,900 --> 01:03:13,500
And also if you could keep it to code that we actually are working on,

1536
01:03:13,500 --> 01:03:16,200
our have worked on that helps a ton.

1537
01:03:25,400 --> 01:03:25,900
Okay.

1538
01:03:31,200 --> 01:03:35,300
Let's see, we missed a lot of the compiler options discussion when the

1539
01:03:35,300 --> 01:03:35,900
stream went down.

1540
01:03:35,900 --> 01:03:36,900
Can you go back over the stuff?

1541
01:03:36,900 --> 01:03:38,000
You added after no logo?

1542
01:03:38,000 --> 01:03:41,000
I think I'd rather not because I covered it all relatively completely.

1543
01:03:41,000 --> 01:03:44,100
So if you just go to the YouTube, that will be up or even the twitch,

1544
01:03:44,100 --> 01:03:46,600
if you will know that the twitch, you'll have to go to the YouTube.

1545
01:03:46,600 --> 01:03:48,100
YouTube will be uploaded tonight.

1546
01:03:48,100 --> 01:03:51,900
So you'll be able to watch that directly and see all the switches that

1547
01:03:51,900 --> 01:03:53,900
I went through because I won't be able to remember them all.

1548
01:03:54,100 --> 01:03:56,000
Because I even went through some stuff that I removed.

1549
01:03:56,100 --> 01:03:58,100
So if you could go watch the Youtube of it, I'm sorry about that.

1550
01:03:58,100 --> 01:03:59,200
I'll try to fix the switch thing.

1551
01:03:59,200 --> 01:04:00,100
I don't know what happened.

1552
01:04:00,700 --> 01:04:02,300
I'll have to deal with my internet service provider.

1553
01:04:02,300 --> 01:04:03,700
I'm very unhappy about that iíve.

1554
01:04:03,700 --> 01:04:05,700
Actually emailed them recently about dropouts.

1555
01:04:06,100 --> 01:04:11,000
So I'm very angry to say the least, and they will be well, you know

1556
01:04:11,000 --> 01:04:15,400
what, they'll be seeing this dude, because if ever there was a time

1557
01:04:15,700 --> 01:04:17,000
for the owl of shame.

1558
01:04:17,100 --> 01:04:19,500
I think the owl of Shame is looking at Cascade link right now.

1559
01:04:19,500 --> 01:04:23,000
They are looking at Cascade link right in the eye for letting that

1560
01:04:23,000 --> 01:04:23,500
happen.

1561
01:04:23,800 --> 01:04:26,100
So I don't know what's going on, but I will try to get to the bottom

1562
01:04:26,100 --> 01:04:26,500
of it.

1563
01:04:26,900 --> 01:04:28,700
Towel of Shame may be involved.

1564
01:04:29,900 --> 01:04:30,500
All right.

1565
01:04:33,800 --> 01:04:38,400
Why would ever any why would anyone ever not want - oh, I well.

1566
01:04:38,400 --> 01:04:38,800
Okay.

1567
01:04:38,800 --> 01:04:43,800
So - oh I is a little complicated.

1568
01:04:44,000 --> 01:04:44,600
Basically.

1569
01:04:44,600 --> 01:04:50,500
What - oh I does is it says to always use intrinsics where they are

1570
01:04:50,500 --> 01:04:56,900
available in the intrinsics might have some slightly different

1571
01:04:56,900 --> 01:04:59,700
Behavior than the C version of the function.

1572
01:04:59,700 --> 01:05:00,300
I don't know.

1573
01:05:00,300 --> 01:05:02,200
Like, I don't know.

1574
01:05:02,300 --> 01:05:05,800
B - 0 I is always 100% safe.

1575
01:05:06,100 --> 01:05:11,400
If what you were expecting it to do, was to be exactly the same as the

1576
01:05:11,400 --> 01:05:11,600
C.

1577
01:05:11,600 --> 01:05:15,900
Runtime libraries implementation of a function and be faster because

1578
01:05:15,900 --> 01:05:17,000
it's not actually calling anything.

1579
01:05:17,000 --> 01:05:18,500
It's just using assembly directly.

1580
01:05:18,900 --> 01:05:21,200
I don't know if that actually is what it does.

1581
01:05:21,400 --> 01:05:25,800
It may use intrinsics that might not always be exactly the same and

1582
01:05:25,800 --> 01:05:26,600
just trust that.

1583
01:05:26,600 --> 01:05:30,400
You know, what, the what the CPU is doing or stuff like this.

1584
01:05:30,400 --> 01:05:32,200
I'm not sure I feel

1585
01:05:32,300 --> 01:05:36,200
Like, most of the time, it actually does emit code.

1586
01:05:36,200 --> 01:05:36,900
That's correct.

1587
01:05:36,900 --> 01:05:40,600
And in fact, you have to work around that sometimes because sometimes

1588
01:05:40,600 --> 01:05:44,200
like, it's doing extra fix up for like this square, root instruction

1589
01:05:44,200 --> 01:05:46,200
or something that you didn't want it to do.

1590
01:05:46,200 --> 01:05:48,700
And so you have to admit your own square root all this stuff.

1591
01:05:48,700 --> 01:05:50,100
So so I don't know.

1592
01:05:50,100 --> 01:05:52,900
So it may be the oi is just always something you should put but I

1593
01:05:52,900 --> 01:05:56,000
don't I'm not willing to say that because I don't definitively know

1594
01:05:56,200 --> 01:05:58,200
that there isn't some times when you might not want.

1595
01:05:58,200 --> 01:05:59,800
Oh I because the behavior program might change.

1596
01:06:00,000 --> 01:06:01,000
Later, something like this.

1597
01:06:03,900 --> 01:06:07,700
How do we add minus WX, minus W-4 to compiler for using visual studio?

1598
01:06:07,700 --> 01:06:12,700
I don't know, to be honest with you because I have never built a

1599
01:06:12,700 --> 01:06:16,200
project in the latest version, which is me.

1600
01:06:17,600 --> 01:06:22,800
But if you open up the like, if you open up the property stuff, so

1601
01:06:22,800 --> 01:06:27,100
like if you go in here into view and there's a solution Explorer

1602
01:06:27,100 --> 01:06:27,600
thing.

1603
01:06:28,500 --> 01:06:31,400
If you're building in Visual Studio, you'll have a project here.

1604
01:06:31,500 --> 01:06:35,900
And if you right-click on things, you'll get up a property, pains that

1605
01:06:35,900 --> 01:06:39,400
have stuff in them like compiler, and, and preprocessor, and all these

1606
01:06:39,400 --> 01:06:39,900
sorts of things.

1607
01:06:40,300 --> 01:06:45,200
If you hunt through there, you will find one for treat warnings as

1608
01:06:45,200 --> 01:06:47,100
errors or enable higher warning levels.

1609
01:06:47,400 --> 01:06:50,600
Be properties that you can use there in there.

1610
01:06:50,800 --> 01:06:54,800
You just got to find them, you know, so yeah, I'm sorry.

1611
01:06:54,800 --> 01:06:56,100
I don't build products that way.

1612
01:06:56,100 --> 01:07:00,300
So I don't know, but they're in there if you need them and they're at,

1613
01:07:00,300 --> 01:07:02,600
there's even a place where you can add extra switches.

1614
01:07:02,600 --> 01:07:05,600
So if you can't find it, I think you can even just go in and just, and

1615
01:07:05,600 --> 01:07:06,400
add it that way.

1616
01:07:07,600 --> 01:07:09,200
What turning on /od?

1617
01:07:09,800 --> 01:07:11,900
Be a good idea, to turn on, in the normal built?

1618
01:07:11,900 --> 01:07:15,000
I, you know, I think it would be so someone wrote in and said they

1619
01:07:15,000 --> 01:07:16,300
were they were talking about

1620
01:07:18,100 --> 01:07:22,400
My /od, which disables optimizations completely.

1621
01:07:23,400 --> 01:07:27,700
So, let me see, here, Odie, I believe that's what that does.

1622
01:07:28,400 --> 01:07:29,100
Let's see.

1623
01:07:29,400 --> 01:07:30,400
Let's see.

1624
01:07:30,500 --> 01:07:34,400
Yeah, so that suppresses basically, anything that might happen to the

1625
01:07:34,400 --> 01:07:35,000
code.

1626
01:07:35,000 --> 01:07:39,500
The compiler would want to do for performance or anything else, and I

1627
01:07:39,500 --> 01:07:42,400
think that is a good idea because we look at the disassembly and stuff

1628
01:07:42,400 --> 01:07:43,900
and we try to do educational things.

1629
01:07:44,200 --> 01:07:47,400
So I think a minus a minus OD would be good that basically just

1630
01:07:47,600 --> 01:07:51,000
No optimization be super slow, but leave everything where it should

1631
01:07:51,000 --> 01:07:51,300
be.

1632
01:07:51,600 --> 01:07:53,900
And let's, let's I think that's a good idea.

1633
01:07:54,300 --> 01:07:55,000
Thank you for that.

1634
01:07:55,000 --> 01:07:55,700
Suggestion.

1635
01:07:57,100 --> 01:07:58,200
Ambiguous panda.

1636
01:08:00,000 --> 01:08:00,300
Oh, wait.

1637
01:08:00,300 --> 01:08:00,500
No.

1638
01:08:00,500 --> 01:08:00,900
Sorry.

1639
01:08:01,000 --> 01:08:03,400
Sean Bryant was off by one.

1640
01:08:03,800 --> 01:08:05,400
Does compilers compilation message?

1641
01:08:05,400 --> 01:08:07,300
Always say finished in green.

1642
01:08:08,800 --> 01:08:09,400
Know.

1643
01:08:09,400 --> 01:08:13,700
That is that's kanui Max, doing that.

1644
01:08:15,600 --> 01:08:21,399
Yeah, if there's a bug, it still does it.

1645
01:08:21,399 --> 01:08:22,399
I guess I don't know.

1646
01:08:22,399 --> 01:08:26,800
I'm not sure that's some kind of good new emacs nonsense and I didn't

1647
01:08:26,800 --> 01:08:27,200
write that.

1648
01:08:27,200 --> 01:08:29,600
I don't know how hard it would be to change.

1649
01:08:29,800 --> 01:08:33,500
That to be predicated based on whether there was an error in the

1650
01:08:33,500 --> 01:08:36,200
Stream or in the compilation or not, or things like that.

1651
01:08:36,200 --> 01:08:37,000
I'm not sure.

1652
01:08:37,200 --> 01:08:40,100
That's a good question and emacs expert, I'm sure would be able to

1653
01:08:40,100 --> 01:08:41,000
tell you how to do that.

1654
01:08:41,000 --> 01:08:41,800
But I don't know.

1655
01:08:41,800 --> 01:08:43,300
I don't really look at that very often.

1656
01:08:45,899 --> 01:08:48,600
I think you mentioned something about not being a fan of re bindable

1657
01:08:48,600 --> 01:08:49,600
Keys, why?

1658
01:08:49,600 --> 01:08:50,700
So wouldn't it be nice to give you?

1659
01:08:50,700 --> 01:08:51,600
Is that option?

1660
01:08:51,899 --> 01:08:53,899
I just, I just don't like it.

1661
01:08:53,899 --> 01:08:54,300
I don't know.

1662
01:08:54,300 --> 01:08:56,600
It's, it's very distracting.

1663
01:08:56,600 --> 01:08:57,500
I don't like, it's more.

1664
01:08:57,500 --> 01:08:58,600
It's not really vital Keys.

1665
01:08:58,600 --> 01:08:59,800
It's option menus.

1666
01:09:00,100 --> 01:09:02,800
If we want to rebind keys by having like a text file that they could

1667
01:09:02,800 --> 01:09:05,300
go editor something that's totally outside of the game.

1668
01:09:05,700 --> 01:09:09,800
I'm like, not as upset about that or even like that weird Unity

1669
01:09:09,800 --> 01:09:10,899
launcher thing.

1670
01:09:11,100 --> 01:09:11,899
Maybe, I don't know.

1671
01:09:11,899 --> 01:09:16,399
I just, I just don't like having all these options because they like

1672
01:09:16,399 --> 01:09:18,000
clutter that the game experience.

1673
01:09:18,000 --> 01:09:20,300
I kind of just want the keys to be what the keys are.

1674
01:09:21,500 --> 01:09:24,399
And so I just don't like we bundle keys.

1675
01:09:24,399 --> 01:09:25,200
I really don't.

1676
01:09:25,300 --> 01:09:26,399
I want the designer to have.

1677
01:09:26,399 --> 01:09:29,800
Put the keys in good places, and if it was so weird.

1678
01:09:30,000 --> 01:09:32,700
That like they think they need to rebind Keys like a lot of games

1679
01:09:32,700 --> 01:09:32,899
today.

1680
01:09:32,899 --> 01:09:35,399
I've like 80 million keys and they all got to be rebound and whatever

1681
01:09:35,399 --> 01:09:39,100
like make a game with less Keys, you know, would be my suggestion.

1682
01:09:39,100 --> 01:09:41,600
So think that's basically why I don't want to read by in the keys.

1683
01:09:41,700 --> 01:09:45,000
I just want them to be simple and then you just use them.

1684
01:09:49,500 --> 01:09:52,000
How much difference in code size performance would yield?

1685
01:09:52,000 --> 01:09:54,100
If we were to disable the CRT?

1686
01:09:54,900 --> 01:09:55,700
Well, okay.

1687
01:09:55,700 --> 01:09:59,900
So at the moment it would be huge because at the moment most of our

1688
01:09:59,900 --> 01:10:06,700
executable is it is the C, runtime library, but in the future a lot of

1689
01:10:06,700 --> 01:10:10,000
the code will be ours and then it will be less of a win speed-wise.

1690
01:10:10,000 --> 01:10:11,100
It won't be anyone at all.

1691
01:10:11,300 --> 01:10:13,800
Because as long as long as you're not calling the C runtime Library,

1692
01:10:13,800 --> 01:10:14,900
there's really no speed hit.

1693
01:10:18,200 --> 01:10:22,600
So there's no speed but but size it would definitely be a thing.

1694
01:10:26,600 --> 01:10:29,900
I couldn't see what you did that made the key X messages, not being

1695
01:10:29,900 --> 01:10:30,200
triggered.

1696
01:10:30,200 --> 01:10:30,800
What happened there?

1697
01:10:30,800 --> 01:10:31,200
Okay.

1698
01:10:31,200 --> 01:10:31,700
Yeah, let's go.

1699
01:10:31,700 --> 01:10:34,900
I kind of went through that quickly because I was under time pressure

1700
01:10:34,900 --> 01:10:35,200
there.

1701
01:10:36,100 --> 01:10:38,800
No, thanks to the internet service provider, but I will go over that

1702
01:10:38,800 --> 01:10:39,200
again.

1703
01:10:39,600 --> 01:10:42,000
So what I wanted to do, right?

1704
01:10:42,700 --> 01:10:47,000
Is this is this this win32 callback function that we are obliged to

1705
01:10:47,000 --> 01:10:49,800
have, because Windows, sometimes calls us back directly here.

1706
01:10:50,600 --> 01:10:55,100
Just by cold calling, this directly like, WM paint is an example.

1707
01:10:55,200 --> 01:10:55,600
We will

1708
01:10:55,900 --> 01:10:59,400
Get WM paint message directly from Windows without ever having gone

1709
01:10:59,400 --> 01:11:03,400
through our dispatch Loop, but we have down here are actual dispatch

1710
01:11:03,400 --> 01:11:04,400
Loop, right?

1711
01:11:04,400 --> 01:11:07,700
This thing while Peak message is ostensibly.

1712
01:11:07,700 --> 01:11:09,200
The thing that's supposed to handle all the messages.

1713
01:11:09,200 --> 01:11:11,600
So, even though windows can sometimes cause back directly at that

1714
01:11:11,600 --> 01:11:14,200
wind, at that window function.

1715
01:11:14,900 --> 01:11:17,000
This is actually where there's where the message is supposed to come

1716
01:11:17,000 --> 01:11:20,400
in and I would rather process the messages here because everything is

1717
01:11:20,400 --> 01:11:22,500
local and logical in here.

1718
01:11:22,500 --> 01:11:24,700
We know what game inputs, we were look talking about.

1719
01:11:24,700 --> 01:11:25,700
We know where everything is.

1720
01:11:25,800 --> 01:11:26,700
We have our game memory.

1721
01:11:26,700 --> 01:11:27,600
We have all our stuff.

1722
01:11:27,600 --> 01:11:31,500
We don't have to, like, shuttle that stuff off into Global variables,

1723
01:11:31,500 --> 01:11:34,700
where the window procedure could pick it up again or store it inside

1724
01:11:34,700 --> 01:11:36,400
window, extra storage, which is thing you can do.

1725
01:11:36,400 --> 01:11:39,500
And when 32 windows we have to do that if we just process it in here.

1726
01:11:39,700 --> 01:11:44,900
So all I did was just say, OK, when a message comes in before what we

1727
01:11:44,900 --> 01:11:46,900
were doing is we always just dispatch it.

1728
01:11:47,000 --> 01:11:49,500
So when a keyword message would come in, it would actually just call

1729
01:11:49,500 --> 01:11:51,500
this which would call our window procedure.

1730
01:11:51,900 --> 01:11:52,600
What I did instead.

1731
01:11:52,600 --> 01:11:54,900
We just say, oh, well if it's a keyboard message, just don't call the

1732
01:11:54,900 --> 01:11:55,700
window procedure at all.

1733
01:11:55,800 --> 01:11:57,300
All just just handle it right here.

1734
01:11:57,400 --> 01:11:59,800
So it never actually gets down to this fast matches.

1735
01:12:00,500 --> 01:12:01,300
So it's fine.

1736
01:12:01,700 --> 01:12:02,300
That's it.

1737
01:12:03,300 --> 01:12:04,200
Nothing more to it.

1738
01:12:08,700 --> 01:12:10,100
Let's see.

1739
01:12:13,900 --> 01:12:15,000
Would it be better to just pass?

1740
01:12:15,000 --> 01:12:17,500
Which key was pressed to the non platform code instead of switching on

1741
01:12:17,500 --> 01:12:20,700
the keys in the platform layer since the keys will depend on the game

1742
01:12:22,100 --> 01:12:22,400
again.

1743
01:12:22,400 --> 01:12:24,600
I don't really want to do that at the moment.

1744
01:12:24,600 --> 01:12:26,200
I wouldn't necessarily advise against that.

1745
01:12:26,200 --> 01:12:29,600
That's a totally fine way to go, but at the moment I just kind of

1746
01:12:29,600 --> 01:12:33,500
wanted to just leave it so that it's all processed inside the win32

1747
01:12:33,500 --> 01:12:36,400
layer and then all that happens.

1748
01:12:36,400 --> 01:12:38,900
Is the game just sees a virtualized controller.

1749
01:12:38,900 --> 01:12:40,700
So the game just basically knows about a controller.

1750
01:12:40,700 --> 01:12:41,900
That's all it knows about.

1751
01:12:42,000 --> 01:12:42,800
And if the keyboard is

1752
01:12:43,100 --> 01:12:43,800
Like a controller.

1753
01:12:43,800 --> 01:12:46,400
The platform layer is responsible for turning it into that.

1754
01:12:47,000 --> 01:12:48,900
And the reason I want to do that is because there's some stuff we

1755
01:12:48,900 --> 01:12:52,100
might do, they're like we might detect whether on like a French

1756
01:12:52,100 --> 01:12:55,300
keyboard that has the wasd keys, laid out differently and switch them

1757
01:12:55,300 --> 01:12:56,700
to the to be proper keys.

1758
01:12:56,700 --> 01:13:00,300
That will be laid out properly look and see if there's Dvorak and use

1759
01:13:00,300 --> 01:13:00,700
different thing.

1760
01:13:00,700 --> 01:13:03,200
Like we may do stuff in the platform layer that tries to be smart

1761
01:13:03,200 --> 01:13:05,600
about that stuff like this.

1762
01:13:10,000 --> 01:13:13,100
But yeah, I mean, I should, I said it, but I'll say it again, but if

1763
01:13:13,100 --> 01:13:16,200
you wanted to implement the other way, that's totally fine, and I've

1764
01:13:16,200 --> 01:13:17,300
often implanted things that way.

1765
01:13:17,300 --> 01:13:19,500
So, I'm not saying that this is like the right way to do it or the

1766
01:13:19,500 --> 01:13:20,400
other ways bad.

1767
01:13:20,400 --> 01:13:23,200
It's just the way I happen to choose so far and we could even change

1768
01:13:23,200 --> 01:13:24,300
our mind halfway through the stream.

1769
01:13:24,300 --> 01:13:26,500
If it turns out to be bad we could just change.

1770
01:13:26,500 --> 01:13:28,700
So it's not like there's anything wrong with doing the other way.

1771
01:13:32,600 --> 01:13:35,600
If you build for say avx2 or something, what happens if the user has

1772
01:13:35,600 --> 01:13:40,100
an older processor, they will fault on invalid instruction.

1773
01:13:40,100 --> 01:13:43,700
Usually, sometimes I think there's ways, they work around that, but

1774
01:13:43,700 --> 01:13:45,000
that's mostly what happens.

1775
01:13:45,300 --> 01:13:48,500
So, if you want to use newer instructions like you want to use avx2,

1776
01:13:48,800 --> 01:13:51,900
what you have to do is you have to basically test first to see what

1777
01:13:51,900 --> 01:13:55,900
processor you're on and don't call the code that uses those.

1778
01:13:55,900 --> 01:13:58,100
If you're on a processor that doesn't support them.

1779
01:13:58,500 --> 01:14:01,600
So you onus is kind of on you to work around that.

1780
01:14:03,600 --> 01:14:06,400
Will you eventually move to a single unified build system for all your

1781
01:14:06,400 --> 01:14:07,500
target platforms?

1782
01:14:07,600 --> 01:14:11,700
No, because there's no way that it could be simpler than what we have

1783
01:14:11,700 --> 01:14:12,200
right here.

1784
01:14:12,700 --> 01:14:13,300
Right.

1785
01:14:13,700 --> 01:14:16,700
This is one line of a build basically.

1786
01:14:17,900 --> 01:14:20,700
So any build system that we were to use, would be massively more

1787
01:14:20,700 --> 01:14:23,100
complicated than this, for no actual benefit.

1788
01:14:23,300 --> 01:14:26,600
So, we will just have a one line build basically on each of our

1789
01:14:26,600 --> 01:14:28,100
platforms, and that'll be.

1790
01:14:28,100 --> 01:14:31,300
And that's the, that's way easier than trying to maintain any build

1791
01:14:31,300 --> 01:14:32,400
system, which will be made.

1792
01:14:32,600 --> 01:14:34,000
Way more complicated than that.

1793
01:14:36,300 --> 01:14:37,200
Let's see.

1794
01:14:42,800 --> 01:14:47,800
Would not - oh, I and ODB clashing or they evaluated From First to

1795
01:14:47,800 --> 01:14:48,400
Last.

1796
01:14:48,600 --> 01:14:52,000
I don't think they're clashing, but I do think they are evaluated From

1797
01:14:52,000 --> 01:14:52,700
First to Last.

1798
01:14:52,700 --> 01:14:58,700
So if this did Clash, I believe that OD will be overridden by, oh, I

1799
01:14:59,000 --> 01:14:59,900
which is what we

1800
01:15:00,600 --> 01:15:02,100
But I don't know if they even do it.

1801
01:15:02,100 --> 01:15:06,400
Maybe that you can turn them on totally independently anyway, because

1802
01:15:06,400 --> 01:15:10,600
it just this isn't about an optimization so much as it's about what

1803
01:15:10,600 --> 01:15:14,700
happens, whether it's a function call or inline code and the code can

1804
01:15:14,700 --> 01:15:16,100
still be totally an optimized right?

1805
01:15:16,100 --> 01:15:17,000
That does the thing.

1806
01:15:17,000 --> 01:15:19,900
So, I'm not sure that they Clash, but

1807
01:15:21,900 --> 01:15:24,600
Is there a way to make CLM it a human-readable summary of the

1808
01:15:24,600 --> 01:15:25,100
optimizations?

1809
01:15:25,100 --> 01:15:27,300
It does, when - OD isn't specified.

1810
01:15:27,300 --> 01:15:28,500
I do not know of one.

1811
01:15:28,500 --> 01:15:29,700
That would be pretty awesome.

1812
01:15:30,900 --> 01:15:32,200
But I don't know of one.

1813
01:15:32,800 --> 01:15:35,900
Just the map file spit out data about struct members as well.

1814
01:15:37,300 --> 01:15:38,500
Not that I know of.

1815
01:15:38,500 --> 01:15:41,100
No, I think that only ends up in the pdb.

1816
01:15:41,100 --> 01:15:44,500
So if you want to know, like what you're saying, you're talking about,

1817
01:15:44,600 --> 01:15:45,500
could things like that.

1818
01:15:45,500 --> 01:15:47,400
Be used to generate serialization code?

1819
01:15:47,400 --> 01:15:50,000
I think you'd have to use the pdb, to generate serialization code.

1820
01:15:50,000 --> 01:15:51,500
I don't think you can use the

1821
01:15:51,700 --> 01:15:52,400
App for that.

1822
01:15:54,100 --> 01:15:55,200
Unless I'm missing something.

1823
01:15:58,700 --> 01:16:00,100
Let's see.

1824
01:16:04,000 --> 01:16:06,800
Does it not allowing key rebinding mess up a different keyboard?

1825
01:16:06,800 --> 01:16:07,600
Layouts.

1826
01:16:07,600 --> 01:16:10,700
Like defaulting to wasde on an azerty or other keyboard layout.

1827
01:16:10,700 --> 01:16:14,200
I'd rather just handle those layouts so that the user doesn't have to

1828
01:16:14,200 --> 01:16:15,600
learn about remapping Keys.

1829
01:16:16,100 --> 01:16:17,200
That'd be my preference.

1830
01:16:17,500 --> 01:16:18,000
Right?

1831
01:16:18,600 --> 01:16:20,100
And you could even crowdsource that, right?

1832
01:16:20,100 --> 01:16:23,000
Like, you'd have a bunch of different keyboard files that just get

1833
01:16:23,000 --> 01:16:23,400
loaded.

1834
01:16:23,400 --> 01:16:25,100
I'd like to do it in a way that makes it.

1835
01:16:25,100 --> 01:16:28,800
So that it's not about you having to deal with the menu, but I'd like

1836
01:16:28,800 --> 01:16:31,800
to start stop discussing this because you'll have the source code,

1837
01:16:31,800 --> 01:16:32,100
right?

1838
01:16:32,100 --> 01:16:33,300
If you preorder the game.

1839
01:16:33,800 --> 01:16:36,800
The anyone who buys the game, has a source code and honestly, I want

1840
01:16:36,800 --> 01:16:38,000
to teach people to program.

1841
01:16:38,200 --> 01:16:41,600
So if they want to go in and add key, rebinding

1842
01:16:43,300 --> 01:16:45,100
That is that is their prerogative.

1843
01:16:45,200 --> 01:16:50,000
Everyone who has a different opinion than I do about how this game

1844
01:16:50,000 --> 01:16:51,000
should work.

1845
01:16:51,600 --> 01:16:55,500
Should take it upon themselves to build their own version that works

1846
01:16:55,500 --> 01:16:55,900
that way.

1847
01:16:55,900 --> 01:16:59,200
That's exactly how I would like it to happen so that they have their

1848
01:16:59,200 --> 01:17:01,400
own personal version that does exactly what they want.

1849
01:17:01,800 --> 01:17:03,900
So I'll be making the game design decisions.

1850
01:17:03,900 --> 01:17:05,900
But any time you don't agree with them.

1851
01:17:06,400 --> 01:17:10,200
Unlike normal games, that's not actually an impediment to you.

1852
01:17:10,200 --> 01:17:12,800
You can just go ahead and straight up change my design decision.

1853
01:17:13,400 --> 01:17:14,500
To be what you want.

1854
01:17:17,400 --> 01:17:19,900
Is the game currently linked to the dll version of the CRT?

1855
01:17:21,300 --> 01:17:24,000
No, I that's what this does, - Mt.

1856
01:17:24,000 --> 01:17:25,300
Prevents that from happening.

1857
01:17:25,800 --> 01:17:30,200
So it is, it is, it is slick to static now and that is what I what you

1858
01:17:30,200 --> 01:17:30,800
need to do.

1859
01:17:30,900 --> 01:17:32,100
You always need to do static.

1860
01:17:36,500 --> 01:17:38,700
Let's see.

1861
01:17:39,900 --> 01:17:41,400
Let us see.

1862
01:17:41,400 --> 01:17:44,100
I think that is all the questions.

1863
01:17:47,600 --> 01:17:49,600
I do not see any other questions.

1864
01:17:50,400 --> 01:17:51,200
There's another question.

1865
01:17:51,400 --> 01:17:54,100
I know you won't be using any libraries with handmade hero, but

1866
01:17:54,100 --> 01:17:57,600
imagine you would for example, how would you include something open

1867
01:17:57,600 --> 01:17:59,900
source, like Z lib with your Unity?

1868
01:18:00,000 --> 01:18:02,700
Old would you just include the source file like you compile your own

1869
01:18:02,700 --> 01:18:05,200
source files or build a separate Dynamic, static lab and linked to

1870
01:18:05,200 --> 01:18:05,800
that.

1871
01:18:08,900 --> 01:18:10,400
That's a good question.

1872
01:18:10,400 --> 01:18:13,400
I almost never use that sort of thing.

1873
01:18:13,600 --> 01:18:17,100
I tend to use Sean Barrett's libraries and libraries like that that

1874
01:18:17,100 --> 01:18:20,700
are just you can just pound include them and they work, but if you

1875
01:18:20,700 --> 01:18:23,800
were, I would say probably build a static lib and then stick it on the

1876
01:18:23,800 --> 01:18:28,400
end here would be how I would how I would go for a third-party

1877
01:18:28,400 --> 01:18:29,000
Library.

1878
01:18:29,200 --> 01:18:34,600
I think that's probably the best way to do that.

1879
01:18:36,100 --> 01:18:38,600
I can't really think of a downside to doing it that way because since

1880
01:18:38,700 --> 01:18:42,700
Third-party library that way, you can just compile it once and you

1881
01:18:42,700 --> 01:18:45,500
don't have to pay for the cost of compiling it every time because it

1882
01:18:45,500 --> 01:18:48,700
may be banana, cakes code in there, you know, who knows?

1883
01:18:48,700 --> 01:18:49,000
Right?

1884
01:18:49,000 --> 01:18:51,500
It may be written in such a way that it takes 12 years to compile

1885
01:18:51,500 --> 01:18:53,000
because it's 50,000 templates deeper.

1886
01:18:53,000 --> 01:18:54,100
All these are the sorts of things.

1887
01:18:55,800 --> 01:18:56,900
So it's bad.

1888
01:18:57,200 --> 01:18:57,600
Yeah.

1889
01:19:00,600 --> 01:19:01,600
Please tell Cascade link.

1890
01:19:01,600 --> 01:19:02,700
Thank you from all of us.

1891
01:19:02,700 --> 01:19:03,100
Yes.

1892
01:19:03,200 --> 01:19:03,800
I will.

1893
01:19:04,100 --> 01:19:08,300
I will be sure to tell them that I will send them a link to the stream

1894
01:19:08,300 --> 01:19:12,300
and say nobody got to watch it because of the problem that I reported

1895
01:19:12,300 --> 01:19:13,900
to you, that you have not fixed.

1896
01:19:15,800 --> 01:19:17,400
Apparently don't know what the problem is.

1897
01:19:17,400 --> 01:19:18,000
But yeah.

1898
01:19:20,600 --> 01:19:23,500
It's a it's it's unfortunate to say the least.

1899
01:19:24,200 --> 01:19:26,800
So hopefully it will be, hopefully be okay.

1900
01:19:27,500 --> 01:19:31,700
Anyway, I think that is all the questions.

1901
01:19:31,800 --> 01:19:35,300
I see, no more questions coming in, which makes sense because since

1902
01:19:35,300 --> 01:19:38,500
the stream was down for most of the time, I'm not through sure.

1903
01:19:38,500 --> 01:19:41,400
Anyone could really ask a question about the stream.

1904
01:19:42,400 --> 01:19:44,600
Is there any advantage of processing message in the main Loop other

1905
01:19:44,600 --> 01:19:46,400
than conceptual grouping Ronald Reagan?

1906
01:19:46,400 --> 01:19:46,600
S.

1907
01:19:46,700 --> 01:19:47,600
I don't think so.

1908
01:19:48,300 --> 01:19:49,100
I mean you say

1909
01:19:49,200 --> 01:19:50,800
Of a function dispatch, right?

1910
01:19:50,800 --> 01:19:52,900
You don't have to call translate message dispatch message and you

1911
01:19:52,900 --> 01:19:55,800
don't go through windows, but this is not really a performance

1912
01:19:55,800 --> 01:19:57,200
critical part of the code.

1913
01:19:57,400 --> 01:20:00,500
So I don't think there's any reason to be concerned about how it's

1914
01:20:00,500 --> 01:20:01,300
optimized.

1915
01:20:01,500 --> 01:20:05,500
So really, I just like the conceptual purity of being able to have it

1916
01:20:05,500 --> 01:20:09,000
be on the same stack and specifically what I mean by that is like,

1917
01:20:09,000 --> 01:20:10,600
let's say we're going to pull this out.

1918
01:20:10,600 --> 01:20:10,900
Right?

1919
01:20:10,900 --> 01:20:12,900
And I want to do it.

1920
01:20:12,900 --> 01:20:14,400
So I still want it in a function, right?

1921
01:20:14,400 --> 01:20:17,900
Which is like handle keyboard events or something, right?

1922
01:20:17,900 --> 01:20:19,100
So I'm still going to, I'm still going.

1923
01:20:19,300 --> 01:20:22,100
It out, so I'm not going to put it in line, right?

1924
01:20:23,900 --> 01:20:25,300
Or even you know, what I could do.

1925
01:20:25,500 --> 01:20:26,700
I could even do it this way.

1926
01:20:26,900 --> 01:20:27,900
Let's do it this way.

1927
01:20:28,400 --> 01:20:32,000
So this is this will this will just be like our message pump thing

1928
01:20:32,000 --> 01:20:33,100
here or whatever, right?

1929
01:20:33,100 --> 01:20:36,100
So we've got this, let's say we just do it, we want to pull it out.

1930
01:20:36,100 --> 01:20:37,200
So it's cleaner, right?

1931
01:20:37,200 --> 01:20:37,800
Like that.

1932
01:20:38,200 --> 01:20:41,000
Now, I'm not necessarily saying there's anything positive about

1933
01:20:41,000 --> 01:20:46,200
pulling it out like that, but basically, like win32 message Loop,

1934
01:20:46,400 --> 01:20:46,900
right?

1935
01:20:47,400 --> 01:20:48,700
So let's say I was going to do it this way.

1936
01:20:48,700 --> 01:20:49,000
So, it's

1937
01:20:49,200 --> 01:20:51,100
In an external function, just like the other.

1938
01:20:51,200 --> 01:20:54,100
The windows function was, I still prefer it this way?

1939
01:20:54,300 --> 01:20:57,200
And the reason for that is because when I actually go to make this

1940
01:20:57,200 --> 01:20:58,500
happen, right?

1941
01:20:59,000 --> 01:20:59,800
I can

1942
01:21:00,200 --> 01:21:04,100
I have control over what I pass directly to this function.

1943
01:21:04,100 --> 01:21:08,100
So it can stay more functional style and less about global variables

1944
01:21:08,100 --> 01:21:11,000
and that have to get looked up that I have less control over, right.

1945
01:21:11,300 --> 01:21:13,500
So basically I put this in here.

1946
01:21:13,500 --> 01:21:15,300
I called the message Loop.

1947
01:21:15,300 --> 01:21:17,300
The win32 message loop.

1948
01:21:17,600 --> 01:21:18,400
I probably shouldn't call it.

1949
01:21:18,400 --> 01:21:20,100
That I'll change that name in a second here.

1950
01:21:20,400 --> 01:21:21,800
But we do this, right?

1951
01:21:22,000 --> 01:21:22,600
And then we see.

1952
01:21:22,600 --> 01:21:24,800
Alright, we need this keyboard controller thing.

1953
01:21:25,100 --> 01:21:28,400
So we'll pass that right keyboard controller.

1954
01:21:28,500 --> 01:21:29,300
And I forget what?

1955
01:21:29,300 --> 01:21:29,800
What type

1956
01:21:30,000 --> 01:21:32,400
That guy is it's a game, controller input.

1957
01:21:32,400 --> 01:21:34,000
So pass that guy, right?

1958
01:21:34,000 --> 01:21:34,900
That it needs.

1959
01:21:36,300 --> 01:21:41,900
And there it goes, keyboard controller and we're done.

1960
01:21:42,700 --> 01:21:47,000
And basically, what you can see there is, it's like I can directly see

1961
01:21:47,000 --> 01:21:48,000
what's going on with the code.

1962
01:21:48,000 --> 01:21:49,200
I'm going to use the message Loop.

1963
01:21:49,200 --> 01:21:52,100
I'm going to put the input that comes from it into this keyboard

1964
01:21:52,100 --> 01:21:53,500
controller and we're all good.

1965
01:21:54,100 --> 01:21:57,500
If I'd wanted to do that out here, right?

1966
01:21:58,200 --> 01:21:58,900
And wait a minute.

1967
01:21:58,900 --> 01:21:59,300
You know what?

1968
01:21:59,300 --> 01:21:59,900
There's one thing?

1969
01:22:00,000 --> 01:22:01,600
It's busted about the way I just did.

1970
01:22:01,600 --> 01:22:02,100
That.

1971
01:22:02,700 --> 01:22:04,000
This is to be above that.

1972
01:22:04,100 --> 01:22:04,500
Sorry.

1973
01:22:05,000 --> 01:22:05,500
Sorry.

1974
01:22:06,100 --> 01:22:06,800
Sorry, everyone.

1975
01:22:06,800 --> 01:22:08,000
Just, there you go.

1976
01:22:09,700 --> 01:22:13,000
Basically, if I were to do that with the other one, right?

1977
01:22:13,200 --> 01:22:16,800
If I were to try and shoehorn that into this thing, this thing is

1978
01:22:16,800 --> 01:22:20,100
totally dictated by Windows Windows, is the only person who calls

1979
01:22:20,100 --> 01:22:24,600
this, and it's defined what, the the variables are, that get passed as

1980
01:22:24,600 --> 01:22:25,700
parameters, right?

1981
01:22:25,900 --> 01:22:29,800
So, I need that keyboard controller in here, but I can't actually,

1982
01:22:29,900 --> 01:22:33,000
Ali set it and that's very frustrating, right?

1983
01:22:33,900 --> 01:22:38,100
It basically forces me to have a notion a global variable in one way

1984
01:22:38,100 --> 01:22:41,400
or another, whether I store it on the window or whether I store it in

1985
01:22:41,400 --> 01:22:42,300
the global store here.

1986
01:22:42,300 --> 01:22:45,600
It's forcing me to do something that makes my code harder to read and

1987
01:22:45,600 --> 01:22:49,000
understand because the flow of data is not explicit.

1988
01:22:49,000 --> 01:22:52,000
Whereas when I did it this way, it was, of course, you know what?

1989
01:22:52,000 --> 01:22:52,900
I can also do here.

1990
01:22:54,100 --> 01:22:56,700
We can handle our selects, we can, we can collapse all sorts of things

1991
01:22:56,700 --> 01:22:56,900
here.

1992
01:22:56,900 --> 01:22:57,500
Can't wait.

1993
01:22:57,600 --> 01:22:58,200
There we go.

1994
01:22:59,500 --> 01:23:01,300
Yeah, little opportunistic there.

1995
01:23:01,400 --> 01:23:02,100
Why not?

1996
01:23:02,200 --> 01:23:03,100
Put that in there?

1997
01:23:03,500 --> 01:23:03,900
Never hurt.

1998
01:23:03,900 --> 01:23:04,400
Anyone.

1999
01:23:04,400 --> 01:23:06,900
Will WM quit, handling simplify things.

2000
01:23:07,100 --> 01:23:09,100
Anyway, but also, hopefully you can see what I mean.

2001
01:23:09,100 --> 01:23:13,900
By that process pending messages is what we'll call that.

2002
01:23:13,900 --> 01:23:14,900
It's a better name for it.

2003
01:23:14,900 --> 01:23:16,800
I think says a little clearer what it's going to do.

2004
01:23:17,400 --> 01:23:18,500
It's just a lot.

2005
01:23:18,800 --> 01:23:22,400
It's just a lot cleaner when you don't have callbacks based.

2006
01:23:22,400 --> 01:23:25,100
I don't ever really like callbacks unless you have to have them

2007
01:23:25,700 --> 01:23:29,000
because they just make control flow harder to read and they make side.

2008
01:23:29,300 --> 01:23:32,300
Difficult more difficult to understand because they're happening all

2009
01:23:32,300 --> 01:23:32,900
over the place.

2010
01:23:35,500 --> 01:23:37,000
So hopefully that makes some sense.

2011
01:23:40,500 --> 01:23:41,700
Let's see.

2012
01:23:45,500 --> 01:23:48,200
I'm super new to programming in my first semester of CSS classes at

2013
01:23:48,200 --> 01:23:48,600
the moment.

2014
01:23:48,600 --> 01:23:51,000
Are there any resources for someone like me, who is new to the basic?

2015
01:23:51,000 --> 01:23:51,600
Jargon and techniques.

2016
01:23:51,600 --> 01:23:53,500
Do you have a tutorial video on the basics?

2017
01:23:53,500 --> 01:23:57,800
Yes, what you can do is you can go to handmade hero dot-org.

2018
01:23:57,800 --> 01:23:59,800
There is a link on.

2019
01:24:00,200 --> 01:24:03,800
Well, that is, if the internet's working at all ever, which, you know,

2020
01:24:03,900 --> 01:24:05,200
hear it.

2021
01:24:05,200 --> 01:24:08,000
Often is not, but you can go to handmade here at the org.

2022
01:24:08,100 --> 01:24:10,500
There's a link to the forum's site there.

2023
01:24:11,000 --> 01:24:14,600
And basically, if you go on there, I wish I could.

2024
01:24:14,600 --> 01:24:17,300
Let me see if I can yes for himself.

2025
01:24:17,300 --> 01:24:17,700
Yeah.

2026
01:24:18,400 --> 01:24:21,700
So if you go on here for HCBS forms a hamburger, but you should be

2027
01:24:21,700 --> 01:24:26,800
able to go to him a hero, just dot-org, handmade hero dot-org if you

2028
01:24:26,800 --> 01:24:27,000
go.

2029
01:24:27,000 --> 01:24:27,100
Yeah.

2030
01:24:27,100 --> 01:24:27,800
Okay, so it's working.

2031
01:24:27,800 --> 01:24:29,800
Now, if you go to have me here at org, there's a news in.

2032
01:24:30,000 --> 01:24:33,200
Forums link along with other stuff and that.

2033
01:24:33,200 --> 01:24:35,700
Basically, if you go to the news and forums link, it gives you a bunch

2034
01:24:35,700 --> 01:24:39,300
of coding resources like you asked for there's code discussion and

2035
01:24:39,300 --> 01:24:42,200
there's coding resources and there's episode guide, all of which you

2036
01:24:42,200 --> 01:24:43,300
might want to check out.

2037
01:24:43,600 --> 01:24:47,500
So the the code discussion is like a forum where you can ask

2038
01:24:47,500 --> 01:24:47,900
questions.

2039
01:24:47,900 --> 01:24:50,800
And there's people who do things like asking stuff about like math

2040
01:24:50,800 --> 01:24:51,900
books, that are good and stuff like that.

2041
01:24:51,900 --> 01:24:52,900
You can look at those.

2042
01:24:52,900 --> 01:24:56,700
We try to gather those up into this coding resources page where we

2043
01:24:56,700 --> 01:24:59,600
link to things that people have done, which is kind of nice.

2044
01:24:59,600 --> 01:24:59,800
Rip.

2045
01:25:00,000 --> 01:25:00,800
Materials down here.

2046
01:25:00,800 --> 01:25:02,500
We'll sort of build this over time, hopefully.

2047
01:25:02,800 --> 01:25:05,500
And then finally, the episode guide has a stuff.

2048
01:25:05,500 --> 01:25:08,100
Some stuff you're asking about, I did do a brief test stream that was

2049
01:25:08,100 --> 01:25:10,700
intro to see on Windows that might answer some of those questions the

2050
01:25:10,700 --> 01:25:12,100
jargon of stuff like that for you.

2051
01:25:12,700 --> 01:25:15,500
So you can kind of go on there and take a look at some of that stuff

2052
01:25:15,700 --> 01:25:19,600
and those thanks to the to the amazing efforts of the people who are

2053
01:25:19,600 --> 01:25:20,900
listed up here at the top of this page.

2054
01:25:20,900 --> 01:25:24,400
In fact, who I highly recommend you thank if you see them on the

2055
01:25:24,400 --> 01:25:25,400
Twitter's and so on.

2056
01:25:26,800 --> 01:25:28,700
Basically inside here.

2057
01:25:28,900 --> 01:25:31,400
They've done a bunch of work to actually make these really easy to

2058
01:25:31,400 --> 01:25:31,900
use.

2059
01:25:32,400 --> 01:25:34,900
So basically like depending on I don't know if the intro to see ones

2060
01:25:34,900 --> 01:25:36,800
have it the interest to see ones, don't have it.

2061
01:25:36,900 --> 01:25:41,200
But on the handmade hero one's a lot of them have actual timeline

2062
01:25:41,200 --> 01:25:41,700
markers.

2063
01:25:41,700 --> 01:25:42,800
Yeah, like this sort of thing.

2064
01:25:42,900 --> 01:25:45,800
They're not all done yet because you know, obviously it's volunteer

2065
01:25:45,800 --> 01:25:46,100
effort.

2066
01:25:46,100 --> 01:25:48,700
So, you know, if it's basically if someone happens to have the time to

2067
01:25:48,700 --> 01:25:51,400
do it whether it's there, but a lot of them actually do have it now

2068
01:25:51,700 --> 01:25:54,500
where you can sort of go through and jump right to things as well and

2069
01:25:54,500 --> 01:25:55,200
there's notes.

2070
01:25:55,200 --> 01:25:55,800
And here there's

2071
01:25:56,000 --> 01:25:57,000
To get filled in as well.

2072
01:25:57,600 --> 01:26:00,200
You can kind of see if you go on some of these don't know which ones

2073
01:26:00,200 --> 01:26:03,500
have notes and which ones don't I think the audio one started to have

2074
01:26:03,500 --> 01:26:04,100
some notes.

2075
01:26:04,400 --> 01:26:04,600
Yeah.

2076
01:26:04,600 --> 01:26:06,900
So for example, sometimes people put notes in there.

2077
01:26:07,100 --> 01:26:09,200
So yeah, that's it's an effort that's underway.

2078
01:26:10,000 --> 01:26:12,000
And but like I said, it's just volunteers who are doing it out of the

2079
01:26:12,000 --> 01:26:12,800
goodness of their heart.

2080
01:26:12,800 --> 01:26:14,900
So, you know, it's it's not entirely complete.

2081
01:26:14,900 --> 01:26:16,500
If people have something want to donate for that.

2082
01:26:16,600 --> 01:26:19,000
I can put you in touch with the people who do that and you can help

2083
01:26:19,100 --> 01:26:22,600
help them fill that stuff in because I'm sure they could use the help

2084
01:26:22,600 --> 01:26:25,300
certainly, but that's a good place to go and we're trying to make this

2085
01:26:25,300 --> 01:26:25,800
site user.

2086
01:26:25,900 --> 01:26:27,200
Bill for people who are trying to learn.

2087
01:26:27,600 --> 01:26:31,700
So that's a good place to go if you if you want to

2088
01:26:35,000 --> 01:26:37,400
Let's see when you initialize a window.

2089
01:26:37,400 --> 01:26:40,000
There's that one parameter for allocating extra, bytes to associate.

2090
01:26:40,000 --> 01:26:41,900
Where there would it be appropriate or input State there yet.

2091
01:26:41,900 --> 01:26:43,200
So, that's what I was referring to.

2092
01:26:43,200 --> 01:26:44,700
I said window extra storage.

2093
01:26:45,600 --> 01:26:49,900
Basically though that doesn't help us in this case, because it's still

2094
01:26:49,900 --> 01:26:52,300
just a global variable is just a little video stored in the window.

2095
01:26:52,500 --> 01:26:57,800
If we had multiple windows and each window needed a different set of

2096
01:26:57,800 --> 01:26:59,900
stuff that was working with, then it would make

2097
01:27:00,000 --> 01:27:02,400
Our sinks going to be a little cleaner to store it with the window,

2098
01:27:02,400 --> 01:27:03,600
then to store it as Global's.

2099
01:27:04,000 --> 01:27:06,900
But if we're just talking about something that actually is global.

2100
01:27:07,500 --> 01:27:09,400
There's only one of them then.

2101
01:27:09,400 --> 01:27:11,600
Basically, what I wanted to do was I want to just leave it on the

2102
01:27:11,600 --> 01:27:14,600
stack where it belonged here and I didn't want to complicate it by

2103
01:27:14,600 --> 01:27:15,900
setting a global latch that.

2104
01:27:15,900 --> 01:27:17,200
Then the window picks up.

2105
01:27:17,400 --> 01:27:20,600
It would be no cleaner to set the global latch in the Windows store.

2106
01:27:20,600 --> 01:27:26,700
It's still just as janky so so you can use the window extra bytes.

2107
01:27:27,300 --> 01:27:29,800
You basically you could pass you pass it here.

2108
01:27:30,000 --> 01:27:32,300
Here and you define it in the wind class.

2109
01:27:32,300 --> 01:27:34,600
You can use those for that but we don't have any.

2110
01:27:34,800 --> 01:27:35,900
We only have one window.

2111
01:27:35,900 --> 01:27:38,600
So those are never going to be any different, the global variables for

2112
01:27:38,600 --> 01:27:38,700
us.

2113
01:27:38,700 --> 01:27:39,900
They're just Global variables.

2114
01:27:40,300 --> 01:27:41,000
There.

2115
01:27:41,000 --> 01:27:44,700
They give you no benefit to your control flow at that point.

2116
01:27:47,900 --> 01:27:48,900
Let's see.

2117
01:27:49,600 --> 01:27:52,500
Do you have any approximate timeline on going back to make videos

2118
01:27:52,500 --> 01:27:52,800
teaching?

2119
01:27:52,800 --> 01:27:56,000
See we and I include myself.

2120
01:27:56,000 --> 01:27:57,800
Are getting more beginners asking for tutorials.

2121
01:27:58,100 --> 01:27:59,200
Love your exhalation to teach yourself.

2122
01:27:59,200 --> 01:28:03,900
I don't have a timeline for it right now because well, honestly, I

2123
01:28:03,900 --> 01:28:06,900
don't know if my voice can handle any more streams than I already do.

2124
01:28:07,000 --> 01:28:09,800
It's hard to talk for an hour and a half every night or more.

2125
01:28:10,600 --> 01:28:11,700
And I've been sick lately.

2126
01:28:11,700 --> 01:28:14,600
So I'm not sure if, when I'll get to those it is something that I'd

2127
01:28:14,600 --> 01:28:16,200
like to do, but I don't

2128
01:28:16,400 --> 01:28:17,600
Timeline for it yet.

2129
01:28:19,200 --> 01:28:22,200
A lot of people have been asking if they can donate money to the

2130
01:28:22,200 --> 01:28:23,600
stream which was really nice.

2131
01:28:23,800 --> 01:28:26,900
A nice thing, you know above and beyond, obviously if you like the

2132
01:28:26,900 --> 01:28:29,500
stream you can always pre-order the game, but they were like I want to

2133
01:28:29,500 --> 01:28:31,800
give more than $15 which was extremely generous of them.

2134
01:28:32,200 --> 01:28:34,700
And so, I've been trying to think of something that I can do like a

2135
01:28:34,700 --> 01:28:36,700
Kickstarter or something that would allow people who want to

2136
01:28:36,700 --> 01:28:39,300
contribute to contribute something that I would then do.

2137
01:28:39,300 --> 01:28:41,200
So maybe I'll do that in the future.

2138
01:28:41,200 --> 01:28:44,300
I'll do like, okay, you know, if we raise x amount of dollars, I'll

2139
01:28:44,300 --> 01:28:46,000
just take a week off of work and

2140
01:28:46,300 --> 01:28:48,300
Do a set of her teaching materials or something like that.

2141
01:28:48,300 --> 01:28:50,600
I've been thinking about what would be good to do there.

2142
01:28:50,600 --> 01:28:54,000
And if I come up with some good ideas and maybe maybe doing a good set

2143
01:28:54,000 --> 01:28:56,400
of see tutorials would be one of those.

2144
01:28:56,400 --> 01:28:57,000
I don't know.

2145
01:28:57,600 --> 01:29:01,500
Yeah, so there already is the sort of rudimentary one, but it's not

2146
01:29:01,500 --> 01:29:04,300
complete enough because it go, it's only 5 days, which is not enough

2147
01:29:04,300 --> 01:29:06,000
time to really learn.

2148
01:29:06,000 --> 01:29:09,500
See if you didn't know programming before, it's just not enough, but

2149
01:29:09,500 --> 01:29:11,100
that's really all that exists at the moment.

2150
01:29:16,400 --> 01:29:17,400
Do we have a p.o.

2151
01:29:17,400 --> 01:29:17,700
Box?

2152
01:29:17,700 --> 01:29:19,000
So we send banana cakes?

2153
01:29:19,300 --> 01:29:20,000
I do have a p.o.

2154
01:29:20,000 --> 01:29:22,300
Box but you do not need to send me banana cakes.

2155
01:29:22,800 --> 01:29:24,000
It's really not necessary.

2156
01:29:24,000 --> 01:29:25,800
I don't know if I even like, banana cakes.

2157
01:29:26,600 --> 01:29:28,500
I'm sure it's some banana cake is good.

2158
01:29:28,800 --> 01:29:30,200
But I don't know if I like it.

2159
01:29:30,300 --> 01:29:31,000
It's hard to say.

2160
01:29:31,000 --> 01:29:33,600
I do like banana, sometimes will say that.

2161
01:29:34,700 --> 01:29:37,200
I think that's all the questions and we are just about out of time.

2162
01:29:37,200 --> 01:29:38,200
So that is good.

2163
01:29:38,200 --> 01:29:39,300
We are right on time.

2164
01:29:39,700 --> 01:29:40,500
Thank you so much.

2165
01:29:40,500 --> 01:29:42,800
Everyone for joining me for another episode of handmade hero.

2166
01:29:42,800 --> 01:29:46,000
I am sorry that the internet did not stay up long enough to get a full

2167
01:29:46,000 --> 01:29:46,900
stream out there.

2168
01:29:47,200 --> 01:29:49,800
But the entire thing was recorded and I will upload it to YouTube.

2169
01:29:49,800 --> 01:29:52,700
So if you would like to catch it, you can go to episode guide right

2170
01:29:52,700 --> 01:29:53,200
here.

2171
01:29:53,200 --> 01:29:58,500
In fact, and it will show up right down here in this day, 16 slot

2172
01:29:58,500 --> 01:29:59,300
where it is waiting.

2173
01:29:59,400 --> 01:29:59,800
You can

2174
01:30:00,000 --> 01:30:04,900
So from handmade here, if you follow him made here on YouTube, that's

2175
01:30:04,900 --> 01:30:05,400
up there.

2176
01:30:05,800 --> 01:30:08,700
The handmade here at our website, has a link to the video archive.

2177
01:30:08,900 --> 01:30:10,800
That's got everything, so that will come up on here.

2178
01:30:10,800 --> 01:30:12,000
And that should be up.

2179
01:30:12,200 --> 01:30:16,100
It'll be up in low res, right away, but low-res is hard to use because

2180
01:30:16,100 --> 01:30:17,800
when you're trying to read text low-res is no good.

2181
01:30:17,800 --> 01:30:20,700
So you gotta give you to those those hamster servers.

2182
01:30:20,700 --> 01:30:23,400
The hamsters are running over there at YouTube to power those servers,

2183
01:30:23,400 --> 01:30:26,400
but they take a while to churn through and actually compress the

2184
01:30:26,400 --> 01:30:29,000
high-res version of the of this stream.

2185
01:30:29,600 --> 01:30:29,800
So

2186
01:30:30,000 --> 01:30:33,700
Basically, you got to wait, typically, you know, 12 hours or something

2187
01:30:33,700 --> 01:30:34,200
after it.

2188
01:30:34,200 --> 01:30:37,200
Airs before they actually have the 1080P and 720p versions which are

2189
01:30:37,200 --> 01:30:38,400
the ones you're going to want to watch.

2190
01:30:39,000 --> 01:30:41,800
So, thank you so much for joining us.

2191
01:30:41,900 --> 01:30:44,000
I hope to see you again tomorrow here at 8 p.m.

2192
01:30:44,100 --> 01:30:46,300
Pacific Standard time and hopefully the internet will stay up for the

2193
01:30:46,300 --> 01:30:50,600
entire time and we will go through and Street, you know, get our input

2194
01:30:50,600 --> 01:30:52,000
situation straightened out.

2195
01:30:52,200 --> 01:30:54,800
And then from there we'll be going to straightening out the frame

2196
01:30:54,800 --> 01:30:59,300
timing and from there will probably be at the point where we're kind

2197
01:30:59,300 --> 01:30:59,800
of getting off with.

2198
01:31:00,100 --> 01:31:02,900
So this this is going to be our last week, I think of dealing with

2199
01:31:02,900 --> 01:31:04,300
Windows, and it will be all game.

2200
01:31:04,300 --> 01:31:06,600
So it just in time for Christmas, argh.

2201
01:31:06,600 --> 01:31:10,500
Our Christmas present will be, we're into all our own code, which

2202
01:31:10,500 --> 01:31:11,800
believe me is a beautiful thing.

2203
01:31:11,900 --> 01:31:14,500
There's nothing I like more than being in charge of every last little

2204
01:31:14,500 --> 01:31:16,700
thing and not having to rely on Windows for anything.

2205
01:31:17,100 --> 01:31:21,200
So as soon as we get out of that it's definitely a plus in my mind.

2206
01:31:21,300 --> 01:31:23,900
So I'm looking forward to that and I hope you are too hope to see you

2207
01:31:23,900 --> 01:31:24,800
here tomorrow at 8:00 p.m.

2208
01:31:24,800 --> 01:31:29,200
PST on Twitch again and yet for those of you who couldn't catch the

2209
01:31:29,200 --> 01:31:29,800
stream because of the

2210
01:31:29,900 --> 01:31:30,700
Pattern it today.

2211
01:31:30,900 --> 01:31:32,000
Just check it out on YouTube.

2212
01:31:32,100 --> 01:31:34,600
Thanks so much for joining me, everyone and I will catch you tomorrow.

