1
00:00:03,100 --> 00:00:05,100
Hello everyone and welcome to handmade hero.

2
00:00:05,100 --> 00:00:07,800
The show we could complete game live on stream.

3
00:00:08,200 --> 00:00:13,800
We have finished doing an update of our game to 3D there is one issue

4
00:00:13,800 --> 00:00:16,900
that we have to address that people brought up who are ported to other

5
00:00:16,900 --> 00:00:17,500
platforms.

6
00:00:17,900 --> 00:00:19,400
One of the things that, of course, is true.

7
00:00:19,400 --> 00:00:24,800
Now that we actually do use the 3D card if you have been following

8
00:00:24,800 --> 00:00:27,900
along, we did an upgrade that allows us to use like a full 3d Pipeline

9
00:00:27,900 --> 00:00:31,000
with Z buffer and everything instead of doing software rendering or

10
00:00:31,000 --> 00:00:32,400
very light opengl

11
00:00:34,000 --> 00:00:37,800
Like we were before I kind of decided to go a little bit more real 3D

12
00:00:37,800 --> 00:00:40,800
with it, just felt like the right thing to do based on what I wanted

13
00:00:40,800 --> 00:00:41,800
to have happening.

14
00:00:41,800 --> 00:00:45,100
So we did that upgrade and it went actually very smoothly.

15
00:00:45,600 --> 00:00:49,900
However one of the things that we did try to do last week was to

16
00:00:49,900 --> 00:00:53,300
transition from any sort of Legacy opengl, which is what we had

17
00:00:53,300 --> 00:00:56,200
written it in originally, just to show kind of the simple version.

18
00:00:56,200 --> 00:01:00,200
We Now are up to sort of modern fairly modern usage of opengl where

19
00:01:00,700 --> 00:01:02,400
we're using shaders, and all that sort of stuff.

20
00:01:02,400 --> 00:01:02,800
So,

21
00:01:03,600 --> 00:01:07,700
At this point, we turned off core compat like non-core compatibility

22
00:01:08,400 --> 00:01:10,300
and we have the driver issue errors.

23
00:01:10,600 --> 00:01:13,300
If it can any time that we do something that's outside of the core

24
00:01:13,300 --> 00:01:13,600
profile.

25
00:01:13,600 --> 00:01:17,300
Opengl opengl, of course, is a very old API and it's been updated many

26
00:01:17,300 --> 00:01:18,000
many times.

27
00:01:18,000 --> 00:01:21,000
And one of the things that they do during those updates is they allow

28
00:01:21,000 --> 00:01:23,900
driver manufacturers to support any old versions of the API that they

29
00:01:23,900 --> 00:01:24,200
want.

30
00:01:24,200 --> 00:01:26,300
Now, they don't have to, but they can.

31
00:01:26,600 --> 00:01:29,200
And so what happens with opengl when you open it is you're able to

32
00:01:29,200 --> 00:01:33,100
specify to the driver whether you want the driver to give you access

33
00:01:33,100 --> 00:01:33,200
to.

34
00:01:33,300 --> 00:01:36,300
Legacy features or whether you would like it to give you errors when

35
00:01:36,300 --> 00:01:36,800
you use them.

36
00:01:36,800 --> 00:01:39,200
Now, the driver is under no obligation to actually support those

37
00:01:39,200 --> 00:01:42,600
Legacy features, but a lot of drivers do support the Legacy features

38
00:01:42,600 --> 00:01:46,800
which what that means is typically on opengl you can get away with

39
00:01:46,800 --> 00:01:50,700
using some pretty old stuff, and the driver will just work.

40
00:01:50,800 --> 00:01:54,300
Now, what we want to do is move away from all that, because it just

41
00:01:54,300 --> 00:01:57,900
helps to turn on core compatibility to ensure that you're using only

42
00:01:57,900 --> 00:01:59,300
the modern calls to the API.

43
00:01:59,800 --> 00:02:03,000
Basically, just to reduce the amount of variability that you've got.

44
00:02:03,300 --> 00:02:05,600
In terms of being able to port to different platforms, run on

45
00:02:05,600 --> 00:02:06,500
different graphics cards.

46
00:02:06,600 --> 00:02:08,900
If you've got a really wide support surface there, where you're

47
00:02:08,900 --> 00:02:12,400
calling stuff from that was designed in 1995 and stuff that was

48
00:02:12,400 --> 00:02:13,700
designed in 2014.

49
00:02:14,000 --> 00:02:17,800
That's a pretty big spread for drivers to test and to get working at.

50
00:02:17,800 --> 00:02:21,000
So you kind of want to stay pretty narrow and try to reduce your API

51
00:02:21,000 --> 00:02:24,900
usage down to the things which are only absolutely necessary for you

52
00:02:25,300 --> 00:02:25,900
to use.

53
00:02:25,900 --> 00:02:27,300
And so, that's what we did.

54
00:02:27,300 --> 00:02:32,200
Now, one of the downsides of that is, it does mean that any problems

55
00:02:32,400 --> 00:02:33,100
on this graphic,

56
00:02:33,300 --> 00:02:36,600
Scarred that don't get reported as errors because the AMD driver just

57
00:02:36,600 --> 00:02:37,900
doesn't have a problem with them.

58
00:02:38,500 --> 00:02:42,200
If they are not in the core profile, we may just not know, right?

59
00:02:42,400 --> 00:02:44,800
Because we don't really have any good foolproof way.

60
00:02:44,800 --> 00:02:47,900
There's no opengl lint program really that will go through and check

61
00:02:47,900 --> 00:02:50,200
for those old calls or maybe there is an I don't know about it but

62
00:02:50,200 --> 00:02:52,700
point being we don't have one at the moment.

63
00:02:52,700 --> 00:02:56,300
So all we know is what the driver reports as errors but that doesn't

64
00:02:56,300 --> 00:02:58,900
mean that some other driver that's more Vigilant or Vigilant about a

65
00:02:58,900 --> 00:02:59,800
different set of things.

66
00:03:00,000 --> 00:03:01,800
Couldn't report errors about things.

67
00:03:01,800 --> 00:03:04,400
We're doing that aren't in the core profile but the AMD driver.

68
00:03:04,400 --> 00:03:07,700
Just doesn't notice our in the core profile because no one had an

69
00:03:07,700 --> 00:03:09,600
error checking for them in the AMD driver.

70
00:03:11,600 --> 00:03:15,100
And so we do have one place that other folks when they're reporting to

71
00:03:15,100 --> 00:03:15,800
other system.

72
00:03:15,800 --> 00:03:17,700
Because we've got a bunch of people use the handmade here of code base

73
00:03:17,700 --> 00:03:18,800
and they pour it to other things.

74
00:03:19,800 --> 00:03:21,400
They ported to Linux support to Mac.

75
00:03:21,900 --> 00:03:23,400
They do their own products on it, whatever.

76
00:03:23,400 --> 00:03:26,700
So typically, I do get feedback from people when there is something

77
00:03:26,700 --> 00:03:29,800
that another platform can catch either llvm compiler, catch.

78
00:03:30,000 --> 00:03:30,300
Something.

79
00:03:30,300 --> 00:03:32,800
And maybe it's not even an error could just be compatibility

80
00:03:32,800 --> 00:03:33,800
difference, for example.

81
00:03:34,400 --> 00:03:36,800
But, you know things that get caught from different compilers

82
00:03:36,800 --> 00:03:40,600
different apis, different platforms, whatever one place.

83
00:03:40,600 --> 00:03:43,800
We are still using something that I guess, got deprecated in the core

84
00:03:43,800 --> 00:03:46,200
profile, and that is extension enumeration.

85
00:03:46,500 --> 00:03:51,200
You're no longer supposed to do extension enumeration via the GL gets

86
00:03:51,200 --> 00:03:56,900
drink, all your supposed to get an index extension string, and we can

87
00:03:56,900 --> 00:03:57,900
take a look at that today.

88
00:03:57,900 --> 00:03:59,900
So, I'd like to just do that really quickly before we

89
00:04:00,000 --> 00:04:00,600
Started.

90
00:04:03,000 --> 00:04:06,200
Mostly I'll just be blowing my nose all day, but in Between blowing my

91
00:04:06,200 --> 00:04:07,200
nose, what I'd like to do.

92
00:04:11,000 --> 00:04:14,900
Is fix that because that just helps people who are running handmade

93
00:04:14,900 --> 00:04:15,400
hiroko.

94
00:04:15,400 --> 00:04:19,000
Bases elsewhere to stay up to date and not have to worry too much.

95
00:04:19,000 --> 00:04:22,900
So I'm going to go ahead and jump over there to the handmade hero

96
00:04:22,900 --> 00:04:26,100
GitHub where we can take a look at that.

97
00:04:26,200 --> 00:04:28,100
So here's our current handmade here at GitHub.

98
00:04:28,300 --> 00:04:30,700
You can kind of see, we've got some stuff mentioned in here.

99
00:04:31,300 --> 00:04:34,000
We've got this GL, get strange looks tensions fails with Jill and

100
00:04:34,000 --> 00:04:34,600
valid in them.

101
00:04:34,600 --> 00:04:36,200
That's the one that I'm talking about right here.

102
00:04:36,800 --> 00:04:38,000
So I'm going to jump over here.

103
00:04:39,200 --> 00:04:41,100
And you can see here, basically.

104
00:04:41,100 --> 00:04:43,600
It's just the case that this, this is how we were checking for

105
00:04:43,600 --> 00:04:47,900
extensions before and that check that you'll get string is just not

106
00:04:48,300 --> 00:04:49,200
supported anymore.

107
00:04:49,700 --> 00:04:52,900
And this is the explanation right here, actually.

108
00:04:53,100 --> 00:04:56,600
These other folks who commented they are actually listing the correct

109
00:04:56,600 --> 00:04:57,500
way to do it as well.

110
00:04:57,700 --> 00:05:01,900
They basically just upgraded the API from returning, the extensions in

111
00:05:01,900 --> 00:05:07,600
one big, huge Clump to being able to get individual Extensions by

112
00:05:07,600 --> 00:05:08,700
asking how many extensions there.

113
00:05:08,900 --> 00:05:11,700
And then asking for each extension in turn, right?

114
00:05:12,100 --> 00:05:14,500
So it's pretty similar, there's not a lot of difference here.

115
00:05:14,500 --> 00:05:15,600
Will be very easy for us to Port.

116
00:05:15,600 --> 00:05:18,400
So I just like to support that because again, then these folks here,

117
00:05:18,400 --> 00:05:23,000
who may be compiling on different platforms, won't have to worry about

118
00:05:23,000 --> 00:05:25,900
this compatibility problem because I think right now, we're pretty

119
00:05:25,900 --> 00:05:26,900
compact clean.

120
00:05:26,900 --> 00:05:28,900
People can compile all over the place and we just work

121
00:05:30,700 --> 00:05:33,500
It's worth keeping that going, you know, because it's not a whole lot

122
00:05:33,500 --> 00:05:34,400
of work for us.

123
00:05:35,100 --> 00:05:38,300
After we do that, the rest of the day we're going to spend looking at

124
00:05:38,400 --> 00:05:41,700
additional features in the renderer that we're going to need just to

125
00:05:41,700 --> 00:05:44,500
replace some features that we have and that we don't have any more

126
00:05:44,500 --> 00:05:48,600
such as the alpha fading of things above the player or stuff like

127
00:05:48,600 --> 00:05:49,100
that.

128
00:05:49,100 --> 00:05:51,300
I want to go ahead and show you how to do some of those things.

129
00:05:51,300 --> 00:05:54,200
Now that we're in a modern opengl context, and we already have

130
00:05:54,200 --> 00:05:58,000
shaders, I'm just going to kind of give you some examples of how you

131
00:05:58,000 --> 00:05:59,400
can leverage that.

132
00:06:00,000 --> 00:06:03,100
Sort of Shader architecture to do some of the effects that we were

133
00:06:03,100 --> 00:06:06,200
urging for, in perhaps different ways and, and things like this.

134
00:06:06,200 --> 00:06:07,500
So, we'll just start playing with that.

135
00:06:07,500 --> 00:06:11,600
And that this weekend will mostly be about how to do kind of special

136
00:06:11,600 --> 00:06:14,600
effects if you will inside the shaders that are things that we might

137
00:06:14,600 --> 00:06:15,000
want to do.

138
00:06:15,200 --> 00:06:18,500
Before they seen, we've already done one of them, which is the

139
00:06:18,800 --> 00:06:21,600
fudging, the Z value, so that we get different occlusion than you

140
00:06:21,600 --> 00:06:22,500
would expect.

141
00:06:22,700 --> 00:06:25,000
And so really what we're going to be doing is looking at some more

142
00:06:25,000 --> 00:06:26,800
techniques that are similar to that.

143
00:06:28,000 --> 00:06:32,200
Alright, so let's go ahead and today is day 374.

144
00:06:32,200 --> 00:06:35,700
Let's go ahead and just quickly address that GL strings issue.

145
00:06:36,400 --> 00:06:39,000
So that's again, just going to be something that happens in the

146
00:06:39,000 --> 00:06:40,200
extension enumeration.

147
00:06:40,800 --> 00:06:44,500
So if we take a look inside our open gel layer, we've got that GL, get

148
00:06:44,500 --> 00:06:47,500
string call, that's the only place that we're going to be calling to

149
00:06:47,500 --> 00:06:48,000
yell getstring.

150
00:06:48,000 --> 00:06:51,800
You can kind of see it's this part where we just try to get some

151
00:06:51,800 --> 00:06:53,100
information for the driver.

152
00:06:53,400 --> 00:06:56,900
Now, as far as I know, there's nothing wrong with calling GL, get

153
00:06:56,900 --> 00:06:57,300
string.

154
00:06:57,900 --> 00:07:00,100
GL vendor Jill render and Jill version.

155
00:07:00,300 --> 00:07:04,400
I don't think anyway and I didn't see anyone report that so I'm

156
00:07:04,400 --> 00:07:07,900
assuming that that it's still the correct way to get those particular

157
00:07:07,900 --> 00:07:08,400
things.

158
00:07:08,400 --> 00:07:09,800
Oops, why did I delete that?

159
00:07:09,900 --> 00:07:12,100
I'm meant to yeah.

160
00:07:13,700 --> 00:07:14,100
There we go.

161
00:07:16,400 --> 00:07:20,200
So I'm assuming, since you'll notice here, they're only talking about.

162
00:07:20,200 --> 00:07:27,100
This particular, this particular way of calling Geo getstring, not GL,

163
00:07:27,100 --> 00:07:29,400
get string as a whole.

164
00:07:29,500 --> 00:07:33,500
So I'm assuming that all of these can actually stay, and it's really

165
00:07:33,500 --> 00:07:34,100
just this.

166
00:07:34,100 --> 00:07:35,000
That's the problem.

167
00:07:35,600 --> 00:07:38,300
And what's going to happen here is basically, we were previously

168
00:07:38,300 --> 00:07:40,600
parsing it into individual strings ourselves.

169
00:07:40,800 --> 00:07:44,800
And so, what's now happening is, we should be able to just use GL, get

170
00:07:44,800 --> 00:07:45,500
integer V.

171
00:07:46,600 --> 00:07:52,200
And she'll get string I to basically get those out one by one.

172
00:07:52,300 --> 00:07:56,000
So that we can actually not do the parsing anymore either, which is

173
00:07:56,000 --> 00:07:57,100
presumably good.

174
00:07:57,300 --> 00:08:00,800
So, you know, that's pretty much a win for us as far as I can tell.

175
00:08:00,800 --> 00:08:02,500
Anyway, so it should be fine.

176
00:08:02,800 --> 00:08:06,400
The only question is, which of those functions are supported and which

177
00:08:06,400 --> 00:08:07,500
have to be queried.

178
00:08:07,600 --> 00:08:11,000
So the problem I suppose, since we're always, since we're always

179
00:08:11,000 --> 00:08:12,700
asking for a GL 3.0 context.

180
00:08:12,700 --> 00:08:15,400
Now, I don't think we could really run without one we can

181
00:08:15,600 --> 00:08:20,800
Probably remove anything that was previously sort of doing stuff that,

182
00:08:22,100 --> 00:08:24,800
you know, was checking that we can.

183
00:08:24,800 --> 00:08:28,500
Pretty much remove any paths that were necessary only on things that

184
00:08:28,500 --> 00:08:30,000
were before opengl 3.0 X

185
00:08:32,400 --> 00:08:34,799
Because we're just not going to probably be able to run on those

186
00:08:34,799 --> 00:08:35,700
anymore, right?

187
00:08:35,700 --> 00:08:39,299
Because any platform it's before up until three point x probably won't

188
00:08:39,299 --> 00:08:42,400
have the Shader support that we need in order to run the game.

189
00:08:42,600 --> 00:08:45,900
And so, we're just going to have to require an opengl three-point X

190
00:08:45,900 --> 00:08:47,200
context or opengl ES.

191
00:08:47,200 --> 00:08:48,600
I think that's 2.0, Maybe

192
00:08:49,700 --> 00:08:53,900
I don't really know whether it's 2.0, 3.0 opengl es levels but, you

193
00:08:53,900 --> 00:08:57,100
know, basically, you need to be sort of a, you know, at least a

194
00:08:57,100 --> 00:08:58,200
10-year old Hardware.

195
00:08:58,200 --> 00:08:59,800
You can't be 20 year old hardware and

196
00:09:00,500 --> 00:09:03,800
This game anymore, which doesn't seem like a bad idea since nobody's

197
00:09:04,300 --> 00:09:05,000
doing that.

198
00:09:05,700 --> 00:09:08,600
So all right, if we come through here, you can see this result dot

199
00:09:08,600 --> 00:09:10,900
extensions equals GL getstring extensions.

200
00:09:11,200 --> 00:09:13,700
What we need to do is sort of stopped having this like that kind of

201
00:09:13,700 --> 00:09:17,500
needs to go away, and I don't know if anyone was really looking at

202
00:09:17,500 --> 00:09:19,800
that besides us, so I think it's fine.

203
00:09:20,000 --> 00:09:23,300
So we can pretty much just not worry about that part anymore.

204
00:09:23,500 --> 00:09:26,500
So what we really need to do here is get an extension count, right?

205
00:09:26,500 --> 00:09:29,700
We need to find out how many extensions we actually have, and

206
00:09:30,000 --> 00:09:35,300
Again, that was a GL, get integer V call, just a generic call to the

207
00:09:35,500 --> 00:09:35,900
GL.

208
00:09:35,900 --> 00:09:39,500
Like give me a number command and we're going to pass GL extension

209
00:09:39,500 --> 00:09:43,200
count, I believe is what their, sorry not extensions, right.

210
00:09:43,900 --> 00:09:46,400
And so we're going to need to find that because that's a new.

211
00:09:46,500 --> 00:09:47,300
That's a new enum.

212
00:09:47,300 --> 00:09:49,900
So we're gonna have to grab of your arm but we're using existing

213
00:09:49,900 --> 00:09:50,300
function.

214
00:09:50,300 --> 00:09:54,700
I don't believe you'll get integer, V has is anything we need to query

215
00:09:54,700 --> 00:09:56,700
because that's a function that existed in corporate real.

216
00:09:56,700 --> 00:09:59,800
It's just the enum, we're passing to it that has

217
00:10:00,000 --> 00:10:00,700
Changed.

218
00:10:01,000 --> 00:10:01,800
So in theory.

219
00:10:01,800 --> 00:10:04,700
Oops, I accidentally hit the page up key in theory.

220
00:10:04,700 --> 00:10:07,700
Now, we can just ask the extension count and then we can just go

221
00:10:07,700 --> 00:10:09,700
through the extension index here.

222
00:10:09,700 --> 00:10:13,900
Now, she'll get into Jervey, I think requires us to pass the pointer

223
00:10:13,900 --> 00:10:14,800
where it's returned.

224
00:10:14,900 --> 00:10:18,200
So although this would be handy, I think that's not actually the

225
00:10:18,200 --> 00:10:19,100
phrasing of it.

226
00:10:19,500 --> 00:10:21,200
It actually looks like this.

227
00:10:21,200 --> 00:10:21,900
I believe,

228
00:10:23,800 --> 00:10:29,700
And this is probably a CG CG lent or whatever, sorry IG L NT, and I

229
00:10:29,700 --> 00:10:31,400
don't know, but we'll double-check in the docks.

230
00:10:31,900 --> 00:10:34,700
So once we get that, we're going to have to iterate over it with the

231
00:10:34,700 --> 00:10:37,200
extension index, we're going to have to go through all of the ones

232
00:10:37,200 --> 00:10:41,000
that it says, that it has exactly as you would expect in our own code.

233
00:10:41,100 --> 00:10:42,600
Nothing particularly weird going on here.

234
00:10:42,600 --> 00:10:46,100
So there's, you know, the loop that we do and then in here, when we're

235
00:10:46,100 --> 00:10:50,600
doing our strings are equal bit, and we're passing this, like count at

236
00:10:50,600 --> 00:10:52,900
blah blah, blah, we don't really need to do.

237
00:10:53,100 --> 00:10:55,900
That particular anymore because I think we just get the string now.

238
00:10:56,600 --> 00:11:00,000
So let's take a look at get string I and just verify what?

239
00:11:00,000 --> 00:11:01,100
Because that's a new call for us.

240
00:11:01,100 --> 00:11:02,400
And we're plugging up to query it.

241
00:11:02,500 --> 00:11:04,900
So we're going to have to look at the spec for that, but it

242
00:11:04,900 --> 00:11:06,500
presumably, it's very straightforward.

243
00:11:07,600 --> 00:11:08,300
Let's take a look.

244
00:11:09,300 --> 00:11:12,000
So here it is, you can see, we passed the enum, which is the name and

245
00:11:12,000 --> 00:11:14,400
the index which is which one of them we want.

246
00:11:15,000 --> 00:11:18,200
And we could just switch to using this entirely as you can see.

247
00:11:19,200 --> 00:11:22,600
So you know vendor renderer version shading language version.

248
00:11:23,100 --> 00:11:26,200
We could we could ask for all of those injeel, getstring.

249
00:11:26,200 --> 00:11:30,700
I and then 0 would presumably be what we would pass for all of those

250
00:11:31,300 --> 00:11:35,800
and the the only one that would would do more of them would be, you

251
00:11:35,800 --> 00:11:37,200
know, one, two, three, four in terms.

252
00:11:37,400 --> 00:11:38,400
Of the extensions.

253
00:11:38,400 --> 00:11:40,500
The rest of these are only one thing, right?

254
00:11:41,600 --> 00:11:46,400
So here, we've got were expecting to get a string pointer back.

255
00:11:46,400 --> 00:11:47,000
Right.

256
00:11:47,300 --> 00:11:50,800
What's interesting about this is its passing back an unsigned byte,

257
00:11:51,500 --> 00:11:54,000
which doesn't make a whole lot of sense to me to be honest.

258
00:11:54,600 --> 00:11:58,200
Because I guess I don't know why you would necessarily can that.

259
00:11:58,200 --> 00:11:59,800
That's not a care star, really?

260
00:12:00,200 --> 00:12:02,900
Even though the secondly, is a care star, so I guess that's just maybe

261
00:12:03,100 --> 00:12:06,300
to indicate that, it maybe could be utf-8 or something.

262
00:12:06,700 --> 00:12:07,600
I don't really know.

263
00:12:08,600 --> 00:12:11,800
They don't really say here as far as I can tell.

264
00:12:13,200 --> 00:12:15,200
So yeah, I'm not sure.

265
00:12:15,600 --> 00:12:16,800
But either way, it doesn't really matter.

266
00:12:16,800 --> 00:12:20,900
As long as we can do something relatively reasonable here, we should

267
00:12:20,900 --> 00:12:21,500
be okay.

268
00:12:22,700 --> 00:12:26,100
All right, so we're doing our get strings here.

269
00:12:26,100 --> 00:12:28,100
Don't look like they need to change our here.

270
00:12:28,100 --> 00:12:29,900
We need our guests during I and that's going to

271
00:12:30,000 --> 00:12:33,200
I have to take the string index and then it's going to have to take

272
00:12:33,200 --> 00:12:35,400
this extensions, the specific extensions.

273
00:12:37,400 --> 00:12:38,300
Why can I not know?

274
00:12:39,500 --> 00:12:39,900
Doesn't matter.

275
00:12:39,900 --> 00:12:40,600
I can just type it in.

276
00:12:43,800 --> 00:12:47,000
So this will give me an extension and it'll numerator over each

277
00:12:47,000 --> 00:12:52,300
extension, and we can just say extension name here is going to come

278
00:12:52,300 --> 00:12:53,000
back to us.

279
00:12:53,600 --> 00:12:57,200
We don't need any of this parsing now at so really all we have to do.

280
00:12:58,000 --> 00:13:00,900
I don't know why we would need if 0 here because in theory, I guess

281
00:13:00,900 --> 00:13:02,800
that was just the end of the parsing or something like this.

282
00:13:03,200 --> 00:13:08,300
So all of this stuff can go away and pretty much all we need to do is.

283
00:13:08,500 --> 00:13:11,000
Well, you know what, this, if zero was probably just so we could make

284
00:13:11,000 --> 00:13:13,300
everything else if little bit

285
00:13:13,400 --> 00:13:15,000
Clever than we probably need to be.

286
00:13:15,100 --> 00:13:19,000
But anyway, Theory now we can just do this right in theory.

287
00:13:19,000 --> 00:13:21,000
Now we can just do a regular string compare.

288
00:13:21,300 --> 00:13:24,100
We don't need to count a string compare and we can look for our

289
00:13:24,100 --> 00:13:25,000
extensions this way.

290
00:13:26,100 --> 00:13:28,700
Now, I don't think either of these two.

291
00:13:28,700 --> 00:13:30,300
Yeah, like I said, is defined.

292
00:13:30,500 --> 00:13:32,500
So we need both of those, right?

293
00:13:32,500 --> 00:13:35,200
And, you know, we could still preserve this path but don't really know

294
00:13:35,200 --> 00:13:37,900
if we want to, but we could just say that you don't get any

295
00:13:37,900 --> 00:13:38,500
extensions.

296
00:13:38,500 --> 00:13:41,800
If those aren't if you're on an old platform.

297
00:13:41,800 --> 00:13:43,200
So we could still do this, but it

298
00:13:43,300 --> 00:13:46,300
Doesn't it's really kind of not necessary to do this to a certain

299
00:13:46,300 --> 00:13:49,200
extent because the game wouldn't really be able to run on Hardware.

300
00:13:49,200 --> 00:13:53,500
That was so old that it didn't support opengl 3 because that's just

301
00:13:53,500 --> 00:13:54,900
really, really old at this point, right?

302
00:13:54,900 --> 00:13:56,500
It's like a decade old or something like that.

303
00:13:57,400 --> 00:14:00,600
So, you know, we'll put this in here nominally, but it doesn't really

304
00:14:00,600 --> 00:14:01,800
need to be there.

305
00:14:02,600 --> 00:14:05,200
And so then all we need to do is actually have that function.

306
00:14:05,800 --> 00:14:07,300
So we're going to have to grab that again.

307
00:14:07,300 --> 00:14:08,200
Out of the core are

308
00:14:10,200 --> 00:14:11,900
So, we'll just go ahead and grab that.

309
00:14:12,100 --> 00:14:18,700
Here's the, the H file GL, extensions is one of them and none.

310
00:14:18,700 --> 00:14:20,300
Extensions is the other eye.

311
00:14:20,600 --> 00:14:23,700
Although it didn't seem to complain about Jill and I'm extensions.

312
00:14:24,400 --> 00:14:26,600
Did we put that one in here?

313
00:14:26,600 --> 00:14:27,300
No, we didn't.

314
00:14:27,300 --> 00:14:29,600
I don't know why it didn't complain about that.

315
00:14:31,100 --> 00:14:32,500
Oops, I need the whole thing.

316
00:14:37,400 --> 00:14:38,400
That's weird.

317
00:14:38,900 --> 00:14:40,400
So it is numb extensions.

318
00:14:42,500 --> 00:14:43,200
Never mind.

319
00:14:43,200 --> 00:14:44,000
That makes perfect sense.

320
00:14:44,000 --> 00:14:45,700
Because Jill extensions was still there, right?

321
00:14:45,700 --> 00:14:48,000
I was like, what I was like, why is it on component wise?

322
00:14:48,000 --> 00:14:50,300
Because extensions used to just get the whole thing.

323
00:14:50,900 --> 00:14:51,600
So, it's all good.

324
00:14:51,700 --> 00:14:51,900
All right.

325
00:14:51,900 --> 00:14:55,200
So, Gom extensions is the only one we need there and then get string.

326
00:14:55,200 --> 00:14:55,500
I

327
00:14:57,700 --> 00:14:59,700
is the other piece of the puzzle.

328
00:15:00,200 --> 00:15:03,400
So if I go ahead and grab that out, I can go ahead and put that in the

329
00:15:03,400 --> 00:15:04,700
win32 side of things.

330
00:15:05,500 --> 00:15:09,100
Here is all of the stuff that we've been adding and I'll go ahead and

331
00:15:09,100 --> 00:15:09,900
add that here.

332
00:15:10,400 --> 00:15:12,300
So, let's get rid of that.

333
00:15:12,300 --> 00:15:18,600
We've got a concert glue B, an API, she'll get string, there it is.

334
00:15:18,800 --> 00:15:22,400
I'm going to go ahead and add type to that and make it a typedef.

335
00:15:22,400 --> 00:15:23,100
There we go.

336
00:15:23,700 --> 00:15:27,300
And then again, same thing that we were doing before where we just do

337
00:15:27,300 --> 00:15:28,700
opengl Global function.

338
00:15:30,500 --> 00:15:35,100
She'll get string I and I probably should change all of these as well.

339
00:15:35,100 --> 00:15:36,400
Like we probably should just go do that.

340
00:15:36,400 --> 00:15:39,300
Just now that we have a way, a specific way that we're doing that.

341
00:15:42,500 --> 00:15:42,900
Narf.

342
00:15:45,600 --> 00:15:50,400
And so in theory now we're actually properly compiling with the the

343
00:15:50,400 --> 00:15:51,900
right way of getting the extensions.

344
00:15:52,000 --> 00:15:55,000
I don't know if that works or not cuz obviously all we did was kind of

345
00:15:55,000 --> 00:15:55,700
throw it in there.

346
00:15:55,900 --> 00:15:57,500
So I'm going to go ahead and step through it.

347
00:15:57,500 --> 00:16:00,800
I want to watch and make sure that we're still checking for these

348
00:16:00,800 --> 00:16:03,500
extensions correctly and there isn't something wonky going on.

349
00:16:04,900 --> 00:16:07,800
All right, so that's not particularly helpful right there, right?

350
00:16:08,600 --> 00:16:10,400
That didn't appear to work.

351
00:16:10,400 --> 00:16:11,700
So why not?

352
00:16:14,500 --> 00:16:20,000
So I guess the problem here is that we get the info before we may have

353
00:16:20,000 --> 00:16:21,500
gotten GL get string.

354
00:16:22,600 --> 00:16:26,000
So I think we probably need to reorganize the order in which we do

355
00:16:26,000 --> 00:16:34,000
those probably need to make sure that these guys or at least the get

356
00:16:34,000 --> 00:16:34,400
string.

357
00:16:34,400 --> 00:16:36,100
One happens first.

358
00:16:38,200 --> 00:16:38,700
All right.

359
00:16:41,600 --> 00:16:42,200
There we go.

360
00:16:43,400 --> 00:16:45,400
And so these will come back one at a time.

361
00:16:45,600 --> 00:16:47,700
And you can kind of see them coming back here, right?

362
00:16:47,700 --> 00:16:49,600
Each extension comes back one at a time.

363
00:16:49,800 --> 00:16:53,200
Now, in theory, we should be able to get all of these I think.

364
00:16:54,000 --> 00:16:57,100
And so I'm just going to double check that we actually do.

365
00:17:02,700 --> 00:17:04,000
What's going on here?

366
00:17:07,200 --> 00:17:07,599
Help.

367
00:17:09,099 --> 00:17:11,200
Wow, slow morning, huh?

368
00:17:16,800 --> 00:17:17,700
Gotta love that.

369
00:17:19,200 --> 00:17:19,400
All right.

370
00:17:19,400 --> 00:17:22,800
Anyway back to our show.

371
00:17:23,300 --> 00:17:27,000
So after we get all this stuff out and we take a look at the result

372
00:17:27,000 --> 00:17:30,400
here, we should see that we did get those extensions and we did, so

373
00:17:30,400 --> 00:17:30,800
that's good.

374
00:17:30,800 --> 00:17:33,100
I just want to make sure that we did because I know they should be

375
00:17:33,100 --> 00:17:35,900
there and so I want to make sure that we were still getting the

376
00:17:35,900 --> 00:17:37,800
strings back in a way that properly matched.

377
00:17:37,800 --> 00:17:39,200
So that looks pretty good to me.

378
00:17:39,900 --> 00:17:44,300
So we'll consider that resolved at the moment we can sort of Punt it

379
00:17:44,300 --> 00:17:48,800
back to the folks who are testing on the other platforms and

380
00:17:49,100 --> 00:17:51,400
If it works, and just let him know.

381
00:17:51,400 --> 00:17:56,100
So this should be fixed as of day 374.

382
00:17:56,100 --> 00:17:58,800
Please let me know if it isn't

383
00:18:03,900 --> 00:18:10,000
So hopefully that that should basically just comply with the way that

384
00:18:10,000 --> 00:18:14,800
they need it to happen on their platforms, and that's more compliant

385
00:18:14,800 --> 00:18:15,500
for us as well.

386
00:18:15,700 --> 00:18:18,300
Not that it matters on this particular machine but it would matter on

387
00:18:18,300 --> 00:18:20,300
other machines, potentially that we're using different drivers.

388
00:18:20,500 --> 00:18:22,500
So hopefully that's all good to go.

389
00:18:22,800 --> 00:18:28,700
All right, so that brings us back to where we were before.

390
00:18:29,200 --> 00:18:33,400
So here is our current state of the rendering and you can see that

391
00:18:33,400 --> 00:18:33,800
everything is

392
00:18:33,900 --> 00:18:34,900
Working pretty nicely.

393
00:18:35,300 --> 00:18:38,100
This is what we expect the game screen to look like roughly and again,

394
00:18:38,100 --> 00:18:40,600
we don't have the art in there yet, so we're going to put in the art,

395
00:18:41,400 --> 00:18:44,800
probably in a week or two, we'll put that in.

396
00:18:44,800 --> 00:18:49,100
Once we've sort of got the rest of running stuff, done all of this

397
00:18:49,100 --> 00:18:52,400
looks right, the Sprites are standing up properly, or Alpha levels are

398
00:18:52,400 --> 00:18:55,200
not as good as they could, because we're just, we're only using outfit

399
00:18:55,200 --> 00:18:56,100
of coverage right now.

400
00:18:56,500 --> 00:18:59,300
And we're not using second a secondary pass for things.

401
00:18:59,300 --> 00:19:03,700
Like Shadows, we could if we could do that and we may want to

402
00:19:05,500 --> 00:19:06,500
And so we need to think about that.

403
00:19:06,500 --> 00:19:09,000
As a possible thing to do, will talk about that in a second.

404
00:19:09,300 --> 00:19:12,200
Also, I think we have some work to do on this stuff.

405
00:19:12,200 --> 00:19:14,600
Just cleaning up the way that the clipping, like, I think the clipping

406
00:19:14,600 --> 00:19:16,300
regions aren't working at the moment, right?

407
00:19:16,900 --> 00:19:19,000
Yeah, you can see here like this is still broken.

408
00:19:19,500 --> 00:19:22,400
So we need to make sure our clipping regions are transforming properly

409
00:19:22,400 --> 00:19:22,900
at the moment.

410
00:19:22,900 --> 00:19:24,500
They definitely aren't doing that.

411
00:19:25,500 --> 00:19:27,900
So that's some stuff that we have to do there.

412
00:19:28,300 --> 00:19:33,100
And and finally, we've got to read redo sort of those Graphics

413
00:19:33,100 --> 00:19:33,600
effects.

414
00:19:33,900 --> 00:19:34,500
So we've got a

415
00:19:34,600 --> 00:19:37,400
No, bunch of things to just to finish up, the rendering, pour it.

416
00:19:37,400 --> 00:19:39,800
Now that all the renderings working properly, we still have more

417
00:19:39,800 --> 00:19:40,000
things.

418
00:19:40,000 --> 00:19:40,900
We might want to do,

419
00:19:42,900 --> 00:19:46,200
To get ourselves back to the feature, parity that we should be at

420
00:19:47,200 --> 00:19:50,600
compared to the old way of doing things and just with a bunch more

421
00:19:50,600 --> 00:19:54,500
goodness, like, now we've got a z-buffer to play with and a lot of

422
00:19:54,500 --> 00:19:55,500
other things that might be nice.

423
00:19:55,500 --> 00:20:03,900
Okay, I really want Medical Science to come up with a way of stopping,

424
00:20:04,400 --> 00:20:09,200
like allergies will be so nice.

425
00:20:11,900 --> 00:20:13,100
I know they're working on it.

426
00:20:14,300 --> 00:20:15,900
But I also know they haven't quite gotten there yet.

427
00:20:16,700 --> 00:20:17,000
All right.

428
00:20:17,000 --> 00:20:19,600
So the first thing that we need to do before we talk about any of this

429
00:20:19,800 --> 00:20:22,100
is we just need to put ourselves in a position where we see the

430
00:20:22,100 --> 00:20:23,800
problems that I'm talking about.

431
00:20:23,900 --> 00:20:26,400
Now obviously we could go work on the debug system but I'm kind of

432
00:20:26,400 --> 00:20:30,600
more interested right today in terms of looking at some of those

433
00:20:30,700 --> 00:20:31,200
Shader things.

434
00:20:31,200 --> 00:20:34,600
So it's want to do that first and then we'll look at the debug clean

435
00:20:34,600 --> 00:20:35,300
up the debug tomorrow.

436
00:20:35,300 --> 00:20:35,900
Perhaps

437
00:20:36,900 --> 00:20:38,200
Now, assuming you finish this stuff.

438
00:20:38,200 --> 00:20:43,000
So what I want to do here is when we're building our sort of little

439
00:20:43,000 --> 00:20:47,300
bogus test World here, just that we've been using to play around with,

440
00:20:47,300 --> 00:20:50,800
you know, we've got this sort of thing where we're doing rooms and we

441
00:20:50,800 --> 00:20:54,000
right now we're just, we're not doing any rooms that are stacked on

442
00:20:54,000 --> 00:20:54,600
top of each other.

443
00:20:54,600 --> 00:20:57,900
And what I want to do is today is look at rooms that are stacked on

444
00:20:57,900 --> 00:20:58,300
top of each other.

445
00:20:58,300 --> 00:20:59,300
So I want to switch this.

446
00:21:01,100 --> 00:21:05,000
Room generation over to actually do exactly that.

447
00:21:05,000 --> 00:21:08,400
So, in cure, right, where we've kind of got this thing, where we've

448
00:21:08,400 --> 00:21:10,700
got our door Direction, I want to just make it.

449
00:21:10,700 --> 00:21:15,900
So the door direction is like always going to be up, right?

450
00:21:16,400 --> 00:21:20,400
So basically, there's always going to be rooms essentially above, and

451
00:21:20,400 --> 00:21:21,000
below us.

452
00:21:21,200 --> 00:21:26,200
I think is what I try to do anyway, although that doesn't really look

453
00:21:26,900 --> 00:21:29,900
quite right because although those two rooms are on top,

454
00:21:30,000 --> 00:21:30,700
Of each other.

455
00:21:30,900 --> 00:21:34,900
It looks like it's still doing rooms to the side so maybe that's not

456
00:21:34,900 --> 00:21:35,800
quite enough.

457
00:21:37,700 --> 00:21:38,600
Whoops, what did I do?

458
00:21:39,300 --> 00:21:42,000
Oh, it was only doing two.

459
00:21:44,700 --> 00:21:45,900
That's that's random Choice.

460
00:21:45,900 --> 00:21:47,300
That's not what we want at all.

461
00:21:47,700 --> 00:21:48,500
I want door Direction.

462
00:21:48,500 --> 00:21:48,700
It goes.

463
00:21:48,700 --> 00:21:50,200
This is the one I actually wanted.

464
00:21:51,100 --> 00:21:52,000
That was my bad there.

465
00:21:52,000 --> 00:21:52,800
Sorry about that.

466
00:21:55,300 --> 00:21:55,900
All right.

467
00:21:56,000 --> 00:21:59,400
So now in theory, I don't actually know if this is true or not.

468
00:21:59,500 --> 00:22:01,200
Like I was saying, let me see.

469
00:22:01,200 --> 00:22:02,500
I always forget how to use this.

470
00:22:07,200 --> 00:22:08,300
How do I zoom?

471
00:22:09,700 --> 00:22:10,900
I'm going to remember how to zoom.

472
00:22:17,600 --> 00:22:18,300
What's going on here?

473
00:22:19,300 --> 00:22:20,500
What is going on here?

474
00:22:22,800 --> 00:22:25,500
I forget what I buy on to the stuff that we were using to.

475
00:22:25,500 --> 00:22:28,500
I know it rotate is but I never remember what Zoom is what is zoom

476
00:22:28,500 --> 00:22:28,900
know.

477
00:22:29,400 --> 00:22:32,500
Okay so it's Alton middle Mouse button is supposed to do.

478
00:22:32,800 --> 00:22:33,100
All right?

479
00:22:35,200 --> 00:22:35,700
There we go.

480
00:22:40,300 --> 00:22:40,800
All right.

481
00:22:42,400 --> 00:22:44,400
So that's not actually zooming.

482
00:22:44,600 --> 00:22:47,300
So we've got some n plus, there's something weird going on here.

483
00:22:48,200 --> 00:22:48,400
Yeah.

484
00:22:48,400 --> 00:22:50,900
So our Zoom does not seem to be working, but I don't actually know

485
00:22:50,900 --> 00:22:52,500
why, and we're kind of in the middle.

486
00:22:53,600 --> 00:22:54,700
Exactly what's going on here.

487
00:22:54,700 --> 00:22:55,900
This is a bit wonky.

488
00:22:57,800 --> 00:23:01,100
So I think we've got some problems with our debug camera placement.

489
00:23:02,800 --> 00:23:06,900
This does not look in case case anyone was unclear on that that does

490
00:23:06,900 --> 00:23:11,400
not look at all like a proper place to put this so I want to make sure

491
00:23:11,400 --> 00:23:13,000
that I want to see what's going on there.

492
00:23:13,000 --> 00:23:14,000
I don't really know what's going on there.

493
00:23:14,000 --> 00:23:14,600
So we'll take a look.

494
00:23:16,000 --> 00:23:23,800
Alright so here we go with our door Direction being three I guess

495
00:23:23,800 --> 00:23:28,100
during up or down know exactly what this.

496
00:23:28,100 --> 00:23:32,200
We probably at some point need to actually make this this test World

497
00:23:32,200 --> 00:23:34,800
code start to build out real world code because it just takes a while

498
00:23:34,800 --> 00:23:39,200
to deal with the sort of how ridiculously hacky this test World

499
00:23:39,200 --> 00:23:39,800
creation stuff.

500
00:23:39,800 --> 00:23:43,900
Was it was always just there so we'd have something to work with but

501
00:23:44,000 --> 00:23:45,600
we kind of always need to actually have some there.

502
00:23:45,800 --> 00:23:52,000
It's difficult to plunge it into the way that I needed to work for any

503
00:23:52,000 --> 00:23:52,600
given time.

504
00:23:53,200 --> 00:23:55,800
What I'm going to do here just to get started is I'm going to make it

505
00:23:55,800 --> 00:23:57,100
so that it only generates one

506
00:23:58,900 --> 00:23:59,800
and I want to see what's going on.

507
00:24:01,100 --> 00:24:04,500
So, there's generating just a single room, right?

508
00:24:04,800 --> 00:24:07,200
And so we're getting some weirdness here, right?

509
00:24:07,200 --> 00:24:08,900
Like, I don't know what's going on there.

510
00:24:08,900 --> 00:24:10,100
Like, we're getting some weird.

511
00:24:10,100 --> 00:24:13,300
It feels like the world's toughest game generated, like when I right

512
00:24:13,300 --> 00:24:18,500
click to switch to debug mode, I'm getting an error on that.

513
00:24:18,500 --> 00:24:22,200
So I think we just still have some problems with what is considered

514
00:24:22,200 --> 00:24:23,700
our, our

515
00:24:25,700 --> 00:24:29,500
Like where where our world region is actually doing its thing.

516
00:24:29,500 --> 00:24:32,100
I think we still got some some problems in their like it.

517
00:24:32,100 --> 00:24:35,000
That's as soon as I switch the debug camera and you know the debug

518
00:24:35,000 --> 00:24:38,100
camera really shouldn't have much to do with it but if you remember

519
00:24:38,100 --> 00:24:43,200
it's still kind of does because we use a camera projected place for

520
00:24:43,200 --> 00:24:47,200
where we're doing our world simulation which is probably not

521
00:24:47,300 --> 00:24:53,900
particularly right anymore especially when you consider that, we have

522
00:24:53,900 --> 00:24:55,300
debug camera and stuff like that in

523
00:24:55,500 --> 00:24:59,700
Are we probably need something a little more.

524
00:25:01,400 --> 00:25:02,600
Robust for a couple reasons.

525
00:25:03,100 --> 00:25:04,500
One is that right now.

526
00:25:04,500 --> 00:25:08,700
When we do, I think we do up when we do an update and render world, I

527
00:25:08,700 --> 00:25:10,500
think we do a nun project actually.

528
00:25:10,500 --> 00:25:14,500
So you can see, we do get camera Target with the render group.

529
00:25:14,500 --> 00:25:16,200
I think that just goes through, whatever.

530
00:25:16,200 --> 00:25:21,600
The last project value was, which means that we that the debug camera

531
00:25:21,600 --> 00:25:26,100
would affect where you were simulating, which we don't actually want.

532
00:25:26,100 --> 00:25:30,000
We want that to always be from the real camera, right?

533
00:25:30,400 --> 00:25:31,000
So, there's some

534
00:25:31,300 --> 00:25:34,400
Wonkiness there that we need to address.

535
00:25:34,400 --> 00:25:38,500
And so probably that has to get fixed as well at the moment.

536
00:25:38,500 --> 00:25:41,200
That definitely seems a bit weird.

537
00:25:41,300 --> 00:25:44,200
I want to see what we're getting for, the re canonicalize coordinates

538
00:25:44,200 --> 00:25:48,300
situation here, I want to see what's getting past what's the uh, okay.

539
00:25:48,300 --> 00:25:51,500
So this is just a completely invalid offset thing that's coming

540
00:25:51,500 --> 00:25:54,200
through here, so that's obviously wrong.

541
00:25:55,300 --> 00:26:00,600
And again, I think that's because our unprojected call is not quite

542
00:26:00,600 --> 00:26:04,200
correct yet or we are passing the, unprojected call something that

543
00:26:04,200 --> 00:26:05,700
can't really work properly.

544
00:26:05,900 --> 00:26:07,400
So if we take a look at the world.

545
00:26:07,400 --> 00:26:07,600
Yes.

546
00:26:07,600 --> 00:26:12,600
So there's the world camera wrecked coming back during debug and you

547
00:26:12,600 --> 00:26:14,500
can see that that's just not.

548
00:26:14,600 --> 00:26:16,300
Yeah, even remotely reasonable.

549
00:26:16,500 --> 00:26:17,300
Let's just double check.

550
00:26:17,300 --> 00:26:18,000
What's going on there?

551
00:26:18,000 --> 00:26:21,200
It may be that that's what should happen because maybe the debug

552
00:26:21,200 --> 00:26:24,300
camera is messed up or something like this, but it might also just be

553
00:26:24,300 --> 00:26:24,900
that this code is,

554
00:26:25,100 --> 00:26:25,700
Is bombed.

555
00:26:27,000 --> 00:26:27,300
All right.

556
00:26:27,300 --> 00:26:28,700
So yeah, this is nuts.

557
00:26:28,800 --> 00:26:29,300
I don't know why.

558
00:26:29,300 --> 00:26:30,800
This is e is passing an 8 here.

559
00:26:30,800 --> 00:26:33,700
That's some hard coded nonsense from the old days, so we probably want

560
00:26:33,700 --> 00:26:34,900
to just clean that out.

561
00:26:36,700 --> 00:26:39,800
Let's go ahead and take a look at what's going on in here but World

562
00:26:39,800 --> 00:26:43,800
distance from camera being eight, who knows why that was the case.

563
00:26:44,500 --> 00:26:46,200
And you can see here that's going to pass that in.

564
00:26:46,200 --> 00:26:47,500
So let's just see what happens.

565
00:26:48,000 --> 00:26:49,200
We're passing in this

566
00:26:51,400 --> 00:26:59,800
this to the unprotect.

567
00:27:00,000 --> 00:27:00,300
To.

568
00:27:01,300 --> 00:27:02,500
So there we go clip.

569
00:27:02,500 --> 00:27:08,000
See the probe ZW came out as actually exactly zero.

570
00:27:08,700 --> 00:27:11,400
So that's a problem, right?

571
00:27:11,700 --> 00:27:17,000
The probe's, ew, in this case literally coming out to exactly zero.

572
00:27:17,000 --> 00:27:21,600
I guess that's because 8 is right on, like, where the camera is or

573
00:27:21,600 --> 00:27:23,200
something that, but that doesn't make any sense.

574
00:27:23,200 --> 00:27:24,500
That shouldn't be true.

575
00:27:30,200 --> 00:27:33,000
I don't know exactly how that would be possible.

576
00:27:37,900 --> 00:27:40,800
because if this is something that's supposed to go,

577
00:27:42,700 --> 00:27:44,000
oh, you know what, though?

578
00:27:46,100 --> 00:27:50,400
Yeah, see this is just kind of broken, so we forgot to do when we did

579
00:27:50,400 --> 00:27:54,100
our own project, this world distance from cameras, e actually needs to

580
00:27:54,100 --> 00:27:57,000
be if we're going through the full projection here, this forward

581
00:27:57,000 --> 00:28:02,000
projection, this actually needs to correlate to that in a real way.

582
00:28:02,200 --> 00:28:06,900
Meaning the it can't be affected by the position of the camera and

583
00:28:06,900 --> 00:28:10,500
it's got to be a long, the cameras z-axis, right?

584
00:28:11,300 --> 00:28:12,800
Otherwise, this isn't going to work.

585
00:28:13,200 --> 00:28:15,600
So actually, this this code is

586
00:28:15,900 --> 00:28:16,900
Not correct.

587
00:28:16,900 --> 00:28:19,700
First of all it isn't a positional coordinate.

588
00:28:19,700 --> 00:28:22,700
So this this has to be 0, right?

589
00:28:23,100 --> 00:28:26,000
In order to not take up the position part.

590
00:28:26,000 --> 00:28:29,300
And second, this has to actually Point down the Z axis.

591
00:28:29,600 --> 00:28:32,500
If it doesn't Point down the Z axis, if the Z axis is pointing in a

592
00:28:32,500 --> 00:28:36,100
different direction that it's not going to work so that was just kind

593
00:28:36,100 --> 00:28:40,100
of sloppy on my part and and that's something we're going to have to

594
00:28:40,100 --> 00:28:40,400
fix.

595
00:28:40,700 --> 00:28:43,600
This is not super related to the problem you're seeing before.

596
00:28:43,600 --> 00:28:45,600
This is just again, we just finished all

597
00:28:45,700 --> 00:28:48,800
This code and we have not had a chance to really do bug and test a lot

598
00:28:48,800 --> 00:28:49,500
of it yet.

599
00:28:50,100 --> 00:28:52,600
So you know there's going to be some growing pains in here.

600
00:28:54,300 --> 00:28:57,100
All right, so first of all, what I'm trying to do here is I'm trying

601
00:28:57,100 --> 00:29:02,100
to get a z-value to figure out where in clip space.

602
00:29:02,400 --> 00:29:06,600
This far away from the camera in World distance we would be and so I'm

603
00:29:06,600 --> 00:29:09,200
passing that in and doing a forward transform on it.

604
00:29:09,800 --> 00:29:11,100
The thing is right here.

605
00:29:16,100 --> 00:29:19,900
What I need to know is I need to know what this would be, if it were

606
00:29:19,900 --> 00:29:24,000
that far along the negative Z axis, I guess, in this case, right?

607
00:29:24,500 --> 00:29:28,100
So I need to get that negative Z axis out of the camera transform and

608
00:29:28,100 --> 00:29:30,100
furthermore, I don't want to be positional.

609
00:29:30,300 --> 00:29:33,200
So one of the things you remember about homogeneous coordinates x y z

610
00:29:33,200 --> 00:29:33,700
w.

611
00:29:34,200 --> 00:29:38,600
The one here is what allows it to pick up the position.

612
00:29:38,800 --> 00:29:42,300
If I set this to 0, it will not pick up the position, right?

613
00:29:42,300 --> 00:29:45,500
Because all that W being one is what multiplied

614
00:29:45,600 --> 00:29:46,700
Each element in the Matrix.

615
00:29:46,700 --> 00:29:49,500
That was a positional element in the matrix by setting it to 0.

616
00:29:49,500 --> 00:29:53,300
I will force it to be always relative to the cameras location which is

617
00:29:53,300 --> 00:29:54,500
what I want in this case, right?

618
00:29:54,500 --> 00:29:55,700
Because it's never going to move.

619
00:29:58,500 --> 00:29:59,800
Just to underscore what that is for.

620
00:30:00,500 --> 00:30:03,900
At work may be coming to these things, who aren't super familiar with

621
00:30:03,900 --> 00:30:06,600
them if I just draw it out really quickly.

622
00:30:06,600 --> 00:30:08,000
What happens in Matrix land

623
00:30:10,200 --> 00:30:11,800
We have the upper 3x3.

624
00:30:14,000 --> 00:30:15,700
That's the rotational components, right?

625
00:30:15,700 --> 00:30:21,400
The X y&z axes and then we have the position here and then a0001 the

626
00:30:21,400 --> 00:30:22,400
bottom, right?

627
00:30:22,400 --> 00:30:24,700
This is what the camera transform currently looks like.

628
00:30:26,000 --> 00:30:28,600
And again, these are inverted since the camera transform.

629
00:30:28,600 --> 00:30:32,100
So, the x is here, the Y is here, and the Z is here.

630
00:30:32,100 --> 00:30:35,600
There there Rose, not columns, because the camera transform.

631
00:30:36,500 --> 00:30:39,300
And this position is the inverse position X.

632
00:30:39,300 --> 00:30:41,600
The are remember, this is the camera version.

633
00:30:41,600 --> 00:30:45,000
So instead of just being the location of the camera, it's actually the

634
00:30:45,000 --> 00:30:49,500
- rotated position of the camera and that was because that's what

635
00:30:49,500 --> 00:30:52,600
needs to happen in this Matrix in order to Center things around the

636
00:30:52,600 --> 00:30:56,100
camera after they've been rotated by R, which is how they will come

637
00:30:56,100 --> 00:30:57,300
through right?

638
00:30:58,100 --> 00:31:03,000
And we're multiplying by an XYZ, usually a one here, right?

639
00:31:03,100 --> 00:31:06,100
That's going to multiply this P because remember, the X y&z

640
00:31:06,300 --> 00:31:08,200
Are multiplying these in here, right?

641
00:31:08,200 --> 00:31:12,300
Because the X multiplies these positions, the why multiplies these

642
00:31:12,300 --> 00:31:15,100
Physicians and the Z multiplies, these positions.

643
00:31:15,400 --> 00:31:18,600
But that one multiplies these, right?

644
00:31:19,300 --> 00:31:22,300
And so if we change that to a zero, this is now a relevant.

645
00:31:22,300 --> 00:31:25,500
It does not matter what's in there and that's what I want in this

646
00:31:25,500 --> 00:31:26,700
case, right?

647
00:31:26,700 --> 00:31:29,200
So I want there to be a zero there because the don't want it to have

648
00:31:29,200 --> 00:31:29,900
any effect.

649
00:31:31,400 --> 00:31:35,600
So the other thing I need to do is I need to get the Z axis and so in

650
00:31:35,600 --> 00:31:39,900
order to get the z-axis out of here, I need to extract that camera Z.

651
00:31:40,100 --> 00:31:42,800
Now remember the cameras he's in the wrong place, compared to an auto

652
00:31:42,800 --> 00:31:45,500
transform, normally it would be the columns, right?

653
00:31:45,500 --> 00:31:49,200
Column X column, y column, Z for the axes of the camera.

654
00:31:49,300 --> 00:31:50,500
This is a camera transform.

655
00:31:50,500 --> 00:31:53,700
So it's meant to invert the placement of the camera.

656
00:31:53,800 --> 00:31:57,700
So the cameras Z axis is actually going to be the row here.

657
00:31:57,700 --> 00:31:58,600
It's going to be easy.

658
00:31:59,200 --> 00:32:00,700
And again I want to get that out.

659
00:32:00,900 --> 00:32:03,400
So, if I take a look at my master teens, I don't know that we have a

660
00:32:03,400 --> 00:32:06,600
get column getro call, we might looks like we do.

661
00:32:06,900 --> 00:32:10,100
And so, all I want to do here is I want to get that row out so I can

662
00:32:10,100 --> 00:32:17,000
use that row as the displacement that I'm using for my world distance

663
00:32:17,000 --> 00:32:17,500
from camera.

664
00:32:17,500 --> 00:32:21,200
See now that get roll call is going to want to get nothing zero.

665
00:32:21,200 --> 00:32:23,200
It's not the first but the second row, right?

666
00:32:23,200 --> 00:32:27,300
The two row to, it's a third row and I want to get that out of the

667
00:32:27,300 --> 00:32:28,800
camera, transform Matrix.

668
00:32:28,800 --> 00:32:30,700
So if I go through last frauds,

669
00:32:30,800 --> 00:32:31,200
Word.

670
00:32:31,200 --> 00:32:33,700
That's where that's going to come from, right?

671
00:32:35,500 --> 00:32:38,800
So, once I get that out now, I'm good to go but the problem is we have

672
00:32:38,800 --> 00:32:40,300
to think about the directionality here.

673
00:32:40,300 --> 00:32:44,500
Now, remember our camera is z pointing backwards so if I was to do it.

674
00:32:44,500 --> 00:32:48,600
Exactly like this, we would be the world distance from camera Z behind

675
00:32:48,600 --> 00:32:49,200
the camera.

676
00:32:49,400 --> 00:32:52,200
So I want to be in front of the camera because remember, the Z axis is

677
00:32:52,200 --> 00:32:56,200
pointed back towards the viewer and I want to go away from the viewer,

678
00:32:56,300 --> 00:32:58,300
so that's going to have to look like this.

679
00:32:59,200 --> 00:32:59,900
Now, let's take

680
00:33:00,000 --> 00:33:01,400
Look at loops.

681
00:33:07,200 --> 00:33:07,800
There we go.

682
00:33:08,800 --> 00:33:09,600
In this case, right?

683
00:33:09,600 --> 00:33:12,100
I'm going to have to change the doing this because since we're now

684
00:33:12,100 --> 00:33:15,100
moving in a real direction, we're not just x 0.

685
00:33:15,100 --> 00:33:16,700
Y, 0 Z, is some value.

686
00:33:16,800 --> 00:33:18,200
We're now an actual Vector.

687
00:33:18,200 --> 00:33:21,100
We're along whatever this direction is, right.

688
00:33:21,100 --> 00:33:25,000
So I have to initialize myself with a vector3 and then the 0 for the

689
00:33:25,000 --> 00:33:25,600
last Gordon.

690
00:33:26,400 --> 00:33:26,700
Okay?

691
00:33:26,700 --> 00:33:29,600
So now I'm expecting, although I don't actually know, hold on a

692
00:33:29,600 --> 00:33:30,100
second.

693
00:33:31,700 --> 00:33:35,300
Now I'm expecting when we come through here to get a more reasonable

694
00:33:35,600 --> 00:33:36,300
result here.

695
00:33:36,500 --> 00:33:39,000
This I still think we need to get rid of because we need to actually

696
00:33:39,000 --> 00:33:40,800
know how far away our Target is.

697
00:33:41,000 --> 00:33:42,600
That's a separate situation.

698
00:33:42,600 --> 00:33:46,300
So we'll take a look at that in a minute but just for the time being

699
00:33:46,300 --> 00:33:49,600
let's assume 8 is always a reasonable value to pass because it should

700
00:33:49,600 --> 00:33:50,700
be eight away from the camera.

701
00:33:50,700 --> 00:33:53,500
We should not get an invalid result from this at all.

702
00:33:53,500 --> 00:33:56,200
So let's just make sure that we're on the right track there.

703
00:33:56,800 --> 00:33:58,000
So here's our probe Z.

704
00:33:58,000 --> 00:34:00,200
Now let's take a look at what the probes he ends up being.

705
00:34:00,200 --> 00:34:00,900
It should be a

706
00:34:01,000 --> 00:34:02,200
Killer Vector.

707
00:34:02,200 --> 00:34:06,200
Now again, the camera is actually pointed directly down, so it

708
00:34:06,200 --> 00:34:09,600
actually is the correct Z here now, so that's actually fine.

709
00:34:10,699 --> 00:34:13,600
But with this zero in here, now we're going to get a real value.

710
00:34:13,600 --> 00:34:16,400
So we won't have as equal zero and our probes eval.

711
00:34:16,400 --> 00:34:17,900
You should now have a w coordinate.

712
00:34:17,900 --> 00:34:19,300
That is reasonable and it does.

713
00:34:19,300 --> 00:34:20,500
Like you can see that right there.

714
00:34:21,300 --> 00:34:22,400
And so let's take a look at our clip.

715
00:34:22,400 --> 00:34:25,800
See our clip C is one that's

716
00:34:27,100 --> 00:34:28,600
Still weird to me.

717
00:34:28,600 --> 00:34:31,000
That feels like I still have some bug in here.

718
00:34:31,000 --> 00:34:34,900
The reason that I think I still have some bug in here is just because

719
00:34:35,300 --> 00:34:40,800
a clip sea of one would be right at the near clipping plane, right?

720
00:34:42,400 --> 00:34:45,900
I'm sorry right at the far clipping plane, which doesn't make any

721
00:34:45,900 --> 00:34:47,199
sense here to me, really.

722
00:34:47,199 --> 00:34:51,400
So I think we're still a little bit wrong headed in our thinking,

723
00:34:51,800 --> 00:34:53,400
that's just my assumption here.

724
00:34:53,500 --> 00:34:54,400
I don't actually know that.

725
00:34:54,400 --> 00:34:56,699
That's true but that's seem

726
00:34:56,900 --> 00:35:01,700
Is like it to me, right?

727
00:35:01,700 --> 00:35:04,500
And I'm not sure exactly why that would have been the case either,

728
00:35:04,500 --> 00:35:06,100
because that seems like a weird clip.

729
00:35:06,100 --> 00:35:11,700
See to have in this case,

730
00:35:16,600 --> 00:35:18,600
I'm going to step through this a little bit more but I felt still

731
00:35:18,600 --> 00:35:19,800
feels a little wonky to me.

732
00:35:20,600 --> 00:35:22,900
I'm not super comfortable with that at all.

733
00:35:25,800 --> 00:35:27,700
You can see that we are getting a result out of here.

734
00:35:27,700 --> 00:35:32,800
So it's not it's not it's not mathematically degenerate like it was

735
00:35:32,800 --> 00:35:36,000
before but I still don't think that's correct because the clip.

736
00:35:36,000 --> 00:35:40,700
See value should have been something more reasonable.

737
00:35:40,900 --> 00:35:45,800
It should have been something more like in the range between negative

738
00:35:45,800 --> 00:35:46,500
1 and 1.

739
00:35:46,700 --> 00:35:49,500
It should not have been at the extreme mm because this is a very

740
00:35:49,500 --> 00:35:52,200
reasonable value of Z to be placing.

741
00:35:52,200 --> 00:35:54,800
That should just be like in the milk toast region,

742
00:35:55,500 --> 00:35:57,100
Of the clip space.

743
00:35:57,100 --> 00:35:59,500
And so I feel like there's still a little bit, something wrong there.

744
00:35:59,500 --> 00:35:59,700
We're

745
00:36:00,100 --> 00:36:01,600
Broken like we were before.

746
00:36:01,600 --> 00:36:04,300
So that's a plus, but we're not right.

747
00:36:04,900 --> 00:36:05,400
And so you can see.

748
00:36:05,400 --> 00:36:08,000
Now, at least we're not getting any of that crashing Behavior, but

749
00:36:08,000 --> 00:36:09,100
it's definitely not.

750
00:36:10,400 --> 00:36:13,600
That's definitely not what what we want to see.

751
00:36:14,000 --> 00:36:17,400
So let's just let's just take a little bit more time to kind of get in

752
00:36:17,400 --> 00:36:21,100
there because again this is exactly what we want to be doing right

753
00:36:21,100 --> 00:36:21,500
now.

754
00:36:22,000 --> 00:36:26,600
We don't want to let go further down the the path of working with

755
00:36:26,600 --> 00:36:27,500
these things before.

756
00:36:27,500 --> 00:36:29,800
We've got them a little bit more under control.

757
00:36:30,200 --> 00:36:33,400
So, I want to take a look at what's going on here with that and why

758
00:36:33,400 --> 00:36:34,200
that's happening.

759
00:36:34,800 --> 00:36:36,300
So, let's think this through a little bit.

760
00:36:36,300 --> 00:36:38,700
I want to take a look at what our probe Z value is.

761
00:36:38,700 --> 00:36:42,300
And what our camera is supposedly.

762
00:36:42,800 --> 00:36:46,600
So if you take a look at what we've got for our camera location,

763
00:37:02,000 --> 00:37:02,400
Okay.

764
00:37:03,600 --> 00:37:04,700
I think II.

765
00:37:06,500 --> 00:37:09,500
Maybe Miss Miss thought that.

766
00:37:10,000 --> 00:37:15,600
So, since I am in verse transforming this, the Z values that come

767
00:37:15,600 --> 00:37:16,900
through here

768
00:37:18,600 --> 00:37:23,700
As I do the forward, transform on them, I do want to place them.

769
00:37:26,100 --> 00:37:30,500
Back into the camera space on the way back out.

770
00:37:35,900 --> 00:37:37,700
No, but I think that should still be zero going through it.

771
00:37:37,700 --> 00:37:39,700
Well, anyway, I'm going to step through this a little more carefully.

772
00:37:39,900 --> 00:37:42,600
Hold on a second because I'm just not sure.

773
00:37:43,500 --> 00:37:46,900
And I want to look at the values and actually work them through

774
00:37:46,900 --> 00:37:48,200
properly to make sure I'm not missing.

775
00:37:48,200 --> 00:37:51,600
Because again once you get to this point, there's just a lot of math

776
00:37:51,600 --> 00:37:54,600
involved in the transforms for its it backwards and you want to make

777
00:37:54,600 --> 00:37:55,600
sure that you're not

778
00:37:57,500 --> 00:37:59,300
Doing anything stupid, right?

779
00:38:00,900 --> 00:38:05,900
Alright, so here is the probe Z value actually, I guess I don't need

780
00:38:05,900 --> 00:38:11,400
to expand its right here and so that probe Z value is an 8, which

781
00:38:11,400 --> 00:38:17,100
means that the world distance from cameras e, I'm guessing that the

782
00:38:17,100 --> 00:38:18,500
where's our transform here?

783
00:38:18,500 --> 00:38:24,400
So the camera Z being - on why slightly?

784
00:38:27,400 --> 00:38:28,600
It's this is this right?

785
00:38:32,400 --> 00:38:35,700
I feel like there should be, no, I feel like it should be pointed

786
00:38:35,700 --> 00:38:38,600
directly down but maybe that's not the case.

787
00:38:44,500 --> 00:38:46,600
Like shouldn't this Z be directly down.

788
00:38:46,600 --> 00:38:48,100
I don't know why it's rotated at all.

789
00:38:48,100 --> 00:38:50,200
That's a little bit weird to me.

790
00:38:50,700 --> 00:38:53,800
But you know, that's fine that it's slightly down.

791
00:38:54,600 --> 00:38:57,400
So the Z coordinate coming up.

792
00:38:57,400 --> 00:38:59,100
Meaning in the One Direction.

793
00:39:00,100 --> 00:39:03,700
Is pointing back towards the viewer in theory, right?

794
00:39:03,900 --> 00:39:09,300
So, our probe Z value of 8 is actually seems to me to be

795
00:39:11,500 --> 00:39:13,500
Going in the wrong direction.

796
00:39:14,700 --> 00:39:15,300
Right.

797
00:39:15,700 --> 00:39:22,000
It should have been world is to commemorate this - here, why, why was

798
00:39:22,300 --> 00:39:25,400
it should have been picking up this camera Z value.

799
00:39:26,800 --> 00:39:29,500
So I don't quite understand what happened there.

800
00:39:30,100 --> 00:39:33,800
I want to verify in fact, I guess, I don't because we have the camera

801
00:39:33,800 --> 00:39:34,700
access already.

802
00:39:34,800 --> 00:39:35,100
I guess.

803
00:39:35,100 --> 00:39:36,600
I don't need to do it this way.

804
00:39:45,500 --> 00:39:49,100
I guess the problem is this already has the projection baked into it

805
00:39:49,300 --> 00:39:52,900
so I guess I don't want to get it out of this Matrix so I suppose I

806
00:39:52,900 --> 00:39:59,000
want to just use the group z-axis is part of the problem, right?

807
00:39:59,400 --> 00:40:02,400
I'm going to go ahead and get that row so I can look at it but that

808
00:40:02,400 --> 00:40:05,100
row has built into it.

809
00:40:05,100 --> 00:40:05,400
Yeah.

810
00:40:05,400 --> 00:40:08,100
Okay, so that was dumb, that's the problem right there.

811
00:40:08,100 --> 00:40:09,300
Well that's one of the problems right there.

812
00:40:09,600 --> 00:40:12,300
So getting the row I was thinking this is the camera Matrix but it's

813
00:40:12,300 --> 00:40:14,700
not last project actually or

814
00:40:14,900 --> 00:40:18,500
He combined, it's the camera Matrix plus the projection Matrix, and I

815
00:40:18,500 --> 00:40:20,000
only wanted the camera Z.

816
00:40:20,500 --> 00:40:24,300
So what I really want is that because the other one is not the Z axis

817
00:40:24,300 --> 00:40:25,800
of the camera anymore, right?

818
00:40:25,800 --> 00:40:29,700
The last present, that's why we saved this value was for this exact

819
00:40:29,700 --> 00:40:34,400
kind of thing, all right, so that is more correct, probe Z.

820
00:40:35,500 --> 00:40:37,000
And that's what I expect to see.

821
00:40:37,300 --> 00:40:40,300
I wanted that value to appear - because that's what it should have

822
00:40:40,300 --> 00:40:40,400
been.

823
00:40:40,400 --> 00:40:42,200
And I was upset that it was positive.

824
00:40:42,200 --> 00:40:44,200
So that's why I was looking a little more deeply.

825
00:40:44,200 --> 00:40:46,200
If that, you can saw that, I was uneasy about it.

826
00:40:46,200 --> 00:40:50,000
That was making me concerned because I'm like, my intuition tells me

827
00:40:50,000 --> 00:40:52,400
that this should be positive because I mean, because you me - because

828
00:40:52,400 --> 00:40:53,600
again, pause is coming at the viewer.

829
00:40:53,600 --> 00:40:56,800
Why is it - something's wrong or I'm misunderstanding the math and

830
00:40:56,800 --> 00:40:57,600
something was wrong.

831
00:40:57,600 --> 00:41:00,800
We were looking at the wrong, we were getting the wrong value for the

832
00:41:00,800 --> 00:41:01,500
cameras, e.

833
00:41:01,800 --> 00:41:02,600
Now that that's correct.

834
00:41:02,600 --> 00:41:05,000
Let's take a look at the other parts here and see how they go.

835
00:41:05,900 --> 00:41:07,200
So let's see what our Clips is.

836
00:41:07,900 --> 00:41:09,600
So our clip C is still busted.

837
00:41:09,700 --> 00:41:12,200
So I'm still not quite there yet, right?

838
00:41:13,200 --> 00:41:16,200
I don't quite understand how we could get the same clip see in either

839
00:41:16,200 --> 00:41:22,100
case I guess that's because the W coordinate coming out of there.

840
00:41:31,900 --> 00:41:36,000
So I guess one of the problems that we do have here and this is me, I

841
00:41:36,000 --> 00:41:39,000
guess just continuing to have to make life a little more difficult

842
00:41:39,000 --> 00:41:39,400
myself.

843
00:41:39,900 --> 00:41:42,700
Now that I think about to the problem is we won't get any Z

844
00:41:42,700 --> 00:41:44,100
displacement either.

845
00:41:44,500 --> 00:41:45,900
If I set this to 0.

846
00:41:47,100 --> 00:41:51,200
So that means right because if you take a look at how we're doing the

847
00:41:51,200 --> 00:41:52,900
projection, right?

848
00:41:56,900 --> 00:41:59,800
what's actually happening in the combined Matrix is, you know,

849
00:42:00,000 --> 00:42:02,800
Got some XY modification up here.

850
00:42:03,200 --> 00:42:06,400
It doesn't matter what these are, actually, we don't care about these

851
00:42:06,400 --> 00:42:09,100
right now, but in our zero, right?

852
00:42:09,700 --> 00:42:10,700
We've got some stuff.

853
00:42:10,700 --> 00:42:15,000
We're right here and right here are two values which are both

854
00:42:15,000 --> 00:42:16,700
controlling the Z range.

855
00:42:17,100 --> 00:42:21,200
And of course this one is dependent on W being one coming in from the

856
00:42:21,200 --> 00:42:22,900
top, right?

857
00:42:23,300 --> 00:42:25,400
Because it's going to multiply that Z offset.

858
00:42:25,400 --> 00:42:28,100
So our equation for Z was a find, right?

859
00:42:28,100 --> 00:42:29,800
It requires you know, something time

860
00:42:30,000 --> 00:42:32,500
I'm Z plus d, right?

861
00:42:34,000 --> 00:42:38,000
Because there's a c into D here and so I can't set this to zero and

862
00:42:38,000 --> 00:42:42,300
still get a transform that produces the correct Z range, which is the

863
00:42:42,300 --> 00:42:43,900
whole point of this exercise.

864
00:42:44,800 --> 00:42:50,000
So it does look like I need to actually go the whole nine here which

865
00:42:50,000 --> 00:42:51,700
actually isn't that bad?

866
00:42:52,100 --> 00:42:55,700
I just set this to 1 to do a full transform and then all I have to do

867
00:42:55,700 --> 00:43:00,200
is actually just start at the cameras position and move by the Z axis,

868
00:43:00,200 --> 00:43:00,600
right?

869
00:43:00,600 --> 00:43:03,600
That does put me in the right place relative to the camera.

870
00:43:04,500 --> 00:43:08,600
So, I suppose, that is the more full way to do it and I think now,

871
00:43:08,600 --> 00:43:09,600
hopefully I get it yet.

872
00:43:09,600 --> 00:43:10,000
There we go.

873
00:43:10,000 --> 00:43:10,800
I got a better clip.

874
00:43:10,800 --> 00:43:12,600
See that's actually than range now that clip.

875
00:43:12,600 --> 00:43:15,100
See still seems weird to me that clip.

876
00:43:15,100 --> 00:43:16,500
See seems way too high.

877
00:43:17,100 --> 00:43:19,900
And so, I'm still not sure that I'm doing this correctly and I want to

878
00:43:19,900 --> 00:43:24,300
keep doing, you can see how many small bugs I had in here, just from

879
00:43:25,500 --> 00:43:26,200
looking at this.

880
00:43:26,400 --> 00:43:32,200
So, if I start at the cameras location and I move by the by this many

881
00:43:32,200 --> 00:43:33,600
units, along the cameras.

882
00:43:33,600 --> 00:43:33,800
Yeah.

883
00:43:33,900 --> 00:43:36,300
So again, I'm going opposite because I want to get away from the

884
00:43:36,300 --> 00:43:36,800
camera.

885
00:43:38,400 --> 00:43:41,800
I would expect this now to transform to a relatively small clip C

886
00:43:41,800 --> 00:43:42,400
value.

887
00:43:43,100 --> 00:43:45,000
I would not expect it to be high like that.

888
00:43:45,200 --> 00:43:48,200
I've expected to be close to the middle of the range or actually

889
00:43:48,300 --> 00:43:51,400
probably even close to the negative side of the range because we're

890
00:43:51,400 --> 00:43:53,400
just not very far from the camera.

891
00:43:53,400 --> 00:43:55,800
It is not very far compared to the far clipping plane.

892
00:43:56,200 --> 00:44:00,200
So I wouldn't expect it to be bunched up like that the fact that it is

893
00:44:00,200 --> 00:44:02,900
bunched up like that suggests to me that I still got a problem, right?

894
00:44:02,900 --> 00:44:03,600
Or that I'm thinking

895
00:44:03,900 --> 00:44:08,400
Who this situation in an incorrectly, right?

896
00:44:09,100 --> 00:44:10,600
So I'm not sure.

897
00:44:14,900 --> 00:44:17,100
I'm not sure why that would be the case, because this should be

898
00:44:17,100 --> 00:44:18,300
something close to the camera.

899
00:44:18,300 --> 00:44:21,800
It should be eight away from the camera, like, literally just move it

900
00:44:21,800 --> 00:44:24,500
away from the camera, but that doesn't appear to be.

901
00:44:24,500 --> 00:44:25,500
What's happening with the clip.

902
00:44:25,500 --> 00:44:29,100
See now I'm going to kind of go through here and just see what we end

903
00:44:29,100 --> 00:44:30,400
up getting for results.

904
00:44:32,500 --> 00:44:34,300
Because I'm not sure what we would end up getting here.

905
00:44:36,300 --> 00:44:37,200
Let's see.

906
00:44:37,300 --> 00:44:42,300
One, those are pretty reasonable things to come out with in this

907
00:44:42,300 --> 00:44:43,400
particular case.

908
00:44:43,900 --> 00:44:48,300
So it gets, it isn't quite that weird but it's just

909
00:44:56,000 --> 00:44:59,100
It's just not exactly what I would expect.

910
00:45:09,500 --> 00:45:10,400
Hmm.

911
00:45:18,100 --> 00:45:20,100
I feel like this is one where I want to actually work.

912
00:45:20,100 --> 00:45:22,100
The math out directly and see what happens.

913
00:45:25,500 --> 00:45:29,300
Because I want to understand why I'm not getting that Z value that's

914
00:45:29,300 --> 00:45:30,200
more in that range.

915
00:45:30,200 --> 00:45:33,000
And that just makes me think that something's bested here, right?

916
00:45:33,000 --> 00:45:37,000
Because that just doesn't seem like a reasonable Z range value.

917
00:45:37,000 --> 00:45:39,900
So I would have expected this value, this probes, easy.

918
00:45:40,900 --> 00:45:43,000
I would have expected that to come out differently.

919
00:45:43,200 --> 00:45:45,000
I'm also kind of interested can I come through here?

920
00:45:45,000 --> 00:45:46,400
I want to see what's going on here.

921
00:45:48,200 --> 00:45:51,800
Hmm, so we're calling this function right?

922
00:45:52,900 --> 00:46:00,000
And so you can CR Z + RW, sort of operations coming through here, they

923
00:46:00,000 --> 00:46:03,900
look pretty straightforward, so I can't say that anything looks

924
00:46:03,900 --> 00:46:12,100
particularly odd here, we've got PX X AE 0, 0, py x, AE 0, 1.

925
00:46:12,400 --> 00:46:15,100
So we're kind of going along the rows which is exactly what we would

926
00:46:15,100 --> 00:46:16,000
expect to see.

927
00:46:17,300 --> 00:46:18,000
Do the next one.

928
00:46:18,000 --> 00:46:20,800
Where one row down, down down.

929
00:46:22,800 --> 00:46:24,600
That all looks totally right to me.

930
00:46:31,100 --> 00:46:31,900
So I don't know.

931
00:46:32,100 --> 00:46:37,100
I do not understand why that's why that's doing what it's doing.

932
00:46:42,500 --> 00:46:44,000
What was what was going on there?

933
00:46:46,400 --> 00:46:48,000
Hold on one test.

934
00:46:48,000 --> 00:46:49,000
A hot second.

935
00:46:52,500 --> 00:46:56,600
Okay, for some reason, it looked like the p-value was all zeros there.

936
00:46:56,600 --> 00:46:58,600
I guess I was just cuz I'd stepped out or something.

937
00:47:02,300 --> 00:47:03,600
We come through there again.

938
00:47:16,900 --> 00:47:18,000
so, here's that probe Z

939
00:47:25,800 --> 00:47:26,600
Interesting.

940
00:47:27,000 --> 00:47:29,900
So it's x y z 1.

941
00:47:32,000 --> 00:47:35,300
So, this is literally at the origin here, right?

942
00:47:35,300 --> 00:47:40,500
Is what we're actually projecting from, and that's in World space.

943
00:47:40,500 --> 00:47:43,100
So the camera P must be exactly eight away.

944
00:47:43,100 --> 00:47:44,600
Yeah, it is, which is funny.

945
00:47:44,800 --> 00:47:47,600
I guess that's why we were passing that hard-coded eight there.

946
00:47:52,500 --> 00:47:56,500
So we're exactly at the Target location, right?

947
00:47:56,500 --> 00:47:59,200
So passing

948
00:48:00,000 --> 00:48:00,800
One down.

949
00:48:01,100 --> 00:48:02,200
Okay, that's fair.

950
00:48:03,300 --> 00:48:06,800
But again like if we just look at where the camera located, where the

951
00:48:06,800 --> 00:48:07,800
camera position is here.

952
00:48:07,800 --> 00:48:13,800
It just does not seem saying to me, that we're getting that result at

953
00:48:13,800 --> 00:48:13,900
now.

954
00:48:13,900 --> 00:48:16,000
Let's take a look at what we're what we have here.

955
00:48:17,200 --> 00:48:20,000
All those values look really, this just looks really suspicious.

956
00:48:23,900 --> 00:48:27,400
Because I thought our far clip plane was like 1,000.

957
00:48:28,900 --> 00:48:29,500
Right.

958
00:48:29,600 --> 00:48:30,400
All right, we're good.

959
00:48:30,400 --> 00:48:31,300
Let's investigate.

960
00:48:31,400 --> 00:48:35,100
I am, I am just a confused individual at this point.

961
00:48:36,900 --> 00:48:40,000
I want to go take a look at at what's going on here when we actually

962
00:48:40,000 --> 00:48:42,200
build our perspective, projection Matrix?

963
00:48:42,800 --> 00:48:44,400
All right, so let's take a look.

964
00:48:45,300 --> 00:48:48,900
Here we are in the set, Cameron, transform call.

965
00:48:54,800 --> 00:48:57,300
And we're going to come through here and build our perspective,

966
00:48:57,300 --> 00:48:58,200
projection Matrix.

967
00:48:58,200 --> 00:48:58,900
Here we go.

968
00:49:00,000 --> 00:49:01,000
And so you can see here.

969
00:49:01,000 --> 00:49:04,200
Here's our supposed near and far clipping planes, right?

970
00:49:04,400 --> 00:49:11,300
It's a hundred and 0.1 and so those are the the to, you know, nominal

971
00:49:11,300 --> 00:49:11,700
clip planes.

972
00:49:11,700 --> 00:49:13,900
We just kind of hard coding here because we don't actually have any

973
00:49:13,900 --> 00:49:15,900
code right now that tries to set those.

974
00:49:15,900 --> 00:49:18,900
We don't deal with nearing forklift, planes, hardly at all.

975
00:49:20,000 --> 00:49:21,900
So what are our DNA values?

976
00:49:22,300 --> 00:49:25,900
Write negative 1 and negative.

977
00:49:25,900 --> 00:49:31,000
Point two are the two values that we're getting here and we're sort of

978
00:49:31,000 --> 00:49:33,000
placing them in here.

979
00:49:35,000 --> 00:49:35,500
In here.

980
00:49:36,300 --> 00:49:36,700
Okay.

981
00:49:36,700 --> 00:49:40,300
So let me think that through does that make good sense to me.

982
00:49:40,300 --> 00:49:41,900
And we actually do our tests here.

983
00:49:41,900 --> 00:49:45,800
So we took a look to see whether or not the near and far clipping

984
00:49:45,800 --> 00:49:48,900
planes when pushed through here, produced values that we thought were

985
00:49:48,900 --> 00:49:49,700
correct.

986
00:49:49,900 --> 00:49:50,800
And let's see.

987
00:49:51,900 --> 00:49:58,300
So in our test 0 case, we get a negative point one which is I guess

988
00:49:58,300 --> 00:50:02,300
what we would expect to see their right and

989
00:50:05,400 --> 00:50:08,200
I should think about what we expect to see there first and we get a z

990
00:50:08,200 --> 00:50:09,400
equals 100 there

991
00:50:18,300 --> 00:50:21,200
Well actually, these are not very good test.

992
00:50:21,200 --> 00:50:23,700
These have to do their divided so let's go ahead and actually make

993
00:50:23,700 --> 00:50:24,400
them do that.

994
00:50:27,600 --> 00:50:28,100
Mr.

995
00:50:28,100 --> 00:50:29,400
Matthew poo.

996
00:50:30,600 --> 00:50:31,000
There we go.

997
00:50:32,000 --> 00:50:35,300
So we really want in this case when we do this transform right.

998
00:50:35,400 --> 00:50:38,500
What I really want to do is I want to do a full transform here.

999
00:50:39,800 --> 00:50:44,400
Yeah and then so that when we get the result out we can do the divide

1000
00:50:44,400 --> 00:50:46,000
and see what we actually get.

1001
00:50:53,500 --> 00:50:56,200
But this is what we actually want to do, right?

1002
00:51:01,800 --> 00:51:05,800
so in this case, or I guess I could this way another, we have a

1003
00:51:05,800 --> 00:51:06,800
divided equals

1004
00:51:21,900 --> 00:51:22,300
There we go.

1005
00:51:23,800 --> 00:51:24,200
Do we do?

1006
00:51:24,200 --> 00:51:25,000
Can we do this?

1007
00:51:27,000 --> 00:51:27,700
Yes, we can.

1008
00:51:30,800 --> 00:51:34,600
okay, so in this case, we could now actually get

1009
00:51:36,400 --> 00:51:40,000
the test code to do what I wanted it to do, which is let's go through

1010
00:51:40,000 --> 00:51:44,300
here and see, which is, it should give us the actual

1011
00:51:48,100 --> 00:51:51,200
Like the actual values divided by W, right?

1012
00:51:52,400 --> 00:51:54,700
And these should transfer these should both go.

1013
00:51:54,700 --> 00:51:59,300
And after the divided they should both be equal to the near and far

1014
00:51:59,300 --> 00:51:59,800
clipping planes.

1015
00:51:59,800 --> 00:52:00,000
Right?

1016
00:52:00,000 --> 00:52:03,100
When we pass it in here at, they should be equal to negative 1 and 1

1017
00:52:03,400 --> 00:52:04,000
respectively.

1018
00:52:04,000 --> 00:52:04,200
Right?

1019
00:52:04,200 --> 00:52:05,900
Is what these are supposed to map to.

1020
00:52:07,100 --> 00:52:07,900
So, let's see.

1021
00:52:08,100 --> 00:52:11,900
So this Z Maps, the negative 1, which is exactly what I wanted it to

1022
00:52:11,900 --> 00:52:12,400
do.

1023
00:52:14,200 --> 00:52:16,800
And this one should map to one which is exactly what I wanted to do.

1024
00:52:17,600 --> 00:52:20,700
So it looks like we're okay here, let me just run the program a little

1025
00:52:20,700 --> 00:52:22,400
bit more switch to the debug camera.

1026
00:52:23,200 --> 00:52:26,000
And now go ahead and double-check that.

1027
00:52:28,700 --> 00:52:34,000
so here we are again, just again, looking at these tests XYZ, that map

1028
00:52:34,000 --> 00:52:35,000
Z 2 - 1

1029
00:52:36,200 --> 00:52:37,200
That map c21.

1030
00:52:37,600 --> 00:52:42,400
All right so these are correct at least in terms of verifying that

1031
00:52:42,400 --> 00:52:46,000
when you push the things through, that should be at the near and far

1032
00:52:46,000 --> 00:52:46,800
clipping planes.

1033
00:52:47,400 --> 00:52:48,400
At least I believe.

1034
00:52:50,400 --> 00:52:52,100
Things that are at the near and far clipping planes.

1035
00:52:52,900 --> 00:52:54,100
You get the right results out.

1036
00:52:54,100 --> 00:52:58,900
Although there's no positional elements here us.

1037
00:52:58,900 --> 00:53:04,900
So, I think, I feel like we can sort of Fairly safely say that this is

1038
00:53:04,900 --> 00:53:08,300
properly doing the the Z distance, right?

1039
00:53:08,400 --> 00:53:12,700
So nothing unusual is happening here, it's all correct.

1040
00:53:13,200 --> 00:53:13,700
Okay.

1041
00:53:14,800 --> 00:53:19,000
So now, the question is, why are we getting weird results or at least

1042
00:53:19,000 --> 00:53:19,200
it is

1043
00:53:19,400 --> 00:53:21,700
It's just me thinking they're weird results but they're not actually

1044
00:53:21,700 --> 00:53:22,400
results.

1045
00:53:23,100 --> 00:53:26,600
Why are we getting weird results in the case where

1046
00:53:28,900 --> 00:53:35,200
We're trying to do the reverse projection actually verify that the two

1047
00:53:35,200 --> 00:53:36,200
versions are corrected.

1048
00:53:36,200 --> 00:53:38,500
This although I think that's not what we're looking at right now.

1049
00:53:38,500 --> 00:53:39,200
So it doesn't matter.

1050
00:53:39,200 --> 00:53:40,500
But yeah, these are all the identities.

1051
00:53:40,500 --> 00:53:41,400
So that's good too.

1052
00:53:44,200 --> 00:53:46,100
So that's yeah, this is all pretty good.

1053
00:53:50,900 --> 00:53:52,400
So this is the other thing here.

1054
00:53:52,400 --> 00:53:55,800
So these also only happen.

1055
00:53:56,900 --> 00:53:57,200
Yeah.

1056
00:53:57,200 --> 00:53:57,800
So

1057
00:54:04,700 --> 00:54:06,800
So this is the part I was talking about before I so we probably want

1058
00:54:06,800 --> 00:54:10,600
to clean this up before we follow the debugging anymore as well.

1059
00:54:10,600 --> 00:54:15,900
So again when we're using the debug camera, we don't update these and

1060
00:54:15,900 --> 00:54:18,800
the reason we don't update these is because anyone who uses those

1061
00:54:18,800 --> 00:54:19,300
right?

1062
00:54:20,500 --> 00:54:21,600
Forerun projection.

1063
00:54:22,900 --> 00:54:26,000
Want, you know, that's how we were doing like our Sprites and stuff.

1064
00:54:26,100 --> 00:54:31,000
We want those Sprites to keep doing their projections as if they're

1065
00:54:31,000 --> 00:54:34,000
from the camera, wherever the camera was right.

1066
00:54:34,200 --> 00:54:37,700
What that means is our unprojected call which is also should be going

1067
00:54:37,700 --> 00:54:44,600
from you know, should also be the going from the actual camera

1068
00:54:44,600 --> 00:54:45,100
location.

1069
00:54:45,100 --> 00:54:48,400
Because again, all the simulation stuff should all be going from that

1070
00:54:48,400 --> 00:54:50,200
camera location is

1071
00:54:50,300 --> 00:54:51,200
We're going to use that.

1072
00:54:51,200 --> 00:54:54,800
What that means is that when it does the unprojected those on

1073
00:54:54,800 --> 00:54:57,700
projection come from, not from the debug, right?

1074
00:54:57,700 --> 00:54:58,900
Not from the debug camera.

1075
00:55:00,800 --> 00:55:05,700
So when I come down cure for last project, what I really need to do is

1076
00:55:05,700 --> 00:55:09,200
that, you know, we probably want to make these really explicit.

1077
00:55:09,300 --> 00:55:11,100
This is game camera.

1078
00:55:11,500 --> 00:55:12,600
P game camera ex-gay.

1079
00:55:12,600 --> 00:55:13,900
A wild game crazy game.

1080
00:55:14,100 --> 00:55:14,900
Last project.

1081
00:55:15,200 --> 00:55:18,600
What I think we want to do is store both of those, right?

1082
00:55:18,600 --> 00:55:20,100
We want to have like

1083
00:55:23,700 --> 00:55:26,000
Something like the render transform, I don't know.

1084
00:55:26,000 --> 00:55:29,600
We've got too many of these at this point, but we could clean those up

1085
00:55:29,600 --> 00:55:34,500
as I kind of want to store these and say, look here is the stuff.

1086
00:55:35,500 --> 00:55:42,300
This is the P, the X, the Y, the Z, and the projection for these guys.

1087
00:55:43,300 --> 00:55:44,800
And we want two of them.

1088
00:55:45,000 --> 00:55:49,600
We want the game version and the debug version.

1089
00:55:50,100 --> 00:55:51,600
And we want everyone who uses

1090
00:55:51,800 --> 00:55:53,900
Them to be knowing which one they're picking.

1091
00:55:54,600 --> 00:55:57,300
So that you don't get in this situation where you're using half of one

1092
00:55:57,300 --> 00:55:59,300
half the other, which is sort of what would have happened in that

1093
00:55:59,300 --> 00:56:00,200
previous case.

1094
00:56:00,200 --> 00:56:01,800
It's not good, right?

1095
00:56:03,000 --> 00:56:05,600
So, in all these cases, where we're pushing bitmaps and stuff like

1096
00:56:05,600 --> 00:56:14,100
this, all of this stuff wants to go through the game's version, right?

1097
00:56:15,400 --> 00:56:19,200
So in all these cases we want like what did I call it?

1098
00:56:19,900 --> 00:56:20,700
Guess we want.

1099
00:56:22,000 --> 00:56:26,100
Maybe game transform and debug transform something like that.

1100
00:56:45,600 --> 00:56:46,200
Right.

1101
00:56:47,800 --> 00:56:49,200
So we want something more like this.

1102
00:56:50,000 --> 00:56:53,100
And then in the unprojected, what we probably want to do here is we

1103
00:56:53,100 --> 00:56:56,100
probably want to specify which one of those were using.

1104
00:56:56,100 --> 00:56:59,600
So if you take a look at the group, you can see that what we're doing

1105
00:56:59,600 --> 00:56:59,800
from this.

1106
00:57:00,100 --> 00:57:05,700
Up here is we're getting sort of like in these cases we're getting the

1107
00:57:06,200 --> 00:57:07,400
camera, fresh out of it.

1108
00:57:07,500 --> 00:57:10,600
What we could do is when we do our unprojected, we could say, well,

1109
00:57:10,600 --> 00:57:11,800
you know, pass us.

1110
00:57:12,000 --> 00:57:13,700
You can pass the object transform.

1111
00:57:13,700 --> 00:57:16,300
Also pass surpassed us the render transform

1112
00:57:18,700 --> 00:57:19,300
Right.

1113
00:57:19,500 --> 00:57:23,300
So whatever the render transform is that you want to use and that way

1114
00:57:23,300 --> 00:57:27,700
we can sort of say, well, okay, now you can own project from either.

1115
00:57:27,900 --> 00:57:31,200
So if you're trying to do something like debug picking of an element,

1116
00:57:31,300 --> 00:57:35,400
you can bet you can ask the unprojected to unprotect from the debug

1117
00:57:35,400 --> 00:57:36,700
camera which is when you're looking through.

1118
00:57:36,800 --> 00:57:39,300
But if you're doing something where it's supposed to be like, World,

1119
00:57:39,300 --> 00:57:41,800
simulation, you're trying to figure out what region the camera can see

1120
00:57:42,000 --> 00:57:43,900
that should still be going from the game camera.

1121
00:57:44,100 --> 00:57:45,800
And that way you can do either or

1122
00:57:46,500 --> 00:57:50,500
Right, so let's just go ahead and do it that way.

1123
00:57:50,500 --> 00:57:52,200
I think that's a senior way to do this.

1124
00:57:53,500 --> 00:57:53,900
At least.

1125
00:57:53,900 --> 00:57:55,200
It seems like it to me.

1126
00:57:59,100 --> 00:57:59,600
Right.

1127
00:58:06,000 --> 00:58:09,100
So now we get down here to the unprojected call, and in this case, we

1128
00:58:09,100 --> 00:58:11,800
know, for, from this one, anyway, that we're pretty much always going

1129
00:58:11,800 --> 00:58:13,200
to use the Game X form.

1130
00:58:21,000 --> 00:58:23,000
I don't know why that.

1131
00:58:23,000 --> 00:58:25,600
Yeah, that wouldn't really need this part of it at all.

1132
00:58:26,100 --> 00:58:29,400
And so I feel like maybe this the object transform part.

1133
00:58:30,700 --> 00:58:34,600
Should be pulled out of here to the person who's actually using that.

1134
00:58:34,900 --> 00:58:37,600
So, this should probably be this, right?

1135
00:58:38,600 --> 00:58:43,600
And this should always just return the world's p.

1136
00:58:46,800 --> 00:58:49,400
And then this object transform is just an additional piece that if you

1137
00:58:49,400 --> 00:58:51,700
want to do that, you could.

1138
00:58:51,900 --> 00:58:55,100
So I don't know where, who was on projecting with that transform?

1139
00:58:55,400 --> 00:59:00,200
Let's just find them looks like nobody in the interior was doing that,

1140
00:59:00,700 --> 00:59:01,200
right?

1141
00:59:02,400 --> 00:59:06,400
And so maybe then what we could do is just say like we'll deal with

1142
00:59:06,400 --> 00:59:10,200
this in a second when we find out who is actually using that, okay?

1143
00:59:15,400 --> 00:59:16,300
So let's see.

1144
00:59:16,300 --> 00:59:19,300
This goes away and we don't need that.

1145
00:59:21,500 --> 00:59:25,500
And then in here, when we're actually storing all this stuff and we

1146
00:59:25,700 --> 00:59:29,700
storing like the projects last project, that sort of thing in push set

1147
00:59:29,700 --> 00:59:32,200
up, I guess what?

1148
00:59:32,200 --> 00:59:34,000
I'm not sure is

1149
00:59:36,400 --> 00:59:38,200
When we do push setup.

1150
00:59:40,500 --> 00:59:43,100
Why are these getting done in two different places?

1151
00:59:48,000 --> 00:59:52,100
Cuz last project and the camera XYZ kind of want to get updated

1152
00:59:52,100 --> 00:59:53,100
together, right?

1153
01:00:06,500 --> 01:00:08,900
So feel like this wants to be structured a little bit better.

1154
01:00:10,800 --> 01:00:14,500
Let's ignore that for just one second and I'm going to come back to

1155
01:00:14,500 --> 01:00:15,600
that in a second here.

1156
01:00:16,600 --> 01:00:17,000
So right?

1157
01:00:17,000 --> 01:00:20,400
So this is all we don't really want to do with that the moment.

1158
01:00:20,800 --> 01:00:21,100
Okay?

1159
01:00:21,100 --> 01:00:24,000
So here we go, let's take a look at this.

1160
01:00:24,000 --> 01:00:25,300
Unprojected also cures.

1161
01:00:25,300 --> 01:00:28,800
This one is really not right anyway so I'm not sure how much we care

1162
01:00:28,800 --> 01:00:33,700
about this stuff at all because this we have to do as a raycast.

1163
01:00:33,700 --> 01:00:38,100
Now if we wanted to actually do that mass picking, so I would just say

1164
01:00:38,100 --> 01:00:40,100
this at the moment is

1165
01:00:40,400 --> 01:00:41,400
Not going to happen.

1166
01:00:43,100 --> 01:00:46,200
So we don't care about that because we need we need to get it, use a

1167
01:00:46,200 --> 01:00:47,800
different path entirely for that.

1168
01:00:48,300 --> 01:00:51,000
And so the only person we really care about is the debug people.

1169
01:00:51,400 --> 01:00:53,400
They were passing default flat transform.

1170
01:00:53,400 --> 01:00:55,800
Anyway, so that's fine.

1171
01:00:56,000 --> 01:00:58,800
So what we could do here is say that these guys are just going to use

1172
01:00:59,900 --> 01:01:03,100
the, the Game X form because they don't have a debug transform, really

1173
01:01:03,500 --> 01:01:04,400
the debug you.

1174
01:01:04,400 --> 01:01:08,600
I always has just the main transform, it doesn't really have the

1175
01:01:08,600 --> 01:01:11,900
concept of a separate debug View at all.

1176
01:01:12,600 --> 01:01:12,800
All right.

1177
01:01:14,300 --> 01:01:18,000
So finally, let's see that's news take one of these.

1178
01:01:18,900 --> 01:01:21,300
So really, I just now need to clamp, this push setup stuff a little

1179
01:01:21,300 --> 01:01:22,800
bit so you can see what happens here.

1180
01:01:23,600 --> 01:01:27,700
When we do a push cliprect any of these guys, they all do set up

1181
01:01:27,700 --> 01:01:32,800
pushes and so I feel like what we really want to do there, I don't

1182
01:01:32,800 --> 01:01:33,800
really know.

1183
01:01:35,000 --> 01:01:36,500
I mean, just looking at this, right?

1184
01:01:38,000 --> 01:01:41,700
And I look at the prod situation, you can see that the rectangle

1185
01:01:41,700 --> 01:01:43,600
itself needs to get that information.

1186
01:01:45,500 --> 01:01:49,800
I feel like, what really what I want to do is back this out a little

1187
01:01:49,800 --> 01:01:56,400
bit and say, okay, we're not going to store that in last project,

1188
01:01:57,100 --> 01:02:01,800
because that's not really, the person who knows what should be

1189
01:02:01,800 --> 01:02:02,400
happening here.

1190
01:02:02,400 --> 01:02:06,300
Because whether or not it goes into the debug or the regular version

1191
01:02:07,600 --> 01:02:11,200
Is going to be the determiner of and that's only known a little bit

1192
01:02:11,200 --> 01:02:15,100
further outside and nobody is going to.

1193
01:02:16,300 --> 01:02:16,500
Yeah.

1194
01:02:16,500 --> 01:02:16,900
So

1195
01:02:19,000 --> 01:02:22,100
I guess we need to know that because we need to push on.

1196
01:02:22,100 --> 01:02:25,600
Whichever one is actually appropriate here, but I guess the thing is

1197
01:02:25,800 --> 01:02:26,800
this inverse.

1198
01:02:26,800 --> 01:02:29,900
Projection situation is not really what we want to store.

1199
01:02:29,900 --> 01:02:32,700
I guess because no one should really be looking at that one in terms

1200
01:02:32,700 --> 01:02:34,100
of when they're actually using stuff.

1201
01:02:34,200 --> 01:02:36,300
So people need to store that ahead of time.

1202
01:02:37,300 --> 01:02:41,400
So what we really want to do here is just pass the M4 by for that

1203
01:02:41,400 --> 01:02:46,300
wants to get stored, and we can still make that be last fraud, which

1204
01:02:46,300 --> 01:02:48,600
will just be used sort of this way.

1205
01:02:49,700 --> 01:02:50,200
Right.

1206
01:02:51,200 --> 01:02:54,700
And in here, I can put an M40 for last project soon as I'm done with

1207
01:02:54,700 --> 01:02:58,000
that and we can talk about how that works in a second.

1208
01:02:58,500 --> 01:02:59,800
So, what I do is push cliff.

1209
01:03:00,000 --> 01:03:00,400
Correct.

1210
01:03:00,500 --> 01:03:03,400
Again, all that wants to do is modify the clip rect.

1211
01:03:03,400 --> 01:03:06,900
So again that can just pass, whatever the last projection was that's

1212
01:03:06,900 --> 01:03:10,300
sufficient, because it's not trying to change anything.

1213
01:03:13,000 --> 01:03:16,500
And so then really the set camera Transformers where things need to

1214
01:03:16,500 --> 01:03:18,100
get a bit Saucy.

1215
01:03:18,600 --> 01:03:23,100
So what we want to do here is I want to actually build now a render

1216
01:03:23,100 --> 01:03:23,900
transform

1217
01:03:27,000 --> 01:03:29,400
And I want to build this to have all the information in it.

1218
01:03:29,600 --> 01:03:30,700
So X formed up.

1219
01:03:30,700 --> 01:03:35,500
Raj is actually the thing that we would be sending down as the

1220
01:03:35,500 --> 01:03:39,500
projection Matrix here although actually not quite right.

1221
01:03:39,600 --> 01:03:42,900
It's actually when we do the composite version, it's this guy right

1222
01:03:42,900 --> 01:03:43,400
here.

1223
01:03:43,800 --> 01:03:46,800
So we're really going to do like X formed up Raj.

1224
01:03:52,500 --> 01:03:58,100
like so, and now we get all the information there we can also verify

1225
01:04:05,500 --> 01:04:08,300
The way we were doing when we do our push setup.

1226
01:04:08,900 --> 01:04:12,200
Again, we're just doing our xform about proj.

1227
01:04:18,500 --> 01:04:20,000
And render the forward version.

1228
01:04:21,900 --> 01:04:24,300
And if we look at what happens here, really I probably want to just

1229
01:04:24,300 --> 01:04:26,300
write this directly into the place that's going to go.

1230
01:04:26,600 --> 01:04:29,400
So probably what I want to do is say well is it a debugger?

1231
01:04:29,400 --> 01:04:31,100
Isn't it a debug right?

1232
01:04:32,100 --> 01:04:35,700
If it's a debug than what I want to do is I want to overwrite the

1233
01:04:35,700 --> 01:04:36,800
debug X form.

1234
01:04:37,800 --> 01:04:40,700
And if it's not, then I want to overwrite the games transform.

1235
01:04:43,200 --> 01:04:43,600
Oops.

1236
01:04:46,700 --> 01:04:47,200
Right?

1237
01:04:48,200 --> 01:04:51,400
And then when I write into this, I'm just saying like, oh okay, I'm

1238
01:04:51,400 --> 01:04:52,800
always going to write into something.

1239
01:04:53,500 --> 01:04:55,800
So all of this stuff is always going to get written into

1240
01:04:57,800 --> 01:05:01,700
It's just a question of which one I'm writing into and now I save them

1241
01:05:01,700 --> 01:05:02,000
all.

1242
01:05:02,100 --> 01:05:04,800
I always save both of them so you can choose which one you're going to

1243
01:05:04,800 --> 01:05:07,600
use depending on on the circumstances.

1244
01:05:07,600 --> 01:05:08,100
Right?

1245
01:05:08,400 --> 01:05:11,400
So that feels a lot better to me because now we're storing both paths

1246
01:05:11,400 --> 01:05:15,800
which ever one you updated you store which feels a lot better, right?

1247
01:05:20,500 --> 01:05:21,000
There we go.

1248
01:05:22,400 --> 01:05:26,800
And so then we still want that last project because again, that's just

1249
01:05:27,000 --> 01:05:28,700
what the renderer is going to use.

1250
01:05:28,800 --> 01:05:32,100
So when we're pushing clip, Rex and stuff like that on, we always want

1251
01:05:32,100 --> 01:05:34,900
those to be whatever the renderer is going to use.

1252
01:05:35,000 --> 01:05:41,200
So we still want to save that last project as a separate thing but

1253
01:05:41,200 --> 01:05:45,100
it's not actually used for anything other than than the cliprect stuff

1254
01:05:46,900 --> 01:05:47,500
anymore.

1255
01:05:49,400 --> 01:05:52,500
All right, so I think that's all good.

1256
01:05:53,200 --> 01:05:54,500
What's going on here?

1257
01:05:55,200 --> 01:05:56,100
I'm not sure.

1258
01:05:57,700 --> 01:05:59,500
So okay this is just that

1259
01:06:03,800 --> 01:06:09,400
So we got last project last fraud, push set up, less proj press setup.

1260
01:06:09,500 --> 01:06:12,500
Okay, so now I'm comfortable with that.

1261
01:06:12,500 --> 01:06:14,800
I can just now say that we do have oops.

1262
01:06:18,800 --> 01:06:21,100
That we do actually have a last brought here.

1263
01:06:27,200 --> 01:06:31,100
And so now in theory, okay, and you can see we've already fixed one of

1264
01:06:31,100 --> 01:06:34,100
the bugs we had, which is that this rectangle projection was changing

1265
01:06:34,100 --> 01:06:36,000
with the debug camera, which we didn't want.

1266
01:06:36,800 --> 01:06:38,400
And so now that's stable again, right?

1267
01:06:38,400 --> 01:06:40,200
Because it's always going through the game transform.

1268
01:06:40,200 --> 01:06:41,200
So that's good as well.

1269
01:06:41,900 --> 01:06:44,300
And so that's just a little bit cleaner and that's all good.

1270
01:06:44,300 --> 01:06:46,900
Now again we've kind of got a stack of bugs or working through here

1271
01:06:46,900 --> 01:06:47,300
now.

1272
01:06:47,900 --> 01:06:50,700
So let's get back to what we're doing originally now that I know we're

1273
01:06:50,700 --> 01:06:53,900
going through the correct stuff, I want to go back to taking a look at

1274
01:06:53,900 --> 01:06:56,600
the sun projectile, which I still think is is busted.

1275
01:06:57,600 --> 01:06:59,800
So I want to take a closer look at it.

1276
01:07:01,400 --> 01:07:01,900
Here we go.

1277
01:07:02,800 --> 01:07:08,200
And so now, I just want to see what the transform looks like that

1278
01:07:08,200 --> 01:07:08,800
we're starting with.

1279
01:07:08,800 --> 01:07:11,100
So, let's clear out a watch window and take a look.

1280
01:07:11,500 --> 01:07:13,400
So, here's a transform that we're starting with.

1281
01:07:13,700 --> 01:07:17,700
I want to take a look at the render group as well, and looking at the

1282
01:07:17,700 --> 01:07:18,700
render group here.

1283
01:07:19,400 --> 01:07:21,900
I just want to see what the differences between these two.

1284
01:07:22,600 --> 01:07:25,000
So here's that debug transform, right?

1285
01:07:25,900 --> 01:07:27,900
And so you can see this is not being transformed.

1286
01:07:27,900 --> 01:07:30,900
The sun project is not transforming through the debug transform at

1287
01:07:30,900 --> 01:07:31,000
all.

1288
01:07:31,700 --> 01:07:32,400
And that's great.

1289
01:07:32,400 --> 01:07:33,000
Because

1290
01:07:36,300 --> 01:07:39,200
This is the thing that gets the simulation rectangle, so it should not

1291
01:07:39,200 --> 01:07:40,300
be right.

1292
01:07:40,500 --> 01:07:43,100
And this is why you notice that, the reason that I went down that

1293
01:07:43,100 --> 01:07:47,900
little bug fixing tangent was just because I noticed that it was a

1294
01:07:48,000 --> 01:07:52,200
tilted camera and I was like the debug transform when I first switch

1295
01:07:52,200 --> 01:07:54,800
into the debug view is directly down.

1296
01:07:54,800 --> 01:07:59,300
So I was like expecting to see an identity in the upper 3x3 kind of a

1297
01:07:59,300 --> 01:08:01,300
situation which is exactly what I see.

1298
01:08:01,300 --> 01:08:02,600
Now the X y&z axes.

1299
01:08:02,600 --> 01:08:05,300
These are 111 exactly what I would expect.

1300
01:08:05,900 --> 01:08:07,400
These are not what I would have expected.

1301
01:08:07,400 --> 01:08:09,700
And so I just wanted to make sure that I was, you know, apples to

1302
01:08:09,700 --> 01:08:13,100
oranges apples and apples and oranges and delicious tasting oranges

1303
01:08:13,100 --> 01:08:14,000
and all those sorts of things.

1304
01:08:14,100 --> 01:08:18,399
Anyway, so when I come through the sun project now, we are doing the

1305
01:08:18,700 --> 01:08:22,800
regular game camera, transform though, and we're not mixing and

1306
01:08:22,800 --> 01:08:24,200
matching which is also good.

1307
01:08:25,000 --> 01:08:28,200
So let's take a look though at the rest of this and see what's going

1308
01:08:28,200 --> 01:08:28,300
on.

1309
01:08:28,300 --> 01:08:31,700
Because I like I said, I think it's still probably Incorrect and the

1310
01:08:31,700 --> 01:08:34,800
reason that I think it's incorrect as I just don't love that value, it

1311
01:08:34,800 --> 01:08:35,300
doesn't make it

1312
01:08:35,399 --> 01:08:37,300
Lot of sense to me why we were getting getting a value.

1313
01:08:37,300 --> 01:08:43,600
That's such a high value in clip coordinates, what I'm worried about

1314
01:08:43,600 --> 01:08:44,500
and maybe

1315
01:08:49,899 --> 01:08:53,500
Basically, the thing that concerns me here is that it feels like

1316
01:08:53,700 --> 01:08:58,300
that's that would be a correct value if it was negative, right?

1317
01:09:00,000 --> 01:09:05,700
Z the I believe the Z buffer is supposed to get larger as it gets

1318
01:09:05,700 --> 01:09:06,600
further away.

1319
01:09:07,000 --> 01:09:11,899
I mean supposed to is not really mean anything because there is no

1320
01:09:11,899 --> 01:09:14,500
definition of what Z buffer values have to be.

1321
01:09:14,899 --> 01:09:18,000
It's just they have to get map between negative 1 and 1.

1322
01:09:18,000 --> 01:09:21,800
Somehow, if you want to use a fixed Point Z buffer, which is what

1323
01:09:21,800 --> 01:09:22,899
we're using at the moment.

1324
01:09:23,000 --> 01:09:28,000
So they have to get map between negative and 1 and 1, but the how they

1325
01:09:28,100 --> 01:09:29,899
arrange themselves in that space is entirely

1326
01:09:30,000 --> 01:09:30,600
early up to you.

1327
01:09:31,300 --> 01:09:35,500
It's whatever we put in the projection Matrix for computing.

1328
01:09:35,500 --> 01:09:39,100
The Z value is how they'll come out, but

1329
01:09:41,100 --> 01:09:44,399
We have a certain comparison function that we're using for the depth

1330
01:09:44,399 --> 01:09:48,100
buffer and I thought that the comparison were using is that the Z

1331
01:09:48,100 --> 01:09:49,600
buffer is should be less.

1332
01:09:49,800 --> 01:09:54,200
They should be getting less and less as they get close to you, more

1333
01:09:54,200 --> 01:09:55,600
and more as they get further away.

1334
01:09:55,700 --> 01:09:59,300
So negative one, I thought was was right at the, the near clipping.

1335
01:09:59,500 --> 01:10:02,400
Now, what I want to do now is verify that the actually true.

1336
01:10:02,500 --> 01:10:07,200
Maybe that's not how it ended up, what, how we ended up mapping it and

1337
01:10:07,200 --> 01:10:10,100
I'm totally wrong, but I just want to verify, you know, these

1338
01:10:10,200 --> 01:10:10,600
Assumptions.

1339
01:10:10,600 --> 01:10:11,300
Because again,

1340
01:10:13,100 --> 01:10:18,100
there's so much involved in a 3D pipeline, it's easy to lose track of

1341
01:10:18,100 --> 01:10:21,600
values here and there and if you don't at any point, take a look and

1342
01:10:21,600 --> 01:10:25,700
actually test some things and verify that you got stuff, right?

1343
01:10:25,800 --> 01:10:28,200
It's easy to have crazy bugs in there.

1344
01:10:28,200 --> 01:10:31,500
Dickon stay a long time and you're just happened to be passing the

1345
01:10:31,500 --> 01:10:35,100
right values around that, make it so it doesn't actually become a

1346
01:10:35,100 --> 01:10:36,200
problem, but we'll see.

1347
01:10:37,800 --> 01:10:41,300
So yet, I mean, here you go.

1348
01:10:41,500 --> 01:10:42,600
You can see the depth of

1349
01:10:42,900 --> 01:10:46,900
And for passing is less than or equal to, and I believe that's the

1350
01:10:46,900 --> 01:10:49,100
pass function and we can again will double check that with

1351
01:10:49,100 --> 01:10:49,900
documentation.

1352
01:10:50,300 --> 01:10:53,600
But what that would mean assuming that I'm not mistaken is less than

1353
01:10:53,600 --> 01:10:54,000
or equal.

1354
01:10:54,000 --> 01:10:57,900
To, in this case means you will draw if the Z value is less than or

1355
01:10:57,900 --> 01:10:59,900
equal to the value that's currently in the depth buffer.

1356
01:10:59,900 --> 01:11:04,400
What that means is that the near clip lame should be negative 1,

1357
01:11:04,800 --> 01:11:05,100
right?

1358
01:11:05,100 --> 01:11:10,700
It should be the lowest possible value coming in there again unless I

1359
01:11:10,700 --> 01:11:12,600
misunderstood misunderstanding those

1360
01:11:12,800 --> 01:11:16,000
Values and they get flipped around by opengl or something like this

1361
01:11:16,600 --> 01:11:19,400
but you know, assuming that's not true.

1362
01:11:21,100 --> 01:11:24,000
So I want to figure out what's going on there because it's should not

1363
01:11:24,000 --> 01:11:24,300
that.

1364
01:11:24,300 --> 01:11:27,900
That is not what I want to see happening.

1365
01:11:28,200 --> 01:11:28,600
Right.

1366
01:11:29,400 --> 01:11:32,300
Okay so we got to figure out why we're getting those results.

1367
01:11:32,700 --> 01:11:36,600
I feel like right what we should be seeing is that if we start at the

1368
01:11:36,600 --> 01:11:38,800
camera P, which is what we've got here.

1369
01:11:39,000 --> 01:11:42,800
And we walk backwards along the z-axis by World distance from camera,

1370
01:11:43,000 --> 01:11:44,800
if World distance from camera.

1371
01:11:44,800 --> 01:11:46,300
In fact, we can do this test.

1372
01:11:46,300 --> 01:11:50,400
Exactly if World distance from camera was exactly zero or

1373
01:11:50,600 --> 01:11:52,300
Exactly the near clipping plane value.

1374
01:11:52,700 --> 01:11:56,100
What we should see is after the transform, we should get

1375
01:11:59,400 --> 01:11:59,800
We should get.

1376
01:12:00,100 --> 01:12:01,500
Literally, the near clipping plane out.

1377
01:12:01,500 --> 01:12:04,300
We should get negative 1 out and if we walk the far clip playing

1378
01:12:04,300 --> 01:12:06,300
distance away, we should get the other value.

1379
01:12:06,500 --> 01:12:10,200
So, let's just put those values in as test to see what it is that we

1380
01:12:10,200 --> 01:12:14,100
do, get because that's just a good example of, like, us figure out a

1381
01:12:14,100 --> 01:12:15,500
way to probe this, right?

1382
01:12:18,400 --> 01:12:21,100
So, what I can do here is just say like, oh, all right, you know, when

1383
01:12:21,100 --> 01:12:26,300
we do this on Project, let me just force it to call this in some

1384
01:12:26,300 --> 01:12:28,500
circumstance here, that's going to be handy for me.

1385
01:12:28,700 --> 01:12:31,700
So, if I come through in World mode, where we're doing these

1386
01:12:31,700 --> 01:12:37,400
unprojected calls, where we do get camera acting a Target right before

1387
01:12:37,400 --> 01:12:40,600
that, let me just call it with exactly.

1388
01:12:44,500 --> 01:12:45,400
The values that I want here.

1389
01:12:45,400 --> 01:12:46,300
Now I guess pixels x.

1390
01:12:46,300 --> 01:12:47,500
Why we don't care what it is.

1391
01:12:47,500 --> 01:12:50,500
Really it shouldn't be relevant because we're looking at only that

1392
01:12:50,500 --> 01:12:53,200
first part where pixels x why isn't there?

1393
01:12:53,200 --> 01:12:57,400
So I'll just, you know, pass zero down and that should be fine in the

1394
01:12:57,400 --> 01:12:58,000
render group.

1395
01:12:58,000 --> 01:12:59,300
We know what that is, right?

1396
01:12:59,300 --> 01:13:01,200
It's just we've got that pass in to us.

1397
01:13:01,500 --> 01:13:03,800
And so I'm going to take a look at doing the render group.

1398
01:13:04,600 --> 01:13:08,700
Let's first, let's, let's look at the debug transform first, I guess,

1399
01:13:09,100 --> 01:13:12,800
because that's the easiest one to deal with without being saucy.

1400
01:13:13,200 --> 01:13:15,200
I'm just going to pass as the world distance from camera.

1401
01:13:15,300 --> 01:13:16,900
I'm going to pass that - flip plan.

1402
01:13:17,300 --> 01:13:17,600
Right?

1403
01:13:17,600 --> 01:13:20,600
That's the that's the - clip playing value their right.

1404
01:13:20,800 --> 01:13:23,500
And so we're talking about this is away from the camera so I should be

1405
01:13:23,500 --> 01:13:24,800
able to put in 0.1.

1406
01:13:25,100 --> 01:13:27,800
I believe that's the near clipping plane again, we'll check that out,

1407
01:13:27,800 --> 01:13:29,200
but I think that's what I'm looking for.

1408
01:13:29,400 --> 01:13:32,300
So now I want to be able to go through and I should be able to find

1409
01:13:34,400 --> 01:13:37,100
Just by using this call right here, right?

1410
01:13:37,100 --> 01:13:39,500
I should be able to get hoops.

1411
01:13:41,600 --> 01:13:45,800
I should be able to get that exact test case, so I can look at what

1412
01:13:45,800 --> 01:13:46,200
happened.

1413
01:13:46,200 --> 01:13:48,200
So, here we come through now.

1414
01:13:48,200 --> 01:13:51,100
We should see the debug transform coming through which I can start

1415
01:13:51,100 --> 01:13:53,700
with, it's a simpler transform, right?

1416
01:13:56,600 --> 01:13:58,800
But it looks like it's never been set, so that's not going to help us.

1417
01:13:58,800 --> 01:13:59,700
Hold on a second.

1418
01:14:04,200 --> 01:14:04,600
There we go.

1419
01:14:05,500 --> 01:14:07,000
So, here are setting the debug transform.

1420
01:14:07,000 --> 01:14:08,600
Now we can come in through the on Project.

1421
01:14:10,400 --> 01:14:12,300
Alright, so you can see here.

1422
01:14:12,300 --> 01:14:15,100
We've got our transform.

1423
01:14:15,200 --> 01:14:16,600
Here's the debug transform here.

1424
01:14:16,600 --> 01:14:21,000
It's got exactly the regular orthogonal unadulterated axis there.

1425
01:14:21,000 --> 01:14:23,100
Exactly what they normally are.

1426
01:14:23,200 --> 01:14:28,500
We have the P value which is at eight above back Z, right?

1427
01:14:28,500 --> 01:14:32,800
So it's eight above the ground plane which again is what we expect.

1428
01:14:32,800 --> 01:14:34,200
Here's our world distance from camera.

1429
01:14:34,200 --> 01:14:35,200
It's 0.1.

1430
01:14:35,400 --> 01:14:39,300
We would expect now for the p-value to basically walk it back.

1431
01:14:39,300 --> 01:14:40,100
So it's going to start

1432
01:14:40,200 --> 01:14:42,700
At 8:00, and it's going to walk back along.

1433
01:14:42,700 --> 01:14:45,100
The Z axis should be 7.9, right?

1434
01:14:45,100 --> 01:14:46,200
Or something like this.

1435
01:14:46,700 --> 01:14:49,400
Here's our probes e, there's that 7.9.

1436
01:14:49,800 --> 01:14:51,700
There's the W value, right?

1437
01:14:52,900 --> 01:14:56,900
So now when we transform this probes the out, I'm going to see what we

1438
01:14:56,900 --> 01:14:57,500
get.

1439
01:14:57,500 --> 01:14:59,800
So, here's our probe Z and you

1440
01:15:00,000 --> 01:15:02,000
Kind of see the values that we end up with here.

1441
01:15:03,800 --> 01:15:04,900
Let's look at our clip C.

1442
01:15:05,200 --> 01:15:07,200
So, our clip, see is exactly correct.

1443
01:15:07,200 --> 01:15:08,500
In this case, right?

1444
01:15:08,500 --> 01:15:12,200
We're getting literally, the perfect value app exactly what I would

1445
01:15:12,200 --> 01:15:15,300
expect to see and off we go.

1446
01:15:15,400 --> 01:15:17,700
So you know, they're, we're going

1447
01:15:21,900 --> 01:15:24,100
And so now let's try it with the far clipping plane.

1448
01:15:32,200 --> 01:15:32,900
Thank you, said that.

1449
01:15:32,900 --> 01:15:33,800
Was that a hundred?

1450
01:15:42,600 --> 01:15:44,700
Again, I guess I need to set the breakpoint.

1451
01:15:44,700 --> 01:15:46,600
So I set the debug camera first

1452
01:15:50,300 --> 01:15:51,500
And here we come through here.

1453
01:15:51,500 --> 01:15:54,900
Let's see what our clip Z is that now it's at 1 so that so that's

1454
01:15:54,900 --> 01:15:56,600
exactly what I would expect, right?

1455
01:15:56,600 --> 01:16:00,500
So this is working exactly how I was expecting it to work.

1456
01:16:00,800 --> 01:16:05,100
All right, so now let's pass a value in between those of eight and

1457
01:16:05,100 --> 01:16:05,400
see.

1458
01:16:05,400 --> 01:16:09,600
Am I just is it just that the Z is that ridiculously nonlinear?

1459
01:16:11,000 --> 01:16:15,000
That this is actually the expected value in between those two I mean

1460
01:16:15,000 --> 01:16:16,300
it could be right.

1461
01:16:16,400 --> 01:16:18,900
So let's see here, what we get, what's our Clips?

1462
01:16:18,900 --> 01:16:20,000
The so

1463
01:16:20,100 --> 01:16:21,800
What is that's the right value?

1464
01:16:22,200 --> 01:16:23,900
Wow, that is just nuts.

1465
01:16:23,900 --> 01:16:28,200
How much Z resolution you start to lose after getting only that far

1466
01:16:28,200 --> 01:16:29,300
away from the camera.

1467
01:16:34,800 --> 01:16:35,700
Am I right?

1468
01:16:37,900 --> 01:16:41,900
It's crazy how much you lose their I guess that's how divide it's the

1469
01:16:41,900 --> 01:16:44,900
inverse Square law kicking our butts.

1470
01:16:45,100 --> 01:16:49,700
At that point that's just nasty.

1471
01:16:51,600 --> 01:16:57,300
So no cause for alarm I guess but I guess there is a little bit of

1472
01:16:57,300 --> 01:17:01,500
cause for alarm which is just to say that that is not particularly

1473
01:17:01,500 --> 01:17:07,900
good resolution for us on our Z and it suggests that 0.1 maybe is too

1474
01:17:07,900 --> 01:17:11,100
close for comfort on that near clip playing.

1475
01:17:11,400 --> 01:17:16,100
Let's take a look, I'm just curious if we continue down the path of

1476
01:17:16,100 --> 01:17:17,200
fixed z-buffer.

1477
01:17:17,400 --> 01:17:18,700
I kind of wonder

1478
01:17:21,000 --> 01:17:24,400
If are near clip playing, maybe should be set something a little bit

1479
01:17:24,400 --> 01:17:27,300
further out than that.

1480
01:17:27,600 --> 01:17:32,300
I don't know if this is too far out, but I'm just curious now to know

1481
01:17:33,100 --> 01:17:37,200
what, our unprojected value would be at 8:00, if we set our near claim

1482
01:17:37,300 --> 01:17:43,400
clip playing up just a little bit, so, not particularly great even

1483
01:17:43,600 --> 01:17:43,900
even.

1484
01:17:43,900 --> 01:17:47,600
So right, just not a, not a particular Great Value.

1485
01:17:47,900 --> 01:17:49,400
I feel like this is just one good

1486
01:17:49,600 --> 01:17:53,000
Reason not to do the vanilla style Z buffer and instead use something

1487
01:17:53,000 --> 01:17:57,200
else, either floating Point Z buffer or W buffer or something like

1488
01:17:57,200 --> 01:17:59,900
this because that's just not a very good value.

1489
01:18:00,000 --> 01:18:02,100
Do you know this?

1490
01:18:02,100 --> 01:18:05,100
The range just in there is just not great, right?

1491
01:18:05,100 --> 01:18:09,800
If you think about how that's going to map that just makes me a very

1492
01:18:09,800 --> 01:18:10,500
nervous.

1493
01:18:12,900 --> 01:18:18,300
A very nervous Nancy at that point so that's probably something to

1494
01:18:18,300 --> 01:18:18,900
look at.

1495
01:18:19,300 --> 01:18:22,600
I'm going to go ahead and make a note of that in the to-do list here.

1496
01:18:23,700 --> 01:18:24,700
I'm going to say

1497
01:18:38,400 --> 01:18:43,200
So we should just think that through and try to come up with yes

1498
01:18:43,200 --> 01:18:43,900
something there.

1499
01:18:44,200 --> 01:18:45,200
I don't suppose.

1500
01:18:45,200 --> 01:18:46,600
Oh wow, that is lucky.

1501
01:18:46,600 --> 01:18:48,100
I just happened to look over at the chat.

1502
01:18:48,100 --> 01:18:52,500
I was like, I wonder if Alan is watching right now and I just happen

1503
01:18:52,500 --> 01:18:53,400
to look over and see mr.

1504
01:18:53,400 --> 01:18:56,100
Fourth dimension is talking in the chat right now.

1505
01:18:58,100 --> 01:19:04,100
So basically here is a question for Alan which is that?

1506
01:19:04,300 --> 01:19:05,600
I don't know if you've thought about this at all.

1507
01:19:05,600 --> 01:19:06,800
I know it's a weird problem.

1508
01:19:06,900 --> 01:19:16,200
But when I Keep to-do lists, in this case, I wanted to make it so that

1509
01:19:16,800 --> 01:19:20,900
the wrapping happened, like, if it's Dash space thing, there's the

1510
01:19:20,900 --> 01:19:22,600
wrapping would like rap properly.

1511
01:19:23,000 --> 01:19:25,800
And I know, that's kind of, like, outside the scope of where for

1512
01:19:25,800 --> 01:19:29,200
coders at right now because in general, the parsing is not in the

1513
01:19:29,200 --> 01:19:30,000
custom layer.

1514
01:19:31,200 --> 01:19:36,700
But I was wondering if you would consider adding a parser mode for to

1515
01:19:36,700 --> 01:19:40,900
do outlines that, just whatever it is will comply with it.

1516
01:19:40,900 --> 01:19:44,400
So like you could just say, oh, it's just Double Dash or something, is

1517
01:19:44,400 --> 01:19:44,900
what it is.

1518
01:19:45,100 --> 01:19:46,600
And then it'll line things up.

1519
01:19:46,600 --> 01:19:49,900
So that wherever you have the Double Dash, it'll do the wrapping

1520
01:19:49,900 --> 01:19:52,600
properly on those because you've done all the work to make that happen

1521
01:19:52,600 --> 01:19:55,100
in code and I'm just wondering if there's a way that you could make it

1522
01:19:55,100 --> 01:19:57,900
for to-do list, so that it would Auto indent them properly.

1523
01:19:59,200 --> 01:20:00,000
You know what I mean?

1524
01:20:00,400 --> 01:20:00,900
And

1525
01:20:03,200 --> 01:20:05,700
I don't yeah again, I don't know.

1526
01:20:07,000 --> 01:20:08,500
I'm not even sure what I'm asking for.

1527
01:20:08,500 --> 01:20:11,500
Just, I'm asking for someone to think this through in a way that I

1528
01:20:11,500 --> 01:20:13,000
could get something out of it.

1529
01:20:13,000 --> 01:20:14,500
Maybe it needs an open.

1530
01:20:14,800 --> 01:20:15,800
You know, thing here.

1531
01:20:15,800 --> 01:20:18,500
I would be okay with putting those in just, I don't know.

1532
01:20:18,500 --> 01:20:23,300
Something that's like a good format for indent, you know, for outline

1533
01:20:23,400 --> 01:20:30,100
ning, that that could be used to keep lists because I find myself

1534
01:20:30,100 --> 01:20:32,800
doing this in for a coder now and it would be cool to have.

1535
01:20:33,100 --> 01:20:34,300
Good layout for them.

1536
01:20:34,700 --> 01:20:39,300
So I wouldn't really care if it conforms to any standard of mine.

1537
01:20:39,500 --> 01:20:41,400
I'd rather just like someone.

1538
01:20:41,900 --> 01:20:43,900
And in this case I guess would be Allen because he's the one

1539
01:20:43,900 --> 01:20:49,000
implements the parsing but to it, to figure out what's a way.

1540
01:20:49,000 --> 01:20:50,000
I could structure.

1541
01:20:50,300 --> 01:20:52,500
Simple outlined lists.

1542
01:20:53,800 --> 01:20:56,400
In a way that would allow them to be formatted properly and for a

1543
01:20:56,400 --> 01:20:59,500
coder and I'll just use that format like I'll just convert all of my

1544
01:20:59,500 --> 01:20:59,800
files.

1545
01:21:00,000 --> 01:21:03,200
List to that format and use, right?

1546
01:21:04,000 --> 01:21:05,100
Because that would be pretty great.

1547
01:21:05,100 --> 01:21:07,000
And for coder already has all the features.

1548
01:21:07,200 --> 01:21:09,400
It only just only has them for code, right?

1549
01:21:09,900 --> 01:21:10,400
That's it.

1550
01:21:14,600 --> 01:21:17,400
So, anyway, that's that's all I was going to throw that out there.

1551
01:21:18,000 --> 01:21:20,400
And I noticed you guys are talking about the virtual white space.

1552
01:21:21,200 --> 01:21:25,200
I tried turning on Virtual b a few builds ago, and the problem was, it

1553
01:21:25,200 --> 01:21:29,200
couldn't save in a way that you could debug yet, and I think that

1554
01:21:29,200 --> 01:21:30,100
might be fixed now.

1555
01:21:30,100 --> 01:21:34,500
So actually, I just updated for a coder today on both my work machines

1556
01:21:34,500 --> 01:21:38,500
and here, and so I probably am going to try returning on Virtual white

1557
01:21:38,500 --> 01:21:41,200
space because I really want to use it.

1558
01:21:41,200 --> 01:21:42,700
And I, it was just

1559
01:21:42,900 --> 01:21:44,900
The debugging that was preventing me from using it.

1560
01:21:45,000 --> 01:21:48,400
So if that's actually fixed, now I probably will go to Virtual white

1561
01:21:48,400 --> 01:21:49,000
space.

1562
01:21:51,100 --> 01:21:55,200
Like now, basically, but anyway, that's separate issue.

1563
01:21:56,700 --> 01:21:57,300
All right.

1564
01:21:57,700 --> 01:22:00,200
Anyway, near and far clipping plane distance being what they are.

1565
01:22:00,200 --> 01:22:02,700
Maybe we'll fuss with these a little bit later and figure out what the

1566
01:22:02,700 --> 01:22:03,400
problem is.

1567
01:22:03,500 --> 01:22:06,800
In terms of getting more resolution there, that's a issue, we haven't

1568
01:22:06,800 --> 01:22:09,600
really talked about much and I don't need to go into it now because

1569
01:22:09,600 --> 01:22:12,900
we're not having any actual bugs with it, but I wanted to put that on

1570
01:22:12,900 --> 01:22:15,500
the to-do list because we probably will have some bugs with it.

1571
01:22:15,600 --> 01:22:18,800
And so we should actually get our Z's story straightened out, right?

1572
01:22:20,100 --> 01:22:22,600
That being said, looking in here.

1573
01:22:24,500 --> 01:22:25,700
Now what's going on?

1574
01:22:26,700 --> 01:22:29,500
Here's you know, everything seems to be sort of a little bit more

1575
01:22:29,800 --> 01:22:31,700
solid, they working now and that's all fine.

1576
01:22:32,100 --> 01:22:34,800
But now let's go back to what we were trying to do before and debug

1577
01:22:34,800 --> 01:22:38,300
the the other problem we were having that is that when we are creating

1578
01:22:38,300 --> 01:22:39,600
these screen indexes, right?

1579
01:22:39,600 --> 01:22:43,900
I had a problem where as I start to add screens step I'm going to try

1580
01:22:43,900 --> 01:22:45,100
and stack them on top of each other.

1581
01:22:45,400 --> 01:22:46,400
We were getting some problems.

1582
01:22:46,400 --> 01:22:48,800
Like for example, I don't know what is happening here.

1583
01:22:48,800 --> 01:22:52,500
I have no idea what we're seeing here, but we're getting some kind of

1584
01:22:52,500 --> 01:22:54,100
weird situation where we've got

1585
01:22:54,300 --> 01:23:00,500
Like the camera encased somehow in some degenerate, de Jammer to

1586
01:23:01,200 --> 01:23:05,100
degenerate geometry of a layer or something.

1587
01:23:05,100 --> 01:23:08,700
I really just don't know what exactly the bug is that we're getting

1588
01:23:08,700 --> 01:23:11,400
here, but we're definitely getting some kind of a problem.

1589
01:23:11,700 --> 01:23:16,700
So, when we stack multiple worlds on top of each other, we get a bug,

1590
01:23:16,800 --> 01:23:17,300
right?

1591
01:23:18,700 --> 01:23:21,200
And we need to start debugging that because that should not be

1592
01:23:21,200 --> 01:23:21,700
happening.

1593
01:23:22,400 --> 01:23:25,800
The other thing that we probably want to do here, I wondered or

1594
01:23:25,800 --> 01:23:28,100
Direction equals 3.

1595
01:23:28,600 --> 01:23:29,500
What is door Direction?

1596
01:23:29,500 --> 01:23:34,900
Equals zero, which are, which here so door down is three-door, up, is

1597
01:23:34,900 --> 01:23:37,800
to what happens if I do the other direction.

1598
01:23:42,700 --> 01:23:43,400
Just curious.

1599
01:23:44,600 --> 01:23:49,800
So it's only if they come up closer that it's the that it's a problem,

1600
01:23:50,100 --> 01:23:50,700
right?

1601
01:23:51,500 --> 01:23:54,600
And you can see our Z offsets maybe a bit aggressive there, you can

1602
01:23:54,600 --> 01:23:58,900
see that this is it's too much Z stand up.

1603
01:23:58,900 --> 01:23:59,700
It's actually

1604
01:24:00,000 --> 01:24:01,500
Large enough that the height.

1605
01:24:01,600 --> 01:24:05,000
Although the height between I don't know if that's a reasonable height

1606
01:24:05,000 --> 01:24:06,300
between floors here.

1607
01:24:06,300 --> 01:24:11,700
That might be a little bit low ceilings if you will.

1608
01:24:13,200 --> 01:24:14,100
But yeah, you can see that.

1609
01:24:14,100 --> 01:24:18,800
That's too much offset because they start to poke through the Z here.

1610
01:24:18,800 --> 01:24:23,600
So I feel like also what we want to do is calm that Z offset down

1611
01:24:23,700 --> 01:24:25,100
that's in the push bitmap.

1612
01:24:27,500 --> 01:24:27,900
Oops.

1613
01:24:30,200 --> 01:24:31,000
Stuff here.

1614
01:24:32,300 --> 01:24:34,900
So here is where we're actually doing that Z bias.

1615
01:24:35,800 --> 01:24:40,400
You can see the Z bias here, being set to the height.

1616
01:24:40,600 --> 01:24:42,600
That's obviously like way too much.

1617
01:24:43,300 --> 01:24:46,000
So I'm not sure what we want to do, but we want to calm that down.

1618
01:24:46,000 --> 01:24:48,000
Considerably that maybe too much calming down.

1619
01:24:48,000 --> 01:24:50,700
Again, this is just a way of biasing those values.

1620
01:24:50,700 --> 01:24:56,900
So we were going to need something that sort of zoom out a little bit

1621
01:24:56,900 --> 01:24:57,200
here.

1622
01:24:59,700 --> 01:25:05,200
So that also looks a little bit wrong to me so our bias I think in our

1623
01:25:05,400 --> 01:25:10,200
in the Shader, our biases being applied incorrectly because the bias

1624
01:25:10,200 --> 01:25:12,800
should not change how we see things.

1625
01:25:15,700 --> 01:25:20,800
Based on Zoom because that should be consistent.

1626
01:25:20,900 --> 01:25:24,300
So I feel like we should double-check how that that bias is being

1627
01:25:24,300 --> 01:25:25,600
applied in the Shader as well.

1628
01:25:27,400 --> 01:25:28,600
Let's go take a look at that.

1629
01:25:32,600 --> 01:25:34,400
So, here's our code for that.

1630
01:25:35,300 --> 01:25:36,600
Here's the vertex code.

1631
01:25:37,200 --> 01:25:40,100
So, interesting for coder will now treat this as actual code.

1632
01:25:40,700 --> 01:25:41,300
Is that true?

1633
01:25:43,400 --> 01:25:44,100
Maybe not.

1634
01:25:45,600 --> 01:25:49,700
He gets confused by the gets confused by the are strings.

1635
01:25:49,700 --> 01:25:53,600
Looks like maybe I'm not sure anyway.

1636
01:25:53,600 --> 01:25:55,700
I think it used to just treat them as regular strings, I'm not sure

1637
01:25:55,700 --> 01:25:56,300
about that.

1638
01:25:57,100 --> 01:25:59,400
Anyway, so take a look in here.

1639
01:26:01,500 --> 01:26:04,900
You can see where we're using the Z bias value here.

1640
01:26:05,700 --> 01:26:12,100
When we output the position, after the transform, we take the Z vertex

1641
01:26:12,100 --> 01:26:16,200
and we add the bias to it, it should be being added in World space,

1642
01:26:16,900 --> 01:26:17,300
right?

1643
01:26:17,300 --> 01:26:20,800
And then it gets transformed through and

1644
01:26:22,800 --> 01:26:28,600
That is what we give our our transform Z.

1645
01:26:35,500 --> 01:26:36,100
Right?

1646
01:26:37,000 --> 01:26:42,700
So we do the transform on both of these and we just take the Z from

1647
01:26:42,700 --> 01:26:44,100
the one that's been biased.

1648
01:26:45,400 --> 01:26:46,500
and so,

1649
01:26:56,900 --> 01:26:59,800
to be honest, that looks correct.

1650
01:27:02,200 --> 01:27:02,800
Right?

1651
01:27:03,100 --> 01:27:08,900
So if you look at how GL position is half, is working here, right?

1652
01:27:09,700 --> 01:27:13,900
You can see that this is being pushed in and what I think would be

1653
01:27:13,900 --> 01:27:14,700
correct.

1654
01:27:19,500 --> 01:27:22,300
I guess that could be Z5 but it's this is not.

1655
01:27:22,300 --> 01:27:26,000
This is a, this is a z that's getting transformed properly.

1656
01:27:26,200 --> 01:27:29,500
So in theory, the Min and Max transformed here should be working

1657
01:27:29,500 --> 01:27:31,800
exactly as we would expect, right?

1658
01:27:34,200 --> 01:27:35,700
The Min, transform for the Z.

1659
01:27:35,700 --> 01:27:39,000
It just does this transform on the original coordinates whatever they

1660
01:27:39,000 --> 01:27:39,800
were right?

1661
01:27:39,800 --> 01:27:42,200
Not adult training them in any way.

1662
01:27:43,200 --> 01:27:46,900
And then yeah, the Z bias here is only used as far as I remember.

1663
01:27:46,900 --> 01:27:47,300
Anyway.

1664
01:27:47,300 --> 01:27:49,100
Yeah, it's only used when we're actually

1665
01:27:49,200 --> 01:27:51,100
Putting those top coordinates, right?

1666
01:27:51,100 --> 01:27:56,100
And it's as the Z4 value of the V4 final value of those that should be

1667
01:27:56,100 --> 01:27:56,700
ripe.

1668
01:27:57,400 --> 01:28:00,000
When we look at what happens in here, all we're doing is extracting

1669
01:28:00,000 --> 01:28:06,600
that W coordinate and we're passing that down as part of just the Z

1670
01:28:06,600 --> 01:28:10,100
value which should only be used for the deaf buffering, right?

1671
01:28:10,100 --> 01:28:12,900
That's the only time that that should be used and it's going

1672
01:28:12,900 --> 01:28:15,400
transformed through the transforming the standard path.

1673
01:28:16,200 --> 01:28:18,500
So again, that should just work

1674
01:28:19,700 --> 01:28:22,000
I don't know why that would be.

1675
01:28:25,300 --> 01:28:28,100
All related to zoom.

1676
01:28:28,800 --> 01:28:31,900
The only thing that happens with zoom is the Z, buffer, precision.

1677
01:28:33,500 --> 01:28:35,700
Will drop their but that's it.

1678
01:28:35,800 --> 01:28:38,600
So I want to know if that's related.

1679
01:28:38,600 --> 01:28:43,000
I don't know if it is or if it isn't a z-buffer, Precision thing.

1680
01:28:43,000 --> 01:28:46,100
I don't think it is but I want to verify, that's not what I'm going to

1681
01:28:46,100 --> 01:28:51,500
do for that to take that out of the possible set of problems is when

1682
01:28:51,500 --> 01:28:56,700
we do the z-buffer, I'm going to make it use a floating-point frame

1683
01:28:56,700 --> 01:29:02,400
buffer so that it's less likely to be sensitive to where it is in that

1684
01:29:02,400 --> 01:29:03,000
range.

1685
01:29:05,200 --> 01:29:08,000
Although I even that's not really probably what I want.

1686
01:29:08,000 --> 01:29:10,700
But let's take a look and see what we can do here.

1687
01:29:11,600 --> 01:29:15,600
So, when we actually create these frame buffers, you can see depth

1688
01:29:15,600 --> 01:29:19,500
component 32 here and I don't know.

1689
01:29:20,000 --> 01:29:23,400
I'll try setting it as an F32 to see if there's any difference.

1690
01:29:25,900 --> 01:29:26,600
Is that?

1691
01:29:29,800 --> 01:29:31,200
Let me find out what we've got here.

1692
01:29:31,200 --> 01:29:32,200
GL depth.

1693
01:29:32,800 --> 01:29:33,200
Oops.

1694
01:29:41,500 --> 01:29:43,500
No, no.

1695
01:29:46,000 --> 01:29:47,000
Thank you f.

1696
01:29:47,900 --> 01:29:50,200
They put them on the opposite side as do I here we go.

1697
01:29:50,900 --> 01:29:53,200
I just want to see what the difference is between floating point and

1698
01:29:53,200 --> 01:29:56,600
non floating point at the moment.

1699
01:29:57,800 --> 01:29:59,800
So it's the same in both cases.

1700
01:30:00,300 --> 01:30:01,800
So that's puzzling to me.

1701
01:30:01,800 --> 01:30:03,900
So that feels like I'm doing again.

1702
01:30:04,200 --> 01:30:06,700
I'm just really concerned about this.

1703
01:30:06,800 --> 01:30:10,000
It seems like we're handling those z-values incorrectly and maybe

1704
01:30:10,000 --> 01:30:11,700
that's a problem with the projection Matrix.

1705
01:30:11,800 --> 01:30:16,400
I don't know but that's just not what I would expect to see, right?

1706
01:30:16,600 --> 01:30:21,400
Because that Z bias is getting applied in World space or at least I

1707
01:30:21,400 --> 01:30:22,200
thought it was.

1708
01:30:23,400 --> 01:30:28,900
But in actuality from what you can see is that bias is dependent on

1709
01:30:28,900 --> 01:30:29,600
the cameras.

1710
01:30:30,100 --> 01:30:30,800
Distance.

1711
01:30:31,000 --> 01:30:32,800
Because this is not rotating at all.

1712
01:30:33,000 --> 01:30:37,400
So there shouldn't be really any difference in the values that are

1713
01:30:37,400 --> 01:30:38,300
going in here.

1714
01:30:38,500 --> 01:30:41,300
They're just getting projected differently, right?

1715
01:30:41,300 --> 01:30:45,500
That's the only thing that's happening is they're getting projected.

1716
01:30:47,100 --> 01:30:52,400
The projection Matrix is having different different Z, offsets, right?

1717
01:30:52,400 --> 01:30:57,100
Or the camera, transform composite projection composite Matrix.

1718
01:30:57,400 --> 01:31:01,300
I'm getting different visor and you can see very clearly that the

1719
01:31:02,400 --> 01:31:09,300
offset almost looks like it's being applied sort of in screen space if

1720
01:31:09,300 --> 01:31:09,900
you will.

1721
01:31:10,100 --> 01:31:15,800
So that as things got closer together in the in clip space, it's like

1722
01:31:15,800 --> 01:31:16,700
it was applying

1723
01:31:16,900 --> 01:31:17,900
Their June.

1724
01:31:17,900 --> 01:31:21,700
I'm saying in that doesn't make any sense to me.

1725
01:31:21,700 --> 01:31:24,100
I don't know why that would be the case.

1726
01:31:28,200 --> 01:31:31,300
So that's a bit of a Puzzler and it's impervious to weather we're

1727
01:31:31,300 --> 01:31:32,400
floating point or not.

1728
01:31:32,600 --> 01:31:36,400
So I don't think it should have shown at least some difference in the

1729
01:31:36,400 --> 01:31:37,000
artifact.

1730
01:31:37,000 --> 01:31:41,300
I feel like if it was a z-buffer, Precision issue then changing

1731
01:31:41,300 --> 01:31:42,800
between floats and fixed.

1732
01:31:43,000 --> 01:31:44,100
Should presumably.

1733
01:31:44,100 --> 01:31:46,400
Give you different results.

1734
01:31:46,700 --> 01:31:49,700
I would think, but I'm not sure.

1735
01:31:50,000 --> 01:31:51,600
I guess I can't really verify that.

1736
01:31:51,600 --> 01:31:53,000
That's 100% true.

1737
01:31:53,800 --> 01:31:56,900
I would just expect to see something slightly change between them.

1738
01:31:57,000 --> 01:31:59,400
Maybe that, maybe that's naive.

1739
01:32:01,700 --> 01:32:02,000
All right.

1740
01:32:02,000 --> 01:32:03,900
Anyway, so moving on here.

1741
01:32:04,900 --> 01:32:08,400
So the question is, why are we getting that?

1742
01:32:09,300 --> 01:32:11,700
Why are we seeing that difference, right?

1743
01:32:12,400 --> 01:32:13,600
What's going on there?

1744
01:32:14,200 --> 01:32:17,500
And so, what I want to do, let's start with some simple tests.

1745
01:32:17,800 --> 01:32:23,500
If I just said, don't bother with the Z vertex situation at all so

1746
01:32:23,500 --> 01:32:25,400
don't don't actually buy us them.

1747
01:32:26,100 --> 01:32:29,100
I'm curious, do I see any difference there, right?

1748
01:32:29,500 --> 01:32:30,500
And the answer is no.

1749
01:32:30,500 --> 01:32:34,500
So if we look at what happens in this case, all of the stuff,

1750
01:32:34,700 --> 01:32:41,400
Seems pretty consistent and I don't get any, I get a regular 3D scene

1751
01:32:42,200 --> 01:32:45,700
getting rendered exactly as one would expect here.

1752
01:32:48,900 --> 01:32:53,800
Right, I don't know if any of you guys see anything wonky but I don't

1753
01:32:54,600 --> 01:32:59,200
everything seems pretty good, right?

1754
01:33:00,200 --> 01:33:01,800
No, we are done this yet.

1755
01:33:11,900 --> 01:33:15,600
So, I'm happy with all that, that all looks relatively good to me.

1756
01:33:17,100 --> 01:33:18,600
And so then the next question is.

1757
01:33:18,600 --> 01:33:26,300
Okay, when we are doing this e bias, why wouldn't it be transforming?

1758
01:33:28,500 --> 01:33:29,800
Itself normally.

1759
01:33:32,200 --> 01:33:35,800
Why would that Z bias not be in World space?

1760
01:33:36,900 --> 01:33:39,200
Or what is the thing that makes it appear?

1761
01:33:40,300 --> 01:33:43,500
Like it's not in World space, right?

1762
01:33:43,500 --> 01:33:46,100
It's being added to Z vertex.

1763
01:33:49,400 --> 01:33:51,500
The Z coordinate of the vertex.

1764
01:33:54,000 --> 01:33:56,700
It's being added before transforming.

1765
01:33:57,300 --> 01:34:01,100
So it should in theory go through the full projection and everything

1766
01:34:01,100 --> 01:34:05,800
else and it should get minimize down to a value that's relative to its

1767
01:34:05,800 --> 01:34:06,800
distance away.

1768
01:34:08,000 --> 01:34:08,700
Right.

1769
01:34:14,000 --> 01:34:21,700
And so I just don't see, I don't see why that value.

1770
01:34:23,700 --> 01:34:26,400
Would change based on the distance from the camera.

1771
01:34:40,800 --> 01:34:44,400
So I guess one thing is how far away those things actually are from

1772
01:34:44,400 --> 01:34:49,200
the camera and how close they are to the far clipping plane it could

1773
01:34:49,200 --> 01:34:51,100
be that it doesn't really matter what the Yeah.

1774
01:34:51,100 --> 01:34:55,600
So I guess let's just try some stuff in terms of the Z Precision there

1775
01:34:57,200 --> 01:35:01,100
and we could also try doing an infinite for our clip plane to try and

1776
01:35:01,100 --> 01:35:02,600
increase the Z Precision.

1777
01:35:03,200 --> 01:35:07,500
I believe it was Sean McGrath who was saying, just always use one and

1778
01:35:07,500 --> 01:35:09,900
I do happen to always use one and actual

1779
01:35:11,500 --> 01:35:15,200
but I just do it because I don't want to bother thinking about far

1780
01:35:15,200 --> 01:35:19,200
clip planes, not because I was trying to get more Z Precision, but you

1781
01:35:19,200 --> 01:35:19,500
know,

1782
01:35:21,700 --> 01:35:22,700
whichever one works.

1783
01:35:23,400 --> 01:35:27,000
So let's do ahead and take a look at what I could do there.

1784
01:35:27,000 --> 01:35:29,800
So, if I was going to just play around with that a little bit, if I go

1785
01:35:29,800 --> 01:35:32,400
into the math, where we create the projection Matrix, what would

1786
01:35:32,400 --> 01:35:37,200
happen if I just push the near clipping plane out quite a ways, right?

1787
01:35:38,000 --> 01:35:42,000
So you know, get the near clipping plane out to a very large value,

1788
01:35:42,200 --> 01:35:42,700
right?

1789
01:35:43,500 --> 01:35:45,700
And oh I've got a re-enable that

1790
01:35:46,900 --> 01:35:47,800
Z bias there.

1791
01:35:50,300 --> 01:35:51,000
I did that.

1792
01:35:58,500 --> 01:35:59,900
Okay, so that's even weirder.

1793
01:36:00,000 --> 01:36:02,100
Look, I don't know why that why?

1794
01:36:02,100 --> 01:36:03,900
You were getting a line there?

1795
01:36:06,100 --> 01:36:06,500
Look at this.

1796
01:36:06,500 --> 01:36:07,500
Look at how odd that is.

1797
01:36:07,500 --> 01:36:08,500
Oh, that's just the front.

1798
01:36:08,500 --> 01:36:09,600
That's just the near clipping plane.

1799
01:36:09,800 --> 01:36:10,700
Clipping through.

1800
01:36:10,800 --> 01:36:11,400
Never mind.

1801
01:36:20,200 --> 01:36:23,800
So we can just really weird Behavior hero, the Z po.

1802
01:36:23,800 --> 01:36:25,300
I know what there's to the Z biases.

1803
01:36:25,300 --> 01:36:26,800
We reduce that quite a bit.

1804
01:36:28,500 --> 01:36:30,800
Let me take a look at that Z bias there.

1805
01:36:37,500 --> 01:36:39,600
Let's restore that back to the height.

1806
01:36:39,900 --> 01:36:42,300
I don't know if that Clips through at the outset or how much that

1807
01:36:42,300 --> 01:36:42,900
Clips through.

1808
01:36:50,400 --> 01:36:52,700
Just razor just really weird results.

1809
01:36:52,900 --> 01:36:55,900
I'm just, I'm very confused right now, is basically what it boils down

1810
01:36:55,900 --> 01:36:56,900
to, oops.

1811
01:37:01,100 --> 01:37:03,700
And I think something's wrong, but I'm not sure how to go about

1812
01:37:03,700 --> 01:37:04,300
looking for it.

1813
01:37:04,300 --> 01:37:07,200
So I think we're going to have to play around with this a little bit.

1814
01:37:07,200 --> 01:37:07,700
I don't know.

1815
01:37:07,700 --> 01:37:11,400
What does correct see bias value should be here probably want to.

1816
01:37:14,100 --> 01:37:19,300
Take a look at that a little more, a little more closely but there's

1817
01:37:19,300 --> 01:37:22,600
that front that near clip playing, it's quite far out.

1818
01:37:22,600 --> 01:37:25,000
You can see it clipping the geometry there, right?

1819
01:37:25,800 --> 01:37:29,900
So it's very far out right now further out that we would want and it

1820
01:37:29,900 --> 01:37:33,900
looks like again, when you zoom out to about here, you can see those

1821
01:37:34,500 --> 01:37:35,800
pretty clearly.

1822
01:37:38,300 --> 01:37:38,800
Right.

1823
01:37:39,400 --> 01:37:40,700
So what happens?

1824
01:37:40,900 --> 01:37:42,100
Let's just see.

1825
01:37:42,500 --> 01:37:47,800
So here's the first place, I start to see some of that popping.

1826
01:37:48,700 --> 01:37:54,300
I'm very curious to know if I just went into math right now and set

1827
01:37:54,500 --> 01:37:56,800
these back to what they were.

1828
01:37:57,200 --> 01:37:58,200
Does that change?

1829
01:37:58,500 --> 01:38:03,200
So it really does seem to be about our Z, right?

1830
01:38:07,900 --> 01:38:12,400
So it looks like this is just a z Precision issue to a large extent,

1831
01:38:12,400 --> 01:38:13,600
which is nuts to me.

1832
01:38:14,000 --> 01:38:16,600
I feel like we must have something kind of busted.

1833
01:38:17,900 --> 01:38:22,000
Let's take a look at how our projection Matrix compares to a standard

1834
01:38:22,000 --> 01:38:22,900
projection Matrix.

1835
01:38:23,200 --> 01:38:27,300
Maybe we did something really wrong with how we mapped it.

1836
01:38:29,900 --> 01:38:31,300
Or maybe that's just normal.

1837
01:38:31,300 --> 01:38:31,600
I don't know.

1838
01:38:31,600 --> 01:38:33,700
It just seems that's just nuts to me.

1839
01:38:34,400 --> 01:38:36,700
That that would be that sensitive.

1840
01:38:38,700 --> 01:38:40,700
So I still think something is kind of weird here.

1841
01:38:40,700 --> 01:38:42,700
Something's going something's going on.

1842
01:38:42,700 --> 01:38:45,200
That doesn't make a lot of sense, right?

1843
01:38:45,400 --> 01:38:47,200
It just feels like things are mapped

1844
01:38:48,500 --> 01:38:50,500
In a very weirdly nonlinear way.

1845
01:38:50,700 --> 01:38:51,700
So let's take a look.

1846
01:38:55,200 --> 01:38:59,600
Standard projection perspective, projection Matrix.

1847
01:39:02,700 --> 01:39:08,000
I don't really know of particularly what any of these are going to be

1848
01:39:08,200 --> 01:39:11,300
but you know, it should be anyone should be fine.

1849
01:39:11,300 --> 01:39:14,700
I don't know if there's anything.

1850
01:39:14,800 --> 01:39:16,700
I just I'm looking for a stand.

1851
01:39:16,700 --> 01:39:20,300
It's we're talking about various to standard perspective, projection

1852
01:39:20,300 --> 01:39:21,000
Matrix.

1853
01:39:22,900 --> 01:39:23,900
Let's see.

1854
01:39:48,300 --> 01:39:49,200
so,

1855
01:39:55,600 --> 01:39:58,200
This is what we want, right?

1856
01:39:59,100 --> 01:40:00,800
Near post Far Over farming, a senior.

1857
01:40:00,800 --> 01:40:04,400
And I want to just correlate with ours, so near us forever.

1858
01:40:07,300 --> 01:40:08,600
Farm - New Year.

1859
01:40:09,800 --> 01:40:12,200
Not quite the same, right?

1860
01:40:12,200 --> 01:40:14,500
We have near - far.

1861
01:40:14,900 --> 01:40:21,500
And this is two times near Times far, which is what we have over near

1862
01:40:21,500 --> 01:40:22,500
- far.

1863
01:40:23,600 --> 01:40:25,100
So, this is backwards.

1864
01:40:33,700 --> 01:40:35,600
The fact that that's backwards.

1865
01:40:36,100 --> 01:40:39,300
Probably the it's just that we have a negative one here.

1866
01:40:39,300 --> 01:40:40,400
Do they just have a one there?

1867
01:40:40,400 --> 01:40:40,600
No.

1868
01:40:40,600 --> 01:40:41,500
They have a 1 there.

1869
01:40:44,000 --> 01:40:47,800
So I'll be honest, I'm not sure how we could both be right about this.

1870
01:40:47,800 --> 01:40:49,500
Did they flip the Z range?

1871
01:40:49,500 --> 01:40:52,100
From what we normally do?

1872
01:40:53,100 --> 01:40:55,500
Because that's they have exactly what we have.

1873
01:40:55,600 --> 01:40:59,600
It's just there's a neck, an additional negative

1874
01:41:01,300 --> 01:41:01,800
Right?

1875
01:41:02,500 --> 01:41:04,700
Because they've got a farm - near there and we have new.

1876
01:41:04,800 --> 01:41:06,400
Let's check another source.

1877
01:41:31,300 --> 01:41:34,800
Again, I'm just randomly picking sources here because I don't know if

1878
01:41:34,800 --> 01:41:36,400
any of these are particularly reliable.

1879
01:41:36,400 --> 01:41:39,200
So I'm just seeing what people in general are doing

1880
01:41:41,900 --> 01:41:43,100
Let's see, no.

1881
01:41:45,100 --> 01:41:49,000
Somebody, please just show a standard projection Matrix from opengl.

1882
01:41:50,600 --> 01:41:55,200
I think I tried this before but we couldn't get one that was properly

1883
01:41:55,200 --> 01:41:56,100
written out.

1884
01:41:57,100 --> 01:41:58,200
Yeah, it was like it's all the

1885
01:41:59,500 --> 01:41:59,800
everything.

1886
01:42:00,500 --> 01:42:01,900
Munch together here.

1887
01:42:08,400 --> 01:42:12,200
Stack Overflow doesn't have the diagram and doesn't.

1888
01:42:12,500 --> 01:42:14,900
Does anybody have the original formatting?

1889
01:42:16,800 --> 01:42:18,100
All we just need is the original Fort.

1890
01:42:18,100 --> 01:42:18,800
There we go.

1891
01:42:20,000 --> 01:42:21,700
Oh, but yeah, but this one's missing.

1892
01:42:22,100 --> 01:42:23,100
What's on top?

1893
01:42:23,600 --> 01:42:27,100
So there is at least the same as ours and it's near - far in both

1894
01:42:27,100 --> 01:42:32,000
cases which is the same thing we came up with so I think maybe that

1895
01:42:32,000 --> 01:42:36,300
slide just had a bug or they were trying to map the range the other

1896
01:42:36,300 --> 01:42:40,300
way around which you know, maybe that's is what they were trying to

1897
01:42:40,300 --> 01:42:41,000
do, I don't know.

1898
01:42:46,000 --> 01:42:50,400
I wish someone else would have the actual top values in there though.

1899
01:43:01,800 --> 01:43:03,800
But it doesn't look likely.

1900
01:43:06,100 --> 01:43:06,600
Oh well.

1901
01:43:08,000 --> 01:43:09,500
So, I don't know.

1902
01:43:12,000 --> 01:43:14,400
I'm very weirded out by all of that.

1903
01:43:30,000 --> 01:43:32,900
Well, as far as I can verify, from not particularly good sources

1904
01:43:32,900 --> 01:43:36,000
though, other people do exactly the same math that we worked out.

1905
01:43:36,000 --> 01:43:39,600
So, presumably, there isn't a lot of variability there, so I don't

1906
01:43:39,600 --> 01:43:40,200
really know.

1907
01:43:41,800 --> 01:43:43,900
I'm just not sure what to make of that.

1908
01:43:48,500 --> 01:43:51,000
so, I guess one thing I would like to see

1909
01:43:52,100 --> 01:43:57,200
Is if we didn't, well probably shouldn't leave the near clipping plane

1910
01:43:57,200 --> 01:43:58,400
quite so far out there.

1911
01:44:02,100 --> 01:44:05,800
so, with the near clip playing operating in this fashion,

1912
01:44:14,600 --> 01:44:17,200
That just looks backwards at the moment.

1913
01:44:35,800 --> 01:44:38,600
It feels like we've got something messed up, right?

1914
01:44:38,700 --> 01:44:43,600
Like maybe we really do have, maybe we are a mapping the range the

1915
01:44:43,600 --> 01:44:45,000
wrong way around and open.

1916
01:44:45,000 --> 01:44:47,400
Jill actually wants it the other way or right.

1917
01:44:47,400 --> 01:44:53,700
Like maybe we do want one of our values to be negative, right?

1918
01:44:53,700 --> 01:44:57,200
Like maybe we do want that instead or something ridiculous like this,

1919
01:44:57,500 --> 01:44:58,200
I don't know.

1920
01:45:00,200 --> 01:45:01,400
In what universe?

1921
01:45:01,400 --> 01:45:02,400
That makes sense.

1922
01:45:02,400 --> 01:45:04,600
But you can see it's a little bit wonky.

1923
01:45:44,600 --> 01:45:44,900
Huh.

1924
01:45:47,000 --> 01:45:48,100
Well, this is a Puzzler.

1925
01:45:52,400 --> 01:45:56,600
I would say there's a number of reasons why it's a Puzzler for me.

1926
01:45:57,200 --> 01:46:00,700
I want to double check one more thing I want to turn off the Z bias

1927
01:46:00,700 --> 01:46:03,500
one more time just to make sure.

1928
01:46:07,100 --> 01:46:08,400
Actually, I guess, you know what I'll do?

1929
01:46:08,700 --> 01:46:11,600
We turn off the Z bias in the following way.

1930
01:46:12,200 --> 01:46:15,900
So if I come through and I'm in render group, and I look at Z bias

1931
01:46:15,900 --> 01:46:16,300
here,

1932
01:46:20,000 --> 01:46:23,300
I'm going to turn it off at this at the source here.

1933
01:46:26,400 --> 01:46:33,000
And so here you can see that everything that's is is sorting exactly

1934
01:46:33,000 --> 01:46:38,000
as you would expect and it's not sensitive to how far I move away,

1935
01:46:38,500 --> 01:46:39,000
right?

1936
01:46:40,500 --> 01:46:44,600
Everything appears to be correct in that sense.

1937
01:46:46,900 --> 01:46:48,600
And it doesn't matter how far away I get.

1938
01:46:48,600 --> 01:46:49,200
I can get out.

1939
01:46:49,200 --> 01:46:49,800
That's the far.

1940
01:46:49,800 --> 01:46:50,700
Clipping plane right there.

1941
01:46:50,700 --> 01:46:51,400
We're hitting it.

1942
01:46:52,000 --> 01:46:53,100
And it's totally fine.

1943
01:46:53,100 --> 01:46:54,500
Totally stable, right?

1944
01:46:54,500 --> 01:46:55,100
No issues.

1945
01:46:56,300 --> 01:47:02,300
now, the instant, I turn on the Z bias suddenly even the base like

1946
01:47:02,300 --> 01:47:06,600
something's really borked here because even the bottom of these

1947
01:47:06,600 --> 01:47:11,300
Sprites, now the bottom of the Sprites again, shouldn't be

1948
01:47:13,900 --> 01:47:17,200
Affected by Z bias at all because the bottom of the Sprites have a z

1949
01:47:17,200 --> 01:47:19,700
bias, value of zero and fiery.

1950
01:47:20,500 --> 01:47:23,900
So something's really messed up there because that's clearly not.

1951
01:47:23,900 --> 01:47:27,200
What's happening because the bottoms of the Sprites are wrong, not

1952
01:47:27,200 --> 01:47:28,700
just the tops of the Sprites.

1953
01:47:29,000 --> 01:47:34,500
So the Z bias is just there's something fundamental, I can pretty much

1954
01:47:34,500 --> 01:47:37,900
guarantee it that I'm not understanding about.

1955
01:47:38,800 --> 01:47:40,200
What's going on with the Z bias?

1956
01:47:40,200 --> 01:47:44,000
Like my mental model of How It's Working, is not the way it's actually

1957
01:47:44,000 --> 01:47:48,700
working because that shouldn't it should have no effect on the bottom

1958
01:47:48,700 --> 01:47:49,000
parts.

1959
01:47:49,000 --> 01:47:53,100
Of the Sprites who's Z bias value is always 0, right?

1960
01:47:55,500 --> 01:47:59,800
So something's really screwy there because that should not be

1961
01:48:00,100 --> 01:48:00,400
Panini.

1962
01:48:39,000 --> 01:48:41,700
Yeah, I cannot think of what the problem would be there.

1963
01:48:46,800 --> 01:48:50,100
And again, that bias is entirely pre transform.

1964
01:48:50,100 --> 01:48:52,800
So this is in World coordinates that are coming in.

1965
01:48:54,500 --> 01:48:58,500
So when it's biasing in Z, it's not even biasing it towards or away

1966
01:48:58,500 --> 01:48:59,500
from the camera.

1967
01:49:00,300 --> 01:49:03,000
It's biasing it upwards in World space.

1968
01:49:03,100 --> 01:49:04,800
That's the only thing it's doing

1969
01:49:06,300 --> 01:49:07,000
Right.

1970
01:49:07,300 --> 01:49:10,800
And it's biasing it so right because that's its pre transform.

1971
01:49:11,400 --> 01:49:14,400
So it shouldn't have any effect at all.

1972
01:49:14,400 --> 01:49:17,400
Even which camera were using whether we're using the debug or the

1973
01:49:17,400 --> 01:49:19,500
release or the game camera.

1974
01:49:19,700 --> 01:49:23,300
Shouldn't actually have any effect because it's the worldspace

1975
01:49:23,300 --> 01:49:24,000
movement.

1976
01:49:25,100 --> 01:49:26,900
That's is where it's happening.

1977
01:49:27,200 --> 01:49:28,900
And then it gets transferred by the transform.

1978
01:49:28,900 --> 01:49:31,200
So, the transform part is separate.

1979
01:49:31,400 --> 01:49:34,100
It's not Z bias isn't dependent on that.

1980
01:49:35,200 --> 01:49:37,700
Unlike the vertex coordinates which are right.

1981
01:49:37,700 --> 01:49:39,900
The vertex coordinates are depended on that.

1982
01:49:40,600 --> 01:49:41,800
I'm trying to think if that

1983
01:49:44,400 --> 01:49:44,800
Is.

1984
01:49:47,100 --> 01:49:48,500
At all relevant there.

1985
01:49:59,000 --> 01:50:01,200
So in push bitmap, right?

1986
01:50:01,200 --> 01:50:08,000
We are using the X and Y axes here are based on the camera, so there

1987
01:50:08,000 --> 01:50:10,300
will be Z displacement happening.

1988
01:50:11,600 --> 01:50:15,700
As you rotate the camera around and and those Sprites turned to face

1989
01:50:15,700 --> 01:50:16,000
you.

1990
01:50:16,400 --> 01:50:19,800
But in the case of what we were looking at, you know, the cameras

1991
01:50:19,800 --> 01:50:22,700
looking kind of down on the world, there isn't going to be any Z

1992
01:50:22,700 --> 01:50:28,000
displacement, other than for the y axis, the y axis will have some but

1993
01:50:28,000 --> 01:50:28,600
it will be very

1994
01:50:28,700 --> 01:50:29,100
Little.

1995
01:50:30,500 --> 01:50:34,900
Again, these axes are coming from the game camera, not the debug

1996
01:50:34,900 --> 01:50:38,600
camera, so as the debug camera becomes more oblique those things

1997
01:50:38,600 --> 01:50:40,700
aren't pitching to follow it at all.

1998
01:50:43,200 --> 01:50:45,100
So that shouldn't be affecting it either.

1999
01:50:46,100 --> 01:50:51,900
So I really just cannot see why we're getting that.

2000
01:50:54,800 --> 01:50:55,500
Why we're getting that?

2001
01:50:55,500 --> 01:50:57,000
Extremely odd result?

2002
01:50:57,300 --> 01:50:59,400
It really looks like the Z.

2003
01:51:01,100 --> 01:51:06,300
It really looks like the Z bias is getting applied in clip space.

2004
01:51:07,600 --> 01:51:08,800
That's what it looks like.

2005
01:51:10,200 --> 01:51:14,900
But I just don't see from looking at the math, I'm not figuring out

2006
01:51:14,900 --> 01:51:19,800
how there's like something about that that I just don't get.

2007
01:51:20,800 --> 01:51:27,700
So in order for that Z bias to be dependent on the camera distance, it

2008
01:51:27,700 --> 01:51:31,500
has to somehow be getting past the transform, but as far as I can

2009
01:51:31,500 --> 01:51:33,800
tell, it's always behind the transform.

2010
01:51:34,000 --> 01:51:35,600
So I'm just not sure.

2011
01:51:45,800 --> 01:51:47,400
Oh no, I am sure.

2012
01:51:50,100 --> 01:51:51,200
Wow, that's subtle.

2013
01:51:55,900 --> 01:51:57,000
I am sure now.

2014
01:51:59,000 --> 01:52:00,900
Well that's that's premature.

2015
01:52:01,900 --> 01:52:03,800
I have a good idea of why.

2016
01:52:03,800 --> 01:52:05,000
Let's say that.

2017
01:52:07,200 --> 01:52:16,700
So not quite this Z value is counting on the W value to counter divide

2018
01:52:16,700 --> 01:52:20,500
it in order to get the right position in clip space.

2019
01:52:23,000 --> 01:52:23,700
however,

2020
01:52:25,300 --> 01:52:29,400
We are passing the W from the other.

2021
01:52:29,400 --> 01:52:34,500
We're passing the the W from the upper coordinate because we want the

2022
01:52:34,500 --> 01:52:39,500
Zeeman transform X and the Zeeman, transform y to get / this w.

2023
01:52:40,500 --> 01:52:41,100
Right.

2024
01:52:43,700 --> 01:52:48,300
So what we actually want to do is we actually want to pass the Z value

2025
01:52:48,300 --> 01:52:54,100
here which when divided by the other W gives us the same result as if

2026
01:52:54,100 --> 01:52:56,300
it were divided by its W.

2027
01:52:57,500 --> 01:52:58,200
Right?

2028
01:52:58,700 --> 01:53:03,400
So oh man, you can tell I've never done a z bias in the Shader before

2029
01:53:03,400 --> 01:53:05,200
because otherwise I would have known this already.

2030
01:53:06,100 --> 01:53:07,600
I always liked learning new things.

2031
01:53:10,600 --> 01:53:12,300
Oh wait, I already did the day 374.

2032
01:53:12,900 --> 01:53:13,900
Don't need to write that again.

2033
01:53:15,000 --> 01:53:16,100
What am I talking about?

2034
01:53:16,300 --> 01:53:17,600
Well, I'm talking about this.

2035
01:53:18,500 --> 01:53:20,500
What we did when we solved our equations, right?

2036
01:53:20,500 --> 01:53:23,800
As we said like okay, we want that clip Z

2037
01:53:25,000 --> 01:53:25,600
Right?

2038
01:53:25,900 --> 01:53:28,600
The way we're going to get the our clip see is we're going to take our

2039
01:53:28,600 --> 01:53:30,800
Z value and we're going to divide by RW value.

2040
01:53:30,800 --> 01:53:31,400
Okay?

2041
01:53:31,600 --> 01:53:36,000
So what that means is we have to solve so that Z over W properly Maps

2042
01:53:36,000 --> 01:53:38,200
between negative one and one, that's what we said.

2043
01:53:38,200 --> 01:53:39,500
We were going to do, right?

2044
01:53:40,100 --> 01:53:44,200
What that means is that w and z are inexorably linked in this

2045
01:53:44,200 --> 01:53:48,900
transform, you can't modify the Z without modifying the W or where you

2046
01:53:48,900 --> 01:53:52,500
end up in Clips face will be totally different than where you should

2047
01:53:52,500 --> 01:53:54,600
have ended up for a different world space z.

2048
01:53:54,800 --> 01:53:59,300
Z, you can't just modify the the Z you're transforming in without

2049
01:53:59,300 --> 01:53:59,800
modifying the

2050
01:54:00,000 --> 01:54:04,000
W because they have to divide has pieces that have to cancel out,

2051
01:54:04,200 --> 01:54:04,700
right?

2052
01:54:06,300 --> 01:54:10,900
So what we've got here is we've got a z a bias Z if you will.

2053
01:54:10,900 --> 01:54:16,600
We've got like a z Prime over a w Prime that we want to equal a

2054
01:54:16,600 --> 01:54:18,400
particular value, right?

2055
01:54:18,500 --> 01:54:21,400
Like this is our see, this is our value, we're trying to get out,

2056
01:54:21,500 --> 01:54:22,000
right?

2057
01:54:22,800 --> 01:54:26,900
But we're actually going to do is we're actually going to be my

2058
01:54:26,900 --> 01:54:29,800
dividing that Z Prime by our original w.

2059
01:54:30,000 --> 01:54:30,300
Right?

2060
01:54:30,300 --> 01:54:31,700
The unmodified W.

2061
01:54:32,000 --> 01:54:36,700
So we need to do is we need to make some coefficient here that we can

2062
01:54:36,700 --> 01:54:43,000
multiply this this this Z by such that a times Z Prime over W is going

2063
01:54:43,000 --> 01:54:46,300
to equal Z Prime over W Prime, right?

2064
01:54:46,300 --> 01:54:49,800
We need to modify the values so that it will actually come out to the

2065
01:54:49,800 --> 01:54:50,100
thing.

2066
01:54:50,100 --> 01:54:53,500
We wanted to come out to even though we can only divide it by this

2067
01:54:53,500 --> 01:54:54,100
value.

2068
01:54:54,900 --> 01:54:59,400
so what if we multiply these out, if we said AZ Prime W Prime Rams,

2069
01:54:59,400 --> 01:55:04,300
cross multiplying equals w z Prime right in this case,

2070
01:55:06,700 --> 01:55:10,000
The Z Prime is would cancel here because you know they're the same in

2071
01:55:10,000 --> 01:55:10,600
either case.

2072
01:55:11,000 --> 01:55:14,500
So we'd get like a prime W, Prime equals w.

2073
01:55:15,900 --> 01:55:16,300
Right?

2074
01:55:17,000 --> 01:55:20,700
And that a prime value is W over W Prime.

2075
01:55:21,700 --> 01:55:25,800
So what we actually want here for our Z Prime value, is once we have

2076
01:55:25,800 --> 01:55:27,700
our Z Prime, we need to multiply it by W.

2077
01:55:27,700 --> 01:55:31,600
/ W Prime to put it into the correct space for the divided, right?

2078
01:55:32,700 --> 01:55:38,700
So in this case, we know what those two w values are going to be post

2079
01:55:38,700 --> 01:55:39,700
transform, right?

2080
01:55:39,800 --> 01:55:42,600
We had seemed in transferring zMAX transfer, we know those two W's.

2081
01:55:42,800 --> 01:55:45,500
So we need in this case, our zMAX 2

2082
01:55:45,700 --> 01:55:47,500
From Z, right?

2083
01:55:47,500 --> 01:55:52,000
We've got our special like we've got our modified Z here, and that's

2084
01:55:52,000 --> 01:55:52,800
going to come in here.

2085
01:55:59,500 --> 01:56:03,900
So our modified Z in this case has to be the original w.

2086
01:56:06,800 --> 01:56:08,900
Right /.

2087
01:56:08,900 --> 01:56:12,100
The the new W for this one.

2088
01:56:15,000 --> 01:56:18,400
And that coefficient, then multiplies the Z value.

2089
01:56:18,400 --> 01:56:20,700
We actually have to get our modified Z.

2090
01:56:24,000 --> 01:56:24,800
Right.

2091
01:56:26,300 --> 01:56:30,000
Okay, let's see if that helped.

2092
01:56:31,600 --> 01:56:32,500
Hey, guess what?

2093
01:56:34,000 --> 01:56:35,500
That was exactly what we needed.

2094
01:56:39,300 --> 01:56:42,900
Rotation in this case won't really work properly because again, that

2095
01:56:42,900 --> 01:56:46,000
bias is expecting the camera to be placed straight up and down, I

2096
01:56:46,000 --> 01:56:46,600
believe.

2097
01:56:49,400 --> 01:56:51,600
So we do have to account for some of that.

2098
01:56:51,800 --> 01:56:56,700
And we also now you can see some things that we will definitely have

2099
01:56:56,700 --> 01:56:59,700
to deal with which I'm not sure.

2100
01:57:00,100 --> 01:57:01,500
We will deal with exactly.

2101
01:57:01,700 --> 01:57:03,000
This is a pretty good point.

2102
01:57:03,000 --> 01:57:06,800
Actually, I'm not sure what to do here when we have things.

2103
01:57:06,800 --> 01:57:10,300
Like, in this situation where you've got a block, that would be a

2104
01:57:10,300 --> 01:57:11,000
obscuring.

2105
01:57:11,000 --> 01:57:12,200
One of your other blocks.

2106
01:57:12,400 --> 01:57:13,600
Something that's raising up here.

2107
01:57:14,100 --> 01:57:18,600
That actually is I guess what would happen, right?

2108
01:57:18,600 --> 01:57:19,400
The Z value.

2109
01:57:19,400 --> 01:57:23,700
As this thing goes up further, if it extends past into the other block

2110
01:57:24,300 --> 01:57:29,000
you would get that bug, right?

2111
01:57:29,000 --> 01:57:29,800
These right?

2112
01:57:30,000 --> 01:57:32,200
It's are bigger than the block their on.

2113
01:57:34,300 --> 01:57:35,800
Which is not really correct.

2114
01:57:35,800 --> 01:57:39,200
Like that should not actually be happening but the result there that

2115
01:57:39,200 --> 01:57:42,000
you get and you can see it there, right?

2116
01:57:42,800 --> 01:57:49,600
Is as that comes up through the other block, it will it will pierce

2117
01:57:49,600 --> 01:57:50,100
through it.

2118
01:57:50,100 --> 01:57:50,600
Right.

2119
01:57:51,100 --> 01:57:54,500
I'm trying to think if there if there's ways we can make that.

2120
01:57:57,500 --> 01:57:59,100
Less likely to occur.

2121
01:58:10,600 --> 01:58:16,100
I think we could and I think the way we could do that is by saying

2122
01:58:16,100 --> 01:58:21,700
that, you know what, the we could have that Z bias, being more

2123
01:58:21,700 --> 01:58:27,100
directional, if that makes sense, meaning that Z bias could could we

2124
01:58:27,100 --> 01:58:31,100
could correct that to be more like we were actually tilting the

2125
01:58:31,100 --> 01:58:35,200
Sprites in the way they actually are supposed to go rather than just

2126
01:58:35,200 --> 01:58:39,900
biasing the flat on the flat Z projected coordinate.

2127
01:58:49,400 --> 01:58:50,100
I don't think about that.

2128
01:58:50,100 --> 01:58:53,100
We may still want to play with that a little bit more but at least I'm

2129
01:58:53,100 --> 01:58:56,800
glad I figured out what that problem was because that was really

2130
01:58:56,800 --> 01:59:02,600
bugging me but now at least we know that that's not bogus anymore and

2131
01:59:02,600 --> 01:59:03,400
that's really good.

2132
01:59:04,300 --> 01:59:07,400
But like I said, we still kind of have a problem here and then I'm not

2133
01:59:07,400 --> 01:59:09,700
sure exactly how to fix that.

2134
01:59:09,700 --> 01:59:12,200
I you know, while we're on the subject of these, we might as well

2135
01:59:12,200 --> 01:59:14,700
check look into it a little bit more because I would like that to be

2136
01:59:14,700 --> 01:59:15,300
correct.

2137
01:59:15,300 --> 01:59:18,600
We are mostly correct here, but when you have a block that's much

2138
01:59:18,600 --> 01:59:18,700
lower,

2139
01:59:18,900 --> 01:59:22,400
Then another block and you're looking at them side wise.

2140
01:59:24,300 --> 01:59:27,300
And again, it's not happening in very many places but there's just a

2141
01:59:27,500 --> 01:59:29,800
couple where you can see it.

2142
01:59:30,000 --> 01:59:33,800
And so I'm trying to think of where there's really only one that's

2143
01:59:33,800 --> 01:59:36,600
really pronounced but here maybe this is a good one to look at.

2144
01:59:36,800 --> 01:59:40,300
So you can see this tree is on a block that's much lower, right?

2145
01:59:40,300 --> 01:59:44,900
It's on a block here and so when it comes up, it comes through this

2146
01:59:44,900 --> 01:59:48,500
because you can see its placement in the world you know.

2147
01:59:48,500 --> 01:59:52,800
It's going to be you kind of want it to appear behind this block even

2148
01:59:52,800 --> 01:59:53,800
though that's kind of wrong.

2149
01:59:54,200 --> 01:59:57,100
Reason that you, you get that is because the tree should be sort of

2150
01:59:57,100 --> 01:59:59,800
sticking up prospectively this way, right?

2151
02:00:00,600 --> 02:00:02,000
It should be tilted.

2152
02:00:03,500 --> 02:00:08,400
And at the moment it's not so I guess I also wonder, you know could we

2153
02:00:08,400 --> 02:00:09,000
tell them?

2154
02:00:09,000 --> 02:00:10,600
We could we leave them tilted.

2155
02:00:10,900 --> 02:00:12,200
Is that a better plan?

2156
02:00:12,300 --> 02:00:12,500
I don't know.

2157
02:00:12,500 --> 02:00:14,400
It might be or a slightly tilted.

2158
02:00:14,400 --> 02:00:16,600
I'm just going to quickly play with that, just cuz I'm interested to

2159
02:00:16,600 --> 02:00:17,000
know.

2160
02:00:17,700 --> 02:00:20,600
So if we were going to leave them slightly tilted, then basically what

2161
02:00:20,600 --> 02:00:21,300
would be happening?

2162
02:00:21,300 --> 02:00:24,000
There is the.

2163
02:00:25,400 --> 02:00:28,400
So we're using the X and Y axis of the camera here.

2164
02:00:28,700 --> 02:00:32,900
And so, what we could do instead is use a little bit of

2165
02:00:33,100 --> 02:00:40,500
What the actual Z axis is and make that be what we use for the y-axis.

2166
02:00:41,200 --> 02:00:45,200
And so, in order to do that, we need to kind of give the y-axis a

2167
02:00:45,200 --> 02:00:47,800
little bit of the actual Z.

2168
02:00:52,400 --> 02:00:56,700
Or I guess the other ways that would be give the y-axis a little bit

2169
02:00:56,700 --> 02:01:02,500
of what it actually should be rather, than strictly changing it to be

2170
02:01:02,500 --> 02:01:05,200
entirely in the cameras plane, right?

2171
02:01:05,200 --> 02:01:07,300
Because what we're doing at the moment.

2172
02:01:09,900 --> 02:01:13,100
If you think about sort of how these Sprites getting generated right,

2173
02:01:13,100 --> 02:01:17,700
if I'm looking at one of these blocks and I put a Sprite on it, then

2174
02:01:17,700 --> 02:01:21,700
really if the Sprite is standing upright, it should be kintyre Lee

2175
02:01:21,700 --> 02:01:23,400
perpendicular to it, right?

2176
02:01:23,800 --> 02:01:27,900
So you know, this is the coordinate system that we should be seeing

2177
02:01:28,700 --> 02:01:29,600
for this Sprite.

2178
02:01:29,600 --> 02:01:32,400
We're here is the y-axis, here is the eclipse x axis.

2179
02:01:32,400 --> 02:01:33,400
Here is the Z axis.

2180
02:01:33,900 --> 02:01:38,400
What were actually doing, is the Sprite is aligned with the camera, so

2181
02:01:38,400 --> 02:01:39,500
it gets a y-axis.

2182
02:01:39,700 --> 02:01:41,900
Very much not that, right?

2183
02:01:42,500 --> 02:01:44,800
So it's X and Y, axes are completely different.

2184
02:01:44,800 --> 02:01:48,600
Now if we actually were going to do it, like, you know, cure, let's

2185
02:01:48,600 --> 02:01:52,900
just show what it would look like in the, in the case of the x axis

2186
02:01:52,900 --> 02:01:57,900
and y axis, in this case, we're actually what we would expect.

2187
02:01:58,200 --> 02:02:00,000
Well, I guess it's just what.

2188
02:02:02,500 --> 02:02:03,400
Well, here we go.

2189
02:02:04,300 --> 02:02:07,200
So basically if it's an upright Sprite, then really, the only

2190
02:02:07,200 --> 02:02:08,600
difference here is, we're doing exactly this.

2191
02:02:08,600 --> 02:02:10,800
The x-axis still is what the x-axis is.

2192
02:02:11,300 --> 02:02:17,900
But in this case, the y axis, instead of being just, you know, the X

2193
02:02:17,900 --> 02:02:21,300
and in the X and Y plane, the x axis, the y axis.

2194
02:02:21,300 --> 02:02:27,800
In this case are going to be in the, the plane of Z and X instead of Y

2195
02:02:27,800 --> 02:02:28,200
and X.

2196
02:02:28,400 --> 02:02:31,700
So we're basically looking at something like this,

2197
02:02:43,200 --> 02:02:46,900
And so, if we take a look at what that looks like here is at least I

2198
02:02:46,900 --> 02:02:48,000
think I did that, right?

2199
02:02:48,100 --> 02:02:49,000
Did I do that, right?

2200
02:02:50,400 --> 02:02:51,900
No, I did that in no way.

2201
02:02:51,900 --> 02:02:52,600
Correct.

2202
02:02:57,300 --> 02:02:58,400
And that is because

2203
02:02:59,600 --> 02:02:59,800
those.

2204
02:03:00,100 --> 02:03:01,200
Is need to be undefined.

2205
02:03:01,200 --> 02:03:01,700
There we go.

2206
02:03:03,400 --> 02:03:08,300
Okay, that's what I wanted to show so you can see like this is what

2207
02:03:08,300 --> 02:03:12,000
would happen if the cards were actually just standing upright and we

2208
02:03:12,000 --> 02:03:15,600
wouldn't need the Z bias in this case because they're just in the

2209
02:03:15,600 --> 02:03:17,200
world the way they're supposed to be.

2210
02:03:17,600 --> 02:03:21,500
But the problem is when you look top down, it's ridiculous, right?

2211
02:03:21,500 --> 02:03:23,600
I mean that is not at all.

2212
02:03:23,600 --> 02:03:28,200
Going to be a playable scenario to have 2D Sprites mapped in that way,

2213
02:03:28,200 --> 02:03:28,500
right?

2214
02:03:28,500 --> 02:03:30,400
It's just it's just silly, right?

2215
02:03:30,400 --> 02:03:31,500
It doesn't make any sense.

2216
02:03:33,600 --> 02:03:34,900
But that's where they should be.

2217
02:03:35,400 --> 02:03:39,500
And so, you can see why we if you take a look at where we were getting

2218
02:03:39,500 --> 02:03:43,700
problems before, let me go ahead and zoom down in here so you can see.

2219
02:03:44,300 --> 02:03:49,000
So you can kind of see the way these Sprites should be standing up in

2220
02:03:49,000 --> 02:03:51,200
front, you know, in the positions that they're at.

2221
02:03:51,300 --> 02:03:55,100
You can see how you get away from the, the clipping problem.

2222
02:03:55,400 --> 02:03:58,300
It's because the Sprite goes out into the side.

2223
02:03:58,500 --> 02:04:02,700
And so, in our case, when it's down here, it's coming straight up this

2224
02:04:02,700 --> 02:04:02,700
way.

2225
02:04:02,900 --> 02:04:05,600
It Pierce's straight through this Cube instead of going out into the

2226
02:04:05,600 --> 02:04:10,400
side, but there might be like, I sort of saying maybe there's like a

2227
02:04:10,400 --> 02:04:12,300
middle ground there you maybe.

2228
02:04:12,300 --> 02:04:17,100
You can take the X and Y, axes and like blend them together or

2229
02:04:17,100 --> 02:04:22,000
something like this to produce a composite version that has still a

2230
02:04:22,000 --> 02:04:22,600
lot of the properties.

2231
02:04:22,600 --> 02:04:25,400
The camera transform, but doesn't have as many errors.

2232
02:04:25,400 --> 02:04:26,100
I don't know.

2233
02:04:26,700 --> 02:04:29,100
But, you know, let's say you were to do this.

2234
02:04:32,000 --> 02:04:32,600
Right.

2235
02:04:33,100 --> 02:04:37,900
What I could do then is I could do a linear blend here.

2236
02:04:37,900 --> 02:04:39,000
I never know.

2237
02:04:40,100 --> 02:04:42,700
What we call this every time I have to look it up.

2238
02:04:43,000 --> 02:04:44,300
I don't know why we called it.

2239
02:04:44,300 --> 02:04:46,400
Something that I don't recognize.

2240
02:04:48,800 --> 02:04:49,300
Lerp.

2241
02:04:49,600 --> 02:04:49,900
Yeah.

2242
02:04:53,400 --> 02:04:58,200
So if I wanted to alert these two, you know, I could do x axis 0, x

2243
02:04:58,200 --> 02:05:00,600
axis 1 and go halfway in between them.

2244
02:05:00,600 --> 02:05:02,100
That's probably way too much to go.

2245
02:05:02,100 --> 02:05:05,500
But I'm just want to see if this works at all.

2246
02:05:05,500 --> 02:05:10,200
Like, what it does, it all that will, like, kind of combine, the two

2247
02:05:10,200 --> 02:05:13,900
ways of doing those axes and not a particularly good way but it's

2248
02:05:13,900 --> 02:05:14,300
fine.

2249
02:05:18,300 --> 02:05:20,800
So there you can see sort of a combination of the two.

2250
02:05:21,300 --> 02:05:21,900
Right?

2251
02:05:22,200 --> 02:05:25,900
And it's you know just still gets a little bit upward disc.

2252
02:05:26,200 --> 02:05:29,900
So I guess you know what you could say is what if we went you know,

2253
02:05:30,300 --> 02:05:33,900
most of the way towards the camera facing one you know.

2254
02:05:35,400 --> 02:05:38,900
And you can see there now it's sort of a little better like it's still

2255
02:05:38,900 --> 02:05:40,200
not great because it still does.

2256
02:05:40,200 --> 02:05:42,100
The has the clipping problem a little bit there.

2257
02:05:42,100 --> 02:05:45,800
But you can see it kind of goes up to the side more.

2258
02:05:46,600 --> 02:05:49,400
Which maybe is a good thing, you know, I don't know.

2259
02:05:50,800 --> 02:05:58,400
So we've got some stuff to play with they're like I don't know to what

2260
02:05:58,400 --> 02:05:59,800
extent we want that.

2261
02:06:00,100 --> 02:06:04,400
The other thing we could do is say, oh, you know, maybe we'll only use

2262
02:06:05,000 --> 02:06:09,300
the that that Z value from it.

2263
02:06:09,600 --> 02:06:14,100
Maybe we'll do that and and, you know, play with that a little bit.

2264
02:06:14,100 --> 02:06:18,000
So, you know, maybe the x axis actually equals, you know?

2265
02:06:24,000 --> 02:06:27,300
And in fact, I guess the x axis itself doesn't have to do this.

2266
02:06:27,400 --> 02:06:33,400
Maybe the x axis is always x axis, one, and we only play with the

2267
02:06:33,400 --> 02:06:34,500
y-axis is first.

2268
02:06:34,500 --> 02:06:36,700
So that would look like this, right?

2269
02:06:39,000 --> 02:06:41,300
He can kind of see what that would look like, right?

2270
02:06:41,300 --> 02:06:45,900
So, the trees are still kind of slanting a little bit and that's kind

2271
02:06:45,900 --> 02:06:46,800
of cool, right?

2272
02:06:46,800 --> 02:06:48,900
That starts to look more, right?

2273
02:06:48,900 --> 02:06:53,200
Potentially to me, I don't know, a little bit hard to say, but it's

2274
02:06:53,200 --> 02:06:54,900
starting to look a little bit more, right?

2275
02:06:54,900 --> 02:06:59,000
And maybe furthermore, maybe we just add in the Z part.

2276
02:06:59,000 --> 02:07:03,700
So maybe the x-axis, the y-axis is also just the original but then the

2277
02:07:03,700 --> 02:07:08,700
y axis is z is this alert between the two of these or

2278
02:07:08,800 --> 02:07:09,400
Something.

2279
02:07:11,800 --> 02:07:15,900
You know and again since we're trying to like simulate a 3D look with

2280
02:07:15,900 --> 02:07:18,900
2D art assets, it's hard.

2281
02:07:18,900 --> 02:07:20,700
There's no right answer here.

2282
02:07:20,900 --> 02:07:24,200
We're just trying to play with sort of ways we can hack those values

2283
02:07:24,300 --> 02:07:28,400
but that kind of looks better than what we had to me.

2284
02:07:28,600 --> 02:07:30,000
Getting a little bit of that.

2285
02:07:30,000 --> 02:07:32,100
Slanting to the side in there.

2286
02:07:32,700 --> 02:07:34,200
Just feels a little bit better.

2287
02:07:36,000 --> 02:07:36,800
So, I don't know.

2288
02:07:36,800 --> 02:07:45,000
I feel like that's sort of a thing that, you know, kind of looks cool

2289
02:07:45,000 --> 02:07:50,100
or to me, and it gets a little of that bend in as well, so I kind of

2290
02:07:50,100 --> 02:07:51,400
feel like that's may be good.

2291
02:07:53,500 --> 02:07:55,500
Also the Z bias doesn't have to come in there.

2292
02:07:55,700 --> 02:08:00,300
I don't know what the right value is lerp wise for that you know maybe

2293
02:08:00,300 --> 02:08:03,700
we want even more of that in there there's more of a slant to it,

2294
02:08:03,700 --> 02:08:04,300
right?

2295
02:08:05,300 --> 02:08:13,700
And that's looks a little bit too much certainly but yeah, I don't

2296
02:08:13,700 --> 02:08:14,100
know.

2297
02:08:14,200 --> 02:08:18,600
Having a little bit of that lerp does seem kind of good.

2298
02:08:21,100 --> 02:08:21,700
So, I don't know.

2299
02:08:22,500 --> 02:08:23,900
I may want to leave that in there.

2300
02:08:24,900 --> 02:08:25,800
We'll find out.

2301
02:08:27,200 --> 02:08:28,400
Just the slightest band.

2302
02:08:38,000 --> 02:08:41,700
And so again, just so you can see what that's actually doing.

2303
02:08:43,500 --> 02:08:46,400
Here's the debug camera so you can see that.

2304
02:08:46,400 --> 02:08:50,500
Now, what we're doing is we're still aligning with the camera but

2305
02:08:50,500 --> 02:08:55,700
we're just giving it a little more of the upward tilt than it.

2306
02:08:55,700 --> 02:08:59,400
So it's, they're standing upright a little more than they used to

2307
02:08:59,400 --> 02:08:59,800
stand up.

2308
02:09:00,200 --> 02:09:01,000
Right.

2309
02:09:03,100 --> 02:09:07,900
So we're kind of artificially inflating that stacking from what it was

2310
02:09:08,200 --> 02:09:10,000
that's all that's happening there, right?

2311
02:09:12,300 --> 02:09:12,800
So I don't know.

2312
02:09:17,600 --> 02:09:19,000
All right, let's go to questions.

2313
02:09:23,800 --> 02:09:26,300
Today we ended up investigating something I wasn't even planning to

2314
02:09:26,300 --> 02:09:29,900
investigate, but that was pretty educational for me.

2315
02:09:29,900 --> 02:09:34,800
I like, as I've never tried playing with a 2dz bias kind of a thing

2316
02:09:34,800 --> 02:09:35,600
like this before.

2317
02:09:36,300 --> 02:09:41,300
So I had no real expectations of what we would see there in terms of

2318
02:09:41,300 --> 02:09:44,200
problems and that was really interesting.

2319
02:09:44,200 --> 02:09:47,100
I was like, oh, right because this is going into Clips face the W and

2320
02:09:47,100 --> 02:09:48,400
the Z have to work together.

2321
02:09:48,400 --> 02:09:50,500
You can't just shove one of them in there.

2322
02:09:50,500 --> 02:09:52,800
That's not really going to do what you think it's going to do.

2323
02:09:52,800 --> 02:09:53,400
And so that was pretty.

2324
02:09:53,600 --> 02:09:53,800
Good.

2325
02:09:53,800 --> 02:09:55,100
I'm glad I learned that that was

2326
02:09:56,700 --> 02:09:57,700
That was, that was cool.

2327
02:10:18,700 --> 02:10:21,800
All right, so, let's see.

2328
02:10:22,300 --> 02:10:24,700
Question I am a fairly immature programmer.

2329
02:10:24,700 --> 02:10:29,300
I have dab dabbled in Java flavors of C, Python and Ruby while I was

2330
02:10:29,300 --> 02:10:29,900
in university.

2331
02:10:29,900 --> 02:10:32,900
My question is, how would you suggest with progressing your

2332
02:10:32,900 --> 02:10:36,200
Proficiency in a particular language is the best to follow tutorials.

2333
02:10:45,600 --> 02:10:49,700
I guess what I would say is it's it depends kind of where you're at

2334
02:10:51,600 --> 02:10:56,700
certainly tutorials and like reading other people's writings on how

2335
02:10:56,700 --> 02:11:03,900
they did things in this language when you're earlier on in your

2336
02:11:03,900 --> 02:11:09,700
programming, education is important because, you know, you won't think

2337
02:11:09,700 --> 02:11:14,800
of all of the stuff on your own and you want to kind of learn from

2338
02:11:15,000 --> 02:11:18,100
People who have already done a lot of thinking about it.

2339
02:11:19,900 --> 02:11:23,700
As you get further along in your programming, one of the problems is

2340
02:11:23,700 --> 02:11:26,600
there's just a lot of bad ideas out there too.

2341
02:11:27,500 --> 02:11:30,700
And in addition to ideas that are just objectively bad which there

2342
02:11:30,700 --> 02:11:35,600
are, there's also ideas which are subjective Lee bad so there's ideas

2343
02:11:35,600 --> 02:11:37,600
that are just no one should be following.

2344
02:11:39,000 --> 02:11:42,000
And again if you're a beginner program or you don't really know and so

2345
02:11:42,000 --> 02:11:44,400
when you're looking tutorials you may just be seeing just really bad

2346
02:11:44,400 --> 02:11:45,000
ideas.

2347
02:11:46,100 --> 02:11:49,600
But then there's also just a question of how you like to program and

2348
02:11:49,600 --> 02:11:54,000
what you find effective for you getting stuff done and that's

2349
02:11:54,000 --> 02:11:54,800
subjective.

2350
02:11:56,100 --> 02:11:58,800
And so, that's the other problem with following tutorials is you,

2351
02:11:58,800 --> 02:11:59,800
maybe learning

2352
02:12:00,000 --> 02:12:02,200
That subjectively don't work very well for you.

2353
02:12:03,400 --> 02:12:06,800
So, you kind of are in the situation where, as you move forward

2354
02:12:06,800 --> 02:12:12,000
programming, you have to kind of get both things working together.

2355
02:12:12,200 --> 02:12:17,500
You need to First find reasonable sources of new ideas.

2356
02:12:17,600 --> 02:12:21,500
That will give you ideas that you don't have yet about how to program

2357
02:12:21,500 --> 02:12:24,500
and techniques you can use to tackle various problems.

2358
02:12:25,500 --> 02:12:26,100
Right.

2359
02:12:26,100 --> 02:12:27,100
Handmade hero is one.

2360
02:12:27,100 --> 02:12:28,500
Way of watching somebody program.

2361
02:12:28,500 --> 02:12:30,500
See, you can see the kind of techniques I do.

2362
02:12:30,700 --> 02:12:33,200
If you haven't thought of these techniques before haven't been exposed

2363
02:12:33,200 --> 02:12:33,600
to them.

2364
02:12:33,700 --> 02:12:35,100
Now, you know, them and you can go.

2365
02:12:35,100 --> 02:12:36,600
Do I think that's a good technique?

2366
02:12:36,600 --> 02:12:39,500
Do I not think it's good technique later and kind of integrated into

2367
02:12:39,500 --> 02:12:39,600
it?

2368
02:12:39,600 --> 02:12:40,200
Right?

2369
02:12:41,400 --> 02:12:43,000
There's lots of other sources, you can go to it.

2370
02:12:43,000 --> 02:12:45,800
There's other people, you can watch program on Twitch.

2371
02:12:45,800 --> 02:12:49,500
There's tutorials you can go read, etcetera, etcetera, in all kinds

2372
02:12:49,500 --> 02:12:50,100
different languages.

2373
02:12:50,100 --> 02:12:52,900
Like you said, depending on which language, you want to learn at any

2374
02:12:52,900 --> 02:12:55,100
given time, I would say, probably pick one.

2375
02:12:55,300 --> 02:12:56,300
Stick with it for a little while.

2376
02:12:56,300 --> 02:12:58,800
It's probably not a great idea to if you're trying to learn to be a

2377
02:12:58,800 --> 02:13:01,600
better programmer to be bouncing around to lots of languages because

2378
02:13:01,600 --> 02:13:02,700
that's adding more complexity.

2379
02:13:02,700 --> 02:13:04,300
So I'd say maybe pick one language.

2380
02:13:04,300 --> 02:13:07,500
You want to focus on for for a little while first and then you know

2381
02:13:07,500 --> 02:13:14,000
maybe explain that a little bit later but then what I would say is

2382
02:13:14,000 --> 02:13:18,600
also as you're gaining more of that sort of exposure to techniques,

2383
02:13:19,000 --> 02:13:23,300
try to start to then start being critical of them, right?

2384
02:13:23,300 --> 02:13:25,100
And not necessarily critical of them.

2385
02:13:25,300 --> 02:13:28,100
From a, this is good or bad, an objective sense but critical of them

2386
02:13:28,100 --> 02:13:32,700
from your perspective as you practice programming and try things, go

2387
02:13:33,000 --> 02:13:35,800
did these techniques learn well for me which of these techniques are

2388
02:13:35,800 --> 02:13:39,900
working in which of them aren't and start to develop a good mental

2389
02:13:39,900 --> 02:13:44,600
process there where you go evaluate, don't just do something because

2390
02:13:44,600 --> 02:13:49,000
you saw it on this show or another show or in a tutorial, it may not

2391
02:13:49,000 --> 02:13:50,500
work for you, right?

2392
02:13:52,300 --> 02:13:55,200
And so start to develop a good habit of assessing

2393
02:13:55,300 --> 02:13:58,200
Programming techniques for your own use.

2394
02:13:58,500 --> 02:14:00,400
Are they working for me or aren't they?

2395
02:14:00,700 --> 02:14:04,400
And that is very important to learn because if all you ever do is just

2396
02:14:04,400 --> 02:14:06,900
use techniques you saw because someone said they were good or

2397
02:14:06,900 --> 02:14:13,100
something that's going to hold you back because the chances that all

2398
02:14:13,100 --> 02:14:16,100
the things that say I find effective when I'm programming because

2399
02:14:16,100 --> 02:14:17,200
that's the way my brain works.

2400
02:14:17,200 --> 02:14:20,300
And it's the way I program most effectively, the chances that that's

2401
02:14:20,300 --> 02:14:23,700
going to be exactly right for you are low, right?

2402
02:14:23,700 --> 02:14:25,000
There's probably different

2403
02:14:25,200 --> 02:14:28,700
Ways that you will conceptualize problems and different ways you will

2404
02:14:28,700 --> 02:14:29,400
solve them.

2405
02:14:29,600 --> 02:14:33,200
That might be subtly different from mine or very different from mine.

2406
02:14:33,400 --> 02:14:37,400
And if you don't have a good way of moving yourself towards those,

2407
02:14:37,400 --> 02:14:41,700
you're always going to be held back by programming in my style or

2408
02:14:41,700 --> 02:14:45,400
somebody else's style or some mix of styles that isn't the right mix

2409
02:14:45,400 --> 02:14:49,200
for you and so I don't pretend that that's easy to do.

2410
02:14:49,200 --> 02:14:54,400
It's not it takes a long time to come up with that taste of like what

2411
02:14:54,400 --> 02:14:55,100
are effective.

2412
02:14:55,300 --> 02:14:59,000
But I would just encourage you to do some objective analysis there.

2413
02:14:59,500 --> 02:14:59,800
Take

2414
02:15:00,000 --> 02:15:02,900
I'm in your programming to actually try to measure.

2415
02:15:04,200 --> 02:15:07,800
Write some code specifically, using a couple different techniques and

2416
02:15:07,800 --> 02:15:09,000
compare the results.

2417
02:15:09,100 --> 02:15:10,800
Which ones went better for you?

2418
02:15:10,800 --> 02:15:11,800
Which ones do you do?

2419
02:15:11,800 --> 02:15:15,100
Like the looks of more, do you find you can manage more easily?

2420
02:15:15,100 --> 02:15:20,600
You know, which ones are easier for your brain to wrap around and and

2421
02:15:20,600 --> 02:15:25,100
that I think would would probably

2422
02:15:27,100 --> 02:15:30,800
Be good advice for basically, anybody who is kind of coming to that

2423
02:15:30,800 --> 02:15:33,900
point in programming, where they've gotten enough exposure, that they

2424
02:15:33,900 --> 02:15:37,000
kind of know what's going on, but they haven't really turned that

2425
02:15:37,000 --> 02:15:37,800
corner too.

2426
02:15:38,500 --> 02:15:42,700
I know what's, what's an effective way to program for me, you know?

2427
02:15:49,600 --> 02:15:50,900
Hedge 1993's.

2428
02:15:50,900 --> 02:15:52,600
What is z transform?

2429
02:15:53,700 --> 02:15:57,000
Are you talking about in the open gel layer?

2430
02:15:57,000 --> 02:16:01,500
Are you talking about this here or you talk about like the min/max

2431
02:16:01,500 --> 02:16:02,200
transform?

2432
02:16:03,100 --> 02:16:06,700
That's something I know of that would fall into the name z-transform.

2433
02:16:07,100 --> 02:16:08,100
In this case, what's happening?

2434
02:16:08,100 --> 02:16:10,600
This is the vertex transform code.

2435
02:16:10,600 --> 02:16:13,600
So all the vertices that come down for all of the Sprites in the game,

2436
02:16:13,600 --> 02:16:15,900
pass through this piece of code.

2437
02:16:15,900 --> 02:16:16,700
And what's Happening Here

2438
02:16:16,900 --> 02:16:20,300
Is, you know, normally what you would see in a just a vanilla Shader

2439
02:16:20,300 --> 02:16:23,900
is you just literally see, like this line of code, you just see

2440
02:16:23,900 --> 02:16:27,700
transform times the vertex and this transform is the full transform.

2441
02:16:27,700 --> 02:16:30,600
It's the camera plus projection transforming one Matrix.

2442
02:16:31,100 --> 02:16:35,000
So it's the thing that takes World space on one side which is here and

2443
02:16:35,000 --> 02:16:38,299
transforms it into clip, space for opengl and the other side.

2444
02:16:40,200 --> 02:16:45,000
This however, this transform times in vertex here that doesn't help us

2445
02:16:45,000 --> 02:16:46,900
do our fake Sprite Z biasing.

2446
02:16:46,900 --> 02:16:51,299
Because remember we're 2D art but we're drawing in 3D which is a weird

2447
02:16:51,299 --> 02:16:52,700
hybrid way to place the be.

2448
02:16:52,700 --> 02:16:56,700
So you end up having to do some weird hacks, to figure out how to make

2449
02:16:56,700 --> 02:16:59,200
things harmonize properly in that world.

2450
02:17:00,100 --> 02:17:03,700
And so, what we do is we transform twice once with the real-world

2451
02:17:03,700 --> 02:17:08,799
position, and once with a offset of world position as specified by the

2452
02:17:08,799 --> 02:17:09,500
input vertex,

2453
02:17:09,700 --> 02:17:10,700
Import vertex is W.

2454
02:17:10,700 --> 02:17:13,500
Coordinate is actually secretly, A-Z biasing value.

2455
02:17:13,799 --> 02:17:14,400
We do that.

2456
02:17:14,400 --> 02:17:18,200
And then we compute what the Z value would be.

2457
02:17:18,200 --> 02:17:23,100
If it were actually offset by this, this Z bias value that's coming in

2458
02:17:23,299 --> 02:17:25,600
and that's what we use for depth sorting.

2459
02:17:26,100 --> 02:17:29,600
So it's just a way for us to make Sprite cards which are not standing

2460
02:17:29,600 --> 02:17:33,700
upright appear, like they're standing upright in terms of sorting,

2461
02:17:33,900 --> 02:17:37,700
even though they're not drawn that way, in terms of spatial, right?

2462
02:17:52,600 --> 02:17:54,799
How many draw calls with the profiler open up?

2463
02:17:54,900 --> 02:17:57,400
We're not really counting draw calls yet, unfortunately.

2464
02:17:57,400 --> 02:17:59,000
So we don't have a way of doing that.

2465
02:17:59,000 --> 02:17:59,799
We could add account

2466
02:18:00,000 --> 02:18:01,500
That but we don't have one at the moment.

2467
02:18:09,200 --> 02:18:10,299
Every shoe a few streams.

2468
02:18:10,299 --> 02:18:13,299
Go you showed a function that tells opengl to call us back with

2469
02:18:13,299 --> 02:18:13,799
messages.

2470
02:18:13,799 --> 02:18:16,799
Do you think it can help debug opengl issues instead of sticking Jill,

2471
02:18:16,799 --> 02:18:18,000
get error after every call?

2472
02:18:18,100 --> 02:18:18,500
Yes.

2473
02:18:18,500 --> 02:18:19,799
In fact that's exactly what it's for.

2474
02:18:20,700 --> 02:18:25,299
The whole point of that, debug callback is if you are asking for an

2475
02:18:25,299 --> 02:18:28,200
opengl context, that supports that

2476
02:18:30,000 --> 02:18:32,500
And in our case, we just ask the extensions there and it's essentially

2477
02:18:32,500 --> 02:18:33,200
a return it on.

2478
02:18:33,600 --> 02:18:37,200
If you have that extension on, then you should most of the time

2479
02:18:37,200 --> 02:18:41,200
because we also enable the synchronous debug reporting.

2480
02:18:41,500 --> 02:18:45,799
So if you if that happens then what you

2481
02:18:47,799 --> 02:18:50,799
What you should see occur is, as much as the driver can.

2482
02:18:50,799 --> 02:18:53,900
It will immediately interrupt the flow of the code and call that back

2483
02:18:53,900 --> 02:18:57,799
as soon as you've done something wrong so you should be able to avoid

2484
02:18:57,799 --> 02:19:00,100
having to spam GL, get error everywhere.

2485
02:19:00,700 --> 02:19:04,799
If you have a driver that supports error reporting via the debug

2486
02:19:04,900 --> 02:19:05,799
error, callback.

2487
02:19:06,400 --> 02:19:09,799
So I highly recommend turning that on if you have it available, yes.

2488
02:19:13,799 --> 02:19:15,799
Arif, when the new assets Gonna Be Ready.

2489
02:19:15,799 --> 02:19:17,100
Other new assets are ready.

2490
02:19:17,100 --> 02:19:22,400
I just haven't had a chance to actually use them yet, So eventually we

2491
02:19:22,400 --> 02:19:23,000
can switch to them.

2492
02:19:23,000 --> 02:19:24,100
I just haven't had a chance.

2493
02:19:35,200 --> 02:19:39,500
Holst 80 scenario is that handmade here is expanding 23 programmers.

2494
02:19:39,500 --> 02:19:42,200
And to need to understand the architecture you've designed how would

2495
02:19:42,200 --> 02:19:45,500
you recommend that they get into the code and understand the

2496
02:19:45,500 --> 02:19:46,299
architecture?

2497
02:19:46,799 --> 02:19:49,700
What would you need to do to prepare the system for such a scenario?

2498
02:19:51,800 --> 02:19:52,600
Hmm.

2499
02:19:54,600 --> 02:19:57,700
So I guess my answer that would depend a lot on the programmers.

2500
02:19:58,100 --> 02:19:58,700
Right.

2501
02:19:59,400 --> 02:20:03,600
So you know, if you're like well the programmers are like, you know,

2502
02:20:04,800 --> 02:20:06,200
Fabien and John.

2503
02:20:07,000 --> 02:20:08,200
I'd be like nothing.

2504
02:20:08,300 --> 02:20:11,500
They'll just day would be fine in here, right?

2505
02:20:11,500 --> 02:20:14,700
It would just there, be nothing that would need to happen.

2506
02:20:14,700 --> 02:20:18,900
They would just know what was going on and they would be fine, right?

2507
02:20:19,600 --> 02:20:22,200
And they would have a bunch of things that are in the code base are

2508
02:20:22,200 --> 02:20:24,100
not the way they would want them to be done.

2509
02:20:24,100 --> 02:20:24,300
I'm sure.

2510
02:20:24,400 --> 02:20:28,800
We're but they wouldn't be surprised by anything and you know, it

2511
02:20:28,800 --> 02:20:30,100
would be whatever.

2512
02:20:31,000 --> 02:20:34,800
If instead you told me like okay these are two like interns from like

2513
02:20:34,900 --> 02:20:36,000
college or something.

2514
02:20:36,000 --> 02:20:39,100
So they may have no idea what's going on in aren't super familiar

2515
02:20:39,100 --> 02:20:42,200
with, you know, production, programming, and whatever.

2516
02:20:44,700 --> 02:20:48,400
Then I would probably want to do things a bit differently.

2517
02:20:48,400 --> 02:20:52,700
So first of all, I would want to know what are these people going to

2518
02:20:52,700 --> 02:20:54,200
be working on, right?

2519
02:20:54,900 --> 02:20:57,900
And once I know what they're going to be working on, I might go to

2520
02:20:57,900 --> 02:20:59,600
those sections of the code.

2521
02:21:00,000 --> 02:21:01,400
A hardened them a bit.

2522
02:21:01,500 --> 02:21:07,400
So I pull out the parts that I expect people to must with and make

2523
02:21:07,400 --> 02:21:11,600
those sort of clearer internet and probably provide additional API

2524
02:21:11,900 --> 02:21:20,300
design work there, that was intended to clearly articulate to the

2525
02:21:20,300 --> 02:21:21,400
novice programmer.

2526
02:21:21,400 --> 02:21:24,300
What these sections of code were supposed to do and how?

2527
02:21:25,200 --> 02:21:29,500
And I would probably add a few top-level comments to some H files that

2528
02:21:29,500 --> 02:21:29,800
would say.

2529
02:21:30,000 --> 02:21:32,500
Say here's how this API is meant to be used.

2530
02:21:32,500 --> 02:21:34,200
Just so you understand, right?

2531
02:21:40,500 --> 02:21:43,200
So, you know, I guess that's, that's what I would say.

2532
02:21:50,200 --> 02:21:54,500
If we went further and said I'm going to ship this engine to people,

2533
02:21:54,500 --> 02:21:57,100
and they're going to build their own games on top of it, right?

2534
02:21:57,200 --> 02:21:59,100
I would want to do a lot more work.

2535
02:21:59,400 --> 02:22:03,000
So in that case, I'm now thinking about like a maintenance style

2536
02:22:03,000 --> 02:22:09,500
project and I would want to really sit down and work the apis and

2537
02:22:09,500 --> 02:22:11,800
decide exactly what the boundary was.

2538
02:22:11,800 --> 02:22:16,800
And I, because, right now, right, when it's my code and I'm the only

2539
02:22:16,800 --> 02:22:19,600
one working on it, then keeping everything flew.

2540
02:22:19,700 --> 02:22:22,400
We did until I want to lock down a section.

2541
02:22:22,400 --> 02:22:24,500
For some reason, like testing or something.

2542
02:22:24,800 --> 02:22:27,800
Is always the best way to go because otherwise you're just burning

2543
02:22:27,800 --> 02:22:30,200
friction on doing a bunch of work.

2544
02:22:30,200 --> 02:22:32,000
That doesn't need to be done, right?

2545
02:22:34,200 --> 02:22:35,100
and one of the

2546
02:22:38,400 --> 02:22:41,200
Common mistakes, you see, programmers, make not just beginners.

2547
02:22:41,200 --> 02:22:46,800
But even people who've been pregnant for a long time, you end up in

2548
02:22:46,800 --> 02:22:52,200
circumstances, where you'll see them spend a lot of time on code, that

2549
02:22:52,200 --> 02:22:54,800
doesn't do anything because they're in.

2550
02:22:54,800 --> 02:22:58,300
They've been trained that there's a certain idea of what good code

2551
02:22:58,300 --> 02:23:01,700
looks like without appreciating the fact that there is no such thing

2552
02:23:01,700 --> 02:23:06,100
as what, good code looks like code always has objectives and what

2553
02:23:06,100 --> 02:23:08,100
makes good code is how well it matches those.

2554
02:23:08,300 --> 02:23:08,500
Is.

2555
02:23:08,700 --> 02:23:12,200
And so, if you're doing stuff, like declaring private, operator equals

2556
02:23:12,200 --> 02:23:15,900
four classes that you are only using internally and are never going to

2557
02:23:15,900 --> 02:23:18,000
make an operator equals error for you have.

2558
02:23:18,000 --> 02:23:19,900
Just wasted your time, right?

2559
02:23:20,000 --> 02:23:23,400
Not to mention added code, that adds complexity to the code base, that

2560
02:23:23,400 --> 02:23:24,300
doesn't do anything.

2561
02:23:26,100 --> 02:23:28,800
And so it's very important to always keep in mind.

2562
02:23:29,800 --> 02:23:31,700
What are you trying to accomplish?

2563
02:23:31,900 --> 02:23:36,400
And what code will accomplish that most effort with the most efficacy,

2564
02:23:36,400 --> 02:23:36,900
right?

2565
02:23:38,000 --> 02:23:42,900
And so that's why I say like a question like oh you need to have other

2566
02:23:42,900 --> 02:23:45,700
programmers work on this or things like that.

2567
02:23:48,000 --> 02:23:48,800
I always want to know.

2568
02:23:48,800 --> 02:23:52,300
Well, what am I actually trying to deliver to these to these new

2569
02:23:52,300 --> 02:23:53,000
programmers?

2570
02:23:53,700 --> 02:23:55,400
What kind of programmers are they?

2571
02:23:55,500 --> 02:23:58,400
Because what I'm going to deliver in the changes, I've got to make to

2572
02:23:58,400 --> 02:23:59,800
work with more programmers are going to be

2573
02:24:00,000 --> 02:24:02,800
Very dependent on who those fragments are.

2574
02:24:03,000 --> 02:24:07,600
How much do I expect them to understand what I'm doing?

2575
02:24:08,400 --> 02:24:11,400
How isolated do I need to keep the code from them?

2576
02:24:11,800 --> 02:24:13,200
How much maintenance work?

2577
02:24:13,200 --> 02:24:15,700
Do I need to do across the boundary, blah, blah, blah, blah.

2578
02:24:15,800 --> 02:24:19,200
All of that comes into play and it can range everywhere from I'm

2579
02:24:19,200 --> 02:24:22,900
shipping an engine to external people who have no idea what's going

2580
02:24:22,900 --> 02:24:24,900
on, who may be very beginner programmers.

2581
02:24:25,100 --> 02:24:27,300
I need to maintain the code for them blah blah.

2582
02:24:27,400 --> 02:24:29,700
You know, which is the hardest core level of.

2583
02:24:30,000 --> 02:24:34,200
Meaning, I'm going to do there all the way to, my friends are coming

2584
02:24:34,200 --> 02:24:35,300
to work on this thing.

2585
02:24:35,300 --> 02:24:36,600
They're experts.

2586
02:24:36,600 --> 02:24:39,900
They know how to code this as well, or better than I do in all cases

2587
02:24:39,900 --> 02:24:42,500
and I don't have to do anything right.

2588
02:24:42,500 --> 02:24:44,600
They're just going to go and it's going to be fine.

2589
02:24:45,500 --> 02:24:48,300
And we'll have some friction along the way when they expect something

2590
02:24:48,300 --> 02:24:48,700
to work one way.

2591
02:24:48,700 --> 02:24:51,800
And it doesn't, or I expect something, they wrote work woman doesn't,

2592
02:24:51,800 --> 02:24:54,400
and we'll have a little bit of a snafu there, but it's minor.

2593
02:24:54,600 --> 02:24:57,600
And any time spent trying to avoid them would be a waste of time,

2594
02:24:57,900 --> 02:24:58,400
right?

2595
02:25:04,200 --> 02:25:07,300
All right, I'll take one more question here.

2596
02:25:09,300 --> 02:25:10,700
Ron Paul Vivo.

2597
02:25:10,700 --> 02:25:14,700
I know you don't really like object-oriented programming design but

2598
02:25:14,700 --> 02:25:17,800
can you provide some ways you might take advantage of hoop design in

2599
02:25:17,800 --> 02:25:18,700
handmade hero?

2600
02:25:20,300 --> 02:25:23,500
So I guess what I would say is I typically try to say the same thing

2601
02:25:24,100 --> 02:25:27,100
to hammer home the same point about object-oriented programming,

2602
02:25:29,700 --> 02:25:30,800
Whenever it's discussed.

2603
02:25:32,100 --> 02:25:34,000
The problem with object-oriented programming is just the

2604
02:25:34,000 --> 02:25:35,000
object-oriented part.

2605
02:25:35,200 --> 02:25:37,400
I've tried to say that a lot of times I'm just I'll say it one more

2606
02:25:37,400 --> 02:25:38,900
time to try and Hammer it home.

2607
02:25:41,200 --> 02:25:46,700
And and that is to say that there isn't any specific element of the

2608
02:25:47,000 --> 02:25:54,000
object-oriented design results that is particularly problematic.

2609
02:25:54,100 --> 02:25:57,600
Like, you know, there are times when you want to hide implementation

2610
02:25:57,600 --> 02:25:59,000
of things, there are times.

2611
02:25:59,200 --> 02:26:03,600
And you want to have things broken into pieces that, you know, are

2612
02:26:03,600 --> 02:26:06,200
decoupled, and you want to do, you know, there's there's times when

2613
02:26:06,200 --> 02:26:10,300
all of the things you might see in a object-oriented programming could

2614
02:26:10,300 --> 02:26:12,900
be relevant to a good design.

2615
02:26:14,700 --> 02:26:18,100
The problem with object-oriented programming is are not those things

2616
02:26:18,300 --> 02:26:20,500
because you can see some of those things crop up in handmade hero.

2617
02:26:20,500 --> 02:26:22,600
Sometimes we end up isolating a piece of the code.

2618
02:26:22,600 --> 02:26:24,500
Are we end up keeping a little thing?

2619
02:26:24,500 --> 02:26:29,200
That's kind of like it might look more like Anup style result like,

2620
02:26:29,200 --> 02:26:33,200
you know, here's this thing and it's interface is kind of well defined

2621
02:26:33,200 --> 02:26:36,000
and it's you know, kind of often its own piece of the code so it's not

2622
02:26:36,000 --> 02:26:39,800
intermixed with anything else and bubble and starts to look more like

2623
02:26:39,800 --> 02:26:41,400
what you would see in the result of an odd.

2624
02:26:41,700 --> 02:26:44,400
You know, after an object-oriented design programmer

2625
02:26:44,500 --> 02:26:46,200
or did some stuff or whatever, right?

2626
02:26:46,800 --> 02:26:47,900
So all those things are fine.

2627
02:26:47,900 --> 02:26:53,900
The problem is the mindset of object-oriented design, the idea that

2628
02:26:53,900 --> 02:26:57,200
the way you should be approaching the code is by thinking about what

2629
02:26:57,200 --> 02:26:59,500
the objects are and how those

2630
02:27:00,000 --> 02:27:02,400
Are working, that is the problem.

2631
02:27:02,700 --> 02:27:06,700
So I would say it's it would never be good on him a hero there's like

2632
02:27:06,700 --> 02:27:09,800
never a time when I think you should think about the code base in that

2633
02:27:09,800 --> 02:27:10,000
way.

2634
02:27:10,000 --> 02:27:14,200
Literally, like I never think that approaching is perching it from the

2635
02:27:14,200 --> 02:27:19,900
perspective of the objects is ever good, but in terms of things like

2636
02:27:20,200 --> 02:27:24,500
oh I want to like sort of break off a piece in a reusable way that's

2637
02:27:24,500 --> 02:27:28,300
you know, very specific about what is part of it and it doesn't let

2638
02:27:28,300 --> 02:27:29,800
anyone outside of it touch.

2639
02:27:30,000 --> 02:27:34,600
Touch the way it works because it's trying to you know, be sort of

2640
02:27:34,600 --> 02:27:39,200
hidden in that way those things all might be reasonable, right?

2641
02:27:41,000 --> 02:27:46,100
Those those things might all have times when you want to do them and

2642
02:27:46,100 --> 02:27:49,000
whether or not you want to do them, depends a lot on for each

2643
02:27:49,000 --> 02:27:52,400
individual element of that is the thing that you're getting from that

2644
02:27:52,400 --> 02:27:54,600
delivering any value, right?

2645
02:27:57,700 --> 02:28:01,800
And to give some a little bit more perspective on that I guess just to

2646
02:28:01,800 --> 02:28:06,700
just to clarify if you took something that's typical in

2647
02:28:06,700 --> 02:28:09,400
object-oriented C++ for example, right?

2648
02:28:10,000 --> 02:28:18,100
Like you took something like oh you know, I want here to use a private

2649
02:28:18,100 --> 02:28:19,000
section, right?

2650
02:28:19,000 --> 02:28:21,900
So I'm going to take all of the variables in this thing.

2651
02:28:22,900 --> 02:28:25,000
Let me, let me think of an example.

2652
02:28:26,200 --> 02:28:26,600
Here.

2653
02:28:26,600 --> 02:28:34,600
So, so here we are in in, you know, in game mode world, right.

2654
02:28:34,600 --> 02:28:38,100
And I've got all this stuff in here and, and I want to like start

2655
02:28:38,100 --> 02:28:40,100
making it so that no, I know that.

2656
02:28:40,100 --> 02:28:43,000
No one else can touch anything in here, right?

2657
02:28:44,600 --> 02:28:47,300
So you know, you'll see stuff like oh opportunity programmers are like

2658
02:28:47,300 --> 02:28:49,100
all the data has to be private.

2659
02:28:49,100 --> 02:28:50,400
Like that's just it's I'm trying to--.

2660
02:28:50,400 --> 02:28:51,300
This is an object.

2661
02:28:51,300 --> 02:28:54,500
So you know it's all got to be private and then there's like a public

2662
02:28:54,500 --> 02:28:57,200
section in the public section is going to have some stuff in it where

2663
02:28:57,200 --> 02:28:59,000
the functions, you know you can call.

2664
02:28:59,000 --> 02:29:01,700
So you know if you want this no Collision you got a call get milk

2665
02:29:01,700 --> 02:29:03,200
Collision or something like that, right?

2666
02:29:05,800 --> 02:29:07,900
You know, that's like a thing that just an object.

2667
02:29:07,900 --> 02:29:11,400
If someone's a serious job during a programmer day by day, you'll

2668
02:29:11,400 --> 02:29:14,300
notice, they hardly ever write anything that doesn't look like that.

2669
02:29:14,300 --> 02:29:20,200
They start that from their point and to me, it's just like, well what

2670
02:29:20,200 --> 02:29:23,700
do I need those features for right dick all the only thing that

2671
02:29:23,700 --> 02:29:28,100
clearing this private does, is it makes it so that I know a priori

2672
02:29:28,400 --> 02:29:32,600
that no code, that isn't declared inside the game-mode world struct

2673
02:29:32,600 --> 02:29:35,500
itself as a member function is

2674
02:29:35,600 --> 02:29:38,900
Touching them, that's what it does, right?

2675
02:29:39,400 --> 02:29:43,400
But I don't really have any problems with that day to day, right, when

2676
02:29:43,400 --> 02:29:44,100
I'm programming.

2677
02:29:44,100 --> 02:29:47,200
I don't care if people are touching this, any code that wants to touch

2678
02:29:47,200 --> 02:29:49,400
standard room definition just can.

2679
02:29:49,600 --> 02:29:51,200
And then you see me do this many times.

2680
02:29:51,200 --> 02:29:55,100
If I'm like, well, you know what, I want to start to regularize how

2681
02:29:55,100 --> 02:29:55,700
standard room.

2682
02:29:55,700 --> 02:29:58,300
Definition standard Rim Dimension is working.

2683
02:29:58,500 --> 02:29:59,800
You'll see me do this all the time.

2684
02:30:00,300 --> 02:30:01,000
Right.

2685
02:30:01,000 --> 02:30:03,200
That just generates an error everywhere.

2686
02:30:03,200 --> 02:30:08,400
Anyone's accessing it, and I look to see what they're doing now.

2687
02:30:08,400 --> 02:30:10,000
I know, right.

2688
02:30:10,400 --> 02:30:11,100
That's it.

2689
02:30:11,200 --> 02:30:12,200
It's that simple.

2690
02:30:12,500 --> 02:30:15,900
And if I want to now, pull that out into something that has to get

2691
02:30:15,900 --> 02:30:18,500
access in a structured way, I just do.

2692
02:30:19,600 --> 02:30:24,800
So I just, I really never see the point in doing the sort of wrote

2693
02:30:24,900 --> 02:30:30,400
mental application that object-oriented programmers, say is good to

2694
02:30:30,400 --> 02:30:31,400
always do these things.

2695
02:30:31,400 --> 02:30:33,000
They just don't help at all.

2696
02:30:34,300 --> 02:30:36,900
I've never found the circumstances where it was good to do that up

2697
02:30:36,900 --> 02:30:37,400
front.

2698
02:30:37,500 --> 02:30:41,900
It's always good to do it after the fact if it's good at all right?

2699
02:30:42,600 --> 02:30:46,800
So when I'm going to start doing those things, I would always do them

2700
02:30:46,800 --> 02:30:48,600
and last not first.

2701
02:30:49,400 --> 02:30:54,300
Object-oriented programming to me is just a bad idea, you know, if

2702
02:30:54,300 --> 02:30:57,000
anything the time to do it is at the end, so it would be

2703
02:30:57,000 --> 02:30:59,800
object-oriented cleanup, right?

2704
02:30:59,900 --> 02:31:00,800
Don't don't.

2705
02:31:00,800 --> 02:31:04,500
Whoop, whoop, might be the thing if you want to do something

2706
02:31:04,500 --> 02:31:05,600
object-oriented, right?

2707
02:31:07,400 --> 02:31:10,300
So I think that is kind of the philosophy that I have when programming

2708
02:31:10,300 --> 02:31:10,600
certainly.

2709
02:31:10,600 --> 02:31:13,500
It's what I found to be most effective is that any work you do?

2710
02:31:13,800 --> 02:31:18,500
Thinking in terms of objects at the head end is almost always too much

2711
02:31:18,500 --> 02:31:23,300
code to get the desired results in flexible code that introduces

2712
02:31:23,300 --> 02:31:27,400
boundaries where none should exist yet tortured thinking.

2713
02:31:27,400 --> 02:31:29,200
Like a lot of times you see it, right?

2714
02:31:29,200 --> 02:31:31,400
You see someone whose approach a problem?

2715
02:31:31,400 --> 02:31:34,700
I was right and you're like, wow, this is a really overcomplicated

2716
02:31:34,700 --> 02:31:36,400
unnecessary set of

2717
02:31:36,600 --> 02:31:39,100
Ode to do this simple operation, right?

2718
02:31:40,600 --> 02:31:44,400
And again, I think it's just because objects are not the right way to

2719
02:31:44,400 --> 02:31:46,000
think about problems.

2720
02:31:46,200 --> 02:31:49,500
And that's not the same as saying that you should never end up with

2721
02:31:49,500 --> 02:31:49,800
any.

2722
02:31:50,100 --> 02:31:54,800
You might write the right way to structure the code might look like

2723
02:31:55,200 --> 02:31:59,100
the result of some I trained except it also might not and the key to

2724
02:31:59,100 --> 02:32:00,700
it is developing programming practices.

2725
02:32:00,700 --> 02:32:02,900
That get you to a well working.

2726
02:32:03,300 --> 02:32:07,400
Nice design as quickly as possible.

2727
02:32:07,700 --> 02:32:09,500
Whoop never seems to do that.

2728
02:32:09,500 --> 02:32:09,900
As far as

2729
02:32:10,000 --> 02:32:14,000
Until that doesn't mean that the principles that happen in

2730
02:32:14,000 --> 02:32:15,700
object-oriented programming are never.

2731
02:32:15,700 --> 02:32:19,200
Applied should never be applied or anything like that, they very well

2732
02:32:19,700 --> 02:32:21,400
very well maybe.

2733
02:32:22,400 --> 02:32:24,800
And that's an important distinction to understand.

2734
02:32:46,400 --> 02:32:47,100
All right.

2735
02:32:48,300 --> 02:32:49,800
Yeah, it looks like everyone kind of

2736
02:32:51,800 --> 02:32:53,400
We're relatively I'm bored with that too.

2737
02:32:53,400 --> 02:32:55,300
So hopefully that answer was relatively complete.

2738
02:32:55,300 --> 02:32:58,500
And yeah, I would say that unfortunately, that's not the way who

2739
02:32:58,500 --> 02:32:59,800
principles are taught either.

2740
02:33:01,600 --> 02:33:05,200
Which I guess also gives them a bad rep in some sense to write.

2741
02:33:05,300 --> 02:33:07,500
Because, you know, if

2742
02:33:10,000 --> 02:33:13,900
If you think of all of the possible techniques that open Plies as

2743
02:33:13,900 --> 02:33:17,900
bundled with the design philosophy of approaching problems, this way,

2744
02:33:18,100 --> 02:33:20,800
it might appear that they're all really bad, right?

2745
02:33:20,800 --> 02:33:24,700
If you're an objective viewer, thinking about that together, you might

2746
02:33:24,700 --> 02:33:26,300
be like, oh, this is all really problematic.

2747
02:33:26,300 --> 02:33:29,300
It doesn't feel right to code this way, the results seem to be bad.

2748
02:33:29,700 --> 02:33:34,700
But again, that's, that's, I think the mentality, the design approach

2749
02:33:34,700 --> 02:33:35,500
is the problem.

2750
02:33:35,700 --> 02:33:38,400
Not that individual techniques, because each individual technique

2751
02:33:38,400 --> 02:33:39,600
could be valuable

2752
02:33:40,500 --> 02:33:45,500
In a well working design and you, as long as you come at it, from the

2753
02:33:45,500 --> 02:33:49,200
pragmatic, what makes the code work best perspective, you will

2754
02:33:49,200 --> 02:33:53,100
discover those techniques when they are appropriate and you won't use

2755
02:33:53,100 --> 02:33:57,400
them when they're not and that is exactly what you want, right?

2756
02:33:59,700 --> 02:34:02,100
And and I think that that

2757
02:34:03,900 --> 02:34:07,000
I don't know, I think that although I'm sure it's a controversial

2758
02:34:07,000 --> 02:34:09,700
answer for Loop devotees.

2759
02:34:09,700 --> 02:34:14,800
I've hope that's a relatively non-controversial answer from sensible

2760
02:34:14,800 --> 02:34:20,700
programmers because again, it's not saying don't ever use thing X,

2761
02:34:21,700 --> 02:34:26,300
it's just saying the mentality of always use thing X or always think

2762
02:34:26,300 --> 02:34:28,000
in terms of X is not good.

2763
02:34:28,700 --> 02:34:30,700
Think, in terms of the end result.

2764
02:34:30,700 --> 02:34:33,500
And then, when thing X comes out,

2765
02:34:33,700 --> 02:34:36,700
As oh, that look at this is solving this problem that I have

2766
02:34:36,700 --> 02:34:37,500
specifically.

2767
02:34:37,500 --> 02:34:40,400
I can see it good, right?

2768
02:34:41,800 --> 02:34:45,600
And so I hope that that, you know is at least, you know, it gives

2769
02:34:45,600 --> 02:34:49,600
enough flexibility for the individual programmer to approach elements

2770
02:34:49,600 --> 02:34:53,600
of poop, in a way that they can use the ones that are sensible in the

2771
02:34:53,600 --> 02:34:55,400
circumstances where they are applicable.

2772
02:34:56,700 --> 02:35:00,200
And not get saddled with the bad part, right?

2773
02:35:00,500 --> 02:35:04,700
Which is sort of this the dogmatic I always program everything to look

2774
02:35:04,700 --> 02:35:10,000
like this which you know I think any any you know, you know our

2775
02:35:10,000 --> 02:35:13,800
objects any kind of dogmatic programming approach that's like the code

2776
02:35:13,800 --> 02:35:17,200
should always look this way is just probably going to be wrong.

2777
02:35:17,300 --> 02:35:17,700
Right?

2778
02:35:17,800 --> 02:35:18,500
What are the chances?

2779
02:35:18,500 --> 02:35:21,700
That there's one way to always write code, right?

2780
02:35:21,700 --> 02:35:22,600
It's just, you know.

2781
02:35:25,700 --> 02:35:28,900
It's unlike I certainly couldn't tell you one way to always think

2782
02:35:28,900 --> 02:35:35,700
about the design of code, you know, I feel like you got to just always

2783
02:35:36,100 --> 02:35:40,400
the one way is to focus on what turned out to be effective and that's

2784
02:35:40,400 --> 02:35:43,400
not really a way, it's more of a metric, right?

2785
02:35:52,400 --> 02:35:55,000
Oh, and I'll just someone was asking what I think about constructing

2786
02:35:55,000 --> 02:35:55,300
this.

2787
02:35:56,200 --> 02:35:59,800
I don't use const anywhere and the

2788
02:36:00,000 --> 02:36:03,300
And for that is, I don't really have constant bugs.

2789
02:36:04,800 --> 02:36:06,000
I think I'd handmade hero.

2790
02:36:06,000 --> 02:36:09,700
We've had maybe like, one or two in.

2791
02:36:11,100 --> 02:36:16,200
I don't even want to know how many days 374 episodes.

2792
02:36:17,000 --> 02:36:20,100
We've had one or two, in my regular programming.

2793
02:36:20,100 --> 02:36:21,000
I've had zero.

2794
02:36:21,300 --> 02:36:24,800
So, I think mostly the console bugs were ones that I had here because

2795
02:36:25,400 --> 02:36:26,300
programming on stream.

2796
02:36:26,300 --> 02:36:27,400
I can't use all my brain.

2797
02:36:27,400 --> 02:36:31,100
I'm talking all the time, so my programming is worse, you know, pretty

2798
02:36:31,100 --> 02:36:32,800
much across the board.

2799
02:36:33,700 --> 02:36:34,400
I notice that a

2800
02:36:34,500 --> 02:36:37,000
We in multi-threaded programming to wear things that are hard to think

2801
02:36:37,000 --> 02:36:38,600
through, I make a lot more mistakes.

2802
02:36:40,100 --> 02:36:43,200
So given that I don't have any bugs hardly ever.

2803
02:36:43,200 --> 02:36:45,100
And when I do have them, they're fixed almost immediately.

2804
02:36:45,100 --> 02:36:46,900
Like, I don't have the lingering bug problem.

2805
02:36:46,900 --> 02:36:53,700
I don't seem to have for const, that's why I don't use it.

2806
02:36:54,100 --> 02:36:58,500
Because I pretty much know that I never have issues.

2807
02:36:58,500 --> 02:37:03,500
Where I where I modify something I shouldn't be for very long.

2808
02:37:03,500 --> 02:37:04,300
I just don't tell Dad.

2809
02:37:04,500 --> 02:37:04,900
That bug.

2810
02:37:05,100 --> 02:37:08,900
So that means that all the work of putting constant is just a waste

2811
02:37:08,900 --> 02:37:09,300
for me.

2812
02:37:09,300 --> 02:37:11,000
I'm gaining, literally nothing from it.

2813
02:37:12,400 --> 02:37:13,800
However, that doesn't mean that.

2814
02:37:13,800 --> 02:37:15,400
I think other people shouldn't use it.

2815
02:37:15,600 --> 02:37:18,400
I think basically, you should figure this out.

2816
02:37:18,500 --> 02:37:19,200
Exactly this.

2817
02:37:19,200 --> 02:37:23,600
Exactly just said, how often do you have bugs related to const?

2818
02:37:23,600 --> 02:37:25,800
Try not using kant's for a year.

2819
02:37:27,400 --> 02:37:29,400
How many bugs do you encounter?

2820
02:37:30,200 --> 02:37:33,200
That would have been stopped by having const.

2821
02:37:35,300 --> 02:37:36,300
Look at those bugs.

2822
02:37:36,700 --> 02:37:40,800
How hard were they to debug if they took you 15 minutes to debug and

2823
02:37:40,800 --> 02:37:43,600
you only had 10 of them in the year, I would say that's a pretty

2824
02:37:43,600 --> 02:37:45,400
strong argument for not using const.

2825
02:37:46,000 --> 02:37:49,100
It was hardly would save you almost nothing and it's something that

2826
02:37:49,100 --> 02:37:50,200
you then are saddling.

2827
02:37:50,200 --> 02:37:52,600
All your other programming thought with right.

2828
02:37:53,700 --> 02:37:57,100
On the other hand, if you have a constant tug every day and some of

2829
02:37:57,100 --> 02:37:59,100
them take you three hours to find.

2830
02:37:59,300 --> 02:38:03,100
Well, that is a pretty good argument for using constant your code,

2831
02:38:03,400 --> 02:38:03,900
right?

2832
02:38:04,600 --> 02:38:05,000
So I think

2833
02:38:05,100 --> 02:38:08,400
I think it's pretty easy to determine in your particular scenario

2834
02:38:08,400 --> 02:38:09,600
where you are programming.

2835
02:38:09,600 --> 02:38:14,400
Whatever you're doing, you should be able to figure out pretty easily.

2836
02:38:14,700 --> 02:38:18,100
Whether cost is something that is making a difference for you or Not

2837
02:38:19,000 --> 02:38:20,900
by straightforward testing.

2838
02:38:21,300 --> 02:38:25,800
So I would say just do that test and then you'll know and then you

2839
02:38:25,800 --> 02:38:28,700
don't have to ask me or anybody else their opinions because you will

2840
02:38:28,700 --> 02:38:31,000
know definitively if you should be using it.

2841
02:38:35,500 --> 02:38:37,800
And people are saying that's more on the chatter, singers more for

2842
02:38:37,800 --> 02:38:38,900
teams, and of the programmers.

2843
02:38:39,300 --> 02:38:41,000
I think it's the same all around.

2844
02:38:42,100 --> 02:38:44,900
It's basically the case that you should be able to test this.

2845
02:38:45,500 --> 02:38:51,100
Your team either does or does not have a problem making these bugs and

2846
02:38:51,100 --> 02:38:54,500
how what bugs they will make if they're consistent.

2847
02:38:54,500 --> 02:38:56,900
They're take variable amounts of time to solve.

2848
02:38:57,200 --> 02:38:59,400
So basically, to do that test,

2849
02:39:00,200 --> 02:39:02,700
Figure it out and then you will know for your team.

2850
02:39:02,900 --> 02:39:05,600
Are you wasting your time or not, right?

2851
02:39:09,400 --> 02:39:12,000
Because if it turns out your team just doesn't make a lot of bugs like

2852
02:39:12,000 --> 02:39:15,400
that, then you're kind of just wasting everyone's Time by saying that

2853
02:39:15,400 --> 02:39:16,600
cost is better for teams.

2854
02:39:16,800 --> 02:39:18,000
You don't know that it is, right?

2855
02:39:18,000 --> 02:39:20,600
You have to actually determine that the bugs that you will introduce

2856
02:39:20,800 --> 02:39:24,100
by not having const actually take a long time to find.

2857
02:39:24,600 --> 02:39:26,700
If you're finding that, you're just not making that many and they

2858
02:39:26,700 --> 02:39:27,900
don't take that long to find.

2859
02:39:29,500 --> 02:39:30,900
It was about it was the wrong trade off?

2860
02:39:32,500 --> 02:39:33,000
Right.

2861
02:39:39,000 --> 02:39:40,500
So that's really it.

2862
02:39:40,700 --> 02:39:43,300
And, and that's true for all programming paradigms.

2863
02:39:43,300 --> 02:39:46,300
In my opinion, every programming Paradigm that you're like, should I

2864
02:39:46,300 --> 02:39:47,300
do this or should I do that?

2865
02:39:47,300 --> 02:39:48,500
The answer is always the same.

2866
02:39:49,200 --> 02:39:52,900
Does it make your programming job more?

2867
02:39:53,400 --> 02:39:56,200
Does it make your program more effective to do it?

2868
02:39:56,300 --> 02:39:58,200
Then it's a good idea, right?

2869
02:39:58,600 --> 02:40:00,800
The problem with a lot of them is, it's hard to measure.

2870
02:40:00,800 --> 02:40:03,600
Const is very easy to measure because it has no effect on the code at.

2871
02:40:03,600 --> 02:40:04,900
All, right.

2872
02:40:05,100 --> 02:40:07,000
Cost is just about debugging.

2873
02:40:08,200 --> 02:40:09,400
So it's very easy to measure.

2874
02:40:09,700 --> 02:40:10,300
Do it.

2875
02:40:10,400 --> 02:40:11,200
Don't do it.

2876
02:40:11,200 --> 02:40:14,300
See what the differences in terms of your debug cost and then, you

2877
02:40:14,300 --> 02:40:17,400
know, right, you can weigh that against the amount of time you're

2878
02:40:17,400 --> 02:40:19,700
spending making sure that everything is cost.

2879
02:40:19,700 --> 02:40:22,200
Correct, and you now know the trade-off.

2880
02:40:22,200 --> 02:40:25,300
You now know what the right answer is right.

2881
02:40:27,000 --> 02:40:31,600
And so, if every programming practice were that easy to test, you just

2882
02:40:31,600 --> 02:40:32,100
do it.

2883
02:40:32,200 --> 02:40:34,400
Unfortunately, it's not right?

2884
02:40:34,500 --> 02:40:37,800
Unfortunately, a lot of programming things, it's really hard to

2885
02:40:37,900 --> 02:40:40,300
Do a test about which one's more effective.

2886
02:40:40,500 --> 02:40:43,100
So I can't give that advice for those but const.

2887
02:40:44,200 --> 02:40:45,400
It's really, that simple.

2888
02:40:46,400 --> 02:40:47,400
Are you more effective with it?

2889
02:40:47,400 --> 02:40:48,200
Or without it?

2890
02:40:48,200 --> 02:40:49,300
You should be able to test.

2891
02:40:51,700 --> 02:40:52,100
Right.

2892
02:40:59,200 --> 02:41:00,200
Alright, that's about it.

2893
02:41:00,200 --> 02:41:01,000
I'm going to wrap it up.

2894
02:41:14,800 --> 02:41:17,500
All right, thank you, everyone for joining me for this episode of

2895
02:41:17,500 --> 02:41:18,100
handmade hero.

2896
02:41:18,100 --> 02:41:19,300
It's been a pleasure coding with you.

2897
02:41:19,300 --> 02:41:21,900
As always, if you want to follow along the series at home, you can

2898
02:41:21,900 --> 02:41:24,900
always pre-order the game on hand be here at org and it comes to the

2899
02:41:24,900 --> 02:41:25,400
source code.

2900
02:41:25,400 --> 02:41:28,400
So you can follow along with all of the days.

2901
02:41:29,000 --> 02:41:31,400
We also have a forum so I can go to if you want to ask questions a

2902
02:41:31,400 --> 02:41:34,800
patreon page, if you're looking to support our video series, a

2903
02:41:34,800 --> 02:41:37,400
schedule bot, that tells you when we're going to be live and an

2904
02:41:37,400 --> 02:41:41,800
episode guide that lets, you know, when or sorry that helps you follow

2905
02:41:41,800 --> 02:41:43,800
along with episodes that have already happened.

2906
02:41:43,900 --> 02:41:44,500
So that you can

2907
02:41:44,800 --> 02:41:48,500
Look at them and find what I'm talking about more easily.

2908
02:41:49,500 --> 02:41:52,800
If you want to know when we'll be back next that is actually tomorrow

2909
02:41:52,800 --> 02:41:54,900
at 10 a.m.

2910
02:41:54,900 --> 02:41:57,800
Pacific Standard time or Pacific Daylight time.

2911
02:41:57,800 --> 02:41:59,800
Sorry, it's daylight savings here now

2912
02:42:00,000 --> 02:42:01,200
Leave soap.

2913
02:42:01,200 --> 02:42:02,300
See you back here for that.

2914
02:42:02,400 --> 02:42:07,000
It seems like we got the Kinks worked out of the unprojected z-buffer

2915
02:42:07,000 --> 02:42:08,100
stuff for the moment.

2916
02:42:08,100 --> 02:42:09,800
I still am a little worried about the Precision.

2917
02:42:10,000 --> 02:42:14,500
I think we may want to switch to an infinite far clip plane or

2918
02:42:14,500 --> 02:42:17,000
something, so we maybe we'll do that tomorrow.

2919
02:42:17,200 --> 02:42:19,700
But otherwise what will do is play with some of the effects that I

2920
02:42:19,700 --> 02:42:22,900
wanted to start with today but didn't have a time too because I wanted

2921
02:42:22,900 --> 02:42:24,900
to figure out what was going on with some of that projection stuff.

2922
02:42:25,400 --> 02:42:25,900
So that was good.

2923
02:42:25,900 --> 02:42:28,500
We got that straightened out tomorrow, we'll play maybe around stuff.

2924
02:42:28,500 --> 02:42:29,600
I want to play around today.

2925
02:42:30,400 --> 02:42:31,000
That's about it.

2926
02:42:31,000 --> 02:42:33,200
Hope to see you back here for that until then have from programming

2927
02:42:33,200 --> 02:42:35,100
and I'll see everyone on the internet.

2928
02:42:35,100 --> 02:42:35,900
Take it easy, everybody.

