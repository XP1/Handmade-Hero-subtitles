1
00:00:00,500 --> 00:00:00,900
Okay.

2
00:00:03,100 --> 00:00:05,100
Hello, everyone and welcome to handmade hero show.

3
00:00:05,100 --> 00:00:07,800
Recoded, complete game live on stream.

4
00:00:09,100 --> 00:00:13,100
I this is, this is a tough.

5
00:00:13,100 --> 00:00:14,100
This is a tough episode.

6
00:00:14,100 --> 00:00:14,700
Basic wave.

7
00:00:15,200 --> 00:00:19,500
What I would like to say is we just finished last week doing some

8
00:00:20,400 --> 00:00:23,400
finishing up texture downloads but we didn't actually get a chance to

9
00:00:23,400 --> 00:00:24,100
finish them up.

10
00:00:24,400 --> 00:00:27,300
And the reason for that is because there's still a fair bit of

11
00:00:27,300 --> 00:00:32,400
ambiguity about what the right way is to actually download textures.

12
00:00:32,700 --> 00:00:35,200
And this is sort of an ongoing saga.

13
00:00:35,200 --> 00:00:40,700
And honestly, to be really honest with you, it's kind of what I would

14
00:00:40,700 --> 00:00:42,600
prefer to have happen on stream as well.

15
00:00:42,600 --> 00:00:46,000
Because one of the big things about handmade here is, I kind of wanted

16
00:00:46,000 --> 00:00:49,400
to show how programming actually happens as opposed to showing

17
00:00:49,400 --> 00:00:49,600
something.

18
00:00:49,600 --> 00:00:52,000
After the fact, where you've already finished all the programming to

19
00:00:52,000 --> 00:00:55,200
say, here's what we ended up with, this is very typical in my

20
00:00:55,200 --> 00:00:58,200
experience with anything, that involves any kind of Graphics

21
00:00:58,200 --> 00:01:01,900
programming, you can go look at what the recommended ways are to do

22
00:01:01,900 --> 00:01:02,400
something.

23
00:01:02,500 --> 00:01:07,300
Whatever nvidia's latest published thing is or anything like that but

24
00:01:07,300 --> 00:01:09,300
then when you actually go to implement it, you find out that that's

25
00:01:09,300 --> 00:01:12,500
totally not true or that doesn't work in some places for that.

26
00:01:12,500 --> 00:01:16,000
What they said was wrong or not the right way anymore and just nobody

27
00:01:16,000 --> 00:01:19,200
bothered to publish what the actual right way was and blah blah blah

28
00:01:19,900 --> 00:01:24,200
and so right now we're kind of in a little bit of limbo regarding

29
00:01:24,200 --> 00:01:27,700
texture downloads and the reason for that is because although I did

30
00:01:27,700 --> 00:01:29,400
correspond a little bit with Nvidia about it.

31
00:01:29,400 --> 00:01:32,100
I have not gotten a definitive answer back from them yet.

32
00:01:32,500 --> 00:01:38,900
About what the actual proper way is to download textures overlapped on

33
00:01:38,900 --> 00:01:39,600
their card.

34
00:01:39,600 --> 00:01:44,800
Now, some people are of the impression and I don't actually know if

35
00:01:44,800 --> 00:01:47,600
they're right or not, because none of them was particularly

36
00:01:47,600 --> 00:01:51,100
authoritative on this topic and certainly no one had any actual data

37
00:01:51,100 --> 00:01:57,500
to show me, but some people were of the opinion that CPU like they

38
00:01:57,500 --> 00:02:02,300
equated overlapping CPU work with overlapping GPU work and we

39
00:02:02,500 --> 00:02:05,900
Talked about this last week, those aren't the same thing.

40
00:02:06,000 --> 00:02:11,100
There's two copies that have to happen in order for textures to get to

41
00:02:11,900 --> 00:02:14,600
from the disc to the GPU.

42
00:02:14,700 --> 00:02:17,300
One of them or two I should say to required.

43
00:02:17,300 --> 00:02:20,700
You could have infinitely, many more non-required copies, but there's

44
00:02:20,700 --> 00:02:25,400
two ones that are acquired one is it has to go off of the disc right

45
00:02:25,600 --> 00:02:27,900
into memory that the GPU can see.

46
00:02:28,800 --> 00:02:31,600
And then what is it has to go from memory that you can see on to the

47
00:02:31,600 --> 00:02:34,500
actual resident memory of the GPU?

48
00:02:35,200 --> 00:02:41,300
So those two copies are have to happen, even if you use direct GPU

49
00:02:41,300 --> 00:02:45,900
mapping, which you can actually do, I should mention this, it's kind

50
00:02:45,900 --> 00:02:49,600
of an amusing thing, like you can, you can see here.

51
00:02:50,900 --> 00:02:53,700
So there's even such things as direct GPU mapping where.

52
00:02:53,700 --> 00:02:58,100
For example, you can have the

53
00:02:59,000 --> 00:02:59,400
like,

54
00:03:01,000 --> 00:03:05,800
You can have the GPU, put something into system, memory, sort of

55
00:03:06,300 --> 00:03:07,000
directly.

56
00:03:07,000 --> 00:03:11,600
And then the the network card can read it out of memory directly

57
00:03:11,800 --> 00:03:16,000
without necessarily having to go through any kind of intermediary.

58
00:03:16,000 --> 00:03:19,800
It doesn't have to be like moved around to into two different map

59
00:03:19,800 --> 00:03:21,200
memories, if that makes sense.

60
00:03:22,100 --> 00:03:25,600
But even if you're doing something like that, obviously it has to come

61
00:03:25,600 --> 00:03:26,800
off the disk into system memory.

62
00:03:26,800 --> 00:03:29,800
And then from system memory into GPU, there's no such thing as

63
00:03:30,000 --> 00:03:33,600
GPU reading directly from the disk as far as I know and so you're

64
00:03:33,600 --> 00:03:39,000
always going to have at least those two copies and so yes there's

65
00:03:39,000 --> 00:03:44,100
plenty of ways in opengl that we could if we wanted to get rid of that

66
00:03:44,100 --> 00:03:45,100
first copy.

67
00:03:45,300 --> 00:03:51,200
So when we load from disk into memory right now when we're calling GL

68
00:03:51,200 --> 00:03:55,800
text image 2D it's copying it from our memory into memory.

69
00:03:55,800 --> 00:03:57,100
That's visible to the GPU.

70
00:03:57,100 --> 00:03:59,800
So a range of memory on the host

71
00:04:00,000 --> 00:04:02,200
You that's visible to the GPS that you can transfer it.

72
00:04:02,600 --> 00:04:06,600
That is not the part that we were talking about, right?

73
00:04:06,600 --> 00:04:08,700
That is that is what everyone else sees you talking about.

74
00:04:08,700 --> 00:04:10,600
That is not the part, we're actually talking about.

75
00:04:12,700 --> 00:04:16,500
The part we're talking about is, how do you tell the driver?

76
00:04:17,899 --> 00:04:20,399
To start transferring that texture.

77
00:04:21,600 --> 00:04:26,600
using the asynchronous texture, using the asynchronous memory transfer

78
00:04:26,700 --> 00:04:28,900
capabilities that the card has

79
00:04:30,600 --> 00:04:34,900
And so the way we did, that was the last way I saw published on

80
00:04:34,900 --> 00:04:38,600
nvidia's website since I figured that would be the most recent, which

81
00:04:38,600 --> 00:04:41,300
is that you have to create a secondary opengl context to do it.

82
00:04:41,300 --> 00:04:47,000
They don't currently have published as far as I know some other way of

83
00:04:47,000 --> 00:04:50,600
telling them the driver to do that asynchronous transfer.

84
00:04:52,000 --> 00:04:55,200
now, until we hear back from Nvidia,

85
00:04:57,000 --> 00:04:58,700
We're never going to know, right?

86
00:04:58,700 --> 00:05:02,000
I just don't know because they're the only ones who know we could try

87
00:05:02,000 --> 00:05:04,100
to do a bunch of experiments about it if we wanted to.

88
00:05:04,100 --> 00:05:07,800
But we may not even really have any knowledge of what things to even

89
00:05:07,800 --> 00:05:10,800
experiment with because we don't know how their driver Works

90
00:05:10,800 --> 00:05:11,200
internally.

91
00:05:11,200 --> 00:05:13,700
We don't have the source code to it and so we can't even really

92
00:05:13,700 --> 00:05:16,500
predict what sorts of activities we could do.

93
00:05:16,600 --> 00:05:18,800
That would convince the driver to do, exactly that.

94
00:05:19,000 --> 00:05:21,200
It may be a very simple thing that we can do it.

95
00:05:21,200 --> 00:05:23,200
Maybe very complicated thing, but we have no idea.

96
00:05:24,600 --> 00:05:28,600
So that is where the texture transfer stuff stands at the moment.

97
00:05:28,800 --> 00:05:33,800
And so I think what we should do at least temporarily is to wait to

98
00:05:33,800 --> 00:05:37,300
see if Nvidia gets back to us and gives us some better information

99
00:05:37,400 --> 00:05:40,300
about what they think the best way for us to transform be and then

100
00:05:40,300 --> 00:05:43,000
when we get that information we can go back and modify how we're doing

101
00:05:43,000 --> 00:05:46,400
it to conform to that because it certainly seems like the way they

102
00:05:46,400 --> 00:05:49,600
suggested to do it before is not actually the way that you would

103
00:05:49,600 --> 00:05:50,000
think.

104
00:05:50,000 --> 00:05:54,200
Now that said there is one piece of the transfer

105
00:05:54,300 --> 00:05:59,200
/ that we don't do in handmade hero that was recommended by them in

106
00:05:59,200 --> 00:05:59,700
the original thing.

107
00:05:59,700 --> 00:05:59,800
And

108
00:06:00,000 --> 00:06:04,500
That was to fence the download on either side and the reason that we

109
00:06:04,500 --> 00:06:06,700
didn't finish the download on either side was simply because we don't

110
00:06:06,700 --> 00:06:12,300
actually care if the download gets fenced but maybe we'll find out.

111
00:06:12,500 --> 00:06:15,400
When they write us back hopefully they'll write us back, maybe we'll

112
00:06:15,400 --> 00:06:19,800
find out that if you don't put the fence in the driver doesn't realize

113
00:06:19,800 --> 00:06:22,300
that it needs to do the operation or something.

114
00:06:22,300 --> 00:06:23,000
I'm not sure.

115
00:06:23,600 --> 00:06:27,500
So I really don't know, I think I would rather just take a

116
00:06:27,500 --> 00:06:28,300
wait-and-see approach.

117
00:06:28,300 --> 00:06:29,900
I don't really want to try mucking around.

118
00:06:30,000 --> 00:06:33,200
And with it because I feel like it's not a super constructive use of

119
00:06:33,200 --> 00:06:37,300
our time to try and try and play with that any further, especially

120
00:06:37,300 --> 00:06:40,400
because if we really wanted to we could always just continue to

121
00:06:40,400 --> 00:06:43,900
download the textures on a single thread and that's not really the end

122
00:06:43,900 --> 00:06:44,500
of the world.

123
00:06:44,500 --> 00:06:46,900
It's not going to kill kill us to do that.

124
00:06:47,700 --> 00:06:50,900
It's only the GPU overlap part that we were trying to make sure with

125
00:06:50,900 --> 00:06:51,700
set up properly.

126
00:06:52,000 --> 00:06:54,900
And so if it turns out, we don't get that, we don't get that, we can

127
00:06:54,900 --> 00:06:59,800
certainly go do some stuff with our buffer objects.

128
00:07:00,000 --> 00:07:03,600
Or pixel buffer is or whatever to eliminate the first copy.

129
00:07:03,600 --> 00:07:06,400
If we felt we want to do that, that seems pretty straightforward.

130
00:07:06,800 --> 00:07:09,300
So we still have other options for optimizing texture downloads.

131
00:07:09,300 --> 00:07:11,400
If we find that we need to do that.

132
00:07:11,900 --> 00:07:12,400
So yeah.

133
00:07:12,700 --> 00:07:16,300
So I would like to know I would I'm hope they will sort of get back to

134
00:07:16,300 --> 00:07:18,800
us and tell us what the preferred method is for that.

135
00:07:18,800 --> 00:07:20,800
So we can make sure the code is architected properly.

136
00:07:21,100 --> 00:07:23,800
So that when we want to optimize our texture downloads and make sure

137
00:07:23,800 --> 00:07:26,300
they're very fast sometime in the future.

138
00:07:27,000 --> 00:07:29,800
We are in a good place to do that until then I

139
00:07:29,900 --> 00:07:31,000
I say just leave it.

140
00:07:31,500 --> 00:07:33,800
All right, so where does that leave us?

141
00:07:33,800 --> 00:07:34,100
Well,

142
00:07:35,700 --> 00:07:39,800
I believe I was taking a look at the to do file.

143
00:07:39,800 --> 00:07:41,700
I think I may have forgotten to save it.

144
00:07:41,800 --> 00:07:45,400
That may have been a slight mistake on my part, but we didn't really

145
00:07:45,400 --> 00:07:48,500
do too much to it, so it's not really that big of a deal.

146
00:07:48,900 --> 00:07:51,000
Anyway, let's take a look at that.

147
00:07:51,100 --> 00:07:55,600
Oops made proj, let's take a look at that to do here.

148
00:07:55,600 --> 00:08:00,100
It is just so we can kind of see what the story is.

149
00:08:01,200 --> 00:08:03,100
So it looks like I did save it.

150
00:08:04,000 --> 00:08:06,700
Actually so so I think we're all good.

151
00:08:07,500 --> 00:08:12,800
So this is where we were at and we have a couple different things that

152
00:08:12,800 --> 00:08:13,200
we can do.

153
00:08:13,200 --> 00:08:16,800
Like I said, we can sort of push forward on the rendering stuff, we

154
00:08:16,800 --> 00:08:20,400
can fix the debug code, and then we've got sort of a, some audio to

155
00:08:20,400 --> 00:08:23,500
bugging that we could choose to do as well, but,

156
00:08:24,500 --> 00:08:27,700
Like I was saying on last, on last week stream of this kind of

157
00:08:27,700 --> 00:08:28,100
thinking about it.

158
00:08:28,100 --> 00:08:30,800
I'm like, I don't know what the most interesting thing to do next is

159
00:08:31,000 --> 00:08:31,900
it's hard to say.

160
00:08:32,200 --> 00:08:34,700
It might be too kind of wrangle, our debug code to shape.

161
00:08:34,900 --> 00:08:38,299
It might be to, to go finish the rendering stuff.

162
00:08:38,500 --> 00:08:41,000
I think what I'd like to do is go finish the debug code because it's

163
00:08:41,000 --> 00:08:44,500
kind of nasty in there and it'd be nice to just kind of go through

164
00:08:44,500 --> 00:08:47,300
and, and spend some time cleaning it out and putting getting it so

165
00:08:47,300 --> 00:08:50,500
that it's running the features that we actually care about relatively

166
00:08:50,500 --> 00:08:54,100
reliably and that would be like a profile that we can use.

167
00:08:54,300 --> 00:08:54,900
Reliably.

168
00:08:56,300 --> 00:08:59,900
And some may be some control over like variables and things.

169
00:09:00,000 --> 00:09:05,600
That like in terms of being able to dump data in a sort of coherent

170
00:09:05,600 --> 00:09:06,000
way.

171
00:09:06,200 --> 00:09:09,300
Because right now we don't have a lot of ways of inspecting stuff or

172
00:09:09,300 --> 00:09:12,300
diagramming stuff and we would like to be able to do a little bit more

173
00:09:12,300 --> 00:09:12,900
of that.

174
00:09:17,300 --> 00:09:21,400
All right, so let's take a little bit of a look at what we've got

175
00:09:21,400 --> 00:09:21,700
there.

176
00:09:23,500 --> 00:09:25,000
I'll just jump back over into it.

177
00:09:25,200 --> 00:09:27,500
Well, I might as well I guess I might compile first.

178
00:09:28,000 --> 00:09:28,500
There we go.

179
00:09:29,500 --> 00:09:33,800
And on this machine, since this is an AMD machine, the problems that I

180
00:09:33,800 --> 00:09:37,300
was just talking about with the texture downloads, don't actually seem

181
00:09:37,300 --> 00:09:42,300
to to have, they don't, they don't happen, right?

182
00:09:42,600 --> 00:09:45,400
So it's kind of, you'll just have to take my word for it.

183
00:09:45,400 --> 00:09:48,000
That people were reporting problems with that.

184
00:09:48,100 --> 00:09:50,400
And, you know, it doesn't happen on this machine.

185
00:09:50,400 --> 00:09:52,700
So you can't actually see the problem, but, but it was there.

186
00:09:53,400 --> 00:09:56,700
And they also were the folks who were able to repo.

187
00:09:56,700 --> 00:10:02,600
The problem said that if they did it a GL flush after to force the

188
00:10:02,600 --> 00:10:04,500
texture, download to happen on the separate thread.

189
00:10:05,000 --> 00:10:07,700
That was another way they could make that happen.

190
00:10:07,700 --> 00:10:09,500
So they did something like this.

191
00:10:09,800 --> 00:10:12,000
That make sense which we could leave in there for now.

192
00:10:12,000 --> 00:10:16,900
Since we don't really care until Nvidia tells us the secret answers,

193
00:10:17,000 --> 00:10:18,600
we don't really care what that code looks like for.

194
00:10:18,600 --> 00:10:21,500
Now we're just waiting anyway, so we could leave that on there.

195
00:10:21,500 --> 00:10:23,200
If that helps people who are running on video

196
00:10:23,300 --> 00:10:26,200
Cards use this without having to worry too much.

197
00:10:26,500 --> 00:10:27,400
So there's that.

198
00:10:27,900 --> 00:10:28,400
All right.

199
00:10:30,700 --> 00:10:36,400
So where we were at before with the debug code is we kind of did a

200
00:10:36,400 --> 00:10:39,700
bunch of work to see how far we could get on having things.

201
00:10:39,700 --> 00:10:45,200
Be easily, recordable and easily usable, but we never quite got to the

202
00:10:45,200 --> 00:10:48,800
point where everything was copacetic, right.

203
00:10:49,200 --> 00:10:51,500
And that may have been because we tried to do a little too much with

204
00:10:51,500 --> 00:10:55,300
it, you know, we experimented with a bunch of stuff and sometimes you,

205
00:10:55,800 --> 00:10:59,000
you know, you may get to the point which arguably, the debug code may

206
00:10:59,000 --> 00:10:59,200
have.

207
00:10:59,200 --> 00:11:02,700
Until we're just like you know, if we want to finish this in a

208
00:11:02,700 --> 00:11:06,600
reasonable amount of time, we may want to pair it down from what it

209
00:11:06,600 --> 00:11:11,200
can do to what we actually only specifically need just in the interest

210
00:11:11,200 --> 00:11:12,900
of not having it be a huge project.

211
00:11:12,900 --> 00:11:15,700
If you know, you decide that debug code is the most important thing.

212
00:11:15,700 --> 00:11:18,500
And you want to go ahead and just spend a ton of time making great

213
00:11:18,500 --> 00:11:19,100
debug system.

214
00:11:19,100 --> 00:11:20,500
That's certainly a good idea.

215
00:11:20,500 --> 00:11:23,800
And if it's a reusable debug system that you can, you know, use on a

216
00:11:23,800 --> 00:11:25,700
lot of different projects that could be a very good idea.

217
00:11:25,700 --> 00:11:29,300
But we may want to sort of like say, all right, we're not going to do.

218
00:11:29,300 --> 00:11:35,200
Do maybe we might not go as far as we possibly can with everything.

219
00:11:35,300 --> 00:11:40,200
We may keep it a little bit, you know, more more streamlined than that

220
00:11:40,200 --> 00:11:40,900
potentially.

221
00:11:42,300 --> 00:11:45,600
All right, so with first thing I like to do is I want to take a look

222
00:11:45,600 --> 00:11:48,900
at the debug interface stuff because that's sort of where we left

223
00:11:48,900 --> 00:11:49,300
things.

224
00:11:49,700 --> 00:11:54,400
And what I'd like to do is since, you know, we kind of want to think

225
00:11:54,400 --> 00:11:57,000
of this as like a finishing pass for the debug stuff.

226
00:11:57,000 --> 00:11:59,900
I think what I want to do is sort of come at it from a

227
00:12:00,000 --> 00:12:02,900
Different places where we go.

228
00:12:02,900 --> 00:12:04,700
Here's what we want to be able to do.

229
00:12:05,500 --> 00:12:09,800
Let's make sure there's a good way for us to do it, right?

230
00:12:10,600 --> 00:12:15,500
And so for example we had a case and let's just try to work on just

231
00:12:15,500 --> 00:12:19,700
that one case and get it in and so that we can sort of, like, make

232
00:12:19,700 --> 00:12:20,300
sure it's integrated there.

233
00:12:20,300 --> 00:12:23,700
And finished, we had an example case, where like here,

234
00:12:25,400 --> 00:12:28,900
There's some functions like Global pause and Global use software

235
00:12:28,900 --> 00:12:29,600
rendering.

236
00:12:30,100 --> 00:12:35,600
And although we have Live code editing for everything in the game, the

237
00:12:35,600 --> 00:12:39,300
platform layer is the one thing that we don't have any Live code

238
00:12:39,300 --> 00:12:40,800
editing on, right?

239
00:12:40,800 --> 00:12:46,800
So right now we don't actually have any way of actually, you know, of

240
00:12:46,800 --> 00:12:47,600
ever doing that.

241
00:12:47,600 --> 00:12:48,700
We don't have any way.

242
00:12:51,200 --> 00:12:55,100
Of toggling that variable at runtime because although normally we

243
00:12:55,100 --> 00:12:58,700
could just go ahead and toggle it using some kind of Live code editing

244
00:12:58,700 --> 00:13:02,100
trick which we have, we can't actually do that here.

245
00:13:02,900 --> 00:13:06,400
So, one thing that I would like to be able to do is make, you know,

246
00:13:06,400 --> 00:13:08,400
something like this easy to edit.

247
00:13:08,400 --> 00:13:13,000
So that would be easy for us to say this variable is a variable that I

248
00:13:13,000 --> 00:13:14,000
want to edit, right?

249
00:13:14,000 --> 00:13:18,800
This is variables and variable that I want to be able to you know

250
00:13:20,800 --> 00:13:25,800
I want to see a little interface of it up up here, right?

251
00:13:26,400 --> 00:13:29,400
So in our startup time is awful.

252
00:13:29,400 --> 00:13:33,600
Now that we launched opengl that that AMD context creation is super

253
00:13:33,600 --> 00:13:34,300
expensive.

254
00:13:35,600 --> 00:13:36,100
So yeah.

255
00:13:36,500 --> 00:13:39,700
So here is our, I mean, am I wrong about that?

256
00:13:39,700 --> 00:13:40,300
Look at that.

257
00:13:40,300 --> 00:13:41,600
Look at how long that takes.

258
00:13:42,600 --> 00:13:43,400
Look at how long that takes.

259
00:13:43,400 --> 00:13:45,500
That's all opengl initialization right there.

260
00:13:46,700 --> 00:13:47,600
It's just brutal.

261
00:13:48,900 --> 00:13:53,400
I almost want to render running software just to not have to deal with

262
00:13:53,400 --> 00:13:54,300
that, right?

263
00:13:55,200 --> 00:14:02,100
But anyway, so that's an example that, like, and even the show cursor

264
00:14:02,100 --> 00:14:05,100
would be an interesting one, but Global you saw for entering and

265
00:14:05,100 --> 00:14:09,300
Global paws, are some examples of things that I would like to have a

266
00:14:09,300 --> 00:14:12,200
way of controlling in a nice interface potentially.

267
00:14:12,200 --> 00:14:12,500
Right?

268
00:14:12,500 --> 00:14:14,000
I would like that to be something we could do.

269
00:14:14,600 --> 00:14:16,400
So, let's think about how we might

270
00:14:16,600 --> 00:14:21,400
Want to have that happen now, the best possible way if we were in a

271
00:14:21,400 --> 00:14:25,600
sort of meta programming, kind of a mood would be if we just marked it

272
00:14:25,600 --> 00:14:26,900
right here, right?

273
00:14:27,000 --> 00:14:29,200
And we could do that in a completely zero cost way.

274
00:14:29,200 --> 00:14:33,500
We just do something like, you know, met a program, you know, whatever

275
00:14:33,500 --> 00:14:36,500
you want to do here is like editable variable.

276
00:14:36,500 --> 00:14:38,700
You could imagine, you can make up anything you wanted.

277
00:14:38,800 --> 00:14:41,700
And if there was the pre pass that went through here, it could sort of

278
00:14:41,700 --> 00:14:43,300
grab that and then do something with it.

279
00:14:43,400 --> 00:14:46,400
But I feel like we want to keep things relatively

280
00:14:46,500 --> 00:14:50,100
Simple for this, if we're trying to sort of finish off the debug

281
00:14:50,100 --> 00:14:52,900
system, we don't want to introduce too much extraneous stuff.

282
00:14:52,900 --> 00:14:56,500
So the next best thing I think would be to just have in the code

283
00:14:56,500 --> 00:14:57,000
somewhere.

284
00:14:58,000 --> 00:14:59,400
A place where we announced.

285
00:15:00,000 --> 00:15:03,600
Variables s things that we want to edit and we just put them in there

286
00:15:03,600 --> 00:15:04,600
when we want them, right?

287
00:15:04,600 --> 00:15:08,900
And so to do that, I would take these two that I actually want which

288
00:15:08,900 --> 00:15:13,300
is global pause and Global use software rendering and I'll just put

289
00:15:13,300 --> 00:15:16,300
them down somewhere where they would actually be relevant, right?

290
00:15:16,300 --> 00:15:23,700
So you know inside our Loop here where we are doing our while running

291
00:15:23,700 --> 00:15:24,900
right here.

292
00:15:24,900 --> 00:15:29,100
What I could do is while we're doing our Global running.

293
00:15:29,100 --> 00:15:29,500
Oops.

294
00:15:29,500 --> 00:15:29,800
That's not

295
00:15:30,000 --> 00:15:32,000
Actually, that's that's a test loop.

296
00:15:32,600 --> 00:15:36,800
We're actually looking at this one while we're doing this, this Global

297
00:15:36,800 --> 00:15:37,600
running bit here.

298
00:15:38,400 --> 00:15:40,500
Then what I might want to do is say, oh okay.

299
00:15:42,200 --> 00:15:46,700
Let's announce these variables, maybe I want to keep that inside that

300
00:15:46,700 --> 00:15:47,200
block.

301
00:15:48,000 --> 00:15:49,200
Well, it's not really a cute little fish.

302
00:15:49,200 --> 00:15:49,800
So I'll put it up here.

303
00:15:50,700 --> 00:15:53,100
So what I want to do here, right is I want to be able to announce

304
00:15:53,100 --> 00:15:56,600
these variables and we sort of had a way that we were going to do that

305
00:15:56,600 --> 00:16:03,200
in in the handmade debug interface code that was debug VAR.

306
00:16:05,300 --> 00:16:05,900
Right.

307
00:16:06,200 --> 00:16:09,800
So we have this sort of method where we could sort of say debug

308
00:16:09,800 --> 00:16:13,600
variable and when we said to you but variable we could say type path

309
00:16:13,600 --> 00:16:17,700
and variable and I can actually scroll this up into view.

310
00:16:17,700 --> 00:16:19,400
Can I not think for a coder?

311
00:16:19,400 --> 00:16:20,500
Has a way to do that?

312
00:16:21,200 --> 00:16:22,400
Well I could do this.

313
00:16:22,700 --> 00:16:23,200
There we go.

314
00:16:25,100 --> 00:16:32,500
So, debug variable is a way of saying we have a variable, we want it

315
00:16:32,500 --> 00:16:33,900
to be editable, right?

316
00:16:33,900 --> 00:16:40,500
And it looks like that basically defines that variable in a particular

317
00:16:40,500 --> 00:16:41,800
location, right?

318
00:16:41,800 --> 00:16:46,600
There's the, there's the, the variable type that it is and it's doing

319
00:16:46,600 --> 00:16:48,800
this sort of global constants thing.

320
00:16:48,800 --> 00:16:54,300
So, all of the stuff has to be it has to be kind of out in those in

321
00:16:54,300 --> 00:16:54,500
those

322
00:16:55,200 --> 00:16:55,800
Well constants.

323
00:16:56,200 --> 00:17:00,300
Now I don't know if that's such a good idea, that was how we were

324
00:17:00,300 --> 00:17:03,800
doing it, but I don't actually know if we want it to work that way,

325
00:17:03,900 --> 00:17:04,500
right?

326
00:17:05,400 --> 00:17:07,400
So like I said, this may have been a case where we just went a little

327
00:17:07,400 --> 00:17:11,800
bit too far and I feel like what we probably want is something a

328
00:17:11,800 --> 00:17:15,700
little bit more straightforward like something where we can just say

329
00:17:15,700 --> 00:17:20,300
like, you know, maybe like this is debug editable or something like

330
00:17:20,300 --> 00:17:20,700
this.

331
00:17:21,000 --> 00:17:23,599
Something where we can just say, all right, we'll announce when things

332
00:17:23,599 --> 00:17:24,900
are due by editable.

333
00:17:25,099 --> 00:17:29,400
And and maybe we give up some of the the stuff we were trying to go

334
00:17:29,400 --> 00:17:32,100
for in the other cases but you know, something where we can just say,

335
00:17:32,100 --> 00:17:34,300
I want to be able to debug edit these things.

336
00:17:34,300 --> 00:17:37,600
Now, I like the path part of things.

337
00:17:37,600 --> 00:17:41,500
I like the fact that we could have a path and because the reason that

338
00:17:41,500 --> 00:17:48,200
I like that path part of things was because I like having a way of

339
00:17:48,200 --> 00:17:51,500
categorizing these things in the interface so that the interface

340
00:17:51,500 --> 00:17:55,100
doesn't get too clogged, right because

341
00:17:55,100 --> 00:17:58,300
cuz you know, if you have like a hundred debug variables in there, if

342
00:17:58,300 --> 00:17:59,900
you don't have some way of keeping that under,

343
00:18:00,000 --> 00:18:00,600
Troll.

344
00:18:01,000 --> 00:18:03,800
It can be a little bit janky to get to, right?

345
00:18:03,800 --> 00:18:06,500
It can be a little bit a little bit ownerís, right?

346
00:18:08,800 --> 00:18:11,300
So in this case, I guess what I'll say is like, okay, when we come

347
00:18:11,300 --> 00:18:13,300
through here will say to you by get it.

348
00:18:13,800 --> 00:18:17,600
And here's this this thing and I'll just say where I want that to be

349
00:18:17,600 --> 00:18:20,700
placed in the path as a string, like kind of like we were doing

350
00:18:20,700 --> 00:18:21,200
before.

351
00:18:21,500 --> 00:18:24,100
And so, where do we want the global pause to be?

352
00:18:24,700 --> 00:18:31,700
Maybe we want that to be in like, you know, platform know if we really

353
00:18:31,700 --> 00:18:32,900
need the leading /.

354
00:18:32,900 --> 00:18:34,100
Do we need a leading /?

355
00:18:34,100 --> 00:18:34,500
I don't know.

356
00:18:34,500 --> 00:18:35,200
Probably not.

357
00:18:35,900 --> 00:18:36,400
We may be.

358
00:18:36,400 --> 00:18:38,300
We want that to be inside.

359
00:18:38,400 --> 00:18:43,500
Arm like, you know, paused or something like that.

360
00:18:44,100 --> 00:18:48,600
And this will be in platform software rendering something like this,

361
00:18:49,100 --> 00:18:50,300
maybe, I'm not sure.

362
00:18:51,500 --> 00:18:55,100
So, you know, that would be sort of analogous to what we were doing

363
00:18:55,100 --> 00:18:58,700
before but maybe just a little bit saner and we're not trying to do

364
00:18:58,700 --> 00:19:00,200
anything particularly fancy.

365
00:19:00,400 --> 00:19:03,700
We're just saying edit a global variable and that's really the the

366
00:19:03,700 --> 00:19:05,700
feature that it would have, right?

367
00:19:06,400 --> 00:19:07,300
So in this case,

368
00:19:08,400 --> 00:19:11,100
Like what we've got the debug if and that sort of stuff, we could

369
00:19:11,100 --> 00:19:15,500
also, you know, this just allows us to simplify this down to the point

370
00:19:15,500 --> 00:19:19,300
where those variables are still defined in our code and the only

371
00:19:19,300 --> 00:19:23,500
alternative that again without any metaprogramming context, there is

372
00:19:23,800 --> 00:19:27,500
that we would have to do sort of the way we were doing it before where

373
00:19:27,500 --> 00:19:29,400
there's a config, right?

374
00:19:29,500 --> 00:19:31,800
And this config file has all the stuff in it.

375
00:19:32,000 --> 00:19:35,200
Now I just don't know if that makes a whole lot of sense and the

376
00:19:35,200 --> 00:19:38,000
reason that I think that that's a little bit trickier it's just

377
00:19:38,000 --> 00:19:38,300
because

378
00:19:38,700 --> 00:19:41,600
It's just as we were going down that path.

379
00:19:41,700 --> 00:19:45,400
It just doesn't feel that good to have this giant file with all of

380
00:19:45,400 --> 00:19:48,300
these things named in, this particular way, you know.

381
00:19:56,300 --> 00:19:59,600
It just seems a little overwrought and maybe, you know, maybe I'm

382
00:19:59,600 --> 00:20:00,100
missing it.

383
00:20:00,100 --> 00:20:01,900
Maybe this is actually a good way to do it.

384
00:20:01,900 --> 00:20:06,200
I don't really know but it just seems like it's a little bit.

385
00:20:07,600 --> 00:20:09,600
It just seems a little bit off is all.

386
00:20:11,700 --> 00:20:12,400
I could be wrong.

387
00:20:12,400 --> 00:20:14,700
Maybe I'm doing a stupid thing by getting rid of it.

388
00:20:15,100 --> 00:20:17,500
Maybe we should try to continue to use it that way.

389
00:20:17,800 --> 00:20:20,200
I mean, one nice thing about this, right?

390
00:20:20,200 --> 00:20:22,900
Is that it does, I guess, allow you to sort of

391
00:20:24,000 --> 00:20:30,700
more easily, sort of grabbed whole sets of settings, right?

392
00:20:30,700 --> 00:20:34,300
If they're all in kind of one file like that, I suppose that's

393
00:20:34,300 --> 00:20:36,900
something worth looking at maybe.

394
00:20:40,000 --> 00:20:43,400
I don't know, I wish I had a stronger opinion about it.

395
00:20:43,500 --> 00:20:47,500
I just feel like going through that Loop of having the config file

396
00:20:47,700 --> 00:20:51,600
seem to be causing us kind of some problems where we, when we would do

397
00:20:51,600 --> 00:20:55,100
when we would add one of the code, we would have to go in and add it

398
00:20:55,400 --> 00:20:56,300
to the config.

399
00:20:56,300 --> 00:20:58,200
Maybe that's not such a bad idea, though, either?

400
00:20:58,200 --> 00:20:59,800
I mean, you could imagine,

401
00:21:00,000 --> 00:21:02,800
The end of the day, going back and doing that.

402
00:21:02,900 --> 00:21:03,400
I don't know.

403
00:21:03,800 --> 00:21:06,200
I can't say that I have a strong opinion, either way, I think just

404
00:21:06,200 --> 00:21:09,600
what I would like to do is make it so that it's maybe just not.

405
00:21:09,600 --> 00:21:10,200
So

406
00:21:13,700 --> 00:21:16,500
I'd like to make it not so complicated.

407
00:21:16,500 --> 00:21:19,000
So I'm just going to try and take a little bit of that complexity out

408
00:21:19,000 --> 00:21:19,300
of it.

409
00:21:19,300 --> 00:21:19,800
It's all.

410
00:21:20,600 --> 00:21:23,900
So I think I'd like to try that and all this is saying is that hey

411
00:21:23,900 --> 00:21:26,300
there's a variable here, it's called Global pause.

412
00:21:26,600 --> 00:21:30,900
I want to kind of bind it to this editing point in the debug system

413
00:21:31,200 --> 00:21:35,200
and it's assumed that I am going to take care of that.

414
00:21:36,700 --> 00:21:38,000
I've defined the pool.

415
00:21:38,200 --> 00:21:41,000
So it's, you know, the onus is on me and we'll just keep it that way.

416
00:21:41,200 --> 00:21:43,300
It's not as perhaps efficacious as

417
00:21:43,500 --> 00:21:45,800
Other way where the debug system is thinking about a little bit more.

418
00:21:46,200 --> 00:21:48,200
But maybe that's the way that that's going to go.

419
00:21:48,900 --> 00:21:53,900
And so in here when we've got these, you know, when I and I think

420
00:21:53,900 --> 00:21:55,800
debug value is that was debug value.

421
00:21:55,800 --> 00:21:58,600
The Way We Were specifying that maybe not do by variable was debug

422
00:21:58,600 --> 00:21:59,100
value.

423
00:21:59,100 --> 00:22:01,500
The way we were doing that before because I think we kind of have this

424
00:22:01,500 --> 00:22:02,300
concept.

425
00:22:02,300 --> 00:22:03,500
Where was the thing that was getting?

426
00:22:04,500 --> 00:22:09,300
Yeah, I think debug value is it so we can probably even say that maybe

427
00:22:09,300 --> 00:22:11,000
this is, you know.

428
00:22:12,600 --> 00:22:16,400
A way that that could work, maybe we can sort of say, let's take a

429
00:22:16,400 --> 00:22:22,400
look at debug value as potentially a way to do that and maybe we can

430
00:22:22,400 --> 00:22:26,200
even sort of piggyback on this and just get rid of that concept of the

431
00:22:26,200 --> 00:22:28,100
debug variables entirely.

432
00:22:28,500 --> 00:22:29,900
So, let me take a look and see.

433
00:22:29,900 --> 00:22:31,700
Let me see how we were doing that.

434
00:22:31,700 --> 00:22:33,500
I think we were doing it this way, right?

435
00:22:36,300 --> 00:22:40,000
We just say, hey, here's beginning to blockers and day to block and

436
00:22:40,000 --> 00:22:43,600
the begin and data block, I guess the way that we did that we see

437
00:22:43,600 --> 00:22:48,100
here, debug begin block.

438
00:22:50,800 --> 00:22:54,000
Yeah, name and ID.

439
00:22:55,600 --> 00:23:00,700
I don't really know how the ID differed there.

440
00:23:00,700 --> 00:23:03,800
I think it was just to give it a grid that it could always use to

441
00:23:03,800 --> 00:23:04,200
remember.

442
00:23:04,500 --> 00:23:08,600
I'm going to take a look at where we were using that before, which was

443
00:23:08,600 --> 00:23:13,100
in the the place where we printed out the entities if you remember

444
00:23:13,100 --> 00:23:13,700
correctly.

445
00:23:14,200 --> 00:23:16,400
So we had a begin data block.

446
00:23:16,400 --> 00:23:19,900
I believe in there it is.

447
00:23:21,000 --> 00:23:24,100
And yeah, I think it's just like that's just some ID that's sort of

448
00:23:24,100 --> 00:23:25,000
associated with it.

449
00:23:25,100 --> 00:23:28,500
I don't know if we required that or not but we'll see.

450
00:23:28,500 --> 00:23:33,500
So this was let's just say this is platform and this debug ID, I don't

451
00:23:33,500 --> 00:23:34,200
know if we actually

452
00:23:34,300 --> 00:23:36,500
Have one and not let's call it zero for now we'll see if that's a

453
00:23:36,500 --> 00:23:38,900
problem, right?

454
00:23:38,900 --> 00:23:42,800
And Aunt there is no septal conversion is

455
00:23:44,500 --> 00:23:50,500
Turn nasty bug, ID comma, and debug operator equals.

456
00:23:50,500 --> 00:23:56,400
So that debug ID, I guess has to be transmitted a long time.

457
00:23:56,400 --> 00:23:59,800
Some touch this code, that debug ID actually has

458
00:24:00,000 --> 00:24:02,600
Be a real thing.

459
00:24:03,400 --> 00:24:03,800
Yeah.

460
00:24:04,900 --> 00:24:07,300
There it is, kind of see it here.

461
00:24:08,300 --> 00:24:11,500
So if we want to make this one of these it's pretty trivial to make a

462
00:24:11,500 --> 00:24:16,100
debug ID and that debug ID would just be like something that we could

463
00:24:16,100 --> 00:24:19,900
point to some kind of stable pointer in the system, which is not

464
00:24:19,900 --> 00:24:21,300
particularly tricky, right?

465
00:24:21,900 --> 00:24:25,700
You know, since we could just use anything, we could use, you know, of

466
00:24:26,400 --> 00:24:29,300
any pointer from here, that's going to be unique would be sufficient

467
00:24:29,500 --> 00:24:31,100
to make a unique ID for it.

468
00:24:32,700 --> 00:24:34,200
So, let's just see what happens there.

469
00:24:35,800 --> 00:24:36,400
This turnaround.

470
00:24:36,400 --> 00:24:37,600
Time is awful.

471
00:24:37,900 --> 00:24:38,800
My Lord.

472
00:24:40,300 --> 00:24:41,000
So, yeah.

473
00:24:41,200 --> 00:24:42,800
So, in this case,

474
00:24:44,500 --> 00:24:45,900
Unhandled and data block.

475
00:24:45,900 --> 00:24:46,900
What?

476
00:24:47,300 --> 00:24:48,400
What are you talking about?

477
00:24:48,400 --> 00:24:49,200
This is this.

478
00:24:49,200 --> 00:24:50,400
Not the correct way to do this.

479
00:24:50,400 --> 00:24:53,200
Did I do something wrong and made?

480
00:24:54,500 --> 00:24:55,900
World mode.

481
00:24:56,600 --> 00:24:57,000
Okay.

482
00:25:02,800 --> 00:25:04,300
It has to begin data block.

483
00:25:05,300 --> 00:25:09,200
And an end date of block, which is the correct way to do it, right?

484
00:25:10,100 --> 00:25:13,600
So that would be the way we would capture that, right?

485
00:25:13,600 --> 00:25:15,800
I don't think there's anything particularly odd there.

486
00:25:17,400 --> 00:25:18,700
Seems like that should have worked.

487
00:25:21,000 --> 00:25:23,900
I wonder if that's just an artifact of the fact that we didn't quite

488
00:25:23,900 --> 00:25:28,900
finish the debug because stuff, I'm going to take a look at at what

489
00:25:28,900 --> 00:25:29,800
happens in here.

490
00:25:34,600 --> 00:25:39,100
I feel like we don't like the debug stuff doesn't print out.

491
00:25:40,600 --> 00:25:41,500
In this mode.

492
00:25:43,300 --> 00:25:43,900
Right.

493
00:25:44,000 --> 00:25:45,700
I don't actually see the debug there.

494
00:25:46,600 --> 00:25:50,400
So it's here if we're back in here, but if we actually go into the

495
00:25:50,400 --> 00:25:54,800
game, we don't get the debug output anymore, which is lame.

496
00:25:56,700 --> 00:26:01,000
So that's something we have to debug as well because you can kind of

497
00:26:01,000 --> 00:26:01,600
see.

498
00:26:03,600 --> 00:26:08,100
I guess, unless the trees are on top of it somehow, because we

499
00:26:08,100 --> 00:26:10,100
wouldn't really see much against the white, right?

500
00:26:10,100 --> 00:26:11,300
This is just white text.

501
00:26:11,500 --> 00:26:15,700
So if it was back there, we wouldn't actually see it, but presumably

502
00:26:15,700 --> 00:26:16,800
it's on top of everything.

503
00:26:16,900 --> 00:26:21,400
So, the fact that we don't see it there, it's kind of odd because

504
00:26:21,900 --> 00:26:23,000
correct me if I'm wrong.

505
00:26:23,600 --> 00:26:28,800
But before we stopped working on the debug stuff, we moved it into its

506
00:26:28,800 --> 00:26:33,000
own sort of place in the in the platform Loop, right?

507
00:26:36,900 --> 00:26:39,900
I mean, here it is, if I'm if I'm not mistaken,

508
00:26:45,200 --> 00:26:45,700
Right here.

509
00:26:46,100 --> 00:26:53,700
So debug frame end that should in theory have added the debug calls

510
00:26:54,600 --> 00:26:55,300
right there.

511
00:26:59,500 --> 00:26:59,800
so,

512
00:27:00,000 --> 00:27:01,100
I thought.

513
00:27:03,500 --> 00:27:10,800
Is I wonder if this means that we are sorting like that.

514
00:27:10,800 --> 00:27:19,300
Those the basically the sort values of those strings are not

515
00:27:19,300 --> 00:27:22,100
sufficient to put them on top somehow.

516
00:27:25,700 --> 00:27:28,000
But I wouldn't even think that, that would be possible either.

517
00:27:28,000 --> 00:27:33,800
So I want to take a look and see why we're not getting why we're not

518
00:27:33,800 --> 00:27:37,900
getting those because I don't really understand why I'm going to

519
00:27:37,900 --> 00:27:38,600
actually.

520
00:27:40,600 --> 00:27:42,200
I think what I would do.

521
00:27:49,400 --> 00:27:52,600
I think what I'd like to do is, first of all, see whether they're

522
00:27:52,600 --> 00:27:53,400
being drawn.

523
00:27:53,600 --> 00:27:57,100
And the way that I think that I can do that relatively effectively is

524
00:27:57,100 --> 00:27:57,800
just make it.

525
00:27:57,800 --> 00:28:02,200
So that the game World mode doesn't actually render.

526
00:28:02,400 --> 00:28:04,800
It never gets a chance to actually render itself.

527
00:28:05,500 --> 00:28:08,300
I think that's probably the easiest thing to do so.

528
00:28:08,300 --> 00:28:12,700
Like an update and render World update and render World takes

529
00:28:14,900 --> 00:28:16,500
As an input the render group.

530
00:28:16,600 --> 00:28:21,400
And if I was to just give zero this out and so that it doesn't have

531
00:28:21,400 --> 00:28:23,100
any way to actually render anything.

532
00:28:23,200 --> 00:28:24,400
It's not going to do anything.

533
00:28:27,700 --> 00:28:30,300
Go back up here, dude.

534
00:28:33,200 --> 00:28:33,700
Here we go.

535
00:28:34,700 --> 00:28:35,400
Let me see.

536
00:28:35,400 --> 00:28:38,600
What result is actually meant to do.

537
00:28:40,000 --> 00:28:42,400
In this case, not a particularly good name.

538
00:28:43,500 --> 00:28:48,100
So result always returns false, that's pretty funny.

539
00:28:48,900 --> 00:28:56,300
All right, so it looks like that's just completely useless.

540
00:28:57,300 --> 00:28:59,400
So what I'd like to do is prevent the from rendering.

541
00:28:59,700 --> 00:29:03,300
So now, when we switch into that mode, there won't be anything else in

542
00:29:03,300 --> 00:29:08,100
the way, so I can just see whether this is still drawn or not, right?

543
00:29:08,300 --> 00:29:09,600
That's all I really want to see.

544
00:29:09,800 --> 00:29:13,800
Looks like it actually still is, I should probably include a clear so

545
00:29:13,800 --> 00:29:15,000
we can be a little more.

546
00:29:17,700 --> 00:29:21,600
Like I could just move the if zero down just a bit.

547
00:29:21,700 --> 00:29:26,600
So now it is actually still clearing the screen and and that way, I

548
00:29:26,600 --> 00:29:28,900
can see if it's still drawn, because that'll tell me if it's a sorting

549
00:29:28,900 --> 00:29:29,800
problem or not.

550
00:29:31,700 --> 00:29:32,700
Which is what I need to know.

551
00:29:34,600 --> 00:29:38,900
Okay, so as I suspected, it's just that this stuff is getting sorted

552
00:29:39,200 --> 00:29:43,100
in such a way that it's below what's in the actual game world.

553
00:29:43,600 --> 00:29:48,500
So, I need a way of making it so that those things sort in front and

554
00:29:48,500 --> 00:29:50,800
cannot be put behind stuff that's actually in the game.

555
00:29:50,800 --> 00:29:54,600
Because I never want that to actually be the, you know, to actually

556
00:29:54,600 --> 00:29:55,100
occur.

557
00:29:57,400 --> 00:29:59,900
So the question is how to do that most effectively?

558
00:30:01,400 --> 00:30:07,300
The sort key that I give to fonts or that I give to two elements,

559
00:30:07,300 --> 00:30:07,900
right?

560
00:30:08,300 --> 00:30:11,000
I actually have a fair bit of control over, what?

561
00:30:11,000 --> 00:30:14,000
That sort key is because we just make it up.

562
00:30:14,300 --> 00:30:17,900
And so what I could do is make it so that when we do like, a, debug

563
00:30:17,900 --> 00:30:21,800
text line when we actually do any kind of text out.

564
00:30:22,000 --> 00:30:28,300
So, you know, I guess in this case, I've got, let's see here, debug

565
00:30:28,300 --> 00:30:29,200
text up.

566
00:30:30,600 --> 00:30:32,400
Is that the only place we actually do that?

567
00:30:32,400 --> 00:30:35,900
Let me see where actually do a push bitmaps.

568
00:30:39,800 --> 00:30:43,100
Yeah, so I do want to hear and I do one there.

569
00:30:43,200 --> 00:30:47,000
So this is the only place we ever draw fonts in this whole system,

570
00:30:47,000 --> 00:30:47,600
right?

571
00:30:48,000 --> 00:30:53,400
So if I have this push bitmap thing here, when I'm sending this down,

572
00:30:53,900 --> 00:30:58,200
I could have some way for pushed bitmap to sort of override.

573
00:30:58,200 --> 00:31:02,300
What that Z value was in a way that only changes its order.

574
00:31:06,800 --> 00:31:09,600
you know, I'm saying so for example,

575
00:31:11,900 --> 00:31:14,300
In hand and read a group that age.

576
00:31:15,200 --> 00:31:19,000
Well actually guess in this case would be dot CPP in the push bitmap

577
00:31:19,000 --> 00:31:19,600
routine.

578
00:31:21,700 --> 00:31:25,300
You can kind of see here that it's going to go through, push render

579
00:31:25,300 --> 00:31:30,600
elements to, you know, to do, whatever he's got to do and it's going

580
00:31:30,600 --> 00:31:34,300
to call this dim basis sort key, or I'm going to call it's going to

581
00:31:34,300 --> 00:31:38,600
use the result of that bitmap, Tim call.

582
00:31:38,800 --> 00:31:41,900
It's going to use the result that it put in the sort key in order to

583
00:31:41,900 --> 00:31:43,200
determine how to sort.

584
00:31:43,300 --> 00:31:47,200
But we could we're free to pass anything else we want here, right?

585
00:31:47,200 --> 00:31:49,200
So we could trivially just do

586
00:31:50,900 --> 00:31:55,500
Some completely other thing by we could completely biased thesaurus in

587
00:31:55,500 --> 00:31:56,700
any way we the sort.

588
00:31:56,700 --> 00:32:00,500
Anyway, we want by just adding some kind of like a sort bias here,

589
00:32:00,800 --> 00:32:01,400
right?

590
00:32:01,500 --> 00:32:04,200
We can add something in here, that's just like, oh, is there a sort of

591
00:32:04,200 --> 00:32:07,100
bias, you know, whatever it is, by default is nothing.

592
00:32:07,100 --> 00:32:10,300
But if you want to, you can bias the sort value in any way that you

593
00:32:10,300 --> 00:32:10,900
want.

594
00:32:11,500 --> 00:32:13,100
And that would be pretty trivial now.

595
00:32:13,100 --> 00:32:13,800
I don't remember.

596
00:32:13,800 --> 00:32:17,800
It's our sort key, I guess our sort key is at the moment floating

597
00:32:17,800 --> 00:32:18,400
point.

598
00:32:18,600 --> 00:32:19,600
So it would be

599
00:32:19,800 --> 00:32:20,800
An R32 there.

600
00:32:22,100 --> 00:32:26,100
So that's when we do it and if we did it that way, then when we do our

601
00:32:26,100 --> 00:32:32,000
push that map here, I don't super know what we're still using the C

602
00:32:32,000 --> 00:32:38,400
line value for, but I believe it's just for sort of vestigial remain

603
00:32:38,400 --> 00:32:42,500
at this point in get render entity basis p.

604
00:32:44,100 --> 00:32:48,300
It's the thing that multiplies the alignment value, right?

605
00:32:48,700 --> 00:32:49,700
So,

606
00:32:51,500 --> 00:32:54,000
no, it's not in there so I guess it's only in

607
00:32:55,500 --> 00:32:56,400
Get bitmapped in.

608
00:32:58,800 --> 00:32:59,800
So, there's the C line, right?

609
00:33:00,000 --> 00:33:05,000
Are so essentially, that's if we don't want to, if we don't want to

610
00:33:05,000 --> 00:33:11,000
use the alignment information, then we use that value, right?

611
00:33:11,000 --> 00:33:14,900
To adjust it, and I don't really know who sent who's actually still

612
00:33:14,900 --> 00:33:20,000
using that we can check pretty easily by actually just doing this if

613
00:33:20,000 --> 00:33:20,600
we want to.

614
00:33:28,300 --> 00:33:29,800
And now it'll give us an error.

615
00:33:29,800 --> 00:33:33,800
Oops it'll give us an error everywhere in the code where anyone's

616
00:33:33,800 --> 00:33:38,100
calling that version of the function and so we can go ahead and step

617
00:33:38,100 --> 00:33:38,500
through that.

618
00:33:38,500 --> 00:33:41,000
So let's see where that actually is.

619
00:33:44,000 --> 00:33:44,900
Oh, shut up.

620
00:33:48,700 --> 00:33:49,000
Forgot.

621
00:33:49,000 --> 00:33:50,300
There's two versions of this.

622
00:33:50,600 --> 00:33:52,900
Although it looks like that means this version.

623
00:33:53,200 --> 00:33:54,800
Definitely never has that happen.

624
00:33:55,700 --> 00:33:56,300
Right.

625
00:33:57,400 --> 00:34:00,300
So everyone is calling through this actual one, which makes sense

626
00:34:00,300 --> 00:34:02,800
because they're only going to put call through the bitmap ID version.

627
00:34:03,500 --> 00:34:05,800
So I really didn't need to test that one at all, that was just kind of

628
00:34:05,800 --> 00:34:07,500
a waste of everyone's time and energy.

629
00:34:09,600 --> 00:34:11,199
What I meant to do, or should have done?

630
00:34:11,199 --> 00:34:12,800
I should say, is this

631
00:34:16,699 --> 00:34:21,500
All right, so if I come in here and look for that, it seems like

632
00:34:21,500 --> 00:34:24,600
there's really only one place and it's here.

633
00:34:24,900 --> 00:34:29,300
And so this is literally, it's just for the debug system, the debug

634
00:34:29,300 --> 00:34:34,800
system, displaying a bitmap on the screen so that it can do it without

635
00:34:34,900 --> 00:34:38,400
its, it can basically do a debug display, the bitmap is the only case

636
00:34:38,400 --> 00:34:42,199
where we ever used that kind of means we probably shouldn't be passing

637
00:34:42,199 --> 00:34:44,800
that, and that should be a more special purpose thing.

638
00:34:45,699 --> 00:34:46,300
But yeah,

639
00:34:47,699 --> 00:34:49,699
So that's something to be aware of that.

640
00:34:49,699 --> 00:34:51,400
It's something to be aware of, to be sure.

641
00:34:52,199 --> 00:34:56,300
So I'm going to go ahead and switch back to render group a group got

642
00:34:56,300 --> 00:34:57,000
seniority.

643
00:34:57,700 --> 00:35:05,000
So in here, if I then want to I can I'll reinstate that obviously for

644
00:35:05,000 --> 00:35:05,800
the time being

645
00:35:08,100 --> 00:35:13,200
and what I'd like to do here is take that sort bias and actually make

646
00:35:13,200 --> 00:35:14,900
that be a real thing for the moment.

647
00:35:16,300 --> 00:35:19,900
So there's our sort bias and so now someone can pass the sort of bias

648
00:35:19,900 --> 00:35:24,900
in when we call Push bitmap, wheel pass the sort bias, and when we do

649
00:35:24,900 --> 00:35:28,900
that sort bias, it will affect how the Sorting progresses.

650
00:35:29,500 --> 00:35:34,500
So now, inside the debug system, if we want to make everything always

651
00:35:34,500 --> 00:35:38,800
be on top as terms of our fonts, then in our push bitmap, call,

652
00:35:39,700 --> 00:35:43,600
What we could do is at the end here, we would just pass some kind of a

653
00:35:43,600 --> 00:35:44,300
sort bias.

654
00:35:44,600 --> 00:35:49,100
Now we want the sort we want to be closer to us and Z comes at us, I

655
00:35:49,100 --> 00:35:50,600
believe in our coordinate system.

656
00:35:50,800 --> 00:35:54,500
So we want this to just be some relatively large number here, right?

657
00:35:54,800 --> 00:35:57,300
We want this to be something big now, I don't know.

658
00:35:57,700 --> 00:35:58,000
I guess.

659
00:35:58,000 --> 00:35:59,800
It's technically, we could just set it to the maximum.

660
00:36:00,000 --> 00:36:03,700
Don't know that that's actually necessary in this case, but we, you

661
00:36:03,700 --> 00:36:06,600
know, we could we could say it's the maximum value.

662
00:36:07,200 --> 00:36:08,500
I hope that doesn't break anything.

663
00:36:08,500 --> 00:36:10,400
I have to think about if there's anything floating Point wise that

664
00:36:10,400 --> 00:36:13,700
that would break, but I assumed that it would just clamp out the

665
00:36:13,700 --> 00:36:14,200
value.

666
00:36:17,900 --> 00:36:18,500
So, there we go.

667
00:36:18,500 --> 00:36:21,700
Now we've gotten our debug values back and that's all good.

668
00:36:21,800 --> 00:36:24,800
Of course, you can also see that we can really see them very well,

669
00:36:25,000 --> 00:36:25,500
right?

670
00:36:25,900 --> 00:36:29,200
They don't really show up particularly well, and the reason for that,

671
00:36:29,200 --> 00:36:32,000
of course, is that, you know, if the background like, in this case

672
00:36:32,000 --> 00:36:34,400
happens to be bright white, the text is bright white.

673
00:36:34,400 --> 00:36:35,100
We can't see them.

674
00:36:35,400 --> 00:36:39,000
We may want for our debug code to do something, where we actually sort

675
00:36:39,000 --> 00:36:45,800
of draw to draw a little bit of additional drop shadowing on to them,

676
00:36:45,900 --> 00:36:47,600
so that we can see them even in circumstances.

677
00:36:47,700 --> 00:36:50,500
Santa's where they might be harder to see and there's a number of

678
00:36:50,500 --> 00:36:50,900
different ways.

679
00:36:50,900 --> 00:36:52,600
We can do that one way.

680
00:36:52,600 --> 00:36:56,200
Would be to just have the push bitmap call happen twice right?

681
00:36:56,500 --> 00:37:00,100
Like you can imagine doing this and this this two different times if

682
00:37:00,100 --> 00:37:06,400
that makes sense, where you know the bitmap offset here, we could just

683
00:37:06,400 --> 00:37:10,000
go ahead and make that be offset by just a little bit.

684
00:37:10,000 --> 00:37:11,600
I believe we're in pixel space here.

685
00:37:11,800 --> 00:37:14,700
So you know, something like this I guess we'd want to be down and why.

686
00:37:14,700 --> 00:37:16,300
So it really be look like that.

687
00:37:17,600 --> 00:37:21,900
And then when we when we do the color we would just have it be black.

688
00:37:22,200 --> 00:37:23,100
And so

689
00:37:24,400 --> 00:37:28,100
We could do something like this which, you know, I think we I put

690
00:37:28,100 --> 00:37:28,800
those in the wrong order.

691
00:37:28,800 --> 00:37:29,400
Of course.

692
00:37:29,600 --> 00:37:31,800
So that's, you know, my bad but

693
00:37:34,700 --> 00:37:38,200
Now, you can see, we can at least read them in sort of all

694
00:37:38,200 --> 00:37:39,000
circumstances.

695
00:37:39,000 --> 00:37:42,300
It's not the world's prettiest debug display certainly, but it at

696
00:37:42,300 --> 00:37:47,800
least allows us to see even against really unfortunate, you know, kind

697
00:37:47,800 --> 00:37:53,300
of backdrops, it lets us kind of see what's, what, what the, what the

698
00:37:53,300 --> 00:37:57,000
text says we can do better, but that's probably good enough for now.

699
00:37:57,500 --> 00:38:01,200
Now, since we have the ability to sort, I suppose, this is the case

700
00:38:01,200 --> 00:38:03,900
where now we would probably want to say, let's not do float backs, you

701
00:38:03,900 --> 00:38:04,300
know, in this case

702
00:38:04,700 --> 00:38:07,500
We'd say, oh we want that one to be on top.

703
00:38:07,500 --> 00:38:11,100
So, you know, we'll we'll have two of these and we'll just make this

704
00:38:11,100 --> 00:38:13,700
one sort higher because now we can just play with the sort key,

705
00:38:13,700 --> 00:38:14,600
however, we want.

706
00:38:14,600 --> 00:38:19,300
So we know we always want the white leading text on top and the black

707
00:38:19,300 --> 00:38:20,900
backdrop, we want underneath.

708
00:38:21,200 --> 00:38:25,200
So we can guarantee that that always happens in the renderer by just

709
00:38:25,200 --> 00:38:26,300
setting the sort keys.

710
00:38:26,500 --> 00:38:30,400
Of course, in a, in the corresponding way, if that makes sense.

711
00:38:31,200 --> 00:38:34,200
So, alright, that's, you know, that's all fine.

712
00:38:34,400 --> 00:38:35,900
That's what that's, that's great.

713
00:38:36,400 --> 00:38:40,000
But we still have to get back to sort of what we were originally

714
00:38:40,000 --> 00:38:45,100
doing, which is we want some way here to start to edit these values.

715
00:38:45,400 --> 00:38:47,300
And like I said, I don't really know what the deal is with these,

716
00:38:47,300 --> 00:38:48,700
these edit blocks.

717
00:38:49,900 --> 00:38:54,300
I also don't really know how this stuff if this stuff is supposed ill

718
00:38:54,300 --> 00:38:55,600
working where we selected.

719
00:38:55,800 --> 00:38:59,800
So I think it is, so there it is.

720
00:39:01,400 --> 00:39:03,400
So, alright, so I didn't do anything wrong.

721
00:39:03,400 --> 00:39:05,100
This is the part that I wanted to test.

722
00:39:05,100 --> 00:39:07,000
You can see that ended up data blocked.

723
00:39:07,000 --> 00:39:08,300
Doesn't have a printout thing for it.

724
00:39:08,300 --> 00:39:09,600
That was probably just a thing.

725
00:39:09,600 --> 00:39:10,900
We did that was stupid.

726
00:39:11,200 --> 00:39:14,000
When we were, when we were putting this stuff in there and so I didn't

727
00:39:14,000 --> 00:39:17,200
do anything wrong with my begin and end in this, in this other case,

728
00:39:17,500 --> 00:39:18,100
right?

729
00:39:18,700 --> 00:39:22,800
So that seems fine and all this stuff still does seem to be working.

730
00:39:22,800 --> 00:39:23,300
Okay?

731
00:39:23,500 --> 00:39:25,300
So I think we're actually in relatively good shape.

732
00:39:25,300 --> 00:39:29,400
So, what I probably want to do now is I just want to make it so that

733
00:39:29,400 --> 00:39:30,000
these

734
00:39:30,100 --> 00:39:34,500
Can be edited, and then I think we'd be okay.

735
00:39:34,800 --> 00:39:39,600
Now, what I don't really know is, I don't understand how we ended up

736
00:39:39,600 --> 00:39:44,500
in exactly this situation here with the readout because I feel like

737
00:39:44,500 --> 00:39:47,800
this should sort of be underneath something a little bit more

738
00:39:47,800 --> 00:39:50,600
specifically, so I feel like the indentation didn't work properly.

739
00:39:50,900 --> 00:39:53,700
So, let's just go take a look at that, really quickly, as well.

740
00:39:53,900 --> 00:39:56,900
Before we start in on anything, they're just to try and figure out

741
00:39:56,900 --> 00:39:58,200
what was going on with that.

742
00:40:03,200 --> 00:40:08,000
Alright, so here's our debug begin, our debug and and in this case, I

743
00:40:08,000 --> 00:40:14,300
guess the platform bit, I'm not sure how this was meant to work.

744
00:40:15,000 --> 00:40:18,600
So I'm going to go ahead and and and again, look at the world mode

745
00:40:19,000 --> 00:40:22,800
code there and just see what it was doing when it did the debug

746
00:40:22,800 --> 00:40:23,300
values.

747
00:40:24,100 --> 00:40:29,100
And I guess it's just like simulation underscore entity, that's sort

748
00:40:29,100 --> 00:40:30,100
of the block name.

749
00:40:30,200 --> 00:40:32,800
So this would be like

750
00:40:33,000 --> 00:40:34,500
No platform controls.

751
00:40:34,500 --> 00:40:35,500
I don't know what it would be.

752
00:40:36,500 --> 00:40:39,700
And then I guess the idea is we hadn't really, maybe we hadn't done

753
00:40:39,700 --> 00:40:42,200
printing out of the actual block names yet.

754
00:40:42,600 --> 00:40:46,200
I'm not sure that could make that could make sense and yeah, that

755
00:40:46,200 --> 00:40:47,700
appears to be exactly what it was.

756
00:40:48,500 --> 00:40:52,400
So it looks like the way that we're printing out blocks is really just

757
00:40:52,400 --> 00:40:53,800
kind of haphazard and stupid.

758
00:40:53,800 --> 00:40:56,900
So maybe that part is you know kind of Unfinished code in there that

759
00:40:56,900 --> 00:41:00,600
we have to go in and take a look at, let's take it.

760
00:41:00,600 --> 00:41:02,700
Let me jump back in the game here so we can get the simulation

761
00:41:02,900 --> 00:41:06,700
And again as well yeah and you can see that's what it's doing.

762
00:41:06,900 --> 00:41:11,000
It's basically saying here is the Block, it's simulation entity, and

763
00:41:11,000 --> 00:41:13,300
then it gets to the end and it's got this unhandled thing.

764
00:41:13,300 --> 00:41:14,400
It doesn't know what to do with.

765
00:41:14,700 --> 00:41:18,100
So I think what we probably want to do, I'm sorry rather the end data

766
00:41:18,100 --> 00:41:18,700
block 1.

767
00:41:19,200 --> 00:41:21,600
So I think we probably want to do here is we probably want to just

768
00:41:21,600 --> 00:41:24,300
start going in there and cleaning up this code because it looks like

769
00:41:24,300 --> 00:41:27,100
if we clean up this code and just make this a little bit nicer then we

770
00:41:27,100 --> 00:41:30,100
can just use that for everything and we don't have to worry about the

771
00:41:30,100 --> 00:41:32,800
other code with the you know, the if

772
00:41:32,900 --> 00:41:33,500
Trolls.

773
00:41:33,600 --> 00:41:37,500
I think we can just get rid of that code and just that would be a nice

774
00:41:37,500 --> 00:41:38,500
way to pair things down.

775
00:41:39,200 --> 00:41:40,900
So basically like the

776
00:41:43,100 --> 00:41:46,700
See here, this debug interface code.

777
00:41:50,500 --> 00:41:51,500
Where is it?

778
00:41:53,400 --> 00:41:57,600
This looks like the debug if and the debug variable code, I think I'm

779
00:41:57,600 --> 00:41:59,900
just going to say like we're just not going to, we're just not

780
00:42:00,000 --> 00:42:00,800
To do this anymore.

781
00:42:00,800 --> 00:42:02,400
That was like, it was an experiment.

782
00:42:02,500 --> 00:42:06,500
I think it's just adds too much complexity, and we should try to focus

783
00:42:06,500 --> 00:42:09,600
on minimizing that complexity down a little bit because we already

784
00:42:09,600 --> 00:42:15,500
have we know we want the ability to sort of do those little data

785
00:42:15,500 --> 00:42:16,100
dumps.

786
00:42:16,300 --> 00:42:19,300
Let's just put everything through that and make sure that works.

787
00:42:19,300 --> 00:42:19,800
Okay.

788
00:42:19,800 --> 00:42:23,300
And not try to have another system that maintains the H file and all

789
00:42:23,300 --> 00:42:23,600
that stuff.

790
00:42:23,600 --> 00:42:25,800
I think that's just too much, right?

791
00:42:26,400 --> 00:42:29,100
So, let's get rid of those, let's just cut those out entirely.

792
00:42:30,100 --> 00:42:33,900
And see how we would replace them if they just simply weren't there,

793
00:42:33,900 --> 00:42:34,200
right?

794
00:42:34,200 --> 00:42:39,100
So, basically, these these exist in the code, as you see in them here,

795
00:42:39,300 --> 00:42:42,200
and I want to make them go away.

796
00:42:50,400 --> 00:42:50,700
so,

797
00:42:52,900 --> 00:42:56,300
Essentially what this means is just that we have to do a little bit of

798
00:42:56,300 --> 00:43:00,500
work to pull these out into Global's ourselves, right?

799
00:43:00,600 --> 00:43:03,500
And this is why I say it's not the ultimate be all and end all of the

800
00:43:03,500 --> 00:43:04,900
thing that you might want.

801
00:43:05,300 --> 00:43:11,200
But again this is just me making that decision that I want to try and

802
00:43:11,200 --> 00:43:14,700
keep the complexity of the of the debug system down a little bit more.

803
00:43:14,700 --> 00:43:17,900
I didn't like quite how far it had gotten in terms of how much time we

804
00:43:17,900 --> 00:43:19,300
probably want to spend on the total.

805
00:43:20,300 --> 00:43:22,300
So I think in, it's just a good.

806
00:43:22,500 --> 00:43:26,700
Time to kind of pair it down a little bit so what we need if we want

807
00:43:26,700 --> 00:43:31,300
these to continue happening is we just need to have these be variables

808
00:43:31,300 --> 00:43:33,300
that are accessible somewhere.

809
00:43:34,300 --> 00:43:39,600
You know, Global variables that can be sort of accessed, right?

810
00:43:39,600 --> 00:43:42,500
They can be announced and they can be accessed.

811
00:43:42,600 --> 00:43:46,200
And so I think probably the easiest way to do that again would be to

812
00:43:46,200 --> 00:43:52,300
just take the ones that we have now and put those put

813
00:43:52,400 --> 00:43:54,700
You know, put those into some centralized location where we just

814
00:43:54,700 --> 00:43:57,700
announced them and that'll that'll be sufficient.

815
00:43:57,700 --> 00:44:00,600
I think that's fine for our purposes.

816
00:44:01,100 --> 00:44:03,800
Alright, so let's take a look at where that would actually go.

817
00:44:04,900 --> 00:44:09,300
I feel like probably if those just lived kind of in like handmade dot

818
00:44:09,300 --> 00:44:11,200
h or something, that would probably be reasonable.

819
00:44:11,800 --> 00:44:14,200
You can see we sort of started to have a little bit, something like

820
00:44:14,200 --> 00:44:15,000
that here.

821
00:44:15,300 --> 00:44:20,400
So maybe I'll just go ahead and take can make config and you know just

822
00:44:20,400 --> 00:44:21,500
drop these guys.

823
00:44:22,700 --> 00:44:26,200
I mean, I guess we could even just leave them in and make it big.

824
00:44:26,700 --> 00:44:30,500
Now, I think about it like, you know, we could literally just do this.

825
00:44:32,100 --> 00:44:32,600
Right.

826
00:44:41,600 --> 00:44:44,200
We could just do this and say, well, these are all boolean's.

827
00:44:44,200 --> 00:44:48,900
Now, write their Global variables, I probably should have added that

828
00:44:49,500 --> 00:44:51,300
while I was thinking of it, but I didn't.

829
00:44:54,400 --> 00:44:55,100
No, big deal.

830
00:45:00,200 --> 00:45:02,800
And, you know, they can all be set to the variables.

831
00:45:02,800 --> 00:45:04,400
They actually were set to originally

832
00:45:27,600 --> 00:45:28,100
so,

833
00:45:29,400 --> 00:45:33,600
I don't know that we need this to be quite so verbose, right because

834
00:45:33,600 --> 00:45:36,400
the reason that we named them that way was because we needed for the

835
00:45:36,400 --> 00:45:38,000
path to be sort of baked in there.

836
00:45:38,000 --> 00:45:41,400
And so these don't actually need to be as verbose as they are.

837
00:45:41,400 --> 00:45:45,300
Certainly you know the other thing that I need to do obviously here is

838
00:45:45,300 --> 00:45:46,600
I need to remove the code.

839
00:45:46,600 --> 00:45:51,400
We had that does the writing to handmade config because we also don't

840
00:45:51,400 --> 00:45:53,700
want to overwrite that anymore potentially.

841
00:45:53,700 --> 00:45:56,000
So I need to make sure that that's not happening.

842
00:45:56,000 --> 00:45:58,700
It looks like we got rid of that so that's fine.

843
00:45:58,900 --> 00:45:59,400
I just want to make sure

844
00:45:59,500 --> 00:46:02,500
We weren't going to do that and ruin our lives.

845
00:46:03,800 --> 00:46:05,800
So, let's take a look here.

846
00:46:05,800 --> 00:46:12,300
So, where is handmade hammock if they actually being used?

847
00:46:12,700 --> 00:46:16,800
Let me see here, I guess it must be in handmade .h.

848
00:46:17,300 --> 00:46:20,000
The very top, maybe it's in handmade platform.

849
00:46:22,100 --> 00:46:23,400
So there's handmade config.

850
00:46:23,400 --> 00:46:25,000
It's at the very, very top.

851
00:46:25,900 --> 00:46:31,300
And so it's before we even Define any of these other, like, even our

852
00:46:31,300 --> 00:46:35,500
types and that's not probably good, right?

853
00:46:35,500 --> 00:46:37,400
I mean we want to be able to use our types.

854
00:46:37,800 --> 00:46:42,400
So I feel like this kind of wants to be definitely down a little bit

855
00:46:42,400 --> 00:46:49,700
more and I feel like it also probably wants to be inside handmade dot

856
00:46:49,700 --> 00:46:50,100
CPP.

857
00:46:50,100 --> 00:46:50,600
Now,

858
00:46:52,600 --> 00:46:54,100
Or rather handmade that H.

859
00:46:54,400 --> 00:46:58,000
I don't think we want it to be part of the platform stuff because the

860
00:46:58,000 --> 00:47:02,200
platform could do its own, and we don't really need to do that, right?

861
00:47:03,600 --> 00:47:04,600
So let's see.

862
00:47:04,600 --> 00:47:09,900
That's supposed to be an R32 and that's with to have an equal sign.

863
00:47:11,300 --> 00:47:13,400
So, I think now we should be in good shape.

864
00:47:13,400 --> 00:47:16,600
And now, instead of like this, debug if stuff it's just wood, it would

865
00:47:16,600 --> 00:47:18,600
just be if, right?

866
00:47:19,000 --> 00:47:24,600
And we don't really need this anymore because those can be, you know,

867
00:47:24,600 --> 00:47:27,900
we can put those when we when we announced all of them that will

868
00:47:27,900 --> 00:47:28,900
happen automatically.

869
00:47:30,400 --> 00:47:34,000
So let's see, that's an Undeclared.

870
00:47:34,000 --> 00:47:38,000
Identifier housing on the curtain of our is handmade .h somehow not.

871
00:47:39,800 --> 00:47:40,600
Wouldn't handmade.

872
00:47:40,600 --> 00:47:41,700
Config have it in there?

873
00:47:43,600 --> 00:47:45,300
It's the global constants part.

874
00:47:46,000 --> 00:47:49,700
So I guess I probably want to leave that in there.

875
00:47:50,300 --> 00:47:55,100
So I think for now I guess I'll until I want to actually maybe do

876
00:47:55,300 --> 00:47:58,700
something more more, extensive

877
00:48:01,800 --> 00:48:04,600
I probably want to at least leave the word Global in there.

878
00:48:04,900 --> 00:48:07,600
That would be my that would be my preference.

879
00:48:08,400 --> 00:48:11,100
So I think I'm going to go ahead and just do

880
00:48:13,100 --> 00:48:15,600
Constance place of global.

881
00:48:16,200 --> 00:48:16,700
There we go.

882
00:48:18,500 --> 00:48:18,900
Okay.

883
00:48:20,600 --> 00:48:22,000
And I could even, you know, I

884
00:48:25,000 --> 00:48:26,000
I'm just going to leave with little.

885
00:48:26,600 --> 00:48:28,700
All right, so let's start with that.

886
00:48:30,300 --> 00:48:35,500
So this is global under camera debug distance for now.

887
00:48:37,600 --> 00:48:41,100
This is another, if Constance.

888
00:48:48,200 --> 00:48:49,300
What are you complaining about?

889
00:48:49,300 --> 00:48:51,300
I don't even know what that was complaining that we'll check in a

890
00:48:51,300 --> 00:48:51,800
second.

891
00:48:57,800 --> 00:48:58,300
There we go.

892
00:49:00,300 --> 00:49:03,200
Yeah, so this is just a rope modification.

893
00:49:04,500 --> 00:49:08,200
Let's go ahead and I don't know why the compiler is so confused about

894
00:49:08,200 --> 00:49:12,900
that if I guess because because it doesn't know how to interpret debug

895
00:49:12,900 --> 00:49:17,900
if I suppose, I can understand that.

896
00:49:19,300 --> 00:49:19,900
There we go.

897
00:49:28,900 --> 00:49:30,200
Let's see.

898
00:49:32,100 --> 00:49:33,200
What else we got?

899
00:49:33,300 --> 00:49:37,100
So this is entirely wrote nothing interesting Happening Here.

900
00:49:37,100 --> 00:49:37,800
Whatsoever.

901
00:49:45,600 --> 00:49:47,200
And go.

902
00:49:56,400 --> 00:50:03,100
So that didn't seem to like show lighting samples, why not?

903
00:50:07,300 --> 00:50:10,400
Global renderer show.

904
00:50:10,400 --> 00:50:11,500
Lighting samples.

905
00:50:12,200 --> 00:50:16,000
So for some reason handmade render dot CPP

906
00:50:22,200 --> 00:50:27,100
handmade vendor dot CPP, for whatever reason, does not seem to

907
00:50:27,100 --> 00:50:33,800
actually have that included, that could be because

908
00:50:34,900 --> 00:50:38,600
It's in the platform layer because I believe we moved it in there

909
00:50:38,600 --> 00:50:42,800
after we sort of had to do the, the, to tear the, the two top tier

910
00:50:42,800 --> 00:50:43,300
system.

911
00:50:43,900 --> 00:50:45,600
So let me take a quick look at that.

912
00:50:46,800 --> 00:50:52,500
Yeah, so these guys don't have that config file present and that's

913
00:50:52,500 --> 00:50:56,700
actually fine because like I said, I just going to put these in

914
00:50:56,700 --> 00:50:57,600
various places.

915
00:50:57,600 --> 00:50:59,800
I might eventually get rid of him a config

916
00:51:00,000 --> 00:51:02,700
It's all together and put these things in the files to which they

917
00:51:02,700 --> 00:51:03,300
belong.

918
00:51:04,400 --> 00:51:07,600
But for now I can just move that out and say okay will show letting

919
00:51:07,600 --> 00:51:10,700
samples is just going to be something that has to do with this

920
00:51:10,700 --> 00:51:11,600
particular file.

921
00:51:11,800 --> 00:51:15,700
And isn't something that ever actually gets looked at any other way,

922
00:51:16,000 --> 00:51:16,500
right?

923
00:51:18,700 --> 00:51:21,400
So here's a global render you software.

924
00:51:22,500 --> 00:51:30,100
This one now is I believe something that we want entirely new platform

925
00:51:30,100 --> 00:51:31,600
where layer as well.

926
00:51:31,900 --> 00:51:33,500
So that's this one.

927
00:51:33,500 --> 00:51:35,600
And I'm going to get rid of that and I'm going to put that into the

928
00:51:35,600 --> 00:51:36,400
win32.

929
00:51:36,900 --> 00:51:39,800
Handmade part exactly like it was before.

930
00:51:40,500 --> 00:51:45,300
So in the win32 handmade Parts, we've got the the global variables.

931
00:51:46,000 --> 00:51:48,200
So now we've got render use software.

932
00:51:48,500 --> 00:51:53,900
And you software rendering not not really the way you would want to

933
00:51:53,900 --> 00:51:54,700
name things.

934
00:51:55,100 --> 00:51:58,300
So I think we should go ahead and take care of that as well.

935
00:51:58,700 --> 00:52:01,000
So really what we're talking about here is two different things.

936
00:52:01,300 --> 00:52:05,800
Win32 display buffer and window this is whether or not we're using

937
00:52:05,800 --> 00:52:08,700
opengl at all, you can sort of see this.

938
00:52:09,000 --> 00:52:12,000
So what this is actually it's not render you suffer.

939
00:52:12,200 --> 00:52:18,100
This is global like, you know, display with

940
00:52:18,300 --> 00:52:22,600
Opengl or I guess I should say.

941
00:52:26,200 --> 00:52:28,900
This is whether we're using software rendering.

942
00:52:31,300 --> 00:52:35,800
Regardless of whether we're using Hardware to display it or not.

943
00:52:36,900 --> 00:52:38,400
I think that's what I was actually trying to say.

944
00:52:38,600 --> 00:52:39,000
Yeah.

945
00:52:39,600 --> 00:52:50,800
So, this should be Global render like render game via or render.

946
00:52:53,900 --> 00:52:57,200
I don't really know how to how to differentiate between the two.

947
00:52:57,400 --> 00:53:00,400
One is like do display using opengl and what is the render using

948
00:53:00,400 --> 00:53:01,100
opengl?

949
00:53:01,400 --> 00:53:02,600
So I guess it's like

950
00:53:05,900 --> 00:53:10,300
Let me flip these cases in will just say render if render everything?

951
00:53:17,700 --> 00:53:18,100
I don't know.

952
00:53:21,100 --> 00:53:22,300
Having trouble coming up with the name.

953
00:53:22,300 --> 00:53:25,900
This is because it's not, you suffer a rendering, I guess there's you

954
00:53:25,900 --> 00:53:37,500
suffer rendering and use GDI to display and they're really to, they're

955
00:53:37,500 --> 00:53:42,000
really not all the permutations don't actually exist there.

956
00:53:42,100 --> 00:53:43,900
You can't have Global use software.

957
00:53:43,900 --> 00:53:47,500
Rendering be true or false and Global use your data to display also be

958
00:53:47,500 --> 00:53:48,100
true and false.

959
00:53:48,300 --> 00:53:50,500
So really, it's more like enum

960
00:53:50,800 --> 00:53:56,500
you know, renderer rendering type and there's really a couple

961
00:53:56,500 --> 00:53:58,900
different ones, you know, there's

962
00:54:00,000 --> 00:54:01,900
To render.

963
00:54:03,800 --> 00:54:13,300
Type software and GDI, there's win32 render type software and opengl.

964
00:54:15,000 --> 00:54:17,800
And there's been through to render type opengl.

965
00:54:18,800 --> 00:54:19,300
Right.

966
00:54:19,600 --> 00:54:27,500
And another way to say this would be like soft render or render some

967
00:54:32,600 --> 00:54:39,400
Render software display GDI, there's render software display.

968
00:54:40,600 --> 00:54:48,000
Opengl and then there's render opengl display opengl, that's really

969
00:54:48,000 --> 00:54:49,800
the only cases that we support.

970
00:54:49,900 --> 00:54:53,200
We don't support the fourth case, which is render opengl and display

971
00:54:53,200 --> 00:54:53,900
with GDI.

972
00:54:54,000 --> 00:54:54,600
That's not the thing.

973
00:54:54,600 --> 00:54:59,700
We actually support, nor do I, imagine we would ever want to and I'm

974
00:54:59,700 --> 00:55:03,100
going to sort these such that by default 0 is the one we would

975
00:55:03,100 --> 00:55:05,000
normally do, right?

976
00:55:05,300 --> 00:55:09,800
So in this case, we've got win32 rendering type and I've got sort of a

977
00:55:09,800 --> 00:55:10,200
global.

978
00:55:10,600 --> 00:55:11,600
Variable here.

979
00:55:12,900 --> 00:55:13,900
Of that type.

980
00:55:14,400 --> 00:55:15,100
And

981
00:55:19,400 --> 00:55:21,400
That I think makes a little more sense to me.

982
00:55:21,600 --> 00:55:25,200
So now we get rid of this and now it's clear what's going on?

983
00:55:25,200 --> 00:55:26,400
And it's not confusing.

984
00:55:26,500 --> 00:55:33,100
So now I can say, all right, if we are doing rendering with opengl and

985
00:55:33,100 --> 00:55:35,400
displaying with opengl, then that's one case.

986
00:55:35,800 --> 00:55:42,300
So that is our Global rendering type equals that, right?

987
00:55:42,300 --> 00:55:44,800
And that is actually the bottom case.

988
00:55:45,000 --> 00:55:48,500
So that's the first case that we would have and that's the case where

989
00:55:48,500 --> 00:55:48,900
everything

990
00:55:49,100 --> 00:55:49,900
is just

991
00:55:51,400 --> 00:55:56,500
going through opengl and there's no interaction with GTI whatsoever.

992
00:55:57,000 --> 00:56:01,700
I mean what we call swap buffers, so that's everything going through

993
00:56:01,800 --> 00:56:02,400
opengl.

994
00:56:02,600 --> 00:56:06,300
Then if we're not doing that path then we need to switch here.

995
00:56:08,100 --> 00:56:10,400
And say which one of these do we want to do?

996
00:56:10,800 --> 00:56:11,100
Right?

997
00:56:11,100 --> 00:56:15,300
So if we have a little rendering type, we want that to be render

998
00:56:15,300 --> 00:56:17,800
software, display GTI, then we go down One path.

999
00:56:17,800 --> 00:56:21,700
I guess it's actually the way this happens to be set up.

1000
00:56:21,700 --> 00:56:22,900
Actually looks more like this.

1001
00:56:29,600 --> 00:56:31,400
and so, this one

1002
00:56:33,400 --> 00:56:35,300
Is.

1003
00:56:38,900 --> 00:56:39,500
Right.

1004
00:56:39,500 --> 00:56:43,200
This one is rendering software and display with opengl and there it

1005
00:56:43,200 --> 00:56:43,500
is.

1006
00:56:44,200 --> 00:56:49,400
And then finally, we have the last one which is rendering software and

1007
00:56:49,400 --> 00:56:50,400
display with GDI.

1008
00:56:50,800 --> 00:56:54,300
And so here, I can also do an assertion where I'm like, hey, by the

1009
00:56:54,300 --> 00:56:59,900
way, in this case, it had better equal the one remaining,

1010
00:57:00,000 --> 00:57:04,700
You type that we know we have because otherwise there's some kind of

1011
00:57:04,700 --> 00:57:07,900
bug where the value of global rendering type that set to something

1012
00:57:07,900 --> 00:57:08,300
bad.

1013
00:57:10,200 --> 00:57:13,400
So and like again the reason that I ordered them this way was just

1014
00:57:13,400 --> 00:57:17,400
because I want the zero value to be the default value because that way

1015
00:57:17,400 --> 00:57:19,500
it's just like automatically initiate.

1016
00:57:19,600 --> 00:57:23,900
I always like things that initialized to 0, that's always the best.

1017
00:57:23,900 --> 00:57:26,600
If you can have everything initialized by just clearing the buffer,

1018
00:57:26,600 --> 00:57:29,300
that's always my favorite because it's the least fussing.

1019
00:57:31,300 --> 00:57:34,100
So I always try to make, always the default value to be 0, wherever

1020
00:57:34,100 --> 00:57:34,600
possible.

1021
00:57:35,300 --> 00:57:38,200
So anyway, that's pretty much it for that.

1022
00:57:39,300 --> 00:57:40,300
And compile this.

1023
00:57:41,100 --> 00:57:41,700
There we go.

1024
00:57:42,200 --> 00:57:44,600
And now we're announcing it.

1025
00:57:44,900 --> 00:57:50,800
We have to it's going to bring up a kind of an interesting point that

1026
00:57:51,300 --> 00:57:54,900
will get to probably tomorrow, but when we're actually announcing it,

1027
00:57:54,900 --> 00:57:59,400
I need to put the global read and type in here, Global rendering type

1028
00:58:01,800 --> 00:58:06,700
And that is that it won't display in a way that's particularly useful

1029
00:58:06,700 --> 00:58:07,300
to us, right?

1030
00:58:07,300 --> 00:58:13,000
It'll display it as an actual number value, as opposed to one of those

1031
00:58:13,000 --> 00:58:16,100
symbolic constants, and there's ways that we can get around that,

1032
00:58:16,100 --> 00:58:17,900
which we could look at as well.

1033
00:58:18,400 --> 00:58:20,700
So anyway, this is what I think we actually want to do.

1034
00:58:20,900 --> 00:58:22,800
And so I think we're about a time.

1035
00:58:23,500 --> 00:58:27,900
So I'm going to go ahead and go to the Q&A here and what we'll do is

1036
00:58:28,000 --> 00:58:30,900
tomorrow, we will hook these up for editing.

1037
00:58:31,400 --> 00:58:33,100
And maybe clean up some of these things.

1038
00:58:33,600 --> 00:58:36,700
And then that gets us a little closer to being in a place where these

1039
00:58:36,700 --> 00:58:37,300
are good.

1040
00:58:37,600 --> 00:58:38,100
All right?

1041
00:58:39,900 --> 00:58:41,500
So, yeah, I think that's good.

1042
00:58:41,500 --> 00:58:44,000
I think getting rid of those, it just like I said, it just gets rid of

1043
00:58:44,000 --> 00:58:47,900
a little complexity and I think that's a good, that's just a good

1044
00:58:47,900 --> 00:58:51,600
thing to do, because we want to kind of focus in on now, making the

1045
00:58:51,600 --> 00:58:54,800
debug system, like, sort of usable and defining exactly what it does

1046
00:58:54,800 --> 00:58:56,100
and then not going any further.

1047
00:58:56,500 --> 00:59:02,100
All right, so I'm going to go ahead and go ahead and go to the Q&A.

1048
00:59:02,100 --> 00:59:04,400
So if anyone has questions about what we did, please preface it with

1049
00:59:04,400 --> 00:59:07,800
Q: so I can see it and I will answer it.

1050
00:59:45,400 --> 00:59:49,900
Well, we can certainly end the stream through pretty quickly if it

1051
00:59:49,900 --> 00:59:51,500
turns out there are no Q cones.

1052
00:59:56,300 --> 00:59:57,200
Oh, no way keeper.

1053
00:59:57,200 --> 00:59:58,600
Killer do you got accepted to college?

1054
00:59:58,600 --> 00:59:59,700
Congratulations.

1055
01:00:00,900 --> 01:00:02,200
That's excellent news.

1056
01:00:10,700 --> 01:00:12,000
I'm really glad to hear that.

1057
01:00:17,600 --> 01:00:21,300
For those of you who don't know, kb3 is a very regular viewer on

1058
01:00:21,300 --> 01:00:22,000
handmade hero.

1059
01:00:22,900 --> 01:00:23,900
He is here all the time.

1060
01:00:30,200 --> 01:00:33,700
Do you know 27 1988 Casey At what point is it bad to separate

1061
01:00:33,700 --> 01:00:36,400
everything into multiple files and when is it good?

1062
01:00:42,400 --> 01:00:42,900
Well.

1063
01:00:45,000 --> 01:00:48,500
I mean, I sort of answer answered this question before but I can

1064
01:00:48,500 --> 01:00:49,300
answer it again.

1065
01:00:49,300 --> 01:00:50,500
It's not really calm.

1066
01:00:50,600 --> 01:00:53,500
Very complicated, mostly.

1067
01:00:53,500 --> 01:00:56,600
The answer is that files are there.

1068
01:01:01,000 --> 01:01:04,200
Let me take this in two parts, assuming that you have control over the

1069
01:01:04,200 --> 01:01:09,000
project files, are there for your organizational benefit.

1070
01:01:09,500 --> 01:01:13,000
So the answer as to when it is good or bad to slip something into

1071
01:01:13,000 --> 01:01:16,200
multiple files is entirely based on your brain.

1072
01:01:17,400 --> 01:01:23,600
If you find that having everything in one file versus having things in

1073
01:01:23,600 --> 01:01:28,600
multiple files is better for you and you just had one gigantic file,

1074
01:01:28,700 --> 01:01:29,600
that would be fine.

1075
01:01:30,000 --> 01:01:30,700
There's nothing wrong.

1076
01:01:30,900 --> 01:01:31,600
With doing that.

1077
01:01:33,300 --> 01:01:39,000
So to a certain extent, the answer is largely dependent on what you

1078
01:01:39,000 --> 01:01:42,000
find most efficient for editing.

1079
01:01:42,100 --> 01:01:46,200
Like, I like to have an h-file in a CPP file, as you can see for

1080
01:01:46,200 --> 01:01:50,300
generally General regions of my code so that I can look at them

1081
01:01:50,300 --> 01:01:51,700
side-by-side in the editor.

1082
01:01:52,300 --> 01:01:55,900
And it just so happens that the editors that I use like emacs are much

1083
01:01:55,900 --> 01:01:59,800
better at doing that than in trying to keep multiple views into the

1084
01:01:59,800 --> 01:02:00,500
same buffer.

1085
01:02:03,300 --> 01:02:06,200
And so that's just the way I got used to separating my code.

1086
01:02:06,400 --> 01:02:10,400
Now if I had used an editor that wasn't like that or that maybe had

1087
01:02:10,400 --> 01:02:15,300
better support for like browse info kinds of stuff I maybe I wouldn't

1088
01:02:15,300 --> 01:02:16,900
divide my files that way right?

1089
01:02:17,500 --> 01:02:24,600
And so the way you divide files is almost universally, it's the case

1090
01:02:24,600 --> 01:02:29,100
that you want to divide it, the way that you that helps you program

1091
01:02:29,100 --> 01:02:29,900
most effectively.

1092
01:02:30,400 --> 01:02:31,600
Now that said

1093
01:02:31,700 --> 01:02:33,700
In a circumstance where you're not programming.

1094
01:02:33,700 --> 01:02:35,600
Like, we're programming a handmade here, like and handmade here.

1095
01:02:35,600 --> 01:02:38,600
We have one translation unit essentially for the entire game.

1096
01:02:38,900 --> 01:02:41,700
So everything just gets slammed into one transition and off.

1097
01:02:41,700 --> 01:02:45,300
It goes compile time for super fast blah blah blah.

1098
01:02:46,100 --> 01:02:50,100
Now if you're on a project that is not that way.

1099
01:02:50,500 --> 01:02:53,800
And it's one of these nightmare things, like, oh, I don't know.

1100
01:02:53,800 --> 01:02:58,100
It's like, like, maybe the Unreal Engine these days where it's like,

1101
01:02:58,100 --> 01:02:59,800
8,000 files, that it takes seven years.

1102
01:03:00,000 --> 01:03:01,600
To run a compiled, right?

1103
01:03:02,400 --> 01:03:08,900
At that point, you may have a real real, real hard.

1104
01:03:08,900 --> 01:03:12,300
Technical reason for splitting something up into multiple files.

1105
01:03:12,300 --> 01:03:18,000
And the reason is, because anytime you change a file, it and all of

1106
01:03:18,000 --> 01:03:20,700
its dependencies have to be recompiled.

1107
01:03:21,200 --> 01:03:27,300
And if that costs a lot, then you have to think about those costs when

1108
01:03:27,300 --> 01:03:29,500
making decisions about how to split things into files.

1109
01:03:30,000 --> 01:03:34,200
So, if I was programming in an environment where I had to worry about

1110
01:03:34,200 --> 01:03:37,700
that, I might make very different decisions about how my things are

1111
01:03:37,700 --> 01:03:42,200
split into files because now there's a real reason to and not to split

1112
01:03:42,200 --> 01:03:45,800
or not split things into files, right?

1113
01:03:47,500 --> 01:03:50,200
And when I'm working with a code base like that I have to be aware of

1114
01:03:50,200 --> 01:03:50,600
that.

1115
01:03:51,800 --> 01:03:57,900
So so you kind of have to be aware about the build process of the

1116
01:03:57,900 --> 01:03:59,900
project that you're working on and

1117
01:04:00,000 --> 01:04:04,000
That may have constraints on how you separate things to file.

1118
01:04:04,000 --> 01:04:07,900
Such that what I said in the first part, which is you should organize

1119
01:04:07,900 --> 01:04:10,700
files, the way that makes it most easy for you to keep in your head

1120
01:04:10,700 --> 01:04:11,400
and work with.

1121
01:04:12,400 --> 01:04:15,500
You may not have the luxury of doing that, depending on the

1122
01:04:15,500 --> 01:04:19,900
circumstances, as you sort of move into certain products that don't

1123
01:04:19,900 --> 01:04:22,700
have a reasonable compile time that don't have a reasonable build

1124
01:04:22,700 --> 01:04:25,200
process, similarly,

1125
01:04:26,300 --> 01:04:31,200
If you are working on a team with lock-based source code control, so

1126
01:04:31,600 --> 01:04:33,700
some source code Control Systems, right?

1127
01:04:33,700 --> 01:04:39,500
Like get or CVS SVN like the sort of the traditional unix-style source

1128
01:04:39,500 --> 01:04:39,600
code.

1129
01:04:39,600 --> 01:04:43,300
Controls are locked lists, I mean, sometimes they have optional

1130
01:04:43,300 --> 01:04:46,900
locking, but for the most part, all the edits are locked list, which

1131
01:04:46,900 --> 01:04:50,600
means that when you are editing your code, you can edit whatever you

1132
01:04:50,600 --> 01:04:51,000
want.

1133
01:04:51,000 --> 01:04:55,500
And then the time that you deal with making changes that overlap with

1134
01:04:55,500 --> 01:04:56,000
someone else's,

1135
01:04:56,100 --> 01:04:59,400
Just is when you go to like check you know the to merge those things

1136
01:04:59,400 --> 01:05:00,000
together.

1137
01:05:01,300 --> 01:05:05,600
But other source code control systems like perforce for example by

1138
01:05:05,600 --> 01:05:09,800
default operate in a locked mode which means that you actually say

1139
01:05:09,800 --> 01:05:13,100
that you're going to edit a file and you're like I'm going to edit

1140
01:05:13,100 --> 01:05:16,900
this file now and no one else can edit that file while you're editing

1141
01:05:16,900 --> 01:05:17,500
the file.

1142
01:05:18,100 --> 01:05:21,500
And so if you're in a lock based setting like that

1143
01:05:22,100 --> 01:05:26,800
Again, I would never don't use this order to a system like that, it's

1144
01:05:26,800 --> 01:05:33,500
really bad if you are on teams so you really don't want that at rad.

1145
01:05:33,500 --> 01:05:36,500
It was fine to use perforce because it's usually one person, one

1146
01:05:36,500 --> 01:05:41,000
project and so perforce and a and of course this is sort of a separate

1147
01:05:41,000 --> 01:05:41,300
story.

1148
01:05:41,300 --> 01:05:45,000
When we were trying to find a source code show utility use there were

1149
01:05:45,000 --> 01:05:45,400
very few.

1150
01:05:45,400 --> 01:05:47,800
There's a lot more of them available now than there were today.

1151
01:05:47,800 --> 01:05:51,700
Then there there were a lot more available today than there were then.

1152
01:05:51,700 --> 01:05:52,100
So we didn't

1153
01:05:52,200 --> 01:05:52,700
Much of a choice.

1154
01:05:52,700 --> 01:05:55,400
Perforce wasn't like the only reasonable source code control you could

1155
01:05:55,400 --> 01:05:55,900
use.

1156
01:05:56,300 --> 01:05:59,800
It was like either that or CVS and the all the other options

1157
01:06:00,000 --> 01:06:03,900
Release awful things nowadays, you don't have to worry about that.

1158
01:06:03,900 --> 01:06:05,100
You wouldn't pick perforce.

1159
01:06:05,100 --> 01:06:08,100
You do something else but you could use SVN, for example.

1160
01:06:08,900 --> 01:06:13,300
So anyway, that's a whole nother story, but point being I would never

1161
01:06:13,300 --> 01:06:14,900
use a lock one today.

1162
01:06:14,900 --> 01:06:18,500
If you could avoid it, unless it's only you using it, which case it

1163
01:06:18,500 --> 01:06:19,500
doesn't matter so much.

1164
01:06:20,600 --> 01:06:23,600
But if you should find yourself in that situation and it's beyond your

1165
01:06:23,600 --> 01:06:26,100
control because you're just on a team and they'd use that, right?

1166
01:06:26,100 --> 01:06:28,100
You get a job somewhere and you have to do it.

1167
01:06:28,100 --> 01:06:30,000
You don't have the option of saying, hey guys, it's stupid, use a

1168
01:06:30,000 --> 01:06:30,600
locking.

1169
01:06:31,800 --> 01:06:32,800
So let's go control system.

1170
01:06:33,200 --> 01:06:34,900
How about everyone just change that right now?

1171
01:06:34,900 --> 01:06:36,300
That's not going to happen, right?

1172
01:06:36,600 --> 01:06:40,700
And so at that point you kind of have to be in a in of the other

1173
01:06:40,700 --> 01:06:44,700
standing well, whatever the grant, whatever the size of the files are

1174
01:06:44,700 --> 01:06:46,700
that I choose and how I choose to break them up, that's the

1175
01:06:46,700 --> 01:06:48,600
granularity of the Locking now.

1176
01:06:49,200 --> 01:06:50,200
And so again,

1177
01:06:50,400 --> 01:06:56,400
You have this external imposition on file, you know, kind of file

1178
01:06:56,400 --> 01:07:00,100
setups having something that has nothing to do with what you might

1179
01:07:00,100 --> 01:07:04,300
want to do and it's more about what the tools are forcing you to do,

1180
01:07:04,500 --> 01:07:05,100
right?

1181
01:07:07,000 --> 01:07:09,400
So so yeah.

1182
01:07:11,800 --> 01:07:12,600
That's what I would say.

1183
01:07:36,900 --> 01:07:38,200
Do you try 7 1988?

1184
01:07:38,200 --> 01:07:38,500
Okay.

1185
01:07:38,500 --> 01:07:41,100
So basically personal preference compile time and external positions,

1186
01:07:41,200 --> 01:07:42,100
thank you very much for your answer.

1187
01:07:42,300 --> 01:07:42,900
No problem.

1188
01:07:46,800 --> 01:07:50,800
Rohit and does texture download on this stream mean GL text image 2D.

1189
01:07:51,800 --> 01:07:55,600
Well not really I guess what I would say is

1190
01:07:58,700 --> 01:07:59,300
so,

1191
01:08:01,300 --> 01:08:09,100
At the moment we wanted the texture, download code to be relatively

1192
01:08:09,100 --> 01:08:11,300
correct structurally, right.

1193
01:08:11,900 --> 01:08:18,700
So we haven't done anything to aggressive there, but we did make it so

1194
01:08:18,700 --> 01:08:24,399
that the asset background threads can call GL text image, 2D on them

1195
01:08:24,399 --> 01:08:26,700
to submit the textures to the graphics card.

1196
01:08:27,899 --> 01:08:31,399
That is happening, but we found that that was unreliable on Nvidia.

1197
01:08:31,399 --> 01:08:33,399
So we are waiting for them to tell us what they think.

1198
01:08:33,399 --> 01:08:37,100
The best way for us to do that would be, should we never try to call

1199
01:08:37,100 --> 01:08:40,899
on a separate thread because they, it was their materials originally.

1200
01:08:41,200 --> 01:08:43,700
That made me think they would prefer us to do that.

1201
01:08:44,000 --> 01:08:44,700
That makes sense.

1202
01:08:45,800 --> 01:08:52,800
So, on the stream right now, text or download, I think has been said

1203
01:08:52,800 --> 01:08:56,399
to just refer to the fact that getting the texture down to the card.

1204
01:09:00,399 --> 01:09:02,899
Anything in involved in that.

1205
01:09:03,000 --> 01:09:06,899
And right now the only thing we really have to do for that is GL text

1206
01:09:06,899 --> 01:09:11,500
image 2D because at the moment we're not trying to do any other kind

1207
01:09:11,500 --> 01:09:14,300
of optimization of that path in the future.

1208
01:09:14,300 --> 01:09:16,600
The process of getting the texture down to the card.

1209
01:09:16,700 --> 01:09:22,300
Might involve other steps like writing into graphics card memory

1210
01:09:22,300 --> 01:09:25,500
directly off the load for example.

1211
01:09:28,200 --> 01:09:29,500
Hopefully, that answers the question.

1212
01:09:29,800 --> 01:09:33,399
So the phrase texture download is just kind of nebulous at this point.

1213
01:09:33,399 --> 01:09:35,100
It doesn't mean anything in particular.

1214
01:09:36,600 --> 01:09:43,100
It just means getting the the texture data down to the graphics card

1215
01:09:43,100 --> 01:09:44,100
so I can use it.

1216
01:09:45,100 --> 01:09:47,399
People often call that texture upload as well.

1217
01:09:47,399 --> 01:09:50,899
We talked about this on the stream, probably the better way for me to

1218
01:09:50,899 --> 01:09:52,000
have set it the whole time.

1219
01:09:52,000 --> 01:09:55,600
If I was trying to think very specifically about the best monoculture,

1220
01:09:55,600 --> 01:09:57,500
would actually call it a texture transfer.

1221
01:09:59,700 --> 01:10:03,000
But because whether it's a downloader and upload, it's like,

1222
01:10:04,500 --> 01:10:05,900
Depends on Whose perspective.

1223
01:10:06,300 --> 01:10:08,000
Are you talking about the GPU?

1224
01:10:08,400 --> 01:10:09,800
Are you talking about the CPU?

1225
01:10:09,800 --> 01:10:12,900
Whose side is the, right?

1226
01:10:12,900 --> 01:10:15,600
So it's X, your transfer is really what it is.

1227
01:10:24,000 --> 01:10:25,300
Dude, in basement.

1228
01:10:25,500 --> 01:10:29,500
Have you ever used pragma section and group memory into sections and

1229
01:10:29,500 --> 01:10:32,900
read the map file or have you always used to stop metaprogramming?

1230
01:10:33,400 --> 01:10:35,200
Yeah, I've never done that.

1231
01:10:35,200 --> 01:10:37,600
No, I usually use to pass metaprogramming.

1232
01:10:38,400 --> 01:10:43,500
I don't I don't ever try to do back red metaprogramming.

1233
01:10:52,200 --> 01:10:53,400
Kubrick Caleb off topic.

1234
01:10:53,400 --> 01:10:56,100
If you want to extend the hot code, reloading to work with structure

1235
01:10:56,100 --> 01:10:56,600
changes.

1236
01:10:56,600 --> 01:10:59,800
Wouldn't you have to store metadata about each struct along with the

1237
01:10:59,800 --> 01:11:03,000
information and every allocation so that you could walk the data,

1238
01:11:03,000 --> 01:11:07,000
adjust the data and move around and fix pointers, yes, but it is

1239
01:11:07,000 --> 01:11:08,500
easier than that.

1240
01:11:08,500 --> 01:11:12,900
Makes it sound sort of that's that's one thing.

1241
01:11:14,200 --> 01:11:17,100
And the other thing that I would say is I think we talked about this

1242
01:11:17,100 --> 01:11:21,300
on the stream because I believe Elvin had a question about that.

1243
01:11:21,500 --> 01:11:23,900
And I kind of walked through how that process works.

1244
01:11:24,600 --> 01:11:29,900
So on the stream somewhere is is me talking about that but I'm afraid

1245
01:11:29,900 --> 01:11:35,300
I don't know exactly where, but yes you you basically just have to

1246
01:11:35,300 --> 01:11:41,600
have what is essentially the same as the struct that see.

1247
01:11:41,900 --> 01:11:45,900
You know, the information see store is for a struct to know how its

1248
01:11:45,900 --> 01:11:46,600
laid out.

1249
01:11:47,000 --> 01:11:51,300
You are keeping that same thing but that's not that hard because

1250
01:11:51,400 --> 01:11:56,200
Cuz I mean a c compiler is not that complicated, right?

1251
01:11:56,700 --> 01:11:56,900
That?

1252
01:11:56,900 --> 01:11:59,100
That that part of it so you can power is very simple.

1253
01:12:00,100 --> 01:12:03,600
So it's not like it's not a huge onerous burden to do this.

1254
01:12:03,700 --> 01:12:10,500
It's, you know, it's a couple days of work but it's not some crazy,

1255
01:12:10,500 --> 01:12:13,400
ownerís weird thing, that makes sense.

1256
01:12:14,900 --> 01:12:15,200
Guitar.

1257
01:12:15,200 --> 01:12:20,400
Maybe seven, do you specifically have to say in line for functions to

1258
01:12:20,400 --> 01:12:22,800
be inlined or does the compiler?

1259
01:12:22,800 --> 01:12:24,300
Do that automagically?

1260
01:12:24,600 --> 01:12:27,200
If it finds one or several to fit?

1261
01:12:28,800 --> 01:12:34,900
It's both so within lining, it's certainly a hint.

1262
01:12:35,400 --> 01:12:37,300
So it doesn't really do anything.

1263
01:12:37,300 --> 01:12:38,800
It's just telling the compiler.

1264
01:12:39,300 --> 01:12:42,700
In case you weren't going to consider this for inlining, do consider

1265
01:12:42,700 --> 01:12:44,600
this for inlining, but the compiler.

1266
01:12:44,800 --> 01:12:49,400
In have to do it and also a function that's not marked in line, the

1267
01:12:49,400 --> 01:12:51,900
compiler doesn't have to the compiler.

1268
01:12:51,900 --> 01:12:53,600
Doesn't have to leave that out of line.

1269
01:12:53,600 --> 01:12:55,000
It can inline that as well.

1270
01:12:55,200 --> 01:12:58,000
So the compiler is given pretty much complete latitude to, in line,

1271
01:12:58,000 --> 01:13:02,100
whatever it wants, whenever it wants and to the degree the degree to,

1272
01:13:02,100 --> 01:13:04,900
which it takes your suggestions into account is entirely up to it.

1273
01:13:05,300 --> 01:13:10,400
There are there's a directive in Ms.

1274
01:13:10,400 --> 01:13:11,900
V, C to force inlining.

1275
01:13:12,100 --> 01:13:14,500
A directive not to force in lining

1276
01:13:14,700 --> 01:13:16,700
Or to force non inlining.

1277
01:13:17,900 --> 01:13:20,700
I don't know if either of those are required, but I think they're

1278
01:13:20,900 --> 01:13:21,900
almost always followed.

1279
01:13:21,900 --> 01:13:27,200
So, unlike in line, which could often not be followed, if the compiler

1280
01:13:27,200 --> 01:13:30,200
didn't want to, I think force in lines almost always followed if the

1281
01:13:30,200 --> 01:13:33,600
compiler actually can, but there may be parts of the compiler just

1282
01:13:33,600 --> 01:13:34,400
doesn't.

1283
01:13:34,500 --> 01:13:39,400
It's like the compiler doesn't do that or whatever and like it doesn't

1284
01:13:39,400 --> 01:13:41,400
want to do that for some very hard reason.

1285
01:13:42,100 --> 01:13:44,500
Like it doesn't have code to do it properly or something like that.

1286
01:13:44,700 --> 01:13:47,200
Things that would require too many times or it doesn't know how to, I

1287
01:13:47,200 --> 01:13:47,600
don't know.

1288
01:13:48,200 --> 01:13:50,700
So, I think for certain lines pretty reliable and forced, not in

1289
01:13:50,700 --> 01:13:53,800
lines, also pretty reliable, in terms of, you know, would be rare for

1290
01:13:53,800 --> 01:13:57,900
them, not to do it, whereas the inline keyword, I don't get the sense

1291
01:13:57,900 --> 01:13:59,000
that that's that strong.

1292
01:13:59,100 --> 01:14:01,300
I think that's like, if the compiler agrees with you, it'll do it, if

1293
01:14:01,300 --> 01:14:02,000
not, it won't.

1294
01:14:04,700 --> 01:14:05,400
But I don't know.

1295
01:14:08,100 --> 01:14:11,500
It tends not to be that big of a concern like unless your code is

1296
01:14:11,500 --> 01:14:15,200
super object-oriented nastiness where it's got all these like, you

1297
01:14:15,200 --> 01:14:19,000
know, little tiny functions that don't do much just to get it things.

1298
01:14:19,800 --> 01:14:24,200
Then, you know, most of the time, you know, you're just in lining,

1299
01:14:24,300 --> 01:14:27,500
your operations and, you know, either the compiler desert doesn't,

1300
01:14:27,500 --> 01:14:28,600
it's not a huge deal.

1301
01:14:29,000 --> 01:14:32,500
The couple places where you've got real Workhorse code happening,

1302
01:14:32,500 --> 01:14:34,400
where you care a lot about what's happening.

1303
01:14:34,900 --> 01:14:37,400
Are things you tend to optimize a little bit by hand anyway, and

1304
01:14:37,400 --> 01:14:37,700
you're not

1305
01:14:37,800 --> 01:14:42,200
Going to, you know, you're not going to be worrying about that, you're

1306
01:14:42,200 --> 01:14:42,900
going to look at that.

1307
01:14:42,900 --> 01:14:45,600
Code just did the compiler in line suffered in it if it didn't you

1308
01:14:45,600 --> 01:14:48,100
could manually in line if you have two or turn into a macro.

1309
01:14:48,100 --> 01:14:51,600
So you know it's it's really not a huge deal.

1310
01:14:51,900 --> 01:14:54,600
I wouldn't spend a lot of time really worrying about inlining.

1311
01:14:54,600 --> 01:14:58,400
It's really not that that big a deal.

1312
01:15:08,400 --> 01:15:11,200
Would you try to fix the memory in place or when you copy it to a new

1313
01:15:11,200 --> 01:15:16,200
memory Arena, you hat, you have to it has to be new Arena.

1314
01:15:16,500 --> 01:15:18,800
And the reason for that is because the size is can change and they can

1315
01:15:18,800 --> 01:15:20,300
change in a way that you can't fix.

1316
01:15:20,600 --> 01:15:23,400
So, for example, if a struck got bigger, you can't necessarily change

1317
01:15:23,400 --> 01:15:25,000
it in place because there's data that comes after it.

1318
01:15:25,000 --> 01:15:26,500
You're going to overwrite it, right?

1319
01:15:26,800 --> 01:15:29,800
So when you're doing a remapping, it has to be two new memory.

1320
01:15:29,800 --> 01:15:34,200
Typically it's not super plausible to write a system that would use

1321
01:15:34,200 --> 01:15:36,700
the same memory space so during

1322
01:15:36,800 --> 01:15:40,600
Remapping you would make a new Arena and you would copy from one room

1323
01:15:40,600 --> 01:15:41,300
to the other.

1324
01:15:47,600 --> 01:15:48,400
Programming style.

1325
01:15:48,400 --> 01:15:52,200
Why do you have the function return on the proceeding line?

1326
01:15:53,200 --> 01:15:55,300
Oh, you're talking about this.

1327
01:15:55,600 --> 01:15:56,300
This was a habit.

1328
01:15:56,300 --> 01:15:58,000
I got into that.

1329
01:15:58,000 --> 01:16:02,400
I just sort of like, which is I like having the name of the function.

1330
01:16:02,400 --> 01:16:03,600
Be the first thing on the line.

1331
01:16:04,400 --> 01:16:10,200
The way I originally started as amusing, although I don't ever use

1332
01:16:10,200 --> 01:16:13,900
them anymore, I used to use like templates a lot when I programmed

1333
01:16:14,000 --> 01:16:15,300
when I used to be more

1334
01:16:15,500 --> 01:16:17,300
I used to be much more C + + e.

1335
01:16:18,600 --> 01:16:23,800
Kind of back in like, in 1998 1999 and I found that template

1336
01:16:23,800 --> 01:16:27,800
specifiers were so long that I ended up having to break my function.

1337
01:16:27,800 --> 01:16:31,100
Definitions up into two lines anyway like that my function

1338
01:16:31,900 --> 01:16:34,700
declarations or definitions in this case.

1339
01:16:35,600 --> 01:16:41,000
And so I just even after I stopped using the templates, I still kind

1340
01:16:41,000 --> 01:16:42,700
of liked it that way so that's just how I do it.

1341
01:17:02,300 --> 01:17:03,200
Strange Zack.

1342
01:17:03,400 --> 01:17:07,400
Yeah I don't know what the deal was when I asked about inlining last

1343
01:17:07,400 --> 01:17:08,400
night it blew up everywhere.

1344
01:17:08,400 --> 01:17:08,700
Yeah.

1345
01:17:08,700 --> 01:17:09,200
I mean,

1346
01:17:13,500 --> 01:17:17,700
I really just don't think about inlining hardly at all.

1347
01:17:17,800 --> 01:17:21,300
I just, I call functions in line more, as a note to myself.

1348
01:17:21,300 --> 01:17:24,200
I think I've said this before at than anything else I put in line

1349
01:17:24,200 --> 01:17:27,800
before something it's like, me sort of saying either, I think this

1350
01:17:27,800 --> 01:17:30,500
should should never be something that actually gets called.

1351
01:17:30,500 --> 01:17:33,000
It should probably be saying that just weld it in because it's

1352
01:17:33,000 --> 01:17:36,000
something that wants to be optimized away, right?

1353
01:17:38,000 --> 01:17:38,800
you know, like,

1354
01:17:42,200 --> 01:17:45,400
you know, you get a function like this and I'm just, like I just want

1355
01:17:45,400 --> 01:17:49,200
this to get inserted so you can optimize it away and you can see it so

1356
01:17:49,200 --> 01:17:52,400
that the compiler will look at those terms in the context of

1357
01:17:52,400 --> 01:17:54,500
optimizing, the thing that they get inserted into.

1358
01:17:54,800 --> 01:17:58,500
It's either that or I just, this is something I think only gets called

1359
01:17:58,500 --> 01:17:59,000
once.

1360
01:17:59,000 --> 01:17:59,800
So I just want to smooth.

1361
01:18:00,000 --> 01:18:01,400
All these things together, right?

1362
01:18:01,400 --> 01:18:05,700
Because they don't need to be broken up, but I really am.

1363
01:18:05,700 --> 01:18:09,700
Not like I'm not sitting around agonizing over it because

1364
01:18:10,700 --> 01:18:13,700
If I'm doing performance optimization then I need to start like

1365
01:18:13,700 --> 01:18:18,200
measuring things and I can't these days, there's no way to just know

1366
01:18:18,200 --> 01:18:20,100
if it was smarter to inline something than not.

1367
01:18:20,200 --> 01:18:22,700
I mean it's just it's just simply not plausible.

1368
01:18:24,000 --> 01:18:26,400
And so I feel like for the most part

1369
01:18:28,600 --> 01:18:32,200
I just don't care that much about whether the compiler will or won't

1370
01:18:32,200 --> 01:18:32,600
inline it.

1371
01:18:32,600 --> 01:18:36,900
Because when it actually gets to be important further down the line,

1372
01:18:36,900 --> 01:18:39,600
I'm going to have to start timing those things anyway to know whether

1373
01:18:39,600 --> 01:18:41,600
I should have been lined it or not, if it was something that was

1374
01:18:41,600 --> 01:18:43,800
really that, you know, on the edge

1375
01:18:54,300 --> 01:18:55,000
Gary Johansen.

1376
01:18:55,000 --> 01:18:57,800
I was messing around with Loop unrolling by hand, and got massive

1377
01:18:57,800 --> 01:18:58,400
speed UPS.

1378
01:18:58,400 --> 01:19:02,300
Any idea why that would be well in order to know why?

1379
01:19:02,300 --> 01:19:02,700
That would be?

1380
01:19:02,700 --> 01:19:05,200
I'd probably have to look at the code that you were unrolling and then

1381
01:19:05,200 --> 01:19:06,500
maybe I could give you some guesses.

1382
01:19:07,200 --> 01:19:13,400
However, I would say, as you've seen me do on the show before you can

1383
01:19:13,400 --> 01:19:16,100
look at the Assembly Language that was generated and you should be

1384
01:19:16,100 --> 01:19:18,800
able to maybe make some guesses, take a look at what it looks like

1385
01:19:18,800 --> 01:19:22,800
with and without enrolling in and figure out what was the big change.

1386
01:19:23,000 --> 01:19:24,200
They're right.

1387
01:19:54,900 --> 01:20:00,500
All right, I think that maybe all the questions for today.

1388
01:20:16,900 --> 01:20:18,100
I think that'll be it for today.

1389
01:20:18,600 --> 01:20:21,600
Alright, I'm going to go ahead and close it down.

1390
01:20:28,300 --> 01:20:28,900
There we go.

1391
01:20:29,900 --> 01:20:31,900
Thank you everyone for joining me for another episode of handmade

1392
01:20:31,900 --> 01:20:32,100
hero.

1393
01:20:32,100 --> 01:20:33,300
It's been a pleasure coding with you.

1394
01:20:33,300 --> 01:20:37,000
As always, if you would like to follow along at home, you can always

1395
01:20:37,000 --> 01:20:39,700
pre-order the game on handmade hero dot-org and it comes with all the

1396
01:20:39,700 --> 01:20:44,100
source code, so that you can play around with it in the comfort of

1397
01:20:44,100 --> 01:20:45,200
your own computer.

1398
01:20:46,300 --> 01:20:48,800
We also have Forum site, if you want to ask questions about the

1399
01:20:48,800 --> 01:20:52,700
series, as you work through the programming, or if you have other

1400
01:20:52,700 --> 01:20:56,100
programming questions, we have a patreon page if you want to support

1401
01:20:56,100 --> 01:20:56,900
the video series because

1402
01:20:57,000 --> 01:20:57,700
Subscribe to that.

1403
01:20:57,700 --> 01:20:59,300
It is always very much appreciated.

1404
01:20:59,400 --> 01:20:59,800
We also have a

1405
01:21:00,000 --> 01:21:02,000
Pot, the tweets, the schedule at you.

1406
01:21:03,000 --> 01:21:05,200
So if you want to know, when this is going to be live, you can hit

1407
01:21:05,200 --> 01:21:08,500
that and the answer to that will it will be live tomorrow.

1408
01:21:08,500 --> 01:21:09,000
5:00 p.m.

1409
01:21:09,000 --> 01:21:10,600
Pacific Daylight time.

1410
01:21:11,000 --> 01:21:12,200
So check that out.

1411
01:21:12,500 --> 01:21:14,900
If you would like to see some more programming.

1412
01:21:15,400 --> 01:21:19,800
The other thing that I try to mention is the editor that we use was

1413
01:21:19,800 --> 01:21:23,700
actually created by someone who watches the stream, it's called for

1414
01:21:23,700 --> 01:21:24,200
coder.

1415
01:21:24,300 --> 01:21:27,900
If you type for coder into Google, you'll get this page and you can

1416
01:21:28,400 --> 01:21:29,800
become a patron of

1417
01:21:30,000 --> 01:21:34,800
of his development progress, at which point you can pick from a number

1418
01:21:34,800 --> 01:21:37,600
of different reward tiers previously.

1419
01:21:37,600 --> 01:21:41,500
I had mentioned that if you do the $10 tier, you get the handmade hero

1420
01:21:41,800 --> 01:21:45,400
config that we use here on the stream, Alan asked me to just give that

1421
01:21:45,400 --> 01:21:48,600
away for free and it's his money.

1422
01:21:48,600 --> 01:21:54,300
So if that's what he would like it will just come with handmade hero

1423
01:21:54,300 --> 01:21:54,900
from now on.

1424
01:21:55,100 --> 01:21:59,800
So, what I can do is the the for coder here.

1425
01:22:01,300 --> 01:22:04,200
That we were using, I guess, it's, for code or Casey.

1426
01:22:06,700 --> 01:22:07,500
Somewhere on here.

1427
01:22:08,300 --> 01:22:08,800
Where is it?

1428
01:22:09,000 --> 01:22:18,200
It's again, it's it's for coder Casey for coder, Casey that Fork Road

1429
01:22:18,200 --> 01:22:19,400
or Casey file.

1430
01:22:20,300 --> 01:22:23,400
I'm just going to put it in the handmade directory and as of today,

1431
01:22:24,000 --> 01:22:25,000
it'll just be in there.

1432
01:22:25,000 --> 01:22:32,700
So anyone who has who has handmade hero can can just use it so that

1433
01:22:32,700 --> 01:22:35,800
I'll put that in the, the Miss directory, I guess, because it's not

1434
01:22:35,800 --> 01:22:35,900
really

1435
01:22:36,000 --> 01:22:36,900
Part of our code.

1436
01:22:37,200 --> 01:22:38,200
So it'll just go in there.

1437
01:22:38,700 --> 01:22:43,800
So there it is and I will try to keep that up to date, as I make

1438
01:22:43,800 --> 01:22:44,400
changes to it.

1439
01:22:44,400 --> 01:22:45,600
So you can grab it from there.

1440
01:22:46,500 --> 01:22:48,000
That's it for today.

1441
01:22:49,200 --> 01:22:50,700
I hope to see you guys tomorrow.

1442
01:22:51,000 --> 01:22:54,000
Until then have fun programming and I will see you all on the

1443
01:22:54,000 --> 01:22:54,500
internet.

1444
01:22:54,500 --> 01:22:55,400
Take it easy, everybody.

